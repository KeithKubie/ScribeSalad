WEBVTT
Kind: captions
Language: en

00:12:27.361 --> 00:12:28.004
&gt;
   &gt;&gt;

00:12:28.005 --> 00:12:29.005
   &gt;&gt;
   &gt;&gt;

00:12:28.005 --> 00:12:29.005
   &gt;&gt;
   &gt;&gt;

00:12:28.005 --> 00:12:29.005
   &gt;&gt;
   &gt;&gt;

00:12:28.005 --> 00:12:29.005
   &gt;&gt;
   &gt;&gt;

00:12:28.005 --> 00:12:29.005
   &gt;&gt;
   &gt;&gt;

00:12:28.005 --> 00:12:29.005
   &gt;&gt;
   &gt;&gt;

00:12:28.005 --> 00:12:29.005
   &gt;&gt;
   &gt;&gt;

00:12:28.005 --> 00:12:29.005
   &gt;&gt;
   &gt;&gt;

00:12:28.005 --> 00:12:29.005
   &gt;&gt;
   &gt;&gt;

00:12:28.005 --> 00:12:29.005
   &gt;&gt;
   &gt;&gt;

00:12:28.005 --> 00:12:29.005
   &gt;&gt;
   &gt;&gt;

00:12:28.005 --> 00:12:29.005
   &gt;&gt;
   &gt;&gt;

00:12:28.005 --> 00:12:30.240
   &gt;&gt; I pledge allegiance answer
 to the flag of the United 

00:12:31.905 --> 00:12:33.317
States of America and to the 
republic for which it stands, 

00:12:33.318 --> 00:12:37.898
one nation, under God, 
indivisible with liberty and 

00:12:37.899 --> 00:12:39.899
justice for 

00:15:24.527 --> 00:15:25.527
all.
   &gt;&gt;

00:15:24.527 --> 00:15:24.741
   &gt;&gt;
   &gt;&gt;

00:15:24.742 --> 00:15:26.742
   &gt;&gt;
   &gt;&gt; Tight tight

00:15:28.672 --> 00:15:30.672
  tight tight

00:21:51.888 --> 00:21:54.622
   &gt;&gt;
   &gt;&gt;

00:21:54.623 --> 00:21:55.623
   &gt;&gt;
   &gt;&gt;

00:21:54.623 --> 00:21:55.623
   &gt;&gt;
   &gt;&gt;

00:21:54.623 --> 00:21:56.588
   &gt;&gt; I pledge allegiance to the
 flag of the United States of 

00:21:56.589 --> 00:21:59.999
America and to the republic for 
which it stands, one nation, 

00:22:00.000 --> 00:22:04.737
under God, indivisible with 

00:22:09.611 --> 00:22:11.611
liberty 

00:26:47.864 --> 00:26:50.997
   &gt;&gt; MILENIA NIKOLIC:  ,.
   &gt;&gt; KOBI GLICK:  ,.

00:26:47.864 --> 00:26:49.864
   &gt;&gt; SARAH THOMPSON:  , test,.

00:31:57.890 --> 00:32:03.622
Play, Google Play console, 
Google Play 

00:32:08.517 --> 00:32:10.517
Google Play

00:32:13.480 --> 00:32:16.391
 Console.  

00:32:21.264 --> 00:32:23.264
Beta,

00:32:25.481 --> 00:32:27.481
 Play, what is

00:32:28.913 --> 00:32:32.067
 app, what is app, whas

00:33:01.701 --> 00:33:05.281
WhatsApp, Omni drone tight tan 

00:33:10.260 --> 00:33:12.260
ight tan

00:33:26.623 --> 00:33:28.623
Titan

00:33:50.920 --> 00:33:52.920
Brawl, free

00:34:00.788 --> 00:34:02.832
Free 

00:34:07.706 --> 00:34:09.706
Letics, deliver

00:34:30.424 --> 00:34:32.424
deliveroo, app 

00:34:35.038 --> 00:34:37.038
App

00:34:48.593 --> 00:34:51.510
Signing.  

00:34:56.346 --> 00:34:58.346
Spec space

00:35:08.833 --> 00:35:10.833
SpaceApe, big fish

00:35:12.849 --> 00:35:14.849
 Big Fish

00:35:31.989 --> 00:35:33.989
Games.  Sand box dome 

00:35:37.436 --> 00:35:39.733
ox dome Sandbox Dome 

00:35:59.427 --> 00:36:01.427
C ,.

00:52:42.276 --> 00:52:45.033
applause
   Plen.

00:52:45.034 --> 00:52:46.317
   (Applause).
   ).  Good afternoon, everyone,

00:52:46.318 --> 00:52:49.656
 thanks for joining us here in 
the audience and on the Live 

00:52:50.177 --> 00:52:53.065
Stream.  My name is Sarah.  I 
head up business development for

00:52:53.066 --> 00:52:57.525
 Indy cames on Google Play knee 
Kobe, product manager for Google

00:52:58.878 --> 00:53:00.819
 Play.
   &gt;&gt; Milenia, Engineering 

00:53:00.820 --> 00:53:04.220
Manager on Google Play.  We are 
here to talk to you about some 

00:53:04.221 --> 00:53:09.906
cool tools we are launching in 
Google Play developer console to

00:53:09.907 --> 00:53:13.084
 help you better release your 
apps and games.  We want to make

00:53:13.189 --> 00:53:15.955
 sure you can launch with 
confidence and better target 

00:53:15.956 --> 00:53:19.041
your apps and games to the right
 devices in a way that makes 

00:53:19.121 --> 00:53:21.779
great experiences for all of 
your users.  We will start with 

00:53:22.091 --> 00:53:24.091
a quick recap 

00:53:27.045 --> 00:53:29.051
of everything that changed in 
this area in the past year 

00:53:29.491 --> 00:53:32.656
followed by big improvements we 
have made to release management 

00:53:33.098 --> 00:53:35.832
flows in Google the Play in the 
past year.  We will then go on 

00:53:37.158 --> 00:53:41.414
to announce new futures, changes
 to App Signing, new device 

00:53:41.415 --> 00:53:46.111
catalog and device targeting 
tools.  We have heard that some 

00:53:46.112 --> 00:53:49.194
of the areas are where you would
 like to see feedback and 

00:53:49.195 --> 00:53:52.703
insight from Google the most so 
we are excited to show you what 

00:53:52.704 --> 00:53:55.926
we built. 
   &gt;&gt; KOBI GLICK:  Before we get

00:53:55.927 --> 00:53:59.554
 to knew features, let's start 
with a recap of what happened in

00:53:59.983 --> 00:54:03.591
 this space in the last year.  
Exactly a year ago at Google IO 

00:54:03.592 --> 00:54:07.757
we launched open beta.  A new 
way to discover your a pps 

00:54:08.180 --> 00:54:11.805
running on Google Play and join 
them.  Users can find your apps,

00:54:11.918 --> 00:54:15.954
 search them, join the beta 
directly from the page and leave

00:54:15.955 --> 00:54:20.105
 you with private review which 
you can see in the play console.

00:54:20.106 --> 00:54:24.598
  Open beta is a great way for 
you to test your new updates 

00:54:24.599 --> 00:54:30.893
before you launch them live to 
your users. 

00:54:30.894 --> 00:54:34.500
   So this I'm beta allows you 
to really scale beta programs on

00:54:34.501 --> 00:54:38.563
 Play and in the last year alone
 we have seen more than 100 

00:54:38.564 --> 00:54:41.083
million beta testers on Google 
Play.  There is another number 

00:54:41.432 --> 00:54:46.423
which we are really excited 
about which is 4X growth in the 

00:54:46.424 --> 00:54:48.590
number of apps running a large 
beta program 

00:54:52.622 --> 00:54:54.944
on Play.  We have great feedback
 from developers like WhatsApp 

00:54:54.945 --> 00:54:59.557
telling us how open beta allows 
them to get critical feedback 

00:54:59.558 --> 00:55:02.511
from millions of beta test ares.
  It allows them to experiment 

00:55:02.512 --> 00:55:05.264
with new features and it's one 
of the key ways they are able to

00:55:05.481 --> 00:55:08.553
 deliver such an awesome 
messaging experience to so many 

00:55:09.329 --> 00:55:11.329
users globally. 
   And we get this 

00:55:14.458 --> 00:55:19.418
feedback from team Sem.  Smap 
was one of the early adopt ors 

00:55:19.641 --> 00:55:23.980
of  beta testing on Google Play.
  They use it for more than four

00:55:25.945 --> 00:55:32.803
 years.  Mr. Sen tells us how it
 allows them to key to innovate 

00:55:32.804 --> 00:55:34.804
with new app 

00:55:38.325 --> 00:55:38.711
experiences. 
   &gt;&gt; SARAH THOMPSON:  Together 

00:55:38.712 --> 00:55:41.228
with those changes we have 
launched a developer program 

00:55:41.229 --> 00:55:45.389
called early access.  Has anyone
 given early access a try?  

00:55:45.390 --> 00:55:48.253
Couple of hands.  If you haven't
 I highly recommend you check it

00:55:48.449 --> 00:55:51.331
 out.  This is a program that 
will allow you to put your apps 

00:55:51.441 --> 00:55:56.435
or games in front of early 
adopters while your game is 

00:55:56.436 --> 00:55:58.436
still 

00:56:01.767 --> 00:56:04.274
in development.  The audience 
will early testers will be able 

00:56:04.495 --> 00:56:09.059
to provide you with valuable 
feedback.  We grow a user base 

00:56:09.200 --> 00:56:11.950
of highly engaged users that are
 more than willing to give you 

00:56:12.383 --> 00:56:15.555
the detailed grand you lar 
feedback around how your game or

00:56:15.784 --> 00:56:20.412
 app is performing. 
   So currently, we have 25 

00:56:20.413 --> 00:56:25.046
million users and counting that 
are actually leveraging that 

00:56:25.047 --> 00:56:29.967
early  early access program 
since last year, 2016.  So one 

00:56:30.286 --> 00:56:34.122
great example here is Omnidrone.
  This is developer of Titan 

00:56:34.901 --> 00:56:38.623
Brawl, and they are from Spain, 
and they entered into early 

00:56:39.062 --> 00:56:43.741
access, and they saw more than 
400,000 users enter into the 

00:56:44.435 --> 00:56:48.247
game. 
   They started by focusing on 

00:56:48.248 --> 00:56:51.437
engagement.  That was the first 
thing they decided to iterate  

00:56:51.979 --> 00:56:56.678
on.  They then went on to 
iterate on retention and finally

00:56:56.679 --> 00:57:00.057
 monetization.  So with early 
access they were able to improve

00:57:00.390 --> 00:57:05.057
 their engagement rate by 50  
50%.  I mean, that's a meaty 

00:57:05.310 --> 00:57:08.786
number and then later 
monetization went up by 20%.  

00:57:08.787 --> 00:57:11.187
This is before they launched 
publicly. 

00:57:11.188 --> 00:57:14.792
   So we are really elated to be
 able to see these Android only 

00:57:15.212 --> 00:57:18.493
tools and services move the 
needle in a really meaningful 

00:57:18.494 --> 00:57:20.494
way towards the success other 
games

00:57:23.870 --> 00:57:27.046
 launch.  Omnidrone has told us 
that within early access they 

00:57:27.047 --> 00:57:30.533
were able to get enough traffic 
into their game to really 

00:57:30.534 --> 00:57:35.894
analyze and improve their 
retention as well as take on the

00:57:35.895 --> 00:57:40.366
 marketing assets and test that 
in store experiments before 

00:57:40.367 --> 00:57:44.364
going live.  They also told us 
that that private feedback was 

00:57:44.365 --> 00:57:46.530
invaluable. 
   One of the great features 

00:57:46.531 --> 00:57:50.176
about early access is that users
 cannot rate your game or app at

00:57:50.177 --> 00:57:52.923
 that time.  So all of that 
great feedback you are getting 

00:57:52.924 --> 00:57:56.228
from them does not actually 
impact your store ratings.  It's

00:57:56.526 --> 00:58:00.495
 helped them to improve their 
game experience based on that 

00:58:00.496 --> 00:58:03.033
user feedback, which is always a
 really great practice to 

00:58:09.021 --> 00:58:09.333
follow. 
   &gt;&gt; MILENIA NIKOLIC:  The 

00:58:09.334 --> 00:58:13.065
launch of early access is one of
 the ways in which Android and 

00:58:13.066 --> 00:58:16.310
Play are evolving.  In order to 
keep pace with this and give you

00:58:16.725 --> 00:58:19.890
 guys the tools to use the 
functionality we build to its 

00:58:19.891 --> 00:58:23.446
full potential.  We have 
overhauled the release 

00:58:24.088 --> 00:58:28.423
management section in the Google
 Play console.  App releases 

00:58:28.532 --> 00:58:31.830
replace previous APK page and 
introduce significant changes in

00:58:32.045 --> 00:58:35.440
 the way how you prepare your 
next release and roll it out to 

00:58:35.874 --> 00:58:40.220
 users.  Firstly, we introduce 
the concept of a release and the

00:58:40.221 --> 00:58:42.971
 consistent terminology 
throughout the flow including 

00:58:43.507 --> 00:58:46.466
things like rollout or artifact.

00:58:46.467 --> 00:58:53.896
   Is anyone in the audience 
using multiAPK?  Quite  a few.  

00:58:53.897 --> 00:58:58.686
So concept release is especially
 useful for you guys.  It gives 

00:58:58.687 --> 00:59:03.295
you a wholistic way to look at 
all of the APK's that are active

00:59:03.296 --> 00:59:06.139
 at the time in a w holistic way
 and see which one of them were 

00:59:06.140 --> 00:59:11.721
added now and which one were 
carried over from previous 

00:59:11.722 --> 00:59:16.751
releases.  One more important 
the ability to operate 

00:59:16.844 --> 00:59:19.805
preparation from the rollout.  
You had to do this weird dance 

00:59:20.120 --> 00:59:24.097
with you upload new APKs, you 
activate the old ones and you 

00:59:24.190 --> 00:59:27.956
public the whole lot at once.  
Now you can create the dropped 

00:59:28.166 --> 00:59:30.600
release and save it in various 
stages of completion. 

00:59:30.601 --> 00:59:35.090
   You can then go for lunch 
come back, make other  changes 

00:59:35.091 --> 00:59:38.074
in the console and roll it out 
when you are really ready and 

00:59:38.915 --> 00:59:43.563
sure.  One of the primary  goals
 of the new flow was to enable 

00:59:43.564 --> 00:59:47.297
you to release with confidence. 
 We got plenty of feedback from 

00:59:47.298 --> 00:59:49.678
developers like yourselves that 
they are b eing scared to 

00:59:49.889 --> 00:59:51.889
publish because they are not 
sure what are going to be 

00:59:52.369 --> 00:59:56.466
consequences to their existing 
and new users.  We also got 

00:59:56.467 --> 01:00:00.516
feedback that some of our error 
messages are not very clear.  So

01:00:00.517 --> 01:00:04.766
 these were critical as we were 
designing new flows, we made 

01:00:04.767 --> 01:00:07.857
sure that everything is much 
more explicit in the new flows. 

01:00:08.189 --> 01:00:11.037
   We now provide confirmation 
options at various points in the

01:00:11.038 --> 01:00:15.424
 flow, which reduces the risk of
 accidentally doing a bad or 

01:00:15.853 --> 01:00:18.912
unintended push for your users. 
 For example, we now have a new 

01:00:18.913 --> 01:00:21.977
page which allows you to review 
the release before you roll it 

01:00:23.941 --> 01:00:29.894
out.  This page will  highlight 
and warn or block you depending 

01:00:29.895 --> 01:00:33.140
on the issue severity.  As part 
of this process we changed some 

01:00:33.141 --> 01:00:36.730
of the previously strict rules 
around how we decide to warn or 

01:00:36.971 --> 01:00:41.036
block you.  This especially 
applies to things like upgrades 

01:00:41.037 --> 01:00:44.914
and targeting across the Android
 device base.  At the same time,

01:00:45.050 --> 01:00:48.429
 we added new rules to give you 
more visibility into various 

01:00:48.430 --> 01:00:50.856
other things that could go wrong
 with your release.

01:00:50.857 --> 01:00:54.771
   For example, we now warn you 
if you are introducing a new 

01:00:54.872 --> 01:00:59.383
permission which will reduce 
your app's update rate, or when 

01:00:59.384 --> 01:01:02.326
you are excluding some devices 
which you were previously 

01:01:07.658 --> 01:01:08.100
targeting. 
   &gt;&gt; KOBI GLICK:  Another 

01:01:08.101 --> 01:01:11.360
change is making stage rollout 
front and c enter.  We love 

01:01:11.361 --> 01:01:16.997
stage rollout.  It's a great way
 for you to c onfidently release

01:01:16.998 --> 01:01:20.744
 updates to users.  You start 
with a seed.  If it performs 

01:01:21.056 --> 01:01:24.690
correctly you update until you 
hit 100%.  In the new flow we 

01:01:24.691 --> 01:01:27.992
made it front and center.  It's 
easy to set stage rollout.  We 

01:01:27.993 --> 01:01:31.486
also show you how many devices 
you will target with each 

01:01:31.487 --> 01:01:34.543
percent of the r ollout and one 
feature we got some positive 

01:01:34.799 --> 01:01:37.749
developer feedback on is the new
 ability to set custom 

01:01:37.750 --> 01:01:43.575
percentages like the 3% you see 
right here. 

01:01:43.576 --> 01:01:47.182
   Since launching the new flow,
 we havestein  have seen a 

01:01:47.513 --> 01:01:50.193
number we are excited about.  We
 have seen 50% increase in the 

01:01:50.809 --> 01:01:54.439
number of developers that are 
using stage rollout.  We love 

01:01:54.639 --> 01:01:58.160
seeing this.  Staged rollout is 
a recommended best practice and 

01:01:58.379 --> 01:02:02.460
many of our top developers use 
it practically to release each 

01:02:02.461 --> 01:02:05.987
one of their app updates.  There
 are other really cool features 

01:02:06.086 --> 01:02:09.065
we launched as part of the new 
flow.  For example, you can see 

01:02:09.178 --> 01:02:14.426
a log of your release so when 
you push to 5%, 10% or 100%, you

01:02:14.637 --> 01:02:18.930
 can see a history of all of 
your historical releases, and 

01:02:19.630 --> 01:02:23.150
one feature we think is really 
cool is your ability to download

01:02:23.590 --> 01:02:27.282
 historical APK's from the  
console so if you are trying to 

01:02:27.482 --> 01:02:30.119
reduce a bug from a previous 
release you go to the Play 

01:02:30.438 --> 01:02:35.051
console and download that APK. 
   Moving forward, we are 

01:02:35.052 --> 01:02:39.718
getting ready for the world 
beyond the APK.  Starting today,

01:02:39.719 --> 01:02:42.122
 and you probably heard the 
announcement earlier in the 

01:02:42.351 --> 01:02:45.938
developer keynote, we are 
opening, publishing Android 

01:02:46.157 --> 01:02:50.423
instant apps from the Play 
console using a similar flow to 

01:02:50.658 --> 01:02:54.575
the flow you are all familiar 
with when updating regular 

01:02:54.914 --> 01:02:57.758
installed apps..  So it should 
be easy for you guys to come to 

01:02:57.959 --> 01:03:02.501
the Play console and publish 
Android instant apps starting 

01:03:02.502 --> 01:03:03.681
today. 
   If you want to hear more 

01:03:03.682 --> 01:03:08.495
about that, come to the session 
intro to Android instant Intro 

01:03:08.496 --> 01:03:12.740
to Android Instant Apps, 
tomorrow, 1:30 p.m. on stage 2. 

01:03:12.741 --> 01:03:16.365
 Now, there are two features 
coming soon and we think you 

01:03:16.366 --> 01:03:19.758
will be pretty excited about.  
If you are using or publishing 

01:03:19.759 --> 01:03:23.493
APIs to programmatically push 
your app updates, soon we will 

01:03:24.127 --> 01:03:27.851
Expose new end point for 
releases allowing you to push 

01:03:27.852 --> 01:03:31.689
the change to the Play console, 
but then go to the Play console 

01:03:31.690 --> 01:03:35.537
U I, look at the validation 
pages that Milenia mentioned 

01:03:35.645 --> 01:03:38.378
before to understand the state 
of your release and only then 

01:03:38.618 --> 01:03:41.940
make the publishing action from 
the Play console.  And then also

01:03:41.941 --> 01:03:45.203
 with the best tradition of 
Google, launching and iterating,

01:03:45.204 --> 01:03:48.157
 once we launch the new flow, we
 heard your feedback loud and 

01:03:48.596 --> 01:03:51.326
clear, how we should further 
improve the process around 

01:03:51.662 --> 01:03:58.699
release notes or as we call them
 What's new.

01:03:58.700 --> 01:04:02.866
   &gt;&gt; We know today it's a bit 
of a time sync for you guys, 

01:04:03.300 --> 01:04:05.584
therefore, I'm happy to let you 
know that very soon like you see

01:04:05.903 --> 01:04:10.068
 here, we will offer you a new 
format allowing you to edit all 

01:04:10.396 --> 01:04:13.607
of your release notes offline 
and then with a single copy and 

01:04:13.932 --> 01:04:18.207
paste action move them to the 
Play console with a single push 

01:04:18.431 --> 01:04:23.048
of a button.  We think it will 
be a big time saver and a real 

01:04:23.157 --> 01:04:25.776
feature you would like. 
   &gt;&gt; SARAH THOMPSON:  We have 

01:04:26.419 --> 01:04:28.710
had a few developers using the 
flow and sharing experience, for

01:04:29.584 --> 01:04:32.876
 example, Free Letics here, 
developer of health and fitness 

01:04:33.421 --> 01:04:37.130
apps tell us that the must 
managed releases page gaves them

01:04:37.471 --> 01:04:42.166
 a greatly improved status 
review of their releases.  And 

01:04:42.167 --> 01:04:46.114
deliveroo is pleased with the 
ease of use and convenient 

01:04:46.115 --> 01:04:48.884
overview that they get with 
stabled rollouts.  Now, they can

01:04:48.885 --> 01:04:52.146
 see exactly how many installs 
that they are expected to get to

01:04:52.362 --> 01:04:56.861
 that staged rollout while 
providing them with a whole news

01:04:56.862 --> 01:05:04.333
 and exciting level of Carol.  
Now, -- Carol..  Now you guys 

01:05:04.334 --> 01:05:07.196
can role out your app in game 
but you still want to understand

01:05:07.624 --> 01:05:09.796
 how your release is actually 
performing. 

01:05:09.797 --> 01:05:13.551
   Well, this why we are larking
 another great feature here, the

01:05:13.552 --> 01:05:16.615
 release dashboard.  Here, you 
will be able to track your 

01:05:16.938 --> 01:05:20.873
release health.  So, for 
example, you can see what your 

01:05:20.874 --> 01:05:25.043
crash rate is doing, what's the 
ratings changes look like?  Or 

01:05:25.254 --> 01:05:29.845
how is your uninstall rates 
fluctuating?  This is based on 

01:05:30.712 --> 01:05:34.442
hourlily aggregated data, so it 
gives you a powerful way to keep

01:05:34.653 --> 01:05:37.531
 track of your release as it's 
getting adopted.  You can 

01:05:37.645 --> 01:05:42.028
compare the release performance 
to a previous release which we 

01:05:42.236 --> 01:05:45.177
think you guys are going to 
really love.  What do you think?

01:05:45.178 --> 01:05:47.178
  Does that sounds

01:05:50.124 --> 01:05:52.268
 cool?
   (Applause). 

01:05:52.269 --> 01:05:55.215
   So hopefully you know that if
 you are running a staged 

01:05:55.531 --> 01:05:58.589
rollout you can halt it at any 
time if you are detecting any 

01:05:58.590 --> 01:06:00.913
kind of issues.  So, for 
instance, if you are noticing 

01:06:01.093 --> 01:06:04.601
your crash rate is going up or 
there is a big spike in 

01:06:04.602 --> 01:06:07.770
uninstall rates you can react 
quickly.  If you halt a staged 

01:06:08.371 --> 01:06:11.787
rollout and the users that 
didn't get the update, they 

01:06:11.788 --> 01:06:14.489
won't get it, so rest assured.  
Then you can focus on 

01:06:15.042 --> 01:06:17.365
investigating and fixing those 
bugs before releasing the new 

01:06:19.275 --> 01:06:23.316
build.  So if you guys want a 
deeper dive into that awesome 

01:06:23.317 --> 01:06:25.469
release dashboard I was 
referencing along with some 

01:06:25.470 --> 01:06:28.224
other cool features that we are 
launching to help you improve 

01:06:28.225 --> 01:06:33.359
your app health, go check out 
making data on Play work for you

01:06:33.360 --> 01:06:38.072
 t omorrow, 1:30 p.m. over at 
stage

01:06:41.395 --> 01:06:41.707
 1. 
   &gt;&gt; MILENIA NIKOLIC:  Let's 

01:06:41.708 --> 01:06:46.853
move on.  As Android developers,
 your signing key insures 

01:06:47.186 --> 01:06:49.838
integrity of your app.  That 
makes it very important.  Lost 

01:06:50.272 --> 01:06:57.185
or compromised keys are a very 
serious issue.  I hope that this

01:06:57.186 --> 01:06:59.899
 didn't happen to any of you, 
but in fact this is one of the 

01:07:00.112 --> 01:07:05.285
most commonly reported issues to
 our operations team.  This is 

01:07:05.613 --> 01:07:08.987
why we are very excited to be 
announcing another important 

01:07:10.523 --> 01:07:13.261
feature, Google Play App 
Signing.  If you join this 

01:07:13.262 --> 01:07:16.214
program, you will let Google 
Play manage your key and sign 

01:07:16.429 --> 01:07:19.842
your app before delivering it to
 users. 

01:07:19.843 --> 01:07:23.664
   For new apps, we can simply 
generate a key for you.  For 

01:07:24.049 --> 01:07:28.509
existing apps, we provide you a 
flow through which you can 

01:07:28.510 --> 01:07:31.444
securely hand over the keys to 
us.  After that, you don't have 

01:07:31.445 --> 01:07:35.084
to worry about balancing 
security and convenience of 

01:07:35.085 --> 01:07:38.792
access by, for example, storing 
your key in a version control 

01:07:39.153 --> 01:07:42.170
system.  You can even delete it.

01:07:42.171 --> 01:07:45.015
   Apps uploaded to Play will 
still be signed but with a 

01:07:45.655 --> 01:07:50.148
separate upload key which we use
 as a secondary authentication. 

01:07:50.275 --> 01:07:52.689
 This one can always be replaced
 if 

01:07:57.400 --> 01:07:59.249
needed.  Is 
   &gt;&gt; SARAH THOMPSON:  This guy 

01:07:59.250 --> 01:08:01.995
here is super excited about it. 
 I wanted to point that out.  

01:08:02.107 --> 01:08:05.830
Thanks for the thumbs up.  We 
have had certain partners using 

01:08:06.247 --> 01:08:09.540
Google Play App Signing for a 
while now and they love i t.  

01:08:09.541 --> 01:08:15.211
Here Robin hood speaks to the 
layer of safety while at the 

01:08:15.212 --> 01:08:19.813
same time it's eliminated the 
worry of having lost or stolen 

01:08:21.159 --> 01:08:23.330
keys.  How cool is this?  Pretty

01:08:26.619 --> 01:08:27.485
 cool! 
   &gt;&gt; MILENIA NIKOLIC:  Now that

01:08:27.486 --> 01:08:29.901
 Google Play is signing your 
app, you can probably guess what

01:08:30.114 --> 01:08:32.669
 comes next.  We can start 
optimizing it on your behalf.  

01:08:32.858 --> 01:08:35.529
The first optimization that we 
have started with a few partners

01:08:36.287 --> 01:08:39.271
 is resource stripping 
optimizations.  If you opt into 

01:08:39.272 --> 01:08:47.091
this, you can give us the 
universal or so-called APK  

01:08:47.301 --> 01:08:52.698
based on which we will automate 
generic APKs for stripping 

01:08:52.699 --> 01:08:56.103
redundant resources for native 
libraries and screen densities. 

01:08:56.104 --> 01:09:01.234
 When delivering your app to a 
phone we will make sure we strip

01:09:02.013 --> 01:09:04.776
 out is it the libraries.  Is 
this way the APK is smaller 

01:09:04.777 --> 01:09:08.150
taking less bandwidth, less 
space on their disk without 

01:09:08.151 --> 01:09:12.425
requiring you guys to use 
multiAPK.  This way we are 

01:09:12.426 --> 01:09:16.425
seeing over 20% A PK site 
savings with some of the 

01:09:16.426 --> 01:09:20.915
partners so make sure you opt in
 and try  this out when it 

01:09:20.916 --> 01:09:23.202
becomes available.
   We are very excited about 

01:09:23.203 --> 01:09:27.585
Google Play App Signing and all 
of the app  optimizations we can

01:09:27.586 --> 01:09:30.786
 bring on top of it in the 
future.  This frame is optional,

01:09:30.787 --> 01:09:34.072
 but we hope you decide to join.
  To learn more about App 

01:09:34.503 --> 01:09:37.924
Signing with Google, its 
security benefits and the size 

01:09:38.258 --> 01:09:40.596
gains you can get with the 
various optimizations, please 

01:09:40.814 --> 01:09:45.228
come to the how to How to Secure
 and optimize your Optimize Your

01:09:45.704 --> 01:09:51.096
 App Google Play App Google Play
 App Signing tomorrow at 2:30 p.

01:09:51.624 --> 01:09:58.304
m., stage 1.  Kg kg when 
   &gt;&gt; KOBI GLICK:  When I joined

01:09:58.639 --> 01:10:01.368
 Google my friend who was an 
Android developer asked for one 

01:10:01.915 --> 01:10:04.550
thing.  Can we do anything about
 this page you see here.  You 

01:10:04.551 --> 01:10:07.192
are probably all familiar with 
this page.  I asked him, why, 

01:10:07.306 --> 01:10:10.150
what's wrong with this page?  He
 is like, well, there are t 

01:10:10.151 --> 01:10:14.215
housands of devices there. 
   There is very little info on 

01:10:14.642 --> 01:10:17.857
each device.  Many devices have 
the same name again and again 

01:10:17.858 --> 01:10:24.429
and managing devices in general 
is busy work.  N ow, the Android

01:10:25.100 --> 01:10:29.150
 ecosystem has grown so 
significantly because it offers 

01:10:29.151 --> 01:10:31.562
different devices with different
 capabilities at various price 

01:10:32.219 --> 01:10:35.182
points.  At the same time, it's 
important that users don't get 

01:10:35.387 --> 01:10:38.005
an app or a game that their 
device doesn't have the hardware

01:10:38.006 --> 01:10:42.502
 to  support.  You know what 
happens.  The user gets annoyed 

01:10:42.725 --> 01:10:45.519
because the app doesn't work on 
their device and you get annoyed

01:10:45.633 --> 01:10:51.323
 because the user leaves a one 
store review blaming your app 

01:10:51.431 --> 01:10:53.529
for something that isn't your 
fault. 

01:10:53.530 --> 01:10:56.125
   It's important for us that 
you are able to deliver great 

01:10:56.242 --> 01:10:59.203
experience to your users, and to
 be able to do that, we need to 

01:10:59.430 --> 01:11:03.117
provide you visibility into the 
device space.  It's especially 

01:11:03.118 --> 01:11:05.421
important for game developers 
because we are aware that you 

01:11:05.720 --> 01:11:09.886
guys in many cases build your 
games according to a reference 

01:11:10.314 --> 01:11:12.730
device spec. 
   Therefore, we are very 

01:11:12.731 --> 01:11:15.776
excited to announce that today 
we are launching a new device 

01:11:16.333 --> 01:11:20.311
catalog in the Play console.  
Woo hue!

01:11:20.312 --> 01:11:22.312
   (Applause).

01:11:25.046 --> 01:11:29.669
catalog, you request  can see 
the full hardware spec for 

01:11:29.967 --> 01:11:33.265
thousands of devices certified 
by Google for the Google mobile 

01:11:33.580 --> 01:11:36.755
suite of apps.  You see here 
what we call the card view, but 

01:11:36.756 --> 01:11:39.948
we also provide you with the 
list view allowing you to run 

01:11:40.150 --> 01:11:43.769
all kinds of quick operations on
 a set of devices.  Take a 

01:11:44.090 --> 01:11:47.899
moment to compare the old UI 
versus the new UI.  Pretty 

01:11:49.090 --> 01:11:51.949
awesome, right? 
   So what do you get in this 

01:11:52.276 --> 01:11:56.556
new catalog?  First you get a 
full device spec.  You can 

01:11:56.557 --> 01:12:02.915
information like Ra,  rf an, 
system on chick I.GPU, CPU, 

01:12:02.916 --> 01:12:05.463
screen size and density and the 
supported OS versions for each 

01:12:05.680 --> 01:12:08.633
one of the thousands of devices.
  You can search devices by any 

01:12:08.859 --> 01:12:11.596
of these attributes, for 
example, you can run the search 

01:12:11.708 --> 01:12:15.299
that you see right h ere, what 
we call the filter.  You can 

01:12:15.300 --> 01:12:20.238
search for all devices, for 
example, with Android SDK24 plus

01:12:20.450 --> 01:12:25.837
 and a specific GPU.  One of the
 features I like best every time

01:12:26.180 --> 01:12:29.707
 you search for devices and we 
show you one or many of devices 

01:12:29.708 --> 01:12:32.498
we also show your app 
performance on those devices so 

01:12:32.610 --> 01:12:35.672
we show you how many installs, 
how much revenue and what's the 

01:12:35.673 --> 01:12:38.874
average rating that those 
devices contribute to your app. 

01:12:38.875 --> 01:12:41.464
   This is super important when 
you are making decisions like 

01:12:42.448 --> 01:12:47.811
prioritizing bug fixes, or 
making device exclusion 

01:12:47.812 --> 01:12:52.534
decisions.  When we gave the new
 catalog to Pixel bury studios, 

01:12:52.758 --> 01:12:57.248
one of our testing partners, we 
helped them avoid making a big 

01:12:57.582 --> 01:13:01.068
mistake on day one.  They were 
about to include a device but 

01:13:01.069 --> 01:13:04.712
with the new cat log they 
suddenly found that it has 

01:13:04.713 --> 01:13:09.406
meaningful installs, 4.6 rating 
and actually meaningful revenue 

01:13:09.407 --> 01:13:12.724
too.  So they avoided excluding 
it and, therefore, avoided 

01:13:13.034 --> 01:13:18.274
making a major mistake.  Pixel 
berry studios tells us this too 

01:13:18.404 --> 01:13:20.870
many will be a game changer for 
the 

01:13:25.671 --> 01:13:26.815
studio. 
   &gt;&gt; MILENIA NIKOLIC:  Another 

01:13:26.816 --> 01:13:32.088
cool feature are device catalog 
groups.  It is cool to have a 

01:13:32.310 --> 01:13:37.019
multiple devices with different 
chip configurations.  We have 

01:13:37.020 --> 01:13:39.133
heard multiple times from 
developers that it's hard to 

01:13:39.134 --> 01:13:42.201
figure out what's happening in 
those cases and especially to 

01:13:42.202 --> 01:13:46.194
debug performance issues.  So in
 our new catalog, we group all 

01:13:46.195 --> 01:13:49.445
of those devices for you while 
allowing you to drill down and 

01:13:49.788 --> 01:13:52.301
see each individual device 
separately.  If you want to 

01:13:52.705 --> 01:13:56.216
exclude a device, you can either
 exclude a specific skew or the 

01:13:56.436 --> 01:14:01.252
entire set of devices for a 
single group. 

01:14:01.253 --> 01:14:04.492
   Now, one big addition we are 
introducing our device exclusion

01:14:04.493 --> 01:14:08.635
 rules.  This is the ability to 
exclude devices based on 

01:14:09.287 --> 01:14:12.699
performance indicators.  For 
example, if you are developing a

01:14:13.590 --> 01:14:16.416
 ridge graphics game you may 
struggle to get it to perform 

01:14:16.640 --> 01:14:21.768
well on devices with less than 
a512 Meg or one GB of Ra.  In 

01:14:22.055 --> 01:14:24.794
which case you may want to 
exclude the entire group of 

01:14:25.427 --> 01:14:31.817
devices with less Ram than that 
or if you discover a bug you may

01:14:31.818 --> 01:14:38.793
 excludes  devices with a system
 chip.  This enables you to stop

01:14:39.448 --> 01:14:42.663
 deployment, and deploy the fix 
to the affected  users as soon 

01:14:42.888 --> 01:14:45.300
as it's ready. 
   When you create an exclusion 

01:14:45.962 --> 01:14:50.130
rule, similar to what Kobi was 
saying, we show you which 

01:14:50.131 --> 01:14:52.470
devices you are about to 
exclude, how much installs you 

01:14:52.550 --> 01:14:56.722
are making from the devices and 
how much revenue you are making 

01:14:56.824 --> 01:15:00.005
which is pretty important 
information where you are making

01:15:00.006 --> 01:15:03.819
 a decision like this.  To save 
more time, we allow you to copy 

01:15:03.930 --> 01:15:06.885
a list of excluded devices from 
another one of your apps to make

01:15:06.886 --> 01:15:08.886
 it 

01:15:10.416 --> 01:15:10.919
quicker. 
   &gt;&gt; KOBI GLICK:  We heard from

01:15:10.920 --> 01:15:14.847
 a bunch of developers that they
 love this feature. 

01:15:14.848 --> 01:15:16.960
   &gt;&gt; MILENIA NIKOLIC:  Really? 
 Cool.  So we know you want to 

01:15:16.961 --> 01:15:19.661
exclude as few devices as 
possible.  Android is great 

01:15:19.662 --> 01:15:21.662
because it 

01:15:23.842 --> 01:15:24.730
has a vast reach and because 
users around the world are using

01:15:24.731 --> 01:15:27.924
 a great and diverse device set.
  We do acknowledge that 

01:15:27.925 --> 01:15:31.421
sometimes you need to exclude  
devices temporarily or 

01:15:31.976 --> 01:15:34.149
permanently and we want to make 
sure you have the right feature 

01:15:34.369 --> 01:15:37.240
set allowing you to make such 
important decisions, including 

01:15:37.241 --> 01:15:40.630
validations to make sure you 
don't shoot yourself in the foot

01:15:40.857 --> 01:15:44.382
 by over excluding.  You can 
see, for example, that EA are 

01:15:44.383 --> 01:15:47.888
using new tools to launch more 
confidently and insure players 

01:15:47.889 --> 01:15:53.150
get better experiences across al
l of their supported devices. 

01:15:55.221 --> 01:15:59.058
   Similarly, SpaceApe games 
shared feedback with us where 

01:15:59.059 --> 01:16:03.552
they found a great way of inin
quoarp rating, device targeting 

01:16:03.980 --> 01:16:08.062
tools to reduce costs and 
improve KPI. 

01:16:08.063 --> 01:16:11.747
   &gt;&gt; SARAH THOMPSON:  I would 
like to build off of what 

01:16:11.748 --> 01:16:17.344
Milenia was speaking about.  So 
big phish one of our testing 

01:16:17.769 --> 01:16:21.198
partners has been terrific in 
sharing a ton of feedback and 

01:16:23.005 --> 01:16:25.396
insight into the tool.  We 
collated their experience into a

01:16:25.397 --> 01:16:28.287
 case study we will share with 
you today.  But first I wanted 

01:16:28.504 --> 01:16:32.596
to take a little bit of a step 
back and let you know that we 

01:16:32.597 --> 01:16:37.238
had some reservations as a 
platform as Google Play that we 

01:16:37.239 --> 01:16:40.512
were concerned that developers 
might support less devices as a 

01:16:40.606 --> 01:16:44.239
result of this. 
   But big fish illustrates that

01:16:44.240 --> 01:16:47.978
 this is in fact going to 
facilitate the opposite.  It's 

01:16:48.204 --> 01:16:51.367
going to allow you to support 
more devices.  So as we went 

01:16:51.368 --> 01:16:54.557
down that rabbit hole with them 
with their first days of i 

01:16:54.558 --> 01:16:58.171
nteracting with the catalog, two
 recurring themes pops up, 

01:16:58.371 --> 01:17:04.508
precision and quality.  Let's 
start with precision.  So big 

01:17:04.509 --> 01:17:08.993
fish's mantra is to publish 
games to the widest audience 

01:17:08.994 --> 01:17:13.270
possible and using restrictions 
as a last resort.  My favorite 

01:17:13.390 --> 01:17:17.494
quote is right here which is we 
can now take a scalpel into the 

01:17:18.059 --> 01:17:21.652
operating room instead of a 
hatch heet. 

01:17:21.653 --> 01:17:25.953
   &gt;&gt; KOBI GLICK:  It sounds 
safer to me.. 

01:17:25.954 --> 01:17:27.738
   &gt;&gt; SARAH THOMPSON:  What a 
visual.  Developers have been 

01:17:27.739 --> 01:17:32.457
going to the far reaches of the 
Internet scattered across to 

01:17:32.688 --> 01:17:35.565
leverage several third party 
sources of information about 

01:17:35.774 --> 01:17:39.823
Android devices and their specs 
for years.  The big fish team 

01:17:39.824 --> 01:17:43.083
really loves the console dated 
Android device models and 

01:17:43.504 --> 01:17:47.902
grouping where they can also see
 as Kobi was speaking about, the

01:17:48.115 --> 01:17:52.300
 install revenue and ratings 
numbers for each device.  This 

01:17:52.640 --> 01:17:57.239
allows you to make more informed
 decisions. 

01:17:57.240 --> 01:18:00.226
   So one specific example that 
they gave us was that in the 

01:18:00.227 --> 01:18:03.669
past they had this running list 
of low end device exclusions, 

01:18:04.085 --> 01:18:07.886
probably sounds familiar, for a 
particular business unit.  They 

01:18:08.196 --> 01:18:12.095
were forced to search and check 
against this running list for 

01:18:12.096 --> 01:18:17.169
every new title.  And given that
 big fish is an extremely 

01:18:17.827 --> 01:18:21.148
prolific game maker, this was a 
huge pain in the butt. 

01:18:21.149 --> 01:18:26.640
   So they can now set that one 
time Ram based device exclusion 

01:18:26.641 --> 01:18:30.880
rule and import 245 that into 
every new game they launch 

01:18:31.318 --> 01:18:35.054
moving forwards.  That means no 
running internal  lists, no 

01:18:35.055 --> 01:18:38.362
manual labor.  So this newly 
found precision is leading to 

01:18:38.363 --> 01:18:41.093
serious efficiencies for them.  
And we are excited to provide 

01:18:41.419 --> 01:18:45.026
you with a lot of oil to grease 
those wheels for your

01:18:48.858 --> 01:18:50.146
 team. 
   &gt;&gt; KOBI GLICK:  We asked big 

01:18:50.147 --> 01:18:53.216
fish how they anticipated the 
new catalog would help them to 

01:18:53.448 --> 01:18:58.491
include more devisions, so they 
gave us a real example.  In one 

01:18:58.597 --> 01:19:01.468
very tricky device trick they 
had to use the hatchet approach 

01:19:01.785 --> 01:19:04.834
that Sarah mentioned before and 
exclude 12% of the devices in 

01:19:04.949 --> 01:19:09.235
that group.    With the new 
catalog, they estimate they can 

01:19:09.236 --> 01:19:14.098
take down this 12% to 2% which 
means including many more 

01:19:14.099 --> 01:19:17.057
devisions. 
   This is a huge win for both 

01:19:17.455 --> 01:19:19.455
developers and 

01:19:21.528 --> 01:19:22.171
users. 
   &gt;&gt; SARAH THOMPSON:  Let's 

01:19:22.172 --> 01:19:25.466
move onto quality now.  Since 
quality is near and dear to our 

01:19:25.467 --> 01:19:28.530
hearts here at Google Play, we 
knew that giving you guys a 

01:19:28.758 --> 01:19:32.374
significant and centralized 
device catalog would surely lead

01:19:32.375 --> 01:19:36.611
 to improved quality.  In 
particular, the catalog can 

01:19:36.612 --> 01:19:40.379
empower you, the developer, to 
create a consistent and elevated

01:19:40.380 --> 01:19:45.641
 user experience for Google Play
 users across a broad array of 

01:19:45.642 --> 01:19:49.984
devices.  The diversity of 
Android devices enables your 

01:19:49.985 --> 01:19:53.001
games and apps to reach 
audiences that no other gaming 

01:19:53.002 --> 01:19:55.324
platform can do. 
   We know that this also though

01:19:55.770 --> 01:19:58.269
 presents some unique challenges
 related to that 

01:20:01.690 --> 01:20:01.989
diversity. 
   &gt;&gt; MILENIA NIKOLIC:  Big fish

01:20:01.990 --> 01:20:04.941
 said it best, we are able to be
 more proactive in our device 

01:20:05.306 --> 01:20:08.460
support of new launches and more
 quickly able to respond to real

01:20:08.461 --> 01:20:10.461
 world 

01:20:12.318 --> 01:20:13.623
problems. 
   &gt;&gt; SARAH THOMPSON:  The big 

01:20:13.624 --> 01:20:15.958
fish cave me this pointed 
feedback of how the device 

01:20:16.278 --> 01:20:19.979
catalog is enabling them to 
react and solve device specific 

01:20:19.980 --> 01:20:24.048
issues in record time.  It's 
given them more confidence in 

01:20:24.706 --> 01:20:27.916
their early game rollout process
 knowing that they can iterate 

01:20:28.801 --> 01:20:31.984
quickly against device support 
as well.  So, for example, they 

01:20:32.206 --> 01:20:36.784
have a game cooking craze that 
is currently in open beta right 

01:20:36.785 --> 01:20:40.423
now..  They decided to launch it
 with actually known performance

01:20:40.424 --> 01:20:43.685
 issues because they knew that 
while it was out in the wild, 

01:20:43.686 --> 01:20:47.432
they could also look for 
unforeseen issues.  With 

01:20:47.850 --> 01:20:52.622
launching earlier and that 
review feedback not counting 

01:20:52.623 --> 01:20:55.910
towards their overall ratings I 
spoke of earlier, they could 

01:20:56.130 --> 01:20:59.640
pluck out those iffy devices and
 disable support for those 

01:21:00.198 --> 01:21:02.198
devices in the meantime. 
   That then allows them to 

01:21:02.594 --> 01:21:05.901
iterate regarding device support
 more quickly.  Then they were 

01:21:06.307 --> 01:21:11.126
able to insulate their game from
 negative reviews, and that 

01:21:11.127 --> 01:21:15.631
would in turn not affect the 
discovery algorithms on Google 

01:21:17.709 --> 01:21:21.231
Play.  So, you know, this is a 
really amazing way for them to 

01:21:21.232 --> 01:21:24.066
set themselves up for the best 
possible global launch right out

01:21:24.306 --> 01:21:29.110
 of the gate.  And we understand
 that you only get one chance at

01:21:29.111 --> 01:21:34.690
 launch.  While you guys are 
increasingly focused on creating

01:21:35.333 --> 01:21:38.913
 gaming experience with lasting 
power beyond, we understand that

01:21:38.914 --> 01:21:42.204
 that launch window is still 
really crucial.  It's the 

01:21:42.420 --> 01:21:46.042
foundation that sets your game 
up for success. 

01:21:46.043 --> 01:21:49.780
   Since the early Saturdays of 
the device cat -- days of the 

01:21:50.049 --> 01:21:52.960
device catalog we are excited to
 hear of other ways this service

01:21:52.961 --> 01:21:56.659
 will positively impact your 
apps and games.  As we roll out 

01:21:56.660 --> 01:21:59.590
more prodly, please share your 
stories with us.  We would love 

01:21:59.591 --> 01:22:02.756
to understand how the device 
catalog is contributing to the 

01:22:02.757 --> 01:22:04.757
success of your game and your 
business

01:22:08.744 --> 01:22:09.275
 overall. 
   &gt;&gt; KOBI GLICK:  It's great to

01:22:09.276 --> 01:22:13.743
 see how open beta where we open
 the talked with connects to the

01:22:14.319 --> 01:22:17.159
 device catalog.  Today we have 
seen, we have shown you a bunch 

01:22:17.471 --> 01:22:20.780
of new launches, new tools for 
launching in the Play console.  

01:22:21.073 --> 01:22:24.645
And we also showed you how 
developers use them to find 

01:22:24.646 --> 01:22:27.884
success on Google Play.  We 
showed you the news release flow

01:22:27.885 --> 01:22:32.352
 giving you for confidence and 
clarity as you make app updates.

01:22:32.353 --> 01:22:34.996
  We showed the validation step 
which makes sure you avoid 

01:22:35.447 --> 01:22:39.153
making major mistakes before you
 release app updates to users.  

01:22:39.370 --> 01:22:42.523
We showed you how we made staged
 rollout front and center 

01:22:42.748 --> 01:22:46.584
allowing you to see the number 
of targeted devices and set 

01:22:46.821 --> 01:22:49.783
custom percentages. 
   We showed you how you can 

01:22:49.784 --> 01:22:52.963
save your release as a draft and
 come back later to launch when 

01:22:53.618 --> 01:22:56.125
ready.  We also showed you the 
new release dashboard allowing 

01:22:56.341 --> 01:22:58.968
you to keep track of your 
release performance in real time

01:22:58.969 --> 01:23:02.930
 making sure you react to issues
 as they show up.  And then we 

01:23:02.931 --> 01:23:06.213
have also mentioned that 
starting today, you can publish 

01:23:06.652 --> 01:23:09.281
your Android instant apps 
directly from the play 

01:23:13.158 --> 01:23:13.570
console. 
   &gt;&gt; MILENIA NIKOLIC:  We 

01:23:13.571 --> 01:23:16.626
continue by talking about a new 
program where dwoog the play can

01:23:16.842 --> 01:23:19.786
 take the burden of signing your
 app from you.  We talked about 

01:23:19.787 --> 01:23:23.682
the security benefits and size 
gains you can get with app 

01:23:23.683 --> 01:23:25.742
optimizations.  Last but not 
least, we talked about the new 

01:23:26.504 --> 01:23:31.735
device catalog.  We showed you 
the device spec, how we group 

01:23:31.736 --> 01:23:35.041
devices how we can efficiently 
search and filter the cat loge 

01:23:35.235 --> 01:23:38.074
and how you can see the data 
about performance of your app on

01:23:38.173 --> 01:23:40.457
 a resulting set.  We also 
talked about the new rules 

01:23:40.675 --> 01:23:47.561
allowing you to filter your app 
on the store based on the 

01:23:47.562 --> 01:23:49.877
performance indicators. 
   Here are some helpful links 

01:23:49.991 --> 01:23:52.803
if you want to explore any of 
the things we talked about in 

01:23:52.804 --> 01:23:54.804
more 

01:23:56.061 --> 01:24:00.194
detail.  We are sure you will 
like the new f eatures and they 

01:23:56.061 --> 01:23:58.785
will help you release with more 
confidence, better understand 

01:23:59.314 --> 01:24:02.297
the Android device base and 
focus on doing what you guys do 

01:24:02.782 --> 01:24:06.867
best, build amazing apps and 
games and deliver great 

01:24:06.868 --> 01:24:09.701
experiences to millions of 
Android users all around the 

01:24:09.702 --> 01:24:12.649
world.  Thank you. 
   &gt;&gt; SARAH THOMPSON:  Thanks, 

01:24:12.650 --> 01:24:14.650
everybody.
   (Applause).

01:24:22.687 --> 01:24:26.304
   &gt;&gt; KOBI GLICK:  Does anybody 
have questions.  We will take a 

01:24:26.305 --> 01:24:29.838
couple of questions. 
   &gt;&gt; SARAH THOMPSON:  There are

01:24:26.305 --> 01:24:28.305
 microphones if anyone has a 
question for 

01:24:39.069 --> 01:24:39.560
us. 
   &gt;&gt; KOBI GLICK:  Great 

01:24:39.561 --> 01:24:41.858
question.  Not yet, but this 
area which we call go to market 

01:24:42.185 --> 01:24:47.233
will be one of key areas that we
 will work on in the next year 

01:24:47.434 --> 01:24:53.043
including stuff like rethinking 
how we do geo targeting across 

01:24:53.044 --> 01:24:55.044
what we call different tracks, 
so stay stay tuned.

01:25:00.152 --> 01:25:04.453
     Anymore questions, guys?  
Oh, cool! 

01:25:04.454 --> 01:25:06.454
   &gt;&gt; AUDIENCE:  Speaking off 
microphone)

01:25:11.755 --> 01:25:12.940
. 
   &gt;&gt; KOBI GLICK:  That's a good

01:25:12.941 --> 01:25:16.547
 question.  We are making like, 
we are thinking a lot about 

01:25:16.548 --> 01:25:20.934
narrowing down the device space 
at different stages of the 

01:25:20.935 --> 01:25:23.799
rollout.  I would say for now we
 don't have a concrete answer 

01:25:23.800 --> 01:25:26.330
here.  We can't commit that we 
will build this support, but now

01:25:26.556 --> 01:25:30.276
 that we launched a new catalog,
 we are looking forward to get 

01:25:30.277 --> 01:25:34.263
developer feedback on how you 
guys use the catalog and how you

01:25:34.264 --> 01:25:37.074
 guys stack rank the most 
painful areas now that you have 

01:25:37.075 --> 01:25:40.154
the data at your fingertips so 
feel free to share this feedback

01:25:40.155 --> 01:25:42.155
 with us further.

01:25:45.192 --> 01:25:47.285
   &gt;&gt; AUDIENCE:  (Speaking off 
microphone)

01:26:10.449 --> 01:26:11.527
. 
   &gt;&gt; KOBI GLICK:  You mean the 

01:26:11.528 --> 01:26:16.249
permissions in the play console?
  Okay.  Okay.

01:26:16.250 --> 01:26:18.429
   &gt;&gt; AUDIENCE:  (Speaking off  
microphone)

01:26:36.118 --> 01:26:36.761
. 
   &gt;&gt; MILENIA NIKOLIC:  For 

01:26:36.762 --> 01:26:38.762
permissions in particular we 
made recent changes so I'm not 

01:26:38.827 --> 01:26:41.779
sure when you checked this out 
the last.  We are also looking 

01:26:41.780 --> 01:26:45.719
into this area very closely, so 
hopefully some of this will be 

01:26:45.720 --> 01:26:50.389
coming soon. 
   &gt;&gt; SARAH THOMPSON:  Right 

01:26:50.390 --> 01:26:52.047
here.
   &gt;&gt; AUDIENCE:  (Speaking off 

01:26:52.048 --> 01:26:54.048
microphone)

01:27:16.461 --> 01:27:17.850
. 
   &gt;&gt; KOBI GLICK:  Are you 

01:27:17.851 --> 01:27:20.486
staying here for the next talk? 
 I see some guys in the audience

01:27:20.487 --> 01:27:24.334
 I can connect you to.  Just 
sitting like largely just behind

01:27:24.335 --> 01:27:29.718
 you, so I'm just hinting.  So I
 will connect you with them. 

01:27:29.719 --> 01:27:31.284
   &gt;&gt; MILENIA NIKOLIC:  Short 
answer is, yes, we want 

01:27:31.285 --> 01:27:34.390
everything to be real time, and 
I think now they will kill me 

01:27:34.494 --> 01:27:37.430
now that I said this, but they 
are behind you so they can give 

01:27:37.431 --> 01:27:39.431
you a better 

01:27:42.921 --> 01:27:44.973
answer. 
   &gt;&gt; SARAH THOMPSON:  Over 

01:27:44.974 --> 01:27:46.712
here.
   &gt;&gt; AUDIENCE:  (Speaking off 

01:27:46.713 --> 01:27:48.713
microphone)

01:28:00.869 --> 01:28:01.523
. 
   &gt;&gt; KOBI GLICK:  This is a 

01:28:01.524 --> 01:28:04.125
good question, one thing we are 
a bit concerned about at least 

01:28:04.233 --> 01:28:08.476
for now, you probably know 
multiAPK and you know how 

01:28:08.789 --> 01:28:11.859
complex this multidimension 
could get if you start charting 

01:28:12.081 --> 01:28:17.094
by screen density and ABI, et 
cetera, you can end up with a 

01:28:17.310 --> 01:28:19.310
lot of APK's

01:28:23.097 --> 01:28:27.363
 so we are a bit concerned about
 adding another dimension called

01:28:23.097 --> 01:28:25.040
 country on top of that, but at 
the same time, we do a lot of 

01:28:25.041 --> 01:28:28.992
thinking in how we enable you to
 provide different experiences 

01:28:28.993 --> 01:28:30.993
to different users in

01:28:33.827 --> 01:28:37.627
 different geos.  If you heard 
the keynote this morning, 

01:28:33.827 --> 01:28:38.106
Android Go is a program that is 
targeting the next billion 

01:28:38.107 --> 01:28:44.440
users, and Play will urn  unveil
 a bunch of functionalities like

01:28:44.569 --> 01:28:46.569
 represent the way we recommend 
you guys to think about the 

01:28:46.752 --> 01:28:49.456
problem space and how to build 
different experiences for 

01:28:49.457 --> 01:28:52.148
different geographies.  So stay 
tuned.  This will come in the 

01:28:52.149 --> 01:28:54.149
next few months.

01:29:06.170 --> 01:29:09.643
next few months. 
   Lrve. 

01:29:09.644 --> 01:29:11.644
   &gt;&gt; MILENIA NIKOLIC:  Key will
 be per app per developer, 

01:29:12.075 --> 01:29:14.075
correct.

01:29:18.257 --> 01:29:22.631
   &gt;&gt; AUDIENCE:  (Speaking off 
microphone). 

01:29:22.632 --> 01:29:24.383
   &gt;&gt; MILENIA NIKOLIC:  
Currently it's a Play Console 

01:29:24.384 --> 01:29:26.384
feature.

01:29:27.546 --> 01:29:29.546
   &gt;&gt; AUDIENCE:  (Speaking off 
microphone)

01:29:40.296 --> 01:29:41.376
.
   &gt;&gt; KOBI GLICK:  I don't think

01:29:41.377 --> 01:29:44.652
 we are currently allow 
targeting by l ocal, so not that

01:29:45.089 --> 01:29:49.498
 I'm aware of. 
   &gt;&gt; MILENIA NIKOLIC:  Yes. 

01:29:49.499 --> 01:29:51.573
   &gt;&gt; KOBI GLICK:  This is 
similar to what I said about 

01:29:51.905 --> 01:29:55.316
like countries, right.  The 
multimulti-APK space is very 

01:29:56.063 --> 01:30:00.108
complex and adding another level
 of complexity, we are a bit 

01:30:00.554 --> 01:30:03.920
concerned that we will kind of 
make things too complex.  We are

01:30:03.921 --> 01:30:08.188
 working on a bunch of early 
ideas in how we simplify this 

01:30:08.189 --> 01:30:11.588
area in general, and when those 
ideas come to life, we could 

01:30:13.010 --> 01:30:17.057
probably introduce like another 
level of targeting once we strip

01:30:17.707 --> 01:30:19.707
 the current complexity from the

01:30:22.779 --> 01:30:23.318
system. 
   &gt;&gt; MILENIA NIKOLIC:  This is 

01:30:23.319 --> 01:30:26.134
very interesting.  If you don't 
mind s taying a little bit, I 

01:30:26.135 --> 01:30:28.981
would like to ask you about the 
use case a little bit more to 

01:30:28.982 --> 01:30:31.361
make sure I understand. 
   &gt;&gt; KOBI GLICK:  We will take 

01:30:31.362 --> 01:30:35.042
one last question because we are
 running out of time.

01:30:35.043 --> 01:30:37.043
   &gt;&gt; AUDIENCE:  (Speaking off 
microphone)

01:30:41.868 --> 01:30:42.399
. 
   &gt;&gt; KOBI GLICK:  When you say 

01:30:42.400 --> 01:30:47.464
all of this --
   &gt;&gt; AUDIENCE:  (Speaking off 

01:30:47.465 --> 01:30:49.314
microphone). 
   &gt;&gt; KOBI GLICK:  You mean the 

01:30:49.315 --> 01:30:53.634
devices information?  We don't 
have an API yet.  We are 

01:30:53.802 --> 01:30:56.311
considering our options around 
exporting this data, so we might

01:30:56.312 --> 01:31:00.798
 be able to export this data.  
I'm not sure at least in the, in

01:31:01.122 --> 01:31:05.270
 the near future, I'm not sure 
that we will expose an API for 

01:31:05.271 --> 01:31:09.452
managing those things from an 
API, rather just dropping an 

01:31:09.859 --> 01:31:14.908
export of the device catalog to 
you guys.  Cool. 

01:31:14.909 --> 01:31:17.205
   &gt;&gt; MILENIA NIKOLIC:  Thank 
you very much. 

01:31:17.206 --> 01:31:20.170
   &gt;&gt; SARAH THOMPSON:  Thanks 
for coming, enjoy the rest of I/

01:31:20.539 --> 01:31:22.539
O.

01:31:30.205 --> 01:31:32.205
 (Concluded

01:31:33.596 --> 01:31:35.596
 at 4:43CT)

01:38:13.014 --> 01:38:15.014
.

01:38:45.789 --> 01:38:47.789
   &gt;

01:38:50.874 --> 01:38:50.968
&gt;
   RAW FILE

01:38:50.969 --> 01:38:53.369
   SAN JOSE, CALIFORNIA
   4:00 PM CT

01:38:50.969 --> 01:38:53.235
   STAGE 2
   NEW RELEASE &amp; DEVICE 

01:38:50.969 --> 01:38:54.835
TARGETING TOOLS OR: HOW I 
LEARNED TO STOP WORRYING &amp; LOVE 

01:38:50.969 --> 01:38:52.969
ANDROID DIVERSITY! 

01:39:36.624 --> 01:39:37.624
   &gt;&gt;
   &gt;&gt;

01:47:56.620 --> 01:48:00.256
everyone!  Welcome to our talk 
on the fact that no one likes 

01:48:00.257 --> 01:48:03.490
crashing or janky apps I'm 
Lydia, a technical program 

01:48:03.898 --> 01:48:08.631
manager on Android.
   &gt;&gt; RICCARDO GOUONI:  

01:48:08.632 --> 01:48:11.055
Engineering Manager on Google 
Play. 

01:48:11.056 --> 01:48:13.584
   &gt;&gt; FERGUS HURLEY:  Product 
manager for an droi vitals.  

01:48:13.585 --> 01:48:16.732
Hands up who likes one star 
ratings?  We have one person in 

01:48:17.923 --> 01:48:21.234
the wrong talk.  I'm sorry, but 
the people who don't like one 

01:48:21.235 --> 01:48:24.973
star ratings are in the right 
place.  So we are here to tell 

01:48:24.974 --> 01:48:28.117
you how you can Engineer your 
app for high performance with 

01:48:28.427 --> 01:48:33.117
the new tools available on 
Android and other than Google 

01:48:33.118 --> 01:48:35.873
Play.
   We are going to start off 

01:48:35.874 --> 01:48:38.949
talking about why performance 
matters in general and then we 

01:48:39.307 --> 01:48:43.032
will jump into the news 
initiative we have around 

01:48:43.033 --> 01:48:47.482
Android vitals and how we have  
simplified it for you to take 

01:48:48.292 --> 01:48:51.654
action easier by using concept 
of bad behaviors.  Then we will 

01:48:51.840 --> 01:48:54.775
jump into how you can detect and
 fix issues most effectively to 

01:48:54.971 --> 01:49:00.311
be able to have success.  Great.
  So for the people who want to 

01:49:01.109 --> 01:49:03.851
avoid those one star ratings, 
the number one way you can do 

01:49:03.852 --> 01:49:08.681
that is by focusing on stability
 of your applications.  We put 

01:49:08.682 --> 01:49:10.682
Google's Machine Learning to 
work to be able to figure out 

01:49:10.712 --> 01:49:14.555
what are people talking about in
 one star ratings.  50% of one 

01:49:14.556 --> 01:49:19.576
star ratings are talking about 
stability and bugs. 

01:49:19.577 --> 01:49:23.929
   Then once you fix those 
issues, how request  can you get

01:49:23.930 --> 01:49:28.786
 to a five star app.  If you 
want to get to a five star app 

01:49:29.168 --> 01:49:34.090
focusing on design, usability 
and speed because 60% of reviews

01:49:34.209 --> 01:49:39.756
 are talking about those topics.
  Don't just take our word for 

01:49:39.757 --> 01:49:44.831
it, or more likely Google 
Machine Learning's word for it, 

01:49:44.832 --> 01:49:51.153
you can take developer's words. 
 The Busuu team found that 

01:49:51.154 --> 01:49:53.806
focusing on performance and 
making that a part of their 

01:49:53.807 --> 01:49:55.807
culture, they were able to 
increase their star rating as a

01:49:59.489 --> 01:50:02.767
 result.  The Big Fish Games 
team have even seen increases in

01:50:03.482 --> 01:50:05.482
 retention by focusing on 

01:50:08.817 --> 01:50:11.236
performance.  At Google and 
specifically within Android, we 

01:50:11.619 --> 01:50:14.364
are obsessed with our 
performance and device 

01:50:14.365 --> 01:50:16.270
performance.  We have been 
obsessing over this for a number

01:50:16.271 --> 01:50:20.017
 of years now. 
   Back in 2012 we launched 

01:50:20.309 --> 01:50:25.465
project butter with jelly bean. 
 Since then, we have launched 

01:50:25.755 --> 01:50:32.303
the dose mode, project vocal can
 and this year a bunch of new 

01:50:32.304 --> 01:50:35.434
tools in Android O and the 
ability for you to get insights 

01:50:35.435 --> 01:50:38.737
with Android vitals. 
   So what is an void vitals?  

01:50:38.738 --> 01:50:42.425
You might have seen in in the 
keynote earlier today.  This is 

01:50:42.426 --> 01:50:44.426
the new

01:50:45.758 --> 01:50:50.082
  new initiative for you to gain
 new insights across Core 

01:50:50.684 --> 01:50:52.714
performance metrics.  The three 
we are starting with are 

01:50:53.393 --> 01:50:58.320
stability, battery, and render 
times.  You will see many more 

01:50:58.321 --> 01:51:00.687
come over the course of the next
 few months and we will be able 

01:51:00.791 --> 01:51:05.087
to give you those insights on 
Android and on the Play Console.

01:51:07.345 --> 01:51:10.767
we are launching today.  First 
one is stability.  So everyone 

01:51:10.768 --> 01:51:14.005
knows that you shouldn't have 
your app crash.  People have 

01:51:14.298 --> 01:51:16.298
been focusing on this a number 
of years

01:51:19.144 --> 01:51:23.099
 and crash has induced the 
experience of crash free user.  

01:51:23.288 --> 01:51:26.716
Now you can see your crash free 
user rate and your crash rate.  

01:51:26.914 --> 01:51:30.999
You can also see your ANR rate. 
 This is where your ANR is a 

01:51:31.382 --> 01:51:34.988
concept on Android which is an 
application not responding.  

01:51:34.989 --> 01:51:38.515
That's when your app appears  
frozen and does not respond for 

01:51:38.516 --> 01:51:40.516
five seconds.

01:51:44.869 --> 01:51:50.398
this is where we want you to 
avoid using people's devices and

01:51:50.726 --> 01:51:53.743
 consuming their battery 
inefficiently.  This is where we

01:51:53.985 --> 01:51:57.617
 want to avoid using the radios,
 or using the CPU when you 

01:51:57.618 --> 01:51:59.618
shouldn't be and you don't need

01:52:02.730 --> 01:52:05.386
 to.  The next area is 
rendering.  So this is where we 

01:52:05.504 --> 01:52:09.598
want to be able to help you 
understand how you can provide 

01:52:09.599 --> 01:52:12.517
silky smooth experience to your 
users so they feel like your app

01:52:12.733 --> 01:52:17.096
 is smooth and fluid on their 
device.  We swr two metrics we 

01:52:17.682 --> 01:52:21.421
will introduce you today to help
 you deeply understand that 

01:52:21.618 --> 01:52:24.411
area. 
   So we are talking about three

01:52:25.092 --> 01:52:27.741
 major performance areas here.  
And within each performance area

01:52:27.742 --> 01:52:31.989
 we are going to be introducing 
two metrics.  It's a lot of data

01:52:32.077 --> 01:52:34.838
 to be able to understand and 
consume.  So we have simplified 

01:52:35.085 --> 01:52:41.882
it to this concept of bad we 
have yores.  We take your app, 

01:52:42.340 --> 01:52:45.135
study performance data and 
figure out if you are in the 

01:52:45.136 --> 01:52:49.858
bottom 25% of apps   according 
to that metric we flag it to you

01:52:49.859 --> 01:52:52.799
 and we say hey you need to 
improve in this area.  Let's do 

01:52:52.800 --> 01:52:58.932
a show of hands.  Let's say 5% 
of users are experiencing that 

01:52:58.933 --> 01:53:03.501
50% of their frames are taking 
more than 16 frames, 16 

01:53:03.898 --> 01:53:06.000
milliseconds to render on the 
screen.  Is that a problem?  

01:53:06.001 --> 01:53:08.933
Hands up if you think it's a 
problem. 

01:53:08.934 --> 01:53:11.355
   Okay.  Great.  So lots of 
people agree that's a problem, 

01:53:11.559 --> 01:53:14.079
and lots of people don't agree 
that that's a problem.  Well, we

01:53:14.390 --> 01:53:17.031
 will actually tell you in the 
Console when you have reached 

01:53:17.032 --> 01:53:19.631
the boundary of when that's a 
problem and you are in the 

01:53:20.243 --> 01:53:25.386
bottom 25%.  Right now that's at
 about 2% of users experiencing 

01:53:25.387 --> 01:53:29.624
that rate will actually be 
flagged and that is putting you 

01:53:29.625 --> 01:53:32.975
in the bottom 25% so we are 
trying to simplify is for you so

01:53:33.083 --> 01:53:35.806
 you can be able to understand 
where you are positioned 

01:53:35.920 --> 01:53:40.647
according to the benchmark. 
   So where do you see this 

01:53:40.937 --> 01:53:45.211
data?  You see the data in a new
 top level navigation item in 

01:53:45.579 --> 01:53:48.709
the Console called aandroid 
vitals.  It's live to all of you

01:53:48.710 --> 01:53:53.444
 and if you have an update you 
will see the insights I will 

01:53:53.445 --> 01:53:57.578
tell you about and Ricardo will 
tell you about now. 

01:53:57.579 --> 01:54:00.430
   &gt;&gt; RICCARDO GOUONI:  So as 
Fergus said we just launched a 

01:54:00.722 --> 01:54:04.188
new section called Android 
vitals, and it is available to 

01:54:04.372 --> 01:54:07.504
all of you today and you can 
check it out now.  What is it 

01:54:07.938 --> 01:54:11.840
does, it summarizes all of the 
findings that we have about your

01:54:12.146 --> 01:54:15.961
 app performance across three 
domains that fearing Gus 

01:54:15.962 --> 01:54:18.804
mentioned, stability, battery, 
and rendering.  It works out of 

01:54:19.107 --> 01:54:24.252
the box without any integration 
needed.  No SDKs to add, nothing

01:54:24.435 --> 01:54:29.297
 to add to your multi-APK size. 
 The data that you find there is

01:54:29.807 --> 01:54:33.224
 collected from millions of 
users that have opted in to 

01:54:33.225 --> 01:54:36.258
share diagnostic information 
with Google to help all of you 

01:54:36.462 --> 01:54:39.088
understand and improve quality 
of apps. 

01:54:39.089 --> 01:54:42.404
   Android vitals also 
highlights whenever at any given

01:54:42.405 --> 01:54:45.533
 time there is a problem that 
affects a significant fraction 

01:54:45.534 --> 01:54:47.534
of you're

01:54:49.942 --> 01:54:53.007
 users.  You can see the related
 marks to indicate you should be

01:54:53.202 --> 01:54:58.092
 looking at rendering and fsh if
 there is an issue there.  You 

01:54:58.339 --> 01:55:01.990
can use this as the first port 
of call to understand your 

01:55:01.991 --> 01:55:07.838
performance.  We will spend time
 to go into detail on stability,

01:55:08.145 --> 01:55:11.572
 battery and rendering.  
Stability is about crashes and 

01:55:11.573 --> 01:55:15.886
ANR reports, applications not  
responding. 

01:55:16.312 --> 01:55:19.650
   Until today, the only way for
 an ANR or a crash to surface in

01:55:19.966 --> 01:55:24.290
 the Play Console is was if your
 users explicitly acknowledge a 

01:55:24.291 --> 01:55:27.946
dialogue an the phone for each 
ANR crash to be reported.  And 

01:55:28.134 --> 01:55:32.494
this is obviously tedious and it
 leads to a low volume of crash 

01:55:32.893 --> 01:55:34.911
and ANR reports. 
   The first thing we have done 

01:55:35.096 --> 01:55:39.333
is we have greatly reduced user 
friction.  As I mentioned, the 

01:55:39.334 --> 01:55:42.571
data that you find there comes 
from user that's have opted in 

01:55:42.572 --> 01:55:46.504
to share diagnostic information.
  Opt in typically h appens only

01:55:46.678 --> 01:55:51.740
 one when I person activates a 
new phone, and that is a very 

01:55:51.741 --> 01:55:53.653
low friction. 
   So this means that in the 

01:55:53.654 --> 01:55:58.110
Play Console, now you see over 
100 fold coverage in the number 

01:55:58.311 --> 01:56:03.147
of reports with reports coming 
from users running versions of 

01:56:03.148 --> 01:56:07.817
an destroyed as old as jelly 
bean.  And this reaches 98% of 

01:56:09.018 --> 01:56:12.747
the devices that Play service is
 installed.  Let's start with 

01:56:12.748 --> 01:56:15.589
the first domain, stability.  
What are the bad behaviors we 

01:56:15.924 --> 01:56:19.296
want to flag out there?  
Crashes, and application not 

01:56:19.614 --> 01:56:22.935
responding which is application 
freezes. 

01:56:22.936 --> 01:56:25.651
   For sure you never really 
want any user of your app to 

01:56:25.652 --> 01:56:29.774
experience one of them, and so 
we define these bad  behaviors 

01:56:29.775 --> 01:56:32.327
in terms of percentage of users 
that are experiencing any of 

01:56:32.328 --> 01:56:37.249
them in any given day.  You may 
be familiar with the equivalent 

01:56:37.250 --> 01:56:40.981
metric that other crash 
reporting tools have introduces,

01:56:41.193 --> 01:56:45.322
 crash for users and so for the 
next minutes I will focus on

01:56:49.076 --> 01:56:52.373
 ANR specifically.  What is ANR.
  ANR means application not 

01:56:52.374 --> 01:56:54.696
responding and this happens when
 your application freezes and 

01:56:54.697 --> 01:56:57.751
stops responding to user input. 
 This could be because you have 

01:56:57.752 --> 01:57:01.501
a deadlock in your code, because
 you have a UI thread which is 

01:57:01.502 --> 01:57:04.707
low or you have background 
receivers that do not complete 

01:57:04.708 --> 01:57:07.996
within a meaningful amount of 
time. 

01:57:07.997 --> 01:57:12.160
   ANRs are super disruptive of 
the user experience and you 

01:57:12.161 --> 01:57:14.906
should aim to never have any of 
them.  Because the application 

01:57:14.907 --> 01:57:18.546
is frozen during an ANR it means
 you cannot typically use a 

01:57:18.745 --> 01:57:24.271
crash reporting SDK to collect 
them.  On the other side, the 

01:57:24.272 --> 01:57:26.791
Android platform tracks all of 
them automatically so they are 

01:57:26.792 --> 01:57:28.922
all available in the Play 
Console without you having to do

01:57:29.131 --> 01:57:31.131
 anything at 

01:57:33.891 --> 01:57:37.003
all.  You just go to the Android
 vital section and in is there 

01:57:37.228 --> 01:57:41.437
you will find a tab called ANR 
rate.  There you can see how 

01:57:41.438 --> 01:57:44.503
many unique users experience an 
application not responding when 

01:57:44.504 --> 01:57:51.932
the app was used on a given day 
across sub versions, device.  If

01:57:52.242 --> 01:57:55.765
 the fraction is significant you
 get a red highlight to draw 

01:57:55.766 --> 01:57:58.391
your attention to you can focus 
on the most prominent issues and

01:57:58.574 --> 01:58:02.019
 dive into the d etails.  You 
can click there.  Related ANR 

01:58:02.020 --> 01:58:05.516
section, and in there, you 
arrive in the ANR in crisis 

01:58:05.744 --> 01:58:09.387
section of the Play Console. 
   Here in addition to reviewing

01:58:09.679 --> 01:58:15.537
 your overall crash rate and ANR
 rate, you can dive into each 

01:58:15.943 --> 01:58:18.574
crash and ANR that has been 
detected for your

01:58:22.390 --> 01:58:25.017
 application.  Android collects 
ANRs and crashes almost 

01:58:29.482 --> 01:58:33.615
immediately as they occur.  So 
here you find crashes and ANRs 

01:58:29.482 --> 01:58:31.972
that are typically a few minutes
 old at most.  There are a bunch

01:58:32.287 --> 01:58:35.303
 of features.  We highlight when
 a given ANR has been introduced

01:58:36.112 --> 01:58:39.381
 for the first time in your most
 recent app version with those 

01:58:39.683 --> 01:58:42.894
little orange highlights. 
   You can track the quality of 

01:58:43.100 --> 01:58:47.038
your last release.  You also get
 to see the number of unique 

01:58:47.039 --> 01:58:51.693
users that have been affected by
 that particular ANR so you can 

01:58:52.181 --> 01:58:55.795
distinguish between high volume 
issues affecting only a handful 

01:58:55.796 --> 01:58:59.734
of users versus ones that are 
affecting a significant fraction

01:58:59.735 --> 01:59:03.093
 of your user base.  You can 
dive into the details and 

01:59:03.094 --> 01:59:05.709
observe how the number of 
reports and the numbers of 

01:59:05.710 --> 01:59:09.344
affected users trends over time,
 and how it breaks down across 

01:59:09.345 --> 01:59:13.177
device versions, OS version, app
 version.. 

01:59:13.557 --> 01:59:16.415
   And obviously you get the 
full thread dump that captures 

01:59:16.416 --> 01:59:18.538
the application state at the 
time the ANR occurred and for 

01:59:19.457 --> 01:59:22.693
crashes, obviously you get 
similar functionality where you 

01:59:23.060 --> 01:59:26.793
get the rate that was observed 
when the crash occurred.  So I 

01:59:27.110 --> 01:59:29.623
think this gives you information
 visibility into what is 

01:59:29.624 --> 01:59:33.259
happening on your you'rer's 
phone.  The next step is to try 

01:59:33.260 --> 01:59:36.898
to reproduce and debug them. 
   What I recommend is the new 

01:59:37.101 --> 01:59:41.841
Android studio 3.2.  It has 
plenty of new profiling 

01:59:41.842 --> 01:59:43.842
capabilities.  The Android 
profilers in

01:59:47.189 --> 01:59:50.110
 studio 3.2 present real time 
data.  And I think this is a 

01:59:50.111 --> 01:59:54.860
great next step to debug your 
ANRs because root causing them 

01:59:54.861 --> 01:59:58.897
often lies in not taking into 
proper consideration CPU 

01:59:58.898 --> 02:00:03.102
intensive operation or blocking 
operations like fetching data 

02:00:03.103 --> 02:00:05.854
from the network. 
   The CPU profiler, for 

02:00:06.034 --> 02:00:09.409
example, gives you real time CPU
 usage for your app process on a

02:00:09.410 --> 02:00:13.726
 timeline.  You can dive through
 instrumented meta traces and 

02:00:14.812 --> 02:00:17.550
understand which methods in your
 UI threads are using up most of

02:00:17.770 --> 02:00:24.620
 the time and become blocking.  
Similarly, the network profiler 

02:00:25.030 --> 02:00:27.547
displays net work activities on 
a timeline showing that it was 

02:00:28.032 --> 02:00:31.280
sent, received and associated  
latencies. 

02:00:31.281 --> 02:00:33.431
   You can use this to 
understand if a slow network 

02:00:33.717 --> 02:00:37.946
goal is making thread blocks for
 a response or because of an ANR

02:00:37.947 --> 02:00:44.706
 this way.  And showed in the 
keynote before, it's very easy 

02:00:44.707 --> 02:00:47.119
to jump into the code that is 
responsible for the network 

02:00:47.120 --> 02:00:51.120
code.  If you want to learn more
 about the profilers there is a 

02:00:51.121 --> 02:00:54.092
great talk norm morning in 
amphitheater that I encourage 

02:00:54.093 --> 02:00:59.468
you to attend. 
   Now, we discussed how to 

02:00:59.469 --> 02:01:01.959
review how many ANRs you have, 
how to debug them, but the thing

02:01:01.960 --> 02:01:06.504
 is how do you prevent them from
 happening in the first place?  

02:01:06.505 --> 02:01:09.126
Textbook recommendation, do not 
do blocking operations in the UI

02:01:09.456 --> 02:01:13.202
 thread and use, for example, a 
sync task instead.  You can use 

02:01:13.203 --> 02:01:18.670
strict mode to catch accidental 
disk or network access on the 

02:01:19.004 --> 02:01:21.135
application main thread as well 
glvment another common case is 

02:01:21.232 --> 02:01:27.274
when you have a broadcast 
receiver that receives and does 

02:01:27.275 --> 02:01:31.311
not finish processing within a 
window of time offer your 

02:01:31.808 --> 02:01:34.087
broadcast receiver goes into 
sync but you forget to finish on

02:01:34.088 --> 02:01:37.715
 the pending result you get 
back.  Android 101, very simple 

02:01:37.716 --> 02:01:39.902
examples.  Most likely your code
 is much more complicated than 

02:01:40.397 --> 02:01:44.177
this.  You may be using cues, 
asynchronous separation, 

02:01:44.547 --> 02:01:48.478
libraries like RX Java. 
   The basics do not change.  

02:01:48.479 --> 02:01:52.225
The same recommendations apply. 
 Be mindful of which threads, on

02:01:52.429 --> 02:01:56.244
 which  threads the call back 
for your asynchronous process 

02:01:56.245 --> 02:01:59.515
end up executing on, use 
semantics in coding processes to

02:01:59.516 --> 02:02:03.148
 make sure that you don't end up
 executing accidentally on UI 

02:02:03.149 --> 02:02:06.419
threads when you don't want, and
 so on. 

02:02:06.420 --> 02:02:11.805
   Finally, be mindful of 
introducing deadlocks in your 

02:02:11.806 --> 02:02:14.554
app.  The traces that you are 
collecting when the device is 

02:02:14.723 --> 02:02:19.504
connected to your PC when 
debugging or by downloading the 

02:02:19.666 --> 02:02:23.124
tracing you can easily spot if 
you have deadlocks by looking 

02:02:23.439 --> 02:02:27.875
when a given thread lick the UI 
thread is locked waiting for 

02:02:28.547 --> 02:02:33.628
background one and vice versa. 
   So this is all I have to 

02:02:33.629 --> 02:02:36.522
cover about ANR.  The  
fundamental question remains, 

02:02:36.523 --> 02:02:39.194
how much do they matter?  How 
much should you care?  The 

02:02:39.475 --> 02:02:43.785
answer is you should really cash
 a lot.  We look at apps that 

02:02:43.786 --> 02:02:46.942
have high and low crash rates in
 place.  High crash rate, more 

02:02:47.639 --> 02:02:51.881
than 5% of users experiencing a 
crash or an NRPD.  What we find 

02:02:52.677 --> 02:02:59.134
is that these apps have 30% more
 uninstallation in the first day

02:02:59.135 --> 02:03:02.748
 than apps that have a low crash
 rate, less than 1%.  The 

02:03:02.749 --> 02:03:05.892
message is simple, if user finds
 your app and they experience a 

02:03:06.386 --> 02:03:08.922
crash, most likely they will 
leave as soon as they find it.  

02:03:09.101 --> 02:03:13.358
I will now hand over to Lydia 
for battery and rendering. 

02:03:13.359 --> 02:03:15.998
   &gt;&gt; LYDIA FITZPATRICK:  Thanks
 Ricardo.  Android users care a 

02:03:16.302 --> 02:03:20.083
lot about battery life.  In fact
 making it through the day 

02:03:20.084 --> 02:03:22.777
without needing to charge their 
device is a top concern for 

02:03:22.966 --> 02:03:29.516
Android use  users.  One of the 
number one ways we can conserve 

02:03:29.825 --> 02:03:33.843
power and battery power is by 
putting the device into deep 

02:03:33.844 --> 02:03:37.778
sleep when it's idle.  This 
means powering down the CPU, 

02:03:37.779 --> 02:03:40.648
radio and other component that's
 would otherwise drain power. 

02:03:41.926 --> 02:03:44.561
   However, you as application 
developers can prevent the 

02:03:45.068 --> 02:03:49.402
device from going into a deep 
sleep and  conserving power.  

02:03:49.403 --> 02:03:52.333
One of the ways you can do this 
is through wake locks.  Wake 

02:03:52.839 --> 02:03:56.965
locks keep the device awake so 
that it can perform an activity 

02:03:56.966 --> 02:03:59.082
on behalf of your application.  
There is a couple of different 

02:03:59.083 --> 02:04:03.459
wake locks.  The first is a full
 wake lock.  This keeps the 

02:04:03.633 --> 02:04:07.584
screen on and this is usually 
used by a video app or a gaming 

02:04:07.585 --> 02:04:09.381
app. 
   Because the screen is on, the

02:04:09.382 --> 02:04:12.335
 user is going to be aware that 
the wake lock is being held and 

02:04:12.336 --> 02:04:15.097
in full control of powering down
 the app and saving their 

02:04:15.487 --> 02:04:19.499
battry.  There is another kind 
of wake lock.  This is called a 

02:04:19.754 --> 02:04:22.724
partial wake lock.  Partial wake
 lock doesn't keep the screen 

02:04:23.112 --> 02:04:25.370
on.  Because of this, the user 
doesn't know that the wake lock 

02:04:25.461 --> 02:04:28.603
is being held and so if a wake 
lock, a partial wake lock is 

02:04:28.894 --> 02:04:33.330
held for too long it can become 
a silent and deadly killer of 

02:04:33.331 --> 02:04:37.355
battery power.  Because of this 
we defined a bad behavior are 

02:04:37.871 --> 02:04:40.909
stuck partial wake lock.  We 
defined a stuck partial wake 

02:04:41.027 --> 02:04:44.022
lock is one held over a an hour 
by a significant percentage of 

02:04:44.429 --> 02:04:48.275
your users. 
   The Android vitals dashboard 

02:04:48.276 --> 02:04:51.796
will show you how you are using 
and possibly abusing wake locks.

02:04:51.797 --> 02:04:55.743
  It will show you the 
distribution of how how long 

02:04:55.744 --> 02:04:57.744
wake 

02:04:59.291 --> 02:05:03.224
locks are being held by each 
version of your app.  In this 

02:04:59.291 --> 02:05:01.687
example, you can see the 
majority of wake locks are being

02:05:01.890 --> 02:05:05.544
 held for a might be it or less 
which is ideal from a power 

02:05:06.027 --> 02:05:08.261
saving perspective.  However, 
there is a long tail of wake 

02:05:08.585 --> 02:05:12.602
lochs being held over an hour 
which meet the definition of bad

02:05:12.896 --> 02:05:15.720
 behavior or stuck wake locks so
 you can see we flagged this app

02:05:15.936 --> 02:05:21.202
 for the bad behavior in the 
Android vitals dashboard.

02:05:21.203 --> 02:05:24.140
   In the Android vitals 
dashboard, we will give you the 

02:05:24.141 --> 02:05:27.859
information you need to debug 
your stuck wake lock.  Most 

02:05:28.367 --> 02:05:31.833
importantly the name of the wake
 lock.  In order to prevent, to 

02:05:31.834 --> 02:05:35.330
protect user privacy, we will 
only shows wake lock names if 

02:05:35.513 --> 02:05:38.839
it's been used across many 
sessions.  This will prevent the

02:05:39.137 --> 02:05:41.996
 leaking of any personally 
identifiable information.  

02:05:42.181 --> 02:05:46.626
Because of this, I encourage you
 to use standard wake lock names

02:05:48.595 --> 02:05:50.045
 for each distinct wake lock in 
your application in order for 

02:05:50.046 --> 02:05:56.506
them to be debuggable in case 
they become stuck wake locks. 

02:05:56.937 --> 02:05:59.343
   The reason that we are 
highlighting stuck wake locks in

02:05:59.344 --> 02:06:03.053
 the vitals dashboard is because
 of just how dangerous they are.

02:06:03.054 --> 02:06:07.098
  I mentioned in Android we care
 a lot about conserving power.  

02:06:07.099 --> 02:06:10.744
So every day we collect reports 
from internal Google users who 

02:06:10.745 --> 02:06:15.879
have experienced a bad battery 
day.  A bad battery day is one 

02:06:15.880 --> 02:06:18.795
where your device, the battery 
doesn't last as long as it 

02:06:18.796 --> 02:06:22.119
usually does or as long as you 
expect it to.  They will send us

02:06:22.120 --> 02:06:24.897
 these reports. 
   We did analysis across a two 

02:06:24.898 --> 02:06:27.907
month period of all reports last
 summer and we found that 30% of

02:06:27.908 --> 02:06:34.592
 these bad battery days were 
caused by stuck wake locks.  I 

02:06:34.593 --> 02:06:36.712
think this highlights how 
dangerous wake locks are.  They 

02:06:36.713 --> 02:06:39.408
cause real problems for real 
users.  Because of this, I 

02:06:39.409 --> 02:06:41.409
encourage you to avoid using 
wake locks

02:06:45.344 --> 02:06:47.973
 entirely.  Wake locks were 
introduced in the early days of 

02:06:48.399 --> 02:06:51.002
the Android platform and since 
then many of the use cases for 

02:06:51.003 --> 02:06:54.470
which you needed a wake lock you
 no longer need a wake lock for.

02:06:54.471 --> 02:06:57.184
   For example, if you are doing
 a long running download, you 

02:06:57.185 --> 02:07:00.829
can use the download manager  
instead.  If you are 

02:07:01.502 --> 02:07:06.142
synchronizing data with an 
external server, use the sync 

02:07:06.143 --> 02:07:09.686
adapter instead.  If you need to
 run a background task, use the 

02:07:10.093 --> 02:07:12.925
JobDispatcher and if you are 
holding a wake lock so you can 

02:07:13.107 --> 02:07:16.151
process an intent before the 
device goes to sleep, use the 

02:07:17.456 --> 02:07:19.807
job intent services which is 
being released in the support 

02:07:20.281 --> 02:07:23.944
lib B26 coming out later this 
quarter.  Both JobDispatcher and

02:07:23.945 --> 02:07:27.661
 the job intent service are 
compatible with the background 

02:07:27.662 --> 02:07:30.196
restrictions we are going to be 
rolling out in O.  So it's a 

02:07:30.602 --> 02:07:33.923
win/win.  You get a background 
restrictions compatible service,

02:07:34.123 --> 02:07:36.965
 and you don't get any stuck 
wake l ocks. 

02:07:36.966 --> 02:07:42.522
   So definitely check out job 
intents services in support lib 

02:07:44.427 --> 02:07:47.478
B26.  If you are unable to use 
any of these alternatives and 

02:07:48.366 --> 02:07:51.693
you need to use a wake lock in 
your application, I will rehash 

02:07:51.694 --> 02:07:55.220
some of the fundamentals from 
CS101 because they are so 

02:07:55.725 --> 02:07:58.529
dangerous, I will spend time 
rehashing.  First, keep the 

02:07:58.530 --> 02:08:02.266
logic around your wake lock 
extremely simple because any 

02:08:02.267 --> 02:08:05.946
errors in the logic could lead 
to them getting stuck.  Second, 

02:08:05.947 --> 02:08:09.161
try to do as little as possible 
while holding the wake lock so 

02:08:09.370 --> 02:08:12.199
it doesn't need to run for an 
hour or more to do whatever 

02:08:12.200 --> 02:08:15.005
operation you are h olding it 
for.  And finally, use defensive

02:08:15.303 --> 02:08:18.553
 air handling.  You can see in 
this example here, if I hadn't 

02:08:18.554 --> 02:08:21.985
defended against my clean up 
task throwing an exception, the 

02:08:22.679 --> 02:08:25.031
release method on my wake lock 
would never have gotten called 

02:08:25.522 --> 02:08:29.045
and some poor user or perhaps 
millions of users would end up 

02:08:29.442 --> 02:08:34.718
with dead phone batteries. 
   So if you follow all of my 

02:08:34.801 --> 02:08:38.128
advice and are able to not use 
any wake l ocks in your 

02:08:38.129 --> 02:08:40.941
application, I still want you to
 go check out the Android viet 

02:08:40.942 --> 02:08:45.006
will  vitals dashboard for stuck
 wake locks because it's 

02:08:45.132 --> 02:08:49.154
possible services you depend on 
are using wake locks under the 

02:08:49.155 --> 02:08:51.045
cover.
   For example, the network 

02:08:51.046 --> 02:08:53.860
location provider wake lock in 
this case that's used by 

02:08:53.861 --> 02:08:56.917
millions f L of apps to find a 
user location.  If you are using

02:08:56.918 --> 02:09:00.357
 it too aggressively, it could 
hold wake locks for an extended 

02:09:00.358 --> 02:09:02.972
period of time that become stuck
 and you get flagged for that.  

02:09:03.182 --> 02:09:07.328
So in this case, you would fix 
that stuck wake lock by 

02:09:07.915 --> 02:09:10.250
throttling back the number of 
calls you make to the service.  

02:09:10.446 --> 02:09:14.490
So check out the tab even if you
 are not using wake locks so you

02:09:14.491 --> 02:09:17.405
 can tune how you use the 
services under the covers that 

02:09:17.609 --> 02:09:21.037
might be using wake locks.  The 
second way you as an application

02:09:21.342 --> 02:09:24.160
 developer can prevent the phone
 from going into deep sleep and 

02:09:24.161 --> 02:09:27.007
saving power for users it 
through the use of wake ups.  

02:09:27.008 --> 02:09:30.029
Wake ups are alarms that you can
 fire outside of the lifetime of

02:09:30.231 --> 02:09:32.560
 your application to wake the 
device up to do some sort of 

02:09:32.964 --> 02:09:35.777
task  on bemax of your 
application. 

02:09:35.778 --> 02:09:39.443
   If you do this excessively, 
the device won't be able to rest

02:09:39.444 --> 02:09:44.174
 and you will end up draining 
power.  We have identified a bad

02:09:44.491 --> 02:09:49.037
 behavior of excessive wakeups. 
 We define if as percentage of 

02:09:49.323 --> 02:09:52.965
users impacted by wakeups that 
occur more than ten times per 

02:09:54.566 --> 02:09:57.276
hour.  Just like wake locks, you
 can get a full report on the 

02:09:57.277 --> 02:10:01.425
wake ups that you are using or 
possibly abusing in the vitals 

02:10:01.426 --> 02:10:03.935
dashboard.  And just like wake 
locks, you will see the 

02:10:03.936 --> 02:10:07.676
distribution of the number of 
wakeups across sessions and you 

02:10:07.677 --> 02:10:11.003
will be able to see the names of
 each wake up so you can debug 

02:10:11.004 --> 02:10:14.746
any frequent wake up issues and 
just like wake locates will only

02:10:15.155 --> 02:10:17.896
 show the wake up name if it's 
seen across a lot of sessions so

02:10:18.390 --> 02:10:20.921
 we don't leak any personal 
identifying information.  So, 

02:10:20.922 --> 02:10:23.671
again, be sure to use a standard
 name for all wake ups.

02:10:29.671 --> 02:10:33.739
pattern of firing a wake up to 
get the descries awake and 

02:10:34.039 --> 02:10:37.365
holding a wake lock to keep the 
device awake to you can perform 

02:10:37.366 --> 02:10:41.318
some sort of task.  This is a 
double whammy of possible bad 

02:10:41.319 --> 02:10:43.848
behavior because you might be 
waking the device too frequently

02:10:43.849 --> 02:10:48.196
 and the wake lock might get 
stuck.  Let's get rid of both.  

02:10:48.384 --> 02:10:52.660
A much better alternative is the
 Firebase JobDispatcher.  The 

02:10:53.040 --> 02:10:56.368
Android platform itself does 
have a job scheduler but I 

02:10:56.369 --> 02:10:59.575
encourage you to use the 
Firebase JobDispatcher because 

02:10:59.576 --> 02:11:03.909
of its backward compatibility. 
   In the Firebase  

02:11:04.225 --> 02:11:07.434
JobDispatcher you can set up a 
task to lune as a repeating 

02:11:07.435 --> 02:11:11.424
task.  I can run this every 30 
minutes dialing back the 

02:11:11.425 --> 02:11:14.931
frequency you are running the 
task is the first step to say 

02:11:15.229 --> 02:11:17.768
power so 30 minutes is better 
than running it every five 

02:11:18.246 --> 02:11:21.124
minutes.  However, you can corn 
strain the job to run only when 

02:11:21.515 --> 02:11:24.340
on a charger, this is ultimately

02:11:27.500 --> 02:11:31.092
 battery safer because it will 
never ruin while usedders is on 

02:11:31.093 --> 02:11:33.192
battery. 
   Here at Google a lot of apps 

02:11:33.193 --> 02:11:36.937
employ this method.  Play store 
will wait to auto update apps 

02:11:36.938 --> 02:11:39.964
until you are on a charger.  We 
understand a user would rather 

02:11:39.965 --> 02:11:44.405
have a device that lasts through
 the device than a latest update

02:11:44.610 --> 02:11:47.522
 of some apps so I encourage you
 to use the same critical lens 

02:11:47.827 --> 02:11:50.682
when you are considering 
scheduling jobs.  See if it can 

02:11:50.761 --> 02:11:52.761
wait until the device is on a 
charger.

02:11:58.328 --> 02:12:02.777
will talk about today is render 
times.  Render times  measures 

02:12:02.778 --> 02:12:05.405
the amount of time a frame drawn
 by your application takes to 

02:12:05.628 --> 02:12:09.349
get renlderred on the screen 
hardware.  Render time directly 

02:12:09.350 --> 02:12:12.193
correlates with how users 
perceive the performance of your

02:12:15.921 --> 02:12:19.746
app.  Android devices render at 
60 frames per second.  This is 

02:12:19.747 --> 02:12:22.590
based on the refresh rate that's
 available in the screen 

02:12:22.591 --> 02:12:27.626
hardware i tself. 
   If you do the Math, 60 frames

02:12:27.627 --> 02:12:31.461
 per sect breaks down to having 
to render a frame every 16 

02:12:31.462 --> 02:12:35.100
milliseconds.  As long as your 
app is rendering every 16 

02:12:35.101 --> 02:12:37.713
milliseconds, users will feel 
that your app is very smooth, 

02:12:37.714 --> 02:12:43.284
fluid and pleasant to browse.  
If your frames take longer than 

02:12:43.285 --> 02:12:47.773
16 milliseconds, even just 17 
milliseconds, it will get 

02:12:47.774 --> 02:12:51.346
dropped.  If you have a lot of 
dropped frames, your application

02:12:51.347 --> 02:12:56.491
 will feel very stuttery, very 
jarring to users so you want to 

02:12:56.584 --> 02:12:59.249
minimize the number of dropped 
frames that your application 

02:12:59.250 --> 02:13:01.250
has.

02:13:04.650 --> 02:13:07.992
row, and you get to the point 
that it's been 700 milliseconds 

02:13:07.993 --> 02:13:11.343
before you draw the next frame 
in your application, this is the

02:13:11.344 --> 02:13:14.263
 point at which users will think
 your app is unresponsive and 

02:13:14.264 --> 02:13:17.979
they will begin to feel 
frustrated by it.  You should 

02:13:17.980 --> 02:13:22.425
aim to have zero frames that 
take 700 milliseconds or more to

02:13:23.543 --> 02:13:25.543
 render. 
   We have used both of these 

02:13:25.647 --> 02:13:28.384
thresholds to identify bad 
behavior.  The first is slow 

02:13:28.970 --> 02:13:32.718
rendering.  We define this bad 
behavior as the percentage of 

02:13:32.719 --> 02:13:36.875
users who experience more than 
50% dropped frames.  The second 

02:13:37.255 --> 02:13:40.295
bad rendering behavior are 
frozen frames.  We define this 

02:13:40.512 --> 02:13:45.092
as the percentage of users who 
experience more than .1% of 

02:13:45.255 --> 02:13:47.255
their frames being

02:13:50.286 --> 02:13:53.419
 frozen.  The Android vitals 
dashboard reports on both of 

02:13:53.420 --> 02:13:57.867
these  metrics and will flag you
 if you are excessively slow in 

02:13:58.571 --> 02:14:00.675
rendering or too many frozen 
frames. 

02:14:00.676 --> 02:14:03.723
   Just like wake locks and 
wakeups you can see the 

02:14:04.113 --> 02:14:06.113
distribution of r endering times
 across

02:14:08.871 --> 02:14:12.200
 sessions and the dashboard will
 also give you some other 

02:14:12.201 --> 02:14:14.201
statistics to help you 
understand what might be causing

02:14:14.429 --> 02:14:18.362
 your rendering issues.  For 
example, I can see a high 

02:14:18.363 --> 02:14:22.506
percentage of slow UI thread act
  activity.  This indicates to 

02:14:22.695 --> 02:14:27.667
me that I'm probably trying to 
do too much work on the UI 

02:14:27.668 --> 02:14:29.668
thread so I should move things 
like disk I/O or network 

02:14:30.164 --> 02:14:33.115
activity to background thread. 
   These statistics though are 

02:14:33.116 --> 02:14:36.123
pretty high level and they will 
just hint at the root cause of 

02:14:36.124 --> 02:14:38.868
your rendering issues.  To 
really understand what is 

02:14:38.869 --> 02:14:41.653
causing the rendering issues you
 will need to dive deeper.  You 

02:14:41.918 --> 02:14:46.258
can do this in three steps.  The
 first step is to instrument 

02:14:46.448 --> 02:14:51.197
your app with the frame metrics 
aggregator API.  This API is 

02:14:51.515 --> 02:14:59.256
built on the frame metrics API 
released in an droi  Android 

02:14:59.257 --> 02:15:05.791
knew  newinget.  The 23R5EU78 
mets tricks ago gator API 

02:15:05.792 --> 02:15:08.689
aggregates these statistics 
across a series of activities 

02:15:08.937 --> 02:15:11.501
that you define and you define 
the start and the end point of 

02:15:11.691 --> 02:15:16.199
that collection.  So you can 
collect  statistics about how 

02:15:16.200 --> 02:15:19.746
long specific work flows in your
 application take to render. 

02:15:19.845 --> 02:15:25.008
   Once you have done this step,
 step two is to  get the data 

02:15:25.221 --> 02:15:28.529
off the device and upload to the
 Cloud off your servers where 

02:15:28.830 --> 02:15:32.171
you will then analyze it.  You 
will analyze to find what flows 

02:15:32.474 --> 02:15:36.190
are rendering slowly for the  
majority of your users.  From is

02:15:36.397 --> 02:15:39.551
 there you can move onto step 3 
which is getting your device 

02:15:39.552 --> 02:15:43.374
out, walking through the flows, 
all the meanwhile recording a 

02:15:43.375 --> 02:15:46.841
trace.  Once you have reproduced
 that slow r endering behavior 

02:15:47.117 --> 02:15:51.676
or those frozen frames, you can 
upload that trace into sis rase 

02:15:51.677 --> 02:15:54.588
T trace which will tell you 
exactly what was going on in 

02:15:54.589 --> 02:15:58.527
your application when the slow 
rendering occurred and not just 

02:15:58.528 --> 02:16:01.165
your application but what was 
going on in the system as well 

02:16:01.166 --> 02:16:03.887
glvment from there you can 
figure out what specific code 

02:16:03.888 --> 02:16:07.677
passes you need to optimize 
rendering performance.  I have 

02:16:07.831 --> 02:16:12.772
just skimmed the surface of the 
frame metrics ago gator API  as 

02:16:12.773 --> 02:16:16.310
well as sis trace.  Luckily you 
have two more opportunities this

02:16:16.311 --> 02:16:20.554
 evening, Tim Murray, an expert 
on Sys trace will give a talk on

02:16:20.555 --> 02:16:24.975
 how you can use it to debug 
rendering issues.  Fipple as 

02:16:24.976 --> 02:16:29.840
hand lied over a  thousand Sys 
traces and is an expert in the 

02:16:30.082 --> 02:16:32.471
field. 
   On Friday you can learn from 

02:16:33.098 --> 02:16:35.316
Chris and Chet about how you can
 use it to understand your 

02:16:35.681 --> 02:16:39.041
application performance.  And 
with that, I will give it back 

02:16:39.122 --> 02:16:42.558
to Fergus to close. 
   &gt;&gt; FERGUS HURLEY:  Thanks so 

02:16:43.166 --> 02:16:49.309
much.  Thanks Lydia.  Great.  So
 today we introduced three 

02:16:49.719 --> 02:16:52.117
performance areas.  We have many
 other performance areas we will

02:16:52.118 --> 02:16:55.579
 be introducing over the course 
of the next couple of months, 

02:16:56.006 --> 02:17:00.019
app start up time, memory and 
network use.  For each one of 

02:17:00.323 --> 02:17:03.266
these performance areas we are 
going to introduce bad behaviors

02:17:03.870 --> 02:17:07.008
 so ease easy to understand that
 metric and how you are doing in

02:17:07.211 --> 02:17:12.138
 the  metric compared to other 
apps. 

02:17:12.139 --> 02:17:14.981
   A lot of the tools we talked 
about especially on the Play 

02:17:15.557 --> 02:17:19.095
developer Console sides for the 
Android vitals dashboard ago 

02:17:19.096 --> 02:17:22.931
gate over your whole APK.  If 
you want to understand within 

02:17:22.932 --> 02:17:27.975
your APK specific performance 
areas I would encourage you to 

02:17:27.976 --> 02:17:31.304
use the Firebase performance 
more than forking tool.  It was 

02:17:31.305 --> 02:17:36.269
launched earlier today at the 
developer keynote and able to 

02:17:36.270 --> 02:17:39.296
instrument app out of the box 
comes network and start up time 

02:17:39.297 --> 02:17:42.147
but you will also be ail to use 
counters to be able to track 

02:17:42.344 --> 02:17:45.135
whatever you would like to track
 in your application. 

02:17:45.136 --> 02:17:47.980
   There is a talk on this 
that's going to happen tomorrow 

02:17:47.981 --> 02:17:50.721
and I would encourage you to 
attend that to learn more about 

02:17:50.722 --> 02:17:55.071
how you can be able to use the 
Firebase pore performance 

02:17:55.072 --> 02:17:59.509
monitoring  SDK in your 
application to be able to 

02:17:59.510 --> 02:18:02.451
improve performance. 
   We covered why performance 

02:18:02.452 --> 02:18:07.692
matters, we  covered Android 
vitals and the issues and 

02:18:07.693 --> 02:18:12.113
concepts around bad behaviors.  
Again those bad behave yarrs are

02:18:12.524 --> 02:18:18.870
 high ANR rate, high crash rate,
 excessive wakeups, stuck wake l

02:18:18.871 --> 02:18:23.432
 ocks, slow rendering and frozen
 frames.  We introduced the 

02:18:23.631 --> 02:18:26.362
Android vitals dashboard in the 
Play Console, we talked about 

02:18:27.107 --> 02:18:31.518
the Android 3.0 profilers, and 
the Android APIs are available 

02:18:31.519 --> 02:18:36.016
for you. 
   So if you are not motivated 

02:18:36.017 --> 02:18:40.171
bay all of the things we talked 
about around performance today I

02:18:40.287 --> 02:18:43.009
 encourage you to come to our 
talk tomorrow where we can give 

02:18:43.410 --> 02:18:47.444
you a "Buzz" feed like talk on 
why you should care more about 

02:18:47.640 --> 02:18:49.877
performance with the Play 
Console tools we have available.

02:18:49.878 --> 02:18:53.410
  One of the things we will talk
 about in this talk is the 

02:18:53.606 --> 02:18:57.339
rewards the play Store is going 
to offer you for being able to 

02:18:57.340 --> 02:19:00.116
improve the performance of your 
application.  We will get more 

02:19:00.117 --> 02:19:03.000
into the detail there's but we 
will start using this 

02:19:03.001 --> 02:19:07.459
performance data in the p 
romotability within the store. 

02:19:07.634 --> 02:19:10.884
   Another reason I should care 
about performance is we have 2 

02:19:10.885 --> 02:19:15.612
billion users on Android.  It's 
a lot of users.  If you improve 

02:19:15.613 --> 02:19:19.931
the battery life of your device 
and of the device itself by 

02:19:19.932 --> 02:19:23.169
improving the battery life of 
your app, then the user device 

02:19:23.596 --> 02:19:28.037
will be able to last longer.  
They will be able to make mor 

02:19:28.038 --> 02:19:31.041
emergency calls and you are 
basically saving people's lives 

02:19:31.255 --> 02:19:35.508
by focusing on performance.  
Maybe stretching a little there,

02:19:35.509 --> 02:19:38.427
 but hopefully you get it.  
Thank you very much, everyone, I

02:19:38.428 --> 02:19:40.711
 appreciate you joining 

02:19:45.468 --> 02:19:48.215
today ... we will open it up for
 Q and A.  There are mics at the

02:19:48.414 --> 02:19:51.341
 top of the rows and we will be 
in the Sandbox just outside of 

02:19:51.342 --> 02:19:53.342
here afterward to answer 
questions people have.

02:20:26.951 --> 02:20:31.423
     Yes, definitely there is no
 API available now, the way to 

02:20:31.424 --> 02:20:34.533
access is through the Play 
Console but over time there is 

02:20:34.534 --> 02:20:37.775
an API for that data and under 
will be an API available for 

02:20:38.165 --> 02:20:40.165
this data as 

02:20:42.303 --> 02:20:45.526
well.  We can't make promises on
 that right now.  We can just 

02:20:45.527 --> 02:20:48.055
talk about what we have today, 
but we will be offeringna in the

02:20:48.170 --> 02:20:50.170
 next couple of months.  

02:21:24.418 --> 02:21:24.515
Yes.
   &gt;&gt; FERGUS HURLEY:  If you are

02:21:24.516 --> 02:21:28.382
 using some of the Firebased 
tools and using the SDK, you 

02:21:24.516 --> 02:21:28.382
have to be careful how you 
instrument it to make sure you 

02:21:24.516 --> 02:21:28.049
don't have performance 
implications on the app.  The 

02:21:24.516 --> 02:21:28.649
data we are collecting is for 
all users who have opted in and 

02:21:24.516 --> 02:21:26.516
it's on the platform level.  It 
does not impact your application

02:21:41.928 --> 02:21:43.342
itself.
   &gt;&gt; AUDIENCE:  (Speaking off 

02:21:43.343 --> 02:21:45.858
mic). 
   &gt;&gt; FERGUS HURLEY:  Broken 

02:21:45.859 --> 02:21:49.403
down by APK version, broken down
 by dwe vis and Android 

02:21:54.866 --> 02:21:56.866
ndroid

02:21:57.952 --> 02:21:59.172
 OS.
   &gt;&gt; AUDIENCE:  (Speaking off 

02:21:59.173 --> 02:22:01.173
mic)

02:22:08.729 --> 02:22:10.229
. 
   &gt;&gt; RICCARDO GOUONI:  At the 

02:22:10.230 --> 02:22:13.455
moment we are starting with the 
six bad behaviors.  The intent 

02:22:13.846 --> 02:22:18.398
is so to expand it on other 
performance aspects so size and 

02:22:18.399 --> 02:22:20.399
device is wrub is that is 
crucial for the user experience 

02:22:20.530 --> 02:22:23.975
of how users can use their 
device effectively, not there 

02:22:23.976 --> 02:22:26.793
today, but we are definitely 
expanding to have a lot more of 

02:22:27.208 --> 02:22:30.119
these topics about battery, 
stability, rendering and size 

02:22:30.641 --> 02:22:35.705
and network over the rest of the
 year.  So keep checking and it 

02:22:35.804 --> 02:22:38.696
will show up at one point. 
   &gt;&gt; FERGUS HURLEY:  Stay tuned

02:22:38.697 --> 02:22:42.561
 for the Android vitals 
dashboard and we will be  

02:22:43.226 --> 02:22:45.983
putting notifications in the 
Console to let you know when we 

02:22:46.156 --> 02:22:48.156
add more

02:22:51.115 --> 02:22:53.115
 metrics.
   &gt;&gt; AUDIENCE:  (Speaking off 

02:22:54.250 --> 02:22:56.250
mic)) 
   &gt;&gt; FERGUS HURLEY:  So on disk

02:22:56.252 --> 02:22:59.692
 storage, RAM usage, process 
stats, we are looking into other

02:23:00.225 --> 02:23:02.312
 performance areas.  Yes, cool. 
 Next

02:23:21.723 --> 02:23:23.723
question.

02:23:26.172 --> 02:23:26.346
   &gt;&gt; AUDIENCE:  (Speaking Off 
Microphone). 

02:23:26.347 --> 02:23:28.374
   &gt;&gt; RICCARDO GOUONI:  I don't 
quite get the question. 

02:23:28.375 --> 02:23:30.096
   &gt;&gt; FERGUS HURLEY:  Are you 
talking about taking the ANRs 

02:23:30.097 --> 02:23:34.326
from the Play Console and adding
 annotations in the play console

02:23:34.327 --> 02:23:39.468
 so you can pull it into your 
own tracking system?

02:23:47.699 --> 02:23:49.699
   &gt;&gt; AUDIENCE:  (Speaking Off 

02:23:52.683 --> 02:23:53.068
Microphone). 
   &gt;&gt; FERGUS HURLEY:  A few 

02:23:53.069 --> 02:23:56.592
things on that, as Ricardo 
mentioned earlier we do flag 

02:23:56.593 --> 02:24:00.113
when it is a newly introduced 
ANR in this specific app version

02:24:00.114 --> 02:24:03.262
 and we are working on more 
tools around you being able to 

02:24:03.263 --> 02:24:07.994
manage the ANRs and crashes and 
with your work flow better as 

02:24:07.995 --> 02:24:09.010
well.
   &gt;&gt; RICCARDO GOUONI:  You are 

02:24:09.011 --> 02:24:11.741
already mute them out for the 
ones you have fixed and then we 

02:24:11.742 --> 02:24:15.281
will automatically reopen in the
 Play Console if they start 

02:24:15.282 --> 02:24:18.416
recurring on a new version.  
What you want is basically an A 

02:24:18.417 --> 02:24:21.105
PI to do that on your own 
premises which is not there yet 

02:24:21.377 --> 02:24:23.377
but we are definitely looking 
into that.

02:24:25.917 --> 02:24:27.917
   &gt;&gt; AUDIENCE:  

02:24:34.737 --> 02:24:36.737
(Speaking Off 

02:24:39.584 --> 02:24:39.970
Microphone). 
   &gt;&gt; LYDIA FITZPATRICK:  That 

02:24:39.971 --> 02:24:43.220
is a great question.  I think 
one way to control for it would 

02:24:43.427 --> 02:24:49.162
be to do the sys trace and run 
traces on lower end devices so 

02:24:49.163 --> 02:24:52.410
you can see what is going on on 
the lower end devices.  That's 

02:24:52.411 --> 02:24:55.760
my first answer to it.  We do 
have an expert from the Android 

02:24:55.761 --> 02:25:00.076
platform here.  We have Diane, 
one of the  original authors of 

02:25:00.077 --> 02:25:03.122
Android.  Maybe you could come 
up and we could chat more about 

02:25:03.123 --> 02:25:05.123
this with

02:25:06.560 --> 02:25:07.145
 Diane. 
   &gt;&gt; RICCARDO GOUONI:  We have 

02:25:07.146 --> 02:25:09.685
time for one more question.  
There is a ton of you that have 

02:25:09.686 --> 02:25:13.244
questions to we will be outside 
in the Android dome if you want.

02:25:13.245 --> 02:25:15.245
   &gt;&gt; AUDIENCE:  (Speaking Off

02:25:24.182 --> 02:25:24.668
Microphone). 
   &gt;&gt; RICCARDO GOUONI:  We 

02:25:24.669 --> 02:25:27.124
collect across all versions, 
what I mentioned is we will 

02:25:27.125 --> 02:25:29.768
highlight the one that pertains 
to the latest version because 

02:25:29.769 --> 02:25:32.515
normally that's the one that you
 want to focus on, but you will 

02:25:32.516 --> 02:25:34.800
see reports across all versions 
of your app that you have out 

02:25:41.680 --> 02:25:42.394
there. 
   &gt;&gt; FERGUS HURLEY:  The ANR 

02:25:42.395 --> 02:25:47.702
and crashes section where you 
can see the clusters covers back

02:25:48.119 --> 02:25:52.842
 as Ricardo mentioned earlier, 
98% of Android versions.  The 

02:25:52.843 --> 02:25:56.378
ANR rate is based on ones where 
newer versions, but you can 

02:25:56.379 --> 02:26:00.540
actually see that in the Android
 vitals section which devices 

02:26:00.541 --> 02:26:03.361
and OSs are covered by that one 
as well.

02:26:03.362 --> 02:26:05.362
   &gt;&gt; AUDIENCE:  (Speaking Off

02:26:13.036 --> 02:26:14.214
Microphone).
   &gt;&gt; RICCARDO GOUONI:  At the 

02:26:14.215 --> 02:26:18.256
moment we surface ANR as long as
 the user used the app in the 

02:26:18.257 --> 02:26:21.509
program at some point because 
the intent again is to focus on 

02:26:21.805 --> 02:26:25.056
the user to experience the 
program when using the app.  But

02:26:25.057 --> 02:26:29.272
 in the ANR section, in the 
crash and ANR part you will see 

02:26:29.756 --> 02:26:31.756
background and foreground. 

02:26:47.517 --> 02:26:48.183
   Lrve. 
   &gt;&gt; LYDIA FITZPATRICK:  The 

02:26:48.184 --> 02:26:50.184
jobs intense service ask 
backwards 

02:26:57.024 --> 02:26:59.468
compatible.  That's right. 
   &gt;&gt; FERGUS HURLEY:  Last 

02:26:59.469 --> 02:27:02.522
question.
   &gt;&gt; AUDIENCE:  (Speaking Off 

02:27:02.523 --> 02:27:04.523
Microphone). 

02:27:20.790 --> 02:27:21.491
   &gt;&gt; FERGUS HURLEY:  Yes. 
   &gt;&gt; FERGUS HURLEY:  Great 

02:27:21.492 --> 02:27:24.320
question, so definitely we are 
working with the fabric team and

02:27:24.937 --> 02:27:27.757
 the Firebase team to have a 
wholistic solution.  We don't 

02:27:27.866 --> 02:27:30.693
have anything to announce today 
but we will be announcing what 

02:27:30.694 --> 02:27:33.536
is the wholistic solution over 
the next couple of months.  

02:27:33.631 --> 02:27:35.730
Final question.
   &gt;&gt; LYDIA FITZPATRICK:  We are

02:27:35.731 --> 02:27:41.001
 out of time.  Why don't we take
 your question down here. 

02:27:41.002 --> 02:27:44.127
   &gt;&gt; RICCARDO GOUONI:  Thank 
you,  everybody.

02:27:44.128 --> 02:27:50.491
   (Applause).
   (Concluded at 5:40CT)

02:34:01.015 --> 02:34:03.015
   &gt;

02:34:06.665 --> 02:34:06.740
&gt;
   &gt;&gt;

02:34:06.741 --> 02:34:07.741
   RAW FILE

02:34:06.741 --> 02:34:09.474
   GOOGLE I/O 2017
   SAN JOSE, CALIFORNIA

02:34:06.741 --> 02:34:08.607
   MAY 17, 2017
   5:00 PM CT

02:34:06.741 --> 02:34:06.820
   STAGE 2
   NO ONE LIKES CRASHING OR 

02:34:06.821 --> 02:34:10.687
JANKY APPS? ENGINEER FOR HIGH 
PERFORMANCE WITH TOOLS FROM 

02:34:06.821 --> 02:34:08.421
ANDROID &amp;  PLAY
   TA3BEC

02:34:06.821 --> 02:34:06.894
    Caption First, Inc.
    P.O. Box 3066

02:34:06.895 --> 02:34:09.428
    Monument, CO 80132
    800-825-5234

02:34:06.895 --> 02:34:08.495
    Www.captionfirst.com

02:34:06.895 --> 02:34:09.561
   * * * 
   This text is being provided 

02:34:06.895 --> 02:34:10.628
in a rough draft format.  
Communication Access Realtime 

02:34:06.895 --> 02:34:08.895
Translation (CART) is provided 
in order to facilitate

02:34:37.918 --> 02:34:42.118
 communication accessibility and
 may not be a totally verbatim 

02:34:37.918 --> 02:34:39.918
record of the 

02:34:42.794 --> 02:34:42.991
proceedings.
   * * * 

02:34:42.992 --> 02:34:43.992
   &gt;&gt;
   &gt;&gt;

02:34:42.992 --> 02:34:46.633
   &gt;&gt; Steve Steve, Russ Russ, 
Christ Christ,

02:34:49.859 --> 02:34:51.859
 foib, 

02:34:54.664 --> 02:34:56.664
fish,

02:35:03.034 --> 02:35:05.034
irebase,.

02:37:18.687 --> 02:37:20.687
 Christ 

02:37:23.539 --> 02:37:25.539
sta,

02:37:27.232 --> 02:37:27.312
 Krista,.

02:47:55.989 --> 02:47:58.666
   &gt;&gt; RUSS KETCHUM:  Hi, 
everyone, I'm Russ Ketchum I'm a

02:47:58.882 --> 02:48:01.995
 group product manager aand I 
leave mobile app Analytics.  I 

02:48:02.296 --> 02:48:05.542
can hardly believe it's already 
been a year since we stove on a 

02:48:05.745 --> 02:48:08.901
stage not too far from here and 
interest Tuesdayed Firebase 

02:48:09.489 --> 02:48:12.310
Google's integrated app 
developer platform.  With it we 

02:48:13.607 --> 02:48:17.289
launched Firebase Analytics our 
first apps first Analytics 

02:48:17.290 --> 02:48:19.748
platform we built from the 
ground up to be completely free 

02:48:20.921 --> 02:48:24.271
and completely unlimited.  Since
 last year, Analytics remains a 

02:48:24.272 --> 02:48:27.946
key investment area not just for
 Firebase but for Google as a 

02:48:28.824 --> 02:48:31.740
whole.  And at Google we take a 
unified approach to our 

02:48:32.178 --> 02:48:35.161
measurement solutions and so to 
under score that for all of our 

02:48:35.492 --> 02:48:38.884
users, we wanted to formally 
introduce you all to our new 

02:48:39.337 --> 02:48:42.963
name, and that's Google 
Analytics for Firebase. 

02:48:42.964 --> 02:48:47.735
   So Google the Analytics is 
the most used digital Analytics 

02:48:49.369 --> 02:48:51.750
solution in the world.  And we 
think with our new name we will 

02:48:51.995 --> 02:48:55.140
make it clear to all of our 
customers, Web, app, and 

02:48:55.557 --> 02:48:59.483
otherwise that we are building 
towards a unified solution.  And

02:48:59.987 --> 02:49:02.229
 now while our name is it 
changing our commitment to app 

02:49:02.631 --> 02:49:06.595
developers and app Analytics 
remains unchanged.  And we fully

02:49:06.596 --> 02:49:09.248
 appreciate that the challenges 
that the developer community 

02:49:10.999 --> 02:49:15.025
faces, they are daunting.  And 
there are many ways are very 

02:49:16.052 --> 02:49:18.630
unique.  Let's take a look at 
some of them. 

02:49:18.631 --> 02:49:21.499
   So building a successful app 
and with it a successful 

02:49:21.500 --> 02:49:24.465
business is really hard.  
Finding a way to make that 

02:49:24.466 --> 02:49:27.641
process repeatable is even 
harder.  It's really, really 

02:49:27.642 --> 02:49:33.262
hard, but as Google, we believe 
that good data is often the key 

02:49:33.263 --> 02:49:35.557
to unlocking that type of 
success.  But for developers, 

02:49:35.867 --> 02:49:39.709
you also know that even having 
access to good quality data is 

02:49:39.710 --> 02:49:43.193
in itself really hard.  So the 
amount of time that people spend

02:49:43.419 --> 02:49:47.477
 on mobile  devices, I don't 
need to tell you this, is 

02:49:48.151 --> 02:49:52.579
staggering and of the time spent
 on mobile over 85% is spent 

02:49:52.580 --> 02:49:56.028
engaging with apps and that u 
sage in turn throws off just a 

02:49:56.211 --> 02:49:59.281
ton of data. 
   And very few tools are 

02:49:59.282 --> 02:50:02.698
available to actually help 
developers capture that, 

02:50:02.699 --> 02:50:05.912
particularly tools that are 
within reach of developing b 

02:50:05.913 --> 02:50:08.448
usinesses.  But in you could 
assume for a -- if you could 

02:50:08.449 --> 02:50:11.051
assume for a second that you had
 a tool that would help you 

02:50:11.258 --> 02:50:14.646
collect that data, you then have
 to be able to find trends that 

02:50:14.944 --> 02:50:17.927
are responsible for your 
successes and failtz yours.  

02:50:18.135 --> 02:50:21.837
Even if you are able to spot 
those trends not not good enough

02:50:22.574 --> 02:50:26.595
 to have simple understanding in
 a vacuum.  You need to use the 

02:50:26.940 --> 02:50:30.313
data in the  places you care 
about and take action and drive 

02:50:30.314 --> 02:50:33.054
your business forward.  These 
are the type of challenges we 

02:50:33.055 --> 02:50:36.163
are building Google Analytics 
for Firebase to help you solve. 

02:50:36.353 --> 02:50:39.533
   So today we are going to talk
 about Google Analytics for 

02:50:39.534 --> 02:50:42.473
Firebase from three slightly 
different angles.  First, I'm 

02:50:42.681 --> 02:50:45.541
going to step us through what we
 see as the core of our 

02:50:45.858 --> 02:50:49.199
Analytics offering, then I will 
have Steve join us and he will 

02:50:49.200 --> 02:50:53.047
talk about exciting enhancements
 we are  introducing today to 

02:50:53.048 --> 02:50:56.200
our reporting capabilities and 
then finally Krista will come up

02:50:56.201 --> 02:51:00.911
 and talk growth strategies and 
how you can use cross network 

02:51:01.033 --> 02:51:03.456
attribute solutions to drive 
your business forward.  So 

02:51:03.780 --> 02:51:07.950
turning to our core, when we 
approached Google Analytics for 

02:51:08.264 --> 02:51:11.755
Firebase, we built a solution to
 be completely free and 

02:51:11.756 --> 02:51:15.476
unlimited even for the largest 
of apps.  Now you have the 

02:51:15.797 --> 02:51:17.876
opportunity to understand all 
data without compromise. 

02:51:17.877 --> 02:51:21.177
   This includes all of your raw
 event data, all accessible and 

02:51:21.379 --> 02:51:25.492
all for free.  But what's more 
though is Analytics works simply

02:51:25.698 --> 02:51:29.702
 by adding Firebase to your app.
  Analytics is just set up 

02:51:30.243 --> 02:51:32.623
automatically, and right out of 
the box, you get access to the 

02:51:33.002 --> 02:51:35.960
most important signals and you 
have all of that information 

02:51:35.961 --> 02:51:38.711
summarized for you at your 
fingertips.  So let's take a 

02:51:38.712 --> 02:51:42.013
look at that.. 
   So this is our app dashboard.

02:51:42.014 --> 02:51:45.717
  It provides summaries of all 
of your key data points and then

02:51:45.718 --> 02:51:48.987
 has drill ins for deeper 
analysis throughout the product.

02:51:48.988 --> 02:51:52.174
  I will step through and zoom 
in on some of the cards quickly.

02:51:52.175 --> 02:51:56.308
  The first at the top is 
helping you understand key 

02:51:56.309 --> 02:51:59.825
engagement metrics.  This is the
 active user's card.  It has 

02:52:00.484 --> 02:52:04.170
daily, weekly, monthly active 
users like all of our line 

02:52:04.171 --> 02:52:08.222
plots.  It has comparison to the
 previous period and it quickly 

02:52:08.223 --> 02:52:12.571
summarizes user engagement. 
   Then when you look at a 

02:52:12.572 --> 02:52:15.108
different definition of user 
engagement, you are able to see 

02:52:15.109 --> 02:52:18.721
how much time your customers are
 spending actually engaged with 

02:52:18.722 --> 02:52:22.128
your app.  And ideally, that 
engagement is turning into 

02:52:22.652 --> 02:52:25.307
revenue.  And so here on the 
average revenue card we are 

02:52:25.976 --> 02:52:29.324
summarizing average revenue 
peruser, also per paid user, 

02:52:29.325 --> 02:52:32.313
again, broken out by the same 
daily, weekly, monthly 

02:52:34.650 --> 02:52:37.551
summaries.  For many apps that 
monetize effectively they are 

02:52:38.221 --> 02:52:41.494
using in app purchases, in app 
purchase is an event that's able

02:52:41.730 --> 02:52:46.930
 to be captured automatically 
both on iOS and Android.  And 

02:52:46.931 --> 02:52:52.186
the I/O P summary summarizes top
 transactions and as a drill in 

02:52:52.411 --> 02:52:54.895
link for detailed reporting. 
   So drive successful 

02:52:55.554 --> 02:53:00.181
businesses, particularly those 
built around IAP.  User 

02:53:00.182 --> 02:53:02.890
acquisition strategy is key.  
That's where cross network  

02:53:03.558 --> 02:53:06.193
attribution comes in and you are
 able to use the cross network 

02:53:06.968 --> 02:53:09.606
attribution summary to 
understand the best term forming

02:53:09.607 --> 02:53:12.355
 channels and how the channels 
are turning into lifetime value 

02:53:12.646 --> 02:53:14.278
with a deep link to the full 
report. 

02:53:14.279 --> 02:53:16.938
   What's the point of acquiring
 users if you can't keep them?  

02:53:17.040 --> 02:53:20.536
That's what you are seeing here 
in the cohort summary.  Krista 

02:53:20.537 --> 02:53:23.642
will come up and talk about 
techniques more in a few 

02:53:23.643 --> 02:53:25.643
minutes. 
   Switching gears a little and 

02:53:25.921 --> 02:53:30.450
moving down the dashboard, all 
find device and app info.  Here 

02:53:30.451 --> 02:53:33.651
you are looking at the app 
versions card.  This is the 

02:53:34.385 --> 02:53:37.607
device's card and it summarizes 
the model of the device along 

02:53:37.608 --> 02:53:41.888
with OS information.  And then 
this last set of cards gives you

02:53:41.889 --> 02:53:46.304
 more insight into use users.  
Here we are looking at location 

02:53:46.305 --> 02:53:50.917
information and then by 
sprinkling in Google proprietary

02:53:50.918 --> 02:53:54.146
 data you are seeing age and 
gender information and then 

02:53:54.147 --> 02:53:56.401
lastly interest category 
information so all great data 

02:53:57.166 --> 02:54:01.658
quickly summarized for users. 
   It's great that all of this 

02:54:01.890 --> 02:54:04.736
works out of the box and is 
automatic, but you are not 

02:54:04.951 --> 02:54:09.538
limited to the automatic events.
  We built Google Analytics for 

02:54:09.539 --> 02:54:13.691
Firebase to be highly extensible
 so you can track up to 500 

02:54:13.692 --> 02:54:17.101
distinct events each with 25 
different parameters and log the

02:54:17.430 --> 02:54:20.524
 events on a complete unlimited 
basis. 

02:54:20.525 --> 02:54:23.808
   If you don't know what to 
track, we go so far as to 

02:54:23.809 --> 02:54:25.897
suggest different types of 
events to you based on the 

02:54:26.002 --> 02:54:28.868
different types of apps that you
 might have.  It's a great way 

02:54:29.198 --> 02:54:33.010
to jump start your 
implementation, but it also 

02:54:33.011 --> 02:54:36.746
helps you understand even more 
deeply around these behavior you

02:54:37.067 --> 02:54:40.279
 because many events feature 
first class reporting.  It's 

02:54:40.384 --> 02:54:43.215
great to have it all brought 
together and summarized, all of 

02:54:43.528 --> 02:54:47.491
your data, but what's the point 
of  having it in a silo.  You 

02:54:47.492 --> 02:54:50.358
need to have it available to you
 in all of the places you care 

02:54:50.359 --> 02:54:53.731
about.  So Google Analytics for 
Firebase is, of course, at home 

02:54:53.732 --> 02:54:56.381
in the Firebase Console.  This 
is where many of you know and 

02:54:56.382 --> 02:54:59.875
expect it to live.
   It is lz available in the 

02:54:59.876 --> 02:55:03.803
Google Analytics UI.  So this 
way all of the users across your

02:55:03.804 --> 02:55:06.663
 organization can have access to
 the same Analytics capabilities

02:55:06.974 --> 02:55:09.484
 in whatever product they are 
most familiar with.  But that's 

02:55:09.485 --> 02:55:14.171
not all.  Your Analytics data is
 also available for you in Cloud

02:55:14.924 --> 02:55:18.234
 messaging both to understand 
what's happening and to use for 

02:55:18.985 --> 02:55:24.034
targeting.  The same is true for
 remote config.  Your Analytics 

02:55:24.252 --> 02:55:27.148
data works with crash reporting 
to help you understand 

02:55:27.910 --> 02:55:29.980
engagement patterns that might 
be leading to crashes and can be

02:55:30.872 --> 02:55:34.546
 used natively with Cloud 
functions.  Cross network 

02:55:34.983 --> 02:55:39.125
attribution in Analytics works 
in a complimentary way with 

02:55:39.208 --> 02:55:43.261
dynamic links, and for 
Enterprise customers, Analytics 

02:55:43.262 --> 02:55:47.659
works across the Google 
Analytics 360  360 suite. 

02:55:47.660 --> 02:55:51.737
   One of the ways that it works
 with the 360 suite is through 

02:55:51.738 --> 02:55:56.044
Google tag manager.  Tag manager
 lets you remotely configure the

02:55:56.045 --> 02:56:00.138
 event measurement from your app
 from a Web UI.  You can modify 

02:56:00.139 --> 02:56:03.480
events you are already tracking.
  You can have one event fire in

02:56:04.274 --> 02:56:07.646
 response to another event and 
send event data to other 

02:56:07.647 --> 02:56:11.143
destinations not just at Google 
but with our tag template 

02:56:11.493 --> 02:56:14.402
partners including tune and many
 others. 

02:56:14.403 --> 02:56:19.925
   And then simply by linking 
Firebase to AdWords your 

02:56:19.926 --> 02:56:22.875
Analytics data is available to 
use for conversion tracking and 

02:56:22.876 --> 02:56:25.715
actually used as a signal to 
drive all of your app related 

02:56:26.903 --> 02:56:29.885
campaigns.  And so while this 
equips you with the start of the

02:56:29.886 --> 02:56:33.248
 right data in many of the 
places where you need it, like I

02:56:33.704 --> 02:56:36.230
 said, it's really just the 
start of the right data.  So 

02:56:36.231 --> 02:56:39.451
with that, I'm going to invite 
Steve up on stage and he is 

02:56:39.854 --> 02:56:43.340
going to showcase our latest 
announcements related to 

02:56:43.341 --> 02:56:47.791
reporting.  Steve?
   (Applause). 

02:56:47.792 --> 02:56:50.806
   &gt;&gt; STEVE GANEM:  Thank you.  
Thanks, Russ.  Good afternoon, 

02:56:51.091 --> 02:56:54.586
Google I/O, my name is Steve 
Ganem and I'm a product manager 

02:56:54.587 --> 02:56:58.496
on Analytics.  Before coming to 
Google I spent 20 years 

02:56:58.497 --> 02:57:01.197
developing video games and I 
launched about 30 titles in that

02:57:01.198 --> 02:57:04.168
 time frame.  Let me tell you 
there is nothing more exciting 

02:57:04.169 --> 02:57:07.358
than launching a game.  Now, you
 work on this thing for months 

02:57:07.692 --> 02:57:10.421
or perhaps years to get it ready
 and it starts to come together 

02:57:10.736 --> 02:57:12.908
and become fun and then you 
finally get to the point where 

02:57:12.909 --> 02:57:15.792
you are ready to put it out in 
front of real users and press 

02:57:15.793 --> 02:57:18.404
and get the feedback you have 
been looking for.  And I know a 

02:57:18.612 --> 02:57:21.440
lot of you can relate with 
launching your own products. 

02:57:21.957 --> 02:57:24.859
   Last year right here at 
Google I/O we launched Firebase 

02:57:24.860 --> 02:57:28.131
I got that same thrill, that 
same buzz.  And since then I 

02:57:28.378 --> 02:57:31.573
have had the opportunity to 
speak with many of you at events

02:57:31.574 --> 02:57:36.182
 like this on social media, good
 old stack overflow, and 

02:57:36.377 --> 02:57:38.873
sometimes directly over email 
and I have gotten a chance to 

02:57:38.874 --> 02:57:42.124
help some of you understand your
 reports, but also to get your 

02:57:42.125 --> 02:57:44.678
feedback on what's working well 
in the product and what we can 

02:57:45.019 --> 02:57:49.498
do to improve it for you. 
   If I could categorize your 

02:57:49.499 --> 02:57:52.490
feedback, it would generally 
fall in these two themes.  First

02:57:52.491 --> 02:57:56.325
 would be that you really want 
deeper reporting, and you want 

02:57:56.326 --> 02:58:00.516
real time features.  And I'm 
excited to tell you that we have

02:58:00.957 --> 02:58:03.381
 some pretty huge improvements 
in both of these areas that I 

02:58:03.477 --> 02:58:07.118
will tell you about today.  
First, what do I mean by deeper 

02:58:07.594 --> 02:58:10.863
reporting?  I mean that type of 
reporting that better, helps you

02:58:10.864 --> 02:58:13.713
 better understand how users are
 behaving and performing in your

02:58:13.714 --> 02:58:17.689
 apps and also the type of 
reporting that helps you 

02:58:17.935 --> 02:58:20.531
understand how ruer app business
 is p erforming. 

02:58:20.532 --> 02:58:23.757
   Sometimes this is a matter of
 Google connecting dots for you 

02:58:23.758 --> 02:58:26.822
by a ugmenting data with other 
data that Google has and 

02:58:27.602 --> 02:58:30.876
sometimes it's justs a matter of
 surfacing data you are already 

02:58:30.877 --> 02:58:34.275
collecting in more insightful 
ways.  One feature that's the 

02:58:34.276 --> 02:58:37.088
perfect plend and showcase for 
both of these things is our 

02:58:37.089 --> 02:58:44.623
brand new integration with 
AdMob.  You may have heard the 

02:58:44.624 --> 02:58:47.830
keynote preceding this but this 
integration allows data to flow 

02:58:47.831 --> 02:58:52.635
between two platforms and goes a
 long way to enable deeper 

02:58:52.960 --> 02:58:57.812
reporting for the 1.000000 apps 
using AdMob today.  Showing an 

02:58:57.909 --> 02:59:01.204
ad in your app isn't as simple 
as a binary decision anymore.  

02:59:01.205 --> 02:59:03.615
There is lots of decisions to 
make.  There is a decision of 

02:59:04.058 --> 02:59:06.900
what primary network to use, 
what immediate yated networks to

02:59:08.215 --> 02:59:13.133
 use, what formats, refresh 
rates how to render native ads 

02:59:13.248 --> 02:59:17.110
and if you are using rewarded 
ads, how much reward to give to 

02:59:17.773 --> 02:59:19.613
users. 
   Beyond that, showing an ad in

02:59:19.614 --> 02:59:22.276
 your app isn't something you do
 in a vacuum.  This is a 

02:59:23.029 --> 02:59:25.424
sacrifice of the real estate of 
your app, and you need to make 

02:59:25.425 --> 02:59:29.164
sure that as you are earning 
revenue you are not sacrificing 

02:59:29.480 --> 02:59:33.792
the user experience or else you 
might win the revenue battle and

02:59:33.793 --> 02:59:37.112
 lose the overall user 
engagement and retention war.  

02:59:37.555 --> 02:59:40.271
You need to pick the right 
winning strategy for your app.  

02:59:40.504 --> 02:59:43.210
Analytics can help you measure 
that winning strategy, Burt 

02:59:43.211 --> 02:59:47.174
first you need to get your AdMob
 data into Analytics.  That's 

02:59:47.490 --> 02:59:49.891
exactly what we have done for 
you with this integration.  It's

02:59:49.892 --> 02:59:52.843
 entirely automatic just by 
dropping in the supported 

02:59:53.166 --> 02:59:57.445
versions of our SDKs in your 
app, we will automatically bring

02:59:57.446 --> 03:00:03.813
 AdMob impressions and clicks 
into AdMob not just, or, iemgz, 

03:00:04.262 --> 03:00:08.857
into Analytics.  Not just for 
AdMob but networks you mediate 

03:00:08.858 --> 03:00:11.767
through AdMob as well.  And 
because we have the great 

03:00:11.768 --> 03:00:16.898
integration with AdMob we can 
factor it into cease business 

03:00:17.899 --> 03:00:21.861
performance indicators like 
average revenue peruser.  So now

03:00:21.862 --> 03:00:25.693
 you have an overall revenue 
metric that take into account 

03:00:25.694 --> 03:00:27.771
both purchase revenue and ads 
revenue. 

03:00:27.772 --> 03:00:30.739
   You can go deeper with this. 
 In addition to showing you 

03:00:30.740 --> 03:00:33.574
these metrics, you can break it 
down in a number of ways.  We 

03:00:33.888 --> 03:00:40.786
let you break them down by ad 
unit, ad format, ad source and 

03:00:41.552 --> 03:00:44.187
also by screen because we nose 
where these ads are being shown 

03:00:44.188 --> 03:00:47.127
in your app, we can help you 
understand which screens are 

03:00:47.128 --> 03:00:49.128
performing better in terms of 
your ad 

03:00:54.370 --> 03:00:57.543
revenue.  Because all of is this
 is 457ing at the event level 

03:00:58.061 --> 03:01:00.923
you can apply audience filters 
and property filters to 

03:01:01.228 --> 03:01:03.857
understand how ad performance 
differs among different segments

03:01:04.208 --> 03:01:08.105
 of your user base.  That's 
important when trying to build a

03:01:08.106 --> 03:01:10.915
 winning strategy for your app 
for advertising because then you

03:01:11.378 --> 03:01:16.749
 can AB test and understand how 
different strategies actually 

03:01:16.750 --> 03:01:19.492
perform.  We have given some of 
you early access and some of the

03:01:19.493 --> 03:01:21.493
 feedback has been incredibly

03:01:24.626 --> 03:01:29.021
 encouraging.  President of B 
works games had this to say.  He

03:01:29.022 --> 03:01:31.416
 said this integration has 
completely changed the way we 

03:01:31.722 --> 03:01:35.482
think about game design and 
montization.  And we hope it can

03:01:35.793 --> 03:01:38.876
 do the same for you as well.  
Help you fundamentally think 

03:01:38.877 --> 03:01:41.641
about what your ad strategy 
should be since now you can 

03:01:41.642 --> 03:01:44.588
measure it and understand not 
just the impact on revenue, but 

03:01:44.589 --> 03:01:48.107
also on user engagement and 
retention. 

03:01:48.108 --> 03:01:50.981
   So needless to say we are 
excited to get this in your 

03:01:50.982 --> 03:01:52.959
hands.  If you are interested in
 trying this out, it's available

03:01:52.960 --> 03:01:55.670
 today.  Just check out our help
 center article for more 

03:01:56.671 --> 03:01:59.151
information.  And you can check 
out the reports as well in our 

03:01:59.442 --> 03:02:02.384
demo project for Firebase which 
is available on the Firebase 

03:02:02.461 --> 03:02:05.754
Console through the link explore
 demo p roject, and you can see 

03:02:05.755 --> 03:02:10.300
this reporting in action for a 
real app.  We also have a 

03:02:13.544 --> 03:02:17.144
session entirely dedicated to 
this on Friday that you 

03:02:13.544 --> 03:02:17.700
definitely should check out.  
It's called AdMob and Firebase, 

03:02:18.248 --> 03:02:20.248
better together. 
   Continuing with the theme of 

03:02:20.456 --> 03:02:22.946
deeper reporting, I want to 
touch on something that you have

03:02:23.373 --> 03:02:27.433
 been really focus about since 
launch of last year.  It 

03:02:27.434 --> 03:02:30.535
resolves around event 
parameters.  Events are the data

03:02:30.536 --> 03:02:33.477
 points of Analytics.  You log 
events to tell us what's 

03:02:33.719 --> 03:02:36.738
happening in your app, what 
actions users are taking and you

03:02:36.739 --> 03:02:41.829
 associate parameters with them 
to contextualize those events so

03:02:41.830 --> 03:02:44.903
 it's not just that a purchase 
occurred but you can tell us 

03:02:45.448 --> 03:02:49.945
what product was purchased.  As 
Russ mentioned our API is 

03:02:49.946 --> 03:02:55.033
extensible and you can log 
custom events that correspond to

03:02:55.034 --> 03:02:58.236
 specific features you have in 
your app and attach parameters 

03:02:58.237 --> 03:03:00.774
to those as well, although you 
can use those events and 

03:03:01.409 --> 03:03:04.164
parameters, those custom events 
and parameters in audience 

03:03:05.056 --> 03:03:07.513
definitions, reporting around 
the values of those parameters 

03:03:10.778 --> 03:03:11.537
has historically been related 
only to those suggested events 

03:03:11.538 --> 03:03:15.560
that we pre corroborate for 
different business verse calls 

03:03:15.561 --> 03:03:18.713
that Russ showed you. 
   You have been vocal about the

03:03:18.714 --> 03:03:22.769
 need to see reporting on 
parameter values in Analytics so

03:03:22.770 --> 03:03:26.255
 today I'm excited to tell you 
we made that available to you.  

03:03:26.256 --> 03:03:30.189
We are launching parameter 
reporting in Analytics.  So 

03:03:30.190 --> 03:03:32.190
tablas R.
   (Applause).

03:03:35.592 --> 03:03:38.876
     And this is available now, 
you don't need a new SDK for it.

03:03:38.877 --> 03:03:42.915
  If you go to your event detail
 report in Analytics, you will 

03:03:42.916 --> 03:03:45.648
see the prompt to add event 
parameters you want to see 

03:03:45.649 --> 03:03:49.807
reporting on.  You can register 
up to 50 event parameters.  Tip 

03:03:49.904 --> 03:03:53.715
dli you will send us either a 
number or text parameter.  Here 

03:03:53.716 --> 03:03:55.618
is what you will get out of 
that. 

03:03:55.619 --> 03:03:58.328
   When you send us a number, we
 will produce a sum met Atlantic

03:03:58.668 --> 03:04:02.957
 and average metric.  There is 
different use cases for both of 

03:04:02.958 --> 03:04:06.457
those.  So would you pass, in 
this case, I'm showing a screen 

03:04:06.458 --> 03:04:09.491
where for a product purchase I 
want to show some metric of the 

03:04:09.492 --> 03:04:12.986
product value.  I have a high 
level view of how much money I'm

03:04:13.433 --> 03:04:15.874
 making through these purchases 
compared to the last period.  

03:04:16.091 --> 03:04:18.287
It's simple and easy to 
understand but it doesn't have 

03:04:18.288 --> 03:04:22.929
to be revenue related.  You can 
do this to track any high level 

03:04:22.930 --> 03:04:26.508
key performance indicators in 
your app.  In you have a music 

03:04:26.509 --> 03:04:29.180
streaming app you want to 
measure the total amount of time

03:04:29.467 --> 03:04:32.321
 users are spending listening to
 music or watching video or if 

03:04:32.322 --> 03:04:35.266
you have a travel app and you 
want to see how far your users 

03:04:35.353 --> 03:04:39.614
are traveling, you can measure 
that as well. 

03:04:39.615 --> 03:04:42.045
   And we compare it against the
 previous period so you can 

03:04:42.046 --> 03:04:44.775
filter this as well and see how 
it differs among the different 

03:04:45.232 --> 03:04:48.325
segments of your user base.  
Additionally we also supply you 

03:04:48.647 --> 03:04:52.870
with an average metric.  
Pictures here is an event for my

03:04:52.871 --> 03:04:56.164
 game called level end where I 
log the total score.  Looking at

03:04:56.363 --> 03:04:58.915
 the average here plotted 
against the previous period I 

03:04:58.916 --> 03:05:01.655
can see what the average scores 
are for users who are playing my

03:05:02.221 --> 03:05:04.221
 game. 
   And I find the average one to

03:05:04.387 --> 03:05:07.453
 be actually especially 
insightful.  We will have to see

03:05:07.454 --> 03:05:10.929
 what you come up with.  Some 
common thing you can use this 

03:05:11.353 --> 03:05:13.943
for, useful questions you can 
answer are things like on 

03:05:14.286 --> 03:05:17.123
average how many friends does a 
user have when they make the 

03:05:17.334 --> 03:05:21.550
first post to my social network?
  On average how much time does 

03:05:21.551 --> 03:05:24.739
a user spend in Ms. App before 
they make the first purchase?  

03:05:24.740 --> 03:05:29.442
How far are users traveling in 
their morning jog?  And now it's

03:05:30.374 --> 03:05:35.988
 a singe to  cinch to get 
answers in AdMob by registering 

03:05:35.989 --> 03:05:40.296
parameters.  You are passing us 
text parameters.  Here is an 

03:05:40.495 --> 03:05:43.567
example from my app.  It's a 
skateboarding game and users are

03:05:43.568 --> 03:05:46.401
 u nlocking various achievements
 and now I can get a breakdown 

03:05:46.402 --> 03:05:51.363
of the most popular achievements
 that they are unlocking and 

03:05:51.589 --> 03:05:54.216
graph them against each other to
 see what the popularity and 

03:05:54.217 --> 03:05:59.265
distributions are like. 
   You can use in this in your 

03:05:59.266 --> 03:06:02.442
app to see what is the most 
popular content or search terms 

03:06:02.443 --> 03:06:05.497
and also on what screens are 
certain actions taking place.  

03:06:05.792 --> 03:06:08.709
And, again, as I mentioned with 
all Analytics reports, you can 

03:06:09.323 --> 03:06:11.919
then filter these reports by 
your audience segments and user 

03:06:12.239 --> 03:06:15.482
properties to see how behavior 
is different among the different

03:06:15.932 --> 03:06:18.106
 segments of the user base 
because it will be and the 

03:06:18.107 --> 03:06:20.424
better you understand that the 
more tailored you can make your 

03:06:20.644 --> 03:06:24.920
app experience and your app 
updates so serve your audience. 

03:06:25.136 --> 03:06:27.555
   I'm personally very excited 
about this one.  It's something 

03:06:27.556 --> 03:06:30.973
I wanted in my own apps and so 
I'm sorry anxious to put it in 

03:06:31.284 --> 03:06:34.711
your hands so you can give it a 
shot too.  This is available 

03:06:34.712 --> 03:06:38.759
today.  You don't need a new SDK
 for it.  You may have noticed I

03:06:38.760 --> 03:06:41.927
 mentioned screens a couple of 
times both in the context of the

03:06:41.928 --> 03:06:45.104
 AdMob integration and also with
 regard to custom parameter 

03:06:45.105 --> 03:06:48.045
reporting.  That's because now 
we have started tracking screens

03:06:48.356 --> 03:06:52.188
 automatically for you. 
   So what we will do here is 

03:06:52.732 --> 03:06:55.141
screen, as users transition from
 screen to screen, there are a 

03:06:55.391 --> 03:06:58.459
couple of things we do for you. 
 The first is the signal of 

03:06:58.460 --> 03:07:01.040
transition.  We log a new event 
called screen view for you.  It 

03:07:01.353 --> 03:07:03.629
identifies the screen you are 
going to as well as the screen 

03:07:03.630 --> 03:07:08.437
you came from.  Secondly, this 
is context.  Wherever we can as 

03:07:09.390 --> 03:07:12.876
an Analytics product we want to 
augment your reporting by adding

03:07:12.877 --> 03:07:16.295
 context to your events so, for 
example, we had demographics, 

03:07:16.705 --> 03:07:20.425
locations and interest data.  So
 you know who is using your app.

03:07:20.426 --> 03:07:23.565
  Now we have added screens into
 the mix so you have a sense of 

03:07:23.876 --> 03:07:26.501
where certain actions are taking
 place in your app. 

03:07:26.502 --> 03:07:29.070
   This enables us to produce 
actually a news report on the 

03:07:29.497 --> 03:07:32.250
dashboard which breaks down user
 engagement in your app by 

03:07:34.347 --> 03:07:38.729
screen.  Now, you can see where 
users are spending time in your 

03:07:38.730 --> 03:07:42.143
app.  What are the most popular 
screens there.  You can segment 

03:07:42.144 --> 03:07:47.484
this to get down to the lower 
grain trends. 

03:07:47.485 --> 03:07:50.421
   You can't talk about dweeper 
reporting at least touching on 

03:07:50.422 --> 03:07:53.503
Data S tudio.  Last year, late 
last year we launched beta 

03:07:53.729 --> 03:07:57.593
reports of our report templates 
for Data Studio, and this Data 

03:07:57.909 --> 03:08:00.609
Studio is an awesome product 
that showcases what is possible 

03:08:00.610 --> 03:08:04.673
when you link your Firebase app 
to BigQuery because it 

03:08:04.674 --> 03:08:08.640
visualizes your raw data and 
allows you to fully customize 

03:08:08.641 --> 03:08:12.009
your own dashboard using the law
 data, produce the metrics you 

03:08:12.010 --> 03:08:14.216
care about in the order you care
 about and share them with the 

03:08:14.439 --> 03:08:17.512
rest of your organization.  I'm 
going to give you a walk through

03:08:17.513 --> 03:08:20.779
 of this in a bit using my own 
app so you can see it in action.

03:08:23.861 --> 03:08:27.000
use of context to better 
understand app actions and 

03:08:27.703 --> 03:08:30.879
another, someplace, one place 
that's especially important to 

03:08:30.880 --> 03:08:34.804
understand that context is in 
regard to a recent launch from 

03:08:34.805 --> 03:08:36.805
our friends at Android.  That's 
Android instant 

03:08:39.464 --> 03:08:42.230
Android Instant Apps.  The 
Android instant Android Instant 

03:08:42.231 --> 03:08:44.389
App experience is seamless. 
   It combines the accessibility

03:08:44.836 --> 03:08:49.254
 of a website with the rich user
 experience of a native app.  

03:08:49.474 --> 03:08:52.742
And because it's so different, 
it stands to reason that users 

03:08:52.743 --> 03:08:56.431
will actually behave differently
 in the instant app.  That's 

03:08:56.432 --> 03:09:00.055
kind of the point.  But in terms
 of measurement of instant apps 

03:09:00.056 --> 03:09:02.904
you need three things.  The 
first is you need a high level 

03:09:03.214 --> 03:09:06.150
overview across your instant app
 and installed app of what the 

03:09:06.370 --> 03:09:10.979
user perform ance and behavior 
is like so you can track KPI and

03:09:10.980 --> 03:09:13.490
 understand from a business 
point of view how you are doing.

03:09:15.920 --> 03:09:19.078
distinguish between instant app 
behavior and installed app 

03:09:19.624 --> 03:09:22.589
behavior.  Since it's such a new
 technology, you need to 

03:09:22.590 --> 03:09:25.867
understand how instant app 
behavior is different for users 

03:09:25.868 --> 03:09:29.806
as well.  And thirdly, it's very
 common for users to graduate 

03:09:29.807 --> 03:09:33.093
from an instant app to the 
installed app.  And when they 

03:09:33.407 --> 03:09:35.914
do, you want to make sure you 
are measuring that person as a 

03:09:36.369 --> 03:09:40.953
single user rather than two 
completely disjoint users.  In 

03:09:40.954 --> 03:09:43.588
all three ways we have thought 
ahead of you and Analytics can 

03:09:43.678 --> 03:09:47.167
support you in these use cases. 
   We have put together a 

03:09:47.168 --> 03:09:50.478
developer guide to help you 
think about how you ought to 

03:09:50.479 --> 03:09:53.732
measure instant apps, and you 
request check that out, and if 

03:09:53.733 --> 03:09:57.659
you are thinking of building an 
instant app of your own 

03:09:57.660 --> 03:09:59.736
business, Firebase has you 
covered there. 

03:09:59.737 --> 03:10:02.374
   So that covers for the deeper
 reporting section.  Now, I want

03:10:02.375 --> 03:10:06.418
 to move onto the real time 
reporting section.  Google 

03:10:06.616 --> 03:10:09.581
Analytics launched real time 
reporting almost six years ago 

03:10:09.793 --> 03:10:12.932
and it was ahead of its time and
 set the standard for real time 

03:10:13.402 --> 03:10:15.402
reporting. 
   So when we set out to build 

03:10:15.800 --> 03:10:19.552
our own real time reports in 
Google Analytics for Firebase, 

03:10:19.553 --> 03:10:24.033
we already know how users love 
to view these reports.  Knowing 

03:10:24.034 --> 03:10:29.394
what your end users are up to in
 your app is i nspiring, and 

03:10:30.260 --> 03:10:33.471
it's insightful and it had also 
critical this real time nature 

03:10:33.770 --> 03:10:36.550
of it for validation and for 
debugging your app.  So we 

03:10:36.874 --> 03:10:41.288
wanted to set out to build 
reporting that satisfied all of 

03:10:41.289 --> 03:10:44.303
these same use cases and so 
earlier this year when we 

03:10:44.304 --> 03:10:47.914
launched a series of reports to 
do so, starting with stream 

03:10:47.915 --> 03:10:50.516
view. 
   Stream view gives you a real 

03:10:50.517 --> 03:10:54.643
time view of your Analytics data
 as we collect it.  It's not 

03:10:54.644 --> 03:10:59.818
just fast.  It's rich.  It's 
dynamic.  And it's surprisingly 

03:11:00.242 --> 03:11:04.798
deep.  You get event location 
detail down to the city level 

03:11:04.799 --> 03:11:08.444
and event data down to the 
parameter level, and as you are 

03:11:08.445 --> 03:11:11.437
exploring and try to understand 
how your users are behaving, you

03:11:11.438 --> 03:11:15.691
 can actually apply these as 
filters to find out, for 

03:11:15.909 --> 03:11:18.438
example, what are u sers in San 
Francisco buying or where are 

03:11:18.749 --> 03:11:22.813
the top players in the world 
locate thed.  You can apply a 

03:11:22.814 --> 03:11:25.322
filter to get at that. 
   To see the individual journey

03:11:25.323 --> 03:11:32.102
 of a user, sueser snapshots can
 deliver you that.  User 

03:11:32.103 --> 03:11:35.617
snapshot is like a virtual focus
 test.  We visualize the stream 

03:11:35.848 --> 03:11:39.469
of events coming from a single 
device along a time line.  As 

03:11:39.470 --> 03:11:43.380
you are following this, it's 
like your following a user's 

03:11:43.381 --> 03:11:46.556
progression through the app.  
It's like a virtual focus test. 

03:11:46.557 --> 03:11:50.356
 Anyone who has administered a 
focus test knows that invariably

03:11:50.919 --> 03:11:53.313
 your users use product 
differently than you think they 

03:11:53.536 --> 03:11:54.957
do and you will learn something.

03:11:54.958 --> 03:11:58.329
   I mentioned before about how 
we log a screen view event 

03:11:58.330 --> 03:12:00.821
automatically for you.  You will
 see the show appear and the 

03:12:01.133 --> 03:12:05.258
sequence of screen view events 
identifies users path through 

03:12:05.609 --> 03:12:08.426
the app.  You can see the logs 
and the crashes that are logged 

03:12:08.952 --> 03:12:13.005
if you have integrated crash 
reporting.  You will also see ad

03:12:13.481 --> 03:12:17.226
 impressions and clicks through 
our AdMob integration.  We 

03:12:17.227 --> 03:12:21.359
realize the interface is ideal 
for debugging that's why we 

03:12:21.360 --> 03:12:24.433
built debug view on top of it as
 well.  As an app developer m 

03:12:24.434 --> 03:12:27.164
yself I know how critically 
important it is to instrument 

03:12:27.165 --> 03:12:30.740
your app right the first time. 
   If you make mistakes in your 

03:12:30.741 --> 03:12:33.603
tracking and you release that 
app version, it will be haunting

03:12:34.073 --> 03:12:37.776
 you forever sending polluted 
data into your Analytics and 

03:12:37.777 --> 03:12:40.551
there is no way to get rid of 
it.  We want to build a tool 

03:12:40.628 --> 03:12:43.515
that helps you to validate and 
get it right and insure that 

03:12:44.045 --> 03:12:47.346
your data is pristine after you 
launch your app.  Debug view 

03:12:47.687 --> 03:12:51.820
logs events in real time through
 your development devices, it 

03:12:51.821 --> 03:12:54.814
let's you examine every single 
event, very parameter you are 

03:12:55.142 --> 03:12:57.638
sending and if there are any e 
rrors in your tracking we don't 

03:12:57.861 --> 03:13:01.398
hide those.  We log an error 
event or parameter along with 

03:13:01.399 --> 03:13:04.435
the necessary details and links 
to help center articles to help 

03:13:04.877 --> 03:13:09.132
you address that and validate it
 before you launch.  The 

03:13:09.133 --> 03:13:11.431
feedback on this real time 
reporting has been awesome so 

03:13:12.304 --> 03:13:15.806
far.  As an Analytics PM you 
don't often get to build 

03:13:16.060 --> 03:13:19.008
something that inspires emotion 
so when you do, you know you 

03:13:19.302 --> 03:13:22.277
have done something special, and
 this one on the top middle I 

03:13:22.278 --> 03:13:25.776
don't know if you can read it.  
It says Ms. Next child will be 

03:13:26.662 --> 03:13:29.157
called debug view.  I love that 
because I named it, so I think 

03:13:29.158 --> 03:13:33.553
it's a beautiful name and right 
now my daughter is relieved at 

03:13:33.554 --> 03:13:39.576
home because she is not named 
debug view Ganem.  Feedback has 

03:13:39.577 --> 03:13:42.662
been exceptional.  But some of 
you told us you need access to 

03:13:43.101 --> 03:13:45.952
the underlying real time data 
from the real time reports.  So 

03:13:46.150 --> 03:13:48.669
we have made that possible 
through integration with 

03:13:49.373 --> 03:13:52.020
BigQuery. 
   Now, because the BigQuery 

03:13:52.021 --> 03:13:54.021
question comes up all of the 
time and a lot of you have 

03:13:54.465 --> 03:13:58.245
questions about how it works, I 
will walking you through the 

03:13:58.246 --> 03:14:02.845
process of linking to BigQuery, 
using it and laying the data  

03:14:02.846 --> 03:14:05.702
Data Studio on top of that.  So 
can we switch to the demo, 

03:14:06.139 --> 03:14:11.948
please?.  So here I'm in 
Firebase Console, and I go to my

03:14:12.041 --> 03:14:15.365
 project settings which is where
 I'm at now.  And this is for my

03:14:15.366 --> 03:14:19.921
 own game project.  And you can 
choose here to link to BigQuery.

03:14:19.922 --> 03:14:23.315
  Here is where you would have 
to enter your big information.  

03:14:23.547 --> 03:14:26.746
Mine is already here. 
   So I choose to continue and 

03:14:26.948 --> 03:14:32.012
now I can look at the links to 
my data s ets.  Going over to 

03:14:32.013 --> 03:14:36.070
look at my data set here, you 
can see I have one data set for 

03:14:36.071 --> 03:14:40.803
my Android App and one for my 
iOS app.  Each has daily tables 

03:14:41.035 --> 03:14:45.851
full of data. 
   So I have 469  days worth of 

03:14:45.852 --> 03:14:50.864
data in my Android data set but 
also this intraday data set.  

03:14:50.865 --> 03:14:52.865
Intraday meaning these are 
events we received throughout 

03:14:52.932 --> 03:14:56.137
today right up until right now. 
 So as users are logging events 

03:14:56.592 --> 03:15:00.307
in my app right now,  they are 
being sent in real time from the

03:15:00.308 --> 03:15:05.122
 back end over to this BigQuery 
data set.  And I can run queries

03:15:05.123 --> 03:15:08.073
 on it.  This is a simple one to
 see the list of names of 

03:15:08.866 --> 03:15:10.723
events. 
   You can get that.  It's a 

03:15:10.724 --> 03:15:13.748
pretty simple one, but you can 
imagine that you can export this

03:15:14.550 --> 03:15:18.170
 data, visualize it, combine it 
with your own, whatever you 

03:15:18.171 --> 03:15:20.546
need.  I want to show you a 
better way for those of you who 

03:15:20.647 --> 03:15:24.052
have ideas for how you want to 
visualize it but maybe not the 

03:15:24.053 --> 03:15:28.845
availability or the technical 
chops in SQL.  That's why we 

03:15:29.150 --> 03:15:34.204
built data center integration.  
We hand built three pages of 

03:15:34.205 --> 03:15:37.783
reports here to help you go 
deeper with Analytics data. 

03:15:37.784 --> 03:15:42.207
   And these were hand built by 
Analytics and Data  Data Studio 

03:15:42.741 --> 03:15:46.119
PMs and you can apply multiple 
filters all at once to go deeper

03:15:46.120 --> 03:15:51.499
 with this.  So, for example, I 
am going to apply a level end, 

03:15:51.500 --> 03:15:55.910
filter event filter, and maybe 
if I want to know what levels my

03:15:55.911 --> 03:15:59.505
 users are playing I can apply 
that.  I see the breakdown of 

03:15:59.725 --> 03:16:04.207
the school and the roof tops l
evel.  I want to know what 

03:16:04.208 --> 03:16:06.617
cities users are playing 
rooftops because that's my 

03:16:06.618 --> 03:16:10.158
advanced level.  That's where my
 power users are.  I can see 

03:16:10.159 --> 03:16:14.833
that saw Paul low is extremely 
popular which isn't surprising 

03:16:14.950 --> 03:16:18.128
if you know about the 
skateboarding culture.  Here is 

03:16:18.550 --> 03:16:23.908
how easy it is to customize.  I 
could say I don't want events, I

03:16:23.909 --> 03:16:27.076
 want count of users, and I 
don't want city.  I want to look

03:16:27.399 --> 03:16:30.921
 at app versions and tables are 
so boring, I want a pie chart 

03:16:30.922 --> 03:16:34.760
and I want to change this to app
 version. 

03:16:34.761 --> 03:16:38.491
   And just like that, I have 
customized it and I can share it

03:16:38.492 --> 03:16:42.903
 with Russ, show him how hard I 
worked to produce this form.  

03:16:43.098 --> 03:16:46.251
It's that easy and I lot of you 
have questions about how e

03:16:47.135 --> 03:16:49.423
xpensive is this?  Because 
typically working with raw data 

03:16:49.424 --> 03:16:53.366
is expensive.  Well, Data Studio
 is entirely free.  Unlimited 

03:16:53.367 --> 03:16:56.895
number of reports, sharing, 
customization, and, of course, 

03:16:57.137 --> 03:17:01.372
it queries BigQuery data but 
BigQuery has historically 

03:17:03.268 --> 03:17:06.802
offered 1 terabyte.  For some 
apps it would be hard to use 

03:17:06.910 --> 03:17:12.293
that up in a month, but today 
BigQuery has launched a 10 

03:17:12.294 --> 03:17:16.679
gigabyte per month free storage 
tier making this cheap and 

03:17:16.894 --> 03:17:21.157
affordable to work with raw 
data.

03:17:21.158 --> 03:17:24.551
   All right.  Go back to the 
slides.  So that was a lot of 

03:17:24.552 --> 03:17:27.704
stuff I know we covered but 
actually that's not all we are 

03:17:27.705 --> 03:17:32.442
up to.  I want to invite Krista 
to the stage to tell you more.  

03:17:32.443 --> 03:17:34.443
Krista.
   (

03:17:38.008 --> 03:17:38.425
Applause). 
   &gt;&gt; KRISTA SEIDEN:  Thank you,

03:17:38.426 --> 03:17:42.928
 Steve, my name is Krista Seiden
 and I'm also a product manager 

03:17:42.929 --> 03:17:46.474
on Google Analytics or Firebase.
  We have just heard from Steve 

03:17:46.475 --> 03:17:50.096
about a ton of new features just
 released in Google Analytics 

03:17:50.313 --> 03:17:53.600
for Firebase.  I don't know 
about you but I'm excited by a 

03:17:53.714 --> 03:17:57.800
lot of these.  Let's look at how
 you can use a lot of these new 

03:17:57.801 --> 03:18:00.344
f eatures along with core 
product functionality to help 

03:18:00.651 --> 03:18:04.553
you drive growth and attribution
 for your businesses. 

03:18:04.649 --> 03:18:07.184
   Now, once you have built and 
launched your app, you want to 

03:18:07.306 --> 03:18:10.564
pay close attention to your 
Analytics data to understand how

03:18:10.711 --> 03:18:13.965
 your app is being used.  You 
will also want to understand the

03:18:14.400 --> 03:18:18.313
 sources of traffic driving 
users to your app and determine 

03:18:18.314 --> 03:18:22.029
your highest value networks and 
campaigns for conversion events 

03:18:22.030 --> 03:18:27.244
such as first open, in app 
purchases and more. 

03:18:27.245 --> 03:18:31.632
   An important way to determine
 who your best users are is by 

03:18:31.633 --> 03:18:34.371
understanding their post install
 behavior with conversion 

03:18:35.374 --> 03:18:37.875
events.  So consider what the 
drivers for your business are.  

03:18:38.093 --> 03:18:42.848
Out of the box we mark first 
open and in app purchase as 

03:18:42.957 --> 03:18:44.957
conversion events but every 
business is different, every 

03:18:45.144 --> 03:18:47.553
business is unique, and you are 
going to have different events 

03:18:47.626 --> 03:18:50.462
that might be meaningful for 
your business.  So I would 

03:18:50.463 --> 03:18:53.017
encourage you to go ahead and 
mark those events as conversion 

03:18:53.444 --> 03:18:56.936
events in the UI to unlock 
attribution reporting on those 

03:18:57.684 --> 03:19:00.340
events.  For example, you might 
decide that something like an 

03:19:00.771 --> 03:19:04.239
app update is a really good 
signal of user engagement with 

03:19:04.240 --> 03:19:08.639
your app, so you might want to 
mark app updates as a conversion

03:19:09.006 --> 03:19:12.714
 event to unlock attribution 
reporting on app updates. 

03:19:12.715 --> 03:19:15.929
   By doing so, you will have 
further visibility into the 

03:19:16.355 --> 03:19:18.996
various ad networks you are 
running campaigns on by seeing 

03:19:18.997 --> 03:19:23.946
which campaigns are leading to 
more engaged higher value user  

03:19:24.910 --> 03:19:27.552
users.  Simply put conversion 
events allow you to focus on the

03:19:27.553 --> 03:19:31.715
 most valuable events and users 
and determine your high value 

03:19:31.716 --> 03:19:33.716
campaigns driving engagement in 
your app.

03:19:40.459 --> 03:19:42.968
basics on understanding how 
users are finding your app and 

03:19:42.969 --> 03:19:45.213
what they are doing in there, I 
want to talk to you about 

03:19:45.847 --> 03:19:48.180
attribution.  So we have built 
several integrations to help you

03:19:48.181 --> 03:19:53.300
 grow with a single SDK. 
   First up, universal app 

03:19:55.395 --> 03:19:59.214
campaigns.  So you cannot have a
 successful mobile app business 

03:19:59.432 --> 03:20:03.916
without having a successful 
growth  strategy and you need to

03:20:03.917 --> 03:20:08.178
 answer two questions to execute
 on that successful growth 

03:20:08.179 --> 03:20:11.972
strategy.  First, who are the 
best customers for your app?  

03:20:11.973 --> 03:20:17.453
And second, where do you find 
them?  Which media channels are 

03:20:17.454 --> 03:20:20.957
most effective at finding these 
customers and getting them to 

03:20:20.958 --> 03:20:25.057
install and use your app?  And 
that can be complex.  So we have

03:20:25.058 --> 03:20:29.444
 built universal app campaigns 
or U AC to help you reach people

03:20:29.445 --> 03:20:34.367
 across multiple billion user 
properties including Google 

03:20:34.368 --> 03:20:39.637
Play, search, YouTube, Gmail, 
and  millions of apps and asites

03:20:40.191 --> 03:20:42.517
 across the display network.  
All you have to do is tell us 

03:20:42.735 --> 03:20:45.126
the app you would like to 
promote, the price you are 

03:20:45.347 --> 03:20:49.389
willing to pay per install, and 
a few more bits of information 

03:20:49.639 --> 03:20:53.806
like the ad text, the v ideos 
and assets, and UAC will then do

03:20:53.807 --> 03:20:58.187
 the work by using Machine 
Learning to deliver the maximum 

03:20:58.303 --> 03:21:01.333
number of installs at the price 
you have specified. 

03:21:01.334 --> 03:21:07.598
   And UAC is now even better.  
AdWords has  launched the 

03:21:07.792 --> 03:21:10.108
ability to launch for higher 
value installs.  This means you 

03:21:10.338 --> 03:21:13.518
are not just optimizing for the 
number of installs, but also for

03:21:13.519 --> 03:21:18.315
 the post install events such as
 in app purchase that you have 

03:21:18.316 --> 03:21:22.501
specified as conversion events 
through Firebase.  Now, UAC is 

03:21:22.805 --> 03:21:26.530
an encriedable  feature in 
AdWords that we know will help 

03:21:26.836 --> 03:21:30.674
you bring high value users to 
your app.  Let's say you are a 

03:21:30.920 --> 03:21:33.631
large marketer or large 
developer and you manage and buy

03:21:33.632 --> 03:21:38.708
 ads programmatically using the 
double click zing tall marketing

03:21:38.709 --> 03:21:42.096
 suite.  That's why I'm excited 
to announce that today we have a

03:21:42.097 --> 03:21:44.832
 new integration with double 
click digital marketing.  This 

03:21:44.833 --> 03:21:48.724
is in beta as of today. 
   Now, Firebase tracked install

03:21:49.165 --> 03:21:53.835
 and post install events can 
easily be imported back into ZZM

03:21:54.175 --> 03:21:58.657
 as conversions.  This means 
that large advertisers can 

03:21:58.658 --> 03:22:03.496
seamlessly integrate Firebase to
 their overall programmatic 

03:22:03.497 --> 03:22:06.794
buying, measurement and 
optimization needs using club 

03:22:06.795 --> 03:22:10.603
click. double click. 
   We know you are not just 

03:22:10.604 --> 03:22:13.120
advertising with AdWords and 
double click.  That's why we are

03:22:13.666 --> 03:22:15.666
 continually investing in 
growing our third party 

03:22:16.075 --> 03:22:18.477
advertising network.  Today I'm 
excited to announce that we have

03:22:18.478 --> 03:22:22.412
 over 50 ad network partners and
 we are continuing to invest in 

03:22:22.773 --> 03:22:26.028
this area.  We have invested in 
integrating with all of these 

03:22:26.117 --> 03:22:29.024
different pieces to help you 
advertise across platforms, 

03:22:29.834 --> 03:22:32.464
allowing data from all of thighs
 to come together in the same 

03:22:32.465 --> 03:22:35.298
platform to help you make solid 
decisions on the data that you 

03:22:35.299 --> 03:22:40.125
are collecting.  Simply put, we 
are creating a single source of 

03:22:40.126 --> 03:22:45.179
cross network  attribution. 
   Now that we have covered 

03:22:46.708 --> 03:22:51.566
attribution, let's focus on 
using your Analytics date  data 

03:22:51.995 --> 03:22:57.236
to drive growth.  Let's look at 
a case study.  Who a call is an 

03:22:58.002 --> 03:23:02.255
app that acts as a caller ID.  
The service model is more 

03:23:02.587 --> 03:23:05.202
passive than most because they 
are relying on the frequency for

03:23:05.203 --> 03:23:08.706
 which users are getting calls. 
 So instead of focusing on 

03:23:08.929 --> 03:23:13.342
something like retention rate as
 their most important metric, 

03:23:13.343 --> 03:23:16.558
uninstall rate has become the 
most critical metric for whose 

03:23:17.294 --> 03:23:21.466
call.  To the who's call 
starting using the Google 

03:23:21.467 --> 03:23:24.225
Analytics for Firebase to log 
removal of apps automatically 

03:23:24.438 --> 03:23:28.472
and with BigQuery they were able
 to analyze the data in depth.  

03:23:28.688 --> 03:23:32.030
They soon realized that they had
 a first day uninstall rate of 

03:23:32.684 --> 03:23:37.183
almost 70 peevers.  7 0 % . 
   That is really bad.  So armed

03:23:37.184 --> 03:23:42.669
 with this data the who's call 
tem started improving the 

03:23:43.089 --> 03:23:47.248
process of on boarding bit 
running AV testsgy getting 

03:23:47.249 --> 03:23:49.440
people to accept permissions and
 keep the app.  What they were 

03:23:49.694 --> 03:23:53.981
able to do was reduce the 
uninstall rate by 14% and 

03:23:53.982 --> 03:23:58.477
increase retention rate by 6%.  
To sum this up, they said that 

03:23:59.210 --> 03:24:01.836
using Firebase we are able to 
consolidate and measure 

03:24:01.837 --> 03:24:05.218
important metrics within a 
unified platform.  It relieves 

03:24:05.219 --> 03:24:09.175
the burden of data analysis and 
allows us to take action where 

03:24:09.176 --> 03:24:12.441
it really counts.  I think that 
this is a really great example 

03:24:12.442 --> 03:24:18.596
of using your Analytics data to 
actually drive growth. 

03:24:18.597 --> 03:24:22.434
   And that data will  help you 
to not only understand where 

03:24:22.435 --> 03:24:25.039
your users are coming from but 
will give you insights into 

03:24:25.484 --> 03:24:28.011
their behavior in your app.  
Now, you have been focused on 

03:24:28.425 --> 03:24:31.931
growing your high value users, 
and now you want to retain them.

03:24:31.932 --> 03:24:37.098
  Using Google Analytics for 
Firebase you can identify these 

03:24:37.099 --> 03:24:39.601
high value audiences and send 
these audiences for 

03:24:40.114 --> 03:24:44.946
re-engagement campaigns.  You 
can also use these  audiences 

03:24:45.272 --> 03:24:48.438
across over areas of Firebase 
specifically to target them in 

03:24:48.586 --> 03:24:51.840
Cloud messaging and remote 
config. 

03:24:51.841 --> 03:24:55.336
   Recently we launched a couple
 of updates to these targeting 

03:24:55.337 --> 03:25:02.562
options.  First, logical 
audience combinations such as 

03:25:02.563 --> 03:25:05.941
includes one of.  For example, 
you could target audiences that 

03:25:05.942 --> 03:25:08.402
contain at least one of 
purchasers, lifetime value 

03:25:08.817 --> 03:25:12.946
greater than zero or high 
scoring users with an offer for 

03:25:12.947 --> 03:25:16.781
a free character in the app to 
incentivize them to come back.  

03:25:17.317 --> 03:25:21.484
Second, you can now target using
 user properties in Cloud m 

03:25:21.485 --> 03:25:28.723
essaging and remote  config.  
For example, this screen shot 

03:25:29.158 --> 03:25:33.528
shows high level users.  These 
are users at or above level 20 

03:25:33.529 --> 03:25:37.143
in your app.  Now, you can use 
this to customize app experience

03:25:37.144 --> 03:25:41.319
 of users by different skill 
users by leveraging remote 

03:25:41.320 --> 03:25:45.418
config.  This allows you to get 
more con you lar and specific 

03:25:45.723 --> 03:25:49.579
with targeting options to reach 
users you are interested in. 

03:25:49.580 --> 03:25:53.054
   So I have talked about 
several ways to understand your 

03:25:53.055 --> 03:25:56.231
user behavior, drive growth and 
attribution with new 

03:25:57.047 --> 03:25:59.047
integrations and expanded 
functionality.  I hope that you 

03:25:59.178 --> 03:26:02.683
will give some of it a try.  
With that, I will hand it back 

03:26:02.810 --> 03:26:04.810
over to Russ.
   (Applause). 

03:26:11.095 --> 03:26:13.943
   &gt;&gt; RUSS KETCHUM:  Thanks, 
Krista.  So we covered a lot of 

03:26:13.944 --> 03:26:17.439
ground today.  We introduced you
 to our new name, Google 

03:26:18.344 --> 03:26:22.138
Analytics for friesh we looked 
at the core of Analytics and the

03:26:22.139 --> 03:26:25.541
 enhancements and Krista took us
 through how you can use 

03:26:25.542 --> 03:26:29.004
attribution to drive growth 
strategies.  We hope that this 

03:26:29.005 --> 03:26:31.955
session is the start of a 
conversation.  And to keep that 

03:26:31.956 --> 03:26:34.800
conversation going, there is a 
number of other Firebase 

03:26:34.801 --> 03:26:37.565
sessions  happening throughout 
the rest of the I/O.  I would 

03:26:37.762 --> 03:26:39.843
particularly like to highlight 
the session Steve mentioned 

03:26:41.773 --> 03:26:46.271
earlier, the AdMob and Firebase 
better together session that's 

03:26:46.272 --> 03:26:48.272
happening Friday 

03:26:51.386 --> 03:26:55.599
morningality at 8:30.  If you 
have questions, we will be at 

03:26:55.900 --> 03:26:58.506
the Firebase Sandbox so you can 
find us there and we would love 

03:26:58.751 --> 03:27:02.357
to hear your thoughts.  With 
that, on behalf of the Google 

03:27:02.358 --> 03:27:04.558
Analytics for Firebase team.  
Thank you for coming out and 

03:27:04.559 --> 03:27:06.559
enjoy the rest of I/O.  Take 

03:27:09.916 --> 03:27:16.564
care.  (Concluded at 6:39 CT)

03:33:48.579 --> 03:33:48.670
&gt;&gt;
   &gt;&gt;

03:33:48.671 --> 03:33:51.204
   SAN JOSE, CALIFORNIA
   MAY 17, 2017

03:33:48.671 --> 03:33:50.204
   6:00 PM CT
   STAGE 2

03:33:48.671 --> 03:33:50.671
   FIREBASE ANALYTICS: OVERVIEW 
AND UPDATES

03:34:01.497 --> 03:34:02.497
   T4A422

03:34:01.497 --> 03:34:02.920
   &gt;&gt;
   &gt;&gt;

03:34:02.921 --> 03:34:03.921
   &gt;&gt;
   &gt;&gt;

03:34:02.921 --> 03:34:03.237
   &gt;&gt; Blank blairchtion.

03:48:08.134 --> 03:48:11.471
is Tim Murray and I work on the 
Android performance team.  We 

03:48:11.472 --> 03:48:14.303
will talk about improving your 
application's performance on 

03:48:16.225 --> 03:48:20.199
Android.  Now, one of the big 
things that the Android 

03:48:20.200 --> 03:48:24.004
performance team has done in the
 past year was to optimize the 

03:48:24.005 --> 03:48:29.032
performance of the Google Pixel.
  We looked at everything on the

03:48:30.851 --> 03:48:34.688
 Pixel from application code 
down to the kernel, everything 

03:48:34.689 --> 03:48:39.233
in between.  We tweaked things, 
we experimented with things, we 

03:48:39.859 --> 03:48:43.748
replaced other components 
entirely.  What did we try to do

03:48:44.279 --> 03:48:50.944
 here?  What did we do to, you 
know, what was your focus for 

03:48:50.945 --> 03:48:54.457
performance? 
   Number one, we wanted to hit 

03:48:54.458 --> 03:48:58.276
60 frames per second all of the 
time.  This means that you have 

03:48:58.277 --> 03:49:03.037
to render a frame in 16.7 
milliseconds all of the time.  

03:49:03.038 --> 03:49:08.378
If you run at 60 frames per 
second your app looks fluid.  It

03:49:08.879 --> 03:49:13.140
 looks smooth and responsive.  
If you don't run at 60 frames 

03:49:13.440 --> 03:49:17.357
per second people notice.  The 
phone doesn't feel fast.  The 

03:49:17.358 --> 03:49:20.173
phone feels like it's 
struggling. 

03:49:20.174 --> 03:49:24.559
   So consistency is parament.  
You want to hit 60 frames were 

03:49:24.560 --> 03:49:27.271
second all of the time.  The 
second thing we focused on was 

03:49:27.657 --> 03:49:31.943
to make applications start 
quickly.  A user will switch 

03:49:31.944 --> 03:49:35.062
between applications a lot in 
the course of normal usage.  If 

03:49:35.440 --> 03:49:39.076
I'm in Gmail and I click a link 
that opens in Chrome, I want 

03:49:39.077 --> 03:49:43.051
that to go quickly.  If I click 
a link in Chrome that takes me 

03:49:43.218 --> 03:49:48.888
to Twitter, I want that to go 
quickly too.  Any time I'm  

03:49:49.282 --> 03:49:53.454
sitting there waiting for the 
system to switch applications 

03:49:54.048 --> 03:49:57.465
feels like dead time.  It's a 
time I remember I'm using a 

03:49:57.670 --> 03:49:59.796
computer as opposed to 
interacting with the stuff I 

03:50:00.004 --> 03:50:02.234
want to get done. 
   So reducing the amount of 

03:50:02.417 --> 03:50:06.150
time you spend switching apps 
make the system feel effortless.

03:50:06.151 --> 03:50:08.151
  It's really 

03:50:09.895 --> 03:50:12.919
important.  That's it.  That's 
what we focused on system wide 

03:50:13.216 --> 03:50:18.500
for Pixel.  We just wanted to 
hit those two things 

03:50:18.501 --> 03:50:22.582
consistently.  If you do these 
two things when your device is, 

03:50:22.583 --> 03:50:25.040
you know, switching between 
applications very quickly and 

03:50:25.544 --> 03:50:30.080
running at 60 frames per second 
it will feel fast, but more 

03:50:30.081 --> 03:50:34.168
importantly, if your device runs
 at 60 frames per second and 

03:50:35.431 --> 03:50:37.727
switches between apps 
consistently, it does it all of 

03:50:37.843 --> 03:50:41.202
the time, the device stops 
feeling like anything.  It stops

03:50:41.292 --> 03:50:44.943
 feeling like a device.  Instead
 it feels like you are 

03:50:44.944 --> 03:50:47.153
interacting directly with the 
application. 

03:50:47.154 --> 03:50:50.167
   And that's magical for a 
user.  That's really important. 

03:50:50.284 --> 03:50:57.245
 But there is a problem with 
this scenario.  We run apps and 

03:50:57.544 --> 03:51:01.811
apps can be slow.  And, of 
course, on the system side of 

03:51:02.315 --> 03:51:08.346
things, we are constantly trying
 to make it easier to write fast

03:51:08.739 --> 03:51:15.301
 applications and make it harder
 to write slow applications, but

03:51:15.899 --> 03:51:18.446
 as an application developer it 
is apples going to be something 

03:51:18.447 --> 03:51:22.365
you can do to make the system 
not run at 60  frames per second

03:51:22.875 --> 03:51:25.985
 or make your apps start up 
really slowly. 

03:51:26.313 --> 03:51:29.443
   The issue is that from the 
point of view of the user, they 

03:51:29.444 --> 03:51:33.878
don't care that it's one app 
that happens to run slowly.  One

03:51:33.879 --> 03:51:40.034
 Health app that doesn't run at 
60 fips or doesn't start up 

03:51:40.035 --> 03:51:43.278
quickly ruins the whole magical 
feeling of the device, and it 

03:51:43.681 --> 03:51:46.800
reminds them they are not i 
nteracting with an app, they are

03:51:47.197 --> 03:51:50.144
 touching their phone and then 
they want to throw their phone 

03:51:50.145 --> 03:51:52.152
against the wall.  So today we 
are going to talk about two 

03:51:52.457 --> 03:51:58.221
tools that we used during Pixel 
really extensively to analyze 

03:51:58.222 --> 03:52:01.172
performance and help you as app 
developers figure out what you 

03:52:01.453 --> 03:52:05.678
can do to improve your  
application's performance. 

03:52:05.679 --> 03:52:08.425
   The first tool we are going 
to talk about is called 

03:52:16.280 --> 03:52:19.092
GFXinfo.  It's a shell command 
you can use on the device and 

03:52:19.093 --> 03:52:23.651
all it does is it sells you 
about the rendering time for 

03:52:23.652 --> 03:52:28.791
your application.  So here we 
can see that we rendered 223 

03:52:29.302 --> 03:52:31.302
frames, we got the average 

03:52:34.538 --> 03:52:39.528
frame time.  The 99th percentile
 frame time and it 

03:52:44.522 --> 03:52:47.862
gives us some idea why it's 
actually slow.  We use this 

03:52:47.863 --> 03:52:52.305
internally and you look at 
average frame time, 95th and 

03:52:52.306 --> 03:52:55.107
99th percentile frame time.  
That's all this tool does.  It 

03:52:55.108 --> 03:52:59.079
doesn't tell you why your app 
ran slow. 

03:52:59.080 --> 03:53:03.794
   It doesn't tell you snig you 
should do to fix it so why am I 

03:53:03.795 --> 03:53:05.823
up here talking about it?  
Because you can automate

03:53:10.249 --> 03:53:14.395
 it.  If you take one thing away
 from this talk, if you decide 

03:53:14.593 --> 03:53:19.441
to take a nap for the next half 
h our, just run GFXinfo at the 

03:53:19.645 --> 03:53:22.973
very end of whatever automated 
test you are running and 

03:53:22.974 --> 03:53:25.611
congratulations now you have a 
performance test.  Now you have 

03:53:25.612 --> 03:53:29.744
a thing you can run regressions 
on, you can spot regressions in 

03:53:29.745 --> 03:53:32.879
your application. 
   The first time you have a 

03:53:33.501 --> 03:53:36.212
performance regression in your 
application that you want to 

03:53:36.513 --> 03:53:41.258
track down, this will save you 
so much time and effort, it will

03:53:41.259 --> 03:53:48.826
 pay for itself instantly.  This
 is how most of the internal 

03:53:48.827 --> 03:53:55.058
Android yank tests work, this is
 how we track all rchg  jarchg 

03:53:55.059 --> 03:53:58.993
across the system.  Please do 
it, it you will say yourself so 

03:53:58.994 --> 03:54:04.126
much t ime.  But that's GFXinfo.
  That only tells you where your

03:54:04.542 --> 03:54:06.757
 performance is today.  It 
doesn't tell you why your 

03:54:06.758 --> 03:54:09.619
performance is that way or what 
you should do about it. 

03:54:09.620 --> 03:54:12.420
   For that we turn to a 
different tool, my favorite 

03:54:12.421 --> 03:54:18.706
tool, the only tool I ever use,
tion systrace.  So a lot of 

03:54:18.707 --> 03:54:21.812
developers have tried systrace 
and they have told me they have 

03:54:21.813 --> 03:54:24.850
no idea what's going on when 
they look at systrace, and 

03:54:24.851 --> 03:54:28.892
that's fair.  I can stand up 
here and tell you that systrace 

03:54:28.893 --> 03:54:34.438
is easy, it's not really easy.  
Systrace is not a CPU p rofiler.

03:54:34.439 --> 03:54:38.781
  Systrace is instead a system 
wide tracing tool. 

03:54:38.782 --> 03:54:41.710
   The first thing that means is
 systrace doesn't care about 

03:54:41.916 --> 03:54:45.231
your app.  It doesn't do 
anything special to your 

03:54:45.232 --> 03:54:49.091
application.  It's not going to 
go peek at your  application's 

03:54:49.295 --> 03:54:52.609
call stacks and say you spent a 
really long time in this 

03:54:53.018 --> 03:54:55.625
function.  It doesn't do that.  
It just tells you when your 

03:54:55.626 --> 03:54:58.560
application was running and 
certain events that occur within

03:54:58.789 --> 03:55:04.421
 your application.  It also 
tells you everything about the 

03:55:04.637 --> 03:55:07.452
rest of the s ystem.  It will 
tell you things about the 

03:55:07.453 --> 03:55:10.401
kernel.  It will tell you things
 about the graphics pipeline.  

03:55:10.402 --> 03:55:14.151
It will tell you things  about 
the framework and activity 

03:55:14.152 --> 03:55:17.363
manager and things like that.  
there is any information you 

03:55:17.364 --> 03:55:21.300
want about afternoon Android 
device, we have probably 

03:55:21.301 --> 03:55:25.830
surfaced it via systrace.  We 
use it for everything.  Just to 

03:55:26.137 --> 03:55:29.960
be, just to reinforce how 
important systrace is, in the 

03:55:29.961 --> 03:55:35.720
past year, I have looked at 
somewhere over 2,000 traces.  We

03:55:36.037 --> 03:55:41.001
 use systrace a whole lot.  Now,
 systrace is not arch Android 

03:55:41.420 --> 03:55:44.103
studio.  If you want to get 
systrace, there are two ways to 

03:55:44.104 --> 03:55:48.555
get it.  First of all, it's in 
platform tools in the Android 

03:55:48.556 --> 03:55:51.297
SDK.  You can get a version of 
systrace from there.  What I 

03:55:51.395 --> 03:55:54.936
like to do though is I get 
systrace from the repository 

03:55:56.057 --> 03:55:59.940
where it's developed.  It's part
 of a project called catapult, 

03:55:59.941 --> 03:56:04.522
which is on GitHub, catapult it 
owned by members of the Google 

03:56:04.523 --> 03:56:11.440
Chrome and Android teams. 
   So upstream catapult is 

03:56:11.441 --> 03:56:14.013
always improving.  I usually get
 top of tree catapult.  Once you

03:56:14.014 --> 03:56:17.950
 get that, you will have this 
Python executable that you can 

03:56:17.951 --> 03:56:22.895
run and you can get a trace.  
Now, how does systrace actually 

03:56:22.896 --> 03:56:27.228
work?  What does it actually 
tell you?  Systrace is three 

03:56:28.446 --> 03:56:33.190
components.  At the bottom is 
this thing called F trace.  

03:56:34.828 --> 03:56:39.347
Ftrace is a Linux kernel feature
 that allows the kernel and user

03:56:39.348 --> 03:56:43.483
 space to write event 
information into a sent central 

03:56:43.915 --> 03:56:46.381
buffer. 
   What this means basically is 

03:56:46.382 --> 03:56:50.928
that you can get a journal of 
any event that happened on the 

03:56:50.929 --> 03:56:54.260
system.  So the kernel will tell
 us things like, hey, this 

03:56:54.261 --> 03:56:59.416
process started running on this 
CPU, or, hey, the clocks changed

03:56:59.417 --> 03:57:04.158
 on this CPU.  That's great.  
It's really low level, but we 

03:57:04.159 --> 03:57:06.896
can use it. 
   The next thing above Ftrace 

03:57:07.108 --> 03:57:09.108
is a program called

03:57:13.354 --> 03:57:16.670
 Atrace, Atrace is an Android 
program on the device installed 

03:57:16.671 --> 03:57:20.221
automatically and the Android 
image.  It's on every device.  

03:57:20.416 --> 03:57:25.288
All it does is configure Ftrace,
 but it also configures user 

03:57:25.289 --> 03:57:29.698
space tracing.  So Atrace will 
go and turn on all of these 

03:57:29.699 --> 03:57:33.421
different trace points inside of
 the Android user space. 

03:57:33.528 --> 03:57:36.779
   So here we can get things 
like do you want to find out 

03:57:36.780 --> 03:57:40.408
what window manager thought 
about your application.  Atrace 

03:57:40.409 --> 03:57:44.737
will turn that on or activity 
manager or any other part of the

03:57:45.259 --> 03:57:48.687
 Android framework.  All of that
 is controlled by Atrace.  The 

03:57:48.985 --> 03:57:53.821
top most layer is systrace 
itself.  Systrace then lives on 

03:57:54.220 --> 03:57:58.248
your host development machine 
and it gets the results from 

03:57:58.249 --> 03:58:04.553
Atrace, and it wraps those 
results in a nice HTML file. 

03:58:04.807 --> 03:58:11.366
   You get this giant to pen 
that willly 10s of Megs or even 

03:58:11.367 --> 03:58:15.828
100s of Megs HTML file that 
contains a trace.  It's pretty 

03:58:16.132 --> 03:58:20.518
convenient and it actually makes
 sharing traces incredibly easy.

03:58:23.280 --> 03:58:26.627
should do when you decide to 
start tracing a device is you 

03:58:26.829 --> 03:58:30.731
should look at the categories 
available on that device.  

03:58:30.732 --> 03:58:36.318
Systrace events are separated 
into categories.  And those 

03:58:36.319 --> 03:58:40.886
categories will vary from Os 
version to Os version and 

03:58:41.465 --> 03:58:44.461
potentially device to device. 
   In general, the important 

03:58:44.462 --> 03:58:48.609
stuff will always be there.  The
 Core stuff that you want as an 

03:58:48.610 --> 03:58:54.688
app developer, we have tests for
 that to go beyond every device.

03:58:54.689 --> 03:58:56.172
  Now, let's actually run a 
trace and see what that would 

03:58:56.173 --> 03:59:00.646
look like.  So this is the 
demand I used for the trace you 

03:59:00.647 --> 03:59:06.177
will see for the rest of this 
talk, and the way systrace works

03:59:06.178 --> 03:59:12.653
 is you provide the list of 
event tags that you want in your

03:59:12.654 --> 03:59:14.654
 trace and here

03:59:17.184 --> 03:59:24.626
 we have Sched, we have Freq for
 CPU frequency information, idle

03:59:24.739 --> 03:59:29.002
 will tell us when the CPU goes 
idle, AM and WM tell us about 

03:59:29.390 --> 03:59:33.430
the Android activity manager and
 window manager.  GFX will tell 

03:59:33.618 --> 03:59:36.574
us everything you wanted to nose
 about the Android graphics 

03:59:37.057 --> 03:59:41.514
pipeline, view will tell you 
about the view hierarchy inside 

03:59:41.515 --> 03:59:47.166
applications, Dalvik enables the
 trace point for the art VM, 

03:59:47.372 --> 03:59:50.605
input will tell you when you are
 actually touching the screen 

03:59:50.784 --> 03:59:54.630
and binder driver will tell you 
exactly when a process is making

03:59:54.631 --> 04:00:00.268
 an IPC over binder to another 
process.  The last three 

04:00:00.269 --> 04:00:04.650
arguments are s pecial -- key 
see we are going to run the 

04:00:05.029 --> 04:00:10.275
trace for five seconds.  If you 
omit the dash key, systrace will

04:00:10.486 --> 04:00:17.935
 prompt you to prescienter.  Dsh
 O, you will right to HTML.  Dsh

04:00:17.936 --> 04:00:22.266
 B is a little odd.  So I 
mentioned Ftrace and the Ftrace 

04:00:22.775 --> 04:00:29.341
buffer, the Ftrace buffer is a 
fixed size.  By default it's 

04:00:29.342 --> 04:00:33.173
1.4-megabytes and what happens 
if you fill this buffer, if you 

04:00:33.174 --> 04:00:35.305
have too many events for the 
buffer is you will get a trace 

04:00:35.511 --> 04:00:40.158
and then at the end, things will
 stop happening.  You think you 

04:00:40.159 --> 04:00:44.586
ran the trace for five seconds 
but maybe you only have 3.5 

04:00:44.783 --> 04:00:46.197
seconds worth of events in 
there. 

04:00:46.198 --> 04:00:49.345
   When I take a trace, I always
 increase the buffer size so 

04:00:49.423 --> 04:00:54.386
here I have increased it to 
16-megabytes and for this kind 

04:00:54.387 --> 04:00:57.310
of trace we probably don't have 
to increase the buffer size, but

04:00:57.612 --> 04:01:01.352
 it's always better to increase 
the buffer size and not have to 

04:01:01.651 --> 04:01:07.086
take a trace a second time than 
be overly conservative with the 

04:01:07.294 --> 04:01:14.036
buffer size.  All right.  We run
 this, we now get a trace.  What

04:01:14.233 --> 04:01:19.304
 does the trace actually look 
like?  There is a lot going on 

04:01:19.305 --> 04:01:23.817
in this trace.  And if you are 
in the back, I'm sorry, it's 

04:01:23.818 --> 04:01:28.457
probably hard to see. 
   The first thing to know about

04:01:28.458 --> 04:01:33.708
 the trace is that it is a 
timeline view.  It moves left to

04:01:33.709 --> 04:01:38.623
 right, and you can scroll it 
left to right and time moves 

04:01:39.240 --> 04:01:41.240
from left to right.  So the left
 side is the beginning of the 

04:01:41.721 --> 04:01:45.307
trace.  That's zero seconds 
being kicked off the trace and 

04:01:45.308 --> 04:01:50.836
five seconds is when the trace 
ends.  You can move around the 

04:01:50.837 --> 04:01:55.990
trace.  You can move, you can 
pan in time with AMD keys, and 

04:01:55.991 --> 04:01:58.928
you can zoom in and out on 
whatever section of the trace 

04:01:58.929 --> 04:02:05.178
you are looking at with WS.  So 
it's j ust, you know, like a 

04:02:05.179 --> 04:02:08.118
first person shooter.  The trace
 also scrolls up and down.  So 

04:02:08.298 --> 04:02:11.766
here you see there are a bunch 
of rows up here.  There is this 

04:02:11.950 --> 04:02:14.153
kernel section and a calculator 
section. 

04:02:14.469 --> 04:02:17.730
   There are way more rows on 
the screen because there is one 

04:02:17.924 --> 04:02:21.246
row generally for every thread 
that is run during the trace.  

04:02:21.460 --> 04:02:27.388
So you may have hundreds or 
thousands of rows in your trace.

04:02:27.389 --> 04:02:31.929
  The next thing to look at when
 you start using systrace is 

04:02:32.233 --> 04:02:36.086
there is this pallet of tools I 
have in the upper right-hand 

04:02:36.578 --> 04:02:40.293
corner.  You can click on the 
tools you can access them with 

04:02:41.401 --> 04:02:43.941
numbers 1-4.  Number one is the 
pointer.  That's the main tool 

04:02:43.942 --> 04:02:47.898
we will use when we use sis 
straes.  That lets us click the 

04:02:48.003 --> 04:02:51.133
individual events we see in the 
trace and get information about 

04:02:51.134 --> 04:02:52.524
them. 
   When you click an event it 

04:02:52.525 --> 04:02:57.372
will show up in the bottom half 
of the screen like that.  So 

04:02:57.373 --> 04:03:00.630
here we could see calculator was
 running.  We see the process 

04:03:01.068 --> 04:03:05.760
ID.  We see the thread ID.  The 
priority.  We can see when 

04:03:05.761 --> 04:03:08.587
exactly it started in the trace.
  We see how long it ran for.  

04:03:08.588 --> 04:03:11.713
We get a bunch of useful 
statistics.  You can use a 

04:03:12.332 --> 04:03:14.476
pointer to select a lot of 
different things in the trace 

04:03:14.662 --> 04:03:19.694
which gives you an aggregate 
view chai looks like that. 

04:03:19.695 --> 04:03:23.353
   -- that looks like that.  So 
this will basically add up all 

04:03:23.354 --> 04:03:29.185
of the threads, like if I select
 the, a region in the kernel 

04:03:29.186 --> 04:03:32.057
section, this will add up all of
 the threads that occurred and 

04:03:32.058 --> 04:03:35.146
tell us how much time did we 
spend on each thread.  What was 

04:03:35.147 --> 04:03:37.893
the average time that each 
thread ran, things like that. 

04:03:38.275 --> 04:03:42.820
   That's really useful.  We 
will come back to that later.  

04:03:42.821 --> 04:03:47.925
Number two and three, on the  
pallet are for panning and 

04:03:48.184 --> 04:03:52.117
zooming so they are equivalent 
to WASD.  You don't need to use 

04:03:52.396 --> 04:03:56.254
them.  You can use them if you 
want.  I generally use WASD.  

04:03:56.255 --> 04:04:00.804
The fourth tool is incredibly 
useful.  It is the highlighter 

04:04:00.805 --> 04:04:03.107
tool. 
   So you could select a region 

04:04:03.108 --> 04:04:09.245
of time in the trace, and that 
region will have a white 

04:04:09.246 --> 04:04:12.586
background and everything you 
haven't selected will then have 

04:04:12.587 --> 04:04:15.921
a gray background.  You can use 
this to keep track of the area 

04:04:15.922 --> 04:04:19.144
you care about as you scroll 
vertically through a trace.  So 

04:04:19.368 --> 04:04:23.299
if you find something in one 
process and you think something 

04:04:23.500 --> 04:04:26.912
went wrong here what else was 
the system  doing, you can 

04:04:26.913 --> 04:04:30.054
scroll up and down the trace and
 know exactly what part of the 

04:04:30.150 --> 04:04:33.788
trace you should be looking at. 
 I use the highlighter 

04:04:34.273 --> 04:04:37.639
constantly.  If you start using 
systrace, you probably will as 

04:04:37.853 --> 04:04:40.255
well. 
   Now, let's scroll down and 

04:04:40.536 --> 04:04:47.485
see what else is in the trace.  
More stuff.  So every row in a 

04:04:47.486 --> 04:04:53.760
trace is either a counter or a 
thread.  And down here at the 

04:04:53.761 --> 04:05:01.804
bottom is a thread.  These 
blocks right here are the Core 

04:05:01.805 --> 04:05:06.692
thing that you will look at in 
systrace.  These are events.  So

04:05:07.959 --> 04:05:10.477
 every systrace event has a 
beginning and an

04:05:13.730 --> 04:05:16.754
 end.    Systrace events can 
then be nested so this is a 

04:05:17.056 --> 04:05:21.171
stack that grows down.  You can 
see that here a choreographer 

04:05:21.373 --> 04:05:27.330
event happened and a traversal 
event was contained entirely 

04:05:27.331 --> 04:05:30.061
within that event and more 
things happened beneath.  This 

04:05:30.062 --> 04:05:36.080
is some stuff that's part of 
calculator app start up.  And 

04:05:36.081 --> 04:05:40.146
you will see a lot of these as 
you look through a trace.  Each 

04:05:40.660 --> 04:05:45.105
event corresponds to explicit 
placed in the Android code base 

04:05:45.106 --> 04:05:47.910
that somebody thought, hey, 
maybe somebody will need to 

04:05:47.911 --> 04:05:50.639
figure out that this is 
happening sometime.  It's good 

04:05:50.640 --> 04:05:56.586
to pay attention to these. 
   Now, let's zoom in at the 

04:05:56.990 --> 04:06:00.018
beginning or at the end of 
activity start.  So in this 

04:06:00.019 --> 04:06:03.156
trace we launched calculator and
 clicked a few buttons.  Here we

04:06:03.459 --> 04:06:07.194
 are at the end of activity 
start.  And I do you meaned in 

04:06:07.195 --> 04:06:10.228
really closely and it's still 
probably hard to see because 

04:06:10.661 --> 04:06:14.269
systrace has a lot of very small
 UI elements.  But is there are 

04:06:14.369 --> 04:06:19.804
these colored bars on top of the
 UI thread here.  These colored 

04:06:21.735 --> 04:06:26.586
bars represent the state of that
 thread at any point in time.  

04:06:26.865 --> 04:06:31.820
There are five different states 
that a thread can be in.  Now, 

04:06:32.202 --> 04:06:36.968
if we click the green bar above 
the UI thread in the middle, we 

04:06:36.969 --> 04:06:39.900
see that at this point the 
thread was running. 

04:06:39.901 --> 04:06:43.030
   So at this point, the thread 
is actually running on a CPU.  

04:06:43.119 --> 04:06:46.960
It's running on CPU one, and if 
we were to scroll back up to the

04:06:47.248 --> 04:06:50.224
 kernel section, you will see 
it's scheduled on CPU one.  This

04:06:50.225 --> 04:06:55.036
 is how you can know that our 
application is actually run at 

04:06:55.037 --> 04:07:00.298
particular times on the C PU. 
   The next state that we care 

04:07:00.807 --> 04:07:05.528
about is runnable.  Runnable 
means that your thread could 

04:07:05.529 --> 04:07:08.280
start running at some point in 
time.  Nothing is preventing 

04:07:08.655 --> 04:07:12.405
your thread from running.  It's 
just that the kernel has not 

04:07:12.406 --> 04:07:15.245
scheduled it yet.  There are any
 number of reasons why this 

04:07:15.246 --> 04:07:18.071
could happen.  Maybe there is 
more higher priority work.  

04:07:18.072 --> 04:07:22.614
Maybe your thread has just run 
for a really long time and the 

04:07:23.015 --> 04:07:25.013
scheduler is trying to be fair 
and give other threads an 

04:07:25.014 --> 04:07:28.049
opportunity to run. 
   There are lots of reasons for

04:07:28.865 --> 04:07:31.399
 this.  If you are seeing a lot 
of this in your application, 

04:07:31.596 --> 04:07:35.531
it's probably due to thread 
priority.  The third thing that 

04:07:35.742 --> 04:07:39.984
you can see on the right-hand 
side of the trace here is there 

04:07:40.174 --> 04:07:46.144
is a red bar.  And the red bar 
is uninterruptible sleep which 

04:07:46.145 --> 04:07:50.804
sounds a little scarier than it 
is.  Uninterruptible sleep is 

04:07:50.984 --> 04:07:55.495
your thread is blocked on some 
lock inside of the kernel. 

04:07:55.496 --> 04:07:58.241
   As an application developer, 
there is generally not too much 

04:07:58.328 --> 04:08:02.586
you can do with this.  Sometimes
 it's hardware related, 

04:08:02.587 --> 04:08:06.602
sometimes it has to do with 
memory.  Usually if you see a 

04:08:06.603 --> 04:08:13.162
lot of ininterruptable sleep, 
it's my fault.  It's a system 

04:08:13.542 --> 04:08:17.297
problem.  So we are  probably 
aware and trying to fix it, but 

04:08:17.298 --> 04:08:20.324
sometimes you can see it's 
related to memory.  You can get 

04:08:20.325 --> 04:08:27.672
more information about it. 
   The fourth type of state is a

04:08:27.871 --> 04:08:31.515
 special kind of uninterruptible
 sleep that as an application 

04:08:31.516 --> 04:08:35.032
developer you can actually do 
something about.  The orange 

04:08:35.033 --> 04:08:40.093
state here is your thread is 
sleeping on block I/O.  This 

04:08:40.094 --> 04:08:43.449
means that your thread is 
reading from disk and the disk 

04:08:43.450 --> 04:08:46.248
hasn't got be the results back 
to your thread, so your thread 

04:08:46.559 --> 04:08:50.799
can't make progress.  If you see
 a lot of this in your  trace, 

04:08:50.800 --> 04:08:54.265
you are reading too much data.  
Try not to read so much data. 

04:08:54.624 --> 04:08:57.791
   The fifth state, the last 
state is the state you will see 

04:08:57.792 --> 04:09:02.325
most often and it's usually 
white or gray depending on the 

04:09:02.326 --> 04:09:05.446
trace.  It means the thread is 
sleeping.  The thread has no 

04:09:05.447 --> 04:09:10.708
work to do so it is asleep.  
It's not running.  The scheduler

04:09:10.709 --> 04:09:14.426
 isn't trying to run it.  
Nothing is working on behalf of 

04:09:14.427 --> 04:09:16.550
the thread directly in the 
kernel or anything like that.  

04:09:16.551 --> 04:09:19.088
If you see this a lot and you 
think that's weird, it's 

04:09:20.496 --> 04:09:25.640
probably due to some user space 
lock interaction because user 

04:09:25.725 --> 04:09:27.780
space locks will show up as 
sleeping.

04:09:33.388 --> 04:09:36.710
with these colored bars that is 
really great is you can select 

04:09:36.711 --> 04:09:41.671
all of them in a region that you
 care about to get aggregate 

04:09:42.176 --> 04:09:46.917
information.  Here you can see 
we spent so much time sleeping 

04:09:46.918 --> 04:09:50.251
versus runnable versus running. 
 I do this constantly.  This 

04:09:50.252 --> 04:09:56.322
gives me a coarse idea 6  of 
what the bottleneck is for a 

04:09:57.023 --> 04:09:59.743
particular piece of code.  I can
 take a trace and see, hey, this

04:09:59.744 --> 04:10:03.595
 thread is running.  It's on the
 C PU.  It should be making 

04:10:03.877 --> 04:10:07.023
progress, but it's taking too 
long.  What's going on? 

04:10:07.024 --> 04:10:11.061
   It means that it just has too
 much CPU work to do.  If it's 

04:10:11.062 --> 04:10:14.694
getting CPU time and not running
 fast enough all you can do is 

04:10:14.695 --> 04:10:17.624
reduce the amount of CPU work it
 has to do.  If I take a trace 

04:10:17.815 --> 04:10:20.420
and see that a thread is always 
in block I/O.  I 

04:10:23.985 --> 04:10:24.889
know it's reading too much data 
from disk.  So don't read so 

04:10:24.890 --> 04:10:30.228
much data from disk. 
   If you are sleeping where you

04:10:30.229 --> 04:10:33.357
 don't expect, it probably means
 that your application logic is 

04:10:33.358 --> 04:10:36.294
a little weird somewhere.  You 
probably have some weird 

04:10:36.295 --> 04:10:42.330
priority inversion something or 
lock intention that you didn't 

04:10:42.331 --> 04:10:45.284
expect, something like that.  
Another useful tool on a trace 

04:10:45.285 --> 04:10:50.618
is I mentioned the input tag 
earlier.  And up  here at the 

04:10:50.619 --> 04:10:53.652
very top, there is this tiny 
little box for input response, 

04:10:53.956 --> 04:10:57.392
and this shows where I actually 
touched the screen in the trace.

04:10:57.393 --> 04:11:02.223
  So here I touched the screen 
and I guess my finger was down 

04:11:02.224 --> 04:11:05.461
for 28.8 milliseconds. 
   You can use that in the trace

04:11:05.556 --> 04:11:09.097
 similar to the highlighter.  
You can use that to orient 

04:11:09.098 --> 04:11:12.734
yourself in the trace.  You know
 what's going on if you remember

04:11:12.735 --> 04:11:17.370
 what you were doing while 
creating the  trace, you can 

04:11:17.562 --> 04:11:22.428
figure out where exactly you are
 logically inside that trace. 

04:11:22.796 --> 04:11:25.634
   Well, what if you need more 
information?  What if you have a

04:11:25.635 --> 04:11:28.165
 lot of information about what 
your app is doing logically that

04:11:28.345 --> 04:11:34.124
 you want to get in a trace?  
Good news.  That's  pretty easy.

04:11:34.125 --> 04:11:40.982
  There is a class, A ndroid.OS.
trace that has two methods, 

04:11:42.185 --> 04:11:44.909
beginning section and end 
session.  You can put a string 

04:11:45.325 --> 04:11:47.851
in begin section and that will 
show up as an event in the 

04:11:48.127 --> 04:11:50.660
trace.  It shows up the same as 
anything else. 

04:11:50.661 --> 04:11:53.945
   The only special thing you 
need to keep in mind here is you

04:11:53.946 --> 04:11:58.430
 need to call trace.end section 
from the same thread every time 

04:11:58.431 --> 04:12:01.475
you have a begin section.  If 
you don't have a one to one 

04:12:01.476 --> 04:12:05.803
mapping between begin section 
and end section your trace will 

04:12:05.804 --> 04:12:09.862
look word.  You will wet very 
weird rendering in your trace 

04:12:10.018 --> 04:12:15.490
and it's just because you forgot
 end section or you had too many

04:12:15.592 --> 04:12:18.315
 end sections. 
   If we take a trace and we 

04:12:18.316 --> 04:12:20.953
want to see the app events we 
have to do a little bit more 

04:12:21.050 --> 04:12:25.375
than we did initially.  First, 
we need to specify this app tag 

04:12:25.376 --> 04:12:29.293
as part of the arguments to the 
trace, and then we have to pass 

04:12:29.294 --> 04:12:33.354
dash A and the package name that
 you care about.  Then you just 

04:12:33.444 --> 04:12:40.297
take a normal trace like that, 
and you open it up, and you see 

04:12:40.931 --> 04:12:46.040
this trace event, which is just 
whatever you put in your string.

04:12:46.041 --> 04:12:51.701
  If you have logical groupings 
of work or a logical task that 

04:12:51.702 --> 04:12:56.377
the user is doing, a dding a 
straes event for that is really 

04:12:56.378 --> 04:12:59.271
useful. 
   When I look at large complex 

04:12:59.272 --> 04:13:03.903
applications within Google, I 
find that the applications I can

04:13:04.095 --> 04:13:07.145
 debug easily, and understand 
the performance of easily are 

04:13:07.146 --> 04:13:11.671
the ones that implement their 
own application trace events.  I

04:13:12.090 --> 04:13:15.325
 definitely recommend doing it. 
 It's not that difficult and it 

04:13:15.326 --> 04:13:18.267
will be worth it as you start 
looking at systrace.  It will 

04:13:18.545 --> 04:13:22.475
make systrace a lot more 
comprehensible. 

04:13:22.476 --> 04:13:27.919
   And for reading a trace, 
that's about it.  There is not 

04:13:27.920 --> 04:13:31.751
really that much going on in a 
trace.  It's just sort of what 

04:13:31.752 --> 04:13:34.479
the system is doing at any point
 in time.  And everything that 

04:13:34.480 --> 04:13:40.331
the system is doing at any point
 in time ends up looking like 

04:13:40.332 --> 04:13:45.966
this.  So now what?  I don't 
think most of you probably feel 

04:13:45.967 --> 04:13:50.631
that comfortable using systrace 
yet so why would we want to use 

04:13:51.932 --> 04:13:55.606
systrace?  What does systrace 
tell us that makes it says 

04:13:55.607 --> 04:13:57.380
useful. 
   Let's go back to the two 

04:13:57.381 --> 04:14:03.233
goals we had for people  Pixel, 
number one 60 frames pr second, 

04:14:03.234 --> 04:14:06.670
number two makes app start 
quickly.    Systrace could tell 

04:14:06.671 --> 04:14:10.209
us about this directly, but 
there is an underlying principle

04:14:10.515 --> 04:14:14.047
 we should call out. 
   Don't look slow.  That's it. 

04:14:14.328 --> 04:14:18.914
 That's really the only 
performance rule there is.  The 

04:14:18.915 --> 04:14:24.032
reason why we use systrace is it
 can tell us where we look slow 

04:14:24.216 --> 04:14:29.164
and note that I said don't look 
slow.  I didn't say don't be 

04:14:29.165 --> 04:14:31.684
slow.  This may sound weird 
coming from a person who works 

04:14:32.107 --> 04:14:37.041
on performance, but for any 
moderately complex application, 

04:14:37.042 --> 04:14:40.585
at some point in time, you are 
going to have to do something 

04:14:40.586 --> 04:14:43.701
that is slow. 
   Maybe you are going to do 

04:14:43.702 --> 04:14:47.127
some giant matrix multiply for 
some reason, maybe you are going

04:14:47.337 --> 04:14:50.555
 to read from disk, you have to 
read a large image, maybe you 

04:14:50.753 --> 04:14:56.092
have to talk to the network 
which could take who knows how 

04:14:56.093 --> 04:14:59.949
long.  At that point, you want 
to understand why did the system

04:15:00.257 --> 04:15:04.387
 end up looking slow when I was 
doing this?  And then what can I

04:15:04.788 --> 04:15:07.918
 do to washing around this? 
   You know you have to do the 

04:15:07.919 --> 04:15:11.637
slow thing, what can you do in 
your application to identify 

04:15:11.828 --> 04:15:15.269
where exactly that slow point 
happened and then work around it

04:15:15.463 --> 04:15:19.525
 to make the system still look 
fast because that's all the user

04:15:19.526 --> 04:15:23.451
 cares about.  They don't care 
if the system is slow soar is 

04:15:23.452 --> 04:15:26.896
fast.  They just want the system
 to feel fast.  If you do that, 

04:15:27.078 --> 04:15:29.078
it will 

04:15:31.097 --> 04:15:32.628
be great. 
   Now, let's apply that to the 

04:15:32.629 --> 04:15:34.629
two goals that we

04:15:36.353 --> 04:15:40.995
 have.  App start up, the basic 
thing with systrace and app 

04:15:40.996 --> 04:15:44.141
start up you can use systrace to
 figure out exactly where your 

04:15:44.342 --> 04:15:47.853
time is going during app start 
up and then you can decide what 

04:15:48.051 --> 04:15:52.599
to do about it.  There is no one
 size fits all advice here.  You

04:15:52.600 --> 04:15:54.632
 have to understand what your 
particular application is doing,

04:15:54.633 --> 04:15:58.769
 what is needs of your 
application are, and then you 

04:15:58.770 --> 04:16:00.770
can come up with a 

04:16:03.274 --> 04:16:06.527
solution.  The first thing we 
use systrace for to analyze app 

04:16:06.528 --> 04:16:10.057
start up is inflation. 
   Here we have this inflate 

04:16:10.058 --> 04:16:13.081
section in a trace.  This is 
from the very beginning of 

04:16:13.082 --> 04:16:16.619
calculator from activity start 
in calculator.  And we have this

04:16:16.937 --> 04:16:20.946
 really long inflate section, 
but more importantly we can see 

04:16:20.947 --> 04:16:25.711
the exact cost of inflating 
every view for calculator.  This

04:16:26.108 --> 04:16:29.454
 is really u seful to help you 
figure out the cost of a view 

04:16:30.078 --> 04:16:35.720
hierarchy or  changing a view 
hierarchy.  You can say is it 

04:16:36.906 --> 04:16:39.467
actually worth 50 milliseconds 
to inflate these views right 

04:16:39.852 --> 04:16:42.282
now?  Could I do this later?  
Could I do something else 

04:16:42.977 --> 04:16:45.413
instead?  You have to come up 
with whatever solution is right 

04:16:45.414 --> 04:16:48.445
for your application but 
systrace can help you figure out

04:16:48.446 --> 04:16:51.563
 what is happening today in your
 application. 

04:16:51.564 --> 04:16:55.205
   So you can come up with those
 improvements and ideas for 

04:16:55.403 --> 04:16:57.403
future changes to your 

04:16:59.725 --> 04:17:02.862
app.  Another thing that 
systrace tells you is you can 

04:17:02.863 --> 04:17:04.863
tell exactly when 

04:17:08.200 --> 04:17:10.509
applications start up ended from
 the user point of view.  There 

04:17:10.510 --> 04:17:13.366
is more than bind application 
activity start and application 

04:17:13.367 --> 04:17:16.375
start up.  Here you can see the 
UI thread and render thread of 

04:17:16.376 --> 04:17:19.515
the application which are the 
two most important threads in 

04:17:19.516 --> 04:17:23.351
making your application run at 
60 frames per second, and we 

04:17:23.352 --> 04:17:27.710
know that once those threads 
have finished for the first 

04:17:27.711 --> 04:17:34.856
time, here you can see the UI 
thread running and finishing 

04:17:34.857 --> 04:17:37.681
this choreographer frame along 
with the render thread running 

04:17:37.682 --> 04:17:41.502
at the same time.  Once that's 
done the app is loaded and ready

04:17:41.503 --> 04:17:46.451
 for user input.  At that point 
from the user's point of view, 

04:17:46.753 --> 04:17:48.753
app startup is done.

04:17:53.509 --> 04:17:59.863
systrace is the resource tag, 
res.  So you can look at exactly

04:17:59.864 --> 04:18:02.483
 what resources you are loading 
in your application at any point

04:18:02.683 --> 04:18:06.421
 in time.  Usually loading 
resources is

04:18:10.764 --> 04:18:14.564
 not a huge deal.  Occasionally 
we have seen areas where 

04:18:10.764 --> 04:18:12.570
resource loading can be e 
xpensive.  It's worth checking 

04:18:12.571 --> 04:18:16.317
in your application.  It will 
tell you just as the name of an 

04:18:16.318 --> 04:18:20.838
event exactly what resource you 
are loading and how long it  

04:18:21.770 --> 04:18:24.572
takes.  And, again, you can 
figure out is it worth loading 

04:18:24.573 --> 04:18:33.616
this resource right now?
   All right.  Let's move to 

04:18:33.617 --> 04:18:38.357
jank because that's the fun one.
  Fixing jank with systrace is a

04:18:38.659 --> 04:18:41.302
 two accept process.  You need 
to figure out where the jank 

04:18:41.303 --> 04:18:43.920
actually happens because maybe 
you can spot every time the 

04:18:43.921 --> 04:18:47.774
system doesn't run at 60 per 
second, but I have been doing 

04:18:48.171 --> 04:18:52.709
this full time for a while now, 
I can't even do that.  So 

04:18:52.710 --> 04:18:57.943
systrace can help make it really
 obvious where exactly you 

04:18:57.944 --> 04:19:01.119
dropped a frame.  The second 
step that you use systrace for 

04:19:01.198 --> 04:19:04.625
is working your way backwards 
from the dropped frame to what 

04:19:04.626 --> 04:19:06.940
actually went wrong, and then 
you can figure out what to do 

04:19:06.941 --> 04:19:12.899
about it.  So here we have a UI 
thread and render thread again 

04:19:13.205 --> 04:19:16.221
in an application, and we are 
running the thread or the 

04:19:16.541 --> 04:19:21.393
application normally, it's not a
 janky frame it's just normal 60

04:19:21.394 --> 04:19:25.303
 frame per second rendering. 
   The UI thread is the main 

04:19:25.504 --> 04:19:28.341
application thread.  That's what
 actually g ets, you know, input

04:19:28.752 --> 04:19:31.884
 events from system server.  
Render thread actually gets 

04:19:31.885 --> 04:19:35.919
information from the UI thread 
and sends that to the GPU.  This

04:19:35.920 --> 04:19:39.758
 means that in order to display 
a frame on time, the UI thread 

04:19:39.942 --> 04:19:43.793
and the render thread have to 
complete within 16.7 

04:19:43.794 --> 04:19:48.843
milliseconds every time.  This 
gives sis rase a nice kind of 

04:19:49.317 --> 04:19:55.280
rhythm.  You can get used to 
this rhythm when you open a 

04:19:55.281 --> 04:19:57.931
systrace and say, oh, yes, I 
dropped a frame there because 

04:19:57.932 --> 04:20:04.070
you can tell it didn't quite 
line up.  It makes it easy to 

04:20:04.071 --> 04:20:09.991
spot where the UI pipeline 
didn't run at a full 60 frames 

04:20:09.992 --> 04:20:13.140
per second once you get used to 
this. 

04:20:13.141 --> 04:20:15.141
   Now, if that's not 

04:20:19.677 --> 04:20:23.114
enough, you can look at surface,
 we don't have time to go 

04:20:23.115 --> 04:20:27.200
through the full pipeline but 
the high level overview is your 

04:20:27.201 --> 04:20:31.404
Apple run a frame and it will 
send the frame to surface 

04:20:32.796 --> 04:20:36.432
slinger.  Surface slinger will 
take whatever app is rendering 

04:20:36.433 --> 04:20:38.844
on the screen and it will 
combine that with the navigation

04:20:38.845 --> 04:20:42.881
 bar and the status bar and 
actually send the resulting full

04:20:43.379 --> 04:20:47.018
 complete the composited frame 
to the display to show up on the

04:20:47.660 --> 04:20:49.957
 screen. 
   What this means is that 

04:20:50.141 --> 04:20:55.617
surface slinger is the central 
source of truth.  If surface 

04:20:55.618 --> 04:20:59.440
slinger thinks you hit your 
frame  deadline, you are running

04:20:59.935 --> 04:21:03.386
 at 60 frames were second.  If 
surface slinger says you didn't 

04:21:03.789 --> 04:21:07.228
deliver a frame you know you 
didn't hit 60 frames per second 

04:21:07.229 --> 04:21:09.850
and here the way we can do that 
is we have a counter here.  

04:21:10.056 --> 04:21:14.191
There is one counter here per 
application in a trace.  This 

04:21:14.192 --> 04:21:18.442
counter here is alternating 
between zero and one for how 

04:21:18.707 --> 04:21:21.888
many frames the surface slinger 
have from this application that 

04:21:22.103 --> 04:21:27.220
are ready to be displayed. 
   So you know that if the 

04:21:27.453 --> 04:21:32.152
counter goes to zero for more 
than 16 milliseconds, you have 

04:21:32.153 --> 04:21:37.797
definitely missed a frame.  This
 is the ultimate way to know 

04:21:39.459 --> 04:21:43.450
whether you had jank in your 
application or not. 

04:21:43.451 --> 04:21:47.796
   This gets us, this helps us 
spot where the problem is.  It 

04:21:47.797 --> 04:21:53.538
helps us know where you actually
 dropped the frame.  So what do 

04:21:53.836 --> 04:21:57.094
you do when you know where the 
problem is and you are going to 

04:21:57.288 --> 04:22:01.937
work your way backwards?  So we 
are going to look at surface 

04:22:01.938 --> 04:22:05.170
slinger to work your way 
backwards.  We are looking at 

04:22:05.171 --> 04:22:08.887
surface slinger as an example of
 a relatively simple chain here 

04:22:08.888 --> 04:22:11.510
because application chains can 
be more complicated.  We don't 

04:22:11.511 --> 04:22:14.484
quite have time. 
   But usually you want to know 

04:22:14.962 --> 04:22:19.599
why something woke up.  So we 
have a running state in the 

04:22:19.600 --> 04:22:22.624
application, and we want to know
 what made it r unnable because 

04:22:22.625 --> 04:22:25.468
that will tell us why the thread
 woke up in the first place.  So

04:22:25.776 --> 04:22:30.601
 here I click the running state 
on top of surface slinger and I 

04:22:30.602 --> 04:22:34.152
can look at the left arrow and 
see the runnable state. 

04:22:34.153 --> 04:22:37.190
   Now, I have the runnable 
state selected and I want to go 

04:22:37.191 --> 04:22:40.720
ahead and highlight that.  You 
can highlight anything you 

04:22:40.721 --> 04:22:43.844
currently have selected with the
 M key. 

04:22:43.845 --> 04:22:46.278
   Now, we have a nice little 
bar showing what we are looking 

04:22:46.677 --> 04:22:52.013
at on the trace.  In this 
runnable section, we have an 

04:22:52.513 --> 04:22:54.955
additional argument at the 
bottom here.  It says wake up 

04:22:55.154 --> 04:23:02.306
from TID529.  This means that 
the surface slinger thread was 

04:23:02.307 --> 04:23:06.648
triggered by thread 529.  Now, I
 don't know what thread 529 is, 

04:23:06.649 --> 04:23:12.409
but I do know that thread 529 
must be running at this point 

04:23:12.794 --> 04:23:17.124
because if thread 529 wasn't 
running it couldn't have woken 

04:23:17.125 --> 04:23:20.063
up surface slinger.  So I can 
scroll back up to the top of the

04:23:20.064 --> 04:23:23.806
 trace to see what is actually 
running on the CPU.  And I see 

04:23:24.196 --> 04:23:27.814
this thing event thread. 
   So I will click event thread.

04:23:27.815 --> 04:23:31.067
  And event thread is part of 
surface slinger.  It's another 

04:23:31.068 --> 04:23:34.611
thread inside of the surface 
slinger process.  And now I want

04:23:34.831 --> 04:23:37.732
 to know what woke up that event
 thread because I'm w orking my 

04:23:38.049 --> 04:23:42.174
way backwards from, to figure 
out why surface slinger woke up 

04:23:42.561 --> 04:23:47.612
at all here.  So I will scroll 
back down and find event thread 

04:23:47.613 --> 04:23:54.164
inside of surface slinger and 
there is the actual thread state

04:23:54.165 --> 04:23:59.137
 for the event thread.  We just 
had that little colored bar to 

04:23:59.138 --> 04:24:01.144
show it's running because it 
doesn't have any events during 

04:24:01.145 --> 04:24:04.252
that time.  We can click the 
runnable section of the event 

04:24:04.253 --> 04:24:10.410
thread and see that it woke up 
from thread 4568.  Now, I 

04:24:10.935 --> 04:24:17.105
cheated.  I know I what thread 
4568 is.  It's the display sync 

04:24:17.271 --> 04:24:20.897
thread that is also in surface 
slinger.  Let's go to that one 

04:24:20.898 --> 04:24:24.529
and see what woke up the display
 sync thread.  That's right down

04:24:25.054 --> 04:24:26.656
 there. 
   We click it.  We see wake up 

04:24:26.657 --> 04:24:34.022
from TID zero.  TID zero is a 
special thing in a trace and is 

04:24:34.023 --> 04:24:37.439
it, all it means is that 
whatever thread you are looking 

04:24:37.440 --> 04:24:42.394
at was woken up by an interrupt 
of some sort.  It was woken up 

04:24:42.395 --> 04:24:47.144
by an interrupt handler.  
Usually this means a timer 

04:24:47.145 --> 04:24:50.803
expired.  This makes sense for 
surface slinger.  Surface 

04:24:50.804 --> 04:24:53.918
slinger will run every 16 
milliseconds so a timer expired.

04:24:53.919 --> 04:24:57.448
  Woke up this display 
synchronization thread which in 

04:24:57.449 --> 04:25:02.396
turn woke up the event thread 
which woke up surface slinger. 

04:25:02.472 --> 04:25:06.422
   If you see this in your trace
 it usually means that some 

04:25:06.423 --> 04:25:10.950
timer expired and woke up your 
thread and that's why you are 

04:25:10.951 --> 04:25:13.996
running.  And that's it.  That's
 the basics of what you need to 

04:25:14.389 --> 04:25:18.717
know to actually get somewhere 
with systrace.  Take some traces

04:25:18.929 --> 04:25:21.666
 of your application and just 
try to see what's going on.  

04:25:22.182 --> 04:25:25.694
Look at the system.  Look at how
 frames are being drawn, and 

04:25:25.695 --> 04:25:31.544
sent to the display and how you 
are getting touch input from the

04:25:32.052 --> 04:25:34.178
 server. 
   This kind of tracing 

04:25:34.179 --> 04:25:38.301
backwards via the runnable state
 is most of what we do to 

04:25:38.302 --> 04:25:41.130
understand how the system fits 
together.  And you can use it to

04:25:41.326 --> 04:25:44.547
 improve your applications as 
well. 

04:25:44.754 --> 04:25:50.416
   Now, if you want a lot more 
advice on what you should do as 

04:25:50.417 --> 04:25:54.237
opposed to how to understand 
what's going on today, I 

04:25:54.238 --> 04:25:59.286
recommend you go to the, there 
is an additional Android 

04:25:59.287 --> 04:26:04.013
performance talk on the UI 
pipeline that Chet Haas and 

04:26:04.014 --> 04:26:09.271
Chris crake are giving Friday at
 1:30.  So go to that.  Know 

04:26:09.272 --> 04:26:12.428
they will talk about recycler 
view and optimizations there 

04:26:12.429 --> 04:26:14.643
which is always a popular topic.

04:26:14.644 --> 04:26:16.973
   So that's it.  Thank you.
   (Applause).

04:26:23.394 --> 04:26:29.036
     (Concluded at 7:38CT).

04:30:30.888 --> 04:30:32.888
   &gt;

04:30:36.619 --> 04:30:36.698
&gt;

04:30:36.699 --> 04:30:39.232
   SAN JOSE, CALIFORNIA
   MAY 17, 2017

04:30:36.699 --> 04:30:38.232
   7:00 PM CT
   STAGE 2

04:30:36.699 --> 04:30:36.787
   ANDROID PERFORMANCE: AN 
OVERVIEW

04:30:36.788 --> 04:30:37.788
   TE94CD

04:30:36.788 --> 04:30:39.921
   Services Provided By:
    Caption First, Inc.

04:30:36.788 --> 04:30:39.388
    P.O. Box 3066
    Monument, CO 80132

04:30:36.788 --> 04:30:39.454
    800-825-5234
    Www.captionfirst.com

04:30:40.721 --> 04:30:44.521
   This text is being provided 
in a rough draft format.  

04:30:40.721 --> 04:30:44.787
Communication Access Realtime 
Translation (CART) is provided 

04:30:40.721 --> 04:30:44.387
in order to facilitate 
communication accessibility and 

04:30:40.721 --> 04:30:44.454
may not be a totally verbatim 
record of the proceedings.

04:30:40.721 --> 04:30:40.800
   * * * 

04:30:40.801 --> 04:30:41.801
   &gt;&gt;
   &gt;&gt;

04:30:40.801 --> 04:30:41.801
   &gt;&gt;
   &gt;&gt;

04:30:40.801 --> 04:30:41.801
   &gt;&gt;
   &gt;&gt;

04:30:40.801 --> 04:30:41.801
   &gt;&gt;
   &gt;&gt;

04:30:40.801 --> 04:30:41.801
   &gt;&gt;
   &gt;&gt;

04:30:40.801 --> 04:30:42.801
   &gt;&gt;

04:47:51.087 --> 04:47:52.087
   &gt;&gt;
   &gt;&gt;

04:47:56.795 --> 04:48:01.824
welcome to the AMP keynote in 
Google I/O 2017.  If you have 

04:48:01.825 --> 04:48:04.695
gob all the way you have made it
 to the fourth keynote so while 

04:48:05.374 --> 04:48:10.564
we can't guarantee you this will
 be the most exciting one we can

04:48:10.907 --> 04:48:15.737
 guarantee it will be the 
fastest because we are the AMP 

04:48:15.738 --> 04:48:20.439
team.  We are, Chen Shay, Elena 
Legeros and I'm Malte Ubl.  So 

04:48:20.660 --> 04:48:25.797
thanks for coming.  So what is 
AMP?  In a nutshell, open source

04:48:25.798 --> 04:48:29.637
 project for creating super fast
 Web pages.  Behave been around 

04:48:29.638 --> 04:48:33.565
for a while and wanted to give 
you a quick year view of how 

04:48:33.566 --> 04:48:35.769
things started.
   &gt;&gt; So AMP was release the as 

04:48:36.177 --> 04:48:41.554
a developer preview in October 
2015 and then in February 2016 

04:48:41.555 --> 04:48:46.362
for the first time it was 
released to consumers as the AMP

04:48:46.363 --> 04:48:50.417
 top stories carousel on Google 
Search.  You might have seen 

04:48:50.621 --> 04:48:53.900
this before.  There is this 
contrary row sell and you type 

04:48:53.901 --> 04:48:57.328
it, apps instantly, you can 
swipe through the stuff.  So 

04:48:57.527 --> 04:49:03.761
this was the first time AMP came
 to users.  Later that year in 

04:49:03.762 --> 04:49:08.021
the summer of 2016 we announced 
a project alled AMP adds that we

04:49:08.258 --> 04:49:10.513
 are going to talk about later 
today.  Then in September of 

04:49:10.514 --> 04:49:12.514
that year, 

04:49:14.484 --> 04:49:18.199
AMP became eligible for all 
Google Search results in 2017 we

04:49:18.200 --> 04:49:20.907
 had the first ever AMP 
conference, if you haven't been 

04:49:21.387 --> 04:49:24.437
there, you should come to the 
next one.  It was really nice 

04:49:24.438 --> 04:49:27.175
and today I'm excited to 
announce that the top service 

04:49:27.176 --> 04:49:30.772
carousel that used to be only 
available in some countries is 

04:49:30.773 --> 04:49:32.980
available worldwide in every 
single country where Google 

04:49:33.318 --> 04:49:35.318
Search is serving Web traffic.
   (Applause).

04:49:42.172 --> 04:49:45.443
we want to talk about today is 
AMP across publishing and 

04:49:45.444 --> 04:49:48.930
platforms.  The topic we are 
most excited about now, AMP and 

04:49:50.053 --> 04:49:54.631
eCommerce.  Since progressive 
Web  Web Apps are a thing at I/O

04:49:54.632 --> 04:49:58.029
 we want to talk about how they 
relate to AMP.  We will be open 

04:49:58.030 --> 04:50:00.656
with the challenges the project 
is facing and how we are 

04:50:00.981 --> 04:50:05.903
addressing them and finally we 
will talk about AMP adds.  Let's

04:50:05.904 --> 04:50:10.807
  take a little bit of time to 
talk about why AMP is a thing.  

04:50:10.808 --> 04:50:16.640
What we found is that Web pages 
sometimes load slowly on 3G we 

04:50:16.866 --> 04:50:20.335
are seeing an average of 19 
ekdz. 

04:50:20.336 --> 04:50:24.830
   Every second of load time 
conversion rates drop by 7%.  

04:50:29.416 --> 04:50:32.917
Similarly bandwidth is a problem
 with mobile.  There are some 

04:50:33.591 --> 04:50:37.737
countries where a megabyte of 
data might cost up to 5% of a 

04:50:37.738 --> 04:50:41.895
person's monthly wage.  On the 
other hand, we see for aim AMPs 

04:50:41.896 --> 04:50:45.951
using almost a megabyte of data 
and that cannot work as an 

04:50:46.275 --> 04:50:48.574
economic model.  It doesn't fit 
together.  So this can be 

04:50:49.010 --> 04:50:52.718
summarized as the Web not 
meeting user expectations. 

04:50:52.719 --> 04:50:55.699
   That's really where AMP comes
 in.  We want to get in line 

04:50:56.237 --> 04:51:00.498
with those user expectations.  
So what is AMP doing to fix it? 

04:51:00.499 --> 04:51:05.876
 A year ago I was on stage here 
and I announced this metric 

04:51:06.105 --> 04:51:08.583
which was nice.  What we are 
seeing is that loaded from 

04:51:08.584 --> 04:51:13.631
Google Search, AMP pages were 
loading at the Median in under 

04:51:13.733 --> 04:51:16.357
one second and that's a good 
number.  It's nice to see that 

04:51:16.471 --> 04:51:20.310
this is actually remained 
consistent as the corpus of AMP 

04:51:20.311 --> 04:51:22.708
pages has been growing 
tremendously, but I'm very 

04:51:23.028 --> 04:51:27.065
excited to announce that as of 
this week we are launching an 

04:51:27.066 --> 04:51:32.882
advancement that will make all 
AMP pages across this large 

04:51:33.298 --> 04:51:35.378
corpus get twice as fast.  The 
metric we are

04:51:38.662 --> 04:51:42.407
 optimizing --
   (Applause). 

04:51:42.408 --> 04:51:44.408
   Is the first

04:51:46.132 --> 04:51:48.641
 contentful.  So that's the 
first time the browser draws 

04:51:48.952 --> 04:51:51.464
something that's interesting.  
For a news article, for example,

04:51:51.577 --> 04:51:56.067
 that would be the text.  We 
have done other things to 

04:51:56.068 --> 04:52:01.598
optimize performance.  Many Web 
pages use the typical average 

04:52:02.741 --> 04:52:06.448
Web page 60% of the bytes for 
images.  We have managed to 

04:52:06.449 --> 04:52:10.622
reduce byte usage across this 
entire corpus by 50%.  So this 

04:52:10.920 --> 04:52:14.781
is done using compression, but 
at a level where it doesn't have

04:52:14.782 --> 04:52:18.969
 visual impact and, for example,
 for P and Gs, there is no 

04:52:19.477 --> 04:52:22.665
visual difference.  It's just 
metadata removed.  So across 

04:52:22.974 --> 04:52:26.481
this wide corpus we are getting 
50% less bytes so thinking back 

04:52:26.806 --> 04:52:29.869
for, you know, that data might 
be expensive, I think this is 

04:52:30.642 --> 04:52:34.027
really, really good for users.
   &gt;&gt; Similarly, you mise have 

04:52:34.134 --> 04:52:38.943
heard about a thing called broad
 leaf.  It's swies bread and the

04:52:39.157 --> 04:52:44.079
 name of a new compression 
standard Google securic which is

04:52:44.192 --> 04:52:47.042
 better than the nominal 
standard that probably all of 

04:52:47.043 --> 04:52:50.661
you are hopefully using.  We 
have activated this for the 

04:52:50.662 --> 04:52:53.406
Google M cache for all 
documents.  What we are seeing 

04:52:53.501 --> 04:52:56.894
now is a 10 fears reduction in 
bytes for documents.  And we 

04:52:56.895 --> 04:53:00.057
think we can do a little bit 
better over the next weeks or, 

04:53:00.058 --> 04:53:04.322
so but I think it's a great 
first step.  So this is what we 

04:53:04.429 --> 04:53:07.830
were doing in terms of 
performance.  I want to ask 

04:53:07.831 --> 04:53:11.233
Elena Legeros on stage to talk 
about AMP traction across 

04:53:12.136 --> 04:53:14.136
content publishers. 
   &gt;&gt; ELENA LEGEROS:  Thanks so 

04:53:14.292 --> 04:53:21.386
much Malte Ubl.  Wow!  This is 
my very first I/O and I am super

04:53:21.595 --> 04:53:24.119
 excited to be here.  Over the 
past year and a half, I have had

04:53:24.120 --> 04:53:29.410
 the opportunity to work with a 
lot of publishers and talk to 

04:53:29.697 --> 04:53:34.845
them about their experiences on 
AMP.  And I have heard their u 

04:53:34.846 --> 04:53:38.133
ps and their downs, and talked 
to them about both their 

04:53:38.672 --> 04:53:42.632
successes and their challenges. 
   Overall, I have gotten the 

04:53:43.267 --> 04:53:47.990
message that AMP is really 
working for publishers.  So just

04:53:47.991 --> 04:53:53.993
 for some context, since launch,
 publishers have created over 2 

04:53:53.994 --> 04:54:00.882
billion AMP documents across 
more than 900,000 domains.  Up 

04:54:00.883 --> 04:54:04.153
to 35 million AMP documents are 
created across more than 200 

04:54:04.613 --> 04:54:10.518
countries and in more than 100 
languages every week.  Every 

04:54:11.503 --> 04:54:15.560
second 58 AMP pages are released
 into the wild.  That's 

04:54:15.561 --> 04:54:19.355
significant. 
   And while we continue to see 

04:54:19.356 --> 04:54:23.745
a lot of new news publishers 
adopting AMP or creating AMP 

04:54:24.084 --> 04:54:29.005
pages for their websites, we are
 really enthusiastic about the 

04:54:29.006 --> 04:54:33.259
traction among other areas like 
eCommerce and travel and food 

04:54:33.260 --> 04:54:39.084
and other diverse categories of 
websites from around the world. 

04:54:39.509 --> 04:54:41.509
   When 

04:54:42.674 --> 04:54:43.997
we first or when AMP first 
launched, publishers wanted to 

04:54:43.998 --> 04:54:48.451
know why they should devote 
their resources to building AMP 

04:54:48.778 --> 04:54:53.291
pages for their websites.  They 
understood that AMP was fast.  

04:54:53.292 --> 04:54:57.770
That was  really plain to see. 
   But they wanted to know what 

04:54:57.771 --> 04:55:01.719
they were going to get out of 
it.  So I want to take a few 

04:55:01.720 --> 04:55:06.434
minutes to show a few examples 
of what a few publishers have 

04:55:07.063 --> 04:55:12.993
gotten out of AMP, just a few 
successes.  First, The Weather 

04:55:12.994 --> 04:55:17.225
Channel has seen a 4X increase 
in click through rates on AMP 

04:55:17.226 --> 04:55:22.176
articles into their main site up
 from 21% to 90% since launching

04:55:22.177 --> 04:55:27.213
 at the beginning of the year.  
Having instant access to 

04:55:27.868 --> 04:55:33.321
information like where to expect
 golf-ball sized hail like the 

04:55:33.322 --> 04:55:35.404
hail seen in this screen shot, 
is really valuable to people.  

04:55:36.173 --> 04:55:39.547
And The Weather Channel gets 
that.  And AMP is clearly paying

04:55:39.786 --> 04:55:41.786
 off for them.

04:55:48.421 --> 04:55:54.220
resource for -- Terra offered 
information to people across 

04:55:54.996 --> 04:55:59.458
Spain, and the U.S.  After 
ilding AMP pages for their 

04:55:59.459 --> 04:56:03.409
websites they saw people 
spending twice as much time on 

04:56:03.410 --> 04:56:06.912
air AMP pages compared to their 
regular mobile pages.  They also

04:56:06.913 --> 04:56:12.703
 so you a 33% increase on click 
through rates on ads. 

04:56:12.704 --> 04:56:14.704
   That's

04:56:16.322 --> 04:56:23.109
 huge.  And the Singapore-based 
Wigo.com is the largest travel 

04:56:23.756 --> 04:56:26.710
marketplace in the Middle East 
and Asia Pacific helping people 

04:56:27.055 --> 04:56:29.987
compare travel costs from 
hundreds of global and local 

04:56:29.988 --> 04:56:33.718
partners.  She created AMP 
versions of landing pages that 

04:56:33.719 --> 04:56:37.203
were designed to support popular
 search queries like cheap 

04:56:37.766 --> 04:56:40.269
flights from Singapore to 
Bangkok. 

04:56:40.270 --> 04:56:43.683
   And what they found was that 
conversion rates to partner 

04:56:44.545 --> 04:56:51.220
sites went up 95%.  And search 
to conversion rates improved by 

04:56:51.221 --> 04:56:55.906
49% which completely validated 
their effort.  So we have been 

04:56:55.907 --> 04:57:00.407
really impressed by the success 
publishers have seen on AMP, and

04:57:00.737 --> 04:57:06.008
 we keep hearing more and more 
stories like these. 

04:57:06.009 --> 04:57:09.908
   So far we have talked about 
the amazing growth of publishers

04:57:10.027 --> 04:57:13.957
 and the performance they have 
seen on AMP.  Another critical 

04:57:13.958 --> 04:57:20.006
component of AMP is that it is 
open to all platforms on the 

04:57:20.007 --> 04:57:23.048
Internet.  And already a lot of 
platforms are supporting AMP.  

04:57:23.268 --> 04:57:27.187
We have seen  adoption from 
search engines to mobile apps 

04:57:27.299 --> 04:57:33.658
and there they are an essential 
part of the AMP community, bing,

04:57:33.992 --> 04:57:39.576
  Pinterest and linked in or 
linking to aim pages and 

04:57:39.577 --> 04:57:42.085
pointing users to a great, 
consistently fast experience. 

04:57:42.192 --> 04:57:45.688
   And recently a few new 
platforms joined the AMP family 

04:57:45.689 --> 04:57:49.729
which we are excited about.  
Yahoo! Japan as well as China's 

04:57:50.181 --> 04:57:56.074
largest search engines, Sogo and
 Baidu are all connecting to AMP

04:57:56.417 --> 04:57:58.931
 pages from their search r 
esults bringing over a billion 

04:57:59.477 --> 04:58:02.121
people across Asia a faster Web 
experience.

04:58:10.095 --> 04:58:17.016
AMP has gone social in China.  
10-cents Q zone as well as 

04:58:17.017 --> 04:58:19.856
Weibo, the top two social 
networking platforms in China 

04:58:20.051 --> 04:58:22.782
are bringing the benefits of the
 AMP experience to their 

04:58:22.783 --> 04:58:29.118
hundreds of millions of monthly 
active users.  Q zone and Weabu 

04:58:29.119 --> 04:58:33.508
together with baidu and Sogo 
will enable almost all of the 

04:58:33.834 --> 04:58:38.883
mobile Internet users in China 
to experience the speed of  AMP.

04:58:44.123 --> 04:58:46.960
social platform a little closer 
to home, we are thrilled to 

04:58:46.961 --> 04:58:51.771
share that in the coming weeks, 
Tumblr is rolling out support 

04:58:51.772 --> 04:58:54.841
for AMP on more than 340 million
 of their blog

04:58:59.323 --> 04:59:03.152
 pages.  But those aren't all of
 our announcements.  Nothing is 

04:59:03.476 --> 04:59:06.883
more important to Twitter than 
getting users to the content 

04:59:07.101 --> 04:59:11.248
that they are looking to reach 
quickly.  They were an early 

04:59:11.905 --> 04:59:15.596
supporter of the AMP project l 
aunching in their moments 

04:59:16.176 --> 04:59:20.340
product in 2016.  And we are 
thrilled to announce that 

04:59:20.341 --> 04:59:24.831
Twitter is rolling out support 
to the full feed on mobile Web 

04:59:24.832 --> 04:59:29.282
and on their Android and iOS 
native apps bringing the 

04:59:29.283 --> 04:59:32.723
benefit, all of the benefits of 
AMP to the world of social 

04:59:32.724 --> 04:59:37.708
discovery. 
   It's so encouraging to see 

04:59:37.709 --> 04:59:41.643
platforms from around the world 
embracing AMP like this because,

04:59:41.644 --> 04:59:46.039
 again, AMP is all about a 
community coming together and 

04:59:46.040 --> 04:59:49.413
working together to improve the 
mobile Web for everyone.  And 

04:59:49.414 --> 04:59:53.812
with that, I will pass it to 
Chen Shay.

04:59:58.325 --> 04:59:59.819
   (Applause). 
   &gt;&gt; CHEN SHAY:  Hey, everyone!

04:59:59.820 --> 05:00:05.746
  We are happy to announce that 
AMP is open for business.  Now, 

05:00:06.066 --> 05:00:09.990
when AMP first started, we 
targeted news publishers, but 

05:00:09.991 --> 05:00:13.372
over the last year, we have seen
 a wide adoption of AMP across a

05:00:13.713 --> 05:00:19.295
 variety of different verticals 
from recipes to health to 

05:00:19.296 --> 05:00:22.678
dictionaries, and as we were 
looking at all of these AMP 

05:00:22.679 --> 05:00:25.544
documents, we realizes that 
while AMP is great for reading 

05:00:25.644 --> 05:00:31.874
the news, AMP is even better for
 shopping on the Internet 

05:00:32.295 --> 05:00:37.903
because AMP is focused on speed 
and performance and shoppers are

05:00:37.904 --> 05:00:40.306
 won and lost in the span of a 
second. 

05:00:40.307 --> 05:00:44.775
   You see, it wasn't that long 
ago when I was a new mom, and I 

05:00:44.776 --> 05:00:50.259
was really struggling to figure 
out my new life and to put 

05:00:50.260 --> 05:00:54.081
things nicely, I really didn't 
have it together.  I spent the 

05:00:54.082 --> 05:01:00.218
first few weeks in my house in 
my pajamas, did not know how to 

05:01:00.219 --> 05:01:04.587
make things work. 
   But I was lucky to be able to

05:01:04.588 --> 05:01:11.366
 make all of my purchases online
 on my mobile phone, everything 

05:01:11.582 --> 05:01:15.725
from ordering diapers to booking
 plane tickets to see family to 

05:01:15.726 --> 05:01:20.882
buying food on line.  But the 
thing is it had to be done very 

05:01:22.742 --> 05:01:26.890
quickly because if my baby woke 
up and started crying, I put my 

05:01:26.891 --> 05:01:31.287
phone away, right?  And then I 
would probably get back to the 

05:01:31.820 --> 05:01:37.177
purchase, but maybe another day,
 maybe another week.  And more 

05:01:37.178 --> 05:01:40.784
and more people are finding 
themselves in situations like 

05:01:40.896 --> 05:01:46.263
mine making quick mobile, making
 quick purchases on their mobile

05:01:46.820 --> 05:01:52.158
 phones whether it's in between 
meetings or while computing on a

05:01:52.504 --> 05:01:56.658
 train or maybe while sitting 
here at Google I/O at the AMP 

05:01:57.639 --> 05:02:02.774
keynote. 
   In fact, Forbes reported that

05:02:03.747 --> 05:02:09.027
 this year half of all of 
eCommerce revenue will come from

05:02:09.028 --> 05:02:13.182
 mobile.  And when we are doing 
things on our mobile phones, we 

05:02:13.183 --> 05:02:15.183
have constant interruptions.  We
 have babies, we have 

05:02:15.695 --> 05:02:19.650
colleagues, we have a horrible 
Internet connection.  And we 

05:02:20.076 --> 05:02:24.878
don't have time to wait for 
things to load. 

05:02:24.879 --> 05:02:29.367
   That's why speed and 
performance is so important.  

05:02:31.117 --> 05:02:34.847
Now, alley express agrees.  They
 reported that when they reduce 

05:02:34.848 --> 05:02:39.985
their load time by 36%, they 
were able to increase their 

05:02:40.747 --> 05:02:45.342
orders by 10.5% and able to 
increase their conversion rates 

05:02:47.631 --> 05:02:52.778
by 27.5%.  People just want 
their lives made easier.  And 

05:02:52.779 --> 05:02:57.273
that's why it's important for us
 to focus on speed and 

05:02:57.728 --> 05:03:01.308
performance so that we can help 
make people's lives easier.  And

05:03:01.656 --> 05:03:06.996
 this is where AMP comes in. 
   So last year AMP was not 

05:03:06.997 --> 05:03:10.497
ready for eDmers, but things are
 now changing and a few months 

05:03:10.826 --> 05:03:15.657
ago, we introduced AMP form 
where you can use to search for 

05:03:15.658 --> 05:03:20.013
items or add items to a shopping
 cart.  And today we invite you 

05:03:22.205 --> 05:03:27.229
to try out AMP bind, the key 
ingredient for eCommerce and 

05:03:27.894 --> 05:03:33.371
AMP.  Amp-Bind allows you to add
 custom interactivity 

05:03:36.514 --> 05:03:37.294
to your website.  So you can do 
things like refine an image 

05:03:37.295 --> 05:03:40.364
gallery by color.  You can 
choose a green apple or red 

05:03:41.150 --> 05:03:45.050
delicious.  You can update your 
product prices based on the size

05:03:45.051 --> 05:03:50.080
 of the products.  And you can 
tap on a button to show more 

05:03:50.081 --> 05:03:53.065
items like we do here. 
   And the cool things that 

05:03:53.600 --> 05:03:58.972
happening is that to show these 
more items, we are bringing them

05:03:58.973 --> 05:04:01.150
 via a server call without 
reloading the page.  And you can

05:04:01.151 --> 05:04:07.945
 use the same exact mechanic to 
show search results or filter or

05:04:07.946 --> 05:04:12.649
 path  paginate or short a page.

05:04:12.650 --> 05:04:16.893
   What this means is that it's 
possible for eCommerce sites to 

05:04:17.109 --> 05:04:24.781
use AMP and to get to parity 
with their conical pages.  And 

05:04:25.097 --> 05:04:30.990
we have new e Commerce features 
coming out every single week 

05:04:30.991 --> 05:04:34.821
from dynamic form validation to 
payments and currently we are 

05:04:34.822 --> 05:04:39.742
working on auto complete and 
getting it out the door.  So if 

05:04:39.743 --> 05:04:46.225
you want to see code samples for
 eCommerce with AMP go AMP by 

05:04:46.226 --> 05:04:52.781
example.com sls eCommerce and to
 start playing with Amp-Bind go 

05:04:52.782 --> 05:05:00.318
to bitly/amp-Bind.  We have eBay
 and Alibaba, and they are all 

05:05:00.319 --> 05:05:05.791
building super fast shopping 
experiences for their users with

05:05:05.792 --> 05:05:15.546
 AMP.  Alle express reported 
that they saw a 4% uplift in

05:05:16.611 --> 05:05:20.845
 conversion via AMP.  And 
Zalando which is one of the top 

05:05:20.846 --> 05:05:23.744
fashion e Commerce retailers in 
Europe, they have been rolling 

05:05:23.745 --> 05:05:32.597
out AMP for their product detail
 pages.  And finally, eBay, eBay

05:05:33.489 --> 05:05:38.171
 believed early on that AMP 
clearly aligns with their Core 

05:05:38.172 --> 05:05:41.011
strategy, and they were one of 
the first eCommerce sites to bet

05:05:41.225 --> 05:05:45.850
 on AMP in a big way.  Last 
summer they launched all of 

05:05:47.479 --> 05:05:51.394
their product listing pages with
 AMP.  And today we are happy to

05:05:52.280 --> 05:05:58.205
 announce that eBay is launching
 all of their product pages 

05:05:58.516 --> 05:06:01.566
worldwide on AMP. 
   And they will go live this 

05:06:02.675 --> 05:06:06.935
summer.  This is going to enable
 users to search for a product 

05:06:07.708 --> 05:06:16.360
on Google and buy it on eBay in 
mere mily  milliseconds.  So if 

05:06:16.361 --> 05:06:19.957
you want to learn more about 
eCommerce and AMP we have a 

05:06:19.958 --> 05:06:22.260
dedicated session to just this 
topic and you are welcome to 

05:06:22.801 --> 05:06:28.490
join us Friday at 3:30 on stage 
6.  Now, I would like to welcome

05:06:28.491 --> 05:06:32.219
 Malte Ubl back to the stage to 
talk to you about progressive 

05:06:32.220 --> 05:06:36.561
Web Apps.
   (Applause). 

05:06:36.562 --> 05:06:40.637
   &gt;&gt; MALTE UBL:  Yes, let's 
talk about PWA in AMP.  Who has 

05:06:41.086 --> 05:06:46.377
heard about PWA already?  Almost
 everyone.  So but let's still 

05:06:46.545 --> 05:06:50.669
take a quick look like what 
progressive Web Apps are.  They 

05:06:50.670 --> 05:06:53.976
are bringing a bunch of new 
features to the Web platform 

05:06:54.080 --> 05:06:57.560
that used to be a thing you only
 find on native things like push

05:06:58.570 --> 05:07:02.427
 notifications, offline support,
 ability to add your Web App to 

05:07:02.428 --> 05:07:05.354
the home stream just like a 
native app and access to easy 

05:07:05.875 --> 05:07:08.308
payments.  There is more stuff 
but those are the most important

05:07:08.309 --> 05:07:12.687
 ones.  What they are bringing 
is the long-term engagement that

05:07:12.688 --> 05:07:17.817
 you would  otherwise only find 
in native apps together with the

05:07:19.010 --> 05:07:21.886
 d iscoverability of Web apps.  
I work for Google, we built the 

05:07:22.107 --> 05:07:25.606
search engine and enables people
 to come to websites.  It works 

05:07:25.607 --> 05:07:28.986
well.  And people have found 
that it's not as easy to get 

05:07:28.987 --> 05:07:33.676
someone to install an app.  PW 
As bring this together and make 

05:07:33.677 --> 05:07:37.189
a good business case. 
   Now, this is kind of where 

05:07:37.190 --> 05:07:42.542
AMP comes in, because PWAs rely 
on the technology call service 

05:07:43.419 --> 05:07:46.606
workers.  They are 
transferringly installed when 

05:07:46.827 --> 05:07:49.656
you first go to PWA.  There is 
the first time the user 

05:07:49.759 --> 05:07:52.368
experience may not be as fast 
yet because you don't have the 

05:07:52.369 --> 05:07:57.957
service worker installed.  Now, 
last year here at Google I/O, 

05:07:58.300 --> 05:08:02.798
Alex Russell who is the inventor
 the PWA in general coined the 

05:08:03.133 --> 05:08:05.938
term start fast stay fast.  
That's what AMP is doing.  So if

05:08:06.392 --> 05:08:09.458
 you build AMP pages and have 
the AMP pages install the 

05:08:09.660 --> 05:08:12.418
service worker you have this 
continuous awesome user 

05:08:12.524 --> 05:08:14.524
experience where the first 
contact with the brand is 

05:08:14.605 --> 05:08:17.323
through the AMP page and it 
loads in an instant and from 

05:08:17.324 --> 05:08:20.841
there you go on and have the 
awesome engagement features of 

05:08:21.514 --> 05:08:23.514
PWAs.
   That was last year.  We have 

05:08:24.010 --> 05:08:29.030
consistently improved this 
experience.  By the way, it's 

05:08:29.031 --> 05:08:35.503
kind of an an no gram..  Awesome
 contribution from the Internet.

05:08:35.504 --> 05:08:39.537
  So what we have done is we 
have built infrastructure that 

05:08:39.538 --> 05:08:44.042
makes it really easy to build 
your PWA based on your AMP 

05:08:44.465 --> 05:08:48.421
pages.  It turns out it works 
well.  It's great for users to 

05:08:48.422 --> 05:08:53.007
get the first AMP load time 
experience and then your amazing

05:08:53.008 --> 05:08:57.370
 PWA for subsequent visits, but 
it's also great for business 

05:08:57.371 --> 05:09:00.759
because it turns out that with 
this approach you can invest in 

05:09:00.760 --> 05:09:04.587
AMP today and then make that 
count for your investment in 

05:09:04.588 --> 05:09:09.185
your PWA in the future.  So 
basically our message is i t's.

05:09:09.186 --> 05:09:12.698
   &gt;&gt; bad to go AMP in today 
because you want to have a PWA 

05:09:13.584 --> 05:09:16.953
but it's a longer term boat but 
those are paying into the same 

05:09:17.297 --> 05:09:20.357
destination.  So this is kind of
 how the user flow works.  User 

05:09:20.792 --> 05:09:24.063
discovers content, so they might
 search for it on Google or as 

05:09:24.288 --> 05:09:28.322
we referred earlier today from 
Elena Legeros, Twitter will 

05:09:28.323 --> 05:09:32.359
start linking to AMP  content 
across the apps.  They click, it

05:09:33.263 --> 05:09:36.748
 loads super fast because it's 
an AMP page.  The AMP page 

05:09:36.749 --> 05:09:39.705
installs the service worker in 
the background silently and 

05:09:39.706 --> 05:09:44.721
every next click is getting the 
user into your PWA experience. 

05:09:44.722 --> 05:09:48.230
   There is a few companies out 
there who have already done 

05:09:49.891 --> 05:09:53.912
this.  Shirt example, Zing, 
German business social network, 

05:09:53.913 --> 05:09:58.952
they launched a PWA amp combo, 
so you might search for a job on

05:09:58.953 --> 05:10:02.128
 Google which we have learned 
today is now more of a thing 

05:10:02.129 --> 05:10:06.181
even, and you come to their 
landing page.  That's an AMP 

05:10:06.406 --> 05:10:09.670
page.  It loads in an instant, 
installs the service w orker and

05:10:09.890 --> 05:10:13.063
 any click that gets you more 
into the funnel to get the job 

05:10:13.064 --> 05:10:18.217
is driven by the PWA service 
worker and is super fast. 

05:10:18.218 --> 05:10:22.365
   Rock den which is a Japanese 
site launched this for the 

05:10:22.366 --> 05:10:25.660
recipe site and they were seeing
 great metrics.  The time spent 

05:10:26.104 --> 05:10:31.008
for users going through the AMP 
funnel up by 50% and the CTR 

05:10:31.009 --> 05:10:34.639
from the landing page down into 
the other recipes which is 

05:10:34.640 --> 05:10:39.219
really I think the thing they 
are driving went up by 3.6%.  

05:10:40.109 --> 05:10:43.363
Now, I only scratched the 
surface.  There is way more to 

05:10:43.364 --> 05:10:47.869
this, so there is a talk 
tomorrow going into detail on 

05:10:48.384 --> 05:10:53.337
stage 6 at 9:30 that talks about
 how PWA and AMP work together. 

05:10:53.338 --> 05:10:59.457
 Next up is Elena talking about 
the challenges of AMP. 

05:10:59.458 --> 05:11:01.748
   &gt;&gt; ELENA LEGEROS:  Thanks.  
So as an open source initiative,

05:11:01.749 --> 05:11:05.811
 we feel like it's really 
important to be transparent in 

05:11:06.985 --> 05:11:10.728
acknowledging that not 
everything about AMP is perfect.

05:11:10.729 --> 05:11:15.980
  And when the community shares 
feedback, AMP gets better.  And 

05:11:15.981 --> 05:11:19.015
the community has shared a lot 
of feedback.  We really 

05:11:19.016 --> 05:11:22.543
appreciate it.  And so we 
thought we would take some time 

05:11:22.763 --> 05:11:27.126
to share some of the feedback 
that we have heard and how we 

05:11:27.127 --> 05:11:29.779
are working to address some of 
those challenges.

05:11:35.129 --> 05:11:38.506
have heard is that all AMP pages
 look the same.  This can be 

05:11:38.507 --> 05:11:43.644
true to an extent.  We admit 
that we need to make it easier 

05:11:43.645 --> 05:11:47.794
for publishers to build unique 
AMP pages that represent their 

05:11:48.119 --> 05:11:53.501
own brand identities.  We have 
also heard feedback from 

05:11:53.502 --> 05:11:56.558
publishers having a hard time 
accurately measuring the success

05:11:56.866 --> 05:12:01.352
 of their AMP pages.  And to be 
honest, we  messed up a little 

05:12:01.353 --> 05:12:06.851
bit here.  It's currently 
challenging to get metrics 

05:12:06.852 --> 05:12:10.542
right.  Another category of 
feedback we have heard is around

05:12:10.875 --> 05:12:14.074
 AMP URLs displayed in Google 
Search and I will talk a little 

05:12:14.276 --> 05:12:19.063
bit more about this.  And 
another thing that we have heard

05:12:19.064 --> 05:12:23.890
 is that AMP pages do not 
monetize well through ads.  It's

05:12:23.891 --> 05:12:29.040
 true that there are a number of
 restrictions on bad ad 

05:12:29.041 --> 05:12:32.541
behavior.  However, even with 
these limitations we are 

05:12:32.542 --> 05:12:38.015
surprised to get this 
montization feedback. 

05:12:38.016 --> 05:12:40.770
   So I will go through each of 
the points of feedback and talk 

05:12:41.077 --> 05:12:44.572
about how we are addressing 
them.  So starting with the 

05:12:44.681 --> 05:12:49.841
first one that all AMP pages 
look the same.  First of all, 

05:12:50.280 --> 05:12:54.866
like all Web pages, AMP pages 
are styled in CSS and are fully 

05:12:56.083 --> 05:13:01.108
customizable.  Anyone can build 
and contribute to the library of

05:13:01.109 --> 05:13:06.659
 custom AMP components that 
allow for creative faith design 

05:13:06.895 --> 05:13:09.854
and  flexibility.  And that 
library of components is 

05:13:10.291 --> 05:13:14.644
constantly growing with feedback
 from the community. 

05:13:14.645 --> 05:13:18.037
   And one new component that 
gives designers more

05:13:21.125 --> 05:13:25.716
 flexibility is paralax.  The 
paralom extension allows for an 

05:13:25.823 --> 05:13:30.177
element on a page to move as if 
it is nearer or farther relative

05:13:30.178 --> 05:13:37.401
 to the foreground on a page 
when the user scrolls producing 

05:13:37.402 --> 05:13:42.647
a 3D-like effect.  But we 
realize that not everyone is a 

05:13:42.648 --> 05:13:45.843
designer or has designer 
resources, and we really needed 

05:13:46.072 --> 05:13:48.348
to take that into consideration.

05:13:48.349 --> 05:13:53.812
   And so this past spring we 
announced AMP start.  And AMP 

05:13:54.052 --> 05:13:58.508
start is a set of templates that
 can get anyone started quickly 

05:13:58.509 --> 05:14:02.462
with AMP documents.  And it 
eliminates a lot of the heavy 

05:14:02.903 --> 05:14:06.616
lifting in terms of the design 
work.  And we are working on 

05:14:06.617 --> 05:14:08.617
building out this set of 
templates that people

05:14:11.674 --> 05:14:14.952
 can choose from and modify to 
build their own unique AMP 

05:14:14.953 --> 05:14:20.079
pages.  And if you want to learn
 more about building beautiful

05:14:23.130 --> 05:14:23.697
 interchactive AMP pages, be 
sure to check out the talk 

05:14:23.698 --> 05:14:30.141
that's entirely devoted to this 
topic on Friday afternoon the 

05:14:30.142 --> 05:14:34.168
3:30. 
   So another point of feedback 

05:14:34.169 --> 05:14:39.653
is that it's currently 
challenging to get AMP metrics 

05:14:39.654 --> 05:14:43.567
right.  And the first thing I 
want to say is that AMP is still

05:14:44.150 --> 05:14:48.511
 relatively new.  And it really 
pushes the boundaries in terms 

05:14:48.512 --> 05:14:53.332
of the kinds of user experiences
 that you can create.  And in 

05:14:54.199 --> 05:14:58.892
insuring that content is as fast
 as it possibly can be, it takes

05:14:59.120 --> 05:15:05.043
 advantage of things like 
platform caching and pre  

05:15:05.902 --> 05:15:08.209
pre-rendering.  And some of 
these things make it a little 

05:15:08.210 --> 05:15:14.103
bit challenging to measure AMP. 
   And in the last few months we

05:15:14.329 --> 05:15:18.481
 have launched a few features 
like link and form  

05:15:19.035 --> 05:15:23.518
substitutions to better sa sift 
publishers in attributing page 

05:15:23.519 --> 05:15:27.757
visits back to AMP. 
   And we have also published 

05:15:27.758 --> 05:15:31.934
documentation to illustrate 
techniques that people can use 

05:15:32.039 --> 05:15:37.851
when collecting their own 
Analytics directly.  And we are 

05:15:37.852 --> 05:15:42.113
also really committed to working
 with vendor partners to insure 

05:15:42.114 --> 05:15:45.932
that they are incorporating 
updates and building features to

05:15:45.933 --> 05:15:52.064
 support more reliable and 
accurate AMP metrics. 

05:15:52.065 --> 05:15:55.917
   Yesterday actually Google 
Analytics announced the rollout 

05:15:56.566 --> 05:16:00.266
of an enhancement that unifies 
users across AMP and non-AMP 

05:16:01.157 --> 05:16:05.515
pages served from a website's 
domain.  This is really going to

05:16:05.516 --> 05:16:11.105
 improve user analysis across 
the two formats.  This change is

05:16:11.326 --> 05:16:15.023
 going to take effect over the 
yap coming weeks -- upcoming 

05:16:15.024 --> 05:16:18.972
weeks and is the first in a few 
plan changes that will enhance 

05:16:19.191 --> 05:16:22.169
AMP traffic understanding for 
Google Analytics clients.

05:16:27.839 --> 05:16:34.292
 that not everyone likes AMP 
URLs d isplayed in Google 

05:16:34.293 --> 05:16:36.807
Search.  More specifically we 
have heard user and publisher 

05:16:37.241 --> 05:16:40.317
feedback that it isn't easy to 
copy and paste links to articles

05:16:40.535 --> 05:16:45.552
 on AMP.  And it's frustrating 
to not be able to access the 

05:16:45.553 --> 05:16:49.947
original article  URL and to 
that we would say that we agree 

05:16:50.026 --> 05:16:55.071
and actually the AMP project 
adopted the guidance that 

05:16:55.072 --> 05:17:02.176
platforms that  are linking to 
AMP content should share 

05:17:02.177 --> 05:17:04.690
original article ucials when 
this is technically possible.  

05:17:04.691 --> 05:17:09.282
Google Search has just rolled 
out a button across mobile Web 

05:17:09.283 --> 05:17:12.454
in the AMP viewer header where 
users can tap to display the 

05:17:12.675 --> 05:17:17.590
puck lisher link and tap on the 
link itself to navigate to the 

05:17:17.591 --> 05:17:21.204
conical, and long press to copy 
paste.  And on native apps where

05:17:21.537 --> 05:17:26.013
 we have more control over 
sharing functionality, we always

05:17:26.014 --> 05:17:32.585
 chair the publisher URL. 
   And the last thing I want to 

05:17:32.586 --> 05:17:37.495
address is the feedback that AMP
 pages do not monetize well with

05:17:37.496 --> 05:17:44.165
 apps.  The Google ad exchange 
actually ran tests comparing 

05:17:44.857 --> 05:17:47.873
monetization for the same 
publisher across their AMP and n

05:17:47.874 --> 05:17:54.552
 on-AMP pages.  And what they 
found was that over 90% of 

05:17:54.553 --> 05:17:57.419
publishers experienced higher 
click through rates and over 70%

05:17:58.491 --> 05:18:01.707
 of publishers experienced 
higher viewability on their AMP 

05:18:01.708 --> 05:18:04.836
pages. 
   And what we realized was that

05:18:05.613 --> 05:18:09.009
 the publishers who had been 
under p erforming on their AMP 

05:18:09.010 --> 05:18:13.916
pages were actually just putting
 fewer ads on their AMP pages. 

05:18:13.917 --> 05:18:19.075
   But when comparing apples to 
apples in terms of ad placement,

05:18:19.508 --> 05:18:24.775
 monetization results on AMP 
pages exceed non-AMP pages.  

05:18:24.776 --> 05:18:29.681
They do b etter.  So that's a 
great segue to Chen Shay who is 

05:18:29.682 --> 05:18:34.108
going to talk about AMP ads.
   (Applause).

05:18:39.746 --> 05:18:43.478
Elana.  So if you remember I was
 just talking about being a new 

05:18:43.479 --> 05:18:49.459
mom and what I wanted to tell 
you is that I am the perfect 

05:18:49.460 --> 05:18:53.968
demographic for advertisers.  
Advertisers love people like me 

05:18:54.417 --> 05:18:59.864
because I'm about to buy a bunch
 of baby things.  I have no 

05:18:59.865 --> 05:19:04.018
previous knowledge about the 
things I'm about to buy, and I 

05:19:04.019 --> 05:19:07.251
have zero brand loyalty.  I 
don't know who makes what.  I'm 

05:19:07.557 --> 05:19:12.335
going to learn all of that soon.
  Advertisers love my 

05:19:12.336 --> 05:19:16.374
demographic.  But remember, I'm 
also sleep deprived so I'm tired

05:19:16.467 --> 05:19:19.463
 because I didn't get to sleep 
at night and I'm hungry because 

05:19:19.885 --> 05:19:23.166
I didn't have time to eat and I 
have a crying baby. 

05:19:23.167 --> 05:19:26.891
   So do you think that when I 
open a page I'm going to sit 

05:19:27.189 --> 05:19:33.969
there and wait for a slow ad to 
load?  No way.  Nobody waits for

05:19:34.217 --> 05:19:39.057
 slow ads to load.  Least of all
 me, and I'm the perfect 

05:19:39.058 --> 05:19:42.070
demographic that they want to 
advertise to. 

05:19:42.071 --> 05:19:49.209
   If an ad wants to be seen, it
 better load quickly.  So AMP 

05:19:49.210 --> 05:19:54.213
made pages lightning fast, but 
ads are slow and we wanted to 

05:19:54.214 --> 05:19:58.070
fix this.  We wanted to make 
sure that ads can load at the 

05:19:58.071 --> 05:20:03.583
same speed as our AMP pages as 
the content on the AMP pages.  

05:20:03.584 --> 05:20:07.179
And when we looked at ads we 
realized that ads have the same 

05:20:07.394 --> 05:20:14.572
problem as regular Web pages.  
They are slow.  They are 

05:20:14.573 --> 05:20:20.035
disruptive.  They have unwanted 
JavaScript with no perm 

05:20:20.036 --> 05:20:22.683
performance guarantees and they 
are potentially unsafe.  This is

05:20:23.127 --> 05:20:25.661
 something we really care about.
  We want to make sure our users

05:20:25.662 --> 05:20:30.661
 have a safe online experience. 
   So what we did was we applied

05:20:30.662 --> 05:20:38.752
 the same performance principles
 of AMP to   ads and we called 

05:20:38.753 --> 05:20:44.778
it AMP ads.  AMP ads are ads 
that are created in AMP format. 

05:20:44.779 --> 05:20:48.949
 And they are fast because they 
have no third party JavaScript, 

05:20:49.159 --> 05:20:52.325
and all of the code is 
guaranteed to be performance 

05:20:53.093 --> 05:20:55.432
optimized.  And they are light 
because they have reasonable 

05:20:56.039 --> 05:21:00.403
components like AMP Analytics 
and AMP Pixel which collect all 

05:21:00.404 --> 05:21:05.326
of the information one time and 
then they give it to authorized 

05:21:05.327 --> 05:21:08.735
vendors, and what this does by 
collecting information only one 

05:21:08.736 --> 05:21:14.874
time, it relieves the burden on 
the browser.  And they are safe 

05:21:14.875 --> 05:21:17.344
because we sign all of our AMP 
ads to insure that they are 

05:21:17.345 --> 05:21:22.742
valid so they shouldn't contain 
any m aladvertising. 

05:21:22.743 --> 05:21:26.344
   So I will show you a 
difference between an AMP ad and

05:21:26.345 --> 05:21:30.835
 a regular ad, and what happens 
was triple lift they ran a bunch

05:21:30.836 --> 05:21:34.540
 of AMP ads and regular a ds 
side by side and they ran them 

05:21:34.987 --> 05:21:38.701
on AMP pages and let's see what 
the difference looks like.  So 

05:21:38.702 --> 05:21:42.514
on the right we have a regular 
ad.  It's taking forever to 

05:21:43.076 --> 05:21:48.464
load.  There is no way I'm going
 to wait for that ad to load, 

05:21:48.687 --> 05:21:53.253
not in a million years but on 
the left side we is an AMP ad 

05:21:53.254 --> 05:21:56.766
and it loads instantaneously.  
I'm definitely going to have a 

05:21:56.869 --> 05:22:04.174
chance to see that one.  And on 
top of that, triplelift reported

05:22:04.175 --> 05:22:07.264
 that AMP ads when compared to 
regular ads are three times 

05:22:08.024 --> 05:22:14.467
lighter, six times faster and 
they generate more revenue for 

05:22:14.468 --> 05:22:16.332
publishers. 
   So AMP ads are wonderful, but

05:22:16.333 --> 05:22:20.486
 how do you build them?  Well, 
you can build them yourself just

05:22:20.487 --> 05:22:24.973
 like an AMP page.  Or you can 
use various t ools that are 

05:22:24.974 --> 05:22:30.217
available to you such as 
Celtra's ad creator tool.  Let's

05:22:30.321 --> 05:22:34.920
 take a look.  This is an editor
 and the cool thing about this 

05:22:35.043 --> 05:22:39.299
is that you can create AMP ads 
using this editor without having

05:22:39.959 --> 05:22:42.394
 any technical knowledge.  I 
highly recommend you try it out.

05:22:49.342 --> 05:22:53.852
pioneers that implement support 
for AMP ads and there are a lot 

05:22:53.853 --> 05:22:57.681
more in the process.  We have 
publishers delivering AMP ads to

05:22:57.682 --> 05:23:02.806
 their Web pains.  We have -- 
pages, you can sign your AMP a 

05:23:02.807 --> 05:23:06.649
ds with Google or CloudFlare.  
There are various creative tools

05:23:06.650 --> 05:23:09.940
 you are welcome to use to 
create AMP ads and there are 

05:23:09.941 --> 05:23:13.104
more and more ad servers 
beginning to support AMP.  So we

05:23:13.203 --> 05:23:18.789
 have the entire ecosystem.  And
 overall, our vision is to make 

05:23:18.790 --> 05:23:24.591
AMP  *78 AMP ads the defact to 
standard for ads on the Web.  If

05:23:24.592 --> 05:23:28.648
 you want to learn more about 
AMP ads we have an entire 

05:23:28.649 --> 05:23:31.259
session dedicated to talking 
just about that tomorrow morning

05:23:32.903 --> 05:23:39.228
 at 8:30 on stage 5.  And I know
 it's really early, but what's 

05:23:39.229 --> 05:23:43.070
more important than talking 
about ads at 8:30 in the 

05:23:43.610 --> 05:23:47.582
morning?  So h opefully we will 
see you all there.  To wrap 

05:23:47.782 --> 05:23:50.657
things up I would like to 
welcome back Malte Ubl.

05:23:50.658 --> 05:23:52.658
   (

05:23:54.684 --> 05:23:55.857
Applause). 
   &gt;&gt; MALTE UBL:  I want to talk

05:23:55.858 --> 05:24:00.385
 about contributing to AMP, to 
AMP is an open source project.  

05:24:00.675 --> 05:24:03.506
I manage the team at Google that
 works full time on this 

05:24:03.507 --> 05:24:07.701
project, but we, you know, we 
really want to, want this to be 

05:24:08.007 --> 05:24:11.392
an open project and we want to 
have your, we would like to have

05:24:11.618 --> 05:24:17.539
 your contribution to it.  We as
 a project we live on GitHub and

05:24:17.540 --> 05:24:21.811
 it has been a bit top lar.  We 
crossed through 10,000 stars 

05:24:21.812 --> 05:24:24.445
which I don't really know what 
that means but I'm excited about

05:24:24.446 --> 05:24:28.031
 T. but way more important over 
400 of you have been 

05:24:29.123 --> 05:24:32.319
contributing with actual pull 
requests with our own code for 

05:24:32.626 --> 05:24:37.227
the AMP project, and I think 
this kind of proves it's truly 

05:24:38.428 --> 05:24:41.041
distributed, meaningful open 
source project.  We don't want 

05:24:41.367 --> 05:24:44.239
to stand still at this stage so 
we did a few things over the 

05:24:44.240 --> 05:24:49.058
last months to make the project 
more transferrant and increase 

05:24:49.253 --> 05:24:52.673
the level of engagement for the 
community to be a part of AMP. 

05:24:52.864 --> 05:24:56.185
   One thing we have done is we 
have launched this weekly design

05:24:56.186 --> 05:24:59.648
 reviews on hangouts.  So here 
is a picture of my team but 

05:24:59.649 --> 05:25:03.159
there are people on the hangout 
that allows everyone to go to 

05:25:03.160 --> 05:25:07.421
our GitHub issue we create every
 week and say we would like to 

05:25:07.422 --> 05:25:09.932
discuss this topic.  You are on 
the agenda and you can discuss 

05:25:09.933 --> 05:25:13.007
whatever you want to change 
about AMP with the AMP Core team

05:25:13.008 --> 05:25:16.498
 and can become a member of the 
AMP Core team and when I saw, 

05:25:16.614 --> 05:25:20.332
that includes us.  Every single 
change we make, we create a 

05:25:20.333 --> 05:25:24.593
design Doc and we put it on the 
agenda of this meeting and 

05:25:24.816 --> 05:25:26.822
discuss it with the community 
and you get to be a part of 

05:25:27.332 --> 05:25:29.486
that. 
   I'm most excited to announce 

05:25:29.487 --> 05:25:34.010
that later this year we will 
have the first ever AMP  

05:25:34.550 --> 05:25:38.386
contributor seminar.  We will 
invice  contributors to 

05:25:38.387 --> 05:25:40.339
mountainview to discuss things 
in person.  How do you 

05:25:40.340 --> 05:25:42.958
contribute to A MP?  Not 
everyone is a seasoned open 

05:25:43.288 --> 05:25:46.346
source developer and knows all 
of these things.  So what we 

05:25:46.687 --> 05:25:51.597
created was a set of great first
 issues.  These are essentially 

05:25:51.598 --> 05:25:54.979
tutorials that teach you step by
 step what you need to do to 

05:25:54.980 --> 05:26:02.224
create your first AMP commit.  
Go to bit.LY/AMP for details on 

05:26:02.225 --> 05:26:06.488
this.  We would like you to get.
  You don't have to know what 

05:26:06.489 --> 05:26:11.280
GitHub is.  It should be really 
good.  Now, as I said, we are 

05:26:11.281 --> 05:26:16.338
living on GitHub.  So that's the
 main URL.  You will find all of

05:26:16.339 --> 05:26:19.170
 the detail there's but you can 
create issue there's so you 

05:26:19.171 --> 05:26:24.573
don't have to write code.  You 
will find the URL for the Slack 

05:26:25.088 --> 05:26:27.903
on GitHub and you can contribute
 and talk to us in person.  You 

05:26:27.904 --> 05:26:31.713
can join the weekly hangout.  
You can ping us on Twitter.  We 

05:26:31.985 --> 05:26:36.889
are really active.  You can come
 to stack overflow or write our 

05:26:36.890 --> 05:26:38.977
mailing list if that's your 
thing.  The mailing list address

05:26:38.978 --> 05:26:43.911
 is on the GitHub URL. 
   Final thing is just to point 

05:26:43.912 --> 05:26:46.639
you to all of the other AMP 
talks we have, tomorrow morning 

05:26:46.640 --> 05:26:50.678
if you are really early you can 
catch the AMP ads t alk.  Eight 

05:26:50.679 --> 05:26:54.422
roof that really exciting talk 
about AMP and PWAs and then 

05:26:55.152 --> 05:27:01.301
finally Friday stage 6, 3:30 
talk of building beautiful AMP 

05:27:01.302 --> 05:27:05.113
pages for eCommerce and beyond. 
   Just recapping things we have

05:27:05.441 --> 05:27:09.157
 talked about AMP having really 
great momentum in both 

05:27:09.158 --> 05:27:11.461
publishing and platforms.  We 
call it open for business so if 

05:27:11.462 --> 05:27:15.065
you are in eCommerce, please 
start building AMP pages.  If 

05:27:15.066 --> 05:27:20.001
you are looking at building a 
PWA, AMP might be a first great 

05:27:20.320 --> 05:27:23.426
step towards PWA and we are 
hoping for AMP ads to fix 

05:27:23.946 --> 05:27:27.559
advertising on the W eb.  Thank 
you very much.  We are going to 

05:27:27.560 --> 05:27:34.214
hang out in the app  AMP S 
andbox.  Hope to see you there. 

05:27:34.215 --> 05:27:36.944
 Thank you very much.
   (Applause).

05:27:36.945 --> 05:27:43.406
     (Concluded at 8:39CT).

