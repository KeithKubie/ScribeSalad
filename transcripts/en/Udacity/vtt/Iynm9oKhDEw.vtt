WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
I would like to start out with an inventory of the concepts that are going to be used.

00:00:05.000 --> 00:00:10.000
So far we have the notion of a pattern or a regular expression,

00:00:10.000 --> 00:00:15.000
of a text to match against, of a result, which will also be a string of some kind.

00:00:15.000 --> 00:00:19.000
It doesn't seem like there's all that many more concepts.

00:00:19.000 --> 00:00:25.000
One thing that it looks like we'll need is some notion of a partial result,

00:00:25.000 --> 00:00:30.000
and some notion of control over the iteration.

00:00:30.000 --> 00:00:32.000
What do I mean by that?

00:00:32.000 --> 00:00:34.000
Well, some of the matches are easy.

00:00:34.000 --> 00:00:42.000
If we match search for a literal 'def' within 'abcdef,'

00:00:42.000 --> 00:00:45.000
it's easy to imagine just going down the line of this string and saying

00:00:45.000 --> 00:00:53.000
does it match here? No. Here? No. Here? No. Here? Yes. We'll return that result.

00:00:53.000 --> 00:00:59.000
But what if we're matching with the pattern--let's say we have the expression 'a*b+'--

00:00:59.000 --> 00:01:01.000
any number of a's followed by one or more b's.

00:01:01.000 --> 00:01:11.000
In our API notation, we would write that as seq(start(lit('a') plus(lit('b')).

00:01:11.000 --> 00:01:16.000
Let's say we're matching that against the string 'aaab.'

00:01:16.000 --> 00:01:21.000
Now if we had a control structure that says sequence, look to match the first,

00:01:21.000 --> 00:01:26.000
and then look at the second, and if the first--star(lit('a'))--only had one possible result,

00:01:26.000 --> 00:01:31.000
then it would say, yes, it matches here right at the start, now look for something after that.

00:01:31.000 --> 00:01:34.000
Does it match plus(lit('b'))? No, it doesn't.

00:01:34.000 --> 00:01:37.000
I've got to have iteration over the possible results.

00:01:37.000 --> 00:01:41.000
I have to say that star(lit('a')) can match in more than one location.

00:01:41.000 --> 00:01:45.000
It can match with zero instances of a, with 1, with 2, with 3,

00:01:45.000 --> 00:01:50.000
and it's only after 3 that then we can match the second part, find the b,

00:01:50.000 --> 00:01:53.000
and then find that the whole expression matches.

00:01:53.000 --> 00:01:56.000
That's going to be the tricky part is worrying about this control

00:01:56.000 --> 00:02:01.000
when one part of a sequence doesn't match or similarly when we have an alternative

00:02:01.000 --> 00:02:08.000
between two possibilities--a or b or alt(a, b).

00:02:08.000 --> 00:02:10.000
This trickiness seems like it's going to be difficult,

00:02:10.000 --> 00:02:15.000
but it all resolves itself after we make one good choice.

00:02:15.000 --> 00:02:18.000
It takes some experience to see what that choice can be,

00:02:18.000 --> 00:02:25.000
but if we decide to represent these partial results as a set of remainders of the text,

00:02:25.000 --> 00:02:28.000
then everything falls into place. What do I mean by remainder?

00:02:28.000 --> 00:02:30.000
I mean everything else after the match.

00:02:30.000 --> 00:02:36.000
If we match a literal "a" the remainder after we match zero characters of this string

00:02:36.000 --> 00:02:39.000
would be "aaab"--three a's followed by a b.

00:02:39.000 --> 00:02:44.000
The remainder after we match one a would be two a's followed by a b and so on.

00:02:44.000 --> 00:02:49.000
What I'm going to do is define an auxiliary function called "match set,"

00:02:49.000 --> 00:02:55.000
and it takes a pattern and a text, and it returns this set of remainders.

00:02:55.000 --> 00:03:03.000
When given just this pattern here as the input, star(lit('a')), and this text as the text

00:03:03.000 --> 00:03:07.000
then the remainder would be the set consisting of three a's and a b,

00:03:07.000 --> 00:03:11.000
two a's and a b, one a and a b, or just b.

00:03:11.000 --> 00:03:17.000
In other words, star(lit('a')) could have consumed 0, 1, 2, or 3 a's,

00:03:17.000 --> 00:03:19.000
and that's the remainder that's left over.

00:03:19.000 --> 09:59:59.000
So the result will be this set.

