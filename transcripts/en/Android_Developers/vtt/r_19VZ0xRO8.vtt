WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.804
[ROCKET ROARING]

00:00:03.177 --> 00:00:05.260
FLORINA MUNTENESCU: Earlier
this year, we launched

00:00:05.260 --> 00:00:06.940
a preview of Android KTX--

00:00:06.940 --> 00:00:09.640
a set of extensions to
the Android framework

00:00:09.640 --> 00:00:12.430
aimed at making your
development with Kotlin more

00:00:12.430 --> 00:00:15.100
clear, pleasant, and idiomatic.

00:00:15.100 --> 00:00:17.120
Since then, we had
several releases,

00:00:17.120 --> 00:00:19.540
including contributions
from the community.

00:00:19.540 --> 00:00:21.760
We changed the name to core-ktx.

00:00:21.760 --> 00:00:24.590
And now, we're launching
the 1.0 alpha version

00:00:24.590 --> 00:00:25.750
as part of Jetpack--

00:00:25.750 --> 00:00:28.315
our set of libraries aimed
at accelerating Android

00:00:28.315 --> 00:00:29.650
development.

00:00:29.650 --> 00:00:31.900
The core-ktx library
contains extensions

00:00:31.900 --> 00:00:34.560
to the features and
functionality of the framework.

00:00:34.560 --> 00:00:36.850
But we didn't forget about
other Android Jetpack

00:00:36.850 --> 00:00:39.240
libraries-- old or new.

00:00:39.240 --> 00:00:41.560
Classes from Android X,
like fragment manager,

00:00:41.560 --> 00:00:45.100
collections, live data reactive
streams, and the new navigation

00:00:45.100 --> 00:00:48.234
component have
associated KTX artifacts

00:00:48.234 --> 00:00:49.900
leveraging the features
of the language,

00:00:49.900 --> 00:00:52.300
such as extension
functions and properties,

00:00:52.300 --> 00:00:55.180
lambdas, named and
default parameters.

00:00:55.180 --> 00:00:57.340
Now, let's check
out some examples.

00:00:57.340 --> 00:00:59.920
Without KTX, performing
a fragment transaction

00:00:59.920 --> 00:01:02.470
requires starting a transaction,
triggering an action

00:01:02.470 --> 00:01:04.510
like adding or
replacing a fragment,

00:01:04.510 --> 00:01:07.210
and then deciding on one
of the four commit methods

00:01:07.210 --> 00:01:09.910
based on whether the commit
should be scheduled or call

00:01:09.910 --> 00:01:13.400
synchronously, allowing
state loss or not.

00:01:13.400 --> 00:01:16.880
fragment-ktx adds the
transaction extension function

00:01:16.880 --> 00:01:19.120
to the FragmentManager
class, removing

00:01:19.120 --> 00:01:22.210
all the begin transaction
and commit boilerplate,

00:01:22.210 --> 00:01:25.510
as well as providing default
values for sync and state loss

00:01:25.510 --> 00:01:28.420
that you can easily overwrite.

00:01:28.420 --> 00:01:31.360
To avoid forgetting to call
show when displaying a toast,

00:01:31.360 --> 00:01:34.300
and to simplify the code,
use the context extension

00:01:34.300 --> 00:01:36.850
function from core-ktx.

00:01:36.850 --> 00:01:38.890
Working with the Spans API?

00:01:38.890 --> 00:01:41.050
We added extensions
to the main classes--

00:01:41.050 --> 00:01:44.770
span string, spannable string,
and spannable string builder--

00:01:44.770 --> 00:01:48.010
to make the API easier to
use and more idiomatic.

00:01:48.010 --> 00:01:50.980
So for example, creating
a spannable from a string,

00:01:50.980 --> 00:01:53.620
making the text bold,
and only a word red

00:01:53.620 --> 00:01:56.780
can be easily done like this.

00:01:56.780 --> 00:01:59.600
Make your menu items
eachable-- perform actions

00:01:59.600 --> 00:02:02.540
on each item in the menu, check
whether a specific item is

00:02:02.540 --> 00:02:06.640
or not there, or
remove items easily.

00:02:06.640 --> 00:02:09.910
Using the Android X supported
SQLite database, when

00:02:09.910 --> 00:02:11.530
implementing database
transactions,

00:02:11.530 --> 00:02:13.750
you need quite a
lot of boilerplate.

00:02:13.750 --> 00:02:17.290
With the sqlite-ktx, you
can focus on what matters--

00:02:17.290 --> 00:02:19.850
the operations that you want
to make in the database.

00:02:19.850 --> 00:02:21.760
And then, just let
the transaction method

00:02:21.760 --> 00:02:24.490
handle the rest.

00:02:24.490 --> 00:02:26.710
The new navigation component
from Android Jetpack

00:02:26.710 --> 00:02:30.340
already offers a domain-specific
language for working with it.

00:02:30.340 --> 00:02:32.440
So for example,
to set up in code

00:02:32.440 --> 00:02:34.930
a navigation graph
with a search action

00:02:34.930 --> 00:02:37.780
that saves it from hitting the
Back button 10 times to get

00:02:37.780 --> 00:02:40.690
through all the past
results and has animations

00:02:40.690 --> 00:02:43.390
for entering and exiting,
you would write something

00:02:43.390 --> 00:02:44.364
like this.

00:02:44.364 --> 00:02:46.780
You would create the graph
based on the start destination,

00:02:46.780 --> 00:02:49.810
add an action for search
with a destination ID

00:02:49.810 --> 00:02:51.940
and navigation options.

00:02:51.940 --> 00:02:54.600
In the navigation options, we're
setting the search fragment

00:02:54.600 --> 00:02:59.890
to be launched as SingleTop with
an enter and an exit animation.

00:02:59.890 --> 00:03:02.990
So core fragment
navigation and others--

00:03:02.990 --> 00:03:05.920
all of these are the first steps
towards a cleaner, simpler,

00:03:05.920 --> 00:03:08.890
and more idiomatic Android
development with Kotlin.

00:03:08.890 --> 00:03:10.550
And we won't be stopping here.

00:03:10.550 --> 00:03:14.110
Follow us on GitHub, YouTube,
and Twitter for more news.

00:03:14.110 --> 00:03:16.560
[ROCKET ROARING]

