WEBVTT
Kind: captions
Language: en

00:00:06.277 --> 00:00:07.110
å—¨KRISTAN UCCELLO: Hi. 

00:00:07.110 --> 00:00:08.250
 My name is Krispy My name's Krispy. 

00:00:08.250 --> 00:00:11.460
 I am a developer promoting the relationship of the foundry development team. I'm a Developer Advocate on the Cast Developer Relations team. 

00:00:11.460 --> 00:00:13.480
 In this DevBytes video I will discuss In this DevBytes video, I will discuss 

00:00:13.480 --> 00:00:15.490
 About Google Cast TV stick content and Google Cast receivers and how development 

00:00:15.490 --> 00:00:17.369
 How the development content works with the receiving device works with Cast receiver devices. 

00:00:17.369 --> 00:00:19.160
 For this video I assume that you have already for this video, I'm assuming you're already 

00:00:19.160 --> 00:00:21.330
 Familiar with the developer console familiar with the Cast developer console. 

00:00:21.330 --> 00:00:24.630
 If not, please check the developer console documentation If not, please review the developer console documentation. 

00:00:24.630 --> 00:00:28.510
 Now let's see what the receiver application is, let's take a look at what a receiver application is. 

00:00:28.510 --> 00:00:32.119
 The receiving application is just a single-page HTML5 application. The terminal receiver applications are single-page HTML5 apps. 

00:00:32.119 --> 00:00:34.070
 It loads from a web URL that are loaded from a network URL 

00:00:34.070 --> 00:00:36.480
 And run on a special version of Chrome and execute on a special version of Chrome. 

00:00:36.480 --> 00:00:39.660
 The receiver application runs on the receiver device. 

00:00:39.660 --> 00:00:41.000
 For example, Chrome Cast TV stick like a Chrome Cast. 

00:00:41.000 --> 00:00:43.810
 Elements such as Button links and alert Elements such as buttons, links, and alerts 

00:00:43.810 --> 00:00:46.090
 Since there is no mouse or keyboard device available has been disabled since there's no mouse or keyboard 

00:00:46.090 --> 00:00:47.300
 Will be disabled input available. 

00:00:47.300 --> 00:00:50.170
 All interactions associated with the recipient application All interactions with a running Cast receiver application 

00:00:50.170 --> 00:00:52.950
 The messages generated by the sender application happen through messages sent by a Cast sender app. 

00:00:52.950 --> 00:00:54.674
 To illustrate this interaction model To illustrate this interaction model, 

00:00:54.674 --> 00:00:58.530
 Let's take a look at how a receiver application is launched. Let's take a look at how a Cast receiver application is launched. 

00:00:58.530 --> 00:01:00.270
 The situation is that such a tank receiver applications are launched 

00:01:00.270 --> 00:01:02.080
 When a sender runs an application when a Cast sender application running 

00:01:02.080 --> 00:01:05.000
 On a sender device such as a phone, tablet, or computer when running on a sender device such as a mobile phone tablet or computer 

00:01:05.000 --> 00:01:08.300
 It tells a receiver device that it needs to launch an application tells a receiver device that it wants to launch an application. 

00:01:08.300 --> 00:01:11.224
 What is the application to launch depends on What that application is depends on the application ID 

00:01:11.224 --> 00:01:14.930
 The application ID provided by the sender when requesting the use of the recipient device that the sender provides when requesting to use the receiver device. 

00:01:14.930 --> 00:01:17.710
 The recipient device will look for the Google service and The receiver device will look up the application ID using 

00:01:17.710 --> 00:01:20.270
 Load the corresponding recipient application ID a Google service and load the corresponding receiver 

00:01:20.270 --> 00:01:22.670
 Application associated with it. 

00:01:22.670 --> 00:01:24.670
 Once the receiver application is loaded, Once the receiver application is loaded, 

00:01:24.670 --> 00:01:27.110
 It can start from the connected senders it can start processing messages from the connected sender 

00:01:27.110 --> 00:01:28.250
 Processing information applications. 

00:01:28.250 --> 00:01:29.872
 As a developer you can choose As a developer, you have options when 

00:01:29.872 --> 00:01:33.930
 The type of sender involved in the receiver application initiated comes to the type of receiver application launched by a sender. 

00:01:33.930 --> 00:01:37.530
 An application ID is an application ID that is a unique ID for a receiver application on the Cast Developer Console. 

00:01:37.530 --> 00:01:39.420
 The register of the receiving program that you get when you register a receiver 

00:01:39.420 --> 00:01:41.440
 The only ID app in the Cast developer console. 

00:01:41.440 --> 00:01:46.700
 You can register an application ID at cast.google.com/publish. You can register an application ID at cast.google.com/publish. 

00:01:46.700 --> 00:01:48.850
 There are three types of receiver applications There are three types of receiver applications, 

00:01:48.850 --> 00:01:50.600
 Both of them require the developer console two of which require registration using 

00:01:50.600 --> 00:01:53.440
 To register the remaining one, you don't need the Cast developer console, and one that does not. 

00:01:53.440 --> 00:01:55.910
 The one that is not needed is called Default Media Receiver The one that doesn't is called the Default Media Receiver, 

00:01:55.910 --> 00:01:57.850
 All it does is play simple media and all it does is play simple media. 

00:01:57.850 --> 00:02:01.710
 No styles have no custom interface and no application ID No styling, no customization, and no application ID. 

00:02:01.710 --> 00:02:04.250
 There is no way to change its behavior. There's no way to modify its behavior. 

00:02:04.250 --> 00:02:06.190
 Styled Media Receiver application The Styled Media Receiver application 

00:02:06.190 --> 00:02:09.919
 You need to register and allow some custom require registration and allow for some customization. 

00:02:09.919 --> 00:02:11.340
 This is for simple media playback It's for playback of simple media. 

00:02:11.340 --> 00:02:12.990
 More features than the former. More on this in a moment. 

00:02:12.990 --> 00:02:14.540
 Custom Receivers is a Custom Receivers are applications 

00:02:14.540 --> 00:02:17.370
 Need to register and for the advanced media player or that require registration and are for building advanced media 

00:02:17.370 --> 00:02:22.070
 Players or other types of TV applications like games developed in other forms of TV applications like games. 

00:02:22.070 --> 00:02:24.510
 A Styled Media Receiver allows the sender's application A Styled Media Receiver to allow a sender application 

00:02:24.510 --> 00:02:26.680
 Play media on a Cast device without having to play media on a Cast device without needing 

00:02:26.680 --> 00:02:29.260
 Create your own custom receiver application to create your own Custom Receiver application. 

00:02:29.260 --> 00:02:31.470
 You can customize the color of Styled Media Receiver. You can customize the Styled Media Receiver color 

00:02:31.470 --> 00:02:35.620
 Plan and branding by providing your own CSS during registration by providing your own CSS during the registration process. 

00:02:35.620 --> 00:02:37.430
 Styled Media Receiver is a great way The Styled Media Receiver is a great way 

00:02:37.430 --> 00:02:40.090
 To start building the Google Cast app to get started building Google Cast applications. 

00:02:40.090 --> 00:02:41.700
 Using Styled Media Receiver means Using the Styled Media Receiver 

00:02:41.700 --> 00:02:44.230
 Developers can focus on the sender application developer can focus their efforts on the sender application 

00:02:44.230 --> 00:02:47.480
 Interaction without having to build a custom receiver interaction without having to build a custom receiver. 

00:02:47.480 --> 00:02:48.980
 Create a Styled Media Receiver Creating a Styled Media Receiver is 

00:02:48.980 --> 00:02:51.280
 Registering with the Cast Developer Console should be as easy as registering for an application ID 

00:02:51.280 --> 00:02:53.030
 It's as easy to use the program ID as the program developer console. 

00:02:53.030 --> 00:02:55.380
 Styled Media Receiver is the application of The Styled Media Receiver is the best option 

00:02:55.380 --> 00:02:58.040
 The best choice when you don't need to take advantage of advanced media features if the application does not need to utilize advanced media 

00:02:58.040 --> 00:03:00.940
 For example, adaptive streaming media playback function DRM and playback capabilities such as adaptive streaming, DRM, 

00:03:00.940 --> 00:03:03.980
 Embedded captioning or authentication, etc. closed captioning, or authentication. 

00:03:03.980 --> 00:03:05.720
 Custom Receiver application is Custom Receiver applications are the way 

00:03:05.720 --> 00:03:07.310
 If you want to control to go if you want to have control 

00:03:07.310 --> 00:03:10.220
 The best choice for all aspects of the behavior of your application is over all aspects of the behavior of your application. 

00:03:10.220 --> 00:03:13.110
 With Custom Receivers you can support the protocol namespace with Custom Receivers, you can support protocol name spaces 

00:03:13.110 --> 00:03:16.490
 Not just the media and you can build a rich experience for users just beyond media and build rich experiences for your users. 

00:03:16.490 --> 00:03:20.530
 You have full control over the presentation, interactions, and more. 

00:03:20.530 --> 00:03:22.590
 Use the GoogleCast Receiver SDK Using the Google Cast receiver SDK, 

00:03:22.590 --> 00:03:25.135
 You can build an HTML5 application, you can build an HTML5 application, hook 

00:03:25.135 --> 00:03:27.780
 Incorporate various activities occurring in the Cast receiving information system into the various events that are fired within the Cast Receiver 

00:03:27.780 --> 00:03:30.270
 And on the simple media player, Message System, and build complex behaviors 

00:03:30.270 --> 00:03:32.200
 Build complex behaviors beyond simple media playback. 

00:03:32.200 --> 00:03:34.660
 Cast Receiver API provides developers with The Cast Receiver APIs provides ways for developers 

00:03:34.660 --> 00:03:37.950
 Create a method for TV-rich applications to build rich applications targeting the TV space. 

00:03:37.950 --> 00:03:40.060
 You can use the media player library to you can utilize the Cast media player library 

00:03:40.060 --> 00:03:42.710
 Establish an application that uses adaptive streaming media to build media applications that use adaptive streaming. 

00:03:42.710 --> 00:03:45.460
 Like HLS MPEG DASH smooth streaming, etc. HLS, MPEG DASH, smooth streaming, and more. 

00:03:45.460 --> 00:03:48.870
 They can also handle authentication issues and use DRM They can also handle authentication and use DRM. 

00:03:48.870 --> 00:03:51.600
 In order to load the receiver application to In order to load a receiver application onto a Cast device 

00:03:51.600 --> 00:03:53.910
 Register on Cast equipment, you want to be in Cast while developing, register the receiver devices 

00:03:53.910 --> 00:03:56.460
 The recipient device used by the developer console, you wish to use in the Cast developer console. 

00:03:56.460 --> 00:03:58.250
 For an unpublished receiver application For an unpublished receiver application, 

00:03:58.250 --> 00:03:59.870
 Only registered devices are only registered Cast devices will 

00:03:59.870 --> 00:04:02.050
 Capable of loading the receiver application to able to load the receiver application. 

00:04:02.050 --> 00:04:04.440
 And during the development process, the receiver device As well, during development, the receiver device 

00:04:04.440 --> 00:04:06.440
 Need to disclose its serial number will need to expose its serial number. 

00:04:06.440 --> 00:04:09.200
 This feature can be enabled using the Chrome Cast Settings app. This can be enabled using the Chrome Cast setup application. 

00:04:09.200 --> 00:04:12.930
 Simply select the Cast device and enable the "Send serial" when checking for updates 

00:04:12.930 --> 00:04:15.270
 Simply select the device and enable the sending serial number number when checking for updates" option. 

00:04:15.270 --> 00:04:16.950
 When you publish your application, when you publish your application, 

00:04:16.950 --> 00:04:19.861
 Any receiving device can load your app. Any Cast receiver device can load your app. 

00:04:19.861 --> 00:04:22.110
 Now I have introduced some basic settings for development. Now that I've covered some of the basics of setting up 

00:04:22.110 --> 00:04:24.630
 Let's look at some code for development, let's have a look at some code. 

00:04:24.630 --> 00:04:27.000
 A very basic custom receiving application in a few lines of code. In a few lines of code, a very basic Custom Receiver 

00:04:27.000 --> 00:04:30.150
 Can be built to play simple media applications can be built that plays simple media. 

00:04:30.150 --> 00:04:33.900
 First we load the receiver's API First, we load the receiver APIs. 

00:04:33.900 --> 00:04:37.170
 Then we make sure we have a video element and some media elements. Then we ensure that we have a video element, some media 

00:04:37.170 --> 00:04:41.290
 For playback of video music, etc. element to play back video, music, et cetera. 

00:04:41.290 --> 00:04:44.350
 Once the window has started loading it will determine the media element Once the window onload is fired, identify the media element 

00:04:44.350 --> 00:04:47.160
 And create a media processor to handle the sender and create a Cast media manager to handle the sender 

00:04:47.160 --> 00:04:49.400
 Communication and various media events communication and media events. 

00:04:49.400 --> 00:04:52.180
 Then get an instance of the receiving processor, Then get an instance of the Cast receiver manager, which 

00:04:52.180 --> 00:04:54.720
 This example is responsible for communication with the Google Cast system is responsible for communicating with the Cast system. 

00:04:54.720 --> 00:04:57.550
 And command the system to start, let the receiver know and tell it to start, which lets the receiver device know 

00:04:57.550 --> 00:05:01.420
 The application is loaded and ready to process the message that the application is loaded and ready to process sender messages. 

00:05:01.420 --> 00:05:04.819
 Here you can build additional application logic from here, you can build up additional application logic. 

00:05:04.819 --> 00:05:08.910
 If you do this, you may want to know how to debug the receiver code. And you do, you might want to know how to debug your receiver code. 

00:05:08.910 --> 00:05:12.050
 Fortunately, the application for debugging the receiver is very simple, it's very simple to debug receiver applications. 

00:05:12.050 --> 00:05:13.770
 You can connect to the device debugger You can connect to a device debugger 

00:05:13.770 --> 00:05:17.000
 Just open the receiver registered in Chrome on your computer on a registered receiver by opening Chrome on a computer 

00:05:17.000 --> 00:05:21.860
 And go to the IP address of the receiver device on port 9222 and go to the IP address of the receiver device on port 9222. 

00:05:21.860 --> 00:05:24.450
 You can get the IP address of the receiver device using using the Chrome Settings app. 

00:05:24.450 --> 00:05:26.150
 The IP address on the receiver, the Chrome Cast setup app. 

00:05:26.150 --> 00:05:30.680
 The debugger has full DOM manipulation and JavaScript console support. The debugger has full DOM manipulation and JavaScript console support. 

00:05:30.680 --> 00:05:33.400
 To keep a log between sessions, click on the gear icon in the lower right corner. To keep logs between sessions, click the gear icon 

00:05:33.400 --> 00:05:35.930
 And check the box next to it in the lower right and check the box next to "Preserve 

00:05:35.930 --> 00:05:39.880
 Save the log log upon navigation while navigating." 

00:05:39.880 --> 00:05:42.766
 We are excited to see the programs you developed with Google Cast. We are very excited to see what you build with Google Cast. 

00:05:42.766 --> 00:05:45.430
 In order to keep you going, we provide a lot of resources to get you going, we're providing a number of resources. 

00:05:45.430 --> 00:05:48.240
 You will find more details about the Google SDK. You can discover more details about the Google Cast SDK. 

00:05:48.240 --> 00:05:51.360
 Please visit developers.google.com/cast at developers.google.com/cast. 

00:05:51.360 --> 00:05:53.670
 The design checklist will guide you over a long period of time. The design checklist will go a long way in guiding you 

00:05:53.670 --> 00:05:56.840
 Create a great second screen application down the path to creating great second screen applications. 

00:05:56.840 --> 00:05:59.860
 You can find the sender example and the receiving application example You can find sample senders and sample receiver apps 

00:05:59.860 --> 00:06:02.560
 At github.com/googlecast. at github.com/googlecast. 

00:06:02.560 --> 00:06:07.010
 Upload your question using Stack Overflow and post your questions on Stack Overflow and tag them with Google-cast. 

00:06:07.010 --> 00:06:09.080
 In the future DevBytes show we will go deeper into In future DevBytes, we will dive deeper 

00:06:09.080 --> 00:06:13.680
 Learn about the sender SDK and receiver SDK for each platform prepared by each platform and the Cast receiver SDK. 

00:06:13.680 --> 00:06:16.390
 Join the Google Developer Community on Google+ and you can get the Join the Google Cast developer community on Google+ for pro 

00:06:16.390 --> 00:06:18.550
 Professional guidance and share your experience tips and share your experiences. 

00:06:18.550 --> 00:06:20.960
 Itâ€™s up to you to create a great Google Cast app. Itâ€™s now up to you to go out and create great Google Cast 

00:06:20.960 --> 00:06:22.290
 The best time is the receiver application. 

00:06:22.290 --> 00:06:24.160
 I wish you a happy Happy casting. 

