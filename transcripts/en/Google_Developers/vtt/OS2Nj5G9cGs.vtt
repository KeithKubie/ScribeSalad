WEBVTT
Kind: captions
Language: en

00:00:09.830 --> 00:00:11.500
PAUL SAXMAN: Hello, and
welcome to Google Maps

00:00:11.500 --> 00:00:12.770
Developer Shortcuts.

00:00:12.770 --> 00:00:16.000
I'm Paul Saxman, and this week
is our premiere episode of our

00:00:16.000 --> 00:00:17.580
shortcut series.

00:00:17.580 --> 00:00:20.130
We're going to try to teach
tips, tricks, and techniques

00:00:20.130 --> 00:00:22.680
for building beautiful,
compelling, useful maps in

00:00:22.680 --> 00:00:24.410
about five minutes or less.

00:00:24.410 --> 00:00:26.760
So that's actually the show
is five minutes or less.

00:00:26.760 --> 00:00:28.370
It might take you a couple
minutes longer to get your map

00:00:28.370 --> 00:00:30.290
up and running, but
that's the show.

00:00:30.290 --> 00:00:33.140
So with that, this week what
we're going to do is we're

00:00:33.140 --> 00:00:35.150
going to talk about getting
Google Drive data into a

00:00:35.150 --> 00:00:37.910
Google Map, and if we have time
we'll do the inverse--

00:00:37.910 --> 00:00:40.120
try to get a Google Map
into a Google Drive.

00:00:40.120 --> 00:00:44.160
So we can go both ways, one or
the other, but let's start

00:00:44.160 --> 00:00:45.180
with the easy one.

00:00:45.180 --> 00:00:48.890
So if we go over to my
spreadsheet here, you can see

00:00:48.890 --> 00:00:51.920
that I have a spreadsheet
of about 10 cities.

00:00:51.920 --> 00:00:56.210
That's column A. Column B, I
have populations, and C and D

00:00:56.210 --> 00:00:58.860
is longitude and latitude.

00:00:58.860 --> 00:01:03.070
I got this data from the Natural
Earth data set which

00:01:03.070 --> 00:01:06.040
publishes all kinds of
geographic data we talked

00:01:06.040 --> 00:01:07.530
about in some preview shows.

00:01:07.530 --> 00:01:10.270
Getting that into drive in
this spreadsheet, just a

00:01:10.270 --> 00:01:11.330
matter of cutting and pasting.

00:01:11.330 --> 00:01:15.840
If you have a lot more data,
though, getting into drive--

00:01:15.840 --> 00:01:18.720
different techniques
can apply.

00:01:18.720 --> 00:01:21.530
But the technique here that
I want to teach today is

00:01:21.530 --> 00:01:23.850
actually building a web service
using Google Drive to

00:01:23.850 --> 00:01:25.590
serve this data to a map.

00:01:25.590 --> 00:01:27.050
So the first thing I'm going to
do is I'm going to go over

00:01:27.050 --> 00:01:29.950
to Tools and Script Manager.

00:01:29.950 --> 00:01:31.610
And you can see here I have
a couple scripts already.

00:01:31.610 --> 00:01:33.980
If you don't have these scripts,
which you won't the

00:01:33.980 --> 00:01:36.070
first time you run this, you
just hit the New button.

00:01:36.070 --> 00:01:37.290
I'm going to say start with--

00:01:37.290 --> 00:01:39.280
you can either start with a
script as a web app or just a

00:01:39.280 --> 00:01:40.880
blank project.

00:01:40.880 --> 00:01:42.570
I'm going to start with blank
project, because, actually,

00:01:42.570 --> 00:01:45.240
building these web apps
is really simple.

00:01:45.240 --> 00:01:49.340
And then you're ready to go
actually editing your script.

00:01:49.340 --> 00:01:51.930
But I'm going to actually
start with the one I

00:01:51.930 --> 00:01:55.340
already worked on.

00:01:55.340 --> 00:01:57.160
So you can see a few
things here.

00:01:57.160 --> 00:01:58.660
I have a couple of constants
at the top.

00:01:58.660 --> 00:02:01.600
The spreadsheet ID-- that
actually comes from over on my

00:02:01.600 --> 00:02:02.180
spreadsheet.

00:02:02.180 --> 00:02:05.860
If I close this window, that
spreadsheet ID is actually in

00:02:05.860 --> 00:02:08.780
the browser bar up at the top.

00:02:08.780 --> 00:02:11.030
So you can copy that out
for this script.

00:02:11.030 --> 00:02:12.490
Sheet name--

00:02:12.490 --> 00:02:13.200
this is called data.

00:02:13.200 --> 00:02:16.090
Actually, this is what I called
the sheet here down at

00:02:16.090 --> 00:02:17.370
the bottom.

00:02:17.370 --> 00:02:19.630
By default, it's called sheet
one or something like that.

00:02:19.630 --> 00:02:20.940
You just actually click
on the little down

00:02:20.940 --> 00:02:22.430
arrow and rename it.

00:02:22.430 --> 00:02:25.510
These are two important steps--
getting your key and

00:02:25.510 --> 00:02:26.780
naming your sheet.

00:02:26.780 --> 00:02:28.490
Next thing is you're going to
want to create a doGet get

00:02:28.490 --> 00:02:31.700
function and take a
request object.

00:02:31.700 --> 00:02:35.740
So here I'm actually using the
request object, getting

00:02:35.740 --> 00:02:40.670
parameters out, and getting
JSONP, which is one of the

00:02:40.670 --> 00:02:41.850
parameters that I'm
going to pass in

00:02:41.850 --> 00:02:43.600
later to this web service.

00:02:43.600 --> 00:02:46.050
So that is actually the callback
that I'm passing into

00:02:46.050 --> 00:02:47.950
the web service.

00:02:47.950 --> 00:02:50.490
And here what I'm doing is
actually getting the data out

00:02:50.490 --> 00:02:51.190
of my sheet.

00:02:51.190 --> 00:02:52.450
So here I'm using
the spreadsheet

00:02:52.450 --> 00:02:54.130
app, opening by ID.

00:02:54.130 --> 00:02:57.620
I'm taking the spreadsheet
ID that ended up here.

00:02:57.620 --> 00:03:00.680
Get sheet by name, I'm using
data which was a sheet that I

00:03:00.680 --> 00:03:02.600
named earlier, and
get data range.

00:03:02.600 --> 00:03:04.810
So this is the range object now
that I'm getting out of

00:03:04.810 --> 00:03:06.280
this call here.

00:03:06.280 --> 00:03:11.610
Next is I'm going to stringify
into JSON the values from that

00:03:11.610 --> 00:03:12.170
spreadsheet.

00:03:12.170 --> 00:03:14.310
So here I'm doing range
dot get values.

00:03:14.310 --> 00:03:17.960
I'm passing that into this JSON
stringify method, and

00:03:17.960 --> 00:03:20.320
then I'm wrapping that into
JSONP function call.

00:03:20.320 --> 00:03:22.540
So I'm using my callback,
which is the method I'm

00:03:22.540 --> 00:03:25.350
passing in, or will be passing
into the request, and wrapping

00:03:25.350 --> 00:03:27.400
that in parentheses, because
this is actually a function

00:03:27.400 --> 00:03:28.900
call, a JavaScript function
call, that

00:03:28.900 --> 00:03:30.930
I'll be using later.

00:03:30.930 --> 00:03:33.900
And very last line here, what
I'm doing is I'm just taking

00:03:33.900 --> 00:03:36.710
that JSON output, creating
this text output object,

00:03:36.710 --> 00:03:39.510
setting the MIME type to
JSON, and returning

00:03:39.510 --> 00:03:41.750
from this doGet method.

00:03:41.750 --> 00:03:43.850
This down here is just
some testing code.

00:03:43.850 --> 00:03:45.770
If you want to actually
run this--

00:03:45.770 --> 00:03:48.170
create a function like this to
run it, you can get the output

00:03:48.170 --> 00:03:50.860
in the logs just for some
eyeballs testing.

00:03:50.860 --> 00:03:56.160
Once you have such a script
together, the next thing

00:03:56.160 --> 00:03:57.080
you're going to want
to do is go to

00:03:57.080 --> 00:04:00.150
file and manage versions.

00:04:00.150 --> 00:04:03.440
So what here you're going to do
is name a version for your

00:04:03.440 --> 00:04:05.810
application--

00:04:05.810 --> 00:04:08.090
name your version and
save a new version.

00:04:08.090 --> 00:04:09.420
So I didn't make any changes,
so I'm not going

00:04:09.420 --> 00:04:10.400
to save a new one.

00:04:10.400 --> 00:04:12.820
You can see I have about five
versions already, though.

00:04:12.820 --> 00:04:15.540
Or I have had five
versions already.

00:04:15.540 --> 00:04:17.180
We'll close that.

00:04:17.180 --> 00:04:19.130
Once you've saved the version,
you can go over to this little

00:04:19.130 --> 00:04:22.186
arrow here in the cloud, which
is deploy as a web app, or you

00:04:22.186 --> 00:04:23.880
can also hit the Publish
button and also

00:04:23.880 --> 00:04:25.950
deploy as web app.

00:04:25.950 --> 00:04:28.210
If you haven't already deployed
it, I believe you

00:04:28.210 --> 00:04:29.650
just get the bottom part here.

00:04:29.650 --> 00:04:32.200
So you pick a project version,
which was the version that we

00:04:32.200 --> 00:04:36.550
created earlier, executable as
me, and what you're going to

00:04:36.550 --> 00:04:39.230
want to do is you're going to
make anyone, even anonymous,

00:04:39.230 --> 00:04:40.870
can actually execute your app.

00:04:40.870 --> 00:04:44.250
Once you do this, be careful,
because once this is up and

00:04:44.250 --> 00:04:46.570
running anybody can actually
extract that data using this

00:04:46.570 --> 00:04:47.820
web service from your
spreadsheet.

00:04:51.070 --> 00:04:51.680
So that's it.

00:04:51.680 --> 00:04:54.630
So once we do all those tricks--
so let me go back

00:04:54.630 --> 00:04:56.410
here, deploy as a web app.

00:04:56.410 --> 00:04:59.070
I already have this running, so
I'm just going to say give

00:04:59.070 --> 00:05:00.730
me my latest code.

00:05:00.730 --> 00:05:03.010
You can see that I get a URL
here, and this actually

00:05:03.010 --> 00:05:05.750
returns the data in JSON
in my spreadsheet.

00:05:05.750 --> 00:05:07.900
Here I'm getting undefined
because I didn't actually pass

00:05:07.900 --> 00:05:11.710
in the JSONP.

00:05:11.710 --> 00:05:14.610
Very last thing, so you're going
to want to copy this

00:05:14.610 --> 00:05:17.060
script line out here, because
this is what you're actually

00:05:17.060 --> 00:05:19.090
going to paste into
your map code.

00:05:19.090 --> 00:05:22.120
Now I'm going to go over
to some map code.

00:05:22.120 --> 00:05:24.380
I'm going to paste in this data
services URL, which was

00:05:24.380 --> 00:05:27.310
the one that I just made, or
that I just copied out.

00:05:27.310 --> 00:05:29.630
I'm going to add a
JSONP parameter.

00:05:29.630 --> 00:05:31.640
So this is the callback
function.

00:05:31.640 --> 00:05:35.410
So callback is actually my
JSONP callback in my map

00:05:35.410 --> 00:05:36.550
JavaScript.

00:05:36.550 --> 00:05:38.090
I'm initializing a map here.

00:05:38.090 --> 00:05:39.430
Here's a little tricky bit.

00:05:39.430 --> 00:05:41.740
So after I've initialized the
map, I'm actually going to

00:05:41.740 --> 00:05:44.920
create a script tag, pass in the
data services URL, which

00:05:44.920 --> 00:05:48.610
is the URL to this web service
that's running in Google

00:05:48.610 --> 00:05:52.300
Drive, and then I'm actually
going to append this object to

00:05:52.300 --> 00:05:55.380
the head of my DOM tree.

00:05:55.380 --> 00:05:56.830
And that's actually going
to execute the

00:05:56.830 --> 00:05:59.110
script that this JSON--

00:05:59.110 --> 00:06:02.370
it's actually going to call
the JSONP service.

00:06:02.370 --> 00:06:03.790
And then I have a callback
function.

00:06:03.790 --> 00:06:05.570
I'm getting the data back.

00:06:05.570 --> 00:06:07.060
This is just a--

00:06:07.060 --> 00:06:08.150
we saw the JSON before.

00:06:08.150 --> 00:06:10.520
It's actually just an
array of an array.

00:06:10.520 --> 00:06:12.580
So I'm actually creating a
marker for each of the

00:06:12.580 --> 00:06:16.160
lat-long points that are
in this spreadsheet.

00:06:16.160 --> 00:06:17.530
That's pretty much it.

00:06:17.530 --> 00:06:19.670
And then there's a little bit of
map canvas code down here.

00:06:19.670 --> 00:06:22.170
So it's a very simple
application.

00:06:22.170 --> 00:06:25.400
And if we go over to what the
end product looks like, I'm

00:06:25.400 --> 00:06:28.370
just running this on locally,
so if I reload this, this is

00:06:28.370 --> 00:06:29.910
the code that I just showed
a minute ago.

00:06:29.910 --> 00:06:31.220
You'd see all these points
rendered on a

00:06:31.220 --> 00:06:33.010
map from Google Drive.

00:06:33.010 --> 00:06:35.440
Just to prove the concept, if I
go back over here, let's say

00:06:35.440 --> 00:06:38.900
I want to get rid of all
but one of these.

00:06:38.900 --> 00:06:42.410
I could just delete those
out, spreadsheet saved.

00:06:42.410 --> 00:06:44.360
I go back to my awesome map.

00:06:44.360 --> 00:06:48.050
I reload it, and all I
have is Japan now.

00:06:48.050 --> 00:06:52.090
So this is a great way you can
create dynamic data or create

00:06:52.090 --> 00:06:53.870
a spreadsheet, share it with
other people that can actually

00:06:53.870 --> 00:06:57.060
change the data, dynamically
changing the map.

00:06:57.060 --> 00:06:59.000
Really great use case there.

00:06:59.000 --> 00:07:01.000
I'm out of time, so today I'm
not going to cover actually

00:07:01.000 --> 00:07:03.810
getting your Google Map into
Google Drive, but we'll cover

00:07:03.810 --> 00:07:05.840
that in another episode.

00:07:05.840 --> 00:07:08.580
So if you have any questions
about the show, if you have

00:07:08.580 --> 00:07:11.400
any other ideas for future
shows, let me know.

00:07:11.400 --> 00:07:14.500
And, yeah-- just post them in
the comments of the YouTube

00:07:14.500 --> 00:07:18.040
stream or on Google+ With that,
we'll see you next week.

