WEBVTT
Kind: captions
Language: en-GB

00:00:00.260 --> 00:00:04.900
For years and years, there have been, as part of 
our civilisation

00:00:05.100 --> 00:00:09.080
special purpose electromechanical computers

00:00:09.260 --> 00:00:12.340
and a classic example of these is vending machines.

00:00:12.340 --> 00:00:18.380
If you put in the right combination of money, they will 
vend you a bar of chewing gum, or whatever.

00:00:18.580 --> 00:00:23.620
And they've been around for so long that they really are 
largely mechanical.

00:00:23.620 --> 00:00:27.000
They're a bit more sophisticated now because they've got 
microchips inside them

00:00:27.000 --> 00:00:28.560
but they don't really need that.

00:00:28.580 --> 00:00:33.100
We're going to look at the fundamentals of vending machines,

00:00:33.540 --> 00:00:38.520
Or, if you like, very similar, how do I pay my car park charge

00:00:38.520 --> 00:00:43.120
and get a ticket that I put on my windshield to say 
"Yes, I have paid".

00:00:46.200 --> 00:00:52.720
What's the process of saying "you must pay me 25p" (if you're in the UK)

00:00:52.720 --> 00:00:55.520
in the States, you must pay me 25 cents.

00:00:55.520 --> 00:00:59.020
And I've got real live UK coins here.

00:00:59.020 --> 00:01:05.780
This is one of the simplest finite state automaton examples
that I know of

00:01:05.780 --> 00:01:08.400
because I think you'll all find it familiar.

00:01:08.640 --> 00:01:13.160
Here in the UK, if we're told that we have to pay 25p

00:01:13.160 --> 00:01:20.000
typically you would have to choose from a five pence coin,
a ten pence coin and a twenty pence coin

00:01:24.000 --> 00:01:26.960
Unlike the USA, we do not have a 25 pence coin.

00:01:26.960 --> 00:01:29.660
You cannot just, as it were, put one coin in

00:01:29.660 --> 00:01:31.340
and that's 25 and you're done.

00:01:31.340 --> 00:01:35.160
You've got to build it up out of any possible combination of these.

00:01:35.280 --> 00:01:39.240
And if you look at this diagram with me, it's so simple.

00:01:39.240 --> 00:01:40.980
It's just self explanatory.

00:01:40.980 --> 00:01:44.180
You start over here, the machine has got no money in it.

00:01:44.180 --> 00:01:47.680
You put in one of these 5p coins, and it goes "chunk!"

00:01:47.820 --> 00:01:51.220
and it moves into what I shall call "the five state".

00:01:51.220 --> 00:01:54.380
It's basically saying to itself "I'm happy, I've got 5p so far."

00:01:54.380 --> 00:01:56.720
But it's not enough yet. Well, all right

00:01:56.720 --> 00:02:00.260
Let's be a little controversial, let's make our second coin be a 10p coin.

00:02:00.440 --> 00:02:03.800
Now we take this transition out of the five state

00:02:03.860 --> 00:02:05.480
we've put in a ten coin

00:02:05.480 --> 00:02:08.440
and it jet-propels us into the fifteen state.

00:02:08.460 --> 00:02:12.280
So the machine, if only it had a brain, is effectively smiling and saying

00:02:12.480 --> 00:02:14.720
"I'm on the way, I've got 15p"

00:02:14.780 --> 00:02:15.960
but the aim is 25.

00:02:15.960 --> 00:02:19.520
Well, there's two ways to get from 15 to 25, look

00:02:19.520 --> 00:02:23.740
You either put two more fives in, that gets you there,
or one ten.

00:02:23.740 --> 00:02:26.860
And when you get to 25, I've put it inside a double circle

00:02:26.860 --> 00:02:32.140
which is the convention, because that's the finish state,
you've put in 25p.

00:02:32.140 --> 00:02:35.820
And eventually it goes "bzzt, bzzt" and prints you out a ticket.

00:02:35.820 --> 00:02:39.640
And because you've paid 25p, it entitles you to two hours of
parking, or whatever.

00:02:39.640 --> 00:02:47.500
All that this is doing is encoding in this diagram all the possible
ways that you can build up 25p.

00:02:47.500 --> 00:02:52.060
And if you thing about it, in a weird way, it's kind of 
like a language.

00:02:52.220 --> 00:02:59.460
And the sentences in the language are possible ways to make up 25p.

00:02:59.460 --> 00:03:02.720
So here's a legal sentence - this is the other way to think
about it.

00:03:02.720 --> 00:03:07.240
A legal sentence in this language is "five five five five five".

00:03:07.280 --> 00:03:12.480
Another legal sentence, just using the words "twenty" and
"ten" and "five" is

00:03:12.480 --> 00:03:16.160
"twenty, five". That's a legal sentence: it makes up 25p.

00:03:16.160 --> 00:03:17.960
How about "ten ten five"?

00:03:17.960 --> 00:03:20.160
Ah! but then it could be in any combination

00:03:20.160 --> 00:03:24.320
There's "ten ten five", "five ten ten", "ten five ten".

00:03:25.140 --> 00:03:27.300
"five five five ten" works.

00:03:27.300 --> 00:03:33.940
So you can go through this if you want to work out all of the
many, many combinations that will get you to 25p.

00:03:33.940 --> 00:03:38.740
It leaves you of course with situations like what happens if
you overpay

00:03:38.820 --> 00:03:42.480
you've only got three of these 10p coins, 30p.

00:03:42.600 --> 00:03:50.840
Many say "if you overpay, I don't mind, it's more profit
for me" and, you know, I'll give you the ticket anyway

00:03:50.840 --> 00:03:54.080
Some, badly designed ones, just seize up and sulk.

00:03:54.080 --> 00:03:57.200
But then if they seize up and sulk, the question is

00:03:57.200 --> 00:04:00.520
in the end, is there a sort of reject button you can  press

00:04:00.520 --> 00:04:03.460
which says "I've given you too much, now give it all
back to me" ?

00:04:03.460 --> 00:04:10.660
Or does it just gobble it up and say "I'm sorry, it's an illegal
amount, it's too much and I won't print your ticket"

00:04:10.660 --> 00:04:13.420
and this gets people really, really annoyed when this happens.

00:04:13.420 --> 00:04:17.340
But you all know the symptoms of exactly this sort of thing.

00:04:17.340 --> 00:04:22.460
And like I'm saying, these are so commonplace, they've been with us for ages.

00:04:22.460 --> 00:04:26.380
But the crucial thing I want to emphasise is the following:

00:04:26.440 --> 00:04:29.780
If you're sitting there in the fifteen state

00:04:30.040 --> 00:04:35.540
all that this machine says, or knows inside itself, if you like

00:04:35.540 --> 00:04:38.660
is "I am in the fifteen state".

00:04:38.660 --> 00:04:45.380
If you say to it "but how did you get there?", it would say
"I don't know"

00:04:45.880 --> 00:04:53.240
"I just don't know, I retain no memory of the coins I've had, to
get me to this state at all.

00:04:53.240 --> 00:04:57.540
I just know I'm in fifteen, it could have been ten and five,
it could have been five five five.

00:04:57.540 --> 00:04:59.860
Who cares? I'm in a fifteen state."

00:04:59.860 --> 00:05:04.540
So that is why these are machines with no need for memory.

00:05:04.540 --> 00:05:08.580
They are, if you like, a processing system that accepts coins.

00:05:08.580 --> 00:05:12.540
And you could perhaps argue that it's the ultimate special purpose computer.

00:05:12.560 --> 00:05:18.440
It's a special purpose dumb computer that vends tickets for a parking lot.

00:05:18.440 --> 00:05:25.120
The only thing it does need is, when you put in a coin,
every single coin, it needs a holding position.

00:05:25.120 --> 00:05:29.020
You could think of this as being like a sort of register inside a
central processing unit.

00:05:29.020 --> 00:05:32.460
It holds the current coin and often will examine it.

00:05:32.460 --> 00:05:36.760
And of course, in the early days, all it could do to check that it
was valid was maybe weigh it.

00:05:36.760 --> 00:05:42.840
Nowadays you can shine lasers at them, do spectroscopic
analysis and all sorts to determine.

00:05:42.840 --> 00:05:50.800
So the current coin is held in - I will always think of it as a sort
of register, to hold it until it's decided to accept it.

00:05:50.800 --> 00:05:55.660
And when it's accepted, it drops into a pot of all the coins
you've given so far

00:05:55.660 --> 00:06:00.400
and maybe when we're in the fifteen state we get another
five, we go into twenty

00:06:00.400 --> 00:06:05.140
but that latest five just goes "chunk!" and you hear it
drop inside, and it's in the pot.

00:06:05.140 --> 00:06:10.740
But the pot is amorphous, the pot has no knowledge of how
those coins got in there and in what order.

00:06:10.740 --> 00:06:12.020
It doesn't need to know that.

00:06:12.020 --> 00:06:16.160
&gt;&gt; Sean: We've talked about vending machines, we've talked 
about parking machines

00:06:16.160 --> 00:06:23.160
Is there anything that they get used for in computer science,
maybe that's more of a kind of, technical...

00:06:23.160 --> 00:06:28.920
&gt;&gt; DFB: Yes, vending machines, parking machines, the
simplest thing, and what you're asking is:

00:06:28.920 --> 00:06:32.920
"What's the thing that really turns on computer scientists
that's that simple?"

00:06:32.920 --> 00:06:35.540
I'll tell you Sean, what's that simple.

00:06:35.540 --> 00:06:40.840
It's the rules for "What is a valid variable name in 
a language".

00:06:40.840 --> 00:06:46.480
Now, if you've done any programming, you will know that the 
rule typically is:

00:06:46.480 --> 00:06:50.040
A variable name - an identifier as they're sometimes called -

00:06:50.040 --> 00:06:54.820
can be any combination of letters or digits, in any order,

00:06:54.820 --> 00:06:57.900
but it must start with a letter, yeah?

00:06:57.900 --> 00:07:03.340
So you can have "Sean", "Dave", they'll be variables, you can
say they're integers, or whatever.

00:07:03.340 --> 00:07:10.180
You can even have "k9" as a thing, but you can't have
"9k", yeah?

00:07:10.180 --> 00:07:16.680
Because anything beginning with a digit could be the start of
a number.

00:07:16.920 --> 00:07:24.100
And what languages do not want is to spend ages deciding
whether "9999" really is meant to be a number

00:07:24.100 --> 00:07:27.660
or, in some weird way, you're trying to name a variable.

00:07:27.660 --> 00:07:31.900
Oh no, if it starts with a digit, it's gonna be a number isn't it?

00:07:31.900 --> 00:07:36.660
If it starts with a letter, it's an identifier or a variable name.

00:07:36.660 --> 00:07:40.480
And you can see with that, you could draw one of
these diagrams.

00:07:40.480 --> 00:07:43.700
You could say, come in, is it a letter? Fine.

00:07:43.700 --> 00:07:50.220
Next state. Is it a letter? Fine. Go back, recursively into
yourself and expect more letters.

00:07:50.320 --> 00:07:54.480
Or, is it a number? Loop back recursively into yourself again.

00:07:54.480 --> 00:08:00.360
You've got a loop coming out and back in again with "letter" on top of it,

00:08:00.360 --> 00:08:03.460
and a loop at the bottom, saying "digit" on the bottom of it.

00:08:03.460 --> 00:08:08.360
And you can keep going round and round, taking any
combinations of letters or digits

00:08:08.360 --> 00:08:12.680
Until typically what happens is you come to a sort of
"end symbol".

00:08:12.680 --> 00:08:16.560
And in a program, what will happen of course, is that you'll
have a semicolon.

00:08:16.560 --> 00:08:19.220
int sean;

00:08:19.220 --> 00:08:22.180
That says, that's the end of the identifier.

00:08:22.180 --> 00:08:25.460
Or sometimes it'll be a comma, if you're declaring lots
of things.

00:08:25.460 --> 00:08:29.200
But there's always some end symbol that tells you 
"end of identifier".

00:08:29.200 --> 00:08:30.960
And you say, is that legal?

00:08:30.960 --> 00:08:34.560
You don't need anything fancy to recognise that that's a
legal identifier!

00:08:34.560 --> 00:08:39.840
you don't need stacks, you don't need tons of RAM, it's
just one of these things.

