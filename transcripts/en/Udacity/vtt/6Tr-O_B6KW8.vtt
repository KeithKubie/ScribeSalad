WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Now let's get to solving the problem and coding it up.

00:00:03.000 --> 00:00:06.000
But before I do that, I want to introduce one more piece of jargon,

00:00:06.000 --> 00:00:12.000
which is if I'm at a particular state, and I decide that that's the endpoint

00:00:12.000 --> 00:00:17.000
of the path that I want to expand, and I come up with the states you can get to from there

00:00:17.000 --> 00:00:22.000
by expanding the path and the steps that it takes to get to those states.

00:00:22.000 --> 00:00:26.000
I call that the successors to this state.

00:00:26.000 --> 00:00:31.000
The successors are a collection of states that you can reach\

00:00:31.000 --> 00:00:34.000
and the steps that it took to get there.

00:00:34.000 --> 00:00:39.000
Here is my solution. It's a little bit complicated. Let's go through it step-by-step.

00:00:39.000 --> 00:00:44.000
I'm saying the input to this pour problem function are X and Y,

00:00:44.000 --> 00:00:49.000
which are the capacity of the glass for that.

00:00:49.000 --> 00:00:53.000
Then the goal, which is going to be an integer, like 6, to say that's how much I'm trying to get to.

00:00:53.000 --> 00:00:56.000
That can be in either one of the glasses.

00:00:56.000 --> 00:01:03.000
Then the start state, which I'm defaulting to 0 and 0, saying both glasses have current level 0,

00:01:03.000 --> 00:01:10.000
but if you wanted you could generalize the problem and pass in something else as what we're starting with.

00:01:10.000 --> 00:01:16.000
I'm using lowercase x and lowercase y to indicate the current capacity of the glasses.

00:01:16.000 --> 00:01:20.000
Here I check and see are we done before we even get going?

00:01:20.000 --> 00:01:26.000
Did you give me a start state and say the goal is the have a glass with zero in it?

00:01:26.000 --> 00:01:29.000
Then we're done before doing any actions.

00:01:29.000 --> 00:01:31.000
Go ahead and return that.

00:01:31.000 --> 00:01:34.000
What I'm going to return is called a "path."

00:01:34.000 --> 00:01:42.000
The path is a alteration of states and an arrow, which will give a name to each action,

00:01:42.000 --> 00:01:49.000
and then the other states that it goes to, and we alternate out with the states action states and so on.

00:01:49.000 --> 00:01:53.000
Here, if there's nothing to do, it's just a state with no actions.

00:01:53.000 --> 00:01:57.000
We're going to keep track of the states that we've already explored

00:01:57.000 --> 00:01:59.000
and that's going to be a set.

00:01:59.000 --> 00:02:01.000
We're going to keep track of the frontier.

00:02:01.000 --> 00:02:08.000
Conceptually, that's a set too, but we're going to pull the items off of the frontier one at a time,

00:02:08.000 --> 00:02:11.000
so I've made it an ordered list rather than a set.

00:02:11.000 --> 00:02:14.000
I know which element of the frontier I want to explore first.

00:02:14.000 --> 00:02:21.000
So the explored is a set of states, and a frontier is an ordered list of paths.

00:02:21.000 --> 00:02:26.000
The only path we have so far is the trivial path that says we're starting at the start,

00:02:26.000 --> 00:02:28.000
and we haven't gone anywhere else yet.

00:02:28.000 --> 00:02:30.000
That's what we start our frontier with.

00:02:30.000 --> 00:02:35.000
While the frontier is left, while there is still frontier states that we haven't explored from yet,

00:02:35.000 --> 00:02:37.000
we pop off the first one.

00:02:37.000 --> 00:02:43.000
Pop(0) says take the 0th element of the list, so we're going to pull elements off

00:02:43.000 --> 00:02:47.000
of the front of the list and push them onto the end of the list.

00:02:47.000 --> 00:02:50.000
Then say the current state is the last element of the path,

00:02:50.000 --> 00:02:56.000
so the path goes from one state to the next, and the last element of the path is the current state.

00:02:56.000 --> 00:02:58.000
Let's take x and y from there.

00:02:58.000 --> 00:03:04.000
Then I've defined a successor function that gives me all the successor states

00:03:04.000 --> 00:03:06.000
and the actions we used to get from there.

00:03:06.000 --> 00:03:09.000
There should be six of those.

00:03:09.000 --> 00:03:15.000
Then if we say if that new state is not explored then it's something new.

00:03:15.000 --> 00:03:17.000
If it was explored, there is nothing left to do.

00:03:17.000 --> 00:03:19.000
We're already explored from there.

00:03:19.000 --> 00:03:25.000
If it hasn't been explored yet, then add it to the explored set, make up a new path,

00:03:25.000 --> 00:03:30.000
which consists of the old path plus we follow an action to get to the new state.

00:03:30.000 --> 00:03:34.000
If the goal number is somewhere in that state, so the goal is 6

00:03:34.000 --> 00:03:42.000
and the state is the two levels of the glasses, say 6 and 3, yes, 6 is in 6 and 3.

00:03:42.000 --> 00:03:47.000
Then we're done. Return that path as the winner, the path that reached the goal.

00:03:47.000 --> 00:03:54.000
Otherwise, just add this path onto the frontier, and we'll pull something off the frontier later.

00:03:54.000 --> 00:03:57.000
If we go all the way through and we run out of frontiers to explore from,

00:03:57.000 --> 00:04:00.000
then we can't reach the goal and we return fail.

00:04:00.000 --> 00:04:02.000
You could have Fail be None.

00:04:02.000 --> 00:04:06.000
I decided to make it the empty list, because all the other things we're returning were lists.

00:04:06.000 --> 00:04:12.000
Either way, None or Fail, both are equivalent to False in Python if statements.

00:04:12.000 --> 00:04:15.000
So probably either one would do fine.

00:04:15.000 --> 00:04:17.000
Here's my successor function.

00:04:17.000 --> 00:04:22.000
It takes the current levels of the glasses and the maximum capacity of the glasses.

00:04:22.000 --> 00:04:28.000
What it's going to return is a dictionary of state-action pairs.

00:04:28.000 --> 00:04:33.000
The state is just an x-y pair of what the levels of the glasses are going to be,

00:04:33.000 --> 00:04:35.000
and the action is how you got there.

00:04:35.000 --> 00:04:38.000
We're just going to use strings to represent those actions,

00:04:38.000 --> 00:04:40.000
so it's just something that we can print out

00:04:40.000 --> 00:04:44.000
that is otherwise unimportant in the operation of the program.

00:04:44.000 --> 00:04:49.000
First I wanted to check that this is a legal state that the fill level of x is less than its capacity

00:04:49.000 --> 00:04:51.000
and the same for y.

00:04:51.000 --> 00:04:55.000
Then I said here are the six possibilities.

00:04:55.000 --> 00:04:58.000
The pouring is complicated. Let's do the filling first.

00:04:58.000 --> 00:05:03.000
The filling says you can fill X up to its capacity--capital X.

00:05:03.000 --> 00:05:06.000
You can fill Y up to its capacity--capital Y.

00:05:06.000 --> 00:05:09.000
You can empty X. That'll become 0.

00:05:09.000 --> 00:05:12.000
You can empty Y. It will become 0.

00:05:12.000 --> 00:05:14.000
Then the fill--there are two cases.

00:05:14.000 --> 00:05:21.000
If the total amount of water is less than y, then you can take all the water in the first glass,

00:05:21.000 --> 00:05:24.000
which is x, and add it into y, so you get y plus x.

00:05:24.000 --> 00:05:27.000
Same thing in the other direction.

00:05:27.000 --> 00:05:32.000
But if the total amount of water is more than the destination that you're trying to pour it into,

00:05:32.000 --> 00:05:38.000
then you could only pour as much as will fill up the other glass.

00:05:38.000 --> 00:05:42.000
We can see that there is conservation of water here.

00:05:42.000 --> 00:05:47.000
The total amount is x + y minus this difference plus this difference.

00:05:47.000 --> 00:05:54.000
I got the definition of my program pretty much just by following out the implications of this diagram.

00:05:54.000 --> 00:05:59.000
We're going to keep track of an explored set, never try to return there,

00:05:59.000 --> 00:06:02.000
expand the frontier, pop off one element of the frontier,

00:06:02.000 --> 00:06:06.000
add in the new elements, and check when we get to the goal.

00:06:06.000 --> 00:06:10.000
Then that was all kind of generic for any exploration problem.

00:06:10.000 --> 00:06:15.000
Then for the specific water problem, the successor function and the way that was laid out

00:06:15.000 --> 09:59:59.000
was specific to what we're doing with the glasses.

