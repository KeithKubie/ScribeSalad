WEBVTT
Kind: captions
Language: en

00:00:03.834 --> 00:00:05.968
man: Hello.

00:00:05.968 --> 00:00:07.467
Hello, and welcome

00:00:07.467 --> 00:00:10.133
to the Android
Open Accessories talk.

00:00:10.133 --> 00:00:13.801
Um, I'm glad you all came.
[cheers and applause]

00:00:13.801 --> 00:00:17.667
man: So welcome
to the secret talk.

00:00:17.667 --> 00:00:21.467
So as you heard
in this morning's keynote,

00:00:21.467 --> 00:00:24.467
we've been doing a lot of work
on Android, um,

00:00:24.467 --> 00:00:26.801
to make it more open

00:00:26.801 --> 00:00:30.300
and to enable, um,
users and developers

00:00:30.300 --> 00:00:31.968
to make use of more

00:00:31.968 --> 00:00:34.467
and different
interesting peripherals,

00:00:34.467 --> 00:00:36.133
um, over USB.

00:00:36.133 --> 00:00:38.467
So, you know,
previously with Android,

00:00:38.467 --> 00:00:40.801
um, you know,
the Android device supported

00:00:40.801 --> 00:00:43.968
a certain number of, um,
of interfaces.

00:00:43.968 --> 00:00:46.634
You could connect to it
as a USB mass storage device.

00:00:46.634 --> 00:00:48.634
You could connect to it, um,

00:00:48.634 --> 00:00:51.334
to run the Android Debug Bridge
and so forth.

00:00:51.334 --> 00:00:54.133
Uh, but now we've extended
those capabilities

00:00:54.133 --> 00:00:55.968
with new APIs,

00:00:55.968 --> 00:00:58.968
um, and--and new capabilities

00:00:58.968 --> 00:01:00.701
to attach accessories

00:01:00.701 --> 00:01:02.367
and to connect to, uh,

00:01:02.367 --> 00:01:05.200
traditional host-mode
USB device peripherals.

00:01:05.200 --> 00:01:08.200
So I'm actually gonna
start this talk.

00:01:08.200 --> 00:01:10.200
Um, I should introduce myself.

00:01:10.200 --> 00:01:11.868
My name is Jeff Brown.

00:01:11.868 --> 00:01:14.534
I'm a member
of the Android framework team.

00:01:14.534 --> 00:01:16.200
And this is Mike Lockwood.

00:01:16.200 --> 00:01:18.367
He's also a member
of the Android framework team.

00:01:18.367 --> 00:01:21.868
And Erik Gilling
from the Android systems team.

00:01:21.868 --> 00:01:23.367
So I'm gonna--

00:01:23.367 --> 00:01:27.367
I'm gonna talk about, um,
input devices.

00:01:27.367 --> 00:01:30.534
So we've got USB,

00:01:30.534 --> 00:01:32.534
which, you know,

00:01:32.534 --> 00:01:34.868
USB host mode,
which means now we have access

00:01:34.868 --> 00:01:38.367
to all of the interesting,
standard USB peripherals

00:01:38.367 --> 00:01:40.534
that you're used to on a PC.

00:01:40.534 --> 00:01:43.367
So I've got, um,
a USB keyboard here,

00:01:43.367 --> 00:01:45.701
and I've got a USB mouse.

00:01:45.701 --> 00:01:47.701
So these are--
these are wireless,

00:01:47.701 --> 00:01:49.701
and hopefully, it works.
[laughs]

00:01:49.701 --> 00:01:52.701
And, um, they're
currently plugged in, uh,

00:01:52.701 --> 00:01:56.367
the--the dongles are plugged
into a standard USB hub.

00:01:56.367 --> 00:01:59.367
So all right, you know,

00:01:59.367 --> 00:02:01.434
pretty much
what you would expect.

00:02:01.434 --> 00:02:03.100
We've got a USB keyboard.

00:02:03.100 --> 00:02:06.601
We should be able
to use it to type.

00:02:06.601 --> 00:02:09.434
All right, so I've got 
the AK Notepad application

00:02:09.434 --> 00:02:11.434
from Android Market.

00:02:11.434 --> 00:02:13.434
I'm just gonna use this
as a basic text editor.

00:02:13.434 --> 00:02:15.267
So all right--keyboard.

00:02:15.267 --> 00:02:18.100
I love Android...

00:02:18.100 --> 00:02:20.601
sort of.
[laughter]

00:02:20.601 --> 00:02:23.200
Brown: Well,
I definitely love Android.

00:02:25.000 --> 00:02:27.601
Brown: Um, so you've got a--
so you've got a keyboard.

00:02:27.601 --> 00:02:29.601
So you can do
all the basic things

00:02:29.601 --> 00:02:31.467
you would expect to do
with a keyboard,

00:02:31.467 --> 00:02:35.601
um, you know, control-C,
copy, paste, all that stuff.

00:02:35.601 --> 00:02:39.100
Um, it would help if I actually
could see what I was doing.

00:02:39.100 --> 00:02:41.934
There we are.
It's a keyboard.

00:02:41.934 --> 00:02:44.434
Um, we've also got a mouse.

00:02:44.434 --> 00:02:47.100
So you've got your mouse cursor
going around.

00:02:47.100 --> 00:02:49.767
Um, we support the scroll wheel,

00:02:49.767 --> 00:02:52.767
and there's new APIs
that applications can use

00:02:52.767 --> 00:02:54.767
to listen to hover events
from the mouse

00:02:54.767 --> 00:02:56.267
and scroll events.

00:02:56.267 --> 00:02:58.267
Um, this is implemented

00:02:58.267 --> 00:03:00.834
in, um, all of the standard
framework widgets,

00:03:00.834 --> 00:03:02.667
so you can scroll through lists.

00:03:02.667 --> 00:03:05.200
Um, you can also scroll
around, uh, web browser pages.

00:03:05.200 --> 00:03:08.000
So now that you've got,
you know, a keyboard and mouse,

00:03:08.000 --> 00:03:10.334
and you can attach your tablet

00:03:10.334 --> 00:03:12.934
to a, uh, an HDMI display,

00:03:12.934 --> 00:03:15.501
you don't need
your laptop anymore.

00:03:15.501 --> 00:03:18.501
So one other thing
I want to talk about,

00:03:18.501 --> 00:03:20.501
uh, which was mentioned
during the keynote,

00:03:20.501 --> 00:03:22.834
is that we also support
game controllers.

00:03:22.834 --> 00:03:26.334
Um, so we now have new APIs
for--for joysticks.

00:03:26.334 --> 00:03:30.334
Um, there's a new callback
that you can use--

00:03:30.334 --> 00:03:33.167
you can register in your views
called onGenericMotionEvent,

00:03:33.167 --> 00:03:35.000
and it exposes

00:03:35.000 --> 00:03:37.367
all the various,
uh, joystick axes,

00:03:37.367 --> 00:03:40.167
um, that exist
on a game controller.

00:03:40.167 --> 00:03:42.501
Um, it also works on,
you know, flight sticks

00:03:42.501 --> 00:03:44.167
and other things like that.

00:03:44.167 --> 00:03:47.501
Uh, we've got over 30
different axes plumbed through,

00:03:47.501 --> 00:03:50.334
um, including, you know,
throttle controls.

00:03:50.334 --> 00:03:52.667
If you've got a, uh,
a car-driving rig,

00:03:52.667 --> 00:03:54.501
um, that works.

00:03:54.501 --> 00:03:57.000
Um, 3-D positioning mouse
is kind of like a joystick.

00:03:57.000 --> 00:03:58.667
It's just got six axes.

00:03:58.667 --> 00:04:01.901
Um, so you can--you can listen
to these in your app, as well.

00:04:01.901 --> 00:04:04.901
So I'm just gonna show you
very quickly

00:04:04.901 --> 00:04:08.567
a-a simple API demo sample.

00:04:08.567 --> 00:04:11.901
So you already saw this morning
the joystick being used

00:04:11.901 --> 00:04:13.400
to run "Quordy."

00:04:13.400 --> 00:04:16.400
Um, but we have a little sample

00:04:16.400 --> 00:04:20.067
that's in the Honeycomb 3.1 SDK,

00:04:20.067 --> 00:04:23.067
um, which demonstrates

00:04:23.067 --> 00:04:25.067
sort of all of the data
that you can get

00:04:25.067 --> 00:04:26.567
out of a joystick.

00:04:26.567 --> 00:04:28.567
so on the left-hand pane,

00:04:28.567 --> 00:04:31.734
uh, we've got a list of axes.

00:04:31.734 --> 00:04:33.734
So there's some new APIs
that you can use

00:04:33.734 --> 00:04:36.734
to enumerate the input devices
that are present on the system

00:04:36.734 --> 00:04:38.234
and query the capabilities,

00:04:38.234 --> 00:04:40.734
query the axes that are
available on joysticks,

00:04:40.734 --> 00:04:43.067
query the buttons
that are available

00:04:43.067 --> 00:04:44.567
and--and their ranges.

00:04:44.567 --> 00:04:46.067
And on the right,

00:04:46.067 --> 00:04:48.234
I've got a very simple
physics-based game. [laughs]

00:04:48.234 --> 00:04:50.734
So, um, anyway,

00:04:50.734 --> 00:04:54.067
that's--that's pretty much it
for input devices for now.

00:04:54.067 --> 00:04:58.133
And I'm going
to hand off to,

00:04:58.133 --> 00:05:00.200
uh, Erik Gilling,
who's gonna tell you more

00:05:00.200 --> 00:05:02.567
about how USB really works

00:05:02.567 --> 00:05:05.067
and, uh, what all
we can do with it.

00:05:05.067 --> 00:05:06.901
Gilling: Thanks, Jeff.

00:05:06.901 --> 00:05:09.234
All right, so we've got
two more really exciting,

00:05:09.234 --> 00:05:11.567
uh, accessory things
to talk about,

00:05:11.567 --> 00:05:13.400
but to really appreciate
the difference

00:05:13.400 --> 00:05:15.234
between both of them,
I want to lay the groundwork

00:05:15.234 --> 00:05:17.100
by getting us all
on the same page

00:05:17.100 --> 00:05:19.067
with how USB works
from a very high level.

00:05:19.067 --> 00:05:22.234
Um, on USB, there's a host

00:05:22.234 --> 00:05:24.400
and a collection of devices.

00:05:24.400 --> 00:05:27.901
It's, uh, important to know
the host is always in charge.

00:05:27.901 --> 00:05:30.734
It has to keep track
of when things are plugged in,

00:05:30.734 --> 00:05:33.901
taken out, what kinds
of things are in there.

00:05:33.901 --> 00:05:35.901
It initiates all data transfer.

00:05:35.901 --> 00:05:39.567
So the host is always in charge.

00:05:39.567 --> 00:05:42.067
The way the host keeps track
and figures out

00:05:42.067 --> 00:05:44.067
what kind of devices
are plugged in

00:05:44.067 --> 00:05:47.067
is when they plug in,
it reads a list of descriptors.

00:05:47.067 --> 00:05:49.067
Now descriptors
are a standard format,

00:05:49.067 --> 00:05:51.100
uh, in the USB spec

00:05:51.100 --> 00:05:53.734
of, uh, you know,
a bunch of different types.

00:05:53.734 --> 00:05:55.734
They're hierarchical.
So you start with--

00:05:55.734 --> 00:05:58.067
each device
has one device descriptor.

00:05:58.067 --> 00:06:00.634
This describes who made it,

00:06:00.634 --> 00:06:02.634
what kind of product it is,

00:06:02.634 --> 00:06:05.133
whether it's a standard
class of device,

00:06:05.133 --> 00:06:07.300
or it's
a vendor-specific device,

00:06:07.300 --> 00:06:10.968
and a couple of strings that
you can display to the user.

00:06:10.968 --> 00:06:13.968
A device can have
more than one configuration,

00:06:13.968 --> 00:06:16.300
though on most Android devices,
you'll only see one.

00:06:16.300 --> 00:06:19.968
Uh, and you can only be in
one configuration at one time.

00:06:19.968 --> 00:06:23.300
Now a configuration
has a list of interfaces,

00:06:23.300 --> 00:06:25.300
and this is where things
get interesting.

00:06:25.300 --> 00:06:27.634
Interfaces generally pair
one-to-one

00:06:27.634 --> 00:06:30.467
with a driver
in your operating system.

00:06:30.467 --> 00:06:34.300
So you can think of a mouse
and keyboard combo

00:06:34.300 --> 00:06:36.467
with, like, a track pad
on your keyboard.

00:06:36.467 --> 00:06:38.968
Each one of those will be
a separate interface.

00:06:38.968 --> 00:06:40.801
They'll both be input devices,

00:06:40.801 --> 00:06:43.968
each one having an instance
that the input driver connected.

00:06:43.968 --> 00:06:46.467
And then an interface

00:06:46.467 --> 00:06:49.300
is composed
of several descriptors.

00:06:49.300 --> 00:06:51.300
And now here's where your data
starts moving.

00:06:51.300 --> 00:06:53.968
They have four different types.

00:06:53.968 --> 00:06:55.968
They have a direction.

00:06:55.968 --> 00:06:59.300
They have a max packet size.

00:06:59.300 --> 00:07:01.367
Um, and--yeah,
so we've got four--

00:07:01.367 --> 00:07:03.033
our four different types.

00:07:03.033 --> 00:07:05.033
Control is primarily used

00:07:05.033 --> 00:07:07.033
to get at those descriptors,
add enumeration,

00:07:07.033 --> 00:07:09.033
when you put a device in,

00:07:09.033 --> 00:07:11.200
interrogate the device,
set it up.

00:07:11.200 --> 00:07:13.534
You can have some vendor-
specific control requests.

00:07:13.534 --> 00:07:17.367
Uh, bulk, which are
really the workhorses

00:07:17.367 --> 00:07:19.033
of the USB.

00:07:19.033 --> 00:07:21.868
Uh, you can send just bulk data

00:07:21.868 --> 00:07:24.534
of fairly large sizes
either in or out,

00:07:24.534 --> 00:07:27.534
only one direction per endpoint.

00:07:27.534 --> 00:07:30.033
If you want to do bidirectional,
you need two endpoints.

00:07:30.033 --> 00:07:32.701
Then there's interrupt,
which are very similar

00:07:32.701 --> 00:07:34.534
to your bulk endpoints.

00:07:34.534 --> 00:07:36.367
Uh, the only difference here

00:07:36.367 --> 00:07:39.367
is that, uh, they're polled
much more often,

00:07:39.367 --> 00:07:41.367
remembering the host
is always in control.

00:07:41.367 --> 00:07:45.200
Every single data transfer
is initiated by the host,

00:07:45.200 --> 00:07:48.367
so you don't want to send
much data over these.

00:07:48.367 --> 00:07:50.868
But for things
like your input devices--

00:07:50.868 --> 00:07:53.701
keyboards, mice, joysticks--
they use the interrupt

00:07:53.701 --> 00:07:55.534
so that when you press
that button

00:07:55.534 --> 00:07:57.534
to kill your friend in "Quake"

00:07:57.534 --> 00:07:59.534
it actually happens on time.

00:07:59.534 --> 00:08:01.267
And then isochronous,

00:08:01.267 --> 00:08:03.100
which are used for things
like audio.

00:08:03.100 --> 00:08:04.968
They're a real pain
to deal with,

00:08:04.968 --> 00:08:07.100
and forget about them now.
Brown: [chuckles]

00:08:07.100 --> 00:08:09.100
Gilling: So, uh,

00:08:09.100 --> 00:08:11.267
So as I said, we have
two different kinds of, uh,

00:08:11.267 --> 00:08:13.267
accessory APIs coming up.

00:08:13.267 --> 00:08:15.267
To talk about the first one,
the host mode,

00:08:15.267 --> 00:08:17.534
I'm gonna give it over
to Mike Lockwood.

00:08:21.834 --> 00:08:24.000
Lockwood:
[speaking indistinctly]

00:08:24.000 --> 00:08:26.334
I'm here at, um, at Google.

00:08:26.334 --> 00:08:30.167
Um, we've got two new APIs,
um, for USB

00:08:30.167 --> 00:08:32.834
in Android 3.1.

00:08:32.834 --> 00:08:35.167
The first one I'm gonna
talk about is the host API,

00:08:35.167 --> 00:08:37.501
and this is for Android devices

00:08:37.501 --> 00:08:39.501
that have USB host support.

00:08:39.501 --> 00:08:41.501
Um, it won't do any good on--

00:08:41.501 --> 00:08:43.667
on devices that only act
as the device.

00:08:43.667 --> 00:08:46.000
Um, and this can be used

00:08:46.000 --> 00:08:48.501
for writing apps
that can communicate

00:08:48.501 --> 00:08:50.667
with standard, um, peripherals

00:08:50.667 --> 00:08:52.334
designed for a PC.

00:08:52.334 --> 00:08:55.000
Or you could develop
new pieces of hardware

00:08:55.000 --> 00:08:57.501
that, um,
specifically for Android,

00:08:57.501 --> 00:09:01.167
um, and use these APIs
with that.

00:09:02.734 --> 00:09:06.400
Lockwood: Um, so the API has
a number of new classes to it.

00:09:06.400 --> 00:09:09.067
Um, the first three correspond
directly to some

00:09:09.067 --> 00:09:11.601
of the descriptors
that Erik just talked about.

00:09:11.601 --> 00:09:14.734
There is a UsbDevice,
um, class

00:09:14.734 --> 00:09:17.400
that has the vendor ID
and product ID.

00:09:17.400 --> 00:09:19.901
Um, you first--you know,
when something gets plugged in,

00:09:19.901 --> 00:09:21.567
you'd look at that and say, um,

00:09:21.567 --> 00:09:23.567
"This is something
I'm interested in talking to."

00:09:23.567 --> 00:09:26.234
And you can do that based
on the vendor ID and product ID

00:09:26.234 --> 00:09:29.734
or maybe based on the device
class, subclass, and protocol,

00:09:29.734 --> 00:09:32.400
which are usually used
to define, you know,

00:09:32.400 --> 00:09:35.534
standard types of things,
like mice, keyboards, cameras,

00:09:35.534 --> 00:09:38.200
um, where you don't really know
what the manufac--

00:09:38.200 --> 00:09:39.868
care what the manufacturer is,

00:09:39.868 --> 00:09:41.534
but you care
more about the, um,

00:09:41.534 --> 00:09:43.534
the functionality it has.

00:09:43.534 --> 00:09:45.534
Um, and then from
the UsbDevice class

00:09:45.534 --> 00:09:47.367
you can get a list
of the interfaces,

00:09:47.367 --> 00:09:51.033
and that also can have a class,
subclass, and protocol field

00:09:51.033 --> 00:09:52.868
you might be interested in.

00:09:52.868 --> 00:09:54.701
And then finally,
from the interface,

00:09:54.701 --> 00:09:56.701
you get a list
of the endpoints.

00:09:56.701 --> 00:09:58.701
And the two we care about here
are the--the bulk

00:09:58.701 --> 00:10:00.868
and interrupt,
um, endpoint types.

00:10:00.868 --> 00:10:03.367
Those are the type
you'd normally use.

00:10:03.367 --> 00:10:06.033
Um, each of these
have a specific direction.

00:10:06.033 --> 00:10:08.033
You know, if you want
to talk in both directions,

00:10:08.033 --> 00:10:10.534
you have to have one endpoint
in the out direction,

00:10:10.534 --> 00:10:14.367
which means, um, PC to device
or host to device,

00:10:14.367 --> 00:10:16.868
and then in
is from device to host.

00:10:16.868 --> 00:10:20.701
Um, and then two more classes--

00:10:20.701 --> 00:10:24.367
um, the UsbDeviceConnection
and the UsbRequest classes.

00:10:24.367 --> 00:10:27.367
Um, the UsbDeviceConnection
is kind of like

00:10:27.367 --> 00:10:29.367
a file descriptor
when you open--

00:10:29.367 --> 00:10:31.200
it's something used that you--

00:10:31.200 --> 00:10:34.033
when you open the device,
um, this lets you communicate

00:10:34.033 --> 00:10:36.367
and send data back and forth
across the endpoints.

00:10:36.367 --> 00:10:38.367
Another important thing
is the claiming

00:10:38.367 --> 00:10:40.200
and releasing of interfaces.

00:10:40.200 --> 00:10:42.367
The--the USB stack in Linux

00:10:42.367 --> 00:10:44.367
has this notion
of claiming an interface,

00:10:44.367 --> 00:10:47.367
meaning that you're specifically
talking to that interface

00:10:47.367 --> 00:10:50.801
on the USB device,
so you don't have two programs

00:10:50.801 --> 00:10:53.534
trying to talk to the same
hardware at the same time.

00:10:53.534 --> 00:10:55.534
Um, and then we've got support

00:10:55.534 --> 00:10:59.367
for both synchronous
and asynchronous communication.

00:10:59.367 --> 00:11:01.601
Um, for
asynchronous communication,

00:11:01.601 --> 00:11:03.434
we've got the UsbRequest class,

00:11:03.434 --> 00:11:07.267
and that just encapsulates a,
um, a request,

00:11:07.267 --> 00:11:10.734
either send or receive data
over a particular endpoint.

00:11:12.901 --> 00:11:14.901
Lockwood: Um, so I'm gonna
just go quickly

00:11:14.901 --> 00:11:16.734
through some sample code here.

00:11:16.734 --> 00:11:19.067
Um, this--this is some code

00:11:19.067 --> 00:11:21.067
that basically gets
the USB device

00:11:21.067 --> 00:11:23.067
and decides,
can I talk to this?

00:11:23.067 --> 00:11:25.267
Where are the endpoints
I want to talk to?

00:11:25.267 --> 00:11:28.067
So first, I might look
at the vendor ID and product ID

00:11:28.067 --> 00:11:30.067
and see if those match
some values

00:11:30.067 --> 00:11:32.067
that I'm interested in.

00:11:32.067 --> 00:11:33.901
Then I look
for the first interface

00:11:33.901 --> 00:11:35.734
on the device.

00:11:35.734 --> 00:11:37.567
Say that I should expect
two endpoints,

00:11:37.567 --> 00:11:39.400
then I say which one's
the in direction,

00:11:39.400 --> 00:11:41.234
and which one's
the out direction.

00:11:41.234 --> 00:11:44.734
Then ultimately I get the EP in
and EP out,

00:11:44.734 --> 00:11:46.400
or the two endpoints,

00:11:46.400 --> 00:11:48.834
the two bulk endpoints
I want to talk on.

00:11:51.834 --> 00:11:53.667
Lockwood: And then
once I have that,

00:11:53.667 --> 00:11:55.667
there's a number of ways
to, um, actually communicate

00:11:55.667 --> 00:11:57.667
with the device,
depending on whether you're

00:11:57.667 --> 00:11:59.501
doing synchronous
or asynchronous,

00:11:59.501 --> 00:12:01.567
and what kind of endpoint
you're talking on.

00:12:01.567 --> 00:12:05.567
Um, there's a-a call--
UsbManager openDevice

00:12:05.567 --> 00:12:08.234
gives you
the UsbDeviceConnection.

00:12:08.234 --> 00:12:10.734
Once you do that, you want
to claim the interface.

00:12:10.734 --> 00:12:12.734
Um, and then from there,
there's a number

00:12:12.734 --> 00:12:15.234
of different things you can do.
There's the control transfer.

00:12:15.234 --> 00:12:19.067
It's for sending or receiving
requests on endpoint zero.

00:12:19.067 --> 00:12:21.567
Erik mentioned that's
typically used for enumeration

00:12:21.567 --> 00:12:23.901
to figure out what's
available on the device.

00:12:23.901 --> 00:12:26.734
But it also can be used
for some extensions,

00:12:26.734 --> 00:12:30.567
either for a particular vendor
or a particular class of device.

00:12:30.567 --> 00:12:32.734
You can send and receive, um,

00:12:32.734 --> 00:12:34.901
your own commands on there.

00:12:34.901 --> 00:12:37.567
Um, and the bulk transfer call--
there's--

00:12:37.567 --> 00:12:39.400
this is a synchronous call.

00:12:39.400 --> 00:12:42.567
It can pass on the endpoint,
the buffer, the buffer size,

00:12:42.567 --> 00:12:44.067
and the time-out,

00:12:44.067 --> 00:12:46.567
and either send or receive
data synchronously.

00:12:46.567 --> 00:12:49.567
And the direction, whether
you're sending or receiving,

00:12:49.567 --> 00:12:51.734
is determined by the direction
of the endpoint.

00:12:51.734 --> 00:12:54.734
And then finally,
asynchronous requests,

00:12:54.734 --> 00:12:57.734
um, are good if you want
to get higher bandwidth

00:12:57.734 --> 00:13:00.467
on the bulk endpoints,
queue up multiple requests.

00:13:00.467 --> 00:13:02.467
Instead of waiting
for one to finish

00:13:02.467 --> 00:13:04.300
before starting the next one,

00:13:04.300 --> 00:13:06.133
you can queue up
multiple requests,

00:13:06.133 --> 00:13:07.968
and your requests, um,
and then wait for them

00:13:07.968 --> 00:13:10.467
to, um, to, um,
either be completed,

00:13:10.467 --> 00:13:12.300
either sending or receiving.

00:13:12.300 --> 00:13:15.300
And also, if you're interested
in listening for interrupts

00:13:15.300 --> 00:13:17.300
for something like the keyboard,

00:13:17.300 --> 00:13:19.300
where you press a button,
and something happens,

00:13:19.300 --> 00:13:21.300
that's gonna
happen asynchronously,

00:13:21.300 --> 00:13:23.968
so you queue up a request
and then just wait--

00:13:23.968 --> 00:13:25.801
just wait
until something happens,

00:13:25.801 --> 00:13:29.801
and you get the USB--
the UsbRequest, um, object

00:13:29.801 --> 00:13:33.801
gets returned back
when that's done.

00:13:33.801 --> 00:13:35.801
And I think that's--

00:13:35.801 --> 00:13:37.968
covers the host APIs.

00:13:37.968 --> 00:13:39.801
And I'm gonna turn it
back over to Erik...

00:13:39.801 --> 00:13:41.300
Gilling: Do the demo?

00:13:41.300 --> 00:13:43.133
Lockwood: to talk
about accessories now.

00:13:43.133 --> 00:13:44.968
Gilling: Demo?
Lockwood: Oh, the demo. God.

00:13:44.968 --> 00:13:46.801
Gilling: The demo--
you have to do the demo.

00:13:46.801 --> 00:13:48.801
Lockwood: See, this is why they
don't let me out very often

00:13:48.801 --> 00:13:51.300
to talk in public.
[laughter]

00:13:51.300 --> 00:13:54.300
Lockwood: So...
Gilling: [chuckles]

00:13:54.300 --> 00:13:57.234
[applause]

00:13:59.300 --> 00:14:01.367
Lockwood: And this, um,
is a standard piece

00:14:01.367 --> 00:14:02.868
of o-office equipment

00:14:02.868 --> 00:14:05.868
that many of you probably have
in your office yourself.

00:14:05.868 --> 00:14:08.534
Also the second reason they
don't let me out very often,

00:14:08.534 --> 00:14:10.701
because I end up
doing stuff like this.

00:14:10.701 --> 00:14:14.200
So, um, this is, uh,
a USB missile launcher

00:14:14.200 --> 00:14:17.868
that you can get at a number
of fine web sites.

00:14:17.868 --> 00:14:20.701
Um, and it's designed
for a PC.

00:14:20.701 --> 00:14:22.701
There's a Windows app
that runs it,

00:14:22.701 --> 00:14:25.200
but it turns out the protocol
that it communicates with

00:14:25.200 --> 00:14:26.868
is pretty simple.

00:14:26.868 --> 00:14:28.868
So I've got
an Android tablet here

00:14:28.868 --> 00:14:31.133
with host support.
I'm gonna plug it in.

00:14:33.000 --> 00:14:35.000
Lockwood: And I get
a dialogue saying, um,

00:14:35.000 --> 00:14:37.501
"Do you want to run
the missile launcher application

00:14:37.501 --> 00:14:39.501
to talk to this device?"

00:14:39.501 --> 00:14:42.501
Click "Okay," and...

00:14:42.501 --> 00:14:45.868
I got, um, this is an example
of my UI design here.

00:14:45.868 --> 00:14:49.334
So I hooked it up
to the accelerometer,

00:14:49.334 --> 00:14:51.167
and I tilt the tablet,

00:14:51.167 --> 00:14:53.667
and the missile launcher
starts turning.

00:14:53.667 --> 00:14:56.334
[laughter]

00:14:56.334 --> 00:14:58.334
Lockwood: Raise the trajectory
a little bit here.

00:14:58.334 --> 00:15:01.868
And then there's a button here
called "Fire!"

00:15:04.000 --> 00:15:06.701
[laughter]
Lockwood: There we go.

00:15:06.701 --> 00:15:09.634
[applause]

00:15:14.801 --> 00:15:16.801
Lockwood: After this,
I want to get a job

00:15:16.801 --> 00:15:18.334
at the basketball games

00:15:18.334 --> 00:15:20.300
shooting the T-shirts
into the audience.

00:15:20.300 --> 00:15:22.300
[laughter]

00:15:22.300 --> 00:15:24.300
Lockwood: Um, okay,
now I actually will turn it

00:15:24.300 --> 00:15:26.501
back over to Erik,
since I'm out of missiles.

00:15:26.501 --> 00:15:29.267
Gilling: [laughs]
Thanks, Mike.

00:15:32.934 --> 00:15:34.934
Gilling: All right, so, uh,

00:15:34.934 --> 00:15:37.267
you know, Jeff showed you
some cool input stuff,

00:15:37.267 --> 00:15:39.267
and he kind of went over
a little bit

00:15:39.267 --> 00:15:41.334
of how he got to play games
on the company time.

00:15:41.334 --> 00:15:43.334
Mike just showed you
how he got to buy toys

00:15:43.334 --> 00:15:45.000
on the company time.

00:15:45.000 --> 00:15:48.334
But some of you may have seen
a big toy upstairs.

00:15:48.334 --> 00:15:50.667
I think--not that it's
a game or anything,

00:15:50.667 --> 00:15:53.000
but if it was, I was winning.
[laughter]

00:15:53.000 --> 00:15:55.834
Gilling: So this brings us
to the Android Open Accessories,

00:15:55.834 --> 00:15:57.834
which we talked about
in the keynote.

00:15:57.834 --> 00:16:01.400
Now not every Android device
has host mode.

00:16:01.400 --> 00:16:04.400
In fact, very few Android
devices now have host mode.

00:16:04.400 --> 00:16:06.067
We hope more people will,

00:16:06.067 --> 00:16:08.067
but what about for the rest
of the robots?

00:16:08.067 --> 00:16:10.400
Well, every Android device

00:16:10.400 --> 00:16:12.567
that is CTS-compatible

00:16:12.567 --> 00:16:14.400
has to have ADB,

00:16:14.400 --> 00:16:16.901
which means it has to be
a USB device.

00:16:16.901 --> 00:16:20.400
So let's turn the paradigm
on its head.

00:16:20.400 --> 00:16:22.734
And what if the accessory
is the host?

00:16:22.734 --> 00:16:24.734
Well, that's exactly
what we've done

00:16:24.734 --> 00:16:26.400
with the Open Accessory.

00:16:26.400 --> 00:16:28.067
It's a simple USB protocol.

00:16:28.067 --> 00:16:29.734
The accessory is the host

00:16:29.734 --> 00:16:32.234
and, uh, provides power...

00:16:32.234 --> 00:16:34.567
[clears throat]

00:16:34.567 --> 00:16:36.567
Yeah. Anyway... [laughs]

00:16:36.567 --> 00:16:39.200
Anyway, uh, so unlike Mike

00:16:39.200 --> 00:16:41.200
and unlike Jeff,

00:16:41.200 --> 00:16:43.734
I can't go out,
and I can't buy one of these.

00:16:43.734 --> 00:16:45.734
So this is where ADK comes in.

00:16:45.734 --> 00:16:47.734
It's a simple board.

00:16:47.734 --> 00:16:51.367
It's based on the Arduino
with some USB circuitry on it.

00:16:53.934 --> 00:16:56.267
Gilling: Let's get some light
on the subject.

00:16:58.534 --> 00:17:01.767
Gilling: 4,3.
There we go.

00:17:06.000 --> 00:17:08.834
Gilling: Uh, we seem
to be missing a USB cable.

00:17:08.834 --> 00:17:11.334
Never fear. [sighs]

00:17:11.334 --> 00:17:13.834
All right, so it's got
a simple board.

00:17:13.834 --> 00:17:17.501
Uh, it's got the USB host shield
integrated on it.

00:17:17.501 --> 00:17:20.334
And on top of that we've created
our own little Google shield.

00:17:20.334 --> 00:17:22.000
Now this has a lot of fun I/O.

00:17:22.000 --> 00:17:24.601
It's got some buttons.
It's got a joystick.

00:17:24.601 --> 00:17:27.200
We've even bundled

00:17:27.200 --> 00:17:30.501
a little servo in with it.

00:17:30.501 --> 00:17:34.334
And, uh, much like
with a host accessory,

00:17:34.334 --> 00:17:37.167
you can see

00:17:37.167 --> 00:17:39.501
that once we pair it
with a device--

00:17:39.501 --> 00:17:41.501
you'll notice
I'm using the Nexus S,

00:17:41.501 --> 00:17:43.934
which is running our latest
version of Gingerbread,

00:17:43.934 --> 00:17:45.501
which we've pushed out.

00:17:45.501 --> 00:17:47.167
This does not have host support,

00:17:47.167 --> 00:17:49.501
so you can't write
a host peripheral for this.

00:17:49.501 --> 00:17:52.667
Now I'm gonna plug in
the USB connection.

00:17:52.667 --> 00:17:55.834
And that same basic dialogue

00:17:55.834 --> 00:17:58.501
that you saw with the host mode
peripherals opens up.

00:17:58.501 --> 00:18:00.534
It lets us launch an app.

00:18:03.000 --> 00:18:05.367
Gilling: Now you know, this is
a pretty simple demo app.

00:18:05.367 --> 00:18:07.334
Um, my UI design skills

00:18:07.334 --> 00:18:09.334
are no better
than Mike Lockwood's,

00:18:09.334 --> 00:18:11.334
but I happened to con
one of our nice UI designers

00:18:11.334 --> 00:18:13.334
into making this
look pretty for us, so...

00:18:13.334 --> 00:18:15.000
Uh, you can see, you know,

00:18:15.000 --> 00:18:17.334
we've got a bunch of I/O
going from the board

00:18:17.334 --> 00:18:19.167
onto the device.

00:18:19.167 --> 00:18:21.000
If we go over to the "Out" tab,

00:18:21.000 --> 00:18:22.834
you can see we've got a bunch

00:18:22.834 --> 00:18:25.000
of data going the other way.

00:18:25.000 --> 00:18:27.000
Oh, green's
not particularly bo--

00:18:27.000 --> 00:18:29.000
both green is kind of boring.

00:18:29.000 --> 00:18:32.000
Uh, and we also have some relays

00:18:32.000 --> 00:18:33.501
on the board here,

00:18:33.501 --> 00:18:35.167
which you can turn on and off.

00:18:35.167 --> 00:18:37.501
And what's a lot of fun
is some servos.

00:18:37.501 --> 00:18:39.667
Now I've taken
this little servo--

00:18:39.667 --> 00:18:41.667
there--

00:18:41.667 --> 00:18:43.501
and I've put it inside
one of these little, uh,

00:18:43.501 --> 00:18:46.000
Android figurines
that we all know and love.

00:18:46.000 --> 00:18:48.167
So, uh, you know,

00:18:48.167 --> 00:18:50.000
Android loves you, too.

00:18:50.000 --> 00:18:53.334
Why don't you say hello
to everybody, Android?

00:18:53.334 --> 00:18:55.000
[high-pitched voice] HI.

00:18:55.000 --> 00:18:58.501
[laughter]

00:18:58.501 --> 00:19:02.400
Gilling: So, uh,
the source code for this,

00:19:02.400 --> 00:19:04.200
the board designs,

00:19:04.200 --> 00:19:06.367
the firmware, and the app

00:19:06.367 --> 00:19:08.367
are all live and released

00:19:08.367 --> 00:19:10.868
on accessories.android.com now.

00:19:10.868 --> 00:19:13.667
There's the tablet, uh, app.

00:19:15.501 --> 00:19:17.667
Gilling: So in order to be
one of these peripherals,

00:19:17.667 --> 00:19:19.334
you don't have to be an ADK.

00:19:19.334 --> 00:19:21.000
This is just a sample.

00:19:21.000 --> 00:19:23.000
Microchip has
a development kit out.

00:19:23.000 --> 00:19:25.000
Other people are coming out
with development kits.

00:19:25.000 --> 00:19:27.000
You can do it with your own
custom hardware,

00:19:27.000 --> 00:19:28.667
as long as you're a host,

00:19:28.667 --> 00:19:31.334
and you can provide the USB spec
worth of power,

00:19:31.334 --> 00:19:33.667
which is 500 milliamps

00:19:33.667 --> 00:19:37.000
at, uh, 5 volts.

00:19:37.000 --> 00:19:40.334
To get established--
it's pretty simple.

00:19:40.334 --> 00:19:43.834
Um, you, uh...

00:19:43.834 --> 00:19:45.868
When you get a hotplug event,

00:19:45.868 --> 00:19:48.167
you need to interrogate
the USB device.

00:19:48.167 --> 00:19:50.834
And you send it one of these
vendor-specific control requests

00:19:50.834 --> 00:19:52.334
we talked about.

00:19:52.334 --> 00:19:55.000
This one we came up--we call it
a "Get Protocol" version.

00:19:55.000 --> 00:19:57.167
And it just returns to you
a version number.

00:19:57.167 --> 00:19:59.334
Now if it returns to you
a version number,

00:19:59.334 --> 00:20:02.834
your Android device supports
the Open Accessory protocol.

00:20:02.834 --> 00:20:04.834
If it doesn't, it doesn't.

00:20:04.834 --> 00:20:07.000
Once you do that,
you send over data

00:20:07.000 --> 00:20:08.667
to identify your peripheral.

00:20:08.667 --> 00:20:11.167
USB has all of this information,

00:20:11.167 --> 00:20:12.834
all of this procedure

00:20:12.834 --> 00:20:15.334
for how to identify
a USB device to the host,

00:20:15.334 --> 00:20:17.501
but there's really nothing
the other way around.

00:20:17.501 --> 00:20:20.667
So we had to events--invent
a procedure for doing that.

00:20:20.667 --> 00:20:23.667
You just really--you send over
your simple, basic information--

00:20:23.667 --> 00:20:26.000
who you are,
what you are,

00:20:26.000 --> 00:20:29.167
uh, and where to get software
for it.

00:20:29.167 --> 00:20:31.501
You do that, and then you say,
"Okay, I'm ready to go."

00:20:31.501 --> 00:20:33.167
Now this is a little tricky.

00:20:33.167 --> 00:20:34.834
At this point,
your Android device

00:20:34.834 --> 00:20:36.667
will drop off the USB bus.

00:20:36.667 --> 00:20:39.167
Uh, and it will come back on

00:20:39.167 --> 00:20:42.167
as a Google-specific device.

00:20:42.167 --> 00:20:44.167
This has our Google vendor ID

00:20:44.167 --> 00:20:46.000
and a very specific product ID.

00:20:46.000 --> 00:20:47.667
Once you see one of these,

00:20:47.667 --> 00:20:49.667
you know
you're in accessory mode.

00:20:49.667 --> 00:20:52.033
You go dig through
those USB descriptors.

00:20:52.033 --> 00:20:53.834
You find your first bulk "in"

00:20:53.834 --> 00:20:55.667
and your first
bulk "out" endpoint.

00:20:55.667 --> 00:20:57.334
Remember,
those are the workhorses.

00:20:57.334 --> 00:20:59.167
This is where
your data's going over.

00:20:59.167 --> 00:21:01.067
You set your configuration to 1,

00:21:01.067 --> 00:21:02.901
and now you're ready to go.

00:21:02.901 --> 00:21:05.400
You're gonna get
that same dialogue you saw,

00:21:05.400 --> 00:21:07.400
and you're gonna be able to have
a two-way communication

00:21:07.400 --> 00:21:08.901
through the app.

00:21:08.901 --> 00:21:11.567
So now how do you communicate
with the app?

00:21:11.567 --> 00:21:14.901
I'm gonna hand back over
to Mike "API" Lockwood,

00:21:14.901 --> 00:21:17.434
and he's gonna let you know.
Lockwood: [chuckles]

00:21:19.567 --> 00:21:22.934
Lockwood: Okay, um, we actually
have two different versions

00:21:22.934 --> 00:21:24.934
of the accessory APIs.

00:21:24.934 --> 00:21:26.734
Um, this is
a little bit confusing,

00:21:26.734 --> 00:21:29.501
but we did this so we could
have accessory support

00:21:29.501 --> 00:21:32.501
both on, um,
Android 3.1 and later

00:21:32.501 --> 00:21:34.501
and also on Gingerbread.

00:21:34.501 --> 00:21:36.334
So on Android 3.1,

00:21:36.334 --> 00:21:39.834
we've got a new package
called android.hardware.usb,

00:21:39.834 --> 00:21:43.167
and this is used for both
the host and the accessory APIs.

00:21:43.167 --> 00:21:45.667
Um, if you know
that your app is gonna be

00:21:45.667 --> 00:21:49.000
Honeycomb 3.1 or later,
this is the best thing to use.

00:21:49.000 --> 00:21:52.667
Um, this is on 3.1,
which is going out today on Xoom

00:21:52.667 --> 00:21:55.167
and will be on other--
other devices.

00:21:55.167 --> 00:21:57.501
Um, we also wanted
to get this working on phones

00:21:57.501 --> 00:21:59.834
like the Nexus S here.

00:21:59.834 --> 00:22:02.400
So we've got a, um,
compatibility library.

00:22:02.400 --> 00:22:04.067
It's a different package.

00:22:04.067 --> 00:22:06.567
The APIs are almost
exactly the same,

00:22:06.567 --> 00:22:09.567
um, but since we couldn't add
any new APIs to Gingerbread,

00:22:09.567 --> 00:22:12.234
you have to link against
this--this library.

00:22:12.234 --> 00:22:14.901
And, of course, this is--
this library is gonna exist

00:22:14.901 --> 00:22:16.734
in future versions
of Android, as well,

00:22:16.734 --> 00:22:19.400
so you can use this if you want
to support Gingerbread

00:22:19.400 --> 00:22:21.901
on--on up to the future.

00:22:21.901 --> 00:22:25.400
And if you've got a Nexus 1
or Nexus S

00:22:25.400 --> 00:22:27.067
with the latest update,

00:22:27.067 --> 00:22:28.901
you've been secretly
walking around

00:22:28.901 --> 00:22:30.901
with this in your pocket
for the last week or two

00:22:30.901 --> 00:22:33.400
without realizing it.

00:22:33.400 --> 00:22:35.901
Um, so there's
a couple steps here.

00:22:35.901 --> 00:22:37.901
First, you have to make
the connection

00:22:37.901 --> 00:22:39.901
between the hardware
and your application.

00:22:39.901 --> 00:22:41.901
This API just basically
is a direct--

00:22:41.901 --> 00:22:44.901
direct pipe from your app
to the hardware.

00:22:44.901 --> 00:22:47.400
Um, and the way we do this is

00:22:47.400 --> 00:22:50.234
there's some meta--
extra metadata

00:22:50.234 --> 00:22:52.901
you attach onto your app
through the manifest

00:22:52.901 --> 00:22:55.734
that describes
the kind of, um, accessory

00:22:55.734 --> 00:22:57.567
you want to talk to.

00:22:57.567 --> 00:22:59.567
And, um, when something
gets plugged in,

00:22:59.567 --> 00:23:02.634
the USB manager will say,
well, I've got this--

00:23:02.634 --> 00:23:04.801
this--you know,
this manufacturer name,

00:23:04.801 --> 00:23:06.634
this product name,
and this version,

00:23:06.634 --> 00:23:08.634
and it'll look through and see
what apps are available

00:23:08.634 --> 00:23:10.133
that do that.

00:23:10.133 --> 00:23:12.133
And then you get the dialogue
that came up that I--

00:23:12.133 --> 00:23:14.133
also very similar things
happening

00:23:14.133 --> 00:23:15.634
in the host API

00:23:15.634 --> 00:23:17.467
as when I plugged in
the missile launcher.

00:23:17.467 --> 00:23:19.300
We're kind of doing
the same thing.

00:23:19.300 --> 00:23:20.968
Based on what gets plugged in,

00:23:20.968 --> 00:23:22.801
we say what apps are available
to do that.

00:23:22.801 --> 00:23:24.968
Then finally, um,
once the user clicks "okay"--

00:23:24.968 --> 00:23:26.968
and you can also say
always use this app,

00:23:26.968 --> 00:23:29.300
so it doesn't keep asking you
over and over again.

00:23:29.300 --> 00:23:31.968
Um, if you have an activity
that started

00:23:31.968 --> 00:23:34.634
with a USB accessory
attached to intent.

00:23:34.634 --> 00:23:36.968
And attached to that
is information

00:23:36.968 --> 00:23:39.834
about the accessory that you can
communicate with.

00:23:39.834 --> 00:23:42.467
And then finally, there's
another intent that gets sent

00:23:42.467 --> 00:23:44.467
when you get disconnected.

00:23:44.467 --> 00:23:47.133
Um, so here's
a kind of quick example

00:23:47.133 --> 00:23:48.968
of what you'd put
in your manifest.

00:23:48.968 --> 00:23:51.634
Um, you have to have an activity
that, um,

00:23:51.634 --> 00:23:55.300
registers for the USB accessory
attached intent.

00:23:55.300 --> 00:23:57.801
And then there's
a metadata thing

00:23:57.801 --> 00:24:00.367
that basically links
to a separate XML file

00:24:00.367 --> 00:24:03.200
that describes which accessory
or accessories

00:24:03.200 --> 00:24:05.701
you can--you can talk to.

00:24:05.701 --> 00:24:08.868
And the file--that XML file
would look like this here.

00:24:08.868 --> 00:24:10.367
There's a USB accessory,

00:24:10.367 --> 00:24:11.701
and you can say, um,

00:24:11.701 --> 00:24:13.701
"manufacturer
'Acme Corporation,'

00:24:13.701 --> 00:24:17.367
model USB Anvil, version 1.0."

00:24:17.367 --> 00:24:19.200
Um, if you leave out
the version,

00:24:19.200 --> 00:24:21.033
then it would kind of be
like a wild card

00:24:21.033 --> 00:24:22.868
for any particular version.

00:24:22.868 --> 00:24:25.200
Um, same thing with the model--
if you wanted--

00:24:25.200 --> 00:24:27.534
if you want to work with
anything from Acme Corporation,

00:24:27.534 --> 00:24:29.534
you can just omit the other two.

00:24:29.534 --> 00:24:31.367
And you can list
multiple ones here

00:24:31.367 --> 00:24:33.367
if you have an app
that can work with a number

00:24:33.367 --> 00:24:35.534
of different things.
It's pretty flexible.

00:24:35.534 --> 00:24:38.367
Um, and then there's
two classes.

00:24:38.367 --> 00:24:40.701
The API is very simple,
especially, you know,

00:24:40.701 --> 00:24:42.701
compared to the--
the host APIs are--

00:24:42.701 --> 00:24:44.701
a lot more going on
on the host side

00:24:44.701 --> 00:24:47.868
than the device side,
so this side's pretty simple.

00:24:47.868 --> 00:24:49.868
There's a UsbAccessory class

00:24:49.868 --> 00:24:52.701
that, um, describes
all the string fields

00:24:52.701 --> 00:24:54.534
that get passed
from the hardware

00:24:54.534 --> 00:24:57.200
up to the--up to the framework
that identify what it is--

00:24:57.200 --> 00:24:58.701
Manufacturer, Model.

00:24:58.701 --> 00:25:00.767
Uh, user-visible description
is what we show

00:25:00.767 --> 00:25:03.901
in the dialogue box
when something gets plugged in.

00:25:03.901 --> 00:25:06.901
The Version. There's a URL
you can use

00:25:06.901 --> 00:25:08.734
to point to your web site,

00:25:08.734 --> 00:25:11.734
that you can go to for
information about the accessory

00:25:11.734 --> 00:25:13.400
or to download the app.

00:25:13.400 --> 00:25:15.400
Um, and then there's also
a serial number,

00:25:15.400 --> 00:25:17.400
which is optional,
but if your app

00:25:17.400 --> 00:25:19.434
really wants--
needs to keep track

00:25:19.434 --> 00:25:21.400
of individual-specific pieces
of hardware,

00:25:21.400 --> 00:25:25.234
you can do your unique
serial number here.

00:25:25.234 --> 00:25:28.234
And it's the Manufacturer,
Model, and Version

00:25:28.234 --> 00:25:29.901
that are keyed upon

00:25:29.901 --> 00:25:32.901
to choose the application
for the accessory.

00:25:32.901 --> 00:25:35.400
Um, and then there's
the USB manager class,

00:25:35.400 --> 00:25:38.067
which is used for both the host
and the accessory APIs.

00:25:38.067 --> 00:25:40.067
The accessory-related calls

00:25:40.067 --> 00:25:42.567
are getting a list
of the attached accessories.

00:25:42.567 --> 00:25:44.567
You know, right now
there can only be one,

00:25:44.567 --> 00:25:46.734
since there's only one USB port
on those devices,

00:25:46.734 --> 00:25:49.567
but maybe that'll change
in the future.

00:25:49.567 --> 00:25:52.100
Open Accessory gives you
a personal file descriptor,

00:25:52.100 --> 00:25:53.734
which is an Android class

00:25:53.734 --> 00:25:56.067
that encapsulates
a file descriptor

00:25:56.067 --> 00:25:57.901
that can get past
to proc--

00:25:57.901 --> 00:26:00.300
process boundaries
with binder.

00:26:00.300 --> 00:26:02.300
And then from there,
you can actually, you know,

00:26:02.300 --> 00:26:03.801
talk to the accessory.

00:26:03.801 --> 00:26:05.634
Then there's also a couple calls

00:26:05.634 --> 00:26:08.133
for getting permission to talk
to the hardware.

00:26:08.133 --> 00:26:09.968
The user--for example,

00:26:09.968 --> 00:26:11.801
the user doesn't click "Okay,"

00:26:11.801 --> 00:26:13.634
but then later
launches the app,

00:26:13.634 --> 00:26:15.467
and you want to connect
to the--the hardware,

00:26:15.467 --> 00:26:18.300
you can use these APIs to bring
that dialogue back up,

00:26:18.300 --> 00:26:21.167
um, to get permission
to talk to the hardware,

00:26:21.167 --> 00:26:22.667
um, which brings up

00:26:22.667 --> 00:26:24.501
an interesting
kind of difference

00:26:24.501 --> 00:26:26.501
between how this works
and a lot of other things work.

00:26:26.501 --> 00:26:28.501
There's no permission you put
in your manifest.

00:26:28.501 --> 00:26:30.167
Like, for the camera,

00:26:30.167 --> 00:26:32.000
you have to say this app
talks to the camera,

00:26:32.000 --> 00:26:34.334
or this app wants to talk
to the GPS.

00:26:34.334 --> 00:26:38.167
Um, and for USB, it didn't make
as much sense,

00:26:38.167 --> 00:26:40.167
because you don't want
to say this app can talk

00:26:40.167 --> 00:26:41.834
to any possible USB device.

00:26:41.834 --> 00:26:44.167
So instead, it's kind of
dynamically chosen.

00:26:44.167 --> 00:26:46.167
As the user clicks
on the dialogue,

00:26:46.167 --> 00:26:48.334
it says this app can talk
to this hardware,

00:26:48.334 --> 00:26:50.501
but you don't have access
to every single device.

00:26:50.501 --> 00:26:54.334
It's kind of a finer-grained,
more dynamic permission system.

00:26:54.334 --> 00:26:56.000
And finally here--

00:26:56.000 --> 00:26:59.033
here's the--the sample
of how you, um,

00:26:59.033 --> 00:27:01.067
you know, talk
to the accessory itself.

00:27:01.067 --> 00:27:03.067
When you get started,
you'll get started

00:27:03.067 --> 00:27:05.067
with the accessory
attached intent.

00:27:05.067 --> 00:27:07.567
you can call getIntent
from your activity

00:27:07.567 --> 00:27:09.400
to get the intent.

00:27:09.400 --> 00:27:11.400
Um, and then there's
the helper function here

00:27:11.400 --> 00:27:13.400
that gets the, um,
USB accessory object

00:27:13.400 --> 00:27:15.067
out of the intent.

00:27:15.067 --> 00:27:18.234
This is, um, needed
for the compatibility API.

00:27:18.234 --> 00:27:22.634
Um, the--the 3.1 API,
you can just call intent,

00:27:22.634 --> 00:27:25.467
getParcelableExtra, to get
the object directly that way.

00:27:25.467 --> 00:27:28.467
Um, then you call openAccessory

00:27:28.467 --> 00:27:30.801
to get the parcelable
file descriptor.

00:27:30.801 --> 00:27:33.968
getFileDescriptor gives you
a standard file descriptor.

00:27:33.968 --> 00:27:36.634
Then you get an input stream
and an output stream

00:27:36.634 --> 00:27:38.467
by opening the file descriptor.

00:27:38.467 --> 00:27:40.467
And then you can just read
and write data

00:27:40.467 --> 00:27:42.133
using input and output streams.

00:27:42.133 --> 00:27:45.300
So basically, the accessory
looks like a file.

00:27:45.300 --> 00:27:47.133
And actually underneath, it's--

00:27:47.133 --> 00:27:49.300
the file descriptor
just gives you,

00:27:49.300 --> 00:27:50.801
uh, a file that--

00:27:50.801 --> 00:27:53.801
directly to the kernel driver
that talks to the hardware.

00:27:53.801 --> 00:27:57.300
So basically, read and write
like a regular file,

00:27:57.300 --> 00:28:00.367
and you're sending and receiving
data to your hardware.

00:28:00.367 --> 00:28:02.701
And then from that level up,
it's up to you.

00:28:02.701 --> 00:28:04.534
There's no protocol defined.

00:28:04.534 --> 00:28:06.400
It's just sending
and receiving bytes.

00:28:06.400 --> 00:28:08.200
You can invent
your own protocol,

00:28:08.200 --> 00:28:11.868
do whatever you want.
And, um, it's up to you.

00:28:11.868 --> 00:28:14.200
So, um, I'm gonna turn it
back over to Erik,

00:28:14.200 --> 00:28:16.501
who's got one more thing
to tell us all.

00:28:16.501 --> 00:28:18.501
Gilling: All right,
well, if you felt like

00:28:18.501 --> 00:28:20.501
we were rushing through this,
we sort of were,

00:28:20.501 --> 00:28:22.501
'cause I can tell everyone's
kind of excited about this,

00:28:22.501 --> 00:28:24.501
and we want to leave plenty
of time for questions.

00:28:24.501 --> 00:28:26.467
But I think, uh, you know,
there's, uh,

00:28:26.467 --> 00:28:28.467
there's one question
everyone has on their mind,

00:28:28.467 --> 00:28:31.734
which is same as CNET,
you know--

00:28:31.734 --> 00:28:33.834
"When are we gonna make
this available?"

00:28:33.834 --> 00:28:36.000
Well, at least for everyone
in this room,

00:28:36.000 --> 00:28:38.667
we've got 180K
for every one of you.

00:28:38.667 --> 00:28:41.601
[cheers and applause]

00:28:50.334 --> 00:28:53.501
Gilling: Well, applaud everyone
else who made it work, too.

00:28:53.501 --> 00:28:57.667
Now not only do we have
the board that's in here,

00:28:57.667 --> 00:29:00.167
we're giving you two servos

00:29:00.167 --> 00:29:02.167
and all the cables you need.

00:29:02.167 --> 00:29:04.334
So I want you guys to go out

00:29:04.334 --> 00:29:07.167
and make all the next, best,
greatest Android accessories.

00:29:07.167 --> 00:29:09.501
And now I'm gonna open it up
to Q&amp;A.

00:29:09.501 --> 00:29:14.000
[applause]

00:29:14.000 --> 00:29:16.000
Gilling: Just stand up. Yeah.

00:29:16.000 --> 00:29:18.501
So, uh, if everyone,
if you have a question,

00:29:18.501 --> 00:29:20.501
could you please go to the mic
on other side of the aisle?

00:29:20.501 --> 00:29:23.000
and that way, the recording
can get it, too.

00:29:23.000 --> 00:29:25.000
man: Erik, when
are they getting the boards?

00:29:25.000 --> 00:29:27.000
Gilling: When are you
getting the boards?

00:29:27.000 --> 00:29:29.000
Ah, very important question.
man: [laughs]

00:29:29.000 --> 00:29:32.000
Gilling: Uh, you'll be getting
a card as you exit the door,

00:29:32.000 --> 00:29:33.801
uh, and then you can take
that down

00:29:33.801 --> 00:29:36.000
to where you got your tablet
and your shirt and everything,

00:29:36.000 --> 00:29:37.501
and you can exchange that

00:29:37.501 --> 00:29:41.000
for one of these, uh,
cool white and green tubes.

00:29:41.000 --> 00:29:42.834
Yes.

00:29:42.834 --> 00:29:44.834
man: [speaking indistinctly]

00:29:44.834 --> 00:29:47.834
Gilling: Oh, can we get,
uh, the mic on over here?

00:29:47.834 --> 00:29:50.000
man: This morning, I remember
mention of Bluetooth.

00:29:50.000 --> 00:29:52.834
What's the APA
gonna be like for that?

00:29:52.834 --> 00:29:54.834
Gilling: Well, right now, uh,

00:29:54.834 --> 00:29:58.167
we have some fairly rich
RFCOMM-based Bluetooth support,

00:29:58.167 --> 00:30:01.667
um, and so there's no ETA

00:30:01.667 --> 00:30:03.734
for extending this API
into that.

00:30:03.734 --> 00:30:05.501
However, it is
under consideration.

00:30:05.501 --> 00:30:07.334
Brown: Well, actually, uh,

00:30:07.334 --> 00:30:10.167
I mean, there's--there's fairly
rich Bluetooth API already, um,

00:30:10.167 --> 00:30:12.000
but in terms
of human input devices,

00:30:12.000 --> 00:30:14.000
the same support for USB
also works with Bluetooth,

00:30:14.000 --> 00:30:15.801
so you should be able to use

00:30:15.801 --> 00:30:17.501
Bluetooth MySQL keyboards
and joysticks.

00:30:17.501 --> 00:30:20.501
Gilling: And J.K.'s here,
who's our Bluetooth guy.

00:30:20.501 --> 00:30:22.501
Stand up and look embarrassed.

00:30:22.501 --> 00:30:24.501
[chuckles]
[applause]

00:30:24.501 --> 00:30:26.501
Gilling: Do you
have anything to add?

00:30:26.501 --> 00:30:28.501
J.K.: [speaking indistinctly]
Gilling: I'm sorry?

00:30:28.501 --> 00:30:31.000
J.K.: [speaking indistinctly]
Gilling: All right.

00:30:31.000 --> 00:30:33.501
man: So you mentioned
the USB manager cost

00:30:33.501 --> 00:30:35.501
had only, uh, support
for one device at a time,

00:30:35.501 --> 00:30:37.334
but then earlier,
you were working

00:30:37.334 --> 00:30:39.567
with both the keyboard
and the mouse and etcetera,

00:30:39.567 --> 00:30:41.067
so was that
just available to you

00:30:41.067 --> 00:30:43.067
or did I, uh,
misunderstand something?

00:30:43.067 --> 00:30:45.067
Lockwood: Um, well,
it's kind of confusing,

00:30:45.067 --> 00:30:47.067
'cause we've got both host
support and accessory support.

00:30:47.067 --> 00:30:49.067
With host support, like a PC,

00:30:49.067 --> 00:30:52.033
you can plug in multiple things
into a PC really easily.

00:30:52.033 --> 00:30:55.000
The accessory support
is where, um,

00:30:55.000 --> 00:30:57.667
you're talking over to the--
over the--

00:30:57.667 --> 00:31:00.501
this connection here,
which is not host,

00:31:00.501 --> 00:31:02.501
so it only can connect
to one thing at a time.

00:31:02.501 --> 00:31:04.501
So maybe in the future
if we build a phone

00:31:04.501 --> 00:31:06.501
with multiple ports
in the bottom or something,

00:31:06.501 --> 00:31:08.067
there'd be a way to do it,

00:31:08.067 --> 00:31:10.067
but right now,
it's just one at a time

00:31:10.067 --> 00:31:12.501
for the accessory side.

00:31:12.501 --> 00:31:15.000
man: So let's say
I wanted to make something

00:31:15.000 --> 00:31:17.000
like an oscilloscope

00:31:17.000 --> 00:31:19.000
where those, uh,
fairly high data rate,

00:31:19.000 --> 00:31:22.000
sampling rate that was needed,
a lot of data coming in,

00:31:22.000 --> 00:31:24.501
um, can I do that with--
with the bulk mode,

00:31:24.501 --> 00:31:26.501
or would I need this nightmarish
isochronous mode to do that?

00:31:26.501 --> 00:31:28.501
Brown: [laughs]

00:31:28.501 --> 00:31:32.000
Gilling: Uh, well, I mean, as--
as far as I understand it--

00:31:32.000 --> 00:31:34.334
I haven't dealt with
isochronous mode before--

00:31:34.334 --> 00:31:37.334
um, is it's more about
guaranteed bandwidth

00:31:37.334 --> 00:31:40.000
and not as much high bandwidth,
so...

00:31:40.000 --> 00:31:42.734
And everyone I know
that have used it

00:31:42.734 --> 00:31:44.934
has said it's a real pain
to deal with.

00:31:44.934 --> 00:31:47.167
So I would first go down
the bulk route

00:31:47.167 --> 00:31:49.167
and see if that works out
for you.

00:31:49.167 --> 00:31:52.000
man: But both are supported?
Gilling: Oh, the host?

00:31:52.000 --> 00:31:54.000
man: Both of them are supported
in the APIs of this--

00:31:54.000 --> 00:31:55.801
Gilling: Uh, do we
support isochronous?

00:31:55.801 --> 00:31:57.801
Lockwood: Oh, we don't support
isochronous yet.

00:31:57.801 --> 00:31:59.534
Gilling: All right, well,
there's another answer

00:31:59.534 --> 00:32:01.567
to your question.
[laughter]

00:32:01.567 --> 00:32:03.567
man: Thank you.
Gilling: Yep. Oh.

00:32:03.567 --> 00:32:05.501
man: Hi. Uh, during the keynote,

00:32:05.501 --> 00:32:08.000
we saw something about
maybe uploading an app

00:32:08.000 --> 00:32:10.000
from the USB device.
Gilling: Right.

00:32:10.000 --> 00:32:12.334
So I kind of glossed over that,
and that's my fault.

00:32:12.334 --> 00:32:15.501
Uh, one of those strings
that your open accessory,

00:32:15.501 --> 00:32:17.501
as part of
the enumeration handshake,

00:32:17.501 --> 00:32:20.934
sends to your Android device
is a URI,

00:32:20.934 --> 00:32:22.934
and that can be a web page.

00:32:22.934 --> 00:32:24.801
It could just be any location.

00:32:24.801 --> 00:32:26.801
And so what you do is when
you're building your device

00:32:26.801 --> 00:32:29.834
and where you're ready to
release that, put a URL in there

00:32:29.834 --> 00:32:32.834
that describes where
to get the software.

00:32:32.834 --> 00:32:35.000
man: I wanted to see if you guys

00:32:35.000 --> 00:32:37.000
are familiar with
the IOIO board,

00:32:37.000 --> 00:32:39.000
and if that's the--the same spec
and everything.

00:32:39.000 --> 00:32:40.501
They've been...
Lockwood: Um...

00:32:40.501 --> 00:32:42.000
man: Preordering those
for a while.

00:32:42.000 --> 00:32:43.667
Lockwood: That's quite
a bit different.

00:32:43.667 --> 00:32:45.267
That's using ADB,
which has been--

00:32:45.267 --> 00:32:47.934
ADB is the tool that's used for,
you know, debugging

00:32:47.934 --> 00:32:49.934
and working with the SDK,

00:32:49.934 --> 00:32:51.934
and that's available
on all Android devices.

00:32:51.934 --> 00:32:54.000
Um, but it's not enabled
by default,

00:32:54.000 --> 00:32:56.934
and we're not really
guaranteeing it's gonna exist

00:32:56.934 --> 00:32:58.934
in its current form
forever and ever,

00:32:58.934 --> 00:33:02.801
so it's not really supported
to use ADB for these purposes,

00:33:02.801 --> 00:33:04.801
but until today,
that was the only way

00:33:04.801 --> 00:33:06.834
you could really do
something like that,

00:33:06.834 --> 00:33:08.801
so that's why IOIO
is using that.

00:33:08.801 --> 00:33:10.801
man: I'll see if I can cancel
my preorder then. Thanks.

00:33:10.801 --> 00:33:13.000
Gilling: No, no, no. Actually,
I can speak a little bit more.

00:33:13.000 --> 00:33:15.000
We've been in touch
with those folks, um,

00:33:15.000 --> 00:33:18.501
and--and it was--this was
inspired in part by that.

00:33:18.501 --> 00:33:22.167
Um, and there's no reason why
your IOIO device,

00:33:22.167 --> 00:33:25.501
or yo-yo I believe they call it,
can't speak this protocol.

00:33:25.501 --> 00:33:27.501
So please keep it on order.
It's a cool device.

00:33:27.501 --> 00:33:29.067
Lockwood: Yeah, I mean, it's--

00:33:29.067 --> 00:33:31.000
depending on what
you're trying to do,

00:33:31.000 --> 00:33:34.000
if it's for hacking
and hobbyist stuff, that's fine.

00:33:34.000 --> 00:33:36.000
I just don't want people
to build, you know,

00:33:36.000 --> 00:33:39.033
expensive commerc--consumer
things using ADB right now.

00:33:39.033 --> 00:33:41.000
[laughs]
Gilling: [laughs]

00:33:41.000 --> 00:33:42.834
man: Thank you.

00:33:42.834 --> 00:33:46.400
man: Um, so the ADB--
or the ADK board, um,

00:33:46.400 --> 00:33:48.400
is built around
the Arduino platform.

00:33:48.400 --> 00:33:50.400
I assume you're releasing
the full, um,

00:33:50.400 --> 00:33:52.400
the full firmware for that?
Gilling: Yeah, absolutely.

00:33:52.400 --> 00:33:54.801
As I said earlier, the software
on the Android side,

00:33:54.801 --> 00:33:56.801
the software
on the Arduino side,

00:33:56.801 --> 00:33:59.801
the board files, the layouts,
the schematics, the bombs,

00:33:59.801 --> 00:34:02.501
everything is available
on accessories.android.com.

00:34:02.501 --> 00:34:05.501
man: Awesome.
Gilling: Yep. Thank you.

00:34:05.501 --> 00:34:08.501
man: So, uh, USB On-The-Go

00:34:08.501 --> 00:34:11.501
has been supported in tablets
under Android for a while.

00:34:11.501 --> 00:34:13.968
Does this mean that
you guys won't lobby

00:34:13.968 --> 00:34:16.834
to push that into the handset
space anytime soon?

00:34:16.834 --> 00:34:20.167
As in, will we see a handset
acting as a real host,

00:34:20.167 --> 00:34:22.167
USB host,
in the next couple years?

00:34:22.167 --> 00:34:24.501
Gilling: So there's certainly
nothing to stop that.

00:34:24.501 --> 00:34:26.501
Lockwood: Right.

00:34:26.501 --> 00:34:29.000
Um, yeah, the APIs are there now
if--if a phone supports it.

00:34:29.000 --> 00:34:30.734
It's really up to the OEMs.

00:34:30.734 --> 00:34:32.934
I think one of the major
limitations is just power.

00:34:32.934 --> 00:34:35.934
I mean, if you're providing
half an amp to--to something,

00:34:35.934 --> 00:34:38.501
um, users will be confused
and think,

00:34:38.501 --> 00:34:40.501
Oh, this is great,
until your battery dies,

00:34:40.501 --> 00:34:43.000
and that's kind of
the main concern, I think.

00:34:43.000 --> 00:34:44.734
Gilling: All right.

00:34:44.734 --> 00:34:47.100
man: Yeah, I was wondering about
the availability of API 12.

00:34:47.100 --> 00:34:49.067
You mentioned that's
what we'll need to use.

00:34:49.067 --> 00:34:50.734
Timeframe on when that will be?

00:34:50.734 --> 00:34:52.501
Gilling: You mean
from an SDK perspective?

00:34:52.501 --> 00:34:54.067
man: Yes.

00:34:54.067 --> 00:34:56.000
Gilling: I believe the SDK's
released now, yeah?

00:34:56.000 --> 00:34:57.501
Lockwood: I think
this went out today.

00:34:57.501 --> 00:34:59.334
man: Okay, thank you.
man: Can a device,

00:34:59.334 --> 00:35:01.501
an Android device
that is host-enabled,

00:35:01.501 --> 00:35:03.501
can it behave as a d--

00:35:03.501 --> 00:35:06.501
as a, uh,
an accessory device

00:35:06.501 --> 00:35:08.501
that can work with the ADK?

00:35:08.501 --> 00:35:11.000
Lockwood: If it has
USB On-The-Go, then yes.

00:35:11.000 --> 00:35:13.000
man: Okay.
Gilling: Yeah.

00:35:13.000 --> 00:35:15.000
man: Um, what's the setup time

00:35:15.000 --> 00:35:17.334
to get
a USB connection established?

00:35:17.334 --> 00:35:19.701
Gilling: Uh, a USB what?

00:35:19.701 --> 00:35:21.501
man: How long is the setup time

00:35:21.501 --> 00:35:23.501
to initiate
this whole handshake?

00:35:23.501 --> 00:35:25.501
Gilling: Oh,
the whole handshake?

00:35:25.501 --> 00:35:28.000
Because we do the renumeration,
it takes a little bit of time,

00:35:28.000 --> 00:35:30.000
but it only happens once
on plug-in.

00:35:30.000 --> 00:35:32.000
man: No, but how many--
how many seconds, though?

00:35:32.000 --> 00:35:34.000
Gilling: I-I don't have
that number. I'm sorry.

00:35:34.000 --> 00:35:36.000
man: Oh, okay, 'cause the reason
why I bring it up

00:35:36.000 --> 00:35:38.000
is it seems like a solution
to the multi-accessory problem

00:35:38.000 --> 00:35:40.501
is if you, um,
have multiple accessories

00:35:40.501 --> 00:35:42.501
just kind of round robin

00:35:42.501 --> 00:35:44.734
who they are, who's host
and who isn't.

00:35:44.734 --> 00:35:46.434
Lockwood: OOH.
Gilling: Uh...

00:35:46.434 --> 00:35:48.434
man: But that relies on
a fast setup time.

00:35:48.434 --> 00:35:51.934
Gilling: Yeah, it sounds
very complicated

00:35:51.934 --> 00:35:54.033
and probably breaks
the USB spec.

00:35:54.033 --> 00:35:56.067
man: Well, I mean,
as far as complicated goes,

00:35:56.067 --> 00:35:59.000
it's no worse than Token Ring
netbooks were years ago, so...

00:35:59.000 --> 00:36:01.000
Gilling: Well...
Lockwood: [chuckles]

00:36:01.000 --> 00:36:03.000
man: For any custom
Android accessories,

00:36:03.000 --> 00:36:05.334
will there be any sort
of certification process

00:36:05.334 --> 00:36:07.000
or something that has to be done

00:36:07.000 --> 00:36:09.567
to--to get a stamp of approval,
or no?

00:36:09.567 --> 00:36:11.501
Gilling: Uh, we don't have
anything planned out.

00:36:11.501 --> 00:36:13.801
I think that's--
that's a feature, not a bug.

00:36:13.801 --> 00:36:17.267
man: Cool.
[laughter, applause]

00:36:20.501 --> 00:36:22.501
man: Yeah, typically
we have seen that, uh,

00:36:22.501 --> 00:36:24.501
in the non-Android world

00:36:24.501 --> 00:36:27.801
it was the LIBUSB that would
give the kind of interfaces

00:36:27.801 --> 00:36:31.501
that your Android app,
Android space is using.

00:36:31.501 --> 00:36:35.000
So what--do you have some kind
of a bionic LIBSEE now?

00:36:35.000 --> 00:36:36.501
Uh, Bionic...

00:36:36.501 --> 00:36:38.000
Gilling: He's talking
about LIBUSB.

00:36:38.000 --> 00:36:39.501
man: LIBUSB, sorry.

00:36:39.501 --> 00:36:41.234
Brown: Oh,
we're not using LIBUSB.

00:36:41.234 --> 00:36:43.934
Gilling: Well, Mike--Mike can
tell you all about that.

00:36:43.934 --> 00:36:45.934
Lockwood: Um, I still
didn't hear the question.

00:36:45.934 --> 00:36:47.934
Gilling: Oh, he was asking,
uh, you know,

00:36:47.934 --> 00:36:49.934
on a normal Linux system
you have LIBUSB

00:36:49.934 --> 00:36:51.934
to do USB host stuff.
Lockwood: Oh.

00:36:51.934 --> 00:36:53.934
Gilling: Do we have that, or are
we using something different,

00:36:53.934 --> 00:36:55.934
or do we have a bionic version?
Lockwood: Um, well,

00:36:55.934 --> 00:36:58.934
I guess in the Honeycomb
there's the--

00:36:58.934 --> 00:37:03.334
the kernel provides
the file system USBFS.

00:37:03.334 --> 00:37:05.934
It's something similar to LIBUSB

00:37:05.934 --> 00:37:07.501
that gives you a CAPI,

00:37:07.501 --> 00:37:10.501
and then the framework uses JNI
to, um,

00:37:10.501 --> 00:37:12.501
with the Java APIs
on top of that.

00:37:12.501 --> 00:37:16.501
We're not using the same LIBUSB
that's--that's out in the, um,

00:37:16.501 --> 00:37:18.501
standard Linux distributions,
though,

00:37:18.501 --> 00:37:20.501
mainly just for license.

00:37:20.501 --> 00:37:23.000
We wanted
an Apache 2 solution for that.

00:37:23.000 --> 00:37:25.000
man: Okay.

00:37:25.000 --> 00:37:27.501
man: Yeah, I just wanted to
make sure that I correctly saw

00:37:27.501 --> 00:37:31.334
that USB Ethernet adapters
are gonna be supported.

00:37:31.334 --> 00:37:33.701
[laughter]
Brown: [sighs]

00:37:33.701 --> 00:37:36.501
A couple of them
happen to work now.

00:37:36.501 --> 00:37:38.167
[laughter]
man: Yeah. [laughs]

00:37:38.167 --> 00:37:39.734
I-is there a way
we can get that list?

00:37:39.734 --> 00:37:41.734
Brown: But they're not
officially supported.

00:37:41.734 --> 00:37:43.734
Gilling: Oh. Oh, I know exactly
what you're referring to.

00:37:43.734 --> 00:37:45.400
man: Yes.

00:37:45.400 --> 00:37:47.067
Gilling: And it's
the other way around.

00:37:47.067 --> 00:37:50.934
On, say, like the Nexus S today,
you can do tethering,

00:37:50.934 --> 00:37:52.801
and your Nexus S pretends to be

00:37:52.801 --> 00:37:55.334
a USB Ethernet device
to your laptop,

00:37:55.334 --> 00:37:57.000
is what we had on the slides.

00:37:57.000 --> 00:37:59.000
man: Yeah,
but the other way around

00:37:59.000 --> 00:38:01.067
where you're in a demo,
and you don't want to rely on

00:38:01.067 --> 00:38:03.067
the wireless connection
in order to demo,

00:38:03.067 --> 00:38:06.968
for example, speech
or, you know, voice recognition.

00:38:06.968 --> 00:38:08.934
and you end up getting
a "Can't connect."

00:38:08.934 --> 00:38:10.501
Gilling: So the best thing
I can say

00:38:10.501 --> 00:38:12.501
is there's no official support
for that right now.

00:38:12.501 --> 00:38:14.501
Lockwood: Yeah, right now.
you can--you can do that

00:38:14.501 --> 00:38:16.400
if you've got the route access.
You can, you know,

00:38:16.400 --> 00:38:20.000
run ifconfig and bring up stuff
from a route shell.

00:38:20.000 --> 00:38:22.000
man: And if you're doing a demo,
I encourage you to do that.

00:38:22.000 --> 00:38:24.000
Lockwood: The framework doesn't
realize it's there.

00:38:24.000 --> 00:38:26.000
It might say
"No internet connection,"

00:38:26.000 --> 00:38:27.501
but really, it's working

00:38:27.501 --> 00:38:29.067
because it's just sort of
a low-level hack,

00:38:29.067 --> 00:38:31.434
but you might be seeing people
doing that at places like this

00:38:31.434 --> 00:38:34.000
where Wi-Fi's not that reliable.
man: Uh-huh.

00:38:34.000 --> 00:38:36.000
[laughter]

00:38:36.000 --> 00:38:37.934
man: Okay.

00:38:40.501 --> 00:38:42.501
man: So two questions--

00:38:42.501 --> 00:38:44.501
Um, this may be a silly one,

00:38:44.501 --> 00:38:47.000
but, um, does this affect
the power requirements at all

00:38:47.000 --> 00:38:49.000
with respect to having to,
for example,

00:38:49.000 --> 00:38:52.334
grab wake locks
while in the USB mode?

00:38:52.334 --> 00:38:54.501
Lockwood: In which mode?

00:38:54.501 --> 00:38:57.000
Are you talking about the host
or the--or the accessory?

00:38:57.000 --> 00:38:59.000
man: Um, either.
I guess the accessory one.

00:38:59.000 --> 00:39:01.734
Lockwood: On accessory mode,
the phone is actually

00:39:01.734 --> 00:39:04.667
probably charging off
of whatever it's plugged into.

00:39:04.667 --> 00:39:06.667
In the host mode,
it's the other way around

00:39:06.667 --> 00:39:10.067
where the--the keyboard
or missile launcher

00:39:10.067 --> 00:39:13.534
is drawing power from--
from your Android device.

00:39:13.534 --> 00:39:15.501
So it's, you know,
part of the USB spec.

00:39:15.501 --> 00:39:17.501
Whoever has the host
has to be a battery

00:39:17.501 --> 00:39:19.501
for the other side of the cable.

00:39:19.501 --> 00:39:21.501
Gilling: But I think also,
uh, what you're getting at

00:39:21.501 --> 00:39:23.501
is specifically surrounding,

00:39:23.501 --> 00:39:25.501
keeping the device
and the screen awake.

00:39:25.501 --> 00:39:27.734
We don't take any explicit
weight--wake locks

00:39:27.734 --> 00:39:29.734
on either side of the protocol.

00:39:29.734 --> 00:39:32.501
Uh, so if you have
an interactive application

00:39:32.501 --> 00:39:34.667
that you don't want
the screen to go to sleep with,

00:39:34.667 --> 00:39:37.501
you should rely on the standard
Android way of doing that.

00:39:37.501 --> 00:39:39.501
man: Okay. There's nothing
automatic. That's what I mean.

00:39:39.501 --> 00:39:41.067
Gilling: No.
man: Okay.

00:39:41.067 --> 00:39:43.067
Gilling: No--there's no tricks
up our sleeves there.

00:39:43.067 --> 00:39:44.567
man: Okay, cool.

00:39:44.567 --> 00:39:46.601
And the second question is,
Can you give us examples

00:39:46.601 --> 00:39:48.567
of some real, um, accessories
that are being built

00:39:48.567 --> 00:39:50.567
by some real companies?
What should we expect?

00:39:50.567 --> 00:39:52.567
Gilling: Well, you saw
an exercise bike up there.

00:39:52.567 --> 00:39:54.067
man: Okay, other than that.

00:39:54.067 --> 00:39:56.067
Gilling: Um, yeah,
There's telepresence robots.

00:39:56.067 --> 00:39:58.067
I mean, this is a very new
initiative for us.

00:39:58.067 --> 00:40:00.067
What we want do is we want
to get the technology out there,

00:40:00.067 --> 00:40:02.334
and you know, we want you all to
create the next best accessory.

00:40:02.334 --> 00:40:04.501
man: Cool.

00:40:04.501 --> 00:40:06.501
man: Can you enumerate
what devices

00:40:06.501 --> 00:40:08.000
support host mode now?

00:40:08.000 --> 00:40:10.934
Gilling: Um,
I can enumerate one,

00:40:10.934 --> 00:40:12.934
which is our Motorola Xoom.
Lockwood: Motorola Xoom.

00:40:12.934 --> 00:40:14.934
Gilling: Um... [laughs]

00:40:14.934 --> 00:40:16.934
Brown: I think all
the fast follower tablets.

00:40:16.934 --> 00:40:18.934
Gilling: Yeah, I think
all the fast followers.

00:40:18.934 --> 00:40:21.434
This is--I guess
the real question is,

00:40:21.434 --> 00:40:23.434
I don't know right now.

00:40:23.434 --> 00:40:25.434
I would go to
accessories.android.com

00:40:25.434 --> 00:40:29.434
and, uh, there would at least be
contact information there.

00:40:29.434 --> 00:40:31.434
man: I'm back.
Gilling: Oh, yeah.

00:40:31.434 --> 00:40:33.067
man: Uh, for the host example,

00:40:33.067 --> 00:40:34.567
you showed a keyboard
and a mouse

00:40:34.567 --> 00:40:36.067
where it was obviously
tying into the OS

00:40:36.067 --> 00:40:38.067
and getting the information
to the application.

00:40:38.067 --> 00:40:40.067
Is there something equivalent
for the device side,

00:40:40.067 --> 00:40:42.067
where the Android is the device
and the accessory

00:40:42.067 --> 00:40:44.934
is the peripheral to tie
into the OS features?

00:40:44.934 --> 00:40:47.501
Lockwood: Um, currently,
the accessory API

00:40:47.501 --> 00:40:50.501
is directly from the application
to the hardware.

00:40:50.501 --> 00:40:52.667
Um, you know, so that's--

00:40:52.667 --> 00:40:54.934
that's--that's,
you know, great for, like,

00:40:54.934 --> 00:40:57.501
opening up a whole bunch of new
possibilities for developers,

00:40:57.501 --> 00:40:59.501
but the things that are missing

00:40:59.501 --> 00:41:01.567
are, you know,
like audio in and out.

00:41:01.567 --> 00:41:03.567
Our input devices
over the accessory mode,

00:41:03.567 --> 00:41:06.000
those are things that we're
considering for future versions

00:41:06.000 --> 00:41:08.000
where we can tie it directly

00:41:08.000 --> 00:41:10.934
into the framework
Android system itself.

00:41:13.000 --> 00:41:16.000
man: Um, you just mentioned
audio in and out.

00:41:16.000 --> 00:41:20.000
Um, on Honeycomb
with the isochronous mode

00:41:20.000 --> 00:41:22.000
would, um, it be possible to do,

00:41:22.000 --> 00:41:25.667
like, class compliant
USB audio in

00:41:25.667 --> 00:41:27.834
with this protocol, or...

00:41:27.834 --> 00:41:31.000
Lockwood: Um, well, we don't
have the isochronous support

00:41:31.000 --> 00:41:34.000
in the API at this point,
so, um,

00:41:34.000 --> 00:41:36.501
that isn't really something
you could do that easily,

00:41:36.501 --> 00:41:38.501
do using isochronous.

00:41:38.501 --> 00:41:40.501
Um, you could, however,
you know,

00:41:40.501 --> 00:41:43.000
use the two bulk endpoints
and send audio data

00:41:43.000 --> 00:41:46.067
using your own, um,
Homebrew protocol.

00:41:46.067 --> 00:41:49.501
They wouldn't be compatible
with standard audio USB devices

00:41:49.501 --> 00:41:51.501
that are out there now, though.

00:41:51.501 --> 00:41:54.167
man: So at this point,
that's still TBD.

00:41:54.167 --> 00:41:57.000
Lockwood: Yeah.
man: Okay. Thanks.

00:41:57.000 --> 00:41:59.934
man: For us traveling,
do you foresee any problem

00:41:59.934 --> 00:42:02.667
getting a tube with a
circuit board through security?

00:42:02.667 --> 00:42:04.667
[laughter]

00:42:04.667 --> 00:42:07.300
Lockwood: What's he say?
Gilling: Okay.

00:42:07.300 --> 00:42:10.234
Wh-what time? Do you want me
to put it at ten minutes?

00:42:13.000 --> 00:42:15.000
Brown: Don't put it
in your shoes.

00:42:15.000 --> 00:42:18.334
[laughter]

00:42:18.334 --> 00:42:20.667
Gilling: So five more minutes
or ten more minutes?

00:42:20.667 --> 00:42:23.000
woman: Five more minutes.
Gilling: Okay.

00:42:23.000 --> 00:42:26.734
Brown: Any more questions?

00:42:26.734 --> 00:42:30.501
Gilling: All right, well,
in favor of expediency...

00:42:30.501 --> 00:42:34.033
[applause]

00:42:34.033 --> 00:42:36.000
Gilling: And to make sure
the next people

00:42:36.000 --> 00:42:37.934
have enough time to set up.

