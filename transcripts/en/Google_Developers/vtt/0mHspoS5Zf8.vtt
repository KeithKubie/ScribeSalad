WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:05.190
EVGENY GUSEV: Now, something
completely different.

00:00:05.190 --> 00:00:10.660
5 minutes of-- but first,
let me introduce myself.

00:00:10.660 --> 00:00:14.020
Hi, my name is Evgeny, and
I'm from [INAUDIBLE] of Wrike.

00:00:14.020 --> 00:00:14.770
What is Wrike?

00:00:14.770 --> 00:00:16.600
Wrike is a project
management solution

00:00:16.600 --> 00:00:18.680
which helps you to
be more productive.

00:00:18.680 --> 00:00:23.060
We have a lot of cool features,
such as dashboards, task lists,

00:00:23.060 --> 00:00:24.550
views, many more.

00:00:24.550 --> 00:00:27.980
I don't know what
[INAUDIBLE] stables.

00:00:27.980 --> 00:00:30.560
What helps us to
be more productive?

00:00:30.560 --> 00:00:31.540
It's Dart.

00:00:31.540 --> 00:00:34.060
We use it for about
three years now,

00:00:34.060 --> 00:00:37.000
and our team has grown
up to 50 plus Dart

00:00:37.000 --> 00:00:39.230
developers, which is a lot.

00:00:39.230 --> 00:00:45.310
And we wrote a lot of Dart code,
nearly 700,000 lines of code,

00:00:45.310 --> 00:00:47.310
including UI components.

00:00:47.310 --> 00:00:50.210
So Wrike loves Dart.

00:00:50.210 --> 00:00:54.265
But today, I would like to talk
about one specific framework.

00:00:54.265 --> 00:00:55.840
It's Angular.

00:00:55.840 --> 00:00:57.820
Oh, sorry, wrong
kind of Angular.

00:00:57.820 --> 00:01:00.030
That kind of Angular.

00:01:00.030 --> 00:01:00.530
Yeah.

00:01:00.530 --> 00:01:03.380
[LAUGHTER AND APPLAUSE]

00:01:03.380 --> 00:01:07.810
And the main question is, is
Angular that [INAUDIBLE] number

00:01:07.810 --> 00:01:09.960
one in the world?

00:01:09.960 --> 00:01:11.440
No.

00:01:11.440 --> 00:01:13.830
So this is AngularDart--

00:01:13.830 --> 00:01:15.070
5 Minutes of No.

00:01:17.990 --> 00:01:20.980
Is it the fastest
framework in the world?

00:01:20.980 --> 00:01:22.810
No.

00:01:22.810 --> 00:01:25.360
Just imagine-- you're playing
with your small, lovely to-do

00:01:25.360 --> 00:01:25.990
list.

00:01:25.990 --> 00:01:28.820
Everything think is
fast and smooth--

00:01:28.820 --> 00:01:32.090
and your Chrome is blinking.

00:01:32.090 --> 00:01:36.070
Everything is fast and
smooth, but then comes

00:01:36.070 --> 00:01:39.160
the change detection, and
punch you right in the face.

00:01:41.830 --> 00:01:43.270
What can you do with that?

00:01:43.270 --> 00:01:46.590
Use onpush, always.

00:01:46.590 --> 00:01:50.680
Use mutable data structures such
as BuiltLis and built values.

00:01:50.680 --> 00:01:54.010
And try to avoid zones because
every time you hit the zone,

00:01:54.010 --> 00:01:58.780
somewhere, a kitty hurts
from the change detection.

00:01:58.780 --> 00:02:02.320
Is it the smallest
framework in the world?

00:02:02.320 --> 00:02:02.820
No.

00:02:06.470 --> 00:02:10.340
Just imagine you're playing with
your small, lovely Hello World.

00:02:10.340 --> 00:02:14.600
Everything is fast and
smooth, and your template,

00:02:14.600 --> 00:02:15.630
just a few world--

00:02:15.630 --> 00:02:18.550
Hello Worlds-- Hello World.

00:02:18.550 --> 00:02:24.770
You compile, wait
for just 30 seconds,

00:02:24.770 --> 00:02:28.520
and then comes the
Angular compiler

00:02:28.520 --> 00:02:31.290
and punch you right in the face
with 200 kilobytes of code.

00:02:36.800 --> 00:02:43.460
Your to-do list is almost
one megabyte of code.

00:02:43.460 --> 00:02:45.260
And your big application,
such as Wrike,

00:02:45.260 --> 00:02:47.090
is 14 megabytes of code.

00:02:50.006 --> 00:02:52.922
[APPLAUSE]

00:02:55.840 --> 00:02:58.460
What can you do with that?

00:02:58.460 --> 00:03:03.550
On set reserve whitespace
until Angular 5 release.

00:03:03.550 --> 00:03:06.470
Keep calm and update
because with every version,

00:03:06.470 --> 00:03:11.110
Angular produces more
compact and fast code.

00:03:11.110 --> 00:03:12.615
And use deferred at closing.

00:03:12.615 --> 00:03:15.130
It's help you not
to ship your codes

00:03:15.130 --> 00:03:18.740
in one big chunk, of course.

00:03:18.740 --> 00:03:21.800
Is it the most convenient
framework in the world?

00:03:21.800 --> 00:03:25.555
Well, I would say that there are
other stars in this universe.

00:03:25.555 --> 00:03:34.060
[EXPLOSION NOISES]
Yeah, that's enough.

00:03:34.060 --> 00:03:37.300
I see people in front of me
be like, what's the point?

00:03:37.300 --> 00:03:38.440
Why you're still here?

00:03:38.440 --> 00:03:39.085
Just to suffer?

00:03:43.330 --> 00:03:46.600
Does it mean that
AngularDart is bad?

00:03:46.600 --> 00:03:56.340
I would say no, God,
please, no, no, no.

00:03:56.340 --> 00:03:59.480
What you actually want
from your web framework,

00:03:59.480 --> 00:04:03.980
from any framework, must
simplify complex things,

00:04:03.980 --> 00:04:07.450
must provide a layer of
abstraction, and of course,

00:04:07.450 --> 00:04:09.800
help you to be more productive.

00:04:09.800 --> 00:04:15.050
And Angular have this one
in all these features.

00:04:15.050 --> 00:04:16.870
Not every one of your
team is a [INAUDIBLE]

00:04:16.870 --> 00:04:19.940
who squeeze the juice
out of the browser.

00:04:19.940 --> 00:04:22.520
You want that
framework will help you

00:04:22.520 --> 00:04:25.220
and your team with every
person of your team,

00:04:25.220 --> 00:04:28.120
just to write good code.

00:04:28.120 --> 00:04:31.890
Yeah, maybe AngularDart
is not so fast,

00:04:31.890 --> 00:04:35.840
but have you tried to go
to shopping with a Ferrari?

00:04:35.840 --> 00:04:40.190
Well, I haven't, but I just
imagine that it's complicated.

00:04:40.190 --> 00:04:45.830
And I don't think that Wrike
team can grow from this to this

00:04:45.830 --> 00:04:48.930
if we're still using JavaScript.

00:04:48.930 --> 00:04:51.710
And what AngularDart--
why it's good?

00:04:51.710 --> 00:04:54.340
Because it's fast enough,
in most cases, and you can

00:04:54.340 --> 00:04:57.020
tune it to be more fast.

00:04:57.020 --> 00:04:58.470
It's feature rich.

00:04:58.470 --> 00:05:00.770
If you count the number
of [INAUDIBLE] packages

00:05:00.770 --> 00:05:04.970
for your super small library,
I bet you will surprised,

00:05:04.970 --> 00:05:07.820
and tree shaking will
help you with the size.

00:05:07.820 --> 00:05:09.680
And of course,
Dart type system--

00:05:09.680 --> 00:05:12.080
well, it has some issues, yes.

00:05:12.080 --> 00:05:14.080
But from the front
end perspective,

00:05:14.080 --> 00:05:15.370
if it's a [KISS NOISE].

00:05:15.370 --> 00:05:16.580
It's a masterpiece.

00:05:19.674 --> 00:05:22.310
And it constantly improves.

00:05:22.310 --> 00:05:26.760
With every version, AngularDart
is better, better, and better.

00:05:26.760 --> 00:05:31.220
So I said to you that it
would be 5 Minutes of No.

00:05:31.220 --> 00:05:34.970
I lied, because if you
ask me, is AngularDart

00:05:34.970 --> 00:05:38.330
the framework number one in the
world to be more productive?

00:05:38.330 --> 00:05:41.600
I would say, yes, and
I hope that next year

00:05:41.600 --> 00:05:45.110
would be the year of
yes for the AngularDart.

00:05:45.110 --> 00:05:46.840
Thank you.

