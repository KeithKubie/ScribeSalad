WEBVTT
Kind: captions
Language: en

00:00:01.490 --> 00:00:04.100
 
in order to build deep neural networks

00:00:04.100 --> 00:00:04.110
in order to build deep neural networks
 

00:00:04.110 --> 00:00:06.320
in order to build deep neural networks
one modification to the basic

00:00:06.320 --> 00:00:06.330
one modification to the basic
 

00:00:06.330 --> 00:00:08.660
one modification to the basic
convolutional operation that you need to

00:00:08.660 --> 00:00:08.670
convolutional operation that you need to
 

00:00:08.670 --> 00:00:11.360
convolutional operation that you need to
really use is padding let's see how it

00:00:11.360 --> 00:00:11.370
really use is padding let's see how it
 

00:00:11.370 --> 00:00:14.299
really use is padding let's see how it
works what we saw in earlier videos is

00:00:14.299 --> 00:00:14.309
works what we saw in earlier videos is
 

00:00:14.309 --> 00:00:16.550
works what we saw in earlier videos is
that if you take a 6x6 image and

00:00:16.550 --> 00:00:16.560
that if you take a 6x6 image and
 

00:00:16.560 --> 00:00:20.029
that if you take a 6x6 image and
convolve it with a 3x3 filter you end up

00:00:20.029 --> 00:00:20.039
convolve it with a 3x3 filter you end up
 

00:00:20.039 --> 00:00:23.810
convolve it with a 3x3 filter you end up
with a 4x4 output with a 4x4 matrix and

00:00:23.810 --> 00:00:23.820
with a 4x4 output with a 4x4 matrix and
 

00:00:23.820 --> 00:00:25.939
with a 4x4 output with a 4x4 matrix and
that's because the number of possible

00:00:25.939 --> 00:00:25.949
that's because the number of possible
 

00:00:25.949 --> 00:00:28.429
that's because the number of possible
positions for your 3x3 filter they're

00:00:28.429 --> 00:00:28.439
positions for your 3x3 filter they're
 

00:00:28.439 --> 00:00:30.650
positions for your 3x3 filter they're
only sort of four by four possible

00:00:30.650 --> 00:00:30.660
only sort of four by four possible
 

00:00:30.660 --> 00:00:34.100
only sort of four by four possible
positions for the 3x3 filter to fit in

00:00:34.100 --> 00:00:34.110
positions for the 3x3 filter to fit in
 

00:00:34.110 --> 00:00:38.569
positions for the 3x3 filter to fit in
your 6x6 matrix and the math for this

00:00:38.569 --> 00:00:38.579
your 6x6 matrix and the math for this
 

00:00:38.579 --> 00:00:41.840
your 6x6 matrix and the math for this
turns out to be that if you have a n by

00:00:41.840 --> 00:00:41.850
turns out to be that if you have a n by
 

00:00:41.850 --> 00:00:44.779
turns out to be that if you have a n by
n image and to involve that with an FF

00:00:44.779 --> 00:00:44.789
n image and to involve that with an FF
 

00:00:44.789 --> 00:00:47.779
n image and to involve that with an FF
filter then the dimension of the output

00:00:47.779 --> 00:00:47.789
filter then the dimension of the output
 

00:00:47.789 --> 00:00:54.740
filter then the dimension of the output
will be n minus F plus 1 by n minus F

00:00:54.740 --> 00:00:54.750
will be n minus F plus 1 by n minus F
 

00:00:54.750 --> 00:01:01.270
will be n minus F plus 1 by n minus F
plus 1 and in this example 6 minus 3

00:01:01.270 --> 00:01:01.280
plus 1 and in this example 6 minus 3
 

00:01:01.280 --> 00:01:03.950
plus 1 and in this example 6 minus 3
plus 1 is equal to 4 which is why you

00:01:03.950 --> 00:01:03.960
plus 1 is equal to 4 which is why you
 

00:01:03.960 --> 00:01:07.969
plus 1 is equal to 4 which is why you
want up with a 4 by 4 output so the two

00:01:07.969 --> 00:01:07.979
want up with a 4 by 4 output so the two
 

00:01:07.979 --> 00:01:11.270
want up with a 4 by 4 output so the two
downsides to this one is that if every

00:01:11.270 --> 00:01:11.280
downsides to this one is that if every
 

00:01:11.280 --> 00:01:13.219
downsides to this one is that if every
time you apply a convolutional operator

00:01:13.219 --> 00:01:13.229
time you apply a convolutional operator
 

00:01:13.229 --> 00:01:15.620
time you apply a convolutional operator
your image shrink so we've gone from 6

00:01:15.620 --> 00:01:15.630
your image shrink so we've gone from 6
 

00:01:15.630 --> 00:01:17.929
your image shrink so we've gone from 6
by 6 down to 4 by 4 then you know you

00:01:17.929 --> 00:01:17.939
by 6 down to 4 by 4 then you know you
 

00:01:17.939 --> 00:01:19.730
by 6 down to 4 by 4 then you know you
can only do this a few times before your

00:01:19.730 --> 00:01:19.740
can only do this a few times before your
 

00:01:19.740 --> 00:01:21.890
can only do this a few times before your
image starts getting really small maybe

00:01:21.890 --> 00:01:21.900
image starts getting really small maybe
 

00:01:21.900 --> 00:01:23.420
image starts getting really small maybe
it strings down to one by one or

00:01:23.420 --> 00:01:23.430
it strings down to one by one or
 

00:01:23.430 --> 00:01:25.789
it strings down to one by one or
something so maybe you don't want your

00:01:25.789 --> 00:01:25.799
something so maybe you don't want your
 

00:01:25.799 --> 00:01:27.950
something so maybe you don't want your
image to shrink every time you two

00:01:27.950 --> 00:01:27.960
image to shrink every time you two
 

00:01:27.960 --> 00:01:30.050
image to shrink every time you two
changes or to other features on it so

00:01:30.050 --> 00:01:30.060
changes or to other features on it so
 

00:01:30.060 --> 00:01:32.359
changes or to other features on it so
that's one downside and the second

00:01:32.359 --> 00:01:32.369
that's one downside and the second
 

00:01:32.369 --> 00:01:34.340
that's one downside and the second
downside is that if you look at the

00:01:34.340 --> 00:01:34.350
downside is that if you look at the
 

00:01:34.350 --> 00:01:36.980
downside is that if you look at the
pixel at the corner of the page this

00:01:36.980 --> 00:01:36.990
pixel at the corner of the page this
 

00:01:36.990 --> 00:01:39.530
pixel at the corner of the page this
little pixel is touchless used only in

00:01:39.530 --> 00:01:39.540
little pixel is touchless used only in
 

00:01:39.540 --> 00:01:41.630
little pixel is touchless used only in
one of the outputs because it touches

00:01:41.630 --> 00:01:41.640
one of the outputs because it touches
 

00:01:41.640 --> 00:01:44.480
one of the outputs because it touches
that feed by the region whereas if you

00:01:44.480 --> 00:01:44.490
that feed by the region whereas if you
 

00:01:44.490 --> 00:01:47.810
that feed by the region whereas if you
take a pixel in the middle say this

00:01:47.810 --> 00:01:47.820
take a pixel in the middle say this
 

00:01:47.820 --> 00:01:50.660
take a pixel in the middle say this
pixel then there are lot of feed by

00:01:50.660 --> 00:01:50.670
pixel then there are lot of feed by
 

00:01:50.670 --> 00:01:53.870
pixel then there are lot of feed by
three regions that overlap that pixel

00:01:53.870 --> 00:01:53.880
three regions that overlap that pixel
 

00:01:53.880 --> 00:01:58.249
three regions that overlap that pixel
and so it's as if pixels on the corners

00:01:58.249 --> 00:01:58.259
and so it's as if pixels on the corners
 

00:01:58.259 --> 00:02:00.889
and so it's as if pixels on the corners
around the edges are used much less in

00:02:00.889 --> 00:02:00.899
around the edges are used much less in
 

00:02:00.899 --> 00:02:02.719
around the edges are used much less in
the output so you're throwing away a lot

00:02:02.719 --> 00:02:02.729
the output so you're throwing away a lot
 

00:02:02.729 --> 00:02:04.969
the output so you're throwing away a lot
of the information near the edge of the

00:02:04.969 --> 00:02:04.979
of the information near the edge of the
 

00:02:04.979 --> 00:02:07.880
of the information near the edge of the
image so to solve both of these problems

00:02:07.880 --> 00:02:07.890
image so to solve both of these problems
 

00:02:07.890 --> 00:02:12.840
image so to solve both of these problems
you know both the shrinking output

00:02:12.840 --> 00:02:12.850
you know both the shrinking output
 

00:02:12.850 --> 00:02:14.700
you know both the shrinking output
and when we put really deep neural

00:02:14.700 --> 00:02:14.710
and when we put really deep neural
 

00:02:14.710 --> 00:02:16.950
and when we put really deep neural
networks you see why you don't want the

00:02:16.950 --> 00:02:16.960
networks you see why you don't want the
 

00:02:16.960 --> 00:02:19.080
networks you see why you don't want the
image to shrink on every step because if

00:02:19.080 --> 00:02:19.090
image to shrink on every step because if
 

00:02:19.090 --> 00:02:22.050
image to shrink on every step because if
you have maybe a hundred layer deep net

00:02:22.050 --> 00:02:22.060
you have maybe a hundred layer deep net
 

00:02:22.060 --> 00:02:23.910
you have maybe a hundred layer deep net
then if it strings a bit on every layer

00:02:23.910 --> 00:02:23.920
then if it strings a bit on every layer
 

00:02:23.920 --> 00:02:26.130
then if it strings a bit on every layer
then after 100 years you end up with a

00:02:26.130 --> 00:02:26.140
then after 100 years you end up with a
 

00:02:26.140 --> 00:02:28.770
then after 100 years you end up with a
very small image so that was one problem

00:02:28.770 --> 00:02:28.780
very small image so that was one problem
 

00:02:28.780 --> 00:02:32.580
very small image so that was one problem
the other is you know throwing away of

00:02:32.580 --> 00:02:32.590
the other is you know throwing away of
 

00:02:32.590 --> 00:02:36.480
the other is you know throwing away of
all of the information from the edges of

00:02:36.480 --> 00:02:36.490
all of the information from the edges of
 

00:02:36.490 --> 00:02:39.660
all of the information from the edges of
the image so in order to fix both of

00:02:39.660 --> 00:02:39.670
the image so in order to fix both of
 

00:02:39.670 --> 00:02:42.810
the image so in order to fix both of
these problems what you can do is before

00:02:42.810 --> 00:02:42.820
these problems what you can do is before
 

00:02:42.820 --> 00:02:44.970
these problems what you can do is before
applying the convolutional operation you

00:02:44.970 --> 00:02:44.980
applying the convolutional operation you
 

00:02:44.980 --> 00:02:48.240
applying the convolutional operation you
can add the image so in this case let's

00:02:48.240 --> 00:02:48.250
can add the image so in this case let's
 

00:02:48.250 --> 00:02:52.130
can add the image so in this case let's
say you pad the image with an additional

00:02:52.130 --> 00:02:52.140
say you pad the image with an additional
 

00:02:52.140 --> 00:02:57.540
say you pad the image with an additional
one border with an additional border of

00:02:57.540 --> 00:02:57.550
one border with an additional border of
 

00:02:57.550 --> 00:03:01.230
one border with an additional border of
one pixel or around the edges so if you

00:03:01.230 --> 00:03:01.240
one pixel or around the edges so if you
 

00:03:01.240 --> 00:03:04.650
one pixel or around the edges so if you
do that then instead of a six by six

00:03:04.650 --> 00:03:04.660
do that then instead of a six by six
 

00:03:04.660 --> 00:03:07.260
do that then instead of a six by six
image you've now padded this to an 8 by

00:03:07.260 --> 00:03:07.270
image you've now padded this to an 8 by
 

00:03:07.270 --> 00:03:10.320
image you've now padded this to an 8 by
8 image and if you convolve an eight by

00:03:10.320 --> 00:03:10.330
8 image and if you convolve an eight by
 

00:03:10.330 --> 00:03:11.910
8 image and if you convolve an eight by
eight image of a three by three image

00:03:11.910 --> 00:03:11.920
eight image of a three by three image
 

00:03:11.920 --> 00:03:14.820
eight image of a three by three image
you now get back out now the four by

00:03:14.820 --> 00:03:14.830
you now get back out now the four by
 

00:03:14.830 --> 00:03:17.130
you now get back out now the four by
four by the six by six image and so

00:03:17.130 --> 00:03:17.140
four by the six by six image and so
 

00:03:17.140 --> 00:03:19.530
four by the six by six image and so
you've managed to preserve the original

00:03:19.530 --> 00:03:19.540
you've managed to preserve the original
 

00:03:19.540 --> 00:03:24.000
you've managed to preserve the original
input size of six point six so by

00:03:24.000 --> 00:03:24.010
input size of six point six so by
 

00:03:24.010 --> 00:03:25.950
input size of six point six so by
convention when you've had you padded

00:03:25.950 --> 00:03:25.960
convention when you've had you padded
 

00:03:25.960 --> 00:03:31.680
convention when you've had you padded
with zeros and if P is the padding

00:03:31.680 --> 00:03:31.690
with zeros and if P is the padding
 

00:03:31.690 --> 00:03:36.500
with zeros and if P is the padding
amount so in this case P is equal to one

00:03:36.500 --> 00:03:36.510
amount so in this case P is equal to one
 

00:03:36.510 --> 00:03:39.210
amount so in this case P is equal to one
because we're padding all around with an

00:03:39.210 --> 00:03:39.220
because we're padding all around with an
 

00:03:39.220 --> 00:03:41.610
because we're padding all around with an
extra border of one pixels then the

00:03:41.610 --> 00:03:41.620
extra border of one pixels then the
 

00:03:41.620 --> 00:03:48.750
extra border of one pixels then the
output becomes n might and plus 2p minus

00:03:48.750 --> 00:03:48.760
output becomes n might and plus 2p minus
 

00:03:48.760 --> 00:03:54.600
output becomes n might and plus 2p minus
f plus 1 by n plus 2p minus F by one so

00:03:54.600 --> 00:03:54.610
f plus 1 by n plus 2p minus F by one so
 

00:03:54.610 --> 00:03:58.620
f plus 1 by n plus 2p minus F by one so
this becomes 6 plus 2 times 1 minus 3

00:03:58.620 --> 00:03:58.630
this becomes 6 plus 2 times 1 minus 3
 

00:03:58.630 --> 00:04:03.120
this becomes 6 plus 2 times 1 minus 3
plus 1 by the same thing and that so 6

00:04:03.120 --> 00:04:03.130
plus 1 by the same thing and that so 6
 

00:04:03.130 --> 00:04:06.210
plus 1 by the same thing and that so 6
plus 2 minus 3 plus 1 that's equal to 6

00:04:06.210 --> 00:04:06.220
plus 2 minus 3 plus 1 that's equal to 6
 

00:04:06.220 --> 00:04:08.730
plus 2 minus 3 plus 1 that's equal to 6
so you end up with a six by six image

00:04:08.730 --> 00:04:08.740
so you end up with a six by six image
 

00:04:08.740 --> 00:04:10.200
so you end up with a six by six image
that's preserving the size of the

00:04:10.200 --> 00:04:10.210
that's preserving the size of the
 

00:04:10.210 --> 00:04:14.040
that's preserving the size of the
Arsenal input so this being pixel

00:04:14.040 --> 00:04:14.050
Arsenal input so this being pixel
 

00:04:14.050 --> 00:04:17.960
Arsenal input so this being pixel
actually influences all of these cells

00:04:17.960 --> 00:04:17.970
actually influences all of these cells
 

00:04:17.970 --> 00:04:22.670
actually influences all of these cells
of the output and so this effect

00:04:22.670 --> 00:04:22.680
of the output and so this effect
 

00:04:22.680 --> 00:04:24.920
of the output and so this effect
you know maybe not quite thering away

00:04:24.920 --> 00:04:24.930
you know maybe not quite thering away
 

00:04:24.930 --> 00:04:27.590
you know maybe not quite thering away
but counting less the information from

00:04:27.590 --> 00:04:27.600
but counting less the information from
 

00:04:27.600 --> 00:04:29.900
but counting less the information from
the edge of a corner or the edge of the

00:04:29.900 --> 00:04:29.910
the edge of a corner or the edge of the
 

00:04:29.910 --> 00:04:34.400
the edge of a corner or the edge of the
image is reduced and I've shown here the

00:04:34.400 --> 00:04:34.410
image is reduced and I've shown here the
 

00:04:34.410 --> 00:04:37.310
image is reduced and I've shown here the
effect of having the border with just

00:04:37.310 --> 00:04:37.320
effect of having the border with just
 

00:04:37.320 --> 00:04:39.680
effect of having the border with just
one pixel if you want you can also pad

00:04:39.680 --> 00:04:39.690
one pixel if you want you can also pad
 

00:04:39.690 --> 00:04:42.200
one pixel if you want you can also pad
the border with two pixels in which case

00:04:42.200 --> 00:04:42.210
the border with two pixels in which case
 

00:04:42.210 --> 00:04:44.810
the border with two pixels in which case
I guess you know add on another border

00:04:44.810 --> 00:04:44.820
I guess you know add on another border
 

00:04:44.820 --> 00:04:47.360
I guess you know add on another border
here and that you can pattern with even

00:04:47.360 --> 00:04:47.370
here and that you can pattern with even
 

00:04:47.370 --> 00:04:51.950
here and that you can pattern with even
more pixels if you choose so I guess

00:04:51.950 --> 00:04:51.960
more pixels if you choose so I guess
 

00:04:51.960 --> 00:04:53.360
more pixels if you choose so I guess
what I'm drawing here this would be a

00:04:53.360 --> 00:04:53.370
what I'm drawing here this would be a
 

00:04:53.370 --> 00:04:59.600
what I'm drawing here this would be a
pad of equal to or equals to in terms of

00:04:59.600 --> 00:04:59.610
pad of equal to or equals to in terms of
 

00:04:59.610 --> 00:05:01.430
pad of equal to or equals to in terms of
how much to pad it turns out there are

00:05:01.430 --> 00:05:01.440
how much to pad it turns out there are
 

00:05:01.440 --> 00:05:03.850
how much to pad it turns out there are
two common choices that are called

00:05:03.850 --> 00:05:03.860
two common choices that are called
 

00:05:03.860 --> 00:05:06.260
two common choices that are called
valid convolutions and saying

00:05:06.260 --> 00:05:06.270
valid convolutions and saying
 

00:05:06.270 --> 00:05:08.240
valid convolutions and saying
convolutions not sure these are great

00:05:08.240 --> 00:05:08.250
convolutions not sure these are great
 

00:05:08.250 --> 00:05:11.150
convolutions not sure these are great
names but in a valid convolution this

00:05:11.150 --> 00:05:11.160
names but in a valid convolution this
 

00:05:11.160 --> 00:05:16.730
names but in a valid convolution this
basically means no padding and so in

00:05:16.730 --> 00:05:16.740
basically means no padding and so in
 

00:05:16.740 --> 00:05:19.180
basically means no padding and so in
this case you might have an N by n image

00:05:19.180 --> 00:05:19.190
this case you might have an N by n image
 

00:05:19.190 --> 00:05:23.270
this case you might have an N by n image
convolve moving F by F filter and this

00:05:23.270 --> 00:05:23.280
convolve moving F by F filter and this
 

00:05:23.280 --> 00:05:27.230
convolve moving F by F filter and this
will give you an N minus F plus 1 by n

00:05:27.230 --> 00:05:27.240
will give you an N minus F plus 1 by n
 

00:05:27.240 --> 00:05:30.350
will give you an N minus F plus 1 by n
minus F plus 1 dimensional output so

00:05:30.350 --> 00:05:30.360
minus F plus 1 dimensional output so
 

00:05:30.360 --> 00:05:32.540
minus F plus 1 dimensional output so
this is a like the example we had

00:05:32.540 --> 00:05:32.550
this is a like the example we had
 

00:05:32.550 --> 00:05:34.219
this is a like the example we had
previously from the previous videos

00:05:34.219 --> 00:05:34.229
previously from the previous videos
 

00:05:34.229 --> 00:05:37.040
previously from the previous videos
where we had an N by n image to involve

00:05:37.040 --> 00:05:37.050
where we had an N by n image to involve
 

00:05:37.050 --> 00:05:39.830
where we had an N by n image to involve
with a 3 by 3 filter and that gave you a

00:05:39.830 --> 00:05:39.840
with a 3 by 3 filter and that gave you a
 

00:05:39.840 --> 00:05:45.920
with a 3 by 3 filter and that gave you a
4 by 4 output the other most common

00:05:45.920 --> 00:05:45.930
4 by 4 output the other most common
 

00:05:45.930 --> 00:05:48.950
4 by 4 output the other most common
choice of padding is called the same

00:05:48.950 --> 00:05:48.960
choice of padding is called the same
 

00:05:48.960 --> 00:05:52.610
choice of padding is called the same
convolution and that means when you pad

00:05:52.610 --> 00:05:52.620
convolution and that means when you pad
 

00:05:52.620 --> 00:05:56.089
convolution and that means when you pad
so the output size is the same as the

00:05:56.089 --> 00:05:56.099
so the output size is the same as the
 

00:05:56.099 --> 00:06:01.070
so the output size is the same as the
input size so if we actually look at

00:06:01.070 --> 00:06:01.080
input size so if we actually look at
 

00:06:01.080 --> 00:06:03.890
input size so if we actually look at
this formula when you pad by P pixels

00:06:03.890 --> 00:06:03.900
this formula when you pad by P pixels
 

00:06:03.900 --> 00:06:07.969
this formula when you pad by P pixels
then this as if n goes to n plus 2 P and

00:06:07.969 --> 00:06:07.979
then this as if n goes to n plus 2 P and
 

00:06:07.979 --> 00:06:10.820
then this as if n goes to n plus 2 P and
then you have a from the rest of this

00:06:10.820 --> 00:06:10.830
then you have a from the rest of this
 

00:06:10.830 --> 00:06:16.730
then you have a from the rest of this
right minus F plus 1 so we have an N by

00:06:16.730 --> 00:06:16.740
right minus F plus 1 so we have an N by
 

00:06:16.740 --> 00:06:20.330
right minus F plus 1 so we have an N by
n image and the padding of a border of P

00:06:20.330 --> 00:06:20.340
n image and the padding of a border of P
 

00:06:20.340 --> 00:06:23.120
n image and the padding of a border of P
pick holes all around then the output

00:06:23.120 --> 00:06:23.130
pick holes all around then the output
 

00:06:23.130 --> 00:06:25.430
pick holes all around then the output
size ends up being this dimension n plus

00:06:25.430 --> 00:06:25.440
size ends up being this dimension n plus
 

00:06:25.440 --> 00:06:31.030
size ends up being this dimension n plus
2 P minus F plus 1 and so

00:06:31.030 --> 00:06:31.040
2 P minus F plus 1 and so
 

00:06:31.040 --> 00:06:35.110
2 P minus F plus 1 and so
if you want n plus 2p minus f plus 1 to

00:06:35.110 --> 00:06:35.120
if you want n plus 2p minus f plus 1 to
 

00:06:35.120 --> 00:06:37.120
if you want n plus 2p minus f plus 1 to
be equal to one so that the output size

00:06:37.120 --> 00:06:37.130
be equal to one so that the output size
 

00:06:37.130 --> 00:06:39.600
be equal to one so that the output size
is the same as the input size if you

00:06:39.600 --> 00:06:39.610
is the same as the input size if you
 

00:06:39.610 --> 00:06:43.060
is the same as the input size if you
take this and solve for I guess n

00:06:43.060 --> 00:06:43.070
take this and solve for I guess n
 

00:06:43.070 --> 00:06:45.400
take this and solve for I guess n
cancels out on both sides and if you

00:06:45.400 --> 00:06:45.410
cancels out on both sides and if you
 

00:06:45.410 --> 00:06:48.790
cancels out on both sides and if you
solve for P this implies that P is equal

00:06:48.790 --> 00:06:48.800
solve for P this implies that P is equal
 

00:06:48.800 --> 00:06:56.260
solve for P this implies that P is equal
to F minus 1 over 2 so when F is odd by

00:06:56.260 --> 00:06:56.270
to F minus 1 over 2 so when F is odd by
 

00:06:56.270 --> 00:06:58.450
to F minus 1 over 2 so when F is odd by
choosing the padding size to be as

00:06:58.450 --> 00:06:58.460
choosing the padding size to be as
 

00:06:58.460 --> 00:07:00.790
choosing the padding size to be as
follows you can make sure that the upper

00:07:00.790 --> 00:07:00.800
follows you can make sure that the upper
 

00:07:00.800 --> 00:07:04.290
follows you can make sure that the upper
size is the same as the input size and

00:07:04.290 --> 00:07:04.300
size is the same as the input size and
 

00:07:04.300 --> 00:07:07.510
size is the same as the input size and
that's why for example when the filter

00:07:07.510 --> 00:07:07.520
that's why for example when the filter
 

00:07:07.520 --> 00:07:09.760
that's why for example when the filter
was 3 by 3 as in the example on the

00:07:09.760 --> 00:07:09.770
was 3 by 3 as in the example on the
 

00:07:09.770 --> 00:07:12.100
was 3 by 3 as in the example on the
previous slide the padding that would

00:07:12.100 --> 00:07:12.110
previous slide the padding that would
 

00:07:12.110 --> 00:07:13.660
previous slide the padding that would
make the upper size the same as the

00:07:13.660 --> 00:07:13.670
make the upper size the same as the
 

00:07:13.670 --> 00:07:17.710
make the upper size the same as the
input size was V minus 1 over 2 which is

00:07:17.710 --> 00:07:17.720
input size was V minus 1 over 2 which is
 

00:07:17.720 --> 00:07:25.950
input size was V minus 1 over 2 which is
1 and as another example if your filter

00:07:25.950 --> 00:07:25.960
1 and as another example if your filter
 

00:07:25.960 --> 00:07:30.640
1 and as another example if your filter
was 5 by 5 so if F is equal to 5 then if

00:07:30.640 --> 00:07:30.650
was 5 by 5 so if F is equal to 5 then if
 

00:07:30.650 --> 00:07:32.350
was 5 by 5 so if F is equal to 5 then if
you plug it into that equation you find

00:07:32.350 --> 00:07:32.360
you plug it into that equation you find
 

00:07:32.360 --> 00:07:35.440
you plug it into that equation you find
it a padding of 2 is required to keep

00:07:35.440 --> 00:07:35.450
it a padding of 2 is required to keep
 

00:07:35.450 --> 00:07:38.620
it a padding of 2 is required to keep
the output size the same as the input

00:07:38.620 --> 00:07:38.630
the output size the same as the input
 

00:07:38.630 --> 00:07:43.920
the output size the same as the input
size when when the filter is 5 by 5 and

00:07:43.920 --> 00:07:43.930
size when when the filter is 5 by 5 and
 

00:07:43.930 --> 00:07:48.810
size when when the filter is 5 by 5 and
by convention in computer vision F is

00:07:48.810 --> 00:07:48.820
by convention in computer vision F is
 

00:07:48.820 --> 00:07:53.430
by convention in computer vision F is
usually odd is that he almost always odd

00:07:53.430 --> 00:07:53.440
usually odd is that he almost always odd
 

00:07:53.440 --> 00:07:58.710
usually odd is that he almost always odd
and you rarely see even number filters

00:07:58.710 --> 00:07:58.720
and you rarely see even number filters
 

00:07:58.720 --> 00:08:03.490
and you rarely see even number filters
filter webs using computer vision and I

00:08:03.490 --> 00:08:03.500
filter webs using computer vision and I
 

00:08:03.500 --> 00:08:04.780
filter webs using computer vision and I
think the two reasons for that

00:08:04.780 --> 00:08:04.790
think the two reasons for that
 

00:08:04.790 --> 00:08:07.990
think the two reasons for that
one is that if F was even you know then

00:08:07.990 --> 00:08:08.000
one is that if F was even you know then
 

00:08:08.000 --> 00:08:10.660
one is that if F was even you know then
you need some a summation adding it's

00:08:10.660 --> 00:08:10.670
you need some a summation adding it's
 

00:08:10.670 --> 00:08:12.670
you need some a summation adding it's
only if F isn't that this type of same

00:08:12.670 --> 00:08:12.680
only if F isn't that this type of same
 

00:08:12.680 --> 00:08:14.920
only if F isn't that this type of same
convolution use the natural padding we

00:08:14.920 --> 00:08:14.930
convolution use the natural padding we
 

00:08:14.930 --> 00:08:16.840
convolution use the natural padding we
can add the same dimension all around

00:08:16.840 --> 00:08:16.850
can add the same dimension all around
 

00:08:16.850 --> 00:08:19.150
can add the same dimension all around
other than you know had more on the left

00:08:19.150 --> 00:08:19.160
other than you know had more on the left
 

00:08:19.160 --> 00:08:20.680
other than you know had more on the left
and pad less on the right or something

00:08:20.680 --> 00:08:20.690
and pad less on the right or something
 

00:08:20.690 --> 00:08:25.600
and pad less on the right or something
asymmetric and then second when you have

00:08:25.600 --> 00:08:25.610
asymmetric and then second when you have
 

00:08:25.610 --> 00:08:28.780
asymmetric and then second when you have
an odd dimension filter such as 3 by 3

00:08:28.780 --> 00:08:28.790
an odd dimension filter such as 3 by 3
 

00:08:28.790 --> 00:08:31.600
an odd dimension filter such as 3 by 3
or 5 by 5 then it has a central position

00:08:31.600 --> 00:08:31.610
or 5 by 5 then it has a central position
 

00:08:31.610 --> 00:08:33.760
or 5 by 5 then it has a central position
and sometimes in computer vision is nice

00:08:33.760 --> 00:08:33.770
and sometimes in computer vision is nice
 

00:08:33.770 --> 00:08:35.150
and sometimes in computer vision is nice
to have a

00:08:35.150 --> 00:08:35.160
to have a
 

00:08:35.160 --> 00:08:37.460
to have a
distinguished it's nice to have a pixel

00:08:37.460 --> 00:08:37.470
distinguished it's nice to have a pixel
 

00:08:37.470 --> 00:08:39.710
distinguished it's nice to have a pixel
you can call the central pixel so you

00:08:39.710 --> 00:08:39.720
you can call the central pixel so you
 

00:08:39.720 --> 00:08:41.659
you can call the central pixel so you
can talk about you know the position of

00:08:41.659 --> 00:08:41.669
can talk about you know the position of
 

00:08:41.669 --> 00:08:44.540
can talk about you know the position of
the filter maybe none of these is a

00:08:44.540 --> 00:08:44.550
the filter maybe none of these is a
 

00:08:44.550 --> 00:08:47.330
the filter maybe none of these is a
great reason for using f to be pretty

00:08:47.330 --> 00:08:47.340
great reason for using f to be pretty
 

00:08:47.340 --> 00:08:49.220
great reason for using f to be pretty
much always odds that you look the

00:08:49.220 --> 00:08:49.230
much always odds that you look the
 

00:08:49.230 --> 00:08:51.920
much always odds that you look the
communication literature you see 3x3

00:08:51.920 --> 00:08:51.930
communication literature you see 3x3
 

00:08:51.930 --> 00:08:54.650
communication literature you see 3x3
filters are very common you see some 5x5

00:08:54.650 --> 00:08:54.660
filters are very common you see some 5x5
 

00:08:54.660 --> 00:08:57.320
filters are very common you see some 5x5
seven by sevens you know and actually

00:08:57.320 --> 00:08:57.330
seven by sevens you know and actually
 

00:08:57.330 --> 00:08:59.120
seven by sevens you know and actually
sometimes well later we'll also talk

00:08:59.120 --> 00:08:59.130
sometimes well later we'll also talk
 

00:08:59.130 --> 00:09:00.890
sometimes well later we'll also talk
about one-by-one filters and when that

00:09:00.890 --> 00:09:00.900
about one-by-one filters and when that
 

00:09:00.900 --> 00:09:04.280
about one-by-one filters and when that
makes sense but just by convention I

00:09:04.280 --> 00:09:04.290
makes sense but just by convention I
 

00:09:04.290 --> 00:09:06.770
makes sense but just by convention I
recommend you just use odd numbered

00:09:06.770 --> 00:09:06.780
recommend you just use odd numbered
 

00:09:06.780 --> 00:09:09.590
recommend you just use odd numbered
filters as well I think that you can

00:09:09.590 --> 00:09:09.600
filters as well I think that you can
 

00:09:09.600 --> 00:09:11.840
filters as well I think that you can
probably get just fine performance even

00:09:11.840 --> 00:09:11.850
probably get just fine performance even
 

00:09:11.850 --> 00:09:13.820
probably get just fine performance even
if you were to use an even number value

00:09:13.820 --> 00:09:13.830
if you were to use an even number value
 

00:09:13.830 --> 00:09:16.100
if you were to use an even number value
for F but if you stick to the common

00:09:16.100 --> 00:09:16.110
for F but if you stick to the common
 

00:09:16.110 --> 00:09:18.620
for F but if you stick to the common
computer vision convention you know I

00:09:18.620 --> 00:09:18.630
computer vision convention you know I
 

00:09:18.630 --> 00:09:22.940
computer vision convention you know I
usually just use odd-numbered F so

00:09:22.940 --> 00:09:22.950
usually just use odd-numbered F so
 

00:09:22.950 --> 00:09:24.770
usually just use odd-numbered F so
you've now seen how to use pattern

00:09:24.770 --> 00:09:24.780
you've now seen how to use pattern
 

00:09:24.780 --> 00:09:27.470
you've now seen how to use pattern
convolutions to specify the padding for

00:09:27.470 --> 00:09:27.480
convolutions to specify the padding for
 

00:09:27.480 --> 00:09:29.510
convolutions to specify the padding for
a convolutional operation you can either

00:09:29.510 --> 00:09:29.520
a convolutional operation you can either
 

00:09:29.520 --> 00:09:32.690
a convolutional operation you can either
specify the value for P or you can just

00:09:32.690 --> 00:09:32.700
specify the value for P or you can just
 

00:09:32.700 --> 00:09:34.760
specify the value for P or you can just
say that this is a valid convolution

00:09:34.760 --> 00:09:34.770
say that this is a valid convolution
 

00:09:34.770 --> 00:09:37.130
say that this is a valid convolution
which means P equals zero or you can say

00:09:37.130 --> 00:09:37.140
which means P equals zero or you can say
 

00:09:37.140 --> 00:09:38.990
which means P equals zero or you can say
this is a same convolution which means

00:09:38.990 --> 00:09:39.000
this is a same convolution which means
 

00:09:39.000 --> 00:09:40.700
this is a same convolution which means
add as much as you need to make sure

00:09:40.700 --> 00:09:40.710
add as much as you need to make sure
 

00:09:40.710 --> 00:09:42.380
add as much as you need to make sure
that the output has the same dimension

00:09:42.380 --> 00:09:42.390
that the output has the same dimension
 

00:09:42.390 --> 00:09:45.200
that the output has the same dimension
as the input so that's it for padding in

00:09:45.200 --> 00:09:45.210
as the input so that's it for padding in
 

00:09:45.210 --> 00:09:46.880
as the input so that's it for padding in
the next video let's talk about how you

00:09:46.880 --> 00:09:46.890
the next video let's talk about how you
 

00:09:46.890 --> 00:09:51.050
the next video let's talk about how you
can implement strided convolutions

