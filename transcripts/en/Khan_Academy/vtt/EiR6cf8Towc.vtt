WEBVTT
Kind: captions
Language: en

00:00:00.640 --> 00:00:03.294
One thing you'll hear or
you'll see referred to a lot

00:00:03.294 --> 00:00:04.960
is something called
a flow chart, either

00:00:04.960 --> 00:00:06.710
in computer science,
or really when people

00:00:06.710 --> 00:00:09.580
talk about any type of
algorithm or process.

00:00:09.580 --> 00:00:11.680
So what I thought I would
do is for every program

00:00:11.680 --> 00:00:13.290
I write is write a
little simple flow chart.

00:00:13.290 --> 00:00:14.430
Maybe I won't do
it for every one,

00:00:14.430 --> 00:00:15.860
but I'll start with
some of the basic ones,

00:00:15.860 --> 00:00:17.776
just so we understand
that a flow chart really

00:00:17.776 --> 00:00:19.070
isn't anything fancy.

00:00:19.070 --> 00:00:20.960
So in this factorial
program that we

00:00:20.960 --> 00:00:24.469
had been looking at the last
couple of videos, any flow

00:00:24.469 --> 00:00:27.010
chart, you're just going to be
kind of at the starting point,

00:00:27.010 --> 00:00:29.420
which is usually
started, I guess,

00:00:29.420 --> 00:00:32.125
depicted with a circle
or oval of some kind.

00:00:32.125 --> 00:00:33.750
So we start-- you
could kind of view it

00:00:33.750 --> 00:00:36.950
as we're starting at this
line above this assignment

00:00:36.950 --> 00:00:40.890
of the number where we actually
ask for an input from the user.

00:00:40.890 --> 00:00:44.930
And then after that, we ask
for input from the user.

00:00:44.930 --> 00:00:47.470
This line right here,
we are asking for input

00:00:47.470 --> 00:00:50.900
from the user, so
this right over here.

00:00:50.900 --> 00:00:54.450
And we will depict that
by a parallelogram.

00:00:54.450 --> 00:00:56.740
So that is input from the user.

00:00:56.740 --> 00:01:03.561
And then we could just say
number equals user input.

00:01:03.561 --> 00:01:05.269
And you can be a little
bit loosey goosey

00:01:05.269 --> 00:01:06.280
with the terminology here.

00:01:06.280 --> 00:01:08.650
You're really just trying to say
what you're doing at this step.

00:01:08.650 --> 00:01:10.680
The parallelogram tells
us that we are somehow

00:01:10.680 --> 00:01:12.060
interfacing with the user.

00:01:12.060 --> 00:01:14.370
We're just either taking
something from the user,

00:01:14.370 --> 00:01:16.790
or we're outputting
something to the user.

00:01:16.790 --> 00:01:19.040
So here we're saying user
input is equal to number.

00:01:19.040 --> 00:01:22.190
We're assigning number
as the user input.

00:01:22.190 --> 00:01:26.020
Then the next thing we do is
just a straight-up operation.

00:01:26.020 --> 00:01:29.400
We just set product
to be equal to 1.

00:01:29.400 --> 00:01:33.320
So we just set-- and there we
just do that in a rectangle.

00:01:33.320 --> 00:01:35.380
Product equals 1.

00:01:35.380 --> 00:01:40.510
Product is equal to 1.

00:01:40.510 --> 00:01:43.760
And then something interesting
is going to happen.

00:01:43.760 --> 00:01:47.590
We enter into our for
loop, and we start with--

00:01:47.590 --> 00:01:49.090
and what I'm going
to do here is I'm

00:01:49.090 --> 00:01:51.070
going to write it a little bit
different than we wrote it over

00:01:51.070 --> 00:01:51.850
here.

00:01:51.850 --> 00:01:56.060
So what we do is we start
a-- what we're doing

00:01:56.060 --> 00:01:59.160
is we're going to start
our for loop essentially

00:01:59.160 --> 00:02:01.900
with an assignment, where we
assign-- for loop is really

00:02:01.900 --> 00:02:03.810
a bunch of things
happening at the same time.

00:02:03.810 --> 00:02:07.730
It assigns an i to the first
number in the sequence,

00:02:07.730 --> 00:02:09.790
or it tests whether
it can assign i

00:02:09.790 --> 00:02:11.290
to the first number
in the sequence.

00:02:11.290 --> 00:02:13.160
If it can, then it proceeds.

00:02:13.160 --> 00:02:16.280
If it can't, then it
breaks out of the for loop.

00:02:16.280 --> 00:02:18.670
So let me put it this way.

00:02:18.670 --> 00:02:23.280
I will do kind of a test
case right over here.

00:02:23.280 --> 00:02:25.070
So items left in sequence.

00:02:31.315 --> 00:02:32.940
And when I'm referring
to the sequence,

00:02:32.940 --> 00:02:36.160
I'm talking about this sequence
here, the range of our number.

00:02:36.160 --> 00:02:38.710
In the example they gave in the
last video, the number was 3,

00:02:38.710 --> 00:02:40.750
so items left in this sequence.

00:02:40.750 --> 00:02:43.360
I know it's hard to
read right over here.

00:02:43.360 --> 00:02:45.090
If there are-- so
let's say that there

00:02:45.090 --> 00:02:47.240
are items left in sequence.

00:02:47.240 --> 00:02:50.370
So if there are items
left in sequence,

00:02:50.370 --> 00:02:55.170
so we'll just say i is equal to
next item. i is equal to next.

00:02:55.170 --> 00:02:57.600
i is equal to the next item.

00:02:57.600 --> 00:03:00.760
If there are-- well, I'll
just hold off for the case

00:03:00.760 --> 00:03:03.530
where there are no items
left in the sequence.

00:03:03.530 --> 00:03:06.440
But let's say that there are.
i is equal to the next item.

00:03:06.440 --> 00:03:13.335
And then we also define
product to be-- actually,

00:03:13.335 --> 00:03:17.790
I wanted to do these in blue,
just our regular-- so let

00:03:17.790 --> 00:03:19.440
me write this as yes.

00:03:19.440 --> 00:03:21.140
If there are items
in the sequence,

00:03:21.140 --> 00:03:24.470
then i is equal
to the next item.

00:03:28.530 --> 00:03:30.390
That's one operation we do.

00:03:30.390 --> 00:03:33.070
And then we reset product.

00:03:33.070 --> 00:03:36.200
We reassign product
to be equal to what

00:03:36.200 --> 00:03:41.495
the former value of
product was times i plus 1.

00:03:46.830 --> 00:03:52.050
And at this point,
we essentially

00:03:52.050 --> 00:03:54.410
loop back to this
test over here.

00:03:54.410 --> 00:03:56.910
So at this point, we loop back.

00:03:56.910 --> 00:03:58.590
I'll try to write it neatly.

00:03:58.590 --> 00:04:02.400
We loop back to-- let me
do it right over here.

00:04:02.400 --> 00:04:05.470
We loop back to this
point in the program.

00:04:05.470 --> 00:04:09.950
That's why it is called a
loop, because after you perform

00:04:09.950 --> 00:04:12.330
this operation-- this is
embedded in the loop--

00:04:12.330 --> 00:04:13.870
you go back to the
beginning to see

00:04:13.870 --> 00:04:16.470
if there's any more
of the loop to do.

00:04:16.470 --> 00:04:19.190
So you go back to the
beginning before the loop,

00:04:19.190 --> 00:04:21.890
and you say, hey, are there
any items in the sequence?

00:04:21.890 --> 00:04:23.770
And this should be a
question mark over here.

00:04:23.770 --> 00:04:25.270
These kind of
question mark decision

00:04:25.270 --> 00:04:28.400
points you specify
with this diamond.

00:04:28.400 --> 00:04:30.216
If there is another
item in the sequence,

00:04:30.216 --> 00:04:31.590
then i is equal
to the next item,

00:04:31.590 --> 00:04:34.144
and product is equal to what
product was, times i plus 1,

00:04:34.144 --> 00:04:35.060
and We go to the next.

00:04:35.060 --> 00:04:36.725
Are there items left
in the sequence?

00:04:36.725 --> 00:04:38.100
And at some point,
there won't be

00:04:38.100 --> 00:04:40.110
any items left in the sequence.

00:04:40.110 --> 00:04:41.860
So there won't
be-- at some point,

00:04:41.860 --> 00:04:44.181
there won't be any items
left in the sequence.

00:04:44.181 --> 00:04:45.930
And we could go to the
right, or I'll just

00:04:45.930 --> 00:04:48.640
break out of it down here.

00:04:48.640 --> 00:04:50.980
I'll just break that
out of it down here.

00:04:50.980 --> 00:04:53.430
And now we've broken
out of this for loop.

00:04:53.430 --> 00:04:55.190
We've broken out
of this for loop,

00:04:55.190 --> 00:04:57.920
and the next thing we do once
we're done with our for loop

00:04:57.920 --> 00:05:01.000
is we just print the
value of product.

00:05:01.000 --> 00:05:02.800
We just output the
value of product.

00:05:02.800 --> 00:05:04.910
So that is an interaction
with the user.

00:05:04.910 --> 00:05:06.810
So we are literally
just outputting

00:05:06.810 --> 00:05:08.630
the value of product.

00:05:08.630 --> 00:05:15.420
So we output product,
and we are done.

00:05:15.420 --> 00:05:19.410
And I can write end for
the end of our program,

00:05:19.410 --> 00:05:22.050
and the program
will stop running.

00:05:22.050 --> 00:05:22.580
End.

00:05:22.580 --> 00:05:25.194
So this is just a simple flow
chart for this simple program,

00:05:25.194 --> 00:05:27.485
and hopefully, it helps you
appreciate that one-- well,

00:05:27.485 --> 00:05:28.820
one, a little understanding
of the program

00:05:28.820 --> 00:05:31.130
itself if the last two
videos didn't help too much.

00:05:31.130 --> 00:05:32.963
And it also gives you
a simple understanding

00:05:32.963 --> 00:05:35.310
of how to write a flow chart.

