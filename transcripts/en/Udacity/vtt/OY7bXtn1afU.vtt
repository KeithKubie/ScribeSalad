WEBVTT
Kind: captions
Language: en

00:00:00.180 --> 00:00:02.430
You've just learned how to initialize your repository and

00:00:02.430 --> 00:00:04.560
add commits to it using the staging area.

00:00:04.560 --> 00:00:08.680
So far, each commit that you've made has built upon the previous commit,

00:00:08.680 --> 00:00:10.580
creating a linear commit history.

00:00:10.580 --> 00:00:13.550
Now let's take a look at some times when you might want to make a commit history

00:00:13.550 --> 00:00:16.520
that branches out into multiple versions.

00:00:16.520 --> 00:00:18.260
Making a straight line of changes makes a lot of

00:00:18.260 --> 00:00:22.970
sense if you're just fixing bugs, adding new features or updating documentation.

00:00:22.970 --> 00:00:25.675
But what if you wanted to try out a new experimental feature that

00:00:25.675 --> 00:00:28.890
you're still not sure will work, but you still want to have a working demo to

00:00:28.890 --> 00:00:31.360
show your friends when they ask what you're working on?

00:00:31.360 --> 00:00:34.198
Or maybe you're learning Italian and want to make a version of your project for

00:00:34.198 --> 00:00:37.820
Italian-speaking people while leaving the native language version intact.

00:00:37.820 --> 00:00:40.350
In this case, you'll probably want to eventually create a setting for

00:00:40.350 --> 00:00:42.330
switching between the two languages.

00:00:42.330 --> 00:00:44.810
But maybe as a first step, you just try changing the text and

00:00:44.810 --> 00:00:47.090
seeing if you need to rework your layout a little.

00:00:47.090 --> 00:00:48.560
Of course, you could just make your changes and

00:00:48.560 --> 00:00:50.580
record the IDs for all the commits.

00:00:50.580 --> 00:00:54.370
And then use git checkout to jump back to the real official version when you

00:00:54.370 --> 00:00:55.370
need to show it to somebody.

00:00:55.370 --> 00:00:58.430
And then back to your other version afterward.

00:00:58.430 --> 00:01:01.440
But what if you find a bug in your real official version and

00:01:01.440 --> 00:01:03.240
you need to make a fix there?

00:01:03.240 --> 00:01:07.030
You need to update your records and use this new commit as your real version.

00:01:07.030 --> 00:01:08.540
This would be a lot of overhead.

00:01:08.540 --> 00:01:12.120
To make this kind of situation easier, Git allows you to create labels for

00:01:12.120 --> 00:01:13.140
your commits.

00:01:13.140 --> 00:01:15.070
These labels are called branches.

00:01:15.070 --> 00:01:17.300
In this case, we would have three different branches.

00:01:17.300 --> 00:01:18.730
First, we would have master.

00:01:18.730 --> 00:01:22.700
Master is the name given to main branch in most Git repositories and

00:01:22.700 --> 00:01:26.360
every time you create a repository, Git creates a master branch for you.

00:01:26.360 --> 00:01:29.590
This branch we would probably call something like italian and

00:01:29.590 --> 00:01:34.620
this one we might call experimental or maybe just exp for short.

00:01:34.620 --> 00:01:37.140
Remember how in last lesson when you checked out some old commits,

00:01:37.140 --> 00:01:39.142
you'd get the detached head message?

00:01:39.142 --> 00:01:41.880
Basically at that point, Git was warning you that you were looking at

00:01:41.880 --> 00:01:44.830
a commit that was not labeled with a branch name.

00:01:44.830 --> 00:01:50.140
So far, you've always been in a detached head state or on the master branch,

00:01:50.140 --> 00:01:51.960
which Git creates for you.

00:01:51.960 --> 00:01:54.960
It's possible to check out a branch in the same way you checked out commits in

00:01:54.960 --> 00:01:59.020
the past, except with the hopefully human-readable branch name rather than

00:01:59.020 --> 00:02:01.600
an unpronounceable series of characters.

00:02:01.600 --> 00:02:03.110
If you check out a branch and

00:02:03.110 --> 00:02:07.300
then make a commit, the branch label automatically updates to the new commit.

00:02:07.300 --> 00:02:11.250
That branch also stays checked out, so you don't have to check it out again.

00:02:11.250 --> 00:02:14.690
This is how you've managed to stay on the master branch without knowing anything

00:02:14.690 --> 00:02:16.840
about branches up til this point.

00:02:16.840 --> 00:02:20.720
As a matter of terminology, we sometimes refer to the current last commit on

00:02:20.720 --> 00:02:23.770
a branch as being the tip of that branch.

00:02:23.770 --> 00:02:27.650
It is possible to have multiple branch labels attached to a single commit, but

00:02:27.650 --> 00:02:30.770
making a new commit will only update the branch that you have checked out and

00:02:30.770 --> 00:02:32.080
leave any others alone.

00:02:32.080 --> 00:02:32.660
At this point,

00:02:32.660 --> 00:02:35.450
it's natural to wonder if there's any way to combine two branches,

00:02:35.450 --> 00:02:38.280
say if your experimental feature has finally worked out, but

00:02:38.280 --> 00:02:40.420
your main branch has grown since the two diverged.

00:02:40.420 --> 00:02:44.380
The process of combining two commits is known as merging and

00:02:44.380 --> 00:02:46.220
we'll get to that later on in the lesson.

00:02:46.220 --> 00:02:49.130
But first, we want you to get comfortable creating, checking out and

00:02:49.130 --> 00:02:50.460
committing to branches.

00:02:50.460 --> 00:02:51.980
Caroline will help you get started with this.

