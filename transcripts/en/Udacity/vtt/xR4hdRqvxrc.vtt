WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Here's my solution.

00:00:02.000 --> 00:00:05.000
I got rid of the doc.string just so that the whole function would fit on the page.

00:00:05.000 --> 00:00:09.000
In general, I should bring that back. The doc.string is an important part of the solution.

00:00:09.000 --> 00:00:11.000
Here is what I do.

00:00:11.000 --> 00:00:14.000
The heart of the function i just a call to shortest<u>path</u>search.

00:00:14.000 --> 00:00:18.000
Start at the start state. We have successor function and a goal function.

00:00:18.000 --> 00:00:23.000
That goal function just asks is the goal number, that integer that we're trying to achieve,

00:00:23.000 --> 00:00:29.000
anywhere in the state. Is any one of the current levels of the glasses equal to the goal?

00:00:29.000 --> 00:00:35.000
Here is a successor function, and I'm going to build up this dictionary of results,

00:00:35.000 --> 00:00:38.000
which I call "succ" for "successor.

00:00:38.000 --> 00:00:40.000
It's a dictionary of state-action pairs.

00:00:40.000 --> 00:00:47.000
I go through all the indices. That's equivalent to the glass numbers--0, 1, 2, 3.

00:00:47.000 --> 00:00:53.000
I've invented this function called "replace," and replace takes a tuple, an index into the tuple,

00:00:53.000 --> 00:00:56.000
and a value that we want that index to be.

00:00:56.000 --> 00:00:58.000
Now, why did I need that?

00:00:58.000 --> 00:01:00.000
Because tuples are immutable.

00:01:00.000 --> 00:01:05.000
Mostly this is saying replace state sub i with capacities of I,

00:01:05.000 --> 00:01:10.000
but I can't say that for a tuple, so I needed a function that's going to do it for me.

00:01:10.000 --> 00:01:14.000
Take that tuple with state sub i, replace by the capacity.

00:01:14.000 --> 00:01:17.000
That's the same as the action of filling an i.

00:01:17.000 --> 00:01:21.000
Replace it with 0. That's the action of emptying.

00:01:21.000 --> 00:01:24.000
Now, the action of pouring, which we have over here, is a little bit more complicated.

00:01:24.000 --> 00:01:28.000
We have to go through all the glasses twice, pouring from i into j.

00:01:28.000 --> 00:01:31.000
We have to make sure that we're not pouring into yourself.

00:01:31.000 --> 00:01:36.000
Then the amount that we pour is the minimum of how much we have.

00:01:36.000 --> 00:01:40.000
We can't pour more than we have in the glass that we're pouring.

00:01:40.000 --> 00:01:44.000
We also can't pour more than would fill up the glass that we're pouring into.

00:01:44.000 --> 00:01:47.000
That's the amount we're going to transfer,

00:01:47.000 --> 00:01:51.000
and then we subtract that amount from the glass we're pouring from,

00:01:51.000 --> 00:01:54.000
and we add that amount from the glass we're pouring into,

00:01:54.000 --> 00:01:56.000
and we make that a pouring action.

00:01:56.000 --> 00:01:58.000
Then we just return the result.

00:01:58.000 --> 00:02:03.000
Then there's one little statement here that says if you didn't specify the start state,

00:02:03.000 --> 00:02:07.000
make that be the tuple that contains all zeros

00:02:07.000 --> 00:02:10.000
and whose length is the same as the number of glass we have.

00:02:10.000 --> 00:02:15.000
So that's the whole solution, except here is my replace function.

00:02:15.000 --> 00:02:17.000
Replace in general takes any sequence--

00:02:17.000 --> 00:02:21.000
but it's really most applicable for tuples that are immutable,

00:02:21.000 --> 00:02:27.000
makes that sequences into a list, mutates it--because we are allowed to mutate lists,

00:02:27.000 --> 00:02:30.000
and then puts it back together again.

00:02:30.000 --> 00:02:33.000
So what am I doing here? This might look a little bit unusual.

00:02:33.000 --> 00:02:38.000
But what I'm doing is I'm saying tell me the type of the original sequence--

00:02:38.000 --> 00:02:41.000
a tuple, could be a string, could be a list--

00:02:41.000 --> 00:02:46.000
and then call that because types are functions.

00:02:46.000 --> 00:02:48.000
In this case it's going to be tuple.

00:02:48.000 --> 00:02:54.000
Then call tuple on this list s and make s back into a tuple.

00:02:54.000 --> 00:02:59.000
I made it general like this so that it would also apply to lists and string.

00:02:59.000 --> 00:03:05.000
Finally, here are the test cases, and if we run them it turns out it works.

