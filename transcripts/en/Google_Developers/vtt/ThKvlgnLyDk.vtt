WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.672
[MUSIC PLAYING]

00:00:03.672 --> 00:00:05.880
WESLEY CHUN: Hey there and
welcome to another episode

00:00:05.880 --> 00:00:07.166
of "The G Suite Dev Show."

00:00:07.166 --> 00:00:08.290
I'm your host, Wesley Chun.

00:00:08.290 --> 00:00:10.170
As you can see,
we're going to talk

00:00:10.170 --> 00:00:12.750
about sending alerts and
notifications in Hangouts Chat.

00:00:12.750 --> 00:00:15.150
But when would you want
to do this and why?

00:00:15.150 --> 00:00:16.830
You also have to
ask how to do this

00:00:16.830 --> 00:00:18.354
and where you can do it from.

00:00:18.354 --> 00:00:19.770
Well, the hint is
in the subtitle,

00:00:19.770 --> 00:00:22.560
but these answers
and more coming up.

00:00:22.560 --> 00:00:24.570
Chances are that,
if you're here,

00:00:24.570 --> 00:00:27.300
you've probably already used
the Hangouts Chat bot framework

00:00:27.300 --> 00:00:29.700
and built bots, which
take user requests

00:00:29.700 --> 00:00:30.960
and respond synchronously.

00:00:30.960 --> 00:00:32.820
Well, if not, check
out the other video

00:00:32.820 --> 00:00:34.530
first, which introduces
the framework

00:00:34.530 --> 00:00:36.510
and how to write bots.

00:00:36.510 --> 00:00:40.750
OK, so we get bots generally
respond in a synchronous way,

00:00:40.750 --> 00:00:43.800
meaning that, when someone talks
to a bot, in a direct message

00:00:43.800 --> 00:00:46.020
or @mentions a bot
in a chat room,

00:00:46.020 --> 00:00:48.180
the Hangouts Chat service
forwards that message

00:00:48.180 --> 00:00:50.430
via HTTP posts to your bot.

00:00:50.430 --> 00:00:52.020
Your bot does what
it needs to do

00:00:52.020 --> 00:00:55.080
and sends its reply back
in the HTTP response, which

00:00:55.080 --> 00:00:57.640
is then rendered in the
chat room or direct message.

00:00:57.640 --> 00:01:00.360
By the way, we refer to rooms
and DMs more generically

00:01:00.360 --> 00:01:02.070
as spaces.

00:01:02.070 --> 00:01:04.890
These asynchronous replies
correspond to user requests.

00:01:04.890 --> 00:01:07.390
But what if you need to know
when a long-running background

00:01:07.390 --> 00:01:10.590
job has completed, or a
train or a bus running late

00:01:10.590 --> 00:01:12.060
is arriving soon?

00:01:12.060 --> 00:01:15.060
Or perhaps, you want an alert,
when a server has gone down

00:01:15.060 --> 00:01:18.330
or when a new customer is
added to the corporate CRM.

00:01:18.330 --> 00:01:21.360
Well, these are situations where
you need out-of-band messages,

00:01:21.360 --> 00:01:24.180
messages which are sent
asynchronously by your bot

00:01:24.180 --> 00:01:26.820
or other notification apps.

00:01:26.820 --> 00:01:29.790
The Hangouts Chat bot framework
supports asynchronous messages

00:01:29.790 --> 00:01:32.370
just for these
types of use cases.

00:01:32.370 --> 00:01:34.470
Asynchronous messages
can also be sent

00:01:34.470 --> 00:01:36.660
to specific threads of context.

00:01:36.660 --> 00:01:38.550
Well, more on this later.

00:01:38.550 --> 00:01:40.830
If you take a closer
look at the diagram,

00:01:40.830 --> 00:01:43.350
recognize that a bot
or some monitoring app

00:01:43.350 --> 00:01:45.450
is trying to send a
message to a space.

00:01:45.450 --> 00:01:48.630
So it needs to initiate a
connection to Hangouts Chat,

00:01:48.630 --> 00:01:51.570
meaning some level of
authorization is needed.

00:01:51.570 --> 00:01:53.760
Well, Hangouts Chat will
then send the notification

00:01:53.760 --> 00:01:55.810
to the requested space.

00:01:55.810 --> 00:01:57.960
There are two ways to
connect to Hangouts Chat.

00:01:57.960 --> 00:02:00.890
The first is for bots, and
those are service accounts.

00:02:00.890 --> 00:02:03.600
A service account is a special
type of Google account that is

00:02:03.600 --> 00:02:05.820
tied to your app--
in this case, a bot--

00:02:05.820 --> 00:02:07.140
instead of a user.

00:02:07.140 --> 00:02:09.419
The bot assumes the identity
of the service account

00:02:09.419 --> 00:02:11.940
to call the Hangouts Chat API.

00:02:11.940 --> 00:02:14.010
The second way is
for non-bot apps,

00:02:14.010 --> 00:02:16.260
and that is to use
incoming webhooks.

00:02:16.260 --> 00:02:19.470
This entails calling a specific
URL, with built-in credentials,

00:02:19.470 --> 00:02:21.210
to communicate to a space.

00:02:21.210 --> 00:02:23.790
Let's tackle these
one at a time.

00:02:23.790 --> 00:02:26.100
Here is a short Python
script representing

00:02:26.100 --> 00:02:28.680
part of your overall
bot application.

00:02:28.680 --> 00:02:31.500
Beyond the imports, this script
starts with the OAuth scope

00:02:31.500 --> 00:02:32.610
for Hangouts Chat.

00:02:32.610 --> 00:02:34.230
This is the only
permission needed

00:02:34.230 --> 00:02:36.570
to send a message into a space.

00:02:36.570 --> 00:02:39.140
Merge that scope, along with
the service account client

00:02:39.140 --> 00:02:42.450
ID of the API project, to
generate the credentials needed

00:02:42.450 --> 00:02:44.590
to create an API endpoint.

00:02:44.590 --> 00:02:47.790
You can then use that endpoint
to send messages to a space.

00:02:47.790 --> 00:02:50.700
Now keep in mind that this
is just part of your bot.

00:02:50.700 --> 00:02:53.650
The code you don't see here
is your custom workflow,

00:02:53.650 --> 00:02:55.740
like pulling information
from a database,

00:02:55.740 --> 00:02:57.720
calling external
APIs, or whatever

00:02:57.720 --> 00:02:59.550
processing you want
to do before you send

00:02:59.550 --> 00:03:01.500
that message into the space.

00:03:01.500 --> 00:03:03.330
Anytime you see
permission scopes in code,

00:03:03.330 --> 00:03:06.024
it's a pretty strong indication
you're calling an API.

00:03:06.024 --> 00:03:08.190
What makes Hangouts Chat
different from other Google

00:03:08.190 --> 00:03:11.040
APIs is that bots must have
a service account to call

00:03:11.040 --> 00:03:13.470
the API, because it's
code that is never

00:03:13.470 --> 00:03:15.930
executed on behalf of a user.

00:03:15.930 --> 00:03:17.520
The Python script
we just saw was

00:03:17.520 --> 00:03:20.250
an example of creating
messages in a space.

00:03:20.250 --> 00:03:23.340
Now, more generally, the API
can do all CRUD operations

00:03:23.340 --> 00:03:26.350
on messages, as you see
from the API docs here.

00:03:26.350 --> 00:03:29.070
However, the API also
has additional features

00:03:29.070 --> 00:03:32.130
to give bots more context,
such as getting info

00:03:32.130 --> 00:03:35.250
on spaces or members in spaces.

00:03:35.250 --> 00:03:38.490
All right, well, that's the
first asynchronous technique.

00:03:38.490 --> 00:03:40.440
Now along with the
API, Hangouts Chat

00:03:40.440 --> 00:03:43.440
also supports incoming
webhooks as a convenient way

00:03:43.440 --> 00:03:45.660
of sending asynchronous
messages into spaces

00:03:45.660 --> 00:03:47.376
that are not from a bot.

00:03:47.376 --> 00:03:48.750
They're great for
one-off alerts,

00:03:48.750 --> 00:03:50.720
like the ones I
mentioned earlier--

00:03:50.720 --> 00:03:53.400
the server going down or a
new customer in the house.

00:03:53.400 --> 00:03:56.400
All right, but it doesn't always
have to be something urgent.

00:03:56.400 --> 00:03:58.860
For example, it could be
used for standard or timed

00:03:58.860 --> 00:04:00.270
notifications.

00:04:00.270 --> 00:04:02.250
In other words,
incoming webhooks

00:04:02.250 --> 00:04:04.380
are a quick and easy
way to integrate

00:04:04.380 --> 00:04:07.180
any of your custom workflows.

00:04:07.180 --> 00:04:08.820
Now, the way you use
incoming webhooks

00:04:08.820 --> 00:04:11.590
is to go to the space for
which you want the webhook,

00:04:11.590 --> 00:04:13.650
pull down the selector
bar at the top,

00:04:13.650 --> 00:04:15.750
then choose Configure Webhooks.

00:04:15.750 --> 00:04:18.450
You'll see the configuration
dialog pop up, like this one,

00:04:18.450 --> 00:04:20.130
featuring one webhook.

00:04:20.130 --> 00:04:23.340
Now you can have more than
one, because this room may

00:04:23.340 --> 00:04:26.620
get notified from
different sources, right?

00:04:26.620 --> 00:04:30.450
So you click Add Webhook to add
a new one, provide a webhook

00:04:30.450 --> 00:04:32.550
name, and an optional avatar--

00:04:32.550 --> 00:04:34.800
otherwise, you get the
generic webhook icon--

00:04:34.800 --> 00:04:37.670
then click Save.

00:04:37.670 --> 00:04:40.410
Then you click on the Copy
icon to copy that hook

00:04:40.410 --> 00:04:43.710
into your clipboard and then use
that link in your notification

00:04:43.710 --> 00:04:44.530
app.

00:04:44.530 --> 00:04:46.410
Now these URLs are
fairly long, since they

00:04:46.410 --> 00:04:48.060
have built-in authorization.

00:04:48.060 --> 00:04:50.430
Keep them safe,
because like API keys,

00:04:50.430 --> 00:04:52.500
anyone can use them to
post into that space

00:04:52.500 --> 00:04:55.050
if they're somehow exposed.

00:04:55.050 --> 00:04:57.840
Incoming webhook messages can
come from a variety of sources,

00:04:57.840 --> 00:05:00.420
like this Python script, which
can do anything from network

00:05:00.420 --> 00:05:02.940
monitoring to CRM triggers.

00:05:02.940 --> 00:05:05.126
An incoming webhook doesn't
even have to be code.

00:05:05.126 --> 00:05:06.750
You can even send an
alert into a space

00:05:06.750 --> 00:05:09.880
with just a cURL command,
like what you see here.

00:05:09.880 --> 00:05:11.880
Now here's a snippet
of an incoming webhook

00:05:11.880 --> 00:05:14.880
I wrote for my team using
AppScript and a timed

00:05:14.880 --> 00:05:17.190
trigger, which is similar
to a UNIX cron job.

00:05:17.190 --> 00:05:20.392
This reminds them to send
out their weekly TPS reports,

00:05:20.392 --> 00:05:21.850
as well as submit
their timesheets,

00:05:21.850 --> 00:05:23.370
so they can get paid.

00:05:23.370 --> 00:05:25.710
Now one caveat is
that async messages

00:05:25.710 --> 00:05:28.980
can be numerous and disruptive
when every new message spawns

00:05:28.980 --> 00:05:30.080
a new thread.

00:05:30.080 --> 00:05:32.010
Well, Hangouts Chat has
an innovative feature

00:05:32.010 --> 00:05:34.170
using what are known
as thread keys, which

00:05:34.170 --> 00:05:36.960
direct all async messages
to the same threads,

00:05:36.960 --> 00:05:38.850
grouping related
notifications together,

00:05:38.850 --> 00:05:41.310
like what you see here,
and reducing the clutter.

00:05:41.310 --> 00:05:44.520
Thread keys are supported
by both the API and incoming

00:05:44.520 --> 00:05:45.330
webhooks.

00:05:45.330 --> 00:05:48.120
And here's an example of its
use from our cURL example.

00:05:48.120 --> 00:05:50.970
All subsequent async messages
sent to the same thread key

00:05:50.970 --> 00:05:53.040
go to the same conversation.

00:05:53.040 --> 00:05:56.190
See the thread keys guide in
the docs for more information.

00:05:56.190 --> 00:05:57.770
Are you ready for
your next steps?

00:05:57.770 --> 00:05:59.561
Well, check out the
first link to read more

00:05:59.561 --> 00:06:01.270
about using the REST API.

00:06:01.270 --> 00:06:03.570
The next resource is all
about incoming webhooks.

00:06:03.570 --> 00:06:06.300
And finally, we've got the
Python incoming web Quickstart

00:06:06.300 --> 00:06:08.294
sample ready for you to try out.

00:06:08.294 --> 00:06:10.460
Now what should you do with
your newfound knowledge?

00:06:10.460 --> 00:06:12.630
Well, you've probably
already written a bot,

00:06:12.630 --> 00:06:15.720
so add the use of the API,
so your bot can send messages

00:06:15.720 --> 00:06:18.270
asynchronously into a space,
for any of the reasons

00:06:18.270 --> 00:06:21.600
we mentioned earlier, like
completion of a background job.

00:06:21.600 --> 00:06:23.880
For incoming webhooks,
start the Quickstart,

00:06:23.880 --> 00:06:25.650
and then build
something on top of that

00:06:25.650 --> 00:06:27.600
to send alerts or
other notifications

00:06:27.600 --> 00:06:30.660
into a relevant space, such
as the weekly reminder shown

00:06:30.660 --> 00:06:31.800
earlier.

00:06:31.800 --> 00:06:33.640
Well, with this new
tool under your belt,

00:06:33.640 --> 00:06:35.098
you're now ready
to build bots that

00:06:35.098 --> 00:06:38.190
can send both synchronous
and asynchronous messages.

00:06:38.190 --> 00:06:40.230
Not all bots can
respond synchronously,

00:06:40.230 --> 00:06:42.060
and there will be
situations where async

00:06:42.060 --> 00:06:44.194
is the right tool for the job.

00:06:44.194 --> 00:06:46.110
All right, be sure to
subscribe to our channel

00:06:46.110 --> 00:06:48.150
and tune into
another episode soon.

00:06:48.150 --> 00:06:50.640
This is Wesley Chun from Google,
and we'll see you upstairs

00:06:50.640 --> 00:06:51.840
in the G Suite.

00:06:51.840 --> 00:07:02.390
[MUSIC PLAYING]

