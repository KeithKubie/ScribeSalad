WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.009
&gt;&gt; RAMSDALE: Hello. Hi, everybody. I want
to thank you for coming out. This is the GWT

00:00:05.009 --> 00:00:08.760
Fireside Chat and what I want to do is take
an hour, and I think you've been through some

00:00:08.760 --> 00:00:11.670
of these. We're going to do a little bit of
talking about ourselves but really open this

00:00:11.670 --> 00:00:16.180
us up to Q&amp;A. This is your opportunity as
developers to ask our developers, us, what

00:00:16.180 --> 00:00:19.620
we've been up to, where we're going, and maybe
some of the ins and the outs of the features

00:00:19.620 --> 00:00:23.910
that we've been introducing with 2.0 and,
as of yesterday, our release of our alpha

00:00:23.910 --> 00:00:28.850
version 2.1. So let me take a second to introduce
the panel up here. My name is Chris Ramsdale.

00:00:28.850 --> 00:00:37.320
This is Kathrin Probst. This is Amit Manjhi,
Bob Vawter, Jaime Yap, and Eric Ayers. And

00:00:37.320 --> 00:00:41.920
we all work on GWT in different aspects. And
most of us are in the Atlanta office; some

00:00:41.920 --> 00:00:46.769
of us are in the actual San Francisco office.
And if we're lucky, we might have a few others

00:00:46.769 --> 00:00:55.780
come in as Joel and Ray were wrapping up the
GWT UI Overhaul talk in one of the other rooms.

00:00:55.780 --> 00:00:59.569
So with that said, what we want to do is maybe
give a little bit of the overview on what

00:00:59.569 --> 00:01:04.620
we've been working on since our 2.0 released
back in December leading up to I/O and 2.1

00:01:04.620 --> 00:01:10.180
release we have. So to put you guys on the
spot, ha-ha, enjoy this, maybe we'll kind

00:01:10.180 --> 00:01:14.130
of work our way down and I thought we could
talk with about--since we have Kathrin and

00:01:14.130 --> 00:01:18.740
Amit sitting right here, maybe give us an
idea of where we've been with the AJAX crawl

00:01:18.740 --> 00:01:24.000
and how we're trying to make GWT and other
applications crawlable by search engines,

00:01:24.000 --> 00:01:27.920
not just Google but eventually Microsoft and
Yahoo as well. So Kathrin?

00:01:27.920 --> 00:01:33.770
&gt;&gt; PROBST: Right, so as all of you who are
probably good developers know AJAX crawlability

00:01:33.770 --> 00:01:38.429
has been traditionally a big problem in that
crawlers don't normally see the content that's

00:01:38.429 --> 00:01:44.170
dynamically produced on the website on your
page. So we have put together a convention

00:01:44.170 --> 00:01:49.770
between participating websites and the crawler.
This is now implemented in live in the Google

00:01:49.770 --> 00:01:54.560
crawler, not yet in other crawlers, but it
is live in the Google crawler. And what it

00:01:54.560 --> 00:02:00.119
essentially is is a mapping between your normal
URLs that you would have including with your

00:02:00.119 --> 00:02:07.369
hash fragments and a different type of URL
that has the token-escape-fragment in it.

00:02:07.369 --> 00:02:13.220
What happens is that, essentially, the crawler
will query from you, from your site, URLs

00:02:13.220 --> 00:02:17.500
that have this escape fragment token in it
and it is the web server's responsibility

00:02:17.500 --> 00:02:23.830
to essentially return an HTML snapshot that
represents the content that the site wants

00:02:23.830 --> 00:02:29.180
in the crawler index so that it is searchable
and served up by in the Google search results.

00:02:29.180 --> 00:02:34.970
Now, the URLs that show up in the Google search
results are actually your normal URLs that

00:02:34.970 --> 00:02:40.410
you use with C on the page. There is--the
spec is out there. It's under code.google.com/web/ajaxcrawling.

00:02:40.410 --> 00:02:50.930
For GWT, in particular, what we recommend
in order to get the HTML snapshot is a headless

00:02:50.930 --> 00:02:54.540
browser. There is various tools out there,
the one that we've been working on the most;

00:02:54.540 --> 00:03:03.620
in particular, Amit and me, it's HtmlUnit.
It's a free tool that you can download. We

00:03:03.620 --> 00:03:08.840
have put some improvements in it. And especially
Amit has worked very hard on getting this

00:03:08.840 --> 00:03:13.590
pushed out to HtmlUnit and also on getting
it to work on App Engine. So, maybe you want

00:03:13.590 --> 00:03:15.910
to talk.
&gt;&gt; MANJHI: All right. So one of the things

00:03:15.910 --> 00:03:24.280
we are doing with HtmlUnit is patching HtmlUnit
so that it can work on App Engine. In particular,

00:03:24.280 --> 00:03:31.090
App Engine has limitations that you can have
only a single thread. It also has some limitations

00:03:31.090 --> 00:03:40.620
on some Java classes that you can use. So,
the patch is uploaded on a public, like the

00:03:40.620 --> 00:03:46.260
HtmlUnit issue tracker, it is still not in
HtmlUnit but hopefully within the next few

00:03:46.260 --> 00:03:57.310
weeks HtmlUnit 2.8 will have this patch included.
But if you want to try it out and have your

00:03:57.310 --> 00:04:07.400
ServLix give out a version that is crawlable.
You can use HtmlUnit on your website and include

00:04:07.400 --> 00:04:09.750
the patch.
&gt;&gt; PROBST: And people have done that also

00:04:09.750 --> 00:04:12.760
with the patch already.
&gt;&gt; MANJHI: Yes, people have already done that

00:04:12.760 --> 00:04:18.280
successfully with their patch. And we also
have a demo website that is included in the

00:04:18.280 --> 00:04:26.670
issue tracker where you can give it to AJAX;
URL to AJAX page and it will show you--it

00:04:26.670 --> 00:04:31.770
will run an HtmlUnit and it will show you
the DOM of the page. So it will essentially

00:04:31.770 --> 00:04:35.720
run the JavaScript and then show you the DOM.
&gt;&gt; RAMSDALE: Yeah, and we'll make sure that

00:04:35.720 --> 00:04:40.650
the--of the sites that they're referencing,
as well as the projects, we can easily toss

00:04:40.650 --> 00:04:44.590
into the live wave, be it the one you're viewing
over here, the one that John is actually taking

00:04:44.590 --> 00:04:50.530
notes on, which by the way, if anybody has
or is viewing, we strongly suggest that comments

00:04:50.530 --> 00:04:54.420
that you have going on and side conversations,
right now, please put those on wave. They've

00:04:54.420 --> 00:04:59.730
been very valuable especially if you saw,
there is quite a lengthy conversation with

00:04:59.730 --> 00:05:04.240
Kelly's Measure in Milliseconds yesterday,
riding through some really media information

00:05:04.240 --> 00:05:08.510
that went back and forth both from developers
like yourself and developers that are working

00:05:08.510 --> 00:05:12.320
on the Speed Tracer product which we have
two of them down here. We'll talk about that

00:05:12.320 --> 00:05:15.340
in a second. So I encourage you to check out
wave; it's great. And John will help guide

00:05:15.340 --> 00:05:20.781
you through it. Since we got Bob up here,
I was going to suggest maybe if you wanted

00:05:20.781 --> 00:05:26.560
to give a kind of recap of where we are with
GWT RPC, deRPC. But feel free to chime in

00:05:26.560 --> 00:05:30.870
on anything else that you've been focused
on in the past few months.

00:05:30.870 --> 00:05:39.021
&gt;&gt; VAWTER: Yeah. So we did launch--we did
put the deRPC code base out there which is

00:05:39.021 --> 00:05:44.930
kind of--you know, if we were going to re-implement
the GWT RPC stack, for those of you not familiar

00:05:44.930 --> 00:05:51.500
with it, GWT RPC provides you with an RPC
system that is designed to transport, you

00:05:51.500 --> 00:05:56.460
know, Java objects and all their polymorphic
goodness across the wire. It's a very easy

00:05:56.460 --> 00:06:01.169
way to get started with an RPC system. You
don't really have to sit down and think about,

00:06:01.169 --> 00:06:05.780
okay, I need to build a protocol and, you
know, how am I going to do, you know, encapsulation

00:06:05.780 --> 00:06:10.330
on the, encapsulation escaping, framing, all
that kind of stuff that, you know, goes on

00:06:10.330 --> 00:06:14.730
into the level stuff. Basically, just think
about what is the service that I want my server

00:06:14.730 --> 00:06:19.460
to be able to provide to my client? And you
just set that up in terms of the asynchronous

00:06:19.460 --> 00:06:26.960
interface using your, you know, DTL objects,
you know, vanilla beans kind of stuff. And

00:06:26.960 --> 00:06:33.610
we have shipped sort of a preview release
of that in GWT 2.0, the deRPC system which

00:06:33.610 --> 00:06:38.840
provides a number of performance and improvements
with that. There have been a lot of other

00:06:38.840 --> 00:06:44.800
discussions around formalizing license support
for Google's Protocol Buffers in GWT which

00:06:44.800 --> 00:06:50.840
do require sort of a lower-level thought process
about message structure and stuff like that,

00:06:50.840 --> 00:06:54.530
but could provide even more performance gains
if you're willing to do a little bit more

00:06:54.530 --> 00:07:03.449
work on the front end. We've made a number
of, you know, compiler and hosting load improvements

00:07:03.449 --> 00:07:09.530
be--after the 2.0 timeframe. Soft permutations
are coming down the wire which, if you're

00:07:09.530 --> 00:07:14.370
familiar with GWT's deferred binding system
sort of having, you know, the entire Cartesian

00:07:14.370 --> 00:07:19.400
product to value your permutation values produced;
you can take certain axis or values and collapse

00:07:19.400 --> 00:07:25.460
them. So if you want to add, you know, so,
right now, you can target Safari. And that

00:07:25.460 --> 00:07:31.449
includes, you know, like your mobile browsers,
the mobile iPhone, the Android browser. But

00:07:31.449 --> 00:07:35.370
you could add additional user agent values
and collapse them so they result in the same

00:07:35.370 --> 00:07:41.919
permutation objects. Those little tiny variations
don't result in all the cost of another hard

00:07:41.919 --> 00:07:49.571
permutation. And hosted mode performance continuous
to be a huge, huge focus area. And I think

00:07:49.571 --> 00:07:54.250
Scott and Keith are, you know, chained to
their desk in Atlanta right now; they've been

00:07:54.250 --> 00:07:58.081
forced to make it faster.
&gt;&gt; RAMSDALE: Yeah and to give you a quick

00:07:58.081 --> 00:08:01.010
idea, I think these are some rough figures
and I don't know if you were in the conversation.

00:08:01.010 --> 00:08:05.590
But we were talking to Adam from the wave
team and much like Edwards; they're at a very

00:08:05.590 --> 00:08:09.410
high number of permutations right now. I actually
think, for some reason, they jumped from 256

00:08:09.410 --> 00:08:15.540
to 512. But, that aside, he has said with
his initial research into it that they could

00:08:15.540 --> 00:08:19.979
effectively cut out at least half the permutations
which is--and really, what you're doing, I

00:08:19.979 --> 00:08:24.830
think, and Bob can correct me but you're--aren't
you collapsing down all of the permutations

00:08:24.830 --> 00:08:29.040
that really shares in the same characteristics?
&gt;&gt; VAWTER: Yeah, that's right. What we're

00:08:29.040 --> 00:08:33.651
giving you is not something that you should
think about when you first come out to write

00:08:33.651 --> 00:08:38.589
your application. This is one of those things
that is used as an optimization after you've

00:08:38.589 --> 00:08:43.449
built your app the way you want to build it
in the first place. We're giving these final-grain

00:08:43.449 --> 00:08:48.630
controls. And, you know, when you add a new
deferred binding property and a new value

00:08:48.630 --> 00:08:55.709
to that, basically, you are just expanding
the size of the Cartesian product of all of

00:08:55.709 --> 00:09:02.480
the deferred binding property values. So if
you add one more property that's like a Boolean's

00:09:02.480 --> 00:09:09.730
true/false, you're going to double the number
of cache.js or cache@html files that you double.

00:09:09.730 --> 00:09:16.410
And with the work with conditional deferred
binding properties and soft property values,

00:09:16.410 --> 00:09:21.779
what that gives you is the ability to use
deferred binding as much as you want without

00:09:21.779 --> 00:09:28.779
suffering additional compiled time and deployment
cost in terms of more files. So you can add,

00:09:28.779 --> 00:09:33.579
you can use deferred binding for small little
switches in your App or you might use a--where

00:09:33.579 --> 00:09:38.519
if statements are kind of ugly just because
you haven't sprinkled all throughout the code.

00:09:38.519 --> 00:09:44.310
&gt;&gt; RAMSDALE: Like I said Jaime and Eric who
are part of the Speed Tracer team and--by

00:09:44.310 --> 00:09:47.889
the show of hands, how many people know what
Speed Tracer is?

00:09:47.889 --> 00:09:50.320
&gt;&gt; YAP: Awesome.
&gt;&gt; RAMSDALE: Fantastic, so we don't have to

00:09:50.320 --> 00:09:53.769
cover that. Get in to the good stuff.
&gt;&gt; YAP: So, yeah, so hopefully, you guys saw

00:09:53.769 --> 00:09:59.240
the "Measure in Milliseconds Redux" talk yesterday.
Show of hands, who saw that talk? All right.

00:09:59.240 --> 00:10:03.790
Those who didn't see should watch it on YouTube;
it's very good. So when we first launched

00:10:03.790 --> 00:10:11.860
Speed Tracer, we kind of gave new insight
into what was happening on the client. We

00:10:11.860 --> 00:10:16.480
also included a network view which is very
similar to other network waterfall views that

00:10:16.480 --> 00:10:23.470
you see in tools like Firebug. And obviously
web application performance is heavily influenced

00:10:23.470 --> 00:10:30.009
by the things happening on the server. So
the problem with traditional network waterfall

00:10:30.009 --> 00:10:35.769
views is that they give you time ranges and
you can see payloads and you can see headers,

00:10:35.769 --> 00:10:39.800
but the timings are essentially, you know,
a black box; you don't know what happened

00:10:39.800 --> 00:10:46.029
on the server. So usually, you have to use
some server-side tooling to dig in deeper.

00:10:46.029 --> 00:10:52.209
And it gets kind of hard to correlate a specific
RPC with a specific action on the server.

00:10:52.209 --> 00:10:58.279
So, we thought it'd be a great idea if in
Speed Tracer, we could kind of get an end-to-end

00:10:58.279 --> 00:11:04.119
performance picture. So if you saw in the
keynote in Kelly's talk we demoed server side

00:11:04.119 --> 00:11:11.130
traces on App Engine and Spring Insight. So
that's new with Speed Tracer so...

00:11:11.130 --> 00:11:16.290
&gt;&gt; RAMSDALE: And Spring Insight, for anybody
that didn't catch it in the keynote is they

00:11:16.290 --> 00:11:23.699
have--Spring Insight is more like a container
that runs with your App. And so the Spring

00:11:23.699 --> 00:11:29.339
Source community, VMware/SpringSource, they
have a version; it's called tc Server. It's

00:11:29.339 --> 00:11:33.449
really just their version of Tomcat that's
running with instrumentation in it. And so

00:11:33.449 --> 00:11:36.510
what they're doing is it's very analogous
to what App stats is doing for App Engine

00:11:36.510 --> 00:11:40.100
now where they're collecting this data that
Jaime is talking about. And what we're doing

00:11:40.100 --> 00:11:43.809
is, again, just feeding off that JSON payload
that they spit out. And it's kind of nice

00:11:43.809 --> 00:11:48.440
because I believe that there is some parallels
between the two systems. While they are offering

00:11:48.440 --> 00:11:53.009
up different data, we get more on App Engine
than we do on tc Server right now or via Insight.

00:11:53.009 --> 00:11:57.920
&gt;&gt; YAP: So, one of the nice properties for
things happening on the single thread, I guess,

00:11:57.920 --> 00:12:05.490
is that you can kind of model the things that
you want to instrument in this nice little

00:12:05.490 --> 00:12:11.421
JSON tree structure. So it's the same, very
similar JSON structure to what we used to

00:12:11.421 --> 00:12:17.259
represent things happening on the UI thread
in our sluggishness graph. So it kind of--there's

00:12:17.259 --> 00:12:21.119
no extra burden. You don't have to learn how
to visualize--how to understand a new visualization.

00:12:21.119 --> 00:12:27.829
It's the same visualization because it's the
same kind of data. So--but they, yes, they

00:12:27.829 --> 00:12:29.929
instrument different things on App Engine
versus Spring Insight.

00:12:29.929 --> 00:12:31.449
&gt;&gt; RAMSDALE: But, right, they don't have a
memcache for example.

00:12:31.449 --> 00:12:35.619
&gt;&gt; YAP: Yeah.
&gt;&gt; RAMSDALE: So, Eric, do you want to talk

00:12:35.619 --> 00:12:39.100
about some of the kind of headless Speed Tracer
work that you've been doing and where do you

00:12:39.100 --> 00:12:43.679
think that's going?
&gt;&gt; AYERS: Sure, Chris. So the Speed Tracer

00:12:43.679 --> 00:12:49.509
is really eye-catching because it has all
this nice user interface and graphs and the

00:12:49.509 --> 00:12:55.440
ability to share your Speed Tracers with everyone.
And I've been working on a part of Speed Tracer

00:12:55.440 --> 00:13:02.230
that takes all that away. Instead of a nice
user interface, it has no user interface at

00:13:02.230 --> 00:13:08.519
all. And what it's useful for is to take that
data that come out of Speed Tracer and then

00:13:08.519 --> 00:13:16.899
extend it on to a third-party application.
And our sort of target for this has been for

00:13:16.899 --> 00:13:23.679
keeping track of latency so you can watch
over time and see whether you have any latency

00:13:23.679 --> 00:13:30.940
regressions. Another thing that I've worked
on in the past is the Hintlet Engine, we call

00:13:30.940 --> 00:13:35.350
it, that's built in to Speed Tracer which
we have codes that you can extend and run

00:13:35.350 --> 00:13:42.100
analysis within Speed Tracer. But this headless
extension, you know, it gathers up the data

00:13:42.100 --> 00:13:48.980
during the browsing session or during a unit
test and sends it off. And then you could

00:13:48.980 --> 00:13:55.850
use that same data to write your own analysis,
maybe analysis over many traces or using some

00:13:55.850 --> 00:14:02.189
more complex tools that you might want to
use within, say, a JavaScript environment

00:14:02.189 --> 00:14:09.980
like inside the browser. Another thing I've
been working on besides Speed Tracer is Google

00:14:09.980 --> 00:14:15.489
API library for GWT. And I've been working
on this for several years and has Bob. Bob

00:14:15.489 --> 00:14:23.449
wrote the gadget and search bindings. And
I've been maintaining them and we just, in

00:14:23.449 --> 00:14:30.489
time for GWT 2.1, have released the GWT 2.0
integration of the Google API libraries; that

00:14:30.489 --> 00:14:39.149
was just last week. And these libraries include
things like the chart tools, maps, translations,

00:14:39.149 --> 00:14:45.269
and so on. It just provides an easy-to-use
wrapper on top of the JavaScript APIs that

00:14:45.269 --> 00:14:52.649
are already out there for JavaScript authors.
And we'll be releasing the maps, a part of

00:14:52.649 --> 00:15:00.869
that very soon in the next week or so. And
then, I've been working with an intern who's

00:15:00.869 --> 00:15:05.859
going to be focusing on updating gadgets and
integrating OpenSocial.

00:15:05.859 --> 00:15:12.899
&gt;&gt; RAMSDALE: Great. So that's kind of a snapshot
of what we've been up to right now. And I

00:15:12.899 --> 00:15:18.850
see that we have a dory page up but it looks
a little bit odd to tell you the truth. Can

00:15:18.850 --> 00:15:22.350
everybody see the wave that's going on right
now? So I think what we'll do is instead,

00:15:22.350 --> 00:15:29.180
unless somebody can explain why we're getting
questions about Sony Ericsson, Ken, we'll

00:15:29.180 --> 00:15:34.040
let you hope up and just ask questions and
we'll field them. Mind you, we're actually

00:15:34.040 --> 00:15:42.100
missing our two UI guys that were in a talk,
so Ray and Joel; but if we get some UI questions,

00:15:42.100 --> 00:15:46.320
we can always pull in John, right, and talk.
So, yeah, feel free to open up the questions

00:15:46.320 --> 00:15:52.459
and we'll take them.
&gt;&gt; Okay. Are we ready?

00:15:52.459 --> 00:15:57.559
&gt;&gt; YAP: Yes.
&gt;&gt; RAMSDALE: Okay, go ahead.

00:15:57.559 --> 00:16:06.499
&gt;&gt; MIKE: Hi, I'm Mike. So I recently--I wanted
to use a Dojo library. And so for every object

00:16:06.499 --> 00:16:14.439
in Dojo that I want use, I've been sub-classing
JavaScript object which works out really great.

00:16:14.439 --> 00:16:19.019
It's a very nice thin layer and it kind of
does all the things that it seems to have

00:16:19.019 --> 00:16:25.439
been envisioned to do. One complication though,
the resulting classes, the sub-classes of

00:16:25.439 --> 00:16:31.850
JavaScript object don't provide a very good
API for the rest of your code since instance

00:16:31.850 --> 00:16:37.089
methods have to be final and you can have
constructors and things like that. So, my

00:16:37.089 --> 00:16:43.170
sort of very generalized approach to dealing
with that has been to create--you know, so

00:16:43.170 --> 00:16:49.420
I have this sort of tree of JavaScript object
sub-classes and I then have another tree of

00:16:49.420 --> 00:16:55.029
JavaScript object delegate classes. Each of
those has a JavaScript object, sub-classes,

00:16:55.029 --> 00:17:01.389
and member and then it provides a much better
API for, you know, the code that it tends

00:17:01.389 --> 00:17:06.649
to work with this objects. So it has been
nice. But as you can probably imagine that

00:17:06.649 --> 00:17:13.789
there's some intermediate objects contractions
that happens as a result of that. And in fact,

00:17:13.789 --> 00:17:18.439
it actually--once you get into the nitty-gritty,
you start to notice that, sometimes, a simple

00:17:18.439 --> 00:17:25.309
method cost, simple gather on an object involves
an object contraction as a result of that.

00:17:25.309 --> 00:17:29.149
The only little bit of information I've been
able to find on the Internet about this is,

00:17:29.149 --> 00:17:36.250
I guess, there is an annotation called SingleJsoImpl.
They don't know much about how that really

00:17:36.250 --> 00:17:40.929
helps with the issue that I just described.
So any--take it away.

00:17:40.929 --> 00:17:45.820
&gt;&gt; VAWTER: The--so there's actually not an
annotation anymore. The original--in the original

00:17:45.820 --> 00:17:51.070
design doc, we were going to have this--have
annotations. So--but the name SingleJsoImpl

00:17:51.070 --> 00:17:56.529
is a terrible name but it's the one that stuck
to describe this concept. The idea behind

00:17:56.529 --> 00:18:05.399
this is that JavaScript objects can implement
interfaces that declare methods. The caveat

00:18:05.399 --> 00:18:12.620
is that you cannot do polymorphic method dispatch
on a JavaScript object sub-class because there's

00:18:12.620 --> 00:18:17.309
no Java type information associated with that
underlying JSO. We assumed that it's coming

00:18:17.309 --> 00:18:21.909
from some external library and we can't just
like jam a type ID field on there because

00:18:21.909 --> 00:18:27.080
that might break the integration gates. So
if you want a JavaScript object to be able

00:18:27.080 --> 00:18:36.059
to implement and interface with a method,
any of these methods defined in and interfaced

00:18:36.059 --> 00:18:42.110
must be implemented by, at most, one Java
method that is declared within a JavaScript

00:18:42.110 --> 00:18:47.260
object. So you got that one-to-one mapping
at runtime when you compile.

00:18:47.260 --> 00:18:50.711
&gt;&gt; So that doesn't--so it sounds like that's
not actually the solution to the problem.

00:18:50.711 --> 00:18:59.799
&gt;&gt; VAWTER: Well, it can be because--so the
wave guys had an issue which is why we built

00:18:59.799 --> 00:19:04.889
single-JSO-implement in the first place, that
all of their wire protocol is basically very

00:19:04.889 --> 00:19:10.300
lightweight protobuffer style and they don't
want their--they don't want all the other

00:19:10.300 --> 00:19:15.180
classes in their system to have to, you know,
take a sub-type of JSO. They want it to pass

00:19:15.180 --> 00:19:23.929
an interface because it also helps with testing.
So if you want to provide a Java-like API,

00:19:23.929 --> 00:19:29.230
there's really nothing you can do beyond having
this Java facade objects for things like,

00:19:29.230 --> 00:19:35.870
you know, instanceof and, you know, type-specific
two-string methods. You know, if you are providing

00:19:35.870 --> 00:19:42.760
your users with a use case where you need
Java polymorphic type behavior, you're stuck

00:19:42.760 --> 00:19:48.299
with that. Otherwise, we'd have to go and,
you know, jam fields and what-not onto your

00:19:48.299 --> 00:19:54.019
underlying JSOs and then possibly break them.
&gt;&gt; I see. One more quick question about the

00:19:54.019 --> 00:20:00.049
sub-class in JavaScript object and particularly
using JavaScript objects in the wild, I still

00:20:00.049 --> 00:20:05.639
need to get around the resource button line
a little bit. So like the Dojo library itself,

00:20:05.639 --> 00:20:08.270
could that be a resource which is bundled?
&gt;&gt; VAWTER: Yes.

00:20:08.270 --> 00:20:11.700
&gt;&gt; Okay.
&gt;&gt; VAWTER: The client bundle system is arbitrarily

00:20:11.700 --> 00:20:12.700
extensible.
&gt;&gt; Yes.

00:20:12.700 --> 00:20:17.889
&gt;&gt; VAWTER: All of the built-in types use the
extension API. So if you want to create a

00:20:17.889 --> 00:20:22.780
new resource type, call it, you know, JavaScript
resource or whatever, it's basically, you

00:20:22.780 --> 00:20:28.419
declare an interface which is a sub-type of
resource prototype. It has an annotation at

00:20:28.419 --> 00:20:36.090
resource generator that then points to and
implement a runtime--a compile-time called

00:20:36.090 --> 00:20:41.180
back class that basically just says, okay,
you know, implement, you know, give me the

00:20:41.180 --> 00:20:44.220
text that implements this method and then
you do whatever you want to do there.

00:20:44.220 --> 00:20:47.970
&gt;&gt; Okay. Do you think...
&gt;&gt; VAWTER: If you want to write JS resource,

00:20:47.970 --> 00:20:53.210
it's just done. You can also, as a really,
really quick hack, use text resource.

00:20:53.210 --> 00:20:59.240
&gt;&gt; RYAN: And for that matter, you can imitate
text resource, copy and paste it as a starting

00:20:59.240 --> 00:21:03.190
point when you're writing your own resource
type.

00:21:03.190 --> 00:21:09.590
&gt;&gt; Hello. Hey, thanks for having us here and
thanks for supporting GWT and continuing to

00:21:09.590 --> 00:21:15.450
develop it. The question I have for you is
a support question. Looking for an alternative

00:21:15.450 --> 00:21:21.370
to the forums as far as a way to get support
for questions, I'm wondering about if you

00:21:21.370 --> 00:21:25.660
guys have considered like using the Stack
Overflow model like the Android guys have

00:21:25.660 --> 00:21:30.259
used and potentially offering like an office
hours.

00:21:30.259 --> 00:21:38.419
&gt;&gt; RAMSDALE: Yes, so I'll take that. It's
quite funny actually because I've had an email

00:21:38.419 --> 00:21:45.100
that I was going to craft up to GWT contrib
and the main GWT group twice, actually, where

00:21:45.100 --> 00:21:48.399
I was going to say, you know what, let's try
something better and let's actually move over

00:21:48.399 --> 00:21:54.899
to Stack Overflow. And the reason we didn't
do that yet and pulled the trigger is because

00:21:54.899 --> 00:21:58.980
there are some changes that are being made
to Google groups, from a group out in Boulder

00:21:58.980 --> 00:22:03.160
and a few others that look promising both
from a backend and a front-end perspective.

00:22:03.160 --> 00:22:09.080
We're pretty transparent around here so we're
a little skeptical as well, but they're, you

00:22:09.080 --> 00:22:15.240
know, they're really trying hard. So I've
held off on that. That said, there's nothing

00:22:15.240 --> 00:22:18.820
to stop everybody from going ahead and creating
their own group over there. I mean, I've watched

00:22:18.820 --> 00:22:24.400
it for awhile and I've seen that the number
of questions that are tagged with G-W-T or

00:22:24.400 --> 00:22:28.010
GWT have continued to grow. And Android has
had a lot of success; in fact, they have moved

00:22:28.010 --> 00:22:32.279
over more of their mainline developers to
Stack Overflow and they've seen the groups

00:22:32.279 --> 00:22:35.860
traffic go down and the Stack Overflow traffic
go up. Let's be honest, Stack Overflow is,

00:22:35.860 --> 00:22:40.710
is great only because of the UI because I
think the developer community behind Stack

00:22:40.710 --> 00:22:46.020
Overflow is just a little different. There's
different characteristics. So I encourage

00:22:46.020 --> 00:22:49.529
everybody, you know, we're not going to try
to hold you in to using Google groups just

00:22:49.529 --> 00:22:53.590
because we're Google Web Toolkit. Try out
Stack Overflow if you like it. Bring more

00:22:53.590 --> 00:22:59.570
over, you know. And then if we decide to make
a move, a strategic move from a Google position,

00:22:59.570 --> 00:23:03.279
I guess, we'll let everybody know. But we're
not going to stop you from creating your own

00:23:03.279 --> 00:23:05.399
community in Stack Overflow.
&gt;&gt; VAWTER: Yeah, there is also...

00:23:05.399 --> 00:23:09.370
&gt;&gt; Will you folks look at it? I mean do you
folks monitor that group, the GWT group?

00:23:09.370 --> 00:23:11.070
&gt;&gt; RAMSDALE: With Stack Overflow?
&gt;&gt; Yeah.

00:23:11.070 --> 00:23:20.299
&gt;&gt; RAMSDALE: Not actively right now. We watch
the traffic on Google groups to the most extent.

00:23:20.299 --> 00:23:25.429
I mean, we want to grow a community that's
self-sufficient. And when there's actual burning

00:23:25.429 --> 00:23:31.140
fires and problems, we help out. Obviously,
in the time of release via the GWT 2.1 Milestone

00:23:31.140 --> 00:23:35.720
release, when there are some issues, we see
it, we address it, and move on. But we really

00:23:35.720 --> 00:23:43.130
want to have a self-sustaining developer community.
&gt;&gt; VAWTER: Yeah, if you like IRC, irc.reno.net

00:23:43.130 --> 00:23:47.629
channel GWT.
&gt;&gt; RAMSDALE: Say that one more time?

00:23:47.629 --> 00:23:51.679
&gt;&gt; VAWTER: Irc.reno.net channel GWT.
&gt;&gt; RAMSDALE: Okay, there you go.

00:23:51.679 --> 00:23:55.019
&gt;&gt; VAWTER: Mostly external developers but
I and a couple of the other GWT developers

00:23:55.019 --> 00:23:58.549
hang out on there and field questions and
pique ideas around it.

00:23:58.549 --> 00:24:01.600
&gt;&gt; RAMSDALE: Real quickly, and speaking on
the topic of support too, don't forget that

00:24:01.600 --> 00:24:06.679
there are office hours that we're holding
up on the third floor. Jason Parekh and Fred

00:24:06.679 --> 00:24:10.730
Sauer who I believe some of you actually might
know are going to be up there from 12 until

00:24:10.730 --> 00:24:15.850
5:30 taking any questions you have. So, again,
also if we don't get through all these today

00:24:15.850 --> 00:24:22.430
or this afternoon, feel free to jump up there.
&gt;&gt; Okay. So my question is what are your plans

00:24:22.430 --> 00:24:27.200
to keep GWT up-to-date with all the new features
and capabilities that come along with HTML5;

00:24:27.200 --> 00:24:35.010
specifically, canvass, lay out, SVG, and eventually
WebGL, things like that. Will there be a native

00:24:35.010 --> 00:24:39.019
support for some of these things or are we
going to be needing to use the native methods

00:24:39.019 --> 00:24:45.000
for all--for the new features of HTML5?
&gt;&gt; YAP: So, I guess, I can take part of that.

00:24:45.000 --> 00:24:54.279
So Speed Tracer has a bunch of overlay types
to wrap some HTML5 functionality. And I think

00:24:54.279 --> 00:25:02.970
we are definitely planning to make that first-order
priority for GWT. So, yes. That's to answer

00:25:02.970 --> 00:25:06.399
your question that that is definitely on our
road map fairly soon so...

00:25:06.399 --> 00:25:11.260
&gt;&gt; RAMSDALE: Yes, I mean, to think that we
could, to think that we can move on evolving

00:25:11.260 --> 00:25:17.471
GWT without adopting HTML5 would be incorrect.
Stacking it against the things that we want

00:25:17.471 --> 00:25:23.230
to do to help developers out in terms of speed,
size, sexier widgets, whatever it may be,

00:25:23.230 --> 00:25:27.080
you know, that's the only problem. It's not
a huge team so we've got to plan our priorities

00:25:27.080 --> 00:25:31.100
straight but we know that, like Jaime said,
not making HTML5 a first-class citizen would

00:25:31.100 --> 00:25:33.220
probably be a mistake.
&gt;&gt; Okay.

00:25:33.220 --> 00:25:37.049
&gt;&gt; RAMSDALE: Yeah.
&gt;&gt; Another quick question, what are your thoughts

00:25:37.049 --> 00:25:43.610
on combining the power of GWT with the power
of say library like jQuery or Dojo and using

00:25:43.610 --> 00:25:46.900
them in unison with each other rather than
one or the other?

00:25:46.900 --> 00:25:50.280
&gt;&gt; YAP: Have you seen GQuery?
&gt;&gt; I have but it's...

00:25:50.280 --> 00:25:56.100
&gt;&gt; YAP: It's pretty much a rewrite of jQuery
and GWT. Ray Cromwell, who's not here right

00:25:56.100 --> 00:26:00.529
now but, if you see him around the floor,
you can talk to him about it. It's actually

00:26:00.529 --> 00:26:07.279
really cool and he has some demos on the GQuery
code site page that shows you what it can

00:26:07.279 --> 00:26:14.289
do. So, it takes a jQuery-style programming
model and gets all the benefits of the GWT

00:26:14.289 --> 00:26:18.140
compiler to make it really fast. So, yeah,
it exists.

00:26:18.140 --> 00:26:21.769
&gt;&gt; Cool. Thank you.
&gt;&gt; RAMSDALE: By the way, I think that you

00:26:21.769 --> 00:26:30.419
can catch--Joel, and Ray, and Stefan are doing
the HTML5 plus GWT Talk right after this,

00:26:30.419 --> 00:26:31.419
I believe.
&gt;&gt; YAP: Okay.

00:26:31.419 --> 00:26:33.899
&gt;&gt; RAMSDALE: It's shortly thereafter. It's
today where they're going to be doing some

00:26:33.899 --> 00:26:38.650
pretty cool stuff. Not only can you see what
we're experimenting with HTML5 and driving

00:26:38.650 --> 00:26:42.669
it to the--really pushing the envelope; you
can also catch Ray Cromwell after this talk

00:26:42.669 --> 00:26:46.270
if you want to discuss with him GQuery versus
jQuery and...

00:26:46.270 --> 00:26:50.459
&gt;&gt; YAP: Yeah, I think it's called GWT Query
actually. It's GQuery.

00:26:50.459 --> 00:26:53.989
&gt;&gt; PROBST: It's GQuery.
&gt;&gt; YAP: Okay, sorry.

00:26:53.989 --> 00:26:58.740
&gt;&gt; RAMSDALE: Next?
&gt;&gt; Hi, I have a question about the performance.

00:26:58.740 --> 00:27:05.480
We had--we use a GXT and a GWT to build a
real-time device control application like

00:27:05.480 --> 00:27:11.059
every 15 milliseconds, there will be a new
item to deliver to the browser. But what we

00:27:11.059 --> 00:27:15.580
found is it delivers to the browser site to
upgrade the graphics and GWT. What we found

00:27:15.580 --> 00:27:22.490
is that the CPU and the memory usage of the
browser gets really high and it becomes not

00:27:22.490 --> 00:27:28.780
a responsible-- responsive. If we slow down
to like 300 milliseconds to--or half a second

00:27:28.780 --> 00:27:33.220
to do a batch processing, you'll get really,
you know, the performance is really good.

00:27:33.220 --> 00:27:40.529
So is there any tip that you could provide,
you know, on those kind of real-time application

00:27:40.529 --> 00:27:44.509
development?
&gt;&gt; RAMSDALE: I think we had a little issue

00:27:44.509 --> 00:27:49.009
here. So you're using GXT and you're having
performance issues which we know...

00:27:49.009 --> 00:27:55.639
&gt;&gt; Yes. We have to slow down our UI upgrade,
you know, update, you know, ratio. We cannot

00:27:55.639 --> 00:28:03.899
update the UI every like a 15 milliseconds.
We have to slow down to like 200 or 300 milliseconds

00:28:03.899 --> 00:28:08.259
to do a batch processing.
&gt;&gt; YAP: So, okay, I think that Ray--maybe

00:28:08.259 --> 00:28:14.059
you want to take this one. But it seems like
your UI performance issues maybe limited to

00:28:14.059 --> 00:28:18.669
the fact that you're using ExtGWT. But did
you ever...

00:28:18.669 --> 00:28:22.820
&gt;&gt; RAMSDALE: GXT.
&gt;&gt; YAP: GXT. And if you take a look at Ray's

00:28:22.820 --> 00:28:27.569
talk and Joel's talk that they just gave before,
what is it called, Ray?

00:28:27.569 --> 00:28:31.169
&gt;&gt; RAMSDALE: GWT UI overhaul.
&gt;&gt; YAP: GWT UI overhaul, there's some new

00:28:31.169 --> 00:28:36.739
widgets and some new ways of building your
data-backed UIs that should address it.

00:28:36.739 --> 00:28:40.309
&gt;&gt; RAMSDALE: Well, and ultimately, though,
I mean you're using--so let's back up for

00:28:40.309 --> 00:28:45.269
just a second. So what happens when you actually
update every 15 milliseconds versus every

00:28:45.269 --> 00:28:48.531
300 milliseconds from a high level? Like,
does the UI just not update?

00:28:48.531 --> 00:28:53.200
&gt;&gt; High-level library lets you see, you know,
it's very slow and not updated. You can see

00:28:53.200 --> 00:28:54.910
the CPU usage...
&gt;&gt; Yeah.

00:28:54.910 --> 00:28:57.110
&gt;&gt; ... the varied consumption because it's
like...

00:28:57.110 --> 00:29:03.250
&gt;&gt; VAWTER: That is--that is a style of layout
that does much of your layout on the page

00:29:03.250 --> 00:29:09.029
having to run JavaScript. So every time you
update the DOM, it has to drive a bunch of

00:29:09.029 --> 00:29:14.200
JavaScript in order to refill the page, put
things where they need to go. And that's ultimately

00:29:14.200 --> 00:29:20.629
much, much slower than relying on a rendering
model that utilizes the fast C code, you know,

00:29:20.629 --> 00:29:27.210
that's built in to the browser to do layout
in C rather than layout in JavaScript. So,

00:29:27.210 --> 00:29:33.400
your choice of UI Library--you know, I'm not
sure what your motivations are but you certainly

00:29:33.400 --> 00:29:38.960
make a tradeoff whenever you're actually relying
on JavaScript to put things on the page. That's

00:29:38.960 --> 00:29:44.450
going to make it slow. I suspect, if you put--if
you run your application Speed Tracer and

00:29:44.450 --> 00:29:47.849
take a look at where the time is going, that
would be very illuminating.

00:29:47.849 --> 00:29:55.159
&gt;&gt; All right. Thank you.
&gt;&gt; Something that has been really frustrating

00:29:55.159 --> 00:30:00.610
for me has been date manipulations on the
clients' side. Is there anything, a roadmap

00:30:00.610 --> 00:30:09.590
or a solution for good like Calendar-style
date manipulations on the client?

00:30:09.590 --> 00:30:16.690
&gt;&gt; RAMSDALE: So I think the cross-talk here
tells you that there's--there's not a distinct

00:30:16.690 --> 00:30:23.710
effort going on right now to make it better.
And I would venture to say that John Tamplin

00:30:23.710 --> 00:30:26.419
is the guy that would--we want to be talking
to about that. He's not here.

00:30:26.419 --> 00:30:28.119
&gt;&gt; VAWTER: Yeah, let's--let's volunteer John
to do some work.

00:30:28.119 --> 00:30:33.499
&gt;&gt; RAMSDALE: Sounds good. I like it. But,
honestly, if you--so that would be--have you

00:30:33.499 --> 00:30:41.690
tried posting either on GWT contributors or
the main GWT group to get some feedback from

00:30:41.690 --> 00:30:45.279
anybody, the community or us, to make it better?
&gt;&gt; No, I just kind of searched around, trying

00:30:45.279 --> 00:30:50.549
to find, you know, known solutions but we
kind of ended up rolling our own and converting

00:30:50.549 --> 00:30:56.320
JodaTime's API to--you know, we kind of hacked
that up and made it work on the client which

00:30:56.320 --> 00:31:03.850
isn't an ideal solutions because you'll lose
a lot and it's not--it's not complete is what

00:31:03.850 --> 00:31:05.259
ends up happening but...
&gt;&gt; ARMSDALE: Okay.

00:31:05.259 --> 00:31:07.899
&gt;&gt; ... you have that working.
&gt;&gt; RYAN: Similar things have gone on inside

00:31:07.899 --> 00:31:13.820
of Google with teams that have built on partial
emulations of JodaTime for themselves. It's--I

00:31:13.820 --> 00:31:19.760
don't think they've gotten anywhere farther
than where you've gotten, so we don't have

00:31:19.760 --> 00:31:24.120
better advice, I don't think.
&gt;&gt; Okay, thank you.

00:31:24.120 --> 00:31:29.390
&gt;&gt; We've been building applications with the
UI Binder and MPP Framework and Gin, and have

00:31:29.390 --> 00:31:33.610
noticed that that, you know, there's been
a little bit of struggle to get that all kind

00:31:33.610 --> 00:31:38.220
of tied together. And it seems like an opportunity
with 2.1 and the new MPP Framework to bring

00:31:38.220 --> 00:31:40.919
those together, a little bit better. Is that
something you're addressing?

00:31:40.919 --> 00:31:48.799
&gt;&gt; RYAN: It does seem like that, doesn't it?
We won't address that directly in the 2.1

00:31:48.799 --> 00:31:55.649
timeframe. We are in close--we're good friends
with the Gin Team and big fans of it. And,

00:31:55.649 --> 00:32:02.049
clearly, we need to get the things closer
together. But for the moment, you're on your

00:32:02.049 --> 00:32:06.230
own there. Some of the features on UI Binder
were added to make stuff like Gin integration

00:32:06.230 --> 00:32:11.129
possible so the UI field provided equals-true
attribute; in particular, UI Factors and so

00:32:11.129 --> 00:32:16.950
on. But, you know, we don't have immediate
stuff. But we think about it a lot.

00:32:16.950 --> 00:32:24.230
&gt;&gt; Thanks.
&gt;&gt; All right, Michael and I both work on holidayinn.com

00:32:24.230 --> 00:32:31.429
website. We have a couple SCO-related questions.
One is surround the HtmlUnit and I believe

00:32:31.429 --> 00:32:36.730
it was touched on a minute ago about a patch
that was out there for HtmlUnit. We were having

00:32:36.730 --> 00:32:45.379
deadlock issues with our HtmlUnit and we got
the patch that fixed our deadlock issue. However,

00:32:45.379 --> 00:32:50.409
we now noticed it seems slower and a lot of
threads are being utilized. A lot more threads

00:32:50.409 --> 00:32:56.860
are being utilized than we used to. So is
there--is single threaded the way to go or

00:32:56.860 --> 00:33:01.960
will there eventually be another patch that
would give us back to multi-threading that?

00:33:01.960 --> 00:33:09.490
&gt;&gt; MANJHI: So JavaScript is inherently single-threaded.
So HtmlUnit's initial choice of using more

00:33:09.490 --> 00:33:17.700
than one JavaScript thread was hard and unfortunate.
So they had like all kinds of synchronization

00:33:17.700 --> 00:33:22.639
code in there so that they wanted to force
use of multiple threads and still force it

00:33:22.639 --> 00:33:29.119
under the single GS margin. So, intuitively,
like once you--once you move from, like, multi-threaded

00:33:29.119 --> 00:33:35.970
to like single-threaded, there would be some
things which would be like serials. So, intuitively,

00:33:35.970 --> 00:33:42.639
there would be some--some speed-up lost but
you shouldn't be seeing much.

00:33:42.639 --> 00:33:45.950
&gt;&gt; So maybe a better solution for us would
be the cache to the content?

00:33:45.950 --> 00:33:47.180
&gt;&gt; PROBST: Right.
&gt;&gt; MANJHI: Right.

00:33:47.180 --> 00:33:51.659
&gt;&gt; PROBST: So one of the things that you may
want to think about is how often to cache

00:33:51.659 --> 00:33:57.240
your content and that really depends on how
often, you know, your content changes on the

00:33:57.240 --> 00:34:01.519
page, right? And you probably also have a
pretty good idea from the escape fragment

00:34:01.519 --> 00:34:05.769
URL that your Web server gets hit with how
often Google comes around, right?

00:34:05.769 --> 00:34:06.990
&gt;&gt; Yeah.
&gt;&gt; PROBST: So you don't have to constantly

00:34:06.990 --> 00:34:11.020
have it running.
&gt;&gt; Right. Okay, the second question with Michael.

00:34:11.020 --> 00:34:20.610
&gt;&gt; Yeah, still same thing for the ISO. And
we utilized HtmlUnit and we found out escape

00:34:20.610 --> 00:34:29.390
fragment carry the index by Google. So I put
on in the robust.txt to blog it. And, currently,

00:34:29.390 --> 00:34:36.750
the assist on our ranking is sort of used.
So I want to say, is that right a way to do

00:34:36.750 --> 00:34:43.790
or not? Because if I don't put on the robust.txt
in the carry index, so a user potentially

00:34:43.790 --> 00:34:50.430
clicks that link--so if I put on that one,
it may affect the ranking. Is that clear?

00:34:50.430 --> 00:35:02.050
&gt;&gt; MANJHI: I guess the--how the ordering in
robust.txt affects ranking. That is some...

00:35:02.050 --> 00:35:06.530
&gt;&gt; It's a matter of that escape fragment,
we wanted to do exclude that.

00:35:06.530 --> 00:35:08.930
&gt;&gt; MANJHI: Yeah.
&gt;&gt; So--because we don't our public to hit

00:35:08.930 --> 00:35:09.930
this with that.
&gt;&gt; PROBST: Right.

00:35:09.930 --> 00:35:13.051
&gt;&gt; Right. So, we're wondering what's the best
practice around that.

00:35:13.051 --> 00:35:18.760
&gt;&gt; PROBST: I see what you're saying. So you
want to put something in robust.txt that says

00:35:18.760 --> 00:35:23.450
to other people other than Google not to hit
it.

00:35:23.450 --> 00:35:27.571
&gt;&gt; Right, on index, yes.
&gt;&gt; PROBST: Well, okay. So there--there has

00:35:27.571 --> 00:35:35.940
recently been an update--wow.
&gt;&gt; VAWTER: Yeah, robust.txt does support crawler

00:35:35.940 --> 00:35:40.930
agent filter blogs. Is that--does that give
you any leeway?

00:35:40.930 --> 00:35:50.760
&gt;&gt; No, that was the same thing, yeah, group,
to escape, to remove all those blank GWT escape

00:35:50.760 --> 00:35:52.431
fragment.
&gt;&gt; VAWTER: Yeah, and I guess the other thing

00:35:52.431 --> 00:35:57.310
you could is you could look at, you know,
you can look at--you can do user agent filtering

00:35:57.310 --> 00:36:02.880
on your server and just run a really quick
pass as a filter to say if it's not Googlebot,

00:36:02.880 --> 00:36:09.531
just--or don't return anything or strip out
the hash tags you don't want.

00:36:09.531 --> 00:36:18.930
&gt;&gt; Okay.
&gt;&gt; Hi, were the data presentation widgets

00:36:18.930 --> 00:36:22.131
that you talked about in the keynote in the
M1 release, do you know?

00:36:22.131 --> 00:36:26.430
&gt;&gt; RYAN: Yes, they are.
&gt;&gt; What are they called or how do we find

00:36:26.430 --> 00:36:29.510
them?
&gt;&gt; RYAN: Look for cell list--list view. It's

00:36:29.510 --> 00:36:31.650
the general interface. Look for cell list
view...

00:36:31.650 --> 00:36:36.320
&gt;&gt; Okay.
&gt;&gt; RYAN: ... with the main notation and you'll

00:36:36.320 --> 00:36:40.130
find everything in the summary.
&gt;&gt; Hi, we're an open source project for universities.

00:36:40.130 --> 00:36:46.400
And our particular--we've chosen GWT as a
presentation tier for our architecture. Our

00:36:46.400 --> 00:36:52.700
particular design challenge and we've been
working with GWT since 1.4 then recently 1.64,

00:36:52.700 --> 00:37:00.840
now up to 2. Our design challenge is that
we have to make this open source framework

00:37:00.840 --> 00:37:05.080
customizable and extensible for the schools
that will go and adopt this but they don't

00:37:05.080 --> 00:37:11.350
have hard core GWT experience and they probably
won't be able to afford to buy it. So, we're

00:37:11.350 --> 00:37:18.120
tasked with trying to use the benefits to
the GWT framework but make it extensible and

00:37:18.120 --> 00:37:22.850
usable for those folks that can customize
it for their own needs. And we've been--we've

00:37:22.850 --> 00:37:29.790
been pursuing a number of different MVC frameworks
from before GWT2. We're now looking at whether

00:37:29.790 --> 00:37:34.980
UI Binder and framework of widgets is the
right way to go. And we're actually struggling

00:37:34.980 --> 00:37:39.700
for, I guess, support and advice on the direction
we should take.

00:37:39.700 --> 00:37:44.820
&gt;&gt; VAWTER: I mean what, you know, when you're
saying extension model, what kinds of scenarios

00:37:44.820 --> 00:37:50.410
are you trying to support?
&gt;&gt; Different layouts; so easy layout construction

00:37:50.410 --> 00:37:57.580
and also labels as internationalization as
well. So one school might refer to a course

00:37:57.580 --> 00:38:02.110
as a course one or, you know, or student,
so they have different taxonomy models across

00:38:02.110 --> 00:38:06.700
the--across the...
&gt;&gt; RYAN: Are you trying to let your users

00:38:06.700 --> 00:38:07.700
provide the layout...
&gt;&gt; Yes.

00:38:07.700 --> 00:38:09.301
&gt;&gt; RYAN: ...without having to know about GWT?
&gt;&gt; Correct.

00:38:09.301 --> 00:38:15.240
&gt;&gt; Well.
&gt;&gt; VAWTER: It sounds so--it sounds like we

00:38:15.240 --> 00:38:25.610
need to build server bundle finally. So, here's
a crazy idea that might work. If you can allow

00:38:25.610 --> 00:38:30.690
your--if you want to give your users a sort
of, you know, give us a chunk of text, you

00:38:30.690 --> 00:38:35.400
know, that describes your layout or whatever;
one thing that you might look at doing is

00:38:35.400 --> 00:38:41.980
extending client bundle with custom resource
types that will process the, you know, the

00:38:41.980 --> 00:38:44.901
user's, you know, mysite.xml file.
&gt;&gt; Right.

00:38:44.901 --> 00:38:50.200
&gt;&gt; VAWTER: And return, you know, data to your--to
your application's layout system that will

00:38:50.200 --> 00:38:54.540
then say, "Okay, you know, actually put this
widget here, put this widget there." You know,

00:38:54.540 --> 00:39:01.400
take advantage of Joel's layout system. And
that might be a starting point, if you then

00:39:01.400 --> 00:39:08.170
need to go on and allow the user to provide
additional code that runs in the application,

00:39:08.170 --> 00:39:15.380
probably your best bet for approachability
is to--is to use something like GWT exporter

00:39:15.380 --> 00:39:22.640
to give them a JavaScript API that they can--that
they can then work with. The GWT compiler

00:39:22.640 --> 00:39:27.410
does--the architecture right now doesn't support
sort of pulling in additional Java modules...

00:39:27.410 --> 00:39:30.940
&gt;&gt; Right.
&gt;&gt; VAWTER: ... at runtime, although, certainly

00:39:30.940 --> 00:39:37.070
the GWT compiler is easy enough to use as
a tool as part of something else so you could

00:39:37.070 --> 00:39:43.520
build a compilation server that for, you know,
so and so university, when a request comes

00:39:43.520 --> 00:39:50.130
in, they could compile a module on the fly
that wouldn't be all that hard to architect;

00:39:50.130 --> 00:39:58.010
you just want to take a look at the come Google
GWT dev compiler or pre-compiled perm and

00:39:58.010 --> 00:40:00.820
links data.
&gt;&gt; Yeah, it's something we're looking at,

00:40:00.820 --> 00:40:02.880
yeah.
&gt;&gt; VAWTER: Yeah, that's certainly an approach

00:40:02.880 --> 00:40:07.770
that can give you some leverage there.
&gt;&gt; Okay. And just last question, and you mentioned

00:40:07.770 --> 00:40:11.830
the IRC chat, is that something that you guys
listen in on, the IRC chat?

00:40:11.830 --> 00:40:14.300
&gt;&gt; VAWTER: Yeah, the IRC channel? Yeah, I
usually hang out there.

00:40:14.300 --> 00:40:16.390
&gt;&gt; Yeah.
&gt;&gt; VAWTER: Some of the other guys hang out

00:40:16.390 --> 00:40:18.550
there too on occasion.
&gt;&gt; Okay. Great, thank you.

00:40:18.550 --> 00:40:27.450
&gt;&gt; I have a couple of questions. So my company,
Numerad, we're big fans of Google collections

00:40:27.450 --> 00:40:33.260
and extension to Java util. It looks like
in--from the source, there were--there was

00:40:33.260 --> 00:40:41.020
kind of an intention to make that usable in
GWT client. Is that working now on the latest

00:40:41.020 --> 00:40:47.410
release? I had some issues making some of
those classes available on the client.

00:40:47.410 --> 00:40:54.350
&gt;&gt; RYAN: I should know the answer to that.
I don't quite. And, particularly, I'm not

00:40:54.350 --> 00:41:00.510
sure what the state is of the open source
version of it versus those internal...

00:41:00.510 --> 00:41:01.720
&gt;&gt; Okay.
&gt;&gt; RYAN: I know, there's a definite intention

00:41:01.720 --> 00:41:04.290
to get it all working without having to think
about it. It's not something that we're driving.

00:41:04.290 --> 00:41:09.620
It's something that the Guava guys keep going.
&gt;&gt; Okay.

00:41:09.620 --> 00:41:11.660
&gt;&gt; RYAN: Yeah, I don't have a better answer
for you than that.

00:41:11.660 --> 00:41:16.870
&gt;&gt; Okay. So there's no roadmap for when that
support might be available? I think what we've

00:41:16.870 --> 00:41:19.410
ended up doing is just rolling around classes
based on the source.

00:41:19.410 --> 00:41:24.390
&gt;&gt; RYAN: There's no roadmap on our side; although,
there's discussion about it a lot. I think

00:41:24.390 --> 00:41:27.430
on the Guava side, there might be more concrete
plans so if you want to follow-up there. I

00:41:27.430 --> 00:41:33.730
think another one use the stack overflow to
keep it in the community.

00:41:33.730 --> 00:41:37.140
&gt;&gt; Okay, okay.
&gt;&gt; PROBST: Maybe one more thing to note is

00:41:37.140 --> 00:41:41.880
that we're separately also working on lightweight
collections for GWT. I mean, that's something

00:41:41.880 --> 00:41:45.040
you may--before you hand-roll your own, it's
something--you definitely want to look into

00:41:45.040 --> 00:41:47.220
it. There's, you know, commits going into
trunk right now.

00:41:47.220 --> 00:41:49.630
&gt;&gt; Okay.
&gt;&gt; PROBST: And, you know, at least be partially

00:41:49.630 --> 00:41:52.580
part of 2.1 if not fully--I don't know.
&gt;&gt; RYAN: Yeah, the lightweight collections

00:41:52.580 --> 00:41:57.760
as they have been implemented to date are
in the 2.1 snapshot. They have--they're kind

00:41:57.760 --> 00:42:03.570
of almost an opposite goal of the collections
though where people who are in memory-tight

00:42:03.570 --> 00:42:09.220
situations will often wind up doing is they
stay away from the GRE collection classes

00:42:09.220 --> 00:42:13.610
and they'll roll their own. They can work
on top of the JSOs and so on that cut down

00:42:13.610 --> 00:42:17.520
their code weight. As soon as you use the
GWT widget, the first thing that you pull

00:42:17.520 --> 00:42:21.660
in is a good chunk of the JRE and, you do,
part of the reason that you do that is because

00:42:21.660 --> 00:42:26.800
we use the standard Java collections. So,
we're putting together a more minimal collection

00:42:26.800 --> 00:42:33.050
API that can work entirely as overweight types.
But as soon as you want to use something like

00:42:33.050 --> 00:42:38.170
that, the Google collection classes, they're
going to be back into bridging into Java world

00:42:38.170 --> 00:42:42.540
and so there'll be tensions.
&gt;&gt; Okay, all right, I'll take a look. Then

00:42:42.540 --> 00:42:48.150
the other question was Sonar application;
we're interested in providing stable URLs

00:42:48.150 --> 00:42:53.740
that, you know, so that you can link to a
place and a state, a particular part of that

00:42:53.740 --> 00:42:59.810
application? I think you talked a little bit
about AJAX Crawler and using--being able to

00:42:59.810 --> 00:43:06.260
look up or use the fragment identifier for...
&gt;&gt; PROBST: Right, so part of the spec for

00:43:06.260 --> 00:43:12.180
the AJAX crawlability is to allow AJAX applications
to still have stable URLs with half fragments,

00:43:12.180 --> 00:43:20.200
and also prospect these hash fragments are
not sent to the server as part of an HTTP

00:43:20.200 --> 00:43:25.580
request, that's why there is a mapping between,
you know, hash fragment URLs and the escape

00:43:25.580 --> 00:43:31.120
fragment URLs that essentially move the hash
fragment to be part of the query parameters.

00:43:31.120 --> 00:43:35.300
So, essentially, there is this back and forth
mapping between, you know, what you have and

00:43:35.300 --> 00:43:39.800
then what the Google Crawler actually requests
from your site. You will, you know, map it

00:43:39.800 --> 00:43:43.990
back and return the content for the hash fragment
URL. And that's what actually gets indexed.

00:43:43.990 --> 00:43:48.530
So in other words, this whole mapping back
and forth should not be visible to your users

00:43:48.530 --> 00:43:55.940
at all, ever. Your users will always see the
hash fragment URL as they interact with the

00:43:55.940 --> 00:44:00.030
site. It will be, you know, you can link to
it, you know, you can, you know, do all the

00:44:00.030 --> 00:44:04.830
things you normally do and they will also
show up in search results. And, you know,

00:44:04.830 --> 00:44:08.780
they will usually click on it and get to your
site, so you will--this is fully supported.

00:44:08.780 --> 00:44:14.690
&gt;&gt; So is there a pattern you guys recommend
for specifying a location in a fragment identifier

00:44:14.690 --> 00:44:17.540
and state or query parameters that you want
to pass...

00:44:17.540 --> 00:44:20.830
&gt;&gt; PROBST: I'm sorry, is there a what?
&gt;&gt; Like a pattern or a syntax that you guys

00:44:20.830 --> 00:44:23.600
recommend because I've seen a couple of different
ways of doing it.

00:44:23.600 --> 00:44:27.480
&gt;&gt; PROBST: Well, hash fragments tend to be
pretty open in what they support. What we

00:44:27.480 --> 00:44:33.320
found is that it works pretty well to have
key value pairs just like you would have in

00:44:33.320 --> 00:44:37.090
the query parameters. So that's something
that we do recommend and that works.

00:44:37.090 --> 00:44:43.760
&gt;&gt; Okay. And how do you separate like the
location from the set of key value parameters

00:44:43.760 --> 00:44:45.800
that doesn't--is there--is that part of the
spec or?

00:44:45.800 --> 00:44:48.090
&gt;&gt; PROBST: This is--that is not part of the
spec, no.

00:44:48.090 --> 00:44:50.330
&gt;&gt; RAMSDALE: Yeah, I think, you're talking
about everything after the hash frag.

00:44:50.330 --> 00:44:52.640
&gt;&gt; PROBST: Yeah, yeah.
&gt;&gt; Okay, right. Okay, thanks.

00:44:52.640 --> 00:44:56.940
&gt;&gt; RAMSDALE: A good example too is check out
wave, I mean, it's not--this isn't the standard

00:44:56.940 --> 00:45:00.660
but I think that they really do a good job.
And you can see how they're saying, "Okay,

00:45:00.660 --> 00:45:05.510
I want this wave. I want this minimized. I
want my inbox showing, so on and so forth."

00:45:05.510 --> 00:45:09.010
I mean, literally, they have what looks like
the state of the application in that hash

00:45:09.010 --> 00:45:12.490
fragment. I think that's a good starting point.
&gt;&gt; Yes, I noticed in Gmail and Wave, they've

00:45:12.490 --> 00:45:16.480
done similar things where you have the location,
the slash, and then all the parameters following

00:45:16.480 --> 00:45:17.480
it so...
&gt;&gt; Right.

00:45:17.480 --> 00:45:19.990
&gt;&gt; I didn't know if there was a standard coming
out or...

00:45:19.990 --> 00:45:29.380
&gt;&gt; RYAN: We are going to take a crack at that
that 2.1 release. It's not in the 2.1 snapshot

00:45:29.380 --> 00:45:32.120
yet. So don't go look in yet. But we are putting
together an applications framework. That's

00:45:32.120 --> 00:45:39.360
what Roo was generating too in the keynote
yesterday. And one of the things that we must

00:45:39.360 --> 00:45:42.250
address is at least some kind of standards
for, oh, I've got some state after the hash

00:45:42.250 --> 00:45:44.850
fragment; how am I going to turn that into
my upstate?

00:45:44.850 --> 00:45:46.440
&gt;&gt; Okay.
&gt;&gt; RYAN: So, I don't know if we'll do it right

00:45:46.440 --> 00:45:51.260
yet but we're going to take a stab.
&gt;&gt; Okay, great thanks.

00:45:51.260 --> 00:45:57.850
&gt;&gt; Hi, my GWT application backs on to a Spring
and Hibernate back end. And with the new Spring

00:45:57.850 --> 00:46:05.330
Roo or with the new GWT and Spring Roo integration,
will I still need to use Gilead, like something

00:46:05.330 --> 00:46:11.619
that goes off and fetches my proxied objects?
&gt;&gt; RYAN: I don't know that side of it too

00:46:11.619 --> 00:46:17.240
well. Do we still need to use that?
&gt;&gt; Gilead. It ties into the persistence context

00:46:17.240 --> 00:46:20.660
and when it...
&gt;&gt; RYAN: Okay. If that's what Roo is setting

00:46:20.660 --> 00:46:26.360
you up to use in the screen setup, nothing
has changed on that front. So it's the--the

00:46:26.360 --> 00:46:33.000
work has been to get it to generate a Roo
app--sorry, generate a GWT app that talks

00:46:33.000 --> 00:46:39.340
to a fairly generic servelet that then talks
to the public API that Roo was generating

00:46:39.340 --> 00:46:43.450
already, static finder, methods, and that
kind of thing. I think, under the hood, that's

00:46:43.450 --> 00:46:50.940
using the same Spring persistence mechanism
and fetching frameworks that were there already.

00:46:50.940 --> 00:46:57.900
&gt;&gt; Okay. Cool, yeah. Excellent. Thanks.
&gt;&gt; We use decorator panels some. Do you have

00:46:57.900 --> 00:47:02.240
any plans to come up with a decorated layout
panel?

00:47:02.240 --> 00:47:08.440
&gt;&gt; RYAN: The guy that could really answer
that is not here but I could take it. The

00:47:08.440 --> 00:47:14.820
decorated panels happened before client bundle
and CSS resource happened. And we haven't

00:47:14.820 --> 00:47:22.850
yet integrated that world into our default
where it sat very well. We know that we need

00:47:22.850 --> 00:47:26.570
to--I don't think we figured out exactly how
we want to go with that. And I think the decorated

00:47:26.570 --> 00:47:30.490
panels in particular--we consciously stay
away from that for the layout panels.

00:47:30.490 --> 00:47:33.720
&gt;&gt; YAP: Yes, so if Joel were here, I think
he would say, "Don't decorate the layout panels;

00:47:33.720 --> 00:47:40.080
use the layout panels for layout and put things
in the layout panels to do the decoration."

00:47:40.080 --> 00:47:46.690
And to go back to client bundle, Raymond,
if you could talk about the pattern--dependence

00:47:46.690 --> 00:47:53.310
ejection pattern for passing in a widget's
resources maybe instead of using the decorator

00:47:53.310 --> 00:47:54.550
panel pattern.
&gt;&gt; Yeah.

00:47:54.550 --> 00:47:59.400
&gt;&gt; YAP: So.
&gt;&gt; RYAN: I don't have much to say beyond that.

00:47:59.400 --> 00:48:04.690
We've--we kick it back and forth. So we've
experimented with having the widget declare

00:48:04.690 --> 00:48:08.980
the particular CSS resource interface that
it wants as a constructor argument and it's

00:48:08.980 --> 00:48:16.770
up to a theme to provide that. We've seen
some libraries internally where they'll actually

00:48:16.770 --> 00:48:21.610
declare a decorator interface. Nothing to
do with the decorator panels that we do right

00:48:21.610 --> 00:48:26.170
now but an object that is responsive for being
familiar with the DOM structure of the particular

00:48:26.170 --> 00:48:32.620
widget and being responsible for adding CSS
styles or putting wrappers around it to make

00:48:32.620 --> 00:48:37.440
things go, that kind of a thing. We're still
debating what direction we want to go to with

00:48:37.440 --> 00:48:42.240
our own set--our own widgets like that.
&gt;&gt; YAP: So if your intended goal is to theme

00:48:42.240 --> 00:48:50.360
a widget or have a widget be themeable, you
can just have that widget take in a client

00:48:50.360 --> 00:48:55.700
bundle instance and it's constructor and then
you can--you can control how that gets created.

00:48:55.700 --> 00:49:01.220
And you can stub in your own custom styles
so can declare one CSS resource interface

00:49:01.220 --> 00:49:05.730
and then you supply different instances of
that. You can point them different CSS files

00:49:05.730 --> 00:49:12.860
so you can get the effect of a widget with
a single-style interface basically that you

00:49:12.860 --> 00:49:17.550
can theme differently at your whim. So that's
the pattern.

00:49:17.550 --> 00:49:25.369
&gt;&gt; So you're moving away from decorator panels?
&gt;&gt; RYAN: It seems like.

00:49:25.369 --> 00:49:28.000
&gt;&gt; YAP: Yeah, it seems like it.
&gt;&gt; RYAN: John Benca who--John, could you--John,

00:49:28.000 --> 00:49:34.480
can you pick up a microphone, all right, or
shout really loud?

00:49:34.480 --> 00:49:40.570
&gt;&gt; BENCA: I work with Joe--I work with Joel.
You might want to take a look at the border

00:49:40.570 --> 00:49:45.930
image. It's a--I believe it's in the HTML
5 spec. It's supported by Firefox and Web

00:49:45.930 --> 00:49:49.990
kit browsers. And it's what we use in the
expenses app. And, basically, you define an

00:49:49.990 --> 00:49:54.680
image that has, you know, a border and then
you can define the offsets for the corners

00:49:54.680 --> 00:49:58.770
and it will apply then. That's far superior.
I mean, that's basically the best way to pull

00:49:58.770 --> 00:50:06.430
that off. The only problem is it's not supported
in IE so I know Joel is looking at a way--ways

00:50:06.430 --> 00:50:09.940
to sort of get it to work on IE but we haven't
really come up with a good solution to that

00:50:09.940 --> 00:50:12.980
yet. So it's probably going to involve like
chunking the image in.

00:50:12.980 --> 00:50:17.900
&gt;&gt; RYAN: Do you know if that's moving in to
IE 9, John, any idea?

00:50:17.900 --> 00:50:27.350
&gt;&gt; BENCA: I wish. I don't know.
&gt;&gt; Hi, I built a management Web app with GWT-Ext

00:50:27.350 --> 00:50:33.350
and, for various reasons, it needs to run
for a very long period of time, and it's leaking

00:50:33.350 --> 00:50:39.590
memory. So I was wondering if you could point
me to tools or resources to help me detect

00:50:39.590 --> 00:50:45.290
those. You know, a val drain for GWT would
be super. Any plans?

00:50:45.290 --> 00:50:53.860
&gt;&gt; VAWTER: Where are you leaking memory from?
Is it in the DOM layer or are you--or is your

00:50:53.860 --> 00:50:56.339
application just simply suffering from too
much object retention?

00:50:56.339 --> 00:51:00.180
&gt;&gt; I'm not sure. I want to find out. It's
sort of...

00:51:00.180 --> 00:51:06.470
&gt;&gt; YAP: You can probably talk to Joel Webber.
He has--he's the memory leak expert for browsers.

00:51:06.470 --> 00:51:14.660
And he has numerous log posts on exactly what's
going on there. So part of using GWT-Ext is--well,

00:51:14.660 --> 00:51:22.410
it's--I don't think they're using GWT users
event, you know, stuff so...

00:51:22.410 --> 00:51:29.840
&gt;&gt; VAWTER: Yeah. I don't specifics of the
Ext there. If you--something that you can

00:51:29.840 --> 00:51:37.260
do is run your application using development
node and then look at the Java heap because

00:51:37.260 --> 00:51:41.880
if it turns out that your problem is too much,
you know, object retention, that will show

00:51:41.880 --> 00:51:48.840
up with regular JVM inspection tools. Similarly,
you can do some very rough profiling of, you

00:51:48.840 --> 00:51:53.810
know, orders of magnitude comparisons between
this thing and that thing, using the JVM.

00:51:53.810 --> 00:52:01.350
But if it turns out that you're, you know,
actually leaking DOM objects due to your UI

00:52:01.350 --> 00:52:06.540
bindings and stuff like that, that you're--that
you might hopefully see some...

00:52:06.540 --> 00:52:11.950
&gt;&gt; YAP: If you were not--if you are not explicitly
unhooking your event handlers, you will leak

00:52:11.950 --> 00:52:16.550
memory so--which is part of the reason why
GWT user widgets have that extra overhead

00:52:16.550 --> 00:52:21.840
is that they don't let you leak memory.
&gt;&gt; So, aside from, you know, sort of guessing,

00:52:21.840 --> 00:52:29.630
trialing, and so on, any plans for any tools
to make this easier to check?

00:52:29.630 --> 00:52:30.810
&gt;&gt; YAP: Yes, okay.
&gt;&gt; AYERS: I was going to say one; in Speed

00:52:30.810 --> 00:52:37.040
Tracer, we did have some memory leaks right
before some major release. And it was a big

00:52:37.040 --> 00:52:41.820
help for us; we're using Chrome and Chrome
does have some--you can even look at the memory

00:52:41.820 --> 00:52:46.450
usage within Chrome. And, basically, we just
start playing around, you know, we broke the

00:52:46.450 --> 00:52:51.970
app, we started just knowing out instances
until we found some clues and then went back

00:52:51.970 --> 00:52:56.470
and fixed--patched things up. So it's those
little tricks like that. Now, the Chrome Web

00:52:56.470 --> 00:53:01.290
inspector is really powerful.
&gt;&gt; YAP: And I don't want to make a promise

00:53:01.290 --> 00:53:08.480
but we--we want you to have a heap graph as
well to show the side of your heap before

00:53:08.480 --> 00:53:12.630
and after JC runs and during each event, so
you should be able to track your memory usage

00:53:12.630 --> 00:53:17.450
that way as well to see if you have a leak.
&gt;&gt; Okay. Thank you.

00:53:17.450 --> 00:53:24.600
&gt;&gt; I saw a reference to JSR 303 validation
in the bike shed. Is there a serious effort

00:53:24.600 --> 00:53:29.690
going on there?
&gt;&gt; RYAN: There is a reference to JSR 303 validation

00:53:29.690 --> 00:53:33.890
in bike shed. There's a strong intent. We
haven't gone to that yet. We only just snuck

00:53:33.890 --> 00:53:41.680
in any validation at all at the last second
before the keynote demo. My strong hope is

00:53:41.680 --> 00:53:47.990
that what will happen is the annotations that
are on your service identities will be reflected

00:53:47.990 --> 00:53:52.520
in the DTOs that we generate for you. And
we should be able to have server-side code

00:53:52.520 --> 00:53:57.420
that enforces the ones that actually make
sense for us to enforce. I'm not familiar

00:53:57.420 --> 00:54:02.910
enough with the 303 spec yet to know if we
can actually do stuff like put them on gather

00:54:02.910 --> 00:54:07.820
methods or other arbitrary things rather than
actual fields. So I don't know how much we'll

00:54:07.820 --> 00:54:11.700
have to reproduce it versus how much we can
just use it. But that's clearly the way to

00:54:11.700 --> 00:54:15.080
go. There's homegrown stuff inside of Google
that wasn't quite general enough for us to

00:54:15.080 --> 00:54:22.240
harvest that, of course, at least partially
in that style. Anyway, yes, that's the first

00:54:22.240 --> 00:54:27.460
class call for 2.1; no progress to report.
&gt;&gt; MANJHI: We also have the validation going

00:54:27.460 --> 00:54:32.430
on the server side for what it is worth.
&gt;&gt; Yeah.

00:54:32.430 --> 00:54:37.220
&gt;&gt; Well, two questions; one is I am developing
an application that's pulling in a large amount

00:54:37.220 --> 00:54:42.400
of data, patient information, and I was in
the other sessions and kind of getting the

00:54:42.400 --> 00:54:47.120
feel for it. And I just want to make sure
I'm clear on this is that are you guys recommending

00:54:47.120 --> 00:54:52.230
like if you're doing a large query from the
server that you should use a cell-based instead

00:54:52.230 --> 00:54:56.070
of widgets? Is that kind of the best way of
doing it especially when you're, you know,

00:54:56.070 --> 00:54:59.810
when you want to type in the command and it
pulls it on? Is that the best method of going

00:54:59.810 --> 00:55:04.480
about that, just the cell base instead of
pulling widgets? Because from what I was getting

00:55:04.480 --> 00:55:10.220
the sense was that widgets--the more widgets
you add to it, the slower it starts to become

00:55:10.220 --> 00:55:14.100
and, you know, more cell-based is, you know,
more faster...

00:55:14.100 --> 00:55:20.070
&gt;&gt; RYAN: The--the cell-based widgets, that's
the first that they're taking there. We don't

00:55:20.070 --> 00:55:25.690
have anything--there's no cell class or anything
like that in the current versions of GWT.

00:55:25.690 --> 00:55:28.910
The 2.1 snapshot shows where we're heading
with that.

00:55:28.910 --> 00:55:30.760
&gt;&gt; Right.
&gt;&gt; RYAN: What that advice is about is our

00:55:30.760 --> 00:55:33.780
existing widget set, as soon as you want to
do something interesting per row like have

00:55:33.780 --> 00:55:37.410
a button to click in every row or something
like that, the most natural thing to do right

00:55:37.410 --> 00:55:41.310
now is to make a new widget, a new widget,
a new widget, and you quickly wind up with

00:55:41.310 --> 00:55:45.100
hundreds or thousands of widgets for not terribly
many rows of data, and it just doesn't scale.

00:55:45.100 --> 00:55:49.440
&gt;&gt; Right.
&gt;&gt; RYAN: So, the data-backed widgets, the

00:55:49.440 --> 00:55:55.650
cell-based widgets that we're putting together
for you try to remove that need. They're setting

00:55:55.650 --> 00:56:01.200
it up so it is possible to add interaction
and to do bulk rendering without winding up

00:56:01.200 --> 00:56:05.260
having all the overhead of a widget for every
spot you want the user to be able to click.

00:56:05.260 --> 00:56:07.310
&gt;&gt; Is that--you said that's coming out?
&gt;&gt; RYAN: That's coming out.

00:56:07.310 --> 00:56:11.150
&gt;&gt; Okay.
&gt;&gt; RYAN: Right. It's not--it's in the 2.1

00:56:11.150 --> 00:56:17.050
snapshot, in pretty good form really but it
will still start changing on you. You know,

00:56:17.050 --> 00:56:18.540
it's not completely final yet.
&gt;&gt; Okay.

00:56:18.540 --> 00:56:21.430
&gt;&gt; RYAN: You can certainly--in the meantime,
if you can't wait for that, you can certainly

00:56:21.430 --> 00:56:24.730
look at what we're doing there. There's no
reason that you can't do similar things yourself.

00:56:24.730 --> 00:56:27.690
The code is not that hard.
&gt;&gt; YAP: It's just using a flyweight pattern.

00:56:27.690 --> 00:56:30.400
&gt;&gt; Right.
&gt;&gt; YAP: So, instead of having a widget instance

00:56:30.400 --> 00:56:35.790
per cell or per UI component within a cell,
you have one object instance that's the flyweight

00:56:35.790 --> 00:56:41.971
that knows how to render a cell and then when
the backing table tries to render a cell,

00:56:41.971 --> 00:56:45.440
it just gives the flyweight the data it needs
to render itself.

00:56:45.440 --> 00:56:47.070
&gt;&gt; Okay.
&gt;&gt; YAP: One object versus...

00:56:47.070 --> 00:56:51.080
&gt;&gt; RYAN: One of the most of--one of the coolest
lessons I got from that was when you change

00:56:51.080 --> 00:56:54.150
something in that table; rather than trying
to be surgical and just update that little

00:56:54.150 --> 00:56:55.150
bit of the table...
&gt;&gt; Right.

00:56:55.150 --> 00:56:59.050
&gt;&gt; RYAN: ...it's often faster to just go ahead
and recreate the entire inner HTML string

00:56:59.050 --> 00:57:02.470
of the whole table and blast it on there,
like the demo they gave where they're typing

00:57:02.470 --> 00:57:07.050
keystroke by keystroke and highlighting cells,
the whole table is being repainted each time.

00:57:07.050 --> 00:57:09.300
&gt;&gt; Okay.
&gt;&gt; RYAN: And that's faster; isn't that silly?

00:57:09.300 --> 00:57:10.300
&gt;&gt; Okay.
&gt;&gt; RAMSDALE: So, actually, they've cut us

00:57:10.300 --> 00:57:14.500
off. We're actually out of time. But if you
got--you said you had one more question. If

00:57:14.500 --> 00:57:16.820
it's quick, you can...
&gt;&gt; Yes, it's a really quick one. You guys

00:57:16.820 --> 00:57:20.980
are from Atlanta and I'm at Atlanta. I didn't
know if you have a meet-up where you all meet

00:57:20.980 --> 00:57:22.080
up?
&gt;&gt; RAMSDALE: Oh, we actually meet...

00:57:22.080 --> 00:57:26.000
&gt;&gt; I mean, because I would love to kind a
sit down once I get back to Atlanta because,

00:57:26.000 --> 00:57:29.130
I mean, I have a lot of questions but they
don't, you know, I would love to kind a sit

00:57:29.130 --> 00:57:32.080
down and if you guys met up like once a month
or something like that, you know...

00:57:32.080 --> 00:57:39.480
&gt;&gt; RYAN: We'll drink a lot so just hang on...
&gt;&gt; RAMSDALE: Well, no, Ray and Amit and Bob

00:57:39.480 --> 00:57:43.670
don't--the rest of us do work in Atlanta and
we actually--so we're trying to get a--or

00:57:43.670 --> 00:57:46.570
not even trying; we're actually doing this.
It has pretty been successful. We're getting

00:57:46.570 --> 00:57:49.561
a GTUG meet-up in the Google office once a
month.

00:57:49.561 --> 00:57:51.720
&gt;&gt; Okay.
&gt;&gt; RAMSDALE: Which would have been about right

00:57:51.720 --> 00:57:56.270
now but we're obviously we're all here having
fun. So, look for GTUG-Atlanta. There's a

00:57:56.270 --> 00:58:00.320
group that Charlie Collins has started up.
And the next meeting would be at the end of

00:58:00.320 --> 00:58:05.550
June. And there's developers from the Atlanta
area plus Googlers that come and hang out.

00:58:05.550 --> 00:58:07.720
There has only been two; so if you haven't
heard about that, that's probably why.

00:58:07.720 --> 00:58:09.760
&gt;&gt; Okay.
&gt;&gt; RAMSDALE: But look for GTUG Atlanta.

00:58:09.760 --> 00:58:12.500
&gt;&gt; I can just Google GTUG Atlanta and it will...
&gt;&gt; RAMSDALE: Yeah.

00:58:12.500 --> 00:58:13.600
&gt;&gt; Okay.
&gt;&gt; RAMSDALE: Yup. And there's a mailing list

00:58:13.600 --> 00:58:15.920
on top on it and you'll be notified when we
have the next meet-up and please come out.

00:58:15.920 --> 00:58:18.900
&gt;&gt; Thank you.
&gt;&gt; RAMSDALE: Yeah, thanks a lot. I appreciate

00:58:18.900 --> 00:58:21.940
you for coming out. Everybody, have fun and
let's enjoy standing on the long line for

00:58:21.940 --> 00:58:22.180
lunch.

