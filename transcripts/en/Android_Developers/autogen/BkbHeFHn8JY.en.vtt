WEBVTT
Kind: captions
Language: en

00:00:02.331 --> 00:00:05.079
 In a quest for developers to remove memory leaks from their application 

00:00:05.111 --> 00:00:08.556
 It tends to focus most energy on the most influential issues 

00:00:08.730 --> 00:00:14.296
 However, one of the most frightening leaks often remains in the base of their non-observable code 

00:00:14.352 --> 00:00:16.420
 My name is Colt McCannless, and one of the worst things 

00:00:16.420 --> 00:00:19.873
 That can cause a leak in your Android application is the View object 

00:00:20.011 --> 00:00:22.382
 For the most part, the views are simple small tools 

00:00:22.396 --> 00:00:24.576
 Help us update your screen and display information 

00:00:24.597 --> 00:00:27.480
 We generally do not think of them as a potential memory drain 

00:00:27.480 --> 00:00:29.300
 Which I mean is true 

00:00:29.300 --> 00:00:31.495
 The views themselves are not a leak problem much 

00:00:31.660 --> 00:00:35.175
 Instead, it is what it refers to is what can cause a terrible leak situation 

00:00:35.371 --> 00:00:39.309
 Remember that the Android garbage collection system can only recover objects 

00:00:39.388 --> 00:00:42.332
 Which are no longer referred to by anything else within memory 

00:00:42.372 --> 00:00:45.102
 Leaking is an object that is no longer needed 

00:00:45.150 --> 00:00:47.576
 But there is still a reference to it somewhere in the system 

00:00:47.790 --> 00:00:51.549
 This problem can follow when this object is pointing to other objects 

00:00:51.596 --> 00:00:53.889
 These organisms refer to other objects 

00:00:54.112 --> 00:00:56.570
 None of them can be removed in the entire chain of memory 

00:00:56.570 --> 00:00:59.327
 Because of the existing references from that root leakage 

00:00:59.590 --> 00:01:00.621
 So this is the problem 

00:01:00.782 --> 00:01:04.402
 Views have a reference to the activity they created 

00:01:04.410 --> 00:01:05.738
 Activities in turn also 

00:01:05.897 --> 00:01:08.855
 Tend to refer to many internal objects and other memory elements 

00:01:09.070 --> 00:01:11.386
 Therefore, the leak of the View object is a big problem 

00:01:11.530 --> 00:01:14.235
 When a view causes a leak, the activity also refers to it 

00:01:14.236 --> 00:01:15.690
 All other relevant data are included 

00:01:15.690 --> 00:01:18.293
 Mainly, the whole activity stays in memory 

00:01:18.294 --> 00:01:21.093
 Which can be a big problem in some cases 

00:01:21.132 --> 00:01:23.882
 For example, when users turn their devices 

00:01:24.050 --> 00:01:28.090
 An order change will be created, causing the current activity to be destroyed 

00:01:28.090 --> 00:01:30.677
 A new copy is loaded in memory 

00:01:30.970 --> 00:01:33.110
 But if a view is leaked from the first activity 

00:01:33.110 --> 00:01:35.790
 The original activity can not be cleaned now 

00:01:35.791 --> 00:01:38.385
 Therefore, it will only exist and consume memory 

00:01:38.409 --> 00:01:40.696
 Which should be given to this new activity instead 

00:01:40.879 --> 00:01:44.170
 Now, imagine if this happened and the user recycled his screen again 

00:01:44.170 --> 00:01:47.885
 You will now suddenly get three separate cases of activity in memory 

00:01:48.020 --> 00:01:49.428
 All of them are fighting for space 

00:01:50.001 --> 00:01:55.888
 Therefore avoiding the leakage of View Objects should be a top priority for your memory management policy 

00:01:56.000 --> 00:01:59.212
 To achieve this goal, here are some simple models that should be noticed 

00:01:59.458 --> 00:02:03.304
 Number one, does not indicate views within concurrent inverse calls 

00:02:03.347 --> 00:02:08.030
 This synchronized event may take place at some stage in the future where things are not perfect 

00:02:08.030 --> 00:02:09.321
 I mean, in one case 

00:02:09.417 --> 00:02:12.107
 This activity may be terminated before the reverse call is launched 

00:02:12.510 --> 00:02:15.131
 But this offer will be retained in the activity as such 

00:02:15.132 --> 00:02:19.059
 Until the asynchronous function is completed and you edit its reference to the view 

00:02:19.200 --> 00:02:25.273
 In a worse situation, your reverse call may be executed after the View object has already been destroyed correctly 

00:02:25.383 --> 00:02:29.355
 Thus removing the reference for an invalid object and causing your application to be disabled 

00:02:29.520 --> 00:02:31.610
 Is not really important for performance 

00:02:31.610 --> 00:02:35.458
 But you know that frequent crashes tend to appear poorly for users 

00:02:35.810 --> 00:02:39.543
 However, secondly, do not refer to views of static objects 

00:02:39.639 --> 00:02:41.644
 The issue here is that static objects still exist 

00:02:41.674 --> 00:02:45.518
 Throughout the entire process that occupies your application 

00:02:45.550 --> 00:02:51.625
 By the way, it is not the same age as the activity that declares the living object 

00:02:51.890 --> 00:02:55.590
 As such, the existence of a static object indicates a view 

00:02:55.590 --> 00:02:57.790
 Can cause problems when the activity is destroyed, 

00:02:57.790 --> 00:02:59.660
 Let's say during a change of order 

00:02:59.660 --> 00:03:02.590
 Because the view is still indicated by a static object 

00:03:02.590 --> 00:03:06.220
 The still object then naturally refers to the activity as well 

00:03:06.220 --> 00:03:08.684
 The view or activity will never be cleaned at any time 

00:03:08.685 --> 00:03:10.276
 Because of the age of that object 

00:03:10.680 --> 00:03:16.607
 Third, avoid putting views in groups that do not have memory cleaning patterns 

00:03:17.000 --> 00:03:21.633
 For example, using a weak HashMap object to store views as values 

00:03:21.850 --> 00:03:25.610
 The weak HashMaps stores the views as difficult references 

00:03:25.610 --> 00:03:29.016
 You can eventually reach a bad spot at any time by doing something by destroying those views 

00:03:29.140 --> 00:03:34.629
 This type of weak HashMap behavior has been called HashMap leak 

00:03:35.654 --> 00:03:37.898
 Leak because HashMap is weak ... 

00:03:40.504 --> 00:03:42.770
 Now, if you wonder where your memory is going 

00:03:42.770 --> 00:03:46.860
 Be sure to check out the Customization Tracker tool within the Android Studio 

00:03:46.860 --> 00:03:50.117
 If you see content from an activity that should not exist 

00:03:50.235 --> 00:03:52.690
 You may need to take a hard look at your code 

00:03:52.842 --> 00:03:56.825
 A strict scan of your code is all about what Android is doing 

00:03:56.855 --> 00:04:00.047
 That's why you need to check out the rest of Android's performance patterns 

00:04:00.090 --> 00:04:03.644
 Check out the Google+ community for other great tips 

00:04:03.842 --> 00:04:07.280
 So keep calm, write your code, and always remember, performance is important. 

