WEBVTT
Kind: captions
Language: en

00:00:07.490 --> 00:00:10.070
hi my name is Rotem aya I'm the tech

00:00:10.070 --> 00:00:10.080
hi my name is Rotem aya I'm the tech
 

00:00:10.080 --> 00:00:11.600
hi my name is Rotem aya I'm the tech
lead for Google's Android developer

00:00:11.600 --> 00:00:11.610
lead for Google's Android developer
 

00:00:11.610 --> 00:00:13.850
lead for Google's Android developer
relations team in order to minimize the

00:00:13.850 --> 00:00:13.860
relations team in order to minimize the
 

00:00:13.860 --> 00:00:15.230
relations team in order to minimize the
battery drain associated with data

00:00:15.230 --> 00:00:15.240
battery drain associated with data
 

00:00:15.240 --> 00:00:16.910
battery drain associated with data
transfers it's good practice to use the

00:00:16.910 --> 00:00:16.920
transfers it's good practice to use the
 

00:00:16.920 --> 00:00:19.010
transfers it's good practice to use the
big cookie model to batch and bundle

00:00:19.010 --> 00:00:19.020
big cookie model to batch and bundle
 

00:00:19.020 --> 00:00:20.599
big cookie model to batch and bundle
transfers using sync adapters and

00:00:20.599 --> 00:00:20.609
transfers using sync adapters and
 

00:00:20.609 --> 00:00:22.340
transfers using sync adapters and
eliminate unnecessary polling with

00:00:22.340 --> 00:00:22.350
eliminate unnecessary polling with
 

00:00:22.350 --> 00:00:24.769
eliminate unnecessary polling with
Google Cloud messaging having moved all

00:00:24.769 --> 00:00:24.779
Google Cloud messaging having moved all
 

00:00:24.779 --> 00:00:26.630
Google Cloud messaging having moved all
of your transfers into as few batches as

00:00:26.630 --> 00:00:26.640
of your transfers into as few batches as
 

00:00:26.640 --> 00:00:28.279
of your transfers into as few batches as
possible this devbyte will look at ways

00:00:28.279 --> 00:00:28.289
possible this devbyte will look at ways
 

00:00:28.289 --> 00:00:30.380
possible this devbyte will look at ways
to reduce the overall size of the cookie

00:00:30.380 --> 00:00:30.390
to reduce the overall size of the cookie
 

00:00:30.390 --> 00:00:32.510
to reduce the overall size of the cookie
that is to transfer as little data as

00:00:32.510 --> 00:00:32.520
that is to transfer as little data as
 

00:00:32.520 --> 00:00:34.310
that is to transfer as little data as
possible and drain as little battery as

00:00:34.310 --> 00:00:34.320
possible and drain as little battery as
 

00:00:34.320 --> 00:00:36.170
possible and drain as little battery as
possible each time we do have to do a

00:00:36.170 --> 00:00:36.180
possible each time we do have to do a
 

00:00:36.180 --> 00:00:38.660
possible each time we do have to do a
transfer the most fundamental way to

00:00:38.660 --> 00:00:38.670
transfer the most fundamental way to
 

00:00:38.670 --> 00:00:40.490
transfer the most fundamental way to
reduce your downloads is to download

00:00:40.490 --> 00:00:40.500
reduce your downloads is to download
 

00:00:40.500 --> 00:00:43.369
reduce your downloads is to download
only what you need start by using REST

00:00:43.369 --> 00:00:43.379
only what you need start by using REST
 

00:00:43.379 --> 00:00:45.260
only what you need start by using REST
API is that lets you perform filtering

00:00:45.260 --> 00:00:45.270
API is that lets you perform filtering
 

00:00:45.270 --> 00:00:46.850
API is that lets you perform filtering
on the server using parameters that

00:00:46.850 --> 00:00:46.860
on the server using parameters that
 

00:00:46.860 --> 00:00:48.799
on the server using parameters that
allow you to indicate when you last

00:00:48.799 --> 00:00:48.809
allow you to indicate when you last
 

00:00:48.809 --> 00:00:50.779
allow you to indicate when you last
update occurred or what the last items

00:00:50.779 --> 00:00:50.789
update occurred or what the last items
 

00:00:50.789 --> 00:00:53.270
update occurred or what the last items
you received were this ensures that you

00:00:53.270 --> 00:00:53.280
you received were this ensures that you
 

00:00:53.280 --> 00:00:54.950
you received were this ensures that you
only end up downloading new stuff

00:00:54.950 --> 00:00:54.960
only end up downloading new stuff
 

00:00:54.960 --> 00:00:57.139
only end up downloading new stuff
similarly it's good practice to reduce

00:00:57.139 --> 00:00:57.149
similarly it's good practice to reduce
 

00:00:57.149 --> 00:00:58.970
similarly it's good practice to reduce
bandwidth by performing any operations

00:00:58.970 --> 00:00:58.980
bandwidth by performing any operations
 

00:00:58.980 --> 00:01:00.349
bandwidth by performing any operations
likely to shrink the size of your

00:01:00.349 --> 00:01:00.359
likely to shrink the size of your
 

00:01:00.359 --> 00:01:02.990
likely to shrink the size of your
payload on the server techniques like

00:01:02.990 --> 00:01:03.000
payload on the server techniques like
 

00:01:03.000 --> 00:01:04.880
payload on the server techniques like
gzip compression are one solution as

00:01:04.880 --> 00:01:04.890
gzip compression are one solution as
 

00:01:04.890 --> 00:01:06.560
gzip compression are one solution as
this server-side reduction of image

00:01:06.560 --> 00:01:06.570
this server-side reduction of image
 

00:01:06.570 --> 00:01:09.170
this server-side reduction of image
sizes why download a wallpaper own to

00:01:09.170 --> 00:01:09.180
sizes why download a wallpaper own to
 

00:01:09.180 --> 00:01:11.929
sizes why download a wallpaper own to
shrink it into a thumbnail it's also

00:01:11.929 --> 00:01:11.939
shrink it into a thumbnail it's also
 

00:01:11.939 --> 00:01:13.670
shrink it into a thumbnail it's also
generally more efficient to maximize

00:01:13.670 --> 00:01:13.680
generally more efficient to maximize
 

00:01:13.680 --> 00:01:15.499
generally more efficient to maximize
your utilization of network connections

00:01:15.499 --> 00:01:15.509
your utilization of network connections
 

00:01:15.509 --> 00:01:16.760
your utilization of network connections
so rather than creating multiple

00:01:16.760 --> 00:01:16.770
so rather than creating multiple
 

00:01:16.770 --> 00:01:18.440
so rather than creating multiple
simultaneous connections to download

00:01:18.440 --> 00:01:18.450
simultaneous connections to download
 

00:01:18.450 --> 00:01:20.210
simultaneous connections to download
data or chaining multiple consecutive

00:01:20.210 --> 00:01:20.220
data or chaining multiple consecutive
 

00:01:20.220 --> 00:01:21.980
data or chaining multiple consecutive
get requests where possible you should

00:01:21.980 --> 00:01:21.990
get requests where possible you should
 

00:01:21.990 --> 00:01:24.109
get requests where possible you should
bundle these requests into a single gate

00:01:24.109 --> 00:01:24.119
bundle these requests into a single gate
 

00:01:24.119 --> 00:01:26.390
bundle these requests into a single gate
when it comes to cell radio transfers a

00:01:26.390 --> 00:01:26.400
when it comes to cell radio transfers a
 

00:01:26.400 --> 00:01:28.399
when it comes to cell radio transfers a
bazooka is more efficient than a shotgun

00:01:28.399 --> 00:01:28.409
bazooka is more efficient than a shotgun
 

00:01:28.409 --> 00:01:30.890
bazooka is more efficient than a shotgun
it's also best practice to reuse

00:01:30.890 --> 00:01:30.900
it's also best practice to reuse
 

00:01:30.900 --> 00:01:32.690
it's also best practice to reuse
existing network connections rather than

00:01:32.690 --> 00:01:32.700
existing network connections rather than
 

00:01:32.700 --> 00:01:34.730
existing network connections rather than
initiating new ones reusing connections

00:01:34.730 --> 00:01:34.740
initiating new ones reusing connections
 

00:01:34.740 --> 00:01:36.230
initiating new ones reusing connections
also allows the network to more

00:01:36.230 --> 00:01:36.240
also allows the network to more
 

00:01:36.240 --> 00:01:38.090
also allows the network to more
intelligently react to congestion and

00:01:38.090 --> 00:01:38.100
intelligently react to congestion and
 

00:01:38.100 --> 00:01:40.760
intelligently react to congestion and
related network data issues wireless

00:01:40.760 --> 00:01:40.770
related network data issues wireless
 

00:01:40.770 --> 00:01:42.469
related network data issues wireless
radios need to be active to transmit

00:01:42.469 --> 00:01:42.479
radios need to be active to transmit
 

00:01:42.479 --> 00:01:43.819
radios need to be active to transmit
determination and termination

00:01:43.819 --> 00:01:43.829
determination and termination
 

00:01:43.829 --> 00:01:45.440
determination and termination
acknowledgement packets associated with

00:01:45.440 --> 00:01:45.450
acknowledgement packets associated with
 

00:01:45.450 --> 00:01:47.510
acknowledgement packets associated with
server and client timeouts so it's also

00:01:47.510 --> 00:01:47.520
server and client timeouts so it's also
 

00:01:47.520 --> 00:01:49.310
server and client timeouts so it's also
good practice to closer connections when

00:01:49.310 --> 00:01:49.320
good practice to closer connections when
 

00:01:49.320 --> 00:01:51.080
good practice to closer connections when
they aren't in use rather than waiting

00:01:51.080 --> 00:01:51.090
they aren't in use rather than waiting
 

00:01:51.090 --> 00:01:52.580
they aren't in use rather than waiting
for these timeouts to extinguish by

00:01:52.580 --> 00:01:52.590
for these timeouts to extinguish by
 

00:01:52.590 --> 00:01:55.039
for these timeouts to extinguish by
themselves that said closing a

00:01:55.039 --> 00:01:55.049
themselves that said closing a
 

00:01:55.049 --> 00:01:56.630
themselves that said closing a
connection too early can prevent it from

00:01:56.630 --> 00:01:56.640
connection too early can prevent it from
 

00:01:56.640 --> 00:01:58.490
connection too early can prevent it from
being reused which then requires

00:01:58.490 --> 00:01:58.500
being reused which then requires
 

00:01:58.500 --> 00:02:00.230
being reused which then requires
additional overhead for establishing a

00:02:00.230 --> 00:02:00.240
additional overhead for establishing a
 

00:02:00.240 --> 00:02:02.569
additional overhead for establishing a
new connection a useful compromises to

00:02:02.569 --> 00:02:02.579
new connection a useful compromises to
 

00:02:02.579 --> 00:02:04.609
new connection a useful compromises to
not close the connection immediately but

00:02:04.609 --> 00:02:04.619
not close the connection immediately but
 

00:02:04.619 --> 00:02:06.200
not close the connection immediately but
to still close it before the inherent

00:02:06.200 --> 00:02:06.210
to still close it before the inherent
 

00:02:06.210 --> 00:02:08.749
to still close it before the inherent
timeout expires finally cash

00:02:08.749 --> 00:02:08.759
timeout expires finally cash
 

00:02:08.759 --> 00:02:10.999
timeout expires finally cash
aggressively you can maintain a cash

00:02:10.999 --> 00:02:11.009
aggressively you can maintain a cash
 

00:02:11.009 --> 00:02:13.160
aggressively you can maintain a cash
in shared storage within the external

00:02:13.160 --> 00:02:13.170
in shared storage within the external
 

00:02:13.170 --> 00:02:15.170
in shared storage within the external
cache directory or manager smaller cash

00:02:15.170 --> 00:02:15.180
cache directory or manager smaller cash
 

00:02:15.180 --> 00:02:17.449
cache directory or manager smaller cash
in your application sandbox anything

00:02:17.449 --> 00:02:17.459
in your application sandbox anything
 

00:02:17.459 --> 00:02:19.009
in your application sandbox anything
sorting the external cash can be deleted

00:02:19.009 --> 00:02:19.019
sorting the external cash can be deleted
 

00:02:19.019 --> 00:02:20.720
sorting the external cash can be deleted
by the system if it's running low on

00:02:20.720 --> 00:02:20.730
by the system if it's running low on
 

00:02:20.730 --> 00:02:22.280
by the system if it's running low on
space whereas you're responsible for

00:02:22.280 --> 00:02:22.290
space whereas you're responsible for
 

00:02:22.290 --> 00:02:23.869
space whereas you're responsible for
managing the data stored in your

00:02:23.869 --> 00:02:23.879
managing the data stored in your
 

00:02:23.879 --> 00:02:26.509
managing the data stored in your
application cache in a lot of cases you

00:02:26.509 --> 00:02:26.519
application cache in a lot of cases you
 

00:02:26.519 --> 00:02:27.920
application cache in a lot of cases you
can determine when you should perform in

00:02:27.920 --> 00:02:27.930
can determine when you should perform in
 

00:02:27.930 --> 00:02:29.899
can determine when you should perform in
yuan perform your next update by

00:02:29.899 --> 00:02:29.909
yuan perform your next update by
 

00:02:29.909 --> 00:02:31.789
yuan perform your next update by
inspecting the HTTP response headers of

00:02:31.789 --> 00:02:31.799
inspecting the HTTP response headers of
 

00:02:31.799 --> 00:02:33.500
inspecting the HTTP response headers of
your downloads this is particularly

00:02:33.500 --> 00:02:33.510
your downloads this is particularly
 

00:02:33.510 --> 00:02:35.960
your downloads this is particularly
useful for static for static or almost

00:02:35.960 --> 00:02:35.970
useful for static for static or almost
 

00:02:35.970 --> 00:02:38.539
useful for static for static or almost
static resources like images looking at

00:02:38.539 --> 00:02:38.549
static resources like images looking at
 

00:02:38.549 --> 00:02:39.710
static resources like images looking at
the header response you can determine

00:02:39.710 --> 00:02:39.720
the header response you can determine
 

00:02:39.720 --> 00:02:41.630
the header response you can determine
the time the downloaded data was changed

00:02:41.630 --> 00:02:41.640
the time the downloaded data was changed
 

00:02:41.640 --> 00:02:43.460
the time the downloaded data was changed
and when it will expire allowing you to

00:02:43.460 --> 00:02:43.470
and when it will expire allowing you to
 

00:02:43.470 --> 00:02:44.960
and when it will expire allowing you to
schedule your cache refreshes

00:02:44.960 --> 00:02:44.970
schedule your cache refreshes
 

00:02:44.970 --> 00:02:47.750
schedule your cache refreshes
accordingly to make your life easier

00:02:47.750 --> 00:02:47.760
accordingly to make your life easier
 

00:02:47.760 --> 00:02:50.839
accordingly to make your life easier
android 4.0 deuced a HTTP response cash

00:02:50.839 --> 00:02:50.849
android 4.0 deuced a HTTP response cash
 

00:02:50.849 --> 00:02:53.599
android 4.0 deuced a HTTP response cash
to the HTTP URL connection class that

00:02:53.599 --> 00:02:53.609
to the HTTP URL connection class that
 

00:02:53.609 --> 00:02:56.030
to the HTTP URL connection class that
handles this caching for you inspecting

00:02:56.030 --> 00:02:56.040
handles this caching for you inspecting
 

00:02:56.040 --> 00:02:57.920
handles this caching for you inspecting
headers and contacting the server only

00:02:57.920 --> 00:02:57.930
headers and contacting the server only
 

00:02:57.930 --> 00:02:59.330
headers and contacting the server only
when the cache has expired or data

00:02:59.330 --> 00:02:59.340
when the cache has expired or data
 

00:02:59.340 --> 00:03:01.849
when the cache has expired or data
doesn't exist locally throughout the

00:03:01.849 --> 00:03:01.859
doesn't exist locally throughout the
 

00:03:01.859 --> 00:03:03.559
doesn't exist locally throughout the
series of lights on efficient data

00:03:03.559 --> 00:03:03.569
series of lights on efficient data
 

00:03:03.569 --> 00:03:05.390
series of lights on efficient data
transfers we've explored how the cell

00:03:05.390 --> 00:03:05.400
transfers we've explored how the cell
 

00:03:05.400 --> 00:03:07.309
transfers we've explored how the cell
radio works and how the state machine

00:03:07.309 --> 00:03:07.319
radio works and how the state machine
 

00:03:07.319 --> 00:03:09.080
radio works and how the state machine
can affect the battery efficiency of

00:03:09.080 --> 00:03:09.090
can affect the battery efficiency of
 

00:03:09.090 --> 00:03:11.270
can affect the battery efficiency of
your apps and with that knowledge you

00:03:11.270 --> 00:03:11.280
your apps and with that knowledge you
 

00:03:11.280 --> 00:03:12.680
your apps and with that knowledge you
learn to analyze your network traffic

00:03:12.680 --> 00:03:12.690
learn to analyze your network traffic
 

00:03:12.690 --> 00:03:14.210
learn to analyze your network traffic
and use techniques like prefetching

00:03:14.210 --> 00:03:14.220
and use techniques like prefetching
 

00:03:14.220 --> 00:03:16.520
and use techniques like prefetching
batching and bundling supported by sync

00:03:16.520 --> 00:03:16.530
batching and bundling supported by sync
 

00:03:16.530 --> 00:03:18.409
batching and bundling supported by sync
adapters and Google Cloud messaging to

00:03:18.409 --> 00:03:18.419
adapters and Google Cloud messaging to
 

00:03:18.419 --> 00:03:21.949
adapters and Google Cloud messaging to
make your apps more efficient

