WEBVTT
Kind: captions
Language: en

00:00:00.450 --> 00:00:03.778
In the last demo, you can see that increasing tessellation can make lighting

00:00:03.778 --> 00:00:07.682
computations look better. However, if you turn up the shininess, you can still

00:00:07.682 --> 00:00:11.388
pick up problems. Also, along the edges of the sphere the density of the

00:00:11.388 --> 00:00:15.272
triangles is much higher than the middle. If we keep increasing the sphere's

00:00:15.272 --> 00:00:19.216
tessellation, we'll be making a huge number of triangles along the fringe, which

00:00:19.216 --> 00:00:23.318
will cost us computation time without adding much to the final image. Ideally,

00:00:23.318 --> 00:00:27.724
what we'd like to evaluate is the reflection model each pixel. This is an

00:00:27.724 --> 00:00:31.922
entirely fine solution. Instead of interpolating the RGB values that result from

00:00:31.922 --> 00:00:35.890
computing the effects of lighting, we interpolate anything we need in the

00:00:35.890 --> 00:00:40.550
reflection model. In this case all we need to interpolate is the shading normal.

00:00:40.550 --> 00:00:44.798
What this means on the GPU is that we have the vertex shader, we input the

00:00:44.798 --> 00:00:49.642
position in normal as before. For output, we get the screen position and instead

00:00:49.642 --> 00:00:54.470
of an RGB computed from the reflection equation, we put transformed normal on

00:00:54.470 --> 00:00:59.488
the output. These two normals are the vertex normals, and they're interpolated

00:00:59.488 --> 00:01:03.962
per pixel. This interpolated normal is input to the fragment shader, which then

00:01:03.962 --> 00:01:07.952
evaluates the reflection model and computes the RGB to be displayed. I should

00:01:07.952 --> 00:01:12.672
mention one important point with normal interpolation. The interpolated normals

00:01:12.672 --> 00:01:16.742
will not be normalized. That is, their length will not all be one. As you can

00:01:16.742 --> 00:01:20.774
see in this drawing, the interpolated normals are always a bit shorter when

00:01:20.774 --> 00:01:24.466
interpolation occurs. So, each normal should be normalized before using it in

00:01:24.466 --> 00:01:29.110
the lighting computation. When we interpolate normals and evaluate the

00:01:29.110 --> 00:01:33.380
reflection model at each pixel, this is called per pixel shading or phong

00:01:33.380 --> 00:01:37.703
shading. Confusingly, phong invented two cool things. One is the phong

00:01:37.703 --> 00:01:42.490
reflection model, which gives us a spectral highlight, shiny spot. The other is

00:01:42.490 --> 00:01:46.318
this phong shading, where we interpolate data across the triangle and compute

00:01:46.318 --> 00:01:50.700
the color per pixel. This is compared with Gouraud shading, where the color is

00:01:50.700 --> 00:01:55.344
computed at each vertex and is interpolated between those two. Try running the

00:01:55.344 --> 00:01:59.566
new demo and see how phong shading vastly improves image quality. There's a

00:01:59.566 --> 00:02:03.271
cost, of course, and that then the lighting calculations need to be performed

00:02:03.271 --> 00:02:06.987
much more frequently. But this is often what you need if you want to have a good

00:02:06.987 --> 00:02:08.073
specular highlight.

