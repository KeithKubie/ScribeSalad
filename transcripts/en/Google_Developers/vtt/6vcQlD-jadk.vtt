WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.314
DIMITRI GLAZKOV:
Can you hear me now?

00:00:03.314 --> 00:00:04.280
Wow.

00:00:04.280 --> 00:00:05.720
The power of technology.

00:00:05.720 --> 00:00:07.620
Is the Episode
One the worst one?

00:00:07.620 --> 00:00:09.480
Is that what it is?

00:00:09.480 --> 00:00:12.550
Or I can't remember?

00:00:12.550 --> 00:00:13.754
So everybody had lunch.

00:00:13.754 --> 00:00:15.670
A little bit tired right
so we need to get up.

00:00:15.670 --> 00:00:17.250
No, I'm just kidding.

00:00:17.250 --> 00:00:20.033
Somebody suggested we do
calisthenics and stretch

00:00:20.033 --> 00:00:24.010
and all this stuff, but I'll try
to be energetic for you guys.

00:00:24.010 --> 00:00:26.470
You don't have to.

00:00:26.470 --> 00:00:28.650
So this talk is a
little bit different

00:00:28.650 --> 00:00:31.390
from every typical
web components talk,

00:00:31.390 --> 00:00:34.290
and believe me there's a
few of them out there now.

00:00:34.290 --> 00:00:35.080
Just do a search.

00:00:35.080 --> 00:00:40.070
Web components talk, and you
will see a bunch of them.

00:00:40.070 --> 00:00:44.280
Because I'm going to
ask deep questions like,

00:00:44.280 --> 00:00:45.820
why are we here?

00:00:45.820 --> 00:00:46.760
Why you guys here?

00:00:49.390 --> 00:00:50.870
I really have no clue.

00:00:50.870 --> 00:00:54.260
But why are we doing
what we're doing, right?

00:00:54.260 --> 00:00:56.040
Why do we do things that we do?

00:00:56.040 --> 00:01:01.040
Well, I'm doing because I
want to make a bunch of money

00:01:01.040 --> 00:01:02.780
and retire in Swiss Alps.

00:01:02.780 --> 00:01:06.350
Is that why we're doing this?

00:01:06.350 --> 00:01:07.010
Sounds good?

00:01:07.010 --> 00:01:08.000
Reasonable?

00:01:08.000 --> 00:01:09.680
Maybe write a little
science fiction.

00:01:09.680 --> 00:01:12.930
Space Opera type stuff.

00:01:12.930 --> 00:01:15.609
No, the reason why
we do these things

00:01:15.609 --> 00:01:17.150
is because we want
to solve problems.

00:01:17.150 --> 00:01:18.340
We want to help users.

00:01:18.340 --> 00:01:20.510
We want to make it easier.

00:01:20.510 --> 00:01:22.270
Make life better.

00:01:22.270 --> 00:01:23.750
Change the world,
some of us say.

00:01:23.750 --> 00:01:25.900
Some of us say, I can't
do the whole world,

00:01:25.900 --> 00:01:28.320
but I'll change a
little bit of it.

00:01:28.320 --> 00:01:35.170
And so about five years
ago now, I basically

00:01:35.170 --> 00:01:38.980
was a young web developer who
just joined the Chrome team

00:01:38.980 --> 00:01:41.692
and I was really getting into
this whole web development

00:01:41.692 --> 00:01:43.400
and browser development
thing I was like,

00:01:43.400 --> 00:01:44.890
oh my god, I have superpowers.

00:01:44.890 --> 00:01:46.280
I can change the browser.

00:01:46.280 --> 00:01:48.480
It was awesome.

00:01:48.480 --> 00:01:50.432
And so I started
looking around and I

00:01:50.432 --> 00:01:51.640
realized something important.

00:01:51.640 --> 00:01:57.210
That great platforms
have one framework.

00:01:57.210 --> 00:02:00.100
Terrible platforms have none.

00:02:00.100 --> 00:02:04.430
And web platform has a bunch.

00:02:04.430 --> 00:02:05.960
And the reason why
we have so many

00:02:05.960 --> 00:02:08.430
is because all these
frameworks are really

00:02:08.430 --> 00:02:10.660
made by pissed off people.

00:02:10.660 --> 00:02:13.560
People don't make frameworks
because they are happy,

00:02:13.560 --> 00:02:15.700
like oh my god, I
have extra time.

00:02:15.700 --> 00:02:18.270
I'm going to go and build
another web framework.

00:02:18.270 --> 00:02:20.742
People build frameworks
because they're sad and upset

00:02:20.742 --> 00:02:22.700
and this thing does not
work, and they're like,

00:02:22.700 --> 00:02:25.420
OK I'm going to not do
this again over and over.

00:02:25.420 --> 00:02:27.930
I'm going to codify this
into something and hey,

00:02:27.930 --> 00:02:30.260
maybe some other person
will benefit from it.

00:02:30.260 --> 00:02:31.980
Changing the world
type thing, right?

00:02:31.980 --> 00:02:34.200
Are you guys with me?

00:02:34.200 --> 00:02:39.590
So really, with this
goal, I said, OK,

00:02:39.590 --> 00:02:41.960
so if this frameworks
are all cries for help,

00:02:41.960 --> 00:02:44.090
what kind of help do they need?

00:02:44.090 --> 00:02:48.450
And this really was the venture
that began back then and ended

00:02:48.450 --> 00:02:50.940
up being the thing
called Web Components.

00:02:50.940 --> 00:02:54.500
And Web Components really is
about solving several problems,

00:02:54.500 --> 00:02:57.230
and I'm going to try to
go through them with you

00:02:57.230 --> 00:03:00.690
and this is just tip of the
iceberg, but I have 30 minutes.

00:03:00.690 --> 00:03:07.140
I can probably talk about
this for days, and I won't.

00:03:07.140 --> 00:03:08.780
I have 30 minutes.

00:03:08.780 --> 00:03:13.210
And so one of the first
problems that I've encountered,

00:03:13.210 --> 00:03:15.570
and something that
people do all the time,

00:03:15.570 --> 00:03:18.800
is that composing
things is hard.

00:03:18.800 --> 00:03:21.170
Composition is like
the foundational thing

00:03:21.170 --> 00:03:22.890
of software engineering, right?

00:03:22.890 --> 00:03:27.650
You have a bunch of people
working on software.

00:03:27.650 --> 00:03:30.900
Your team consists of more
than one person sometimes,

00:03:30.900 --> 00:03:33.670
and you're all working
on achieving success

00:03:33.670 --> 00:03:35.670
and then things have to
come together and ship.

00:03:35.670 --> 00:03:38.320
And then it's like, success
turns into not success,

00:03:38.320 --> 00:03:40.170
because nothing fits.

00:03:40.170 --> 00:03:42.690
And so composing things
is generally really hard

00:03:42.690 --> 00:03:45.410
and then web platform
is special in the web.

00:03:45.410 --> 00:03:47.860
We've always done this
really weird thing

00:03:47.860 --> 00:03:50.910
where we-- it's a very
common pattern I'm

00:03:50.910 --> 00:03:52.480
going to call it
render and decorate

00:03:52.480 --> 00:03:54.580
but you probably
have your own name.

00:03:54.580 --> 00:03:58.060
And that is the idea that
instead of keeping everything

00:03:58.060 --> 00:04:01.900
in one large DOM tree,
you separate things out

00:04:01.900 --> 00:04:04.380
and you bring them
into smaller chunks.

00:04:04.380 --> 00:04:06.560
And you make those
chunks separate

00:04:06.560 --> 00:04:08.890
and you keep them aside.

00:04:08.890 --> 00:04:12.790
And so, for example, imagine
there's a very large DOM

00:04:12.790 --> 00:04:13.290
tree there.

00:04:13.290 --> 00:04:15.180
I'm not going to bore
you with details.

00:04:15.180 --> 00:04:18.320
Just go into Gmail and open
Inspector and look at it

00:04:18.320 --> 00:04:20.140
and you'll see it right there.

00:04:20.140 --> 00:04:22.660
And so render and
decorate goes like this.

00:04:22.660 --> 00:04:24.860
Instead of my actual
widget on the page,

00:04:24.860 --> 00:04:28.550
I'm going to put a little
 there as a marker.

00:04:28.550 --> 00:04:31.640
And then later when it's time
for me to inflate this marker

00:04:31.640 --> 00:04:34.310
I'm going to do a
magic incantation.

00:04:34.310 --> 00:04:37.000
We call it applying senses.

00:04:37.000 --> 00:04:39.490
And then we're going
to query Selector.

00:04:39.490 --> 00:04:41.760
By the way, if you guys
don't know JavaScript

00:04:41.760 --> 00:04:44.252
and can't follow me
along, I apologize,

00:04:44.252 --> 00:04:45.960
you probably are in
the wrong conference.

00:04:50.210 --> 00:04:53.700
But, you know, nevertheless
that's all I have.

00:04:53.700 --> 00:04:55.910
And then you just,
you do something

00:04:55.910 --> 00:04:57.690
like you create a template.

00:04:57.690 --> 00:04:59.270
You create a widget
template there.

00:04:59.270 --> 00:05:01.540
You put stuff in it,
and you blow it up

00:05:01.540 --> 00:05:04.460
and everything looks
wonderful, right?

00:05:04.460 --> 00:05:07.000
Except, what is the problem?

00:05:07.000 --> 00:05:09.940
When you go back
into the Inspector,

00:05:09.940 --> 00:05:19.026
and you look at the--
Turns out, well,

00:05:19.026 --> 00:05:20.400
when you look into
the tree, it's

00:05:20.400 --> 00:05:24.050
all back together into
one big tree, right?

00:05:24.050 --> 00:05:26.410
So now you can no longer
think of these widgets

00:05:26.410 --> 00:05:28.830
as separate things,
you're thinking of them

00:05:28.830 --> 00:05:32.200
as one large, big DOM
tree in the document.

00:05:32.200 --> 00:05:36.390
And so to solve this
problem, we came up

00:05:36.390 --> 00:05:39.650
with this thing
called Shadow DOM.

00:05:39.650 --> 00:05:44.860
And Shadow DOM allows us to
add one line to this code.

00:05:44.860 --> 00:05:46.070
Just one line right here.

00:05:49.940 --> 00:05:52.900
But what this line does--
you guys can see it?

00:05:52.900 --> 00:05:54.460
You guys with me?

00:05:54.460 --> 00:05:56.920
Is it now keeps
all of this tree,

00:05:56.920 --> 00:06:01.870
right here in this thing as
a separate little subtree.

00:06:01.870 --> 00:06:03.440
So now I can still
move it around,

00:06:03.440 --> 00:06:05.550
I can still reason
about it by itself,

00:06:05.550 --> 00:06:09.030
it's no longer a part
of a larger whole,

00:06:09.030 --> 00:06:12.530
but at the same time it renders
as the same widget there,

00:06:12.530 --> 00:06:13.770
right?

00:06:13.770 --> 00:06:15.270
You guys with me?

00:06:15.270 --> 00:06:19.610
So what we did is-- it actually
solves the DOM composition.

00:06:19.610 --> 00:06:24.220
So developers out in the field
or working as a team no longer

00:06:24.220 --> 00:06:28.270
need to worry about a large
DOM tree as the final result.

00:06:28.270 --> 00:06:30.280
They can still think
of all these pieces

00:06:30.280 --> 00:06:33.680
as separate little chunks
of code and chunks of trees

00:06:33.680 --> 00:06:36.200
and then compose
them together as one

00:06:36.200 --> 00:06:40.180
big, large, beautiful
document or an app

00:06:40.180 --> 00:06:43.700
or whatever you guys
decide to build next.

00:06:43.700 --> 00:06:45.300
Are you guys with me?

00:06:45.300 --> 00:06:46.750
Yes?

00:06:46.750 --> 00:06:47.990
Right.

00:06:47.990 --> 00:06:53.870
Well, right after this we
ran into this next problem

00:06:53.870 --> 00:06:57.760
that is a little bit
more interesting.

00:06:57.760 --> 00:07:03.140
And actually we've gotten so
Stockholm Syndromed into it.

00:07:03.140 --> 00:07:05.550
We'd go like, no it's
OK, it's not a big deal

00:07:05.550 --> 00:07:07.450
let's-- we're all right.

00:07:07.450 --> 00:07:11.130
And that problem is called CSS.

00:07:11.130 --> 00:07:12.070
All right.

00:07:12.070 --> 00:07:16.937
There was this Comment Lander
thing on Google+ or Twitter

00:07:16.937 --> 00:07:18.520
that you guys have
seen probably seen.

00:07:18.520 --> 00:07:21.220
We can land the
thing on the comment

00:07:21.220 --> 00:07:24.590
but can't position
the box on CSS.

00:07:28.220 --> 00:07:32.490
And really the biggest,
beautiful problem with CSS

00:07:32.490 --> 00:07:35.110
is that CSS is a wonderful
bit of machinery that

00:07:35.110 --> 00:07:39.640
allows us to separate concerns
of style and presentation

00:07:39.640 --> 00:07:42.110
from the concerns of structure.

00:07:42.110 --> 00:07:44.710
But it's also an all
or nothing thing.

00:07:44.710 --> 00:07:53.000
So for a larger web app,
this becomes a really weird,

00:07:53.000 --> 00:07:54.960
spooky action at
a distance thing,

00:07:54.960 --> 00:07:57.230
where you have to
basically say, hey,

00:07:57.230 --> 00:08:00.780
I actually have 1,000 widgets
in my dock or in my app,

00:08:00.780 --> 00:08:04.320
but all of them ultimately
feed from one stylesheet

00:08:04.320 --> 00:08:06.070
and it's somewhere
there, and actually I'm

00:08:06.070 --> 00:08:07.986
going to pretend they're
multiple stylesheets,

00:08:07.986 --> 00:08:10.050
but no, they're still
one style sheet.

00:08:10.050 --> 00:08:14.820
So once you change a thing it
becomes this weird thing like,

00:08:14.820 --> 00:08:16.120
am I going to break anything?

00:08:16.120 --> 00:08:16.930
I don't know.

00:08:16.930 --> 00:08:20.140
If I did, what am
I going to do now?

00:08:20.140 --> 00:08:23.730
And so, here's a simple
illustration of the problem.

00:08:23.730 --> 00:08:25.900
I'm just going to take
this thing and say,

00:08:25.900 --> 00:08:29.580
hey, I'm just going to add
this little  down below

00:08:29.580 --> 00:08:32.299
over there, and I
want it to be red.

00:08:32.299 --> 00:08:33.760
And it's very simple.

00:08:33.760 --> 00:08:38.090
You have top here, I have 
here, and so all I need to do

00:08:38.090 --> 00:08:43.770
is put this simple Selector
there.  top  .

00:08:43.770 --> 00:08:45.280
D'oh!

00:08:45.280 --> 00:08:47.450
Because of the
render and decorate

00:08:47.450 --> 00:08:51.720
that comes after the fact,
that is not visible on my tree

00:08:51.720 --> 00:08:55.690
right there, the widget
title is also red.

00:08:55.690 --> 00:08:58.390
And that's where the wonderful
bang important comes in, right?

00:08:58.390 --> 00:09:00.190
You go like, OK, specificity.

00:09:00.190 --> 00:09:05.220
And we need to remember
the numbers zero, one, ten.

00:09:05.220 --> 00:09:09.820
Anybody can rattle off the bat
what the specificity rules are?

00:09:09.820 --> 00:09:12.100
That's OK.

00:09:12.100 --> 00:09:13.189
It's all right.

00:09:13.189 --> 00:09:14.980
Because we can actually
solve this for you.

00:09:14.980 --> 00:09:18.360
And we did this with
the Web Components

00:09:18.360 --> 00:09:20.950
with the same line of code.

00:09:20.950 --> 00:09:25.440
It's the same line of
code that we had before.

00:09:25.440 --> 00:09:31.510
And the beautiful part here
is that CSS is scoped inside

00:09:31.510 --> 00:09:33.790
of the shadow tree.

00:09:33.790 --> 00:09:35.940
So whatever you write
inside of the tree,

00:09:35.940 --> 00:09:38.050
CSS is encapsulated
inside of it.

00:09:38.050 --> 00:09:41.090
So nothing leaks in,
nothing leaks out.

00:09:41.090 --> 00:09:44.350
You don't have to start
reasoning about global things

00:09:44.350 --> 00:09:46.767
and how the global stylesheet
applies to this widget

00:09:46.767 --> 00:09:48.850
because all those things
are completely separated.

00:09:48.850 --> 00:09:52.900
As you can see, the
widget is no longer red.

00:09:52.900 --> 00:09:54.750
The widget title.

00:09:54.750 --> 00:09:56.160
Awesome?

00:09:56.160 --> 00:09:57.370
Yes.

00:09:57.370 --> 00:09:59.040
Yes.

00:09:59.040 --> 00:10:01.820
And trust me, when you start
building with Shadow DOM,

00:10:01.820 --> 00:10:06.320
one of the amazing thing happens
is your Selectors get simple.

00:10:06.320 --> 00:10:09.090
You no longer write
this really weird train,

00:10:09.090 --> 00:10:10.530
wacky train of wagons.

00:10:10.530 --> 00:10:17.410
That's like, + 
(dot) pound foo pound foo

00:10:17.410 --> 00:10:20.390
And it's like, no, everything
is just pound foo or pound blah

00:10:20.390 --> 00:10:22.260
and  dot whatever.

00:10:22.260 --> 00:10:24.480
And it's very simple
because you no longer

00:10:24.480 --> 00:10:28.230
think in the global document,
the global app sense.

00:10:28.230 --> 00:10:30.380
You no longer have to worry,
oh will the next state

00:10:30.380 --> 00:10:33.540
change affect what I've just
done with the stylesheet?

00:10:33.540 --> 00:10:37.240
You basically think
about it as hey,

00:10:37.240 --> 00:10:39.630
I'm working inside of my widget.

00:10:39.630 --> 00:10:41.580
And that's all I
need to worry about.

00:10:41.580 --> 00:10:47.400
And I'm OK, and nobody's going
to mess my stuff up, right?

00:10:47.400 --> 00:10:52.550
So we solved-- don't do that.

00:10:52.550 --> 00:10:54.520
We solved two problems.

00:10:54.520 --> 00:10:56.330
There are still a bunch
of them remaining.

00:10:56.330 --> 00:10:59.330
Let's go ahead and start
solving all of them.

00:10:59.330 --> 00:11:02.670
And the common thing is the
House of Divs that we have.

00:11:02.670 --> 00:11:06.740
Or the Jacob's Ladder or
whatever we call this thing.

00:11:06.740 --> 00:11:08.640
It's like this amazing
thing where we just

00:11:08.640 --> 00:11:13.280
soup up our document with 
    ,

00:11:13.280 --> 00:11:15.750
and sometimes I wish I
could use a button here.

00:11:15.750 --> 00:11:18.400
But because IE or
something, I need

00:11:18.400 --> 00:11:19.900
to use a  for
my button as well

00:11:19.900 --> 00:11:23.330
so everything is a  Yay.

00:11:23.330 --> 00:11:26.100
Well, no, it's OK, right.

00:11:26.100 --> 00:11:27.780
Because like even in
the solution like I

00:11:27.780 --> 00:11:29.560
said like I made it better.

00:11:29.560 --> 00:11:31.020
This is much better.

00:11:31.020 --> 00:11:35.200
I still go, look, this
is  class my widget.

00:11:35.200 --> 00:11:37.180
Why can't I just
call it my widget?

00:11:37.180 --> 00:11:41.500
Why can't I just say,
look, this is my widget.

00:11:41.500 --> 00:11:43.800
This is not 
class my widget.

00:11:43.800 --> 00:11:44.930
This is my widget.

00:11:44.930 --> 00:11:47.010
And turns out, there's
a thing we invented

00:11:47.010 --> 00:11:52.580
called Custom Elements
that allows us to do this.

00:11:52.580 --> 00:11:54.800
And Custom Elements
is really neat.

00:11:54.800 --> 00:12:02.320
It basically says, HTML,
it's been a pleasure,

00:12:02.320 --> 00:12:06.510
but it's time for me to
start saying things the way

00:12:06.510 --> 00:12:07.310
I mean them.

00:12:07.310 --> 00:12:07.810
Right?

00:12:07.810 --> 00:12:09.200
Saying what you mean.

00:12:09.200 --> 00:12:10.670
Alex Russell invented this.

00:12:10.670 --> 00:12:13.600
Alex Russell everybody.

00:12:13.600 --> 00:12:14.440
Say what you mean.

00:12:17.120 --> 00:12:19.180
And the basic idea is this.

00:12:19.180 --> 00:12:20.600
You just declare a new tag.

00:12:20.600 --> 00:12:24.870
You just register a new
tag with the HTML parser.

00:12:24.870 --> 00:12:25.820
You proclaim.

00:12:25.820 --> 00:12:29.864
You suddenly have this power and
say, I'm going to extend HTML.

00:12:29.864 --> 00:12:31.530
I don't have to be
the Inspector editor.

00:12:31.530 --> 00:12:33.480
I don't have to be a
browser implementer.

00:12:33.480 --> 00:12:38.440
I just call this thing called
Document that Register Element.

00:12:38.440 --> 00:12:43.780
Give it my tag name and
provide a prototype.

00:12:43.780 --> 00:12:47.150
And suddenly a bunch
of code falls away.

00:12:47.150 --> 00:12:51.520
No longer I have to do
this Apply Instances thing.

00:12:51.520 --> 00:12:53.880
I don't need to do this anymore.

00:12:53.880 --> 00:12:58.630
Because as the parser
encounters my widget

00:12:58.630 --> 00:13:01.170
it will invoke a thing
called the Creative Callback,

00:13:01.170 --> 00:13:04.460
which is like effectively a
life cycle callback for the HTML

00:13:04.460 --> 00:13:07.660
element and it will
run this code for me.

00:13:07.660 --> 00:13:11.116
So effectively what I'm
saying, hey, HTML parser,

00:13:11.116 --> 00:13:13.490
do something useful for a
change instead of just spitting

00:13:13.490 --> 00:13:14.950
out stuff and objects.

00:13:14.950 --> 00:13:16.410
Create my objects for me.

00:13:16.410 --> 00:13:17.980
Instantiate them,
so I don't have

00:13:17.980 --> 00:13:22.010
to come behind and decorate
them with something.

00:13:22.010 --> 00:13:23.620
Create them as they are.

00:13:23.620 --> 00:13:25.750
As they were meant to be.

00:13:25.750 --> 00:13:28.410
And so this allows me
to effectively remove

00:13:28.410 --> 00:13:37.090
the extra calls at the end here
that were present that says,

00:13:37.090 --> 00:13:39.080
Apply Instances thing.

00:13:39.080 --> 00:13:40.520
I don't need to do this anymore.

00:13:40.520 --> 00:13:46.720
It's all now a part of the
Creative Callback of the HTML

00:13:46.720 --> 00:13:47.220
element.

00:13:47.220 --> 00:13:49.080
So now I've invented my own tag.

00:13:49.080 --> 00:13:50.100
I gave it behavior.

00:13:50.100 --> 00:13:52.360
It's not just about
new tags, right?

00:13:52.360 --> 00:13:56.070
It's about making parser do the
work of instantiating things.

00:13:56.070 --> 00:13:58.070
So now is to help
our server that

00:13:58.070 --> 00:14:00.900
runs as fast as it could
possibly go not only just

00:14:00.900 --> 00:14:04.150
spits objects of
predefined shape,

00:14:04.150 --> 00:14:07.280
it can spit out your
objects as well.

00:14:07.280 --> 00:14:09.040
And you can build
entire object trees

00:14:09.040 --> 00:14:11.373
and you will see in a few
minutes about how this happens

00:14:11.373 --> 00:14:13.930
and what kind of magic it
can achieve with this stuff.

00:14:13.930 --> 00:14:16.730
So, yes, awesome, right?

00:14:16.730 --> 00:14:17.280
Custom tags.

00:14:23.200 --> 00:14:28.390
And finally, let's like just
turn this just one more time

00:14:28.390 --> 00:14:31.360
and say, well, this
was really fun,

00:14:31.360 --> 00:14:37.020
but, Dimitri, this still
looks a little wonky.

00:14:37.020 --> 00:14:39.950
You're still doing things that
look somewhat unpalatable.

00:14:39.950 --> 00:14:46.340
Like you're doing things
like creating document object

00:14:46.340 --> 00:14:52.990
tree using JavaScript and
mashing strings together.

00:14:52.990 --> 00:14:55.190
That seems bad.

00:14:55.190 --> 00:14:57.130
Can we fix that?

00:14:57.130 --> 00:15:00.110
And the answer is, I guess
you figured that one out.

00:15:00.110 --> 00:15:02.440
The answer is yes, we can.

00:15:02.440 --> 00:15:04.780
And the way we do that
is with a special thing

00:15:04.780 --> 00:15:07.670
called a template.

00:15:07.670 --> 00:15:11.940
Template is a magical,
magical HTML tag.

00:15:11.940 --> 00:15:14.100
Everybody, after you
leave here, if you've not

00:15:14.100 --> 00:15:15.766
played with a template,
go play with it.

00:15:15.766 --> 00:15:17.120
It's awesome.

00:15:17.120 --> 00:15:19.410
Because what it does is
it gives you nothing.

00:15:23.910 --> 00:15:27.100
Nothing in the bad sense,
but in the good sense.

00:15:27.100 --> 00:15:30.680
Things inside of the
template do nothing.

00:15:30.680 --> 00:15:32.060
They are inert.

00:15:32.060 --> 00:15:36.437
There are the Han Solo thing and
frozen in time or whatever that

00:15:36.437 --> 00:15:38.020
thing-- I can't
remember the compound.

00:15:38.020 --> 00:15:41.540
But it obviously was some
sort of amazing stuff.

00:15:41.540 --> 00:15:47.160
And so once you put a thing in
here inside of this template

00:15:47.160 --> 00:15:50.900
right there, styles
will not apply,

00:15:50.900 --> 00:15:55.540
images won't load, the views
won't play, things are inert.

00:15:55.540 --> 00:15:58.500
They're basically, like,
it's parsed, it's there.

00:15:58.500 --> 00:16:01.310
It's ready to be stamped out.

00:16:01.310 --> 00:16:03.870
But it doesn't do anything.

00:16:03.870 --> 00:16:10.289
And that allows us to instead
of doing this crap right here.

00:16:10.289 --> 00:16:10.830
Look at that.

00:16:10.830 --> 00:16:13.450
That's a lot of code.

00:16:13.450 --> 00:16:14.680
Break it down to this.

00:16:14.680 --> 00:16:17.130
Where we basically say,
hey, widget template,

00:16:17.130 --> 00:16:19.680
all we're doing is just
creating a template.

00:16:19.680 --> 00:16:25.170
Getting it out of the tree
and then stamping it out

00:16:25.170 --> 00:16:27.440
right there.

00:16:27.440 --> 00:16:29.340
Does that make sense?

00:16:29.340 --> 00:16:30.890
Templates are wonderful.

00:16:30.890 --> 00:16:33.730
Not to say that everything
else is wonderful as well,

00:16:33.730 --> 00:16:37.530
but these are pretty
awesome things.

00:16:37.530 --> 00:16:40.170
Still, this looks OK, right?

00:16:40.170 --> 00:16:44.055
Now we have all of our
HTML in HTML space.

00:16:44.055 --> 00:16:47.160
All of our JavaScript
in JavaScript space,

00:16:47.160 --> 00:16:50.300
but, you say,
Dimitri, yes-- I am

00:16:50.300 --> 00:16:53.360
channeling Emeril Lagasse here.

00:16:53.360 --> 00:17:00.150
Dimitri, why are templates
in my document now?

00:17:00.150 --> 00:17:01.500
Can you help me get rid of them?

00:17:01.500 --> 00:17:04.859
Because if this is a
large app won't there

00:17:04.859 --> 00:17:09.430
be like a bunch of templates
hanging around in that thing?

00:17:09.430 --> 00:17:12.430
Wouldn't that be kind of bad
and then this JavaScript seems

00:17:12.430 --> 00:17:15.540
to be like just somewhat
sitting by itself.

00:17:15.540 --> 00:17:17.150
That seems bad, right?

00:17:17.150 --> 00:17:19.030
Well, we can fix that.

00:17:19.030 --> 00:17:23.520
And that's where we came up with
this thing called HTML imports.

00:17:23.520 --> 00:17:26.480
HTML imports.

00:17:26.480 --> 00:17:29.740
HTML imports are
amazing because they

00:17:29.740 --> 00:17:35.670
allow you to create HTML
files-- that you can do what?

00:17:35.670 --> 00:17:37.380
Import.

00:17:37.380 --> 00:17:38.740
That is pretty cool.

00:17:38.740 --> 00:17:43.610
So as you can see here, this
is our template right there,

00:17:43.610 --> 00:17:47.930
and there is our JavaScript
code right there.

00:17:47.930 --> 00:17:56.010
And then, we import it
using this very simple, very

00:17:56.010 --> 00:17:59.920
familiar-looking line that's
called link rel import.

00:17:59.920 --> 00:18:03.180
Instead of stylesheet
you're importing HTML5.

00:18:03.180 --> 00:18:05.070
You're importing,
instead of styles,

00:18:05.070 --> 00:18:06.830
you're importing Markup.

00:18:06.830 --> 00:18:09.860
And so what happens is
now your apps suddenly

00:18:09.860 --> 00:18:13.410
does not have to look
like a bunch of stuff.

00:18:13.410 --> 00:18:15.820
It can be now separated.

00:18:15.820 --> 00:18:19.260
And you can build
Dependency Trees out of it.

00:18:19.260 --> 00:18:22.890
And by the way, link rel
imports, HTML imports,

00:18:22.890 --> 00:18:25.680
provide dependency
management that's very nice.

00:18:25.680 --> 00:18:28.180
So all the duping happens,
so if you include it

00:18:28.180 --> 00:18:33.580
twice in different places you
will only get one instance.

00:18:33.580 --> 00:18:34.540
So it does really well.

00:18:34.540 --> 00:18:36.735
And it also allows
you to start reasoning

00:18:36.735 --> 00:18:43.830
in about larger apps in a much,
much simpler frame of mind.

00:18:43.830 --> 00:18:49.750
So there's our import, and
there's our final result.

00:18:49.750 --> 00:18:50.910
HTML imports, everybody.

00:18:57.020 --> 00:19:02.080
The neat thing is these
building blocks are just

00:19:02.080 --> 00:19:06.020
the beginning of what can
happen and what will happen.

00:19:06.020 --> 00:19:10.060
By giving developers
the power to harness

00:19:10.060 --> 00:19:14.340
HTML5 parser so they can
create their own object trees,

00:19:14.340 --> 00:19:17.340
giving them ability,
giving them-- them?

00:19:17.340 --> 00:19:18.070
You.

00:19:18.070 --> 00:19:22.140
Giving you ability
to scope your styles

00:19:22.140 --> 00:19:27.330
and to compose DOM dynamically
on the fly instead of mashing

00:19:27.330 --> 00:19:34.070
it all together, and by enabling
a reasonable Markup reuse

00:19:34.070 --> 00:19:36.910
scenarios with HTML
imports, you open

00:19:36.910 --> 00:19:38.810
all kinds of possibilities.

00:19:38.810 --> 00:19:41.710
First of all, interoperability.

00:19:41.710 --> 00:19:43.300
This one is really crucial.

00:19:43.300 --> 00:19:46.920
Because every framework
invents this system

00:19:46.920 --> 00:19:49.330
in slightly different and
completely incompatible

00:19:49.330 --> 00:19:51.480
way with another framework.

00:19:51.480 --> 00:19:54.240
They all have to deal
with reuse of elements.

00:19:54.240 --> 00:19:58.860
So widgets from one framework
are not compatible with widgets

00:19:58.860 --> 00:20:02.140
from other framework
because they were invented,

00:20:02.140 --> 00:20:03.760
the composition
model, was invented

00:20:03.760 --> 00:20:05.690
in slightly different way.

00:20:05.690 --> 00:20:09.570
When Dom is your
composition model,

00:20:09.570 --> 00:20:13.960
when elements, when Shadow
Dom is the web standard,

00:20:13.960 --> 00:20:18.730
and custom elements is the
standard way to compose things,

00:20:18.730 --> 00:20:22.420
everybody can now compose in
using the same common lingua

00:20:22.420 --> 00:20:24.610
Franca, which is Web Components.

00:20:24.610 --> 00:20:27.380
So that allows or
enables the path

00:20:27.380 --> 00:20:31.707
to where every framework can
reuse each other's widgets,

00:20:31.707 --> 00:20:33.790
and things and you don't
have to think about which

00:20:33.790 --> 00:20:37.760
one is compatible equation
which one is not it's

00:20:37.760 --> 00:20:40.340
a long road because
there's lots of really

00:20:40.340 --> 00:20:43.480
strong opinions about how
composition should happen.

00:20:43.480 --> 00:20:47.250
A lot of this is again,
laden, with Stockholm syndrome

00:20:47.250 --> 00:20:49.840
and understanding of the world.

00:20:49.840 --> 00:20:52.640
But the path is open.

00:20:52.640 --> 00:20:55.150
It's available now.

00:20:55.150 --> 00:20:58.140
The other thing that
is pretty amazing

00:20:58.140 --> 00:21:03.990
is the fact that now the browser
understands your composition

00:21:03.990 --> 00:21:05.370
model.

00:21:05.370 --> 00:21:07.220
So the rendering
engine can make smarter

00:21:07.220 --> 00:21:12.170
decisions about how to
do things faster for you.

00:21:12.170 --> 00:21:17.270
For example, the Shadow DOM
can be a performance primitive.

00:21:17.270 --> 00:21:22.200
Because instead of reasoning
about invalidating styles

00:21:22.200 --> 00:21:24.940
across the entire document
all the time when your app has

00:21:24.940 --> 00:21:29.350
multiple pages, like a single
page app type of thing,

00:21:29.350 --> 00:21:32.410
you're all confined
to tiny little trees.

00:21:32.410 --> 00:21:36.350
Stock [INAUDIBLE] is much faster
and much more predictable.

00:21:36.350 --> 00:21:38.270
So hitting those 60
frames per second

00:21:38.270 --> 00:21:42.660
becomes a more real
and achievable goal.

00:21:42.660 --> 00:21:45.830
And things like HTML
imports are also

00:21:45.830 --> 00:21:51.500
really cool because parsing,
which HTML turns out,

00:21:51.500 --> 00:21:54.810
many browsers do on
a separate thread.

00:21:54.810 --> 00:21:58.690
So you could potentially start
loading multiple imports,

00:21:58.690 --> 00:22:03.810
and they would be doing all the
work of parsing and tokenizing

00:22:03.810 --> 00:22:11.020
and loading those
imports in parallel.

00:22:11.020 --> 00:22:14.440
And so you could gain
performance benefits just

00:22:14.440 --> 00:22:16.420
from that.

00:22:16.420 --> 00:22:20.530
And the third and pretty
most important thing

00:22:20.530 --> 00:22:24.500
is that all these primitives
are designed in such a way

00:22:24.500 --> 00:22:28.000
that they provide the
developers, especially

00:22:28.000 --> 00:22:32.635
developers of frameworks,
a better framework.

00:22:32.635 --> 00:22:36.870
A better way of thinking
about coordinating actions.

00:22:36.870 --> 00:22:39.890
Instead of arbitrary
points at which

00:22:39.890 --> 00:22:42.670
your components or your
deals become components,

00:22:42.670 --> 00:22:45.790
there's now pretty fine
checkpoints like micro tasks.

00:22:45.790 --> 00:22:49.290
And there is callback cues and
execution of those callback

00:22:49.290 --> 00:22:51.420
cues that is
designed in the spec.

00:22:51.420 --> 00:22:53.920
So you can now reason
about how much work

00:22:53.920 --> 00:22:55.990
do I need to be doing
now, how much more work do

00:22:55.990 --> 00:23:02.030
I need to be doing later,
in scalable fashion.

00:23:02.030 --> 00:23:04.320
And of course it all
results, at least in my mind,

00:23:04.320 --> 00:23:06.739
in really green
circles of awesome.

00:23:06.739 --> 00:23:08.280
I'm not sure why
the circle is green,

00:23:08.280 --> 00:23:12.250
but it's definitely awesome.

00:23:12.250 --> 00:23:13.240
This is about it.

00:23:13.240 --> 00:23:15.770
If you guys want to
ask me a few questions,

00:23:15.770 --> 00:23:17.190
we have six minutes left.

00:23:21.456 --> 00:23:22.404
Yeah?

00:23:22.404 --> 00:23:25.250
AUDIENCE: What's the
status of browser support?

00:23:25.250 --> 00:23:28.210
DIMITRI GLAZKOV: What's the
status of browser support?

00:23:28.210 --> 00:23:34.380
They are available in
Chrome, and they're

00:23:34.380 --> 00:23:38.170
available in the
Opera, obviously.

00:23:38.170 --> 00:23:40.400
No laughing.

00:23:40.400 --> 00:23:45.100
And then Mozilla is
implementing components as well.

00:23:45.100 --> 00:23:48.550
It's right now in
experimental track,

00:23:48.550 --> 00:23:52.040
but I've been talking
to Microsoft folks.

00:23:52.040 --> 00:23:54.020
They're excited
about it as well.

00:23:54.020 --> 00:23:58.070
So hopefully, fingers
crossed, soon.

00:23:58.070 --> 00:24:00.160
There is a thing called
webcomponents.js,

00:24:00.160 --> 00:24:01.620
which is a set of
poly fills that

00:24:01.620 --> 00:24:05.150
allow you to take advantage
of most of this functionality

00:24:05.150 --> 00:24:06.560
across browsers.

00:24:06.560 --> 00:24:10.370
What is this IE 10+?

00:24:10.370 --> 00:24:11.670
So it's pretty awesome.

00:24:14.470 --> 00:24:16.615
But it's definitely a
native implementation

00:24:16.615 --> 00:24:19.990
and it has certain
performance benefits.

00:24:19.990 --> 00:24:20.740
Yes?

00:24:20.740 --> 00:24:21.260
I'm sorry.

00:24:21.260 --> 00:24:21.885
You were first.

00:24:22.828 --> 00:24:26.216
AUDIENCE: Do HTML
imports [INAUDIBLE]

00:24:26.216 --> 00:24:27.668
support name spacing at all?

00:24:27.668 --> 00:24:30.249
So when you use name
space, how does it

00:24:30.249 --> 00:24:32.508
work when it gets pulled in?

00:24:32.508 --> 00:24:34.760
DIMITRI GLAZKOV: Right.

00:24:34.760 --> 00:24:36.985
So HTML imports
and name spacing.

00:24:36.985 --> 00:24:39.110
I have to repeat your
question obviously for people

00:24:39.110 --> 00:24:40.712
out in the internet.

00:24:40.712 --> 00:24:41.670
I hope you're watching.

00:24:44.574 --> 00:24:47.240
I don't even know if this is the
camera, but I'm assuming it is.

00:24:52.580 --> 00:24:55.120
There is no name spacing
for external tags,

00:24:55.120 --> 00:24:59.000
because there's just one HTML5
parser so custom elements will

00:24:59.000 --> 00:25:02.740
be parsed according
to one registry.

00:25:02.740 --> 00:25:04.770
But the notion of
registry exists

00:25:04.770 --> 00:25:08.030
and we can improve
this in the future

00:25:08.030 --> 00:25:10.360
to enable multiple registries.

00:25:10.360 --> 00:25:11.900
So an import can
declare and say,

00:25:11.900 --> 00:25:16.310
I have my own set of elements
that I want to do on my own

00:25:16.310 --> 00:25:18.430
and please don't touch mine.

00:25:18.430 --> 00:25:22.550
I speak my own language.

00:25:22.550 --> 00:25:25.652
As far as how it is imported
into a main document

00:25:25.652 --> 00:25:27.360
it is not important
in the main document.

00:25:27.360 --> 00:25:29.630
So it just as a
separate document.

00:25:29.630 --> 00:25:32.440
An import is a
separate document,

00:25:32.440 --> 00:25:34.590
and the only way
you import data is

00:25:34.590 --> 00:25:36.620
if you run script
inside of it and you

00:25:36.620 --> 00:25:38.670
decide to do something with it.

00:25:38.670 --> 00:25:43.180
So you have to take an
extra step to do that.

00:25:43.180 --> 00:25:44.530
Is-- am I done?

00:25:44.530 --> 00:25:46.540
I'm done.

00:25:46.540 --> 00:25:48.090
[APPLAUSE]

