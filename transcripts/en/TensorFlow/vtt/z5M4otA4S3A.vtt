WEBVTT
Kind: captions
Language: en

00:00:00.565 --> 00:00:02.292
♪ (intro) ♪

00:00:04.185 --> 00:00:06.105
Hi everybody, and welcome to this episode

00:00:06.105 --> 00:00:07.148
of TensorFlow Meets.

00:00:07.148 --> 00:00:10.175
I'm absolutely delighted 
to be chatting with Chris Lattner.

00:00:10.175 --> 00:00:11.877
And Chris, I hear you're the inventor

00:00:11.877 --> 00:00:14.520
of this language 
that everybody's talking about, Swift.

00:00:14.520 --> 00:00:16.760
Yeah, it's something 
I've been working on for some time.

00:00:16.760 --> 00:00:19.018
I guess my background is 
I've been working on compilers

00:00:19.018 --> 00:00:20.585
and tools for quite some time;

00:00:20.585 --> 00:00:22.861
worked on this LLVM compiler for a while.

00:00:23.581 --> 00:00:25.543
Swift is an awesome new language.

00:00:26.163 --> 00:00:30.179
It's got some really cool geeky 
language stuff on the side of it,

00:00:30.179 --> 00:00:33.157
but the thing I love about it,
it's designed to be easy to use.

00:00:33.305 --> 00:00:35.918
Yeah, and that seems to be
a lot of the passion around it,

00:00:35.918 --> 00:00:38.208
is that even for new developers
who are coming in

00:00:38.208 --> 00:00:40.308
that it's all of this easy-to-use stuff.

00:00:40.308 --> 00:00:41.308
Yeah, exactly.

00:00:41.308 --> 00:00:44.756
The real goal here is to bring
usability first and foremost,

00:00:44.756 --> 00:00:47.481
and this takes a lot of hard 
system engineering

00:00:47.481 --> 00:00:50.356
to make things feel easy,

00:00:50.356 --> 00:00:52.438
but it's absolutely worth it

00:00:52.438 --> 00:00:53.949
and it's a great challenge.

00:00:53.949 --> 00:00:57.117
So when it comes to now
using Swift for TensorFlow,

00:00:57.117 --> 00:00:59.258
it seems like...
I've started playing with it

00:00:59.258 --> 00:01:00.665
and kicking the tires a little bit,

00:01:00.665 --> 00:01:03.324
and I saw things like even Keras layers
are pretty straightforward.

00:01:03.324 --> 00:01:05.848
Could you tell us a little bit
about the thinking behind

00:01:05.848 --> 00:01:07.016
how you designed the API?

00:01:07.016 --> 00:01:08.349
Yeah, absolutely.

00:01:08.349 --> 00:01:11.439
So Swift as a language 
has a lot of similarities to Python,

00:01:11.439 --> 00:01:15.539
and so wherever possible, we're trying 
to make the APIs feel the same

00:01:15.539 --> 00:01:18.138
because we want people to be able
to learn one set of technologies

00:01:18.138 --> 00:01:22.173
and move back and forth
without big road blocks.

00:01:22.173 --> 00:01:24.658
But on the other hand,
Swift as a language has new capabilities

00:01:24.658 --> 00:01:26.059
and advantages that Python doesn't.

00:01:26.059 --> 00:01:27.331
It's just a lot newer

00:01:27.331 --> 00:01:29.781
and so we want to be able 
to take advantage of that

00:01:29.781 --> 00:01:32.115
and built things out
so it can be familiar, yet powerful.

00:01:32.115 --> 00:01:33.553
I see, okay, cool.

00:01:33.553 --> 00:01:36.336
So one thing that may not be
immediately apparent to developers

00:01:36.336 --> 00:01:39.057
or immediately understandable 
is this concept you spoke a lot about,

00:01:39.057 --> 00:01:40.762
differentiable code.

00:01:40.762 --> 00:01:41.834
Ah, yeah.

00:01:41.834 --> 00:01:43.702
It sounds like a really powerful thing

00:01:43.702 --> 00:01:46.457
but can you help us understand 
a little bit more what's it all about?

00:01:46.457 --> 00:01:47.461
Sure, absolutely.

00:01:47.461 --> 00:01:50.567
So this is a big "differentiator" 
for Swift for TensorFlow.

00:01:50.567 --> 00:01:52.469
I hear it's integral to the product.

00:01:52.469 --> 00:01:55.918
Yeah, it's integral to everything we do.

00:01:55.918 --> 00:01:58.331
So if you think about 
machine learning models,

00:01:58.331 --> 00:01:59.848
when you define your forward function,

00:01:59.848 --> 00:02:01.967
you're defining and composing 
your model in this way,

00:02:01.967 --> 00:02:03.351
but then you need to train it.

00:02:03.351 --> 00:02:05.354
So when you train it,
what you end up wanting to do

00:02:05.354 --> 00:02:09.406
is compute the gradient of the values
as they flow through your model

00:02:09.406 --> 00:02:11.540
and how they contribute to your loss.

00:02:11.540 --> 00:02:13.614
So the way that works is through calculus,

00:02:13.614 --> 00:02:17.394
and calculus has this underlying principle
called the chain rule.

00:02:17.394 --> 00:02:19.951
Chain rule is something 
that's been known for a really long time

00:02:19.951 --> 00:02:22.055
and so what differentiable programming

00:02:22.055 --> 00:02:26.005
is doing is it's automatically
computing this for you in the language.

00:02:26.005 --> 00:02:28.448
And the cool thing about this
is it makes it super extensible,

00:02:28.448 --> 00:02:29.767
so you can do new kinds of things

00:02:29.767 --> 00:02:33.157
and you can experiment and research 
new kinds of concepts.

00:02:33.157 --> 00:02:35.681
Or, if you don't want to worry about
that level of thing,

00:02:35.681 --> 00:02:37.909
you can just build on top of
somebody else's libraries.

00:02:37.909 --> 00:02:40.992
Right. So things like optimizers
like stochastic gradient descent--

00:02:40.992 --> 00:02:43.319
(Chris) Yes, that's exactly how they work.

00:02:43.782 --> 00:02:45.820
So then it's a case of--
what I really like

00:02:45.820 --> 00:02:47.731
and what I find interesting 
in this is that

00:02:47.731 --> 00:02:50.847
instead of just trusting those libraries
it gives you the tools to be able to--

00:02:50.847 --> 00:02:52.955
because your code is differentiable--

00:02:52.955 --> 00:02:55.754
to be able to build your own
or to at least understand what's going on.

00:02:55.754 --> 00:02:57.883
Yeah, exactly.
Again this comes back to the principle

00:02:57.883 --> 00:02:59.908
of making it so that everything 
is an open box.

00:02:59.908 --> 00:03:01.845
And so you can look in 
and you can get around,

00:03:01.845 --> 00:03:03.507
you can customize and tweak and change

00:03:03.507 --> 00:03:05.633
and everything is right there 
for you to play with.

00:03:05.633 --> 00:03:07.951
Right, so it's one of the things
I really like about Swift,

00:03:07.951 --> 00:03:10.897
for TensorFlow in particular, is that
you can come in right at the top

00:03:10.897 --> 00:03:13.015
and just build your layers 
in Keras and train.

00:03:13.015 --> 00:03:14.617
Maybe that's all you'll ever want to do,

00:03:14.617 --> 00:03:17.688
but if you really need to kick the tires
and see what's going on underneath.

00:03:17.688 --> 00:03:20.326
Even people like me 
who have forgotten more calculus

00:03:20.326 --> 00:03:23.385
- than they've probably ever learned.
- Me too. I agree.

00:03:23.385 --> 00:03:26.732
But if I do brush up on my calculus
and I really want to tweak and optimize

00:03:26.732 --> 00:03:28.736
and that kind of stuff,
then it's all there for me.

00:03:28.736 --> 00:03:30.621
Yeah, that's the idea of this--
"no boundaries."

00:03:30.621 --> 00:03:33.099
You can go wherever 
your inspiration takes you.

00:03:33.099 --> 00:03:34.523
The thing I found about researchers

00:03:34.523 --> 00:03:36.608
is they don't want to have 
artificial boundaries.

00:03:36.608 --> 00:03:38.733
They don't want to say: 
"I can do this much in Python

00:03:38.733 --> 00:03:41.127
and then I have to switch 
to C++ to do more."

00:03:41.127 --> 00:03:44.260
If you can make it continuous,
you can make it so that--

00:03:44.260 --> 00:03:45.462
By being a seamless experience

00:03:45.462 --> 00:03:47.974
you can enable more things
to practically happen,

00:03:47.974 --> 00:03:50.109
just because it's more natural and easy

00:03:50.109 --> 00:03:51.738
and you're removing those barriers.

00:03:51.738 --> 00:03:53.541
And you can trust 
your debugging more, right?

00:03:53.541 --> 00:03:56.660
Because you're not thinking about maybe
something changed crossing the barrier.

00:03:56.660 --> 00:03:58.857
Yeah, you don't have
to switch debuggers, in some cases.

00:03:58.857 --> 00:04:00.563
Exactly. Cool. Now one of the things--

00:04:00.563 --> 00:04:01.920
maybe it's related to that--

00:04:01.920 --> 00:04:03.707
but one of the things
that also impressed me

00:04:03.707 --> 00:04:06.168
when you showed in your talk
was really interoperability--

00:04:06.168 --> 00:04:08.989
that I can just pull Python stuff in,
or I can pull other stuff in.

00:04:08.989 --> 00:04:10.707
Could you tell us 
a little more about that?

00:04:10.707 --> 00:04:13.548
Sure, so Swift works
very naturally with C,

00:04:13.548 --> 00:04:16.343
and the way it does that
is that it pulls in the client compiler

00:04:16.343 --> 00:04:19.180
directly into Swift and it interoperates 
at a very low level

00:04:19.180 --> 00:04:21.055
of the compiler with this.

00:04:21.055 --> 00:04:23.508
Python, on the other hand, 
is a super dynamic language.

00:04:23.508 --> 00:04:25.033
And so Swift has now...

00:04:25.033 --> 00:04:27.512
We've implemented 
new dynamic language features in Swift

00:04:27.512 --> 00:04:29.943
to allow it to directly talk 
to the Python runtime.

00:04:29.943 --> 00:04:32.146
And so when you're using Python and Swift,

00:04:32.146 --> 00:04:36.699
you're not using wrappers
or some weird Python-esque thing.

00:04:36.699 --> 00:04:39.394
You're using real Python right in Swift.

00:04:39.394 --> 00:04:42.162
And one of the things that I love
about that is it gives you

00:04:42.162 --> 00:04:45.470
perhaps the world's best 
progressive typing system for Python also

00:04:45.470 --> 00:04:47.547
because you can use a Python dictionary,

00:04:47.547 --> 00:04:49.658
or you can use a Swift dictionary
of Python objects,

00:04:49.658 --> 00:04:54.001
or you can use a Swift dictionary
of Swift strings and Python objects,

00:04:54.001 --> 00:04:57.119
and you can choose whatever level
of Python that you want.

00:04:57.119 --> 00:04:59.855
It's really natural 
and it just composes properly.

00:04:59.855 --> 00:05:00.861
Super cool.

00:05:00.861 --> 00:05:02.638
Now a lot of people of course
will know Swift

00:05:02.638 --> 00:05:04.247
from it being for iOS development.

00:05:04.247 --> 00:05:04.977
(Chris) Yes.

00:05:04.977 --> 00:05:07.660
Of course, it goes beyond
iOS development now with TensorFlow.

00:05:07.660 --> 00:05:10.814
Could you give us some guidance
on where's the best place to get started?

00:05:10.814 --> 00:05:12.960
Yeah, so Swift 
is a cross-platform language

00:05:12.960 --> 00:05:16.085
and a lot of iOS developers 
use it for sure,

00:05:16.085 --> 00:05:18.446
but it's also been very popular 
on the server, for example.

00:05:18.446 --> 00:05:21.285
So a lot of people have been building
Linux servers and things like that

00:05:21.285 --> 00:05:22.861
which it's really great for.

00:05:22.861 --> 00:05:24.901
If you want to get started, 
the easiest place to go

00:05:24.901 --> 00:05:28.380
is to go to <i>GitHub.com/TensorFlow/Swift</i>

00:05:28.380 --> 00:05:31.004
and we have a nice landing page
and we have all the information,

00:05:31.004 --> 00:05:32.278
you can join our community,

00:05:32.278 --> 00:05:34.717
and there's tons of information there
they can get [going].

00:05:34.717 --> 00:05:37.130
One of the really cool things
is that all the demos we showed

00:05:37.130 --> 00:05:40.425
are available in Colab,
and so you can use it on any device--

00:05:40.425 --> 00:05:43.416
a Chromebook... 
Anything that you have, it just works.

00:05:43.416 --> 00:05:45.691
Cool. And I know you've been working
on a training course

00:05:45.691 --> 00:05:47.252
with the folks from fast.AI,

00:05:47.252 --> 00:05:49.533
so if we want to be trained in Swift,
we can go there too.

00:05:49.533 --> 00:05:51.494
Absolutely. We're just
getting that of the ground.

00:05:51.494 --> 00:05:53.103
I'm really excited about that.

00:05:53.103 --> 00:05:55.205
A little bit terrified 
about that as well.

00:05:55.205 --> 00:05:56.850
But I'm sure it will be really great

00:05:56.850 --> 00:05:59.009
and I'm looking forward 
to working with Jeremy Howard.

00:05:59.009 --> 00:06:01.245
I'm sure. I met him this morning,
and he's awesome, so...

00:06:01.245 --> 00:06:03.759
- He's so passionate.
- Yes, definitely.

00:06:03.759 --> 00:06:06.410
So thank you so much, Chris.
As always, this was amazing.

00:06:06.410 --> 00:06:08.423
As always, it was inspirational, so...

00:06:08.423 --> 00:06:11.129
And thanks everybody for watching 
this episode of TensorFlow Meets.

00:06:11.129 --> 00:06:13.891
If you have any questions for me,
if you have any questions for Chris,

00:06:13.891 --> 00:06:15.558
please leave them in the comments below.

00:06:15.558 --> 00:06:18.233
We'll also put links to everything 
that we spoke about in this show

00:06:18.233 --> 00:06:20.683
in the comments below 
so that you can follow them from there.

00:06:20.683 --> 00:06:22.162
- Sounds great.
- Thanks again, Chris.

00:06:22.202 --> 00:06:26.195
♪ (outro) ♪

