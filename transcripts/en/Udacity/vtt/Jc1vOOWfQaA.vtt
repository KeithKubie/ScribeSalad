WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
For this question, there are a couple of different things you're going to need to do.

00:00:04.000 --> 00:00:10.000
You're given inputs which are a string, a pattern number and generations--

00:00:10.000 --> 00:00:15.000
the number of times you're going to apply the pattern to the string.

00:00:15.000 --> 00:00:20.000
The first thing we're going to need to do is to take the pattern number and convert it

00:00:20.000 --> 00:00:28.000
into some sort of pattern that we're going to be able to use to apply to our string.

00:00:28.000 --> 00:00:35.000
The second thing we're going to need to do is create a new string by applying

00:00:35.000 --> 00:00:42.000
the pattern to string, and we're going to do that generation times.

00:00:42.000 --> 00:00:49.000
Finally, we're going to need to return the last new string that we create.

00:00:49.000 --> 00:00:55.000
Let's first look at how we can create the pattern from the pattern number.

00:00:55.000 --> 00:00:59.000
We're given a number of each of the patterns,

00:00:59.000 --> 00:01:04.000
and one thing I noticed about these are they are actually the powers of 2.

00:01:04.000 --> 00:01:09.000
I'm going use that in my code. You don't have to. You can use the numbers as they are there.

00:01:09.000 --> 00:01:12.000
But I decided to use them as powers of 2.

00:01:12.000 --> 00:01:20.000
Now, if you're given a pattern number, you need to find out whether 128 goes into that pattern number.

00:01:20.000 --> 00:01:25.000
I'm going to do integer division by 2^7.

00:01:25.000 --> 00:01:33.000
If that's 1, I'm going to know that X X X corresponds to X in my new string.

00:01:33.000 --> 00:01:35.000
That's my rule.

00:01:35.000 --> 00:01:37.000
I decided to make a dictionary.

00:01:37.000 --> 00:01:43.000
X X X is going to be my key and X is my value.

00:01:43.000 --> 00:01:47.000
If it's 0 then X X X, then X X X would correspond to a dot.

00:01:47.000 --> 00:01:51.000
Once I've done that, I need to see what the remainder is.

00:01:51.000 --> 00:02:00.000
What the rest of the number is after I've subtracted 128 from it--if it was 1 or nothing.

00:02:00.000 --> 00:02:02.000
I can use modulo for that.

00:02:02.000 --> 00:02:05.000
This is going to be my new pattern number.

00:02:05.000 --> 00:02:10.000
On my new pattern number, I'm now going to divide by 2^6.

00:02:10.000 --> 00:02:18.000
Again, if it's 1, I'm going to make the corresponding pattern a key with value X.

00:02:18.000 --> 00:02:23.000
If it's 0, I'm going to make the corresponding value dot.

00:02:23.000 --> 00:02:30.000
I'm going to continue running through all the values here--all the numbers here--

00:02:30.000 --> 00:02:34.000
down to the bottom, seeing which ones correspond to an X

00:02:34.000 --> 00:02:36.000
and which correspond to a dot.

00:02:36.000 --> 00:02:39.000
The way I'm going to do it is to use these numbers here

00:02:39.000 --> 00:02:41.000
and run through those backwards.

00:02:41.000 --> 00:02:44.000
Onto the code.

00:02:44.000 --> 00:02:49.000
I said that I was going to set up a dictionary of my patterns.

00:02:49.000 --> 00:02:54.000
I'll initialize patterns to be the empty dictionary.

00:02:54.000 --> 00:03:00.000
I'm going to write all the patterns so that I can refer to them.

00:03:00.000 --> 00:03:05.000
For convenience, I'm just going to let n equal the length of the string,

00:03:05.000 --> 00:03:07.000
because I'm going to use it several times.

00:03:07.000 --> 00:03:09.000
I've got two things to do.

00:03:09.000 --> 00:03:15.000
I've got to build my patterns dictionary, and I've got to make a new string

00:03:15.000 --> 00:03:19.000
by applying pattern to string.

00:03:19.000 --> 00:03:25.000
I'm going to do that generations times.

00:03:25.000 --> 00:03:28.000
First, let me build the patterns dictionary.

00:03:28.000 --> 00:03:34.000
As I said, I'm going to loop through the numbers 7 down to 0 in reverse order.

00:03:34.000 --> 00:03:43.000
Do exactly as I said before, check whether pattern number is divisible by 2 to the power of that number.

00:03:43.000 --> 00:03:49.000
If that's equal to 1--strictly speaking, I don't need to actually say ==1,

00:03:49.000 --> 00:03:52.000
because 1 counts as true.

00:03:52.000 --> 00:03:55.000
But just for readability I'm going to put it in.

00:03:55.000 --> 00:04:02.000
If it's equal to 1, then I'm going to subtract power from the pattern number.

00:04:02.000 --> 00:04:10.000
If it's equal to 0, then the corresponding value is dot instead of x.

00:04:10.000 --> 00:04:14.000
That completes the dictionary, and now we go on to the loop,

00:04:14.000 --> 00:04:21.000
which is going to run generations times to change the string into a new string.

00:04:21.000 --> 00:04:29.000
For j in the range of 0 up to generations, I'm going to make a new string,

00:04:29.000 --> 00:04:32.000
which is the empty string.

00:04:32.000 --> 00:04:39.000
I'm going to loop through the old string or through the indexes in the old string.

00:04:39.000 --> 00:04:45.000
What we're going to do now is step through the string, looking at every pattern.

00:04:45.000 --> 00:04:48.000
So we need to build up our pattern.

00:04:48.000 --> 00:04:50.000
What is a pattern?

00:04:50.000 --> 00:04:54.000
It's the central character that we're looking at,

00:04:54.000 --> 00:04:58.000
and it's the neighbor the left and the neighbor to the right.

00:04:58.000 --> 00:05:00.000
Just let's think about that for a moment.

00:05:00.000 --> 00:05:04.000
Does this cause any problems at the end of the strings?

00:05:04.000 --> 00:05:08.000
Because if i is 0, we're right at the beginning of the string.

00:05:08.000 --> 00:05:12.000
What happens to i - 1? Well, we get -1.

00:05:12.000 --> 00:05:17.000
Because Python allows us to index from the reverse of a string, that's fine.

00:05:17.000 --> 00:05:22.000
That will be the last element of a string followed by the first one,

00:05:22.000 --> 00:05:25.000
followed by the second one, which is just what we want.

00:05:25.000 --> 00:05:28.000
Let's check the other end of the string.

00:05:28.000 --> 00:05:32.000
If i is the last element of the string, then we've got a problem.

00:05:32.000 --> 00:05:36.000
This element here is after the end of the string,

00:05:36.000 --> 00:05:39.000
so we're going to get an error. What do we want it to be?

00:05:39.000 --> 00:05:42.000
We want it to be the first element of the string.

00:05:42.000 --> 00:05:45.000
And in order to do that, I'm going to use modulo n,

00:05:45.000 --> 00:05:51.000
because i + 1 when we're at the end of the string i is n - 1.

00:05:51.000 --> 00:05:58.000
Plus 1 gives me n, and n modulo n is 0--the first element of the string, which is what we want.

00:05:58.000 --> 00:06:00.000
There we have our pattern.

00:06:00.000 --> 00:06:03.000
We need to look up our pattern in the dictionary,

00:06:03.000 --> 00:06:08.000
and we need to add whatever the character is that our central character changes to--

00:06:08.000 --> 00:06:11.000
that i changes to--to our string.

00:06:11.000 --> 00:06:16.000
Looking it up in patterns, I'll get that character.

00:06:16.000 --> 00:06:19.000
Once it's run through the whole length of the string,

00:06:19.000 --> 00:06:25.000
then I make my string equal to the new string and the loop continues.

00:06:25.000 --> 00:06:30.000
Once that's done generations number of times, I return the new string.

00:06:30.000 --> 00:06:34.000
That completes the procedure apart from a couple of typos.

00:06:34.000 --> 00:06:41.000
That should say for i in range, and I managed to change my variable name here.

00:06:41.000 --> 00:06:44.000
It should say pattern instead of patterns.

