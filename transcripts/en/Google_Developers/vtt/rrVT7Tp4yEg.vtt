WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:39.840
[MUSIC PLAYING]

00:00:53.880 --> 00:00:54.090
Hi.

00:00:54.090 --> 00:00:55.010
I'm Chris Broadfoot.

00:00:55.010 --> 00:00:56.770
Welcome to this week's
episode of Google

00:00:56.770 --> 00:00:58.760
Maps Developer Shortcuts.

00:00:58.760 --> 00:01:01.190
Now this week I'm not going
to show you how to build

00:01:01.190 --> 00:01:03.090
something really hands on.

00:01:03.090 --> 00:01:05.890
I'm just going to show you a
demo that I built for the

00:01:05.890 --> 00:01:08.390
O'Reilly Strata Conference last
year, and hopefully I can

00:01:08.390 --> 00:01:11.160
inspire you to do something
similar.

00:01:11.160 --> 00:01:14.110
Now it's this really cool mashup
using WebGL and the

00:01:14.110 --> 00:01:19.710
Maps API, and some very
cool GPS tracks that I

00:01:19.710 --> 00:01:22.290
found on the internet.

00:01:22.290 --> 00:01:25.680
I'm using the CanvasLayer
library to show my WebGL

00:01:25.680 --> 00:01:30.660
directly on top of the map, and
do all of the interaction

00:01:30.660 --> 00:01:34.050
to do with panning and zooming
and all of that.

00:01:34.050 --> 00:01:36.490
Now let's talk about the
data set that I found.

00:01:36.490 --> 00:01:39.500
It's from a company called UBA,
who basically provide a

00:01:39.500 --> 00:01:41.440
taxi service.

00:01:41.440 --> 00:01:43.540
Now the interesting thing that
they do is they charge the

00:01:43.540 --> 00:01:47.470
customers based on the GPS in
the phone of the driver and

00:01:47.470 --> 00:01:49.200
the customer, so they've
got all these

00:01:49.200 --> 00:01:51.610
really cool GPS tracks.

00:01:51.610 --> 00:01:54.280
They anonymized a whole bunch of
these and provided a week's

00:01:54.280 --> 00:01:56.230
worth of GPS data.

00:01:56.230 --> 00:02:01.690
So that's 25,000 trips and about
1.1 million data points,

00:02:01.690 --> 00:02:05.940
all anonymized, of course,
and provided it for a

00:02:05.940 --> 00:02:08.130
visualization competition.

00:02:08.130 --> 00:02:10.830
Now I took this data and I
showed it at the Strata

00:02:10.830 --> 00:02:12.450
Conference, as I said.

00:02:12.450 --> 00:02:13.910
And I'm just going to show it
again, because I think it's

00:02:13.910 --> 00:02:17.040
really cool, and I want more
people to see this sort of

00:02:17.040 --> 00:02:19.470
thing being done.

00:02:19.470 --> 00:02:21.740
Now let's look at the data.

00:02:21.740 --> 00:02:23.080
So this is essentially
what it looks like.

00:02:23.080 --> 00:02:25.850
It's a tab-separated file.

00:02:25.850 --> 00:02:29.100
I got it off a site
called Infochimps.

00:02:29.100 --> 00:02:34.540
Anyway, so the first column
is the ID of the route.

00:02:34.540 --> 00:02:36.580
So this is the first route,
and you can see down here,

00:02:36.580 --> 00:02:39.040
this is where the second
one starts.

00:02:39.040 --> 00:02:43.300
And you get a time stamp
for the GPS point

00:02:43.300 --> 00:02:44.160
and the point itself.

00:02:44.160 --> 00:02:47.920
So that's really, really simple,
but lets you build up

00:02:47.920 --> 00:02:53.110
all sorts of interesting
visualizations.

00:02:53.110 --> 00:02:53.340
OK.

00:02:53.340 --> 00:02:56.360
So the first thing I did, of
course, was to go and put all

00:02:56.360 --> 00:02:58.040
of these on a map.

00:02:58.040 --> 00:03:03.020
Now if you've ever tried to plot
more than, say, 10,000 or

00:03:03.020 --> 00:03:06.390
20,000 points on a Google
Maps map, you may

00:03:06.390 --> 00:03:08.350
have had some trouble.

00:03:08.350 --> 00:03:12.590
So here I'm using WebGL, which
is a way to visualize massive

00:03:12.590 --> 00:03:15.130
amounts of data in
the browser.

00:03:15.130 --> 00:03:18.490
So you've got all the power of
the graphics card, and you

00:03:18.490 --> 00:03:21.690
could build games and all
sorts of great graphical

00:03:21.690 --> 00:03:23.250
applications.

00:03:23.250 --> 00:03:24.540
So let's switch over here.

00:03:24.540 --> 00:03:28.290
This is all 1.1 million
points plotted.

00:03:28.290 --> 00:03:31.750
Now I've drawn them with some
transparency so that they

00:03:31.750 --> 00:03:35.350
start to build up, and you
get a real sense of the

00:03:35.350 --> 00:03:38.600
most-driven roads in the city.

00:03:38.600 --> 00:03:41.270
So even if the Google Map wasn't
in the background,

00:03:41.270 --> 00:03:44.090
you'd still see all of these
tracks and these roads

00:03:44.090 --> 00:03:45.660
starting to build up.

00:03:45.660 --> 00:03:49.720
But because I have put the map
in the background, I'm using a

00:03:49.720 --> 00:03:54.030
styled map to subdue all the
colors, remove all the labels,

00:03:54.030 --> 00:03:57.520
so that the data really
comes alive.

00:03:57.520 --> 00:03:57.740
OK.

00:03:57.740 --> 00:04:00.260
So that's quite interesting,
and you might see some

00:04:00.260 --> 00:04:05.500
patterns like this sort of
fuzzy area around the

00:04:05.500 --> 00:04:07.030
financial district.

00:04:07.030 --> 00:04:08.740
I presume that's because
there's a lot of tall

00:04:08.740 --> 00:04:11.240
buildings and the GPS
sensitivity--

00:04:11.240 --> 00:04:15.620
sorry, the accuracy
is much lower.

00:04:15.620 --> 00:04:19.470
So zooming back out, the first
thing I did with this data was

00:04:19.470 --> 00:04:21.930
take a slice of time.

00:04:21.930 --> 00:04:25.650
So up here in the top left, you
can see I've got the time

00:04:25.650 --> 00:04:27.480
slice that's being displayed.

00:04:27.480 --> 00:04:30.995
So this is eight and a half
minutes on Sunday afternoon.

00:04:34.400 --> 00:04:36.470
So then the next thing I did
was change the rendering

00:04:36.470 --> 00:04:41.380
slightly, and render points that
are further back in that

00:04:41.380 --> 00:04:44.750
time slice with a smaller
radius and slightly

00:04:44.750 --> 00:04:46.060
transparent.

00:04:46.060 --> 00:04:50.980
Now this gives the effect of a
worm sort of thing so that you

00:04:50.980 --> 00:04:54.420
get a sense of the direction
that the taxi is going in and

00:04:54.420 --> 00:04:56.440
where it's been.

00:04:56.440 --> 00:04:59.010
Now the great thing about this
is once I start to move

00:04:59.010 --> 00:05:02.690
through this time slice, you get
these worms moving across

00:05:02.690 --> 00:05:04.500
the screen.

00:05:04.500 --> 00:05:07.890
So here I'm just moving
forward in time.

00:05:07.890 --> 00:05:11.800
So this is moving forward in
time linearly, but you get a

00:05:11.800 --> 00:05:14.070
sense of the speed
of these cars.

00:05:14.070 --> 00:05:17.150
So you can see they go quite
fast on the highways and slow

00:05:17.150 --> 00:05:19.680
in the city.

00:05:19.680 --> 00:05:21.900
So we're up to about
5:00 PM now.

00:05:21.900 --> 00:05:25.500
And I can go faster and faster
and faster, and if I go

00:05:25.500 --> 00:05:28.780
really, really fast, I can go
all the way through the week.

00:05:28.780 --> 00:05:33.990
So you get a sense of when the
traffic is quite low--

00:05:33.990 --> 00:05:37.720
well, essentially when UBA isn't
being used very much,

00:05:37.720 --> 00:05:40.580
which is a proxy for
the general traffic

00:05:40.580 --> 00:05:41.830
network in the city.

00:05:44.870 --> 00:05:48.290
So then the next thing I did was
take each of those routes,

00:05:48.290 --> 00:05:53.390
and because I knew the taxi
number, the ID of that route,

00:05:53.390 --> 00:05:56.710
I could string those together
and get a reading of the speed

00:05:56.710 --> 00:05:57.950
of the car--

00:05:57.950 --> 00:06:01.470
essentially the distance it
travelled divided by the time

00:06:01.470 --> 00:06:04.780
between samples.

00:06:04.780 --> 00:06:10.020
So by colorizing each point
based on its speed--

00:06:10.020 --> 00:06:14.830
so here I'm drawing in green
the fast cars and the slow

00:06:14.830 --> 00:06:17.350
ones with red--

00:06:17.350 --> 00:06:20.470
you get a sense of the fast
and slow streets.

00:06:20.470 --> 00:06:23.410
So you can see that the Highway
101 is quite fast into

00:06:23.410 --> 00:06:26.820
the city, but once again, around
the financial district

00:06:26.820 --> 00:06:29.640
things start to turn
a little bit red.

00:06:29.640 --> 00:06:32.780
Now I've got up here another
little panel that lets me

00:06:32.780 --> 00:06:35.750
change some more parameters
of the rendering.

00:06:35.750 --> 00:06:39.150
So for example, if I
zoom in, I could,

00:06:39.150 --> 00:06:41.015
perhaps, turn up the opacity.

00:06:43.620 --> 00:06:46.370
Yeah, maybe blur the
map a little or

00:06:46.370 --> 00:06:48.430
increase the point size.

00:06:48.430 --> 00:06:51.750
And so this is a really
great interactive

00:06:51.750 --> 00:06:53.400
interface, I think.

00:06:53.400 --> 00:06:55.940
So I spent quite a long time
just sort of exploring this

00:06:55.940 --> 00:07:01.710
data, which was very fun.

00:07:01.710 --> 00:07:05.070
So yeah, once again, you can
see that the GPS accuracy

00:07:05.070 --> 00:07:09.860
around the city is quite bad.

00:07:09.860 --> 00:07:14.580
And these are maybe things that
you wouldn't realize by

00:07:14.580 --> 00:07:19.480
analyzing your data
problematically.

00:07:19.480 --> 00:07:22.430
But once you can visualize it
with your eyes, you start to

00:07:22.430 --> 00:07:23.950
see these patterns.

00:07:23.950 --> 00:07:27.520
The brain is very good at
recognizing patterns.

00:07:27.520 --> 00:07:31.310
And you'll see that there's
these small pockets of these

00:07:31.310 --> 00:07:34.990
slow areas, presumably
back streets or

00:07:34.990 --> 00:07:37.830
something like that.

00:07:37.830 --> 00:07:40.600
And there's another great one
down here near the airport.

00:07:40.600 --> 00:07:46.190
I think this is a taxi or a cab
waiting bay, so it's quite

00:07:46.190 --> 00:07:47.440
slow down there.

00:07:51.420 --> 00:07:57.260
OK, so by combining all of these
effects, we get these

00:07:57.260 --> 00:08:00.870
colored squiggles moving around
the map, which I think

00:08:00.870 --> 00:08:02.120
is quite cool.

00:08:10.210 --> 00:08:13.260
So say you wanted to use this
for traffic analysis.

00:08:13.260 --> 00:08:17.110
Perhaps we'll take a slightly
larger slice of the day.

00:08:17.110 --> 00:08:19.350
So this is about--

00:08:19.350 --> 00:08:20.150
what's that--

00:08:20.150 --> 00:08:21.570
three hours.

00:08:21.570 --> 00:08:24.710
OK, let's go down
to two hours.

00:08:24.710 --> 00:08:31.630
And we can just slide all the
way through the week, and you

00:08:31.630 --> 00:08:36.140
get this sense of the city
pulsing and coming alive and

00:08:36.140 --> 00:08:38.000
going to sleep at night.

00:08:38.000 --> 00:08:43.429
And you can sort of see the
problem times of the week.

00:08:43.429 --> 00:08:45.610
So you can see it's
quite busy here--

00:08:45.610 --> 00:08:46.860
that's Saturday night--

00:08:51.680 --> 00:08:57.380
and very, very quiet around 4:00
till 6:00 on a Sunday,

00:08:57.380 --> 00:08:58.640
and then gets busy again.

00:09:04.210 --> 00:09:08.990
So this is all made possible
using WebGL and the Maps API.

00:09:08.990 --> 00:09:12.050
Go over and check out the
CanvasLayer library.

00:09:12.050 --> 00:09:14.770
It's in the Google Maps
Utility library.

00:09:14.770 --> 00:09:19.920
And watch Brendan and Paul
talking here on the Office

00:09:19.920 --> 00:09:24.290
Hours, July 24 last year,
to find out more about

00:09:24.290 --> 00:09:25.490
CanvasLayer.

00:09:25.490 --> 00:09:26.890
Anyway, that's my demo.

00:09:26.890 --> 00:09:29.840
Thank you for watching, and
I'll see you next week.

00:09:38.786 --> 00:10:19.130
[MUSIC PLAYING]

