WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.375
[MUSIC PLAYING]

00:00:02.865 --> 00:00:06.220
Data serialization is an important aspect
of every Android application.

00:00:06.220 --> 00:00:09.730
But when it comes to performance
there's a right and a wrong way to do it.

00:00:09.730 --> 00:00:13.020
My name is Colt McCandless.
And your choice of serialization provider

00:00:13.020 --> 00:00:15.885
and format can have a huge impact on
your app's performance.

00:00:15.885 --> 00:00:20.570
At its core, serialization is the process
of taking some in-memory object

00:00:20.570 --> 00:00:22.940
and converting it
to a formatted chunk of data

00:00:22.940 --> 00:00:26.680
that can be converted back
to an in-memory object sometime later.

00:00:26.680 --> 00:00:30.180
And serialization is everywhere,
from sending packets

00:00:30.180 --> 00:00:34.179
between the server and the Android device,
sending data between two processes,

00:00:34.210 --> 00:00:37.280
storing user preferences to disk,
and even simple stuff,

00:00:37.280 --> 00:00:41.810
like passing the current song information
to the UI to be displayed.

00:00:41.850 --> 00:00:45.110
Typically, most Android developers
will default to the easiest method

00:00:45.110 --> 00:00:46.340
to serialize their data.

00:00:46.340 --> 00:00:50.310
Namely, extending their class
with the serializable class.

00:00:50.310 --> 00:00:52.850
But in terms of performance
you actually couldn't find

00:00:52.850 --> 00:00:54.416
a worse solution to the problem.

00:00:54.416 --> 00:00:57.570
See, built in classes like
serializable and object output stream

00:00:57.570 --> 00:01:00.280
will work great
from a functionality perspective,

00:01:00.280 --> 00:01:03.500
but these approaches haves significant
memory and encoding overhead,

00:01:03.500 --> 00:01:06.802
making them entirely
too slow for the job at hand.

00:01:06.802 --> 00:01:09.540
For the sake of performance,
you're going to want to avoid

00:01:09.540 --> 00:01:13.110
all of that chaos, and instead
look at things like the GSON library,

00:01:13.190 --> 00:01:17.300
which produces much faster serialization
and more memory-efficient results.

00:01:17.330 --> 00:01:21.720
Although there's a large problem with GSON
in that it uses the JSON format,

00:01:21.790 --> 00:01:27.560
which is known to produce bloated files.
See, text-based formats like JSON and XML

00:01:27.680 --> 00:01:30.782
tend to decode slower and
produce more verbose results.

00:01:30.782 --> 00:01:33.730
The problem at hand is that these formats
are human readable.

00:01:33.770 --> 00:01:36.280
That means that there's
lots of overly verbose syntax

00:01:36.280 --> 00:01:39.200
that's added to the file for
the ease of readability and use.

00:01:39.200 --> 00:01:42.070
In addition, these formats
tend to be extremely flexible,

00:01:42.070 --> 00:01:45.060
meaning you can make ordering
changes or data changes easily.

00:01:45.060 --> 00:01:48.210
But again, that comes at the cost
of needing extra data in the file

00:01:48.210 --> 00:01:50.590
that you may not actually
want to send to the user.

00:01:50.590 --> 00:01:53.680
By the way, one quick note,
Android resource files,

00:01:53.680 --> 00:01:56.830
which are XML formatted, don't
have any of these problems.

00:01:56.830 --> 00:02:00.129
They are compiled at build
time into a more compact format

00:02:00.129 --> 00:02:02.450
that is more memory
efficient and faster to load.

00:02:02.450 --> 00:02:04.714
So you don't need to
worry about any of those.

00:02:04.714 --> 00:02:07.910
So when it comes to serialization,
you're going to want a fast codec

00:02:07.910 --> 00:02:09.900
that produces the smallest file possible.

00:02:09.900 --> 00:02:12.670
And lucky for you, we've got
three great options available.

00:02:12.670 --> 00:02:16.130
For starters the Google Protobuffs Library
gets a lot of recognition

00:02:16.150 --> 00:02:19.670
for being a very compact,
flexible format for serialization.

00:02:19.670 --> 00:02:22.680
Downside though is that
the Java implementation of the library

00:02:22.680 --> 00:02:24.820
has significant memory
and code size overhead

00:02:24.820 --> 00:02:26.740
which isn't ideal
for mobile development,

00:02:26.740 --> 00:02:29.660
which is why the Nano Proto
format was made.

00:02:29.660 --> 00:02:33.190
Basically, it's Protobuffs
but optimized for Android development,

00:02:33.190 --> 00:02:36.510
so less memory allocations, 
a smaller number of method calls

00:02:36.510 --> 00:02:39.140
and just less code overhead in general.

00:02:39.140 --> 00:02:43.060
But of course, my personal favorite
has to be the Flat Buffers library.

00:02:43.060 --> 00:02:47.060
This format was built by one of Google's
game development focused teams

00:02:47.060 --> 00:02:51.425
and is focused on performance.
In fact, when it comes to file size,

00:02:51.425 --> 00:02:53.850
you can see that Flat
Buffers produce smaller files

00:02:53.850 --> 00:02:55.600
than their Protobuff brethren.

00:02:55.600 --> 00:02:58.110
And when it comes to
encode and decode times,

00:02:58.110 --> 00:03:02.420
flat buffers have a huge advantage.
Their overhead is basically nonexistent.

00:03:02.539 --> 00:03:05.400
But the truth is that sometimes,
the most performant solution

00:03:05.400 --> 00:03:07.080
is to not use serialization at all!

00:03:07.080 --> 00:03:09.720
For example, if you're trying
to store user preferences,

00:03:09.720 --> 00:03:12.120
you shouldn't be storing
that as a serialized file.

00:03:12.120 --> 00:03:14.900
Instead, try using the
SharedPreferences API.

00:03:14.900 --> 00:03:19.860
It's basically a fast key value store
and perfect for this type of data.

00:03:19.920 --> 00:03:22.850
Same goes for passing data
between running processes.

00:03:22.850 --> 00:03:25.120
Serialization is still
the wrong answer here.

00:03:25.120 --> 00:03:27.400
Instead, use the parcelable API,

00:03:27.400 --> 00:03:29.470
which gives you
a slightly serialized format

00:03:29.470 --> 00:03:33.570
but with a huge performance boost.
And if you've got a lot of structured data

00:03:33.590 --> 00:03:36.380
that you plan on serializing, don't!

00:03:36.380 --> 00:03:38.692
The overhead of walking
those serialized objects,

00:03:38.692 --> 00:03:40.860
not to mention the time
it takes to load them,

00:03:40.860 --> 00:03:43.150
is horrible compared to
creating a local database

00:03:43.150 --> 00:03:44.885
with a SQL Lite API.

00:03:44.885 --> 00:03:47.950
See, everything in performance
is about understanding the caveats

00:03:47.950 --> 00:03:49.380
and choosing the best options.

00:03:49.380 --> 00:03:52.532
And trust me, caveats are everywhere,
which is why you should watch

00:03:52.532 --> 00:03:54.636
the rest of our Android
Performance Patterns videos

00:03:54.636 --> 00:03:56.810
And don't forget to join
our Google+ community

00:03:56.810 --> 00:03:58.720
to ask questions
to other folks as well.

00:03:58.720 --> 00:04:01.450
So keep calm, profile your
code, and always remember...

00:04:01.450 --> 00:04:03.290
Perfmatters!

