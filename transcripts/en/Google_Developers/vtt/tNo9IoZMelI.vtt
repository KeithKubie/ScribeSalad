WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.822
Hey, everyone, here a
startling revelation.

00:00:02.822 --> 00:00:04.530
Did you know creating
calendar events can

00:00:04.530 --> 00:00:07.050
enhance your user's experience
and bring about better

00:00:07.050 --> 00:00:08.590
and higher engagement?

00:00:08.590 --> 00:00:10.699
This is Wesley Chun, and
by the time I'm done,

00:00:10.699 --> 00:00:12.490
you'll be wondering
why you haven't already

00:00:12.490 --> 00:00:14.780
implemented this in
your web or mobile apps.

00:00:14.780 --> 00:00:17.420
For developers, you'll discover
it's easier than you think.

00:00:17.420 --> 00:00:20.660
Your users will save time and
think, yay, what a cool app.

00:00:20.660 --> 00:00:22.600
I don't have to do it myself.

00:00:22.600 --> 00:00:24.540
To get started,
let's go somewhere

00:00:24.540 --> 00:00:26.444
where you can have
such an experience.

00:00:26.444 --> 00:00:28.610
Going out with friends to
have a good time is always

00:00:28.610 --> 00:00:30.901
a great experience, whether
it's a night at the movies,

00:00:30.901 --> 00:00:32.441
going to the game,
or eating out.

00:00:32.441 --> 00:00:34.440
Let's say that you've
built a dining reservation

00:00:34.440 --> 00:00:36.640
app to simplify
setting up such events.

00:00:36.640 --> 00:00:38.260
Besides booking
the reservation, it

00:00:38.260 --> 00:00:41.600
notifies guests and handles
RSVPs-- very useful.

00:00:41.600 --> 00:00:43.430
But sending email is easy.

00:00:43.430 --> 00:00:46.530
How can you make this
experience even better?

00:00:46.530 --> 00:00:47.030
All right.

00:00:47.030 --> 00:00:49.310
Truth is, while your app
helps users with scheduling,

00:00:49.310 --> 00:00:51.300
they're not using your
app for appointments.

00:00:51.300 --> 00:00:53.430
They're using a calendar.

00:00:53.430 --> 00:00:56.250
Wouldn't it be great if
your app handles the booking

00:00:56.250 --> 00:00:59.550
and adds the events
to their calendars?

00:00:59.550 --> 00:01:01.180
Users will love your
app because they

00:01:01.180 --> 00:01:03.660
don't have to manually add
those events to their calendars.

00:01:03.660 --> 00:01:06.120
Time and effort
saved for the win.

00:01:06.120 --> 00:01:08.840
And that's how you take a good
experience and make it great.

00:01:12.010 --> 00:01:14.240
Today's calendar--
people rely on it

00:01:14.240 --> 00:01:17.010
to organize their lives,
at work and at home.

00:01:17.010 --> 00:01:19.010
When booking events using
your app, whether it's

00:01:19.010 --> 00:01:21.630
a dining reservation,
plane ticket, hotel

00:01:21.630 --> 00:01:23.900
room, a night at the
game, or a concert,

00:01:23.900 --> 00:01:26.850
it's an extra chore for people
to get it into their calendars.

00:01:26.850 --> 00:01:30.190
So how do you automate
calendar events then?

00:01:30.190 --> 00:01:32.370
With the Google Calendar API.

00:01:32.370 --> 00:01:34.170
It sounds complicated,
but really, it's

00:01:34.170 --> 00:01:35.240
easier than you think.

00:01:35.240 --> 00:01:37.744
To help you get started, let's
look at a short Python script

00:01:37.744 --> 00:01:40.160
that creates an event with a
minimal amount of information

00:01:40.160 --> 00:01:41.220
and code.

00:01:41.220 --> 00:01:43.660
At the end, I'll have a link
to the docs where you can see

00:01:43.660 --> 00:01:47.440
similar examples in Java,
.NET, PHP, and more,

00:01:47.440 --> 00:01:50.570
including mobile environments
like Android and iOS.

00:01:50.570 --> 00:01:51.260
Ready?

00:01:51.260 --> 00:01:53.710
Let's go to the computer now.

00:01:53.710 --> 00:01:55.610
OK, let's start at the top.

00:01:55.610 --> 00:01:57.730
We need to import the
print_function for Python 2

00:01:57.730 --> 00:02:00.870
users since it's
the default in 3.X.

00:02:00.870 --> 00:02:04.686
The goal is to have code that
runs in both Python 2 and 3.

00:02:04.686 --> 00:02:08.240
The Google Calendar API is
another authorized Google API,

00:02:08.240 --> 00:02:10.720
so the remaining imports
are the same to access

00:02:10.720 --> 00:02:12.630
any authorized API,
just like we've

00:02:12.630 --> 00:02:14.370
seen in previous episodes.

00:02:14.370 --> 00:02:16.910
What does change,
however, are the scopes.

00:02:16.910 --> 00:02:20.410
We're now using Calendar,
thus need one of its scopes.

00:02:20.410 --> 00:02:22.580
Currently, the Calendar
API has a read-only

00:02:22.580 --> 00:02:24.000
and a read/write scope.

00:02:24.000 --> 00:02:25.910
Since we're adding a
new Calendar event,

00:02:25.910 --> 00:02:29.690
we need read/write, which
is this particular scope.

00:02:29.690 --> 00:02:31.960
The rest of the boilerplate
remains the same.

00:02:31.960 --> 00:02:35.060
Completing the OAuth
process, where if successful,

00:02:35.060 --> 00:02:36.940
ends with granting
this script the ability

00:02:36.940 --> 00:02:39.270
to access the calendar
data of the user who

00:02:39.270 --> 00:02:41.620
gave the authorization.

00:02:41.620 --> 00:02:45.250
With permissions granted, we can
now create a service endpoint

00:02:45.250 --> 00:02:47.200
to the Calendar API.

00:02:47.200 --> 00:02:51.850
Use calendar as the API
name, v3 as the current API

00:02:51.850 --> 00:02:55.300
version-- at least it was
when we recorded this video.

00:02:55.300 --> 00:02:58.360
Finally, pass in the
HTTP connection objects

00:02:58.360 --> 00:03:01.110
so requests are signed
with your credentials.

00:03:01.110 --> 00:03:02.830
In order to create
an event, we need

00:03:02.830 --> 00:03:05.040
to call the API with the
necessary event details,

00:03:05.040 --> 00:03:06.840
so that's next.

00:03:06.840 --> 00:03:10.470
The GMT_OFF variable is for
my local time zone, which

00:03:10.470 --> 00:03:13.130
is Pacific daylight time,
or a mountain standard time,

00:03:13.130 --> 00:03:16.900
which is GMT minus seven hours,
but you should use your own.

00:03:16.900 --> 00:03:19.910
The data in the EVENT variable
is the bare minimum, an event

00:03:19.910 --> 00:03:22.342
name plus start and end times.

00:03:22.342 --> 00:03:24.050
Now that we've got
the data that we need,

00:03:24.050 --> 00:03:26.250
it's time to call the API
with the service endpoint

00:03:26.250 --> 00:03:27.960
CAL that we got earlier.

00:03:27.960 --> 00:03:32.000
We'll use the event
object's insert method.

00:03:32.000 --> 00:03:34.880
The calendarId is the
ID of the calendar

00:03:34.880 --> 00:03:36.660
to insert the event into.

00:03:36.660 --> 00:03:39.780
The special name primary
refers to the currently

00:03:39.780 --> 00:03:42.800
authorized user so that's
what you'll typically use.

00:03:42.800 --> 00:03:44.520
sendNotifications
is the flag that

00:03:44.520 --> 00:03:47.960
says send an email notification
of the new calendar event.

00:03:47.960 --> 00:03:51.400
If you're inviting friends, it's
probably nice to let them know.

00:03:51.400 --> 00:03:54.180
Finally, pass in the
event details as the body

00:03:54.180 --> 00:03:56.990
and execute the API call.

00:03:56.990 --> 00:03:59.590
Now, this will work,
but how can you

00:03:59.590 --> 00:04:01.570
tell the event was
successfully added?

00:04:01.570 --> 00:04:04.135
Well, you can't unless you
check the return value, which

00:04:04.135 --> 00:04:06.720
is this variable e up here.

00:04:06.720 --> 00:04:09.340
It's the event object that
serves as a receipt containing

00:04:09.340 --> 00:04:12.260
the event details, which are
then displayed to the screen

00:04:12.260 --> 00:04:14.150
using the print call
down at the bottom.

00:04:14.150 --> 00:04:16.994
All right, now we're
ready to save and run it.

00:04:19.649 --> 00:04:22.380
And as you can see, we get
the familiar OAuth prompt.

00:04:22.380 --> 00:04:24.320
So this is the
actual action that

00:04:24.320 --> 00:04:27.750
lets the user authorize that
script access to their calendar

00:04:27.750 --> 00:04:28.540
data.

00:04:28.540 --> 00:04:30.110
So we're going to allow.

00:04:30.110 --> 00:04:34.540
And you can see here that the
print function has completed,

00:04:34.540 --> 00:04:37.660
which means there should
be a dinner with friends

00:04:37.660 --> 00:04:38.390
on our calendar.

00:04:38.390 --> 00:04:39.450
And there it is.

00:04:39.450 --> 00:04:40.940
That's great.

00:04:40.940 --> 00:04:43.840
Whoops, we forgot to
invite our friends.

00:04:43.840 --> 00:04:46.920
If you look at the event,
there's no friends in here.

00:04:46.920 --> 00:04:51.020
So unfortunately, we've got
to delete it and do it again.

00:04:51.020 --> 00:04:52.140
So how do we add friends?

00:04:52.140 --> 00:04:55.200
Well, you go back into the code
and, particularly the event

00:04:55.200 --> 00:04:58.040
data, and add a
list of attendees,

00:04:58.040 --> 00:05:01.620
just giving them the email
addresses for all your friends.

00:05:01.620 --> 00:05:04.030
All right, now if we
save and run it again,

00:05:04.030 --> 00:05:05.520
we'll get more success

00:05:05.520 --> 00:05:08.020
OK, it looks like the
event has been added again.

00:05:08.020 --> 00:05:09.820
And this time,
your friend should

00:05:09.820 --> 00:05:11.396
have gotten an
email notification,

00:05:11.396 --> 00:05:13.270
besides the calendar
event, which you can see

00:05:13.270 --> 00:05:16.780
here along with some friends.

00:05:16.780 --> 00:05:19.790
It even works for non-Google
users, such as my friend here

00:05:19.790 --> 00:05:23.150
who has an AOL account.

00:05:23.150 --> 00:05:25.950
If you click through, you'll
see the user interface isn't as

00:05:25.950 --> 00:05:28.600
rich, but they can still RSVP.

00:05:28.600 --> 00:05:29.650
So that's it.

00:05:29.650 --> 00:05:30.450
Cool.

00:05:30.450 --> 00:05:32.940
You've programmatically created
your first Google Calendar

00:05:32.940 --> 00:05:33.800
event.

00:05:33.800 --> 00:05:37.080
Wow, that's it, all in
less than 40 lines of code.

00:05:37.080 --> 00:05:39.920
As you can see, it doesn't take
much to add a calendar event,

00:05:39.920 --> 00:05:41.570
meaning it doesn't
take much effort

00:05:41.570 --> 00:05:45.250
to give your users a seamless
and delightful experience.

00:05:45.250 --> 00:05:47.720
Inserting events is
just the beginning.

00:05:47.720 --> 00:05:50.140
Think of the API as a
way to really open up

00:05:50.140 --> 00:05:52.590
the power of Google Calendar
and integrating its features

00:05:52.590 --> 00:05:53.710
into your app.

00:05:53.710 --> 00:05:58.210
It will be able to update and
delete events, not just add.

00:05:58.210 --> 00:06:00.250
If your events have
location information,

00:06:00.250 --> 00:06:03.490
users can get Google Now cards
that tie in with Google Maps,

00:06:03.490 --> 00:06:06.250
providing time and
proximity info.

00:06:06.250 --> 00:06:09.130
Adding events that repeat, like
monthly dinners and book club

00:06:09.130 --> 00:06:11.220
meetings, is a cool thing.

00:06:11.220 --> 00:06:14.580
Attachments are supported so you
can add event-related documents

00:06:14.580 --> 00:06:17.400
like a PDF of the show tickets.

00:06:17.400 --> 00:06:18.520
Where do you go now?

00:06:18.520 --> 00:06:21.710
Well, the first link gets you
started with the official docs.

00:06:21.710 --> 00:06:24.230
Want to enhance the email
you're already sending to users?

00:06:24.230 --> 00:06:26.800
Well, check out the
episode at link number two.

00:06:26.800 --> 00:06:28.700
Finally, down at the
bottom, are links

00:06:28.700 --> 00:06:31.380
to connect you to more episodes
in this and other Google

00:06:31.380 --> 00:06:33.190
Developer video series.

00:06:33.190 --> 00:06:35.360
By intelligently
and more completely

00:06:35.360 --> 00:06:37.300
managing your users'
overall experience,

00:06:37.300 --> 00:06:40.130
you simplify their lives by
saving them time and effort,

00:06:40.130 --> 00:06:42.780
and they can rest assured they
won't miss the event, leading

00:06:42.780 --> 00:06:44.780
to a high rate of engagement.

00:06:44.780 --> 00:06:48.040
In turn, they will thank you
by continuing to use your app

00:06:48.040 --> 00:06:50.060
rather than the competition's.

00:06:50.060 --> 00:06:52.320
Leverage the power of
the Google Calendar API

00:06:52.320 --> 00:06:54.979
and see how it can take
your app to the next level.

00:06:54.979 --> 00:06:56.520
I'm Wesley Chun from
Google and we'll

00:06:56.520 --> 00:06:59.940
see you the next time
on the LaunchPad Online.

00:06:59.940 --> 00:07:02.990
[MUSIC PLAYING]

