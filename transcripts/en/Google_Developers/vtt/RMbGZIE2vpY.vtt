WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.480
&gt;&gt; Koleda: Hi, I'm Eric Koleda, with the Google
Developer Relations Team. This screencast

00:00:05.480 --> 00:00:11.381
will show you how to get started with the
AdWords API Python Client Library. The library

00:00:11.381 --> 00:00:19.520
requires Python version 2.4 and higher, and
the modules; ZSI and PyXML. The first thing

00:00:19.520 --> 00:00:23.930
we need to do is download the library. The
best way to find it is by going to the AdWords

00:00:23.930 --> 00:00:38.520
API documentation at code.google.com/api/adwords.
Click on Docs, Libraries and Samples, and

00:00:38.520 --> 00:00:45.480
Python Client Library. This is the main project
page of the Client Library. On the right side

00:00:45.480 --> 00:00:53.680
of the page is a convenient link to download
the latest version of the library. Once the

00:00:53.680 --> 00:01:02.440
download is complete, extract it to a folder
of your choice.

00:01:02.440 --> 00:01:07.580
The first thing we need to do is install the
library. Open a command prompt and navigate

00:01:07.580 --> 00:01:16.220
to the folder you extracted the library to.
Next, run the "script, setup.py" with the

00:01:16.220 --> 00:01:25.049
parameters, "build and install". Now that
the Library is installed, we can set the authentication

00:01:25.049 --> 00:01:36.290
and configuration information. To do that,
run the script "awapiconfig.py". This will

00:01:36.290 --> 00:01:41.340
launch an interactive script which will ask
you for the required configuration values.

00:01:41.340 --> 00:01:45.720
When testing a new library, it's best to use
a Sandbox account. More information on the

00:01:45.720 --> 00:01:51.520
Sandbox environment is available on the screencast
inferred to the AdWords API Sandbox. Enter

00:01:51.520 --> 00:02:01.630
your Sandbox credentials, starting with the
email, password, client email that will contain

00:02:01.630 --> 00:02:10.099
one of the automatically generated client
accounts. We don't need a client customer

00:02:10.099 --> 00:02:19.529
ID since we specified the client email, the
user agent that identifies your application,

00:02:19.529 --> 00:02:30.819
a Developer Token which in the Sandbox is
the email address, plus, plus a currency code.

00:02:30.819 --> 00:02:38.559
The Application Token is ignored in the Sandbox,
the SOAP Library, ZSI in this case will disable

00:02:38.559 --> 00:02:44.909
debugging mode which displays the raw SOAP
XML request as they are being made, but enables

00:02:44.909 --> 00:02:52.099
SOAP XML logging and request logging. We're
now ready to run our first example. Navigate

00:02:52.099 --> 00:02:59.629
to the examples directory and then the subdirectory
for the version of the API you wish to test.

00:02:59.629 --> 00:03:10.890
We'll start by running the example, "get_all_campaigns.py".
Since this is a new a Sandbox account, there

00:03:10.890 --> 00:03:20.909
are no existing campaigns. We can add a campaign
by running "add_campaign.py", and a new campaign

00:03:20.909 --> 00:03:31.939
was created with the ID and name shown. If
we rerun "get_all_campaigns", we can see that

00:03:31.939 --> 00:03:37.469
the new campaign was found. As we can see,
the campaign was initially created in a pause

00:03:37.469 --> 00:03:42.310
state, so let's write our own example to make
it active. Browse to the examples folder,

00:03:42.310 --> 00:04:00.680
must create a new file called "activate_campaign.py",
and then open it in a Text Editor. We'll start

00:04:00.680 --> 00:04:05.981
by setting up our import statements. Client
is the main class of the library, and it's

00:04:05.981 --> 00:04:12.650
used to connect to the various services. Next,
we'll create a new client object, setting

00:04:12.650 --> 00:04:16.260
the path parameter to the directory where
the authentication and configuration files

00:04:16.260 --> 00:04:23.830
are stored. We'll get an instance of the campaign
service by running "client.GetCampaignService",

00:04:23.830 --> 00:04:31.980
passing in the server and version of the API.
Next, we'll set the campaign ID. This value

00:04:31.980 --> 00:04:43.200
can be retrieved from the output of the previous
examples.

00:04:43.200 --> 00:04:47.950
Next, we'll create our operations, which is
an array of dictionary objects. Since we are

00:04:47.950 --> 00:04:53.720
updating the campaign, we'll set the operator
to set and the operand to a campaign object

00:04:53.720 --> 00:04:59.190
with the ID that was set earlier, and the
status of active. We're now ready to make

00:04:59.190 --> 00:05:04.620
a request against the API by calling the Campaign
Service Mutate Method passing in the operations

00:05:04.620 --> 00:05:12.240
we've defined. Finally, we'll loop over the
returned campaigns displaying the updated

00:05:12.240 --> 00:05:19.810
information. We can save this file and go
back to our command prompt. We can now run

00:05:19.810 --> 00:05:28.930
"activate_campaign.py". The
request was successful and the campaign was

00:05:28.930 --> 00:05:35.560
returned with the status active. For notification
of new versions of the Client Library, subscribe

00:05:35.560 --> 00:05:40.840
to the Project Feeds. New services will be
announced on the AdWords API Blog. And if

00:05:40.840 --> 00:05:46.330
you have any questions about using the API,
contact the AdWords API Forum. Finally, if

00:05:46.330 --> 00:05:52.390
you find any bugs in the Library, submit an
issue to the Issue Tracker. Thank you for

00:05:52.390 --> 00:05:54.550
your time and enjoy using the Client Library.

