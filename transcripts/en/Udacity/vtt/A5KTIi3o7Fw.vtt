WEBVTT
Kind: captions
Language: en

00:00:00.280 --> 00:00:02.590
Another type synchronization that we often need in

00:00:02.590 --> 00:00:07.014
programs, is called barrier synchronization. This often occurs when

00:00:07.014 --> 00:00:10.434
there is a parallel section where several threads are

00:00:10.434 --> 00:00:14.386
doing something independent of each other, for example each

00:00:14.386 --> 00:00:16.742
thread is adding up the numbers in its

00:00:16.742 --> 00:00:20.480
own part of a shared array. Eventually, we want

00:00:20.480 --> 00:00:23.220
to know the total sum. So what needs to

00:00:23.220 --> 00:00:25.870
happen is we need to make sure that everybody

00:00:25.870 --> 00:00:29.440
has finished their own adding up, and that's

00:00:29.440 --> 00:00:32.584
what the barrier is. And only then somebody, for

00:00:32.584 --> 00:00:35.356
example, thread 0, can actually form the total

00:00:35.356 --> 00:00:38.640
sum and, for example, print it out. We don't

00:00:38.640 --> 00:00:41.560
want it to print the sum before we

00:00:41.560 --> 00:00:45.560
know that everybody's contributions to the sum are complete.

00:00:45.560 --> 00:00:48.044
Another thing that can happen is that we are

00:00:48.044 --> 00:00:50.873
computing the sum in this parallel way, and then

00:00:50.873 --> 00:00:53.660
all of the threads need to use this sum. So

00:00:53.660 --> 00:00:56.280
again, all of them need to wait for the sum

00:00:56.280 --> 00:00:59.790
to be certainly done. And only then can they proceed

00:00:59.790 --> 00:01:03.374
to actually use the sum. If thread 0 starts using the

00:01:03.374 --> 00:01:06.740
sum before making sure that other threads are done computing

00:01:06.740 --> 00:01:09.446
the sum, then what happens is we are using the sum

00:01:09.446 --> 00:01:12.020
that may not include all of the numbers that are

00:01:12.020 --> 00:01:15.970
in the array. Same for any other thread. So the barrier

00:01:15.970 --> 00:01:21.860
pretty much is a global wait that ensures that all threads have entered the

00:01:21.860 --> 00:01:24.900
barrier before any of them can proceed

00:01:24.900 --> 00:01:30.026
past the barrier. So the barrier synchronization ensures

00:01:30.026 --> 00:01:34.304
that all threads that need to arrive to the barrier have arrived before any

00:01:34.304 --> 00:01:37.910
can leave the barrier. A barrier implementation

00:01:37.910 --> 00:01:41.074
can have two variables. A counter that counts

00:01:41.074 --> 00:01:44.428
how many threads have arrived and the flag that gets

00:01:44.428 --> 00:01:48.320
set when the counter finally reaches N. So what each

00:01:48.320 --> 00:01:51.600
tread arriving to the barrier needs to do is increment

00:01:51.600 --> 00:01:54.160
the counter, check if the counter is equal to the

00:01:54.160 --> 00:01:56.750
number of threads that need to arrive. If it is

00:01:56.750 --> 00:01:59.850
equal, set the flag. If it's not equal, that means

00:01:59.850 --> 00:02:02.598
we are not the last arriving thread. Then we spin,

00:02:02.598 --> 00:02:06.440
waiting on the flag to finally become set. Of course,

00:02:06.440 --> 00:02:07.820
things are not as simple.

