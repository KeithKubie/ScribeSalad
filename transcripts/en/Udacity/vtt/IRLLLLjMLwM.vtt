WEBVTT
Kind: captions
Language: en

00:00:00.220 --> 00:00:02.080
So, now that we have seen, what the

00:00:02.080 --> 00:00:04.622
performance looks like when we refuse to make any

00:00:04.622 --> 00:00:07.750
predictions. Let's see what the performance is with

00:00:07.750 --> 00:00:11.407
the so called not-taken prediction, which amounts to simply

00:00:11.407 --> 00:00:14.029
fetching the next instruction, as if none of

00:00:14.029 --> 00:00:17.598
the instructions was a taken branch. When we refuse

00:00:17.598 --> 00:00:21.462
to predict anything, a branch, every branch, would

00:00:21.462 --> 00:00:25.700
cost us 3 cycles. And even a non-branch instruction

00:00:25.700 --> 00:00:27.887
would cost us 2 cycles, even in

00:00:27.887 --> 00:00:32.531
a relatively shallow five-stage pipeline. When we predict

00:00:32.531 --> 00:00:38.360
that the instruction we are fetching is not a taken branch, we get that branches

00:00:38.360 --> 00:00:43.907
now cost us 1 or 3 cycles. One cycle for not taken branch. Three cycles

00:00:43.907 --> 00:00:47.910
for taken branch. And a non-branch instruction always

00:00:47.910 --> 00:00:50.732
costs us 1 cycle. Because, in that case,

00:00:50.732 --> 00:00:53.562
the not-taken prediction is always correct. So as

00:00:53.562 --> 00:00:56.554
we can see, the predict not-taken always wins over

00:00:56.554 --> 00:00:59.946
refusing to predict. For non-branches, we are always 1

00:00:59.946 --> 00:01:03.236
cycle better. For branches, we are either the same

00:01:03.236 --> 00:01:06.520
or 2 cycles better. This is why every

00:01:06.520 --> 00:01:09.570
processor that has a pipeline will do some branch

00:01:09.570 --> 00:01:12.440
prediction, even if the prediction it is doing is

00:01:12.440 --> 00:01:15.650
simply increment the PC and fetch the next instruction.

00:01:15.650 --> 00:01:19.180
Note that that type of prediction is really cheap. All you

00:01:19.180 --> 00:01:22.070
have to do is increment the PC. You don't actually have to

00:01:22.070 --> 00:01:25.930
know anything about branches or other instructions. So it's very easy to

00:01:25.930 --> 00:01:28.550
do it. You have to be able to increment the PC anyway.

