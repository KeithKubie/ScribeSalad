WEBVTT
Kind: captions
Language: en

00:00:05.336 --> 00:00:06.161
&gt;&gt; James, you know,

00:00:06.161 --> 00:00:10.200
I really like how we're getting immediate visual results from our code.

00:00:10.200 --> 00:00:12.250
&gt;&gt; JavaScript's fun like that.

00:00:12.250 --> 00:00:14.080
It runs natively in the browser.

00:00:14.080 --> 00:00:17.080
And it allows us to run an inspector code very easily.

00:00:17.080 --> 00:00:20.050
That's something you should be doing when you're starting out as a developer.

00:00:20.050 --> 00:00:20.879
&gt;&gt; Yeah, it really is.

00:00:21.900 --> 00:00:23.850
By the way, why are we in your GitHub again?

00:00:23.850 --> 00:00:25.920
&gt;&gt; Because this is where I store my code and

00:00:25.920 --> 00:00:29.660
I wanted to get the students thinking about what it means to save their data.

00:00:31.440 --> 00:00:33.080
&gt;&gt; Like other programming languages,

00:00:33.080 --> 00:00:36.850
JavaScript gives us a way of saving data in the form of variables.

00:00:36.850 --> 00:00:39.230
The syntax looks like this.

00:00:39.230 --> 00:00:43.980
Var, variable name equals some valuable.

00:00:43.980 --> 00:00:46.760
To declare a new variable you begin with the keyword var,

00:00:47.840 --> 00:00:49.690
regardless of the data type your saving.

00:00:51.110 --> 00:00:52.320
In the example here,

00:00:53.680 --> 00:00:59.800
we're creating a variable called firstName in assigning it the string james.

00:00:59.800 --> 00:01:02.260
The string comes in closing quotes.

00:01:02.260 --> 00:01:05.730
Notice that saving variables is slightly different than Python,

00:01:05.730 --> 00:01:08.800
which doesn't require a key word like var.

00:01:08.800 --> 00:01:11.310
But otherwise, works the same.

00:01:11.310 --> 00:01:12.220
&gt;&gt; Good point.

00:01:12.220 --> 00:01:16.288
But otherwise, saving variables in Python and JavaScript are pretty similar.

00:01:16.288 --> 00:01:19.010
Numbers in JavaScript don't need quotes and there's no need to

00:01:19.010 --> 00:01:21.910
worry about any of the nuances between floating point numbers and

00:01:21.910 --> 00:01:26.340
integers, because all numbers are saved 64 bit floating point.

00:01:26.340 --> 00:01:29.600
&gt;&gt; Later on we'll see that arrays, functions and

00:01:29.600 --> 00:01:33.580
even objects use the same var syntax.

00:01:34.600 --> 00:01:37.350
Let us see if our variables were actually saved.

00:01:37.350 --> 00:01:41.750
I'm going to add console.log(firstName).

00:01:41.750 --> 00:01:45.280
Save this file and reload the website.

00:01:45.280 --> 00:01:48.200
Opening up the console to see if it shows up.

00:01:48.200 --> 00:01:49.370
&gt;&gt; And there it is.

00:01:49.370 --> 00:01:50.850
I like that strategy.

00:01:50.850 --> 00:01:53.750
The browser opens up a script with console.log in it.

00:01:53.750 --> 00:01:57.520
It'll print whatever information it receives to the browser console.

00:01:57.520 --> 00:01:58.240
&gt;&gt; Yep.

00:01:58.240 --> 00:01:59.920
It's a useful trick for debugging code.

