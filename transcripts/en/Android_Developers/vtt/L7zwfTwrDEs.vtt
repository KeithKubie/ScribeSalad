WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.962
[MUSIC PLAYING]

00:00:04.962 --> 00:00:06.420
JEN CHAI: Location
data brings some

00:00:06.420 --> 00:00:09.630
of the most useful and rich
and amazing experiences

00:00:09.630 --> 00:00:11.920
to users on mobile devices.

00:00:11.920 --> 00:00:15.150
Things like, turn
by turn directions.

00:00:15.150 --> 00:00:16.800
When was the last
time you pulled out

00:00:16.800 --> 00:00:21.500
a paper map to figure out how
to get from point A to point B?

00:00:21.500 --> 00:00:23.760
And if a road was
closed, rerouting

00:00:23.760 --> 00:00:26.970
was pulling over to
reconsult your paper map.

00:00:26.970 --> 00:00:30.810
Or worse yet, having to
actually talk to somebody

00:00:30.810 --> 00:00:33.940
to ask for directions.

00:00:33.940 --> 00:00:38.520
Next, recording the distance
of a hike or a run or a bicycle

00:00:38.520 --> 00:00:39.480
ride.

00:00:39.480 --> 00:00:42.240
It's never been easier
to map your route,

00:00:42.240 --> 00:00:44.340
or monitor your progress
whether you're just

00:00:44.340 --> 00:00:48.670
a casual runner, or training
for something specific.

00:00:48.670 --> 00:00:52.000
And of course, discovering
new restaurants and places

00:00:52.000 --> 00:00:53.170
of interest.

00:00:53.170 --> 00:00:56.080
It's become so easy to
find the best places

00:00:56.080 --> 00:01:00.800
to eat, to drink, to
sightsee, and of course--

00:01:00.800 --> 00:01:05.560
most importantly-- the best
places to take selfies.

00:01:05.560 --> 00:01:08.140
Now you can get reviews
and recommendations

00:01:08.140 --> 00:01:10.300
from thousands of
other users, instead

00:01:10.300 --> 00:01:12.520
of just consulting the
people that you know,

00:01:12.520 --> 00:01:17.740
or buying a guide which
gets obsolete over time.

00:01:17.740 --> 00:01:20.980
However, location data
is also some of our most

00:01:20.980 --> 00:01:23.200
personal information.

00:01:23.200 --> 00:01:25.210
As you heard in our
keynote yesterday,

00:01:25.210 --> 00:01:28.780
privacy and security have been
an important part of Android

00:01:28.780 --> 00:01:30.250
since the beginning.

00:01:30.250 --> 00:01:34.220
And it is a core part of
Android Q. In Android Q,

00:01:34.220 --> 00:01:36.740
we extend transparency
and control to users

00:01:36.740 --> 00:01:38.480
for their location data.

00:01:38.480 --> 00:01:41.330
Next, Praveen and Wei are
going to dive into the details.

00:01:41.330 --> 00:01:43.820
But let me start
with two driving

00:01:43.820 --> 00:01:46.430
principles that grounded how
we thought about these changes.

00:01:48.960 --> 00:01:51.852
As a user, you want to be
in control of your data.

00:01:51.852 --> 00:01:53.310
And you only want
to share location

00:01:53.310 --> 00:01:56.060
with apps when it makes sense.

00:01:56.060 --> 00:01:59.420
We want to provide simple,
discoverable, and easy

00:01:59.420 --> 00:02:01.700
to understand controls
to users so they

00:02:01.700 --> 00:02:04.520
know what apps have
access to their location,

00:02:04.520 --> 00:02:07.250
and whether it's on or off.

00:02:07.250 --> 00:02:08.750
We'll talk in this
session about how

00:02:08.750 --> 00:02:11.150
we're bringing more
control to users about when

00:02:11.150 --> 00:02:14.500
apps can access their location.

00:02:14.500 --> 00:02:17.520
Second, we want users
to have transparency

00:02:17.520 --> 00:02:20.440
over what apps have
access to their location,

00:02:20.440 --> 00:02:23.190
especially when it
might be unexpected.

00:02:23.190 --> 00:02:26.010
We'll also talk about how we're
providing helpful reminders

00:02:26.010 --> 00:02:29.250
to users about when apps
are accessing their location

00:02:29.250 --> 00:02:32.040
when in the background, so
they can determine whether they

00:02:32.040 --> 00:02:34.050
want to continue that or not.

00:02:34.050 --> 00:02:36.390
Next, I'll hand it to
Praveen to get us started.

00:02:39.124 --> 00:02:40.166
PRAVEEN CHANDRAN: Thanks.

00:02:44.900 --> 00:02:47.270
Hey, everyone.

00:02:47.270 --> 00:02:49.340
Very good morning to
all of you, and thanks

00:02:49.340 --> 00:02:50.940
for joining us today.

00:02:50.940 --> 00:02:52.310
I'm Praveen Chandran.

00:02:52.310 --> 00:02:56.180
I'm a product manager in the
Android Location Services team.

00:02:56.180 --> 00:03:00.500
As Jen said, we would like to
provide simple, discoverable,

00:03:00.500 --> 00:03:03.200
easy to understand
controls for users

00:03:03.200 --> 00:03:06.560
to be able to control
access to location data.

00:03:06.560 --> 00:03:08.870
Users only want to
share sensitive data--

00:03:08.870 --> 00:03:11.970
like location-- with
apps when it makes sense.

00:03:11.970 --> 00:03:16.790
So in Android Q, we have
added the ability for users

00:03:16.790 --> 00:03:20.810
to control which apps can access
their device location when

00:03:20.810 --> 00:03:23.540
they're not using the app.

00:03:23.540 --> 00:03:28.010
Now, before Android
Q, location permission

00:03:28.010 --> 00:03:31.610
was really a binary choice
in that a user could either

00:03:31.610 --> 00:03:36.490
allow or deny access to
their device location.

00:03:36.490 --> 00:03:39.890
If a user provided location
permission to an app,

00:03:39.890 --> 00:03:43.540
the app could get access to
the user's device location

00:03:43.540 --> 00:03:47.020
when the user was using the app,
but also when the user was not

00:03:47.020 --> 00:03:49.780
using the app.

00:03:49.780 --> 00:03:54.910
In Android Q, we have introduced
a new location permission--

00:03:54.910 --> 00:03:57.910
allow only while using the app.

00:03:57.910 --> 00:04:01.330
If a user chooses
this option, the app

00:04:01.330 --> 00:04:05.050
would be able to get access
to the user's device location

00:04:05.050 --> 00:04:08.140
only when the user
is using the app.

00:04:08.140 --> 00:04:10.780
For this new
permission, how do we

00:04:10.780 --> 00:04:13.640
define when the app is in use?

00:04:13.640 --> 00:04:15.430
Well, there are two scenarios.

00:04:18.260 --> 00:04:20.310
For this permission,
an app is considered

00:04:20.310 --> 00:04:24.660
to be in use when
the user is looking

00:04:24.660 --> 00:04:26.340
at the app on their
device screen,

00:04:26.340 --> 00:04:29.790
which is commonly known
as a foreground activity,

00:04:29.790 --> 00:04:34.240
or when the app is running
a foreground service.

00:04:34.240 --> 00:04:37.090
What's a good example
of a foreground service?

00:04:37.090 --> 00:04:39.760
Let us say, you're
using a navigation app

00:04:39.760 --> 00:04:44.860
and you have requested turn by
turn directions from the app.

00:04:44.860 --> 00:04:48.010
While the app is providing
turn by turn directions,

00:04:48.010 --> 00:04:51.040
if you hit on the home button
to get to the home screen,

00:04:51.040 --> 00:04:54.100
or you turn on the
device screen altogether,

00:04:54.100 --> 00:04:56.800
you would notice that the
navigation app would continue

00:04:56.800 --> 00:05:00.470
to provide directions even when
you are on the home screen.

00:05:00.470 --> 00:05:05.500
Now, that's a good example of an
app using a foreground service.

00:05:05.500 --> 00:05:07.210
For the rest of
this presentation,

00:05:07.210 --> 00:05:10.960
whenever we refer to
an app being in use

00:05:10.960 --> 00:05:14.060
or when we say an app
is in the foreground,

00:05:14.060 --> 00:05:17.800
we are referring to foreground
activity or foreground service.

00:05:17.800 --> 00:05:20.650
And every other type of
activity is considered

00:05:20.650 --> 00:05:23.260
to be background activity.

00:05:23.260 --> 00:05:26.380
In a few minutes, I'll
talk about some changes

00:05:26.380 --> 00:05:29.590
in Q related to
getting location when

00:05:29.590 --> 00:05:31.180
running a foreground service.

00:05:31.180 --> 00:05:35.170
But before I talk about that,
let me delve a little bit more

00:05:35.170 --> 00:05:39.830
into the details of
this new permission.

00:05:39.830 --> 00:05:41.870
To get location
permission, you need

00:05:41.870 --> 00:05:46.790
to declare ACCESS_FINE_LOCATION
or ACCESS_COARSE_LOCATION

00:05:46.790 --> 00:05:48.320
in the manifest.

00:05:48.320 --> 00:05:52.790
Typically, coarse location
is at the city level,

00:05:52.790 --> 00:05:57.150
while fine location is
as best as we can do.

00:05:57.150 --> 00:06:01.590
Before Android Q, if you had
specified ACCESS_FINE_LOCATION,

00:06:01.590 --> 00:06:04.260
or ACCESS_COARSE_LOCATION
in the manifest,

00:06:04.260 --> 00:06:08.010
your app could get
location in the foreground,

00:06:08.010 --> 00:06:10.710
and in the background.

00:06:10.710 --> 00:06:16.180
In Android Q, if your
app is targeting QSDK,

00:06:16.180 --> 00:06:20.160
you should add a declaration
for ACCESS_BACKGROUND_LOCATION

00:06:20.160 --> 00:06:22.830
in the manifest,
if your app needs

00:06:22.830 --> 00:06:25.920
to access the user's device
location in the background

00:06:25.920 --> 00:06:30.600
because your current declaration
of ACCESS_FINE_LOCATION,

00:06:30.600 --> 00:06:33.210
or ACCESS_COARSE_LOCATION
will only

00:06:33.210 --> 00:06:36.210
let your app access the
device location when

00:06:36.210 --> 00:06:38.210
the app is in the foreground.

00:06:38.210 --> 00:06:43.400
However, if your app
is targeting pre-QSDK,

00:06:43.400 --> 00:06:46.700
your existing declaration
of ACCESS_FINE_LOCATION

00:06:46.700 --> 00:06:49.400
or ACCESS_COARSE_LOCATION
would automatically

00:06:49.400 --> 00:06:52.070
be mapped to
ACCESS_BACKGROUND_LOCATION.

00:06:52.070 --> 00:06:55.250
And there really is no
way for apps to opt out

00:06:55.250 --> 00:06:58.580
of this automatic mapping.

00:06:58.580 --> 00:07:02.690
Now, one of the key
benefits of targeting QSDK

00:07:02.690 --> 00:07:07.690
is that if your app needs
location permission only

00:07:07.690 --> 00:07:09.920
when the app is
in the foreground,

00:07:09.920 --> 00:07:12.610
you can choose to request
only this location

00:07:12.610 --> 00:07:15.460
permission from the
user, and get location

00:07:15.460 --> 00:07:17.600
when the app is in use.

00:07:17.600 --> 00:07:20.240
In other words,
you can choose not

00:07:20.240 --> 00:07:23.390
to request location permission
when the app is not in use,

00:07:23.390 --> 00:07:25.940
or rather, if the app
is in the background.

00:07:25.940 --> 00:07:30.350
As a best practice, we
highly recommend developers

00:07:30.350 --> 00:07:33.590
to utilize this
capability and always

00:07:33.590 --> 00:07:38.800
ask only for the permission
needed for the app.

00:07:38.800 --> 00:07:41.180
Another key benefit
of targeting QSDK

00:07:41.180 --> 00:07:47.280
is that your app can now make
incremental location permission

00:07:47.280 --> 00:07:48.440
requests.

00:07:48.440 --> 00:07:49.970
And incremental
permission requests

00:07:49.970 --> 00:07:54.180
are incredibly helpful in
presenting the location

00:07:54.180 --> 00:07:57.650
permission dialog whenever
the user accesses the feature.

00:07:57.650 --> 00:08:01.040
Again, as a best
practice, we recommend

00:08:01.040 --> 00:08:05.060
developers show the permission
dialog when the user accesses

00:08:05.060 --> 00:08:09.410
the relevant feature, so
that the user can understand

00:08:09.410 --> 00:08:12.560
why an app is asking for
a certain permission,

00:08:12.560 --> 00:08:15.560
or even for a certain
level of permission.

00:08:15.560 --> 00:08:18.890
Let us say your app
needs to access location

00:08:18.890 --> 00:08:22.250
in the foreground and/or
in the background.

00:08:22.250 --> 00:08:25.790
Users are much more likely
to grant the level of access

00:08:25.790 --> 00:08:29.390
needed for your app when users
are requested to evaluate

00:08:29.390 --> 00:08:31.640
these permissions
requests separately,

00:08:31.640 --> 00:08:35.730
and at the time that they are
accessing the relevant feature.

00:08:35.730 --> 00:08:38.210
Let's take this example
of My Train Commute

00:08:38.210 --> 00:08:42.970
app, which helps users
manage their train commute.

00:08:42.970 --> 00:08:46.750
This app would provide the
train schedule of a nearby train

00:08:46.750 --> 00:08:50.500
station based on the
user's location, when

00:08:50.500 --> 00:08:52.200
the user is looking at the app.

00:08:52.200 --> 00:08:56.170
And this app would send
train commute notifications

00:08:56.170 --> 00:08:58.960
when the user is not
actively looking at the app,

00:08:58.960 --> 00:09:02.470
based on the user's
background location.

00:09:02.470 --> 00:09:05.320
Now for this app,
when the user opens

00:09:05.320 --> 00:09:09.490
the app for the first
time and the user wants

00:09:09.490 --> 00:09:12.850
to access train
schedules, at that time,

00:09:12.850 --> 00:09:16.210
the app can show the dialog
that you see on the screen,

00:09:16.210 --> 00:09:18.520
requesting only
while-in-use permission.

00:09:18.520 --> 00:09:21.250
And the user is
likely to understand

00:09:21.250 --> 00:09:23.410
why the app is asking
for this permission,

00:09:23.410 --> 00:09:25.498
saying, yeah, I get it.

00:09:25.498 --> 00:09:27.790
In order to get the train
schedule of a nearby station,

00:09:27.790 --> 00:09:30.340
this app needs to
know my location now.

00:09:30.340 --> 00:09:32.920
And the user would be much
more likely to provide

00:09:32.920 --> 00:09:34.270
this permission.

00:09:34.270 --> 00:09:38.990
Let us say the user has
provided this permission.

00:09:38.990 --> 00:09:41.270
Then, the user looks
around the app,

00:09:41.270 --> 00:09:44.720
reaches the train commute
notifications feature,

00:09:44.720 --> 00:09:47.870
wants to opt in to train
commute notifications.

00:09:47.870 --> 00:09:50.720
At that point in
time, the app can

00:09:50.720 --> 00:09:53.180
show the permission
dialog that you see here,

00:09:53.180 --> 00:09:56.880
requesting the user to provide
the higher level of access,

00:09:56.880 --> 00:09:59.750
which is the ability to
access the device location all

00:09:59.750 --> 00:10:01.550
the time.

00:10:01.550 --> 00:10:04.040
If the dialog is
presented at that time,

00:10:04.040 --> 00:10:07.340
the user would think, in
order to send a notification,

00:10:07.340 --> 00:10:09.800
this app needs to access my
location in the background.

00:10:09.800 --> 00:10:10.590
I get it.

00:10:10.590 --> 00:10:13.870
So I'll provide this
level of access.

00:10:13.870 --> 00:10:16.780
As you can see from the dialog,
in the incremental permission

00:10:16.780 --> 00:10:19.180
request the user would
have two options.

00:10:19.180 --> 00:10:22.600
Either to allow the app to
access the device location all

00:10:22.600 --> 00:10:26.890
the time, or to say, keep
the current level of access.

00:10:26.890 --> 00:10:30.540
I don't want to provide
the higher level of access.

00:10:30.540 --> 00:10:34.650
Now, to force request permission
to access device location only

00:10:34.650 --> 00:10:39.390
in the foreground, you can
specify, ACCESS_COARSE_LOCATION

00:10:39.390 --> 00:10:43.080
or ACCESS_FINE_LOCATION in the
request permissions method.

00:10:43.080 --> 00:10:46.290
And if the user
allows, your app would

00:10:46.290 --> 00:10:50.900
be able to access device
location in the foreground.

00:10:50.900 --> 00:10:53.900
How do you request users for
a higher level of access,

00:10:53.900 --> 00:10:56.870
or rather the ability to
access device location

00:10:56.870 --> 00:10:58.430
in the background?

00:10:58.430 --> 00:11:02.930
As a best practice, we recommend
developers to first check

00:11:02.930 --> 00:11:06.890
if your app has access to device
location in the foreground.

00:11:06.890 --> 00:11:11.420
If it does, then you can specify
ACCESS_BACKGROUND_LOCATION

00:11:11.420 --> 00:11:13.490
in the Request
Permissions method

00:11:13.490 --> 00:11:17.930
to request a user for this
higher level of access.

00:11:17.930 --> 00:11:22.730
On that note, how do you
know if your app has access

00:11:22.730 --> 00:11:24.695
to your device location
in the foreground,

00:11:24.695 --> 00:11:27.860
and/or in the background?

00:11:27.860 --> 00:11:30.740
You can use the
checkSelfPermission method

00:11:30.740 --> 00:11:35.420
to see if your app has been
granted ACCESS_FINE_LOCATION

00:11:35.420 --> 00:11:37.680
or ACCESS_COARSE_LOCATION
permission.

00:11:37.680 --> 00:11:40.340
And if it has been
granted, your app

00:11:40.340 --> 00:11:45.250
can access the user's device
location in the foreground.

00:11:45.250 --> 00:11:47.800
You can use the
same method to check

00:11:47.800 --> 00:11:50.420
if the app has
ACCESS_BACKGROUND_LOCATION

00:11:50.420 --> 00:11:52.160
permission granted.

00:11:52.160 --> 00:11:53.890
And if it has been
granted, your app

00:11:53.890 --> 00:11:59.500
can now access the user's device
location in the background.

00:11:59.500 --> 00:12:03.520
A key aspect to think about
with this new permission

00:12:03.520 --> 00:12:07.180
is what is the impact of
this new location permission

00:12:07.180 --> 00:12:11.150
based on the SDK version
targeted by your app?

00:12:11.150 --> 00:12:13.760
Users will be able to set
while-in-use permission

00:12:13.760 --> 00:12:18.320
for apps requesting location
permission in Android Q.

00:12:18.320 --> 00:12:20.510
Users could go to
Settings and change

00:12:20.510 --> 00:12:24.890
the permission of your app from
all the time, to while-in-use.

00:12:24.890 --> 00:12:28.230
What does that
mean for your app?

00:12:28.230 --> 00:12:31.290
If your app is
targeting PSDK or lower,

00:12:31.290 --> 00:12:32.760
your app could get
into a situation

00:12:32.760 --> 00:12:35.640
where your app is
expecting location updates

00:12:35.640 --> 00:12:38.730
in the background,
but the user would

00:12:38.730 --> 00:12:40.470
have changed the
location permission

00:12:40.470 --> 00:12:42.600
for your app to while-in-use.

00:12:42.600 --> 00:12:45.990
At that point in time, your
app cannot get location updates

00:12:45.990 --> 00:12:49.830
in the background, due to
which some features that are

00:12:49.830 --> 00:12:54.610
dependent on background location
may not work as intended.

00:12:54.610 --> 00:12:57.630
We highly suggest developers
to handle the situation

00:12:57.630 --> 00:13:00.840
graciously, and make
sure the features that

00:13:00.840 --> 00:13:03.090
are dependent on
background location

00:13:03.090 --> 00:13:07.260
would provide the right
messaging to the user,

00:13:07.260 --> 00:13:09.390
letting them know that
the app doesn't have

00:13:09.390 --> 00:13:12.720
this level of access, or make
sure the features continue

00:13:12.720 --> 00:13:17.580
to work as intended, even
without background location.

00:13:17.580 --> 00:13:20.990
We also highly recommend
developers to test and upgrade

00:13:20.990 --> 00:13:25.350
to QSDK as early as possible.

00:13:25.350 --> 00:13:28.370
Now for this new permission,
another key aspect

00:13:28.370 --> 00:13:31.900
to think about is what
would happen to the location

00:13:31.900 --> 00:13:35.480
permission of apps when a
user upgrades their device

00:13:35.480 --> 00:13:38.860
from Android Pie to Android Q?

00:13:38.860 --> 00:13:42.360
Well, the apps which had
location permission in Android

00:13:42.360 --> 00:13:45.900
Pie would continue to
retain the permissions even

00:13:45.900 --> 00:13:47.580
after the device upgrade.

00:13:47.580 --> 00:13:50.970
In other words, if an app had
location permission in Android

00:13:50.970 --> 00:13:54.630
Pie, the app would be able
to access the user's device

00:13:54.630 --> 00:13:57.780
location in the foreground,
and in the background--

00:13:57.780 --> 00:13:59.760
even after the device upgrade.

00:13:59.760 --> 00:14:03.690
We chose to retain location
permissions for apps on OS

00:14:03.690 --> 00:14:06.900
upgrade, so that the user
experiences do not break

00:14:06.900 --> 00:14:09.082
and the apps-- or the
features of the apps--

00:14:09.082 --> 00:14:10.290
continue to work as intended.

00:14:13.080 --> 00:14:16.540
A few slides back, we
talked about when an app

00:14:16.540 --> 00:14:18.740
was considered to be in use.

00:14:18.740 --> 00:14:21.750
And at that point, I'd said
we'll talk a little bit more

00:14:21.750 --> 00:14:24.370
about foreground services.

00:14:24.370 --> 00:14:27.370
In Q, we are
introducing some changes

00:14:27.370 --> 00:14:30.580
to how apps can get device
location when they are

00:14:30.580 --> 00:14:32.860
running a foreground service.

00:14:32.860 --> 00:14:35.620
But before we talk
about the change, let's

00:14:35.620 --> 00:14:39.190
for a moment understand the
need for accessing location when

00:14:39.190 --> 00:14:42.520
running a foreground service.

00:14:42.520 --> 00:14:46.150
When using an app, the
user might use a feature

00:14:46.150 --> 00:14:49.390
that requires the app to
access their device location,

00:14:49.390 --> 00:14:52.060
even after the user
gets to the home screen

00:14:52.060 --> 00:14:55.150
by hitting the Home button,
or if the user turns off

00:14:55.150 --> 00:14:56.900
their device screen.

00:14:56.900 --> 00:14:59.630
A good example, again,
would be the navigation app

00:14:59.630 --> 00:15:02.280
that we spoke about
a few minutes ago.

00:15:02.280 --> 00:15:04.850
Now, in the navigation
app, if you remember,

00:15:04.850 --> 00:15:09.650
the user initiated an action
in the app requesting the app

00:15:09.650 --> 00:15:12.050
to provide turn by
turn directions.

00:15:12.050 --> 00:15:15.620
And while the app was providing
the turn by turn directions,

00:15:15.620 --> 00:15:19.410
the user hit the Home button
to get to the home screen.

00:15:19.410 --> 00:15:23.520
In such cases, the app should
continue the action initiated

00:15:23.520 --> 00:15:27.660
by the user, and continue to
get location to provide turn

00:15:27.660 --> 00:15:29.430
by turn directions.

00:15:29.430 --> 00:15:32.850
In this example, the app would
use a foreground service,

00:15:32.850 --> 00:15:35.010
and needs to access
location when

00:15:35.010 --> 00:15:37.220
running a foreground service.

00:15:37.220 --> 00:15:42.650
Typically, whenever an app needs
to continue an action initiated

00:15:42.650 --> 00:15:46.370
by the user in the
app, the app would need

00:15:46.370 --> 00:15:49.220
to use a foreground service.

00:15:49.220 --> 00:15:52.670
Now, users expect this
type of navigation to work,

00:15:52.670 --> 00:15:56.570
even if the app only
has while-in-use access.

00:15:56.570 --> 00:16:00.080
To be in line with the
user's expectations,

00:16:00.080 --> 00:16:02.480
the apps need to use
foreground service,

00:16:02.480 --> 00:16:05.060
and need to continue
to get location when

00:16:05.060 --> 00:16:08.180
running a foreground service.

00:16:08.180 --> 00:16:11.240
What's new in Q
is that apps which

00:16:11.240 --> 00:16:14.390
need to get location when
running a foreground service

00:16:14.390 --> 00:16:18.260
need to declare foreground
service of type location

00:16:18.260 --> 00:16:19.790
in the manifest.

00:16:19.790 --> 00:16:22.640
We will be limiting
permission usage based

00:16:22.640 --> 00:16:25.890
on this type of declaration.

00:16:25.890 --> 00:16:29.670
You can declare foreground
service of type location

00:16:29.670 --> 00:16:33.150
using the foreground service
type attribute in the service

00:16:33.150 --> 00:16:35.680
element of the manifest file.

00:16:35.680 --> 00:16:38.950
If you do not declare foreground
service of type location,

00:16:38.950 --> 00:16:43.570
and if the user has provided
only while-in-use permission

00:16:43.570 --> 00:16:47.530
to your app, your app cannot
get location when running

00:16:47.530 --> 00:16:49.920
a foreground service.

00:16:49.920 --> 00:16:51.900
If an app has
all-the-time access,

00:16:51.900 --> 00:16:56.800
though, it can get location when
running a foreground service,

00:16:56.800 --> 00:17:00.310
even without this
declaration in the manifest.

00:17:00.310 --> 00:17:02.470
If an app specifies
foreground service

00:17:02.470 --> 00:17:04.990
of type location
in the manifest,

00:17:04.990 --> 00:17:11.250
the app has to compile
against the QSDK version.

00:17:11.250 --> 00:17:15.270
Now, this changes for all apps,
irrespective of the target SDK

00:17:15.270 --> 00:17:15.960
version.

00:17:15.960 --> 00:17:19.680
In other words, apps need to
declare foreground service

00:17:19.680 --> 00:17:23.640
of type location in the
manifest if the app wants

00:17:23.640 --> 00:17:26.369
to access location when
running a foreground service,

00:17:26.369 --> 00:17:29.190
and the app has
either only requested

00:17:29.190 --> 00:17:31.320
while-in-use
permission, or the user

00:17:31.320 --> 00:17:35.160
has only provided while-in-use
permission to the app.

00:17:35.160 --> 00:17:38.910
On that note, there was a
talk on adapting your apps

00:17:38.910 --> 00:17:41.230
for Android Q
privacy requirements.

00:17:41.230 --> 00:17:43.590
I think it was at
8:30, today, morning.

00:17:43.590 --> 00:17:46.450
The talk was given by
Charmaine and Svet.

00:17:46.450 --> 00:17:51.240
One of the aspects that was
discussed in that presentation

00:17:51.240 --> 00:17:54.360
was the different types
of foreground service.

00:17:54.360 --> 00:17:56.190
In this talk, I covered
foreground service

00:17:56.190 --> 00:17:57.630
of type location.

00:17:57.630 --> 00:18:00.330
If you would like to know about
the other types of foreground

00:18:00.330 --> 00:18:03.960
service, I highly recommend
you should check out

00:18:03.960 --> 00:18:07.300
that talk on YouTube later.

00:18:07.300 --> 00:18:09.730
Now, at the beginning
of the session,

00:18:09.730 --> 00:18:13.180
Jen talked about
providing more visibility

00:18:13.180 --> 00:18:17.740
to the user on apps accessing
the user's device location.

00:18:17.740 --> 00:18:20.950
As a way to bring more
transparency and visibility

00:18:20.950 --> 00:18:26.800
to users in Android Q, we are
introducing location reminder

00:18:26.800 --> 00:18:28.810
notifications.

00:18:28.810 --> 00:18:30.910
Location information
is sensitive,

00:18:30.910 --> 00:18:34.290
and users share sensitive
data-- like location--

00:18:34.290 --> 00:18:35.740
when it makes sense.

00:18:35.740 --> 00:18:39.550
But occasionally, users
could forget the level

00:18:39.550 --> 00:18:44.140
of location permission
given to apps, especially

00:18:44.140 --> 00:18:46.150
the less frequently used apps.

00:18:46.150 --> 00:18:51.610
So we are going to gently nudge
the user with a notification

00:18:51.610 --> 00:18:55.570
if the app accesses their device
location when the user is not

00:18:55.570 --> 00:18:59.060
actively using the app.

00:18:59.060 --> 00:19:01.720
Here is an example of what
that notification would

00:19:01.720 --> 00:19:05.220
look like in Android
Q. In this case,

00:19:05.220 --> 00:19:09.480
the My Train Commute app has
access to the user's location

00:19:09.480 --> 00:19:11.920
when the app was not being used.

00:19:11.920 --> 00:19:14.190
So the user gets
this notification,

00:19:14.190 --> 00:19:16.380
and the notification
lets the user

00:19:16.380 --> 00:19:20.730
know that this app can access
their device location all

00:19:20.730 --> 00:19:23.230
the time.

00:19:23.230 --> 00:19:26.710
At that point, when the user
taps on their notification,

00:19:26.710 --> 00:19:30.400
the user will be directed
to the Location Permission

00:19:30.400 --> 00:19:33.130
page of the app
where the user could

00:19:33.130 --> 00:19:37.090
make a decision on the right
level of access for the app,

00:19:37.090 --> 00:19:41.980
and can even choose to change
the permission to while-in-use,

00:19:41.980 --> 00:19:44.730
or deny.

00:19:44.730 --> 00:19:48.340
When does the user
get this notification?

00:19:48.340 --> 00:19:52.930
The user will get a one-time
per app notification

00:19:52.930 --> 00:19:55.840
when the user provides
all-the-time location

00:19:55.840 --> 00:19:58.660
permission to an
app, and the app

00:19:58.660 --> 00:20:03.520
receives fine location
update in the background.

00:20:03.520 --> 00:20:06.670
To add a bit more
context, if the user

00:20:06.670 --> 00:20:09.250
has provided
all-the-time access,

00:20:09.250 --> 00:20:13.390
changes it to while-in-use,
or deny, and then eventually

00:20:13.390 --> 00:20:17.060
in the future again reverts
it back to all-the-time,

00:20:17.060 --> 00:20:19.140
the user might see the
notification again.

00:20:21.660 --> 00:20:25.380
Till now, I have
covered the features

00:20:25.380 --> 00:20:28.740
in Android Q intended to
provide more visibility

00:20:28.740 --> 00:20:32.010
and control to users on
apps accessing their device

00:20:32.010 --> 00:20:32.920
location.

00:20:32.920 --> 00:20:35.340
I now request Wei
to come up on stage,

00:20:35.340 --> 00:20:37.350
to talk about
location permission

00:20:37.350 --> 00:20:41.430
considerations for Wi-Fi APIs.

00:20:41.430 --> 00:20:48.360
[APPLAUSE]

00:20:48.360 --> 00:20:49.500
WEI WANG: Thanks, Praveen.

00:20:49.500 --> 00:20:50.920
Good morning, everyone.

00:20:50.920 --> 00:20:52.620
My name is Wei Wang.

00:20:52.620 --> 00:20:56.330
I'm a software engineer for
the Android location team.

00:20:56.330 --> 00:21:00.270
Praveen talked about more
control, and better visibility

00:21:00.270 --> 00:21:03.960
of direct location access
through location service APIs

00:21:03.960 --> 00:21:07.720
in Android Q.
However, on Android,

00:21:07.720 --> 00:21:10.470
it's possible to get
indirect location

00:21:10.470 --> 00:21:14.670
access from connectivity
APIs, especially Wi-Fi APIs.

00:21:17.300 --> 00:21:19.790
As we all know,
Wi-Fi connectivity

00:21:19.790 --> 00:21:22.710
is critical on mobile devices.

00:21:22.710 --> 00:21:25.820
As Wi-Fi devices
become ubiquitous,

00:21:25.820 --> 00:21:29.150
people connect to Wi-Fi
almost all the time.

00:21:29.150 --> 00:21:32.750
They connect to Wi-Fi access
points to go to the internet,

00:21:32.750 --> 00:21:36.140
and connect to local Wi-Fi
devices for peer-to-peer file

00:21:36.140 --> 00:21:38.720
transfer, or
managing IoT devices.

00:21:44.630 --> 00:21:46.760
Applications
sometimes want to have

00:21:46.760 --> 00:21:49.480
users connect to Wi-Fi devices.

00:21:49.480 --> 00:21:54.940
Before Q, Android provides
APIs for Wi-Fi connectivity.

00:21:54.940 --> 00:21:58.420
Applications typically
do a Wi-Fi scan first,

00:21:58.420 --> 00:22:01.990
to get a list of
nearby Wi-Fi networks,

00:22:01.990 --> 00:22:06.060
and choose which Wi-Fi
device to connect to.

00:22:06.060 --> 00:22:08.190
Knowing the nearby
Wi-Fi devices makes

00:22:08.190 --> 00:22:11.700
it possible to derive
the device location.

00:22:11.700 --> 00:22:16.310
So these APIs are protected
by location permission.

00:22:16.310 --> 00:22:19.340
This causes a lot of
confusion to users,

00:22:19.340 --> 00:22:22.640
as they just want to use the
app for Wi-Fi connectivity

00:22:22.640 --> 00:22:25.910
and do not understand
why the app requested

00:22:25.910 --> 00:22:27.105
location permission.

00:22:29.830 --> 00:22:33.000
To solve this
problem on Android Q,

00:22:33.000 --> 00:22:37.380
we're introducing two new Wi-Fi
APIs, Wi-Fi NetworkSuggestion,

00:22:37.380 --> 00:22:39.780
and Wi-Fi NetworkSpecify.

00:22:39.780 --> 00:22:42.180
Using theses APIs,
the application

00:22:42.180 --> 00:22:45.990
can tell the Wi-Fi system
what Wi-Fi devices they want

00:22:45.990 --> 00:22:50.550
to connect to, and the Wi-Fi
system will do the scan

00:22:50.550 --> 00:22:54.422
and decide whether to
connect to those devices

00:22:54.422 --> 00:22:55.380
when they are in range.

00:22:58.360 --> 00:23:01.450
The key difference
from the pre-Q API

00:23:01.450 --> 00:23:04.630
is, using the new
APIs, the application

00:23:04.630 --> 00:23:08.450
will not get access to
the nearby Wi-Fi device

00:23:08.450 --> 00:23:09.850
information.

00:23:09.850 --> 00:23:14.590
So the application does not need
to request location permission.

00:23:14.590 --> 00:23:20.430
Furthermore, to better
protect user privacy on Q,

00:23:20.430 --> 00:23:24.810
all the Wi-Fi APIs that
have location information

00:23:24.810 --> 00:23:28.290
will be protected by
FIND_LOCATION_PERMISSION.

00:23:28.290 --> 00:23:31.110
We highly recommend
using the new APIs

00:23:31.110 --> 00:23:36.470
for Wi-Fi connectivity, to avoid
requesting location permission

00:23:36.470 --> 00:23:39.260
in your application.

00:23:39.260 --> 00:23:43.220
Let's take a deeper
look at these APIs.

00:23:43.220 --> 00:23:45.320
The first API I
want to talk about,

00:23:45.320 --> 00:23:48.300
is Wi-Fi NetworkSuggestion.

00:23:48.300 --> 00:23:51.240
One of the major case
for Wi-Fi connectivity

00:23:51.240 --> 00:23:54.630
is to connect the mobile
device to the internet,

00:23:54.630 --> 00:23:58.730
so users can browse the web,
or communicate with others.

00:23:58.730 --> 00:24:01.280
Some applications may
know certain networks

00:24:01.280 --> 00:24:05.330
that user can connect to when
they go to airports, libraries,

00:24:05.330 --> 00:24:06.610
or coffee shops.

00:24:06.610 --> 00:24:10.530
On Q, such apps can use
the Wi-Fi NetworkSuggestion

00:24:10.530 --> 00:24:14.120
APIs to recommend those
networks to the Wi-Fi system.

00:24:16.920 --> 00:24:19.380
Let's look at an example.

00:24:19.380 --> 00:24:23.400
A local coffee shop wants
to provide Wi-Fi internet

00:24:23.400 --> 00:24:25.860
to its customers when
they enter the store.

00:24:25.860 --> 00:24:29.050
They want to recommend the
Wi-Fi network to the device

00:24:29.050 --> 00:24:32.910
through the app called
My Coffee Shop so users

00:24:32.910 --> 00:24:36.602
can connect automatically
when they enter the store.

00:24:36.602 --> 00:24:37.560
Let's see how it works.

00:24:40.190 --> 00:24:45.040
First, the app needs to
tell the Wi-Fi system what

00:24:45.040 --> 00:24:47.020
network to connect to.

00:24:47.020 --> 00:24:49.180
This is done by
setting either the SSID

00:24:49.180 --> 00:24:54.220
or [INAUDIBLE] in a Wi-Fi
NetworkSuggestion object.

00:24:54.220 --> 00:24:57.010
Also, the app needs to
tell the Wi-Fi system how

00:24:57.010 --> 00:24:59.550
to connect to these networks.

00:24:59.550 --> 00:25:03.220
So if any credentials are
needed for the Wi-Fi connection,

00:25:03.220 --> 00:25:05.600
the app also needs to
provide that in the Wi-Fi

00:25:05.600 --> 00:25:08.980
NetworkSuggestion object.

00:25:08.980 --> 00:25:12.960
After that, it can simply
call addNetworkSuggestions

00:25:12.960 --> 00:25:15.220
to add this suggestion
to Wi-Fi manager.

00:25:15.220 --> 00:25:18.380
So we only use one
NetworkSuggestion as an example

00:25:18.380 --> 00:25:21.000
here, but in practice,
the coffee shop

00:25:21.000 --> 00:25:23.730
may own multiple,
different Wi-Fi networks,

00:25:23.730 --> 00:25:27.590
and the app can add a
list of those suggestions.

00:25:27.590 --> 00:25:30.330
After these suggestions
are successfully added,

00:25:30.330 --> 00:25:33.450
Wi-Fi system will be able
to use these suggestions

00:25:33.450 --> 00:25:34.607
for connection.

00:25:37.410 --> 00:25:40.550
Once the Wi-Fi system
detects the network suggested

00:25:40.550 --> 00:25:43.880
by the app is nearby,
and these apps are

00:25:43.880 --> 00:25:47.570
based for Wi-Fi internet
connectivity at that moment,

00:25:47.570 --> 00:25:50.900
it will show a notification
to let the users know

00:25:50.900 --> 00:25:54.350
that a network suggested
by My Coffee Shop app

00:25:54.350 --> 00:25:57.260
is available for connection,
and requests approval

00:25:57.260 --> 00:25:59.420
from the user.

00:25:59.420 --> 00:26:03.550
After a user approves the
suggestion, the next time,

00:26:03.550 --> 00:26:05.740
the Wi-Fi system
will auto-connect

00:26:05.740 --> 00:26:09.800
to the network suggested
by the same app,

00:26:09.800 --> 00:26:12.750
if these networks are
the best for connectivity

00:26:12.750 --> 00:26:15.030
at that moment.

00:26:15.030 --> 00:26:18.930
So the My Coffee Shop app
only provides the suggestions.

00:26:18.930 --> 00:26:21.570
It does not get access to
the nearby Wi-Fi device

00:26:21.570 --> 00:26:24.930
information, and it does
not know that the suggestion

00:26:24.930 --> 00:26:26.800
network has been connected.

00:26:26.800 --> 00:26:30.540
So it has no location
access, and the app

00:26:30.540 --> 00:26:33.651
does not need to request
location permission.

00:26:36.240 --> 00:26:37.830
Occasionally, the
application may

00:26:37.830 --> 00:26:41.400
want to know that the suggested
network has been connected.

00:26:41.400 --> 00:26:45.240
For instance, the coffee
shop may require user login

00:26:45.240 --> 00:26:47.340
before using their network.

00:26:47.340 --> 00:26:50.790
And my coffee shop wants
log in users automatically

00:26:50.790 --> 00:26:52.320
after the connection,
and that app

00:26:52.320 --> 00:26:56.460
will be directing users
to a captive portal.

00:26:56.460 --> 00:27:00.300
Wi-Fi NetworkSuggestion
provides the capability

00:27:00.300 --> 00:27:01.810
for this purpose.

00:27:01.810 --> 00:27:06.330
However, since the app knows the
location of the Wi-Fi network,

00:27:06.330 --> 00:27:08.880
knowing the connection
has been established

00:27:08.880 --> 00:27:10.770
makes it possible
for the application

00:27:10.770 --> 00:27:13.620
to derive the device location.

00:27:13.620 --> 00:27:18.283
So this app will now
request location permission.

00:27:22.920 --> 00:27:25.070
Similar with the
previous example,

00:27:25.070 --> 00:27:27.010
create a Wi-Fi
network suggestion

00:27:27.010 --> 00:27:30.010
object with the SSID
and a credential

00:27:30.010 --> 00:27:31.480
for the access point.

00:27:31.480 --> 00:27:35.830
The key here is,
.setIsAppInteractionRequired

00:27:35.830 --> 00:27:39.280
to indicate the application
wants to be notified when

00:27:39.280 --> 00:27:42.450
the device has connected
to the suggested network.

00:27:44.960 --> 00:27:47.830
Next, register a
broadcast receiver

00:27:47.830 --> 00:27:50.810
to listen to WIFI NETWORK
SUGGESTION POST CONNECTION

00:27:50.810 --> 00:27:52.400
broadcast.

00:27:52.400 --> 00:27:55.070
This broadcast is sent
to the application

00:27:55.070 --> 00:27:59.750
when the network suggested
by the app is connected.

00:27:59.750 --> 00:28:02.150
And I've just said, knowing
the connection makes

00:28:02.150 --> 00:28:04.640
it possible to derive
the device location,

00:28:04.640 --> 00:28:07.610
so the broadcast is only
sent to applications

00:28:07.610 --> 00:28:10.670
if it has been granted
always access fine location

00:28:10.670 --> 00:28:11.870
permission.

00:28:11.870 --> 00:28:14.660
So we recommend using
this capability only

00:28:14.660 --> 00:28:17.200
when you have a very strong
user case of doing so.

00:28:19.928 --> 00:28:21.470
So that's the network
suggestion API,

00:28:21.470 --> 00:28:26.350
for suggesting access points
for internet connectivity.

00:28:26.350 --> 00:28:28.810
Another [INAUDIBLE] case
for Wi-Fi connectivity

00:28:28.810 --> 00:28:31.300
is connect to a
local Wi-Fi device

00:28:31.300 --> 00:28:33.910
for peer-to-peer
Wi-Fi connectivity.

00:28:33.910 --> 00:28:37.780
For instance, users may take
photos with action cameras

00:28:37.780 --> 00:28:40.210
when they go skiing,
and would like

00:28:40.210 --> 00:28:42.960
to transfer those photos to
the mobile phones later on.

00:28:42.960 --> 00:28:44.460
How?

00:28:44.460 --> 00:28:47.900
They may have a smart thermostat
that they want to set up

00:28:47.900 --> 00:28:50.570
using the app on their phone.

00:28:50.570 --> 00:28:54.780
For use cases like this,
we introduced a new Wi-Fi

00:28:54.780 --> 00:29:00.650
NetworkSpecifier API
in Q. So here, we've

00:29:00.650 --> 00:29:04.530
got an IoT device that
needs some initial setup.

00:29:04.530 --> 00:29:08.240
It has no UI, so you
might need to plug this

00:29:08.240 --> 00:29:11.030
into a computer for setup.

00:29:11.030 --> 00:29:15.240
Or more easily, using the
Wi-Fi NetworkSpecifier API,

00:29:15.240 --> 00:29:18.050
you can just power
up the device,

00:29:18.050 --> 00:29:21.310
connect this to your
mobile phone through Wi-Fi,

00:29:21.310 --> 00:29:25.260
and do a setup from application
running on the phone.

00:29:25.260 --> 00:29:29.370
The app will need to specify
the SSID of the asset patterns

00:29:29.370 --> 00:29:31.680
to match the IoT device.

00:29:31.680 --> 00:29:35.760
The phone can do the scans
for the Wi-Fi devices,

00:29:35.760 --> 00:29:37.460
making these patterns.

00:29:37.460 --> 00:29:39.990
Once a matching Wi-Fi
device is found,

00:29:39.990 --> 00:29:43.500
the system will pop up a
dialog requesting users

00:29:43.500 --> 00:29:47.910
to connect and select
which device to connect to.

00:29:47.910 --> 00:29:50.310
The system will
remember user choice,

00:29:50.310 --> 00:29:53.760
and auto-connect to the same
device previously approved

00:29:53.760 --> 00:29:54.990
by the user.

00:29:54.990 --> 00:29:57.090
Similar with Wi-Fi
NetworkSuggestion API,

00:29:57.090 --> 00:29:59.880
the application
doesn't have access

00:29:59.880 --> 00:30:03.750
to the nearby Wi-Fi information,
so location permission

00:30:03.750 --> 00:30:04.560
is not needed.

00:30:07.520 --> 00:30:10.510
Now, let's take a look
at how to use this API.

00:30:10.510 --> 00:30:14.000
First, you'll need to create
a Wi-Fi NetworkSpecifier,

00:30:14.000 --> 00:30:17.930
and specify how you
find the peer devices.

00:30:17.930 --> 00:30:21.390
You can either set the SSID
pattern, or BSSID pattern,

00:30:21.390 --> 00:30:24.170
[INAUDIBLE] expression to
match the Wi-Fi devices you

00:30:24.170 --> 00:30:24.800
want to find.

00:30:27.410 --> 00:30:31.710
Next, create a network request
using the NetworkSpecifier.

00:30:31.710 --> 00:30:34.220
So the purpose of
Wi-Fi NetworkSpecifier

00:30:34.220 --> 00:30:36.310
is for peer to peer
Wi-Fi connection,

00:30:36.310 --> 00:30:40.210
instead of internet
connectivity.

00:30:40.210 --> 00:30:44.050
So it's required to remove
the internet connectivity

00:30:44.050 --> 00:30:46.430
from the network request.

00:30:46.430 --> 00:30:48.930
Once the network
request is created,

00:30:48.930 --> 00:30:52.780
you can use the URL Connectivity
Manager APIs to request

00:30:52.780 --> 00:30:54.020
connecting to the network.

00:30:56.852 --> 00:31:00.830
As a recap, we just talked
about two new Wi-Fi APIs

00:31:00.830 --> 00:31:04.050
for connectivity
without location access,

00:31:04.050 --> 00:31:07.970
WifiNetworkSuggestions,
and WifiNetworkSpecifier.

00:31:07.970 --> 00:31:11.180
These APIs provides the
capability for applications

00:31:11.180 --> 00:31:15.830
to suggest access points or
connect local Wi-Fi devices.

00:31:15.830 --> 00:31:18.700
Applications using these
APIs don't have access

00:31:18.700 --> 00:31:23.860
to nearby Wi-Fi devices, so no
location permission is needed.

00:31:23.860 --> 00:31:27.080
We recommend using these
APIs for Wi-Fi connectivity

00:31:27.080 --> 00:31:30.800
purpose going forward,
especially applications

00:31:30.800 --> 00:31:36.230
targeting QSDK wouldn't be able
to use the pre-Q APIs to auto

00:31:36.230 --> 00:31:40.420
connect to a previously
configured access point

00:31:40.420 --> 00:31:42.670
or config a new server network.

00:31:42.670 --> 00:31:47.680
So these apps will need to
migrate to the new APIs.

00:31:47.680 --> 00:31:50.120
And also, as I
previously mentioned,

00:31:50.120 --> 00:31:53.140
all the Wi-Fi APIs that
have location information

00:31:53.140 --> 00:31:57.410
will need access final location
permission on Q. With that,

00:31:57.410 --> 00:32:00.208
Jen will come back to
talk about best practices

00:32:00.208 --> 00:32:01.250
for [INAUDIBLE] location.

00:32:01.250 --> 00:32:02.196
Thank you.

00:32:02.196 --> 00:32:07.880
[APPLAUSE]

00:32:07.880 --> 00:32:09.620
JEN CHAI: Thanks, Wei.

00:32:09.620 --> 00:32:12.380
Now that we've taught you how
to update your apps for some

00:32:12.380 --> 00:32:14.240
of the new changes
in Android Q, I'm

00:32:14.240 --> 00:32:16.490
going to summarize by talking
through some of the best

00:32:16.490 --> 00:32:18.950
practices.

00:32:18.950 --> 00:32:22.940
First, don't use location
data if you don't need it.

00:32:22.940 --> 00:32:25.210
As Wei just talked
about, any API

00:32:25.210 --> 00:32:27.460
that provides
location-related information

00:32:27.460 --> 00:32:29.960
will require the
location permission.

00:32:29.960 --> 00:32:32.410
However, these new
Wi-Fi suggestion

00:32:32.410 --> 00:32:36.250
and peer-to-peer APIs allow you
to implement connectivity use

00:32:36.250 --> 00:32:39.960
cases, without using
location information.

00:32:39.960 --> 00:32:42.520
And so if your app supports
these types of use cases,

00:32:42.520 --> 00:32:45.610
we encourage you to migrate
to use these new APIs.

00:32:45.610 --> 00:32:47.500
This will also make
the experience simpler

00:32:47.500 --> 00:32:48.130
for your users.

00:32:51.540 --> 00:32:54.270
Only ask for the
permission that you need.

00:32:54.270 --> 00:32:57.210
One of the key benefits to
the while-in-use permission

00:32:57.210 --> 00:32:59.790
is you can ask for that if
that's the only permission

00:32:59.790 --> 00:33:01.450
that you need.

00:33:01.450 --> 00:33:04.830
Don't ask for all-the-time
permission if all you need

00:33:04.830 --> 00:33:06.510
is while-in-use.

00:33:06.510 --> 00:33:08.910
This also makes the
decision simpler and more

00:33:08.910 --> 00:33:11.340
straightforward for users.

00:33:11.340 --> 00:33:13.890
Also, as we mentioned
in the manifest,

00:33:13.890 --> 00:33:19.470
you can declare either Coarse
or Fine location permission.

00:33:19.470 --> 00:33:22.650
As Praveen mentioned, Coarse
is approximately city level.

00:33:22.650 --> 00:33:24.040
And there's some use cases--

00:33:24.040 --> 00:33:27.840
such as weather-- that work
fine with just Coarse location.

00:33:27.840 --> 00:33:30.030
So we encourage you to
evaluate all the features

00:33:30.030 --> 00:33:35.750
within your app, and decide if
you really need Fine location.

00:33:35.750 --> 00:33:40.160
Next, ask the user for
location permission in context.

00:33:40.160 --> 00:33:42.830
We suggest surfacing the
location permission prompt

00:33:42.830 --> 00:33:45.050
when the user interacts
with, or turns

00:33:45.050 --> 00:33:48.750
on a specific feature in
your app that requires it.

00:33:48.750 --> 00:33:50.360
This also helps
the user understand

00:33:50.360 --> 00:33:53.420
why your application is asking.

00:33:53.420 --> 00:33:56.420
We don't recommend surfacing
the permission prompt

00:33:56.420 --> 00:33:58.970
on app startup,
unless it's absolutely

00:33:58.970 --> 00:34:02.510
obvious to the user why.

00:34:02.510 --> 00:34:05.640
Four-- consider an
incremental request.

00:34:05.640 --> 00:34:07.290
As Praveen had
mentioned, you can

00:34:07.290 --> 00:34:08.790
ask for a while-in-use
permission

00:34:08.790 --> 00:34:11.790
first, when the user's
interacting with your app.

00:34:11.790 --> 00:34:14.328
And then later, ask for
all-the-time permission

00:34:14.328 --> 00:34:15.870
when the user is
specifically turning

00:34:15.870 --> 00:34:20.000
on a feature that requires it.

00:34:20.000 --> 00:34:23.420
And finally, gracefully
handle all levels

00:34:23.420 --> 00:34:25.489
of location permission.

00:34:25.489 --> 00:34:29.239
As always, users can change
the location permission

00:34:29.239 --> 00:34:32.150
for any app at anytime.

00:34:32.150 --> 00:34:33.938
We encourage you to
gracefully handle

00:34:33.938 --> 00:34:35.480
when your app doesn't
have background

00:34:35.480 --> 00:34:38.370
location, or any location.

00:34:38.370 --> 00:34:41.210
We also recommend that
non-location features

00:34:41.210 --> 00:34:43.760
within your app
continue to work,

00:34:43.760 --> 00:34:48.750
even if you don't have
location permission.

00:34:48.750 --> 00:34:52.010
Thank you for creating all
these amazing location based

00:34:52.010 --> 00:34:53.909
experiences for our users.

00:34:53.909 --> 00:34:57.320
We can do so much more today
than we ever thought possible.

00:34:57.320 --> 00:35:00.950
And together, we can create
new, innovative experiences,

00:35:00.950 --> 00:35:04.040
while keeping our users
and their data safe.

00:35:04.040 --> 00:35:06.380
We hope the information that
we've provided to you today

00:35:06.380 --> 00:35:10.790
is helpful in updating your apps
to Android Q. A quick reminder

00:35:10.790 --> 00:35:14.090
that we have office hours
later today at 11:30,

00:35:14.090 --> 00:35:16.940
and again tomorrow
morning, at 8:30 AM.

00:35:16.940 --> 00:35:19.850
There's also a code lab on
location that you can try out.

00:35:19.850 --> 00:35:21.050
Thank you so much.

00:35:21.050 --> 00:35:25.000
[MUSIC PLAYING]

