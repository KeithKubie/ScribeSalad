WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
[Evans] What do we need to do to make lookup faster?

00:00:03.000 --> 00:00:05.000
Let's think about why it was so slow.

00:00:05.000 --> 00:00:09.000
The reason it was so slow is that we were doing this for loop.

00:00:09.000 --> 00:00:11.000
We were going through all the elements in order

00:00:11.000 --> 00:00:13.000
and we were checking if they match the keyword.

00:00:13.000 --> 00:00:16.000
And we had to do this going through the entire index.

00:00:16.000 --> 00:00:20.000
For a keyword that's not in the index, to determine that it's not there

00:00:20.000 --> 00:00:23.000
we had to go through the whole index.

00:00:23.000 --> 00:00:27.000
This is not the way we use indexes in real life.

00:00:27.000 --> 00:00:30.000
If you're looking for a word in the index of a book,

00:00:30.000 --> 00:00:33.000
you don't have to look through every single entry to see if that word exists.

00:00:33.000 --> 00:00:35.000
You can jump around.

00:00:35.000 --> 00:00:38.000
And the reason you can jump around is because the entries in the index are sorted.

00:00:38.000 --> 00:00:42.000
They're sorted in alphabetical order, so you know where that entry would belong.

00:00:42.000 --> 00:00:45.000
You just need to find the right place and see if it's there.

00:00:45.000 --> 00:00:47.000
So we could do that with our index.

00:00:47.000 --> 00:00:50.000
Instead of having our index kept in arbitrary order,

00:00:50.000 --> 00:00:55.000
if we kept our index in a sorted order, then we could find the place where that entry belongs

00:00:55.000 --> 00:00:57.000
and look for it.

00:00:57.000 --> 00:00:59.000
Sorting is a very interesting problem.

00:00:59.000 --> 00:01:02.000
It's something we're not actually going to talk about more in this class.

00:01:02.000 --> 00:01:04.000
We're going to do a different way of doing that.

00:01:04.000 --> 00:01:08.000
What we're going to do is find a way to find where the entry should be

00:01:08.000 --> 00:01:10.000
that doesn't require actually keeping all the entries sorted.

00:01:10.000 --> 00:01:14.000
What we want is something that will allow us, given a keyword,

00:01:14.000 --> 00:01:18.000
we're going to have some function that tells us where it belongs.

00:01:18.000 --> 00:01:21.000
We're going to call that a hash function.

00:01:21.000 --> 00:01:24.000
That tells us where in the entry to look.

00:01:24.000 --> 00:01:27.000
And so instead of having to look through the whole index,

00:01:27.000 --> 00:01:31.000
the hash function will tell us where that entry belongs.

00:01:31.000 --> 00:01:34.000
So what we need for this is some function that's going to take a keyword,

00:01:34.000 --> 00:01:40.000
map it to a number, and that number is the position in the index where that entry belongs.

00:01:40.000 --> 00:01:43.000
We could do this lots of different ways.

00:01:43.000 --> 00:01:45.000
One simple thing would be to think we know the alphabet;

00:01:45.000 --> 00:01:50.000
this is more like the way an index for a book would work,

00:01:50.000 --> 00:01:54.000
and for each entry in the index we'll have--

00:01:54.000 --> 00:02:00.000
based on the first letter we'll put all the entries that start with that first letter in the same place.

00:02:00.000 --> 00:02:04.000
So if we're looking for a keyword that starts with U,

00:02:04.000 --> 00:02:06.000
that word for our hash would tell us to look in the place

00:02:06.000 --> 00:02:08.000
where all the words that start with U are,

00:02:08.000 --> 00:02:10.000
and then we'd only have to look through the words that start with U.

00:02:10.000 --> 00:02:12.000
So this would allow us to do a lookup

00:02:12.000 --> 00:02:15.000
much more quickly than looking through the whole index.

00:02:15.000 --> 00:02:17.000
This isn't quite the best way to do things.

00:02:17.000 --> 00:02:21.000
If we made our places based on the letter, then we have a problem

00:02:21.000 --> 00:02:23.000
if we have 2 words with the same first letter.

00:02:23.000 --> 00:02:27.000
Certainly we expect to have more than 1 word that starts with the same letter.

00:02:27.000 --> 00:02:31.000
So instead of having just an element here for each position,

00:02:31.000 --> 00:02:37.000
we're going to have a list of elements that would be all the words that start with U.

00:02:37.000 --> 00:02:42.000
So when we look up the word Udacity, we would look in the entry for U,

00:02:42.000 --> 00:02:46.000
and if the word that's there doesn't match, then we know Udacity isn't in the index.

00:02:46.000 --> 00:02:48.000
There are lots of problems with this.

00:02:48.000 --> 00:02:51.000
The first problem is there might be more than 1 word that starts with U,

00:02:51.000 --> 00:02:53.000
so we can't just have 1 entry here.

00:02:53.000 --> 00:02:56.000
What we need to have is a list of entries.

00:02:56.000 --> 00:02:58.000
We often call this a bucket.

00:02:58.000 --> 00:03:03.000
We need a bucket of all the entries that start with U that would be in this position.

00:03:03.000 --> 00:03:06.000
So instead of having just 1 entry like the old structure of our index,

00:03:06.000 --> 00:03:10.000
now we're going to have a list of entries, and each element of the index will now be a bucket,

00:03:10.000 --> 00:03:14.000
which is a list of entries that are in the right position.

00:03:14.000 --> 00:03:19.000
This is going to be our bucket of all the entries that start with U,

00:03:19.000 --> 00:03:25.000
and that would have all the different entries that start with the letter U in that bucket.

00:03:25.000 --> 00:03:27.000
This is getting better.

00:03:27.000 --> 00:03:30.000
Now for each lookup, instead of having to look through all of the words in the index,

00:03:30.000 --> 00:03:34.000
we just need to find the position that starts with the right letter

00:03:34.000 --> 00:03:36.000
that's got a bucket of all the words that start with that letter,

00:03:36.000 --> 00:03:38.000
and then we just need to look through that bucket.

00:03:38.000 --> 00:03:41.000
This works okay, but this doesn't really scale very well.

00:03:41.000 --> 00:03:45.000
At best, if we have 10 million words,

00:03:45.000 --> 00:03:48.000
now instead of having 10 million entries to go through,

00:03:48.000 --> 00:03:54.000
we need to go through 10 million divided by, say, 26 if we have 26 letters.

00:03:54.000 --> 00:03:56.000
It's not making things much faster.

00:03:56.000 --> 00:03:59.000
It's making things maybe at best 26 times letter.

00:03:59.000 --> 00:04:02.000
That assumes that all of the buckets are the same size.

00:04:02.000 --> 00:04:04.000
Certainly if we make the buckets based on the first letter,

00:04:04.000 --> 00:04:06.000
that's not going to be the same size.

00:04:06.000 --> 00:04:08.000
If the words are typical English words,

00:04:08.000 --> 00:04:12.000
we're going to have many more words that start with S and T than start with U.

00:04:12.000 --> 00:04:15.000
So we want to fix those 2 problems.

00:04:15.000 --> 00:04:17.000
We want to be able to have more buckets,

00:04:17.000 --> 00:04:19.000
so we're not going to just use the first letter,

00:04:19.000 --> 00:04:23.000
we're going to use some function on the whole word that tells us where it belongs,

00:04:23.000 --> 00:04:27.000
and we're going to try to make that function distribute the words fairly well.

00:04:27.000 --> 00:04:30.000
The structure that I've described is what's called a hash table.

00:04:30.000 --> 00:04:32.000
This is a very useful data structure.

00:04:32.000 --> 00:04:34.000
It's so useful that it's built in to Python.

00:04:34.000 --> 00:04:38.000
There's a Python type called a dictionary which provides this functionality.

00:04:38.000 --> 00:04:42.000
At the end of today's unit I'll explain how the Python dictionary works and how to use it,

00:04:42.000 --> 00:04:45.000
and we'll modify the search engine code to use dictionary

00:04:45.000 --> 00:04:47.000
instead of the lookup table that we built.

00:04:47.000 --> 00:04:51.000
But before we do that, we're going to implement it ourselves.

00:04:51.000 --> 00:04:53.000
We're going to make sure that we understand how the hash table works

00:04:53.000 --> 00:04:55.000
by writing all the code to do it ourselves,

00:04:55.000 --> 99:59:59.000
and then we'll switch to using the built-in Python type.

