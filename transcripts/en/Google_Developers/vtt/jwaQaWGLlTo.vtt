WEBVTT
Kind: captions
Language: en

00:00:00.680 --> 00:00:02.650
Hi, I'm Lisa Wray.

00:00:02.650 --> 00:00:05.610
And today, I want to talk to
you about the new Google Fit

00:00:05.610 --> 00:00:07.000
APIs for Android.

00:00:08.080 --> 00:00:10.340
Google Fit is an open
fitness ecosystem

00:00:10.340 --> 00:00:13.290
that provides developers
with a single set of APIs

00:00:13.290 --> 00:00:18.070
to discover, record, store, and
read activity data with user

00:00:18.070 --> 00:00:20.810
permission so users
have a single place

00:00:20.810 --> 00:00:22.670
to store all of their data.

00:00:22.670 --> 00:00:24.960
And users own that
data and can share

00:00:24.960 --> 00:00:27.650
with any apps of their choice
to make the data work harder

00:00:27.650 --> 00:00:29.080
for them.

00:00:29.080 --> 00:00:30.640
Fitness apps can
request that data

00:00:30.640 --> 00:00:33.110
be stored from any
wearable or sensor.

00:00:33.110 --> 00:00:35.600
And the user's fitness
data is persisted

00:00:35.600 --> 00:00:38.060
when they upgrade
their fitness devices.

00:00:38.060 --> 00:00:40.690
There's also a REST API
for use from the web

00:00:40.690 --> 00:00:42.190
or other platforms.

00:00:42.190 --> 00:00:44.745
But today, we'll use the
fit APIs for Android.

00:00:46.000 --> 00:00:49.400
They're part of Google Play
services, so starting now,

00:00:49.400 --> 00:00:52.010
the Android Fit APIs
are already supported

00:00:52.010 --> 00:00:54.060
on all devices back
to Gingerbread.

00:00:54.060 --> 00:00:55.765
That's API level
nine and higher.

00:00:57.290 --> 00:00:59.200
So for example,
suppose I told you

00:00:59.200 --> 00:01:02.100
I was going to build a
pedometer app for my phone.

00:01:02.100 --> 00:01:03.769
It would help remind
users to move more

00:01:03.769 --> 00:01:05.269
by showing their
steps while they're

00:01:05.269 --> 00:01:07.310
out and about in real time.

00:01:07.310 --> 00:01:09.325
It'll also save
all of their data

00:01:09.325 --> 00:01:11.950
and let them view it afterwards
so they can analyze how they're

00:01:11.950 --> 00:01:15.700
doing, not just in this app,
but maybe also on the web.

00:01:15.700 --> 00:01:17.350
Now what if I told
you I was going

00:01:17.350 --> 00:01:20.870
to do it without using a
database or a backend server.

00:01:20.870 --> 00:01:21.770
How?

00:01:21.770 --> 00:01:22.660
Let's take a look.

00:01:23.890 --> 00:01:27.240
There are three main parts
of the API-- the sensors API,

00:01:27.240 --> 00:01:29.920
the recording API,
and the history API.

00:01:29.920 --> 00:01:32.040
I want to get immediate
results, so we'll

00:01:32.040 --> 00:01:33.265
start with the sensors API.

00:01:34.450 --> 00:01:38.160
The sensors API provides access
to raw, sensor data streams.

00:01:38.160 --> 00:01:40.600
They could be sensors
available on the Android device

00:01:40.600 --> 00:01:42.820
or from sensors available
on companion devices,

00:01:42.820 --> 00:01:43.570
such as wearables.

00:01:44.670 --> 00:01:46.790
For steps, Fit will
use the step counter

00:01:46.790 --> 00:01:49.660
on the phone or any
connected wearable,

00:01:49.660 --> 00:01:51.210
whichever it thinks
is most accurate.

00:01:52.220 --> 00:01:54.175
First thing, you need
a Google account.

00:01:54.175 --> 00:01:55.925
If you don't have one,
that's easy to fix.

00:01:57.130 --> 00:01:59.660
Next, you need to create a
project in the Google Developer

00:01:59.660 --> 00:02:01.710
Console and link
it with your app,

00:02:01.710 --> 00:02:04.080
and there are great step by
step instructions on the Fit

00:02:04.080 --> 00:02:04.580
website.

00:02:05.730 --> 00:02:07.440
In your development
environment, make

00:02:07.440 --> 00:02:10.254
sure you have the newest
Google Play Services client

00:02:10.254 --> 00:02:11.004
library installed.

00:02:12.130 --> 00:02:13.910
And if you're using
Android Studio,

00:02:13.910 --> 00:02:15.770
you can just add the
Play Services library

00:02:15.770 --> 00:02:17.485
as a dependency in
your gradle file.

00:02:18.960 --> 00:02:21.590
Next, we're going to connect
to Google Play Services using

00:02:21.590 --> 00:02:23.520
Google API client.

00:02:23.520 --> 00:02:25.484
Before you use any of
the features Fit offers,

00:02:25.484 --> 00:02:27.025
you have to connect
to Play Services.

00:02:28.170 --> 00:02:31.600
We're going to select the
fitness API and add the read

00:02:31.600 --> 00:02:33.530
and write fitness scopes.

00:02:33.530 --> 00:02:35.030
These mean the user
will be prompted

00:02:35.030 --> 00:02:38.340
to grant our app permission
to access his or her data.

00:02:38.340 --> 00:02:41.060
Privacy is key here, so
without that permission,

00:02:41.060 --> 00:02:42.020
our app won't work.

00:02:43.240 --> 00:02:46.060
Now, once we get a call back
that the Google API client is

00:02:46.060 --> 00:02:48.570
connected, we can start
calling the Fit APIs.

00:02:49.790 --> 00:02:52.400
Here's where the
sensors API comes in.

00:02:52.400 --> 00:02:56.050
We use SensorRequest.Builder
to create a request

00:02:56.050 --> 00:02:59.330
to track the change in
step count every second.

00:02:59.330 --> 00:03:01.810
Then, we register
the request passing

00:03:01.810 --> 00:03:04.450
in a listener for the results,
along with the Google API

00:03:04.450 --> 00:03:05.232
client.

00:03:05.232 --> 00:03:06.940
And more about that
listener in a moment.

00:03:08.080 --> 00:03:09.540
Here's the listener.

00:03:09.540 --> 00:03:11.310
Now that we've
registered, that listener

00:03:11.310 --> 00:03:14.470
will get a callback every
second with fresh data.

00:03:14.470 --> 00:03:16.280
And we can update our display.

00:03:16.280 --> 00:03:17.660
We have a simple fitness app.

00:03:18.810 --> 00:03:21.550
Of course, when the user
isn't looking at their phone,

00:03:21.550 --> 00:03:23.440
we should unregister
the sensor, which

00:03:23.440 --> 00:03:25.130
we can do almost
exactly the same way.

00:03:26.390 --> 00:03:28.990
You can dive straight into
our samples and documentation

00:03:28.990 --> 00:03:32.650
at developers.googl
e.com/fit/android.

00:03:32.650 --> 00:03:34.730
Or stay with me in
our next DevByte

00:03:34.730 --> 00:03:36.380
to learn how to
persist and retrieve

00:03:36.380 --> 00:03:39.270
this data with the
recording and history APIs.

00:03:39.270 --> 00:03:41.360
Thanks for watching.

