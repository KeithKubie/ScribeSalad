WEBVTT
Kind: captions
Language: en

00:00:03.140 --> 00:00:06.160
Hi, I’m Carrie Anne, and welcome to CrashCourse
Computer Science!

00:00:06.170 --> 00:00:11.080
We ended last episode with the 1984 release
of Apple’s Macintosh personal computer.

00:00:11.080 --> 00:00:15.209
It was the first computer a regular person
could buy with a graphical user interface

00:00:15.209 --> 00:00:16.620
and a mouse to interact with it.

00:00:16.620 --> 00:00:20.850
This was a radical evolution from the command
line interfaces found on all other personal

00:00:20.850 --> 00:00:22.270
computers of the era.

00:00:22.270 --> 00:00:26.420
Instead of having to remember... or guess...
the right commands to type in, a graphical

00:00:26.420 --> 00:00:29.840
user interface shows you what functions are
possible.

00:00:29.840 --> 00:00:32.550
You just have to look around the screen for
what you want to do.

00:00:32.550 --> 00:00:34.110
It’s a “point and click” interface.

00:00:34.110 --> 00:00:36.880
All of a sudden, computers were much more
intuitive.

00:00:36.900 --> 00:00:42.080
Anybody, not just hobbyists or computer scientists,
could figure things out all by themselves.

00:00:42.080 --> 00:00:51.120
INTRO

00:00:51.120 --> 00:00:55.640
The Macintosh is credited with taking Graphical
User Interfaces, or GUIs, mainstream, but

00:00:55.649 --> 00:00:58.819
in reality they were the result of many decades
of research.

00:00:58.819 --> 00:01:03.449
In previous episodes, we discussed some early
interactive graphical applications, like Sketchpad

00:01:03.449 --> 00:01:06.500
and Spacewar!, both made in 1962.

00:01:06.500 --> 00:01:10.660
But these were one-off programs, and not whole
integrated computing experiences.

00:01:10.660 --> 00:01:14.900
Arguably, the true forefather of modern GUIs
was Douglas Engelbart.

00:01:14.900 --> 00:01:16.370
Let’s go to the thought bubble!

00:01:16.370 --> 00:01:20.990
During World War 2, while Engelbart was stationed
in the Philippines as a radar operator, he

00:01:20.990 --> 00:01:23.640
read Vannevar Bush’s article on the Memex.

00:01:23.640 --> 00:01:28.180
These ideas inspired him, and when his Navy
service ended, he returned to school, completing

00:01:28.180 --> 00:01:30.960
a Ph.D. in 1955 at U.C.

00:01:30.960 --> 00:01:31.960
Berkeley.

00:01:31.960 --> 00:01:35.450
Heavily involved in the emerging computing
scene, he collected his thoughts in a seminal

00:01:35.450 --> 00:01:39.130
1962 report, titled: “Augmenting Human Intellect”.

00:01:39.130 --> 00:01:43.190
Engelbart “believed that the complexity
of the problems facing mankind [was] growing

00:01:43.190 --> 00:01:45.170
faster than our ability to solve them.

00:01:45.170 --> 00:01:49.560
Therefore, finding ways to augment our intellect
would seem to be both a necessary and a desirable

00:01:49.560 --> 00:01:50.560
goal."

00:01:50.560 --> 00:01:54.510
He saw that computers could be useful beyond
just automation, and be essential interactive

00:01:54.510 --> 00:01:57.870
tools for future knowledge workers to tackle
complex problems.

00:01:57.870 --> 00:02:02.320
Further inspired by Ivan Sutherland’s recently
demonstrated Sketchpad, Engelbart set out

00:02:02.320 --> 00:02:06.760
to make his vision a reality, recruiting a
team to build the oN-Line System.

00:02:06.760 --> 00:02:11.140
He recognized that a keyboard alone was insufficient
for the type of applications he was hoping

00:02:11.140 --> 00:02:12.140
to enable.

00:02:12.140 --> 00:02:17.019
In his words: "We envisioned problem-solvers
using computer-aided working stations to augment

00:02:17.019 --> 00:02:18.019
their efforts.

00:02:18.020 --> 00:02:22.400
They required the ability to interact with
information displays using some sort of device

00:02:22.400 --> 00:02:24.580
to move [a cursor] around the screen."

00:02:24.640 --> 00:02:29.840
And in 1964, working with colleague Bill English,
he created the very first computer mouse.

00:02:29.840 --> 00:02:33.829
The wire came from the bottom of the device
and looked very much like a rodent and the

00:02:33.829 --> 00:02:35.030
nickname stuck.

00:02:35.030 --> 00:02:36.050
Thanks thought bubble!

00:02:36.050 --> 00:02:40.989
In 1968, Engelbart demonstrated his whole
system at the Fall Joint Computer Conference,

00:02:40.989 --> 00:02:44.140
in what’s often referred to as “the mother
of all demos”.

00:02:44.140 --> 00:02:49.030
The demo was 90 minutes long and demonstrated
many features of modern computing: bitmapped

00:02:49.030 --> 00:02:53.389
graphics, video conferencing, word processing,
and collaborative real-time editing of documents.

00:02:53.389 --> 00:02:57.749
There were also precursors to modern GUIs,
like the mouse and multiple windows – although

00:02:57.749 --> 00:02:58.780
they couldn’t overlap.

00:02:58.780 --> 00:03:03.170
It was way ahead of its time, and like many
products with that label, it ultimately failed,

00:03:03.170 --> 00:03:04.379
at least commercially.

00:03:04.380 --> 00:03:07.780
But its influence on computer researchers
of the day was huge.

00:03:07.780 --> 00:03:12.380
Engelbart was recognized for this watershed
moment in computing with a Turing Award in

00:03:12.380 --> 00:03:12.980
1997.

00:03:12.980 --> 00:03:17.940
Federal funding started to reduce in the early
1970s, which we discussed two episodes ago.

00:03:17.940 --> 00:03:22.099
At that point, many of Engelbart’s team,
including Bill English, left and went to Xerox's

00:03:22.099 --> 00:03:27.019
newly formed Palo Alto Research Centre, more
commonly known as Xerox PARC.

00:03:27.019 --> 00:03:31.590
It was here that the first true GUI computer
was developed: the Xerox Alto, finished in

00:03:31.590 --> 00:03:32.739
1973.

00:03:32.739 --> 00:03:36.379
For the computer to be easy to use, it needed
more than just fancy graphics.

00:03:36.379 --> 00:03:40.180
It needed to be built around a concept that
people were already familiar with, so they

00:03:40.180 --> 00:03:44.260
could immediately recognize how to use the
interface with little or no training.

00:03:44.260 --> 00:03:48.669
Xerox’s answer was to treat the 2D screen
like the top of a desk… or desktop.

00:03:48.669 --> 00:03:52.879
Just like how you can have many papers laid
out on a desk, a user could have several computer

00:03:52.879 --> 00:03:54.659
programs open at once.

00:03:54.659 --> 00:03:58.590
Each was contained in their own frame, which
offered a view onto the application – called

00:03:58.590 --> 00:03:59.590
a window.

00:03:59.590 --> 00:04:04.379
Also like papers on a desk, these windows
could overlap, blocking the items behind them.

00:04:04.379 --> 00:04:08.159
And there were desk accessories, like a calculator
and clock, that the user could place on the

00:04:08.159 --> 00:04:09.639
screen and move around.

00:04:09.639 --> 00:04:11.900
It wasn’t an exact copy of a desktop though.

00:04:11.900 --> 00:04:14.230
Instead, it was a metaphor of a desktop.

00:04:14.230 --> 00:04:17.370
For this reason, surprisingly, it’s called
the Desktop Metaphor.

00:04:17.370 --> 00:04:22.400
There are many ways to design an interface
like this, but the Alto team did it with windows,

00:04:22.400 --> 00:04:25.199
icons, menus, and a pointer – what’s called
a WIMP interface.

00:04:25.199 --> 00:04:27.340
It’s what most desktop GUIs use today.

00:04:27.340 --> 00:04:33.229
It also offered a basic set of widgets, reusable
graphical building blocks...things like buttons,

00:04:33.229 --> 00:04:36.300
checkboxes, sliders, and tabs which were also
drawn from real world objects to make them

00:04:36.300 --> 00:04:37.300
familiar.

00:04:37.300 --> 00:04:41.170
GUI applications are constructed from these
widgets, so let’s try coding a simple example

00:04:41.170 --> 00:04:42.830
using this new programming paradigm.

00:04:42.830 --> 00:04:46.720
First, we have to tell the operating system
that we need a new window to be created for

00:04:46.720 --> 00:04:47.720
our app.

00:04:47.720 --> 00:04:49.490
We do this through a GUI API.

00:04:49.490 --> 00:04:52.300
We need to specify the name of the window
and also its size.

00:04:52.300 --> 00:04:54.479
Let’s say 500 by 500 pixels.

00:04:54.479 --> 00:04:58.310
Now, let’s add some widgets – a text box
and a button.

00:04:58.310 --> 00:05:00.650
These require a few parameters to create.

00:05:00.650 --> 00:05:05.060
First, we need to specify what window they
should appear in, because apps can have multiple

00:05:05.060 --> 00:05:06.090
windows.

00:05:06.090 --> 00:05:10.651
We also need to specify the default text,
the X and Y location in the window, and a

00:05:10.651 --> 00:05:11.651
width and height.

00:05:11.651 --> 00:05:15.940
Ok, so now we’ve got something that looks
like a GUI app, but has no functionality.

00:05:15.940 --> 00:05:18.020
If you click the “roll” button, nothing
happens.

00:05:18.020 --> 00:05:21.819
In previous examples we’ve discussed, the
code pretty much executes from top to bottom.

00:05:21.819 --> 00:05:25.840
GUIs, on the other hand, use what’s called
event-driven programming; code can fire at

00:05:25.840 --> 00:05:28.870
any btime, and in different orders, in response
to events.

00:05:28.870 --> 00:05:33.180
In this case, it’s user driven events, like
clicking on a button, selecting a menu item,

00:05:33.180 --> 00:05:34.650
or scrolling a window.

00:05:34.650 --> 00:05:37.930
Or if a cat runs across your keyboard, it’s
a bunch of events all at once!

00:05:37.930 --> 00:05:41.699
Let’s say that when the user clicks the
“roll” button, we want to randomly generate

00:05:41.699 --> 00:05:45.699
a number between 1 and 20, and then show that
value in our text box.

00:05:45.699 --> 00:05:47.720
We can write a function that does just that.

00:05:47.720 --> 00:05:51.979
We can even get a little fancy and say if
we get the number 20, set the background color

00:05:51.979 --> 00:05:53.460
of the window to blood red!

00:05:53.460 --> 00:05:56.710
The last thing we need to do is hook this
code up so that it’s triggered each time

00:05:56.710 --> 00:05:57.770
our button is clicked.

00:05:57.770 --> 00:06:02.271
To do this, we need to specify that our function
“handles” this event for our button, by

00:06:02.271 --> 00:06:04.439
adding a line to our initialize function.

00:06:04.439 --> 00:06:08.689
The type of event, in this case, is a click
event, and our function is the event handler

00:06:08.689 --> 00:06:09.750
for that event.

00:06:09.750 --> 00:06:10.750
Now we’re done.

00:06:10.750 --> 00:06:14.189
We can click that button all day long, and
each time, our “roll D20” function gets

00:06:14.189 --> 00:06:16.080
dispatched and executed.

00:06:16.080 --> 00:06:19.520
This is exactly what’s happening behind
the scenes when you press the little bold

00:06:19.520 --> 00:06:24.139
button in a text editor, or select shutdown
from a dropdown menu – a function linked

00:06:24.139 --> 00:06:25.509
to that event is firing.

00:06:25.509 --> 00:06:27.940
Hope I don’t roll a 20. Ahhhh!

00:06:28.120 --> 00:06:30.000
Ok, back to the Xerox Alto!

00:06:30.000 --> 00:06:34.300
Roughly 2000 Altos were made, and used at
Xerox and given to University labs.

00:06:34.300 --> 00:06:35.900
They were never sold commercially.

00:06:35.900 --> 00:06:40.349
Instead, the PARC team kept refining the hardware
and software, culminating in the Xerox Star

00:06:40.349 --> 00:06:42.419
system, released in 1981.

00:06:42.419 --> 00:06:44.729
The Xerox Star extended the desktop metaphor.

00:06:44.729 --> 00:06:48.919
Now, files looked like pieces of paper, and
they could be stored in little folders, all

00:06:48.919 --> 00:06:52.900
of which could sit on your desktop, or be
put away into digital filing cabinets.

00:06:52.900 --> 00:06:56.530
It’s a metaphor that sits ontop of the underlying
file system.

00:06:56.530 --> 00:07:05.560
From a user’s perspective, this is a new
level of abstraction!

00:07:05.560 --> 00:07:10.720
Xerox, being in the printing machine business,
also advanced text and graphics creation tools.

00:07:10.720 --> 00:07:13.780
For example, they introduced the terms: cut,
copy and paste.

00:07:13.780 --> 00:07:17.580
This metaphor was drawn from how people dealt
with making edits in documents written on

00:07:17.580 --> 00:07:18.580
typewriters.

00:07:18.580 --> 00:07:22.240
You’d literally cut text out with scissors,
and then paste it, with glue, into the spot

00:07:22.240 --> 00:07:23.629
you wanted in another document.

00:07:23.629 --> 00:07:28.090
Then you’d photocopy the page to flatten
it back down into a single layer, making the

00:07:28.090 --> 00:07:29.760
change invisible.

00:07:29.760 --> 00:07:31.300
Thank goodness for computers!

00:07:31.300 --> 00:07:35.250
This manual process was moot with the advent
of word processing software, which existed

00:07:35.250 --> 00:07:37.650
on platforms like the Apple II and Commodore
PET.

00:07:37.650 --> 00:07:42.159
But Xerox went way beyond the competition
with the idea that whatever you made on the

00:07:42.159 --> 00:07:45.940
computer should look exactly like the real
world version, if you printed it out.

00:07:45.940 --> 00:07:49.379
They dubbed this What-You-See-Is-What-You-Get
or WYSIWYG.

00:07:49.379 --> 00:07:53.830
Unfortunately, like Engelbart’s oN-Line
System, the Xerox Star was ahead of its time.

00:07:53.830 --> 00:07:58.990
Sales were sluggish because it had a price
tag equivalent to nearly $200,000 today for

00:07:58.990 --> 00:08:00.280
an office setup.

00:08:00.280 --> 00:08:05.830
It also didn’t help that the IBM PC launched
that same year, followed by a tsunami of cheap

00:08:05.830 --> 00:08:07.560
“IBM Compatible” PC Clones.

00:08:07.560 --> 00:08:11.949
But the great ideas that PARC researchers
had been cultivating and building for almost

00:08:11.949 --> 00:08:14.060
a decade didn’t go to waste.

00:08:14.060 --> 00:08:18.900
In December of 1979, a year and a half before
the Xerox Star shipped, a guy you may have

00:08:18.900 --> 00:08:20.860
heard of visited: Steve Jobs.

00:08:20.860 --> 00:08:24.810
There’s a lot of lore surrounding this visit,
with many suggesting that Steve Jobs and Apple

00:08:24.810 --> 00:08:26.469
stole Xerox’s ideas.

00:08:26.469 --> 00:08:27.939
But that simply isn’t true.

00:08:27.939 --> 00:08:31.599
In fact, Xerox approached Apple, hoping to
partner with them.

00:08:31.599 --> 00:08:36.550
Ultimately, Xerox was able to buy a million
dollar stake in Apple before its highly anticipated

00:08:36.550 --> 00:08:41.500
I.P.O. -but it came with an extra provision:
“disclose everything cool going on at Xerox

00:08:41.500 --> 00:08:42.140
PARC".

00:08:42.140 --> 00:08:46.020
Steve knew they had some of the greatest minds
in computing, but he wasn’t prepared for

00:08:46.029 --> 00:08:47.020
what he saw.

00:08:47.020 --> 00:08:51.860
There was a demonstration of Xerox’s graphical
user interface, running on a crisp, bitmapped

00:08:51.860 --> 00:08:54.660
display, all driven with intuitive mouse input.

00:08:54.660 --> 00:08:57.960
Steve “later said, “It was like a veil
being lifted from my eyes.

00:08:57.970 --> 00:09:01.190
I could see the future of what computing was
destined to be.”

00:09:01.190 --> 00:09:04.660
Steve returned to Apple with his engineering
entourage, and they got to work inventing

00:09:04.660 --> 00:09:09.389
new features, like the menu bar and a trash
can to store files to be deleted; it would

00:09:09.389 --> 00:09:12.269
even bulge when full - again with the metaphors.

00:09:12.269 --> 00:09:16.560
Apple’s first product with a graphical user
interface, and mouse, was the Apple Lisa,

00:09:16.560 --> 00:09:18.190
released in 1983.

00:09:18.190 --> 00:09:23.190
It was a super advanced machine, with a super
advanced price – almost 25 thousand dollars

00:09:23.190 --> 00:09:24.190
today.

00:09:24.190 --> 00:09:28.300
That was significantly cheaper than the Xerox
Star, but it turned out to be an equal flop

00:09:28.300 --> 00:09:29.300
in the market.

00:09:29.300 --> 00:09:33.519
Luckily, Apple had another project up its
sleeve: The Macintosh, released a year later,

00:09:33.519 --> 00:09:34.519
in 1984.

00:09:34.519 --> 00:09:38.940
It had a price of around 6,000 dollars today
– a quarter of the Lisa’s cost.

00:09:38.940 --> 00:09:43.420
And it hit the mark, selling 70,000 units
in the first 100 days.

00:09:43.420 --> 00:09:47.170
But after the initial craze, sales started
to falter, and Apple was selling more of its

00:09:47.170 --> 00:09:49.079
Apple II computers than Macs.

00:09:49.079 --> 00:09:53.800
A big problem was that no one was making software
for this new machine with it’s new radical

00:09:53.800 --> 00:09:54.800
interface.

00:09:54.800 --> 00:09:55.800
And it got worse.

00:09:55.800 --> 00:09:56.800
The competition caught up fast.

00:09:56.800 --> 00:10:00.639
Soon, other personal computers had primitive,
but usable graphical user interfaces on computers

00:10:00.639 --> 00:10:02.639
a fraction of the cost.

00:10:02.639 --> 00:10:05.630
Consumers ate it up, and so did PC software
developers.

00:10:05.630 --> 00:10:09.490
With Apple’s finances looking increasingly
dire, and tensions growing with Apple’s

00:10:09.490 --> 00:10:12.520
new CEO, John Sculley, Steve Jobs was ousted.

00:10:12.520 --> 00:10:15.290
A few months later, Microsoft released Windows
1.0.

00:10:15.290 --> 00:10:19.720
It may not have been as pretty as Mac OS,
but it was the first salvo in what would become

00:10:19.720 --> 00:10:23.360
a bitter rivalry and near dominance of the
industry by Microsoft.

00:10:23.360 --> 00:10:28.690
Within ten years, Microsoft Windows was running
on almost 95% of personal computers.

00:10:28.690 --> 00:10:33.329
Initially, fans of Mac OS could rightly claim
superior graphics and ease-of-use.

00:10:33.329 --> 00:10:37.029
Those early versions of Windows were all built
on top of DOS, which was never designed to

00:10:37.029 --> 00:10:38.029
run GUIs.

00:10:38.029 --> 00:10:43.950
But, after Windows 3.1, Microsoft began to
develop a new consumer-oriented OS with upgraded

00:10:43.950 --> 00:10:45.790
GUI called Windows 95.

00:10:45.790 --> 00:10:49.970
This was a significant rewrite that offered
much more than just polished graphics.

00:10:49.970 --> 00:10:54.920
It also had advanced features Mac OS didn’t
have, like program multitasking and protected

00:10:54.920 --> 00:10:55.920
memory.

00:10:55.920 --> 00:11:00.660
Windows 95 introduced many GUI elements still
seen in Windows versions today, like the Start

00:11:00.660 --> 00:11:03.620
menu, taskbar, and Windows Explorer file manager.

00:11:03.620 --> 00:11:05.709
Microsoft wasn’t infallible though.

00:11:05.709 --> 00:11:09.449
Looking to make the desktop metaphor even
easier and friendlier, it worked on a product

00:11:09.449 --> 00:11:13.839
called Microsoft Bob, and it took the idea
of using metaphors to an extreme.

00:11:13.839 --> 00:11:18.260
Now you had a whole virtual room on your screen,
with applications embodied as objects that

00:11:18.260 --> 00:11:20.290
you could put on tables and shelves.

00:11:20.290 --> 00:11:24.220
It even came with a crackling fireplace and
a virtual dog to offer assistance.

00:11:24.220 --> 00:11:25.730
And you see those doors on the sides?

00:11:25.730 --> 00:11:29.620
Yep, those went to different rooms in your
computer where different applications were

00:11:29.620 --> 00:11:30.640
available.

00:11:30.640 --> 00:11:33.070
As you might have guessed, it was not a success.

00:11:33.070 --> 00:11:38.000
This is a great example of how the user interfaces
we enjoy today are the product of what’s

00:11:38.000 --> 00:11:39.470
essentially natural selection.

00:11:39.470 --> 00:11:44.080
Whether you’re running Windows, Mac, Linux,
or some other desktop GUI, it’s almost certainly

00:11:44.080 --> 00:11:48.160
an evolved version of the WIMP paradigm first
introduced on the Xerox Alto.

00:11:48.160 --> 00:11:52.009
Along the way, a lot of bad ideas were tried,
and failed.

00:11:52.009 --> 00:11:55.209
Everything had to be invented, tested, refined,
adopted or dropped.

00:11:55.209 --> 00:11:59.470
Today, GUIs are everywhere and while they’re
good, they are not always great.

00:11:59.470 --> 00:12:04.270
No doubt you’ve experienced design-related
frustrations after downloading an application,

00:12:04.270 --> 00:12:06.990
used someone else’s phone, or visited a
website.

00:12:06.990 --> 00:12:11.279
And for this reason, computer scientists and
interface designers continue to work hard

00:12:11.279 --> 00:12:15.759
to craft computing experiences that are both
easier and more powerful.

00:12:15.760 --> 00:12:20.540
Ultimately, working towards Engelbart's vision
of augmenting human intellect.

00:12:20.540 --> 00:12:21.520
I’ll see you next week.

