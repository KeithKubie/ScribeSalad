WEBVTT
Kind: captions
Language: en

00:00:07.580 --> 00:00:10.250
 
hi my name is reto Meier I'm the tech

00:00:10.250 --> 00:00:10.260
hi my name is reto Meier I'm the tech
 

00:00:10.260 --> 00:00:11.959
hi my name is reto Meier I'm the tech
lead for Google's Android developer

00:00:11.959 --> 00:00:11.969
lead for Google's Android developer
 

00:00:11.969 --> 00:00:14.330
lead for Google's Android developer
relations team in this efficient data

00:00:14.330 --> 00:00:14.340
relations team in this efficient data
 

00:00:14.340 --> 00:00:15.829
relations team in this efficient data
transfers dev bite I'm going to

00:00:15.829 --> 00:00:15.839
transfers dev bite I'm going to
 

00:00:15.839 --> 00:00:17.330
transfers dev bite I'm going to
demonstrate a couple of quick techniques

00:00:17.330 --> 00:00:17.340
demonstrate a couple of quick techniques
 

00:00:17.340 --> 00:00:19.070
demonstrate a couple of quick techniques
that you can use to better understand

00:00:19.070 --> 00:00:19.080
that you can use to better understand
 

00:00:19.080 --> 00:00:20.779
that you can use to better understand
when your application is making network

00:00:20.779 --> 00:00:20.789
when your application is making network
 

00:00:20.789 --> 00:00:23.570
when your application is making network
requests the aim is to modify the data

00:00:23.570 --> 00:00:23.580
requests the aim is to modify the data
 

00:00:23.580 --> 00:00:25.160
requests the aim is to modify the data
transfer profile of your apps to

00:00:25.160 --> 00:00:25.170
transfer profile of your apps to
 

00:00:25.170 --> 00:00:27.589
transfer profile of your apps to
optimize for minimizing the battery

00:00:27.589 --> 00:00:27.599
optimize for minimizing the battery
 

00:00:27.599 --> 00:00:29.120
optimize for minimizing the battery
drain caused by activating the salt

00:00:29.120 --> 00:00:29.130
drain caused by activating the salt
 

00:00:29.130 --> 00:00:31.310
drain caused by activating the salt
radio as you may have already seen in my

00:00:31.310 --> 00:00:31.320
radio as you may have already seen in my
 

00:00:31.320 --> 00:00:33.380
radio as you may have already seen in my
dev bite on understanding the salt radio

00:00:33.380 --> 00:00:33.390
dev bite on understanding the salt radio
 

00:00:33.390 --> 00:00:35.420
dev bite on understanding the salt radio
it's good practice to use the big cookie

00:00:35.420 --> 00:00:35.430
it's good practice to use the big cookie
 

00:00:35.430 --> 00:00:37.610
it's good practice to use the big cookie
approach to data transfers to avoid a

00:00:37.610 --> 00:00:37.620
approach to data transfers to avoid a
 

00:00:37.620 --> 00:00:40.100
approach to data transfers to avoid a
fragmented network traffic profile it

00:00:40.100 --> 00:00:40.110
fragmented network traffic profile it
 

00:00:40.110 --> 00:00:41.569
fragmented network traffic profile it
keeps the cell radio powered up

00:00:41.569 --> 00:00:41.579
keeps the cell radio powered up
 

00:00:41.579 --> 00:00:43.700
keeps the cell radio powered up
indefinitely in favor of minimizing the

00:00:43.700 --> 00:00:43.710
indefinitely in favor of minimizing the
 

00:00:43.710 --> 00:00:45.529
indefinitely in favor of minimizing the
number of radio state transitions and

00:00:45.529 --> 00:00:45.539
number of radio state transitions and
 

00:00:45.539 --> 00:00:47.270
number of radio state transitions and
before you optimize your code you need a

00:00:47.270 --> 00:00:47.280
before you optimize your code you need a
 

00:00:47.280 --> 00:00:48.709
before you optimize your code you need a
way to generate these graphs that show

00:00:48.709 --> 00:00:48.719
way to generate these graphs that show
 

00:00:48.719 --> 00:00:50.510
way to generate these graphs that show
exactly when your app is transferring

00:00:50.510 --> 00:00:50.520
exactly when your app is transferring
 

00:00:50.520 --> 00:00:52.310
exactly when your app is transferring
data and to understand what you're

00:00:52.310 --> 00:00:52.320
data and to understand what you're
 

00:00:52.320 --> 00:00:53.869
data and to understand what you're
looking for so you can look for areas

00:00:53.869 --> 00:00:53.879
looking for so you can look for areas
 

00:00:53.879 --> 00:00:55.970
looking for so you can look for areas
that need improvement there are several

00:00:55.970 --> 00:00:55.980
that need improvement there are several
 

00:00:55.980 --> 00:00:57.680
that need improvement there are several
tools you can use for this most simply

00:00:57.680 --> 00:00:57.690
tools you can use for this most simply
 

00:00:57.690 --> 00:00:59.900
tools you can use for this most simply
you can use logcat to generate log

00:00:59.900 --> 00:00:59.910
you can use logcat to generate log
 

00:00:59.910 --> 00:01:01.310
you can use logcat to generate log
entries that define the timing

00:01:01.310 --> 00:01:01.320
entries that define the timing
 

00:01:01.320 --> 00:01:03.290
entries that define the timing
information of your network requests and

00:01:03.290 --> 00:01:03.300
information of your network requests and
 

00:01:03.300 --> 00:01:05.420
information of your network requests and
at their start and end points and then

00:01:05.420 --> 00:01:05.430
at their start and end points and then
 

00:01:05.430 --> 00:01:07.250
at their start and end points and then
use the export of log file to graph the

00:01:07.250 --> 00:01:07.260
use the export of log file to graph the
 

00:01:07.260 --> 00:01:08.750
use the export of log file to graph the
output using the graphing tool of your

00:01:08.750 --> 00:01:08.760
output using the graphing tool of your
 

00:01:08.760 --> 00:01:10.850
output using the graphing tool of your
choice if you'd like someone to handle

00:01:10.850 --> 00:01:10.860
choice if you'd like someone to handle
 

00:01:10.860 --> 00:01:12.980
choice if you'd like someone to handle
that graphing step for you AT&amp;T offer

00:01:12.980 --> 00:01:12.990
that graphing step for you AT&amp;T offer
 

00:01:12.990 --> 00:01:15.260
that graphing step for you AT&amp;T offer
the open-source application resource

00:01:15.260 --> 00:01:15.270
the open-source application resource
 

00:01:15.270 --> 00:01:17.510
the open-source application resource
optimizer or arrow tool will generate

00:01:17.510 --> 00:01:17.520
optimizer or arrow tool will generate
 

00:01:17.520 --> 00:01:19.280
optimizer or arrow tool will generate
the pretty graphs and even overlay the

00:01:19.280 --> 00:01:19.290
the pretty graphs and even overlay the
 

00:01:19.290 --> 00:01:20.990
the pretty graphs and even overlay the
battery state model as well as providing

00:01:20.990 --> 00:01:21.000
battery state model as well as providing
 

00:01:21.000 --> 00:01:22.789
battery state model as well as providing
you with specific recommendations based

00:01:22.789 --> 00:01:22.799
you with specific recommendations based
 

00:01:22.799 --> 00:01:25.490
you with specific recommendations based
on their analysis of your app another

00:01:25.490 --> 00:01:25.500
on their analysis of your app another
 

00:01:25.500 --> 00:01:27.140
on their analysis of your app another
great alternative is to use the network

00:01:27.140 --> 00:01:27.150
great alternative is to use the network
 

00:01:27.150 --> 00:01:29.240
great alternative is to use the network
statistics tab in the DDMS view which is

00:01:29.240 --> 00:01:29.250
statistics tab in the DDMS view which is
 

00:01:29.250 --> 00:01:31.160
statistics tab in the DDMS view which is
part of the android developer tools as

00:01:31.160 --> 00:01:31.170
part of the android developer tools as
 

00:01:31.170 --> 00:01:33.560
part of the android developer tools as
you can see in this screenshot it

00:01:33.560 --> 00:01:33.570
you can see in this screenshot it
 

00:01:33.570 --> 00:01:34.880
you can see in this screenshot it
displays the amount of data being

00:01:34.880 --> 00:01:34.890
displays the amount of data being
 

00:01:34.890 --> 00:01:36.530
displays the amount of data being
transferred in the direction of the data

00:01:36.530 --> 00:01:36.540
transferred in the direction of the data
 

00:01:36.540 --> 00:01:38.330
transferred in the direction of the data
flow additionally you can tag your

00:01:38.330 --> 00:01:38.340
flow additionally you can tag your
 

00:01:38.340 --> 00:01:40.219
flow additionally you can tag your
output sockets to color code your data

00:01:40.219 --> 00:01:40.229
output sockets to color code your data
 

00:01:40.229 --> 00:01:41.899
output sockets to color code your data
transfers making it easier for you to

00:01:41.899 --> 00:01:41.909
transfers making it easier for you to
 

00:01:41.909 --> 00:01:44.539
transfers making it easier for you to
see where each transfer is originating

00:01:44.539 --> 00:01:44.549
see where each transfer is originating
 

00:01:44.549 --> 00:01:47.179
see where each transfer is originating
if you're using the HTTP client to

00:01:47.179 --> 00:01:47.189
if you're using the HTTP client to
 

00:01:47.189 --> 00:01:49.069
if you're using the HTTP client to
execute your transfers the thread stats

00:01:49.069 --> 00:01:49.079
execute your transfers the thread stats
 

00:01:49.079 --> 00:01:50.929
execute your transfers the thread stats
tag associated with the current thread

00:01:50.929 --> 00:01:50.939
tag associated with the current thread
 

00:01:50.939 --> 00:01:53.030
tag associated with the current thread
will automatically be associated with

00:01:53.030 --> 00:01:53.040
will automatically be associated with
 

00:01:53.040 --> 00:01:54.679
will automatically be associated with
the socket used for transfers using the

00:01:54.679 --> 00:01:54.689
the socket used for transfers using the
 

00:01:54.689 --> 00:01:57.380
the socket used for transfers using the
HTTP client note that for soccer taking

00:01:57.380 --> 00:01:57.390
HTTP client note that for soccer taking
 

00:01:57.390 --> 00:01:58.670
HTTP client note that for soccer taking
to work you need a device running

00:01:58.670 --> 00:01:58.680
to work you need a device running
 

00:01:58.680 --> 00:02:00.740
to work you need a device running
jellybean or higher so once you've

00:02:00.740 --> 00:02:00.750
jellybean or higher so once you've
 

00:02:00.750 --> 00:02:02.569
jellybean or higher so once you've
generated a representation of your apps

00:02:02.569 --> 00:02:02.579
generated a representation of your apps
 

00:02:02.579 --> 00:02:04.789
generated a representation of your apps
transfer profile you can start analyzing

00:02:04.789 --> 00:02:04.799
transfer profile you can start analyzing
 

00:02:04.799 --> 00:02:06.859
transfer profile you can start analyzing
it full battery inefficiencies most

00:02:06.859 --> 00:02:06.869
it full battery inefficiencies most
 

00:02:06.869 --> 00:02:09.139
it full battery inefficiencies most
important thing to look for any periodic

00:02:09.139 --> 00:02:09.149
important thing to look for any periodic
 

00:02:09.149 --> 00:02:11.360
important thing to look for any periodic
transfers any regular pattern of

00:02:11.360 --> 00:02:11.370
transfers any regular pattern of
 

00:02:11.370 --> 00:02:13.630
transfers any regular pattern of
repeating transfers will cause a chorus

00:02:13.630 --> 00:02:13.640
repeating transfers will cause a chorus
 

00:02:13.640 --> 00:02:15.070
repeating transfers will cause a chorus
namely regular pattern of radio

00:02:15.070 --> 00:02:15.080
namely regular pattern of radio
 

00:02:15.080 --> 00:02:16.990
namely regular pattern of radio
activations so you're effectively

00:02:16.990 --> 00:02:17.000
activations so you're effectively
 

00:02:17.000 --> 00:02:18.730
activations so you're effectively
setting the minimum level of battery

00:02:18.730 --> 00:02:18.740
setting the minimum level of battery
 

00:02:18.740 --> 00:02:20.500
setting the minimum level of battery
drain so the shorter the period between

00:02:20.500 --> 00:02:20.510
drain so the shorter the period between
 

00:02:20.510 --> 00:02:23.290
drain so the shorter the period between
updates the higher the battery drain now

00:02:23.290 --> 00:02:23.300
updates the higher the battery drain now
 

00:02:23.300 --> 00:02:25.600
updates the higher the battery drain now
in this example the period is 15 seconds

00:02:25.600 --> 00:02:25.610
in this example the period is 15 seconds
 

00:02:25.610 --> 00:02:27.130
in this example the period is 15 seconds
more than enough to keep the battery

00:02:27.130 --> 00:02:27.140
more than enough to keep the battery
 

00:02:27.140 --> 00:02:29.680
more than enough to keep the battery
powered up indefinitely but depending on

00:02:29.680 --> 00:02:29.690
powered up indefinitely but depending on
 

00:02:29.690 --> 00:02:31.330
powered up indefinitely but depending on
the device and carrier even a period

00:02:31.330 --> 00:02:31.340
the device and carrier even a period
 

00:02:31.340 --> 00:02:32.860
the device and carrier even a period
over a minute maybe enough to present

00:02:32.860 --> 00:02:32.870
over a minute maybe enough to present
 

00:02:32.870 --> 00:02:34.600
over a minute maybe enough to present
prevent the radio from ever dropping

00:02:34.600 --> 00:02:34.610
prevent the radio from ever dropping
 

00:02:34.610 --> 00:02:37.120
prevent the radio from ever dropping
into standby mode completely now we can

00:02:37.120 --> 00:02:37.130
into standby mode completely now we can
 

00:02:37.130 --> 00:02:39.040
into standby mode completely now we can
incrementally reduce the battery impact

00:02:39.040 --> 00:02:39.050
incrementally reduce the battery impact
 

00:02:39.050 --> 00:02:40.810
incrementally reduce the battery impact
by lowering frequency of these regular

00:02:40.810 --> 00:02:40.820
by lowering frequency of these regular
 

00:02:40.820 --> 00:02:42.880
by lowering frequency of these regular
transfers but a better approach is to

00:02:42.880 --> 00:02:42.890
transfers but a better approach is to
 

00:02:42.890 --> 00:02:44.199
transfers but a better approach is to
try and eliminate periodic updates

00:02:44.199 --> 00:02:44.209
try and eliminate periodic updates
 

00:02:44.209 --> 00:02:46.180
try and eliminate periodic updates
completely allowing your apt to have a

00:02:46.180 --> 00:02:46.190
completely allowing your apt to have a
 

00:02:46.190 --> 00:02:48.760
completely allowing your apt to have a
baseline of no battery drain now

00:02:48.760 --> 00:02:48.770
baseline of no battery drain now
 

00:02:48.770 --> 00:02:50.530
baseline of no battery drain now
periodic data transfer spikes it

00:02:50.530 --> 00:02:50.540
periodic data transfer spikes it
 

00:02:50.540 --> 00:02:51.670
periodic data transfer spikes it
typically an indicator of either

00:02:51.670 --> 00:02:51.680
typically an indicator of either
 

00:02:51.680 --> 00:02:53.470
typically an indicator of either
irregular scheduled upload such as

00:02:53.470 --> 00:02:53.480
irregular scheduled upload such as
 

00:02:53.480 --> 00:02:55.720
irregular scheduled upload such as
analytics or ad impressions or client

00:02:55.720 --> 00:02:55.730
analytics or ad impressions or client
 

00:02:55.730 --> 00:02:57.400
analytics or ad impressions or client
signed scheduled polling generally

00:02:57.400 --> 00:02:57.410
signed scheduled polling generally
 

00:02:57.410 --> 00:02:59.620
signed scheduled polling generally
implemented using a timer or repeating

00:02:59.620 --> 00:02:59.630
implemented using a timer or repeating
 

00:02:59.630 --> 00:03:02.259
implemented using a timer or repeating
alarm you can eliminate both using some

00:03:02.259 --> 00:03:02.269
alarm you can eliminate both using some
 

00:03:02.269 --> 00:03:04.240
alarm you can eliminate both using some
simple best practices anything that's

00:03:04.240 --> 00:03:04.250
simple best practices anything that's
 

00:03:04.250 --> 00:03:05.979
simple best practices anything that's
not time-sensitive such as analytics

00:03:05.979 --> 00:03:05.989
not time-sensitive such as analytics
 

00:03:05.989 --> 00:03:07.630
not time-sensitive such as analytics
data ad impressions or anything else

00:03:07.630 --> 00:03:07.640
data ad impressions or anything else
 

00:03:07.640 --> 00:03:09.160
data ad impressions or anything else
that doesn't have a direct impact on the

00:03:09.160 --> 00:03:09.170
that doesn't have a direct impact on the
 

00:03:09.170 --> 00:03:11.110
that doesn't have a direct impact on the
user experience should be queued up and

00:03:11.110 --> 00:03:11.120
user experience should be queued up and
 

00:03:11.120 --> 00:03:12.610
user experience should be queued up and
batch to be transferred together as a

00:03:12.610 --> 00:03:12.620
batch to be transferred together as a
 

00:03:12.620 --> 00:03:14.979
batch to be transferred together as a
group the best approach is to simply

00:03:14.979 --> 00:03:14.989
group the best approach is to simply
 

00:03:14.989 --> 00:03:16.270
group the best approach is to simply
fill the queue and trigger all these

00:03:16.270 --> 00:03:16.280
fill the queue and trigger all these
 

00:03:16.280 --> 00:03:18.370
fill the queue and trigger all these
delay tolerant downloads the st. the

00:03:18.370 --> 00:03:18.380
delay tolerant downloads the st. the
 

00:03:18.380 --> 00:03:19.690
delay tolerant downloads the st. the
next time you need to perform something

00:03:19.690 --> 00:03:19.700
next time you need to perform something
 

00:03:19.700 --> 00:03:21.789
next time you need to perform something
that is time sensitive like downloading

00:03:21.789 --> 00:03:21.799
that is time sensitive like downloading
 

00:03:21.799 --> 00:03:24.100
that is time sensitive like downloading
new music updated headlines current

00:03:24.100 --> 00:03:24.110
new music updated headlines current
 

00:03:24.110 --> 00:03:26.140
new music updated headlines current
sports scores whatever data your users

00:03:26.140 --> 00:03:26.150
sports scores whatever data your users
 

00:03:26.150 --> 00:03:28.210
sports scores whatever data your users
are interacting with if time in

00:03:28.210 --> 00:03:28.220
are interacting with if time in
 

00:03:28.220 --> 00:03:29.890
are interacting with if time in
sensitive data is the only data you

00:03:29.890 --> 00:03:29.900
sensitive data is the only data you
 

00:03:29.900 --> 00:03:31.660
sensitive data is the only data you
transfer you may find it necessary to

00:03:31.660 --> 00:03:31.670
transfer you may find it necessary to
 

00:03:31.670 --> 00:03:33.729
transfer you may find it necessary to
schedule a daily think in that scenario

00:03:33.729 --> 00:03:33.739
schedule a daily think in that scenario
 

00:03:33.739 --> 00:03:35.350
schedule a daily think in that scenario
the best approach is to use a sync

00:03:35.350 --> 00:03:35.360
the best approach is to use a sync
 

00:03:35.360 --> 00:03:37.180
the best approach is to use a sync
adapter to handle this for you we'll

00:03:37.180 --> 00:03:37.190
adapter to handle this for you we'll
 

00:03:37.190 --> 00:03:39.580
adapter to handle this for you we'll
cover that in another div by but we're a

00:03:39.580 --> 00:03:39.590
cover that in another div by but we're a
 

00:03:39.590 --> 00:03:41.170
cover that in another div by but we're a
repeating alarm is the only thing that

00:03:41.170 --> 00:03:41.180
repeating alarm is the only thing that
 

00:03:41.180 --> 00:03:43.509
repeating alarm is the only thing that
will work you can try and optimize that

00:03:43.509 --> 00:03:43.519
will work you can try and optimize that
 

00:03:43.519 --> 00:03:45.729
will work you can try and optimize that
by randomizing the periodicity as shown

00:03:45.729 --> 00:03:45.739
by randomizing the periodicity as shown
 

00:03:45.739 --> 00:03:47.680
by randomizing the periodicity as shown
here make the frequency as low as

00:03:47.680 --> 00:03:47.690
here make the frequency as low as
 

00:03:47.690 --> 00:03:49.750
here make the frequency as low as
possible if you're palling your server

00:03:49.750 --> 00:03:49.760
possible if you're palling your server
 

00:03:49.760 --> 00:03:51.039
possible if you're palling your server
to check for updates you should do

00:03:51.039 --> 00:03:51.049
to check for updates you should do
 

00:03:51.049 --> 00:03:52.569
to check for updates you should do
everything in your power to replace

00:03:52.569 --> 00:03:52.579
everything in your power to replace
 

00:03:52.579 --> 00:03:54.550
everything in your power to replace
client-side palling with Google Cloud

00:03:54.550 --> 00:03:54.560
client-side palling with Google Cloud
 

00:03:54.560 --> 00:03:57.069
client-side palling with Google Cloud
messaging this technology lets you send

00:03:57.069 --> 00:03:57.079
messaging this technology lets you send
 

00:03:57.079 --> 00:03:59.380
messaging this technology lets you send
messages from your server to specific

00:03:59.380 --> 00:03:59.390
messages from your server to specific
 

00:03:59.390 --> 00:04:01.210
messages from your server to specific
application instances through Google's

00:04:01.210 --> 00:04:01.220
application instances through Google's
 

00:04:01.220 --> 00:04:02.890
application instances through Google's
cloud messaging infrastructure so

00:04:02.890 --> 00:04:02.900
cloud messaging infrastructure so
 

00:04:02.900 --> 00:04:04.750
cloud messaging infrastructure so
instead of having each device pull your

00:04:04.750 --> 00:04:04.760
instead of having each device pull your
 

00:04:04.760 --> 00:04:07.750
instead of having each device pull your
server every 15 15 or 60 minutes to

00:04:07.750 --> 00:04:07.760
server every 15 15 or 60 minutes to
 

00:04:07.760 --> 00:04:09.370
server every 15 15 or 60 minutes to
check for updates which may or may not

00:04:09.370 --> 00:04:09.380
check for updates which may or may not
 

00:04:09.380 --> 00:04:11.680
check for updates which may or may not
exist you can have your server notify

00:04:11.680 --> 00:04:11.690
exist you can have your server notify
 

00:04:11.690 --> 00:04:12.849
exist you can have your server notify
each device when there's new information

00:04:12.849 --> 00:04:12.859
each device when there's new information
 

00:04:12.859 --> 00:04:15.580
each device when there's new information
ready for it to download the results as

00:04:15.580 --> 00:04:15.590
ready for it to download the results as
 

00:04:15.590 --> 00:04:17.259
ready for it to download the results as
an improved user experience thanks to

00:04:17.259 --> 00:04:17.269
an improved user experience thanks to
 

00:04:17.269 --> 00:04:19.180
an improved user experience thanks to
both better battery efficiency and lower

00:04:19.180 --> 00:04:19.190
both better battery efficiency and lower
 

00:04:19.190 --> 00:04:22.240
both better battery efficiency and lower
latency updates I examined both sync

00:04:22.240 --> 00:04:22.250
latency updates I examined both sync
 

00:04:22.250 --> 00:04:23.950
latency updates I examined both sync
adapters and Google Cloud messaging in

00:04:23.950 --> 00:04:23.960
adapters and Google Cloud messaging in
 

00:04:23.960 --> 00:04:25.630
adapters and Google Cloud messaging in
more detail as well as exploring some

00:04:25.630 --> 00:04:25.640
more detail as well as exploring some
 

00:04:25.640 --> 00:04:26.450
more detail as well as exploring some
other approaches

00:04:26.450 --> 00:04:26.460
other approaches
 

00:04:26.460 --> 00:04:28.340
other approaches
eliminating repeating transfers later in

00:04:28.340 --> 00:04:28.350
eliminating repeating transfers later in
 

00:04:28.350 --> 00:04:30.710
eliminating repeating transfers later in
this devbyte series for now having

00:04:30.710 --> 00:04:30.720
this devbyte series for now having
 

00:04:30.720 --> 00:04:32.510
this devbyte series for now having
eliminated periodic transfers let's look

00:04:32.510 --> 00:04:32.520
eliminated periodic transfers let's look
 

00:04:32.520 --> 00:04:34.159
eliminated periodic transfers let's look
at some more indicators for potential

00:04:34.159 --> 00:04:34.169
at some more indicators for potential
 

00:04:34.169 --> 00:04:36.740
at some more indicators for potential
efficiency improvements another pattern

00:04:36.740 --> 00:04:36.750
efficiency improvements another pattern
 

00:04:36.750 --> 00:04:39.200
efficiency improvements another pattern
to look for is short spikes either in

00:04:39.200 --> 00:04:39.210
to look for is short spikes either in
 

00:04:39.210 --> 00:04:41.420
to look for is short spikes either in
height or duration while they may not be

00:04:41.420 --> 00:04:41.430
height or duration while they may not be
 

00:04:41.430 --> 00:04:42.920
height or duration while they may not be
regular they typically indicate

00:04:42.920 --> 00:04:42.930
regular they typically indicate
 

00:04:42.930 --> 00:04:44.360
regular they typically indicate
transfers that could be bundled together

00:04:44.360 --> 00:04:44.370
transfers that could be bundled together
 

00:04:44.370 --> 00:04:46.490
transfers that could be bundled together
in the same way as periodic transfers or

00:04:46.490 --> 00:04:46.500
in the same way as periodic transfers or
 

00:04:46.500 --> 00:04:48.620
in the same way as periodic transfers or
possibly batch together or even pre

00:04:48.620 --> 00:04:48.630
possibly batch together or even pre
 

00:04:48.630 --> 00:04:50.210
possibly batch together or even pre
fetched the same thing goes for

00:04:50.210 --> 00:04:50.220
fetched the same thing goes for
 

00:04:50.220 --> 00:04:52.249
fetched the same thing goes for
transfers of any kind that happen in

00:04:52.249 --> 00:04:52.259
transfers of any kind that happen in
 

00:04:52.259 --> 00:04:54.379
transfers of any kind that happen in
close proximity but don't quite overlap

00:04:54.379 --> 00:04:54.389
close proximity but don't quite overlap
 

00:04:54.389 --> 00:04:56.809
close proximity but don't quite overlap
now it's significantly more efficient to

00:04:56.809 --> 00:04:56.819
now it's significantly more efficient to
 

00:04:56.819 --> 00:04:58.640
now it's significantly more efficient to
have transfers happen when the radio is

00:04:58.640 --> 00:04:58.650
have transfers happen when the radio is
 

00:04:58.650 --> 00:05:00.379
have transfers happen when the radio is
already in its active state so when a

00:05:00.379 --> 00:05:00.389
already in its active state so when a
 

00:05:00.389 --> 00:05:02.719
already in its active state so when a
time-sensitive transfer is initiated for

00:05:02.719 --> 00:05:02.729
time-sensitive transfer is initiated for
 

00:05:02.729 --> 00:05:04.520
time-sensitive transfer is initiated for
whatever reason you should look at look

00:05:04.520 --> 00:05:04.530
whatever reason you should look at look
 

00:05:04.530 --> 00:05:06.740
whatever reason you should look at look
to preempt any transfers which are

00:05:06.740 --> 00:05:06.750
to preempt any transfers which are
 

00:05:06.750 --> 00:05:08.150
to preempt any transfers which are
likely to occur within the next few

00:05:08.150 --> 00:05:08.160
likely to occur within the next few
 

00:05:08.160 --> 00:05:10.520
likely to occur within the next few
minutes this is particularly true of any

00:05:10.520 --> 00:05:10.530
minutes this is particularly true of any
 

00:05:10.530 --> 00:05:12.920
minutes this is particularly true of any
scheduled transfers but also includes

00:05:12.920 --> 00:05:12.930
scheduled transfers but also includes
 

00:05:12.930 --> 00:05:14.900
scheduled transfers but also includes
potentially user-initiated transverse

00:05:14.900 --> 00:05:14.910
potentially user-initiated transverse
 

00:05:14.910 --> 00:05:17.990
potentially user-initiated transverse
now for example say you haven't user if

00:05:17.990 --> 00:05:18.000
now for example say you haven't user if
 

00:05:18.000 --> 00:05:19.909
now for example say you haven't user if
your first perform a download to let the

00:05:19.909 --> 00:05:19.919
your first perform a download to let the
 

00:05:19.919 --> 00:05:21.350
your first perform a download to let the
user read a full article that you

00:05:21.350 --> 00:05:21.360
user read a full article that you
 

00:05:21.360 --> 00:05:23.180
user read a full article that you
haven't yet prefetched you should use

00:05:23.180 --> 00:05:23.190
haven't yet prefetched you should use
 

00:05:23.190 --> 00:05:24.800
haven't yet prefetched you should use
this as an opportunity to prefetch other

00:05:24.800 --> 00:05:24.810
this as an opportunity to prefetch other
 

00:05:24.810 --> 00:05:26.120
this as an opportunity to prefetch other
articles that they're likely to read

00:05:26.120 --> 00:05:26.130
articles that they're likely to read
 

00:05:26.130 --> 00:05:27.980
articles that they're likely to read
next particularly if switching between

00:05:27.980 --> 00:05:27.990
next particularly if switching between
 

00:05:27.990 --> 00:05:29.809
next particularly if switching between
your articles as simple as swiping left

00:05:29.809 --> 00:05:29.819
your articles as simple as swiping left
 

00:05:29.819 --> 00:05:32.360
your articles as simple as swiping left
or right now alternatively if the action

00:05:32.360 --> 00:05:32.370
or right now alternatively if the action
 

00:05:32.370 --> 00:05:34.339
or right now alternatively if the action
is time-sensitive but not critical for

00:05:34.339 --> 00:05:34.349
is time-sensitive but not critical for
 

00:05:34.349 --> 00:05:37.040
is time-sensitive but not critical for
example uploading an image it might be

00:05:37.040 --> 00:05:37.050
example uploading an image it might be
 

00:05:37.050 --> 00:05:38.870
example uploading an image it might be
worth holding off for up to 30 seconds

00:05:38.870 --> 00:05:38.880
worth holding off for up to 30 seconds
 

00:05:38.880 --> 00:05:40.760
worth holding off for up to 30 seconds
just in case another transfer is

00:05:40.760 --> 00:05:40.770
just in case another transfer is
 

00:05:40.770 --> 00:05:43.790
just in case another transfer is
initiated in the interim now perhaps not

00:05:43.790 --> 00:05:43.800
initiated in the interim now perhaps not
 

00:05:43.800 --> 00:05:45.320
initiated in the interim now perhaps not
surprisingly this functionality is built

00:05:45.320 --> 00:05:45.330
surprisingly this functionality is built
 

00:05:45.330 --> 00:05:47.420
surprisingly this functionality is built
into the sync adapter which also handles

00:05:47.420 --> 00:05:47.430
into the sync adapter which also handles
 

00:05:47.430 --> 00:05:48.860
into the sync adapter which also handles
things like lost connectivity and

00:05:48.860 --> 00:05:48.870
things like lost connectivity and
 

00:05:48.870 --> 00:05:50.659
things like lost connectivity and
battering transfers across applications

00:05:50.659 --> 00:05:50.669
battering transfers across applications
 

00:05:50.669 --> 00:05:52.999
battering transfers across applications
so it makes it a great approach for

00:05:52.999 --> 00:05:53.009
so it makes it a great approach for
 

00:05:53.009 --> 00:05:55.520
so it makes it a great approach for
handling all of your data transfers I'll

00:05:55.520 --> 00:05:55.530
handling all of your data transfers I'll
 

00:05:55.530 --> 00:05:57.499
handling all of your data transfers I'll
dive into that and further efficient

00:05:57.499 --> 00:05:57.509
dive into that and further efficient
 

00:05:57.509 --> 00:05:59.629
dive into that and further efficient
data transfer topics in more detail and

00:05:59.629 --> 00:05:59.639
data transfer topics in more detail and
 

00:05:59.639 --> 00:06:01.339
data transfer topics in more detail and
other devbytes in their series including

00:06:01.339 --> 00:06:01.349
other devbytes in their series including
 

00:06:01.349 --> 00:06:02.540
other devbytes in their series including
how to implement some of those best

00:06:02.540 --> 00:06:02.550
how to implement some of those best
 

00:06:02.550 --> 00:06:04.219
how to implement some of those best
practices using simple code patterns

00:06:04.219 --> 00:06:04.229
practices using simple code patterns
 

00:06:04.229 --> 00:06:06.499
practices using simple code patterns
Google Cloud messaging and the sync

00:06:06.499 --> 00:06:06.509
Google Cloud messaging and the sync
 

00:06:06.509 --> 00:06:08.870
Google Cloud messaging and the sync
adapter

