WEBVTT
Kind: captions
Language: en

00:00:00.220 --> 00:00:04.516
So now, we have seen that in MSI
even when we have an intervention,

00:00:04.516 --> 00:00:09.070
we need to write to memory every time
we have a cache to cache transfer.

00:00:09.070 --> 00:00:14.202
So, for example, C1 has the block in
the M state because it just wrote it.

00:00:14.202 --> 00:00:18.590
C2 wants to read the data, so
it puts a read request on the bus.

00:00:18.590 --> 00:00:21.504
C1 responds with the data.

00:00:21.504 --> 00:00:27.808
So now C2 has the date, but C1 can
no longer just write to this block.

00:00:27.808 --> 00:00:32.642
So C1 gets the block in the shared
state, C2 gets the block in the shared

00:00:32.642 --> 00:00:38.690
state, and that's why the memory had to
grab the data when C1 was responding.

00:00:38.690 --> 00:00:42.010
Now what can happen is C2 writes so

00:00:42.010 --> 00:00:45.920
it sends an invalidation because
it already has the data.

00:00:45.920 --> 00:00:50.780
Now C1 gets invalid state,
C2 gets the modified state,

00:00:50.780 --> 00:00:55.910
and and then let's say this read write
behavior moves to another core, like C1.

00:00:55.910 --> 00:00:59.250
So pretty much, if one core reads and
writes, then another one reads and

00:00:59.250 --> 00:01:02.100
writes and so on,
we can have a repetition of this.

00:01:02.100 --> 00:01:05.050
So pretty much the data is kind
of moving around the caches, but

00:01:05.050 --> 00:01:08.650
the problem is,
every time it moves between caches,

00:01:08.650 --> 00:01:11.030
the memory also gets written.

00:01:11.030 --> 00:01:15.000
And the memory doesn't have as
much bandwidth as the caches do.

00:01:15.000 --> 00:01:19.810
So the problem really is that here
we needed to do a memory write.

00:01:19.810 --> 00:01:25.160
Another problem occurs because,
when C2 has written, for example,

00:01:25.160 --> 00:01:29.740
and has the data in the modified state,
and then C2 responds with data and

00:01:29.740 --> 00:01:35.430
that causes a memory write, we again
get C1 has the block in shared state.

00:01:35.430 --> 00:01:37.090
C2 has the block in shared state.

00:01:37.090 --> 00:01:42.610
Now if C3 reads, because both of these
have the block in the shared state,

00:01:42.610 --> 00:01:45.070
the memory provides the data.

00:01:45.070 --> 00:01:49.820
So we have memory reads here even though
one of these could have responded with

00:01:49.820 --> 00:01:52.990
the data, if we only knew which
of the two should respond.

00:01:52.990 --> 00:01:55.370
Definitely both of them
should not respond.

00:01:55.370 --> 00:01:58.380
So if we had a way to tell which
one of them should respond

00:01:58.380 --> 00:02:02.570
we could avoid this memory read,
by the one that is responsible for

00:02:02.570 --> 00:02:07.130
responding providing the data as
long as there are new requestors.

00:02:07.130 --> 00:02:09.210
This can happen a lot of times.

00:02:09.210 --> 00:02:12.200
So if another core reads,
same thing, we get the memory read,

00:02:12.200 --> 00:02:16.080
although now there are three cores with
the data in the shared state, and so on.

00:02:16.080 --> 00:02:19.930
We want to avoid the update to memory
as long as there is a cache that still

00:02:19.930 --> 00:02:22.290
holds the most recent
value of the block.

00:02:22.290 --> 00:02:25.570
And we want to avoid memory
reads if there is a cache that

00:02:25.570 --> 00:02:27.820
can provide this block.

00:02:27.820 --> 00:02:32.288
Because again, memory bandwidth is
a lot lower than cache bandwidth.

00:02:32.288 --> 00:02:37.314
And also memory writes are a lot
more expensive in terms of power and

00:02:37.314 --> 00:02:40.206
latency then cache reads and writes.

00:02:40.206 --> 00:02:45.049
But to do this, we need to make
a non-modified version of the block in

00:02:45.049 --> 00:02:48.806
one of the caches responsible for
giving data to other

00:02:48.806 --> 00:02:53.732
caches when they want it so that
the memory doesn't need to respond and

00:02:53.732 --> 00:02:58.409
eventually writing the block to
memory so that the memory doesn't

00:02:58.409 --> 00:03:02.910
need to be updated every time
we do something like this.

00:03:02.910 --> 00:03:05.960
So what we really need to
know is which of the shared

00:03:05.960 --> 00:03:08.055
copies is the one responsible.

00:03:08.055 --> 00:03:12.590
And we will know this by
introducing another state called O,

00:03:12.590 --> 00:03:15.370
which stands for owned.

00:03:15.370 --> 00:03:19.640
So there will be one owner of
the blog if others are sharing it.

00:03:20.650 --> 00:03:23.850
The O state will behave
just like the shared state,

00:03:23.850 --> 00:03:26.930
except that whenever
there is a request for

00:03:26.930 --> 00:03:32.180
the data in the block, the owner is one
of the sharers that gets to respond.

00:03:32.180 --> 00:03:36.290
And also if the owner replaces
the block from the cache,

00:03:36.290 --> 00:03:39.760
it gets right back to memory so
that we ensure that memory gets updated.

