WEBVTT
Kind: captions
Language: en

00:00:00.090 --> 00:00:01.520
So why would you use YUV?

00:00:01.520 --> 00:00:04.330
Well, okay, it's easier to cluster
pixels, but, you know what?

00:00:04.330 --> 00:00:06.265
That's, that's not that important,

00:00:06.265 --> 00:00:08.470
because I could just
rotate those filter boxes.

00:00:08.470 --> 00:00:09.900
There's a much deeper reason, and

00:00:09.900 --> 00:00:12.840
that actually comes from the part
that I showed you earlier.

00:00:12.840 --> 00:00:17.430
You remember that human vision
is much more sensitive to chr,

00:00:17.430 --> 00:00:20.660
to changes in luminance,
than changes in color?

00:00:20.660 --> 00:00:25.600
What that means is that you could
actually subsample the color,

00:00:25.600 --> 00:00:29.260
have fewer pixels if you will,
than luminance.

00:00:29.260 --> 00:00:30.067
And the, for

00:00:30.067 --> 00:00:34.708
the human system, it would be about
the same amount of resolution, okay?

00:00:34.708 --> 00:00:38.940
So in order to compress your imagery,
in order to use fewer bits to describe

00:00:38.940 --> 00:00:42.764
something, one of the things you can
do is, you can use more bits for

00:00:42.764 --> 00:00:47.040
the wide channel than you do for
the U channel and the V channel.

00:00:47.040 --> 00:00:48.440
There's an example, it's called YUV422.

00:00:48.440 --> 00:00:53.340
I think the original 422
actually had to do with

00:00:53.340 --> 00:00:57.690
the amount of bandwidth of the luminance
versus the two chroma channels.

00:00:57.690 --> 00:01:00.180
These days when you think of 422,
the idea

00:01:00.180 --> 00:01:04.629
is that if you were encoding two pixels,
you would use two bytes of it and

00:01:04.629 --> 00:01:07.080
assume that you were just
doing pixels 0 to, to 255.

00:01:07.080 --> 00:01:11.610
You would use two pixels for
the two bytes for the luminance, but

00:01:11.610 --> 00:01:13.520
one byte for U and one byte for V.

00:01:13.520 --> 00:01:18.260
So you had twice as many bytes
dedicated to the luminance signal

00:01:18.260 --> 00:01:19.760
than you do the chroma signal.

00:01:19.760 --> 00:01:22.830
And it turns out that humans,
it's pretty indistinguishable.

00:01:22.830 --> 00:01:25.550
Something else that you can do,
there are other chroma spaces,

00:01:25.550 --> 00:01:27.620
some of them come from video and
television.

00:01:27.620 --> 00:01:31.958
There's one called YCbCr, change
difference between luminance in blue,

00:01:31.958 --> 00:01:33.050
luminance in red.

00:01:33.050 --> 00:01:34.415
There's something called Pb and Pr.

00:01:34.415 --> 00:01:37.478
They're, there are all these sort of
different linear combinations.

00:01:37.478 --> 00:01:40.860
There's the L*a*b* color space that was
based upon the human measurements that

00:01:40.860 --> 00:01:42.210
we talked about before.

00:01:42.210 --> 00:01:43.667
There's something called L*u*v*,

00:01:43.667 --> 00:01:45.860
which is just a little bit
easier to compute than L*a*b*.

00:01:45.860 --> 00:01:52.330
The bottom line is that all of these are
different ways of representing color.

00:01:52.330 --> 00:01:57.620
If I were to plot this now in say,
HSV space, right,

00:01:57.620 --> 00:02:02.370
and I just showed you H and
S, right, hue and saturation.

00:02:02.370 --> 00:02:06.450
Now, it's pretty easy to
find the red pixels, right?

00:02:06.450 --> 00:02:09.130
Here they are,
there's some over here some over there.

00:02:09.130 --> 00:02:13.850
All right, and the,
the hue gives you the color spectrum.

00:02:13.850 --> 00:02:17.040
Why is this coming
around back over here?

00:02:17.040 --> 00:02:19.260
It's because hue is actually
going around in a circle and

00:02:19.260 --> 00:02:23.360
it crosses zero there, so these two
are actually very close together.

00:02:23.360 --> 00:02:26.130
One last thing just if you
ever want to play around.

00:02:26.130 --> 00:02:29.280
If you ever have a digital
video camera and

00:02:29.280 --> 00:02:34.110
you bring that video into your
computer and it's kind of like,

00:02:34.110 --> 00:02:37.180
low light,
you'll see it does a reasonable job.

00:02:37.180 --> 00:02:39.620
If you can pull out the R,
G, and B signals and

00:02:39.620 --> 00:02:43.260
play them as a separate video, the R
one will look okay, the green one okay.

00:02:43.260 --> 00:02:45.610
The blue one will have
all of this noise in it.

00:02:45.610 --> 00:02:50.060
You play it and it's awful, and that's
because they dedicate hardly any bits at

00:02:50.060 --> 00:02:54.910
all to encoding the blue signal, because
it doesn't matter to you, all right?

00:02:54.910 --> 00:02:58.100
And again, this isn't physics,
this is psychophysics, but

00:02:58.100 --> 00:03:01.710
it's how computer vision and
computing of color relates to color.

