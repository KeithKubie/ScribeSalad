WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.420
[MUSIC PLAYING]

00:00:07.994 --> 00:00:09.160
ADAM RODRIGUEZ: Hi everyone.

00:00:09.160 --> 00:00:10.500
Welcome to this talk
on Android Things.

00:00:10.500 --> 00:00:11.691
Glad you're still with us.

00:00:11.691 --> 00:00:12.190
I'm Adam.

00:00:12.190 --> 00:00:13.734
I'm a product manager
here at Google.

00:00:13.734 --> 00:00:14.650
AMY JANG: And I'm Amy.

00:00:14.650 --> 00:00:17.170
I lead engineering for
Android Things Console.

00:00:17.170 --> 00:00:17.800
ADAM RODRIGUEZ: And
today we're going

00:00:17.800 --> 00:00:20.216
to talk to you about how to
use the Android Things console

00:00:20.216 --> 00:00:22.840
to update your production
devices in the field.

00:00:22.840 --> 00:00:25.600
As you hopefully learned
from a few other talks at IO,

00:00:25.600 --> 00:00:27.100
Android Things is
a great platform

00:00:27.100 --> 00:00:29.050
for building yourself some IoT.

00:00:29.050 --> 00:00:31.270
But when it comes to
actually making more than one

00:00:31.270 --> 00:00:32.980
of something, how
do you maintain

00:00:32.980 --> 00:00:34.886
that device over its lifetime?

00:00:34.886 --> 00:00:36.760
How do you support those
devices once they're

00:00:36.760 --> 00:00:38.320
in customer's hands?

00:00:38.320 --> 00:00:40.881
That's what we're here to
talk to you about today.

00:00:40.881 --> 00:00:41.380
OK.

00:00:41.380 --> 00:00:43.030
So let's do a
really quick review

00:00:43.030 --> 00:00:46.480
of what is Android Things
and why you might want it.

00:00:46.480 --> 00:00:48.520
First of all, it has
the power of Android.

00:00:48.520 --> 00:00:50.740
Developed with the same
tools that you know and love,

00:00:50.740 --> 00:00:52.480
if you're an Android
developer, this

00:00:52.480 --> 00:00:55.370
is easy, because this
is Android after all.

00:00:55.370 --> 00:00:57.955
Secondly, it scales from
prototype to production.

00:00:57.955 --> 00:01:00.580
You don't need to be a hardware
engineer or a firmware engineer

00:01:00.580 --> 00:01:01.300
to do this.

00:01:01.300 --> 00:01:03.470
We provide fully certified SoMs.

00:01:03.470 --> 00:01:06.130
Android Things isn't AOSP, so
to use the stuff that we're

00:01:06.130 --> 00:01:08.080
talking about in
this talk you need

00:01:08.080 --> 00:01:09.689
to use Android Things SoMs.

00:01:09.689 --> 00:01:11.230
The advantage here
is that these SoMs

00:01:11.230 --> 00:01:12.760
are built for the platform.

00:01:12.760 --> 00:01:14.630
So you just need to
write Android code.

00:01:14.630 --> 00:01:16.630
You don't need to worry
about low level firmware

00:01:16.630 --> 00:01:18.430
to drive that hardware.

00:01:18.430 --> 00:01:22.137
And finally, with automatic
updates, security is built in.

00:01:22.137 --> 00:01:23.970
Because you're developing
on certified SoMs,

00:01:23.970 --> 00:01:27.110
it allows Google to manage
the security of your device.

00:01:27.110 --> 00:01:29.200
Google provides updates
and security fixes

00:01:29.200 --> 00:01:31.116
that you can implement
throughout the lifetime

00:01:31.116 --> 00:01:32.830
of your product.

00:01:32.830 --> 00:01:35.330
Our goal with Android Things
is to make things easy for you.

00:01:35.330 --> 00:01:37.630
Easy, managed and secure.

00:01:37.630 --> 00:01:39.190
But this does raise
the question--

00:01:39.190 --> 00:01:40.690
why is IoT so hard?

00:01:40.690 --> 00:01:42.652
Do I really need to
worry about this?

00:01:42.652 --> 00:01:44.110
So think a little
bit about what it

00:01:44.110 --> 00:01:46.850
would take for you to ship
a few thousand managed,

00:01:46.850 --> 00:01:49.430
secure IoT devices.

00:01:49.430 --> 00:01:52.090
You're going to have to do
the hard stuff of building

00:01:52.090 --> 00:01:55.250
the devices, designing the
hardware, writing the software.

00:01:55.250 --> 00:01:57.460
It's hard, but it's
also the special sauce

00:01:57.460 --> 00:01:59.320
that makes your device unique.

00:01:59.320 --> 00:02:01.300
But beyond that, there's
a ton of other stuff

00:02:01.300 --> 00:02:02.640
you need to do too.

00:02:02.640 --> 00:02:05.320
How do you share development
with other engineers?

00:02:05.320 --> 00:02:07.475
If you want your
devices to be secure,

00:02:07.475 --> 00:02:09.850
you have to keep up to date
with latest security patches.

00:02:09.850 --> 00:02:11.575
Once you've found
those patches, you

00:02:11.575 --> 00:02:14.410
have to build a way for your
devices to get those patches.

00:02:14.410 --> 00:02:16.750
And then how do you
update them in a safe way?

00:02:16.750 --> 00:02:18.430
If the update goes
bad, how do you

00:02:18.430 --> 00:02:20.960
make sure you don't break
your customers' devices?

00:02:20.960 --> 00:02:23.830
Imagine designing delta updates,
fractional rollouts, A/B

00:02:23.830 --> 00:02:25.810
partitions, channel management.

00:02:25.810 --> 00:02:28.960
All these things you
need for successful IoT.

00:02:28.960 --> 00:02:31.240
But maintaining and updating
all that infrastructure

00:02:31.240 --> 00:02:32.990
is a massive job.

00:02:32.990 --> 00:02:34.779
So like we said
earlier, our goal

00:02:34.779 --> 00:02:36.820
is to make it easier for
you with Android Things.

00:02:36.820 --> 00:02:40.210
So the hardware and the software
design, it's still up to you--

00:02:40.210 --> 00:02:40.960
like it should be.

00:02:40.960 --> 00:02:42.390
It's what makes your
product special.

00:02:42.390 --> 00:02:43.764
But we make it
easier because you

00:02:43.764 --> 00:02:47.410
can use all your familiar
tools such as Android Studio

00:02:47.410 --> 00:02:48.730
and [INAUDIBLE] to do it.

00:02:48.730 --> 00:02:51.520
But you don't need to bother
with firmware code because

00:02:51.520 --> 00:02:54.210
of the Android Things
managed SoMs model.

00:02:54.210 --> 00:02:56.060
Then when it comes
to security updates,

00:02:56.060 --> 00:02:58.660
you get to leverage the
entire Android team here

00:02:58.660 --> 00:03:00.760
to find and fix security holes.

00:03:00.760 --> 00:03:02.470
Plus with automatic
updates, you get

00:03:02.470 --> 00:03:04.570
those security patches
with literally zero

00:03:04.570 --> 00:03:06.790
involvement from
you, years after you

00:03:06.790 --> 00:03:08.500
ship your last device.

00:03:08.500 --> 00:03:11.050
And for updates, we're
leveraging the same technology

00:03:11.050 --> 00:03:14.050
used to update millions of
devices in the field every day.

00:03:14.050 --> 00:03:16.146
Hardened, proven and optimized.

00:03:16.146 --> 00:03:18.520
So you can focus on the part
that actually differentiates

00:03:18.520 --> 00:03:19.360
your product--

00:03:19.360 --> 00:03:21.991
the features and
applications that you write.

00:03:21.991 --> 00:03:23.740
AMY JANG: So let's
walk through an example

00:03:23.740 --> 00:03:26.410
to see how Android Things
will help you do that.

00:03:26.410 --> 00:03:29.170
Imagine that Adam and I are
building a laundry folding

00:03:29.170 --> 00:03:32.680
robot, because, let's be honest,
nobody loves folding socks,

00:03:32.680 --> 00:03:33.670
right?

00:03:33.670 --> 00:03:37.250
So this robot uses lots of
object recognition, vision

00:03:37.250 --> 00:03:39.370
machine learning,
which is a perfect use

00:03:39.370 --> 00:03:41.840
case for Android Things.

00:03:41.840 --> 00:03:43.560
How do I take that
from a prototype

00:03:43.560 --> 00:03:47.990
that I just build at home and
make it available for everyone?

00:03:47.990 --> 00:03:50.850
This is where the magic
of our console comes in.

00:03:50.850 --> 00:03:53.470
Android Things has it been
designed intentionally

00:03:53.470 --> 00:03:56.080
to make it easy for
you to develop hardware

00:03:56.080 --> 00:03:57.820
and ship it to the market.

00:03:57.820 --> 00:03:59.500
And you can use
Android Things console

00:03:59.500 --> 00:04:01.690
to take care of all your needs.

00:04:01.690 --> 00:04:04.900
First thing configure-- you
will define a device management

00:04:04.900 --> 00:04:07.720
group which we call
products, and by uploading

00:04:07.720 --> 00:04:11.890
apps you have written using
editors like Android Studio,

00:04:11.890 --> 00:04:15.340
you can manage your apps
using [INAUDIBLE] console.

00:04:15.340 --> 00:04:17.110
And using build
functionality, you

00:04:17.110 --> 00:04:20.140
can create secure Android
Things images with the apps

00:04:20.140 --> 00:04:23.380
that you just wrote,
and at release step,

00:04:23.380 --> 00:04:26.230
you can push seamless
updates to your devices

00:04:26.230 --> 00:04:29.140
and use analytics to make
sure that your release went

00:04:29.140 --> 00:04:30.230
smoothly.

00:04:30.230 --> 00:04:33.269
So let's dig into details
of how all this works.

00:04:33.269 --> 00:04:34.060
ADAM RODRIGUEZ: OK.

00:04:34.060 --> 00:04:37.090
So the first step in this road
from prototype to production

00:04:37.090 --> 00:04:39.430
is to set up some details in
the console of the product

00:04:39.430 --> 00:04:40.710
that you plan to build.

00:04:40.710 --> 00:04:43.060
Let's configure
our laundry robot.

00:04:43.060 --> 00:04:45.730
First off, set up your product
name and create models.

00:04:45.730 --> 00:04:47.480
Let's imagine we had
a few different SKUs.

00:04:47.480 --> 00:04:50.200
Maybe we've got a
UK SKU and US SKU.

00:04:50.200 --> 00:04:51.790
Models let you break
out your product

00:04:51.790 --> 00:04:53.290
into different versions.

00:04:53.290 --> 00:04:55.679
You next want to
pick your SoM type.

00:04:55.679 --> 00:04:57.970
Pick a SoM based on the
features you need and the price

00:04:57.970 --> 00:04:59.260
point you wish to hit.

00:04:59.260 --> 00:05:00.850
Picking a SoM is
important because it

00:05:00.850 --> 00:05:04.030
controls a lot about the image
that you want to create later.

00:05:04.030 --> 00:05:04.870
One note though.

00:05:04.870 --> 00:05:07.453
If you start building with one
SoM and then want to change it,

00:05:07.453 --> 00:05:09.980
it's really easy without having
to rewrite a lot of code.

00:05:09.980 --> 00:05:11.938
It's one of the things
that I personally really

00:05:11.938 --> 00:05:13.970
love about our
managed SoM model.

00:05:13.970 --> 00:05:16.160
You can start with
something really expensive

00:05:16.160 --> 00:05:18.720
and then downgrade once you
want to cut costs at production.

00:05:18.720 --> 00:05:20.720
Or you can hack together
something really cheap,

00:05:20.720 --> 00:05:22.886
and then if the performance
doesn't meet your needs,

00:05:22.886 --> 00:05:25.400
you can upgrade to
a more powerful SoM.

00:05:25.400 --> 00:05:27.070
Finally, set up
product sharing too.

00:05:27.070 --> 00:05:29.390
Since Amy and I are building
this laundroid together,

00:05:29.390 --> 00:05:31.820
we share access to this
product via the console,

00:05:31.820 --> 00:05:35.750
so either one of us can
upload apps and create builds.

00:05:35.750 --> 00:05:37.250
Once you get the
product configured,

00:05:37.250 --> 00:05:39.300
the next step is
to write your apps.

00:05:39.300 --> 00:05:41.300
Apps are the core of
Android, and Android Things

00:05:41.300 --> 00:05:42.740
is no exception.

00:05:42.740 --> 00:05:44.540
They define all the
functionality inside

00:05:44.540 --> 00:05:45.530
of Android Things.

00:05:45.530 --> 00:05:47.990
When Amy wrote the
feature for folding socks,

00:05:47.990 --> 00:05:50.081
she did that in [INAUDIBLE] APK.

00:05:50.081 --> 00:05:52.580
You can use all the tools you're
familiar with as an Android

00:05:52.580 --> 00:05:53.710
developer--

00:05:53.710 --> 00:05:57.140
Android Studio, Kotlin, Google
Play services, Firebase.

00:05:57.140 --> 00:05:58.910
It all just works
because, again, this

00:05:58.910 --> 00:06:01.490
is just Android after all.

00:06:01.490 --> 00:06:04.590
Once your apps are written, you
upload them to the app library.

00:06:04.590 --> 00:06:06.020
So you can add them into builds.

00:06:06.020 --> 00:06:08.310
As you can see here, we've
got four different apps

00:06:08.310 --> 00:06:11.270
that break out our laundry
robot's functionality.

00:06:11.270 --> 00:06:13.490
The app library also
takes care of versioning,

00:06:13.490 --> 00:06:15.780
so when you've got a
new version of your app,

00:06:15.780 --> 00:06:19.031
the library takes care to
show you the most recent one.

00:06:19.031 --> 00:06:22.370
One piece that I really love
about this is app sharing.

00:06:22.370 --> 00:06:24.620
Just like you can share a
product with a collaborator,

00:06:24.620 --> 00:06:26.600
you can share apps too.

00:06:26.600 --> 00:06:28.790
Android itself is all
about building apps

00:06:28.790 --> 00:06:30.710
that others can use
and Android Things

00:06:30.710 --> 00:06:32.240
is no exception here either.

00:06:32.240 --> 00:06:33.890
So share your aps
with other people

00:06:33.890 --> 00:06:37.095
on your team or other people
building similar products.

00:06:37.095 --> 00:06:38.720
While today, you're
probably only going

00:06:38.720 --> 00:06:41.582
to use apps that you wrote
yourself, as more people build

00:06:41.582 --> 00:06:43.790
on Android Things, you might
find yourself using apps

00:06:43.790 --> 00:06:47.816
that other people wrote for
utilities and common features.

00:06:47.816 --> 00:06:49.940
AMY JANG: And now it's
time to build images

00:06:49.940 --> 00:06:52.160
with Android Things apps
that you guys wrote.

00:06:52.160 --> 00:06:55.520
In our case I wrote
a brand new socks.APK

00:06:55.520 --> 00:06:59.580
to give our robot some awesome
new sock folding functionality.

00:06:59.580 --> 00:07:01.470
Adam just uploaded
to the app library

00:07:01.470 --> 00:07:03.750
in console, also shared with me.

00:07:03.750 --> 00:07:06.290
So now that we have
added this functionality,

00:07:06.290 --> 00:07:07.760
it's time to
package it up into a

00:07:07.760 --> 00:07:10.700
build and flash
onto your devices.

00:07:10.700 --> 00:07:13.460
So Build is where all the
ingredients come together.

00:07:13.460 --> 00:07:16.010
Apps, Google Apps,
hardware configurations

00:07:16.010 --> 00:07:19.040
that you may want to
customize for your device.

00:07:19.040 --> 00:07:21.470
The set of options that
you have chosen here

00:07:21.470 --> 00:07:23.960
are what we call
build configurations.

00:07:23.960 --> 00:07:27.530
And build configurations are
like secret sauces and rules

00:07:27.530 --> 00:07:31.700
and configurations that specify
the content of the device

00:07:31.700 --> 00:07:32.420
image.

00:07:32.420 --> 00:07:35.090
And by device image,
I mean the images

00:07:35.090 --> 00:07:38.900
to flash to your devices,
and images to create payloads

00:07:38.900 --> 00:07:41.400
for over the air update.

00:07:41.400 --> 00:07:44.270
So in this Build step, you
can create new and many

00:07:44.270 --> 00:07:47.590
build configurations
and manage them.

00:07:47.590 --> 00:07:49.340
For most of you, you
will have just bought

00:07:49.340 --> 00:07:52.370
or received from this
I/O the developer kit.

00:07:52.370 --> 00:07:55.850
To get started, you can select
the Use Starter Kit settings,

00:07:55.850 --> 00:07:59.270
and all the build details
will be pre-populated for you.

00:07:59.270 --> 00:08:01.610
For this example though,
let's walk through an example

00:08:01.610 --> 00:08:04.940
of starting from scratch.

00:08:04.940 --> 00:08:07.660
First, one of the
most important things

00:08:07.660 --> 00:08:10.942
is to select like your
Android Things OS version.

00:08:10.942 --> 00:08:12.400
Pick the newest
version that you're

00:08:12.400 --> 00:08:15.280
comfortable with because
those will have the latest bug

00:08:15.280 --> 00:08:17.600
fixes and security updates.

00:08:17.600 --> 00:08:19.720
You're not forced to
use the latest one.

00:08:19.720 --> 00:08:23.020
But it's recommended
for this reason.

00:08:23.020 --> 00:08:26.530
Next up, in this step, you
will see the list of apps

00:08:26.530 --> 00:08:29.200
that you have uploaded
in the app library.

00:08:29.200 --> 00:08:31.810
Select the apps that you want
to include into your build.

00:08:31.810 --> 00:08:34.840
And don't forget to include
the apps provided by Google

00:08:34.840 --> 00:08:37.570
like Google Play services.

00:08:37.570 --> 00:08:40.419
And why would you want
Google Play services?

00:08:40.419 --> 00:08:42.429
With Google Play
services, your apps

00:08:42.429 --> 00:08:46.960
can take advantage of the latest
Google API, such as Nearby,

00:08:46.960 --> 00:08:50.380
Maps, Firebase, including
the new [INAUDIBLE] kit

00:08:50.380 --> 00:08:53.020
included in the Google
Play service package.

00:08:53.020 --> 00:08:56.020
Simply click on the checkbox
you saw in the dialog

00:08:56.020 --> 00:08:59.549
and it will be
included in your build.

00:08:59.549 --> 00:09:00.340
ADAM RODRIGUEZ: OK.

00:09:00.340 --> 00:09:01.450
So back to the build.

00:09:01.450 --> 00:09:03.250
Once you select your
apps, take a look

00:09:03.250 --> 00:09:05.260
at the permissions those
apps are requesting

00:09:05.260 --> 00:09:07.180
and make sure that
you're OK with them.

00:09:07.180 --> 00:09:08.980
Since your users can't
opt into permissions

00:09:08.980 --> 00:09:11.640
themselves like with regular
Android, it's up to you

00:09:11.640 --> 00:09:13.235
to do it for them.

00:09:13.235 --> 00:09:15.610
If you're only using apps that
you've developed yourself,

00:09:15.610 --> 00:09:17.485
there really shouldn't
be any surprises here.

00:09:17.485 --> 00:09:19.480
But if you're using
apps shared from others,

00:09:19.480 --> 00:09:20.890
it's worth taking a look.

00:09:20.890 --> 00:09:23.620
This is helpful to prevent the
doing something wrong that you

00:09:23.620 --> 00:09:26.290
weren't expecting, and
a good security measure.

00:09:26.290 --> 00:09:27.970
As Android Things
gets more common,

00:09:27.970 --> 00:09:30.490
it won't be all that surprising
to see other people building

00:09:30.490 --> 00:09:33.560
IoT products with shared
apps from various sources.

00:09:33.560 --> 00:09:36.337
So looking at
permissions is important.

00:09:36.337 --> 00:09:38.170
The next step is all
about adding additional

00:09:38.170 --> 00:09:40.030
build resources to your build.

00:09:40.030 --> 00:09:41.560
If your device
has a display, you

00:09:41.560 --> 00:09:43.330
can add a boot animation
as you see here

00:09:43.330 --> 00:09:45.190
for the Lenovo smart display.

00:09:45.190 --> 00:09:48.730
You can upload your own
custom bootanimation.zip.

00:09:48.730 --> 00:09:50.530
Also in this section,
we let you choose

00:09:50.530 --> 00:09:52.280
if you want to include fonts.

00:09:52.280 --> 00:09:54.760
Since a lot of these
devices won't have displays,

00:09:54.760 --> 00:09:56.890
we don't want to
burden them with fonts.

00:09:56.890 --> 00:09:59.710
It's all about reducing the
image size for these small IoT

00:09:59.710 --> 00:10:01.930
products.

00:10:01.930 --> 00:10:04.600
Now, your Android Things device
wouldn't be very interesting

00:10:04.600 --> 00:10:06.327
if it was just the SoM.

00:10:06.327 --> 00:10:08.410
Hardware config is where
you add your peripherals,

00:10:08.410 --> 00:10:10.540
control your GPIOs
and bus speeds.

00:10:10.540 --> 00:10:12.820
Starter kits are pre-set
up with the default

00:10:12.820 --> 00:10:15.070
hardware configs which you
provide in the starter kit

00:10:15.070 --> 00:10:15.890
build.

00:10:15.890 --> 00:10:18.181
However, you might want to
spice up your configurations

00:10:18.181 --> 00:10:18.910
differently.

00:10:18.910 --> 00:10:22.160
You can use this UI
tool to adjust it.

00:10:22.160 --> 00:10:24.560
While this tool is currently
limited to controlling bus

00:10:24.560 --> 00:10:27.247
speed and pullup resistors,
this is where in the future

00:10:27.247 --> 00:10:29.330
you're going to configure
all of your peripherals,

00:10:29.330 --> 00:10:33.080
such as cameras, displays,
audio buses and speakers.

00:10:33.080 --> 00:10:35.310
We also plan to give you
control over your I/O here,

00:10:35.310 --> 00:10:39.290
so you can do pin boxing,
and determine which pins are

00:10:39.290 --> 00:10:41.120
attached to which functions.

00:10:41.120 --> 00:10:45.010
So keep an eye on this
space for more updates soon.

00:10:45.010 --> 00:10:47.500
AMY JANG: So here you are
at your final build step.

00:10:47.500 --> 00:10:51.160
You will see that the
configurations you made

00:10:51.160 --> 00:10:53.590
are displayed with
their total estimated

00:10:53.590 --> 00:10:55.870
sizes under OEM partition.

00:10:55.870 --> 00:10:58.450
Review the estimate
size in summary

00:10:58.450 --> 00:11:02.060
and set the total size of
OEM partition as you like.

00:11:02.060 --> 00:11:04.180
You may wonder, what
are these partitions,

00:11:04.180 --> 00:11:06.530
and can I, as a
developer, change?

00:11:06.530 --> 00:11:09.310
And which partitions are
update-able with over the air

00:11:09.310 --> 00:11:10.360
update?

00:11:10.360 --> 00:11:13.210
To answer that, lets look at the
Android Things partition layout

00:11:13.210 --> 00:11:15.250
for a moment.

00:11:15.250 --> 00:11:19.390
On the left is the simple
partition layout of IMX7D PICO.

00:11:19.390 --> 00:11:21.970
That's the board that you
got from the developer kit.

00:11:21.970 --> 00:11:24.800
There are small differences
between the SOC vendors

00:11:24.800 --> 00:11:25.780
and boards.

00:11:25.780 --> 00:11:27.220
But let's walk
through an example

00:11:27.220 --> 00:11:30.070
of partitions that are used
by the core Android Things

00:11:30.070 --> 00:11:34.030
architecture, which is
the same across all SoMs.

00:11:34.030 --> 00:11:37.630
Starting with system, system and
boot are read only partitions,

00:11:37.630 --> 00:11:40.630
and it's generated for and
used for the Android Things

00:11:40.630 --> 00:11:41.650
platform.

00:11:41.650 --> 00:11:44.680
Boot is for kernel and the
ramdisk for the normal boot.

00:11:44.680 --> 00:11:49.540
And system is where Android
Things OS is loaded.

00:11:49.540 --> 00:11:51.910
Vbmeta is a read-only partition.

00:11:51.910 --> 00:11:54.940
And it's used for
verified boot mechanism.

00:11:54.940 --> 00:11:56.980
As the name suggests,
this is where

00:11:56.980 --> 00:12:00.160
metadata for your verified
boot is written to.

00:12:00.160 --> 00:12:03.580
Specifically, it's a single
hash generated by Google

00:12:03.580 --> 00:12:06.760
using information of
boot, system and vendor,

00:12:06.760 --> 00:12:09.970
and signed with a secure
key stored in Google.

00:12:09.970 --> 00:12:12.660
For every boot
sequence of a device,

00:12:12.660 --> 00:12:15.520
bootloader verifies that
the code is authentic

00:12:15.520 --> 00:12:17.470
and no known security
flaw has been

00:12:17.470 --> 00:12:20.110
found using this information.

00:12:20.110 --> 00:12:23.800
Devices will not boot if any
tampering has been found.

00:12:23.800 --> 00:12:27.150
So you don't want to mess
around with this partition.

00:12:27.150 --> 00:12:30.460
Vendor is a read only
partition as well.

00:12:30.460 --> 00:12:33.520
In this partition, the
binary image from SOC vendors

00:12:33.520 --> 00:12:34.360
are loaded.

00:12:34.360 --> 00:12:37.660
Things like driver
libraries specific to SOC

00:12:37.660 --> 00:12:38.920
are usually put in here.

00:12:41.600 --> 00:12:45.030
OEM and the OEM bootloader are
partitions for Android Things

00:12:45.030 --> 00:12:47.040
developers, and that's you.

00:12:47.040 --> 00:12:50.310
It's read only in a sense that
after it's been generated,

00:12:50.310 --> 00:12:52.800
it cannot be tampered with
for the security reason I just

00:12:52.800 --> 00:12:54.150
talked about.

00:12:54.150 --> 00:12:57.360
But OEM is a partition
where the contents

00:12:57.360 --> 00:13:00.180
of the build configuration that
you specified through console

00:13:00.180 --> 00:13:01.440
is written to.

00:13:01.440 --> 00:13:04.370
So in that sense,
it is rewritable

00:13:04.370 --> 00:13:08.630
and managed by Android Things
developers through a console.

00:13:08.630 --> 00:13:11.160
This OEM partition
is also generated new

00:13:11.160 --> 00:13:14.480
when you're creating the new
build from configuration 4

00:13:14.480 --> 00:13:15.810
to OTA.

00:13:15.810 --> 00:13:17.880
And OEM bootloader
is a partition

00:13:17.880 --> 00:13:21.060
where the hardware configuration
you might have chosen

00:13:21.060 --> 00:13:23.850
that build is written too.

00:13:23.850 --> 00:13:25.680
If you're an Android
developer, you

00:13:25.680 --> 00:13:28.560
may be familiar with this
partition, user data.

00:13:28.560 --> 00:13:31.710
This is where systems and
apps will write their user

00:13:31.710 --> 00:13:33.960
data at runtime.

00:13:33.960 --> 00:13:38.130
Aside from that, APKs that you
install through ADB install,

00:13:38.130 --> 00:13:40.820
or the play button
in Android Studio

00:13:40.820 --> 00:13:43.650
are also written
into this partition.

00:13:43.650 --> 00:13:46.390
So this poses
actually a question.

00:13:46.390 --> 00:13:50.100
Package Name is a unique
identifier of an app.

00:13:50.100 --> 00:13:56.160
If the same package name exists
both in user data and OEM,

00:13:56.160 --> 00:13:57.820
how would Android
Package Manager

00:13:57.820 --> 00:14:01.140
know which app to be used?

00:14:01.140 --> 00:14:03.820
OEM is read only after
it's been generated.

00:14:03.820 --> 00:14:05.910
So the APKs that are
already written there

00:14:05.910 --> 00:14:08.670
should still exist as is.

00:14:08.670 --> 00:14:10.230
When you're
developing, and you're

00:14:10.230 --> 00:14:14.610
most likely going to be changing
your APKs via ADB install.

00:14:14.610 --> 00:14:17.520
To honor this
development flow, the ADB

00:14:17.520 --> 00:14:19.980
installed APKs in
user data is always

00:14:19.980 --> 00:14:22.620
honored over the ones in OEM.

00:14:22.620 --> 00:14:25.050
So what this means
is, if you have APKs

00:14:25.050 --> 00:14:27.360
both in user data
and OEM, you want

00:14:27.360 --> 00:14:30.590
the APK loaded an
OEM to work, you

00:14:30.590 --> 00:14:33.180
will simply delete
the APK in user data

00:14:33.180 --> 00:14:36.910
by ADB on the install.

00:14:36.910 --> 00:14:40.470
Misc is another read-only
partition used by platform.

00:14:40.470 --> 00:14:43.820
It's for miscellaneous
needs like bootloader

00:14:43.820 --> 00:14:48.590
and our system for
its functionalities.

00:14:48.590 --> 00:14:50.690
Factory and its
bootloader partition

00:14:50.690 --> 00:14:54.500
is reserved for any
per-device configurations,

00:14:54.500 --> 00:14:57.810
like serial number, to
be written at factories.

00:14:57.810 --> 00:15:00.680
This can also be done
later in service centers.

00:15:00.680 --> 00:15:03.860
This partition is writable
by developers and factory,

00:15:03.860 --> 00:15:06.870
and it's going to be read
only after it's being shipped.

00:15:06.870 --> 00:15:09.050
So writing to this
partition requires

00:15:09.050 --> 00:15:14.490
special tools and authorities,
which we will provide for you.

00:15:14.490 --> 00:15:16.940
So up to now, we've gone
over all the partition

00:15:16.940 --> 00:15:20.490
that Android Things
core architecture uses.

00:15:20.490 --> 00:15:23.690
You might have noticed the
partition in this table

00:15:23.690 --> 00:15:26.510
are duplicated in two
sections, a and b.

00:15:26.510 --> 00:15:28.940
What do those mean?

00:15:28.940 --> 00:15:32.780
This is where the OTA over
the air update comes in.

00:15:32.780 --> 00:15:35.180
OTA works by AB
partition mechanism,

00:15:35.180 --> 00:15:38.810
where the same partition kind
exists in two duplicate memory

00:15:38.810 --> 00:15:39.950
spaces.

00:15:39.950 --> 00:15:43.550
This architecture provides a
seamless update to users where

00:15:43.550 --> 00:15:47.500
devices can still be active
with an active partition

00:15:47.500 --> 00:15:50.390
where the updates are being
downloaded and installed

00:15:50.390 --> 00:15:55.640
onto the inactive partition A
B. So after all that's done,

00:15:55.640 --> 00:15:59.090
after the rebooting with
a secure boot mechanism,

00:15:59.090 --> 00:16:01.700
devices will wake
up to the partition

00:16:01.700 --> 00:16:06.230
where the update has
been installed onto.

00:16:06.230 --> 00:16:09.620
It's also important to note that
all read-only Android Things

00:16:09.620 --> 00:16:12.940
partitions is fixed
at a certain size.

00:16:12.940 --> 00:16:16.130
And as you know, the board
memory is also fixed.

00:16:16.130 --> 00:16:18.890
What this means is that
there is a remaining fixed

00:16:18.890 --> 00:16:22.790
memory to be split between
OEM partition and userdata

00:16:22.790 --> 00:16:23.930
partition.

00:16:23.930 --> 00:16:28.490
And you'll decide what the
split will be between the two.

00:16:28.490 --> 00:16:30.210
So let's walk
through an example.

00:16:30.210 --> 00:16:33.740
So say you have chosen
LTS OS, a couple apps,

00:16:33.740 --> 00:16:38.150
Google Play services, maybe
custom hardware configuration.

00:16:38.150 --> 00:16:40.080
In this console
[INAUDIBLE] view,

00:16:40.080 --> 00:16:42.110
which you saw at the
final build step,

00:16:42.110 --> 00:16:44.570
we took away all the
nitty gritty details

00:16:44.570 --> 00:16:47.610
of the system partitions
that you have seen so far.

00:16:47.610 --> 00:16:50.570
So if you haven't been paying
attention in the last slides,

00:16:50.570 --> 00:16:51.770
it's OK.

00:16:51.770 --> 00:16:53.840
All you need to know is
that the system partition

00:16:53.840 --> 00:16:56.000
is a fixed size.

00:16:56.000 --> 00:17:00.620
So the OEM partition size
input, we ask you to input

00:17:00.620 --> 00:17:04.079
is going to be a size of
a single OEM partition.

00:17:04.079 --> 00:17:07.250
So what this means is, when you
increase the size of the OEM

00:17:07.250 --> 00:17:10.609
partition by 100, the
user data partition

00:17:10.609 --> 00:17:16.040
will be subtracted by 200.

00:17:16.040 --> 00:17:19.180
So here is the most important
message about partition

00:17:19.180 --> 00:17:21.339
you should take
away from this talk.

00:17:21.339 --> 00:17:23.980
Choosing the right
OEM partition size

00:17:23.980 --> 00:17:27.130
is important when you're
making production images.

00:17:27.130 --> 00:17:30.370
When devices are baked
with the chosen size,

00:17:30.370 --> 00:17:32.740
they are fixed in
the size layout

00:17:32.740 --> 00:17:34.720
until they are reflashed.

00:17:34.720 --> 00:17:38.580
This is because of the nature
of AB and the OTA mechanism

00:17:38.580 --> 00:17:40.190
we just talked about.

00:17:40.190 --> 00:17:43.780
So these devices only
receive OTA updates

00:17:43.780 --> 00:17:46.840
to build with the
same partition size.

00:17:46.840 --> 00:17:49.690
One recommendation though
when setting the size

00:17:49.690 --> 00:17:52.540
is to leave some buffer
room for future growth.

00:17:52.540 --> 00:17:57.640
You may want to add new
functionality to your APK,

00:17:57.640 --> 00:18:00.280
you may want to add more, like
a new cool boot animation,

00:18:00.280 --> 00:18:02.570
which may require more memory.

00:18:02.570 --> 00:18:05.350
So plan for the
future and estimate

00:18:05.350 --> 00:18:08.830
how much you might want between
apps growth versus the data

00:18:08.830 --> 00:18:10.110
growth.

00:18:10.110 --> 00:18:12.430
Again, you don't
have to plan it yet.

00:18:12.430 --> 00:18:15.010
When you're at prototyping
and development phase,

00:18:15.010 --> 00:18:17.800
you don't have to worry
about finding the right size.

00:18:17.800 --> 00:18:21.150
Because you can always
reflash the device.

00:18:21.150 --> 00:18:23.200
You just need to estimate
and finalize this

00:18:23.200 --> 00:18:26.620
when you're making
production images.

00:18:26.620 --> 00:18:29.630
You've now chosen the right
size, created the build,

00:18:29.630 --> 00:18:31.360
and with create a
build configuration,

00:18:31.360 --> 00:18:33.640
you can choose between
two image options--

00:18:33.640 --> 00:18:35.530
development and production.

00:18:35.530 --> 00:18:38.290
Development builds provide
debugging capabilities

00:18:38.290 --> 00:18:41.500
like ADB, and
production builds are

00:18:41.500 --> 00:18:44.730
to be secure and
used by end users.

00:18:44.730 --> 00:18:46.780
It doesn't provide debugging.

00:18:46.780 --> 00:18:50.620
Note that once devices are
flashed with production images,

00:18:50.620 --> 00:18:54.020
it cannot be tampered
for security reasons.

00:18:54.020 --> 00:18:58.060
So it needs to be recovered in
order to make it a debuggable.

00:18:58.060 --> 00:19:01.780
When you click on Download,
the image will be generated

00:19:01.780 --> 00:19:05.630
and the download will
start through the browser.

00:19:05.630 --> 00:19:07.750
And now you have
downloaded the image file.

00:19:07.750 --> 00:19:12.000
How do I take that from
the file to my devices?

00:19:12.000 --> 00:19:14.950
We provide a Flash script
tool to make this all super

00:19:14.950 --> 00:19:16.720
simple and easy for you.

00:19:16.720 --> 00:19:18.580
Simply navigate to
the tool section

00:19:18.580 --> 00:19:20.050
and download the script.

00:19:20.050 --> 00:19:21.730
Follow the instruction
in the script

00:19:21.730 --> 00:19:23.630
and it should be all
pretty straightforward

00:19:23.630 --> 00:19:26.510
and your devices
will be ready to go.

00:19:26.510 --> 00:19:30.520
You can also use fast
boot instead of the script

00:19:30.520 --> 00:19:32.140
if you so wish.

00:19:32.140 --> 00:19:34.960
So with that, we're finished
building, downloading

00:19:34.960 --> 00:19:37.514
and preparing an
Android Things device.

00:19:37.514 --> 00:19:38.430
ADAM RODRIGUEZ: Right.

00:19:38.430 --> 00:19:40.750
So up until this point,
it's been all about building

00:19:40.750 --> 00:19:43.930
functionality into your
Android Things device.

00:19:43.930 --> 00:19:46.030
And while Android Things
makes development easy,

00:19:46.030 --> 00:19:47.821
you probably could have
done the same thing

00:19:47.821 --> 00:19:49.930
with a bunch of other
platforms out there.

00:19:49.930 --> 00:19:52.390
But release is where things
get really different.

00:19:52.390 --> 00:19:55.100
Updating, supporting,
pushing new features,

00:19:55.100 --> 00:19:57.640
not just to your devices,
but to thousands of devices

00:19:57.640 --> 00:19:58.580
in the field.

00:19:58.580 --> 00:20:00.841
This is where Android Things
really starts to shine.

00:20:00.841 --> 00:20:02.590
I like to say that
there's two reasons why

00:20:02.590 --> 00:20:05.080
you might choose Android
Things as an operating system.

00:20:05.080 --> 00:20:06.956
One, you love the
power of Android,

00:20:06.956 --> 00:20:08.830
you're comfortable with
it, familiar with it.

00:20:08.830 --> 00:20:12.810
Or two, you plan to make
more than one of something.

00:20:12.810 --> 00:20:15.070
Amy and I have
this laundry robot.

00:20:15.070 --> 00:20:17.560
She has this laundry robot
that knows how to fold socks.

00:20:17.560 --> 00:20:21.040
But my laundry robot at my house
doesn't know how to fold socks.

00:20:21.040 --> 00:20:24.820
How do we get that build that
she's running onto my robot?

00:20:24.820 --> 00:20:27.820
With Android Things
it's super easy.

00:20:27.820 --> 00:20:30.970
First off, use channels to
break up your device population.

00:20:30.970 --> 00:20:33.370
You might have a few
devices owned by customers,

00:20:33.370 --> 00:20:34.720
a few others owned by testers.

00:20:34.720 --> 00:20:37.060
And you don't want them all
getting the same builds.

00:20:37.060 --> 00:20:39.730
So put them on channels so you
can segment them logically.

00:20:39.730 --> 00:20:42.610
You can also create custom
channels, say a QA channel,

00:20:42.610 --> 00:20:45.370
or a channel for people
who like the color blue

00:20:45.370 --> 00:20:47.440
to further divide things.

00:20:47.440 --> 00:20:49.430
With channels, you can
do whatever you want.

00:20:49.430 --> 00:20:51.250
But if you want some
guidance, Canary

00:20:51.250 --> 00:20:53.560
is generally the first
devices to get any build.

00:20:53.560 --> 00:20:56.150
It's a reference to the
canary in the coal mine idiom.

00:20:56.150 --> 00:20:58.150
So if there's anything
wrong with the new build,

00:20:58.150 --> 00:21:01.040
those canary devices will
tell you about it first.

00:21:01.040 --> 00:21:03.910
Dev is generally where
developer devices sit.

00:21:03.910 --> 00:21:06.790
Builds with lots of new
functionality, plenty of bugs,

00:21:06.790 --> 00:21:08.980
but at least they boot up.

00:21:08.980 --> 00:21:10.240
Beta is for your testers.

00:21:10.240 --> 00:21:11.920
These are actual
users who are OK

00:21:11.920 --> 00:21:15.140
getting some new functionality
by giving some feedback

00:21:15.140 --> 00:21:16.740
about unreleased software.

00:21:16.740 --> 00:21:19.180
And stable is where the
bulk of your users lives.

00:21:19.180 --> 00:21:22.660
These builds are heavily tested
and everything should work.

00:21:22.660 --> 00:21:25.340
Finally, custom is
whatever you want it to be.

00:21:25.340 --> 00:21:27.700
In our developer previews,
we got lots of feedback

00:21:27.700 --> 00:21:29.530
that people wanted
lots of channels

00:21:29.530 --> 00:21:32.300
to divide up their device
population in different ways.

00:21:32.300 --> 00:21:35.680
So we created custom
channels for them.

00:21:35.680 --> 00:21:37.652
All right, so now that
you have these channels,

00:21:37.652 --> 00:21:39.610
how do you get your
devices onto these channels

00:21:39.610 --> 00:21:41.140
in the first place?

00:21:41.140 --> 00:21:43.607
Devices default to
the stable channel.

00:21:43.607 --> 00:21:45.190
But if you want to
change the channel,

00:21:45.190 --> 00:21:47.830
you can set it via the
API, or connect your device

00:21:47.830 --> 00:21:51.107
and flash your ADB
as shown up here.

00:21:51.107 --> 00:21:52.190
One thing to keep in mind.

00:21:52.190 --> 00:21:54.130
Remember how Amy
talked about release

00:21:54.130 --> 00:21:56.170
versus development images.

00:21:56.170 --> 00:21:58.210
You can flash a device
to a new channel

00:21:58.210 --> 00:21:59.870
if it's running a
development image.

00:21:59.870 --> 00:22:02.080
But if you're running
a public release image,

00:22:02.080 --> 00:22:04.130
flashing and ADB are blocked.

00:22:04.130 --> 00:22:05.827
So you can't change
the channel either.

00:22:05.827 --> 00:22:07.660
We do this to prevent
end users from running

00:22:07.660 --> 00:22:11.120
unwanted or malicious
code on your devices.

00:22:11.120 --> 00:22:11.620
OK.

00:22:11.620 --> 00:22:13.328
So now that you've
assigned the channels,

00:22:13.328 --> 00:22:14.910
you can push updates to them.

00:22:14.910 --> 00:22:17.417
You take the builds
that we created earlier,

00:22:17.417 --> 00:22:19.000
create updates from
them, and then get

00:22:19.000 --> 00:22:21.280
them delivered
onto your devices.

00:22:21.280 --> 00:22:24.310
Updates are basically builds
with new features, bug fixes

00:22:24.310 --> 00:22:25.390
or changes.

00:22:25.390 --> 00:22:27.490
Pushing them to these
devices is called an OTA

00:22:27.490 --> 00:22:29.290
or an over the air update.

00:22:29.290 --> 00:22:33.100
Devices download these updates
and load them into B partition.

00:22:33.100 --> 00:22:36.310
Once they reboot, it boots
into that B partition.

00:22:36.310 --> 00:22:37.990
However, if there
is a problem, it

00:22:37.990 --> 00:22:40.150
reverts back to the A partition.

00:22:40.150 --> 00:22:41.320
I love this.

00:22:41.320 --> 00:22:43.240
Because it means it
updates feel instant,

00:22:43.240 --> 00:22:45.110
but they're also
fault tolerant too.

00:22:45.110 --> 00:22:48.820
And everyone on Android Things
gets to take advantage of this.

00:22:48.820 --> 00:22:51.910
One option for OTAs is
called fractional updates.

00:22:51.910 --> 00:22:54.762
Rather than push an update
to 100% on your channel,

00:22:54.762 --> 00:22:56.220
you can roll it
out gradually, just

00:22:56.220 --> 00:22:57.490
to make sure if
something bad happens,

00:22:57.490 --> 00:23:00.010
you're not affecting all
your users at the same time.

00:23:00.010 --> 00:23:01.900
We highly recommend
using fractional updates

00:23:01.900 --> 00:23:04.210
to de-risk your OTA approach.

00:23:04.210 --> 00:23:06.564
Like I said earlier, nearly
all of this technology

00:23:06.564 --> 00:23:08.230
is using the same
infrastructure that we

00:23:08.230 --> 00:23:11.380
use every day to update millions
of devices in the field--

00:23:11.380 --> 00:23:14.630
stuff like AB updates, delta
updates, fractional updates.

00:23:14.630 --> 00:23:17.050
These are all difficult things
to get right but crucially

00:23:17.050 --> 00:23:19.510
important if you want reliable
updates for your devices

00:23:19.510 --> 00:23:21.356
worldwide.

00:23:21.356 --> 00:23:22.730
AMY JANG: So like
Adam mentioned,

00:23:22.730 --> 00:23:26.110
Android Things devices follow
the same OTA architecture

00:23:26.110 --> 00:23:29.740
that Google uses, so you can
be confident that it will work.

00:23:29.740 --> 00:23:31.840
But you might be
wondering, how does the OTA

00:23:31.840 --> 00:23:33.760
work underneath the hood?

00:23:33.760 --> 00:23:35.170
It's pretty simple flow.

00:23:35.170 --> 00:23:36.820
When you specify
through Android Things

00:23:36.820 --> 00:23:40.870
console, we update the OTA
server to hold information

00:23:40.870 --> 00:23:43.870
about your product and
your update channel.

00:23:43.870 --> 00:23:47.200
And the device will
report to the OTA server

00:23:47.200 --> 00:23:50.500
with its build information
every five hour interval.

00:23:50.500 --> 00:23:53.380
Then the OTA server will let
the devices know that you

00:23:53.380 --> 00:23:57.070
have an update to pick it up.

00:23:57.070 --> 00:23:59.590
Devices download and
install the new updated

00:23:59.590 --> 00:24:03.190
build into the inactive AB
partition that we talked about.

00:24:03.190 --> 00:24:06.850
Users will still be able
to use their devices

00:24:06.850 --> 00:24:08.740
during this process.

00:24:08.740 --> 00:24:12.190
Using Update Manager API,
you can have full control

00:24:12.190 --> 00:24:15.250
over the update policy,
such as how often

00:24:15.250 --> 00:24:18.310
do you want your devices to
ping for the update check,

00:24:18.310 --> 00:24:21.130
and also customize device
behavior by listening

00:24:21.130 --> 00:24:23.270
to update events.

00:24:23.270 --> 00:24:25.480
So let's walk through an
example of a normal update

00:24:25.480 --> 00:24:28.570
sequence, [INAUDIBLE] events
occurring inside the device,

00:24:28.570 --> 00:24:30.580
and the following update
status events that are

00:24:30.580 --> 00:24:33.400
posted to that app listener.

00:24:33.400 --> 00:24:36.500
Update engine will
check OTA to the server,

00:24:36.500 --> 00:24:39.900
and then OTA will let the update
engine client know that there

00:24:39.900 --> 00:24:41.590
is a new update to pick it up.

00:24:41.590 --> 00:24:44.320
And it will start
downloading the update.

00:24:44.320 --> 00:24:46.900
As you can see in
this flow diagram,

00:24:46.900 --> 00:24:50.770
the corresponding update events
are posted to app listener.

00:24:50.770 --> 00:24:52.450
And that's your app.

00:24:52.450 --> 00:24:54.880
Depending on the policy
you set, your app

00:24:54.880 --> 00:24:57.190
can trigger reboot
of the device when

00:24:57.190 --> 00:24:59.040
you think it's appropriate.

00:24:59.040 --> 00:25:00.730
When the device
boots up, it will

00:25:00.730 --> 00:25:06.660
start with the a new partition
where the update is written to.

00:25:06.660 --> 00:25:09.580
Upon reboot, it checks
for update again.

00:25:09.580 --> 00:25:11.650
And because it's
already updated,

00:25:11.650 --> 00:25:14.830
it sits back at the idle
state until the next update

00:25:14.830 --> 00:25:16.950
check happens.

00:25:16.950 --> 00:25:20.850
So this is how you will use
the API to set the policy.

00:25:20.850 --> 00:25:23.470
You can grab to update
manager instance

00:25:23.470 --> 00:25:25.170
and set the policy you'll like.

00:25:25.170 --> 00:25:28.200
Using apply only
policy, Update Manager

00:25:28.200 --> 00:25:30.990
will download and
install the update

00:25:30.990 --> 00:25:33.240
whenever a new
update is available.

00:25:33.240 --> 00:25:35.520
And you can change
the update interval

00:25:35.520 --> 00:25:37.320
frequency using this API--

00:25:37.320 --> 00:25:40.800
say two days for example.

00:25:40.800 --> 00:25:43.560
But say you want to
control the whole flow.

00:25:43.560 --> 00:25:46.320
Then you can use the
check only policy

00:25:46.320 --> 00:25:49.650
to listen to all update events
and control the whole update

00:25:49.650 --> 00:25:50.760
process.

00:25:50.760 --> 00:25:53.760
When you receive the
update available status,

00:25:53.760 --> 00:25:56.910
you can decide whether it's a
good time to start the download

00:25:56.910 --> 00:25:57.870
and install.

00:25:57.870 --> 00:25:59.730
And when you think
it is a good time,

00:25:59.730 --> 00:26:02.010
you can trigger the
perform update now

00:26:02.010 --> 00:26:04.090
method to trigger it.

00:26:04.090 --> 00:26:07.860
And when complete, you will
get the updated needs reboot

00:26:07.860 --> 00:26:08.790
status.

00:26:08.790 --> 00:26:11.040
And also, when you
think it's a good time,

00:26:11.040 --> 00:26:13.290
you can trigger the
devices to reboot.

00:26:13.290 --> 00:26:17.080
And it's all again
under your control.

00:26:17.080 --> 00:26:18.930
It's very possible
that your devices

00:26:18.930 --> 00:26:21.090
will require a zero day update.

00:26:21.090 --> 00:26:25.770
When a customer buys a
product after some shelf time,

00:26:25.770 --> 00:26:28.290
you might have already
upgraded your new software

00:26:28.290 --> 00:26:30.620
to the next coolest thing.

00:26:30.620 --> 00:26:33.210
And you want them to
start with that, right?

00:26:33.210 --> 00:26:36.060
You don't want users to
download several gigabytes

00:26:36.060 --> 00:26:40.380
of the new software before they
can start using your product.

00:26:40.380 --> 00:26:45.790
Delta updates mean this payload
update is as small as possible.

00:26:45.790 --> 00:26:48.900
Basically, based on your
factory image options,

00:26:48.900 --> 00:26:52.530
and your previous OTA pushes,
Android Things console

00:26:52.530 --> 00:26:56.990
will take care for you
and automatically generate

00:26:56.990 --> 00:26:59.310
delta payloads
between the builds,

00:26:59.310 --> 00:27:03.120
so devices can then receive
the smaller payload packets

00:27:03.120 --> 00:27:07.420
between their current build
and your new coolest thing.

00:27:07.420 --> 00:27:10.470
Imagine that your friend was
unwrapping a Christmas present.

00:27:10.470 --> 00:27:13.830
And they had to wait 20 minutes
to download the latest version.

00:27:13.830 --> 00:27:16.230
What a terrible
experience, right?

00:27:16.230 --> 00:27:19.385
With delta updates,
its so much better.

00:27:19.385 --> 00:27:20.760
ADAM RODRIGUEZ:
At this point, we

00:27:20.760 --> 00:27:22.176
should probably
spend a little bit

00:27:22.176 --> 00:27:23.790
of time talking about security.

00:27:23.790 --> 00:27:26.970
As XKCD so elegantly points
out, you don't simply

00:27:26.970 --> 00:27:28.830
build a secure device.

00:27:28.830 --> 00:27:31.530
Having secure IoT means
constantly maintaining

00:27:31.530 --> 00:27:34.260
and updating and looking
for vulnerabilities,

00:27:34.260 --> 00:27:37.334
pushing changes throughout
the lifetime of your product.

00:27:37.334 --> 00:27:39.750
We've talked quite a bit about
how Android Things is great

00:27:39.750 --> 00:27:41.400
when you want to make
a lot of something.

00:27:41.400 --> 00:27:42.960
But when you make
a lot of something,

00:27:42.960 --> 00:27:44.959
do you really want to be
responsible for pushing

00:27:44.959 --> 00:27:47.850
new updates throughout the
lifetime of that product?

00:27:47.850 --> 00:27:50.220
Amy and I have an awesome
laundry robot now.

00:27:50.220 --> 00:27:52.690
But maybe in a few years, we
go on to do something else.

00:27:52.690 --> 00:27:54.497
Maybe we get different jobs.

00:27:54.497 --> 00:27:55.080
And then what?

00:27:55.080 --> 00:27:56.940
When we hear about
a new vulnerability,

00:27:56.940 --> 00:27:59.580
do we research kernel
and library fixes?

00:27:59.580 --> 00:28:01.860
Maybe we get back together
with all of our engineers

00:28:01.860 --> 00:28:04.901
and then compile a new build
and push it to our users?

00:28:04.901 --> 00:28:05.400
No.

00:28:05.400 --> 00:28:06.810
That's not what happens.

00:28:06.810 --> 00:28:08.520
In reality, these
orphaned devices,

00:28:08.520 --> 00:28:12.930
they live on, connected to
the internet, perhaps unused,

00:28:12.930 --> 00:28:15.300
but really vulnerable.

00:28:15.300 --> 00:28:18.090
Thankfully, with Android Things,
we have a solution for this--

00:28:18.090 --> 00:28:20.010
the auto update flag.

00:28:20.010 --> 00:28:22.620
Because of our SoM strategy,
Google can confidently

00:28:22.620 --> 00:28:26.790
push security fixes to all
IoT devices running that SoM,

00:28:26.790 --> 00:28:29.670
be it a laundry folding
robot or a web cam.

00:28:29.670 --> 00:28:31.770
Simply flip this
flag on your channel

00:28:31.770 --> 00:28:34.470
and all your devices will
get regular security updates

00:28:34.470 --> 00:28:37.002
from Google with zero
involvement from you.

00:28:37.002 --> 00:28:38.460
It's important to
note-- you aren't

00:28:38.460 --> 00:28:40.416
required to flip this flag.

00:28:40.416 --> 00:28:41.790
If you don't enable
auto updates,

00:28:41.790 --> 00:28:44.010
Google will still offer
up the security fixes,

00:28:44.010 --> 00:28:46.505
but you can choose how and when
you want to implement them.

00:28:46.505 --> 00:28:47.130
It's up to you.

00:28:47.130 --> 00:28:49.110
Let Google manage your
updates or control

00:28:49.110 --> 00:28:51.100
when they roll out yourself.

00:28:51.100 --> 00:28:53.700
Let's talk a little bit about
how Android Things updates

00:28:53.700 --> 00:28:56.100
and versioning works.

00:28:56.100 --> 00:28:58.290
Major versions on
Android Things roughly

00:28:58.290 --> 00:29:01.020
correspond to dessert
releases in normal Android.

00:29:01.020 --> 00:29:03.990
These are large releases
supported for the long term

00:29:03.990 --> 00:29:06.900
and represent Android
API framework changes.

00:29:06.900 --> 00:29:08.640
The auto update flag
on their channel

00:29:08.640 --> 00:29:11.260
does not update
across major versions.

00:29:11.260 --> 00:29:13.440
So if you start on
major version 1,

00:29:13.440 --> 00:29:15.120
even when major
version 2 is released,

00:29:15.120 --> 00:29:18.300
you'll continue to get security
updates based on major version

00:29:18.300 --> 00:29:20.370
1 if you so choose.

00:29:20.370 --> 00:29:22.270
The second number is
the minor version.

00:29:22.270 --> 00:29:24.480
These are comparatively
low risk updates.

00:29:24.480 --> 00:29:26.650
They don't have any Android
API framework changes,

00:29:26.650 --> 00:29:29.670
but they do have Android
Things API additions.

00:29:29.670 --> 00:29:31.410
If you flip the
auto update flag,

00:29:31.410 --> 00:29:34.120
you can expect to get updates
across new major versions.

00:29:34.120 --> 00:29:39.450
So if you start on 1.2, when the
next minor version rolls out,

00:29:39.450 --> 00:29:42.330
you will migrate to 1.3.

00:29:42.330 --> 00:29:44.250
The last number is
a security update.

00:29:44.250 --> 00:29:47.200
You can expect these to land
approximately every month.

00:29:47.200 --> 00:29:48.602
There are no API changes.

00:29:48.602 --> 00:29:51.060
And these updates definitely
increment with the auto update

00:29:51.060 --> 00:29:52.800
flag on.

00:29:52.800 --> 00:29:55.844
While major versions updates
are optional, in exchange

00:29:55.844 --> 00:29:57.510
for getting free
updates through Google,

00:29:57.510 --> 00:29:59.580
we do expect you to
update your versions

00:29:59.580 --> 00:30:02.370
across each minor version
and security patch.

00:30:02.370 --> 00:30:04.140
But how you do it is up to you.

00:30:04.140 --> 00:30:06.090
You can either flip
the auto update flag,

00:30:06.090 --> 00:30:07.950
or push the updates yourself.

00:30:07.950 --> 00:30:10.920
It's our goal to make Android
Things the easiest and most

00:30:10.920 --> 00:30:13.920
secure IoT platform out
there-- easiest to build,

00:30:13.920 --> 00:30:15.960
and most secure and up
to date over the lifetime

00:30:15.960 --> 00:30:17.530
of your product.

00:30:17.530 --> 00:30:20.820
So how does this work across
SoMs and major versions

00:30:20.820 --> 00:30:22.110
and years?

00:30:22.110 --> 00:30:25.050
Each SoM is supported by Google
for a minimum of three years

00:30:25.050 --> 00:30:26.760
from the time it was
first made available

00:30:26.760 --> 00:30:29.440
on every available
major version.

00:30:29.440 --> 00:30:31.620
So if you were to
buy the IMX8 SoM

00:30:31.620 --> 00:30:33.540
and start building
on a major version 1,

00:30:33.540 --> 00:30:35.790
you can expect updates
for the next three years,

00:30:35.790 --> 00:30:38.654
all while remaining
on major version 1.

00:30:38.654 --> 00:30:40.320
You don't have to
update a major version

00:30:40.320 --> 00:30:42.360
2 to get the full support time.

00:30:42.360 --> 00:30:44.310
Of course, we realize
that a lot of devices

00:30:44.310 --> 00:30:47.112
will need much longer support
than those three years.

00:30:47.112 --> 00:30:48.570
So if your SoM
supports it, you can

00:30:48.570 --> 00:30:51.480
update to the next major
version and get a longer support

00:30:51.480 --> 00:30:52.650
window.

00:30:52.650 --> 00:30:55.050
You of course are always
able to push your own updates

00:30:55.050 --> 00:30:57.270
for your devices for
their entire lifetime.

00:30:57.270 --> 00:30:59.670
And finally, if you're looking
for an even longer support

00:30:59.670 --> 00:31:03.997
time, come talk to us about some
options for extended support.

00:31:03.997 --> 00:31:04.830
AMY JANG: All right.

00:31:04.830 --> 00:31:06.680
So we've pushed our updates.

00:31:06.680 --> 00:31:08.670
Our robots can now fold socks.

00:31:08.670 --> 00:31:10.890
The last thing to
do is step back

00:31:10.890 --> 00:31:14.400
and monitor how our robots
are doing in the field.

00:31:14.400 --> 00:31:17.410
You probably want to check
out how many users are there.

00:31:17.410 --> 00:31:19.380
Are they using my
devices every day?

00:31:19.380 --> 00:31:21.840
Are they getting the
updates I just pushed?

00:31:21.840 --> 00:31:26.000
Or how are my US robots doing
compared to the ones in Korea?

00:31:26.000 --> 00:31:27.690
Android Things
console provides you

00:31:27.690 --> 00:31:32.160
an end to end solution all
the way to device analytics.

00:31:32.160 --> 00:31:34.530
With daily activation
and active graph,

00:31:34.530 --> 00:31:38.530
you can monitor how your devices
are doing across your product.

00:31:38.530 --> 00:31:41.850
You can use time range and
filter to do deeper analysis.

00:31:41.850 --> 00:31:44.530
You can filter devices
by IP countries,

00:31:44.530 --> 00:31:48.540
build IDs and update
channels and so on.

00:31:48.540 --> 00:31:51.990
Within an hour after you
push OTA through console,

00:31:51.990 --> 00:31:54.870
you can come to
this monitor screen

00:31:54.870 --> 00:31:58.920
to see how your updates are
going, if there are any errors,

00:31:58.920 --> 00:32:01.460
and what stage are
your devices at.

00:32:01.460 --> 00:32:05.490
And the granularity that we
provide is up to every minute.

00:32:05.490 --> 00:32:09.300
You can monitor various update
events, such as update checks,

00:32:09.300 --> 00:32:13.410
various download status events,
and finally, the reboot event,

00:32:13.410 --> 00:32:17.070
which tells the device has
rebooted to the new partition.

00:32:17.070 --> 00:32:20.490
These events that you see here,
mapped to the status events

00:32:20.490 --> 00:32:23.580
you saw in the Update
Manager API earlier.

00:32:23.580 --> 00:32:28.170
And if there were any
errors with the update,

00:32:28.170 --> 00:32:30.390
you can monitor the
update error graph

00:32:30.390 --> 00:32:31.980
and drill down to
the update error

00:32:31.980 --> 00:32:34.830
codes to see what's going on.

00:32:34.830 --> 00:32:38.070
This is awesome because
right after I push my OTA,

00:32:38.070 --> 00:32:42.240
I can watch this graph and see
if my devices are doing well--

00:32:42.240 --> 00:32:46.219
if the release that I
pushed went off smoothly.

00:32:46.219 --> 00:32:47.010
ADAM RODRIGUEZ: OK.

00:32:47.010 --> 00:32:49.468
So we just walked you through
how to update your production

00:32:49.468 --> 00:32:50.650
devices in the field.

00:32:50.650 --> 00:32:53.640
But let's recap really quickly
about why you should care.

00:32:53.640 --> 00:32:57.150
It's our goal to make IoT easy
and secure with Android Things.

00:32:57.150 --> 00:33:00.185
We put a ton of work into
this so you don't have to.

00:33:00.185 --> 00:33:02.569
We want you to focus on
the stuff that matters--

00:33:02.569 --> 00:33:04.110
your hardware and
software, the thing

00:33:04.110 --> 00:33:06.060
that differentiates
your product.

00:33:06.060 --> 00:33:09.180
And then feel free to lean on us
for firmware, security patches

00:33:09.180 --> 00:33:10.770
and update infrastructure.

00:33:10.770 --> 00:33:13.110
By using Android Things, you
can to hire regular Android

00:33:13.110 --> 00:33:16.140
developers, and use familiar
tools like Kotlin and Android

00:33:16.140 --> 00:33:17.200
Studio.

00:33:17.200 --> 00:33:19.200
You get to take advantage
of the same technology

00:33:19.200 --> 00:33:21.240
that we use to update
millions of devices

00:33:21.240 --> 00:33:22.920
in the field every day.

00:33:22.920 --> 00:33:25.110
You get delta updates,
fractional updates,

00:33:25.110 --> 00:33:27.630
AB partitions and
enhanced monitoring.

00:33:27.630 --> 00:33:30.000
Can you imagine building
all of this yourself?

00:33:30.000 --> 00:33:32.670
I'm sure you could.

00:33:32.670 --> 00:33:35.040
But something tells me you'd
much rather be developing

00:33:35.040 --> 00:33:37.560
new features and functionality
than reinventing an update

00:33:37.560 --> 00:33:39.000
infrastructure.

00:33:39.000 --> 00:33:41.580
There's also the crucial
piece of security updates

00:33:41.580 --> 00:33:42.120
from Google.

00:33:42.120 --> 00:33:45.310
It's an ideal way to ensure
that your products stay

00:33:45.310 --> 00:33:47.730
secure with zero
involvement from you

00:33:47.730 --> 00:33:49.830
for years down the road.

00:33:49.830 --> 00:33:51.240
In the end we
really want to make

00:33:51.240 --> 00:33:54.690
it easy to build secure,
update-able IoT, because we

00:33:54.690 --> 00:33:57.180
think there's so much
opportunity for new products

00:33:57.180 --> 00:33:59.500
and ideas in this space.

00:33:59.500 --> 00:34:01.590
AMY JANG: And with that,
we want to say thank you

00:34:01.590 --> 00:34:04.470
for attending our talk on
how to update production

00:34:04.470 --> 00:34:07.140
devices in the field with
Android Things console.

00:34:07.140 --> 00:34:09.900
Like we said before, there
are many options out there

00:34:09.900 --> 00:34:13.409
for IoT, which OS and
hardware you may choose.

00:34:13.409 --> 00:34:15.810
But if you're comfortable
writing Android code,

00:34:15.810 --> 00:34:19.530
Android Things makes it super
easy for you to get started.

00:34:19.530 --> 00:34:22.080
If you plan to build
and sell many devices,

00:34:22.080 --> 00:34:25.949
and if you care about security,
as you should, and you want

00:34:25.949 --> 00:34:28.920
an easy management of
your production devices,

00:34:28.920 --> 00:34:30.929
Android Things will be a
great solution for you.

00:34:30.929 --> 00:34:31.428
Thank you.

00:34:33.960 --> 00:34:37.710
[MUSIC PLAYING]

