WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.490
&gt;&gt; LEPAGE: All right. Good morning everybody.
Thanks for joining us. You know, I think back

00:00:08.490 --> 00:00:16.590
to the first website that I started building
back probably 15 years ago or so, and it was

00:00:16.590 --> 00:00:22.449
really about content, giving, putting content
on the Web. It wasn't about interactive video

00:00:22.449 --> 00:00:27.410
at all. All of the graphics that I had, the
most interactive graphic I had and the richest

00:00:27.410 --> 00:00:32.890
graphic I had was the little shovel guy, the
animated gif that was doing that kind of thing.

00:00:32.890 --> 00:00:38.450
And as the Web has matured, we've seen a lot
more interactivity come. We've seen a lot

00:00:38.450 --> 00:00:44.000
more richer graphics, right? But a lot of
those things sometimes required a little bit

00:00:44.000 --> 00:00:50.870
of black magic to happen or we've had to do
server side processing of all of our code

00:00:50.870 --> 00:00:57.649
in order to get those really rich graphics,
really rich experiences, and really rich websites

00:00:57.649 --> 00:01:05.519
and web applications. But HTML5 really gives
us the platform that we need to be able to

00:01:05.519 --> 00:01:11.160
build web apps that feel like they're native,
that feel like they've got the power, the

00:01:11.160 --> 00:01:21.080
same experiences and really have those awesome
webs--web apps that we expect. So we're talking

00:01:21.080 --> 00:01:25.810
today about getting started with HTML5. My
name is Pete LePage. I'm a developer advocate

00:01:25.810 --> 00:01:32.550
at Google. And I'll let Ernest introduce himself.
&gt;&gt; DELGADO: Yes. Thanks Pete. My name is Ernest

00:01:32.550 --> 00:01:39.329
Delgado and I'm also in the Chrome Developer
Relations Team focused mainly on HTML5. Pete?

00:01:39.329 --> 00:01:43.649
&gt;&gt; LEPAGE: Awesome. Thanks. You can follow
us on Twitter and we'll be having--spending

00:01:43.649 --> 00:01:49.820
a bit of time on Twitter today. As we're going
through, please if you haven't already, have

00:01:49.820 --> 00:01:55.170
a look at the SpeakerMeter website and provide
feedback as we're going. And don't forget

00:01:55.170 --> 00:02:02.590
the BootCamp I/O and the Chrome Twitter hashtags
as we're going through these things. The plan

00:02:02.590 --> 00:02:07.810
for today is we're going to talk about what
is HTML5. We're going to dive into what we

00:02:07.810 --> 00:02:13.600
can do with it and how we can start using
it today. This is really sort of a 100-level

00:02:13.600 --> 00:02:19.890
talk, but for those of you who have played
with HTML5 before, don't worry. There will

00:02:19.890 --> 00:02:24.570
be a few good nuggets in here. There's going
to be some really neat stuff. The other thing

00:02:24.570 --> 00:02:29.730
that I want to mention is that we really can't
go through all of the new features of HTML5

00:02:29.730 --> 00:02:34.750
in a single one hour session. We'd probably
be here for the next four hours and we'd get

00:02:34.750 --> 00:02:40.470
maybe half the stuff, so we just sort of picked
a bunch of our favorites that we thought were

00:02:40.470 --> 00:02:45.860
the most interesting. All right. If you want
to see more, we'll have some resources at

00:02:45.860 --> 00:02:52.580
the end that you can go and check out. As
well, these slides and the code that we're

00:02:52.580 --> 00:02:56.400
showing today is going to be available to
you after. So don't worry about scribbling

00:02:56.400 --> 00:03:02.470
down any notes or like any--anything, code,
snippets or anything like that. So the first

00:03:02.470 --> 00:03:08.950
thing I want to start with is what is HTML5
and what does it mean? At Google, we think

00:03:08.950 --> 00:03:17.290
about HTML5 as the collection of web technologies
that have really come to maturity in the last

00:03:17.290 --> 00:03:24.400
two to four years. So that includes things
that give us a really rich development platform

00:03:24.400 --> 00:03:30.750
as developers that we can go and use really
rich APIs to provide offline access or offline

00:03:30.750 --> 00:03:35.430
storage, so that I can store data on the user's
computer without having to send it back and

00:03:35.430 --> 00:03:42.970
forth with cookies. Or that I can get access
to things like device hardware. Getting access

00:03:42.970 --> 00:03:48.220
to maybe GEO location for the user or how
their laptop is sitting, whether it's tilted,

00:03:48.220 --> 00:03:53.300
whether it's straight up and down, all of
that kind of information. But it also gives

00:03:53.300 --> 00:03:59.140
us access to things that we can make our applications
run faster as well. And so, we're going to

00:03:59.140 --> 00:04:05.990
dive into those. And it gives us access to
things that make--allows to build more beautiful

00:04:05.990 --> 00:04:10.530
web apps. No longer are we limited to the
sort of, "Oh look, it's a white page with

00:04:10.530 --> 00:04:16.530
like a couple of words on it and it's not
all that pretty." We can do some really rich

00:04:16.530 --> 00:04:22.930
graphically intense stuff that we could never
do before with video and audio and canvass

00:04:22.930 --> 00:04:31.470
and CSS styling. So the way we sort of decided,
we wanted to show you this is by building

00:04:31.470 --> 00:04:40.290
a web app that takes tweets from the Chrome
Dev Rel Team and visualizes them in this kind

00:04:40.290 --> 00:04:46.950
of neat way. It drops them down. So it's pulling
all these tweets from Twitter and it's using

00:04:46.950 --> 00:04:53.919
CSS3 Animations to drop them, so all these
guys here getting drawn and using CSS3 Animations,

00:04:53.919 --> 00:04:58.560
the older the tweet is the more transparent
it becomes, so you notice on some of these

00:04:58.560 --> 00:05:02.860
tweets you can kind of see, on those ones
you can see through it, this one you can't

00:05:02.860 --> 00:05:10.530
see through it at all. So we are using opacity
to set the age of the tweets. We're using

00:05:10.530 --> 00:05:17.820
Geolocation to be able to provide information
about where people are. If I have a look here,

00:05:17.820 --> 00:05:23.100
this tweet here that's a little bit lighter
on screen as I make it--mouse over it gets

00:05:23.100 --> 00:05:29.639
bigger, it's saying there's geolocation there,
and in fact, we provided additional rendering

00:05:29.639 --> 00:05:37.380
of geolocation on these tweets. We also have
notifications. I'm not going to turn these

00:05:37.380 --> 00:05:43.630
on right now because I want--we'll show--have
a look at these a little later. But we also

00:05:43.630 --> 00:05:50.590
have an ability to be able to search. This
is I think one of the coolest things. So speech

00:05:50.590 --> 00:06:00.020
input. So I can click this little guy here,
free cake. Sure enough, there's all the tweets

00:06:00.020 --> 00:06:04.669
that include the words free cake. All right,
the amount of code that I had to write to

00:06:04.669 --> 00:06:13.650
do that, not much. All right. Under the covers,
we're using IndexDB to store all the tweets,

00:06:13.650 --> 00:06:18.199
so that even if you weren't online you'd still
be able to see all of these tweets. And we're

00:06:18.199 --> 00:06:25.710
using Web Workers to go and get the tweets
and put them into the database. So with that,

00:06:25.710 --> 00:06:29.740
I'm going to pass it over to Ernest who's
going to talk about the stuff that we did

00:06:29.740 --> 00:06:34.990
for the Rich User Experience.
&gt;&gt; DELGADO: Thank you Pete. So I'm going to

00:06:34.990 --> 00:06:39.960
show you some of these APIs that we've used
for this app. And starting for speech input,

00:06:39.960 --> 00:06:43.510
which is the last one he demoed, and this
is the shortest snippet that you're going

00:06:43.510 --> 00:06:48.810
to see today because actually, to enable this
feature, we only added this attribute to the

00:06:48.810 --> 00:06:53.830
input field that we already know. So the good
thing is the browser is giving us a lot of

00:06:53.830 --> 00:06:58.880
UI for free that we don't need to do with
JavaScript. For instance here we have this

00:06:58.880 --> 00:07:04.960
input field inside this bubble, and when we
click on the microphone does this part that

00:07:04.960 --> 00:07:10.070
you seen that is going to tell us, "Okay,
it's time to talk." I'm going to try to say

00:07:10.070 --> 00:07:19.070
free cake with a much worst pronunciation
of course. Free cake. Okay. At least it recognized

00:07:19.070 --> 00:07:24.669
it. So we have these words here, but now we
want to do something else. We also have an

00:07:24.669 --> 00:07:30.430
API that we can access from JavaScript and
do more stuff. For instance, here if we attached

00:07:30.430 --> 00:07:36.090
like an event to the input field and say when
it changes, just trigger this function. The

00:07:36.090 --> 00:07:40.560
event object returns these lists of results,
and we can go through the list of results

00:07:40.560 --> 00:07:49.360
to do different stuff. I'm going to do the
same test here with the free cake. Free cake.

00:07:49.360 --> 00:07:55.400
And I didn't say it very well. So it was the
second guess actually. The system understood

00:07:55.400 --> 00:07:59.270
that they said create and the confidence for
that was 0.2, so the confidence wasn't very

00:07:59.270 --> 00:08:08.479
high. But I'll try to pronounce it better,
let's see. Free cake. So now it gets free

00:08:08.479 --> 00:08:13.400
cake and with a confidence of 0.8, so still,
we have a list of all the other guesses, like

00:08:13.400 --> 00:08:18.100
free games, free skate and so on. But the
confidence wasn't very high for that--this

00:08:18.100 --> 00:08:21.780
confidence as well as the string which is
called the utterance, these are data that

00:08:21.780 --> 00:08:26.289
we are getting from this API. And when we
are saying a word this word is sent to the

00:08:26.289 --> 00:08:30.481
cloud, as it happens with our phone, the voice--the
voice recognition. We don't need to do any

00:08:30.481 --> 00:08:35.430
local voice training to get accurate results.
It used to happen that with a local, like

00:08:35.430 --> 00:08:40.199
desktop software for this matter, but now
that we're using the cloud we don't need that

00:08:40.199 --> 00:08:48.619
anymore, and that's really cool. So another
feature we were using the--in the app is Geolocation.

00:08:48.619 --> 00:08:52.350
And this is really useful to build your apps
with customized content based on the location

00:08:52.350 --> 00:08:56.209
of the user. And just--we are just checking
for navigature--navigator.geolocation to check

00:08:56.209 --> 00:09:04.189
if the browser is supporting this. And then
using the watch position method, which is

00:09:04.189 --> 00:09:08.869
actually running in the background to check
for the position constantly, and then in the

00:09:08.869 --> 00:09:13.850
position parameter we get like the coordinates
latitude, longitude, and one that is not showing

00:09:13.850 --> 00:09:18.499
here on the screen but is the accuracy or
something like that, that actually if I'd

00:09:18.499 --> 00:09:24.699
run this demo we're going to see. It says
that access denied because we need to enable

00:09:24.699 --> 00:09:31.860
geolocation. We can do it here, I think that
we could have done that from this app as well

00:09:31.860 --> 00:09:39.209
because it needs to be like user enabled by
side books which show location here, yes.

00:09:39.209 --> 00:09:50.079
I see. So help me here a bit. I need to claim
the results for that.

00:09:50.079 --> 00:09:54.610
&gt;&gt; LEPAGE: What we did earlier, we did a rehearsal
to make sure everything was working, and we're

00:09:54.610 --> 00:09:59.029
like, "Oh let's just deny access for now,
so that way we can have it work properly when

00:09:59.029 --> 00:10:02.069
we actually go do the demo."
&gt;&gt; DELGADO: Yes. I'm going to create here

00:10:02.069 --> 00:10:03.749
now.
&gt;&gt; LEPAGE: Yes. Helps to clear to that after

00:10:03.749 --> 00:10:08.189
you deny it.
&gt;&gt; DELGADO: Perfect. Now it should work. So,

00:10:08.189 --> 00:10:15.670
let's refresh. So these you could see the
level of protection that the user has. So,

00:10:15.670 --> 00:10:24.050
when we ask here for geolocation it--it's
both asking us in the bother bar. We allow--allowing

00:10:24.050 --> 00:10:29.319
now this feature. And it's saying is that
we are at this position. Not very good actually,

00:10:29.319 --> 00:10:35.019
because it says actually that the accuracy
parameter that I told you before it's saying

00:10:35.019 --> 00:10:40.839
that it's 22,000. So in the background he's
using like IP-Lookup or any information that

00:10:40.839 --> 00:10:47.479
the browser has, like a Wi-Fi connection,
like a spot--AP spots, so that's why it asked

00:10:47.479 --> 00:10:52.019
the user for permission for these kind of
things. So as in all demos that you try it

00:10:52.019 --> 00:10:58.300
live it works, but try it at home and it will
be better. And the way we're using it here

00:10:58.300 --> 00:11:03.540
in the TweeterFall application is that he
mentioned before that the tweets that have

00:11:03.540 --> 00:11:08.279
geolocation attached in that geo object that
you get when you use the Tweeter API. We are

00:11:08.279 --> 00:11:13.369
highlighting them here in this list. So we're
using this position of the tweet compared

00:11:13.369 --> 00:11:18.800
with our position in local. And if that person
is very far that we chose in this fall down

00:11:18.800 --> 00:11:23.839
here, like smaller or bigger, but only for
those with geolocation, in this case, it would

00:11:23.839 --> 00:11:34.029
be like this tweet of Mike West. So, how many
people here haven't heard about Canvas yet?

00:11:34.029 --> 00:11:38.139
So--okay, not many. And it's not surprising
because this is one of the features that has

00:11:38.139 --> 00:11:43.009
been around for a long time in HTML5 and it's
funny to see how we've evolved over time.

00:11:43.009 --> 00:11:50.429
Because it started with all these methods
to make basic shapes and draw lines. And it

00:11:50.429 --> 00:11:54.959
has also other methods for transformations.
And as you can see here in this drawing, it's

00:11:54.959 --> 00:11:59.980
related but the edges are, like, kind of cut
off. And this is because we're not rotating

00:11:59.980 --> 00:12:04.069
that whole canvas element, only the content
inside. And, obviously, the size it was like

00:12:04.069 --> 00:12:10.290
wider and not as much as high. And that's
just understand that we're doing the modifications

00:12:10.290 --> 00:12:16.170
at pixel level. Also when we rotate this image,
there's no transition we have to do, like,

00:12:16.170 --> 00:12:21.920
a four loop and do the animation by hand.
That's why after this thing was kind of popular.

00:12:21.920 --> 00:12:27.480
There were many frameworks that where on top
of that to kind of easy of these programming.

00:12:27.480 --> 00:12:34.029
Also, there's like a processing syntax wrapper
for that. So there are many libraries on top

00:12:34.029 --> 00:12:41.649
of Canvas. But the power of this is really
high. And also we can use images or videos

00:12:41.649 --> 00:12:47.399
to import it in the canvas, get the frames
and modify the pixels. And here--just as a

00:12:47.399 --> 00:12:50.649
proof of concept, we have these two images
here and just--they have been imported inside

00:12:50.649 --> 00:12:56.779
the canvas just to place them, not a big deal.
But then we can export that with the--to data

00:12:56.779 --> 00:13:04.650
URL, to Internet, to any PNG or JPEG back
to the image tag if you--if we want. So we

00:13:04.650 --> 00:13:10.079
will go back to the TweeterFall app.
Another proof of concept that we put here

00:13:10.079 --> 00:13:14.869
was that right now the background is this
CSS pattern and if we enabled like animated

00:13:14.869 --> 00:13:21.319
background is doing this fancy stuff that
taking, like, some star's image putting it

00:13:21.319 --> 00:13:27.769
on--putting it on top with some opacity. Also
doing this color changing and this animation

00:13:27.769 --> 00:13:32.810
and it was really complex to do that only
with JavaScript or images so pre-running that

00:13:32.810 --> 00:13:42.540
with Canvas is much easier. So if you could
remind this rotation I did with Canvas, if

00:13:42.540 --> 00:13:47.359
we want to rotate the whole element. Now we
are able to do it with 2D transformations.

00:13:47.359 --> 00:13:52.509
So, it needs actually--just from CSS, we just
set some properties to transform and rotate

00:13:52.509 --> 00:13:57.421
like 90 degrees but the cool thing is that
if we combine that with transition then we

00:13:57.421 --> 00:14:01.989
have the whole animation between the two states
and we didn't need to do like in Canvas like

00:14:01.989 --> 00:14:07.179
every frame redraw the whole thing. So in
the tradition we're all saying--just saying

00:14:07.179 --> 00:14:12.160
800 milliseconds and that's what it's going
to last but now it means that we are able

00:14:12.160 --> 00:14:17.450
to do it on any element. So I hovered this
code, it's going to do it as well, just because

00:14:17.450 --> 00:14:22.939
I pre-run it like that but I could do it on
the title or on the whole page if I wanted

00:14:22.939 --> 00:14:26.910
to. So this transformation is the one--are
the ones that we use in the Tweeter application

00:14:26.910 --> 00:14:33.100
to make this thing bigger. And, actually,
the code, I think I have the snippet here.

00:14:33.100 --> 00:14:39.240
These are the two stages I was talking about.
I'm saying like, an initial state where there's

00:14:39.240 --> 00:14:46.040
no rotation at all and a final state that
happens when I hover that tweet using the

00:14:46.040 --> 00:14:51.899
CSS selection. And then we have like the scale
that's why this--the tweet is getting bigger.

00:14:51.899 --> 00:14:58.369
And some translations just to make it like
go not outside of the boundaries and what

00:14:58.369 --> 00:15:04.230
happens here is that you see many lines because
in CSS, when something new comes, they are

00:15:04.230 --> 00:15:09.690
like the browser prefixes that allows us to
use that new feature in the browser. And later

00:15:09.690 --> 00:15:14.130
when it becomes standardized, then we don't--we
won't need that anymore. But, at least, when

00:15:14.130 --> 00:15:19.170
browsers implement things with different syntax
or little differences, we are able to do--use

00:15:19.170 --> 00:15:27.329
that right away in the browser using these
prefixes. There are also 3D transformations.

00:15:27.329 --> 00:15:32.760
These are really cool feature and also one
of the latest. And here, when we say rotation,

00:15:32.760 --> 00:15:37.639
we can specify on one--what axis we're on
in that rotation. And everyone--like a 90

00:15:37.639 --> 00:15:41.329
degrees going to flip whatever we have on
the screen and it's going to give like the

00:15:41.329 --> 00:15:48.949
impression of the 3D because we added this
prospective parameter. So we didn't do anything

00:15:48.949 --> 00:15:54.559
here with 3D in this app but if you pay attention
to these slides, the way that they are doing

00:15:54.559 --> 00:15:59.350
the transition, they are doing this kind of
3D effect that where we're using the 3D Transforms.

00:15:59.350 --> 00:16:05.779
So this not meant to be like a whole 3D environment
or a game. You have, like, the Web GL context

00:16:05.779 --> 00:16:12.480
in the canvas tag. We're going to not talk
about it because it's really a dense subject.

00:16:12.480 --> 00:16:16.259
But you have a specific talk on I_O tomorrow
if you're more interested or if you are a

00:16:16.259 --> 00:16:22.769
game developer. And now, let's make our site
prettier because actually, for many, many

00:16:22.769 --> 00:16:29.119
years, we had those eight fonts in our browser
and we were limited to those eight fonts.

00:16:29.119 --> 00:16:33.929
And since you shouldn't be using Comic Sans
for your site, we are limited to seven--eight

00:16:33.929 --> 00:16:40.519
font types. So the cool thing to them or the
Web fonts, that now with this feature, we

00:16:40.519 --> 00:16:46.869
have access to thousands of fonts. Is this--to
use this extension made by Pamela Fox, and

00:16:46.869 --> 00:16:50.699
this point actually a list from an API that
we have at Google is the Google Fonts API

00:16:50.699 --> 00:16:55.929
and we have all these fonts that we can preview
and when we selected anything on the page,

00:16:55.929 --> 00:17:00.639
like the code there is changing and we can
say, "Okay. How it looks here on my site?"

00:17:00.639 --> 00:17:04.959
And if we like this font for our site, then
we can copy-paste this code and put it in

00:17:04.959 --> 00:17:11.400
the header and boom, yes, we have the fonts
available already. The only thing is that

00:17:11.400 --> 00:17:16.040
if you want to host the fonts because, with
this API, Google is hosting the font file

00:17:16.040 --> 00:17:21.160
for you. So if you want to get the true type
and host it in your own server just put it

00:17:21.160 --> 00:17:27.360
in the folder and then use the syntax in CSS.
You say font family with a keyword that you're

00:17:27.360 --> 00:17:33.000
going to use in your spreadsheet and then
source with a link to wherever you put your

00:17:33.000 --> 00:17:42.230
font type--font file. And, actually, here,
I think, you have seen already that this font

00:17:42.230 --> 00:17:46.760
is actually text is not any much replacement
or any crazy [INDISTINCT] that web developers

00:17:46.760 --> 00:17:51.330
used to do and is using this font for here.
I think the font for the text is also another

00:17:51.330 --> 00:17:57.670
one so it makes--actually, designers are really
happy with this feature now. And the last

00:17:57.670 --> 00:18:02.740
feature I'm going to show you in this section
is Web Notifications. An easier way to understand

00:18:02.740 --> 00:18:10.110
this feature is if you are using chat or any
chat or email software in your desktop but

00:18:10.110 --> 00:18:14.170
I wouldn't be surprised that all of you maybe
are using web-based software for that already.

00:18:14.170 --> 00:18:20.160
But, obviously, if you are using still, like
the desktop, you'll be familiar with the notifications

00:18:20.160 --> 00:18:27.060
you have on the top right on Macintosh and
on the top bottom windows. And we'll be, like,

00:18:27.060 --> 00:18:31.350
kind of the scanned--similar to that but what
we're seeing here actually are screenshots

00:18:31.350 --> 00:18:35.660
of the web notifications because, actually,
we want this kind of feature for our web apps.

00:18:35.660 --> 00:18:43.760
I'm going to show the demo first here because
as it happens with geolocation, you need the

00:18:43.760 --> 00:18:51.420
specific permission from the user and then
we have to say that, okay, we're allowed to

00:18:51.420 --> 00:18:54.300
do that. That's because we are the one the
user to get, like, spam or any popup from

00:18:54.300 --> 00:19:00.890
any random site, he needs to know where he's
giving permissions for--to receive these notifications.

00:19:00.890 --> 00:19:08.510
So if we receive--let me see, for instance
here, kind of--there are these notification

00:19:08.510 --> 00:19:14.030
here that it's showing more than the UI and
this notification at desktop level. Now it's

00:19:14.030 --> 00:19:17.180
disappearing. So this notification that we
get here and probably we're going to get some

00:19:17.180 --> 00:19:22.180
more--if some of my teammates tweet now, we're
going to get those tweets from now until the

00:19:22.180 --> 00:19:27.060
end of the talk. And it doesn't matter if
I focus on that app or you have the browser

00:19:27.060 --> 00:19:32.970
modified, see, this thing is showing right
here now, from my boss actually. And I hope

00:19:32.970 --> 00:19:39.570
she's not watching me. The snippet for that
is that we have this function. And when we

00:19:39.570 --> 00:19:46.140
call this function, we check if this site
has permissions from the user to show notifications.

00:19:46.140 --> 00:19:51.370
And we're using this single method to pass
through parameters like a picture, a title

00:19:51.370 --> 00:19:55.000
and the content. And, actually, since we're
doing it from Tweeter we have all the--that

00:19:55.000 --> 00:19:59.350
information from the json object of the--of
the tweets. There's another kind of notification

00:19:59.350 --> 00:20:04.050
that we're not showing here that is called,
I think, create HTML5 note--HTML notification.

00:20:04.050 --> 00:20:08.830
So instead of three parameters, we parsed
one single parameter with HTML content and

00:20:08.830 --> 00:20:14.080
that's going to show up in the notification.
We're using a similar method to show and this

00:20:14.080 --> 00:20:19.670
is why the notification was hiding after a
while. Because, by default, that thing--the

00:20:19.670 --> 00:20:25.650
thing is going to stay there until the user
goes and closes it. But maybe we think that

00:20:25.650 --> 00:20:30.430
that's annoying for him because there are
too many notifications up to the developer.

00:20:30.430 --> 00:20:36.930
So we set--we set this set timeout and he's
going to close after a while. And, actually,

00:20:36.930 --> 00:20:41.880
if you use Gmail or Google Calendar or even
TweetDeck or some other similar app, you can

00:20:41.880 --> 00:20:47.340
enable this feature because they are already
supporting that. With that, I'm going to pass

00:20:47.340 --> 00:20:55.410
it over to Pete to talk about some more features.
&gt;&gt; LEPAGE: Awesome. Yes. Thank you, sir. All

00:20:55.410 --> 00:21:03.180
right. So Ernest went through some of the
sort front-end and user experience stuff that

00:21:03.180 --> 00:21:07.630
really allows us to make our applications
feel like they run on the desktop. I'm going

00:21:07.630 --> 00:21:12.290
to take a look at some of the things that
allow us to build applications that are more

00:21:12.290 --> 00:21:17.721
powerful, that give us more APIs than we've
ever had access to before. And really allow

00:21:17.721 --> 00:21:23.830
us to do stuff that we couldn't do or if we
did, we had to like, as I mentioned earlier,

00:21:23.830 --> 00:21:29.120
use some of that black magic, use some JavaScript
that wasn't really meant to do something and

00:21:29.120 --> 00:21:35.390
innovate something through this and that and
just not really pretty ways of doing things.

00:21:35.390 --> 00:21:39.940
As we started building this app, one of the
things we realized we needed to do was stored

00:21:39.940 --> 00:21:45.050
data. And we could've done that using cookies
but we wanted to store the configuration data

00:21:45.050 --> 00:21:52.560
for this application on the user's computer.
We use Web Storage to do that. Web Storage

00:21:52.560 --> 00:21:57.820
allows you to store name value pairs of data,
so it's--you know, you've got the name and

00:21:57.820 --> 00:22:02.940
then value is only a string. So we're using
that to store this configuration information.

00:22:02.940 --> 00:22:09.400
There's two type of Web Storage that are available
to us. There's sessionStorage which, like

00:22:09.400 --> 00:22:14.850
it sounds like, its lifetime is for the session,
so you close that window and you've lost access

00:22:14.850 --> 00:22:22.280
to it. And then there's localStorage. And
that last for until the user blows away their

00:22:22.280 --> 00:22:28.870
cache and clears out their browser. The way
we're using this in our app is we've got another

00:22:28.870 --> 00:22:33.910
function called getSettings. And getSettings
says var settings equals localStorage and

00:22:33.910 --> 00:22:41.480
it goes and tries to get the string from localStorage.
It then tries to parse that string into a

00:22:41.480 --> 00:22:45.560
JavaScript object. Because it's in there as
a string, we want to get it into an object,

00:22:45.560 --> 00:22:53.260
so we can handle it a little bit more accurate--easily.
And so, settings, JSON.parse. Now I've wrapped

00:22:53.260 --> 00:22:57.870
that and try cache block because what I want
to do is say, hey, if you fail or if there's

00:22:57.870 --> 00:23:03.930
any kind of problems with this thing, we'll
just go create a new set of settings and then

00:23:03.930 --> 00:23:10.320
we're going to pass those back. Then to store
that data into the configuration, we just

00:23:10.320 --> 00:23:18.150
do localStorage, square bracket equals and
you give it the key, and then you give it

00:23:18.150 --> 00:23:23.100
the string that you want to put in. Again,
because we're taking a JavaScript object,

00:23:23.100 --> 00:23:27.280
we need to turn it into a string because we
can't just shove a JavaScript object into

00:23:27.280 --> 00:23:35.020
there. We're using JSON.stringify, and that
allows us to get our configuration data into

00:23:35.020 --> 00:23:44.740
the app. So all of the information that's
stored around which Tweeter username and which

00:23:44.740 --> 00:23:48.900
user list we want to store, as well as, you
know, how many tweets we want to show at any

00:23:48.900 --> 00:23:56.750
given time. Whether we want to, you know,
if I turn the notifications off and reload

00:23:56.750 --> 00:24:04.010
the app; sure enough the notifications are
off. So every time we start the app, we started

00:24:04.010 --> 00:24:14.400
in the same set of configuration that we used
last time. 

00:24:14.400 --> 00:24:19.710
We also wanted to store additional stuff on
the user's computer that localStorage didn't

00:24:19.710 --> 00:24:26.210
really work for. We wanted to store all the
tweets that the user had seen on their computer.

00:24:26.210 --> 00:24:33.180
And so, indexedDB is a new set of, a new database
object that comes as part of HTML5 and it

00:24:33.180 --> 00:24:39.550
allows you to store significant quantities
of structured data, all right? Now, there's

00:24:39.550 --> 00:24:43.030
a couple of things that we're going to have
a lookup but before we dig into this one at

00:24:43.030 --> 00:24:49.860
all, I just want to stop and sort of grab
everybody's attention for one sec. A lot of

00:24:49.860 --> 00:24:56.960
the new APIs that you get access to is--with
HTML5 are asynchronous. Put your hand up if

00:24:56.960 --> 00:25:01.290
you've done like an AJAX request and you know
how you deal with, sort of the asynchronous,

00:25:01.290 --> 00:25:05.950
yes. So you know how with that kind of thing,
you have to give it a callback because the

00:25:05.950 --> 00:25:11.330
data might not be there when you go ask for
it and it's going to go and do stuff asynchronously.

00:25:11.330 --> 00:25:18.250
Well, many of the APIs that we get as part
of HTML5 are that same way, all right? And

00:25:18.250 --> 00:25:24.590
indexedDB is definitely one of those and you'll
see in a sec how we--how we went about dealing

00:25:24.590 --> 00:25:32.030
with that. So, to initialize a database with
indexedDB, I've created a function called

00:25:32.030 --> 00:25:38.010
initDatabase and I give it a callback for
dbReady and that callback is called when my

00:25:38.010 --> 00:25:43.830
database object is ready. So there's a couple
of things we need to do to initialize a database.

00:25:43.830 --> 00:25:49.900
First thing we need to do is set our version.
So I've set var dbVersion, the answer is 42,

00:25:49.900 --> 00:25:54.450
you can use a number, you can use a string,
you can use whatever you want in there as

00:25:54.450 --> 00:26:00.000
long as it's a legal JavaScript something,
you can set it in there, all right. And then

00:26:00.000 --> 00:26:08.230
we say, request indexedDB open. And that opens
the database that says, "Hey, indexedDB go

00:26:08.230 --> 00:26:14.840
open yourself up for me." And here's where
we have our first line where we need to deal

00:26:14.840 --> 00:26:21.100
with an async call, right? Because we don't
know when that database is going to be ready,

00:26:21.100 --> 00:26:26.960
we can't just count on it being ready as soon
as we call open. So we say, request onsuccess

00:26:26.960 --> 00:26:33.930
and I've created a function here. And I've
said database, now I have to declare this

00:26:33.930 --> 00:26:38.650
is a global variable because I want to use
it in a bunch of places, e.target.result,

00:26:38.650 --> 00:26:43.560
and that gives me access to the database.
Then I want to check to see if the database

00:26:43.560 --> 00:26:49.140
version that I've opened is the same one that
I'm expecting. If it is, great, I'm just going

00:26:49.140 --> 00:26:54.730
to call database ready and we're good to go,
and we can start using it. If it's not, then

00:26:54.730 --> 00:26:59.660
we've probably made some changes to our database.
Maybe it's a new instance if our application

00:26:59.660 --> 00:27:04.270
is running, or maybe we've create a new table
or we've change some of the object types that

00:27:04.270 --> 00:27:08.530
are in there. So, if it is a new version,
we need to set the version to the new ones.

00:27:08.530 --> 00:27:14.520
We've got database set version and we set
it. And then, again, the same thing, we need

00:27:14.520 --> 00:27:22.770
to do an asynchronous call in and say, Ver.onsuccess
and I go in, I create the tables. So where

00:27:22.770 --> 00:27:28.120
you see here the object store name contains,
so we check to see if it's already there.

00:27:28.120 --> 00:27:35.910
If it's not, we go and we say, create the
store and we set the key path to the index

00:27:35.910 --> 00:27:40.411
that we want to use. And you can use whatever
you want in your index here. And then we go

00:27:40.411 --> 00:27:48.590
and say, hey, we're ready, you can start using
us. To get data from the database, same general

00:27:48.590 --> 00:27:54.320
concepts apply. So, in this particular instance,
all right. And this is the actual code from

00:27:54.320 --> 00:27:58.580
the app. If you actually go and look at our
app and go view source, you're going to see

00:27:58.580 --> 00:28:03.400
this function with this exact code in there.
So we've set an item callback and we've set

00:28:03.400 --> 00:28:12.100
a completed callback. The item callback gets
called on each item. So, like we go, and in

00:28:12.100 --> 00:28:16.890
fact use it to stick stuff into an array,
and then we callback completed callback when

00:28:16.890 --> 00:28:22.800
we've done all of our looping through. Now,
you're going to notice these three lines,

00:28:22.800 --> 00:28:28.270
these three lines are pretty much the basics
of any indexedDB request. First thing we need

00:28:28.270 --> 00:28:35.020
to do is do var trans database.transaction,
all right? So we need to go to get a transaction

00:28:35.020 --> 00:28:40.110
access into the database and in this case,
because we're reading, we're going to do a

00:28:40.110 --> 00:28:46.880
read-only request, all right? So we're just
saying, hey, read-only. Then we need to go

00:28:46.880 --> 00:28:53.170
say store, trans.objectStore, we want to get
access to that table, right. We want to say,

00:28:53.170 --> 00:29:00.220
"Hey, give me all of the items in that particular
table." And then to get the individual items

00:29:00.220 --> 00:29:09.090
from there, store open cursor. Now, indexedDB
works via cursors, all right. So instead of

00:29:09.090 --> 00:29:17.350
like a SQL notation were you say, select star
from table tweets, right. This gives you a

00:29:17.350 --> 00:29:22.130
cursor and it allows you to iterate through.
It's almost like a four each kind of statement,

00:29:22.130 --> 00:29:31.500
so you run through. In our onsuccess, once
we have our first cursor item, we say, we

00:29:31.500 --> 00:29:37.180
go get our cursor. We check to see if our
cursor's undefined because we're done when

00:29:37.180 --> 00:29:44.309
we've hit the undefined and we did the callback
if we're done, and if we're not, we do the

00:29:44.309 --> 00:29:48.510
item callback. So we say, "Hey, I want you
to take--I want to take you and I want to

00:29:48.510 --> 00:29:53.790
just shove you into my array or do whatever
you want." In our particular case, we're doing

00:29:53.790 --> 00:30:00.880
a couple of things. We go and, as we pull
the stuff back, we go and add it to this list

00:30:00.880 --> 00:30:12.340
on the right and we add it to the items in
the--in the database. To add stuff to a database,

00:30:12.340 --> 00:30:17.940
similar concept. Those three lines are almost
exactly the same, right? We need to go get

00:30:17.940 --> 00:30:23.040
our transaction, access to the database, this
time we're going to change that first line,

00:30:23.040 --> 00:30:26.660
instead of doing a read-only we need to do
a read-write because we want to put stuff

00:30:26.660 --> 00:30:32.470
into the database. We need to then get the
store, get that table and say, "Hey, we want

00:30:32.470 --> 00:30:38.720
access to the table." And then we can actually
start putting stuff into the database with

00:30:38.720 --> 00:30:44.860
store.add, all right. Store.add adds a new
row effectively; it's the way to think about

00:30:44.860 --> 00:30:50.730
it. There's also store.put which allows you
to replace an element. So if you've got, you

00:30:50.730 --> 00:30:55.041
know, two elements and you want to put one
in and replace one with the other, you can

00:30:55.041 --> 00:31:02.940
use store.put. Now, I haven't put anything
in my onsuccess or onfailure callback other

00:31:02.940 --> 00:31:08.200
than a console.log in this particular case.
But in something like this, more than likely,

00:31:08.200 --> 00:31:13.620
you'd probably just want to put some error
handling in your onfailure and in your onsuccess

00:31:13.620 --> 00:31:18.390
you might want to deal with something that
is, okay, we've already got the thing in there

00:31:18.390 --> 00:31:29.809
or what have you. All right. Helps if I open
the lid. How many of you guys have seen this

00:31:29.809 --> 00:31:34.590
dialog popup or a similar dialog when you're
surfing around on the Web, yes. Yes. That

00:31:34.590 --> 00:31:40.570
dialog kind of sucks, doesn't it? You know,
one of the things with JavaScript is that,

00:31:40.570 --> 00:31:46.150
JavaScript runs in the same thread as our
UI, right? So that means if you try and do

00:31:46.150 --> 00:31:52.290
any complex JavaScript calculations and--or
maybe you get yourself into a race condition

00:31:52.290 --> 00:31:56.040
or you're just doing something or somebody
else is doing something more than likely,

00:31:56.040 --> 00:32:05.080
because we'd never write code that did this,
we're all--right? Yes. All right. Because

00:32:05.080 --> 00:32:09.350
you're running in that same thread and you
lock up, well, it feels like the browser locks

00:32:09.350 --> 00:32:14.500
up and the browser pops that dialog up and
says, "Hey, I'm sorry, this guy is taking

00:32:14.500 --> 00:32:21.480
too long. Do you want to kill it or do you
want to wait for it?" So, there's a new set

00:32:21.480 --> 00:32:26.741
of functionality in HTML5 called Web Workers.
And Web Workers allows you to say, hey, I

00:32:26.741 --> 00:32:31.960
want to take this chunk of JavaScript and
I want to run it in a separate thread from

00:32:31.960 --> 00:32:38.710
my browser UI code. I want it to be completely
separate, I don't want it to interfere, just

00:32:38.710 --> 00:32:43.200
go off and do your own thing. Just come back
and tell me when you're done. So that's what

00:32:43.200 --> 00:32:49.210
Web Workers is, and if this really cool way
to be able to go and run stuff off in another

00:32:49.210 --> 00:32:54.010
place. Now, I've got some sample code here
and I'll show you how we're using this in

00:32:54.010 --> 00:32:58.330
the app, but I wanted to sort of walk through
the sample code to give a specific example

00:32:58.330 --> 00:33:04.200
of where were the--where you'd do some real
complex calculations. So, the calculated Fibonacci

00:33:04.200 --> 00:33:09.280
Sequence if you remember those, that you add
the two previous numbers. Well, those get

00:33:09.280 --> 00:33:14.429
really computationally expensive as your numbers
start to get larger and larger, right? So

00:33:14.429 --> 00:33:19.480
you trying and run that with a number of a
hundred and your browser is just going to

00:33:19.480 --> 00:33:26.840
go plunk and stop working and it's not going
to be pretty, right? So, I created a Fibonacci

00:33:26.840 --> 00:33:30.520
calculator using a Web Worker. So the first
thing we do if we say var worker equals new

00:33:30.520 --> 00:33:34.580
worker and we give it a link to the JavaScript
that we want it to go run, right? So it's

00:33:34.580 --> 00:33:42.679
a separate JavaScript file, lives off in its
own little world. And then because it's running

00:33:42.679 --> 00:33:46.670
off in its own little world, the only way
we can talk to it or it can talk to us is

00:33:46.670 --> 00:33:52.470
through post messages. All right? So we need
to listen for any messages that it's going

00:33:52.470 --> 00:33:58.480
to send us. So we had add an event listener,
that listens for messages and we're just going

00:33:58.480 --> 00:34:03.960
to popup a dialogue. And then finally we need
to send it a message, we need to tell it to

00:34:03.960 --> 00:34:11.559
go do something. All right? So worker post
message and we send it 12. Then in our actual

00:34:11.559 --> 00:34:18.579
Fibonacci JS, so this is the actual code that's
running in our worker, right? We need to listen

00:34:18.579 --> 00:34:24.329
for messages, right? Because, well, we're
sending it stuff so it needs something to

00:34:24.329 --> 00:34:31.099
listen. So, self.onmessage and we go and we
start using our Fibonacci sequence. So, we

00:34:31.099 --> 00:34:37.849
go and do that calculation. When we finish,
we do a post message to send back to our parent

00:34:37.849 --> 00:34:46.720
to say, "Hey, I'm done. Here's my value."
All right? Now, the reason we need to do it

00:34:46.720 --> 00:34:53.429
this way is because it's running off in its
own little world, all right? It doesn't have

00:34:53.429 --> 00:34:58.240
any other access to most of the things we're
used to. It doesn't have access to the window

00:34:58.240 --> 00:35:01.859
object. It doesn't have access to the DOM.
It doesn't have access to a lot of stuff,

00:35:01.859 --> 00:35:07.920
so the only way we can get messages back and
forth is with the post message. So sure enough

00:35:07.920 --> 00:35:15.170
this guy runs and we get a result back with
our Fibonacci sequence. Now, how are we using

00:35:15.170 --> 00:35:22.499
this in our application? In our index.html,
we have a function called startWorker, all

00:35:22.499 --> 00:35:26.740
right? And that goes and it says, same thing
we saw before, var worker equals new worker

00:35:26.740 --> 00:35:32.269
and it points to the script that we want to
start running in its own little thread. We

00:35:32.269 --> 00:35:36.700
had add our event listener that says, "Hey,
any time you get a message I want you to send

00:35:36.700 --> 00:35:41.660
that message and handle it with newTweetHandler,
so that newTweetHandler is going to go and

00:35:41.660 --> 00:35:47.309
handle any of the content that we send it
from our worker." And then we tell our worker,

00:35:47.309 --> 00:35:54.069
"All right, time to get started. You're good
to go." Within the worker, again, same concept,

00:35:54.069 --> 00:35:59.309
self.addEventListener. We listen for new messages
and we start the function that's going to

00:35:59.309 --> 00:36:04.060
go on read the tweets. So this is the--in
our worker thread, this is what's actually

00:36:04.060 --> 00:36:09.150
going up to Twitter and say, "Hey, Twitter,
got any new messages for me? All right. Nope.

00:36:09.150 --> 00:36:14.970
Okay, fine, thanks. Got any new messages?
Oh, you do. Great, thanks." So it then takes

00:36:14.970 --> 00:36:26.849
that message and it sends it over to our application.
Now, you'll notice I used the line here, importScripts;

00:36:26.849 --> 00:36:30.760
importScripts. Remember I said earlier we
don't have access to the window object? We

00:36:30.760 --> 00:36:37.269
don't have access to the DOM? Means we can't
go into adjacent P request. We can't create

00:36:37.269 --> 00:36:43.180
script elements in our DOM so we can't have
any of that stuff going. So we need a way

00:36:43.180 --> 00:36:50.259
that we can be able to insert script into
our application. And so there's a method called

00:36:50.259 --> 00:36:55.069
importScripts and it works synchronously,
right? So this one is not a sync. This is

00:36:55.069 --> 00:36:59.881
synchronously. So it goes up to Twitter and
I've just shortened the URL here just so that

00:36:59.881 --> 00:37:07.519
it would fit on the slide. But it goes up
to Twitter. It requests the tweets. That then

00:37:07.519 --> 00:37:16.839
inserts the JavaScript that Twitter sends
back into our worker and then that code gets

00:37:16.839 --> 00:37:26.680
executed. All right? So, that's how web workers
work. They go through. They grab our information,

00:37:26.680 --> 00:37:33.609
off in their own little world and they send
messages back and forth. All right. I want

00:37:33.609 --> 00:37:39.489
to go to sort of some basic stuff for a sec
because I think this is one of my--it's the

00:37:39.489 --> 00:37:46.499
easiest part of HTML5 I think but it's also
one of my favorite parts of HTML5. HTML5 makes

00:37:46.499 --> 00:37:52.560
our markup and our seman--our markup much
more semantic and much easier. How many of

00:37:52.560 --> 00:37:59.759
you guys have the HTML 4.01 DOCTYPE memorized?
Right. You know, usually when I asked that

00:37:59.759 --> 00:38:04.799
there's like two people who put up their hand
and there's probably two people who have a

00:38:04.799 --> 00:38:10.710
memory that good. I could tell you I don't,
right? Like, I know it's DOCTYPE and that's

00:38:10.710 --> 00:38:16.750
about as far as I stop. All right? I'm used
to the tools inserting it for me. HTML5 gives

00:38:16.750 --> 00:38:27.289
us a new DOCTYPE that's a heck a lot easier.
DOCTYPE HTML, much easier than that big, long,

00:38:27.289 --> 00:38:31.849
crazy thing. And this will stick all of the
browsers into their most compliant rendering

00:38:31.849 --> 00:38:38.420
mode giving us all of the HTML5 features.
One of the other things that becomes easier

00:38:38.420 --> 00:38:45.559
is we've got this meta charset equals utf-8.
We don't have to go and put in all those big,

00:38:45.559 --> 00:38:51.009
long complex name and value and content and
all that kind of stuff. We've simplified and

00:38:51.009 --> 00:39:00.940
made our markup a lot easier. There's also
a bunch of new semantic elements and they

00:39:00.940 --> 00:39:06.460
went through when they were going and deciding
which semantic elements to add by looking

00:39:06.460 --> 00:39:11.779
at all of the markup that you guys have all
written over time. And they looked at what

00:39:11.779 --> 00:39:20.079
classes and what ID's appeared most often.
Sure enough, things like header, footer, article,

00:39:20.079 --> 00:39:29.349
nav were the most common classes and ID's.
So why not actually give those their own elements.

00:39:29.349 --> 00:39:35.700
They also changed the meaning of a couple
elements. So elements that had a stylistic

00:39:35.700 --> 00:39:41.529
meaning in the past, they changed those to
have a semantic meaning now. I think my favorite

00:39:41.529 --> 00:39:46.220
one of those is small. It's still going to
render in the same way, it's still going to

00:39:46.220 --> 00:39:51.390
be small text, okay? But what's going to happen
is instead of it rendering--instead of it

00:39:51.390 --> 00:39:57.180
just having the visual meaning, it now has
a semantic meaning and that semantic meaning

00:39:57.180 --> 00:40:02.849
is the small print or the fine print that's
on the bottom of a legal document or maybe

00:40:02.849 --> 00:40:08.079
the fine print that's on the bottom of your
webpage. So, it gives it a semantic meaning.

00:40:08.079 --> 00:40:13.180
There's also a bunch of elements that, well,
they haven't been deprecated, they've been

00:40:13.180 --> 00:40:19.220
obsoleted if that's a real word, okay? And
they're still going to work. They're still

00:40:19.220 --> 00:40:23.430
going to render exactly like they did before
if you're using them in your markup today,

00:40:23.430 --> 00:40:27.839
they're still going to work. But the only
thing that's really going to happen is your

00:40:27.839 --> 00:40:30.970
friends are going to look at your code and
your friends will laugh at you. That's about

00:40:30.970 --> 00:40:36.859
it, right? And honestly, do we need a reason
to get rid of the marky tag? Like, come on.

00:40:36.859 --> 00:40:45.250
Really? The bling tag? Things like center.
You can do that with CSS style. So that's

00:40:45.250 --> 00:40:53.369
why those elements are gone now. In our application,
the way we actually use this is we created

00:40:53.369 --> 00:40:59.230
the application really only using three main
sections. Across the top we've got our header

00:40:59.230 --> 00:41:04.999
element, all right? And that's just an element
that runs across top marks our header. On

00:41:04.999 --> 00:41:10.229
the left, we've got a section that contains
all of our falling tweets and on the right

00:41:10.229 --> 00:41:21.150
we've got an aside and that aside is the tweets
on the right. All right. Form elements. Bunch

00:41:21.150 --> 00:41:27.710
of new stuff to make form work easier, right,
so that if you've got input types, there's

00:41:27.710 --> 00:41:38.700
a bunch of new ones like--excuse me, email,
phone number, dates, times, and things to

00:41:38.700 --> 00:41:42.569
make validations significantly easier. One
of the cool things about these new elements,

00:41:42.569 --> 00:41:47.859
think about like on a phone if you are going
to enter in a phone number, isn't it nice

00:41:47.859 --> 00:41:55.229
when the device actually shows just the keypad?
So by doing that, you can not only provide

00:41:55.229 --> 00:42:02.780
functionality for the device but you can also
add placeholders and patterns. So let's take

00:42:02.780 --> 00:42:08.720
a look at at our application for a sec. I'm
going to pop this open. There's a couple of

00:42:08.720 --> 00:42:13.640
things that are going on. I'm going to take
this text code here. Notice that there are

00:42:13.640 --> 00:42:19.599
a couple of things happen. This guy turned
to some light gray text. I'm not sure if you

00:42:19.599 --> 00:42:23.930
can read it in the back but it says username.
That's a placeholder, right? If we wanted

00:42:23.930 --> 00:42:27.479
to do a placeholder in the past, we had to
do that with JavaScript and it was kind of

00:42:27.479 --> 00:42:32.819
a pain in the butt because sometimes the JavaScript
wouldn't fire at the right time and--or the

00:42:32.819 --> 00:42:38.249
user would start typing before the placeholder
got popped in and then all of a sudden, oh,

00:42:38.249 --> 00:42:42.479
not only does the user have what they type
but they also have a place--well it just got

00:42:42.479 --> 00:42:49.460
to be this big mess, right? And unless you
had like awesomeness coding skills, not exactly

00:42:49.460 --> 00:42:55.829
the most fun. So I'm going to put this back
in here. There's also this range element that

00:42:55.829 --> 00:43:04.509
allows us to specify a range. There's all
sorts of new ones, the code that we've got,

00:43:04.509 --> 00:43:07.859
all right? So, there's what we've got for
the placeholder. I say placeholder equals

00:43:07.859 --> 00:43:15.589
username and so that placeholder just automatically
appears. We've also got a required attribute.

00:43:15.589 --> 00:43:21.170
I want to point this one out specifically
because this is something called the binary

00:43:21.170 --> 00:43:25.069
attribute. And the first time I ever used
it, it goofed to me up pretty significantly

00:43:25.069 --> 00:43:31.200
because binary attribute is true if it's there.
It doesn't matter what you set the value to.

00:43:31.200 --> 00:43:37.079
If it's there, the value is true. All right?
If you want to go and set a value on it, you

00:43:37.079 --> 00:43:41.259
can. You can say required equals required.
You could say required equals true. You could

00:43:41.259 --> 00:43:48.239
say required equals, hi mom. All right? All
of those are going to evaluate to true. What

00:43:48.239 --> 00:43:58.380
happens if you say required equals false?
It's true. So, keep that one in mind because

00:43:58.380 --> 00:44:03.009
I kid you not, I probably spent half an hour
one day when I first came across binary attributes

00:44:03.009 --> 00:44:08.559
and I was just like, "It set to false, I know
it set to false." I'm looking at my markup;

00:44:08.559 --> 00:44:14.690
I'm using the developer tools, until I realized
what a binary attribute actually meant. For

00:44:14.690 --> 00:44:20.799
the required attribute on form elements, what
that's going to do is that's going to stop

00:44:20.799 --> 00:44:26.461
the form from being submitted unless the user
has actually entered text in there. We've

00:44:26.461 --> 00:44:33.220
also got some new CSS selectors that allow
us to provide much more visually intense stuff.

00:44:33.220 --> 00:44:41.999
So, I can say, "Hey, input, when you've got
a focus," right? Or I could say, where, "input:required:invalid."

00:44:41.999 --> 00:44:49.450
I want you to have a different set of styles
then when you have input, required and valid,

00:44:49.450 --> 00:44:55.299
right? So, that's why you saw the checkmark
or the little red box. We've got an ability

00:44:55.299 --> 00:45:00.410
to just with styling, right? In the past,
if we did this, we have to right some pretty

00:45:00.410 --> 00:45:04.579
crazy JavaScript to do this. We had to use
somebody's library or it's just one of those

00:45:04.579 --> 00:45:13.710
things where we didn't get the richness that
we can do with CSS 3. One of the other things

00:45:13.710 --> 00:45:19.759
that we wanted to do was provide a really
fast experience, right? It's really important

00:45:19.759 --> 00:45:24.210
that as people are using web applications
that they just are fast, right? They don't

00:45:24.210 --> 00:45:29.349
want to be, "Oh, I clicked on this link and
then, you know, it's the Web of the 1990s

00:45:29.349 --> 00:45:34.539
and I'm on the dial-up modem and, you know,
I'm waiting for my page." We want things to

00:45:34.539 --> 00:45:40.339
be fast. Application cache allows us to cache
our entire application on the user's computer.

00:45:40.339 --> 00:45:44.940
Now, you're probably sitting there going,
"Well, doesn't caching just do that in general?"

00:45:44.940 --> 00:45:51.170
And yet, it mostly does. But, you've all--probably
only got a cache of maybe 50 or 100 megs or

00:45:51.170 --> 00:45:56.010
maybe you've cranked it up and you've got
a fairly big cache. But think about all the

00:45:56.010 --> 00:46:01.259
pages that you visit everyday and how quickly
that cache gets blown away, right? You've

00:46:01.259 --> 00:46:06.299
just--you've looked at so much stuff that
you've clear that cache out, now, you go to

00:46:06.299 --> 00:46:10.269
that application and it's got to re-download
everything. Well, that kind of sucks. With

00:46:10.269 --> 00:46:14.940
App Cache, you can actually say, "Hey, I want
you to store all of the data about my application

00:46:14.940 --> 00:46:23.029
on the--on the computer. The way you do that
isn't the HTML element; we need to add a manifest

00:46:23.029 --> 00:46:29.789
file. That manifest file is a file that serve
from our server that says, "Hey, this is the

00:46:29.789 --> 00:46:38.039
stuff that you should cache locally on the
user's computer." In the actually cache file,

00:46:38.039 --> 00:46:42.619
its got a particular format, you got to say
cache manifest, you don't have to put a version

00:46:42.619 --> 00:46:47.319
in there, I'd recommend it because the way
that the browser knows whether you're application

00:46:47.319 --> 00:46:53.910
has been updated is by looking for changes
in that file, all right? So, you may change

00:46:53.910 --> 00:46:59.690
one of your index.htm, all right? The browser
is not going to bother to go check to see

00:46:59.690 --> 00:47:05.319
if index.htm has been updated because it's
cache locally. So, that's why you need to

00:47:05.319 --> 00:47:12.470
change the version. It'll go up every time,
it'll try and get this app cache file and

00:47:12.470 --> 00:47:17.530
do that one thing to do sort of call-out because
it's, again, one of those little things that

00:47:17.530 --> 00:47:25.920
I thought with for about 20 minutes one day.
When your server serves the app cache file,

00:47:25.920 --> 00:47:30.630
it need to be served with the mind type of
text cache-manifest, all right? So, you don't

00:47:30.630 --> 00:47:37.259
need to set that into htaccess or however
you're doing that, you need to go do that.

00:47:37.259 --> 00:47:43.380
There's also a bunch of JavaScript APIs that
allow you to go and really get program adit

00:47:43.380 --> 00:47:48.830
with your App Cache. So that you can update
the application at specific times, maybe you

00:47:48.830 --> 00:47:53.440
only want to update it when the user first
starts the application. Maybe you want to

00:47:53.440 --> 00:47:58.040
ask the user before you update it because
you're making some major changes or a breaking

00:47:58.040 --> 00:48:02.809
change or something like that. So, you've
got to set a JavaScript APIs that really allow

00:48:02.809 --> 00:48:10.900
you to go through and be much more powerful
with App Cache. So, with that, I'm going to

00:48:10.900 --> 00:48:14.540
pass it over to Ernest to talk about some
of the tools and resources.

00:48:14.540 --> 00:48:19.390
&gt;&gt; DELGADO: Thanks, Pete. I'm going to go
really quick through this. And now that we've

00:48:19.390 --> 00:48:25.700
seen APIs that we can use in our web app,
we may want to start coding and--but not doing

00:48:25.700 --> 00:48:32.650
it from scratch. So, it's more mentioning
some tools here that will help us to do that.

00:48:32.650 --> 00:48:39.089
The first one is Boilerplate. With Boilerplate,
you can go there and get the files that actually

00:48:39.089 --> 00:48:44.319
would use--you would use as a template for
your app and it's at a different level. So,

00:48:44.319 --> 00:48:50.680
there's like an index.html with the all the
header and the basic step that you need. So,

00:48:50.680 --> 00:48:56.329
you needn't to worry about it. It also have--at
JavaScript level has like the includes that

00:48:56.329 --> 00:49:02.440
if you want jQuery or the analytics snippet
in your--in your page, you have that there

00:49:02.440 --> 00:49:06.931
as well. And it sees as level there are many
tweaks as well that you have--as like the

00:49:06.931 --> 00:49:11.940
recent CSS, you have the template there or
for instance, Media Queries. Who in the audience

00:49:11.940 --> 00:49:19.280
knows Media Queries? Not many. It's just like
a syntax to make your layout of the page change

00:49:19.280 --> 00:49:24.650
depending on the device that is looking at
your page, so if it's a mobile browser, you

00:49:24.650 --> 00:49:28.999
can say, "Okay, from this width to this other
width, change the layout to adapt to that

00:49:28.999 --> 00:49:34.779
screen." Also, there's a list of what we call
Polyfills, because when you started calling

00:49:34.779 --> 00:49:42.420
these APIs, you may not have the support in
all browsers that you want to support. And

00:49:42.420 --> 00:49:48.150
I think it would be supported twice. But then,
this Polyfills are kind of a JavaScript scene

00:49:48.150 --> 00:49:53.229
that it's looking for a work around. It's
actually taking care of that work around 100%.

00:49:53.229 --> 00:50:00.219
So, the perfect Polyfill lets you write that
feature in modern syntax and it's going to--the

00:50:00.219 --> 00:50:05.940
Polyfill's going to manage that to make that
feature work in the browser. So, it's possible

00:50:05.940 --> 00:50:12.710
that not all the features have fallbacks for
all browsers, so that's one in your code;

00:50:12.710 --> 00:50:20.010
you should maybe do the--like some fallback
case or a graceful degradation. But instead

00:50:20.010 --> 00:50:24.089
of looking for the browser version, which
is not a very reliable technique, it's better

00:50:24.089 --> 00:50:29.180
to do like feature detection. And for that,
you should use, or you can use Modernizr,

00:50:29.180 --> 00:50:32.880
which has this necessary syntax that you can
put in your if statements and if that feature

00:50:32.880 --> 00:50:39.329
is supported, do something, otherwise do the
fallback. If you want to take a look at the

00:50:39.329 --> 00:50:43.660
growing support that all browsers are having
now with HTML5 features, go to this site,

00:50:43.660 --> 00:50:49.000
it's really cool, it has all the tables and
version numbers and green if that feature

00:50:49.000 --> 00:50:54.319
supported, caniuse.com. And another interesting
tool that we've been using for a long time,

00:50:54.319 --> 00:50:57.999
maybe another browser is this kind of debugging
tool in the case of Chrome is called like

00:50:57.999 --> 00:51:00.819
The Chrome Developer Tools. And tomorrow,
I think...

00:51:00.819 --> 00:51:02.140
&gt;&gt; LEPAGE: Today--this...
&gt;&gt; DELGADO: Oh, today?

00:51:02.140 --> 00:51:04.339
&gt;&gt; LEPAGE: Yes.
&gt;&gt; DELGADO: Okay. So, today, there's a talk

00:51:04.339 --> 00:51:08.769
from [INDISTINCT] going through all the details
that the things you can do actually in this

00:51:08.769 --> 00:51:12.620
debugger that there are things that I even
didn't know. And the cool stuff here is that,

00:51:12.620 --> 00:51:18.920
it's also--it has the capabilities to debug
features like Web Workers or App Cache that

00:51:18.920 --> 00:51:22.690
it was very difficult to debug if that wasn't
supported because Web Workers has a separate

00:51:22.690 --> 00:51:29.190
JavaScript file. So, these debuggers actually
prepared for that. Some resources that we

00:51:29.190 --> 00:51:37.789
are maintaining for with sample code, tutorials,
demos on html5rocks.com. A couple of books

00:51:37.789 --> 00:51:45.019
that are quite interesting, Bruce Lawson and
Mark Pilgrim, and I think that's it with app

00:51:45.019 --> 00:51:49.200
resources. So, I'm going to pass it over,
Pete to wrap up the presentation. So, all

00:51:49.200 --> 00:51:53.829
can go wait.
&gt;&gt; LEPAGE: Awesome. So I'll just talk quickly

00:51:53.829 --> 00:51:58.499
about Chrome Frame. If you've not played with
Chrome Frame before, super useful utility,

00:51:58.499 --> 00:52:03.979
if you're stuck on older versions of IE for
any specific reason, Chrome Frame will allow

00:52:03.979 --> 00:52:12.109
you to run HTML5 applications within Chrome
Frame. So, we've talked about some of the

00:52:12.109 --> 00:52:19.400
great APIs and application level support that
HTML5 gives you. And we've also talked a lot

00:52:19.400 --> 00:52:26.099
about some of the really cool rich user experience
stuff that we can really start building with

00:52:26.099 --> 00:52:31.900
HTML5. I'm really excited to see what you
guys start building in terms of web applications.

00:52:31.900 --> 00:52:37.029
This is really our opportunity to change the
Web from being a bunch of web pages and websites

00:52:37.029 --> 00:52:43.260
to really being web applications that really
just change the way we think about the Web

00:52:43.260 --> 00:52:47.380
and what we do on it. So, I encourage you
guys to go start playing with this stuff and

00:52:47.380 --> 00:52:52.859
go using that. There's a couple of sessions
today. There's the Free Cake Session that

00:52:52.859 --> 00:52:58.900
also goes into HTML5 development with the
Chrome Developer Tools, the two hour hands-on

00:52:58.900 --> 00:53:04.210
lab. Really cool, as well as the Building
and Publishing Apps with the Chrome Web Store

00:53:04.210 --> 00:53:11.009
at four. The rest of the week, whole bunch
of really awesome stuff. If you make it to

00:53:11.009 --> 00:53:16.769
one session that is my favorite, the Showcase
for Web Devs, wow and a how really, really

00:53:16.769 --> 00:53:23.450
cool session. I've seen some of the demos
these guys are doing, blow your pants off.

00:53:23.450 --> 00:53:28.229
With that, I want to say thank you guys very
much. Please go fill out an evaluation form.

00:53:28.229 --> 00:53:33.289
And thank you. We'll open it up to questions
now, but I know that some of you seemed to

00:53:33.289 --> 00:53:37.180
be really hungry. So, feel free. But we'll
stick around and answer any questions you

00:53:37.180 --> 00:53:38.799
want. Thank you.

