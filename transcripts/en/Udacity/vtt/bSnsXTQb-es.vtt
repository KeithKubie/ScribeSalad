WEBVTT
Kind: captions
Language: en

00:00:00.130 --> 00:00:04.540
So let's see if we can do some DRam
access scheduling to take advantage

00:00:04.540 --> 00:00:07.180
of the fast page access
that we can have.

00:00:07.180 --> 00:00:09.960
let's assume we have a DRam
memory that has 32,

00:00:09.960 --> 00:00:13.860
one bit arrays,
just like the one we have seen before.

00:00:13.860 --> 00:00:16.580
Each array is one megabyte.

00:00:16.580 --> 00:00:21.030
And it's organized as
two to the tenth rows,

00:00:21.030 --> 00:00:24.740
times two to the tenth bits per row.

00:00:24.740 --> 00:00:30.336
Each array is a 16 megabit array,
organized as two to the 12th rows,

00:00:30.336 --> 00:00:35.318
which is 4,096 rows,
times two to the 12th bits per row.

00:00:35.318 --> 00:00:40.573
And the 24 bit address,
that we feed to this memory where bits

00:00:40.573 --> 00:00:45.531
are numbered zero to 23 is
thus divided by the into

00:00:45.531 --> 00:00:50.685
a 12 bit row address which is
the upper bits of the address and

00:00:50.685 --> 00:00:56.930
the address which is the lower
to bits of the address.

00:00:56.930 --> 00:01:00.490
Of course the processor,
when it issues this 24 bit

00:01:00.490 --> 00:01:04.519
physical address wants to access
a 32 bit memory location.

00:01:04.519 --> 00:01:07.040
Each ship is fed this address, and

00:01:07.040 --> 00:01:11.340
the 32 chips together
represent a 32 bit memory.

00:01:11.340 --> 00:01:14.440
So one chip, for example,
might hold bit number 7,

00:01:14.440 --> 00:01:19.210
from all the words in
the 16 megaword memory.

00:01:19.210 --> 00:01:24.480
Let's say we have Cache Misses currently
pending for the following addresses.

00:01:24.480 --> 00:01:28.800
Let's assume that it takes ten
nanoseconds to open a page,

00:01:28.800 --> 00:01:32.950
that it takes two nanoseconds to read
something from the row buffer once

00:01:32.950 --> 00:01:37.120
the page is open, and
five nanoseconds to close a page.

00:01:37.120 --> 00:01:43.560
These operations, how long do they take,
if we do them in this particular order,

00:01:43.560 --> 00:01:47.890
and how long do they take if we
are allowed to reorder them so

00:01:47.890 --> 00:01:49.600
that the time gets reduced?

