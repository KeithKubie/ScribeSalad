WEBVTT
Kind: captions
Language: en

00:00:08.560 --> 00:00:08.950
RETO MEIER: Hi.

00:00:08.950 --> 00:00:11.340
My name is Reto Meier, and I'm
the tech lead for Google's

00:00:11.340 --> 00:00:13.580
Android Developer
Relations team.

00:00:13.580 --> 00:00:16.410
This Efficient Data Transfers
DevByte focuses on how you can

00:00:16.410 --> 00:00:18.990
use prefetching to implement
the big cookie model of

00:00:18.990 --> 00:00:21.250
efficient data transfers and
improve your app's user

00:00:21.250 --> 00:00:24.720
experience by reducing latency
and improving battery life.

00:00:24.720 --> 00:00:27.900
In previous Efficient Data
Transfers DevBytes, I looked

00:00:27.900 --> 00:00:30.020
at the cell radio state machine
and examined ways to

00:00:30.020 --> 00:00:32.540
analyze apps' data transfer
profiles to uncover

00:00:32.540 --> 00:00:36.060
anti-patterns, such as these
short, intermittent peaks and

00:00:36.060 --> 00:00:38.840
consecutive but non-overlapping
downloads.

00:00:38.840 --> 00:00:41.290
Having discovered potential
problems in this episode, I'll

00:00:41.290 --> 00:00:44.310
look at how to use prefetching
to solve some of them.

00:00:44.310 --> 00:00:46.650
We know that carriers adjust
the timings of cell radio

00:00:46.650 --> 00:00:49.320
state machine to compromise
between data transfer latency

00:00:49.320 --> 00:00:50.160
and battery drain.

00:00:50.160 --> 00:00:52.520
Within our app, we want to
create the perfect user

00:00:52.520 --> 00:00:55.970
experience that actually sits
here, at the sweet spot of

00:00:55.970 --> 00:00:58.850
nonexistent latency and
virtually no battery impact.

00:00:58.850 --> 00:01:01.130
Is such a thing even possible?

00:01:01.130 --> 00:01:02.400
Yes, it is.

00:01:02.400 --> 00:01:04.890
Prefetching offers the best of
both worlds, an effective way

00:01:04.890 --> 00:01:07.570
to reduce battery trained by
reducing the number of data

00:01:07.570 --> 00:01:10.110
transfers and minimizing the
in-app latency triggered when

00:01:10.110 --> 00:01:12.590
users have to wait for downloads
to complete before

00:01:12.590 --> 00:01:15.110
performing an action
or viewing data.

00:01:15.110 --> 00:01:17.300
By downloading all of the data
that they're likely to need

00:01:17.300 --> 00:01:19.790
for the current session in a
single burst, over a single

00:01:19.790 --> 00:01:22.960
connection at full capacity, you
can significantly reduce

00:01:22.960 --> 00:01:25.390
the number of radio
activations.

00:01:25.390 --> 00:01:28.090
Your challenge is figuring out
what you need to download

00:01:28.090 --> 00:01:30.850
ahead of time so that you can
present the user with exactly

00:01:30.850 --> 00:01:33.970
what they need, when they need
it, without simply downloading

00:01:33.970 --> 00:01:36.350
everything and wasting battery
power and bandwidth,

00:01:36.350 --> 00:01:38.720
downloading data that's
never used.

00:01:38.720 --> 00:01:41.296
How aggressively you prefetch
depends on the size of the

00:01:41.296 --> 00:01:44.610
data being downloaded and the
likelihood of it being used.

00:01:44.610 --> 00:01:47.495
As a rough guide for a typical
cell radio connected over 3G,

00:01:47.495 --> 00:01:49.760
you can prefetch around
six seconds.

00:01:49.760 --> 00:01:53.430
That's about one to two megs
worth of data, if that data

00:01:53.430 --> 00:01:56.035
has a 50% chance of being used
within the current session.

00:01:56.035 --> 00:01:59.330
Now at that point, the likely
cost of downloading any unused

00:01:59.330 --> 00:02:01.650
data matches the substantial
savings lost by not

00:02:01.650 --> 00:02:03.860
downloading that data
to begin with.

00:02:03.860 --> 00:02:06.000
But of course, not every
network transfers

00:02:06.000 --> 00:02:07.230
data at the same rate.

00:02:07.230 --> 00:02:09.440
So the equation will change
based on the speed of

00:02:09.440 --> 00:02:13.380
transfers and the efficiency of
the cell radio technology.

00:02:13.380 --> 00:02:16.960
This code sets a default value
for 3G networks and increases

00:02:16.960 --> 00:02:20.220
or decreases the size of the
prefetch cache based on the

00:02:20.220 --> 00:02:22.470
speed and cost of
each network.

00:02:22.470 --> 00:02:25.260
Note that we want to prefetch
significantly more data on

00:02:25.260 --> 00:02:26.570
faster 4G networks.

00:02:26.570 --> 00:02:28.710
And that's both to account for
the larger amount of data that

00:02:28.710 --> 00:02:31.490
can be downloaded within the
same time period, but also

00:02:31.490 --> 00:02:32.760
because of the higher
battery cost

00:02:32.760 --> 00:02:34.360
associated with these radios.

00:02:34.360 --> 00:02:37.280
So that makes it even more
important that we avoid extra

00:02:37.280 --> 00:02:40.070
straight transitions
whenever we can.

00:02:40.070 --> 00:02:42.373
But if networks are different,
so are our apps.

00:02:42.373 --> 00:02:45.580
And as the likelihood of the
data being used increases, so

00:02:45.580 --> 00:02:47.550
does the amount of data it's
worth prefetching.

00:02:47.550 --> 00:02:50.580
So it's important to understand
both what data your

00:02:50.580 --> 00:02:53.100
users are likely to use and
what your app's average

00:02:53.100 --> 00:02:54.890
session length is.

00:02:54.890 --> 00:02:57.060
A good starting point is to
expect session lengths of

00:02:57.060 --> 00:02:58.280
around two to five minutes.

00:02:58.280 --> 00:03:00.640
So large downloads, such as
video files, should be

00:03:00.640 --> 00:03:03.180
downloaded in chunks at
regular intervals.

00:03:03.180 --> 00:03:06.190
Using the same logic for a music
player, it would be good

00:03:06.190 --> 00:03:09.120
practice to maintain a buffer
of one song, in addition to

00:03:09.120 --> 00:03:12.250
the one already being played,
rather than prefetching, say,

00:03:12.250 --> 00:03:14.520
a whole album or playlist.

00:03:14.520 --> 00:03:17.360
This mitigates the risk of
wasting significant bandwidth

00:03:17.360 --> 00:03:19.660
and battery life if your user
stops listening halfway

00:03:19.660 --> 00:03:21.220
through a song.

00:03:21.220 --> 00:03:23.050
You can take a similar approach
when streaming by

00:03:23.050 --> 00:03:26.300
using HTTP live streaming,
which transmits audio in

00:03:26.300 --> 00:03:28.630
bursts, rather than maintaining
a continuous

00:03:28.630 --> 00:03:32.000
stream that will keep the
radio constantly active.

00:03:32.000 --> 00:03:35.240
If we look at something like a
news app, things get a little

00:03:35.240 --> 00:03:36.270
more complicated.

00:03:36.270 --> 00:03:39.240
A typical use case for a music
player is to find an album or

00:03:39.240 --> 00:03:41.810
playlist, hit play,
and then listen.

00:03:41.810 --> 00:03:43.880
So you have a really good
chance of knowing what's

00:03:43.880 --> 00:03:47.330
coming next and a reasonable
expectation for what your user

00:03:47.330 --> 00:03:48.010
is going to do.

00:03:48.010 --> 00:03:50.080
And they're going to have a
reasonable expectation that

00:03:50.080 --> 00:03:52.200
there's going to be a start-up
latency if they

00:03:52.200 --> 00:03:53.920
select a new track.

00:03:53.920 --> 00:03:56.950
Now in contrast, the browsing
path when you're using

00:03:56.950 --> 00:04:00.070
something like a news reader is
much less predictable, with

00:04:00.070 --> 00:04:02.310
readers potentially swiping
between dozens of different

00:04:02.310 --> 00:04:05.190
categories and jumping between
hundreds of articles.

00:04:05.190 --> 00:04:08.370
In many ways, a news reader
behaves a lot like a browser,

00:04:08.370 --> 00:04:10.440
so your approach to prefetching
can utilize some

00:04:10.440 --> 00:04:11.910
of the same techniques browsers

00:04:11.910 --> 00:04:14.120
use to improve speeds.

00:04:14.120 --> 00:04:16.769
Now, the most naive solution is
to download the headlines

00:04:16.769 --> 00:04:19.880
for a category once it's been
selected and download the

00:04:19.880 --> 00:04:22.310
related thumbnails when they
scroll into view, and then

00:04:22.310 --> 00:04:24.260
each of the articles once
it's been clicked.

00:04:24.260 --> 00:04:27.620
Now this forces the radio to
remain active for basically

00:04:27.620 --> 00:04:29.880
the entire session as you're
switching categories,

00:04:29.880 --> 00:04:32.430
scrolling headlines, and reading
different articles.

00:04:32.430 --> 00:04:34.940
And as a bonus, each click is
going to have that latency

00:04:34.940 --> 00:04:38.100
associated with it, as it has
to download and process and

00:04:38.100 --> 00:04:41.180
present the data that
you've selected.

00:04:41.180 --> 00:04:43.540
A much better approach is
prefetching a reasonable

00:04:43.540 --> 00:04:46.640
amount of data at start-up and
prioritizing the first set of

00:04:46.640 --> 00:04:49.040
news headlines and thumbnails
which are likely to be

00:04:49.040 --> 00:04:51.790
displayed, and continuing on
with the remaining headlines

00:04:51.790 --> 00:04:54.710
and thumbnails and also,
article text.

00:04:54.710 --> 00:04:57.120
Now it's also important to
ensure that your prefetching

00:04:57.120 --> 00:05:00.010
doesn't delay the app start-up
by making the app wait for the

00:05:00.010 --> 00:05:01.530
prefetch to complete
fully before

00:05:01.530 --> 00:05:03.190
letting the user interact.

00:05:03.190 --> 00:05:05.950
The worst example of this is
apps that display a splash

00:05:05.950 --> 00:05:08.390
screen until a ping
or download or

00:05:08.390 --> 00:05:10.630
process cycle is completed.

00:05:10.630 --> 00:05:12.800
So be sure to process all
of your downloads in the

00:05:12.800 --> 00:05:15.010
background, using IntentServices
and libraries

00:05:15.010 --> 00:05:17.830
like Volley to help process that
data progressively and

00:05:17.830 --> 00:05:19.930
concurrently and therefore
minimize

00:05:19.930 --> 00:05:22.390
that start-up latency.

00:05:22.390 --> 00:05:25.770
The real trick is being able
to accurately guess which

00:05:25.770 --> 00:05:27.900
articles each user is
likely to read and

00:05:27.900 --> 00:05:29.720
prefetch only those.

00:05:29.720 --> 00:05:32.690
Now one approach is a
breadth-first search, assuming

00:05:32.690 --> 00:05:34.810
that users are more likely
to read articles

00:05:34.810 --> 00:05:35.770
via the current one.

00:05:35.770 --> 00:05:38.580
Or you can go depth-first and
bank on them reading lots of

00:05:38.580 --> 00:05:40.420
articles on a given topic.

00:05:40.420 --> 00:05:44.140
Now a better approach
is to use science.

00:05:44.140 --> 00:05:46.660
Measure how your content is
actually being consumed, and

00:05:46.660 --> 00:05:49.080
use that to inform your
decisions dynamically and on a

00:05:49.080 --> 00:05:50.880
per-user basis.

00:05:50.880 --> 00:05:53.300
You can start by keeping track
of the metadata associated

00:05:53.300 --> 00:05:55.720
with the content read by each
user, such as the categories

00:05:55.720 --> 00:05:56.990
or authors.

00:05:56.990 --> 00:05:59.350
You can widen the scope further
by incorporating the

00:05:59.350 --> 00:06:02.050
content that their friends use
by integrating a social graph

00:06:02.050 --> 00:06:03.450
like Google+.

00:06:03.450 --> 00:06:05.670
And finally, you can aggregate
all of this information

00:06:05.670 --> 00:06:09.070
together across all of your
users and discover what's

00:06:09.070 --> 00:06:11.005
being used by a lot of people.

00:06:11.005 --> 00:06:13.505
Now taken together, you can form
a sophisticated picture

00:06:13.505 --> 00:06:16.200
of typical and expected usage
patterns of your app,

00:06:16.200 --> 00:06:17.770
customized for each user.

00:06:17.770 --> 00:06:20.480
And that allows you to make an
intelligent choice over which

00:06:20.480 --> 00:06:22.355
data you should prefetch.

00:06:22.355 --> 00:06:25.240
If that all sounds like a bit
too much work, then for some

00:06:25.240 --> 00:06:28.210
apps, it may even make sense to
simply prefetch everything,

00:06:28.210 --> 00:06:30.800
effectively providing support
for a fully offline

00:06:30.800 --> 00:06:32.210
experience.

00:06:32.210 --> 00:06:34.190
This can be really effective
for apps with data that

00:06:34.190 --> 00:06:35.976
doesn't change very often,
such as magazines.

00:06:35.976 --> 00:06:38.480
But you risk spending
significant bandwidth and

00:06:38.480 --> 00:06:41.900
battery life downloading content
that's never used, so

00:06:41.900 --> 00:06:43.560
it should be done
with caution.

00:06:43.560 --> 00:06:46.180
One way to mitigate that cost
associated with downloading

00:06:46.180 --> 00:06:48.870
more than five minutes worth
of data is to schedule the

00:06:48.870 --> 00:06:51.220
download to occur at a time
when bandwidth and battery

00:06:51.220 --> 00:06:53.840
life isn't important,
specifically when the device

00:06:53.840 --> 00:06:57.590
is charging and connected to
Wi-Fi, as determined here by

00:06:57.590 --> 00:07:00.720
using the Connectivity Manager
and Battery Manager.

00:07:00.720 --> 00:07:02.250
And as long as you're monitoring
the device state,

00:07:02.250 --> 00:07:05.080
why not take it a step further
and track the current activity

00:07:05.080 --> 00:07:06.310
of the user?

00:07:06.310 --> 00:07:10.160
Using the new location-based
services Activity Recognition

00:07:10.160 --> 00:07:12.380
API, you can modify the
aggressiveness of your

00:07:12.380 --> 00:07:15.110
prefetching based on what
the user is doing.

00:07:15.110 --> 00:07:17.770
In this example, we're going to
increase the amount that we

00:07:17.770 --> 00:07:21.640
prefetch when the user has the
app open and standing still,

00:07:21.640 --> 00:07:23.500
the assumption being that
they're more likely to be

00:07:23.500 --> 00:07:25.400
browsing articles while
stationary than if they're

00:07:25.400 --> 00:07:27.000
riding a bike.

00:07:27.000 --> 00:07:29.170
Now so far, we've talked about
the case where the app is

00:07:29.170 --> 00:07:31.080
active in the foreground, but
it's worth considering the

00:07:31.080 --> 00:07:32.060
background case too.

00:07:32.060 --> 00:07:35.005
Should we prefetch data when the
app is in the background?

00:07:35.005 --> 00:07:37.620
Well, generally speaking, it's
better practice to delay your

00:07:37.620 --> 00:07:40.360
downloads until the app is
open, though this will

00:07:40.360 --> 00:07:42.320
increase your start-up
latency.

00:07:42.320 --> 00:07:44.460
A good approach is to use Google
Cloud Messaging to

00:07:44.460 --> 00:07:46.970
notify your app of updates
available on the server.

00:07:46.970 --> 00:07:49.850
That eliminates the need to
poll, to check for updates,

00:07:49.850 --> 00:07:52.280
and provides a channel to notify
your app of exactly

00:07:52.280 --> 00:07:54.790
what it should be requesting
at start-up.

00:07:54.790 --> 00:07:57.280
Typically, you'll use GCM as a
way to initiate client-side

00:07:57.280 --> 00:07:59.190
notifications without
the app needing to

00:07:59.190 --> 00:08:00.530
initiate a separate download.

00:08:00.530 --> 00:08:03.160
But where it makes sense, you
can use this same mechanism to

00:08:03.160 --> 00:08:05.130
trigger background updates.

00:08:05.130 --> 00:08:08.000
I'll cover GCM in more detail,
as well as topics including

00:08:08.000 --> 00:08:11.250
batching, bundling transfers,
and using SyncAdapters, in

00:08:11.250 --> 00:08:14.270
future episodes of the Efficient
Data Transfers

00:08:14.270 --> 00:08:15.520
DevBytes series.

