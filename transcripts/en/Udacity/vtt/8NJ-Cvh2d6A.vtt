WEBVTT
Kind: captions
Language: en

00:00:00.320 --> 00:00:03.880
In this demo, we allow the user to
move the ball around by flicking it.

00:00:05.070 --> 00:00:06.710
Here's how we define a flick.

00:00:06.710 --> 00:00:11.280
If a touch or click starts inside
the ball, then we've started a flick.

00:00:11.280 --> 00:00:14.380
When the touch or click is released,
then we give the ball some velocity,

00:00:14.380 --> 00:00:17.731
proportional to the vector between where
the flick started and where it ended.

00:00:21.341 --> 00:00:24.160
Let's check out the demo in the course
code to see how this is done.

00:00:25.230 --> 00:00:28.610
So here we are inside our
BouncingBall class, and

00:00:28.610 --> 00:00:32.940
we've overridden the touchDown
method from InputProcessor.

00:00:32.940 --> 00:00:36.030
The first thing we need to do,
is to translate the point that the user

00:00:36.030 --> 00:00:39.900
touched from screen coordinates
to world coordinates.

00:00:39.900 --> 00:00:43.370
Since the viewport handles
the projection from world coordinates to

00:00:43.370 --> 00:00:48.020
screen coordinates, it also has an
unproject method that does the opposite.

00:00:48.020 --> 00:00:51.630
Next, we use the dst method on Vector2,

00:00:51.630 --> 00:00:54.980
to see if the distance between
the position of the ball and

00:00:54.980 --> 00:00:58.200
the worldClick is less than
the radius of the ball.

00:00:58.200 --> 00:01:01.720
If the touch is inside the radius,
then we start a flick.

00:01:01.720 --> 00:01:04.720
And then we save off
the coordinates of the touch.

00:01:04.720 --> 00:01:07.220
We've also overridden touchUp.

00:01:07.220 --> 00:01:08.370
When a touch is released,

00:01:08.370 --> 00:01:13.658
if we were in the middle of flicking
a ball, we unset that flag.

00:01:13.658 --> 00:01:16.900
We unproject to the location
where the touch was released

00:01:16.900 --> 00:01:19.120
from screen coordinates
to world coordinates.

00:01:19.120 --> 00:01:23.250
We compute vector between where the
flick started to where the flick ended,

00:01:23.250 --> 00:01:25.610
and then we add that vector
to the velocity of the ball,

00:01:25.610 --> 00:01:27.365
multiplied by this FLICK_MULTIPLIER.

