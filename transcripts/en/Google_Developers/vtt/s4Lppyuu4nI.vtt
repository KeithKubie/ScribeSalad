WEBVTT
Kind: captions
Language: en

00:00:02.801 --> 00:00:04.701
Lisbakken:
All right. Hello, everyone.

00:00:04.701 --> 00:00:06.033
My name's Ben Lisbakken,

00:00:06.033 --> 00:00:08.133
and I'm an engineer
at Google.

00:00:08.133 --> 00:00:10.634
And it looks like you guys
have all made it to my session

00:00:10.634 --> 00:00:14.334
on "Fun Hacks
and Cool JavaScript."

00:00:14.334 --> 00:00:16.133
So what I'm going to do
is I'm going to talk about

00:00:16.133 --> 00:00:21.300
my process in creating
the Google AJAX API Playground.

00:00:21.300 --> 00:00:23.133
What I really wanted to do
is just talk about

00:00:23.133 --> 00:00:25.200
some of the techniques
that I used to create it

00:00:25.200 --> 00:00:27.567
and some of the things that
I've learned along the way

00:00:27.567 --> 00:00:30.033
that I thought were, you know,
really important things

00:00:30.033 --> 00:00:33.067
that I learned
that I'd like to share.

00:00:33.067 --> 00:00:35.100
So let's jump
right into the outline.

00:00:35.100 --> 00:00:38.100
First I'll show you guys
what the AJAX API Playground is,

00:00:38.100 --> 00:00:41.434
since I'm sure all of you
don't know exactly what it is.

00:00:41.434 --> 00:00:43.501
Then I'll go into
some JavaScript,

00:00:43.501 --> 00:00:46.801
so I'll show some intermediate
and advanced techniques

00:00:46.801 --> 00:00:49.400
that you can use
in JavaScript.

00:00:49.400 --> 00:00:52.334
After that, I'll talk about some
of the cool hacks that I did

00:00:52.334 --> 00:00:53.567
in the Playground--

00:00:53.567 --> 00:00:56.100
some stuff that I really
had a lot of fun doing.

00:00:56.100 --> 00:00:58.000
Then I'll go into XSRF,

00:00:58.000 --> 00:01:00.067
which is a security
vulnerability--

00:01:00.067 --> 00:01:02.267
vulnerability,
excuse me.

00:01:02.267 --> 00:01:04.167
And after that
I'll talk about

00:01:04.167 --> 00:01:06.601
front-end web performance.

00:01:06.601 --> 00:01:09.901
So let's take a look at
the AJAX API Playground.

00:01:09.901 --> 00:01:11.334
What is it?

00:01:11.334 --> 00:01:13.033
It's an interactive
JavaScript code editor

00:01:13.033 --> 00:01:15.067
that allows you to edit code

00:01:15.067 --> 00:01:17.400
and then run it
on the exact same page.

00:01:17.400 --> 00:01:18.968
Its primary use right now

00:01:18.968 --> 00:01:21.501
is for showing
Google AJAX API examples.

00:01:21.501 --> 00:01:24.467
However, it's an open source
framework that I created,

00:01:24.467 --> 00:01:28.000
so you can really use it
for any JavaScript code

00:01:28.000 --> 00:01:29.934
that you want to show.

00:01:29.934 --> 00:01:33.667
You can also edit HTML and CSS
in addition to JavaScript.

00:01:33.667 --> 00:01:36.300
That's a recent feature
that I added.

00:01:36.300 --> 00:01:37.767
And why did I make it?

00:01:37.767 --> 00:01:40.534
I made it because
when I'm learning APIs,

00:01:40.534 --> 00:01:43.300
it's really difficult to go
through the documentation

00:01:43.300 --> 00:01:45.434
and figure out exactly
what's going on.

00:01:45.434 --> 00:01:49.067
It's also really hard to find
what you can do with an API

00:01:49.067 --> 00:01:50.567
just by looking
at the documentation.

00:01:50.567 --> 00:01:52.934
So samples are really king,
for me.

00:01:52.934 --> 00:01:55.767
I believe that if you
look through ten samples

00:01:55.767 --> 00:01:58.167
then you'll have a better idea
of what you want to do.

00:01:58.167 --> 00:01:59.534
And, in addition,

00:01:59.534 --> 00:02:01.400
by looking through
the actual code,

00:02:01.400 --> 00:02:05.200
you'll have a better idea
of how to accomplish it.

00:02:05.200 --> 00:02:08.133
So let's go ahead and
take a look at the Playground.

00:02:08.133 --> 00:02:11.367
That is huge.
Let's see.

00:02:11.367 --> 00:02:13.634
Can you guys all--can you guys
see that pretty well?

00:02:13.634 --> 00:02:16.434
In the back?
Can you guys see the code?

00:02:16.434 --> 00:02:18.801
Anyone back there?
Looks good?

00:02:18.801 --> 00:02:21.067
Okay, so here's
the Playground.

00:02:21.067 --> 00:02:23.634
On the left hand side
is the pick div.

00:02:23.634 --> 00:02:28.467
And this allows you to select
from various JavaScript APIs

00:02:28.467 --> 00:02:29.767
that Google offers,

00:02:29.767 --> 00:02:31.467
and see some samples
on them.

00:02:31.467 --> 00:02:34.200
So right here I am going
to list some blogs.

00:02:34.200 --> 00:02:36.400
You'll see the codes over here
on the right-hand side.

00:02:36.400 --> 00:02:37.567
It's a little bit squished

00:02:37.567 --> 00:02:39.033
because it wasn't meant
for a projector.

00:02:39.033 --> 00:02:41.067
But down here
is the output div,

00:02:41.067 --> 00:02:43.834
and it shows the output
of the sample.

00:02:43.834 --> 00:02:45.434
Let's take a look
at another sample--

00:02:45.434 --> 00:02:46.801
a calendar sample.

00:02:46.801 --> 00:02:49.167
So this is just
a simple sample

00:02:49.167 --> 00:02:51.767
for showing the events
from a calendar.

00:02:51.767 --> 00:02:53.033
And in this case,

00:02:53.033 --> 00:02:55.734
we're looking at
the Google Developer calendar,

00:02:55.734 --> 00:02:59.934
so you can see that one of
the events is this conference.

00:02:59.934 --> 00:03:03.434
Let's go back up
to a Translate example.

00:03:03.434 --> 00:03:06.501
Up here you'll see
it's just really simple.

00:03:06.501 --> 00:03:08.167
Take some text,
it's in Spanish,

00:03:08.167 --> 00:03:09.601
and it turns it to English.

00:03:09.601 --> 00:03:11.767
So let's look at the code.

00:03:11.767 --> 00:03:14.968
You'll see here we've got
the original text,

00:03:14.968 --> 00:03:16.167
the Spanish,

00:03:16.167 --> 00:03:18.267
and then down here
is this block of code

00:03:18.267 --> 00:03:19.868
for translating it.

00:03:19.868 --> 00:03:21.767
So what if I wanted
to edit this example?

00:03:21.767 --> 00:03:23.968
I could go ahead and throw
an alert in here.

00:03:23.968 --> 00:03:26.334
I'm just going to alert
the number 1.

00:03:26.334 --> 00:03:28.767
And come down
and click "Run".

00:03:28.767 --> 00:03:30.801
And there you see
it prints out "1"

00:03:30.801 --> 00:03:32.801
just like i wanted it to.

00:03:32.801 --> 00:03:36.200
So the reason why I created
the Playground like this

00:03:36.200 --> 00:03:38.534
is because when you're looking
through sample code,

00:03:38.534 --> 00:03:42.634
it's really hard to go
from seeing the sample code

00:03:42.634 --> 00:03:44.901
to getting to the point where
you're actually going to be

00:03:44.901 --> 00:03:47.267
editing it and doing
what you want to do with it.

00:03:47.267 --> 00:03:49.167
So the way this format works,

00:03:49.167 --> 00:03:52.000
it makes it a lot easier
than seeing a sample,

00:03:52.000 --> 00:03:53.567
copying the code
to a new document,

00:03:53.567 --> 00:03:55.000
putting it on your server,

00:03:55.000 --> 00:03:57.067
and then actually being able
to play around with edit it--

00:03:57.067 --> 00:03:58.334
with editing it.

00:03:58.334 --> 00:03:59.834
Instead, with the Playground,

00:03:59.834 --> 00:04:01.501
you just jump right in,
see a sample that you like,

00:04:01.501 --> 00:04:02.901
maybe you want to tweak it,

00:04:02.901 --> 00:04:05.234
see if it can possibly do
what you're trying to do,

00:04:05.234 --> 00:04:07.067
and then run with that.

00:04:07.067 --> 00:04:09.801
So what happens
if you want to debug?

00:04:09.801 --> 00:04:12.000
Well, I added some features
in there for debugging.

00:04:12.000 --> 00:04:14.067
So right here,
I just added a breakpoint

00:04:14.067 --> 00:04:15.701
on line 11.

00:04:15.701 --> 00:04:19.000
I'm going to go ahead
and click "Debug Code"

00:04:19.000 --> 00:04:22.501
and it's now going
to pause it on line 11.

00:04:22.501 --> 00:04:24.234
And this right here
is my continue button.

00:04:24.234 --> 00:04:26.934
I can continue through
executing the code,

00:04:26.934 --> 00:04:31.467
or if I want, I can open up
Firebug Lite in the bottom,

00:04:31.467 --> 00:04:33.400
and I can actually
log one of my variables.

00:04:33.400 --> 00:04:35.200
So I think, up here,
if you look,

00:04:35.200 --> 00:04:38.767
I have a variable in this
function called "content".

00:04:38.767 --> 00:04:41.868
So...come back down here
and see

00:04:41.868 --> 00:04:44.067
what "content" is equal to.

00:04:44.067 --> 00:04:46.000
And sure enough,
we get a div.

00:04:46.000 --> 00:04:48.234
If you go look at the top,

00:04:48.234 --> 00:04:51.267
"content" is equal to a div
that we have grabbed.

00:04:51.267 --> 00:04:52.834
So that's how you debug.

00:04:52.834 --> 00:04:54.467
Well, let me show you
the quick--

00:04:54.467 --> 00:04:55.801
finishing through
the breakpoint.

00:04:55.801 --> 00:04:57.667
It, sure enough,
goes through,

00:04:57.667 --> 00:05:01.667
calls the alert, and then
it will finish the translation.

00:05:01.667 --> 00:05:04.834
So that's how you edit code
and debug it.

00:05:04.834 --> 00:05:07.067
What if you edit
some code substantially

00:05:07.067 --> 00:05:08.667
and you want
to hold onto it for later?

00:05:08.667 --> 00:05:10.767
There's a save feature.

00:05:10.767 --> 00:05:15.567
So you can go through
and you can--"My IO SAMPLE".

00:05:15.567 --> 00:05:18.334
Big caps 'cause
it's a cool sample.

00:05:18.334 --> 00:05:21.067
Not really.

00:05:21.067 --> 00:05:23.501
And so now you have
a new div

00:05:23.501 --> 00:05:25.534
when you go into the Playground
called "Saved Code".

00:05:25.534 --> 00:05:28.534
And...it's now got my sample
that I've just saved.

00:05:28.534 --> 00:05:31.834
You can also go
and share code with friends.

00:05:31.834 --> 00:05:35.467
So if you want to break out
of the box of the Playground

00:05:35.467 --> 00:05:38.234
and actually, you know, show
someone else what you've done,

00:05:38.234 --> 00:05:40.701
you can click "Export".

00:05:40.701 --> 00:05:45.067
We'll now export the code
to a standalone URL.

00:05:45.067 --> 00:05:46.801
So you can use
this sticky URL

00:05:46.801 --> 00:05:49.167
to show to your friends,
and it'll exist forever.

00:05:49.167 --> 00:05:52.934
And go in and see and this is
all of the sample code

00:05:52.934 --> 00:05:56.267
for that exact sample that
I was just taking a look at.

00:05:56.267 --> 00:05:59.300
So there's about 188 samples

00:05:59.300 --> 00:06:02.767
in the AJAX API Playground.

00:06:02.767 --> 00:06:05.200
So I really suggest
going through

00:06:05.200 --> 00:06:06.501
and taking a look at them.

00:06:06.501 --> 00:06:07.901
I mean, a lot of people
are interested in Maps.

00:06:07.901 --> 00:06:10.601
So there's just a ton
of different Maps samples

00:06:10.601 --> 00:06:11.834
for everything
you'd want to do.

00:06:11.834 --> 00:06:13.467
Search as well--
putting Search in your site,

00:06:13.467 --> 00:06:14.834
it's really easy,

00:06:14.834 --> 00:06:17.334
and there's samples
for absolutely every different

00:06:17.334 --> 00:06:19.367
API call that we have.

00:06:19.367 --> 00:06:22.367
So if you're interested
in JavaScript APIs from Google,

00:06:22.367 --> 00:06:25.300
definitely take a look
at the Playground.

00:06:25.300 --> 00:06:30.434
So let's go ahead and
get into some Meteor code.

00:06:30.434 --> 00:06:33.334
I want to talk
about JavaScript,

00:06:33.334 --> 00:06:34.934
and the reason why
is because

00:06:34.934 --> 00:06:37.234
lots of web apps use--
well, almost all web apps

00:06:37.234 --> 00:06:38.667
use JavaScript.

00:06:38.667 --> 00:06:40.567
And JavaScript's
really easy to use

00:06:40.567 --> 00:06:42.701
and it's really easy
to cut and paste.

00:06:42.701 --> 00:06:44.467
However, generally,

00:06:44.467 --> 00:06:46.033
people don't know
JavaScript really well.

00:06:46.033 --> 00:06:47.868
So I wanted to take some time

00:06:47.868 --> 00:06:49.868
to talk about the coolness
of JavaScript--

00:06:49.868 --> 00:06:52.300
some of the intermediate
and advanced stuff

00:06:52.300 --> 00:06:54.267
that you can do
in JavaScript.

00:06:54.267 --> 00:06:56.200
And I've always wanted
to go to a session

00:06:56.200 --> 00:06:57.467
when I was learning JavaScript

00:06:57.467 --> 00:06:58.968
that would talk about,
you know,

00:06:58.968 --> 00:07:00.167
some of these cool functions,

00:07:00.167 --> 00:07:02.400
some of the cool things
that you can do.

00:07:02.400 --> 00:07:03.801
So a quick warning:

00:07:03.801 --> 00:07:06.767
if any of you are experts
in JavaScript out there,

00:07:06.767 --> 00:07:09.100
you'll probably be bored
for the next 15 minutes

00:07:09.100 --> 00:07:10.267
'cause I'm going
to go through

00:07:10.267 --> 00:07:12.567
some intermediate
JavaScript stuff.

00:07:12.567 --> 00:07:13.734
If you're a beginner,

00:07:13.734 --> 00:07:15.334
then you might get
a little bit lost,

00:07:15.334 --> 00:07:17.067
especially if
I'm talking too fast.

00:07:17.067 --> 00:07:18.601
I'm going to go through
a couple, like,

00:07:18.601 --> 00:07:21.234
really important concepts
to learn in JavaScript,

00:07:21.234 --> 00:07:23.701
and generally you can't
learn them in 15 minutes.

00:07:23.701 --> 00:07:26.400
So feel free to ask questions
as I go through them,

00:07:26.400 --> 00:07:29.300
but also,
you can follow along with me

00:07:29.300 --> 00:07:30.534
on your computers,

00:07:30.534 --> 00:07:32.767
and you can check out
the URL after

00:07:32.767 --> 00:07:34.033
to look at the stuff.

00:07:34.033 --> 00:07:36.901
And I highly suggest looking up
additional information.

00:07:36.901 --> 00:07:38.734
Also, the code
that I'm showing for you--

00:07:38.734 --> 00:07:40.467
I just wrote it up, you know,
really quickly

00:07:40.467 --> 00:07:41.701
for this presentation,

00:07:41.701 --> 00:07:42.968
so it's not battle-tested.

00:07:42.968 --> 00:07:44.634
It's not meant to be
copy and pasted.

00:07:44.634 --> 00:07:47.334
It's just, you know,
for education.

00:07:47.334 --> 00:07:49.667
So let's jump right in.

00:07:49.667 --> 00:07:52.767
I decided to add
JavaScript samples

00:07:52.767 --> 00:07:55.968
for my presentation
into the actual Playground.

00:07:55.968 --> 00:07:59.267
Go ahead and delete that.

00:07:59.267 --> 00:08:01.901
And here they are.

00:08:01.901 --> 00:08:05.701
So let's start out in JavaScript
with defining objects

00:08:05.701 --> 00:08:07.400
and creating prototypes.

00:08:07.400 --> 00:08:10.367
The first step is
creating an Object Literal.

00:08:10.367 --> 00:08:11.767
So what's an Object Literal?

00:08:11.767 --> 00:08:14.801
It's just a format for
defining objects in JavaScript,

00:08:14.801 --> 00:08:16.133
and it's
a comma separated list

00:08:16.133 --> 00:08:18.634
of properties and methods
for an object.

00:08:18.634 --> 00:08:21.000
And it's a dynamic way
to create an object,

00:08:21.000 --> 00:08:22.934
and it's used for creating
a Singleton--

00:08:22.934 --> 00:08:24.567
so just one instance
of this object

00:08:24.567 --> 00:08:27.000
that you're going to use
over and over again.

00:08:27.000 --> 00:08:29.734
So take a look down here.
I'm creating a variable, "A".

00:08:29.734 --> 00:08:32.133
And I'm setting it equal
to these brackets here.

00:08:32.133 --> 00:08:33.868
That means that I'm setting it
equal to an object.

00:08:33.868 --> 00:08:35.868
And here you'll see
the contents of this object.

00:08:35.868 --> 00:08:38.100
I basically have
key value pairs,

00:08:38.100 --> 00:08:40.601
and the key value pairs
are the--

00:08:40.601 --> 00:08:42.667
property one is equal
to the number 1,

00:08:42.667 --> 00:08:45.601
then I have arr
which is equal to an array,

00:08:45.601 --> 00:08:48.601
then I have doThis
which is equal to a function,

00:08:48.601 --> 00:08:52.200
and two which is, again,
equal to an integer.

00:08:52.200 --> 00:08:53.901
So right off the bat
you can see that

00:08:53.901 --> 00:08:55.834
JavaScript's a really
dynamic language.

00:08:55.834 --> 00:09:02.100
I've made an object that has
very different properties in it.

00:09:02.100 --> 00:09:03.901
So if you take a look
down here in the output,

00:09:03.901 --> 00:09:08.000
I'm just going to show
how you use it.

00:09:08.000 --> 00:09:10.868
So a.doThis
is recalling that function.

00:09:10.868 --> 00:09:14.801
And it is outputting 20,
as you can see up here.

00:09:14.801 --> 00:09:16.000
And same with the array--

00:09:16.000 --> 00:09:17.934
we're going to a.arr

00:09:17.934 --> 00:09:20.567
and--and you see,
0 is in fact equal to 1,

00:09:20.567 --> 00:09:22.467
which you'll see up here.

00:09:22.467 --> 00:09:25.267
On to adding properties
to an object.

00:09:25.267 --> 00:09:27.000
So it's easily--

00:09:27.000 --> 00:09:29.534
it's easy to dynamically add
properties to an object

00:09:29.534 --> 00:09:31.400
because objects
kind of just behave

00:09:31.400 --> 00:09:33.367
like hash tables,
key value pairs.

00:09:33.367 --> 00:09:35.601
And I'm going to show you
how to do that right here.

00:09:35.601 --> 00:09:37.067
I'm going to create
a variable "A"

00:09:37.067 --> 00:09:39.601
and it's equal
to a blank object,

00:09:39.601 --> 00:09:41.234
an object
with nothing in it.

00:09:41.234 --> 00:09:44.334
Down here I'm going
to give "A" two properties:

00:09:44.334 --> 00:09:45.934
property1
and property2.

00:09:45.934 --> 00:09:48.200
And they're both going
to be equal to integers.

00:09:48.200 --> 00:09:50.534
Now, you'll notice that
the syntax is a little different

00:09:50.534 --> 00:09:51.801
for both of these.

00:09:51.801 --> 00:09:53.367
One of these is
a.property1

00:09:53.367 --> 00:09:55.501
and the other one
is using "A"

00:09:55.501 --> 00:09:57.067
as if it were an array.

00:09:57.067 --> 00:09:59.667
This is, effectually,
going to assign the properties

00:09:59.667 --> 00:10:01.601
to "A" the exact same way.

00:10:01.601 --> 00:10:04.067
So another example
of how JavaScript's,

00:10:04.067 --> 00:10:05.501
you know,
kind of dynamic.

00:10:05.501 --> 00:10:08.334
There's a lot of different
ways to do things in JavaScript.

00:10:08.334 --> 00:10:10.434
So it gives you
a lot of flexibility.

00:10:10.434 --> 00:10:13.100
And then, down here,
I'm going to show

00:10:13.100 --> 00:10:16.667
how to dynamically
add a new function too.

00:10:16.667 --> 00:10:18.367
So I'm going to create
function3

00:10:18.367 --> 00:10:20.067
and set it
equal to a function

00:10:20.067 --> 00:10:22.667
which uses--which is just
going to take property1

00:10:22.667 --> 00:10:24.968
and property2
and add them together

00:10:24.968 --> 00:10:26.601
and return the output.

00:10:26.601 --> 00:10:28.501
Notice that I'm using
the "this" keyword.

00:10:28.501 --> 00:10:30.000
In JavaScript,
"this" just refers

00:10:30.000 --> 00:10:31.801
to the object that we're in.

00:10:31.801 --> 00:10:33.400
So right now we're in "A"

00:10:33.400 --> 00:10:35.634
so we're referring
to "A" property1

00:10:35.634 --> 00:10:38.667
and "A" property2.

00:10:38.667 --> 00:10:42.534
So now let's go on
to inheritance.

00:10:42.534 --> 00:10:45.434
In JavaScript,
to do inheritance,

00:10:45.434 --> 00:10:46.868
you use prototypes.

00:10:46.868 --> 00:10:49.701
And so what you use
prototypes for

00:10:49.701 --> 00:10:52.334
is to add properties
or methods

00:10:52.334 --> 00:10:54.901
to all instances
of an object.

00:10:54.901 --> 00:10:56.667
So I'm going to create
a Dog down here.

00:10:56.667 --> 00:11:00.534
And when you visit the
constructor function for a Dog,

00:11:00.534 --> 00:11:04.167
and when you create a Dog you're
gonna pass in a barkNoise.

00:11:04.167 --> 00:11:05.467
In the constructor

00:11:05.467 --> 00:11:09.267
I'm going to set this instances
of the barkNoise

00:11:09.267 --> 00:11:11.133
to be equal
to whatever's passed in.

00:11:11.133 --> 00:11:12.567
So when you pass in
the barkNoise,

00:11:12.567 --> 00:11:15.534
that instance of a Dog
is now going to always have

00:11:15.534 --> 00:11:18.567
a barkNoise.

00:11:18.567 --> 00:11:22.400
Down here I'm going to use
the prototype keyword.

00:11:22.400 --> 00:11:24.100
And the prototype keyword

00:11:24.100 --> 00:11:26.234
is the magic that makes
inheritance possible.

00:11:26.234 --> 00:11:30.267
So I'm saying each Dog is
going to have a bark function.

00:11:30.267 --> 00:11:31.701
And I'm doing this
just by saying

00:11:31.701 --> 00:11:35.167
Dog.prototype.bark
is equal to function.

00:11:35.167 --> 00:11:36.801
So whenever
I create a new one,

00:11:36.801 --> 00:11:38.734
it'll always have
a bark function.

00:11:38.734 --> 00:11:40.901
Same with
the numLegs property.

00:11:40.901 --> 00:11:43.100
I'm making it so
Dog.prototype is saying

00:11:43.100 --> 00:11:46.934
that each Dog is going to have
the numLegs property.

00:11:46.934 --> 00:11:49.434
Down here is how
I actually create the Dogs.

00:11:49.434 --> 00:11:50.801
I say new Dog,

00:11:50.801 --> 00:11:52.334
and I'm going to have
a tinyDog that yaps

00:11:52.334 --> 00:11:54.300
and I'm going to have
a bigDog

00:11:54.300 --> 00:11:58.200
which has a very deep,
burly woof.

00:11:58.200 --> 00:12:01.033
And after that, I will
assign some properties

00:12:01.033 --> 00:12:02.200
to these instances.

00:12:02.200 --> 00:12:03.467
I'll give them
each a size,

00:12:03.467 --> 00:12:04.868
just say it's--

00:12:04.868 --> 00:12:06.834
tinyDog's tiny,
and the bigDog's big.

00:12:06.834 --> 00:12:09.634
And this is just showing,
on the last example,

00:12:09.634 --> 00:12:13.801
how you add properties
to an object.

00:12:13.801 --> 00:12:15.267
Nothing too crazy
on the output.

00:12:15.267 --> 00:12:17.868
I'm just, you know, showing
that this did in fact work.

00:12:17.868 --> 00:12:20.434
The tinyDog is tiny,
it has 4 legs,

00:12:20.434 --> 00:12:23.434
the bigDog is big,
and it has 4 legs,

00:12:23.434 --> 00:12:25.367
and here are
their barkNoises--

00:12:25.367 --> 00:12:29.601
yap yap and woof.

00:12:29.601 --> 00:12:32.767
So you can override
prototypes too.

00:12:32.767 --> 00:12:36.234
So if an object
already has a prototype

00:12:36.234 --> 00:12:37.934
defined for it,

00:12:37.934 --> 00:12:39.634
then you can override it.

00:12:39.634 --> 00:12:41.067
You can rewrite it
to do what you want.

00:12:41.067 --> 00:12:43.901
You can also create
new prototypes for that.

00:12:43.901 --> 00:12:48.601
So you can do this on
native JavaScript types as well.

00:12:48.601 --> 00:12:50.467
So you can do this
for strings

00:12:50.467 --> 00:12:51.968
or integers or functions.

00:12:51.968 --> 00:12:55.667
You could actually override
JavaScript's native behavior.

00:12:55.667 --> 00:12:58.501
Now, this is very dangerous
to do that--

00:12:58.501 --> 00:13:00.667
to override a native
JavaScripts type--

00:13:00.667 --> 00:13:02.267
and so I'm saying
this is a bad example.

00:13:02.267 --> 00:13:03.834
Please don't copy this one

00:13:03.834 --> 00:13:06.100
because you could really screw
things up for other people.

00:13:06.100 --> 00:13:07.434
And the reason why
is because

00:13:07.434 --> 00:13:09.234
if you edit
a native JavaScript type,

00:13:09.234 --> 00:13:10.767
and you include jQuery,

00:13:10.767 --> 00:13:13.567
jQuery's going to be trying
to use a string function

00:13:13.567 --> 00:13:15.501
just like it
would expect it to work.

00:13:15.501 --> 00:13:17.767
But if you're changing
the native JavaScript type,

00:13:17.767 --> 00:13:20.601
then when you include jQuery,
it's going to fail.

00:13:20.601 --> 00:13:22.334
But why am I
showing you this?

00:13:22.334 --> 00:13:23.634
The reason why
I'm showing you this

00:13:23.634 --> 00:13:25.334
is because in some cases

00:13:25.334 --> 00:13:29.534
you will want to override
prototypes that exist.

00:13:29.534 --> 00:13:32.367
So, for instance, if I was
including jQuery on my site,

00:13:32.367 --> 00:13:34.934
and I didn't like the way that
they did one of their functions

00:13:34.934 --> 00:13:37.767
or if I wanted to have
each jQuery object

00:13:37.767 --> 00:13:41.501
have a new property
or a new method

00:13:41.501 --> 00:13:42.801
across every single one,

00:13:42.801 --> 00:13:47.400
then I'd want to use
this stuff right here.

00:13:47.400 --> 00:13:49.767
So here is a simple example

00:13:49.767 --> 00:13:51.834
where I am changing
the concatenation function

00:13:51.834 --> 00:13:53.033
for strings.

00:13:53.033 --> 00:13:54.534
Normally
it just takes one string

00:13:54.534 --> 00:13:56.267
and concatenates it
with another.

00:13:56.267 --> 00:13:58.534
But in this example,
I'm actually going to take

00:13:58.534 --> 00:14:00.734
one string,
put a delimeter,

00:14:00.734 --> 00:14:02.467
and then add on
the other string.

00:14:02.467 --> 00:14:03.801
So nothing crazy.

00:14:03.801 --> 00:14:05.968
The syntax for this is
just like you would expect.

00:14:05.968 --> 00:14:07.467
Just in the last example,

00:14:07.467 --> 00:14:08.868
you've just
defined the prototype.

00:14:08.868 --> 00:14:10.834
But since the concat
already exists,

00:14:10.834 --> 00:14:13.267
we're overriding it.

00:14:13.267 --> 00:14:16.167
Then down here I'm going to add
a new function onto string's.

00:14:16.167 --> 00:14:19.567
I'm going to make it so that
you can call a string.reverse.

00:14:19.567 --> 00:14:22.667
So you can reverse a string
in place.

00:14:22.667 --> 00:14:25.934
And all that's going to do
is print it backwards.

00:14:25.934 --> 00:14:28.267
Down here in the output,
you can see how it would work.

00:14:28.267 --> 00:14:29.634
If "A" was equal
to abc,

00:14:29.634 --> 00:14:30.901
and "B" was equal
to def,

00:14:30.901 --> 00:14:32.901
if we called a concat,
like that,

00:14:32.901 --> 00:14:34.501
then, of course,
we get that output

00:14:34.501 --> 00:14:39.167
and a.reverse
will reverse the string "A".

00:14:39.167 --> 00:14:41.734
Conditional Assignment--
this is a very simple example

00:14:41.734 --> 00:14:43.000
to show.

00:14:43.000 --> 00:14:44.400
The reason why
I wanted to show it

00:14:44.400 --> 00:14:46.100
is because for those of you
that don't know it,

00:14:46.100 --> 00:14:47.367
you'll see this a lot,

00:14:47.367 --> 00:14:48.601
and I think it's elegant.

00:14:48.601 --> 00:14:49.901
I really like it.

00:14:49.901 --> 00:14:51.133
All you're doing here

00:14:51.133 --> 00:14:53.901
is conditionally--
conditionally setting "B".

00:14:53.901 --> 00:14:57.367
We're saying that
if "A" is equal to 1,

00:14:57.367 --> 00:14:59.133
then set "B" to 2,

00:14:59.133 --> 00:15:01.467
Otherwise, set it to 1.

00:15:05.667 --> 00:15:08.834
So now on to JSONP.

00:15:08.834 --> 00:15:12.801
JSONP is a little bit
of a hard concept to explain.

00:15:12.801 --> 00:15:15.033
Basically,
it's a technique

00:15:15.033 --> 00:15:17.634
for avoiding the browser's
cross-domain restriction.

00:15:17.634 --> 00:15:19.267
So if you guys
aren't familiar with that,

00:15:19.267 --> 00:15:21.567
that just means that
if you're on domain 1,

00:15:21.567 --> 00:15:23.100
and you try and do
an AJAX request

00:15:23.100 --> 00:15:24.534
to domain 2,

00:15:24.534 --> 00:15:26.300
because of the browser's
security model,

00:15:26.300 --> 00:15:27.801
you're not allowed
to do that.

00:15:27.801 --> 00:15:29.801
But with JSONP

00:15:29.801 --> 00:15:33.200
you can actually
get around that.

00:15:33.200 --> 00:15:34.901
And so what's JSONP used for?

00:15:34.901 --> 00:15:38.133
Well, Google uses it a lot
in our APIs.

00:15:38.133 --> 00:15:39.968
We provide APIs

00:15:39.968 --> 00:15:43.834
that allow you to request
data from us in JavaScript

00:15:43.834 --> 00:15:45.968
and do it cross-domain.

00:15:45.968 --> 00:15:47.667
So the basics of it

00:15:47.667 --> 00:15:50.601
is that on the client side,

00:15:50.601 --> 00:15:52.601
you create
a new script tag,

00:15:52.601 --> 00:15:55.267
you give that script tag
a source,

00:15:55.267 --> 00:15:56.601
give it a type,

00:15:56.601 --> 00:15:58.267
and then you add it
to your page.

00:15:58.267 --> 00:16:00.601
So what's going to happen
is whatever's--

00:16:00.601 --> 00:16:02.767
as you guys know,
with a script tag,

00:16:02.767 --> 00:16:05.801
whatever is returned by
the source that you're grabbing

00:16:05.801 --> 00:16:08.534
is then going to be evaluated
by the JavaScript engine

00:16:08.534 --> 00:16:09.801
and run.

00:16:09.801 --> 00:16:12.934
Well, JSONP--
in JSONP,

00:16:12.934 --> 00:16:16.434
the service is going to return
the data that you request--

00:16:16.434 --> 00:16:19.267
requested in a format
that will be executed

00:16:19.267 --> 00:16:20.567
by JavaScript.

00:16:20.567 --> 00:16:23.267
So right here--
here's the--here's the source

00:16:23.267 --> 00:16:25.968
that I am setting the scripts
to be equal to.

00:16:25.968 --> 00:16:28.734
And it's really hard to read

00:16:28.734 --> 00:16:33.634
but you might notice that it's--
it's an Object Literal.

00:16:33.634 --> 00:16:35.834
I showed that. That was
the first sample that I showed.

00:16:35.834 --> 00:16:38.601
So it's basically
a string of data

00:16:38.601 --> 00:16:41.801
written as
a JavaScript object.

00:16:41.801 --> 00:16:44.567
So if we look in here, what is
this service that I'm doing?

00:16:44.567 --> 00:16:47.567
It's a web search,
a Google web search,

00:16:47.567 --> 00:16:51.033
and I'm searching for dog--

00:16:51.033 --> 00:16:53.834
I don't know if you guys--
yeah, you guys can see that.

00:16:53.834 --> 00:16:56.334
So in these results
it will return me

00:16:56.334 --> 00:16:59.067
the top queries for Dog.

00:16:59.067 --> 00:17:03.133
The other thing to note is that
all of this JSON

00:17:03.133 --> 00:17:05.367
is wrapped in a function call.

00:17:05.367 --> 00:17:06.567
So what's going to happen

00:17:06.567 --> 00:17:09.968
is when my page
evaluates this response,

00:17:09.968 --> 00:17:12.334
it's immediately going
to execute this function

00:17:12.334 --> 00:17:14.434
and pass in
this Object Literal,

00:17:14.434 --> 00:17:16.834
and it's going
to be evaluated.

00:17:16.834 --> 00:17:18.334
So I was calling myFunc.

00:17:18.334 --> 00:17:20.434
As soon as this script
is added to the page,

00:17:20.434 --> 00:17:22.434
it's going to call myFunc,
it's going to come in here,

00:17:22.434 --> 00:17:25.567
and it's going
to log the response.

00:17:25.567 --> 00:17:30.200
So let's take a look
at that response.

00:17:30.200 --> 00:17:32.634
Go into Firebug,
check my log,

00:17:32.634 --> 00:17:34.567
and sure enough,
this is the response.

00:17:34.567 --> 00:17:36.968
And it's got a nice,
pretty format for us.

00:17:36.968 --> 00:17:39.400
Go through and here are
my four results.

00:17:39.400 --> 00:17:44.434
I have Wikipedia
and dog.com.

00:17:49.400 --> 00:17:52.133
All right,
on to Anonymous Functions.

00:17:52.133 --> 00:17:54.200
So an anonymous function
is just

00:17:54.200 --> 00:17:56.400
a function
that's dynamically declared

00:17:56.400 --> 00:17:58.667
that doesn't have a name.

00:17:58.667 --> 00:18:01.234
So right here
is our anonymous function.

00:18:01.234 --> 00:18:03.267
All we're doing is setting
the onload event

00:18:03.267 --> 00:18:06.334
to be equal
to this anonymous function.

00:18:06.334 --> 00:18:08.267
Nothing too interesting
there.

00:18:08.267 --> 00:18:11.501
But this is why we would want
to use anonymous functions--

00:18:11.501 --> 00:18:14.000
and the reason why
is because of the fact

00:18:14.000 --> 00:18:16.901
that JavaScript
uses functional scope.

00:18:16.901 --> 00:18:20.234
What that means is that
context--

00:18:20.234 --> 00:18:23.601
scope in JavaScript
is defined by a function.

00:18:23.601 --> 00:18:25.701
So if you define a variable
in an if statement

00:18:25.701 --> 00:18:27.200
or a four-loop,
it doesn't matter.

00:18:27.200 --> 00:18:29.801
All that matters is whether--
what function it's in.

00:18:29.801 --> 00:18:32.234
So if you have a function and
you have stuff defined in it,

00:18:32.234 --> 00:18:35.200
it won't be visible
outside of that function.

00:18:35.200 --> 00:18:38.601
So that's--that's the
functional scope for JavaScript,

00:18:38.601 --> 00:18:40.267
and the reason why
this is useful to know

00:18:40.267 --> 00:18:43.133
is because a lot of times
in JavaScript--

00:18:43.133 --> 00:18:45.934
well, in web pages
in general,

00:18:45.934 --> 00:18:49.234
you always want to be including
other people's scripts.

00:18:49.234 --> 00:18:50.701
Well, the problem with that
is that

00:18:50.701 --> 00:18:52.334
all the names will collide.

00:18:52.334 --> 00:18:53.667
If you guys
use the same names,

00:18:53.667 --> 00:18:55.067
then you're going
to start having errors

00:18:55.067 --> 00:18:58.033
because you guys will
override each other's data.

00:18:58.033 --> 00:19:02.133
So knowing that JavaScript
operates like that--

00:19:02.133 --> 00:19:03.567
where if you
have a function,

00:19:03.567 --> 00:19:05.534
anything defined in it
won't be visible outside of it--

00:19:05.534 --> 00:19:07.434
you can actually
hide all of your code.

00:19:07.434 --> 00:19:09.701
You can hide it
so that your names

00:19:09.701 --> 00:19:12.367
aren't affecting
the global scope.

00:19:12.367 --> 00:19:14.100
And in JavaScript,
in the DOM,

00:19:14.100 --> 00:19:16.300
the global scope
is the window object.

00:19:16.300 --> 00:19:19.367
Just a little tidbit.

00:19:19.367 --> 00:19:23.601
So down here I am going
to use this to my advantage

00:19:23.601 --> 00:19:25.234
by creating
an anonymous function,

00:19:25.234 --> 00:19:28.300
which spans down to here.

00:19:28.300 --> 00:19:29.567
I'm going to wrap it
in parentheses

00:19:29.567 --> 00:19:31.667
so that returns
the function.

00:19:31.667 --> 00:19:33.601
And then right here
is the really important part,

00:19:33.601 --> 00:19:36.901
where I'm going to automatically
call that function.

00:19:36.901 --> 00:19:38.434
When that function
gets called,

00:19:38.434 --> 00:19:40.100
it's going
to define everything

00:19:40.100 --> 00:19:41.634
inside this function.

00:19:41.634 --> 00:19:43.667
And everything
inside of this function

00:19:43.667 --> 00:19:46.367
is now going to be
invisible outside.

00:19:46.367 --> 00:19:49.167
So what I've done is
I've created a function

00:19:49.167 --> 00:19:50.334
that has no name,

00:19:50.334 --> 00:19:51.701
I've written all of my code--

00:19:51.701 --> 00:19:53.801
let's say
my 2,000-line project--

00:19:53.801 --> 00:19:55.100
I've written all my lines

00:19:55.100 --> 00:19:56.667
within
this anonymous function,

00:19:56.667 --> 00:19:59.367
and now, when someone
includes this on their page,

00:19:59.367 --> 00:20:02.667
it won't pollute
any of the global namespace.

00:20:02.667 --> 00:20:04.634
There won't be
a named function there.

00:20:04.634 --> 00:20:06.868
Any of my variables
inside of the function--

00:20:06.868 --> 00:20:09.200
none of them will exist
in the global scope.

00:20:09.200 --> 00:20:12.167
So we'll have
no namespace collisions.

00:20:12.167 --> 00:20:14.534
Excuse me.

00:20:14.534 --> 00:20:17.334
Well, what if I wanted
to export something

00:20:17.334 --> 00:20:19.601
from the inner function
to the outside?

00:20:19.601 --> 00:20:21.000
Here's how you do it.

00:20:21.000 --> 00:20:22.734
As I said,
the window object

00:20:22.734 --> 00:20:24.634
is the global namespace,

00:20:24.634 --> 00:20:27.067
so what I would do
is I'd attach a new variable

00:20:27.067 --> 00:20:29.701
to the window object,
the global namespace,

00:20:29.701 --> 00:20:32.567
and I'd set it
equal to a property

00:20:32.567 --> 00:20:34.501
or a method
that I wanted to export.

00:20:34.501 --> 00:20:38.467
So in this case, I'm exporting
visibleOutside function

00:20:38.467 --> 00:20:41.100
to the global namespace.

00:20:41.100 --> 00:20:44.100
And down here, I just did
a simple test to see.

00:20:44.100 --> 00:20:47.601
What is the value
of these two functions

00:20:47.601 --> 00:20:49.434
inside of
the anonymous function,

00:20:49.434 --> 00:20:51.400
and what is
their value outside?

00:20:51.400 --> 00:20:53.501
And you can see
that from the inside

00:20:53.501 --> 00:20:55.067
we can see both of them.

00:20:55.067 --> 00:20:56.968
They are both
of type function.

00:20:56.968 --> 00:20:59.367
But from the outside
of the anonymous function,

00:20:59.367 --> 00:21:01.100
you can't see
the invisible one

00:21:01.100 --> 00:21:02.601
because we never exported it.

00:21:02.601 --> 00:21:05.267
However, you can see
the visible one.

00:21:05.267 --> 00:21:08.367
So for third party libraries,

00:21:08.367 --> 00:21:10.133
they all are using
anonymous functions

00:21:10.133 --> 00:21:12.934
to hide all of their
local variables.

00:21:12.934 --> 00:21:15.501
And it's a good practice
to do it with your own code

00:21:15.501 --> 00:21:17.000
because you never know

00:21:17.000 --> 00:21:20.067
when someone's
going to reuse your code.

00:21:20.067 --> 00:21:24.701
All right, on to
a really fun topic--Closure.

00:21:24.701 --> 00:21:28.434
So closure is the source
of a lot of power in JavaScript.

00:21:28.434 --> 00:21:30.868
And all it is
is it's when a function

00:21:30.868 --> 00:21:32.968
is defined
within another function,

00:21:32.968 --> 00:21:35.767
and that inner function
has access

00:21:35.767 --> 00:21:38.734
to the outer function's
context and scope

00:21:38.734 --> 00:21:40.467
even after that outer function's
already closed.

00:21:40.467 --> 00:21:42.167
So right here--in fact,

00:21:42.167 --> 00:21:44.033
in some of my examples
you've already seen--

00:21:44.033 --> 00:21:45.567
the last example
had a closure in it.

00:21:45.567 --> 00:21:47.300
I had an anonymous function

00:21:47.300 --> 00:21:49.934
with code defined in it
with other functions.

00:21:49.934 --> 00:21:51.434
And that was already
an example of closure.

00:21:51.434 --> 00:21:53.567
But right here it's just
a very simple, obvious one.

00:21:53.567 --> 00:21:55.133
I have an inner function

00:21:55.133 --> 00:21:56.834
and I have an outer function.

00:21:56.834 --> 00:21:58.200
And in the inner function,

00:21:58.200 --> 00:22:01.367
I'm accessing
these two variables.

00:22:01.367 --> 00:22:02.968
And these two variables

00:22:02.968 --> 00:22:04.834
exist in the outer function.

00:22:04.834 --> 00:22:08.033
So that's all
that closure is.

00:22:08.033 --> 00:22:10.033
Here's how we'd--
how you'd use a closure.

00:22:10.033 --> 00:22:13.934
One common way
is with setting events.

00:22:13.934 --> 00:22:17.601
Basically when
an event handler is triggered,

00:22:17.601 --> 00:22:19.300
if you're trying
to print out a value,

00:22:19.300 --> 00:22:21.300
then whatever
you're trying to print out

00:22:21.300 --> 00:22:24.801
is going to be the value
at trigger time.

00:22:24.801 --> 00:22:27.868
But what if you wanted
to hard code

00:22:27.868 --> 00:22:30.734
a value into that event

00:22:30.734 --> 00:22:32.534
so that when
the event triggered

00:22:32.534 --> 00:22:33.834
it printed out

00:22:33.834 --> 00:22:36.901
whatever you wanted
when you had set the handler?

00:22:36.901 --> 00:22:38.901
Well, you'd use
closure for this

00:22:38.901 --> 00:22:42.534
because you can access
the outer function's variable

00:22:42.534 --> 00:22:44.467
even after
the outer function is closed.

00:22:44.467 --> 00:22:46.300
You'll understand more
in just a sec.

00:22:46.300 --> 00:22:47.901
So this is the bad way to--

00:22:47.901 --> 00:22:49.234
I'm going to create
five buttons.

00:22:49.234 --> 00:22:51.067
I'm going to create
five buttons the wrong way,

00:22:51.067 --> 00:22:53.067
then I'm going to create them
the good way with closure.

00:22:53.067 --> 00:22:56.968
So the bad way: here is
setting an onclick handler

00:22:56.968 --> 00:22:58.501
the bad way.

00:22:58.501 --> 00:23:00.901
I'm setting just--I'm just
making it equal to a function

00:23:00.901 --> 00:23:02.400
that alerts a variable.

00:23:02.400 --> 00:23:03.634
The problem with this

00:23:03.634 --> 00:23:06.200
is that "I" is going to be--

00:23:06.200 --> 00:23:07.767
when I click this button,

00:23:07.767 --> 00:23:10.234
"I" is going to be equal
to whatever "I" is

00:23:10.234 --> 00:23:11.868
at the time
that this is clicked.

00:23:11.868 --> 00:23:14.634
So in this case, the four-loop's
going to go through.

00:23:14.634 --> 00:23:16.767
It's going to iterate to 5.

00:23:16.767 --> 00:23:18.167
And then when
you click the button,

00:23:18.167 --> 00:23:19.567
"I" will be equal to 5.

00:23:19.567 --> 00:23:21.567
And that'll happen for
every single one of the buttons.

00:23:21.567 --> 00:23:23.767
But what I want
the behavior to be

00:23:23.767 --> 00:23:25.734
is each button
that gets clicked

00:23:25.734 --> 00:23:27.734
will output what number
button it is--

00:23:27.734 --> 00:23:31.534
so, you know,
0, 1, 2, 3, 4.

00:23:31.534 --> 00:23:33.734
So for that
I would use closure.

00:23:33.734 --> 00:23:35.968
If you take a look
down here,

00:23:35.968 --> 00:23:39.767
this is my good setters.

00:23:39.767 --> 00:23:43.434
button.onclick is equal to
a function that I'm executing.

00:23:43.434 --> 00:23:45.067
So I'm executing a function

00:23:45.067 --> 00:23:47.434
which is then
going to return a function.

00:23:47.434 --> 00:23:50.267
Up here is the function
that I'm executing.

00:23:50.267 --> 00:23:52.200
I'm passing in "I".

00:23:52.200 --> 00:23:53.634
So let's say the first--

00:23:53.634 --> 00:23:55.033
let's go through
the first iteration.

00:23:55.033 --> 00:23:57.467
In the first iteration,
we're going to call buttonClick.

00:23:57.467 --> 00:23:59.400
It's going to pass in 0.

00:23:59.400 --> 00:24:01.501
buttonNumber is going
to be equal to 0.

00:24:01.501 --> 00:24:03.067
Within this context,

00:24:03.067 --> 00:24:05.367
we're going to have
access to that variable.

00:24:05.367 --> 00:24:08.434
And then we're going
to return a function.

00:24:08.434 --> 00:24:10.534
This inner function,
because it's a closure,

00:24:10.534 --> 00:24:13.400
has access to
the outer function's variables--

00:24:13.400 --> 00:24:15.467
AKA buttonNumber.

00:24:15.467 --> 00:24:19.000
So when you click this button
that uses closure,

00:24:19.000 --> 00:24:22.634
it's going to alert
whatever value is snapshotted

00:24:22.634 --> 00:24:25.434
inside of it
because of closure.

00:24:25.434 --> 00:24:29.267
So that's a tough concept
to understand.

00:24:29.267 --> 00:24:31.267
It definitely took me
a little while

00:24:31.267 --> 00:24:32.767
to pick up on it.

00:24:32.767 --> 00:24:35.701
So, you know, hopefully
I explained it decently.

00:24:35.701 --> 00:24:37.501
At least you guys are aware

00:24:37.501 --> 00:24:39.567
of more things
that exist in JavaScript--

00:24:39.567 --> 00:24:41.334
more fun, cool tricks

00:24:41.334 --> 00:24:43.701
that are
very heavily used.

00:24:43.701 --> 00:24:46.734
So I hope that you guys

00:24:46.734 --> 00:24:49.200
will go explore
more information on those.

00:24:49.200 --> 00:24:52.501
Let's get into some
of the fun things that I did

00:24:52.501 --> 00:24:54.734
in the Playground
to make it possible.

00:24:54.734 --> 00:24:56.667
So there were three things
that I wanted to cover.

00:24:56.667 --> 00:25:00.067
One is executing
arbitrary code safely.

00:25:00.067 --> 00:25:02.634
The next is adding
the Debug Bar

00:25:02.634 --> 00:25:04.801
and Firebug Lite
into the output.

00:25:04.801 --> 00:25:10.200
And the last one
is adding breakpoints.

00:25:10.200 --> 00:25:13.167
So executing arbitrary code...

00:25:13.167 --> 00:25:15.501
I don't know if you guys
are familiar with eval,

00:25:15.501 --> 00:25:18.868
but eval
lets you take a string--

00:25:18.868 --> 00:25:20.667
so just a normal string--

00:25:20.667 --> 00:25:23.267
and then JavaScript
will evaluate that string

00:25:23.267 --> 00:25:24.567
as JavaScript.

00:25:24.567 --> 00:25:28.501
So if you passed in the string
variable 1 is equal to 1

00:25:28.501 --> 00:25:30.033
and you passed it into eval,

00:25:30.033 --> 00:25:31.801
then you'd now have
this new variable

00:25:31.801 --> 00:25:33.901
in your code.

00:25:33.901 --> 00:25:35.801
Well, as you guys saw,

00:25:35.801 --> 00:25:38.601
I allow you developers
to edit code

00:25:38.601 --> 00:25:39.868
in the Playground.

00:25:39.868 --> 00:25:42.133
And so that means
that I have to let you guys

00:25:42.133 --> 00:25:43.667
be running
your own JavaScript,

00:25:43.667 --> 00:25:45.234
whatever you guys
want to be running.

00:25:45.234 --> 00:25:46.934
And it's bad to use eval

00:25:46.934 --> 00:25:49.534
because it's going to be
happening on my domain.

00:25:49.534 --> 00:25:53.133
So you developers
will be writing code--

00:25:53.133 --> 00:25:56.100
JavaScript that gets run
on the google.com domain.

00:25:56.100 --> 00:25:58.100
This is really bad
because

00:25:58.100 --> 00:26:01.133
you guys could write code
that would steal cookies,

00:26:01.133 --> 00:26:03.167
steal authenticated sessions,

00:26:03.167 --> 00:26:05.834
and for obvious reasons,
that's really bad.

00:26:05.834 --> 00:26:07.601
So I had to
come up with a solution

00:26:07.601 --> 00:26:09.968
that would sandbox the code
that you guys were writing

00:26:09.968 --> 00:26:13.400
so that you
couldn't do evil hacks.

00:26:13.400 --> 00:26:15.834
So the solution is an iFrame,

00:26:15.834 --> 00:26:19.534
and it's creating an iFrame
on another domain

00:26:19.534 --> 00:26:22.267
that doesn't have access
to any of these cookies

00:26:22.267 --> 00:26:26.100
or, you know, any private,
secure resources.

00:26:26.100 --> 00:26:28.234
So when the user writes
code on the Playground

00:26:28.234 --> 00:26:29.501
and then clicks "Run",

00:26:29.501 --> 00:26:31.167
the Playground takes
that giant chunk of code

00:26:31.167 --> 00:26:32.367
that they have,

00:26:32.367 --> 00:26:33.901
it sends it to another server,

00:26:33.901 --> 00:26:35.734
that server then stores it
in the database

00:26:35.734 --> 00:26:37.968
and then it returns
a unique URL

00:26:37.968 --> 00:26:39.868
to that code
that's over here.

00:26:39.868 --> 00:26:41.367
The Playground
takes that URL

00:26:41.367 --> 00:26:43.734
and it creates an iFrame
to that code.

00:26:43.734 --> 00:26:46.701
So then the Playground's
got this iFrame

00:26:46.701 --> 00:26:48.167
with the code running in it,

00:26:48.167 --> 00:26:50.033
and it's a beautiful
little sandbox

00:26:50.033 --> 00:26:53.167
because iFrames can't talk
to parent frames

00:26:53.167 --> 00:26:54.601
if they're
in different domains.

00:26:54.601 --> 00:26:59.400
So it completely
cuts off any vector of attack

00:26:59.400 --> 00:27:01.734
in stealing cookies
or, you know,

00:27:01.734 --> 00:27:03.734
any evil JavaScript stuff

00:27:03.734 --> 00:27:07.567
bad developers
might try and do.

00:27:07.567 --> 00:27:09.734
So let's talk about
adding the Debug Bar

00:27:09.734 --> 00:27:11.968
and Firebug Lite
into the output.

00:27:11.968 --> 00:27:13.133
This was
an interesting problem

00:27:13.133 --> 00:27:17.434
because I wanted to add
my code and my interface

00:27:17.434 --> 00:27:19.267
into code
that you guys are writing.

00:27:19.267 --> 00:27:20.601
So I don't know
what you guys are writing

00:27:20.601 --> 00:27:22.501
but I don't want
to conflict with it.

00:27:22.501 --> 00:27:26.167
So what I did
was use some of the tricks

00:27:26.167 --> 00:27:27.434
that I was showing

00:27:27.434 --> 00:27:29.868
back when I was explaining
the JavaScript stuff.

00:27:29.868 --> 00:27:33.934
I used an anonymous function
to hide all of my code.

00:27:33.934 --> 00:27:36.968
You can see here
I have a variable: "anony",

00:27:36.968 --> 00:27:40.133
that I'm setting equal
to this anonymous function

00:27:40.133 --> 00:27:44.100
with all of my code that's
going to insert the Debug Bar

00:27:44.100 --> 00:27:46.033
and insert Firebug Lite.

00:27:46.033 --> 00:27:47.801
And so what that'll do
is when it--

00:27:47.801 --> 00:27:50.968
the code gets sent over
to the--to the iFrame,

00:27:50.968 --> 00:27:53.434
it will make it
so that my code

00:27:53.434 --> 00:27:55.300
won't be in the namespace.

00:27:55.300 --> 00:27:57.501
So if you guys are writing
a bunch of global variables

00:27:57.501 --> 00:27:58.868
I won't conflict
with you.

00:27:58.868 --> 00:28:01.300
Now there's
some interesting things

00:28:01.300 --> 00:28:02.834
down here on the last line.

00:28:02.834 --> 00:28:05.267
What I'm doing is I'm taking
this anonymous function--

00:28:05.267 --> 00:28:06.534
which is, you know,

00:28:06.534 --> 00:28:08.701
actually defined
in my Playground JavaScript--

00:28:08.701 --> 00:28:11.701
and I'm using a fun little
method called "toString".

00:28:11.701 --> 00:28:14.501
Now, you can imagine that you
would be able to call toString

00:28:14.501 --> 00:28:17.100
on an integer
and turn it into a string,

00:28:17.100 --> 00:28:19.267
but not too many people know

00:28:19.267 --> 00:28:22.300
that you can take a function
and call toString on it.

00:28:22.300 --> 00:28:23.601
The reason why this is nice

00:28:23.601 --> 00:28:25.300
is 'cause
it's very convenient.

00:28:25.300 --> 00:28:29.400
Since I'm taking code and
I have to turn it into a string

00:28:29.400 --> 00:28:32.834
so that I can send it over
the wire to the other server,

00:28:32.834 --> 00:28:35.367
I really don't want
to write my code in a string.

00:28:35.367 --> 00:28:38.634
Like, I don't want
to put parentheses

00:28:38.634 --> 00:28:40.767
or, excuse me, quotes
around all these lines

00:28:40.767 --> 00:28:42.767
and have to write
new lines in there

00:28:42.767 --> 00:28:45.234
because it's very ugly code.

00:28:45.234 --> 00:28:48.267
So I did this:
I created an anonymous function,

00:28:48.267 --> 00:28:49.734
I turned it
into a string,

00:28:49.734 --> 00:28:51.834
I wrapped it in parentheses

00:28:51.834 --> 00:28:54.334
and added
the autoexecute parentheses

00:28:54.334 --> 00:28:56.434
so that once it ends up
on the other server

00:28:56.434 --> 00:28:58.133
it'll be a string

00:28:58.133 --> 00:28:59.434
and it'll be
an anonymous function

00:28:59.434 --> 00:29:03.467
that autoexecutes itself.

00:29:03.467 --> 00:29:07.234
So on to the real fun:
adding breakpoints.

00:29:07.234 --> 00:29:10.167
You can add breakpoints
in JavaScript

00:29:10.167 --> 00:29:11.567
via an extension.

00:29:11.567 --> 00:29:14.300
So you guys are probably
all familiar with Firebug,

00:29:14.300 --> 00:29:17.400
and Firebug has access
to the JavaScript engine.

00:29:17.400 --> 00:29:20.100
So when they're
creating breakpoints,

00:29:20.100 --> 00:29:22.367
they're actually
stopping and starting

00:29:22.367 --> 00:29:24.000
the JavaScript engine again.

00:29:24.000 --> 00:29:27.000
So they have direct access.
I didn't.

00:29:27.000 --> 00:29:29.067
All I have access to
is JavaScript.

00:29:29.067 --> 00:29:31.868
So I wrote breakpoints
for JavaScript

00:29:31.868 --> 00:29:33.434
in JavaScript.

00:29:33.434 --> 00:29:35.234
So it was
a fun little problem.

00:29:35.234 --> 00:29:37.267
One of the interesting things
about it

00:29:37.267 --> 00:29:40.634
was prever--
preserving execution context

00:29:40.634 --> 00:29:43.601
so that once I went
into a breakpoint,

00:29:43.601 --> 00:29:46.300
after I continued
out of it,

00:29:46.300 --> 00:29:48.300
it would still contain
the correct context.

00:29:48.300 --> 00:29:50.701
That way, any variables
that were being used

00:29:50.701 --> 00:29:53.567
would still have access
to the local variables

00:29:53.567 --> 00:29:54.968
that they should.

00:29:54.968 --> 00:29:57.968
Another fun problem
was making sure that Firebug

00:29:57.968 --> 00:30:01.467
still had access to print out
the local variables

00:30:01.467 --> 00:30:04.467
while in a breakpoint.

00:30:04.467 --> 00:30:06.267
So here's the before
and after code.

00:30:06.267 --> 00:30:08.133
This--the before code

00:30:08.133 --> 00:30:10.167
is the code that you,
a developer on the Playground,

00:30:10.167 --> 00:30:11.367
might have written.

00:30:11.367 --> 00:30:13.667
And the after code
is what I've done.

00:30:13.667 --> 00:30:15.834
I've parsed your code
and added in some stuff

00:30:15.834 --> 00:30:20.033
to make it possible
for a breakpoint to occur.

00:30:20.033 --> 00:30:24.801
So on line 9 is where
we've inserted the breakpoint.

00:30:24.801 --> 00:30:26.133
If you come down here
and look,

00:30:26.133 --> 00:30:28.834
right after where you
inserted the breakpoint

00:30:28.834 --> 00:30:31.200
I started inserting
my own code.

00:30:31.200 --> 00:30:33.000
I call this function
setContinue,

00:30:33.000 --> 00:30:34.300
and what that's going to do

00:30:34.300 --> 00:30:35.734
is it's going to set
a global variable for me,

00:30:35.734 --> 00:30:38.033
saying that yes,
we are, in fact,

00:30:38.033 --> 00:30:39.601
at a breakpoint right now.

00:30:39.601 --> 00:30:42.968
Then I've got
this big function here,

00:30:42.968 --> 00:30:45.067
and you'll notice
that this is a closure.

00:30:45.067 --> 00:30:46.701
I've got
this big function here

00:30:46.701 --> 00:30:48.767
and it's going
to contain my logic

00:30:48.767 --> 00:30:52.133
that allows me to loop back
over myself

00:30:52.133 --> 00:30:55.033
until the user
has clicked "continue".

00:30:55.033 --> 00:30:57.000
So I've got
this if statement:

00:30:57.000 --> 00:30:58.667
"if window.doContinue".

00:30:58.667 --> 00:31:01.934
So if the user
hasn't clicked "continue"

00:31:01.934 --> 00:31:05.200
then call setTimeout
and recall myself

00:31:05.200 --> 00:31:07.868
the closure function:
breakpointAtLine9.

00:31:07.868 --> 00:31:10.501
Otherwise, if the user
has clicked "continue",

00:31:10.501 --> 00:31:12.868
go ahead and execute
the rest of the code

00:31:12.868 --> 00:31:14.200
that was supposed
to be executed--

00:31:14.200 --> 00:31:17.234
so that's lines 10 and 11
up here.

00:31:17.234 --> 00:31:21.200
So this is interesting--
I just wanted to point out

00:31:21.200 --> 00:31:24.067
that variable "A"
equals text and alert "A"--

00:31:24.067 --> 00:31:26.634
those are now possible
because it's a closure,

00:31:26.634 --> 00:31:28.167
and so those
still have access

00:31:28.167 --> 00:31:31.467
to this variable up here.

00:31:31.467 --> 00:31:33.968
Now on to the Firebug problem.

00:31:33.968 --> 00:31:37.067
Why was I still
able to print out

00:31:37.067 --> 00:31:39.400
local variables
with Firebug?

00:31:39.400 --> 00:31:42.834
Well, the problem is that when
you're in this setTimeout loop,

00:31:42.834 --> 00:31:44.434
where it's looping
every 100 milliseconds

00:31:44.434 --> 00:31:46.100
over my breakpoint function--

00:31:46.100 --> 00:31:47.467
Firebug's over here.

00:31:47.467 --> 00:31:48.968
When you try and log
with Firebug,

00:31:48.968 --> 00:31:50.400
Firebug's not
in the same context.

00:31:50.400 --> 00:31:52.300
It's got--it's in a completely
different context.

00:31:52.300 --> 00:31:54.100
It can't see
these local variables.

00:31:54.100 --> 00:31:56.334
And if--
some of you are familiar

00:31:56.334 --> 00:31:58.334
with the apply
or call functions--

00:31:58.334 --> 00:32:01.100
there's no way
to work those in

00:32:01.100 --> 00:32:04.300
to force them to be
the correct function context.

00:32:04.300 --> 00:32:05.767
So I had to get
a little bit of--

00:32:05.767 --> 00:32:07.734
a little bit
more creative than that.

00:32:07.734 --> 00:32:09.367
I basically made
this big hack

00:32:09.367 --> 00:32:12.033
where I went
into Firebug's code,

00:32:12.033 --> 00:32:13.968
their JavaScript code,

00:32:13.968 --> 00:32:15.567
and I edited it so that

00:32:15.567 --> 00:32:19.000
if Firebug is trying
to log something,

00:32:19.000 --> 00:32:20.968
and it sees that
you're in a breakpoint,

00:32:20.968 --> 00:32:23.901
then it's going to add
whatever you're trying to log

00:32:23.901 --> 00:32:25.934
into a global queue.

00:32:25.934 --> 00:32:28.601
In my breakpoint you see
this "if" statement right here.

00:32:28.601 --> 00:32:30.968
It's going to check
that global queue,

00:32:30.968 --> 00:32:33.133
and if there's stuff
in the global queue,

00:32:33.133 --> 00:32:34.868
then it's going to log it.

00:32:34.868 --> 00:32:36.567
The reason why this works
is because

00:32:36.567 --> 00:32:37.868
when you log it in here,

00:32:37.868 --> 00:32:39.734
it has the correct context.

00:32:39.734 --> 00:32:41.267
So it was my little ninja way

00:32:41.267 --> 00:32:46.501
of sneaking Firebug
into the correct context.

00:32:46.501 --> 00:32:49.901
All right, so enough about
JavaScript's context

00:32:49.901 --> 00:32:51.100
and--and all that stuff.

00:32:51.100 --> 00:32:53.133
Let's get into security.

00:32:53.133 --> 00:32:57.934
So XSRF is
a common security hole,

00:32:57.934 --> 00:32:59.467
and it's
a very serious one too.

00:32:59.467 --> 00:33:01.033
I definitely
didn't know about it

00:33:01.033 --> 00:33:02.634
when I was creating
the Playground.

00:33:02.634 --> 00:33:04.667
But after doing
a security review,

00:33:04.667 --> 00:33:06.901
I certainly found out
about it.

00:33:06.901 --> 00:33:09.200
What it is
is it's when evil.com

00:33:09.200 --> 00:33:12.300
tries to run an action
that requires authentication

00:33:12.300 --> 00:33:13.801
on good.com.

00:33:13.801 --> 00:33:16.567
So without XSRF protection,

00:33:16.567 --> 00:33:19.634
the user--if the user is still
logged in to good.com,

00:33:19.634 --> 00:33:21.300
that action will be run.

00:33:21.300 --> 00:33:23.167
And the reason why
is because

00:33:23.167 --> 00:33:25.501
when the browser navigates
to a URL,

00:33:25.501 --> 00:33:28.267
it automatically is going
to send all of its cookies

00:33:28.267 --> 00:33:30.601
and the HTTP headers
to the server.

00:33:30.601 --> 00:33:33.167
That means if you're still
logged in to a site,

00:33:33.167 --> 00:33:35.100
and you go to that URL,

00:33:35.100 --> 00:33:36.634
it's automatically
going to send

00:33:36.634 --> 00:33:38.200
your login cookies
to that site.

00:33:38.200 --> 00:33:39.868
So if evil.com's
linking you there,

00:33:39.868 --> 00:33:42.000
and it's, you know,
posting some form to that site,

00:33:42.000 --> 00:33:43.300
and you're still logged in,

00:33:43.300 --> 00:33:44.801
sure enough, your cookies
are going to get sent

00:33:44.801 --> 00:33:47.334
and that site's going
to allow you to run that action.

00:33:47.334 --> 00:33:51.234
So an example in the Playground
would be the save action.

00:33:51.234 --> 00:33:54.667
If evil.com were
to link to "Save Code"

00:33:54.667 --> 00:33:56.033
in the Playground,

00:33:56.033 --> 00:33:58.000
and you the user
were still logged in

00:33:58.000 --> 00:33:59.267
and clicked this link,

00:33:59.267 --> 00:34:01.567
it would allow evil.com
to save code

00:34:01.567 --> 00:34:03.901
into the Playground for you.

00:34:03.901 --> 00:34:05.667
So why is this bad?
It's bad for obvious reasons.

00:34:05.667 --> 00:34:09.467
It allows evil.com to access
and modify private data

00:34:09.467 --> 00:34:13.100
on authenticated sites.

00:34:13.100 --> 00:34:17.234
So one way to fix this
is to only let known domains

00:34:17.234 --> 00:34:19.033
access and modify
sensitive data.

00:34:19.033 --> 00:34:22.234
The way that you do this is
by creating a unique token

00:34:22.234 --> 00:34:24.367
that the server and client
are going to share,

00:34:24.367 --> 00:34:26.767
and that's how the server
is going to validate

00:34:26.767 --> 00:34:29.634
that we're coming
from the correct origin.

00:34:29.634 --> 00:34:32.567
Let's take a look
at this diagram I created.

00:34:32.567 --> 00:34:34.701
In the Playground,
when a user clicks "login"

00:34:34.701 --> 00:34:36.467
it's going to send the login
request to the server.

00:34:36.467 --> 00:34:38.901
The server is then going
to create a unique token.

00:34:38.901 --> 00:34:42.400
This unique token is
then sent back to the client.

00:34:42.400 --> 00:34:44.200
The client immediately
stores it in cookies,

00:34:44.200 --> 00:34:45.734
and whenever
they try and perform

00:34:45.734 --> 00:34:47.200
an authenticated
action again,

00:34:47.200 --> 00:34:49.200
they're going
to grab those cookies,

00:34:49.200 --> 00:34:51.300
they're going to take
that unique token,

00:34:51.300 --> 00:34:52.767
and they're going to put it
in POST form

00:34:52.767 --> 00:34:54.634
to be sent off.

00:34:54.634 --> 00:34:57.868
The reason
why this is important--

00:34:57.868 --> 00:34:59.868
the whole cookies part,

00:34:59.868 --> 00:35:01.400
grabbing it and putting it
in a POST form--

00:35:01.400 --> 00:35:03.267
is because in JavaScript

00:35:03.267 --> 00:35:06.234
you can only grab cookies
for the domain that you're on.

00:35:06.234 --> 00:35:08.601
So if I'm on
code.google.com,

00:35:08.601 --> 00:35:11.667
I'm the only person
that can run JavaScript

00:35:11.667 --> 00:35:13.767
to access those cookies.

00:35:13.767 --> 00:35:16.534
Evil.com can't
access those cookies.

00:35:16.534 --> 00:35:20.200
So if evil--
if I require on the server

00:35:20.200 --> 00:35:22.033
that you send
in the POST form

00:35:22.033 --> 00:35:23.467
a unique token,

00:35:23.467 --> 00:35:25.400
evil.com
can't do that token

00:35:25.400 --> 00:35:27.367
because they can't
grab those cookies

00:35:27.367 --> 00:35:29.033
from code.google.com.

00:35:29.033 --> 00:35:32.000
Yes, the cookies will be sent
in the HTTP headers,

00:35:32.000 --> 00:35:34.200
but we're
specifically looking

00:35:34.200 --> 00:35:35.734
in the CGI args
to make sure

00:35:35.734 --> 00:35:37.534
that this unique token's
being sent.

00:35:37.534 --> 00:35:39.300
So in that manner,
you can verify

00:35:39.300 --> 00:35:40.701
that on the server

00:35:40.701 --> 00:35:43.334
that the request is coming
from the origin that you want.

00:35:43.334 --> 00:35:45.567
So for authenticated actions

00:35:45.567 --> 00:35:49.968
we only want to let it come from
domains that we're aware of.

00:35:49.968 --> 00:35:53.334
All right, on to
front-end web performance.

00:35:53.334 --> 00:35:55.567
So performance
is really important.

00:35:55.567 --> 00:35:57.734
And Google's done
a lot of studies

00:35:57.734 --> 00:35:59.868
that show that when you increase
the performance of your site

00:35:59.868 --> 00:36:01.434
you receive more traffic.

00:36:01.434 --> 00:36:04.334
And I got some of these numbers
from Steve Souders down here.

00:36:04.334 --> 00:36:07.767
I don't know if you guys
were able to attend his session.

00:36:07.767 --> 00:36:10.601
I think it was yesterday.
It was very good.

00:36:10.601 --> 00:36:11.901
But thanks for
the numbers, Steve.

00:36:11.901 --> 00:36:14.367
So if you increase your site
by 500 milliseconds--

00:36:14.367 --> 00:36:17.000
well, at Google
we did a test

00:36:17.000 --> 00:36:19.400
where if we
increased the load time

00:36:19.400 --> 00:36:21.000
of Google
by 500 milliseconds,

00:36:21.000 --> 00:36:23.200
then it would decrease
the traffic by 20%.

00:36:23.200 --> 00:36:25.367
So that's definitely
significant.

00:36:25.367 --> 00:36:27.634
And right now, back-end
servers are really fast.

00:36:27.634 --> 00:36:28.968
So the amount of time
that it takes

00:36:28.968 --> 00:36:31.934
for you to request
an HTML page from a server

00:36:31.934 --> 00:36:34.501
and actually get it back--
I mean, it's really fast.

00:36:34.501 --> 00:36:36.334
There's--you can
optimize it and--

00:36:36.334 --> 00:36:38.434
but you're only going
to be optimizing milliseconds.

00:36:38.434 --> 00:36:41.701
If you really want to optimize
the user experience

00:36:41.701 --> 00:36:43.701
and make it so that
a person's seeing a web page

00:36:43.701 --> 00:36:45.067
as fast as they can,

00:36:45.067 --> 00:36:46.834
then you want
to focus on the front end.

00:36:46.834 --> 00:36:49.467
So I should also mention
that, you know,

00:36:49.467 --> 00:36:51.534
all the stuff I've learned
I've learned from Steve.

00:36:51.534 --> 00:36:54.300
So you guys should definitely
go check out his blog

00:36:54.300 --> 00:36:57.934
'cause he's got a lot
of really good resources.

00:36:57.934 --> 00:37:00.701
So optimizing the Playground
was a really fun thing for me

00:37:00.701 --> 00:37:04.000
because I got a lot
of gain out of it

00:37:04.000 --> 00:37:05.234
with fairly little work.

00:37:05.234 --> 00:37:07.100
It only took me
maybe a day or two

00:37:07.100 --> 00:37:08.300
to do a bunch of these things.

00:37:08.300 --> 00:37:10.267
And I went from a 400k app

00:37:10.267 --> 00:37:11.701
down to a 90k app.

00:37:11.701 --> 00:37:13.968
And the page now loads
with a primed cache

00:37:13.968 --> 00:37:15.601
in just under 2 seconds.

00:37:15.601 --> 00:37:17.267
So there are several things
that I did.

00:37:17.267 --> 00:37:19.400
These are just really
simple, easy ways

00:37:19.400 --> 00:37:20.834
that you can
increase performance,

00:37:20.834 --> 00:37:23.434
and that's gzipping responses,
minifying JavaScript,

00:37:23.434 --> 00:37:25.167
using correct
script tag placement,

00:37:25.167 --> 00:37:27.701
optimal cache headers
and minimizing images.

00:37:27.701 --> 00:37:29.000
So I'm going
to go through these,

00:37:29.000 --> 00:37:30.934
explain a little bit about them,
and show some demos.

00:37:30.934 --> 00:37:33.467
Gzipping is
the biggest space saver.

00:37:33.467 --> 00:37:36.234
Everyone should definitely
be doing gzip,

00:37:36.234 --> 00:37:38.267
because you can get
70% space savings,

00:37:38.267 --> 00:37:39.901
and it usually is only

00:37:39.901 --> 00:37:43.667
one or two lines of config
on your server.

00:37:43.667 --> 00:37:46.701
Gzipping--everyone knows
about zipping a file.

00:37:46.701 --> 00:37:47.934
Gzipping's just the same.

00:37:47.934 --> 00:37:49.334
You compress it on the server.

00:37:49.334 --> 00:37:50.767
When someone requests
a resource,

00:37:50.767 --> 00:37:52.267
and then on the client,

00:37:52.267 --> 00:37:53.601
they're going to get
this zipped response.

00:37:53.601 --> 00:37:56.334
They're going to unzip it
and then evaluate it.

00:37:56.334 --> 00:37:58.400
One interesting thing
to note

00:37:58.400 --> 00:37:59.968
is that I was using AppEngine

00:37:59.968 --> 00:38:01.300
so I didn't have
to worry about this at all.

00:38:01.300 --> 00:38:02.934
AppEngine has it
on by default.

00:38:02.934 --> 00:38:06.133
But for things like Apache,
it's really easy to Google

00:38:06.133 --> 00:38:08.367
how to do this.

00:38:08.367 --> 00:38:13.901
So let's take a look
at the space savings I got.

00:38:13.901 --> 00:38:17.367
Going to go into Why Slow...

00:38:17.367 --> 00:38:22.567
and take a look
at the components.

00:38:22.567 --> 00:38:26.200
So here you can see
a couple of the JavaScript files

00:38:26.200 --> 00:38:27.601
that I have.

00:38:27.601 --> 00:38:30.300
And I went from
an original 55K file

00:38:30.300 --> 00:38:32.667
and now it's about 18K.

00:38:32.667 --> 00:38:35.934
And then a 35K file
down to a 10K file.

00:38:35.934 --> 00:38:38.267
So for adding, you know,
one line to your config

00:38:38.267 --> 00:38:40.400
it's pretty much the easiest
thing you can do

00:38:40.400 --> 00:38:43.868
to increase the performance
of your website.

00:38:43.868 --> 00:38:46.133
Minifying JavaScript--
what that is is--

00:38:46.133 --> 00:38:47.968
well, minifying JavaScript
as well as CSS.

00:38:47.968 --> 00:38:50.300
What that is is just taking out
unnecessary characters--

00:38:50.300 --> 00:38:52.534
newlines, comments,
tabs, spaces.

00:38:52.534 --> 00:38:54.133
There's a bunch of tools
for doing it.

00:38:54.133 --> 00:38:57.934
There's also tools
for doing JavaScript compiling,

00:38:57.934 --> 00:39:01.834
where you actually use,
like, Rhino or something

00:39:01.834 --> 00:39:04.934
to evaluate the JavaScript
and change some of the logic.

00:39:04.934 --> 00:39:07.400
But these
are just minifiers.

00:39:07.400 --> 00:39:09.501
I use YUI Compressor.

00:39:09.501 --> 00:39:11.000
It's good because, you know,

00:39:11.000 --> 00:39:12.534
I can use it
in my open source project.

00:39:12.534 --> 00:39:16.667
It's stable and it's fast
and does a good job for me.

00:39:16.667 --> 00:39:19.734
Minifying JavaScript
is bad for production,

00:39:19.734 --> 00:39:21.434
or, excuse me,
good for production

00:39:21.434 --> 00:39:22.834
but bad for development.

00:39:22.834 --> 00:39:24.067
And the reason why
is because

00:39:24.067 --> 00:39:25.868
it takes out all
the unnecessary characters.

00:39:25.868 --> 00:39:27.267
So if you're developing,

00:39:27.267 --> 00:39:29.868
you want to be able to easily
read and edit your code

00:39:29.868 --> 00:39:31.834
and you also want to be able
to find errors.

00:39:31.834 --> 00:39:34.534
So if you use
minified JavaScript

00:39:34.534 --> 00:39:36.067
while you're developing
and you have an error,

00:39:36.067 --> 00:39:40.567
then the error's pretty much
always going to be on line 1.

00:39:40.567 --> 00:39:43.067
[audience quietly chuckles]

00:39:43.067 --> 00:39:44.868
You can save 20% or 30%
of the size.

00:39:44.868 --> 00:39:46.400
So I'm just going to show
you guys really quick

00:39:46.400 --> 00:39:48.634
what it was like for me.

00:39:48.634 --> 00:39:50.701
Grab this script here.

00:39:50.701 --> 00:39:52.868
Just want to show you guys
one line of it.

00:39:52.868 --> 00:39:54.167
This is
the only important line.

00:39:54.167 --> 00:39:56.734
This is the line
that does the magic.

00:39:56.734 --> 00:40:00.834
It compresses
my interactive logic script.

00:40:00.834 --> 00:40:03.467
Just go ahead
and run that script.

00:40:07.567 --> 00:40:10.534
So here is my ugly
minified JavaScript.

00:40:10.534 --> 00:40:14.033
So you can tell why you wouldn't
want to develop with this

00:40:14.033 --> 00:40:15.534
because it's
very hard to read.

00:40:15.534 --> 00:40:17.267
But it's perfect
for production

00:40:17.267 --> 00:40:19.234
because it's optimized.

00:40:19.234 --> 00:40:21.000
Down here are the sizes.

00:40:21.000 --> 00:40:23.701
So before
I ran minify on it,

00:40:23.701 --> 00:40:25.200
it was about 40K.

00:40:25.200 --> 00:40:27.501
And then down here
after I minified it

00:40:27.501 --> 00:40:29.033
it was 22K.

00:40:29.033 --> 00:40:30.934
So in this case,
I got a 50% savings.

00:40:30.934 --> 00:40:32.801
But that's not
the actual case,

00:40:32.801 --> 00:40:35.334
because after I gzip
these two files

00:40:35.334 --> 00:40:38.200
I only get about
a 30% savings.

00:40:44.033 --> 00:40:45.234
Script tag placement--

00:40:45.234 --> 00:40:47.234
this definitely
can make or break

00:40:47.234 --> 00:40:48.801
your web application.

00:40:48.801 --> 00:40:50.267
You have to be very wary

00:40:50.267 --> 00:40:52.000
of where you're putting
the script tags on the page.

00:40:52.000 --> 00:40:53.734
If you put lots
of script tags on your page,

00:40:53.734 --> 00:40:55.000
it's definitely going
to slow it down.

00:40:55.000 --> 00:40:57.267
And if you put script tags
in the head element,

00:40:57.267 --> 00:41:00.300
that's bad, because as
the browser is going down

00:41:00.300 --> 00:41:02.133
and parsing things
on the HTML page,

00:41:02.133 --> 00:41:03.901
it's going to get
to these scripts

00:41:03.901 --> 00:41:05.234
and it's going to start

00:41:05.234 --> 00:41:06.801
downloading and executing
the scripts.

00:41:06.801 --> 00:41:08.167
But that's not important
to the user.

00:41:08.167 --> 00:41:09.367
The user doesn't care.

00:41:09.367 --> 00:41:11.133
The user wants to see
the layout of your page

00:41:11.133 --> 00:41:12.400
when they
first go to it.

00:41:12.400 --> 00:41:13.801
They're not going to be able

00:41:13.801 --> 00:41:15.434
to use any function
on your page

00:41:15.434 --> 00:41:17.601
in the first 100 milliseconds
that it's loaded.

00:41:17.601 --> 00:41:20.734
So you don't need to have
the function there for them.

00:41:20.734 --> 00:41:21.934
Instead it's more important

00:41:21.934 --> 00:41:23.601
that a user sees everything
immediately.

00:41:23.601 --> 00:41:25.934
And so by putting
script tags in the head,

00:41:25.934 --> 00:41:27.601
you're basically
slowing down the browser

00:41:27.601 --> 00:41:29.934
from rendering
what it, you know,

00:41:29.934 --> 00:41:31.534
the--the layout.

00:41:31.534 --> 00:41:32.734
So what you do want to do

00:41:32.734 --> 00:41:34.467
is put script tags
at the bottom of the body.

00:41:34.467 --> 00:41:38.067
You want to dynamically
append script tags as well.

00:41:38.067 --> 00:41:39.267
That's--that's even better.

00:41:39.267 --> 00:41:40.501
But you can only do that

00:41:40.501 --> 00:41:42.868
if the scripts
don't rely on each other.

00:41:42.868 --> 00:41:46.834
So I'm going to show
some timelines.

00:41:46.834 --> 00:41:50.801
I like to use
Safari's editor--

00:41:50.801 --> 00:41:55.934
or, excuse me,
network timeline.

00:41:55.934 --> 00:41:59.901
Let's open up
all three of these.

00:41:59.901 --> 00:42:02.667
So I'm just printing out
the code to the page

00:42:02.667 --> 00:42:05.701
so you guys
can see it.

00:42:05.701 --> 00:42:07.133
So this is the bad way.

00:42:07.133 --> 00:42:08.334
This is how you
don't want to do it.

00:42:08.334 --> 00:42:10.534
This is adding
five JavaScripts in

00:42:10.534 --> 00:42:11.801
to the head element.

00:42:11.801 --> 00:42:13.367
It's bad because
there's a lot of them.

00:42:13.367 --> 00:42:14.968
It's better to just have
one JavaScript

00:42:14.968 --> 00:42:16.300
than it is to have five.

00:42:16.300 --> 00:42:18.701
And it's bad because
it's in the head element

00:42:18.701 --> 00:42:20.133
and it doesn't allow
the rest of the page

00:42:20.133 --> 00:42:21.400
to render first.

00:42:21.400 --> 00:42:23.300
You'll see over here,
by doing it this way,

00:42:23.300 --> 00:42:25.000
you've got
this stair step effect.

00:42:25.000 --> 00:42:27.234
So one JavaScript
downloads and executes,

00:42:27.234 --> 00:42:28.734
then the next,
then the next,

00:42:28.734 --> 00:42:31.934
then the next--
so bad behavior.

00:42:31.934 --> 00:42:36.934
Better behavior would be
to just have one single script

00:42:36.934 --> 00:42:40.267
and have it
at the bottom of the body.

00:42:40.267 --> 00:42:44.167
So taking a look at this...

00:42:44.167 --> 00:42:46.133
gives you pretty much
what you would expect.

00:42:46.133 --> 00:42:49.467
Just one JavaScript loading.

00:42:49.467 --> 00:42:55.300
It's definitely faster.

00:42:55.300 --> 00:43:00.200
And here is how you would
dynamically append the scripts.

00:43:00.200 --> 00:43:01.634
Remember:
you only do this

00:43:01.634 --> 00:43:04.534
if the scripts don't
depend on each other.

00:43:04.534 --> 00:43:06.934
So up here I've got
my nice little function,

00:43:06.934 --> 00:43:08.200
dynamicallyAppendScript.

00:43:08.200 --> 00:43:09.834
Just going to create
a new script element,

00:43:09.834 --> 00:43:12.000
assign its source,
give it a type,

00:43:12.000 --> 00:43:13.501
and append it.

00:43:13.501 --> 00:43:17.000
Down here I am going to take
my five JavaScripts

00:43:17.000 --> 00:43:18.501
and I'm going to load them.

00:43:18.501 --> 00:43:20.367
And you'll notice
that the benefit of this

00:43:20.367 --> 00:43:23.234
is that when you
dynamically append them,

00:43:23.234 --> 00:43:26.968
all of the JavaScript
will download in parallel.

00:43:26.968 --> 00:43:28.701
So the browser
can start downloading

00:43:28.701 --> 00:43:30.133
all five of these JavaScripts,

00:43:30.133 --> 00:43:32.434
and then it'll execute them
as soon as they download.

00:43:32.434 --> 00:43:35.067
So that would be bad
if the JavaScript

00:43:35.067 --> 00:43:37.267
has to execute
in a certain order.

00:43:37.267 --> 00:43:39.534
But otherwise,
it's certainly better

00:43:39.534 --> 00:43:45.801
than putting a bunch of script
tags at the top of your page.

00:43:45.801 --> 00:43:47.634
Cache headers--
so I'm sure you guys

00:43:47.634 --> 00:43:50.300
are familiar
with setting cache headers.

00:43:50.300 --> 00:43:51.734
Basically just
what you want to do

00:43:51.734 --> 00:43:53.968
is set the Expires header
far in the future.

00:43:53.968 --> 00:43:56.934
What we do
is we set our headers

00:43:56.934 --> 00:44:00.167
for about a year
in advance.

00:44:00.167 --> 00:44:02.767
And we just use
different names for our files.

00:44:02.767 --> 00:44:04.734
So we version
our resources

00:44:04.734 --> 00:44:06.400
with an md5sum.

00:44:06.400 --> 00:44:09.167
So if, you know,
JavaScript version 1.JS,

00:44:09.167 --> 00:44:10.601
set it for a year
in advance,

00:44:10.601 --> 00:44:12.267
and so that takes advantage
of the cache.

00:44:12.267 --> 00:44:15.734
If we never change
the version of our JavaScript

00:44:15.734 --> 00:44:17.033
for a full year,

00:44:17.033 --> 00:44:18.767
then everyone out there
has got it cached for a year.

00:44:18.767 --> 00:44:20.734
Otherwise, you know,
if 15 days later

00:44:20.734 --> 00:44:22.701
we decide we need
to release a new version,

00:44:22.701 --> 00:44:25.934
then we'll release
JavaScript 2.JS.

00:44:25.934 --> 00:44:27.167
And since it's a new name,

00:44:27.167 --> 00:44:28.834
it won't be associated
with the cache

00:44:28.834 --> 00:44:30.100
of the other version,

00:44:30.100 --> 00:44:31.801
so we've got
the best of both worlds.

00:44:31.801 --> 00:44:34.934
We can release new versions
as fast as we want,

00:44:34.934 --> 00:44:36.467
but if we don't release
a new version

00:44:36.467 --> 00:44:39.100
then it's going to be
cached for a long time.

00:44:39.100 --> 00:44:41.167
So if you want to see
what other servers--

00:44:41.167 --> 00:44:43.701
or, excuse me,
other companies are doing

00:44:43.701 --> 00:44:45.033
with cache editors,

00:44:45.033 --> 00:44:46.534
you can use any
of these tools below

00:44:46.534 --> 00:44:49.167
to inspect the requests that
are happening in your browser.

00:44:49.167 --> 00:44:51.667
And you can
actually inspect

00:44:51.667 --> 00:44:53.200
their cache editors.

00:44:53.200 --> 00:44:54.834
And setting cache editor
is pretty easy--

00:44:54.834 --> 00:44:58.300
again, you just do it
on the server in the config.

00:44:58.300 --> 00:45:01.567
Oops. Didn't mean
to skip out of there.

00:45:01.567 --> 00:45:03.667
Minimizing images--so images
take up a lot of space.

00:45:03.667 --> 00:45:04.968
And there's two things
that you can do

00:45:04.968 --> 00:45:06.267
to prevent this:

00:45:06.267 --> 00:45:10.267
compressing images
and using image spriting.

00:45:10.267 --> 00:45:12.267
Here are three images.

00:45:12.267 --> 00:45:14.267
And I'm going to show you
how to compress them

00:45:14.267 --> 00:45:15.868
and then how to sprite them.

00:45:15.868 --> 00:45:18.400
So first I want to use
this cool tool

00:45:18.400 --> 00:45:22.834
that--that the Yahoo guys
just bought.

00:45:22.834 --> 00:45:26.701
It's called Smush.it.

00:45:26.701 --> 00:45:28.100
Go ahead and click that,

00:45:28.100 --> 00:45:31.601
and it's going to take
all of the images on my page

00:45:31.601 --> 00:45:33.934
and it's going
to optimize them for the web.

00:45:33.934 --> 00:45:35.200
So they're still
going to have, you know,

00:45:35.200 --> 00:45:36.634
roughly the same quality.

00:45:36.634 --> 00:45:38.167
You won't be able to tell
a difference in the quality

00:45:38.167 --> 00:45:39.434
with your eye.

00:45:39.434 --> 00:45:40.767
But it's going to make them
a lot smaller.

00:45:40.767 --> 00:45:42.267
So this is kind of
the same thing

00:45:42.267 --> 00:45:45.133
as if you go into Photoshop
and when you've got a picture

00:45:45.133 --> 00:45:48.734
you click "export
for web optimization".

00:45:48.734 --> 00:45:50.467
See, here I saved 12K,

00:45:50.467 --> 00:45:52.067
which is actually
a significant amount.

00:45:52.067 --> 00:45:53.868
Let's say that,
you know--

00:45:53.868 --> 00:45:55.534
the Playground
is 10K right now.

00:45:55.534 --> 00:45:57.968
So that would be saving 10%
on the website.

00:45:57.968 --> 00:45:59.968
So when you have
a lot of images

00:45:59.968 --> 00:46:01.367
and you optimize them,

00:46:01.367 --> 00:46:04.634
you can actually save
a decent amount of bandwidth.

00:46:04.634 --> 00:46:06.868
Spriting images--
so spriting images

00:46:06.868 --> 00:46:08.634
is when you take
multiple images

00:46:08.634 --> 00:46:10.133
and turn them
into one image,

00:46:10.133 --> 00:46:12.667
and then the way that you
address each different image

00:46:12.667 --> 00:46:15.133
is with CSS rules.

00:46:15.133 --> 00:46:16.501
So here are three images.

00:46:16.501 --> 00:46:18.868
Here is what those
three images would look like

00:46:18.868 --> 00:46:20.901
as one image.

00:46:20.901 --> 00:46:25.567
You can tell that I'm just
accessing sprite.png here.

00:46:25.567 --> 00:46:27.267
And the way
that I created this

00:46:27.267 --> 00:46:29.868
is with this nice tool
that I found online.

00:46:29.868 --> 00:46:32.934
It's called Sprite Gen.,
and it's very simple to use.

00:46:32.934 --> 00:46:34.767
You just zip up
all of your images.

00:46:34.767 --> 00:46:37.400
So I've got an archive
of all my images.

00:46:37.400 --> 00:46:39.100
There are some options
that you set,

00:46:39.100 --> 00:46:41.434
and then you click
"Create Sprite"

00:46:41.434 --> 00:46:44.434
and it's going to give me
my image right here.

00:46:44.434 --> 00:46:45.634
I can download it.

00:46:45.634 --> 00:46:47.801
And I can also grab
the CSS rules.

00:46:47.801 --> 00:46:49.100
So these are the rules

00:46:49.100 --> 00:46:53.534
for displaying
each separate image.

00:46:53.534 --> 00:46:55.501
And so why would you
want to use image spreading?

00:46:55.501 --> 00:46:56.801
The reason why is because

00:46:56.801 --> 00:46:58.734
if you've got 50 images
on your page,

00:46:58.734 --> 00:47:01.367
then the browser's going to have
to do 50 separate requests

00:47:01.367 --> 00:47:02.601
for those images.

00:47:02.601 --> 00:47:04.167
It's much better
for the browser

00:47:04.167 --> 00:47:05.601
to just do one request

00:47:05.601 --> 00:47:07.701
for the image
for all your stuff.

00:47:07.701 --> 00:47:09.501
And actually,
if you look through

00:47:09.501 --> 00:47:11.501
a lot of different properties
that Google owns--

00:47:11.501 --> 00:47:13.601
and I'm sure
other major properties

00:47:13.601 --> 00:47:16.067
or other major companies
like Yahoo--

00:47:16.067 --> 00:47:18.267
you'll be able to find
their sprites very easily.

00:47:18.267 --> 00:47:19.868
Like, there's--
there's giant sprites

00:47:19.868 --> 00:47:21.534
for YouTube, for instance,

00:47:21.534 --> 00:47:23.067
and you'll find,
like, one image

00:47:23.067 --> 00:47:25.434
that has all the icons
that you'll recognize

00:47:25.434 --> 00:47:28.367
that are used
all across YouTube.

00:47:28.367 --> 00:47:31.467
Great, so I covered
a couple of different topics.

00:47:31.467 --> 00:47:33.701
Maybe I bored some of you
with too much code or whatever,

00:47:33.701 --> 00:47:35.300
but if you guys
have any questions

00:47:35.300 --> 00:47:37.601
please feel free
to come up to the mics,

00:47:37.601 --> 00:47:39.167
and thank you for coming.

00:47:39.167 --> 00:47:47.300
[applause]

00:47:53.868 --> 00:47:55.801
woman: That was
a very interesting talk.

00:47:55.801 --> 00:47:57.133
I have a question, though.

00:47:57.133 --> 00:47:59.767
Regarding your breakpoints,

00:47:59.767 --> 00:48:02.934
the place where you had written
the code for the breakpoints,

00:48:02.934 --> 00:48:06.634
and you said it's--the user's
code is actually running

00:48:06.634 --> 00:48:07.901
on a different domain.

00:48:07.901 --> 00:48:09.067
Lisbakken:
Yeah.

00:48:09.067 --> 00:48:10.400
woman: In an iFrame.
Lisbakken: Yeah.

00:48:10.400 --> 00:48:14.434
woman: So if you could go
to that slide, please.

00:48:14.434 --> 00:48:18.434
So how is the user's code
kind of getting embedded

00:48:18.434 --> 00:48:20.367
in your [indistinct] spot,

00:48:20.367 --> 00:48:23.067
when it's actually
in an iFrame.

00:48:23.067 --> 00:48:27.934
Lisbakken:
Okay, so...so you're asking

00:48:27.934 --> 00:48:30.300
how did I get the code
and put it in the...

00:48:30.300 --> 00:48:31.567
or are you asking me
how does it get to the iFrame?

00:48:31.567 --> 00:48:33.400
woman: Yeah--
what I'm asking is

00:48:33.400 --> 00:48:37.968
because this code, the var
"A" equals text and alert

00:48:37.968 --> 00:48:40.601
is actually a part
of the iFrame code.

00:48:40.601 --> 00:48:43.000
So how would it
actually get--

00:48:43.000 --> 00:48:45.400
how would you execute it
at that point

00:48:45.400 --> 00:48:47.067
after your breakpoint
is done?

00:48:47.067 --> 00:48:50.467
Lisbakken: Yeah,
so the answer is you can't.

00:48:50.467 --> 00:48:51.701
The way that it happens

00:48:51.701 --> 00:48:54.167
is that right here
when I'm typing code,

00:48:54.167 --> 00:48:55.734
when I type,
you know, "alert"--

00:48:55.734 --> 00:48:57.300
woman: Mm-hmm.

00:48:57.300 --> 00:48:59.133
Lisbakken: And I put
a breakpoint in right here,

00:48:59.133 --> 00:49:02.067
as soon as I go
to debug this code

00:49:02.067 --> 00:49:03.467
and click "Run"

00:49:03.467 --> 00:49:07.267
what's going to happen
is in my Playground code

00:49:07.267 --> 00:49:10.934
I'm going to have
this block of text,

00:49:10.934 --> 00:49:13.801
I'm going to parse
this whole block of text,

00:49:13.801 --> 00:49:15.601
and I'm going to add in
my breakpoint code.

00:49:15.601 --> 00:49:18.267
And then after I parse in

00:49:18.267 --> 00:49:19.834
that code that I
just showed you before,

00:49:19.834 --> 00:49:21.968
then I send it
to the other server,

00:49:21.968 --> 00:49:24.701
and then it sends me back
the unique URL

00:49:24.701 --> 00:49:26.000
and then I create
an iFrame to it.

00:49:26.000 --> 00:49:27.467
So you can't do it
on the fly.

00:49:27.467 --> 00:49:29.167
woman: Okay.
Lisbakken: 'Cause--yeah.

00:49:29.167 --> 00:49:30.467
woman: Okay.
Lisbakken: Does that make sense?

00:49:30.467 --> 00:49:33.300
woman: Yeah. And I have
another question for you.

00:49:33.300 --> 00:49:36.167
So the place where you

00:49:36.167 --> 00:49:38.133
dynamically appended
the scripts--

00:49:38.133 --> 00:49:41.901
Lisbakken: Yeah.

00:49:41.901 --> 00:49:45.467
woman: Is that going to be
five separate requests

00:49:45.467 --> 00:49:47.300
or is it going to be
one single request?

00:49:47.300 --> 00:49:48.767
Lisbakken: It's going to be
five separate.

00:49:48.767 --> 00:49:51.033
woman: Okay. Thanks.
Lisbakken: Yep.

00:49:51.033 --> 00:49:54.567
man: So on your "add properties
to an object" slide...

00:49:54.567 --> 00:49:55.901
Lisbakken: On which slide?

00:49:55.901 --> 00:49:58.067
man: Yeah, if you could just
jump back to that sl--

00:49:58.067 --> 00:50:00.033
oh, yeah, sorry,
the co--

00:50:00.033 --> 00:50:01.400
Lisbakken:
This one right here?

00:50:01.400 --> 00:50:03.033
man: No, actually
the code, sorry.

00:50:03.033 --> 00:50:04.267
In the Playground.

00:50:04.267 --> 00:50:05.501
Lisbakken: One of
the JavaScript ones?

00:50:05.501 --> 00:50:07.334
man: Yeah.
Lisbakken: Object Literals?

00:50:07.334 --> 00:50:09.367
man: No, add properties
to an object...

00:50:09.367 --> 00:50:10.901
Lisbakken: Oh. Yeah.
man: The second one.

00:50:10.901 --> 00:50:15.033
Right. The a.function3
equals function, right?

00:50:15.033 --> 00:50:17.367
This code, you state,
is the function.

00:50:17.367 --> 00:50:19.400
But what happens
if the function's called

00:50:19.400 --> 00:50:22.267
within an on--
an onclick or something?

00:50:22.267 --> 00:50:25.601
Because at that point the scope
is the event, right?

00:50:25.601 --> 00:50:27.133
Lisbakken:
It's the event handler.

00:50:27.133 --> 00:50:30.400
So...well, actually, no.
It'll refer to the DOM element.

00:50:30.400 --> 00:50:33.501
So if you referred to this
on an onclick,

00:50:33.501 --> 00:50:37.133
then you would get
the element of whatever...

00:50:37.133 --> 00:50:38.934
man: Right, so--
so then--

00:50:38.934 --> 00:50:40.100
what, I mean,
what are you doing--

00:50:40.100 --> 00:50:41.801
what do you do
in that case?

00:50:41.801 --> 00:50:43.267
Lisbakken: What do you mean,
what do you do with it?

00:50:43.267 --> 00:50:44.534
Oh, what do you do
in that case?

00:50:44.534 --> 00:50:46.267
man: Yeah, because
the property's...

00:50:46.267 --> 00:50:49.834
property1 and property2
are not going to be accessible

00:50:49.834 --> 00:50:52.167
at that point in time, so how
do you scope this function

00:50:52.167 --> 00:50:54.534
such that
I can still call this

00:50:54.534 --> 00:50:58.501
as part of--
in response to a click

00:50:58.501 --> 00:50:59.734
or some other function?

00:50:59.734 --> 00:51:01.167
I mean, I want that--

00:51:01.167 --> 00:51:03.033
I want still to be able to get
to property1 and property2.

00:51:03.033 --> 00:51:04.267
Lisbakken:
Oh, okay. So...

00:51:04.267 --> 00:51:05.400
someone said it down here.

00:51:05.400 --> 00:51:07.400
Was it you, Jeremy?

00:51:07.400 --> 00:51:09.868
Yeah, so that was one of the
other examples that I showed--

00:51:09.868 --> 00:51:12.467
that was
in closure for events.

00:51:12.467 --> 00:51:14.801
So because in this event

00:51:14.801 --> 00:51:18.167
when I have
an onclick handler--

00:51:18.167 --> 00:51:23.467
this is going to be
referring to button.

00:51:23.467 --> 00:51:25.133
man: Right.
Lisbakken: Right?

00:51:25.133 --> 00:51:27.567
And so, you know, I don't--
I don't want that.

00:51:27.567 --> 00:51:28.734
Instead,
what I wanted

00:51:28.734 --> 00:51:30.868
was I wanted
this variable "I"

00:51:30.868 --> 00:51:32.234
to be passed in.

00:51:32.234 --> 00:51:34.033
And so what I had done
is I'd used closure

00:51:34.033 --> 00:51:36.734
to basically snapshot "I"

00:51:36.734 --> 00:51:40.100
and get it
into this outer function

00:51:40.100 --> 00:51:43.534
so that the inner function
could then call it.

00:51:43.534 --> 00:51:46.234
[indistinct chatter]

00:51:46.234 --> 00:51:48.334
The--the--so the way
that closure works

00:51:48.334 --> 00:51:50.000
is that an inner function

00:51:50.000 --> 00:51:53.334
can access the context
of the outer function.

00:51:53.334 --> 00:51:54.701
man: That--
I know that part.

00:51:54.701 --> 00:51:56.467
But I'm just saying that--
I'm asking you

00:51:56.467 --> 00:51:57.968
how would you
rewrite that function

00:51:57.968 --> 00:52:01.000
so that you do still have
the scope of "A"

00:52:01.000 --> 00:52:03.434
in the context
of the fact

00:52:03.434 --> 00:52:05.334
that it's being called
within an event?

00:52:05.334 --> 00:52:07.200
Lisbakken: What you can do
is, like,

00:52:07.200 --> 00:52:10.567
you can actually say
like var self is equal to this,

00:52:10.567 --> 00:52:13.334
and then I could pass
self in.

00:52:13.334 --> 00:52:15.400
And then up here
I'd have self

00:52:15.400 --> 00:52:17.567
and then I could call
self.--

00:52:17.567 --> 00:52:20.133
oh, I forgot--
property1.

00:52:20.133 --> 00:52:22.334
Does that make sense?
man: Sure.

00:52:22.334 --> 00:52:23.801
Lisbakken: You could
essentially grab

00:52:23.801 --> 00:52:25.300
the--the--
this keyword

00:52:25.300 --> 00:52:26.634
in whatever you are.

00:52:26.634 --> 00:52:30.801
So in the last sample, if--
Let's see, where was it?

00:52:30.801 --> 00:52:32.133
man: Yeah, essentially
creating a closure

00:52:32.133 --> 00:52:33.434
where you're going to keep...

00:52:33.434 --> 00:52:35.267
Lisbakken: So in here
if I were to create, like,

00:52:35.267 --> 00:52:38.167
var button is equal to,
you know,

00:52:38.167 --> 00:52:42.934
document.createElement
"A", a new anchor,

00:52:42.934 --> 00:52:44.767
and say button.onclick

00:52:44.767 --> 00:52:48.868
is equal to a new function.

00:52:48.868 --> 00:52:52.167
If I wanted to pass in...

00:52:52.167 --> 00:52:55.000
if I wanted the inner function
to be able to have access

00:52:55.000 --> 00:52:57.834
to this.property1,

00:52:57.834 --> 00:52:59.968
then what I would do
is I would go like this.

00:52:59.968 --> 00:53:01.801
man: Just total property
which is...

00:53:01.801 --> 00:53:04.901
Lisbakken: I would say
self is equal to this,

00:53:04.901 --> 00:53:06.334
so now I've got access to it.

00:53:06.334 --> 00:53:09.534
And call buttonClick.

00:53:09.534 --> 00:53:11.067
And then pass in self.

00:53:11.067 --> 00:53:15.734
And up here
I'd create my closure.

00:53:15.734 --> 00:53:17.667
Click...

00:53:31.467 --> 00:53:32.767
So I just did that
on the fly.

00:53:32.767 --> 00:53:34.934
Let's see if it works.

00:53:34.934 --> 00:53:36.501
Oh, wait, I didn't--

00:53:36.501 --> 00:53:38.133
I didn't
put the button anywhere.

00:53:38.133 --> 00:53:40.167
[all chuckle]

00:53:40.167 --> 00:53:45.467
Let's see...

00:53:45.467 --> 00:53:49.400
Get--what am I looking for?

00:53:49.400 --> 00:53:51.167
Why am I blanking right now?
Get...

00:53:51.167 --> 00:53:52.567
man: You could just
write down a function

00:53:52.567 --> 00:53:54.267
which does the self.--

00:53:54.267 --> 00:53:58.100
Lisbakken:
getElementsByTagName

00:53:58.100 --> 00:54:03.901
body.appendChildButton.

00:54:03.901 --> 00:54:06.734
[indistinct chatter]
Oh. Thanks, guys.

00:54:06.734 --> 00:54:09.534
[chuckles]
This is not going to work

00:54:09.534 --> 00:54:11.434
because this is
at the top of the document.

00:54:11.434 --> 00:54:14.534
Hold on a sec, let me--
[all laugh]

00:54:14.534 --> 00:54:16.601
The body won't be
defined at that point.

00:54:16.601 --> 00:54:20.200
So let's go ahead
and edit the HTML.

00:54:20.200 --> 00:54:22.467
Oh, okay. Looks like
the JavaScript is in the body.

00:54:22.467 --> 00:54:24.234
Okay.
Please work.

00:54:24.234 --> 00:54:25.934
man: [chuckles]

00:54:25.934 --> 00:54:27.534
Lisbakken:
[groans] Oh.

00:54:27.534 --> 00:54:30.167
The--the button
has no inner HTML.

00:54:30.167 --> 00:54:35.968
Come on, guys.
[all laugh]

00:54:35.968 --> 00:54:38.667
There we go.
There's my button.

00:54:38.667 --> 00:54:40.601
There we go--
that's property1.

00:54:40.601 --> 00:54:45.267
[applause]

00:54:45.267 --> 00:54:46.534
man: Awesome.
You did write...

00:54:46.534 --> 00:54:48.434
Lisbakken:
So I could export this

00:54:48.434 --> 00:54:49.968
and go ahead
and send it to you.

00:54:49.968 --> 00:54:52.000
[all laugh]

00:54:52.000 --> 00:54:55.534
man: Thanks.

00:54:55.534 --> 00:54:57.033
man: I was just
going to ask when you--

00:54:57.033 --> 00:54:59.934
before when you overrided
the string.concat...

00:54:59.934 --> 00:55:01.701
Lisbakken: Yeah.

00:55:01.701 --> 00:55:03.200
man: I was curious
as to whether or not

00:55:03.200 --> 00:55:06.300
it would override the plus
operator between strings,

00:55:06.300 --> 00:55:07.634
and then also,
if it doesn't,

00:55:07.634 --> 00:55:09.367
how would you--
how could you--

00:55:09.367 --> 00:55:11.234
can you, sorry...

00:55:11.234 --> 00:55:12.501
Lisbakken:
Override the plus operator?

00:55:12.501 --> 00:55:14.467
man: Override the plus operator,
like, in C++?

00:55:14.467 --> 00:55:16.300
Lisbakken:
I don't think that's possible.

00:55:16.300 --> 00:55:18.300
Maybe someone else knows?
man: You cannot.

00:55:18.300 --> 00:55:20.367
Lisbakken: I don't think so.
Yeah, you cannot.

00:55:20.367 --> 00:55:21.868
man: So--but so
by overriding concat,

00:55:21.868 --> 00:55:23.868
string plus string would
still just concatenate?

00:55:23.868 --> 00:55:25.234
Lisbakken: 'Cause--yeah,
you can only do it

00:55:25.234 --> 00:55:27.067
with, like, with types.

00:55:27.067 --> 00:55:28.400
So it's an operator.

00:55:28.400 --> 00:55:30.601
man: Okay.
Lisbakken: Yep.

00:55:30.601 --> 00:55:33.067
man: Thanks.
Lisbakken: Yep.

00:55:33.067 --> 00:55:35.067
man: Totally
unrelated question--

00:55:35.067 --> 00:55:37.701
I'm having a problem trying
to control the context

00:55:37.701 --> 00:55:40.367
of document.write.

00:55:40.367 --> 00:55:42.734
I've got an issue where
I'm dropping something

00:55:42.734 --> 00:55:44.868
and I--I wish
I could move that.

00:55:44.868 --> 00:55:47.267
And let's say, you know,
let's say I have an add code

00:55:47.267 --> 00:55:49.534
and it's--
when I get it back,

00:55:49.534 --> 00:55:51.167
it's using
document.write.

00:55:51.167 --> 00:55:54.667
Have you had any--or heard
of any experiments

00:55:54.667 --> 00:55:56.100
where you can control that?

00:55:56.100 --> 00:55:59.234
Lisbakken: Generally, you
shouldn't use document.write.

00:55:59.234 --> 00:56:02.067
man: Yeah, I know, but
it's a third party, you know.

00:56:02.067 --> 00:56:03.501
Lisbakken: Oh, so you have
to use document.write?

00:56:03.501 --> 00:56:06.100
man: They are using
document.write in their code

00:56:06.100 --> 00:56:08.601
and we're just making
reference to the script.

00:56:08.601 --> 00:56:11.400
Lisbakken: Um...

00:56:11.400 --> 00:56:12.667
it sounds like
I'd have to see the code.

00:56:12.667 --> 00:56:13.901
So maybe
we can talk right after.

00:56:13.901 --> 00:56:15.300
man: All right.
Lisbakken: Would that be okay?

00:56:15.300 --> 00:56:18.067
man: Yeah.

00:56:18.067 --> 00:56:21.934
man: Hi. You had that trick
of sending your code to a server

00:56:21.934 --> 00:56:23.567
which then basically
sent it back to you

00:56:23.567 --> 00:56:25.767
with a unique URL
to stick in the iFrame.

00:56:25.767 --> 00:56:27.400
What would happen if you
pointed the iFrame

00:56:27.400 --> 00:56:28.601
at, like, a data URL?

00:56:28.601 --> 00:56:31.234
Lisbakken: At what?
man: A data URL.

00:56:31.234 --> 00:56:32.934
Lisbakken:
A data URL?

00:56:32.934 --> 00:56:34.300
man: I think
that's what it's called.

00:56:34.300 --> 00:56:35.767
It's like a URL where
you can hard-code some data

00:56:35.767 --> 00:56:37.100
and...is that
what it's called?

00:56:37.100 --> 00:56:38.300
Do people know
what I'm talking about?

00:56:38.300 --> 00:56:39.667
Lisbakken: I mean,
it's just going to--

00:56:39.667 --> 00:56:40.968
it's going to try
and render the iFrame,

00:56:40.968 --> 00:56:42.767
and since it's going to be
data and not HTML

00:56:42.767 --> 00:56:45.434
it's just going to fail.

00:56:45.434 --> 00:56:47.534
man: Okay.
Lisbakken: I mean...

00:56:47.534 --> 00:56:52.667
man: I'll have to try it.
Thanks.

00:56:52.667 --> 00:56:56.200
woman: Can you actually
change the prototype property

00:56:56.200 --> 00:56:57.968
for the function object
itself?

00:56:57.968 --> 00:56:59.767
And have you done
anything interesting

00:56:59.767 --> 00:57:01.868
and needed to do that ever?

00:57:01.868 --> 00:57:04.033
Lisbakken:
I believe you can.

00:57:04.033 --> 00:57:06.234
But it's a bad idea

00:57:06.234 --> 00:57:09.200
because everyone
uses functions, so...

00:57:09.200 --> 00:57:12.133
[all chuckle]
woman: All right. Thanks.

00:57:15.267 --> 00:57:16.601
man: Hi.

00:57:16.601 --> 00:57:19.100
Is it not possible to load

00:57:19.100 --> 00:57:21.267
JavaScript files dynamically

00:57:21.267 --> 00:57:23.467
as the document
is being loaded?

00:57:23.467 --> 00:57:25.467
Remember how you added
the five files at the end,

00:57:25.467 --> 00:57:26.901
and they were
running in parallel?

00:57:26.901 --> 00:57:29.667
Well, why not call--
as the document is loaded,

00:57:29.667 --> 00:57:31.167
have, like, points,

00:57:31.167 --> 00:57:33.634
which execute
dynamic loading?

00:57:33.634 --> 00:57:36.834
So you don't manually
code it in

00:57:36.834 --> 00:57:42.033
but the server
executes JavaScript code.

00:57:42.033 --> 00:57:43.767
So it renders
on the client side,

00:57:43.767 --> 00:57:46.033
JavaScript code for--
dynamically loading

00:57:46.033 --> 00:57:47.934
different JavaScript files,

00:57:47.934 --> 00:57:50.100
so that as
the document loads,

00:57:50.100 --> 00:57:52.801
on parallel the JavaScript files
will also load.

00:57:52.801 --> 00:57:54.667
Lisbakken:
So actually...

00:57:54.667 --> 00:57:56.834
my example
does actually do that.

00:57:56.834 --> 00:58:01.601
And let me show you
why really quick.

00:58:01.601 --> 00:58:05.834
So what happens is
my dynamicallyAppend--

00:58:05.834 --> 00:58:08.467
these happen
in the head element.

00:58:08.467 --> 00:58:11.801
And so what I'm doing
for each dynamicAppend

00:58:11.801 --> 00:58:14.067
is I'm appending it
to the head.

00:58:14.067 --> 00:58:17.167
So the browser right now
is parsing and executing

00:58:17.167 --> 00:58:18.834
all this code.

00:58:18.834 --> 00:58:20.701
Meanwhile imagine, right after
this script tag,

00:58:20.701 --> 00:58:23.100
I'm now adding all these
new script tags after it.

00:58:23.100 --> 00:58:25.968
So as soon as it's done
with this block of code,

00:58:25.968 --> 00:58:29.734
it's going to start
executing or downloading

00:58:29.734 --> 00:58:31.467
those scripts
that I've told it to do.

00:58:31.467 --> 00:58:33.601
But because they're
dynamically appended,

00:58:33.601 --> 00:58:35.234
it frees up
the browser thread.

00:58:35.234 --> 00:58:37.334
So the browser thread
sees it, and it goes,

00:58:37.334 --> 00:58:39.767
"Oh, here's the script tag
that I need to do."

00:58:39.767 --> 00:58:40.968
It starts downloading it,

00:58:40.968 --> 00:58:42.267
but then it moves past
and keeps going.

00:58:42.267 --> 00:58:43.667
So that's why
in the timeline

00:58:43.667 --> 00:58:46.467
you saw that--
well, this isn't in Safari.

00:58:46.467 --> 00:58:47.801
But in the timeline
that's why you saw

00:58:47.801 --> 00:58:49.300
they all started
at the same time.

00:58:49.300 --> 00:58:51.234
The reason why is because
browser thread came down,

00:58:51.234 --> 00:58:52.801
"Okay, I need to start
downloading this.

00:58:52.801 --> 00:58:54.334
Okay, I'm done.
I'll wait till it comes back."

00:58:54.334 --> 00:58:57.200
Executes, or comes--
finishes downloading

00:58:57.200 --> 00:58:58.601
before I
start executing it.

00:58:58.601 --> 00:59:00.734
man: I was thinking--
you're already doing it.

00:59:00.734 --> 00:59:02.734
I was thinking of
more of the line--same lines

00:59:02.734 --> 00:59:04.901
but you just
have a script tag without--

00:59:04.901 --> 00:59:07.767
type script,
dynamicLoad, endScript

00:59:07.767 --> 00:59:09.467
somewhere along the body.

00:59:09.467 --> 00:59:10.767
Not--not at the beginning

00:59:10.767 --> 00:59:12.734
but you essentially
break the body

00:59:12.734 --> 00:59:14.434
into different portions.
Lisbakken: Yeah.

00:59:14.434 --> 00:59:15.601
man: And then you
just load it

00:59:15.601 --> 00:59:16.734
at different parts
of the body.

00:59:16.734 --> 00:59:18.067
Lisbakken: Yeah.
man: But--yeah.

00:59:18.067 --> 00:59:20.434
That's cool.
Okay. Thanks.

00:59:23.000 --> 00:59:27.567
Lisbakken:
Anything else?

00:59:27.567 --> 00:59:30.901
man: Hi. Is it possible
to extend a namespace

00:59:30.901 --> 00:59:32.767
like you created with
the anonymous function

00:59:32.767 --> 00:59:35.434
across multiple
JavaScript files?

00:59:35.434 --> 00:59:37.033
Lisbakken: Yes.
man: Yes?

00:59:37.033 --> 00:59:39.734
Would you just make
a non-anonymous function and...

00:59:39.734 --> 00:59:41.501
Lisbakken:
You're just saying, like,

00:59:41.501 --> 00:59:45.467
use basically the same variables
across functions,

00:59:45.467 --> 00:59:48.601
but each file is gonna have
its own anonymous function.

00:59:48.601 --> 00:59:50.100
Is that what you're saying?

00:59:50.100 --> 00:59:52.634
man: Well, I saw that you
used the global namespace

00:59:52.634 --> 00:59:54.634
to--to pass those variables,

00:59:54.634 --> 00:59:56.701
but I was wondering if you could
keep it in the same namespace

00:59:56.701 --> 01:00:00.100
and not use
the global namespace.

01:00:00.100 --> 01:00:02.067
Lisbakken: I think I know
what you're talking about.

01:00:02.067 --> 01:00:04.501
Let me actually go
to the code that I wrote

01:00:04.501 --> 01:00:08.767
for the Playground and...

01:00:08.767 --> 01:00:12.834
see if--see, where is it--
anonymous functions?

01:00:12.834 --> 01:00:18.601
I had a link in here for...

01:00:18.601 --> 01:00:19.901
So what I'm doing here

01:00:19.901 --> 01:00:21.968
is right at the start
of all my code

01:00:21.968 --> 01:00:24.267
I'm declaring
anonymous function.

01:00:24.267 --> 01:00:25.968
And then all through here,
all this stuff

01:00:25.968 --> 01:00:27.901
is just local
to this function.

01:00:27.901 --> 01:00:31.167
It's never going to touch
the global namespace at all.

01:00:31.167 --> 01:00:33.033
Then at the very end,

01:00:33.033 --> 01:00:35.200
I go through
and I create this variable,

01:00:35.200 --> 01:00:36.934
"IS", on the global namespace.

01:00:36.934 --> 01:00:38.634
And it's going to be equal

01:00:38.634 --> 01:00:41.667
to a new instance
of all of my code.

01:00:41.667 --> 01:00:44.100
As so basically
I've created one pointer

01:00:44.100 --> 01:00:47.334
on the global object
that is now going to have--

01:00:47.334 --> 01:00:49.334
this one variable
is now going to have

01:00:49.334 --> 01:00:52.133
access to everything
that I've created inside.

01:00:52.133 --> 01:00:53.901
So I've been,
you know,

01:00:53.901 --> 01:00:55.667
I've kept my code very green.

01:00:55.667 --> 01:00:57.067
man: Yeah, yeah.
Lisbakken: No...

01:00:57.067 --> 01:00:59.334
minimal pollution.
man: Nice, okay.

01:00:59.334 --> 01:01:01.100
Lisbakken: Is it--
does that answer your question?

01:01:01.100 --> 01:01:03.133
man: It does. Yeah.
Lisbakken: Okay.

01:01:12.200 --> 01:01:13.634
Great.

01:01:13.634 --> 01:01:15.901
So for those of you out there
that are JavaScript experts,

01:01:15.901 --> 01:01:18.667
please, you know,
check out the project,

01:01:18.667 --> 01:01:20.100
fix my code for me,

01:01:20.100 --> 01:01:21.567
and--
[chuckles]

01:01:21.567 --> 01:01:23.567
create your own samples
with the framework,

01:01:23.567 --> 01:01:25.767
because
it's pretty easy to do.

01:01:25.767 --> 01:01:27.167
Yeah?

01:01:27.167 --> 01:01:29.400
man:
So my question is...

01:01:29.400 --> 01:01:31.133
I've heard the argument

01:01:31.133 --> 01:01:33.133
against gzipping as well.

01:01:33.133 --> 01:01:35.334
And I'm just wondering...

01:01:35.334 --> 01:01:37.300
like, I like the idea--
I've always liked the idea

01:01:37.300 --> 01:01:40.167
of minimizing
my JavaScript files.

01:01:40.167 --> 01:01:42.567
But, like, for instance,
one of the reasons

01:01:42.567 --> 01:01:44.901
jQuery doesn't gzip
their files anymore--

01:01:44.901 --> 01:01:46.167
they only minify them--

01:01:46.167 --> 01:01:49.701
is because they found that
the potential overhead

01:01:49.701 --> 01:01:52.734
from gzipping them--
from having to unzip them

01:01:52.734 --> 01:01:54.100
on the client side

01:01:54.100 --> 01:01:57.067
tended to be less effective

01:01:57.067 --> 01:01:59.133
than just
not zipping them at all.

01:01:59.133 --> 01:02:03.234
And I'm wondering when,
I guess, as a developer,

01:02:03.234 --> 01:02:06.067
you should consider
zipping your files

01:02:06.067 --> 01:02:07.767
as opposed
to just minifying them

01:02:07.767 --> 01:02:08.968
and throwing them
on the server?

01:02:08.968 --> 01:02:12.067
Lisbakken:
I have never heard that--

01:02:12.067 --> 01:02:13.434
that argument--
that the processing overhead

01:02:13.434 --> 01:02:15.400
is--takes more time.

01:02:15.400 --> 01:02:18.367
Because I'd imagine if someone
has a really slow connection

01:02:18.367 --> 01:02:19.534
and a slow computer--

01:02:19.534 --> 01:02:20.801
let's say
an 800 megahertz computer

01:02:20.801 --> 01:02:22.701
and a 56K modem--

01:02:22.701 --> 01:02:24.300
it's gonna
take a lot more time

01:02:24.300 --> 01:02:26.467
to download that extra 50K

01:02:26.467 --> 01:02:28.033
versus unzip it.

01:02:28.033 --> 01:02:30.067
But Steve Souders

01:02:30.067 --> 01:02:32.033
would definitely be
the better person to ask,

01:02:32.033 --> 01:02:35.067
'cause this is what he
studies at Google every day.

01:02:35.067 --> 01:02:36.934
So...
man: Pay him a visit.

01:02:36.934 --> 01:02:40.434
Lisbakken: Yep.
man: Thank you.

01:02:40.434 --> 01:02:43.467
Lisbakken: Uh-oh.
I know this guy.

01:02:43.467 --> 01:02:44.868
man: This is just
an easy question.

01:02:44.868 --> 01:02:47.334
Do you have office hours
today, man?

01:02:47.334 --> 01:02:48.534
Lisbakken:
I do have office hours today.

01:02:48.534 --> 01:02:49.934
[audience chuckles]
man: When are they?

01:02:49.934 --> 01:02:51.734
Lisbakken: I think they're
right after this session.

01:02:51.734 --> 01:02:53.400
man: Do you want everyone
here to come see you?

01:02:53.400 --> 01:02:55.501
Lisbakken:
No. I'm just kidding, yeah.

01:02:55.501 --> 01:02:57.534
If you guys have
any extra questions,

01:02:57.534 --> 01:02:59.601
please, it's just over
on the other side.

01:02:59.601 --> 01:03:02.667
You'll see all the booths
with windows on them

01:03:02.667 --> 01:03:04.567
and that's where all
the Googlers will hang out

01:03:04.567 --> 01:03:05.968
to answer questions.

01:03:05.968 --> 01:03:08.901
So I'll be over there
at the AJAX API booth.

01:03:08.901 --> 01:03:11.601
So...
please come see me.

01:03:11.601 --> 01:03:15.400
[chuckles]
Thanks, Dwight.

01:03:15.400 --> 01:03:19.834
[applause]

