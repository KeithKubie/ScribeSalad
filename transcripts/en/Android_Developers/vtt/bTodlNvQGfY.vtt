WEBVTT
Kind: captions
Language: en

00:00:04.890 --> 00:00:06.580
PHIL WEAVER: Good morning.

00:00:06.580 --> 00:00:07.460
Thank you for coming.

00:00:07.460 --> 00:00:10.450
To everyone on the Livestream,
thank you for watching.

00:00:10.450 --> 00:00:12.970
Thank you for your
interest in accessibility.

00:00:12.970 --> 00:00:14.050
My name's Phil Weaver.

00:00:14.050 --> 00:00:16.625
I'm here with Qasid
Sadiq and Isha Bobra.

00:00:16.625 --> 00:00:18.250
And we want to talk
to you this morning

00:00:18.250 --> 00:00:22.540
about demystifying Android
accessibility development.

00:00:22.540 --> 00:00:24.580
And what we mean
by demystifying is

00:00:24.580 --> 00:00:28.600
there's a tremendous amount of
complexity in accessibility.

00:00:28.600 --> 00:00:31.270
And as part of
Android, we're trying--

00:00:31.270 --> 00:00:34.720
I think our job is partly to
try to avoid having developers

00:00:34.720 --> 00:00:36.760
deal with that complexity.

00:00:36.760 --> 00:00:38.398
And we looked at
some of our APIs,

00:00:38.398 --> 00:00:40.690
we feel like we've maybe not
done as good a job on that

00:00:40.690 --> 00:00:41.900
as we should have.

00:00:41.900 --> 00:00:44.710
So what we want to do is
present some ideas here,

00:00:44.710 --> 00:00:47.290
overall idea of how we
think about accessibility

00:00:47.290 --> 00:00:54.000
and also some new
APIs we've done

00:00:54.000 --> 00:00:56.310
to try to simplify your
experience and some tools we

00:00:56.310 --> 00:01:00.015
have to talk about to help
you test your products.

00:01:00.015 --> 00:01:01.390
So I'm going to
do a bit of a run

00:01:01.390 --> 00:01:03.760
through of our
high level opinion.

00:01:03.760 --> 00:01:05.489
Qasid is going to
talk a bit about APIs.

00:01:05.489 --> 00:01:06.610
Isha's going to
talk about testing.

00:01:06.610 --> 00:01:08.277
And I'll talk a bit
at the end, wrap up.

00:01:10.740 --> 00:01:15.220
So I'll start with three simple
things about accessibility.

00:01:15.220 --> 00:01:18.023
I feel like, as I
think about this,

00:01:18.023 --> 00:01:19.690
I personally know
more than three things

00:01:19.690 --> 00:01:20.440
about accessibility.

00:01:20.440 --> 00:01:22.190
I'm working on this
for close to a decade.

00:01:22.190 --> 00:01:25.190
So I maybe know
like five things.

00:01:25.190 --> 00:01:28.460
But there are a
lot of other areas

00:01:28.460 --> 00:01:31.670
where I work where like
internationalization, version

00:01:31.670 --> 00:01:34.490
control, sort of a whole range
of things where I kind of do

00:01:34.490 --> 00:01:35.420
a few things.

00:01:35.420 --> 00:01:39.267
And that's kind of enough to
get through my overall workflow.

00:01:39.267 --> 00:01:41.600
I feel like there's probably
three things that everybody

00:01:41.600 --> 00:01:44.270
in the world should know about
accessibility to sort of build

00:01:44.270 --> 00:01:47.160
into their daily work.

00:01:47.160 --> 00:01:49.200
I think the first
one is very simply

00:01:49.200 --> 00:01:52.060
to make information visible.

00:01:52.060 --> 00:01:53.977
And a lot of people think
about accessibility,

00:01:53.977 --> 00:01:56.560
they start thinking about screen
readers and people who cannot

00:01:56.560 --> 00:01:57.060
see.

00:01:57.060 --> 00:01:58.852
There are a lot of
people in that category,

00:01:58.852 --> 00:01:59.850
and that's important.

00:01:59.850 --> 00:02:02.058
There's also a lot of people
who just have low vision

00:02:02.058 --> 00:02:04.240
or, like me, are getting
older, and it's harder

00:02:04.240 --> 00:02:06.037
to read small fonts.

00:02:06.037 --> 00:02:07.870
So just making sure
that your information is

00:02:07.870 --> 00:02:09.940
as visible as possible
without anybody

00:02:09.940 --> 00:02:12.370
having to turn on any
tools or do anything fancy

00:02:12.370 --> 00:02:15.880
with accessibility is actually
one of the most common things

00:02:15.880 --> 00:02:18.370
we see people struggle with.

00:02:18.370 --> 00:02:21.240
There's a lot of designers who
will kind of design something

00:02:21.240 --> 00:02:24.190
that looks really great because
it's light gray on slightly

00:02:24.190 --> 00:02:25.695
lighter gray.

00:02:25.695 --> 00:02:27.070
And I think a lot
of us have seen

00:02:27.070 --> 00:02:29.590
that both in designs
we're trying to implement

00:02:29.590 --> 00:02:33.010
and designs that we're
struggling to use

00:02:33.010 --> 00:02:35.680
or fonts that are just too small
because too much information

00:02:35.680 --> 00:02:37.880
is being crammed into a page.

00:02:37.880 --> 00:02:39.850
The other thing to
think about is color.

00:02:39.850 --> 00:02:43.100
If you're using color
to convey information,

00:02:43.100 --> 00:02:45.370
keep in mind that there's
a lot of people out there

00:02:45.370 --> 00:02:46.995
who are colorblind,
and so they're just

00:02:46.995 --> 00:02:50.310
missing the information
you're trying to convey.

00:02:50.310 --> 00:02:51.810
So just in general,
if you can think

00:02:51.810 --> 00:02:55.420
about how to make
information visible,

00:02:55.420 --> 00:02:58.905
you can a long ways to
just reaching more people.

00:02:58.905 --> 00:03:00.970
The second one's the
complement of that,

00:03:00.970 --> 00:03:02.720
which is assuming
somebody can see your UI

00:03:02.720 --> 00:03:04.553
and understand what
you're trying to convey,

00:03:04.553 --> 00:03:06.100
are they able to
actually use it?

00:03:06.100 --> 00:03:07.960
And that's where just
simple big controls

00:03:07.960 --> 00:03:09.540
can make a big difference.

00:03:09.540 --> 00:03:11.200
I think, again, we've all had
the experience of somebody

00:03:11.200 --> 00:03:13.700
who got a little carried away
of just trying to add too much

00:03:13.700 --> 00:03:15.400
configurability into
too small a space,

00:03:15.400 --> 00:03:17.890
and it ends up being
kind of random which

00:03:17.890 --> 00:03:19.960
button you end up hitting.

00:03:19.960 --> 00:03:23.230
And for somebody with a
little bit less motor control,

00:03:23.230 --> 00:03:25.210
or somebody with just
really big fingers,

00:03:25.210 --> 00:03:27.760
there's a whole range of
things that their experience

00:03:27.760 --> 00:03:31.780
of using UIs that maybe we
don't find to be too tight,

00:03:31.780 --> 00:03:34.552
their experience can be the same
as what was ours when we were

00:03:34.552 --> 00:03:36.760
sort of struggling with
something that's just clearly

00:03:36.760 --> 00:03:38.360
way too close together.

00:03:38.360 --> 00:03:41.010
Just making sure
that in both cases,

00:03:41.010 --> 00:03:43.900
information big
and bold, controls

00:03:43.900 --> 00:03:47.730
big and simple to understand.

00:03:47.730 --> 00:03:49.460
And the third one
really gets into sort

00:03:49.460 --> 00:03:50.930
of a lot of what
often is thought

00:03:50.930 --> 00:03:53.300
of first for accessibility,
which is to help

00:03:53.300 --> 00:03:55.220
users who can't see the screen.

00:03:55.220 --> 00:03:58.040
If you're using an image
to convey information,

00:03:58.040 --> 00:04:00.270
after you've made it
as visible as possible,

00:04:00.270 --> 00:04:03.002
also make sure it works for
people who can't see it at all.

00:04:03.002 --> 00:04:05.460
And the simplest way to do that
is just to label the image.

00:04:05.460 --> 00:04:08.390
And we have a very simple
API that Qasid will mention

00:04:08.390 --> 00:04:10.440
that can help you do that.

00:04:10.440 --> 00:04:12.940
When you go to label things,
you want to label it precisely,

00:04:12.940 --> 00:04:14.773
because you're trying
to convey information,

00:04:14.773 --> 00:04:17.079
make sure that information
is conveyed in the text.

00:04:17.079 --> 00:04:18.940
But on the other
hand, if you think

00:04:18.940 --> 00:04:21.480
about the experience of
a screen reader user,

00:04:21.480 --> 00:04:23.950
there is-- particularly if it's
like a control or something

00:04:23.950 --> 00:04:25.490
they're going to
go to all the time,

00:04:25.490 --> 00:04:28.900
they don't want to hear a long
treatise about how exciting

00:04:28.900 --> 00:04:30.550
this particular graphic is.

00:04:30.550 --> 00:04:33.070
They really want to just
get on with their day

00:04:33.070 --> 00:04:35.320
and get on with whatever
action that thing can do.

00:04:35.320 --> 00:04:37.035
So you want to label
things concisely.

00:04:37.035 --> 00:04:38.410
These two things
are a little bit

00:04:38.410 --> 00:04:40.610
in tension with one another.

00:04:40.610 --> 00:04:43.283
So part of this is are you
trying to really just convey

00:04:43.283 --> 00:04:44.950
information, and
that's what's in there,

00:04:44.950 --> 00:04:47.240
make sure that's conveyed
as precisely as possible.

00:04:47.240 --> 00:04:49.240
If you're trying to just
explain to somebody how

00:04:49.240 --> 00:04:52.210
to use something, just
one word, which is a verb,

00:04:52.210 --> 00:04:53.005
is usually enough.

00:04:56.400 --> 00:04:57.530
So that's three things.

00:04:57.530 --> 00:05:00.120
But you may have come here to
learn more than three things.

00:05:00.120 --> 00:05:02.960
So we want to dig a
little bit deeper and just

00:05:02.960 --> 00:05:06.553
think about how users
interact with your app.

00:05:06.553 --> 00:05:08.970
Much like the three things,
there's essentially two things

00:05:08.970 --> 00:05:10.050
that you're doing.

00:05:10.050 --> 00:05:12.120
You're presenting
information to users,

00:05:12.120 --> 00:05:14.715
and you're allowing them
to take actions on your UI.

00:05:18.900 --> 00:05:20.400
Often the first
design ends up being

00:05:20.400 --> 00:05:23.220
for people who may
not necessarily

00:05:23.220 --> 00:05:25.530
have an accessibility
need, but ideally, you're

00:05:25.530 --> 00:05:26.920
thinking about this upfront.

00:05:26.920 --> 00:05:29.100
Then it quickly becomes
kind of overwhelming.

00:05:29.100 --> 00:05:31.100
You start thinking about,
OK, how's somebody who

00:05:31.100 --> 00:05:32.935
can't see going to use my app?

00:05:32.935 --> 00:05:35.310
How is somebody who's motor
impaired going to use my app?

00:05:35.310 --> 00:05:36.727
How is somebody
who's deaf or hard

00:05:36.727 --> 00:05:38.200
of hearing going to use my app?

00:05:38.200 --> 00:05:40.770
So now suddenly
you've got four types

00:05:40.770 --> 00:05:44.640
of users, which is your original
mainstream user and then

00:05:44.640 --> 00:05:46.103
these three categories.

00:05:46.103 --> 00:05:47.520
But within these
three categories,

00:05:47.520 --> 00:05:49.853
the more you stare at them,
the more complexity you see.

00:05:49.853 --> 00:05:51.652
It's like a fractal.

00:05:51.652 --> 00:05:53.360
People who are visually
impaired, there's

00:05:53.360 --> 00:05:55.010
all sorts of different
visual impairments.

00:05:55.010 --> 00:05:56.760
People can see different
levels of detail,

00:05:56.760 --> 00:05:58.310
different types of things.

00:05:58.310 --> 00:06:02.910
Motor impairments
come in a radical sort

00:06:02.910 --> 00:06:05.930
of variety of people out there.

00:06:05.930 --> 00:06:09.200
And then also, there are
people that have combinations

00:06:09.200 --> 00:06:10.790
of these disabilities.

00:06:10.790 --> 00:06:14.860
And so what are you supposed
to do as an app developer?

00:06:14.860 --> 00:06:17.530
There's like a billion people
in the world with a disability.

00:06:17.530 --> 00:06:19.780
Are you supposed to think
through a billion use cases?

00:06:22.780 --> 00:06:25.360
The answer is no, fortunately.

00:06:25.360 --> 00:06:28.120
And nobody is ever going to
think through all billion use

00:06:28.120 --> 00:06:29.350
cases.

00:06:29.350 --> 00:06:32.410
But with an ecosystem
like this, we

00:06:32.410 --> 00:06:35.680
do have the ability to scale
to that many use cases.

00:06:35.680 --> 00:06:38.870
And the tool we use to do that
are Accessibility Services.

00:06:38.870 --> 00:06:41.740
These are plug-ins to
the Android platform that

00:06:41.740 --> 00:06:44.500
get information about the UI,
can take actions on the UI

00:06:44.500 --> 00:06:46.610
on behalf of the user.

00:06:46.610 --> 00:06:51.290
And those developers
can think about,

00:06:51.290 --> 00:06:53.630
how do I serve this
particular set of users

00:06:53.630 --> 00:06:56.790
that I'm targeting?

00:06:56.790 --> 00:06:59.655
And so they're the ones that
are presenting the information.

00:06:59.655 --> 00:07:01.030
If somebody can't
see the screen,

00:07:01.030 --> 00:07:04.180
they're presenting
it audio or Braille.

00:07:04.180 --> 00:07:06.440
If somebody can't take actions
on the screen directly,

00:07:06.440 --> 00:07:07.940
they may be using
a switch to do it.

00:07:07.940 --> 00:07:10.630
And then these services
can intermediate that.

00:07:10.630 --> 00:07:13.660
The way that they work is
they get their information

00:07:13.660 --> 00:07:17.320
from the Android framework, and
they use the Android framework

00:07:17.320 --> 00:07:20.400
to take actions on the UI.

00:07:20.400 --> 00:07:23.000
And so down here at
the bottom is your app.

00:07:23.000 --> 00:07:26.690
In your app, what it needs to
do is present the information

00:07:26.690 --> 00:07:29.935
to the Android framework so that
the framework can then share it

00:07:29.935 --> 00:07:31.310
with all these
different services

00:07:31.310 --> 00:07:33.670
to support these
different users.

00:07:33.670 --> 00:07:36.220
And then it needs to
allow the framework

00:07:36.220 --> 00:07:40.690
to take actions on it so that
all these different services,

00:07:40.690 --> 00:07:42.510
all these different
users can actually

00:07:42.510 --> 00:07:43.860
get control of your app.

00:07:49.290 --> 00:07:53.240
So the way that you can do
this is really to use the APIs

00:07:53.240 --> 00:07:56.153
that Qasid is going to
talk about in a moment

00:07:56.153 --> 00:07:58.070
to make sure you're
presenting the information

00:07:58.070 --> 00:08:01.210
and allowing users
take actions on it.

00:08:01.210 --> 00:08:04.710
And once you've done that, you
can use these testing tools

00:08:04.710 --> 00:08:07.260
to verify that your
app is actually

00:08:07.260 --> 00:08:11.538
working for a wide range
of different users.

00:08:11.538 --> 00:08:14.080
So now let me hand it over to
Qasid to talk about these APIs.

00:08:17.940 --> 00:08:19.070
QASID SADIQ: Hey, everyone.

00:08:19.070 --> 00:08:19.570
I'm Qasid.

00:08:19.570 --> 00:08:21.790
I'm on the Android
Accessibility team.

00:08:21.790 --> 00:08:23.400
Let's talk about APIs.

00:08:23.400 --> 00:08:26.590
So as Phil mentioned, the way
your application communicates

00:08:26.590 --> 00:08:30.040
what's visible on screen to
the accessibility service

00:08:30.040 --> 00:08:32.200
is the accessibility APIs.

00:08:32.200 --> 00:08:33.880
But thankfully
for you guys, most

00:08:33.880 --> 00:08:36.490
of the information that an
accessibility service needs

00:08:36.490 --> 00:08:38.782
can already be inferred
through the view hierarchy.

00:08:38.782 --> 00:08:40.990
But there are some situations
where you guys actually

00:08:40.990 --> 00:08:42.039
do have to use our APIs.

00:08:42.039 --> 00:08:43.247
Thankfully those are minimal.

00:08:43.247 --> 00:08:45.413
But let me show you what I mean.

00:08:45.413 --> 00:08:47.330
So let's you say you've
made this application.

00:08:47.330 --> 00:08:50.090
And let's just say you've
got this More Options button.

00:08:50.090 --> 00:08:52.460
Now, our frameworks can
infer important information,

00:08:52.460 --> 00:08:55.920
like its position on screen
and that it's clickable.

00:08:55.920 --> 00:08:58.340
The information in view.java.

00:08:58.340 --> 00:09:01.383
But when a TalkBack
user, a user who may not

00:09:01.383 --> 00:09:03.800
be able to see the screen
places their finger on this item

00:09:03.800 --> 00:09:06.890
to hear a description
of this item,

00:09:06.890 --> 00:09:08.510
they're not going
to get anything.

00:09:08.510 --> 00:09:09.620
And the reason is
TalkBack really

00:09:09.620 --> 00:09:11.412
doesn't know what to
say in this situation.

00:09:11.412 --> 00:09:14.750
There is no descriptive
text associated with it.

00:09:14.750 --> 00:09:17.680
So you as an app
developer have to step in

00:09:17.680 --> 00:09:19.720
and fill in the blanks for us.

00:09:19.720 --> 00:09:22.120
And you can do that through
the content description API.

00:09:22.120 --> 00:09:23.910
All you do is pass
in a localized string

00:09:23.910 --> 00:09:25.700
into site content description.

00:09:25.700 --> 00:09:27.700
Remember, keep the
string localized,

00:09:27.700 --> 00:09:30.520
concise, and descriptive,
because someone has to hear it.

00:09:30.520 --> 00:09:32.200
A user has to hear it.

00:09:32.200 --> 00:09:34.698
When Phil says label your
items, he means this,

00:09:34.698 --> 00:09:36.490
and for good reason,
because this is mostly

00:09:36.490 --> 00:09:40.250
the accessibility issues your
application is going to have.

00:09:40.250 --> 00:09:44.740
And thankfully, it's
trivially simple to fix.

00:09:44.740 --> 00:09:47.740
Now our user knows that this
is the More Options button,

00:09:47.740 --> 00:09:51.140
and we have a
successful interaction.

00:09:51.140 --> 00:09:53.040
So let's talk about
something different.

00:09:53.040 --> 00:09:55.000
Let's say you've
got this email UI.

00:09:55.000 --> 00:09:58.090
And like most inbox UIs
with a list of emails,

00:09:58.090 --> 00:10:01.007
you can tap and
email to select it.

00:10:01.007 --> 00:10:03.340
And you can swipe to reveal
that an email was deletable.

00:10:03.340 --> 00:10:05.680
And if you continue swiping,
you'll delete that email.

00:10:09.010 --> 00:10:11.050
This is great and
all, but not all users

00:10:11.050 --> 00:10:13.990
can tap and swipe on screen.

00:10:13.990 --> 00:10:16.580
TalkBack users, for
example, drive the UI

00:10:16.580 --> 00:10:18.760
through a completely
different gesture set.

00:10:18.760 --> 00:10:21.020
Switch Access users,
on the other hand,

00:10:21.020 --> 00:10:24.260
they drive the UI through a
series of single switches.

00:10:24.260 --> 00:10:26.050
So for these
particular situations,

00:10:26.050 --> 00:10:29.385
the accessibility service,
which Access or TalkBack,

00:10:29.385 --> 00:10:30.760
need to know what
actions you can

00:10:30.760 --> 00:10:34.850
perform on each item or
each view in your hierarchy.

00:10:34.850 --> 00:10:38.590
Now, when a Switch Access
user highlights a certain item

00:10:38.590 --> 00:10:40.750
as it currently
stands, the user only

00:10:40.750 --> 00:10:42.110
knows that you can tap an item.

00:10:42.110 --> 00:10:43.527
And this may be
because of the way

00:10:43.527 --> 00:10:46.640
we implemented that remove
action or that delete action.

00:10:46.640 --> 00:10:48.280
So again, like
content description,

00:10:48.280 --> 00:10:49.810
we have to fill in the blanks.

00:10:49.810 --> 00:10:53.720
And you can do that through our
new accessibility actions API.

00:10:53.720 --> 00:10:56.630
All you do is call
ViewCompat.addAc

00:10:56.630 --> 00:10:57.830
cessibilityAction.

00:10:57.830 --> 00:11:01.910
You pass in the view of
the action, a localized

00:11:01.910 --> 00:11:05.640
string describing the action
concisely to the user,

00:11:05.640 --> 00:11:10.120
and a Lambda to be performed
at the user's request.

00:11:10.120 --> 00:11:12.930
Now our hypothetical
Switch user will

00:11:12.930 --> 00:11:17.742
be able to perform both the
select and the delete action.

00:11:17.742 --> 00:11:19.950
And also, because this is
an AndroidX, the library we

00:11:19.950 --> 00:11:21.930
use to back part
a lot of our API,

00:11:21.930 --> 00:11:26.090
this is going to
work back to API 21.

00:11:26.090 --> 00:11:28.850
OK, but let's get into something
a little more complicated.

00:11:28.850 --> 00:11:32.470
Let's talk about text and
links, or clickable spans.

00:11:32.470 --> 00:11:35.110
Now, before AndroidO, our
accessibility frameworks

00:11:35.110 --> 00:11:38.102
really couldn't handle
non-URL spans well.

00:11:38.102 --> 00:11:40.060
And this is a problem,
as you can imagine users

00:11:40.060 --> 00:11:42.370
like TalkBack users,
they wouldn't be informed

00:11:42.370 --> 00:11:43.900
that there are links on screen.

00:11:43.900 --> 00:11:46.150
Actually, they wouldn't be
even able to activate them.

00:11:50.720 --> 00:11:53.090
They would essentially
see nothing.

00:11:53.090 --> 00:11:56.090
So to solve this problem, we
added some API into AndroidX.

00:11:56.090 --> 00:11:57.830
All you do for a
text view, which

00:11:57.830 --> 00:12:00.470
contains these non-URL
clickable spans

00:12:00.470 --> 00:12:02.916
is called ViewCompat.enabl
eAccessibleClick

00:12:02.916 --> 00:12:04.400
ableSpanSupport.

00:12:04.400 --> 00:12:09.540
Pass in the text view or the
view that contains these spans.

00:12:09.540 --> 00:12:13.832
Now our users all the
way back to API 19

00:12:13.832 --> 00:12:15.540
will know that these
links exist and will

00:12:15.540 --> 00:12:17.123
be able to successfully
activate them.

00:12:20.763 --> 00:12:22.180
So as app developers,
a lot of you

00:12:22.180 --> 00:12:24.337
like to roll some
interesting custom UI.

00:12:24.337 --> 00:12:26.920
So this may look like an alert
dialog, but for whatever reason

00:12:26.920 --> 00:12:29.295
we decided to implement this
using a view group, a couple

00:12:29.295 --> 00:12:30.760
of text views and a button.

00:12:30.760 --> 00:12:33.220
Now, this poses a problem
for accessibility services

00:12:33.220 --> 00:12:35.470
like TalkBack, because there's
some information that's

00:12:35.470 --> 00:12:37.780
visually expressed about
a context change happening

00:12:37.780 --> 00:12:38.740
on screen.

00:12:38.740 --> 00:12:40.240
But that actually
hasn't happened.

00:12:40.240 --> 00:12:42.340
This behaves a
bit like a window.

00:12:42.340 --> 00:12:45.350
So our accessibility user
isn't informed about this.

00:12:45.350 --> 00:12:48.190
So the way you solve this is
by treating this view group

00:12:48.190 --> 00:12:49.840
as an accessibility pane.

00:12:49.840 --> 00:12:52.585
And you can do that by
calling ViewCompat.setAc

00:12:52.585 --> 00:12:56.680
cessibilityPaneTitle on the
view that you consider a pane,

00:12:56.680 --> 00:12:59.650
and you pass in a localized
concise string describing

00:12:59.650 --> 00:13:02.130
this pane to the user.

00:13:02.130 --> 00:13:04.640
Now, when our custom
alert appears,

00:13:04.640 --> 00:13:08.270
TalkBack is going
to speak, alert.

00:13:08.270 --> 00:13:12.780
This also works all
the way back to API 19.

00:13:12.780 --> 00:13:15.240
And finally, let's say
you have a video player

00:13:15.240 --> 00:13:16.410
in your application.

00:13:16.410 --> 00:13:19.170
And it's pretty typical
in that has a play button

00:13:19.170 --> 00:13:21.120
or some controls that
time out and disappear

00:13:21.120 --> 00:13:22.788
after a certain period of time.

00:13:22.788 --> 00:13:24.330
That's useful because
most users just

00:13:24.330 --> 00:13:25.497
want to get to your content.

00:13:25.497 --> 00:13:28.260
They don't want to fiddle
with your controls.

00:13:28.260 --> 00:13:29.980
But you can imagine
an accessibility user

00:13:29.980 --> 00:13:32.230
who needs to take time
interacting with your controls.

00:13:32.230 --> 00:13:34.147
By the time they're able
to precisely interact

00:13:34.147 --> 00:13:37.862
with this play
button, disappears.

00:13:37.862 --> 00:13:39.320
Now they've got to
figure out a way

00:13:39.320 --> 00:13:41.420
to get that play button
back up on screen.

00:13:41.420 --> 00:13:43.597
They've got to figure
out a way to interact

00:13:43.597 --> 00:13:45.430
with it before the
timeout disappears again.

00:13:45.430 --> 00:13:47.452
And this is a pretty
frustrating cycle.

00:13:47.452 --> 00:13:49.160
So what we ideally
need in this situation

00:13:49.160 --> 00:13:53.300
is a way to adjust our timeout
based on our current user's

00:13:53.300 --> 00:13:54.650
needs.

00:13:54.650 --> 00:13:57.170
And you can do that through
our new timeouts API.

00:13:57.170 --> 00:14:00.350
First you get a reference to
the accessibility manager.

00:14:00.350 --> 00:14:03.480
Then you call getRecommendedTi
meoutMilliseconds.

00:14:03.480 --> 00:14:07.070
This returns the suggested
timeout for your view.

00:14:07.070 --> 00:14:09.780
It's customized for your
view and for your user.

00:14:09.780 --> 00:14:12.080
It does this by taking the
default timeout that you

00:14:12.080 --> 00:14:19.540
had planned and adjusting it
based on the type of content

00:14:19.540 --> 00:14:20.830
this view is.

00:14:20.830 --> 00:14:22.932
You specify this in
the second parameter.

00:14:22.932 --> 00:14:24.640
In this situation,
this is a play button,

00:14:24.640 --> 00:14:25.460
and it's a control.

00:14:25.460 --> 00:14:27.430
So we pass in
FLAG_CONTENT_CONTROLS.

00:14:27.430 --> 00:14:30.340
You can imagine someone with a
motor disability, for example,

00:14:30.340 --> 00:14:33.070
may need this adjusted
if it's a control.

00:14:33.070 --> 00:14:34.610
It also presents
visual information,

00:14:34.610 --> 00:14:38.230
so we pass in FLAG_CONTENT_ICONS
for people who may have trouble

00:14:38.230 --> 00:14:40.280
parsing visual information.

00:14:40.280 --> 00:14:43.330
If it was text, we pass in
FLAG_CONTENT_TEXT for people

00:14:43.330 --> 00:14:46.700
who have trouble parsing text.

00:14:46.700 --> 00:14:50.840
Now we've got a timeout
that's customized for our view

00:14:50.840 --> 00:14:54.370
and for the current user
and a play button that

00:14:54.370 --> 00:14:56.832
works for everybody.

00:14:56.832 --> 00:14:58.610
OK.

00:14:58.610 --> 00:15:00.260
So those are the fundamentals.

00:15:00.260 --> 00:15:04.690
And let's just say you've used
those fundamentals to make

00:15:04.690 --> 00:15:06.250
your application accessible.

00:15:06.250 --> 00:15:07.957
You become a bit of an expert.

00:15:07.957 --> 00:15:09.790
But you are going to
really quickly discover

00:15:09.790 --> 00:15:12.280
there are some murky areas,
places where it's not clear

00:15:12.280 --> 00:15:14.910
what the right thing to do is.

00:15:14.910 --> 00:15:16.900
Let's get back to this email UI.

00:15:16.900 --> 00:15:20.040
Now, let's just
say you're trying

00:15:20.040 --> 00:15:23.670
to build very specifically for
the TalkBack user, the user

00:15:23.670 --> 00:15:25.180
that can't see on screen.

00:15:25.180 --> 00:15:28.050
You try to determine what
the experience is going

00:15:28.050 --> 00:15:30.482
to be when a new email appears.

00:15:30.482 --> 00:15:32.940
And you're trying to figure
out how to express this change,

00:15:32.940 --> 00:15:35.050
and you figure the
best thing you can do

00:15:35.050 --> 00:15:36.480
is by making an announcement.

00:15:36.480 --> 00:15:39.040
Every time a new email
appears, announce the email.

00:15:39.040 --> 00:15:40.608
Well, this is a bad idea.

00:15:40.608 --> 00:15:42.900
And if you catch yourself
using the accessibility event

00:15:42.900 --> 00:15:45.690
TYPE_ANNOUNCEMENT,
you're probably

00:15:45.690 --> 00:15:48.480
conforming to this anti-pattern.

00:15:48.480 --> 00:15:52.140
You see, changes in the UI are
expressed very differently,

00:15:52.140 --> 00:15:54.630
depending on the accessibility
service and the user's

00:15:54.630 --> 00:15:56.370
preferences.

00:15:56.370 --> 00:15:59.490
Services don't need fine
tuning of accessibility UI

00:15:59.490 --> 00:16:00.750
from the application.

00:16:00.750 --> 00:16:03.598
They need a generic
representation of the UI

00:16:03.598 --> 00:16:05.640
that they themselves can
manipulate for the users

00:16:05.640 --> 00:16:08.400
that they understand so well.

00:16:08.400 --> 00:16:11.810
So what do you do
in this situation?

00:16:11.810 --> 00:16:13.408
This is what you do.

00:16:13.408 --> 00:16:13.950
That's right.

00:16:13.950 --> 00:16:15.640
You don't do anything.

00:16:15.640 --> 00:16:18.120
And you can do this
by using the widgets

00:16:18.120 --> 00:16:19.910
we provide to you
in our frameworks,

00:16:19.910 --> 00:16:22.290
such as AndroidX and Material.

00:16:22.290 --> 00:16:24.540
These widgets come with
accessibility built in

00:16:24.540 --> 00:16:26.790
out of the box,
which significantly

00:16:26.790 --> 00:16:29.453
reduce the amount of work you
as an app developer have to do.

00:16:29.453 --> 00:16:31.620
So you can really focus on
the very particular value

00:16:31.620 --> 00:16:34.990
that your application
provides to the world.

00:16:34.990 --> 00:16:37.840
But if you really must write
your own custom widgets,

00:16:37.840 --> 00:16:40.840
if you really must
do it yourself,

00:16:40.840 --> 00:16:43.510
make sure you're communicating
the exact semantics

00:16:43.510 --> 00:16:47.020
of the changes in your UI by
using the correct accessibility

00:16:47.020 --> 00:16:48.862
events and populating
it correctly.

00:16:48.862 --> 00:16:50.320
Remember, in this
situation, you're

00:16:50.320 --> 00:16:52.143
not communicating
directly with the user.

00:16:52.143 --> 00:16:54.310
You're communicating with
the accessibility service.

00:16:58.270 --> 00:17:01.000
So something similar
that people like to do

00:17:01.000 --> 00:17:04.640
is manage accessibility
focus themselves.

00:17:04.640 --> 00:17:05.890
And again, this is a bad idea.

00:17:05.890 --> 00:17:08.050
Accessibility focus
has to be determined

00:17:08.050 --> 00:17:10.095
by the accessibility service.

00:17:10.095 --> 00:17:11.470
And just like
announcements, this

00:17:11.470 --> 00:17:15.180
creates an inconsistency
in experience.

00:17:15.180 --> 00:17:17.130
And actually, that's one
of the biggest issues

00:17:17.130 --> 00:17:20.520
that accessibility users
face, inconsistency

00:17:20.520 --> 00:17:23.770
across applications
and over time.

00:17:23.770 --> 00:17:27.180
You see, there are a
lot of applications.

00:17:27.180 --> 00:17:31.110
And if you as an app
developer decide to break with

00:17:31.110 --> 00:17:33.690
the paradigms of accessibility
interaction from the rest

00:17:33.690 --> 00:17:37.320
of the system, you're making
your users' lives frustrating,

00:17:37.320 --> 00:17:38.850
because now that
accessibility user,

00:17:38.850 --> 00:17:40.982
every time they open
your application,

00:17:40.982 --> 00:17:43.440
they've got to throw out all
of their expectations in terms

00:17:43.440 --> 00:17:46.400
of how their interaction works.

00:17:46.400 --> 00:17:48.390
And they've got to
relearn this whole new UI

00:17:48.390 --> 00:17:49.650
at a very fundamental level.

00:17:54.140 --> 00:17:57.730
The best thing that you can
do for your accessibility user

00:17:57.730 --> 00:18:03.980
is to maintain consistency
over time and with a system.

00:18:03.980 --> 00:18:06.710
OK, now that you know
how to fix your issues,

00:18:06.710 --> 00:18:08.630
Isha's going to talk
about how to find them

00:18:08.630 --> 00:18:11.513
and how to make
sure you fix them.

00:18:11.513 --> 00:18:12.596
ISHA BOBRA: Thanks, Qasid.

00:18:17.470 --> 00:18:18.400
Hello, everyone.

00:18:18.400 --> 00:18:20.710
So now that we know
what we are building for

00:18:20.710 --> 00:18:23.960
and how to build it, the
next obvious question is,

00:18:23.960 --> 00:18:26.200
how do I know what
I built is correct?

00:18:26.200 --> 00:18:29.950
Things like, is my text
visible to most of the users?

00:18:29.950 --> 00:18:33.550
Or is my button large enough,
or even if my button is labeled

00:18:33.550 --> 00:18:34.600
or not?

00:18:34.600 --> 00:18:38.013
Wouldn't it be nice if someone
could check that for us?

00:18:38.013 --> 00:18:39.430
Well, there are
several approaches

00:18:39.430 --> 00:18:41.320
in which you can
answer this question

00:18:41.320 --> 00:18:45.010
and make the testing task easy.

00:18:45.010 --> 00:18:47.260
On a high level, there
are three approaches

00:18:47.260 --> 00:18:48.940
that you can leverage
as a developer

00:18:48.940 --> 00:18:51.850
to ensure you're creating an
accessible experience for most

00:18:51.850 --> 00:18:53.350
of your users.

00:18:53.350 --> 00:18:55.570
The first is automated tests.

00:18:55.570 --> 00:18:58.060
This technique requires
some coding changes

00:18:58.060 --> 00:19:00.940
and is very good to detect
accessibility issues

00:19:00.940 --> 00:19:03.310
at the very early
developmental phases.

00:19:03.310 --> 00:19:07.060
You can run these tests
alongside your existing UI unit

00:19:07.060 --> 00:19:10.570
or integration test as part
of resubmit or continuous

00:19:10.570 --> 00:19:12.650
integration solution.

00:19:12.650 --> 00:19:14.150
The next tool we're
going to look at

00:19:14.150 --> 00:19:16.350
is the accessibility
testing tools.

00:19:16.350 --> 00:19:19.010
These tools do not require
any technical knowledge

00:19:19.010 --> 00:19:21.740
and can be run by QA
teams and release managers

00:19:21.740 --> 00:19:24.920
to perform a sanity check
before your app is released out

00:19:24.920 --> 00:19:26.210
in public.

00:19:26.210 --> 00:19:28.770
And the third is a manual
testing, which, by experience,

00:19:28.770 --> 00:19:31.520
we have realized is one
of the most effective ways

00:19:31.520 --> 00:19:34.760
to ensure you're creating an
end to end experience for users

00:19:34.760 --> 00:19:37.830
with disabilities in
real world scenarios.

00:19:37.830 --> 00:19:41.750
Let's take a deep dive
into the three techniques.

00:19:41.750 --> 00:19:44.200
Let's first talk about
integrating accessibility

00:19:44.200 --> 00:19:47.110
into your existing testing code.

00:19:47.110 --> 00:19:49.750
Most of the Android
Accessibility testing tools

00:19:49.750 --> 00:19:52.090
are backed by the Android
Accessibility Testing

00:19:52.090 --> 00:19:53.240
Framework.

00:19:53.240 --> 00:19:56.740
It is a Java library that is
written on a rule-based system

00:19:56.740 --> 00:19:58.810
to evaluate Android
UI constructs

00:19:58.810 --> 00:20:01.390
for accessibility
issues at runtime.

00:20:01.390 --> 00:20:02.910
Remember, it's open source.

00:20:02.910 --> 00:20:05.020
So if you wish to make
contributions and add

00:20:05.020 --> 00:20:09.870
checks for accessibility, please
reach out to us on GitHub.

00:20:09.870 --> 00:20:12.240
So what does this
framework test for?

00:20:12.240 --> 00:20:16.050
It tests for missing labels,
which actually prevents users

00:20:16.050 --> 00:20:18.000
of screen readers
from understanding

00:20:18.000 --> 00:20:20.040
the content within your app.

00:20:20.040 --> 00:20:21.780
It looks for small
touch targets,

00:20:21.780 --> 00:20:24.450
which can prevent users
with dexterity issues

00:20:24.450 --> 00:20:26.160
to interact with your app.

00:20:26.160 --> 00:20:28.980
It also looks for low
contrast text and images,

00:20:28.980 --> 00:20:31.320
which impacts the
legibility of your app,

00:20:31.320 --> 00:20:33.840
and it looks for other
implementation-specific issues,

00:20:33.840 --> 00:20:35.998
which can actually prevent
your app from sending

00:20:35.998 --> 00:20:38.040
the proper semantics to
the Android Accessibility

00:20:38.040 --> 00:20:41.280
Framework.

00:20:41.280 --> 00:20:43.980
So that was about the
framework, and we understood

00:20:43.980 --> 00:20:45.660
what the framework tests for.

00:20:45.660 --> 00:20:48.060
The question is, how do
I use this framework?

00:20:48.060 --> 00:20:51.300
So we've made it really easy
to integrate this Accessibility

00:20:51.300 --> 00:20:54.360
Testing Framework into the
existing testing frameworks

00:20:54.360 --> 00:20:56.430
like Espresso and Robolectric.

00:20:56.430 --> 00:20:58.810
These are provided as
an optional competent,

00:20:58.810 --> 00:21:02.070
and you can use our existing
test code to run these checks.

00:21:02.070 --> 00:21:04.710
As you interact with
the view in your tests,

00:21:04.710 --> 00:21:07.080
these accessibility
checks run automatically

00:21:07.080 --> 00:21:08.560
before proceeding.

00:21:08.560 --> 00:21:11.190
So if you're interacting
with a button in your test,

00:21:11.190 --> 00:21:12.810
we look for the
button and potentially

00:21:12.810 --> 00:21:17.850
the UI around the button to
look for accessibility issues.

00:21:17.850 --> 00:21:21.810
For Espresso, you can use
AccessibilityChecks.enable

00:21:21.810 --> 00:21:24.230
to enable the tests.

00:21:24.230 --> 00:21:27.130
The result of
AccessibilityChecks.enable

00:21:27.130 --> 00:21:29.390
is an accessibility
validator, which

00:21:29.390 --> 00:21:31.610
can be used to
customize your tests.

00:21:31.610 --> 00:21:35.270
For example, you can use
.setRunChecksfroomRootView

00:21:35.270 --> 00:21:38.150
to increase the coverage of
your tests by running them onto

00:21:38.150 --> 00:21:41.030
the on the entire view hierarchy
where a view actions is

00:21:41.030 --> 00:21:42.180
performed.

00:21:42.180 --> 00:21:45.800
You can also call
.setSupressingResultMatcher

00:21:45.800 --> 00:21:49.190
to whitelist known accessibility
issues so that your tests are

00:21:49.190 --> 00:21:50.570
green as you fix them.

00:21:55.010 --> 00:21:57.490
It is required that you use
a view action from the view

00:21:57.490 --> 00:22:00.040
actions class to
perform these tests.

00:22:00.040 --> 00:22:03.368
In this example, you see
the use of click action.

00:22:03.368 --> 00:22:05.410
Remember, if you interact
with the view directly,

00:22:05.410 --> 00:22:09.100
you bypass the
accessibility checks.

00:22:09.100 --> 00:22:12.010
For Robolectric, you use
AddAccessibilityChecks

00:22:12.010 --> 00:22:13.495
annotation to enable the tests.

00:22:17.068 --> 00:22:18.610
Tests will be called
in the view when

00:22:18.610 --> 00:22:22.240
you call ShadowView.clickOn
the view you want to test.

00:22:22.240 --> 00:22:25.060
And much like Espresso, you
can customize your tests

00:22:25.060 --> 00:22:28.210
using Robolectric's
accessibility tools.

00:22:28.210 --> 00:22:30.190
So that was all about
automated tests,

00:22:30.190 --> 00:22:33.167
making changes in your
code, and figuring out

00:22:33.167 --> 00:22:35.500
accessibility issues at the
very, very early development

00:22:35.500 --> 00:22:37.160
phases.

00:22:37.160 --> 00:22:40.640
Next, we're going to look at is
using the accessibility testing

00:22:40.640 --> 00:22:41.160
tools.

00:22:41.160 --> 00:22:43.250
These are automated
tools and do not require

00:22:43.250 --> 00:22:44.822
any technical knowledge.

00:22:44.822 --> 00:22:46.280
The first we're
going to talk about

00:22:46.280 --> 00:22:48.290
is the Google Play
Pre-Launch Report.

00:22:48.290 --> 00:22:50.660
It is an automated tool
that controls your app

00:22:50.660 --> 00:22:54.230
on multiple physical devices and
looks for accessibility issues

00:22:54.230 --> 00:22:56.960
so that you can fix them
before launching your app.

00:22:56.960 --> 00:22:59.570
It looks for issues like
crashes, performance,

00:22:59.570 --> 00:23:01.480
and now even accessibility.

00:23:01.480 --> 00:23:04.130
We've made it really easy
to get accessibility test

00:23:04.130 --> 00:23:06.320
results by integrating
those directly

00:23:06.320 --> 00:23:08.330
into its developer console.

00:23:08.330 --> 00:23:12.030
These checks run on all APKs
released on any Play Store

00:23:12.030 --> 00:23:14.570
track.

00:23:14.570 --> 00:23:17.630
Pre-Launch Report is located
within the Google Play Console

00:23:17.630 --> 00:23:19.010
beneath Release Management.

00:23:19.010 --> 00:23:22.010
You can see here's a list of
issues that are highlighted

00:23:22.010 --> 00:23:23.510
by the Pre-Launch Report.

00:23:23.510 --> 00:23:26.300
These issues are
clustered, characterized,

00:23:26.300 --> 00:23:29.390
and ranked by severity.

00:23:29.390 --> 00:23:34.040
Here's a detailed view of how
a report looks like generated

00:23:34.040 --> 00:23:35.420
by the Pre-Launch Report.

00:23:35.420 --> 00:23:37.790
You can see the text with
the incorrect contrast

00:23:37.790 --> 00:23:39.560
ratios highlighted
and a suggestion

00:23:39.560 --> 00:23:41.360
is provided to improve it.

00:23:41.360 --> 00:23:43.220
On the left-hand
side panel, you can

00:23:43.220 --> 00:23:45.770
see the occurrences of the
similar underlining issues

00:23:45.770 --> 00:23:47.850
being highlighted.

00:23:47.850 --> 00:23:50.490
For each of the accessibility
findings identified

00:23:50.490 --> 00:23:52.680
by the report, there
is a Learn More link,

00:23:52.680 --> 00:23:55.350
which gives you a detailed
understanding of the concept

00:23:55.350 --> 00:23:59.370
and provides suggestions
to improve it.

00:23:59.370 --> 00:24:03.300
Yeah, that was about the
Google Play Pre-Launch Report.

00:24:03.300 --> 00:24:06.070
Now we're going to move on
to the Accessibility Scanner.

00:24:06.070 --> 00:24:08.340
It's another app
that scans your UI

00:24:08.340 --> 00:24:10.500
and looks for potential
accessibility issues,

00:24:10.500 --> 00:24:15.680
like missing labels, small
touch targets, et cetera.

00:24:15.680 --> 00:24:17.350
You do not require
any code change

00:24:17.350 --> 00:24:19.010
to use Accessibility Scanner.

00:24:19.010 --> 00:24:22.160
All you need to do is go to the
Play Store, download the app,

00:24:22.160 --> 00:24:25.520
or visit
g.co/accessibilityscanner.

00:24:25.520 --> 00:24:29.920
Launching the app will take
you through the set-up process.

00:24:29.920 --> 00:24:31.950
Here's an app that we've
created to highlight

00:24:31.950 --> 00:24:34.260
some of the known
accessibility issues.

00:24:34.260 --> 00:24:36.862
You can see a blue
floating button on the UI.

00:24:36.862 --> 00:24:38.820
This is the button that
appears when you switch

00:24:38.820 --> 00:24:40.680
on Accessibility Scanner.

00:24:40.680 --> 00:24:44.520
In order to scan my app, I would
simply tap on the blue button

00:24:44.520 --> 00:24:46.878
while my app's UI is
in the foreground.

00:24:49.630 --> 00:24:52.900
Here is an example of how a
report created by Accessibility

00:24:52.900 --> 00:24:54.440
Scanner looks like.

00:24:54.440 --> 00:24:57.310
You can see the text with
incorrect ratios highlighted.

00:24:57.310 --> 00:25:00.400
It's not just highlighted, but
also a suggestion to improve it

00:25:00.400 --> 00:25:01.450
is provided.

00:25:01.450 --> 00:25:03.280
You can share the
reports by scanner

00:25:03.280 --> 00:25:07.560
via email or Google Drive.

00:25:07.560 --> 00:25:09.590
And if you click on
the Learn More link,

00:25:09.590 --> 00:25:11.440
it opens a detailed
documentation

00:25:11.440 --> 00:25:14.300
of the concept and the
issue you're looking at.

00:25:14.300 --> 00:25:16.240
So that was about
the automated tools.

00:25:16.240 --> 00:25:18.820
We looked at the
automated tests,

00:25:18.820 --> 00:25:21.760
which required coding changes
and are good to detect issues

00:25:21.760 --> 00:25:23.140
while you're developing.

00:25:23.140 --> 00:25:25.510
Next we looked at the
automated testing tools,

00:25:25.510 --> 00:25:28.860
which were the Pre-Launch Report
and the Accessibility Scanner.

00:25:28.860 --> 00:25:33.050
The third technique we're going
to look at is manual testing.

00:25:33.050 --> 00:25:35.060
So automation is really
helpful, because it

00:25:35.060 --> 00:25:38.690
helps you detect issues
while you're developing,

00:25:38.690 --> 00:25:40.610
but it's not a
complete solution as it

00:25:40.610 --> 00:25:42.510
comes with certain limitations.

00:25:42.510 --> 00:25:43.910
Let's look at them.

00:25:43.910 --> 00:25:46.278
If you're depending on
your automated tests,

00:25:46.278 --> 00:25:48.320
and they're based on the
test that you've already

00:25:48.320 --> 00:25:50.270
written for your
code, its performance

00:25:50.270 --> 00:25:52.550
very much depends
on the coverage

00:25:52.550 --> 00:25:54.200
that your test code provides.

00:25:54.200 --> 00:25:56.360
Parts of your code
that are not tested

00:25:56.360 --> 00:25:59.610
can have serious
accessibility issues.

00:25:59.610 --> 00:26:01.490
Secondly, like any
other automation,

00:26:01.490 --> 00:26:03.680
there are always chances
of false positives

00:26:03.680 --> 00:26:05.030
and false negatives.

00:26:05.030 --> 00:26:08.330
We strive to reduce false
positives as much as we can,

00:26:08.330 --> 00:26:10.340
but that can result
in neglecting

00:26:10.340 --> 00:26:13.190
some of the legitimate
accessibility issues.

00:26:13.190 --> 00:26:14.810
And thirdly, there
are certain issues

00:26:14.810 --> 00:26:17.580
that require human
judgment and intervention.

00:26:17.580 --> 00:26:19.460
For example, our
tools can tell you

00:26:19.460 --> 00:26:22.040
that you're missing a
label, but whether or not

00:26:22.040 --> 00:26:25.220
the label string is making
sense to the user is

00:26:25.220 --> 00:26:27.650
understandable and
acceptable is something

00:26:27.650 --> 00:26:29.570
that only humans can decide.

00:26:29.570 --> 00:26:31.982
So manual testing is all
about understanding your users

00:26:31.982 --> 00:26:33.440
and understanding
how they're going

00:26:33.440 --> 00:26:37.380
to interact with your app
using assistive technology.

00:26:37.380 --> 00:26:39.630
One way to achieve this
is working directly

00:26:39.630 --> 00:26:42.240
with these users with
accessibility needs

00:26:42.240 --> 00:26:43.740
and soliciting their feedback.

00:26:43.740 --> 00:26:47.760
It can be done
formally or informally.

00:26:47.760 --> 00:26:50.310
Another way to achieve
this is using Android's

00:26:50.310 --> 00:26:52.110
own Accessibility Services.

00:26:52.110 --> 00:26:54.630
So testing your
app with TalkBack

00:26:54.630 --> 00:26:57.450
can actually ensure that you're
providing the correct semantics

00:26:57.450 --> 00:26:59.730
to the Android
Accessibility Framework.

00:26:59.730 --> 00:27:01.740
And testing your app
with Switch Access

00:27:01.740 --> 00:27:04.080
can ensure that your
app is reacting well

00:27:04.080 --> 00:27:06.270
to the actions
initiated by these APIs.

00:27:08.880 --> 00:27:12.000
At Google, we've learned that
the most successful teams are

00:27:12.000 --> 00:27:15.510
those who adopt both
automated and manual testing

00:27:15.510 --> 00:27:17.010
in their development process.

00:27:17.010 --> 00:27:20.670
If you want to learn more about
using Android's Accessibility

00:27:20.670 --> 00:27:24.930
Services, please visit
g.co/androidaccessibility.

00:27:24.930 --> 00:27:27.480
And it can also take you
through step-by-step approach

00:27:27.480 --> 00:27:31.060
to testing with keeping
accessibility in mind.

00:27:31.060 --> 00:27:33.030
And with that, I
will let Phil come up

00:27:33.030 --> 00:27:34.650
and give some key takeaways.

00:27:34.650 --> 00:27:36.862
Thank you.

00:27:36.862 --> 00:27:38.070
PHIL WEAVER: Thank you, Isha.

00:27:41.410 --> 00:27:44.710
So hopefully you found
this information useful.

00:27:44.710 --> 00:27:48.330
But as you work on your app,
really what we're asking

00:27:48.330 --> 00:27:51.900
is for you to help us
help others use your app

00:27:51.900 --> 00:27:54.840
and help other accessibility
service developers help

00:27:54.840 --> 00:27:57.560
others use your app.

00:27:57.560 --> 00:27:59.830
So we've presented
a few APIs here.

00:27:59.830 --> 00:28:02.530
We hope you'll use them to
share UI with as many people as

00:28:02.530 --> 00:28:04.950
possible.

00:28:04.950 --> 00:28:07.230
If you've played around
with accessibility before,

00:28:07.230 --> 00:28:10.650
you're maybe wondering like
why are we not showing you--

00:28:10.650 --> 00:28:13.350
we could have gone through the
details of accessibility node

00:28:13.350 --> 00:28:16.170
info and accessibility event.

00:28:16.170 --> 00:28:19.470
And our goal is
really to try to limit

00:28:19.470 --> 00:28:21.090
the number of
people who ever need

00:28:21.090 --> 00:28:24.330
to crack that API surface open.

00:28:24.330 --> 00:28:27.630
This new API for
adding actions I think

00:28:27.630 --> 00:28:30.420
is really important in that
respect, because it used to be,

00:28:30.420 --> 00:28:32.820
if you were doing
something relatively minor,

00:28:32.820 --> 00:28:36.150
overwriting the touch
handler, it was like,

00:28:36.150 --> 00:28:38.130
OK, you did the small
change, and now you've

00:28:38.130 --> 00:28:40.530
got a crack open this
great big API surface

00:28:40.530 --> 00:28:43.140
and figure out how to modify
your accessibility node info.

00:28:43.140 --> 00:28:45.630
We have an accessibility
action API you needed to add.

00:28:45.630 --> 00:28:48.750
You needed to go through and
override a method in view.

00:28:48.750 --> 00:28:52.540
And a lot of people,
they kind of come up

00:28:52.540 --> 00:28:54.550
against a learning
curve, they're like,

00:28:54.550 --> 00:28:57.460
you know, I'm kind of OK
with my touch handler just

00:28:57.460 --> 00:28:58.960
kind of being like
that, and I feel

00:28:58.960 --> 00:29:01.190
bad about not having
it be accessible,

00:29:01.190 --> 00:29:03.440
but I just don't have the time.

00:29:03.440 --> 00:29:06.700
And so we're hoping that these
APIs reduce that energy barrier

00:29:06.700 --> 00:29:11.480
to one line of code that's
pretty straightforward.

00:29:11.480 --> 00:29:14.290
And so we hope that
you'll use them.

00:29:14.290 --> 00:29:16.690
Similarly, testing
for accessibility,

00:29:16.690 --> 00:29:19.310
there's all different
ways to do it.

00:29:19.310 --> 00:29:22.090
We all hope that
you'll go out and find

00:29:22.090 --> 00:29:25.510
a wide range of users and
test for accessibility

00:29:25.510 --> 00:29:27.430
with all of those users.

00:29:27.430 --> 00:29:29.870
And I know some of you will.

00:29:29.870 --> 00:29:32.720
But again, we're trying to scale
this to the entire ecosystem.

00:29:32.720 --> 00:29:34.650
And so that's why we've got
these different points where,

00:29:34.650 --> 00:29:36.100
if we want to just
a quick scan, we've

00:29:36.100 --> 00:29:37.240
got Accessibility Scanner.

00:29:37.240 --> 00:29:38.740
We've got something--
after you've

00:29:38.740 --> 00:29:41.800
uploaded to the Play Store,
you can get a quick check

00:29:41.800 --> 00:29:43.360
for accessibility.

00:29:43.360 --> 00:29:47.870
But the more you do, the better
the experience will be overall.

00:29:47.870 --> 00:29:51.870
And also, as you go through
and you do this testing,

00:29:51.870 --> 00:29:55.100
and you find weird
problems, and then

00:29:55.100 --> 00:29:59.570
you start thinking, I know
Qasid said don't do this,

00:29:59.570 --> 00:30:02.570
don't add announcements,
don't try to control focus,

00:30:02.570 --> 00:30:04.100
but it's just broken.

00:30:04.100 --> 00:30:05.810
The only way to
make my app better

00:30:05.810 --> 00:30:08.510
is by just tweaking
it a little bit.

00:30:08.510 --> 00:30:10.670
You find yourself sort
of digging through maybe

00:30:10.670 --> 00:30:12.620
the TalkBack source
code, which is online,

00:30:12.620 --> 00:30:14.720
to try to figure out
what TalkBack is doing

00:30:14.720 --> 00:30:16.400
and like, OK, how
do I sort of give it

00:30:16.400 --> 00:30:19.330
the right signals that it
will do the right thing?

00:30:19.330 --> 00:30:21.770
Please realize that you
probably found a bug,

00:30:21.770 --> 00:30:23.370
and it's probably our bug.

00:30:23.370 --> 00:30:26.290
And we're eventually going
to fix that bug, hopefully.

00:30:26.290 --> 00:30:28.880
We'll fix it a lot faster
if you tell us about it.

00:30:28.880 --> 00:30:31.780
So if you find yourself
doing engineering--

00:30:31.780 --> 00:30:35.140
and realize, if you're doing
engineering for accessibility,

00:30:35.140 --> 00:30:38.740
you're doing a lot more
than the average developer.

00:30:38.740 --> 00:30:40.180
And we need this
ecosystem to work

00:30:40.180 --> 00:30:43.355
for every developer in order
for it to work for every user.

00:30:43.355 --> 00:30:45.105
So if you find yourself
doing engineering,

00:30:45.105 --> 00:30:47.860
and you realize no one
else in the world is ever

00:30:47.860 --> 00:30:50.200
going to do this,
as Qasid said, you

00:30:50.200 --> 00:30:53.050
end up building something that's
inconsistent with the rest

00:30:53.050 --> 00:30:56.270
of the platform,
even if it's better.

00:30:56.270 --> 00:31:00.620
And so if you found something
like that, please tell us.

00:31:00.620 --> 00:31:02.680
We're monitoring the
AOSP issue tracker.

00:31:02.680 --> 00:31:04.510
We monitor Stack Overflow.

00:31:04.510 --> 00:31:08.800
Reach out to us if you're stuck
or you're just doing something

00:31:08.800 --> 00:31:10.870
that's way harder
than it should be,

00:31:10.870 --> 00:31:12.400
because that's the
only way that--

00:31:12.400 --> 00:31:14.067
that's the best way
we can get feedback,

00:31:14.067 --> 00:31:17.220
and prioritize our own
work, and really scale the--

00:31:17.220 --> 00:31:20.068
actually, you can submit AOSP--

00:31:20.068 --> 00:31:22.360
also, if you want to submit
a code patch to AOSP if you

00:31:22.360 --> 00:31:23.735
found a bug in
the framework, I'd

00:31:23.735 --> 00:31:25.930
very much appreciate that, too.

00:31:25.930 --> 00:31:29.920
But if we do the
engineering, it can scale

00:31:29.920 --> 00:31:31.820
through the entire ecosystem.

00:31:31.820 --> 00:31:34.120
And so if you've
got the extra cycles

00:31:34.120 --> 00:31:36.430
to do that much, to think
about it that deeply,

00:31:36.430 --> 00:31:38.620
please do think about
at the level of like,

00:31:38.620 --> 00:31:41.590
how could this thing that I've
figured out work for everyone?

00:31:41.590 --> 00:31:43.840
And figure out how to upstream
it and reach out to us.

00:31:46.980 --> 00:31:48.380
So I started with three things.

00:31:48.380 --> 00:31:49.797
I'll finish with
the three things,

00:31:49.797 --> 00:31:53.720
just making information visible,
prefer simple, big controls,

00:31:53.720 --> 00:31:56.970
label images precisely
and concisely.

00:31:56.970 --> 00:31:59.430
We're doing app reviews
and office hours.

00:31:59.430 --> 00:32:03.060
And it was striking yesterday
as people were coming out,

00:32:03.060 --> 00:32:05.340
found that most of
what we're saying

00:32:05.340 --> 00:32:08.010
is essentially in
these three categories,

00:32:08.010 --> 00:32:10.650
that, really, if everybody
does these three things,

00:32:10.650 --> 00:32:12.360
we're going to be a
lot of the way there.

00:32:15.290 --> 00:32:18.890
Speaking of that, we've got
accessibility office hours

00:32:18.890 --> 00:32:22.700
and app reviews that are
happening over back that way.

00:32:22.700 --> 00:32:25.440
We've got an Accessibility
Sandbox, which is, again,

00:32:25.440 --> 00:32:28.010
just outside on the
other side here,

00:32:28.010 --> 00:32:30.680
that's ongoing
through all of I/O.

00:32:30.680 --> 00:32:33.320
And so if you've got
questions to ask us,

00:32:33.320 --> 00:32:34.340
we'll also be outside.

00:32:34.340 --> 00:32:36.680
You can come find
us after the talk.

00:32:36.680 --> 00:32:39.830
And if you want to just explore
the world of accessibility,

00:32:39.830 --> 00:32:41.153
we've got a Sandbox for you.

00:32:44.860 --> 00:32:46.680
So with that, thank
you so much for coming,

00:32:46.680 --> 00:32:50.030
and thank you for your
interest in accessibility.

