WEBVTT
Kind: captions
Language: en

00:00:00.050 --> 00:00:02.830
Panda also allows us to operate on your data frame in

00:00:02.830 --> 00:00:06.190
a vectorized item by item way. What does it mean to

00:00:06.190 --> 00:00:09.310
operate on a data frame in a vectorized way? Well first

00:00:09.310 --> 00:00:12.160
let's create a new data frame. Note that first I want

00:00:12.160 --> 00:00:15.210
to create a dictionary where the keys are going to be

00:00:15.210 --> 00:00:18.760
my column names and the values are series corresponding to their

00:00:18.760 --> 00:00:21.680
values and then the indexes for the rows where these values

00:00:21.680 --> 00:00:25.330
should appear. In order to make a data frame, I can simply

00:00:25.330 --> 00:00:28.930
say df equals data frame of this dictionary

00:00:28.930 --> 00:00:31.160
d. Let's see what this data frame looks

00:00:31.160 --> 00:00:34.120
like. We can call dataframe.apply and pass in

00:00:34.120 --> 00:00:38.510
some arbitrary function. In this case, numpy.mean to perform

00:00:38.510 --> 00:00:40.610
that function on every single column in the

00:00:40.610 --> 00:00:45.520
data frame. So when we df.apply numpy.mean, what

00:00:45.520 --> 00:00:50.400
we get back is the mean of each column in our data frame df. There are also

00:00:50.400 --> 00:00:52.720
some operations that simply cannot be vectorized in

00:00:52.720 --> 00:00:55.660
this way, that is, take a numpy.mean as their

00:00:55.660 --> 00:00:58.530
input, and then return an array or a

00:00:58.530 --> 00:01:02.020
value. So we can also call map on particular

00:01:02.020 --> 00:01:05.760
columns or apply map on entire data frames.

00:01:05.760 --> 00:01:08.700
These methods also accept functions, but functions that take

00:01:08.700 --> 00:01:10.850
in a single value and return a single

00:01:10.850 --> 00:01:16.402
value. For example, if I were to type df1.map

00:01:16.402 --> 00:01:22.380
lambda x, x greater than or equal to 1, what I get back here is whether or not

00:01:22.380 --> 00:01:27.860
every single value in the column 1 is greater than or equal to 1. Now say that I

00:01:27.860 --> 00:01:33.030
were to call df.applymap lambda x, x greater than

00:01:33.030 --> 00:01:36.150
or equal to 1, what this function returns is

00:01:36.150 --> 00:01:38.500
whether or not every single value in the data

00:01:38.500 --> 00:01:41.850
frame df is greater than or equal to 1.

00:01:41.850 --> 00:01:43.310
This is just the tip of the iceberg

00:01:43.310 --> 00:01:46.200
when it comes to Panda's functionality. If you're interested

00:01:46.200 --> 00:01:48.250
to read more about what the library can do,

00:01:48.250 --> 00:01:50.300
you should check out the full documentation at the

00:01:50.300 --> 00:01:53.400
URL contained in the instructor notes. Now, we

00:01:53.400 --> 00:01:55.010
know some of the very basics when it comes

00:01:55.010 --> 00:01:58.190
to handling the data, but how do we acquire

00:01:58.190 --> 00:01:59.980
the data that we wish to handle and analyze?

