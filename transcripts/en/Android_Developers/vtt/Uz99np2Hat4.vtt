WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.928
[MUSIC PLAYING]

00:00:06.914 --> 00:00:08.039
NICK BUTCHER: Hi, everyone.

00:00:08.039 --> 00:00:09.039
My name is Nick Butcher.

00:00:09.039 --> 00:00:10.760
I'm a designer and
engineer at Google,

00:00:10.760 --> 00:00:12.117
and I'm also a vector addict.

00:00:12.117 --> 00:00:14.450
And I've got five minutes to
tell you some about-- about

00:00:14.450 --> 00:00:16.533
some of the advanced
features of Vector Drawables,

00:00:16.533 --> 00:00:19.050
Android's vector format
supports, so let's get started.

00:00:19.050 --> 00:00:21.740
So I posit that most
assets in your applications

00:00:21.740 --> 00:00:23.660
should be vectors these days.

00:00:23.660 --> 00:00:24.590
Vectors are awesome.

00:00:24.590 --> 00:00:27.269
They're sharp on every
single density display.

00:00:27.269 --> 00:00:28.060
They're very small.

00:00:28.060 --> 00:00:30.590
They compress well, so
they don't blow your ADK.

00:00:30.590 --> 00:00:32.090
But they're also
extremely flexible,

00:00:32.090 --> 00:00:33.020
and I want to talk
about this a bit

00:00:33.020 --> 00:00:34.400
today so you can
get the most out

00:00:34.400 --> 00:00:38.840
of vectors to realize these
benefits as widely as possible.

00:00:38.840 --> 00:00:40.340
So most vectors in
your app probably

00:00:40.340 --> 00:00:41.330
look something like this.

00:00:41.330 --> 00:00:43.080
They have some paths,
and they're probably

00:00:43.080 --> 00:00:47.300
hard-coding a color, something
like this fill or stroke here.

00:00:47.300 --> 00:00:49.320
Maybe you're using a
color resource like this.

00:00:49.320 --> 00:00:51.320
But there's actually a
lot more you can do here,

00:00:51.320 --> 00:00:52.910
which I want to talk about.

00:00:52.910 --> 00:00:55.610
The first thing is
using theme colors.

00:00:55.610 --> 00:00:58.020
So you can use theme
colors in two ways, really.

00:00:58.020 --> 00:01:00.950
The first is by applying
a theme color as a tint.

00:01:00.950 --> 00:01:02.780
This will tilt the
entire drawable

00:01:02.780 --> 00:01:04.220
based on the current theme.

00:01:04.220 --> 00:01:07.160
So here, I'm using the theme
attribute ColorControlNormal,

00:01:07.160 --> 00:01:09.110
which is the normal
color for icons,

00:01:09.110 --> 00:01:11.930
and as such, you can have one
single asset which displays

00:01:11.930 --> 00:01:14.810
in different themes, say a
light screen or a dark screen,

00:01:14.810 --> 00:01:16.550
and it gets tinted to
be the right color.

00:01:16.550 --> 00:01:18.549
You no longer have to
worry what color asset you

00:01:18.549 --> 00:01:20.011
got from your
designers in the SVG,

00:01:20.011 --> 00:01:22.010
that they've got exactly
the right shade of gray

00:01:22.010 --> 00:01:23.060
that you need.

00:01:23.060 --> 00:01:27.240
It'll be tinted at runtime,
so it is always correct.

00:01:27.240 --> 00:01:30.217
You can also use theme colors
directly in the fill or stroke.

00:01:30.217 --> 00:01:32.550
So in this example here, I'm
going to use color primary.

00:01:32.550 --> 00:01:34.550
So say you have different
screens in your app--

00:01:34.550 --> 00:01:38.012
say, a sports app which uses
a theme for a given team.

00:01:38.012 --> 00:01:39.470
You can reference
that theme color,

00:01:39.470 --> 00:01:41.060
so you can have a
single drawable, which

00:01:41.060 --> 00:01:43.340
just parts of it get colored
based on the theme, which

00:01:43.340 --> 00:01:44.364
can be useful.

00:01:44.364 --> 00:01:45.530
Cool, that was theme colors.

00:01:45.530 --> 00:01:46.819
Next up, ColorStateLists.

00:01:46.819 --> 00:01:48.860
So in vector support I'm
resting ColorStateLists,

00:01:48.860 --> 00:01:50.070
you can do some fun stuff.

00:01:50.070 --> 00:01:53.570
So in this example, and on press
state, we're changing color,

00:01:53.570 --> 00:01:56.020
or perhaps you have
a list app, where

00:01:56.020 --> 00:01:58.830
when a row item is selected,
you could have it change

00:01:58.830 --> 00:02:00.842
the rendering using that state.

00:02:00.842 --> 00:02:02.550
You could do this with
a normal stateless

00:02:02.550 --> 00:02:04.850
drawable and two drawables
and flip between them.

00:02:04.850 --> 00:02:07.250
But if, say, the
rendering is 99% the same,

00:02:07.250 --> 00:02:08.919
you just want change
the stroke here,

00:02:08.919 --> 00:02:11.211
this saves some duplication.

00:02:11.211 --> 00:02:13.460
You define it like this,
like a regular ColorStateList

00:02:13.460 --> 00:02:16.700
in your color resources and
refer to it, as you would,

00:02:16.700 --> 00:02:18.230
like a color resource.

00:02:18.230 --> 00:02:21.009
And last, my favorite
feature is gradients.

00:02:21.009 --> 00:02:23.300
So vectors support three
different types of gradients--

00:02:23.300 --> 00:02:24.720
linear, radial, and sweep--

00:02:24.720 --> 00:02:26.150
which you define like this.

00:02:26.150 --> 00:02:29.570
So a linear gradient has a
start and end x, y coordinates.

00:02:29.570 --> 00:02:32.150
A radial has a
center and a radius,

00:02:32.150 --> 00:02:34.286
and a sweep just
has a center point.

00:02:34.286 --> 00:02:37.505
I've so far been using the
shorthand of start, end,

00:02:37.505 --> 00:02:39.402
or even center colors
to define gradients,

00:02:39.402 --> 00:02:41.360
but you can actually get
much more fine grained

00:02:41.360 --> 00:02:44.480
and embed these item tags inside
it to define individual color

00:02:44.480 --> 00:02:45.106
stops.

00:02:45.106 --> 00:02:46.730
So here, I'm going
for a specific color

00:02:46.730 --> 00:02:49.457
at 72% of the way through.

00:02:49.457 --> 00:02:52.040
Like ColorStateLists, you define
gradients in a color resource

00:02:52.040 --> 00:02:55.370
directory, or you can use
the inline resource syntax

00:02:55.370 --> 00:02:58.029
to embed it inside the
vector definition itself.

00:02:58.029 --> 00:02:59.570
And at build time,
AAPT will actually

00:02:59.570 --> 00:03:02.210
extract that to a color resource
and insert a reference to it

00:03:02.210 --> 00:03:04.290
for you, which is handy.

00:03:04.290 --> 00:03:06.590
So gradients have been super
handy in building apps.

00:03:06.590 --> 00:03:10.040
Here's an illustration from
a [INAUDIBLE] IO app, which

00:03:10.040 --> 00:03:11.540
if we'd made it as
a gradient, would

00:03:11.540 --> 00:03:13.780
be-- with gradient support,
would have been 1/5

00:03:13.780 --> 00:03:15.530
the size of the
[INAUDIBLE] we had to ship

00:03:15.530 --> 00:03:16.840
and sharp everywhere.

00:03:16.840 --> 00:03:19.702
It's really useful for
things like adaptive icons

00:03:19.702 --> 00:03:22.160
because, unfortunately, vectors
don't support drop shadows,

00:03:22.160 --> 00:03:24.600
but you can fake it a lot
of the time using gradients.

00:03:24.600 --> 00:03:26.070
Or if you need to build
something like a customized

00:03:26.070 --> 00:03:27.819
spinner, this is really
trivial to achieve

00:03:27.819 --> 00:03:30.250
using a radial gradient.

00:03:30.250 --> 00:03:33.110
So gradients only
support certain shapes,

00:03:33.110 --> 00:03:36.170
like this linear, radial, and
sweep, but paths in vectors

00:03:36.170 --> 00:03:38.690
can be transformed,
like rotated and so on.

00:03:38.690 --> 00:03:41.840
So in this example, I wanted to
create this oval shaped shadow

00:03:41.840 --> 00:03:43.170
beneath the jetpack Droid.

00:03:43.170 --> 00:03:46.280
So I did this by drawing a
circle with a radial gradient,

00:03:46.280 --> 00:03:47.960
and then using the
scale y feature

00:03:47.960 --> 00:03:51.854
to transform it to produce
the effect that I was after.

00:03:51.854 --> 00:03:54.570
If the gradient you define
doesn't fill the entire shape

00:03:54.570 --> 00:03:57.150
you're drawing to, you can use
the Tile mode to control how

00:03:57.150 --> 00:03:58.500
it fills the rest of the area.

00:03:58.500 --> 00:04:00.810
So in this example, the
default mode of Clamp,

00:04:00.810 --> 00:04:02.841
it just continues
the color outwards.

00:04:02.841 --> 00:04:05.340
If you use a repeat mode, it'll
repeat between the gradient,

00:04:05.340 --> 00:04:06.540
going back--

00:04:06.540 --> 00:04:07.500
continuing it.

00:04:07.500 --> 00:04:11.700
Or a mirror mode will go back
and forth through the gradient.

00:04:11.700 --> 00:04:13.680
You can also use
gradients which don't

00:04:13.680 --> 00:04:15.990
go through different
colors, so by using

00:04:15.990 --> 00:04:19.140
the same color between two
stops and having the next stop

00:04:19.140 --> 00:04:21.720
start the same point, you can
have these solid color blocks.

00:04:21.720 --> 00:04:23.550
Why would you want a gradient
that doesn't do that?

00:04:23.550 --> 00:04:25.540
Well, you can have some fun
with some pretty cool effects.

00:04:25.540 --> 00:04:28.110
So this example of a rainbow
is with one single shape

00:04:28.110 --> 00:04:31.107
using a radial gradient with
these solid color stops.

00:04:31.107 --> 00:04:32.940
You can do something
like a loading spinner,

00:04:32.940 --> 00:04:34.550
or you can combine
it with a tile mode

00:04:34.550 --> 00:04:36.150
to make some kind
of pattern support.

00:04:36.150 --> 00:04:37.800
So this is the gradient
over this area,

00:04:37.800 --> 00:04:39.280
and the pattern--
the tile mode repeats

00:04:39.280 --> 00:04:40.520
it to give you a
pattern, and you

00:04:40.520 --> 00:04:41.894
can have some fun
doing something

00:04:41.894 --> 00:04:44.692
like animating it to produce
this kind of loading effect.

00:04:44.692 --> 00:04:47.270
So hopefully, I've shown you
that vectors are sharp, small,

00:04:47.270 --> 00:04:49.564
and extremely flexible, so
you can use them everywhere.

00:04:49.564 --> 00:04:51.980
As a final example, I want to
show you what you can build.

00:04:51.980 --> 00:04:54.230
This is a single
animated vector drawable

00:04:54.230 --> 00:04:56.930
drawn by the amazing
Virginia [INAUDIBLE],,

00:04:56.930 --> 00:04:58.920
and I had the pleasure
of animating it.

00:04:58.920 --> 00:05:01.640
So this is one vector drawable,
extremely small, extremely

00:05:01.640 --> 00:05:02.599
sharp in every display.

00:05:02.599 --> 00:05:03.931
You can have some fun with them.

00:05:03.931 --> 00:05:05.110
So that's Vector Drawables.

00:05:05.110 --> 00:05:05.818
Thanks very much.

00:05:05.818 --> 00:05:08.740
[MUSIC PLAYING]

