WEBVTT
Kind: captions
Language: en

00:00:00.430 --> 00:00:06.550
Eventually this load does complete, and let's say brings us a value of 700, and

00:00:06.550 --> 00:00:11.740
it's marked as done. Now we're going to do the branch and the add. Meanwhile,

00:00:11.740 --> 00:00:15.080
we are going to be checking whether we can commit this instruction and

00:00:15.080 --> 00:00:19.270
we can, because it's marked as done, and it's the next instruction to commit.

00:00:19.270 --> 00:00:23.770
So we'll commit this instruction. Which will result in moving the commit pointer

00:00:23.770 --> 00:00:29.600
here, and writing this value of 700 to register R1 and also,

00:00:29.600 --> 00:00:35.010
making the RAT, now point here. Now, let's suppose that a branch takes longer to

00:00:35.010 --> 00:00:40.780
figure out than the ADD. So this ADD completes, produces a value of let's say 3,

00:00:40.780 --> 00:00:44.130
and is done. And that's all that happens here.

00:00:44.130 --> 00:00:48.260
Again, this result would have been written to the registers, thus permanently

00:00:48.260 --> 00:00:53.550
changing R2. And that's all that happens. Now, know that this result of 3 would

00:00:53.550 --> 00:00:57.550
not have been written to the registers even with Thomas [UNKNOWN] algorithm,

00:00:57.550 --> 00:01:02.700
because the renaming for R2, is pointing not to this instruction.

00:01:02.700 --> 00:01:06.830
Meaning that we would have kept in the registers the value of 2, that we would

00:01:06.830 --> 00:01:11.500
have written, for the divide because that's the latest R2. But in this case,

00:01:11.500 --> 00:01:16.380
we don't do any of that. We just keep the values in the ROB as is. Eventually,

00:01:16.380 --> 00:01:21.580
we get to resolve this branch and figure out that it's been mispredicted. So

00:01:21.580 --> 00:01:24.920
now, the branch, will be marked as done.

00:01:24.920 --> 00:01:29.310
We will now start fetching from the correct instructions but the question is,

00:01:29.310 --> 00:01:33.700
how do we get rid of the ones, that we had wrong? Well what we

00:01:33.700 --> 00:01:38.130
do is we annotate here that there has been a misprediction of this branch, and

00:01:38.130 --> 00:01:43.670
that's all that happens as a result of its, execution. And we don't really fix

00:01:43.670 --> 00:01:46.970
the misprediction. We continue fetching the wrong instructions because we don't

00:01:46.970 --> 00:01:51.390
know how to get rid of this, until the commit reaches the point of the branch.

00:01:51.390 --> 00:01:56.320
So when we commit this branch we realize that, after this branch, we were

00:01:56.320 --> 00:02:00.910
fetching the wrong instructions. The PC that the branch should have created,

00:02:00.910 --> 00:02:06.090
is different from the PC we have actually used. At that point what we do is,

00:02:06.090 --> 00:02:10.180
we commit the branch normally. It doesn't write to any registers so

00:02:10.180 --> 00:02:13.220
the commit just moves this. But if it's been mispredicted and

00:02:13.220 --> 00:02:17.420
it was, what we do is we do the recovery before we restart the fetch from

00:02:17.420 --> 00:02:23.020
the correct place. How do we do this recovery? Well with a raw based processor.

00:02:23.020 --> 00:02:27.360
At the point where the commit has reached the branch, the registers,

00:02:28.950 --> 00:02:35.470
contain exactly the values they need to contain, at the point of the branch.

00:02:35.470 --> 00:02:38.420
All of the instructions prior to the branch have been committed,

00:02:38.420 --> 00:02:42.090
which means that their updates have been reflected in the registers. And

00:02:42.090 --> 00:02:45.390
none of the instructions after the branch, have updated the registers.

00:02:45.390 --> 00:02:49.430
So the registers contain exactly the correct value at the point of the branch.

00:02:51.410 --> 00:02:56.376
To undo these instructions, what we need to do, is two things.

00:02:56.376 --> 00:03:01.479
One is, reverse the issuing of these instructions by simply making the ROB

00:03:01.479 --> 00:03:05.060
empty at these points. So after we have committed the branch,

00:03:05.060 --> 00:03:08.250
we make the ROB empty by simply putting the issue point in the same place.

00:03:08.250 --> 00:03:12.830
So we will issue instructions again into these slots. We of course, as we issue

00:03:12.830 --> 00:03:18.340
them unmark this done bit. Also the RAT now contains the wrong values. But

00:03:18.340 --> 00:03:22.500
the questions, what are the right values for the RAT? Well because,

00:03:22.500 --> 00:03:27.280
the registers contain exactly the correct values as of this point. Undoing

00:03:27.280 --> 00:03:32.150
the damage in the RAT, simply consists of, rewriting whatever is in the RAT so

00:03:32.150 --> 00:03:37.480
that each RAT entry points directly, to it's corresponding register. So now.

00:03:37.480 --> 00:03:42.310
It looks like these instructions have never executed or issued for that matter.

00:03:42.310 --> 00:03:47.820
And, we can begin fetching from the correct place, updating the renaming

00:03:47.820 --> 00:03:51.580
as a result of that, and updating the issue pointed as a result of that.

00:03:51.580 --> 00:03:55.210
As you can see, with the ROB based processor, we can do instructions out of

00:03:55.210 --> 00:04:00.220
order, but we still can't figure out what the correct. Or that should have been,

00:04:00.220 --> 00:04:04.610
if we did the right thing at the point of the branch. So as you can see,

00:04:04.610 --> 00:04:08.390
here we have executed these instructions before we figured out the branch, but

00:04:08.390 --> 00:04:13.970
we are still able to undo this damage. Overall, the recovery with

00:04:13.970 --> 00:04:18.050
the ROB based processor consists of, making the right entries point to their

00:04:18.050 --> 00:04:23.060
corresponding register so can, erase all of the renaming. Emptying out whatever

00:04:23.060 --> 00:04:28.350
is in the ROB after we commit the offending branch instruction. And of course,

00:04:28.350 --> 00:04:32.740
getting rid of whatever is leftover in the reservation stations and the ALU so,

00:04:32.740 --> 00:04:36.550
basically free all the reservation stations and stop the ALUs from broadcasting

00:04:36.550 --> 00:04:41.260
results in the future. So if, one of these instructions is still in the ALUs or

00:04:41.260 --> 00:04:44.630
reservation stations. It's going to be, just dropped.

