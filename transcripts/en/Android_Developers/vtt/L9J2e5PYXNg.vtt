WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.410
[MUSIC PLAYING]

00:00:07.720 --> 00:00:09.440
WOJTEK KALICINSKI:
Hello, everyone.

00:00:09.440 --> 00:00:11.140
So today at the
keynote, you probably

00:00:11.140 --> 00:00:13.300
heard that we are
unifying the developer

00:00:13.300 --> 00:00:16.246
experience for Instant Apps
and Android app bundles.

00:00:16.246 --> 00:00:17.620
And so my colleague
Ben and I are

00:00:17.620 --> 00:00:20.230
going to talk to you a little
bit about how that works

00:00:20.230 --> 00:00:21.933
from the developer perspective.

00:00:22.880 --> 00:00:24.930
So Instant Apps,
it's a technology

00:00:24.930 --> 00:00:28.840
that we introduced a little over
two years ago at Google I/O.

00:00:28.840 --> 00:00:34.560
And it lets you give your users
a native Android app experience

00:00:34.560 --> 00:00:37.140
without them having to
explicitly go and install

00:00:37.140 --> 00:00:39.000
your app from the Play Store.

00:00:39.000 --> 00:00:41.460
Now, how that works is
you split up your app

00:00:41.460 --> 00:00:43.770
into smaller pieces
called features.

00:00:43.770 --> 00:00:48.390
And the user can reach those
via a link, a URL, and also

00:00:48.390 --> 00:00:52.380
via other means, as we'll see
later in this presentation.

00:00:52.380 --> 00:00:54.090
Now, to get your
app small enough

00:00:54.090 --> 00:00:57.666
and to be able to
launch it instantly,

00:00:57.666 --> 00:00:59.040
Instant Apps, for
the first time,

00:00:59.040 --> 00:01:01.290
used a technology that we
introduced in Android 5

00:01:01.290 --> 00:01:03.950
Lollipop that's
called split APKs.

00:01:03.950 --> 00:01:06.900
Now, with configuration
split APKs,

00:01:06.900 --> 00:01:09.570
Play Store was able to
deliver the smallest,

00:01:09.570 --> 00:01:14.670
most optimized version of
your app to a user's device.

00:01:14.670 --> 00:01:17.630
Now, in order to do
that, the build system,

00:01:17.630 --> 00:01:22.560
the Gradle Android build
system that you build your apps

00:01:22.560 --> 00:01:24.750
with built all of
those split APKs

00:01:24.750 --> 00:01:28.620
locally, bundled them in a zip
file called an instant bundle.

00:01:28.620 --> 00:01:30.510
And then you upload
that to the Play Store.

00:01:30.510 --> 00:01:33.270
So the Play Store can
choose from the set of APKs

00:01:33.270 --> 00:01:36.240
and deliver it into the devices.

00:01:36.240 --> 00:01:40.710
To do that, the developer had to
do some significant refactoring

00:01:40.710 --> 00:01:41.680
in your apps.

00:01:41.680 --> 00:01:44.280
So the project structure
of an Instant App

00:01:44.280 --> 00:01:47.100
as it looked two, one
year ago, looked probably

00:01:47.100 --> 00:01:48.310
something like this.

00:01:48.310 --> 00:01:52.080
First of all, you had to take
all of your base application

00:01:52.080 --> 00:01:54.210
code and move it from
the application module

00:01:54.210 --> 00:01:55.710
to a base feature.

00:01:55.710 --> 00:01:59.880
Then you had to split your
app into feature modules

00:01:59.880 --> 00:02:02.580
containing the various
features in your app,

00:02:02.580 --> 00:02:06.850
or normally, we would call
them screens or activities.

00:02:06.850 --> 00:02:10.380
And then you had these two
almost empty dummy modules--

00:02:10.380 --> 00:02:12.150
application and Instant App--

00:02:12.150 --> 00:02:14.460
for building the
artifact that we need.

00:02:14.460 --> 00:02:16.290
So the APK for
application, that would

00:02:16.290 --> 00:02:19.570
be the installed application
that you used to have.

00:02:19.570 --> 00:02:21.830
And then the Instant
App zip bundle

00:02:21.830 --> 00:02:23.460
that would contain
all the split APKs

00:02:23.460 --> 00:02:26.100
that you upload to a separate
track in the Play Store.

00:02:26.100 --> 00:02:27.990
Now, this was not ideal.

00:02:27.990 --> 00:02:30.450
As I said, it required
significant work from you.

00:02:30.450 --> 00:02:33.681
Your project no
longer looked simple.

00:02:33.681 --> 00:02:36.770
At the same time this
year, we introduced

00:02:36.770 --> 00:02:38.490
a new publishing
format for Android apps

00:02:38.490 --> 00:02:41.850
called the Android
App Bundle, or AAB.

00:02:41.850 --> 00:02:43.890
This format preserved
some more information

00:02:43.890 --> 00:02:45.600
about what's happening
in your project.

00:02:45.600 --> 00:02:48.150
It contains some
metadata about targeting

00:02:48.150 --> 00:02:49.740
of the resources,
native libraries,

00:02:49.740 --> 00:02:51.390
and so on that are
in your project.

00:02:51.390 --> 00:02:55.350
But it also actually retains
some of the module information

00:02:55.350 --> 00:02:58.410
about a new type of module
called dynamic feature that's

00:02:58.410 --> 00:03:00.230
in your project.

00:03:00.230 --> 00:03:01.830
Now, I called it a
publishing format,

00:03:01.830 --> 00:03:05.445
because you use it to
upload this whole big bundle

00:03:05.445 --> 00:03:07.920
of telling the Play Store
everything about your app

00:03:07.920 --> 00:03:08.880
to Play.

00:03:08.880 --> 00:03:11.910
And then together with
Google Play Dynamic Delivery,

00:03:11.910 --> 00:03:15.660
we are able to serve an
optimized set of split APKs

00:03:15.660 --> 00:03:17.960
to users' devices.

00:03:17.960 --> 00:03:20.420
In order to do that,
there's one big difference.

00:03:20.420 --> 00:03:24.140
Because it happens on the
server side, on the Play Store,

00:03:24.140 --> 00:03:26.720
we need to be able
to resign your app.

00:03:26.720 --> 00:03:28.850
That's why if you use
an Android App Bundle,

00:03:28.850 --> 00:03:31.609
you have to enable app
signing by Google Play.

00:03:31.609 --> 00:03:32.650
Now, that's a good thing.

00:03:32.650 --> 00:03:36.350
Actually, if you let us store
your key for you, it is safer.

00:03:36.350 --> 00:03:37.610
It's more secure.

00:03:37.610 --> 00:03:39.845
But there's also
another benefit.

00:03:39.845 --> 00:03:42.260
Thanks to the fact that
we can transform your APKs

00:03:42.260 --> 00:03:45.800
and make them more optimized,
as we develop more optimizations

00:03:45.800 --> 00:03:47.950
on the Play Store
side, over time,

00:03:47.950 --> 00:03:49.730
what we deliver
to users' devices

00:03:49.730 --> 00:03:52.040
can be even more optimized,
as we just announced

00:03:52.040 --> 00:03:54.160
with uncompressed libraries.

00:03:54.160 --> 00:03:56.600
And so it would
make sense to move

00:03:56.600 --> 00:03:58.820
Instant Apps to this new model.

00:03:58.820 --> 00:04:02.090
Why build all the APKs
locally and then not

00:04:02.090 --> 00:04:05.355
be able to optimize them
further on the Play Store?

00:04:05.355 --> 00:04:06.980
What if we could use
the new App Bundle

00:04:06.980 --> 00:04:11.010
format to deliver an instant
app experience to our users?

00:04:11.010 --> 00:04:13.280
So let me tell
you how to go back

00:04:13.280 --> 00:04:17.550
to that simpler, better project
structure for your Instant

00:04:17.550 --> 00:04:18.050
Apps.

00:04:18.050 --> 00:04:21.560
So if you've ever done that
whole dance to move modules

00:04:21.560 --> 00:04:24.080
around and move your
code to a base feature

00:04:24.080 --> 00:04:27.710
and so on, we literally have to
go back to that simple project

00:04:27.710 --> 00:04:30.340
you used as you
would build your APK.

00:04:30.340 --> 00:04:34.910
So first of all, we no longer
need the Instant App plugin.

00:04:34.910 --> 00:04:37.500
Everything that we need is baked
into the application plugin

00:04:37.500 --> 00:04:39.450
that can now build bundles.

00:04:39.450 --> 00:04:43.350
And so we don't need the
base feature anymore.

00:04:43.350 --> 00:04:45.760
Instead, we can move our
code back to the application,

00:04:45.760 --> 00:04:49.840
or we'll be using that to build
our unified bundle artifact.

00:04:49.840 --> 00:04:52.520
And so again, with
feature modules,

00:04:52.520 --> 00:04:54.800
we now replace them
with dynamic features

00:04:54.800 --> 00:04:57.860
that work in app bundle world.

00:04:57.860 --> 00:05:00.320
So ultimately, we
want something simple.

00:05:00.320 --> 00:05:03.560
You can have your
application module

00:05:03.560 --> 00:05:06.020
with any additional library
modules that you need.

00:05:06.020 --> 00:05:08.000
Optionally, we have
dynamic features

00:05:08.000 --> 00:05:10.010
that can be
downloaded on demand,

00:05:10.010 --> 00:05:12.650
adding functionality
to your app at runtime.

00:05:12.650 --> 00:05:14.810
And we have the single
piece of metadata

00:05:14.810 --> 00:05:17.060
that tells the Play
Store that this bundle

00:05:17.060 --> 00:05:18.701
is Instant App enabled.

00:05:18.701 --> 00:05:21.200
So that would be great if you
could upload that one artifact

00:05:21.200 --> 00:05:24.050
to the Play Store and have it
published both on the install

00:05:24.050 --> 00:05:24.980
and instant track.

00:05:24.980 --> 00:05:27.910
And that's exactly
what we're aiming for.

00:05:27.910 --> 00:05:29.250
Now, there's one caveat.

00:05:29.250 --> 00:05:31.780
We are currently testing
that with our partners.

00:05:31.780 --> 00:05:33.890
But you might not
actually be able to upload

00:05:33.890 --> 00:05:36.170
the single artifact to
the Play Store just yet.

00:05:36.170 --> 00:05:38.450
That's why, if you want
to try it right now,

00:05:38.450 --> 00:05:42.080
I suggest you create two product
variants in this simple project

00:05:42.080 --> 00:05:43.360
structure still.

00:05:43.360 --> 00:05:46.850
And in one of the variants,
simply enable the metadata

00:05:46.850 --> 00:05:49.610
with enabling the Instant
App for your bundle,

00:05:49.610 --> 00:05:52.790
and use the other
variant to build a bundle

00:05:52.790 --> 00:05:56.470
without that entry
in the manifest.

00:05:56.470 --> 00:05:58.430
Still simple enough,
still one project.

00:05:58.430 --> 00:06:00.620
One app, one code base.

00:06:00.620 --> 00:06:03.770
Just for the time being, you
might have to do that in order

00:06:03.770 --> 00:06:06.980
to upload to the Play Store.

00:06:06.980 --> 00:06:08.970
By the way, there's
another white list.

00:06:08.970 --> 00:06:11.180
If you want to use
dynamic features in order

00:06:11.180 --> 00:06:15.020
to let your users download
them on demand, as they run

00:06:15.020 --> 00:06:19.370
your app, this is also under
a white list for developers

00:06:19.370 --> 00:06:20.390
who want to test that.

00:06:20.390 --> 00:06:21.510
You can apply online.

00:06:21.510 --> 00:06:24.260
However, you are currently
not able to publish your app

00:06:24.260 --> 00:06:28.890
to the production track if
you have more than one module.

00:06:28.890 --> 00:06:31.520
OK, so how to try it
yourself right now.

00:06:31.520 --> 00:06:34.910
First thing you need to do
is use the new Android Studio

00:06:34.910 --> 00:06:37.390
3.3 that's currently
on the beta channel.

00:06:37.390 --> 00:06:40.010
And if you're creating
a product from scratch,

00:06:40.010 --> 00:06:42.110
you can simply
select this checkbox.

00:06:42.110 --> 00:06:45.020
We'll create the modules
with the necessary metadata

00:06:45.020 --> 00:06:47.084
already in there.

00:06:47.084 --> 00:06:48.250
So that's how it looks like.

00:06:48.250 --> 00:06:51.470
In your base manifest,
you instant enable it,

00:06:51.470 --> 00:06:54.879
and you're good to go.

00:06:54.879 --> 00:06:57.170
If your app is compliant with
all the other Instant App

00:06:57.170 --> 00:06:58.760
restrictions, such
as file size, which

00:06:58.760 --> 00:07:01.040
Ben will talk about
later, now, you

00:07:01.040 --> 00:07:04.580
have a chance to publish an
instant-enabled bundle already.

00:07:04.580 --> 00:07:08.060
Now, if you already have
a project, which you're

00:07:08.060 --> 00:07:10.040
using to build an
App Bundle, you

00:07:10.040 --> 00:07:11.510
can also use the
new module wizard

00:07:11.510 --> 00:07:15.795
to add a new instant
dynamic feature module.

00:07:15.795 --> 00:07:17.420
If you add one of
these, this will also

00:07:17.420 --> 00:07:20.430
instant enable your base
module if you haven't done so.

00:07:20.430 --> 00:07:24.380
Now, all that's left
is build an App Bundle

00:07:24.380 --> 00:07:26.870
either through Gradle, the
bundle release command,

00:07:26.870 --> 00:07:32.547
instead of assemble release or
through the wizard and the UI.

00:07:32.547 --> 00:07:34.630
By the way, if you're using
our Android Dev Summit

00:07:34.630 --> 00:07:36.790
app right here at
this conference,

00:07:36.790 --> 00:07:39.910
it's been built exactly as
an instant-enable app bundle.

00:07:39.910 --> 00:07:44.140
So we published that through
our channels on the Play Store.

00:07:44.140 --> 00:07:47.560
What you are using right now is
exactly what I'm talking about.

00:07:47.560 --> 00:07:49.300
And it's been great.

00:07:49.300 --> 00:07:52.390
It's greatly simplified
what we had to do in order

00:07:52.390 --> 00:07:55.410
to have that working.

00:07:55.410 --> 00:07:57.310
Now, let me invite
on stage Ben, who'll

00:07:57.310 --> 00:07:59.980
tell you a little bit about best
practices for module arising

00:07:59.980 --> 00:08:02.130
and discovery of your app.

00:08:02.130 --> 00:08:03.880
Ben.

00:08:03.880 --> 00:08:04.755
BEN WEISS: Thank you.

00:08:04.755 --> 00:08:06.630
WOJTEK KALICINSKI: Round
of applause, please.

00:08:06.630 --> 00:08:08.190
[APPLAUSE]

00:08:08.190 --> 00:08:10.000
BEN WEISS: Thank you very much.

00:08:10.000 --> 00:08:14.205
So yeah, let me talk a bit about
discoverability of your Instant

00:08:14.205 --> 00:08:14.790
Apps.

00:08:14.790 --> 00:08:17.700
Basically, one of them you
already saw, which is the

00:08:17.700 --> 00:08:18.670
Try Now functionality.

00:08:18.670 --> 00:08:20.294
I'll talk a little
bit more about this.

00:08:20.294 --> 00:08:23.040
So Try Now basically
is the second button

00:08:23.040 --> 00:08:27.210
that you get on the Play Store,
which allows users to instantly

00:08:27.210 --> 00:08:29.284
download and run the app
straight from the Play

00:08:29.284 --> 00:08:31.200
Store without having to
permanently install it

00:08:31.200 --> 00:08:32.640
on the device.

00:08:32.640 --> 00:08:35.190
That's a great experience
that you can easily

00:08:35.190 --> 00:08:35.909
see how it works.

00:08:35.909 --> 00:08:38.400
You can go to the Play
Store now and check it out

00:08:38.400 --> 00:08:40.000
for the Android Dev Summit app.

00:08:40.000 --> 00:08:43.980
Your users can launch it
directly from the landing page.

00:08:43.980 --> 00:08:45.190
It's quite cool.

00:08:45.190 --> 00:08:47.760
And if you don't have a URL
associated with your app,

00:08:47.760 --> 00:08:48.670
that works as well.

00:08:48.670 --> 00:08:50.160
So you don't have
the restrictions

00:08:50.160 --> 00:08:53.230
that the app has to
map to URLs anymore.

00:08:53.230 --> 00:08:54.450
How do you do that?

00:08:54.450 --> 00:08:55.290
That's basically it.

00:08:55.290 --> 00:08:58.740
I think that everybody has this
somewhere in their application.

00:08:58.740 --> 00:09:01.020
It's the main launcher.

00:09:01.020 --> 00:09:05.550
You don't have to do anything
else at the instant metadata

00:09:05.550 --> 00:09:07.595
that Wojtek showed you earlier.

00:09:07.595 --> 00:09:08.970
So there is nothing
else that you

00:09:08.970 --> 00:09:11.880
have to do in order to be
eligible for the Try Now

00:09:11.880 --> 00:09:13.120
experience.

00:09:13.120 --> 00:09:16.770
But what if you want to
have your app available

00:09:16.770 --> 00:09:18.810
with a URL mapping?

00:09:18.810 --> 00:09:24.840
That allows you basically to
access your app through any URL

00:09:24.840 --> 00:09:27.190
that you have associated
with your app.

00:09:27.190 --> 00:09:28.890
The first thing
you have to do is

00:09:28.890 --> 00:09:31.450
you have to verify that
you own the domain.

00:09:31.450 --> 00:09:33.460
To do that, you generate
and upload an asset

00:09:33.460 --> 00:09:34.610
links JSON file.

00:09:34.610 --> 00:09:36.660
There's a couple of
helpers online that

00:09:36.660 --> 00:09:39.540
verify whether the file
you uploaded is correct

00:09:39.540 --> 00:09:41.315
and the one that you
have in your app--

00:09:41.315 --> 00:09:43.257
that the mapping is
correct with that as well.

00:09:43.257 --> 00:09:45.090
And then you can share
the link with anyone,

00:09:45.090 --> 00:09:47.310
and they can open
the app straightaway.

00:09:47.310 --> 00:09:49.560
Let me walk you through how
that works from where we

00:09:49.560 --> 00:09:51.800
started with the main launcher.

00:09:51.800 --> 00:09:54.320
Basically, you have
to set a second intent

00:09:54.320 --> 00:09:57.150
filter with the auto
verify flag set to true.

00:09:57.150 --> 00:09:59.400
That flag tells the
Play Store that it

00:09:59.400 --> 00:10:01.330
should check for
the asset links JSON

00:10:01.330 --> 00:10:04.390
file on the URL provided below.

00:10:04.390 --> 00:10:07.156
Then you add the Action View
category browser by default

00:10:07.156 --> 00:10:08.530
that you say that
this is the one

00:10:08.530 --> 00:10:12.380
thing that I want to use as
the default to view this URL.

00:10:12.380 --> 00:10:15.700
You then add the
schemes for HTTP, HTTPS.

00:10:15.700 --> 00:10:18.430
And you can add multiple
path or path prefixes

00:10:18.430 --> 00:10:24.190
to just walk the user to
multiple of your activities.

00:10:24.190 --> 00:10:26.660
For the one that you want to
use as the default activity--

00:10:26.660 --> 00:10:29.770
so when they come from Try
Now or whether they come from

00:10:29.770 --> 00:10:31.170
your home screen--

00:10:31.170 --> 00:10:32.470
is the metadata here.

00:10:32.470 --> 00:10:34.880
It has to be a sibling
[? tack ?] to the above intent

00:10:34.880 --> 00:10:37.360
filter, which just says
this is the default URL.

00:10:37.360 --> 00:10:41.020
And this is where I want my
users to come in initially.

00:10:41.020 --> 00:10:42.430
Like I said earlier,
if you don't

00:10:42.430 --> 00:10:44.804
have a URL in the first place,
you don't have to do this.

00:10:44.804 --> 00:10:47.510
But if you have to
have a URL mapping,

00:10:47.510 --> 00:10:49.400
then this is the way to go.

00:10:49.400 --> 00:10:50.940
And it's not a
lot of work to do.

00:10:50.940 --> 00:10:53.830
And it gives users
the experience

00:10:53.830 --> 00:10:57.070
that you can share any link
that leads to your app.

00:10:57.070 --> 00:11:00.250
And any Android user can then
open the app straightaway

00:11:00.250 --> 00:11:02.210
without having to
install it permanently.

00:11:02.210 --> 00:11:04.750
And I think, for a conference,
it's a good use case

00:11:04.750 --> 00:11:06.700
to have an app
that you use once,

00:11:06.700 --> 00:11:08.530
and you don't have
to fully install it.

00:11:08.530 --> 00:11:10.690
You have the instant
app, and for a couple

00:11:10.690 --> 00:11:13.060
of features, like, in our
case, it's notifications,

00:11:13.060 --> 00:11:14.750
you still have to
install the app.

00:11:14.750 --> 00:11:17.470
But it's fair enough
to have an experience

00:11:17.470 --> 00:11:19.910
that you can start straightaway
without the first steps

00:11:19.910 --> 00:11:21.830
necessary.

00:11:21.830 --> 00:11:26.380
Also, there is another thing
that we use for App Bundles

00:11:26.380 --> 00:11:29.590
in order to download
code dynamically.

00:11:29.590 --> 00:11:34.360
So going back to the previous
section is basically,

00:11:34.360 --> 00:11:39.220
you can do that with the zip
and feature Instant Apps.

00:11:39.220 --> 00:11:40.660
We're going on forward now.

00:11:40.660 --> 00:11:42.900
You have to ship your
app as an App Bundle,

00:11:42.900 --> 00:11:46.000
and you have to use dynamic
feature modules in order

00:11:46.000 --> 00:11:47.800
to make use of the
Play Core Library.

00:11:47.800 --> 00:11:51.100
The Play Core Library allows
you to download features

00:11:51.100 --> 00:11:53.830
dynamically on
demand, so not during

00:11:53.830 --> 00:11:55.130
the initial installation.

00:11:55.130 --> 00:11:58.450
And it's unified between
Instant App and installed app.

00:11:58.450 --> 00:12:01.054
So you don't have to do
different calls on that,

00:12:01.054 --> 00:12:02.470
and it does all
the heavy lifting.

00:12:02.470 --> 00:12:06.701
So if you say to Play Core
Library, download this,

00:12:06.701 --> 00:12:07.950
it connects to the Play Store.

00:12:07.950 --> 00:12:08.616
It downloads it.

00:12:08.616 --> 00:12:11.590
It puts it in the right
place for Instant Apps.

00:12:11.590 --> 00:12:14.380
It puts it into the
shared [INAUDIBLE]

00:12:14.380 --> 00:12:17.760
and installs it on that
device permanently.

00:12:17.760 --> 00:12:19.620
So how does it work?

00:12:19.620 --> 00:12:23.185
Well, you add it as a
dependency available from Made

00:12:23.185 --> 00:12:27.440
from Google [INAUDIBLE]
and use it in your project.

00:12:27.440 --> 00:12:29.816
And then you create a split
install manager factory

00:12:29.816 --> 00:12:30.690
within your activity.

00:12:30.690 --> 00:12:31.830
You hold onto that.

00:12:31.830 --> 00:12:35.080
Create a request, where you can
install one or multiple modules

00:12:35.080 --> 00:12:37.045
at the same time.

00:12:37.045 --> 00:12:39.650
Those module names have
to match the module name

00:12:39.650 --> 00:12:41.870
that you set for the
dynamic feature module

00:12:41.870 --> 00:12:44.180
directly in the
manifest of that module.

00:12:44.180 --> 00:12:46.380
You build it and then
you just tell the manager

00:12:46.380 --> 00:12:48.464
to start the installation.

00:12:48.464 --> 00:12:50.380
And that's all the code
that you need in order

00:12:50.380 --> 00:12:51.359
to get started with it.

00:12:51.359 --> 00:12:52.900
Obviously, there's
a couple of things

00:12:52.900 --> 00:12:54.149
that you have to do around it.

00:12:54.149 --> 00:12:55.790
I'll go into that in a second.

00:12:55.790 --> 00:12:57.487
But before we do
that, if you don't

00:12:57.487 --> 00:12:59.320
want to start the
installation straightaway,

00:12:59.320 --> 00:13:01.450
there's a way to do a
deferred installation.

00:13:01.450 --> 00:13:04.900
So for example, if you have your
instant app, you'd start it.

00:13:04.900 --> 00:13:08.470
And you know that your user
is in a flow, where they're,

00:13:08.470 --> 00:13:09.737
for example, buying something.

00:13:09.737 --> 00:13:11.320
So they've logged
in, and then they're

00:13:11.320 --> 00:13:13.830
starting the purchase process.

00:13:13.830 --> 00:13:17.090
And you want to download a
payment module, for example.

00:13:17.090 --> 00:13:19.440
You can do that deferred
or during the flow.

00:13:19.440 --> 00:13:22.750
When the user is in that, you
can do these installations.

00:13:22.750 --> 00:13:25.320
Also, uninstallation
is deferred.

00:13:25.320 --> 00:13:28.492
So that means the uninstallation
doesn't get done straightaway.

00:13:28.492 --> 00:13:29.950
But at some point,
where the system

00:13:29.950 --> 00:13:33.490
says, yes, I'm cleaning up,
this is where this module also

00:13:33.490 --> 00:13:35.620
gets removed.

00:13:35.620 --> 00:13:37.370
You can also cancel
installation requests.

00:13:37.370 --> 00:13:40.370
If, for whatever reason, you,
from a developer perspective,

00:13:40.370 --> 00:13:43.798
want to cancel that,
there's an option to do it.

00:13:43.798 --> 00:13:47.370
And there is a listener that
you can set on the manager.

00:13:47.370 --> 00:13:49.050
That's my preferred
way of listening

00:13:49.050 --> 00:13:52.230
for the state updates, the
splitinstallstateupdatelistener.

00:13:52.230 --> 00:13:54.177
It's quite a word.

00:13:54.177 --> 00:13:55.260
That's quite a few things.

00:13:55.260 --> 00:13:57.390
So usually what
happens-- the happy path

00:13:57.390 --> 00:13:59.970
is you trigger an install.

00:13:59.970 --> 00:14:02.790
Your app starts with
pending and then goes

00:14:02.790 --> 00:14:03.999
to downloading, downloaded.

00:14:03.999 --> 00:14:05.790
And then there is
installing and installed.

00:14:05.790 --> 00:14:07.410
That's your happy path.

00:14:07.410 --> 00:14:10.290
That's what happens
for a module that

00:14:10.290 --> 00:14:15.000
is small enough to not trigger
the required user confirmation.

00:14:15.000 --> 00:14:17.250
If you go into that
state, you will

00:14:17.250 --> 00:14:21.050
be given some information that
you can start an intent with.

00:14:21.050 --> 00:14:23.400
And that intent allows
you to show a dialog

00:14:23.400 --> 00:14:25.230
that the user can
confirm or deny

00:14:25.230 --> 00:14:28.950
whether they want to install
this module at this point.

00:14:28.950 --> 00:14:30.700
If they confirm that
they want to install,

00:14:30.700 --> 00:14:32.710
you come back into
the happy path

00:14:32.710 --> 00:14:35.350
and continue downloading
and installation.

00:14:35.350 --> 00:14:39.700
At most points that your
installation can be canceled

00:14:39.700 --> 00:14:41.560
or in the canceling
state, as well

00:14:41.560 --> 00:14:44.420
as for a couple of
reasons, it can fail.

00:14:44.420 --> 00:14:46.830
So that's the path
where you have

00:14:46.830 --> 00:14:48.270
to handle all those states.

00:14:48.270 --> 00:14:50.400
We do have a sample
available for that,

00:14:50.400 --> 00:14:54.270
and I'll share URLs for that
later on in this session.

00:14:54.270 --> 00:14:56.120
So you can take a
look at how it works.

00:14:57.980 --> 00:15:01.430
I talked a little
about file size.

00:15:01.430 --> 00:15:04.970
The limit that triggers, for
example, the requires user

00:15:04.970 --> 00:15:07.760
confirmation, coincides
with a couple of limits

00:15:07.760 --> 00:15:09.190
that we have set
for Instant Apps,

00:15:09.190 --> 00:15:14.510
in general, and for
Dynamic Delivery.

00:15:14.510 --> 00:15:17.620
One of the things
we do is we don't

00:15:17.620 --> 00:15:21.730
take the installed size
or the downloaded size

00:15:21.730 --> 00:15:23.530
as the main factor anymore.

00:15:23.530 --> 00:15:26.890
So if your app on device
has a file size that's

00:15:26.890 --> 00:15:28.570
larger than the
limit, then that's

00:15:28.570 --> 00:15:31.340
all right, because we take the
download size into account.

00:15:31.340 --> 00:15:33.134
So you get some
compression over the wire.

00:15:33.134 --> 00:15:35.050
And that's what we take
into account for that.

00:15:35.050 --> 00:15:38.240
And this will be shown in
the Play Console as well.

00:15:38.240 --> 00:15:40.390
So you'll see your download
size will say you're

00:15:40.390 --> 00:15:42.410
above or below the threshold.

00:15:42.410 --> 00:15:43.930
Also, dynamic
feature modules don't

00:15:43.930 --> 00:15:47.340
fall into the initial
download size as well.

00:15:47.340 --> 00:15:50.680
What falls into it is
basically your base module

00:15:50.680 --> 00:15:52.220
and your instant entry module.

00:15:52.220 --> 00:15:54.370
If you have more than
one, which you can have,

00:15:54.370 --> 00:15:56.890
then it's your base module
and your largest instant entry

00:15:56.890 --> 00:15:57.640
module.

00:15:57.640 --> 00:15:59.650
And those currently
under our white list

00:15:59.650 --> 00:16:03.800
have to be less
than 10 megabytes.

00:16:03.800 --> 00:16:06.170
Dynamic feature modules
that you download later on

00:16:06.170 --> 00:16:08.630
or other instant entry
modules that are smaller

00:16:08.630 --> 00:16:12.071
don't fall into these 10
megabytes in the first place.

00:16:12.071 --> 00:16:14.710
But let me tell you a little
bit about what this entails.

00:16:14.710 --> 00:16:16.540
So if your app is larger
than 10 megabytes,

00:16:16.540 --> 00:16:20.200
well, you don't get any of
the Instant App benefits.

00:16:20.200 --> 00:16:24.610
Your app can't be discoverable
to users as an Instant App.

00:16:24.610 --> 00:16:27.295
If your app is less than 10,
but more than four megabytes,

00:16:27.295 --> 00:16:29.764
your app can be seen
as an Instant App

00:16:29.764 --> 00:16:31.180
and can be used
as an Instant App.

00:16:31.180 --> 00:16:36.070
So you can access it through
Try Now on the Play Store.

00:16:36.070 --> 00:16:40.990
And also, you can show it in web
banners or share it via URLs.

00:16:40.990 --> 00:16:44.620
If your base module and
your Instant Entry module

00:16:44.620 --> 00:16:46.774
is less than four
megabytes, then your app

00:16:46.774 --> 00:16:48.190
can be discovered
from everywhere.

00:16:48.190 --> 00:16:50.560
That means from ads,
from search results.

00:16:50.560 --> 00:16:54.190
So for example, if you search
for the Android Dev Summit app,

00:16:54.190 --> 00:16:55.912
you will see a
search result. If you

00:16:55.912 --> 00:16:57.870
click that, you will go
straight to the Instant

00:16:57.870 --> 00:16:59.830
App on your Android device.

00:16:59.830 --> 00:17:03.350
That's because it's under
this 4 megabyte threshold.

00:17:03.350 --> 00:17:06.859
And while you're at it, you
can continue modularizing.

00:17:06.859 --> 00:17:10.300
I know modularizing
is a tricky topic,

00:17:10.300 --> 00:17:13.300
because it entails some work
that some people are not

00:17:13.300 --> 00:17:16.060
100% certain how
that is done best.

00:17:16.060 --> 00:17:19.285
We recently went through the
whole process with a project.

00:17:19.285 --> 00:17:20.500
It's called Plaid.

00:17:20.500 --> 00:17:21.430
It's online.

00:17:21.430 --> 00:17:22.480
It's available on GitHub.

00:17:22.480 --> 00:17:25.210
And I'll talk a
little bit about how

00:17:25.210 --> 00:17:28.900
we managed to move away from a
monolithic app to an app that

00:17:28.900 --> 00:17:31.600
uses app bundles and
dynamic feature modules.

00:17:31.600 --> 00:17:33.460
While it's not currently
an Instant App,

00:17:33.460 --> 00:17:36.850
it, due to a unified approach,
uses the same technology

00:17:36.850 --> 00:17:39.910
underneath that you can use
for modularizing an Instant

00:17:39.910 --> 00:17:41.830
App as well.

00:17:41.830 --> 00:17:45.260
So firstly, what we did is--

00:17:45.260 --> 00:17:49.320
what most apps will do is we
created a base module, which

00:17:49.320 --> 00:17:55.380
hosts all the domain code and
data, so shared preferences,

00:17:55.380 --> 00:17:57.510
log in, for example,
some of the repositories,

00:17:57.510 --> 00:18:00.130
some persistent API calls,
and things like that.

00:18:00.130 --> 00:18:02.980
And on top of that are
different feature modules.

00:18:02.980 --> 00:18:05.100
Those feature modules have
their own domain code,

00:18:05.100 --> 00:18:07.526
their own logic, and
obviously, the UI,

00:18:07.526 --> 00:18:09.150
which is only displayed
in this module.

00:18:11.770 --> 00:18:14.180
That setup can be
used for many apps

00:18:14.180 --> 00:18:16.530
if you have a base module
which shares information,

00:18:16.530 --> 00:18:19.132
and on top of that, the
different feature modules.

00:18:19.132 --> 00:18:23.200
But let me share a little bit
more in-depth what we did.

00:18:23.200 --> 00:18:26.034
So initially, we had an
app, which is the module

00:18:26.034 --> 00:18:26.950
that most people have.

00:18:26.950 --> 00:18:28.780
So we had this monolith.

00:18:28.780 --> 00:18:30.940
And if we shipped
as an APK, that's

00:18:30.940 --> 00:18:33.460
fine, because, well,
there is no reason

00:18:33.460 --> 00:18:37.490
to go into the whole
modularization part if we then,

00:18:37.490 --> 00:18:40.120
in the end, have one
single, monolithic app

00:18:40.120 --> 00:18:43.492
APK that we ship to our users.

00:18:43.492 --> 00:18:46.120
But since we were considering
going towards dynamic feature

00:18:46.120 --> 00:18:48.940
modules and app bundles,
we moved everything

00:18:48.940 --> 00:18:50.500
into a base, which,
on one hand, had

00:18:50.500 --> 00:18:52.874
the shared dependencies, which
basically means everything

00:18:52.874 --> 00:18:56.740
that we include coming
from whatever repositories

00:18:56.740 --> 00:19:00.970
externally, as well as a couple
of local third-party APIs

00:19:00.970 --> 00:19:05.010
in libraries that we have
[INAUDIBLE] and worked with.

00:19:05.010 --> 00:19:08.430
After we had this, we
started working on features

00:19:08.430 --> 00:19:12.630
that we extracted
from the app itself.

00:19:12.630 --> 00:19:15.390
The first that we started
with was an about screen.

00:19:15.390 --> 00:19:16.800
Because, well, an
about screen is

00:19:16.800 --> 00:19:18.720
kind of untangled
from most of the stuff

00:19:18.720 --> 00:19:19.960
that we have within the app.

00:19:19.960 --> 00:19:25.447
So it's a good starting point
for getting our hands wet with,

00:19:25.447 --> 00:19:28.030
what does it actually entail to
make a dynamic feature module?

00:19:28.030 --> 00:19:29.940
How do we do all those things?

00:19:29.940 --> 00:19:32.350
Then we went on to
do a search screen.

00:19:32.350 --> 00:19:35.130
And after that, we
have two new sources

00:19:35.130 --> 00:19:37.440
that we extracted into dynamic
feature modules as well.

00:19:37.440 --> 00:19:40.547
And they all depend on
the app, and the app

00:19:40.547 --> 00:19:42.630
and everything shares the
information through that

00:19:42.630 --> 00:19:43.890
as well.

00:19:43.890 --> 00:19:45.900
You can read up more
in-depth on a blog post

00:19:45.900 --> 00:19:50.380
on the Android Developers'
"Medium" blog publication.

00:19:50.380 --> 00:19:52.925
Also, we do have information
available on Instant Apps,

00:19:52.925 --> 00:19:54.940
in general, and on
App Bundle, as well

00:19:54.940 --> 00:19:56.980
as samples on Android
dynamic features,

00:19:56.980 --> 00:20:00.340
as well as how to use
Instant App without URLs.

00:20:00.340 --> 00:20:04.150
The Android Instant Apps team
is outside at the office hours

00:20:04.150 --> 00:20:05.770
to share information
and knowledge.

00:20:05.770 --> 00:20:08.110
If you have questions,
please come over there.

00:20:08.110 --> 00:20:10.210
And with that,
thank you very much.

00:20:10.210 --> 00:20:11.410
[APPLAUSE]

00:20:11.410 --> 00:20:14.160
[MUSIC PLAYING]

