WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
We just saw how when evaluating statements like a return statement

00:00:03.000 --> 00:00:05.000
we could throw an exception.

00:00:05.000 --> 00:00:08.000
Now we're in a great position to code up function calls,

00:00:08.000 --> 00:00:12.000
which we'll have to set up a new environment and catch the return values.

00:00:12.000 --> 00:00:16.000
Once again we extract this statement type from our abstract syntax tree,

00:00:16.000 --> 00:00:18.000
and now we want to handle function calls.

00:00:18.000 --> 00:00:21.000
There are 2 parts to a function call abstract syntax tree:

00:00:21.000 --> 00:00:25.000
the name of the function, like absolute value or myfun or square root,

00:00:25.000 --> 00:00:27.000
and then the arguments.

00:00:27.000 --> 00:00:29.000
And because the function may have 1, 2, 3, or more arguments,

00:00:29.000 --> 00:00:32.000
we just have a list of expressions.

00:00:32.000 --> 00:00:35.000
Function name may mean different things in different contexts,

00:00:35.000 --> 00:00:37.000
just like any other variable,

00:00:37.000 --> 00:00:39.000
so we'll go look it up in the current environment.

00:00:39.000 --> 00:00:45.000
We're going to have to decide what it means for something to be a function.

00:00:45.000 --> 00:00:50.000
For something like an integer or a string, we can just use a Python integer or string.

00:00:50.000 --> 00:00:53.000
For a function, we're going to use a tuple where the first part is function

00:00:53.000 --> 00:00:55.000
so that we know one when we see it,

00:00:55.000 --> 00:00:59.000
then there's a list of formal parameters, then there's the body,

00:00:59.000 --> 00:01:04.000
and then there's the environment, and we'll see how that comes into play later.

00:01:04.000 --> 00:01:08.000
For now I'm just going to promise that this is how functions will turn out,

00:01:08.000 --> 00:01:12.000
and later, in the next step, we'll make that promise true

00:01:12.000 --> 00:01:16.000
by having function definitions produce these 4 tuple values.

00:01:16.000 --> 00:01:19.000
So we'll just pull out the function parameters, the function body,

00:01:19.000 --> 00:01:21.000
and the function environment.

00:01:21.000 --> 00:01:25.000
For example, if we're still calling square root, square root's official formal parameter name

00:01:25.000 --> 00:01:29.000
might be x when we passed in the particular actual argument 2.

00:01:29.000 --> 00:01:33.000
One of the goals in our interpreter is to rule out bad code.

00:01:33.000 --> 00:01:36.000
One easy mistake to make is to pass in the wrong number of arguments,

00:01:36.000 --> 00:01:41.000
to have a different number of actual arguments and formal parameters.

00:01:41.000 --> 00:01:44.000
We'll just check for that now. They're both lists. Compare their lengths.

00:01:44.000 --> 00:01:47.000
Otherwise, we have to make a new environment frame,

00:01:47.000 --> 00:01:49.000
which I'll leave for you to do,

00:01:49.000 --> 00:01:52.000
and then we want to evaluate the body in that new frame.

00:01:52.000 --> 00:01:56.000
We'll have to make a new environment frame and follow all of those steps--

00:01:56.000 --> 00:02:00.000
make, potentially, spaces in the new frame for the formal parameters

00:02:00.000 --> 00:02:03.000
and assign to them the values of the actual arguments.

00:02:03.000 --> 00:02:05.000
So we have quite a bit to do in here.

00:02:05.000 --> 00:02:08.000
Then we want to evaluate the body in the new frame,

00:02:08.000 --> 00:02:11.000
and we're going to do that with exception handling.

00:02:11.000 --> 00:02:14.000
We'll try doing something--you tell me--

00:02:14.000 --> 00:02:17.000
and ideally, we will get to the end and somewhere in the middle

00:02:17.000 --> 00:02:21.000
we'll have raised that special exception holding the return value.

00:02:21.000 --> 00:02:23.000
If that happens, we'll return the return value.

00:02:23.000 --> 00:02:27.000
Otherwise, the user wrote code without a return statement; we'll just return None.

00:02:27.000 --> 00:02:30.000
All the way up topside they're trying to call something like square root.

00:02:30.000 --> 00:02:34.000
Square root better be a function and not some string or some number.

00:02:34.000 --> 00:02:36.000
All the way down here we check for that.

00:02:36.000 --> 00:02:40.000
If we try to call something that was not a function, we'll just print out an error.

00:02:40.000 --> 00:02:42.000
Here's your quiz.

00:02:42.000 --> 00:02:47.000
Fill in these 2 pieces of code so that we correctly handle function calls.

00:02:47.000 --> 00:02:49.000
It's worth noting that this quiz is pretty tricky.

00:02:49.000 --> 00:02:52.000
This is a little more programming than we normally ask you to do.

