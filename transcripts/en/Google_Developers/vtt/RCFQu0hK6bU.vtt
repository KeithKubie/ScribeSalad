WEBVTT
Kind: captions
Language: en

00:00:02.072 --> 00:00:03.530
PAUL LEWIS: Can I
just say up front

00:00:03.530 --> 00:00:05.655
it is actually part of a
standardizing the platform

00:00:05.655 --> 00:00:07.190
to make everybody [INAUDIBLE].

00:00:07.190 --> 00:00:11.540
So it gives developers a
reliable and convenient way

00:00:11.540 --> 00:00:13.820
to access developer
relations if we just say,

00:00:13.820 --> 00:00:15.870
everybody's [INAUDIBLE].

00:00:15.870 --> 00:00:18.250
So welcome to this session
on the applied science

00:00:18.250 --> 00:00:20.890
of runtime performance--
and by runtime,

00:00:20.890 --> 00:00:22.440
I mean rendering--
I basically mean

00:00:22.440 --> 00:00:26.040
anything that isn't page load.

00:00:26.040 --> 00:00:28.279
As Jake said, I am
one of the Pauls,

00:00:28.279 --> 00:00:30.070
and I work on the
Developer Relations team.

00:00:30.070 --> 00:00:33.500
And normally I focus on
both performance and design,

00:00:33.500 --> 00:00:35.330
and when I normally
do my talks, I

00:00:35.330 --> 00:00:40.090
do these fairly theoretical
kind of architecture-based talks

00:00:40.090 --> 00:00:44.130
where I talk about pixel
pipelines and architectures

00:00:44.130 --> 00:00:46.680
and how you get stuff
on screen and-- no.

00:00:46.680 --> 00:00:49.110
This time I'm going to do
something completely different.

00:00:49.110 --> 00:00:51.540
I'm going to do an
applied sciences talk.

00:00:51.540 --> 00:00:53.800
I'm going to step you through
the process of building

00:00:53.800 --> 00:00:55.960
something from my
point of view--

00:00:55.960 --> 00:00:58.300
my own personal journey--
which is something

00:00:58.300 --> 00:01:00.860
of an experiment for me because
I don't normally put this out

00:01:00.860 --> 00:01:01.050
there.

00:01:01.050 --> 00:01:02.924
And like all good
experiments, sometimes they

00:01:02.924 --> 00:01:04.290
go a little bit wrong.

00:01:04.290 --> 00:01:05.670
But hopefully it won't.

00:01:05.670 --> 00:01:08.610
So we're stuck with it
now, so let's find out.

00:01:08.610 --> 00:01:10.390
Hopefully, by now,
most of you have

00:01:10.390 --> 00:01:12.800
seen this-- it's the
Chrome Dev Summit site.

00:01:12.800 --> 00:01:15.040
I designed and built the thing.

00:01:15.040 --> 00:01:22.320
And I set myself-- I can see
this talk is going to go well.

00:01:25.880 --> 00:01:27.912
I won't be covering the
nitty-gritty details

00:01:27.912 --> 00:01:29.370
of every aspect of
it, but I wanted

00:01:29.370 --> 00:01:30.953
to step through the
thing that gave me

00:01:30.953 --> 00:01:33.100
the most challenges and
the most interesting thing

00:01:33.100 --> 00:01:36.980
that I could share with
you on that journey.

00:01:36.980 --> 00:01:41.395
And it's this-- it has this hero
takeover effect with the cards.

00:01:48.650 --> 00:01:49.150
There we go.

00:01:49.150 --> 00:01:50.410
That's it on mobile.

00:01:50.410 --> 00:01:56.140
And because we're responsive, of
course, this is it on desktop.

00:01:56.140 --> 00:01:57.640
Same kind of deal.

00:01:57.640 --> 00:01:59.160
Now what I want
to do first of all

00:01:59.160 --> 00:02:02.080
is I want to step through
what we call the natural way.

00:02:02.080 --> 00:02:03.980
So I think this is the
way that most of us

00:02:03.980 --> 00:02:05.700
would think to
solve this problem.

00:02:05.700 --> 00:02:08.780
We have a box that's moving on
screen-- it's getting bigger.

00:02:08.780 --> 00:02:10.630
So probably we
think, right, let's

00:02:10.630 --> 00:02:12.260
do this with CSS
because we've heard

00:02:12.260 --> 00:02:13.554
that is good for performance.

00:02:13.554 --> 00:02:15.220
So we'll transition
on width and height,

00:02:15.220 --> 00:02:18.530
on left and on top-- that
seems like it'll do the job.

00:02:18.530 --> 00:02:21.955
Unfortunately, it
gives us two problems,

00:02:21.955 --> 00:02:24.460
and we'll step through
those very briefly.

00:02:24.460 --> 00:02:26.110
Firstly, let me show you this.

00:02:26.110 --> 00:02:28.690
This is a site I built a
while ago called CSS Triggers.

00:02:28.690 --> 00:02:30.970
You can find it at
csstriggers.com.

00:02:30.970 --> 00:02:34.060
And what you can do is you can
find any given CSS property

00:02:34.060 --> 00:02:36.090
and it will tell
you what workload

00:02:36.090 --> 00:02:38.240
it triggers in the browser.

00:02:38.240 --> 00:02:42.600
So things like layout, paint,
and composite, for example.

00:02:42.600 --> 00:02:44.920
And when we're building
fast-performing sites,

00:02:44.920 --> 00:02:47.400
we want to trigger the least
amount of work possible.

00:02:47.400 --> 00:02:51.750
Now unfortunately for us,
when we use left, top, width,

00:02:51.750 --> 00:02:54.919
or height, we trigger
layout-- which

00:02:54.919 --> 00:02:56.960
is the geometric calculations
of where everything

00:02:56.960 --> 00:02:59.539
is on the screen-- we have the
paint filling in the pixels,

00:02:59.539 --> 00:03:01.830
and then we have to composite
the [INAUDIBLE] together.

00:03:01.830 --> 00:03:05.824
And basically when you've
got a reasonable-sized dom,

00:03:05.824 --> 00:03:07.740
this is what the frames
per second looks like.

00:03:07.740 --> 00:03:09.890
Now if you can't see,
let me zoom in for you.

00:03:09.890 --> 00:03:12.000
This here is the 60
frames a second line,

00:03:12.000 --> 00:03:13.390
which we're
obviously aiming for.

00:03:13.390 --> 00:03:15.723
And you can see that when I
transition on width, height,

00:03:15.723 --> 00:03:18.260
left, and top, that
essentially we're

00:03:18.260 --> 00:03:21.450
pretty close to that 60
frames a second line.

00:03:21.450 --> 00:03:24.160
And that's not good because
if we have garbage collection

00:03:24.160 --> 00:03:27.760
or we have a freakishly long
paint for some reason, them

00:03:27.760 --> 00:03:29.750
we're not going to
hit the frame target

00:03:29.750 --> 00:03:32.290
and we're going to stutter.

00:03:32.290 --> 00:03:38.360
So we're putting the browser
under strain every frame.

00:03:38.360 --> 00:03:40.970
So if you don't normally
do the DevTools thing,

00:03:40.970 --> 00:03:42.310
I highly recommend this.

00:03:42.310 --> 00:03:44.490
Go into the DevTools,
go to Timeline,

00:03:44.490 --> 00:03:47.610
hit Record, do whatever it is
that you do-- like scrolling

00:03:47.610 --> 00:03:49.430
or whatever-- and
look at the bars

00:03:49.430 --> 00:03:50.900
and just see how close you are.

00:03:50.900 --> 00:03:52.890
Are you going over the
60 frames a second line?

00:03:52.890 --> 00:03:53.600
Are you under?

00:03:53.600 --> 00:03:54.730
How far under?

00:03:54.730 --> 00:03:57.200
It's the first line
of defense to building

00:03:57.200 --> 00:03:59.810
a really nice,
smooth experience.

00:03:59.810 --> 00:04:00.754
So that's one thing.

00:04:00.754 --> 00:04:02.420
We're pretty close
to that frame budget.

00:04:02.420 --> 00:04:04.590
Here's the other problem.

00:04:04.590 --> 00:04:06.390
Changing width and
height puts you

00:04:06.390 --> 00:04:10.140
into pixel-rounded
kind of mode, which

00:04:10.140 --> 00:04:12.490
means that even if you're
getting 60 frames a second,

00:04:12.490 --> 00:04:15.860
because things are
moving per pixel,

00:04:15.860 --> 00:04:18.730
they actually look like
they jitter a little bit.

00:04:18.730 --> 00:04:20.670
That's what it actually
looks like to me.

00:04:20.670 --> 00:04:22.990
And I don't like
that, personally.

00:04:22.990 --> 00:04:24.472
I think it's jarring.

00:04:24.472 --> 00:04:26.680
Actually looks like it jank
even though it's actually

00:04:26.680 --> 00:04:28.180
doing pretty well.

00:04:28.180 --> 00:04:30.580
By comparison, you get
some pixel rendering

00:04:30.580 --> 00:04:33.140
when you change a transform,
and this turns out

00:04:33.140 --> 00:04:35.010
to be quite useful
for animations.

00:04:35.010 --> 00:04:37.910
So that's a thing
about the platform.

00:04:40.590 --> 00:04:43.300
So I want to talk about
the unnatural way--

00:04:43.300 --> 00:04:45.591
or I'm going to call it the
"other" way so I don't feel

00:04:45.591 --> 00:04:48.730
so weird about it--
the way that I actually

00:04:48.730 --> 00:04:51.280
end up building that effect.

00:04:51.280 --> 00:04:55.100
So I'll step through the outline
of how I went about this.

00:04:55.100 --> 00:04:58.250
So it starts with
this function here,

00:04:58.250 --> 00:04:59.954
which is collecting
the properties.

00:04:59.954 --> 00:05:01.620
So we're going to
expand the card, which

00:05:01.620 --> 00:05:05.690
means we need to expand
what we know about the card.

00:05:05.690 --> 00:05:08.430
So collectProperites--
it takes an object

00:05:08.430 --> 00:05:11.060
on which we're going to store
all the things that we collect

00:05:11.060 --> 00:05:12.817
about the card.

00:05:12.817 --> 00:05:13.900
So what are we collecting?

00:05:13.900 --> 00:05:16.191
Well, first of all we need
to what we're collecting on,

00:05:16.191 --> 00:05:18.440
and we collect on things
like the title, the icon,

00:05:18.440 --> 00:05:19.856
the content,
anything that's going

00:05:19.856 --> 00:05:22.640
to animate in the
card we need to track.

00:05:22.640 --> 00:05:24.390
And the collectProperites
looks like this.

00:05:24.390 --> 00:05:25.830
You see here I
have the bit where

00:05:25.830 --> 00:05:27.930
I ask for the
individual elements

00:05:27.930 --> 00:05:29.590
that I'm interested
and tracking,

00:05:29.590 --> 00:05:34.820
and then I ask for things like
the left and top and the width

00:05:34.820 --> 00:05:37.250
and the height of
all those things,

00:05:37.250 --> 00:05:41.100
which I get through this--
getBoundingClientRect, which

00:05:41.100 --> 00:05:43.470
if you've never
used, is brilliant.

00:05:43.470 --> 00:05:45.060
Because it gives
you an object that

00:05:45.060 --> 00:05:47.329
looks like this with all
the correct numbers in.

00:05:47.329 --> 00:05:49.870
And I have a disconcerting the
large amounts of love for this

00:05:49.870 --> 00:05:53.265
function because it is
so unbelievably useful.

00:05:53.265 --> 00:05:55.390
So big thanks to the IE
team because I believe that

00:05:55.390 --> 00:05:57.890
was IE 4 that landed.

00:05:57.890 --> 00:05:59.720
Well, I never.

00:05:59.720 --> 00:06:04.060
Next week, on
"Esoteric Functions."

00:06:04.060 --> 00:06:05.970
So once we've collected
all the information

00:06:05.970 --> 00:06:08.170
about the card in its
collapsed position,

00:06:08.170 --> 00:06:10.570
we now just expand
it out completely

00:06:10.570 --> 00:06:13.120
to its final resting
place, like so.

00:06:13.120 --> 00:06:15.310
Like this.

00:06:15.310 --> 00:06:17.600
And we collect all
the positions again.

00:06:17.600 --> 00:06:20.821
So now we know where you started
and we know where you finished.

00:06:20.821 --> 00:06:22.320
And of course, we've
let the browser

00:06:22.320 --> 00:06:23.569
do all the work in the middle.

00:06:23.569 --> 00:06:26.760
I don't say how wide or high--
I just asked the question, how

00:06:26.760 --> 00:06:29.250
wide and high, and I collect it.

00:06:29.250 --> 00:06:31.520
So it's in this final position.

00:06:31.520 --> 00:06:36.180
And now I calculate
where everything moved.

00:06:36.180 --> 00:06:39.230
And then I apply a
transform to reverse it.

00:06:39.230 --> 00:06:42.210
So it looks like this.

00:06:42.210 --> 00:06:43.627
No, this all happens
very quickly.

00:06:43.627 --> 00:06:45.584
You might not have seen
this effect on the site

00:06:45.584 --> 00:06:47.112
because it doesn't
happen like this.

00:06:47.112 --> 00:06:49.570
And you might look at this and
you go, OK, it looks roughly

00:06:49.570 --> 00:06:51.040
in the right place,
Paul, but there

00:06:51.040 --> 00:06:53.349
appears to be quite
a lot of pink.

00:06:53.349 --> 00:06:53.890
That's right.

00:06:53.890 --> 00:06:56.000
But if we clip it, shazam.

00:06:58.600 --> 00:06:59.110
There we go.

00:06:59.110 --> 00:07:00.885
It's like it never
happened, right?

00:07:05.015 --> 00:07:06.890
The good thing about
this particular approach

00:07:06.890 --> 00:07:08.610
is now we're ready to rumble.

00:07:08.610 --> 00:07:12.730
Because all we've got are
transformed and opacity changes

00:07:12.730 --> 00:07:14.694
that we've applied,
and that means

00:07:14.694 --> 00:07:16.110
we're nice and
composite-friendly.

00:07:16.110 --> 00:07:18.568
If you look at csstriggers.com
and you type in "transform,"

00:07:18.568 --> 00:07:20.340
it'll go, compositor.

00:07:20.340 --> 00:07:20.840
That's it.

00:07:20.840 --> 00:07:23.280
And compositor stuff
typically is very fast today.

00:07:23.280 --> 00:07:27.790
So we switch on
animations and we

00:07:27.790 --> 00:07:29.511
just clear out all
those transforms.

00:07:29.511 --> 00:07:30.010
Like this.

00:07:30.010 --> 00:07:30.509
Look here.

00:07:30.509 --> 00:07:33.460
This is the function
that does it.

00:07:33.460 --> 00:07:35.450
Translate to nothing,
scale to one.

00:07:35.450 --> 00:07:37.470
And go to your final opacity.

00:07:37.470 --> 00:07:40.245
And it gives us--
we also animate

00:07:40.245 --> 00:07:42.120
the clip around the
whole thing, by the way--

00:07:42.120 --> 00:07:43.870
should mention that.

00:07:43.870 --> 00:07:48.280
And it gives us the effect that
we've come to know and love.

00:07:48.280 --> 00:07:51.760
And I think a good
question at this point

00:07:51.760 --> 00:07:54.770
is, why are you
doing it this way?

00:07:54.770 --> 00:07:56.460
It's way more work.

00:07:56.460 --> 00:07:57.180
Right.

00:07:57.180 --> 00:07:58.020
Way more work.

00:07:58.020 --> 00:07:59.700
And you're right--
it is more work.

00:07:59.700 --> 00:08:02.940
And my hope is that
the natural animations

00:08:02.940 --> 00:08:04.150
way will become faster.

00:08:04.150 --> 00:08:05.650
And as you heard
this morning, we're

00:08:05.650 --> 00:08:07.210
investing a lot
of time and effort

00:08:07.210 --> 00:08:09.055
into making that a reality.

00:08:09.055 --> 00:08:10.930
But this is my journey
through building this,

00:08:10.930 --> 00:08:12.971
and this is just the state
of things as they are.

00:08:12.971 --> 00:08:16.500
Anyway, it is more work and to
kind of summarize my feeling,

00:08:16.500 --> 00:08:18.250
actually, there's a
quote from John Gruber

00:08:18.250 --> 00:08:20.440
recently that I thought was
excellent in this regard.

00:08:20.440 --> 00:08:22.939
He said, "The point of making
apps shouldn't be about making

00:08:22.939 --> 00:08:25.730
life easier for developers"--
in this case, me--

00:08:25.730 --> 00:08:27.980
"it's about making the best
possible apps for users"--

00:08:27.980 --> 00:08:29.910
in this case, you.

00:08:29.910 --> 00:08:32.740
So, yes, it is
definitely harder.

00:08:32.740 --> 00:08:35.211
But you can encapsulate
this into a web component

00:08:35.211 --> 00:08:37.169
and then never worry
about it again and give it

00:08:37.169 --> 00:08:39.220
to other people, and they never
need to worry about it again--

00:08:39.220 --> 00:08:41.140
which is kind of what
[INAUDIBLE] does,

00:08:41.140 --> 00:08:42.309
and it's pretty cool.

00:08:42.309 --> 00:08:45.410
And I generally think that
performance matters, right?

00:08:45.410 --> 00:08:47.420
Matters to users, as
we heard this morning

00:08:47.420 --> 00:08:51.190
with the takeover--
the hero effect.

00:08:51.190 --> 00:08:52.336
Users really feel it.

00:08:52.336 --> 00:08:53.960
They may not be able
to say what it is,

00:08:53.960 --> 00:08:55.210
but they feel and
it matters and they

00:08:55.210 --> 00:08:57.040
want something that
feels great to use.

00:08:57.040 --> 00:08:59.507
So I think it's
worth the investment.

00:08:59.507 --> 00:09:01.840
Anyways, this was is actually
faster than the other way.

00:09:01.840 --> 00:09:04.770
Let's look at the
timeline again.

00:09:04.770 --> 00:09:07.980
And you see now we're way
lower-- in the middle.

00:09:07.980 --> 00:09:10.255
I say "in the middle" because
the eagle-eyed amongst

00:09:10.255 --> 00:09:13.530
us will be saying,
surely, Paul, this is bad.

00:09:13.530 --> 00:09:16.200
And that's a fair
question, I think.

00:09:16.200 --> 00:09:18.290
And so to answer that,
I want to introduce you

00:09:18.290 --> 00:09:20.970
to what I call the
Picasso principal, which

00:09:20.970 --> 00:09:24.540
in this-- "Learn the rules
like a pro so that you

00:09:24.540 --> 00:09:27.754
can break them like an artist."

00:09:27.754 --> 00:09:28.670
It works for anything.

00:09:28.670 --> 00:09:29.253
Write it down.

00:09:29.253 --> 00:09:31.420
You go back to your office--
"I'm like an artist.

00:09:31.420 --> 00:09:32.370
I'm an artist."

00:09:32.370 --> 00:09:33.940
It works very well.

00:09:33.940 --> 00:09:39.900
You can say, Archimedes said
"Use will change sparingly,"--

00:09:39.900 --> 00:09:40.410
he didn't.

00:09:40.410 --> 00:09:43.879
But Picasso did say this and,
yes, learn the rules like a pro

00:09:43.879 --> 00:09:45.420
so you can break
them like an artist.

00:09:45.420 --> 00:09:47.020
Which is not to
say I'm an artist,

00:09:47.020 --> 00:09:49.850
although I am pretty
handy with crayons.

00:09:49.850 --> 00:09:50.794
It's true, it's true.

00:09:50.794 --> 00:09:53.335
I actually drew this and my son
looked at it and went, Daddy,

00:09:53.335 --> 00:09:55.330
what is it?

00:09:55.330 --> 00:09:56.100
It's a picture.

00:09:56.100 --> 00:09:58.510
It's better than yours.

00:09:58.510 --> 00:10:00.800
Didn't say that.

00:10:00.800 --> 00:10:01.300
All right.

00:10:01.300 --> 00:10:05.339
So these rules that we're
going to break-- they're

00:10:05.339 --> 00:10:05.880
not my rules.

00:10:05.880 --> 00:10:06.900
I don't really go in for rules.

00:10:06.900 --> 00:10:08.340
But they are things
that you hear

00:10:08.340 --> 00:10:12.190
when you're learning
web development.

00:10:12.190 --> 00:10:15.040
And they come from a good place.

00:10:15.040 --> 00:10:17.860
They come from noble intentions,
but I think we can break some.

00:10:17.860 --> 00:10:19.626
Let me show you what I mean.

00:10:19.626 --> 00:10:22.190
Rule number one--
no frame should ever

00:10:22.190 --> 00:10:24.410
exceed 16 milliseconds.

00:10:24.410 --> 00:10:25.990
It's actually pretty
good because we

00:10:25.990 --> 00:10:27.290
want 60 frames a second.

00:10:27.290 --> 00:10:30.640
One second divided by 60
gives us 16 milliseconds.

00:10:30.640 --> 00:10:32.960
But it's actually not
the whole picture.

00:10:32.960 --> 00:10:35.630
What I mean by that is
this-- when the user taps

00:10:35.630 --> 00:10:38.740
or clicks on something, we
actually have 100 milliseconds

00:10:38.740 --> 00:10:41.895
in which to respond before the
user goes, that didn't respond,

00:10:41.895 --> 00:10:43.280
did it?

00:10:43.280 --> 00:10:46.265
So we've got 100 milliseconds
that we bought, time-wise.

00:10:46.265 --> 00:10:47.140
The animation starts.

00:10:47.140 --> 00:10:49.870
The animation runs and ends.

00:10:49.870 --> 00:10:52.120
And then we have a little
period at the end where

00:10:52.120 --> 00:10:54.692
we pick up the pieces and go,
OK, before the user actually

00:10:54.692 --> 00:10:56.150
notices that the
animation's ended,

00:10:56.150 --> 00:10:57.566
we've got this
little window here.

00:10:57.566 --> 00:11:00.480
It's only this bit
in the middle that

00:11:00.480 --> 00:11:03.940
needs to be 60 frames a second.

00:11:03.940 --> 00:11:06.770
So if we bring back
that timeline snapshot,

00:11:06.770 --> 00:11:09.915
you'll see that it follows
that pattern very closely.

00:11:09.915 --> 00:11:11.790
The beginning where we
do all the measurement

00:11:11.790 --> 00:11:14.270
stuff or the toggling of
classes and so on-- that's

00:11:14.270 --> 00:11:17.490
that bar on the left, and it's
roughly about 71 milliseconds

00:11:17.490 --> 00:11:18.120
on a Nexus 5.

00:11:18.120 --> 00:11:18.783
I memorized the number.

00:11:18.783 --> 00:11:20.250
It's not like I'm
looking at the bar

00:11:20.250 --> 00:11:21.640
and I've got some
freakish talent

00:11:21.640 --> 00:11:23.556
where I can tell you how
long a frame was just

00:11:23.556 --> 00:11:24.540
by looking at the bar.

00:11:24.540 --> 00:11:28.790
And then at the end is
about 43-ish milliseconds.

00:11:28.790 --> 00:11:31.500
So we're inside that
window-- that model

00:11:31.500 --> 00:11:33.600
of where you can say--
actually, before I kick off

00:11:33.600 --> 00:11:35.475
an animation, if I have
expensive work to do,

00:11:35.475 --> 00:11:37.920
I should do it now so
I could run cheaply

00:11:37.920 --> 00:11:39.420
through the middle
of the animation.

00:11:39.420 --> 00:11:40.794
Rather than going
on every frame,

00:11:40.794 --> 00:11:42.390
I should do expensive things.

00:11:42.390 --> 00:11:45.180
Because then you're much
more likely to hit problems.

00:11:48.960 --> 00:11:51.070
So then, rule number
one-- no frame

00:11:51.070 --> 00:11:54.330
should exceed 16 milliseconds.

00:11:54.330 --> 00:11:54.830
No chance.

00:11:57.047 --> 00:11:59.630
Of course, there are times-- you
want to be 60 frames a second

00:11:59.630 --> 00:11:59.850
all the time.

00:11:59.850 --> 00:12:00.558
Of course you do.

00:12:00.558 --> 00:12:01.310
Why wouldn't you?

00:12:01.310 --> 00:12:02.810
But there are times
where it matters

00:12:02.810 --> 00:12:04.805
more than others, and
during an animation

00:12:04.805 --> 00:12:06.930
is where it really matters
to the user's experience

00:12:06.930 --> 00:12:08.562
and that's the thing
to concentrate on.

00:12:08.562 --> 00:12:10.520
You do have these little
windows of opportunity

00:12:10.520 --> 00:12:12.755
during kind of idle
time and so forth

00:12:12.755 --> 00:12:14.380
where you might be
able to do expensive

00:12:14.380 --> 00:12:16.960
work and save
yourself some hustle.

00:12:16.960 --> 00:12:19.080
By the way, when
I say animations,

00:12:19.080 --> 00:12:21.960
here as well scrolling should
be considered an animation.

00:12:21.960 --> 00:12:23.549
Things are moving on screen.

00:12:23.549 --> 00:12:26.090
So don't, in that sense, treat
scrolling as a separate thing.

00:12:26.090 --> 00:12:28.170
It should scroll at
60 frames a second.

00:12:31.325 --> 00:12:33.200
So you might be wondering
then, weren't there

00:12:33.200 --> 00:12:35.470
any other rules that you decided
to break during this build,

00:12:35.470 --> 00:12:35.970
Paul?

00:12:35.970 --> 00:12:37.237
Yes, yes, yes, indeed.

00:12:37.237 --> 00:12:37.820
There you are.

00:12:37.820 --> 00:12:40.111
Because I named that one rule
number one, so it follows

00:12:40.111 --> 00:12:41.460
there may be other rules.

00:12:41.460 --> 00:12:44.680
Rule number two-- never trigger
a forced synchronous layout

00:12:44.680 --> 00:12:47.610
or layout thrashing-- you may
have heard it called that.

00:12:47.610 --> 00:12:49.790
Who would do such a thing?

00:12:49.790 --> 00:12:53.540
Let me show you the card
expansion code again.

00:12:53.540 --> 00:12:57.040
So to recap, collected in
its collapsed position,

00:12:57.040 --> 00:13:01.850
expanded and collect again,
calculate what we move to

00:13:01.850 --> 00:13:06.130
and reset it, switch on
animations and go out again.

00:13:06.130 --> 00:13:10.140
The problem is in this
section here, and particularly

00:13:10.140 --> 00:13:11.010
these two functions.

00:13:11.010 --> 00:13:14.380
Because they set the
transforms and opacities.

00:13:14.380 --> 00:13:16.430
Now, because of the
way browsers optimize,

00:13:16.430 --> 00:13:19.286
it defers those to
the end of the frame.

00:13:19.286 --> 00:13:20.660
And unfortunately,
the second one

00:13:20.660 --> 00:13:22.540
now stomps over the
top of the first one.

00:13:22.540 --> 00:13:26.800
And it's kind of like the
first one never happened.

00:13:26.800 --> 00:13:30.240
So we've set our card
to its expanded state.

00:13:30.240 --> 00:13:33.150
We then applied a
transform that did nothing.

00:13:33.150 --> 00:13:36.080
And the net effect is no
animations whatsoever.

00:13:36.080 --> 00:13:38.240
Boo-hoo, boo-hoo.

00:13:38.240 --> 00:13:42.140
What we need to do is we need
to force the browser to realise

00:13:42.140 --> 00:13:44.740
that we set some styles before
we start changing them again.

00:13:44.740 --> 00:13:47.880
And this is where the
forced layout would help us.

00:13:47.880 --> 00:13:50.690
To do that, we can add
something like this, which

00:13:50.690 --> 00:13:54.250
asks for something like a width,
a height, a padding, a margin,

00:13:54.250 --> 00:13:57.160
the bounding client
rectangle, anything from CSS

00:13:57.160 --> 00:13:59.920
triggers that tell you it
triggers layouts would probably

00:13:59.920 --> 00:14:02.720
be enough to get this.

00:14:02.720 --> 00:14:06.300
So never, ever, ever
force a sync layout.

00:14:06.300 --> 00:14:07.840
Never trigger one of those.

00:14:07.840 --> 00:14:10.600
You can call me Pablo.

00:14:10.600 --> 00:14:12.470
It works because I'm
Paul, not because I'm

00:14:12.470 --> 00:14:15.512
an artist-- although
clearly I am.

00:14:15.512 --> 00:14:17.720
There are subtleties here
that I do need to call out.

00:14:17.720 --> 00:14:21.610
Firstly, I'm only doing this in
that long-running first frame.

00:14:21.610 --> 00:14:24.730
The 100 milliseconds that
I have as a window-- that's

00:14:24.730 --> 00:14:27.270
my opportunity to
do this kind of work

00:14:27.270 --> 00:14:29.660
as dangerous and
expensive is it might be,

00:14:29.660 --> 00:14:31.222
that's the time to do it.

00:14:31.222 --> 00:14:33.180
The other thing is I'm
not doing it repeatedly,

00:14:33.180 --> 00:14:35.855
which would be very bad because
if I went read, write, read,

00:14:35.855 --> 00:14:37.560
write, read, write--
that's causing

00:14:37.560 --> 00:14:38.840
Chrome to do an awful lot.

00:14:38.840 --> 00:14:41.235
It's causing every browser
do an awful lot of things

00:14:41.235 --> 00:14:43.140
that you don't want it to do.

00:14:43.140 --> 00:14:44.540
So caveat's out of the way.

00:14:44.540 --> 00:14:47.340
So it's all plain
sailing, right?

00:14:47.340 --> 00:14:48.290
No.

00:14:48.290 --> 00:14:49.830
Let's hit Pause a second.

00:14:49.830 --> 00:14:52.621
There is a slight problem.

00:14:52.621 --> 00:14:54.120
And I want to show
you-- again, this

00:14:54.120 --> 00:14:56.630
is all about my own kind
of-- it's quite cathartic.

00:14:56.630 --> 00:14:59.740
This is like therapy.

00:14:59.740 --> 00:15:02.720
Not everything is jank-free.

00:15:02.720 --> 00:15:04.770
Things are miles
better than they were,

00:15:04.770 --> 00:15:11.420
but there are times where
every browser at some point, it

00:15:11.420 --> 00:15:11.930
does jank.

00:15:11.930 --> 00:15:15.640
Let me show you what I mean.

00:15:15.640 --> 00:15:18.452
This is occasionally in Chrome.

00:15:18.452 --> 00:15:19.910
You may have seen
it stutter there.

00:15:19.910 --> 00:15:21.866
I'll do it slow-mo
and just bar in

00:15:21.866 --> 00:15:23.870
mind the jank looks even
worse in slow motion.

00:15:29.800 --> 00:15:31.300
Every time.

00:15:31.300 --> 00:15:32.880
I feel like it is my fault.

00:15:32.880 --> 00:15:35.227
I should say that.

00:15:35.227 --> 00:15:36.560
It's also bad in other browsers.

00:15:36.560 --> 00:15:39.980
Let me show you
in mobile Safari.

00:15:39.980 --> 00:15:41.730
Does that as well occasionally.

00:15:41.730 --> 00:15:42.765
So same kind of deal.

00:15:42.765 --> 00:15:44.000
Let me show you why that is.

00:15:44.000 --> 00:15:45.560
It's because of
this line here when

00:15:45.560 --> 00:15:49.740
I said I animated the clip
that was around the box.

00:15:49.740 --> 00:15:52.380
"Clip" triggers paint.

00:15:52.380 --> 00:15:54.870
Again, if we look
back at CSS triggers

00:15:54.870 --> 00:15:57.130
and we look at that,
that's its profile

00:15:57.130 --> 00:15:58.540
there-- it doesn't
trigger layout

00:15:58.540 --> 00:16:02.430
but it does trigger paints and
it does trigger compositing.

00:16:02.430 --> 00:16:06.500
So on non-Chrome browsers,
it always causes jank.

00:16:06.500 --> 00:16:07.899
It always causes problems.

00:16:07.899 --> 00:16:09.440
And on Chrome desktop,
it's typically

00:16:09.440 --> 00:16:12.060
fast enough to not be a problem.

00:16:12.060 --> 00:16:15.960
On Chrome and Android,
it's only occasional.

00:16:15.960 --> 00:16:18.952
And it's better when there's
GPU rasterization switched on,

00:16:18.952 --> 00:16:20.660
in which case it is
significantly better.

00:16:20.660 --> 00:16:22.200
So that's really nice.

00:16:22.200 --> 00:16:26.470
But to be completely
honest, I was

00:16:26.470 --> 00:16:29.820
on the fence about
the whole effect

00:16:29.820 --> 00:16:31.820
because-- maybe I
should just kill it.

00:16:31.820 --> 00:16:34.050
Maybe I should
just scale it back.

00:16:34.050 --> 00:16:37.570
And that's where it brings me
to rule number three, which

00:16:37.570 --> 00:16:42.000
is "never sniff the
user agent string."

00:16:42.000 --> 00:16:43.400
Don't judge me.

00:16:43.400 --> 00:16:45.760
Don't judge me.

00:16:45.760 --> 00:16:49.010
We're all friends, right?

00:16:49.010 --> 00:16:51.830
The card JavaScript file--
I have this flag in it,

00:16:51.830 --> 00:16:55.380
and it says run
lo-fi animations when

00:16:55.380 --> 00:16:59.310
you can't cope with
fast clip animations.

00:16:59.310 --> 00:17:01.940
Which is effectively
a wrap-around way

00:17:01.940 --> 00:17:04.030
of saying today, is it Chrome?

00:17:04.030 --> 00:17:06.292
I've named the
function like this

00:17:06.292 --> 00:17:08.250
because my intention is
to keep this up to date

00:17:08.250 --> 00:17:11.020
and my hope is that every
browser will get better

00:17:11.020 --> 00:17:13.129
at dealing with clip animations.

00:17:13.129 --> 00:17:14.920
But right now, this is
the state of things.

00:17:17.564 --> 00:17:19.230
I just don't think
clipping is something

00:17:19.230 --> 00:17:20.599
that people have really
tried to do a lot of,

00:17:20.599 --> 00:17:22.599
whether it's overflow
[INAUDIBLE] like animating

00:17:22.599 --> 00:17:23.520
these things.

00:17:23.520 --> 00:17:26.030
But as these effects start
to open up to us-- which

00:17:26.030 --> 00:17:27.649
they are doing--
then we're going

00:17:27.649 --> 00:17:29.190
to try more and more
of these things.

00:17:29.190 --> 00:17:31.525
And that's a really
interesting place for us to be.

00:17:31.525 --> 00:17:33.525
So this is what it looks
like on desktop Safari.

00:17:33.525 --> 00:17:36.080
It's the same on
mobile Safari as well.

00:17:36.080 --> 00:17:36.860
You see that?

00:17:36.860 --> 00:17:38.350
There we go.

00:17:38.350 --> 00:17:40.250
And it's no bad thing, actually.

00:17:40.250 --> 00:17:41.290
It runs well.

00:17:41.290 --> 00:17:43.140
It does the effect nicely.

00:17:43.140 --> 00:17:46.410
And I think this for me was
the important distinction when

00:17:46.410 --> 00:17:48.949
I was sort of reasoning
this out to myself--

00:17:48.949 --> 00:17:51.282
is that I don't use it to
redirect you to an [? m dot ?]

00:17:51.282 --> 00:17:54.150
site or to say, no, you
can't have the thing.

00:17:54.150 --> 00:17:56.940
What I'm trying to do is trying
to just give you something,

00:17:56.940 --> 00:17:59.650
but because I'm confident that
you can't have the fast clip

00:17:59.650 --> 00:18:05.040
animations, I just don't
want to ruin your experience.

00:18:05.040 --> 00:18:10.040
So for me, that's kind of
how I've thought about this.

00:18:10.040 --> 00:18:13.060
So I think in very
specific circumstances,

00:18:13.060 --> 00:18:16.234
you might feel OK
about UA sniffing.

00:18:16.234 --> 00:18:18.650
But then I would say that,
given that's what I did, right?

00:18:18.650 --> 00:18:23.850
So you may disagree, and I'm
100% cool with that, I think.

00:18:23.850 --> 00:18:26.010
The question, though,
for me may be,

00:18:26.010 --> 00:18:29.770
why even leave it in if it's
not perfect everywhere, Paul?

00:18:29.770 --> 00:18:31.360
What were you thinking?

00:18:31.360 --> 00:18:34.510
And I want to explain why I did.

00:18:34.510 --> 00:18:37.310
Firstly, I think it's
important to push boundaries.

00:18:37.310 --> 00:18:39.291
It's partly my job,
but it's also partly

00:18:39.291 --> 00:18:41.040
what I think we need
to do as an industry.

00:18:41.040 --> 00:18:42.914
We need to find out
where the boundaries are.

00:18:42.914 --> 00:18:46.090
We need to say, this is the
kind of thing I want to make,

00:18:46.090 --> 00:18:47.676
[GRUNTING] and push.

00:18:47.676 --> 00:18:48.800
I think that's a good idea.

00:18:48.800 --> 00:18:51.744
I think the web deserves
those great user experiences.

00:18:51.744 --> 00:18:53.660
I think it can act as
something of a signpost,

00:18:53.660 --> 00:18:55.451
as well, like, these
are the kind of things

00:18:55.451 --> 00:18:56.420
you can do on the web.

00:18:56.420 --> 00:18:58.230
Secondly, it does hit
60 frames a second.

00:18:58.230 --> 00:18:59.440
I'm quite tough on myself.

00:18:59.440 --> 00:19:01.380
I'm a bit of a perfectionist.

00:19:01.380 --> 00:19:02.990
On desktop, it runs very well.

00:19:02.990 --> 00:19:05.470
On mobile, it typically
runs well as well.

00:19:05.470 --> 00:19:07.710
It's just occasionally.

00:19:07.710 --> 00:19:10.035
I believe it will get
significantly better--

00:19:10.035 --> 00:19:11.910
not only through GPU
rasterization in Chrome,

00:19:11.910 --> 00:19:14.050
but I think every
browser vendor has

00:19:14.050 --> 00:19:17.254
got very smart people working
on these kinds of problems.

00:19:17.254 --> 00:19:19.670
And lastly but not leastly, I
like giving Chrome engineers

00:19:19.670 --> 00:19:21.290
headaches.

00:19:21.290 --> 00:19:22.520
Why is this slow?

00:19:22.520 --> 00:19:24.541
I'm kidding, of
course-- or am I?

00:19:27.430 --> 00:19:30.840
One thing I want to say about
all those rules or any received

00:19:30.840 --> 00:19:37.770
wisdom is if you decide to go
against it for whatever reason,

00:19:37.770 --> 00:19:38.880
you're responsible for it.

00:19:38.880 --> 00:19:40.610
In the same way, I'm now
responsible for the Chrome Dev

00:19:40.610 --> 00:19:41.170
Summit site.

00:19:41.170 --> 00:19:45.470
And if browsers fix
their performance issues

00:19:45.470 --> 00:19:48.527
in this area, I will have to
keep that function up to date.

00:19:48.527 --> 00:19:50.110
That's my responsibility
and I believe

00:19:50.110 --> 00:19:52.320
that's the
responsibility we have.

00:19:52.320 --> 00:19:55.160
It's important that we make
sure that our stuff does

00:19:55.160 --> 00:19:57.550
the most that it can, and
we don't just sort of launch

00:19:57.550 --> 00:19:58.050
and forget.

00:19:58.050 --> 00:20:02.960
So I think that's something that
I really wanted to call out.

00:20:02.960 --> 00:20:04.746
So I'll be keeping
that code up to date.

00:20:04.746 --> 00:20:06.246
Because it's not
future-facing, so I

00:20:06.246 --> 00:20:09.960
have to drag it into
the future with me.

00:20:09.960 --> 00:20:14.090
So guided tour
through building this.

00:20:14.090 --> 00:20:15.362
Just that.

00:20:15.362 --> 00:20:16.729
Just that.

00:20:16.729 --> 00:20:17.270
There you go.

00:20:17.270 --> 00:20:17.850
Great.

00:20:17.850 --> 00:20:21.010
So I wanted to cover off a few
of the bits and pieces sort

00:20:21.010 --> 00:20:22.750
of related to the
site, but also sort

00:20:22.750 --> 00:20:26.540
of related to the whole
runtime rendering stuff

00:20:26.540 --> 00:20:28.370
that I think is helpful.

00:20:28.370 --> 00:20:31.080
Let's talk about debugging
animations for a second.

00:20:31.080 --> 00:20:32.960
It's hard, isn't it?

00:20:32.960 --> 00:20:38.160
Good news-- this is
pretty fast, right?

00:20:38.160 --> 00:20:39.240
If it runs.

00:20:39.240 --> 00:20:41.490
Going to run?

00:20:41.490 --> 00:20:42.130
OK.

00:20:42.130 --> 00:20:43.570
Pretty fast.

00:20:43.570 --> 00:20:45.410
There's a good
experimental feature

00:20:45.410 --> 00:20:49.470
that we're on the process
of making here in DevTools.

00:20:52.810 --> 00:20:56.080
And I can go in and I can
switch down the global playback

00:20:56.080 --> 00:20:59.370
speed here of the animations.

00:20:59.370 --> 00:21:02.800
And-- wait.

00:21:02.800 --> 00:21:04.800
Going to pause it now
because I want to do that.

00:21:04.800 --> 00:21:06.130
I just want to pause it.

00:21:06.130 --> 00:21:07.020
Just wait there.

00:21:07.020 --> 00:21:09.520
Hold on.

00:21:09.520 --> 00:21:11.340
And then I can
inspect the element

00:21:11.340 --> 00:21:14.504
itself, which I
think is this one.

00:21:14.504 --> 00:21:15.920
And it tells me
all the animations

00:21:15.920 --> 00:21:18.450
that occur on that
and its children.

00:21:18.450 --> 00:21:20.220
And as I roll over
each one of those,

00:21:20.220 --> 00:21:22.670
it's going to show me which
element it's referring to.

00:21:22.670 --> 00:21:23.650
I can dive into one.

00:21:23.650 --> 00:21:25.000
I can scrub it back and forth.

00:21:29.392 --> 00:21:33.400
And I can also inspect the
actual properties at that point

00:21:33.400 --> 00:21:35.220
and say, what
values do you have?

00:21:35.220 --> 00:21:37.940
Now, this is not ready just yet.

00:21:37.940 --> 00:21:38.690
It's experimental.

00:21:38.690 --> 00:21:40.690
We wanted to give you a bit of
a sneak peak-- show you what's

00:21:40.690 --> 00:21:41.620
coming down the wire.

00:21:41.620 --> 00:21:43.840
We know that debugging
animations is hard

00:21:43.840 --> 00:21:46.740
and we're doing a lot of
work to make it far easier.

00:21:46.740 --> 00:21:50.480
So that's going to
be a lot of fun.

00:21:50.480 --> 00:21:53.090
Next thing-- I actually
mentioned this earlier,

00:21:53.090 --> 00:21:55.070
but I do want to call it out.

00:21:55.070 --> 00:21:58.040
The site will run
when you're offline.

00:21:58.040 --> 00:22:01.710
Now at this conference,
the Wi-Fi is really good.

00:22:01.710 --> 00:22:03.910
At not every
conference have I been

00:22:03.910 --> 00:22:05.960
to that I could
say the same thing.

00:22:05.960 --> 00:22:08.650
And so for me, a conference
site that works offline

00:22:08.650 --> 00:22:11.110
is actually really quite useful.

00:22:11.110 --> 00:22:17.180
And of course, it is
because of Service Worker.

00:22:17.180 --> 00:22:19.539
Alex did a great
job of talking you

00:22:19.539 --> 00:22:20.830
through all that stuff earlier.

00:22:20.830 --> 00:22:25.180
But I did want to add my own
little bit that I am using it.

00:22:25.180 --> 00:22:27.885
It's kind of a-- let's call it
[INAUDIBLE] cache replacement.

00:22:31.190 --> 00:22:33.600
It's about resilience
for bad Wi-Fi

00:22:33.600 --> 00:22:35.780
and fast bootstrapping
of the site,

00:22:35.780 --> 00:22:38.330
rather than anything
more adventures.

00:22:38.330 --> 00:22:40.520
It's really quite
simple on the inside.

00:22:40.520 --> 00:22:43.780
On a fetch, I
basically say, do you

00:22:43.780 --> 00:22:45.960
have something in the cache?

00:22:45.960 --> 00:22:49.450
If yes, return it.

00:22:49.450 --> 00:22:52.050
If no, go and fetch it.

00:22:52.050 --> 00:22:54.300
And then when you've got
your answer back, assuming we

00:22:54.300 --> 00:22:59.950
can cache it, cache
it and then return it.

00:22:59.950 --> 00:23:03.027
It's pretty simple
and I kind of like it.

00:23:03.027 --> 00:23:04.860
Another reason I really
like Service Worker,

00:23:04.860 --> 00:23:07.220
personally speaking, is this.

00:23:07.220 --> 00:23:10.110
I think historically,
we've been in a situation

00:23:10.110 --> 00:23:12.880
where we've been
very network-bound.

00:23:12.880 --> 00:23:15.260
It's like having to
install an app every time

00:23:15.260 --> 00:23:17.270
you want to use the app, right?

00:23:17.270 --> 00:23:18.920
And I don't know
about you, but when

00:23:18.920 --> 00:23:21.391
I have a native app open that
does pretty similar things

00:23:21.391 --> 00:23:23.140
and I'm trying to
decide which app I want,

00:23:23.140 --> 00:23:26.690
I don't go, you know what, this
was 3.2 megabytes from the Play

00:23:26.690 --> 00:23:30.970
Store, this was 4--
I can't deal with it.

00:23:30.970 --> 00:23:33.590
I basically say, look, this
has a better user experience,

00:23:33.590 --> 00:23:36.200
it's got a better design,
it's got a better feel to it,

00:23:36.200 --> 00:23:39.820
I like this one more
than I like this one.

00:23:39.820 --> 00:23:41.850
I think that's an
important distinction.

00:23:41.850 --> 00:23:43.770
Service Worker has the
potential to give us

00:23:43.770 --> 00:23:46.780
these fast bootstrapping,
fast launching experiences.

00:23:46.780 --> 00:23:48.530
Now, I should say that
it doesn't do away

00:23:48.530 --> 00:23:51.682
with the network concerns we've
had so far because you've still

00:23:51.682 --> 00:23:53.932
got that first load where
you need to get your Service

00:23:53.932 --> 00:23:54.830
Worker in place.

00:23:54.830 --> 00:23:58.911
But the future-- this sort
of second time onwards-- then

00:23:58.911 --> 00:24:00.160
it starts to get a lot better.

00:24:00.160 --> 00:24:03.250
And I think for me,
that shift is saying--

00:24:03.250 --> 00:24:06.050
like when two things, two
sites, or two web apps

00:24:06.050 --> 00:24:08.780
do similar things, the
differentiator becomes

00:24:08.780 --> 00:24:09.490
the runtime.

00:24:09.490 --> 00:24:11.320
How well does this
thing perform?

00:24:11.320 --> 00:24:13.720
How well is it designed?

00:24:13.720 --> 00:24:15.275
And was is user experience like?

00:24:15.275 --> 00:24:17.760
I think that's pretty cool.

00:24:17.760 --> 00:24:20.240
Other thing that people have
mentioned to me in the past

00:24:20.240 --> 00:24:26.512
is that it's very difficult
to figure out in the wild

00:24:26.512 --> 00:24:28.720
how you're doing from a
frame-specific point of view.

00:24:28.720 --> 00:24:29.280
So it's OK.

00:24:29.280 --> 00:24:31.770
You've got DevTools Timeline and
that's great for your machine

00:24:31.770 --> 00:24:33.770
and maybe you get a little
bit of stuff going on

00:24:33.770 --> 00:24:36.840
in your device lab if
you've got one-- great.

00:24:36.840 --> 00:24:39.930
But what can I do when I've got
thousands, tens of thousands,

00:24:39.930 --> 00:24:42.200
hundreds of thousands of
users out in the wild?

00:24:42.200 --> 00:24:44.610
Well, this is where the
frame-timing API could help us.

00:24:44.610 --> 00:24:46.510
Now, just to warn
you, it's in sort

00:24:46.510 --> 00:24:48.190
of spec state at the moment.

00:24:48.190 --> 00:24:49.795
It's being discussed by the w3c.

00:24:49.795 --> 00:24:50.670
So bear that in mind.

00:24:50.670 --> 00:24:54.860
This is the w3c repo,
which has this address--

00:24:54.860 --> 00:24:56.360
w3c frame-timing.

00:24:56.360 --> 00:24:59.000
It doesn't explain a doc there.

00:24:59.000 --> 00:25:03.580
There is the latest
draft of this spec.

00:25:03.580 --> 00:25:07.260
So you go and dive into that and
figure out a little bit more.

00:25:07.260 --> 00:25:09.910
But I want to give you
the kind of elevator pitch

00:25:09.910 --> 00:25:12.740
for what you get
with it as it stands.

00:25:12.740 --> 00:25:15.410
So there are all these
render or main thread events.

00:25:15.410 --> 00:25:17.540
So main thread is
where your JavaScript

00:25:17.540 --> 00:25:21.180
runs, where style calculations
are done, where layout is done.

00:25:21.180 --> 00:25:25.060
And you can ask
for these records.

00:25:25.060 --> 00:25:27.490
And each one comes back,
looks a little bit like this.

00:25:27.490 --> 00:25:33.220
There's a unique number for
each frame, it has a startTime,

00:25:33.220 --> 00:25:35.399
and it has a cpuTime.

00:25:35.399 --> 00:25:37.190
Now, you could use this
to kind of step up.

00:25:37.190 --> 00:25:38.565
Say you're got an
array of these.

00:25:38.565 --> 00:25:41.880
Does the start time go open 16
or so millisecond intervals?

00:25:41.880 --> 00:25:43.700
If so, I have
something that runs

00:25:43.700 --> 00:25:46.500
on the main thread at
about 60 frames a second.

00:25:46.500 --> 00:25:49.000
But more than that
with the cpuTime,

00:25:49.000 --> 00:25:52.170
I can figure out how comfortably
or not I was doing this.

00:25:52.170 --> 00:25:54.437
If I have a cpuTime of
near 60 milliseconds,

00:25:54.437 --> 00:25:56.270
I'm really close to
that boundary, aren't I?

00:25:56.270 --> 00:25:59.100
And there's not a lot
that might push me over.

00:25:59.100 --> 00:26:03.700
Whereas if I've got low cpuTime,
then I'm making it with ease.

00:26:03.700 --> 00:26:05.410
And with lower
cpuTime, of course,

00:26:05.410 --> 00:26:09.380
hopefully becomes low battery
drain as well as a bonus.

00:26:09.380 --> 00:26:13.020
So you get a lot of information
just from these three things.

00:26:13.020 --> 00:26:16.140
But you can also ask for
compositor events from this,

00:26:16.140 --> 00:26:17.280
as well.

00:26:17.280 --> 00:26:20.430
So with the compositor
thread on Chrome and Android,

00:26:20.430 --> 00:26:22.762
that's where the painting
and rasterization-- well, it

00:26:22.762 --> 00:26:24.220
depends whether
the GP raster's on.

00:26:24.220 --> 00:26:25.460
That's where painting
happens and it's

00:26:25.460 --> 00:26:26.670
where compositing happens.

00:26:26.670 --> 00:26:29.570
And the events for
that look like these.

00:26:29.570 --> 00:26:32.060
Again, they've got the
same frame number system

00:26:32.060 --> 00:26:33.540
and given the way
composing works,

00:26:33.540 --> 00:26:35.410
sometimes there are
multiple composites

00:26:35.410 --> 00:26:37.484
per main or render thread event.

00:26:37.484 --> 00:26:39.400
And so you can tie them
back with this number.

00:26:39.400 --> 00:26:43.010
How many-- I've got a bunch of
these for 120-- tie them back.

00:26:43.010 --> 00:26:45.870
We also have the
startTIme as well.

00:26:45.870 --> 00:26:47.805
There is some
discussion, I believe,

00:26:47.805 --> 00:26:49.930
as to whether there should
be cpuTime here as well.

00:26:49.930 --> 00:26:51.550
So if you feel
strongly either way,

00:26:51.550 --> 00:26:53.430
that's where the
Git Hub repo is for.

00:26:53.430 --> 00:26:54.763
That's where the issues are for.

00:26:54.763 --> 00:26:58.190
Go and make your voice be heard.

00:26:58.190 --> 00:27:01.780
So it would take a while for
me to explain exactly what you

00:27:01.780 --> 00:27:04.510
could do with all this,
but here's some ideas.

00:27:04.510 --> 00:27:06.240
You could track the
frames per second all

00:27:06.240 --> 00:27:08.340
of your JavaScript and
your CSS animations.

00:27:08.340 --> 00:27:10.720
You could figure out, hey,
when a video's playing,

00:27:10.720 --> 00:27:14.520
the side navbar
doesn't run very well.

00:27:14.520 --> 00:27:17.989
You could track your
scrolling performance.

00:27:17.989 --> 00:27:20.530
It scrolls fine on our machines
here, but for whatever reason

00:27:20.530 --> 00:27:24.740
on these devices over here,
it doesn't scroll well.

00:27:24.740 --> 00:27:26.990
You could beacon out
data back to Analytics.

00:27:26.990 --> 00:27:28.890
So on Aggregate, you
could start figuring out

00:27:28.890 --> 00:27:31.480
that people in a particular
part of the world

00:27:31.480 --> 00:27:33.857
are using a device that
you don't have in your lab.

00:27:33.857 --> 00:27:35.440
Now would be a good
time to go and buy

00:27:35.440 --> 00:27:37.065
that and fix the
issues that they have.

00:27:37.065 --> 00:27:39.555
And you can start doing
this much more broadly.

00:27:39.555 --> 00:27:40.930
And then lastly,
you can automate

00:27:40.930 --> 00:27:42.388
and you could alert
on regressions.

00:27:42.388 --> 00:27:44.720
The new person joins the
team, they're well-meaning,

00:27:44.720 --> 00:27:47.240
they add will-change to
everything, everything

00:27:47.240 --> 00:27:50.410
collapses And you
go, what happened?

00:27:50.410 --> 00:27:53.560
Hopefully you can catch that
early before you deploy--

00:27:53.560 --> 00:27:55.340
get in.

00:27:55.340 --> 00:27:58.575
So FrameTime API-- I think
that's really exciting.

00:27:58.575 --> 00:27:59.700
I'm really looking forward.

00:27:59.700 --> 00:28:00.924
I hope this ships.

00:28:00.924 --> 00:28:02.840
I just want to give you
the heads-up that it's

00:28:02.840 --> 00:28:04.870
something that's
being discussed.

00:28:04.870 --> 00:28:07.020
Coming back to the site,
there is one other thing

00:28:07.020 --> 00:28:11.120
I wanted to mention--
it's open source.

00:28:11.120 --> 00:28:14.560
You can learn from my
mistakes, my successes,

00:28:14.560 --> 00:28:17.110
and I would love
for you to do that.

00:28:17.110 --> 00:28:19.336
The code is as neat and
tidy as I can muster.

00:28:19.336 --> 00:28:21.160
It's not bad.

00:28:21.160 --> 00:28:22.140
Please do take a look.

00:28:22.140 --> 00:28:26.560
It is on GitHub, Google
Chrome, Dev Summit.

00:28:26.560 --> 00:28:29.140
There was another commit
I did this morning-- fixed

00:28:29.140 --> 00:28:30.800
a bit of an issue.

00:28:30.800 --> 00:28:33.302
I'm keeping an eye on it.

00:28:33.302 --> 00:28:34.510
There are interesting things.

00:28:34.510 --> 00:28:37.570
Many things I would look at
personally-- the card.js file,

00:28:37.570 --> 00:28:40.000
and the Service Worker--
two really interesting bits.

00:28:40.000 --> 00:28:41.708
But there are interesting
things in there

00:28:41.708 --> 00:28:44.285
about how I manage URLs,
so I'll leave that one

00:28:44.285 --> 00:28:45.319
as a bit of a tempter.

00:28:45.319 --> 00:28:46.110
Go and have a look.

00:28:46.110 --> 00:28:47.420
It's really cool.

00:28:47.420 --> 00:28:50.200
So to finish up, I
guess my journey--

00:28:50.200 --> 00:28:52.070
the conclusions I
drew from it were

00:28:52.070 --> 00:28:54.900
that you should push boundaries.

00:28:54.900 --> 00:28:59.110
Like I said, the web I believe
deserves these fantastic user

00:28:59.110 --> 00:28:59.930
experiences.

00:28:59.930 --> 00:29:04.540
It deserves-- I was pushing
really hard on this.

00:29:04.540 --> 00:29:07.250
Good performance, though,
isn't always easy.

00:29:07.250 --> 00:29:10.040
And we are doing a lot to
try and make it easier--

00:29:10.040 --> 00:29:12.970
to try make that
natural animations way

00:29:12.970 --> 00:29:15.220
just the way that you do
things so that you don't have

00:29:15.220 --> 00:29:19.810
to keep in your head all these
different ways of doing things.

00:29:19.810 --> 00:29:24.210
It isn't easy, but it is
absolutely always worth it.

00:29:24.210 --> 00:29:25.970
I take from the clap
that you gave me,

00:29:25.970 --> 00:29:28.980
which I really appreciate,
that you like the site.

00:29:28.980 --> 00:29:30.950
And so for me, I
can now tell you

00:29:30.950 --> 00:29:32.890
for definite-- it was worth it.

00:29:32.890 --> 00:29:36.010
Because as I would
always say, performance

00:29:36.010 --> 00:29:37.850
matters, as you've shown me.

00:29:37.850 --> 00:29:39.620
Thank you.

