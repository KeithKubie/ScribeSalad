WEBVTT
Kind: captions
Language: en

00:00:00.280 --> 00:00:01.590
JEREMY WALKER: Hi, my
name's Jeremy Walker.

00:00:01.590 --> 00:00:03.290
I'm a developer
advocate here at Google,

00:00:03.290 --> 00:00:05.280
and we are continuing
our conversation

00:00:05.280 --> 00:00:07.040
on the three flaws
in software design

00:00:07.040 --> 00:00:10.912
with Max Kanat-Alexander
from YouTube.

00:00:10.912 --> 00:00:12.620
Now we're going to
cover flaw number two,

00:00:12.620 --> 00:00:14.620
so do you want to
take it from here?

00:00:14.620 --> 00:00:15.953
MAX KANAT-ALEXANDER: Yeah, sure.

00:00:15.953 --> 00:00:18.180
So this is the second part
in our four-part series

00:00:18.180 --> 00:00:20.570
about the three flaws
of software design.

00:00:20.570 --> 00:00:25.500
And our second flaw is not
making the code easy to change.

00:00:25.500 --> 00:00:27.749
And you can call
this rigid design.

00:00:27.749 --> 00:00:30.040
It's a system that's basically
too rigid, too difficult

00:00:30.040 --> 00:00:30.730
to change.

00:00:30.730 --> 00:00:32.280
And there are two ways
you can accomplish this.

00:00:32.280 --> 00:00:34.294
One of them is design
in too many assumptions

00:00:34.294 --> 00:00:36.210
about the future and the
other is writing code

00:00:36.210 --> 00:00:37.060
without enough design.

00:00:37.060 --> 00:00:38.685
I'm going to go into
what both of these

00:00:38.685 --> 00:00:40.300
really mean and give examples.

00:00:40.300 --> 00:00:43.380
So the first way to do this is
to make too many assumptions

00:00:43.380 --> 00:00:44.510
about the future.

00:00:44.510 --> 00:00:46.200
The traditional way that
people think about doing this

00:00:46.200 --> 00:00:48.580
is the waterfall model, where
you do big design up front

00:00:48.580 --> 00:00:51.070
and then you do big
development, and then

00:00:51.070 --> 00:00:53.140
big QA, and then big release.

00:00:53.140 --> 00:00:55.850
But the problem is that by the
time it gets to your users,

00:00:55.850 --> 00:00:57.558
it doesn't really
match the requirements.

00:01:01.030 --> 00:01:02.900
Ultimately, what this
means is that there's

00:01:02.900 --> 00:01:05.391
been a failure to understand
that your requirements will

00:01:05.391 --> 00:01:05.890
change.

00:01:05.890 --> 00:01:07.910
So, what do I mean about that?

00:01:07.910 --> 00:01:09.516
Well, you can do
it in a big way.

00:01:09.516 --> 00:01:11.640
For example, I worked on
a product called Bugzilla,

00:01:11.640 --> 00:01:13.250
which was a bug tracking system.

00:01:13.250 --> 00:01:15.160
At the beginning of the
history of Bugzilla,

00:01:15.160 --> 00:01:17.130
it was used only by
the Mozilla project--

00:01:17.130 --> 00:01:18.640
the people who make Firefox now.

00:01:18.640 --> 00:01:21.570
And it was only
used for the browser

00:01:21.570 --> 00:01:23.820
and a few other projects,
small projects at the time.

00:01:23.820 --> 00:01:28.214
They had about 100,000
bug reports in the system.

00:01:28.214 --> 00:01:29.630
There was one
version field, where

00:01:29.630 --> 00:01:32.010
you could say what version
the bug was found in,

00:01:32.010 --> 00:01:33.730
and one target
milestone field, which

00:01:33.730 --> 00:01:37.830
was the branch that you
expected the bug to be fixed in.

00:01:37.830 --> 00:01:41.780
And there were no custom fields
because custom fields are evil.

00:01:41.780 --> 00:01:44.050
In fact, supposedly--
this is actually

00:01:44.050 --> 00:01:46.890
a joke in the bug tracker world,
that custom fields are evil.

00:01:46.890 --> 00:01:49.440
There was a famous article
by Joel Spolsky about it

00:01:49.440 --> 00:01:52.560
who also wrote a bug tracker.

00:01:52.560 --> 00:01:57.400
Now the last time that I
was working on the Bugzilla

00:01:57.400 --> 00:01:59.450
project, there were
10,000 installations

00:01:59.450 --> 00:02:01.750
on almost every operating
system imaginable,

00:02:01.750 --> 00:02:05.290
including HP-UX, AIX, and
things that you probably

00:02:05.290 --> 00:02:09.440
haven't heard of or seen
or worked with in a decade.

00:02:09.440 --> 00:02:11.590
Users need to track bugs
on multiple branches,

00:02:11.590 --> 00:02:13.090
so they need to
know that it affects

00:02:13.090 --> 00:02:15.440
multiple different versions.

00:02:15.440 --> 00:02:18.490
And some projects need to
track millions of bugs.

00:02:18.490 --> 00:02:22.400
Yahoo has a Bugzilla with
millions of bugs in it.

00:02:22.400 --> 00:02:27.710
And Red Hat has a
Bugzilla installation

00:02:27.710 --> 00:02:31.220
which has one component
for every single package

00:02:31.220 --> 00:02:35.040
that you can install on
Red Hat Linux or Fedora,

00:02:35.040 --> 00:02:38.940
a Red Hat [INAUDIBLE], which
is something like 80,000

00:02:38.940 --> 00:02:41.400
or 90,000 components
in the system

00:02:41.400 --> 00:02:44.440
that you can file bugs
against, because they all

00:02:44.440 --> 00:02:45.860
have different owners.

00:02:45.860 --> 00:02:47.199
JEREMY WALKER: Oh yeah, yeah.

00:02:47.199 --> 00:02:49.740
MAX KANAT-ALEXANDER: And we had
to add a custom field system.

00:02:49.740 --> 00:02:51.850
It turns out that
not one bug tracker

00:02:51.850 --> 00:02:55.450
fits all sizes of projects.

00:02:55.450 --> 00:03:00.449
And Bugzilla is a
widely-used product,

00:03:00.449 --> 00:03:02.490
but there are very few
developers who work on it.

00:03:02.490 --> 00:03:05.360
It's about the size of maybe
a very small feature team

00:03:05.360 --> 00:03:06.620
at most companies.

00:03:06.620 --> 00:03:10.470
I would say that the amount
of effort that was on it when

00:03:10.470 --> 00:03:12.000
I was last working
on it was maybe

00:03:12.000 --> 00:03:15.380
about the total of three
full-time engineers,

00:03:15.380 --> 00:03:18.430
and when I left we
had 1,500 open feature

00:03:18.430 --> 00:03:20.300
requests against Bugzilla.

00:03:20.300 --> 00:03:24.110
So the chance that its
requirements will change

00:03:24.110 --> 00:03:25.090
is very high.

00:03:28.360 --> 00:03:33.431
And so the problem was that
we had a lot of assumptions.

00:03:33.431 --> 00:03:34.930
For example, that
it would only ever

00:03:34.930 --> 00:03:38.940
run on one database
system, based

00:03:38.940 --> 00:03:41.304
on our original requirements.

00:03:41.304 --> 00:03:43.220
Or we had an assumption
that nobody would ever

00:03:43.220 --> 00:03:45.950
need to track a bug
across multiple projects--

00:03:45.950 --> 00:03:48.210
the same bug across
multiple projects.

00:03:48.210 --> 00:03:50.770
But it turns out that many
people needed to do that.

00:03:50.770 --> 00:03:53.480
And one of Bugzilla's
fundamental assumptions,

00:03:53.480 --> 00:03:55.450
which is built into
its external APIs,

00:03:55.450 --> 00:03:57.420
is that product
names are unique.

00:03:57.420 --> 00:03:59.440
If you can file a bug
against a product, which

00:03:59.440 --> 00:04:03.000
is a particular categorization,
then that name is unique

00:04:03.000 --> 00:04:05.810
and our external API
depends on that fact

00:04:05.810 --> 00:04:08.570
in a way that's almost
impossible to change.

00:04:08.570 --> 00:04:11.550
So you can't have products
with the same name

00:04:11.550 --> 00:04:13.216
and different sort
of classifications.

00:04:16.339 --> 00:04:18.529
And having multiple
versions for the same bug

00:04:18.529 --> 00:04:20.320
was very, very difficult
because of the way

00:04:20.320 --> 00:04:21.800
it was designed originally.

00:04:21.800 --> 00:04:24.090
And it turns out
that when you want

00:04:24.090 --> 00:04:26.600
to cause people to install
a server product that

00:04:26.600 --> 00:04:29.402
uses a database system,
they have a database system

00:04:29.402 --> 00:04:31.360
and they're not going to
install a new one just

00:04:31.360 --> 00:04:33.090
to install your product.

00:04:33.090 --> 00:04:36.250
Particularly Oracle
shops don't want

00:04:36.250 --> 00:04:38.970
to install MySQL
just for one product.

00:04:38.970 --> 00:04:40.230
They want to use Oracle.

00:04:43.440 --> 00:04:46.952
The developers before my
time had written raw SQL

00:04:46.952 --> 00:04:48.660
all over the entire
application, so there

00:04:48.660 --> 00:04:50.937
were 5,000 to
10,000 lines of SQL

00:04:50.937 --> 00:04:53.520
throughout the application that
had to somehow be made generic

00:04:53.520 --> 00:04:56.470
across-- and the
design of the system

00:04:56.470 --> 00:04:58.720
depended, actually, upon
programmatically building SQL

00:04:58.720 --> 00:05:00.940
queries.

00:05:00.940 --> 00:05:03.590
So it was very difficult
to actually make

00:05:03.590 --> 00:05:05.060
that work across
different systems.

00:05:05.060 --> 00:05:05.790
We did, we did.

00:05:05.790 --> 00:05:08.840
But it was a lot of work.

00:05:08.840 --> 00:05:10.530
You can also do
this in small ways.

00:05:10.530 --> 00:05:12.530
For example, when you use
a magic number instead

00:05:12.530 --> 00:05:14.804
of a constant,
you're assuming-- you

00:05:14.804 --> 00:05:16.970
just litter a number all
over the code base-- you're

00:05:16.970 --> 00:05:18.580
assuming that number
is not going to change.

00:05:18.580 --> 00:05:20.496
You might be right, but
you're probably wrong.

00:05:20.496 --> 00:05:22.750
JEREMY WALKER: Yeah, I've
run into that before.

00:05:25.447 --> 00:05:27.280
MAX KANAT-ALEXANDER:
You'll have people say,

00:05:27.280 --> 00:05:29.550
we will never need to blah.

00:05:29.550 --> 00:05:31.444
This is a danger phrase.

00:05:31.444 --> 00:05:32.860
You hear people
say, we will never

00:05:32.860 --> 00:05:35.130
need to have people outside
of our team see this code.

00:05:35.130 --> 00:05:37.377
And then one day it
gets open sourced.

00:05:37.377 --> 00:05:39.710
You'll say, we'll never need
to support newer standards.

00:05:39.710 --> 00:05:40.210
Right?

00:05:40.210 --> 00:05:42.470
People say, there will
never be an HTTP 2.0.

00:05:42.470 --> 00:05:45.100
But it turns out there
is an HTTP 2.0 now.

00:05:45.100 --> 00:05:47.460
Nobody would have-- I think
when HTTP 1.1 came out,

00:05:47.460 --> 00:05:50.754
people were like,
we're done, it's fine.

00:05:50.754 --> 00:05:52.670
One of the most dangerous
ones that people say

00:05:52.670 --> 00:05:54.950
is, we will never need to
support international users.

00:05:54.950 --> 00:05:58.320
This is very, very difficult
to bolt on to a system

00:05:58.320 --> 00:06:02.027
after you've written a few
hundred thousand lines of code.

00:06:02.027 --> 00:06:03.610
And there's infinite
numbers of things

00:06:03.610 --> 00:06:04.985
that people can
say we will never

00:06:04.985 --> 00:06:07.430
need to and be wrong about.

00:06:07.430 --> 00:06:09.062
But, that doesn't
mean that you should

00:06:09.062 --> 00:06:10.770
try to anticipate
everything because then

00:06:10.770 --> 00:06:12.686
you also get into writing
code you don't need,

00:06:12.686 --> 00:06:14.990
which was our previous flaw.

00:06:14.990 --> 00:06:17.900
The way that you
handle it is you

00:06:17.900 --> 00:06:21.170
design code based on what you
know now, and know for sure.

00:06:21.170 --> 00:06:23.920
What you have actual,
factual data about,

00:06:23.920 --> 00:06:26.320
not on what you think
will happen in the future.

00:06:26.320 --> 00:06:30.949
Now, sometimes you know now
that internationalization

00:06:30.949 --> 00:06:32.490
is difficult to add
on in the future.

00:06:32.490 --> 00:06:33.865
So that's something
you know now,

00:06:33.865 --> 00:06:37.310
but you don't know now that you
will need internationalization.

00:06:37.310 --> 00:06:44.640
So the difference there
is that you add code

00:06:44.640 --> 00:06:46.459
maybe to support
internationalization,

00:06:46.459 --> 00:06:48.375
but you don't actually
add the whole framework

00:06:48.375 --> 00:06:51.210
to actually do the
internationalization.

00:06:51.210 --> 00:06:55.340
Maybe you add a minimal, minimal
layer that makes it possible,

00:06:55.340 --> 00:06:57.870
or will make it easy to make
that change in the future

00:06:57.870 --> 00:06:58.752
if you have to.

00:06:58.752 --> 00:07:00.460
But you don't implement
a whole framework

00:07:00.460 --> 00:07:02.325
that extracts all the
strings and sends them off

00:07:02.325 --> 00:07:03.740
to translators and
everything because you

00:07:03.740 --> 00:07:04.800
wouldn't need to do that.

00:07:07.310 --> 00:07:10.010
So another way to
basically do rigid design

00:07:10.010 --> 00:07:12.510
is to just not
design your codes.

00:07:12.510 --> 00:07:15.300
Often you see spaghetti code,
which is just a long bunch

00:07:15.300 --> 00:07:18.750
of if-else statements or
1,000-line method that just

00:07:18.750 --> 00:07:21.580
sort of goes through-- if it's
spaghetti, it's a long string.

00:07:24.160 --> 00:07:26.450
And you could even possibly
say the more you assume

00:07:26.450 --> 00:07:29.090
things won't change, the more
your code becomes spaghetti.

00:07:29.090 --> 00:07:30.440
Spaghetti is, of
course, hard to change

00:07:30.440 --> 00:07:31.856
because you have
code duplication,

00:07:31.856 --> 00:07:34.000
people are cutting and
pasting, it's very complex,

00:07:34.000 --> 00:07:36.880
it's hard to understand what's
going on at any given point.

00:07:36.880 --> 00:07:38.225
It's not safe to change.

00:07:38.225 --> 00:07:40.850
You could introduce a bug or you
could introduce security holes

00:07:40.850 --> 00:07:42.520
and not know.

00:07:42.520 --> 00:07:49.510
It's funny because the more
spaghetti your code becomes,

00:07:49.510 --> 00:07:51.400
the harder it
becomes to change it.

00:07:51.400 --> 00:07:55.240
And so it actually sort of
becomes a compounding problem

00:07:55.240 --> 00:07:58.890
or a vicious cycle where
it's not safe to change,

00:07:58.890 --> 00:08:01.420
so nobody wants to change it,
so nobody wants to clean it up

00:08:01.420 --> 00:08:03.580
and it just gets worse
and worse and worse.

00:08:03.580 --> 00:08:05.860
I've worked on a lot of
code like this, actually.

00:08:05.860 --> 00:08:07.318
A lot of the time
what people do is

00:08:07.318 --> 00:08:10.650
they send me in to
fix things like this.

00:08:10.650 --> 00:08:13.162
And you could possibly even
define spaghetti by the fact

00:08:13.162 --> 00:08:14.620
there's code
duplication complexity

00:08:14.620 --> 00:08:17.040
and it's not safe to change.

00:08:17.040 --> 00:08:20.420
And the way that you solve this
problem, it's not that you say,

00:08:20.420 --> 00:08:23.200
all code must be designed
perfectly all the time.

00:08:23.200 --> 00:08:25.385
Instead you say, the
quality level of your design

00:08:25.385 --> 00:08:27.510
should be proportional to
the length of future time

00:08:27.510 --> 00:08:29.740
in which your system will
continue to help people.

00:08:29.740 --> 00:08:32.610
Not every single system needs
to have perfect, amazing design.

00:08:32.610 --> 00:08:34.193
You don't need to
sit around and think

00:08:34.193 --> 00:08:35.890
about what should be
the class structure

00:08:35.890 --> 00:08:39.130
for my five-line script that
I'm going to write as a hack

00:08:39.130 --> 00:08:40.720
and I'm never
going to use again.

00:08:40.720 --> 00:08:43.331
But if you think
that your system is

00:08:43.331 --> 00:08:45.330
going to be used for a
reasonable period of time

00:08:45.330 --> 00:08:47.262
in the future, and
you should assume

00:08:47.262 --> 00:08:49.220
that it's going to be
used for much longer than

00:08:49.220 --> 00:08:50.553
you think it's going to be used.

00:08:50.553 --> 00:08:53.090
Because there's been a lot
of projects in the world that

00:08:53.090 --> 00:08:55.820
were only going to be around
for six months, and then

00:08:55.820 --> 00:08:58.392
ended up being
around for 10 years.

00:08:58.392 --> 00:09:00.600
So you should err on the
side of a little more design

00:09:00.600 --> 00:09:01.870
than you think is necessary.

00:09:01.870 --> 00:09:04.070
But you don't need to
design it into infinity,

00:09:04.070 --> 00:09:06.080
and not everything needs
to have amazing design.

00:09:06.080 --> 00:09:09.454
You just need to consider
how many people am I

00:09:09.454 --> 00:09:10.620
going to help in the future?

00:09:10.620 --> 00:09:13.250
How long am I going to
help those people for?

00:09:13.250 --> 00:09:16.350
And use that to inform
your design, basically,

00:09:16.350 --> 00:09:19.300
or the quality level
of your design.

00:09:19.300 --> 00:09:22.370
So that wraps it up
for our second flaw.

00:09:22.370 --> 00:09:23.542
Any questions?

00:09:23.542 --> 00:09:25.000
JEREMY WALKER: Well
I did have one.

00:09:25.000 --> 00:09:30.070
Again, I read the book so I like
to lead into these examples,

00:09:30.070 --> 00:09:32.284
but you gave a good example
of this in real life.

00:09:32.284 --> 00:09:33.700
I think you've
already given some,

00:09:33.700 --> 00:09:36.210
but I thought it'd be
good idea to point out

00:09:36.210 --> 00:09:38.179
if you remember
the agency example.

00:09:38.179 --> 00:09:39.220
MAX KANAT-ALEXANDER: Yes.

00:09:39.220 --> 00:09:44.570
So, I had a friend who worked as
a contractor-- and this is just

00:09:44.570 --> 00:09:46.980
one example of many developers
that I've interviewed

00:09:46.980 --> 00:09:49.110
and discussed this
sorts of things with.

00:09:52.450 --> 00:09:56.850
His company was a contractor
to a particular agency,

00:09:56.850 --> 00:10:00.290
and this agency had a
design for a system.

00:10:00.290 --> 00:10:02.300
And the way that this
agency wanted to do things

00:10:02.300 --> 00:10:05.910
was they wanted to write
a 300-page requirements

00:10:05.910 --> 00:10:08.080
document before any
code was written.

00:10:08.080 --> 00:10:09.350
JEREMY WALKER: Over a long
period of time, right?

00:10:09.350 --> 00:10:10.330
MAX KANAT-ALEXANDER:
Oh yeah, it took them

00:10:10.330 --> 00:10:12.760
two years or something
to write this document.

00:10:12.760 --> 00:10:18.010
And by the time the
document was actually

00:10:18.010 --> 00:10:20.480
delivered to my
friend's company,

00:10:20.480 --> 00:10:23.240
it was internally inconsistent.

00:10:23.240 --> 00:10:25.640
It was very hard to understand.

00:10:25.640 --> 00:10:29.720
It was extremely complex to
implement any piece of it.

00:10:29.720 --> 00:10:31.570
And by the time
that they actually

00:10:31.570 --> 00:10:34.590
got it out the door, which
was years and years and years

00:10:34.590 --> 00:10:37.300
because they kept having
to clarify things,

00:10:37.300 --> 00:10:40.110
it really wasn't relevant
to the requirements

00:10:40.110 --> 00:10:43.990
of the actual users
at that time anymore.

00:10:43.990 --> 00:10:46.360
This is sort of like
the ne plus ultra,

00:10:46.360 --> 00:10:50.490
like the extreme of assuming
that your requirements won't

00:10:50.490 --> 00:10:53.070
change.

00:10:53.070 --> 00:10:56.820
You spend a five year process
before you release anything,

00:10:56.820 --> 00:10:59.640
where you've designed some
incredibly complex system

00:10:59.640 --> 00:11:01.780
and you're almost bound to fail.

00:11:01.780 --> 00:11:05.950
Particularly because
a good test of truth

00:11:05.950 --> 00:11:08.910
is throwing it against something
in the physical universe.

00:11:08.910 --> 00:11:10.910
And so until you've sort
of thrown your software

00:11:10.910 --> 00:11:13.960
against a user, you really
don't know if it's right.

00:11:13.960 --> 00:11:17.360
And so waiting five years to
throw an idea against a user

00:11:17.360 --> 00:11:21.814
means you have a lot of
wrong that you have to fix.

00:11:21.814 --> 00:11:23.230
JEREMY WALKER: I
think you mention

00:11:23.230 --> 00:11:25.930
in the book you shouldn't overdo
it by a lot-- you should only

00:11:25.930 --> 00:11:28.270
go two months out at most,
or something like that?

00:11:28.270 --> 00:11:29.620
Or was it less than that?

00:11:29.620 --> 00:11:31.190
MAX KANAT-ALEXANDER: Bugzilla,
we released every six months,

00:11:31.190 --> 00:11:33.648
but we would release development
versions as an open source

00:11:33.648 --> 00:11:35.320
project continuously,
very frequently,

00:11:35.320 --> 00:11:37.528
and also anybody could check
out our code from source

00:11:37.528 --> 00:11:40.660
at any time and
report bugs to us.

00:11:40.660 --> 00:11:44.520
So it really depends on
the framework you're in

00:11:44.520 --> 00:11:47.730
and the type of
product you're writing.

00:11:47.730 --> 00:11:51.020
But I would say, don't
look out any farther

00:11:51.020 --> 00:11:54.345
than you're sure
you know the future.

00:11:54.345 --> 00:11:55.220
JEREMY WALKER: Great.

00:11:55.220 --> 00:11:57.590
Well, that covers the
second of the three

00:11:57.590 --> 00:12:00.080
flaws in software design.

00:12:00.080 --> 00:12:03.300
Please join us for the
next video in the series.

