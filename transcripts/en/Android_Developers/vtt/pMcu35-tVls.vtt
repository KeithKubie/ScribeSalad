WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.398
[MUSIC PLAYING]

00:00:08.398 --> 00:00:09.110
DANIEL OLSHANSKY: Hi.

00:00:09.110 --> 00:00:10.820
My name is Daniel Olshansky.

00:00:10.820 --> 00:00:13.150
I'm Chet's intern here on the
Android Team at Google.

00:00:13.150 --> 00:00:15.940
And today, I'll be discussing
a few card flip innovations.

00:00:15.940 --> 00:00:19.210
So today, I'll just show you how
to flip cards, both from

00:00:19.210 --> 00:00:25.660
side to side, out and in, as
well as a few little tricks on

00:00:25.660 --> 00:00:30.630
how to do graphic animations on
darkening and spinning the

00:00:30.630 --> 00:00:31.900
cards when you need to.

00:00:31.900 --> 00:00:33.690
The main trick to today's
animation is going to be the

00:00:33.690 --> 00:00:35.680
fact that, after every single
animation, we're going to

00:00:35.680 --> 00:00:40.480
update the Layer parameters such
that future animations

00:00:40.480 --> 00:00:42.282
are not going to be dependent
on the values of previous

00:00:42.282 --> 00:00:43.220
animations.

00:00:43.220 --> 00:00:45.150
So we'll be animating
the properties.

00:00:45.150 --> 00:00:47.050
But then, at the end of every
single animation, we'll be

00:00:47.050 --> 00:00:49.800
setting them all back to zero,
such that any future

00:00:49.800 --> 00:00:52.700
animations won't be dependent on
what has been done before.

00:00:52.700 --> 00:00:55.260
So going straight into the
demo, here, we have a

00:00:55.260 --> 00:00:56.680
stack of red cards.

00:00:56.680 --> 00:01:00.690
I can use touch events to flip
it from right to left.

00:01:00.690 --> 00:01:03.650
Similarly, they can flip
it from left to right.

00:01:03.650 --> 00:01:06.660
The speed at which this animates
is actually dependent

00:01:06.660 --> 00:01:08.490
on the speed at which
you fling it.

00:01:08.490 --> 00:01:11.550
You can also swipe down to open
a stack of cards or swipe

00:01:11.550 --> 00:01:14.570
back up to close a stack of
cards, place both stacks.

00:01:14.570 --> 00:01:18.480
Or if you tap on a stack, then
there's a little delayed

00:01:18.480 --> 00:01:20.930
animation showing you how to
rotate a full stack of cards

00:01:20.930 --> 00:01:22.020
completely.

00:01:22.020 --> 00:01:24.930
So jumping straight into the
code, there is a lot of

00:01:24.930 --> 00:01:28.550
boilerplate code that you can
look into where you handle all

00:01:28.550 --> 00:01:30.240
the touches, determine which
way I'm flinging

00:01:30.240 --> 00:01:31.400
and things like that.

00:01:31.400 --> 00:01:34.760
But the interesting things
happen here in Card View.

00:01:34.760 --> 00:01:37.840
So scrolling down, initially,
one of the things you need to

00:01:37.840 --> 00:01:41.880
note is that Views, and in turn
Image Views, have this

00:01:41.880 --> 00:01:43.810
property called Set
Camera Distance.

00:01:43.810 --> 00:01:47.900
So what this actually lets you
do is set the position along

00:01:47.900 --> 00:01:50.650
the Zed-axis of how
far you want to be

00:01:50.650 --> 00:01:52.170
from the actual animation.

00:01:52.170 --> 00:01:54.985
Originally, in this animation,
if you were to set it back to

00:01:54.985 --> 00:01:57.630
its default value, you would see
that we don't actually see

00:01:57.630 --> 00:02:01.250
the flip animation, because it
happens behind the screen.

00:02:01.250 --> 00:02:03.850
After that, we retrieved the
bitmaps that we used for the

00:02:03.850 --> 00:02:05.640
front and the back
of the cards.

00:02:05.640 --> 00:02:08.000
And keep going down.

00:02:08.000 --> 00:02:11.055
Here, this is important
to note.

00:02:11.055 --> 00:02:14.000
What we're doing to the bitmap
drawable is adding a one-pixel

00:02:14.000 --> 00:02:15.460
transparent border.

00:02:15.460 --> 00:02:20.220
And the reason we're doing this
is, when you're rotating

00:02:20.220 --> 00:02:27.050
a rectangle within some view,
the edges don't actually have

00:02:27.050 --> 00:02:28.990
any values that they can
retrieve outside the

00:02:28.990 --> 00:02:30.530
boundaries of the rectangle.

00:02:30.530 --> 00:02:33.480
So you end up getting these
very jagged edges when you

00:02:33.480 --> 00:02:34.820
rotate a rectangle.

00:02:34.820 --> 00:02:40.280
But this problem can be very
easily [? abided ?], simply by

00:02:40.280 --> 00:02:42.920
having a one-pixel transparent
border.

00:02:42.920 --> 00:02:44.740
And it's done right here.

00:02:44.740 --> 00:02:47.550
And then you will see that the
edges are actually smooth as

00:02:47.550 --> 00:02:49.710
you rotate the cards.

00:02:49.710 --> 00:02:53.290
Then there's two methods, flip
from left to right, and flip

00:02:53.290 --> 00:02:54.910
from right to left.

00:02:54.910 --> 00:02:57.090
Before we actually call the
flipping animation, we need to

00:02:57.090 --> 00:02:57.820
set the pivot.

00:02:57.820 --> 00:03:02.800
By default, the x and y pivots
of all views are along center.

00:03:02.800 --> 00:03:04.410
So if you were to rotate
it, it would only

00:03:04.410 --> 00:03:05.200
rotate about its center.

00:03:05.200 --> 00:03:07.790
But setting these manually would
give us more precision

00:03:07.790 --> 00:03:09.430
as to how we want
to animate it.

00:03:09.430 --> 00:03:11.700
Then there's a method called
flip horizontally, after we

00:03:11.700 --> 00:03:12.580
set the pivot.

00:03:12.580 --> 00:03:15.555
What this does is set up a lot
of use property values hold,

00:03:15.555 --> 00:03:18.340
or object animators, and things
like that to actually

00:03:18.340 --> 00:03:22.380
animate the rotation
of it along the

00:03:22.380 --> 00:03:25.030
y-axis by 180 degrees.

00:03:25.030 --> 00:03:27.510
We also added translation
animation such that, when it

00:03:27.510 --> 00:03:30.200
finishes animating, it's in the
correct offset within the

00:03:30.200 --> 00:03:32.990
corresponding pile that
it animated to.

00:03:32.990 --> 00:03:35.870
And what we're also doing is
adding an update listener such

00:03:35.870 --> 00:03:37.920
that, as it's animating, we
need to make sure when it

00:03:37.920 --> 00:03:39.030
reached the halfway point.

00:03:39.030 --> 00:03:42.030
And at the halfway point, we
want to switch the drawable

00:03:42.030 --> 00:03:45.710
from the red bitmap to the blue
bitmap, or the other way

00:03:45.710 --> 00:03:49.090
around, because it's on
the other side now.

00:03:49.090 --> 00:03:52.550
Going down farther more, I'm
setting up a few key frame

00:03:52.550 --> 00:03:55.700
animations on a property
called Shadow.

00:03:55.700 --> 00:03:59.880
This is a custom property used
to darken the image as it's

00:03:59.880 --> 00:04:02.560
animating, which I'll show
you in a second.

00:04:02.560 --> 00:04:05.590
Scrolling down even more, I
set a duration using the

00:04:05.590 --> 00:04:09.270
velocity passed in from the
fling, and then use an

00:04:09.270 --> 00:04:11.500
animator set to play all
of these together.

00:04:11.500 --> 00:04:15.980
At the end of the animation, I
need to update the bitmaps and

00:04:15.980 --> 00:04:20.250
set some default values back
to their default values.

00:04:20.250 --> 00:04:22.790
So like I said, I'm
animating a custom

00:04:22.790 --> 00:04:23.960
property called Shadow.

00:04:23.960 --> 00:04:26.730
So since my string is Shadow, my
Object Animator is going to

00:04:26.730 --> 00:04:29.820
look for a property on that
target called Set

00:04:29.820 --> 00:04:31.270
Shadow right here.

00:04:31.270 --> 00:04:35.520
And all I'm doing here is using
alpha blending imported

00:04:35.520 --> 00:04:37.040
off mode multiply.

00:04:37.040 --> 00:04:39.370
And all this does is
just darken the

00:04:39.370 --> 00:04:41.180
image, as it's animating.

00:04:41.180 --> 00:04:44.100
And that's how you get that
shadow-like effect.

00:04:44.100 --> 00:04:46.400
Toggle front shown, simply
switches the

00:04:46.400 --> 00:04:47.730
red and blue bitmaps.

00:04:47.730 --> 00:04:51.070
That switches the flag
determining which bitmap

00:04:51.070 --> 00:04:52.500
you're using.

00:04:52.500 --> 00:04:59.330
And there's some more very
simple boilerplate code to do

00:04:59.330 --> 00:05:01.220
some set up things
here as well.

00:05:01.220 --> 00:05:03.820
So the thing is a non-draw.

00:05:03.820 --> 00:05:06.430
When I'm flipping my card,
instead of actually creating a

00:05:06.430 --> 00:05:09.110
new bitmap that's horizontally
mirrored from my original

00:05:09.110 --> 00:05:13.180
bitmap, all I'm really doing
is concatenating my canvas

00:05:13.180 --> 00:05:16.610
with a matrix that does
that exact same thing.

00:05:16.610 --> 00:05:18.770
So this way, it's a lot
more efficient.

00:05:18.770 --> 00:05:19.930
It doesn't use as much memory.

00:05:19.930 --> 00:05:21.690
It uses the exact same bitmap.

00:05:21.690 --> 00:05:26.400
But I'm still able to achieve
that horizontal mirroring

00:05:26.400 --> 00:05:31.930
effect of the image after I've
actually flipped it.

00:05:31.930 --> 00:05:34.190
And the reason I need to do
that is because in Update

00:05:34.190 --> 00:05:38.040
Layer Parameters, I set the
rotation x and y back to zero.

00:05:38.040 --> 00:05:39.395
That's what I'm trying
to do here.

00:05:39.395 --> 00:05:41.900
I'm trying to make any future
animations be independent of

00:05:41.900 --> 00:05:43.120
what they were before.

00:05:43.120 --> 00:05:48.900
But in order to achieve that, I
also need to update the left

00:05:48.900 --> 00:05:52.900
margin of my Layer parameters
to be exactly where it is

00:05:52.900 --> 00:05:55.530
after the animation, and then,
of course, update the

00:05:55.530 --> 00:05:57.050
parameters as well.

00:05:57.050 --> 00:06:02.140
So this, in conjunction with
customizing the canvas when I

00:06:02.140 --> 00:06:05.430
need to lets me achieve this
whole independence effect

00:06:05.430 --> 00:06:08.810
after every single animation.

00:06:08.810 --> 00:06:11.670
Again, some simple code to
offset it where I need to,

00:06:11.670 --> 00:06:13.780
switch the bitmaps.

00:06:13.780 --> 00:06:17.750
So here's the code for rotating
the actual card.

00:06:17.750 --> 00:06:22.420
What this does is determine what
angle I should rotate it

00:06:22.420 --> 00:06:25.560
by, depending on how far the
card is down the stack.

00:06:25.560 --> 00:06:28.970
And then I simply return Object
Animator that rotates

00:06:28.970 --> 00:06:31.330
that view by that angle.

00:06:31.330 --> 00:06:34.410
The other thing that I can also
do is when I tap on a

00:06:34.410 --> 00:06:37.900
card and all the cards flip in
a circle with a certain delay

00:06:37.900 --> 00:06:41.520
between them, it's almost the
same animation, except the

00:06:41.520 --> 00:06:44.090
angle is always 360 degrees.

00:06:44.090 --> 00:06:47.190
But the other thing to note is
that you need a start delay.

00:06:47.190 --> 00:06:49.390
The cards on the tops are
animating almost immediately,

00:06:49.390 --> 00:06:52.370
whereas, the cards underneath
only start animating when all

00:06:52.370 --> 00:06:55.940
the cards above that card have
already gone past a certain

00:06:55.940 --> 00:06:57.460
point in the animation.

00:06:57.460 --> 00:06:59.760
So I add a different start
delay, depending

00:06:59.760 --> 00:07:01.100
on where card is.

00:07:01.100 --> 00:07:02.740
And then I play all those
animations together.

00:07:06.030 --> 00:07:08.050
So that's how you actually get
the animations for every

00:07:08.050 --> 00:07:09.480
individual card.

00:07:09.480 --> 00:07:11.390
And if you look in the card
[INAUDIBLE] activity, which is

00:07:11.390 --> 00:07:15.660
the main activity, all I'm doing
here is looping through

00:07:15.660 --> 00:07:19.440
all my cards when some stack
has been tapped.

00:07:19.440 --> 00:07:21.860
I'd retrieve that Object
Animator that I can get from

00:07:21.860 --> 00:07:23.120
my Card View.

00:07:23.120 --> 00:07:25.230
And the other thing I'm
doing is bringing that

00:07:25.230 --> 00:07:26.270
child to the front.

00:07:26.270 --> 00:07:29.040
So depending on how they're
flipping the cards, I don't

00:07:29.040 --> 00:07:32.640
exactly know whether all the
cards on the right stack are

00:07:32.640 --> 00:07:33.990
on top of the cards
on the left stack.

00:07:33.990 --> 00:07:36.420
So I'm just sequentially calling
bring child to front,

00:07:36.420 --> 00:07:39.166
to change the set order of all
the cards in the stack that

00:07:39.166 --> 00:07:40.150
I'm animating.

00:07:40.150 --> 00:07:43.270
And the other thing you need to
do is always call request

00:07:43.270 --> 00:07:47.690
layout after you've called bring
child to front, in order

00:07:47.690 --> 00:07:49.110
for that change to
take effect.

00:07:49.110 --> 00:07:52.490
Otherwise, you'll have to wait
for the child to be brought to

00:07:52.490 --> 00:07:54.490
front until somebody
has requested a

00:07:54.490 --> 00:07:56.640
layout on your view.

00:07:56.640 --> 00:07:59.380
Very similarly, in order to
achieve the full card

00:07:59.380 --> 00:08:03.440
rotation, I am retrieving the
Object Animators from all the

00:08:03.440 --> 00:08:07.200
cards, bringing the objects to
the front, and doing almost

00:08:07.200 --> 00:08:10.080
the exact same thing, except
with a different Object

00:08:10.080 --> 00:08:12.310
Animator, which I can retrieve
from my Card View.

00:08:12.310 --> 00:08:15.460
So that's pretty much how you
can flip cards, rotate them,

00:08:15.460 --> 00:08:16.870
and animate them in
different ways.

00:08:16.870 --> 00:08:18.120
Thanks.

