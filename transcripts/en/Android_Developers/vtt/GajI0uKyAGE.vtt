WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.400
[MUSIC PLAYING]

00:00:02.840 --> 00:00:04.672
The single biggest
improvement your app

00:00:04.672 --> 00:00:06.300
can make for
networking performance

00:00:06.300 --> 00:00:09.040
has to do with reducing the
sheer number of requests made.

00:00:09.040 --> 00:00:11.810
But rather than just avoiding
data syncing all together,

00:00:11.810 --> 00:00:13.347
how exactly do
you pull that off?

00:00:13.347 --> 00:00:15.130
My name is Colt
McAnlis, and if you're

00:00:15.130 --> 00:00:17.300
looking for the optimal
way to batch requests

00:00:17.300 --> 00:00:19.470
to reduce overall
network traffic,

00:00:19.470 --> 00:00:21.100
then prefetching is for you.

00:00:21.100 --> 00:00:23.290
Think of it this way--
your app makes a request

00:00:23.290 --> 00:00:24.680
for a specific piece of data,

00:00:24.680 --> 00:00:26.180
and then sometime in the future

00:00:26.180 --> 00:00:28.430
it makes a request for
another piece of data,

00:00:28.430 --> 00:00:30.300
and so on and so forth.

00:00:30.300 --> 00:00:32.800
Each individual request
has specific overhead

00:00:32.800 --> 00:00:33.730
associated with it.

00:00:33.730 --> 00:00:36.310
It may end up in a weird
pattern of waking up

00:00:36.310 --> 00:00:39.530
the radio each time
to make the request.

00:00:39.530 --> 00:00:41.487
Prefetching is about
predicting what

00:00:41.487 --> 00:00:43.580
data would be in
those future requests

00:00:43.580 --> 00:00:46.460
and grabbing all that data now
while there's an active radio

00:00:46.460 --> 00:00:47.190
connection.

00:00:47.190 --> 00:00:49.190
The benefit here is that
each radio request

00:00:49.190 --> 00:00:50.852
has some overhead in terms of time

00:00:50.852 --> 00:00:51.534
that it takes

00:00:51.534 --> 00:00:53.497
to wake up the radio and battery drain

00:00:53.497 --> 00:00:55.840
that's taken as a result of its
keep awake time.

00:00:55.840 --> 00:00:59.090
Being able to bundle future
requests together and do them

00:00:59.090 --> 00:01:01.520
now means being able
to reduce that overhead

00:01:01.520 --> 00:01:03.810
and save precious battery life.

00:01:03.810 --> 00:01:06.510
But prefetching is a
tricky balancing problem.

00:01:06.510 --> 00:01:08.390
Prefetch too little
and you'll end up

00:01:08.390 --> 00:01:10.610
not optimizing your
bandwidth effectively.

00:01:10.610 --> 00:01:12.500
And prefetching too
much means the user

00:01:12.500 --> 00:01:15.190
is going to be waiting even
longer for the results.

00:01:15.190 --> 00:01:17.950
So now we come to
our simple question--

00:01:17.950 --> 00:01:20.140
how much data is
in a good prefetch?

00:01:20.140 --> 00:01:23.510
Well, the general rule of thumb
is that on a 3G connection

00:01:23.510 --> 00:01:26.920
a quality prefetch is about
one to five megs of data.

00:01:26.920 --> 00:01:28.820
Of course, that's
with the understanding

00:01:28.820 --> 00:01:31.490
that the data will be
needed and used by the user.

00:01:31.490 --> 00:01:33.290
So you could look
at this another way

00:01:33.290 --> 00:01:35.820
and say prefetch as
much data as the user

00:01:35.820 --> 00:01:37.950
might need in the next
one to two minutes

00:01:37.950 --> 00:01:39.580
of their active session.

00:01:39.580 --> 00:01:41.490
But in honesty, one
of the biggest things

00:01:41.490 --> 00:01:43.510
your prefetch needs
to optimize for

00:01:43.510 --> 00:01:46.300
has to be for the speed
of the device connection.

00:01:46.300 --> 00:01:49.190
For example, if the user
is on a 4G connection,

00:01:49.190 --> 00:01:50.900
you may be able to
connect and fetch

00:01:50.900 --> 00:01:54.210
12 new photos, which takes
the same amount of time

00:01:54.210 --> 00:01:57.720
as prefetching three
photos on a 2G connection.

00:01:57.720 --> 00:01:59.326
So modifying your
prefetching code

00:01:59.326 --> 00:02:02.016
to take into account the quality of
the user's connection

00:02:02.016 --> 00:02:04.207
is the best way to create
optimal fetch cases.

00:02:04.207 --> 00:02:06.450
And it's worth pointing
out that the easiest way

00:02:06.450 --> 00:02:09.080
to determine the health of
the network is simply to time

00:02:09.080 --> 00:02:11.380
how long it takes for some
known piece of content

00:02:11.380 --> 00:02:13.120
to return from a request.

00:02:13.120 --> 00:02:15.820
With a few simple calculations
and a handy lookup table

00:02:15.820 --> 00:02:17.770
for common network
speeds, you can quickly

00:02:17.780 --> 00:02:20.370
determine what type of network
the user is connected to

00:02:20.370 --> 00:02:22.950
and adjust your fetching
and requests accordingly.

00:02:22.950 --> 00:02:25.790
It's also worth pointing out
that the real sweet spot here

00:02:25.790 --> 00:02:28.910
has to be executing
batched requests that

00:02:28.910 --> 00:02:31.940
were delayed to be issues, but
have been on the wait cycle,

00:02:31.940 --> 00:02:34.380
and future requests,
AKA prefetching,

00:02:34.380 --> 00:02:36.890
into a single
activity radio window.

00:02:36.890 --> 00:02:39.089
That's when things start
to get really awesome.

00:02:39.089 --> 00:02:40.309
And the good news is that

00:02:40.309 --> 00:02:41.430
you can update your app

00:02:41.430 --> 00:02:42.540
to adopt these patterns

00:02:42.540 --> 00:02:44.870
without having to write
a massive amount of code.

00:02:44.870 --> 00:02:47.700
GCMNetworkManager is a
Google play services API

00:02:47.700 --> 00:02:49.990
which helps to schedule
network-oriented tasks

00:02:49.990 --> 00:02:51.400
and handle batching for you.

00:02:51.400 --> 00:02:53.710
This greatly simplifies
the implementation

00:02:53.710 --> 00:02:55.570
of common patterns
such as waiting

00:02:55.570 --> 00:02:57.790
for networking activity,
network retries,

00:02:57.790 --> 00:02:58.980
and exponential back off.

00:02:58.980 --> 00:03:00.810
Basically, it's all the stuff you need

00:03:00.810 --> 00:03:02.616
with a single helpful API.

00:03:02.616 --> 00:03:04.200
And when it comes to performance,

00:03:04.200 --> 00:03:06.410
you need all the
helpful APIs you can get

00:03:06.410 --> 00:03:07.912
and helpful videos, too.

00:03:07.912 --> 00:03:10.030
Which is why should check out
the rest of the

00:03:10.030 --> 00:03:11.790
Android Performance Patterns content,

00:03:11.800 --> 00:03:12.960
and don't forget to join

00:03:12.960 --> 00:03:14.490
our Google+ community, as well.

00:03:14.490 --> 00:03:17.220
So keep calm, profile your
code, and always remember,

00:03:17.220 --> 00:03:17.990
perf matters.

00:03:17.990 --> 00:03:20.740
[MUSIC PLAYING]

