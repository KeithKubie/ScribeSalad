WEBVTT
Kind: captions
Language: en

00:00:00.106 --> 00:00:02.268
&gt;&gt;Our next question is from Student Kirk Charles,

00:00:02.268 --> 00:00:03.890
and he has quite a story here.

00:00:03.890 --> 00:00:07.038
Okay, "So we know Peter is very excited about launching his

00:00:07.038 --> 00:00:09.092
new search engine business." This is true.

00:00:09.092 --> 00:00:11.411
SearchWithPeter.info is actually launched.

00:00:11.411 --> 00:00:14.652
&gt;&gt;It's a really cool site
&gt;&gt;Yeah I put a lot of work into it

00:00:14.652 --> 00:00:16.493
Web 2.0 and all that.

00:00:16.493 --> 00:00:19.611
"Let us suppose he is targeting the underserved

00:00:19.611 --> 00:00:21.694
market of Klingon language web searches.

00:00:21.694 --> 00:00:24.122
Let us suppose also that he is writing some

00:00:24.122 --> 00:00:26.427
custom hashing procedure. After 8 months of

00:00:26.427 --> 00:00:30.018
explosive growth in business," I hope so, "Peter finds that

00:00:30.018 --> 00:00:32.402
he needs to double the number of buckets in his hash table.

00:00:32.402 --> 00:00:35.801
He also finds that the hash buckets are not utilized evenly,

00:00:35.801 --> 00:00:38.237
since he did not understand the hashing of Klingon

00:00:38.237 --> 00:00:40.337
very well." Sounds like a hard problem.

00:00:40.337 --> 00:00:42.938
So, his question is "How can we re-hash the index

00:00:42.938 --> 00:00:45.624
without service interruptions? This is made more difficult

00:00:45.624 --> 00:00:47.741
by the fact that his user base may get violent,

00:00:47.741 --> 00:00:51.123
if he delays search results. Additionally the long latency

00:00:51.123 --> 00:00:53.355
of intergalactic networks means he also needs to carefully

00:00:53.355 --> 00:00:55.924
roll out a new hash."

00:00:55.924 --> 00:00:58.305
Which strategy should he, I guess I, take?

00:00:58.305 --> 00:01:00.538
&gt;&gt;Wow, well this is quite a question from Captain Kirk.

00:01:00.538 --> 00:01:05.340
I'm glad he is hoping for the success of SearchWithPeter.info.

00:01:05.340 --> 00:01:09.123
And thinking about the future is an important thing to do

00:01:09.123 --> 00:01:13.142
I think one thing I understand is Klingon name servers don't

00:01:13.142 --> 00:01:16.086
support the ".info" domain. So I think you're probably

00:01:16.086 --> 00:01:19.836
safe from the Klingon attack for now, but it's a good

00:01:19.836 --> 00:01:22.628
question to think about when you have to re-hash a table.

00:01:22.628 --> 00:01:24.156
So we've been talking about

00:01:24.156 --> 00:01:26.574
the standard way a hash table works. Once the

00:01:26.574 --> 00:01:29.208
buckets get too full, or the load factor is too high,

00:01:29.208 --> 00:01:31.619
you want to create a new table with more buckets,

00:01:31.619 --> 00:01:33.609
and you've got to copy all your entries to it.

00:01:33.609 --> 00:01:36.569
If you're running a big service like SearchWithPeter.info,

00:01:36.569 --> 00:01:40.140
you don't want to shut down your service while you do that.

00:01:40.140 --> 00:01:42.137
That would get people pretty annoyed.

00:01:42.137 --> 00:01:45.343
If they're Klingons, you don't want to get them annoyed.

00:01:45.343 --> 00:01:49.525
So what you could do instead and there are lots of

00:01:49.525 --> 00:01:51.407
different things, and I don't know what Google does,

00:01:51.407 --> 00:01:54.807
I'm sure there are lots of solutions that are possible,

00:01:54.807 --> 00:01:56.920
and they've figured out something that works well.

00:01:56.920 --> 00:01:59.311
One thing to do would be start a new copy,

00:01:59.311 --> 00:02:02.506
so you keep the search engine going, still responding

00:02:02.506 --> 00:02:04.093
to queries using the old hash table

00:02:04.093 --> 00:02:06.107
but you start a separate process of running on

00:02:06.107 --> 00:02:08.120
a separate computer, something that's making a new

00:02:08.120 --> 00:02:10.657
copy of the hash table with a larger number of buckets.

00:02:10.657 --> 00:02:13.275
Then when you're done with that, you switch them over and

00:02:13.275 --> 00:02:16.361
you have the larger table with new buckets going.

00:02:16.361 --> 00:02:18.968
Other than the switch over, there's no interruption

00:02:18.968 --> 00:02:21.712
in service when you do that. There's some things

00:02:21.712 --> 00:02:23.459
that make this hard. You've gotta worry about

00:02:23.459 --> 00:02:25.706
"Well what if a new entry is added to the hash

00:02:25.706 --> 00:02:27.720
table while you're in the middle of copying it."

00:02:27.720 --> 00:02:30.521
You could lock it, make it so you can't add add any new

00:02:30.521 --> 00:02:32.874
entries during that time. That might be a bad thing

00:02:32.874 --> 00:02:35.520
if it takes a long time to copy. You could

00:02:35.520 --> 00:02:37.470
maybe add the entry to both hash tables.

00:02:37.470 --> 00:02:39.226
Every time a new entry is added, you add it to

00:02:39.226 --> 00:02:41.458
both the original one and the copy as you're developing it.

00:02:41.458 --> 00:02:45.971
You could save the updates and apply them all later

00:02:45.971 --> 00:02:47.723
after you finish the copy.

00:02:47.723 --> 00:02:49.634
So there are lots of tough problems to solve

00:02:49.634 --> 00:02:51.390
to make this work without interruptions,

00:02:51.390 --> 00:02:53.460
but it's definitely an important question to think about

00:02:53.460 --> 00:02:56.010
if you're building SearchWithPeter.info,

00:02:56.010 --> 00:02:57.788
and you have a lot of angry Klingons.

00:02:57.788 --> 00:02:59.709
&gt;&gt;I probably should have been taking notes.
&gt;&gt;Depending on the service.

00:02:59.709 --> 00:03:02.176
Well, we'll see. Hopefully the Klingons

00:03:02.176 --> 00:03:03.726
don't know where you live.

00:03:03.726 --> 00:03:05.975
&gt;&gt;We've recently reached 50 users

00:03:05.975 --> 00:03:07.989
on SearchWithPeter.info.

00:03:07.989 --> 00:03:09.969
We had a cake, and threw a party, it was pretty cool.

00:03:09.969 --> 00:03:13.000
&gt;&gt;Cool, congratulations
&gt;&gt;Thank you.

