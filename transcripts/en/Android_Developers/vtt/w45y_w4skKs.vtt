WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.958
CHRIS BANES: Hi, everyone
and welcome to What's

00:00:01.958 --> 00:00:03.190
New in the Support Library.

00:00:03.190 --> 00:00:05.689
My name is Chris Banes, and I'm
an engineer on the Developer

00:00:05.689 --> 00:00:06.829
Relations team.

00:00:06.829 --> 00:00:07.370
TENG HUI: Hi.

00:00:07.370 --> 00:00:10.320
My name Teng Hui, and I'm an
engineer in the Android UI

00:00:10.320 --> 00:00:11.252
Toolkit team.

00:00:11.252 --> 00:00:12.710
ALAN VIVERETTE:
I'm Alan Viverette,

00:00:12.710 --> 00:00:15.540
and I'm Tech Lead for the
Support Library Project.

00:00:15.540 --> 00:00:18.510
So in the past year, a lot has
changed in the Support Library.

00:00:18.510 --> 00:00:22.350
We added a lot of great new
features in release 23.2.0.

00:00:22.350 --> 00:00:23.920
And since then,
we've added a lot

00:00:23.920 --> 00:00:26.237
of bug fixes and
some minor features.

00:00:26.237 --> 00:00:28.570
And today we're happy to
announce the release of version

00:00:28.570 --> 00:00:31.690
24 alpha 3, which coincides
with the developer preview

00:00:31.690 --> 00:00:34.166
three of Android N.

00:00:34.166 --> 00:00:36.040
So today we're going to
be talking about some

00:00:36.040 --> 00:00:37.667
of the cool new
things in Support Lib,

00:00:37.667 --> 00:00:39.750
and some of the things
that we can look forward to

00:00:39.750 --> 00:00:41.550
in the future.

00:00:41.550 --> 00:00:44.446
We're going to start out
by taking about Support v4.

00:00:44.446 --> 00:00:45.820
So everyone's
familiar with this.

00:00:45.820 --> 00:00:47.540
It's where you have
compatibility shims

00:00:47.540 --> 00:00:50.170
so you don't have to
do an if version check.

00:00:50.170 --> 00:00:53.320
It also contains a bunch of
helper functions and utilities

00:00:53.320 --> 00:00:57.230
that you can use to make your
apps backwards compatible.

00:00:57.230 --> 00:01:00.290
As with each platform version,
we've put in back ports

00:01:00.290 --> 00:01:03.150
for various functions that
have smart fallbacks that you

00:01:03.150 --> 00:01:07.330
can use to target new
APIs on older versions.

00:01:07.330 --> 00:01:09.110
And we also have a
couple of features

00:01:09.110 --> 00:01:12.290
that we'd really like
to highlight today.

00:01:12.290 --> 00:01:15.480
So in fragments, we have
some life cycle improvements.

00:01:15.480 --> 00:01:19.720
Namely, fragment transaction
now has a synchronous commit.

00:01:19.720 --> 00:01:22.510
So if you're creating an
encapsulated component that's

00:01:22.510 --> 00:01:24.950
working with fragments
transactions,

00:01:24.950 --> 00:01:28.570
you can synchronously
commit your transaction.

00:01:28.570 --> 00:01:30.170
If your fragment
is being added, it

00:01:30.170 --> 00:01:32.850
will be added and brought to
the host state immediately.

00:01:32.850 --> 00:01:34.850
You don't have to worry
about ordering conflicts

00:01:34.850 --> 00:01:37.020
with other fragment
transactions.

00:01:37.020 --> 00:01:39.050
Likewise, if your
fragment is being removed,

00:01:39.050 --> 00:01:42.080
it will be removed and
disconnected immediately

00:01:42.080 --> 00:01:43.930
so you can handle all
of your life cycle

00:01:43.930 --> 00:01:46.270
without having to
worry about ordering.

00:01:46.270 --> 00:01:48.780
This is especially useful
if you're a library.

00:01:48.780 --> 00:01:52.750
So we actually use this in
the Viewpager Fragment Module

00:01:52.750 --> 00:01:55.842
in the library to prevent
ordering conflicts.

00:01:55.842 --> 00:01:58.300
Adam Powell is going to talk
more about some of the changes

00:01:58.300 --> 00:02:00.720
to fragments in What The
Fragment, which happens at 5:00

00:02:00.720 --> 00:02:01.220
PM.

00:02:01.220 --> 00:02:03.910
So make sure to check that out.

00:02:03.910 --> 00:02:06.290
We've also made some
changes in notifications.

00:02:06.290 --> 00:02:09.930
In particular, we have a new
conversational messaging style.

00:02:09.930 --> 00:02:12.860
So when you have, say, a
Hangouts Conversation that's

00:02:12.860 --> 00:02:16.360
multiple parties back and forth,
that shows up in notifications

00:02:16.360 --> 00:02:18.980
and shows you snippets
of the conversation.

00:02:18.980 --> 00:02:20.450
This is also
supported by Wear 2.0,

00:02:20.450 --> 00:02:24.730
so when you have a conversation,
that shows up on your watch.

00:02:24.730 --> 00:02:26.810
We've backported
this in Android.

00:02:26.810 --> 00:02:31.500
So if you have Wear running on
an API 18 and above device--

00:02:31.500 --> 00:02:33.960
so that's when Notification
Listener was added,

00:02:33.960 --> 00:02:36.060
Notification Listener
Service, and you

00:02:36.060 --> 00:02:38.820
use the notification
Compat Builder

00:02:38.820 --> 00:02:40.480
to build your
notification, and you

00:02:40.480 --> 00:02:45.120
use messaging style-- even
on an API 18 device, that'll

00:02:45.120 --> 00:02:49.480
move to the Wear App, which
is also using Support Library,

00:02:49.480 --> 00:02:51.500
and understands that
communication channel.

00:02:51.500 --> 00:02:53.800
And you'll get the messaging
style on your Wear device

00:02:53.800 --> 00:02:56.800
as well.

00:02:56.800 --> 00:02:58.550
We're also giving
you more information

00:02:58.550 --> 00:03:01.420
about what users think
of your notifications.

00:03:01.420 --> 00:03:03.530
So one thing that
developers have really

00:03:03.530 --> 00:03:05.430
wanted to know for
a long time is,

00:03:05.430 --> 00:03:08.330
have users block
notifications from my app?

00:03:08.330 --> 00:03:10.660
So in Android N, there
is now an API that

00:03:10.660 --> 00:03:12.730
lets you tell exactly that.

00:03:12.730 --> 00:03:15.030
And we've backported
this to API 19,

00:03:15.030 --> 00:03:18.220
which is when users were first
able to block notifications

00:03:18.220 --> 00:03:19.880
from packages.

00:03:19.880 --> 00:03:22.750
So you will get an
actual value from this

00:03:22.750 --> 00:03:25.150
that reflects whether the
user has blocked notifications

00:03:25.150 --> 00:03:27.800
from your app on
API 19 and above.

00:03:27.800 --> 00:03:33.140
On API 18 and below, it'll just
return false-- or, sorry-- true

00:03:33.140 --> 00:03:36.687
that the user has not
disabled notifications.

00:03:36.687 --> 00:03:38.270
We're also giving
you more information

00:03:38.270 --> 00:03:41.560
about how users rate
your notifications.

00:03:41.560 --> 00:03:43.410
So if they think that
your notifications are

00:03:43.410 --> 00:03:46.730
less important or if they
want to block them completely,

00:03:46.730 --> 00:03:48.720
we have a compatibility
method that

00:03:48.720 --> 00:03:52.150
allows you to do that and use
the API on older versions.

00:03:52.150 --> 00:03:54.520
It'll just return basically
a [INAUDIBLE] value

00:03:54.520 --> 00:03:56.675
that says your notification
is normal priority.

00:03:59.250 --> 00:04:01.480
We've also made some changes
in the media framework.

00:04:01.480 --> 00:04:05.510
So an API 21, for
compatibility with Android Auto

00:04:05.510 --> 00:04:08.050
and Wear media
browsing and playback,

00:04:08.050 --> 00:04:11.660
we added the Media Browser
Service and Media Browser.

00:04:11.660 --> 00:04:14.400
And in Support v4,
we're now bring

00:04:14.400 --> 00:04:16.649
backported versions of those.

00:04:16.649 --> 00:04:19.459
So these are intercompatible
with each other on v4

00:04:19.459 --> 00:04:20.579
and above.

00:04:20.579 --> 00:04:23.070
So if you have an app with
a Media Browser service

00:04:23.070 --> 00:04:26.190
that's exposing media that can
be consumed by a media browser

00:04:26.190 --> 00:04:28.720
if they're both running
compat from the Support Lib,

00:04:28.720 --> 00:04:32.060
they're also compatible with the
framework implementations on 21

00:04:32.060 --> 00:04:33.330
and above.

00:04:33.330 --> 00:04:35.910
So if you use the
Support Library versions,

00:04:35.910 --> 00:04:39.996
they'll be maximally compatible,
work with a lot of devices.

00:04:39.996 --> 00:04:42.100
For a fully functional
implementation

00:04:42.100 --> 00:04:44.110
of both of these classes,
you should check out

00:04:44.110 --> 00:04:46.730
the Universal
Android Media Player,

00:04:46.730 --> 00:04:48.880
which is in the Google
samples on GitHub.

00:04:51.891 --> 00:04:52.390
Right.

00:04:52.390 --> 00:04:55.890
And for applications that
are presenting web content,

00:04:55.890 --> 00:04:58.490
you have a couple of
options right now.

00:04:58.490 --> 00:05:00.490
You have an embedded WebView.

00:05:00.490 --> 00:05:02.560
Maybe you launch a
browser instance.

00:05:02.560 --> 00:05:03.890
And these have some issues.

00:05:03.890 --> 00:05:05.475
They can be a little bit slow.

00:05:05.475 --> 00:05:07.670
If you're launching a
full browser instance,

00:05:07.670 --> 00:05:11.420
you kind of bring the user out
of the experience of your app.

00:05:11.420 --> 00:05:14.684
So Custom Tabs are a new
way to present web content

00:05:14.684 --> 00:05:16.600
that we've already
presented, and we're making

00:05:16.600 --> 00:05:18.390
some improvements to those.

00:05:18.390 --> 00:05:24.250
So this is new in 23.2 with
some improvements in v24.

00:05:24.250 --> 00:05:26.990
The minimum SDK
target for this is 15.

00:05:26.990 --> 00:05:29.090
And the reasoning
for that is primarily

00:05:29.090 --> 00:05:33.500
motivated by what most
apps are targeting now.

00:05:33.500 --> 00:05:38.650
So Chrome has a minimum
SDK target of 16 and above.

00:05:38.650 --> 00:05:41.330
So if you're using
this on API 15,

00:05:41.330 --> 00:05:43.600
likely your user's device
won't have any targets

00:05:43.600 --> 00:05:46.550
and you'll just launch the
regular browser instance

00:05:46.550 --> 00:05:49.550
or you'll need to use
an embedded WebView.

00:05:49.550 --> 00:05:52.380
As I mentioned, this
alternative to embedded WebView

00:05:52.380 --> 00:05:54.450
that is performance focused.

00:05:54.450 --> 00:05:57.087
So it's going to share a
cache with the browser.

00:05:57.087 --> 00:05:59.170
It's also going to share
cookies with the browser.

00:05:59.170 --> 00:06:02.110
So if your user is already
logged in to web content,

00:06:02.110 --> 00:06:04.840
that'll be persisted when
your application loads that

00:06:04.840 --> 00:06:07.330
into a custom tab.

00:06:07.330 --> 00:06:09.140
And because we
don't want the user

00:06:09.140 --> 00:06:11.120
to feel like they're
exiting your application,

00:06:11.120 --> 00:06:14.570
we have a high level of visual
customizability and navigation

00:06:14.570 --> 00:06:15.240
callbacks.

00:06:15.240 --> 00:06:17.440
So if the user
leaves the content

00:06:17.440 --> 00:06:19.930
that they landed in
initially, your application

00:06:19.930 --> 00:06:21.680
can perform something
in response to that.

00:06:24.420 --> 00:06:27.450
So here's a quick example
from the Chrome Blog

00:06:27.450 --> 00:06:29.670
of how fast Custom
Tabs is compared

00:06:29.670 --> 00:06:32.780
to some of the other solutions.

00:06:32.780 --> 00:06:35.510
Because we have a warm
up that can spin up

00:06:35.510 --> 00:06:37.050
the Chrome process
in the background

00:06:37.050 --> 00:06:39.320
before you actually
launch your custom tab,

00:06:39.320 --> 00:06:43.050
and because we're able to
preload and prerender content,

00:06:43.050 --> 00:06:45.180
you can have an almost
instantaneous transition

00:06:45.180 --> 00:06:47.495
from your app to your
web-backed content.

00:06:50.130 --> 00:06:52.030
And this is really
simple to implement.

00:06:52.030 --> 00:06:55.140
So here we have an example
of one-liner warming up

00:06:55.140 --> 00:06:58.110
the Chrome process
and launching a custom

00:06:58.110 --> 00:07:00.530
tab for a specific URL.

00:07:00.530 --> 00:07:04.067
One downside of this is that
because we're just very quickly

00:07:04.067 --> 00:07:05.900
spinning up the Chrome
process and we're not

00:07:05.900 --> 00:07:08.370
keeping any handle
to it, the process

00:07:08.370 --> 00:07:11.890
may be garbage collected
in the background

00:07:11.890 --> 00:07:13.720
if the system is
memory pressured.

00:07:13.720 --> 00:07:18.240
So one other thing you can
do is write a lot more code

00:07:18.240 --> 00:07:21.020
to create a persistent
connection to a Custom Tab

00:07:21.020 --> 00:07:22.161
service.

00:07:22.161 --> 00:07:24.410
For my examples, I've been
talking a lot about Chrome,

00:07:24.410 --> 00:07:27.780
but this could also be
implemented by other browsers.

00:07:27.780 --> 00:07:30.970
So you may see Firefox
Custom Tabs as well.

00:07:30.970 --> 00:07:32.970
But you'll need to handle
connect and disconnect

00:07:32.970 --> 00:07:35.100
with your activity
life cycle here.

00:07:35.100 --> 00:07:36.720
And you can create a session.

00:07:36.720 --> 00:07:38.410
A session to the
Custom Tab Service

00:07:38.410 --> 00:07:42.520
is going to allow you to do
some cool things like preloading

00:07:42.520 --> 00:07:43.520
content.

00:07:43.520 --> 00:07:45.680
So here we have one
target URL that we

00:07:45.680 --> 00:07:47.170
know we're going to land on.

00:07:47.170 --> 00:07:49.195
And we have a couple
of links out of that

00:07:49.195 --> 00:07:50.980
that we have a
pretty good chance

00:07:50.980 --> 00:07:53.270
that the user is
going to land on.

00:07:53.270 --> 00:07:56.630
So as we load these, that
means that we're using data.

00:07:56.630 --> 00:07:58.070
That means we're using battery.

00:07:58.070 --> 00:07:59.986
So you don't want to
just indiscriminately put

00:07:59.986 --> 00:08:01.541
thousands of URLs in this.

00:08:01.541 --> 00:08:03.290
You want to have a
really good higher than

00:08:03.290 --> 00:08:06.226
50% confidence that the
user is going to need these

00:08:06.226 --> 00:08:08.600
so that we can preload them
and show them really quickly.

00:08:11.560 --> 00:08:12.080
Right.

00:08:12.080 --> 00:08:14.960
In addition to being fast,
we want this to be seamless.

00:08:14.960 --> 00:08:17.880
So we provide a lot of
customization aspects

00:08:17.880 --> 00:08:20.900
that you can set up when you're
building your custom intent.

00:08:20.900 --> 00:08:23.190
To that end, you can
customize the toolbar color.

00:08:23.190 --> 00:08:26.460
So here we've colored it
teal to match our app.

00:08:26.460 --> 00:08:28.370
And you can also
customize the action.

00:08:28.370 --> 00:08:30.870
So we have a favorite action
that we've added at the bottom.

00:08:30.870 --> 00:08:33.200
You can add actions
to the Overflow Menu.

00:08:33.200 --> 00:08:35.330
You can also set
up transitions so

00:08:35.330 --> 00:08:38.440
that you have animations
in and our of your activity

00:08:38.440 --> 00:08:39.929
that look like a
natural extension

00:08:39.929 --> 00:08:42.760
of the rest of your app.

00:08:42.760 --> 00:08:44.810
So this is really great.

00:08:44.810 --> 00:08:47.220
It's really easy.

00:08:47.220 --> 00:08:49.530
So these are all just things
you set on your builder

00:08:49.530 --> 00:08:51.650
when you're launching
your intent,

00:08:51.650 --> 00:08:54.860
and then you launch it out
to be Custom Tabs process.

00:08:54.860 --> 00:08:57.740
And as I mentioned, this
is API 15 and above.

00:08:57.740 --> 00:09:00.530
If you're on older
devices or devices that

00:09:00.530 --> 00:09:03.920
don't have a browser that
supports Custom Tabs,

00:09:03.920 --> 00:09:05.510
you can also have
a fallback path

00:09:05.510 --> 00:09:08.570
for either launching the
browser intent for view

00:09:08.570 --> 00:09:10.430
or simply launching
an embedded WebView

00:09:10.430 --> 00:09:12.522
in your own application.

00:09:12.522 --> 00:09:13.300
All right.

00:09:13.300 --> 00:09:15.940
So I've covered some
of the major features

00:09:15.940 --> 00:09:18.800
in recent Support
Library history.

00:09:18.800 --> 00:09:20.530
But there are some
other features

00:09:20.530 --> 00:09:22.360
that are highly
anticipated that I

00:09:22.360 --> 00:09:25.060
will let Teng Hui and Chris
talk about, so over to Teng

00:09:25.060 --> 00:09:28.570
Hui for VectorDrawable.

00:09:28.570 --> 00:09:30.330
TENG HUI: Thank you, Alan.

00:09:30.330 --> 00:09:35.720
[APPLAUSE]

00:09:35.720 --> 00:09:36.330
Great.

00:09:36.330 --> 00:09:39.530
Before we talk about
technical details

00:09:39.530 --> 00:09:41.950
for the VectorDrawables,
let's start

00:09:41.950 --> 00:09:45.330
with some design
principles we have when

00:09:45.330 --> 00:09:48.660
redesigning these new classes.

00:09:48.660 --> 00:09:51.840
First of all, the first
question we may have

00:09:51.840 --> 00:09:55.140
is, why do we need
vector graphics?

00:09:55.140 --> 00:09:57.740
As we all know,
Android has been using

00:09:57.740 --> 00:10:00.520
Bing Maps for a long,
long time for the icons

00:10:00.520 --> 00:10:02.110
and the Drawables.

00:10:02.110 --> 00:10:05.430
And as the phones and
tablets grows bigger

00:10:05.430 --> 00:10:08.760
with higher resolution,
those PNG files

00:10:08.760 --> 00:10:13.730
is taking more and more
spaces in your APK file,

00:10:13.730 --> 00:10:16.550
and vector graphics is
the perfect solution

00:10:16.550 --> 00:10:18.030
to this problem.

00:10:18.030 --> 00:10:21.030
It is using a much
smaller compact file

00:10:21.030 --> 00:10:24.420
format to represent
those icons and can

00:10:24.420 --> 00:10:26.900
scale to any resolution.

00:10:29.590 --> 00:10:32.290
In this example, on
the left-hand side,

00:10:32.290 --> 00:10:36.580
the multiple PNG files can
take up too 10 kilobytes.

00:10:36.580 --> 00:10:39.680
But on the right-hand
side, we just

00:10:39.680 --> 00:10:43.450
need one single SML file to
represent the same icon, which

00:10:43.450 --> 00:10:47.160
can take only 1 kilobyte.

00:10:47.160 --> 00:10:50.030
With more and more
icons in your APK file,

00:10:50.030 --> 00:10:51.800
then that means
you can bring down

00:10:51.800 --> 00:10:53.810
the APK size significantly.

00:10:56.360 --> 00:10:59.270
The second question we
commonly get from developers,

00:10:59.270 --> 00:11:05.320
like why do we not
using SVG file format?

00:11:05.320 --> 00:11:10.090
I hope you all know that SVG
is very complicated for a spec,

00:11:10.090 --> 00:11:12.880
and is surly an overkill
for representing

00:11:12.880 --> 00:11:17.320
those simple, small icons
for your Android app.

00:11:17.320 --> 00:11:20.810
Moreover, we want this
newly designed drawable

00:11:20.810 --> 00:11:25.480
is consistent with all the
other Android APIs, especially

00:11:25.480 --> 00:11:28.580
those animation API
and theming API,

00:11:28.580 --> 00:11:32.965
and work nicely with
all the other resources.

00:11:35.960 --> 00:11:39.020
So we introduced
the VectorDrawable

00:11:39.020 --> 00:11:42.240
and AnimatedVectorDrawable
in Lollipop.

00:11:42.240 --> 00:11:46.260
And they work nicely
for API 21 and above.

00:11:46.260 --> 00:11:49.140
And they're used heavily
inside Android OS

00:11:49.140 --> 00:11:53.180
to bring down our system image.

00:11:53.180 --> 00:11:55.450
And because our simple
design principle,

00:11:55.450 --> 00:11:58.600
we can continue to
improve the performance.

00:11:58.600 --> 00:12:03.000
On this note, I'm glad to report
that on Android N release,

00:12:03.000 --> 00:12:07.950
we improved the join
performance by two times faster

00:12:07.950 --> 00:12:11.190
and the initial file
passing performance up

00:12:11.190 --> 00:12:12.345
to five times faster.

00:12:15.130 --> 00:12:19.100
And here is a symbol of
how the VectorDrawable file

00:12:19.100 --> 00:12:20.620
format looks like.

00:12:20.620 --> 00:12:22.890
It's basically just
a tree structure,

00:12:22.890 --> 00:12:26.420
and is quite similar
to SVG, but simpler.

00:12:26.420 --> 00:12:30.110
All the internal notes
here are the group notes,

00:12:30.110 --> 00:12:33.410
and they are using to
describing the transformation

00:12:33.410 --> 00:12:38.810
information, like scaling,
translation, or rotation.

00:12:38.810 --> 00:12:41.750
And the leaf notes
are the path notes.

00:12:41.750 --> 00:12:47.300
And they're used to describe the
geometry and color information.

00:12:47.300 --> 00:12:50.000
Based on this
VectorDrawables format,

00:12:50.000 --> 00:12:54.450
the AnimatedVectorDrawable
is just simply adding

00:12:54.450 --> 00:12:58.060
the object animators on top.

00:12:58.060 --> 00:13:01.140
For example, we can
set the object animator

00:13:01.140 --> 00:13:06.030
to target it to one group now
through its rotation attribute,

00:13:06.030 --> 00:13:11.790
and set the value to change
from 0 degrees to 360 degrees.

00:13:11.790 --> 00:13:14.010
And when the animation
started, then you

00:13:14.010 --> 00:13:20.240
would see all the children nodes
will be rotating in a circle.

00:13:20.240 --> 00:13:24.310
Also, you can add more object
animators to different nodes,

00:13:24.310 --> 00:13:28.300
to their different attributes,
to make your animation look

00:13:28.300 --> 00:13:30.040
even better.

00:13:30.040 --> 00:13:33.030
There's one caveat you
may be able to see here.

00:13:33.030 --> 00:13:35.380
That means one
AnimatedVectorDrawable

00:13:35.380 --> 00:13:39.870
could involve multiple,
sometimes even 10 or 20,

00:13:39.870 --> 00:13:41.560
XML files.

00:13:41.560 --> 00:13:46.220
To ease the pain, we actually
introduced a new XML bundle

00:13:46.220 --> 00:13:50.920
format to merge related
XML files into one.

00:13:50.920 --> 00:13:54.120
This is in the latest
Build 2 and is also

00:13:54.120 --> 00:13:57.050
backward compatible.

00:13:57.050 --> 00:13:59.210
And here is one example.

00:13:59.210 --> 00:14:01.870
The AnimatedVectorDrawable
is referring

00:14:01.870 --> 00:14:05.580
to a VectorDrawable
whose name is call icon,

00:14:05.580 --> 00:14:09.340
and sits inside a separate file.

00:14:09.340 --> 00:14:13.300
By simply changing the
Android Drawable attribute

00:14:13.300 --> 00:14:19.570
into this new AAPT tag,
then you can cut and paste

00:14:19.570 --> 00:14:23.900
the VectorDrawable, the
whole file, into this tag.

00:14:23.900 --> 00:14:26.510
And then you merge
two files into one.

00:14:26.510 --> 00:14:30.420
You can do the same trick for
all the object animators too.

00:14:30.420 --> 00:14:34.180
So basically, you'll just need
one single file to represent

00:14:34.180 --> 00:14:35.470
your AnimatedVectorDrawable.

00:14:35.470 --> 00:14:37.900
Then hopefully,
that will be easier

00:14:37.900 --> 00:14:42.400
for you to read and
debug this Drawable.

00:14:42.400 --> 00:14:45.480
And now I will also briefly
talk about how do you

00:14:45.480 --> 00:14:47.820
generate those vector assets.

00:14:47.820 --> 00:14:51.680
And luckily, we have
Android Studio to help.

00:14:51.680 --> 00:14:55.890
The first thing you can use is
this Vector Asset Repository

00:14:55.890 --> 00:14:57.080
dialog.

00:14:57.080 --> 00:15:01.930
In here, you can see all the
material design icon library.

00:15:01.930 --> 00:15:04.340
And you can just
pick one you like,

00:15:04.340 --> 00:15:06.675
and it will be saved in
your Drawable Directory.

00:15:09.220 --> 00:15:13.240
Or, if you have your own
SVG files for those assets,

00:15:13.240 --> 00:15:17.100
you can also use this Vector
Assets Studio inside Android

00:15:17.100 --> 00:15:22.520
Studio to convert your own SVG
files into the VectorDrawable

00:15:22.520 --> 00:15:23.420
XML file.

00:15:25.930 --> 00:15:29.590
Now, I hope you feel you
can see this new class is

00:15:29.590 --> 00:15:31.590
useful to you.

00:15:31.590 --> 00:15:34.330
But the major questions we
often get from developer

00:15:34.330 --> 00:15:39.270
is, how can we get these new
classes is working in the older

00:15:39.270 --> 00:15:41.280
version of Android?

00:15:41.280 --> 00:15:43.670
We know this is so
important for you,

00:15:43.670 --> 00:15:46.390
we actually come up
with two solutions.

00:15:46.390 --> 00:15:50.540
The first one is
Gradle solution.

00:15:50.540 --> 00:15:54.050
Inside Android studio,
when you build your app,

00:15:54.050 --> 00:15:57.120
the Gradle will look at
your minimum SDK version,

00:15:57.120 --> 00:16:00.350
if that's less than
21, and you also

00:16:00.350 --> 00:16:04.410
have VectorDrawable XML in
your Drawable Directory,

00:16:04.410 --> 00:16:08.890
it will convert this XML
file into multiple PNG files

00:16:08.890 --> 00:16:14.140
for different DPI automatically
in a generated directory.

00:16:14.140 --> 00:16:18.930
And then the XML file will
be used for API 21 and above.

00:16:18.930 --> 00:16:24.330
And the PNG file will be
used for older versions.

00:16:24.330 --> 00:16:28.400
The best thing for this
solution is simple adoption.

00:16:28.400 --> 00:16:31.820
So the only thing you need to
do is to swap out the PNG assets

00:16:31.820 --> 00:16:34.180
into the XML assets.

00:16:34.180 --> 00:16:36.230
And then Gradle would
do this by default,

00:16:36.230 --> 00:16:42.300
and it would check the minimum
SDK version automatically.

00:16:42.300 --> 00:16:45.110
There's also some downside
for this solution.

00:16:45.110 --> 00:16:48.880
There's no
AnimatedVectorDrawable support,

00:16:48.880 --> 00:16:51.015
and it's only supporting
a limited features

00:16:51.015 --> 00:16:53.360
of VectorDrawable.

00:16:53.360 --> 00:16:56.770
And the last one is
the generated PNG file

00:16:56.770 --> 00:16:59.960
can still sit inside your APK.

00:16:59.960 --> 00:17:05.099
So on this, we also recommend
you have a separate APK

00:17:05.099 --> 00:17:06.609
supported by Play.

00:17:06.609 --> 00:17:10.490
You can't have one for API
21 and above, which will only

00:17:10.490 --> 00:17:13.770
contain the XML file,
and have another one

00:17:13.770 --> 00:17:19.240
for the older version, which
will contain the PNG file.

00:17:19.240 --> 00:17:22.270
We know this sounds like
a hybrid solution here.

00:17:22.270 --> 00:17:24.339
So we continue to
work hard, and then

00:17:24.339 --> 00:17:28.650
we get out this more
purer solution here,

00:17:28.650 --> 00:17:30.035
and based on Support Library.

00:17:32.780 --> 00:17:36.480
In version 23.2 of
Support Library,

00:17:36.480 --> 00:17:38.640
we introduced two new classes.

00:17:38.640 --> 00:17:43.660
One is VectorDrawableCompat and
AnimatedVectorDrawableCompat.

00:17:43.660 --> 00:17:45.680
So from the name,
you can see we are

00:17:45.680 --> 00:17:49.900
supporting both static asset
and the animated asset here.

00:17:49.900 --> 00:17:54.910
The best thing for this solution
is it is XML files only.

00:17:54.910 --> 00:17:57.430
There's no more PNG
involved at all.

00:17:57.430 --> 00:18:01.190
And the same XML
format file can be

00:18:01.190 --> 00:18:04.490
used for the Support Library
version and the Non-support

00:18:04.490 --> 00:18:06.800
Library version.

00:18:06.800 --> 00:18:09.134
And we also support
the full feature set

00:18:09.134 --> 00:18:10.050
of the VectorDrawable.

00:18:13.690 --> 00:18:15.610
There's some caveat
for this solution.

00:18:15.610 --> 00:18:19.940
First, you will need to turn
on a special Gradle flag, which

00:18:19.940 --> 00:18:23.100
is vectorDrawables.
useSupportLibrary,

00:18:23.100 --> 00:18:26.200
which basically turns
off the PNG generation,

00:18:26.200 --> 00:18:29.570
and also have some special
treatment on the VectorDrawable

00:18:29.570 --> 00:18:32.360
XML file.

00:18:32.360 --> 00:18:37.430
Second, you may also need to
be aware of the API versions.

00:18:37.430 --> 00:18:39.700
Very simple, the
VectorDrawableCompat

00:18:39.700 --> 00:18:43.250
is only backported to API 7.

00:18:43.250 --> 00:18:46.835
And the AnimatedVectorDrawable
is backported to API 11.

00:18:49.870 --> 00:18:52.010
And here is one example.

00:18:52.010 --> 00:18:55.040
I am using the Support Library.

00:18:55.040 --> 00:18:57.010
I manually create those assets.

00:18:57.010 --> 00:19:00.440
And they actually can run all
the way back to Honeycomb.

00:19:00.440 --> 00:19:04.970
And as you can see, you have
the scaling, rotating, and even

00:19:04.970 --> 00:19:07.570
some clip masking,
moving objects.

00:19:07.570 --> 00:19:10.630
And there's also
some color change.

00:19:10.630 --> 00:19:14.800
I know you developers will
be more creative than me.

00:19:14.800 --> 00:19:19.880
I hope you can also create
sweeter UI for your app

00:19:19.880 --> 00:19:23.815
and without any much
overhead to your APK size.

00:19:26.390 --> 00:19:31.000
Last thing for this Support
Library, the Drawable reference

00:19:31.000 --> 00:19:32.030
is somewhat different.

00:19:32.030 --> 00:19:35.100
If you're using the old way,
the image view, for example,

00:19:35.100 --> 00:19:37.550
if you're using
Android source, it

00:19:37.550 --> 00:19:39.490
may actually cause
some exception

00:19:39.490 --> 00:19:42.670
in the older version of system.

00:19:42.670 --> 00:19:45.440
For this one, I
actually have to ask

00:19:45.440 --> 00:19:48.350
our owner and expert of
AppCompat Library, Chris,

00:19:48.350 --> 00:19:49.030
to help.

00:19:49.030 --> 00:19:51.200
And he came up with a
really nice solution.

00:19:51.200 --> 00:19:53.330
So now I will welcome
him to talk about it.

00:19:53.330 --> 00:19:54.437
Thank you.

00:19:54.437 --> 00:20:00.170
[APPLAUSE]

00:20:00.170 --> 00:20:01.280
CHRIS BANES: Hi, everyone.

00:20:01.280 --> 00:20:03.238
So Teng Hui was just
spoke about the background

00:20:03.238 --> 00:20:05.300
behind VectorDrawables,
why you would use them,

00:20:05.300 --> 00:20:07.280
and the benefits of
actually using them.

00:20:07.280 --> 00:20:09.613
So I'm going to talk now about
how you actually use them

00:20:09.613 --> 00:20:10.890
in the Support Library.

00:20:10.890 --> 00:20:12.640
And I just one note
here, I've abbreviated

00:20:12.640 --> 00:20:16.260
VectorDrawableCompat and
AnimatedVectorDrawableCompat.

00:20:16.260 --> 00:20:19.477
So if you see it later in the
slides, that's what they mean.

00:20:19.477 --> 00:20:21.310
So the first way you
can use it is manually.

00:20:21.310 --> 00:20:24.710
So each class has a static
method on it called create,

00:20:24.710 --> 00:20:26.770
which takes a context
and a resource

00:20:26.770 --> 00:20:28.760
ID pointing to your resource.

00:20:28.760 --> 00:20:31.340
And that will manually
inflate that resource

00:20:31.340 --> 00:20:33.420
and give you a Drawable back.

00:20:33.420 --> 00:20:36.417
But we know that's kind of
clumsy to use for two reasons.

00:20:36.417 --> 00:20:38.750
Number one, you can only use
it in code, and number two,

00:20:38.750 --> 00:20:40.458
you can't actually
use it from resources,

00:20:40.458 --> 00:20:43.740
which is the whole point
you actually have them.

00:20:43.740 --> 00:20:45.295
So we went back to
the drawing board,

00:20:45.295 --> 00:20:47.295
and we thought, how can
we actually implement it

00:20:47.295 --> 00:20:49.210
in AppCompat, because
that has a lot

00:20:49.210 --> 00:20:52.410
of resource management in it
anyway with views and stuff.

00:20:52.410 --> 00:20:53.826
So we're thinking,
that's probably

00:20:53.826 --> 00:20:56.795
the best place to actually
implement this feature.

00:20:56.795 --> 00:20:58.670
So we have a couple ways
of actually using it

00:20:58.670 --> 00:20:59.950
within AppCompat.

00:20:59.950 --> 00:21:04.140
We have a new attribute on
ImageView called SourceCompat.

00:21:04.140 --> 00:21:07.920
And that, basically, it
supersedes Android source,

00:21:07.920 --> 00:21:10.400
and it allows VectorDrawables
all the way back

00:21:10.400 --> 00:21:12.530
to API 7 for the
static versions,

00:21:12.530 --> 00:21:15.570
and 11 for the
animated versions.

00:21:15.570 --> 00:21:18.580
We've also overridden the
setImageResource method.

00:21:18.580 --> 00:21:21.130
So if you're using that API
anyway to set Drawables,

00:21:21.130 --> 00:21:26.470
you can use VectorDrawabes
back to the same API levels.

00:21:26.470 --> 00:21:30.230
Now, for anything AppCompat
inflates itself-- so here's

00:21:30.230 --> 00:21:32.180
a good example of menus.

00:21:32.180 --> 00:21:33.800
When you inflate a
menu in AppCompat,

00:21:33.800 --> 00:21:36.350
AppCompat is doing
all of that for you.

00:21:36.350 --> 00:21:39.280
So as it is doing it, we can
inject the VectorDrawableCompat

00:21:39.280 --> 00:21:43.190
class into it and load
the Drawable for you.

00:21:43.190 --> 00:21:45.460
So basically, we never
touch the framework there,

00:21:45.460 --> 00:21:47.830
which means that you can use
vectors in those resources,

00:21:47.830 --> 00:21:50.250
and they work back API 7 and 11.

00:21:53.420 --> 00:21:56.000
Now, around 23.2,
I wrote a blog post

00:21:56.000 --> 00:21:58.480
on "Medium" called
"Age of the Vectors."

00:21:58.480 --> 00:22:00.552
And that had a
section in it, which--

00:22:00.552 --> 00:22:02.510
there's a section called
"The Magic Way," which

00:22:02.510 --> 00:22:04.240
is really about name.

00:22:04.240 --> 00:22:05.860
But what it allows
you to do is it

00:22:05.860 --> 00:22:07.235
allows you to use
VectorDrawables

00:22:07.235 --> 00:22:09.947
within Drawable containers.

00:22:09.947 --> 00:22:12.030
Now, it is kind of
experimental in that it doesn't

00:22:12.030 --> 00:22:13.270
work in every situation.

00:22:13.270 --> 00:22:16.340
So that's why I put
a caveat around it.

00:22:16.340 --> 00:22:18.720
We had to remove
it in 23.3, though,

00:22:18.720 --> 00:22:21.200
due to some issues
around memory usage

00:22:21.200 --> 00:22:23.790
and also updating of
configuration objects.

00:22:23.790 --> 00:22:26.302
We'll talk a little bit
about why in a minute.

00:22:26.302 --> 00:22:29.330
But thankfully, we've
brought it back in 23.4.

00:22:29.330 --> 00:22:32.630
You'll see there's the
asterisk next to it.

00:22:32.630 --> 00:22:35.270
And the reason for that is
because it's no longer enabled

00:22:35.270 --> 00:22:38.940
by default. It's now disabled,
which means by default,

00:22:38.940 --> 00:22:40.456
you won't get the issues.

00:22:40.456 --> 00:22:42.330
But if you do want to
use this functionality,

00:22:42.330 --> 00:22:44.600
you can manually enable
it with the caveat

00:22:44.600 --> 00:22:46.349
that those issues still exist.

00:22:46.349 --> 00:22:48.390
If you have a look at the
JavaDoc of this method,

00:22:48.390 --> 00:22:50.461
it's huge, and it tells
you exactly what you're

00:22:50.461 --> 00:22:51.710
sort of letting yourself into.

00:22:54.570 --> 00:22:59.170
So the reason it has those
issues is the way it works.

00:22:59.170 --> 00:23:02.520
Internally, it creates a
special resources instance,

00:23:02.520 --> 00:23:05.840
but per context.

00:23:05.840 --> 00:23:08.630
In reality, that's going
to be per activity.

00:23:08.630 --> 00:23:11.212
Usually in your application,
the resources instance,

00:23:11.212 --> 00:23:12.670
you'll usually only
have one, which

00:23:12.670 --> 00:23:16.526
is reused across all your
activities and whatever else.

00:23:16.526 --> 00:23:17.900
But the way
AppCompat has to work

00:23:17.900 --> 00:23:19.650
and the way this
enables this feature,

00:23:19.650 --> 00:23:23.380
is by using an
instance per context.

00:23:23.380 --> 00:23:27.850
Now, the increase in memory
usage is because of the caches

00:23:27.850 --> 00:23:30.825
that each resource
instance holds.

00:23:30.825 --> 00:23:32.700
So instead of having
one cache for Drawables,

00:23:32.700 --> 00:23:36.970
you'll have like-- I don't
know-- x times the activity.

00:23:36.970 --> 00:23:39.860
Now, it isn't a leak in that as
soon as the activity goes away,

00:23:39.860 --> 00:23:43.280
the resources instance will go
and you'll get the memory back.

00:23:43.280 --> 00:23:46.170
For most apps, it won't
really be a problem.

00:23:46.170 --> 00:23:48.200
But if you have a really
resource heavy app,

00:23:48.200 --> 00:23:50.742
you may see an
increase in memory.

00:23:50.742 --> 00:23:52.200
The second issue
is because we also

00:23:52.200 --> 00:23:55.610
have that multiple
resource instance,

00:23:55.610 --> 00:23:57.820
you can get into
problems if you manually

00:23:57.820 --> 00:23:59.670
call update configuration.

00:23:59.670 --> 00:24:01.100
And that's quite
an advanced call.

00:24:01.100 --> 00:24:02.926
I don't imagine many
people are using it.

00:24:02.926 --> 00:24:04.300
But if you do,
you probably don't

00:24:04.300 --> 00:24:05.744
want to enable its feature.

00:24:09.380 --> 00:24:11.310
So to actually use
this method, this

00:24:11.310 --> 00:24:14.410
is how I'd advise you
to actually use it.

00:24:14.410 --> 00:24:15.840
It's a really
lightweight method.

00:24:15.840 --> 00:24:17.214
And so in each
activity, you just

00:24:17.214 --> 00:24:20.310
stick a static block at
the top, which calls true,

00:24:20.310 --> 00:24:22.036
if you want to use the feature.

00:24:22.036 --> 00:24:23.410
It's really
lightweight, so don't

00:24:23.410 --> 00:24:26.080
worry too much about putting
it in every activity.

00:24:28.225 --> 00:24:30.100
So we talked about how
to actually enable it.

00:24:30.100 --> 00:24:32.242
Let's talk about what
it actually gives you.

00:24:32.242 --> 00:24:33.700
So as I said earlier,
it allows you

00:24:33.700 --> 00:24:37.510
to reference vector resources,
and AnimatedVector resources,

00:24:37.510 --> 00:24:39.365
within DrawableContainers.

00:24:39.365 --> 00:24:41.615
So if you want to use a
vector in a StateListDrawable,

00:24:41.615 --> 00:24:45.134
or maybe a Layer, or Inset, or
LevelList, or whatever it is,

00:24:45.134 --> 00:24:46.800
you can do so with
this feature enabled.

00:24:49.414 --> 00:24:50.830
So here we've got
an example where

00:24:50.830 --> 00:24:52.650
we're going to wrap
a VectorDrawable

00:24:52.650 --> 00:24:54.120
in an InsetDrawable.

00:24:54.120 --> 00:24:56.710
Now, this is quite good
because InsetDrawable,

00:24:56.710 --> 00:24:58.820
if you don't actually
fit any Insets,

00:24:58.820 --> 00:25:01.810
is basically an
invisible wrapper.

00:25:01.810 --> 00:25:04.350
So you'll basically just
have the VectorDrawable,

00:25:04.350 --> 00:25:07.000
and the container won't
actually add anything

00:25:07.000 --> 00:25:09.180
to it, which means you
can actually then use it

00:25:09.180 --> 00:25:10.600
in more places.

00:25:10.600 --> 00:25:11.730
So here we got a TextView.

00:25:11.730 --> 00:25:15.020
And you can set that wrapper
as the drawable left,

00:25:15.020 --> 00:25:17.380
or it could be the right
or top, whatever it is.

00:25:17.380 --> 00:25:20.710
But basically, you can
use it in more places.

00:25:20.710 --> 00:25:23.660
Another example is a
RadioButton button.

00:25:23.660 --> 00:25:26.400
These are just two
examples, background works.

00:25:26.400 --> 00:25:29.470
There's other places as well.

00:25:29.470 --> 00:25:31.415
So that leads us
nicely on to AppCompat.

00:25:31.415 --> 00:25:34.440
Now, AppCompat is designed
to be a mini-backport

00:25:34.440 --> 00:25:35.860
of the framework.

00:25:35.860 --> 00:25:37.702
So things like Tool
Bar, the Action Bar,

00:25:37.702 --> 00:25:40.160
all of those type of things
have been backported into here.

00:25:40.160 --> 00:25:42.722
And it currently
works back to API 7.

00:25:42.722 --> 00:25:44.180
So let's look at
some of the things

00:25:44.180 --> 00:25:48.280
which we've added recently,
so the past six months.

00:25:48.280 --> 00:25:51.800
The first big thing that
I like is Night Mode.

00:25:51.800 --> 00:25:55.300
So that allows your application
to be themed light or dark

00:25:55.300 --> 00:25:57.600
based on the time of day.

00:25:57.600 --> 00:26:00.930
So here we've got an application
which is opened at noon.

00:26:00.930 --> 00:26:03.900
And it's a light
background with dark text.

00:26:03.900 --> 00:26:07.450
And then if a user
opened that at 10:00 PM,

00:26:07.450 --> 00:26:10.500
it would be inverted, so a
dark background, light text,

00:26:10.500 --> 00:26:11.970
which is great for
users if they're

00:26:11.970 --> 00:26:14.849
reading in bed, less glare.

00:26:14.849 --> 00:26:17.140
So there's two things you
have to do to actually enable

00:26:17.140 --> 00:26:18.240
this in your app.

00:26:18.240 --> 00:26:20.030
The first is you
change your theme,

00:26:20.030 --> 00:26:24.740
and change it to extend from one
of the Theme.AppCompat.DayNight

00:26:24.740 --> 00:26:26.320
variants.

00:26:26.320 --> 00:26:29.080
So if you're already using no
action bar or dark action bar,

00:26:29.080 --> 00:26:31.370
but you also have those
variants on top of it,

00:26:31.370 --> 00:26:33.880
so it should be a straight swap.

00:26:33.880 --> 00:26:35.160
Once you've done that, great.

00:26:35.160 --> 00:26:38.130
But you need to tell AppCompat
to actually enable the feature.

00:26:38.130 --> 00:26:41.920
And you do that via the
setDefaultNightMode method.

00:26:41.920 --> 00:26:44.760
Now, that method takes
one of four options.

00:26:44.760 --> 00:26:46.734
The first is FOLLOW_SYSTEM.

00:26:46.734 --> 00:26:47.900
Now, most people don't know.

00:26:47.900 --> 00:26:52.420
But Night Mode has been in
the framework since API 8.

00:26:52.420 --> 00:26:56.560
But before Marshmallow, it was
behind a couple of scenarios.

00:26:56.560 --> 00:26:58.760
You had to be Car Mode
and Docked, if you

00:26:58.760 --> 00:27:00.700
remember what those were.

00:27:00.700 --> 00:27:03.660
In Marshmallow, the feature
is actually always there,

00:27:03.660 --> 00:27:06.850
but you can enable
it, basically,

00:27:06.850 --> 00:27:09.160
but there's no usable,
visible feature.

00:27:09.160 --> 00:27:11.699
There's no setting
in Settings for it.

00:27:11.699 --> 00:27:13.240
So if you use this
mode in AppCompat,

00:27:13.240 --> 00:27:17.450
basically, we will always
follow what the system is doing.

00:27:17.450 --> 00:27:20.575
The most interesting one is
probably MODE_NIGHT_AUTO.

00:27:20.575 --> 00:27:22.950
And that will automatically
change between light and dark

00:27:22.950 --> 00:27:24.790
based on the time of day.

00:27:24.790 --> 00:27:27.760
It will look at the last
known location of the device,

00:27:27.760 --> 00:27:30.850
and then try and work out
a rough, approximate sunset

00:27:30.850 --> 00:27:33.040
and sunrise time, and
then use that to say

00:27:33.040 --> 00:27:35.360
whether in day or night.

00:27:35.360 --> 00:27:36.390
So that's very nice.

00:27:36.390 --> 00:27:38.470
And then follow
two, the last two,

00:27:38.470 --> 00:27:41.110
are YES and NO, which do
exactly what you think.

00:27:41.110 --> 00:27:44.170
Basically, day
mode or night mode.

00:27:44.170 --> 00:27:46.120
I wouldn't advise you
use these unless you

00:27:46.120 --> 00:27:48.694
have some kind of user
setting in your app,

00:27:48.694 --> 00:27:50.860
because you can achieve the
same thing by just using

00:27:50.860 --> 00:27:54.080
the proper theme parents,
either the dark themed

00:27:54.080 --> 00:27:58.990
AppCompat or the light
themed AppCompat alone.

00:27:58.990 --> 00:28:00.490
If you want to know
more about this,

00:28:00.490 --> 00:28:03.780
Alan and I are talking
tomorrow morning at 9:00 AM.

00:28:03.780 --> 00:28:05.664
In the talk of Themes
and Styles Demystified,

00:28:05.664 --> 00:28:07.830
we're going to go more into
this, and also generally

00:28:07.830 --> 00:28:08.788
into themes and styles.

00:28:11.910 --> 00:28:13.570
Another thing we've
added in AppCompat

00:28:13.570 --> 00:28:16.040
recently is ColorStateLists,
and specifically ones

00:28:16.040 --> 00:28:17.430
with themed attributes.

00:28:17.430 --> 00:28:19.930
So these were added to the
framework in Marshmallow,

00:28:19.930 --> 00:28:22.990
and we've backported
them back to API 7.

00:28:22.990 --> 00:28:24.479
And now this is in 24.0.

00:28:24.479 --> 00:28:26.270
So if you're using the
preview, then you'll

00:28:26.270 --> 00:28:28.220
have this functionality.

00:28:28.220 --> 00:28:31.660
Internally, AppCompat uses
this a lot for drawable tints.

00:28:31.660 --> 00:28:35.070
We've managed to reduce the
amount of ColorStateList codes

00:28:35.070 --> 00:28:39.020
by loads, by actually moving
all of it into resources.

00:28:39.020 --> 00:28:42.080
So here's an example of
just a ColorStateList.

00:28:42.080 --> 00:28:44.141
The first item references
a themed attribute.

00:28:44.141 --> 00:28:45.890
In this instance, it's
colorControlNormal.

00:28:48.430 --> 00:28:51.980
Now, the really neat thing
about here in this disabled item

00:28:51.980 --> 00:28:53.990
is that you can be
using the color.

00:28:53.990 --> 00:28:55.656
But you also have
this new functionality

00:28:55.656 --> 00:28:58.340
where you can change the alpha
of the color at the same time.

00:28:58.340 --> 00:29:00.020
So using the Android
Alpha Attribute,

00:29:00.020 --> 00:29:04.650
you can modulate the alpha of
the color to whatever you want.

00:29:04.650 --> 00:29:06.974
Now, it takes a float
value from 0 to 1.

00:29:06.974 --> 00:29:08.640
We're just going to
reference the system

00:29:08.640 --> 00:29:10.110
default for disabled.

00:29:10.110 --> 00:29:13.950
But yeah, you can set
to it whatever you want.

00:29:13.950 --> 00:29:15.910
To actually use these
and inflate them,

00:29:15.910 --> 00:29:20.000
we added a new API called
AppCompatResources.

00:29:20.000 --> 00:29:22.680
So if you want to inflate
these, use this method.

00:29:22.680 --> 00:29:25.340
We're going to add more stuff
to this class in the future.

00:29:25.340 --> 00:29:28.880
And so, more coming soon.

00:29:28.880 --> 00:29:31.810
So following on from AppCompat,
we have the Design Library.

00:29:31.810 --> 00:29:34.975
Now last year, last I/O
actually, we released it

00:29:34.975 --> 00:29:38.130
as a first party
take implemented

00:29:38.130 --> 00:29:41.750
on some of the components
from material design.

00:29:41.750 --> 00:29:43.730
Since then, we've
been in book fix mode,

00:29:43.730 --> 00:29:44.870
and trying to stabilize it.

00:29:44.870 --> 00:29:47.440
But we have added some
features recently.

00:29:47.440 --> 00:29:49.380
The first big one
is Bottom sheets.

00:29:49.380 --> 00:29:51.190
Now, in Spec, there
are two types.

00:29:51.190 --> 00:29:52.950
There's Persistent and Modal.

00:29:52.950 --> 00:29:56.160
Persistent when the Bottom sheet
is always part of your content.

00:29:56.160 --> 00:29:57.320
You can't dismiss it.

00:29:57.320 --> 00:29:58.720
So a good example is Maps here.

00:29:58.720 --> 00:30:00.880
And it shows the
detail for whatever,

00:30:00.880 --> 00:30:03.430
the address is or whatever.

00:30:03.430 --> 00:30:05.010
On the right, we
got the Modal ones.

00:30:05.010 --> 00:30:06.720
And that's basically
described as being

00:30:06.720 --> 00:30:09.257
an alternative to dialog.

00:30:09.257 --> 00:30:11.340
So let's take a quick look
at what they look like.

00:30:11.340 --> 00:30:13.040
So this is the actual
implementation.

00:30:13.040 --> 00:30:15.250
As you can see, as the
user scrolls up and down,

00:30:15.250 --> 00:30:19.822
in collapses and expands,
but you can never dismiss it.

00:30:19.822 --> 00:30:22.030
And to actually use it, the
first thing you'll notice

00:30:22.030 --> 00:30:24.290
is that the parent needs
to be a CoordinatorLayout.

00:30:24.290 --> 00:30:26.430
So if you're using app
file layout and whatnot,

00:30:26.430 --> 00:30:28.580
you're all set already.

00:30:28.580 --> 00:30:31.030
And within here, you'd set
the rest of your content.

00:30:31.030 --> 00:30:33.590
So in the map example,
it would be a map view.

00:30:33.590 --> 00:30:35.046
And then we have
our Bottom sheet.

00:30:35.046 --> 00:30:36.420
Here we're using
a linear layout,

00:30:36.420 --> 00:30:39.420
but it could be
whatever you want.

00:30:39.420 --> 00:30:41.790
And the way you actually
tell it to be a Bottom sheet

00:30:41.790 --> 00:30:44.650
is by setting this
special behavior on it.

00:30:44.650 --> 00:30:47.860
Now, Ian Light wrote a
great post on "Medium"

00:30:47.860 --> 00:30:48.800
about behaviors.

00:30:48.800 --> 00:30:51.060
So of you want to know more,
go and read that first.

00:30:51.060 --> 00:30:53.787
But this is the way you actually
tell it to be a Bottom sheet.

00:30:53.787 --> 00:30:55.120
And then we also have an option.

00:30:55.120 --> 00:30:57.971
By default, it'll just sit at
the Bottom default peekHeight.

00:30:57.971 --> 00:30:59.970
But you can also set it
to be whatever you want.

00:30:59.970 --> 00:31:02.040
The peekHeight is how much
it sits at the bottom when

00:31:02.040 --> 00:31:02.740
it's collapsed.

00:31:05.450 --> 00:31:06.850
The second type is Modal.

00:31:06.850 --> 00:31:09.410
So as I said, it's like
an alternative to dialog.

00:31:09.410 --> 00:31:11.510
So as you can see here,
when the user clicks,

00:31:11.510 --> 00:31:14.400
you get this modal Bottom
sheet, which you can scroll

00:31:14.400 --> 00:31:15.690
and then dismiss.

00:31:19.085 --> 00:31:21.460
So we know that most-- well,
we've already described them

00:31:21.460 --> 00:31:23.810
as an alternative to
dialog, so the way

00:31:23.810 --> 00:31:26.499
we've tried to implement this
is as simple as possible.

00:31:26.499 --> 00:31:28.540
We know that the majority
of people using dialogs

00:31:28.540 --> 00:31:30.890
will probably use
a Dialog Fragment.

00:31:30.890 --> 00:31:33.220
So we've tried to
implement this using that.

00:31:33.220 --> 00:31:35.030
So you should be
able to just extend,

00:31:35.030 --> 00:31:37.840
change the superclass
of any of your fragments

00:31:37.840 --> 00:31:39.690
to this new
BottomSheetDialogFragment,

00:31:39.690 --> 00:31:42.050
and then it will just suddenly
become a Bottom sheet.

00:31:42.050 --> 00:31:43.230
It's really simple to use.

00:31:43.230 --> 00:31:45.954
I'm used it internally in a
couple of apps, and it's nice.

00:31:45.954 --> 00:31:48.120
Once you've done that, you
just create the fragment,

00:31:48.120 --> 00:31:50.590
and then call dot show,
which is the same thing

00:31:50.590 --> 00:31:53.770
as DialogFragment.

00:31:53.770 --> 00:31:55.480
The other thing in
Design Library-- it's

00:31:55.480 --> 00:31:57.430
not really a feature,
it's more of a bug

00:31:57.430 --> 00:32:01.960
we fixed-- is that any
of the Elevation handling

00:32:01.960 --> 00:32:05.000
was previously hardcoded, just
for ease of implementation

00:32:05.000 --> 00:32:06.620
for last year.

00:32:06.620 --> 00:32:08.720
But we've been trying to fix it.

00:32:08.720 --> 00:32:11.940
So there are three
scenarios on the material

00:32:11.940 --> 00:32:13.910
spec of AppBar scrolling.

00:32:13.910 --> 00:32:16.560
The first is always elevated.

00:32:16.560 --> 00:32:19.040
So here the use of
scrolls, and regardless

00:32:19.040 --> 00:32:20.550
of the scroll
position, it is always

00:32:20.550 --> 00:32:22.910
elevated, which means it
casts a shadow, basically.

00:32:22.910 --> 00:32:26.315
You probably can't see it
very well, but it is elevated.

00:32:26.315 --> 00:32:28.300
And then we have
the second type.

00:32:28.300 --> 00:32:31.690
So here the header
is not elevated.

00:32:31.690 --> 00:32:33.560
So it's in line
with the content.

00:32:33.560 --> 00:32:36.150
And then as the user
scrolls and it collapses,

00:32:36.150 --> 00:32:38.220
it then becomes elevated.

00:32:38.220 --> 00:32:42.050
And then as I scroll off,
it's no longer elevated.

00:32:42.050 --> 00:32:45.830
So that is implemented using
a CollapsingToolbarLayout.

00:32:45.830 --> 00:32:49.350
But there's a third scenario on
spec which we didn't support.

00:32:49.350 --> 00:32:51.480
And that is, when you
have collapsing content,

00:32:51.480 --> 00:32:54.187
but you also want
it to stay elevated.

00:32:54.187 --> 00:32:56.520
So we were trying to think
of ways to actually implement

00:32:56.520 --> 00:32:58.730
this in a nice way.

00:32:58.730 --> 00:33:02.400
And the way we fell with
was StateListAnimator.

00:33:02.400 --> 00:33:04.240
So we now have a
StateListAnimator, which

00:33:04.240 --> 00:33:06.542
controls all of the elevation.

00:33:06.542 --> 00:33:08.750
Now, the this is similar to
the button implementation

00:33:08.750 --> 00:33:09.620
on material.

00:33:09.620 --> 00:33:11.485
So when you click on
a button on material,

00:33:11.485 --> 00:33:14.390
it's supposed to come to
your finger and enlarge.

00:33:14.390 --> 00:33:17.970
Now, that uses StateListAnimater
intended to actually do that.

00:33:17.970 --> 00:33:20.820
So we're choosing the
same functionality.

00:33:20.820 --> 00:33:22.874
So we've added two
states, which you

00:33:22.874 --> 00:33:24.290
can use in your
StateListAnimators

00:33:24.290 --> 00:33:25.580
to actually implement this.

00:33:25.580 --> 00:33:27.160
The first is
collapsible, which means

00:33:27.160 --> 00:33:29.310
that there is
collapsible content

00:33:29.310 --> 00:33:31.530
within the AppBarLayout.

00:33:31.530 --> 00:33:32.870
And secondly is collapsed.

00:33:32.870 --> 00:33:34.870
And that means that there
is collapsible content

00:33:34.870 --> 00:33:36.960
and it is also collapsed.

00:33:36.960 --> 00:33:39.510
So let's take a
look at an example.

00:33:39.510 --> 00:33:42.020
So here we're going to
implement the scenario where

00:33:42.020 --> 00:33:45.300
you want it to be elevated
when it's collapsed,

00:33:45.300 --> 00:33:47.220
so the second scenario.

00:33:47.220 --> 00:33:49.540
Now, this is already
given to you by default.

00:33:49.540 --> 00:33:51.410
You do not need
to implement this.

00:33:51.410 --> 00:33:53.784
We're just going to use this
example to actually show you

00:33:53.784 --> 00:33:55.417
how to use the new states.

00:33:55.417 --> 00:33:57.750
So here we have two items
within this StateListAnimator.

00:34:00.900 --> 00:34:03.730
The first is run when we have
some collapsible content,

00:34:03.730 --> 00:34:05.350
and is also collapsed.

00:34:05.350 --> 00:34:07.780
So if you think back to the
scenario, in that point,

00:34:07.780 --> 00:34:10.530
it needs to be elevated,
which means that we animate

00:34:10.530 --> 00:34:11.931
the elevation up to 8dp.

00:34:11.931 --> 00:34:13.889
And that could be any
value, whatever you want.

00:34:13.889 --> 00:34:16.080
Look at spec for the actual
values you should use,

00:34:16.080 --> 00:34:19.639
which can use 8dp as an example.

00:34:19.639 --> 00:34:22.044
And the second item doesn't
have any states, which

00:34:22.044 --> 00:34:23.210
means it's the default item.

00:34:23.210 --> 00:34:25.630
Therefore, it will be run
whenever the first item doesn't

00:34:25.630 --> 00:34:27.050
hold true.

00:34:27.050 --> 00:34:31.600
At this point, it is when
the collapsible content

00:34:31.600 --> 00:34:33.810
is no longer collapsed.

00:34:33.810 --> 00:34:36.449
Therefore, we want to elevate--
bring the elevation down to 0.

00:34:36.449 --> 00:34:38.652
And therefore,
it's not elevated.

00:34:38.652 --> 00:34:40.610
So as I said, you don't
need to implement that.

00:34:40.610 --> 00:34:43.040
That is done by default for
you-- just using an example.

00:34:43.040 --> 00:34:45.540
Now, if you think back, there
was that third scenario, which

00:34:45.540 --> 00:34:48.630
we don't currently support.

00:34:48.630 --> 00:34:51.110
Now, that's a really
simple StateListAnimator.

00:34:51.110 --> 00:34:53.370
It just has one item,
so it doesn't even

00:34:53.370 --> 00:34:54.800
look at the states.

00:34:54.800 --> 00:34:57.726
And it just sets the
elevations at 8dp.

00:34:57.726 --> 00:34:58.770
So that's all it does.

00:35:01.310 --> 00:35:04.860
To actually use this, you just
set the stateListAnimator tag

00:35:04.860 --> 00:35:06.360
on your layout,
pointing to whatever

00:35:06.360 --> 00:35:07.485
StateListAnimator you want.

00:35:10.570 --> 00:35:13.070
And now I'm going to hand it
over to Alan to take about some

00:35:13.070 --> 00:35:14.947
of the sneaky new
stuff we're planning.

00:35:14.947 --> 00:35:16.030
ALAN VIVERETTE: All right.

00:35:16.030 --> 00:35:16.613
Thanks, Chris.

00:35:16.613 --> 00:35:22.414
[APPLAUSE]

00:35:22.414 --> 00:35:23.180
All right.

00:35:23.180 --> 00:35:25.550
So Chet was kind enough
to tease that we're

00:35:25.550 --> 00:35:27.800
telling you about the future
things in Support Library

00:35:27.800 --> 00:35:29.380
this morning.

00:35:29.380 --> 00:35:32.820
So let's start out with a
little interactive part.

00:35:32.820 --> 00:35:34.820
First, a show of hands,
how many developers here

00:35:34.820 --> 00:35:37.090
are using the Support Library?

00:35:37.090 --> 00:35:37.590
Good.

00:35:37.590 --> 00:35:39.691
That's probably why you're here.

00:35:39.691 --> 00:35:40.190
All right.

00:35:40.190 --> 00:35:43.890
Show of hands, keep your hand
up if you're supporting API 14

00:35:43.890 --> 00:35:47.950
and above in your
application, or lower.

00:35:47.950 --> 00:35:48.820
14 and above?

00:35:48.820 --> 00:35:49.690
OK.

00:35:49.690 --> 00:35:53.355
Hands up again-- we're getting
exercise-- if you support API 9

00:35:53.355 --> 00:35:56.380
and above in your application?

00:35:56.380 --> 00:35:58.600
OK, fewer people.

00:35:58.600 --> 00:36:02.720
API 4 and above in
your application?

00:36:02.720 --> 00:36:05.482
Wow, not a single--
one guy, one girl.

00:36:05.482 --> 00:36:06.190
That's fantastic.

00:36:06.190 --> 00:36:07.580
That's dedication to your craft.

00:36:07.580 --> 00:36:09.865
I respect that.

00:36:09.865 --> 00:36:11.740
You're not going to like
where this is going.

00:36:11.740 --> 00:36:14.170
[LAUGHTER]

00:36:14.170 --> 00:36:18.370
We are dropping support
for APIs below 9.

00:36:18.370 --> 00:36:21.370
This has been a long time
coming, so less than--

00:36:21.370 --> 00:36:24.720
[APPLAUSE]

00:36:24.720 --> 00:36:26.000
It's only API 9.

00:36:26.000 --> 00:36:28.270
Don't get too excited.

00:36:28.270 --> 00:36:29.960
So less than a
tenth of a percent

00:36:29.960 --> 00:36:32.740
of devices that have
access to Play store

00:36:32.740 --> 00:36:37.430
are running APIs less than 9.

00:36:37.430 --> 00:36:41.320
So dropping support means
one, we have fewer methods.

00:36:41.320 --> 00:36:43.310
So we're taking
a couple of steps

00:36:43.310 --> 00:36:46.460
back from your
ProGuard decks limit.

00:36:46.460 --> 00:36:48.040
Yeah.

00:36:48.040 --> 00:36:54.310
So about 130 methods right
now just removed from v4.

00:36:54.310 --> 00:36:57.500
We're still in the process
of backing things out.

00:36:57.500 --> 00:36:59.790
This is also going to
improve our release cycle.

00:36:59.790 --> 00:37:02.310
So we're able to now focus
on the same platforms

00:37:02.310 --> 00:37:04.360
that you actually care about.

00:37:04.360 --> 00:37:06.520
As it turns out,
supporting API 4

00:37:06.520 --> 00:37:08.480
takes a lot more
effort than supporting

00:37:08.480 --> 00:37:12.070
API 9 or 14, which is
why most people here

00:37:12.070 --> 00:37:13.687
aren't supporting API 4.

00:37:13.687 --> 00:37:15.520
So we're going to be
able to iterate faster.

00:37:15.520 --> 00:37:19.050
We're going to be able to focus
our fixes and our workarounds

00:37:19.050 --> 00:37:22.380
for platform bugs, and
our testing on the APIs

00:37:22.380 --> 00:37:24.790
that you actually care about.

00:37:24.790 --> 00:37:27.530
So hopefully, that'll make
your life a little bit better.

00:37:27.530 --> 00:37:32.120
Second, as I mentioned
earlier, Support v4

00:37:32.120 --> 00:37:35.080
contains backwards
compatibility shims.

00:37:35.080 --> 00:37:37.790
So this is so you don't have to
wrap everything with a version

00:37:37.790 --> 00:37:41.640
check and then figure out some
reasonable fallback behavior.

00:37:41.640 --> 00:37:45.260
And Support v4 started
out only containing this.

00:37:45.260 --> 00:37:47.540
And then we added
some other things.

00:37:47.540 --> 00:37:49.270
So we added fragments in API 11.

00:37:49.270 --> 00:37:51.960
We figured it would be good to
have a backwards compatible way

00:37:51.960 --> 00:37:53.959
to get people on board
with fragments supporting

00:37:53.959 --> 00:37:54.620
older devices.

00:37:54.620 --> 00:37:56.530
And then we added some
helpers for things

00:37:56.530 --> 00:37:59.380
like accessibility
and drag and drop.

00:37:59.380 --> 00:38:02.350
Then we added some more
stuff, and some more stuff.

00:38:02.350 --> 00:38:06.770
And Support v4 alone has
become a very large library.

00:38:06.770 --> 00:38:10.120
So we're going to
be breaking that up

00:38:10.120 --> 00:38:13.030
into more focused modules.

00:38:13.030 --> 00:38:15.167
And the important thing
here is that we're

00:38:15.167 --> 00:38:16.750
going to support--
we're going to hold

00:38:16.750 --> 00:38:18.600
your hand through this process.

00:38:18.600 --> 00:38:21.740
So we're not changing
any of the package names.

00:38:21.740 --> 00:38:24.790
I should also mention for
the minimum version change,

00:38:24.790 --> 00:38:26.650
we're not changing any
of the package names.

00:38:26.650 --> 00:38:30.040
So Support v4 is
still Support v4.

00:38:30.040 --> 00:38:33.690
support.v4.media is
still support.v4.media.

00:38:33.690 --> 00:38:35.950
We're going to be moving
them into different modules,

00:38:35.950 --> 00:38:39.130
and we will have a meta module
that includes everything

00:38:39.130 --> 00:38:40.730
under the old name.

00:38:40.730 --> 00:38:42.310
So all the libraries
that you use

00:38:42.310 --> 00:38:44.690
that depend on
the package naming

00:38:44.690 --> 00:38:49.254
structure, and the module
names themselves will be fine.

00:38:49.254 --> 00:38:50.920
We're not going to
end up in a situation

00:38:50.920 --> 00:38:55.610
where you need a special
version of a library dependency.

00:38:55.610 --> 00:38:57.570
Let's see.

00:38:57.570 --> 00:39:01.430
So hopefully, this is going
to be completely source code

00:39:01.430 --> 00:39:03.700
compatible and binary
compatible with your existing

00:39:03.700 --> 00:39:06.211
applications and library jars.

00:39:06.211 --> 00:39:08.710
And hopefully this is going to
make your life as a developer

00:39:08.710 --> 00:39:10.660
a little bit easier.

00:39:10.660 --> 00:39:12.575
So thanks, everybody for coming.

00:39:12.575 --> 00:39:15.167
[APPLAUSE]

00:39:20.330 --> 00:39:23.560
We have some other talks that
you may be interested in-- What

00:39:23.560 --> 00:39:27.650
The Fragment today at 5:00,
Data Binding, and RecyclerView.

00:39:27.650 --> 00:39:29.030
Thanks again, everyone.

00:39:29.030 --> 00:39:31.051
We'll see you around.

00:39:31.051 --> 00:39:34.289
[MUSIC PLAYING]

