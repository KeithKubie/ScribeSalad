WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.190
[MUSIC PLAYING]

00:00:06.190 --> 00:00:07.820
FEMI TAIWO: A caching
system basically

00:00:07.820 --> 00:00:12.950
makes use of
technology that stores

00:00:12.950 --> 00:00:17.790
part of your code, or
your content, in memory.

00:00:17.790 --> 00:00:19.660
An example of where
this could be used

00:00:19.660 --> 00:00:26.360
is for a newspaper website
or a news magazine website.

00:00:26.360 --> 00:00:31.530
The home page may not change
for every couple of minutes,

00:00:31.530 --> 00:00:34.710
yet it can have a
hundred, 500, a thousand,

00:00:34.710 --> 00:00:37.140
thousands of users
coming to that home page

00:00:37.140 --> 00:00:39.510
within that time.

00:00:39.510 --> 00:00:43.380
It makes no sense,
or it's suboptimal,

00:00:43.380 --> 00:00:46.940
to have to-- for every time a
user comes to the home page--

00:00:46.940 --> 00:00:49.610
to have to go to your database
to pull what's the latest

00:00:49.610 --> 00:00:52.020
news, where's the
picture, where's

00:00:52.020 --> 00:00:54.360
the content, who is the author.

00:00:54.360 --> 00:00:59.850
What you can do instead is
store that in your cache.

00:00:59.850 --> 00:01:02.570
And once there's an
update of that content

00:01:02.570 --> 00:01:04.680
you just need to
update the cache.

00:01:04.680 --> 00:01:08.400
Every user who comes to the
site at that point in time gets

00:01:08.400 --> 00:01:11.380
served content from that cache.

00:01:11.380 --> 00:01:12.880
And there are several
tools that you

00:01:12.880 --> 00:01:16.260
can use to enable
caching on your servers.

00:01:18.810 --> 00:01:21.470
The first I'd recommend
for those of us

00:01:21.470 --> 00:01:25.450
who use Apache is memcached.

00:01:25.450 --> 00:01:30.590
Memcached is fantastic because
it runs extremely fast.

00:01:30.590 --> 00:01:32.590
You see on line four I'm
[INAUDIBLE] an instance

00:01:32.590 --> 00:01:35.870
of the memcached class.

00:01:35.870 --> 00:01:40.514
And if you're using Google
App Engine like I usually do,

00:01:40.514 --> 00:01:42.180
you don't need to
have line eight, which

00:01:42.180 --> 00:01:44.179
is a part that connects
to the memcached server.

00:01:44.179 --> 00:01:46.540
That already happens
instantly, automatically,

00:01:46.540 --> 00:01:48.642
on Google App Engine.

00:01:48.642 --> 00:01:50.350
Or if you're not using
Google App Engine,

00:01:50.350 --> 00:01:54.090
you need to run that line there.

00:01:54.090 --> 00:01:57.060
Let's assume this is a
fictitious days of week site--

00:01:57.060 --> 00:02:00.110
days of the week website.

00:02:00.110 --> 00:02:02.330
And what I'm doing
here on line ten

00:02:02.330 --> 00:02:10.605
is checking if it's already
memcached the days of the week.

00:02:10.605 --> 00:02:14.490
And if I don't get the
results as seen on line 11,

00:02:14.490 --> 00:02:17.550
I then run my series of
logic, pooled information,

00:02:17.550 --> 00:02:20.010
process the data
from the database,

00:02:20.010 --> 00:02:22.440
to get the days of the week.

00:02:22.440 --> 00:02:25.300
And after I do that
I start in memcached.

00:02:25.300 --> 00:02:29.695
And then I can now
display the results

00:02:29.695 --> 00:02:33.230
of that code in my browser.

00:02:33.230 --> 00:02:34.990
Now how do I set up memcached?

00:02:34.990 --> 00:02:35.755
It's simple.

00:02:35.755 --> 00:02:37.500
If you're using
Google App Engine,

00:02:37.500 --> 00:02:38.750
there's no need to install it.

00:02:38.750 --> 00:02:39.740
It's already there.

00:02:39.740 --> 00:02:43.520
If you're using a VPS, a private
server, a cloud, wherever,

00:02:43.520 --> 00:02:47.180
right, then you should
go to memcached.org

00:02:47.180 --> 00:02:50.910
to follow the instructions on
how to download and install

00:02:50.910 --> 00:02:53.410
memcached.

00:02:53.410 --> 00:02:56.860
The third, what I find is
the most important thing,

00:02:56.860 --> 00:03:03.830
is testing, testing
with virtual users.

00:03:03.830 --> 00:03:09.640
Testing to simulate what would
happen if a thousand users were

00:03:09.640 --> 00:03:13.200
accessing your website
or app at the same time,

00:03:13.200 --> 00:03:16.120
10,000 users accessing
your app at the same time.

00:03:16.120 --> 00:03:18.220
What would be the
experience like if you

00:03:18.220 --> 00:03:22.330
had 100,000 users accessing the
application at the same time?

00:03:22.330 --> 00:03:24.170
What would happen?

00:03:24.170 --> 00:03:27.840
And where are the bottlenecks
in your application?

00:03:27.840 --> 00:03:30.670
When you have just 10
users, or a hundred users,

00:03:30.670 --> 00:03:34.250
it may not be so obvious
where the constraints or where

00:03:34.250 --> 00:03:38.190
the limits or the
bottlenecks are.

00:03:38.190 --> 00:03:43.360
Since it's going to be a little
difficult to sort of have

00:03:43.360 --> 00:03:46.560
a thousand people in one
room testing your app,

00:03:46.560 --> 00:03:49.370
what you can do is to
simulate a thousand

00:03:49.370 --> 00:03:52.280
users on your app
at the same time

00:03:52.280 --> 00:03:58.970
by using tools specifically
created for testing web apps.

00:03:58.970 --> 00:04:03.620
An example of that I
recommend is JMeter.

00:04:03.620 --> 00:04:05.810
JMeter is an open
source application

00:04:05.810 --> 00:04:10.530
that enables you to test
out your applications.

00:04:10.530 --> 00:04:13.220
You can set it up to
test with a thousand

00:04:13.220 --> 00:04:15.647
users, a hundred thousand
people if that's what you want.

00:04:15.647 --> 00:04:17.480
There's really no limits
to what JMeter have

00:04:17.480 --> 00:04:21.070
to do to test your web app.

00:04:21.070 --> 00:04:22.730
And you can then
profile it to see

00:04:22.730 --> 00:04:25.425
exactly how the app performs
on those different amounts

00:04:25.425 --> 00:04:25.925
of traffic.

00:04:28.560 --> 00:04:30.500
I have mentioned
three key things

00:04:30.500 --> 00:04:33.510
that you can do to help
ensure that your app skills.

00:04:33.510 --> 00:04:38.050
The first was key mechanism, the
second was caching mechanisms

00:04:38.050 --> 00:04:41.460
and the third is
testing your system.

00:04:41.460 --> 00:04:43.510
So check out the links
in your description

00:04:43.510 --> 00:04:46.070
to access even
more content on how

00:04:46.070 --> 00:04:49.860
you can help your app
to scale and sample code

00:04:49.860 --> 00:04:52.300
that we wrote
during this session.

00:04:52.300 --> 00:04:53.850
[MUSIC PLAYING]

