WEBVTT
Kind: captions
Language: en

00:00:03.860 --> 00:00:09.269
&gt;&gt;Matias Duarte: Hello, everybody. Good morning.
Welcome. Thanks for coming out here. Thanks

00:00:09.269 --> 00:00:14.950
for joining our session on designing Android
UI for tablet and for phone and, specifically,

00:00:14.950 --> 00:00:21.370
on Honeycomb. My name is Matias Duarte. I
run the UX team for Android. Up here on stage

00:00:21.370 --> 00:00:26.350
with me are Christian Robertson, Rich Fulcher,
Adam Powell, and Roman Nurik. And they're

00:00:26.350 --> 00:00:31.990
going to help speak through all the different
aspects of designing UI here. Before we get

00:00:31.990 --> 00:00:38.320
started talking about the fun stuff, let's
do the administrative stuff. Make sure you

00:00:38.320 --> 00:00:45.850
get the cool apps here that will help you
give feedback. Also download the Google I/O

00:00:45.850 --> 00:00:50.920
Android app which has the same links. We're
going to use the Google I/O Android app as

00:00:50.920 --> 00:00:55.360
an example for some of this. So take a look
at that. By the time we get to that, you'll

00:00:55.360 --> 00:00:58.579
have had plenty of time to download it. So,
if you start downloading it now, you should

00:00:58.579 --> 00:01:06.311
be set. So first we're going to talk a little
bit about the context. We're going to spend

00:01:06.311 --> 00:01:11.299
some time talking about Honeycomb and the
visual design of Honeycomb, which we're code

00:01:11.299 --> 00:01:15.470
naming Holograph. And then we're going to
talk about the tablet UI patterns. And, again,

00:01:15.470 --> 00:01:19.720
then spend time using the Google I/O app as
an example for that.

00:01:19.720 --> 00:01:31.350
So first, though, some context. What were
our design goals for Honeycomb?

00:01:31.350 --> 00:01:35.900
On any given project you always have way more
that you want to do than you possibly have

00:01:35.900 --> 00:01:40.229
time to do. So it's very important to decide
which part of the pie you're going to bite

00:01:40.229 --> 00:01:44.930
off. So we decided to do three things at three
different scales starting from the very big

00:01:44.930 --> 00:01:49.720
and ambitious down to the more tactical. And
that first most ambitious goal was to actually

00:01:49.720 --> 00:01:54.170
advance the state of computing.
Mobile computing, in specific, but computing

00:01:54.170 --> 00:01:58.900
in general. Now, thankfully, we've come a
way since this picture was taken. But there

00:01:58.900 --> 00:02:04.800
still is a lot to do in terms of advancing
how we use computers. And that focus resulted

00:02:04.800 --> 00:02:09.849
in some of the system level changes that you
guys can take advantage of with Honeycomb.

00:02:09.849 --> 00:02:15.760
Specifically, things like the visible tangible
recent task switching, which we just recently

00:02:15.760 --> 00:02:22.200
made scrollable and more interactive in the
3.1 update yesterday. That also resulted in

00:02:22.200 --> 00:02:31.370
things like the actionable more customizable
notification system. So that was the big goal.

00:02:31.370 --> 00:02:37.650
We also wanted to specifically focus on making
the best possible tablet experience.

00:02:37.650 --> 00:02:42.790
That meant not just transitioning our UIs
that had worked on phones and making them

00:02:42.790 --> 00:02:47.160
bigger and just making sure that they worked,
but really optimizing them for phones. So

00:02:47.160 --> 00:02:50.050
that, actually, leads to one of the things
that we're going to talk about a little later

00:02:50.050 --> 00:02:55.370
today. The way that we allow to you have multiple
column and multiple fragment-type layouts

00:02:55.370 --> 00:02:59.690
in your applications and how you make choices
about when it's appropriate to use what number

00:02:59.690 --> 00:03:04.080
of columns and how you transition the columns
in those states between portraits and landscapes

00:03:04.080 --> 00:03:09.989
and how you position them in your tablet apps.
The Third goal was the blocking and tackling.

00:03:09.989 --> 00:03:15.510
Really spending time making sure we move the
ball forward on improving the basic usability

00:03:15.510 --> 00:03:21.989
of Android. There's a lot of ground for improving
the usability of any platform of any project.

00:03:21.989 --> 00:03:29.140
So we focused on a couple of the biggest most
painful points, the discovery problem people

00:03:29.140 --> 00:03:34.209
have in many applications where they don't
understand what all the possible actions are;

00:03:34.209 --> 00:03:38.970
the out of sight, out of mind problem that's
created with the menu button and hiding options

00:03:38.970 --> 00:03:44.459
under the menu button; and a lot of the confusion
or complication that resulted from navigation

00:03:44.459 --> 00:03:48.810
and the difference between navigating back
through the system back stack and navigating

00:03:48.810 --> 00:03:53.850
up inside applications themselves.
So these guys are going to talk in more detail

00:03:53.850 --> 00:03:58.110
about how we actually accomplished those three
goals. But the most important thing I want

00:03:58.110 --> 00:04:01.710
you to keep in mind, as you're looking at
all this, is this really is just the beginning

00:04:01.710 --> 00:04:08.379
of the journey for us. This is the first of
many, many steps for Android. It's always

00:04:08.379 --> 00:04:15.690
an ongoing evolution. And with Honeycomb,
you can see that commitment that we've got

00:04:15.690 --> 00:04:21.719
towards making interfaces more tactile, more
flexible, more immersive, start to come to

00:04:21.719 --> 00:04:25.259
life and it's just something that's going
to accelerate more and more. And I wish I

00:04:25.259 --> 00:04:28.539
could tell you about how we're going to do
it in Ice Cream Sandwich. I'm sure a lot of

00:04:28.539 --> 00:04:30.370
you want to ask questions about how we're
going to do it in Ice Cream Sandwich. But

00:04:30.370 --> 00:04:35.610
you're just going to have to stay tuned for
that. So, with that, I'd like to invite Christian

00:04:35.610 --> 00:04:39.680
Robertson up, who is going to talk about the
visual design of Honeycomb.

00:04:39.680 --> 00:04:46.919
&gt;&gt;Christian Robertson: All right. So you might
have noticed that the visuals for Honeycomb

00:04:46.919 --> 00:04:54.610
have changed a little bit from what they were
like in Gingerbread. And Matias was talking

00:04:54.610 --> 00:04:58.110
about some of these overarching goals. When
we were thinking about the visuals, one of

00:04:58.110 --> 00:05:04.940
the things we wanted to do is make a UI that
would make the user feel powerful. It's not

00:05:04.940 --> 00:05:09.300
enough just to make a device where it looks
like it would do a lot and the device is powerful.

00:05:09.300 --> 00:05:15.979
The user needs to feel enabled and in control.
This kind of power and control requires UIs

00:05:15.979 --> 00:05:21.930
that can be dynamic and can change base on
users's needs and expectations. We realized

00:05:21.930 --> 00:05:28.039
that to do this, that we would need a visual
language that would move beyond static screens

00:05:28.039 --> 00:05:34.719
that were made out of Photoshopped plastic
or metal or leather.

00:05:34.719 --> 00:05:41.139
So, as we were looking for inspiration, we
were inspired by the immediacy of heads-up

00:05:41.139 --> 00:05:49.550
displays in game UIs. We were inspired by
the Hollywood holographic UIs that wrap around

00:05:49.550 --> 00:05:55.360
their users and seem to react instantly to
their every intent.

00:05:55.360 --> 00:06:01.679
And one of the characteristics that we realized
these UIs had is they were essentially digital.

00:06:01.679 --> 00:06:07.770
We wanted to create a language that really
utilized the flexibility of the screen. In

00:06:07.770 --> 00:06:11.569
fact, as we were designing, we joked that
the metaphor for our screens was that they

00:06:11.569 --> 00:06:23.520
were screens.
So some of our more specific goals: We wanted

00:06:23.520 --> 00:06:30.770
to enable these flexible dynamic UIs. And
we also wanted to simplify, open up the design

00:06:30.770 --> 00:06:37.949
and enable extensibility so that any new visual
language we made would allow for applications

00:06:37.949 --> 00:06:41.610
to represent their own brands in a strong
and powerful way.

00:06:41.610 --> 00:06:53.169
So I wanted to show a couple of the drawings
that led to the final design that shipped.

00:06:53.169 --> 00:07:02.309
As you can see here, the music carousel as
the albums are loading in, before the album

00:07:02.309 --> 00:07:08.919
art loads, you can see a hint of the wire
frame behind it. Or in the case of a list

00:07:08.919 --> 00:07:14.259
where users try to scroll beyond where the
list allows, the energy of the scroll has

00:07:14.259 --> 00:07:21.009
dissipated and escapes as light. And you might
have recognized this as something we snuck

00:07:21.009 --> 00:07:29.389
into the Gingerbread release. But the idea
is that we use physical and spatial and tactile

00:07:29.389 --> 00:07:34.979
cues. But, at the edges and underneath, we
give users a hint that this thing is created

00:07:34.979 --> 00:07:44.209
digitally. And we prepare them for more advanced
kind of -- we use the term "techno magical"

00:07:44.209 --> 00:07:51.059
things to happen. So one example of this is
with the multi-tasking UI. You can see that,

00:07:51.059 --> 00:07:56.309
on the edges of the screen shots you have
a hint that these things are created digitally.

00:07:56.309 --> 00:08:00.800
And this gives the user a cue and helps him
understand that they're going to be able to

00:08:00.800 --> 00:08:07.870
very quickly switch contexts and understand
how the screen is going to redraw.

00:08:07.870 --> 00:08:13.449
But it's not enough just to create UIs that
are quick and responsive. It's important that

00:08:13.449 --> 00:08:18.819
users understand where they are and what's
happening so that they feel like they're in

00:08:18.819 --> 00:08:22.099
control of the device and not the other way
around.

00:08:22.099 --> 00:08:33.149
So, in the case of the home screen editor
UI, when a user picks up a widget and drags

00:08:33.149 --> 00:08:39.190
it onto the home screen, the home screen expands.
And an echo of that widget is projected onto

00:08:39.190 --> 00:08:46.740
a grid that is visible as you scroll around.
So this kind of heads-up immediate transformative

00:08:46.740 --> 00:08:52.060
UI enables us to have this kind of flexibility.
And, like Matias says, this is just the beginning.

00:08:52.060 --> 00:09:02.519
We want to bring more of this.
So, in another example, even in cases where

00:09:02.519 --> 00:09:09.360
these holograms, if you will, are resolved
into full 3D objects that are opaque and cast

00:09:09.360 --> 00:09:13.680
shadow, even here we give the user a hint
that they're in a virtual space by how the

00:09:13.680 --> 00:09:18.550
books are hovering over this implied floor.
It tells users that they can expect a list

00:09:18.550 --> 00:09:26.779
of books that goes on. They're not going to
run out of space on their bookshelf.

00:09:26.779 --> 00:09:36.110
Okay. So, as we look to have more flexibility,
we realize that UI that changes with user

00:09:36.110 --> 00:09:40.339
needs can also become more simple and more
open.

00:09:40.339 --> 00:09:50.149
So this is a sheet that shows the UI elements
that make up the light theme, the hollowed-out

00:09:50.149 --> 00:09:56.830
light theme. And you can see that we've pushed
to simplify elements. We want to solve more

00:09:56.830 --> 00:10:05.570
design problems with space and with typography
and not necessarily have to draw a plastic

00:10:05.570 --> 00:10:11.149
box around every element.
So here's an example of how it starts to play

00:10:11.149 --> 00:10:19.769
out. If you notice the compose screen from
Gingerbread on the left, the purpose of the

00:10:19.769 --> 00:10:25.910
screen is absolutely clear to the user. We
felt like the number of boxes that -- or number

00:10:25.910 --> 00:10:31.459
of containers that showed up on the screen
added some unnecessary complexity. So on the

00:10:31.459 --> 00:10:40.019
right you'll see the Holo theme and how they're
represented. You see even the text boxes aren't

00:10:40.019 --> 00:10:48.490
boxes. It opens up the design and makes for
an approachable and easy-to-understand interface.

00:10:48.490 --> 00:10:53.600
And you'll notice in the composed space, we
don't even have a box. We just left a big

00:10:53.600 --> 00:10:58.970
open space to invite people to write their
mails.

00:10:58.970 --> 00:11:06.319
Even on list elements, as we expanded them
out to the tablet, we looked to keep the design

00:11:06.319 --> 00:11:12.900
open. The divider lines start to become more
like typographic rules than bounding boxes

00:11:12.900 --> 00:11:20.379
that make list elements into tiles.
And, as we started to remove some of the kind

00:11:20.379 --> 00:11:26.920
of the structural boxes that surrounded things,
we realized that the spacing and the grid

00:11:26.920 --> 00:11:33.370
and the metrics became more important than
ever. The design of the holo theme is based

00:11:33.370 --> 00:11:40.889
on a 16-dip baseline grid, which -- baseline
grids are something that graphic designers

00:11:40.889 --> 00:11:48.259
and typographers like to nerd out on. But
it really does make a big difference in creating

00:11:48.259 --> 00:11:54.459
a screen that's ordered and that has strong
hierarchies and is easy to understand.

00:11:54.459 --> 00:12:03.019
You can see here this is the subcolumn grid
that we use to lay out the interfaces. And

00:12:03.019 --> 00:12:09.220
you'll notice, as you start to build with
these underlying structures, that you'll need

00:12:09.220 --> 00:12:16.190
less and less of the boxes that show up on
top of the UI.

00:12:16.190 --> 00:12:23.930
And then, lastly, we really wanted to create
a UI that could get out of the way and let

00:12:23.930 --> 00:12:34.820
application brands really shine through. And,
as we're starting to do this, a few of the

00:12:34.820 --> 00:12:41.009
tips that I want to talk about, the first
thing you'll need to do is choose the light

00:12:41.009 --> 00:12:48.779
or dark theme that holo elements are optimized
for light or dark backgrounds now. And consider,

00:12:48.779 --> 00:12:57.220
as an easy first step, to switch out some
of the primary colors for the UI elements.

00:12:57.220 --> 00:13:01.300
And then one new thing in the holo UI also,
we have background images on the screens.

00:13:01.300 --> 00:13:06.699
You have to be careful to not put too much
complexity out there where it conflicts with

00:13:06.699 --> 00:13:15.079
your content. But very quickly you can express
your brand with the application through those

00:13:15.079 --> 00:13:21.399
backgrounds. As you're overriding those themes,
make sure that, for each element you use,

00:13:21.399 --> 00:13:28.190
you override each state. It's easy for some
of those extra states to sneak through. And

00:13:28.190 --> 00:13:31.790
then, as you're opening up the design and
removing the boxes, again, the spacing and

00:13:31.790 --> 00:13:40.259
metrics really matter. One place where this
shows up when you're porting phone apps to

00:13:40.259 --> 00:13:47.300
tablets, you'll notice that on phones a lot
of times we'll fill things to parent. And

00:13:47.300 --> 00:13:52.670
then, on a 10-inch tablet screen, those line
lengths can be way too long. The buttons can

00:13:52.670 --> 00:14:00.189
get way too wide. So pay attention to that.
And then, lastly, as you're looking to promote

00:14:00.189 --> 00:14:09.800
the brand of your product in the marketplace,
we've given some new and better opportunities

00:14:09.800 --> 00:14:16.410
for applications to show the visuals of their
brand through a larger high-res market icon

00:14:16.410 --> 00:14:23.309
512 by 512. And, if you think about your users
scrolling through the app marketplace and

00:14:23.309 --> 00:14:28.820
thinking about the things that they're using
to decide whether or not your app is a high-quality

00:14:28.820 --> 00:14:34.199
app, turns out that the quality of their rendering
and the execution of your icon is a really

00:14:34.199 --> 00:14:39.639
strong signal that people use to determine
whether your application will be a quality

00:14:39.639 --> 00:14:46.569
application. So there's an opportunity there.
And also we've also introduced new future

00:14:46.569 --> 00:14:51.170
banner graphics and promotional graphics,
again, to let people see what your application

00:14:51.170 --> 00:14:56.639
is and your brand is about.
So, with that, I'm going to hand the time

00:14:56.639 --> 00:15:01.439
over to Rich and Adam who are going to talk
about some of the UI patterns and framework

00:15:01.439 --> 00:15:08.060
features of Honeycomb.
[ Applause ]

00:15:08.060 --> 00:15:15.600
&gt;&gt;Richard Fulcher: I'm Rich Fulcher. I'm one
of the interactive designers on Android.

00:15:15.600 --> 00:15:20.790
&gt;&gt;Adam Powell: I'm Adam Powell. I'm a framework
engineer. I work to make some of this a reality.

00:15:20.790 --> 00:15:29.040
&gt;&gt;Rich Fulcher: So we're going to look at
a few UI patterns today. Just for those of

00:15:29.040 --> 00:15:34.290
you who missed the talk last year or just
aren't familiar, a UI pattern is very much

00:15:34.290 --> 00:15:39.639
like a software design pattern. It's generally
similar to a recuring problem. It's not necessarily

00:15:39.639 --> 00:15:44.540
the perfect one, not always even appropriate.
But it's generally a good way of going about

00:15:44.540 --> 00:15:50.269
solving the problems that we hit repeatedly.
These are, in general, framework supported.

00:15:50.269 --> 00:15:56.041
And we'll be talking about that as we go.
And also they're not restrictions. These are

00:15:56.041 --> 00:16:00.540
just guidelines. These are practice that we
can follow that we found to be successful.

00:16:00.540 --> 00:16:06.180
We'll talk about four different topics today.
We'll start with the Action Bar, move on to

00:16:06.180 --> 00:16:12.430
some tips for multi-pane layouts. We'll talk
about app navigation. And then we'll close

00:16:12.430 --> 00:16:17.050
with a little bit of discussion of how we
go beyond simple lists.

00:16:17.050 --> 00:16:23.079
So, first up, the Action Bar. So this isn't
a new pattern. If you were here last year,

00:16:23.079 --> 00:16:28.290
we talked about action bars. And I said go
make merry, make lots of action bars. And

00:16:28.290 --> 00:16:35.230
you did. Thank you. If you look around in
the market, you see lots of apps. We haven't

00:16:35.230 --> 00:16:39.949
gone idle either. So we've been working on
this pattern a lot, as, hopefully, you can

00:16:39.949 --> 00:16:44.480
see in Honeycomb. You can see the trajectory
behind where we were last year and where we

00:16:44.480 --> 00:16:50.000
are now. And we added some new features and
new capabilities into the action bar. But,

00:16:50.000 --> 00:16:55.730
just a quick reminder, the action bar is reserved
real estate at the top of the screen. It's

00:16:55.730 --> 00:17:00.750
used for navigation and for indicating the
view that the user is looking at. And, most

00:17:00.750 --> 00:17:05.860
importantly, it's used for presenting the
most frequently used actions to the user so

00:17:05.860 --> 00:17:09.110
they don't have to go into the menu structure
to get to those. It's also a convenient way

00:17:09.110 --> 00:17:14.959
to get to the menu to search when you have
devices that lack those physical hard keys.

00:17:14.959 --> 00:17:24.610
So, in general, the action bar has three sections
as we've done it in Honeycomb. So, on the

00:17:24.610 --> 00:17:30.390
far left, you've got your app icon. In the
middle, you've got your view details, which

00:17:30.390 --> 00:17:35.370
also has a navigation component to it. And
on the right-hand side you have the collection

00:17:35.370 --> 00:17:40.250
of action buttons. One way to think of it
is, from the users perspective, the first

00:17:40.250 --> 00:17:44.539
is where am I?
The middle section is well, what can I see?

00:17:44.539 --> 00:17:52.290
And the last is what can I do here?
So, starting on the left, the app icon doesn't

00:17:52.290 --> 00:17:58.320
have to be your apps icon. Could also be a
logo, other branding. It's mainly here to

00:17:58.320 --> 00:18:02.330
give the user a sense of place. We also use
it for navigation. But we'll talk a little

00:18:02.330 --> 00:18:09.180
bit more about that later.
As you move to the right, the middle section

00:18:09.180 --> 00:18:12.450
is the view details.
This can be very simple. This could just be

00:18:12.450 --> 00:18:17.220
a title as you're using some title bars in
Android today. But you can put more interactive

00:18:17.220 --> 00:18:24.060
elements into it as well. You can put in tabs
or drop-downs, Breadcrumbs, things like that.

00:18:24.060 --> 00:18:29.149
And then, finally, at the right you have the
actions themselves. Again, these are the most

00:18:29.149 --> 00:18:33.120
important, most frequently used actions you
want to collect here. You can present them

00:18:33.120 --> 00:18:41.990
as text, as icons, as text and icons, your
choice. Also we have an overflow menu here.

00:18:41.990 --> 00:18:46.029
You can present your most frequently used
actions in the bar, less frequently used actions

00:18:46.029 --> 00:18:51.929
can just be demoted into overflow menu. That's
things like settings and help that we don't

00:18:51.929 --> 00:18:57.860
think a user wants to get to all the time.
But we want to have in a consistent location

00:18:57.860 --> 00:19:04.510
across different applications. We also support
the action bar transforming into a contextual

00:19:04.510 --> 00:19:10.140
mode. Once the user makes a selection on the
screen, you can change the Action Bar so that

00:19:10.140 --> 00:19:15.130
it is more tightly tied to the selection as
opposed to just the entire screen. It still

00:19:15.130 --> 00:19:19.880
has three sections. You still have an I'm
done, I'd like to leave it on the left; a

00:19:19.880 --> 00:19:25.070
set of view details in the middle; and on
the far right-hand side a set of actions you

00:19:25.070 --> 00:19:28.440
can take with them. How do we implement this?
Action mode.

00:19:28.440 --> 00:19:34.470
&gt;&gt;Adam Powell: We have a few implementation
details for this talk. So the action -- whoops,

00:19:34.470 --> 00:19:42.220
want to be still on this page for a minute.
So, as we take a look at the problem that

00:19:42.220 --> 00:19:47.690
the contextual Action Bar solves here, most
of the developers and users are familiar with

00:19:47.690 --> 00:19:52.220
the idea that you can touch and hold on a
particular element to get a context menu.

00:19:52.220 --> 00:19:57.710
There's kind of a problem with context menus
as soon as you have more content on a screen.

00:19:57.710 --> 00:20:02.810
Often times you'll want to interact with several
pieces of that content at once. A context

00:20:02.810 --> 00:20:08.250
menu you have to make a choice or get out.
You have to take the action right away. What

00:20:08.250 --> 00:20:12.720
the action modes let you do is you can start
an action mode from any view, similar to the

00:20:12.720 --> 00:20:18.890
way that you can show your context menu from
any given view. This lets you, like Rich said,

00:20:18.890 --> 00:20:24.149
sort of flip the Action Bar over and offer
a series of actions that the user can take

00:20:24.149 --> 00:20:28.500
on your content. This is really handy for
things like text selection, multiple selection.

00:20:28.500 --> 00:20:33.260
Anything where you might want to sort of revise
your context in flight once you know what

00:20:33.260 --> 00:20:38.090
you're able to do with it.
But this is also part of just the standard

00:20:38.090 --> 00:20:40.570
action bar, and this is one of the things
that the new action bar APIs in Honeycomb

00:20:40.570 --> 00:20:48.289
can do. So in general, an action bar is not
particularly difficult to create in an application

00:20:48.289 --> 00:20:51.980
before Honeycomb, either. Stick a layout at
the top of your activity, stick some buttons

00:20:51.980 --> 00:20:56.230
there. What's hard about this? Why do we need
a separate API for this? Not only can we do

00:20:56.230 --> 00:21:00.980
things like the action modes that let it do
double duty, but we also have the ability

00:21:00.980 --> 00:21:07.190
to offer some consistency, offer an implementation
of some of these common design paradigms.

00:21:07.190 --> 00:21:11.630
So to get a basic action bar, you can use
either of the default holo themes offered

00:21:11.630 --> 00:21:16.900
in Honeycomb, theme.holo or theme.holo lite.
If your target SDK version as declared in

00:21:16.900 --> 00:21:21.799
your manifest is 11 or above, then theme.holo
is your default theme.

00:21:21.799 --> 00:21:26.130
The action items themselves over on the right
side of the bar actually come from your options

00:21:26.130 --> 00:21:30.280
menu. So the implementation details of this
end up being pretty much identical to what

00:21:30.280 --> 00:21:34.559
you're used to when you are populating your
options menu panel on previous versions of

00:21:34.559 --> 00:21:37.630
Android.
So for customizing the action bar, you can

00:21:37.630 --> 00:21:42.450
obtain an instance of the action bar object
from your activity, call various methods on

00:21:42.450 --> 00:21:48.419
it, place custom views into it, edit the menu,
invalidate as necessary, so on and so forth.

00:21:48.419 --> 00:21:53.060
And we also offer some customization in terms
of how you want to show each menu item as

00:21:53.060 --> 00:22:01.120
an action as you populate your menus.
So again, it's not too difficult to write

00:22:01.120 --> 00:22:06.820
a custom action bar implementation before
Honeycomb, and the Google I/O app actually

00:22:06.820 --> 00:22:10.860
shows an interesting way of doing this that
still takes advantage of the options menu

00:22:10.860 --> 00:22:16.169
items that you may already have available.
So alternatively, you can still continue using

00:22:16.169 --> 00:22:19.410
the default options menu on previous versions
of the platform. It's something that users

00:22:19.410 --> 00:22:25.779
are already familiar with using.
So more reasons about why to use the new action

00:22:25.779 --> 00:22:30.529
bar APIs versus just rolling your own. Once
we start moving down to phones and smaller

00:22:30.529 --> 00:22:34.600
screens again, some of these patterns start
to break down a little bit. Suddenly you want

00:22:34.600 --> 00:22:38.649
to start swapping out elements for a little
bit more space conservative variance. You

00:22:38.649 --> 00:22:43.350
might want to reduce icon plus text into just
the icon alone, even if it may not be quite

00:22:43.350 --> 00:22:48.600
as descriptive as you may like when you have
more room available to you. And the overflow

00:22:48.600 --> 00:22:53.919
icon may no longer be appropriate if you have
a physical menu key still on the device.

00:22:53.919 --> 00:22:57.820
So what can you do about this? You can also
split a single bar into two.

00:22:57.820 --> 00:23:05.899
&gt;&gt;Rich Fulcher: Yeah, a good approach to this
is, especially in portrait on a phone device.

00:23:05.899 --> 00:23:10.159
The amount of real estate you have becomes
highly constrained very, very quickly. So

00:23:10.159 --> 00:23:13.419
if you are trying to do something like tabs
is a great example, if you look at the I/O

00:23:13.419 --> 00:23:20.610
app. I'll actually just skip to that slide.
There's three different strategies at play

00:23:20.610 --> 00:23:25.710
here. Adam already mentioned a couple of them.
Take something like that new action and reduce

00:23:25.710 --> 00:23:30.580
it just to an icon. Move other actions that
were in the overflow menu into the menu hard

00:23:30.580 --> 00:23:36.549
key. And then finally, take the bar itself
and split it across two lines, actions at

00:23:36.549 --> 00:23:41.149
the top and view details below that. Or you
could split it up the other way as well. You

00:23:41.149 --> 00:23:43.960
could have view details the top and just put
actions at the bottom of the screen.

00:23:43.960 --> 00:23:47.019
&gt;&gt;Adam Powell: And even then, we are still
maintaining a little bit of the same patterns

00:23:47.019 --> 00:23:52.370
that you described before, where we try to
separate out the idea of the anchoring and

00:23:52.370 --> 00:23:56.530
navigation component which we're showing at
the top of the phone UI in this case, from

00:23:56.530 --> 00:24:03.429
the actions which still appear at the bottom
of the screen in the form of the options menu.

00:24:03.429 --> 00:24:09.481
&gt;&gt;Rich Fulcher: Okay. Our next pattern is
multi-pane layouts. I'm sure, as you have

00:24:09.481 --> 00:24:13.059
been playing with your tablets, you have been
appreciating all the real estate you have

00:24:13.059 --> 00:24:17.690
compared to older Android devices. We do,
too. As designers So we want to pack more

00:24:17.690 --> 00:24:22.980
and more content into every stream. One way
we have approached that is for certain spaces

00:24:22.980 --> 00:24:27.950
we put in the multiple view panes within a
single screen. It gives the user a little

00:24:27.950 --> 00:24:32.120
bit more context for what they are operating
on. It can divide up the space and it avoids

00:24:32.120 --> 00:24:36.970
some of the very long line widths that you
can sometimes run into. You don't want a button

00:24:36.970 --> 00:24:42.870
that spans the entire width of a tablet device.
In general, we kind of rely on the notion

00:24:42.870 --> 00:24:48.100
that as the user kind of reads from left to
right across the screen, the details kind

00:24:48.100 --> 00:24:54.169
of get more specific. If I am seeing a list,
it then leads to details for an item.

00:24:54.169 --> 00:25:01.810
One of the trickiers parts of using multi-pane
layout is when you get into changing the device's

00:25:01.810 --> 00:25:08.330
orientation. So we have one rule we want you
to adhere to and then a couple of strategies

00:25:08.330 --> 00:25:12.760
for how to deal with that.
The rule is that we want to preserve functional

00:25:12.760 --> 00:25:18.330
parity between the two orientations, meaning
if the user is in one view, they should be

00:25:18.330 --> 00:25:22.010
able to achieve all of the same actions that
they can in the other.

00:25:22.010 --> 00:25:26.520
We never want the user to have to reorient
the device to kind of stay and complete the

00:25:26.520 --> 00:25:30.990
tasks that they are trying to achieve.
So we've developed a few strategies that help

00:25:30.990 --> 00:25:34.480
you get at this. And these strategies are
really just kind of on a screen-by-screen

00:25:34.480 --> 00:25:40.090
basis. The same application can use a number
of these strategies, depending on the context

00:25:40.090 --> 00:25:43.380
it's depicting.
And, happily, even the Google Apps that you'll

00:25:43.380 --> 00:25:47.390
see cover these strategies. So we have good
examples of each of them. We tried to kind

00:25:47.390 --> 00:25:54.200
of go broad in the apps that we were creating.
So the simplest strategy is stretch. And if

00:25:54.200 --> 00:25:57.820
I've got two columns, one of them just gets
smaller and smaller and smaller.

00:25:57.820 --> 00:26:01.389
If you look at settings, that's how we deal
with that. You have a left-hand list which

00:26:01.389 --> 00:26:06.280
enumerates all of the settings on the device.
And that shrinks as we go into portrait.

00:26:06.280 --> 00:26:11.040
The second is that you can kind of stack or
rearrange the panes within the view. We use

00:26:11.040 --> 00:26:15.210
this pretty nicely, I think, in calendar,
where you have a major pane that is your day

00:26:15.210 --> 00:26:20.539
or your week or your month view. And then
supporting panes when you rotate the device.

00:26:20.539 --> 00:26:24.860
We just kind of keep those panes -- those
panes contain their own identities and they

00:26:24.860 --> 00:26:29.350
just kind of shift around within the screen.
The last two strategies are, actually, closely

00:26:29.350 --> 00:26:32.740
related.
Now, we call them expand/collapse, which is

00:26:32.740 --> 00:26:37.210
one that we use in Google Talk.
There, you have a friends list on the left

00:26:37.210 --> 00:26:42.670
and then an active chat on the right. And
as the device orients, the friends list, instead

00:26:42.670 --> 00:26:47.410
of having name and icon, just kind of reduces
in size so it's just showing the icons of

00:26:47.410 --> 00:26:51.620
the different people in your friends list.
You can still expand it back by pressing and

00:26:51.620 --> 00:26:52.830
bringing it back to its kind of original landscape
width.

00:26:52.830 --> 00:26:59.299
A variant of that is what we do in GMail when
you're reading a conversation in you're in

00:26:59.299 --> 00:27:04.260
portrait view, is that we kind of tuck away
the list of conversations and it slides off

00:27:04.260 --> 00:27:08.779
the screen to the left.
But we give the user using up and back a way

00:27:08.779 --> 00:27:14.690
to kind of bring that back on and select a
different conversation or select multiple

00:27:14.690 --> 00:27:18.649
conversations.
&gt;&gt;Adam Powell: All right. So how would you

00:27:18.649 --> 00:27:23.630
go about implementing some of this?
If you watched the talk about sort of an intro

00:27:23.630 --> 00:27:27.889
to Honeycomb yesterday, you've already heard
about the fragment class and what it's able

00:27:27.889 --> 00:27:32.809
to do as part of the new Honeycomb API.
If you've watched the Android developer blogs,

00:27:32.809 --> 00:27:37.690
you've seen this before as well.
So the two entry points to this new API are

00:27:37.690 --> 00:27:42.620
going to be the fragment class itself and
optionally, the fragment tag in your layout

00:27:42.620 --> 00:27:46.870
XML. They can actually have presence within
your layouts.

00:27:46.870 --> 00:27:52.620
So a really quick intro to fragments in general.
They're fragments of an activity. That's the

00:27:52.620 --> 00:27:58.610
best way to think of them. It's a way to split
up the idea of an activity into multiple components.

00:27:58.610 --> 00:28:02.889
And as a result of that, they become a unit
of reuse between activities.

00:28:02.889 --> 00:28:08.110
The same fragment can have a presence in multiple
activities across your app. So depending on

00:28:08.110 --> 00:28:12.799
what makes sense for your app in terms of
how you want to display your content on a

00:28:12.799 --> 00:28:16.799
phone versus on a tablet, then you may arrange
those fragments a bit differently.

00:28:16.799 --> 00:28:23.220
It also helps with just general separation
of concerns. This is not a new software engineering

00:28:23.220 --> 00:28:26.809
principle at all at this point.
But it -- how many of you have ever written

00:28:26.809 --> 00:28:31.440
just an oncreate method that has to wire up
a whole bunch of different pieces of your

00:28:31.440 --> 00:28:35.850
UI, and it just starts getting very, very
large as your UI gets more complex?

00:28:35.850 --> 00:28:41.150
This lets you sort of separate out a bunch
of those pieces into a little bit more manageable

00:28:41.150 --> 00:28:44.490
component.
But fragments also don't necessarily have

00:28:44.490 --> 00:28:48.919
views. They're a life cycle construct, not
necessarily a visual construct.

00:28:48.919 --> 00:28:54.250
Like an activity, a fragment gets a number
of life cycle call backs for creation when

00:28:54.250 --> 00:28:59.639
it gets attached to an activity and on general
destruction as well. And they can also save

00:28:59.639 --> 00:29:05.279
state in between orientation changes similar
to the way that activities do.

00:29:05.279 --> 00:29:07.970
But this is a talk about UI, so we're going
to go ahead and try to stay a little bit more

00:29:07.970 --> 00:29:12.669
focused on that. As Rich already knows, I
can talk about fragments for a really long

00:29:12.669 --> 00:29:17.289
time.
So for compatibility, I mean, obviously, we

00:29:17.289 --> 00:29:21.460
haven't shipped any phones running Honeycomb
right now, so a Honeycomb-only API doesn't

00:29:21.460 --> 00:29:25.170
do developers a whole lot of good if we're
really presenting this as a way of dealing

00:29:25.170 --> 00:29:30.770
with these vastly differing device configurations.
So we have the fragment support library that's

00:29:30.770 --> 00:29:35.309
available, free, open source, go ahead and
download it, use it. This will work all the

00:29:35.309 --> 00:29:39.899
way back to Android 1.6. That's Donut. So
it covers pretty much everything that's still

00:29:39.899 --> 00:29:45.210
live and active in the market right now.
So all activities extend fragment activity

00:29:45.210 --> 00:29:49.800
when you're using this. You can get the support
fragment manager. Most of the rest of the

00:29:49.800 --> 00:29:54.480
API is pretty similar from there on.
But take a look at the link that's on the

00:29:54.480 --> 00:29:58.019
slide here if you want to know more about
that.

00:29:58.019 --> 00:30:01.190
But the interesting thing about creating some
of these multiple pane layouts that Rich is

00:30:01.190 --> 00:30:05.669
describing is that fragments are really only
one part of that story. And they're actually

00:30:05.669 --> 00:30:10.600
kind of a small part of that as well.
Most of the heavy lifting when working with

00:30:10.600 --> 00:30:14.210
these apps is actually done by the Android
resource system that's been in place for quite

00:30:14.210 --> 00:30:17.539
a while.
You've probably seen this sort of a configuration

00:30:17.539 --> 00:30:21.821
before as you write your apps.
You may lay out several directories in your

00:30:21.821 --> 00:30:27.270
resource folder for working with different
density screens. So you may have a version

00:30:27.270 --> 00:30:31.790
of a particular image for low, medium, and
high-density screens. But what you may not

00:30:31.790 --> 00:30:37.330
have seen before is that we have a whole bunch
of configuration specifiers that the resource

00:30:37.330 --> 00:30:42.120
system can pick from for you at run time.
So the resource system always tries to pick

00:30:42.120 --> 00:30:46.410
the best fit for the current configuration
that you've provided as an app developer.

00:30:46.410 --> 00:30:50.429
So in this case, as you're working with different
screen sizes, you can provide different layouts

00:30:50.429 --> 00:30:55.970
for normal, large, Xlarge, X large screens
in portrait, all across the spectrum. You

00:30:55.970 --> 00:31:03.460
choose where you decide to make these cuts.
So how does this actually work out in practice?

00:31:03.460 --> 00:31:07.080
Activities can inflate layouts with different
fragment configurations.

00:31:07.080 --> 00:31:12.690
So if you provide different layout files,
then it suddenly makes it a whole lot easier

00:31:12.690 --> 00:31:17.690
to create effects like Rich mentioned with
the stack here. So since fragments can actually

00:31:17.690 --> 00:31:26.019
have presence in layout, you write your layouts
in such a way that basically says where do

00:31:26.019 --> 00:31:29.799
these containers go on my screen? Where do
these panes show up?

00:31:29.799 --> 00:31:36.620
And this becomes your activities -- your activities
layout that you set to your view content call.

00:31:36.620 --> 00:31:42.129
In this case, this version of the layout is
placed in layout Xlarge land. So this is our

00:31:42.129 --> 00:31:47.730
layout for Xlarge screens. But with a few
really simple changes, we can create a portrait

00:31:47.730 --> 00:31:54.169
version of the same layout. Now, none of your
Java code actually changes in this case. Everything

00:31:54.169 --> 00:31:58.620
just kind of wires itself up. You get orientation
changes as long as your fragments are set

00:31:58.620 --> 00:32:03.610
up to pass their state to their new versions,
just like you would with an activity. And,

00:32:03.610 --> 00:32:08.870
suddenly, you're able to deal with very robust
orientation changes with very little work

00:32:08.870 --> 00:32:12.629
on your part.
So there are a few other handy uses of the

00:32:12.629 --> 00:32:17.690
resource system that you might want to take
advantage of as you're writing your tablet

00:32:17.690 --> 00:32:21.769
apps here as well.
So not only can fragments use layouts with

00:32:21.769 --> 00:32:27.139
different view configurations. So these are
the panes themselves. List items, you can

00:32:27.139 --> 00:32:32.549
have those individual layouts be more detailed
or compact as needed, depending on the space

00:32:32.549 --> 00:32:36.039
available.
And even very simple resources, like integer

00:32:36.039 --> 00:32:41.289
constants or Boolean constants can have different
values from one configuration to another.

00:32:41.289 --> 00:32:47.100
So if your code is dependent on a particular
configuration setting in that regard, then

00:32:47.100 --> 00:32:56.230
the resource system can actually do that selection
for you and you don't have to worry about

00:32:56.230 --> 00:32:57.450
doing those tests yourself.
Navigation.

00:32:57.450 --> 00:33:00.889
&gt;&gt;Rich Fulcher: App navigation.
This is actually one of the areas we made

00:33:00.889 --> 00:33:06.139
some really significant changes in Honeycomb.
I haven't heard as much discussion about it

00:33:06.139 --> 00:33:13.820
in the press, but it's a big area. I want
to take us into it in a little bit of detail.

00:33:13.820 --> 00:33:19.820
One of the critical changes in Honeycomb is
that we now have a much wider array of mechanisms

00:33:19.820 --> 00:33:26.370
via which the user can kind of dive deeply
directly into a lower level of an application.

00:33:26.370 --> 00:33:33.450
Some examples of that are, you have richer
notifications, where now a notification can

00:33:33.450 --> 00:33:37.809
contain a set of controls with it that can
take you do different destinations or perform

00:33:37.809 --> 00:33:41.010
other actions.
You have these rich home screen widgets which

00:33:41.010 --> 00:33:46.210
give you more of a glimpse of the app's content
and let you pick a particular piece of content

00:33:46.210 --> 00:33:50.809
and go right to that in the app. And you have
recents, as we talked about earlier.

00:33:50.809 --> 00:34:02.320
So traditionally, navigation in Android has
been based on the user's temporal memory,

00:34:02.320 --> 00:34:08.639
meaning kind of just users are good at remembering
what just happened. They're slightly less

00:34:08.639 --> 00:34:12.720
good at remembering a sequence of things that
happened shortly ago.

00:34:12.720 --> 00:34:17.410
So the -- knowing what just happened is great
for hitting back and just snapping back one

00:34:17.410 --> 00:34:23.020
step to the prior context. But it gets more
-- there's more potential for confusion, bad

00:34:23.020 --> 00:34:29.660
kind of user confusion, if the app has a longer
sequence built into it.

00:34:29.660 --> 00:34:33.330
The example I like to give for this is, if
you go to a grocery store. You go to the grocery

00:34:33.330 --> 00:34:38.380
store, you go to the produce aisle, and you
fill your cart with seven or eight things.

00:34:38.380 --> 00:34:41.540
If I were to stop you as you were exiting
that aisle and say, "What was the last thing

00:34:41.540 --> 00:34:47.170
you picked up," you can probably say, "A kumquat."
If I asked you to take the seven things in

00:34:47.170 --> 00:34:52.000
your card and order them in the reverse order
that you picked them up, that's a much heavier

00:34:52.000 --> 00:34:56.640
task, and not necessarily one -- even if you
can perform it well, it's the kind of cognitive

00:34:56.640 --> 00:35:03.300
load we don't want to impose on users.
Users are good at structural memory. They

00:35:03.300 --> 00:35:08.530
remember the relationship between different
screens within the same application. And users

00:35:08.530 --> 00:35:13.441
have a lot of strong conventions built up
from the Web context that, you know, there's

00:35:13.441 --> 00:35:17.650
a convenient way for me to get home or get
upward in the upper left of the app. And as

00:35:17.650 --> 00:35:22.860
users saw the Action bar, they started to
have that kind of expectation in testing.

00:35:22.860 --> 00:35:29.550
And it's also -- just there are clearer suggestions
of what the thing immediately above this thing

00:35:29.550 --> 00:35:32.900
will be. And the users have just a richer
model there.

00:35:32.900 --> 00:35:37.340
Back to the grocery store, you probably know
where all of the individual aisles are. You

00:35:37.340 --> 00:35:41.440
have a good sense of that. You don't have
to think about it very much.

00:35:41.440 --> 00:35:49.710
So we wanted to be able to address both of
those in Honeycomb. So in addition to the

00:35:49.710 --> 00:35:54.760
system back, which still handles the history
of moving between related screens, we've now

00:35:54.760 --> 00:35:59.580
added an application up, which we support
through the Action bar, and we just support

00:35:59.580 --> 00:36:05.290
by transforming the app icon by putting a
little left-pointing Chevron beside it. That

00:36:05.290 --> 00:36:09.530
lets the user navigate hierarchy within the
app.

00:36:09.530 --> 00:36:15.710
Sometimes those two actions will do the same
thing. Here's a quick example. If I'm in contacts

00:36:15.710 --> 00:36:20.510
and I'm looking at the list of all contacts
and then I select one particular contact to

00:36:20.510 --> 00:36:25.350
see their details, well, in this case, if
I hit back, that just takes me back to the

00:36:25.350 --> 00:36:33.250
list of all contacts. If I had hit up, it
would do the same thing. But that's not always

00:36:33.250 --> 00:36:35.760
true.
Let's take the example in a slightly different

00:36:35.760 --> 00:36:39.930
path.
Now I am starting contacts. I go see a detail

00:36:39.930 --> 00:36:45.450
for a particular contact. And then now I'm
going to choose to e-mail that contact. So

00:36:45.450 --> 00:36:50.580
I hit on their e-mail address and I launch
into GMail. Now we actually see distinct behaviors

00:36:50.580 --> 00:36:54.850
between back and up.
Back would just walk me back to the contact

00:36:54.850 --> 00:37:01.490
details. But up from compose would say, "You
know what, I want to stay within GMail, and

00:37:01.490 --> 00:37:11.860
I want to navigate here."
So what do we want you to do in the apps that

00:37:11.860 --> 00:37:15.620
you're building?
The first one is pretty straightforward. Support

00:37:15.620 --> 00:37:22.770
up. If you're going to use an Action bar,
use that left spot to have an up affordance.

00:37:22.770 --> 00:37:29.310
The second is, if you have deep system links
in your app, just do a little bit of work

00:37:29.310 --> 00:37:33.270
to make sure that the back behavior is -- matches
the user's expectation.

00:37:33.270 --> 00:37:37.580
So if you're kind of deeply diving into an
application from a widget, it makes sense

00:37:37.580 --> 00:37:42.430
to have back also walk up through the application.
&gt;&gt;Adam Powell: There's a new API for this

00:37:42.430 --> 00:37:46.590
in Honeycomb. You're familiar with just the
general start activity call that you can make

00:37:46.590 --> 00:37:50.750
that just takes an intent object. There's
a new start activities call that takes an

00:37:50.750 --> 00:37:57.750
array of intents so that you can actually
construct an entire task stack as you begin.

00:37:57.750 --> 00:38:03.790
&gt;&gt;Rich Fulcher: The last pattern we want to
cover quickly is kind of going beyond simple

00:38:03.790 --> 00:38:07.150
lists.
So you've noticed in all the Honeycomb examples

00:38:07.150 --> 00:38:10.753
that Christian showed earlier.
You have all these different views that you

00:38:10.753 --> 00:38:17.370
can support for these media-rich applications.
We want to make it more -- want to encourage

00:38:17.370 --> 00:38:22.420
users to just browse through the content and
explore a little bit more freely.

00:38:22.420 --> 00:38:28.260
And also, just going beyond simple lists lets
you break up the monotony of simple list views,

00:38:28.260 --> 00:38:32.310
that you can create these hero moments within
your application. You know, that would be

00:38:32.310 --> 00:38:39.110
a great screen shot to put in the market to
demonstrate what your app can do.

00:38:39.110 --> 00:38:42.650
So we have a lot of different flavors of this
in Honeycomb.

00:38:42.650 --> 00:38:48.150
If you look at the books app, you know, it's
about showing just a handful of titles in

00:38:48.150 --> 00:38:52.890
kind of rich detail. You know, I don't need
to see a ton of different books. Just focusing

00:38:52.890 --> 00:38:56.450
on the last few that I've been reading covers
a lot of use cases.

00:38:56.450 --> 00:39:01.160
YouTube goes the other direction completely
and says we're going to show you this vast

00:39:01.160 --> 00:39:05.660
sea of content that exists out there. We're
going to go wall to wall with video screens,

00:39:05.660 --> 00:39:09.580
and they're going to wrap around. You can
kind of even imagine that they go around behind

00:39:09.580 --> 00:39:15.950
you if the tablet were just a little bit wider.
We take kind of a -- an in between approach

00:39:15.950 --> 00:39:21.230
in the market where we have a promotional
area that has this rich kind of exploratory

00:39:21.230 --> 00:39:26.500
component as in the pane at the top. But we
also have more traditional elements on the

00:39:26.500 --> 00:39:31.710
screen as well.
&gt;&gt;Adam Powell: So implementation of some of

00:39:31.710 --> 00:39:36.510
these things. There's not a whole lot of specific
guidance that I can give for this, because

00:39:36.510 --> 00:39:41.950
as Rich said, as soon as you start doing the
same thing in many places here, then it kind

00:39:41.950 --> 00:39:47.690
of dilutes the experience of some of it.
So this is where we say be really creative.

00:39:47.690 --> 00:39:52.200
We have the carousel view, which is the component
that we used in several of our applications

00:39:52.200 --> 00:39:57.570
in Honeycomb which we're open sourcing along
-- as a sample for I/O right here.

00:39:57.570 --> 00:40:02.880
So this is implemented using the new renderscript
APIs in Honeycomb. And it's really intended

00:40:02.880 --> 00:40:06.910
for customization.
So some variant on this was used for both

00:40:06.910 --> 00:40:13.290
books, YouTube, and all of our other applications
that used some sort of, like, 3D carousel

00:40:13.290 --> 00:40:18.100
during Honeycomb's development.
So take this and really sort of make it your

00:40:18.100 --> 00:40:26.110
own. We've also got a few other components
that are either out already or will be shortly.

00:40:26.110 --> 00:40:32.370
We've got the fragment pager and the work
space, which encompass essentially your left-to-right

00:40:32.370 --> 00:40:38.290
paging navigation that a lot of you have asked
us for many times in the past. But specifically,

00:40:38.290 --> 00:40:43.180
we kind of want to gear people away from using
the gallery widget for a lot of this. Because,

00:40:43.180 --> 00:40:49.000
in general, the gallery widget is for choosing
single items, single images out of sort of

00:40:49.000 --> 00:40:52.920
a film strip type of list. It's really not
meant for the types of full-screen things

00:40:52.920 --> 00:41:01.790
that we see a lot of developers try to do
fairly commonly.

00:41:01.790 --> 00:41:06.031
And now here's Roman to walk you through sort
of what happens when you bring some of this

00:41:06.031 --> 00:41:14.290
all together, and using the Google I/O app.
&gt;&gt;Roman Nurik: Thanks, Adam. Thanks, Rich.

00:41:14.290 --> 00:41:18.310
[ Applause ]
&gt;&gt;Roman Nurik: All right. So we have just

00:41:18.310 --> 00:41:23.660
over seven minutes for a demo for an application
that actually took over two months to write.

00:41:23.660 --> 00:41:30.330
So -- just kidding. Let me quickly introduce
myself. My name is Roman Nurik, on the Androids

00:41:30.330 --> 00:41:36.640
Developer Relations team, a developer advocate.
Also the tech lead and designers for the Google

00:41:36.640 --> 00:41:43.790
I/O app, which hopefully all of you have installed.
And if you haven't, please install it now,

00:41:43.790 --> 00:41:48.710
because that would make me really happy.
First of all, we're going to do a quick demo

00:41:48.710 --> 00:41:52.630
of the app. Then we're going to talk through
some of the things that, I guess, were swirling

00:41:52.630 --> 00:41:56.320
in our minds as we were thinking about how
to implement this and how to make this a really

00:41:56.320 --> 00:41:59.560
solid demo app.
I'm going to leave this for one more second,

00:41:59.560 --> 00:42:06.130
and it's gone.
So let's actually switch to the demo. to the

00:42:06.130 --> 00:42:09.430
-- the WolfVision thing.
So this is the I/O app on a tablet. I'm first

00:42:09.430 --> 00:42:12.870
going to demo the tablet and then jump into
the phone.

00:42:12.870 --> 00:42:16.950
Here's the I/O app. I'm actually not connected
to the Internet here. You're just going to

00:42:16.950 --> 00:42:21.010
see a Web page not available.
On the left, this is actually the home activity;

00:42:21.010 --> 00:42:26.660
right? On the left, you have the dashboard
fragment, which is pretty much a kind of a

00:42:26.660 --> 00:42:31.870
launching point into the other parts of the
app. And on the right, you have a realtime

00:42:31.870 --> 00:42:33.750
stream fragment. It's not showing up right
now.

00:42:33.750 --> 00:42:38.700
So you have two panes. And we use this kind
of -- these two panes to take this large amount

00:42:38.700 --> 00:42:42.940
of screen real estate and do something very
useful with it. You'll see later on on the

00:42:42.940 --> 00:42:47.560
phone how we kind of map this to the phone.
So if you first go into sessions, you'll notice

00:42:47.560 --> 00:42:52.390
a couple of things immediately. You'll notice
that at the top, we have the Action bar that

00:42:52.390 --> 00:42:57.580
comes with Honeycomb. For the up affordance,
we're actually using a logo instead of an

00:42:57.580 --> 00:43:03.260
icon. And also using for that view section
just the title, which is "sessions" for the

00:43:03.260 --> 00:43:05.680
activity.
We also have some common actions. Right now,

00:43:05.680 --> 00:43:08.740
there's nothing we can really do. So it's
just a search key.

00:43:08.740 --> 00:43:15.510
So let's actually go and open our own session.
Now you'll see that we actually are populating

00:43:15.510 --> 00:43:21.310
that empty area, that second space, with more
detail. And now you'll actually notice that

00:43:21.310 --> 00:43:24.460
there are some action buttons that are populated
from that fragment.

00:43:24.460 --> 00:43:27.730
So the important thing to note here is that
there are actually three fragments on the

00:43:27.730 --> 00:43:31.820
screen. And this will be important in a second.
But three fragments on the screen. On the

00:43:31.820 --> 00:43:40.370
top left, rather, you have a tracks dropdown
fragment. Below that, you have the sessions

00:43:40.370 --> 00:43:43.420
fragment. And then to the right, you have
the session detail fragment.

00:43:43.420 --> 00:43:48.120
So let's go and jump into schedule, which
is another important part of the app.

00:43:48.120 --> 00:43:54.570
You'll notice that here there are actually
two panes. On the left, you have the calendar

00:43:54.570 --> 00:43:57.710
fragment. And on the right, you have kind
of an empty space where we'll populate content

00:43:57.710 --> 00:44:01.700
momentarily.
So if we jump into one of these blocks, we'll

00:44:01.700 --> 00:44:05.674
notice that that gets populated with the sessions
fragment from before, as we just showed in

00:44:05.674 --> 00:44:10.780
the previous screen. And, again, this is just
part of fragments that you can reuse them

00:44:10.780 --> 00:44:13.350
across activities. That's one of the greatest
parts of them.

00:44:13.350 --> 00:44:19.470
And if we select, say, another session, we'll
replace that with -- with the session detail.

00:44:19.470 --> 00:44:23.120
And you'll notice that there are fragment
bread crumbs here that indicate what is kind

00:44:23.120 --> 00:44:26.010
of the relationship between the session detail
and the sessions.

00:44:26.010 --> 00:44:32.200
And if we press "back," you'll notice that
the back stack is kind of very closely tied

00:44:32.200 --> 00:44:36.880
with the way fragments work.
So -- Oh, and there's one more thing I wanted

00:44:36.880 --> 00:44:41.330
to show on this screen. You'll notice that
we're actually using the work space to allow

00:44:41.330 --> 00:44:43.980
flicking left and right between different
days.

00:44:43.980 --> 00:44:47.990
So I think that's it for the -- actually,
there's one last thing I wanted to show on

00:44:47.990 --> 00:44:52.540
the tablet. That's what we do with portrait.
So if we jump this into portrait mode, you'll

00:44:52.540 --> 00:44:58.190
notice that we're using the stacked orientation
strategy. So, basically, we're reorienting

00:44:58.190 --> 00:45:05.390
our fragments to make most -- to make the
most sense of the space available in portrait

00:45:05.390 --> 00:45:08.580
mode.
So let's actually jump onto the phone. There

00:45:08.580 --> 00:45:15.650
we go. Just give that a moment, too. There
we go.

00:45:15.650 --> 00:45:23.450
So if we open up the I/O app on a phone. Let
me zoom in a bit. If you open up the I/O app

00:45:23.450 --> 00:45:26.870
on a phone, you'll notice that here there's
really only one primary fragment, whereas

00:45:26.870 --> 00:45:31.410
on the tablet there are two. So here, there's
simply just a dashboard. And what we've done

00:45:31.410 --> 00:45:34.870
with the realtime stream, we've actually created
a separate affordance on the bottom right

00:45:34.870 --> 00:45:40.440
of the screen to let you get to that as a
separate activity.

00:45:40.440 --> 00:45:45.770
There's an Action bar at the top. And as Adam
and Rich mentioned, on phones right now, there's

00:45:45.770 --> 00:45:50.680
no kind of native Action bar component. But
this is a custom component that we'll talk

00:45:50.680 --> 00:45:55.680
about in a bit in terms of how it's implemented.
And let's actually jump into sessions.

00:45:55.680 --> 00:46:00.490
You'll notice that there's actually a logical
progression of three separate activities that

00:46:00.490 --> 00:46:04.780
performs the same task, effectively, as what
we would have done in one activity in the

00:46:04.780 --> 00:46:07.230
tablet, simply because we don't have that
much space to work with.

00:46:07.230 --> 00:46:13.760
And, actually, the fragments used in these
activities are all the same as the fragments

00:46:13.760 --> 00:46:17.890
used on the tablet. So, again, there's endless
amounts of code reuse. And that's something

00:46:17.890 --> 00:46:19.910
that's really, really powerful when using
fragments. So I can't emphasize that enough.

00:46:19.910 --> 00:46:25.310
Or maybe I can. I'll stop here.
Okay. So I think that's all we wanted to show

00:46:25.310 --> 00:46:30.800
for the demo.
Let's actually jump back to slides.

00:46:30.800 --> 00:46:34.580
So here's a very quick sample of some of the
things that we just showed for those that

00:46:34.580 --> 00:46:38.150
didn't see it in full detail.
I'll just quickly run through this since we're

00:46:38.150 --> 00:46:42.590
running a little low on time.
Basically, you see side by side what a certain

00:46:42.590 --> 00:46:50.481
activity looks like on phone versus tablet.
How does this work? The first most important

00:46:50.481 --> 00:46:53.860
thing that we can say here is that it's a
single APK. It's a single binary that you

00:46:53.860 --> 00:46:58.400
can install on a phone and a install on a
tablet and get a very similar, yet at the

00:46:58.400 --> 00:47:02.160
same time, very different experience. It's
really optimized for the device that you're

00:47:02.160 --> 00:47:05.550
on.
Some of the ways in which this works. We use

00:47:05.550 --> 00:47:10.600
a lot of different resource directory qualifiers,
as Adam hinted at before. The base set of

00:47:10.600 --> 00:47:15.620
resources that we provided, the base layouts,
the base drawables, the base styles, dimensions,

00:47:15.620 --> 00:47:21.350
everything, those are all for the phone layout.
We also added on another set of resources

00:47:21.350 --> 00:47:27.460
specifically for tablets, for Honeycomb tablets.
And we do that using the Xlarge V11 resource

00:47:27.460 --> 00:47:33.400
directory qualifiers. The reason we did Xlarge
and V11 and not just Xlarge or not just large

00:47:33.400 --> 00:47:40.350
is that we really wanted to -- we really wanted
to really deliver an experience for tablets,

00:47:40.350 --> 00:47:44.780
for Honeycomb tablets, that used all the great
tools that Honeycomb had to offer that wasn't

00:47:44.780 --> 00:47:48.830
previously available on Gingerbread. So, for
example, fragment and bread crumbs is something

00:47:48.830 --> 00:47:52.540
that we used in some of the Honeycomb layouts
that just weren't available in Gingerbread

00:47:52.540 --> 00:47:56.210
and below.
And so we had to make a concession where,

00:47:56.210 --> 00:48:00.650
let's say you had a Gingerbread tablet, since
Gingerbread does support the Xlarge screen

00:48:00.650 --> 00:48:04.680
size, if you had a Gingerbread tablet, you
would still get the phone experience. It's

00:48:04.680 --> 00:48:09.590
not the optimal experience, but it's also
something that still does work.

00:48:09.590 --> 00:48:13.260
And, of course, we're using -- we're heavily
using the fragment compatibility library,

00:48:13.260 --> 00:48:16.380
which I will not beat to death by talking
about more.

00:48:16.380 --> 00:48:22.160
So let's go on to the next section and talk
about some of our activities.

00:48:22.160 --> 00:48:28.090
So there are really three different types
of activities in this app. There's first the

00:48:28.090 --> 00:48:32.680
universal activity that -- it's just a, I
guess, in quotations. It's not a real name.

00:48:32.680 --> 00:48:37.810
But universal types of activities that are
the same pieces of code that run on both phones

00:48:37.810 --> 00:48:43.090
and tablets. They may use, you know, different
fragments. They, you know, may have switch

00:48:43.090 --> 00:48:47.580
statements in certain cases. But most of the
core code is the same.

00:48:47.580 --> 00:48:52.400
You also have phone-specific activities, such
as the sessions activity. And then tablet-specific

00:48:52.400 --> 00:48:58.720
activities such as sessions, multipane activity.
The important thing here is those are just

00:48:58.720 --> 00:49:02.090
shell code -- those are just shell activities.
They don't actually have that much code in

00:49:02.090 --> 00:49:07.900
them. They're maybe 20 lines, 30 lines at
most. All of the hard work is done by the

00:49:07.900 --> 00:49:10.420
fragments.
We also have a couple of activity helper classes

00:49:10.420 --> 00:49:15.250
that we wrote for this. Basically, they do
things like setting up the Action bar, setting

00:49:15.250 --> 00:49:21.270
the kind of the title bar color, things like
that. And those are, again -- there's two

00:49:21.270 --> 00:49:26.230
separate ones. There's one just for phones,
and there's one that takes what the phone

00:49:26.230 --> 00:49:30.760
code is and layers on an additional function
-- set of functionality just for Honeycomb.

00:49:30.760 --> 00:49:35.250
And so you'll notice, if you look at the code,
that activity helper Honeycomb extends from

00:49:35.250 --> 00:49:42.850
activity helper, so it kind of layers on that
extra layer of functionality if it's available.

00:49:42.850 --> 00:49:47.682
And the Action bar, as Adam mentioned, is
kind of a neat thing. It's kind of a tricky

00:49:47.682 --> 00:49:53.100
thing. So I'll talk about it in a little detail.
Basically, the way we do it is -- the action

00:49:53.100 --> 00:49:57.520
bar is basically just a set of normal views;
right? It's a linear layout with some action

00:49:57.520 --> 00:50:01.650
-- with some image buttons.
The way it's really done is that, first of

00:50:01.650 --> 00:50:09.160
all, we have this simple implementation of
the menu interface. We instantiate it. We

00:50:09.160 --> 00:50:13.110
then tell the activity to populate it with
all the menu items that it thinks should be

00:50:13.110 --> 00:50:16.820
shown.
So if you have three fragments and each one

00:50:16.820 --> 00:50:22.800
wants to show an action button or -- sorry,
I'm probably misusing terminology -- but if

00:50:22.800 --> 00:50:29.140
each one wants to show a menu item or an action
item, basically, the activity will group those

00:50:29.140 --> 00:50:34.110
together, populate the menu, and then pass
that to the for loop that you see here. The

00:50:34.110 --> 00:50:38.850
for loop takes those menu items and then adds
each one to the action bar.

00:50:38.850 --> 00:50:43.020
So one thing you should keep in mind here
is, obviously, not to -- you know, not to

00:50:43.020 --> 00:50:47.500
use this with, you know, let's say, four or
five action items, since you'll be complicating

00:50:47.500 --> 00:50:50.540
the action bar.
But that's something that is currently -- we're

00:50:50.540 --> 00:50:55.070
kind of working on it to improve that. I'm
running really low on time, so I'm going to

00:50:55.070 --> 00:50:58.710
skip through a lot of this.
Two other things I wanted to mention quickly

00:50:58.710 --> 00:51:04.330
is that tab drawables. You'll notice that
tabs look very, you know, specific, very different

00:51:04.330 --> 00:51:08.560
on Honeycomb versus on Gingerbread. So we
actually have customized some of our tabs

00:51:08.560 --> 00:51:13.321
so that they really, you know, mesh well with
the rest of the system.

00:51:13.321 --> 00:51:18.360
For example, as you see at the top, there's
kind of the Gingerbread or phone tabs. And

00:51:18.360 --> 00:51:22.690
these actually stretch to fill the entire
screen. And at the bottom, here are some examples

00:51:22.690 --> 00:51:27.690
of the tab drawables that we use for Honeycomb,
which are more like that. And they're actually

00:51:27.690 --> 00:51:31.670
using wrap content instead of stretching to
fill.

00:51:31.670 --> 00:51:36.690
Lastly, a really important point here is that
you don't always have to tweak, you know,

00:51:36.690 --> 00:51:40.180
your entire layout. You can just tweak some
of the dimension resources used.

00:51:40.180 --> 00:51:44.151
So, for example, if you want to just bump
up the font size a bit so that it's a bit

00:51:44.151 --> 00:51:49.610
more legible on tablets or tweak the padding,
you can do that using the resources system.

00:51:49.610 --> 00:51:54.020
You simply need to have separate dimensions
resources for that.

00:51:54.020 --> 00:51:59.550
So that's it for -- that's it pretty much
for the demo and the walk-through of how it

00:51:59.550 --> 00:52:01.830
works.
I really advise you to just look at the code

00:52:01.830 --> 00:52:04.910
and see what you can take from there and use
in your own projects.

00:52:04.910 --> 00:52:10.971
The code for the I/O 2011 app is open source.
The project was formerly. I/O 2010 app. You

00:52:10.971 --> 00:52:18.290
should be able to get all the goodness there.
To recap, we talked about some of the design

00:52:18.290 --> 00:52:23.010
goals for Honeycomb. We talked about some
of the influences and inspirations for the

00:52:23.010 --> 00:52:27.430
holographic UI and some visual design tips.
And then Rich and Adam spent a while talking

00:52:27.430 --> 00:52:31.200
about some of our awesome new patterns that
we're really advocating for. And lastly, we

00:52:31.200 --> 00:52:37.490
did a demo of the Google I/O 2011 app.
So with that, I'd like to invite you all to

00:52:37.490 --> 00:52:41.450
now ask questions.
You can fire Google Moderator or ask live

00:52:41.450 --> 00:52:44.680
questions here.
And do, please, provide us feedback so that

00:52:44.680 --> 00:52:51.520
we can give you an even better presentation
next year.

00:52:51.520 --> 00:52:54.410
Thank you.
[ Applause ]

00:52:54.410 --> 00:53:02.000
&gt;&gt;Roman Nurik: So there's mikes up here. There
are -- I don't know if there are mikes back

00:53:02.000 --> 00:53:04.360
there.
There's only one mike up here. So we'll take

00:53:04.360 --> 00:53:09.350
a couple live questions. And then we'll look
at moderator. We have about five minutes.

00:53:09.350 --> 00:53:12.090
So....
&gt;&gt;&gt; Will any of those components that you

00:53:12.090 --> 00:53:16.890
mentioned, like, say, the work space that's
inside of I/O 2011 app, are you going to be

00:53:16.890 --> 00:53:21.690
repackaging those as, like, Android library
project for wider reuse or is that our job?

00:53:21.690 --> 00:53:24.910
&gt;&gt;Roman Nurik: You want to talk about that?
&gt;&gt;Adam Powell: For the moment, that's your

00:53:24.910 --> 00:53:30.040
job. It's available open source as part of
the I/O app right now. We may get some more

00:53:30.040 --> 00:53:37.880
libraries out there to offer a few more widgets
for this functionality. But we're still kind

00:53:37.880 --> 00:53:42.330
of working on that.
&gt;&gt;&gt; Okey-dokey.

00:53:42.330 --> 00:53:43.559
&gt;&gt;Roman Nurik: Any other questions? There's
one back there.

00:53:43.559 --> 00:53:49.750
&gt;&gt;&gt; Yes. So we're about to embark on a redesign
of our application for Honeycomb, and I know

00:53:49.750 --> 00:53:54.590
you can't speak too much about Ice Cream Sandwich
just yet. But if we start going with the hologram

00:53:54.590 --> 00:53:59.580
type style of things, are we going to have
to do significant redesigns when we're looking

00:53:59.580 --> 00:54:03.090
for phones in the future?
&gt;&gt;Matias Duarte: I'll take that one.

00:54:03.090 --> 00:54:08.020
No. Everything that you see in Honeycomb represents
the direction that we're taking Android in

00:54:08.020 --> 00:54:12.510
general. And you'll expect to see more of
that not exactly the same, refined and better,

00:54:12.510 --> 00:54:14.661
in Ice Cream Sandwich.
&gt;&gt;&gt; Great. Thank you.

00:54:14.661 --> 00:54:21.970
&gt;&gt;Roman Nurik: So it's actually a take one
moderated question. Will it be possible to

00:54:21.970 --> 00:54:27.650
create HTML-based -- that went away. There
it is -- will it be possible to create HTML-based

00:54:27.650 --> 00:54:32.350
home screen widgets in order to display a
live Web page, JavaScript, or sockets on the

00:54:32.350 --> 00:54:37.150
home screen?
&gt;&gt;Adam Powell: I don't think we have immediate

00:54:37.150 --> 00:54:39.680
plans for that right now. But we could look
into it.

00:54:39.680 --> 00:54:45.540
&gt;&gt;Roman Nurik: So stay tuned.
When will a real UI design tool that's compatible

00:54:45.540 --> 00:54:50.960
with interface builder blah, blah, blah. Basically,
look at Xav's talk later this afternoon. They're

00:54:50.960 --> 00:54:58.050
-- Xav and Tor. They're going to be demoing
a new UI design and layout tool that we've

00:54:58.050 --> 00:55:02.170
been working on heavily. So you can check
out that talk for that.

00:55:02.170 --> 00:55:06.350
Let's see another live question.
&gt;&gt;&gt; Thank you. I'm just wondering what the

00:55:06.350 --> 00:55:13.070
benefit is on your phone version of the app
using a new activity rather than using the

00:55:13.070 --> 00:55:16.771
back stack method of fragments.
&gt;&gt;Roman Nurik: It's a good question.

00:55:16.771 --> 00:55:21.880
I don't know -- I personally don't have, like,
a preference either way. I know that, you

00:55:21.880 --> 00:55:25.630
know, you can definitely implement the same
thing by just having one phone activity and

00:55:25.630 --> 00:55:32.040
then several fragments that swap in and out.
I found that it was a little easier just to

00:55:32.040 --> 00:55:36.190
have separate activities. Also, we make heavy
use of intents throughout the app. If you

00:55:36.190 --> 00:55:40.430
look at the intent model and kind of the content
provider model, there are a lot of things

00:55:40.430 --> 00:55:45.510
there that didn't naturally or immediately
map to having just one activity. So there

00:55:45.510 --> 00:55:47.600
would be a lot of code that you would have
to reimplement.

00:55:47.600 --> 00:55:52.430
So definitely both can work. We just chose
one. I think that the other could work as

00:55:52.430 --> 00:55:55.600
well. But if you guys have any other comments.
Okay.

00:55:55.600 --> 00:56:01.540
&gt;&gt;Adam Powell: No. That covers it pretty well.
&gt;&gt;&gt; Thank you very much.

00:56:01.540 --> 00:56:03.510
&gt;&gt;Roman Nurik: Sure.
&gt;&gt;&gt; You mentioned launching the activity with

00:56:03.510 --> 00:56:09.970
a couple of intents before the one the user
actually sees. So when they receive a notification

00:56:09.970 --> 00:56:13.300
or something.
What other uses would you have for creating

00:56:13.300 --> 00:56:19.430
that back stack on launch?
&gt;&gt;Rich Fulcher: I think the biggest one is

00:56:19.430 --> 00:56:25.710
-- we hinted at it a little bit here. But
the general idea that users will sometimes

00:56:25.710 --> 00:56:31.130
have the expectation, if they didn't get directly
referred from another application, that they're

00:56:31.130 --> 00:56:37.580
just kind of in that app and they're expecting
back to kind of move them within that app.

00:56:37.580 --> 00:56:42.390
So this was something that was kind of generated
by user research, this kind of testing out

00:56:42.390 --> 00:56:47.040
the new behavior of deep-dive notifications.
I think that's the most critical use case

00:56:47.040 --> 00:56:52.280
is a dive deeply into an app. I forget exactly
how I arrived there, whether it was recent

00:56:52.280 --> 00:56:57.480
or back or some other affordance. And I just
-- rather than just restoring you back to

00:56:57.480 --> 00:57:01.900
home, it would take you kind of gently back
up through that application.

00:57:01.900 --> 00:57:06.270
&gt;&gt;Matias Duarte: A rule of Thumb we've used
for knowing when that's appropriate is, if

00:57:06.270 --> 00:57:11.630
the user has used a system-level affordance
to really switch tasks or switch application

00:57:11.630 --> 00:57:16.920
contexts, that that's a good sign that they're
expecting to really kind of completely go

00:57:16.920 --> 00:57:20.980
from one building to another building. And
so when you're deep-linking in through a widget,

00:57:20.980 --> 00:57:24.310
when you're following a notification, when
you're following some kind of specialized

00:57:24.310 --> 00:57:30.180
shortcut on home, those are all appropriate
places to build them a reasonable back stack

00:57:30.180 --> 00:57:35.290
in case they don't already have it.
If you're directly linking from one activity

00:57:35.290 --> 00:57:40.520
into another activity as part of one task,
not the user using the system, but just using

00:57:40.520 --> 00:57:43.050
an application, that's not usually an appropriate
time.

00:57:43.050 --> 00:57:48.132
&gt;&gt;&gt; Okay. Thank you.
&gt;&gt;Roman Nurik: All right. Any more live questions?

00:57:48.132 --> 00:57:50.640
Yes.
&gt;&gt;&gt; Got a second one now.

00:57:50.640 --> 00:57:56.291
I'm just wondering if there's going to be
more development with the compatibility library.

00:57:56.291 --> 00:58:03.890
It's pretty good already. But I think it could
probably be better and I'd like to see some

00:58:03.890 --> 00:58:05.470
of the newer features as they come.
&gt;&gt;Adam Powell: We'd like to. What would you

00:58:05.470 --> 00:58:07.783
like to see?
&gt;&gt;&gt; Well, it would be great if we could get

00:58:07.783 --> 00:58:13.910
the Action bar in there. And also, Web fragment
would be wonderful.

00:58:13.910 --> 00:58:17.321
&gt;&gt;Adam Powell: Hmm.
&gt;&gt;Roman Nurik: We'll take those's feature

00:58:17.321 --> 00:58:18.760
requests to ask Diane and Adam. I'll file
that later.

00:58:18.760 --> 00:58:23.080
One more question up here.
&gt;&gt;&gt; Can you hear me?

00:58:23.080 --> 00:58:29.400
&gt;&gt;&gt; Yep. Last question, I think.
&gt;&gt;&gt; So do you know when -- I'm not sure if

00:58:29.400 --> 00:58:33.400
this is appropriate.
So do you know when the entire alias support

00:58:33.400 --> 00:58:39.880
will be coming into Honeycomb? Because when
I switch the wheel, like, five degrees, the

00:58:39.880 --> 00:58:45.811
lines get too short.
&gt;&gt;Roman Nurik: That's probably a loaded question.

00:58:45.811 --> 00:58:49.560
There are a number of different ways to do
drawing; right. So are you talking about 2D

00:58:49.560 --> 00:58:52.640
Canvas drawing?
&gt;&gt;&gt; Yeah, 2D, just basic view, I have a view,

00:58:52.640 --> 00:58:57.400
and then I kind of turn that a few degrees.
&gt;&gt;Roman Nurik: Like a rotation?

00:58:57.400 --> 00:58:59.701
&gt;&gt;&gt; Yeah, yes.
&gt;&gt;Roman Nurik: Good question.

00:58:59.701 --> 00:59:04.300
Adam, do you know the answer to that?
&gt;&gt;Adam Powell: I think it's being worked on.

00:59:04.300 --> 00:59:06.600
&gt;&gt;&gt; Okay. Any ETA?
&gt;&gt;Adam Powell: Not at this time. Sorry.

00:59:06.600 --> 00:59:09.590
&gt;&gt;&gt; Okay. Thanks.
&gt;&gt;Roman Nurik: I think that's it for questions.

00:59:09.590 --> 00:59:11.480
Thanks, everyone, for coming. And give us
feedback.

00:59:11.480 --> 00:59:13.070
[ Applause ]
&gt;&gt;Adam Powell: Thank you very much.

00:59:13.070 --> 00:59:13.300
[ Applause ]

