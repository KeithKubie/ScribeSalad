WEBVTT
Kind: captions
Language: en

00:00:00.380 --> 00:00:02.660
Okay. Now what I'd like to do is update our shopping_list

00:00:02.660 --> 00:00:06.220
app to use all of these techniques we've just learned with

00:00:06.220 --> 00:00:07.880
templates. So first thing what we're going to do is going to get

00:00:07.880 --> 00:00:10.790
rid of this code that we've been playing around with. [SOUND]

00:00:10.790 --> 00:00:13.440
I get rid of this n equals n, we don't need

00:00:13.440 --> 00:00:17.270
that anymore. Then we're going to go to our shopping list and

00:00:17.270 --> 00:00:22.180
get rid of this stuff. We don't need this anymore. [SOUND]

00:00:22.180 --> 00:00:24.340
Okay. Let's go back to our browser and make sure things okay.

00:00:25.510 --> 00:00:28.100
When we reload this we see our basic shopping list. Type

00:00:28.100 --> 00:00:30.883
in food and it appears in the URL. We could type in

00:00:30.883 --> 00:00:35.172
different food, milk, and it updates that parameter in the URL. Now,

00:00:35.172 --> 00:00:38.292
let's go ahead and add in the functionality that we had before

00:00:38.292 --> 00:00:41.472
with the hidden input elements and actually showing the list of

00:00:41.472 --> 00:00:44.558
foods that we had added so far. Okay, now, first thing we

00:00:44.558 --> 00:00:46.952
do is we can get rid of all of this, well, most

00:00:46.952 --> 00:00:50.762
of this stuff. Let's uncomment it for now. Okay, so we don't

00:00:50.762 --> 00:00:53.760
need any of this HTML junk anymore. This stuff

00:00:53.760 --> 00:00:56.310
is nasty, so let's get rid of all that, and

00:00:56.310 --> 00:00:59.710
we don't need any of this stuff. And, this line,

00:00:59.710 --> 00:01:03.500
can just go there. Okay, so, we're just going to get

00:01:03.500 --> 00:01:07.110
our food, get all get perimeters food out of the

00:01:07.110 --> 00:01:11.570
URL, store them in items and we're going to pass items

00:01:11.570 --> 00:01:13.900
into our template. Now the variable names don't always have

00:01:13.900 --> 00:01:16.240
to match when you're passing things into the template but,

00:01:16.240 --> 00:01:18.830
I find very often they do. Generally makes your life a little

00:01:18.830 --> 00:01:20.380
easier because then, when you're thinking

00:01:20.380 --> 00:01:21.670
about, you know, you're often working in

00:01:21.670 --> 00:01:25.700
your template and in your handler. It's handy to just call things the

00:01:25.700 --> 00:01:28.090
same thing, so, you known, you don't have to do that translation in

00:01:28.090 --> 00:01:31.105
your head. Now we had all of this HTML up here, we're not

00:01:31.105 --> 00:01:33.320
going to use this anymore so let's just g a head and get rid

00:01:33.320 --> 00:01:37.660
of it. Now let's go ahead and update our shopping list template. Okay,

00:01:37.660 --> 00:01:41.390
so the first thing we want to do is add in hidden input elements.

00:01:41.390 --> 00:01:46.880
So, if items four item and items. let's

00:01:46.880 --> 00:01:52.491
add our hidden input. Input type equals hidden. Name equals food. Value

00:01:52.491 --> 00:01:58.390
equals, item. Notice, we can substitute our variable right in the

00:01:58.390 --> 00:02:02.620
middle of this HTML here. Because in the template the HTML is not special. It's

00:02:02.620 --> 00:02:04.510
just, it's just a string. And we can

00:02:04.510 --> 00:02:07.060
substitute anywhere into the string that we want.

00:02:07.060 --> 00:02:10.120
Let's close up our loop. Okay. Let's make sure this

00:02:10.120 --> 00:02:12.950
part worked first. Recall if this part works, we should

00:02:12.950 --> 00:02:15.317
see things appearing in the URL. So it's always good

00:02:15.317 --> 00:02:17.051
to test as you go in case you make a mistake

00:02:17.051 --> 00:02:20.160
you don't, you don't, have that mistake for too long.

00:02:20.160 --> 00:02:27.020
Okay, milk, and now if I add eggs, I see eggs

00:02:27.020 --> 00:02:29.330
and milk in the URL. Let's add some more food.

00:02:29.330 --> 00:02:32.250
You can see things are starting to accumulate in the URL,

00:02:32.250 --> 00:02:35.800
which means if we look at the source that our,

00:02:35.800 --> 00:02:39.050
template is actually working and we're adding all these hidden

00:02:39.050 --> 00:02:42.160
inputs. Notice the white space is all messed up. It's

00:02:42.160 --> 00:02:44.230
not a big deal. It's basically because our template includes white

00:02:44.230 --> 00:02:47.730
space. And it's getting put in here literally. But HTML

00:02:47.730 --> 00:02:50.190
doesn't care about extra white space. All is well here

00:02:50.190 --> 00:02:54.140
so far. Back to our template. Let's add that shopping

00:02:54.140 --> 00:02:57.270
list to the bottom. So again, only if we have items,

00:02:57.270 --> 00:02:59.830
if items. We're going to say we're going to add a

00:02:59.830 --> 00:03:02.250
couple of blank lines. This not the best way

00:03:02.250 --> 00:03:07.261
to add blank lines but it works for us. Okay. We do our shopping list and it is

00:03:07.261 --> 00:03:11.260
going to be an, let's say, an unordered list. Now,

00:03:11.260 --> 00:03:14.600
for each item and items list that item. We'll

00:03:14.600 --> 00:03:18.370
go to unordered list. And our if statement, and

00:03:18.370 --> 00:03:23.020
let's indent everything, and let's, let's fix our indenting. Okay.

00:03:23.020 --> 00:03:26.680
And let's see if this works. Close the source,

00:03:26.680 --> 00:03:28.450
reload this page, and we load this page. And there,

00:03:28.450 --> 00:03:32.140
behold, is our shopping list. Let's add some more items.

00:03:32.140 --> 00:03:34.520
Cheese, it appears on our list, it appears on our

00:03:34.520 --> 00:03:36.530
URL and if we view the source of this page,

00:03:37.610 --> 00:03:40.150
we can see our hidden inputs here. And we can

00:03:40.150 --> 00:03:44.010
see our shopping list down here. And if I were

00:03:44.010 --> 00:03:48.660
to modify this URL we can see that everything disappears.

00:03:48.660 --> 00:03:52.520
Likewise, if we delete it here, [SOUND] everything goes

00:03:52.520 --> 00:03:56.420
away. Okay, very cool. Now, looking at our code

00:03:56.420 --> 00:03:59.460
this is much simpler. We have our, our parent

00:03:59.460 --> 00:04:02.920
class, that just has our simple rendering functions and

00:04:02.920 --> 00:04:05.160
then our main page handler, has actually gotten a

00:04:05.160 --> 00:04:07.470
lot shorter. All it does, is it gets the

00:04:07.470 --> 00:04:09.850
items out of the URL, and passes that into

00:04:09.850 --> 00:04:14.120
the shopping list template. Which, now has the structure

00:04:14.120 --> 00:04:16.480
of the HTML that we're actually generating, and this is

00:04:16.480 --> 00:04:18.850
a lot easier to think about than that madness we

00:04:18.850 --> 00:04:21.990
had before with string substitution and string concatenation, and all

00:04:21.990 --> 00:04:24.890
of that. That was very difficult to read. And everything here,

00:04:24.890 --> 00:04:28.420
works you know, much more smoothly. Now there is one

00:04:28.420 --> 00:04:31.180
little problem that I'd like to show you. Let's add some

00:04:31.180 --> 00:04:33.925
food here. Now we can just auto complete our food,

00:04:33.925 --> 00:04:39.390
because our shopping list is learning our tastes. What happens if

00:04:40.630 --> 00:04:43.660
I really want some pizza and I put our

00:04:43.660 --> 00:04:47.490
pizza in an H1. Okay, nothing. The HTML is

00:04:47.490 --> 00:04:49.340
not interpreted and the food is just added directly

00:04:49.340 --> 00:04:52.630
to our list. Or the raw HTML, in this

00:04:52.630 --> 00:04:58.070
case, the H1 is displayed. Or HTML actually rendered,

00:04:58.070 --> 00:05:00.470
in which case our food appears very big in

00:05:00.470 --> 00:05:02.600
our list, in this particular case. Why don't you

00:05:02.600 --> 00:05:04.320
go ahead and try yourself and see what happens.

