WEBVTT
Kind: captions
Language: en

00:00:03.150 --> 00:00:03.600
ALEX KOMOROSKE: Hi.

00:00:03.600 --> 00:00:06.060
So I'm Alex Komoroske.

00:00:06.060 --> 00:00:07.630
MAX HEINRITZ: I'm
Max Heinritz.

00:00:07.630 --> 00:00:09.440
ALEX KOMOROSKE: We're two
Product Managers on Chrome's

00:00:09.440 --> 00:00:10.920
Open Web Platform team.

00:00:10.920 --> 00:00:13.360
Now most of this session is
going to be just questions and

00:00:13.360 --> 00:00:14.630
answers from you guys.

00:00:14.630 --> 00:00:17.980
You'll see there's that Google
Moderator link up there.

00:00:17.980 --> 00:00:21.170
You can leave questions on
there, or you can ask them

00:00:21.170 --> 00:00:23.222
live, whichever you prefer.

00:00:23.222 --> 00:00:25.240
But that's what we'll spend
most of our time on.

00:00:25.240 --> 00:00:29.150
Before that, Max and I are going
to talk for a couple

00:00:29.150 --> 00:00:31.640
minutes about Blink and the
progress we've made in the

00:00:31.640 --> 00:00:33.110
past month.

00:00:33.110 --> 00:00:34.420
So it's kind of crazy.

00:00:34.420 --> 00:00:38.110
But it's only been a little
bit over a month since we

00:00:38.110 --> 00:00:40.520
announced Blink.

00:00:40.520 --> 00:00:43.830
And Blink, for those who don't
know, is a new rendering

00:00:43.830 --> 00:00:45.900
engine originally based
on WebKit that

00:00:45.900 --> 00:00:48.200
we're using in Chromium.

00:00:48.200 --> 00:00:50.705
The mission statement of Blink
is to improve the open web

00:00:50.705 --> 00:00:53.270
through technical innovation
and good citizenship.

00:00:53.270 --> 00:00:56.960
So I'm going to talk about the
technical innovation par, and

00:00:56.960 --> 00:01:01.190
Max will talk briefly about
the good citizenship part.

00:01:01.190 --> 00:01:04.769
So when we made the decision
to create Blink, it was a

00:01:04.769 --> 00:01:07.750
really hard one that we had
to come to terms with.

00:01:07.750 --> 00:01:10.230
But it came down to,
fundamentally, that Chromium

00:01:10.230 --> 00:01:13.550
used a different multiprocess
architecture from other

00:01:13.550 --> 00:01:14.980
WebKit-based browsers.

00:01:14.980 --> 00:01:17.220
And that increased complexity,
not just for the Chromium

00:01:17.220 --> 00:01:20.500
team, but for everybody
who is using WebKit.

00:01:20.500 --> 00:01:24.120
So we mentioned back when we
made the announcement that we

00:01:24.120 --> 00:01:27.300
anticipated that we could remove
about 4.5 million lines

00:01:27.300 --> 00:01:28.370
from the codebase.

00:01:28.370 --> 00:01:31.840
And that was things like build
systems for other ports,

00:01:31.840 --> 00:01:34.960
JavaScriptCore, because we use
V8, some of the WebKit2

00:01:34.960 --> 00:01:37.750
porting layer, and a number
of other things.

00:01:37.750 --> 00:01:39.520
But the progress we've
made since then has

00:01:39.520 --> 00:01:40.870
really blowing our minds.

00:01:40.870 --> 00:01:44.350
In fact, we've removed
now, I think, $8.8

00:01:44.350 --> 00:01:46.180
million lines of code.

00:01:46.180 --> 00:01:48.800
So that's just a really cool
stat, I think, that shows that

00:01:48.800 --> 00:01:50.610
we've been able to streamline
this even

00:01:50.610 --> 00:01:52.320
more than we expected.

00:01:52.320 --> 00:01:54.515
That's 63% of the
repo, I think.

00:01:54.515 --> 00:01:58.340
And it's also 191 megabytes
of code.

00:01:58.340 --> 00:02:01.710
So less code is better for
developers, because it means

00:02:01.710 --> 00:02:04.600
that people who are working on
Blink, they can check out the

00:02:04.600 --> 00:02:05.600
codebase faster.

00:02:05.600 --> 00:02:06.920
They can build faster.

00:02:06.920 --> 00:02:11.120
And of course, less code is less
surface area for bugs.

00:02:11.120 --> 00:02:15.220
And it hasn't just actually been
us that's been able to

00:02:15.220 --> 00:02:16.340
clean up like this.

00:02:16.340 --> 00:02:18.960
The WebKit project as well has
really been able to clean out

00:02:18.960 --> 00:02:21.130
some stuff that was really
just there for Chromium.

00:02:21.130 --> 00:02:23.640
So it's been really great
for both projects.

00:02:23.640 --> 00:02:26.290
These are just really
easy stats to pull.

00:02:26.290 --> 00:02:31.330
What actually really matters is
developer productivity and

00:02:31.330 --> 00:02:34.060
how much stuff we can do to
improve the stability and

00:02:34.060 --> 00:02:36.770
performance of Blink.

00:02:36.770 --> 00:02:38.580
But what I'm most excited about,
actually, is not just

00:02:38.580 --> 00:02:40.420
the performance or the
development and productivity

00:02:40.420 --> 00:02:42.490
but some of the cool new
experiments that we've been

00:02:42.490 --> 00:02:45.300
able to start that we couldn't
have done before.

00:02:45.300 --> 00:02:48.305
So one of those is a project
called Oilpan.

00:02:48.305 --> 00:02:51.460
And this is, just again, an
experiment into seeing if we

00:02:51.460 --> 00:02:55.460
can move the DOM nodes into
a garbage collected heap.

00:02:55.460 --> 00:02:58.895
So today, DOM nodes, they use
a reference counting system,

00:02:58.895 --> 00:03:02.280
and it interacts in a very
complex way with the

00:03:02.280 --> 00:03:03.530
JavaScript engine.

00:03:03.530 --> 00:03:06.570
And so if this works, it could
really help make that much

00:03:06.570 --> 00:03:08.770
simpler and much easier
to understand and less

00:03:08.770 --> 00:03:10.030
error-prone.

00:03:10.030 --> 00:03:12.650
Another cool one is called
Lazy Block Layout.

00:03:12.650 --> 00:03:14.780
Again, a very early
experiment.

00:03:14.780 --> 00:03:18.710
The idea is, what if we could
make very large but simple

00:03:18.710 --> 00:03:20.750
layouts much, much
faster to do?

00:03:20.750 --> 00:03:23.760
So if you're only using a
handful of features, why can't

00:03:23.760 --> 00:03:26.990
we make that much,
much faster?

00:03:26.990 --> 00:03:30.030
And if it works, this would
allow things like infinite

00:03:30.030 --> 00:03:32.550
scrolling lists to be much
easier to accomplish on the

00:03:32.550 --> 00:03:33.880
web platform.

00:03:33.880 --> 00:03:37.400
So those are literally just two
totally random examples of

00:03:37.400 --> 00:03:41.140
experiments that we've started
in the past month or so with

00:03:41.140 --> 00:03:42.470
Blink that we're really
excited about.

00:03:42.470 --> 00:03:43.690
There's a whole bunch
of other ones.

00:03:43.690 --> 00:03:46.580
All of the stuff about these and
the other ones are on our

00:03:46.580 --> 00:03:47.980
mailing list.

00:03:47.980 --> 00:03:49.450
Cool.

00:03:49.450 --> 00:03:50.010
MAX HEINRITZ: Thanks, Alex.

00:03:50.010 --> 00:03:52.930
So Alex talked a lot about how
Blink enables technical

00:03:52.930 --> 00:03:54.730
innovation.

00:03:54.730 --> 00:03:56.610
But it's important to balance
that momentum with

00:03:56.610 --> 00:03:57.680
interoperability.

00:03:57.680 --> 00:04:00.200
We want the whole web to evolve,
not just Chrome.

00:04:00.200 --> 00:04:01.680
That's where the second half
of our mission statement

00:04:01.680 --> 00:04:04.300
comes, good citizenship.

00:04:04.300 --> 00:04:05.670
I'm going to talk about a couple
of our initiatives in

00:04:05.670 --> 00:04:08.330
this area and how they might
be relevant to you guys, as

00:04:08.330 --> 00:04:09.610
web developers.

00:04:09.610 --> 00:04:11.250
The first thing I want to point
out is that all of our

00:04:11.250 --> 00:04:12.290
code is open source.

00:04:12.290 --> 00:04:15.550
So you can go to our project
page, chromium.org/blink, to

00:04:15.550 --> 00:04:16.329
download that.

00:04:16.329 --> 00:04:17.794
I'll show a link at the end.

00:04:17.794 --> 00:04:20.120
The next thing I want to talk
about is our transparent

00:04:20.120 --> 00:04:22.220
Launch Review process.

00:04:22.220 --> 00:04:24.630
Launch Review process is healthy
for projects in many

00:04:24.630 --> 00:04:25.800
different ways.

00:04:25.800 --> 00:04:28.090
For us, it's important for
external contributors to

00:04:28.090 --> 00:04:30.310
understand how they can work
with our team to lend their

00:04:30.310 --> 00:04:31.740
code in the codebase.

00:04:31.740 --> 00:04:33.560
It's also important to build
consensus early on in the

00:04:33.560 --> 00:04:36.400
development process and
avoid conflicts later.

00:04:36.400 --> 00:04:39.430
And finally-- and this one is
really important for us--

00:04:39.430 --> 00:04:41.430
we don't want to ship
proprietary features, and the

00:04:41.430 --> 00:04:43.390
launch process helps
avoid doing that.

00:04:43.390 --> 00:04:45.250
Basically, when we ship
something in Chrome on the web

00:04:45.250 --> 00:04:48.346
platform, we want all browsers
to ship it, not just Chrome.

00:04:48.346 --> 00:04:51.500
So the way this works in
practice is say you're a Blink

00:04:51.500 --> 00:04:54.210
engineer and you want to a web
platform feature or somehow

00:04:54.210 --> 00:04:57.450
change the behavior we expose
to web developers.

00:04:57.450 --> 00:04:59.800
Before you start writing code,
we ask you to first send an

00:04:59.800 --> 00:05:02.270
intent to implement email
to our public

00:05:02.270 --> 00:05:03.540
mailing list, blink-dev.

00:05:03.540 --> 00:05:06.240
This email follows a
template format.

00:05:06.240 --> 00:05:08.630
We ask you to provide a link
to the specification, a

00:05:08.630 --> 00:05:11.510
description of use cases and
motivation, and finally give

00:05:11.510 --> 00:05:13.370
an overview of compatibility
risk.

00:05:13.370 --> 00:05:15.600
And in that last section, what
we're looking for is, do other

00:05:15.600 --> 00:05:19.080
browser vendors think this
feature is a good idea?

00:05:19.080 --> 00:05:21.340
Is it making progress through
the standardization process?

00:05:21.340 --> 00:05:22.990
And usually, there's some
discussion that follows about

00:05:22.990 --> 00:05:25.500
whether this is something that
belongs in Blink or not.

00:05:25.500 --> 00:05:27.430
Later, when the feature's ready
to ship, we ask them to

00:05:27.430 --> 00:05:30.100
send another email, an intent
to ship email, which is

00:05:30.100 --> 00:05:32.340
scrutinized a little
bit more carefully.

00:05:32.340 --> 00:05:34.285
It's only been about a month or
so, but this launch process

00:05:34.285 --> 00:05:36.360
seems to be working
pretty well.

00:05:36.360 --> 00:05:39.570
We've had 40 of these
"Intent" threads.

00:05:39.570 --> 00:05:41.630
And of those, we're proud to
say that a third have come

00:05:41.630 --> 00:05:42.820
from non-Googlers.

00:05:42.820 --> 00:05:46.360
We've had "Intent" threads come
from people like Intel,

00:05:46.360 --> 00:05:49.480
Adobe, Opera, and, earlier
this week, Microsoft.

00:05:49.480 --> 00:05:51.940
So pretty exciting stuff.

00:05:51.940 --> 00:05:53.920
One thing I want to point out
before I move on is that this

00:05:53.920 --> 00:05:57.060
process isn't designed to
prevent us from shipping

00:05:57.060 --> 00:05:58.770
things only in Chrome.

00:05:58.770 --> 00:06:01.690
It's designed to force us to
be very deliberate and

00:06:01.690 --> 00:06:03.990
thoughtful if we ever
decide to do that.

00:06:03.990 --> 00:06:06.480
So that's just something
to keep in mind.

00:06:06.480 --> 00:06:08.320
Another thing I want to point
out is that everything I just

00:06:08.320 --> 00:06:09.580
talked about is public.

00:06:09.580 --> 00:06:12.010
You can participate and follow
along in our public mailing

00:06:12.010 --> 00:06:14.690
list, blink-dev@chromium.org.

00:06:14.690 --> 00:06:16.820
But at the same time, I
understand that not everyone

00:06:16.820 --> 00:06:19.720
has the time to follow all of
the intricacies of browser

00:06:19.720 --> 00:06:20.620
development.

00:06:20.620 --> 00:06:22.180
And so there are a couple other
ways that you can stay

00:06:22.180 --> 00:06:24.230
up to date on what we're working
on that don't involve

00:06:24.230 --> 00:06:25.550
so much traffic.

00:06:25.550 --> 00:06:28.150
So I'll talk about them and
order them on this slide from

00:06:28.150 --> 00:06:30.990
most traffic at the top, which
is blink-dev, to the ones with

00:06:30.990 --> 00:06:32.670
less noise at the bottom.

00:06:32.670 --> 00:06:36.505
So in addition to blink-dev,
we have a cool site called

00:06:36.505 --> 00:06:39.020
chromestatus.com, which I'll
show you guys now.

00:06:42.990 --> 00:06:45.350
Ooh, the resolution isn't
very good right now.

00:06:45.350 --> 00:06:47.500
Basically, this is a spreadsheet
where each row

00:06:47.500 --> 00:06:50.000
corresponds to a feature that
we're currently working on or

00:06:50.000 --> 00:06:51.340
recently shipped.

00:06:51.340 --> 00:06:52.890
There's some logistical
information, like the

00:06:52.890 --> 00:06:56.220
feature's name, who the owner
is, the bugs, its

00:06:56.220 --> 00:06:58.640
implementation status
in Chromium.

00:06:58.640 --> 00:07:01.020
And then over here, the
cells are colored.

00:07:01.020 --> 00:07:03.040
And these columns correspond
to things that we think

00:07:03.040 --> 00:07:05.830
reflect web citizenship, so for
example, progress through

00:07:05.830 --> 00:07:09.140
standardization, the views of
other browser vendors, the

00:07:09.140 --> 00:07:11.550
excitement from web
developers.

00:07:11.550 --> 00:07:14.430
And our goal with this is
to have a nice visual

00:07:14.430 --> 00:07:16.510
representation of how each
feature reflects our web

00:07:16.510 --> 00:07:17.610
citizenship.

00:07:17.610 --> 00:07:19.770
And then, as you scroll down,
you can kind of see the

00:07:19.770 --> 00:07:23.110
project's overall citizenship,
just based on these colors.

00:07:23.110 --> 00:07:26.370
So right now this is just an
iframed Google spreadsheet,

00:07:26.370 --> 00:07:28.140
but we're hoping to make
progress here.

00:07:28.140 --> 00:07:30.740
I'll point out how you can
actually subscribe to get

00:07:30.740 --> 00:07:33.150
email notifications when
there's changes made.

00:07:33.150 --> 00:07:36.180
Just go in here and enable
Notification Rules, and you

00:07:36.180 --> 00:07:38.030
can get emails to
stay up to date.

00:07:38.030 --> 00:07:40.240
I also want to point out that
we've gotten great community

00:07:40.240 --> 00:07:42.370
help with this spreadsheet.

00:07:42.370 --> 00:07:44.550
Is Masataka here from Japan?

00:07:44.550 --> 00:07:44.780
Yeah.

00:07:44.780 --> 00:07:46.580
Masataka has been an
enormous help.

00:07:46.580 --> 00:07:48.110
And we actually haven't met in
person yet, so it would be

00:07:48.110 --> 00:07:49.660
great if you could come
up after the talk.

00:07:49.660 --> 00:07:50.510
But yeah.

00:07:50.510 --> 00:07:53.230
It's really awesome to see
people coming together to help

00:07:53.230 --> 00:07:56.710
build this set of information.

00:07:56.710 --> 00:07:56.950
OK.

00:07:56.950 --> 00:07:58.360
Back to the slides.

00:07:58.360 --> 00:08:00.890
So those are two ways you can
stay up to date on features.

00:08:00.890 --> 00:08:03.520
A third way is through our
Developer Relations team.

00:08:03.520 --> 00:08:07.510
They have Google+ and Twitter
channels that you can follow.

00:08:07.510 --> 00:08:10.250
And then finally, every time we
launch a new Chrome beta,

00:08:10.250 --> 00:08:12.705
we publish a Chromium blog post
which describes all of

00:08:12.705 --> 00:08:15.120
the web platform changes, and
that includes things like

00:08:15.120 --> 00:08:17.660
deprecations, which might
be relevant to you guys.

00:08:17.660 --> 00:08:19.410
So these are a couple ways that
you can stay up to date

00:08:19.410 --> 00:08:21.400
on what's going on in Blink.

00:08:21.400 --> 00:08:22.660
Again, you can get
this information

00:08:22.660 --> 00:08:24.406
on our project page.

00:08:24.406 --> 00:08:27.060
So the last thing I want to talk
about before we turn it

00:08:27.060 --> 00:08:30.640
over to Q&amp;A is web platform
feature adoption.

00:08:30.640 --> 00:08:32.429
Google's in a pretty unique
place, in terms of

00:08:32.429 --> 00:08:34.320
understanding how people
are using the web.

00:08:34.320 --> 00:08:35.940
We want to make this information
available to other

00:08:35.940 --> 00:08:38.020
people who might be
interested in it.

00:08:38.020 --> 00:08:41.840
So what you're looking
at here is data from

00:08:41.840 --> 00:08:42.820
Google Search Index.

00:08:42.820 --> 00:08:45.920
Basically, what we did is we
ran a graph over all of the

00:08:45.920 --> 00:08:49.180
pages that we have and
tried to look for new

00:08:49.180 --> 00:08:50.690
HTML5 element tags.

00:08:50.690 --> 00:08:53.050
And so this top line, for
example, is header.

00:08:53.050 --> 00:08:56.970
And you can see that usage has
increased from something like

00:08:56.970 --> 00:09:00.950
7% of web pages a couple months
ago to near 9% now.

00:09:00.950 --> 00:09:04.030
So this graph is just kind
of useful information.

00:09:04.030 --> 00:09:07.200
But we're trying to get the
similar data for CSS and for

00:09:07.200 --> 00:09:08.840
JavaScript APIs.

00:09:08.840 --> 00:09:11.070
And this could be useful in a
couple ways that I'll just

00:09:11.070 --> 00:09:12.210
list out now.

00:09:12.210 --> 00:09:15.650
One is say you're a browser
engineer, and you're trying to

00:09:15.650 --> 00:09:17.146
optimize CSS.

00:09:17.146 --> 00:09:19.530
It would be pretty useful to
have a list of all of the CSS

00:09:19.530 --> 00:09:21.790
properties and their frequency
across the web so that you can

00:09:21.790 --> 00:09:24.860
know which code pass would be
most efficient to optimize.

00:09:24.860 --> 00:09:28.920
Another example is, say you're
a specification editor, and

00:09:28.920 --> 00:09:31.460
you want to know if you can make
breaking changes to the

00:09:31.460 --> 00:09:33.180
spec without breaking the web.

00:09:33.180 --> 00:09:36.180
This would help you feel
comfortable doing that.

00:09:36.180 --> 00:09:37.970
For web developers, it's just
interesting to see what's

00:09:37.970 --> 00:09:39.430
reaching the mainstream
and what they can

00:09:39.430 --> 00:09:41.210
use in their websites.

00:09:41.210 --> 00:09:45.300
And finally, this is important
for us as the Blink team, is

00:09:45.300 --> 00:09:48.500
that we can get information
on when we can responsibly

00:09:48.500 --> 00:09:49.930
deprecate features.

00:09:49.930 --> 00:09:51.800
And so a good example of this
is with prefixed versus

00:09:51.800 --> 00:09:53.630
unprefixed features.

00:09:53.630 --> 00:09:56.140
Oftentimes, when we release
an unprefixed version of a

00:09:56.140 --> 00:09:59.170
feature, we can't remove support
for the prefixed

00:09:59.170 --> 00:10:01.480
version because the
web would break.

00:10:01.480 --> 00:10:04.270
And so we're stuck with this old
code path for the prefixed

00:10:04.270 --> 00:10:06.820
version when we really don't
need it any more, because we

00:10:06.820 --> 00:10:08.110
have the unprefixed version.

00:10:08.110 --> 00:10:11.910
And so we can use this system to
track not only adoption of

00:10:11.910 --> 00:10:14.390
new features, but also decline
of old features and knowing we

00:10:14.390 --> 00:10:17.290
can feel comfortable
removing them.

00:10:17.290 --> 00:10:19.510
So this is the project page
I was referencing,

00:10:19.510 --> 00:10:20.770
chromium.org/blink.

00:10:20.770 --> 00:10:21.060
Go there.

00:10:21.060 --> 00:10:23.640
There's a bunch of
information.

00:10:23.640 --> 00:10:25.630
And then, just to summarize real
quick, Alex talked a lot

00:10:25.630 --> 00:10:27.000
about how Blink enables
technical

00:10:27.000 --> 00:10:28.460
innovation on the web.

00:10:28.460 --> 00:10:30.870
And I talked about how it's
important to stay good

00:10:30.870 --> 00:10:33.700
citizens and make sure that
innovation goes both ways,

00:10:33.700 --> 00:10:35.330
both from the community
to Blink and from

00:10:35.330 --> 00:10:36.730
Blink to the community.

00:10:36.730 --> 00:10:38.920
So now we have time for some
Q&amp;A. And I'm going to invite

00:10:38.920 --> 00:10:40.886
some people from the team up.

00:10:40.886 --> 00:10:42.190
ALEX KOMOROSKE: So Darin,
Eric, and Paul, you

00:10:42.190 --> 00:10:43.440
want to come up?

00:10:46.722 --> 00:10:48.160
MAX HEINRITZ: Yeah.

00:10:48.160 --> 00:10:54.190
So we have a Google Moderator.

00:10:54.190 --> 00:10:58.340
And we're taking questions
from the audience, too.

00:10:58.340 --> 00:10:59.310
So do you guys want
to introduce

00:10:59.310 --> 00:11:01.970
yourselves real quick?

00:11:01.970 --> 00:11:03.220
DARIN FISHER: Sure.

00:11:05.550 --> 00:11:06.480
PAUL IRISH: My name
is Paul Irish.

00:11:06.480 --> 00:11:11.700
I'm a Developer Advocate
for Chrome.

00:11:11.700 --> 00:11:12.370
My name's Eric Seidel.

00:11:12.370 --> 00:11:14.760
I work on Blink.

00:11:14.760 --> 00:11:15.240
DARIN FISHER: Hi.

00:11:15.240 --> 00:11:16.330
My name's Darin Fisher.

00:11:16.330 --> 00:11:17.870
I'm an engineering
lead on Chrome.

00:11:20.480 --> 00:11:20.940
MAX HEINRITZ: OK.

00:11:20.940 --> 00:11:24.370
So you guys are welcome to come
up to the microphones if

00:11:24.370 --> 00:11:25.080
you have any questions.

00:11:25.080 --> 00:11:26.700
Otherwise, we'll just run
through the Dory.

00:11:26.700 --> 00:11:26.970
OK.

00:11:26.970 --> 00:11:29.430
I'll start with an audience
question.

00:11:29.430 --> 00:11:32.090
AUDIENCE: One thing I want to
know, please, when Blink is

00:11:32.090 --> 00:11:34.160
coming to Android WebView.

00:11:34.160 --> 00:11:37.550
Right now WebView classic is
there, and there's support

00:11:37.550 --> 00:11:40.620
for, if you install
Chrome, then the

00:11:40.620 --> 00:11:43.760
view defaults to Chrome.

00:11:43.760 --> 00:11:45.690
But when will Blink
will become a

00:11:45.690 --> 00:11:48.920
default WebView on Android?

00:11:48.920 --> 00:11:51.630
DARIN FISHER: So actually, if
you follow the chromium.org

00:11:51.630 --> 00:11:53.840
project, you can see that
there's an Android WebView

00:11:53.840 --> 00:11:56.530
project being built there.

00:11:56.530 --> 00:12:00.610
You can actually check out the
code and try it yourself.

00:12:00.610 --> 00:12:03.260
What I can say is that it's
under development.

00:12:03.260 --> 00:12:06.030
We're very interested, of
course, in bringing the best

00:12:06.030 --> 00:12:09.350
of the Chromium engine, Blink
included, to Android.

00:12:09.350 --> 00:12:12.280
And that includes not only
Chrome on Android but also the

00:12:12.280 --> 00:12:13.530
WebView implementation.

00:12:16.300 --> 00:12:19.270
AUDIENCE: Right now the Coda,
which is in Android underscore

00:12:19.270 --> 00:12:25.600
WebView, there's a TestShell
there, which you can build.

00:12:25.600 --> 00:12:28.080
I guess it doesn't work.

00:12:28.080 --> 00:12:31.340
Or at least it's kind of
partly implemented.

00:12:31.340 --> 00:12:32.590
Right?

00:12:35.270 --> 00:12:39.330
ERIC SEIDEL: So in terms of
developing Blink on Android,

00:12:39.330 --> 00:12:41.650
generally we actually
use Content Shell.

00:12:41.650 --> 00:12:42.560
That's sort of a new way.

00:12:42.560 --> 00:12:44.010
TestShell was the old way.

00:12:44.010 --> 00:12:44.440
And you're right.

00:12:44.440 --> 00:12:47.390
Both of them are under a lot
of flux right now after the

00:12:47.390 --> 00:12:48.480
Blink transition.

00:12:48.480 --> 00:12:50.270
And I think you'll see
those stabilize

00:12:50.270 --> 00:12:51.030
in the coming months.

00:12:51.030 --> 00:12:51.813
AUDIENCE: OK.

00:12:51.813 --> 00:12:53.063
Cool.

00:12:55.270 --> 00:12:56.000
AUDIENCE: Hi.

00:12:56.000 --> 00:12:58.660
My question is about
vendor prefixes.

00:12:58.660 --> 00:13:03.750
So Blink won't be having them,
and instead opting for kind of

00:13:03.750 --> 00:13:08.090
like a dev gate for experimental
features.

00:13:08.090 --> 00:13:12.840
Now some prefixed CSS properties
are older than

00:13:12.840 --> 00:13:16.800
Chrome itself and are still
prefixed in Chrome.

00:13:16.800 --> 00:13:20.780
However, I've been deploying
them in apps

00:13:20.780 --> 00:13:22.770
for many years now.

00:13:22.770 --> 00:13:26.850
So my worry with this new policy
is that the only saving

00:13:26.850 --> 00:13:30.920
grace of vendor prefixes will
be lost, that I won't get to

00:13:30.920 --> 00:13:35.720
push new web platform features
to users in a

00:13:35.720 --> 00:13:37.960
near-term time frame.

00:13:37.960 --> 00:13:42.660
So my question is, how
aggressively is the Chrome

00:13:42.660 --> 00:13:46.420
team going to be locking away
these experimental features

00:13:46.420 --> 00:13:50.170
behind this dev wall?

00:13:50.170 --> 00:13:53.200
ERIC SEIDEL: So I'll take the
first part of that question.

00:13:53.200 --> 00:13:56.710
To start with, vendor prefixes,
as probably most of

00:13:56.710 --> 00:14:01.620
you know, are when it
says WebKit-fu as a

00:14:01.620 --> 00:14:03.210
property or as a value.

00:14:03.210 --> 00:14:05.390
And we in Blink are trying
to avoid that.

00:14:05.390 --> 00:14:07.635
We don't want to introduce
yet another Blink-fu.

00:14:10.500 --> 00:14:13.220
Vendor prefixes are just like
any other API that we've

00:14:13.220 --> 00:14:16.400
shipped, and we don't
want to break.

00:14:16.400 --> 00:14:19.600
So we have been measuring, like
max has said, to make

00:14:19.600 --> 00:14:22.180
sure that we don't break
your website as we

00:14:22.180 --> 00:14:23.290
work to remove these.

00:14:23.290 --> 00:14:26.840
And most of that policy is about
forward looking, that we

00:14:26.840 --> 00:14:28.530
don't want to add new ones.

00:14:28.530 --> 00:14:32.685
And we'll be trying to remove
the existing ones as we find

00:14:32.685 --> 00:14:36.280
that we can, as their
usage falls off.

00:14:36.280 --> 00:14:37.640
ALEX KOMOROSKE: So I think a
second part of your question

00:14:37.640 --> 00:14:41.840
as well is this concern that the
prefixing system used to

00:14:41.840 --> 00:14:45.260
allow new emerging web standards
or features to be

00:14:45.260 --> 00:14:48.450
deployed before they were
fully standardized.

00:14:48.450 --> 00:14:50.540
And that allows you to play with
all these great goodies.

00:14:50.540 --> 00:14:53.530
The problem is that prefixing
was supposed to be a warning

00:14:53.530 --> 00:14:55.450
to developers of don't
rely on this.

00:14:55.450 --> 00:14:57.470
It might go away at any time.

00:14:57.470 --> 00:14:59.920
But it's just like any other
API, where people start using

00:14:59.920 --> 00:15:02.500
it, and then if you turn
it off, the web breaks.

00:15:02.500 --> 00:15:08.160
And so with this process, it's
definitely something where we

00:15:08.160 --> 00:15:10.440
have to push a little bit harder
and talk with people

00:15:10.440 --> 00:15:13.890
like Mozilla, for example, the
guy behind you in line there,

00:15:13.890 --> 00:15:15.400
to talk about features.

00:15:15.400 --> 00:15:16.730
And we think this is
a great feature.

00:15:16.730 --> 00:15:18.060
What are your plans?

00:15:18.060 --> 00:15:20.670
If Mozilla says, yeah, we
love this too, awesome.

00:15:20.670 --> 00:15:22.860
If there's a spec, awesome.

00:15:22.860 --> 00:15:25.125
But it definitely will require
us to push a little bit harder

00:15:25.125 --> 00:15:27.370
to make sure that other browser
vendors are interested

00:15:27.370 --> 00:15:29.550
in the same things that we're
interested in turning on.

00:15:29.550 --> 00:15:31.710
AUDIENCE: Do you think that
the pace of progress might

00:15:31.710 --> 00:15:35.242
slow down, as a result?

00:15:35.242 --> 00:15:37.150
DARIN FISHER: I think that's
a great question.

00:15:37.150 --> 00:15:41.610
I think that we're very
fortunate that we are not

00:15:41.610 --> 00:15:43.890
alone in having a six-week
release cycle.

00:15:43.890 --> 00:15:46.045
If you look at Mozilla, they
also have an accelerated

00:15:46.045 --> 00:15:49.330
release cycle, and they also
have a desire not to ship

00:15:49.330 --> 00:15:52.325
vendor prefix features.

00:15:52.325 --> 00:15:54.790
And since they also have a
desire to improve the web

00:15:54.790 --> 00:15:56.930
platform, it seems like
we have this wonderful

00:15:56.930 --> 00:16:01.110
opportunity to capitalize on
this shared ambition to

00:16:01.110 --> 00:16:04.910
improve the platform and not
just litter it with a bunch of

00:16:04.910 --> 00:16:08.930
Moz dash and WebKit dash or
Blink dash, to actually do the

00:16:08.930 --> 00:16:10.700
right thing and move quickly.

00:16:10.700 --> 00:16:13.410
And so, actually, in many ways I
feel like we can actually do

00:16:13.410 --> 00:16:15.480
a better job than we
could in the past.

00:16:15.480 --> 00:16:17.360
Because in the past,
what did we do?

00:16:17.360 --> 00:16:20.490
We added something, and then
when another vendor came

00:16:20.490 --> 00:16:22.210
along, they want to do it
a little differently.

00:16:22.210 --> 00:16:24.390
And then we had another
way to do it.

00:16:24.390 --> 00:16:26.710
And you end up with multiple
different ways of doing the

00:16:26.710 --> 00:16:27.270
same thing.

00:16:27.270 --> 00:16:29.790
For example, we had three
different ways in CSS of

00:16:29.790 --> 00:16:31.220
expressing gradient.

00:16:31.220 --> 00:16:32.500
That's not fun.

00:16:32.500 --> 00:16:35.100
And so, it seems really
promising now that, like I

00:16:35.100 --> 00:16:39.467
said, with Mozilla on the
six-week release cycle and

00:16:39.467 --> 00:16:42.580
Chrome on a six-week release
cycle that we could be able to

00:16:42.580 --> 00:16:46.700
do the right thing
and quicker.

00:16:46.700 --> 00:16:52.190
PAUL IRISH: I guess I'll also
add that browser vendors and

00:16:52.190 --> 00:16:55.340
sanders groups have felt a
greater urgency to get things

00:16:55.340 --> 00:16:59.305
done and get it shipped and
available to users recently.

00:16:59.305 --> 00:17:02.490
The CSS working group, in
particular, has identified

00:17:02.490 --> 00:17:05.940
that getting things to Candidate
Rec, which is the

00:17:05.940 --> 00:17:11.760
point at which, basically, there
is multi-vendor interest

00:17:11.760 --> 00:17:15.170
in implementations out there,
that that is a key target to

00:17:15.170 --> 00:17:17.950
get done within a year.

00:17:17.950 --> 00:17:21.579
And so, sanders groups really
want to make sure that things

00:17:21.579 --> 00:17:25.030
are accelerated and still
everyone had a chance and

00:17:25.030 --> 00:17:25.979
developers have a chance
to get feedback.

00:17:25.979 --> 00:17:30.360
At the same time, browser
vendors don't want a bunch of

00:17:30.360 --> 00:17:33.950
features to be locked behind
this one flag for years.

00:17:33.950 --> 00:17:36.970
We want to make sure that
they ship out too.

00:17:36.970 --> 00:17:39.690
Now I think this model's really
good, because we're not

00:17:39.690 --> 00:17:42.490
able to ship a feature that just
kind of sits out there in

00:17:42.490 --> 00:17:44.415
prefix land forever.

00:17:44.415 --> 00:17:45.430
It's not shipped.

00:17:45.430 --> 00:17:47.680
And so we want it to get out
there, and we're going to do

00:17:47.680 --> 00:17:50.080
the legwork to make sure that it
reaches the standardization

00:17:50.080 --> 00:17:52.730
goals so that it can actually
get to users.

00:17:52.730 --> 00:17:57.450
But I expect that you're going
to see things quick.

00:17:57.450 --> 00:17:59.830
You're going to have it
available for your users as

00:17:59.830 --> 00:18:01.310
soon as we can make it happen.

00:18:01.310 --> 00:18:02.310
AUDIENCE: That all
sounds fantastic.

00:18:02.310 --> 00:18:04.750
Thanks a lot, guys.

00:18:04.750 --> 00:18:08.856
MAX HEINRITZ: Let's do one
question from the Dory.

00:18:08.856 --> 00:18:09.280
ALEX KOMOROSKE: That's
all right.

00:18:09.280 --> 00:18:09.540
MAX HEINRITZ: Go ahead.

00:18:09.540 --> 00:18:11.520
AUDIENCE: I just wanted to know
what the expected user

00:18:11.520 --> 00:18:13.840
flow was for enabling
these features.

00:18:13.840 --> 00:18:16.690
Is there a way that we can kind
of prompt users and say,

00:18:16.690 --> 00:18:19.400
hey, I'm going to use this
special feature, say, on a

00:18:19.400 --> 00:18:22.130
Chrome experiment site and
I get a little bit easier

00:18:22.130 --> 00:18:24.630
interaction, so they don't have
to go to Chrome Flags and

00:18:24.630 --> 00:18:25.050
enable it deeper?

00:18:25.050 --> 00:18:27.480
ALEX KOMOROSKE: So that's
actually intentional.

00:18:27.480 --> 00:18:27.780
AUDIENCE: I know.

00:18:27.780 --> 00:18:28.510
ALEX KOMOROSKE: About flags
is a little bit

00:18:28.510 --> 00:18:30.270
scary for our end users.

00:18:30.270 --> 00:18:32.180
And we know that.

00:18:32.180 --> 00:18:33.605
And that's one of the reasons
that's the place you

00:18:33.605 --> 00:18:34.350
go in to flip it.

00:18:34.350 --> 00:18:38.660
Otherwise, you convince all
your users, all the users

00:18:38.660 --> 00:18:42.020
everywhere, to flip their
experimental flags on, and now

00:18:42.020 --> 00:18:43.280
that's de facto.

00:18:43.280 --> 00:18:46.730
And so we are definitely trying
to figure out how to

00:18:46.730 --> 00:18:47.920
balance this.

00:18:47.920 --> 00:18:49.900
So you want people to be able
to use the features, to use

00:18:49.900 --> 00:18:52.230
them in real life websites
and give feedback to

00:18:52.230 --> 00:18:54.600
standardization to other
browser vendors.

00:18:54.600 --> 00:18:57.660
But you also don't want to
get them stuck with a bad

00:18:57.660 --> 00:18:59.690
implementation that
you can't change.

00:18:59.690 --> 00:18:59.930
AUDIENCE: No.

00:18:59.930 --> 00:19:01.190
I definitely understand that.

00:19:01.190 --> 00:19:03.870
With prefixes, it was a
transparent process.

00:19:03.870 --> 00:19:07.340
With the notification, then
it's a user op-in.

00:19:07.340 --> 00:19:09.950
And major websites aren't
going to ask the user to

00:19:09.950 --> 00:19:12.790
enable 100 different
experimental things.

00:19:12.790 --> 00:19:15.840
But I'm afraid that it might
change the way that

00:19:15.840 --> 00:19:18.580
experimentations with the new
features are exposed.

00:19:18.580 --> 00:19:20.630
If it's only developers that are
going in an changing those

00:19:20.630 --> 00:19:25.080
flags, then you're not going
to get as much community

00:19:25.080 --> 00:19:26.330
interest from the
non-developers.

00:19:29.640 --> 00:19:31.240
DARIN FISHER: Here's one
way to look at it.

00:19:31.240 --> 00:19:35.000
Before Blink, it was a little
bit more difficult for us to

00:19:35.000 --> 00:19:37.090
experiment with web
platform features.

00:19:37.090 --> 00:19:40.250
And now we have the ability to
more easily put things in

00:19:40.250 --> 00:19:41.100
behind a flag.

00:19:41.100 --> 00:19:43.380
And that allows us to not only
get an implementation

00:19:43.380 --> 00:19:46.040
experience, but it also
allows web developers

00:19:46.040 --> 00:19:47.610
to try it more easily.

00:19:47.610 --> 00:19:51.570
Previously, if we wanted to do
that kind of thing, often it

00:19:51.570 --> 00:19:54.790
meant doing a branch of Chromium
and then trying to

00:19:54.790 --> 00:19:56.660
get somebody to download
that custom build.

00:19:56.660 --> 00:19:59.450
It was a lot harder to get the
feedback that we need from web

00:19:59.450 --> 00:20:00.400
developers.

00:20:00.400 --> 00:20:02.630
So really, hopefully this
accelerates the feedback

00:20:02.630 --> 00:20:04.505
process and improves--

00:20:04.505 --> 00:20:07.190
That's a big part of the
standardization process is

00:20:07.190 --> 00:20:10.920
getting web developers to chime
in and give their input.

00:20:10.920 --> 00:20:13.290
And being able to actually try
out an implementation is key

00:20:13.290 --> 00:20:15.780
to that, but also to be able
to try without making that

00:20:15.780 --> 00:20:18.320
long-term commitment that
we do have when

00:20:18.320 --> 00:20:19.550
we release a feature.

00:20:19.550 --> 00:20:23.630
And as, I think, others on the
panel have said, when we ship

00:20:23.630 --> 00:20:26.080
something with a vendor prefix,
it was just as much of

00:20:26.080 --> 00:20:30.560
a commitment to the web
community as an API that was

00:20:30.560 --> 00:20:30.985
unprefixed.

00:20:30.985 --> 00:20:33.590
It doesn't really matter
that it's in

00:20:33.590 --> 00:20:34.610
some standard somewhere.

00:20:34.610 --> 00:20:37.340
If we put it there and people
start depending on it, we're

00:20:37.340 --> 00:20:38.330
stuck with it.

00:20:38.330 --> 00:20:40.620
It's part of the platform,
like it or not.

00:20:40.620 --> 00:20:43.990
And so we just wanted to sort of
turn that around and focus

00:20:43.990 --> 00:20:47.000
on trying to do the right
thing and not creating

00:20:47.000 --> 00:20:49.120
more of this mess.

00:20:49.120 --> 00:20:49.600
AUDIENCE: Thank you.

00:20:49.600 --> 00:20:51.516
Flexbox is a pretty good
example of that.

00:20:54.280 --> 00:20:54.530
MAX HEINRITZ: OK.

00:20:54.530 --> 00:20:56.440
Let's do one question from the
Moderator, and then we'll take

00:20:56.440 --> 00:20:58.240
another audience question.

00:20:58.240 --> 00:21:01.190
So the question is, "Chrome on
Windows has had issues with

00:21:01.190 --> 00:21:03.410
webfont rendering for a
long time now, even

00:21:03.410 --> 00:21:04.670
with Google Web Fonts.

00:21:04.670 --> 00:21:09.220
Is solving these issues
a priority on Blink?".

00:21:09.220 --> 00:21:11.650
DARIN FISHER: Absolutely.

00:21:11.650 --> 00:21:14.410
This was specifically asking
about fonts on Windows?

00:21:14.410 --> 00:21:15.500
Yeah.

00:21:15.500 --> 00:21:18.190
Actually, we have work underway
to add support for

00:21:18.190 --> 00:21:20.980
subpixel positioning of
fonts on Windows.

00:21:20.980 --> 00:21:23.440
We have that enabled
on other platforms.

00:21:23.440 --> 00:21:27.350
The challenge on Windows is just
that the GDI, the font

00:21:27.350 --> 00:21:28.890
rendering system that
we have been using,

00:21:28.890 --> 00:21:29.940
doesn't support it.

00:21:29.940 --> 00:21:32.700
And we're working to move
to DirectWrite.

00:21:32.700 --> 00:21:35.620
The challenge with DirectWrite
is our sandbox architecture

00:21:35.620 --> 00:21:39.100
kind of works against the
way DirectWrite works.

00:21:39.100 --> 00:21:41.720
However, there is a solution
to that, and it's in

00:21:41.720 --> 00:21:42.390
development now.

00:21:42.390 --> 00:21:47.770
And so it should be available
behind a flag shortly, if not

00:21:47.770 --> 00:21:51.724
in a canary shortly after.

00:21:51.724 --> 00:21:52.710
MAX HEINRITZ: Cool.

00:21:52.710 --> 00:21:53.530
Audience question.

00:21:53.530 --> 00:21:55.080
Let's go here.

00:21:55.080 --> 00:21:56.260
AUDIENCE: Yeah.

00:21:56.260 --> 00:21:58.570
In building on what you talked
about, about getting the new

00:21:58.570 --> 00:22:01.815
APIs out quicker in a year, I'm
obviously familiar with

00:22:01.815 --> 00:22:05.940
that and have worked with you
guys on several things.

00:22:05.940 --> 00:22:09.890
In the future, a few years now,
lots more APIs will be in

00:22:09.890 --> 00:22:11.130
the web platform.

00:22:11.130 --> 00:22:12.490
And Paul, you talked
about it as the

00:22:12.490 --> 00:22:16.080
platform and "The Platform".

00:22:16.080 --> 00:22:18.900
I guess my question is, with
Boot to Gecko, we want to

00:22:18.900 --> 00:22:21.920
start a conversation, and a
conversation with everyone.

00:22:21.920 --> 00:22:26.300
And have you guys felt
internally those urges of,

00:22:26.300 --> 00:22:29.350
hey, what about when we land
these powerful features that

00:22:29.350 --> 00:22:32.470
give us parity with things
people are able to do on apps

00:22:32.470 --> 00:22:34.200
on the phone and stuff
like that and

00:22:34.200 --> 00:22:35.480
these native languages?

00:22:35.480 --> 00:22:38.990
Have you talked about what
comes next outside of the

00:22:38.990 --> 00:22:42.510
browser or the web being a
foundation for a device like a

00:22:42.510 --> 00:22:43.880
phone or anything like that?

00:22:46.550 --> 00:22:48.770
DARIN FISHER: It sounds like, as
you probably know, we have

00:22:48.770 --> 00:22:50.700
the Chrome packaged
app system.

00:22:50.700 --> 00:22:53.770
And there's a lot of overlap
there with Boot to Gecki.

00:22:53.770 --> 00:22:55.760
I don't know if you were here
for the previous talk.

00:22:55.760 --> 00:22:58.540
Eric answered a similar question
about Sys Apps

00:22:58.540 --> 00:23:01.740
Working Group and
standardization of these sort

00:23:01.740 --> 00:23:09.070
of web platform extensions that
are designed to allow you

00:23:09.070 --> 00:23:11.330
to build apps that live in
that native apps style

00:23:11.330 --> 00:23:15.100
sandbox, as opposed to drive
by web style sandbox.

00:23:15.100 --> 00:23:19.040
And I think it's absolutely a
really rich area to explore

00:23:19.040 --> 00:23:23.260
collaboration and finding ways
to standardize and agree on

00:23:23.260 --> 00:23:25.790
what these APIs look like.

00:23:25.790 --> 00:23:28.900
It's sort of the early days for
some of these platforms.

00:23:28.900 --> 00:23:33.250
And I know that our team has
been talking with folks at

00:23:33.250 --> 00:23:39.680
Mozilla and trying to find
commonalities, trying to learn

00:23:39.680 --> 00:23:42.270
more about how each other's
thinking about it.

00:23:42.270 --> 00:23:42.390
AUDIENCE: Yeah.

00:23:42.390 --> 00:23:47.280
I just had to ask after seeing
the giant Chrome Android.

00:23:47.280 --> 00:23:49.510
ALEX KOMOROSKE: We think
the web is pretty cool.

00:23:49.510 --> 00:23:50.730
If that wasn't clear.

00:23:50.730 --> 00:23:52.300
MAX HEINRITZ: Let's do a live
question over here.

00:23:52.300 --> 00:23:53.350
AUDIENCE: Hey.

00:23:53.350 --> 00:23:57.940
I'm a bit curious about
resources on the Blink team.

00:23:57.940 --> 00:24:02.990
So now that you started out up
at the Blink project, the

00:24:02.990 --> 00:24:05.470
upper guys have joined too, what
does this mean in terms

00:24:05.470 --> 00:24:06.850
of resources on the team?

00:24:06.850 --> 00:24:09.770
Are you scaling up the team
internally to invest more

00:24:09.770 --> 00:24:12.390
resources into Blink and the
rendering engine, or are you

00:24:12.390 --> 00:24:14.200
going to continue at
the same pace?

00:24:14.200 --> 00:24:18.530
What does it mean that Opera
has joined the project?

00:24:18.530 --> 00:24:21.570
ERIC SEIDEL: So I think the
bigger wins have come less

00:24:21.570 --> 00:24:25.260
from us hiring more people--
because, as far as I know, I

00:24:25.260 --> 00:24:27.760
haven't seen a lot of new
people being hired--

00:24:27.760 --> 00:24:31.220
and more just there's a certain
budget of complexity

00:24:31.220 --> 00:24:32.530
for our project.

00:24:32.530 --> 00:24:35.060
There's only so many
things you can do.

00:24:35.060 --> 00:24:39.610
And when we were in WebKit, we
had to do 101 things that we

00:24:39.610 --> 00:24:41.150
just didn't need to do.

00:24:41.150 --> 00:24:44.060
And now we just got rid of those
101 things, and so now

00:24:44.060 --> 00:24:47.390
we can take that same complexity
budget and spend it

00:24:47.390 --> 00:24:50.610
on much more interesting
features for you guys, on

00:24:50.610 --> 00:24:53.470
getting features to you faster,
on doing interesting

00:24:53.470 --> 00:24:56.780
things like runtime flags.

00:24:56.780 --> 00:24:59.710
And so I don't see our team size
changing very quickly.

00:24:59.710 --> 00:25:03.850
These guys would know better
than I. But we suddenly have a

00:25:03.850 --> 00:25:07.080
whole lot more mind share
to spread around.

00:25:07.080 --> 00:25:09.760
DARIN FISHER: I would just add
that we love to grow the team

00:25:09.760 --> 00:25:12.360
with talented engineers who are
interested in improving

00:25:12.360 --> 00:25:13.610
the web platform.

00:25:17.206 --> 00:25:18.456
MAX HEINRITZ: OK.

00:25:20.480 --> 00:25:22.790
Another live question.

00:25:22.790 --> 00:25:25.320
AUDIENCE: So my question
involves the

00:25:25.320 --> 00:25:28.340
divergence from WebKit.

00:25:28.340 --> 00:25:30.860
Right now, when we're building
websites, you

00:25:30.860 --> 00:25:31.620
check it against IE.

00:25:31.620 --> 00:25:33.820
You check it against
a WebKit browser.

00:25:33.820 --> 00:25:36.900
You should test events against
both Chrome and Safari.

00:25:36.900 --> 00:25:40.150
But for the most part, WebKit
is WebKit, and all WebKit

00:25:40.150 --> 00:25:43.380
browsers render things pretty
much the same way.

00:25:43.380 --> 00:25:49.250
Moving forward, as Chrome and
Blink adds features, like the

00:25:49.250 --> 00:25:56.850
Web MIDI API that WebKit is
opposed to, I don't want to

00:25:56.850 --> 00:26:10.540
say fragmentation, but how can
we move forward from this

00:26:10.540 --> 00:26:13.300
world we're in now, where we
have to check against all

00:26:13.300 --> 00:26:16.920
these different rendering
engines, if we keep adding

00:26:16.920 --> 00:26:20.200
features to some rendering
engines that other ones just

00:26:20.200 --> 00:26:23.190
do not want to do at all?

00:26:23.190 --> 00:26:26.230
ALEX KOMOROSKE: So to be clear
on that specific example, Max

00:26:26.230 --> 00:26:29.120
was talking earlier about our
intent to implement versus

00:26:29.120 --> 00:26:30.390
intent to ship.

00:26:30.390 --> 00:26:31.360
So it's very different.

00:26:31.360 --> 00:26:34.640
So the intent to ship is, yes,
we are ready to commit to this

00:26:34.640 --> 00:26:36.130
forever, basically.

00:26:36.130 --> 00:26:38.710
Intent to implement is, yeah, we
think this is interesting.

00:26:38.710 --> 00:26:39.900
We think that this could
be something we

00:26:39.900 --> 00:26:40.440
would want to ship.

00:26:40.440 --> 00:26:43.010
It's worthwhile to get the
experience of implementing it,

00:26:43.010 --> 00:26:45.280
getting it in the hands of
developers behind a flag and

00:26:45.280 --> 00:26:46.050
playing around with it.

00:26:46.050 --> 00:26:49.420
So Web MIDI has had its intent
to implement on blink-dev.

00:26:49.420 --> 00:26:52.310
And it looks interesting.

00:26:52.310 --> 00:26:54.740
We're a little bit concerned
about some of the issues that

00:26:54.740 --> 00:26:55.860
you just talked about.

00:26:55.860 --> 00:26:58.330
And before we'd ever ship it,
by default we'd have to very

00:26:58.330 --> 00:27:00.250
carefully weigh those
kinds of things.

00:27:00.250 --> 00:27:02.240
So throughout all of this,
we want to minimize that

00:27:02.240 --> 00:27:03.560
compatibility risk.

00:27:03.560 --> 00:27:05.210
Because every time that there's
a feature that you

00:27:05.210 --> 00:27:07.060
could target in one browser
that you can't target in

00:27:07.060 --> 00:27:09.740
others, that hurts compatibility
a little bit.

00:27:09.740 --> 00:27:12.820
And so we're very aware of that,
and we think about it

00:27:12.820 --> 00:27:14.350
basically throughout all
these decisions.

00:27:14.350 --> 00:27:18.270
It's one of the primary
things in our heads.

00:27:18.270 --> 00:27:20.640
One other area that we can help
address this, by the way,

00:27:20.640 --> 00:27:21.620
is testing.

00:27:21.620 --> 00:27:24.050
So to some extent, one of the
reasons that you have to do a

00:27:24.050 --> 00:27:26.890
lot of testing is because
browsers implement different

00:27:26.890 --> 00:27:28.610
standards slightly differently,
or maybe the

00:27:28.610 --> 00:27:31.390
standard wasn't clear
on something or was

00:27:31.390 --> 00:27:33.280
ambiguous in some area.

00:27:33.280 --> 00:27:36.610
But actually, having better
testing can help the different

00:27:36.610 --> 00:27:38.700
browser vendors just make
sure they work the same.

00:27:38.700 --> 00:27:41.260
And if you find something
where they both work

00:27:41.260 --> 00:27:43.960
differently but they both are
within the terms of the spec,

00:27:43.960 --> 00:27:44.980
well, the spec has a bug.

00:27:44.980 --> 00:27:47.520
Fix that bug in the spec, and
figure out what the right

00:27:47.520 --> 00:27:48.630
behavior is.

00:27:48.630 --> 00:27:52.150
And so we're looking into
working with a bunch of other

00:27:52.150 --> 00:27:55.355
folks to improve coverage of
testing that many of the

00:27:55.355 --> 00:27:56.680
different browser
vendors can run.

00:27:56.680 --> 00:27:58.690
I think that's a really great
long-term solution to this

00:27:58.690 --> 00:27:59.820
kind of problem.

00:27:59.820 --> 00:28:02.490
PAUL IRISH: And I guess the
other part of this is to your

00:28:02.490 --> 00:28:04.310
question where there's
not the same feature

00:28:04.310 --> 00:28:06.730
parity across browsers.

00:28:06.730 --> 00:28:10.380
This has kind of been the
case for a while.

00:28:10.380 --> 00:28:13.620
And even if we do have all
browsers shipping the same

00:28:13.620 --> 00:28:15.070
features, there's going
to be a different

00:28:15.070 --> 00:28:16.760
release schedule at least.

00:28:16.760 --> 00:28:21.290
So I think feature detection
is the right

00:28:21.290 --> 00:28:23.550
way to handle this.

00:28:23.550 --> 00:28:25.710
There's going to be an uneven
surface if you're developing

00:28:25.710 --> 00:28:28.510
against edge of the web where
there are features present in

00:28:28.510 --> 00:28:30.420
some cases and not
in other places.

00:28:30.420 --> 00:28:33.250
In some cases, the experience
can degrade.

00:28:33.250 --> 00:28:36.420
You don't need that feature
to deliver the experience.

00:28:36.420 --> 00:28:38.200
And that's awesome when
you could do that.

00:28:38.200 --> 00:28:40.920
In other cases, you can
find a polyfill.

00:28:40.920 --> 00:28:42.880
You can find some other
way to handle it.

00:28:42.880 --> 00:28:48.065
But I guess that's kind of the
way to deal with that.

00:28:48.065 --> 00:28:48.540
DARIN FISHER: Yeah.

00:28:48.540 --> 00:28:52.790
I was just going to add that
when we forked WebKit to

00:28:52.790 --> 00:28:56.990
create the Blink Project, when
it comes to new features like,

00:28:56.990 --> 00:29:01.720
say, something like Web MIDI,
it's not that if we had stayed

00:29:01.720 --> 00:29:04.610
on WebKit there was any
promise that Apple was

00:29:04.610 --> 00:29:06.300
actually going to
ship Web MIDI.

00:29:06.300 --> 00:29:09.460
We had developed many features
for WebKit that

00:29:09.460 --> 00:29:11.000
Apple had yet to ship.

00:29:11.000 --> 00:29:15.710
And so really we sort of feel
like the better path is, if we

00:29:15.710 --> 00:29:18.290
care about a feature, we want
to get it out there and get

00:29:18.290 --> 00:29:19.200
developers using it.

00:29:19.200 --> 00:29:22.280
And it's really through that
excitement and energy around

00:29:22.280 --> 00:29:24.350
the feature and the cool things
that people build with

00:29:24.350 --> 00:29:27.650
it, that's what will convince
the other browsers to come

00:29:27.650 --> 00:29:29.990
along, if they're not
already convinced.

00:29:29.990 --> 00:29:33.000
So there's always this sort of
tug and pull and push and pull

00:29:33.000 --> 00:29:35.480
kind of a dynamic.

00:29:35.480 --> 00:29:37.880
At any rate, Blink is largely
about allowing us to more

00:29:37.880 --> 00:29:41.420
efficiently move the web
platform forward.

00:29:41.420 --> 00:29:42.280
AUDIENCE: All right.

00:29:42.280 --> 00:29:43.200
Thank you very much.

00:29:43.200 --> 00:29:43.470
MAX HEINRITZ: Cool.

00:29:43.470 --> 00:29:44.640
Thanks for the question.

00:29:44.640 --> 00:29:44.920
OK.

00:29:44.920 --> 00:29:47.280
Let's do one question
from the Moderator.

00:29:47.280 --> 00:29:49.870
"What change, feature, or
improvement are you personally

00:29:49.870 --> 00:29:52.170
was excited about the
possibility of implementing in

00:29:52.170 --> 00:29:58.850
Blink?"

00:29:58.850 --> 00:30:01.570
PAUL IRISH: One of the ones
that I'm psyched about--

00:30:01.570 --> 00:30:04.250
I think, Eric, you might have
mentioned this one.

00:30:04.250 --> 00:30:05.510
I don't think it's under
development.

00:30:05.510 --> 00:30:07.430
You can tell me--

00:30:07.430 --> 00:30:10.980
multi-threaded style
recalc and layout.

00:30:10.980 --> 00:30:13.390
It's going to be awesome.

00:30:13.390 --> 00:30:14.730
I'll tell you a little
bit of background.

00:30:14.730 --> 00:30:17.410
So a lot of times you'll open
up the Chrome Dev Tools,

00:30:17.410 --> 00:30:20.110
you'll do a Timeline, and you'll
be identifying what

00:30:20.110 --> 00:30:20.930
your bottleneck is.

00:30:20.930 --> 00:30:24.380
And in a lot of cases, there's a
lot of time spent in layout,

00:30:24.380 --> 00:30:26.350
sometimes in style recalc,
depending on how much heavy

00:30:26.350 --> 00:30:29.380
DOM manipulation you're doing.

00:30:29.380 --> 00:30:34.540
And pretty much it's
single-threaded, going from

00:30:34.540 --> 00:30:37.860
style recalc out from seeing
something on the screen.

00:30:37.860 --> 00:30:39.180
And it can slow down your app.

00:30:39.180 --> 00:30:41.790
So being able to basically take
some of these operations

00:30:41.790 --> 00:30:45.370
and throw them to a separate
thread or a separate core, I'm

00:30:45.370 --> 00:30:47.283
totally jazzed about
those experiments.

00:30:50.130 --> 00:30:51.380
ERIC SEIDEL: He stole
my answer.

00:30:55.140 --> 00:30:58.200
But I'm actually also really
excited about the Oilpan stuff

00:30:58.200 --> 00:30:59.520
that you saw mentioned.

00:30:59.520 --> 00:31:01.360
And that's not something I'm
personally working on.

00:31:01.360 --> 00:31:02.960
I'm working more on the
rendering side of things,

00:31:02.960 --> 00:31:05.040
making things really fast
for your website.

00:31:05.040 --> 00:31:08.510
But Oilpan gives all sorts
of potential performance

00:31:08.510 --> 00:31:11.100
benefits, all sorts of potential
memory benefits,

00:31:11.100 --> 00:31:13.650
potential security benefits.

00:31:13.650 --> 00:31:17.860
And it's kind of way out
there, from a feature.

00:31:17.860 --> 00:31:22.030
But us being our own entity,
having our own experimental

00:31:22.030 --> 00:31:24.610
branches, being able to do sort
of thing iteratively and

00:31:24.610 --> 00:31:27.922
quickly is really
exciting to me.

00:31:27.922 --> 00:31:28.830
DARIN FISHER: Yeah.

00:31:28.830 --> 00:31:29.920
I totally agree.

00:31:29.920 --> 00:31:33.730
I love both of those
experiments.

00:31:33.730 --> 00:31:36.570
And I was just a little bit
surprised that you didn't

00:31:36.570 --> 00:31:39.690
mention out a process iframes
on the slide, Alex.

00:31:39.690 --> 00:31:41.710
That, to me, is one
of my most--

00:31:41.710 --> 00:31:45.340
One of the dreams I've always
had for Chrome's multiprocess

00:31:45.340 --> 00:31:48.880
architecture that it could not
just sandbox tabs but actually

00:31:48.880 --> 00:31:50.680
sandbox origins.

00:31:50.680 --> 00:31:53.190
And to me, it's just
really exciting.

00:31:53.190 --> 00:31:57.500
So the idea of turning Blink
into more of a frame server,

00:31:57.500 --> 00:32:00.720
if you will, like in the iframe
sense, and allowing us

00:32:00.720 --> 00:32:04.800
to isolate origins to their own
processes, I think it's

00:32:04.800 --> 00:32:08.510
just going to be fabulous,
especially in this Cloud

00:32:08.510 --> 00:32:11.030
world, this world where most of
your data's in the Cloud.

00:32:11.030 --> 00:32:15.120
The sandbox that we have in
Chrome is fabulous at allowing

00:32:15.120 --> 00:32:19.430
users to be protected against
malicious web content that

00:32:19.430 --> 00:32:22.120
might try to exploit
a bug to persist

00:32:22.120 --> 00:32:23.120
malware on your computer.

00:32:23.120 --> 00:32:25.030
It's great at that, protecting
against that.

00:32:25.030 --> 00:32:28.630
But a lot of the viable data
that users have is right there

00:32:28.630 --> 00:32:29.230
in the Cloud.

00:32:29.230 --> 00:32:33.000
And our sandbox doesn't
do anything to help

00:32:33.000 --> 00:32:34.590
protect that data.

00:32:34.590 --> 00:32:36.817
But if we were able to isolate
origins into our own

00:32:36.817 --> 00:32:39.610
processes, then, man, that would
be a huge step forward

00:32:39.610 --> 00:32:40.860
for web security.

00:32:44.310 --> 00:32:45.901
PAUL IRISH: I'm going
to do another one.

00:32:45.901 --> 00:32:46.743
ALEX KOMOROSKE: You
can have mine.

00:32:46.743 --> 00:32:48.010
PAUL IRISH: All right.

00:32:48.010 --> 00:32:48.930
Lazy Block Layouts.

00:32:48.930 --> 00:32:51.000
So it came up on the slide.

00:32:51.000 --> 00:32:53.840
But I think so far we haven't
had a great explanation.

00:32:53.840 --> 00:32:55.700
So stop me if I screw this up.

00:32:55.700 --> 00:32:58.500
But let's say you have
a list view.

00:32:58.500 --> 00:33:00.860
You have this view, especially
on mobile device.

00:33:00.860 --> 00:33:02.750
You'll have a bunch of items.

00:33:02.750 --> 00:33:05.670
And what you want your user to
do is be able to basically

00:33:05.670 --> 00:33:10.820
fling it with their thumb and
it still respond great.

00:33:10.820 --> 00:33:12.390
It's challenging.

00:33:12.390 --> 00:33:14.830
There's been all these hacks to
make this work fantastic on

00:33:14.830 --> 00:33:16.170
the web platform.

00:33:16.170 --> 00:33:19.730
And Lazy Block Layout is
targeting this use case of I

00:33:19.730 --> 00:33:22.190
got a lot items, I want to
fling it and it to be

00:33:22.190 --> 00:33:24.520
responsive and awesome.

00:33:24.520 --> 00:33:28.130
You can read about the proposal
on blink-dev, but

00:33:28.130 --> 00:33:31.790
it's targeting something that
developers are dealing with a

00:33:31.790 --> 00:33:36.358
lot and something baking into a
platform solution for that.

00:33:36.358 --> 00:33:37.700
MAX HEINRITZ: Do you
have something?

00:33:37.700 --> 00:33:40.210
ALEX KOMOROSKE: I'll just to
say, it's not particular to

00:33:40.210 --> 00:33:41.900
Blink, I guess-- oh, yeah--

00:33:41.900 --> 00:33:43.140
is just web components.

00:33:43.140 --> 00:33:45.150
If you've seen in past years,
I'm talking about

00:33:45.150 --> 00:33:46.100
those again, again.

00:33:46.100 --> 00:33:47.250
And we're going to have another
session tomorrow to

00:33:47.250 --> 00:33:47.880
talk about it.

00:33:47.880 --> 00:33:51.510
But I think web components is
an amazing set of emerging

00:33:51.510 --> 00:33:53.300
standards that are really going
to change how people

00:33:53.300 --> 00:33:55.960
write web apps.

00:33:55.960 --> 00:33:57.580
MAX HEINRITZ: Another thing
we're working on is web

00:33:57.580 --> 00:33:58.270
animations.

00:33:58.270 --> 00:34:00.580
And this is a unified animation
model for the web.

00:34:00.580 --> 00:34:02.760
And it's unclear how the WebKit
community would have

00:34:02.760 --> 00:34:03.500
responded to this.

00:34:03.500 --> 00:34:06.550
But it's something that Blink
gives us the ability to do on

00:34:06.550 --> 00:34:08.290
our own, because we think
it's a good idea.

00:34:08.290 --> 00:34:10.120
And so this will make animations
much faster.

00:34:10.120 --> 00:34:13.610
And the cool stuff you saw with
Maps and Google+, users

00:34:13.610 --> 00:34:15.590
are really looking for a rich
interactive experience.

00:34:15.590 --> 00:34:17.760
And we need to provide that
in a performant way.

00:34:17.760 --> 00:34:19.730
And web animations will
make that possible.

00:34:19.730 --> 00:34:21.489
ALEX KOMOROSKE: That's, again,
another emerging spec that's

00:34:21.489 --> 00:34:22.850
being worked on with
folks from Adobe

00:34:22.850 --> 00:34:23.842
and Mozilla and others.

00:34:23.842 --> 00:34:25.654
MAX HEINRITZ: Right.

00:34:25.654 --> 00:34:26.110
OK.

00:34:26.110 --> 00:34:28.429
Anything else?

00:34:28.429 --> 00:34:29.120
Cool.

00:34:29.120 --> 00:34:30.929
Let's do a live question.

00:34:30.929 --> 00:34:35.414
AUDIENCE: So on deprecating
features, you guys use a

00:34:35.414 --> 00:34:38.825
counter to measure
stats on the web.

00:34:38.825 --> 00:34:42.280
And I'm wondering what
the usage stats

00:34:42.280 --> 00:34:45.780
of the WebView apps.

00:34:45.780 --> 00:34:52.150
Because the code used for
WebView apps tends to more

00:34:52.150 --> 00:34:58.130
depend on WebKit prefix or an

00:34:58.130 --> 00:35:02.810
Apple-specific properties methods.

00:35:02.810 --> 00:35:07.620
So the usage stats tend
to be different from

00:35:07.620 --> 00:35:11.110
the ones on the web.

00:35:11.110 --> 00:35:15.540
Do you guys plan for
introducing a

00:35:15.540 --> 00:35:18.480
use counter for WebView?

00:35:18.480 --> 00:35:19.910
ALEX KOMOROSKE: One thing I
want to point out too is

00:35:19.910 --> 00:35:21.410
there's lots of different
methods of trying

00:35:21.410 --> 00:35:22.310
to figure this out.

00:35:22.310 --> 00:35:24.050
And not one of them
is perfect.

00:35:24.050 --> 00:35:26.470
And so the hope is that by doing
multiple methods you can

00:35:26.470 --> 00:35:28.430
get something that an aggregate
is pretty good.

00:35:28.430 --> 00:35:30.840
So if you're looking just at
something in the web index,

00:35:30.840 --> 00:35:33.920
you're only going to see that
it was passed down from the

00:35:33.920 --> 00:35:35.150
server originally.

00:35:35.150 --> 00:35:39.870
And if you are running either
lots of other approaches and

00:35:39.870 --> 00:35:41.570
techniques to get this
information, all of them have

00:35:41.570 --> 00:35:42.600
some drawbacks.

00:35:42.600 --> 00:35:45.440
That's a great one about
WebViews using slightly

00:35:45.440 --> 00:35:47.415
different APIs in
different ways.

00:35:47.415 --> 00:35:50.730
That's a great point.

00:35:50.730 --> 00:35:52.285
DARIN FISHER: Yeah.

00:35:52.285 --> 00:35:55.700
To answer your question about
use counter and WebView, I'm

00:35:55.700 --> 00:35:58.830
not actually sure if we have
a solution for that.

00:35:58.830 --> 00:36:00.970
It would be fabulous
to be able to get

00:36:00.970 --> 00:36:02.820
the underlying data.

00:36:02.820 --> 00:36:05.300
What we have in Chrome is a
histogram system that allows

00:36:05.300 --> 00:36:08.530
us to collect usage stats
for users who opt in.

00:36:08.530 --> 00:36:10.770
So when they download Chrome,
they check a box and say,

00:36:10.770 --> 00:36:14.820
yeah, I'd happily allow you to
collect anonymous stats to

00:36:14.820 --> 00:36:15.770
help make Chrome run better.

00:36:15.770 --> 00:36:20.030
And that's the kind of system
that allows us to record

00:36:20.030 --> 00:36:24.310
actual usage of features and
take advantage of that to try

00:36:24.310 --> 00:36:26.320
to learn what's not actually
being used.

00:36:26.320 --> 00:36:30.070
It's certainly not capturing
things like WebView apps,

00:36:30.070 --> 00:36:33.070
because those apps don't prompt
their users to opt them

00:36:33.070 --> 00:36:36.030
into that system.

00:36:36.030 --> 00:36:38.900
There might be opportunities
to leverage into Chrome Dev

00:36:38.900 --> 00:36:44.620
Channel, Chrome Beta Channel or
if there's ever a canary on

00:36:44.620 --> 00:36:46.880
Android for that sort
of thing, but we

00:36:46.880 --> 00:36:48.070
don't have that yet.

00:36:48.070 --> 00:36:48.770
It is a challenge.

00:36:48.770 --> 00:36:53.130
We also, with Chrome Apps and
the Chrome Store, we have the

00:36:53.130 --> 00:36:54.920
ability to crawl that data
and find usage of

00:36:54.920 --> 00:36:55.860
web platform features.

00:36:55.860 --> 00:36:58.670
And we have used that in the
past to find things that would

00:36:58.670 --> 00:37:02.340
be unfortunate to remove.

00:37:02.340 --> 00:37:04.210
ALEX KOMOROSKE: And ultimately,
if we mess up, the

00:37:04.210 --> 00:37:07.460
hope is that when it's in Dev
Channel or Beta Channel,

00:37:07.460 --> 00:37:09.990
someone will say, ooh, you just
broke all these lights.

00:37:09.990 --> 00:37:11.430
And whoops.

00:37:11.430 --> 00:37:14.690
And we'll relay it back.

00:37:14.690 --> 00:37:15.090
MAX HEINRITZ: Nice.

00:37:15.090 --> 00:37:16.655
Thanks.

00:37:16.655 --> 00:37:17.020
OK.

00:37:17.020 --> 00:37:19.816
Let's do another slide
from the Moderator.

00:37:19.816 --> 00:37:21.735
Let's hear another question
from Moderator.

00:37:21.735 --> 00:37:24.340
The question is, "There are
various inconsistencies in the

00:37:24.340 --> 00:37:26.850
security policy enforcements
between Firefox and Chrome,

00:37:26.850 --> 00:37:29.910
like with cross-domain fonts
and XHR on local files.

00:37:29.910 --> 00:37:35.380
Will you be working together
to be more consistent?"

00:37:35.380 --> 00:37:38.200
ERIC SEIDEL: Yes.

00:37:38.200 --> 00:37:40.610
DARIN FISHER: Next question.

00:37:40.610 --> 00:37:42.090
ERIC SEIDEL: I should also
note that before this

00:37:42.090 --> 00:37:43.215
presentation, I emailed
Pamela.

00:37:43.215 --> 00:37:45.465
And I will get her bugs,
and I will make sure

00:37:45.465 --> 00:37:47.750
that we work on them.

00:37:47.750 --> 00:37:48.215
DARIN FISHER: Cool.

00:37:48.215 --> 00:37:48.680
MAX HEINRITZ: All right.

00:37:48.680 --> 00:37:50.880
Let's do a live question.

00:37:50.880 --> 00:37:52.480
Do you know which
of you is first?

00:37:52.480 --> 00:37:52.970
OK.

00:37:52.970 --> 00:37:54.440
Go ahead.

00:37:54.440 --> 00:37:57.470
AUDIENCE: Regarding the better
integration between DOM

00:37:57.470 --> 00:38:00.530
elements in JavaScript, what
kind of performance

00:38:00.530 --> 00:38:04.120
improvements can we expect,
especially with elements that

00:38:04.120 --> 00:38:08.120
are pretty complex,
such as Canvas?

00:38:08.120 --> 00:38:10.860
And what would be the
timeline there?

00:38:13.800 --> 00:38:15.770
DARIN FISHER: Were you referring
to the Oilpan

00:38:15.770 --> 00:38:17.590
project that we were talking
about with--

00:38:17.590 --> 00:38:17.920
AUDIENCE: Yeah.

00:38:17.920 --> 00:38:19.070
DARIN FISHER: --memory
management?

00:38:19.070 --> 00:38:23.710
AUDIENCE: I think I read
something about exposing a

00:38:23.710 --> 00:38:27.160
thinner layer around DOM
elements to JavaScript.

00:38:27.160 --> 00:38:31.050
And all the calls into those
elements would be faster.

00:38:31.050 --> 00:38:34.260
And I guess that would
have improvements for

00:38:34.260 --> 00:38:37.450
objects like Canvas.

00:38:37.450 --> 00:38:41.060
ERIC SEIDEL: So Canvas is
drawing to the screen or

00:38:41.060 --> 00:38:42.110
drawing to a buffer.

00:38:42.110 --> 00:38:47.150
And the vast majority of that
time is all spent actually

00:38:47.150 --> 00:38:49.090
blitting the pixels and
turning them red

00:38:49.090 --> 00:38:50.120
and blue and stuff.

00:38:50.120 --> 00:38:55.210
So the stuff where you were
referring to about making the

00:38:55.210 --> 00:38:58.770
DOM be able to talk to
JavaScript faster, that all

00:38:58.770 --> 00:39:00.830
effects more things like when
you're traversing your whole

00:39:00.830 --> 00:39:03.780
document or you're doing
a really tight loop and

00:39:03.780 --> 00:39:06.040
constantly calling
some DOM API.

00:39:06.040 --> 00:39:08.530
Talking to Canvas, if we have
the performance bugs there,

00:39:08.530 --> 00:39:11.660
and I'm sure we do, those are
more things that we would talk

00:39:11.660 --> 00:39:14.910
to our graphics team and help
make our blurs faster and our

00:39:14.910 --> 00:39:17.080
fills faster and those
sorts of things.

00:39:17.080 --> 00:39:18.200
And we want to fix those too.

00:39:18.200 --> 00:39:22.580
So we'd love to know
about them.

00:39:22.580 --> 00:39:23.330
MAX HEINRITZ: OK.

00:39:23.330 --> 00:39:25.160
Audience question.

00:39:25.160 --> 00:39:25.600
AUDIENCE: Yes.

00:39:25.600 --> 00:39:27.880
I just had a quick question
about the Blink Project.

00:39:27.880 --> 00:39:30.430
How do you go from an
implemented feature to

00:39:30.430 --> 00:39:32.090
shipping that feature,
especially if

00:39:32.090 --> 00:39:33.900
you're not part of Google?

00:39:36.492 --> 00:39:38.380
ALEX KOMOROSKE: So the
intention, it's

00:39:38.380 --> 00:39:39.920
all done via email.

00:39:39.920 --> 00:39:42.460
There might be additional
meetings to review it, if it

00:39:42.460 --> 00:39:43.850
needs more talking
back and forth.

00:39:43.850 --> 00:39:46.160
And of course, in that case,
whoever's implementing it

00:39:46.160 --> 00:39:48.740
would be invited to those
meetings to video conference.

00:39:48.740 --> 00:39:55.340
And our goal is that people,
even non-Googlers, can be full

00:39:55.340 --> 00:39:57.230
peers in this project.

00:39:57.230 --> 00:39:58.480
And we take that
very seriously.

00:40:00.930 --> 00:40:02.250
DARIN FISHER: I believe there's
been some intent to

00:40:02.250 --> 00:40:03.860
ships from folks outside
of Google.

00:40:03.860 --> 00:40:04.560
ALEX KOMOROSKE: Yeah.

00:40:04.560 --> 00:40:05.510
I'm pretty sure that's true.

00:40:05.510 --> 00:40:05.810
MAX HEINRITZ: Yeah.

00:40:05.810 --> 00:40:07.850
I'm not sure about the intent to
ships, but we've definitely

00:40:07.850 --> 00:40:08.600
had intent to implements.

00:40:08.600 --> 00:40:10.900
Like I said, over a third have
come from non-Googlers.

00:40:10.900 --> 00:40:13.590
So we try to make everything
really well documented,

00:40:13.590 --> 00:40:15.360
because we understand that this
is an important thing for

00:40:15.360 --> 00:40:16.240
an open source project.

00:40:16.240 --> 00:40:20.660
So our project page is
chromium.org/blink.

00:40:20.660 --> 00:40:22.600
And we explain everything
on there.

00:40:22.600 --> 00:40:24.540
ALEX KOMOROSKE: We keep it up
to date as we're learning.

00:40:24.540 --> 00:40:27.550
Because we're only a month or
so into this, and so we're

00:40:27.550 --> 00:40:29.550
trying to figure out what's
the best way to balance a

00:40:29.550 --> 00:40:31.750
minimum of process so you don't
have to have all kinds

00:40:31.750 --> 00:40:34.960
of crazy overhead but also be
transparent, easy to follow,

00:40:34.960 --> 00:40:38.770
and allow external contributors
to be peers in

00:40:38.770 --> 00:40:40.744
the process and all that
kind of thing.

00:40:40.744 --> 00:40:41.692
AUDIENCE: OK.

00:40:41.692 --> 00:40:42.640
MAX HEINRITZ: Go ahead.

00:40:42.640 --> 00:40:43.350
AUDIENCE: Yeah.

00:40:43.350 --> 00:40:45.050
Second question, how do you
become a committer?

00:40:45.050 --> 00:40:47.260
Is it just like WebKit?

00:40:47.260 --> 00:40:50.000
Or is it slightly different?

00:40:50.000 --> 00:40:52.530
ERIC SEIDEL: It's just like
WebKit, maybe even easier.

00:40:52.530 --> 00:40:54.560
There's a Chromium Committers
Policy.

00:40:54.560 --> 00:40:57.580
It's like 10 commits,
sometimes sooner.

00:40:57.580 --> 00:40:58.010
AUDIENCE: OK.

00:40:58.010 --> 00:40:58.990
Thanks.

00:40:58.990 --> 00:41:01.760
MAX HEINRITZ: I think that's
all the time we have.

00:41:01.760 --> 00:41:04.820
I Like I said, feel free to join
us on our mailing list,

00:41:04.820 --> 00:41:07.000
blink-dev@chromium or go to
our project page for more

00:41:07.000 --> 00:41:07.610
information.

00:41:07.610 --> 00:41:09.380
And we'll hang out for a couple
minutes after, if you

00:41:09.380 --> 00:41:10.540
have other questions.

00:41:10.540 --> 00:41:11.790
Thanks, guys.

