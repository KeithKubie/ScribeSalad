WEBVTT
Kind: captions
Language: en

00:00:02.140 --> 00:00:03.870
MALE SPEAKER: Lists are a
special type of object that

00:00:03.870 --> 00:00:05.720
hold other objects.

00:00:05.720 --> 00:00:07.630
I can initialize
lists by simply

00:00:07.630 --> 00:00:10.870
using the List function.

00:00:10.870 --> 00:00:13.600
I can create items in the list
by providing arguments to the

00:00:13.600 --> 00:00:14.850
List function.

00:00:17.010 --> 00:00:18.770
What is important to understand
is that a list can

00:00:18.770 --> 00:00:21.080
hold objects of all
different types.

00:00:21.080 --> 00:00:23.970
In this example, the first
object is a numerical vector

00:00:23.970 --> 00:00:25.325
of length five.

00:00:25.325 --> 00:00:27.630
The second object is a character
vector of length

00:00:27.630 --> 00:00:31.890
one, and the third object is a
Boolean vector of length one.

00:00:31.890 --> 00:00:34.350
If I wanted to access an
item, I use the sub

00:00:34.350 --> 00:00:37.210
segment Double Bracket.

00:00:37.210 --> 00:00:40.170
I can also add on new items,
even providing the character

00:00:40.170 --> 00:00:43.116
name for the item.

00:00:43.116 --> 00:00:46.520
When a list has named objects,
those objects can be accessed

00:00:46.520 --> 00:00:49.280
using a special dollar sign
notation that is reminiscent

00:00:49.280 --> 00:00:51.220
of the same notation
for data frames.

00:00:54.020 --> 00:00:57.080
Lists also aren't restrained
to holding just vectors.

00:00:57.080 --> 00:00:58.910
They can also hold matrices,
data frames,

00:00:58.910 --> 00:01:00.766
and even other lists.

00:01:00.766 --> 00:01:03.160
Lists are so powerful, since
they create helpful ways to

00:01:03.160 --> 00:01:07.740
organize diverse sets
of data or results.

00:01:07.740 --> 00:01:09.930
Often times I have many groups
of data, and it would be

00:01:09.930 --> 00:01:12.350
helpful to calculate statistics
for each.

00:01:12.350 --> 00:01:15.950
I might organize these
statistics using a list.

00:01:15.950 --> 00:01:18.330
I'm going to load in the stock
data, just as we have in the

00:01:18.330 --> 00:01:19.980
last couple of videos.

00:01:19.980 --> 00:01:21.940
My goal will be to create
a summary of the

00:01:21.940 --> 00:01:24.840
prices for each stock.

00:01:24.840 --> 00:01:28.100
I'm going to do this
using a For Loop.

00:01:28.100 --> 00:01:29.830
The first line in the
For Loop will

00:01:29.830 --> 00:01:31.880
identify the rows of interest.

00:01:31.880 --> 00:01:34.210
The second line will calculate
the summary and start an

00:01:34.210 --> 00:01:36.750
object called Stock Summary.

00:01:36.750 --> 00:01:39.140
I also shouldn't forget to
initialize the Stock Summary

00:01:39.140 --> 00:01:40.915
object here as a list.

00:01:45.930 --> 00:01:48.530
Finally, I can take a
look at the results.

00:01:48.530 --> 00:01:51.580
Not surprisingly, there's
a lot to look at.

00:01:51.580 --> 00:01:54.110
If I wanted, I could look at
a specific summary for a

00:01:54.110 --> 00:01:56.540
particular stock, say,
Google's stock.

00:02:01.220 --> 00:02:03.230
What I've done here in
just six lines of

00:02:03.230 --> 00:02:04.750
code is very powerful.

00:02:04.750 --> 00:02:07.730
I've calculated summaries for
every stock in the data set,

00:02:07.730 --> 00:02:10.699
and this code works regardless
of I have five stocks, or five

00:02:10.699 --> 00:02:11.949
thousand stocks.

00:02:14.080 --> 00:02:16.230
In other instances I might
choose to do something even

00:02:16.230 --> 00:02:19.110
more complex, like fit a linear
model to the data for

00:02:19.110 --> 00:02:21.280
each stock separately.

00:02:21.280 --> 00:02:23.700
Even in that complex case,
a list can be used

00:02:23.700 --> 00:02:26.240
to store the result.

00:02:26.240 --> 00:02:29.150
I noted in the last video that
as you become more familiar

00:02:29.150 --> 00:02:31.560
with R, you'll find out that
there are more helpful

00:02:31.560 --> 00:02:35.210
functions do operations commonly
done in For Loops.

00:02:35.210 --> 00:02:37.230
This also true with this
example, which could have been

00:02:37.230 --> 00:02:38.730
written much more
compactly using

00:02:38.730 --> 00:02:41.170
some additional functions.

00:02:41.170 --> 00:02:43.470
Some of these functions we'll
encounter in the next section,

00:02:43.470 --> 00:02:45.610
like the functions
By and Apply.

00:02:50.200 --> 00:02:51.300
Great work on making
it through the

00:02:51.300 --> 00:02:53.760
second section of videos.

00:02:53.760 --> 00:02:57.060
Take a short coffee break,
practice what you've seen, and

00:02:57.060 --> 00:02:58.470
then get started on
the third section.

