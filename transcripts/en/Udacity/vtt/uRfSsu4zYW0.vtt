WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
So here's my attempt at translating that description of an algorithm

00:00:03.000 --> 00:00:06.000
into actual Python code ended up using helpful structures

00:00:06.000 --> 00:00:09.000
maybe a little different than before so I've got a Dijkstra's algorithm.

00:00:09.000 --> 00:00:12.000
Dijkstra is the name of the individual who first described

00:00:12.000 --> 00:00:16.000
and analyzed this algorithm for a single-source shortest path.

00:00:16.000 --> 00:00:19.000
So we give it a single source. We give it a single node in the network.

00:00:19.000 --> 00:00:22.000
Then we ask for the distance to all the other nodes in the network in graph G.

00:00:22.000 --> 00:00:27.000
So the distance so far is a structure that's going to represent a mapping

00:00:27.000 --> 00:00:32.000
from nodes to what we think the distance might be from V to that node.

00:00:32.000 --> 00:00:37.000
And in our hand simulated algorithm, these are the numbers in the non-locked circles.

00:00:37.000 --> 00:00:39.000
Some nodes might not have any numbers yet,

00:00:39.000 --> 00:00:42.000
and the ones that have numbers are represented in that mapping.

00:00:42.000 --> 00:00:48.000
So then we start structure off by saying well, the distance that we know of so far from V to the V,

00:00:48.000 --> 00:00:53.000
the node that we started at, is zero, and we do that in the hand simulation as well.

00:00:53.000 --> 00:00:56.000
Alright, now, there's an additional data structure, which I call final dist,

00:00:56.000 --> 00:00:59.000
which is once we actually figured out what the real distance is,

00:00:59.000 --> 00:01:03.000
we stick in this structure and so that's basically the numbers that are in the heavy circles here.

00:01:03.000 --> 00:01:06.000
When a circle becomes heavy because I'm locking it down,

00:01:06.000 --> 00:01:11.000
I moved that number into the final dist mapping, and I deleted it from the dist so far

00:01:11.000 --> 00:01:15.000
so that number doesn't exist anymore in the dist so far mapping.

00:01:15.000 --> 00:01:18.000
Now, we're going to iterate as long as the set of nodes

00:01:18.000 --> 00:01:21.000
for which we've computed the distance is less than the total number of nodes.

00:01:21.000 --> 00:01:23.000
Now, this is a little risky. I probably shouldn't have done this.

00:01:23.000 --> 00:01:28.000
Because if the graph is disconnected, what this is going to do is this is how we're going to die.

00:01:28.000 --> 00:01:32.000
Well, let's see where it's going to die, but it will keep trying to add nodes

00:01:32.000 --> 00:01:35.000
in their final distances even though they aren't final distances to add.

00:01:35.000 --> 00:01:38.000
So there's probably other test that might be better to determine

00:01:38.000 --> 00:01:41.000
when everything that's reachable has actually been assigned value.

00:01:41.000 --> 00:01:46.000
In general, this test isn't quite the right test, but it will suffice for a connected graph

00:01:46.000 --> 00:01:48.000
and that's we're going to try it on.

00:01:48.000 --> 00:01:52.000
What do we do as long as there's more nodes that we need to analyze,

00:01:52.000 --> 00:01:57.000
Take the node that has the shortest distance of all the ones so far, call that w, and lock it down.

00:01:57.000 --> 00:02:01.000
Locking it down in this case involves need printing a debugging message

00:02:01.000 --> 00:02:06.000
saying that the final distance for w is whatever we computed the distance so far as.

00:02:06.000 --> 00:02:12.000
We now know that this is the final distance and then we delete that from the dist so far structure.

00:02:12.000 --> 00:02:14.000
Then we go through its neighbors.

00:02:14.000 --> 00:02:21.000
All of the neighbors of w in the graphs called an x, and for each one, we'll say,

00:02:21.000 --> 00:02:26.000
well, if we completely solved that neighbor then we don't have to do anything,

00:02:26.000 --> 00:02:33.000
but if we haven't then see if it has a distance so far, and if it doesn't then give it one

00:02:33.000 --> 00:02:35.000
by saying, well, our best guess is the distance.

00:02:35.000 --> 00:02:40.000
It's going to be the distance that it took to get to w plus the distance from w to x.

00:02:40.000 --> 00:02:43.000
On the other hand, if it already has the distance, check if the new distance,

00:02:43.000 --> 00:02:46.000
the distance to w plus the distance from w to x, is better than the distance

00:02:46.000 --> 00:02:48.000
that we had so far, and if it is, replace it.

00:02:48.000 --> 00:02:52.000
This is sometimes called relaxation. It doesn't seem very relaxing but that's what it is.

00:02:52.000 --> 00:02:54.000
And so now we've handled that node.

00:02:54.000 --> 00:02:58.000
We handle all the nodes for the neighbors of w and that means we've handled w.

00:02:58.000 --> 00:03:00.000
We've locked it down, and we can move on.

00:03:00.000 --> 00:03:04.000
We go back up and handle the next node closest to the start state.

00:03:04.000 --> 00:03:07.000
And once we've gone through all of the nodes and assigned them all their final distances

00:03:07.000 --> 00:03:09.000
then we return that structure and we're done.

00:03:09.000 --> 00:03:12.000
This is the Dijkstra's algorithm in a nutshell. Let's analyze this.

