WEBVTT
Kind: captions
Language: en

00:00:00.220 --> 00:00:02.370
Here's the efficient solution.

00:00:02.370 --> 00:00:04.150
The trick is that we're
going to use recursion.

00:00:04.150 --> 00:00:06.980
And I'm not going to show you
something called the trellis diagram,

00:00:06.980 --> 00:00:10.320
which is a, a way of thinking
about a graph model of this.

00:00:10.320 --> 00:00:14.270
But what we're going to take advantage
of, remember the Markovian property?

00:00:14.270 --> 00:00:18.440
The Markovian property says that
the probability of going to some state

00:00:18.440 --> 00:00:21.010
only depends upon where I am now.

00:00:21.010 --> 00:00:24.440
It does not depend upon how I got here.

00:00:24.440 --> 00:00:25.120
Right?
So

00:00:25.120 --> 00:00:28.800
if today is sunny,
the probability of tomorrow being sunny

00:00:28.800 --> 00:00:32.870
is not affected by whether yesterday
was rainy, snowy, or sunny.

00:00:32.870 --> 00:00:33.910
That's my assumption.

00:00:33.910 --> 00:00:36.960
That's my first-order
Markovian assumption.

00:00:36.960 --> 00:00:40.120
So to take advantage of that, we're
going to define some auxiliary variables

00:00:40.120 --> 00:00:42.390
and define a recursive algorithm.

00:00:42.390 --> 00:00:45.440
So the first thing we're going to
define is what's called the forward

00:00:45.440 --> 00:00:47.170
variable alpha.

00:00:47.170 --> 00:00:54.280
Okay, an alpha sub t
of i is defined to be

00:00:54.280 --> 00:00:58.770
the probability of seeing all
the observations up until time t,

00:01:00.480 --> 00:01:03.580
and at time t being in state i.

00:01:03.580 --> 00:01:04.080
Okay?

00:01:04.080 --> 00:01:05.750
That's exactly what
it says in this book.

00:01:05.750 --> 00:01:08.260
In well,
now there's a box inside the box there.

00:01:08.260 --> 00:01:12.600
So it's the probability of seeing
everything from 1 until t and

00:01:12.600 --> 00:01:15.930
being at in type t being in state i.

00:01:15.930 --> 00:01:20.440
The really cool thing about that is,
I can define a recursive definition for

00:01:20.440 --> 00:01:21.670
this very easily.

00:01:21.670 --> 00:01:27.790
All right, so
you start off a1 of i is what?

00:01:27.790 --> 00:01:33.190
Well it's the probability of having
seen the observation at time 1 and

00:01:33.190 --> 00:01:36.442
the probability of being
in state i at time 1.

00:01:36.442 --> 00:01:38.060
Okay, well that's easy.

00:01:39.190 --> 00:01:46.300
Pi sub i is the probability of
starting in state i, and b i of o1,

00:01:46.300 --> 00:01:50.940
is the probability of seeing that
first symbol if you were in state i.

00:01:50.940 --> 00:01:51.807
So that's how you initialize it.

00:01:51.807 --> 00:01:55.277
Now comes the really re, cool thing,
and before we write it out,

00:01:55.277 --> 00:01:56.612
think about it this way.

00:01:56.612 --> 00:02:03.025
At some time t, the probability of
landing in state j is going to be,

00:02:03.025 --> 00:02:08.874
well, either I was in state 1 before and
I ended up at state J or

00:02:08.874 --> 00:02:14.294
I was in 2 before or
I was in 3 before or I was in 4 before.

00:02:14.294 --> 00:02:15.400
Right?

00:02:15.400 --> 00:02:18.060
And these are what are referred
to as mutually exclusive, so

00:02:18.060 --> 00:02:20.240
the probability is just the sum of them.

00:02:20.240 --> 00:02:22.620
And that's how this is written here,
right?

00:02:22.620 --> 00:02:26.130
What this says is that
alpha of t plus 1 of j.

00:02:26.130 --> 00:02:31.520
So that's the probability at
time t plus 1 of being in state

00:02:31.520 --> 00:02:36.760
j and having seen all the 1
to t plus 1 observations.

00:02:36.760 --> 00:02:39.800
Is just, well, just as I said before,

00:02:39.800 --> 00:02:43.680
it's the sum over all the different
possible states, right?

00:02:43.680 --> 00:02:50.020
There's n possible states of possibly
being in those states at time t.

00:02:50.020 --> 00:02:53.000
That's what alpha t is, right?

00:02:53.000 --> 00:02:57.440
And alpha t also includes all of
the observations, up through t,

00:02:57.440 --> 00:03:01.470
times the transition probability
of going from i to j.

00:03:01.470 --> 00:03:05.340
Remember, we're trying to
compute alpha t plus 1 of j.

00:03:05.340 --> 00:03:06.400
Going from i to j.

00:03:06.400 --> 00:03:10.220
So that's the probability
that I land in this state, j.

00:03:10.220 --> 00:03:14.570
And now, I also have to talk about
the output symbol, at time t plus 1.

00:03:14.570 --> 00:03:17.316
Well, that's b sub j of ot plus 1.

00:03:17.316 --> 00:03:17.998
All right?
And

00:03:17.998 --> 00:03:21.340
there's no way of thinking
that I can reach that j

00:03:21.340 --> 00:03:23.730
state from any of the preceding states.

00:03:23.730 --> 00:03:26.110
So I just define that recursively.

00:03:26.110 --> 00:03:28.380
That means I can do one
more really cool thing.

00:03:28.380 --> 00:03:29.500
Okay?

00:03:29.500 --> 00:03:31.140
So I could obviously run
this all the way to t.

00:03:32.220 --> 00:03:35.950
So I could tell you the probability
of seeing all of the observations,

00:03:35.950 --> 00:03:39.165
1 through cap t, and landing in state 1.

00:03:40.250 --> 00:03:44.550
And all the observations and
landing in state 2, and landing is,

00:03:44.550 --> 00:03:48.110
suppose all I want is the probability
of the observations, right.

00:03:48.110 --> 00:03:50.530
I don't actually care
what state I end up in.

00:03:50.530 --> 00:03:56.510
Well that means that the probability of
the observation given the machine and

00:03:56.510 --> 00:03:58.490
that's what we're trying to compute,

00:03:58.490 --> 00:04:03.520
is just the sum of all
the alpha cap T of I's, right?

00:04:03.520 --> 00:04:07.856
Alpha cap t is the probability of seeing
all of the sequence, of i meaning and

00:04:07.856 --> 00:04:08.710
landing in state i.

00:04:08.710 --> 00:04:11.240
I sum that up over all the i's, and

00:04:11.240 --> 00:04:15.400
that's the probability of
the entire observation sequence.

00:04:15.400 --> 00:04:18.670
So you recursively solve that problem.

00:04:18.670 --> 00:04:22.260
So remember before it was n to the t,
which is a really,

00:04:22.260 --> 00:04:28.130
really awful number, the complexity
of this is just n squared t.

00:04:28.130 --> 00:04:30.160
Okay?
Through the, the recursion.

00:04:30.160 --> 00:04:32.550
Each time step, you have n squared
things you have to look at,

00:04:32.550 --> 00:04:34.900
you do it t times and
so it's n squared t.

00:04:34.900 --> 00:04:39.300
And for any reasonable numbers,
n squared t is way, way, way,

00:04:39.300 --> 00:04:42.090
way less than n to the t.

00:04:42.090 --> 00:04:42.800
All right?

00:04:42.800 --> 00:04:45.520
So, that's that efficient
solution of the forward,

00:04:45.520 --> 00:04:49.470
using the forward algorithm and allows
us to recover, solve that first problem.

