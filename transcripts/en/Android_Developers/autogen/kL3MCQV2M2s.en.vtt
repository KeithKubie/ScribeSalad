WEBVTT
Kind: captions
Language: en

00:00:05.990 --> 00:00:08.360
 
writing good tests can be a challenge

00:00:08.360 --> 00:00:08.370
writing good tests can be a challenge
 

00:00:08.370 --> 00:00:10.669
writing good tests can be a challenge
and writing reliable UI tests it's

00:00:10.669 --> 00:00:10.679
and writing reliable UI tests it's
 

00:00:10.679 --> 00:00:12.709
and writing reliable UI tests it's
substantially more difficult user

00:00:12.709 --> 00:00:12.719
substantially more difficult user
 

00:00:12.719 --> 00:00:15.020
substantially more difficult user
interfaces are asynchronous driven by

00:00:15.020 --> 00:00:15.030
interfaces are asynchronous driven by
 

00:00:15.030 --> 00:00:17.120
interfaces are asynchronous driven by
events transitions and data loaded from

00:00:17.120 --> 00:00:17.130
events transitions and data loaded from
 

00:00:17.130 --> 00:00:19.400
events transitions and data loaded from
background threads coding around that

00:00:19.400 --> 00:00:19.410
background threads coding around that
 

00:00:19.410 --> 00:00:21.290
background threads coding around that
without any help from a UI testing

00:00:21.290 --> 00:00:21.300
without any help from a UI testing
 

00:00:21.300 --> 00:00:23.060
without any help from a UI testing
framework would require a lot of

00:00:23.060 --> 00:00:23.070
framework would require a lot of
 

00:00:23.070 --> 00:00:24.980
framework would require a lot of
boilerplate and handling of edge cases

00:00:24.980 --> 00:00:24.990
boilerplate and handling of edge cases
 

00:00:24.990 --> 00:00:27.950
boilerplate and handling of edge cases
on the other hand say I give you a phone

00:00:27.950 --> 00:00:27.960
on the other hand say I give you a phone
 

00:00:27.960 --> 00:00:30.439
on the other hand say I give you a phone
with a sample app and tell you to test a

00:00:30.439 --> 00:00:30.449
with a sample app and tell you to test a
 

00:00:30.449 --> 00:00:31.400
with a sample app and tell you to test a
feature of the app that I just

00:00:31.400 --> 00:00:31.410
feature of the app that I just
 

00:00:31.410 --> 00:00:33.889
feature of the app that I just
implemented for example please make sure

00:00:33.889 --> 00:00:33.899
implemented for example please make sure
 

00:00:33.899 --> 00:00:35.959
implemented for example please make sure
that saving a new note in my note-taking

00:00:35.959 --> 00:00:35.969
that saving a new note in my note-taking
 

00:00:35.969 --> 00:00:38.510
that saving a new note in my note-taking
app works what would you do well I'm

00:00:38.510 --> 00:00:38.520
app works what would you do well I'm
 

00:00:38.520 --> 00:00:39.979
app works what would you do well I'm
pretty sure that you would look for a

00:00:39.979 --> 00:00:39.989
pretty sure that you would look for a
 

00:00:39.989 --> 00:00:42.319
pretty sure that you would look for a
Save button once you've found it you tap

00:00:42.319 --> 00:00:42.329
Save button once you've found it you tap
 

00:00:42.329 --> 00:00:44.150
Save button once you've found it you tap
on it and then check if the note is

00:00:44.150 --> 00:00:44.160
on it and then check if the note is
 

00:00:44.160 --> 00:00:45.740
on it and then check if the note is
present in the list of saved notes

00:00:45.740 --> 00:00:45.750
present in the list of saved notes
 

00:00:45.750 --> 00:00:47.869
present in the list of saved notes
that's actually a pretty good scenario

00:00:47.869 --> 00:00:47.879
that's actually a pretty good scenario
 

00:00:47.879 --> 00:00:49.970
that's actually a pretty good scenario
for a UI test and it's simple to

00:00:49.970 --> 00:00:49.980
for a UI test and it's simple to
 

00:00:49.980 --> 00:00:52.459
for a UI test and it's simple to
understand for a person but how would we

00:00:52.459 --> 00:00:52.469
understand for a person but how would we
 

00:00:52.469 --> 00:00:54.889
understand for a person but how would we
go about expressing it in code the

00:00:54.889 --> 00:00:54.899
go about expressing it in code the
 

00:00:54.899 --> 00:00:56.450
go about expressing it in code the
espresso framework was created

00:00:56.450 --> 00:00:56.460
espresso framework was created
 

00:00:56.460 --> 00:00:58.639
espresso framework was created
specifically for this purpose to enable

00:00:58.639 --> 00:00:58.649
specifically for this purpose to enable
 

00:00:58.649 --> 00:01:00.229
specifically for this purpose to enable
developers to write UI tests that are

00:01:00.229 --> 00:01:00.239
developers to write UI tests that are
 

00:01:00.239 --> 00:01:02.810
developers to write UI tests that are
concise reliable and using a fluent API

00:01:02.810 --> 00:01:02.820
concise reliable and using a fluent API
 

00:01:02.820 --> 00:01:05.899
concise reliable and using a fluent API
and most importantly espresso takes care

00:01:05.899 --> 00:01:05.909
and most importantly espresso takes care
 

00:01:05.909 --> 00:01:08.330
and most importantly espresso takes care
of synchronization with any UI events so

00:01:08.330 --> 00:01:08.340
of synchronization with any UI events so
 

00:01:08.340 --> 00:01:10.370
of synchronization with any UI events so
that in most cases you don't have to

00:01:10.370 --> 00:01:10.380
that in most cases you don't have to
 

00:01:10.380 --> 00:01:12.200
that in most cases you don't have to
worry about any viewstate transitions

00:01:12.200 --> 00:01:12.210
worry about any viewstate transitions
 

00:01:12.210 --> 00:01:15.080
worry about any viewstate transitions
and implementation details looking back

00:01:15.080 --> 00:01:15.090
and implementation details looking back
 

00:01:15.090 --> 00:01:17.600
and implementation details looking back
at the simple UI test we just defined we

00:01:17.600 --> 00:01:17.610
at the simple UI test we just defined we
 

00:01:17.610 --> 00:01:19.130
at the simple UI test we just defined we
can see that the basic flow when using

00:01:19.130 --> 00:01:19.140
can see that the basic flow when using
 

00:01:19.140 --> 00:01:21.289
can see that the basic flow when using
espresso is exactly the same as in our

00:01:21.289 --> 00:01:21.299
espresso is exactly the same as in our
 

00:01:21.299 --> 00:01:24.140
espresso is exactly the same as in our
real life scenario first find a view

00:01:24.140 --> 00:01:24.150
real life scenario first find a view
 

00:01:24.150 --> 00:01:26.420
real life scenario first find a view
using some matching rules then perform

00:01:26.420 --> 00:01:26.430
using some matching rules then perform
 

00:01:26.430 --> 00:01:28.730
using some matching rules then perform
an action on it and finally verify the

00:01:28.730 --> 00:01:28.740
an action on it and finally verify the
 

00:01:28.740 --> 00:01:31.340
an action on it and finally verify the
resulting state before I go any further

00:01:31.340 --> 00:01:31.350
resulting state before I go any further
 

00:01:31.350 --> 00:01:34.249
resulting state before I go any further
and start writing actual test code let's

00:01:34.249 --> 00:01:34.259
and start writing actual test code let's
 

00:01:34.259 --> 00:01:35.810
and start writing actual test code let's
make sure that the Android test Runner

00:01:35.810 --> 00:01:35.820
make sure that the Android test Runner
 

00:01:35.820 --> 00:01:38.060
make sure that the Android test Runner
and espresso dependencies are configured

00:01:38.060 --> 00:01:38.070
and espresso dependencies are configured
 

00:01:38.070 --> 00:01:40.550
and espresso dependencies are configured
in build.gradle I'll add the

00:01:40.550 --> 00:01:40.560
in build.gradle I'll add the
 

00:01:40.560 --> 00:01:42.920
in build.gradle I'll add the
dependencies and setup the runner here

00:01:42.920 --> 00:01:42.930
dependencies and setup the runner here
 

00:01:42.930 --> 00:01:45.499
dependencies and setup the runner here
if you're using a version of Android

00:01:45.499 --> 00:01:45.509
if you're using a version of Android
 

00:01:45.509 --> 00:01:47.210
if you're using a version of Android
studio that lets you select the test

00:01:47.210 --> 00:01:47.220
studio that lets you select the test
 

00:01:47.220 --> 00:01:49.340
studio that lets you select the test
artifact remember to switch to Android

00:01:49.340 --> 00:01:49.350
artifact remember to switch to Android
 

00:01:49.350 --> 00:01:51.050
artifact remember to switch to Android
instrumentation tests under build

00:01:51.050 --> 00:01:51.060
instrumentation tests under build
 

00:01:51.060 --> 00:01:53.719
instrumentation tests under build
variants I'm using Android studio 2.0

00:01:53.719 --> 00:01:53.729
variants I'm using Android studio 2.0
 

00:01:53.729 --> 00:01:55.700
variants I'm using Android studio 2.0
which has a combined view for both local

00:01:55.700 --> 00:01:55.710
which has a combined view for both local
 

00:01:55.710 --> 00:01:57.740
which has a combined view for both local
and instrumentation tests so I can

00:01:57.740 --> 00:01:57.750
and instrumentation tests so I can
 

00:01:57.750 --> 00:02:00.100
and instrumentation tests so I can
already see both in my project view

00:02:00.100 --> 00:02:00.110
already see both in my project view
 

00:02:00.110 --> 00:02:02.179
already see both in my project view
instrumentation tests go under the

00:02:02.179 --> 00:02:02.189
instrumentation tests go under the
 

00:02:02.189 --> 00:02:04.580
instrumentation tests go under the
Android test source set so I'll create a

00:02:04.580 --> 00:02:04.590
Android test source set so I'll create a
 

00:02:04.590 --> 00:02:07.069
Android test source set so I'll create a
sample test glass here a name it notes

00:02:07.069 --> 00:02:07.079
sample test glass here a name it notes
 

00:02:07.079 --> 00:02:10.550
sample test glass here a name it notes
screen tests

00:02:10.550 --> 00:02:10.560
 
 

00:02:10.560 --> 00:02:13.339
 
I have to add an annotation on the test

00:02:13.339 --> 00:02:13.349
I have to add an annotation on the test
 

00:02:13.349 --> 00:02:15.199
I have to add an annotation on the test
class to specify that I will be writing

00:02:15.199 --> 00:02:15.209
class to specify that I will be writing
 

00:02:15.209 --> 00:02:17.479
class to specify that I will be writing
Ju ins for tests and running them with

00:02:17.479 --> 00:02:17.489
Ju ins for tests and running them with
 

00:02:17.489 --> 00:02:20.809
Ju ins for tests and running them with
the Android J unit forerunner the notes

00:02:20.809 --> 00:02:20.819
the Android J unit forerunner the notes
 

00:02:20.819 --> 00:02:22.850
the Android J unit forerunner the notes
screen in our app is contained in the

00:02:22.850 --> 00:02:22.860
screen in our app is contained in the
 

00:02:22.860 --> 00:02:25.070
screen in our app is contained in the
notes activity by adding an activity

00:02:25.070 --> 00:02:25.080
notes activity by adding an activity
 

00:02:25.080 --> 00:02:27.440
notes activity by adding an activity
test role I'm telling the runner to

00:02:27.440 --> 00:02:27.450
test role I'm telling the runner to
 

00:02:27.450 --> 00:02:29.509
test role I'm telling the runner to
launch the activity before any tests and

00:02:29.509 --> 00:02:29.519
launch the activity before any tests and
 

00:02:29.519 --> 00:02:32.390
launch the activity before any tests and
turn it down after they finish all this

00:02:32.390 --> 00:02:32.400
turn it down after they finish all this
 

00:02:32.400 --> 00:02:36.350
turn it down after they finish all this
is taken care of with this line now I'll

00:02:36.350 --> 00:02:36.360
is taken care of with this line now I'll
 

00:02:36.360 --> 00:02:38.059
is taken care of with this line now I'll
add a new method with a descriptive name

00:02:38.059 --> 00:02:38.069
add a new method with a descriptive name
 

00:02:38.069 --> 00:02:40.400
add a new method with a descriptive name
for the actual test and start with the

00:02:40.400 --> 00:02:40.410
for the actual test and start with the
 

00:02:40.410 --> 00:02:42.009
for the actual test and start with the
basic structure I explained before

00:02:42.009 --> 00:02:42.019
basic structure I explained before
 

00:02:42.019 --> 00:02:44.600
basic structure I explained before
notice that on view is actually a method

00:02:44.600 --> 00:02:44.610
notice that on view is actually a method
 

00:02:44.610 --> 00:02:47.000
notice that on view is actually a method
on the espresso class but across my

00:02:47.000 --> 00:02:47.010
on the espresso class but across my
 

00:02:47.010 --> 00:02:49.009
on the espresso class but across my
testing code I will use static imports

00:02:49.009 --> 00:02:49.019
testing code I will use static imports
 

00:02:49.019 --> 00:02:51.229
testing code I will use static imports
to be able to express the tests in a

00:02:51.229 --> 00:02:51.239
to be able to express the tests in a
 

00:02:51.239 --> 00:02:54.590
to be able to express the tests in a
more concise way alright let's go

00:02:54.590 --> 00:02:54.600
more concise way alright let's go
 

00:02:54.600 --> 00:02:56.780
more concise way alright let's go
through the arguments next we need a

00:02:56.780 --> 00:02:56.790
through the arguments next we need a
 

00:02:56.790 --> 00:02:58.940
through the arguments next we need a
matter in order to find a view in the

00:02:58.940 --> 00:02:58.950
matter in order to find a view in the
 

00:02:58.950 --> 00:03:01.250
matter in order to find a view in the
current view hierarchy espresso comes

00:03:01.250 --> 00:03:01.260
current view hierarchy espresso comes
 

00:03:01.260 --> 00:03:03.110
current view hierarchy espresso comes
with a set of built-in matters for

00:03:03.110 --> 00:03:03.120
with a set of built-in matters for
 

00:03:03.120 --> 00:03:05.420
with a set of built-in matters for
common view properties like with ID with

00:03:05.420 --> 00:03:05.430
common view properties like with ID with
 

00:03:05.430 --> 00:03:08.030
common view properties like with ID with
text is checked and many others we

00:03:08.030 --> 00:03:08.040
text is checked and many others we
 

00:03:08.040 --> 00:03:09.979
text is checked and many others we
provide a simple cheat sheet so you

00:03:09.979 --> 00:03:09.989
provide a simple cheat sheet so you
 

00:03:09.989 --> 00:03:11.539
provide a simple cheat sheet so you
don't have to go digging through the

00:03:11.539 --> 00:03:11.549
don't have to go digging through the
 

00:03:11.549 --> 00:03:15.050
don't have to go digging through the
documentation every time in my case I

00:03:15.050 --> 00:03:15.060
documentation every time in my case I
 

00:03:15.060 --> 00:03:16.699
documentation every time in my case I
want to locate the floating action

00:03:16.699 --> 00:03:16.709
want to locate the floating action
 

00:03:16.709 --> 00:03:19.190
want to locate the floating action
button which fortunately is the only

00:03:19.190 --> 00:03:19.200
button which fortunately is the only
 

00:03:19.200 --> 00:03:21.560
button which fortunately is the only
item on the screen with the ID fab add

00:03:21.560 --> 00:03:21.570
item on the screen with the ID fab add
 

00:03:21.570 --> 00:03:24.229
item on the screen with the ID fab add
notes now that I've isolated the view

00:03:24.229 --> 00:03:24.239
notes now that I've isolated the view
 

00:03:24.239 --> 00:03:26.720
notes now that I've isolated the view
that I need using matters it's time to

00:03:26.720 --> 00:03:26.730
that I need using matters it's time to
 

00:03:26.730 --> 00:03:28.880
that I need using matters it's time to
apply a view action or in other words a

00:03:28.880 --> 00:03:28.890
apply a view action or in other words a
 

00:03:28.890 --> 00:03:30.949
apply a view action or in other words a
user interaction that will be simulated

00:03:30.949 --> 00:03:30.959
user interaction that will be simulated
 

00:03:30.959 --> 00:03:33.860
user interaction that will be simulated
by espresso I just want to click the fab

00:03:33.860 --> 00:03:33.870
by espresso I just want to click the fab
 

00:03:33.870 --> 00:03:36.080
by espresso I just want to click the fab
but again there are many more built-in

00:03:36.080 --> 00:03:36.090
but again there are many more built-in
 

00:03:36.090 --> 00:03:38.120
but again there are many more built-in
actions like typing and even finger

00:03:38.120 --> 00:03:38.130
actions like typing and even finger
 

00:03:38.130 --> 00:03:40.069
actions like typing and even finger
swipes that I can use to interact with

00:03:40.069 --> 00:03:40.079
swipes that I can use to interact with
 

00:03:40.079 --> 00:03:43.699
swipes that I can use to interact with
views and finally I verified the outcome

00:03:43.699 --> 00:03:43.709
views and finally I verified the outcome
 

00:03:43.709 --> 00:03:45.710
views and finally I verified the outcome
of my actions by using a view assertion

00:03:45.710 --> 00:03:45.720
of my actions by using a view assertion
 

00:03:45.720 --> 00:03:48.170
of my actions by using a view assertion
since I want to check if an input field

00:03:48.170 --> 00:03:48.180
since I want to check if an input field
 

00:03:48.180 --> 00:03:49.940
since I want to check if an input field
is shown on screen after pressing the

00:03:49.940 --> 00:03:49.950
is shown on screen after pressing the
 

00:03:49.950 --> 00:03:51.920
is shown on screen after pressing the
fab I'll move this block of code here

00:03:51.920 --> 00:03:51.930
fab I'll move this block of code here
 

00:03:51.930 --> 00:03:54.470
fab I'll move this block of code here
and I use the matches assertion that

00:03:54.470 --> 00:03:54.480
and I use the matches assertion that
 

00:03:54.480 --> 00:03:57.860
and I use the matches assertion that
accepts a view matter so to summarize

00:03:57.860 --> 00:03:57.870
accepts a view matter so to summarize
 

00:03:57.870 --> 00:04:00.199
accepts a view matter so to summarize
what we have so far the first statement

00:04:00.199 --> 00:04:00.209
what we have so far the first statement
 

00:04:00.209 --> 00:04:02.000
what we have so far the first statement
matches a floating action button and

00:04:02.000 --> 00:04:02.010
matches a floating action button and
 

00:04:02.010 --> 00:04:04.069
matches a floating action button and
clicks it which should bring up the add

00:04:04.069 --> 00:04:04.079
clicks it which should bring up the add
 

00:04:04.079 --> 00:04:06.860
clicks it which should bring up the add
note screen the second statement finds

00:04:06.860 --> 00:04:06.870
note screen the second statement finds
 

00:04:06.870 --> 00:04:08.930
note screen the second statement finds
the edit text that lets a user enter a

00:04:08.930 --> 00:04:08.940
the edit text that lets a user enter a
 

00:04:08.940 --> 00:04:11.059
the edit text that lets a user enter a
note title and verifies that it is

00:04:11.059 --> 00:04:11.069
note title and verifies that it is
 

00:04:11.069 --> 00:04:12.740
note title and verifies that it is
displayed using the matches view

00:04:12.740 --> 00:04:12.750
displayed using the matches view
 

00:04:12.750 --> 00:04:15.440
displayed using the matches view
assertion notice that I didn't have to

00:04:15.440 --> 00:04:15.450
assertion notice that I didn't have to
 

00:04:15.450 --> 00:04:17.300
assertion notice that I didn't have to
write any code in between to wait for

00:04:17.300 --> 00:04:17.310
write any code in between to wait for
 

00:04:17.310 --> 00:04:19.610
write any code in between to wait for
previous events to finish as espresso

00:04:19.610 --> 00:04:19.620
previous events to finish as espresso
 

00:04:19.620 --> 00:04:22.420
previous events to finish as espresso
already takes care of that for me

00:04:22.420 --> 00:04:22.430
already takes care of that for me
 

00:04:22.430 --> 00:04:24.760
already takes care of that for me
to run the test I right-click on the

00:04:24.760 --> 00:04:24.770
to run the test I right-click on the
 

00:04:24.770 --> 00:04:27.490
to run the test I right-click on the
test class and select run because it's

00:04:27.490 --> 00:04:27.500
test class and select run because it's
 

00:04:27.500 --> 00:04:28.840
test class and select run because it's
an instrumentation test

00:04:28.840 --> 00:04:28.850
an instrumentation test
 

00:04:28.850 --> 00:04:31.060
an instrumentation test
it requires an emulator or physical

00:04:31.060 --> 00:04:31.070
it requires an emulator or physical
 

00:04:31.070 --> 00:04:33.640
it requires an emulator or physical
device I can see the actions on the

00:04:33.640 --> 00:04:33.650
device I can see the actions on the
 

00:04:33.650 --> 00:04:37.050
device I can see the actions on the
screen as they execute

00:04:37.050 --> 00:04:37.060
 
 

00:04:37.060 --> 00:04:39.429
 
here's a slightly longer test that

00:04:39.429 --> 00:04:39.439
here's a slightly longer test that
 

00:04:39.439 --> 00:04:41.409
here's a slightly longer test that
includes typing into the ED notes screen

00:04:41.409 --> 00:04:41.419
includes typing into the ED notes screen
 

00:04:41.419 --> 00:04:43.800
includes typing into the ED notes screen
and saving a note all using espresso

00:04:43.800 --> 00:04:43.810
and saving a note all using espresso
 

00:04:43.810 --> 00:04:46.300
and saving a note all using espresso
unless you're writing end-to-end tests

00:04:46.300 --> 00:04:46.310
unless you're writing end-to-end tests
 

00:04:46.310 --> 00:04:48.100
unless you're writing end-to-end tests
you should keep your test small and

00:04:48.100 --> 00:04:48.110
you should keep your test small and
 

00:04:48.110 --> 00:04:49.869
you should keep your test small and
scoped which will make them more

00:04:49.869 --> 00:04:49.879
scoped which will make them more
 

00:04:49.879 --> 00:04:52.420
scoped which will make them more
reliable if you want to practice adding

00:04:52.420 --> 00:04:52.430
reliable if you want to practice adding
 

00:04:52.430 --> 00:04:54.249
reliable if you want to practice adding
and running UI tests on your own I

00:04:54.249 --> 00:04:54.259
and running UI tests on your own I
 

00:04:54.259 --> 00:04:56.080
and running UI tests on your own I
suggest you check out our Android

00:04:56.080 --> 00:04:56.090
suggest you check out our Android
 

00:04:56.090 --> 00:04:57.969
suggest you check out our Android
testing code lab which I based this

00:04:57.969 --> 00:04:57.979
testing code lab which I based this
 

00:04:57.979 --> 00:05:00.399
testing code lab which I based this
video on it contains a downloadable

00:05:00.399 --> 00:05:00.409
video on it contains a downloadable
 

00:05:00.409 --> 00:05:02.649
video on it contains a downloadable
project and step-by-step instructions to

00:05:02.649 --> 00:05:02.659
project and step-by-step instructions to
 

00:05:02.659 --> 00:05:03.719
project and step-by-step instructions to
get you started

00:05:03.719 --> 00:05:03.729
get you started
 

00:05:03.729 --> 00:05:06.159
get you started
join me for the next episode of Android

00:05:06.159 --> 00:05:06.169
join me for the next episode of Android
 

00:05:06.169 --> 00:05:08.290
join me for the next episode of Android
testing patterns to learn how to handle

00:05:08.290 --> 00:05:08.300
testing patterns to learn how to handle
 

00:05:08.300 --> 00:05:10.779
testing patterns to learn how to handle
adapter views in your tests good luck

00:05:10.779 --> 00:05:10.789
adapter views in your tests good luck
 

00:05:10.789 --> 00:05:31.020
adapter views in your tests good luck
and happy testing

00:05:31.020 --> 00:05:31.030
 
 

00:05:31.030 --> 00:05:33.090
 
you

