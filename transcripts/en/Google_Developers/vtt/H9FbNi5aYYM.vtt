WEBVTT
Kind: captions
Language: en

00:00:00.159 --> 00:00:02.700
RETO MEIER: Welcome to "Build
Out," where real engineers face

00:00:02.700 --> 00:00:04.440
off building fake products.

00:00:04.440 --> 00:00:06.410
Today's challenge--
The Virtual Earth.

00:00:06.410 --> 00:00:09.150
I'm Reto Meier, the perpetual
winner, which means this is--

00:00:09.150 --> 00:00:11.150
COLT MCANLIS: --Colt
McAnlis, the only one of us

00:00:11.150 --> 00:00:13.050
who's actually built
a virtual world.

00:00:13.050 --> 00:00:14.520
So whose earth rocks?

00:00:14.520 --> 00:00:15.990
Find out now on "Build Out."

00:00:15.990 --> 00:00:17.352
[MUSIC PLAYING]

00:00:20.076 --> 00:00:22.664
You know the Northern
Hemisphere points up, right?

00:00:22.664 --> 00:00:23.830
RETO MEIER: Not in my world.

00:00:23.830 --> 00:00:24.996
Southern Hemisphere forever.

00:00:27.460 --> 00:00:29.950
Influenced by Neal
Stephenson's global Metaverse,

00:00:29.950 --> 00:00:32.330
my virtual earth
builds on Google Earth

00:00:32.330 --> 00:00:35.290
to build a fully interactive,
global, virtual environment,

00:00:35.290 --> 00:00:37.030
based on real-time
updates returned

00:00:37.030 --> 00:00:39.640
for millions of drone-based
sensors deployed

00:00:39.640 --> 00:00:41.530
all across the physical world.

00:00:41.530 --> 00:00:43.330
We collect environmental
data from millions

00:00:43.330 --> 00:00:45.010
of basketball-sized
autonomous drones

00:00:45.010 --> 00:00:48.194
with environmental sensors,
360-degree Lidar, and cameras.

00:00:48.194 --> 00:00:50.110
When you log in, everything
will look and feel

00:00:50.110 --> 00:00:51.526
as though you were
actually there,

00:00:51.526 --> 00:00:53.600
except all the people
will be replaced

00:00:53.600 --> 00:00:55.150
with virtual inhabitants.

00:00:55.150 --> 00:00:56.809
So let's start with
the balloon drones.

00:00:56.809 --> 00:00:58.600
I'm going to build them
with Android Things

00:00:58.600 --> 00:01:01.660
as a software platform, and add
TensorFlow models to control

00:01:01.660 --> 00:01:04.000
the autonomous flight and
privacy algorithms, that'll

00:01:04.000 --> 00:01:06.075
remove people from
the camera images.

00:01:06.075 --> 00:01:08.200
We're going to send those
images and the Lidar data

00:01:08.200 --> 00:01:10.180
into Google Cloud
Storage buckets

00:01:10.180 --> 00:01:11.980
and use Pub/Sub to
send notifications

00:01:11.980 --> 00:01:14.170
about those new uploads
to a specialized,

00:01:14.170 --> 00:01:17.770
containerized application
hosted as a Kubernetes service.

00:01:17.770 --> 00:01:19.420
That will spin up,
or horizontally

00:01:19.420 --> 00:01:21.580
scale as many copies
of my application

00:01:21.580 --> 00:01:23.770
called pods, that
I need to process

00:01:23.770 --> 00:01:25.877
the incoming queue of images.

00:01:25.877 --> 00:01:27.460
The rank and scale
of incoming imagery

00:01:27.460 --> 00:01:30.370
will vary over time, effectively
creating a queue of data

00:01:30.370 --> 00:01:31.545
to be processed.

00:01:31.545 --> 00:01:35.500
We can use preemptible VMs
here to save significant costs.

00:01:35.500 --> 00:01:38.080
The real-time sensor data
will also use Pub/Sub.

00:01:38.080 --> 00:01:40.090
This time to publish,
stream, and throttle data

00:01:40.090 --> 00:01:43.660
from each sensor, guaranteeing
its delivered into Dataflow.

00:01:43.660 --> 00:01:46.690
Dataflow is a serverless,
fully-managed data processing

00:01:46.690 --> 00:01:48.490
service that lets us
use the Apache Beam

00:01:48.490 --> 00:01:50.890
SDKs to perform
continuous computation

00:01:50.890 --> 00:01:52.976
over an incoming data stream.

00:01:52.976 --> 00:01:54.850
We're going to use it
here to create a moving

00:01:54.850 --> 00:01:56.890
window over the data,
combining the results

00:01:56.890 --> 00:02:00.010
of multiple, nearby drones
over a fixed period,

00:02:00.010 --> 00:02:02.080
to calculate an
accurate topographic map

00:02:02.080 --> 00:02:04.450
of environmental conditions
which it will then

00:02:04.450 --> 00:02:07.740
publish as a new Pub/Sub
stream, which in turn, triggers

00:02:07.740 --> 00:02:09.220
another Kubernetes service.

00:02:09.220 --> 00:02:10.840
This container
behind the service

00:02:10.840 --> 00:02:13.480
is designed to process the
environmental sensor readings,

00:02:13.480 --> 00:02:16.810
also using preemptible VMs
to create our virtual climate

00:02:16.810 --> 00:02:18.130
and weather.

00:02:18.130 --> 00:02:21.000
The process results from both
Kubernetes and Alpha Services

00:02:21.000 --> 00:02:22.820
are then stored in Spanner.

00:02:22.820 --> 00:02:25.570
Spanner's strong consistency
and horizontal scalability

00:02:25.570 --> 00:02:27.430
is critical in a
virtual environment that

00:02:27.430 --> 00:02:29.890
can be modified by
both real-world changes

00:02:29.890 --> 00:02:32.290
and changes made by
globally distributed users.

00:02:32.290 --> 00:02:35.200
Another Kubernetes service
takes all the virtual world data

00:02:35.200 --> 00:02:38.050
and combines it to construct
a server-based interactive

00:02:38.050 --> 00:02:40.060
virtual environment.

00:02:40.060 --> 00:02:42.650
The client side is
built as an Android app.

00:02:42.650 --> 00:02:44.410
The app will have a
Daydream UI to provide

00:02:44.410 --> 00:02:45.820
the immersive environment.

00:02:45.820 --> 00:02:48.670
We'll keep an open socket with
the server to receive updates.

00:02:48.670 --> 00:02:50.440
And we'll send
back any changes we

00:02:50.440 --> 00:02:53.020
make to apply them
server-side to Spanner,

00:02:53.020 --> 00:02:54.910
so that it can then be
reflected across all

00:02:54.910 --> 00:02:56.280
of the other clients.

00:02:56.280 --> 00:02:58.189
The speech recognition
and Translate API

00:02:58.189 --> 00:02:59.980
is, in short, everyone
in the virtual earth

00:02:59.980 --> 00:03:02.440
can communicate in real
time, no matter what

00:03:02.440 --> 00:03:04.390
their native language.

00:03:04.390 --> 00:03:08.770
And finally, we send all the
user analytics to BigQuery.

00:03:08.770 --> 00:03:10.300
We use streaming
inserts, so we can

00:03:10.300 --> 00:03:11.769
analyze how people
are interacting

00:03:11.769 --> 00:03:13.810
with that virtual earth,
and create a Data Studio

00:03:13.810 --> 00:03:16.570
dashboard to keep track
of current usage patterns

00:03:16.570 --> 00:03:18.280
over time.

00:03:18.280 --> 00:03:19.145
There you have it.

00:03:19.145 --> 00:03:21.520
Do you want to escape a world
in which red balloons float

00:03:21.520 --> 00:03:23.200
on every street corner?

00:03:23.200 --> 00:03:25.420
Try my virtual world.

00:03:25.420 --> 00:03:26.670
COLT MCANLIS: Well, all right.

00:03:26.670 --> 00:03:28.350
Nice to see you go
first for a change.

00:03:28.350 --> 00:03:29.050
How'd that feel?

00:03:29.050 --> 00:03:29.620
RETO MEIER: It felt good.

00:03:29.620 --> 00:03:30.994
It was nice not
to be constrained

00:03:30.994 --> 00:03:33.060
by your architecture
for a change.

00:03:33.060 --> 00:03:34.144
You ready to take a swing?

00:03:34.144 --> 00:03:36.809
COLT MCANLIS: Listen, I got paid
for the better part of a decade

00:03:36.809 --> 00:03:37.650
to make video games.

00:03:37.650 --> 00:03:40.770
Let's get this party started.

00:03:40.770 --> 00:03:43.200
Now, my build isn't
expecting you to run around

00:03:43.200 --> 00:03:45.070
in a realistic 3D environment.

00:03:45.070 --> 00:03:48.060
If Reto had ever
read any real sci-fi,

00:03:48.060 --> 00:03:50.280
he'd know that's
not how this works.

00:03:50.280 --> 00:03:52.740
In real sci-fi, they
sit down, jack in,

00:03:52.740 --> 00:03:54.799
and start running around
in a virtual space.

00:03:54.799 --> 00:03:56.340
So that's what we're
going to build--

00:03:56.340 --> 00:03:57.570
a virtual space.

00:03:57.570 --> 00:04:01.320
My metaverse is a
virtual reality MMORPG.

00:04:01.320 --> 00:04:02.925
Your player can
explore the wonders

00:04:02.925 --> 00:04:06.000
of my beautifully rendered
fantasy world with a pet dragon

00:04:06.000 --> 00:04:07.410
by your side.

00:04:07.410 --> 00:04:09.390
My world looks better
than the real world,

00:04:09.390 --> 00:04:11.335
so we don't care about
Reto's real world.

00:04:11.335 --> 00:04:12.960
And we're going to
ditch all the sensor

00:04:12.960 --> 00:04:15.960
stuff that's used to create
those 3D environments.

00:04:15.960 --> 00:04:18.579
Yes, even the real-time
weather stuff.

00:04:18.579 --> 00:04:21.556
See, if I live in Seattle
and it rains all the time,

00:04:21.556 --> 00:04:22.930
the last thing I
want to do is go

00:04:22.930 --> 00:04:24.960
into a game where it's raining.

00:04:24.960 --> 00:04:26.760
So let's get rid of all of that.

00:04:26.760 --> 00:04:29.746
Now, I like the Babel Fish
idea of translation and speech.

00:04:29.746 --> 00:04:30.870
That's actually super cool.

00:04:30.870 --> 00:04:32.328
So I'm going to
table that for now,

00:04:32.328 --> 00:04:34.290
so we can get to
the meat of things.

00:04:34.290 --> 00:04:36.900
This leaves us with a
few overlapping pieces.

00:04:36.900 --> 00:04:39.160
First off, yeah, got
to agree that Daydream

00:04:39.160 --> 00:04:41.550
running on Android is
the best place for this.

00:04:41.550 --> 00:04:44.820
However, Daydream by itself
is not a proper game engine.

00:04:44.820 --> 00:04:47.640
I'm going to use Unity to act
as a client-side game code

00:04:47.640 --> 00:04:50.500
interface between the user
and the Daydream system.

00:04:50.500 --> 00:04:53.430
This also means that for our
coding, scripting, and artwork,

00:04:53.430 --> 00:04:56.475
they'll all be in a file format
that Unity can understand.

00:04:56.475 --> 00:04:58.350
Now, we're going to roll
the dice on this one

00:04:58.350 --> 00:05:00.350
and say that, along with
our content generation,

00:05:00.350 --> 00:05:02.700
we'll end up with some
sort of system or governing

00:05:02.700 --> 00:05:05.970
body that decides how and
where new zones and regions are

00:05:05.970 --> 00:05:06.600
added.

00:05:06.600 --> 00:05:09.780
We're also going to need an
update staging area, where

00:05:09.780 --> 00:05:12.210
new content and fixes
can be stored and pushed

00:05:12.210 --> 00:05:13.680
to the clients and servers.

00:05:13.680 --> 00:05:15.330
We'll use a
combination of Spanner

00:05:15.330 --> 00:05:18.390
and cloud storage to hold both
the relational items as well

00:05:18.390 --> 00:05:19.950
as the binary data.

00:05:19.950 --> 00:05:21.727
We'll also put in a
GCF frontend, which

00:05:21.727 --> 00:05:23.310
allows the client
to check for updates

00:05:23.310 --> 00:05:24.851
and get a list of
the things it needs

00:05:24.851 --> 00:05:28.260
to connect to in cloud storage
to download and update.

00:05:28.260 --> 00:05:32.250
And just to make sure that
you are who you say you are,

00:05:32.250 --> 00:05:35.220
we're going to add an App
Engine frontend instance, which

00:05:35.220 --> 00:05:37.890
will leverage cloud IAM to
authenticate and identify

00:05:37.890 --> 00:05:40.440
the user and communicate
with the account management

00:05:40.440 --> 00:05:43.290
database, which may include
some sensitive information

00:05:43.290 --> 00:05:45.000
like billing and contact data.

00:05:45.000 --> 00:05:48.600
For my application, we're
going with App Engine Flex.

00:05:48.600 --> 00:05:51.660
For some services, I can just
use the provided run times,

00:05:51.660 --> 00:05:54.450
but I can also customize it
with my own Docker images

00:05:54.450 --> 00:05:56.610
if we need some
specific functionality.

00:05:56.610 --> 00:05:58.680
By the way, this whole
thing is very important

00:05:58.680 --> 00:06:02.100
if we're trying to make a
metaverse-level game engine.

00:06:02.100 --> 00:06:03.810
As a user enters
a game zone, we'll

00:06:03.810 --> 00:06:06.060
figure out their closest
region that we're deployed in

00:06:06.060 --> 00:06:08.310
and connect them directly
to a world shard that's

00:06:08.310 --> 00:06:10.682
backed by a GAE Flex instance.

00:06:10.682 --> 00:06:12.390
These world shards
will help align things

00:06:12.390 --> 00:06:15.720
like player and NPC movement and
keep all the attached clients

00:06:15.720 --> 00:06:18.780
coordinated, so you don't see
people clipping through walls.

00:06:18.780 --> 00:06:21.990
Now, along with that, we'll have
a separate game service, which

00:06:21.990 --> 00:06:24.010
is hosted on another cluster.

00:06:24.010 --> 00:06:26.700
This is responsible for things
like trades, auction houses,

00:06:26.700 --> 00:06:29.700
guilds, and some basic types
of combat organization.

00:06:29.700 --> 00:06:31.470
To accomplish all
that, we'll synchronize

00:06:31.470 --> 00:06:33.750
the state between the
instances, using the awesomeness

00:06:33.750 --> 00:06:35.400
of Cloud Spanner.

00:06:35.400 --> 00:06:38.430
Now, another great reason
to use App Engine Flex is it

00:06:38.430 --> 00:06:40.140
has horizontal
scaling, without having

00:06:40.140 --> 00:06:42.600
to worry about cluster
resource constraints.

00:06:42.600 --> 00:06:44.580
So that, combined
with Spanner, means

00:06:44.580 --> 00:06:46.230
that I can scale to
the levels I need,

00:06:46.230 --> 00:06:48.120
without having to
page a bunch of SREs

00:06:48.120 --> 00:06:49.800
to punch a hole in
the wall and plug

00:06:49.800 --> 00:06:51.630
in new servers in the
middle of the night.

00:06:51.630 --> 00:06:54.870
Now, for situations where we're
using custom Docker images,

00:06:54.870 --> 00:06:56.835
we'll also add a path to
the Container Registry

00:06:56.835 --> 00:07:00.360
to host new container images
to be used for these services.

00:07:00.360 --> 00:07:02.850
Otherwise, we can handle
service code deployments

00:07:02.850 --> 00:07:05.560
through standard
rollout processes.

00:07:05.560 --> 00:07:07.770
Now, finally, let's
add that chat service.

00:07:07.770 --> 00:07:09.540
Much like Reto's
build, I like the idea

00:07:09.540 --> 00:07:11.800
of adding auto translation
systems in there.

00:07:11.800 --> 00:07:14.250
I actually think he
got that part right.

00:07:14.250 --> 00:07:15.510
So there you have it.

00:07:15.510 --> 00:07:17.880
A somewhat modern approach
to building, scaling,

00:07:17.880 --> 00:07:21.302
updating, and interacting with
a massive metaverse environment.

00:07:21.302 --> 00:07:23.010
And with the time I
have left, let's talk

00:07:23.010 --> 00:07:25.090
about how to add things
like microtransactions,

00:07:25.090 --> 00:07:26.927
in-game advertisements,
and a hot key

00:07:26.927 --> 00:07:29.010
that'll bring food to your
door, so you don't even

00:07:29.010 --> 00:07:30.900
have to leave the game.

00:07:30.900 --> 00:07:33.157
RETO MEIER: Just couldn't
resist, could you?

00:07:33.157 --> 00:07:34.740
COLT MCANLIS: I'm a
creature of habit.

00:07:34.740 --> 00:07:36.540
RETO MEIER: Now, it's
your turn to decide

00:07:36.540 --> 00:07:37.740
which build was better--

00:07:37.740 --> 00:07:41.130
my transformative rendering of
our world, a boon to science,

00:07:41.130 --> 00:07:42.540
and knowledge,
and understanding,

00:07:42.540 --> 00:07:45.469
and Colt's mildly
addictive MMORPG.

00:07:45.469 --> 00:07:47.260
COLT MCANLIS: Your
build was so convoluted,

00:07:47.260 --> 00:07:50.100
I was expecting you to put
a 3D printer inside VR.

00:07:50.100 --> 00:07:51.810
In any case, it's not up to us.

00:07:51.810 --> 00:07:53.067
It's up to you, the viewer.

00:07:53.067 --> 00:07:55.650
Leave a comment below the video
to say which one of our builds

00:07:55.650 --> 00:07:56.150
is better.

00:07:56.150 --> 00:07:58.666
And don't forget to check
out the "Build Out" podcast,

00:07:58.666 --> 00:08:00.540
where we take a deep
dive into the technology

00:08:00.540 --> 00:08:01.620
behind these builds.

00:08:01.620 --> 00:08:02.470
RETO MEIER: Thanks for watching.

00:08:02.470 --> 00:08:03.090
I'm Reto Meier.

00:08:03.090 --> 00:08:04.210
COLT MCANLIS: And
I'm Colt McAnlis.

00:08:04.210 --> 00:08:05.550
Always remember, perf matters.

00:08:05.550 --> 00:08:07.700
[MUSIC PLAYING]

