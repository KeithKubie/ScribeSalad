WEBVTT
Kind: captions
Language: en

00:00:00.292 --> 00:00:01.750
Understanding what
people are doing

00:00:01.750 --> 00:00:04.557
can help your app better
adapt your users needs.

00:00:04.557 --> 00:00:06.390
I'm Mark Stogaitis and
I'm going to show you

00:00:06.390 --> 00:00:09.590
how you can tell if your users
are walking, running, cycling,

00:00:09.590 --> 00:00:11.430
or in a vehicle
and how to use it

00:00:11.430 --> 00:00:13.711
to improve your app experience.

00:00:13.711 --> 00:00:15.710
This could be done with
the activity recognition

00:00:15.710 --> 00:00:17.250
API on Android.

00:00:17.250 --> 00:00:19.550
Once you set up the system
in your application,

00:00:19.550 --> 00:00:21.370
activities are
automatically detected

00:00:21.370 --> 00:00:23.950
by periodically reading
short bursts of sensor data

00:00:23.950 --> 00:00:27.050
and processing them using
machine learning models.

00:00:27.050 --> 00:00:28.510
We've recently
trained new models

00:00:28.510 --> 00:00:30.120
as well as added
the use of Bluetooth

00:00:30.120 --> 00:00:32.130
to significantly
improve the accuracy

00:00:32.130 --> 00:00:35.490
and reduce the latency
of detected activities.

00:00:35.490 --> 00:00:37.530
Receiving recognize
activity callbacks only

00:00:37.530 --> 00:00:39.290
takes a few lines of code.

00:00:39.290 --> 00:00:41.920
Start by connecting to the
activity recognition API

00:00:41.920 --> 00:00:44.840
and defining where you want
connection callbacks to go,

00:00:44.840 --> 00:00:48.370
then request activity updates by
specifying a desired detection

00:00:48.370 --> 00:00:50.190
interval and a pending
intent where you'd

00:00:50.190 --> 00:00:52.386
like activities delivered.

00:00:52.386 --> 00:00:54.010
Your application will
receive callbacks

00:00:54.010 --> 00:00:56.920
with extras containing an
activity recognition result.

00:00:56.920 --> 00:00:58.360
This contains a
list of activities

00:00:58.360 --> 00:01:01.330
that the user may be doing
at a particular time.

00:01:01.330 --> 00:01:03.690
So what can you do with
this extra information?

00:01:03.690 --> 00:01:06.150
Well, for example, if
a user starts running,

00:01:06.150 --> 00:01:08.690
you'll get a callback indicating
the most probable activity

00:01:08.690 --> 00:01:09.900
is running.

00:01:09.900 --> 00:01:12.020
If the confidence
is 75 or higher,

00:01:12.020 --> 00:01:14.510
you know you can act on
it and show notification

00:01:14.510 --> 00:01:17.620
asking if they want to
start tracking their run.

00:01:17.620 --> 00:01:21.250
Or when an app is in use
and the user starts driving,

00:01:21.250 --> 00:01:24.570
you can offer up a switch
to car mode dialogue.

00:01:24.570 --> 00:01:26.560
You can also use it
for historical cases

00:01:26.560 --> 00:01:29.160
so just showing your users
where they parked their car

00:01:29.160 --> 00:01:32.930
or how long they spent
commuting to work each day.

00:01:32.930 --> 00:01:35.050
Reducing memory consumption
is important to keep

00:01:35.050 --> 00:01:36.780
phones running smoothly.

00:01:36.780 --> 00:01:38.877
When using the API,
a common use case

00:01:38.877 --> 00:01:40.960
is that an application
wants to monitor activities

00:01:40.960 --> 00:01:43.880
in the background and perform an
action when a specific activity

00:01:43.880 --> 00:01:45.410
is detected.

00:01:45.410 --> 00:01:47.670
Typically, when
developing for Android,

00:01:47.670 --> 00:01:50.780
you'd use a persistent running
service to handle this.

00:01:50.780 --> 00:01:53.560
But sadly, that consumes
a lot of resources.

00:01:53.560 --> 00:01:55.570
This API removes that
burden by delivering

00:01:55.570 --> 00:01:57.570
the data via an intent.

00:01:57.570 --> 00:01:59.380
The application specifies
a pending intent

00:01:59.380 --> 00:02:01.464
callback typically
an intent service,

00:02:01.464 --> 00:02:03.130
which will be called
with an intent when

00:02:03.130 --> 00:02:04.732
activities are detected.

00:02:04.732 --> 00:02:06.940
So there's no need to keep
the service always running

00:02:06.940 --> 00:02:08.900
in the background.

00:02:08.900 --> 00:02:11.740
Minimizing battery
usage is also important.

00:02:11.740 --> 00:02:14.260
On devices that have
significant motion sensor,

00:02:14.260 --> 00:02:16.444
the battery is conserved
by stopping activity

00:02:16.444 --> 00:02:17.860
reporting when the
device is still

00:02:17.860 --> 00:02:20.230
for an extended period of time.

00:02:20.230 --> 00:02:23.119
It'll resume once
devices move again.

00:02:23.119 --> 00:02:24.660
I hope this gives
you a taste for how

00:02:24.660 --> 00:02:27.730
your app can make use of the
activity recognition API.

00:02:27.730 --> 00:02:29.010
This is just the beginning.

00:02:29.010 --> 00:02:31.680
Watch out for new activity
types being added soon.

00:02:31.680 --> 00:02:38.030
[MUSIC PLAYING]

