WEBVTT
Kind: captions
Language: en

00:00:02.850 --> 00:00:06.850
PROFESSOR: Today, we are
talking about the local behavior

00:00:06.850 --> 00:00:08.970
of a crease pattern.

00:00:08.970 --> 00:00:13.240
So you take some crease
pattern for some flat folding--

00:00:13.240 --> 00:00:15.419
we're thinking about
flat foldability.

00:00:15.419 --> 00:00:16.710
This is a foldability question.

00:00:16.710 --> 00:00:18.293
I give you a crease
pattern like this.

00:00:18.293 --> 00:00:22.350
I want to know, does it fold
flat, like this one does.

00:00:22.350 --> 00:00:25.660
And we're studying
what happens locally

00:00:25.660 --> 00:00:28.220
right around a single vertex.

00:00:28.220 --> 00:00:30.870
So I didn't mention
graph terminology.

00:00:30.870 --> 00:00:32.509
It's probably useful
to mention that.

00:00:32.509 --> 00:00:35.580
These corners-- where all the
edges come together-- those

00:00:35.580 --> 00:00:36.270
are vertices.

00:00:36.270 --> 00:00:39.040
These triangles-- or in
general, some regions

00:00:39.040 --> 00:00:41.255
divided by the
creases-- we call faces.

00:00:44.060 --> 00:00:48.100
If we just sort of imagine
cutting a little disk

00:00:48.100 --> 00:00:50.770
around that vertex and
seeing how it behaves,

00:00:50.770 --> 00:00:54.900
we get a nice circular piece of
paper with some crease pattern.

00:00:54.900 --> 00:00:58.000
And we want to understand when
those things fold flat and when

00:00:58.000 --> 00:00:58.500
they don't.

00:00:58.500 --> 00:01:00.710
Sometimes they do,
sometimes they don't.

00:01:00.710 --> 00:01:05.700
This is kind of like a one
dimensional folding problem.

00:01:05.700 --> 00:01:09.280
So let me write some
stuff about that.

00:01:16.130 --> 00:01:19.770
So we get what we call single
vertex crease patterns.

00:01:30.860 --> 00:01:34.700
So something like--
this is the example

00:01:34.700 --> 00:01:37.660
I have made-- just
something like that.

00:01:37.660 --> 00:01:38.890
That should be flat foldable.

00:01:41.590 --> 00:01:48.270
So we think of having
a disk of paper.

00:01:48.270 --> 00:01:50.544
It doesn't really
matter, but it's

00:01:50.544 --> 00:01:51.960
going to be easier
to reason about

00:01:51.960 --> 00:01:53.790
and think about a disk of paper.

00:01:53.790 --> 00:01:56.940
Really, we just mean some small
region around that vertex.

00:01:56.940 --> 00:01:59.800
There's obviously one vertex
in the crease pattern.

00:01:59.800 --> 00:02:05.416
Let's say we have n creases
emanating from one vertex.

00:02:16.510 --> 00:02:18.610
This pattern is
going to be defined

00:02:18.610 --> 00:02:21.640
by some sequence of angles.

00:02:38.560 --> 00:02:41.890
In general, theta
1 up to theta n.

00:02:41.890 --> 00:02:46.060
If there are n creases, there
will be n angles between them,

00:02:46.060 --> 00:02:48.790
say in clockwise order.

00:02:48.790 --> 00:02:53.000
And let's see.

00:02:53.000 --> 00:03:00.330
When we fold this thing
flat-- like in this picture--

00:03:00.330 --> 00:03:02.760
we take this disk.

00:03:02.760 --> 00:03:06.330
We fold it along all
of those creases.

00:03:06.330 --> 00:03:07.860
What I'd like to
focus on is what

00:03:07.860 --> 00:03:10.590
happens to the
boundary of the paper.

00:03:10.590 --> 00:03:11.870
So there's this outer circle.

00:03:11.870 --> 00:03:13.720
The boundary is a circle.

00:03:13.720 --> 00:03:15.840
And locally, if you look
at one of these creases,

00:03:15.840 --> 00:03:19.950
it's like folding the
circle in half onto itself.

00:03:19.950 --> 00:03:22.900
And when you make all of these
creases, if you're successful,

00:03:22.900 --> 00:03:27.716
you end up folding the circle
onto a portion of the circle.

00:03:27.716 --> 00:03:29.340
So if you look at
this boundary-- which

00:03:29.340 --> 00:03:31.680
is a little hard to see.

00:03:31.680 --> 00:03:32.960
Why don't I trace it?

00:03:32.960 --> 00:03:35.980
It's going to do
something like this.

00:03:43.400 --> 00:03:47.720
So this is what the 3D
thing looks like blown up

00:03:47.720 --> 00:03:50.851
a little bit-- and I changed
the angles a little bit.

00:03:50.851 --> 00:03:52.850
But this is what a flat
folding would look like.

00:03:52.850 --> 00:03:54.830
And I'm really just
focusing on how

00:03:54.830 --> 00:04:00.270
the circle maps
around this circle.

00:04:00.270 --> 00:04:08.826
So a flat folding of a disk also
folds a circle onto a circle.

00:04:08.826 --> 00:04:14.630
So we have a flat folding on one
of these single vertex crease

00:04:14.630 --> 00:04:28.250
patterns, we get a folding
of a circle onto a circle.

00:04:28.250 --> 00:04:32.090
This is nice, because
circles are one dimensional.

00:04:32.090 --> 00:04:34.710
And last class, we talked about
folding one dimensional line

00:04:34.710 --> 00:04:35.210
segments.

00:04:35.210 --> 00:04:37.650
A circle is just a little
bit more complicated.

00:04:37.650 --> 00:04:39.740
It's different topology.

00:04:39.740 --> 00:04:42.060
But we can use a lot
of the same mindset,

00:04:42.060 --> 00:04:46.180
at least, as we did for folding
line segments onto the line.

00:04:46.180 --> 00:04:50.940
In particular, you can see,
yeah, this is kind of circular.

00:04:50.940 --> 00:04:53.860
But you could also imagine
unrolling it a little bit

00:04:53.860 --> 00:04:55.640
and making it straight.

00:04:55.640 --> 00:04:58.090
Something like this.

00:04:58.090 --> 00:05:00.310
So that it lies on
a straight line,

00:05:00.310 --> 00:05:03.160
if you just unroll that circle.

00:05:03.160 --> 00:05:06.870
So you also get a folding
of a circle in some sense

00:05:06.870 --> 00:05:11.705
onto a line by unrolling.

00:05:14.720 --> 00:05:18.380
Now, at this point, I want to
mention a slight issue here.

00:05:20.960 --> 00:05:25.590
I mean for this
unrolling to work--

00:05:25.590 --> 00:05:29.500
if you're taking a circle
like this-- in particular,

00:05:29.500 --> 00:05:32.350
you must make at least one
fold for this to be possible.

00:05:32.350 --> 00:05:35.080
Because right now, if I
haven't folded anything,

00:05:35.080 --> 00:05:37.070
I just have a big circle,
I can't unroll circle

00:05:37.070 --> 00:05:38.000
onto a line.

00:05:38.000 --> 00:05:39.650
I haven't collapsed it.

00:05:39.650 --> 00:05:41.970
Yet here, I've made
it small enough

00:05:41.970 --> 00:05:44.510
that it only occupies a
portion of the entire circle.

00:05:44.510 --> 00:05:45.960
And so I can unroll it.

00:05:45.960 --> 00:05:49.140
So this is true, as long as
I make at least one fold.

00:05:52.560 --> 00:05:53.410
OK.

00:05:53.410 --> 00:05:55.840
Technically, I need to
assume another thing, which

00:05:55.840 --> 00:05:59.920
is that this thing came
from a flat piece of paper.

00:05:59.920 --> 00:06:01.640
I said there were these angles.

00:06:01.640 --> 00:06:06.790
And what I intended to mean is
that the sum of those angles

00:06:06.790 --> 00:06:13.190
is 360 degrees, as it is
in a flat piece of paper.

00:06:13.190 --> 00:06:16.340
But I'm not always going
to require this assumption.

00:06:16.340 --> 00:06:17.940
It's what we care
about for thinking

00:06:17.940 --> 00:06:20.556
about a crease pattern
of a flat piece of paper

00:06:20.556 --> 00:06:21.680
and we look at each vertex.

00:06:21.680 --> 00:06:23.960
This will be true.

00:06:23.960 --> 00:06:27.790
But when we reason about these
single vertex crease patterns,

00:06:27.790 --> 00:06:31.890
it's really useful to think
about, sort of in the middle,

00:06:31.890 --> 00:06:33.130
this could get smaller.

00:06:33.130 --> 00:06:35.660
So for example, you have
a pattern like this.

00:06:35.660 --> 00:06:38.880
Let's say I just take these
two creases on the bottom

00:06:38.880 --> 00:06:40.450
and I fold a crimp.

00:06:40.450 --> 00:06:43.580
Because I know a cramp is
kind of a good thing to do.

00:06:43.580 --> 00:06:46.540
So now I have what's
called a cone of paper.

00:06:46.540 --> 00:06:49.054
The sum of the angles--
there's two angles here,

00:06:49.054 --> 00:06:49.970
this one and this one.

00:06:49.970 --> 00:06:55.920
Each one looks like
270-- no, not 270, 135?

00:06:55.920 --> 00:06:57.530
In total, it's 270.

00:06:57.530 --> 00:06:59.620
So the total angle there
is now less than 360.

00:06:59.620 --> 00:07:03.660
This is what we
call a convex cone.

00:07:03.660 --> 00:07:09.640
So if you relax this
constraint to allow less than

00:07:09.640 --> 00:07:13.770
or equal to 360, then
we get a convex cone.

00:07:16.730 --> 00:07:19.340
And today, I only want to talk
about flat paper and convex

00:07:19.340 --> 00:07:19.840
cones.

00:07:19.840 --> 00:07:21.990
We need this for the
induction, essentially--

00:07:21.990 --> 00:07:24.590
for proving things
about the flat case.

00:07:24.590 --> 00:07:27.740
In the textbook-- if you look
at this chapter on single vertex

00:07:27.740 --> 00:07:30.500
crease patterns-- we
also prove or study

00:07:30.500 --> 00:07:33.170
the case where the sum of the
angles is greater than 360,

00:07:33.170 --> 00:07:35.300
which you could never
make from flat paper.

00:07:35.300 --> 00:07:36.680
But hey, it's fun
to think about.

00:07:36.680 --> 00:07:38.740
It's a natural generalization.

00:07:38.740 --> 00:07:41.000
And all the things
that we do here,

00:07:41.000 --> 00:07:42.721
you can generalize
to that situation.

00:07:42.721 --> 00:07:43.970
It's just a little bit harder.

00:07:51.780 --> 00:07:57.420
So what does it take to
fold a circle onto a line?

00:07:57.420 --> 00:07:59.390
In this situation
of a convex cone,

00:07:59.390 --> 00:08:02.454
where we make at least
one fold, our folding

00:08:02.454 --> 00:08:04.370
is going to lie along a
portion of the circle.

00:08:04.370 --> 00:08:06.390
We can unroll it
a little bit, get

00:08:06.390 --> 00:08:08.270
something lying on
a straight line.

00:08:10.930 --> 00:08:16.480
It's kind of like folding a line
segment onto a straight line,

00:08:16.480 --> 00:08:21.200
if it was flat folding of one
dimensional pieces of paper.

00:08:28.220 --> 00:08:30.600
But there's a lot
of differences.

00:08:30.600 --> 00:08:32.679
I mean, they are similar.

00:08:32.679 --> 00:08:34.470
But a lot of the things
we proved last time

00:08:34.470 --> 00:08:36.500
do not hold in the
case of circular paper.

00:08:36.500 --> 00:08:40.400
So I have a bunch of them here.

00:08:40.400 --> 00:08:43.070
So one problem-- you
may recall before,

00:08:43.070 --> 00:08:45.650
if we had a line segment and
we put an arbitrary crease

00:08:45.650 --> 00:08:49.100
pattern, then we could just
assign a mountain valley

00:08:49.100 --> 00:08:51.090
assignment, alternating
mountain valley.

00:08:51.090 --> 00:08:54.350
And that would always
fold flat, no collisions.

00:08:54.350 --> 00:08:54.850
OK.

00:08:54.850 --> 00:08:58.480
In this world of having a
circular piece of paper,

00:08:58.480 --> 00:09:00.670
that's no longer true.

00:09:00.670 --> 00:09:04.570
For example, if you have
this kind of crease pattern

00:09:04.570 --> 00:09:07.070
on a circle or in
the disk, it would

00:09:07.070 --> 00:09:09.880
look like this,
those two creases.

00:09:09.880 --> 00:09:11.440
You can't fold that thing flat.

00:09:11.440 --> 00:09:13.240
It's not going to work.

00:09:13.240 --> 00:09:16.300
We'll see exactly what
you need to forbid

00:09:16.300 --> 00:09:18.890
for that to make sense.

00:09:18.890 --> 00:09:25.500
Another example is
something like this.

00:09:31.720 --> 00:09:35.320
I mean, if I tried to draw this
in the line, what's happening

00:09:35.320 --> 00:09:38.550
is I have a short segment and
then I have a long segment.

00:09:38.550 --> 00:09:40.800
So the problem is
those ends don't meet.

00:09:40.800 --> 00:09:43.220
But even when the ends
meet-- like in this picture,

00:09:43.220 --> 00:09:45.660
imagine these are
vertically aligned--

00:09:45.660 --> 00:09:48.560
if I do this alternating
mountain valley pattern--

00:09:48.560 --> 00:09:52.010
mountain valley assignment--
I can't join these ends

00:09:52.010 --> 00:09:55.550
and make a circle, because that
would collide with everything.

00:09:55.550 --> 00:09:59.220
So this thing actually
does have a flat folding

00:09:59.220 --> 00:10:00.680
starting from a circle.

00:10:00.680 --> 00:10:03.410
And I'm not going to try
to un-map it to a circle.

00:10:03.410 --> 00:10:05.170
It does fold, but not like that.

00:10:08.170 --> 00:10:11.620
Not with that alternating
mountain valley pattern.

00:10:11.620 --> 00:10:13.440
There are other annoying things.

00:10:13.440 --> 00:10:19.660
Let me tell you one
more on the proof side.

00:10:19.660 --> 00:10:26.150
Last time, we had
a lemma that said,

00:10:26.150 --> 00:10:27.840
if your crease
pattern is mingling--

00:10:27.840 --> 00:10:30.360
which still is a
meaningful notion here--

00:10:30.360 --> 00:10:34.336
then you have a crimp, or
an end fold in that case.

00:10:34.336 --> 00:10:36.210
Here, of course, we
don't have any end folds.

00:10:36.210 --> 00:10:38.409
Here, we also do not
get this implication.

00:10:38.409 --> 00:10:40.450
Mingling does not imply
the existence of a crimp.

00:10:40.450 --> 00:10:45.020
And where the proof breaks
down is if you have-- so

00:10:45.020 --> 00:10:48.720
if you remember, our
parentheses from last time--

00:10:48.720 --> 00:10:50.270
we had this kind of pattern.

00:10:50.270 --> 00:10:56.420
And we said, well, you
keep going and either

00:10:56.420 --> 00:10:58.630
on the left side, you have
a beginning open paren

00:10:58.630 --> 00:11:02.406
or on the right side you have
a closing round parenthesis.

00:11:02.406 --> 00:11:04.030
In either case, you've
got an end fold.

00:11:04.030 --> 00:11:06.090
Now, this can actually
happen in a circle.

00:11:06.090 --> 00:11:07.949
And so you have
nothing you can do.

00:11:07.949 --> 00:11:09.240
So you could have this pattern.

00:11:09.240 --> 00:11:11.720
There would be no crimp.

00:11:11.720 --> 00:11:14.700
And probably, in that case,
you would not be flat foldable,

00:11:14.700 --> 00:11:17.580
but in particular,
this implication fails.

00:11:17.580 --> 00:11:19.364
So we have to do more work.

00:11:19.364 --> 00:11:21.280
But we're going to get
the same kind of result

00:11:21.280 --> 00:11:23.360
that, in linear
time, we can tell

00:11:23.360 --> 00:11:25.020
whether one of these
things folds flat.

00:11:28.219 --> 00:11:32.490
So that's good news.

00:11:32.490 --> 00:11:37.890
So last time, telling whether
a crease pattern folded flat

00:11:37.890 --> 00:11:38.460
was trivial.

00:11:38.460 --> 00:11:40.110
The answer was always yes.

00:11:40.110 --> 00:11:41.494
And now, it's not so trivial.

00:11:41.494 --> 00:11:42.910
So let's start
with characterizing

00:11:42.910 --> 00:11:44.600
crease patterns that fold flat.

00:11:44.600 --> 00:11:47.430
Then we will go to mountain
valley patterns that fold flat.

00:12:16.766 --> 00:12:18.390
It'd be great if I
could just say that,

00:12:18.390 --> 00:12:20.265
but I mean here, of
course, single vertex.

00:12:26.040 --> 00:12:29.180
So I give you one of
these sequence of angles.

00:12:29.180 --> 00:12:32.050
Let's say it sums
to 360 or less.

00:12:32.050 --> 00:12:35.620
When is it going to
be flat foldable?

00:12:35.620 --> 00:12:36.870
And the answer is very simple.

00:12:39.620 --> 00:12:40.540
Let me write it down.

00:12:53.970 --> 00:12:57.140
This thing is going to be
flat foldable if and only

00:12:57.140 --> 00:13:08.424
if the sum of the odd
angles is equal to the sum

00:13:08.424 --> 00:13:09.215
of the even angles.

00:13:16.130 --> 00:13:20.560
And, yeah, I'm implicitly
assuming and requiring

00:13:20.560 --> 00:13:22.290
here that n is even.

00:13:22.290 --> 00:13:23.940
That's something we'll prove.

00:13:23.940 --> 00:13:27.760
So n is actually even and
minus 1 is going be odd.

00:13:27.760 --> 00:13:29.530
And if you happen
to have started

00:13:29.530 --> 00:13:33.720
with a flat piece of paper--
for the sum of all these things

00:13:33.720 --> 00:13:36.920
is 360-- then of course, if
you have them evenly divided,

00:13:36.920 --> 00:13:40.950
this sum will be 180 degrees.

00:13:40.950 --> 00:13:44.780
But if you started with the
convex cone, it'll be smaller.

00:13:48.370 --> 00:13:50.710
For this reason, a lot of
people-- or some people

00:13:50.710 --> 00:13:53.850
call this the 180 degree
property, or the pie property--

00:13:53.850 --> 00:13:57.740
if you like to think in
radians instead of degrees.

00:13:57.740 --> 00:14:00.780
And we can do a
little example here.

00:14:00.780 --> 00:14:08.480
This guy-- this crease pattern--
has a 90 degree angle here.

00:14:08.480 --> 00:14:10.870
And it has a 90 degree
angle down here.

00:14:10.870 --> 00:14:12.790
So the sum of those two is 180.

00:14:12.790 --> 00:14:16.210
Those are alternating angles,
different parity classes.

00:14:16.210 --> 00:14:17.940
This is 45.

00:14:17.940 --> 00:14:21.740
This is the complement, 135.

00:14:21.740 --> 00:14:24.620
And those also sum
to 180, of course.

00:14:24.620 --> 00:14:26.080
One does only if the other does.

00:14:26.080 --> 00:14:27.760
So it's flat foldable.

00:14:27.760 --> 00:14:28.460
We're golden.

00:14:28.460 --> 00:14:33.140
Something like this
is bad, because I

00:14:33.140 --> 00:14:34.280
mean it's an even number.

00:14:34.280 --> 00:14:39.240
But the odd angles do not equal
the sum of the even angles.

00:14:39.240 --> 00:14:41.279
One's clearly bigger.

00:14:41.279 --> 00:14:42.570
And this is a general property.

00:14:42.570 --> 00:14:45.000
This is also called
Kawasaki's theorem

00:14:45.000 --> 00:14:48.220
or Kawasaki-Justin's theorem.

00:14:48.220 --> 00:14:50.920
They proved it in 1989.

00:14:50.920 --> 00:14:52.600
This is pretty
much the beginning

00:14:52.600 --> 00:14:56.050
of origami mathematics.

00:14:56.050 --> 00:14:58.224
So let's prove it.

00:14:58.224 --> 00:14:59.390
There's two things to prove.

00:14:59.390 --> 00:15:02.390
One is that any flat
foldable crease pattern

00:15:02.390 --> 00:15:04.487
has this property,
which is pretty easy.

00:15:04.487 --> 00:15:06.320
And the other, which
is a little bit harder,

00:15:06.320 --> 00:15:07.380
is that if you
have this property,

00:15:07.380 --> 00:15:08.760
you really are flat foldable.

00:15:08.760 --> 00:15:10.135
That's the full
characterization.

00:15:14.090 --> 00:15:17.240
So let's start with
the easy direction.

00:15:17.240 --> 00:15:19.930
If you're flat foldable,
you must have that sum.

00:15:22.870 --> 00:15:25.100
OK.

00:15:25.100 --> 00:15:29.421
So it's all about thinking
what happens at a crease.

00:15:29.421 --> 00:15:30.920
So we're thinking
about the boundary

00:15:30.920 --> 00:15:31.878
of this piece of paper.

00:15:31.878 --> 00:15:33.590
We're thinking about the circle.

00:15:33.590 --> 00:15:40.260
And what's happening on
the circle as you travel,

00:15:40.260 --> 00:15:42.870
say counterclockwise
for some amount

00:15:42.870 --> 00:15:45.450
of time, that would
be first angle.

00:15:45.450 --> 00:15:46.326
Then you make a fold.

00:15:46.326 --> 00:15:47.700
It's either a
mountain or valley.

00:15:47.700 --> 00:15:49.140
At this point, we don't care.

00:15:49.140 --> 00:15:52.250
Either way, you turn around--
maybe you turn around this way,

00:15:52.250 --> 00:15:53.910
or you turn around this way.

00:15:53.910 --> 00:15:57.140
But in terms as your
travel along a circle--

00:15:57.140 --> 00:15:59.170
so we went theta 1
counterclockwise.

00:15:59.170 --> 00:16:02.110
Now we're going to
go theta 2 clockwise;

00:16:02.110 --> 00:16:05.460
then we're going to go theta
3 counterclockwise, and so on.

00:16:05.460 --> 00:16:07.930
We keep alternating
back and forth.

00:16:07.930 --> 00:16:10.290
It's much easier to
think drawn a line.

00:16:10.290 --> 00:16:12.760
So we go to the right, theta 1.

00:16:12.760 --> 00:16:16.130
Then we go to the left, theta 2.

00:16:16.130 --> 00:16:21.040
Then we go to the
right, theta 3.

00:16:21.040 --> 00:16:23.000
And I don't know about
the layering here.

00:16:23.000 --> 00:16:25.419
I'm just drawing it in
terms of horizontal travel.

00:16:25.419 --> 00:16:26.710
The y-coordinate means nothing.

00:16:30.270 --> 00:16:34.050
In order for this thing
to be a flat folding--

00:16:34.050 --> 00:16:37.310
to be a valid folding
of a circle of paper--

00:16:37.310 --> 00:16:41.150
these guys have to have
the same x-coordinate.

00:16:41.150 --> 00:16:43.400
So I don't know-- I mean,
the y-coordinates, they also

00:16:43.400 --> 00:16:44.280
have to work out.

00:16:44.280 --> 00:16:46.238
But we're not thinking
about the y-coordinates.

00:16:46.238 --> 00:16:48.185
We're just thinking
about x travel.

00:16:48.185 --> 00:16:49.560
We've got to get
back to where we

00:16:49.560 --> 00:16:51.770
started if we're
folding a circle.

00:16:51.770 --> 00:16:53.170
That's it.

00:16:53.170 --> 00:16:57.170
So how much total travel
do we do, in a sign sense?

00:16:57.170 --> 00:16:58.490
How much do we go right?

00:16:58.490 --> 00:17:00.280
Well, we go theta
1 to the right.

00:17:00.280 --> 00:17:02.010
Then we go theta 2
to the left, which

00:17:02.010 --> 00:17:05.030
is like going negative
theta 2 to the right.

00:17:05.030 --> 00:17:07.599
And then we go through
theta 3 to the right.

00:17:07.599 --> 00:17:10.470
Then we go negative
theta 4 to the right.

00:17:10.470 --> 00:17:15.119
And you add up this alternating
summation that must equal 0.

00:17:17.960 --> 00:17:23.619
The other thing that I should
say is that n has to be even.

00:17:23.619 --> 00:17:26.950
This is maybe obvious
at this point.

00:17:26.950 --> 00:17:28.840
But we're supposed to alternate.

00:17:28.840 --> 00:17:32.340
Every time we hit a crease,
we have to change direction.

00:17:32.340 --> 00:17:36.390
And so in the end, it's
important that after theta 4,

00:17:36.390 --> 00:17:39.230
we change direction
to visit theta 1.

00:17:39.230 --> 00:17:43.490
If they were aligned-- like
if theta 4 went over here

00:17:43.490 --> 00:17:48.120
and then theta 5 went
like that, and there

00:17:48.120 --> 00:17:50.232
was an odd number of
creases, this would be bad.

00:17:50.232 --> 00:17:52.440
Even though they're lined
up, there's no crease here.

00:17:52.440 --> 00:17:55.419
You just went straight
from theta 5 theta 1.

00:17:55.419 --> 00:17:57.460
You're supposed to change
direction every crease.

00:17:57.460 --> 00:18:02.550
So also, n is even to
alternate directions.

00:18:09.650 --> 00:18:10.494
Question?

00:18:10.494 --> 00:18:11.345
AUDIENCE: Oh, no.

00:18:11.345 --> 00:18:11.886
You already--

00:18:11.886 --> 00:18:14.670
PROFESSOR: All right, good.

00:18:14.670 --> 00:18:15.570
Clear?

00:18:15.570 --> 00:18:18.730
This is pretty easy, once you
realize the angles correspond

00:18:18.730 --> 00:18:20.820
to x-coordinates in
this linear space.

00:18:26.470 --> 00:18:28.850
So why is this enough?

00:18:28.850 --> 00:18:30.680
In order to show
that this property is

00:18:30.680 --> 00:18:33.610
enough for flat
foldability, we need

00:18:33.610 --> 00:18:36.422
to actually worry about the
stacking order of these edges.

00:18:36.422 --> 00:18:38.130
We need to worry about
the y-coordinates.

00:18:38.130 --> 00:18:40.309
We need to make sure that
they can avoid collision

00:18:40.309 --> 00:18:41.850
with some mountain
valley assignment.

00:18:41.850 --> 00:18:43.615
The good news is we're free
to use whatever mountains

00:18:43.615 --> 00:18:44.530
and valleys we want.

00:18:44.530 --> 00:18:46.030
We can stack things
however we want.

00:18:46.030 --> 00:18:48.470
We just need to find
some valid state.

00:18:48.470 --> 00:18:50.670
And our intuition, from
the one dimensional case,

00:18:50.670 --> 00:18:53.790
was we should try alternating
mountains and valleys.

00:18:53.790 --> 00:18:55.040
That seemed like a good thing.

00:18:55.040 --> 00:18:58.570
It avoided collisions for
an open piece of paper--

00:18:58.570 --> 00:19:00.220
for a line segment.

00:19:00.220 --> 00:19:02.130
Of course, we know
that's not enough.

00:19:02.130 --> 00:19:06.700
Here-- somewhere--
I drew this example.

00:19:06.700 --> 00:19:09.440
So it's alternating
in the middle,

00:19:09.440 --> 00:19:12.310
and then that last
crease is a problem.

00:19:12.310 --> 00:19:13.560
But that's all we need to fix.

00:19:13.560 --> 00:19:17.220
It turns out it's not so hard.

00:19:17.220 --> 00:19:20.460
So we have a nice circle.

00:19:20.460 --> 00:19:23.384
What I'd like to do
is cut that circle.

00:19:23.384 --> 00:19:25.300
So here, I sort of cut
it and thought about it

00:19:25.300 --> 00:19:27.740
as a line segment and
then I wanted to rejoin.

00:19:27.740 --> 00:19:28.240
OK.

00:19:28.240 --> 00:19:30.380
I'm going to be careful
about where I cut it.

00:19:49.284 --> 00:19:52.201
OK, I want to cut at an
extreme left or extreme right.

00:19:52.201 --> 00:19:52.950
It doesn't matter.

00:19:52.950 --> 00:19:55.800
We can see here the cut
ended up being in the middle.

00:19:55.800 --> 00:19:57.320
That's bad.

00:19:57.320 --> 00:19:58.310
So how do I fix it?

00:20:01.530 --> 00:20:02.900
What does extreme mean?

00:20:02.900 --> 00:20:04.400
How do I tell--
given a circle, it's

00:20:04.400 --> 00:20:06.066
a little hard to say
what extreme means,

00:20:06.066 --> 00:20:07.760
because it's circular.

00:20:07.760 --> 00:20:09.180
But if I take a
picture like this,

00:20:09.180 --> 00:20:11.138
I've already drawn it
with nice x-coordinates--

00:20:11.138 --> 00:20:13.330
I don't know about the
y-coordinates yet-- I say,

00:20:13.330 --> 00:20:13.970
oh that's bad.

00:20:13.970 --> 00:20:16.900
My cut point ended
up being non-extreme.

00:20:16.900 --> 00:20:18.440
Well, this is extreme.

00:20:18.440 --> 00:20:21.840
So cut here instead.

00:20:21.840 --> 00:20:24.810
So what that means is
redraw this picture

00:20:24.810 --> 00:20:26.820
with this being the cut point.

00:20:26.820 --> 00:20:29.490
So maybe, this is the beginning.

00:20:29.490 --> 00:20:33.470
So we go like that again
and now we wrap around.

00:20:33.470 --> 00:20:35.630
So now we have this segment.

00:20:35.630 --> 00:20:38.370
And now we have this segment.

00:20:38.370 --> 00:20:40.430
And lo and behold,
it remained extreme.

00:20:40.430 --> 00:20:41.460
And this is always true.

00:20:41.460 --> 00:20:44.060
You can do this sort
of cut and rejoin

00:20:44.060 --> 00:20:46.392
the ends that were
messed up before.

00:20:46.392 --> 00:20:47.975
And you'll preserve
the x-coordinates.

00:20:47.975 --> 00:20:49.500
The x-coordinates
aren't changing

00:20:49.500 --> 00:20:51.340
when you do this kind
of transformation.

00:20:51.340 --> 00:20:54.030
So there's a clear leftmost
and there's a clear rightmost.

00:20:54.030 --> 00:20:56.130
You pick either one,
you cut there instead.

00:20:56.130 --> 00:20:58.210
And now we have
this nice property

00:20:58.210 --> 00:21:01.330
that it's easy to join
the ends, because it's

00:21:01.330 --> 00:21:02.470
as far left as you can go.

00:21:02.470 --> 00:21:04.140
There can't be anything
that penetrates,

00:21:04.140 --> 00:21:05.830
because that would
be farther left.

00:21:08.820 --> 00:21:12.470
Let me write down some
words corresponding to that.

00:21:12.470 --> 00:21:15.770
So once we cut at
this extreme crease,

00:21:15.770 --> 00:21:22.310
you can fold this
1D segment just

00:21:22.310 --> 00:21:23.520
like we used to be able to.

00:21:27.080 --> 00:21:31.550
So we can fold it flat
using the accordion fold,

00:21:31.550 --> 00:21:35.050
alternating mountain and valley.

00:21:35.050 --> 00:21:36.730
We know that works.

00:21:36.730 --> 00:21:41.430
And then all we need to show
is that the two ends can join.

00:21:44.510 --> 00:21:54.819
Those ends are the two
copies of the cut crease

00:21:54.819 --> 00:21:56.110
that we did in this first step.

00:22:00.190 --> 00:22:02.250
We need two things.

00:22:02.250 --> 00:22:05.670
One is that they are
aligned and that's

00:22:05.670 --> 00:22:10.310
where we need this condition--
that the sum of the odd angles

00:22:10.310 --> 00:22:12.980
equals the sum of even angles,
which is the same as saying

00:22:12.980 --> 00:22:15.350
the alternating sum
is equal to zero.

00:22:15.350 --> 00:22:17.270
That tells us that
whatever we do,

00:22:17.270 --> 00:22:20.650
the x-coordinates are
lined up at the end.

00:22:20.650 --> 00:22:24.710
So they are aligned by the
assumption that we made here.

00:22:24.710 --> 00:22:31.220
And you can join
without crossing.

00:22:34.730 --> 00:22:37.240
So this is a statement
about y-coordinates.

00:22:37.240 --> 00:22:40.530
And we know it's OK, because
it's at the left extreme.

00:22:40.530 --> 00:22:43.292
So by this choice
of the proper cut,

00:22:43.292 --> 00:22:45.750
there could be other things
that come right to the boundary

00:22:45.750 --> 00:22:47.570
here, but that's considered OK.

00:22:47.570 --> 00:22:50.400
That's not crossing,
that just touching.

00:22:50.400 --> 00:22:52.866
Nothing can go farther
left because it

00:22:52.866 --> 00:22:53.740
was the left extreme.

00:22:56.504 --> 00:22:57.670
That's the end of the proof.

00:22:57.670 --> 00:23:01.020
Any questions about that?

00:23:01.020 --> 00:23:05.060
That's Kawasaki's
theorem-- Kawasaki-Justin.

00:23:05.060 --> 00:23:09.850
I would mention just for fun--
this is sort of classic--

00:23:09.850 --> 00:23:15.410
if you allow one of
these-- a non-convex cone,

00:23:15.410 --> 00:23:18.250
where you have more than
360 degrees of material--

00:23:18.250 --> 00:23:20.550
this statement is not true.

00:23:20.550 --> 00:23:24.197
And there's one other
situation which can happen,

00:23:24.197 --> 00:23:26.530
which is that the alternating
sum of angles is not zero,

00:23:26.530 --> 00:23:30.430
but it's plus or minus
360 degrees, which is fun.

00:23:30.430 --> 00:23:32.550
And you can see examples
of that in the book.

00:23:36.930 --> 00:23:37.670
All right.

00:23:37.670 --> 00:23:39.260
So obviously, if
you want to tell

00:23:39.260 --> 00:23:42.661
whether a crease pattern-- or a
single vertex is flat foldable,

00:23:42.661 --> 00:23:44.410
you just compute this
thing in linear time

00:23:44.410 --> 00:23:48.220
and you know yes or no.

00:23:48.220 --> 00:23:51.290
So crease patterns
are pretty easy-- just

00:23:51.290 --> 00:23:53.840
have one extra condition.

00:23:53.840 --> 00:23:55.580
What about mountain
valley assignments?

00:23:55.580 --> 00:23:58.100
Last time, we looked at
mountain valley assignments

00:23:58.100 --> 00:24:01.214
and we showed that crimps
and end folds were always

00:24:01.214 --> 00:24:03.380
enough to fold any mountain
valley assignment that's

00:24:03.380 --> 00:24:05.760
out there.

00:24:05.760 --> 00:24:08.002
That will continue
to be true here,

00:24:08.002 --> 00:24:09.460
except now we don't
have end folds.

00:24:09.460 --> 00:24:13.141
Now, it's crimps all the way.

00:24:13.141 --> 00:24:13.890
What does it mean?

00:24:16.750 --> 00:24:25.725
So that is the flat foldable
mountain valley patterns.

00:24:34.267 --> 00:24:36.100
We're going to prove
that crimps are enough,

00:24:36.100 --> 00:24:37.724
but before we get
there, I need a bunch

00:24:37.724 --> 00:24:43.570
of sort of warm up facts about
valid mountain valley patterns.

00:24:43.570 --> 00:24:49.530
The first thing is just
counting mountains and valleys.

00:24:49.530 --> 00:24:52.650
So even if you play with a
simple example like this one,

00:24:52.650 --> 00:24:56.420
you see it as three
mountains and one valley

00:24:56.420 --> 00:24:58.790
or three valleys
and one mountain.

00:24:58.790 --> 00:25:02.525
In fact, if you have
a degree 4 vertex,

00:25:02.525 --> 00:25:04.780
with four creases
emanating from that point,

00:25:04.780 --> 00:25:06.830
those are your only choices.

00:25:06.830 --> 00:25:09.770
You could try, for example,
making it all valleys,

00:25:09.770 --> 00:25:14.350
and it-- I mean,
you can't do it.

00:25:14.350 --> 00:25:16.110
It's hard to demonstrate.

00:25:16.110 --> 00:25:19.200
You could try making it two
mountains and two valleys.

00:25:19.200 --> 00:25:21.330
Maybe I try to do
mountain mountain here

00:25:21.330 --> 00:25:23.940
and then somehow this is going
to be valley valley there.

00:25:23.940 --> 00:25:26.740
It's no good.

00:25:26.740 --> 00:25:33.620
But what's happening here is
that the number of mountains

00:25:33.620 --> 00:25:39.455
and the number valleys
must differ by exactly two.

00:25:39.455 --> 00:25:41.920
It doesn't matter who's bigger.

00:25:41.920 --> 00:25:44.440
So the difference could be
plus 2 or minus 2, because you

00:25:44.440 --> 00:25:47.880
can always flip over and negate
that difference, swapping

00:25:47.880 --> 00:25:49.900
mountains for valleys.

00:25:49.900 --> 00:25:51.950
But they always have to
differ by exactly two.

00:25:54.590 --> 00:25:56.510
Why is that?

00:25:56.510 --> 00:26:01.580
Well, this is--
yeah, we're again

00:26:01.580 --> 00:26:03.990
going to think of a
picture like this.

00:26:03.990 --> 00:26:07.140
We have horizontal travel
according to the theta i's.

00:26:07.140 --> 00:26:10.290
We're also going to think
about the vertical picture.

00:26:10.290 --> 00:26:12.900
If this thing is flat
foldable-- so I'm assuming,

00:26:12.900 --> 00:26:16.950
it's flat foldable--
then this must happen.

00:26:16.950 --> 00:26:19.850
This is called Maekawa's
theorem, by the way.

00:26:19.850 --> 00:26:29.740
It was proved by Jun Maekawa
in 1986-- a little earlier.

00:26:29.740 --> 00:26:34.560
Also proved by Jacques
Justin around the same time--

00:26:34.560 --> 00:26:37.480
back before we were good at
internet and communication

00:26:37.480 --> 00:26:39.410
and whatnot.

00:26:39.410 --> 00:26:42.650
And there were little pockets
of mathematical origamists

00:26:42.650 --> 00:26:45.160
and they found each
other basically

00:26:45.160 --> 00:26:51.730
in '89, when there was the-- '89
was the first origami science

00:26:51.730 --> 00:26:53.715
math and education
conference-- started

00:26:53.715 --> 00:26:56.010
bringing these people together.

00:26:56.010 --> 00:26:57.270
The last one was this summer.

00:26:59.700 --> 00:27:00.200
Right.

00:27:00.200 --> 00:27:01.170
So why is this true?

00:27:06.819 --> 00:27:07.360
I don't know.

00:27:07.360 --> 00:27:09.730
A flat folding looks
like something.

00:27:09.730 --> 00:27:11.980
It has no crossings.

00:27:11.980 --> 00:27:16.020
It has-- the horizontal
travel, we understand.

00:27:16.020 --> 00:27:17.810
It ends up back
where it started.

00:27:17.810 --> 00:27:21.600
There's also some notion of
layers and vertical travel,

00:27:21.600 --> 00:27:23.451
which is a little
tricky to think about.

00:27:23.451 --> 00:27:25.450
But the one thing that's
easy to think about-- I

00:27:25.450 --> 00:27:27.240
mean, this forms
essentially a polygon.

00:27:27.240 --> 00:27:29.080
It's like a really
squashed polygon.

00:27:29.080 --> 00:27:32.940
And these vertical segments are
actually really just points.

00:27:32.940 --> 00:27:35.190
OK, imagine.

00:27:35.190 --> 00:27:37.250
That's just where
you turn around.

00:27:37.250 --> 00:27:41.420
So it's like a polygon,
just stretched or squashed

00:27:41.420 --> 00:27:43.040
down onto a line.

00:27:43.040 --> 00:27:46.470
And we know some
things about polygons.

00:27:46.470 --> 00:27:47.990
OK, as an end
vertex polygon-- you

00:27:47.990 --> 00:27:50.070
know that the sum of
the interior angles

00:27:50.070 --> 00:27:51.664
is-- whatever it is.

00:27:51.664 --> 00:27:53.330
I always get confused
with that formula.

00:27:53.330 --> 00:27:54.746
So I don't like
to think about it.

00:27:54.746 --> 00:27:56.770
But one thing we-- an
easier way to think

00:27:56.770 --> 00:27:59.810
about that same statement
is just think about how much

00:27:59.810 --> 00:28:01.550
turning the polygon does.

00:28:01.550 --> 00:28:04.480
So you start here, you
turn right 180 degrees,

00:28:04.480 --> 00:28:08.720
you turn left 180 degrees,
you turn left 180, right 180,

00:28:08.720 --> 00:28:10.630
right 180, right 180.

00:28:10.630 --> 00:28:12.420
How much is it in total?

00:28:12.420 --> 00:28:14.570
Oh gosh, do I have to add?

00:28:14.570 --> 00:28:15.550
No.

00:28:15.550 --> 00:28:16.250
It's so simple.

00:28:16.250 --> 00:28:17.080
It's 360.

00:28:17.080 --> 00:28:17.580
Right?

00:28:17.580 --> 00:28:19.590
Just, if you think about
if you're going around

00:28:19.590 --> 00:28:23.780
in a circle, any polygon-- not
just flat-- but anything in two

00:28:23.780 --> 00:28:27.450
dimensions, the total amount
of turning you do is 360.

00:28:27.450 --> 00:28:30.960
Or if you count backwards,
it's negative 360.

00:28:30.960 --> 00:28:33.320
So this is the key--
something you should all

00:28:33.320 --> 00:28:35.120
know about polygons.

00:28:35.120 --> 00:28:37.740
If you look at sum of the turn
angles-- how much turning you

00:28:37.740 --> 00:28:39.720
do at each vertex--
that will always

00:28:39.720 --> 00:28:42.885
be plus or minus
360 in any polygon.

00:28:47.390 --> 00:28:49.880
This is equivalent to the sum
of the interior angles being,

00:28:49.880 --> 00:28:52.820
whatever, pi times n minus
2, which I don't remember.

00:28:52.820 --> 00:28:56.660
But this is much
easier to remember.

00:28:56.660 --> 00:29:00.980
And it's useful, because we
can map mountains and valleys

00:29:00.980 --> 00:29:02.040
to left and right turns.

00:29:02.040 --> 00:29:04.510
As I said, every time
this is a valley,

00:29:04.510 --> 00:29:08.750
it was a left turn by 180.

00:29:08.750 --> 00:29:11.905
Every time it was a mountain,
it was a right turn by 180.

00:29:11.905 --> 00:29:32.790
So valleys, mountains,
right turns--

00:29:32.790 --> 00:29:34.869
so I'm going to think
of that as negative 180.

00:29:34.869 --> 00:29:37.410
Now, of course technically, it
could be the other way around.

00:29:37.410 --> 00:29:39.368
It could be this is
negative, this is positive.

00:29:39.368 --> 00:29:41.740
But I already have a
plus and minus here.

00:29:41.740 --> 00:29:44.340
So it's symmetric.

00:29:44.340 --> 00:29:46.380
So if we sum up the
turn angles-- which

00:29:46.380 --> 00:29:49.080
we know is supposed to
be plus or minus 360--

00:29:49.080 --> 00:29:57.360
the sum of the turn angles
is going to be-- we're

00:29:57.360 --> 00:30:03.090
going to have 180 for
each valley, so 180

00:30:03.090 --> 00:30:06.050
times the number of valleys.

00:30:06.050 --> 00:30:09.370
And we're going to have
negative 180 for each mountain.

00:30:15.860 --> 00:30:17.920
And so the 180's factor out.

00:30:30.740 --> 00:30:36.080
And this thing is supposed to
equal 360-- plus or minus 360.

00:30:36.080 --> 00:30:36.882
How could that be?

00:30:36.882 --> 00:30:39.090
Well, the number of valleys
minus number of mountains

00:30:39.090 --> 00:30:41.810
should be either 2-- for
plus 360-- or negative 2--

00:30:41.810 --> 00:30:43.895
for minus 360.

00:30:43.895 --> 00:30:45.020
So that proves the theorem.

00:30:49.250 --> 00:30:51.670
And that's why, in a degree
4 vertex, one of them

00:30:51.670 --> 00:30:54.860
has to be 3, the
other one has to be 1.

00:30:54.860 --> 00:30:57.905
There's no other option,
because the total number is 4.

00:30:57.905 --> 00:30:59.530
It's the only way to
get the difference

00:30:59.530 --> 00:31:02.260
to be plus or minus 2.

00:31:02.260 --> 00:31:04.890
So that's kind of nice.

00:31:04.890 --> 00:31:06.447
But it's not enough,
unfortunately.

00:31:06.447 --> 00:31:08.280
If I gave you a mountain
valley pattern that

00:31:08.280 --> 00:31:10.590
satisfies this
condition, it still

00:31:10.590 --> 00:31:14.120
might not be flat foldable.

00:31:14.120 --> 00:31:15.380
That's maybe no surprise.

00:31:15.380 --> 00:31:17.830
It's not like we had
such a simple test

00:31:17.830 --> 00:31:20.670
for the one dimensional
case, which should be easier.

00:31:20.670 --> 00:31:21.940
We had to give an algorithm.

00:31:21.940 --> 00:31:23.920
We said repeatedly
crimp and end fold.

00:31:23.920 --> 00:31:25.910
If you get stuck,
the answer is no.

00:31:25.910 --> 00:31:27.895
If you don't get stuck,
you folded it great.

00:31:43.280 --> 00:31:45.405
I love this eraser--
increases entropy.

00:31:51.110 --> 00:31:55.040
Let me tell you one case
that is easy to think about.

00:31:55.040 --> 00:31:56.340
Because it's nice.

00:31:56.340 --> 00:31:59.140
It reduces directly to
the one dimensional case.

00:31:59.140 --> 00:32:01.060
And that's what I
call the generic case.

00:32:06.380 --> 00:32:09.010
Generic is this very convenient
term we use in mathematics.

00:32:09.010 --> 00:32:12.450
It's actually really
tricky to define.

00:32:12.450 --> 00:32:15.260
So I'd like to not
define it, if I can.

00:32:15.260 --> 00:32:16.490
But maybe I should.

00:32:22.320 --> 00:32:24.410
The simple version, which
is not quite enough,

00:32:24.410 --> 00:32:26.920
is to say that all of the
angles in the crease pattern

00:32:26.920 --> 00:32:28.991
are different.

00:32:28.991 --> 00:32:30.990
OK, here, for example,
two of them are the same.

00:32:30.990 --> 00:32:31.920
There's two 90 degree angles.

00:32:31.920 --> 00:32:32.990
This is not generic.

00:32:32.990 --> 00:32:35.030
It's just easier to draw.

00:32:35.030 --> 00:32:36.770
But in general, I
mean, you imagine,

00:32:36.770 --> 00:32:39.110
you just draw some random thing.

00:32:39.110 --> 00:32:41.080
None of those lengths
are going to be the same.

00:32:41.080 --> 00:32:42.920
Yeah, the alternating
sum is zero.

00:32:42.920 --> 00:32:45.290
But that's it.

00:32:45.290 --> 00:32:46.790
And that's what I--
the generic case

00:32:46.790 --> 00:32:50.870
is that is the only thing that
holds true about these angles.

00:32:50.870 --> 00:32:52.670
You can take the
alternating sum.

00:32:52.670 --> 00:32:53.990
That equals zero.

00:32:53.990 --> 00:32:56.680
If you take some alternating sum
of some subset of the angles,

00:32:56.680 --> 00:32:58.190
that will not equal zero.

00:32:58.190 --> 00:33:00.760
If you take a random example,
this is going to be true.

00:33:00.760 --> 00:33:02.700
OK, just bear with me.

00:33:02.700 --> 00:33:06.760
Suppose never any two
angles are the same.

00:33:06.760 --> 00:33:11.230
Then look at the
globally smallest crease,

00:33:11.230 --> 00:33:13.230
so globally smallest theta.

00:33:18.380 --> 00:33:20.000
Say it's theta i.

00:33:20.000 --> 00:33:27.961
So the picture is theta i,
theta i minus 1, theta i plus 1.

00:33:27.961 --> 00:33:29.460
And what do we know
if it's globally

00:33:29.460 --> 00:33:32.080
smallest and none of
the values are equal?

00:33:32.080 --> 00:33:38.035
Then we know that
these two are bigger.

00:33:38.035 --> 00:33:40.250
No big surprise.

00:33:40.250 --> 00:33:44.780
Think about what happens if
this is small, these are bigger,

00:33:44.780 --> 00:33:48.890
and you try to make these both
valleys or both mountains,

00:33:48.890 --> 00:33:50.200
that's, of course, bad.

00:33:50.200 --> 00:33:54.860
This is one of the
situations we had

00:33:54.860 --> 00:33:56.380
in the one dimensional case.

00:33:56.380 --> 00:33:57.930
I mean, really,
this is a circle,

00:33:57.930 --> 00:34:00.640
but I can think just locally
about what's happening here.

00:34:00.640 --> 00:34:03.990
So in this situation, one
of these must be a mountain

00:34:03.990 --> 00:34:05.890
and the other must be a valley.

00:34:05.890 --> 00:34:08.360
I don't know which
order they are,

00:34:08.360 --> 00:34:10.040
but I know they're different.

00:34:10.040 --> 00:34:15.670
And then I know I can
apply one of these crimps.

00:34:15.670 --> 00:34:19.330
Incidentally, the word crimp,
Jason Koo was asking about,

00:34:19.330 --> 00:34:22.120
like, why do you call
it crimp and not pleat?

00:34:22.120 --> 00:34:23.639
Probably, I should
call it pleat.

00:34:23.639 --> 00:34:25.940
But it's crimp in my mind.

00:34:25.940 --> 00:34:27.980
It's been crimp in
my mind since 1998

00:34:27.980 --> 00:34:29.750
when we wrote the 1D paper.

00:34:29.750 --> 00:34:33.480
It was before I knew the word
pleat, so that's my excuse.

00:34:33.480 --> 00:34:35.710
So pleat or crimp,
take your pick.

00:34:35.710 --> 00:34:37.503
Crimp is usually
many pleats together.

00:34:37.503 --> 00:34:38.169
That's crimping.

00:34:41.190 --> 00:34:41.870
Cool.

00:34:41.870 --> 00:34:44.090
So crimps, we kind of like.

00:34:44.090 --> 00:34:45.354
Why do we like crimps?

00:34:48.820 --> 00:34:51.550
We proved, in the one
dimensional case last time,

00:34:51.550 --> 00:34:54.320
that if you make a crimp
and your original thing

00:34:54.320 --> 00:34:57.690
was flat foldable, the new
thing will be flat foldable.

00:34:57.690 --> 00:34:59.679
Good news is, that
is still true.

00:34:59.679 --> 00:35:01.470
I told you, all these
things were no longer

00:35:01.470 --> 00:35:02.840
true in the circular case.

00:35:02.840 --> 00:35:06.500
It's still true in
the circular case.

00:35:06.500 --> 00:35:07.500
Should I tell you--

00:35:07.500 --> 00:35:10.180
Let me just remind you-- the
same proof works-- remind you

00:35:10.180 --> 00:35:11.620
what the proof looked like.

00:35:11.620 --> 00:35:16.900
We had a crimp, and we're
hoping to fold that first.

00:35:16.900 --> 00:35:19.160
We know at some point,
these creases get folded.

00:35:19.160 --> 00:35:20.990
But there may be
other junk in here,

00:35:20.990 --> 00:35:23.110
or maybe other junk in here.

00:35:23.110 --> 00:35:24.950
We'd like to get
rid of that junk.

00:35:24.950 --> 00:35:27.010
And so what we did
is move this junk up

00:35:27.010 --> 00:35:28.360
to here, which was always safe.

00:35:28.360 --> 00:35:30.400
We moved this junk down to here.

00:35:30.400 --> 00:35:35.598
And that was still a folded
state-- a flat folded state.

00:35:35.598 --> 00:35:38.980
OK, remember all this stuff.

00:35:38.980 --> 00:35:41.190
Therefore, we could have
folded the crimp first.

00:35:41.190 --> 00:35:44.010
And then we have a flat folding
in this situation, where

00:35:44.010 --> 00:35:48.220
this paper is effectively
glued together, which means,

00:35:48.220 --> 00:35:50.480
it was safe to fold this
crimp and glue these

00:35:50.480 --> 00:35:52.829
together and never
touch them again.

00:35:52.829 --> 00:35:54.620
So that is still true
in the circular case.

00:35:54.620 --> 00:35:57.740
That proof didn't really assume
anything about the paper.

00:35:57.740 --> 00:35:59.290
Would even work for
like tree shaped

00:35:59.290 --> 00:36:02.670
paper or something weird.

00:36:02.670 --> 00:36:06.610
So if we can find a crimp, which
we can in the generic case,

00:36:06.610 --> 00:36:08.690
then you just make a crimp,
make a crimp, repeat.

00:36:08.690 --> 00:36:11.050
If you ever get stuck, you know
that the original thing was not

00:36:11.050 --> 00:36:13.675
flat foldable, because the thing
you have is not flat foldable.

00:36:15.810 --> 00:36:16.380
Why?

00:36:16.380 --> 00:36:18.620
If there's no cramp
in the generic case,

00:36:18.620 --> 00:36:21.740
that means you have two valleys
around the smallest angle,

00:36:21.740 --> 00:36:22.950
and that's clearly bad.

00:36:26.020 --> 00:36:28.610
So-- I'm not writing
a lot of details here.

00:36:28.610 --> 00:36:31.040
Is that clear?

00:36:31.040 --> 00:36:32.950
If I have an angle
that's surrounded

00:36:32.950 --> 00:36:34.911
by strictly larger
angles, I know

00:36:34.911 --> 00:36:36.660
there must be one
mountain and one valley.

00:36:36.660 --> 00:36:39.600
Then I can safely make
a crimp and repeat.

00:36:39.600 --> 00:36:43.500
The trouble comes in when
these angles are equal.

00:36:43.500 --> 00:36:45.164
We never had to
think about angles

00:36:45.164 --> 00:36:46.830
being equal in the
one dimensional case.

00:36:46.830 --> 00:36:49.090
It didn't matter much.

00:36:49.090 --> 00:36:52.400
We just said, oh, you know,
it's safe to make a crimp,

00:36:52.400 --> 00:36:55.490
as long as this was greater
than or equal to this

00:36:55.490 --> 00:36:57.740
and this was greater
than or equal to this.

00:36:57.740 --> 00:36:59.992
That is still true; it's
safe to make a crimp.

00:36:59.992 --> 00:37:01.700
But how do we know
that there is a crimp?

00:37:01.700 --> 00:37:05.720
How do we know that there's a
mountain followed by valley?

00:37:05.720 --> 00:37:06.420
We don't.

00:37:06.420 --> 00:37:11.400
I mean, if they're equal,
this would be all right.

00:37:11.400 --> 00:37:14.580
That's two valleys is valid if
these three angles are equal.

00:37:14.580 --> 00:37:17.144
But I claim still somewhere
there's got to be a crimp.

00:37:17.144 --> 00:37:19.560
There's no longer a notion of
the globally smallest angle,

00:37:19.560 --> 00:37:21.380
because some of them are equal.

00:37:21.380 --> 00:37:24.770
We've got to find that
crimp, but it's out there.

00:37:24.770 --> 00:37:27.115
So we just need to
prove that it exists.

00:37:57.960 --> 00:38:02.670
So to do that, we're going
to generalize this theorem--

00:38:02.670 --> 00:38:05.440
Meakawa-Justin-- that number
of mountains minus number

00:38:05.440 --> 00:38:06.730
of valleys is plus or minus 2.

00:38:06.730 --> 00:38:08.930
That's true, and
it's a statement

00:38:08.930 --> 00:38:13.710
about the sum of all the
angles-- all of the creases.

00:38:13.710 --> 00:38:16.455
What I'd like is something
a little bit more localized.

00:38:16.455 --> 00:38:18.080
And in particular,
we're going to think

00:38:18.080 --> 00:38:22.282
about when I have a whole
bunch of angles that are equal,

00:38:22.282 --> 00:38:24.490
how many mountains and
valleys can there be in there.

00:38:27.480 --> 00:38:30.440
So it's what I
call local counts.

00:38:35.170 --> 00:38:37.770
So while everything I said
so far is pretty classic,

00:38:37.770 --> 00:38:41.560
this result was proved
in 2001 by Tom Hall,

00:38:41.560 --> 00:38:45.910
so much more recent,
over a decade later.

00:38:48.580 --> 00:38:52.140
So let's think about
k equal angles.

00:38:58.640 --> 00:39:01.400
And I want that to be a maximal
sequence of equal angles,

00:39:01.400 --> 00:39:05.560
so the ones right after and
right before are different.

00:39:05.560 --> 00:39:07.550
And furthermore,
I'm going to assume

00:39:07.550 --> 00:39:20.520
that they're bigger--
strictly larger angles.

00:39:23.320 --> 00:39:28.710
OK, so something like that.

00:39:28.710 --> 00:39:31.230
A bunch of equal
angles-- k of them--

00:39:31.230 --> 00:39:33.960
bigger angles on either side.

00:39:33.960 --> 00:39:36.660
This almost always exists.

00:39:36.660 --> 00:39:38.890
I should mention-- so I'm
going to say something

00:39:38.890 --> 00:39:39.930
about this situation.

00:39:39.930 --> 00:39:42.820
But this situation should exist,
because I take the smallest

00:39:42.820 --> 00:39:45.630
angle out there and then
I see how many friends

00:39:45.630 --> 00:39:47.270
it has that are all equal.

00:39:47.270 --> 00:39:50.070
If it's the smallest angle--
or it's one of the smallest

00:39:50.070 --> 00:39:52.900
angles-- then the
ones surrounding

00:39:52.900 --> 00:39:57.790
it are going to be bigger--
unless all the angles are

00:39:57.790 --> 00:39:58.466
equal.

00:39:58.466 --> 00:40:00.590
So there's one case, which
we'll worry about later.

00:40:00.590 --> 00:40:01.690
It's very easy.

00:40:01.690 --> 00:40:04.197
All the angles are equal.

00:40:04.197 --> 00:40:06.280
In fact, I could tell you
how to worry about that.

00:40:06.280 --> 00:40:11.279
If all the angles are
equal, then everything

00:40:11.279 --> 00:40:13.820
is crimpable as long as we can
find a switch between mountain

00:40:13.820 --> 00:40:16.142
and valley-- somewhere.

00:40:16.142 --> 00:40:18.100
And because the number
of mountains and valleys

00:40:18.100 --> 00:40:21.660
is plus or minus 2, there's
got to be-- so they're almost

00:40:21.660 --> 00:40:25.960
in equal balance-- there's
got to be a valley.

00:40:25.960 --> 00:40:27.984
It can't be all valleys,
can't be all mountains.

00:40:27.984 --> 00:40:29.400
So somewhere,
there's a transition

00:40:29.400 --> 00:40:31.180
between mountain and valley.

00:40:31.180 --> 00:40:34.490
So you get a crimp out of that.

00:40:34.490 --> 00:40:37.110
But otherwise, if they're
not all equal-- let's

00:40:37.110 --> 00:40:43.230
think about k equal angles
surrounded by two larger guys.

00:40:43.230 --> 00:40:45.321
Forgot how technical this is.

00:40:45.321 --> 00:40:45.820
All right.

00:40:45.820 --> 00:40:52.770
Then I want to look at
the number of mountains

00:40:52.770 --> 00:40:58.020
and the number valleys among
these k plus one creases,

00:40:58.020 --> 00:40:59.440
so within that range.

00:41:04.130 --> 00:41:07.460
It's going to be 0, if k is odd.

00:41:10.160 --> 00:41:13.210
And it's going to be plus
or minus 1, if k is even.

00:41:17.140 --> 00:41:18.730
It's not plus or minus 2.

00:41:18.730 --> 00:41:22.130
Intuitively, plus or minus 2 is
when you go all the way around.

00:41:22.130 --> 00:41:24.580
Here, we're just
looking at a segment--

00:41:24.580 --> 00:41:27.260
a portion of the entire circle.

00:41:27.260 --> 00:41:30.730
Remember, this is actually
a circle somewhere.

00:41:30.730 --> 00:41:35.190
And this corresponds
to, in the odd case,

00:41:35.190 --> 00:41:38.280
you're going to be going in
the same direction afterwards.

00:41:38.280 --> 00:41:39.900
In the even case,
you're going to have

00:41:39.900 --> 00:41:41.870
turned around but
not a full circle.

00:41:41.870 --> 00:41:43.890
So it's going to
be plus or minus 1.

00:41:43.890 --> 00:41:46.740
There's a lot of
ways to prove this.

00:41:46.740 --> 00:41:50.770
One way is to think
about convex cones.

00:41:50.770 --> 00:42:00.570
So if k is even, and you
fold this thing-- let's see,

00:42:00.570 --> 00:42:06.409
one, two, three, four,
five, six-- equal angles.

00:42:06.409 --> 00:42:07.950
And then there's
the two longer guys.

00:42:07.950 --> 00:42:09.960
They may not be the
same length, but that's

00:42:09.960 --> 00:42:13.660
what you get in the even case.

00:42:13.660 --> 00:42:18.114
So what I'd like to do is
just, in order to just reduce

00:42:18.114 --> 00:42:20.280
to things that we've already
thought about-- I mean,

00:42:20.280 --> 00:42:22.020
you could talk about
turn angles again,

00:42:22.020 --> 00:42:25.040
or you could just say, hey,
I know Maekawa's theorem.

00:42:25.040 --> 00:42:28.100
So as long as I could make
this into a circle, which

00:42:28.100 --> 00:42:31.940
I can do by adding
that stuff, now I

00:42:31.940 --> 00:42:34.620
have a nice circular--
it's a flat folded state.

00:42:34.620 --> 00:42:37.980
There's no crossings
here, presumably

00:42:37.980 --> 00:42:39.210
because this did something.

00:42:39.210 --> 00:42:41.001
I don't actually know
that it's zigzagging.

00:42:41.001 --> 00:42:42.140
It might do other stuff.

00:42:42.140 --> 00:42:45.195
But it's not going to
cross what I just added.

00:42:45.195 --> 00:42:47.320
So the number of mountains
minus number of valleys,

00:42:47.320 --> 00:42:51.280
in total here, must
be plus or minus 2.

00:42:51.280 --> 00:42:55.160
I only added one
crease-- this one.

00:42:55.160 --> 00:42:57.730
So that's going to make
it either plus or minus 1

00:42:57.730 --> 00:42:59.302
or plus or minus 3.

00:42:59.302 --> 00:43:00.760
If you think about
it a little bit,

00:43:00.760 --> 00:43:02.250
it has to be plus or minus 1.

00:43:02.250 --> 00:43:04.124
And hopefully, that's
what I wrote here, yes.

00:43:06.760 --> 00:43:10.550
Because I mean, really, we're
thinking about turn angles

00:43:10.550 --> 00:43:11.580
again, I'm afraid.

00:43:11.580 --> 00:43:13.330
Can't totally reduce it.

00:43:13.330 --> 00:43:15.766
We just turned around here.

00:43:15.766 --> 00:43:17.640
And we were about to
finish the circle, which

00:43:17.640 --> 00:43:18.960
would make it plus or minus 2.

00:43:18.960 --> 00:43:23.510
Before we finish the circle,
it's plus or minus 1.

00:43:23.510 --> 00:43:24.160
k is odd.

00:43:28.600 --> 00:43:31.080
Again, this might go
like that, whatever.

00:43:31.080 --> 00:43:33.220
But, because it's an
odd number, these guys

00:43:33.220 --> 00:43:36.030
are going in the same direction.

00:43:36.030 --> 00:43:39.120
And so the total turn
angle here must be 0.

00:43:39.120 --> 00:43:44.240
And one way to see that is to
extend it into a full polygon.

00:43:44.240 --> 00:43:48.250
You know that it's plus or
minus 2 for this whole thing.

00:43:48.250 --> 00:43:52.100
And I added two guys
in the same direction.

00:43:52.100 --> 00:43:54.820
If I remove them, it's going
to go down to plus or minus 0.

00:43:59.929 --> 00:44:00.970
That was a bit hand wavy.

00:44:00.970 --> 00:44:02.145
But do you buy that?

00:44:05.823 --> 00:44:08.697
AUDIENCE: [INAUDIBLE]
plus or minus 0?

00:44:08.697 --> 00:44:11.492
PROFESSOR: Plus or
minus 0 is 0, yeah.

00:44:11.492 --> 00:44:13.200
You went from 2 down
to zero, because you

00:44:13.200 --> 00:44:14.620
remove two identical guys.

00:44:18.730 --> 00:44:22.790
So let me tie this all
together, because there's

00:44:22.790 --> 00:44:24.255
so many little cases.

00:44:34.630 --> 00:44:37.780
So I want to know what
mountain valley patterns are

00:44:37.780 --> 00:44:49.005
flat foldable, single
vertex, m/v patterns.

00:44:56.630 --> 00:45:04.710
I claim there is a crimp.

00:45:04.710 --> 00:45:06.890
If it's flat foldable,
there has to be a crimp

00:45:06.890 --> 00:45:08.400
that you can find to do.

00:45:08.400 --> 00:45:14.330
Remember, a crimp
was where this length

00:45:14.330 --> 00:45:18.240
was less than or equal to
this length and less than

00:45:18.240 --> 00:45:20.250
or equal to this length.

00:45:20.250 --> 00:45:21.370
And one of these was m.

00:45:21.370 --> 00:45:23.800
One of them was v. That was
the definition of a crimp.

00:45:23.800 --> 00:45:26.090
I claim such a
thing always exists.

00:45:26.090 --> 00:45:30.230
The proof is two parts.

00:45:30.230 --> 00:45:39.310
If all the angles are equal,
we know that these conditions

00:45:39.310 --> 00:45:43.080
are always satisfied,
because everything is equal.

00:45:43.080 --> 00:45:45.180
So we just need to
find an m followed by v

00:45:45.180 --> 00:45:47.010
or a v followed by an m.

00:45:47.010 --> 00:45:52.731
And by Maekawa's theorem, we
know it's not all m's or all

00:45:52.731 --> 00:45:53.230
v's.

00:45:53.230 --> 00:45:56.441
So somewhere, there has to be
a transition from m to v's.

00:46:04.150 --> 00:46:09.580
So just use that lemma
theorem or the count property.

00:46:09.580 --> 00:46:12.890
Otherwise, if they're
not all equal,

00:46:12.890 --> 00:46:16.250
then I can apply this
local counts result,

00:46:16.250 --> 00:46:20.060
take the smallest angle-- take
one instance of the smallest

00:46:20.060 --> 00:46:20.560
angle.

00:46:20.560 --> 00:46:21.770
There could be many of them.

00:46:21.770 --> 00:46:25.540
Find all of its neighboring
friends that are equal.

00:46:25.540 --> 00:46:27.620
Then I know that the next
angles before and after

00:46:27.620 --> 00:46:29.770
have to be strictly bigger.

00:46:29.770 --> 00:46:33.770
Then I know that the number of
mountains and valleys in here--

00:46:33.770 --> 00:46:35.330
if I look at the
difference and it's

00:46:35.330 --> 00:46:37.762
0, that means the
number of mountains

00:46:37.762 --> 00:46:38.970
equals the number of valleys.

00:46:38.970 --> 00:46:40.669
Therefore, there's
at least one of each.

00:46:40.669 --> 00:46:42.710
And therefore, there's a
transition from mountain

00:46:42.710 --> 00:46:44.250
to valley in there.

00:46:44.250 --> 00:46:46.390
Because the transition
from mountain to valley--

00:46:46.390 --> 00:46:49.020
like right here,
that's a valid crimp.

00:46:49.020 --> 00:46:52.160
This guy's bigger;
this guy's equal.

00:46:52.160 --> 00:46:54.030
This would also be
a fine transition,

00:46:54.030 --> 00:46:55.114
because everybody's equal.

00:46:55.114 --> 00:46:56.654
This would also be
a fine transition.

00:46:56.654 --> 00:46:58.890
Any transition from
mountain to valley in here,

00:46:58.890 --> 00:47:00.660
I've got a crimp.

00:47:00.660 --> 00:47:04.480
The even case is a little-- I
got to think a little bit more.

00:47:04.480 --> 00:47:07.610
k is even.

00:47:07.610 --> 00:47:12.140
k plus 1, which is the number
of creases here, is odd.

00:47:12.140 --> 00:47:14.310
And the difference between
mountains and valleys

00:47:14.310 --> 00:47:16.907
among those k plus one
creases is plus or minus 1.

00:47:16.907 --> 00:47:17.990
Think about it for second.

00:47:17.990 --> 00:47:20.531
That means there's, again, at
least one mountain and at least

00:47:20.531 --> 00:47:22.940
one valley.

00:47:22.940 --> 00:47:26.090
Because k, to be even,
has to be at least 2.

00:47:26.090 --> 00:47:27.907
We've got to have at
least three things.

00:47:27.907 --> 00:47:29.990
So there's going to be at
least one of one and two

00:47:29.990 --> 00:47:31.486
of the other, in fact.

00:47:31.486 --> 00:47:34.110
And I just need one mountain and
one valley somewhere in there.

00:47:34.110 --> 00:47:35.890
And then I know there has to
be a transition from mountain

00:47:35.890 --> 00:47:36.470
to valley.

00:47:39.190 --> 00:47:42.140
Otherwise, use local counts.

00:47:45.890 --> 00:47:56.200
And in either case, we
get either a mountain

00:47:56.200 --> 00:48:03.460
to valley transition or a
valley to mountain transition.

00:48:03.460 --> 00:48:07.360
And I get it in such a way
that these inequalities

00:48:07.360 --> 00:48:08.939
on the lengths hold.

00:48:08.939 --> 00:48:10.480
So in other words,
that it's a crimp.

00:48:15.590 --> 00:48:18.520
Therefore, any flat foldable,
single vertex, mountain valley

00:48:18.520 --> 00:48:20.320
pattern has a crimp.

00:48:20.320 --> 00:48:21.590
Make it.

00:48:21.590 --> 00:48:25.300
And as I was arguing
here, just like last time,

00:48:25.300 --> 00:48:27.750
that crimp will still--
after you do the crimp,

00:48:27.750 --> 00:48:30.120
you'll still be flat
foldable, so repeat.

00:48:30.120 --> 00:48:34.100
Cook until done is
how I like to put it.

00:48:34.100 --> 00:48:34.600
Question.

00:48:34.600 --> 00:48:37.183
AUDIENCE: What about the trivial
case of just folding a circle

00:48:37.183 --> 00:48:37.827
in half?

00:48:37.827 --> 00:48:39.930
PROFESSOR: The trivial case
of folding a circle in half.

00:48:39.930 --> 00:48:40.430
All right.

00:48:40.430 --> 00:48:41.450
That's a good question.

00:48:41.450 --> 00:48:42.616
It's kind of a technicality.

00:48:45.650 --> 00:48:48.309
One version would be to
say, that's zero vertices.

00:48:48.309 --> 00:48:49.100
That doesn't count.

00:48:49.100 --> 00:48:50.760
And we're thinking
about one vertex.

00:48:50.760 --> 00:48:52.134
And as soon as
you think about it

00:48:52.134 --> 00:48:54.730
as one vertex, which is
fine, then you actually

00:48:54.730 --> 00:48:58.510
have two creases there.

00:48:58.510 --> 00:48:59.570
So it's two creases.

00:48:59.570 --> 00:49:02.052
And hopefully, this works.

00:49:02.052 --> 00:49:03.260
Oh, I see what you're saying.

00:49:03.260 --> 00:49:04.890
It's not a crimp.

00:49:04.890 --> 00:49:05.740
That's a good point.

00:49:05.740 --> 00:49:08.434
AUDIENCE: But then
it's flat foldable.

00:49:08.434 --> 00:49:10.850
PROFESSOR: It is flat foldable,
and yet, there's no crimp.

00:49:10.850 --> 00:49:13.061
Damn it.

00:49:13.061 --> 00:49:13.560
All right.

00:49:13.560 --> 00:49:14.060
Sorry?

00:49:14.060 --> 00:49:17.080
AUDIENCE: But it follows
Maekawa's, right?

00:49:17.080 --> 00:49:18.260
PROFESSOR: Yeah.

00:49:18.260 --> 00:49:21.262
So I made a slight mistake here.

00:49:21.262 --> 00:49:22.720
I said if all the
angles are equal,

00:49:22.720 --> 00:49:24.760
then Maekawa says there's
at least one of each.

00:49:24.760 --> 00:49:27.230
That's not true when n equals 2.

00:49:27.230 --> 00:49:30.450
Then there's two of one
and zero of the other.

00:49:30.450 --> 00:49:36.060
As long as you have more than
two creases, then this is true.

00:49:36.060 --> 00:49:36.865
That's enough.

00:49:36.865 --> 00:49:38.740
So you have to handle
this as a special case.

00:49:38.740 --> 00:49:40.365
AUDIENCE: At the end
of your algorithm,

00:49:40.365 --> 00:49:43.396
you're always left
with two of the same--

00:49:43.396 --> 00:49:45.232
PROFESSOR: That's true.

00:49:45.232 --> 00:49:47.390
This is an important
special case to remember,

00:49:47.390 --> 00:49:50.210
because this will be
the final picture.

00:49:50.210 --> 00:49:54.882
After you do a sequence of
crimps, this is the good case.

00:49:54.882 --> 00:49:56.340
If your thing is
flat foldable, you

00:49:56.340 --> 00:49:57.435
will always end up with that.

00:49:57.435 --> 00:49:59.200
AUDIENCE: That's a
case where everything

00:49:59.200 --> 00:50:02.905
is the same, smallest.

00:50:02.905 --> 00:50:06.530
PROFESSOR: It's another example
where all the angles are equal.

00:50:06.530 --> 00:50:09.130
So that's why this
is the situation.

00:50:09.130 --> 00:50:14.070
It's either Maekawa and
you get a cramp here,

00:50:14.070 --> 00:50:16.500
because n is greater than 2.

00:50:16.500 --> 00:50:20.590
And here, I should say,
if n is greater than 2,

00:50:20.590 --> 00:50:21.740
then this is true.

00:50:21.740 --> 00:50:24.484
Of course the n equals 2
case, it looks like that.

00:50:24.484 --> 00:50:26.650
And it had better be both
valleys or both mountains.

00:50:26.650 --> 00:50:28.120
Otherwise, it's not going
to be flat foldable.

00:50:28.120 --> 00:50:28.970
I forgot about that.

00:50:28.970 --> 00:50:30.200
I should add it in the notes.

00:50:30.200 --> 00:50:31.315
But it's in the textbook, right.

00:50:31.315 --> 00:50:32.964
AUDIENCE: At the end
of the algorithm,

00:50:32.964 --> 00:50:34.255
it's not going to be a circle.

00:50:34.255 --> 00:50:35.254
It's going to be a cone.

00:50:35.254 --> 00:50:36.300
PROFESSOR: That's true.

00:50:36.300 --> 00:50:38.650
It won't actually
look like this.

00:50:38.650 --> 00:50:41.330
At the end of the algorithm,
it's going to be a cone.

00:50:41.330 --> 00:50:45.590
The two angles will be equal,
because of Kawasaki's theorem.

00:50:45.590 --> 00:50:48.700
And they should still be both
mountains or both valleys.

00:50:48.700 --> 00:50:51.170
But it's going to be--
we can see it right here.

00:50:51.170 --> 00:50:54.522
So I apply my crimp,
and now I have a cone,

00:50:54.522 --> 00:50:55.480
and there's two angles.

00:50:55.480 --> 00:50:58.850
There's one here, which
has been fused together.

00:50:58.850 --> 00:51:01.670
And there's one here,
which is the original.

00:51:01.670 --> 00:51:02.950
They're equal.

00:51:02.950 --> 00:51:05.530
And it's two mountains
or two valleys,

00:51:05.530 --> 00:51:07.290
if I turned it upside down.

00:51:07.290 --> 00:51:08.880
And then it finishes.

00:51:08.880 --> 00:51:11.550
So that's the algorithm
in action-- two steps.

00:51:11.550 --> 00:51:13.146
First you find this crimp here.

00:51:13.146 --> 00:51:15.020
This is actually the
globally smallest angle.

00:51:15.020 --> 00:51:16.395
It's surrounded
by bigger angles.

00:51:16.395 --> 00:51:17.680
So it's really easy.

00:51:17.680 --> 00:51:21.360
Then I have a cone with
two equal angles, which

00:51:21.360 --> 00:51:23.130
is what has to
happen at the end.

00:51:23.130 --> 00:51:27.241
And then I'm done.

00:51:27.241 --> 00:51:27.740
Good?

00:51:27.740 --> 00:51:31.170
AUDIENCE: Is that the
only way to do it?

00:51:31.170 --> 00:51:34.430
PROFESSOR: This is
what always happens.

00:51:34.430 --> 00:51:37.830
Oh, is this the only way
to flat fold these things?

00:51:37.830 --> 00:51:38.550
No.

00:51:38.550 --> 00:51:42.290
There are other--
yes, one of the two.

00:51:53.060 --> 00:51:56.620
I think it depends
what you're counting.

00:51:56.620 --> 00:51:59.430
If you're counting mountain
valley assignments-- I mean,

00:51:59.430 --> 00:52:02.100
if you just want to know,
can every mountain valley

00:52:02.100 --> 00:52:03.812
assignment be
folded by crimping.

00:52:03.812 --> 00:52:04.770
Then the answer is yes.

00:52:04.770 --> 00:52:05.890
That's what we proved.

00:52:05.890 --> 00:52:08.694
But if you want to get
every possible folded state,

00:52:08.694 --> 00:52:10.110
crimps are not
going to be enough.

00:52:10.110 --> 00:52:13.130
The reason they're not enough is
because we're using this thing.

00:52:13.130 --> 00:52:15.570
So, hey, here's some
hypothetical folded state.

00:52:15.570 --> 00:52:17.890
We can rip it out and make
the crimp has been done.

00:52:17.890 --> 00:52:19.700
But then there's a
folded state you're not

00:52:19.700 --> 00:52:21.970
able to reach by crimping.

00:52:21.970 --> 00:52:24.927
We need to work that into an
actual example, where crimping

00:52:24.927 --> 00:52:26.760
forbids you from reaching
some folded state.

00:52:26.760 --> 00:52:28.868
But I'm pretty sure one
exists because of this.

00:52:28.868 --> 00:52:30.618
AUDIENCE: Could that
be more like spirals?

00:52:30.618 --> 00:52:32.890
PROFESSOR: Yeah, maybe some
kind of spiraling thing.

00:52:32.890 --> 00:52:35.102
AUDIENCE: Well, layering
takes into account--

00:52:35.102 --> 00:52:35.810
PROFESSOR: Right.

00:52:35.810 --> 00:52:38.490
What we're missing here is
getting all the possible layer

00:52:38.490 --> 00:52:40.020
stacking orders.

00:52:40.020 --> 00:52:43.290
So we're just trying to match
a mountain valley assignment.

00:52:43.290 --> 00:52:45.360
We're not going to match
a target layer ordering,

00:52:45.360 --> 00:52:48.360
because we simplified
the layer orders in order

00:52:48.360 --> 00:52:50.790
to make crimps possible.

00:52:50.790 --> 00:52:55.980
So crimps won't get you
some of the folded states.

00:52:55.980 --> 00:53:04.730
But one thing you can
play with over here--

00:53:04.730 --> 00:53:08.400
that has been played
with by Tom Hall--

00:53:08.400 --> 00:53:15.440
is if I give you
a crease pattern,

00:53:15.440 --> 00:53:18.840
how many flat foldable
mountain valley

00:53:18.840 --> 00:53:20.439
assignments does it have?

00:53:20.439 --> 00:53:22.730
OK, we have this nice linear
time algorithm to tell you

00:53:22.730 --> 00:53:24.450
whether a particular
one is doable.

00:53:24.450 --> 00:53:26.250
How many are there?

00:53:26.250 --> 00:53:30.460
And there is-- if
you work through all

00:53:30.460 --> 00:53:33.140
of the things I've shown you
in a little bit more detail,

00:53:33.140 --> 00:53:36.055
you can recover-- this
was finding a crimp.

00:53:36.055 --> 00:53:37.430
But you can actually
look at what

00:53:37.430 --> 00:53:39.580
are all the crimps
that are possible

00:53:39.580 --> 00:53:43.340
and actually count how
many different ways

00:53:43.340 --> 00:53:44.420
there are to fold.

00:53:44.420 --> 00:53:45.546
How many crimps you can do.

00:53:45.546 --> 00:53:47.545
And then given those
crimps, how many crimps you

00:53:47.545 --> 00:53:48.340
can go after that.

00:53:48.340 --> 00:53:51.050
And in the same linear
time kind of algorithm,

00:53:51.050 --> 00:53:53.470
you can figure out how many
different mountain valley

00:53:53.470 --> 00:53:55.410
patterns are flat foldable.

00:53:55.410 --> 00:53:57.120
That takes a little
bit more care.

00:53:57.120 --> 00:53:58.835
I will tell you the extremes.

00:54:02.860 --> 00:54:08.300
How small could the number of
flat foldable mountain valley

00:54:08.300 --> 00:54:12.560
assignments be for a
given crease pattern?

00:54:12.560 --> 00:54:14.226
Well, do you have
any guesses when?

00:54:14.226 --> 00:54:17.005
When do I have the least
choice of where to make crimps?

00:54:24.140 --> 00:54:24.680
Yeah.

00:54:24.680 --> 00:54:26.664
AUDIENCE: We have three angles.

00:54:26.664 --> 00:54:28.590
PROFESSOR: For general n.

00:54:28.590 --> 00:54:29.680
Sorry.

00:54:29.680 --> 00:54:32.135
But, yeah, three angles
or, I guess, two angles.

00:54:32.135 --> 00:54:34.980
We really can't do any--
I don't have any choice.

00:54:34.980 --> 00:54:38.350
But for general n,
how should I disperse

00:54:38.350 --> 00:54:40.630
the theta i's in
order to make there

00:54:40.630 --> 00:54:42.870
be very few possible crimps?

00:54:42.870 --> 00:54:44.790
AUDIENCE: When there are
only two transitions.

00:54:44.790 --> 00:54:46.706
PROFESSOR: When there
are only two transitions

00:54:46.706 --> 00:54:48.090
between mountains and valleys.

00:54:48.090 --> 00:54:49.381
All the mountains are together.

00:54:49.381 --> 00:54:51.127
All the valleys are together.

00:54:51.127 --> 00:54:53.460
That's right, if I was asking
a question about mountains

00:54:53.460 --> 00:54:53.990
and valleys.

00:54:53.990 --> 00:54:56.140
But I was asking a
question about theta i's.

00:54:56.140 --> 00:54:59.510
So I want to count how many
mountain valley patterns there

00:54:59.510 --> 00:55:02.990
are-- mountain valley
assignments that

00:55:02.990 --> 00:55:10.453
are flat foldable for
a given crease pattern.

00:55:10.453 --> 00:55:12.417
AUDIENCE: So if you
have a bunch of angles,

00:55:12.417 --> 00:55:14.872
consecutive theta
i's are increasing?

00:55:14.872 --> 00:55:17.300
PROFESSOR: All the angles
are consecutive increasing.

00:55:17.300 --> 00:55:18.770
Yeah, that pretty much works.

00:55:18.770 --> 00:55:21.410
In fact, what I need
is the generic case,

00:55:21.410 --> 00:55:24.950
where all angles are
different and they never

00:55:24.950 --> 00:55:28.840
become equal by folding,
which is what generic means.

00:55:28.840 --> 00:55:31.130
So then there was only
really one crimp I could do,

00:55:31.130 --> 00:55:34.970
which is the globally
smallest angle.

00:55:34.970 --> 00:55:36.590
So actually, I still
have two choices.

00:55:36.590 --> 00:55:39.510
I could do mountain then
valley or valley then mountain.

00:55:39.510 --> 00:55:42.100
But I only have two
choices for that crimp.

00:55:42.100 --> 00:55:44.100
Then I will have two
choices for the next crimp,

00:55:44.100 --> 00:55:45.560
two choices for the next crimp.

00:55:45.560 --> 00:55:51.920
In general, I get 2 to the
n possible mountain valley

00:55:51.920 --> 00:55:53.910
assignments for
the generic case.

00:55:59.500 --> 00:56:02.570
OK, what about,
what's the opposite,

00:56:02.570 --> 00:56:04.470
where I get as much
choice as possible?

00:56:04.470 --> 00:56:09.070
AUDIENCE: Isn't 2 to the n every
mountain valley assignment?

00:56:09.070 --> 00:56:14.401
PROFESSOR: Yes, 2 to the
n-- no-- 2 to the n over 2.

00:56:14.401 --> 00:56:14.900
Thank you.

00:56:14.900 --> 00:56:15.399
Right.

00:56:15.399 --> 00:56:17.960
There are 2 to the n conceivable
mountain valley assignments.

00:56:17.960 --> 00:56:19.440
It can't be that big.

00:56:19.440 --> 00:56:21.660
Every time I do a crimp, I
eat two creases, not one.

00:56:21.660 --> 00:56:23.450
That's what I forgot.

00:56:23.450 --> 00:56:25.090
Good.

00:56:25.090 --> 00:56:26.560
It's still pretty big though.

00:56:26.560 --> 00:56:29.040
It's like square root of
all the possible things you

00:56:29.040 --> 00:56:32.220
could imagine are
indeed feasible.

00:56:32.220 --> 00:56:34.580
What, from 2 to the n
to 2 to the n over 2.

00:56:34.580 --> 00:56:37.578
When would I get the
most choice in crimping?

00:56:37.578 --> 00:56:38.977
AUDIENCE: All angles are equal.

00:56:38.977 --> 00:56:40.310
PROFESSOR: All angles are equal.

00:56:40.310 --> 00:56:42.070
That's the opposite extreme.

00:56:42.070 --> 00:56:44.270
And in this case--
a little messier.

00:57:05.300 --> 00:57:08.140
When all the angles are
equal, the only property

00:57:08.140 --> 00:57:10.300
you need-- and you can
see that from the proof--

00:57:10.300 --> 00:57:11.780
the only property you
need is that the number

00:57:11.780 --> 00:57:13.196
mountains minus
the number valleys

00:57:13.196 --> 00:57:17.430
is plus or minus
2, and n is even.

00:57:17.430 --> 00:57:21.280
As long as you have
that, we showed here,

00:57:21.280 --> 00:57:22.822
you're going to
have-- on alternation

00:57:22.822 --> 00:57:25.155
from mountain valley-- that's
a valid crimp, because all

00:57:25.155 --> 00:57:26.050
the angles are equal.

00:57:26.050 --> 00:57:27.340
And you keep going.

00:57:27.340 --> 00:57:31.890
So it's just, how do you
disperse that many-- how

00:57:31.890 --> 00:57:36.960
do I disperse n over
2 minus 1 mountains

00:57:36.960 --> 00:57:39.440
among n different positions.

00:57:39.440 --> 00:57:40.740
That's what this represents.

00:57:40.740 --> 00:57:43.420
And positions, how do I pick
n over 2 minus 1 of them

00:57:43.420 --> 00:57:44.540
to be mountains.

00:57:44.540 --> 00:57:47.890
Or it could be n over 2
minus 1 of them are valleys.

00:57:47.890 --> 00:57:49.430
And that's this factor of 2.

00:57:49.430 --> 00:57:51.430
So it could have more
mountains or more valleys.

00:57:51.430 --> 00:57:54.020
And then you somehow
place those among those.

00:57:54.020 --> 00:57:56.430
And if you don't
know this notation,

00:57:56.430 --> 00:57:58.320
that's just what it means.

00:57:58.320 --> 00:58:02.170
If you want to know
using other notation,

00:58:02.170 --> 00:58:06.460
it's like this, n over
2 minus 1 factorial,

00:58:06.460 --> 00:58:08.750
over 2 plus 1 factorial.

00:58:08.750 --> 00:58:14.160
If you don't know factorials,
I'll tell you about them later.

00:58:14.160 --> 00:58:15.910
Cool.

00:58:15.910 --> 00:58:18.480
So that's kind of the end of
the single vertex situation.

00:58:22.020 --> 00:58:24.757
Yeah, I think I'll mention one
interesting open question here,

00:58:24.757 --> 00:58:26.840
which I would love to
explore maybe in our problem

00:58:26.840 --> 00:58:31.980
session-- which looks like it'll
be Mondays at 5:00, I think.

00:58:34.898 --> 00:58:37.440
This is one vertex, and we
went through all this work

00:58:37.440 --> 00:58:39.000
to solve a single
vertex situation.

00:58:39.000 --> 00:58:41.430
And it's interesting,
as we'll see,

00:58:41.430 --> 00:58:45.460
to think about locally
how each vertex behaves.

00:58:45.460 --> 00:58:47.820
But you would think, if
you have a crease pattern

00:58:47.820 --> 00:58:51.280
with two vertices, it
shouldn't be that much harder.

00:58:51.280 --> 00:58:52.780
So here we have linear time.

00:58:52.780 --> 00:58:55.370
How quickly can you tell
whether a two vertex crease

00:58:55.370 --> 00:58:56.920
pattern is flat foldable?

00:58:56.920 --> 00:58:59.760
As far as I know, no one
has looked at that problem.

00:58:59.760 --> 00:59:02.390
Surely, we can do
it in quadratic time

00:59:02.390 --> 00:59:04.560
but maybe even
linear time, I think.

00:59:04.560 --> 00:59:08.300
It can't be that hard, I think.

00:59:08.300 --> 00:59:11.030
In general, if I have a
small number of vertices--

00:59:11.030 --> 00:59:16.420
say k vertices-- much
smaller than n creases,

00:59:16.420 --> 00:59:18.800
is there-- for the
algorithms people-- is there

00:59:18.800 --> 00:59:21.360
fixed parameter
tractable algorithm in k?

00:59:21.360 --> 00:59:23.850
Or can I get something--
even getting something like n

00:59:23.850 --> 00:59:27.590
to some function of
k, would be progress.

00:59:27.590 --> 00:59:29.190
I think this should be doable.

00:59:29.190 --> 00:59:31.200
But ideally, we
get a running time

00:59:31.200 --> 00:59:35.800
that's exponential
in k and linear in n.

00:59:35.800 --> 00:59:38.220
That would be my hope.

00:59:38.220 --> 00:59:39.960
Why do I say it has
to be exponential?

00:59:39.960 --> 00:59:41.460
Because in general,
if I give you

00:59:41.460 --> 00:59:43.960
a crease pattern with n
vertices-- lots of vertices--

00:59:43.960 --> 00:59:45.780
this problem is
NP-complete, which

00:59:45.780 --> 00:59:48.410
is-- there's not going
to be a polynomial time

00:59:48.410 --> 00:59:49.460
algorithm for it.

00:59:49.460 --> 00:59:50.910
Nothing good.

00:59:50.910 --> 00:59:53.610
We will prove that
next Wednesday.

00:59:53.610 --> 00:59:56.640
So I'll hold off on
that a little bit.

00:59:56.640 --> 00:59:58.930
But for two vertices,
how hard could it be?

01:00:01.540 --> 01:00:02.110
All right.

01:00:23.860 --> 01:00:25.610
I want to talk about
one related topic.

01:00:25.610 --> 01:00:28.060
And then we will go
to origami design

01:00:28.060 --> 01:00:30.960
and do a little bit
on the tree method.

01:00:30.960 --> 01:00:33.640
But before we get
there, I want to talk

01:00:33.640 --> 01:00:41.800
about local foldability,
which is a cool topic.

01:00:41.800 --> 01:00:43.520
People tend to forget about it.

01:00:43.520 --> 01:00:44.230
I really like it.

01:00:44.230 --> 01:00:46.594
I think it would make
a cool project also.

01:00:46.594 --> 01:00:47.510
It's a nice algorithm.

01:00:47.510 --> 01:00:50.750
It goes back to Bern
and Hayes, 1996.

01:00:50.750 --> 01:00:52.680
So it's also right
at the beginning

01:00:52.680 --> 01:00:55.860
of origami mathematics.

01:00:55.860 --> 01:00:57.850
And it's this idea,
all right, I give you

01:00:57.850 --> 01:01:01.410
a crease pattern now
arbitrarily many vertices.

01:01:01.410 --> 01:01:03.910
And if I ask you,
does it fold flat?

01:01:03.910 --> 01:01:07.410
That's NP-complete--
intractable-- same paper.

01:01:07.410 --> 01:01:09.730
But what if I ask you just
to give me a mountain valley

01:01:09.730 --> 01:01:13.440
assignment that might fold flat?

01:01:13.440 --> 01:01:15.710
Well, that's also NP-complete.

01:01:15.710 --> 01:01:18.650
But if you actually
want it to fold flat,

01:01:18.650 --> 01:01:20.110
this is really the same problem.

01:01:20.110 --> 01:01:23.480
But if I ask you, give me a
mountain valley assignment,

01:01:23.480 --> 01:01:25.400
so that if I checked
every vertex according

01:01:25.400 --> 01:01:29.082
to this algorithm, at least
every vertex folds flat.

01:01:29.082 --> 01:01:32.001
That would seem nice.

01:01:32.001 --> 01:01:34.500
Definitely, I have to find a
mountain valley assignment that

01:01:34.500 --> 01:01:36.690
satisfies these
conditions, that as I

01:01:36.690 --> 01:01:39.820
do successive crimps,
every vertex-- if I cut out

01:01:39.820 --> 01:01:41.570
the vertex separately,
it would fold flat.

01:01:41.570 --> 01:01:43.860
This is the notion
of local foldability.

01:01:43.860 --> 01:01:46.370
And there's a linear
time algorithm

01:01:46.370 --> 01:01:49.810
to give you a mountain valley
assignment that ought to work,

01:01:49.810 --> 01:01:51.310
in that at each vertex it works.

01:01:51.310 --> 01:01:53.750
It still may not work globally
for some other reason.

01:01:56.360 --> 01:01:59.277
But it's pretty good.

01:01:59.277 --> 01:02:01.360
I think this would be,
actually, pretty practical.

01:02:01.360 --> 01:02:05.440
I think in a lot of real
world origami settings--

01:02:05.440 --> 01:02:09.660
when you're doing
flat folding anyway--

01:02:09.660 --> 01:02:13.430
locally foldable is going to be
enough to be globally foldable.

01:02:13.430 --> 01:02:14.717
That's a guess.

01:02:14.717 --> 01:02:15.800
I don't know if it's true.

01:02:22.520 --> 01:02:28.290
Consistent mountain
valley assignment,

01:02:28.290 --> 01:02:44.510
if there is one, so that each
vertex locally folds flat.

01:03:05.470 --> 01:03:11.230
Let me try to concoct a
small example that's relevant

01:03:11.230 --> 01:03:21.610
here-- got to think.

01:03:31.890 --> 01:03:32.890
Yes, I think that works.

01:03:32.890 --> 01:03:35.357
All right, here we go.

01:03:35.357 --> 01:03:36.690
I think this is in the textbook.

01:03:36.690 --> 01:03:41.140
I remember drawing it
in the past three years

01:03:41.140 --> 01:03:43.590
ago or whatever.

01:03:43.590 --> 01:03:46.958
So here's a crease pattern
on a square or whatever.

01:03:46.958 --> 01:03:48.416
AUDIENCE: The top
one should have--

01:03:48.416 --> 01:03:51.440
PROFESSOR: Yes, it
should have this.

01:03:51.440 --> 01:03:53.720
Thank you.

01:03:53.720 --> 01:03:55.870
So this satisfies
Kawasaki's theorem--

01:03:55.870 --> 01:03:59.350
that was the hard part--
because these angles sum to 180.

01:03:59.350 --> 01:04:01.500
And it's symmetric all around.

01:04:01.500 --> 01:04:05.080
OK, these angles
are the smallest.

01:04:05.080 --> 01:04:07.460
They are 60 degrees.

01:04:07.460 --> 01:04:09.546
This is an equilateral triangle.

01:04:09.546 --> 01:04:11.420
So we have this-- not
quite the generic case,

01:04:11.420 --> 01:04:13.180
but we have the
smallest angle is

01:04:13.180 --> 01:04:16.257
surrounded by two larger angles.

01:04:16.257 --> 01:04:17.840
Therefore, one of
these is a mountain;

01:04:17.840 --> 01:04:19.480
the other is a valley.

01:04:19.480 --> 01:04:22.300
That means that
these two creases

01:04:22.300 --> 01:04:24.080
have to have different
assignments-- I'm

01:04:24.080 --> 01:04:25.414
going to write a not equal sign.

01:04:25.414 --> 01:04:27.663
One of these is a mountain,
and the other is a valley.

01:04:27.663 --> 01:04:28.800
They can't be the same.

01:04:28.800 --> 01:04:31.170
Also, these two
cannot be the same.

01:04:31.170 --> 01:04:33.410
Also, these two
cannot be the same.

01:04:33.410 --> 01:04:35.340
That's not possible.

01:04:35.340 --> 01:04:37.640
Because I've got three,
it has to alternate.

01:04:37.640 --> 01:04:39.570
You can alternate three times.

01:04:39.570 --> 01:04:42.540
You can only alternative
at even number of times.

01:04:42.540 --> 01:04:43.960
Two of these are mountains.

01:04:43.960 --> 01:04:44.690
One is valley.

01:04:44.690 --> 01:04:46.450
And then you've got a problem.

01:04:46.450 --> 01:04:48.640
OK, so this thing is
not flat foldable.

01:04:48.640 --> 01:04:50.224
And this algorithm
will tell you that.

01:04:50.224 --> 01:04:51.806
Because it will say,
hey, I can't even

01:04:51.806 --> 01:04:53.400
find a mountain
valley assignment

01:04:53.400 --> 01:04:57.420
that could possibly
fold each vertex flat.

01:04:57.420 --> 01:05:02.100
So this is a nice algorithm.

01:05:02.100 --> 01:05:06.700
At least, it will detect
annoying situations like that.

01:05:06.700 --> 01:05:11.320
So in order to solve
this, we're going to use--

01:05:11.320 --> 01:05:13.810
and I'm just going to sketch
how this algorithm works--

01:05:13.810 --> 01:05:16.490
we're going to use this
characterization and this idea

01:05:16.490 --> 01:05:19.040
that we can really find all
possible mountain valley

01:05:19.040 --> 01:05:22.634
assignments just by trying all
the possible crimp sequences.

01:05:22.634 --> 01:05:24.050
Now, there are
exponentially many.

01:05:24.050 --> 01:05:26.270
So it's not like I'm actually
going to try them all.

01:05:26.270 --> 01:05:30.045
But I need to explore that
space of candidate crimps

01:05:30.045 --> 01:05:30.920
and see what happens.

01:05:36.850 --> 01:05:43.300
So the idea is kind of crazy.

01:05:43.300 --> 01:05:45.290
The beginning of
the algorithm is

01:05:45.290 --> 01:05:48.570
fold each vertex flat-- somehow.

01:05:48.570 --> 01:05:50.150
I don't care how.

01:05:50.150 --> 01:05:51.520
Just pick a crimp, do it.

01:05:51.520 --> 01:05:54.400
Pick a crimp, do it--
separately for each vertex.

01:05:54.400 --> 01:05:56.440
They're not going
to be compatible.

01:05:56.440 --> 01:05:59.270
And don't look at the mountain
valley assignment you get.

01:05:59.270 --> 01:06:02.460
But look at the crimping
sequence you get.

01:06:02.460 --> 01:06:06.880
So here, let's do
a little example--

01:06:06.880 --> 01:06:08.650
a non-trivial example.

01:06:08.650 --> 01:06:12.260
So here, we have the peace sign,
and these two angles are equal.

01:06:12.260 --> 01:06:13.190
They're smallest.

01:06:13.190 --> 01:06:15.442
I could crimp this
angle first, or I

01:06:15.442 --> 01:06:16.650
could crimp this angle first.

01:06:16.650 --> 01:06:17.927
I have a choice.

01:06:17.927 --> 01:06:19.010
So I'll draw both of them.

01:06:23.080 --> 01:06:27.340
If I crimp this angle
first, I know these guys

01:06:27.340 --> 01:06:29.810
are paired up in the sense
that they must be not equal--

01:06:29.810 --> 01:06:31.730
one's mountain and one's valley.

01:06:31.730 --> 01:06:34.660
After I do that crimp-- just
like in the real example

01:06:34.660 --> 01:06:38.120
I had-- this angle
will equal that angle.

01:06:38.120 --> 01:06:42.160
And these two guys must
have equal assignments.

01:06:42.160 --> 01:06:44.480
They must be both
mountain or both valley.

01:06:44.480 --> 01:06:47.410
In this situation,
these two guys

01:06:47.410 --> 01:06:51.100
are not equal, if I
crimp this pair first.

01:06:51.100 --> 01:06:53.035
And these two guys must
be equal-- equal now

01:06:53.035 --> 01:06:56.500
in the sense of being
mountain or valley.

01:06:56.500 --> 01:07:00.170
OK, so there are still
exponentially many

01:07:00.170 --> 01:07:01.640
possibilities in how to do this.

01:07:01.640 --> 01:07:05.000
But just pick one-- pick one
of these ways of pairing up.

01:07:05.000 --> 01:07:07.540
You're going to pair up
each of the n creases

01:07:07.540 --> 01:07:09.830
into n over 2 pairs.

01:07:09.830 --> 01:07:14.550
And they're going to have some
not equal and equal signs.

01:07:14.550 --> 01:07:16.850
So now, if you imagine
the general picture,

01:07:16.850 --> 01:07:20.630
like here, for example, I
might get-- in this pattern,

01:07:20.630 --> 01:07:22.710
I would be forced
to get not equals

01:07:22.710 --> 01:07:25.160
and these guys paired up.

01:07:25.160 --> 01:07:28.575
And in general, I want to
look at these kinds of cycles.

01:07:31.450 --> 01:07:37.150
If I come into a vertex--
here's a vertex--

01:07:37.150 --> 01:07:38.970
it's paired up with somebody.

01:07:38.970 --> 01:07:41.900
So if I come in here,
I can go out somewhere.

01:07:41.900 --> 01:07:45.260
And I come to this vertex,
it's paired with somebody.

01:07:45.260 --> 01:07:48.380
So I'm going to just-- I
can keep wandering around.

01:07:48.380 --> 01:07:51.815
And in general, there will
be a bunch of these paths

01:07:51.815 --> 01:07:53.650
that you can follow.

01:07:53.650 --> 01:07:54.650
What could the paths do?

01:07:54.650 --> 01:07:58.350
They either close up on
themselves-- maybe things

01:07:58.350 --> 01:08:03.660
are paired up in such a way
that you make a return trip.

01:08:03.660 --> 01:08:05.880
Or it could be some other path.

01:08:05.880 --> 01:08:08.305
Let me draw a dotted path.

01:08:08.305 --> 01:08:10.245
It could come in
here, and maybe it

01:08:10.245 --> 01:08:12.180
gets paired up with this guy.

01:08:12.180 --> 01:08:13.610
Maybe it goes off to infinity.

01:08:13.610 --> 01:08:15.267
It reaches the
boundary of the paper.

01:08:15.267 --> 01:08:16.600
Those are the two possibilities.

01:08:16.600 --> 01:08:19.250
You get paths, which
go off to the edge--

01:08:19.250 --> 01:08:20.870
off to infinity on either end.

01:08:20.870 --> 01:08:22.990
Or you could get cycles.

01:08:22.990 --> 01:08:25.000
The cycles are the problem.

01:08:25.000 --> 01:08:29.479
Because whenever I have a cycle,
I have a parity constraint.

01:08:29.479 --> 01:08:32.979
For example, when
they're all not equals,

01:08:32.979 --> 01:08:36.010
the length of the
cycle must be even.

01:08:36.010 --> 01:08:40.700
If there were-- what's
the general statement?

01:08:40.700 --> 01:08:42.844
It's like the
parity of the cycle,

01:08:42.844 --> 01:08:44.260
which is whether
it's even or odd,

01:08:44.260 --> 01:08:48.719
should be equal to the parity of
the number of not equal signs.

01:08:52.340 --> 01:08:54.584
Something like that.

01:08:54.584 --> 01:08:55.500
I've got a sheet here.

01:09:03.244 --> 01:09:05.810
Great, I just said
"parity problems."

01:09:05.810 --> 01:09:06.870
It's something like that.

01:09:06.870 --> 01:09:08.970
It's either the
parity of the cycle

01:09:08.970 --> 01:09:10.990
should equal the parity
of the number of equals

01:09:10.990 --> 01:09:13.090
or the parity of the
number of not equals.

01:09:13.090 --> 01:09:15.350
I think, number of equals.

01:09:15.350 --> 01:09:18.260
Anyway, one of the two.

01:09:18.260 --> 01:09:19.319
And you can just check.

01:09:19.319 --> 01:09:20.235
I mean, you're forced.

01:09:20.235 --> 01:09:22.250
If I say, OK, let's
make this mountain,

01:09:22.250 --> 01:09:24.069
then this is either
equals or not equals.

01:09:24.069 --> 01:09:25.640
It'll tell me whether this
is mountain or valley.

01:09:25.640 --> 01:09:26.770
Just walk around the cycle.

01:09:26.770 --> 01:09:28.899
Either you get a
contradiction or you don't.

01:09:28.899 --> 01:09:32.520
If you get a contradiction,
we have a problem.

01:09:32.520 --> 01:09:35.080
How could we possibly
fix the problem?

01:09:35.080 --> 01:09:41.395
Well, when we made-- you
look at each of these cramps.

01:09:41.395 --> 01:09:43.770
I mean, in fact, you could
look at each of these vertices

01:09:43.770 --> 01:09:44.260
separately.

01:09:44.260 --> 01:09:46.510
But you think about one of
these crimps and say, well,

01:09:46.510 --> 01:09:48.069
could I have done
it another way?

01:09:48.069 --> 01:09:51.912
Sometimes, there are crimps
that have other equal choices.

01:09:51.912 --> 01:09:53.620
Maybe, there are a
bunch of equal angles.

01:09:53.620 --> 01:09:56.760
And I could have done
a different pairing.

01:09:56.760 --> 01:09:59.070
What happens when I try
a different pairing?

01:09:59.070 --> 01:10:03.290
Well, instead of this
being in one cycle

01:10:03.290 --> 01:10:07.230
and, let's say, this
being in another cycle,

01:10:07.230 --> 01:10:09.510
if I pair these guys
up instead, I'll

01:10:09.510 --> 01:10:13.150
end up merging those two
cycles into one bigger thing.

01:10:13.150 --> 01:10:15.620
It could be a path or a cycle.

01:10:15.620 --> 01:10:19.850
And the algorithm says, just
keep doing those cycle merges.

01:10:19.850 --> 01:10:23.820
And if you get stuck, your
thing is not locally foldable.

01:10:23.820 --> 01:10:25.830
That's the hard part to prove.

01:10:25.830 --> 01:10:29.336
Otherwise, you will find
one of these patterns

01:10:29.336 --> 01:10:31.460
that you can actually
resolve mountains and valleys

01:10:31.460 --> 01:10:33.140
all the way through.

01:10:33.140 --> 01:10:51.330
So let's say, so start with some
folding-- say local folding,

01:10:51.330 --> 01:10:52.380
whatever.

01:10:52.380 --> 01:10:58.865
I'm going to say with some
pairing of creases at vertices.

01:11:06.460 --> 01:11:29.385
And merge two paths or
cycles whenever possible.

01:11:33.000 --> 01:11:37.760
And when I say merge,
I mean whenever

01:11:37.760 --> 01:11:41.110
you have-- what are the possible
things you could possibly

01:11:41.110 --> 01:11:43.720
merge-- when you have at some
point during the algorithm

01:11:43.720 --> 01:11:46.640
a bunch of equal angles, you
have a choice which of these

01:11:46.640 --> 01:11:47.180
you crimp.

01:11:47.180 --> 01:11:50.320
Obviously, the mountain valley
assignment is not fixed.

01:11:50.320 --> 01:11:53.450
You can crimp any of them.

01:11:53.450 --> 01:11:55.920
You picked one of
them, and it's sort

01:11:55.920 --> 01:11:58.210
of merging whatever this
thing is attached to,

01:11:58.210 --> 01:12:01.380
to whatever this
thing is attached to.

01:12:01.380 --> 01:12:05.660
If there's something else that's
disconnected from that thing,

01:12:05.660 --> 01:12:09.090
I want you to instead
merge two of them that

01:12:09.090 --> 01:12:11.360
combines two different
connected components-- two

01:12:11.360 --> 01:12:12.880
paths or cycles.

01:12:12.880 --> 01:12:14.950
Merging means I decrease
the total number

01:12:14.950 --> 01:12:15.780
of paths or cycles.

01:12:15.780 --> 01:12:17.220
I combine two into one.

01:12:17.220 --> 01:12:19.310
Whenever that's possible, do it.

01:12:19.310 --> 01:12:21.580
You can prove that
if you have parity

01:12:21.580 --> 01:12:23.784
problem in the
merge thing, you had

01:12:23.784 --> 01:12:25.450
to have had a parity
problem originally.

01:12:25.450 --> 01:12:29.260
And merging can only
fix parity problems.

01:12:29.260 --> 01:12:31.940
That's the claim, and that's
what I will not prove.

01:12:31.940 --> 01:12:34.470
Once you know that-- and it
doesn't matter in what order

01:12:34.470 --> 01:12:37.860
or how you choose to merge-- you
just merge as much as possible.

01:12:37.860 --> 01:12:42.229
And either the resulting
thing is OK or not.

01:12:42.229 --> 01:12:44.270
And accordingly, you will
tell whether this thing

01:12:44.270 --> 01:12:46.650
is locally foldable.

01:12:46.650 --> 01:12:48.700
Sorry, I want to move
on to other things.

01:12:48.700 --> 01:12:51.340
But I think this would be a fun
thing to actually implement.

01:12:51.340 --> 01:12:53.310
It's an easy algorithm.

01:12:53.310 --> 01:13:01.000
And it's, I think, a pretty good
test it for problems like this

01:13:01.000 --> 01:13:02.290
that prevent flat foldability.

01:13:13.510 --> 01:13:17.620
So let's move on from
foldability to origami design.

01:13:21.690 --> 01:13:23.595
So a bit of a big transition.

01:13:23.595 --> 01:13:26.880
And we're going to talk
about origami design

01:13:26.880 --> 01:13:34.920
a lot more next class also
but just start it off today.

01:13:34.920 --> 01:13:38.460
And the particular
algorithm for origami design

01:13:38.460 --> 01:13:41.850
I want to talk about is
called the tree method.

01:13:41.850 --> 01:13:44.600
This is probably
the oldest algorithm

01:13:44.600 --> 01:13:47.940
for origami design,
in that people

01:13:47.940 --> 01:13:51.700
have been thinking about it and
developing it for many years

01:13:51.700 --> 01:13:54.140
through this period called
the Bug Wars, when people were

01:13:54.140 --> 01:13:56.880
trying to design more and
more complicated insects.

01:13:56.880 --> 01:14:00.140
It's like, well, I can make
an insect with six legs.

01:14:00.140 --> 01:14:03.610
Oh yeah, well I can make
a spider with eight legs.

01:14:03.610 --> 01:14:07.660
Oh yeah, well I can make
an insect-- a beetle that

01:14:07.660 --> 01:14:10.600
has wings and horns and there's
thorns on the horns-- you know,

01:14:10.600 --> 01:14:12.780
all these crazy things.

01:14:12.780 --> 01:14:14.280
During that time,
there were a lot

01:14:14.280 --> 01:14:15.654
of people thinking
about how do I

01:14:15.654 --> 01:14:19.950
make more and more
complicated-- especially, more

01:14:19.950 --> 01:14:23.990
limbs in my creatures
and very precise

01:14:23.990 --> 01:14:25.950
arrangements of those
limbs, let's say.

01:14:25.950 --> 01:14:28.690
And that is what the tree
method deals with and was really

01:14:28.690 --> 01:14:35.420
formalized by Robert Lang,
who published a paper in '96,

01:14:35.420 --> 01:14:39.810
describing it as a sort
of complete algorithm.

01:14:39.810 --> 01:14:42.940
And it's still
not known for sure

01:14:42.940 --> 01:14:44.480
that that algorithm
always works.

01:14:44.480 --> 01:14:46.930
But that's what
we've been working

01:14:46.930 --> 01:14:52.260
on-- me and Marty and Rob Lang--
for the last four years or so.

01:14:52.260 --> 01:14:54.600
And soon, we will
publish that thing

01:14:54.600 --> 01:14:56.645
and prove that this
thing always works.

01:14:56.645 --> 01:14:59.020
But I'm going to describe the
algorithm without the proof

01:14:59.020 --> 01:15:00.170
that it works.

01:15:00.170 --> 01:15:05.862
And what it does--
I'll tell you its goal

01:15:05.862 --> 01:15:07.195
from a mathematical perspective.

01:15:18.260 --> 01:15:20.572
So it's interested in
practical origami design.

01:15:20.572 --> 01:15:22.780
So we're going to start from
a square piece of paper.

01:15:22.780 --> 01:15:24.620
It would also work
for triangular pieces

01:15:24.620 --> 01:15:27.700
of paper or anything convex.

01:15:27.700 --> 01:15:31.124
But squares are what
people usually care about.

01:15:31.124 --> 01:15:32.790
Sometimes it's used
for rectangles also.

01:16:06.510 --> 01:16:10.250
The idea is I give to
you a stick figure.

01:16:13.110 --> 01:16:14.750
So that's formally,
it's a tree--

01:16:14.750 --> 01:16:17.090
a graph without any cycles.

01:16:17.090 --> 01:16:21.410
It's a metric tree, meaning
that I put lengths on the edges.

01:16:21.410 --> 01:16:23.680
I know this length-- this
edge length-- is maybe

01:16:23.680 --> 01:16:24.920
twice as long as this one.

01:16:24.920 --> 01:16:28.380
So I really draw it with
edge lengths in mind.

01:16:28.380 --> 01:16:32.600
Then what I want
you to do is find

01:16:32.600 --> 01:16:38.820
some folding of a
piece of paper--

01:16:38.820 --> 01:16:41.950
I should really be looking
at what I'm trying to match.

01:16:41.950 --> 01:17:06.140
So here, here, this
goes down, such

01:17:06.140 --> 01:17:09.290
that I want to find some folding
of a square paper-- in fact,

01:17:09.290 --> 01:17:12.920
the smallest square
possible, so that when

01:17:12.920 --> 01:17:19.100
I project-- like
this-- vertically,

01:17:19.100 --> 01:17:26.270
the projection of that folding
is exactly that metric tree.

01:17:26.270 --> 01:17:28.940
And this is called a
uniaxial-- this thing is

01:17:28.940 --> 01:17:30.880
called a uniaxial base.

01:17:30.880 --> 01:17:33.700
Let me tell you a little bit
why it's called a uniaxial base.

01:17:37.280 --> 01:17:40.220
We're thinking about what
are called origami bases.

01:17:40.220 --> 01:17:43.570
These there like the
beginning of origami models.

01:17:43.570 --> 01:17:46.290
And most classic
origami models--

01:17:46.290 --> 01:17:51.980
like more than 60 years ago--
start from one of these bases.

01:17:51.980 --> 01:17:58.780
You've got waterbomb base on
the top left, preliminary base,

01:17:58.780 --> 01:18:05.557
fish base, bird base
windmill base, and frog base.

01:18:05.557 --> 01:18:06.640
I can't remember them all.

01:18:06.640 --> 01:18:08.250
I have a little example here.

01:18:08.250 --> 01:18:10.750
This is the waterbomb base.

01:18:10.750 --> 01:18:14.810
So it's just very
simple crease pattern.

01:18:14.810 --> 01:18:17.700
And why this is useful
is, it gives you

01:18:17.700 --> 01:18:20.370
sort of four flaps of
paper to work with.

01:18:20.370 --> 01:18:23.640
Maybe you make one
of them the head

01:18:23.640 --> 01:18:26.590
and the other two wings
and the back one a tail,

01:18:26.590 --> 01:18:27.930
if you're making a crane.

01:18:27.930 --> 01:18:29.880
If doesn't actually
start not from this space

01:18:29.880 --> 01:18:32.610
but from the other one.

01:18:32.610 --> 01:18:33.990
But the same idea.

01:18:33.990 --> 01:18:35.990
If you're folding a
crane, one of these

01:18:35.990 --> 01:18:38.860
would be the head, the
other tail, and two wings.

01:18:38.860 --> 01:18:41.870
This is great if you're
making a four flap animal.

01:18:41.870 --> 01:18:44.020
And if you think
about its projection--

01:18:44.020 --> 01:18:49.520
and it's easier to think
about in this other picture--

01:18:49.520 --> 01:18:54.710
the projection of this
thing is a four limbed star.

01:18:54.710 --> 01:18:56.490
You can see it's a plus sign.

01:18:56.490 --> 01:18:58.296
All of them are the same length.

01:18:58.296 --> 01:18:59.670
And so this is
actually something

01:18:59.670 --> 01:19:01.610
you can get out of
the tree method.

01:19:01.610 --> 01:19:04.420
You just give that
as your input.

01:19:04.420 --> 01:19:07.870
You will get this 3D thing
and this crease pattern

01:19:07.870 --> 01:19:14.060
as your origami-- as the output.

01:19:14.060 --> 01:19:17.150
Let me show you the
program in action.

01:19:17.150 --> 01:19:18.850
So Robert Lang
implemented this thing.

01:19:18.850 --> 01:19:20.110
It's called tree maker.

01:19:20.110 --> 01:19:23.025
It's freely available, open
source, all that good stuff.

01:19:28.540 --> 01:19:31.970
And I'm not an expert at
using it, so bear with me.

01:19:31.970 --> 01:19:39.970
But if we wanted to say,
I would like that star.

01:19:39.970 --> 01:19:43.300
OK, now, I drew it obviously
not with all the lengths equal,

01:19:43.300 --> 01:19:45.090
but it's ignoring the
lengths that I drew.

01:19:45.090 --> 01:19:46.590
And they're actually
specified here.

01:19:46.590 --> 01:19:48.560
So all the lengths here
are supposed to be 1.

01:19:48.560 --> 01:19:51.500
And then I say, OK, optimize.

01:19:51.500 --> 01:19:53.660
And then make a crease pattern.

01:19:53.660 --> 01:19:55.635
And then show me
the crease pattern.

01:19:55.635 --> 01:19:58.060
And there it is, exactly
the crease pattern

01:19:58.060 --> 01:20:00.702
I made, although actually I can
see from the mountain valley

01:20:00.702 --> 01:20:02.410
assignment-- because
this is not really--

01:20:02.410 --> 01:20:04.450
this is not flat origami.

01:20:04.450 --> 01:20:06.240
It made it this way.

01:20:06.240 --> 01:20:06.840
So it's flat.

01:20:06.840 --> 01:20:09.620
Of course, the projection is
the same-- still four limbs.

01:20:12.560 --> 01:20:17.330
And so it's dashes for valleys
and solid lines for mountains.

01:20:17.330 --> 01:20:19.540
But you can make
anything you want.

01:20:19.540 --> 01:20:25.130
So let's say we want to
make-- I don't know-- a lizard

01:20:25.130 --> 01:20:26.350
or something.

01:20:26.350 --> 01:20:29.300
So the blue lines are the tree.

01:20:37.820 --> 01:20:39.170
So here's-- can I do this?

01:20:39.170 --> 01:20:40.970
Yes, there we go.

01:20:40.970 --> 01:20:46.380
So here, I have a forearm,
a head, a foreleg,

01:20:46.380 --> 01:20:51.490
another forearm, a body segment,
tail, and two hind legs.

01:20:51.490 --> 01:20:53.820
Maybe I want to make that.

01:20:53.820 --> 01:20:58.630
So I say optimize and then
make a crease pattern, and then

01:20:58.630 --> 01:20:59.340
boom.

01:20:59.340 --> 01:21:02.000
You fold that, and it will
have exactly that projection.

01:21:02.000 --> 01:21:04.750
And assuming it did a
reasonable job at computation,

01:21:04.750 --> 01:21:07.036
this will be the best
way to fold this thing.

01:21:07.036 --> 01:21:08.410
And it's the
smallest square that

01:21:08.410 --> 01:21:10.670
matches exactly that shape.

01:21:10.670 --> 01:21:15.300
You get the best scale
factor between the size

01:21:15.300 --> 01:21:17.570
of your piece of paper
and the target shape.

01:21:17.570 --> 01:21:19.790
But actually, doing
that optimization--

01:21:19.790 --> 01:21:21.444
the first step I
did-- is NP-complete.

01:21:21.444 --> 01:21:22.985
So it's not going
to do it perfectly,

01:21:22.985 --> 01:21:25.720
and we'll prove that Wednesday.

01:21:25.720 --> 01:21:27.520
But the heuristics
are pretty good.

01:21:27.520 --> 01:21:28.756
AUDIENCE: It finds a local.

01:21:28.756 --> 01:21:30.690
PROFESSOR: It finds
a local minimum,

01:21:30.690 --> 01:21:32.710
and often it finds
a pretty good one.

01:21:32.710 --> 01:21:36.000
And sometimes you can coax it
to find better ones, but, yeah.

01:21:36.000 --> 01:21:38.020
It's not perfect, but
hey, it's NP-complete.

01:21:38.020 --> 01:21:39.580
So you can't do it.

01:21:39.580 --> 01:21:43.360
This actually shows you what it
would look like in x-ray view.

01:21:46.640 --> 01:21:50.100
And then you can say,
oh, that was nice,

01:21:50.100 --> 01:21:55.980
but let's-- where is
my-- yeah, that was good.

01:21:55.980 --> 01:21:58.850
But maybe I really
wanted the head segment

01:21:58.850 --> 01:22:03.660
to be shorter length of 0.5.

01:22:03.660 --> 01:22:07.910
And then I wanted the
tail to be really long.

01:22:07.910 --> 01:22:12.240
And then you can optimize that
and find a crease pattern.

01:22:12.240 --> 01:22:13.170
And it'll complain.

01:22:13.170 --> 01:22:14.810
Because it's having trouble.

01:22:14.810 --> 01:22:15.310
Oh, dear.

01:22:18.150 --> 01:22:18.860
Demo effect.

01:22:18.860 --> 01:22:21.540
I should have tried
this example before.

01:22:21.540 --> 01:22:23.935
It's not-- oh, gosh.

01:22:23.935 --> 01:22:25.520
It's one of these annoying ones.

01:22:25.520 --> 01:22:42.710
I should say-- I should add
some feature like maybe a strain

01:22:42.710 --> 01:22:48.180
split something, add a
little bit, maybe do that

01:22:48.180 --> 01:22:54.150
and-- there we go.

01:22:54.150 --> 01:22:57.050
I cheated, and I'll explain
how I cheated last time.

01:22:57.050 --> 01:23:00.380
But if sometimes the
particular method

01:23:00.380 --> 01:23:05.090
fails but you can fix it by
adding in another tiny limb

01:23:05.090 --> 01:23:07.950
off the edge somewhere--
and of course, you

01:23:07.950 --> 01:23:10.510
can then get rid of that at
the end when you're folding,

01:23:10.510 --> 01:23:12.300
it only makes the
problem slightly harder.

01:23:12.300 --> 01:23:14.050
And it'll still find a folding.

01:23:14.050 --> 01:23:15.750
But we'll talk about
that next time.

01:23:15.750 --> 01:23:21.320
And I'm way out of time,
so we will stop there.

