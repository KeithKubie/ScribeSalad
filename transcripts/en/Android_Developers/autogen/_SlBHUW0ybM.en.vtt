WEBVTT
Kind: captions
Language: en

00:00:08.179 --> 00:00:10.759
hi my name is Stefan Lanza and I'm a

00:00:10.759 --> 00:00:10.769
hi my name is Stefan Lanza and I'm a
 

00:00:10.769 --> 00:00:12.560
hi my name is Stefan Lanza and I'm a
developer advocate on the Android team

00:00:12.560 --> 00:00:12.570
developer advocate on the Android team
 

00:00:12.570 --> 00:00:14.720
developer advocate on the Android team
here at Google today I'm going to talk

00:00:14.720 --> 00:00:14.730
here at Google today I'm going to talk
 

00:00:14.730 --> 00:00:16.790
here at Google today I'm going to talk
about a new testing API which we've

00:00:16.790 --> 00:00:16.800
about a new testing API which we've
 

00:00:16.800 --> 00:00:19.730
about a new testing API which we've
introduced with Android 4.3 UI

00:00:19.730 --> 00:00:19.740
introduced with Android 4.3 UI
 

00:00:19.740 --> 00:00:23.480
introduced with Android 4.3 UI
automation your automation is a new API

00:00:23.480 --> 00:00:23.490
automation your automation is a new API
 

00:00:23.490 --> 00:00:25.160
automation your automation is a new API
that introduces full screen

00:00:25.160 --> 00:00:25.170
that introduces full screen
 

00:00:25.170 --> 00:00:26.929
that introduces full screen
introspection support into the Android

00:00:26.929 --> 00:00:26.939
introspection support into the Android
 

00:00:26.939 --> 00:00:30.080
introspection support into the Android
instrumentation framework why is this

00:00:30.080 --> 00:00:30.090
instrumentation framework why is this
 

00:00:30.090 --> 00:00:32.359
instrumentation framework why is this
important because it enables testing

00:00:32.359 --> 00:00:32.369
important because it enables testing
 

00:00:32.369 --> 00:00:34.130
important because it enables testing
across application boundaries within

00:00:34.130 --> 00:00:34.140
across application boundaries within
 

00:00:34.140 --> 00:00:36.380
across application boundaries within
your instrumentation tests but let's

00:00:36.380 --> 00:00:36.390
your instrumentation tests but let's
 

00:00:36.390 --> 00:00:38.569
your instrumentation tests but let's
have a look at a quick example here's

00:00:38.569 --> 00:00:38.579
have a look at a quick example here's
 

00:00:38.579 --> 00:00:40.280
have a look at a quick example here's
some screenshots of the new Google Maps

00:00:40.280 --> 00:00:40.290
some screenshots of the new Google Maps
 

00:00:40.290 --> 00:00:42.229
some screenshots of the new Google Maps
app let's say we want to write a

00:00:42.229 --> 00:00:42.239
app let's say we want to write a
 

00:00:42.239 --> 00:00:44.630
app let's say we want to write a
functional test for this scenario using

00:00:44.630 --> 00:00:44.640
functional test for this scenario using
 

00:00:44.640 --> 00:00:47.240
functional test for this scenario using
the instrumentation framework what we

00:00:47.240 --> 00:00:47.250
the instrumentation framework what we
 

00:00:47.250 --> 00:00:49.430
the instrumentation framework what we
would do is to start activity on the

00:00:49.430 --> 00:00:49.440
would do is to start activity on the
 

00:00:49.440 --> 00:00:52.729
would do is to start activity on the
Left click on the navigation icon wait

00:00:52.729 --> 00:00:52.739
Left click on the navigation icon wait
 

00:00:52.739 --> 00:00:55.520
Left click on the navigation icon wait
for the dialogue to appear then click

00:00:55.520 --> 00:00:55.530
for the dialogue to appear then click
 

00:00:55.530 --> 00:00:58.520
for the dialogue to appear then click
the enable button but as of now there

00:00:58.520 --> 00:00:58.530
the enable button but as of now there
 

00:00:58.530 --> 00:01:00.770
the enable button but as of now there
was no easy way to actually turn a GPS

00:01:00.770 --> 00:01:00.780
was no easy way to actually turn a GPS
 

00:01:00.780 --> 00:01:03.349
was no easy way to actually turn a GPS
on the problem is that the

00:01:03.349 --> 00:01:03.359
on the problem is that the
 

00:01:03.359 --> 00:01:05.539
on the problem is that the
instrumentation framework is limited to

00:01:05.539 --> 00:01:05.549
instrumentation framework is limited to
 

00:01:05.549 --> 00:01:08.060
instrumentation framework is limited to
test within its target package only with

00:01:08.060 --> 00:01:08.070
test within its target package only with
 

00:01:08.070 --> 00:01:09.980
test within its target package only with
your automation this restriction no

00:01:09.980 --> 00:01:09.990
your automation this restriction no
 

00:01:09.990 --> 00:01:13.010
your automation this restriction no
longer holds and now we can test the

00:01:13.010 --> 00:01:13.020
longer holds and now we can test the
 

00:01:13.020 --> 00:01:15.710
longer holds and now we can test the
complete user flow go to the settings

00:01:15.710 --> 00:01:15.720
complete user flow go to the settings
 

00:01:15.720 --> 00:01:18.560
complete user flow go to the settings
screen and able the GPS by checking the

00:01:18.560 --> 00:01:18.570
screen and able the GPS by checking the
 

00:01:18.570 --> 00:01:22.280
screen and able the GPS by checking the
box and press the back button so let's

00:01:22.280 --> 00:01:22.290
box and press the back button so let's
 

00:01:22.290 --> 00:01:24.740
box and press the back button so let's
have a quick look at the API supported

00:01:24.740 --> 00:01:24.750
have a quick look at the API supported
 

00:01:24.750 --> 00:01:27.380
have a quick look at the API supported
by UI automation you our automation

00:01:27.380 --> 00:01:27.390
by UI automation you our automation
 

00:01:27.390 --> 00:01:29.420
by UI automation you our automation
enables full screen introspection

00:01:29.420 --> 00:01:29.430
enables full screen introspection
 

00:01:29.430 --> 00:01:31.390
enables full screen introspection
support using the accessibility

00:01:31.390 --> 00:01:31.400
support using the accessibility
 

00:01:31.400 --> 00:01:34.130
support using the accessibility
attributes it allows for taking

00:01:34.130 --> 00:01:34.140
attributes it allows for taking
 

00:01:34.140 --> 00:01:35.960
attributes it allows for taking
screenshots from right within your

00:01:35.960 --> 00:01:35.970
screenshots from right within your
 

00:01:35.970 --> 00:01:38.060
screenshots from right within your
instrumentation tests and then now this

00:01:38.060 --> 00:01:38.070
instrumentation tests and then now this
 

00:01:38.070 --> 00:01:39.890
instrumentation tests and then now this
was a feature that was requested for a

00:01:39.890 --> 00:01:39.900
was a feature that was requested for a
 

00:01:39.900 --> 00:01:40.999
was a feature that was requested for a
very long time

00:01:40.999 --> 00:01:41.009
very long time
 

00:01:41.009 --> 00:01:44.270
very long time
it also supports changing of the change

00:01:44.270 --> 00:01:44.280
it also supports changing of the change
 

00:01:44.280 --> 00:01:46.490
it also supports changing of the change
of the device orientation and injection

00:01:46.490 --> 00:01:46.500
of the device orientation and injection
 

00:01:46.500 --> 00:01:49.280
of the device orientation and injection
of raw input events maybe one more note

00:01:49.280 --> 00:01:49.290
of raw input events maybe one more note
 

00:01:49.290 --> 00:01:51.950
of raw input events maybe one more note
here your automation is a very low-level

00:01:51.950 --> 00:01:51.960
here your automation is a very low-level
 

00:01:51.960 --> 00:01:54.710
here your automation is a very low-level
API but this was done on purpose to

00:01:54.710 --> 00:01:54.720
API but this was done on purpose to
 

00:01:54.720 --> 00:01:56.780
API but this was done on purpose to
encourage development of your AI testing

00:01:56.780 --> 00:01:56.790
encourage development of your AI testing
 

00:01:56.790 --> 00:01:59.840
encourage development of your AI testing
tools such as your Automator as well as

00:01:59.840 --> 00:01:59.850
tools such as your Automator as well as
 

00:01:59.850 --> 00:02:01.819
tools such as your Automator as well as
to allow developers to use it in their

00:02:01.819 --> 00:02:01.829
to allow developers to use it in their
 

00:02:01.829 --> 00:02:04.969
to allow developers to use it in their
instrumentation tests and in fact the UI

00:02:04.969 --> 00:02:04.979
instrumentation tests and in fact the UI
 

00:02:04.979 --> 00:02:06.950
instrumentation tests and in fact the UI
Automator framework which were

00:02:06.950 --> 00:02:06.960
Automator framework which were
 

00:02:06.960 --> 00:02:09.619
Automator framework which were
introduced with jellybean 4.1 is built

00:02:09.619 --> 00:02:09.629
introduced with jellybean 4.1 is built
 

00:02:09.629 --> 00:02:13.150
introduced with jellybean 4.1 is built
on top of the year automation API

00:02:13.150 --> 00:02:13.160
on top of the year automation API
 

00:02:13.160 --> 00:02:17.390
on top of the year automation API
so let's have a look at some code what

00:02:17.390 --> 00:02:17.400
so let's have a look at some code what
 

00:02:17.400 --> 00:02:19.160
so let's have a look at some code what
do you have to do to get started with

00:02:19.160 --> 00:02:19.170
do you have to do to get started with
 

00:02:19.170 --> 00:02:21.740
do you have to do to get started with
your automation it's very simple you

00:02:21.740 --> 00:02:21.750
your automation it's very simple you
 

00:02:21.750 --> 00:02:23.050
your automation it's very simple you
just have to inherit from

00:02:23.050 --> 00:02:23.060
just have to inherit from
 

00:02:23.060 --> 00:02:26.120
just have to inherit from
instrumentation test case or from any

00:02:26.120 --> 00:02:26.130
instrumentation test case or from any
 

00:02:26.130 --> 00:02:27.110
instrumentation test case or from any
other subclass

00:02:27.110 --> 00:02:27.120
other subclass
 

00:02:27.120 --> 00:02:29.450
other subclass
like activity instrumentation test case

00:02:29.450 --> 00:02:29.460
like activity instrumentation test case
 

00:02:29.460 --> 00:02:32.600
like activity instrumentation test case
- then in your test method just call get

00:02:32.600 --> 00:02:32.610
- then in your test method just call get
 

00:02:32.610 --> 00:02:35.120
- then in your test method just call get
instrumentation that get you our

00:02:35.120 --> 00:02:35.130
instrumentation that get you our
 

00:02:35.130 --> 00:02:37.610
instrumentation that get you our
automation to get a reference to the UI

00:02:37.610 --> 00:02:37.620
automation to get a reference to the UI
 

00:02:37.620 --> 00:02:41.030
automation to get a reference to the UI
automation object the question is how do

00:02:41.030 --> 00:02:41.040
automation object the question is how do
 

00:02:41.040 --> 00:02:44.300
automation object the question is how do
you run these tests it's not so

00:02:44.300 --> 00:02:44.310
you run these tests it's not so
 

00:02:44.310 --> 00:02:46.790
you run these tests it's not so
different from what it was before you

00:02:46.790 --> 00:02:46.800
different from what it was before you
 

00:02:46.800 --> 00:02:48.950
different from what it was before you
just have to use the adb shell am

00:02:48.950 --> 00:02:48.960
just have to use the adb shell am
 

00:02:48.960 --> 00:02:51.740
just have to use the adb shell am
instrument command with providing the -

00:02:51.740 --> 00:02:51.750
instrument command with providing the -
 

00:02:51.750 --> 00:02:55.460
instrument command with providing the -
W option your target package and your

00:02:55.460 --> 00:02:55.470
W option your target package and your
 

00:02:55.470 --> 00:02:59.870
W option your target package and your
test Runner so let me show you how you

00:02:59.870 --> 00:02:59.880
test Runner so let me show you how you
 

00:02:59.880 --> 00:03:02.500
test Runner so let me show you how you
could introspect any visible screen

00:03:02.500 --> 00:03:02.510
could introspect any visible screen
 

00:03:02.510 --> 00:03:04.850
could introspect any visible screen
content from within your instrumentation

00:03:04.850 --> 00:03:04.860
content from within your instrumentation
 

00:03:04.860 --> 00:03:07.640
content from within your instrumentation
tests first we get a reference to the

00:03:07.640 --> 00:03:07.650
tests first we get a reference to the
 

00:03:07.650 --> 00:03:10.280
tests first we get a reference to the
you are automating object but as the

00:03:10.280 --> 00:03:10.290
you are automating object but as the
 

00:03:10.290 --> 00:03:12.650
you are automating object but as the
window content is presented as a tree of

00:03:12.650 --> 00:03:12.660
window content is presented as a tree of
 

00:03:12.660 --> 00:03:15.140
window content is presented as a tree of
accessibility notes in this case we have

00:03:15.140 --> 00:03:15.150
accessibility notes in this case we have
 

00:03:15.150 --> 00:03:17.380
accessibility notes in this case we have
to obtain the active window root

00:03:17.380 --> 00:03:17.390
to obtain the active window root
 

00:03:17.390 --> 00:03:20.030
to obtain the active window root
accessibility node first this is done by

00:03:20.030 --> 00:03:20.040
accessibility node first this is done by
 

00:03:20.040 --> 00:03:22.940
accessibility node first this is done by
calling get root in activity window from

00:03:22.940 --> 00:03:22.950
calling get root in activity window from
 

00:03:22.950 --> 00:03:25.100
calling get root in activity window from
there we can continue and create for any

00:03:25.100 --> 00:03:25.110
there we can continue and create for any
 

00:03:25.110 --> 00:03:28.610
there we can continue and create for any
note by text or ID but note this search

00:03:28.610 --> 00:03:28.620
note by text or ID but note this search
 

00:03:28.620 --> 00:03:31.340
note by text or ID but note this search
is always relative to the retrieved root

00:03:31.340 --> 00:03:31.350
is always relative to the retrieved root
 

00:03:31.350 --> 00:03:38.090
is always relative to the retrieved root
access accessibility node another cool

00:03:38.090 --> 00:03:38.100
access accessibility node another cool
 

00:03:38.100 --> 00:03:40.760
access accessibility node another cool
feature which your automation introduces

00:03:40.760 --> 00:03:40.770
feature which your automation introduces
 

00:03:40.770 --> 00:03:44.060
feature which your automation introduces
is to capture screenshots using the

00:03:44.060 --> 00:03:44.070
is to capture screenshots using the
 

00:03:44.070 --> 00:03:46.520
is to capture screenshots using the
instrumentation framework in order to

00:03:46.520 --> 00:03:46.530
instrumentation framework in order to
 

00:03:46.530 --> 00:03:48.230
instrumentation framework in order to
retrieve a bitmap of the current screen

00:03:48.230 --> 00:03:48.240
retrieve a bitmap of the current screen
 

00:03:48.240 --> 00:03:50.600
retrieve a bitmap of the current screen
content we have to call take screenshot

00:03:50.600 --> 00:03:50.610
content we have to call take screenshot
 

00:03:50.610 --> 00:03:53.420
content we have to call take screenshot
which returns a bitmap object which then

00:03:53.420 --> 00:03:53.430
which returns a bitmap object which then
 

00:03:53.430 --> 00:03:58.910
which returns a bitmap object which then
can be written to the filesystem your

00:03:58.910 --> 00:03:58.920
can be written to the filesystem your
 

00:03:58.920 --> 00:04:01.490
can be written to the filesystem your
automation also allows for the injection

00:04:01.490 --> 00:04:01.500
automation also allows for the injection
 

00:04:01.500 --> 00:04:04.490
automation also allows for the injection
of raw input events into the system in

00:04:04.490 --> 00:04:04.500
of raw input events into the system in
 

00:04:04.500 --> 00:04:06.680
of raw input events into the system in
order to inject an event you have to

00:04:06.680 --> 00:04:06.690
order to inject an event you have to
 

00:04:06.690 --> 00:04:10.370
order to inject an event you have to
call the inject input event method for

00:04:10.370 --> 00:04:10.380
call the inject input event method for
 

00:04:10.380 --> 00:04:12.320
call the inject input event method for
example if you want to inject a motion

00:04:12.320 --> 00:04:12.330
example if you want to inject a motion
 

00:04:12.330 --> 00:04:15.199
example if you want to inject a motion
event just obtain event object from the

00:04:15.199 --> 00:04:15.209
event just obtain event object from the
 

00:04:15.209 --> 00:04:18.050
event just obtain event object from the
pool and pass it as a parameter but note

00:04:18.050 --> 00:04:18.060
pool and pass it as a parameter but note
 

00:04:18.060 --> 00:04:20.510
pool and pass it as a parameter but note
that it's your responsibility to recycle

00:04:20.510 --> 00:04:20.520
that it's your responsibility to recycle
 

00:04:20.520 --> 00:04:22.790
that it's your responsibility to recycle
the input event and return it to the

00:04:22.790 --> 00:04:22.800
the input event and return it to the
 

00:04:22.800 --> 00:04:26.860
the input event and return it to the
pool furthermore you can execute come

00:04:26.860 --> 00:04:26.870
pool furthermore you can execute come
 

00:04:26.870 --> 00:04:29.110
pool furthermore you can execute come
and listen for their corresponding

00:04:29.110 --> 00:04:29.120
and listen for their corresponding
 

00:04:29.120 --> 00:04:31.060
and listen for their corresponding
accessibility events using an

00:04:31.060 --> 00:04:31.070
accessibility events using an
 

00:04:31.070 --> 00:04:34.060
accessibility events using an
accessibility event filter for example

00:04:34.060 --> 00:04:34.070
accessibility event filter for example
 

00:04:34.070 --> 00:04:36.939
accessibility event filter for example
we can pass a runnable as a parameter to

00:04:36.939 --> 00:04:36.949
we can pass a runnable as a parameter to
 

00:04:36.949 --> 00:04:39.760
we can pass a runnable as a parameter to
execute and wait for event which taps on

00:04:39.760 --> 00:04:39.770
execute and wait for event which taps on
 

00:04:39.770 --> 00:04:42.400
execute and wait for event which taps on
the screen and then verify this tab by

00:04:42.400 --> 00:04:42.410
the screen and then verify this tab by
 

00:04:42.410 --> 00:04:43.900
the screen and then verify this tab by
listening for the corresponding

00:04:43.900 --> 00:04:43.910
listening for the corresponding
 

00:04:43.910 --> 00:04:47.500
listening for the corresponding
accessibility event but what you also

00:04:47.500 --> 00:04:47.510
accessibility event but what you also
 

00:04:47.510 --> 00:04:50.409
accessibility event but what you also
can do is listen for all accessibility

00:04:50.409 --> 00:04:50.419
can do is listen for all accessibility
 

00:04:50.419 --> 00:04:53.320
can do is listen for all accessibility
events in the event stream this is also

00:04:53.320 --> 00:04:53.330
events in the event stream this is also
 

00:04:53.330 --> 00:04:56.080
events in the event stream this is also
very easy by just passing an instance of

00:04:56.080 --> 00:04:56.090
very easy by just passing an instance of
 

00:04:56.090 --> 00:04:58.870
very easy by just passing an instance of
on accessibility event listener to the

00:04:58.870 --> 00:04:58.880
on accessibility event listener to the
 

00:04:58.880 --> 00:05:01.180
on accessibility event listener to the
set on accessibility event listener

00:05:01.180 --> 00:05:01.190
set on accessibility event listener
 

00:05:01.190 --> 00:05:03.730
set on accessibility event listener
method your listener interface then

00:05:03.730 --> 00:05:03.740
method your listener interface then
 

00:05:03.740 --> 00:05:05.920
method your listener interface then
receives a callback each time an

00:05:05.920 --> 00:05:05.930
receives a callback each time an
 

00:05:05.930 --> 00:05:09.010
receives a callback each time an
accessibility event occurs thank you

00:05:09.010 --> 00:05:09.020
accessibility event occurs thank you
 

00:05:09.020 --> 00:05:10.780
accessibility event occurs thank you
very much for listening and happy

00:05:10.780 --> 00:05:10.790
very much for listening and happy
 

00:05:10.790 --> 00:05:13.270
very much for listening and happy
testing

