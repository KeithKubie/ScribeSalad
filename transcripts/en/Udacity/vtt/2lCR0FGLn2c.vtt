WEBVTT
Kind: captions
Language: en

00:00:00.220 --> 00:00:04.400
Before we continue I would like to
briefly describe the Apache Web Server.

00:00:04.400 --> 00:00:09.130
It's a popular open source web server,
and it's one of the technologies that

00:00:09.130 --> 00:00:12.920
in the flash paper
the author's compare against.

00:00:12.920 --> 00:00:15.650
My intent is not to give
a detailed lecture on Apache.

00:00:15.650 --> 00:00:17.940
That's beyond the scope of the course,
but

00:00:17.940 --> 00:00:22.920
instead I wanted to give you enough
about the architecture of Apache, and

00:00:22.920 --> 00:00:26.720
how it compares to the models
that we discussed in the class.

00:00:26.720 --> 00:00:30.280
And also the other way around,
to understand how these discussions in

00:00:30.280 --> 00:00:33.730
class, are reflected
in real world designs.

00:00:33.730 --> 00:00:38.080
&gt;From a very high level, the software
architecture of Apache looks like this.

00:00:38.080 --> 00:00:42.340
The core component provides
the basic server-like capability, so

00:00:42.340 --> 00:00:45.610
this is accepting connections and
managing concurrency.

00:00:45.610 --> 00:00:49.750
The various modules correspond to
different types of functionality that is

00:00:49.750 --> 00:00:52.120
executed on each request.

00:00:52.120 --> 00:00:55.790
The specific Apache deployment
can be configured to include

00:00:55.790 --> 00:00:57.900
different types of modules.

00:00:57.900 --> 00:01:00.580
For instance,
you can have certain security features,

00:01:00.580 --> 00:01:05.440
some management of dynamic content, or
even some of the modules are really

00:01:05.440 --> 00:01:09.220
responsible for
more basic HTP request processing.

00:01:09.220 --> 00:01:13.480
The flow of control is sort of similar
to the event driven model that we saw,

00:01:13.480 --> 00:01:17.600
in the sense that each request
passes through all of the modules.

00:01:17.600 --> 00:01:20.590
Like in the event driven module
each request ultimately passed

00:01:20.590 --> 00:01:22.010
through all the handlers.

00:01:22.010 --> 00:01:27.130
However, Apache's a combination of a
multiprocess and a multithreaded model.

00:01:27.130 --> 00:01:32.205
In Apache, a single process, a single
instance, is internally a multithreaded,

00:01:32.205 --> 00:01:38.020
boss/worker process that has dynamic
management of the number of threads.

00:01:38.020 --> 00:01:42.260
There's some configurable thresholds
that can be used to dynamically track

00:01:42.260 --> 00:01:46.140
when to increase or decrease
the number of threads in the pool.

00:01:46.140 --> 00:01:50.070
The total number of processes,
so the MP part of the model,

00:01:50.070 --> 00:01:54.970
can also be dynamically adjusted, and
for these, it's information such as

00:01:54.970 --> 00:01:59.940
number of outstanding connections,
number of pending requests, CPU usage,

00:01:59.940 --> 00:02:04.190
a number of factors can drive how the
number of the threads per process and

00:02:04.190 --> 00:02:06.650
the total number of
processes are adjusted.

