WEBVTT
Kind: captions
Language: en

00:00:03.840 --> 00:00:06.370
DAVE BURKE: Welcome, everyone,
to our inaugural Android

00:00:06.370 --> 00:00:09.730
Developers Summit here at
the Computer History Museum

00:00:09.730 --> 00:00:11.940
in Mountain View, California.

00:00:11.940 --> 00:00:14.280
It's great to see so many
Android developers here,

00:00:14.280 --> 00:00:16.980
from some of the biggest
names and emerging names,

00:00:16.980 --> 00:00:18.920
all under one roof.

00:00:18.920 --> 00:00:22.000
And I also want to say a
big welcome to everybody

00:00:22.000 --> 00:00:25.571
who's joining us on
the livestream today.

00:00:25.571 --> 00:00:26.070
OK.

00:00:26.070 --> 00:00:31.370
So speaking of history,
I joined Google in 2007,

00:00:31.370 --> 00:00:34.010
and it was a time when
computing was quite different.

00:00:34.010 --> 00:00:36.370
So the focus, really,
of the company

00:00:36.370 --> 00:00:39.050
was really laptops
and desktops, and it

00:00:39.050 --> 00:00:41.900
was before mobile
had really taken off.

00:00:41.900 --> 00:00:43.530
And Larry and Sergey,
the co-founders

00:00:43.530 --> 00:00:46.930
of Google, to their credit
kind of foresaw how mobile

00:00:46.930 --> 00:00:49.770
was going to change how
we interact with computers

00:00:49.770 --> 00:00:51.380
on a daily basis.

00:00:51.380 --> 00:00:55.770
And so they wanted to create a
strategic investment in mobile.

00:00:55.770 --> 00:00:58.360
So we created a separate
group within Google

00:00:58.360 --> 00:01:01.420
to focus on mobile applications.

00:01:01.420 --> 00:01:04.819
And the goal of the group was
to take existing Google Apps

00:01:04.819 --> 00:01:09.270
and services and bring them to
the mobile phones at the time.

00:01:09.270 --> 00:01:11.760
Now remember this
was 2007, so it

00:01:11.760 --> 00:01:13.840
was a pretty different world.

00:01:13.840 --> 00:01:15.550
And in particular,
there was no Android,

00:01:15.550 --> 00:01:17.282
and there was no iPhone.

00:01:17.282 --> 00:01:19.240
And the devices that were
available at the time

00:01:19.240 --> 00:01:20.680
were quite primitive.

00:01:20.680 --> 00:01:25.400
So you had a whole
fragmentation of technologies

00:01:25.400 --> 00:01:27.540
across different
device manufacturers.

00:01:27.540 --> 00:01:29.890
So you would see J2ME
in one device maker.

00:01:29.890 --> 00:01:31.052
You would see Symbian.

00:01:31.052 --> 00:01:32.510
And then even within
Symbian, there

00:01:32.510 --> 00:01:34.870
were two variants, UIQ and S60.

00:01:34.870 --> 00:01:36.160
You'd have Palm OS.

00:01:36.160 --> 00:01:37.880
You'd have Windows Mobile.

00:01:37.880 --> 00:01:40.600
And it was brutal as an
application developer

00:01:40.600 --> 00:01:43.420
to have to target all
of these different SDKs,

00:01:43.420 --> 00:01:46.280
because each one would
have different capabilities

00:01:46.280 --> 00:01:47.580
and limitations.

00:01:47.580 --> 00:01:49.070
And what you would
invariably find

00:01:49.070 --> 00:01:50.820
is that because
they're so different,

00:01:50.820 --> 00:01:52.800
you would have to hire
application developers

00:01:52.800 --> 00:01:54.790
for each technology vertical.

00:01:54.790 --> 00:01:56.870
It was really, really tough.

00:01:56.870 --> 00:02:00.100
But we soldiered on, and
we created a whole set

00:02:00.100 --> 00:02:01.685
of applications and services.

00:02:01.685 --> 00:02:04.790
So we had Waf versions
of Google Search.

00:02:04.790 --> 00:02:07.380
We had HTML versions
of Google Search.

00:02:07.380 --> 00:02:08.654
We used to have radio buttons.

00:02:08.654 --> 00:02:10.529
You had to like, tell
Google whether you were

00:02:10.529 --> 00:02:11.870
searching for web or images.

00:02:11.870 --> 00:02:14.510
That was before we had something
called Universal Search.

00:02:14.510 --> 00:02:17.310
We had J2ME versions of Maps.

00:02:17.310 --> 00:02:20.890
We had J2ME versions of
YouTube, of Gmail, et cetera.

00:02:20.890 --> 00:02:23.470
Even within Google Maps, not
only did we have J2ME versions,

00:02:23.470 --> 00:02:24.700
we had a Windows Mobile version.

00:02:24.700 --> 00:02:25.824
We had a Series 60 version.

00:02:25.824 --> 00:02:26.810
We had a UIQ version.

00:02:26.810 --> 00:02:28.000
We had a Palm OS version.

00:02:28.000 --> 00:02:29.530
We had a HTML version.

00:02:29.530 --> 00:02:32.000
It was very, very tough.

00:02:32.000 --> 00:02:34.050
And it was very, very
tough to scale, even

00:02:34.050 --> 00:02:37.930
for a company with the
resources like Google.

00:02:37.930 --> 00:02:40.300
So we did something
better, which

00:02:40.300 --> 00:02:43.120
then brought us to Android.

00:02:43.120 --> 00:02:45.731
And at the time,
when analysts would

00:02:45.731 --> 00:02:47.230
hear about the
Android project, they

00:02:47.230 --> 00:02:48.560
would sort of criticize it.

00:02:48.560 --> 00:02:50.116
And they would be like, OK.

00:02:50.116 --> 00:02:51.990
This is the last thing
the world needs is yet

00:02:51.990 --> 00:02:54.740
another mobile operating system.

00:02:54.740 --> 00:02:57.080
And Andy Rubin, who started
the Android project-- he

00:02:57.080 --> 00:02:57.637
would agree.

00:02:57.637 --> 00:02:59.220
But he would say,
what the world needs

00:02:59.220 --> 00:03:03.070
is an open-source
mobile operating system.

00:03:03.070 --> 00:03:06.040
And so with Android,
we also want

00:03:06.040 --> 00:03:09.060
a platform that has the
application developer in mind.

00:03:09.060 --> 00:03:11.620
So we spend a lot of time
worrying and thinking

00:03:11.620 --> 00:03:13.790
about our API
design to make sure

00:03:13.790 --> 00:03:17.130
that we have a really good
application framework.

00:03:17.130 --> 00:03:18.800
Every year when we
do a dessert release,

00:03:18.800 --> 00:03:20.970
we run what we call API Council.

00:03:20.970 --> 00:03:23.910
And it's a group of core
engineers on the team.

00:03:23.910 --> 00:03:26.470
And they review all the
prospective new APIs,

00:03:26.470 --> 00:03:29.020
all the method names,
all the property names,

00:03:29.020 --> 00:03:31.950
all of the sort of
styles that people

00:03:31.950 --> 00:03:33.200
are using across the team.

00:03:33.200 --> 00:03:36.330
And we make sure that we
have one consistent style.

00:03:36.330 --> 00:03:37.830
So if you're writing
an application,

00:03:37.830 --> 00:03:40.634
and you're interacting,
say, with our Camera2 APIs.

00:03:40.634 --> 00:03:42.425
And then you're talking
to a sensor manager

00:03:42.425 --> 00:03:44.230
to read sensor readings.

00:03:44.230 --> 00:03:46.040
Or you're manipulating
your view hierarchy.

00:03:46.040 --> 00:03:48.300
We want it to feel like
it's one person who had

00:03:48.300 --> 00:03:51.200
designed those APIs for you.

00:03:51.200 --> 00:03:53.010
Even more important
is making sure

00:03:53.010 --> 00:03:55.390
that we have consistency
of those APIs

00:03:55.390 --> 00:03:57.560
across different devices.

00:03:57.560 --> 00:03:59.550
And so the way we
do that is we have

00:03:59.550 --> 00:04:01.680
something we call a
Compatibility Definition

00:04:01.680 --> 00:04:02.620
Document.

00:04:02.620 --> 00:04:05.620
And it's a document describing
all of the requirements

00:04:05.620 --> 00:04:08.440
that a compatible
device must exhibit.

00:04:08.440 --> 00:04:11.430
And it's backed by hundreds
of thousands of tests

00:04:11.430 --> 00:04:14.290
that we call the
Compatibility Test Suite.

00:04:14.290 --> 00:04:16.060
And so if you're a
device maker, and you

00:04:16.060 --> 00:04:17.740
want to make an
Android device, you

00:04:17.740 --> 00:04:20.610
have to pass these hundreds
of thousands of tests

00:04:20.610 --> 00:04:22.250
to be able to use
the Android brand.

00:04:22.250 --> 00:04:25.340
And for your device to be
able to access the Play Store.

00:04:25.340 --> 00:04:28.270
And what this does is it ensures
that you, as an application

00:04:28.270 --> 00:04:30.260
developer, can
target applications

00:04:30.260 --> 00:04:32.830
that work across a
variety of device makers.

00:04:32.830 --> 00:04:34.790
And then you, as a
user, can download apps

00:04:34.790 --> 00:04:38.460
and have certainty that the app
will run well on your device.

00:04:38.460 --> 00:04:40.730
So CTS is an ongoing project.

00:04:40.730 --> 00:04:43.470
We're constantly
investing in it.

00:04:43.470 --> 00:04:45.360
In just the last
12 months, we've

00:04:45.360 --> 00:04:49.280
added over 80,000 OpenGL
tests, for example.

00:04:49.280 --> 00:04:52.830
And this allows us to test some
of the very latest features

00:04:52.830 --> 00:04:55.094
in OpenGL right up to 3.1.

00:04:55.094 --> 00:04:57.890
And it ensures that if
you're a game developer,

00:04:57.890 --> 00:05:00.050
and you're using those
latest features in OpenGL,

00:05:00.050 --> 00:05:01.508
we can make sure
that they're going

00:05:01.508 --> 00:05:04.470
to work well on modern devices.

00:05:04.470 --> 00:05:09.020
So of course, now what
this enables other people

00:05:09.020 --> 00:05:11.520
to-- not only third parties but
even Google's first parties.

00:05:11.520 --> 00:05:14.190
We can now use Google
Android's public APIs

00:05:14.190 --> 00:05:16.050
to deliver very
advanced services.

00:05:16.050 --> 00:05:18.510
Things like navigation
and Google Maps,

00:05:18.510 --> 00:05:21.960
or VR with Cardboard.

00:05:21.960 --> 00:05:23.440
These are features
that would have

00:05:23.440 --> 00:05:26.180
been extremely difficult,
if not impossible,

00:05:26.180 --> 00:05:28.440
on previous platforms.

00:05:28.440 --> 00:05:30.760
So what's happening now?

00:05:30.760 --> 00:05:34.830
Well effectively, we are in the
midst of a mobile revolution.

00:05:34.830 --> 00:05:38.310
We just announced last month
over 50% of Google searches

00:05:38.310 --> 00:05:39.810
are now happening on mobile.

00:05:39.810 --> 00:05:41.670
And for me, having
started in 2007,

00:05:41.670 --> 00:05:43.640
this is an incredible
number to see.

00:05:43.640 --> 00:05:45.540
I remember we would
look at traffic graphs,

00:05:45.540 --> 00:05:46.914
and we would
literally see mobile

00:05:46.914 --> 00:05:48.550
was like, this little blip.

00:05:48.550 --> 00:05:52.420
Whereas now, it takes
up half of the area.

00:05:52.420 --> 00:05:53.940
And of course,
Android is on a tear.

00:05:53.940 --> 00:05:57.440
We have over 1.4 billion
30-day active users

00:05:57.440 --> 00:06:00.464
across all form factors.

00:06:00.464 --> 00:06:02.880
And as you know, a lot of that
is also thanks to you guys,

00:06:02.880 --> 00:06:06.930
because a platform without
applications is not a product.

00:06:06.930 --> 00:06:10.930
And so thank you for all of
the work that you guys do.

00:06:10.930 --> 00:06:12.380
You know, it's
kind of interesting

00:06:12.380 --> 00:06:13.380
when you think about it.

00:06:13.380 --> 00:06:15.360
Because over the next couple
of years, especially emerging

00:06:15.360 --> 00:06:17.059
markets, people who
don't have phones

00:06:17.059 --> 00:06:18.350
are going to be getting phones.

00:06:18.350 --> 00:06:20.960
And all phones are going
to become smartphones.

00:06:20.960 --> 00:06:24.660
It's just an amazing
transition to be a part of.

00:06:24.660 --> 00:06:26.160
Some people actually
predicted this.

00:06:26.160 --> 00:06:26.910
I love this quote.

00:06:26.910 --> 00:06:30.096
This is from Nikola
Tesla in 1926.

00:06:30.096 --> 00:06:32.900
And he talks about being
able to communicate

00:06:32.900 --> 00:06:34.520
with each other
instantly, right?

00:06:34.520 --> 00:06:35.840
Irrespective of distance.

00:06:35.840 --> 00:06:39.580
He talks about being able
to see each other perfectly,

00:06:39.580 --> 00:06:41.140
as though we were face-to-face.

00:06:41.140 --> 00:06:44.480
And he talks about devices
being amazingly simple.

00:06:44.480 --> 00:06:46.120
He finishes up,
and he says, a man

00:06:46.120 --> 00:06:48.779
will be able to carry
one in his vest pocket.

00:06:48.779 --> 00:06:50.070
I mean, this is very prescient.

00:06:50.070 --> 00:06:51.660
I mean, he obviously
didn't anticipate

00:06:51.660 --> 00:06:52.980
that women would like phones.

00:06:52.980 --> 00:06:53.980
But he can't be perfect.

00:06:53.980 --> 00:06:55.070
This was 90 years ago.

00:06:55.070 --> 00:06:57.250
Hopefully we've moved on.

00:06:57.250 --> 00:07:00.020
But it's pretty amazing to see.

00:07:00.020 --> 00:07:04.000
Now of course, mobile technology
is advancing super fast.

00:07:04.000 --> 00:07:07.740
And on the Android team, we
like to have a very fast pace.

00:07:07.740 --> 00:07:10.920
And so if I just look, take a
little walk down memory lane.

00:07:10.920 --> 00:07:14.320
So in 2009, we launched-- we
actually had three dessert

00:07:14.320 --> 00:07:16.020
releases in one year.

00:07:16.020 --> 00:07:17.040
So we did Cupcake.

00:07:17.040 --> 00:07:17.900
We did Donut.

00:07:17.900 --> 00:07:19.890
We did Eclair.

00:07:19.890 --> 00:07:21.440
And even when those
three releases,

00:07:21.440 --> 00:07:25.220
we released some pretty
profound at the time features.

00:07:25.220 --> 00:07:27.390
So we had third-party
replaceable keyboards,

00:07:27.390 --> 00:07:28.250
for example.

00:07:28.250 --> 00:07:31.330
We had voice search available.

00:07:31.330 --> 00:07:33.900
We had desktop class browsing.

00:07:33.900 --> 00:07:36.130
Then in 2010, we did
two more releases.

00:07:36.130 --> 00:07:38.380
We did Froyo, and
we did Gingerbread.

00:07:38.380 --> 00:07:40.620
And we introduced
additional features,

00:07:40.620 --> 00:07:45.370
like NFC and Wi-Fi Hotspot
and the Native Development

00:07:45.370 --> 00:07:47.970
Kit for targeting games.

00:07:47.970 --> 00:07:51.000
Then in the next year, we
did Honeycomb and Ice Cream

00:07:51.000 --> 00:07:51.610
Sandwich.

00:07:51.610 --> 00:07:55.350
So Honeycomb allowed us to
bring Android to tablets.

00:07:55.350 --> 00:07:58.300
Ice Cream Sandwich then
introduced a more refined UI

00:07:58.300 --> 00:07:59.190
with the Holo theme.

00:07:59.190 --> 00:08:01.140
And also introducing
the Roboto font

00:08:01.140 --> 00:08:04.725
for the first time, which you'll
now see everywhere on Android.

00:08:04.725 --> 00:08:07.370
Fast forward, then we had
Jelly Bean, then we had KitKat.

00:08:07.370 --> 00:08:10.625
Which then brings us to our two
most recent releases, Lollipop

00:08:10.625 --> 00:08:12.100
and Marshmallow.

00:08:12.100 --> 00:08:14.490
So with Lollipop, this
was an opportunity for us

00:08:14.490 --> 00:08:16.540
to expand the
categories of computing

00:08:16.540 --> 00:08:17.780
that Android could run on.

00:08:17.780 --> 00:08:20.610
So we introduced support
for wearables, for watches,

00:08:20.610 --> 00:08:23.620
for TV, and for
Android Auto and cars.

00:08:23.620 --> 00:08:26.240
And then this year, we
introduced Marshmallow.

00:08:26.240 --> 00:08:27.760
And the focus there
was to go back

00:08:27.760 --> 00:08:29.580
to the core user experience.

00:08:29.580 --> 00:08:31.880
And set a high bar
for what we believe

00:08:31.880 --> 00:08:34.890
a quality experience and
polished experience on mobile

00:08:34.890 --> 00:08:37.130
should be.

00:08:37.130 --> 00:08:42.059
Just last year, we started
a developer preview process

00:08:42.059 --> 00:08:43.730
and further refined
it this summer.

00:08:43.730 --> 00:08:47.010
So with Marshmallow, we came out
with a set of preview releases

00:08:47.010 --> 00:08:48.609
across the summer.

00:08:48.609 --> 00:08:50.150
And even in the
first couple of days,

00:08:50.150 --> 00:08:52.214
we had hundreds of
thousands of downloads.

00:08:52.214 --> 00:08:54.380
And so what that means is
that hundreds of thousands

00:08:54.380 --> 00:08:56.450
of developers can
start testing out

00:08:56.450 --> 00:08:59.090
their applications on the
newest version of Android

00:08:59.090 --> 00:09:00.600
before the release.

00:09:00.600 --> 00:09:02.284
And you could also
try the new features.

00:09:02.284 --> 00:09:03.700
So it's really
awesome, because it

00:09:03.700 --> 00:09:06.116
means we're all working together
to have the best platform

00:09:06.116 --> 00:09:07.910
releases and the
best quality apps

00:09:07.910 --> 00:09:11.860
and services at
launch for our users.

00:09:11.860 --> 00:09:14.230
OK.

00:09:14.230 --> 00:09:17.415
So moving forward, that was
a little bit about timing.

00:09:17.415 --> 00:09:19.540
We started to think about,
well, what else could we

00:09:19.540 --> 00:09:23.040
do to make your lives a little
bit easier and more productive?

00:09:23.040 --> 00:09:25.910
What is it that you spend
all your time doing?

00:09:25.910 --> 00:09:28.820
Now Android Studio is
the official Android ID

00:09:28.820 --> 00:09:32.650
and toolchain for Android,
directly from Google.

00:09:32.650 --> 00:09:34.860
And it has the best set
of tools to help you build

00:09:34.860 --> 00:09:37.120
better, more successful apps.

00:09:37.120 --> 00:09:40.770
This year, we've made a huge
stepwise change in investment

00:09:40.770 --> 00:09:42.430
in our tools.

00:09:42.430 --> 00:09:44.840
And we're working on some
really great features that

00:09:44.840 --> 00:09:46.680
are rolling out both
this year, and you'll

00:09:46.680 --> 00:09:49.050
see over the next
coming months and years.

00:09:49.050 --> 00:09:50.800
I'm really excited
about what we're doing.

00:09:50.800 --> 00:09:52.390
And to help you
learn more, I'd like

00:09:52.390 --> 00:09:55.540
to invite Steph up to the stage
to talk to you about Studio.

00:10:02.259 --> 00:10:03.800
STEPHANIE CUTHBERTSON:
Thank you guys

00:10:03.800 --> 00:10:05.870
so much for being here today.

00:10:05.870 --> 00:10:08.240
Android Studio has built
tremendous momentum

00:10:08.240 --> 00:10:11.000
since we announced it
about 2 and 1/2 years ago.

00:10:11.000 --> 00:10:14.630
Since we announced,
we've had 103 releases

00:10:14.630 --> 00:10:15.720
into our various channels.

00:10:15.720 --> 00:10:19.830
That includes Canary,
Beta, and Stable.

00:10:19.830 --> 00:10:20.940
Android Studio went G8.

00:10:20.940 --> 00:10:22.860
It came out of Beta
just about a year ago,

00:10:22.860 --> 00:10:26.450
and since then we've had another
five major stable releases.

00:10:26.450 --> 00:10:29.090
The last two
focused very heavily

00:10:29.090 --> 00:10:32.430
on quality and stability.

00:10:32.430 --> 00:10:34.530
In the Android
Studio team, our goal

00:10:34.530 --> 00:10:36.986
is to make the IDE delightful.

00:10:36.986 --> 00:10:38.360
And in order to
be delightful, we

00:10:38.360 --> 00:10:41.700
felt like it had to be not just
stable, but incredibly stable.

00:10:41.700 --> 00:10:43.150
And that's because
as a developer,

00:10:43.150 --> 00:10:46.130
you spend hours in
the IDE everyday.

00:10:46.130 --> 00:10:50.070
And so, in 1.4 and 1.5, we felt
like with those significant

00:10:50.070 --> 00:10:52.020
investments, well,
we'll continue

00:10:52.020 --> 00:10:54.780
to make investments in stability
and quality in every release.

00:10:54.780 --> 00:10:56.740
We have the foundation
that we wanted

00:10:56.740 --> 00:10:59.480
to start setting our sights on
the next set of improvements,

00:10:59.480 --> 00:11:03.547
which are really going
to focus on speed.

00:11:03.547 --> 00:11:05.130
Now when we took a
look at the feature

00:11:05.130 --> 00:11:07.200
set we had planned
for the next release,

00:11:07.200 --> 00:11:09.070
we decided it was
so gigantic that we

00:11:09.070 --> 00:11:10.450
wanted to remember the release.

00:11:10.450 --> 00:11:12.850
So you'll see the next
version of Android Studio

00:11:12.850 --> 00:11:22.860
will be Android Studio 2.0.

00:11:22.860 --> 00:11:24.650
Now this is a gigantic release.

00:11:24.650 --> 00:11:27.460
I'm going to walk you through
some of the feature set today.

00:11:27.460 --> 00:11:29.027
When we talked to
mobile developers,

00:11:29.027 --> 00:11:30.360
there was a few things we found.

00:11:30.360 --> 00:11:33.590
Particularly, that there were
a number of opportunities

00:11:33.590 --> 00:11:37.580
to make the development process
faster, smoother, and better.

00:11:37.580 --> 00:11:39.690
In particular, when we
talk to mobile developers,

00:11:39.690 --> 00:11:41.420
like all developers,
we found that you

00:11:41.420 --> 00:11:43.910
spend a ton of time-- we spend
a ton of time in the code,

00:11:43.910 --> 00:11:44.761
build, run cycle.

00:11:44.761 --> 00:11:45.260
Right?

00:11:45.260 --> 00:11:47.070
It's where you
spend all your time.

00:11:47.070 --> 00:11:49.837
And now, if you think about
what it's like to code on HTML.

00:11:49.837 --> 00:11:51.420
You make some code
edits, and then you

00:11:51.420 --> 00:11:52.504
can refresh the page live.

00:11:52.504 --> 00:11:53.003
Right?

00:11:53.003 --> 00:11:53.805
So it's super fast.

00:11:53.805 --> 00:11:55.221
Now how many of
you guys would say

00:11:55.221 --> 00:11:58.540
it feels that way on mobile?

00:11:58.540 --> 00:12:00.122
We felt like it
was just too slow.

00:12:00.122 --> 00:12:01.080
It was too heavyweight.

00:12:01.080 --> 00:12:02.710
And you had to be able
to iterate better.

00:12:02.710 --> 00:12:04.626
So I'm going to talk
about a bunch of changes.

00:12:04.626 --> 00:12:06.020
The first thing
you'll see coming

00:12:06.020 --> 00:12:08.970
is, we've massively
accelerated build speeds.

00:12:08.970 --> 00:12:11.940
So in 2.0, full build,
the first time you build,

00:12:11.940 --> 00:12:14.610
will be 2 to 2 and 1/2
times faster than it was.

00:12:14.610 --> 00:12:17.300
So if before, your build
was taking you a minute,

00:12:17.300 --> 00:12:27.230
now it's going to be
about 20.25 seconds.

00:12:27.230 --> 00:12:28.980
Now I know a lot of
you guys know too,

00:12:28.980 --> 00:12:30.730
after you do a full
build, then of course,

00:12:30.730 --> 00:12:31.896
you do an incremental build.

00:12:31.896 --> 00:12:34.000
That's when you do the
second set of changes,

00:12:34.000 --> 00:12:35.180
build a second time.

00:12:35.180 --> 00:12:36.920
Incremental build
speeds are going

00:12:36.920 --> 00:12:38.620
to be even faster than that.

00:12:38.620 --> 00:12:40.640
They're going to be in
the single digit seconds.

00:12:40.640 --> 00:12:43.056
And I'm going to come back to
that and talk about it more.

00:12:48.650 --> 00:12:51.670
So the next thing I want to
talk about is the emulator.

00:12:51.670 --> 00:12:54.020
In the code, build, run
cycle, in order to iterate,

00:12:54.020 --> 00:12:57.400
you need to be able to quickly
see how the app looks as well.

00:12:57.400 --> 00:12:59.510
Now a lot of you guys
in the community talk

00:12:59.510 --> 00:13:01.690
to us about our emulators,
and here's what you said.

00:13:01.690 --> 00:13:03.220
They are not fast enough.

00:13:03.220 --> 00:13:04.590
They are not stable enough.

00:13:04.590 --> 00:13:07.830
We listened to you guys, and
the truth was, you were right.

00:13:07.830 --> 00:13:11.250
So we've made massive
improvements here in 2.0.

00:13:11.250 --> 00:13:13.440
We have made major changes.

00:13:13.440 --> 00:13:15.420
And let me just start
by talking about speed,

00:13:15.420 --> 00:13:18.100
because I fairly feel like
it's the most important.

00:13:18.100 --> 00:13:23.040
In 2.0, one of the
first things you'll find

00:13:23.040 --> 00:13:25.550
is that they are
significantly faster.

00:13:25.550 --> 00:13:29.044
We have ADB push speeds
that are five times faster

00:13:29.044 --> 00:13:31.210
for the emulator than they
are in a physical device.

00:13:31.210 --> 00:13:33.340
We've massively accelerated IO.

00:13:33.340 --> 00:13:36.900
We've massively accelerated CPU.

00:13:36.900 --> 00:13:39.690
So we're also adding SMP
support to take advantage

00:13:39.690 --> 00:13:41.990
of host multicore architecture.

00:13:41.990 --> 00:13:45.530
You will find overall that
the emulators are massively

00:13:45.530 --> 00:13:49.070
faster than they were before.

00:13:49.070 --> 00:13:51.250
We'd also say the emulators
continue to include

00:13:51.250 --> 00:13:52.170
Google Play services.

00:13:52.170 --> 00:13:54.750
So a ton of the developers
in the audience here today,

00:13:54.750 --> 00:13:56.950
and worldwide, use
Google Play services

00:13:56.950 --> 00:14:00.440
to get access to things like
AdMob, Maps, Authentication.

00:14:00.440 --> 00:14:03.180
And those will all be
present, just as you'd expect.

00:14:03.180 --> 00:14:05.460
Now in addition to significant
speed improvements,

00:14:05.460 --> 00:14:08.910
we also completely
rewrote the UI.

00:14:08.910 --> 00:14:12.070
So you'll see
major changes here.

00:14:12.070 --> 00:14:14.400
In 2.0, you'll have
screen rotation,

00:14:14.400 --> 00:14:17.800
screen shots, windows, zooming
of the emulator window.

00:14:17.800 --> 00:14:21.070
You'll be able to take an
APK and drag and drop it

00:14:21.070 --> 00:14:22.390
onto the emulator.

00:14:22.390 --> 00:14:24.900
I will say a personal
favorite of our engineering

00:14:24.900 --> 00:14:27.310
director and one that he
pushed really hard for.

00:14:27.310 --> 00:14:28.810
A couple of you
guys in the audience

00:14:28.810 --> 00:14:31.490
asked us for the ability to
grab the edge of the emulator

00:14:31.490 --> 00:14:33.480
and pull it down and
back to resize it.

00:14:33.480 --> 00:14:41.930
And you will also
find that in 2.0.

00:14:41.930 --> 00:14:42.747
So that's not all.

00:14:42.747 --> 00:14:44.580
You're going to find
you'll have the ability

00:14:44.580 --> 00:14:46.740
to emulate GPS location.

00:14:46.740 --> 00:14:48.772
So you can pass
in a single point.

00:14:48.772 --> 00:14:50.980
You can pass in a set of
points, like me walking over

00:14:50.980 --> 00:14:52.350
to the keynote today.

00:14:52.350 --> 00:14:54.390
You can emulate calls.

00:14:54.390 --> 00:14:55.650
You can emulate texts.

00:14:55.650 --> 00:14:56.950
You can emulate camera.

00:14:56.950 --> 00:14:58.314
You can emulate battery states.

00:14:58.314 --> 00:14:59.730
So you want to see
how your app is

00:14:59.730 --> 00:15:01.230
going to perform
when the battery is

00:15:01.230 --> 00:15:03.220
full or really drained.

00:15:03.220 --> 00:15:05.260
So overall, a very,
very significant

00:15:05.260 --> 00:15:06.940
set of changes in the emulator.

00:15:06.940 --> 00:15:09.620
Again, the reason why we
felt this was so critical

00:15:09.620 --> 00:15:12.194
is you have to be able to
iterate in your app and fast.

00:15:12.194 --> 00:15:14.360
And every minute that you're
sitting around-- you're

00:15:14.360 --> 00:15:15.300
waiting for builds.

00:15:15.300 --> 00:15:16.640
You're waiting for run speed.

00:15:16.640 --> 00:15:17.990
That's a minute wasted.

00:15:17.990 --> 00:15:21.820
So with 2.0, the IDE is designed
to help you stay constantly

00:15:21.820 --> 00:15:23.600
in the flow while you're coding.

00:15:23.600 --> 00:15:26.930
So you can iterate and try
things out on a single device.

00:15:26.930 --> 00:15:28.650
Now one of the things
Dave talked about

00:15:28.650 --> 00:15:32.510
is we have 1.4 billion
active users on Android.

00:15:32.510 --> 00:15:35.225
And so that means there's also
a ton of devices out there.

00:15:35.225 --> 00:15:36.850
And that was another
reason why we felt

00:15:36.850 --> 00:15:38.080
the emulator was so important.

00:15:38.080 --> 00:15:39.746
So you could test not
just on the device

00:15:39.746 --> 00:15:43.310
that you have next to you, but
across a multitude of devices.

00:15:43.310 --> 00:15:45.770
One of the things that
we hear from developers

00:15:45.770 --> 00:15:48.260
everywhere is that the
emulator is very important,

00:15:48.260 --> 00:15:50.090
but physical devices
are important as well.

00:15:50.090 --> 00:15:51.750
And that's why we
have decided to have

00:15:51.750 --> 00:15:55.030
world-class support for both.

00:15:55.030 --> 00:15:57.080
So let me talk about
some more changes.

00:15:57.080 --> 00:15:59.690
Android also has a
very important set

00:15:59.690 --> 00:16:03.640
of developers doing what I would
call graphics-intensive apps.

00:16:03.640 --> 00:16:06.940
So this would be things
like Maps, Games, video,

00:16:06.940 --> 00:16:07.920
things of this nature.

00:16:07.920 --> 00:16:10.330
We do a lot of it
at Google as well.

00:16:10.330 --> 00:16:12.710
And so, that's why
in 2.0, we're also

00:16:12.710 --> 00:16:15.800
including a very early
preview of our new GPU

00:16:15.800 --> 00:16:17.780
profiler and debugger.

00:16:17.780 --> 00:16:20.880
So one of the big problems with
graphics-intensive development

00:16:20.880 --> 00:16:24.000
is you'll see a scene,
and you get a problem.

00:16:24.000 --> 00:16:27.150
And you're not really sure
exactly what caused it.

00:16:27.150 --> 00:16:29.840
So one of the things you'll find
in the GPU Profiler is you're

00:16:29.840 --> 00:16:36.230
able to record and replay the
entire stream, frame by frame.

00:16:36.230 --> 00:16:38.680
So you can understand
and debug in the GL code.

00:16:38.680 --> 00:16:41.934
So now graphics developers
can save countless hours

00:16:41.934 --> 00:16:43.725
when debugging graphics
rendering problems.

00:16:46.790 --> 00:16:51.020
Another thing I want to talk
about is core IDE improvements.

00:16:51.020 --> 00:16:53.330
Android is built
on top of IntelliJ.

00:16:53.330 --> 00:16:55.990
And being built on
top of IntelliJ means,

00:16:55.990 --> 00:16:59.680
as fast as Android Studio
itself has been innovating,

00:16:59.680 --> 00:17:04.300
IntelliJ's own incredibly rapid
pace propels us even faster

00:17:04.300 --> 00:17:05.720
all the time.

00:17:05.720 --> 00:17:08.230
Now IntelliJ released
their newest version,

00:17:08.230 --> 00:17:10.750
15, just about three weeks ago.

00:17:10.750 --> 00:17:14.705
And Android Studio 2.0 already
fully integrates IntelliJ 15.

00:17:14.705 --> 00:17:16.246
You'll see that in
the Canary builds.

00:17:23.740 --> 00:17:26.319
So there's a ton that
comes with IntelliJ 15.

00:17:26.319 --> 00:17:28.860
One of the features I thought
I would touch on in particular,

00:17:28.860 --> 00:17:32.089
because we care about
it so much, is testing.

00:17:32.089 --> 00:17:33.880
Another thing we hear
a lot from developers

00:17:33.880 --> 00:17:36.090
is how critical it is
to be able to build

00:17:36.090 --> 00:17:38.180
high-quality apps by default.

00:17:38.180 --> 00:17:41.280
IntelliJ includes a wide range
of new features for testing,

00:17:41.280 --> 00:17:42.820
including a Test
Runner tool window.

00:17:42.820 --> 00:17:46.250
It's got inline statistics
and test result history.

00:17:46.250 --> 00:17:49.220
You can right-click and
then execute a test.

00:17:49.220 --> 00:17:51.040
And we've also added
on that, in Studio

00:17:51.040 --> 00:17:53.886
itself with a couple of key
asks from the community.

00:17:53.886 --> 00:17:55.510
One of the things
you guys asked us for

00:17:55.510 --> 00:17:57.470
is to be able to run
all test types together.

00:17:57.470 --> 00:17:58.928
As you guys know,
in Android Studio

00:17:58.928 --> 00:18:02.210
you can have two test types,
unit tests and Android tests.

00:18:02.210 --> 00:18:05.230
And now, you can have both of
those active at the same time.

00:18:05.230 --> 00:18:13.830
One of the things
that means too,

00:18:13.830 --> 00:18:16.080
is you can now refactor
seamlessly across your code.

00:18:16.080 --> 00:18:18.060
So you can make a change
in app code, refactor it.

00:18:18.060 --> 00:18:19.434
It will go across
all test types.

00:18:23.340 --> 00:18:23.950
All right.

00:18:23.950 --> 00:18:26.800
So I have talked so
far about coding.

00:18:26.800 --> 00:18:28.970
Talked about building,
and talked about IntelliJ,

00:18:28.970 --> 00:18:30.511
and everything that
we got from them.

00:18:30.511 --> 00:18:32.690
We've talked about
debugging, testing.

00:18:32.690 --> 00:18:34.390
I want to touch
on one final area,

00:18:34.390 --> 00:18:37.840
and that's deployment and
making your app discoverable.

00:18:37.840 --> 00:18:39.680
One of the things
that we did in 2.0

00:18:39.680 --> 00:18:42.360
was work very closely with
the Google Search team.

00:18:42.360 --> 00:18:44.970
They have a wonderful
feature called deep linking,

00:18:44.970 --> 00:18:47.330
which allows you to expose
your app so that it can

00:18:47.330 --> 00:18:48.940
be found in the Google search.

00:18:48.940 --> 00:18:50.580
But one of the key
questions is, OK.

00:18:50.580 --> 00:18:52.400
How do I get this
set up in my app?

00:18:52.400 --> 00:18:55.324
So we've added support for
this in Android Studio 2.0.

00:18:55.324 --> 00:18:56.990
The first thing you'll
find is something

00:18:56.990 --> 00:18:58.260
called Intention Actions.

00:18:58.260 --> 00:19:01.250
So what this means is you
can go into Android Studio.

00:19:01.250 --> 00:19:02.840
And as you're in
your code, it will

00:19:02.840 --> 00:19:06.180
suggest to you inline where you
need to put code and actually

00:19:06.180 --> 00:19:08.330
expand and show you
how to configure it.

00:19:08.330 --> 00:19:10.820
Now the second thing we
have is static analysis.

00:19:10.820 --> 00:19:13.610
So I'm sure, you know, none of
you guys in the audience, much

00:19:13.610 --> 00:19:15.610
like Dave Burke, have
ever made coding mistakes.

00:19:15.610 --> 00:19:18.560
But I will be honest and
say, I make them frequently.

00:19:18.560 --> 00:19:21.650
So the static analysis
we have in 2.0

00:19:21.650 --> 00:19:25.280
will check and make sure that
your deep links are configured

00:19:25.280 --> 00:19:27.640
correctly.

00:19:27.640 --> 00:19:31.370
The third thing we've
added is real-time testing

00:19:31.370 --> 00:19:34.190
so that you can actually
see whether Google can index

00:19:34.190 --> 00:19:36.000
and render the app
pages correctly.

00:19:46.250 --> 00:19:49.200
So with Android
Studio 2.0, we know

00:19:49.200 --> 00:19:51.680
we still have a couple
of users out there who

00:19:51.680 --> 00:19:52.924
are using our Eclipse tools.

00:19:52.924 --> 00:19:54.340
And we wanted to
say to you, there

00:19:54.340 --> 00:19:56.220
is really no better
time than now

00:19:56.220 --> 00:19:57.641
to switch to Android Studio.

00:20:00.350 --> 00:20:02.550
It is a massive
speed improvement,

00:20:02.550 --> 00:20:04.430
and we believe it
will significantly

00:20:04.430 --> 00:20:06.870
accelerate your development.

00:20:06.870 --> 00:20:08.785
A couple other things we'd say.

00:20:08.785 --> 00:20:12.480
Android Studio remains
open-source, free to all.

00:20:12.480 --> 00:20:15.440
And there's just one more thing
we had wanted to talk about

00:20:15.440 --> 00:20:17.130
while we were here.

00:20:17.130 --> 00:20:19.250
With development,
I feel like one

00:20:19.250 --> 00:20:22.290
of the most amazing feelings
is when you're in the flow.

00:20:22.290 --> 00:20:23.060
You're relaxed.

00:20:23.060 --> 00:20:23.790
You're coding.

00:20:23.790 --> 00:20:26.340
There's this timelessness where
you're incredibly productive.

00:20:26.340 --> 00:20:29.830
And so it was in the interest
of enabling developers

00:20:29.830 --> 00:20:31.610
to code like that,
that we created

00:20:31.610 --> 00:20:37.000
a new feature that is called
Android Studio Instant Run.

00:20:37.000 --> 00:20:40.280
Instant Run is designed so
that you can make changes

00:20:40.280 --> 00:20:42.860
in code or resources,
and they'll

00:20:42.860 --> 00:20:45.980
update into your live app
near, more or less, instantly.

00:20:57.400 --> 00:21:00.730
So as you're coding, you
can press the Run button,

00:21:00.730 --> 00:21:05.505
and your changes will deploy
live into the running app.

00:21:05.505 --> 00:21:07.630
And you're going to find
this is going to take you,

00:21:07.630 --> 00:21:10.810
on an average Android app,
about one to two seconds.

00:21:18.010 --> 00:21:20.270
Now we are still expanding
the set of code changes

00:21:20.270 --> 00:21:22.670
that will be covered
in Instant Run.

00:21:22.670 --> 00:21:25.430
You will find, for those of you
who watch the Canaries closely,

00:21:25.430 --> 00:21:27.388
and I know that's a lot
of people in this room,

00:21:27.388 --> 00:21:29.790
it'll expand very rapidly
over the coming weeks.

00:21:29.790 --> 00:21:31.220
But there's a few things
that we felt like were

00:21:31.220 --> 00:21:32.428
important from the beginning.

00:21:32.428 --> 00:21:34.640
We know you guys are
using a ton of emulators.

00:21:34.640 --> 00:21:35.970
You're using a ton of devices.

00:21:35.970 --> 00:21:37.800
And people out there
are running phones

00:21:37.800 --> 00:21:39.810
with a lot of different
versions of Android.

00:21:39.810 --> 00:21:43.060
So I'll say a couple things
about it from the outset.

00:21:43.060 --> 00:21:48.220
First, Instant Run will work on
virtually every emulator in use

00:21:48.220 --> 00:21:49.540
today.

00:21:49.540 --> 00:21:52.740
Second, Instant Run
will work on virtually

00:21:52.740 --> 00:21:54.750
every current physical device.

00:21:54.750 --> 00:21:58.780
And third, it will work
on virtually every version

00:21:58.780 --> 00:22:01.590
of Android that has
significant use today.

00:22:01.590 --> 00:22:04.968
That is all the way back to Ice
Cream Sandwich or API Level 15.

00:22:13.110 --> 00:22:16.120
The web really became
successful in the early days

00:22:16.120 --> 00:22:17.850
because you could edit HTML.

00:22:17.850 --> 00:22:20.580
You could see how it looked
on a browser right away.

00:22:20.580 --> 00:22:23.540
And now, our goal is to bring
a similar lightweight feel

00:22:23.540 --> 00:22:24.800
to mobile development.

00:22:24.800 --> 00:22:27.060
We're incredibly grateful
for all the feedback

00:22:27.060 --> 00:22:29.450
from our community that's
led us in this direction.

00:22:29.450 --> 00:22:31.619
We were talking about
the future beforehand,

00:22:31.619 --> 00:22:33.160
and we were talking
about Dave Burke.

00:22:33.160 --> 00:22:35.390
I think he's giving you
a cool overview of what

00:22:35.390 --> 00:22:37.310
the early days, the
hard days looked

00:22:37.310 --> 00:22:39.040
like for Android development.

00:22:39.040 --> 00:22:40.450
And we thought it
would be really

00:22:40.450 --> 00:22:43.280
neat to have Dave Burke come
back up on stage and demo

00:22:43.280 --> 00:22:45.550
for you Android
Studio 2.0 and Instant

00:22:45.550 --> 00:22:47.709
Run to get a feel for
the new, lightweight way

00:22:47.709 --> 00:22:48.750
to do mobile development.

00:22:48.750 --> 00:22:50.869
So with that, I'd like to
welcome Dave Burke back

00:22:50.869 --> 00:22:51.410
to the stage.

00:22:57.244 --> 00:22:58.160
DAVE BURKE: All right.

00:22:58.160 --> 00:23:00.751
So we'll switch to the
developer machine here.

00:23:00.751 --> 00:23:01.250
OK.

00:23:01.250 --> 00:23:02.010
Cool.

00:23:02.010 --> 00:23:04.610
So preview version of
the ID, live coding.

00:23:04.610 --> 00:23:08.180
What could possibly go wrong?

00:23:08.180 --> 00:23:08.680
All right.

00:23:08.680 --> 00:23:10.470
So what I've got here
is a video shield.

00:23:10.470 --> 00:23:11.480
This is a live tablet.

00:23:11.480 --> 00:23:12.860
Live physical tablet.

00:23:12.860 --> 00:23:15.480
We have it projecting a picture
in picture on top of here.

00:23:15.480 --> 00:23:18.330
I have the latest version
of Android Studio in 2.0.

00:23:18.330 --> 00:23:21.130
I have an app that Romain
Guy and Matthew [INAUDIBLE]

00:23:21.130 --> 00:23:22.680
helped me create.

00:23:22.680 --> 00:23:23.630
It's a chess game.

00:23:23.630 --> 00:23:26.620
It's got some cool
physically-based lighting.

00:23:26.620 --> 00:23:28.967
And what I want to do is
show you a couple of things.

00:23:28.967 --> 00:23:30.550
I want to show you
changing resources.

00:23:30.550 --> 00:23:32.560
I want to show you
change in code.

00:23:32.560 --> 00:23:35.037
So if I change a resource
like an XML layout,

00:23:35.037 --> 00:23:37.120
what we're going to do--
we call that a warm swap.

00:23:37.120 --> 00:23:38.710
We're going to upload
the new resources.

00:23:38.710 --> 00:23:40.540
We're going to invalidate
the frame caches,

00:23:40.540 --> 00:23:42.640
and then we'll
restart the activity.

00:23:42.640 --> 00:23:44.890
But before I do that, let
me just get the app running.

00:23:44.890 --> 00:23:46.760
So I'm going to go Control-R.

00:23:46.760 --> 00:23:49.290
So the IDE is building
the app, compiling it.

00:23:49.290 --> 00:23:50.506
It's ADB installing it.

00:23:50.506 --> 00:23:52.130
The package manager
is doing its thing.

00:23:52.130 --> 00:23:53.624
Its dexopting.

00:23:53.624 --> 00:23:55.040
And now it's going
to run the app.

00:23:55.040 --> 00:23:57.090
So it takes a bit of time.

00:23:57.090 --> 00:23:58.710
Previously in an old
world, every time

00:23:58.710 --> 00:24:01.168
you made a code change, you
had to go through that process.

00:24:01.168 --> 00:24:03.520
So here's how it looks
with Android Studio 2.0.

00:24:03.520 --> 00:24:06.130
So let's say I want to change
the background of the settings

00:24:06.130 --> 00:24:06.630
screen.

00:24:06.630 --> 00:24:08.920
So I go to my XML layout.

00:24:08.920 --> 00:24:10.230
And I want to add a background.

00:24:10.230 --> 00:24:12.563
So I've got a background
bitmap that I want to add here.

00:24:12.563 --> 00:24:16.780
So I can just go
android:background, like so.

00:24:16.780 --> 00:24:18.376
If I can type.

00:24:18.376 --> 00:24:19.062
Like that.

00:24:19.062 --> 00:24:20.520
And then, I have
a drawable set up.

00:24:20.520 --> 00:24:26.220
This is a preview
of Android Studio.

00:24:26.220 --> 00:24:27.310
All right.

00:24:27.310 --> 00:24:28.060
So we're all good.

00:24:28.060 --> 00:24:28.560
OK.

00:24:28.560 --> 00:24:30.480
So what's cool here
is that to run it,

00:24:30.480 --> 00:24:33.122
I just go Control-R. It
will send up the new-- OK.

00:24:33.122 --> 00:24:34.872
It's going to restart
because I busted it.

00:24:34.872 --> 00:24:36.250
So we'll change
this in a second.

00:24:36.250 --> 00:24:38.970
Let me let this
start again here.

00:24:38.970 --> 00:24:39.510
OK.

00:24:39.510 --> 00:24:40.150
So you can see.

00:24:40.150 --> 00:24:41.608
Normally what would
happen there is

00:24:41.608 --> 00:24:43.920
that would just restart the
activity, which would not

00:24:43.920 --> 00:24:44.980
cause a reinstall.

00:24:44.980 --> 00:24:45.880
So it's the same
thing that happens

00:24:45.880 --> 00:24:47.112
when you rotate the screen.

00:24:47.112 --> 00:24:48.320
I'll change another resource.

00:24:48.320 --> 00:24:50.710
This time I won't mess it up,
so you can actually see it work.

00:24:50.710 --> 00:24:52.870
So there's a, you can see
it says "New button" there.

00:24:52.870 --> 00:24:53.870
I can change the string.

00:24:53.870 --> 00:24:55.820
And I can say, "New
game," like this.

00:24:55.820 --> 00:24:58.206
Dot dot dot, Control-R. OK.

00:24:58.206 --> 00:24:59.830
You know what, I'm
going to reset this.

00:24:59.830 --> 00:25:01.930
Hold on.

00:25:01.930 --> 00:25:04.900
One of the advantages of
a livestream, by the way,

00:25:04.900 --> 00:25:08.250
is you can edit it after the
fact and remove the thing.

00:25:08.250 --> 00:25:11.560
So what I'm going to do is I'm
going to uninstall this app.

00:25:11.560 --> 00:25:14.104
OK.

00:25:14.104 --> 00:25:16.270
So I'm showing you what
real development looks like.

00:25:16.270 --> 00:25:18.055
This is good.

00:25:18.055 --> 00:25:19.780
So I'll leave "New game" there.

00:25:19.780 --> 00:25:20.280
Right?

00:25:20.280 --> 00:25:25.702
And I'll go back here, and I
will remove this line here.

00:25:25.702 --> 00:25:26.610
Like that.

00:25:26.610 --> 00:25:29.707
And then we'll do a
normal building compile.

00:25:29.707 --> 00:25:31.165
So it's going to
build and compile.

00:25:31.165 --> 00:25:32.430
And it's going to install it.

00:25:32.430 --> 00:25:35.610
It'll take a couple of seconds.

00:25:35.610 --> 00:25:36.870
OK.

00:25:36.870 --> 00:25:37.810
Now it's running.

00:25:37.810 --> 00:25:40.345
So I add this line back in here.

00:25:40.345 --> 00:25:41.650
Like so.

00:25:41.650 --> 00:25:44.960
And then I just do my
Control-R. And what it'll do

00:25:44.960 --> 00:25:46.550
is, it'll just
restart the activity.

00:25:46.550 --> 00:25:49.290
So you'll see a little flicker,
and it just restarts like that.

00:25:49.290 --> 00:25:49.790
OK.

00:25:49.790 --> 00:25:50.810
Thank you.

00:25:54.730 --> 00:25:57.660
Now what's more interesting--
so we call that a warm swap.

00:25:57.660 --> 00:25:58.160
Right?

00:25:58.160 --> 00:26:00.076
So it's the same thing
as rotating the screen.

00:26:00.076 --> 00:26:01.880
Much more interesting
is when you want

00:26:01.880 --> 00:26:04.130
to do what we call a hot swap.

00:26:04.130 --> 00:26:06.660
And the way this works is that
we're instrumenting the code.

00:26:06.660 --> 00:26:08.720
And every time you
compile, we run an analyzer

00:26:08.720 --> 00:26:11.430
and see if we could hot
swap the code at run time.

00:26:11.430 --> 00:26:13.820
And so we can change
method implementations

00:26:13.820 --> 00:26:15.390
of a class on the fly.

00:26:15.390 --> 00:26:18.348
So if I go into the
chess activity up here,

00:26:18.348 --> 00:26:20.574
and so we have this
on draw frame call.

00:26:20.574 --> 00:26:21.990
So this is getting
called 60 times

00:26:21.990 --> 00:26:24.380
a second to update the screen.

00:26:24.380 --> 00:26:28.230
Now if I change something like,
let's change these values here.

00:26:28.230 --> 00:26:29.930
And I change this value here.

00:26:29.930 --> 00:26:33.970
So what this will do is it will
turn the chessboard into a 3D

00:26:33.970 --> 00:26:35.910
animated scene.

00:26:35.910 --> 00:26:38.557
So I just go Control-R. The
code dynamically changes,

00:26:38.557 --> 00:26:39.140
and then boom.

00:26:39.140 --> 00:26:40.681
Instantly, it just
updates like that.

00:26:47.430 --> 00:26:50.610
So it turns out that I work in
a company full of overachievers

00:26:50.610 --> 00:26:51.960
who are very good at chess.

00:26:51.960 --> 00:26:53.470
And I needed an advantage.

00:26:53.470 --> 00:26:56.140
So what I'm going to do is
try to find an advantage.

00:26:56.140 --> 00:26:57.940
Now the first thing,
anybody who watches

00:26:57.940 --> 00:27:00.273
rugby has ever seen the All
Blacks play from New Zealand

00:27:00.273 --> 00:27:00.860
will know.

00:27:00.860 --> 00:27:03.239
The trick to winning is to
intimidate your opponent.

00:27:03.239 --> 00:27:04.780
So what I'm going
to do is, I'm going

00:27:04.780 --> 00:27:06.990
to go and try to make
my chess pieces larger.

00:27:06.990 --> 00:27:10.090
So I get the vertex
mesh for my piece.

00:27:10.090 --> 00:27:14.520
My pieces are going to
be Player 1, I suppose.

00:27:14.520 --> 00:27:15.160
So do that.

00:27:15.160 --> 00:27:15.940
Boom.

00:27:15.940 --> 00:27:19.120
And then what I'll do is I'll
iterate over each of my pieces,

00:27:19.120 --> 00:27:20.110
like this.

00:27:20.110 --> 00:27:23.300
So P1 size, get all the
chess pieces, like that.

00:27:23.300 --> 00:27:26.590
And then what we'll do is we'll
get each of my pieces, one

00:27:26.590 --> 00:27:28.270
by one, the index i.

00:27:28.270 --> 00:27:30.810
And then I have a convenience
method to set the scale.

00:27:30.810 --> 00:27:32.476
And then I'll set
that to, I don't know,

00:27:32.476 --> 00:27:35.040
1.75 seems like a good
intimidation factor.

00:27:35.040 --> 00:27:35.540
Like that.

00:27:35.540 --> 00:27:37.297
And then Control-R, boom.

00:27:37.297 --> 00:27:38.880
And the gold pieces
jump up like that.

00:27:45.920 --> 00:27:47.560
So also to get an
extra advantage,

00:27:47.560 --> 00:27:49.559
I think I'll make my
opponents a little smaller.

00:27:49.559 --> 00:27:51.460
So I can just go,
Command-D, like this.

00:27:51.460 --> 00:27:53.501
By the way, if you have
not started using Studio,

00:27:53.501 --> 00:27:55.932
the autocomplete in this
IDE is kind of amazing.

00:27:55.932 --> 00:27:56.640
Like, watch this.

00:27:56.640 --> 00:27:57.670
Boom, boom.

00:27:57.670 --> 00:27:58.550
It's super fast.

00:27:58.550 --> 00:28:01.420
So let's make my opponents 0.75.

00:28:01.420 --> 00:28:03.580
And of course, that's Player 2.

00:28:03.580 --> 00:28:04.680
Control-R, boom.

00:28:04.680 --> 00:28:06.382
And all the black
guys get small.

00:28:06.382 --> 00:28:07.660
All right.

00:28:07.660 --> 00:28:11.560
Now it turns out, he's a
squirrely little opponent.

00:28:11.560 --> 00:28:13.040
Won't be easily intimidated.

00:28:13.040 --> 00:28:16.080
I need to have a more
meaningful material advantage.

00:28:16.080 --> 00:28:18.310
So what I'm going to do
is get my pieces again.

00:28:18.310 --> 00:28:19.660
So I'm Player 1.

00:28:19.660 --> 00:28:23.140
And then I'm going to
set-- oops, a little typo.

00:28:23.140 --> 00:28:26.210
So get the pieces, so i.

00:28:26.210 --> 00:28:28.610
And then what I'm going
to do is set the mesh.

00:28:28.610 --> 00:28:30.110
And then what I'm
going to do is I'm

00:28:30.110 --> 00:28:32.660
going to get the vertex mesh
for some more powerful pieces.

00:28:32.660 --> 00:28:36.720
So I guess, getMesh, and
then queen would be good.

00:28:36.720 --> 00:28:39.350
And then I like the gold colors,
so we'll stick with that.

00:28:39.350 --> 00:28:43.300
And then, hit semicolon there,
and then Control-R. Boom.

00:28:43.300 --> 00:28:45.520
I am now going to win this game.

00:28:45.520 --> 00:28:46.264
All right.

00:28:46.264 --> 00:28:47.180
So that's Instant Run.

00:28:47.180 --> 00:28:48.380
It's pretty awesome.

00:28:48.380 --> 00:28:50.130
And that's available
in the Canary channel

00:28:50.130 --> 00:28:51.629
this morning, so
you can try it out.

00:28:51.629 --> 00:28:52.753
It's a preview build.

00:29:01.940 --> 00:29:03.100
OK.

00:29:03.100 --> 00:29:06.239
So we have a packed
set of days here

00:29:06.239 --> 00:29:07.530
at the Computer History Museum.

00:29:07.530 --> 00:29:08.946
If you're on the
livestream, we've

00:29:08.946 --> 00:29:11.560
got 15 more hours of content.

00:29:11.560 --> 00:29:14.660
On day one, we're going to
focus on framework skills.

00:29:14.660 --> 00:29:17.400
Again, what's amazing here is
we have the Android engineering

00:29:17.400 --> 00:29:19.270
team who built
these features here.

00:29:19.270 --> 00:29:21.740
So you can learn so much
from just talking to them.

00:29:21.740 --> 00:29:23.990
They're a friendly
bunch, mostly.

00:29:23.990 --> 00:29:26.240
Especially after lunch, when
they've had their lunch--

00:29:26.240 --> 00:29:28.440
b before lunch, not so much.

00:29:28.440 --> 00:29:30.960
Day two, we're going to focus
on tooling and performance.

00:29:30.960 --> 00:29:33.126
We're going to talk about
some of the newer features

00:29:33.126 --> 00:29:34.760
that we've added,
like data binding.

00:29:34.760 --> 00:29:37.160
We'll talk about some of the
Android testing frameworks.

00:29:37.160 --> 00:29:39.590
The new Doze feature
and much more.

00:29:39.590 --> 00:29:41.510
We also have the
self-paced tutorials

00:29:41.510 --> 00:29:44.510
outside on lots of
Android topics, everything

00:29:44.510 --> 00:29:48.320
from performance to writing
watch faces for Android Wear.

00:29:48.320 --> 00:29:51.210
We'll also make those available
to people online later today,

00:29:51.210 --> 00:29:52.571
so you can try them at home.

00:29:52.571 --> 00:29:54.320
So with that, I just
want to say thank you

00:29:54.320 --> 00:29:58.490
so much for your time, and
enjoy the rest of the summit.

