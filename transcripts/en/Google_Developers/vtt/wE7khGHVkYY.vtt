WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.353
[MUSIC PLAYING]

00:00:03.937 --> 00:00:06.270
MARTIN AGUINIS: I'm Martin
Aguinis from the Flutter team

00:00:06.270 --> 00:00:08.970
here at Google and this is
the first video in a series

00:00:08.970 --> 00:00:10.320
about Flutter widgets.

00:00:10.320 --> 00:00:13.230
This series will cover stateless
widgets, stateful widgets,

00:00:13.230 --> 00:00:15.300
inherited widgets, and keys.

00:00:15.300 --> 00:00:17.940
Today, I'm going to show
you what Flutter widget is

00:00:17.940 --> 00:00:21.120
and how to put stateless widgets
to work in a Flutter app.

00:00:21.120 --> 00:00:22.740
If you haven't used
Flutter before,

00:00:22.740 --> 00:00:24.710
it's Google's
mobile app SDK that

00:00:24.710 --> 00:00:28.030
builds native iOS and Android
apps from a single code base.

00:00:28.030 --> 00:00:29.520
It's also super
fun to code with.

00:00:29.520 --> 00:00:31.110
So let's jump right in.

00:00:31.110 --> 00:00:33.960
To keep things quick, I'm
starting with a basic app here.

00:00:33.960 --> 00:00:36.390
It has a Scaffold
widget, an AppBar widget,

00:00:36.390 --> 00:00:38.460
and a couple Text
widgets that display info

00:00:38.460 --> 00:00:40.830
about my yellow Labrador, Rocky.

00:00:40.830 --> 00:00:43.830
Widgets are the basic building
blocks of a Flutter app.

00:00:43.830 --> 00:00:45.900
Each one is an
immutable declaration

00:00:45.900 --> 00:00:47.940
of part of user interface.

00:00:47.940 --> 00:00:49.650
And they can do a lot of things.

00:00:49.650 --> 00:00:52.840
There are structural elements
like a button or menu,

00:00:52.840 --> 00:00:55.380
stylistic elements that
propagate a font or color

00:00:55.380 --> 00:00:59.410
scheme, layout-related widgets
like padding, and much more.

00:00:59.410 --> 00:01:02.340
You can also compose new widgets
out of existing ones too.

00:01:02.340 --> 00:01:04.410
So the combinations are endless.

00:01:04.410 --> 00:01:07.020
Let me hop into an editor,
and I'll show you what I mean.

00:01:07.020 --> 00:01:09.780
Say I wanted a background
color on my dog's name.

00:01:09.780 --> 00:01:11.580
I can do that by
wrapping the text

00:01:11.580 --> 00:01:15.255
widget with a decorated box.

00:01:15.255 --> 00:01:18.702
And now, my text widget
has a background color.

00:01:18.702 --> 00:01:20.960
Maybe I'd like a little
padding in between the edge

00:01:20.960 --> 00:01:23.382
of the color and my text though.

00:01:23.382 --> 00:01:28.710
I can do that by adding a
padding widget in between them.

00:01:28.710 --> 00:01:30.490
I'll give it eight
logical pixels

00:01:30.490 --> 00:01:31.900
of padding all the way around.

00:01:36.211 --> 00:01:38.780
And now, I've got a
little bit of padding.

00:01:38.780 --> 00:01:40.580
This process of putting
widgets together

00:01:40.580 --> 00:01:42.310
is what we call composition.

00:01:42.310 --> 00:01:44.630
I'm composing my
interface by combining

00:01:44.630 --> 00:01:46.880
a bunch of simple
widgets, each of which

00:01:46.880 --> 00:01:48.970
handle one particular job.

00:01:48.970 --> 00:01:53.610
Padding pads things, Decorated
Box decorates a box, and so on.

00:01:53.610 --> 00:01:55.970
Now, let's say I go
to the animal shelter,

00:01:55.970 --> 00:01:58.430
and I need a couple more
yellow Labs that I cannot live

00:01:58.430 --> 00:01:59.240
without.

00:01:59.240 --> 00:02:02.060
I can add a column widget
inside the center widget

00:02:02.060 --> 00:02:03.740
and then make some
more of these names.

00:02:14.586 --> 00:02:17.327
I can even use a
widget called SizedBox

00:02:17.327 --> 00:02:19.160
to put a little blank
space in between them.

00:02:23.720 --> 00:02:27.408
That gets me
something like this.

00:02:27.408 --> 00:02:30.420
But you know, I've got
a lot of repeated code

00:02:30.420 --> 00:02:32.670
here in these three named boxes.

00:02:32.670 --> 00:02:34.170
Wouldn't it be great
if I could make

00:02:34.170 --> 00:02:36.180
my own widget that
just took a string

00:02:36.180 --> 00:02:38.280
and handled the details for me?

00:02:38.280 --> 00:02:40.130
Well, I can.

00:02:40.130 --> 00:02:44.410
I'll make a stateless
widget and call it Dog Name.

00:02:44.410 --> 00:02:46.240
A stateless widget
is a widget that's

00:02:46.240 --> 00:02:49.450
composed of children, which
is why it has a build method

00:02:49.450 --> 00:02:52.960
and does not have any mutable
state that it needs to track.

00:02:52.960 --> 00:02:55.660
When I say mutable state,
I mean any properties

00:02:55.660 --> 00:02:57.040
that will change over time--

00:02:57.040 --> 00:02:59.140
like a text box
would have a string

00:02:59.140 --> 00:03:00.970
that the user
updates, for example.

00:03:00.970 --> 00:03:05.620
Or a widget that's animated
might have values that change.

00:03:05.620 --> 00:03:07.240
This one doesn't
have any of that.

00:03:07.240 --> 00:03:10.450
It just needs a string for
a name which won't change.

00:03:10.450 --> 00:03:12.610
So stateless widget
is a perfect fit.

00:03:12.610 --> 00:03:14.770
I can even make
this string final.

00:03:14.770 --> 00:03:17.240
I can take that string
in via the constructor.

00:03:17.240 --> 00:03:19.270
And because all the
properties are final,

00:03:19.270 --> 00:03:22.190
I can mark this a
const constructor.

00:03:22.190 --> 00:03:24.250
Now, I just need to
fill in the build method

00:03:24.250 --> 00:03:26.530
with the same widgets
I was using above.

00:03:26.530 --> 00:03:29.052
Only this time, the text
widget will display the string

00:03:29.052 --> 00:03:30.385
from the widget's name property.

00:03:40.500 --> 00:03:42.560
Now, I can use this
widget to simplify

00:03:42.560 --> 00:03:43.850
the code I had to start with.

00:03:55.051 --> 00:03:58.440
As you can see, I still get
the same interface here.

00:03:58.440 --> 00:04:00.450
But my code's gotten
a lot tighter thanks

00:04:00.450 --> 00:04:03.540
to stateless widget and
Flutter's use of composition.

00:04:03.540 --> 00:04:05.520
So that's a little
example of how composing

00:04:05.520 --> 00:04:07.126
with stateless widgets works.

00:04:07.126 --> 00:04:09.000
At this point, you might
be asking yourself--

00:04:09.000 --> 00:04:12.210
you know, I see how
these build methods work,

00:04:12.210 --> 00:04:13.680
but when do they get called?

00:04:13.680 --> 00:04:17.490
Well, let's start with just
a single dog name widget.

00:04:17.490 --> 00:04:19.410
We tend to think of
apps built with Flutter

00:04:19.410 --> 00:04:22.720
as a tree of widgets, and
that's not a bad thing.

00:04:22.720 --> 00:04:24.720
But as mentioned at the
beginning of this video,

00:04:24.720 --> 00:04:27.060
widgets are really just
configurations for pieces

00:04:27.060 --> 00:04:28.600
of an app's UI.

00:04:28.600 --> 00:04:30.160
They're blueprints.

00:04:30.160 --> 00:04:32.940
So what are they
configurations for?

00:04:32.940 --> 00:04:34.110
Elements.

00:04:34.110 --> 00:04:36.480
An element is a widget
that's been made real

00:04:36.480 --> 00:04:38.230
and mounted on screen.

00:04:38.230 --> 00:04:40.170
And it's the element
tree that represents

00:04:40.170 --> 00:04:41.970
what's actually
displaying on your device

00:04:41.970 --> 00:04:44.220
at any given moment.

00:04:44.220 --> 00:04:47.380
Each widget class has both a
corresponding element class

00:04:47.380 --> 00:04:49.960
and a method to
create an instance.

00:04:49.960 --> 00:04:53.866
Stateless widget, for example,
creates a stateless element.

00:04:53.866 --> 00:04:56.900
That createElement method
gets called when the widget

00:04:56.900 --> 00:04:58.670
is mounted to the tree.

00:04:58.670 --> 00:05:01.280
Flutter asks the
widget for an element

00:05:01.280 --> 00:05:03.965
and then pops that
element onto the element

00:05:03.965 --> 00:05:06.810
tree with a reference to
the widget that created it.

00:05:06.810 --> 00:05:09.490
Stateful element
then says, hey, I

00:05:09.490 --> 00:05:11.410
wonder if I should
have any children

00:05:11.410 --> 00:05:13.780
and calls the
widget's Build method.

00:05:13.780 --> 00:05:17.240
In the case of my app,
it gets quite a few.

00:05:17.240 --> 00:05:19.940
These widgets then create
their own elements,

00:05:19.940 --> 00:05:22.800
and they're mounted on
the element tree as well.

00:05:22.800 --> 00:05:24.890
So my app now has two trees--

00:05:24.890 --> 00:05:27.710
one that represents what's
actually on the screen,

00:05:27.710 --> 00:05:30.800
the elements, and one that
holds the blueprints they

00:05:30.800 --> 00:05:33.080
were made from, the widgets.

00:05:33.080 --> 00:05:34.790
Now, you might be
wondering, what

00:05:34.790 --> 00:05:37.490
starts the process of building
and creating elements?

00:05:37.490 --> 00:05:40.010
What kicks off the whole
thing, so to speak?

00:05:40.010 --> 00:05:42.440
Let me show you something
you may not have noticed back

00:05:42.440 --> 00:05:43.850
in the beginning.

00:05:43.850 --> 00:05:46.850
The DogApp class, which
represents my entire app,

00:05:46.850 --> 00:05:50.706
is itself a stateless widget.

00:05:50.706 --> 00:05:54.182
I told you widgets can do
almost everything, right?

00:05:54.182 --> 00:05:56.200
If you take a look
at Main, which

00:05:56.200 --> 00:05:58.270
is the entry point
for the app, you

00:05:58.270 --> 00:06:00.720
can see it's calling
this runApp Method.

00:06:00.720 --> 00:06:02.650
And that's the starting point.

00:06:02.650 --> 00:06:04.990
RunApp takes a
widget and mounts it

00:06:04.990 --> 00:06:07.600
as the root element for the
app with the height and width

00:06:07.600 --> 00:06:10.900
constraints that match
the size of the screen.

00:06:10.900 --> 00:06:13.450
Flutter progresses through
all the build methods,

00:06:13.450 --> 00:06:16.120
creating widgets, using them
to make elements, and so

00:06:16.120 --> 00:06:18.880
on, until everything is
built, mounted on screen,

00:06:18.880 --> 00:06:21.100
and ready to be laid
out and rendered--

00:06:21.100 --> 00:06:22.870
which is how I got
my three little boxes

00:06:22.870 --> 00:06:24.520
with the names of yellow Labs.

00:06:24.520 --> 00:06:26.800
So that's an intro to composing
with stateless widgets

00:06:26.800 --> 00:06:28.330
and building an interface.

00:06:28.330 --> 00:06:29.980
One thing we didn't
talk about today

00:06:29.980 --> 00:06:33.251
is how to update or rebuild an
interface when data changes.

00:06:33.251 --> 00:06:35.500
That's because stateless
widgets don't really do that.

00:06:35.500 --> 00:06:38.860
They're stateless, so they can't
track data over time or trigger

00:06:38.860 --> 00:06:40.420
rebuilds on their own.

00:06:40.420 --> 00:06:42.897
Fortunately, Flutter also
has stateful widgets,

00:06:42.897 --> 00:06:44.980
which we'll tell you all
about in the next episode

00:06:44.980 --> 00:06:46.210
of this series.

00:06:46.210 --> 00:06:48.460
In the meantime, for more
information about Flutter

00:06:48.460 --> 00:06:51.610
and all of the many widgets,
head on to Flutter.io.

00:06:51.610 --> 00:06:54.060
[MUSIC PLAYING]

