WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.451
[MUSIC PLAYING]

00:00:04.928 --> 00:00:06.970
JESSE WILSON: Cash App is
the fastest and easiest

00:00:06.970 --> 00:00:08.140
way to send money.

00:00:08.140 --> 00:00:11.350
You get a personalized debit
card with great rewards,

00:00:11.350 --> 00:00:13.120
and you can buy
and sell bitcoin.

00:00:13.120 --> 00:00:15.700
So we launched in the
Play Store in 2013.

00:00:15.700 --> 00:00:18.790
And, as of December, we had
15 million active users.

00:00:18.790 --> 00:00:22.210
In 2015, one of my co-workers
wrote this document

00:00:22.210 --> 00:00:24.760
using Project Kotlin
in Android, and it got

00:00:24.760 --> 00:00:27.770
us all really excited about it.

00:00:27.770 --> 00:00:29.930
Ever since Android Studio
and the Android team

00:00:29.930 --> 00:00:32.390
have embraced Kotlin, things
have gotten even better.

00:00:32.390 --> 00:00:34.460
Whenever we want to
change a new feature,

00:00:34.460 --> 00:00:37.130
we always convert
it to Kotlin first.

00:00:37.130 --> 00:00:40.550
One of the things I really
like about Kotlin is lambdas.

00:00:40.550 --> 00:00:44.330
It really makes programming with
RxJava very easy and fluent.

00:00:44.330 --> 00:00:45.863
And it was something
that allowed

00:00:45.863 --> 00:00:48.030
us to take two different
technologies that we really

00:00:48.030 --> 00:00:49.460
liked and use them together.

00:00:49.460 --> 00:00:52.130
With Kotlin, we're able to
eliminate many builders,

00:00:52.130 --> 00:00:53.690
and we're able to
really cut down

00:00:53.690 --> 00:00:55.130
on the amount of code we write.

00:00:55.130 --> 00:00:58.260
In some cases, we
save 25% of our code.

00:00:58.260 --> 00:01:01.310
I really like Kotlin's
fantastic deprecation features.

00:01:01.310 --> 00:01:04.879
It allows us to evolve our API
as our business problems change

00:01:04.879 --> 00:01:07.250
and quickly update
all the call sites.

00:01:07.250 --> 00:01:09.710
We're constantly improving
our business model

00:01:09.710 --> 00:01:11.000
and solving more problems.

00:01:11.000 --> 00:01:13.910
And with that, we need to
migrate new code to the latest

00:01:13.910 --> 00:01:14.600
model.

00:01:14.600 --> 00:01:17.723
[INAUDIBLE] makes that
very fast and easy.

00:01:17.723 --> 00:01:19.640
One of the features we're
really excited about

00:01:19.640 --> 00:01:21.182
is Kotlin Multiplatform.

00:01:21.182 --> 00:01:23.390
It's going to give our
Android developers the ability

00:01:23.390 --> 00:01:26.120
to ship code onto iOS and our
iOS developers the ability

00:01:26.120 --> 00:01:27.620
to ship code onto Android.

00:01:27.620 --> 00:01:32.050
With sealed classes, we
can create loading, error,

00:01:32.050 --> 00:01:35.360
and content screens all
in a single sealed type,

00:01:35.360 --> 00:01:37.670
and this allows us to move
faster to make changes

00:01:37.670 --> 00:01:40.070
and to really understand
our data model

00:01:40.070 --> 00:01:42.336
in a stronger-type, safe way.

00:01:42.336 --> 00:01:44.950
On Cash, we ship the
app every two weeks.

00:01:44.950 --> 00:01:48.260
With Kotlin, we're able to
get more code with higher

00:01:48.260 --> 00:01:50.510
quality in every release.

00:01:50.510 --> 00:01:51.830
I think it's time to dive in.

00:01:51.830 --> 00:01:55.140
I think Kotlin is ready, and
I think that when you use it,

00:01:55.140 --> 00:01:57.170
you'll see just how
much it transforms

00:01:57.170 --> 00:01:58.750
how you think about your code.

00:01:58.750 --> 00:02:01.800
[MUSIC PLAYING]

