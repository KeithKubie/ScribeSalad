WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
This time, let's talk about some they called partitioning the input domain.

00:00:02.000 --> 00:00:07.000
So, we are going to start with some software under test and it’s going to have a set of possible inputs,

00:00:07.000 --> 00:00:12.000
an input domain, and of course, this input domain usually consist of so many possible test cases,

00:00:12.000 --> 00:00:14.000
but there’s no way we can possibly test them all.

00:00:14.000 --> 00:00:17.000
Speaking historically, well people would've often been interested in

00:00:17.000 --> 00:00:19.000
his ways to partition the input domain

00:00:19.000 --> 00:00:24.000
for piece of software under test into a number of different classes so that all of the points

00:00:24.000 --> 00:00:28.000
within each class are treated the same but the system under task.

00:00:28.000 --> 00:00:30.000
And while constructing these classes, we are allowed to look at the

00:00:30.000 --> 00:00:33.000
 implementation of the software, we are allowed to look at the specification, 

00:00:33.000 --> 00:00:36.000
we are allowed to use even our vague suspicions that we have.

00:00:36.000 --> 00:00:39.000
We can use anything we want in order to create these partitions.

00:00:39.000 --> 00:00:42.000
So, for example, we will have some subset of the input domain.

00:00:42.000 --> 00:00:45.000
For purposes of finding defects in the system under test,

00:00:45.000 --> 00:00:49.000
any point within that subdomain is as good as any other point within that subdomain. 

00:00:49.000 --> 00:00:54.000
So, basically, when testing the system, which pick an orbitary point, execute the system on it.

00:00:54.000 --> 00:00:58.000
Look at the output, and if it is acceptable, then we’re done testing that class of inputs.

00:00:58.000 --> 00:01:02.000
So, obviously, in practice, sometimes this partition is going to fail,

00:01:02.000 --> 00:01:07.000
and by fail, I mean that the thing that we thought was are class of inputs that are all equivalent

00:01:07.000 --> 00:01:11.000
with respect to the system under test isn’t really, and in fact, there is a different class

00:01:11.000 --> 00:01:16.000
hiding within this class which triggers a bug even though the original test case didn’t.

00:01:16.000 --> 00:01:19.000
And so, when that happens, we can sort of blame the partitioning scheme.

00:01:19.000 --> 00:01:21.000
We can say that we improperly partition the input.

00:01:21.000 --> 00:01:24.000
The problem with this sort of scheme is that we can always blame the partitioning,

00:01:24.000 --> 00:01:27.000
and the unfortunate fact is the original definition of this partitioning scheme

00:01:27.000 --> 00:01:30.000
didn’t really give us extremely good guidance in how to actually do the partitioning.

00:01:30.000 --> 00:01:32.000
All that settle as we had to do it. 

00:01:32.000 --> 00:01:35.000
In fact, this sort of scheme hasn’t worked out for large systems under test.

00:01:35.000 --> 00:01:38.000
We’re talking complex software like real time imbedded systems

00:01:38.000 --> 00:01:40.000
or operating systems or other things.

