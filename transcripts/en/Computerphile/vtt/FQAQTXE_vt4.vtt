WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.660
All a library is, is a series of code routines that you're going to reuse. So rather than actually

00:00:07.440 --> 00:00:09.800
writing it yourself, you'll go and get it from

00:00:10.420 --> 00:00:14.130
something that's already been written: a code library. So that's where the idea comes from,

00:00:14.130 --> 00:00:18.059
you're reusing blocks of code that have come from somewhere else.

00:00:21.430 --> 00:00:25.889
Implementationly, you can do that in many different ways. I mean the simplest thing is to think about a program;

00:00:25.900 --> 00:00:30.900
So if we think about a programming language like C, it's made up of a series of

00:00:31.570 --> 00:00:38.070
functions, so we might have a function called int comp, and--that doesn't actually have any parameters--and that's gonna

00:00:38.620 --> 00:00:43.890
call another function, and we'll call it printf, and it's gonna say " Hello Computerphile."

00:00:44.590 --> 00:00:51.059
So that's a thing, and this is calling another function, and when we compile a C program or any programming language

00:00:51.430 --> 00:00:53.520
the computer takes that code and

00:00:54.730 --> 00:00:56.730
converts it into

00:00:57.240 --> 00:01:00.160
machine code and then we execute that machine code version.

00:01:00.160 --> 00:01:04.660
Whether we do that instantaneously for interpreting or we compile it and execute it later or

00:01:05.020 --> 00:01:06.360
a mixture of the two--

00:01:06.360 --> 00:01:10.640
immaterial for this point of view. So, we've got to find this printf. Now we could just have that

00:01:11.460 --> 00:01:16.700
defined in the program straight after so it might actually say something like void printf

00:01:17.020 --> 00:01:22.200
whatever the implementation of printf is. There--that could be in our source file as well

00:01:22.200 --> 00:01:26.610
and then that might use something else and so they would all be and so we could put all the code we need for a

00:01:26.610 --> 00:01:27.520
program

00:01:27.520 --> 00:01:29.520
in one file

00:01:30.220 --> 00:01:36.059
We compile that; we convert it into one machine code program; and then we can use it.

00:01:36.909 --> 00:01:37.720
That's great--

00:01:37.720 --> 00:01:44.549
Except our program is going to get bigger and bigger and bigger and bigger and bigger, and as you write more and more programs,

00:01:44.549 --> 00:01:50.429
You'll find that actually every program is going to use printf, and every implementation of printf is going to be the same.

00:01:51.280 --> 00:01:56.339
So what you probably would do is you would start off writing a new program you say okay,

00:01:56.979 --> 00:01:58.979
I need a printf

00:01:59.259 --> 00:02:01.979
so you go and find a copy of the previous printf and

00:02:02.409 --> 00:02:06.539
you cut and paste the code from that one into your new one and

00:02:07.420 --> 00:02:10.649
You carry on using it and and so on. So you could just do that,

00:02:11.140 --> 00:02:15.059
but your programs are still going to be huge long things and finding things inside there is

00:02:15.790 --> 00:02:22.379
going to be complicated. So what you start to do is you say well, actually I'm going to collate various different routines there

00:02:22.380 --> 00:02:26.880
You know, I probably use printf a lot. I probably need something to read from the keyboard, scanf in C terms,

00:02:27.060 --> 00:02:30.740
I probably need something to do some file I/O and so on.

00:02:30.800 --> 00:02:33.760
Then you end up with a series of

00:02:33.760 --> 00:02:37.980
routines that you pretty much going to use in every program, and so you collate them together

00:02:38.600 --> 00:02:42.920
And then when you write a program you copy them all into that program

00:02:43.720 --> 00:02:45.060
So that's what you could do.

00:02:45.260 --> 00:02:50.880
- If some of these are used that often, why are they not embedded in the programming language itself?

00:02:50.890 --> 00:02:52.880
So why is it because you might not need them?

00:02:53.350 --> 00:02:57.239
So why does C not have a print command?

00:02:57.990 --> 00:03:02.639
Good question. You'd have to ask Brian Kernighan. That actually was probably around at the time there

00:03:02.740 --> 00:03:06.600
but I mean you could you could take a sort of a purist view of this is that

00:03:07.240 --> 00:03:13.109
It's printing part of the programming language, or is it something you want to do with the programming language? as C demonstrates

00:03:13.110 --> 00:03:17.220
you don't need a print command in your programming language because we can implement it

00:03:17.800 --> 00:03:18.940
separately

00:03:18.940 --> 00:03:23.550
So you can make an argument that you don't need it in there. You need your programming language to have

00:03:24.190 --> 00:03:30.959
The basis that you need to write everything you wanted to write. Okay, you want a library to do image recognition or something?

00:03:31.150 --> 00:03:35.520
Do you build that into your programming language? Where do you stop you've got a you've got a divide this somewhere?

00:03:35.770 --> 00:03:39.359
Let's keep the language is simple and then it makes it easier to write the compiler

00:03:39.459 --> 00:03:44.909
If it's easy to write the compiler, you generally know it's relatively easier to check the code works properly

00:03:45.160 --> 00:03:50.669
It's simpler and particularily if you think about the computers that C was developed on, 64k was a luxury

00:03:51.100 --> 00:03:57.929
Then it makes sense to keep these things small. So anyway, let's say we've gathered together some routines. We're using lots and lots

00:03:59.080 --> 00:04:04.169
Printf, scanf, file I/O,..  Those sort of things. We're going to use some of that. So we just collect them together

00:04:04.170 --> 00:04:06.420
and so what we do perhaps is

00:04:07.510 --> 00:04:08.920
rather than

00:04:08.920 --> 00:04:14.070
starting with a blank file and copying them in, we might actually put them all into a file and then

00:04:14.680 --> 00:04:20.280
when we want to start things, well we copy that file and just add our new code to the end of that and things

00:04:20.560 --> 00:04:23.280
Which is okay, but it seems the wrong way around to do it

00:04:23.280 --> 00:04:27.539
So what you do is you modify your language to actually have a way of including

00:04:28.100 --> 00:04:35.200
that file. Rather than having all your things in there, you start off saying "I want to include something", and then we'd write

00:04:35.930 --> 00:04:41.320
Comp routine as we had before and all that include things says in C

00:04:41.660 --> 00:04:45.670
particularly the hash in front of it is copy the contents of that file as

00:04:46.250 --> 00:04:48.250
If it was at this point in the program

00:04:48.800 --> 00:04:54.370
It literally is doing text substitution this way it's not doing anything more than copying the text from one

00:04:54.370 --> 00:04:59.830
So rather than reading the files from one father reads from the other file and then carries on it's like concatenate two files together

00:05:00.320 --> 00:05:05.499
You compiler just that and then it compiles the whole program. Now, that's not what C is doing.

00:05:06.170 --> 00:05:11.799
But that's the general idea behind a library. We've taken a set of routines that we use a lot and

00:05:12.590 --> 00:05:19.959
generally, we'll have them that do various useful things that are thematically similar and we've combined them together and

00:05:20.360 --> 00:05:25.030
we're just going to reuse them. So it's a reusable library of code in the same way

00:05:25.030 --> 00:05:28.080
we can have a library of books where you can go and find particular information and you get a

00:05:28.160 --> 00:05:33.480
specialist library , you might have a science library, a sort of fiction library and so on. And in the same way

00:05:33.980 --> 00:05:38.700
you might have a a sort of file I/O library, you might have a window GUI library,

00:05:38.710 --> 00:05:45.850
you might have an image recognition library, a networking library, and so on. You could just include the source file in there and

00:05:46.310 --> 00:05:49.179
let it work and let the compiler compile it, but actually

00:05:51.620 --> 00:05:56.560
if you think about it, we're taking the same a block of code and we're going to convert it to machine code and

00:05:57.230 --> 00:05:58.930
that's a deterministic process,

00:05:58.930 --> 00:06:03.280
it's going to produce the same machine code. Unless we use a different compiler or we change some of the options.

00:06:03.680 --> 00:06:07.959
And so actually the next stage of our sort of gathering libraries, is that you rather than

00:06:09.740 --> 00:06:16.690
combining them or linking them together at the source level, is you say, actually, "okay, I'm going to go and compile all these libraries to

00:06:17.300 --> 00:06:19.300
machine code ahead of time,

00:06:19.460 --> 00:06:24.310
then when I compile up my program, I'm going to compile the new bits I've just written and I'm going to link them together

00:06:24.980 --> 00:06:26.980
with the stuff I've already written."

00:06:27.200 --> 00:06:30.879
There's the library code there's the stuff that I've already compiled up using every other program

00:06:30.919 --> 00:06:37.449
So if we take something like printf which is in part of the standard c library, so it's a library thing in there.

00:06:38.180 --> 00:06:45.549
Generally, we will use a pre compiled version of that. We don't where we say hash include stdio.h. We're not including the source code for

00:06:47.509 --> 00:06:52.359
Printf we're including the source code for that tells how to call printf

00:06:52.360 --> 00:06:55.570
It just lets say you need to call it with these parameters and then it will work

00:06:55.610 --> 00:06:58.419
What actually happens is in another program called a linker

00:06:58.880 --> 00:07:03.070
which takes the binary that's not even produced for that the binary you've produced and

00:07:03.650 --> 00:07:06.370
combines them together into a single binary

00:07:07.100 --> 00:07:12.009
program in the right format that the operating system needs so that you can load them all in one go and

00:07:12.280 --> 00:07:16.180
run them and it calls printf to do the things and make it work.

00:07:16.300 --> 00:07:19.660
So that's all, that's all the library is, there's a collection of code routines

00:07:20.260 --> 00:07:22.320
that probably have been compiled

00:07:23.180 --> 00:07:26.590
and then linked together to form a complete static binary

00:07:27.139 --> 00:07:30.009
that can be used. Now you don't have to do it that way

00:07:30.620 --> 00:07:35.470
If we do it that way then we end up with one binary which has all the libraries copied into it.

00:07:35.479 --> 00:07:39.699
That's what's called static linking, because it's just one static file, everything you need is in there.

00:07:39.800 --> 00:07:43.630
You can also do what's called a dynamic linking which is a dynamic library

00:07:44.180 --> 00:07:49.449
where basically all you're doing there is you're delaying that linking process until the program's loaded and

00:07:49.849 --> 00:07:53.379
then the advantage of doing that is that you can choose which one you load in and

00:07:53.449 --> 00:07:58.269
as long as you know where to jump to and how to update things to make things connect together,

00:07:58.909 --> 00:08:00.280
then you can make it work.

00:08:00.280 --> 00:08:05.559
So, all the library really is, whether it's a static one or source library or dynamic code library is

00:08:05.840 --> 00:08:11.049
a collection of code routines that have been precompiled often that you then link into

00:08:11.780 --> 00:08:16.329
your program to make it work and it jumps into that other bit of code and then jumps back into yours.

00:08:16.330 --> 00:08:18.330
They don't even have to be written in the same language,

00:08:18.500 --> 00:08:21.789
so at some point inside printf, it'll probably call a bit of machine code

00:08:22.099 --> 00:08:26.439
To actually make the operating system print out these characters on screen and so on.

00:08:27.850 --> 00:08:29.909
See that this is also connected to the same

00:08:30.280 --> 00:08:35.969
the bottom left side of this switch, and the bottom left side of this switch, and the bottom left side of that one,

00:08:35.969 --> 00:08:37.870
and so on all the way

00:08:37.870 --> 00:08:44.280
along, we could follow this trace until we get to the last one. It actually changed to the top right for the last couple.

