WEBVTT
Kind: captions
Language: en

00:00:05.170 --> 00:00:06.280
&gt;&gt;Rich Hyndman: Hi there.

00:00:06.280 --> 00:00:08.770
Welcome to this talk on Google Play Services.

00:00:08.770 --> 00:00:10.020
My name is Richard Hyndman.

00:00:10.020 --> 00:00:12.280
I head up Android developer relations across
Europe.

00:00:12.280 --> 00:00:15.950
&gt;&gt;Reto Meier: And I'm Reto Meier, the Android
developer operations tech lead.

00:00:15.950 --> 00:00:16.990
&gt;&gt;Rich Hyndman: Excellent.

00:00:16.990 --> 00:00:20.090
And together we are clearly the Android developer
relations football team.

00:00:20.090 --> 00:00:23.020
We'll take on any other developer relations
team if they want it.

00:00:23.020 --> 00:00:24.740
&gt;&gt;Reto Meier: That is a challenge.

00:00:24.740 --> 00:00:30.240
&gt;&gt;Rich Hyndman: Let's start with what is Google
Play Services, a little bit of background

00:00:30.240 --> 00:00:32.410
to this.

00:00:32.410 --> 00:00:37.809
Google Play Services is a single library that
brings together all the APIs for Google services

00:00:37.809 --> 00:00:45.990
and play services into a single place on Android
devices, Android devices version 2.2 and above.

00:00:45.990 --> 00:00:50.250
This means that you can implement your applications
and we can implement our applications without

00:00:50.250 --> 00:00:53.960
having to worry about device support.

00:00:53.960 --> 00:00:59.810
This is the fifth major release we've done
of Google Play Services and we've become exceedingly

00:00:59.810 --> 00:01:00.879
efficient at it.

00:01:00.879 --> 00:01:04.729
If you hadn't all been on the same Wi-Fi network
over the last 24 hours I would be sure that

00:01:04.729 --> 00:01:06.860
you've all got it on your devices already.

00:01:06.860 --> 00:01:09.590
Maybe conference situations change that a
little bit.

00:01:09.590 --> 00:01:13.500
So Google Play Services is covering Google+,
Google+ sign-in, maps.

00:01:13.500 --> 00:01:16.729
Hopefully you have used it already.

00:01:16.729 --> 00:01:19.490
And OAuth.

00:01:19.490 --> 00:01:25.640
What I mean by authentication is that Google
Play Services provides a single authorization

00:01:25.640 --> 00:01:29.869
API for you to get access to all of our services
through the library.

00:01:29.869 --> 00:01:37.159
You and your users have a consistent way to
receive OAuth access tokens for Google services,

00:01:37.159 --> 00:01:41.969
but even more than that Google Play Services
is such a core part of our platform for the

00:01:41.969 --> 00:01:45.170
Google ecosystem that we need to make sure
it's always up to date.

00:01:45.170 --> 00:01:48.429
We need to make sure that we can do bug fixes
and updates outside of the Android framework

00:01:48.429 --> 00:01:50.850
releases and outside of the carrier release
schedule.

00:01:50.850 --> 00:01:53.049
So of course, it's updated through the Play
Store.

00:01:53.049 --> 00:01:56.689
Why is it on Android 2.2 and above?

00:01:56.689 --> 00:02:02.900
Android 2.2 and above is now 98.2 and growing
percentage of the active Android users that

00:02:02.900 --> 00:02:04.249
hit the Play Store.

00:02:04.249 --> 00:02:09.360
Also FroYo added some really handy API, things
like saving applications to mass storage,

00:02:09.360 --> 00:02:13.330
and these are the things that most applications
that use play services are probably going

00:02:13.330 --> 00:02:14.790
to be using.

00:02:14.790 --> 00:02:20.430
A few people have asked why we have both play
services and the Android support library.

00:02:20.430 --> 00:02:22.730
&gt;&gt;Reto Meier: I have been wondering.

00:02:22.730 --> 00:02:25.360
&gt;&gt;Rich Hyndman: You will know that it's in
the name.

00:02:25.360 --> 00:02:29.760
Really Google Play Services is, of course,
supporting our play ecosystem, making sure

00:02:29.760 --> 00:02:30.769
you can use the APIs.

00:02:30.769 --> 00:02:34.610
The Android support library is an open source
library for the Android ecosystem and for

00:02:34.610 --> 00:02:40.111
you the developers to include in your applications
in the source and you can use it on all your

00:02:40.111 --> 00:02:43.489
devices that you would like to.

00:02:43.489 --> 00:02:48.849
So this talk is called what's new in Google
Play Services, so let's get into some of the

00:02:48.849 --> 00:02:49.849
meat of it.

00:02:49.849 --> 00:02:50.849
Mr. Meier.

00:02:50.849 --> 00:02:54.580
&gt;&gt;Reto Meier: So you heard a lot about things
related to Google Play Services during the

00:02:54.580 --> 00:02:59.090
keynote yesterday and there are deep dive
presentations for pretty much everything in

00:02:59.090 --> 00:03:02.690
Google Play Services, both the things which
we have just released and the things that

00:03:02.690 --> 00:03:04.549
have been around for a little while.

00:03:04.549 --> 00:03:09.110
So the thing here is not to dive too deeply
into an individual thing, but to give you

00:03:09.110 --> 00:03:12.860
a bit of an overview into the things you may
be interested in seeing, particularly if you

00:03:12.860 --> 00:03:17.769
haven't had a chance to go into all the other
Google Play Services sessions so far at I/O.

00:03:17.769 --> 00:03:22.620
So let's look at some of the exciting new
features that we've just released here at

00:03:22.620 --> 00:03:23.799
I/O 2013.

00:03:23.799 --> 00:03:30.459
And I think the one that is the most interesting
and exciting for me is location-based services.

00:03:30.459 --> 00:03:34.049
So in addition to the maps fragments and the
maps V2 stuff that we added traditional previously

00:03:34.049 --> 00:03:38.829
we now have the ability to detect location
within Google Play Services.

00:03:38.829 --> 00:03:41.049
And there's a reason we brought this in here.

00:03:41.049 --> 00:03:43.300
We're now able to do much cleverer things.

00:03:43.300 --> 00:03:48.069
We have a new fused location provider which
does all of the hard work for you.

00:03:48.069 --> 00:03:52.769
So if you've ever used location in your Android,
and I'm sure most of you have, you know that

00:03:52.769 --> 00:03:57.129
doing so in a way that's efficient while still
allowing you to get the best location results

00:03:57.129 --> 00:03:58.129
can be quite tedious.

00:03:58.129 --> 00:04:03.400
There's a lot of code you have to write in
order to be able to use those best practices.

00:04:03.400 --> 00:04:06.860
So what the location team have done is taken
all of that hard work, they've put it all

00:04:06.860 --> 00:04:11.209
behind the scenes, behind this fused location
provider, and it will do all of that stuff

00:04:11.209 --> 00:04:12.209
for you.

00:04:12.209 --> 00:04:15.519
It will detect which providers are available,
it will figure out when things are turned

00:04:15.519 --> 00:04:19.140
on, when things are turned off, which providers
are providing the best result at a time particular

00:04:19.140 --> 00:04:20.140
time.

00:04:20.140 --> 00:04:22.070
All of that hard work is done for you.

00:04:22.070 --> 00:04:24.760
And to use it is actually nice and easy.

00:04:24.760 --> 00:04:30.930
Like most of the Google Play Services clients,
you simply have to create the instance first,

00:04:30.930 --> 00:04:35.870
call connect and it will asynchronously bind
your service or application to the Google

00:04:35.870 --> 00:04:38.030
Play Services service.

00:04:38.030 --> 00:04:41.100
Once that's happened you're able to treat
that location client in exactly the same way

00:04:41.100 --> 00:04:46.360
you used to handle the old location-based
services client.

00:04:46.360 --> 00:04:51.130
And this looks a lot like the naive approach
that we used to do back in the olden days,

00:04:51.130 --> 00:04:52.570
last week.

00:04:52.570 --> 00:04:57.280
We had to specify what our interval was and
we had to say what provider we wanted to use

00:04:57.280 --> 00:04:58.450
to get the location updates.

00:04:58.450 --> 00:05:04.730
And in most cases we were usually using multiple
providers or letting the system determine

00:05:04.730 --> 00:05:10.290
which provider we wanted, but then you have
this problem because GPS is always the best,

00:05:10.290 --> 00:05:11.290
right?

00:05:11.290 --> 00:05:13.000
It's always the most accurate location.

00:05:13.000 --> 00:05:16.640
Well, it is when you're outside, but less
so when you're inside, so now you're having

00:05:16.640 --> 00:05:20.430
to keep track of all the different providers
and figure out which is the most appropriate

00:05:20.430 --> 00:05:22.460
for your current location.

00:05:22.460 --> 00:05:25.500
Fused location provider does all of that work
for you.

00:05:25.500 --> 00:05:30.720
You just give us an interval, it can be a
minimum interval or a maximum interval, and

00:05:30.720 --> 00:05:32.170
then tell us what your priority is.

00:05:32.170 --> 00:05:33.170
What's more important?

00:05:33.170 --> 00:05:36.360
Do you want to get the most accurate results
that you can or do you want to make sure that

00:05:36.360 --> 00:05:40.650
the battery lasts as long as possible or do
you want to leave it up to us and ask fused

00:05:40.650 --> 00:05:43.640
location provider to try and find the right
balance for you?

00:05:43.640 --> 00:05:47.441
Because no matter what you choose, we're always
going to try to get the most accurate result

00:05:47.441 --> 00:05:49.000
with the least battery.

00:05:49.000 --> 00:05:55.830
This is just our way of knowing which way
to push it, in which direction.

00:05:55.830 --> 00:05:57.990
So that's one of the big advantages in fused
location provider.

00:05:57.990 --> 00:06:05.870
And the other thing is we have the logic behind
that at any time as part of Google Play Services

00:06:05.870 --> 00:06:09.310
and we can push that on our users' devices
without you having to do anything.

00:06:09.310 --> 00:06:13.370
You don't have to recompile code, you simply
set the things once and we will continue to

00:06:13.370 --> 00:06:20.060
try to make the results more accurate and
more efficient with each release.

00:06:20.060 --> 00:06:24.320
Not satisfied with just improving all of our
location-based apps, the location team have

00:06:24.320 --> 00:06:28.330
also created a new geofencing API.

00:06:28.330 --> 00:06:33.000
This works a lot like we expected the old
proximity alerts to work, but this actually

00:06:33.000 --> 00:06:34.060
works.

00:06:34.060 --> 00:06:38.320
So it will keep track of all the geofences
from every application and figure out which

00:06:38.320 --> 00:06:43.580
of our providers we should be using based
on how far away we are from the boundaries

00:06:43.580 --> 00:06:44.870
around each of those geofences.

00:06:44.870 --> 00:06:50.230
So we create those boundaries simply by specifying
a particular location and a radius around

00:06:50.230 --> 00:06:56.470
it and whether we're interested in users who
move into or out of or both of that boundary

00:06:56.470 --> 00:06:57.470
condition.

00:06:57.470 --> 00:07:02.250
And so because this is all handled by the
central fused location provider, all of the

00:07:02.250 --> 00:07:07.390
geofences from every app are known to us and
so we can figure out what should we be using.

00:07:07.390 --> 00:07:10.740
Should we stick with GPS, should we go back
to cell ID because we're far enough?

00:07:10.740 --> 00:07:12.830
Because we know how far we are from the boundaries.

00:07:12.830 --> 00:07:17.380
This means you get to take advantage of all
this contextual information around location

00:07:17.380 --> 00:07:22.410
without having to follow the user every step
of the way, without the complex analysis to

00:07:22.410 --> 00:07:28.380
figure out whether you want to turn on GPS
or turn on cell or Wi-Fi triangulation or

00:07:28.380 --> 00:07:30.190
any other technology that is made available.

00:07:30.190 --> 00:07:35.050
We do all of that hard work for you and want
to be sure you are notified whenever it is

00:07:35.050 --> 00:07:36.340
relevant.

00:07:36.340 --> 00:07:42.140
Now, because the location team are overachievers,
never really satisfied with just making things

00:07:42.140 --> 00:07:45.930
better and making things work, they've decided
that they want to introduce something completely

00:07:45.930 --> 00:07:47.120
new.

00:07:47.120 --> 00:07:49.840
And so now we have activity recognition.

00:07:49.840 --> 00:07:54.940
So now not only can we tell where a user is,
but we can tell what they're actually doing.

00:07:54.940 --> 00:07:58.180
So we know whether they're standing still,
whether they're running, whether they're cycling,

00:07:58.180 --> 00:07:59.660
whether they're driving.

00:07:59.660 --> 00:08:03.930
And now you can use this information either
to create entire new categories of apps.

00:08:03.930 --> 00:08:08.080
You could have an app, say a fitness app,
and rather than having to say what activity

00:08:08.080 --> 00:08:11.650
you're doing, the activity detection can tell
you.

00:08:11.650 --> 00:08:16.480
Activity recognition can figure out exactly
what they're doing and fill in those details.

00:08:16.480 --> 00:08:21.720
So you can use it that way, and this is how
you request those activity updates.

00:08:21.720 --> 00:08:26.180
You simply set what interval you're interested
in and then specify pending intent that is

00:08:26.180 --> 00:08:29.530
going to get triggered whenever the activity
changes.

00:08:29.530 --> 00:08:30.910
So now we can be clever about this.

00:08:30.910 --> 00:08:34.580
We can say, okay, maybe we're just interested
in all the changes so we can track that and

00:08:34.580 --> 00:08:38.939
do something useful or maybe we can make our
apps more efficient.

00:08:38.939 --> 00:08:43.680
We can provide a different user experience
based on what their current activity is.

00:08:43.680 --> 00:08:46.410
So maybe it's looking for points of interest
nearby.

00:08:46.410 --> 00:08:50.800
If we're standing still, we're not moving,
the buildings aren't moving, then we can pause,

00:08:50.800 --> 00:08:52.250
we can disable those updates.

00:08:52.250 --> 00:08:56.240
If we're in the car we want to get the updates
as quickly as possible so the passenger can

00:08:56.240 --> 00:08:57.860
figure out a good place to eat.

00:08:57.860 --> 00:08:59.970
Or maybe you can flip it around.

00:08:59.970 --> 00:09:04.180
Maybe it's sports scores or news, you're standing
still, and that's when you want the most frequent

00:09:04.180 --> 00:09:05.180
updates.

00:09:05.180 --> 00:09:09.250
And when you're cycling, the phone is in your
pocket, you may as well disable those updates

00:09:09.250 --> 00:09:14.899
because if you're not in a position to look
at your phone there's no point in firing up

00:09:14.899 --> 00:09:17.899
the cell radio in order to get those downloads.

00:09:17.899 --> 00:09:21.920
So it's really a way that you can utilize
this information to create entirely new apps

00:09:21.920 --> 00:09:22.920
or more efficient apps.

00:09:22.920 --> 00:09:28.079
It is a brand new API, so it's a really great
opportunity to think outside the box, to figure

00:09:28.079 --> 00:09:33.889
out how can you use this new sensor information
to create a better experience, more efficient

00:09:33.889 --> 00:09:35.620
experience for your users.

00:09:35.620 --> 00:09:38.970
Now, I'm not going to go into any more detail
here.

00:09:38.970 --> 00:09:41.779
Like I said, we want to cover everything pretty
quickly.

00:09:41.779 --> 00:09:48.339
The good news is that Waleed and Jaikumar
have already presented all of this information

00:09:48.339 --> 00:09:53.889
and if we had a time travel API built into
Android and Google Play Services you could

00:09:53.889 --> 00:09:56.190
go back in time and watch it live earlier
today.

00:09:56.190 --> 00:09:58.519
Unfortunately that's not going to be possible.

00:09:58.519 --> 00:10:01.600
&gt;&gt;Rich Hyndman: But they released that back
in time, time travel delay.

00:10:01.600 --> 00:10:02.600
&gt;&gt;Reto Meier: No.

00:10:02.600 --> 00:10:03.760
&gt;&gt;Rich Hyndman: It's not far.

00:10:03.760 --> 00:10:04.760
It's only 11:15.

00:10:04.760 --> 00:10:06.610
&gt;&gt;Reto Meier: We'll talk about this later.

00:10:06.610 --> 00:10:09.149
&gt;&gt;Rich Hyndman: Secret stuff.

00:10:09.149 --> 00:10:11.890
&gt;&gt;Reto Meier: So check it out on YouTube.

00:10:11.890 --> 00:10:12.890
It's close enough.

00:10:12.890 --> 00:10:15.240
You can rewind time effectively and see all
the information.

00:10:15.240 --> 00:10:19.430
They dig much deeper into the details of how
this is done, what you can do to really take

00:10:19.430 --> 00:10:24.770
advantage of all of these APIs within your
applications.

00:10:24.770 --> 00:10:26.370
Anything else that you want to talk about
today, Rich?

00:10:26.370 --> 00:10:27.370
&gt;&gt;Rich Hyndman: Sure.

00:10:27.370 --> 00:10:28.370
Of course we have something else.

00:10:28.370 --> 00:10:31.980
We have the thing that I'm most impressed
with in the latest set of Google Play Services

00:10:31.980 --> 00:10:33.690
is Google Play games.

00:10:33.690 --> 00:10:36.269
Everything is better when it's competitive,
right?

00:10:36.269 --> 00:10:39.310
Hopefully some of you have already been playing
the new Google Play games.

00:10:39.310 --> 00:10:41.670
You've seen the enormous leaderboard outside.

00:10:41.670 --> 00:10:43.370
Is anyone on the leaderboard?

00:10:43.370 --> 00:10:44.370
No?

00:10:44.370 --> 00:10:46.240
One or two people at the back.

00:10:46.240 --> 00:10:47.240
That's good stuff.

00:10:47.240 --> 00:10:48.689
&gt;&gt;Reto Meier: They're just shy.

00:10:48.689 --> 00:10:53.089
&gt;&gt;Rich Hyndman: So the things we're talking
about with Google Play games, achievements,

00:10:53.089 --> 00:10:56.420
leaderboards, cloud save and real-time multiplayer
invitations.

00:10:56.420 --> 00:10:58.490
Because what is multiplayer without invitations?

00:10:58.490 --> 00:11:00.459
&gt;&gt;Reto Meier: It's a game by yourself.

00:11:00.459 --> 00:11:04.010
&gt;&gt;Rich Hyndman: It's not multiplayer.

00:11:04.010 --> 00:11:08.470
So you may know how all this performs, but
do you manage all of this great new stuff?

00:11:08.470 --> 00:11:12.130
Inside the new Google developer console you
will get a little tab in the top left corner,

00:11:12.130 --> 00:11:15.691
the little play games logo, and you can tap
on that and then from inside the new layouts

00:11:15.691 --> 00:11:20.329
you will see the ability to add in your leaderboards,
your achievements and things like that straight

00:11:20.329 --> 00:11:25.199
into the play developer console across platforms
that supports iOS and Web.

00:11:25.199 --> 00:11:30.970
Not only that, but if you have a look in the
Play Store now at Beach Buggy Blitz, if you

00:11:30.970 --> 00:11:35.639
scroll down you will see it supports leaderboards
and achievements.

00:11:35.639 --> 00:11:37.310
I don't think that one is multiplayer.

00:11:37.310 --> 00:11:41.519
But users are going to know which of the play
services you've integrated into your application

00:11:41.519 --> 00:11:43.350
before they install it.

00:11:43.350 --> 00:11:46.980
Just adding a bit more compelling.

00:11:46.980 --> 00:11:51.769
So inside the actual game we provide you with
default look and feel for achievements.

00:11:51.769 --> 00:11:56.089
You can see the little dialogue that appears,
and the entire achievement screen.

00:11:56.089 --> 00:11:59.370
So you can just drop this in straight away
if you want.

00:11:59.370 --> 00:12:01.519
Drop it in, it will work fine for you.

00:12:01.519 --> 00:12:06.000
Or you can get access to the raw data and
integrate it as you previously would, make

00:12:06.000 --> 00:12:08.959
it look and feel like your application.

00:12:08.959 --> 00:12:10.089
The same applies to leaderboards.

00:12:10.089 --> 00:12:13.040
Again, there's a default look and feel for
the leaderboards, if you want, and users will

00:12:13.040 --> 00:12:17.570
recognize it and understand that it's Google
play games or you can get access to the leaderboards,

00:12:17.570 --> 00:12:20.410
and Hugo hopefully won't be at the top.

00:12:20.410 --> 00:12:25.660
So now you have leaderboards, you have achievements
that are going to follow you around from device

00:12:25.660 --> 00:12:27.190
to device.

00:12:27.190 --> 00:12:31.100
So it only makes sense if with those achievements
you're following your game state with you.

00:12:31.100 --> 00:12:34.060
What you really need is some sort of Cloud
Save service.

00:12:34.060 --> 00:12:35.230
&gt;&gt;&gt; What would you call something like that?

00:12:35.230 --> 00:12:36.230
&gt;&gt;Rich Hyndman: I don't know.

00:12:36.230 --> 00:12:38.240
We call ours the Cloud Save service.

00:12:38.240 --> 00:12:44.889
So with Cloud Save you now have four 128K
blocks of data that you can store the user's

00:12:44.889 --> 00:12:47.069
data in for that application.

00:12:47.069 --> 00:12:49.700
Unfortunately this huge chunk of data doesn't
come out of their drive space.

00:12:49.700 --> 00:12:50.700
&gt;&gt;Reto Meier: That's lucky.

00:12:50.700 --> 00:12:52.560
It's almost half a meg per game.

00:12:52.560 --> 00:12:54.249
It's a lot.

00:12:54.249 --> 00:13:00.570
&gt;&gt;Rich Hyndman: So you get this chunk of data
that doesn't come out of the drive space,

00:13:00.570 --> 00:13:03.779
you synchronize the state maybe for the four
chunks.

00:13:03.779 --> 00:13:08.240
You could have one chunk for avatar, another
chunk for their profile information, game

00:13:08.240 --> 00:13:11.139
progress, things like that, store them and
synchronize them.

00:13:11.139 --> 00:13:15.579
Cloud Save also comes with conflict resolution
strategies as well.

00:13:15.579 --> 00:13:18.950
If you want to find out more about that, again,
go back to yesterday this time.

00:13:18.950 --> 00:13:20.570
We certainly haven't released that API.

00:13:20.570 --> 00:13:22.730
And watch new developments in mobile gaming.

00:13:22.730 --> 00:13:26.360
&gt;&gt;Reto Meier: That seems like a really simple
title.

00:13:26.360 --> 00:13:29.930
&gt;&gt;Rich Hyndman: Who would actually call it
new developments in mobile gaming if you had

00:13:29.930 --> 00:13:30.930
to go something to hide?

00:13:30.930 --> 00:13:34.290
It was called an introduction to play games
services.

00:13:34.290 --> 00:13:37.999
So in the future when this comes out on YouTube,
look for introduction to play games services

00:13:37.999 --> 00:13:41.639
and you will find out more details about all
of that.

00:13:41.639 --> 00:13:45.490
Maybe unsurprisingly this is all backed by
Google+ so you add the Google+ sign into your

00:13:45.490 --> 00:13:51.119
application and then you get access to all
these fantastic play services.

00:13:51.119 --> 00:13:52.850
For even more details there's another one.

00:13:52.850 --> 00:13:54.100
There's a lot of play games to what's going
on.

00:13:54.100 --> 00:13:55.100
&gt;&gt;Reto Meier: There were a few.

00:13:55.100 --> 00:13:58.470
&gt;&gt;Rich Hyndman: Advanced games development
topics, which sounds like a cloaked talk title,

00:13:58.470 --> 00:13:59.970
but I didn't go and check.

00:13:59.970 --> 00:14:01.639
So now we've backed up all our data up.

00:14:01.639 --> 00:14:04.420
Let's restore Reto's former position and see
what's next.

00:14:04.420 --> 00:14:10.040
&gt;&gt;Reto Meier: So one of the other really exciting
new parts of Google Play Services, most of

00:14:10.040 --> 00:14:14.040
the ones I'm talking about today, actually
existed in the world before Google Play Services,

00:14:14.040 --> 00:14:16.569
but have recently been brought into the fold.

00:14:16.569 --> 00:14:19.369
And that is certainly the case for Google
Cloud Messaging.

00:14:19.369 --> 00:14:24.449
This is already an API, which hopefully many
of you are very familiar with, to help make

00:14:24.449 --> 00:14:26.839
your travel transfers that much more efficient.

00:14:26.839 --> 00:14:31.180
We've pulled that into Google Play Services
and as part of the introduction process we

00:14:31.180 --> 00:14:34.910
forced the team to build some new APIs as
well.

00:14:34.910 --> 00:14:39.129
So hopefully you're all very familiar with
the basics behind Google Cloud Messaging,

00:14:39.129 --> 00:14:44.240
and that's the fact that you can have your
server update your client to tell it when

00:14:44.240 --> 00:14:46.009
it needs to do a refresh.

00:14:46.009 --> 00:14:52.170
So in the bad old days we used to set repeating
alarms and at best maybe they were inexact

00:14:52.170 --> 00:14:57.060
repeating alarms, but either way you were
still waking up the device, turning on the

00:14:57.060 --> 00:15:01.240
radio, pinging a server just to say, hey,
is there anything I need to download?

00:15:01.240 --> 00:15:02.689
And most of the times the answer was no.

00:15:02.689 --> 00:15:07.610
And even if the answer is yes, it was like,
yeah, two hours ago would have been useful.

00:15:07.610 --> 00:15:11.889
So what Google Cloud Messaging lets you do
is have the server notify each of your clients

00:15:11.889 --> 00:15:16.350
when it's time, when there is new data, so
you can reduce the amount of radio traffic,

00:15:16.350 --> 00:15:20.730
reduce the amount of battery use associated
with those transfers by only making them happen

00:15:20.730 --> 00:15:24.129
when you know there is data to transfer.

00:15:24.129 --> 00:15:29.350
Now, one of the exciting new things that we've
added is the ability to go the other way around.

00:15:29.350 --> 00:15:32.689
So as you heard in the keynote yesterday we
can now have a system where you can create

00:15:32.689 --> 00:15:38.509
a persistent XMPP connection with your server
and the Google Cloud Messaging server.

00:15:38.509 --> 00:15:42.430
This gives you now the ability to send messages
from your device back to your server over

00:15:42.430 --> 00:15:46.750
this connection without you having to maintain
that consistent connection using something

00:15:46.750 --> 00:15:49.550
like a hanging GAC or something equivalent
to that.

00:15:49.550 --> 00:15:54.209
We'll do it once and we do it in a way that
we know is going to work across carriers and

00:15:54.209 --> 00:15:59.089
be as efficient as possible and give you the
ability to have the low latency, that high

00:15:59.089 --> 00:16:04.160
reliability connection to send data backwards
and forwards without having you to do yourself,

00:16:04.160 --> 00:16:07.709
using infrastructure that we use for all of
our services.

00:16:07.709 --> 00:16:09.309
And you can take it a step further as well.

00:16:09.309 --> 00:16:15.100
So you can use this same technology to now
send messages from one -- from your app running

00:16:15.100 --> 00:16:18.509
on one device to the same app running on other
devices.

00:16:18.509 --> 00:16:24.180
So if you have things like a notification
and it pops up someone's phone and they swipe

00:16:24.180 --> 00:16:28.370
it to dismiss or snooze it, but that same
notification is now going to be transmitted

00:16:28.370 --> 00:16:30.569
to all of your other phones.

00:16:30.569 --> 00:16:35.029
So what this API lets you do is basically
send that message to say the user has handled

00:16:35.029 --> 00:16:37.769
it, it has been actioned, you can remove it.

00:16:37.769 --> 00:16:38.769
This is really nice.

00:16:38.769 --> 00:16:43.269
This is a great way of demonstrating to people
that your app is aware of the ecosystem, it

00:16:43.269 --> 00:16:45.699
knows it has more than one phone.

00:16:45.699 --> 00:16:47.990
It's not just an app that runs on all of these
devices.

00:16:47.990 --> 00:16:49.149
It's built around them.

00:16:49.149 --> 00:16:51.380
It understands who they are and what their
needs are.

00:16:51.380 --> 00:16:55.160
So by doing that it just works the way that
people expect it should.

00:16:55.160 --> 00:17:01.089
I've already dismissed this notification,
it shouldn't appear anywhere else.

00:17:01.089 --> 00:17:03.270
Implementation from the client side is really
straightforward.

00:17:03.270 --> 00:17:08.800
You get a new Google Cloud Messaging client,
you call send, you specify their project ID

00:17:08.800 --> 00:17:12.631
if you want to talk directly to the server
or a notification ID if you want to transmit

00:17:12.631 --> 00:17:15.210
this to other devices.

00:17:15.210 --> 00:17:19.700
Server side is a little bit more complicated,
not really my wheelhouse, so I'm going to

00:17:19.700 --> 00:17:24.690
leave that to Francesco, who is in this room
I think directly after us, to give us all

00:17:24.690 --> 00:17:29.640
the details and exactly how you can use both
these new APIs and all of the previous Google

00:17:29.640 --> 00:17:33.190
Cloud Messaging APIs as part of Google Play
Services.

00:17:33.190 --> 00:17:37.820
Would you like to talk about the next one,
Rich?

00:17:37.820 --> 00:17:38.820
&gt;&gt;Rich Hyndman: Sure.

00:17:38.820 --> 00:17:42.660
We like to write services that are simple
to movement and get out of the way of the

00:17:42.660 --> 00:17:43.660
flow for users.

00:17:43.660 --> 00:17:46.320
They just make everything more simple across
the board.

00:17:46.320 --> 00:17:50.770
Google Wallet have announced here at I/O that
they have launched Google Wallet instant buy.

00:17:50.770 --> 00:17:51.800
There are some restrictions on it.

00:17:51.800 --> 00:17:53.910
You need to be a whitelisted user.

00:17:53.910 --> 00:17:55.510
(Indiscernible) for now.

00:17:55.510 --> 00:17:58.540
You can to talk to the guys downstairs at
the wallet stand if you want to register for

00:17:58.540 --> 00:17:59.540
it.

00:17:59.540 --> 00:18:03.680
The flow that this gives you is that you can
now sell physical goods inside your Android

00:18:03.680 --> 00:18:09.520
applications using the Gmail account on the
device and the Google Wallet on the device.

00:18:09.520 --> 00:18:13.520
So as you're selling your goods, they will
upload and there will be an instant buy with

00:18:13.520 --> 00:18:17.530
the Google Wallet button inside the app and
they can just tap that, there's no credit

00:18:17.530 --> 00:18:19.870
card details needed, there's no log-in needed.

00:18:19.870 --> 00:18:22.620
Everything is just a single straightforward
flow, it gets charged through the wallet on

00:18:22.620 --> 00:18:27.370
the device and you can ship the goods to the
address that that provides you with.

00:18:27.370 --> 00:18:29.300
So thanks to the Google Wallet team for that.

00:18:29.300 --> 00:18:33.610
There was a talk on that yesterday, what's
new on mobile payments on Android.

00:18:33.610 --> 00:18:36.180
If you're watching this in the future you
may be able to grab that straight away.

00:18:36.180 --> 00:18:38.070
&gt;&gt;Reto Meier: Great.

00:18:38.070 --> 00:18:41.160
So that all sounds pretty good.

00:18:41.160 --> 00:18:42.560
How can I get this?

00:18:42.560 --> 00:18:43.880
How can I use it?

00:18:43.880 --> 00:18:47.340
The whole in play services comes through the
SDK manager.

00:18:47.340 --> 00:18:50.050
Hopefully you all know where the Android SDK
measuring is already.

00:18:50.050 --> 00:18:51.980
Nods in the room.

00:18:51.980 --> 00:18:57.580
So it's under the window menu in Eclipse and
the tools menu in the new Android Studio or

00:18:57.580 --> 00:18:58.580
IntelliJ.

00:18:58.580 --> 00:19:02.080
You pull that up and scroll right down to
the bottom, and there will be an item down

00:19:02.080 --> 00:19:04.400
there for Google Play services.

00:19:04.400 --> 00:19:07.710
Once you install that, it will install the
Google Play services package into the URL

00:19:07.710 --> 00:19:09.210
that's above my head somewhere, extras.Google.GooglePlayServices.

00:19:09.210 --> 00:19:13.560
And so if you have it installed, you can go
and check it out there, and inside there there's

00:19:13.560 --> 00:19:18.520
the samples for it, you've got some documentation
and you've got the client library as well.

00:19:18.520 --> 00:19:22.480
One of the samples is called Panorama, because
one of the Google Play services is Panorama,

00:19:22.480 --> 00:19:25.610
which enables you to load up panoramas and
photo spheres you've taken with your Android

00:19:25.610 --> 00:19:29.190
devices and display them inside your application.

00:19:29.190 --> 00:19:33.000
So using the panorama sample, I'm going to
go through quickly how you would use Google

00:19:33.000 --> 00:19:36.750
Play services inside Android Studio and inside
Eclipse.

00:19:36.750 --> 00:19:41.810
In Android Studio you're going to go for create
project from existing sources.

00:19:41.810 --> 00:19:49.550
You're going to run through and find that
extras Google Play services directory on your

00:19:49.550 --> 00:19:54.410
machine and you're going to import the panorama
sample.

00:19:54.410 --> 00:20:00.250
We recommend that you also copy the play services
library into your work space so when Play

00:20:00.250 --> 00:20:02.950
services is updating to different versions
through the SDK manager, it doesn't change

00:20:02.950 --> 00:20:04.770
the one that you are using.

00:20:04.770 --> 00:20:06.360
Multiple projects will be running off it.

00:20:06.360 --> 00:20:10.800
That's a recommendation for Eclipse and IntelliJ
users.

00:20:10.800 --> 00:20:17.390
So then in IntelliJ, or Android Studio, you're
going to have to create this module, and because

00:20:17.390 --> 00:20:21.420
Google Play services includes resources as
well as class files, the resources are kept

00:20:21.420 --> 00:20:23.940
in the project and the class files are kept
in the jar file.

00:20:23.940 --> 00:20:28.940
So you need to import the module as a project,
first of all, for Play services, and then

00:20:28.940 --> 00:20:33.800
also import the jar file as a library and
create dependencies on both of those.

00:20:33.800 --> 00:20:37.180
If you miss out one of these steps, unfortunately
you're going to get like maps will be in red

00:20:37.180 --> 00:20:39.820
in Android Studio because it can't find the
classes because you didn't import the jar

00:20:39.820 --> 00:20:41.070
file.

00:20:41.070 --> 00:20:44.310
This is going to be much easier in the future
as we're going to have a maven artifact for

00:20:44.310 --> 00:20:49.060
Play service, so with the Gradle build system,
it will do the dependency management for you.

00:20:49.060 --> 00:20:51.270
Eclipse, very similar flow.

00:20:51.270 --> 00:20:54.390
You're going to through, you're going to copy
Play services library into your work space,

00:20:54.390 --> 00:20:57.020
you're going to import that.

00:20:57.020 --> 00:20:59.660
Also import the panorama sample.

00:20:59.660 --> 00:21:01.930
In Eclipse you just need to make the one dependency.

00:21:01.930 --> 00:21:08.490
You make the dependency from panorama sample
onto the library, and Eclipse figures out

00:21:08.490 --> 00:21:12.900
there's also a jar file in there and it imports
that for you.

00:21:12.900 --> 00:21:16.040
So it should look like this one in Eclipse.

00:21:16.040 --> 00:21:20.970
Of course some of our services like Maps use
APIs and API keys as well, and Reto is going

00:21:20.970 --> 00:21:22.910
to tell you how to get hold of an API key.

00:21:22.910 --> 00:21:26.240
&gt;&gt;Reto Meier: Thanks, Rich.

00:21:26.240 --> 00:21:31.270
So the way this works is that you need to
start by going to the API console, and you

00:21:31.270 --> 00:21:37.070
can find that at code.google.com/apis/console,
which is tricky for a lot of us to remember

00:21:37.070 --> 00:21:39.170
because my default is always to go to developer.android.com.

00:21:39.170 --> 00:21:44.160
But nonetheless, if you go there, you can
go into the services where you'll see a long

00:21:44.160 --> 00:21:49.040
list of APIs, and you simply choose the ones
you want to utilize, and turn it on.

00:21:49.040 --> 00:21:52.280
So it's actually pretty straightforward.

00:21:52.280 --> 00:21:55.760
Of course if we just gave you an API key which
you could cut and paste and start putting

00:21:55.760 --> 00:21:59.610
into your applications, it would be really
easy for nefarious characters like this one

00:21:59.610 --> 00:22:04.260
or this guy to steal your API key and start
using your quota.

00:22:04.260 --> 00:22:07.260
It would make it hard for you to track what
your app is doing.

00:22:07.260 --> 00:22:10.930
If there are quota restrictions, they could
easily start eating all of yours.

00:22:10.930 --> 00:22:16.690
So to mitigate against that, we make sure
that all the keys that we have are linked

00:22:16.690 --> 00:22:20.760
to a particular certificate and particular
package name so that only you can use your

00:22:20.760 --> 00:22:21.970
API key.

00:22:21.970 --> 00:22:26.110
And that way you can get full control over
the list of apps and certificates you want

00:22:26.110 --> 00:22:29.590
in the API access part of the console.

00:22:29.590 --> 00:22:36.170
Now, once you've gone through that process,
that is going to give you an API key.

00:22:36.170 --> 00:22:40.090
This, because it's signed or at least it's
associated specifically with your certificate

00:22:40.090 --> 00:22:44.350
and your package name is unique, you can put
it into with your manifest as shown here and

00:22:44.350 --> 00:22:47.750
all of your Google Play services will start
working.

00:22:47.750 --> 00:22:51.130
&gt;&gt;Rich Hyndman: Okay.

00:22:51.130 --> 00:22:52.320
Something on auth.

00:22:52.320 --> 00:22:57.340
No matter how many times I go through this,
auth and auth is always confusion.

00:22:57.340 --> 00:22:59.980
Authentication and authorization shouldn't
have been called the same thing because it's

00:22:59.980 --> 00:23:03.680
just annoying, or at least start with the
same name.

00:23:03.680 --> 00:23:07.321
Authentication is securely identifying the
party, so those Google accounts on your device

00:23:07.321 --> 00:23:09.600
are authenticated.

00:23:09.600 --> 00:23:15.910
Authorization is getting access to services
for that identified party, for the authenticated

00:23:15.910 --> 00:23:17.500
party.

00:23:17.500 --> 00:23:23.060
Google Play services is offering standardized
authorization for the authenticated account,

00:23:23.060 --> 00:23:27.770
not just for products that are inside Google
Play services but also for Google APIs on

00:23:27.770 --> 00:23:28.780
the Web as well.

00:23:28.780 --> 00:23:33.020
Previously, the flow for getting authorization
tokens for Google APIs was a bit of a pain,

00:23:33.020 --> 00:23:36.590
involved web views and some other things,
some people wrote some nice libraries for

00:23:36.590 --> 00:23:38.320
it but hey, there you go.

00:23:38.320 --> 00:23:42.590
Now with Google Play services you can get
hold of these tokens much more easily.

00:23:42.590 --> 00:23:45.340
So it starts off with choosing an account.

00:23:45.340 --> 00:23:48.710
You want the user to choose the account you
are going to use to authorize to get into

00:23:48.710 --> 00:23:50.150
the services and that's just one line of code.

00:23:50.150 --> 00:23:54.750
You use the account picker filter on Google
services and Google accounts and it shows

00:23:54.750 --> 00:23:58.300
a dialogue to the user, which you have probably
seen before, where they can choose one of

00:23:58.300 --> 00:23:59.970
their Gmail accounts.

00:23:59.970 --> 00:24:02.000
Just one line of code.

00:24:02.000 --> 00:24:05.710
Then before you go ahead and use Google Play
services, you just want to check that it's

00:24:05.710 --> 00:24:09.850
there, that it's on the device, that it's
the right version and that it's not disabled

00:24:09.850 --> 00:24:14.020
because people could do that if they really
felt like it was necessary for some reason.

00:24:14.020 --> 00:24:15.460
And then again, that's just one line of code.

00:24:15.460 --> 00:24:19.060
Google Play services util, is Google Play
services available.

00:24:19.060 --> 00:24:22.710
That can come back with some error codes,
maybe, in these rare cases.

00:24:22.710 --> 00:24:27.330
If it does, we have a handy get error dialogue
you can call, and that will show a localized

00:24:27.330 --> 00:24:33.210
error dialogue up to the user and hopefully
they can resolve the issue from there.

00:24:33.210 --> 00:24:36.010
So now you've got Google Play services is
definitely on the device and working.

00:24:36.010 --> 00:24:39.620
You've got your authenticated Gmail account
or Google apps account that you are going

00:24:39.620 --> 00:24:41.620
to use to log into the service.

00:24:41.620 --> 00:24:43.550
So now you need the access token for that
service.

00:24:43.550 --> 00:24:44.731
Again, one line of code again.

00:24:44.731 --> 00:24:46.500
The Google auth YouTube get token.

00:24:46.500 --> 00:24:50.840
You're parsing in the Gmail account that came
back, and you're going to chain together the

00:24:50.840 --> 00:24:54.060
scopes of the services that you want to get
access to.

00:24:54.060 --> 00:24:57.170
In this case we're looking at the plus profile
and the YouTube read only scopes, but you

00:24:57.170 --> 00:25:01.830
could chain multiple different scopes for
Google services and Google Play services that

00:25:01.830 --> 00:25:05.130
you wanted to get access to in this authorization.

00:25:05.130 --> 00:25:09.170
When you do this, the user will get another
handy little dialogue saying this application

00:25:09.170 --> 00:25:14.080
wants to access YouTube and your plus profile,
and they can click through there and see more

00:25:14.080 --> 00:25:15.720
details of exactly what that means.

00:25:15.720 --> 00:25:19.610
I'm going to hit okay, with any luck, and
you'll get access to the data.

00:25:19.610 --> 00:25:22.610
If it's Google Play services data, you're
just using the token with the library.

00:25:22.610 --> 00:25:25.670
If it's one of our Web APIs, you're going
to get that authorization token, put it on

00:25:25.670 --> 00:25:31.900
the end of a URL and get access to one of
our APIs.

00:25:31.900 --> 00:25:32.900
Anything else from you, Mr. Meier?

00:25:32.900 --> 00:25:35.690
&gt;&gt;Reto Meier: Yeah, I think there's one more
thing we wanted to add.

00:25:35.690 --> 00:25:38.930
We could +1 it, if you will.

00:25:38.930 --> 00:25:40.250
Painful puns are our specialty.

00:25:40.250 --> 00:25:41.910
&gt;&gt;Rich Hyndman: Add one more thing to the
deck.

00:25:41.910 --> 00:25:42.910
We should have rehearsed this.

00:25:42.910 --> 00:25:43.910
This could have been better.

00:25:43.910 --> 00:25:44.910
&gt;&gt;Reto Meier: Yeah, probably not.

00:25:44.910 --> 00:25:50.260
So the thing is you can +1 anything which
has a distinct URL, you can +1 it.

00:25:50.260 --> 00:25:55.590
So that means you can have a +1 button to
+1 your app in your app, which isn't a bad

00:25:55.590 --> 00:25:58.940
idea, but it's kind of a simple approach.

00:25:58.940 --> 00:26:03.590
If you've got content within your application
and it's anything which has a URL to be able

00:26:03.590 --> 00:26:07.740
to go to anywhere else, you can have a +1
button for that as well.

00:26:07.740 --> 00:26:13.470
So whether that's a news article, a recipe,
a TV show, anything which is within your app

00:26:13.470 --> 00:26:18.280
and has that URL, you are also able to add
a +1 button to it.

00:26:18.280 --> 00:26:19.530
&gt;&gt;Rich Hyndman: Excellent.

00:26:19.530 --> 00:26:23.650
&gt;&gt;Reto Meier: I think we've probably convinced
people that there's enough stuff here to start

00:26:23.650 --> 00:26:24.650
playing around with.

00:26:24.650 --> 00:26:28.380
Is there a way -- how would they go about
testing this, make sure it actually works.

00:26:28.380 --> 00:26:29.870
&gt;&gt;Rich Hyndman: Testing Google Play services.

00:26:29.870 --> 00:26:31.260
This is a question we get quite a lot on Google+.

00:26:31.260 --> 00:26:32.260
&gt;&gt;Reto Meier: It is a lot.

00:26:32.260 --> 00:26:36.100
&gt;&gt;Rich Hyndman: It's a painful question because
when you're testing Google Play services you

00:26:36.100 --> 00:26:38.170
can go and buy a device.

00:26:38.170 --> 00:26:40.370
You can go and buy a Android 2.2 and above
device.

00:26:40.370 --> 00:26:41.610
Nexus devices are great.

00:26:41.610 --> 00:26:42.610
Low cost of entry.

00:26:42.610 --> 00:26:45.980
If you want to test Google Play services,
you want Android 2.2 and above and of course

00:26:45.980 --> 00:26:49.150
the Play Store on it, and you'll be able to
test your Google Play services on it.

00:26:49.150 --> 00:26:50.170
&gt;&gt;Reto Meier: I don't know, Rich.

00:26:50.170 --> 00:26:51.930
That doesn't sound like a good enough answer
to me.

00:26:51.930 --> 00:26:54.450
We can't expect everyone to go out and buy
a device just to test things.

00:26:54.450 --> 00:26:55.450
&gt;&gt;Rich Hyndman: Really?

00:26:55.450 --> 00:26:56.450
I don't have much a better answer.

00:26:56.450 --> 00:27:00.970
No; actually, I said you can test on a device,
because we do have one other thing.

00:27:00.970 --> 00:27:01.970
Finally -- da-da-da-da.

00:27:01.970 --> 00:27:03.660
&gt;&gt;Reto Meier: I haven't seen this.

00:27:03.660 --> 00:27:04.660
What's coming?

00:27:04.660 --> 00:27:08.310
&gt;&gt;Rich Hyndman: We have a Google Play services
emulator as well, finally, so you can finally

00:27:08.310 --> 00:27:09.310
--
[ Applause ]

00:27:09.310 --> 00:27:11.030
&gt;&gt;Rich Hyndman: Wow!

00:27:11.030 --> 00:27:12.030
Okay.

00:27:12.030 --> 00:27:13.750
It's based on the Google APIs emulator.

00:27:13.750 --> 00:27:17.290
We will be updating it with every major release
of Play services going forward, so even if

00:27:17.290 --> 00:27:20.810
you do have a device, you can use emulator
to test some of the other form factors, but

00:27:20.810 --> 00:27:22.850
it means you don't actually have to have a
device.

00:27:22.850 --> 00:27:24.930
And you can use the GPO emulation on that
and the other features.

00:27:24.930 --> 00:27:28.710
&gt;&gt;Reto Meier: So any of you who are using
emulators for any kind of testing, particularly

00:27:28.710 --> 00:27:32.930
if you are doing things with like multi-device
testing, this is a great way to be able to

00:27:32.930 --> 00:27:33.930
do that.

00:27:33.930 --> 00:27:37.040
We particularly put it at the end just so
those of you who waited for the full length

00:27:37.040 --> 00:27:38.580
of the session would get that to have a sneak
--

00:27:38.580 --> 00:27:40.270
&gt;&gt;Rich Hyndman:
You went through to pain to get that one thing.

00:27:40.270 --> 00:27:45.390
So you requirements are you have the Google
-- you have the real emulator installed, you

00:27:45.390 --> 00:27:49.160
have the Google APIs installed, and you have
the Play services installed, which hopefully

00:27:49.160 --> 00:27:51.250
you would have anyway if you are developing
for Play services.

00:27:51.250 --> 00:27:52.330
&gt;&gt;Reto Meier: Great.

00:27:52.330 --> 00:27:53.780
&gt;&gt;Rich Hyndman: Makes sense.

00:27:53.780 --> 00:27:55.260
That's all we've got for this talk.

00:27:55.260 --> 00:27:56.370
Thank you all very much.

00:27:56.370 --> 00:28:00.230
If you have questions, we have microphones
dotted around and you can talk about Google

00:28:00.230 --> 00:28:01.230
Play services.

00:28:01.230 --> 00:28:04.570
We also have Jeff over here from the Play
services team, so if you have any technical

00:28:04.570 --> 00:28:08.000
questions we're clearly not going to be able
to answer, Jeff can stand up and save the

00:28:08.000 --> 00:28:09.130
day for us.

00:28:09.130 --> 00:28:11.520
Thanks very much.

00:28:11.520 --> 00:28:17.890
[ Applause ]
&gt;&gt;Rich Hyndman: Someone coming to the microphone.

00:28:17.890 --> 00:28:19.490
&gt;&gt;&gt; Hi there.

00:28:19.490 --> 00:28:23.520
Is the play services emulator, do you have
an X86 image for that or only ARM?

00:28:23.520 --> 00:28:25.950
&gt;&gt;Rich Hyndman: It hasn't been launched yet.

00:28:25.950 --> 00:28:27.130
Right now I have only seen an ARM one.

00:28:27.130 --> 00:28:28.220
&gt;&gt;&gt; You've only seen an ARM?

00:28:28.220 --> 00:28:32.720
&gt;&gt;Rich Hyndman: I've only seen an ARM one,
personally, but you never know.

00:28:32.720 --> 00:28:33.720
Jeff?

00:28:33.720 --> 00:28:34.720
No.

00:28:34.720 --> 00:28:36.470
You can talk to Xav and Tor on the tools team
about the emulators.

00:28:36.470 --> 00:28:37.920
They're launching that.

00:28:37.920 --> 00:28:44.250
&gt;&gt;Reto Meier: We should check in with any
extended people.

00:28:44.250 --> 00:28:46.179
Hi, please.

00:28:46.179 --> 00:28:54.380
&gt;&gt;&gt; Are you planning on releasing the WebView
as Google Play services so that it can be

00:28:54.380 --> 00:28:58.250
updated across different versions of the OS?

00:28:58.250 --> 00:29:00.600
&gt;&gt;Reto Meier: That's a good question.

00:29:00.600 --> 00:29:02.420
Certainly not anything we've done at this
point.

00:29:02.420 --> 00:29:04.310
I'm not sure if there are any future plans.

00:29:04.310 --> 00:29:07.780
As usual with anything Google, we can't speak
about future plans, but it's not anything

00:29:07.780 --> 00:29:09.020
that I am currently aware of.

00:29:09.020 --> 00:29:12.330
&gt;&gt;Rich Hyndman: The great thing for me is
finally being able to test apps with the new

00:29:12.330 --> 00:29:13.330
MapFragment.

00:29:13.330 --> 00:29:16.650
The v2 MapFragment inside the emulator whilst
you're developing is just really handy.

00:29:16.650 --> 00:29:18.570
And this Panorama example as well.

00:29:18.570 --> 00:29:22.690
I just checked, we don't have any live questions
off the moderator, so we can carry on.

00:29:22.690 --> 00:29:23.690
&gt;&gt;&gt; Hi.

00:29:23.690 --> 00:29:31.250
This is awesome, but how is the Play Store
upgrade rate and upgrade velocity?

00:29:31.250 --> 00:29:36.070
Is there any plan on there to ensure users
always get the latest version?

00:29:36.070 --> 00:29:40.940
&gt;&gt;Reto Meier: So the question is the frequency
with which or the rate at which we update

00:29:40.940 --> 00:29:44.200
Google Play services on devices.

00:29:44.200 --> 00:29:47.570
It's very, very, very fast.

00:29:47.570 --> 00:29:51.320
So we usually -- it usually -- I think we
push it out to everyone within about a week,

00:29:51.320 --> 00:29:53.760
I think, and that's conservatively speaking.

00:29:53.760 --> 00:29:58.450
So whenever there's a new Google Play services
update, we push that out to all devices very

00:29:58.450 --> 00:29:59.450
quickly.

00:29:59.450 --> 00:30:03.160
So as long as Google Play is installed, they
will get that update almost instantly.

00:30:03.160 --> 00:30:06.140
&gt;&gt;Rich Hyndman: For regular viewers of the
tech press, you might have noticed we started

00:30:06.140 --> 00:30:08.500
releasing this version at the start of the
week.

00:30:08.500 --> 00:30:10.130
Yes, sir.

00:30:10.130 --> 00:30:14.780
&gt;&gt;&gt; I think this question might have been
asked before but I didn't hear an answer to

00:30:14.780 --> 00:30:15.780
it.

00:30:15.780 --> 00:30:19.030
How much working together did the Google Play
services expect to have?

00:30:19.030 --> 00:30:24.530
In particular, you have the activity recognition
and location services.

00:30:24.530 --> 00:30:28.670
One of the examples you had was, okay, if
I'm on a bike, update more frequently.

00:30:28.670 --> 00:30:30.440
Update less frequently if I'm not on the bike.

00:30:30.440 --> 00:30:35.470
Will the location services automatically do
that or do we manually do that?

00:30:35.470 --> 00:30:37.950
And other situations like that I haven't thought
of.

00:30:37.950 --> 00:30:39.190
&gt;&gt;Reto Meier: Absolutely.

00:30:39.190 --> 00:30:40.440
Cover your bases.

00:30:40.440 --> 00:30:44.030
Yeah, one of the advantages of Google Play
services is exactly that, is that all of these

00:30:44.030 --> 00:30:48.640
services are backed by Google infrastructure
and Google services, and so they can work

00:30:48.640 --> 00:30:52.540
together really, really well and start to
do clever things working together rather than

00:30:52.540 --> 00:30:53.540
in isolation.

00:30:53.540 --> 00:30:56.940
So it's really about taking them out of their
product silos and putting them in one place

00:30:56.940 --> 00:31:00.810
where they can be managed and where they can
take advantage of the functionality which

00:31:00.810 --> 00:31:02.340
each of the different components brings.

00:31:02.340 --> 00:31:06.640
And the example from location is perfect in
that it does -- or the Fused Location Provider

00:31:06.640 --> 00:31:11.210
already does do some clever things based on
what activity you are doing to modify those

00:31:11.210 --> 00:31:12.210
rates.

00:31:12.210 --> 00:31:13.210
So absolutely.

00:31:13.210 --> 00:31:17.400
&gt;&gt;&gt; Yeah, I have a question about game services.

00:31:17.400 --> 00:31:20.220
Is it ever appropriate to use game services
for nongames?

00:31:20.220 --> 00:31:21.380
&gt;&gt;Rich Hyndman: Definitely, yeah.

00:31:21.380 --> 00:31:23.830
&gt;&gt;&gt; I'm thinking of something like Four Square
badges.

00:31:23.830 --> 00:31:28.860
&gt;&gt;Rich Hyndman: Something like cloud save
is very appropriate for nongames as well.

00:31:28.860 --> 00:31:31.570
Using achievements, you could use achievements
outside of games if you wanted to.

00:31:31.570 --> 00:31:35.650
&gt;&gt;Reto Meier: Yeah, I don't think there's
any restrictions around having to be in one

00:31:35.650 --> 00:31:37.680
of the games categories in order to use the
services.

00:31:37.680 --> 00:31:40.250
It's just they're designed specifically for
that.

00:31:40.250 --> 00:31:44.340
So the risk you have is if you -- if it almost
does what you want and you're hoping it gets

00:31:44.340 --> 00:31:48.400
changed to be able to take into account that
edge case, if it's not in a game it's much

00:31:48.400 --> 00:31:49.860
less likely to have that covered.

00:31:49.860 --> 00:31:55.500
But if you find something useful, don't let
the title dissuade you from using it.

00:31:55.500 --> 00:31:56.820
&gt;&gt;&gt; Hi.

00:31:56.820 --> 00:32:02.390
The geofences, they said it's hundred per
client -- per application per user or is it

00:32:02.390 --> 00:32:03.390
just per application?

00:32:03.390 --> 00:32:04.810
&gt;&gt;Reto Meier: Per application.

00:32:04.810 --> 00:32:07.620
&gt;&gt;Rich Hyndman: Yeah.

00:32:07.620 --> 00:32:09.580
In the back there.

00:32:09.580 --> 00:32:16.900
&gt;&gt;&gt; How does the Google Play services version,
the apps like that they work with the Google

00:32:16.900 --> 00:32:18.560
Play services that they need?

00:32:18.560 --> 00:32:22.770
Like do they prevent the update of the app
if, like, the Google Play services is installed

00:32:22.770 --> 00:32:28.490
on the -- on the system does not match the
version or how does it handle version?

00:32:28.490 --> 00:32:30.670
&gt;&gt;Reto Meier: So -- sorry.

00:32:30.670 --> 00:32:32.610
&gt;&gt;Rich Hyndman: You're saying something like
maps?

00:32:32.610 --> 00:32:33.610
&gt;&gt;&gt; No.

00:32:33.610 --> 00:32:37.770
The apps like suppose I'm an app and I use
Google Play services which requires a certain

00:32:37.770 --> 00:32:43.190
API level in the Google Play services and
the guy has not updated his Google Play app.

00:32:43.190 --> 00:32:45.330
So how does it handle versioning between the
apps.

00:32:45.330 --> 00:32:46.330
&gt;&gt;Reto Meier: Right.

00:32:46.330 --> 00:32:49.550
So what we do is we push out the new version
of Google Play services to everyone, basically

00:32:49.550 --> 00:32:50.550
straight away.

00:32:50.550 --> 00:32:54.670
If, for whatever reason, that update hasn't
happened, the first time an app runs which

00:32:54.670 --> 00:32:58.920
requires the newer version, that will force
it to pull that new download down.

00:32:58.920 --> 00:33:01.660
So it will happen I think at the time when
you install the app?

00:33:01.660 --> 00:33:02.660
No.

00:33:02.660 --> 00:33:03.660
When you run the app.

00:33:03.660 --> 00:33:09.310
Yes, when you run the app for the first time
that you make that check, it will ping Google

00:33:09.310 --> 00:33:12.940
Play and request to download the --
&gt;&gt;&gt; What is the mechanism making that check?

00:33:12.940 --> 00:33:13.940
Sorry.

00:33:13.940 --> 00:33:14.940
Just a quick follow-up.

00:33:14.940 --> 00:33:19.130
&gt;&gt;Rich Hyndman: Google Play services is Google
Play services available.

00:33:19.130 --> 00:33:20.460
Google Play services UTIL.

00:33:20.460 --> 00:33:23.460
It's in the slide deck.

00:33:23.460 --> 00:33:27.250
&gt;&gt;&gt; Hey, when you were talking about cloud
save, you mentioned a limitation of, like,

00:33:27.250 --> 00:33:28.920
four buckets, each of which is 128K or something.

00:33:28.920 --> 00:33:29.920
&gt;&gt;Rich Hyndman: Sure.

00:33:29.920 --> 00:33:33.050
&gt;&gt;Reto Meier: Is that a strict limit and is
there a way to go beyond that?

00:33:33.050 --> 00:33:37.050
&gt;&gt;Rich Hyndman: Using cloud save, it is a
strict limit and using cloud save, there isn't

00:33:37.050 --> 00:33:40.420
a way to go beyond it, but if the Drive guys
were here they would be talking about how

00:33:40.420 --> 00:33:41.570
you could just use the Google Drive API.

00:33:41.570 --> 00:33:46.140
&gt;&gt;Reto Meier: So there are things you can
do, and because this is -- again, in this

00:33:46.140 --> 00:33:49.860
example it's sort of optimized for games,
and we want to make sure whether people have

00:33:49.860 --> 00:33:54.810
a Drive account or not, they can still take
advantage of persisting the state across.

00:33:54.810 --> 00:33:58.820
So if you do want to have more data and share
is it across devices, you totally can.

00:33:58.820 --> 00:34:03.250
The Drive team have a great API to do exactly
that, and I think they even had a session

00:34:03.250 --> 00:34:05.300
earlier today going into a bit more detail
exactly on that.

00:34:05.300 --> 00:34:07.270
So if that's the use case you're looking for,
that's probably a good place to look.

00:34:07.270 --> 00:34:11.869
&gt;&gt;&gt; But the two aren't going to interoperate
such that the user can see, like, this is

00:34:11.869 --> 00:34:17.690
my game save state, and if there is something
that is larger in there, it's going to be

00:34:17.690 --> 00:34:20.879
a totally separate thing and --
&gt;&gt;Rich Hyndman: They're totally separate;

00:34:20.879 --> 00:34:21.879
right.

00:34:21.879 --> 00:34:24.659
&gt;&gt;&gt; Are you storing the geofences in the device
or in the cloud?

00:34:24.659 --> 00:34:25.929
&gt;&gt;Reto Meier: On the device.

00:34:25.929 --> 00:34:26.929
&gt;&gt;&gt; On the device.

00:34:26.929 --> 00:34:27.929
Why?

00:34:27.929 --> 00:34:29.440
&gt;&gt;Reto Meier: Because it's the device that's
moving around.

00:34:29.440 --> 00:34:31.730
In fact we want to do it the opposite way.

00:34:31.730 --> 00:34:35.649
So the geofences we want to make it as much
a part of the device.

00:34:35.649 --> 00:34:38.619
If we can push it into hardware, that would
be even better.

00:34:38.619 --> 00:34:41.849
It's really about trying to make sure you
don't have to make an Internet connection

00:34:41.849 --> 00:34:47.710
to start up the radio, which is quite costly,
to do some of these checks which we may not

00:34:47.710 --> 00:34:49.109
need to do.

00:34:49.109 --> 00:34:53.210
So if you're it in apps, if you need more
than 100 geofences, then that may be something

00:34:53.210 --> 00:34:58.880
you want to do, but the idea here is to reduce
the dependency on the cloud.

00:34:58.880 --> 00:35:00.299
&gt;&gt;&gt; Hi.

00:35:00.299 --> 00:35:06.590
Will you provide the Play services as a separate
jar file for download or what's your thoughts

00:35:06.590 --> 00:35:07.780
on Kindle Fire?

00:35:07.780 --> 00:35:11.670
&gt;&gt;Rich Hyndman: Kindle Fire is outside of
the Google ecosystem.

00:35:11.670 --> 00:35:12.670
It doesn't have the Play Store.

00:35:12.670 --> 00:35:14.480
We're not pushing the Play services.

00:35:14.480 --> 00:35:17.039
We don't have our apps on it.

00:35:17.039 --> 00:35:19.880
So the Play services is specific to the Google
devices.

00:35:19.880 --> 00:35:23.680
&gt;&gt;Reto Meier: Part of that is we want to make
sure -- we have certain assumptions around

00:35:23.680 --> 00:35:28.970
everything within the ecosystem, and we're
able to have the CTS tests to make sure the

00:35:28.970 --> 00:35:33.430
devices have all of the features we need in
order to take advantage of most of these services.

00:35:33.430 --> 00:35:38.220
And so that gives us the infrastructure we
need to be able to safely push this out to

00:35:38.220 --> 00:35:40.839
everyone and know that it's just going to
work.

00:35:40.839 --> 00:35:44.359
So we haven't -- I don't think it's a priority
to take that out and make it available as

00:35:44.359 --> 00:35:45.849
is a separate download.

00:35:45.849 --> 00:35:46.849
&gt;&gt;&gt; Okay.

00:35:46.849 --> 00:35:52.450
So there's no plan to push Play Store to Kindle
Fire; is that right?

00:35:52.450 --> 00:35:57.140
&gt;&gt;Reto Meier: I think you probably want to
ask the Amazon guys or at least someone with

00:35:57.140 --> 00:35:58.420
a higher pay grade than me.

00:35:58.420 --> 00:35:59.420
&gt;&gt;Rich Hyndman: Yeah, absolutely.

00:35:59.420 --> 00:36:00.420
It's a different product, different question.

00:36:00.420 --> 00:36:03.930
&gt;&gt;Reto Meier: That's taking advantage of the
open nature of the Android operating system,

00:36:03.930 --> 00:36:05.190
and they have they have done a great job.

00:36:05.190 --> 00:36:08.329
&gt;&gt;Rich Hyndman: I'm sure if they want to submit
it to the CTS test rate and get approved and

00:36:08.329 --> 00:36:11.230
go through that, they could, but it's not...

00:36:11.230 --> 00:36:14.019
&gt;&gt;&gt; A question about auth.

00:36:14.019 --> 00:36:20.010
When will developers be able to get fresh
tokens for offline access without having (indiscernible).

00:36:20.010 --> 00:36:22.770
&gt;&gt;Rich Hyndman: Without having?

00:36:22.770 --> 00:36:29.789
&gt;&gt;&gt; Webview, like client authentication.

00:36:29.789 --> 00:36:36.309
So we need to access your data from the back-end,
from our back-end.

00:36:36.309 --> 00:36:37.309
&gt;&gt;Rich Hyndman: Right, right, right.

00:36:37.309 --> 00:36:38.890
So not going through Google Play services
but going through server --

00:36:38.890 --> 00:36:39.890
&gt;&gt;&gt; No.

00:36:39.890 --> 00:36:40.890
&gt;&gt;Rich Hyndman: -- to server?

00:36:40.890 --> 00:36:48.440
&gt;&gt;&gt; No, we want to get a fresh token to access
Google data from our back-end but without

00:36:48.440 --> 00:36:49.990
having WebView on the client.

00:36:49.990 --> 00:36:53.749
How can we -- When will we be able to do this?

00:36:53.749 --> 00:36:57.240
&gt;&gt;Reto Meier: I think it's a little beyond
either of our knowledge.

00:36:57.240 --> 00:37:00.849
What I suggest you do is head over to the
office hours on the third floor and we'll

00:37:00.849 --> 00:37:04.760
try to find someone who can figure out exactly
what the answer is.

00:37:04.760 --> 00:37:05.760
&gt;&gt;&gt; Okay.

00:37:05.760 --> 00:37:07.980
&gt;&gt;Reto Meier: Sorry.

00:37:07.980 --> 00:37:08.980
&gt;&gt;&gt; Hi.

00:37:08.980 --> 00:37:12.849
Actually, my question related to previous.

00:37:12.849 --> 00:37:21.510
Do you plan to have a back-end services for
Google Play services to apply them for other

00:37:21.510 --> 00:37:26.640
app stores, like from iStore or whatever?

00:37:26.640 --> 00:37:30.720
&gt;&gt;Rich Hyndman: As usual with these tools,
we don't make announcements or talk about

00:37:30.720 --> 00:37:31.720
roadmaps.

00:37:31.720 --> 00:37:39.259
&gt;&gt;&gt; Because it prevents using some services
when you plan to have multiple cross- -- cross-tour

00:37:39.259 --> 00:37:45.130
application, it prevents you to use Google
service, and you want to use your own service,

00:37:45.130 --> 00:37:51.569
if it cannot be used in a similar way in another
store.

00:37:51.569 --> 00:37:57.970
But if you have back-end service supporting
that, then we can easily trust and go with

00:37:57.970 --> 00:37:58.970
that.

00:37:58.970 --> 00:38:01.940
&gt;&gt;Reto Meier: So you'd basically want to have
a lot of the functionality from Google Play

00:38:01.940 --> 00:38:05.299
services made available to servers rather
than device clients; is that right?

00:38:05.299 --> 00:38:06.299
&gt;&gt;&gt; Yes.

00:38:06.299 --> 00:38:07.339
&gt;&gt;Reto Meier: Again, I think it's probably
not a priority.

00:38:07.339 --> 00:38:10.569
&gt;&gt;Rich Hyndman: I mean, most of those things
would appear in the Google Web APIs; right?

00:38:10.569 --> 00:38:14.710
So things like the Places API, Maps APIs,
things like that.

00:38:14.710 --> 00:38:15.710
It tends to be those things.

00:38:15.710 --> 00:38:18.319
&gt;&gt;Reto Meier: It tends to be different ways
to access from the server.

00:38:18.319 --> 00:38:23.500
Google Play services is all about trying to
create the best experience on the device.

00:38:23.500 --> 00:38:28.809
So anything that you want to do client side,
there's generally a Google API for that which

00:38:28.809 --> 00:38:30.710
you can use, it's just separate from that.

00:38:30.710 --> 00:38:33.809
And the ones which are in play services which
don't have a back-end end component --

00:38:33.809 --> 00:38:35.839
&gt;&gt;Rich Hyndman: There's far more APIs than
I can remember.

00:38:35.839 --> 00:38:40.920
If you do go to APIs.google.com, the API console
and have a look through the APIs, there's

00:38:40.920 --> 00:38:44.960
hundreds and hundreds of them in there, so
hopefully there's one that does exactly what

00:38:44.960 --> 00:38:48.480
you're looking for.

00:38:48.480 --> 00:38:49.480
Running very low on time.

00:38:49.480 --> 00:38:52.200
Maybe the last question or maybe there's just
two more questions left.

00:38:52.200 --> 00:38:55.150
&gt;&gt;&gt; My question is about the cloud save service.

00:38:55.150 --> 00:38:56.150
&gt;&gt;Rich Hyndman: Mm-hmm.

00:38:56.150 --> 00:39:00.640
&gt;&gt;&gt; When -- Is the data automatically cleared
at any points or do you have to manually clear

00:39:00.640 --> 00:39:01.640
it?

00:39:01.640 --> 00:39:02.660
&gt;&gt;Reto Meier: That's a good question.

00:39:02.660 --> 00:39:04.109
I'm not 100 percent sure.

00:39:04.109 --> 00:39:05.720
I think you need to manually clear it.

00:39:05.720 --> 00:39:10.460
I know it does versioning and collisioning
and all those sorts of things to make sure

00:39:10.460 --> 00:39:14.579
it's always using the most up-to-date version
N terms of deleting, I think you probably

00:39:14.579 --> 00:39:15.579
need to handle that.

00:39:15.579 --> 00:39:19.960
&gt;&gt;Rich Hyndman: The documents are now up at
developers.google.com/games.

00:39:19.960 --> 00:39:22.910
So you can have a look at it there.

00:39:22.910 --> 00:39:24.099
&gt;&gt;&gt; Okay.

00:39:24.099 --> 00:39:26.459
Thank you.

00:39:26.459 --> 00:39:27.650
&gt;&gt;&gt; Hi.

00:39:27.650 --> 00:39:31.230
So now that Play services is now providing
features that were traditionally considered

00:39:31.230 --> 00:39:35.859
an operating system component, it seems like
Android is being split from an open source

00:39:35.859 --> 00:39:40.829
project into an open source base and a closed
source OS, similar to like Darwin in OS 10.

00:39:40.829 --> 00:39:47.200
Does this represent a change in Android philosophy
or do you plan to reconcile that later?

00:39:47.200 --> 00:39:49.530
&gt;&gt;Reto Meier: I wouldn't say so.

00:39:49.530 --> 00:39:53.019
Realistically, what we're trying to do is
offer more services for users.

00:39:53.019 --> 00:39:57.089
So we're going to continue to build the platform
and have as many rich features as possible.

00:39:57.089 --> 00:40:01.809
And I can tell you the platform team are passionate
about making sure that anything that we can

00:40:01.809 --> 00:40:04.460
build to make the platform better, we should
build there.

00:40:04.460 --> 00:40:08.660
You'll note the things we have in Google Play
services are things which have not tended

00:40:08.660 --> 00:40:12.300
to be open source in the past or contain proprietary
data.

00:40:12.300 --> 00:40:16.390
So things like the Fused Location Provider
and the logic that it does to be able to reconcile

00:40:16.390 --> 00:40:21.890
between those different location providers
and use all those sensors is information that

00:40:21.890 --> 00:40:25.920
we keep -- which we used to have in things
like Google Maps which tended to have better

00:40:25.920 --> 00:40:27.549
location results than anyone else.

00:40:27.549 --> 00:40:29.890
So we wanted to share that, make that available
to everyone.

00:40:29.890 --> 00:40:33.519
And that kind of forms the basis around what
we're doing with Google Play services.

00:40:33.519 --> 00:40:37.799
And things like you'll note that the location
services don't suddenly disappear from the

00:40:37.799 --> 00:40:38.799
platform.

00:40:38.799 --> 00:40:39.799
They'll still continue to be there.

00:40:39.799 --> 00:40:43.619
So where we can do a value add by opening
up our proprietary stuff and making it available

00:40:43.619 --> 00:40:46.759
for developers, that's kind of where we're
trying to go with it.

00:40:46.759 --> 00:40:48.681
&gt;&gt;Rich Hyndman: Thank you very much, then.

00:40:48.681 --> 00:40:49.681
We're very much out of time.

00:40:49.681 --> 00:40:50.681
&gt;&gt;Reto Meier: Thank you.

00:40:50.681 --> 00:40:50.682
[ Applause ]

