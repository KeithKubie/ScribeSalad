WEBVTT
Kind: captions
Language: en

00:00:07.920 --> 00:00:08.420
Hello.

00:00:08.420 --> 00:00:10.586
I'm Roman Nurik from the
Android Developer Relations

00:00:10.586 --> 00:00:11.550
team at Google.

00:00:11.550 --> 00:00:13.466
In today's DevByte, we're
going to take a look

00:00:13.466 --> 00:00:16.960
at the new immersive mode
feature in Android 4.4 KitKat.

00:00:16.960 --> 00:00:20.040
This feature lets your
apps go truly full screen.

00:00:20.040 --> 00:00:21.430
Let's take a look.

00:00:21.430 --> 00:00:23.450
So before we talk
about immersive mode,

00:00:23.450 --> 00:00:25.410
let's recap all of the
different full screen

00:00:25.410 --> 00:00:28.820
APIs there were available in
previous versions of Android.

00:00:28.820 --> 00:00:32.369
Now, there are two sets
of APIs for full screen.

00:00:32.369 --> 00:00:34.380
The first is a set of
window manager flags,

00:00:34.380 --> 00:00:37.170
such as flag
fullscreen, you can set

00:00:37.170 --> 00:00:40.020
or unset to show or
hide the status bar.

00:00:40.020 --> 00:00:41.780
Now, these work on any
version of Android,

00:00:41.780 --> 00:00:44.770
and remain active even if you
navigate away from your app

00:00:44.770 --> 00:00:47.400
and then come back.

00:00:47.400 --> 00:00:50.932
The second is a set of
system UI visibility flags.

00:00:50.932 --> 00:00:52.390
And the difference
with these flags

00:00:52.390 --> 00:00:55.260
is that they're only available
in newer versions of Android,

00:00:55.260 --> 00:00:58.170
since about Android
4.0 or later.

00:00:58.170 --> 00:01:00.920
Additionally, these flags
are clearable by the system.

00:01:00.920 --> 00:01:03.490
So if, for example, you
navigate away from your app

00:01:03.490 --> 00:01:04.650
and then come back?

00:01:04.650 --> 00:01:08.340
These flags will be cleared
and you'll have to reset them.

00:01:08.340 --> 00:01:11.650
So the first of these
new flags is Low Profile.

00:01:11.650 --> 00:01:14.280
And this simply dims the
status and navigation bars

00:01:14.280 --> 00:01:15.900
when it's set.

00:01:15.900 --> 00:01:18.210
The second is the
Fullscreen flag,

00:01:18.210 --> 00:01:20.790
and this behaves basically
the same as the Window Manager

00:01:20.790 --> 00:01:21.520
flag.

00:01:21.520 --> 00:01:25.060
It simply hides the status bar.

00:01:25.060 --> 00:01:28.260
Now, the big one here
is Hide Navigation,

00:01:28.260 --> 00:01:30.890
which hides the navigation
bar temporarily.

00:01:30.890 --> 00:01:32.960
For those keeping track,
the navigation bar

00:01:32.960 --> 00:01:37.270
is the one that consists of the
Back, Home, and Recent buttons,

00:01:37.270 --> 00:01:39.720
and it's only available
on some devices.

00:01:39.720 --> 00:01:42.820
On some devices, the
navigation bar isn't present,

00:01:42.820 --> 00:01:46.900
and all you would see are
soft keys like Back, Menu,

00:01:46.900 --> 00:01:48.720
and so on.

00:01:48.720 --> 00:01:51.540
Now, once the Hide
Navigation flag is set,

00:01:51.540 --> 00:01:55.170
any interaction with the screen
will show the navigation bar.

00:01:55.170 --> 00:01:58.780
And the touch events that cause
that navigation bar to show

00:01:58.780 --> 00:02:01.472
will not be passed to your app.

00:02:01.472 --> 00:02:03.430
This is an important
point to keep in mind when

00:02:03.430 --> 00:02:07.180
we talk about immersive
mode in just a few seconds.

00:02:07.180 --> 00:02:08.979
Now, one more point
before we move on.

00:02:08.979 --> 00:02:11.370
There's a bunch of
these Layout Flags

00:02:11.370 --> 00:02:13.920
that control how your
screens are laid out.

00:02:13.920 --> 00:02:15.970
Setting these flags
allows your content

00:02:15.970 --> 00:02:18.350
to appear behind
the system bars.

00:02:18.350 --> 00:02:19.770
This is especially
important when

00:02:19.770 --> 00:02:22.200
users can toggle the
bars in your app.

00:02:22.200 --> 00:02:25.500
Setting these flags will keep
your content from jumping

00:02:25.500 --> 00:02:31.300
and resizing in response to the
bar is showing or being hidden.

00:02:31.300 --> 00:02:33.400
So let's talk about
the new stuff.

00:02:33.400 --> 00:02:37.650
Android 4.4 introduces two new,
mutually exclusive system UI

00:02:37.650 --> 00:02:39.170
visibility flags.

00:02:39.170 --> 00:02:42.410
And they're immersive
and immersive sticky.

00:02:42.410 --> 00:02:45.780
Let's look at a demo of
the immersive flag first.

00:02:45.780 --> 00:02:49.640
So to my left, you see
the simple demo app.

00:02:49.640 --> 00:02:51.690
Now, , when we
touch the content,

00:02:51.690 --> 00:02:54.930
you'll see that the immersive
system UI visibility flag,

00:02:54.930 --> 00:02:57.510
along with the Hide
Navigation, Fullscreen,

00:02:57.510 --> 00:03:00.420
and some layout flags are set.

00:03:00.420 --> 00:03:02.600
Once you enter immersive
mode within an app

00:03:02.600 --> 00:03:04.370
to get back to
the system UI, you

00:03:04.370 --> 00:03:06.990
can swipe down from
the top of the screen.

00:03:06.990 --> 00:03:10.140
The system also automatically
presents a reminder bubble

00:03:10.140 --> 00:03:12.780
to the user the first time
they answer immersive mode

00:03:12.780 --> 00:03:13.990
in your app.

00:03:13.990 --> 00:03:17.570
So here's a quick example
of that reminder bubble.

00:03:17.570 --> 00:03:20.760
Now, an important point
here is that you're

00:03:20.760 --> 00:03:24.300
app can now capture all the
touch events, allowing users

00:03:24.300 --> 00:03:26.250
to, say, play an
immersive game or scroll

00:03:26.250 --> 00:03:30.430
through content without the
distraction of system bars.

00:03:30.430 --> 00:03:32.580
So you'll notice here
that, first, I can actually

00:03:32.580 --> 00:03:37.384
swipe down from the top of the
screen to reveal those bars.

00:03:37.384 --> 00:03:39.050
And then if I actually
start interacting

00:03:39.050 --> 00:03:40.591
with the middle of
the screen, you'll

00:03:40.591 --> 00:03:43.310
notice that the bars
actually stay hidden.

00:03:43.310 --> 00:03:45.770
And this is the big difference
between immersive mode

00:03:45.770 --> 00:03:49.050
and just setting the
Hide Navigation flag.

00:03:49.050 --> 00:03:51.430
So one important point
here is that swiping

00:03:51.430 --> 00:03:54.140
from the top of the
screen clears those flags.

00:03:54.140 --> 00:03:58.180
So if you want to, say, hide
them again after three seconds,

00:03:58.180 --> 00:04:00.940
you can set up a system
UI visibility listener,

00:04:00.940 --> 00:04:02.440
which we'll talk
about in a second.

00:04:02.440 --> 00:04:06.570
And then, three seconds
later, set the flag again

00:04:06.570 --> 00:04:08.030
to hide them.

00:04:08.030 --> 00:04:09.670
So let's look at some code.

00:04:09.670 --> 00:04:12.940
First, we'll use our Windows
route view, or the Decor View,

00:04:12.940 --> 00:04:15.900
as the anchor for
system UI visibility.

00:04:15.900 --> 00:04:18.279
You can use any view so
long as it's visible.

00:04:18.279 --> 00:04:20.029
Now, the next thing
you should do whenever

00:04:20.029 --> 00:04:22.470
you use system UI
visibility flags is you

00:04:22.470 --> 00:04:25.330
should set up a listener
to watch for changes.

00:04:25.330 --> 00:04:28.130
Because the system can actually
clear these flags in response

00:04:28.130 --> 00:04:30.070
to user interactions,
you want to be

00:04:30.070 --> 00:04:33.140
kept aware of when that occurs.

00:04:33.140 --> 00:04:36.590
Now in this case, we simply show
or hide additional UI controls

00:04:36.590 --> 00:04:38.570
such as video playback
controls, when

00:04:38.570 --> 00:04:40.720
the system bars are
shown or hidden.

00:04:40.720 --> 00:04:43.020
And keeping all of
your UI controls

00:04:43.020 --> 00:04:45.820
in sync with the system
bars is the best practice

00:04:45.820 --> 00:04:48.760
to minimize the number of
states that your app can be in,

00:04:48.760 --> 00:04:52.370
resulting in a more
seamless user experience.

00:04:52.370 --> 00:04:55.400
To actually show or
hide the system bars,

00:04:55.400 --> 00:04:58.820
you can either set or remove
the right set of flags.

00:04:58.820 --> 00:05:01.660
To hide the system bars
and enter immersive mode,

00:05:01.660 --> 00:05:05.380
use the Hide Navigation,
Fullscreen, and Immersive flags

00:05:05.380 --> 00:05:08.450
in addition to the layout flags
that we talked about before.

00:05:08.450 --> 00:05:11.810
To show the system bars,
just set the layout flags,

00:05:11.810 --> 00:05:14.440
making sure that the
content doesn't jump.

00:05:14.440 --> 00:05:17.160
And omit the visibility flags,
like Fullscreen and Hide

00:05:17.160 --> 00:05:18.110
Navigation.

00:05:18.110 --> 00:05:21.050
What that'll do is that'll
actually show the bars.

00:05:21.050 --> 00:05:23.060
And generally,
you'll want to auto

00:05:23.060 --> 00:05:26.132
hide the system bars after
a period of inactivity.

00:05:26.132 --> 00:05:27.840
We won't go through
all the details here,

00:05:27.840 --> 00:05:30.130
but basically, you
want to use a Handler

00:05:30.130 --> 00:05:33.400
with delayed messages
for this purpose.

00:05:33.400 --> 00:05:37.620
You can also clear messages
to make sure that any pending

00:05:37.620 --> 00:05:41.020
hides or auto hides are
cancelled if need be.

00:05:41.020 --> 00:05:42.700
Additionally, you
should handle the case

00:05:42.700 --> 00:05:44.380
of Window Focus Changes.

00:05:44.380 --> 00:05:46.430
If you gain Window
Focus, you may

00:05:46.430 --> 00:05:48.410
want to re-hide the system bars.

00:05:48.410 --> 00:05:51.200
If you lose Window Focus--
for example, due to dialogue

00:05:51.200 --> 00:05:53.600
or pop up menu
coming up-- you'll

00:05:53.600 --> 00:05:56.230
probably want to cancel
any pending auto hides.

00:05:56.230 --> 00:05:58.490
So for example, if
you're watching a video

00:05:58.490 --> 00:06:01.090
and you press the action
overflow, that shows up

00:06:01.090 --> 00:06:03.040
a pop up menu, you'll
want to prevent

00:06:03.040 --> 00:06:05.360
the case of three
seconds after you

00:06:05.360 --> 00:06:08.260
show the action overflow, the
system bars and action bar

00:06:08.260 --> 00:06:10.920
hide, automatically closing
the action overflow.

00:06:10.920 --> 00:06:13.180
So this will help
you prevent that.

00:06:13.180 --> 00:06:15.580
Lastly, you generally
want to allow users

00:06:15.580 --> 00:06:18.650
to manually toggle the
visibility of the system bars

00:06:18.650 --> 00:06:20.840
by touching your
content, especially

00:06:20.840 --> 00:06:24.950
if single touches don't do
anything else in your screen.

00:06:24.950 --> 00:06:27.640
To do this, you may think
of just using a simple click

00:06:27.640 --> 00:06:28.499
listener.

00:06:28.499 --> 00:06:30.540
Now the problem with this
is that click listeners

00:06:30.540 --> 00:06:34.080
are fired even if you drag
your fingers across the content

00:06:34.080 --> 00:06:36.220
after pressing down.

00:06:36.220 --> 00:06:37.790
You probably don't
want to do that.

00:06:37.790 --> 00:06:40.340
Instead, you probably want
to use a gesture detector,

00:06:40.340 --> 00:06:45.620
like shown here, and handle
the on single tap up event.

00:06:45.620 --> 00:06:48.730
This makes sure that if
your user's finger moves

00:06:48.730 --> 00:06:51.020
more than just a little
bit during the touch,

00:06:51.020 --> 00:06:54.690
it won't toggle the system bars.

00:06:54.690 --> 00:06:57.532
Next, let's look at the
immersive sticky flag.

00:06:57.532 --> 00:06:58.990
Now in this mode,
almost everything

00:06:58.990 --> 00:07:00.650
is the same, except
when you swipe

00:07:00.650 --> 00:07:02.510
from the top of the screen.

00:07:02.510 --> 00:07:06.130
So here's that demo again,
and you see the same bubble.

00:07:06.130 --> 00:07:08.060
Now, if you swipe from
the top of the screen,

00:07:08.060 --> 00:07:11.920
you'll notice that a couple
of things are different.

00:07:11.920 --> 00:07:15.230
The system bars will show up
in a semi-transparent state,

00:07:15.230 --> 00:07:16.707
as you can see here.

00:07:16.707 --> 00:07:18.290
And the system bars
will automatically

00:07:18.290 --> 00:07:22.530
hide after a short delay, or
if the user interacts somewhere

00:07:22.530 --> 00:07:24.880
with the middle of the screen.

00:07:24.880 --> 00:07:26.500
Now, the third thing
that is different

00:07:26.500 --> 00:07:28.750
is that the system UI
visibility change listeners

00:07:28.750 --> 00:07:31.600
that you created before
will not be triggered.

00:07:31.600 --> 00:07:34.600
Because this state, this
temporarily visible system

00:07:34.600 --> 00:07:37.040
bar state, is intended
to be very transient.

00:07:37.040 --> 00:07:40.620
And your app should basically
be completely unaware of this.

00:07:40.620 --> 00:07:42.940
And last but not
least, the system

00:07:42.940 --> 00:07:45.400
will not actually
clear this flag.

00:07:45.400 --> 00:07:47.890
So when the user swipes down
from the top of the screen,

00:07:47.890 --> 00:07:49.260
those flags will stay there.

00:07:49.260 --> 00:07:50.600
They won't be cleared.

00:07:50.600 --> 00:07:53.680
And this gives this
flag the sticky name.

00:07:53.680 --> 00:07:57.150
Now, the code for immersive
sticky is really simple.

00:07:57.150 --> 00:07:59.370
Any time the window
receives focus,

00:07:59.370 --> 00:08:01.760
simply set the
immersive sticky flag,

00:08:01.760 --> 00:08:03.947
along with the other
flags mentioned before.

00:08:03.947 --> 00:08:05.780
Now you don't have to
worry about the system

00:08:05.780 --> 00:08:07.840
clearing this flag due
to user interaction,

00:08:07.840 --> 00:08:11.100
because again, the
flag is sticky.

00:08:11.100 --> 00:08:14.140
OK, so let's summarize
with some use cases.

00:08:14.140 --> 00:08:16.610
When should you use
these new flags?

00:08:16.610 --> 00:08:18.860
So if you're building a
video player or something

00:08:18.860 --> 00:08:22.460
else that requires
minimal user interaction,

00:08:22.460 --> 00:08:25.180
you'll want to use something
called the lean back approach.

00:08:25.180 --> 00:08:28.050
And this gets its name
from, you start watching,

00:08:28.050 --> 00:08:30.910
or you turn on the
content, and you lean back.

00:08:30.910 --> 00:08:33.234
And you don't really do
much else with the screen.

00:08:33.234 --> 00:08:35.150
Now, the lean back
approach has been available

00:08:35.150 --> 00:08:36.970
since Android 4.0.

00:08:36.970 --> 00:08:41.140
It's been refined in Jelly
Bean, Android 4.1, and so on.

00:08:41.140 --> 00:08:43.350
And it simply involves
using the full screen

00:08:43.350 --> 00:08:47.230
and hide navigation system
UI visibility flags.

00:08:47.230 --> 00:08:49.970
Now in this mode, in
this lean back approach,

00:08:49.970 --> 00:08:52.410
any interaction with the
screen will automatically

00:08:52.410 --> 00:08:55.160
show the system bars and
other playback controls

00:08:55.160 --> 00:08:56.624
that you've defined.

00:08:56.624 --> 00:08:58.290
if you're building
something like a book

00:08:58.290 --> 00:09:01.890
reader or a magazine, or
something that has a little bit

00:09:01.890 --> 00:09:04.790
more interaction, you'll
want to use the new Immersive

00:09:04.790 --> 00:09:08.550
flag in addition to Fullscreen
and Hide Navigation.

00:09:08.550 --> 00:09:10.910
In this case, swiping up
from the top of the screen

00:09:10.910 --> 00:09:15.960
should reveal the system bars in
addition to your own UI chrome.

00:09:15.960 --> 00:09:18.590
Lastly, if you're building
something truly immersive

00:09:18.590 --> 00:09:21.010
such as a game or
a drawing app, you

00:09:21.010 --> 00:09:23.470
may want to use the immersive
sticky flag in addition

00:09:23.470 --> 00:09:25.450
to the Fullscreen and
Hide Navigation flags,

00:09:25.450 --> 00:09:27.155
again, as we talked before.

00:09:27.155 --> 00:09:29.280
In this case, swiping up
from the top of the screen

00:09:29.280 --> 00:09:31.970
will very briefly
reveal the system bars

00:09:31.970 --> 00:09:35.540
in a very, very transient state.

00:09:35.540 --> 00:09:38.720
So that's immersive mode
in Android 4.4 KitKat.

00:09:38.720 --> 00:09:40.730
Check the video
description on YouTube

00:09:40.730 --> 00:09:42.420
for links to the sample code.

00:09:42.420 --> 00:09:43.970
Thanks.

