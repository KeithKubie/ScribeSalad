WEBVTT
Kind: captions
Language: en

00:00:00.934 --> 00:00:06.080
[APPLAUSE]

00:00:06.080 --> 00:00:08.029
NAT DUCA: Hey everybody.

00:00:08.029 --> 00:00:09.130
Wow.

00:00:09.130 --> 00:00:11.180
Thanks for coming out.

00:00:11.180 --> 00:00:13.940
I guess you're going to have to
listen to me for a little bit.

00:00:13.940 --> 00:00:16.970
Yeah, I tend to feel like I'm in
the graphics hacker mood today.

00:00:16.970 --> 00:00:21.610
So what I do, when they let me
out of my cage to come here is,

00:00:21.610 --> 00:00:25.030
I try to explain what the Chrome
graphics team, and basically

00:00:25.030 --> 00:00:27.804
the Blink engineering team
that works on smoothness-- what

00:00:27.804 --> 00:00:29.720
we're trying to do, what
we're thinking about.

00:00:29.720 --> 00:00:31.840
There's sort of this chasm
between us implementers

00:00:31.840 --> 00:00:33.880
and the real world,
because like I said,

00:00:33.880 --> 00:00:36.760
they don't let us
out of our cages.

00:00:36.760 --> 00:00:38.960
I've been working on the
graphics stack in Chrome

00:00:38.960 --> 00:00:43.080
for about four years, and
we've originally titled this,

00:00:43.080 --> 00:00:46.870
'The Pursuit of 60fps
Everywhere,' because we've been

00:00:46.870 --> 00:00:51.020
trying to get 60fps on
MacBook, 60fps on Android,

00:00:51.020 --> 00:00:53.490
60fps on old
Windows XP machines,

00:00:53.490 --> 00:00:55.300
and that's a nightmare.

00:00:58.410 --> 00:01:01.850
We've been trying to do, when
you have some old nasty sites;

00:01:01.850 --> 00:01:05.750
a CuteOverload.com, which is
just a pile of animated .gifs,

00:01:05.750 --> 00:01:07.730
and we're trying
to make that 60fps.

00:01:07.730 --> 00:01:09.460
And at the same
time, we're trying

00:01:09.460 --> 00:01:11.668
to make some nice mobile
apps that people are making,

00:01:11.668 --> 00:01:14.460
that are gorgeous,
run at 60fps too.

00:01:14.460 --> 00:01:16.184
And about last year,
we started thinking,

00:01:16.184 --> 00:01:17.100
this is kind of crazy.

00:01:17.100 --> 00:01:19.830
We're putting a lot of
energy architecturally

00:01:19.830 --> 00:01:22.130
in dealing with sites
like CuteOverload,

00:01:22.130 --> 00:01:25.685
and we're not thinking
a lot about mobile.

00:01:25.685 --> 00:01:27.060
Or we're thinking
a lot about it,

00:01:27.060 --> 00:01:29.710
but when we look
at are folks who

00:01:29.710 --> 00:01:33.630
are trying to make mobile
content, we started noticing,

00:01:33.630 --> 00:01:34.870
this hurts.

00:01:34.870 --> 00:01:38.260
These people are
in severe anguish.

00:01:38.260 --> 00:01:42.380
And so what we decided is,
let's really double down

00:01:42.380 --> 00:01:43.330
on this mobile story.

00:01:43.330 --> 00:01:48.845
How do we make 60fps of
mobile content an achievable

00:01:48.845 --> 00:01:52.251
and sort of reliable reality?

00:01:52.251 --> 00:01:54.500
And that's been a bit of a
journey over the last year.

00:01:54.500 --> 00:01:56.166
We really started
refocusing and saying,

00:01:56.166 --> 00:01:59.630
no, no, that's a terrible
desktop site-- screw it.

00:01:59.630 --> 00:02:03.100
Let's make mobile
really amazing.

00:02:03.100 --> 00:02:06.730
So this is a graphic stack
talk, so no graphics talk

00:02:06.730 --> 00:02:09.759
is going to be complete without
mentioning the layers word.

00:02:09.759 --> 00:02:14.810
And so what I want to do is,
do a really quick, deep--

00:02:14.810 --> 00:02:17.825
or a really quick
crash course on layers.

00:02:17.825 --> 00:02:19.450
And then move on to
what we're thinking

00:02:19.450 --> 00:02:22.110
about rendering and
60fps in the future.

00:02:22.110 --> 00:02:23.970
There's a lot of material
up on JankFree.org

00:02:23.970 --> 00:02:26.310
that you all can go read.

00:02:26.310 --> 00:02:30.510
There's a great talk by our
Paul, from I/O this year,

00:02:30.510 --> 00:02:32.450
that sort of explains
how to get 60fps

00:02:32.450 --> 00:02:35.840
on all the browsers,
using layers, using things

00:02:35.840 --> 00:02:39.130
like will-change,
using transforms.

00:02:39.130 --> 00:02:40.670
I'm going to do
short form of it,

00:02:40.670 --> 00:02:42.670
but if you really kind
of feel blown away

00:02:42.670 --> 00:02:45.720
by what I end up talking
about, go to JankFree,

00:02:45.720 --> 00:02:48.340
check out those talks; they
really put it in perspective

00:02:48.340 --> 00:02:50.950
for you.

00:02:50.950 --> 00:02:53.790
So layers.

00:02:53.790 --> 00:02:58.570
These are two pictures
from Polymer.org content.

00:02:58.570 --> 00:03:02.460
The left is the quiz app, the
right is the paper sampler.

00:03:02.460 --> 00:03:06.010
And this is the way the browser
sees those pages, tilted,

00:03:06.010 --> 00:03:08.160
using our tool called
FrameViewer, in order

00:03:08.160 --> 00:03:11.770
to see the layers in the page,
versus what the user sees.

00:03:11.770 --> 00:03:13.470
What the browser is
doing every frame,

00:03:13.470 --> 00:03:15.640
is it's looking at your
Dom any time you change it,

00:03:15.640 --> 00:03:19.140
and it's going, eh,
well, that's scrolling,

00:03:19.140 --> 00:03:21.242
and that has an animation
on it, so I'm gonna, I

00:03:21.242 --> 00:03:23.200
think they're going to
move that in the future.

00:03:23.200 --> 00:03:24.380
It's sort of guessing.

00:03:24.380 --> 00:03:27.130
And all it does is,
we sort of assume

00:03:27.130 --> 00:03:30.010
that painting and the
rendering, and the HTML stack

00:03:30.010 --> 00:03:31.660
is going to be horribly slow.

00:03:31.660 --> 00:03:34.620
And so we take a picture of
whatever part of the page

00:03:34.620 --> 00:03:36.370
we think is going to
move around together.

00:03:36.370 --> 00:03:37.490
We take a picture of it.

00:03:37.490 --> 00:03:40.130
We call that a layer--
think Photoshop layers.

00:03:40.130 --> 00:03:43.270
And we shovel that off to the
GPU, and we keep it there.

00:03:43.270 --> 00:03:47.210
And so unsurprisingly,
if you go and muck

00:03:47.210 --> 00:03:49.650
around with an element
that has been lucky enough

00:03:49.650 --> 00:03:53.380
to get a layer, and you start
moving it around with just two

00:03:53.380 --> 00:03:56.760
properties, transform
and opacity-- if you just

00:03:56.760 --> 00:03:59.520
do those two things, then you're
hitting the absolute fastest

00:03:59.520 --> 00:04:03.550
path that a browser has to
moving something around.

00:04:03.550 --> 00:04:07.771
But there's this whole problem
of, well if you have a layer.

00:04:07.771 --> 00:04:09.770
So in the yesteryear,
there were a lot of hacks;

00:04:09.770 --> 00:04:13.530
everybody's seen the Webkit
transform translateZ(0) kind

00:04:13.530 --> 00:04:16.779
of incantation, which
is exactly content free.

00:04:16.779 --> 00:04:19.010
It means nothing, right?

00:04:19.010 --> 00:04:21.459
In the sort of
spirit of say what

00:04:21.459 --> 00:04:24.210
you mean, what we did early
last year after realizing

00:04:24.210 --> 00:04:28.294
that this whole thing is a mass,
is we worked with Mozilla--

00:04:28.294 --> 00:04:30.210
or more appropriately,
Mozilla worked with us,

00:04:30.210 --> 00:04:32.510
to create this will-change spec.

00:04:32.510 --> 00:04:34.540
And what happens in
the will-change spec,

00:04:34.540 --> 00:04:38.980
is you say to us, I'm going
to change this element left.

00:04:38.980 --> 00:04:41.760
Or I'm going to change
this element to transform.

00:04:41.760 --> 00:04:43.780
And then what we do
is, we factor that

00:04:43.780 --> 00:04:46.780
into our calculation--
what should get a layer?

00:04:46.780 --> 00:04:50.344
And then based on that, you
usually get what you request.

00:04:50.344 --> 00:04:51.760
So if you hint
something as having

00:04:51.760 --> 00:04:55.689
a changing left, and it's
big, you'll get a layer.

00:04:55.689 --> 00:04:57.730
This is really, really
important for performance,

00:04:57.730 --> 00:05:00.190
as you can kind of imagine.

00:05:00.190 --> 00:05:03.870
If you don't hint the browser
about what's going to change,

00:05:03.870 --> 00:05:06.070
then you get basically
a flat world.

00:05:06.070 --> 00:05:08.600
Your whole Dom
becomes one layer,

00:05:08.600 --> 00:05:12.150
and any time anything starts
moving, either you'll get lucky

00:05:12.150 --> 00:05:14.530
and it pops out, and it
becomes its own layer.

00:05:14.530 --> 00:05:18.450
Or just, it submarines
through, and the whole layer

00:05:18.450 --> 00:05:21.520
starts repaint storming,
and kittens cry,

00:05:21.520 --> 00:05:22.760
and you don't get a space.

00:05:22.760 --> 00:05:25.400
Anyway, with
will-change, everything

00:05:25.400 --> 00:05:29.990
pops out to its own layer,
and goodness results.

00:05:29.990 --> 00:05:33.360
So this is one of
the Polymer demos.

00:05:33.360 --> 00:05:35.337
And the thing that
I wanted-- I'm not

00:05:35.337 --> 00:05:36.920
going to do an
extensive demo of this,

00:05:36.920 --> 00:05:39.450
but what characterizes
sort of these demos,

00:05:39.450 --> 00:05:43.460
is that they're nice and
responsive, even on your phone.

00:05:43.460 --> 00:05:45.472
You know-- I don't know
what I'm typing here,

00:05:45.472 --> 00:05:46.930
but each one of
these things that's

00:05:46.930 --> 00:05:49.630
moving around as I do it,
you can guarantee it's

00:05:49.630 --> 00:05:51.240
will-change to the gills.

00:05:51.240 --> 00:05:53.760
What we're doing is,
every single piece of it,

00:05:53.760 --> 00:05:57.550
is annotated with the
will-change annotation

00:05:57.550 --> 00:06:00.320
that best fits
that type of motion

00:06:00.320 --> 00:06:02.420
that it's going to undergo.

00:06:02.420 --> 00:06:08.490
So I actually want to show you
a little trace here of that,

00:06:08.490 --> 00:06:09.900
in the actual FrameViewer.

00:06:09.900 --> 00:06:12.930
So you saw those things
that I was showing before.

00:06:12.930 --> 00:06:16.411
This is sort of how the user
sees it-- not tilted obviously.

00:06:16.411 --> 00:06:18.660
And this is how the browser
sees it; each one of those

00:06:18.660 --> 00:06:20.060
is a layer.

00:06:20.060 --> 00:06:23.180
And so if we advance
through time,

00:06:23.180 --> 00:06:27.330
what you'll end up seeing is
this yellow dot should grow,

00:06:27.330 --> 00:06:31.240
you know-- after a stall to
give me a heart attack, right?

00:06:31.240 --> 00:06:33.095
So you know, this
yellow dot grows,

00:06:33.095 --> 00:06:34.720
and you see the whole
rest of the world

00:06:34.720 --> 00:06:37.020
is completely stationary.

00:06:37.020 --> 00:06:39.100
Just this yellow dot is growing.

00:06:39.100 --> 00:06:43.110
And what you'll see at the
end is-- there's that button,

00:06:43.110 --> 00:06:44.910
see it appearing?

00:06:44.910 --> 00:06:47.320
And then finally the
whole thing settles down,

00:06:47.320 --> 00:06:50.487
all the old Dom goes away,
and we've got our final image.

00:06:50.487 --> 00:06:52.320
And that's a really
good scripted animator--

00:06:52.320 --> 00:06:54.970
well, not scripted, but a
coordinated animation, where

00:06:54.970 --> 00:06:57.790
we've got everything
coming in nice and smooth,

00:06:57.790 --> 00:07:02.275
each layer is being transformed,
it's 60fps, happiness results.

00:07:05.120 --> 00:07:09.910
So layers, they're your friend;
will-change, super important.

00:07:09.910 --> 00:07:15.010
Hop over to JankFree for a
lot more information on them.

00:07:15.010 --> 00:07:20.806
But what I really want to
talk about today is why?

00:07:20.806 --> 00:07:21.680
When was the meeting?

00:07:21.680 --> 00:07:24.050
I missed it-- where
we sat down and we

00:07:24.050 --> 00:07:28.520
said, the way that you
will be 60fps on the web is

00:07:28.520 --> 00:07:31.020
through layers.

00:07:31.020 --> 00:07:33.890
And the way that you will
make things fast on the web

00:07:33.890 --> 00:07:37.410
is by turning off all the
web, and having two properties

00:07:37.410 --> 00:07:39.610
that you can touch;
translate and--

00:07:39.610 --> 00:07:41.734
or transform, and opacity.

00:07:41.734 --> 00:07:42.650
I missed that meeting.

00:07:42.650 --> 00:07:44.780
But man, that's
that a weird trade.

00:07:44.780 --> 00:07:45.280
Right?

00:07:45.280 --> 00:07:47.405
We've got all this great
expressiveness in the web,

00:07:47.405 --> 00:07:49.905
and we can only
use two properties.

00:07:49.905 --> 00:07:51.280
Now if you ask
around, you'll get

00:07:51.280 --> 00:07:54.700
a lot of answers
for why this is.

00:07:54.700 --> 00:07:58.010
I'd like to give you my personal
interpretation-- I'd, almost

00:07:58.010 --> 00:08:04.180
certainly wrong-- but here
goes: we, browser implementers,

00:08:04.180 --> 00:08:08.829
make our bread and butter
from browsing websites, just

00:08:08.829 --> 00:08:09.620
plain old websites.

00:08:09.620 --> 00:08:12.190
You've all been to probably
a dozen websites today,

00:08:12.190 --> 00:08:14.800
sort of mundane, you know--
maybe they were mobile

00:08:14.800 --> 00:08:19.170
optimized, but the vast
majority of page views aren't.

00:08:19.170 --> 00:08:22.400
So there's these big
sites that are designed

00:08:22.400 --> 00:08:26.070
for a big powerful computer,
that's probably plugged in,

00:08:26.070 --> 00:08:29.970
and you're shoving it into
your tiny little phone.

00:08:29.970 --> 00:08:32.029
And you're asking
it to load quickly,

00:08:32.029 --> 00:08:34.070
you're asking it to scroll,
even while it's still

00:08:34.070 --> 00:08:35.945
the loading-- maybe
you're going to pinch it,

00:08:35.945 --> 00:08:39.070
so that you can tap
a link and move on.

00:08:39.070 --> 00:08:43.120
And this has been the
focus of browser vendors

00:08:43.120 --> 00:08:44.670
since these mobile
phones came out.

00:08:44.670 --> 00:08:48.660
So Chrome was madly-- our
team was madly just trying

00:08:48.660 --> 00:08:50.410
to make Chrome a
decent web browser when

00:08:50.410 --> 00:08:53.410
viewing these pages.

00:08:53.410 --> 00:08:56.480
So why is this a problem?

00:08:56.480 --> 00:09:00.600
I took the Meetup desktop site,
and I shoved it onto a Nexus 5,

00:09:00.600 --> 00:09:02.240
and I profiled it.

00:09:02.240 --> 00:09:06.650
And the way I profiled it
was with DevTools these days,

00:09:06.650 --> 00:09:11.040
is coming with a new
version of the timeline.

00:09:11.040 --> 00:09:13.890
This looks like
plain old DevTools,

00:09:13.890 --> 00:09:18.160
but in the Experiments tab,
there's now this fancy little

00:09:18.160 --> 00:09:22.720
thing called 'Timeline on trace
events.' And what that does is,

00:09:22.720 --> 00:09:24.360
it gives you this button.

00:09:24.360 --> 00:09:27.690
And then you have about tracing,
type displays, and about

00:09:27.690 --> 00:09:31.059
tracing type data,
right in your thing.

00:09:31.059 --> 00:09:32.100
Now why does this matter?

00:09:32.100 --> 00:09:35.230
It makes it really easy to
compute a table like this,

00:09:35.230 --> 00:09:37.910
which says, during
this period of time,

00:09:37.910 --> 00:09:40.160
this is exactly
where your time went.

00:09:40.160 --> 00:09:41.720
Now when you talk
about smoothness,

00:09:41.720 --> 00:09:44.100
like when you talk
about page load,

00:09:44.100 --> 00:09:46.270
you care about how much
time is going where.

00:09:46.270 --> 00:09:48.150
But we don't have a
network to contend with.

00:09:48.150 --> 00:09:52.640
So all we care about is how much
CPU was being used right now,

00:09:52.640 --> 00:09:55.180
and how do we make it smaller?

00:09:55.180 --> 00:09:57.940
The Meetup desktop site has
literally 2000 milliseconds

00:09:57.940 --> 00:09:59.520
of page load activity.

00:09:59.520 --> 00:10:02.540
And then even when it's static,
even when it's just completely

00:10:02.540 --> 00:10:05.490
you're not touching it and then
you just scroll up and down,

00:10:05.490 --> 00:10:12.100
it does another 250 milliseconds
or whatever-- 190 milliseconds

00:10:12.100 --> 00:10:16.920
of work, every
second when I scroll.

00:10:16.920 --> 00:10:20.090
I don't know what it's doing,
it's doing some jQuery thing.

00:10:20.090 --> 00:10:21.970
But like, you'd
think-- you'd think

00:10:21.970 --> 00:10:23.470
nothing's changing, right?

00:10:23.470 --> 00:10:26.600
I go to the stupid thing,
and I scroll it up and down.

00:10:26.600 --> 00:10:28.560
It's not changing, but
that thing is literally

00:10:28.560 --> 00:10:34.450
using 150 milliseconds every
second, to do something.

00:10:34.450 --> 00:10:38.520
And this is the world that
a browser vendor comes into,

00:10:38.520 --> 00:10:40.990
which is lots of content
that people really

00:10:40.990 --> 00:10:43.150
need to see right?

00:10:43.150 --> 00:10:47.620
But a web page that, either
because it's loading,

00:10:47.620 --> 00:10:52.850
or because somebody's script
is having a bad hair day,

00:10:52.850 --> 00:10:55.580
it is unresponsive.

00:10:55.580 --> 00:10:57.180
So it's not acceptable
for us to just

00:10:57.180 --> 00:10:59.000
have you when you go to
this site on your phone,

00:10:59.000 --> 00:11:00.420
just be completely
unresponsive--

00:11:00.420 --> 00:11:02.110
like, oops, sorry,
jQuery is thinking,

00:11:02.110 --> 00:11:05.040
you can't scroll right now.

00:11:05.040 --> 00:11:09.720
Layers are the defense
mechanism that we came up with,

00:11:09.720 --> 00:11:11.840
to deal with an adversarial web.

00:11:14.890 --> 00:11:17.860
Let me do a demo to
try to explain this.

00:11:17.860 --> 00:11:20.840
So bare with.

00:11:20.840 --> 00:11:23.010
We've got, everybody can
learn my unlock code.

00:11:25.780 --> 00:11:29.082
We've got a simple page that
is already got the check box.

00:11:29.082 --> 00:11:31.165
We've got a simple page,
that scrolls up and down.

00:11:31.165 --> 00:11:34.000
This is a simple demo, OK?

00:11:34.000 --> 00:11:37.459
Would we all agree that
this is mostly smooth?

00:11:37.459 --> 00:11:38.750
It's sticking to my finger-ish.

00:11:41.195 --> 00:11:43.070
And then I'm going to
press this jank button.

00:11:43.070 --> 00:11:44.736
And what the jank
button is going to do,

00:11:44.736 --> 00:11:46.410
is it's just going
to do a set time out,

00:11:46.410 --> 00:11:49.840
that literally just
pegs the JS for, I

00:11:49.840 --> 00:11:54.050
think it's 200
milliseconds randomly.

00:11:54.050 --> 00:11:56.130
And this is to simulate
that sort of situation

00:11:56.130 --> 00:12:00.402
of the jQuery thing kicking
off and being cranky.

00:12:00.402 --> 00:12:03.820
It's still smooth, right?

00:12:03.820 --> 00:12:07.700
What this is doing is,
we're using these layers

00:12:07.700 --> 00:12:10.320
to compensate for the
jank and basically hide

00:12:10.320 --> 00:12:12.600
the fact that they page
is being evil from you,

00:12:12.600 --> 00:12:14.860
so that you get a
good experience.

00:12:14.860 --> 00:12:17.640
And if you don't believe
me, we can measure,

00:12:17.640 --> 00:12:21.630
measure, measure--
pop open this,

00:12:21.630 --> 00:12:24.370
take a timeline
recording, and I'm

00:12:24.370 --> 00:12:28.810
going to pop over to my screen.

00:12:28.810 --> 00:12:30.020
Hands going everywhere.

00:12:30.020 --> 00:12:34.450
This is the trace of
what this poor app is

00:12:34.450 --> 00:12:35.970
doing in JavaScript, right?

00:12:35.970 --> 00:12:37.660
A 300 millisecond
jank, but it was

00:12:37.660 --> 00:12:40.990
completely smooth to my finger.

00:12:40.990 --> 00:12:41.580
OK.

00:12:41.580 --> 00:12:43.420
So I'm a Chrome
hacker, so I now have

00:12:43.420 --> 00:12:45.844
to put up an
architecture diagram.

00:12:45.844 --> 00:12:47.760
Because we've gone a
whole what-- five minutes

00:12:47.760 --> 00:12:50.220
without one.

00:12:50.220 --> 00:12:51.930
This is the grossly
oversimplified way

00:12:51.930 --> 00:12:54.240
that I see most web
browsers existing last year,

00:12:54.240 --> 00:12:56.230
and really this year too.

00:12:56.230 --> 00:12:59.470
The composite step
sits at the end

00:12:59.470 --> 00:13:02.930
of the pipeline,
that has your layers.

00:13:02.930 --> 00:13:05.480
It also receives all the
input from your finger

00:13:05.480 --> 00:13:08.740
or from your mouse, and
it drives the screen.

00:13:08.740 --> 00:13:11.410
And when you scroll, it receives
the input, updates the layers,

00:13:11.410 --> 00:13:14.280
and directly drives the screen.

00:13:14.280 --> 00:13:16.340
And that whole left
side; JavaScript

00:13:16.340 --> 00:13:18.610
getting the on scroll,
recalc and layout

00:13:18.610 --> 00:13:22.660
running and response, maybe
your set timeout firing

00:13:22.660 --> 00:13:24.990
and changing the div,
and doing the background

00:13:24.990 --> 00:13:28.890
or whatever it is, all of
that can go super, super slow,

00:13:28.890 --> 00:13:30.280
and it will scroll, right?

00:13:30.280 --> 00:13:32.143
So we've optimized
really, really hard core

00:13:32.143 --> 00:13:34.143
in the direction to make
that scroll responsive.

00:13:39.540 --> 00:13:42.010
There's this sort of trade
that we've made implicitly

00:13:42.010 --> 00:13:45.360
in hyper-optimizing
for smoothness, which

00:13:45.360 --> 00:13:48.600
is, you don't really
reliably find out

00:13:48.600 --> 00:13:50.830
about the fact that
we scrolled the page.

00:13:50.830 --> 00:13:52.450
Sure, you can
listen to onscroll,

00:13:52.450 --> 00:13:55.060
but it's not prevent
defaultable, right?

00:13:55.060 --> 00:13:57.620
It's kind of late, right?

00:13:57.620 --> 00:14:00.010
If you try to do
something in response

00:14:00.010 --> 00:14:02.510
to an onscroll, and
position something,

00:14:02.510 --> 00:14:05.870
then everything sort
of jitters around.

00:14:05.870 --> 00:14:09.137
You don't get any notice
of like touch events

00:14:09.137 --> 00:14:11.470
once scrolling begins-- it's
all just sort of bolted on.

00:14:11.470 --> 00:14:13.952
Like we sort of send
a little message over

00:14:13.952 --> 00:14:15.410
from the compositor
side of things,

00:14:15.410 --> 00:14:21.070
all the way over to JSA, and
hey, we scrolled, if you cared.

00:14:21.070 --> 00:14:23.410
But we were 60fps.

00:14:23.410 --> 00:14:25.240
And this is the
architecture we have.

00:14:25.240 --> 00:14:28.430
And so there's this value
proposition that we said,

00:14:28.430 --> 00:14:30.970
that was we gave you 60fps,
aren't you really happy?

00:14:30.970 --> 00:14:33.680
And having worked on
this architecture,

00:14:33.680 --> 00:14:36.180
and getting it working,
we are pretty darn excited

00:14:36.180 --> 00:14:39.880
that we could give you 60fps
on these terrible devices.

00:14:39.880 --> 00:14:41.485
But what we're
saying in exchanges

00:14:41.485 --> 00:14:44.890
is, if you wanted to do anything
as an application that's

00:14:44.890 --> 00:14:48.780
compelling; you want the fancy
drawer, or the pull to refresh,

00:14:48.780 --> 00:14:51.695
you must represent all this as
a CSS animation or as scrolling.

00:14:54.252 --> 00:14:55.710
If you just remove
the architecture

00:14:55.710 --> 00:14:57.418
diagram, because those
are boring anyway.

00:14:57.418 --> 00:14:59.250
And you look at these
two things together,

00:14:59.250 --> 00:15:01.124
you kind of see that
there's this dissonance.

00:15:01.124 --> 00:15:04.570
This is not a great
value proposition.

00:15:04.570 --> 00:15:09.100
Give me a browser that maybe
isn't a 100% efficient,

00:15:09.100 --> 00:15:13.500
but for the love of God,
doesn't do this crazy stuff.

00:15:13.500 --> 00:15:15.390
We want the a
rational web browser,

00:15:15.390 --> 00:15:17.380
because that's the
one that empowers

00:15:17.380 --> 00:15:19.840
developers to do great things.

00:15:19.840 --> 00:15:21.981
And this weird thing
with the scroll bypassed

00:15:21.981 --> 00:15:23.980
that goes back to the
sometimes, blah blah blah,

00:15:23.980 --> 00:15:26.720
that nobody understands except
like three Chrome engineers

00:15:26.720 --> 00:15:31.265
and a couple at Mozilla,
et cetera, doesn't cut it.

00:15:35.360 --> 00:15:39.270
So we have this whole
crisis of faith last year,

00:15:39.270 --> 00:15:42.699
and we shouted at each
other in a Googly way.

00:15:42.699 --> 00:15:43.740
So everybody was smiling.

00:15:43.740 --> 00:15:49.870
And then we decided OK,
let's do some stuff.

00:15:49.870 --> 00:15:54.370
Chrome 37 really is-- we've
been making changes on trunks--

00:15:54.370 --> 00:15:57.120
so Chrome 31, 32,
33-- all of those

00:15:57.120 --> 00:15:59.870
have come out with little
bits of the improvements.

00:15:59.870 --> 00:16:02.010
37 is where a lot of things
just sort of happened

00:16:02.010 --> 00:16:02.840
to come together.

00:16:02.840 --> 00:16:05.250
And so it's a very
exciting release for us,

00:16:05.250 --> 00:16:07.300
inasmuch as Chrome,
Chromies get excited

00:16:07.300 --> 00:16:09.680
about a particular provision.

00:16:09.680 --> 00:16:11.180
We think it's a lot better.

00:16:11.180 --> 00:16:14.820
And I tried to do a laundry
list of things that change it.

00:16:14.820 --> 00:16:18.710
And the thing I'd like you to
think about as you hear this,

00:16:18.710 --> 00:16:21.202
is well, yes, this is going
to be Chrome- specific,

00:16:21.202 --> 00:16:23.410
but the thing is, start
challenging those assumptions

00:16:23.410 --> 00:16:25.576
that maybe you've got built
in to you of oh, my god,

00:16:25.576 --> 00:16:27.070
I could only do
these two things.

00:16:27.070 --> 00:16:28.955
Start going, hey, does
this change that demo

00:16:28.955 --> 00:16:30.080
that I tried the other day?

00:16:30.080 --> 00:16:31.720
Maybe I'll try it again.

00:16:31.720 --> 00:16:33.612
Maybe this'll be fun this time.

00:16:33.612 --> 00:16:35.320
So the first thing we
did was we moved in

00:16:35.320 --> 00:16:38.760
and put it where it
belongs, on the left, here.

00:16:38.760 --> 00:16:40.010
Just put it where it is.

00:16:40.010 --> 00:16:42.880
JavaScript says that
there's window.onscroll.

00:16:42.880 --> 00:16:47.060
Let's try to get the world
back to a place where

00:16:47.060 --> 00:16:48.910
window.onscroll
fires, and it fires

00:16:48.910 --> 00:16:51.760
after you have
window.touchbegin,

00:16:51.760 --> 00:16:53.100
for instance, right?

00:16:53.100 --> 00:16:57.620
And maybe we could even make
preventDefault behave sanely.

00:16:57.620 --> 00:16:59.650
So we started doing
that, and Chrome 37

00:16:59.650 --> 00:17:01.800
includes this new
touch model, and it's

00:17:01.800 --> 00:17:04.160
very close to
Mozilla's actually.

00:17:04.160 --> 00:17:10.329
We don't think it's 100% there,
but it's a lot more rational,

00:17:10.329 --> 00:17:14.380
as far as input is
in the right place.

00:17:14.380 --> 00:17:16.750
And sort of related to
that, we changed the timing

00:17:16.750 --> 00:17:19.910
in all the machinery that drives
both requestanimationframe

00:17:19.910 --> 00:17:21.180
onscroll.

00:17:21.180 --> 00:17:22.930
It used to be that if
you position stuff--

00:17:22.930 --> 00:17:26.599
I alluded to this-- if you
position stuff in onscroll,

00:17:26.599 --> 00:17:29.750
and you tried to scroll
at the same time,

00:17:29.750 --> 00:17:33.190
you'd see them sort of
never quite line up.

00:17:33.190 --> 00:17:36.210
And we did a lot of tweaks, so
that if you stay within a 16

00:17:36.210 --> 00:17:39.230
millisecond budget, you can
do onscroll positioning.

00:17:39.230 --> 00:17:42.740
So you can do sort of a
ghetto position sticky now,

00:17:42.740 --> 00:17:45.290
or a ghetto pull
to refresh, if you

00:17:45.290 --> 00:17:47.190
pair the input
changes we've done.

00:17:47.190 --> 00:17:48.460
Or a couple other things.

00:17:48.460 --> 00:17:50.790
And we're aiming for
even bigger there.

00:17:50.790 --> 00:17:54.470
But this is sort
of the first thing.

00:17:54.470 --> 00:17:56.470
Now we also did just-- I
guess you could call it

00:17:56.470 --> 00:17:59.120
a spring cleaning of the code.

00:17:59.120 --> 00:18:01.930
When we began the
project, about a year ago,

00:18:01.930 --> 00:18:05.690
we were really worried that like
the web was insolvably fast.

00:18:05.690 --> 00:18:07.100
Un-solvably fast?

00:18:07.100 --> 00:18:08.110
Slow.

00:18:08.110 --> 00:18:12.100
Basically we were worried
that CSS is algorithmically

00:18:12.100 --> 00:18:13.640
impossible to do at real time.

00:18:13.640 --> 00:18:18.210
Because in CSS, you have a thing
where you have n selectors,

00:18:18.210 --> 00:18:20.830
and m elements, and
you have to sort

00:18:20.830 --> 00:18:25.160
of cross product them to
figure out what matches.

00:18:25.160 --> 00:18:26.890
And this is just
sort of n times m,

00:18:26.890 --> 00:18:29.590
it's a big number-- oh, my god.

00:18:29.590 --> 00:18:33.460
And similar around layout; like
layout has so many intricacies;

00:18:33.460 --> 00:18:36.650
floats, you know,
line management--

00:18:36.650 --> 00:18:38.600
like it's just hairy stuff.

00:18:38.600 --> 00:18:41.300
And so we were really
worried that this second box,

00:18:41.300 --> 00:18:43.670
the recalc would just
be-- and the layout--

00:18:43.670 --> 00:18:46.610
would be impossible
to do at 60fps.

00:18:46.610 --> 00:18:47.731
And we dug and we dug.

00:18:47.731 --> 00:18:49.230
And we had a couple
crises of faith.

00:18:49.230 --> 00:18:51.646
And we basically found that
the reason that this was slow,

00:18:51.646 --> 00:18:55.810
in all the Chromes in all
the webkits that preceded us,

00:18:55.810 --> 00:18:57.440
was because of some bugs.

00:18:57.440 --> 00:19:00.210
And just some unoptimized code,
and just sort of the accretion

00:19:00.210 --> 00:19:01.840
a big software.

00:19:01.840 --> 00:19:03.370
And when we fixed
it, we found five,

00:19:03.370 --> 00:19:05.780
ten-- we found
optimizations and winds that

00:19:05.780 --> 00:19:08.622
were just kind of mind blowing.

00:19:08.622 --> 00:19:10.455
And we did the same in
the compositing stack

00:19:10.455 --> 00:19:12.750
and found lot of
performance winds too.

00:19:12.750 --> 00:19:15.490
So this spring cleaning that
we did essentially, just

00:19:15.490 --> 00:19:19.520
sped up Chrome's sort of,
two of these critical paths,

00:19:19.520 --> 00:19:22.470
by-- for us, for
graphics engineers,

00:19:22.470 --> 00:19:25.870
are some pretty neat numbers.

00:19:25.870 --> 00:19:31.130
So we did one final thing, which
is oh, my god, fast painting.

00:19:31.130 --> 00:19:33.240
So if you've studied
painting, and you've

00:19:33.240 --> 00:19:37.530
studied hitting 60fps, we always
say, oh, my gosh, don't paint.

00:19:37.530 --> 00:19:39.780
Whatever you do,
turn off your-- do

00:19:39.780 --> 00:19:41.420
everything you can
to avoid a repaint.

00:19:41.420 --> 00:19:44.180
Because repaints
are catastrophic.

00:19:44.180 --> 00:19:48.500
And you know, that's true.

00:19:48.500 --> 00:19:50.200
But it also stinks.

00:19:50.200 --> 00:19:50.720
Right?

00:19:50.720 --> 00:19:53.120
Because you want to paint.

00:19:53.120 --> 00:19:55.055
You might want to
show something new,

00:19:55.055 --> 00:19:56.430
and then you got
to paint, right?

00:19:56.430 --> 00:19:59.650
So why does that have
to be a mandatory jank?

00:19:59.650 --> 00:20:03.370
So the technique that we
wanted to bring out to fix this

00:20:03.370 --> 00:20:04.390
is GPU rasterization.

00:20:07.100 --> 00:20:09.340
GPU rasterization
is just where we

00:20:09.340 --> 00:20:13.679
use the GPU to fill in
the pixels on the screen,

00:20:13.679 --> 00:20:14.720
before we make the layer.

00:20:14.720 --> 00:20:16.160
So we've got a layer, and we
have to fill in the pixels

00:20:16.160 --> 00:20:16.659
in it.

00:20:16.659 --> 00:20:19.360
So if you have a white
layer and a border,

00:20:19.360 --> 00:20:21.660
then that's a draw--
like a WebGL draw,

00:20:21.660 --> 00:20:23.800
with the triangles
for the white,

00:20:23.800 --> 00:20:28.210
and then some more triangles
to represent the border.

00:20:28.210 --> 00:20:31.490
For many cases,
like simple content,

00:20:31.490 --> 00:20:33.880
the GPU is way, way, way
faster, than we can ever

00:20:33.880 --> 00:20:35.280
do with the CPU.

00:20:35.280 --> 00:20:36.680
But it's sort of
falls over, when

00:20:36.680 --> 00:20:40.069
you start throwing
like Gmail at it.

00:20:40.069 --> 00:20:41.610
And there's this
other pesky problem,

00:20:41.610 --> 00:20:45.290
which is like, when you used
to run this on an old Samsung

00:20:45.290 --> 00:20:46.774
phone, the phone
would just reboot

00:20:46.774 --> 00:20:48.065
when you went to certain pages.

00:20:51.060 --> 00:20:53.230
Which gives you a really
bad page load score.

00:20:56.200 --> 00:20:58.080
So we were really conflicted.

00:20:58.080 --> 00:21:01.250
It's like well, this
is so much faster,

00:21:01.250 --> 00:21:03.000
but the time that
we're going to need

00:21:03.000 --> 00:21:06.630
to get this working perfectly
on every device, for every piece

00:21:06.630 --> 00:21:08.620
of content-- make it
really good for Gmail,

00:21:08.620 --> 00:21:10.790
and really good
for mobile content,

00:21:10.790 --> 00:21:13.820
is heat death of the universe.

00:21:13.820 --> 00:21:16.710
So we settle on something
that is kind of awkward,

00:21:16.710 --> 00:21:19.950
but gets the content-- the
capability into people's hands.

00:21:19.950 --> 00:21:21.800
And we call that
the Magic Viewport.

00:21:21.800 --> 00:21:24.850
If you put this Viewport
on your content,

00:21:24.850 --> 00:21:27.320
and you have a phone that
we've enabled-- we've tested

00:21:27.320 --> 00:21:29.620
and we've verified that
your phone doesn't reboot,

00:21:29.620 --> 00:21:34.490
which is a good thing;
we will give you

00:21:34.490 --> 00:21:39.030
GPU rasterization instead
of the CPU rasterizing.

00:21:39.030 --> 00:21:42.430
And I have the understated
sentence; goodness results.

00:21:42.430 --> 00:21:45.420
So, demo.

00:21:45.420 --> 00:21:49.370
It's not a very interesting
demo, per tradition.

00:21:49.370 --> 00:21:52.130
So what I'm going to do
is show you the content,

00:21:52.130 --> 00:21:55.290
and then we'll come back to my
screen to show you the numbers.

00:21:55.290 --> 00:21:57.370
So this is just--
what we're going

00:21:57.370 --> 00:21:59.870
to do is we're going to look
at this piece of content, which

00:21:59.870 --> 00:22:02.800
is just an image, that
is animating its width.

00:22:02.800 --> 00:22:06.060
There's no transformed
kerfuffle here at all.

00:22:06.060 --> 00:22:09.750
We are literally animating the
width and height of an image.

00:22:09.750 --> 00:22:11.500
If you look really
carefully, you

00:22:11.500 --> 00:22:14.920
can see there's a drop shadow
on the right of the image, that

00:22:14.920 --> 00:22:16.890
stays nice and crisp
as it animates up.

00:22:16.890 --> 00:22:19.324
There's a one pixel
border around the image.

00:22:19.324 --> 00:22:20.740
This is the kind
of thing that you

00:22:20.740 --> 00:22:22.960
can't do with scale animations.

00:22:22.960 --> 00:22:25.460
And you see stuff like
this that's prettier

00:22:25.460 --> 00:22:28.700
when you tap a contact
icon on a phone,

00:22:28.700 --> 00:22:31.300
and the icon grows to be a
picture of a person, right?

00:22:31.300 --> 00:22:34.090
It looks gorgeous,
and you ooh and ah.

00:22:34.090 --> 00:22:35.800
That requires
repainting every frame.

00:22:35.800 --> 00:22:39.940
And this is something that
is really, really costly,

00:22:39.940 --> 00:22:43.860
in the old painting
architecture.

00:22:43.860 --> 00:22:46.630
In Chrome 37, you
can measure this

00:22:46.630 --> 00:22:50.270
without the Magic Viewport, and
what you'll see, is these paint

00:22:50.270 --> 00:22:52.420
times are obscene.

00:22:52.420 --> 00:22:54.780
So we're looking at
50, 60 milliseconds.

00:22:54.780 --> 00:22:56.340
That is not a frame make, right?

00:22:56.340 --> 00:22:59.060
16, that's three or four frames.

00:22:59.060 --> 00:23:00.984
Now it looks
decently smooth when

00:23:00.984 --> 00:23:02.150
you see it on the projector.

00:23:02.150 --> 00:23:06.590
But it's just, where we're
paying dearly for this look.

00:23:06.590 --> 00:23:12.810
So if we-- somewhere in here, I
have the Magic Viewport.html--

00:23:12.810 --> 00:23:19.000
and the only difference in this
is we put in that incantation.

00:23:19.000 --> 00:23:22.440
And so if you look at this
one-- I'm not going to show you,

00:23:22.440 --> 00:23:25.920
it's the same darn
thing on my screen.

00:23:25.920 --> 00:23:28.180
The trace looks completely
different, right?

00:23:28.180 --> 00:23:30.180
Those bars are
much, much smaller,

00:23:30.180 --> 00:23:32.070
and everything is hitting 60.

00:23:32.070 --> 00:23:34.490
The frames are 16 milliseconds.

00:23:34.490 --> 00:23:36.390
This is really good.

00:23:36.390 --> 00:23:37.920
And what's happening
here is the GPU

00:23:37.920 --> 00:23:42.850
in this case is just killing
it, as far as performance goes.

00:23:42.850 --> 00:23:47.000
So the Magic Viewport enables
sort of this future technology

00:23:47.000 --> 00:23:50.690
that we eventually want to
see throughout the Chrome

00:23:50.690 --> 00:23:51.597
ecosystem.

00:23:51.597 --> 00:23:53.180
And this gives you
early access to it,

00:23:53.180 --> 00:23:57.700
if you want to be sort of dog
fooding it, or trying it out.

00:23:57.700 --> 00:24:00.699
Now of course, there is this
restriction on your machine.

00:24:00.699 --> 00:24:02.490
But if you want to do
some experimentation,

00:24:02.490 --> 00:24:03.906
you could force
GPU rasterization,

00:24:03.906 --> 00:24:06.340
and it'll turn on.

00:24:06.340 --> 00:24:08.200
OK.

00:24:08.200 --> 00:24:11.190
So pause.

00:24:11.190 --> 00:24:15.250
We've been opinionated about--
this is kind of weird that we

00:24:15.250 --> 00:24:16.550
have to do all these layers.

00:24:16.550 --> 00:24:18.820
And then we talked
about what we've

00:24:18.820 --> 00:24:22.700
been doing so far to hit 60fps.

00:24:22.700 --> 00:24:26.100
And the message that I
really try to communicate

00:24:26.100 --> 00:24:28.380
is, we actually think
we're getting somewhere,

00:24:28.380 --> 00:24:32.170
where you can actually
hit 60fps pretty easily,

00:24:32.170 --> 00:24:33.829
and not kill yourself.

00:24:33.829 --> 00:24:36.120
Now if you want to be guaranteed
that you'll hit 60fps,

00:24:36.120 --> 00:24:38.930
you still want to invoke
the old transform,

00:24:38.930 --> 00:24:43.610
translate, be very
careful mechanisms.

00:24:43.610 --> 00:24:46.730
But in Chrome 37 and
probably much more

00:24:46.730 --> 00:24:50.190
as we proceed with our
relentless update cycle,

00:24:50.190 --> 00:24:51.690
you will see that
you can run each

00:24:51.690 --> 00:24:53.773
and every one of these
stages and have them firing

00:24:53.773 --> 00:24:57.127
every frame, and still
totally hit 60fps.

00:24:57.127 --> 00:24:58.710
And what we're working
toward is a way

00:24:58.710 --> 00:25:00.251
that you can think
about performance,

00:25:00.251 --> 00:25:01.924
in sort of a completely
rational way.

00:25:01.924 --> 00:25:03.590
Instead of having
this weird voodoo that

00:25:03.590 --> 00:25:07.412
like Paul in the back
understands, and I sort of you

00:25:07.412 --> 00:25:11.180
know, quarterback
coach that-- we

00:25:11.180 --> 00:25:13.680
want a model that's completely
understandable, and everybody

00:25:13.680 --> 00:25:14.950
could fit in their head.

00:25:14.950 --> 00:25:18.020
And this is sort of
what we've got in 37.

00:25:18.020 --> 00:25:21.770
There are two parts to
the performance model.

00:25:21.770 --> 00:25:24.730
First, you want to think
about what pipeline stage

00:25:24.730 --> 00:25:26.640
you're going to trigger running.

00:25:26.640 --> 00:25:29.636
So if you change the width
of something, then be recalc

00:25:29.636 --> 00:25:31.010
and layout system's
going to run,

00:25:31.010 --> 00:25:32.926
and then it's going to
trigger everything down

00:25:32.926 --> 00:25:33.840
in the pipeline.

00:25:33.840 --> 00:25:37.250
But if you change
transform and opacity, only

00:25:37.250 --> 00:25:39.070
to the bottom stage
of the composite stage

00:25:39.070 --> 00:25:40.489
is going to run.

00:25:40.489 --> 00:25:42.780
Now you'd think, hey, this
has been the case in browses

00:25:42.780 --> 00:25:43.400
since forever.

00:25:43.400 --> 00:25:44.990
Except bugs.

00:25:44.990 --> 00:25:48.290
Big browsers, big software,
and it turns out that

00:25:48.290 --> 00:25:52.650
even recently, when
you mutated opacity,

00:25:52.650 --> 00:25:54.750
if you did in the wrong
way, you would actually

00:25:54.750 --> 00:25:57.210
cause the whole darn
stack from recalc to run.

00:25:57.210 --> 00:25:59.010
And you'd end up with
repaints, and you'd

00:25:59.010 --> 00:26:00.760
be sitting there going,
I don't understand

00:26:00.760 --> 00:26:02.227
what's going on here.

00:26:02.227 --> 00:26:03.310
So we're cleaning this up.

00:26:03.310 --> 00:26:05.809
We're making this part of the
mental model completely clean.

00:26:05.809 --> 00:26:08.980
That if you mutate one
of these properties,

00:26:08.980 --> 00:26:12.310
you will get a predictable
set of things that run.

00:26:12.310 --> 00:26:16.864
And CSS triggers lets you
sort of reason about that.

00:26:16.864 --> 00:26:18.280
There's another
have of this model

00:26:18.280 --> 00:26:20.050
that we're working
on too; which is

00:26:20.050 --> 00:26:22.350
to give you sort of
this relatively easy

00:26:22.350 --> 00:26:25.330
to grab a hold of mental
model, for how long

00:26:25.330 --> 00:26:27.850
each of the steps of
the pipeline takes.

00:26:27.850 --> 00:26:30.520
Now the reason for this is,
once you could say, oh yeah,

00:26:30.520 --> 00:26:33.090
composite is proportional
to such and such,

00:26:33.090 --> 00:26:35.550
you can build up a budget in
your head of how much time you

00:26:35.550 --> 00:26:37.550
want to spend in each
one of these stages,

00:26:37.550 --> 00:26:39.730
when you want to burn
out your 16 milliseconds.

00:26:39.730 --> 00:26:41.430
So you might say, I
want to spend most

00:26:41.430 --> 00:26:44.330
my time in recalc and paint,
but I want light composite.

00:26:44.330 --> 00:26:47.730
And once you understand what
causes each of these stages

00:26:47.730 --> 00:26:51.770
to run long, you can then tweak
your content to control it.

00:26:51.770 --> 00:26:54.290
So the composite,
for example, is

00:26:54.290 --> 00:26:56.987
proportional to the
number of layers.

00:26:56.987 --> 00:26:58.570
So if you have about
30 layers, you're

00:26:58.570 --> 00:27:02.980
looking at three
milliseconds-ish on Chrome,

00:27:02.980 --> 00:27:04.200
per frame of cost.

00:27:04.200 --> 00:27:05.660
And if you double
the layer count,

00:27:05.660 --> 00:27:09.300
then it'll go up, et cetera.

00:27:09.300 --> 00:27:12.260
Painting is basically
proportional to how much

00:27:12.260 --> 00:27:16.050
area-wise you change,
times what's in it.

00:27:16.050 --> 00:27:19.830
So a white square is going
to be quite a bit cheaper

00:27:19.830 --> 00:27:22.030
than a square full
of all sorts of text,

00:27:22.030 --> 00:27:24.130
that has a drop
shadow, and a border

00:27:24.130 --> 00:27:26.194
and a filter on top of it.

00:27:26.194 --> 00:27:27.360
It's pretty straightforward.

00:27:27.360 --> 00:27:30.600
So you know, a solid
div, sort of free-ish.

00:27:30.600 --> 00:27:32.530
And of course, if you
have GPU rasterization,

00:27:32.530 --> 00:27:37.140
you get sort of
this extra boost,

00:27:37.140 --> 00:27:41.017
that hopefully we'll give
to everybody really soon.

00:27:41.017 --> 00:27:42.850
Recalc and layout is
an area that we're just

00:27:42.850 --> 00:27:45.349
beginning to poke at, so I don't
have a really clear message

00:27:45.349 --> 00:27:46.070
here.

00:27:46.070 --> 00:27:48.790
What we do know is that you
definitely shouldn't style

00:27:48.790 --> 00:27:49.340
thrash.

00:27:49.340 --> 00:27:51.620
So you shouldn't set
the styles on something,

00:27:51.620 --> 00:27:54.980
and then try to read them back,
by getting computed style.

00:27:54.980 --> 00:27:57.550
If you do that, then you're
basically killing yourself.

00:27:57.550 --> 00:28:00.120
And a really common
mistake we see people do,

00:28:00.120 --> 00:28:04.400
is in trying to make web-- make
CSS transitions work for them,

00:28:04.400 --> 00:28:07.010
we see people having
to force recalc,

00:28:07.010 --> 00:28:09.700
and everything goes to hell.

00:28:09.700 --> 00:28:11.870
The fix for this is
to use web animations.

00:28:11.870 --> 00:28:14.250
It's fantastic.

00:28:14.250 --> 00:28:17.170
But if you eliminate sort
of the basic mistakes of not

00:28:17.170 --> 00:28:20.470
thrashing, then the
mental model that I

00:28:20.470 --> 00:28:22.640
think we should use for
now is, that the cost

00:28:22.640 --> 00:28:24.080
of recalc and
layout is basically

00:28:24.080 --> 00:28:26.560
proportional to the number
of elements in your dock--

00:28:26.560 --> 00:28:29.410
not visible elements, total.

00:28:29.410 --> 00:28:31.560
So if your Dom is
1,000 elements, which

00:28:31.560 --> 00:28:35.990
we think is about a good
match for mobile phones,

00:28:35.990 --> 00:28:39.000
you can run substantial
portions of recalc

00:28:39.000 --> 00:28:43.176
without all of a sudden
falling in to no fps territory.

00:28:43.176 --> 00:28:44.800
And of course if you
reduce that count,

00:28:44.800 --> 00:28:47.640
you'll go even faster,
and so on and so forth.

00:28:47.640 --> 00:28:50.840
What's right out is a 10,000
element Dom on a mobile phone,

00:28:50.840 --> 00:28:51.720
just don't do it.

00:28:51.720 --> 00:28:54.230
Start figuring out
how to reduce that.

00:28:54.230 --> 00:28:56.170
Use Viewporting, use
whatever you want.

00:28:56.170 --> 00:28:58.290
But keep your
element count down,

00:28:58.290 --> 00:29:00.880
because the purple--
the purple stage

00:29:00.880 --> 00:29:03.910
is proportional
to element count.

00:29:03.910 --> 00:29:08.040
And finally, contrary to some
really weird press articles

00:29:08.040 --> 00:29:11.010
and research articles
so-called, JavaScript

00:29:11.010 --> 00:29:12.370
is ridiculously fast.

00:29:12.370 --> 00:29:15.270
And GC is rarely a problem.

00:29:15.270 --> 00:29:18.374
The web is not slow
because GC is the problem.

00:29:18.374 --> 00:29:20.790
The web is slow because we
didn't optimize recalc, layout,

00:29:20.790 --> 00:29:22.690
paint and composite.

00:29:22.690 --> 00:29:24.440
And because the
model's kind of broken

00:29:24.440 --> 00:29:27.730
about only being
able to do layers.

00:29:27.730 --> 00:29:30.980
GC, it's in the noise.

00:29:30.980 --> 00:29:33.550
When we do see
JavaScript run long,

00:29:33.550 --> 00:29:35.350
the few times I've
really dug into it,

00:29:35.350 --> 00:29:37.080
it's usually just
because the JavaScript

00:29:37.080 --> 00:29:39.170
is making a lot
of Dom, that it's

00:29:39.170 --> 00:29:44.704
going to append to the
world's free rendering.

00:29:44.704 --> 00:29:46.120
And we know the
solution for that.

00:29:46.120 --> 00:29:48.080
That's to use
templates if you can.

00:29:48.080 --> 00:29:50.500
Because templates
allow us to advertise

00:29:50.500 --> 00:29:54.000
costs, and do
things a lot faster.

00:29:54.000 --> 00:29:56.070
We know a lot about
the composite step.

00:29:56.070 --> 00:29:58.410
We want to firm up
this sort of model,

00:29:58.410 --> 00:30:00.100
and make it really
easy to communicate.

00:30:00.100 --> 00:30:02.480
This is the first time
we've tried explaining it.

00:30:02.480 --> 00:30:04.820
Hopefully this will get
cleaner and cleaner over time.

00:30:04.820 --> 00:30:06.570
So that everybody can just
immediately go, oh, yeah,

00:30:06.570 --> 00:30:09.220
you're animating width-- well,
how many elements do you have?

00:30:09.220 --> 00:30:10.070
Oh, OK, you're good.

00:30:10.070 --> 00:30:10.570
You're good.

00:30:10.570 --> 00:30:12.880
You could do that.

00:30:12.880 --> 00:30:14.500
So anyway, with
Chrome, you really

00:30:14.500 --> 00:30:15.870
can these days, hit 60fps.

00:30:18.710 --> 00:30:20.470
So what I want to do
now is try to explain

00:30:20.470 --> 00:30:22.553
sort of the logistics of
how to put this together.

00:30:22.553 --> 00:30:24.310
Because what we
see a lot is people

00:30:24.310 --> 00:30:26.860
just slapping animations and
transitions all over the place,

00:30:26.860 --> 00:30:28.110
and sort of hope for the best.

00:30:28.110 --> 00:30:29.600
Which I totally
get, because like,

00:30:29.600 --> 00:30:32.330
some days you just got
to get it out the door.

00:30:32.330 --> 00:30:35.170
The really great
transitions are--

00:30:35.170 --> 00:30:37.910
happen when the
people writing them

00:30:37.910 --> 00:30:41.680
planned the whole
transition-- the set

00:30:41.680 --> 00:30:44.340
of animations running,
as sort of an effect.

00:30:44.340 --> 00:30:47.120
So when the finger comes up,
you look at all the things

00:30:47.120 --> 00:30:48.578
that you are going
to want to move,

00:30:48.578 --> 00:30:50.120
and you get them
all ready to go.

00:30:50.120 --> 00:30:52.780
You do any Dom creation that you
need to do for all the things

00:30:52.780 --> 00:30:54.071
that are going to need to move.

00:30:54.071 --> 00:30:55.827
And then you get them
all going at once.

00:30:55.827 --> 00:30:57.910
And you do your nice
animation, and then later you

00:30:57.910 --> 00:30:58.650
do some cleanup.

00:30:58.650 --> 00:31:00.694
Like maybe you tear
down the old Dom.

00:31:00.694 --> 00:31:02.360
And in the middle
there, you try to keep

00:31:02.360 --> 00:31:03.630
things relatively clean.

00:31:03.630 --> 00:31:06.130
Because you're trying to give
the system as much opportunity

00:31:06.130 --> 00:31:09.820
to just make frame
smoothly as it can.

00:31:09.820 --> 00:31:13.040
Now there's two really, I
think surprising things,

00:31:13.040 --> 00:31:15.930
about these sort of transitions.

00:31:15.930 --> 00:31:17.940
The user perceptually
isn't going

00:31:17.940 --> 00:31:21.690
to start complaining that
you're laggy, when you lift,

00:31:21.690 --> 00:31:23.300
for about 150 milliseconds.

00:31:23.300 --> 00:31:25.410
That's a lot longer than 16.

00:31:25.410 --> 00:31:28.480
So you can do some substantial
amount of Dom creation,

00:31:28.480 --> 00:31:32.310
right after finger up, and
still have people say, oh yeah,

00:31:32.310 --> 00:31:33.930
your app is great.

00:31:33.930 --> 00:31:35.590
And Topeka, for
example, this thing

00:31:35.590 --> 00:31:39.370
that I showed-- this does
a lot of Dom creation,

00:31:39.370 --> 00:31:42.120
it's finger ups are
actually quite long.

00:31:42.120 --> 00:31:45.800
But you don't notice it.

00:31:45.800 --> 00:31:48.350
So let's mentally work
through this situation,

00:31:48.350 --> 00:31:51.810
where you want to
have-- you want

00:31:51.810 --> 00:31:53.320
to have a card that you tap.

00:31:53.320 --> 00:31:55.580
And it's going to go to the
server, and get some data.

00:31:55.580 --> 00:31:57.610
And then come back,
and make some Dom.

00:31:57.610 --> 00:32:00.740
And then you want
that to appear, right?

00:32:00.740 --> 00:32:02.550
A really great way
to structure this,

00:32:02.550 --> 00:32:06.820
is to even as you
kick off the XHR,

00:32:06.820 --> 00:32:09.670
you start an animation right
away, without the content.

00:32:09.670 --> 00:32:10.470
Make the card.

00:32:10.470 --> 00:32:13.370
So you saw in Topeka--
that initial demo--

00:32:13.370 --> 00:32:15.310
you saw the yellow card grow.

00:32:15.310 --> 00:32:18.830
You can get that going and have
be the visual response going,

00:32:18.830 --> 00:32:19.620
right away.

00:32:19.620 --> 00:32:22.270
This gets the user feeling
like you're responding to them,

00:32:22.270 --> 00:32:25.040
even though you don't
know the XHR back.

00:32:25.040 --> 00:32:28.660
And then you can use sort of
some web animations and CSS

00:32:28.660 --> 00:32:30.990
animations magic, so that
when you do create the Dom,

00:32:30.990 --> 00:32:32.800
you don't get any jank.

00:32:32.800 --> 00:32:37.130
Let me show you why
that is kind of useful.

00:32:37.130 --> 00:32:39.790
Two soccer balls,
they'er both rotating.

00:32:39.790 --> 00:32:43.950
The left one is a CSS
animation, that we're

00:32:43.950 --> 00:32:47.100
running-- it's a rotate--
transform, rotate right?

00:32:47.100 --> 00:32:50.550
The right is just RAF
spinning in JavaScript.

00:32:50.550 --> 00:32:51.870
They both can hit 60fps.

00:32:51.870 --> 00:32:54.790
Their basically both
about the same speed.

00:32:54.790 --> 00:32:58.180
But if I introduce jank on the
main thread, then what happens

00:32:58.180 --> 00:33:03.120
is the JavaScript driven one
starts feeling kind of juttery.

00:33:03.120 --> 00:33:08.160
And the reason for that is
because the CSS animation

00:33:08.160 --> 00:33:09.374
is running off thread.

00:33:09.374 --> 00:33:11.040
It's running where
we do that scrolling.

00:33:11.040 --> 00:33:14.020
So just like how we were
able to scroll smoothly,

00:33:14.020 --> 00:33:16.630
this is a case where the
CSS animation and all

00:33:16.630 --> 00:33:18.740
this composite
machinery is actually

00:33:18.740 --> 00:33:21.990
kicking in and saving the day.

00:33:21.990 --> 00:33:24.060
So when do-- when you
bring this back to the demo

00:33:24.060 --> 00:33:26.340
that we're thinking about--
when you do do something

00:33:26.340 --> 00:33:29.460
where you're expending
a div to give

00:33:29.460 --> 00:33:33.580
a user a sense of appearance
and responsiveness,

00:33:33.580 --> 00:33:37.197
if you do it with a pure
transform and scale animation,

00:33:37.197 --> 00:33:39.280
you could have a party on
the main thread creating

00:33:39.280 --> 00:33:42.260
Dom in the background,
in response thanks XHR,

00:33:42.260 --> 00:33:45.160
and still stay
completely smooth.

00:33:45.160 --> 00:33:48.510
So the user will experience this
as a great smooth animation,

00:33:48.510 --> 00:33:50.810
even though you have
two substantial janks.

00:33:50.810 --> 00:33:52.950
One for the finger up, and
one for the create Dom.

00:33:55.820 --> 00:33:59.150
But there's this sort
of contract here again,

00:33:59.150 --> 00:34:00.590
creeping up on
us, right-- that I

00:34:00.590 --> 00:34:04.140
talked about at the beginning,
which is can you represent

00:34:04.140 --> 00:34:08.530
the thing you want to do, with
a pure transform and scale?

00:34:08.530 --> 00:34:11.840
And the answer is, well, yes, if
your cards are material design,

00:34:11.840 --> 00:34:14.380
and you're lucky enough
that all your things are

00:34:14.380 --> 00:34:18.090
just flat, with no borders and
no drop shadows for instance,

00:34:18.090 --> 00:34:19.280
great, you're good.

00:34:19.280 --> 00:34:22.042
But if you're unlucky and you
want a border around this, then

00:34:22.042 --> 00:34:23.750
all of a sudden, you
can't do transforms.

00:34:23.750 --> 00:34:27.800
You need a width and
height animation.

00:34:27.800 --> 00:34:31.659
With sort of the newer builds
of Chrome in 37, et cetera,

00:34:31.659 --> 00:34:34.239
this is still totally possible.

00:34:34.239 --> 00:34:37.179
When you have GPU raster, the
paint isn't going to kill you.

00:34:37.179 --> 00:34:40.080
And because we've sped up
all these individual steps,

00:34:40.080 --> 00:34:42.679
you can now get your
XHR back, maybe hold off

00:34:42.679 --> 00:34:46.260
your Dom creation, but
then with a RAF loop,

00:34:46.260 --> 00:34:49.517
actually tick that height
and width yourself.

00:34:49.517 --> 00:34:51.350
And you can even run--
you could decide, oh,

00:34:51.350 --> 00:34:54.810
I want to use a width
animation in one direction,

00:34:54.810 --> 00:34:59.000
but I want to use inner margin
as my other animation key.

00:34:59.000 --> 00:35:01.050
And it'll just work.

00:35:01.050 --> 00:35:04.470
And so then you can stage this,
and sort of play games with it.

00:35:04.470 --> 00:35:06.815
You keep the main thread
responsive the entire time.

00:35:11.000 --> 00:35:12.920
And by keeping the
main thread responsive,

00:35:12.920 --> 00:35:16.290
you're able to do all sorts
of sophisticated animations,

00:35:16.290 --> 00:35:19.980
using the stuff like height
and width, and so on.

00:35:19.980 --> 00:35:21.710
Anyway, this is
like bleeding edge.

00:35:21.710 --> 00:35:24.689
We envision that in the future,
we can essentially return

00:35:24.689 --> 00:35:26.730
to the way you did animations
of jQuery long ago,

00:35:26.730 --> 00:35:29.915
which is you'd say, you know,
dollar blah blah blah, .anim.

00:35:29.915 --> 00:35:32.040
And it would just-- you
could pick any CSS property

00:35:32.040 --> 00:35:34.210
and it would be
smooth-ish, right?

00:35:34.210 --> 00:35:36.000
We want to come back
to that, and not

00:35:36.000 --> 00:35:38.480
have to say, no,
no, please decompose

00:35:38.480 --> 00:35:40.960
your animation into
these two properties.

00:35:40.960 --> 00:35:41.610
That stinks.

00:35:45.650 --> 00:35:49.292
So the same sort of
thinking applies to touch.

00:35:49.292 --> 00:35:50.250
Pull to refresh, right?

00:35:50.250 --> 00:35:51.940
We use it every day
in our mail apps,

00:35:51.940 --> 00:35:56.866
and in Twitter, in
social apps-- it's

00:35:56.866 --> 00:35:58.240
built into the
mobile experience,

00:35:58.240 --> 00:35:59.360
but it's very hard
to do on the web.

00:35:59.360 --> 00:36:01.080
And in fact, the
way people do it,

00:36:01.080 --> 00:36:02.900
is you do something
like iScroll that

00:36:02.900 --> 00:36:05.560
just hijacks scrolling
from the browser.

00:36:05.560 --> 00:36:07.010
Where we're going,
is we're trying

00:36:07.010 --> 00:36:10.070
to make it possible to do
these touch driven effects

00:36:10.070 --> 00:36:13.175
at 60 Hertz, with a touch
move coming right in.

00:36:13.175 --> 00:36:15.050
You do all your processing
on the touch move,

00:36:15.050 --> 00:36:18.851
and then you do a composite,
and it just runs at 60fps.

00:36:18.851 --> 00:36:21.100
There's some people who say
that the way to solve this

00:36:21.100 --> 00:36:22.920
is to add a feature
to the web platform,

00:36:22.920 --> 00:36:25.000
like a pull to refresh widget.

00:36:25.000 --> 00:36:27.170
Frankly, I don't think
we should do that,

00:36:27.170 --> 00:36:29.230
because we'll screw it up.

00:36:29.230 --> 00:36:31.360
We won't hit every case.

00:36:31.360 --> 00:36:34.410
Better to empower JavaScript
to do this, and then

00:36:34.410 --> 00:36:37.430
let individual library
authors make great widgets.

00:36:37.430 --> 00:36:40.680
And they way to do that, is
to have a sane cost model,

00:36:40.680 --> 00:36:44.630
and then have a sane place
where input is delivered.

00:36:44.630 --> 00:36:47.660
And then just let
JavaScript run.

00:36:47.660 --> 00:36:50.196
And to give you an
example of this working,

00:36:50.196 --> 00:36:52.320
this isn't pull to refresh,
this is another widget.

00:36:52.320 --> 00:36:54.535
This is a Heidi bars widget.

00:36:54.535 --> 00:36:56.660
So you can see these gray
things coming in and out,

00:36:56.660 --> 00:36:59.950
as I scroll up and down.

00:36:59.950 --> 00:37:03.620
In older Chrome builds and in
most browsers; especially IE,

00:37:03.620 --> 00:37:07.060
when you do this,
the scrolling is not

00:37:07.060 --> 00:37:08.580
coordinated with
the bar appearing.

00:37:08.580 --> 00:37:10.677
They just sort of
race with each other.

00:37:10.677 --> 00:37:12.260
And we worked really
hard to make sure

00:37:12.260 --> 00:37:16.860
that if you behave, if you
stay responsive in JavaScript,

00:37:16.860 --> 00:37:18.830
this will appear coordinated.

00:37:18.830 --> 00:37:20.715
So this gives you a
lot of flexibility

00:37:20.715 --> 00:37:23.210
to then do whatever effect you
want that's scroll coupled.

00:37:25.989 --> 00:37:27.280
You can do pull to refresh too.

00:37:27.280 --> 00:37:28.571
I'm not going to get into that.

00:37:28.571 --> 00:37:29.580
It's pretty cool though.

00:37:32.940 --> 00:37:33.615
Final segment.

00:37:36.350 --> 00:37:43.400
So we haven't really been
shy on opinions here.

00:37:43.400 --> 00:37:45.705
I haven't been.

00:37:45.705 --> 00:37:47.080
we're going to
keep at that this.

00:37:47.080 --> 00:37:50.755
And we're always going
to make the translate

00:37:50.755 --> 00:37:53.859
and transform based
affects super, super fast.

00:37:53.859 --> 00:37:55.400
That is sort of our
bread and butter.

00:37:55.400 --> 00:37:56.697
We'll always make that work.

00:37:56.697 --> 00:37:59.030
But where we're headed is to
double down on the sort of,

00:37:59.030 --> 00:38:02.100
we want to make the full
richness of HTML also

00:38:02.100 --> 00:38:04.450
able to hit 60fps.

00:38:04.450 --> 00:38:07.790
But before we do that, we've
got some basics to attend to.

00:38:07.790 --> 00:38:11.430
This GPU raster thing, the
Magic Viewport's pretty cool.

00:38:11.430 --> 00:38:13.710
We want to make it work all
the time without the Magic

00:38:13.710 --> 00:38:14.210
Viewport.

00:38:14.210 --> 00:38:15.501
And we're going to get to that.

00:38:15.501 --> 00:38:19.210
It's just sort of turning the
crank, fixing a lot of bugs.

00:38:19.210 --> 00:38:22.080
We know that there's a lot
of dark, unexplored corners

00:38:22.080 --> 00:38:24.480
in the platform, where things
don't quite work right.

00:38:24.480 --> 00:38:27.830
And a good example is the pinch
viewport-- when you pinch zoom,

00:38:27.830 --> 00:38:29.960
position fixed
behaves really weird,

00:38:29.960 --> 00:38:32.700
and so you get all
these bad behaviors.

00:38:32.700 --> 00:38:34.670
We want to fix that.

00:38:34.670 --> 00:38:37.490
We want to make, just when
you have a mobile app,

00:38:37.490 --> 00:38:39.000
it just sort of works.

00:38:39.000 --> 00:38:42.350
And the old pinch model
doesn't mess you up.

00:38:42.350 --> 00:38:44.560
And of course, we're
always working on tools.

00:38:44.560 --> 00:38:46.370
You saw these new stuff
coming in DevTools,

00:38:46.370 --> 00:38:48.340
you saw the Frame
Viewer, that's eventually

00:38:48.340 --> 00:38:49.548
going to show up in DevTools.

00:38:49.548 --> 00:38:52.610
So you don't have to
use that tracing tool.

00:38:52.610 --> 00:38:54.520
Cool stuff coming there.

00:38:54.520 --> 00:38:57.890
But really that bread and
butter, or above about that,

00:38:57.890 --> 00:39:00.850
we're going to be pushing
this, and pushing hard.

00:39:00.850 --> 00:39:03.400
We're going to try to make
it possible to animate

00:39:03.400 --> 00:39:04.979
new kinds of things.

00:39:04.979 --> 00:39:07.270
We're going to try to make
it possible do finger couple

00:39:07.270 --> 00:39:10.290
effects, without
all sorts of voodoo.

00:39:10.290 --> 00:39:13.790
And this is really all
about empowering JavaScript.

00:39:13.790 --> 00:39:16.590
We think that having this
compositor thread, that

00:39:16.590 --> 00:39:22.540
is the only thing imbibed with
the ability to scroll is crazy.

00:39:22.540 --> 00:39:27.420
And we also think that
when you have that model,

00:39:27.420 --> 00:39:31.450
you can't have a clearer--
what's fast, what's slow?

00:39:31.450 --> 00:39:32.880
We want a clear model.

00:39:32.880 --> 00:39:35.260
Anyway, this is
where we're going.

00:39:35.260 --> 00:39:38.300
I think what I want
to do is wrap up.

00:39:38.300 --> 00:39:40.725
As you go back to your
computer's tomorrow,

00:39:40.725 --> 00:39:44.040
the next day, and you sit down,
dig through some prototypes

00:39:44.040 --> 00:39:49.220
you did last year or last
week; and try it on our latest

00:39:49.220 --> 00:39:53.280
builds, on Canary, on the beta
channel on Chrome Android.

00:39:53.280 --> 00:39:55.120
See if it's still slow.

00:39:55.120 --> 00:39:57.970
And if it is, keep
some of this in mind.

00:39:57.970 --> 00:40:01.280
Let us know what
you think, and then,

00:40:01.280 --> 00:40:04.620
start questioning
these fundamentals.

00:40:04.620 --> 00:40:07.450
And say, I want-- I want
my app to work like this.

00:40:07.450 --> 00:40:08.990
And file bugs
against us, and say,

00:40:08.990 --> 00:40:10.412
I want it to work like this.

00:40:10.412 --> 00:40:11.370
Chrome, can you fix it?

00:40:11.370 --> 00:40:13.860
And we'll be listening.

00:40:13.860 --> 00:40:16.260
So anyway, that's what I
have to say for all of you.

00:40:16.260 --> 00:40:17.320
Thank you for listening.

00:40:17.320 --> 00:40:19.495
And I guess, time for
questions, I suppose.

00:40:24.540 --> 00:40:27.130
How do we want to
do questions, Paul?

00:40:27.130 --> 00:40:28.570
Do you want to MC?

00:40:28.570 --> 00:40:29.676
PAUL: I can try.

00:40:29.676 --> 00:40:30.300
NAT DUCA: Yeah.

00:40:33.520 --> 00:40:36.390
PAUL: I reckon we have time
for just one or two questions.

00:40:36.390 --> 00:40:37.250
Hands up-- oh.

00:40:41.700 --> 00:40:44.270
AUDIENCE 1: So
in-- traditionally,

00:40:44.270 --> 00:40:50.410
in all browsers, rounded
corners with a small shadow

00:40:50.410 --> 00:40:51.480
has been expensive.

00:40:51.480 --> 00:40:54.840
Does GPU rastorization or
compositing, whichever it was,

00:40:54.840 --> 00:40:57.380
make that a lower
cost operation?

00:40:57.380 --> 00:40:59.260
NAT DUCA: Yes.

00:40:59.260 --> 00:41:01.200
Different things
become the good thing,

00:41:01.200 --> 00:41:02.940
and other things
become the bad thing.

00:41:02.940 --> 00:41:07.690
So I believe the verboten
thing at the moment,

00:41:07.690 --> 00:41:11.070
on our GPU raster
architecture, is

00:41:11.070 --> 00:41:12.680
lots of fonts with
different sizes.

00:41:12.680 --> 00:41:14.399
That's the thing
that makes it grumpy.

00:41:14.399 --> 00:41:15.440
This stuff changes a lot.

00:41:15.440 --> 00:41:17.125
The rounded rex was
particularly bad.

00:41:20.180 --> 00:41:21.900
The key thing with
the GPU raster

00:41:21.900 --> 00:41:25.880
is it just takes it from
this catastrophic number,

00:41:25.880 --> 00:41:27.530
down to sort of a four and five.

00:41:27.530 --> 00:41:30.540
So now you're-- instead
of looking at, oh my god,

00:41:30.540 --> 00:41:32.210
I've got 300
milliseconds of paint--

00:41:32.210 --> 00:41:34.714
kill the rounded corners,
because it'll get 200, right?

00:41:34.714 --> 00:41:36.255
Now you're looking
at it like, are we

00:41:36.255 --> 00:41:39.921
gonna argue about
two milliseconds?

00:41:39.921 --> 00:41:41.920
And sure, we could argue
about two milliseconds.

00:41:41.920 --> 00:41:43.880
But it's in a better
and more sane place.

00:41:43.880 --> 00:41:46.280
It's more in line with
the other pipeline stages.

00:41:46.280 --> 00:41:48.906
And that's what we
really want to do.

00:41:48.906 --> 00:41:51.230
PAUL: We're going to have
to wrap up, because of time.

00:41:51.230 --> 00:41:51.940
Thank you, Nat.

00:41:51.940 --> 00:41:53.106
NAT DUCA: Thanks, everybody.

00:41:53.106 --> 00:41:54.250
[APPLAUSE]

