WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
The speed of light is a constant,

00:00:03.000 --> 00:00:06.000
but the important thing about variables in Python is that they can vary.

00:00:06.000 --> 00:00:08.000
That's why they're called "variables."

00:00:08.000 --> 00:00:12.000
Once we define a variable, we can change the value.

00:00:12.000 --> 00:00:16.000
Then when we use that name again, it refers to the new value.

00:00:16.000 --> 00:00:20.000
Let's see that in the interpreter. We could change the values of cycles&amp;#95;per&amp;#95;second.

00:00:20.000 --> 00:00:24.000
Suppose we have a faster processor.

00:00:24.000 --> 00:00:29.000
Now we've upgraded. We've got a 2.8 GHz processor.

00:00:29.000 --> 00:00:31.000
Now, that doesn't affect the value of cycle&amp;#95;distance.

00:00:31.000 --> 00:00:34.000
This was already computed with the old cycles per second.

00:00:34.000 --> 00:00:37.000
We still get the result 0.111.

00:00:37.000 --> 00:00:39.000
We'll compute it again.

00:00:39.000 --> 00:00:41.000
This time the value of cycles&amp;#95;per&amp;#95;second is the new value,

00:00:41.000 --> 00:00:44.000
since we changed what cycles&amp;#95;per&amp;#95;second refers to.

00:00:44.000 --> 00:00:48.000
Now, when we print cycle&amp;#95;distance, we see that the value is changed.

00:00:48.000 --> 00:00:51.000
So we have a faster processor the second time we print cycle&amp;#95;distance.

00:00:51.000 --> 00:00:57.000
Now we only have 0.107 meters--less than 11 cm per cycle.

00:00:57.000 --> 00:01:00.000
What happens now that we have assignment,

00:01:00.000 --> 00:01:04.000
the same expression can have different meanings different times we evaluate it.

00:01:04.000 --> 00:01:08.000
The value of this speed&amp;#95;of&amp;#95;light divided by cycles&amp;#95;per&amp;#95;second

00:01:08.000 --> 00:01:11.000
depends on what the current value of cycles&amp;#95;per&amp;#95;second is.

00:01:11.000 --> 00:01:16.000
When we evaluate the first one the value was 2,700,000,000.

00:01:16.000 --> 00:01:20.000
We got a different result, which is the 0.111 result we got the first time.

00:01:20.000 --> 00:01:24.000
When we evaluate the same expression the second time the result is different,

00:01:24.000 --> 00:01:27.000
because the value that cycles&amp;#95;per&amp;#95;second refers to is different,

00:01:27.000 --> 00:01:31.000
and that's why we get the smaller cycle distance the second time.

00:01:31.000 --> 00:01:34.000
So let's see what's going on there and make sure we understand the assignment.

00:01:34.000 --> 00:01:40.000
Suppose we have a variable "days," and we'll initialize it to the value 7 x 7.

00:01:40.000 --> 00:01:44.000
What that does is introduce the name "days" and refers to a value,

00:01:44.000 --> 00:01:48.000
which is the result of that expression, so it refers to the value 49.

00:01:48.000 --> 00:01:51.000
That means when we look up the name "days," we see what it refers to,

00:01:51.000 --> 00:01:53.000
and we get the result 49.

00:01:53.000 --> 00:01:58.000
If we do another assignment, let's say we have one less day.

00:01:58.000 --> 00:02:02.000
In this case, we'll assign 48 to "days."

00:02:02.000 --> 00:02:05.000
That's a new assignment. We already have a name "days."

00:02:05.000 --> 00:02:08.000
It used to refer to 49 but after the new assignment,

00:02:08.000 --> 00:02:10.000
it's going to refer to this new value.

00:02:10.000 --> 00:02:14.000
Now it's going to refer to the value 48.

00:02:14.000 --> 00:02:18.000
The number 49 still exists, but "days" no longer refers to it.

00:02:18.000 --> 00:02:21.000
Now "days" refers to 48.

00:02:21.000 --> 00:02:26.000
Where things get more interesting is we can use variables in their own assignment statements.

00:02:26.000 --> 00:02:30.000
Here we have an assignment statement where we have the value "days - 1,"

00:02:30.000 --> 00:02:35.000
and we assign that to "days". What happens with that assignment?

00:02:35.000 --> 00:02:37.000
Well, we evaluate the right side first.

00:02:37.000 --> 00:02:41.000
We look for the value of days, and we see that it refers to 48.

00:02:41.000 --> 00:02:45.000
We compute "days - 1," and we get the value 47.

00:02:45.000 --> 00:02:49.000
Then we do that assignment that will assign to the variable "days."

00:02:49.000 --> 00:02:55.000
Now the value "days" refers to the value 47--no longer refers to 48.

00:02:55.000 --> 00:02:57.000
So we could keep doing that.

00:02:57.000 --> 00:03:02.000
If we did another statement, the same exact one. That's going to change the value again.

00:03:02.000 --> 00:03:06.000
The first time the value "days" is 47.

00:03:06.000 --> 00:03:11.000
We'll subtract 1. We'll get the value 46. Then we do the assignment.

00:03:11.000 --> 00:03:15.000
That'll change the value so now "days" refers to the value 46.

00:03:15.000 --> 00:03:18.000
The important thing to notice--this is not an equal symbol.

00:03:18.000 --> 00:03:21.000
This looks like an equal symbol.

00:03:21.000 --> 00:03:24.000
If you studies algebra, you would think an equation like this looks like an equality,

00:03:24.000 --> 00:03:27.000
and there is no way to solve an equation like that.

00:03:27.000 --> 00:03:31.000
In Python and in most programming language, "=" does not mean equal.

00:03:31.000 --> 00:03:33.000
What "=" means is assignment.

00:03:33.000 --> 00:03:35.000
You should really think of it as an arrow.

00:03:35.000 --> 00:03:40.000
It's an arrow saying put whatever the value the right side evaluates to

00:03:40.000 --> 00:03:43.000
into the name on the left side.

00:03:43.000 --> 00:03:45.000
We don't write it as an arrow in most programming languages.

00:03:45.000 --> 00:03:48.000
(there are some that do) just because an arrow is harder to type,

00:03:48.000 --> 00:03:51.000
and lots of programs have lots of assignments.

00:03:51.000 --> 00:03:56.000
But you should think of the equal sign as not meaning equal. It means "assignment."

