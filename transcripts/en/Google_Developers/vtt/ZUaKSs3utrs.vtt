WEBVTT
Kind: captions
Language: en

00:00:00.180 --> 00:00:03.240
ERIC SCHLAEPFER: Hi, I'm
Eric Schlaepfer.

00:00:03.240 --> 00:00:07.450
Let's talk about the ADK 2012.

00:00:07.450 --> 00:00:08.440
With me--

00:00:08.440 --> 00:00:13.140
[APPLAUSE]

00:00:13.140 --> 00:00:15.940
So just to finish the
introductions, over here is

00:00:15.940 --> 00:00:18.770
Dmitry Grinberg, who worked
on the software.

00:00:18.770 --> 00:00:21.340
Also over here is Travis
Geiselbrecht, who worked on

00:00:21.340 --> 00:00:22.960
the software as well.

00:00:22.960 --> 00:00:25.420
And, since I didn't mention
it before, I worked on the

00:00:25.420 --> 00:00:28.700
hardware for the ADK 2012.

00:00:28.700 --> 00:00:31.040
So first, let's talk about
accessories for Android.

00:00:31.040 --> 00:00:32.380
There's a couple of
ways to connect

00:00:32.380 --> 00:00:35.310
accessories to Android devices.

00:00:35.310 --> 00:00:38.410
That includes USB
and Bluetooth.

00:00:38.410 --> 00:00:41.060
So through USB, we can use
last year's Android Open

00:00:41.060 --> 00:00:42.780
Accessory API.

00:00:42.780 --> 00:00:45.080
And through Bluetooth, there's
a variety protocols for a

00:00:45.080 --> 00:00:47.290
variety of purposes
that we can use.

00:00:47.290 --> 00:00:49.030
And so a lot of the accessories
you can build

00:00:49.030 --> 00:00:52.300
here, commercial purposes
include audio dock, exercise

00:00:52.300 --> 00:00:55.500
equipment, medical devices,
that kind of thing.

00:00:55.500 --> 00:00:57.790
But there's also a lot of
capability for hobby projects

00:00:57.790 --> 00:01:00.350
as well, such as a robot
controller and all kinds of

00:01:00.350 --> 00:01:03.380
wonderful things that people
can do with this.

00:01:03.380 --> 00:01:04.780
So I'm sure you're dying
to see what the

00:01:04.780 --> 00:01:06.240
ADK 2012 looks like.

00:01:06.240 --> 00:01:08.640
So let's just go ahead
and take a look.

00:01:08.640 --> 00:01:09.910
And here we have it.

00:01:09.910 --> 00:01:14.520
We've attempted a little bit
more than we did last year.

00:01:14.520 --> 00:01:15.820
All right, so what
is this thing?

00:01:15.820 --> 00:01:17.400
This is an alarm clock.

00:01:17.400 --> 00:01:20.570
You can take it out of the box
and plug it in and begin using

00:01:20.570 --> 00:01:24.170
it as an Android-connected
alarm clock right away.

00:01:24.170 --> 00:01:26.030
It's also an audio dock.

00:01:26.030 --> 00:01:28.810
If you plug it into the USB
connection, you can transfer

00:01:28.810 --> 00:01:30.710
audio from your phone to
the device and play it

00:01:30.710 --> 00:01:32.220
back in real time.

00:01:32.220 --> 00:01:35.770
You can do exactly the same
thing over Bluetooth as well.

00:01:35.770 --> 00:01:40.540
And it also acts as an Android
accessory hacker platform.

00:01:40.540 --> 00:01:42.390
It's totally extensible.

00:01:42.390 --> 00:01:44.430
You can go in and edit
all the code.

00:01:44.430 --> 00:01:46.520
You could even go in there with
a soldering iron and make

00:01:46.520 --> 00:01:50.420
all kinds of changes to it.

00:01:50.420 --> 00:01:52.010
So let's talk about some
of the features here.

00:01:52.010 --> 00:01:54.860
We've loaded it down with a lot
of good stuff this year.

00:01:54.860 --> 00:01:57.340
So we've got a light sensor in
the corner that can sense

00:01:57.340 --> 00:02:00.510
ambient light levels, proximity,
and it has a built

00:02:00.510 --> 00:02:03.620
in colorimeter, which we'll talk
about a little bit later.

00:02:03.620 --> 00:02:06.200
There is a capacitive slider
control on the top for

00:02:06.200 --> 00:02:08.699
adjusting the volume, adjusting
brightness, color,

00:02:08.699 --> 00:02:10.440
all kinds of other functions.

00:02:10.440 --> 00:02:12.810
And we've put in a bunch of
capacitive buttons as well.

00:02:12.810 --> 00:02:16.020
In fact, almost the whole front
panel is capacitive.

00:02:16.020 --> 00:02:20.310
There are also 64 RGB LEDs.

00:02:20.310 --> 00:02:24.280
So all those 7-segment display
segments here, you can control

00:02:24.280 --> 00:02:26.140
the color, set them to whatever
you want, display

00:02:26.140 --> 00:02:29.550
patterns, all kinds
of cool things.

00:02:29.550 --> 00:02:31.770
OK, now I'm sure you're
wondering what's inside.

00:02:31.770 --> 00:02:33.690
So let's go ahead and
take it apart.

00:02:33.690 --> 00:02:34.390
It's very easy.

00:02:34.390 --> 00:02:36.200
You just squeeze the case.

00:02:36.200 --> 00:02:38.590
There's not a single screw
in this entire design.

00:02:38.590 --> 00:02:40.495
It's held together by magnets.

00:02:40.495 --> 00:02:48.260
[APPLAUSE]

00:02:48.260 --> 00:02:52.340
And here it is unfolded.

00:02:52.340 --> 00:02:54.400
This is one of the first
devices that's actually

00:02:54.400 --> 00:02:58.010
designed to be taken apart,
because we want you to take it

00:02:58.010 --> 00:02:59.830
apart and hack on it.

00:02:59.830 --> 00:03:01.100
So on the inside, let's
look at some of

00:03:01.100 --> 00:03:02.550
the component pieces.

00:03:02.550 --> 00:03:04.580
On the upper part, there's
a speaker.

00:03:04.580 --> 00:03:06.890
And we use that to play back
alarm sounds, audio from

00:03:06.890 --> 00:03:08.770
Bluetooth or USB.

00:03:08.770 --> 00:03:11.170
And if it looks a little odd to
you, that's because it's a

00:03:11.170 --> 00:03:12.380
transducer.

00:03:12.380 --> 00:03:14.400
It connects to the back
panel of the device.

00:03:14.400 --> 00:03:18.000
And it uses the entire back
surface as a speaker.

00:03:18.000 --> 00:03:22.080
So you get big sound out
of a small device.

00:03:22.080 --> 00:03:24.160
There's also a whole bunch of
sensors in there as well.

00:03:24.160 --> 00:03:27.780
The ADK is aware of the
temperature, the humidity, the

00:03:27.780 --> 00:03:31.620
barometric pressure, the
acceleration, and even the

00:03:31.620 --> 00:03:33.890
local magnetic field.

00:03:33.890 --> 00:03:37.590
Just imagine the potential
for that.

00:03:37.590 --> 00:03:40.340
Also, on the side of the
device is an NFC Tag.

00:03:40.340 --> 00:03:42.280
So when you first get your
device, you can take your

00:03:42.280 --> 00:03:45.390
Nexus device and hover
it over the tag.

00:03:45.390 --> 00:03:49.610
And it will send you to the app
store to download the app.

00:03:49.610 --> 00:03:51.465
Let's talk about the
microcontroller.

00:03:51.465 --> 00:03:54.970
I remember last year we had a
little AVR processor, a little

00:03:54.970 --> 00:03:56.340
8-bit processor.

00:03:56.340 --> 00:03:58.390
And it's a great little
processor.

00:03:58.390 --> 00:04:00.980
But we decided to do it better
a little bit this year.

00:04:00.980 --> 00:04:06.550
So this device has a 32-bit
ARM Cortex M3 processor.

00:04:06.550 --> 00:04:11.170
We've connected a Bluetooth
device to it and an SD card.

00:04:11.170 --> 00:04:15.090
And if some of the stuff looks
a little bit familiar, that's

00:04:15.090 --> 00:04:16.839
because it's completely
programmable through the

00:04:16.839 --> 00:04:19.739
Arduino IDE.

00:04:19.739 --> 00:04:26.120
[APPLAUSE]

00:04:26.120 --> 00:04:28.760
So if you don't want to use it
as an alarm clock, you can

00:04:28.760 --> 00:04:31.200
actually take it apart
and pull the entire

00:04:31.200 --> 00:04:32.510
board off of it.

00:04:32.510 --> 00:04:35.530
And it's an Arduino,
except it's 32-bit.

00:04:35.530 --> 00:04:38.500
So instead of writing code for
a processor running at 16

00:04:38.500 --> 00:04:41.490
megahertz, you can take
that same code and

00:04:41.490 --> 00:04:43.979
run it at 84 megahertz.

00:04:43.979 --> 00:04:49.610
[APPLAUSE]

00:04:49.610 --> 00:04:52.300
OK, let's talk about the
phone application.

00:04:52.300 --> 00:04:55.000
So again, if you take your Nexus
device and you hover it

00:04:55.000 --> 00:04:58.210
over the NFC Tag, you can
pick up the application.

00:04:58.210 --> 00:05:01.190
You can plug in through USB,
and that will automatically

00:05:01.190 --> 00:05:04.410
load the application for you.

00:05:04.410 --> 00:05:05.980
Once you've launched it,
it'll give you a

00:05:05.980 --> 00:05:07.190
little Connect menu.

00:05:07.190 --> 00:05:09.040
And so you can use this to
connect though Bluetooth,

00:05:09.040 --> 00:05:10.510
which is pretty straightforward.

00:05:10.510 --> 00:05:13.170
So just search for devices
on Bluetooth.

00:05:13.170 --> 00:05:16.080
And it'll show up
as the ADK 2012.

00:05:16.080 --> 00:05:18.490
Click the Connect button, and it
will show a little code on

00:05:18.490 --> 00:05:19.270
the front of the device.

00:05:19.270 --> 00:05:21.950
So you can just click
OK here and pair up.

00:05:21.950 --> 00:05:25.430
And once you're done, launch the
ADK application and click

00:05:25.430 --> 00:05:26.600
Use Bluetooth.

00:05:26.600 --> 00:05:28.090
And then pick it off the
menu and you're done.

00:05:28.090 --> 00:05:29.270
That's it.

00:05:29.270 --> 00:05:31.620
So one more step than you
would have to use for a

00:05:31.620 --> 00:05:34.710
Bluetooth headset.

00:05:34.710 --> 00:05:36.700
If you want to connect it
through USB, you do what you

00:05:36.700 --> 00:05:37.600
would do last year.

00:05:37.600 --> 00:05:40.260
Just plug it in and it works,
magically launches the

00:05:40.260 --> 00:05:42.220
application.

00:05:42.220 --> 00:05:44.200
And once you've done that,
you'll get the main screen

00:05:44.200 --> 00:05:47.130
here, which has a number of
different functions here.

00:05:47.130 --> 00:05:48.780
You can set the time.

00:05:48.780 --> 00:05:50.800
You can set the alarm,
set the color.

00:05:50.800 --> 00:05:52.850
You can choose some
display settings.

00:05:52.850 --> 00:05:55.610
And you can lock the device as
well so you won't accidentally

00:05:55.610 --> 00:06:00.600
brush up against the cap sense
and change your alarm.

00:06:00.600 --> 00:06:01.990
Setting the time
is very simple.

00:06:01.990 --> 00:06:03.830
You get a little time
picker like this.

00:06:03.830 --> 00:06:06.720
And if you just click through
that, it sets it to your cell

00:06:06.720 --> 00:06:07.950
phone network time.

00:06:07.950 --> 00:06:09.790
So it's a very quick way
to update the time

00:06:09.790 --> 00:06:11.960
on your alarm clock.

00:06:11.960 --> 00:06:13.390
Alarms are similarly easy.

00:06:13.390 --> 00:06:17.240
You can just come in, click on
the Menu, set the alarm time.

00:06:17.240 --> 00:06:20.420
And you get to choose
the alarm sound.

00:06:20.420 --> 00:06:21.550
There are a number
of sounds that we

00:06:21.550 --> 00:06:23.430
pre-load onto the SD card.

00:06:23.430 --> 00:06:25.560
And they're all in the
open-source Ogg format.

00:06:25.560 --> 00:06:27.920
You can put all your own
songs on there as well.

00:06:27.920 --> 00:06:30.760
And we've got a built-in
Ogg-Vorbis decoder.

00:06:30.760 --> 00:06:33.728
All the source code is right
there for you look at.

00:06:33.728 --> 00:06:40.580
[APPLAUSE]

00:06:40.580 --> 00:06:43.190
OK, now let's talk about
setting the LED color.

00:06:43.190 --> 00:06:44.570
And there's a couple
of ways to do it.

00:06:44.570 --> 00:06:47.520
But my favorite way is something
that Dmitry here

00:06:47.520 --> 00:06:48.960
will demonstrate for us.

00:06:48.960 --> 00:06:52.020
So let me go ahead and switch
over to his screen.

00:06:52.020 --> 00:06:55.270
And so we can see the clock that
he's been operating here.

00:06:55.270 --> 00:06:58.570
OK, so Dmitry, go ahead and show
us the color picker mode.

00:06:58.570 --> 00:07:01.550
I did tell you about
a colorimeter.

00:07:01.550 --> 00:07:02.350
OK, so he's got--

00:07:02.350 --> 00:07:03.970
DMITRY GRINBERG: So for example,
we can grab different

00:07:03.970 --> 00:07:06.510
colored swatches and have the
device pick up their color.

00:07:10.902 --> 00:07:17.260
[APPLAUSE]

00:07:17.260 --> 00:07:19.080
ERIC SCHLAEPFER: And so, of
course, you can do this from

00:07:19.080 --> 00:07:20.560
the application as well.

00:07:20.560 --> 00:07:22.130
But just imagine the
possibilities.

00:07:22.130 --> 00:07:25.050
You could take-- oh, for
example-- little colored jelly

00:07:25.050 --> 00:07:27.920
beans and make a robot that
can recognize the

00:07:27.920 --> 00:07:28.840
color and sort them.

00:07:28.840 --> 00:07:30.570
I mean the possibilities
are endless with

00:07:30.570 --> 00:07:32.706
this type of sensor.

00:07:32.706 --> 00:07:35.050
You guys will love it.

00:07:35.050 --> 00:07:38.010
OK, I'd like to pass things
off to Dmitry now to talk

00:07:38.010 --> 00:07:40.720
about Bluetooth sound
and storage.

00:07:40.720 --> 00:07:41.860
DMITRY GRINBERG: Thank
you, Eric.

00:07:41.860 --> 00:07:45.440
So as Eric mentioned, we added
Bluetooth to this device, by

00:07:45.440 --> 00:07:47.360
which we mean we added
real Bluetooth.

00:07:47.360 --> 00:07:51.230
A lot of Arduino projects and
similar small embedded devices

00:07:51.230 --> 00:07:54.070
use Bluetooth to Serial
converter chips, which just

00:07:54.070 --> 00:07:55.820
give you a virtual
serial port.

00:07:55.820 --> 00:07:58.020
That's all nice and great, but
it doesn't give you too much

00:07:58.020 --> 00:07:59.230
flexibility.

00:07:59.230 --> 00:08:02.390
So here in the ADK 2012, we have
a real Bluetooth chip.

00:08:02.390 --> 00:08:05.540
It's a TI CC2564.

00:08:05.540 --> 00:08:08.520
And it's connected over UART
to the main processor.

00:08:08.520 --> 00:08:09.720
We have the on board antenna.

00:08:09.720 --> 00:08:12.220
So everything you need to do
to play with Bluetooth is

00:08:12.220 --> 00:08:15.100
right in the ADK.

00:08:15.100 --> 00:08:18.020
We wrote our little Bluetooth
Stack for the ADK, mostly

00:08:18.020 --> 00:08:20.140
because it's a very
simple one.

00:08:20.140 --> 00:08:21.340
It runs on BareMetal.

00:08:21.340 --> 00:08:22.590
And it's BSD licensed.

00:08:22.590 --> 00:08:23.960
So you can just grab
it and use it.

00:08:23.960 --> 00:08:26.190
You don't have to pay any
money in royalties.

00:08:26.190 --> 00:08:28.460
You don't have to disclose
your code, nothing.

00:08:28.460 --> 00:08:29.185
It is very simple.

00:08:29.185 --> 00:08:31.460
It supports multiple concurrent
connections.

00:08:31.460 --> 00:08:33.870
We implemented a service
discovery protocol server.

00:08:33.870 --> 00:08:36.730
So you can advertise your
services so devices can

00:08:36.730 --> 00:08:37.720
discover it.

00:08:37.720 --> 00:08:40.799
And if you do want RFCOMM, which
is a Bluetooth serial,

00:08:40.799 --> 00:08:42.250
we have that as well.

00:08:42.250 --> 00:08:45.500
Here we have a few lines of
code just to show the

00:08:45.500 --> 00:08:46.650
functionality we
have available.

00:08:46.650 --> 00:08:49.500
You can set your device name,
get remote device names.

00:08:49.500 --> 00:08:51.190
You can do device discovery.

00:08:51.190 --> 00:08:53.370
You can make your device
connectable, discoverable,

00:08:53.370 --> 00:08:57.590
everything else you'd expect
out of a Bluetooth Stack.

00:08:57.590 --> 00:09:00.610
If you want to play with low
levels of Bluetooth, you can

00:09:00.610 --> 00:09:04.040
use L2CAP Protocol, which
we give you access to.

00:09:04.040 --> 00:09:05.750
You can create L2CAP sockets.

00:09:05.750 --> 00:09:07.900
You can receive connections
on them.

00:09:07.900 --> 00:09:09.460
It's all extremely
simple to do.

00:09:09.460 --> 00:09:12.110
Whenever data arrives, a call
back gets called and you can

00:09:12.110 --> 00:09:12.860
process it.

00:09:12.860 --> 00:09:15.830
And you can send data back with
a simple function call.

00:09:15.830 --> 00:09:17.350
The data is sent
asynchronously.

00:09:17.350 --> 00:09:19.010
So, in fact, you don't have
to keep it around.

00:09:19.010 --> 00:09:19.840
You don't have to worry.

00:09:19.840 --> 00:09:22.550
It'll get sent whenever
it's needed to.

00:09:22.550 --> 00:09:23.800
You just call one function.

00:09:26.550 --> 00:09:28.670
And this is something you'd use,
for example, to implement

00:09:28.670 --> 00:09:30.590
Bluetooth HID, if you
want to have the ADK

00:09:30.590 --> 00:09:31.840
pretend to be a keyboard.

00:09:34.020 --> 00:09:36.260
But, of course, the way
Bluetooth discovers what

00:09:36.260 --> 00:09:39.160
service your device
has is SDP.

00:09:39.160 --> 00:09:42.670
It allows devices to query and
receive responses about what

00:09:42.670 --> 00:09:44.120
services your device supports.

00:09:44.120 --> 00:09:46.990
We have a fully working SDP
server in our device that

00:09:46.990 --> 00:09:49.230
supports the entire SDP spec.

00:09:49.230 --> 00:09:51.440
So you can discover
services on here.

00:09:51.440 --> 00:09:53.460
The API is, once again,
extremely simple.

00:09:53.460 --> 00:09:54.420
You can just add and remove

00:09:54.420 --> 00:09:56.670
descriptors using two functions.

00:09:56.670 --> 00:09:58.550
And as soon as you add a
descriptor, it begins being

00:09:58.550 --> 00:09:59.730
advertised.

00:09:59.730 --> 00:10:01.970
And, of course, the ADK source
code includes examples of

00:10:01.970 --> 00:10:04.425
this, because that is how the
phone application communicates

00:10:04.425 --> 00:10:05.675
with the ADK.

00:10:08.280 --> 00:10:11.960
For virtual serial ports, of
course, we have RFCOMM, which

00:10:11.960 --> 00:10:14.050
acts to you just like
a serial port.

00:10:14.050 --> 00:10:16.090
You'll get a call back
when data arrives.

00:10:16.090 --> 00:10:18.110
You can call a function
to send data.

00:10:18.110 --> 00:10:20.790
And, once again, the example
is in the ADK.

00:10:20.790 --> 00:10:22.550
And we support multiple
connections.

00:10:22.550 --> 00:10:24.010
And it's actually quite fast.

00:10:24.010 --> 00:10:26.730
So I've tried making a small
ADK application that just

00:10:26.730 --> 00:10:28.040
pipes data back to you.

00:10:28.040 --> 00:10:30.690
And we got one megabit full
duplex throughput through this

00:10:30.690 --> 00:10:32.940
chip and through the entire
ADK code stack.

00:10:32.940 --> 00:10:34.380
ERIC SCHLAEPFER: So kind of what
this means for you guys

00:10:34.380 --> 00:10:37.330
is that not only is this
protocol stack completely

00:10:37.330 --> 00:10:40.350
exposed to all of you-- you guys
can look through all the

00:10:40.350 --> 00:10:42.180
lower layers, all the
upper layers--

00:10:42.180 --> 00:10:44.490
but RFCOMM is a great way
to get started with it.

00:10:44.490 --> 00:10:46.790
So if all of these acronyms
don't really make a whole lot

00:10:46.790 --> 00:10:48.500
of sense to you, if that's
something you don't want to

00:10:48.500 --> 00:10:51.870
dig into, then you can just look
at this example we have

00:10:51.870 --> 00:10:53.630
on this slide right here.

00:10:53.630 --> 00:10:57.200
And using RFCOMM, which is the
simplest serial protocol, is

00:10:57.200 --> 00:10:59.220
literally that simple.

00:10:59.220 --> 00:11:00.340
So it's very scalable.

00:11:00.340 --> 00:11:02.030
DMITRY GRINBERG: And we've tried
this with multiple OSes,

00:11:02.030 --> 00:11:02.920
not just Android.

00:11:02.920 --> 00:11:04.760
It works with Linux and
a few other OSes

00:11:04.760 --> 00:11:07.790
we've tried as well.

00:11:07.790 --> 00:11:09.500
And the other thing we
added to the ADK this

00:11:09.500 --> 00:11:11.950
year is A2DP support.

00:11:11.950 --> 00:11:15.510
So the ADK is actually a fully
working Bluetooth speaker.

00:11:15.510 --> 00:11:17.260
We have an SBC decoder
in here.

00:11:17.260 --> 00:11:20.040
It supports mono, all three
stereo versions, everything

00:11:20.040 --> 00:11:22.250
you'd need out of a
Bluetooth device.

00:11:22.250 --> 00:11:24.610
And we've also tested it with
multiple OSes, including

00:11:24.610 --> 00:11:25.710
Android and Linux.

00:11:25.710 --> 00:11:27.110
And it does work.

00:11:27.110 --> 00:11:29.580
ERIC SCHLAEPFER: Would you like
to demonstrate that now?

00:11:29.580 --> 00:11:30.520
DMITRY GRINBERG: I don't
know if I have any--

00:11:30.520 --> 00:11:32.780
I guess I can play some
alarms, sure.

00:11:32.780 --> 00:11:34.370
ERIC SCHLAEPFER: Let's
give it a shot.

00:11:34.370 --> 00:11:36.770
I'm not sure what the 2.4
gigahertz spectrum looks like

00:11:36.770 --> 00:11:37.750
in here, but we'll
see what happens.

00:11:37.750 --> 00:11:39.000
DMITRY GRINBERG: We'll
find out soon enough.

00:11:41.480 --> 00:11:43.340
ERIC SCHLAEPFER: So let's
consider this a stress test of

00:11:43.340 --> 00:11:45.360
the Bluetooth Stack.

00:11:45.360 --> 00:11:47.640
So if all these people with
Bluetooth-connected phones out

00:11:47.640 --> 00:11:51.900
here, and I can imagine 2.4
gigahertz right now, let's

00:11:51.900 --> 00:11:54.124
take a look and see
if this will--

00:11:54.124 --> 00:11:55.100
well--

00:11:55.100 --> 00:11:57.870
DMITRY GRINBERG: I want to see
what ring tone I can grab.

00:11:57.870 --> 00:11:59.050
ERIC SCHLAEPFER: I hope you've
already paired with it,

00:11:59.050 --> 00:12:02.460
because you're going to get a
very long list of devices.

00:12:02.460 --> 00:12:06.235
DMITRY GRINBERG: I
imagine so, yes.

00:12:06.235 --> 00:12:07.217
[FAINT BEEP]

00:12:07.217 --> 00:12:09.300
There, well, I guess
it's not very loud.

00:12:09.300 --> 00:12:10.550
But you can hear it.

00:12:13.875 --> 00:12:15.860
[RINGING]

00:12:15.860 --> 00:12:17.110
ERIC SCHLAEPFER: And
it's ringing.

00:12:19.940 --> 00:12:21.240
Your alarm clock is ringing.

00:12:21.240 --> 00:12:24.620
[PIANO MUSIC]

00:12:24.620 --> 00:12:25.430
DMITRY GRINBERG: It's not
playing out of my phone.

00:12:25.430 --> 00:12:28.568
You heard it out of the ADK.

00:12:28.568 --> 00:12:34.970
[APPLAUSE]

00:12:34.970 --> 00:12:36.420
And on the phone side,
the Bluetooth

00:12:36.420 --> 00:12:38.255
is very, very simple.

00:12:38.255 --> 00:12:41.410
For example, here is an
RFCOMM sample for you.

00:12:41.410 --> 00:12:43.360
And it's very easy to
make this work.

00:12:43.360 --> 00:12:45.910
This is literally the code you
need to communicate with the

00:12:45.910 --> 00:12:48.400
ADK in the simplest form.

00:12:48.400 --> 00:12:50.010
You create a connection.

00:12:50.010 --> 00:12:54.010
And, as you see, we do a
discovery using this UUID.

00:12:54.010 --> 00:12:56.210
This is just a UUID you
create yourself.

00:12:56.210 --> 00:12:59.530
And as long as it matches on the
ADK side and your Android

00:12:59.530 --> 00:13:01.630
side, the connection
will be made.

00:13:01.630 --> 00:13:03.730
And then you get an input stream
and an output stream.

00:13:03.730 --> 00:13:06.340
So in Java, you just send
bytes and receive bytes.

00:13:06.340 --> 00:13:07.860
There's no further
complications

00:13:07.860 --> 00:13:09.110
for you to deal with.

00:13:11.470 --> 00:13:13.630
One of the other additions
this year to the ADK, as

00:13:13.630 --> 00:13:15.400
you've just seen, is sound.

00:13:15.400 --> 00:13:17.370
And we've made it really,
really easy for

00:13:17.370 --> 00:13:18.950
everyone to use this.

00:13:18.950 --> 00:13:22.580
So the audio data is piped to
the audio digital analog

00:13:22.580 --> 00:13:24.590
converter using DMA.

00:13:24.590 --> 00:13:26.990
So your code doesn't have
to conform to any timing

00:13:26.990 --> 00:13:29.440
requirements or really do
anything complicated.

00:13:29.440 --> 00:13:30.790
It just works.

00:13:30.790 --> 00:13:33.420
The API is very simple,
as you can see.

00:13:33.420 --> 00:13:35.200
You can just enqueue
an audio buffer.

00:13:35.200 --> 00:13:37.330
And that buffer gets played
whenever the audio hardware

00:13:37.330 --> 00:13:38.770
gets to it.

00:13:38.770 --> 00:13:42.140
And the code will block until
it's time to do that.

00:13:42.140 --> 00:13:44.330
Or you can use instead
a [? TryAddBuffer ?]

00:13:44.330 --> 00:13:44.710
buffer.

00:13:44.710 --> 00:13:48.040
And that way you can know if
the current audio buffer is

00:13:48.040 --> 00:13:49.755
already full.

00:13:49.755 --> 00:13:53.140
The thing you see there with
a source is one of the

00:13:53.140 --> 00:13:54.300
interesting things about ADK.

00:13:54.300 --> 00:13:57.710
We didn't want to put a full
audio mixer in it, not because

00:13:57.710 --> 00:13:58.250
we couldn't.

00:13:58.250 --> 00:14:00.240
But we just didn't think
it was appropriate.

00:14:00.240 --> 00:14:03.460
So instead, there is some code
in here to do audio lock out.

00:14:03.460 --> 00:14:05.750
So there's a fixed priority
of services.

00:14:05.750 --> 00:14:08.200
For example, Alarm overrides
anything else.

00:14:08.200 --> 00:14:11.270
So if you try to play a file
while the alarm is going on,

00:14:11.270 --> 00:14:13.580
alarm wins and your
data gets dropped.

00:14:13.580 --> 00:14:15.350
And, of course, this is all
code you can modify.

00:14:15.350 --> 00:14:16.940
So if you want to add your
own audio mixer,

00:14:16.940 --> 00:14:18.740
you're free to do so.

00:14:18.740 --> 00:14:20.610
ERIC SCHLAEPFER: What this means
for the people that are

00:14:20.610 --> 00:14:22.990
going to use it as an alarm
clock before starting to hack

00:14:22.990 --> 00:14:25.780
on it is that if you set up, and
you've got music playing

00:14:25.780 --> 00:14:28.400
on it, and then the alarm goes
off, the alarm will interrupt

00:14:28.400 --> 00:14:30.620
the music just like you
would expect it to.

00:14:30.620 --> 00:14:32.340
DMITRY GRINBERG: And we went
a little further than that,

00:14:32.340 --> 00:14:34.220
because no one likes
uncompressed audio.

00:14:34.220 --> 00:14:37.140
So as Eric previously mentioned,
we did have an Ogg

00:14:37.140 --> 00:14:38.250
decoder in here now.

00:14:38.250 --> 00:14:40.860
So the alarms that are in the
device are Ogg format.

00:14:40.860 --> 00:14:43.110
And the API for that is
extremely simple.

00:14:43.110 --> 00:14:45.840
The simplest way is just
to call Play Ogg

00:14:45.840 --> 00:14:46.850
and give it a path.

00:14:46.850 --> 00:14:47.670
That's all you have to do.

00:14:47.670 --> 00:14:49.770
The audio will just
start playing.

00:14:49.770 --> 00:14:51.880
Also you can do it in the
background if you wanted to.

00:14:51.880 --> 00:14:53.935
And we also have a global
volume control.

00:14:57.970 --> 00:15:02.000
For storage, we have a MicroSD
slot on the device.

00:15:02.000 --> 00:15:05.650
And all the devices have MicroSD
in them already.

00:15:05.650 --> 00:15:08.610
And the API is very simple,
as you would expect.

00:15:08.610 --> 00:15:12.620
There's an SD driver in place
and a FAT16, 32, and 12

00:15:12.620 --> 00:15:14.500
driver built in.

00:15:14.500 --> 00:15:16.020
It's got all the functions
you'd expect.

00:15:16.020 --> 00:15:18.220
You can open files, close files,
read them, write them,

00:15:18.220 --> 00:15:19.720
you can create directories.

00:15:19.720 --> 00:15:22.050
A few things that most embedded
file system drivers

00:15:22.050 --> 00:15:25.970
don't have, you can also format
a card or move files.

00:15:25.970 --> 00:15:28.330
And this is all, once again,
code you get, code you can

00:15:28.330 --> 00:15:30.840
modify, reuse, whatever
you want.

00:15:30.840 --> 00:15:33.360
Now I want to hand it over to
Travis to talk about some of

00:15:33.360 --> 00:15:34.950
the USB things.

00:15:34.950 --> 00:15:36.720
TRAVIS GEISELBRECHT:
Thank you, Dmitry.

00:15:36.720 --> 00:15:40.040
So the ADK also has USB,
as it did last

00:15:40.040 --> 00:15:42.710
year and similar today.

00:15:42.710 --> 00:15:44.810
Dmitry is going to show us the
two ports on the back.

00:15:44.810 --> 00:15:46.280
That's the inside of it.

00:15:46.280 --> 00:15:49.320
There are two USB ports
on this device.

00:15:49.320 --> 00:15:50.700
The first one is used
for programming.

00:15:50.700 --> 00:15:54.340
It looks like a standard
FTDI bay serial port.

00:15:54.340 --> 00:15:58.752
That's the one you use
for debugging and--

00:15:58.752 --> 00:15:59.940
ERIC SCHLAEPFER: I think you're
on the wrong side.

00:15:59.940 --> 00:16:00.530
DMITRY GRINBERG: Yeah--

00:16:00.530 --> 00:16:00.870
ERIC SCHLAEPFER: There you go.

00:16:00.870 --> 00:16:01.600
DMITRY GRINBERG: This
thing's upside down.

00:16:01.600 --> 00:16:02.390
It's really hard.

00:16:02.390 --> 00:16:02.830
TRAVIS GEISELBRECHT: Yeah.

00:16:02.830 --> 00:16:04.240
See, so there's two
ports here.

00:16:04.240 --> 00:16:07.330
They're both micro USB.

00:16:07.330 --> 00:16:08.990
The other one was one that's
really interesting.

00:16:08.990 --> 00:16:10.650
That's a USB host port.

00:16:10.650 --> 00:16:17.340
So on ADK 1.0, there was a--

00:16:17.340 --> 00:16:18.400
same thing, USB host.

00:16:18.400 --> 00:16:21.040
But it was implemented as an
external chip that actually

00:16:21.040 --> 00:16:22.130
handled most of it.

00:16:22.130 --> 00:16:24.170
For this time around, we
actually pulled the host stack

00:16:24.170 --> 00:16:26.540
into the ARM processor.

00:16:26.540 --> 00:16:29.720
In the case in this particular
ARM, it had on-the-go USB

00:16:29.720 --> 00:16:30.580
controller.

00:16:30.580 --> 00:16:34.100
So we put it in host mode and
implemented the stack.

00:16:34.100 --> 00:16:35.330
So the full source
is available.

00:16:35.330 --> 00:16:36.450
It's running on the ARM.

00:16:36.450 --> 00:16:40.600
It does everything that we'll
talk about here in a minute.

00:16:40.600 --> 00:16:43.150
If you've never used an Android
accessory protocol, it

00:16:43.150 --> 00:16:45.370
actually shows up in an
inverted way that

00:16:45.370 --> 00:16:46.610
you normally expect.

00:16:46.610 --> 00:16:49.970
The device implements host,
the accessory device.

00:16:49.970 --> 00:16:54.540
And the phone or tablet or
round sphere of something

00:16:54.540 --> 00:17:01.960
shows up as an actual
device to the ADK.

00:17:01.960 --> 00:17:04.140
And, really, the nitty gritty
details is there's a little

00:17:04.140 --> 00:17:05.079
handshake at the beginning.

00:17:05.079 --> 00:17:07.550
And then it ends up exporting
to bulk endpoints.

00:17:07.550 --> 00:17:09.470
And it's just data in and out.

00:17:09.470 --> 00:17:12.210
It's very similar to what
we did last year.

00:17:12.210 --> 00:17:13.569
And then it's up to you
the format whatever

00:17:13.569 --> 00:17:14.690
protocol you want.

00:17:14.690 --> 00:17:17.040
ERIC SCHLAEPFER: So Travis,
you did mention a sphere.

00:17:17.040 --> 00:17:21.000
And what you're referring to
is the Nexus Q demo that's

00:17:21.000 --> 00:17:23.410
happening right now on the third
floor with that giant

00:17:23.410 --> 00:17:25.690
ball and the robot arm
and all of that.

00:17:25.690 --> 00:17:30.170
That's all being done through
an ADK 2.0 from a Nexus Q

00:17:30.170 --> 00:17:32.950
using the Android Open
Accessory protocol.

00:17:32.950 --> 00:17:33.175
TRAVIS GEISELBRECHT: Yes.

00:17:33.175 --> 00:17:35.269
So actually, if you look
there, there's a ball--

00:17:35.269 --> 00:17:40.428
[APPLAUSE]

00:17:40.428 --> 00:17:43.540
And that's running an Arduino
sketch that was written a

00:17:43.540 --> 00:17:45.310
couple weeks ago.

00:17:45.310 --> 00:17:46.560
You've actually already
seen one.

00:17:46.560 --> 00:17:47.850
And most people hadn't
recognized that it was

00:17:47.850 --> 00:17:49.100
actually an ADK.

00:17:49.100 --> 00:17:50.040
ERIC SCHLAEPFER: It was
at that point I really

00:17:50.040 --> 00:17:53.470
appreciated the power and
simplicity of Arduino, because

00:17:53.470 --> 00:17:54.570
we were down to the wire.

00:17:54.570 --> 00:17:55.930
And I had to get this
thing done.

00:17:55.930 --> 00:17:57.560
And so, I just whipped
up a quick sketch.

00:17:57.560 --> 00:17:59.810
And it worked great, as you can
see if you go up to the

00:17:59.810 --> 00:18:01.869
third floor.

00:18:01.869 --> 00:18:03.841
Go ahead.

00:18:03.841 --> 00:18:05.910
TRAVIS GEISELBRECHT: Oh,
and so also, here's

00:18:05.910 --> 00:18:06.700
the list of the API.

00:18:06.700 --> 00:18:08.650
It's a very simple API
on the device side.

00:18:08.650 --> 00:18:12.450
For the accessory protocol,
most of the actual API is

00:18:12.450 --> 00:18:15.770
setting the different strings,
which is what your device

00:18:15.770 --> 00:18:17.270
would show up to.

00:18:17.270 --> 00:18:19.733
There's a list of strings that
you can match against, where

00:18:19.733 --> 00:18:23.230
you can name yourself, you know,
in this case, ADK 2012

00:18:23.230 --> 00:18:25.460
or My Cool Widget.

00:18:25.460 --> 00:18:30.050
And that's exactly how the app
on Android side will know

00:18:30.050 --> 00:18:32.990
which app to connect to or what
the protocol version is.

00:18:32.990 --> 00:18:35.540
So most of the API is just for
setting those strings.

00:18:35.540 --> 00:18:38.290
And at the very bottom, you
basically have three calls,

00:18:38.290 --> 00:18:41.020
are you connected, send
data, receive data.

00:18:41.020 --> 00:18:41.710
There's not much to it.

00:18:41.710 --> 00:18:42.910
It doesn't format it.

00:18:42.910 --> 00:18:44.690
It's just a string of bytes.

00:18:44.690 --> 00:18:47.250
It's up to you to define
whatever protocol you want.

00:18:47.250 --> 00:18:50.310
In our case, we actually
developed about a 10 or 15 op

00:18:50.310 --> 00:18:54.270
code, send and receive protocol
to support all the

00:18:54.270 --> 00:18:56.460
sensors and what not on that.

00:18:56.460 --> 00:18:58.700
And we used the same protocol
to punch over

00:18:58.700 --> 00:18:59.540
Bluetooth as well.

00:18:59.540 --> 00:19:01.440
So it's quite straightforward.

00:19:01.440 --> 00:19:02.730
ERIC SCHLAEPFER: So you can look
at the sketch that we'll

00:19:02.730 --> 00:19:05.480
provide with the full source
code and see that as an

00:19:05.480 --> 00:19:09.100
example of sort of a medium
complexity example of

00:19:09.100 --> 00:19:12.300
transferring data back
and forth over USB.

00:19:12.300 --> 00:19:12.540
TRAVIS GEISELBRECHT: Right.

00:19:12.540 --> 00:19:15.310
And this is actually,
essentially,

00:19:15.310 --> 00:19:16.710
the minimum set up.

00:19:16.710 --> 00:19:19.390
You'll see at the top, we
initialized the ADK and set

00:19:19.390 --> 00:19:22.440
the accessory strings for
whatever your device

00:19:22.440 --> 00:19:23.560
will show up as.

00:19:23.560 --> 00:19:25.710
And then in the main loop, you
basically are just testing,

00:19:25.710 --> 00:19:26.980
are you connected,
are you not?

00:19:26.980 --> 00:19:28.880
Send data, process
it, send it back.

00:19:28.880 --> 00:19:32.300
There's not much to it.

00:19:32.300 --> 00:19:33.420
It's a little bit
more complexity

00:19:33.420 --> 00:19:35.010
on the Android side.

00:19:35.010 --> 00:19:37.410
But this, of course, is not any
different from last year.

00:19:37.410 --> 00:19:42.900
This accessory protocol's been
in Android since Gingerbread.

00:19:42.900 --> 00:19:46.100
But, for the most part, you set
up the connection, and,

00:19:46.100 --> 00:19:47.920
you do a little bit more error
checking than on the slide,

00:19:47.920 --> 00:19:51.080
but probably about twice
as much code

00:19:51.080 --> 00:19:53.120
in the final solution.

00:19:53.120 --> 00:19:55.520
But then, at the bottom, you end
up with two input streams.

00:19:55.520 --> 00:19:58.750
Input, output stream, you punch
protocol over that.

00:19:58.750 --> 00:20:01.300
And that's pretty much
it, not a lot to it.

00:20:01.300 --> 00:20:04.400
There is a little bit of string
matching that you do

00:20:04.400 --> 00:20:10.430
inside the app to decide which
device to connect to.

00:20:10.430 --> 00:20:14.300
And, of course, Android lets you
register a particular app

00:20:14.300 --> 00:20:16.070
to start automatically
when it sees

00:20:16.070 --> 00:20:18.950
this particular accessory.

00:20:18.950 --> 00:20:21.910
And that's all handled inside
the manifest of the app.

00:20:21.910 --> 00:20:23.900
ERIC SCHLAEPFER: So if you
notice that the last two lines

00:20:23.900 --> 00:20:27.240
look familiar, you're right,
because we use the very same

00:20:27.240 --> 00:20:29.290
stream mechanism
for Bluetooth.

00:20:29.290 --> 00:20:31.240
In fact, in our application,
what we've done is we've

00:20:31.240 --> 00:20:34.180
abstracted it and wrapped them
in two different classes that

00:20:34.180 --> 00:20:36.110
both inherit from a
master class that

00:20:36.110 --> 00:20:38.130
has two stream objects.

00:20:38.130 --> 00:20:41.530
And that allows our ADK
application to use either USB

00:20:41.530 --> 00:20:44.020
or Bluetooth with exactly
the same code.

00:20:44.020 --> 00:20:45.660
And you, of course, can
use that code in your

00:20:45.660 --> 00:20:48.500
own projects as well.

00:20:48.500 --> 00:20:49.910
TRAVIS GEISELBRECHT: And there's
one more feature that

00:20:49.910 --> 00:20:51.100
we added for this one.

00:20:51.100 --> 00:20:54.920
And this is new since
last year.

00:20:54.920 --> 00:20:58.120
Part of a feature that was added
in Jellybean is there is

00:20:58.120 --> 00:21:00.550
a generic USB audio mechanism.

00:21:00.550 --> 00:21:04.370
And it's an extension of
the accessory protocol.

00:21:04.370 --> 00:21:05.910
And, basically, it--

00:21:05.910 --> 00:21:07.240
this is well, of course,
documented

00:21:07.240 --> 00:21:08.140
on the Android side.

00:21:08.140 --> 00:21:10.140
There's actually no API
involved, which is why there's

00:21:10.140 --> 00:21:12.840
no code to actually show you.

00:21:12.840 --> 00:21:14.800
But basically, it's a little
handshake that happens when

00:21:14.800 --> 00:21:16.410
the device goes into
accessory mode.

00:21:16.410 --> 00:21:21.940
And then the phone or tablet or
round spherical thing turns

00:21:21.940 --> 00:21:24.070
into a USB audio device,
basically looks like a

00:21:24.070 --> 00:21:26.510
microphone more or
less to this.

00:21:26.510 --> 00:21:33.090
It's full 16-bit, 44.1, PCM
data, no compression or

00:21:33.090 --> 00:21:34.630
anything like that.

00:21:34.630 --> 00:21:38.460
And what we're using this device
for is essentially an

00:21:38.460 --> 00:21:39.510
example code.

00:21:39.510 --> 00:21:42.180
Here is an example of how you
would go implement it.

00:21:42.180 --> 00:21:43.860
You might not even use
this exact code.

00:21:43.860 --> 00:21:46.650
But, you know, if you're
designing something based on a

00:21:46.650 --> 00:21:51.710
PIC or an AVR or something more
exotic, you could also

00:21:51.710 --> 00:21:53.030
use the same thing.

00:21:53.030 --> 00:21:53.650
This is, of course,
well-documented.

00:21:53.650 --> 00:21:57.800
So this acts like an
example to it.

00:21:57.800 --> 00:22:01.010
And same thing with--

00:22:01.010 --> 00:22:02.560
like I said, this is in
Jellybean and above.

00:22:02.560 --> 00:22:03.810
All devices have it.

00:22:03.810 --> 00:22:06.920
If it's got Jellybean, it
supports this protocol.

00:22:06.920 --> 00:22:08.350
ERIC SCHLAEPFER: So what this
means for all of you is that

00:22:08.350 --> 00:22:12.880
you can take your Jellybean
Nexus that you got here, plug

00:22:12.880 --> 00:22:16.840
it into your ADK, and without
any menus or configuration or

00:22:16.840 --> 00:22:19.040
anything, you can immediately
begin playing

00:22:19.040 --> 00:22:20.290
audio through it.

00:22:22.723 --> 00:22:28.290
[APPLAUSE]

00:22:28.290 --> 00:22:29.480
TRAVIS GEISELBRECHT: Yeah,
you'll see a little pop up

00:22:29.480 --> 00:22:32.740
that says, connected
as an audio device.

00:22:32.740 --> 00:22:33.970
And then that's it.

00:22:33.970 --> 00:22:35.170
ERIC SCHLAEPFER: And
then it just works.

00:22:35.170 --> 00:22:37.030
TRAVIS GEISELBRECHT: Yep.

00:22:37.030 --> 00:22:37.610
All right.

00:22:37.610 --> 00:22:39.780
So, I'm going to hand it back
over to Eric, who's going to

00:22:39.780 --> 00:22:43.380
go through the rest of the fun
gadgets you can do with it.

00:22:43.380 --> 00:22:44.940
ERIC SCHLAEPFER: The pretty
lights, let's talk about

00:22:44.940 --> 00:22:47.140
blinking lights.

00:22:47.140 --> 00:22:53.120
There are 64 RGB LEDs on this
guy, six 7-segment digits, two

00:22:53.120 --> 00:22:55.860
colons that you can control
separately, eight icon

00:22:55.860 --> 00:23:01.850
indicators, and 12 party
mode lights.

00:23:01.850 --> 00:23:04.220
I can't wait to see what
you guys do with those.

00:23:04.220 --> 00:23:06.240
That'll be fun.

00:23:06.240 --> 00:23:07.890
Actually, I think Dmitry might
have done a little

00:23:07.890 --> 00:23:08.650
bit of a demo here.

00:23:08.650 --> 00:23:11.890
So let's go and switch over to
that camera and take a look.

00:23:11.890 --> 00:23:13.760
So, he's actually been busy
coding up a bunch

00:23:13.760 --> 00:23:15.010
of different demos.

00:23:17.548 --> 00:23:24.310
[APPLAUSE]

00:23:24.310 --> 00:23:26.980
Dmitry, that looks
really good.

00:23:26.980 --> 00:23:28.990
He's been going through so many
different visualization

00:23:28.990 --> 00:23:30.550
algorithms over the last
couple of days.

00:23:30.550 --> 00:23:32.360
I'd just look over his desk
and, oh, look at that.

00:23:32.360 --> 00:23:35.230
There's another neat
pattern, very cool.

00:23:35.230 --> 00:23:37.090
So I'd love to see what you
guys come up with as well.

00:23:37.090 --> 00:23:38.310
Please go and record videos.

00:23:38.310 --> 00:23:39.330
Put them up on YouTube.

00:23:39.330 --> 00:23:41.610
I look forward to seeing
all of that.

00:23:41.610 --> 00:23:45.190
So the API to control those LEDs
is very straightforward.

00:23:45.190 --> 00:23:48.510
Since we handle all the LED
muxing and the LED controller

00:23:48.510 --> 00:23:51.290
in the background through an
interrupt-based system,

00:23:51.290 --> 00:23:52.770
there's really not a whole
lot you have to do.

00:23:52.770 --> 00:23:56.590
Just ledWrite, put in the index
of the LED and the red,

00:23:56.590 --> 00:23:58.180
green, and blue values,
and then it just sort

00:23:58.180 --> 00:23:59.140
of magically happens.

00:23:59.140 --> 00:24:00.960
And you don't have to worry
about anything.

00:24:00.960 --> 00:24:02.950
If you want to get more
complicated, you could use the

00:24:02.950 --> 00:24:08.490
ledDrawLetter function and put
it in essentially ASCII value,

00:24:08.490 --> 00:24:10.620
and that will show up on the
digit that you've selected.

00:24:10.620 --> 00:24:12.770
Now, granted, it's a
7-segment display.

00:24:12.770 --> 00:24:16.090
So certain letters, like M and
N and some of those other

00:24:16.090 --> 00:24:17.490
tricky ones, we can't display.

00:24:17.490 --> 00:24:19.180
But we do our best.

00:24:19.180 --> 00:24:21.220
So, play with it and
see what you think.

00:24:21.220 --> 00:24:23.920
And those are the LEDs.

00:24:23.920 --> 00:24:26.680
Let's talk about the capacitive
touch sensors.

00:24:26.680 --> 00:24:30.340
They are actually 12 buttons,
one each for the up and down

00:24:30.340 --> 00:24:31.390
on each segment.

00:24:31.390 --> 00:24:33.790
And what that allows you to do
is, if you're in clock mode,

00:24:33.790 --> 00:24:36.780
you can set the clock just by
touching the top or the bottom

00:24:36.780 --> 00:24:38.090
of each digit.

00:24:38.090 --> 00:24:39.120
Dmitry, did want to
demonstrate that?

00:24:39.120 --> 00:24:39.700
DMITRY GRINBERG: Why not?

00:24:39.700 --> 00:24:41.020
ERIC SCHLAEPFER: OK, let's
switch to the camera and take

00:24:41.020 --> 00:24:41.820
a look here.

00:24:41.820 --> 00:24:43.840
It's a little hard to
talk about it but--

00:24:43.840 --> 00:24:44.380
[INTERPOSING VOICES]

00:24:44.380 --> 00:24:45.640
DMITRY GRINBERG: I can try
setting that time.

00:24:45.640 --> 00:24:46.990
There's 11:00, 10:00.

00:24:46.990 --> 00:24:48.670
You can also just
do it quicker.

00:24:52.300 --> 00:24:53.560
ERIC SCHLAEPFER: And let me
tell you, this is great

00:24:53.560 --> 00:24:56.500
because I have one of those
old alarm clocks at home,

00:24:56.500 --> 00:24:58.870
where it's got the hour button
and the minute button.

00:24:58.870 --> 00:25:00.110
And then you're hitting
the button.

00:25:00.110 --> 00:25:01.850
And you're like, OK, I'm getting
there, getting there,

00:25:01.850 --> 00:25:03.200
get-- oh, I went too far.

00:25:03.200 --> 00:25:06.510
Now you get to go all the
way back around again.

00:25:06.510 --> 00:25:08.500
DMITRY GRINBERG: It also works
for setting the alarm and

00:25:08.500 --> 00:25:10.560
enabling and disabling it.

00:25:10.560 --> 00:25:11.440
ERIC SCHLAEPFER: Very nice.

00:25:11.440 --> 00:25:13.430
So there's a lot you can
do with those buttons.

00:25:13.430 --> 00:25:18.880
[APPLAUSE]

00:25:18.880 --> 00:25:20.530
We've also got a slider
control on

00:25:20.530 --> 00:25:21.560
the top of the device.

00:25:21.560 --> 00:25:23.530
And so, we use that as
a volume control.

00:25:23.530 --> 00:25:25.680
And depending on the mode that
you're in, it can also adjust

00:25:25.680 --> 00:25:27.630
the color of the LEDs as well.

00:25:27.630 --> 00:25:29.760
So, since we've got the demo
screen up, you might want to

00:25:29.760 --> 00:25:30.400
go to Color.

00:25:30.400 --> 00:25:32.160
And we can take a
look at that.

00:25:32.160 --> 00:25:32.670
DMITRY GRINBERG: Sure.

00:25:32.670 --> 00:25:35.240
ERIC SCHLAEPFER: And so that
just runs through all these

00:25:35.240 --> 00:25:39.280
different colors, very pretty.

00:25:39.280 --> 00:25:39.680
Excellent.

00:25:39.680 --> 00:25:41.640
Thanks, Dmitry.

00:25:41.640 --> 00:25:43.160
OK, let's talk about sensors.

00:25:43.160 --> 00:25:44.610
You got a little bit of a
preview of some of those

00:25:44.610 --> 00:25:47.030
sensors when I was talking
about it earlier.

00:25:47.030 --> 00:25:49.490
There's a thermometer hygrometer
device that will

00:25:49.490 --> 00:25:51.840
give you the temperature as well
as the relative humidity

00:25:51.840 --> 00:25:53.010
in percent.

00:25:53.010 --> 00:25:55.270
I think everybody that I showed
it to came by and had

00:25:55.270 --> 00:25:57.630
to breathe on it to see if their
breath would increase

00:25:57.630 --> 00:25:59.480
the humidity, which it did.

00:25:59.480 --> 00:26:03.160
And, yes, I was able to
saturate the sensor.

00:26:03.160 --> 00:26:05.100
There's also a barometer
that's in the device.

00:26:05.100 --> 00:26:06.950
It's incredibly sensitive.

00:26:06.950 --> 00:26:10.450
In fact, it's so sensitive to
pressure that if I take an ADK

00:26:10.450 --> 00:26:13.560
and I hold it up here, and then
I drop it down here, it

00:26:13.560 --> 00:26:15.380
can tell the difference
in pressure.

00:26:18.240 --> 00:26:20.000
We've also got-- thank you.

00:26:20.000 --> 00:26:23.590
[APPLAUSE]

00:26:23.590 --> 00:26:25.720
We've also got an accelerometer
magnetometer.

00:26:25.720 --> 00:26:27.580
So let's switch to
the camera again.

00:26:27.580 --> 00:26:29.610
And so, Dmitry's going to show
us what that looks like on the

00:26:29.610 --> 00:26:30.520
real time display.

00:26:30.520 --> 00:26:31.370
DMITRY GRINBERG: So this
is the device in

00:26:31.370 --> 00:26:32.000
accelerometer mode.

00:26:32.000 --> 00:26:34.680
So, blues are negative,
reds are positive.

00:26:34.680 --> 00:26:37.430
So I can rotate it and see
the accelerations change.

00:26:37.430 --> 00:26:39.950
And we can do the same for
a magnetometer as well.

00:26:39.950 --> 00:26:43.550
So I can attempt to find some
direction of north here if I

00:26:43.550 --> 00:26:44.800
knew how to interpret
this data.

00:26:47.530 --> 00:26:48.840
But it does show some
random value.

00:26:48.840 --> 00:26:50.545
So as far as looking cool
goes, it works.

00:26:53.215 --> 00:26:55.123
[APPLAUSE]

00:26:55.123 --> 00:26:57.960
And the other sensors
are here as well.

00:26:57.960 --> 00:27:01.290
So there's the temperature,
26.3 Celsius.

00:27:01.290 --> 00:27:04.430
Humidity, I'm not going to make
Eric breathe on this.

00:27:04.430 --> 00:27:10.590
We have the current pressure,
proximity, and you already saw

00:27:10.590 --> 00:27:13.270
the color matching mode.

00:27:13.270 --> 00:27:14.520
ERIC SCHLAEPFER:
Thanks, Dmitry.

00:27:18.056 --> 00:27:22.890
[APPLAUSE]

00:27:22.890 --> 00:27:25.420
It's funny, when we were doing
some rehearsals for the demos,

00:27:25.420 --> 00:27:27.380
we were running this
off of a battery.

00:27:27.380 --> 00:27:31.140
And he picked this up, and he
literally threw it at me.

00:27:31.140 --> 00:27:33.040
But it was in accelerometer
mode.

00:27:33.040 --> 00:27:36.440
And all the numbers went to zero
because it's essentially

00:27:36.440 --> 00:27:37.160
in free fall.

00:27:37.160 --> 00:27:39.200
And so, of course, I was a
little scared because here's

00:27:39.200 --> 00:27:40.400
this thing flying
through the air.

00:27:40.400 --> 00:27:41.330
But then I'm looking
at the LEDs.

00:27:41.330 --> 00:27:42.600
Hey, they're all zero.

00:27:42.600 --> 00:27:44.670
Physics works.

00:27:44.670 --> 00:27:46.550
DMITRY GRINBERG: Unfortunately
for you, he did not get hit.

00:27:50.310 --> 00:27:51.580
ERIC SCHLAEPFER: OK,
so the API that's

00:27:51.580 --> 00:27:52.740
involved is very simple.

00:27:52.740 --> 00:27:55.610
And it actually handles all the
calibration calculations,

00:27:55.610 --> 00:27:56.610
of which there are many.

00:27:56.610 --> 00:27:59.000
Especially that barometer,
there's a lot of number

00:27:59.000 --> 00:28:01.050
crunching that we had to
do to get real numbers.

00:28:01.050 --> 00:28:02.600
But the good news for you
guys is that all that

00:28:02.600 --> 00:28:03.450
code has been done.

00:28:03.450 --> 00:28:04.050
It's all written.

00:28:04.050 --> 00:28:05.570
And the API is very simple.

00:28:05.570 --> 00:28:07.230
You just make a function
call here to,

00:28:07.230 --> 00:28:08.810
for example, baroRead.

00:28:08.810 --> 00:28:12.140
And you just pass in pressure
and temperature, and it will

00:28:12.140 --> 00:28:14.900
go in and take those pointers
and put numbers in them.

00:28:14.900 --> 00:28:16.600
And now you've got the pressure
and the temperature.

00:28:16.600 --> 00:28:19.180
It's very simple.

00:28:19.180 --> 00:28:22.690
All right, Dmitry's going to
talk about the sample code for

00:28:22.690 --> 00:28:25.820
the clock sketch
in the Arduino.

00:28:25.820 --> 00:28:27.590
DMITRY GRINBERG: Thank you.

00:28:27.590 --> 00:28:30.550
So the code of everything that
I'm demonstrating here, this

00:28:30.550 --> 00:28:31.430
is all built in.

00:28:31.430 --> 00:28:33.530
We're giving this code
to you of course.

00:28:33.530 --> 00:28:35.480
And there's a few interesting
things to look into that.

00:28:35.480 --> 00:28:37.950
And there's absolutely no way I
can go through all of it or

00:28:37.950 --> 00:28:40.060
even a large piece of it.

00:28:40.060 --> 00:28:42.370
The interesting thing to mention
here, if you've ever

00:28:42.370 --> 00:28:45.830
used Arduino before, is a lot
of this stuff happens in the

00:28:45.830 --> 00:28:46.510
background.

00:28:46.510 --> 00:28:47.650
Some of it's interrupt driven.

00:28:47.650 --> 00:28:48.720
Some of it is not.

00:28:48.720 --> 00:28:50.870
So we actually have a small
cooperative multitasking

00:28:50.870 --> 00:28:53.650
system behind the scenes to let
everything happen behind

00:28:53.650 --> 00:28:56.080
scenes, like Bluetooth
and USB.

00:28:56.080 --> 00:28:59.690
So, once in a while, you have
to call ADK event process,

00:28:59.690 --> 00:29:01.655
which just allows the ADK
to process all of

00:29:01.655 --> 00:29:02.480
its background work.

00:29:02.480 --> 00:29:05.300
And you can do that whenever
you're in a busy loop or in

00:29:05.300 --> 00:29:06.990
some other such place.

00:29:06.990 --> 00:29:09.840
And if you don't do that,
bad things will happen.

00:29:09.840 --> 00:29:11.610
So please do.

00:29:11.610 --> 00:29:12.280
And--

00:29:12.280 --> 00:29:14.440
ERIC SCHLAEPFER: So, just
to go back to that, the

00:29:14.440 --> 00:29:16.370
multitasking thing sounds
complicated.

00:29:16.370 --> 00:29:18.110
Like, do I really have
to worry about that?

00:29:18.110 --> 00:29:20.350
Or is it as simple as making
that function call every once

00:29:20.350 --> 00:29:20.990
in a while?

00:29:20.990 --> 00:29:22.940
DMITRY GRINBERG: So, if you
don't want to play around with

00:29:22.940 --> 00:29:24.520
multitasking, you just make
that function call and

00:29:24.520 --> 00:29:25.820
everything works.

00:29:25.820 --> 00:29:28.270
If you want to, you can play
around with the multitasking.

00:29:28.270 --> 00:29:29.450
And it's actually very simple.

00:29:29.450 --> 00:29:31.670
There's two functions, really,
if you care about.

00:29:31.670 --> 00:29:34.580
One to launch a thread
and one to yield.

00:29:34.580 --> 00:29:36.085
And the thread dies
just whenever you

00:29:36.085 --> 00:29:37.040
return from that function.

00:29:37.040 --> 00:29:38.770
So if you want to use
it, go ahead.

00:29:38.770 --> 00:29:40.530
It is in the code.

00:29:40.530 --> 00:29:43.690
And the other example here is
how we display the time.

00:29:43.690 --> 00:29:45.700
And it is just these
few lines.

00:29:45.700 --> 00:29:47.630
I skipped the minutes
and seconds.

00:29:47.630 --> 00:29:50.610
But you just get the RTC
and display them.

00:29:50.610 --> 00:29:52.900
The next line you see there is
how the alarm sounds are

00:29:52.900 --> 00:29:55.160
played for the alarm.

00:29:55.160 --> 00:29:56.610
And, also, we have an
alarm preview that

00:29:56.610 --> 00:29:59.470
does that as well.

00:29:59.470 --> 00:30:01.460
So if I go to the alarm mode--

00:30:01.460 --> 00:30:02.440
[MUSIC PLAYING]

00:30:02.440 --> 00:30:04.070
I don't think we have a
microphone on anymore.

00:30:04.070 --> 00:30:08.560
But it does do that using
the Ogg play background.

00:30:08.560 --> 00:30:11.160
As soon as I let go,
it gets canceled.

00:30:11.160 --> 00:30:14.650
And also, we have the Process
USB accessory function, which

00:30:14.650 --> 00:30:17.530
handles the USB messages
that arrive.

00:30:17.530 --> 00:30:20.440
That gets called in the main
loop, unlike the USB code,

00:30:20.440 --> 00:30:21.730
which gets called
from the USB--

00:30:21.730 --> 00:30:23.560
or, sorry, Bluetooth
code, which gets

00:30:23.560 --> 00:30:26.190
called from the callback.

00:30:26.190 --> 00:30:28.330
This is actually
that callback.

00:30:28.330 --> 00:30:30.020
And the data arrives.

00:30:30.020 --> 00:30:33.040
And we pass it to
adkProcessCommand, which just

00:30:33.040 --> 00:30:35.730
processes the command received
and sends back a response.

00:30:35.730 --> 00:30:37.310
That function's actually
in common between

00:30:37.310 --> 00:30:38.330
Bluetooth and USB.

00:30:38.330 --> 00:30:39.770
So protocol is the same.

00:30:39.770 --> 00:30:41.760
So when you're writing your
Android application, you

00:30:41.760 --> 00:30:43.820
shouldn't need to know
or care how you're

00:30:43.820 --> 00:30:45.390
connected to the ADK.

00:30:45.390 --> 00:30:49.220
Everything should work
exactly the same.

00:30:49.220 --> 00:30:51.311
ERIC SCHLAEPFER: Excellent.

00:30:51.311 --> 00:31:00.270
[APPLAUSE]

00:31:00.270 --> 00:31:01.730
DMITRY GRINBERG: We were really
hoping you guys have a

00:31:01.730 --> 00:31:02.690
lot of questions.

00:31:02.690 --> 00:31:04.020
So let's have it.

00:31:04.020 --> 00:31:05.200
ERIC SCHLAEPFER: So where there
are microphones in the

00:31:05.200 --> 00:31:07.020
middle of the room here-- so if
you have a question, please

00:31:07.020 --> 00:31:08.220
come up and ask it.

00:31:08.220 --> 00:31:09.570
And we'll do our
best to answer.

00:31:12.300 --> 00:31:14.161
AUDIENCE: Shut up and
take my money.

00:31:14.161 --> 00:31:15.574
[LAUGHTER]

00:31:15.574 --> 00:31:17.458
[APPLAUSE]

00:31:17.458 --> 00:31:19.820
ERIC SCHLAEPFER: Thank you.

00:31:19.820 --> 00:31:21.330
AUDIENCE: No, it's a really
impressive piece of [? kit. ?]

00:31:21.330 --> 00:31:26.435
I actually had a couple
questions about the--

00:31:26.435 --> 00:31:28.940
I'm a big Arduino fan.

00:31:28.940 --> 00:31:31.710
What are you guys running
in the Arduino?

00:31:31.710 --> 00:31:35.700
Like, what Arduino
are you running?

00:31:35.700 --> 00:31:37.950
ERIC SCHLAEPFER: What Arduino
are we running?

00:31:37.950 --> 00:31:41.200
AUDIENCE: With respect to,
you know, its amount of

00:31:41.200 --> 00:31:41.940
capability.

00:31:41.940 --> 00:31:43.490
Is it a--

00:31:43.490 --> 00:31:46.900
let's take it apart.

00:31:46.900 --> 00:31:49.770
ERIC SCHLAEPFER: OK, so I think
what you're asking is,

00:31:49.770 --> 00:31:51.790
this is a 32-bit device.

00:31:51.790 --> 00:31:54.660
And it's clearly running
under the Arduino IDE.

00:31:54.660 --> 00:31:56.330
So what Arduino is
it based on?

00:31:56.330 --> 00:31:56.980
AUDIENCE: Yeah.

00:31:56.980 --> 00:31:58.040
ERIC SCHLAEPFER: And the answer
is actually that it's

00:31:58.040 --> 00:31:59.660
kind of its own thing.

00:31:59.660 --> 00:32:03.910
It's similar in certain ways
to the Arduino Due.

00:32:03.910 --> 00:32:05.390
But it's definitely not
the same thing.

00:32:05.390 --> 00:32:07.060
It's kind of its own animal.

00:32:07.060 --> 00:32:09.870
But it still retains the
ease of use that

00:32:09.870 --> 00:32:10.970
you get with Arduino.

00:32:10.970 --> 00:32:13.550
And so, if you go to our website
and you download all

00:32:13.550 --> 00:32:17.130
of that stuff, you can just
select Google ADK 2.0 and then

00:32:17.130 --> 00:32:19.224
just start running
sketches on it.

00:32:19.224 --> 00:32:20.620
AUDIENCE: So you have your own
built like the [INAUDIBLE]

00:32:20.620 --> 00:32:21.050
ERIC SCHLAEPFER:
Right, exactly.

00:32:21.050 --> 00:32:25.820
Now, you won't necessarily be
able to run all that ADK 2.0

00:32:25.820 --> 00:32:29.320
code on an Arduino Due when
it hits the market, right?

00:32:29.320 --> 00:32:31.230
So they are different devices.

00:32:31.230 --> 00:32:33.840
TRAVIS GEISELBRECHT: We did work
with Arduino for this.

00:32:33.840 --> 00:32:36.620
Just the timing worked out to
where this comes out a little

00:32:36.620 --> 00:32:40.950
bit before they have their
ARM-based things.

00:32:40.950 --> 00:32:42.110
I don't know the
timing on that.

00:32:42.110 --> 00:32:44.100
But when they do, these ought
to be pretty close.

00:32:44.100 --> 00:32:48.520
So this is kind of a preview
release of Arduino for ARM.

00:32:48.520 --> 00:32:50.060
AUDIENCE: It's really,
really impressive.

00:32:50.060 --> 00:32:50.580
This segment [INAUDIBLE]

00:32:50.580 --> 00:32:50.980
[INTERPOSING VOICES]

00:32:50.980 --> 00:32:51.590
TRAVIS GEISELBRECHT: I mean,
it's very close.

00:32:51.590 --> 00:32:52.390
So this won't be--

00:32:52.390 --> 00:32:54.570
this is not some strange fork.

00:32:54.570 --> 00:32:55.410
It's based very, very
closely [INAUDIBLE]

00:32:55.410 --> 00:32:55.710
[INTERPOSING VOICES]

00:32:55.710 --> 00:32:58.370
DMITRY GRINBERG: We also do have
a build without Arduino,

00:32:58.370 --> 00:33:01.250
just a basic make file build
that we'll be providing as

00:33:01.250 --> 00:33:02.850
well for those who don't
want to use the

00:33:02.850 --> 00:33:04.290
Arduino ID for some reason.

00:33:04.290 --> 00:33:04.690
AUDIENCE: Thanks.

00:33:04.690 --> 00:33:05.750
Thank you very much, guys.

00:33:05.750 --> 00:33:06.920
You crushed it.

00:33:06.920 --> 00:33:07.770
ERIC SCHLAEPFER: All right,
next question.

00:33:07.770 --> 00:33:09.070
DMITRY GRINBERG: Let's go with
the person in the front--

00:33:09.070 --> 00:33:09.810
ERIC SCHLAEPFER: Up
front, please.

00:33:09.810 --> 00:33:10.520
DMITRY GRINBERG: --alternate.

00:33:10.520 --> 00:33:11.370
AUDIENCE: Hi.

00:33:11.370 --> 00:33:15.470
So last year's ADK was really
more of like a prototype

00:33:15.470 --> 00:33:18.020
board, which other manufacturers
would then

00:33:18.020 --> 00:33:21.620
create their own variations,
maybe at differing cost, price

00:33:21.620 --> 00:33:23.250
points, or whatever.

00:33:23.250 --> 00:33:27.330
But this year's ADK seems to be
more of a finished product.

00:33:27.330 --> 00:33:31.270
I was wondering, what is the
plan for supporting this

00:33:31.270 --> 00:33:33.480
outside of your product
going forward?

00:33:33.480 --> 00:33:35.100
Are other manufacturers
expected to

00:33:35.100 --> 00:33:36.820
produce a final good?

00:33:36.820 --> 00:33:41.520
Or are they producing boards,
which then we then build upon?

00:33:41.520 --> 00:33:45.140
And the second part the question
is, what, if any, of

00:33:45.140 --> 00:33:51.730
your convenience code can be
shared for ADK 2012 that's not

00:33:51.730 --> 00:33:53.340
manufactured by Google?

00:33:53.340 --> 00:33:55.350
ERIC SCHLAEPFER: OK, so we've
got a two-part question here.

00:33:55.350 --> 00:33:59.420
The first part, the PC board
files-- and that includes the

00:33:59.420 --> 00:34:01.640
schematics and the layouts
and all of that--

00:34:01.640 --> 00:34:03.110
all that's done in EAGLE.

00:34:03.110 --> 00:34:04.770
And that's completely
open source.

00:34:04.770 --> 00:34:07.760
So anybody else is free to make
a copy of that and begin

00:34:07.760 --> 00:34:09.409
manufacturing it.

00:34:09.409 --> 00:34:11.760
For the second part of the
question, I think Dmitry here

00:34:11.760 --> 00:34:13.060
can answer that.

00:34:13.060 --> 00:34:14.219
DMITRY GRINBERG: The source
code is also free.

00:34:14.219 --> 00:34:15.389
You're free to use it.

00:34:15.389 --> 00:34:16.580
The licensing is
very friendly.

00:34:16.580 --> 00:34:18.449
I don't think we have any code
that makes you pay for it.

00:34:18.449 --> 00:34:20.349
We don't have any code
that you have to open

00:34:20.349 --> 00:34:21.280
your source code for.

00:34:21.280 --> 00:34:23.860
So you can grab our code, use
it however you please.

00:34:23.860 --> 00:34:25.260
I believe the licenses
are all in there.

00:34:25.260 --> 00:34:27.370
And the code is going to be
made available, I believe,

00:34:27.370 --> 00:34:28.100
right after this talk.

00:34:28.100 --> 00:34:28.610
ERIC SCHLAEPFER: Right.

00:34:28.610 --> 00:34:29.170
TRAVIS GEISELBRECHT: Yeah,
right about now.

00:34:29.170 --> 00:34:30.320
DMITRY GRINBERG: So if you want
to grab the Bluetooth

00:34:30.320 --> 00:34:33.060
stack, or you want to grab
Travis' USB host code, or you

00:34:33.060 --> 00:34:35.340
want to grab some of the sensor
calibration code, you

00:34:35.340 --> 00:34:38.409
just grab it and use
it by yourself.

00:34:38.409 --> 00:34:40.130
ERIC SCHLAEPFER: So, for
example, what specific license

00:34:40.130 --> 00:34:43.199
do you use for the BSD stack--
or the BTstack?

00:34:43.199 --> 00:34:45.600
DMITRY GRINBERG: The BTstack, I
think, is actually licensed

00:34:45.600 --> 00:34:47.080
Apache or BSD or something
of the sort.

00:34:47.080 --> 00:34:47.690
ERIC SCHLAEPFER: Excellent.

00:34:47.690 --> 00:34:49.719
So it's usable for anyone.

00:34:49.719 --> 00:34:50.280
Next question, please--

00:34:50.280 --> 00:34:50.406
AUDIENCE: Great.

00:34:50.406 --> 00:34:50.739
Thanks.

00:34:50.739 --> 00:34:51.219
ERIC SCHLAEPFER:
--in the back.

00:34:51.219 --> 00:34:51.810
You're welcome.

00:34:51.810 --> 00:34:52.429
Anyone in the back?

00:34:52.429 --> 00:34:53.100
Nobody in the back.

00:34:53.100 --> 00:34:53.380
[INTERPOSING VOICES]

00:34:53.380 --> 00:34:55.120
ERIC SCHLAEPFER: Next
person up front.

00:34:55.120 --> 00:34:57.720
AUDIENCE: I wonder if you
could talk about the

00:34:57.720 --> 00:35:01.500
hackability of the Nexus Q and
how you guys came up with that

00:35:01.500 --> 00:35:06.550
demo and how you would write
an application for just a

00:35:06.550 --> 00:35:07.310
simple Arduino--

00:35:07.310 --> 00:35:08.830
not an ADK--

00:35:08.830 --> 00:35:10.460
interfacing with the Nexus Q.

00:35:10.460 --> 00:35:11.920
ERIC SCHLAEPFER: So the
important thing to recognize

00:35:11.920 --> 00:35:15.160
is that the Nexus Q
runs full Android.

00:35:15.160 --> 00:35:17.320
And so, it's perfectly capable
of running Android

00:35:17.320 --> 00:35:18.500
applications.

00:35:18.500 --> 00:35:22.120
And it also has the Android Open
Accessory protocol in it.

00:35:22.120 --> 00:35:24.610
And so we essentially worked
with it just like we would

00:35:24.610 --> 00:35:27.340
work with a phone.

00:35:27.340 --> 00:35:28.500
DMITRY GRINBERG: The main point
being there's absolutely

00:35:28.500 --> 00:35:30.470
nothing special being
done for it.

00:35:30.470 --> 00:35:31.070
You don't have to do anything.

00:35:31.070 --> 00:35:32.830
It just works.

00:35:32.830 --> 00:35:33.130
AUDIENCE: Hi.

00:35:33.130 --> 00:35:35.870
Thanks for a great
presentation.

00:35:35.870 --> 00:35:38.280
I'm more of a software guy
than electronic guy.

00:35:38.280 --> 00:35:41.090
So maybe my question could
be very silly.

00:35:41.090 --> 00:35:47.190
But I heard that there is a
problem with USB host that

00:35:47.190 --> 00:35:49.560
it's also charging the phone.

00:35:49.560 --> 00:35:54.390
So its problem that you
shouldn't charge the accessory

00:35:54.390 --> 00:35:57.580
from battery because you'll run
out fast of the battery.

00:35:57.580 --> 00:35:58.790
So is it true?

00:35:58.790 --> 00:36:03.660
And if yes, is it a better way
to make accessories that work

00:36:03.660 --> 00:36:07.700
only with phone and are not
connected to electricity?

00:36:07.700 --> 00:36:08.050
ERIC SCHLAEPFER: Sure.

00:36:08.050 --> 00:36:09.330
I'll take this question,
Travis.

00:36:09.330 --> 00:36:12.250
So it's kind of a known issue
with the way that USB

00:36:12.250 --> 00:36:13.630
accessories work.

00:36:13.630 --> 00:36:16.100
And, essentially, what happens
is the phone becomes a

00:36:16.100 --> 00:36:17.170
peripheral.

00:36:17.170 --> 00:36:20.290
And the accessory becomes
the host.

00:36:20.290 --> 00:36:22.480
And because of that
relationship, the way that USB

00:36:22.480 --> 00:36:26.130
works, the accessory, then, has
to provide power to the

00:36:26.130 --> 00:36:28.830
host, which is a
little strange.

00:36:28.830 --> 00:36:31.650
And the reason has to do with
sort of the lack of adoption

00:36:31.650 --> 00:36:34.970
of USB On-The-Go, which I think
is rather unfortunate.

00:36:34.970 --> 00:36:36.340
But it's the world that we
live in, and we have

00:36:36.340 --> 00:36:37.450
to deal with it.

00:36:37.450 --> 00:36:40.550
At the same time, though, a
redemptive factor is that

00:36:40.550 --> 00:36:43.170
Bluetooth is getting more and
more popular, especially for

00:36:43.170 --> 00:36:44.230
accessories.

00:36:44.230 --> 00:36:49.070
And so, I think that it's OK
that USB has its limitations

00:36:49.070 --> 00:36:52.090
because I want people to focus
on developing Bluetooth

00:36:52.090 --> 00:36:52.720
accessories.

00:36:52.720 --> 00:36:54.480
Wireless really is the future.

00:36:54.480 --> 00:36:57.040
And that's where we need to be
focusing our new development.

00:36:57.040 --> 00:36:59.330
And it's more fun, too.

00:36:59.330 --> 00:37:00.580
AUDIENCE: Thanks.

00:37:02.910 --> 00:37:05.110
AUDIENCE: I was wondering, the
USB audio API that was just

00:37:05.110 --> 00:37:06.790
announced in [INAUDIBLE], it
didn't really have any

00:37:06.790 --> 00:37:07.890
documentation for it.

00:37:07.890 --> 00:37:10.030
And I just wanted to ask if
you know whether it only

00:37:10.030 --> 00:37:13.530
allows Google Play to stream
music out that.

00:37:13.530 --> 00:37:15.470
TRAVIS GEISELBRECHT:
Oh no, not at all.

00:37:15.470 --> 00:37:18.030
All audio on the phone goes
through it at that point.

00:37:18.030 --> 00:37:19.835
It basically turns it into a--

00:37:19.835 --> 00:37:20.280
AUDIENCE: OK.

00:37:20.280 --> 00:37:21.120
So any app.

00:37:21.120 --> 00:37:22.500
TRAVIS GEISELBRECHT: Yeah, any
app, everything that plays

00:37:22.500 --> 00:37:23.430
sound goes through it.

00:37:23.430 --> 00:37:23.900
And it--

00:37:23.900 --> 00:37:26.010
ERIC SCHLAEPFER: So,
notifications, alarms, you

00:37:26.010 --> 00:37:28.105
could even use it like a
speaker phone, right?

00:37:28.105 --> 00:37:28.460
TRAVIS GEISELBRECHT: Mm-hm.

00:37:28.460 --> 00:37:32.330
And this is fully documented
on Android's side under the

00:37:32.330 --> 00:37:33.610
accessory protocol--

00:37:33.610 --> 00:37:36.080
I don't know if it's under
Jellybean docs or somewhere

00:37:36.080 --> 00:37:37.180
along those lines, but--

00:37:37.180 --> 00:37:38.640
ERIC SCHLAEPFER: It should
be on there right now.

00:37:38.640 --> 00:37:39.700
[INTERPOSING VOICES]

00:37:39.700 --> 00:37:41.620
There is documentation up
on the website now.

00:37:41.620 --> 00:37:44.210
TRAVIS GEISELBRECHT: There's
actually no API for it because

00:37:44.210 --> 00:37:45.540
it either works or it doesn't.

00:37:45.540 --> 00:37:47.500
DMITRY GRINBERG: Any output you
do on audio goes through

00:37:47.500 --> 00:37:49.200
the device as long as
it's plugged in.

00:37:49.200 --> 00:37:51.350
AUDIENCE: And isochronous mode,
is that going to be

00:37:51.350 --> 00:37:52.190
supported, you think?

00:37:52.190 --> 00:37:52.770
TRAVIS GEISELBRECHT: Sorry?

00:37:52.770 --> 00:37:56.330
AUDIENCE: Isochronous mode
for high sample rate USB

00:37:56.330 --> 00:37:57.200
accessories.

00:37:57.200 --> 00:37:58.950
TRAVIS GEISELBRECHT: At the
moment, I believe it is fixed

00:37:58.950 --> 00:38:01.940
at 44.1 16 bit--

00:38:01.940 --> 00:38:03.044
DMITRY GRINBERG: I think he's
asking about the packet types

00:38:03.044 --> 00:38:03.900
being used on USB.

00:38:03.900 --> 00:38:04.370
TRAVIS GEISELBRECHT: Oh, ISO.

00:38:04.370 --> 00:38:04.830
Sorry, sorry.

00:38:04.830 --> 00:38:06.210
Yes, it's all isochronous.

00:38:06.210 --> 00:38:09.500
It looks like a standard
USB audio, nothing

00:38:09.500 --> 00:38:10.050
particularly funny.

00:38:10.050 --> 00:38:12.380
But it does use isochronous
transfers.

00:38:12.380 --> 00:38:17.800
In this particular case, at 44.1
16 bit, I think it's 192

00:38:17.800 --> 00:38:20.830
bytes every frame.

00:38:20.830 --> 00:38:21.580
AUDIENCE: I was just curious--

00:38:21.580 --> 00:38:24.540
I'm not sure if I heard
correctly-- its Cortex, which

00:38:24.540 --> 00:38:25.770
actual package?

00:38:25.770 --> 00:38:26.880
ERIC SCHLAEPFER: Well, you
can certainly open it

00:38:26.880 --> 00:38:27.820
up and take a look.

00:38:27.820 --> 00:38:31.160
We're using the SAM3X processor
from Atmel.

00:38:31.160 --> 00:38:31.920
AUDIENCE:: OK, cool.

00:38:31.920 --> 00:38:34.500
And is everything pinned out?

00:38:34.500 --> 00:38:36.240
ERIC SCHLAEPFER: Most things
are pinned out.

00:38:36.240 --> 00:38:39.020
There's a couple of things that
aren't because, well, we

00:38:39.020 --> 00:38:40.770
ran out of Arduino pins.

00:38:40.770 --> 00:38:41.510
AUDIENCE: OK, great.

00:38:41.510 --> 00:38:42.010
Thank you.

00:38:42.010 --> 00:38:42.530
DMITRY GRINBERG: Most--

00:38:42.530 --> 00:38:45.360
but Eric spent a lot of time
making sure all the more

00:38:45.360 --> 00:38:47.400
interesting things are
available for you.

00:38:47.400 --> 00:38:50.000
So the things missing might
be just some bare GPIOs.

00:38:50.000 --> 00:38:50.730
ERIC SCHLAEPFER: That's
a good point.

00:38:50.730 --> 00:38:52.840
And we really didn't have time
to mention it in the actual

00:38:52.840 --> 00:38:53.910
presentation.

00:38:53.910 --> 00:38:56.330
But when I went through and
planned out which pins went

00:38:56.330 --> 00:38:59.590
out to which Arduino pins, I was
very careful to make sure

00:38:59.590 --> 00:39:02.420
that all the interesting pins
that have hardware accelerated

00:39:02.420 --> 00:39:05.640
functions actually go
out to Arduino pins.

00:39:05.640 --> 00:39:08.170
So, for example, the SAM3X
actually can support an

00:39:08.170 --> 00:39:10.070
external Ethernet FI.

00:39:10.070 --> 00:39:13.120
And so, I made sure that all
those connections made it out

00:39:13.120 --> 00:39:14.200
to Arduino pins.

00:39:14.200 --> 00:39:16.590
So that means that somebody--
maybe even one of you-- could

00:39:16.590 --> 00:39:19.300
make an Ethernet shield for
this device very easily.

00:39:19.300 --> 00:39:21.005
AUDIENCE: And could we actually
flash our own

00:39:21.005 --> 00:39:21.640
firmware too?

00:39:21.640 --> 00:39:22.470
DMITRY GRINBERG:
Oh, of course.

00:39:22.470 --> 00:39:22.910
TRAVIS GEISELBRECHT: 100%

00:39:22.910 --> 00:39:23.640
DMITRY GRINBERG: Absolutely.

00:39:23.640 --> 00:39:24.950
AUDIENCE: So all the code for
this is out too [INAUDIBLE]

00:39:24.950 --> 00:39:25.840
DMITRY GRINBERG: The
code is out.

00:39:25.840 --> 00:39:26.580
The tools are out.

00:39:26.580 --> 00:39:30.180
You can grab one and flash
it five minutes from now.

00:39:30.180 --> 00:39:31.230
TRAVIS GEISELBRECHT: It's
very simple actually.

00:39:31.230 --> 00:39:33.110
One of the two ports
acts like a serial

00:39:33.110 --> 00:39:34.350
port, the debug board.

00:39:34.350 --> 00:39:37.790
And the Atmel ROM has
a loader mode.

00:39:37.790 --> 00:39:38.720
It's well understood.

00:39:38.720 --> 00:39:42.060
There's an open source tool
called BOSSA out there that

00:39:42.060 --> 00:39:43.330
people use to update
these things.

00:39:43.330 --> 00:39:45.440
And, yeah, absolutely, you're
flashing it from

00:39:45.440 --> 00:39:46.880
zero right on up.

00:39:46.880 --> 00:39:48.290
DMITRY GRINBERG: One addition
to that is we have our own

00:39:48.290 --> 00:39:50.690
tool called the ADK 2.0 Tool,
which is just used

00:39:50.690 --> 00:39:52.480
to erase the chip.

00:39:52.480 --> 00:39:54.870
It just so happens that whenever
you plug this into

00:39:54.870 --> 00:39:58.830
certain platforms that aren't
Linux, the device gets erased

00:39:58.830 --> 00:40:00.910
all by itself because those
platforms insist on twiddling

00:40:00.910 --> 00:40:02.710
the control lines in
the serial port.

00:40:02.710 --> 00:40:05.520
So we have an extra little
microcontroller on the board

00:40:05.520 --> 00:40:07.490
to avoid such unpleasantries.

00:40:07.490 --> 00:40:09.670
So there is a tool called the
ADK 2.0 Tool, which we're

00:40:09.670 --> 00:40:12.710
releasing in source and binary,
which you use then to

00:40:12.710 --> 00:40:13.290
erase the device.

00:40:13.290 --> 00:40:15.830
Once it's erased, the Atmel
bootloader takes over and you

00:40:15.830 --> 00:40:17.620
can load your own firmware.

00:40:17.620 --> 00:40:19.420
ERIC SCHLAEPFER: It's actually
kind of a fun hack because

00:40:19.420 --> 00:40:21.040
we're using the control lines.

00:40:21.040 --> 00:40:22.740
And one of them becomes
a clock line.

00:40:22.740 --> 00:40:24.240
The other one becomes
a data line.

00:40:24.240 --> 00:40:27.440
And we actually clock a little
magic number into this tiny

00:40:27.440 --> 00:40:28.870
little microprocessor.

00:40:28.870 --> 00:40:31.020
And when it sees the
right code, then it

00:40:31.020 --> 00:40:32.420
tweaks the erase pin.

00:40:32.420 --> 00:40:34.630
And so you don't have to
interact with any physical

00:40:34.630 --> 00:40:36.956
buttons to erase the
code at all.

00:40:36.956 --> 00:40:37.870
Question?

00:40:37.870 --> 00:40:41.290
AUDIENCE: My question
is about the NFC.

00:40:41.290 --> 00:40:53.270
According to the document at the
developer site, using by

00:40:53.270 --> 00:40:56.620
NFC, lock the device and unlock
the device [INAUDIBLE].

00:40:56.620 --> 00:40:59.680
So my question is,
[? from your ?]

00:40:59.680 --> 00:41:00.500
[? call ?]

00:41:00.500 --> 00:41:07.600
can [? interrupt ?] with some
other devices through NFC or

00:41:07.600 --> 00:41:09.500
DEP or some protocol?

00:41:09.500 --> 00:41:09.700
ERIC SCHLAEPFER: OK.

00:41:09.700 --> 00:41:11.930
So the question has
to do with NFC.

00:41:11.930 --> 00:41:15.750
And we have an NFC Tag
on the device.

00:41:15.750 --> 00:41:17.880
And that's a passive tag.

00:41:17.880 --> 00:41:21.730
And what it does is it sends
your phone to Google Play to

00:41:21.730 --> 00:41:23.270
download the application.

00:41:23.270 --> 00:41:24.080
We didn't lock it.

00:41:24.080 --> 00:41:26.020
So it's in read/write mode,
which means you could peel it

00:41:26.020 --> 00:41:28.730
off and put something else
on it if you want to.

00:41:28.730 --> 00:41:31.740
The ADK itself doesn't really
support NFC at this point.

00:41:31.740 --> 00:41:33.690
Although if you're interested,
you may be able to put

00:41:33.690 --> 00:41:35.410
together a shield for us,
which would be awesome.

00:41:38.690 --> 00:41:40.820
AUDIENCE: Have you guys explored
the possibility of

00:41:40.820 --> 00:41:44.800
building a REST API to allow,
maybe, HTML, JavaScript

00:41:44.800 --> 00:41:46.420
interaction?

00:41:46.420 --> 00:41:49.120
I know with Raspberry Pi
I've explored that.

00:41:49.120 --> 00:41:53.110
And it's really accelerated
prototyping.

00:41:53.110 --> 00:41:55.040
DMITRY GRINBERG: Well, I mean,
this would make a little more

00:41:55.040 --> 00:41:56.880
sense if we had a
network-connected device.

00:41:56.880 --> 00:41:58.880
But we don't actually have
Wi-Fi on this device.

00:41:58.880 --> 00:41:59.890
So maybe once we have Wi-Fi--

00:41:59.890 --> 00:42:02.500
AUDIENCE: I actually meant on
the Android side of it.

00:42:02.500 --> 00:42:06.400
So the actual server, REST,
API would reside on the

00:42:06.400 --> 00:42:07.100
Android device.

00:42:07.100 --> 00:42:09.696
And you could actually
have HTML5 apps.

00:42:09.696 --> 00:42:11.480
They would interact.

00:42:11.480 --> 00:42:12.690
DMITRY GRINBERG: I don't
think any of us have

00:42:12.690 --> 00:42:13.230
thought about it.

00:42:13.230 --> 00:42:13.950
But you can implement it.

00:42:13.950 --> 00:42:16.580
I mean, the API to talk to this
is available, so there's

00:42:16.580 --> 00:42:17.490
no reason you can't do it.

00:42:17.490 --> 00:42:20.370
And then we can come and ask
you questions about it.

00:42:20.370 --> 00:42:21.280
[LAUGHTER]

00:42:21.280 --> 00:42:24.316
TRAVIS GEISELBRECHT: No, but
I'll bring that up as

00:42:24.316 --> 00:42:26.260
something to talk to the--

00:42:26.260 --> 00:42:27.305
ERIC SCHLAEPFER: I like
that idea though.

00:42:27.305 --> 00:42:27.845
TRAVIS GEISELBRECHT: --accessory
developers though,

00:42:27.845 --> 00:42:28.370
yeah, absolutely.

00:42:28.370 --> 00:42:29.900
DMITRY GRINBERG: That could
be pretty interesting.

00:42:29.900 --> 00:42:32.200
AUDIENCE: Can you speak a little
bit about battery life

00:42:32.200 --> 00:42:33.050
and power consumption?

00:42:33.050 --> 00:42:34.520
Of course, it depends
what it's running.

00:42:34.520 --> 00:42:37.650
But, for instance, are there
low power modes?

00:42:37.650 --> 00:42:40.220
And what are some figures for
battery life and power

00:42:40.220 --> 00:42:41.060
consumption?

00:42:41.060 --> 00:42:42.740
DMITRY GRINBERG: So, I don't
think we ever meant this to be

00:42:42.740 --> 00:42:43.790
a battery-powered device.

00:42:43.790 --> 00:42:46.710
There's a hole in back for all
the cables, including a power.

00:42:46.710 --> 00:42:48.360
But I have run this
off battery.

00:42:48.360 --> 00:42:49.820
And it runs.

00:42:49.820 --> 00:42:51.910
I don't think we've actually
measured the battery

00:42:51.910 --> 00:42:52.185
consumption.

00:42:52.185 --> 00:42:53.960
I don't think it was ever meant
to be such a thing.

00:42:53.960 --> 00:42:56.240
ERIC SCHLAEPFER: So, just to
talk about the electrical

00:42:56.240 --> 00:42:59.470
aspect of that, you could
certainly take the base shield

00:42:59.470 --> 00:43:01.550
and power that from a battery.

00:43:01.550 --> 00:43:04.670
The SAM3X device actually
includes a fairly complicated

00:43:04.670 --> 00:43:07.320
power management device that
will allow you to go in and

00:43:07.320 --> 00:43:08.900
throttle the clock down.

00:43:08.900 --> 00:43:10.920
So it's actually got a
full-blown clock tree.

00:43:10.920 --> 00:43:12.830
And there's a lot of stuff
going on in there.

00:43:12.830 --> 00:43:14.840
Most of that complexity
is available if you

00:43:14.840 --> 00:43:15.760
want to hack on it.

00:43:15.760 --> 00:43:17.780
But for people that just want to
get it working as an alarm

00:43:17.780 --> 00:43:20.270
clock or play with Arduino,
it's all hidden.

00:43:20.270 --> 00:43:22.530
So you don't have to worry about
it if you don't want to.

00:43:22.530 --> 00:43:24.590
But if you do you want to worry
about power consumption,

00:43:24.590 --> 00:43:26.870
there are definitely ways to
go in there and tweak that.

00:43:26.870 --> 00:43:30.130
Now, obviously, if you're
running all 64 RGB LEDs and

00:43:30.130 --> 00:43:32.560
got some bass thumping on this
thing, it's really not going

00:43:32.560 --> 00:43:33.650
to last that long.

00:43:33.650 --> 00:43:34.760
DMITRY GRINBERG: It does
work on battery though.

00:43:34.760 --> 00:43:36.010
So I can actually show that.

00:43:39.480 --> 00:43:40.457
ERIC SCHLAEPFER: Oh,
look at that.

00:43:40.457 --> 00:43:41.740
[MUSIC PLAYING]

00:43:41.740 --> 00:43:44.602
DMITRY GRINBERG:
You can do it.

00:43:44.602 --> 00:43:48.310
[APPLAUSE]

00:43:48.310 --> 00:43:49.760
AUDIENCE: So you guys mentioned
just a minute ago

00:43:49.760 --> 00:43:53.210
that you could have one of these
flashed in five minutes.

00:43:53.210 --> 00:43:54.810
So I'm just kind of curious.

00:43:54.810 --> 00:43:55.685
I came in a little late.

00:43:55.685 --> 00:43:56.210
So maybe you said it.

00:43:56.210 --> 00:43:58.200
But what's the availability
on these devices?

00:43:58.200 --> 00:44:00.440
And how can we get our
hands on them?

00:44:00.440 --> 00:44:02.100
DMITRY GRINBERG: I believe all
you already will get your

00:44:02.100 --> 00:44:03.120
hands on it.

00:44:03.120 --> 00:44:04.440
ERIC SCHLAEPFER: That's actually
a really good segue.

00:44:04.440 --> 00:44:07.100
Since we're nearing the end of
the session, everybody in this

00:44:07.100 --> 00:44:10.884
room is going to get
their own ADK.

00:44:10.884 --> 00:44:23.850
[APPLAUSE]

00:44:23.850 --> 00:44:26.120
AUDIENCE: Just a question
out of curiosity.

00:44:26.120 --> 00:44:28.810
You said you checked the
Bluetooth connection with

00:44:28.810 --> 00:44:30.730
various other platforms.

00:44:30.730 --> 00:44:32.690
Does that include
a major rivaling

00:44:32.690 --> 00:44:35.920
mobile operating system?

00:44:35.920 --> 00:44:37.270
DMITRY GRINBERG: I don't
have a Windows Phone.

00:44:37.270 --> 00:44:38.735
So I can't tell you that.

00:44:38.735 --> 00:44:41.036
[LAUGHTER]

00:44:41.036 --> 00:44:43.320
[APPLAUSE]

00:44:43.320 --> 00:44:45.560
DMITRY GRINBERG: However, it
does work with another rival

00:44:45.560 --> 00:44:46.260
operating system.

00:44:46.260 --> 00:44:50.800
I actually use mine at home to
play music off of my iPhone.

00:44:50.800 --> 00:44:52.340
ERIC SCHLAEPFER: Is that the one
from a certain Cupertino

00:44:52.340 --> 00:44:53.372
fruit company?

00:44:53.372 --> 00:44:54.276
[LAUGHTER]

00:44:54.276 --> 00:44:55.526
AUDIENCE: Thank you.

00:44:57.440 --> 00:44:59.340
AUDIENCE: Are you providing
any reference

00:44:59.340 --> 00:45:02.020
schematics or PCV docs?

00:45:02.020 --> 00:45:02.690
ERIC SCHLAEPFER: Absolutely.

00:45:02.690 --> 00:45:04.070
So, they're all being
posted on the

00:45:04.070 --> 00:45:05.920
website in EAGLE format.

00:45:05.920 --> 00:45:08.260
So you can pull them up in the
free version of EAGLE and

00:45:08.260 --> 00:45:09.510
start hacking away.

00:45:14.930 --> 00:45:18.250
AUDIENCE: What's the current
and future status of

00:45:18.250 --> 00:45:20.350
availability of shields
for this?

00:45:20.350 --> 00:45:22.540
So, I mean, it's a fairly
standard pin

00:45:22.540 --> 00:45:23.170
out, it looks like.

00:45:23.170 --> 00:45:24.970
But I'm just wondering if you
can sort of talk about what's

00:45:24.970 --> 00:45:27.670
out there that can be already
plugged into this today.

00:45:27.670 --> 00:45:30.400
ERIC SCHLAEPFER: So the device
is compatible with any Arduino

00:45:30.400 --> 00:45:33.540
Version 3.0 shield and
that's because

00:45:33.540 --> 00:45:35.040
it's a 3.3-volt device.

00:45:35.040 --> 00:45:37.930
And so any shield that wants to
use that needs to have its

00:45:37.930 --> 00:45:39.660
own on-board level shifters.

00:45:39.660 --> 00:45:43.740
And so the V3.0 Arduino shield
format includes that inner

00:45:43.740 --> 00:45:44.520
specification.

00:45:44.520 --> 00:45:46.630
So there's a reference pin
that you use to set the

00:45:46.630 --> 00:45:47.980
reference voltage
and communicate

00:45:47.980 --> 00:45:49.930
that onto the shield.

00:45:49.930 --> 00:45:52.120
And so if you have a V3.0
shield, you plug it in, it

00:45:52.120 --> 00:45:55.185
should just work.

00:45:55.185 --> 00:45:56.550
Yes.

00:45:56.550 --> 00:45:57.930
AUDIENCE: How much memory
do we have on

00:45:57.930 --> 00:46:00.030
the outer unit itself?

00:46:00.030 --> 00:46:02.090
DMITRY GRINBERG: So there's
a few memories here.

00:46:02.090 --> 00:46:03.120
So let me go over them.

00:46:03.120 --> 00:46:04.510
The SD card the units
come with, I

00:46:04.510 --> 00:46:06.260
believe, is four gigabytes.

00:46:06.260 --> 00:46:10.840
The device itself has 512
megabytes of flash for storing

00:46:10.840 --> 00:46:12.683
code and constant data.

00:46:12.683 --> 00:46:13.390
TRAVIS GEISELBRECHT:
Kilobytes.

00:46:13.390 --> 00:46:14.600
DMITRY GRINBERG: Oh, I'm
sorry, 512 kilobytes.

00:46:14.600 --> 00:46:15.830
[LAUGHTER]

00:46:15.830 --> 00:46:17.810
Wishful thinking, I must say.

00:46:17.810 --> 00:46:22.270
And the device itself has 100
kilobytes of RAM as well.

00:46:22.270 --> 00:46:24.770
There's 96 contiguous
kilobytes for--

00:46:24.770 --> 00:46:27.000
and there's also four more in
the NAND controller, which

00:46:27.000 --> 00:46:27.530
we're not using.

00:46:27.530 --> 00:46:28.430
So you can use those as well.

00:46:28.430 --> 00:46:30.360
So it's about 100 kilobytes
of RAM total.

00:46:30.360 --> 00:46:31.120
AUDIENCE: OK, great.

00:46:31.120 --> 00:46:33.160
Thanks.

00:46:33.160 --> 00:46:35.540
AUDIENCE: Hi, could you also
elaborate on availability for

00:46:35.540 --> 00:46:38.530
things like educational
discounts or just general

00:46:38.530 --> 00:46:41.430
consumer buying the device in
the future, what the plans are

00:46:41.430 --> 00:46:42.610
going forward?

00:46:42.610 --> 00:46:44.520
ERIC SCHLAEPFER: At this point,
it's a giveaway for

00:46:44.520 --> 00:46:47.600
Google I/O. There may be
some future plans.

00:46:47.600 --> 00:46:49.325
All I can say is, stay tuned.

00:46:49.325 --> 00:46:50.575
AUDIENCE: OK, thanks.

00:46:53.410 --> 00:46:54.080
ERIC SCHLAEPFER: OK, great.

00:46:54.080 --> 00:46:56.625
Any more questions?

00:46:56.625 --> 00:46:57.700
DMITRY GRINBERG: I think there's
a person raising their

00:46:57.700 --> 00:46:59.390
hand right there.

00:46:59.390 --> 00:47:00.730
ERIC SCHLAEPFER: I don't
see any hands.

00:47:00.730 --> 00:47:02.140
DMITRY GRINBERG: Must have
been stretching.

00:47:02.140 --> 00:47:02.990
ERIC SCHLAEPFER: OK.

00:47:02.990 --> 00:47:03.270
All right.

00:47:03.270 --> 00:47:04.521
Thank you very much.

00:47:04.521 --> 00:47:07.748
[APPLAUSE]

00:47:07.748 --> 00:47:11.580
And before you guys leave the
room, please note that for the

00:47:11.580 --> 00:47:13.640
giveaway there are going
to be people by the

00:47:13.640 --> 00:47:15.280
doors holding cards.

00:47:15.280 --> 00:47:18.170
Be sure to grab a card because
that is your ticket for your

00:47:18.170 --> 00:47:20.660
free ADK that you can get
at the stuff booth

00:47:20.660 --> 00:47:22.060
on the first floor.

00:47:22.060 --> 00:47:23.310
Thank you for coming.

