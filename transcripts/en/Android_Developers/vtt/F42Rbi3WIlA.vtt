WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.346
[MUSIC PLAYING]

00:00:05.624 --> 00:00:06.790
MARU AHUES: My name is Maru.

00:00:06.790 --> 00:00:09.460
I'm a developer advocate
working on Instant Apps.

00:00:09.460 --> 00:00:13.060
And we're here today to do
an Android Instant Apps Best

00:00:13.060 --> 00:00:14.650
Practices Fireside Chat.

00:00:14.650 --> 00:00:17.530
It's lots of words.

00:00:17.530 --> 00:00:19.900
As you know, we announced
Instant Apps last year

00:00:19.900 --> 00:00:22.480
at Google I/O to lots
of developer excitement.

00:00:22.480 --> 00:00:24.970
And we're so happy that
we're able to open it today

00:00:24.970 --> 00:00:26.530
to all developers.

00:00:26.530 --> 00:00:28.580
And in the process
of getting here,

00:00:28.580 --> 00:00:31.150
we worked with a large
group of developers

00:00:31.150 --> 00:00:33.160
to get all those
nice apps that you

00:00:33.160 --> 00:00:36.170
saw in the previous sessions.

00:00:36.170 --> 00:00:39.440
Some part of that group
is sitting with me today.

00:00:39.440 --> 00:00:45.650
So we have our panel from
CastBox, Twitter, Vimeo,

00:00:45.650 --> 00:00:48.515
Deliveroo, and Zillow.

00:00:48.515 --> 00:00:49.505
Woo hoo.

00:00:54.950 --> 00:00:57.550
So let's get started
with some intros.

00:00:57.550 --> 00:00:59.150
First, Alan.

00:00:59.150 --> 00:01:01.880
Alan is a product
manager for CastBox.

00:01:01.880 --> 00:01:04.099
And he loves
listening to podcasts.

00:01:04.099 --> 00:01:07.640
He works on trying to optimize
the listening experience

00:01:07.640 --> 00:01:10.200
on podcasts for his users.

00:01:10.200 --> 00:01:13.330
Alan, tell me, which ones
are your favorite podcasts?

00:01:13.330 --> 00:01:16.460
ALAN TANG: Serial, This
American Life, and especially

00:01:16.460 --> 00:01:18.510
99% Invisible.

00:01:18.510 --> 00:01:21.200
Because it is made right
here in Oakland, California.

00:01:21.200 --> 00:01:22.940
MARU AHUES: Oh, nice, Oakland.

00:01:22.940 --> 00:01:23.990
Anyone from Oakland here?

00:01:28.090 --> 00:01:30.920
OK, next we have
Lien from Twitter.

00:01:30.920 --> 00:01:33.560
And, yeah.

00:01:33.560 --> 00:01:37.340
Lien is a senior staff
software engineer for Twitter.

00:01:37.340 --> 00:01:39.680
And she works on Periscope.

00:01:39.680 --> 00:01:42.860
She was a tech lead for
the Fabric team as well.

00:01:42.860 --> 00:01:45.230
And she worked on the
mobile Twitter app.

00:01:45.230 --> 00:01:46.460
She likes to hike.

00:01:46.460 --> 00:01:48.590
She likes arts and crafts.

00:01:48.590 --> 00:01:51.050
And she also likes to
work in the garden.

00:01:51.050 --> 00:01:56.480
Lien, let's see, any favorite
spots that you like to hike in?

00:01:56.480 --> 00:01:59.120
ALAN TANG: Yeah, so I have
a spot down on the peninsula

00:01:59.120 --> 00:02:00.560
called Hidden Villa.

00:02:00.560 --> 00:02:02.540
And it has a lot of
beautiful trails.

00:02:02.540 --> 00:02:05.180
My favorite runs
alongside this creek.

00:02:05.180 --> 00:02:08.780
Its got lots of shade and
gently sloping trails.

00:02:08.780 --> 00:02:11.830
So its a perfect hike for
me and my son who's four.

00:02:11.830 --> 00:02:13.540
MARU AHUES: Oh, good.

00:02:13.540 --> 00:02:14.420
I love Hidden Villa.

00:02:14.420 --> 00:02:16.480
It's nice.

00:02:16.480 --> 00:02:19.130
Next, we have Kyle.

00:02:19.130 --> 00:02:20.920
Kyle from Vimeo.

00:02:20.920 --> 00:02:23.660
Kyle, woo ho.

00:02:23.660 --> 00:02:25.490
Kyle came here
from New York City.

00:02:25.490 --> 00:02:29.210
And he is the Android
lead for the Vimeo app.

00:02:29.210 --> 00:02:32.330
He worked both in the creation
of the mobile and the TV apps,

00:02:32.330 --> 00:02:34.790
which are both great.

00:02:34.790 --> 00:02:36.510
And he loves to travel.

00:02:36.510 --> 00:02:39.399
And he told me this
story that I think

00:02:39.399 --> 00:02:41.440
he should share with you
guys from his last trip.

00:02:41.440 --> 00:02:43.023
KYLE VENN: Yeah,
actually my last trip

00:02:43.023 --> 00:02:45.890
I got to bungee jump off
a bridge in Zimbabwe,

00:02:45.890 --> 00:02:48.020
which is a ton of fun.

00:02:48.020 --> 00:02:49.190
MARU AHUES: How was that?

00:02:49.190 --> 00:02:50.630
KYLE VENN: A blast,
exhilarating,

00:02:50.630 --> 00:02:53.001
and it was right over a
river so kind of horrifying.

00:02:53.001 --> 00:02:53.750
MARU AHUES: Scary.

00:02:53.750 --> 00:02:55.610
KYLE VENN: Yeah.

00:02:55.610 --> 00:02:56.720
MARU AHUES: Great.

00:02:56.720 --> 00:02:58.200
Now we go to Ana.

00:02:58.200 --> 00:02:59.750
Ana is from Deliveroo.

00:02:59.750 --> 00:03:01.850
She came from London,
a long way here.

00:03:01.850 --> 00:03:04.040
Thank you Ana.

00:03:04.040 --> 00:03:07.030
Ana works on the consumer
application for the Deliveroo.

00:03:07.030 --> 00:03:08.840
She is an Android engineer.

00:03:08.840 --> 00:03:10.860
And she loves sweets.

00:03:10.860 --> 00:03:16.881
So she has a funny story about
her order history in Deliveroo.

00:03:16.881 --> 00:03:19.130
ANA CAPATINA: Yes, so if you
look at my order history,

00:03:19.130 --> 00:03:21.320
you will see that I
mainly order sweets.

00:03:21.320 --> 00:03:23.210
But I also had a prawn.

00:03:23.210 --> 00:03:24.470
Yes, I ordered one prawn.

00:03:24.470 --> 00:03:27.860
Because I was showing to my
sister what I was working on.

00:03:27.860 --> 00:03:30.310
And I just told her,
no matter what did do,

00:03:30.310 --> 00:03:32.060
don't press this button.

00:03:32.060 --> 00:03:35.060
And as I was pointing to that
button, I just touched it.

00:03:35.060 --> 00:03:37.160
And I placed an order.

00:03:37.160 --> 00:03:38.660
MARU AHUES: Someone
got free prawns.

00:03:38.660 --> 00:03:41.270
They were probably
a little surprised.

00:03:41.270 --> 00:03:44.300
Now we go to--

00:03:44.300 --> 00:03:45.050
I know your name.

00:03:45.050 --> 00:03:45.620
Lucas.

00:03:45.620 --> 00:03:48.470
Lucas from Zillow.

00:03:48.470 --> 00:03:51.980
Lucas is a software
engineer on the Zillow team.

00:03:51.980 --> 00:03:53.390
And he works on
their mobile app.

00:03:53.390 --> 00:03:56.270
He's been at Zillow
for three years.

00:03:56.270 --> 00:03:59.120
And Lucas likes to
play games and also

00:03:59.120 --> 00:04:02.900
to watch random documentaries
and Netflix and YouTube.

00:04:02.900 --> 00:04:05.360
Tell me one, just
one random document.

00:04:05.360 --> 00:04:06.980
LUCAS TAKATORI:
So, one documentary

00:04:06.980 --> 00:04:10.550
I watched recently on YouTube
was about a Harpy eagle.

00:04:10.550 --> 00:04:12.590
It's one of the largest
eagles in the world.

00:04:12.590 --> 00:04:14.060
And it's in South America.

00:04:14.060 --> 00:04:16.279
And it's really fun to
be able to follow around

00:04:16.279 --> 00:04:20.319
a baby Harpy eagle for four
months in a one-hour video.

00:04:20.319 --> 00:04:21.440
So that was a lot of fun.

00:04:21.440 --> 00:04:23.300
MARU AHUES: Good.

00:04:23.300 --> 00:04:26.330
OK, so, what we were trying
to do here is let you

00:04:26.330 --> 00:04:29.210
guys get to know us a
little bit before we start.

00:04:29.210 --> 00:04:31.310
And now we're going to go
through some questions.

00:04:31.310 --> 00:04:33.980
I'm going to ask serious
questions now about the work

00:04:33.980 --> 00:04:36.922
that this panel did
on Instant Apps.

00:04:36.922 --> 00:04:38.630
Most of it is going
to be very technical.

00:04:38.630 --> 00:04:41.100
Some of it's going to be
product questions as well.

00:04:41.100 --> 00:04:43.350
And after that, we're going
to open the floor for Q&amp;A.

00:04:43.350 --> 00:04:45.016
So we're going to
have two mics that you

00:04:45.016 --> 00:04:46.282
can come up and ask questions.

00:04:46.282 --> 00:04:47.990
And that will be for
the last 15 minutes.

00:04:47.990 --> 00:04:51.110
So don't run off
when we're done, OK?

00:04:51.110 --> 00:04:53.270
So we're going to start
with the questions.

00:04:53.270 --> 00:04:54.970
First is the why.

00:04:54.970 --> 00:04:57.230
So that's the first
question we get, right?

00:04:57.230 --> 00:04:58.220
Why would you do this.

00:04:58.220 --> 00:05:02.312
So why would you invest
your resources and time

00:05:02.312 --> 00:05:03.020
in building this.

00:05:03.020 --> 00:05:05.220
So Alan, what made
you decide to build

00:05:05.220 --> 00:05:07.550
an Instant App for CastBox?

00:05:07.550 --> 00:05:11.210
ALAN TANG: So we took a
risk to try Instant App out.

00:05:11.210 --> 00:05:14.840
Because we believe
Instant App is

00:05:14.840 --> 00:05:16.790
useful for people
who don't currently

00:05:16.790 --> 00:05:21.530
use CastBox to have a first
impression with our platform.

00:05:21.530 --> 00:05:28.070
For example, if you listen to
an episode on this American Life

00:05:28.070 --> 00:05:32.990
or Planet Money using
CastBox and it blew your mind

00:05:32.990 --> 00:05:35.680
and you can't wait
to share it with,

00:05:35.680 --> 00:05:38.030
say your friend,
Maru, who happens

00:05:38.030 --> 00:05:40.280
not to have the app installed.

00:05:40.280 --> 00:05:43.820
So you kick the share
button, send over the link.

00:05:43.820 --> 00:05:47.600
With Instant App, Maru
can click the link.

00:05:47.600 --> 00:05:51.140
And CastBox will load right away
and start playing the episode

00:05:51.140 --> 00:05:54.740
that you think Carol would like.

00:05:54.740 --> 00:05:56.900
We get a little bit--

00:05:56.900 --> 00:05:59.300
we get some traffic
from search engine

00:05:59.300 --> 00:06:01.220
as well if you
search for episodes

00:06:01.220 --> 00:06:04.820
that you want to listen and
click the link from the search

00:06:04.820 --> 00:06:06.020
results page.

00:06:06.020 --> 00:06:09.230
That triggers the Instant
App experience as well.

00:06:09.230 --> 00:06:13.940
We actually have a website
with the full functionality

00:06:13.940 --> 00:06:20.150
and with over half a
million podcast channels.

00:06:20.150 --> 00:06:24.860
We use the website
for internal testing.

00:06:24.860 --> 00:06:26.570
Operations team to
validate traffic

00:06:26.570 --> 00:06:28.220
or take down some bad traffic.

00:06:28.220 --> 00:06:30.860
It's already mobile optimized.

00:06:30.860 --> 00:06:37.452
So initially we used WebView
wrapper to try Instant App out.

00:06:37.452 --> 00:06:41.210
MARU AHUES: So that
brings a good topic

00:06:41.210 --> 00:06:44.750
should you take a website and
put a web wrapper around it

00:06:44.750 --> 00:06:46.740
and build an instant app.

00:06:46.740 --> 00:06:49.460
When we were working
with CastBox,

00:06:49.460 --> 00:06:52.190
we gave him a recommendation
to move away from that

00:06:52.190 --> 00:06:54.350
and go with full
native experience.

00:06:54.350 --> 00:06:59.040
And I think we gave him this
feedback on a Friday afternoon.

00:06:59.040 --> 00:07:01.700
And then they said, sure,
we'll have it ready by Monday.

00:07:01.700 --> 00:07:03.610
And I was, like, no.

00:07:03.610 --> 00:07:06.860
But tell us a little bit about
what you guys did for them.

00:07:06.860 --> 00:07:12.290
ALAN TANG: Right, so if we
take a step back, first of all,

00:07:12.290 --> 00:07:14.190
we could see the difference.

00:07:14.190 --> 00:07:16.610
So obviously WebView is slower.

00:07:16.610 --> 00:07:20.480
The scrolling is less smooth.

00:07:20.480 --> 00:07:23.430
We care about our
user experience.

00:07:23.430 --> 00:07:26.930
So we actually
don't want our users

00:07:26.930 --> 00:07:30.599
to spend too much time on
our user interface, per se.

00:07:30.599 --> 00:07:32.390
We actually want them
to come in and listen

00:07:32.390 --> 00:07:34.220
to the episode they like.

00:07:34.220 --> 00:07:36.760
So internally we
tracked two metrics.

00:07:36.760 --> 00:07:39.320
One is total
listening time, which

00:07:39.320 --> 00:07:44.300
is about one to two hours
per user per day typically.

00:07:44.300 --> 00:07:47.360
Two, the time users
spend on using

00:07:47.360 --> 00:07:49.640
the user interface
itself, which we

00:07:49.640 --> 00:07:53.240
try to minimize to some extent.

00:07:53.240 --> 00:07:55.100
So that's the main
reason we wanted

00:07:55.100 --> 00:07:59.850
to move from WebView experience
to the full native experience.

00:07:59.850 --> 00:08:03.340
So over the holiday weekend,
the engineering team

00:08:03.340 --> 00:08:08.000
did refactoring and
put in the native code,

00:08:08.000 --> 00:08:11.540
did testing, and got a
lot of useful feedback

00:08:11.540 --> 00:08:15.500
from added from the reparations
team, which is always

00:08:15.500 --> 00:08:17.180
responsive and helpful.

00:08:17.180 --> 00:08:22.280
We added a few
features such as, we

00:08:22.280 --> 00:08:26.340
added a dialog to
pop up the install,

00:08:26.340 --> 00:08:28.130
to install the regular app.

00:08:28.130 --> 00:08:30.760
For instance, if you
listen to an episode

00:08:30.760 --> 00:08:35.539
and you want to
subscribe, the Dialogue

00:08:35.539 --> 00:08:39.620
up will pop up and say that you
can subscribe to the channel

00:08:39.620 --> 00:08:41.780
by downloading the regular app.

00:08:41.780 --> 00:08:46.010
Because we haven't viewed the
full user profile system yet.

00:08:46.010 --> 00:08:50.000
We haven't viewed the
full features yet.

00:08:50.000 --> 00:08:53.270
The team initially thought
it would be too much work.

00:08:53.270 --> 00:08:55.610
But it turns out to be easy.

00:08:55.610 --> 00:08:58.420
Because the app was
already modularized.

00:08:58.420 --> 00:09:00.650
That sped up the
development process.

00:09:00.650 --> 00:09:05.510
We used Dagachu framework
as dependency injection

00:09:05.510 --> 00:09:06.710
to build the UI.

00:09:06.710 --> 00:09:09.550
We used the ExoPlayer
to handle the playback.

00:09:09.550 --> 00:09:13.160
These two libraries together
with many other libraries

00:09:13.160 --> 00:09:17.150
are well supported by
the Instant App SDK.

00:09:17.150 --> 00:09:19.420
So that made the
development process

00:09:19.420 --> 00:09:21.650
fast as straightforward.

00:09:21.650 --> 00:09:26.010
As we move on to
iterate the Instant App,

00:09:26.010 --> 00:09:29.630
We've had to add other features
as well, such as in-app Billing

00:09:29.630 --> 00:09:32.750
for users who want to
share premium content

00:09:32.750 --> 00:09:38.000
say to someone who doesn't
have the regular app installed.

00:09:38.000 --> 00:09:42.737
So that person can use an app
and in-app Billing to purchase

00:09:42.737 --> 00:09:43.820
that content, for example.

00:09:43.820 --> 00:09:49.730
So last, but not least, the
journey from WebView to full

00:09:49.730 --> 00:09:54.275
native user app cannot be
completed by our hard working

00:09:54.275 --> 00:09:55.400
engineering team.

00:09:55.400 --> 00:09:58.770
Some of them are
in the audience.

00:09:58.770 --> 00:09:59.570
Go team.

00:09:59.570 --> 00:10:04.550
And the fantastic support
by the Devereaux team and BD

00:10:04.550 --> 00:10:05.390
team of Google.

00:10:05.390 --> 00:10:07.006
So I want to say
a big thank you.

00:10:07.006 --> 00:10:07.922
MARU AHUES: Thank you.

00:10:07.922 --> 00:10:10.300
ALAN TANG: And we're really
excited about Instant App

00:10:10.300 --> 00:10:12.440
and as we add more
features in the future

00:10:12.440 --> 00:10:14.997
to make the experience
even better for all users

00:10:14.997 --> 00:10:15.830
MARU AHUES: Awesome.

00:10:15.830 --> 00:10:18.320
Thank you.

00:10:18.320 --> 00:10:20.730
Yeah, Alan.

00:10:20.730 --> 00:10:24.300
Now, the next question
we get is how long.

00:10:24.300 --> 00:10:26.250
How long does this take?

00:10:26.250 --> 00:10:28.530
Is this really difficult
or is that easy?

00:10:28.530 --> 00:10:30.420
He said it was easy.

00:10:30.420 --> 00:10:31.685
Do you believe him?

00:10:31.685 --> 00:10:33.390
So now, Lien.

00:10:33.390 --> 00:10:35.520
This is your question.

00:10:35.520 --> 00:10:39.090
This process takes-- from the
patterns that we worked with,

00:10:39.090 --> 00:10:41.730
we saw that it could take
as little as three days

00:10:41.730 --> 00:10:42.660
to six weeks.

00:10:42.660 --> 00:10:45.330
So we're saying on
average, we think

00:10:45.330 --> 00:10:46.980
it can take from
four to six weeks.

00:10:46.980 --> 00:10:48.540
It really depends
on how modularized

00:10:48.540 --> 00:10:50.940
your app is, so where you are.

00:10:50.940 --> 00:10:54.790
So, how long did it take you
to build the Periscope Instant

00:10:54.790 --> 00:10:55.390
app?

00:10:55.390 --> 00:10:58.602
And what where were the easiest
or hardest things you did?

00:10:58.602 --> 00:11:00.060
LIEN MAMITSUKA:
For a Periscope I'd

00:11:00.060 --> 00:11:03.000
say it took us about
three weeks total

00:11:03.000 --> 00:11:05.000
over a course of
several months to build

00:11:05.000 --> 00:11:07.650
a production-ready Instant App.

00:11:07.650 --> 00:11:10.140
Periscope was in the
first wave of partners.

00:11:10.140 --> 00:11:13.370
And we started development
back in September.

00:11:13.370 --> 00:11:15.960
Being in the first
wave of Instant Apps

00:11:15.960 --> 00:11:19.170
meant we were getting very
early versions of the SDK.

00:11:19.170 --> 00:11:21.450
And we get these
drops every week.

00:11:21.450 --> 00:11:24.270
Whenever we got it, we
would test it, build it,

00:11:24.270 --> 00:11:27.030
see what issues there
were, and verify bug fixes.

00:11:27.030 --> 00:11:29.940
So it was a really iterative
process between Google

00:11:29.940 --> 00:11:32.340
and us, a lot of
rinse and repeats.

00:11:32.340 --> 00:11:36.540
But by the end of October, we
had a fully functional Instant

00:11:36.540 --> 00:11:38.790
App to the point
that it was even

00:11:38.790 --> 00:11:42.720
demoed at the Google Playtime
event in SF in November.

00:11:42.720 --> 00:11:45.210
And that was really
exciting for us to see.

00:11:45.210 --> 00:11:47.670
Because it was just
validation of all the work

00:11:47.670 --> 00:11:50.430
that we were putting into the
Instant App and the progress

00:11:50.430 --> 00:11:52.410
we were making.

00:11:52.410 --> 00:11:55.170
In terms of easiest,
I'd say, there

00:11:55.170 --> 00:11:58.170
were two reasons why I felt
like the Periscope Instant App

00:11:58.170 --> 00:12:01.210
development was relatively
straightforward.

00:12:01.210 --> 00:12:04.140
The first was, the Periscope
Instant App, sorry,

00:12:04.140 --> 00:12:07.860
the Periscope app at that
time was already modularized.

00:12:07.860 --> 00:12:11.790
So in March of last year,
we had spent a lot of time

00:12:11.790 --> 00:12:15.090
pooling out poor playback
functionality from the app

00:12:15.090 --> 00:12:16.500
into a library.

00:12:16.500 --> 00:12:18.330
And what we were doing
with this library

00:12:18.330 --> 00:12:21.720
was bringing this library into
the Twitter for Android app.

00:12:21.720 --> 00:12:24.420
Because we wanted to
have a native viewing

00:12:24.420 --> 00:12:27.000
experience within the
Twitter for Android app.

00:12:27.000 --> 00:12:30.540
So what that meant was
we had a head start here.

00:12:30.540 --> 00:12:32.760
When we started the
Instant Apps project,

00:12:32.760 --> 00:12:35.160
we didn't have to focus
on modularzing our app.

00:12:35.160 --> 00:12:37.320
We could hit the ground
running and really

00:12:37.320 --> 00:12:41.610
focus on just integrating
with it and Instant Apps SDK.

00:12:41.610 --> 00:12:45.480
The second reason I felt like
the whole process was enjoyable

00:12:45.480 --> 00:12:49.200
for us was we just had a
great working relationship

00:12:49.200 --> 00:12:49.890
with Google.

00:12:49.890 --> 00:12:51.330
And this was super important.

00:12:51.330 --> 00:12:53.610
Because we were in that
first wave of Instant

00:12:53.610 --> 00:12:54.780
Apps development.

00:12:54.780 --> 00:12:56.790
There was very
little documentation.

00:12:56.790 --> 00:12:59.610
We were learning as we
are going, both sides.

00:12:59.610 --> 00:13:02.340
And our developer
advocate, Arun,

00:13:02.340 --> 00:13:05.010
really did a great
job partnering with us

00:13:05.010 --> 00:13:07.840
to make sure we were
set up for success.

00:13:07.840 --> 00:13:11.880
So we were getting quick
turnaround times on bug issues,

00:13:11.880 --> 00:13:15.180
status updates on issues
and how they were tracking.

00:13:15.180 --> 00:13:17.820
Google also vetted all
that third party libraries

00:13:17.820 --> 00:13:18.660
that we were using.

00:13:18.660 --> 00:13:21.990
So we didn't have to worry
about compatibility issues.

00:13:21.990 --> 00:13:23.940
They also gave us
tips on what we

00:13:23.940 --> 00:13:26.070
can do to reduce or APK size.

00:13:26.070 --> 00:13:28.920
And they shared a lot of those
tips at another I/O session

00:13:28.920 --> 00:13:29.940
today.

00:13:29.940 --> 00:13:32.460
And we got a lot
of testing support.

00:13:32.460 --> 00:13:35.100
Again, being in
the first wave, we

00:13:35.100 --> 00:13:38.020
had access, or limited
access, to devices.

00:13:38.020 --> 00:13:40.560
So we couldn't do a lot
of testing in-house.

00:13:40.560 --> 00:13:42.150
And we were also under NDA.

00:13:42.150 --> 00:13:45.210
So not a lot of people
knew what we were doing.

00:13:45.210 --> 00:13:48.330
So those, I would say,
made it easy for us.

00:13:48.330 --> 00:13:50.400
In terms of what
was hardest, I'd

00:13:50.400 --> 00:13:54.120
say the hardest thing for
Periscope was just being aware

00:13:54.120 --> 00:13:57.420
of the subtle differences
between a regular app

00:13:57.420 --> 00:13:58.770
and an Instant App.

00:13:58.770 --> 00:14:02.260
So Instant Apps run in
this sandboxed environment.

00:14:02.260 --> 00:14:03.990
And what that means
is there is not

00:14:03.990 --> 00:14:07.050
a one-to-one mapping
of the API behavior

00:14:07.050 --> 00:14:10.110
between the regular app
and the Instant App.

00:14:10.110 --> 00:14:12.570
And we saw this
right away when we

00:14:12.570 --> 00:14:15.780
were looking at how Periscope
Parts were being rendered.

00:14:15.780 --> 00:14:18.510
Periscope Parts are
like a core experience

00:14:18.510 --> 00:14:21.690
in the Periscope community.

00:14:21.690 --> 00:14:25.590
They're what viewers use to show
their support and appreciation

00:14:25.590 --> 00:14:27.670
for what the
broadcaster is showing.

00:14:27.670 --> 00:14:29.850
So getting this
experience right,

00:14:29.850 --> 00:14:32.430
the Periscope Parts was
really critical for us.

00:14:32.430 --> 00:14:35.700
It needed to be exactly the
same between the Instant

00:14:35.700 --> 00:14:37.710
App and the regular app.

00:14:37.710 --> 00:14:41.920
And the fix for this
was actually easy.

00:14:41.920 --> 00:14:44.820
What we were doing was, we
were calling CreateBitmap.

00:14:44.820 --> 00:14:47.460
And we were using this
three parameter version

00:14:47.460 --> 00:14:48.750
to create this bitmap.

00:14:48.750 --> 00:14:52.140
It took in the width, the
height, and the bitmap

00:14:52.140 --> 00:14:53.250
configuration.

00:14:53.250 --> 00:14:55.380
But in the Instant
App world, you

00:14:55.380 --> 00:14:58.110
need to give it a little
bit more information.

00:14:58.110 --> 00:15:01.050
So the fix here was we had
to switch to using a four

00:15:01.050 --> 00:15:02.310
parameter version.

00:15:02.310 --> 00:15:04.260
And that fourth
parameter was one that

00:15:04.260 --> 00:15:06.270
took in the display metrics.

00:15:06.270 --> 00:15:09.450
And that gave us the density
in compatibility mode in order

00:15:09.450 --> 00:15:11.580
to render those
bitmaps correctly

00:15:11.580 --> 00:15:13.320
in the Instant App world.

00:15:13.320 --> 00:15:17.880
So the key takeaway here is just
to really take a lot of time

00:15:17.880 --> 00:15:19.140
to test your app thoroughly.

00:15:19.140 --> 00:15:22.020
Because there may be
a subtle difference

00:15:22.020 --> 00:15:25.140
in how the API behaves
in Instant Apps.

00:15:25.140 --> 00:15:28.650
Because they are running in
this sandbox environment.

00:15:28.650 --> 00:15:32.430
They have restrictions and
platform limitations in order

00:15:32.430 --> 00:15:34.820
to make it secure for
these Instant Apps

00:15:34.820 --> 00:15:36.960
to run on the device.

00:15:36.960 --> 00:15:39.960
And Google has come a
long way since we started.

00:15:39.960 --> 00:15:42.030
Again, we were first wave.

00:15:42.030 --> 00:15:44.197
And the tooling and the
support is really there.

00:15:44.197 --> 00:15:45.780
There's a lot of
lent support in there

00:15:45.780 --> 00:15:47.883
that will help
developers with this.

00:15:47.883 --> 00:15:49.815
MARU AHUES: Yep.

00:15:49.815 --> 00:15:52.230
Thank you.

00:15:52.230 --> 00:15:59.377
So, we move now to Kyle.

00:15:59.377 --> 00:16:00.960
We're going to talk
about refactoring.

00:16:00.960 --> 00:16:04.360
Refactoring is, or can
be, the scariest thing

00:16:04.360 --> 00:16:05.500
when you read the dox.

00:16:05.500 --> 00:16:08.660
And you think, am I going
to be able to do that.

00:16:08.660 --> 00:16:11.350
So we wanted to talk about
what it means to refactor.

00:16:11.350 --> 00:16:13.690
What are recommendations
that Kyle

00:16:13.690 --> 00:16:16.390
can give the audience
in terms of how

00:16:16.390 --> 00:16:17.620
to make this process easier.

00:16:17.620 --> 00:16:20.860
So Kyle, would you
give the audience

00:16:20.860 --> 00:16:24.190
some recommendations on how to
refactor the app, but also how

00:16:24.190 --> 00:16:25.730
to reduce the APK size?

00:16:25.730 --> 00:16:29.090
KYLE VENN: Yeah absolutely
so the Vimeo app itself,

00:16:29.090 --> 00:16:31.499
the full app, actually
started at 16 megabytes.

00:16:31.499 --> 00:16:33.040
And to get it down
to an Instant App,

00:16:33.040 --> 00:16:35.750
you need to have each
feature be 4 megabytes.

00:16:35.750 --> 00:16:38.550
So for us, we were going
to build a player Instant

00:16:38.550 --> 00:16:42.990
App that we needed to chop
down a lot of megabytes on.

00:16:42.990 --> 00:16:45.490
So with that, we found a lot
of different tools we could use

00:16:45.490 --> 00:16:47.989
and different things we could
do to accommodate that and get

00:16:47.989 --> 00:16:50.050
there as fast as possible.

00:16:50.050 --> 00:16:52.630
One of the-- we kind of started
with the low-hanging fruit

00:16:52.630 --> 00:16:53.680
of the easy things.

00:16:53.680 --> 00:16:56.650
So of that, you
have a tool that's

00:16:56.650 --> 00:16:59.470
built actually right into
Android Studio, which is

00:16:59.470 --> 00:17:01.540
for removing unused resources.

00:17:01.540 --> 00:17:04.260
So you actually go into
Refactor on Android Studio,

00:17:04.260 --> 00:17:05.260
remove unused resources.

00:17:05.260 --> 00:17:08.500
And that will kill things
like layout files that aren't

00:17:08.500 --> 00:17:09.640
being referenced anymore.

00:17:09.640 --> 00:17:12.130
And then because of that, it
will remove any PNG's that

00:17:12.130 --> 00:17:13.444
aren't being used anymore.

00:17:13.444 --> 00:17:15.069
So that's a really
good place to start.

00:17:15.069 --> 00:17:17.950
That's kind of where we began.

00:17:17.950 --> 00:17:20.170
The next piece is actually
little bit meatier

00:17:20.170 --> 00:17:21.369
and more technical.

00:17:21.369 --> 00:17:23.740
And I guess that
advice is basically

00:17:23.740 --> 00:17:28.450
trying to look and draw out a
dependency tree for whatever

00:17:28.450 --> 00:17:30.910
feature you're trying to
turn into an Instant App.

00:17:30.910 --> 00:17:34.090
So what would that end up
looking like is basically

00:17:34.090 --> 00:17:36.610
taking the activity
or fragment, and then

00:17:36.610 --> 00:17:38.710
look at all the imports
at the top of the file,

00:17:38.710 --> 00:17:41.980
and then see what
those point to and what

00:17:41.980 --> 00:17:43.150
their dependencies are.

00:17:43.150 --> 00:17:45.240
And it actually helps
us to draw this out.

00:17:45.240 --> 00:17:48.760
Just so you can see exactly
what classes this feature

00:17:48.760 --> 00:17:50.950
will depend on.

00:17:50.950 --> 00:17:53.230
So, in our case, we
actually started by--

00:17:53.230 --> 00:17:56.810
we thought all along that we
had been modularizing our code,

00:17:56.810 --> 00:17:59.140
making it super easy
to just pull out.

00:17:59.140 --> 00:18:02.530
All of our player activity was
inside of our player package.

00:18:02.530 --> 00:18:05.680
So we started out by just
trying to cut that and paste it

00:18:05.680 --> 00:18:07.869
into a module.

00:18:07.869 --> 00:18:09.910
So in doing so, we were,
like, oh, hopefully this

00:18:09.910 --> 00:18:10.618
is going to work.

00:18:10.618 --> 00:18:12.790
But sure enough, it ended
up having a whole bunch

00:18:12.790 --> 00:18:15.550
of those red squiggly lines on
all of our import statements,

00:18:15.550 --> 00:18:17.450
which was, of course, daunting.

00:18:17.450 --> 00:18:19.700
But from there, we kind of
started figuring out, well,

00:18:19.700 --> 00:18:20.920
what are the things
that we can cut down on.

00:18:20.920 --> 00:18:22.750
What are the dependencies
we can remove

00:18:22.750 --> 00:18:24.979
from our player activity.

00:18:24.979 --> 00:18:26.770
So what that ended up
looking like, I guess

00:18:26.770 --> 00:18:28.630
a concrete example
we ran into, was

00:18:28.630 --> 00:18:31.205
we use Fresco for
our image caching,

00:18:31.205 --> 00:18:32.830
which if you're
unfamiliar, is actually

00:18:32.830 --> 00:18:34.060
a pretty large library.

00:18:34.060 --> 00:18:34.600
It's great.

00:18:34.600 --> 00:18:36.130
Because it's super performing.

00:18:36.130 --> 00:18:38.080
But it's around 2
megabytes, which

00:18:38.080 --> 00:18:41.620
in the world of Instant
Apps is absolutely massive.

00:18:41.620 --> 00:18:44.500
I mean, it's half of your
requirement for a feature.

00:18:44.500 --> 00:18:48.400
So we basically had to find a
way to pull out Fresco and then

00:18:48.400 --> 00:18:50.560
swap in some other form
of the image caching.

00:18:50.560 --> 00:18:52.420
So what that ended
up looking like was

00:18:52.420 --> 00:18:54.370
we created this interface
which handles all

00:18:54.370 --> 00:18:57.760
of our image caching for us,
which you then can basically

00:18:57.760 --> 00:19:00.230
stub in and inject which
different implementation you'd

00:19:00.230 --> 00:19:01.310
like to use.

00:19:01.310 --> 00:19:04.120
So the way that we used-- so
basically for our full app,

00:19:04.120 --> 00:19:05.350
we use Fresco.

00:19:05.350 --> 00:19:06.760
Because we like the performance.

00:19:06.760 --> 00:19:08.530
But then for the
Instant App we use

00:19:08.530 --> 00:19:11.485
Picasa, which is only a
couple hundred kilobytes,

00:19:11.485 --> 00:19:13.360
which, of course, we
still get image caching.

00:19:13.360 --> 00:19:14.410
It might not be as fast.

00:19:14.410 --> 00:19:16.360
But it still works.

00:19:16.360 --> 00:19:18.579
So that was a big piece for us.

00:19:18.579 --> 00:19:20.620
The last thing is something
we actually, I think,

00:19:20.620 --> 00:19:22.570
kind of did
relatively well, which

00:19:22.570 --> 00:19:25.120
was relying pretty
heavily on composition.

00:19:25.120 --> 00:19:27.310
So for the player
activity, we, of course,

00:19:27.310 --> 00:19:29.590
had this player component
that we rely very heavily

00:19:29.590 --> 00:19:31.060
on for all of our playback.

00:19:31.060 --> 00:19:34.435
Now our player has to be able to
accommodate 360 video playback.

00:19:34.435 --> 00:19:37.300
It has to be able to
do chrome casting.

00:19:37.300 --> 00:19:40.780
We have offline playback
of encrypted files for it.

00:19:40.780 --> 00:19:43.552
So you can download
to watch later.

00:19:43.552 --> 00:19:45.010
And because of
that, we knew we had

00:19:45.010 --> 00:19:46.060
to build our player
in such a way

00:19:46.060 --> 00:19:47.890
that we could easily
add in these pieces,

00:19:47.890 --> 00:19:49.160
or inject them in.

00:19:49.160 --> 00:19:52.390
So because we have the
same code base really

00:19:52.390 --> 00:19:56.380
for both our mobile apps
and our TV Android app,

00:19:56.380 --> 00:19:58.180
we started this process.

00:19:58.180 --> 00:19:59.930
Because we didn't
need things like that.

00:19:59.930 --> 00:20:02.350
It ended up benefiting
us in the long run using

00:20:02.350 --> 00:20:04.095
dependency injection
at that level.

00:20:04.095 --> 00:20:05.470
Because then for
our Instant App,

00:20:05.470 --> 00:20:08.640
we actually don't
need to have 360.

00:20:08.640 --> 00:20:09.682
We don't need Chromecast.

00:20:09.682 --> 00:20:10.973
We don't need offline playback.

00:20:10.973 --> 00:20:13.210
Because it's not currently
supported by Instant Apps.

00:20:13.210 --> 00:20:15.626
So it was actually really easy
just to remove these larger

00:20:15.626 --> 00:20:16.180
dependencies.

00:20:16.180 --> 00:20:19.210
So with 360, you get things
like the Cardboard SDK,

00:20:19.210 --> 00:20:20.170
which is pretty large.

00:20:20.170 --> 00:20:21.970
Or with Chromecast you
have Play services,

00:20:21.970 --> 00:20:23.710
which is also pretty large.

00:20:23.710 --> 00:20:26.551
Offline playback had a whole
bunch of encryptor files.

00:20:26.551 --> 00:20:29.050
So we basically were able to
remove those right off the bat.

00:20:29.050 --> 00:20:31.300
And that saved us
a ton of space.

00:20:31.300 --> 00:20:34.390
So I guess basically just
to sum up all that stuff,

00:20:34.390 --> 00:20:37.270
it's really a matter of just
looking at your dependencies,

00:20:37.270 --> 00:20:39.835
seeing exactly what
depends on what.

00:20:39.835 --> 00:20:41.710
What are the things are
absolutely necessary.

00:20:41.710 --> 00:20:43.360
And if there is something
that's relatively large,

00:20:43.360 --> 00:20:45.100
think about wrapping
it in an interface.

00:20:45.100 --> 00:20:46.840
Try to compose your
different pieces.

00:20:46.840 --> 00:20:49.120
With that interface, you
can either potentially

00:20:49.120 --> 00:20:51.580
omit it entirely or swap
it for something smaller

00:20:51.580 --> 00:20:54.040
like we did with Fresco.

00:20:54.040 --> 00:20:55.731
And then also for
people that are

00:20:55.731 --> 00:20:57.730
going to be building new
features going forward,

00:20:57.730 --> 00:21:00.430
something that we've started
doing and has helped us a ton,

00:21:00.430 --> 00:21:04.150
is actually just when you build
a new feature into your app,

00:21:04.150 --> 00:21:05.220
build it as a module.

00:21:05.220 --> 00:21:07.690
Build it as it's own totally
so it's got a library module

00:21:07.690 --> 00:21:09.640
that your main app depends on.

00:21:09.640 --> 00:21:11.889
And then keep an eye on
that build.gradle file.

00:21:11.889 --> 00:21:13.930
Because that will tell
you exactly all the things

00:21:13.930 --> 00:21:15.560
that are consuming
all the space.

00:21:15.560 --> 00:21:17.630
And those are things that
can get you in the end.

00:21:17.630 --> 00:21:18.820
And, of course, if
anyone has any questions

00:21:18.820 --> 00:21:20.320
about our particular
implementation,

00:21:20.320 --> 00:21:22.854
you can feel free
to ask me after.

00:21:22.854 --> 00:21:23.770
MARU AHUES: Thank you.

00:21:23.770 --> 00:21:24.591
KYLE VENN: Of course.

00:21:24.591 --> 00:21:25.924
MARU AHUES: Where's [INAUDIBLE]?

00:21:25.924 --> 00:21:27.537
[APPLAUSE]

00:21:30.000 --> 00:21:34.880
So I think that that's a good
segue into the next question.

00:21:34.880 --> 00:21:38.450
Doing some of this work that
you do for your Instant App

00:21:38.450 --> 00:21:41.270
may result in benefits
for your installed app,

00:21:41.270 --> 00:21:43.130
or your installable app.

00:21:43.130 --> 00:21:46.910
So that's like a free
win that you're getting

00:21:46.910 --> 00:21:48.450
when you're doing this work.

00:21:48.450 --> 00:21:53.420
So Ana, was there any
benefit or did the work

00:21:53.420 --> 00:21:56.300
that you did on your Instant
App have any benefits

00:21:56.300 --> 00:21:58.430
on your installable app?

00:21:58.430 --> 00:22:00.050
ANA CAPATINA: Yes, yes it had.

00:22:00.050 --> 00:22:03.020
So when we started to
work on our Instant App,

00:22:03.020 --> 00:22:04.760
we knew that we
were going to change

00:22:04.760 --> 00:22:06.520
the structure of our project.

00:22:06.520 --> 00:22:08.240
This is because
with Instant Apps,

00:22:08.240 --> 00:22:11.930
you give users the opportunity
to access a feature

00:22:11.930 --> 00:22:12.910
from your application.

00:22:12.910 --> 00:22:16.080
And this means it has to
be in a separated module.

00:22:16.080 --> 00:22:18.710
So this was one of the biggest
challenges that we faced.

00:22:18.710 --> 00:22:21.560
Because we didn't have modules.

00:22:21.560 --> 00:22:23.990
And we brainstormed
a lot in order

00:22:23.990 --> 00:22:27.290
to find the way to split our
project in meaningful units

00:22:27.290 --> 00:22:30.121
that could be used in both the
installed app and the Instant

00:22:30.121 --> 00:22:30.620
App.

00:22:30.620 --> 00:22:33.230
Because we took
this approach as we

00:22:33.230 --> 00:22:35.690
didn't want to have the
feeling in the future

00:22:35.690 --> 00:22:39.320
that we are going to maintain
two different applications.

00:22:39.320 --> 00:22:42.360
So because it was
such a big change,

00:22:42.360 --> 00:22:44.330
we decided to do it gradually.

00:22:44.330 --> 00:22:46.280
And as we release
often, we didn't

00:22:46.280 --> 00:22:50.850
want to have any impact
on our customers.

00:22:50.850 --> 00:22:55.070
So now having more modules,
it increased our build time.

00:22:55.070 --> 00:22:59.540
But in the end, we learned
so much during this process,

00:22:59.540 --> 00:23:01.700
we have a better
project structure.

00:23:01.700 --> 00:23:05.850
And I think with the new tools
that were announced today,

00:23:05.850 --> 00:23:08.810
we are going to see
some improvements.

00:23:08.810 --> 00:23:12.980
Some of the improvements that
we did in our application

00:23:12.980 --> 00:23:19.730
were to reduce the size of the
APK and the number of methods.

00:23:19.730 --> 00:23:23.409
And how we did it,
we started by looking

00:23:23.409 --> 00:23:24.950
at our [INAUDIBLE]
files just to make

00:23:24.950 --> 00:23:27.050
sure we hadn't missed anything.

00:23:27.050 --> 00:23:31.250
And then we looked at the
libraries that we used.

00:23:31.250 --> 00:23:33.680
And we decided to
remove some of them.

00:23:33.680 --> 00:23:36.620
For others we looked
for a lighter version.

00:23:36.620 --> 00:23:38.600
And we replaced them.

00:23:38.600 --> 00:23:42.540
And then we actually noticed
something interesting.

00:23:42.540 --> 00:23:46.880
So while we are investigating
why our resources are so big,

00:23:46.880 --> 00:23:49.640
we found out that
some libraries had

00:23:49.640 --> 00:23:53.150
lots of things that were
localized in so many languages

00:23:53.150 --> 00:23:55.520
that we didn't use
in our application.

00:23:55.520 --> 00:23:57.560
So we changed the
Gradle script so

00:23:57.560 --> 00:23:59.900
that we can include
only the seven

00:23:59.900 --> 00:24:01.290
languages that we support.

00:24:01.290 --> 00:24:05.330
And this also decreased
the size of our APK.

00:24:05.330 --> 00:24:09.740
So after all these changes,
we noticed a decrease

00:24:09.740 --> 00:24:13.610
in our APK size by about 20%.

00:24:13.610 --> 00:24:17.720
And other changes that we did
were not necessarily related

00:24:17.720 --> 00:24:19.160
to refactoring.

00:24:19.160 --> 00:24:21.740
But they were
related to the fact

00:24:21.740 --> 00:24:24.000
that we were building
an Instant App.

00:24:24.000 --> 00:24:28.920
So one example was, I think,
Smart Lock for Passwords.

00:24:28.920 --> 00:24:33.290
This was that a recommended
to have in the Instant App.

00:24:33.290 --> 00:24:35.660
And it was very
easy to integrate.

00:24:35.660 --> 00:24:38.780
And we felt that it was
a very good feature.

00:24:38.780 --> 00:24:42.340
And that we decided to have
it in our installed app

00:24:42.340 --> 00:24:44.870
well as it simplified
the sign in experience

00:24:44.870 --> 00:24:47.060
for our customers.

00:24:47.060 --> 00:24:50.290
And in the end, we have a
great team at Deliveroo.

00:24:50.290 --> 00:24:53.240
They are here in the audience.

00:24:53.240 --> 00:24:56.110
We are constantly
improving our application.

00:24:56.110 --> 00:25:00.290
And during this program,
we learned so many things.

00:25:00.290 --> 00:25:04.240
We have now a better
project structure.

00:25:04.240 --> 00:25:06.350
We removed some
of the libraries.

00:25:06.350 --> 00:25:10.980
We kept only the ones that
were truly helpful for us.

00:25:10.980 --> 00:25:15.560
And I would say that the fact
that we decreased the APK size

00:25:15.560 --> 00:25:16.475
gave us a big bonus.

00:25:16.475 --> 00:25:17.570
MARU AHUES: Mm-hm.

00:25:17.570 --> 00:25:18.870
That's good, 20%.

00:25:18.870 --> 00:25:19.620
ANA CAPATINA: Yes.

00:25:19.620 --> 00:25:20.420
MARU AHUES: That's awesome.

00:25:20.420 --> 00:25:22.628
And this is on the installed
app, not the Instant App

00:25:22.628 --> 00:25:23.610
so that's good.

00:25:23.610 --> 00:25:26.150
Also, yeah, we hear
it all the time

00:25:26.150 --> 00:25:28.760
how much tech that
you have on your apps.

00:25:28.760 --> 00:25:30.620
And you never have the time.

00:25:30.620 --> 00:25:33.050
And you know, it's not a
priority for the product team

00:25:33.050 --> 00:25:35.630
to give you time
to work on this.

00:25:35.630 --> 00:25:39.050
But now if you work on Instant
Apps and you have the time

00:25:39.050 --> 00:25:42.470
to work on some of that clean
up and things that you always

00:25:42.470 --> 00:25:44.000
wanted to do, or maybe didn't.

00:25:44.000 --> 00:25:46.010
But it's good for your app.

00:25:46.010 --> 00:25:47.900
Thank you.

00:25:47.900 --> 00:25:49.580
Now we're going to go to Lucas.

00:25:49.580 --> 00:25:54.830
And this is our last question
before Q&amp;A. So, Lucas,

00:25:54.830 --> 00:25:58.430
now that you've gone through the
process of building an Instant

00:25:58.430 --> 00:26:01.760
App for Zillow, what
are some recommendations

00:26:01.760 --> 00:26:06.470
or what are the things you wish
you'd known before you started

00:26:06.470 --> 00:26:07.770
this process?

00:26:07.770 --> 00:26:09.590
LUCAS TAKATORI:
Yeah, so, I think

00:26:09.590 --> 00:26:12.830
one of the big recommendations I
would have is to definitely sit

00:26:12.830 --> 00:26:16.580
down and read through all the
requirements for Instant Apps.

00:26:16.580 --> 00:26:19.310
And make sure that everything
you think you have implemented,

00:26:19.310 --> 00:26:21.900
you actually test to make
sure you have implemented.

00:26:21.900 --> 00:26:23.660
So for the longest
time, we thought

00:26:23.660 --> 00:26:27.005
we had app linking implemented
correctly in our regular app.

00:26:27.005 --> 00:26:29.380
The problem was that when we
went to test it to make sure

00:26:29.380 --> 00:26:31.420
that it was working, it didn't.

00:26:31.420 --> 00:26:34.840
So we had to kind of halt
development on our Instant App

00:26:34.840 --> 00:26:38.020
and make sure that we
got app linking actually

00:26:38.020 --> 00:26:40.630
working in our main app.

00:26:40.630 --> 00:26:45.230
And so, you know, just make sure
that you look all that over.

00:26:45.230 --> 00:26:47.740
And, for sure, test
it before you just

00:26:47.740 --> 00:26:50.050
start working on Instant Apps.

00:26:50.050 --> 00:26:55.410
Another thing to keep in mind is
that network calls and Instant

00:26:55.410 --> 00:26:58.300
Apps all have to be
secure network calls.

00:26:58.300 --> 00:27:01.132
So we had to go through and
audit our network library

00:27:01.132 --> 00:27:02.590
to make sure that
everything we had

00:27:02.590 --> 00:27:05.336
was using secure network calls.

00:27:05.336 --> 00:27:07.460
And we also had audit all
the third party libraries

00:27:07.460 --> 00:27:08.656
we were using.

00:27:08.656 --> 00:27:10.030
It turns out one
of our analytics

00:27:10.030 --> 00:27:13.049
libraries was using
unsecured network calls.

00:27:13.049 --> 00:27:14.590
And then they were
just basically not

00:27:14.590 --> 00:27:17.200
working at all on Instant Apps.

00:27:17.200 --> 00:27:20.350
So go through it and make sure
that you can either work around

00:27:20.350 --> 00:27:22.750
those network calls
in your Instant App

00:27:22.750 --> 00:27:26.680
or re-implement those
in a secure way.

00:27:26.680 --> 00:27:28.750
Another big thing
that I would recommend

00:27:28.750 --> 00:27:33.100
is to get very familiar
with BuildTools

00:27:33.100 --> 00:27:39.430
like Kyle recommended,
the APK analyzer.

00:27:39.430 --> 00:27:41.800
I think probably
around 70% of our work

00:27:41.800 --> 00:27:43.810
was to cut our app size down.

00:27:43.810 --> 00:27:47.740
And these tools are
definitely a lifesaver.

00:27:47.740 --> 00:27:49.570
Another tool that we
ended up using a lot

00:27:49.570 --> 00:27:52.770
was actual Gradle
Dependencies, which

00:27:52.770 --> 00:27:55.900
would print out a whole
dependency tree for you.

00:27:55.900 --> 00:27:57.820
And it will not only
show you the libraries

00:27:57.820 --> 00:27:59.630
that you depend on
but the libraries

00:27:59.630 --> 00:28:01.900
that those libraries depend on.

00:28:01.900 --> 00:28:04.930
So you can see all your
transitive dependencies.

00:28:04.930 --> 00:28:08.190
And you can actually,
through Gradle, you

00:28:08.190 --> 00:28:10.360
can exclude some of those
transitive dependencies.

00:28:10.360 --> 00:28:15.160
So we were able to exclude
third party analytics libraries.

00:28:15.160 --> 00:28:17.470
And that was able to help
cut down the size of our app

00:28:17.470 --> 00:28:19.430
quite a bit.

00:28:19.430 --> 00:28:21.280
And then another
thing to look out

00:28:21.280 --> 00:28:24.280
for size wise are your assets.

00:28:24.280 --> 00:28:26.860
Make sure you're not using
really detailed assets when

00:28:26.860 --> 00:28:29.020
you can't really
tell the difference.

00:28:29.020 --> 00:28:31.840
I think we ended up just
totally removing our two most

00:28:31.840 --> 00:28:34.270
detailed folders of assets.

00:28:34.270 --> 00:28:36.280
And that ended up helping
to get us actually

00:28:36.280 --> 00:28:39.310
down below 4 megs so
that we could actually

00:28:39.310 --> 00:28:43.120
get an Instant App up and
running that was working.

00:28:43.120 --> 00:28:46.570
And last thing we found
out was we had a crasher

00:28:46.570 --> 00:28:49.330
on startup of our Instant App.

00:28:49.330 --> 00:28:52.210
And one way that we
were able to debug

00:28:52.210 --> 00:28:58.390
it was since Instant Apps are
just a zipped file with feature

00:28:58.390 --> 00:29:01.180
module APK's, you
can actually side

00:29:01.180 --> 00:29:05.704
load those APK's onto your phone
like you would a regular app.

00:29:05.704 --> 00:29:07.120
And that way when
you start it up,

00:29:07.120 --> 00:29:09.430
it would start up just
like the regular app would.

00:29:09.430 --> 00:29:13.140
And you wouldn't lose
some of these exceptions

00:29:13.140 --> 00:29:15.340
in the stack trace.

00:29:15.340 --> 00:29:17.800
And I think the last
thing I'd like to say

00:29:17.800 --> 00:29:21.910
is that it kind of it
sounds like this might

00:29:21.910 --> 00:29:23.510
be a difficult thing to do.

00:29:23.510 --> 00:29:25.540
But trust me, it's worth it.

00:29:25.540 --> 00:29:28.695
I think it provides a great
experience for our audience.

00:29:28.695 --> 00:29:30.070
That's really what
we're all here

00:29:30.070 --> 00:29:33.257
to do is provide great
experiences for our customers.

00:29:33.257 --> 00:29:34.090
MARU AHUES: Awesome.

00:29:34.090 --> 00:29:35.800
Thank you.

00:29:35.800 --> 00:29:40.250
If you're interested,
please go g.co/InstantApps.

00:29:40.250 --> 00:29:42.440
We're at the Sandbox
office hours.

00:29:42.440 --> 00:29:45.520
And you already probably watched
the last session so thank you.

00:29:45.520 --> 00:29:48.870
[MUSIC PLAYING]

