WEBVTT
Kind: captions
Language: en

00:00:00.120 --> 00:00:00.800
So welcome.

00:00:00.800 --> 00:00:02.940
This is going to be a
tactical webinar.

00:00:02.940 --> 00:00:06.750
Hopefully not too technical, but
hopefully technical enough

00:00:06.750 --> 00:00:07.930
for those who showed up.

00:00:07.930 --> 00:00:09.460
So I'm Dan or Danny Hermes.

00:00:09.460 --> 00:00:12.070
I like to go by Danny.

00:00:12.070 --> 00:00:15.230
I am a member of developer
relations here at Google.

00:00:15.230 --> 00:00:17.310
We do things like this.

00:00:17.310 --> 00:00:21.350
We write documentation, we work
on client libraries, and

00:00:21.350 --> 00:00:25.910
we support APIs, and listen
to external developers.

00:00:25.910 --> 00:00:26.500
OK?

00:00:26.500 --> 00:00:28.140
And I support commerce APIs.

00:00:28.140 --> 00:00:30.150
In particular, the
shopping API.

00:00:30.150 --> 00:00:33.540
So today we're talking about the
content API for shopping.

00:00:33.540 --> 00:00:35.960
So today we're going to talk
about four main things.

00:00:35.960 --> 00:00:38.030
One of which actually
involves code.

00:00:38.030 --> 00:00:40.430
I didn't want to overload you
with code snippets, but it's

00:00:40.430 --> 00:00:41.530
pretty intense at the end.

00:00:41.530 --> 00:00:44.570
So the first is we're going to
review what's out there, the

00:00:44.570 --> 00:00:46.180
existing resources.

00:00:46.180 --> 00:00:49.390
Second, we're going
to just review.

00:00:49.390 --> 00:00:54.730
A basic primer of API use for
the content API for shopping.

00:00:54.730 --> 00:00:56.850
Third, we're going to talk about
best practices, which

00:00:56.850 --> 00:00:58.850
actually becomes relevant when
you get to the point where

00:00:58.850 --> 00:01:02.800
you're making requests
programmatically.

00:01:02.800 --> 00:01:05.319
Using best practices
can be a big deal.

00:01:05.319 --> 00:01:08.020
And fourth, we're going to
actually use a client library

00:01:08.020 --> 00:01:09.300
to manage product data.

00:01:09.300 --> 00:01:13.500
And I'll say this, when we get
to the fourth section, I used

00:01:13.500 --> 00:01:16.700
Python because this slide deck
is actually hosted on Google

00:01:16.700 --> 00:01:19.620
App Engine, and because Python
is a dynamic language.

00:01:19.620 --> 00:01:22.300
But I'll be making requests
in the slide deck.

00:01:22.300 --> 00:01:25.730
I will be making real requests
to a real account with a real

00:01:25.730 --> 00:01:26.890
client library.

00:01:26.890 --> 00:01:29.940
So if you don't use Python,
it may not be of that much

00:01:29.940 --> 00:01:33.340
utility for you, so you may
leave then or you may just

00:01:33.340 --> 00:01:34.150
zone out until questions.

00:01:34.150 --> 00:01:38.220
But I just wanted everyone
to be aware of that.

00:01:38.220 --> 00:01:41.750
But the first three sections
will be language agnostic.

00:01:41.750 --> 00:01:44.100
So we'll be OK up until
that point.

00:01:44.100 --> 00:01:46.010
So let's get started.

00:01:46.010 --> 00:01:48.750
So first, a review of
existing resources.

00:01:48.750 --> 00:01:51.220
So one thing I want everyone to
go look at if they haven't

00:01:51.220 --> 00:01:54.320
yet, is our shiny new
documentation.

00:01:54.320 --> 00:01:57.510
I just completed a migration
of both the content API and

00:01:57.510 --> 00:02:00.750
search API for shopping
documentation sets.

00:02:00.750 --> 00:02:02.000
To developers.google.com.

00:02:04.480 --> 00:02:08.360
It's our brand new site for all
of developer relations.

00:02:08.360 --> 00:02:10.460
People like me.

00:02:10.460 --> 00:02:11.640
And they are shiny.

00:02:11.640 --> 00:02:15.640
We were on code.google.com for
documentation for many years,

00:02:15.640 --> 00:02:18.220
and now we're on
developers.google.com and it's

00:02:18.220 --> 00:02:19.530
really awesome.

00:02:19.530 --> 00:02:23.820
So that's where all our docs
are, it's your go to source

00:02:23.820 --> 00:02:26.400
for any questions you have.

00:02:26.400 --> 00:02:29.200
Also as everyone here is
probably aware, there's a

00:02:29.200 --> 00:02:32.080
Google group, a forum
for the content API.

00:02:32.080 --> 00:02:33.940
If you want to find it,
obviously just go to Google

00:02:33.940 --> 00:02:36.530
Groups and search content
API for shopping.

00:02:36.530 --> 00:02:41.050
But the link below, if you want
to save the link, if you

00:02:41.050 --> 00:02:43.700
aren't already aware, I just
put it in the slides.

00:02:43.700 --> 00:02:47.130
Again, going forward, you don't
have to be worried about

00:02:47.130 --> 00:02:49.190
writing all of these down
because this is going to be

00:02:49.190 --> 00:02:50.210
posted to YouTube.

00:02:50.210 --> 00:02:52.730
And I will eventually publish
this slide deck so you can

00:02:52.730 --> 00:02:55.440
also run these test requests
just like I am.

00:02:55.440 --> 00:02:59.200
But it's in admin only mode
right now, so only I can

00:02:59.200 --> 00:03:03.910
access the slide deck if people
saw the URL before.

00:03:03.910 --> 00:03:07.720
So relevant to today's talk,
some resources that you should

00:03:07.720 --> 00:03:10.300
know about are our open source
client libraries.

00:03:10.300 --> 00:03:15.090
We have a client libraries in
Python, .NET, Java, and PHP.

00:03:15.090 --> 00:03:19.700
So we have solutions already
made in those four languages.

00:03:19.700 --> 00:03:24.930
So rolling your own is actually
a bad idea unless,

00:03:24.930 --> 00:03:27.810
I'm sure Andrew Lamonica in this
talk could talk about it,

00:03:27.810 --> 00:03:30.320
unless you have something really
complex going on, you

00:03:30.320 --> 00:03:32.850
don't need to roll your own.

00:03:32.850 --> 00:03:34.430
So the specifics about these.

00:03:34.430 --> 00:03:39.860
Python it's hosted on Google
code hosting code.google.com/p

00:03:39.860 --> 00:03:43.800
is anything on Google
code hosting.

00:03:43.800 --> 00:03:47.880
The name of the library is
gdata-python-client as the

00:03:47.880 --> 00:03:50.080
link shows.

00:03:50.080 --> 00:03:53.450
The documentation have been
generated by PyDocs.

00:03:53.450 --> 00:03:58.090
And they're hosted in
the same repository.

00:03:58.090 --> 00:04:01.855
The same mercurial repository
that the library is hosted at

00:04:01.855 --> 00:04:08.060
gdata-python-cli
ent.googlecode.com/hg/pydocs/.

00:04:08.060 --> 00:04:10.040
And there's documentation there
for every class, every

00:04:10.040 --> 00:04:13.610
module, everything within
that library.

00:04:13.610 --> 00:04:15.090
There are samples coming soon.

00:04:15.090 --> 00:04:18.230
I've actually just finished a
really awesome document that

00:04:18.230 --> 00:04:20.079
does everything in this
talk and more.

00:04:20.079 --> 00:04:23.820
And I'll be doing that for all
four client libraries.

00:04:23.820 --> 00:04:27.890
But it's being reviewed right
now, and should be published.

00:04:27.890 --> 00:04:32.760
PHP, again open source, again
on Google code hosting.

00:04:32.760 --> 00:04:36.030
Unlike the Python library, the
Python library gdata Python

00:04:36.030 --> 00:04:40.040
client is actually used for
a lot of different APIs.

00:04:40.040 --> 00:04:44.240
I've actually written with my
predecessor Ali [? Afshar ?]

00:04:44.240 --> 00:04:46.780
a specific library in
PHP specifically

00:04:46.780 --> 00:04:48.350
for the content API.

00:04:48.350 --> 00:04:49.830
The name of that library is
gshoppingcontent-php.

00:04:53.510 --> 00:04:57.330
And there are again
auto-generated docs generated

00:04:57.330 --> 00:04:59.445
by the PHP doc tool,
at gshoppingcontent

00:04:59.445 --> 00:05:00.695
-php.appspot.com.

00:05:02.610 --> 00:05:07.570
Documenting every function,
every class, et cetera.

00:05:07.570 --> 00:05:13.050
And there is example code within
the open source project

00:05:13.050 --> 00:05:14.350
on Google code hosting.

00:05:14.350 --> 00:05:16.580
I'm not going to read this link,
but if you go there,

00:05:16.580 --> 00:05:18.570
there's a tab that
says Source.

00:05:18.570 --> 00:05:22.150
And within there, you have a
view of the actual file system

00:05:22.150 --> 00:05:23.380
in the library.

00:05:23.380 --> 00:05:25.330
There's an examples folder, just
click that, and you'll

00:05:25.330 --> 00:05:27.660
have an example of pretty much
every action you'd want to

00:05:27.660 --> 00:05:29.450
take with the API.

00:05:29.450 --> 00:05:30.700
Next is Java.

00:05:30.700 --> 00:05:34.500
There actually is already
an existing document for

00:05:34.500 --> 00:05:36.260
implementing Java.

00:05:36.260 --> 00:05:38.361
So I'll just point you to that
document developers.googl

00:05:38.361 --> 00:05:39.611
e.com/shopping-c
ontent/developers_guide_java.

00:05:45.980 --> 00:05:50.250
Links like that, developer's
guide Java, will show up soon

00:05:50.250 --> 00:05:54.880
for Python, .NET, and PHP.

00:05:54.880 --> 00:05:57.480
So it'll just be developer's
guide Python, developer's

00:05:57.480 --> 00:06:01.660
guide .NET, developers
guide PHP.

00:06:01.660 --> 00:06:07.880
For the Java docs, the main
thing being used it's a client

00:06:07.880 --> 00:06:10.140
library called the Google
API Java client.

00:06:10.140 --> 00:06:11.880
And that's part of
actually a second

00:06:11.880 --> 00:06:13.990
generation of client libraries.

00:06:13.990 --> 00:06:17.610
The document really goes
into detail on that.

00:06:17.610 --> 00:06:18.850
And finally .NET.

00:06:18.850 --> 00:06:22.190
It's something I wasn't
comfortable with when 2012

00:06:22.190 --> 00:06:25.630
started, but I've written
a lot of C# since.

00:06:25.630 --> 00:06:27.820
Again Google code hosting.

00:06:27.820 --> 00:06:29.850
The library is called
google-gdata.

00:06:29.850 --> 00:06:31.360
There are auto-generated
docs at

00:06:31.360 --> 00:06:35.260
google-gdata.googlecode.com,
et cetera.

00:06:35.260 --> 00:06:37.340
Please don't memorize it.

00:06:37.340 --> 00:06:41.560
And there are examples code
at these two links.

00:06:41.560 --> 00:06:45.060
The links were way too long to
actually put in here so just

00:06:45.060 --> 00:06:53.910
goo.gl/Hei6q and goo.gl/aUxa1.

00:06:53.910 --> 00:07:00.670
And those links the first one,
the HEI, contains a sample for

00:07:00.670 --> 00:07:03.810
doing operations on items, which
is what we're going to

00:07:03.810 --> 00:07:04.660
talk about today.

00:07:04.660 --> 00:07:06.350
Actually updating your
product data.

00:07:06.350 --> 00:07:08.180
And the second one
is for managing

00:07:08.180 --> 00:07:09.100
multi-client accounts.

00:07:09.100 --> 00:07:12.770
Which I know some people in
here actually manage.

00:07:12.770 --> 00:07:13.900
Others may not worry about it.

00:07:13.900 --> 00:07:16.070
If you don't worry about it,
obviously you don't need to

00:07:16.070 --> 00:07:17.730
take a look at it.

00:07:17.730 --> 00:07:21.040
So the next step is a review.

00:07:21.040 --> 00:07:23.170
A primer on using the API.

00:07:23.170 --> 00:07:24.060
I'm going to keep this short.

00:07:24.060 --> 00:07:26.820
These are some borrowed slides
from some other slide decks,

00:07:26.820 --> 00:07:29.650
but I just want to get us in the
mood for talking about API

00:07:29.650 --> 00:07:31.130
requests, right?

00:07:31.130 --> 00:07:34.980
So if you're inserting a
product, this is pretty much

00:07:34.980 --> 00:07:35.920
what it looks like.

00:07:35.920 --> 00:07:40.230
You have an Atom entry holding
the product data.

00:07:40.230 --> 00:07:44.590
And the data is formatted as
XML, obviously so it can be

00:07:44.590 --> 00:07:45.650
machine readable.

00:07:45.650 --> 00:07:48.620
And we have things like Title,
which is in the Atom name

00:07:48.620 --> 00:07:51.930
space content, which provides
a description.

00:07:51.930 --> 00:07:55.730
And then custom elements from
our own Name Spaces, Names

00:07:55.730 --> 00:08:00.170
Spaces specific to the content
API, like the ID to describe

00:08:00.170 --> 00:08:01.600
your product, the condition
of your

00:08:01.600 --> 00:08:04.250
product, price, et cetera.

00:08:04.250 --> 00:08:10.910
So once you have this, you post
this XML payload to have

00:08:10.910 --> 00:08:12.000
specific endpoint.

00:08:12.000 --> 00:08:15.640
And this endpoint, you see it
at the top here in the green

00:08:15.640 --> 00:08:16.500
POST,

00:08:16.500 --> 00:08:21.910
https://content.googleapis.com et cetera.

00:08:21.910 --> 00:08:25.060
And this is a specified link,
which we'll talk about in two

00:08:25.060 --> 00:08:28.960
slides actually, that you
can make requests to.

00:08:28.960 --> 00:08:34.059
And the third line of this
little code snippet, you see

00:08:34.059 --> 00:08:35.220
an authorization header.

00:08:35.220 --> 00:08:37.460
You're going to need to send
an authorization token and

00:08:37.460 --> 00:08:38.840
we'll talk about how
you can get that

00:08:38.840 --> 00:08:40.530
with the client library.

00:08:40.530 --> 00:08:45.560
And how you can abstract away
the authentication process.

00:08:45.560 --> 00:08:49.330
So if it succeeds, you
get a 201 response.

00:08:49.330 --> 00:08:51.830
If you insert an item, and it's
been inserted correctly,

00:08:51.830 --> 00:08:55.490
you'll get a 201 with some
various header data.

00:08:55.490 --> 00:08:56.950
One of which is location.

00:08:56.950 --> 00:08:59.570
So the second to bottom row
here, you see this location,

00:08:59.570 --> 00:09:03.860
content.googleapis.com,
blah, blah, blah.

00:09:03.860 --> 00:09:08.010
It includes a dummy account
ID for the merchant.

00:09:08.010 --> 00:09:10.970
And then at the very end you
have a unique identifier.

00:09:10.970 --> 00:09:13.400
And this is why it's called
location, a unique identifier

00:09:13.400 --> 00:09:14.060
for the product.

00:09:14.060 --> 00:09:16.320
And that's we're going to talk
about in the next slide.

00:09:16.320 --> 00:09:20.220
So this unique URL for each
product is actually going to

00:09:20.220 --> 00:09:22.510
be used when you make,
update, and delete

00:09:22.510 --> 00:09:23.600
requests for the product.

00:09:23.600 --> 00:09:26.840
So it's very important
to keep track of.

00:09:26.840 --> 00:09:30.010
And this location is composed
of a few big

00:09:30.010 --> 00:09:31.040
pieces to think of.

00:09:31.040 --> 00:09:32.950
So the first big piece
is the Root.

00:09:32.950 --> 00:09:40.170
The Root is https://content.
googleapis.com/content/V1, for

00:09:40.170 --> 00:09:41.240
version one.

00:09:41.240 --> 00:09:44.360
The second part, obviously
your item is yours.

00:09:44.360 --> 00:09:47.400
So it has to be your Merchant ID
to be able to associate the

00:09:47.400 --> 00:09:49.300
product with your account.

00:09:49.300 --> 00:09:50.850
The next is the Path.

00:09:50.850 --> 00:09:54.310
So for items, the path
is /items/products.

00:09:54.310 --> 00:09:58.700
But as people may know, there
are other operations that can

00:09:58.700 --> 00:10:00.230
be performed with
the Content API.

00:10:00.230 --> 00:10:01.240
So there are other paths.

00:10:01.240 --> 00:10:06.930
There's a managed accounts
path, for MCA operations.

00:10:06.930 --> 00:10:10.620
There's a data feeds path for
data sheet operations.

00:10:10.620 --> 00:10:14.750
And there may be more paths
as the Content API grows.

00:10:14.750 --> 00:10:16.210
The next thing is
a Projection.

00:10:16.210 --> 00:10:17.930
We have two, generic
and schema.

00:10:17.930 --> 00:10:19.650
Not really going to get
into that today.

00:10:19.650 --> 00:10:22.130
And then the last one, like
I said, is the Product ID.

00:10:22.130 --> 00:10:25.160
And that is a string
of four values,

00:10:25.160 --> 00:10:27.040
delimited with a colon.

00:10:27.040 --> 00:10:28.530
The first of which
is a channel,

00:10:28.530 --> 00:10:30.320
either online or local.

00:10:30.320 --> 00:10:32.820
The second of which is the
language for the product.

00:10:32.820 --> 00:10:34.010
Here it's English.

00:10:34.010 --> 00:10:36.470
The third of which is the
country for the product, here

00:10:36.470 --> 00:10:37.950
US for the United States.

00:10:37.950 --> 00:10:39.920
And fourth, the unique
ID that you actually

00:10:39.920 --> 00:10:42.120
set in the SCID element.

00:10:42.120 --> 00:10:45.290
So here's it's SKU123.

00:10:45.290 --> 00:10:48.470
And other than sending back
the location and a 201

00:10:48.470 --> 00:10:52.920
response, you're actually
getting a body with the same

00:10:52.920 --> 00:10:53.940
information you sent.

00:10:53.940 --> 00:10:56.950
So you have the same content
language, the same title, the

00:10:56.950 --> 00:10:59.030
same content, et cetera.

00:10:59.030 --> 00:11:00.250
And you're getting
back new things.

00:11:00.250 --> 00:11:02.520
So you have a published element,
you have an edited

00:11:02.520 --> 00:11:04.850
element, you have an expiration
date, which has

00:11:04.850 --> 00:11:07.130
been set by the API.

00:11:07.130 --> 00:11:11.070
So it's all these things
and more are

00:11:11.070 --> 00:11:13.550
returned in the API response.

00:11:13.550 --> 00:11:17.700
And one last part, actually, two
more things in the primer.

00:11:17.700 --> 00:11:19.530
First batch operations.

00:11:19.530 --> 00:11:20.420
I highly encourage it.

00:11:20.420 --> 00:11:22.200
We'll talk about a lot today.

00:11:22.200 --> 00:11:24.470
But batch operations, for those
who don't know, allow

00:11:24.470 --> 00:11:26.540
you to put multiple
products and

00:11:26.540 --> 00:11:28.770
operations in the same requests.

00:11:28.770 --> 00:11:33.510
So you can delete one product
and insert another product in

00:11:33.510 --> 00:11:36.630
the same exact request. Not
different requests for

00:11:36.630 --> 00:11:40.020
different operations, but
the same request.

00:11:40.020 --> 00:11:44.510
There is a 1 meg cap on each
request, but we do allow

00:11:44.510 --> 00:11:45.600
compressed requests.

00:11:45.600 --> 00:11:49.860
So you can GZIP or use some
other compression method to

00:11:49.860 --> 00:11:54.320
make your request smaller, and
hence fit more products and

00:11:54.320 --> 00:11:59.520
more operations into the same
batch request. From a batch

00:11:59.520 --> 00:12:03.010
request, you don't just get one
single batch response that

00:12:03.010 --> 00:12:04.620
says good job or bad job.

00:12:04.620 --> 00:12:08.150
You get individualized responses
for each operation

00:12:08.150 --> 00:12:09.460
you attempt to perform.

00:12:09.460 --> 00:12:14.190
And by the same token, you get
individualized errors for each

00:12:14.190 --> 00:12:16.700
request that errored out.

00:12:16.700 --> 00:12:18.650
This is pretty helpful,
especially when you put this

00:12:18.650 --> 00:12:24.040
next to using data feeds, where
you just have a mass

00:12:24.040 --> 00:12:25.770
email after the fact.

00:12:25.770 --> 00:12:27.820
This is a great way to
understand what has worked,

00:12:27.820 --> 00:12:32.570
what hasn't worked, and act
on it almost instantly.

00:12:32.570 --> 00:12:35.580
So finally, the great part of
using batch requests is that

00:12:35.580 --> 00:12:37.480
you save on the number
of requests.

00:12:37.480 --> 00:12:40.545
And this is a picture I really
like to use, so please keep it

00:12:40.545 --> 00:12:42.770
in mind when you're
thinking about

00:12:42.770 --> 00:12:44.060
using individual requests.

00:12:44.060 --> 00:12:46.630
The great thing about mass
requests is you take products

00:12:46.630 --> 00:12:50.530
and operations, you bundle them
all into one request, and

00:12:50.530 --> 00:12:53.450
you just send it away
with the POST. OK?

00:12:53.450 --> 00:12:57.110
And so the last thing I wanted
to review is special modes.

00:12:57.110 --> 00:12:59.260
So one of them is
dry run mode.

00:12:59.260 --> 00:13:02.720
Dry run mode actually allows you
to test out your request

00:13:02.720 --> 00:13:06.950
before you actually make real
changes to your inventory.

00:13:06.950 --> 00:13:10.690
So you can test out an insert
without actually inserting the

00:13:10.690 --> 00:13:12.840
products you're testing.

00:13:12.840 --> 00:13:17.550
By doing so, the responses,
the errors, the warnings,

00:13:17.550 --> 00:13:20.380
everything you would expect to
get back, will actually be

00:13:20.380 --> 00:13:24.710
returned in that request. But
nothing happened in your

00:13:24.710 --> 00:13:25.840
actual inventory.

00:13:25.840 --> 00:13:28.880
The API receives the request,
it does all the usual things

00:13:28.880 --> 00:13:33.680
it would do, and doesn't inject
the item into our

00:13:33.680 --> 00:13:37.990
database, but it does do
everything else it would do.

00:13:37.990 --> 00:13:41.760
So you can enable this by
simply adding a small

00:13:41.760 --> 00:13:44.220
parameters, the dry run
parameter to the end of your

00:13:44.220 --> 00:13:45.260
query string.

00:13:45.260 --> 00:13:48.080
Like I said, it's available
for any state changing

00:13:48.080 --> 00:13:51.350
operation, inserts,
updates, deletes.

00:13:51.350 --> 00:13:52.700
And this is what
it looks like.

00:13:52.700 --> 00:13:55.450
You make a POST request. So here
would be a POST request

00:13:55.450 --> 00:13:56.020
for an insert.

00:13:56.020 --> 00:14:00.120
You have your Root, you
have your account ID.

00:14:00.120 --> 00:14:02.080
You have your path, you
have your projection.

00:14:02.080 --> 00:14:05.980
And then the second line is just
a question mark to start

00:14:05.980 --> 00:14:09.730
your query parameter,
and then dry run.

00:14:09.730 --> 00:14:13.700
So how do some of these apply
to best practices?

00:14:13.700 --> 00:14:18.420
So best practices doc, we
actually just launched about

00:14:18.420 --> 00:14:19.860
two or three weeks ago.

00:14:19.860 --> 00:14:21.240
I highly encourage people
to read it.

00:14:21.240 --> 00:14:22.730
It's on our documentation.

00:14:22.730 --> 00:14:24.960
I don't know, the link maybe
a little small there

00:14:24.960 --> 00:14:25.580
for people to see.

00:14:25.580 --> 00:14:28.120
I'll get it bigger
for a second.

00:14:28.120 --> 00:14:28.680
There it is. developers.googl
e.com/shopping-c

00:14:28.680 --> 00:14:29.930
ontent/getting-s
tarted/best-practices.

00:14:34.300 --> 00:14:36.700
And there are really five best
practices to keep in mind.

00:14:36.700 --> 00:14:40.010
And I'll go into detail about
them in the following slides.

00:14:40.010 --> 00:14:43.880
But first, don't use the API
like you're using Feeds.

00:14:43.880 --> 00:14:47.340
Second don't mix Feeds
and the API.

00:14:47.340 --> 00:14:50.750
Third, update items as
soon as they change.

00:14:50.750 --> 00:14:54.170
Forth, make sure to update
items before they expire.

00:14:54.170 --> 00:14:56.470
That's actually different from
as soon as they change, and

00:14:56.470 --> 00:14:58.330
we'll go into details on that.

00:14:58.330 --> 00:15:01.330
And fifth, combine updates
into batch requests

00:15:01.330 --> 00:15:02.440
whenever you can.

00:15:02.440 --> 00:15:05.160
This really relates the stuff
I talked about before.

00:15:05.160 --> 00:15:08.090
So first, don't use APIs
as you would Feeds.

00:15:08.090 --> 00:15:08.700
Why not?

00:15:08.700 --> 00:15:12.300
Well when you're using Feeds
you send an update of your

00:15:12.300 --> 00:15:13.790
entire Feed every day.

00:15:13.790 --> 00:15:17.070
If 10% of your inventory has
changed, you send 100% of your

00:15:17.070 --> 00:15:18.500
inventory every day.

00:15:18.500 --> 00:15:20.080
But that's a waste.

00:15:20.080 --> 00:15:24.560
That's a waste of our space,
it's a waste of your space,

00:15:24.560 --> 00:15:26.470
and it's a waste of
processing power.

00:15:26.470 --> 00:15:30.470
So you only need to update the
items that are changing.

00:15:30.470 --> 00:15:32.440
Sending your entire
Feed, like I said,

00:15:32.440 --> 00:15:34.260
consumes time and resources.

00:15:34.260 --> 00:15:35.610
And it's just not worth it.

00:15:35.610 --> 00:15:38.930
Rather than sending 100%, you
can just send that 10% that

00:15:38.930 --> 00:15:39.860
has changed.

00:15:39.860 --> 00:15:41.550
And the other 90% won't
be affected.

00:15:41.550 --> 00:15:43.640
It won't go away, nothing
bad will happen.

00:15:43.640 --> 00:15:46.230
That's the great part
about the API.

00:15:46.230 --> 00:15:48.800
So the second part, don't have
a whole lot on the slide.

00:15:48.800 --> 00:15:52.320
Don't mix Base Feeds with
the Content API.

00:15:52.320 --> 00:15:55.650
Don't mix Base Feeds with
the Content API.

00:15:55.650 --> 00:15:57.610
This is actually something
that's been discussed on the

00:15:57.610 --> 00:16:00.970
forum, and I know one of the
attendees may or may not do

00:16:00.970 --> 00:16:03.690
this, but the thing about mixing
the Base Feeds and the

00:16:03.690 --> 00:16:07.020
Content API is there's a lot
of undefined behavior.

00:16:07.020 --> 00:16:11.007
If you're making updates on a
Feed and also updates with the

00:16:11.007 --> 00:16:12.920
API there are race conditions.

00:16:12.920 --> 00:16:16.200
You have two updates racing to
the database, and you may

00:16:16.200 --> 00:16:17.790
think one's going to get
there first, but you

00:16:17.790 --> 00:16:19.090
don't actually know.

00:16:19.090 --> 00:16:20.360
The behavior is undefined.

00:16:20.360 --> 00:16:24.290
Another issue, if you insert an
item with the API, but you

00:16:24.290 --> 00:16:26.830
decide you want to delete it
with a Feed, you actually

00:16:26.830 --> 00:16:27.850
can't do it.

00:16:27.850 --> 00:16:30.630
So way too much undefined
behavior.

00:16:30.630 --> 00:16:32.710
There's a lot of other things
other than those two examples,

00:16:32.710 --> 00:16:34.680
but just don't mix them.

00:16:34.680 --> 00:16:37.620
If you're going to switch to the
Content API, then please

00:16:37.620 --> 00:16:39.580
switch to the Content API.

00:16:39.580 --> 00:16:41.470
Don't straddle the
river in between.

00:16:41.470 --> 00:16:44.400
But if people have other
opinions and things like that,

00:16:44.400 --> 00:16:49.030
we can discuss them
after the webinar.

00:16:49.030 --> 00:16:52.160
The third thing, update items
as soon as they change.

00:16:52.160 --> 00:16:55.310
This obviously insures your data
on Google Product Search

00:16:55.310 --> 00:16:56.650
is as fresh as possible.

00:16:56.650 --> 00:16:57.990
And everyone wants that.

00:16:57.990 --> 00:17:02.750
So rather than doing four big
Feeds updates every day, or

00:17:02.750 --> 00:17:06.210
two or one or however you're
doing it with Feeds, or used

00:17:06.210 --> 00:17:08.920
to doing it with Feeds, you can
set an update the second

00:17:08.920 --> 00:17:10.819
the item has changed.

00:17:10.819 --> 00:17:14.030
This makes things super fresh.

00:17:14.030 --> 00:17:18.819
It also keeps a log jam of
requests and updates the need

00:17:18.819 --> 00:17:21.410
to be made from building up.

00:17:21.410 --> 00:17:24.140
If you send a request the second
it needs to be sent,

00:17:24.140 --> 00:17:27.910
then you don't have to add
to any queue of requests.

00:17:27.910 --> 00:17:29.430
Fourth thing, make
sure to update

00:17:29.430 --> 00:17:30.550
items before they expire.

00:17:30.550 --> 00:17:34.250
So this is a bit different
than the update items the

00:17:34.250 --> 00:17:35.690
second they change.

00:17:35.690 --> 00:17:39.730
So by default, items
expire in 30 days.

00:17:39.730 --> 00:17:42.100
If you don't send any expiration
date with your

00:17:42.100 --> 00:17:45.520
product, it will be tacked on an
expiration date 30 days in

00:17:45.520 --> 00:17:49.020
the future from your request.
And you can't extend it beyond

00:17:49.020 --> 00:17:52.160
30 days, that's the maximum
the API allows.

00:17:52.160 --> 00:17:55.050
So if you don't change an item
over the period, it'll expire.

00:17:55.050 --> 00:17:58.000
Let's say, 50% of your inventory
changes all the

00:17:58.000 --> 00:18:02.220
time, and the other 50% seldom
changes on the order of three

00:18:02.220 --> 00:18:03.110
or four times a year.

00:18:03.110 --> 00:18:05.180
But certainly not
every 30 days.

00:18:05.180 --> 00:18:08.370
Well that 50%, if you don't
touch it after the initial

00:18:08.370 --> 00:18:11.960
insertion of that inventory,
will expire in 30 days.

00:18:11.960 --> 00:18:13.620
And you don't want that, you
want your inventory to be

00:18:13.620 --> 00:18:16.820
around, to show up in Google
Product Search.

00:18:16.820 --> 00:18:20.970
So to avoid expiration, you can
send, in quotes, "Empty

00:18:20.970 --> 00:18:25.250
Updates." So Empty Updates
would be an update of the

00:18:25.250 --> 00:18:28.780
product without actually any
changes to the product.

00:18:28.780 --> 00:18:32.065
So you can make a Get request,
get all the product data from

00:18:32.065 --> 00:18:34.790
the API, and then just send it
right back with an update

00:18:34.790 --> 00:18:38.760
request. Except don't send
the expiration date.

00:18:38.760 --> 00:18:42.290
You can either manually have an
expiration date 30 days in

00:18:42.290 --> 00:18:45.410
the future, or you can just get
rid of the expiration date

00:18:45.410 --> 00:18:48.545
element, and have the API,
again by default, set an

00:18:48.545 --> 00:18:50.960
expiration date 30 days
in the future.

00:18:50.960 --> 00:18:54.900
So if you did this once a month,
then we would be back

00:18:54.900 --> 00:18:56.980
in the Data Feeds mindset.

00:18:56.980 --> 00:18:58.480
And we don't want to be there.

00:18:58.480 --> 00:19:01.380
So don't do it all at once,
spread the load.

00:19:04.400 --> 00:19:08.310
One approach that I like is pick
a fixed number of days.

00:19:08.310 --> 00:19:11.040
Preferably something
that divides 30.

00:19:11.040 --> 00:19:12.790
And use that as your horizon.

00:19:12.790 --> 00:19:17.120
So let's say all my products
that expire in five days, then

00:19:17.120 --> 00:19:18.420
I'm going to update them.

00:19:18.420 --> 00:19:21.130
I'll send an empty update so
they don't expire, and now I

00:19:21.130 --> 00:19:22.040
have a 30 day window.

00:19:22.040 --> 00:19:24.680
And then five days later, I'll
do that for the items that

00:19:24.680 --> 00:19:26.610
expire five days from then.

00:19:26.610 --> 00:19:28.350
But there are other ways
you can do it.

00:19:28.350 --> 00:19:29.670
Really, be creative.

00:19:29.670 --> 00:19:34.910
It has to obviously depend on
your own data, on your own

00:19:34.910 --> 00:19:38.290
inventory, and the frequency
of your own updates.

00:19:38.290 --> 00:19:41.450
But again, don't do it all
once, spread the load.

00:19:41.450 --> 00:19:44.350
And the last best practice I
want to talk about before we

00:19:44.350 --> 00:19:49.660
get super technical and super
Python, is that, hopefully

00:19:49.660 --> 00:19:52.800
this is a no brainer, but
combine updates into batch

00:19:52.800 --> 00:19:54.570
requests whenever you can.

00:19:54.570 --> 00:19:57.020
This gives you better
performance, gives us better

00:19:57.020 --> 00:19:58.980
performance.

00:19:58.980 --> 00:20:02.410
And it allows you to update more
items with your request.

00:20:02.410 --> 00:20:05.300
Obviously it saves time,
and a lot of

00:20:05.300 --> 00:20:07.810
times, it can save space.

00:20:07.810 --> 00:20:10.610
And another great thing that
it saves is your quota.

00:20:10.610 --> 00:20:13.610
You do have a quota limit on a
lot of different things, and

00:20:13.610 --> 00:20:15.440
this can actually use
less of your quota.

00:20:15.440 --> 00:20:18.410
I know a lot of people don't
have a lot of experience with

00:20:18.410 --> 00:20:20.180
this, but it actually
can be relevant.

00:20:23.540 --> 00:20:26.980
I mentioned before, the third
best practice I believe,

00:20:26.980 --> 00:20:29.570
update items as soon
as they change.

00:20:29.570 --> 00:20:33.330
Well, if you only have, let's
say, one change every minute,

00:20:33.330 --> 00:20:35.530
or one change every five
minutes, that's fine.

00:20:35.530 --> 00:20:36.660
Just send that change.

00:20:36.660 --> 00:20:39.890
But if you're getting up to
five, six, seven, eight

00:20:39.890 --> 00:20:43.810
changes a minute, it may be
better to hold off and wait

00:20:43.810 --> 00:20:48.140
until you get a few piling up
and then send a batch request.

00:20:48.140 --> 00:20:52.160
And I'm sure there are folks,
even in this particular

00:20:52.160 --> 00:20:56.000
hangout who have experienced
similar situations.

00:20:56.000 --> 00:20:59.040
So finally, for the fourth
section, using a client

00:20:59.040 --> 00:21:01.360
library to manage your
product data.

00:21:01.360 --> 00:21:03.110
Like I said before, we're
going to be talking

00:21:03.110 --> 00:21:05.410
specifically about Python.

00:21:05.410 --> 00:21:08.810
But one of the great things
about Python is that it pretty

00:21:08.810 --> 00:21:10.130
much reads like pseudo code.

00:21:10.130 --> 00:21:11.820
So a lot of the things you're
going to see, whether you

00:21:11.820 --> 00:21:14.210
understand Python or not, you'll
be able to understand

00:21:14.210 --> 00:21:16.110
as general programming
concepts.

00:21:16.110 --> 00:21:20.470
Which hopefully makes this
visible by Python experts and

00:21:20.470 --> 00:21:22.640
non-experts alike.

00:21:22.640 --> 00:21:27.360
But if you'd like to zone
out, feel free.

00:21:27.360 --> 00:21:31.060
So the first thing I'll talk
about is installation.

00:21:31.060 --> 00:21:34.540
Like I said, it's hosted
on Google code hosting.

00:21:34.540 --> 00:21:37.850
If you go there, you click
downloads at the very top.

00:21:37.850 --> 00:21:41.050
There's a download, just
a ZIP of the entire

00:21:41.050 --> 00:21:42.550
contents of the library.

00:21:42.550 --> 00:21:46.630
So download it somewhere, unzip
it somewhere in your

00:21:46.630 --> 00:21:47.880
directory choice.

00:21:49.930 --> 00:21:53.820
Once you've un-zipped it, if
you're on a Mac or you're on

00:21:53.820 --> 00:21:55.860
Linux, cd into that directory.

00:21:55.860 --> 00:21:59.180
If you're on Windows, dir
into that directory.

00:21:59.180 --> 00:22:02.120
And run python setup.py
install.

00:22:02.120 --> 00:22:03.370
That's it, it's installed.

00:22:06.500 --> 00:22:08.810
The first thing we're going to
talk about as authentication.

00:22:08.810 --> 00:22:11.580
Now remember, every request
you send needs to be

00:22:11.580 --> 00:22:12.300
authenticated.

00:22:12.300 --> 00:22:15.830
You need to send an auth token
in the header of your request.

00:22:15.830 --> 00:22:17.390
And this can kind
of be a pain.

00:22:17.390 --> 00:22:19.610
But the great thing about these
client libraries is they

00:22:19.610 --> 00:22:22.090
allow you to authentication,
they allow you to include your

00:22:22.090 --> 00:22:24.870
auth token without worrying
about any of that.

00:22:24.870 --> 00:22:27.800
They abstract away everything,
so we can really just deal

00:22:27.800 --> 00:22:28.780
with the product data.

00:22:28.780 --> 00:22:29.960
That's really what
we want to do.

00:22:29.960 --> 00:22:31.940
We want to deal with the product
data, and the way

00:22:31.940 --> 00:22:34.160
we're operating on
our product data.

00:22:34.160 --> 00:22:37.190
Everything else let somebody
deal with.

00:22:37.190 --> 00:22:40.500
Like I said, this is a pre-made
solution so you don't

00:22:40.500 --> 00:22:42.170
have to roll your own.

00:22:42.170 --> 00:22:46.490
So all requests of the content
API obviously need to be

00:22:46.490 --> 00:22:47.790
authenticated.

00:22:47.790 --> 00:22:50.600
So here we're going to use
what's called programmatic

00:22:50.600 --> 00:22:55.110
login, or client login to get
a token that can be sent in

00:22:55.110 --> 00:22:56.920
the header.

00:22:56.920 --> 00:22:59.440
A token is obtained from client
login just by making a

00:22:59.440 --> 00:23:00.996
POST request to google.com/accou

00:23:00.996 --> 00:23:02.246
nts/clientlogin.

00:23:05.030 --> 00:23:09.460
And the body of that request
needs to have a few things.

00:23:09.460 --> 00:23:12.670
In the green, at the bottom,
you need to send your email

00:23:12.670 --> 00:23:14.690
address, your password.

00:23:14.690 --> 00:23:17.690
You need to send the service
you're authenticating again.

00:23:17.690 --> 00:23:21.520
So here the service is called
structured content, and then

00:23:21.520 --> 00:23:24.110
you need to send a fourth a
property called source.

00:23:24.110 --> 00:23:25.250
And the source property
is really

00:23:25.250 --> 00:23:26.570
just for logging purposes.

00:23:26.570 --> 00:23:29.580
It just identifies your
application in some way.

00:23:29.580 --> 00:23:32.200
But it's not really
tied to anything.

00:23:32.200 --> 00:23:33.880
So you can call it whatever
you want.

00:23:33.880 --> 00:23:37.730
Here we call it the Content
API webinar source.

00:23:37.730 --> 00:23:42.050
So let's see some Python, and
actually execute a request to

00:23:42.050 --> 00:23:45.620
client login and get ourselves
an auth token.

00:23:45.620 --> 00:23:49.170
So first, we're going
to import a module.

00:23:49.170 --> 00:23:50.210
So this module, gdata.contentfor

00:23:50.210 --> 00:23:55.210
shopping.client, is going to
do all the work for us.

00:23:55.210 --> 00:23:58.830
So it's a module in
the gdata library.

00:23:58.830 --> 00:24:03.690
It's specific to content for
shopping, and it's the client

00:24:03.690 --> 00:24:06.620
part of the content for
shopping module.

00:24:06.620 --> 00:24:11.890
Now we're also going to use
a data part of that.

00:24:11.890 --> 00:24:15.370
And those are the two prongs
that do all the work for us,

00:24:15.370 --> 00:24:20.540
and abstract away all the hard
programming parts that we may

00:24:20.540 --> 00:24:22.460
have to worry about.

00:24:22.460 --> 00:24:24.965
So first we're going to set up
our email, our password and

00:24:24.965 --> 00:24:25.990
our application name.

00:24:25.990 --> 00:24:27.750
Which is equivalent
to the source.

00:24:27.750 --> 00:24:30.170
Email, fake email,
password, fake

00:24:30.170 --> 00:24:31.440
passport, application name.

00:24:31.440 --> 00:24:33.650
They're just strings.

00:24:33.650 --> 00:24:37.380
And next we're going to
instantiate a client object.

00:24:37.380 --> 00:24:44.180
So the client object is going
to be an instance of the

00:24:44.180 --> 00:24:47.560
content for shopping client
class, which comes from the

00:24:47.560 --> 00:24:51.360
gdata.contentforshopping.client
module.

00:24:51.360 --> 00:24:55.680
So we instantiate a class
object, and then we use the

00:24:55.680 --> 00:24:57.390
object to make our request.

00:24:57.390 --> 00:25:01.660
client.ClientLogin is the method.

00:25:01.660 --> 00:25:03.500
And we're sending our
email, our password,

00:25:03.500 --> 00:25:04.880
our application name.

00:25:04.880 --> 00:25:06.870
And then we also send the
service that we're

00:25:06.870 --> 00:25:08.820
authenticating against. And
again, like I said, the

00:25:08.820 --> 00:25:10.770
service here is structured
content.

00:25:10.770 --> 00:25:13.660
Structured content is actually
what the API was originally

00:25:13.660 --> 00:25:18.860
named, and that's why you see
CS as the shorthand for the

00:25:18.860 --> 00:25:20.570
name space as well.

00:25:20.570 --> 00:25:22.260
Anyhow, let's make the request.
I'm going to click

00:25:22.260 --> 00:25:25.090
execute code, and will actually
make a request to

00:25:25.090 --> 00:25:28.290
client login and give
me an auth token.

00:25:28.290 --> 00:25:31.960
So there it is.

00:25:31.960 --> 00:25:34.420
So there's my auth token.

00:25:34.420 --> 00:25:36.570
As you can see, it's a

00:25:36.570 --> 00:25:39.840
gdata.gauth.ClientLogInToken object.

00:25:39.840 --> 00:25:43.320
And not going to provide the
whole thing, I whited out the

00:25:43.320 --> 00:25:44.810
last about 90%.

00:25:44.810 --> 00:25:47.670
But I actually have a token
string on this object, which

00:25:47.670 --> 00:25:52.470
is typical for what you receive
from client login.

00:25:52.470 --> 00:25:55.010
So remember what your
requests look like.

00:25:55.010 --> 00:25:59.530
You have all this jumbled XML
with various attributes, some

00:25:59.530 --> 00:26:01.600
of which come from different
name spaces.

00:26:01.600 --> 00:26:05.630
So we're going to build this
with Python, and I just wanted

00:26:05.630 --> 00:26:08.210
to remind you what it looks
like, so some of the things we

00:26:08.210 --> 00:26:09.840
do on the next slide make
a bit of sense.

00:26:09.840 --> 00:26:12.500
So title and content come
from the main name

00:26:12.500 --> 00:26:13.970
space, which is Atom.

00:26:13.970 --> 00:26:18.740
Whereas ID condition price come
from name spaces specific

00:26:18.740 --> 00:26:22.190
to the content API for shop.

00:26:22.190 --> 00:26:24.500
So let's create a product.

00:26:24.500 --> 00:26:28.570
Excuse So first we're going
to have our imports.

00:26:28.570 --> 00:26:30.980
Import CGI is actually
commented out.

00:26:30.980 --> 00:26:32.150
There's going to be a reason
for that, I'll

00:26:32.150 --> 00:26:35.030
explain it in a bit.

00:26:35.030 --> 00:26:37.570
Then I'm going to just
import two modules.

00:26:37.570 --> 00:26:39.310
The first atom.data.

00:26:39.310 --> 00:26:44.410
This is a general data module
for all gdata APIs that are

00:26:44.410 --> 00:26:46.240
using the name space.

00:26:46.240 --> 00:26:49.560
So title and content, as well
link, are coming from this

00:26:49.560 --> 00:26:50.290
name space.

00:26:50.290 --> 00:26:51.920
So that's where we're
going to use it.

00:26:51.920 --> 00:26:54.400
And then the other one, which
I mentioned before, is

00:26:54.400 --> 00:26:56.760
gdata.contentforshopping.data.

00:26:56.760 --> 00:26:59.270
This holds all the custom
data classes that we

00:26:59.270 --> 00:27:01.580
used for this API.

00:27:01.580 --> 00:27:04.830
And it's a really, really long
string to keep putting on

00:27:04.830 --> 00:27:09.500
every line of the slide, so I'm
just aliasing as CFS_data.

00:27:09.500 --> 00:27:11.240
CFS for content for shopping.

00:27:11.240 --> 00:27:14.260
So when you see CFs_data, I'm
really talking about the data

00:27:14.260 --> 00:27:17.440
module for the content
for shop.

00:27:17.440 --> 00:27:21.850
So we start off with a product
entry, an empty product entry.

00:27:21.850 --> 00:27:29.300
And recall entry is the name
of the atom element which

00:27:29.300 --> 00:27:31.110
holds all the product data.

00:27:31.110 --> 00:27:35.386
So CFS_data.ProductEntry() is
what we start with for our

00:27:35.386 --> 00:27:36.050
empty product.

00:27:36.050 --> 00:27:37.770
Now first we want
to set title.

00:27:37.770 --> 00:27:41.270
So to set title, we just set
the title attribute on the

00:27:41.270 --> 00:27:45.210
entry with one of these custom
data classes from the

00:27:45.210 --> 00:27:46.890
atom.data module.

00:27:46.890 --> 00:27:50.810
Atom.data.title with a
string for the title.

00:27:50.810 --> 00:27:54.000
So it's 32 gigabyte
MP3 player.

00:27:54.000 --> 00:27:58.260
Similarly we set the content,
oh my gosh, it holds so much

00:27:58.260 --> 00:28:00.970
music, 32 gigs.

00:28:00.970 --> 00:28:06.050
And finally, we're going to
use the link part of the

00:28:06.050 --> 00:28:12.250
atom.data module to set the
actual product link.

00:28:12.250 --> 00:28:14.650
So to set the product link,
you're going to use a

00:28:14.650 --> 00:28:19.070
Link(rel="alternative") link,
and here we can use Python

00:28:19.070 --> 00:28:24.010
keyword arguments rel, type and
href, to actually build

00:28:24.010 --> 00:28:27.270
this custom link attribute.

00:28:27.270 --> 00:28:29.660
And instead of actually
directly setting the

00:28:29.660 --> 00:28:33.840
entry.link attribute, as we did
with title and content,

00:28:33.840 --> 00:28:36.460
we're actually appending to a
list. Since there could be

00:28:36.460 --> 00:28:41.180
more links, there can also be
rel=edit, rel=cell, rel=next,

00:28:41.180 --> 00:28:42.310
things like that.

00:28:42.310 --> 00:28:46.170
We only are appending to a
list of links rather than

00:28:46.170 --> 00:28:49.860
directly setting the link.

00:28:49.860 --> 00:28:53.160
So now for the custom attributes
specific to the

00:28:53.160 --> 00:28:54.720
content API for shopping.

00:28:54.720 --> 00:28:56.270
They're all pretty similar,
so I'm going to go

00:28:56.270 --> 00:28:57.010
through this quickly.

00:28:57.010 --> 00:29:00.720
But the first one, we directly
set the product ID attribute

00:29:00.720 --> 00:29:04.400
to CFS_data.ProductID and then
we just use a string for the

00:29:04.400 --> 00:29:06.140
product ID.

00:29:06.140 --> 00:29:10.190
Price, very similar, and as
with the link, we actually

00:29:10.190 --> 00:29:20.740
have an XML attribute unit,
on the price XML element.

00:29:20.740 --> 00:29:22.870
So we use the Python keyword
unit to actually

00:29:22.870 --> 00:29:24.370
specify that attribute.

00:29:24.370 --> 00:29:26.910
And the rest proceeds
similarly.

00:29:26.910 --> 00:29:29.880
One last comment I wanted to
make, with Google product

00:29:29.880 --> 00:29:34.940
category, you have these greater
than signs to go to a

00:29:34.940 --> 00:29:37.450
more specific category.

00:29:37.450 --> 00:29:39.380
And some of these
have ampersands.

00:29:39.380 --> 00:29:42.210
So typically, when you send XML
that has a greater than

00:29:42.210 --> 00:29:44.090
sign, you need to
XML escape it.

00:29:44.090 --> 00:29:47.820
So instead of a greater than
sign, you use &amp;gt:.

00:29:47.820 --> 00:29:53.960
Similar ampersand needs to
be escaped as &amp;amp:.

00:29:53.960 --> 00:29:57.490
In Python, you would do that
with CGI.escape, you just put

00:29:57.490 --> 00:29:59.820
the string in there, and
it escapes it for XML.

00:29:59.820 --> 00:30:03.010
However, you just need to worry
about data here, you

00:30:03.010 --> 00:30:06.670
don't need to do any of that,
because the client library

00:30:06.670 --> 00:30:07.770
does all that for you.

00:30:07.770 --> 00:30:11.330
It escapes it into everything
it should be escaped for.

00:30:11.330 --> 00:30:13.790
And you just worry about,
like I said, the data.

00:30:13.790 --> 00:30:14.490
OK.

00:30:14.490 --> 00:30:16.750
So that might have been
a bit of a whirlwind.

00:30:16.750 --> 00:30:18.260
There are a lot of attributes.

00:30:18.260 --> 00:30:20.190
That's one of the most confusing
things about the

00:30:20.190 --> 00:30:21.310
content API for shopping.

00:30:21.310 --> 00:30:23.510
So there is documentation
for it.

00:30:23.510 --> 00:30:25.790
I'm not going to read this link
at the bottom, but this

00:30:25.790 --> 00:30:29.340
is a snapshot of the
auto-generated PyDocs

00:30:29.340 --> 00:30:31.680
Everything is in there, every
class, every attribute, the

00:30:31.680 --> 00:30:34.230
way to use them,
it's all there.

00:30:34.230 --> 00:30:36.180
So if you're curious,
go take a look.

00:30:36.180 --> 00:30:40.870
We have similar stuff for the
other languages as well, as I

00:30:40.870 --> 00:30:42.660
showed in the resources
section.

00:30:42.660 --> 00:30:47.760
So now let's actually do
something with this client

00:30:47.760 --> 00:30:50.550
object that we've authenticated
with.

00:30:50.550 --> 00:30:53.360
So we're going to retrieve all
of our items first. The reason

00:30:53.360 --> 00:30:55.570
I'm doing this before I'm
inserting a product, after I

00:30:55.570 --> 00:30:57.850
just showed you how to make a
product, is to show you that I

00:30:57.850 --> 00:31:01.140
don't have any items at
all in my account.

00:31:01.140 --> 00:31:04.320
So to retrieve your list of
items recall, you just make a

00:31:04.320 --> 00:31:06.170
GET request to the
item's feed.

00:31:06.170 --> 00:31:09.850
So it has the route URI, your
account ID, the path, which is

00:31:09.850 --> 00:31:13.370
item's products, and
then generic.

00:31:13.370 --> 00:31:16.780
So the first thing we do, we
specify an account ID&gt;.

00:31:16.780 --> 00:31:21.560
My account ID is not actually
1234567, but I'm not going to

00:31:21.560 --> 00:31:24.700
expose it here for
obvious reasons.

00:31:24.700 --> 00:31:29.090
So it's as simple as making
one call to the client.

00:31:29.090 --> 00:31:32.890
So you do have your client
object, we instantiated it a

00:31:32.890 --> 00:31:34.140
few slides back.

00:31:37.560 --> 00:31:40.770
It's a member of the concept
for shopping client class.

00:31:40.770 --> 00:31:42.830
And all we need to send
is our account ID.

00:31:42.830 --> 00:31:44.870
The reason we send our account
ID is so it can actually

00:31:44.870 --> 00:31:47.830
construct the URI to make
the request to.

00:31:47.830 --> 00:31:50.140
And then we send the auth token
that we retrieved, so it

00:31:50.140 --> 00:31:52.330
can sign the request with
the auth token.

00:31:52.330 --> 00:31:55.540
So the API knows who we are,
so it doesn't just give

00:31:55.540 --> 00:31:57.660
anybody our products.

00:31:57.660 --> 00:31:59.960
And it's going to return
a feed object.

00:31:59.960 --> 00:32:02.610
But this feed object is
parsed by the API.

00:32:02.610 --> 00:32:05.620
We don't have to worry about
parsing some hairy XML string,

00:32:05.620 --> 00:32:08.210
it's already done by
the client library.

00:32:08.210 --> 00:32:10.230
Magic.

00:32:10.230 --> 00:32:15.810
So within an atom feed element,
the products are just

00:32:15.810 --> 00:32:19.410
a list of XML entry elements.

00:32:19.410 --> 00:32:24.510
So we have a product list from
the fee.entry attribute.

00:32:24.510 --> 00:32:28.600
And this next bit of Python
code is not exactly pseudo

00:32:28.600 --> 00:32:31.860
code, but what I'm saying is, if
the list is not empty, then

00:32:31.860 --> 00:32:34.890
let's print for every product
in the list, lets print the

00:32:34.890 --> 00:32:37.490
title of the product, otherwise
print no product.

00:32:37.490 --> 00:32:40.385
So since I have no data right
now in my account, I'm

00:32:40.385 --> 00:32:43.720
expecting no products,
but who knows.

00:32:43.720 --> 00:32:44.580
No products.

00:32:44.580 --> 00:32:45.490
OK, great.

00:32:45.490 --> 00:32:48.345
So I actually literally made a
request with my auth token and

00:32:48.345 --> 00:32:51.300
my account ID to the API.

00:32:51.300 --> 00:32:55.040
Had it parsed by the library,
and returned an empty product

00:32:55.040 --> 00:32:57.020
list. Just like that.

00:32:57.020 --> 00:32:59.090
So the next thing we're going to
do with the product we just

00:32:59.090 --> 00:33:01.920
created is insert an item.

00:33:01.920 --> 00:33:05.740
So to insert an item, instead of
making a GET, request it's

00:33:05.740 --> 00:33:07.950
a POST request to
the item's feed.

00:33:07.950 --> 00:33:12.710
It's the exact same URL that you
made a GET request to, but

00:33:12.710 --> 00:33:15.810
this time you're going to send
an XML payload with the

00:33:15.810 --> 00:33:16.790
product data.

00:33:16.790 --> 00:33:19.660
But the library does
all that for you.

00:33:19.660 --> 00:33:23.920
So the response, also as a
refresher, will contain

00:33:23.920 --> 00:33:29.040
everything you inserted, plus
any errors that occurred, plus

00:33:29.040 --> 00:33:29.890
things that changed.

00:33:29.890 --> 00:33:35.200
Like app edited, published,
things like that.

00:33:35.200 --> 00:33:39.270
So the first thing we do, we
create an empty product, then

00:33:39.270 --> 00:33:39.830
dot dot dot.

00:33:39.830 --> 00:33:42.500
You fill it up with whatever
data you want to put it.

00:33:42.500 --> 00:33:46.580
And I am using the example
with the 32

00:33:46.580 --> 00:33:48.470
gigabyte MP3 player.

00:33:48.470 --> 00:33:54.210
So just as with GET products,
it's a simple call with a

00:33:54.210 --> 00:33:56.540
single method on the client.

00:33:56.540 --> 00:33:59.810
Client.InsertProduct, you have
this product that you've

00:33:59.810 --> 00:34:02.850
created, this custom product
class, you send your account

00:34:02.850 --> 00:34:06.210
ID to create the URI, and you
send your auth token to sign

00:34:06.210 --> 00:34:08.780
the request. So let's make the
request and print out the

00:34:08.780 --> 00:34:10.090
title of what we've inserted.

00:34:12.750 --> 00:34:13.449
Waiting.

00:34:13.449 --> 00:34:14.370
OK, great.

00:34:14.370 --> 00:34:17.360
So now the 32 gig MP3 player
has been inserted.

00:34:17.360 --> 00:34:19.750
So I was kind of willy-nilly
there, and

00:34:19.750 --> 00:34:20.620
didn't worry about errors.

00:34:20.620 --> 00:34:22.989
So a quick note, we're not going
to actually worry about

00:34:22.989 --> 00:34:24.139
errors in this presentation.

00:34:24.139 --> 00:34:28.590
But in the documentation
there are plenty of

00:34:28.590 --> 00:34:30.760
examples using errors.

00:34:30.760 --> 00:34:35.550
But if you were hoping to catch
errors, there's a custom

00:34:35.550 --> 00:34:38.030
class called
gdata.client.RequestError.

00:34:40.780 --> 00:34:43.380
And you can use a try/except
block to catch these errors.

00:34:43.380 --> 00:34:44.639
So first you'd import
gdata.client.

00:34:47.230 --> 00:34:49.659
You would try to insert the
product as we did in the

00:34:49.659 --> 00:34:55.230
previous code slide, and then
you would catch the error sent

00:34:55.230 --> 00:34:57.930
by this request. The client is
actually going to throw a

00:34:57.930 --> 00:34:59.070
request error.

00:34:59.070 --> 00:35:04.160
And then the request error is
going to be a typical HTTP

00:35:04.160 --> 00:35:05.190
response object.

00:35:05.190 --> 00:35:07.820
It's going to have the headers,
it's going to have

00:35:07.820 --> 00:35:09.960
the URI, and it's going
to have the body.

00:35:09.960 --> 00:35:13.840
So you can actually access the
error response from the

00:35:13.840 --> 00:35:15.110
exception.body.

00:35:15.110 --> 00:35:18.930
So you're catching the request
error, you're aliasing it as

00:35:18.930 --> 00:35:21.735
the variable exception, and
then you can get the error

00:35:21.735 --> 00:35:23.830
response from exception.body,
the body

00:35:23.830 --> 00:35:25.510
attribute on the exception.

00:35:25.510 --> 00:35:27.490
So that's it for errors,
but that's

00:35:27.490 --> 00:35:29.860
something to keep in mind.

00:35:29.860 --> 00:35:32.900
So I showed you how to retrieve
all your products,

00:35:32.900 --> 00:35:34.860
but how do you retrieve
a specific product?

00:35:34.860 --> 00:35:43.600
So recall that an item's
location is based on a

00:35:43.600 --> 00:35:44.830
specific product ID.

00:35:44.830 --> 00:35:48.760
So you have the route URI, your
account ID, a path, a

00:35:48.760 --> 00:35:52.870
projection, and then the
specific product ID, which is

00:35:52.870 --> 00:35:55.400
a colon delimited string made
up of channel, language,

00:35:55.400 --> 00:35:56.630
country, and ID.

00:35:56.630 --> 00:35:59.280
So rather than make you build
all that and worry about

00:35:59.280 --> 00:36:03.590
making the request, the library
really just needs

00:36:03.590 --> 00:36:05.810
product ID, country,
and language.

00:36:05.810 --> 00:36:11.980
So you can also specify the
channel, but the majority of

00:36:11.980 --> 00:36:15.710
products are online, so if the
channel is online, you don't

00:36:15.710 --> 00:36:18.100
need to worry about it.

00:36:18.100 --> 00:36:22.430
So to get the specific product,
you make a similar

00:36:22.430 --> 00:36:26.010
request as before, but instead
of sending a product object,

00:36:26.010 --> 00:36:29.120
we're sending these string's
product ID, country, language,

00:36:29.120 --> 00:36:31.960
and of course, account
ID, and auth token.

00:36:31.960 --> 00:36:38.710
So let's make this request. I
made SKU123 the ID for my 32

00:36:38.710 --> 00:36:39.630
gig player.

00:36:39.630 --> 00:36:41.370
So let's see if we can
actually retrieve it.

00:36:41.370 --> 00:36:45.770
So if all goes well, we should
see that it's been retrieved.

00:36:45.770 --> 00:36:47.240
Wonderful.

00:36:47.240 --> 00:36:54.150
So it's that simple to retrieve
a specific product

00:36:54.150 --> 00:36:55.270
via the client library.

00:36:55.270 --> 00:36:57.240
So now that we've retrieved
it, what if you

00:36:57.240 --> 00:36:59.100
want to update it?

00:36:59.100 --> 00:37:02.700
With the API, you can set an
update request directly to the

00:37:02.700 --> 00:37:05.380
unique URL for the product.

00:37:05.380 --> 00:37:10.220
And you just re-send the product
payload as XML but you

00:37:10.220 --> 00:37:11.310
have some edits.

00:37:11.310 --> 00:37:13.290
So let's say we want to
change the title.

00:37:13.290 --> 00:37:17.200
So I change the title to
32 gig MP3 player with

00:37:17.200 --> 00:37:17.750
headphones.

00:37:17.750 --> 00:37:20.430
I obviously would probably want
to change the description

00:37:20.430 --> 00:37:22.710
and maybe the price and some
other things, but let's say

00:37:22.710 --> 00:37:24.660
I'm just changing the title.

00:37:24.660 --> 00:37:28.360
So once you change everything
you want to change, call the

00:37:28.360 --> 00:37:31.200
update product method
on the client, and

00:37:31.200 --> 00:37:32.220
let's see what happens.

00:37:32.220 --> 00:37:35.140
I'm actually going
to execute this.

00:37:35.140 --> 00:37:40.050
So we have new data in the
product, and the new title, 32

00:37:40.050 --> 00:37:42.890
gigabyte MP3 player
with headphones.

00:37:42.890 --> 00:37:45.220
And finally one last thing
we're going to do on

00:37:45.220 --> 00:37:47.090
individual products, before
we move on to

00:37:47.090 --> 00:37:49.210
batching, is deletes.

00:37:49.210 --> 00:37:54.330
So let's assume we have
this product in hand.

00:37:54.330 --> 00:37:58.180
You make a request to the same
unique URL, but instead of a

00:37:58.180 --> 00:38:02.790
PUT request, you make a DELETE
request to delete the item.

00:38:02.790 --> 00:38:06.310
So one thing that I actually
forgot to mention, when you're

00:38:06.310 --> 00:38:09.990
getting the product before
you're updating, if you want

00:38:09.990 --> 00:38:12.490
to update, you can build the
product the exact same way you

00:38:12.490 --> 00:38:13.100
inserted it.

00:38:13.100 --> 00:38:17.150
However, you need the unique
URL, and so if you see the

00:38:17.150 --> 00:38:20.280
arguments product, account ID,
and auth token to delete

00:38:20.280 --> 00:38:23.710
products, you don't see the
unique URL anywhere.

00:38:23.710 --> 00:38:27.190
Well under the covers, what's
happening is the method is

00:38:27.190 --> 00:38:29.020
inspecting the product object.

00:38:29.020 --> 00:38:31.250
And it's finding the
rel=edit link.

00:38:31.250 --> 00:38:35.540
The rel=edit link is actually
what holds the unique URL.

00:38:35.540 --> 00:38:38.210
So if you're going to build a
product from scratch before

00:38:38.210 --> 00:38:40.350
deleting or before updating,
you need to

00:38:40.350 --> 00:38:42.080
include a rel=edit link.

00:38:42.080 --> 00:38:45.300
If on the other hand, you do is
we did, you just retrieve

00:38:45.300 --> 00:38:48.710
it, then the API will return the
rel=edit link, and you'll

00:38:48.710 --> 00:38:50.370
be all good.

00:38:50.370 --> 00:38:51.640
You'll be copacetic.

00:38:51.640 --> 00:38:55.020
So when you delete, you don't
get a product object back.

00:38:55.020 --> 00:38:58.740
So there's no title that you
receive, and there isn't even

00:38:58.740 --> 00:39:00.390
a body to the response.

00:39:00.390 --> 00:39:04.110
But there is a HTTP code
on the response, and a

00:39:04.110 --> 00:39:04.980
reason for the code.

00:39:04.980 --> 00:39:08.550
So let's delete, and let's hope
we get 200, which means

00:39:08.550 --> 00:39:13.910
all good on the request.
So cool.

00:39:13.910 --> 00:39:16.570
So our status is 200, and
our reason is OK.

00:39:16.570 --> 00:39:20.420
So are our delete response
succeeded.

00:39:20.420 --> 00:39:23.960
So one last thing before I go
into batching are these custom

00:39:23.960 --> 00:39:26.800
parameters like warnings
and dry run.

00:39:26.800 --> 00:39:30.830
It's as simple as specifying
a Python keyword parameter.

00:39:30.830 --> 00:39:33.310
In .NET, it's similar.

00:39:33.310 --> 00:39:36.970
.NET you're setting an attribute
on a query object,

00:39:36.970 --> 00:39:40.010
but it's pretty similar
to this.

00:39:40.010 --> 00:39:42.080
PHP it's also a keyword
argument.

00:39:42.080 --> 00:39:44.210
I don't know off the top off my
head how it's done in Java.

00:39:44.210 --> 00:39:48.000
But it's specified in all
four implementations.

00:39:48.000 --> 00:39:51.950
So you just make your request.
So whatever your operation is,

00:39:51.950 --> 00:39:53.810
insert, update, delete.

00:39:53.810 --> 00:39:55.580
On the products, you send
the product, the

00:39:55.580 --> 00:39:57.150
account ID, and the token.

00:39:57.150 --> 00:40:00.420
And if you want to include the
dry run or warnings query

00:40:00.420 --> 00:40:02.320
parameters, you just said
dry run to true

00:40:02.320 --> 00:40:03.550
or warnings to true.

00:40:03.550 --> 00:40:06.330
These are, like I said, keyword
parameters in Python

00:40:06.330 --> 00:40:09.100
which default to false if
they're not included, and when

00:40:09.100 --> 00:40:11.160
they're false, the parameter's
not added.

00:40:11.160 --> 00:40:12.690
It's just left alone.

00:40:12.690 --> 00:40:14.660
And it's that simple.

00:40:14.660 --> 00:40:15.910
Onto batching.

00:40:15.910 --> 00:40:17.790
This is the last thing I'm
going to talk about.

00:40:17.790 --> 00:40:20.770
If people do want to hear about
multi-client accounts

00:40:20.770 --> 00:40:23.760
and things like that, it is
enabled within the library.

00:40:23.760 --> 00:40:26.460
I just didn't want to go
on forever and ever.

00:40:26.460 --> 00:40:29.980
And I'd be happy to answer
questions after I'm done.

00:40:29.980 --> 00:40:33.460
So to execute a batch request,
every request is

00:40:33.460 --> 00:40:35.230
going to the same URI.

00:40:35.230 --> 00:40:40.320
This URI is the root URI, the
account ID, the path, items,

00:40:40.320 --> 00:40:42.270
products, the projection
schema.

00:40:42.270 --> 00:40:45.260
And then instead of a unique ID
for a product, you're just

00:40:45.260 --> 00:40:46.940
posting to batch.

00:40:46.940 --> 00:40:50.720
You could also use warnings
and dry run with batch, so

00:40:50.720 --> 00:40:51.990
keep that in mind.

00:40:51.990 --> 00:40:58.210
But this does make the API not
completely restful because you

00:40:58.210 --> 00:41:03.270
can actually send updates and
deletes and other things all

00:41:03.270 --> 00:41:08.700
in the same requests, which is
not really how rest works.

00:41:08.700 --> 00:41:10.450
But enough of that.

00:41:10.450 --> 00:41:14.410
So what you're going to send in
a batch request is the same

00:41:14.410 --> 00:41:18.430
thing you received when you got
all of your products, and

00:41:18.430 --> 00:41:21.570
that is an atom feed
XML element.

00:41:21.570 --> 00:41:26.430
And the products in that feed
element are going to be a list

00:41:26.430 --> 00:41:28.440
of atom entries.

00:41:28.440 --> 00:41:33.040
And in order to include them in
a batch request, you need

00:41:33.040 --> 00:41:35.020
to actually include
a batch operation.

00:41:35.020 --> 00:41:36.750
So for the inserts,
&lt;batch:operation

00:41:36.750 --> 00:41:39.457
type="insert"&gt;, for the deletes,
&lt;batch:operation

00:41:39.457 --> 00:41:40.940
type="delete"&gt;.

00:41:40.940 --> 00:41:42.900
Et cetera, you get it.

00:41:42.900 --> 00:41:47.900
And a few other things, like I
said, for delete and update on

00:41:47.900 --> 00:41:49.870
the individual request,
you need the

00:41:49.870 --> 00:41:53.080
rel=edit for them to succeed.

00:41:53.080 --> 00:41:57.870
Well that's true for update
request, but for delete

00:41:57.870 --> 00:42:03.120
requests, you actually need to
set atom ID element with that

00:42:03.120 --> 00:42:05.920
unique URL for the product.

00:42:05.920 --> 00:42:08.480
And actually batch deletes,
you don't need any of the

00:42:08.480 --> 00:42:10.300
other product data, you just
need &lt;batch:operation

00:42:10.300 --> 00:42:12.460
type="delete"&gt; and
you need that ID.

00:42:12.460 --> 00:42:20.950
Because as a parallel to
the single request,

00:42:20.950 --> 00:42:21.860
what we really using?

00:42:21.860 --> 00:42:24.100
We're really using the URI.

00:42:24.100 --> 00:42:28.040
And the fact that we're deleting
comes from the HTTP

00:42:28.040 --> 00:42:28.800
verb delete.

00:42:28.800 --> 00:42:31.700
Whereas here, since we're in a
batch request, we need another

00:42:31.700 --> 00:42:34.240
way to specify that verb, but
we really only needed those

00:42:34.240 --> 00:42:36.550
two pieces.

00:42:36.550 --> 00:42:38.600
So let's do a batch insert.

00:42:38.600 --> 00:42:41.990
So product one is some
new product.

00:42:41.990 --> 00:42:44.460
We're going to say it's
32 gig MP3 player.

00:42:44.460 --> 00:42:46.400
Product two, some
other product.

00:42:46.400 --> 00:42:49.330
It has 64 gigs, so it has some
other specs, different price,

00:42:49.330 --> 00:42:51.710
different description,
et cetera.

00:42:51.710 --> 00:42:55.160
So we throw those into a Python
list. Product one and

00:42:55.160 --> 00:42:59.270
product two into a list. And
we just use that to make a

00:42:59.270 --> 00:43:02.060
request like we were doing
before with single products.

00:43:02.060 --> 00:43:06.330
And wrapping them up as entries
into a feed element,

00:43:06.330 --> 00:43:09.120
holding all the entries, is just
done under the covers by

00:43:09.120 --> 00:43:09.900
the client library.

00:43:09.900 --> 00:43:12.220
And this is essentially how
it's done with all four

00:43:12.220 --> 00:43:13.780
implementations.

00:43:13.780 --> 00:43:17.240
So we get a feed back by calling
insert products on the

00:43:17.240 --> 00:43:20.460
client with this products list.
And again, obviously we

00:43:20.460 --> 00:43:22.900
need the account ID to
construct the URI.

00:43:22.900 --> 00:43:25.890
And we need a token to sign the
request. So let's make the

00:43:25.890 --> 00:43:27.400
request, and print the title of

00:43:27.400 --> 00:43:29.140
everything that's been inserted.

00:43:29.140 --> 00:43:31.140
Just to make sure
this code works.

00:43:31.140 --> 00:43:33.010
So this is actually
running this code.

00:43:33.010 --> 00:43:33.870
Great.

00:43:33.870 --> 00:43:34.890
So they've been inserted.

00:43:34.890 --> 00:43:36.860
So what if we want to update?

00:43:36.860 --> 00:43:41.050
So like I said before, when
you're making updates and

00:43:41.050 --> 00:43:43.230
you're making deletes, you
need the rel=edit link.

00:43:43.230 --> 00:43:46.370
So you can either construct it
yourself, or you can use

00:43:46.370 --> 00:43:49.090
client.product or some other
method to somehow

00:43:49.090 --> 00:43:50.210
obtain these products.

00:43:50.210 --> 00:43:53.080
So let's say we already have
everything set that

00:43:53.080 --> 00:43:54.460
we need to be set.

00:43:54.460 --> 00:43:55.660
And let's update them.

00:43:55.660 --> 00:43:58.560
So the first product, we're
going to make the same edit we

00:43:58.560 --> 00:43:59.970
made in the previous slide.

00:43:59.970 --> 00:44:02.280
We're just going to add
headphones to the product.

00:44:02.280 --> 00:44:04.500
In the second one, we're
going to add five

00:44:04.500 --> 00:44:05.790
gigs of free music.

00:44:05.790 --> 00:44:08.460
Great.

00:44:08.460 --> 00:44:11.110
From there, it's pretty
much exactly like the

00:44:11.110 --> 00:44:12.860
client.InsertProducts call.

00:44:12.860 --> 00:44:15.630
You throw the products into
a list, and you call

00:44:15.630 --> 00:44:17.080
UpdateProducts.

00:44:17.080 --> 00:44:19.670
So let's execute this and
make sure it works.

00:44:23.690 --> 00:44:25.170
That took a little longer.

00:44:25.170 --> 00:44:25.920
Fantastic.

00:44:25.920 --> 00:44:29.950
So our request works, everything
is awesome.

00:44:33.350 --> 00:44:34.860
In the Merchant Center,
your products have

00:44:34.860 --> 00:44:36.110
been completely updated.

00:44:38.560 --> 00:44:43.630
So I want to do side channel
check, just to make sure that

00:44:43.630 --> 00:44:45.230
the updates are actually
going through.

00:44:45.230 --> 00:44:47.890
We're just going to do a quick
retrieve of all my items. So

00:44:47.890 --> 00:44:50.390
we've already done this before,
many slides ago.

00:44:50.390 --> 00:44:52.320
I'm not going to repeat
what's happening.

00:44:52.320 --> 00:44:55.540
Essentially, we call, get
products, and we print out the

00:44:55.540 --> 00:44:56.550
list of all our products.

00:44:56.550 --> 00:44:58.770
The time we executed before,
there were no products.

00:44:58.770 --> 00:45:02.160
But let's see what's in our
inventory irrespective of an

00:45:02.160 --> 00:45:06.280
insert or update request.

00:45:06.280 --> 00:45:09.700
Here we have it, the titles
we expect to have. Great.

00:45:09.700 --> 00:45:11.290
And the last batch operation
which you

00:45:11.290 --> 00:45:13.520
can make is a delete.

00:45:13.520 --> 00:45:16.510
Similarly as with updates, you
need to somehow obtain the

00:45:16.510 --> 00:45:19.000
products, but like I said
before, you really only need

00:45:19.000 --> 00:45:21.640
to set the atom ID and
the batch operation.

00:45:21.640 --> 00:45:23.920
And setting the batch operation
is done under the

00:45:23.920 --> 00:45:28.330
covers by InsertProducts,
by DeleteProducts, by

00:45:28.330 --> 00:45:29.210
UpdateProducts.

00:45:29.210 --> 00:45:30.640
So you don't even need
to worry about that.

00:45:30.640 --> 00:45:33.550
You really just need to worry
about setting the atom ID.

00:45:33.550 --> 00:45:36.010
So that's what the first two
lines are going to do here.

00:45:36.010 --> 00:45:39.770
So we're going to explicitly set
the ID attribute on each

00:45:39.770 --> 00:45:46.050
product with an atom.data.Id
object that uses hyper ref

00:45:46.050 --> 00:45:47.990
from the edit link
of the product.

00:45:47.990 --> 00:45:52.230
So product1.get_edit_link, it's
a method that just spits

00:45:52.230 --> 00:45:54.470
out the edit link.

00:45:54.470 --> 00:45:58.870
And then we're going to use the
ref string attribute to

00:45:58.870 --> 00:46:04.710
actually recover the string of
the unique URL describing

00:46:04.710 --> 00:46:05.510
product one.

00:46:05.510 --> 00:46:07.890
Similarly for product two, we
do the exact same thing,

00:46:07.890 --> 00:46:10.250
except we're calling
product2.get_edit_link instead

00:46:10.250 --> 00:46:12.430
of product one.

00:46:12.430 --> 00:46:15.660
And just like with updates and
inserts, we're throwing them

00:46:15.660 --> 00:46:18.090
into a list and sending
it off.

00:46:18.090 --> 00:46:21.890
So again, as with the individual
deletes, we don't

00:46:21.890 --> 00:46:24.900
really care about the product
data, but we get it.

00:46:24.900 --> 00:46:27.060
But we would like to know
the batch status.

00:46:27.060 --> 00:46:30.850
We want to know if we got a 200,
and we want to know if we

00:46:30.850 --> 00:46:32.880
didn't, what the reason
is that we didn't.

00:46:32.880 --> 00:46:35.910
So let's delete these.

00:46:35.910 --> 00:46:37.010
Awesome.

00:46:37.010 --> 00:46:38.910
200 success on both of them.

00:46:38.910 --> 00:46:40.330
So they're both deleted.

00:46:40.330 --> 00:46:43.730
And then finally one last
retrieval of all my products

00:46:43.730 --> 00:46:45.030
to make sure nothing
is in there.

00:46:48.130 --> 00:46:49.690
There's nothing in there.

00:46:49.690 --> 00:46:50.810
OK.

00:46:50.810 --> 00:46:51.550
That's it.

00:46:51.550 --> 00:46:53.850
Thank you for watching this.

00:46:53.850 --> 00:46:55.530
Thank you for coming.

