WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.297
[MUSIC PLAYING]

00:00:04.239 --> 00:00:06.220
DOMINIC HAMON: Good morning.

00:00:06.220 --> 00:00:10.440
Welcome to this incredibly
early Thursday morning slot.

00:00:10.440 --> 00:00:12.790
We traded a lot of
favors to get this slot,

00:00:12.790 --> 00:00:16.350
so it's really nice to see
so many of you out here.

00:00:16.350 --> 00:00:18.150
For those of you as
well on the Livestream

00:00:18.150 --> 00:00:19.692
and watching the
recording, thank you

00:00:19.692 --> 00:00:22.120
for giving us your time as well.

00:00:22.120 --> 00:00:23.160
My name is Dominic.

00:00:23.160 --> 00:00:26.668
I'm an engineering manager
on the Google Play Console.

00:00:26.668 --> 00:00:28.210
DOM ELLIOTT: My name
is also Dominic.

00:00:28.210 --> 00:00:31.320
I'm product manager for
the Android App Bundle.

00:00:31.320 --> 00:00:34.120
My fun fact is this is
the fifth Google I/O

00:00:34.120 --> 00:00:37.510
I've worked on but the first
time I've presented a session,

00:00:37.510 --> 00:00:38.898
so I am very excited to be here.

00:00:38.898 --> 00:00:40.440
VITOR BACCETTI: And
my name is Vitor.

00:00:40.440 --> 00:00:41.940
I'm a product manager
at Google Play

00:00:41.940 --> 00:00:44.340
working on increasing your
app install success and update

00:00:44.340 --> 00:00:45.090
rate.

00:00:45.090 --> 00:00:46.298
PIERRE LECESNE: Hi, everyone.

00:00:46.298 --> 00:00:48.510
My name is Pierre, and
I'm an engineering manager

00:00:48.510 --> 00:00:51.290
on the Android App Bundle
and Dynamic Delivery.

00:00:51.290 --> 00:00:52.710
DOMINIC HAMON: Great.

00:00:52.710 --> 00:00:54.570
So the focus of this
session is going

00:00:54.570 --> 00:00:57.180
to be to introduce you
to some of the tools

00:00:57.180 --> 00:01:00.780
that you can use to optimize
your app size and boost

00:01:00.780 --> 00:01:02.730
acquisitions.

00:01:02.730 --> 00:01:05.370
We're going to split the
session into three parts.

00:01:05.370 --> 00:01:07.190
First, I'm going to
talk a little bit

00:01:07.190 --> 00:01:10.400
about the factors that
impact your app's install

00:01:10.400 --> 00:01:12.475
success rate on Google Play.

00:01:12.475 --> 00:01:14.600
Then I'm going to hand over
to my colleague, Vitor,

00:01:14.600 --> 00:01:16.350
who's going to talk
about some of the work

00:01:16.350 --> 00:01:18.800
that we do in the
background on Google Play

00:01:18.800 --> 00:01:20.990
to help your install
success rate.

00:01:20.990 --> 00:01:23.930
And then finally, we'll
hand over to Dom and Pierre,

00:01:23.930 --> 00:01:26.900
who are going to walk through
what you can do on your side

00:01:26.900 --> 00:01:28.940
to help your
install success rate

00:01:28.940 --> 00:01:33.290
and the tooling that we have
that can support you in that.

00:01:33.290 --> 00:01:36.820
So to set some
context, in 2018, we

00:01:36.820 --> 00:01:40.030
delivered a hundred billion
installations to our users.

00:01:40.030 --> 00:01:42.280
That's about 8 billion a month.

00:01:42.280 --> 00:01:44.830
Now, that works out when we
look at the amount of data

00:01:44.830 --> 00:01:47.830
as 22 exabytes of data.

00:01:47.830 --> 00:01:48.880
That's a lot.

00:01:48.880 --> 00:01:51.610
That's 22 trillion gigabytes.

00:01:51.610 --> 00:01:54.190
And I know we're playing
big number bingo here,

00:01:54.190 --> 00:01:56.560
so I want to try and bring
that back to something

00:01:56.560 --> 00:01:58.280
more concrete.

00:01:58.280 --> 00:02:02.770
So in 2005, the global
traffic on the internet

00:02:02.770 --> 00:02:06.490
was 22 exabytes, and that's
the year that YouTube launched.

00:02:06.490 --> 00:02:09.130
So we like to think of this,
that the Google Play app

00:02:09.130 --> 00:02:11.740
distribution network
last year was the size

00:02:11.740 --> 00:02:14.440
of the internet back in 2005.

00:02:14.440 --> 00:02:17.350
So this is why we care
about the amount of data

00:02:17.350 --> 00:02:20.690
that we end up
delivering to users.

00:02:20.690 --> 00:02:23.940
Now, what drives your
install success rate?

00:02:23.940 --> 00:02:26.440
There are millions of users
that come through the Play Store

00:02:26.440 --> 00:02:28.430
looking for apps to install.

00:02:28.430 --> 00:02:31.450
And they might be searching for
your app, they might see ads,

00:02:31.450 --> 00:02:33.370
or they might get
a recommendation.

00:02:33.370 --> 00:02:35.380
Either way, at some
point, they end up

00:02:35.380 --> 00:02:37.490
on your app listing page.

00:02:37.490 --> 00:02:38.992
They're going to
read the reviews,

00:02:38.992 --> 00:02:41.200
they're going to look at
the screenshots, the videos,

00:02:41.200 --> 00:02:43.030
your store listing,
and hopefully

00:02:43.030 --> 00:02:45.790
they'll make the decision to
click that install button.

00:02:45.790 --> 00:02:47.800
But that is not the
end of the story.

00:02:47.800 --> 00:02:51.370
That is not an acquisition until
that app has been downloaded

00:02:51.370 --> 00:02:53.760
and installed onto the device.

00:02:53.760 --> 00:02:56.270
There is a lot that can happen
between those two steps.

00:02:56.270 --> 00:02:59.030
Let's take a look
at some of them.

00:02:59.030 --> 00:03:01.670
When we looked at
our data, we found

00:03:01.670 --> 00:03:04.760
that 30% of the time,
that installation

00:03:04.760 --> 00:03:06.840
doesn't fully complete.

00:03:06.840 --> 00:03:10.430
So that means that
a third of the time

00:03:10.430 --> 00:03:12.470
that a user decides
to install your app,

00:03:12.470 --> 00:03:15.710
they don't end up with
it on your device.

00:03:15.710 --> 00:03:17.350
So what happens?

00:03:17.350 --> 00:03:20.410
And what can we do
to improve this?

00:03:20.410 --> 00:03:22.750
Turns out, when we look into
it, that there are three

00:03:22.750 --> 00:03:25.470
main reasons for this drop-off.

00:03:25.470 --> 00:03:28.820
There's the internal
free space on the device,

00:03:28.820 --> 00:03:32.940
there's the time it takes
to download the app,

00:03:32.940 --> 00:03:35.690
and there's the cost
of the data involved.

00:03:35.690 --> 00:03:38.520
I'm going to go into each
of these in more detail.

00:03:38.520 --> 00:03:40.650
So first, space.

00:03:40.650 --> 00:03:43.350
This is not just a problem
for emerging markets,

00:03:43.350 --> 00:03:45.300
the internal free
storage on devices.

00:03:45.300 --> 00:03:48.020
This is a problem that we see
across North America, Europe--

00:03:48.020 --> 00:03:49.610
everywhere that we look.

00:03:49.610 --> 00:03:51.410
And what we've
seen in our data is

00:03:51.410 --> 00:03:55.070
that out of our over 2 billion
users, a third of them--

00:03:55.070 --> 00:04:01.290
28%-- have less than one gig
of free internal free space.

00:04:01.290 --> 00:04:03.830
Now, how does that
affect your users?

00:04:03.830 --> 00:04:07.290
Well, when the user
tries to install an app,

00:04:07.290 --> 00:04:09.200
the Play Store will
determine if there's

00:04:09.200 --> 00:04:12.540
enough free space for that
installation on the device.

00:04:12.540 --> 00:04:14.420
And if we determine
that there's not,

00:04:14.420 --> 00:04:16.370
we won't download that app.

00:04:16.370 --> 00:04:18.800
We won't waste the user's data.

00:04:18.800 --> 00:04:21.560
What we will do though is
pop up an Uninstall Wizard

00:04:21.560 --> 00:04:24.800
that encourages the user
to free up some space.

00:04:24.800 --> 00:04:27.500
Now, it's possible that
the user won't be able to

00:04:27.500 --> 00:04:29.570
or won't want to
remove some of the apps

00:04:29.570 --> 00:04:32.060
that they have to make
room for your app.

00:04:32.060 --> 00:04:34.700
And Vitor is going to talk a
little bit later on about some

00:04:34.700 --> 00:04:36.600
of the improvements that
we've made to the Uninstall

00:04:36.600 --> 00:04:38.100
Wizard and some of
the ramifications

00:04:38.100 --> 00:04:40.620
that that can have.

00:04:40.620 --> 00:04:42.720
The second issue is time.

00:04:42.720 --> 00:04:44.620
Now, it's fairly
obvious, I think,

00:04:44.620 --> 00:04:46.890
that the larger your
app download size,

00:04:46.890 --> 00:04:49.770
the longer it takes
to download that app.

00:04:49.770 --> 00:04:51.870
What may be slightly
less obvious

00:04:51.870 --> 00:04:53.880
is how impatient
some of your users

00:04:53.880 --> 00:04:55.970
might be with the time it takes.

00:04:55.970 --> 00:04:59.310
And what we see is, the
larger the app download size,

00:04:59.310 --> 00:05:01.320
the more potential
there is for the user

00:05:01.320 --> 00:05:03.120
to cancel that download.

00:05:03.120 --> 00:05:06.310
And similarly, the longer it
takes to download your app,

00:05:06.310 --> 00:05:08.610
the more chance there is
that the user is either

00:05:08.610 --> 00:05:10.530
going to have a
network error or is

00:05:10.530 --> 00:05:13.470
going to move out of their
coverage and, in either case,

00:05:13.470 --> 00:05:17.410
will end up erroring out and
not getting the download.

00:05:17.410 --> 00:05:19.930
The third thing we
talked about is cost.

00:05:19.930 --> 00:05:24.340
So we take for granted Wi-Fi
or practically unlimited data

00:05:24.340 --> 00:05:27.160
plans, but that is not
the case for the majority

00:05:27.160 --> 00:05:29.020
of our users around the world.

00:05:29.020 --> 00:05:32.060
And the cost of their
data can be significant.

00:05:32.060 --> 00:05:33.730
So when they try to
download your app,

00:05:33.730 --> 00:05:36.790
when they see how much data it's
going to take to download it,

00:05:36.790 --> 00:05:40.520
many of them will immediately
cancel that download.

00:05:40.520 --> 00:05:44.943
So we have space, we have
time, and we have cost.

00:05:44.943 --> 00:05:46.610
But we wanted to go
a little bit further

00:05:46.610 --> 00:05:48.915
than just finding out why
things were not completing,

00:05:48.915 --> 00:05:50.540
and we wanted to come
up with something

00:05:50.540 --> 00:05:53.730
a little bit more quantifiable
to share with you today.

00:05:53.730 --> 00:05:58.220
So we developed a model
that maps the size reduction

00:05:58.220 --> 00:06:02.060
or increase of your app download
with the eventual install

00:06:02.060 --> 00:06:03.450
success rate.

00:06:03.450 --> 00:06:05.240
And what we found
out from our model

00:06:05.240 --> 00:06:07.250
is that for every
three megs that you

00:06:07.250 --> 00:06:09.590
can save on your
download size, you'll

00:06:09.590 --> 00:06:13.580
get a 1% increase in
install success rate.

00:06:13.580 --> 00:06:17.630
Or, to put it another way,
every feature that you

00:06:17.630 --> 00:06:21.500
add to your app that increases
the size of the download

00:06:21.500 --> 00:06:27.530
will have to be traded off with
the eventual acquisition loss.

00:06:27.530 --> 00:06:30.920
So there's a few other ways
in which size can affect

00:06:30.920 --> 00:06:32.900
your install success rate.

00:06:32.900 --> 00:06:34.670
What I'd like to do
now is to hand over

00:06:34.670 --> 00:06:36.890
to Vitor, who can talk
through some of the things

00:06:36.890 --> 00:06:38.690
that we've been doing
in the background

00:06:38.690 --> 00:06:40.710
and how that can help.

00:06:40.710 --> 00:06:42.260
VITOR BACCETTI:
Thank you, Dominic.

00:06:42.260 --> 00:06:43.040
So, great.

00:06:43.040 --> 00:06:46.580
So let's start talking now
about how Google Play can help

00:06:46.580 --> 00:06:49.610
you to make even better
performance and things

00:06:49.610 --> 00:06:51.670
that we can do
automatically for you.

00:06:51.670 --> 00:06:53.240
You may be wondering,
first, why were

00:06:53.240 --> 00:06:54.823
we talking about
these things that are

00:06:54.823 --> 00:06:56.780
automatic if it's automatic?

00:06:56.780 --> 00:07:00.110
Well, we are talking about
this so that you as a developer

00:07:00.110 --> 00:07:02.960
can have an end-to-end
view of the entire funnel

00:07:02.960 --> 00:07:05.180
and, knowing that,
optimize your app

00:07:05.180 --> 00:07:07.157
to work better within
this architecture.

00:07:07.157 --> 00:07:08.990
And we will point out
a few different things

00:07:08.990 --> 00:07:12.080
that we do that you can
actually work with and perform

00:07:12.080 --> 00:07:13.380
even better.

00:07:13.380 --> 00:07:15.710
So we will talk about
five features today.

00:07:15.710 --> 00:07:19.700
We will start talking about
one for space, two for time,

00:07:19.700 --> 00:07:21.420
and then two for cost.

00:07:21.420 --> 00:07:21.920
Great.

00:07:21.920 --> 00:07:25.250
So let's jump straight
ahead and talk about space.

00:07:25.250 --> 00:07:28.010
As Dominic was saying,
space is a huge barrier.

00:07:28.010 --> 00:07:30.908
So out of there, we
have 3 out of 10 users

00:07:30.908 --> 00:07:32.200
that don't have a ton of space.

00:07:32.200 --> 00:07:34.550
They only have
one gigabyte left.

00:07:34.550 --> 00:07:38.242
So even if cost is not an issue,
even if time is not an issue,

00:07:38.242 --> 00:07:39.950
we know that these
users might simply not

00:07:39.950 --> 00:07:42.380
be able to install your
app, and that's a shame.

00:07:42.380 --> 00:07:44.210
So what we do here
is we have a feature

00:07:44.210 --> 00:07:46.700
called the Uninstall Wizard,
that you can see here

00:07:46.700 --> 00:07:50.090
on the screen, that saves users
to help them to free up space,

00:07:50.090 --> 00:07:52.160
show how much space
they need to free up,

00:07:52.160 --> 00:07:54.210
and gives a few options.

00:07:54.210 --> 00:07:57.583
We have actually improved this
feature quite a bit in 2019,

00:07:57.583 --> 00:07:59.750
as measured by what we call
the recovery rate, which

00:07:59.750 --> 00:08:02.210
is how many users are
able to use this dialogue

00:08:02.210 --> 00:08:04.700
and actually proceed
to the installation.

00:08:04.700 --> 00:08:05.730
What did we do?

00:08:05.730 --> 00:08:09.500
One, we changed the UI so
that it's much easier to use.

00:08:09.500 --> 00:08:11.693
So we highlight the
relevant information,

00:08:11.693 --> 00:08:13.610
we highlight how much
space needs to be clear.

00:08:13.610 --> 00:08:16.100
It's easier to select and
easy to find these apps,

00:08:16.100 --> 00:08:19.400
and we have seen a big change in
performance as a result. Next,

00:08:19.400 --> 00:08:22.680
we also changed the ranking
so that we highlight apps--

00:08:22.680 --> 00:08:24.990
their large apps
that are not used--

00:08:24.990 --> 00:08:28.940
and users can easily find
them, so success rate improves.

00:08:28.940 --> 00:08:33.390
Why this matters-- one, as
this feature becomes better,

00:08:33.390 --> 00:08:34.700
it helps you guys.

00:08:34.700 --> 00:08:37.520
It's something that actually
becomes even more successful

00:08:37.520 --> 00:08:39.260
when you get more installs.

00:08:39.260 --> 00:08:42.289
Two, as to improve
this feature too,

00:08:42.289 --> 00:08:45.230
large apps are more
likely to be uninstalled.

00:08:45.230 --> 00:08:47.630
So that's actually something
that you should think about.

00:08:47.630 --> 00:08:49.320
Because if your
app is larger, you

00:08:49.320 --> 00:08:51.440
will suffer more
with uninstalls.

00:08:51.440 --> 00:08:53.103
And as Dom and Pierre
will talk later,

00:08:53.103 --> 00:08:54.770
there are a lot of
tools that we provide

00:08:54.770 --> 00:08:58.520
for you that help you to monitor
this and understand how we can

00:08:58.520 --> 00:09:01.350
actually make our apps smaller.

00:09:01.350 --> 00:09:03.890
So now let's talk about time.

00:09:03.890 --> 00:09:07.340
So time is an issue because
people are impatient.

00:09:07.340 --> 00:09:09.210
People have a lot
of things going on.

00:09:09.210 --> 00:09:11.960
People don't want to be waiting
at a screen for something

00:09:11.960 --> 00:09:12.830
to load.

00:09:12.830 --> 00:09:16.320
They want to just be playing
the game or using a new app.

00:09:16.320 --> 00:09:19.340
And people can so--
that's just what happens.

00:09:19.340 --> 00:09:22.520
What we can do here is we
can make the artifacts,

00:09:22.520 --> 00:09:24.410
make the APKs smaller.

00:09:24.410 --> 00:09:26.480
And we do that
using compression.

00:09:26.480 --> 00:09:29.480
For new installs, we
automatically, on average,

00:09:29.480 --> 00:09:33.463
make 10% reductions on the
size that was submitted to us,

00:09:33.463 --> 00:09:34.880
and that's something
that's great.

00:09:34.880 --> 00:09:37.550
It just helps you without
anything different.

00:09:37.550 --> 00:09:41.280
And for updates, the improvement
is even more dramatic.

00:09:41.280 --> 00:09:43.100
We use patching,
comparing the version that

00:09:43.100 --> 00:09:45.710
is available on the device
versus the version that

00:09:45.710 --> 00:09:46.940
is going to be downloaded.

00:09:46.940 --> 00:09:50.150
And when we do that, we actually
reduce the total APK size

00:09:50.150 --> 00:09:52.290
download by 85%.

00:09:52.290 --> 00:09:53.990
So updates are much
smaller and much

00:09:53.990 --> 00:09:56.720
more likely to be successful.

00:09:56.720 --> 00:09:59.900
And one thing here that you can
do as a developer to help us

00:09:59.900 --> 00:10:02.840
is related to uncompressed
native libraries.

00:10:02.840 --> 00:10:05.990
Because of compression, if
the library is uncompressed,

00:10:05.990 --> 00:10:07.470
our compression works better.

00:10:07.470 --> 00:10:09.800
So we can make things
smaller and, especially, we

00:10:09.800 --> 00:10:12.680
can make the updates smaller.

00:10:12.680 --> 00:10:15.140
So talking about
native libraries,

00:10:15.140 --> 00:10:17.570
this is something new that
we are announcing here today,

00:10:17.570 --> 00:10:19.200
and we're really excited.

00:10:19.200 --> 00:10:21.740
It's a feature that is being
used for Google Play Instant,

00:10:21.740 --> 00:10:23.400
which is instant games.

00:10:23.400 --> 00:10:25.670
So you may go to the
app listing page,

00:10:25.670 --> 00:10:28.100
and you see a button
saying Try Now.

00:10:28.100 --> 00:10:31.340
That button allows you to click
and easily play a game really

00:10:31.340 --> 00:10:34.635
fast or use an app without
something different.

00:10:34.635 --> 00:10:38.150
And in that situation,
Try Now, it's now.

00:10:38.150 --> 00:10:40.290
You need to make
this really fast.

00:10:40.290 --> 00:10:43.400
And this is really important
so that it's really small.

00:10:43.400 --> 00:10:45.210
How we can do this--

00:10:45.210 --> 00:10:48.080
we were looking at a few
options, and what we notice is,

00:10:48.080 --> 00:10:50.640
apps actually have a
lot of shared content.

00:10:50.640 --> 00:10:53.540
So on this slide here, you
can see a few different boxes.

00:10:53.540 --> 00:10:56.330
You have gray boxes, which
are actually content that

00:10:56.330 --> 00:10:57.990
is specific to each app.

00:10:57.990 --> 00:11:01.700
So in the example, game A and
game B, they might be assets.

00:11:01.700 --> 00:11:02.640
They might be sounds.

00:11:02.640 --> 00:11:05.030
They're the things that
make the game unique.

00:11:05.030 --> 00:11:08.750
Then you have these blue
boxes, which are a game engine.

00:11:08.750 --> 00:11:11.420
A game engine is actually
something that a lot of people

00:11:11.420 --> 00:11:12.000
use.

00:11:12.000 --> 00:11:15.170
There are a few of them,
and some are very popular.

00:11:15.170 --> 00:11:17.540
And they're pretty
much in a lot of games.

00:11:17.540 --> 00:11:20.210
And why should we be downloading
this thing over and over

00:11:20.210 --> 00:11:24.360
again if we may already have
something on the device?

00:11:24.360 --> 00:11:28.120
Now, until recently, we
didn't do this, actually.

00:11:28.120 --> 00:11:30.410
Everything was like a black box.

00:11:30.410 --> 00:11:33.550
We really would, thus, know
that this same member download

00:11:33.550 --> 00:11:36.520
game A, game B, without
knowing the difference

00:11:36.520 --> 00:11:39.323
between this content
inside each APK.

00:11:39.323 --> 00:11:40.740
What we could do
that is something

00:11:40.740 --> 00:11:42.750
much different and
much more interesting

00:11:42.750 --> 00:11:47.040
is we could tell that
this user is a gamer.

00:11:47.040 --> 00:11:49.500
This user has Wi-Fi, so
data is not such a big issue

00:11:49.500 --> 00:11:50.790
for these folks.

00:11:50.790 --> 00:11:54.000
And then what we can do
is we prefetch a library,

00:11:54.000 --> 00:11:55.590
and we keep it on a cache.

00:11:55.590 --> 00:11:58.530
And then, when we go and
click on Try Now, what happens

00:11:58.530 --> 00:12:02.070
is we download only the
specific game assets,

00:12:02.070 --> 00:12:04.410
and we reassemble
the APK on the device

00:12:04.410 --> 00:12:06.570
so that the download
size is much smaller,

00:12:06.570 --> 00:12:09.980
and the user can jump into
the experience much faster.

00:12:09.980 --> 00:12:11.730
In this pilot with
Instant Games,

00:12:11.730 --> 00:12:15.390
we are seeing savings of
up to 40% in download size,

00:12:15.390 --> 00:12:18.450
which is massive and should make
a huge difference in conversion

00:12:18.450 --> 00:12:21.490
and engagement with these games.

00:12:21.490 --> 00:12:24.600
So jumping now into cost.

00:12:24.600 --> 00:12:28.710
So cost is something that is
really easy for us to forget.

00:12:28.710 --> 00:12:31.110
Because, well, if we're
watching this on the Livestream

00:12:31.110 --> 00:12:33.023
or if you're here
at I/O with Wi-Fi,

00:12:33.023 --> 00:12:34.440
we don't think
about these things.

00:12:34.440 --> 00:12:36.180
You are streaming
a lot of megabytes

00:12:36.180 --> 00:12:39.312
and not really thinking about
how much are we consuming data.

00:12:39.312 --> 00:12:41.020
But a lot of users
don't think like that,

00:12:41.020 --> 00:12:42.395
and they have
limited data plans,

00:12:42.395 --> 00:12:46.060
and they need to be very
careful with every megabyte.

00:12:46.060 --> 00:12:49.173
This leads to different
behaviors in these markets.

00:12:49.173 --> 00:12:51.090
One thing that people
do which is very popular

00:12:51.090 --> 00:12:52.560
are peer-to-peer applications.

00:12:52.560 --> 00:12:54.570
And you can find them
in the Play Store.

00:12:54.570 --> 00:12:55.980
There are a bunch of them.

00:12:55.980 --> 00:12:58.860
And how it works is you
have, for example, your phone

00:12:58.860 --> 00:13:00.480
and a phone from
a friend, and you

00:13:00.480 --> 00:13:03.090
create automatically
a Wi-Fi connection,

00:13:03.090 --> 00:13:06.120
a local Wi-Fi connection,
and then transfer files

00:13:06.120 --> 00:13:08.790
so that there's no cost,
and this works offline.

00:13:08.790 --> 00:13:10.950
And this is something
that users love.

00:13:10.950 --> 00:13:14.100
Well, people don't do this only
with files like music, videos,

00:13:14.100 --> 00:13:15.180
and things like that.

00:13:15.180 --> 00:13:17.190
They also do it with apps.

00:13:17.190 --> 00:13:19.380
And there a lot of
problems with that.

00:13:19.380 --> 00:13:21.780
Security, we don't know the
[INAUDIBLE] the provenance

00:13:21.780 --> 00:13:23.970
of this, might know
if not compatible,

00:13:23.970 --> 00:13:26.490
and that's actually
quite dangerous.

00:13:26.490 --> 00:13:29.580
We actually solved this
problem by creating a new API

00:13:29.580 --> 00:13:32.910
that was launched at the end of
last year to fix exactly this

00:13:32.910 --> 00:13:35.130
and that P2P apps can integrate.

00:13:35.130 --> 00:13:38.880
What it does is they
check the APK to make sure

00:13:38.880 --> 00:13:41.200
that it's actually a Play APK.

00:13:41.200 --> 00:13:43.580
Two, it actually makes
sure that this APK

00:13:43.580 --> 00:13:45.480
is compatible with
this other device

00:13:45.480 --> 00:13:47.400
so that the transfer just works.

00:13:47.400 --> 00:13:49.100
And three, we also
make sure that we

00:13:49.100 --> 00:13:53.400
add to the user library, so
updates, metrics for developers

00:13:53.400 --> 00:13:54.540
like you guys.

00:13:54.540 --> 00:13:56.940
You find everything
in the console later,

00:13:56.940 --> 00:13:58.440
and that's great.

00:13:58.440 --> 00:14:02.130
So that's something that is
new, and it's pretty exciting.

00:14:02.130 --> 00:14:05.010
Then, the last thing,
we'll talk about cost.

00:14:05.010 --> 00:14:07.410
This is a pilot that's coming
up soon in a few markets,

00:14:07.410 --> 00:14:09.670
so you should hear
more about it,

00:14:09.670 --> 00:14:12.250
which is a pilot in
partnership with local carriers

00:14:12.250 --> 00:14:14.190
or local mobile operators.

00:14:14.190 --> 00:14:17.730
How it works is a carrier
can offer mobile data

00:14:17.730 --> 00:14:22.520
at no cost for downloads,
installs, browsing the stores,

00:14:22.520 --> 00:14:25.270
clicking on screenshots,
and all these things.

00:14:25.270 --> 00:14:28.320
So if the user is one of these
users that actually is really

00:14:28.320 --> 00:14:30.690
worried about data,
this no longer

00:14:30.690 --> 00:14:32.800
needs to be part
of the equation.

00:14:32.800 --> 00:14:36.120
They can just be rest assured
that they can download this app

00:14:36.120 --> 00:14:38.340
and enjoy something
that they didn't before

00:14:38.340 --> 00:14:40.807
and have fun with
your app and games.

00:14:40.807 --> 00:14:41.640
Thank you very much.

00:14:41.640 --> 00:14:43.367
And now I'll pass
the word to Pierre,

00:14:43.367 --> 00:14:45.450
who will talk about things
that you as a developer

00:14:45.450 --> 00:14:48.143
can make to make your app
smaller and more efficient

00:14:48.143 --> 00:14:49.560
and, in the end,
reach more users.

00:14:49.560 --> 00:14:50.780
Thank you.

00:14:50.780 --> 00:14:51.810
[APPLAUSE]

00:14:51.810 --> 00:14:54.540
PIERRE LECESNE:
Thank you, Vitor.

00:14:54.540 --> 00:14:58.530
So we've seen the importance of
reducing the size of your app,

00:14:58.530 --> 00:15:01.650
since it directly correlates
with the number of users

00:15:01.650 --> 00:15:03.570
that will install your app.

00:15:03.570 --> 00:15:06.270
Also, the bigger your
app is, the more likely

00:15:06.270 --> 00:15:08.250
it is to be uninstalled.

00:15:08.250 --> 00:15:13.720
Now that we've seen how Google
helps serving smaller apps,

00:15:13.720 --> 00:15:16.410
let's see what you
can do on your side

00:15:16.410 --> 00:15:19.547
to also optimize the size.

00:15:19.547 --> 00:15:20.880
So we'll do this in three steps.

00:15:20.880 --> 00:15:23.210
First, we need to
agree on the metrics

00:15:23.210 --> 00:15:27.120
you should use to measure
the size of your app.

00:15:27.120 --> 00:15:29.330
Secondly, once you
know what to measure,

00:15:29.330 --> 00:15:31.740
you need to know
how to measure it.

00:15:31.740 --> 00:15:34.010
And we've got some new
reporting in the Play Console

00:15:34.010 --> 00:15:36.440
to help you with that today.

00:15:36.440 --> 00:15:39.150
And thirdly, with
tracking in place,

00:15:39.150 --> 00:15:41.570
we're ready to take actions
and start optimizing

00:15:41.570 --> 00:15:42.780
the size of your app.

00:15:42.780 --> 00:15:45.200
And we have also some new
tools and best practices

00:15:45.200 --> 00:15:50.140
to share with you today, which
will help you do just that.

00:15:50.140 --> 00:15:50.640
OK.

00:15:50.640 --> 00:15:53.130
So before we see how
to optimize your app,

00:15:53.130 --> 00:15:56.680
let's talk about what
you should measure.

00:15:56.680 --> 00:15:59.640
So you're hopefully convinced
by now that the size of your app

00:15:59.640 --> 00:16:00.820
matters.

00:16:00.820 --> 00:16:04.390
But what app size
are we talking about?

00:16:04.390 --> 00:16:05.940
It's important to
note that there

00:16:05.940 --> 00:16:09.630
are different types of sizes
you can measure for your app,

00:16:09.630 --> 00:16:12.950
and not all have
the same importance.

00:16:12.950 --> 00:16:14.760
There are, in
practice, three ways

00:16:14.760 --> 00:16:16.680
to measure the size of your app.

00:16:16.680 --> 00:16:20.250
We have the app upload
size, the app download size,

00:16:20.250 --> 00:16:22.170
and the app size on device.

00:16:22.170 --> 00:16:24.420
And I'm going to explain
each in a bit more details,

00:16:24.420 --> 00:16:27.270
but I want to start with
a bit of a show of hands.

00:16:27.270 --> 00:16:29.820
Raise your hand in
the audience if you

00:16:29.820 --> 00:16:32.250
measure the size of
your app by looking

00:16:32.250 --> 00:16:38.080
at the file size of the APK
you upload to the Play Console.

00:16:38.080 --> 00:16:38.840
All right.

00:16:38.840 --> 00:16:39.560
Almost everyone.

00:16:39.560 --> 00:16:40.150
Yeah.

00:16:40.150 --> 00:16:42.050
That's indeed quite
a common practice

00:16:42.050 --> 00:16:44.460
because it's easy to do.

00:16:44.460 --> 00:16:47.030
That's what we call
the app upload size,

00:16:47.030 --> 00:16:49.730
because that's the size
on disk of the file

00:16:49.730 --> 00:16:53.060
that you upload to
the Play Console.

00:16:53.060 --> 00:16:57.050
It turns out it isn't such an
important metric because it's

00:16:57.050 --> 00:16:59.160
not what your users will see.

00:16:59.160 --> 00:17:03.260
It's neither the size
of what they download

00:17:03.260 --> 00:17:08.540
nor what they see when they
look on the device at the disk

00:17:08.540 --> 00:17:11.089
usage of your app.

00:17:11.089 --> 00:17:14.630
What you should measure instead
is the app download size.

00:17:14.630 --> 00:17:17.300
This is the optimized
size of the APKs

00:17:17.300 --> 00:17:21.170
that the users download to
their devices over the wire.

00:17:21.170 --> 00:17:23.750
The optimization is
performed by Google Play,

00:17:23.750 --> 00:17:26.849
and the final size is
determined by multiple factors,

00:17:26.849 --> 00:17:28.670
including the type
of compression

00:17:28.670 --> 00:17:31.760
we're able to perform or the
patching we're able to do

00:17:31.760 --> 00:17:34.440
from one version to another.

00:17:34.440 --> 00:17:37.620
This is the size that users
see in the Play Store as well.

00:17:37.620 --> 00:17:39.620
And you can now also see
it in the Play Console

00:17:39.620 --> 00:17:42.390
as Dom will show you later.

00:17:42.390 --> 00:17:44.970
App download size is a
really important size metric

00:17:44.970 --> 00:17:47.070
to track because it's
directly correlated

00:17:47.070 --> 00:17:49.450
to your install success rate.

00:17:49.450 --> 00:17:53.850
So how can you measure it?

00:17:53.850 --> 00:17:56.940
So some of you may already be
familiar with the APK Analyzer

00:17:56.940 --> 00:18:00.060
in Android Studio, which already
gives you the possibility

00:18:00.060 --> 00:18:03.520
to monitor the estimated
download size of your app.

00:18:03.520 --> 00:18:06.750
It also shows you the download
size broken down by file,

00:18:06.750 --> 00:18:09.750
so you can see where the
biggest files come from.

00:18:12.430 --> 00:18:14.380
For developers
publishing app bundles,

00:18:14.380 --> 00:18:17.560
the download size will vary
per device configuration

00:18:17.560 --> 00:18:21.340
because each user is getting
a tailored version of the app

00:18:21.340 --> 00:18:24.010
that depends on the
device configuration based

00:18:24.010 --> 00:18:26.240
on that device and language.

00:18:26.240 --> 00:18:28.060
If you've published
an app bundle before,

00:18:28.060 --> 00:18:30.380
you may already be
familiar with Bundletool,

00:18:30.380 --> 00:18:34.350
which is the tool generating
the APKs from the app bundle.

00:18:34.350 --> 00:18:36.780
We added a comment
in Bundletool to help

00:18:36.780 --> 00:18:38.550
you estimate the
download size of your app

00:18:38.550 --> 00:18:40.902
for the various
device configurations.

00:18:40.902 --> 00:18:42.360
Let's take a look
at how to use it.

00:18:46.100 --> 00:18:48.670
So the comment is
called get-size.

00:18:48.670 --> 00:18:51.540
And it outputs, in a
CSV format, the minimum

00:18:51.540 --> 00:18:54.390
and the maximum download size
of your app across the range

00:18:54.390 --> 00:18:57.320
of devices your app supports.

00:18:57.320 --> 00:19:01.460
In this example, you can see
that my app's download size

00:19:01.460 --> 00:19:05.780
ranges from 17.9 megabytes
to 22.6 megabytes,

00:19:05.780 --> 00:19:08.520
depending on the
device configuration.

00:19:08.520 --> 00:19:11.010
Well, can I say, it's
still quite a big range.

00:19:11.010 --> 00:19:14.870
So how can we know
in more details

00:19:14.870 --> 00:19:17.740
which devices get what size?

00:19:17.740 --> 00:19:21.780
So we can break down the result
by various device dimensions,

00:19:21.780 --> 00:19:24.470
and this is done through
the dimensions flag.

00:19:24.470 --> 00:19:28.070
So here we ask to break down
the results by SDK version,

00:19:28.070 --> 00:19:29.570
and we get a bit more details.

00:19:29.570 --> 00:19:32.000
We get a breakdown
by SDK version.

00:19:32.000 --> 00:19:35.450
We see in this example that
the download size of my app

00:19:35.450 --> 00:19:38.930
is bigger on older versions
of Android, J and K,

00:19:38.930 --> 00:19:41.640
and smaller on L and above.

00:19:41.640 --> 00:19:45.140
That's because pre-L Google
Play doesn't generate language

00:19:45.140 --> 00:19:47.330
splits, so all
languages are included

00:19:47.330 --> 00:19:48.740
in the APK served to the user.

00:19:51.950 --> 00:19:53.770
Now, we can get into
even more details.

00:19:53.770 --> 00:19:55.360
We can break down
on more dimensions,

00:19:55.360 --> 00:19:59.170
such as ABIs, screen
density, and even language.

00:19:59.170 --> 00:20:01.850
If you do that, then that
will output a lot of rows.

00:20:01.850 --> 00:20:03.650
But you will get
to see the download

00:20:03.650 --> 00:20:07.210
sizes for each full
device configuration.

00:20:07.210 --> 00:20:09.760
With this comment, you can
track the download side

00:20:09.760 --> 00:20:13.960
of your app for every build of
your bundle for all your users

00:20:13.960 --> 00:20:17.700
at the granularity you want.

00:20:17.700 --> 00:20:18.200
All right.

00:20:18.200 --> 00:20:20.050
So that was download size.

00:20:20.050 --> 00:20:23.200
Today, we're introducing a
second important app size

00:20:23.200 --> 00:20:24.280
metric--

00:20:24.280 --> 00:20:26.740
the app size on device.

00:20:26.740 --> 00:20:29.530
The app size on device
is the approximate size

00:20:29.530 --> 00:20:31.580
of your app on a user's device.

00:20:31.580 --> 00:20:33.430
And as you'll see,
it can be much more

00:20:33.430 --> 00:20:36.580
than just the size of your APK.

00:20:36.580 --> 00:20:39.310
After an app is opened,
the app size on device

00:20:39.310 --> 00:20:42.940
can vary quite a lot,
depending on how it's used.

00:20:42.940 --> 00:20:45.100
So for the purpose of
measuring the data,

00:20:45.100 --> 00:20:47.950
we will focus on the
size at installation time

00:20:47.950 --> 00:20:50.540
before the app is opened.

00:20:50.540 --> 00:20:53.300
Size on device is important
to track because it is

00:20:53.300 --> 00:20:56.150
a major factor in uninstalls.

00:20:56.150 --> 00:20:59.540
Note that it doesn't include
the cache or the user data.

00:20:59.540 --> 00:21:03.160
It's just the application size.

00:21:03.160 --> 00:21:06.280
To try and understand better
why the size on device

00:21:06.280 --> 00:21:08.560
differs from your
APK size, here's

00:21:08.560 --> 00:21:11.410
a simplified diagram of
what happens when an APK is

00:21:11.410 --> 00:21:14.480
installed on the device.

00:21:14.480 --> 00:21:17.480
First, let's look
at the dex files.

00:21:17.480 --> 00:21:19.700
Dex files get optimized
by the platform

00:21:19.700 --> 00:21:23.510
during the installation
by a tool called dex2oat.

00:21:23.510 --> 00:21:27.110
This optimization will make
your app run faster, but usually

00:21:27.110 --> 00:21:30.230
at the cost of a big size.

00:21:30.230 --> 00:21:32.990
The size of the optimized
dex can vary quite a lot

00:21:32.990 --> 00:21:35.550
by device and by SDK version.

00:21:35.550 --> 00:21:37.580
And as I mentioned
before, it will also

00:21:37.580 --> 00:21:39.650
vary during the
life of your app,

00:21:39.650 --> 00:21:42.900
depending how the app is used.

00:21:42.900 --> 00:21:45.230
Second, the native libraries.

00:21:45.230 --> 00:21:47.540
When you compress the native
libraries in your APK,

00:21:47.540 --> 00:21:49.430
the Android platform
needs to uncompress

00:21:49.430 --> 00:21:53.240
them, which takes additional
space on your user's devices.

00:21:53.240 --> 00:21:56.330
Fortunately, you can avoid this
by leaving native libraries

00:21:56.330 --> 00:21:58.970
uncompressed in your APK,
which allows the Android

00:21:58.970 --> 00:22:01.610
platform to read them directly
from it without having

00:22:01.610 --> 00:22:05.330
to extract them, and that's
available since SDK 22,

00:22:05.330 --> 00:22:08.690
and you get this for free
with the Android App Bundle.

00:22:08.690 --> 00:22:10.820
So all of this makes
for the total size

00:22:10.820 --> 00:22:14.120
on device of your app.

00:22:14.120 --> 00:22:14.900
OK.

00:22:14.900 --> 00:22:16.580
So now we have seen
the two app size

00:22:16.580 --> 00:22:19.070
metrics you should focus on.

00:22:19.070 --> 00:22:21.040
Dom will now show you
how you can now track

00:22:21.040 --> 00:22:23.060
these in the Play Console.

00:22:23.060 --> 00:22:25.822
DOM ELLIOTT: Thanks, Pierre.

00:22:25.822 --> 00:22:30.240
[APPLAUSE]

00:22:30.240 --> 00:22:32.610
Pierre talked about
the size metrics

00:22:32.610 --> 00:22:34.920
you should be tracking--
download size, which

00:22:34.920 --> 00:22:37.290
is what's delivered
over the air to users,

00:22:37.290 --> 00:22:40.500
and size on device, which
is the device storage needed

00:22:40.500 --> 00:22:41.980
for your app.

00:22:41.980 --> 00:22:44.880
Now I'm going to talk about
how you can track and analyze

00:22:44.880 --> 00:22:47.850
the size data for your
apps in the Play Console,

00:22:47.850 --> 00:22:50.730
and then we'll move on to
how you can actually work

00:22:50.730 --> 00:22:54.110
to reduce the size of your app.

00:22:54.110 --> 00:22:56.350
You can now track both
of these size metrics

00:22:56.350 --> 00:22:59.050
on the Statistics page
in the Play Console.

00:22:59.050 --> 00:23:02.720
Statistics reports are
highly customizable.

00:23:02.720 --> 00:23:04.960
You can do things like
compare both size metrics

00:23:04.960 --> 00:23:07.810
to each other, you can see
the sizes for different device

00:23:07.810 --> 00:23:11.530
configurations, and you can
compare the size metrics

00:23:11.530 --> 00:23:15.940
to your other app metrics, such
as installs and uninstalls.

00:23:15.940 --> 00:23:19.780
So for example, you
could pinpoint the impact

00:23:19.780 --> 00:23:22.300
of a sudden increase
in your app size

00:23:22.300 --> 00:23:24.970
and how it's impacting
something like installs

00:23:24.970 --> 00:23:27.970
in a country like India,
which is particularly

00:23:27.970 --> 00:23:31.895
impacted by changes in size.

00:23:31.895 --> 00:23:32.520
That's not all.

00:23:32.520 --> 00:23:35.400
We're going a lot further
than the Statistics page.

00:23:35.400 --> 00:23:38.700
Today, we're launching a
brand new report for app size

00:23:38.700 --> 00:23:40.200
in the Play Console.

00:23:40.200 --> 00:23:42.810
You'll find it under
Android Vitals, which

00:23:42.810 --> 00:23:44.730
is where you can
find all of the data

00:23:44.730 --> 00:23:48.180
to do with your app's
health and performance.

00:23:48.180 --> 00:23:50.070
There's lots of new
data in the App Size

00:23:50.070 --> 00:23:52.920
report for you and your
team, so let's take

00:23:52.920 --> 00:23:56.190
a look in more detail.

00:23:56.190 --> 00:23:59.390
You'll see two tabs for both
of the important metrics--

00:23:59.390 --> 00:24:03.950
download size and
size on device.

00:24:03.950 --> 00:24:06.080
At the top of the
tab, we'll show

00:24:06.080 --> 00:24:08.870
you the size for your
latest production release

00:24:08.870 --> 00:24:11.400
compared to a reference device.

00:24:11.400 --> 00:24:14.830
And if you're using multi-APK
or the Android App Bundle,

00:24:14.830 --> 00:24:17.240
we'll show a range of
sizes for different device

00:24:17.240 --> 00:24:19.430
configurations.

00:24:19.430 --> 00:24:23.030
You can also see how you're
doing compared to peers.

00:24:23.030 --> 00:24:24.530
You can actually
go in and change

00:24:24.530 --> 00:24:30.290
the peers to be more appropriate
apps to compare your size to.

00:24:30.290 --> 00:24:32.960
This gives you a
target to work towards.

00:24:32.960 --> 00:24:35.790
Because size is
important to users

00:24:35.790 --> 00:24:38.240
and it impacts your
downstream metrics,

00:24:38.240 --> 00:24:40.670
you're going to want to make
sure you're doing better

00:24:40.670 --> 00:24:44.630
than your peers
as far as you can.

00:24:44.630 --> 00:24:47.030
Being able to compare
yourself to peers

00:24:47.030 --> 00:24:49.490
is a brand new
functionality we're adding

00:24:49.490 --> 00:24:51.320
to the Play Console this year.

00:24:51.320 --> 00:24:54.530
You can see another example
here for your app's rating.

00:24:54.530 --> 00:24:56.130
It's very powerful.

00:24:56.130 --> 00:25:00.560
You can select 8 to 12 peers
to compare yourself to,

00:25:00.560 --> 00:25:03.470
and you'll see the median
value of the peer set

00:25:03.470 --> 00:25:05.720
and the difference between
your app and your peers.

00:25:08.360 --> 00:25:09.620
So back to app size.

00:25:09.620 --> 00:25:12.860
The next section of the report
shows you two new metrics

00:25:12.860 --> 00:25:15.140
relating to your users.

00:25:15.140 --> 00:25:17.450
These metrics use
anonymized user data

00:25:17.450 --> 00:25:21.740
from devices opted in
to sharing their data.

00:25:21.740 --> 00:25:25.790
First, you'll see the
proportion of active devices

00:25:25.790 --> 00:25:28.760
which have your app installed
but have low free device

00:25:28.760 --> 00:25:30.390
storage.

00:25:30.390 --> 00:25:33.440
You can think of these devices
as having a higher uninstall

00:25:33.440 --> 00:25:38.780
risk than devices which have
plenty of device storage.

00:25:38.780 --> 00:25:40.790
Secondly, you'll
see uninstalls which

00:25:40.790 --> 00:25:44.110
are happening on devices
with low free device storage.

00:25:44.110 --> 00:25:46.820
App size may have
been a deciding factor

00:25:46.820 --> 00:25:49.400
in driving these uninstalls.

00:25:49.400 --> 00:25:52.460
This is the first time we're
giving you additional insights

00:25:52.460 --> 00:25:55.490
into what might be impacting
your uninstalls in the Play

00:25:55.490 --> 00:25:57.200
Console.

00:25:57.200 --> 00:26:00.050
Keeping your app size
optimized and obviously as

00:26:00.050 --> 00:26:04.873
useful as possible can help
to reduce these uninstalls.

00:26:04.873 --> 00:26:07.290
We'll start populating both
of these metrics in the coming

00:26:07.290 --> 00:26:07.790
months.

00:26:10.360 --> 00:26:13.710
Now, we also show you
a view of your app size

00:26:13.710 --> 00:26:15.990
and how it's changing over time.

00:26:15.990 --> 00:26:19.070
Being thoughtful in how
these changes happen

00:26:19.070 --> 00:26:21.560
is important because it
can impact your installs

00:26:21.560 --> 00:26:24.580
and uninstalls.

00:26:24.580 --> 00:26:27.330
In this example, you can
see when the app first

00:26:27.330 --> 00:26:29.330
switched to the Android
App Bundle and the size

00:26:29.330 --> 00:26:32.183
savings that resulted.

00:26:32.183 --> 00:26:33.850
If you're publishing
with an Android App

00:26:33.850 --> 00:26:35.710
Bundle or multi-APK,
you can also

00:26:35.710 --> 00:26:38.080
see the full range of
device configurations here.

00:26:40.855 --> 00:26:42.230
The next section
of the report is

00:26:42.230 --> 00:26:44.772
data you'll only see if you're
publishing with an Android App

00:26:44.772 --> 00:26:45.920
Bundle.

00:26:45.920 --> 00:26:49.110
We're able to perform a
more thorough analysis.

00:26:49.110 --> 00:26:52.250
So we can actually show you a
breakdown of all the components

00:26:52.250 --> 00:26:54.500
that make up your app size.

00:26:54.500 --> 00:26:56.390
You can see how much
of your app is made up

00:26:56.390 --> 00:27:01.440
of code, native libraries,
resources, assets, and so on.

00:27:01.440 --> 00:27:04.130
The point of this chart
is to help you prioritize

00:27:04.130 --> 00:27:05.480
what to focus on.

00:27:05.480 --> 00:27:07.520
You can get a very
clear understanding

00:27:07.520 --> 00:27:11.577
of the main contributors
to your app size.

00:27:11.577 --> 00:27:13.910
And you can see how they
change from release to release.

00:27:16.570 --> 00:27:19.210
We've been testing the new
report with developers,

00:27:19.210 --> 00:27:21.550
and they tell us they're
really excited to get access

00:27:21.550 --> 00:27:23.845
to this new data.

00:27:23.845 --> 00:27:26.470
They look forward to being able
to sharing it with stakeholders

00:27:26.470 --> 00:27:29.530
in the team so that they can
actually prioritize reducing

00:27:29.530 --> 00:27:30.910
app size on their road maps.

00:27:33.880 --> 00:27:36.880
So we've covered
the size metrics

00:27:36.880 --> 00:27:39.792
and the new reporting which
helps you track your progress.

00:27:39.792 --> 00:27:41.500
The next thing you
need to do is actually

00:27:41.500 --> 00:27:44.480
work to reduce your app size.

00:27:44.480 --> 00:27:48.170
So I'm going to pause and ask a
quick question around the room.

00:27:48.170 --> 00:27:50.050
Raise your hand if
you're already publishing

00:27:50.050 --> 00:27:51.250
with the Android App Bundle.

00:27:53.600 --> 00:27:54.100
OK.

00:27:54.100 --> 00:27:54.892
Quite a lot of you.

00:27:54.892 --> 00:27:56.390
That's pretty good.

00:27:56.390 --> 00:27:58.957
So that's great.

00:27:58.957 --> 00:28:00.540
For those of you not
familiar with it,

00:28:00.540 --> 00:28:02.670
I'll just give you a quick
intro to the features,

00:28:02.670 --> 00:28:06.740
and then I'll tell you about
the new things that we've added.

00:28:06.740 --> 00:28:09.570
So the Android App Bundle is
Android's official publishing

00:28:09.570 --> 00:28:11.850
format we introduced last year.

00:28:11.850 --> 00:28:15.490
It's open source, supported
in Android Studio, in Gradle,

00:28:15.490 --> 00:28:16.710
in Buck.

00:28:16.710 --> 00:28:20.560
And for games, it's already
supported in Unity and Cocos

00:28:20.560 --> 00:28:22.940
Creator.

00:28:22.940 --> 00:28:25.340
App switching gives you
an average reduction

00:28:25.340 --> 00:28:29.780
in download size of 20%
compared to a universal APK.

00:28:29.780 --> 00:28:33.770
And partners are seeing
up to 11% increase

00:28:33.770 --> 00:28:36.620
in installs from
these size savings.

00:28:36.620 --> 00:28:41.760
That's a huge impact from
a relatively simple switch.

00:28:41.760 --> 00:28:45.990
Over 80,000 apps are using
App Bundles in production.

00:28:45.990 --> 00:28:49.030
Late last year, we shared that
apps such as Airbnb and Twitter

00:28:49.030 --> 00:28:50.430
are using the App Bundle.

00:28:50.430 --> 00:28:52.530
Many new apps have started
using it in production

00:28:52.530 --> 00:28:54.720
and are seeing
these size savings,

00:28:54.720 --> 00:28:58.350
from Flipkart and
Netflix to Shazam,

00:28:58.350 --> 00:29:01.380
and games like Clash of
Clans and Minions Rush.

00:29:04.480 --> 00:29:05.830
Google Apps are switching, too.

00:29:05.830 --> 00:29:09.520
This year, Chrome, Duo,
Google Photos, and others

00:29:09.520 --> 00:29:13.060
have all switched and
are seeing size savings.

00:29:13.060 --> 00:29:16.130
The number one feature request
we've had from many of you,

00:29:16.130 --> 00:29:18.970
and some of you may
be eagerly awaiting,

00:29:18.970 --> 00:29:22.610
is better testing tools
for the Android App Bundle.

00:29:22.610 --> 00:29:25.510
So you can already publish App
Bundles to the testing tracks

00:29:25.510 --> 00:29:28.450
and test them as normal,
but this takes time,

00:29:28.450 --> 00:29:31.240
and the app has to be signed
with your production key.

00:29:31.240 --> 00:29:33.070
Today we're introducing
a new feature

00:29:33.070 --> 00:29:35.680
called Internal App Sharing.

00:29:35.680 --> 00:29:38.110
It's different to
testing tracks.

00:29:38.110 --> 00:29:41.890
It allows you to drag an app
bundle signed with a debug key

00:29:41.890 --> 00:29:45.550
onto a web page
to generate a URL.

00:29:45.550 --> 00:29:48.010
You simply tap that
URL on any device,

00:29:48.010 --> 00:29:50.980
and you'll instantly install
the appropriate splits

00:29:50.980 --> 00:29:52.460
for that device.

00:29:52.460 --> 00:29:56.657
It's very, very quick
and very, very useful.

00:29:56.657 --> 00:29:58.740
That's not all there is
to the Android App Bundle.

00:29:58.740 --> 00:30:01.960
It sets you up for
the future as well.

00:30:01.960 --> 00:30:05.130
Once you've switched, you're
able to take advantage

00:30:05.130 --> 00:30:07.440
of modular app development.

00:30:07.440 --> 00:30:11.340
This is great for engineering
velocity and build times,

00:30:11.340 --> 00:30:16.110
and it also lets you customize
how you deliver features

00:30:16.110 --> 00:30:18.710
to your users.

00:30:18.710 --> 00:30:21.400
So dynamic features are
coming out of beta today

00:30:21.400 --> 00:30:23.440
with some new delivery options.

00:30:23.440 --> 00:30:25.750
You can deliver
features on demand

00:30:25.750 --> 00:30:27.850
or you can deliver
features based

00:30:27.850 --> 00:30:31.780
on conditions, like device
features, or countries,

00:30:31.780 --> 00:30:33.880
or SDK version.

00:30:33.880 --> 00:30:37.450
All developers can now
publish dynamic features

00:30:37.450 --> 00:30:41.590
to production tracks and join
apps like Chrome, Facebook,

00:30:41.590 --> 00:30:44.860
and Netflix, which have dynamic
features in production today.

00:30:47.800 --> 00:30:49.720
With the Android
App Bundle, we're

00:30:49.720 --> 00:30:52.510
moving away from the
idea of a monolithic app

00:30:52.510 --> 00:30:55.065
where everything gets
sent to all of your users

00:30:55.065 --> 00:30:57.110
at install time.

00:30:57.110 --> 00:31:00.760
Instead, you can deliver a
lean, efficient app upfront

00:31:00.760 --> 00:31:02.430
and you can customize
the experience

00:31:02.430 --> 00:31:04.000
for different types of users.

00:31:04.000 --> 00:31:08.080
There's a whole I/O session
later today just on this topic.

00:31:08.080 --> 00:31:09.610
You can watch
What's New with App

00:31:09.610 --> 00:31:14.320
Bundles in the amphitheater at
1:00 PM or watch it on YouTube

00:31:14.320 --> 00:31:16.820
later, too.

00:31:16.820 --> 00:31:17.320
OK.

00:31:17.320 --> 00:31:20.290
Let's get back to
optimizing app size.

00:31:20.290 --> 00:31:24.460
So on the same app size report
that I've been talking about,

00:31:24.460 --> 00:31:29.590
the final section is a list of
recommended size optimizations

00:31:29.590 --> 00:31:32.590
for your App Bundle.

00:31:32.590 --> 00:31:35.680
When you use the App Bundle,
we do a thorough analysis

00:31:35.680 --> 00:31:38.590
and we generate tailored
optimizations which

00:31:38.590 --> 00:31:40.850
are appropriate from your app.

00:31:40.850 --> 00:31:45.100
We also order them by the
expected size savings.

00:31:45.100 --> 00:31:49.510
This will help you prioritize
exactly what to work on next.

00:31:49.510 --> 00:31:51.700
I'm going to invite
Pierre back on stage

00:31:51.700 --> 00:31:54.130
so he can talk about
some of the optimizations

00:31:54.130 --> 00:31:56.632
that we are going
to start suggesting.

00:31:56.632 --> 00:31:58.779
PIERRE LECESNE: Thank you.

00:31:58.779 --> 00:32:01.557
[APPLAUSE]

00:32:02.490 --> 00:32:05.550
So one well-known
optimization that

00:32:05.550 --> 00:32:07.680
usually provides
significant size savings

00:32:07.680 --> 00:32:09.240
you should be all
familiar with is

00:32:09.240 --> 00:32:13.665
code magnification, through
R8 or ProGuard, for example.

00:32:13.665 --> 00:32:15.040
If we detect you're
not using it,

00:32:15.040 --> 00:32:18.780
we'll prompt you for
this recommendation.

00:32:18.780 --> 00:32:22.290
Another thing we do is
scan your image assets

00:32:22.290 --> 00:32:24.360
and tell you how much
size you could save

00:32:24.360 --> 00:32:27.100
if you converted them to WebP.

00:32:27.100 --> 00:32:30.030
WebP is an image format Google
developed a few years ago.

00:32:30.030 --> 00:32:33.210
It has both lossless
and lossy compression.

00:32:33.210 --> 00:32:38.730
And, on average, WebP images
are typically 25% to 34% smaller

00:32:38.730 --> 00:32:42.160
than comparable jpegs.

00:32:42.160 --> 00:32:44.250
Android studio
already has a tool

00:32:44.250 --> 00:32:47.250
which allows you to convert
images to WebP in batch or one

00:32:47.250 --> 00:32:50.490
by one, and you can then preview
the image conversion results

00:32:50.490 --> 00:32:53.937
and tune the quality level when
choosing lossy compression.

00:32:56.550 --> 00:32:57.050
All right.

00:32:57.050 --> 00:32:59.720
So the next optimization
is extracting

00:32:59.720 --> 00:33:01.910
rarely used libraries.

00:33:01.910 --> 00:33:04.700
Sometimes your app makes
use of a library which

00:33:04.700 --> 00:33:07.280
takes quite significant
space in an app

00:33:07.280 --> 00:33:09.860
but is used only
rarely by your users.

00:33:09.860 --> 00:33:12.920
By extracting this library in
an on-demand dynamic feature

00:33:12.920 --> 00:33:16.760
in the app bundle and download
it only when the user needs it,

00:33:16.760 --> 00:33:19.520
you can often reduce the
size of the initial download

00:33:19.520 --> 00:33:22.460
by a few megabytes.

00:33:22.460 --> 00:33:25.430
An example of such
library is card.io,

00:33:25.430 --> 00:33:28.700
which is a library used
to scan credit cards.

00:33:28.700 --> 00:33:31.400
Here you can see an app where
we've extracted the credit

00:33:31.400 --> 00:33:34.420
card scanning flow in a separate
dynamic feature in the App

00:33:34.420 --> 00:33:35.780
Bundle.

00:33:35.780 --> 00:33:38.750
We download it when the user
needs to register their card,

00:33:38.750 --> 00:33:40.990
and then we perform
the scanning.

00:33:40.990 --> 00:33:43.760
Then we don't forget to
uninstall the dynamic feature

00:33:43.760 --> 00:33:46.130
once it's used and no
longer necessary to free up

00:33:46.130 --> 00:33:47.300
space on the user's device.

00:33:50.430 --> 00:33:52.890
Similar to large libraries,
you can do the same thing

00:33:52.890 --> 00:33:56.880
with large resources
and assets, too.

00:33:56.880 --> 00:33:59.610
We'll help you identify the
large resources and assets

00:33:59.610 --> 00:34:02.910
in your app by displaying
in the list of optimizations

00:34:02.910 --> 00:34:05.220
the biggest ones and the
download size when you

00:34:05.220 --> 00:34:08.330
expand the optimization tip.

00:34:08.330 --> 00:34:10.760
One approach could be
to extract a large file

00:34:10.760 --> 00:34:13.670
into a dynamic feature
and deliver it on demand

00:34:13.670 --> 00:34:16.639
or uninstall it
when it's been used.

00:34:16.639 --> 00:34:19.190
But also, depending on
the size or the file type,

00:34:19.190 --> 00:34:21.860
there are other approaches
you can take, too.

00:34:21.860 --> 00:34:23.989
For example, for
media files, you

00:34:23.989 --> 00:34:27.380
could consider
streaming them instead.

00:34:27.380 --> 00:34:29.480
So all these
optimization tips will

00:34:29.480 --> 00:34:31.520
be available on
this App Size page,

00:34:31.520 --> 00:34:34.530
and we are actively
working on adding more,

00:34:34.530 --> 00:34:35.769
so check back regularly.

00:34:41.258 --> 00:34:43.679
DOM ELLIOTT: All of
this is available today.

00:34:43.679 --> 00:34:46.050
Go to the Google
Play Console, and you

00:34:46.050 --> 00:34:49.469
can start seeing optimizations
for your latest release.

00:34:49.469 --> 00:34:52.989
In the near future, we're going
to launch a size optimization

00:34:52.989 --> 00:34:55.920
plugin for Android
Studio as well.

00:34:55.920 --> 00:34:58.590
You'll be able to see
optimization suggestions

00:34:58.590 --> 00:35:00.660
directly in your IDE.

00:35:00.660 --> 00:35:02.580
And what's really
cool about this is you

00:35:02.580 --> 00:35:05.100
can apply some of
the optimizations

00:35:05.100 --> 00:35:06.150
in just a few clicks.

00:35:08.680 --> 00:35:11.550
Delivering billions of
installs every month

00:35:11.550 --> 00:35:14.110
is a huge responsibility
and something at Play

00:35:14.110 --> 00:35:16.990
that we keep on
working on to improve.

00:35:16.990 --> 00:35:20.320
We work behind the scenes
to optimize every step

00:35:20.320 --> 00:35:22.870
of discovery and distribution.

00:35:22.870 --> 00:35:25.750
We're continuing to build
tools to help you publish

00:35:25.750 --> 00:35:28.210
more efficient apps,
which can take advantage

00:35:28.210 --> 00:35:32.000
of next generation
delivery options.

00:35:32.000 --> 00:35:33.500
These are your
takeaways for today.

00:35:33.500 --> 00:35:36.490
Number one, start publishing
with the Android App Bundle.

00:35:36.490 --> 00:35:41.140
Number two, visit the new app
size report to track your data

00:35:41.140 --> 00:35:42.970
and get new optimizations.

00:35:42.970 --> 00:35:46.750
And number three, you can start
thinking about taking advantage

00:35:46.750 --> 00:35:50.150
of modular app development.

00:35:50.150 --> 00:35:52.850
The final thing we're going
to leave you with is a video.

00:35:52.850 --> 00:35:57.480
[INAUDIBLE] is a developer of
many popular apps in India,

00:35:57.480 --> 00:36:00.550
and they've shared their story
with us of how they switched

00:36:00.550 --> 00:36:02.190
to the Android App Bundle.

00:36:02.190 --> 00:36:04.900
So thanks very much, everyone,
and have a great I/O.

00:36:04.900 --> 00:36:08.250
[MUSIC PLAYING]

