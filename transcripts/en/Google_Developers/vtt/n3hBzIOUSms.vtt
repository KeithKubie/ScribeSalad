WEBVTT
Kind: captions
Language: en

00:00:02.600 --> 00:00:03.170
CHRIS RAMSDALE: All right.

00:00:03.170 --> 00:00:05.720
We'll go ahead and
get started.

00:00:05.720 --> 00:00:06.850
So how's everybody's doing?

00:00:06.850 --> 00:00:09.530
Enjoying the first day of
Google I/O, I assume?

00:00:09.530 --> 00:00:10.320
Had some lunch?

00:00:10.320 --> 00:00:11.570
[APPLAUSE]

00:00:15.160 --> 00:00:18.410
So this is the Google Web
Toolkit and Cloud Tooling

00:00:18.410 --> 00:00:19.810
Fireside Chat.

00:00:19.810 --> 00:00:22.020
What we're going to do is we're
going to take an hour to

00:00:22.020 --> 00:00:25.550
converse with some of the folks
that work on the GWT

00:00:25.550 --> 00:00:29.230
Team and Cloud Tooling Team.

00:00:29.230 --> 00:00:31.380
So I want to just say thank you
for coming out after lunch

00:00:31.380 --> 00:00:34.200
and taking your time to
sit and talk with us.

00:00:34.200 --> 00:00:38.940
The makeup of this session is--
it's kind of open and

00:00:38.940 --> 00:00:40.410
free where it's a lot of Q&amp;A.

00:00:40.410 --> 00:00:45.260
It's a chance for our favorite
people, our users, to come and

00:00:45.260 --> 00:00:46.640
talk to us and ask questions.

00:00:46.640 --> 00:00:51.030
And we'll provide answers
and have great feedback.

00:00:51.030 --> 00:00:53.260
So we will take a second in
the beginning to introduce

00:00:53.260 --> 00:00:56.450
ourselves, to give you an idea
just who you're talking to and

00:00:56.450 --> 00:00:57.950
what we're up to.

00:00:57.950 --> 00:00:59.310
So my name is Chris Ramsdale.

00:00:59.310 --> 00:01:02.020
I'm the Product Manager for
Google Web Toolkit and the

00:01:02.020 --> 00:01:03.095
Google Plugin for Eclipse.

00:01:03.095 --> 00:01:06.780
And I'll just pass it on
down the line here.

00:01:06.780 --> 00:01:08.890
BRUCE JOHNSON: Bruce Johnson,
Engineering Director of Google

00:01:08.890 --> 00:01:09.230
Web Toolkit.

00:01:09.230 --> 00:01:10.210
AUDIENCE: Stand.

00:01:10.210 --> 00:01:13.450
BRUCE JOHNSON: Joel Webber
and I started this

00:01:13.450 --> 00:01:16.030
project back in 2000--

00:01:16.030 --> 00:01:18.760
the mid-2000s-ish.

00:01:18.760 --> 00:01:20.698
And then the team has grown
a lot since then.

00:01:24.140 --> 00:01:24.850
UNNUR GRETARSDOTTIR:
My name's Unnur.

00:01:24.850 --> 00:01:27.020
I work on the Google Web
Toolkit Team, as well.

00:01:27.020 --> 00:01:29.970
And I work primarily on
the logging emulation.

00:01:29.970 --> 00:01:32.140
And I did a lot of work with the
bootstrapping linker and a

00:01:32.140 --> 00:01:34.142
little bit of work with the
CSS resources and such.

00:01:36.740 --> 00:01:37.820
JOHN TAMPLIN: I'm
John Tamplin.

00:01:37.820 --> 00:01:40.340
I've worked on Developer
Mode and

00:01:40.340 --> 00:01:43.880
internationalization primarily.

00:01:43.880 --> 00:01:44.650
RAY RYAN: I'm Ray Ryan.

00:01:44.650 --> 00:01:46.950
I'm also an engineer
on GWT Team.

00:01:46.950 --> 00:01:47.820
I'm [? Tech Lead of ?]

00:01:47.820 --> 00:01:48.040
[? libs ?]

00:01:48.040 --> 00:01:49.750
right now.

00:01:49.750 --> 00:01:53.330
So that's UiBinder, widgets,
and that kind of a thing.

00:01:53.330 --> 00:01:54.680
UiBinder is my biggest piece.

00:01:57.795 --> 00:02:00.190
STEPHANIE BRUBAKER: I'm
Stephanie Brubaker.

00:02:00.190 --> 00:02:02.890
I work primarily on GWT
libraries, most recently with

00:02:02.890 --> 00:02:06.550
UiBinder and Safe HTML.

00:02:06.550 --> 00:02:07.640
PHIL QUINTSLUND: I'm
Phil Quintslund.

00:02:07.640 --> 00:02:10.690
And I work on GPE primarily,
Google Plugin for Eclipse.

00:02:14.010 --> 00:02:15.890
JASON ROSENBERG: I'm
Jason Rosenberg.

00:02:15.890 --> 00:02:19.260
And I've been working on
compiler optimizations and

00:02:19.260 --> 00:02:20.510
Development Mode.

00:02:23.170 --> 00:02:24.750
JAIME WREN: My name
is Jaime Wren.

00:02:24.750 --> 00:02:27.580
I also work on the Google
Plugin for Eclipse.

00:02:34.120 --> 00:02:34.480
CHRIS RAMSDALE: All right.

00:02:34.480 --> 00:02:35.550
Thanks for the introductions.

00:02:35.550 --> 00:02:39.790
So what I thought we would do is
give you a little bit of an

00:02:39.790 --> 00:02:42.420
update of where we've been this
year, and where we plan

00:02:42.420 --> 00:02:46.090
on going looking forward the
next three, four, six months.

00:02:46.090 --> 00:02:50.000
And then check-- there was a
moderator link with some

00:02:50.000 --> 00:02:53.660
questions that people had
already pre-submitted.

00:02:53.660 --> 00:02:55.030
And so we'll go through
those, and then we'll

00:02:55.030 --> 00:02:58.040
mainly open up for Q&amp;A.

00:02:58.040 --> 00:03:01.660
So the past year has
been a great one.

00:03:01.660 --> 00:03:05.410
From a high level, we've started
to make releases for

00:03:05.410 --> 00:03:08.910
GWT and GPE a bit more frequent,
which is great for

00:03:08.910 --> 00:03:10.520
our users, which is
great for us.

00:03:10.520 --> 00:03:11.760
It gets the cycle going.

00:03:11.760 --> 00:03:15.480
And so it lets us get new
features and enhancements in

00:03:15.480 --> 00:03:19.580
quite fast. We've started
down the HTML5 path.

00:03:19.580 --> 00:03:25.500
So to now we've gone through a
GWT 2.2 and a GWT 2.3 release,

00:03:25.500 --> 00:03:30.130
where we've had Canvas, audio,
video, local storage support

00:03:30.130 --> 00:03:32.140
within HTML5.

00:03:32.140 --> 00:03:34.465
And we've started to-- as you'll
see in a session that

00:03:34.465 --> 00:03:36.360
I'm going to present
tomorrow--

00:03:36.360 --> 00:03:38.330
we've started to think about App
Cache, and how you can use

00:03:38.330 --> 00:03:39.500
that within your GWT
application.

00:03:39.500 --> 00:03:42.140
So we'll talk about a new linker
that we've started to

00:03:42.140 --> 00:03:45.690
build out that will produce
manifest files for you

00:03:45.690 --> 00:03:46.930
automatically.

00:03:46.930 --> 00:03:50.960
So as you can see over the past
year, we've noticed that

00:03:50.960 --> 00:03:52.840
there's a trend obviously
with HTML5.

00:03:52.840 --> 00:03:54.480
And we want to be
part of that.

00:03:54.480 --> 00:03:56.030
And we think that the best
way to program for

00:03:56.030 --> 00:03:57.190
that is using GWT.

00:03:57.190 --> 00:03:57.440
Right?

00:03:57.440 --> 00:04:02.010
So we'll actually provide our
own APIs on top of HTML5 APIs

00:04:02.010 --> 00:04:04.590
to allow you, as a GWT
developer, to take advantage

00:04:04.590 --> 00:04:08.320
of all of those features.

00:04:08.320 --> 00:04:11.500
We've also made some cell
table and cell widget

00:04:11.500 --> 00:04:12.050
enhancements.

00:04:12.050 --> 00:04:13.870
And we'll continue to
do that, as well.

00:04:13.870 --> 00:04:17.579
And so if you look at where
we're going over the next few

00:04:17.579 --> 00:04:20.600
months, you start to see that
it kind of breaks down into

00:04:20.600 --> 00:04:22.190
three areas.

00:04:22.190 --> 00:04:24.580
We're going to continue
our focus on cell

00:04:24.580 --> 00:04:25.260
widgets and cell tables.

00:04:25.260 --> 00:04:29.240
We know that generally
developers that want to use

00:04:29.240 --> 00:04:32.190
GWT are typically operating
with a medium-sized to a

00:04:32.190 --> 00:04:34.040
large-scale application.

00:04:34.040 --> 00:04:36.310
And it takes a lot to keep those
large-scale applications

00:04:36.310 --> 00:04:39.810
efficient and fast. That's the
number one goal for us.

00:04:39.810 --> 00:04:43.120
So what better way right now is
to introduce and continue

00:04:43.120 --> 00:04:45.830
the motivation or the momentum
with cell widgets, and cell

00:04:45.830 --> 00:04:48.850
tables in particular, to do that
given the fact that a lot

00:04:48.850 --> 00:04:51.150
of these applications are kind
of business-focused.

00:04:51.150 --> 00:04:53.670
And that doesn't mean they're
not sexy or [UNINTELLIGIBLE].

00:04:53.670 --> 00:04:55.780
That just means that they're
handling a lot of data.

00:04:55.780 --> 00:04:57.740
And to do that efficiently--
like that's one way your

00:04:57.740 --> 00:04:59.680
application can get bogged down
really fast. So we think

00:04:59.680 --> 00:05:01.875
that the investment we've made
in these cell widgets thus

00:05:01.875 --> 00:05:03.890
far, and we continue to make
over the next three or four

00:05:03.890 --> 00:05:06.470
months, is an important one.

00:05:06.470 --> 00:05:09.280
So that's kind of where we
think about in terms of

00:05:09.280 --> 00:05:10.420
application efficiency.

00:05:10.420 --> 00:05:12.920
But then we also are very
adamant about developer

00:05:12.920 --> 00:05:14.065
efficiency, as well.

00:05:14.065 --> 00:05:16.200
So keep your apps running fast
and keep you as a developer

00:05:16.200 --> 00:05:19.770
running fast. So the second
primary place we're looking at

00:05:19.770 --> 00:05:23.720
in terms of the next three or
four months is in testing.

00:05:23.720 --> 00:05:26.200
So we've noticed that some
internal teams as well as

00:05:26.200 --> 00:05:30.670
external teams have had some
pain when it comes to testing.

00:05:30.670 --> 00:05:32.780
Things like using Selenium
or even GWTTestCase.

00:05:32.780 --> 00:05:35.080
And if you've been following
along, we've always been

00:05:35.080 --> 00:05:37.040
trying to introduce ways
to make testing faster.

00:05:37.040 --> 00:05:40.120
That was the motivation for the
whole MVP design pattern

00:05:40.120 --> 00:05:43.420
was to steer you away of
GWTTestCase when you needed to

00:05:43.420 --> 00:05:46.010
so you could function with
just vanilla JRE tests.

00:05:46.010 --> 00:05:47.910
So now we're taking it a step
further and noticing that

00:05:47.910 --> 00:05:50.665
like, OK, so you've adopted
this design pattern.

00:05:50.665 --> 00:05:53.040
And you have an application that
works quite well, and you

00:05:53.040 --> 00:05:53.800
can test quite well.

00:05:53.800 --> 00:05:58.260
But then there's still that last
15%, 10%, 5%, if you're

00:05:58.260 --> 00:06:00.300
lucky, of integration tests.

00:06:00.300 --> 00:06:02.340
And for that you use things like
Selenium to do testing.

00:06:02.340 --> 00:06:03.550
And that can be kind
of painful still.

00:06:03.550 --> 00:06:04.990
So we continue to optimize.

00:06:04.990 --> 00:06:07.910
And so we have some projects
in the pipeline that

00:06:07.910 --> 00:06:10.050
will help with that.

00:06:10.050 --> 00:06:13.300
And then finally, again, keeping
with the motto of

00:06:13.300 --> 00:06:17.905
efficient developers, we are
currently focusing quite a bit

00:06:17.905 --> 00:06:19.540
of effort on making Development

00:06:19.540 --> 00:06:21.750
Mode or DevMode faster.

00:06:21.750 --> 00:06:27.590
So it's nice because if you look
back from GWT 1.5 moving

00:06:27.590 --> 00:06:31.630
forward, we've added a
ton of functionality.

00:06:31.630 --> 00:06:33.850
Just to recap, I mean, we've
got UiBinder now.

00:06:33.850 --> 00:06:34.810
We've got code splitting.

00:06:34.810 --> 00:06:36.460
We've got a new RPC framework.

00:06:36.460 --> 00:06:38.830
We've got an Activities
and Places framework.

00:06:38.830 --> 00:06:40.010
And it just kind of goes
on and on and on.

00:06:40.010 --> 00:06:44.340
Well, when you start pulling all
of those features in, it

00:06:44.340 --> 00:06:46.320
can add some weight to
the application.

00:06:46.320 --> 00:06:48.060
It can add some weight to
the actual DevMode time.

00:06:48.060 --> 00:06:50.510
And so what we've seen is that
there's some things we can do

00:06:50.510 --> 00:06:53.590
in terms of caching and smart
caching to make that faster.

00:06:53.590 --> 00:06:56.480
And so we could take, for
example, a DevMode time of

00:06:56.480 --> 00:07:00.480
running at 25 seconds down
to something in sub-5.

00:07:00.480 --> 00:07:01.250
That's a high-level goal.

00:07:01.250 --> 00:07:02.350
I'm not saying we're
there yet.

00:07:02.350 --> 00:07:04.415
I'm just saying that that's the
way we think right now.

00:07:04.415 --> 00:07:07.900
So those are the numbers in the
metrics we're targeting.

00:07:07.900 --> 00:07:10.390
And so that's what's keeping us
busy for the next three to

00:07:10.390 --> 00:07:10.930
four months.

00:07:10.930 --> 00:07:15.310
And again, the motivation is
always efficient applications,

00:07:15.310 --> 00:07:15.875
efficient developers.

00:07:15.875 --> 00:07:17.820
And if we can have both of
those, then I think we've done

00:07:17.820 --> 00:07:19.790
a good job.

00:07:19.790 --> 00:07:25.300
A little forward looking is we
continue to evaluate HTML5

00:07:25.300 --> 00:07:28.730
features that make the most
sense for our developers and

00:07:28.730 --> 00:07:31.260
for our teams, as well.

00:07:31.260 --> 00:07:34.120
And so with Canvas, it was--

00:07:34.120 --> 00:07:36.050
well, let's just be honest.
Canvas was a fun one.

00:07:36.050 --> 00:07:37.460
You can do a lot of cool
demos with Canvas.

00:07:37.460 --> 00:07:38.930
I'll be honest about that.

00:07:38.930 --> 00:07:41.600
But we've also seen that there
have been a fair number of

00:07:41.600 --> 00:07:44.760
game developers that have
started adopting GWT as a

00:07:44.760 --> 00:07:47.210
framework for them to develop
efficient applications, in the

00:07:47.210 --> 00:07:48.810
games especially.

00:07:48.810 --> 00:07:51.570
So Canvas was a smart
move there.

00:07:51.570 --> 00:07:54.820
Audio and video tag for people
that are incorporating sound

00:07:54.820 --> 00:07:55.865
effects and things like that.

00:07:55.865 --> 00:07:57.790
It was a pretty easy move.

00:07:57.790 --> 00:07:58.710
And that was good.

00:07:58.710 --> 00:08:01.640
It was dipping our toes into
some new ground for GWT.

00:08:01.640 --> 00:08:03.970
Because for the longest time,
we've always advocated that

00:08:03.970 --> 00:08:06.940
you can write once and run
anywhere, any browser,

00:08:06.940 --> 00:08:09.280
cross-browser, cross-platform.

00:08:09.280 --> 00:08:11.670
But with Canvas, obviously,
we deterred from that.

00:08:11.670 --> 00:08:14.580
Because we're talking like,
there's no Canvas support IE6.

00:08:14.580 --> 00:08:16.320
And we didn't try to backfill
that with Flash or

00:08:16.320 --> 00:08:16.890
something like that.

00:08:16.890 --> 00:08:20.130
We just kept it efficient.

00:08:20.130 --> 00:08:24.030
And so we ended up being quite
happy with the programming

00:08:24.030 --> 00:08:28.230
model to give our users a way
of determining what is the

00:08:28.230 --> 00:08:29.360
fallback mechanism for when you

00:08:29.360 --> 00:08:30.570
don't have Canvas supported.

00:08:30.570 --> 00:08:33.220
So given that we solved that
problem in the beginning of

00:08:33.220 --> 00:08:35.450
the year, it opened up the door
to say, OK, now we have a

00:08:35.450 --> 00:08:36.700
nice programming model
on our way to move

00:08:36.700 --> 00:08:37.980
forward with HTML5 support.

00:08:37.980 --> 00:08:39.730
And so now we're looking at
things like we had with the

00:08:39.730 --> 00:08:42.600
GWT 2.3, we introduced
local storage.

00:08:42.600 --> 00:08:45.850
So that's a way of caching
data inside the browser's

00:08:45.850 --> 00:08:47.800
database, key value pairs.

00:08:47.800 --> 00:08:48.790
And you can do it
for two things.

00:08:48.790 --> 00:08:51.260
You can make your application
a little more snappy because

00:08:51.260 --> 00:08:52.347
you're actually reading
from disk rather

00:08:52.347 --> 00:08:53.600
than making an RPC.

00:08:53.600 --> 00:08:54.670
And now actually you
can start to think

00:08:54.670 --> 00:08:55.350
about working offline.

00:08:55.350 --> 00:08:58.140
So if you drop a connection, you
can just queue up an RPC,

00:08:58.140 --> 00:09:00.010
or you can queue up
a [? Read. ?]

00:09:00.010 --> 00:09:02.980
And then with App Cache,
we pushed that

00:09:02.980 --> 00:09:03.760
a little bit further.

00:09:03.760 --> 00:09:05.590
So you're actually reading
everything from disk, all of

00:09:05.590 --> 00:09:07.610
the artifacts for your
application.

00:09:07.610 --> 00:09:09.980
And then forward thinking over
the next four, five, and even

00:09:09.980 --> 00:09:12.020
six months, we'll think about
things like IndexedDB and a

00:09:12.020 --> 00:09:13.970
few other HTML5 features.

00:09:13.970 --> 00:09:16.540
We do evaluate them based on
what external teams and

00:09:16.540 --> 00:09:17.540
internal teams need.

00:09:17.540 --> 00:09:20.130
And the nice thing about that is
that we typically see-- as

00:09:20.130 --> 00:09:23.200
I talk to more and more teams,
more and more external folks--

00:09:23.200 --> 00:09:26.780
we find that there is a striking
parallel between the

00:09:26.780 --> 00:09:29.160
teams we talk to internally
and the teams we talk to

00:09:29.160 --> 00:09:29.605
externally.

00:09:29.605 --> 00:09:31.050
So that's really good for us.

00:09:31.050 --> 00:09:32.270
That happens to work
out quite well.

00:09:32.270 --> 00:09:35.310
So the investments we make on
both sides are beneficial to

00:09:35.310 --> 00:09:39.130
each split of our user base.

00:09:39.130 --> 00:09:43.500
And then finally, thinking
a little further out--

00:09:43.500 --> 00:09:45.440
and I'm quite passionate
about this myself--

00:09:45.440 --> 00:09:46.610
is mobile web apps.

00:09:46.610 --> 00:09:49.070
And we started off the year
hot and heavy about that.

00:09:49.070 --> 00:09:51.530
We're doing some research, had
some requirements down,

00:09:51.530 --> 00:09:53.630
started to formulate
a little team.

00:09:53.630 --> 00:09:55.990
And we kind of started
scouting it around

00:09:55.990 --> 00:09:56.690
and talking to folks.

00:09:56.690 --> 00:09:58.930
And what we'd end up doing
is talking about how

00:09:58.930 --> 00:10:00.130
you can make a choice.

00:10:00.130 --> 00:10:01.340
You can do native or
mobile web apps.

00:10:01.340 --> 00:10:02.750
And where are the benefits?

00:10:02.750 --> 00:10:03.940
And where are the trade-offs?

00:10:03.940 --> 00:10:08.330
And we backed off
just a tad bit.

00:10:08.330 --> 00:10:09.680
Just because we thought we were
going to let the market

00:10:09.680 --> 00:10:12.080
evolve a little bit and let our
customers evolve a little

00:10:12.080 --> 00:10:14.300
bit and see what their
actual needs are.

00:10:14.300 --> 00:10:15.110
That doesn't mean it's
off the table.

00:10:15.110 --> 00:10:17.020
It just means that we've brought
it back in and we're

00:10:17.020 --> 00:10:17.680
evaluating it.

00:10:17.680 --> 00:10:19.550
But the good news is that we'll
continue to evaluate it

00:10:19.550 --> 00:10:20.710
over the next few months.

00:10:20.710 --> 00:10:24.070
And so we'll keep targeting a
little longer term, HTML5 and

00:10:24.070 --> 00:10:26.200
mobile support moving forward.

00:10:26.200 --> 00:10:31.240
But the good news is that part
of the research that we did

00:10:31.240 --> 00:10:35.290
proved out that you can take
what we have now and what

00:10:35.290 --> 00:10:38.470
other projects have now as
well, and you can build a

00:10:38.470 --> 00:10:40.070
great mobile web app
that will be highly

00:10:40.070 --> 00:10:41.630
efficient and used anywhere.

00:10:41.630 --> 00:10:44.980
And so I have a session tomorrow
morning at 10:45

00:10:44.980 --> 00:10:47.112
after the keynote that talks
through that and runs how to

00:10:47.112 --> 00:10:50.650
use GWT 2.4, which is what we'll
be announcing this week,

00:10:50.650 --> 00:10:52.590
alongside the plugin for Eclipse
and a few other things

00:10:52.590 --> 00:10:54.840
to build great mobile
web apps.

00:10:54.840 --> 00:10:57.390
So that's a little bit of a
background of where we've been

00:10:57.390 --> 00:10:59.120
this year, and where we're going
over the next few months

00:10:59.120 --> 00:11:01.990
looking into 2012.

00:11:01.990 --> 00:11:03.550
So with that I thought
I would--

00:11:03.550 --> 00:11:04.680
I can jump on and see
if there's any

00:11:04.680 --> 00:11:07.030
questions within moderator.

00:11:07.030 --> 00:11:09.900
And we can open it up for just
general discussion and have

00:11:09.900 --> 00:11:12.590
you guys come up and
ask questions.

00:11:12.590 --> 00:11:13.730
But actually--I should say--
actually, is there anything

00:11:13.730 --> 00:11:14.980
else that you guys wanted
to add, too?

00:11:19.190 --> 00:11:21.855
All right.

00:11:21.855 --> 00:11:23.835
I think I answered
one up here.

00:11:50.620 --> 00:11:53.270
AUDIENCE: I just was curious
what else you've done with

00:11:53.270 --> 00:11:57.250
introducing local storage
and with your

00:11:57.250 --> 00:11:58.160
caching in the browser?

00:11:58.160 --> 00:11:59.410
Can you talk more about that?

00:12:02.673 --> 00:12:05.670
CHRIS RAMSDALE: I'll take it.

00:12:05.670 --> 00:12:10.260
So the local storage is a pretty
lightweight API over

00:12:10.260 --> 00:12:12.760
the local storage
APIs right now.

00:12:12.760 --> 00:12:18.410
The support we have is we
exposed the API with type

00:12:18.410 --> 00:12:21.325
safety, which is what
GWT has always done.

00:12:21.325 --> 00:12:22.820
So we give you type safety.

00:12:22.820 --> 00:12:26.530
And we, right now, leave it up
to you as the application

00:12:26.530 --> 00:12:31.740
developer to build caching
techniques on top of that.

00:12:31.740 --> 00:12:33.590
Ray and I have had conversations
about is there a

00:12:33.590 --> 00:12:36.360
way that we can actually hook
up local storage to, say,

00:12:36.360 --> 00:12:39.200
GWT-RPC or RequestFactory.

00:12:39.200 --> 00:12:42.950
And that's a very enticing
problem to solve.

00:12:42.950 --> 00:12:43.850
But we still [? lay on it ?]

00:12:43.850 --> 00:12:45.900
every discussion of, it really
makes sense to let the

00:12:45.900 --> 00:12:48.480
application developer--
at least right now--

00:12:48.480 --> 00:12:51.980
to build on top of the
APIs that we support.

00:12:51.980 --> 00:12:53.800
So right now it's-- to answer
your question, the short

00:12:53.800 --> 00:12:57.130
answer is that we're exposing
a thin wrapper on top of the

00:12:57.130 --> 00:12:58.380
local storage APIs.

00:13:01.130 --> 00:13:02.440
AUDIENCE: Hey.

00:13:02.440 --> 00:13:05.390
We recently started using Trunk
because we wanted to

00:13:05.390 --> 00:13:07.850
implement from file
drag and drop.

00:13:07.850 --> 00:13:10.300
And so I'm just curious what
your thoughts are in using

00:13:10.300 --> 00:13:11.590
Trunk, and how stable it is.

00:13:11.590 --> 00:13:12.840
Does it pass unit tests?

00:13:15.850 --> 00:13:17.100
CHRIS RAMSDALE: [UNINTELLIGIBLE]

00:13:26.160 --> 00:13:28.220
RAY RYAN: The short answer is
everybody at Google works from

00:13:28.220 --> 00:13:29.830
Trunk everyday.

00:13:29.830 --> 00:13:32.220
Internally, we don't do
any kind of releases.

00:13:32.220 --> 00:13:33.910
You create your own stability
with a release branch.

00:13:33.910 --> 00:13:37.580
And so there is, change by
change, constant pressure on

00:13:37.580 --> 00:13:38.910
us not to break things
and to maintain

00:13:38.910 --> 00:13:39.810
the quality of things.

00:13:39.810 --> 00:13:43.770
So I would be working from Trunk
if I were working from

00:13:43.770 --> 00:13:45.330
outside of Google, as well.

00:13:45.330 --> 00:13:46.580
AUDIENCE: Thanks.

00:13:54.230 --> 00:13:54.930
AUDIENCE: Hi.

00:13:54.930 --> 00:14:02.080
Any updates on the Google RC
API and Google Map API

00:14:02.080 --> 00:14:05.270
version 3 in GWT?

00:14:05.270 --> 00:14:06.530
CHRIS RAMSDALE: Yeah.

00:14:06.530 --> 00:14:11.270
So we've been having those
conversations internally about

00:14:11.270 --> 00:14:13.720
where that support
will come from.

00:14:13.720 --> 00:14:17.040
I think the onus lands back
on us to update them.

00:14:17.040 --> 00:14:21.500
So we know that it's a strong
desire from the community.

00:14:21.500 --> 00:14:23.100
And many people have asked
your question too.

00:14:23.100 --> 00:14:25.790
And we've actually heard from
internal folks, even from some

00:14:25.790 --> 00:14:29.010
internal sales folks, that they
get this question a lot.

00:14:29.010 --> 00:14:31.560
So we definitely know that
it's high priority.

00:14:31.560 --> 00:14:34.320
And we've started to identify
some folks on the GWT side

00:14:34.320 --> 00:14:36.220
that might be able to
help out to do that.

00:14:38.850 --> 00:14:40.890
AUDIENCE: I've got a question
about internationalization and

00:14:40.890 --> 00:14:42.640
what the road map is
for the future.

00:14:42.640 --> 00:14:44.960
I noticed that there was a big
commit, probably like two,

00:14:44.960 --> 00:14:45.950
three months ago.

00:14:45.950 --> 00:14:49.090
Could you maybe explain what the
impetus was behind that?

00:14:49.090 --> 00:14:53.620
And what that's going to allow
me, as a developer, to do?

00:14:53.620 --> 00:14:56.650
JOHN TAMPLIN: So when you say
big commit, can you clarify

00:14:56.650 --> 00:14:58.830
which one you're
talking about?

00:14:58.830 --> 00:15:00.040
AUDIENCE: Had to do
with messages.

00:15:00.040 --> 00:15:03.530
It was like phase one of
something or another.

00:15:03.530 --> 00:15:04.910
I can't remember it off
the top of my head.

00:15:04.910 --> 00:15:05.290
JOHN TAMPLIN: OK.

00:15:05.290 --> 00:15:09.780
I think you're talking about
being able to do some of the

00:15:09.780 --> 00:15:13.690
internationalization work on the
server or at build time.

00:15:13.690 --> 00:15:17.640
So one of the things we want
to be able to do is have

00:15:17.640 --> 00:15:21.400
shared code that uses
the same messages.

00:15:21.400 --> 00:15:24.480
So you don't have slightly
different formatting between

00:15:24.480 --> 00:15:27.830
the client and server or have
to have two different

00:15:27.830 --> 00:15:31.460
translations for essentially
the same messages.

00:15:31.460 --> 00:15:35.800
And so what we want
to allow is have--

00:15:35.800 --> 00:15:37.640
you have your messages
in shared code.

00:15:37.640 --> 00:15:41.270
And then you can use those
messages on either the client

00:15:41.270 --> 00:15:42.880
or the server.

00:15:42.880 --> 00:15:46.070
Initially it'll just
be support for--

00:15:46.070 --> 00:15:49.320
at build time you would
construct implementations for

00:15:49.320 --> 00:15:51.060
the server.

00:15:51.060 --> 00:15:51.700
Eventually--

00:15:51.700 --> 00:15:53.750
and there's some people
who've been doing it

00:15:53.750 --> 00:15:55.250
externally, as well--

00:15:55.250 --> 00:15:59.830
would be able to generate
bytecode on the fly on the

00:15:59.830 --> 00:16:02.830
server, so you didn't have to
do it all at build time.

00:16:02.830 --> 00:16:03.020
AUDIENCE: OK.

00:16:03.020 --> 00:16:04.300
Thanks.

00:16:04.300 --> 00:16:07.090
BRUCE JOHNSON: One quick idea
is-- if people wouldn't mind

00:16:07.090 --> 00:16:11.340
doing it-- just say your name
and where you work and maybe

00:16:11.340 --> 00:16:13.190
like two or three sentences
about your project.

00:16:13.190 --> 00:16:15.520
I just think it'd be fun to
share what we're working on.

00:16:15.520 --> 00:16:16.150
If you can.

00:16:16.150 --> 00:16:18.330
If you don't want to, don't.

00:16:18.330 --> 00:16:19.410
AUDIENCE: I'm Avi.

00:16:19.410 --> 00:16:22.410
I work for Fidelity Information
Services.

00:16:22.410 --> 00:16:24.160
They're banking software
providers basically for

00:16:24.160 --> 00:16:25.810
Nationwide and all
the big banks.

00:16:25.810 --> 00:16:27.340
Bank of America, they use.

00:16:27.340 --> 00:16:30.480
So we're trying to introduce
GWT into banks.

00:16:30.480 --> 00:16:32.680
Some of the banks already
[UNINTELLIGIBLE PHRASE]

00:16:32.680 --> 00:16:33.660
based on that.

00:16:33.660 --> 00:16:38.200
One of my struggles has been
around the look and feel.

00:16:38.200 --> 00:16:40.070
Most of all, what goes
on hammering out

00:16:40.070 --> 00:16:41.210
the look and feel.

00:16:41.210 --> 00:16:43.690
And with UiBinder, it made
it a little better.

00:16:43.690 --> 00:16:45.000
But we're still struggling
with that.

00:16:45.000 --> 00:16:45.590
And I don't know.

00:16:45.590 --> 00:16:48.340
It would be nice if we could
have a CSS3 style with

00:16:48.340 --> 00:16:49.980
basically default.

00:16:49.980 --> 00:16:52.240
Makes the application look a
little nicer so that we can

00:16:52.240 --> 00:16:53.600
present it to product managers
because that's

00:16:53.600 --> 00:16:54.930
what they care about.

00:16:54.930 --> 00:16:55.510
They don't care.

00:16:55.510 --> 00:16:56.590
So we don't want to
put in any work

00:16:56.590 --> 00:16:58.780
beforehand to make it pretty.

00:16:58.780 --> 00:17:00.950
Second thing was the validation
piece on the client

00:17:00.950 --> 00:17:03.060
side that keeps getting
delayed.

00:17:03.060 --> 00:17:05.420
I saw it was not checked
in on the release

00:17:05.420 --> 00:17:06.900
that's part of 2.3.

00:17:06.900 --> 00:17:09.680
What is the timeline on that?

00:17:09.680 --> 00:17:13.859
And do you guys intend
on working on that?

00:17:13.859 --> 00:17:17.250
Or will it be-- and one more
thing, the Activity Mapper

00:17:17.250 --> 00:17:20.010
with the GIN, can you guys work
with that and probably

00:17:20.010 --> 00:17:20.690
provide a sample?

00:17:20.690 --> 00:17:23.380
Because we have like 70
or 80 activities.

00:17:23.380 --> 00:17:27.270
And we cannot put that
in a Client Factory.

00:17:27.270 --> 00:17:27.450
RAY RYAN: Yeah.

00:17:27.450 --> 00:17:29.540
Most of that lands on me.

00:17:29.540 --> 00:17:32.925
We have put in some preliminary
support to at

00:17:32.925 --> 00:17:35.160
least get some CSS3 syntax
working properly in

00:17:35.160 --> 00:17:36.550
ClientBundle.

00:17:36.550 --> 00:17:38.280
Am I interpreting that right?

00:17:38.280 --> 00:17:38.900
Oh.

00:17:38.900 --> 00:17:42.050
I'll let Unnur address
that more directly.

00:17:42.050 --> 00:17:45.030
We're hearing that internally
and externally, as well.

00:17:45.030 --> 00:17:46.370
Your second question was
about client side

00:17:46.370 --> 00:17:50.110
validation with 2.4.

00:17:50.110 --> 00:17:53.460
It will be in the 2.4 release
at least with

00:17:53.460 --> 00:17:55.125
experimental status.

00:17:55.125 --> 00:17:57.270
It's a lot of work.

00:17:57.270 --> 00:17:59.720
And it's been kind of a labor
of love by one guy who does

00:17:59.720 --> 00:18:01.515
several things at once.

00:18:01.515 --> 00:18:04.000
He's held it back so far
because the level of

00:18:04.000 --> 00:18:07.840
compliance with the TCK, the
acceptance suite, hasn't been

00:18:07.840 --> 00:18:08.440
high enough.

00:18:08.440 --> 00:18:11.190
But now it's at the point
where teams are using it

00:18:11.190 --> 00:18:13.750
internally, have been
for a while now.

00:18:13.750 --> 00:18:17.570
And as of 2.4, it will be
included in the release jars.

00:18:17.570 --> 00:18:20.130
There will be a caveat of, this
is not yet fully baked.

00:18:20.130 --> 00:18:24.050
But it's a standard so the rug
isn't going to be pulled out

00:18:24.050 --> 00:18:24.585
from under you.

00:18:24.585 --> 00:18:26.240
It will simply get more and more
faithful and higher and

00:18:26.240 --> 00:18:28.040
higher quality.

00:18:28.040 --> 00:18:32.000
And then finally, the
boilerplate problem with

00:18:32.000 --> 00:18:35.490
Activities and Activity
Manager is very well

00:18:35.490 --> 00:18:37.070
understood.

00:18:37.070 --> 00:18:40.850
That's on my personal to do list
to try to do something

00:18:40.850 --> 00:18:42.680
about that this quarter.

00:18:42.680 --> 00:18:45.650
At the very least, we are part
way through a sample app that

00:18:45.650 --> 00:18:48.400
should make it clearer how to
use these things and how not

00:18:48.400 --> 00:18:50.710
to use these things.

00:18:50.710 --> 00:18:52.990
It will probably be GIN-based.

00:18:52.990 --> 00:18:55.610
Even if it is not GIN-based,
it'll be run

00:18:55.610 --> 00:18:59.590
async and async proxy.

00:18:59.590 --> 00:19:01.650
I forget the name of
the interface.

00:19:01.650 --> 00:19:05.220
Anyway, we are trying to catch
up with that backlog of

00:19:05.220 --> 00:19:09.162
documentation and boilerplate
reduction.

00:19:09.162 --> 00:19:11.635
I think that was the
three-- oh, Unnur.

00:19:11.635 --> 00:19:11.743
[?

00:19:11.743 --> 00:19:12.940
UNNUR GRETARSDOTTIR:
[INAUDIBLE] ?]

00:19:12.940 --> 00:19:14.260
RAY RYAN: Right.

00:19:14.260 --> 00:19:15.310
So there's two--

00:19:15.310 --> 00:19:17.350
your first question was two
points, look and feel in

00:19:17.350 --> 00:19:20.150
general and CSS3
in particular.

00:19:20.150 --> 00:19:24.320
John LaBanca made a post
recently with a design

00:19:24.320 --> 00:19:25.720
proposal for a new generation
of widgets.

00:19:25.720 --> 00:19:31.560
If you use the Google search
engine to look for the term

00:19:31.560 --> 00:19:34.430
"GWT widgets that rock," you'll
find a very specific

00:19:34.430 --> 00:19:37.330
proposal for a new generation
of widgets that use an

00:19:37.330 --> 00:19:42.990
appearance pattern where the
look and feel is managed by a

00:19:42.990 --> 00:19:45.700
partner object that you have
strong control over how to

00:19:45.700 --> 00:19:48.380
customize it, and how
to keep that going.

00:19:48.380 --> 00:19:51.350
As those widgets get
implemented, John is taking

00:19:51.350 --> 00:19:57.160
advantage of CSS3 where he can
and retrograding with an

00:19:57.160 --> 00:19:59.170
adequate fallback path
for browsers that

00:19:59.170 --> 00:20:00.290
don't provide CSS3.

00:20:00.290 --> 00:20:02.550
But we're not hamstringing
ourselves by making sure that

00:20:02.550 --> 00:20:05.890
everything can render
faithfully on IE6.

00:20:05.890 --> 00:20:10.430
And then I'm going to give the
hot potato of proper CSS3

00:20:10.430 --> 00:20:13.800
support for ClientBundle
to Unnur.

00:20:13.800 --> 00:20:15.030
UNNUR GRETARSDOTTIR: OK.

00:20:15.030 --> 00:20:16.080
There is not--

00:20:16.080 --> 00:20:16.510
AUDIENCE: Stand up.

00:20:16.510 --> 00:20:17.500
UNNUR GRETARSDOTTIR: Sorry.

00:20:17.500 --> 00:20:20.730
I don't believe there's
full CSS3 support for

00:20:20.730 --> 00:20:22.010
ClientBundle slated.

00:20:22.010 --> 00:20:24.740
There may be, but I'm not
working on it right now.

00:20:24.740 --> 00:20:27.350
The one thing we did add
was that you can--

00:20:27.350 --> 00:20:29.670
it'll parse the double
colon selectors.

00:20:29.670 --> 00:20:33.060
So it's a very small thing for--
but if you were trying

00:20:33.060 --> 00:20:36.130
to use colon, colon, dash WebKit
radius or something,

00:20:36.130 --> 00:20:37.620
that will now work.

00:20:37.620 --> 00:20:38.040
[? RAY RYAN: You can ?]

00:20:38.040 --> 00:20:38.460
[? work  around a lot of ?]

00:20:38.460 --> 00:20:39.300
[INAUDIBLE]

00:20:39.300 --> 00:20:39.540
UNNUR GRETARSDOTTIR: Yeah.

00:20:39.540 --> 00:20:41.440
You can work around a lot of
stuff using Literal, but you

00:20:41.440 --> 00:20:43.160
could do that before.

00:20:43.160 --> 00:20:44.765
So sorry.

00:20:44.765 --> 00:20:47.555
AUDIENCE: One other thing was
the printing with cell tables.

00:20:47.555 --> 00:20:48.485
If you guys [? can example ?]

00:20:48.485 --> 00:20:50.036
because it's a common
requirement of

00:20:50.036 --> 00:20:52.030
[UNINTELLIGIBLE]

00:20:52.030 --> 00:20:55.830
RAY RYAN: The question there was
getting better support for

00:20:55.830 --> 00:20:57.370
printing with cell tables.

00:20:57.370 --> 00:20:59.963
And I will talk to the
guy most likely to

00:20:59.963 --> 00:21:00.952
make that to happen.

00:21:00.952 --> 00:21:02.202
AUDIENCE: Thank you.

00:21:04.120 --> 00:21:04.710
AUDIENCE: Hi.

00:21:04.710 --> 00:21:05.500
My name's Chris Jones.

00:21:05.500 --> 00:21:08.360
I work for Infogroup
Interactive, and I've been

00:21:08.360 --> 00:21:13.520
lovingly using GWT for a long
time on an email campaign

00:21:13.520 --> 00:21:17.330
management product.

00:21:17.330 --> 00:21:21.380
In our development workflow,
we have a lot of different

00:21:21.380 --> 00:21:26.840
needs for speed and fast
iterations, some of which work

00:21:26.840 --> 00:21:31.970
well with the DevMode model,
and some don't.

00:21:31.970 --> 00:21:36.310
So I'm wondering what kind of
items are on the road map to

00:21:36.310 --> 00:21:40.030
improve and cache not only the
DevMode experience, but also

00:21:40.030 --> 00:21:41.685
the straight up compiler
experience?

00:21:49.800 --> 00:21:50.280
JASON ROSENBERG: Yeah.

00:21:50.280 --> 00:21:53.380
So that's always an issue to
make DevMode as snappy as

00:21:53.380 --> 00:21:57.600
possible and still allow you to
separate points and debug

00:21:57.600 --> 00:22:02.300
and have an interactive
development experience.

00:22:02.300 --> 00:22:04.750
So we've definitely
been focusing on

00:22:04.750 --> 00:22:06.100
that in the last quarter.

00:22:06.100 --> 00:22:09.120
And we'll continue in the
next quarter on DevMode

00:22:09.120 --> 00:22:09.640
performance.

00:22:09.640 --> 00:22:14.460
And so we are working on some
enhancements that will be

00:22:14.460 --> 00:22:16.700
coming soon.

00:22:16.700 --> 00:22:18.240
I can't really talk about
all the details

00:22:18.240 --> 00:22:19.220
of what we're doing.

00:22:19.220 --> 00:22:23.290
But one big thing will be
caching previously generated

00:22:23.290 --> 00:22:26.220
results so you don't have to
keep regenerating things

00:22:26.220 --> 00:22:26.770
repeatedly.

00:22:26.770 --> 00:22:29.150
So watch this space.

00:22:29.150 --> 00:22:29.600
CHRIS RAMSDALE: Yeah.

00:22:29.600 --> 00:22:34.000
And to add to that, some of the
progress that we have made

00:22:34.000 --> 00:22:38.950
is actually being able to pick
apart what actually makes

00:22:38.950 --> 00:22:39.820
DevMode slow.

00:22:39.820 --> 00:22:42.970
So to me, it tries to replicate
what an external

00:22:42.970 --> 00:22:45.140
user would feel.

00:22:45.140 --> 00:22:47.080
It just looks like it
takes a long time.

00:22:47.080 --> 00:22:51.080
But Jason and a few others on
the team have done a great job

00:22:51.080 --> 00:22:53.820
of picking apart that and
saying, well, here's really

00:22:53.820 --> 00:22:55.710
where you're spending most of
your time, or where your

00:22:55.710 --> 00:22:58.020
DevMode is spending
most of its time.

00:22:58.020 --> 00:23:01.720
And it's been pretty
eye-opening.

00:23:01.720 --> 00:23:03.860
And it's great because it's
gives us the bang for our buck

00:23:03.860 --> 00:23:05.080
type of move.

00:23:05.080 --> 00:23:06.738
So I can definitely say that
some of the [? cache in the

00:23:06.738 --> 00:23:08.560
new enhancements ?].

00:23:08.560 --> 00:23:11.510
To be a little more specific,
we're looking at things like

00:23:11.510 --> 00:23:13.410
code generators running
all the time.

00:23:13.410 --> 00:23:14.580
Which is something we've
added a lot to.

00:23:14.580 --> 00:23:17.670
Like Ray and Bob and various
other people have--

00:23:17.670 --> 00:23:18.700
some of the magic about GWT--

00:23:18.700 --> 00:23:21.310
if you want to call it that--
is the ability to run code

00:23:21.310 --> 00:23:23.110
generators behind the scenes to
do a lot of the boilerplate

00:23:23.110 --> 00:23:24.200
that you don't need to write.

00:23:24.200 --> 00:23:27.350
Well, running those every time
can be a little inefficient.

00:23:27.350 --> 00:23:29.070
It gives you a great experience
because you can

00:23:29.070 --> 00:23:31.290
always get your app
up-to-date.

00:23:31.290 --> 00:23:33.670
But if you're running all the
time, and you're running 25 of

00:23:33.670 --> 00:23:35.490
them-- just throwing a
number out there--

00:23:35.490 --> 00:23:37.030
that can get a little timely.

00:23:37.030 --> 00:23:38.890
So they have looked into--
well, one of the ways of

00:23:38.890 --> 00:23:43.000
caching is obviously if you're
generating code, and that code

00:23:43.000 --> 00:23:44.810
has not changed, you
should cache it.

00:23:44.810 --> 00:23:46.530
And if you can read it from
disk, it becomes very fast.

00:23:46.530 --> 00:23:48.440
That's kind of where our
mind is right now.

00:23:48.440 --> 00:23:52.480
And I think we are actively
trying to get those into the

00:23:52.480 --> 00:23:53.990
2.4 final release.

00:23:53.990 --> 00:23:55.790
I didn't mention this
in the beginning.

00:23:55.790 --> 00:23:57.375
The 2.4 release that we're
talking about tomorrow is

00:23:57.375 --> 00:23:59.190
going to be a beta release.

00:23:59.190 --> 00:24:01.850
And then we're looking to do
an [? an RC uniphoner ?]

00:24:01.850 --> 00:24:05.820
release with two, three weeks
everywhere in between.

00:24:05.820 --> 00:24:07.040
So that's the timing we're
talking about.

00:24:07.040 --> 00:24:07.350
So yeah.

00:24:07.350 --> 00:24:09.080
I've been talking to Jason and
Eric and a few other folks

00:24:09.080 --> 00:24:10.820
about what we can do to
get that in there.

00:24:10.820 --> 00:24:11.800
So yeah.

00:24:11.800 --> 00:24:12.420
Keep an eye on it.

00:24:12.420 --> 00:24:14.960
And we'll definitely
have some updates.

00:24:14.960 --> 00:24:17.190
AUDIENCE: Are there any plans
to bring those types of

00:24:17.190 --> 00:24:18.670
optimizations into
the compiler?

00:24:21.650 --> 00:24:23.000
RAY RYAN: Jason, do you want to
say something about that?

00:24:25.570 --> 00:24:26.240
JASON ROSENBERG: Yes.

00:24:26.240 --> 00:24:26.725
Yes.

00:24:26.725 --> 00:24:29.424
So speeding up the compiler
process as well

00:24:29.424 --> 00:24:31.700
is a part of that.

00:24:31.700 --> 00:24:33.960
It may not be quite as dramatic
as the improvements

00:24:33.960 --> 00:24:35.060
we've seen with DevMode.

00:24:35.060 --> 00:24:40.408
But we definitely have some
targeted ideas about the

00:24:40.408 --> 00:24:41.990
compiler as well that we've--

00:24:41.990 --> 00:24:44.795
BRUCE JOHNSON: So we've picked a
couple of internal apps that

00:24:44.795 --> 00:24:46.190
are just massive apps.

00:24:46.190 --> 00:24:48.100
And so those are pretty good.

00:24:48.100 --> 00:24:49.945
They really stressed
the system a lot.

00:24:49.945 --> 00:24:53.640
And Jason and the other guys
he's working with are actually

00:24:53.640 --> 00:24:54.050
doing something.

00:24:54.050 --> 00:24:56.730
And I want to plug Speed Tracer,
too, just real quick.

00:24:56.730 --> 00:24:59.040
If you guys have not
seen Speed Tracer--

00:24:59.040 --> 00:25:01.180
actually would you mind raising
your hand if you have

00:25:01.180 --> 00:25:02.990
heard of Speed Tracer before?

00:25:02.990 --> 00:25:03.610
OK, good.

00:25:03.610 --> 00:25:05.730
OK, good, good, good.

00:25:05.730 --> 00:25:07.090
So that might be useful.

00:25:07.090 --> 00:25:08.570
You work on-- is it Yesmail?

00:25:08.570 --> 00:25:08.920
Is it?

00:25:08.920 --> 00:25:10.035
Is it still called Yesmail?

00:25:10.035 --> 00:25:10.450
OK.

00:25:10.450 --> 00:25:11.050
AUDIENCE: Yeah.

00:25:11.050 --> 00:25:12.020
Switched names, but yeah.

00:25:12.020 --> 00:25:12.280
BRUCE JOHNSON: OK.

00:25:12.280 --> 00:25:12.550
Cool.

00:25:12.550 --> 00:25:15.840
So if you haven't, Speed Tracer
is great for that.

00:25:15.840 --> 00:25:20.430
And what Jason and Toby and Eric
did was they basically--

00:25:20.430 --> 00:25:21.960
was it a separate build
with Speed Tracer?

00:25:21.960 --> 00:25:22.340
JASON ROSENBERG: Yeah.

00:25:22.340 --> 00:25:26.810
So we found a new way to use
Speed Tracer just to monitor

00:25:26.810 --> 00:25:30.595
the DevMode and compiler
process internally.

00:25:30.595 --> 00:25:34.315
So we instrumented the internal
GWT code to generate

00:25:34.315 --> 00:25:37.520
a Speed Tracer output file that
we can then visualize.

00:25:37.520 --> 00:25:39.950
And it's really been
eye-opening.

00:25:39.950 --> 00:25:42.500
We've been able to see where
the slow points are in the

00:25:42.500 --> 00:25:44.850
process and really
target those.

00:25:44.850 --> 00:25:48.340
And we're happy with
where we're headed.

00:25:48.340 --> 00:25:49.880
BRUCE JOHNSON: It's so cool
because you know normally with

00:25:49.880 --> 00:25:53.030
Speed Tracer, you see a graph of
where things get slow, and

00:25:53.030 --> 00:25:55.380
then you see the event list
of what all happens.

00:25:55.380 --> 00:25:58.300
Imagine the same thing except
what you're seeing is what is

00:25:58.300 --> 00:26:00.060
happening inside DevMode,
or what is

00:26:00.060 --> 00:26:01.940
happening inside the compiler.

00:26:01.940 --> 00:26:03.720
So it's not actually about
the app running.

00:26:03.720 --> 00:26:06.500
It's about the tools
themselves running.

00:26:06.500 --> 00:26:08.370
And so we jokingly call
it Tool Tracer.

00:26:08.370 --> 00:26:10.850
But it just reminded me though
that maybe we should make it

00:26:10.850 --> 00:26:13.420
somehow available if
it's not already.

00:26:13.420 --> 00:26:16.260
So that Chris instead of trying
to describe in this

00:26:16.260 --> 00:26:20.020
format what's going on, if you
could just send a dump of what

00:26:20.020 --> 00:26:23.515
you just experienced, and other
people did the same, we

00:26:23.515 --> 00:26:24.880
could maybe see patterns.

00:26:24.880 --> 00:26:27.360
I don't want to set expectations
too high on

00:26:27.360 --> 00:26:28.740
whether we'll be able
to prioritize that.

00:26:28.740 --> 00:26:33.340
But it would certainly add a lot
of detail so that we can

00:26:33.340 --> 00:26:35.066
do our best to make
it better for you.

00:26:35.066 --> 00:26:35.900
AUDIENCE: Thank you.

00:26:35.900 --> 00:26:36.040
JASON ROSENBERG: Yeah.

00:26:36.040 --> 00:26:37.560
You can come talk
me afterward.

00:26:37.560 --> 00:26:38.734
I can try to help
you with that.

00:26:38.734 --> 00:26:39.984
AUDIENCE: Cool.

00:26:42.150 --> 00:26:42.360
AUDIENCE: Hi.

00:26:42.360 --> 00:26:43.490
My name is
[? Steven Haberman. ?]

00:26:43.490 --> 00:26:45.710
I work for [? Gazoo. ?]

00:26:45.710 --> 00:26:47.420
We do online advertising.

00:26:47.420 --> 00:26:51.020
And yeah, so the new cell
widgets sound all sorts of

00:26:51.020 --> 00:26:51.860
really cool.

00:26:51.860 --> 00:26:53.080
Cell tables also really nice.

00:26:53.080 --> 00:26:54.640
And I get why the [? perf ?]

00:26:54.640 --> 00:26:55.730
benefits are great.

00:26:55.730 --> 00:26:59.420
But they're kind of not
really fun to use.

00:26:59.420 --> 00:27:02.560
And I think could be
much more so if--

00:27:02.560 --> 00:27:06.430
I've heard rumors of UiBinder
support for cell stuff, which

00:27:06.430 --> 00:27:08.500
I think would be terribly
awesome.

00:27:08.500 --> 00:27:10.620
It would make my life
much easier.

00:27:10.620 --> 00:27:12.610
Do you have any comments
on that?

00:27:12.610 --> 00:27:13.860
CHRIS RAMSDALE: Stephanie.

00:27:15.760 --> 00:27:16.190
RAY RYAN: Yes.

00:27:16.190 --> 00:27:19.940
We would like to add cell table
support to UiBinder.

00:27:19.940 --> 00:27:21.460
We'd like to have more
engineers too.

00:27:21.460 --> 00:27:25.940
But that's on the short list
of very next things.

00:27:25.940 --> 00:27:28.350
In the meantime though, if you
look at GWT Designer, it

00:27:28.350 --> 00:27:33.060
already has tremendous support
for cell table.

00:27:33.060 --> 00:27:35.510
GWT Designer is now
included in the

00:27:35.510 --> 00:27:36.790
Google Plugin for Eclipse.

00:27:36.790 --> 00:27:40.170
And it gives you this nice
little canvas where you can

00:27:40.170 --> 00:27:44.146
drag out your table and drop
columns onto it and specify if

00:27:44.146 --> 00:27:45.890
it's at this column or that
column or the other column.

00:27:45.890 --> 00:27:48.470
And it'll just get all of that
code laid out for you in the

00:27:48.470 --> 00:27:49.280
first place.

00:27:49.280 --> 00:27:53.510
So in the meantime, please
do look at that.

00:27:53.510 --> 00:27:53.830
AUDIENCE: Hi.

00:27:53.830 --> 00:27:56.290
My name is Steven Cohen, and
I work for inRESONANCE.

00:27:56.290 --> 00:28:00.040
We do software for independent
and private schools.

00:28:00.040 --> 00:28:02.750
And first thing I want to do
is I want to thank the GWT

00:28:02.750 --> 00:28:07.550
team because three years
ago my boss had

00:28:07.550 --> 00:28:08.850
me evaluating tools.

00:28:08.850 --> 00:28:12.790
And I showed him a couple of
early videos back in 1.4 days.

00:28:12.790 --> 00:28:15.520
And that's the reason why we've
converted everything

00:28:15.520 --> 00:28:18.740
we're doing webfacing to GWT.

00:28:18.740 --> 00:28:21.530
And we're still in the process
of migrating some of our

00:28:21.530 --> 00:28:26.465
back-end from an
old LAMP to--.

00:28:26.465 --> 00:28:30.280
So I wanted to thank you all
because you've made my life in

00:28:30.280 --> 00:28:33.370
managing that flow with the
other developers I work with

00:28:33.370 --> 00:28:34.630
so much easier.

00:28:34.630 --> 00:28:36.960
Got two questions.

00:28:36.960 --> 00:28:40.730
One is about java.util.Date.

00:28:40.730 --> 00:28:40.930
Yeah.

00:28:40.930 --> 00:28:43.720
I figured it would
get a laugh.

00:28:43.720 --> 00:28:46.475
Just to sum it up for anyone
who doesn't know because

00:28:46.475 --> 00:28:50.790
there's so much chatter out
there on what's the

00:28:50.790 --> 00:28:52.380
best thing to do.

00:28:52.380 --> 00:28:56.280
Currently you're using
deprecated code, deprecated

00:28:56.280 --> 00:28:58.590
calls if you want
to access that.

00:28:58.590 --> 00:29:00.480
And everybody's got
their own opinion.

00:29:00.480 --> 00:29:01.640
But I would love to
hear something

00:29:01.640 --> 00:29:03.930
definitive from you all.

00:29:03.930 --> 00:29:08.430
The other thing is about DevMode
in Chrome on the Mac.

00:29:08.430 --> 00:29:10.970
Again--

00:29:10.970 --> 00:29:13.660
and it's gotten so
much better.

00:29:13.660 --> 00:29:16.070
It still will time out
here and there.

00:29:16.070 --> 00:29:20.480
And I'm just interested in
having a better understanding

00:29:20.480 --> 00:29:24.700
of why, as opposed to when
will this be fixed.

00:29:24.700 --> 00:29:26.040
But I'd really like
to have a deeper

00:29:26.040 --> 00:29:27.730
understanding of what's different.

00:29:27.730 --> 00:29:29.850
And that might actually be
something that's more

00:29:29.850 --> 00:29:33.930
appropriate to ask to the Chrome
team than here since it

00:29:33.930 --> 00:29:37.100
looks like it's an issue with
how Chrome works with it.

00:29:37.100 --> 00:29:41.230
But I would love to hear
anything that you have to add.

00:29:41.230 --> 00:29:41.510
JOHN TAMPLIN: OK.

00:29:41.510 --> 00:29:48.420
So about java.util.Date, the
main problem is that the

00:29:48.420 --> 00:29:52.100
replacement in the JDK Calendar
still has some

00:29:52.100 --> 00:29:53.020
limitations.

00:29:53.020 --> 00:29:58.110
And the infrastructure simply
isn't there in the browser to

00:29:58.110 --> 00:30:00.030
provide all the functionality.

00:30:00.030 --> 00:30:03.340
So we would have to basically
download a whole bunch of

00:30:03.340 --> 00:30:05.575
extra code and data to
emulate Calendar.

00:30:08.600 --> 00:30:12.230
What most people are
using is Joda-Time.

00:30:12.230 --> 00:30:16.240
And there's a GWT emulation
part of that.

00:30:16.240 --> 00:30:20.060
There's been some requests
internally to basically

00:30:20.060 --> 00:30:23.250
support Joda-Time
built into GWT.

00:30:23.250 --> 00:30:27.450
But that complicates things
with an external project

00:30:27.450 --> 00:30:30.500
trying to keep up to
date in GWT and in

00:30:30.500 --> 00:30:31.750
the external project.

00:30:34.890 --> 00:30:39.230
And I've also heard that they're
planning to take

00:30:39.230 --> 00:30:43.330
Joda-Time or something very
similar in a later JDK.

00:30:43.330 --> 00:30:47.240
My guess is at that point we
would basically provide

00:30:47.240 --> 00:30:51.220
support for it directly
in GWT.

00:30:51.220 --> 00:30:55.220
The question about
Chrome speed.

00:30:55.220 --> 00:30:58.650
The basic problem is
there's object

00:30:58.650 --> 00:31:01.690
identity inside the browser.

00:31:01.690 --> 00:31:08.310
So if you pass an object in
JavaScript to Java, the same

00:31:08.310 --> 00:31:12.500
object twice, Chrome actually
gives the plugin two different

00:31:12.500 --> 00:31:14.870
NPAPI objects.

00:31:14.870 --> 00:31:18.940
And so in order for us to make
that work so it actually

00:31:18.940 --> 00:31:21.940
preserves the identity, we
actually have to put an

00:31:21.940 --> 00:31:25.600
attribute on every object that
goes over to Java, which means

00:31:25.600 --> 00:31:30.420
we have to go back across to V8
to look up that attribute.

00:31:30.420 --> 00:31:32.710
And so that slows it down.

00:31:32.710 --> 00:31:36.080
There's also an object identity
problem going the

00:31:36.080 --> 00:31:39.260
other direction, which we
actually can't work around.

00:31:39.260 --> 00:31:44.390
But it turns out that it only
matters in a few cases.

00:31:44.390 --> 00:31:48.490
So that's the basic
performance issue.

00:31:48.490 --> 00:31:53.230
There's been a couple of bugs
open on Chrome for a while.

00:31:53.230 --> 00:31:55.570
And my understanding--

00:31:55.570 --> 00:31:58.220
the guy who's worked with
them isn't here--

00:31:58.220 --> 00:32:00.600
but my understanding is that
they don't really want to

00:32:00.600 --> 00:32:04.470
spend much effort on fixing
NPAPI because it's on its way

00:32:04.470 --> 00:32:07.420
out, being replaced by Pepper.

00:32:07.420 --> 00:32:11.370
And so they would rather spend
the effort on making sure it

00:32:11.370 --> 00:32:14.520
worked properly in
the new API.

00:32:14.520 --> 00:32:18.550
CHRIS RAMSDALE: But we have a
couple of teams internally

00:32:18.550 --> 00:32:21.650
that are really focusing
on Chrome and apps

00:32:21.650 --> 00:32:22.470
that work on Chrome.

00:32:22.470 --> 00:32:25.880
And so while John is right that
they are looking towards

00:32:25.880 --> 00:32:29.280
Pepper as the future, NPAPI
is here, and it's now.

00:32:29.280 --> 00:32:31.935
And so there are a couple of
teams that are feeling the

00:32:31.935 --> 00:32:34.130
same pain internally.

00:32:34.130 --> 00:32:36.170
And not to mention the fact
that it works faster on

00:32:36.170 --> 00:32:37.530
Firefox than it does
on Chrome, I

00:32:37.530 --> 00:32:38.360
personally don't like.

00:32:38.360 --> 00:32:40.790
But that's just me.

00:32:40.790 --> 00:32:43.970
So yes, we're actively
looking into it.

00:32:43.970 --> 00:32:45.110
And as John--

00:32:45.110 --> 00:32:46.580
he did a great job describing
the problem.

00:32:46.580 --> 00:32:48.110
It's not an easy one.

00:32:48.110 --> 00:32:50.380
Patching Chrome is something
we've done.

00:32:50.380 --> 00:32:52.990
We've made commits to
WebKit, as well.

00:32:52.990 --> 00:32:54.700
But it's not just a
quick fix problem.

00:32:54.700 --> 00:32:57.780
And so yes, we're
looking into it.

00:32:57.780 --> 00:32:59.380
It would be tough to give you
a timeline on it right now

00:32:59.380 --> 00:33:02.370
even if you had asked.

00:33:02.370 --> 00:33:04.370
RAY RYAN: Let me ask the
audience a question about the

00:33:04.370 --> 00:33:06.150
date issue.

00:33:06.150 --> 00:33:08.730
And I'm making no promises here
at all, but I'm curious

00:33:08.730 --> 00:33:09.660
about the reaction.

00:33:09.660 --> 00:33:13.350
If we were to actually write
a minimal GWT date object,

00:33:13.350 --> 00:33:15.525
something that would work client
side and server side,

00:33:15.525 --> 00:33:20.720
that we could emulate
efficiently without providing

00:33:20.720 --> 00:33:22.745
every last bell and whistle,
but that you could also use

00:33:22.745 --> 00:33:25.290
server side for that kind of
convenience, would that be

00:33:25.290 --> 00:33:26.446
well received or would
that just be

00:33:26.446 --> 00:33:27.230
in the wrong direction?

00:33:27.230 --> 00:33:28.480
[APPLAUSE]

00:33:30.702 --> 00:33:31.198
OK.

00:33:31.198 --> 00:33:33.800
Some applause and about 1/8
of the hands went up.

00:33:33.800 --> 00:33:35.230
It's an interesting signal.

00:33:35.230 --> 00:33:37.430
Thank you.

00:33:37.430 --> 00:33:37.860
AUDIENCE: Hi.

00:33:37.860 --> 00:33:40.950
My name's Gary Miller from a
startup called Sumwise based

00:33:40.950 --> 00:33:42.510
out of Sydney, Australia.

00:33:42.510 --> 00:33:43.200
We're on the sandbox.

00:33:43.200 --> 00:33:47.020
Come get Tim Tams. No one seems
to want our Tim Tams.

00:33:47.020 --> 00:33:49.100
I'd like to say thank
you to the GWT team.

00:33:49.100 --> 00:33:49.825
Been a big fan.

00:33:49.825 --> 00:33:54.640
Been using it since 1.3 and then
quickly swapped to Trunk.

00:33:54.640 --> 00:33:59.150
Just a question, something that
I haven't seen around.

00:33:59.150 --> 00:34:03.300
Last year at I/O, Headless Speed
Tracer got mentioned.

00:34:03.300 --> 00:34:06.560
I'm interested in profiling so
the question extends into

00:34:06.560 --> 00:34:11.159
lightweight collections and
then on to testing.

00:34:11.159 --> 00:34:12.409
So just what's the status?

00:34:19.130 --> 00:34:21.550
CHRIS RAMSDALE: So
the status is--

00:34:21.550 --> 00:34:24.330
OK, so I'll take the lightweight
collections one.

00:34:24.330 --> 00:34:28.960
So the status on lightweight
collections is we've done a

00:34:28.960 --> 00:34:35.389
large amount of research on
where are you actually seeing

00:34:35.389 --> 00:34:37.504
the increase in size, and where

00:34:37.504 --> 00:34:38.639
do you see the increase--

00:34:38.639 --> 00:34:39.325
slowness basically.

00:34:39.325 --> 00:34:41.980
So like where do you get a code
size bloat, and where do

00:34:41.980 --> 00:34:43.330
you see slowness when
you use them?

00:34:43.330 --> 00:34:48.830
And what we found out right
now is that the--

00:34:48.830 --> 00:34:54.020
you really have to have a
perfect storm of basically

00:34:54.020 --> 00:34:56.620
implementation practices to
get the benefit of this.

00:34:56.620 --> 00:35:00.950
So for example, if you're
using HashMap--

00:35:00.950 --> 00:35:03.180
across your application you're
using HashMap with strings and

00:35:03.180 --> 00:35:05.410
then some with just
objects as IDs--

00:35:05.410 --> 00:35:06.960
then you actually end up
downloading a whole bunch of

00:35:06.960 --> 00:35:09.050
code that you don't actually
want to use.

00:35:09.050 --> 00:35:09.555
Or if you use--

00:35:09.555 --> 00:35:10.760
I think it was--

00:35:10.760 --> 00:35:12.150
HashSets versus HashMaps.

00:35:12.150 --> 00:35:14.320
But the point is that you had
to have exactly the right

00:35:14.320 --> 00:35:18.120
combination to shave off a
certain amount of code.

00:35:18.120 --> 00:35:19.180
AUDIENCE: Can I add
one thing to that?

00:35:19.180 --> 00:35:22.520
We're using Google
Collections.

00:35:22.520 --> 00:35:23.630
Fantastic on Chrome.

00:35:23.630 --> 00:35:25.182
Runs like a dog on Firefox.

00:35:28.040 --> 00:35:28.440
CHRIS RAMSDALE: That one I--

00:35:28.440 --> 00:35:30.250
RAY RYAN: You're talking about
the Guava code runs badly on

00:35:30.250 --> 00:35:31.630
Firefox, but not on Chrome?

00:35:31.630 --> 00:35:33.850
AUDIENCE: Well, it's
a profiling issue.

00:35:33.850 --> 00:35:38.040
So profiling is hard.

00:35:38.040 --> 00:35:41.930
That's the one thing that
I think it might be.

00:35:41.930 --> 00:35:45.203
But profiling just takes so much
time to set up and run

00:35:45.203 --> 00:35:49.140
and tear down that you kind of
do it every now and again.

00:35:49.140 --> 00:35:53.670
So Headless Speed Tracer would
probably help with the

00:35:53.670 --> 00:35:56.380
profiling stuff on the Chrome
side of things.

00:35:56.380 --> 00:36:01.090
I have no idea how you could
integrate Firefox profiling

00:36:01.090 --> 00:36:02.840
into a continuous build.

00:36:05.780 --> 00:36:07.030
Big app.

00:36:09.550 --> 00:36:10.800
CHRIS RAMSDALE: Yeah,
I don't have--

00:36:10.800 --> 00:36:12.933
so in terms of Google
Collections and when the

00:36:12.933 --> 00:36:13.210
slowness of--

00:36:13.210 --> 00:36:15.280
I don't have an answer off
the top of my head.

00:36:15.280 --> 00:36:18.230
But we can go back
and find more.

00:36:18.230 --> 00:36:19.150
AUDIENCE: Specifically
a profiling issue.

00:36:19.150 --> 00:36:22.462
I mean, just how-- best
practices on profiling.

00:36:22.462 --> 00:36:25.414
Where are we at with
that type of stuff?

00:36:25.414 --> 00:36:25.906
OK?

00:36:25.906 --> 00:36:26.400
Offline.

00:36:26.400 --> 00:36:27.650
CHRIS RAMSDALE: Yeah.

00:36:30.230 --> 00:36:31.060
AUDIENCE: Yes, hello.

00:36:31.060 --> 00:36:32.080
I'm [? D.J. Jarra. ?]

00:36:32.080 --> 00:36:36.020
I'm leading a team of
60 GWT developers.

00:36:36.020 --> 00:36:38.220
So I have two questions.

00:36:38.220 --> 00:36:41.700
The first is about
compilation time.

00:36:41.700 --> 00:36:45.570
So we are building very big
applications with GWT now.

00:36:45.570 --> 00:36:49.730
So each time my developers lose
one minute in front of

00:36:49.730 --> 00:36:53.490
the screen, at the end of
the day it's 60 minutes.

00:36:53.490 --> 00:36:56.130
So it's a lot of time for us.

00:36:56.130 --> 00:36:59.680
So will you work on improving
the completion time?

00:36:59.680 --> 00:37:02.860
And the second question is about
the Channel API from

00:37:02.860 --> 00:37:04.290
Google App Engine.

00:37:04.290 --> 00:37:08.630
So will you provide a wrapper
for this API?

00:37:08.630 --> 00:37:11.280
RAY RYAN: Could you repeat
the second question?

00:37:11.280 --> 00:37:14.840
AUDIENCE: There is a Channel API
in the Google App Engine.

00:37:14.840 --> 00:37:19.730
Will you provide a wrapper,
a web wrapper for it?

00:37:19.730 --> 00:37:21.980
RAY RYAN: For the compile speed
question, I think we

00:37:21.980 --> 00:37:23.270
answered that already.

00:37:23.270 --> 00:37:24.460
We're trying to make
it faster and we'll

00:37:24.460 --> 00:37:26.330
keep making it faster.

00:37:26.330 --> 00:37:28.090
There are very big teams inside
of Google too, and they

00:37:28.090 --> 00:37:30.430
all know our phone numbers so.

00:37:30.430 --> 00:37:32.890
CHRIS RAMSDALE: I have a
question about that.

00:37:32.890 --> 00:37:38.910
So we prioritize in making
DevMode faster and then making

00:37:38.910 --> 00:37:46.610
the compilation faster because
we think that the way people

00:37:46.610 --> 00:37:49.660
usually use GWT is by simply
using DevMode.

00:37:49.660 --> 00:37:51.740
So you run it, and then you do
a refresh in the browser.

00:37:51.740 --> 00:37:53.190
Is that not the case
with your team?

00:37:53.190 --> 00:37:56.440
Are you guys actually doing
compiles each time?

00:37:56.440 --> 00:37:59.570
AUDIENCE: In fact, we use
continuous integrations.

00:37:59.570 --> 00:38:04.800
Each time people commit some
change, you have to start a

00:38:04.800 --> 00:38:05.660
compilation.

00:38:05.660 --> 00:38:08.980
And if it's a big project,
it takes a lot of time.

00:38:08.980 --> 00:38:11.010
CHRIS RAMSDALE: So if end
up seeing errors in the

00:38:11.010 --> 00:38:14.510
continuous integration, you
might be off by a few commits

00:38:14.510 --> 00:38:16.720
or tens of commits or
something like that.

00:38:16.720 --> 00:38:17.370
Is that your point?

00:38:17.370 --> 00:38:19.820
You see a build breakage, and
you have to go back and figure

00:38:19.820 --> 00:38:21.000
out where it happened because
it might take

00:38:21.000 --> 00:38:23.900
hours to do your compile.

00:38:23.900 --> 00:38:25.220
OK.

00:38:25.220 --> 00:38:27.150
RAY RYAN: That's a
very good point.

00:38:27.150 --> 00:38:28.290
We are working on it.

00:38:28.290 --> 00:38:30.220
And we do get both
messages a lot.

00:38:30.220 --> 00:38:31.240
DevMode needs to be faster.

00:38:31.240 --> 00:38:32.295
The compiler needs
to be faster.

00:38:32.295 --> 00:38:37.220
The compiler is harder because
it has conflicting goals.

00:38:37.220 --> 00:38:40.060
We're trying to squeeze
your binary down

00:38:40.060 --> 00:38:40.870
as tight as we can.

00:38:40.870 --> 00:38:41.940
And that takes more time.

00:38:41.940 --> 00:38:44.030
And at the same time, you want
the compiler to run faster for

00:38:44.030 --> 00:38:47.600
obvious reasons, and there
are trade-offs.

00:38:47.600 --> 00:38:50.610
And the other question you asked
was about the App Engine

00:38:50.610 --> 00:38:51.750
Dev Channel--

00:38:51.750 --> 00:38:53.580
CHRIS RAMSDALE: Channel API.

00:38:53.580 --> 00:38:55.170
RAY RYAN: Yes, Channel
not Dev.

00:38:55.170 --> 00:38:57.150
The word channel was involved.

00:38:57.150 --> 00:38:58.900
We're not doing anything
specific

00:38:58.900 --> 00:39:00.820
to that at the moment.

00:39:00.820 --> 00:39:05.930
There are examples of GWT code
exposing that and using it.

00:39:05.930 --> 00:39:07.520
I don't think it's terribly
hard to roll your own.

00:39:07.520 --> 00:39:10.420
The example I'm thinking of--
did that ship as part of the

00:39:10.420 --> 00:39:12.060
App Engine demo?

00:39:12.060 --> 00:39:17.868
AUDIENCE: The demo last year was
the go-go Android dancers.

00:39:17.868 --> 00:39:20.772
Their source code
[UNINTELLIGIBLE PHRASE].

00:39:20.772 --> 00:39:24.480
So just look at last
year's I/O.

00:39:24.480 --> 00:39:26.880
RAY RYAN: From the audience,
Gary tells us that last year's

00:39:26.880 --> 00:39:29.923
I/O had a demo involving
go-go--

00:39:29.923 --> 00:39:30.890
AUDIENCE: Dance dance robot.

00:39:30.890 --> 00:39:32.840
RAY RYAN: --go-go dance
dance robot.

00:39:32.840 --> 00:39:34.590
The code for that
use channel--

00:39:34.590 --> 00:39:35.700
it is--

00:39:35.700 --> 00:39:37.600
CHRIS RAMSDALE: Oh.

00:39:37.600 --> 00:39:39.910
Where's Toby?

00:39:39.910 --> 00:39:43.590
AUDIENCE: Will you release a
specification of this API?

00:39:43.590 --> 00:39:47.300
Because some people want, for
example, to build a Java

00:39:47.300 --> 00:39:48.650
wrapper for this API.

00:39:48.650 --> 00:39:50.420
RAY RYAN: We should.

00:39:50.420 --> 00:39:51.800
It's not on the list
at the moment, but

00:39:51.800 --> 00:39:53.700
it should be there.

00:39:53.700 --> 00:39:55.970
So clearly we should
get to it.

00:39:55.970 --> 00:39:58.080
In the meantime, I would
look up Toby's demo and

00:39:58.080 --> 00:39:59.000
extract from that.

00:39:59.000 --> 00:40:03.440
And I expect he will have
put good code around it.

00:40:03.440 --> 00:40:05.680
CHRIS RAMSDALE: We did have some
internal teams looking

00:40:05.680 --> 00:40:06.150
into it too.

00:40:06.150 --> 00:40:11.120
They were doing kind of
an experiment with a

00:40:11.120 --> 00:40:13.960
collaborative application
using GWT.

00:40:13.960 --> 00:40:16.240
And we love App Engine.

00:40:16.240 --> 00:40:17.560
We really do.

00:40:17.560 --> 00:40:23.060
And they used the Browser
Channel to actually do it.

00:40:23.060 --> 00:40:25.810
And they weren't completely sold
on it was time to pull

00:40:25.810 --> 00:40:28.780
the trigger on creating
the APIs around it.

00:40:28.780 --> 00:40:31.370
Now this was, arguably,
five months ago.

00:40:31.370 --> 00:40:33.830
So what they were doing was they
were seeing a little bit

00:40:33.830 --> 00:40:36.230
of latency in the updates, or
they might miss an update here

00:40:36.230 --> 00:40:39.550
and there, which pushed them
to go a different route.

00:40:39.550 --> 00:40:41.760
So maybe it's in our best
interest to follow up with

00:40:41.760 --> 00:40:45.240
them too and see has
the API solidified?

00:40:45.240 --> 00:40:46.320
Does it feel solid?

00:40:46.320 --> 00:40:49.170
Is it time to actually bump that
up in priority to say,

00:40:49.170 --> 00:40:51.500
yeah, instead of doing IndexedDB
support for HTML5,

00:40:51.500 --> 00:40:55.530
let's go do Browser Channel
because it just makes sense.

00:40:55.530 --> 00:40:57.800
JOHN TAMPLIN: Some people were
also looking at the idea of

00:40:57.800 --> 00:41:00.420
having an abstraction that would
work on either Browser

00:41:00.420 --> 00:41:02.480
Channel or Web Sockets.

00:41:02.480 --> 00:41:05.710
So it would be one common
API to use with both.

00:41:05.710 --> 00:41:07.910
One question about your
compilation speed.

00:41:07.910 --> 00:41:10.770
Are you compiling just one
permutation or all the

00:41:10.770 --> 00:41:13.139
permutations?

00:41:13.139 --> 00:41:14.389
OK.

00:41:17.320 --> 00:41:20.170
RAY RYAN: The answer was one.

00:41:20.170 --> 00:41:20.470
AUDIENCE: OK.

00:41:20.470 --> 00:41:21.840
My name is Brett Connolly.

00:41:21.840 --> 00:41:24.590
I work for Intuit out
of Athens, Georgia.

00:41:24.590 --> 00:41:28.570
And the primary product that I
work on is an administrative

00:41:28.570 --> 00:41:32.970
platform built around
the Liferay portal.

00:41:32.970 --> 00:41:36.010
And I've seen a ton of questions
on the GWT Developer

00:41:36.010 --> 00:41:39.190
Forums, on portlet support.

00:41:39.190 --> 00:41:44.230
We currently use GWT Dispatch to
make our RPC requests up to

00:41:44.230 --> 00:41:46.790
our portlet resource handlers.

00:41:46.790 --> 00:41:51.110
And it works fine, but there
are some issues with

00:41:51.110 --> 00:41:53.940
maintainability when it comes
to upgrading GWT.

00:41:53.940 --> 00:41:59.520
And there are some core pieces
that we are missing.

00:41:59.520 --> 00:42:03.320
Is there any plans to actually
bring in portal support,

00:42:03.320 --> 00:42:04.950
portlet development
support into GWT?

00:42:09.910 --> 00:42:11.340
BRUCE JOHNSON: Yeah.

00:42:11.340 --> 00:42:14.730
So we don't really have
a stock answer

00:42:14.730 --> 00:42:15.950
to that exact question.

00:42:15.950 --> 00:42:18.430
So I'm just going to tell you my
opinion about it, which is

00:42:18.430 --> 00:42:23.040
that you have to sort of pick a
level of how much out of the

00:42:23.040 --> 00:42:26.030
box functionality do you want
to provide when you do

00:42:26.030 --> 00:42:27.600
something like GWT.

00:42:27.600 --> 00:42:30.600
And if we go too high, then it
becomes sort of a special

00:42:30.600 --> 00:42:31.270
purpose thing.

00:42:31.270 --> 00:42:33.990
And it might be good for
you, but not as good

00:42:33.990 --> 00:42:34.840
for some other people.

00:42:34.840 --> 00:42:37.510
And so we sort of don't
want to go that high.

00:42:37.510 --> 00:42:40.920
We're just like it's great as
long as all you want to do is

00:42:40.920 --> 00:42:43.160
portlets or portals.

00:42:43.160 --> 00:42:45.140
But then if you go too
low-level, then it doesn't

00:42:45.140 --> 00:42:47.700
provide quite enough
functionality out of the box.

00:42:47.700 --> 00:42:51.890
We try to strike a sweet spot so
that it's possible to kind

00:42:51.890 --> 00:42:54.830
of get a lot of value out of the
box for there to be other

00:42:54.830 --> 00:43:00.490
projects that can spring up that
you can use a third-party

00:43:00.490 --> 00:43:02.705
library or framework
based on GWT.

00:43:02.705 --> 00:43:05.950
And we've seen that work well in
other sort of subject areas

00:43:05.950 --> 00:43:07.770
on top of GWT--

00:43:07.770 --> 00:43:10.950
open source projects that
take advantage of it--

00:43:10.950 --> 00:43:14.220
and it raised the level, if you
use GWT as the base plus

00:43:14.220 --> 00:43:17.080
that project as sort
of a layer on top.

00:43:17.080 --> 00:43:20.040
And so for something as specific
as portals and

00:43:20.040 --> 00:43:23.190
portlet support, it feels to
me like that's a little bit

00:43:23.190 --> 00:43:25.810
higher level than we would tend
to do out of the box.

00:43:25.810 --> 00:43:29.080
So I guess I would just maybe
turn the question around to

00:43:29.080 --> 00:43:31.890
the audience and say, are you
guys aware of any good

00:43:31.890 --> 00:43:35.050
projects that try
to address this?

00:43:35.050 --> 00:43:37.720
And if there is, that it'd
be good for you to know.

00:43:37.720 --> 00:43:40.050
If there's not, then that might
be an opportunity for

00:43:40.050 --> 00:43:44.065
someone to start a project
of that sort.

00:43:44.065 --> 00:43:45.910
Does anybody--

00:43:45.910 --> 00:43:50.810
anybody else wanting portal
type support, portlets?

00:43:53.890 --> 00:43:58.030
It's a really tough call to
know exactly what to do.

00:43:58.030 --> 00:44:00.710
It's easy for us though to say,
it should be easy to just

00:44:00.710 --> 00:44:04.780
build the layer yourself
or just use iFrames or

00:44:04.780 --> 00:44:05.490
something like that.

00:44:05.490 --> 00:44:07.460
Of course, I know that's not--

00:44:07.460 --> 00:44:09.370
that may not be a very
satisfying answer though.

00:44:09.370 --> 00:44:11.760
AUDIENCE: And we built a
framework that actually works

00:44:11.760 --> 00:44:12.890
and works really well.

00:44:12.890 --> 00:44:14.810
But like I said, there are
a couple limitations in

00:44:14.810 --> 00:44:16.020
maintaining during upgrades.

00:44:16.020 --> 00:44:18.790
It's hard.

00:44:18.790 --> 00:44:20.630
And having that in the
core would be great,

00:44:20.630 --> 00:44:22.570
but we're fine now.

00:44:22.570 --> 00:44:23.370
BRUCE JOHNSON: So I
wanted to say--

00:44:23.370 --> 00:44:25.510
I want to just describe how we
think about it so you'll get a

00:44:25.510 --> 00:44:29.040
better feel for sort of what
you probably can bank on us

00:44:29.040 --> 00:44:32.410
doing versus you can say it's
probably less likely that we

00:44:32.410 --> 00:44:33.230
would do it.

00:44:33.230 --> 00:44:37.570
So if there are specific
lower-level plumbing pieces

00:44:37.570 --> 00:44:39.940
that would be needed for you
to build your own support,

00:44:39.940 --> 00:44:41.620
that's something that we
probably would do.

00:44:41.620 --> 00:44:43.870
So code splitting, for example,
is the kind of thing.

00:44:43.870 --> 00:44:44.880
It's kind of high-level.

00:44:44.880 --> 00:44:47.970
But it's also kind of low-level
and generic.

00:44:47.970 --> 00:44:50.960
Other things like
that might be--

00:44:50.960 --> 00:44:52.310
let us know if you
think of those.

00:44:52.310 --> 00:44:52.470
AUDIENCE: OK.

00:44:52.470 --> 00:44:53.780
Well, I appreciate the answer.

00:44:53.780 --> 00:44:55.350
RAY RYAN: Have you given
any thought to open

00:44:55.350 --> 00:44:56.940
sourcing your platform?

00:44:56.940 --> 00:45:00.080
AUDIENCE: I've thought about
it, but within our company

00:45:00.080 --> 00:45:02.570
there's political things that
have to go into contributing

00:45:02.570 --> 00:45:04.220
to open source.

00:45:04.220 --> 00:45:05.454
Makes it difficult.

00:45:05.454 --> 00:45:07.499
BRUCE JOHNSON: Now you can say
the GWT team said they didn't

00:45:07.499 --> 00:45:08.290
have any plans to do it so--

00:45:08.290 --> 00:45:08.770
AUDIENCE: Right.

00:45:08.770 --> 00:45:10.750
So we do it ourselves.

00:45:10.750 --> 00:45:12.000
So thank y'all.

00:45:14.080 --> 00:45:14.870
AUDIENCE: My name is
[? Jay Gindin. ?]

00:45:14.870 --> 00:45:16.090
I'm with [? App 2. ?]

00:45:16.090 --> 00:45:20.386
We do cost transparency for
large IT organizations.

00:45:20.386 --> 00:45:22.850
So when you're talking
about enterprise

00:45:22.850 --> 00:45:24.860
software, that's really--

00:45:24.860 --> 00:45:27.270
that's what we are.

00:45:27.270 --> 00:45:30.480
But along those same lines,
enterprises tend to use IE

00:45:30.480 --> 00:45:33.130
more than anything else.

00:45:33.130 --> 00:45:37.030
And unfortunately some of them
are even still stuck on IE6.

00:45:37.030 --> 00:45:39.600
And so my question is
kind of a follow-up

00:45:39.600 --> 00:45:41.550
on the earlier question.

00:45:41.550 --> 00:45:43.580
What plans do you guys have--

00:45:43.580 --> 00:45:45.660
Speed Tracer is great,
and it helps.

00:45:45.660 --> 00:45:49.770
But when we get into a real
issue, it often turns out that

00:45:49.770 --> 00:45:53.440
the tools that are available for
Chrome are great, but they

00:45:53.440 --> 00:45:55.110
don't actually give you any
insight into what's

00:45:55.110 --> 00:45:57.640
happening for IE.

00:45:57.640 --> 00:46:02.650
So do you guys have any thoughts
or plans to help out

00:46:02.650 --> 00:46:05.860
even though it's kind
of competitors.

00:46:05.860 --> 00:46:09.690
But it's really-- it's us who
are using GWT to build the

00:46:09.690 --> 00:46:11.010
apps for our customers.

00:46:11.010 --> 00:46:11.910
CHRIS RAMSDALE: Yeah.

00:46:11.910 --> 00:46:14.040
That's a great question.

00:46:14.040 --> 00:46:16.580
So sometimes there are--

00:46:16.580 --> 00:46:18.440
I'll be honest about this--
there are some legal

00:46:18.440 --> 00:46:22.420
constraints that we have with
doing certain products that

00:46:22.420 --> 00:46:23.330
would work with Microsoft.

00:46:23.330 --> 00:46:27.660
But that said, we have found
that Microsoft actually has a

00:46:27.660 --> 00:46:30.880
pretty good set of debugging
tools that you can use

00:46:30.880 --> 00:46:33.620
alongside their browsers
that will like--.

00:46:33.620 --> 00:46:35.880
So for example, I think
Speed Tracer is great.

00:46:35.880 --> 00:46:37.970
And when it comes to profiling,
it's one of the

00:46:37.970 --> 00:46:40.720
best. But Chrome Dev Tools
are really good.

00:46:40.720 --> 00:46:42.250
And Firebug is really good.

00:46:42.250 --> 00:46:44.680
And Microsoft has their own
versions, too, that we've

00:46:44.680 --> 00:46:45.330
actually used.

00:46:45.330 --> 00:46:46.010
I know Joel--

00:46:46.010 --> 00:46:47.700
I've seen it running on Joel's
machine quite a few times.

00:46:47.700 --> 00:46:51.060
AUDIENCE: Their dev tools have
gotten better, but they still

00:46:51.060 --> 00:46:54.190
kind of suck.

00:46:54.190 --> 00:46:57.520
Just like if you look at Speed
Tracer, it's very detailed and

00:46:57.520 --> 00:47:01.660
tells you, hey, you're spending
like half a second

00:47:01.660 --> 00:47:03.180
rendering this widget.

00:47:03.180 --> 00:47:06.040
And OK, you can usually
extrapolate and say, well, if

00:47:06.040 --> 00:47:07.660
I can make it better in Chrome,
it's going to be

00:47:07.660 --> 00:47:08.780
better in IE.

00:47:08.780 --> 00:47:11.370
But just because it's really
good in Chrome doesn't mean

00:47:11.370 --> 00:47:13.150
that it's also really
good in IE.

00:47:13.150 --> 00:47:14.750
And so you just have
no visibility.

00:47:14.750 --> 00:47:16.010
Right?

00:47:16.010 --> 00:47:19.390
The profiler that's in the
Microsoft dev tools just

00:47:19.390 --> 00:47:20.890
doesn't give you a whole lot.

00:47:20.890 --> 00:47:25.030
And what we found was there were
times where it just would

00:47:25.030 --> 00:47:28.110
hang and just do nothing.

00:47:28.110 --> 00:47:30.360
And basically your only recourse
at that point was to

00:47:30.360 --> 00:47:32.640
go kill the browser.

00:47:32.640 --> 00:47:33.470
CHRIS RAMSDALE: And you saw--

00:47:33.470 --> 00:47:35.860
I mean, hanging in terms of you
wouldn't actually be able

00:47:35.860 --> 00:47:37.160
to hit a break point
inside your--

00:47:37.160 --> 00:47:38.780
if you ran it in DevMode
for instance?

00:47:38.780 --> 00:47:41.000
AUDIENCE: Yeah, their dev tools
would just basically

00:47:41.000 --> 00:47:42.180
wind up hanging the browser.

00:47:42.180 --> 00:47:44.900
You just couldn't get any
information out of it.

00:47:44.900 --> 00:47:45.540
CHRIS RAMSDALE: That
is unfortunate.

00:47:45.540 --> 00:47:47.780
AUDIENCE: So if there's hooks
or anything that you can put

00:47:47.780 --> 00:47:53.340
into GWT, which it sounds like
maybe the other tracer tool

00:47:53.340 --> 00:47:57.140
you were talking about a few
minutes ago might go some

00:47:57.140 --> 00:47:58.650
distance towards helping.

00:47:58.650 --> 00:47:58.990
CHRIS RAMSDALE: Yeah.

00:47:58.990 --> 00:48:00.730
That's interesting.

00:48:00.730 --> 00:48:06.650
So the format for what Speed
Tracer can consume is out

00:48:06.650 --> 00:48:08.070
there for the public to see.

00:48:08.070 --> 00:48:11.630
And so you could theoretically
drop traces out of your

00:48:11.630 --> 00:48:12.370
application.

00:48:12.370 --> 00:48:15.350
This is not a trivial thing to
do, but it's possible that you

00:48:15.350 --> 00:48:17.240
could actually drop traces out
of your application that could

00:48:17.240 --> 00:48:20.262
be consumed by Speed Tracer.

00:48:20.262 --> 00:48:23.250
AUDIENCE: All right.

00:48:23.250 --> 00:48:27.980
AUDIENCE: Chrome Frame might
be a good tool to use also.

00:48:27.980 --> 00:48:29.440
CHRIS RAMSDALE: Yeah, actually
you raise a great point.

00:48:29.440 --> 00:48:32.090
I was going to ask this based
on your question.

00:48:32.090 --> 00:48:34.860
So if I can ask everybody
else here a question.

00:48:34.860 --> 00:48:37.790
I've heard over the past few
days that there still are a

00:48:37.790 --> 00:48:38.590
lot of IE users.

00:48:38.590 --> 00:48:41.040
I've heard quite a bit that IE6
is going away, and you're

00:48:41.040 --> 00:48:44.660
seeing a lot of potentially
your end-users using IE8.

00:48:44.660 --> 00:48:46.986
But it still doesn't totally
help us out because I'd love

00:48:46.986 --> 00:48:49.170
to see people get to IE9, which
starts to give us the

00:48:49.170 --> 00:48:51.170
ability to really push
the open web.

00:48:51.170 --> 00:48:54.530
But how many folks are still
having to support IE6 and--

00:48:54.530 --> 00:48:54.930
go ahead.

00:48:54.930 --> 00:48:55.860
We'll ask one at a time.

00:48:55.860 --> 00:48:57.426
So, OK.

00:48:57.426 --> 00:49:01.000
That's down from last year.

00:49:01.000 --> 00:49:04.350
And then how many-- it's
a two part question.

00:49:04.350 --> 00:49:07.290
How many people have actually
tried to get either their

00:49:07.290 --> 00:49:11.080
company or their end users
to use Chrome Frame?

00:49:11.080 --> 00:49:13.890
How many have had success?

00:49:13.890 --> 00:49:15.670
OK.

00:49:15.670 --> 00:49:16.530
All right.

00:49:16.530 --> 00:49:18.550
If you have any--

00:49:18.550 --> 00:49:21.560
we'd love to hear back with the
stories on how this works.

00:49:21.560 --> 00:49:23.990
Because we like to pitch it, but
it's still a tough thing

00:49:23.990 --> 00:49:25.130
to do because if
you get past--

00:49:25.130 --> 00:49:27.530
I'll be honest--

00:49:27.530 --> 00:49:29.100
if you can get them to start
thinking about it, as soon as

00:49:29.100 --> 00:49:30.985
you say, we have to install a
plugin to run the application,

00:49:30.985 --> 00:49:35.070
they kind of freak
out a little bit.

00:49:35.070 --> 00:49:37.910
AUDIENCE: So my question is
about optimization that the

00:49:37.910 --> 00:49:40.520
compiler could potentially do.

00:49:40.520 --> 00:49:45.770
I'm working on a file size
constrained device, so the

00:49:45.770 --> 00:49:49.030
ultimate generated code needs
to be as small as possible.

00:49:49.030 --> 00:49:53.480
So permutations kind of hinder
that when you get into seven

00:49:53.480 --> 00:49:57.020
or eight different languages
and three or four browsers.

00:49:57.020 --> 00:50:02.470
So the other thing I wondered
about is I'm also only using

00:50:02.470 --> 00:50:08.690
the client side functionality,
so having interface compatible

00:50:08.690 --> 00:50:12.050
code for Java is a little
overkill on

00:50:12.050 --> 00:50:14.460
the JavaScript side.

00:50:14.460 --> 00:50:18.170
So I wonder if there was
any plans to do kind of

00:50:18.170 --> 00:50:21.870
micro-optimization at that
point or file system type

00:50:21.870 --> 00:50:24.700
optimization.

00:50:24.700 --> 00:50:26.130
CHRIS RAMSDALE: Don't think
there's anything happening

00:50:26.130 --> 00:50:26.970
right this second.

00:50:26.970 --> 00:50:29.050
Optimizations we're doing,
we're talking more about

00:50:29.050 --> 00:50:30.700
DevMode and compilations.

00:50:30.700 --> 00:50:35.130
I would suggest that there was
a talk given last year by Ray

00:50:35.130 --> 00:50:38.840
Cromwell that can find on
YouTube that details just

00:50:38.840 --> 00:50:40.950
about-- it's called Faster
Apps Faster--

00:50:40.950 --> 00:50:44.810
and details just about every
possible compiler flag you can

00:50:44.810 --> 00:50:50.160
throw at the GWT compiler
to reduce your overall

00:50:50.160 --> 00:50:53.830
compilation artifacts as well
as compilation time.

00:50:53.830 --> 00:50:57.320
So that might be a good start.

00:50:57.320 --> 00:50:59.134
And that's what I have to say.

00:50:59.134 --> 00:51:01.310
BRUCE JOHNSON: I just wanted
to add a couple things.

00:51:01.310 --> 00:51:05.320
What kind of device are
you talking about?

00:51:05.320 --> 00:51:07.210
AUDIENCE: I'm not sure that
I can say at this point.

00:51:07.210 --> 00:51:09.400
But we're talking--

00:51:09.400 --> 00:51:12.960
I'm looking to get our client
down to, say, five megs.

00:51:12.960 --> 00:51:13.460
BRUCE JOHNSON: OK.

00:51:13.460 --> 00:51:15.650
And how big is it now?

00:51:15.650 --> 00:51:19.160
AUDIENCE: Right now, I only
have a few pages, and I'm

00:51:19.160 --> 00:51:22.900
already up to about
three or four.

00:51:22.900 --> 00:51:24.890
BRUCE JOHNSON: Is that
[? obfuscated? ?]

00:51:24.890 --> 00:51:26.340
AUDIENCE: Yes.

00:51:26.340 --> 00:51:32.270
BRUCE JOHNSON: So something
sounds weird.

00:51:32.270 --> 00:51:34.890
AUDIENCE: Well, I've got
30 permutations so--

00:51:34.890 --> 00:51:35.700
BRUCE JOHNSON: Oh, oh.

00:51:35.700 --> 00:51:37.560
You're talking about not
per permutation.

00:51:37.560 --> 00:51:37.720
You're talking about--

00:51:37.720 --> 00:51:38.270
AUDIENCE: Not per permutation.

00:51:38.270 --> 00:51:40.290
I'm talking overall.

00:51:40.290 --> 00:51:41.076
CHRIS RAMSDALE: You
don't have to go--

00:51:41.076 --> 00:51:41.522
[UNINTELLIGIBLE]

00:51:41.522 --> 00:51:41.968
limited.

00:51:41.968 --> 00:51:42.414
[UNINTELLIGIBLE]

00:51:42.414 --> 00:51:42.860
limited.

00:51:42.860 --> 00:51:44.890
BRUCE JOHNSON: It's limited
disk space, so to speak.

00:51:44.890 --> 00:51:46.020
Flash or whatever.

00:51:46.020 --> 00:51:46.690
AUDIENCE: Limited disk
space, correct.

00:51:46.690 --> 00:51:50.250
BRUCE JOHNSON: So for that I
would say, do you actually

00:51:50.250 --> 00:51:51.720
need those permutations?

00:51:51.720 --> 00:51:54.100
Are you just getting those
permutations out of the box?

00:51:54.100 --> 00:51:55.310
Is one question you should--

00:51:55.310 --> 00:51:56.520
AUDIENCE: No, I've actually
trimmed it down to the

00:51:56.520 --> 00:52:00.440
necessary languages that
we need to support.

00:52:00.440 --> 00:52:04.300
Now I have seen that you can
have a monolithic kind of

00:52:04.300 --> 00:52:05.960
internationalization
happening.

00:52:05.960 --> 00:52:09.140
But that seemed kind
of overkill.

00:52:09.140 --> 00:52:10.630
BRUCE JOHNSON: Well,
you can, but--.

00:52:10.630 --> 00:52:13.010
So there's this idea of
soft permutations.

00:52:13.010 --> 00:52:14.630
And I think that's one.

00:52:14.630 --> 00:52:15.950
Are you aware of that idea?

00:52:15.950 --> 00:52:16.360
Soft permutations?

00:52:16.360 --> 00:52:16.780
AUDIENCE: No.

00:52:16.780 --> 00:52:17.710
BRUCE JOHNSON: OK.

00:52:17.710 --> 00:52:19.790
Do we have some good threads
on that on the groups about

00:52:19.790 --> 00:52:20.390
soft permutations?

00:52:20.390 --> 00:52:22.740
I'm trying to give him
a reference for--

00:52:22.740 --> 00:52:25.437
because nobody will remember
anything we say right this

00:52:25.437 --> 00:52:25.940
second probably.

00:52:25.940 --> 00:52:27.040
RAY RYAN: There's a
wiki page for it.

00:52:27.040 --> 00:52:27.300
[UNINTELLIGIBLE]

00:52:27.300 --> 00:52:28.070
BRUCE JOHNSON: There's
a page for it?

00:52:28.070 --> 00:52:29.710
There's a wiki page for
soft permutations.

00:52:29.710 --> 00:52:32.650
So what you can do is basically
compile it all into

00:52:32.650 --> 00:52:36.420
one JavaScript file and then
do a runtime decision.

00:52:36.420 --> 00:52:38.680
So every GWT.create
call right now--

00:52:38.680 --> 00:52:40.560
or not every, but typically--

00:52:40.560 --> 00:52:42.100
that's where the
code fans out.

00:52:42.100 --> 00:52:45.050
It's where the universe splits
into different JavaScript

00:52:45.050 --> 00:52:46.140
compilations.

00:52:46.140 --> 00:52:48.810
But soft permutations collapses
it so that it's

00:52:48.810 --> 00:52:49.690
actually a runtime decision.

00:52:49.690 --> 00:52:52.680
It actually stays inside the
same JavaScript file.

00:52:52.680 --> 00:52:57.920
However, there is going to
ultimately be some limit as to

00:52:57.920 --> 00:53:00.340
how small you could make
it even best case.

00:53:00.340 --> 00:53:03.960
But you do avoid some
duplication of, like the UI

00:53:03.960 --> 00:53:06.190
code wouldn't get repeated
in each permutation.

00:53:06.190 --> 00:53:09.860
With soft permutations, you have
the UI code plus the sum

00:53:09.860 --> 00:53:11.980
of all the additional
code for each of

00:53:11.980 --> 00:53:13.830
the localized versions.

00:53:13.830 --> 00:53:14.280
AUDIENCE: OK.

00:53:14.280 --> 00:53:16.000
As I recall, I read something
about that.

00:53:16.000 --> 00:53:18.860
And you lose like number
formatting or currency

00:53:18.860 --> 00:53:22.900
formatting on the
locale level.

00:53:22.900 --> 00:53:26.060
BRUCE JOHNSON: You might want
to say something about that.

00:53:26.060 --> 00:53:28.810
JOHN TAMPLIN: So for
the [? ITN ?]

00:53:28.810 --> 00:53:33.000
side of it, there's runtime
locales, which doesn't get you

00:53:33.000 --> 00:53:37.370
different translations, but it
gets you runtime switching

00:53:37.370 --> 00:53:40.230
between country-specific
formats.

00:53:40.230 --> 00:53:44.670
So you can have just a Spanish
translation, and then you

00:53:44.670 --> 00:53:48.730
still get all the different
date-time formats, currencies,

00:53:48.730 --> 00:53:52.530
et cetera, for each different
country that you're using.

00:53:52.530 --> 00:53:56.050
The soft permutations can
be used on top of that.

00:53:56.050 --> 00:53:59.290
I'm not sure how well that's
going to work for you.

00:53:59.290 --> 00:54:05.840
But if you have just one
browser, you should be able to

00:54:05.840 --> 00:54:13.290
get it down to only the
different languages for your

00:54:13.290 --> 00:54:14.170
permutations.

00:54:14.170 --> 00:54:15.960
Is that what you already
have done?

00:54:15.960 --> 00:54:19.290
AUDIENCE: We're actually
supporting three browsers at

00:54:19.290 --> 00:54:20.960
the moment.

00:54:20.960 --> 00:54:23.730
JOHN TAMPLIN: Yeah, most things
in GWT, we felt like

00:54:23.730 --> 00:54:27.250
the disk space is cheap, and so
if we can make things run

00:54:27.250 --> 00:54:30.460
faster by using more space on
the server, that's a good

00:54:30.460 --> 00:54:32.180
thing to do.

00:54:32.180 --> 00:54:33.670
You can turn some of that off.

00:54:33.670 --> 00:54:37.530
Like for example, inlining
images and things like that.

00:54:40.080 --> 00:54:43.430
BRUCE JOHNSON: Yeah, I guess
the sort of roll up thought

00:54:43.430 --> 00:54:45.060
there is, look at a
compile report.

00:54:45.060 --> 00:54:46.020
Are you familiar with
how to do that?

00:54:46.020 --> 00:54:47.010
AUDIENCE: Yeah, definitely.

00:54:47.010 --> 00:54:48.090
BRUCE JOHNSON: Look at
the compile report.

00:54:48.090 --> 00:54:50.700
Consider soft permutations.

00:54:50.700 --> 00:54:56.190
And double check how your
resources are getting inlined.

00:54:56.190 --> 00:54:58.150
Maybe something is happening.

00:54:58.150 --> 00:55:00.860
If they're using data URLs,
they're getting inlined into

00:55:00.860 --> 00:55:02.740
the script, and then that's
getting duplicated across

00:55:02.740 --> 00:55:03.260
permutations.

00:55:03.260 --> 00:55:05.950
That can get really big.

00:55:05.950 --> 00:55:08.620
So the answer is probably
already there in your data.

00:55:08.620 --> 00:55:10.690
Do you have like a million
plus lines

00:55:10.690 --> 00:55:12.860
of Java source code?

00:55:12.860 --> 00:55:13.900
AUDIENCE: Getting up there.

00:55:13.900 --> 00:55:15.450
BRUCE JOHNSON: OK.

00:55:15.450 --> 00:55:17.680
You should be able
to work this out.

00:55:17.680 --> 00:55:22.500
It's just a matter of cleverly
arranging the switches and

00:55:22.500 --> 00:55:23.880
compile settings probably.

00:55:23.880 --> 00:55:24.270
AUDIENCE: OK.

00:55:24.270 --> 00:55:24.830
Thank you.

00:55:24.830 --> 00:55:27.270
One more quick thing
before I go.

00:55:27.270 --> 00:55:31.820
How many of you all hang
out in the IRC Channel?

00:55:31.820 --> 00:55:32.510
Any of you?

00:55:32.510 --> 00:55:35.800
CHRIS RAMSDALE: I think you can
always find Kelly Norton

00:55:35.800 --> 00:55:36.980
there, actually.

00:55:36.980 --> 00:55:37.990
AUDIENCE: OK.

00:55:37.990 --> 00:55:39.360
I was just curious.

00:55:39.360 --> 00:55:40.970
I don't know how many of the
people that hang out there

00:55:40.970 --> 00:55:42.860
were actually GWT developers.

00:55:42.860 --> 00:55:44.520
CHRIS RAMSDALE: There's
a [? K. Norton. ?]

00:55:44.520 --> 00:55:45.310
RAY RYAN: Not too many of us.

00:55:45.310 --> 00:55:47.190
One or two people pop in
every now and then.

00:55:47.190 --> 00:55:49.270
We are starting to pay more
attention to stack overflow

00:55:49.270 --> 00:55:51.370
these days.

00:55:51.370 --> 00:55:52.440
AUDIENCE: Thank you.

00:55:52.440 --> 00:55:55.020
CHRIS RAMSDALE: So we've
got 3 minutes and 16

00:55:55.020 --> 00:55:56.130
seconds and 4 questions.

00:55:56.130 --> 00:55:58.020
Let's see how fast
we can do this.

00:55:58.020 --> 00:55:58.510
AUDIENCE: Quick question.

00:55:58.510 --> 00:55:59.280
My name's Spencer Gibb.

00:55:59.280 --> 00:56:01.590
I work for the LDS Church.

00:56:01.590 --> 00:56:08.550
Question about support for
custom UiBinder XML handlers.

00:56:08.550 --> 00:56:10.290
RAY RYAN: Yes.

00:56:10.290 --> 00:56:14.940
We still don't have any plans to
open up the UiBinder Custom

00:56:14.940 --> 00:56:18.640
Parser API just for fear of
the support nightmare.

00:56:18.640 --> 00:56:21.470
However, some recent changes
that you might not be aware of

00:56:21.470 --> 00:56:23.700
have dramatically reduced
the need for that.

00:56:23.700 --> 00:56:26.840
Have you found the UiChild
annotation?

00:56:26.840 --> 00:56:27.700
AUDIENCE: Uh-uh.

00:56:27.700 --> 00:56:32.200
RAY RYAN: So, UiChild lets you
annotate method on a widget to

00:56:32.200 --> 00:56:35.100
be called for child widgets.

00:56:35.100 --> 00:56:38.490
And so it used to be that if
you wanted to have widgets

00:56:38.490 --> 00:56:40.030
inside your widget, you
had to implement the

00:56:40.030 --> 00:56:41.480
Has Children interface.

00:56:41.480 --> 00:56:43.510
You now have much, much more
control over that.

00:56:43.510 --> 00:56:47.310
You can decorate as many methods
as you want to accept

00:56:47.310 --> 00:56:48.830
children of specific types.

00:56:48.830 --> 00:56:50.720
You can put limits on to how
many of them you will actually

00:56:50.720 --> 00:56:53.220
accept and that kind of thing.

00:56:53.220 --> 00:56:59.010
So the combination of that and
the UiConstructor and UI

00:56:59.010 --> 00:57:01.400
Factory Annotations that give
you some control over how

00:57:01.400 --> 00:57:06.300
things get created and the
existing bean parsing

00:57:06.300 --> 00:57:09.600
conventions of Set Property
and so on.

00:57:09.600 --> 00:57:12.230
Internally, we've been finding
a lot fewer people asking us

00:57:12.230 --> 00:57:14.110
to write new custom
parsers for them.

00:57:14.110 --> 00:57:17.400
I can't remember the last one
that actually got written.

00:57:17.400 --> 00:57:20.240
It doesn't help you retrofit
existing widgets.

00:57:20.240 --> 00:57:22.380
But if you are running your own
widgets, you've got a lot

00:57:22.380 --> 00:57:24.050
more control than you
used to have.

00:57:24.050 --> 00:57:24.380
AUDIENCE: Great.

00:57:24.380 --> 00:57:26.340
Thank you.

00:57:26.340 --> 00:57:29.970
RAY RYAN: We should probably
document that.

00:57:29.970 --> 00:57:30.850
AUDIENCE: Hi.

00:57:30.850 --> 00:57:31.520
I'm [? Xi ?]

00:57:31.520 --> 00:57:31.850
[? Wang ?]

00:57:31.850 --> 00:57:33.690
from Solium Capital.

00:57:33.690 --> 00:57:37.680
We let people exercise their
stock options, view reports on

00:57:37.680 --> 00:57:40.210
their stock options, et
cetera, all via GWT.

00:57:40.210 --> 00:57:43.140
So we've had a lot
of success there.

00:57:43.140 --> 00:57:47.160
My question is about
direct-eval RPC.

00:57:47.160 --> 00:57:48.460
Does it still have a future?

00:57:48.460 --> 00:57:52.210
And if not, were there issues
with that approach that

00:57:52.210 --> 00:57:57.790
resulted in it being
a dead end?

00:57:57.790 --> 00:58:00.172
RAY RYAN: The guy who knows the
most about that was smart

00:58:00.172 --> 00:58:01.210
and hid today.

00:58:01.210 --> 00:58:05.210
But deRPC is all
but deprecated.

00:58:05.210 --> 00:58:07.330
Really, we should just put the
deprecated label on it.

00:58:07.330 --> 00:58:09.428
CHRIS RAMSDALE: Hence, D-E
in front of the RPC.

00:58:09.428 --> 00:58:10.280
RAY RYAN: That's right.

00:58:10.280 --> 00:58:12.000
It is the de-RPC.

00:58:12.000 --> 00:58:14.640
It didn't live up
to its promise.

00:58:14.640 --> 00:58:16.830
We didn't get as dramatic an
improvement as we expected.

00:58:16.830 --> 00:58:20.160
And that improvement is less and
less as browsers get more

00:58:20.160 --> 00:58:21.200
and more modern.

00:58:21.200 --> 00:58:24.350
The code base is a nightmare
to maintain.

00:58:24.350 --> 00:58:27.950
The two big problems that it
solves, the ability to

00:58:27.950 --> 00:58:30.940
serialize final fields, there
is a patch that continues to

00:58:30.940 --> 00:58:36.780
be this close to fixing that
problem for regular GWT RPC.

00:58:36.780 --> 00:58:38.120
If you look at our
[? write build ?]

00:58:38.120 --> 00:58:40.665
tracker, you'll see that it
keeps getting woken up again

00:58:40.665 --> 00:58:42.170
as a particular person
gets poked on the

00:58:42.170 --> 00:58:42.860
shoulder about it.

00:58:42.860 --> 00:58:45.730
It will land soon,
I'm certain.

00:58:45.730 --> 00:58:48.750
The other problem that
it solved was--

00:58:48.750 --> 00:58:49.320
CHRIS RAMSDALE: Are you
talking about the

00:58:49.320 --> 00:58:50.410
serialization?

00:58:50.410 --> 00:58:51.333
RAY RYAN: The slow
script problem.

00:58:51.333 --> 00:58:54.730
And I don't know that we
really have a good

00:58:54.730 --> 00:58:56.525
answer for that yet.

00:58:59.030 --> 00:59:00.280
Yes.

00:59:02.220 --> 00:59:04.630
I've been reminded that part of
the reason that we're less

00:59:04.630 --> 00:59:06.380
concerned about that is that
we have in the meantime

00:59:06.380 --> 00:59:10.400
introduced an alternative RPC
system, the RequestFactory,

00:59:10.400 --> 00:59:14.940
which doesn't have any of these
problems and is also

00:59:14.940 --> 00:59:19.160
more opinionated than GridRPC in
how one should structure an

00:59:19.160 --> 00:59:21.790
RPC layer properly, and keeps
you out of a lot of the

00:59:21.790 --> 00:59:25.130
problems that GridRPC leads you
into with ballooning code

00:59:25.130 --> 00:59:27.290
size as you serialize things
you didn't mean to and that

00:59:27.290 --> 00:59:29.750
kind of a thing.

00:59:29.750 --> 00:59:33.600
We don't have it explicitly on
our road map to try to make

00:59:33.600 --> 00:59:36.830
those two RPC systems converge,
but conversations

00:59:36.830 --> 00:59:38.340
like that are ongoing.

00:59:38.340 --> 00:59:43.310
But to the question you asked,
deRPC, not so supported.

00:59:43.310 --> 00:59:45.230
CHRIS RAMSDALE: Can we-- do we
have time for-- should we--

00:59:45.230 --> 00:59:45.560
Nope.

00:59:45.560 --> 00:59:46.200
We have to cut to.

00:59:46.200 --> 00:59:47.330
So we'll be hanging around.

00:59:47.330 --> 00:59:48.980
I know we have two
other questions.

00:59:48.980 --> 00:59:52.020
Please feel free to come
say hi and ask us.

00:59:52.020 --> 00:59:53.390
But I appreciate everybody
coming out.

00:59:53.390 --> 00:59:54.290
And I hope this was
beneficial.

00:59:54.290 --> 00:59:55.160
We thoroughly enjoyed it.

00:59:55.160 --> 00:59:56.640
Thanks a lot.

