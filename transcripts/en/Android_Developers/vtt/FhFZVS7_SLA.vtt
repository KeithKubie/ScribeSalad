WEBVTT
Kind: captions
Language: en

00:00:16.520 --> 00:00:18.038
YOSSI ELKRIEF: We can't
hear you guys.

00:00:28.700 --> 00:00:29.950
No?

00:00:37.160 --> 00:00:40.970
Is it just me, or anyone
else can hear them?

00:00:40.970 --> 00:00:43.420
WEIBE ELSINGA: No, I can't
hear them either.

00:00:43.420 --> 00:00:44.710
MALE SPEAKER: And I too
couldn't hear him.

00:00:50.785 --> 00:00:53.630
Now it's OK.

00:00:53.630 --> 00:00:53.930
RICHARD HYMAN: OK.

00:00:53.930 --> 00:00:56.110
We just thought we might
even be toast.

00:00:56.110 --> 00:00:58.880
We can see the little bars going
red every time I talk.

00:00:58.880 --> 00:01:01.160
OK, well, welcome to this
week's Android Developer

00:01:01.160 --> 00:01:02.920
Office Hours.

00:01:02.920 --> 00:01:05.110
It turns out there's a mute
button on our microphone, and

00:01:05.110 --> 00:01:07.200
I just pushed it while trying
to get the microphone out of

00:01:07.200 --> 00:01:11.360
shot to reveal the lovely pink
Android car here, instead.

00:01:11.360 --> 00:01:12.760
It's not really an
Android car.

00:01:12.760 --> 00:01:14.770
It's just an Android
driving it.

00:01:14.770 --> 00:01:17.470
I'm Richard Hyman, and
I'm joined today by--

00:01:17.470 --> 00:01:19.560
CHRIS BAINES: Chris Baines.

00:01:19.560 --> 00:01:20.810
RICHARD HYMAN: Developer
programs engineer.

00:01:24.320 --> 00:01:25.420
Thanks, all, for joining.

00:01:25.420 --> 00:01:29.140
As normal, this will be an
Android developer discussion.

00:01:29.140 --> 00:01:31.995
We won't be making any product
announcements, talking about

00:01:31.995 --> 00:01:34.960
roadmaps, that sort of thing,
so please don't ask.

00:01:34.960 --> 00:01:38.550
We have a moderator that we'll
be taking questions from, and

00:01:38.550 --> 00:01:42.580
also the comment stream
for the Google+ post.

00:01:42.580 --> 00:01:44.690
Welcome to everyone who's joined
us in the Hangout.

00:01:44.690 --> 00:01:48.560
A few familiar faces again,
thank you all, joining.

00:01:48.560 --> 00:01:50.490
If you want to say hi, we've
got Yossi there, hey Yossi.

00:01:50.490 --> 00:01:51.990
YOSSI ELKRIEF: Hi, guys.

00:01:51.990 --> 00:01:54.340
RICHARD HYMAN: Wiebe, from
Holland, next to him there.

00:01:54.340 --> 00:01:55.260
WEIBE ELSINGA: Hi.

00:01:55.260 --> 00:01:56.400
RICHARD HYMAN: One of the
founders of the Dutch Android

00:01:56.400 --> 00:01:58.695
User Group, as his lower
third is saying.

00:01:58.695 --> 00:01:59.030
[? Leonid, ?]

00:01:59.030 --> 00:02:01.160
I believe, works with Yossi?

00:02:01.160 --> 00:02:03.615
MALE SPEAKER: Yeah, a
new one [INAUDIBLE].

00:02:03.615 --> 00:02:06.220
RICHARD HYMAN: First
timer on our show?

00:02:06.220 --> 00:02:07.212
MALE SPEAKER: Yeah,
first time.

00:02:07.212 --> 00:02:09.595
RICHARD HYMAN: Etienne, hi
there, good to see you again.

00:02:09.595 --> 00:02:11.470
ETIENNE LAWLOR: Hey,
how's it going?

00:02:11.470 --> 00:02:12.810
RICHARD HYMAN: Really
good, thanks.

00:02:12.810 --> 00:02:13.940
Having a good week.

00:02:13.940 --> 00:02:15.330
Is that Ali on the end there?

00:02:15.330 --> 00:02:16.670
Hi there.

00:02:16.670 --> 00:02:17.390
ALI DERBANE: Hello.

00:02:17.390 --> 00:02:19.770
RICHARD HYMAN: Good
to see you.

00:02:19.770 --> 00:02:22.440
We were just discussing before
we went live, not so much

00:02:22.440 --> 00:02:25.270
happening in the Android
world this week.

00:02:25.270 --> 00:02:29.602
After CES finished last week,
we've had quite a quiet week.

00:02:29.602 --> 00:02:31.240
CHRIS BAINES: Yeah,
a long January.

00:02:31.240 --> 00:02:32.600
RICHARD HYMAN: Yeah,
slow January.

00:02:32.600 --> 00:02:34.890
Nick's not with us today, so
we've been joined by this

00:02:34.890 --> 00:02:38.720
Android who drives his own car
around, believe it or not.

00:02:43.340 --> 00:02:43.740
Android left.

00:02:43.740 --> 00:02:45.400
Android right.

00:02:45.400 --> 00:02:47.140
We have a whole fleet of these
things now, they race around

00:02:47.140 --> 00:02:50.410
the office and scare people.

00:02:50.410 --> 00:02:51.821
CHRIS BAINES: Especially when
we drive them around the

00:02:51.821 --> 00:02:52.540
office on a Friday afternoon.

00:02:52.540 --> 00:02:53.310
RICHARD HYMAN: Friday
afternoon, after

00:02:53.310 --> 00:02:55.760
a few beers, yeah.

00:02:55.760 --> 00:02:59.010
YOSSI ELKRIEF: It's
using the ADK to

00:02:59.010 --> 00:03:01.955
move, or is it a simple--

00:03:01.955 --> 00:03:03.382
RICHARD HYMAN: I don't know,
I tried asking him, but he

00:03:03.382 --> 00:03:04.730
wasn't very vocal.

00:03:04.730 --> 00:03:07.616
What do you do?

00:03:07.616 --> 00:03:12.810
No, it's using a remote control
system, but also it's

00:03:12.810 --> 00:03:15.300
got pedals and steering wheels
and stuff, you can drive it.

00:03:15.300 --> 00:03:16.820
WEIBE ELSINGA: Old school.

00:03:16.820 --> 00:03:19.660
RICHARD HYMAN: Old
school, yeah.

00:03:19.660 --> 00:03:22.670
So this is our Nick Butcher for
the week, if you have any

00:03:22.670 --> 00:03:23.170
questions for Nick.

00:03:23.170 --> 00:03:24.532
CHRIS BAINES: It looks
quite similar, too.

00:03:24.532 --> 00:03:26.900
RICHARD HYMAN: Yeah.

00:03:26.900 --> 00:03:28.210
Hey, Andrew, nice to
see you again.

00:03:28.210 --> 00:03:31.160
I saw the one-man moderator
machine put plenty of

00:03:31.160 --> 00:03:33.732
questions in the moderator
for us this week again.

00:03:37.910 --> 00:03:40.020
OK, so let's kick off.

00:03:40.020 --> 00:03:42.890
Does anybody in the Hangout have
anything they'd like to

00:03:42.890 --> 00:03:45.710
talk about, or any questions?

00:03:45.710 --> 00:03:48.480
YOSSI ELKRIEF: Yeah, I would
like to raise a question about

00:03:48.480 --> 00:03:49.730
using the ProGuard.

00:03:52.960 --> 00:03:56.090
I've run into some issues.

00:03:56.090 --> 00:04:00.870
After we added some loaders to
the simple application we're

00:04:00.870 --> 00:04:06.230
trying to do as a POC
first of all.

00:04:06.230 --> 00:04:09.000
We're using loaders, and
basically we wanted to do

00:04:09.000 --> 00:04:11.400
ProGuard on the loaders also.

00:04:11.400 --> 00:04:20.110
And every time we use the
loader, even though I'm using

00:04:20.110 --> 00:04:25.940
the keep class with members
classifier for ProGuard, I

00:04:25.940 --> 00:04:32.060
still get a verify error
for the specific class.

00:04:32.060 --> 00:04:34.520
Did anyone ever get
this error?

00:04:34.520 --> 00:04:38.220
I didn't see anything on Stack
Overflow related to it, so I

00:04:38.220 --> 00:04:46.530
wanted to know if anyone was
able to use loaders fully,

00:04:46.530 --> 00:04:50.270
which fragments and action
bar and everything.

00:04:50.270 --> 00:04:51.500
RICHARD HYMAN: In ProGuard.

00:04:51.500 --> 00:04:52.750
YOSSI ELKRIEF: Yeah,
in ProGuard.

00:04:52.750 --> 00:04:53.790
CHRIS BAINES: In the
Support [? Lip ?]

00:04:53.790 --> 00:04:56.000
Lotus, or native--

00:04:56.000 --> 00:04:58.740
YOSSI ELKRIEF: Yeah,
support ones.

00:04:58.740 --> 00:05:00.110
CHRIS BAINES: And you're
getting a verify error?

00:05:00.110 --> 00:05:02.330
YOSSI ELKRIEF: Yeah, I get
Java-lang verify error.

00:05:06.760 --> 00:05:07.870
CHRIS BAINES: Hm, I
never saw that.

00:05:07.870 --> 00:05:08.850
RICHARD HYMAN: Caught us off
guard with that question

00:05:08.850 --> 00:05:10.100
straightaway.

00:05:12.820 --> 00:05:14.490
It's funny, because we
do recommend using

00:05:14.490 --> 00:05:15.180
ProGuard, of course.

00:05:15.180 --> 00:05:18.560
It reduces the footprint of
your application, makes it

00:05:18.560 --> 00:05:20.550
more efficient, and can
do some great stuff.

00:05:20.550 --> 00:05:24.550
There was a really good talk
from Eric, the man behind

00:05:24.550 --> 00:05:26.390
ProGuard, at DroidCon
UK this year.

00:05:26.390 --> 00:05:28.460
You can look it up
and watch it.

00:05:28.460 --> 00:05:30.860
He did give some hints and
tips during that talk.

00:05:30.860 --> 00:05:35.686
Have you had a look at the
ProGuard video from Eric?

00:05:35.686 --> 00:05:36.440
YOSSI ELKRIEF: Yeah, I did.

00:05:36.440 --> 00:05:41.780
And basically I just wanted
to make sure if you ever

00:05:41.780 --> 00:05:43.400
encounter something like that.

00:05:43.400 --> 00:05:45.980
Because what I found and
what [? Leonid ?]

00:05:45.980 --> 00:05:51.030
also found that some problems
with using fragments, based on

00:05:51.030 --> 00:05:56.910
the Action Bar Sherlock and
loaders, and obfuscation.

00:05:56.910 --> 00:06:02.050
But no one actually gave us
something to work with, only

00:06:02.050 --> 00:06:04.315
just assign issue, and
it was resolved.

00:06:07.290 --> 00:06:10.050
RICHARD HYMAN: Interesting.

00:06:10.050 --> 00:06:13.480
The only thing I can say is to
not using the classes, and try

00:06:13.480 --> 00:06:13.965
implement--

00:06:13.965 --> 00:06:15.800
I can't remember what
the callback is.

00:06:15.800 --> 00:06:20.490
Input the callback on your
fragment or activity.

00:06:20.490 --> 00:06:24.680
Instead, ProGuard shouldn't
retouch it, as long as you set

00:06:24.680 --> 00:06:27.530
an exception for the method.

00:06:27.530 --> 00:06:30.020
So I'd try and do that instead,
and see if you still

00:06:30.020 --> 00:06:30.770
get a verify error.

00:06:30.770 --> 00:06:33.970
You shouldn't really,
but without

00:06:33.970 --> 00:06:35.620
looking more at details--

00:06:35.620 --> 00:06:37.920
YOSSI ELKRIEF: Yeah, I can't
expose all the code.

00:06:41.780 --> 00:06:45.950
Because basically, it's
something we're trying to

00:06:45.950 --> 00:06:49.725
build as a new feature
on our app.

00:06:52.480 --> 00:06:57.175
It's difficult to put
them all together.

00:06:57.175 --> 00:06:59.180
RICHARD HYMAN: Does anyone else
in the Hangout have any

00:06:59.180 --> 00:07:01.120
thoughts on ProGuard--

00:07:01.120 --> 00:07:03.304
well, this sweet use
case for ProGuard?

00:07:05.960 --> 00:07:08.880
You could raise the question
or issue over at

00:07:08.880 --> 00:07:10.090
tools.android.com.

00:07:10.090 --> 00:07:12.730
The ProGuard integration is
managed by [INAUDIBLE]

00:07:12.730 --> 00:07:14.180
team over there.

00:07:14.180 --> 00:07:16.650
YOSSI ELKRIEF: I'll try over
there also, and I'll try to

00:07:16.650 --> 00:07:20.500
post it again on
Stack Overflow.

00:07:20.500 --> 00:07:23.920
CHRIS BAINES: Yeah, ping me a
link to the Stack Overflow.

00:07:23.920 --> 00:07:25.170
[INAUDIBLE]

00:07:27.730 --> 00:07:29.120
Because Hugo said have
you tried it without

00:07:29.120 --> 00:07:30.930
optimizations turned on?

00:07:30.930 --> 00:07:33.270
YOSSI ELKRIEF: Yeah,
optimization turned off,

00:07:33.270 --> 00:07:38.540
turned on, including libraries,
keep optimization

00:07:38.540 --> 00:07:44.510
on the public folders,
you name it.

00:07:44.510 --> 00:07:46.420
RICHARD HYMAN: OK, sorry
we can't be of more

00:07:46.420 --> 00:07:47.020
help on that one.

00:07:47.020 --> 00:07:49.620
I haven't ProGuard-ed
too much.

00:07:49.620 --> 00:07:51.236
Not too much point,
because I'm a

00:07:51.236 --> 00:07:54.110
projects for open source.

00:07:54.110 --> 00:07:55.800
Any other questions from inside
the Hangout, before we

00:07:55.800 --> 00:07:57.915
jump to the moderator?

00:08:00.540 --> 00:08:02.080
ETIENNE LAWLOR: I had
a quick question.

00:08:02.080 --> 00:08:06.600
I was wondering about
two native apps--

00:08:06.600 --> 00:08:11.360
the Phone app, and
the People app.

00:08:11.360 --> 00:08:16.530
So both the Phone app and the
People app have two list views

00:08:16.530 --> 00:08:18.235
that load lists of contacts.

00:08:21.010 --> 00:08:23.290
And it looks like the
People app does

00:08:23.290 --> 00:08:25.015
something similar to--

00:08:25.015 --> 00:08:29.550
there's an Android training
that does loading bitmaps

00:08:29.550 --> 00:08:31.120
efficiently.

00:08:31.120 --> 00:08:36.049
And I think you guys actually
gave a demo.

00:08:36.049 --> 00:08:41.900
I think it's called Bitmap Fun,
and it handles loading

00:08:41.900 --> 00:08:43.480
bitmaps efficiently.

00:08:43.480 --> 00:08:46.750
And it looks like the
People app does

00:08:46.750 --> 00:08:49.240
something along those lines.

00:08:49.240 --> 00:08:56.060
But the Phone app, if you look
at the list of contacts,

00:08:56.060 --> 00:09:02.230
there's some list that the
bitmaps seem to be cached, or

00:09:02.230 --> 00:09:05.280
they've already been
stored in cache.

00:09:05.280 --> 00:09:09.840
And any time you leave the Phone
app and go back in, it's

00:09:09.840 --> 00:09:14.256
not like it re-tries to
grab those bitmaps.

00:09:17.990 --> 00:09:19.450
Is it doing something
different?

00:09:22.090 --> 00:09:23.600
RICHARD HYMAN: Yeah,
it probably is.

00:09:23.600 --> 00:09:26.070
The Phone app is a
high priority.

00:09:26.070 --> 00:09:28.210
I'm guessing it's always running
to actually answer the

00:09:28.210 --> 00:09:30.190
phone calls.

00:09:30.190 --> 00:09:31.800
So maybe it's just keeping
this list in memory.

00:09:35.270 --> 00:09:36.900
CHRIS BAINES: The source is
available, so you can always

00:09:36.900 --> 00:09:38.150
have a look through.

00:09:41.760 --> 00:09:42.780
RICHARD HYMAN: Yeah, it's
probably caching them anyway.

00:09:42.780 --> 00:09:44.945
Even if you reboot your phone
and have a look, are they all

00:09:44.945 --> 00:09:47.680
there as soon as it opens up?

00:09:47.680 --> 00:09:49.750
So this app's starting up from
boot, caching all the photos

00:09:49.750 --> 00:09:53.520
that it needs to and,
just staying there.

00:09:53.520 --> 00:09:57.820
ETIENNE LAWLOR: Oh, as soon as
the phone is booted, it's one

00:09:57.820 --> 00:10:00.405
of the priority things.

00:10:00.405 --> 00:10:03.050
CHRIS BAINES: Yeah, I imagine
that's the case.

00:10:03.050 --> 00:10:05.780
I've never seen the Phone
app not be running.

00:10:05.780 --> 00:10:11.910
I'll see if you can see it
inside all the running apps.

00:10:11.910 --> 00:10:17.770
ETIENNE LAWLOR: Because it grabs
all of the names and the

00:10:17.770 --> 00:10:22.375
numbers, without any hiccups,
or scrolling.

00:10:25.720 --> 00:10:27.050
Everything is completely
cached.

00:10:30.120 --> 00:10:32.300
CHRIS BAINES: I doubt the name
and number is, I doubt that's

00:10:32.300 --> 00:10:35.840
just doing a content
provider query.

00:10:38.410 --> 00:10:39.660
But probably at startup.

00:10:42.350 --> 00:10:44.580
ETIENNE LAWLOR: I mean, I know
loading the bitmap is the

00:10:44.580 --> 00:10:45.830
expensive operation.

00:10:50.660 --> 00:10:52.680
CHRIS BAINES: It depends where
you're loading it from.

00:10:52.680 --> 00:10:57.070
All the images on the
contacts will be on

00:10:57.070 --> 00:10:58.245
local storage somewhere.

00:10:58.245 --> 00:10:58.960
ETIENNE LAWLOR: Yeah,
local storage.

00:10:58.960 --> 00:10:59.960
It's not from the network.

00:10:59.960 --> 00:11:00.830
CHRIS BAINES: Exactly.

00:11:00.830 --> 00:11:03.860
So it would be quicker anyway,
it will load in milliseconds

00:11:03.860 --> 00:11:05.110
rather than seconds.

00:11:07.510 --> 00:11:10.065
ETIENNE LAWLOR: Most of them
are, but there could be some

00:11:10.065 --> 00:11:12.170
linked with your social
accounts.

00:11:16.430 --> 00:11:17.860
CHRIS BAINES: Even the social
accounts, they still have to

00:11:17.860 --> 00:11:20.530
put it into the content provider
and the contact

00:11:20.530 --> 00:11:24.190
content provider saves
the files.

00:11:24.190 --> 00:11:27.370
And so it never was local.

00:11:27.370 --> 00:11:29.060
RICHARD HYMAN: Actually,
I've got them to load.

00:11:29.060 --> 00:11:30.540
So it is starting on startup.

00:11:30.540 --> 00:11:32.950
If you go into Settings,
you can find one called

00:11:32.950 --> 00:11:34.980
Phone/Messaging storage.

00:11:34.980 --> 00:11:38.250
And you can force-close it.

00:11:38.250 --> 00:11:40.860
If you force close Phone and
Phone Messaging Storage, and

00:11:40.860 --> 00:11:43.060
then go back and load the
application, you can see all

00:11:43.060 --> 00:11:46.190
the icons start to load again.

00:11:46.190 --> 00:11:47.800
So it's launching on startup.

00:11:47.800 --> 00:11:52.650
It does request the boot up
startup permission launch.

00:11:55.230 --> 00:11:57.270
It looks like it's starting on
startup and doing the exact

00:11:57.270 --> 00:11:59.527
same thing to cache
the data at that

00:11:59.527 --> 00:12:02.920
point, and staying resident.

00:12:02.920 --> 00:12:08.260
ETIENNE LAWLOR: If I'm trying to
display some lists similar

00:12:08.260 --> 00:12:14.930
to that, from a design
perspective, do you think it's

00:12:14.930 --> 00:12:24.070
a big hindrance to have to load
those images each time

00:12:24.070 --> 00:12:30.360
without saving it to cache,
to some kind of

00:12:30.360 --> 00:12:32.930
hard cache every time?

00:12:32.930 --> 00:12:36.030
RICHARD HYMAN: To actually call
them out of the contact

00:12:36.030 --> 00:12:36.510
content provider?

00:12:36.510 --> 00:12:38.530
ETIENNE LAWLOR: Basically what
I'm doing is clearing the

00:12:38.530 --> 00:12:43.250
cache each time the
app is killed.

00:12:43.250 --> 00:12:44.764
RICHARD HYMAN: The problem is if
you don't do that, and then

00:12:44.764 --> 00:12:46.330
someone changes the contact
photo, you're not going to

00:12:46.330 --> 00:12:47.640
pick it up, are you?

00:12:47.640 --> 00:12:49.700
So it's a good idea to do what
you're doing, and then reload

00:12:49.700 --> 00:12:52.040
them from the content
provider.

00:12:52.040 --> 00:12:54.040
ETIENNE LAWLOR: OK.

00:12:54.040 --> 00:12:57.590
So just because it's not loading
at the same speed of

00:12:57.590 --> 00:13:02.970
the Phone app doesn't mean it's
not doing it efficiently.

00:13:02.970 --> 00:13:07.920
I'm doing it in a similar
way that the Bitmap Fun

00:13:07.920 --> 00:13:10.160
demonstration does it.

00:13:10.160 --> 00:13:10.860
RICHARD HYMAN: I would
say that's fine.

00:13:10.860 --> 00:13:12.930
They are cached on the disc, and
you're just loading them

00:13:12.930 --> 00:13:14.530
through the content
provider anyway.

00:13:14.530 --> 00:13:16.506
So re-caching them a second time
on the disk isn't going

00:13:16.506 --> 00:13:18.560
to help too much.

00:13:18.560 --> 00:13:20.440
CHRIS BAINES: It's the same
storage, so it's not going to

00:13:20.440 --> 00:13:20.810
make a difference.

00:13:20.810 --> 00:13:22.550
In fact, you'll be probably
saving to SD

00:13:22.550 --> 00:13:25.510
card, or external storage.

00:13:25.510 --> 00:13:29.330
Whereas the contacts provider
that's saved on the false

00:13:29.330 --> 00:13:34.210
directory, your data storage
which, depending on the phone,

00:13:34.210 --> 00:13:37.510
might be the same storage, it
might be slightly slower.

00:13:37.510 --> 00:13:38.480
RICHARD HYMAN: Sounds
like you're doing

00:13:38.480 --> 00:13:39.270
it perfectly, anyway.

00:13:39.270 --> 00:13:40.932
I would stick with what
you're doing.

00:13:40.932 --> 00:13:41.300
ETIENNE LAWLOR: OK.

00:13:41.300 --> 00:13:42.550
Sounds good.

00:13:45.020 --> 00:13:46.050
RICHARD HYMAN: Reduce the speed,
maybe you could cache

00:13:46.050 --> 00:13:49.230
the first couple closer, but
I certainly wouldn't

00:13:49.230 --> 00:13:51.340
cache the full list.

00:13:51.340 --> 00:13:53.170
ETIENNE LAWLOR: OK.

00:13:53.170 --> 00:13:54.830
RICHARD HYMAN: All right.

00:13:54.830 --> 00:13:57.900
Anyone else from inside the
Hangout have a question?

00:14:01.440 --> 00:14:03.810
Sorry, I'm just looking at the
chat window over there.

00:14:03.810 --> 00:14:07.455
[? Beaver ?] and Andrew Kelly
have just posted some things.

00:14:07.455 --> 00:14:12.630
MALE SPEAKER: I have some
question about the AsyncTasks.

00:14:12.630 --> 00:14:18.980
I have some problems with the
method of doing background,

00:14:18.980 --> 00:14:22.610
not invoke when [INAUDIBLE]

00:14:22.610 --> 00:14:24.380
the task execute.

00:14:24.380 --> 00:14:34.430
So I found some post, that
when you work with SDK,

00:14:34.430 --> 00:14:38.400
Honeycomb and above, you need to
do execute on the executor,

00:14:38.400 --> 00:14:40.730
and not on execute.

00:14:40.730 --> 00:14:44.270
So the question of why would
you do it that way?

00:14:47.460 --> 00:14:48.840
RICHARD HYMAN: There was a very
good explanation of this

00:14:48.840 --> 00:14:52.250
is a talk at DroidCon
Holland this year.

00:14:52.250 --> 00:14:55.580
Wiebe, did the DroidCon
talks go live?

00:14:55.580 --> 00:14:58.300
WEIBE ELSINGA: No, not yet.

00:14:58.300 --> 00:15:00.390
RICHARD HYMAN: Just wait until
those talks go online, because

00:15:00.390 --> 00:15:04.090
there was a change in the way
that AsyncTask does work

00:15:04.090 --> 00:15:05.605
through Gingerbread,
Honeycomb, and

00:15:05.605 --> 00:15:07.950
then Ice Cream Sandwich.

00:15:07.950 --> 00:15:14.840
And if I remember it correctly
Gingerbread was--

00:15:14.840 --> 00:15:17.050
CHRIS BAINES: [INAUDIBLE] tasks
from what I remember.

00:15:17.050 --> 00:15:20.430
And then on Honeycomb, it
changed so there's only one

00:15:20.430 --> 00:15:23.560
thread running at a time.

00:15:23.560 --> 00:15:24.890
RICHARD HYMAN: Because that's
what we saw the multicore

00:15:24.890 --> 00:15:29.250
processors coming in, and apps
were getting responses to

00:15:29.250 --> 00:15:32.040
AsyncTasks back in an order
they weren't expecting.

00:15:32.040 --> 00:15:35.550
So we have it single-threaded to
make those apps work again.

00:15:35.550 --> 00:15:39.110
But then, Ice Cream Sandwich,
we defaulted back to

00:15:39.110 --> 00:15:42.720
multi-threaded again, unless you
specify single-threaded.

00:15:42.720 --> 00:15:45.160
Either way you can specify, and
the best thing to do is

00:15:45.160 --> 00:15:47.140
definitely to specify an
executor, and say whether you

00:15:47.140 --> 00:15:50.520
want it to be single-threaded
execution of all the

00:15:50.520 --> 00:15:52.290
AsyncTasks or multi-threaded
execution.

00:15:52.290 --> 00:15:54.140
MALE SPEAKER: So the only
problem is in the Honeycomb?

00:15:57.190 --> 00:15:58.980
RICHARD HYMAN: I think there
was another case as well.

00:15:58.980 --> 00:16:00.250
CHRIS BAINES: It's changed
quite a lot.

00:16:00.250 --> 00:16:02.480
I'd look at the Java Dock.

00:16:02.480 --> 00:16:05.780
It should tell you
the differences.

00:16:05.780 --> 00:16:08.490
I'm just looking now.

00:16:08.490 --> 00:16:11.640
MALE SPEAKER: Can you post some
link to that explanation?

00:16:11.640 --> 00:16:13.626
CHRIS BAINES: Yes, I will.

00:16:13.626 --> 00:16:15.920
RICHARD HYMAN: We're just
looking at the AsyncTask Java

00:16:15.920 --> 00:16:17.200
documents like the
Android developer

00:16:17.200 --> 00:16:18.450
documents at the moment.

00:16:22.130 --> 00:16:23.940
But it has been on
Stack Overflow a

00:16:23.940 --> 00:16:25.190
number of times as well.

00:16:28.700 --> 00:16:30.560
So the thing to do is definitely
to specify an

00:16:30.560 --> 00:16:31.130
executor anyway.

00:16:31.130 --> 00:16:32.230
We definitely recommend that.

00:16:32.230 --> 00:16:37.030
And you can guarantee
with either your

00:16:37.030 --> 00:16:40.550
ThreadPoolExecutor, or your
executor, whether you want it

00:16:40.550 --> 00:16:42.600
to be single-threaded or
multi-threaded across all of

00:16:42.600 --> 00:16:45.480
the versions of the OS.

00:16:45.480 --> 00:16:46.730
MALE SPEAKER: OK, thank you.

00:16:51.825 --> 00:16:56.280
RICHARD HYMAN: In Hugo's
place, [INAUDIBLE]

00:16:56.280 --> 00:16:57.150
has joined instead.

00:16:57.150 --> 00:16:58.562
Hey, there.

00:16:58.562 --> 00:17:02.630
And John has joined with
a picture of a laptop.

00:17:02.630 --> 00:17:05.740
Let's actually grab a question
out of the moderator, then.

00:17:05.740 --> 00:17:10.150
ALI DERBANE: I also got
a question still.

00:17:10.150 --> 00:17:14.730
I gave a presentation
about expansion

00:17:14.730 --> 00:17:18.579
files on DroidCon Amsterdam.

00:17:18.579 --> 00:17:21.440
It was pretty cool.

00:17:21.440 --> 00:17:26.920
I gave it after first having
played with it, and now there

00:17:26.920 --> 00:17:31.970
is a customer, and he wants
an updated application.

00:17:31.970 --> 00:17:35.750
But he wants to keep using the
expansion files that we

00:17:35.750 --> 00:17:40.960
uploaded for the previous
version of the application.

00:17:40.960 --> 00:17:45.310
I updated the stuff that needed
to be fixed, and now I

00:17:45.310 --> 00:17:50.610
just want to test if the new
application works with the old

00:17:50.610 --> 00:17:52.340
expansion files, or
the previously

00:17:52.340 --> 00:17:54.390
uploaded expansion files.

00:17:54.390 --> 00:17:58.710
When I try to do that on my
Samsung Galaxy S-- which is a

00:17:58.710 --> 00:18:01.380
pretty ancient phone,
I guess--

00:18:01.380 --> 00:18:06.670
I do get the message saying that
the expansion files were

00:18:06.670 --> 00:18:11.330
downloaded, even though when I
browse to the file browser,

00:18:11.330 --> 00:18:15.850
and look at the location where
the expansion files should be,

00:18:15.850 --> 00:18:19.820
there is no expansion
file at all.

00:18:19.820 --> 00:18:21.970
Have you got any tips on that?

00:18:21.970 --> 00:18:23.990
Do you know where
I should look?

00:18:23.990 --> 00:18:25.580
RICHARD HYMAN: I would
definitely re-upload the

00:18:25.580 --> 00:18:28.320
expansion files when
you change the APK.

00:18:28.320 --> 00:18:30.460
ALI DERBANE: Always re-upload?

00:18:30.460 --> 00:18:32.260
RICHARD HYMAN: I can check with
the publisher's site team

00:18:32.260 --> 00:18:35.130
here, but I've heard some
inconsistencies before, and

00:18:35.130 --> 00:18:38.800
it's just a good idea to
re-upload the expansion files.

00:18:38.800 --> 00:18:41.050
We've had it before that APKs
have been uploaded, and then

00:18:41.050 --> 00:18:43.310
the expansion files weren't
being downloaded, because they

00:18:43.310 --> 00:18:45.550
weren't associated
with that APK.

00:18:45.550 --> 00:18:46.220
ALI DERBANE: OK.

00:18:46.220 --> 00:18:49.250
So I should just try and upload
it again, and see if

00:18:49.250 --> 00:18:50.130
that works?

00:18:50.130 --> 00:18:51.910
RICHARD HYMAN: Yeah, you may
be downloading an empty

00:18:51.910 --> 00:18:54.010
expansion file, if there's
nothing assigned to that APK.

00:18:54.010 --> 00:18:56.350
And then that's why you're just
seeing a blank space on

00:18:56.350 --> 00:18:58.120
the SD card.

00:18:58.120 --> 00:18:59.080
ALI DERBANE: OK.

00:18:59.080 --> 00:19:00.894
I will check that out.

00:19:00.894 --> 00:19:01.504
RICHARD HYMAN: If
you could try it

00:19:01.504 --> 00:19:03.260
during the next 20 minutes--

00:19:03.260 --> 00:19:05.420
oh, no it will take two
hours to go live.

00:19:05.420 --> 00:19:08.595
ALI DERBANE: It will
take awhile.

00:19:08.595 --> 00:19:09.140
Well, thanks.

00:19:09.140 --> 00:19:12.060
I'll give that a shot.

00:19:12.060 --> 00:19:14.308
RICHARD HYMAN: Ping us on
Google+, because I'd like to

00:19:14.308 --> 00:19:16.235
know the result, just to check
that that did fix the problem.

00:19:18.780 --> 00:19:21.344
ALI DERBANE: Thanks very much.

00:19:21.344 --> 00:19:22.730
MALE SPEAKER: I have
a question.

00:19:22.730 --> 00:19:24.566
RICHARD HYMAN: Oh, who's that?

00:19:24.566 --> 00:19:26.374
Hey, there.

00:19:26.374 --> 00:19:27.778
MALE SPEAKER: Hello?

00:19:27.778 --> 00:19:29.520
RICHARD HYMAN: We can
hear you fine.

00:19:32.800 --> 00:19:35.950
MALE SPEAKER: I'm a beginner
in programming in

00:19:35.950 --> 00:19:38.940
college here in Egypt.

00:19:38.940 --> 00:19:41.670
We study the C Sharp.

00:19:41.670 --> 00:19:48.980
But I really like programming
apps for Java, for Android.

00:19:48.980 --> 00:19:52.490
And I want you to give
me some advice.

00:19:52.490 --> 00:19:55.690
Do you have to be a professional
[INAUDIBLE].

00:19:55.690 --> 00:20:00.810
I can build very good
Android apps.

00:20:00.810 --> 00:20:03.350
RICHARD HYMAN: Sorry, I missed
one word out of that.

00:20:03.350 --> 00:20:08.060
Do I have to get something to
build very good Android apps?

00:20:08.060 --> 00:20:10.590
MALE SPEAKER: Do I have
to be a pro at Java?

00:20:10.590 --> 00:20:11.790
RICHARD HYMAN: Do I have to be
a Java pro to build good

00:20:11.790 --> 00:20:14.290
Android apps?

00:20:14.290 --> 00:20:14.760
It definitely helps.

00:20:14.760 --> 00:20:18.860
If you know your Java design
patterns and you know how the

00:20:18.860 --> 00:20:20.730
Java models work, it can help
make better Android

00:20:20.730 --> 00:20:23.220
applications, but you can
definitely start off with

00:20:23.220 --> 00:20:26.010
simple Android applications
without too much

00:20:26.010 --> 00:20:26.900
knowledge of Java.

00:20:26.900 --> 00:20:31.250
All the UI layer of Android is
done without any standard Java

00:20:31.250 --> 00:20:32.500
in it, really.

00:20:35.470 --> 00:20:37.450
MALE SPEAKER: More of the
websites, or the videos that I

00:20:37.450 --> 00:20:41.120
can do, they can give
me a good start.

00:20:41.120 --> 00:20:43.630
RICHARD HYMAN: Yeah, I wish Nick
was here, instead of this

00:20:43.630 --> 00:20:47.630
pink car with a green Android
in it, because he was a .net

00:20:47.630 --> 00:20:48.500
developer [INAUDIBLE]

00:20:48.500 --> 00:20:51.130
at some point, and switched
over to Java/Android.

00:20:51.130 --> 00:20:52.460
So he may have been able
to help with a

00:20:52.460 --> 00:20:54.404
migration path for you.

00:20:54.404 --> 00:20:57.050
MALE SPEAKER: Thanks.

00:20:57.050 --> 00:20:58.650
RICHARD HYMAN: I would, because
I like to just get

00:20:58.650 --> 00:21:00.805
stuck into things, I would just
start coding Android, and

00:21:00.805 --> 00:21:01.600
get used to it.

00:21:01.600 --> 00:21:03.470
And then if you come across
problems, assume that they've

00:21:03.470 --> 00:21:04.870
already been solved by someone
else, and look

00:21:04.870 --> 00:21:06.130
them up on the internet.

00:21:06.130 --> 00:21:08.040
If you want to figure out how to
do a certain design pattern

00:21:08.040 --> 00:21:09.110
in Java, just look it up.

00:21:09.110 --> 00:21:10.795
Sometimes it's slightly
different for Android anyway,

00:21:10.795 --> 00:21:12.260
because of the way
activities work.

00:21:20.140 --> 00:21:21.345
MALE SPEAKER: Thanks
for the advice.

00:21:21.345 --> 00:21:21.990
RICHARD HYMAN: No problem,
thanks for

00:21:21.990 --> 00:21:23.240
joining us in the Hangout.

00:21:26.340 --> 00:21:27.100
CHRIS BAINES: Andrew Kelly's
put a question.

00:21:27.100 --> 00:21:28.000
RICHARD HYMAN: Andrew
Kelly's put a

00:21:28.000 --> 00:21:30.420
question in the chat window.

00:21:30.420 --> 00:21:32.830
CHRIS BAINES: If I have an
IntentService as the interface

00:21:32.830 --> 00:21:35.655
to a REST service, what is
the best way to have the

00:21:35.655 --> 00:21:40.760
IntentService pop up and
progress dialogue on the UI

00:21:40.760 --> 00:21:43.030
while the REST call
is executing.

00:21:43.030 --> 00:21:46.200
Do I need to use a broadcast
receiver?

00:21:46.200 --> 00:21:49.190
RICHARD HYMAN: I don't like
getting feedback from

00:21:49.190 --> 00:21:52.730
IntentService myself.

00:21:52.730 --> 00:21:54.160
CHRIS BAINES: I always think
of IntentService

00:21:54.160 --> 00:21:55.090
as a one-shot deal.

00:21:55.090 --> 00:21:56.010
RICHARD HYMAN: [INAUDIBLE]

00:21:56.010 --> 00:21:56.720
CHRIS BAINES: Yeah, exactly.

00:21:56.720 --> 00:21:58.810
It's not something you want
feedback off, or a callback,

00:21:58.810 --> 00:22:00.640
or anything like that.

00:22:00.640 --> 00:22:04.840
So the way I'd personally do
that is do a normal service,

00:22:04.840 --> 00:22:07.120
and then run your background
query on a

00:22:07.120 --> 00:22:09.070
background for an executor.

00:22:09.070 --> 00:22:13.110
And use a handler to make sure
a dialogue, which feels hacky

00:22:13.110 --> 00:22:16.980
from a service, but you want a
different activity, really.

00:22:20.250 --> 00:22:21.530
RICHARD HYMAN: If you have an
activity that's bound to the

00:22:21.530 --> 00:22:26.320
service, you can request
the progress.

00:22:26.320 --> 00:22:26.740
[? Google Aid ?]

00:22:26.740 --> 00:22:31.670
2010 gave a talk on using
IntentService from [INAUDIBLE]

00:22:31.670 --> 00:22:32.370
REST.

00:22:32.370 --> 00:22:34.890
But as [? clients ?] for REST.

00:22:34.890 --> 00:22:40.600
That's fine, but then showing
the activity on the screen--

00:22:40.600 --> 00:22:44.000
did it cover that during the
presentation, Andrew?

00:22:44.000 --> 00:22:44.930
Andrew is typing.

00:22:44.930 --> 00:22:47.450
CHRIS BAINES: The only way I
think that could work nicely,

00:22:47.450 --> 00:22:49.790
is if that IntentService
is updated

00:22:49.790 --> 00:22:52.770
from the content provider.

00:22:52.770 --> 00:22:56.730
And your activities
[INAUDIBLE]

00:22:56.730 --> 00:22:59.440
getting re-queried when the
content provider changes.

00:22:59.440 --> 00:23:01.010
That's the only nice way
I could think of using

00:23:01.010 --> 00:23:02.570
IntentService, that
kind of stuff.

00:23:02.570 --> 00:23:04.940
RICHARD HYMAN: This is another
good case for that AsyncTask

00:23:04.940 --> 00:23:06.940
talk that was given at
DroidCon Holland.

00:23:06.940 --> 00:23:09.240
It actually covered of all types
of background processing

00:23:09.240 --> 00:23:11.100
on Android, and when
to use each one.

00:23:11.100 --> 00:23:12.350
It was an amazing talk.

00:23:15.180 --> 00:23:16.990
So as soon as that goes live,
I think I'll just make sure

00:23:16.990 --> 00:23:18.300
everybody watches it.

00:23:18.300 --> 00:23:20.650
CHRIS BAINES: The slides
are online.

00:23:20.650 --> 00:23:21.900
I've read the slides.

00:23:24.160 --> 00:23:25.575
WEIBE ELSINGA: I don't think
the talks will be

00:23:25.575 --> 00:23:27.615
going online soon.

00:23:27.615 --> 00:23:28.810
RICHARD HYMAN: Fair enough.

00:23:28.810 --> 00:23:30.380
He did put the slides online,
I seem to remember

00:23:30.380 --> 00:23:32.520
slides did go out.

00:23:32.520 --> 00:23:34.810
So we could look up the name of
the guy who gave the talk.

00:23:37.660 --> 00:23:41.090
Do you think you could
find it, Wiebe?

00:23:41.090 --> 00:23:42.690
WEIBE ELSINGA: I'm looking
right now.

00:23:42.690 --> 00:23:44.220
RICHARD HYMAN: If we find the
guy who gave the talk, we can

00:23:44.220 --> 00:23:45.820
find the slides and
just post them in.

00:23:45.820 --> 00:23:47.370
It would answer two
of the questions

00:23:47.370 --> 00:23:49.100
here in a lot of detail.

00:23:49.100 --> 00:23:50.140
WEIBE ELSINGA: Give
me five minutes.

00:23:50.140 --> 00:23:51.390
I'm no good at multitasking.

00:23:53.860 --> 00:23:54.940
RICHARD HYMAN: Execute
a thread.

00:23:54.940 --> 00:23:55.820
Thread executor.

00:23:55.820 --> 00:23:58.360
No, just executor.

00:23:58.360 --> 00:23:59.462
Wiebe's brain.

00:23:59.462 --> 00:24:01.266
He's not using a
ThreadPoolExecutor.

00:24:01.266 --> 00:24:02.330
That's what I was looking for.

00:24:02.330 --> 00:24:04.270
I would have been a more
funny joke if I could

00:24:04.270 --> 00:24:05.749
actually say it.

00:24:05.749 --> 00:24:06.242
OK.

00:24:06.242 --> 00:24:08.707
I'm just going to have a quick
look in the G+ comments.

00:24:16.150 --> 00:24:19.315
CHRIS BAINES: So, while
Richard's looking, Pavel's put

00:24:19.315 --> 00:24:23.910
a question on the moderator
asking, with data storage, the

00:24:23.910 --> 00:24:27.700
SQL API haven't evolved
since Android 1.0.

00:24:27.700 --> 00:24:29.670
Is there any chance we'll
see alternatives--

00:24:29.670 --> 00:24:33.280
something that's similar
to the core API in iOS?

00:24:33.280 --> 00:24:37.080
There's nothing planned from
what I know, and what's

00:24:37.080 --> 00:24:38.540
available at the moment.

00:24:38.540 --> 00:24:42.020
All I can do is point you to
libraries that build upon it.

00:24:42.020 --> 00:24:46.090
So you've got greenDAO, which
works pretty well.

00:24:46.090 --> 00:24:48.830
You've got ORMLite, and
there are other paid

00:24:48.830 --> 00:24:50.510
solutions as well.

00:24:50.510 --> 00:24:54.120
So just look at them,
[INAUDIBLE].

00:24:54.120 --> 00:24:56.710
The DAO Solutions can not
perform with penalties, but

00:24:56.710 --> 00:24:58.230
they're usually worth it.

00:24:58.230 --> 00:24:59.432
[INAUDIBLE]

00:24:59.432 --> 00:25:00.880
code from your--

00:25:00.880 --> 00:25:02.550
that you don't have to
write basically.

00:25:02.550 --> 00:25:04.260
So it's always good.

00:25:04.260 --> 00:25:11.540
So have a look at them and
let us know Anyone

00:25:11.540 --> 00:25:12.790
else got any questions?

00:25:15.370 --> 00:25:16.990
Take that as a no.

00:25:16.990 --> 00:25:18.290
RICHARD HYMAN: I'll be
back in one second.

00:25:22.980 --> 00:25:24.856
YOSSI ELKRIEF: Everybody's
doing searches on there.

00:25:33.160 --> 00:25:34.594
CHRIS BAINES: You OK?

00:25:34.594 --> 00:25:36.845
Is there anything on Google+?

00:25:36.845 --> 00:25:38.095
RICHARD HYMAN: On Google+?

00:25:41.190 --> 00:25:42.100
Not really.

00:25:42.100 --> 00:25:43.530
Someone was asking how
to join the Hangout,

00:25:43.530 --> 00:25:45.010
which was just answered.

00:25:45.010 --> 00:25:46.570
And then they've got a question
which they'll ask if

00:25:46.570 --> 00:25:48.240
they can join the Hangout.

00:25:48.240 --> 00:25:51.730
So if Jackie does get in, she
can ask the question live.

00:25:51.730 --> 00:25:54.600
If not, I'll wait five minutes
before answering that

00:25:54.600 --> 00:25:58.070
question, just in case

00:25:58.070 --> 00:26:00.990
CHRIS BAINES: Michael has put
a question on the moderator,

00:26:00.990 --> 00:26:03.700
asking, I heard about an app
that claims it is able to back

00:26:03.700 --> 00:26:07.150
up data from other apps, and
will be able to restore it on

00:26:07.150 --> 00:26:09.030
the device.

00:26:09.030 --> 00:26:11.170
I thought this isn't possible
without root access.

00:26:11.170 --> 00:26:12.830
What are your thoughts
on that?

00:26:12.830 --> 00:26:14.280
RICHARD HYMAN: I thought
it was impossible.

00:26:14.280 --> 00:26:17.970
Well, if it's on the SD card.

00:26:17.970 --> 00:26:18.706
CHRIS BAINES: Yeah, that's
the only way

00:26:18.706 --> 00:26:19.560
it could work, really.

00:26:19.560 --> 00:26:21.040
RICHARD HYMAN: It might
be reading the data

00:26:21.040 --> 00:26:21.870
directory off the SD.

00:26:21.870 --> 00:26:23.370
Hey, Jackie, there you are.

00:26:23.370 --> 00:26:25.760
You found the link.

00:26:25.760 --> 00:26:29.170
Good to have you in as well.

00:26:29.170 --> 00:26:31.860
CHRIS BAINES: Because the data
directory for each app has the

00:26:31.860 --> 00:26:34.750
permission set so only the
application can access them.

00:26:34.750 --> 00:26:37.925
So I don't really see
how that's working.

00:26:37.925 --> 00:26:39.960
YOSSI ELKRIEF: Unless they're
using shared intents and

00:26:39.960 --> 00:26:41.210
shared permissions.

00:26:44.982 --> 00:26:46.640
CHRIS BAINES: But you'd have to
share with every app that

00:26:46.640 --> 00:26:48.690
could be installed
in the world.

00:26:48.690 --> 00:26:51.290
YOSSI ELKRIEF: No, I mean if you
have a set of applications

00:26:51.290 --> 00:26:56.470
from the same software vendor,
they're using the same

00:26:56.470 --> 00:26:58.740
certificate and the
same permissions.

00:26:58.740 --> 00:27:00.950
So they have shared permissions
to back up all the

00:27:00.950 --> 00:27:06.550
data, and to access all the data
between all their apps.

00:27:06.550 --> 00:27:07.460
CHRIS BAINES: Yeah, but
only for their apps.

00:27:07.460 --> 00:27:12.040
YOSSI ELKRIEF: Besides that,
each app has a private

00:27:12.040 --> 00:27:15.080
location for their storage.

00:27:15.080 --> 00:27:21.610
Only if they used the SD
card to save all their

00:27:21.610 --> 00:27:23.380
preferences and stuff.

00:27:23.380 --> 00:27:35.250
But even then, I think the new
the user's API will block the

00:27:35.250 --> 00:27:39.190
access to the SD card.

00:27:39.190 --> 00:27:42.430
And basically, we get a virtual
mapping for the SD

00:27:42.430 --> 00:27:43.300
card for each user.

00:27:43.300 --> 00:27:49.240
So I don't think an app for
backup will be helpful on

00:27:49.240 --> 00:27:50.910
those devices.

00:27:50.910 --> 00:27:53.390
RICHARD HYMAN: I'm trying to
find the question in the

00:27:53.390 --> 00:27:54.640
moderator to see who asked it.

00:28:02.980 --> 00:28:04.230
Oh, it's Wiebe.

00:28:06.318 --> 00:28:08.700
We can't ask Wiebe to
multitask even more.

00:28:08.700 --> 00:28:10.355
WEIBE ELSINGA: No, Ali already
asked the question.

00:28:13.730 --> 00:28:16.390
RICHARD HYMAN: The one about the
app that can do backups?

00:28:16.390 --> 00:28:20.590
WEIBE ELSINGA: No, about
the extension files.

00:28:20.590 --> 00:28:21.320
RICHARD HYMAN: OK.

00:28:21.320 --> 00:28:22.320
You had that one as well.

00:28:22.320 --> 00:28:25.000
But who asked the question
about the backup apps?

00:28:25.000 --> 00:28:25.920
I thought it was
Wiebe as well.

00:28:25.920 --> 00:28:26.730
Where is it?

00:28:26.730 --> 00:28:27.570
I'm on the wrong day here.

00:28:27.570 --> 00:28:40.770
It's the 16th, right?

00:28:40.770 --> 00:28:43.952
We've got a lot of devices,
we have to use them all.

00:28:43.952 --> 00:28:44.790
CHRIS BAINES: Oh, Michael.

00:28:44.790 --> 00:28:46.120
Michael [? Panza ?].

00:28:46.120 --> 00:28:46.730
RICHARD HYMAN: Michael Panza--

00:28:46.730 --> 00:28:48.776
I heard about an app that claims
it would be able to

00:28:48.776 --> 00:28:51.190
back up data.

00:28:51.190 --> 00:28:52.210
The app is called Carbon.

00:28:52.210 --> 00:28:53.560
He did put the app name in.

00:28:53.560 --> 00:28:54.810
Let me check it out
on my [INAUDIBLE].

00:28:54.810 --> 00:28:56.830
I couldn't find it.

00:28:56.830 --> 00:28:58.590
CHRIS BAINES: All right.

00:28:58.590 --> 00:28:59.840
Jackie, do you have
your question?

00:29:06.910 --> 00:29:07.920
MALE SPEAKER: Can you hear
me, first of all?

00:29:07.920 --> 00:29:09.696
RICHARD HYMAN: Yeah,
absolutely.

00:29:09.696 --> 00:29:12.530
MALE SPEAKER: So I'm working
a lot on trying to do some

00:29:12.530 --> 00:29:15.900
porting of some native
applications, and it's kind of

00:29:15.900 --> 00:29:17.470
something I'm new to.

00:29:17.470 --> 00:29:21.110
And I'm having some difficulty
getting Make to work right

00:29:21.110 --> 00:29:23.100
with the standalone
tool chain.

00:29:23.100 --> 00:29:27.400
Have you guys had any experience
with that?

00:29:27.400 --> 00:29:29.480
I've read through the
documentation a little bit for

00:29:29.480 --> 00:29:31.120
the standalone tool chain.

00:29:31.120 --> 00:29:32.630
There's some environmental
variables

00:29:32.630 --> 00:29:33.990
it talks about setting.

00:29:33.990 --> 00:29:36.115
But I was just curious--

00:29:36.115 --> 00:29:40.020
it's hard to tell if it's
working or not until you go

00:29:40.020 --> 00:29:42.650
through and check out the
objects that get created.

00:29:42.650 --> 00:29:45.760
But do you guys know, is there
a good resource for

00:29:45.760 --> 00:29:46.750
this type of thing?

00:29:46.750 --> 00:29:49.030
It mentions in the documentation
that the

00:29:49.030 --> 00:29:51.452
standalone tool chain was made
specifically so that you could

00:29:51.452 --> 00:29:54.530
use Make, but I don't see much
documentation on how to

00:29:54.530 --> 00:29:55.780
implement it with Make.

00:29:58.330 --> 00:29:59.580
CHRIS BAINES: Personally,
I have no idea.

00:29:59.580 --> 00:30:03.610
Because I've never done
C++ [INAUDIBLE].

00:30:03.610 --> 00:30:06.020
I'd recommend posting your on
question Stack Overflow,

00:30:06.020 --> 00:30:09.950
because that's all the
native questions.

00:30:09.950 --> 00:30:12.350
I'd go on there, really.

00:30:12.350 --> 00:30:15.620
That's probably where you're
going to get it most exposed,

00:30:15.620 --> 00:30:16.870
and probably answered.

00:30:19.480 --> 00:30:21.400
RICHARD HYMAN: You can have a
look at tools.android.com

00:30:21.400 --> 00:30:22.210
again, and have a look at the

00:30:22.210 --> 00:30:24.460
documentation that's over there.

00:30:24.460 --> 00:30:27.470
Have a look at the forum at
tools.android.com as well.

00:30:27.470 --> 00:30:29.910
Post a question in there, maybe,
because then one of the

00:30:29.910 --> 00:30:31.890
Tools Team here will take
a look at it at least,

00:30:31.890 --> 00:30:32.950
especially if you're
got a specific

00:30:32.950 --> 00:30:35.520
error that you're seeing.

00:30:35.520 --> 00:30:36.570
MALE SPEAKER: OK, sounds good.

00:30:36.570 --> 00:30:39.150
It was more just a generic
question on getting Make to

00:30:39.150 --> 00:30:42.540
work with the standalone
tool chain.

00:30:42.540 --> 00:30:44.950
I'm not very good with Make, so
I'm trying to figure that

00:30:44.950 --> 00:30:46.290
out on my own.

00:30:46.290 --> 00:30:48.660
CHRIS BAINES: The only other
time I have built something

00:30:48.660 --> 00:30:52.300
with the NDK is when
I used the command

00:30:52.300 --> 00:30:55.490
NDK-build rather than Make.

00:30:55.490 --> 00:30:59.050
And that calls Make
itself, I think.

00:30:59.050 --> 00:31:01.850
So have a look at using
that, maybe.

00:31:01.850 --> 00:31:03.305
MALE SPEAKER: I'm using Make
because I'm trying to port

00:31:03.305 --> 00:31:04.770
over existing C libraries.

00:31:04.770 --> 00:31:07.900
Basically, I'm working on
tutorials to be able to use

00:31:07.900 --> 00:31:13.550
Box 2D, and OpenGL ES, and C,
and then use JNI hookups to

00:31:13.550 --> 00:31:15.040
communicate with it.

00:31:15.040 --> 00:31:18.635
And so I'm trying to rebuild
Box2D just on my own, and I'm

00:31:18.635 --> 00:31:21.415
having some problems getting
it to build with the Make

00:31:21.415 --> 00:31:23.350
scripts that come with it.

00:31:23.350 --> 00:31:25.150
CHRIS BAINES: I think NDK-build

00:31:25.150 --> 00:31:28.050
actually calls Make itself.

00:31:28.050 --> 00:31:29.250
I can't remember the
exact details.

00:31:29.250 --> 00:31:32.440
But you create a special Make
file, and you can then include

00:31:32.440 --> 00:31:33.420
other Make files from it.

00:31:33.420 --> 00:31:35.880
So you may need to do some
of that, but include

00:31:35.880 --> 00:31:38.470
your custom Make file.

00:31:38.470 --> 00:31:39.780
I don't really know, though.

00:31:39.780 --> 00:31:42.030
It's pulling the depth
of my memory, here.

00:31:42.030 --> 00:31:42.710
MALE SPEAKER: I just
figured I'd ask.

00:31:42.710 --> 00:31:44.620
Thank you, though.

00:31:44.620 --> 00:31:46.120
RICHARD HYMAN: Cheers.

00:31:46.120 --> 00:31:48.850
And whilst you were answering or
asking that, Wiebe did post

00:31:48.850 --> 00:31:54.210
the DroidCon NL presentation
in the chat window here.

00:31:54.210 --> 00:31:57.770
WIEBE ELSINGA: I hope this
is the good one.

00:31:57.770 --> 00:32:00.250
RICHARD HYMAN: Is it on tasks?

00:32:00.250 --> 00:32:03.380
I'm going to see if I can just
quickly cross-post it into the

00:32:03.380 --> 00:32:03.890
[INAUDIBLE].

00:32:03.890 --> 00:32:05.710
WIEBE ELSINGA: It's about
Android threading.

00:32:05.710 --> 00:32:06.960
CHRIS BAINES: That's the one.

00:32:13.070 --> 00:32:14.320
RICHARD HYMAN: Just bear
with me a second.

00:32:19.460 --> 00:32:21.260
I can't find my own Hangout
now that I'm actually in.

00:32:21.260 --> 00:32:22.210
This is crazy.

00:32:22.210 --> 00:32:25.660
If you could cross-post that
onto the Hangout comments,

00:32:25.660 --> 00:32:28.010
Wiebe, that would
be really handy.

00:32:28.010 --> 00:32:29.530
WIEBE ELSINGA: I already did.

00:32:29.530 --> 00:32:32.580
RICHARD HYMAN: Excellent,
thanks very much.

00:32:32.580 --> 00:32:35.140
So anybody who has questions
about AsyncTasks and

00:32:35.140 --> 00:32:37.390
background services-- there were
two of them so far-- it's

00:32:37.390 --> 00:32:38.640
definitely worth checking
that presentation out.

00:32:41.966 --> 00:32:42.427
OK.

00:32:42.427 --> 00:32:49.310
Do we have any other questions
inside the Google+ thread?

00:32:56.700 --> 00:32:57.970
We've had 11 comments now.

00:32:57.970 --> 00:32:59.220
OK.

00:33:01.886 --> 00:33:03.136
[INAUDIBLE]

00:33:14.664 --> 00:33:15.150
OK.

00:33:15.150 --> 00:33:17.322
Michel Panzer put the link to
that app that claims to be

00:33:17.322 --> 00:33:18.100
able to do backups.

00:33:18.100 --> 00:33:19.892
CHRIS BAINES: Hmm,
interesting.

00:33:19.892 --> 00:33:23.310
RICHARD HYMAN: Let's
see what it says.

00:33:23.310 --> 00:33:25.090
It's from Kuish, for a start,
from ClockWorkMod.

00:33:28.590 --> 00:33:31.580
Sync apps and app data between
phones, back up apps to your

00:33:31.580 --> 00:33:32.780
SD card, Google Drive
or Dropbox.

00:33:32.780 --> 00:33:33.525
Check the video out.

00:33:33.525 --> 00:33:38.540
It requires Android 4+, this is
a Beta, this requires root.

00:33:38.540 --> 00:33:39.680
YOSSI ELKRIEF: It says
the final version

00:33:39.680 --> 00:33:40.930
doesn't require root.

00:33:45.970 --> 00:33:46.420
I'm watching the video
right now.

00:33:46.420 --> 00:33:47.605
RICHARD HYMAN: [INAUDIBLE]

00:33:47.605 --> 00:33:49.536
Android or just ClockWorkMod?

00:33:49.536 --> 00:33:55.370
YOSSI ELKRIEF: No, I think
maybe it's based on the

00:33:55.370 --> 00:34:00.040
ClockWorkMod, or maybe it's
using the device administrator

00:34:00.040 --> 00:34:04.060
features for Android 4.0.

00:34:04.060 --> 00:34:09.260
And basically, then you can
access everything you want on

00:34:09.260 --> 00:34:10.510
the device.

00:34:12.600 --> 00:34:14.949
Because I didn't see the
permissions when installed it

00:34:14.949 --> 00:34:16.199
or something.

00:34:20.350 --> 00:34:24.740
RICHARD HYMAN: Yeah, there's
definitely something going on.

00:34:27.719 --> 00:34:31.620
YOSSI ELKRIEF: As you can see,
super user on the video.

00:34:34.489 --> 00:34:38.540
Oh, he's using the
full restore--

00:34:38.540 --> 00:34:40.620
RICHARD HYMAN: ADB backup
and restore.

00:34:40.620 --> 00:34:41.929
He's using a command-line shell

00:34:41.929 --> 00:34:45.570
through ADB for non-root.

00:34:45.570 --> 00:34:46.810
So it's not actually
running it on the

00:34:46.810 --> 00:34:48.060
device at that point.

00:34:56.020 --> 00:34:58.340
Which isn't a bad thing.

00:34:58.340 --> 00:35:00.720
ADB Backup and Restore
is very, very

00:35:00.720 --> 00:35:01.540
powerful, and very handy.

00:35:01.540 --> 00:35:04.630
And I use it all the time for
keeping my game state data

00:35:04.630 --> 00:35:06.650
when I re-flash my phone,
which happens more

00:35:06.650 --> 00:35:08.630
than it should do.

00:35:08.630 --> 00:35:11.520
Most users would never think
about doing that.

00:35:11.520 --> 00:35:15.660
Even developers are unlikely
to plug it into a computer

00:35:15.660 --> 00:35:16.990
USB, ADB backup.

00:35:16.990 --> 00:35:18.720
Because you can actually
securely back up all your

00:35:18.720 --> 00:35:21.140
data, your SD card and
everything through that, and

00:35:21.140 --> 00:35:22.710
then restore all your
app data again.

00:35:22.710 --> 00:35:25.120
So if someone's writing an
application which uses the

00:35:25.120 --> 00:35:27.410
functionality of ADB Backup and
Restore, but makes it more

00:35:27.410 --> 00:35:30.800
user-friendly, then that's
kind of awesome.

00:35:30.800 --> 00:35:32.160
It is allowed, it's not
breaking any of

00:35:32.160 --> 00:35:33.700
the security codes.

00:35:33.700 --> 00:35:37.520
YOSSI ELKRIEF: No, he's using
Google Drive to basically save

00:35:37.520 --> 00:35:42.580
your data as a backup file, and
then you can log in on a

00:35:42.580 --> 00:35:46.150
different device and have the
data back from the Google

00:35:46.150 --> 00:35:47.400
Drive to your device.

00:35:49.890 --> 00:35:51.765
RICHARD HYMAN: At the moment,
you run a shell script to get

00:35:51.765 --> 00:35:53.860
it working, by plugging it in.

00:35:53.860 --> 00:35:55.530
So whether he's going to manage
to side-load something

00:35:55.530 --> 00:35:57.850
onto the device, which means
he can do those backups

00:35:57.850 --> 00:36:00.480
without it being plugged
into a computer.

00:36:00.480 --> 00:36:01.730
If he could, that would
be awesome.

00:36:05.550 --> 00:36:07.060
I'll read through the
rest of the thread.

00:36:07.060 --> 00:36:08.290
CHRIS BAINES: I didn't think
there was an ADB

00:36:08.290 --> 00:36:08.950
client on the phone.

00:36:08.950 --> 00:36:09.670
RICHARD HYMAN: There isn't.

00:36:09.670 --> 00:36:11.450
You can't do the ADB backup on
the phone at the moment.

00:36:11.450 --> 00:36:12.430
CHRIS BAINES: [INAUDIBLE]

00:36:12.430 --> 00:36:16.020
RICHARD HYMAN: I don't
know what he's doing.

00:36:16.020 --> 00:36:19.970
When the final version comes
out, I will definitely try it.

00:36:19.970 --> 00:36:23.600
Because there's plenty of games
that I use that I'd love

00:36:23.600 --> 00:36:25.180
to have the game data
synchronized

00:36:25.180 --> 00:36:25.960
between all my devices.

00:36:25.960 --> 00:36:28.460
Even if I had to just quickly
run this application to

00:36:28.460 --> 00:36:30.870
restore my latest, or back up
my latest data, or even have

00:36:30.870 --> 00:36:33.490
it scheduled to do that,
it would be cool.

00:36:33.490 --> 00:36:35.240
Go Kuish.

00:36:35.240 --> 00:36:38.350
What's appeared in
the chat window?

00:36:38.350 --> 00:36:40.170
CHRIS BAINES: It's [INAUDIBLE]
question, which I first saw on

00:36:40.170 --> 00:36:41.960
the moderator.

00:36:41.960 --> 00:36:45.870
I think we're better to add an
animation progress method into

00:36:45.870 --> 00:36:48.420
animation lists so that more
operations can be performed

00:36:48.420 --> 00:36:49.681
when an animation is running.

00:36:52.270 --> 00:36:56.310
A question while you're
trying to know why an

00:36:56.310 --> 00:36:58.340
animation is going.

00:36:58.340 --> 00:37:00.270
Surely when you start the
animation, you'll know that

00:37:00.270 --> 00:37:02.860
it's started.

00:37:02.860 --> 00:37:07.326
So I'm not sure why you want
to know how far into the

00:37:07.326 --> 00:37:08.130
animation it is.

00:37:08.130 --> 00:37:10.310
Because you won't really to be
changing the view midway

00:37:10.310 --> 00:37:11.660
through an animation.

00:37:11.660 --> 00:37:13.430
Because you're just causing
more work for the GPU.

00:37:18.800 --> 00:37:22.700
I question why you
want to know.

00:37:22.700 --> 00:37:25.500
RICHARD HYMAN: You know when it
starts and when it's ended.

00:37:25.500 --> 00:37:26.910
And how long it's
going to take.

00:37:26.910 --> 00:37:29.140
CHRIS BAINES: Yeah, because
you call that.

00:37:33.250 --> 00:37:34.500
YOSSI ELKRIEF: He's
writing again.

00:37:50.850 --> 00:37:54.400
I'll show the screen in just
a second to show you.

00:37:59.690 --> 00:38:01.086
RICHARD HYMAN: That's the screen
you see when you type

00:38:01.086 --> 00:38:02.910
ADB backup.

00:38:02.910 --> 00:38:04.160
YOSSI ELKRIEF: That's
what I'm saying.

00:38:04.160 --> 00:38:10.240
That's why the user is
[? seeking ?] to backup each

00:38:10.240 --> 00:38:11.300
and every application.

00:38:11.300 --> 00:38:15.680
Then the data is being uploaded
to the Google Drive

00:38:15.680 --> 00:38:18.200
account for the specific user.

00:38:18.200 --> 00:38:22.300
RICHARD HYMAN: Sorry, Yossi,
that is Carbon, but it's a

00:38:22.300 --> 00:38:23.540
video of Carbon, right--

00:38:23.540 --> 00:38:24.750
that you're showing
at the moment?

00:38:24.750 --> 00:38:26.830
You're not running it on your
device at the moment, right?

00:38:26.830 --> 00:38:28.730
YOSSI ELKRIEF: No.

00:38:28.730 --> 00:38:29.460
RICHARD HYMAN: I just wanted
to know whether it's doing

00:38:29.460 --> 00:38:31.150
that without needing
to be plugged in.

00:38:31.150 --> 00:38:33.490
There's a review of it over at
Android Central as well.

00:38:33.490 --> 00:38:34.910
It was posted on Monday.

00:38:39.450 --> 00:38:43.950
YOSSI ELKRIEF: Basically, when I
look on the notification bar

00:38:43.950 --> 00:38:45.950
on the top, I don't
see the device is

00:38:45.950 --> 00:38:47.200
connected to anything.

00:38:51.905 --> 00:38:54.380
RICHARD HYMAN: It still says,
even from Monday, the Beta

00:38:54.380 --> 00:38:56.110
still require root access.

00:38:56.110 --> 00:38:59.465
The final version should
be non-rooted, but no

00:38:59.465 --> 00:39:00.960
one's seen it yet.

00:39:00.960 --> 00:39:05.430
So watch that space, I guess.

00:39:05.430 --> 00:39:07.110
CHRIS BAINES: [? Jay ?]
has put a reply on.

00:39:07.110 --> 00:39:10.050
"I need to update light params
during animation progress

00:39:10.050 --> 00:39:12.460
[? and using ?] to handle
that is more code.

00:39:15.760 --> 00:39:17.425
Changing the light params
during animation--

00:39:20.660 --> 00:39:22.870
I'm not too sure on that one.

00:39:22.870 --> 00:39:26.600
I question why you're
doing that.

00:39:26.600 --> 00:39:30.170
YOSSI ELKRIEF: Why should you do
that during your animation?

00:39:30.170 --> 00:39:34.450
Unless you want to change
objects on your animation

00:39:34.450 --> 00:39:37.470
while it's running.

00:39:37.470 --> 00:39:39.420
CHRIS BAINES: If you need to
change the light params during

00:39:39.420 --> 00:39:44.620
an animation, I would use a
handler and do it that way,

00:39:44.620 --> 00:39:45.430
using the post.

00:39:45.430 --> 00:39:48.210
And then keep posting
yourself.

00:39:48.210 --> 00:39:50.070
RICHARD HYMAN: If you're going
to have an on-progress update

00:39:50.070 --> 00:39:53.440
listener, it's going to be using
a handler to send those

00:39:53.440 --> 00:39:55.410
updates back to the
UI thread anyway.

00:39:55.410 --> 00:39:57.910
So whether you use a handler, or
we have a method that uses

00:39:57.910 --> 00:40:00.040
a handler, it's going
to be the same.

00:40:00.040 --> 00:40:01.916
Fair enough, there's an extra
five lines of code that you

00:40:01.916 --> 00:40:04.581
need, but it shouldn't
be a problem.

00:40:10.120 --> 00:40:12.010
CHRIS BAINES: [? Michelle ?]
from Denmark?

00:40:12.010 --> 00:40:13.380
Sorry if I butchered
your name there.

00:40:17.690 --> 00:40:19.250
"It was a reported that the
[? replies for ?] review

00:40:19.250 --> 00:40:21.670
option was being rolled
out to more developers

00:40:21.670 --> 00:40:23.110
about a week ago.

00:40:23.110 --> 00:40:25.350
I'd really like an official word
on this, as it's a much

00:40:25.350 --> 00:40:27.440
needed feature.

00:40:27.440 --> 00:40:30.670
RICHARD HYMAN: Yeah, it is a
much needed feature and it is

00:40:30.670 --> 00:40:32.360
still being tested.

00:40:32.360 --> 00:40:34.980
So I think it was quite public
that the initial test group

00:40:34.980 --> 00:40:38.060
was the top developers.

00:40:38.060 --> 00:40:42.330
It's not being rolled out at
the moment to everybody.

00:40:42.330 --> 00:40:44.660
Hopefully it will be at some
point, if the tests go well,

00:40:44.660 --> 00:40:48.050
and the feature is used as the
team are expecting it to be

00:40:48.050 --> 00:40:51.090
used and all that
sort of thing.

00:40:51.090 --> 00:40:52.670
We may be able to announce
more at some point.

00:40:55.480 --> 00:40:57.100
It's certainly [INAUDIBLE]
to all developers.

00:40:57.100 --> 00:40:59.550
It's hitting their accounts
right now.

00:41:03.960 --> 00:41:05.210
That's a great feature.

00:41:08.780 --> 00:41:10.625
CHRIS BAINES: That's it
in terms of questions.

00:41:15.410 --> 00:41:17.030
I think we've answered all 17.

00:41:17.030 --> 00:41:18.430
RICHARD HYMAN: All
17 questions.

00:41:18.430 --> 00:41:18.870
Excellent.

00:41:18.870 --> 00:41:23.265
And there's nothing else
appearing in the Hangout chat.

00:41:26.530 --> 00:41:28.650
WIEBE ELSINGA: I know a
co-worker just posted a

00:41:28.650 --> 00:41:34.190
question on the Google+
comments.

00:41:34.190 --> 00:41:34.980
RICHARD HYMAN: Let me
just refresh it and

00:41:34.980 --> 00:41:36.230
see what comes up.

00:41:39.990 --> 00:41:42.740
I've got a quick question
from Jefferson Poe about

00:41:42.740 --> 00:41:44.710
AppWidgetProvider.onupdate.

00:41:44.710 --> 00:41:47.160
The docs say that AppWidget
IDs may include all the

00:41:47.160 --> 00:41:49.010
AppWidget instances
or just a subset.

00:41:49.010 --> 00:41:50.610
What's the criteria of
which instances are

00:41:50.610 --> 00:41:51.860
included in the array?

00:41:54.240 --> 00:41:57.360
Have a look at the source.

00:41:57.360 --> 00:42:02.700
YOSSI ELKRIEF: It depends on if
you added the widget, and

00:42:02.700 --> 00:42:06.210
then removed it, or if you tried
to add more than one

00:42:06.210 --> 00:42:08.920
widget on the same screen.

00:42:08.920 --> 00:42:11.600
RICHARD HYMAN: But then you
would expect all of the

00:42:11.600 --> 00:42:14.470
AppWidgets that are currently
on the screen to be called

00:42:14.470 --> 00:42:16.330
when an update calls, right?

00:42:16.330 --> 00:42:17.880
YOSSI ELKRIEF: Yes.

00:42:17.880 --> 00:42:21.470
Basically what I do on our
widget is go through all the

00:42:21.470 --> 00:42:25.830
array all the time, no matter
how many instances, and check.

00:42:25.830 --> 00:42:27.250
And update them all.

00:42:27.250 --> 00:42:32.920
Or you can lock the feature for
more than one widget on

00:42:32.920 --> 00:42:38.635
screen, and see if you have
another instance running of

00:42:38.635 --> 00:42:39.060
the AppWidget.

00:42:39.060 --> 00:42:42.740
And then, just pop up the
dialogue to the user, saying,

00:42:42.740 --> 00:42:46.350
you can't have more than one
widget running on the screen.

00:42:46.350 --> 00:42:48.070
RICHARD HYMAN: The question
is implying that the

00:42:48.070 --> 00:42:51.670
documentation says it may not
bring up all widget IDs of all

00:42:51.670 --> 00:42:54.100
the current active widgets,
it may be a subset.

00:42:54.100 --> 00:42:56.485
And maybe that would happen.

00:42:56.485 --> 00:42:58.730
It's worth checking
the source.

00:42:58.730 --> 00:43:01.720
There is rate-limiting about how
often widgets can update.

00:43:01.720 --> 00:43:04.520
If you've updated one recently,
forced an update to

00:43:04.520 --> 00:43:06.480
it, then maybe it won't request
the [? auto-update ?]

00:43:06.480 --> 00:43:08.940
during its cycle.

00:43:08.940 --> 00:43:09.990
I don't know that for sure.

00:43:09.990 --> 00:43:11.860
You'd have to check the code.

00:43:11.860 --> 00:43:14.370
All it's saying is that you're
not guaranteed to get the

00:43:14.370 --> 00:43:16.120
entire list of currently
active widgets.

00:43:19.910 --> 00:43:21.525
Like you'll see, I always just
go through the list that I've

00:43:21.525 --> 00:43:22.840
got, unless you have other
ones that need updating.

00:43:27.860 --> 00:43:31.890
Hugo says, "I have a layer-list
drawable, and I

00:43:31.890 --> 00:43:34.226
want to add a line to the
bottom of the drawable.

00:43:34.226 --> 00:43:35.562
The drawable is going
to be scaled.

00:43:35.562 --> 00:43:37.610
I can't get the line to be
at the bottom half of the

00:43:37.610 --> 00:43:38.680
drawable, only in the center.

00:43:38.680 --> 00:43:43.790
Any tips?" Ah, layer-list
drawables.

00:43:43.790 --> 00:43:47.165
They're not very well
documented, are they?

00:43:47.165 --> 00:43:50.298
CHRIS BAINES: No, they're not.

00:43:50.298 --> 00:43:54.560
YOSSI ELKRIEF: So Chris, start
writing the Java Docs.

00:43:54.560 --> 00:43:55.610
RICHARD HYMAN: There
you go, yeah.

00:43:55.610 --> 00:43:56.750
CHRIS BAINES: Cheers, Yossi.

00:43:56.750 --> 00:43:58.000
WIEBE ELSINGA: Your
next code snippet.

00:44:02.530 --> 00:44:03.770
RICHARD HYMAN: I'd have to
knock up the layer-list

00:44:03.770 --> 00:44:06.760
drawable and play around
with it myself.

00:44:06.760 --> 00:44:11.400
Maybe you could put a shape
inside the drawable that's the

00:44:11.400 --> 00:44:14.250
size of the entire drawable but
only has a bottom margin

00:44:14.250 --> 00:44:15.550
or something.

00:44:15.550 --> 00:44:16.800
CHRIS BAINES: There
is no line shape.

00:44:19.780 --> 00:44:22.345
There's a shape, but you
can't layer it on.

00:44:22.345 --> 00:44:23.900
I think the only way you can
do a drawable is probably

00:44:23.900 --> 00:44:25.646
putting a rectangle in over
[? a tag on top, ?] from what

00:44:25.646 --> 00:44:28.310
I remember.

00:44:28.310 --> 00:44:28.830
So I don't know.

00:44:28.830 --> 00:44:30.560
We'll have to have a look
at that one offline.

00:44:30.560 --> 00:44:33.000
And see what we can
[INAUDIBLE].

00:44:33.000 --> 00:44:34.730
RICHARD HYMAN: See what
we can hack together.

00:44:34.730 --> 00:44:36.986
WIEBE ELSINGA: A
code challenge.

00:44:36.986 --> 00:44:37.420
RICHARD HYMAN: Yeah,
sounds quite fun.

00:44:37.420 --> 00:44:41.225
I always just play with those
ones, until it looks like I

00:44:41.225 --> 00:44:43.250
want it to look like.

00:44:43.250 --> 00:44:44.500
I have used them a few times.

00:44:49.600 --> 00:44:53.265
Dustin Evans, at the very bottom
of the G+ thread has

00:44:53.265 --> 00:44:58.060
asked for, "I was wondering if
anyone has any guides on Oauth

00:44:58.060 --> 00:44:59.145
tutorials for Android
development.

00:44:59.145 --> 00:45:02.290
I've pretty much done the Hello
World tutorials, and

00:45:02.290 --> 00:45:07.170
would like to dive deeper."
Yeah, we have two.

00:45:07.170 --> 00:45:12.550
If you look at Google Tasks,
and then go for the code

00:45:12.550 --> 00:45:15.150
samples for Google Tasks,
there's an Android code sample

00:45:15.150 --> 00:45:17.190
that does include Oauth.

00:45:17.190 --> 00:45:18.450
I've used that a few times.

00:45:18.450 --> 00:45:21.500
We did a Google Drive code
lab that used Oauth.

00:45:21.500 --> 00:45:22.260
You can look for that.

00:45:22.260 --> 00:45:23.510
We gave it at Devoxx
this year.

00:45:27.870 --> 00:45:31.370
In your Google Play services
authentication as well, if

00:45:31.370 --> 00:45:32.780
that can cover your needs, then
that's definitely the

00:45:32.780 --> 00:45:34.680
best way of doing it now,
because you can just

00:45:34.680 --> 00:45:37.830
authenticate against
the Google account.

00:45:37.830 --> 00:45:38.650
So have a look.

00:45:38.650 --> 00:45:43.350
But the most commonly used
Oauth example is the

00:45:43.350 --> 00:45:44.810
Google Tasks one.

00:45:44.810 --> 00:45:46.010
So check out Google Tasks.

00:45:46.010 --> 00:45:47.590
I'll see if I can
grab it quickly.

00:45:47.590 --> 00:45:50.070
YOSSI ELKRIEF: But
it's quite old.

00:45:50.070 --> 00:45:54.410
And all of the Play services
were not using the Oauth

00:45:54.410 --> 00:45:57.640
methods for now, because we're
getting the Tokens.

00:46:09.730 --> 00:46:09.882
Developers.googl
e.com/google-app

00:46:09.882 --> 00:46:16.840
s/tasks/oauth-an
d-tasks-on-android

00:46:16.840 --> 00:46:18.672
RICHARD HYMAN: That sounds
probably like it.

00:46:18.672 --> 00:46:21.340
YOSSI ELKRIEF: I'll post
it also on the G+.

00:46:21.340 --> 00:46:22.600
RICHARD HYMAN: You can see the
Android sample there, can you?

00:46:22.600 --> 00:46:23.814
You've got it.

00:46:23.814 --> 00:46:25.782
CHRIS BAINES: Yeah,
he's [INAUDIBLE].

00:46:25.782 --> 00:46:26.650
RICHARD HYMAN: Excellent.

00:46:26.650 --> 00:46:27.635
Yeah, try that.

00:46:27.635 --> 00:46:31.110
That was where I first
figured it out.

00:46:31.110 --> 00:46:33.590
CHRIS BAINES: Andrew Kelly has
put a comment saying how to

00:46:33.590 --> 00:46:35.970
moderate a question
on fragments.

00:46:35.970 --> 00:46:37.790
That's the one I answered
earlier.

00:46:37.790 --> 00:46:39.250
RICHARD HYMAN: Andrew didn't
join in for the first few

00:46:39.250 --> 00:46:42.220
minutes, so did we answer it
before Andrew joined us?

00:46:42.220 --> 00:46:44.315
CHRIS BAINES: No, I answered
it offline, so we can go

00:46:44.315 --> 00:46:45.565
through it again if
I can find it.

00:46:52.060 --> 00:46:56.410
RICHARD HYMAN: Stay with us as
we re-moderate the question.

00:47:01.516 --> 00:47:03.930
CHRIS BAINES: Andrew Kelly
had a scenario

00:47:03.930 --> 00:47:08.660
where he replaces fragments.

00:47:08.660 --> 00:47:11.100
So he adds a fragment via XML.

00:47:11.100 --> 00:47:13.970
And then throughout his
activity, he replaces them

00:47:13.970 --> 00:47:15.560
with other fragment.

00:47:15.560 --> 00:47:17.880
And what he was finding was that
the first fragment, which

00:47:17.880 --> 00:47:20.880
is out of your XML, it wasn't
being replaced.

00:47:20.880 --> 00:47:22.500
It wasn't actually
being removed.

00:47:22.500 --> 00:47:25.300
It was still stuck there behind
all the fragments.

00:47:25.300 --> 00:47:28.390
So he wasn't getting the onPause
or onDetach for you,

00:47:28.390 --> 00:47:29.640
or [INAUDIBLE].

00:47:32.490 --> 00:47:35.780
And so he was asking why
does this happen.

00:47:35.780 --> 00:47:37.440
And to answer you,
I don't know the

00:47:37.440 --> 00:47:39.070
reason why it happens.

00:47:39.070 --> 00:47:42.780
But I put a solution available,
where he replaces

00:47:42.780 --> 00:47:46.000
the XML fragment tag
with a [INAUDIBLE].

00:47:46.000 --> 00:47:49.520
And actually adds the first
fragment in his onCreate.

00:47:49.520 --> 00:47:53.650
So that way it will all keep
happening as before.

00:47:53.650 --> 00:47:56.510
I haven't looked at
the source yet.

00:47:56.510 --> 00:47:57.450
Yeah.

00:47:57.450 --> 00:47:59.612
"Unnamed" is me.

00:47:59.612 --> 00:48:01.540
RICHARD HYMAN: Why is that?

00:48:01.540 --> 00:48:04.090
CHRIS BAINES: I don't know.

00:48:04.090 --> 00:48:06.690
So yeah, that's the only
solution I can think of.

00:48:06.690 --> 00:48:07.370
I haven't looked at
the source yet.

00:48:07.370 --> 00:48:09.110
I'm going to have a
look after this.

00:48:09.110 --> 00:48:12.550
Of the reasons why, my guess is
that the view group, which

00:48:12.550 --> 00:48:18.580
is out of your XML, is needed,
so it can't be replaced within

00:48:18.580 --> 00:48:19.420
the activity.

00:48:19.420 --> 00:48:21.333
But that's my guess without
actually looking.

00:48:24.410 --> 00:48:28.410
Etienne said it works,
so sounds good.

00:48:28.410 --> 00:48:31.030
I don't think there's
any other questions.

00:48:31.030 --> 00:48:34.580
RICHARD HYMAN: Yeah,
we have one.

00:48:34.580 --> 00:48:36.150
I remember seeing it,
it's something about

00:48:36.150 --> 00:48:37.490
share action provider.

00:48:37.490 --> 00:48:39.400
"I would like to have a
custom share provider.

00:48:39.400 --> 00:48:43.820
It looks like activity data
model hinders me quite a lot

00:48:43.820 --> 00:48:45.990
in doing this.

00:48:45.990 --> 00:48:51.130
Any advice on doing it more
easily?" Have some custom

00:48:51.130 --> 00:48:52.380
share provider.

00:48:54.810 --> 00:48:59.340
And then later on, "What is
ActionProvider onPrepare

00:48:59.340 --> 00:49:04.120
sub-menu used for?" Maybe you
could put those questions in

00:49:04.120 --> 00:49:05.520
the moderator for next week.

00:49:05.520 --> 00:49:07.720
I might take a look at them
during the week, and answer

00:49:07.720 --> 00:49:10.610
them formally for you,
[? Jens ?], if you

00:49:10.610 --> 00:49:11.860
can wait that long.

00:49:14.240 --> 00:49:16.170
CHRIS BAINES: I think
we're good.

00:49:16.170 --> 00:49:17.140
RICHARD HYMAN: Yeah.

00:49:17.140 --> 00:49:18.806
Thank you all very much for
joining us, I think we'll cut

00:49:18.806 --> 00:49:19.955
it short there.

00:49:19.955 --> 00:49:21.910
We're only 10 minutes
early, aren't we?

00:49:21.910 --> 00:49:23.160
Not too bad.

00:49:25.020 --> 00:49:27.260
WIEBE ELSINGA: Time to
drive the Android!

00:49:27.260 --> 00:49:28.510
[INTERPOSING VOICES]

00:49:32.762 --> 00:49:35.420
RICHARD HYMAN: I think he's
having trouble with his

00:49:35.420 --> 00:49:36.670
three-point turn.

00:49:39.151 --> 00:49:42.290
That way.

00:49:42.290 --> 00:49:43.120
He's gone.

00:49:43.120 --> 00:49:44.440
There you go.

00:49:44.440 --> 00:49:45.730
WIEBE ELSINGA: Android
is dead.

00:49:45.730 --> 00:49:46.570
RICHARD HYMAN: Cheers, guys.

00:49:46.570 --> 00:49:47.030
CHRIS BAINES: Bye, guys.

00:49:47.030 --> 00:49:48.280
[INTERPOSING VOICES]

