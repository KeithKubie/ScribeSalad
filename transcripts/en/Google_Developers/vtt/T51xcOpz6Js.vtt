WEBVTT
Kind: captions
Language: en

00:00:04.000 --> 00:00:06.000
Michael: All right,
good afternoon, everyone.

00:00:06.000 --> 00:00:09.334
Welcome to the "Compliance
and Security in the Cloud" talk.

00:00:09.334 --> 00:00:12.167
This is part
of the Google Apps track.

00:00:12.167 --> 00:00:14.000
These are some hashtags
you can use

00:00:14.000 --> 00:00:15.667
to tweet about this talk.

00:00:15.667 --> 00:00:17.701
Uh, the picture I took
earlier of you all--

00:00:17.701 --> 00:00:19.834
I posted it
with those hashtags.

00:00:19.834 --> 00:00:22.334
Also, we're collecting feedback
for these sessions,

00:00:22.334 --> 00:00:24.501
so this is the feedback link
you can use.

00:00:24.501 --> 00:00:26.801
Feel free to submit
feedback anytime.

00:00:26.801 --> 00:00:29.000
All right, so let me
tell you about myself.

00:00:29.000 --> 00:00:30.667
My name is Michael Manoochehri.

00:00:30.667 --> 00:00:32.334
I'm on
the Developer Relations team

00:00:32.334 --> 00:00:34.000
supporting the Google Apps APIs.

00:00:34.000 --> 00:00:36.167
That's my handle. Luckily,
my name is unique enough

00:00:36.167 --> 00:00:38.501
for if you want to get ahold
of me, you can just Google me.

00:00:38.501 --> 00:00:40.501
Um, and as you can tell,
my Android avatar

00:00:40.501 --> 00:00:42.501
is a lot cooler than me,
wearing sunglasses,

00:00:42.501 --> 00:00:44.167
and is a lot better dressed.

00:00:44.167 --> 00:00:46.000
Um, now that I've
introduced myself,

00:00:46.000 --> 00:00:48.000
let me, uh, find out
who you are.

00:00:48.000 --> 00:00:50.000
This session will have
a lot of great information

00:00:50.000 --> 00:00:51.701
for any users of Google Apps.

00:00:51.701 --> 00:00:53.501
But, um, if you're
in this session,

00:00:53.501 --> 00:00:55.334
I suspect you're one
of these folks.

00:00:55.334 --> 00:00:57.167
You probably are Google Apps
domain administrators

00:00:57.167 --> 00:00:58.667
or prospective administrators.

00:00:58.667 --> 00:01:00.501
Possibly, you're enterprise
information managers.

00:01:00.501 --> 00:01:02.567
I think there are some CTOs
and chief privacy officers

00:01:02.567 --> 00:01:05.067
at this conference,
maybe some CIOs.

00:01:05.067 --> 00:01:06.901
Um, you might be
system administrators

00:01:06.901 --> 00:01:08.734
from government
and educational institutions,

00:01:08.734 --> 00:01:10.734
large institutions
with thousands of users.

00:01:10.734 --> 00:01:13.067
Um, and I know some of you
are Google Apps resellers.

00:01:13.067 --> 00:01:14.901
You're, um,
independent software vendors.

00:01:14.901 --> 00:01:16.734
There's system integrators here.

00:01:16.734 --> 00:01:18.567
Um, if--if you're one
of these folks,

00:01:18.567 --> 00:01:20.234
this talk is definitely for you.

00:01:20.234 --> 00:01:22.234
Let me talk about what
we're gonna cover today.

00:01:22.234 --> 00:01:24.434
Um, so the first thing
we're gonna do

00:01:24.434 --> 00:01:26.567
is talk about what makes
compliance and security issues

00:01:26.567 --> 00:01:28.067
so challenging.

00:01:28.067 --> 00:01:30.067
We're gonna do a briefer view
about what Google Apps

00:01:30.067 --> 00:01:32.567
provides out of the box
to handle some of these issues.

00:01:32.567 --> 00:01:34.234
Uh, then I'm gonna introduce you

00:01:34.234 --> 00:01:36.400
to the Google Apps
Administrative APIs.

00:01:36.400 --> 00:01:38.234
And I'm gonna talk to you
about them in a way

00:01:38.234 --> 00:01:39.901
that helps you address

00:01:39.901 --> 00:01:42.067
some of these compliance
and security challenges.

00:01:42.067 --> 00:01:44.067
Then we're gonna dive in
and look at some code.

00:01:44.067 --> 00:01:46.567
We're gonna take a look
at three real-life use cases

00:01:46.567 --> 00:01:49.400
involving policy, security,
or compliance challenges,

00:01:49.400 --> 00:01:51.234
and we'll see
how these customers

00:01:51.234 --> 00:01:53.067
use the Google Apps
Administrative APIs

00:01:53.067 --> 00:01:55.901
to help address
some of these challenges.

00:01:55.901 --> 00:01:58.067
So this is a 201 level session.

00:01:58.067 --> 00:01:59.901
We assume
some technical background.

00:01:59.901 --> 00:02:01.634
Um, but I'm gonna cover--

00:02:01.634 --> 00:02:03.467
un-unlike some
of the other sessions

00:02:03.467 --> 00:02:04.968
you've seen at Google I/O,

00:02:04.968 --> 00:02:06.801
I'm gonna cover a very broad
range of technologies,

00:02:06.801 --> 00:02:08.467
so while the code samples
I demonstrate

00:02:08.467 --> 00:02:10.300
are gonna be quite simple,
um, I'm not gonna--

00:02:10.300 --> 00:02:11.968
I'm going to assume
that you know

00:02:11.968 --> 00:02:13.634
how to do your own
development environments,

00:02:13.634 --> 00:02:15.467
or you're already familiar with
some of the technical issues.

00:02:15.467 --> 00:02:17.133
You--you've heard
of some of the things

00:02:17.133 --> 00:02:18.801
I'm going to talk about.

00:02:18.801 --> 00:02:20.634
Um, and as a reminder,
this session is, uh--

00:02:20.634 --> 00:02:23.133
the APIs used in this session
are only for Google Apps

00:02:23.133 --> 00:02:25.968
for business, education,
government, nonprofit users,

00:02:25.968 --> 00:02:29.300
not the consumer GMAIL accounts.

00:02:29.300 --> 00:02:30.968
So let's start.
Let's remind ourselves

00:02:30.968 --> 00:02:32.634
what Google Apps
provides for us.

00:02:32.634 --> 00:02:35.801
What--what brings value to us
from Google Apps?

00:02:35.801 --> 00:02:39.133
So first of all,
collaboration, productivity.

00:02:39.133 --> 00:02:41.634
We're 100% web-centric, right?

00:02:41.634 --> 00:02:43.467
So this allows for a lot
of great opportunities

00:02:43.467 --> 00:02:44.968
for collaboration,

00:02:44.968 --> 00:02:46.801
and that's--that's a great
value-add for you.

00:02:46.801 --> 00:02:48.801
Also innovation--we're always
rolling out new features.

00:02:48.801 --> 00:02:50.801
And you don't have to worry
about software upgrades.

00:02:50.801 --> 00:02:52.300
It's automatic upgrades.

00:02:52.300 --> 00:02:55.300
Um, platform independence--
a very big deal, right?

00:02:55.300 --> 00:02:56.968
You're able to access
Google Apps

00:02:56.968 --> 00:02:58.634
from your workstations at home.

00:02:58.634 --> 00:03:00.467
Your employees can, uh--
can, you know--

00:03:00.467 --> 00:03:02.534
on the road, travel, uh,
you know, independent--

00:03:02.534 --> 00:03:04.400
independent workstations
where you're able

00:03:04.400 --> 00:03:06.200
to access Google Apps
from there.

00:03:06.200 --> 00:03:08.200
Um, but what's most important
for this talk

00:03:08.200 --> 00:03:09.701
is less complexity.

00:03:09.701 --> 00:03:11.534
Now if you were at the keynote
this morning,

00:03:11.534 --> 00:03:13.367
you heard Sundar talk
about administrative costs,

00:03:13.367 --> 00:03:15.200
and how that's a great deal
of the cost

00:03:15.200 --> 00:03:16.701
for IT infrastructure.

00:03:16.701 --> 00:03:19.200
And so what Google Apps provides
is reduced IT complexity.

00:03:19.200 --> 00:03:22.200
We want to be the, um,
we want to be the less complex,

00:03:22.200 --> 00:03:24.033
less-to-worry-about
solution, right?

00:03:24.033 --> 00:03:26.367
So we--we have less hardware,
less licensing costs,

00:03:26.367 --> 00:03:29.534
um, less need to, uh,
provide software upgrades

00:03:29.534 --> 00:03:32.033
to disparate machines
across your network.

00:03:32.033 --> 00:03:34.033
Okay, so you know all that.
That's why you're here.

00:03:34.033 --> 00:03:36.033
Um, let's talk
about some security things

00:03:36.033 --> 00:03:38.067
out of the box, like,
what about security?

00:03:38.067 --> 00:03:40.534
Well, uh, Google Apps provides
the same security,

00:03:40.534 --> 00:03:42.367
uh, and the same uptime
and infrastructure

00:03:42.367 --> 00:03:44.033
used for our own
Google products.

00:03:44.033 --> 00:03:46.367
This is great availability
and great security.

00:03:46.367 --> 00:03:48.367
We also lower the barrier
of entry

00:03:48.367 --> 00:03:50.033
to enterprise security features,
right?

00:03:50.033 --> 00:03:52.033
So we have
2-factor authentication,

00:03:52.033 --> 00:03:53.701
features like
SAML-based Single Sign-on,

00:03:53.701 --> 00:03:55.534
which I'll cover in a minute.

00:03:55.534 --> 00:03:57.534
Um, and that's great.

00:03:57.534 --> 00:03:59.534
But just because
we can help you simplify

00:03:59.534 --> 00:04:01.100
your IT infrastructure,

00:04:01.100 --> 00:04:02.934
and despite the benefits
of Google Apps,

00:04:02.934 --> 00:04:04.934
um, just becoming a customer
of Google Apps

00:04:04.934 --> 00:04:07.601
doesn't solve all of
your information challenges.

00:04:07.601 --> 00:04:09.601
Let me give you an example.

00:04:09.601 --> 00:04:11.801
Can somebody in the audience
tell me who these two folks are?

00:04:11.801 --> 00:04:14.100
And don't cheat
by using Google Goggles.

00:04:14.100 --> 00:04:16.934
Anyone? No?

00:04:16.934 --> 00:04:19.601
Anyone from a publicly traded
U.S. company?

00:04:19.601 --> 00:04:21.601
Okay, no guesses.

00:04:21.601 --> 00:04:25.434
This is Paul Sarbanes
and Michael Oxley, right?

00:04:25.434 --> 00:04:26.934
[chuckles]

00:04:26.934 --> 00:04:28.767
Some people do know
who these are.

00:04:28.767 --> 00:04:30.434
So okay, besides being
dashing gentlemen,

00:04:30.434 --> 00:04:32.434
um, and former congressional
representatives from the U.S.,

00:04:32.434 --> 00:04:34.434
these are sponsors
of the Sarbanes-Oxley Act,

00:04:34.434 --> 00:04:36.934
or--or SOX, as we call it.
So what did that do?

00:04:36.934 --> 00:04:39.934
So that was U.S. legislation
passed in 2002

00:04:39.934 --> 00:04:42.767
in part as a reaction to
the fiscal accounting scandals

00:04:42.767 --> 00:04:44.801
from Enron and WorldCom.

00:04:44.801 --> 00:04:48.100
Um, it increased regulations
on fiscal oversight

00:04:48.100 --> 00:04:50.601
of publicly traded
U.S. companies, right?

00:04:50.601 --> 00:04:53.434
Let's--let's see,
what actually happened?

00:04:53.434 --> 00:04:55.267
Um, so SOX gave
the U.S. government agencies

00:04:55.267 --> 00:04:58.100
additional powers to ensure
that proper fiscal compliance

00:04:58.100 --> 00:04:59.934
and organizational controls
are being followed,

00:04:59.934 --> 00:05:02.334
so stricter rules
around auditor independence.

00:05:02.334 --> 00:05:05.000
Um, the audits
of organizational controls

00:05:05.000 --> 00:05:06.501
was very important.

00:05:06.501 --> 00:05:08.501
And I-I know not all of you
are from the United States,

00:05:08.501 --> 00:05:10.000
and not all of you work

00:05:10.000 --> 00:05:11.667
at publicly traded
U.S. companies.

00:05:11.667 --> 00:05:13.501
But the point
I'm trying to make here

00:05:13.501 --> 00:05:15.501
is this law passed in 2002
and changed everything

00:05:15.501 --> 00:05:17.200
for the people affected by it.

00:05:17.200 --> 00:05:19.000
Regulations can change quickly.

00:05:19.000 --> 00:05:20.834
Compliance regulations
can change quickly

00:05:20.834 --> 00:05:22.667
and standards come along
all the time.

00:05:22.667 --> 00:05:25.334
Uh, also regulations differ
from country to country.

00:05:25.334 --> 00:05:27.334
And what I'm trying say here

00:05:27.334 --> 00:05:29.334
is that you never know
when these changes will occur.

00:05:29.334 --> 00:05:31.334
You just have to be ready
for them.

00:05:31.334 --> 00:05:33.000
So in the digital age,

00:05:33.000 --> 00:05:35.334
fiscal compliance includes
information compliance, right?

00:05:35.334 --> 00:05:38.834
Um, there's many questions
around some of these issues.

00:05:38.834 --> 00:05:40.667
For example, if you're
an IT administrator,

00:05:40.667 --> 00:05:42.667
you want to know, well,
what do my internal reporting

00:05:42.667 --> 00:05:44.501
and control systems
even look like?

00:05:44.501 --> 00:05:46.334
Um, how do I establish
a baseline

00:05:46.334 --> 00:05:47.834
for standard certification?

00:05:47.834 --> 00:05:49.667
Uh, how much does it cost
to audit my data?

00:05:49.667 --> 00:05:51.701
So what are some risks
associated with user data?

00:05:51.701 --> 00:05:53.334
You might have employee leaks.

00:05:53.334 --> 00:05:55.167
You might have, uh,
security breaches.

00:05:55.167 --> 00:05:57.000
How do you deal
with these things?

00:05:57.000 --> 00:05:59.000
So these things are challenging
enough in a legacy setting.

00:05:59.000 --> 00:06:01.067
But when you move to the cloud,
what tools do we have

00:06:01.067 --> 00:06:02.734
to address
some of these challenges?

00:06:02.734 --> 00:06:05.901
And that's really what this talk
is gonna be about.

00:06:05.901 --> 00:06:07.400
Now apart from compliance,

00:06:07.400 --> 00:06:09.567
there's day-to-day
security issues, right?

00:06:09.567 --> 00:06:11.234
Are my users' passwords safe?

00:06:11.234 --> 00:06:13.400
Like, how do I know if
an account has been compromised?

00:06:13.400 --> 00:06:15.400
Um, what about
my identity management policy?

00:06:15.400 --> 00:06:16.901
Do I already have one?

00:06:16.901 --> 00:06:18.734
How do I plug Google Apps
into that?

00:06:18.734 --> 00:06:20.567
And you're gonna find out today.

00:06:20.567 --> 00:06:22.400
So here's--here's
the two takeaways I want to--

00:06:22.400 --> 00:06:24.267
I want to leave you with
at the end of this talk.

00:06:24.267 --> 00:06:26.234
And one is,
as I said before,

00:06:26.234 --> 00:06:28.067
dealing with compliance
and security issues

00:06:28.067 --> 00:06:30.234
often means being prepared
for the unexpected.

00:06:30.234 --> 00:06:32.067
And the second thing
I want to tell you

00:06:32.067 --> 00:06:33.734
is the Google Apps
Administrative APIs

00:06:33.734 --> 00:06:36.901
are a set of tools to help you
address these custom challenges.

00:06:36.901 --> 00:06:40.067
Okay, so let me introduce you
to the APIs

00:06:40.067 --> 00:06:42.734
that I'm gonna be
talking about today.

00:06:42.734 --> 00:06:44.234
Consider the typical actors

00:06:44.234 --> 00:06:45.901
in your business environment,
right?

00:06:45.901 --> 00:06:48.734
You have administrators.
Some of you are administrators.

00:06:48.734 --> 00:06:50.734
You've all got users, employees,

00:06:50.734 --> 00:06:52.567
people who interact with data
and services, right?

00:06:52.567 --> 00:06:54.400
So these are, like,
documents, GMAIL calendars.

00:06:54.400 --> 00:06:56.067
And then you have institutions,

00:06:56.067 --> 00:06:57.901
and those institutions can be
your own company.

00:06:57.901 --> 00:06:59.567
They can be regulatory agencies.

00:06:59.567 --> 00:07:02.133
They can be, um, some kind
of school policy.

00:07:02.133 --> 00:07:03.801
They can be legal entities,

00:07:03.801 --> 00:07:05.634
and you need to deal
with them, as well.

00:07:05.634 --> 00:07:07.801
You can't leave them
out of the equation.

00:07:07.801 --> 00:07:10.467
So what the Google Apps
Administrative APIs do

00:07:10.467 --> 00:07:12.634
is tie together these actors
programmatically

00:07:12.634 --> 00:07:14.968
and let you create new tools
and services

00:07:14.968 --> 00:07:17.133
to it--uh, to interact
with these actors.

00:07:17.133 --> 00:07:20.133
For example,
I'm gonna introduce you

00:07:20.133 --> 00:07:22.801
to the Provisioning API
and the Email Migration API.

00:07:22.801 --> 00:07:24.300
These are used to create

00:07:24.300 --> 00:07:26.133
and retrieve information
about users.

00:07:26.133 --> 00:07:27.634
And the Email Migration API

00:07:27.634 --> 00:07:29.634
is obviously
for deployment purposes.

00:07:29.634 --> 00:07:31.968
For user settings, we offer
the Admin Settings API

00:07:31.968 --> 00:07:33.467
and the Email Settings API,

00:07:33.467 --> 00:07:35.133
and I'll get into those
a little later.

00:07:35.133 --> 00:07:36.634
And finally, for interacting

00:07:36.634 --> 00:07:38.300
with some of these
institutional actors,

00:07:38.300 --> 00:07:40.133
we offer a Reporting API
and an Audit API,

00:07:40.133 --> 00:07:41.801
and both of these are used

00:07:41.801 --> 00:07:44.300
for reporting
and compliance purposes.

00:07:44.300 --> 00:07:48.133
Okay, so why Google Apps
Administrative APIs at all?

00:07:48.133 --> 00:07:49.634
We already have a control panel.

00:07:49.634 --> 00:07:52.133
That's one of the other great
value-adds for Google Apps.

00:07:52.133 --> 00:07:53.801
You can manage user accounts.

00:07:53.801 --> 00:07:55.467
You can create
organization units.

00:07:55.467 --> 00:07:57.467
You can provide
different access levels

00:07:57.467 --> 00:07:59.300
of some of the services
we offer.

00:07:59.300 --> 00:08:00.801
And we've recently added

00:08:00.801 --> 00:08:02.534
some finer-grained
administrative controls

00:08:02.534 --> 00:08:04.367
to this panel.

00:08:04.367 --> 00:08:06.033
Right?

00:08:06.033 --> 00:08:07.701
Well, the answer's obvious.

00:08:07.701 --> 00:08:09.534
We--we want to give you
the ability

00:08:09.534 --> 00:08:11.367
to create tools and services
to, you know,

00:08:11.367 --> 00:08:13.200
automate context--
uh, complex tasks--

00:08:13.200 --> 00:08:15.033
less "yak-shaving,"
as we call it.

00:08:15.033 --> 00:08:17.534
Um, we want to allow Google Apps
to adapt to custom situations.

00:08:17.534 --> 00:08:19.367
All of your--all of
your different needs

00:08:19.367 --> 00:08:21.200
are--you know,
you have different needs.

00:08:21.200 --> 00:08:23.033
You have custom needs,
and we want to make sure

00:08:23.033 --> 00:08:24.868
that Google Apps can adapt
to those custom needs.

00:08:24.868 --> 00:08:27.067
It's also a great platform to
build new software and services.

00:08:27.067 --> 00:08:28.868
We have
the Google Apps Marketplace.

00:08:28.868 --> 00:08:31.033
You can also build
independent software for people.

00:08:31.033 --> 00:08:33.033
Um, and finally,
it's for growing a business,

00:08:33.033 --> 00:08:34.701
providing services,
deployment services,

00:08:34.701 --> 00:08:36.200
integration services.

00:08:36.200 --> 00:08:39.200
There's great
opportunities here.

00:08:39.200 --> 00:08:40.868
All right, so in general,

00:08:40.868 --> 00:08:42.534
the Google Apps
Administrative APIs

00:08:42.534 --> 00:08:44.367
that I'm gonna talk about
are only available

00:08:44.367 --> 00:08:46.367
for use
by domain administrators.

00:08:46.367 --> 00:08:48.200
Um, and as I said before,
they're available

00:08:48.200 --> 00:08:50.200
for Google Apps for Business,
education,

00:08:50.200 --> 00:08:53.200
government, and ISP users
and nonprofit users, as well.

00:08:53.200 --> 00:08:55.534
And I'm gonna say just
a few words about authorization.

00:08:55.534 --> 00:08:58.033
Authorization--
we suggest using OAuth.

00:08:58.033 --> 00:09:00.367
Um, I'm gonna leave some
of the authorization steps

00:09:00.367 --> 00:09:02.434
out of the--
out of the code samples I use,

00:09:02.434 --> 00:09:04.601
because there's multiple ways
to authorize these APIs.

00:09:04.601 --> 00:09:07.267
However, yes, we would suggest
using OAuth. Why?

00:09:07.267 --> 00:09:08.934
If you've never heard of OAuth,

00:09:08.934 --> 00:09:10.767
OAuth is a way to authorize
network services

00:09:10.767 --> 00:09:12.767
without sharing passwords.

00:09:12.767 --> 00:09:14.767
This is particularly important
for these APIs,

00:09:14.767 --> 00:09:16.934
because all of these APIs
require administrator access.

00:09:16.934 --> 00:09:18.767
And to--you want to share
those passwords

00:09:18.767 --> 00:09:20.934
as little as possible.

00:09:20.934 --> 00:09:23.934
Um, so OAuth requires
a whole separate session,

00:09:23.934 --> 00:09:25.934
and some of you
have probably been

00:09:25.934 --> 00:09:27.934
to the OpenID and OAuth session
that happened, I think,

00:09:27.934 --> 00:09:29.434
just before this session.

00:09:29.434 --> 00:09:31.267
If you haven't,
you definitely should check out

00:09:31.267 --> 00:09:32.934
the video recording
of it later.

00:09:32.934 --> 00:09:34.601
Um, it was given by Ryan Boyd.

00:09:34.601 --> 00:09:37.100
Um, and I'm gonna say
another thing about OAuth 2.

00:09:37.100 --> 00:09:39.434
Hopefully, you've heard
a lot about the OAuth 2 flow.

00:09:39.434 --> 00:09:40.934
Um, that's great.

00:09:40.934 --> 00:09:42.934
We're still working
on getting that flow integrated

00:09:42.934 --> 00:09:44.767
into these APIs,
but we're working on it,

00:09:44.767 --> 00:09:46.601
and we'll get that out soon.

00:09:46.601 --> 00:09:48.601
For now, uh, the Google Apps
Administrative APIs

00:09:48.601 --> 00:09:50.434
work with the OAuth 1.0 flow,

00:09:50.434 --> 00:09:52.434
and we've just published
an article about using

00:09:52.434 --> 00:09:54.100
the Provisioning API
with that flow.

00:09:54.100 --> 00:09:55.601
So for more information,

00:09:55.601 --> 00:09:57.934
I'll give you some links
at the end of the talk.

00:09:57.934 --> 00:10:00.601
Now the Apps APIs also use
the Google Data Protocol.

00:10:00.601 --> 00:10:02.267
Um, this is
an XML-based standard

00:10:02.267 --> 00:10:03.767
derived from AtomPub.

00:10:03.767 --> 00:10:05.601
If you've ever seen
an Atom, uh, newsfeed,

00:10:05.601 --> 00:10:07.434
you kinda know
what it looks like.

00:10:07.434 --> 00:10:09.434
Um, it's generally--these are
generally RESTful APIs--

00:10:09.434 --> 00:10:10.934
create, update,
delete resources.

00:10:10.934 --> 00:10:12.767
Just as an example, um,
this is the shortest

00:10:12.767 --> 00:10:14.767
Google Data Protocol document
I could find.

00:10:14.767 --> 00:10:16.267
Don't worry about this.

00:10:16.267 --> 00:10:18.634
Normally you would interact with
the Google Administrative APIs

00:10:18.634 --> 00:10:21.267
via, uh, libraries
and service classes.

00:10:21.267 --> 00:10:23.767
And we have open-source
Google Data Protocol libraries

00:10:23.767 --> 00:10:26.767
available for Java,
.NET, Python, PHP.

00:10:26.767 --> 00:10:29.934
There's a few other languages
out there that we support, too--

00:10:29.934 --> 00:10:31.434
or that are supported,

00:10:31.434 --> 00:10:33.267
but not--not by anything
on Google Code.

00:10:33.267 --> 00:10:35.267
And for the code that I'm
gonna demonstrate today,

00:10:35.267 --> 00:10:38.434
we're gonna use the Google Data
Python Client Library.

00:10:40.000 --> 00:10:42.000
All right,
so now I've introduced you

00:10:42.000 --> 00:10:44.000
to the Google Apps
Administrative APIs in general.

00:10:44.000 --> 00:10:45.834
Let's dig down and see
how they're used in practice.

00:10:45.834 --> 00:10:47.667
I'm gonna share three stories
with you

00:10:47.667 --> 00:10:49.334
involving actual
customer situations

00:10:49.334 --> 00:10:51.534
with unexpected compliance
and security challenges,

00:10:51.534 --> 00:10:53.000
and we're gonna see

00:10:53.000 --> 00:10:54.667
how the Google Apps
Administrative APIs

00:10:54.667 --> 00:10:56.667
were used to address
these challenges.

00:10:56.667 --> 00:10:59.501
Let me tell you the tale
of the Google Apps reseller.

00:10:59.501 --> 00:11:02.067
So I'm gonna introduce you
to my friend, Subradeep.

00:11:02.067 --> 00:11:03.901
I've been working with him
for a while.

00:11:03.901 --> 00:11:05.567
Subradeep is
a Google Apps reseller.

00:11:05.567 --> 00:11:07.234
He works out of Bangalore.

00:11:07.234 --> 00:11:09.067
He's also a, um,
system integrator.

00:11:09.067 --> 00:11:11.067
He makes his business helping
people deploy Google Apps,

00:11:11.067 --> 00:11:12.734
and he resells Google Apps.

00:11:12.734 --> 00:11:14.400
He uses the Administrative APIs

00:11:14.400 --> 00:11:16.734
to automate repetitive
administrative processes.

00:11:16.734 --> 00:11:18.400
He builds tools for deployment.

00:11:18.400 --> 00:11:20.901
He builds, um, alternate
administrative consoles

00:11:20.901 --> 00:11:22.901
for his employees--
or for his customers.

00:11:22.901 --> 00:11:25.100
And also, he uses these tools
to help with billing,

00:11:25.100 --> 00:11:27.067
so he knows
how many user accounts

00:11:27.067 --> 00:11:29.734
are being deployed on his
customer domains, et cetera.

00:11:29.734 --> 00:11:32.234
So he has many customers
who want to migrate

00:11:32.234 --> 00:11:34.734
their legacy accounts
to Google Apps accounts.

00:11:34.734 --> 00:11:37.901
And, um, as--

00:11:37.901 --> 00:11:39.567
you know better than I do,

00:11:39.567 --> 00:11:41.234
as system administrators
or CIOs,

00:11:41.234 --> 00:11:42.901
if you manage user accounts,

00:11:42.901 --> 00:11:44.734
you don't save passwords
in plain text.

00:11:44.734 --> 00:11:46.567
And even a casual observer
of, you know,

00:11:46.567 --> 00:11:48.400
recent tech news,
knows that it's a bad idea

00:11:48.400 --> 00:11:50.400
to store user passwords
in plain text.

00:11:50.400 --> 00:11:51.901
Um, better to store

00:11:51.901 --> 00:11:53.567
cryptographic caches
of the passwords,

00:11:53.567 --> 00:11:55.567
uh, in case your user database
is compromised, right?

00:11:55.567 --> 00:11:57.567
So in this case,
Subradeep often has customers

00:11:57.567 --> 00:12:00.234
with, um, account information
that's in this format, right?

00:12:00.234 --> 00:12:02.634
He has maybe a username,
maybe a first and last name.

00:12:02.634 --> 00:12:04.133
And then he's given

00:12:04.133 --> 00:12:05.801
a cryptographic hash
of a password.

00:12:05.801 --> 00:12:07.634
And he's asked to move
these user accounts

00:12:07.634 --> 00:12:10.467
to Google Apps with the pass--
hashed password intact.

00:12:10.467 --> 00:12:12.634
This is a very common
deployment issue, right?

00:12:12.634 --> 00:12:15.133
So how does he do this?
You know, he needs to move--

00:12:15.133 --> 00:12:16.968
he needs to migrate
these accounts

00:12:16.968 --> 00:12:19.133
without pre--while preserving
this hashed password.

00:12:19.133 --> 00:12:20.968
He doesn't want to ask
the customers,

00:12:20.968 --> 00:12:22.801
uh, the users
for their passwords again.

00:12:22.801 --> 00:12:25.467
He wants to make the deployment
as seamless as possible.

00:12:25.467 --> 00:12:28.634
How does he do this quickly
and securely without violating

00:12:28.634 --> 00:12:31.968
that customer's
identity management policy?

00:12:31.968 --> 00:12:33.634
Well, luckily, he can use

00:12:33.634 --> 00:12:35.300
the Google Apps
Provisioning API.

00:12:35.300 --> 00:12:38.634
This is the bread-and-butter API
of Google Apps.

00:12:38.634 --> 00:12:40.801
And this API lets you create
and manage users,

00:12:40.801 --> 00:12:43.133
groups, organization units,
nicknames.

00:12:43.133 --> 00:12:45.467
Um, read and write access
is available

00:12:45.467 --> 00:12:48.467
for the Google Apps
for business, um, accounts--

00:12:48.467 --> 00:12:50.467
you know, .gov, ISP versions,

00:12:50.467 --> 00:12:52.467
but it--this is one API
that's available

00:12:52.467 --> 00:12:55.300
for all product versions
for Marketplace applications.

00:12:55.300 --> 00:12:57.300
And use of this API
must be enabled

00:12:57.300 --> 00:12:59.133
in the Google Apps
control panel.

00:12:59.133 --> 00:13:00.801
It's a very powerful API.

00:13:00.801 --> 00:13:02.868
Let me give you an example
of creating a user account

00:13:02.868 --> 00:13:05.567
using this API.

00:13:05.567 --> 00:13:07.534
Before we look at some code,
I'm gonna show you, um,

00:13:07.534 --> 00:13:09.200
what's happening
behind the scenes

00:13:09.200 --> 00:13:10.868
with the Google Data Protocol.

00:13:10.868 --> 00:13:12.868
To create a new user,
we'd make a POST request

00:13:12.868 --> 00:13:14.868
along with some data
in a Google Data document

00:13:14.868 --> 00:13:17.868
to the following URI.

00:13:17.868 --> 00:13:19.868
Oh, you would replace,
of course, "yourdomain"

00:13:19.868 --> 00:13:21.534
with the domain in question.

00:13:21.534 --> 00:13:23.200
What did we send
in that POST request?

00:13:23.200 --> 00:13:25.200
Well, here's a Google Data
document, um,

00:13:25.200 --> 00:13:27.701
that--that shows
the user creation data.

00:13:27.701 --> 00:13:29.534
Let me highlight
the interesting parts.

00:13:29.534 --> 00:13:31.200
Don't worry about the details.

00:13:31.200 --> 00:13:33.033
So what we're doing
is we're gonna create

00:13:33.033 --> 00:13:34.701
a new user named "susan_jones."

00:13:34.701 --> 00:13:36.200
We're gonna provide

00:13:36.200 --> 00:13:37.868
a cryptographically
hashed password.

00:13:37.868 --> 00:13:39.868
We're gonna tell the API
which algorithm we've used

00:13:39.868 --> 00:13:41.367
to hash this password.

00:13:41.367 --> 00:13:43.133
And we're gonna give
a first and last name, as well.

00:13:43.133 --> 00:13:45.133
Okay, so you wouldn't
normally do this,

00:13:45.133 --> 00:13:46.968
unless you're writing
your own client libraries,

00:13:46.968 --> 00:13:48.801
or you're running some kind
of shell script

00:13:48.801 --> 00:13:50.300
from the command line.

00:13:50.300 --> 00:13:52.300
What you'd rather do is use
the available client libraries.

00:13:52.300 --> 00:13:54.133
So let's illustrate
what this looks like

00:13:54.133 --> 00:13:57.801
using the Google Data
Python Client Library.

00:13:57.801 --> 00:14:00.300
So the class used to make calls
to the Provisioning API

00:14:00.300 --> 00:14:02.200
and the Google Data
Python Client Library

00:14:02.200 --> 00:14:03.868
is called the AppsService.

00:14:03.868 --> 00:14:05.534
We're gonna import
this service class.

00:14:05.534 --> 00:14:07.534
We're gonna instantiate
a new object.

00:14:07.534 --> 00:14:10.033
I'm gonna skip
the authorization step.

00:14:10.033 --> 00:14:13.200
Once we have this, uh,
service class initiated,

00:14:13.200 --> 00:14:15.200
we're gonna call
the CreateUser method.

00:14:15.200 --> 00:14:17.200
And let me highlight
the same data fields

00:14:17.200 --> 00:14:20.200
that I showed you
in the Google Data document.

00:14:20.200 --> 00:14:22.033
Okay, so we are--
we're creating a new user

00:14:22.033 --> 00:14:24.534
named "susan_jones,"
first and last name,

00:14:24.534 --> 00:14:26.367
cryptographically hashed
password

00:14:26.367 --> 00:14:27.868
with the MD5 algorithm.

00:14:27.868 --> 00:14:29.367
The Provisioning API supports

00:14:29.367 --> 00:14:31.033
both SHA-1 and MD5
hashed passwords.

00:14:31.033 --> 00:14:34.200
So great,
that was pretty simple.

00:14:34.200 --> 00:14:36.033
But normally,
it's not that simple.

00:14:36.033 --> 00:14:38.033
Normally, you don't
just create one user account.

00:14:38.033 --> 00:14:40.534
You create, uh,
10,000 at a time, a lot.

00:14:40.534 --> 00:14:42.367
Um, oftentimes you might have,
you know,

00:14:42.367 --> 00:14:45.234
a CSV file of usernames,
a database, something.

00:14:45.234 --> 00:14:47.534
So in this case,
here's a list of tuples,

00:14:47.534 --> 00:14:50.033
uh, representing
multiple user accounts.

00:14:50.033 --> 00:14:51.701
We have the same thing--

00:14:51.701 --> 00:14:53.534
Susan Jones,
someone named Larry Joe,

00:14:53.534 --> 00:14:55.868
and you know,
thousands of others.

00:14:55.868 --> 00:14:57.868
So how would we approach this?
Well, it's pretty simple.

00:14:57.868 --> 00:14:59.701
Obviously, you'd run
a "for loop,"

00:14:59.701 --> 00:15:01.601
iterate through the list
of accounts

00:15:01.601 --> 00:15:03.601
and create--run the same
CreateUser method

00:15:03.601 --> 00:15:05.534
on, uh,
on every single account.

00:15:08.334 --> 00:15:10.334
Simple, right?
Well, no, it's not that simple.

00:15:10.334 --> 00:15:12.167
Um, here's the first tip
I'll provide

00:15:12.167 --> 00:15:13.667
for the Provisioning API.

00:15:13.667 --> 00:15:15.334
And I'm gonna highlight
this tip,

00:15:15.334 --> 00:15:17.334
because it's useful for the rest
of the APIs I talk--

00:15:17.334 --> 00:15:18.868
I'm talking about.

00:15:18.868 --> 00:15:20.667
Um, like many of the APIs
at Google,

00:15:20.667 --> 00:15:22.167
we enforce rate limits,

00:15:22.167 --> 00:15:24.000
but these--the rate limits
for these APIs

00:15:24.000 --> 00:15:26.334
tend to change with capacity,
um, on our end.

00:15:26.334 --> 00:15:28.000
So the problem with these, uh,

00:15:28.000 --> 00:15:29.834
the problem that Subradeep
is gonna face

00:15:29.834 --> 00:15:31.667
is the Administrative APIs
tend to be used

00:15:31.667 --> 00:15:33.334
very heavily
in short bursts, right?

00:15:33.334 --> 00:15:35.334
You're gonna make 10,000 calls
to the API as fast as you can,

00:15:35.334 --> 00:15:37.334
or you're gonna change
every user setting

00:15:37.334 --> 00:15:39.334
on a--on a huge domain.

00:15:39.334 --> 00:15:41.667
Um, if you make quite a few
calls in a short time,

00:15:41.667 --> 00:15:43.667
you may come up
against those rate limits.

00:15:43.667 --> 00:15:45.167
And when you do,

00:15:45.167 --> 00:15:48.167
you'll get a service unavailable
503 HTTP status message.

00:15:48.167 --> 00:15:49.834
So how do we deal with this?

00:15:49.834 --> 00:15:51.868
Well, we--we recommend using
some kind of back-off approach,

00:15:51.868 --> 00:15:53.667
maybe an exponential back-off
or linear back-off.

00:15:53.667 --> 00:15:55.501
Let me demonstrate
what that looks like.

00:15:55.501 --> 00:15:57.334
I'll--I'll give you
a very simple example

00:15:57.334 --> 00:15:59.000
of how to deal with this.

00:15:59.000 --> 00:16:00.834
All right,
so Subradeep needs to import

00:16:00.834 --> 00:16:02.734
some additional modules
to make this work.

00:16:02.734 --> 00:16:05.234
Um, let's say he imports
some time modules

00:16:05.234 --> 00:16:06.901
to help with some delay.

00:16:06.901 --> 00:16:08.801
And he's gonna import
a class called

00:16:08.801 --> 00:16:10.300
the AppsForYourDomainException

00:16:10.300 --> 00:16:12.133
from the Google Data
Python Client Library

00:16:12.133 --> 00:16:14.133
to handle exceptions.
Let's set two variables.

00:16:14.133 --> 00:16:16.467
Let's set a delay variable.
This will be the amount of time

00:16:16.467 --> 00:16:19.133
we wait before making a call
to the API.

00:16:19.133 --> 00:16:20.968
And let's set
an increment value,

00:16:20.968 --> 00:16:22.968
so this is how much time we're
gonna increment the delay,

00:16:22.968 --> 00:16:24.634
if we hit that rate limit.

00:16:24.634 --> 00:16:26.467
Let me show you what this
looks like.

00:16:26.467 --> 00:16:28.300
Um, let's go back
to our "for" loop.

00:16:28.300 --> 00:16:29.968
So here's our "for" loop before,

00:16:29.968 --> 00:16:31.968
the one that we think, you know,
might cause some problems,

00:16:31.968 --> 00:16:33.801
'cause we're gonna come up
against a rate limit

00:16:33.801 --> 00:16:35.467
if we're provisioning
too quickly.

00:16:35.467 --> 00:16:37.300
Um, we're gonna add
some additional code.

00:16:37.300 --> 00:16:38.801
Let's add a "while" loop.

00:16:38.801 --> 00:16:40.801
So if the user account
is created successfully,

00:16:40.801 --> 00:16:42.467
no problem,
we leave the "while" loop,

00:16:42.467 --> 00:16:45.133
move on to the next user,
everything's great.

00:16:45.133 --> 00:16:47.634
If there's an exception,
we're gonna handle it.

00:16:47.634 --> 00:16:49.467
Uh, we're gonna catch
that exception,

00:16:49.467 --> 00:16:51.634
and we're gonna, um, figure out
what the cause of it was.

00:16:51.634 --> 00:16:53.467
If the cause was a 503 status,

00:16:53.467 --> 00:16:55.300
maybe because we hit
a rate limit,

00:16:55.300 --> 00:16:57.133
or there might have been
some network problems

00:16:57.133 --> 00:16:58.834
between the client and Google,

00:16:58.834 --> 00:17:00.634
um, we're gonna increment
the delay value.

00:17:00.634 --> 00:17:02.701
It's set to 0.
We're gonna increment it to 5.

00:17:02.701 --> 00:17:05.434
We're gonna wait that long,
and then we'll retry it.

00:17:07.434 --> 00:17:09.100
So if it works, great.

00:17:09.100 --> 00:17:11.267
If not, we repeat
with a longer delay,

00:17:11.267 --> 00:17:13.601
um, and, you know,
everything will be fine.

00:17:13.601 --> 00:17:15.601
This is a simple--
this is just a simple example,

00:17:15.601 --> 00:17:17.267
but I wanted to highlight this,

00:17:17.267 --> 00:17:19.100
because this is
a very common question.

00:17:19.100 --> 00:17:20.934
We get a lot
of administrators asking

00:17:20.934 --> 00:17:22.934
how to do things
as quickly as possible.

00:17:22.934 --> 00:17:24.934
Um, and in any case, you should
always use exception handling

00:17:24.934 --> 00:17:26.934
when you're doing functions
like this.

00:17:26.934 --> 00:17:28.601
Let me give you a few more tips

00:17:28.601 --> 00:17:30.434
before we leave
the Provisioning API.

00:17:30.434 --> 00:17:32.300
Um, newly provisioned users
take some time

00:17:32.300 --> 00:17:33.934
to appear in the control panel.

00:17:33.934 --> 00:17:35.767
A lot is happening
behind the scenes

00:17:35.767 --> 00:17:37.267
when you create a user.

00:17:37.267 --> 00:17:39.100
Um, here's another thing
you should know--

00:17:39.100 --> 00:17:40.601
deleted user data--

00:17:40.601 --> 00:17:42.434
even if you delete a user
through the control panel--

00:17:42.434 --> 00:17:44.267
you probably may have heard
of this already--

00:17:44.267 --> 00:17:45.767
or through the API.

00:17:45.767 --> 00:17:47.601
It's held for five days
for security purposes.

00:17:47.601 --> 00:17:49.434
This is another security feature
of Google Apps.

00:17:49.434 --> 00:17:51.434
If you, um--if a--
if a user

00:17:51.434 --> 00:17:53.434
kind of has maliciously deleted
or accidentally deleted,

00:17:53.434 --> 00:17:55.434
five days usually gives us
enough time

00:17:55.434 --> 00:17:56.934
to recover that account.

00:17:56.934 --> 00:17:58.767
And one of the things
we're working with

00:17:58.767 --> 00:18:00.601
with the Provisioning API
is to improve throughput,

00:18:00.601 --> 00:18:02.334
so you don't have to worry

00:18:02.334 --> 00:18:04.167
about these rate-limiting steps
at all.

00:18:04.167 --> 00:18:06.033
So great,
so Subradeep's very happy.

00:18:06.033 --> 00:18:07.834
He's--he was able to migrate
these user accounts

00:18:07.834 --> 00:18:09.334
while keeping these hashed--

00:18:09.334 --> 00:18:11.000
cryptographically hashed
passwords intact.

00:18:11.000 --> 00:18:12.501
What about the e-mail?

00:18:12.501 --> 00:18:14.334
So Google provides lots of tools
for e-mail migration.

00:18:14.334 --> 00:18:16.000
We have IMAP migration tools.

00:18:16.000 --> 00:18:18.000
We have migration tools for
different legacy e-mail systems.

00:18:18.000 --> 00:18:20.000
But sometimes those tools
can't be used

00:18:20.000 --> 00:18:23.000
for various reasons.

00:18:23.000 --> 00:18:24.834
So someone like Subradeep
has experienced

00:18:24.834 --> 00:18:26.667
many examples
where he was not able to use

00:18:26.667 --> 00:18:30.000
the e-mail migration tools.
Maybe the IMAP server was down.

00:18:30.000 --> 00:18:32.501
There was maybe
a firewall issue.

00:18:32.501 --> 00:18:34.501
Sometimes the legacy e-mail
is in just some format

00:18:34.501 --> 00:18:37.167
that he can't parse with
the normal migration tools.

00:18:37.167 --> 00:18:39.000
For cases like this,
Google provides

00:18:39.000 --> 00:18:41.667
something called
the Email Migration API.

00:18:41.667 --> 00:18:43.501
So the Email Migration API
let's you move

00:18:43.501 --> 00:18:45.501
your legacy e-mail to the cloud.

00:18:45.501 --> 00:18:47.334
It doesn't just let you
move mail.

00:18:47.334 --> 00:18:49.000
It lets you add labels.

00:18:49.000 --> 00:18:50.501
You can add properties

00:18:50.501 --> 00:18:52.501
like the archive status
of the message.

00:18:52.501 --> 00:18:55.167
Is the message read or not?
Is it starred?

00:18:55.167 --> 00:18:56.667
Um, this is one API

00:18:56.667 --> 00:18:58.501
where non-admins can
actually use it themselves

00:18:58.501 --> 00:19:00.334
if, uh, if the admin
gives that permission

00:19:00.334 --> 00:19:02.567
in the control panel.

00:19:02.567 --> 00:19:04.901
Um, and finally,
this API needs to--

00:19:04.901 --> 00:19:06.901
can only use
UTF-8 encoded messages.

00:19:06.901 --> 00:19:08.901
I've seen cases where people
try to use this API

00:19:08.901 --> 00:19:11.567
with, um, alternative
character codings,

00:19:11.567 --> 00:19:15.234
for example, Big5 for Chinese,
or CJK encoding.

00:19:15.234 --> 00:19:17.901
To use this API,
it's best to encode--

00:19:17.901 --> 00:19:19.734
or transfer
that character encoding

00:19:19.734 --> 00:19:21.400
to a UTF before using it.

00:19:21.400 --> 00:19:23.400
The other thing you need to know
about this API

00:19:23.400 --> 00:19:25.901
is it only works
with RFC 2822 messages.

00:19:25.901 --> 00:19:27.734
Now don't worry
about the terminology.

00:19:27.734 --> 00:19:29.734
This is just the standard
for e-mail messages nowadays.

00:19:29.734 --> 00:19:31.734
Um, this is the simplest
RFC 2822 message

00:19:31.734 --> 00:19:33.400
I could come up with.

00:19:33.400 --> 00:19:35.400
If you just look at, uh,
"Show Original" in GMAIL,

00:19:35.400 --> 00:19:37.734
You'll see something
like an RFC 2822 message.

00:19:37.734 --> 00:19:39.734
Don't worry about it.
The point I'm trying to make is

00:19:39.734 --> 00:19:41.567
use the libraries
to create this.

00:19:41.567 --> 00:19:43.400
If you need to create
a message like this,

00:19:43.400 --> 00:19:45.434
JavaMail is a good use--
uh, a good library to use.

00:19:45.434 --> 00:19:47.067
Um, Python has libraries,
as well.

00:19:47.067 --> 00:19:49.901
Probably best to not try
to make these yourself.

00:19:49.901 --> 00:19:52.567
But sometimes if you have
some files in mbox format,

00:19:52.567 --> 00:19:54.901
the--the file--
the actual e-mails themselves

00:19:54.901 --> 00:19:57.567
may be already in this format.
It's just a heads-up.

00:19:57.567 --> 00:19:59.567
Let's see how to use this
in code.

00:19:59.567 --> 00:20:01.067
We're gonna use

00:20:01.067 --> 00:20:04.067
the same Google Data
Python Client Library.

00:20:04.067 --> 00:20:05.567
The service class to use

00:20:05.567 --> 00:20:07.567
is called
the MigrationService class.

00:20:07.567 --> 00:20:09.567
Um, we're gonna import the ser--
the class.

00:20:09.567 --> 00:20:12.234
We're gonna instantiate
a new object.

00:20:12.234 --> 00:20:14.734
Let's grab one
of these e-mails from disk.

00:20:14.734 --> 00:20:18.267
Um, so I already have
an RFC 2822 mail message there.

00:20:18.267 --> 00:20:19.734
I'm gonna read it

00:20:19.734 --> 00:20:21.400
into a variable
called "mail_message."

00:20:21.400 --> 00:20:23.234
And here's the great part
about this API--

00:20:23.234 --> 00:20:25.067
You don't just migrate it.
You can do things to it.

00:20:25.067 --> 00:20:26.734
I'm gonna add some properties.

00:20:26.734 --> 00:20:28.567
I'm gonna say,
This particular message

00:20:28.567 --> 00:20:30.400
is going in the inbox,
and it's gonna be starred.

00:20:30.400 --> 00:20:32.734
I'm gonna give it a GMAIL star,
and I'm gonna add a label.

00:20:32.734 --> 00:20:34.968
I'm gonna add a label
called "migrated."

00:20:37.000 --> 00:20:38.667
Let's put it all together.

00:20:38.667 --> 00:20:40.334
I'm gonna call
the ImportMail method

00:20:40.334 --> 00:20:42.167
of the service class.

00:20:42.167 --> 00:20:44.167
In this case,
I'm migrating this mail message

00:20:44.167 --> 00:20:45.834
into Michael's inbox.

00:20:45.834 --> 00:20:47.834
I'm gonna add those properties,

00:20:47.834 --> 00:20:49.834
and the mail message itself
is in the mail_message variable,

00:20:49.834 --> 00:20:51.334
and that's pretty much it.

00:20:51.334 --> 00:20:53.834
Now if you have a lot
of messages to migrate,

00:20:53.834 --> 00:20:55.834
you can use the same strategy
that I illustrated before

00:20:55.834 --> 00:20:57.334
with the Provisioning API

00:20:57.334 --> 00:20:59.667
to do high-throughput
mail migration.

00:20:59.667 --> 00:21:01.567
A few more tips for this--

00:21:01.567 --> 00:21:04.234
uh, maximum size for
a migrated e-mail is 25 megs.

00:21:04.234 --> 00:21:06.067
This includes attachments.

00:21:06.067 --> 00:21:08.734
Um, and we don't allow migration
of any executable files,

00:21:08.734 --> 00:21:11.067
even if they're compressed.

00:21:11.067 --> 00:21:13.734
So Subradeep's been--
is very happy.

00:21:13.734 --> 00:21:16.400
He's used the Provisioning API
and the Email Migration API

00:21:16.400 --> 00:21:19.400
to handle these kind of
tricky customer cases.

00:21:19.400 --> 00:21:21.067
Um, and before
we leave Subradeep,

00:21:21.067 --> 00:21:23.901
let's add these APIs
to our toolbox,

00:21:23.901 --> 00:21:25.434
um, of Administrative APIs.

00:21:25.434 --> 00:21:27.234
We'll come back to these
in a minute.

00:21:27.234 --> 00:21:29.567
Okay, so Subradeep's case was
pretty happy and pretty regular.

00:21:29.567 --> 00:21:31.234
Let's talk about another, uh,

00:21:31.234 --> 00:21:33.234
person who's
experienced challenges.

00:21:33.234 --> 00:21:35.567
I'm gonna tell you the tale
of the university administrator.

00:21:35.567 --> 00:21:37.567
I don't know if there's any
university administrators here,

00:21:37.567 --> 00:21:39.234
but I know you work very hard.

00:21:39.234 --> 00:21:40.901
So meet my friend Oscar.

00:21:40.901 --> 00:21:42.734
He works at, uh--
as a system admin--

00:21:42.734 --> 00:21:45.067
a head system admin
at a large state university

00:21:45.067 --> 00:21:46.567
in this state.

00:21:46.567 --> 00:21:48.567
He's got tens of thousands
of users.

00:21:48.567 --> 00:21:51.901
He doesn't just have students,
he has administrators.

00:21:51.901 --> 00:21:53.400
He has faculty, staff,

00:21:53.400 --> 00:21:56.067
and he even gives out
alumni accounts to the alumni,

00:21:56.067 --> 00:21:57.901
so he's got
a lot of user accounts.

00:21:57.901 --> 00:22:00.901
So remember what I talked about
earlier with simplicity.

00:22:00.901 --> 00:22:04.467
Oscar requires simplicity
in his IT infrastructure.

00:22:04.467 --> 00:22:06.801
He doesn't want multiple points
of failure.

00:22:06.801 --> 00:22:09.300
He wants to administrate
all user authentication

00:22:09.300 --> 00:22:10.968
via a single--
single directory,

00:22:10.968 --> 00:22:13.133
like an LDAP server.

00:22:13.133 --> 00:22:14.801
He has many web-based services.

00:22:14.801 --> 00:22:16.467
He wants Google Apps to appear

00:22:16.467 --> 00:22:18.467
as just one
of many web-based services.

00:22:18.467 --> 00:22:20.634
Let me illustrate what I mean.

00:22:20.634 --> 00:22:22.300
So he has many services--

00:22:22.300 --> 00:22:24.133
uh, web-based services
available to his students.

00:22:24.133 --> 00:22:25.968
He might have
a student contact directory,

00:22:25.968 --> 00:22:28.634
maybe a learning
management system,

00:22:28.634 --> 00:22:31.300
and, uh, and maybe
a billing system.

00:22:31.300 --> 00:22:33.133
And he wants to comply
with some kind

00:22:33.133 --> 00:22:34.968
of university identity
management policy,

00:22:34.968 --> 00:22:36.801
which is that all
of these services

00:22:36.801 --> 00:22:39.467
must be authenticated
through a single source.

00:22:39.467 --> 00:22:41.634
All right, so he doesn't want
his user authentication

00:22:41.634 --> 00:22:43.300
to get out of hand.

00:22:43.300 --> 00:22:45.133
He wants to use Google Apps,
you know,

00:22:45.133 --> 00:22:47.133
but he can't deal with two
user authentication systems.

00:22:47.133 --> 00:22:48.968
He wants all that auth
to be handled

00:22:48.968 --> 00:22:50.801
through a university
login portal that interacts

00:22:50.801 --> 00:22:52.634
with the LDAP server
that he set up.

00:22:52.634 --> 00:22:54.634
He needs a single sign-on
solution for Google Apps.

00:22:54.634 --> 00:22:56.634
What does he do?

00:22:56.634 --> 00:22:59.133
Well...

00:22:59.133 --> 00:23:01.367
he can use
SAML-based Single Sign-on,

00:23:01.367 --> 00:23:03.033
which is a feature
of Google Apps.

00:23:03.033 --> 00:23:04.868
It allows you
to incorporate Google Apps

00:23:04.868 --> 00:23:07.033
into your existing
identity management policy.

00:23:07.033 --> 00:23:08.868
Let me show you how it works.

00:23:08.868 --> 00:23:11.200
So normally, users authenticate
themselves to Google Apps

00:23:11.200 --> 00:23:13.200
through the familiar,
you know, login system.

00:23:13.200 --> 00:23:15.033
Um, when you activate
Single Sign-on--

00:23:15.033 --> 00:23:16.534
SAML-based Single Sign-on,

00:23:16.534 --> 00:23:18.200
it delegates
all authentication duties

00:23:18.200 --> 00:23:21.868
to the customer's
SAML-aware portal page.

00:23:21.868 --> 00:23:23.534
Right?

00:23:23.534 --> 00:23:26.200
Single Sign-on settings are
set through the control panel.

00:23:26.200 --> 00:23:28.200
Um, essentially what you do--
what Oscar's done,

00:23:28.200 --> 00:23:29.868
is he provides a redirect URL.

00:23:29.868 --> 00:23:32.534
This corresponds
to his portal URI.

00:23:32.534 --> 00:23:34.367
Um, Google Apps will
automatically redirect

00:23:34.367 --> 00:23:36.367
the user's browser
to the university portal

00:23:36.367 --> 00:23:39.701
when, uh, GMAIL or any Google
services are accessed.

00:23:39.701 --> 00:23:41.534
Now SAML is a big subject.

00:23:41.534 --> 00:23:44.033
I could probably talk
for two hours about SAML.

00:23:44.033 --> 00:23:47.701
I'll suffice it to say if you're
interested in this feature,

00:23:47.701 --> 00:23:50.868
um, we delegate all password
and authentication authority

00:23:50.868 --> 00:23:53.868
to the customer,
including password changes.

00:23:53.868 --> 00:23:56.534
Um, we adhere
to the SAML 2.0 standard.

00:23:56.534 --> 00:23:59.033
And we only support
one type of flow,

00:23:59.033 --> 00:24:00.767
and that is
the "resource provided--

00:24:00.767 --> 00:24:02.267
provider"-initiated flow.

00:24:02.267 --> 00:24:04.100
There's also
an "identity provider" flow.

00:24:04.100 --> 00:24:05.767
We don't officially
support that.

00:24:05.767 --> 00:24:07.434
I get that question
all the time.

00:24:07.434 --> 00:24:09.601
Okay, so this is great.
So he's set up Google Apps,

00:24:09.601 --> 00:24:11.767
um, behind his portal.
He's happy. It works.

00:24:11.767 --> 00:24:13.767
So now he's got a problem,
and, you know,

00:24:13.767 --> 00:24:15.767
maybe the problem--
if you've seen the headline

00:24:15.767 --> 00:24:18.434
of the biggest newspaper
in the city today,

00:24:18.434 --> 00:24:19.934
the headline was,

00:24:19.934 --> 00:24:23.434
"California State University,
um, Tuition May Skyrocket."

00:24:23.434 --> 00:24:25.601
Uh, the budget is tight.

00:24:25.601 --> 00:24:28.434
The chancellor of the university
is conducting a financial audit.

00:24:28.434 --> 00:24:31.267
He wants to know if they're
spending too much money

00:24:31.267 --> 00:24:33.267
on IT support
for things like alumni

00:24:33.267 --> 00:24:35.767
or extraneous IT support
that they don't need to pay for.

00:24:35.767 --> 00:24:38.767
How many university
e-mail accounts are being used?

00:24:38.767 --> 00:24:40.601
Are students using
POP and e-mail clients?

00:24:40.601 --> 00:24:42.601
Do we need to support them?
Uh, what about alumni?

00:24:42.601 --> 00:24:44.434
Do we need to waste resources
supporting alumni?

00:24:44.434 --> 00:24:46.767
Are they even using
their alumni accounts?

00:24:46.767 --> 00:24:48.267
Right?

00:24:48.267 --> 00:24:50.100
So what Oscar needs to do
is compile a report,

00:24:50.100 --> 00:24:52.100
a financial audit
on his department.

00:24:52.100 --> 00:24:54.601
Who's using the university
e-mail system, right?

00:24:54.601 --> 00:24:56.434
How many accounts
have been created?

00:24:56.434 --> 00:24:58.267
How many students
are using their accounts?

00:24:58.267 --> 00:25:00.601
How are they logging in?
How do you do this?

00:25:00.601 --> 00:25:03.501
How do you do this
automatically?

00:25:03.501 --> 00:25:06.501
All right, so he can use
what we call the Reporting API.

00:25:06.501 --> 00:25:09.000
This allows you to generate
reports about user activity

00:25:09.000 --> 00:25:10.667
on a Google Apps domain--

00:25:10.667 --> 00:25:12.667
things like account creation
date, account activity.

00:25:12.667 --> 00:25:15.000
Are people using the POP
or the IMAP clients

00:25:15.000 --> 00:25:16.667
to access Google Apps,

00:25:16.667 --> 00:25:18.834
or are they using
their web mail?

00:25:18.834 --> 00:25:21.167
This is one API
that I'm gonna talk about today

00:25:21.167 --> 00:25:23.334
that doesn't have
very good OAuth support.

00:25:23.334 --> 00:25:25.334
Currently, we have to use
the ClientLogin interface.

00:25:25.334 --> 00:25:27.834
We're looking
to improve this soon.

00:25:27.834 --> 00:25:29.834
We also don't use
the Google Data Protocol.

00:25:29.834 --> 00:25:32.834
We use a different XML format
to, uh, post information.

00:25:32.834 --> 00:25:34.834
Again, you don't have to worry
about this too much,

00:25:34.834 --> 00:25:37.000
unless you're writing,
uh, shell scripts.

00:25:37.000 --> 00:25:38.501
Better yet to use

00:25:38.501 --> 00:25:40.501
one of the available
client libraries to do this.

00:25:40.501 --> 00:25:42.501
This is the, uh--
what the same call would be

00:25:42.501 --> 00:25:45.000
using the Python Reporting API
Client Library.

00:25:45.000 --> 00:25:46.667
It's very simple.

00:25:46.667 --> 00:25:49.167
We also have Java,
.NET, and PHP clients.

00:25:49.167 --> 00:25:51.467
Let me show you what an account
report kind of looks like.

00:25:51.467 --> 00:25:54.000
Um, this is just an account
report for a single user.

00:25:54.000 --> 00:25:56.167
Normally, you would get one
for everyone on your domain.

00:25:56.167 --> 00:25:59.000
It's basically an easily
parsable text file

00:25:59.000 --> 00:26:00.834
with comma-separated fields.

00:26:00.834 --> 00:26:04.567
Um, let's look at what Oscar's
trying to find out.

00:26:04.567 --> 00:26:06.234
He can write the script once.

00:26:06.234 --> 00:26:08.067
He can parse out
the data he needs.

00:26:08.067 --> 00:26:09.734
He can send
the chancellor's office

00:26:09.734 --> 00:26:11.567
a weekly automated summary
summarizing the results.

00:26:11.567 --> 00:26:13.234
So here, we have
the account name--

00:26:13.234 --> 00:26:14.734
someone named "Michael"

00:26:14.734 --> 00:26:16.567
who hasn't been using
his e-mail very much,

00:26:16.567 --> 00:26:18.067
um, a last login date.

00:26:18.067 --> 00:26:19.901
We can also get last POP,
you know, account,

00:26:19.901 --> 00:26:21.901
if they're using web mail,
when this account was created.

00:26:21.901 --> 00:26:23.901
So now Oscar can look
at this information,

00:26:23.901 --> 00:26:26.367
and he can parse out
the necessary information.

00:26:26.367 --> 00:26:28.300
He can even create
an automated script,

00:26:28.300 --> 00:26:29.801
and send the chancellor

00:26:29.801 --> 00:26:31.734
a monthly financial
audit report, right?

00:26:31.734 --> 00:26:33.567
Now this is useful
for a university setting.

00:26:33.567 --> 00:26:35.567
Imagine how useful this is
for companies, right--

00:26:35.567 --> 00:26:37.567
huge companies who need
to lower their costs.

00:26:37.567 --> 00:26:39.567
They want to get a handle
on what's going on

00:26:39.567 --> 00:26:41.901
with their user accounts.
Which ones are being used?

00:26:41.901 --> 00:26:44.400
Should we suspend accounts
that aren't being used?

00:26:44.400 --> 00:26:46.400
Should we, you know,
should we take away

00:26:46.400 --> 00:26:48.400
some accounts, 'cause
they're--they're, you know,

00:26:48.400 --> 00:26:50.234
extra money in the budget?

00:26:50.234 --> 00:26:52.067
Let me tell you
a few extra things

00:26:52.067 --> 00:26:53.734
about the reporting API.

00:26:53.734 --> 00:26:56.734
Um, the data is not real-time.
It might be up to 24 hours old.

00:26:56.734 --> 00:26:58.567
What we do is we collate
the information

00:26:58.567 --> 00:27:00.567
on everybody's domain
once a day.

00:27:00.567 --> 00:27:02.801
Um, and depending
on when you call the API,

00:27:02.801 --> 00:27:04.801
that data might be 24 hours old.

00:27:04.801 --> 00:27:06.467
Um, it is meant for reports.

00:27:06.467 --> 00:27:08.467
Um, these reports
can get big, too.

00:27:08.467 --> 00:27:10.467
If you have thousands of users,
and you're getting

00:27:10.467 --> 00:27:12.467
all this information, uh,
they can get pretty large,

00:27:12.467 --> 00:27:14.300
so we allow you
to also send requests

00:27:14.300 --> 00:27:16.634
to compress the reports,
um, using Gzip.

00:27:16.634 --> 00:27:19.968
Um, okay, so this is great.
This has been really helpful,

00:27:19.968 --> 00:27:21.968
and this is a really helpful API
for a lot of people

00:27:21.968 --> 00:27:23.634
doing billing or other--

00:27:23.634 --> 00:27:25.300
other kind of, um,
accounts requests.

00:27:25.300 --> 00:27:27.133
Now Oscar has another problem
from the chancellor--

00:27:27.133 --> 00:27:28.801
not as crucial.

00:27:28.801 --> 00:27:31.467
The chancellor has an university
emergency alert system.

00:27:31.467 --> 00:27:33.300
This is also an actual-use case.

00:27:33.300 --> 00:27:35.133
The chancellor wants--
he thinks that what--

00:27:35.133 --> 00:27:36.801
okay, let me explain the system.

00:27:36.801 --> 00:27:38.801
The system is
if there's a fire on campus,

00:27:38.801 --> 00:27:40.801
this alert system
will send an SMS message

00:27:40.801 --> 00:27:42.300
to all the students,

00:27:42.300 --> 00:27:44.133
and it will also send an e-mail
to their inbox

00:27:44.133 --> 00:27:45.634
describing the problem.

00:27:45.634 --> 00:27:47.300
The chancellor thinks
that these e-mails

00:27:47.300 --> 00:27:49.133
are not conspicuous enough,
and he wants the e-mails

00:27:49.133 --> 00:27:50.801
to be labeled "important"
somehow.

00:27:50.801 --> 00:27:52.968
So Oscar is challenged
with the task

00:27:52.968 --> 00:27:55.467
of finding a way to make these--
these particular e-mails

00:27:55.467 --> 00:27:57.968
look a little more interesting
to the students.

00:27:57.968 --> 00:27:59.968
What does he do?
How does he do such a thing?

00:27:59.968 --> 00:28:02.200
Well, we offer two APIs
that can help with these things.

00:28:02.200 --> 00:28:04.534
I'm gonna lump them together,
but they're two separate APIs--

00:28:04.534 --> 00:28:08.200
the Admin Settings API
and the Email Settings API.

00:28:08.200 --> 00:28:10.534
So these allow for bulk updates

00:28:10.534 --> 00:28:12.701
of user e-mail settings,
also domain settings.

00:28:12.701 --> 00:28:14.534
Uh, these are really useful
for building things

00:28:14.534 --> 00:28:16.033
like deployment tools,

00:28:16.033 --> 00:28:18.367
and, um, and automating
processes on your domain.

00:28:18.367 --> 00:28:20.367
The Admin Settings API
lets you do things

00:28:20.367 --> 00:28:22.033
like set the domain properties.

00:28:22.033 --> 00:28:23.868
You can change
Single Sign-on settings.

00:28:23.868 --> 00:28:26.534
You can change the domain logo
and a lot more.

00:28:26.534 --> 00:28:28.367
What we're
really looking for here

00:28:28.367 --> 00:28:30.033
is the Email Settings API.

00:28:30.033 --> 00:28:32.033
This allows you to create
GMAIL filters, labels.

00:28:32.033 --> 00:28:34.701
You can set delegation settings.
You can change user signatures.

00:28:34.701 --> 00:28:36.701
You can set vacation settings
and more.

00:28:36.701 --> 00:28:39.734
Um, just about anything you can
do in the GMAIL settings,

00:28:39.734 --> 00:28:41.868
well, to a certain extent,
can be done programmatically

00:28:41.868 --> 00:28:43.868
for any user on the domain.

00:28:43.868 --> 00:28:46.367
Let's see what Oscar--
what Oscar needs to do

00:28:46.367 --> 00:28:49.200
to use the Email Settings client

00:28:49.200 --> 00:28:51.868
to fulfill
the chancellor's wish.

00:28:51.868 --> 00:28:55.200
Um, so in the Google Data
Python Client Library,

00:28:55.200 --> 00:28:57.868
the--the client is called
the EmailSettingsClient.

00:28:57.868 --> 00:29:00.033
We're gonna import that client,
just like before,

00:29:00.033 --> 00:29:01.767
instantiate the object.

00:29:01.767 --> 00:29:03.434
We're gonna call
the CreateFilter class.

00:29:03.434 --> 00:29:05.934
Let me highlight
the interesting parameters here.

00:29:05.934 --> 00:29:08.267
Anything from the address
"chancellor@thedomain,"

00:29:08.267 --> 00:29:10.100
uh, with the words
"Security Alert"

00:29:10.100 --> 00:29:11.601
will be labeled "important."

00:29:11.601 --> 00:29:13.434
And you can do other things
with this.

00:29:13.434 --> 00:29:15.100
You can set
different properties.

00:29:15.100 --> 00:29:16.934
We're gonna just use
the simple example

00:29:16.934 --> 00:29:18.601
of setting a label.

00:29:18.601 --> 00:29:20.601
This is pretty simple, right,
just a simple call?

00:29:20.601 --> 00:29:22.601
How do we apply this filter
to everyone on the domain?

00:29:22.601 --> 00:29:24.434
Let's go back to our toolkit,

00:29:24.434 --> 00:29:26.267
and we'll grab
the Provisioning API again.

00:29:26.267 --> 00:29:28.100
Remember, before, I said
the Provisioning API

00:29:28.100 --> 00:29:29.934
can be used to create
user accounts.

00:29:29.934 --> 00:29:32.767
It can also be used to retrieve
user account information.

00:29:32.767 --> 00:29:34.767
We can use this API to,
uh, grab the user--

00:29:34.767 --> 00:29:37.100
the names of everybody
on the domain,

00:29:37.100 --> 00:29:38.601
iterate through the list,

00:29:38.601 --> 00:29:40.267
and set the e-mail
settings filter

00:29:40.267 --> 00:29:42.767
for everyone on the domain.
Let's take a look.

00:29:42.767 --> 00:29:46.133
We're gonna call
the RetrieveAllUsers method

00:29:46.133 --> 00:29:47.934
of the Provisioning API.

00:29:47.934 --> 00:29:49.767
We're gonna put the, uh,
the information

00:29:49.767 --> 00:29:51.434
into an object
called the userFeed.

00:29:51.434 --> 00:29:53.267
userFeed contains
information about each user.

00:29:53.267 --> 00:29:55.100
We're going to iterate
through the entries

00:29:55.100 --> 00:29:56.767
in the userFeed,

00:29:56.767 --> 00:29:58.601
and we're gonna pull out
the username.

00:29:58.601 --> 00:30:01.434
And we're gonna run
that same CreateFilter call

00:30:01.434 --> 00:30:03.100
on everyone on the domain.

00:30:03.100 --> 00:30:05.434
Now like I said before,
it's important to--

00:30:05.434 --> 00:30:07.767
um, don't forget to add
some exception handling,

00:30:07.767 --> 00:30:09.434
as we did before.
We're gonna grab

00:30:09.434 --> 00:30:11.434
that AppsForYourDomainException
handle,

00:30:11.434 --> 00:30:14.267
and we're gonna handle the error
in whatever way we need.

00:30:14.267 --> 00:30:15.934
So that's pretty simple.

00:30:15.934 --> 00:30:18.767
Um, Oscar is very happy.

00:30:18.767 --> 00:30:20.601
He's--he runs a tight ship,

00:30:20.601 --> 00:30:22.434
and he has very little budget,

00:30:22.434 --> 00:30:24.434
but these APIs allow him
to come up with some of the--

00:30:24.434 --> 00:30:26.267
uh, to address
some of the challenges

00:30:26.267 --> 00:30:28.267
the chancellor's office
has provided for him.

00:30:28.267 --> 00:30:30.434
Um, we've seen how Oscar's used
Single Sign-on,

00:30:30.434 --> 00:30:31.934
the Reporting API,

00:30:31.934 --> 00:30:33.767
and these Admin
and Email Settings APIs.

00:30:33.767 --> 00:30:37.100
So let's throw those APIs
into our toolkit

00:30:37.100 --> 00:30:38.767
before we move on.

00:30:38.767 --> 00:30:40.601
Okay, final story--

00:30:40.601 --> 00:30:42.400
uh, a little bit sadder
than the others.

00:30:42.400 --> 00:30:45.100
We're gonna talk about
the financial services CIO.

00:30:45.100 --> 00:30:47.601
I wonder if there's
any CIOs in this room.

00:30:47.601 --> 00:30:50.601
Maybe. Meet Carol.
So Carol works in San Francisco

00:30:50.601 --> 00:30:53.133
as a CIO of
a financial services company.

00:30:53.133 --> 00:30:55.100
I call this a small business,
but actually they're pretty big.

00:30:55.100 --> 00:30:56.601
They're growing fast.

00:30:56.601 --> 00:30:58.767
They handle investors'
corporate investments.

00:30:58.767 --> 00:31:01.167
Um, she switched to Google Apps,

00:31:01.167 --> 00:31:03.000
because she loved the fact

00:31:03.000 --> 00:31:05.334
that she didn't have to worry
about, um,

00:31:05.334 --> 00:31:07.501
you know, hardware,
software licensing.

00:31:07.501 --> 00:31:09.167
It simplified her job.

00:31:09.167 --> 00:31:12.000
And she wants her IT staff
to build a business,

00:31:12.000 --> 00:31:14.834
not worry about
legacy e-mail servers

00:31:14.834 --> 00:31:16.667
and licensing.

00:31:16.667 --> 00:31:18.501
Great. Sounds wonderful, right?

00:31:18.501 --> 00:31:20.334
Security's better.

00:31:20.334 --> 00:31:22.501
But Carol has a problem.

00:31:22.501 --> 00:31:24.834
Carol thinks one of her user
accounts has been compromised.

00:31:24.834 --> 00:31:26.701
One of her employees
lost a laptop

00:31:26.701 --> 00:31:28.334
in an airport in New York.

00:31:28.334 --> 00:31:30.334
Now recall that her office
is in San Francisco.

00:31:30.334 --> 00:31:33.167
And he did something
that you probably see a lot

00:31:33.167 --> 00:31:35.501
with your employees
in that he kept a password

00:31:35.501 --> 00:31:38.167
to his GMAIL account
in plain text on his desktop.

00:31:38.167 --> 00:31:40.501
People use--do all kinds
of things with their passwords.

00:31:40.501 --> 00:31:42.834
They might put them on stickies
and put them on their monitors.

00:31:42.834 --> 00:31:44.834
Um, I've seen people
write their passwords

00:31:44.834 --> 00:31:46.834
on the bottom of their laptops.

00:31:46.834 --> 00:31:49.334
Um, so Carol has a problem.
She needs to find out

00:31:49.334 --> 00:31:52.000
if she th--if this
account has been accessed.

00:31:52.000 --> 00:31:54.000
Of course, she got the user
to change his password,

00:31:54.000 --> 00:31:56.000
but what happened
in that 4-hour period

00:31:56.000 --> 00:31:57.901
when he lost his laptop?

00:31:57.901 --> 00:32:01.567
So Carol can use something
we call the Audit API.

00:32:01.567 --> 00:32:03.901
And this is a very powerful API.

00:32:03.901 --> 00:32:06.567
Um, it does
basically three things.

00:32:06.567 --> 00:32:09.734
It allows an admin to download
an encrypted file

00:32:09.734 --> 00:32:13.234
of a domain user's e-mail.

00:32:13.234 --> 00:32:16.567
Also, you can grab
an account activity report

00:32:16.567 --> 00:32:19.734
of a user, also encrypted.

00:32:19.734 --> 00:32:21.734
Um, or you can create
an e-mail monitor.

00:32:21.734 --> 00:32:23.567
This allows you
to silently forward e-mail

00:32:23.567 --> 00:32:25.067
to another account.

00:32:25.067 --> 00:32:27.234
Because this is an Audit API
meant for legal compliance,

00:32:27.234 --> 00:32:28.734
all this happens

00:32:28.734 --> 00:32:30.567
without the user
knowing what's going on.

00:32:30.567 --> 00:32:32.767
This is meant for handling
legal issues,

00:32:32.767 --> 00:32:35.567
compliance issues,
things like that.

00:32:35.567 --> 00:32:39.234
As such, it's not useful
as a backup utility.

00:32:39.234 --> 00:32:40.901
We only allow

00:32:40.901 --> 00:32:43.968
100 requests for reports
a day per admin.

00:32:43.968 --> 00:32:46.067
It sounds like a lot,
but on a big domain...

00:32:46.067 --> 00:32:47.734
Before you--
since this is--

00:32:47.734 --> 00:32:50.734
handles very sensitive
user data,

00:32:50.734 --> 00:32:52.567
before you can use this,
you have to do more

00:32:52.567 --> 00:32:54.234
than just authorize
through the API

00:32:54.234 --> 00:32:55.734
with an admin account.

00:32:55.734 --> 00:32:58.567
You must generate an OpenPGP
public-private key pair,

00:32:58.567 --> 00:33:00.567
because everything that comes
back from this API

00:33:00.567 --> 00:33:02.300
is going to be encrypted.

00:33:02.300 --> 00:33:04.133
and the only person
who can open it

00:33:04.133 --> 00:33:05.968
is the person
with that private key.

00:33:05.968 --> 00:33:07.634
So before you do anything,

00:33:07.634 --> 00:33:09.801
you must first take
your public key,

00:33:09.801 --> 00:33:11.634
base-64-encode it,

00:33:11.634 --> 00:33:13.634
and then upload it
to the Audit API.

00:33:13.634 --> 00:33:16.133
You can't make any calls
for a mailbox dump

00:33:16.133 --> 00:33:18.968
or an account activity report
without this step.

00:33:18.968 --> 00:33:20.968
Now this is
a little tricky to do.

00:33:20.968 --> 00:33:22.968
Um, we have instructions
on our web site

00:33:22.968 --> 00:33:25.067
about how to create
these public-private key pairs.

00:33:25.067 --> 00:33:26.601
But actually, uh, uploading it--

00:33:26.601 --> 00:33:28.667
it's best to probably use
the client libraries.

00:33:28.667 --> 00:33:30.667
Oh, and by the way,
before I get into this,

00:33:30.667 --> 00:33:32.634
is Jay Lee here today
in the audience?

00:33:32.634 --> 00:33:34.467
He's one of our open-source
client contributors.

00:33:34.467 --> 00:33:36.300
He wrote some of the--
this part of the library.

00:33:36.300 --> 00:33:38.300
Okay, just checking--I wanted
to give him a shout-out.

00:33:38.300 --> 00:33:40.300
So the--in the Google Data
Python Client Library,

00:33:40.300 --> 00:33:43.467
the methods to call, uh, reside
in the AuditService class.

00:33:43.467 --> 00:33:45.801
We're gonna instantiate
that class.

00:33:45.801 --> 00:33:48.300
Let's read
a non-base-64-encoded,

00:33:48.300 --> 00:33:50.133
since this library
does it for you,

00:33:50.133 --> 00:33:53.133
uh, public key from the--
from the, uh, disk,

00:33:53.133 --> 00:33:56.634
put in the PGP key variable.

00:33:56.634 --> 00:33:59.300
Now we're gonna call a method
called updatePGPKey.

00:33:59.300 --> 00:34:02.367
And that's it. This will
upload the public key to Google,

00:34:02.367 --> 00:34:04.701
so we can encrypt everything
we send back to you

00:34:04.701 --> 00:34:07.534
with this key.

00:34:07.534 --> 00:34:09.868
It only needs to be
uploaded once.

00:34:09.868 --> 00:34:12.200
Once uploaded, we can make,
you can start making requests

00:34:12.200 --> 00:34:15.200
for a mailbox dump
or user activity report.

00:34:15.200 --> 00:34:16.868
What Carol needs to do

00:34:16.868 --> 00:34:18.701
is make one of these
user activity reports.

00:34:18.701 --> 00:34:20.534
This report
will allow her to see

00:34:20.534 --> 00:34:22.200
when an account was accessed,

00:34:22.200 --> 00:34:23.701
if logins were successful,

00:34:23.701 --> 00:34:25.534
or were there failures,

00:34:25.534 --> 00:34:27.367
and then what time
were they accessed?

00:34:27.367 --> 00:34:29.033
So let's take a look.

00:34:29.033 --> 00:34:31.868
Let's go back to the library.
I'll show you the code.

00:34:31.868 --> 00:34:33.534
The first thing Carol does

00:34:33.534 --> 00:34:35.367
is she uses
that AuditService class.

00:34:35.367 --> 00:34:37.367
She calls the
createAccountInformationRequest

00:34:37.367 --> 00:34:41.000
method on the user Michael,
who lost his laptop.

00:34:41.000 --> 00:34:43.067
I've never actually lost
my laptop.

00:34:43.067 --> 00:34:45.701
Um, what comes back is, uh,
is a status.

00:34:45.701 --> 00:34:47.701
This is an asynchronous call.

00:34:47.701 --> 00:34:49.868
Let me explain what's happening.

00:34:49.868 --> 00:34:52.200
What's gonna come back
is a request ID

00:34:52.200 --> 00:34:54.033
for this particular request,

00:34:54.033 --> 00:34:55.534
a status message

00:34:55.534 --> 00:34:57.534
about how--if this request
has been completed or not,

00:34:57.534 --> 00:34:59.534
and some information
about the user, of course--

00:34:59.534 --> 00:35:01.434
and, of course,
an admin account, too.

00:35:01.434 --> 00:35:03.100
So this way, you can audit
the admins

00:35:03.100 --> 00:35:04.767
who are making these requests.

00:35:04.767 --> 00:35:06.601
The request--request I.D.
is very important,

00:35:06.601 --> 00:35:08.267
because we're gonna
use that again.

00:35:08.267 --> 00:35:10.267
Now we have to see if this
account activity report

00:35:10.267 --> 00:35:11.767
has been completed.

00:35:11.767 --> 00:35:13.434
The reason
that it's asynchronous

00:35:13.434 --> 00:35:15.434
is because Google will go out,
collate all this information,

00:35:15.434 --> 00:35:17.267
make sure it's right,
encrypt it,

00:35:17.267 --> 00:35:19.133
and then provide it back to you.

00:35:19.133 --> 00:35:21.100
We want to make sure
it's complete and correct.

00:35:21.100 --> 00:35:23.100
Once you've created
an account request,

00:35:23.100 --> 00:35:25.100
you have to go back and check
to see if it's complete.

00:35:25.100 --> 00:35:27.100
Now an activity report is--
is just a list

00:35:27.100 --> 00:35:30.601
of login times and IP addresses,
not very large.

00:35:30.601 --> 00:35:32.934
It usually doesn't take
that long to complete.

00:35:32.934 --> 00:35:34.934
A mailbox dump of gigabytes
of information

00:35:34.934 --> 00:35:36.934
may take a long time,
may take up to three days,

00:35:36.934 --> 00:35:39.601
depending on how much
information is out there.

00:35:39.601 --> 00:35:41.434
We want an account
information request.

00:35:41.434 --> 00:35:44.601
let's run the getAccount-
InformationRequestStatus method,

00:35:44.601 --> 00:35:46.767
um, using the user Michael,

00:35:46.767 --> 00:35:49.934
and we have to include
that request I.D.

00:35:49.934 --> 00:35:51.601
If the status is still pending,

00:35:51.601 --> 00:35:53.634
we'll get something
like what we saw before,

00:35:53.634 --> 00:35:55.100
a "PENDING" status response.

00:35:55.100 --> 00:35:59.100
Um, well, let's say
we've checked it again.

00:35:59.100 --> 00:36:01.167
We're gonna get back
something like this.

00:36:01.167 --> 00:36:03.334
So let's see
what the difference is.

00:36:03.334 --> 00:36:05.167
The status is now "COMPLETED."

00:36:05.167 --> 00:36:07.000
We have two new parameters,
right?

00:36:07.000 --> 00:36:09.834
We have a number of files,
and we'll have a URL.

00:36:09.834 --> 00:36:11.667
And the number of files
corresponds to how many--

00:36:11.667 --> 00:36:13.667
well, the URL corresponds
to the activity report

00:36:13.667 --> 00:36:15.901
or the mailbox dump,
and if these mailbox dumps

00:36:15.901 --> 00:36:18.501
are very large gigabytes
of e-mail,

00:36:18.501 --> 00:36:20.334
we'll split them up
into different files.

00:36:20.334 --> 00:36:22.167
An activity report
is usually pretty small,

00:36:22.167 --> 00:36:23.834
so there's only one file.

00:36:23.834 --> 00:36:26.033
That's--that URL
is what Carol's gonna use

00:36:26.033 --> 00:36:28.834
to download
the account activity report,

00:36:28.834 --> 00:36:30.334
which is encrypted.

00:36:30.334 --> 00:36:32.334
Let's check it out.

00:36:32.334 --> 00:36:34.501
So Carol's gonna download
her activity report

00:36:34.501 --> 00:36:36.334
from that URL.
It's encrypted, of course.

00:36:36.334 --> 00:36:38.167
She has the private key.
She's the only one

00:36:38.167 --> 00:36:41.000
who can uncrypt
this sensitive user data.

00:36:41.000 --> 00:36:43.501
So she's gonna use
her private key

00:36:43.501 --> 00:36:45.334
to decrypt the file.

00:36:45.334 --> 00:36:47.334
It looks something
like this, right?

00:36:47.334 --> 00:36:49.334
It looks like the output
of the Reporting API.

00:36:49.334 --> 00:36:51.167
So the decrypted
accounts request file

00:36:51.167 --> 00:36:52.834
is an easily parsable text file.

00:36:52.834 --> 00:36:54.667
It includes information
about the user,

00:36:54.667 --> 00:36:56.334
some services available to them,

00:36:56.334 --> 00:36:58.000
as well
as additional information

00:36:58.000 --> 00:37:01.067
about account login attempts,
date stamps, and IP addresses.

00:37:01.067 --> 00:37:03.400
Let's zoom in
and take a closer look

00:37:03.400 --> 00:37:05.067
to see what Carol sees.

00:37:05.067 --> 00:37:06.901
So let's see, uh,
it looks like there's

00:37:06.901 --> 00:37:10.567
some, uh, login success
and failure there at the bottom

00:37:10.567 --> 00:37:12.234
for Michael,
who lost his laptop.

00:37:12.234 --> 00:37:14.067
Uh, where's
the suspicious IP address?

00:37:14.067 --> 00:37:16.901
Looks like maybe there.
Where is that IP address?

00:37:16.901 --> 00:37:20.234
She's familiar with the, uh,
the IPs for the logouts

00:37:20.234 --> 00:37:21.901
and the login successes.

00:37:21.901 --> 00:37:23.901
Those are--it looks
like the IPs of the network

00:37:23.901 --> 00:37:25.801
she uses in San Francisco.

00:37:25.801 --> 00:37:27.901
So Carol can use a GeoIP lookup,

00:37:27.901 --> 00:37:29.901
and she can see that the IP
for the suspicious login failure

00:37:29.901 --> 00:37:31.400
was in New York,

00:37:31.400 --> 00:37:33.767
where the--where the user
lost his laptop in the airport,

00:37:33.767 --> 00:37:36.067
right? So you can see
why this is a very useful API

00:37:36.067 --> 00:37:37.734
for doing these kinds of audits.

00:37:37.734 --> 00:37:39.734
Sometimes you might want
to know, um, you know,

00:37:39.734 --> 00:37:41.734
How many unsuccessful attempts
are being made

00:37:41.734 --> 00:37:43.734
on some of our accounts?

00:37:43.734 --> 00:37:45.567
Sometimes this is useful
for proving

00:37:45.567 --> 00:37:48.400
that you have the ability
to audit your accounts activity.

00:37:48.400 --> 00:37:51.400
Um, it's also important
for enforcing employee policy,

00:37:51.400 --> 00:37:53.567
especially at a place like
a financial services company,

00:37:53.567 --> 00:37:56.734
where this is regulated
by regulations like SARBOX

00:37:56.734 --> 00:37:58.400
that we talked about earlier.

00:37:58.400 --> 00:38:00.400
Okay, so sounds pretty sad.

00:38:00.400 --> 00:38:02.968
Carol needs a stronger way
to protect her user accounts.

00:38:02.968 --> 00:38:04.634
What is she going to do?

00:38:04.634 --> 00:38:06.167
Well, she's gonna use

00:38:06.167 --> 00:38:07.968
one of my favorite features
of Google Apps,

00:38:07.968 --> 00:38:09.801
and that's 2-factor
authentication, right?

00:38:09.801 --> 00:38:11.634
So normally, you log in
to Google Apps

00:38:11.634 --> 00:38:13.467
with something familiar.
It's something you know.

00:38:13.467 --> 00:38:15.300
It's your password
and your username.

00:38:15.300 --> 00:38:17.300
2-factor authentication
adds another factor,

00:38:17.300 --> 00:38:19.801
something you have, and most
of you have cell phones.

00:38:19.801 --> 00:38:21.801
What 2-factor authentication
will do

00:38:21.801 --> 00:38:23.634
is provide you
with a onetime password

00:38:23.634 --> 00:38:26.467
every time you log in
to Google Apps on your phone,

00:38:26.467 --> 00:38:29.467
by SMS or by an application
you can download.

00:38:29.467 --> 00:38:31.133
It works something like this.

00:38:31.133 --> 00:38:33.634
So normally, you put in
your password

00:38:33.634 --> 00:38:36.300
and your username, like that.

00:38:36.300 --> 00:38:39.167
Once you put it in,
and it's accepted,

00:38:39.167 --> 00:38:41.801
you'll be asked to enter
a verification code.

00:38:41.801 --> 00:38:43.467
And, of course,
this verification code,

00:38:43.467 --> 00:38:45.801
as I just mentioned,
comes up on your phone.

00:38:45.801 --> 00:38:48.300
That's the second factor,
and you're able to authenticate.

00:38:48.300 --> 00:38:49.801
This is really useful.

00:38:49.801 --> 00:38:53.300
This is an industrial-strength
enterprise security feature

00:38:53.300 --> 00:38:56.801
that we bring to everyone
on Google Apps.

00:38:56.801 --> 00:38:59.467
So for applications
that lack input,

00:38:59.467 --> 00:39:01.534
we can use--
like, POP and IMAP clients.

00:39:01.534 --> 00:39:04.033
We also offer something we call
application-specific passwords.

00:39:04.033 --> 00:39:06.534
Um, and we also offer
the ability to create

00:39:06.534 --> 00:39:08.534
backup passwords in case
you lose your cell phone,

00:39:08.534 --> 00:39:10.367
and you need a way to get in.

00:39:10.367 --> 00:39:12.367
So all of these things have been
thought out really well.

00:39:12.367 --> 00:39:15.367
It's very useful.
Okay, so what have we done?

00:39:15.367 --> 00:39:17.200
We've talked about
the Audit API,

00:39:17.200 --> 00:39:19.033
and we've got
2-factor authentication.

00:39:19.033 --> 00:39:20.534
Carol's very happy.

00:39:20.534 --> 00:39:22.534
She loves these enterprise
security features.

00:39:22.534 --> 00:39:24.534
She's got a small company,
also a tight budget,

00:39:24.534 --> 00:39:27.200
and these have been very helpful
for her--for her business.

00:39:27.200 --> 00:39:29.200
All right,
let's add the Audit API

00:39:29.200 --> 00:39:30.868
to our toolbox.

00:39:30.868 --> 00:39:32.701
Okay, so I-I've shared with you
three stories

00:39:32.701 --> 00:39:34.534
about how the Admin APIs
are used to--

00:39:34.534 --> 00:39:36.033
in various reporting

00:39:36.033 --> 00:39:38.200
and compliance
and security issues.

00:39:38.200 --> 00:39:40.667
Let's go all the way back
to the beginning of the talk,

00:39:40.667 --> 00:39:42.667
and let's see what
all this means, right?

00:39:42.667 --> 00:39:45.200
So earlier, I said that, um,

00:39:45.200 --> 00:39:48.200
we--we offer great security,
availability, and uptime,

00:39:48.200 --> 00:39:49.701
and we offer

00:39:49.701 --> 00:39:51.534
great enterprise-level
security features.

00:39:51.534 --> 00:39:53.367
But there's one more thing
I want to add,

00:39:53.367 --> 00:39:55.200
and that is this toolbox
of Administrative APIs

00:39:55.200 --> 00:39:56.868
for compliance and reporting.

00:39:56.868 --> 00:39:59.701
So for you managers out there,
we're always improving

00:39:59.701 --> 00:40:01.534
the extensibility
of Google Apps,

00:40:01.534 --> 00:40:03.534
and the functionality
with new APIs.

00:40:03.534 --> 00:40:05.367
And, uh, there's a lot
of exciting things

00:40:05.367 --> 00:40:07.367
that are gonna come out
in the next year or two,

00:40:07.367 --> 00:40:09.367
and I hope you stay tuned.
It's gonna be really great.

00:40:09.367 --> 00:40:11.367
We depend on your feedback
to come up with these features.

00:40:11.367 --> 00:40:14.033
And since regulations change,
compliances change,

00:40:14.033 --> 00:40:17.701
standards change, we--we are
able to change with the times.

00:40:17.701 --> 00:40:19.200
And for developers,

00:40:19.200 --> 00:40:21.400
you have a lot of potential
customers out there, right?

00:40:21.400 --> 00:40:23.868
Um, the amount of Google Apps
users is growing tremendously,

00:40:23.868 --> 00:40:25.534
and there's
a lot of custom needs.

00:40:25.534 --> 00:40:27.367
I just showed you
three different stories

00:40:27.367 --> 00:40:29.033
of people with really
disparate needs.

00:40:29.033 --> 00:40:30.701
But they're--they're crucial.

00:40:30.701 --> 00:40:32.701
And sometimes people just
don't have the IT experience

00:40:32.701 --> 00:40:34.367
to do what they need to do,

00:40:34.367 --> 00:40:36.200
and that's where the developers
come in, like you.

00:40:36.200 --> 00:40:38.200
We need you to build these tools
and build new products

00:40:38.200 --> 00:40:39.868
to help these people.

00:40:39.868 --> 00:40:41.701
Okay, so we're kind of
running short on time.

00:40:41.701 --> 00:40:43.701
I'm gonna leave a little time
left over for Q&amp;A.

00:40:43.701 --> 00:40:46.868
Um, before we do, let me just,
uh, pitch a few things to you.

00:40:46.868 --> 00:40:48.868
Um, so some of the documentation
about these APIs

00:40:48.868 --> 00:40:51.033
I talked about
and the features--

00:40:51.033 --> 00:40:54.868
they're available at
code.google.com/googleapps/docs.

00:40:54.868 --> 00:40:56.701
Or just google for them.

00:40:56.701 --> 00:40:58.701
Um, you can post feedback
at this feedback link

00:40:58.701 --> 00:41:01.033
that I showed you earlier.
Please do if you have time.

00:41:01.033 --> 00:41:03.100
We want you to stay connected.
the best place to look

00:41:03.100 --> 00:41:05.434
for new features is to go to
the Google Apps Developer Blog,

00:41:05.434 --> 00:41:07.434
which is at
googleappsdeveloper.blogspot.

00:41:07.434 --> 00:41:09.267
And finally, we'd love you
to join the--

00:41:09.267 --> 00:41:12.934
if you're a developer--join
the Admin API Developer Group.

00:41:12.934 --> 00:41:14.934
It's, uh--there's a lot
of people in this group,

00:41:14.934 --> 00:41:17.267
And it's--we respond
very quickly to questions

00:41:17.267 --> 00:41:18.767
for the APIs.

00:41:18.767 --> 00:41:20.434
And so go ahead and join,

00:41:20.434 --> 00:41:22.434
and we'd love to hear your--
your feedback in there, too.

00:41:22.434 --> 00:41:24.601
Okay, so that's
all I have prepared.

00:41:24.601 --> 00:41:27.601
I'm ready for Q&amp;A.
I hope you enjoyed the talk.

00:41:27.601 --> 00:41:30.534
[applause]

00:41:33.100 --> 00:41:34.601
Manoochehri: All right.

00:41:34.601 --> 00:41:36.601
man: When the question
was asked about a year ago,

00:41:36.601 --> 00:41:40.100
uh, Google was not considered,
uh, HIPAA-compliant

00:41:40.100 --> 00:41:43.100
in terms of, you know,
protected health information.

00:41:43.100 --> 00:41:45.100
Is there anyone at Google to ask

00:41:45.100 --> 00:41:48.267
regarding direction
towards HIPAA compliance?

00:41:48.267 --> 00:41:50.100
Manoochehri: Right.
So I-I'm probably

00:41:50.100 --> 00:41:51.767
a bad person to ask about that.

00:41:51.767 --> 00:41:53.601
Um, you should definitely talk
to one of our--

00:41:53.601 --> 00:41:55.434
and I'm not sure
if they're here right now--

00:41:55.434 --> 00:41:57.100
one of our PR people.

00:41:57.100 --> 00:41:58.934
Or send a message to one
of our enterprise, uh,

00:41:58.934 --> 00:42:00.467
enterprise representatives

00:42:00.467 --> 00:42:02.334
on the Google Apps,
uh, enterprise page.

00:42:02.334 --> 00:42:04.167
Um, so the problem
that we have sometimes

00:42:04.167 --> 00:42:06.000
is I don't know
exactly which regulations

00:42:06.000 --> 00:42:07.667
that, you know,
we're complying with.

00:42:07.667 --> 00:42:09.667
They change all the time.
So, uh, but there are people

00:42:09.667 --> 00:42:12.167
at Google that know
this information.

00:42:12.167 --> 00:42:14.501
Yeah.
man: Great, thanks.

00:42:14.501 --> 00:42:17.000
I just wanted some clarification
upon the limits, uh...

00:42:17.000 --> 00:42:18.501
Manoochehri: Yeah.

00:42:18.501 --> 00:42:20.167
man: Are those
for mailbox requests,

00:42:20.167 --> 00:42:22.667
audit requests, or, like, both?
Manoochehri: Both.

00:42:22.667 --> 00:42:24.501
man: Okay.
So it's 100 flat per day.

00:42:24.501 --> 00:42:26.834
Manoochehri: Yes. Yes.
It's not meant to be used--

00:42:26.834 --> 00:42:29.334
like I said before, not meant
to be used as a backup system.

00:42:29.334 --> 00:42:31.667
And it's--it's doing a lot
behind the scenes.

00:42:31.667 --> 00:42:35.000
So you have two limits
for that purpose. Sure.

00:42:35.000 --> 00:42:38.334
man: Hi, two questions--
one on API in general.

00:42:38.334 --> 00:42:41.501
Uh, is Google thinking
about, uh,

00:42:41.501 --> 00:42:43.834
some sort of auditing--
the usage of the APIs?

00:42:43.834 --> 00:42:47.501
If you imagine a fairly big
Google Apps account

00:42:47.501 --> 00:42:49.501
of 10,000 users, probably...
Manoochehri: Yeah.

00:42:49.501 --> 00:42:51.501
man: There's gonna be
more than one admin,

00:42:51.501 --> 00:42:53.334
and there's gonna be
several admins.

00:42:53.334 --> 00:42:55.167
And there's gonna be probably
third parties

00:42:55.167 --> 00:42:57.000
that's gonna be accessing
my domain

00:42:57.000 --> 00:42:59.000
and accessing my data
with APIs.

00:42:59.000 --> 00:43:01.234
And maybe I would like to know,
you know, who's--

00:43:01.234 --> 00:43:03.734
who's using which API when
for what data?

00:43:03.734 --> 00:43:05.734
Manoochehri: Yeah. I mean,
yeah, excellent question.

00:43:05.734 --> 00:43:07.567
Um, the answer is,
we're looking into it.

00:43:07.567 --> 00:43:09.400
We don't have an API
that does this yet,

00:43:09.400 --> 00:43:11.234
but it's something
we're working on.

00:43:11.234 --> 00:43:13.567
man: And regarding the Audit API
specifically...

00:43:13.567 --> 00:43:16.067
Manoochehri: Mm-hmm.
man: Um, I think the Audit API--

00:43:16.067 --> 00:43:17.567
it's very powerful.

00:43:17.567 --> 00:43:19.067
Nevertheless,

00:43:19.067 --> 00:43:22.067
in the wrong hand,
it could be very harmful, also.

00:43:22.067 --> 00:43:25.734
So is there any way to--
or is Google thinking

00:43:25.734 --> 00:43:27.567
on some sort of workflow

00:43:27.567 --> 00:43:30.734
on authorizing the usage
of the Audit API in--

00:43:30.734 --> 00:43:33.901
or is there any way that I can
disable the Audit API

00:43:33.901 --> 00:43:36.067
for--for a domain?
Manoochehri: Yeah.

00:43:36.067 --> 00:43:38.067
Yeah, so the Audit API--
that's a great question.

00:43:38.067 --> 00:43:40.100
Actually, the Audit API
can only be enabled

00:43:40.100 --> 00:43:41.901
once you enable
the Provisioning API.

00:43:41.901 --> 00:43:44.400
So you can actually disable it
in the control panel.

00:43:44.400 --> 00:43:47.901
Um, as for what you said--
an ability to authorize it--

00:43:47.901 --> 00:43:49.567
you said it's very powerful.

00:43:49.567 --> 00:43:51.567
That's what that public-private
key pair is for.

00:43:51.567 --> 00:43:54.567
It's almost like 2-factor
for an API.

00:43:54.567 --> 00:43:56.501
man: Okay.

00:43:58.501 --> 00:44:01.901
man: So we work with some people
who use PCI DSS

00:44:01.901 --> 00:44:04.400
or under PCI DSS regulations

00:44:04.400 --> 00:44:06.400
for credit card--
taking credit cards.

00:44:06.400 --> 00:44:09.067
Um, and that seems to require

00:44:09.067 --> 00:44:11.567
a continuous audit of logins,

00:44:11.567 --> 00:44:13.601
um, whereas this appeared to be

00:44:13.601 --> 00:44:15.567
just a single query
for an individual user.

00:44:15.567 --> 00:44:19.234
Is there any thought to, uh,
a continuous feed of this--

00:44:19.234 --> 00:44:21.734
somewhat like the syslog
I get from my own servers?

00:44:21.734 --> 00:44:23.234
Manoochehri: How continuous?

00:44:23.234 --> 00:44:25.067
Well, so let me answer
your question twice.

00:44:25.067 --> 00:44:26.901
No, we don't have an API
that does that.

00:44:26.901 --> 00:44:28.734
Um, and the Audit API--
you're right.

00:44:28.734 --> 00:44:30.567
It's not something
that works continuously.

00:44:30.567 --> 00:44:33.234
It doesn't push-notify anybody
about an account access.

00:44:33.234 --> 00:44:36.234
But in your experience
with PCI compliance,

00:44:36.234 --> 00:44:38.234
how continuous
are you talking about?

00:44:38.234 --> 00:44:40.234
man: Well, what we get
currently is, you know,

00:44:40.234 --> 00:44:42.067
this guy logged in,
then this guy logged in,

00:44:42.067 --> 00:44:43.901
then this guy logged in,
so it's a--

00:44:43.901 --> 00:44:45.567
it's a pretty continuous flow.

00:44:45.567 --> 00:44:47.434
I'm not sure whether
the regulation would--

00:44:47.434 --> 00:44:49.400
I mean, it would probably be
satisfied if you could

00:44:49.400 --> 00:44:51.400
do a poll once a minute and get
all the logins that happened.

00:44:51.400 --> 00:44:53.067
But it's mostly
that it's looking

00:44:53.067 --> 00:44:54.901
at everybody's account...
Manoochehri: Mm-hmm.

00:44:54.901 --> 00:44:56.400
man: Pretty rapidly.

00:44:56.400 --> 00:44:58.234
Manoochehri: Well,
I'd like to talk to you

00:44:58.234 --> 00:44:59.901
about the requirements of that.

00:44:59.901 --> 00:45:01.801
The short answer
to your question is no.

00:45:01.801 --> 00:45:03.801
The Audit API doesn't actually
provide that functionality.

00:45:03.801 --> 00:45:05.801
woman: A question
about Single Sign-on.

00:45:05.801 --> 00:45:07.801
Manoochehri: Mm-hmm.
woman: Uh, there's a link

00:45:07.801 --> 00:45:10.467
you can link to use
that you do the Single Sign-on

00:45:10.467 --> 00:45:12.801
and also sign out.

00:45:12.801 --> 00:45:15.300
So for logout, usually,
you know, we do--

00:45:15.300 --> 00:45:18.133
try to, uh, delete cookies
and things like that.

00:45:18.133 --> 00:45:20.167
Do you have a reference
how to do that?

00:45:20.167 --> 00:45:21.801
Manoochehri: Right.
So, yes, let me--

00:45:21.801 --> 00:45:23.467
let me say something about that.

00:45:23.467 --> 00:45:25.300
Google Apps doesn't support
Single Sign-on--

00:45:25.300 --> 00:45:27.133
I'm sorry,
Single Sign-out functionality

00:45:27.133 --> 00:45:28.634
for various reasons.

00:45:28.634 --> 00:45:30.634
Um, one is because once
you sign out of Google Apps,

00:45:30.634 --> 00:45:32.467
we don't want--we don't know
if you've signed out

00:45:32.467 --> 00:45:34.467
of everything completely.
We leave that all up to you.

00:45:34.467 --> 00:45:37.300
Um, for a reference, there's
two softwares you could look at.

00:45:37.300 --> 00:45:39.467
I don't know if you use
Shibboleth or SimpleSAMLphp.

00:45:39.467 --> 00:45:40.968
woman: Uh, Shibboleth.

00:45:40.968 --> 00:45:42.634
Manoochehri: You use Shibboleth,
okay.

00:45:42.634 --> 00:45:44.467
So that--this is a limitation
of Shibboleth, as well.

00:45:44.467 --> 00:45:46.467
Um, the real--the only real way
to do Single Sign-out

00:45:46.467 --> 00:45:48.801
is to actually create a function
that closes the browser window

00:45:48.801 --> 00:45:50.300
when you've signed out.

00:45:50.300 --> 00:45:51.968
You probably
have seen that already.

00:45:51.968 --> 00:45:54.300
Um, the answer is, Google Apps
doesn't do anything for that.

00:45:54.300 --> 00:45:57.300
I think you should look
at what SimpleSAMLphp does,

00:45:57.300 --> 00:46:00.300
which is attempt to, you know,
sign everything out,

00:46:00.300 --> 00:46:02.200
sign everybody
out of every service

00:46:02.200 --> 00:46:04.200
once the sign-out link
is--is clicked.

00:46:04.200 --> 00:46:06.033
woman: Okay, uh,
second one is simple.

00:46:06.033 --> 00:46:08.200
The Reporting Python library
that you just showed...

00:46:08.200 --> 00:46:09.701
Manoochehri: Mm-hmm.

00:46:09.701 --> 00:46:11.367
woman: Does not seem
to have IMAP.

00:46:11.367 --> 00:46:13.200
Manoochehri: Does not seem
to have what?

00:46:13.200 --> 00:46:15.534
woman: IMAP session, IMAP login,
last IMAP.

00:46:15.534 --> 00:46:17.367
Manoochehri: Oh, I'm sorry.
Yeah. So we--

00:46:17.367 --> 00:46:19.200
woman: You have last POP,
but not IMAP.

00:46:19.200 --> 00:46:21.033
Manoochehri: Right, we com--
as far as I know--

00:46:21.033 --> 00:46:23.033
I might be mistaken about this,
but I think we combined

00:46:23.033 --> 00:46:24.701
the IMAP and POP, uh,

00:46:24.701 --> 00:46:27.567
the IMAP and POP accesses
in that--in that one variable.

00:46:27.567 --> 00:46:29.367
woman: So the--
Manoochehri: So it's basically

00:46:29.367 --> 00:46:31.534
web mail versus non-web mail,
is what that reports.

00:46:31.534 --> 00:46:34.868
woman: Okay, so last POP
maybe is last IMAP, right?

00:46:34.868 --> 00:46:36.534
Manoochehri: Mm-hmm. Yes.
Oh, I see.

00:46:36.534 --> 00:46:38.367
There's no differentiating
on our end

00:46:38.367 --> 00:46:40.200
about is it POP versus IMAP?

00:46:40.200 --> 00:46:42.033
It's just--it's just
an e-mail client versus--

00:46:42.033 --> 00:46:43.868
or, I'm sorry,
a desktop e-mail client

00:46:43.868 --> 00:46:45.701
versus a web mail client.
woman: Okay. Um...

00:46:45.701 --> 00:46:47.534
Manoochehri: Do you have
a requirement

00:46:47.534 --> 00:46:49.033
to separate those two?

00:46:49.033 --> 00:46:50.868
woman: Well, it's just
the title is confusing.

00:46:50.868 --> 00:46:52.701
I can go back
to do some testing.

00:46:52.701 --> 00:46:54.534
I studied just POP.
Manoochehri: Yes, it's--

00:46:54.534 --> 00:46:56.367
I agree that the label
is slightly misleading.

00:46:56.367 --> 00:46:58.701
woman: Yeah. Um, the other APIs
that you named--

00:46:58.701 --> 00:47:01.434
Provisional--Provisioning API
and all the EmailSetting

00:47:01.434 --> 00:47:03.100
and all that...
Manoochehri: Uh-huh.

00:47:03.100 --> 00:47:06.767
woman: Do they--do they
support OAuth 2 or OAuth 1?

00:47:06.767 --> 00:47:08.767
Manoochehri: Um, everything
that I talked about

00:47:08.767 --> 00:47:11.267
supports OAuth 1
except for--or--is--

00:47:11.267 --> 00:47:13.767
uses OAuth 1
except for the Reporting API.

00:47:13.767 --> 00:47:15.267
Um, OAuth 2 flow

00:47:15.267 --> 00:47:17.100
is not supported
by any of these APIs yet.

00:47:17.100 --> 00:47:18.767
We're working on that right now.

00:47:18.767 --> 00:47:20.601
And I hope to get that
soon, actually.

00:47:20.601 --> 00:47:22.434
woman: Okay, OAuth 2
is not supported yet.

00:47:22.434 --> 00:47:24.434
Manoochehri: Right, exactly.
woman: But OAuth 1 is okay.

00:47:24.434 --> 00:47:26.434
Manoochehri: Yes, the OAuth 1--
Yes, the OAuth 1 flow

00:47:26.434 --> 00:47:28.267
is supported with these.
woman: Okay, thank you.

00:47:28.267 --> 00:47:30.100
Manoochehri: Oh, let me add--
I said this earlier,

00:47:30.100 --> 00:47:32.067
but there's--we just published
an article about using

00:47:32.067 --> 00:47:34.067
OAuth 1 flow
for web-based applications

00:47:34.067 --> 00:47:35.567
with the Provisioning API.

00:47:35.567 --> 00:47:37.567
If you're interested in learning
more, that's a great resource.

00:47:37.567 --> 00:47:41.234
man: Hey, um, when you,
um, get the dump...

00:47:41.234 --> 00:47:43.234
Manoochehri: Mm-hmm.
man: For an e-mail's mailbox...

00:47:43.234 --> 00:47:45.067
Manoochehri: Mm-hmm.
man: And you decrypt,

00:47:45.067 --> 00:47:47.067
does that decrypt everything
into clear text?

00:47:47.067 --> 00:47:49.067
Manoochehri: Say that again.
I didn't hear the last part.

00:47:49.067 --> 00:47:50.734
man: Sorry,
so when you decrypt...

00:47:50.734 --> 00:47:52.567
Manoochehri: Uh-huh.
man: The user's mailbox...

00:47:52.567 --> 00:47:54.901
Manoochehri: Uh-huh.
man: Do you see everything

00:47:54.901 --> 00:47:56.567
in clear text?
Manoochehri: Yes.

00:47:56.567 --> 00:47:58.067
man: Everything?
Manoochehri: Yes.

00:47:58.067 --> 00:48:00.067
man: Okay.
Manoochehri: Mm-hmm.

00:48:02.934 --> 00:48:04.934
woman: Uh, I had
a quick question,

00:48:04.934 --> 00:48:06.734
kind of along the lines
of the gentleman

00:48:06.734 --> 00:48:08.734
who was talking about PCI DSS.
Manoochehri: Yeah.

00:48:08.734 --> 00:48:10.434
woman: Have you seen
any implementations

00:48:10.434 --> 00:48:14.100
where the, uh, people are
using the Google Apps engines

00:48:14.100 --> 00:48:15.934
to keep track

00:48:15.934 --> 00:48:17.934
of, uh, which users

00:48:17.934 --> 00:48:20.100
performed which actions
in the system,

00:48:20.100 --> 00:48:22.601
so that you have an audit trail
for all the activities

00:48:22.601 --> 00:48:24.601
that took place, for example,
on a partic--

00:48:24.601 --> 00:48:26.434
if you're in financial services,
for example...

00:48:26.434 --> 00:48:27.767
Manoochehri: Yeah.

00:48:27.767 --> 00:48:29.601
woman: For each of your
customers, you need to have

00:48:29.601 --> 00:48:31.434
a-an audit trail for who made
changes to the account.

00:48:31.434 --> 00:48:33.267
Manoochehri: And which type of--
so were you talking about

00:48:33.267 --> 00:48:36.100
administrative functions, like--
woman: Um, yeah.

00:48:36.100 --> 00:48:39.767
Basically, if you're a customer
service rep, for example,

00:48:39.767 --> 00:48:41.601
or, uh, if you're
in fraud management...

00:48:41.601 --> 00:48:43.434
Manoochehri: Yeah.
woman: And you make

00:48:43.434 --> 00:48:45.267
a change to the account,
you know, you block it,

00:48:45.267 --> 00:48:47.100
or you, uh, you block
the person's card,

00:48:47.100 --> 00:48:48.934
you change their address,
you change their date of birth,

00:48:48.934 --> 00:48:50.767
that type of thing...
Manoochehri: Ah, yeah.

00:48:50.767 --> 00:48:52.767
woman: You need to be able
to look in the system

00:48:52.767 --> 00:48:54.434
and see who made the change.

00:48:54.434 --> 00:48:56.100
Have you seen
any implementations

00:48:56.100 --> 00:48:58.367
with Google Apps engines that
use that kind of functionality?

00:48:58.367 --> 00:49:00.033
Manoochehri: I'm not
familiar with any.

00:49:00.033 --> 00:49:02.100
Uh, it's something that we get
asked about from time to time,

00:49:02.100 --> 00:49:03.934
and it's something
we're looking into on our end

00:49:03.934 --> 00:49:05.601
for different ways
to audit things

00:49:05.601 --> 00:49:07.100
that are not user accounts,

00:49:07.100 --> 00:49:08.767
but actually
administrative actions.

00:49:08.767 --> 00:49:10.601
And that's something
that we're looking into,

00:49:10.601 --> 00:49:12.434
but we currently don't have
a particular API

00:49:12.434 --> 00:49:15.767
that does that yet.
woman: Okay, thank you.

00:49:15.767 --> 00:49:18.601
man: Hello.
Um, I'm just wondering

00:49:18.601 --> 00:49:21.767
why the chats in Gtalk

00:49:21.767 --> 00:49:23.767
are not auditable?

00:49:23.767 --> 00:49:25.601
You--you cannot get it--

00:49:25.601 --> 00:49:28.267
well, with the Audit API
you get it,

00:49:28.267 --> 00:49:31.200
but only if the user
has their setting,

00:49:31.200 --> 00:49:33.200
like to store a chats history.

00:49:33.200 --> 00:49:36.767
Manoochehri: Mm-hmm. Oh, the--
man: And the administrator

00:49:36.767 --> 00:49:38.601
cannot force the users

00:49:38.601 --> 00:49:40.601
to keep the chat history.

00:49:40.601 --> 00:49:42.601
Manoochehri: I see. Yes,
this is an interesting question.

00:49:42.601 --> 00:49:44.601
So, uh, it's kind of like,
a 2-part question.

00:49:44.601 --> 00:49:46.934
One, actually, the Audit API
will let you download

00:49:46.934 --> 00:49:50.100
a dump of chats that were,
um, on the record.

00:49:50.100 --> 00:49:52.767
But you're asking basically,
Can we force chats

00:49:52.767 --> 00:49:54.601
to always be--
is that what you're asking?

00:49:54.601 --> 00:49:56.100
man: [speaking indistinctly]
man: Yes.

00:49:56.100 --> 00:49:57.934
Manoochehri: So these kinds
of additions to Google Apps,

00:49:57.934 --> 00:49:59.601
these kinds of requests
for things--

00:49:59.601 --> 00:50:01.434
we're also looking
into different ways

00:50:01.434 --> 00:50:02.934
to do these things.

00:50:02.934 --> 00:50:04.767
Again, I don't have an API
that will provide you

00:50:04.767 --> 00:50:06.601
with that information,
but it's something

00:50:06.601 --> 00:50:08.434
that we've been asked about,
and we're looking

00:50:08.434 --> 00:50:10.267
at the possibilities
with these things.

00:50:10.267 --> 00:50:12.100
man: Thank you.
Manoochehri: Mm-hmm.

00:50:12.100 --> 00:50:13.934
All right, so I guess
there's no more questions.

00:50:13.934 --> 00:50:15.767
I don't want to run
out of time here.

00:50:15.767 --> 00:50:17.434
I think you guys
should go out

00:50:17.434 --> 00:50:19.267
and enjoy the rest
of Google I/O,

00:50:19.267 --> 00:50:21.100
and let's call it a wrap.
How about that?

00:50:21.100 --> 00:50:23.868
All right. What's that?
[applause]

