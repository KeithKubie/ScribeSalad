WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
So we've got this function, build link index, that makes our index.

00:00:04.000 --> 00:00:06.000
We just wrote this together.

00:00:06.000 --> 00:00:09.000
Let's use this new index function.

00:00:09.000 --> 00:00:12.000
So the first thing I want to do is actually run the function and store that somewhere.

00:00:12.000 --> 00:00:17.000
So we'll store that in a variable called link index=build link index.

00:00:17.000 --> 00:00:20.000
Now, this isn't the best Python code.

00:00:20.000 --> 00:00:24.000
Normally we wouldn't use global variables like this, but this is fine for this example.

00:00:24.000 --> 00:00:26.000
One time, we're going to build this link index.

00:00:26.000 --> 00:00:29.000
And now I'd like to update our link by id function

00:00:29.000 --> 00:00:32.000
to use our new index.

00:00:32.000 --> 00:00:34.000
Okay, so I've improved this function

00:00:34.000 --> 00:00:37.000
to instead of iterating over the entire list of links,

00:00:37.000 --> 00:00:39.000
to just look up the link id in the index.

00:00:39.000 --> 00:00:41.000
And let's give this a test.

00:00:41.000 --> 00:00:46.000
Okay, so let's call this function link by id(24).

00:00:46.000 --> 00:00:49.000
We've done that a couple times. I click run.

00:00:49.000 --> 00:00:52.000
Ah, and we see our link--id=24.

00:00:52.000 --> 00:00:58.000
Now, what happens if we run this on a link that doesn't exist?

00:00:58.000 --> 00:01:00.000
Barf!

00:01:00.000 --> 00:01:03.000
Our program died because we tried to look up,

00:01:03.000 --> 00:01:06.000
in a Python hashtable, an ID that doesn't exist--

00:01:06.000 --> 00:01:08.000
or a key that doesn't exist.

00:01:08.000 --> 00:01:10.000
So there's an easy way to fix that in Python.

00:01:10.000 --> 00:01:12.000
I'll show you how to do that.

00:01:12.000 --> 00:01:15.000
Instead of using these braces, we can use the function called get,

00:01:15.000 --> 00:01:17.000
which Python hashtables have.

00:01:17.000 --> 00:01:20.000
And what this does is it checks to see if this key is in the hashtable,

00:01:20.000 --> 00:01:24.000
and if it is, that's what this function returns; otherwise, it returns none.

00:01:24.000 --> 00:01:28.000
So let's give our function a test again by running this.

00:01:28.000 --> 00:01:30.000
Okay, now we return none.

00:01:30.000 --> 00:01:32.000
Very cool. That's what we expected.

00:01:32.000 --> 00:01:36.000
And let's just make sure that our function is still working the way it worked before

00:01:36.000 --> 00:01:40.000
by sending in a link that we know exists.

00:01:40.000 --> 00:01:42.000
In this case, I'll do 4. Here we go.

00:01:42.000 --> 00:01:44.000
So we see link id 4.

00:01:44.000 --> 00:01:47.000
So now we have this function link by id

00:01:47.000 --> 00:01:49.000
that uses our index.

00:01:49.000 --> 00:01:51.000
So if we had a bunch of links,

00:01:51.000 --> 00:01:53.000
all we'd have to do is build this index once,

00:01:53.000 --> 00:01:56.000
and then we don't have to scan over it every time we do a lookup--every time we do a query.

00:01:56.000 --> 00:01:59.000
Instead we can just hit the index.

00:01:59.000 --> 00:02:02.000
Okay, now there's one last function I'd like you to add.

00:02:02.000 --> 00:02:07.000
What I'd like you to do is implement this new function called add new link.

00:02:07.000 --> 00:02:11.000
It's going to take a link--it's going to take an instance of link--as a parameter,

00:02:11.000 --> 00:02:14.000
and then it needs to both add the link to our database--

00:02:14.000 --> 00:02:18.000
which is this list object we've been working with links--

00:02:18.000 --> 00:02:22.000
and it's also going add the links id

00:02:22.000 --> 00:02:25.000
to the list--the link index.

00:02:25.000 --> 00:02:29.000
Go ahead and implement this function now.

