WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.770
Now we can finally move
onto the main course,

00:00:02.770 --> 00:00:05.890
how functions and
closures capture variables.

00:00:05.890 --> 00:00:08.980
Take a close look at
the function make counter below.

00:00:10.000 --> 00:00:11.980
The code is pretty short, but

00:00:11.980 --> 00:00:16.340
it will require some close inspection
to understand it the first time.

00:00:16.340 --> 00:00:18.310
What's special about this?

00:00:18.310 --> 00:00:22.440
Well it returns a function,
an int maker.

00:00:22.440 --> 00:00:23.040
That's OK.

00:00:23.040 --> 00:00:25.050
There's nothing really
special about that.

00:00:25.050 --> 00:00:30.240
We've seen that functions and closures,
and by the way here I'm using

00:00:30.240 --> 00:00:34.750
function instead of a closure syntax
simply because the syntax is simpler.

00:00:34.750 --> 00:00:35.710
That's the only reason.

00:00:35.710 --> 00:00:38.970
It work exactly the same with a closure.

00:00:38.970 --> 00:00:43.180
So we're returning a function or
a closure, remember it's the same thing.

00:00:43.180 --> 00:00:44.510
And since functions and

00:00:44.510 --> 00:00:49.740
closures are class objects, we can
return them from another function.

00:00:49.740 --> 00:00:51.410
So far, that's normal.

00:00:51.410 --> 00:00:54.270
Just like some machines
create other machines,

00:00:54.270 --> 00:00:56.320
some functions can
create other functions.

00:00:56.320 --> 00:00:58.420
There's nothing special about that.

00:00:58.420 --> 00:01:02.770
What else is interesting or
at least unusual?

00:01:02.770 --> 00:01:06.030
It has a function within itself.

00:01:06.030 --> 00:01:10.290
So it contains a function
defined within make counter.

00:01:10.290 --> 00:01:12.970
Well, don't panic, that's normal too.

00:01:12.970 --> 00:01:16.490
Just like you can have machines
that contain other machines, and

00:01:16.490 --> 00:01:19.520
these are only visible from
the within the contained machine.

00:01:19.520 --> 00:01:21.910
Think of your radio inside you car.

00:01:21.910 --> 00:01:24.670
So no big deal there.

00:01:24.670 --> 00:01:28.794
And it's actually useful and good
practice to break down a long function,

00:01:28.794 --> 00:01:32.589
not this one, but a long function,
not this one but a long function or

00:01:32.589 --> 00:01:34.090
a complex one.

00:01:34.090 --> 00:01:36.030
Into small,

00:01:36.030 --> 00:01:41.400
simple functions by using interfunctions
that do part of the total job.

00:01:41.400 --> 00:01:44.720
What else is interesting about this?

00:01:44.720 --> 00:01:48.400
The really, really interesting and
funky part, by the way,

00:01:48.400 --> 00:01:52.440
this should be this, is that adder.

00:01:52.440 --> 00:01:59.490
The inner function can access this
variable that is defined before it.

00:01:59.490 --> 00:02:03.420
Not only can it access it,
but it's changing it.

00:02:03.420 --> 00:02:09.449
It's adding one to that,
that's what we call variable capture.

00:02:09.449 --> 00:02:14.680
So to understand how this works, Let's
create two closures of type IntMaker

00:02:14.680 --> 00:02:19.530
by calling twice makeCounter and
save them into two variables.

00:02:19.530 --> 00:02:26.360
So both counter1 and counter2 take no
arguments and they return an integer.

00:02:26.360 --> 00:02:32.510
Think very carefully what the output
should be when I call counter1 thrice.

00:02:32.510 --> 00:02:36.080
Try to think before
using the Playground.

00:02:36.080 --> 00:02:40.080
So the first time n will have value 0,

00:02:40.080 --> 00:02:44.630
we add 1 and adder returns 1.

00:02:44.630 --> 00:02:47.910
Let's see if it's true.

00:02:47.910 --> 00:02:50.990
And what happens when I call again,
counter1?

00:02:50.990 --> 00:02:52.710
What do you expect?

00:02:52.710 --> 00:02:53.980
Let's give it a try.

00:02:53.980 --> 00:03:01.000
So as you can see, when we call it
again, counter which is a type of adder,

00:03:01.000 --> 00:03:05.250
keeps adding one to n and
that value remains there,

00:03:05.250 --> 00:03:09.250
so we get two, three, four, et cetera.

00:03:09.250 --> 00:03:13.990
And now for the grand finale,
what do you think this would return?

00:03:13.990 --> 00:03:17.660
Calling counter2 for the first sign.

00:03:17.660 --> 00:03:21.670
Think before trying it, and
as we can see, it returns one.

00:03:21.670 --> 00:03:24.550
You might have expected
it to return four.

00:03:24.550 --> 00:03:26.620
Actually, that would not be very useful,

00:03:26.620 --> 00:03:33.100
because that would mean that every
function adder shares this n.

00:03:33.100 --> 00:03:37.220
The first languages that implemented
this variable capture feature

00:03:37.220 --> 00:03:40.520
did behave that way, but it will
soon realize that this was a bug.

00:03:40.520 --> 00:03:41.850
It was not a feature.

00:03:41.850 --> 00:03:46.870
So, right now,
every single closure that we return

00:03:46.870 --> 00:03:52.930
from makeCounter takes its own copy
of all the captured variables.

00:03:52.930 --> 00:03:55.480
So every time an adder is created,

00:03:55.480 --> 00:03:57.740
it takes a copy of all
the captured variables.

00:03:57.740 --> 00:04:01.950
Therefore each closure has its
own copy of the environment.

00:04:01.950 --> 00:04:06.750
And environment means all the values of
all the variables that were captured.

00:04:06.750 --> 00:04:08.230
This is done for safety.

00:04:08.230 --> 00:04:09.950
And also to keep you sane.

00:04:09.950 --> 00:04:12.890
The value of a variable will
never change out of the blue,

00:04:12.890 --> 00:04:16.269
because somewhere,
some closure decided to change it.

00:04:16.269 --> 00:04:18.620
Everybody has its own copy.

00:04:18.620 --> 00:04:19.550
Let's rap up.

00:04:19.550 --> 00:04:23.350
We've learned quite a few things about
Swift in this lesson, so let's recap.

00:04:23.350 --> 00:04:27.100
First of all, functions and
closures are the same thing.

00:04:27.100 --> 00:04:31.490
We just have two different syntaxes,
so you express one same thing.

00:04:31.490 --> 00:04:35.060
Functions and closures are first
class citizens of our language.

00:04:35.060 --> 00:04:37.930
We can treat them like any other type.

00:04:37.930 --> 00:04:42.970
And also functions and closures capture
variables defined before the closure or

00:04:42.970 --> 00:04:44.960
function is defined.

00:04:44.960 --> 00:04:46.920
It might not seem obvious
to you at this point,

00:04:46.920 --> 00:04:52.270
but those two last features make
Swift a far more powerful language.

00:04:52.270 --> 00:04:55.110
They are the base of a different
style of programming called

00:04:55.110 --> 00:04:56.970
functional programming.

00:04:56.970 --> 00:04:59.660
Its popularity is
increasing a lot lately.

00:04:59.660 --> 00:05:04.080
However, you won't need it to finish the
nano degree or even land your first job,

00:05:04.080 --> 00:05:07.850
so don't worry, it's something that
you can learn later on if you want.

00:05:07.850 --> 00:05:08.900
If you're interested,

00:05:08.900 --> 00:05:12.770
you might want to check any of the books
that are linked in the instructor notes.

00:05:12.770 --> 00:05:15.480
There are introductions to
functional programming.

00:05:16.690 --> 00:05:19.210
And in the meantime,
we'll move to the next chapter,

00:05:19.210 --> 00:05:21.490
which deals with Grand Central Dispatch.

00:05:21.490 --> 00:05:25.720
This is a library that allows us to
create background tasks with great ease.

00:05:25.720 --> 00:05:30.670
This is vital to ship great apps and
avoid being rejected from the app store.

00:05:30.670 --> 00:05:35.140
Our newly gained knowledge of closures
would make understanding GCD a breeze.

00:05:35.140 --> 00:05:36.806
So let's move on and learn it.

