WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.850
&gt;&gt; PETERSON: Hi, everyone. Welcome to the
Wave Federation talk. I'm talking about what

00:00:02.850 --> 00:00:09.870
we're doing with Wave Federation in open source.
I'm Dan Peterson, product manager on the Wave

00:00:09.870 --> 00:00:15.179
APIs and the Federation open source effort.
With me is also is Jochen Beckmann, who's

00:00:15.179 --> 00:00:20.920
the tech lead for the Federation effort as
well as J.D. Zamfirescu, who is the lead on

00:00:20.920 --> 00:00:26.109
the open source efforts. So today, we'll go
ahead and jump in to agenda slide. Fairly

00:00:26.109 --> 00:00:30.550
short for the agenda, I'll kick things off
explaining what Wave Federation is and where

00:00:30.550 --> 00:00:34.930
it's headed. And then, we'll do a bit of a
tag team between Jochen and J.D. diving a

00:00:34.930 --> 00:00:38.350
lot deeper into the architecture, the model,
becoming an open source and how things like

00:00:38.350 --> 00:00:45.039
FedOne works. And we'll explain all that in
a moment. So, you know, at a very high level

00:00:45.039 --> 00:00:50.040
for context, Google Wave is a new communication
and collaboration tool. And the whole point

00:00:50.040 --> 00:00:54.220
is to help people get, help people get things
done. And beyond the product, there is the,

00:00:54.220 --> 00:00:58.809
the rich API platform and then the federation
protocol. You may have heard us talk about

00:00:58.809 --> 00:01:03.410
this as the three Ps, the Product Platform
Protocol of Google Wave. And this talk is

00:01:03.410 --> 00:01:08.860
primarily about the protocol. We're also lucky
to have Rob Horne from SAP and David LaPalomento

00:01:08.860 --> 00:01:14.970
from Novell here to help do some demos a little
bit later. And we'll so some interesting demos

00:01:14.970 --> 00:01:20.370
I hope you'll like. But by the end of the
talk, you'll understand how Wave Federation

00:01:20.370 --> 00:01:24.851
itself works. As well as how to get up and
running with your own, with FedOne, which

00:01:24.851 --> 00:01:29.360
is really how to run your own Wave service.
Understand more about the code of open source

00:01:29.360 --> 00:01:35.220
to date. And really just generally where things
are headed with the, this community and some

00:01:35.220 --> 00:01:40.220
client-server work we're doing and things
of that nature. So, at the high level, this

00:01:40.220 --> 00:01:45.180
protocol presents a great opportunity for
communication and collaboration across the

00:01:45.180 --> 00:01:49.610
Web to really get improved. So it's not just
talking about, you know, making things work

00:01:49.610 --> 00:01:54.930
better in one product. The whole idea is that
to use common protocols and open source technology

00:01:54.930 --> 00:01:58.860
so that you can actually build a distributed
network of Wave providers. Notice, there is

00:01:58.860 --> 00:02:05.220
no central server in that diagram, and that's
the whole point. So, today I don't know who

00:02:05.220 --> 00:02:09.360
saw that the epiphany video about, you know,
what is Google Wave before but mainstream

00:02:09.360 --> 00:02:13.610
collaboration is really dominated by email.
And that's all right. It clearly it works.

00:02:13.610 --> 00:02:18.420
It's very popular. But what you, what we've
often noticed is that information is ripped

00:02:18.420 --> 00:02:23.290
from its context and put in the email. And
that's--and then it's transfer over the wire

00:02:23.290 --> 00:02:28.690
and that sort of a lousy format. And it seems
like given things like broadband, HTML5, and

00:02:28.690 --> 00:02:34.150
other advances in computing, we can do better.
And so, that's where sort of Wave Federation

00:02:34.150 --> 00:02:43.090
enters the picture. The idea is let users
use the system that works best for them. And

00:02:43.090 --> 00:02:48.530
just let sort of collaboration flourish in
that way. There are clearly some pieces that

00:02:48.530 --> 00:02:53.560
are inherent to Google Wave the product as
opposed to sort of the Wave Federation Protocol,

00:02:53.560 --> 00:02:57.830
and that's fine. Part of what we're trying
to do here is determine more used cases so

00:02:57.830 --> 00:03:07.770
we can draw that line of what is required
and what is not required. So, from one example

00:03:07.770 --> 00:03:14.790
on that, there is operational transform. So
clearly, having consistency between one wave

00:03:14.790 --> 00:03:20.280
of server and another wave of server, the
UT algorithm used to be the same. But, I don't

00:03:20.280 --> 00:03:25.930
know who's remembering the way that Spelly
and Linky work inside Google Wave of product

00:03:25.930 --> 00:03:30.650
but those are agents that are just features
we've decided to build for Google Wave users.

00:03:30.650 --> 00:03:35.290
But clearly, having the same spell correction
is not required by our Wave providers. So

00:03:35.290 --> 00:03:39.910
these are kinds of things that as we get more
used cases, we can figure out exactly what

00:03:39.910 --> 00:03:43.100
are those lines are. Those two examples are
fairly straightforward. They are clearly ones

00:03:43.100 --> 00:03:47.930
that are less straightforward. So, the other
point of Wave Federation is it's always been

00:03:47.930 --> 00:03:53.299
the design so that you can have--so that the
Wave Feder can have complete control. So there's

00:03:53.299 --> 00:03:57.750
a Wave itself is a hosted concept. And Jochen
will get a lot more into this. But there's

00:03:57.750 --> 00:04:02.160
a concept of sort of local and foreign users.
And this ends up boiling down to being much

00:04:02.160 --> 00:04:07.620
similar to SMTP in the sense that if you're
only dealing with local users, all the data

00:04:07.620 --> 00:04:12.540
stays there. And then from the open classification
perspective, you know, we published a draft

00:04:12.540 --> 00:04:16.730
last year, we're continuing to improve it
with input from the community as the used

00:04:16.730 --> 00:04:23.140
cases come up. So, where we from so far, so
we--last year we published these protocols

00:04:23.140 --> 00:04:28.311
in whitepapers. And then also in July, we
shipped FedOne. And FedOne is the sort of

00:04:28.311 --> 00:04:35.770
naÃ¯ve, "hello world" client server that then
federates over to other Wave providers. And

00:04:35.770 --> 00:04:41.030
so, the idea there was to just encourage people
to prototype and play around with the protocol.

00:04:41.030 --> 00:04:45.090
However, we didn't get how to port live and
so, little bit later on, I think it was run

00:04:45.090 --> 00:04:49.400
on November, we opened up the Federation port
sort of experimentally on Wave Sandbox to

00:04:49.400 --> 00:04:53.490
really let people take their FedOne instances,
instead to just talking to each other, they

00:04:53.490 --> 00:04:58.680
can talk to Wave Sandbox. And so, they can
use the Google Wave Client and talk over to

00:04:58.680 --> 00:05:08.280
FedOne. So today, we're working really hard
to open source more code. So we're deep in

00:05:08.280 --> 00:05:14.590
the middle of working to wrap up open sourcing
nearly 100,000 lines more of code. And the

00:05:14.590 --> 00:05:21.230
point there is it actually includes a fairly
significant trunk of our client. So the Rich

00:05:21.230 --> 00:05:27.010
Text Editor, you may of heard about this in
a keynote, the Rich Text Editor is one of

00:05:27.010 --> 00:05:28.669
the more difficult pieces to build because
of the cross-browser and firisys (ph) of that

00:05:28.669 --> 00:05:34.030
about nature. And the idea would be to wrap
that editor in a very, very, very simple Wave

00:05:34.030 --> 00:05:40.199
Client such that you can then have an open
source stack from the browser all the way

00:05:40.199 --> 00:05:43.730
down to the server at the bottom and then
federate that over to Wave Sandbox. So this

00:05:43.730 --> 00:05:51.419
is definitely a work in progress but we're
just telling you, give you the latest basically.

00:05:51.419 --> 00:05:55.190
So to look at where we've come from a slightly
different angle, the set of Wave providers

00:05:55.190 --> 00:05:58.480
that have sort of popped up in the various
community projects, and companies that are

00:05:58.480 --> 00:06:02.700
getting involved. So certainly Novell Pulse
towards the end of the year, last year came

00:06:02.700 --> 00:06:06.889
out and started sort of working with the Wave
Federation in Protocol. And there's QWave

00:06:06.889 --> 00:06:11.840
which is a C++ client. PyGoWave actually started
as a gadget development toolkit but its turn

00:06:11.840 --> 00:06:16.210
into more of a federated provider. So it's
interesting to see the evolution there. Ruby

00:06:16.210 --> 00:06:19.700
on Sails, what it comes down to is sort of
like whatever language you like, there's probably

00:06:19.700 --> 00:06:23.300
a product out there that you could probably
play with. ARWave is actually more, more of

00:06:23.300 --> 00:06:28.910
a domain's specific use for the federation
protocol for augmented reality. But today,

00:06:28.910 --> 00:06:33.750
as you may have heard about the keynote, SAP
StreamWork is also getting involved with the

00:06:33.750 --> 00:06:39.820
Wave Federation Protocol to let users of one
system work with users on Google Wave and

00:06:39.820 --> 00:06:43.850
other systems. And then, there's also ProcessOne,
is working on OneWave. And their--both all

00:06:43.850 --> 00:06:50.509
these companies are demoing in a Wave Developer
Sandbox as well. So, that's the highlight

00:06:50.509 --> 00:06:54.790
of the background. Where we're headed, there
are really three points; improving the specs.

00:06:54.790 --> 00:06:58.990
Improving those specs such that we're able
to ship the wave of protocol federation port

00:06:58.990 --> 00:07:04.610
open on googlewave.com and then building a
production quality reference implementation.

00:07:04.610 --> 00:07:09.009
The idea is that maybe they should keep improving
on FedOne, the code we're working to open

00:07:09.009 --> 00:07:13.030
source right now, as well as the next stage
such that you can really get out there and

00:07:13.030 --> 00:07:17.610
have a production quality reference open source
implementation. And with that, I'd like to

00:07:17.610 --> 00:07:20.800
bring up Jochen to go deeper into the Federation
architecture.

00:07:20.800 --> 00:07:29.259
&gt;&gt; BECKMANN: Right, thanks Dan. Hi, everyone.
I'll give you a brief overview of architecture.

00:07:29.259 --> 00:07:34.860
Hopefully, some of you would have already
looked at the wave protocol website, maybe

00:07:34.860 --> 00:07:42.990
know some of these concepts better. But bear
with me, I'll try and get to this quickly.

00:07:42.990 --> 00:07:47.520
So, are you familiar with the regular client
view? And what you generally call a wave is

00:07:47.520 --> 00:07:58.020
basically the Wave panel with sometimes private
replies if you ever created private replies

00:07:58.020 --> 00:08:09.150
being in lined. Now, conceptually, waves are
actually sets of wavelets. And a wavelet is

00:08:09.150 --> 00:08:18.840
basically an XML or sets of XML documents
that have separate participant lists. So you'll

00:08:18.840 --> 00:08:28.380
see here, for example, one wavelet has a separate
participant list from the private reply here.

00:08:28.380 --> 00:08:33.889
And wavelets are composed entirely of operations.
So the history of the wavelet consists of

00:08:33.889 --> 00:08:39.899
series of operations. And these operations
are packaged together in an envelope which

00:08:39.899 --> 00:08:47.959
we use for transmitting between servers and
client-in server, which we call Deltas. And

00:08:47.959 --> 00:08:57.249
operations are given a version number. So
Deltas span a series of versions. And as part

00:08:57.249 --> 00:09:05.899
of the client-server protocol is the negotiation
of each client state. And these version numbers

00:09:05.899 --> 00:09:17.930
allow you to determine a way to apply a Delta.
And the wave is the unit of access control

00:09:17.930 --> 00:09:20.110
and concurrency control. Concurrency control
meaning that whenever you make a change to

00:09:20.110 --> 00:09:26.129
a wavelet that can only happen concurrent
or automatically on one wavelet. So you cannot

00:09:26.129 --> 00:09:34.009
expand multiple wavelets. And a Delta is authored
by one of the participants on that wavelet.

00:09:34.009 --> 00:09:42.990
And here, I'll show you this pictorially by
having the participant in the tip of the Delta.

00:09:42.990 --> 00:09:50.019
So we have a quick look at interactions between
different clients and the Wave server. Each

00:09:50.019 --> 00:09:58.550
wave is owned by one wave server only. And
that wave server's the authority over at the

00:09:58.550 --> 00:10:05.540
history of Delta applications to that wavelet.
And here we have three Web Clients. What you

00:10:05.540 --> 00:10:14.550
see here in red is the two left Web Clients
trying to apply Deltas to a wavelet and the

00:10:14.550 --> 00:10:20.350
wave server determines in which order they
are to be applied. And the dotted line shows

00:10:20.350 --> 00:10:26.589
the acknowledgment coming back from the wave
server where the clients have attempted a

00:10:26.589 --> 00:10:31.370
submission, we call them submit. And here
we have an acknowledgement for that submit

00:10:31.370 --> 00:10:37.379
for the client on the left, it gets version
number 1. The client in the middle will get

00:10:37.379 --> 00:10:42.769
version number 6 because there are 5 operations
and the first Delta that got applied. At this

00:10:42.769 --> 00:10:47.709
time, you'll see the green arrows which are
updates, which I'll send to you all listening

00:10:47.709 --> 00:10:55.129
clients. So the client on the far right gets
the Deltas simply streamed and the ones on

00:10:55.129 --> 00:11:02.709
the left, they get the Deltas that, updates
that where not issued by that client. Both

00:11:02.709 --> 00:11:07.939
clients are responsible, both clients and
servers are responsible for doing operation

00:11:07.939 --> 00:11:13.230
of transformation. And if you want to see
more of the details of how the operational

00:11:13.230 --> 00:11:19.149
transformation and concurrency control works
there's a link here at the bottom of the slide

00:11:19.149 --> 00:11:26.639
to a talk that we've published last year which
will go into the nitty-gritty detail. Hopefully,

00:11:26.639 --> 00:11:34.290
it'll be interesting. So next I'll give you
an overview of the federated case. Here we've

00:11:34.290 --> 00:11:41.110
got two Web Clients. The ones on the left
are production Web Clients. And the simple

00:11:41.110 --> 00:11:51.319
client on the right is the client that we've
released in Code-2, hopefully, today and tomorrow.

00:11:51.319 --> 00:11:59.470
And this talks to the FedOne which is the
open source wave server that we released last

00:11:59.470 --> 00:12:04.269
year. Between the two wave servers, we have
the Federation Protocol. And that protocol

00:12:04.269 --> 00:12:13.279
deals with the transport of wavelets of Deltas.
And that allows the whole architecture to

00:12:13.279 --> 00:12:20.519
work and to have a distributed network of
wave servers that talk to each other. If you're

00:12:20.519 --> 00:12:26.309
here to find out about how you can extend
wave, there's basically five ways in which

00:12:26.309 --> 00:12:32.639
you can extend wave. The first one, you probably
are quite familiar with, these gadgets and

00:12:32.639 --> 00:12:40.439
these robots, they would do talks at Google
I/O this year. The first one has already happened,

00:12:40.439 --> 00:12:45.899
that was this morning. The second talk is
tomorrow, gadgets and robots are basically

00:12:45.899 --> 00:12:55.379
the gadgets to our client side or mostly client
side extensions, robots a combination of client

00:12:55.379 --> 00:13:01.079
side and back-end. So those are separate APIs
and they've don't really have to do with Federation

00:13:01.079 --> 00:13:09.040
at this point. The next way you might extend
wave as its stands is the open source client,

00:13:09.040 --> 00:13:17.299
can be extended. So one could take the Editor
and the client-server protocol embedded in

00:13:17.299 --> 00:13:25.189
your own client. And then, off you go and
hopefully, we'll see some interesting ones.

00:13:25.189 --> 00:13:32.329
And I've already seen very, very different
implementations for how we see waves. So,

00:13:32.329 --> 00:13:42.260
we hope that points the way of using wave
protocol as a basis for all kinds of platforms.

00:13:42.260 --> 00:13:49.970
The FedOne server as we've released it has
a fledgling Agent API. This will hopefully

00:13:49.970 --> 00:13:55.649
eventually converge to what we have in our
production service, the robot APIs as we call

00:13:55.649 --> 00:14:04.670
them. And we've got a few agents already implemented
and this might be another way in which you

00:14:04.670 --> 00:14:15.699
can interact in with wave. The same API can
be used to bolt on a gateway. So this gateway

00:14:15.699 --> 00:14:20.699
would be translating between your system,
whatever your back-end system is, and the

00:14:20.699 --> 00:14:26.989
FedOne Wave server. And something similar
would be to embed the entire wave server as

00:14:26.989 --> 00:14:32.009
we've release it in your own system. And in
both of these two cases, you want to make

00:14:32.009 --> 00:14:38.949
sure that whatever object you're presenting,
usually documents and changes to those documents,

00:14:38.949 --> 00:14:47.549
map fairly cleanly to the operation of transformation
model. So you've got operations modifying

00:14:47.549 --> 00:14:55.009
wavelets and that you can express whatever
these objects are that you're modifying in

00:14:55.009 --> 00:14:59.410
the paradigm move waves and wavelets. Right,
and with that, I'll hand it over to J.D.

00:14:59.410 --> 00:15:07.130
&gt;&gt; ZAMFIRESCU: Thanks. So, we're super excited
today to be announcing the open sourcing of

00:15:07.130 --> 00:15:18.449
a bunch of new components of Google Wave,
mostly on the client side. We've got a Rich

00:15:18.449 --> 00:15:24.810
Text Editor which Dan mentioned earlier, is
the actual editor that we use on our client.

00:15:24.810 --> 00:15:30.310
We've got more model code. We'd previously
released a sort of stripped down version of

00:15:30.310 --> 00:15:36.199
the model that we used in FedOne. And we've
expanded on that significantly and I'll talk

00:15:36.199 --> 00:15:40.559
about that a little bit. We have a concurrency
control stack which implements some model

00:15:40.559 --> 00:15:46.600
interfaces in such a way that there are changes
that are propagated into the server. And also

00:15:46.600 --> 00:15:55.179
transform operations against each other so
that the client remains consistent in the

00:15:55.179 --> 00:15:59.709
face of intervening operations from the server.
And finally, we have a WebSocket JSON protocol

00:15:59.709 --> 00:16:05.240
that we released a couple of weeks ago and
are fleshing out today. And we hope we'll

00:16:05.240 --> 00:16:13.160
be pushing into our repository later, later
today. So just a brief overview, the Wave

00:16:13.160 --> 00:16:18.199
model consists of several different components.
There's a document model which contains its

00:16:18.199 --> 00:16:22.540
several representations of an actual document.
As you may know our documents are sort of

00:16:22.540 --> 00:16:25.809
canonically represented by XML and some of
them have constraints on them, things like

00:16:25.809 --> 00:16:34.670
blips in the conversation model if you're
familiar. We also have a complete conversation

00:16:34.670 --> 00:16:41.970
model that builds on top of that. We have
more wavelet and blip interfaces and implementations.

00:16:41.970 --> 00:16:47.290
We have more operations on documents and waves.
Operations like add participant, manipulations

00:16:47.290 --> 00:16:52.839
of blip, changing of content, that kind of
thing. Also, we have a concurrency control

00:16:52.839 --> 00:16:57.460
stack. Now, this in addition to having channels
that communicate with the actual wave servers,

00:16:57.460 --> 00:17:01.730
they also have a client implementation for
flow controls. This is a component that restricts

00:17:01.730 --> 00:17:07.170
the number of operations you can send. It
also allows incoming operations to be transformed

00:17:07.170 --> 00:17:13.630
against outgoing operations that everything
stays in sync. It also implements Wave interfaces

00:17:13.630 --> 00:17:21.699
to help you actually interface with our wave
server for FedOne, and finally, the Rich Text

00:17:21.699 --> 00:17:26.320
Editor, which I won't be talking too much
about today. So just to give a little overview

00:17:26.320 --> 00:17:32.380
of the model, the main component here is the
WaveView which consists of several different

00:17:32.380 --> 00:17:38.480
wavelet data instances, each of those contain
several blips. They're interact with concurrency

00:17:38.480 --> 00:17:42.920
control by receiving operations that change
them and they send events back to concurrency

00:17:42.920 --> 00:17:49.330
control which then packages them in Deltas
since sends them to and from the wave server.

00:17:49.330 --> 00:17:54.750
Concurrency control has some model component
which is the part that actually does the transformations

00:17:54.750 --> 00:18:00.310
and it sends operations through a multiplexer,
through a stacklet and a few other components

00:18:00.310 --> 00:18:08.280
before actually sending Deltas down to the
server. So, just to give a little bit of an

00:18:08.280 --> 00:18:13.970
example, here's how to create a wave. So if
you've got your editor hook up to a Wave manager

00:18:13.970 --> 00:18:16.850
and concurrency control connected to a wave
server, and we've got an implementation of

00:18:16.850 --> 00:18:23.120
this that we would be pushing out later today
or tomorrow. To create, you create a new editor

00:18:23.120 --> 00:18:26.860
by sending a create request, the wave server
replies to that create request and the concurrency

00:18:26.860 --> 00:18:34.901
control creates a new wavelet, a new blip,
a new editor from the Wave manager and the

00:18:34.901 --> 00:18:39.430
Editor then hooks up its document to the document
that's generated by the concurrency control

00:18:39.430 --> 00:18:45.200
stack. And then, from that point on, edits
to the Editor will flow through the content

00:18:45.200 --> 00:18:49.680
document and down through concurrency control,
whether buffered if necessary, and transformed

00:18:49.680 --> 00:18:55.410
and then down into the wave server. Yes. And
the wave serve itself then communicates with

00:18:55.410 --> 00:19:02.300
other wave servers if necessary as Jochen
will tell us about.

00:19:02.300 --> 00:19:09.730
&gt;&gt; BECKMANN: All right. In federation protocol
as we said is a server-to-server protocol.

00:19:09.730 --> 00:19:15.550
It's designed as such. So some people have
tried using it as a client-server protocol,

00:19:15.550 --> 00:19:20.370
I don't recommend that. That's what client-server
protocol is for. And fortunately, we'll be

00:19:20.370 --> 00:19:25.460
releasing that code, so that's good. It allows
you to run your own wave service. As I pointed

00:19:25.460 --> 00:19:33.320
out, you can even, you know, roll your own
extended wave, the wave technology, to whatever

00:19:33.320 --> 00:19:39.520
you intend using it for, and we'll see some
great demos for that later today. The protocol

00:19:39.520 --> 00:19:44.710
spec that we released last year is available
at waveprotocol.org. So hopefully, some of

00:19:44.710 --> 00:19:53.530
you will have a look there, there's some whitepapers,
some really good contributions by other developers

00:19:53.530 --> 00:19:59.971
for how the nitty-gritty of this operation
in transformation and Federation works, so

00:19:59.971 --> 00:20:07.420
please have a look. The protocol is based
on XMPP. We released it last year in July.

00:20:07.420 --> 00:20:15.370
And the operation in transformation and concurrency
control that we used for the Federation protocol

00:20:15.370 --> 00:20:23.510
and in the server that we released, and in
the client that we're releasing, is the same

00:20:23.510 --> 00:20:26.830
as what we have in production. And there are
some interesting optimizations that we made

00:20:26.830 --> 00:20:30.290
to make it particularly suited to low-latency
updates. So, you know, when you see concurrent

00:20:30.290 --> 00:20:36.870
editing and things like that, we've optimized
it. So there are some features which are quite

00:20:36.870 --> 00:20:44.700
interesting like commit messages, two-face
commits things like that. That's--we won't

00:20:44.700 --> 00:20:50.830
be going into too much detail today but it's
something that you might want to keep in mind.

00:20:50.830 --> 00:20:57.231
All right. So, let's give it--let's have a
quick walkthrough to an example, to give you

00:20:57.231 --> 00:21:06.020
a feel for what a protocol looks like. Again,
we won't have time to do a deep dive but I

00:21:06.020 --> 00:21:12.960
hope this will be sufficient. Here we've got
one wavelet. You might be able to read here

00:21:12.960 --> 00:21:19.270
the wavelet ID which is in the top here. And
the wavelet ID contains a domain name. And

00:21:19.270 --> 00:21:25.160
that domain name determines which wave server
owns this wavelet. So in this case, it's the

00:21:25.160 --> 00:21:34.600
FedOne Wave server on the right, and that
is because it's the IniTech Corp Wave server,

00:21:34.600 --> 00:21:37.700
and they speak to their respective clients.
So we've got on the right here the Simple

00:21:37.700 --> 00:21:45.680
Client, and on the left, our production client.
Both clients have modified the wave and so

00:21:45.680 --> 00:21:51.610
the state here is both the clients have modified
the wavelet by adding a participant. They've

00:21:51.610 --> 00:21:58.890
added different participants, so Anthony here
on the left and public on the right. And they've

00:21:58.890 --> 00:22:07.000
submitted Deltas to their respective wave
service and the next step will be to see what

00:22:07.000 --> 00:22:15.650
happens. So, the wave server on the left is
proxying wave server. It's--we call it our

00:22:15.650 --> 00:22:21.900
Remote Wave server because it doesn't own
the wavelet. The wavelet on the right here

00:22:21.900 --> 00:22:28.230
is the Authorative Wavelet because it lives
on the IniTech Corp Wave server. Therefore,

00:22:28.230 --> 00:22:35.430
what the wave server on the left does is merely
forwards that Delta to the owning wave server.

00:22:35.430 --> 00:22:40.940
And what's interesting about the Federation
protocol is we've build some security features

00:22:40.940 --> 00:22:54.480
into it. So, it's signed here with X.509 signature
and by the owning or by the domain that has

00:22:54.480 --> 00:23:00.630
a client making those changes. So in this
case, the serve for echowave.com is used for

00:23:00.630 --> 00:23:07.401
signing. The Federation protocol also has
what we call the history hash, which is a

00:23:07.401 --> 00:23:14.380
SHA256 running hash over all the Deltas that
went into the wavelet. So at any point you

00:23:14.380 --> 00:23:19.120
can verify the state and the history, and
that all the wave servers agree about what

00:23:19.120 --> 00:23:26.270
that history is. And it's actually also used
for authentication, so if you look at the

00:23:26.270 --> 00:23:32.850
detailed protocol spec, you'll hopefully find
this quite exciting because when we first

00:23:32.850 --> 00:23:38.350
pitched this, people thought it's fantastic
because an email and many other communications,

00:23:38.350 --> 00:23:47.060
this sort of stuff was not built in. So our
security folks were really thrilled. All right,

00:23:47.060 --> 00:23:54.160
so, on the right-hand side, we've got a Delta
that could applied, this is adding the public

00:23:54.160 --> 00:24:03.340
participant. And this got immediately applied,
so you can see the Authoritative Wave down

00:24:03.340 --> 00:24:08.060
here has that participant added. That Delta
is also assigned and it's forwarded to anyone,

00:24:08.060 --> 00:24:13.890
any of the wave service that are interested,
so in this case, this wave server because

00:24:13.890 --> 00:24:22.090
there is a participant here on that wavelet
that is from the echo wave domain. And it

00:24:22.090 --> 00:24:28.810
so happens, I just drew some other wave server
that might be listening. And you might also

00:24:28.810 --> 00:24:36.120
note that the wavelet on the left here, which
is the copy wavelet, has not changed because

00:24:36.120 --> 00:24:41.610
this Delta has not been applied yet. And this
Delta is only applied by this server and not

00:24:41.610 --> 00:24:51.890
by this server, so nothing has changed on
the left. Finally, this--the Delta that came

00:24:51.890 --> 00:24:59.760
from the echo wave server got applied by the
IniTech Wave server the one on the right.

00:24:59.760 --> 00:25:12.190
And it's been updated here and the Delta is
echoed back to this wave server, and it also

00:25:12.190 --> 00:25:14.274
applied the previous Delta so that's Delta
is updated. And the clients all received the

00:25:14.274 --> 00:25:20.660
updates as for the client-server protocol
that I showed you earlier. And importantly,

00:25:20.660 --> 00:25:26.250
this acknowledgment, which was an acknowledgment
for the submit that we saw here, so this was

00:25:26.250 --> 00:25:32.481
the submit and this is acknowledgment for
that submit, which is forwarded by this wave

00:25:32.481 --> 00:25:40.760
server again acting as a proxy and is forwarded
to that client. All right, so, there's 4 basic

00:25:40.760 --> 00:25:47.180
messages in the federation protocol, three
of which--or two of which I, you know, explained

00:25:47.180 --> 00:25:55.730
which are submits and updates. The two other
important ones are history request and response,

00:25:55.730 --> 00:26:01.081
which is if a wave server receives a Delta
at a version that is not version 0 and it

00:26:01.081 --> 00:26:07.550
hasn't seen anything about this wavelet before,
it can turn around to the hosting wave server

00:26:07.550 --> 00:26:19.920
and request the history from, in a version
range. To do that, it needs to furnish the

00:26:19.920 --> 00:26:22.490
history of the request which is the authentication
mechanism I mentioned earlier. And it will

00:26:22.490 --> 00:26:25.610
then be furnished with those Deltas that can
be applied, and hopefully the wave server

00:26:25.610 --> 00:26:33.080
will be able to apply the Delta that have
received because of now has the full history

00:26:33.080 --> 00:26:40.830
of that wavelet. Find an information request
and response is related to the signing that

00:26:40.830 --> 00:26:47.830
I've mentioned earlier, where a certificate
can be requested from the wave server that

00:26:47.830 --> 00:26:56.280
signed the Delta. The wave server that host
the wavelet has to keep all the certificates

00:26:56.280 --> 00:27:04.880
for the wavelet that it has authority over
and these certificates are collected when

00:27:04.880 --> 00:27:13.110
other wave service submit Deltas to it. And
this so for the other wave service to go away,

00:27:13.110 --> 00:27:19.480
anyone can still verify that those Deltas
were authored by the domains that they claim

00:27:19.480 --> 00:27:26.230
to be. So finally what do we still need in
the Federation protocol to make it match what

00:27:26.230 --> 00:27:35.520
we have in production? Firstly, the protocol
is a push protocol. We currently don't have

00:27:35.520 --> 00:27:40.490
a mechanism by which you do reliable delivery,
which means if you lose updates and wavelets

00:27:40.490 --> 00:27:44.670
go dead there's no periodic attempt to contact
remote wave servers and tell them that there

00:27:44.670 --> 00:27:54.661
might be something interesting for them, so
we're hoping to add that very soon. And we

00:27:54.661 --> 00:28:01.610
also have federated attachments; we have the
spec out there or a whitepaper which will

00:28:01.610 --> 00:28:09.240
allow you to have the attachments shared between
the servers. So currently we have that obviously

00:28:09.240 --> 00:28:14.880
in the production client and the production
wave server, and once we can share that over

00:28:14.880 --> 00:28:22.120
the federated protocol, we'll have full support
in Federation there. Groups, federated groups,

00:28:22.120 --> 00:28:31.400
we have a whitepaper that is part of the access
control whitepaper on the site. We have a

00:28:31.400 --> 00:28:35.840
fairly good idea of how that's implemented
and hopefully, we'll be implementing that

00:28:35.840 --> 00:28:44.550
in the coming months. And finally, federated
presents, we have some designs on that and

00:28:44.550 --> 00:28:52.120
hopefully, you'll see that in the next few
months as well. So for all of these forthcoming

00:28:52.120 --> 00:29:00.670
attractions, we will be trying to put specs
out on the protocol Google group, that's been

00:29:00.670 --> 00:29:06.470
a very good source of discussion and input
from people in the community, practically

00:29:06.470 --> 00:29:11.530
XMPP folks who in some cases know more than
us wave guys about the ins and outs and some

00:29:11.530 --> 00:29:21.990
of the paradigm of how to do things in XMPP
have. So that will be quite cool to hear back

00:29:21.990 --> 00:29:28.620
from the community on that. So more documentation
on the federation protocol, on the protocol

00:29:28.620 --> 00:29:35.610
side; the code lives on Google Code. There's
some great contributions by some folks like

00:29:35.610 --> 00:29:41.590
Anthony Watkins, James Purser and Bryce that
we posted on further reading. And there's

00:29:41.590 --> 00:29:46.860
other stuff on the, on the Google group so
please have a look. And, yeah, hopefully,

00:29:46.860 --> 00:29:50.029
we'll federating with you before long. Cool.
And with that, J.D.

00:29:50.029 --> 00:29:59.570
&gt;&gt; ZAMFIRESCU: Thanks. So one final thing
that we're going to talk a little bit about

00:29:59.570 --> 00:30:08.360
before we do a little few demos is our client-server
protocol that we recently released. Now as

00:30:08.360 --> 00:30:12.510
Jochen mentioned the Federation protocol is
relatively similar to the production client-server

00:30:12.510 --> 00:30:18.150
protocol that we use. Well, this client-server
protocol that we released recently is also

00:30:18.150 --> 00:30:24.710
very similar to that Federation protocol and
that you can think of it as a little bit of

00:30:24.710 --> 00:30:27.470
a stripped down version, a slightly less functionalities,
slightly less functionality is needed. So

00:30:27.470 --> 00:30:33.460
it's a protocol for receiving and submitting
changes on a particular wavelet. And it uses,

00:30:33.460 --> 00:30:37.809
the one that we're releasing today, uses a
web socket transport with JSON encoded protobuffer-style

00:30:37.809 --> 00:30:43.720
messages. And all I mean by protobuffer-style
messages is that they're actually just keyed

00:30:43.720 --> 00:30:53.320
by numbers instead of typical JSON style where
you string key names. So to send an update

00:30:53.320 --> 00:30:58.400
from the client to the server, the client
simply combines its outstanding operations

00:30:58.400 --> 00:31:05.440
into a protocol wavelet Deltas. Puts that
Deltas into a protocol submit request and

00:31:05.440 --> 00:31:14.470
sends it to the server. The server simply
replies with the protocol submit response

00:31:14.470 --> 00:31:18.940
that indicates how many of the operations
it sent were applied and whether there was

00:31:18.940 --> 00:31:23.380
any error. Receiving updates is slightly more
complicated. You send a protocol open request

00:31:23.380 --> 00:31:34.840
with the wave id that you're looking for.
Now remember, wave id consists of multiple

00:31:34.840 --> 00:31:46.410
wavelets so you can also specify a prefix
for all the wavelets that you're interested

00:31:46.410 --> 00:31:58.580
in. So if you're only interested in a particular
wavelet you can specify the given prefix and

00:31:58.580 --> 00:32:16.890
only get those, the ones that match and to
assist with. In the case where the connection

00:32:16.890 --> 00:32:27.330
drops, were you can--the client can also send
a list of known snapshot versions. So for

00:32:27.330 --> 00:32:38.830
every wavelet id that it already has on the
client, they can send the most recent version

00:32:38.830 --> 00:33:15.450
that it seems from the server and then the
server will respond only with changes that

00:33:15.450 --> 00:33:39.679
have happened since that point. This is to
prevent the server from needing to resend

00:33:39.679 --> 00:34:14.819
a whole large amount of data. So the client
then receives a protocol wavelet update which

00:34:14.819 --> 00:34:23.220
contains snapshots for any wavelets that already
exists in the Wave. And then beyond that it

00:34:23.220 --> 00:34:29.549
receives updates Deltas for any changes to
those waves subsequent--to those wavelets

00:34:29.549 --> 00:34:42.399
subsequent to the request, to the snapshots.
So to do a little bit of a timeline view,

00:34:42.399 --> 00:34:56.399
you send a protocol open request, you receive
a snapshot back, you receive a marker indicating

00:34:56.399 --> 00:35:08.549
the snapshots are done and then you receive
a series of Deltas with changes. Okay. So

00:35:08.549 --> 00:35:32.039
now we are hoping to do a few demos. So I'll
start this off with a demo of the client-server

00:35:32.039 --> 00:35:35.460
protocol that we've been working on. So if
I can get this working, let's see. So over

00:35:35.460 --> 00:35:54.180
on the left I've got Wave Sandbox which presumably
some of you at least are familiar with here.

00:35:54.180 --> 00:36:09.809
Yes, thank you. Ta-dah! So now let's see if
I can get this on the left. Let's try something

00:36:09.809 --> 00:36:32.059
different. Okay, so we have a Googler in New
York under Hyatt who is a very big e-max enthusiast

00:36:32.059 --> 00:36:47.910
and he graciously wrote a plug-in for e-max,
or an extension for e-max that actually receives

00:36:47.910 --> 00:37:06.119
updates live. So if this is still connected.
You'll see that it's a little slower having

00:37:06.119 --> 00:37:12.609
some network connectivity problems but hopefully
this will actually propagate all the way through.

00:37:12.609 --> 00:37:16.899
Well, maybe not. Ah, yeah. So it's possible
that...

00:37:16.899 --> 00:37:23.359
&gt;&gt; We blame the network.
&gt;&gt; ZAMFIRESCU: We blame the network. Well,

00:37:23.359 --> 00:37:45.619
this is working good here, I promise. We were
also hoping to show you a demo of our simple

00:37:45.619 --> 00:37:50.800
web client which unfortunately, despite many
long hours in same contributions by Bob Vawter

00:37:50.800 --> 00:37:58.730
and Anthony Baxter, well, we cannot show you.
But this is code that we will be pushing live.

00:37:58.730 --> 00:38:04.819
Where by live, I mean into our open source
repository at waveprotocol.org very, very

00:38:04.819 --> 00:38:11.640
soon, as soon as we iron out these few last
bugs, and it is very exciting. So if you are

00:38:11.640 --> 00:38:16.690
a developer and you are interested in having
your own Wave client you can use our, sort

00:38:16.690 --> 00:38:20.069
of, simple Wave client to see how to hook
up to various components of the Editor and

00:38:20.069 --> 00:38:31.760
the CC stack and all that together to actually
get a functional set-up done once we figure

00:38:31.760 --> 00:38:42.339
out how to do that as well. I'm just kidding.
Yes, so with that I'll pass it on to some

00:38:42.339 --> 00:38:44.319
Federation demos. Thanks.
&gt;&gt; I'm hoping for some better luck.

00:38:44.319 --> 00:38:49.440
&gt;&gt; PETERSON: Alrighty. So we going to do some
split screen here. As Rob Horne, our product

00:38:49.440 --> 00:38:53.280
manager--product owner on SAP StreamWork.
&gt;&gt; HORNE: Hello everyone. We're really excited

00:38:53.280 --> 00:38:58.790
about this. We're going to be showing you
our new free product. And maybe you can sign-up

00:38:58.790 --> 00:39:07.990
for today, for SAP StreamWork. And it's a
tool to help you make decisions in your everyday

00:39:07.990 --> 00:39:18.020
work. So I'll be kind of hiding back here
and I'm going to--great, you can see me there.

00:39:18.020 --> 00:39:25.039
&gt;&gt; PETERSON: That's great.
&gt;&gt; HORNE: So I have SAP StreamWork over here,

00:39:25.039 --> 00:39:37.859
we've got Google Wave over here. And when
I create a new activity, we're not going to

00:39:37.859 --> 00:39:56.940
go too much into too much storyline. But I'm
actually creating a new activity for the demo

00:39:56.940 --> 00:40:19.880
here. And--oops! That was a brick. Okay, so
I'm going to quickly add a--are we all right

00:40:19.880 --> 00:40:21.829
over there?
&gt;&gt; Just a second.

00:40:21.829 --> 00:40:32.079
&gt;&gt; PETERSON: Macintosh is a new [INDISTINCT].
&gt;&gt; HORNE: While they're figuring that out,

00:40:32.079 --> 00:40:41.800
I'm going to--so the activity purpose we would
put in here, I would say "Hey, Dan we need

00:40:41.800 --> 00:40:48.309
to work on this together." Okay. So in StreamWork
you can invite anyone into a decision activity

00:40:48.309 --> 00:40:56.420
whether in your organization or not. In here
I'm going to go ahead and have Dan and he

00:40:56.420 --> 00:41:12.410
happens to be a Wave Sandbox user. So instead,
of him coming in and working in the activity

00:41:12.410 --> 00:41:18.479
inside the StreamWork which would usually
what would happen. He should see, hopefully,

00:41:18.479 --> 00:41:31.539
something in his Wave inbox and says, "Hey,
there's an activity and we want to work on

00:41:31.539 --> 00:41:34.789
it together." Okay.
&gt;&gt; PETERSON: So glad I didn't open that.

00:41:34.789 --> 00:41:43.299
&gt;&gt; HORNE: Well, before he goes crazy. I'm
just going to add a comment here and say,

00:41:43.299 --> 00:41:59.150
"Can you help me with this?"
&gt;&gt; PETERSON: So one thing to point out there

00:41:59.150 --> 00:42:09.079
is you'll notice that that did not stream
in character by character. And other thing

00:42:09.079 --> 00:42:14.789
to point out is that previously we have talked
about draft mode when we're creating blips

00:42:14.789 --> 00:42:28.249
in doing entries in Google Wave. You can,
sort of, think about this as, as if it shows

00:42:28.249 --> 00:42:43.170
to implement auto draft mode for blip creation
whereas we chose the other Wave for now. Clearly,

00:42:43.170 --> 00:42:54.810
draft mode is something we want to have in
Google Wave, but we haven't done it yet. But

00:42:54.810 --> 00:42:59.199
this again shows differences that still work
on protocol.

00:42:59.199 --> 00:43:07.910
&gt;&gt; HORNE: Now I actually happened to be logged
in as Joseph. Who's the developer who made

00:43:07.910 --> 00:43:15.819
all this happen so that's not me but are always
me. So Dan's going to comment back here and

00:43:15.819 --> 00:43:28.440
you can see it, if you can see it on my side
he actually is coming in character by character.

00:43:28.440 --> 00:43:58.979
So we're really excited about that. And so
I'll just ask Dan and say, "Can you go back

00:43:58.979 --> 00:44:12.079
into the blip where I say, 'Hey Dan, can you
go and edit some of the content of that?'

00:44:12.079 --> 00:44:38.619
So we can start to work on this document or
whatever it is that we are working out together."

00:44:38.619 --> 00:44:50.989
And you should see on my screen sometimes
it's character by character really fast and

00:44:50.989 --> 00:45:12.079
sometimes it's--Oh, there he is! Maybe a bit
of a jumpy there. So what we're really working

00:45:12.079 --> 00:45:20.950
together here, he's--we've made some comments
to each other back and forth. He's added the

00:45:20.950 --> 00:45:27.950
document; you can imagine this was an important
document about our partnership. But we're

00:45:27.950 --> 00:45:37.029
not going to get in to that too much right
now. Now in SAP StreamWork we provide you

00:45:37.029 --> 00:45:48.730
with the set of tools to help you get your
work done. And in here I'm going to go in

00:45:48.730 --> 00:46:02.930
to the deciding category and we happen to
have a very simple tool which we all use pro-cons

00:46:02.930 --> 00:46:27.190
on a few options. I'm going to add that, very
much likely you would see in a widget or gadget

00:46:27.190 --> 00:46:36.099
in Wave. And I'm just going to quickly type
in option one enter...

00:46:36.099 --> 00:46:47.150
&gt;&gt; PETERSON: And you'll see as Rob is typing
his options in, they show up on Wave Sandbox

00:46:47.150 --> 00:46:57.069
as well, using Federation as well as the similar
specs with guided APIs.

00:46:57.069 --> 00:47:08.250
&gt;&gt; HORNE: Okay. So Dan notices, "Hey, you
forgot option three." So he's going to go

00:47:08.250 --> 00:47:22.000
quickly add that in. Enter.
&gt;&gt; PETERSON: And then we can go ahead and

00:47:22.000 --> 00:47:36.799
just, you know, add cons and add pros and
they will work just fine.

00:47:36.799 --> 00:48:01.160
&gt;&gt; HORNE: Okay. So I'm not fan of option three.
I did the one thing out, it's not so silly.

00:48:01.160 --> 00:48:15.299
Okay. Okay. And you should see it coming.
&gt;&gt; PETERSON: Indeed.

00:48:15.299 --> 00:48:29.569
&gt;&gt; HORNE: Okay. And we're just getting a little
bit off here. Oh, it's actually just come

00:48:29.569 --> 00:48:34.440
in.
&gt;&gt; PETERSON: Here we go. Yes.

00:48:34.440 --> 00:48:44.269
&gt;&gt; HORNE: So forgive the slowness of the updating,
a little bit of network issues we're having

00:48:44.269 --> 00:48:46.309
here. But you see them coming through and
the nice thing is, is his attributing that

00:48:46.309 --> 00:48:53.709
change to Joseph, or me, and I can see those
come through as well, so.

00:48:53.709 --> 00:49:05.829
&gt;&gt; PETERSON: Yeah. The idea here is that while
a Wave is a very interesting concept, a gadget

00:49:05.829 --> 00:49:13.349
is a pretty important piece to it, because
text is interesting. But having things like

00:49:13.349 --> 00:49:19.500
maps or things like pro-con tables either
written by the provider or written by third-party

00:49:19.500 --> 00:49:27.900
developers are very important, instead of
having a similar set of gadget APIs that still

00:49:27.900 --> 00:49:34.979
didn't federate across the various Wave writers
is very quite useful.

00:49:34.979 --> 00:49:39.630
&gt;&gt; HORNE: Right. So I'm just going to add
a comment here quickly and say, "Let's go

00:49:39.630 --> 00:49:42.420
with option two." And we're having now a conversation
about all the feedback we got in it, it comes

00:49:42.420 --> 00:49:53.760
in as an indented blip. So this is a POC that
we're really excited to work on. That really

00:49:53.760 --> 00:49:59.869
shows that we want to enable this kind of
communication to help get work done. SAP StreamWorks

00:49:59.869 --> 00:50:04.190
really focuses on specific thing around getting
decisions done and helping you have the right

00:50:04.190 --> 00:50:10.650
tools that we think is needed to get that
done. And we build in a lot of security in

00:50:10.650 --> 00:50:27.869
different things that you only want in the
enterprise and we can invite all those Wave

00:50:27.869 --> 00:50:42.180
people in there.
&gt;&gt; PETERSON: Yeah. So we get some more demos

00:50:42.180 --> 00:50:53.469
up our sleeves. Thank you. This is David LaPalomento
from Novell.

00:50:53.469 --> 00:51:05.000
&gt;&gt; LAPALOMENTO: Yes, hi. I am David LaPalomento.
I am a lead developer for the front end of

00:51:05.000 --> 00:51:11.819
Novell Pulse, which maybe you heard about,
but it's a next generation social messaging

00:51:11.819 --> 00:51:27.279
product that we're developing in Novell right
now. And basically, one of the primary goals

00:51:27.279 --> 00:51:37.640
of Novell Pulse when we get started was to
let you instantly communicate with people

00:51:37.640 --> 00:51:45.289
anywhere, whether, you know, they're your
friends or people in your team at work, in

00:51:45.289 --> 00:51:58.289
the different business unit or in another
corporation or organization. So

00:51:58.289 --> 00:52:08.140
it was natural fit to adopt the Wave protocol
and allow us, not only to do that sort of

00:52:08.140 --> 00:52:17.640
real time collaboration with Pulse, other
Pulse users, but also do that with other Wave

00:52:17.640 --> 00:52:35.250
protocol providers like we got google.com
or StreamWorks. So over here on the left for

00:52:35.250 --> 00:52:40.690
you guys we got the home screen for Novell
Pulse and on the far left hand side of that

00:52:40.690 --> 00:52:50.380
you'll going to see our navigation panel.
That's basically all the people in groups

00:52:50.380 --> 00:53:03.620
that you're following. So this is other Pulse
users and groups that are in the system. You

00:53:03.620 --> 00:53:10.099
build those up and then on the right hand
side that's basically an aggregation of all

00:53:10.099 --> 00:53:20.280
the communications, all the Waves that you've
had with those individuals and things that

00:53:20.280 --> 00:53:32.420
they've posted to their feeds for the public
consumption or direct communication that you've

00:53:32.420 --> 00:53:45.190
had with them. So Dan if you can jump into
Wave real quick.

00:53:45.190 --> 00:53:54.200
&gt;&gt; PETERSON: Sure.
&gt;&gt; LAPALOMENTO: We can actually send the message

00:53:54.200 --> 00:53:55.640
from Wave today and it should appear--assuming
that our network traffic works well almost

00:53:55.640 --> 00:53:56.770
spontaneously over on Pulse.
&gt;&gt; PETERSON: And which was easy. You want

00:53:56.770 --> 00:53:59.359
to send it to...
&gt;&gt; LAPALOMENTO: K. Childs I believe we got.

00:53:59.359 --> 00:54:00.729
Karl Childs.
&gt;&gt; PETERSON: Add into my contacts. Go ahead

00:54:00.729 --> 00:54:02.650
and throw him on the Wave. And so what's going
on now is that as similar to what Jochen's

00:54:02.650 --> 00:54:03.650
architecture earlier. The advertent operation
should be being sent from the local wavelet

00:54:03.650 --> 00:54:04.650
here over there but not quite. Are you okay
Childs?

00:54:04.650 --> 00:54:08.970
&gt;&gt; LAPALOMENTO: I am and we're not--having
troubles. Let's see. Let's try this again

00:54:08.970 --> 00:54:11.579
real quick. Sorry about that.
&gt;&gt; PETERSON: [INDISTINCT] are you going to

00:54:11.579 --> 00:54:12.579
Wave?
&gt;&gt; LAPALOMENTO: Okay. So...

00:54:12.579 --> 00:54:14.339
&gt;&gt; PETERSON: There she is.
&gt;&gt; LAPALOMENTO: Little, little boy there.

00:54:14.339 --> 00:54:15.710
But anyways, that's the message that Dan did.
Yeah, thank you. All right. And so in Pulse

00:54:15.710 --> 00:54:19.869
we can immediately come in here and start
replying. So we're going to say, "Hi, Dan

00:54:19.869 --> 00:54:25.549
how's the conference?" And hopefully much
quicker this time. He should see it over there.

00:54:25.549 --> 00:54:27.409
Oh, man, we are just dying with this network,
huh? There he goes. All right, so.

00:54:27.409 --> 00:54:30.279
&gt;&gt; PETERSON: There you go.
&gt;&gt; LAPALOMENTO: Like magic.

00:54:30.279 --> 00:54:36.569
&gt;&gt; PETERSON: Much better.
&gt;&gt; LAPALOMENTO: It shows up. So that's great.

00:54:36.569 --> 00:54:50.809
And it, you know, helps breakdown the barriers
between, you know, the two projects. You can

00:54:50.809 --> 00:54:53.019
have people in Wave that you communicate or
any Wave server that you guys develop in the

00:54:53.019 --> 00:54:55.930
future. It should all just work that simply.
&gt;&gt; PETERSON: So my response is going in over

00:54:55.930 --> 00:54:59.200
there.
&gt;&gt; LAPALOMENTO: Yes, in write reply. So now

00:54:59.200 --> 00:55:05.839
actually we can also do the real time editing
as well. So if I go over here in Pulse and

00:55:05.839 --> 00:55:06.839
click edit, I can go ahead and say "It's going
great." And hopefully over in Wave, in not

00:55:06.839 --> 00:55:11.920
too long, we should see that come across.
Okay. Well, that's a good start.

00:55:11.920 --> 00:55:12.920
&gt;&gt; PETERSON: Hi.
&gt;&gt; LAPALOMENTO: It's like we're running on

00:55:12.920 --> 00:55:13.920
a 288 modem here.
&gt;&gt; PETERSON: You know, so I mentioned before

00:55:13.920 --> 00:55:16.809
advances in broadband technology that they
are out there, I promise.

00:55:16.809 --> 00:55:18.869
&gt;&gt; LAPALOMENTO: Yes. So at some point that
will come across and basically, Dan should

00:55:18.869 --> 00:55:25.309
be able to do the same and we would see it
over on the left hand side. Well...

00:55:25.309 --> 00:55:26.990
&gt;&gt; PETERSON: I think this Wave may have gotten
turbulent along the way.

00:55:26.990 --> 00:55:27.990
&gt;&gt; LAPALOMENTO: Okay.
&gt;&gt; PETERSON: Perhaps.

00:55:27.990 --> 00:55:28.990
&gt;&gt; LAPALOMENTO: So we can try something really
dangerous right now which is a...

00:55:28.990 --> 00:55:29.990
&gt;&gt; PETERSON: I suppose, I mean they're all
there, they like to see it. So we probably

00:55:29.990 --> 00:55:30.990
should give it at a shot. Yeah.
&gt;&gt; HORNE: So Dan told me a couple of days,

00:55:30.990 --> 00:55:31.990
two days back, he said "Hey, Novell's going
to be on stage too. It's all right. Everything's

00:55:31.990 --> 00:55:44.880
great" and I said "Yes, that's awesome." And
then we--I was talking to Joseph and said

00:55:44.880 --> 00:55:55.740
"Hey, why won't we try a three-way Wave?"
So we're going to just be able to get crazy

00:55:55.740 --> 00:56:06.190
and I'm going to start an activity off. I'm
going to invite the guys and we're going to

00:56:06.190 --> 00:56:10.059
see if we get this to work now. Our probability
of success with the network could be crazy

00:56:10.059 --> 00:56:11.059
but let's just...
&gt;&gt; PETERSON: Well, I mean the whole point

00:56:11.059 --> 00:56:12.059
here is that's its many Wave providers not
just, you know, two, or two. So let's give

00:56:12.059 --> 00:56:13.059
it a shot.
&gt;&gt; HORNE: Okay. Okay, there's something crazy.

00:56:13.059 --> 00:56:14.059
Okay. Oh, I'll just got to invite you guys,
that's right. So I'm going to invite you guys.

00:56:14.059 --> 00:56:19.390
K. Childs and Dan. Okay.
&gt;&gt; PETERSON: So I got Novell here with Sandbox.

00:56:19.390 --> 00:56:22.189
&gt;&gt; HORNE: And we head back to the home screen.
&gt;&gt; PETERSON: Okay.

00:56:22.189 --> 00:56:27.559
&gt;&gt; HORNE: I believe will see it there as well.
Hey, it's well done.

00:56:27.559 --> 00:56:32.220
&gt;&gt; LAPALOMENTO: Here we go.
&gt;&gt; PETERSON: Indeed, so visiting the Wave

00:56:32.220 --> 00:56:39.990
in Pulse. Now I blip.
&gt;&gt; HORNE: Yes. So we're typing our reply right

00:56:39.990 --> 00:56:47.390
here in Pulse making the new blip.
&gt;&gt; PETERSON: I'm blip there. So and that's

00:56:47.390 --> 00:56:48.390
part one and now over the--over there.
&gt;&gt; LAPALOMENTO: Great. No, you're going to

00:56:48.390 --> 00:56:52.409
edit that.
&gt;&gt; PETERSON: I'm going to edit this.

00:56:52.409 --> 00:57:09.319
&gt;&gt; HORNE: So I can see it online. And maybe,
no, it will be asking too much to see it over

00:57:09.319 --> 00:57:15.680
here. Yes.
&gt;&gt; PETERSON: There we go. A little more delay

00:57:15.680 --> 00:57:21.930
than we would like but, you know, it's getting
there.

00:57:21.930 --> 00:57:24.410
&gt;&gt; HORNE: Next, last crazy thing. See if we
can get these gadgets. Okay.

00:57:24.410 --> 00:57:25.410
&gt;&gt; LAPALOMENTO: I mean we get text-less few
gadgets.

00:57:25.410 --> 00:57:26.410
&gt;&gt; HORNE: Here's option one.
&gt;&gt; PETERSON: There we go.

00:57:26.410 --> 00:57:27.410
&gt;&gt; HORNE: So okay. So...
&gt;&gt; PETERSON: And Pulse.

00:57:27.410 --> 00:57:28.410
&gt;&gt; LAPALOMENTO: And Pulse.
&gt;&gt; PETERSON: All three.

00:57:28.410 --> 00:57:29.410
&gt;&gt; HORNE: So we can go and add some things
but I think we're getting to that.

00:57:29.410 --> 00:57:30.609
&gt;&gt; PETERSON: Anyway, we don't kind to need
to go and hear about it.

00:57:30.609 --> 00:57:32.450
&gt;&gt; LAPALOMENTO: Yes.
&gt;&gt; PETERSON: I mean its great to see a gadget

00:57:32.450 --> 00:57:35.800
added from--as StreamWork show both on Pulse
and the Wave Sandbox and that, sort of, the

00:57:35.800 --> 00:57:36.800
overall direction of where we're headed here.
So I mean, I thank you all for your time listening

00:57:36.800 --> 00:57:37.800
to the presentation, various demos and some
of the quirks involves. But, you know, we're

00:57:37.800 --> 00:57:38.800
working really hard to sort of build those
community, get more Wave writers involved,

00:57:38.800 --> 00:57:39.800
get more use cases about how the protocol
can work, a lot of specs and a lot of code

00:57:39.800 --> 00:57:40.800
coming up on waveprotocol.org momentarily.
And have some time for questions now at the

00:57:40.800 --> 00:57:41.800
end if people have them. We'll also jump over
to moderator J.D. and Jochen here might come

00:57:41.800 --> 00:57:42.800
back up. Questions at the mics if there are
any. Yes, please. J.D. can you be the moderator?

00:57:42.800 --> 00:57:43.800
&gt;&gt; Within your demos where you're doing federation
between...

00:57:43.800 --> 00:57:44.800
&gt;&gt; PETERSON: Bring the [INDISTINCT] please.
&gt;&gt; In your demos when you're doing this testing

00:57:44.800 --> 00:57:45.800
between federated servers had you had enough
time to understand programmatically what latency...

00:57:45.800 --> 00:57:46.800
&gt;&gt; PETERSON: [INDISTINCT] do that.
&gt;&gt; ...is required as you add additional Wave

00:57:46.800 --> 00:57:47.800
servers to values of N?
&gt;&gt; BEKMANN: In short, probably no. We haven't

00:57:47.800 --> 00:57:48.800
done extensive testing. The whole way in which
the client-server protocol is designed is

00:57:48.800 --> 00:57:49.800
so that it's able to cope with latencies,
disconnects. And all it really means is clients

00:57:49.800 --> 00:57:50.800
will optimistically modify waves locally and
the Wave server sync up in the back and basically

00:57:50.800 --> 00:57:51.800
what you'll see is what you just saw. The
experience degrades but it should all function.

00:57:51.800 --> 00:57:52.800
It just means that things trickle in and you
guys might have experience the bad network

00:57:52.800 --> 00:57:53.800
connectivity we have from ourselves. And,
yes, if we can--if we confederate on the conditions

00:57:53.800 --> 00:57:54.800
like this I think we're doing pretty well.
&gt;&gt; PETERSON: Please, yes.

00:57:54.800 --> 00:57:55.800
&gt;&gt; I was wondering I see on the Novell Pulse,
I see an insert attachment, now I know we

00:57:55.800 --> 00:57:56.800
can't--one of the things that says it wasn't
done yet was federated attachments.

00:57:56.800 --> 00:57:57.800
&gt;&gt; LAPALOMENTO: Yes.
&gt;&gt; What about the attachment for just in,

00:57:57.800 --> 00:57:58.800
just for Novell Pulse? Just for Novell Pulse
users. Does that mean that it's, it can't

00:57:58.800 --> 00:57:59.800
be federated across or it is not in the open
source client yet for having attachments?

00:57:59.800 --> 00:58:00.980
&gt;&gt; BEKMANN: Well, I'm sure it works in Pulse
but it doesn't federate at this point and

00:58:00.980 --> 00:58:01.980
the open source client does not do attachments
as of yet.

00:58:01.980 --> 00:58:02.980
&gt;&gt; LAPALOMENTO: Yeah. But we were certainly
working together.

00:58:02.980 --> 00:58:03.980
&gt;&gt; BEKMANN: Yes. It will come.
&gt;&gt; Pardon me, you implemented, you implemented

00:58:03.980 --> 00:58:04.980
a way to do attachments for just Novell Pulse.
&gt;&gt; LAPALOMENTO: Yeah we did. So we have attachment

00:58:04.980 --> 00:58:05.980
support today. And the idea is that we're
going to kind of, you know, we have a kind

00:58:05.980 --> 00:58:06.980
of Federation gateway that seats inside of
our project and we will, you know, do the

00:58:06.980 --> 00:58:07.980
translations. So that when the Federation
attachment of, you know, protocols all worked

00:58:07.980 --> 00:58:08.980
out, we'll be extremely to cross and receiving
them back and all that fun stuff.

00:58:08.980 --> 00:58:09.980
&gt;&gt; Okay.
&gt;&gt; LAPALOMENTO: Okay?

00:58:09.980 --> 00:58:10.980
&gt;&gt; Okay. Thanks.
&gt;&gt; LAPALOMENTO: Good.

00:58:10.980 --> 00:58:11.980
&gt;&gt; Hi. As you've seen it's sometimes quite
difficult to determine whether the person

00:58:11.980 --> 00:58:12.980
that you're federating with is actually receiving
the updates that you're sending to them. So

00:58:12.980 --> 00:58:13.980
you've mentioned that is going to be a guaranteed
delivery, kind of part of the protocol. So

00:58:13.980 --> 00:58:14.980
will that include mechanisms that will determine
that I'm working on--as a provider, I'm working

00:58:14.980 --> 00:58:15.980
my clients and this guy that I'm working with
is not receiving the messages.

00:58:15.980 --> 00:58:16.980
&gt;&gt; BEKMANN: Yeah. So we have acknowledgement
mechanisms already in the protocol and that

00:58:16.980 --> 00:58:17.980
should be sufficient to be able to do the
retransmits from both FedOne and the production

00:58:17.980 --> 00:58:18.980
Wave servers. That's the only bit that's really
missing. Some of the error handling in the

00:58:18.980 --> 00:58:19.980
FedOne Wave server is also not quite complete,
and that's the part that's kind of missing.

00:58:19.980 --> 00:58:20.980
Once that's done it should be all good. It
should already be able to determine on the

00:58:20.980 --> 00:58:21.980
Wave what is and what is not arriving. It's
just the retransmission that isn't working.

00:58:21.980 --> 00:58:22.980
All of this is pretty much already part of
the spec, it's just not well implemented and

00:58:22.980 --> 00:58:23.980
it's not thoroughly documented unfortunately,
but its coming.

00:58:23.980 --> 00:58:24.980
&gt;&gt; PETERSON: Let me grab one question from
the moderator just because people were putting

00:58:24.980 --> 00:58:25.980
some questions into the Wave. So the highest
voting question appears to be, "Will we be

00:58:25.980 --> 00:58:26.980
able to use the current Google Wave user interface
with our private Wave servers?" And so this

00:58:26.980 --> 00:58:27.980
gets back into the effort of our open sourcing
which is what were working on very hard around

00:58:27.980 --> 00:58:28.980
open sourcing the Editor with the simple web
client around it and that, sort of, beginnings

00:58:28.980 --> 00:58:29.980
of more client code. So getting the FedOne
prototype out there in the first page was

00:58:29.980 --> 00:58:30.980
most important to be able to bring out more
federated providers and then moving on from,

00:58:30.980 --> 00:58:31.980
sort of, the back-end code to getting the
model out there, let's us be able to open

00:58:31.980 --> 00:58:32.980
source some of the client. And so that's what
we're starting with today and then more clients

00:58:32.980 --> 00:58:33.980
will come as time moves on. So I think, yes
please. Oh, thank you.

00:58:33.980 --> 00:58:40.619
&gt;&gt; So what happens when you have two clients
that evolve on the same, the same...

00:58:40.619 --> 00:58:41.619
&gt;&gt; PETERSON: Operational transform?
&gt;&gt; No. How did I brought?

00:58:41.619 --> 00:58:42.619
&gt;&gt; PETERSON: Sorry.
&gt;&gt; The same, no--or gadgets, thank you.

00:58:42.619 --> 00:58:43.619
&gt;&gt; PETERSON: Sorry.
&gt;&gt; Two, when you have two clients and like

00:58:43.619 --> 00:58:44.619
two different clients on two different servers
that don't evolve on the same gadgets, same

00:58:44.619 --> 00:58:45.619
like Frontend plug-ins.
&gt;&gt; PETERSON: So I think you're saying...

00:58:45.619 --> 00:58:46.619
&gt;&gt; I, so I have a way, I'm showing a way with
somebody and I create a chart for example

00:58:46.619 --> 00:58:47.619
or something like that, and then that's not
implemented on another client.

00:58:47.619 --> 00:58:48.619
&gt;&gt; PETERSON: Well, so the way that gadget
functionality works actually is, so long as

00:58:48.619 --> 00:58:49.619
the Wave providers support gadgets that should
be the same set of APIs that are available.

00:58:49.619 --> 00:58:50.619
And so by putting it into the Wave, the Wave
document is updated to have this links to

00:58:50.619 --> 00:58:51.619
the HTML file that defines to the gadget.
And then it can be rendered on both sides.

00:58:51.619 --> 00:58:52.619
&gt;&gt; Okay.
&gt;&gt; PETERSON: Yes?

00:58:52.619 --> 00:58:53.619
&gt;&gt; Yes.
&gt;&gt; HORNE: Like for instance--you saw we use

00:58:53.619 --> 00:58:54.619
the pro con there and like in our goal is
so that any gadgets that come through from

00:58:54.619 --> 00:58:55.619
the Wave, because they're gadgets, we want
them to work in StreamWork. And that's kind

00:58:55.619 --> 00:58:56.619
of one of the reasons why we want to do this
in so that we can take a lot of the tool in

00:58:56.619 --> 00:58:57.619
that, in different gadgets that come, and
bring them into our environment and then we

00:58:57.619 --> 00:58:58.619
move seamlessly back and forth. That's kind
of one of the goals that were hoping to, and

00:58:58.619 --> 00:58:59.619
that we would inherit that by working the
gadgets better.

00:58:59.619 --> 00:59:00.619
&gt;&gt; PETERSON: Yes. So we're building along
lot of the work from open sourcing here with

00:59:00.619 --> 00:59:01.619
infrastructure like Apache Shindig which lets
people get their own gadget server up and

00:59:01.619 --> 00:59:02.619
running. And so as long as we all have a gadget
server, it doesn't have to be Shindig, but

00:59:02.619 --> 00:59:03.619
as long as we have something that is, that
supports our open sourcing gadget specification

00:59:03.619 --> 00:59:04.619
then it will all just work. Yeah. I want to
grab--sorry, please go ahead now.

00:59:04.619 --> 00:59:05.619
&gt;&gt; Will you cover pre-configured versions?
So I can just take it and almost into the--implement

00:59:05.619 --> 00:59:06.619
it on my web server on my web page?
&gt;&gt; PETERSON: Sorry. I didn't quite catch the

00:59:06.619 --> 00:59:07.619
question. Maybe Jochen.
&gt;&gt; BEKMANN: Sir, I think--sir, did you asked

00:59:07.619 --> 00:59:08.619
whether you can take the code that we're about
to release and run it on your web server?

00:59:08.619 --> 00:59:09.619
&gt;&gt; Basically.
&gt;&gt; PETERSON: Yes. Yes.

00:59:09.619 --> 00:59:10.619
&gt;&gt; BEKMANN: Pretty much. I'm not sure about
how you'd hook it into your web server but...

00:59:10.619 --> 00:59:11.619
&gt;&gt; PETERSON: Yeah.
&gt;&gt; BEKMANN: Runs with J.D. and yeah, you can

00:59:11.619 --> 00:59:12.619
take it and put it up on your site.
&gt;&gt; ZAMFIRESCU: I mean you can definitely,

00:59:12.619 --> 00:59:13.619
if you have a shared hosting or something
like that you'll be able to run it there.

00:59:13.619 --> 00:59:14.619
You'll need certificates and so on if you
want to federate with Google Wave or with

00:59:14.619 --> 00:59:15.619
StreamWork or for Pulse. But if you're not
just confederating--why you will not federate,

00:59:15.619 --> 00:59:16.619
I don't know--but you can just run it on shared
hosting and it will serve an interface and

00:59:16.619 --> 00:59:17.619
you can just use it directly to that with
other people that you work with and so on.

00:59:17.619 --> 00:59:18.619
&gt;&gt; PETERSON: Speaking about the federation
crypto piece, but Jochen can do you want to

00:59:18.619 --> 00:59:19.619
speak a little bit to why that's baked in
to the protocol?

00:59:19.619 --> 00:59:20.619
&gt;&gt; BEKMANN: I was going to make a pick up
on the certificates that you mentioned. So

00:59:20.619 --> 00:59:21.619
as I explained, you know, Deltas are assigned
for that. You need certificates issued by

00:59:21.619 --> 00:59:22.619
some well-known CA, Certificate Authority,
and need DNS records set up for the XMPP side

00:59:22.619 --> 00:59:23.619
of the federation protocol. It's a little
bit of a hoop to jump through but it allows

00:59:23.619 --> 00:59:24.619
you to use a secure, you know, federation
protocol which will federate with all Wave

00:59:24.619 --> 00:59:25.619
servers that support it. Once you got that
you're all good.

00:59:25.619 --> 00:59:26.619
&gt;&gt; PETERSON: And the point there is for verification
so you can't spoof and...

00:59:26.619 --> 00:59:27.619
&gt;&gt; BEKMANN: Yeah. So that does the security
features of the federation protocol.

00:59:27.619 --> 00:59:28.619
&gt;&gt; PETERSON: So you know where the traffic
came from. It's all signed up.

00:59:28.619 --> 00:59:29.619
&gt;&gt; BEKMANN: But having said that, when you're
testing locally you can disable those. There's

00:59:29.619 --> 00:59:30.619
actually, in the start up script, there's
two flags. You disable it. You don't need

00:59:30.619 --> 00:59:31.619
any search you can use self sign search. But
that will only work for your own test break,

00:59:31.619 --> 00:59:32.619
it won't work against Wave Sandbox.
&gt;&gt; PETERSON: Yeah. So just for easier prototyping

00:59:32.619 --> 00:59:33.619
you, yeah.
&gt;&gt; BEKMANN: That's right.

00:59:33.619 --> 00:59:34.619
&gt;&gt; PETERSON: Do you have another question?
&gt;&gt; No. That's it.

00:59:34.619 --> 00:59:35.619
&gt;&gt; PETERSON: Okay. If there are no more questions
we'll be hanging out front here and happy

00:59:35.619 --> 00:59:36.619
to ask questions or answer questions one-on-one.
Maybe ask a couple in response but we'll see

00:59:36.619 --> 00:59:36.629
what happens. So thank you again for coming.
&gt;&gt; BEKMANN: Thanks.

