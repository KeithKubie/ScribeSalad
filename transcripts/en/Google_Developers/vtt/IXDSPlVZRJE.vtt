WEBVTT
Kind: captions
Language: en

00:00:00.760 --> 00:00:01.630
Hey everyone.

00:00:01.630 --> 00:00:04.100
My name is Mike Tsao, and
I'm on the Chrome Apps team.

00:00:04.100 --> 00:00:05.600
I'm here to tell
you what's happened

00:00:05.600 --> 00:00:07.650
with the platform
since I/O 2013,

00:00:07.650 --> 00:00:10.660
and why it makes sense for
you to write a Chrome app.

00:00:10.660 --> 00:00:13.790
But first a refresher-- why'd we
build the Chrome Apps platform

00:00:13.790 --> 00:00:15.220
in the first place?

00:00:15.220 --> 00:00:16.260
The answer is simple.

00:00:16.260 --> 00:00:17.520
We're the Chrome team.

00:00:17.520 --> 00:00:19.220
We love the web.

00:00:19.220 --> 00:00:22.540
HTML, CSS, and JavaScript
make a pretty awesome browser

00:00:22.540 --> 00:00:23.430
platform.

00:00:23.430 --> 00:00:26.470
And we wanted to use that
platform outside the browser.

00:00:26.470 --> 00:00:28.410
For us that meant three things.

00:00:28.410 --> 00:00:30.650
Unlocking additional
capabilities that

00:00:30.650 --> 00:00:32.910
aren't available to
normal web pages,

00:00:32.910 --> 00:00:36.500
making web apps as discoverable
and sticky as native apps,

00:00:36.500 --> 00:00:38.140
and doing all this
while preserving

00:00:38.140 --> 00:00:41.990
and even improving upon the
amazing reach of today's web.

00:00:41.990 --> 00:00:45.370
This is what Chrome apps
offer you as a developer.

00:00:45.370 --> 00:00:48.410
Chrome apps capabilities
fall into three groups.

00:00:48.410 --> 00:00:51.980
Immersive UI gives you the
developer complete control

00:00:51.980 --> 00:00:53.810
over your applications
appearance,

00:00:53.810 --> 00:00:56.030
all the way from window
size and position

00:00:56.030 --> 00:00:58.450
to full screen
with pointer lock.

00:00:58.450 --> 00:01:01.450
Your apps also have low level
access to device hardware,

00:01:01.450 --> 00:01:04.620
such as USB, Bluetooth,
and raw sockets.

00:01:04.620 --> 00:01:06.600
And our offline by
default model ensures

00:01:06.600 --> 00:01:08.620
that your users will
always be able to launch

00:01:08.620 --> 00:01:11.190
your app regardless
of connectivity.

00:01:11.190 --> 00:01:13.940
Again, through standard
web technology,

00:01:13.940 --> 00:01:17.000
immersive UI that has powerful
hardware access and runs

00:01:17.000 --> 00:01:17.990
offline.

00:01:17.990 --> 00:01:21.820
That's the core of what you get
with the Chrome Apps platform.

00:01:21.820 --> 00:01:24.790
Now building a powerful
Chrome app is easy,

00:01:24.790 --> 00:01:26.900
but how do you get
it to your users?

00:01:26.900 --> 00:01:28.670
We offer a distribution
flow that's

00:01:28.670 --> 00:01:30.920
familiar to any mobile user.

00:01:30.920 --> 00:01:34.140
The Chrome Web Store takes care
of listing, discoverability,

00:01:34.140 --> 00:01:37.650
ratings, reviews,
purchasing, and installation.

00:01:37.650 --> 00:01:41.410
Just upload your app and
we'll take care of the rest.

00:01:41.410 --> 00:01:43.450
After your users have
installed your app,

00:01:43.450 --> 00:01:46.060
the Chrome App Launcher
provides a convenient surface

00:01:46.060 --> 00:01:48.060
for your users to return to it.

00:01:48.060 --> 00:01:50.350
The App Launcher is
familiar to any user

00:01:50.350 --> 00:01:52.810
of other mobile or desktop OSs.

00:01:52.810 --> 00:01:55.540
And just in case your users
forget to launch your app,

00:01:55.540 --> 00:01:58.240
rich notifications remind
users of important events

00:01:58.240 --> 00:02:00.310
even if your app isn't running.

00:02:00.310 --> 00:02:03.640
The Chrome Web Store App
Launcher and rich notifications

00:02:03.640 --> 00:02:06.370
take care of distribution
and user retention,

00:02:06.370 --> 00:02:09.699
letting you focus on
making a great app.

00:02:09.699 --> 00:02:13.990
OK, you've written an immersive
and capable offline Chrome app.

00:02:13.990 --> 00:02:16.390
You're using the Chrome
Web Store to distribute it.

00:02:16.390 --> 00:02:18.250
The App Launcher and
rich notifications help

00:02:18.250 --> 00:02:20.340
keep up your active
user account.

00:02:20.340 --> 00:02:22.990
But exactly who can you
reach with your Chrome app?

00:02:22.990 --> 00:02:24.130
This is easy.

00:02:24.130 --> 00:02:26.890
If a device can run Chrome,
it can run your Chrome app

00:02:26.890 --> 00:02:28.110
as well.

00:02:28.110 --> 00:02:31.070
Chrome apps are available on
every desktop OS supported

00:02:31.070 --> 00:02:32.180
by Chrome.

00:02:32.180 --> 00:02:34.170
Through the Apache
Cordova project,

00:02:34.170 --> 00:02:37.370
you can deploy your Chrome app
in iOS and Android as well.

00:02:37.370 --> 00:02:39.770
And thanks to app_shell,
the Chrome Apps platform

00:02:39.770 --> 00:02:42.380
will soon have a reach
even greater than Chrome.

00:02:42.380 --> 00:02:44.947
I'll come back to
app_shell in a bit.

00:02:44.947 --> 00:02:47.530
All right, so now you understand
what the Chrome Apps platform

00:02:47.530 --> 00:02:48.100
is.

00:02:48.100 --> 00:02:50.940
And if you haven't yet seen Erik
Kay's State of the Union talk

00:02:50.940 --> 00:02:54.330
from I/O 2013, that's
still a great reference.

00:02:54.330 --> 00:02:57.060
But I wanted to talk about
what's changed since then.

00:02:57.060 --> 00:02:59.760
There have been quite a
few exciting developments.

00:02:59.760 --> 00:03:02.490
First of all, shortly
after I/O 2013,

00:03:02.490 --> 00:03:04.230
we officially
launched Chrome apps

00:03:04.230 --> 00:03:06.530
for all supported
desktop platforms, giving

00:03:06.530 --> 00:03:08.100
your apps the same
reach that Chrome

00:03:08.100 --> 00:03:12.640
has on Windows, OS X,
Chrome OS, and Linux.

00:03:12.640 --> 00:03:16.620
Next, we officially launched
mobile Chrome apps on Cordova.

00:03:16.620 --> 00:03:19.270
Apache Cordova implements
the Chrome Apps platform

00:03:19.270 --> 00:03:21.300
for iOS and Android.

00:03:21.300 --> 00:03:24.840
Both these ecosystems have their
own distribution mechanisms,

00:03:24.840 --> 00:03:27.900
and Cordova helps you
package your app accordingly.

00:03:27.900 --> 00:03:30.260
Between Chrome and
Cordova, your Chrome app

00:03:30.260 --> 00:03:32.110
has incredible
distribution and reach

00:03:32.110 --> 00:03:35.220
across all major desktop
and mobile platforms.

00:03:35.220 --> 00:03:37.180
Check out our other I/O
presentations this year

00:03:37.180 --> 00:03:40.060
to learn more about
mobile Chrome apps.

00:03:40.060 --> 00:03:44.365
Now, the initial September 2013
launch had some minor caveats.

00:03:44.365 --> 00:03:46.740
I'm happy to report that we've
taken care of many of them

00:03:46.740 --> 00:03:48.280
since then.

00:03:48.280 --> 00:03:50.840
First and foremost, the
Chrome Apps platform

00:03:50.840 --> 00:03:54.757
is at feature parity across all
four desktop operating systems,

00:03:54.757 --> 00:03:57.215
including most recently App
Launcher and rich notifications

00:03:57.215 --> 00:03:58.750
on Linux.

00:03:58.750 --> 00:04:00.856
The Chrome team has made
architectural changes

00:04:00.856 --> 00:04:02.480
under the hood that
will make it easier

00:04:02.480 --> 00:04:04.640
for us to continue
rolling out new platform

00:04:04.640 --> 00:04:07.310
features on all desktop
operating systems

00:04:07.310 --> 00:04:09.350
simultaneously.

00:04:09.350 --> 00:04:11.240
In addition to reaching
feature parity,

00:04:11.240 --> 00:04:14.550
we've also improved our suite
of platform capabilities.

00:04:14.550 --> 00:04:16.620
Managed in app payments
handles licenses

00:04:16.620 --> 00:04:19.000
you sell for digital
goods in your Chrome app.

00:04:19.000 --> 00:04:23.220
Free trials allow you to explore
freemium models for your app.

00:04:23.220 --> 00:04:27.130
The new unified Google Cloud
Messaging API, or chrome.gcm,

00:04:27.130 --> 00:04:28.820
is now in stable channel.

00:04:28.820 --> 00:04:32.100
If you've already rolled out
an Android GCM based product,

00:04:32.100 --> 00:04:34.420
is now much easier for you
to include the equivalent

00:04:34.420 --> 00:04:36.830
functionality in a Chrome app.

00:04:36.830 --> 00:04:38.940
We've added better media
scanning capabilities

00:04:38.940 --> 00:04:41.960
to the media gallery API, which
ensures that your apps will get

00:04:41.960 --> 00:04:45.340
appropriate access to
more user media files.

00:04:45.340 --> 00:04:48.640
We've completely revamped many
of our hardware access APIs

00:04:48.640 --> 00:04:51.100
to work properly with
Chrome event pages,

00:04:51.100 --> 00:04:53.730
in the process making your
code simpler, more efficient,

00:04:53.730 --> 00:04:56.080
and significantly faster.

00:04:56.080 --> 00:04:59.130
The sync file system API
now has directory support,

00:04:59.130 --> 00:05:01.560
giving your Chrome app
a fully featured sandbox

00:05:01.560 --> 00:05:04.370
subset of the
user's Google Drive.

00:05:04.370 --> 00:05:07.920
And finally, for those cases
where a sandbox just won't do,

00:05:07.920 --> 00:05:09.720
Chrome apps can
communicate directly

00:05:09.720 --> 00:05:12.595
with native applications
through native messaging.

00:05:12.595 --> 00:05:14.220
These are just some
of the improvements

00:05:14.220 --> 00:05:16.679
we've made to the core
platform in the last year.

00:05:16.679 --> 00:05:18.220
Check out our
developer documentation

00:05:18.220 --> 00:05:20.640
to get the complete set.

00:05:20.640 --> 00:05:23.620
Of course, more platform
features are always welcome,

00:05:23.620 --> 00:05:26.620
but a good platform needs
good developer tools as well.

00:05:26.620 --> 00:05:29.000
While we're big fans of
the diversity of tools

00:05:29.000 --> 00:05:32.300
and technologies available
to web developers,

00:05:32.300 --> 00:05:35.470
it's also a good idea to
provide a well lit path that

00:05:35.470 --> 00:05:37.430
helps beginner and
intermediate developers

00:05:37.430 --> 00:05:39.720
fall into the pit of success.

00:05:39.720 --> 00:05:42.450
That's why we've been working on
a couple Chrome apps of our own

00:05:42.450 --> 00:05:46.350
specifically designed to improve
the developer experience.

00:05:46.350 --> 00:05:49.540
First is Chrome Apps and
Extensions Developer Tool.

00:05:49.540 --> 00:05:53.530
This is what we've always wanted
chrome:extensions to become.

00:05:53.530 --> 00:05:56.280
If you're developing a Chrome
app or extension and have been

00:05:56.280 --> 00:05:59.940
using chrome:extensions in
developer mode, give it a try.

00:05:59.940 --> 00:06:02.320
The work flows much better.

00:06:02.320 --> 00:06:04.890
Next is a project
code named Spark.

00:06:04.890 --> 00:06:07.730
It's a code editor for
Chrome apps and web apps.

00:06:07.730 --> 00:06:09.930
With Spark and a machine
that runs Chrome,

00:06:09.930 --> 00:06:12.600
you have everything you need
to publish your own Chrome

00:06:12.600 --> 00:06:14.400
app on Chrome Web Store.

00:06:14.400 --> 00:06:17.360
The Spark team is unveiling
their developer preview at I/O,

00:06:17.360 --> 00:06:19.880
and I encourage you to
check out their talk.

00:06:19.880 --> 00:06:20.980
OK, great.

00:06:20.980 --> 00:06:23.600
Now you're up to speed on
Chrome apps as of today.

00:06:23.600 --> 00:06:24.780
So what's next?

00:06:24.780 --> 00:06:27.550
We generally don't talk
about unannounced products,

00:06:27.550 --> 00:06:30.210
but because Chromium is
an open source project,

00:06:30.210 --> 00:06:33.090
I can help direct your attention
to recent source code changes

00:06:33.090 --> 00:06:34.910
that you might find interesting.

00:06:34.910 --> 00:06:37.050
Disclaimer-- many
of these changes

00:06:37.050 --> 00:06:39.260
represent experiments
that might or might not

00:06:39.260 --> 00:06:41.270
ship depending in
part of your feedback.

00:06:41.270 --> 00:06:45.000
So please try them out and
let us know what you think.

00:06:45.000 --> 00:06:47.060
Earlier I mentioned stickiness.

00:06:47.060 --> 00:06:49.640
In most cases it's a good
thing to encourage your users

00:06:49.640 --> 00:06:52.680
to return to your app
after initial launch.

00:06:52.680 --> 00:06:55.480
But what if your app really
isn't meant to be sticky?

00:06:55.480 --> 00:06:57.510
What if your app is
associated with a calendar

00:06:57.510 --> 00:06:59.530
event or a sight
seeing location?

00:06:59.530 --> 00:07:01.150
What if your app
is so lightweight

00:07:01.150 --> 00:07:03.780
that the installation
step is a burden?

00:07:03.780 --> 00:07:06.320
Ephemeral Chrome apps
have a simpler life cycle

00:07:06.320 --> 00:07:09.420
that optimizes the
installation and removal steps.

00:07:09.420 --> 00:07:10.760
The vision is simple.

00:07:10.760 --> 00:07:13.640
Make installation optional,
replacing the Add button

00:07:13.640 --> 00:07:14.750
with Launch.

00:07:14.750 --> 00:07:17.240
Several versions of this
experiment are available now

00:07:17.240 --> 00:07:19.850
on chrome:flags.

00:07:19.850 --> 00:07:21.520
Back to the core
of the platform,

00:07:21.520 --> 00:07:23.820
we're expanding and
improving hardware support

00:07:23.820 --> 00:07:26.390
and improving existing
functionality based on feedback

00:07:26.390 --> 00:07:28.510
from app developers.

00:07:28.510 --> 00:07:30.609
If you've tried out the
Chrome Apps USB API,

00:07:30.609 --> 00:07:32.650
there's a good chance
you've run into a roadblock

00:07:32.650 --> 00:07:34.730
that it can't see devices
describing themselves

00:07:34.730 --> 00:07:37.510
in whole or in
part as HID class.

00:07:37.510 --> 00:07:40.680
To clear this roadblock,
we have a new USB HID

00:07:40.680 --> 00:07:44.200
API in dev channel now
for Windows and OS X.

00:07:44.200 --> 00:07:47.750
And we're working on Linux
and Chrome OS support now.

00:07:47.750 --> 00:07:51.390
Many newer Bluetooth devices
are BLE, or Bluetooth Low Energy

00:07:51.390 --> 00:07:52.360
devices.

00:07:52.360 --> 00:07:54.620
BLE is part of Bluetooth 4.

00:07:54.620 --> 00:07:56.050
It calls for a new API.

00:07:56.050 --> 00:07:58.456
And we're building that API
so your apps can connect

00:07:58.456 --> 00:08:02.160
to fitness bands, wrist watches,
home sensors, medical monitors,

00:08:02.160 --> 00:08:03.950
and other smart devices.

00:08:03.950 --> 00:08:06.440
Check out
chrome.bluetoothlowenergyapi

00:08:06.440 --> 00:08:08.100
for more.

00:08:08.100 --> 00:08:10.140
Next, manifest v3.

00:08:10.140 --> 00:08:11.950
Bumping a Chrome
app Manifest Version

00:08:11.950 --> 00:08:14.510
is a chance to bring
forward best practices

00:08:14.510 --> 00:08:16.670
and deprecate discouraged ones.

00:08:16.670 --> 00:08:18.940
It's also a chance to
introduce cool new platform

00:08:18.940 --> 00:08:21.900
features, such as a promises
based version of our platform

00:08:21.900 --> 00:08:23.000
APIs.

00:08:23.000 --> 00:08:25.920
We're getting ready to define
what v3 is going to look like,

00:08:25.920 --> 00:08:29.100
and we look forward to
hearing from you about it.

00:08:29.100 --> 00:08:31.600
Earlier I mentioned a
project called app_shell.

00:08:31.600 --> 00:08:33.330
app_shell is a
Chromium build target

00:08:33.330 --> 00:08:35.640
that offers a stripped down
version of the Chrome app's

00:08:35.640 --> 00:08:38.570
runtime suitable for
two major use cases.

00:08:38.570 --> 00:08:40.900
First, kiosk style
applications where

00:08:40.900 --> 00:08:42.900
you know the only thing
the kiosk is going to do

00:08:42.900 --> 00:08:44.670
is run your app, and
there's no reason

00:08:44.670 --> 00:08:46.870
why you'd need a
full web browser.

00:08:46.870 --> 00:08:49.130
Second, limited
resource environments

00:08:49.130 --> 00:08:51.430
running on bare bones
embedded hardware.

00:08:51.430 --> 00:08:53.290
The app_shell team is
already demonstrating

00:08:53.290 --> 00:08:55.840
that a Chrome app can run on
a small fraction of the memory

00:08:55.840 --> 00:08:58.120
and storage of the
full Chrome browser,

00:08:58.120 --> 00:09:01.050
and they're investigating ways
to shrink it even further.

00:09:01.050 --> 00:09:03.790
We'd like Chrome apps to go
places that Chrome can't, and

00:09:03.790 --> 00:09:06.620
app_shell is leading the way.

00:09:06.620 --> 00:09:09.440
Now, as I said before,
we're the Chrome team

00:09:09.440 --> 00:09:10.840
and we love the web.

00:09:10.840 --> 00:09:13.110
And the Chrome Apps team
is excited about sharing

00:09:13.110 --> 00:09:16.260
parts of what we've
developed with the web.

00:09:16.260 --> 00:09:19.270
Elsewhere at I/O, you'll hear
Alex Russell and Jake Archibald

00:09:19.270 --> 00:09:21.050
telling you about an
upcoming contender

00:09:21.050 --> 00:09:23.450
for web standard
called service worker.

00:09:23.450 --> 00:09:27.360
Service worker is at its heart
an event page for the open web.

00:09:27.360 --> 00:09:29.746
If you're already a
Chrome app developer,

00:09:29.746 --> 00:09:31.120
then you'll
recognize Chrome apps

00:09:31.120 --> 00:09:33.940
event pages and Service
Worker's lineage.

00:09:33.940 --> 00:09:37.080
Event pages provide a
richer app lifetime model.

00:09:37.080 --> 00:09:40.544
And we're excited to see
wider adoption of that model.

00:09:40.544 --> 00:09:42.335
We're also using our
Chrome apps experience

00:09:42.335 --> 00:09:46.250
to research different ways
to present open web content.

00:09:46.250 --> 00:09:48.420
The streamlined
hosted apps experiment

00:09:48.420 --> 00:09:51.560
let's end users treat regular
websites like Chrome apps,

00:09:51.560 --> 00:09:54.630
with top level windows and
a spot in the App Launcher.

00:09:54.630 --> 00:09:56.380
For a lot of sites,
this presentation mode

00:09:56.380 --> 00:09:58.010
makes a lot of sense.

00:09:58.010 --> 00:10:00.950
Give it a try in chrome:flags.

00:10:00.950 --> 00:10:04.410
OK, now you're caught up with
today's Chrome apps platform.

00:10:04.410 --> 00:10:06.410
Using standard safe
web technology,

00:10:06.410 --> 00:10:11.200
you get immersive UI, hardware
access, great offline behavior,

00:10:11.200 --> 00:10:14.180
easy distribution and retention,
and a familiar native app

00:10:14.180 --> 00:10:17.060
experience across
desktop and mobile.

00:10:17.060 --> 00:10:18.467
We built the Chrome
Apps platform

00:10:18.467 --> 00:10:20.300
because we believed it
would be a better way

00:10:20.300 --> 00:10:24.200
to safely deliver application
functionality to users.

00:10:24.200 --> 00:10:25.890
Every day, more
and more people are

00:10:25.890 --> 00:10:28.070
convinced, and every
day more and more

00:10:28.070 --> 00:10:30.880
people are buying Chromebooks
as second and sometimes

00:10:30.880 --> 00:10:32.780
first computers.

00:10:32.780 --> 00:10:35.350
If you want to reach the users
who are buying into the Chrome

00:10:35.350 --> 00:10:38.940
app sandbox model, then you
need to build a Chrome app.

00:10:38.940 --> 00:10:40.610
We think we're
onto something big,

00:10:40.610 --> 00:10:43.090
and we'd like you
to be a part of it.

00:10:43.090 --> 00:10:45.950
Now is a great time to capture
the attention of millions

00:10:45.950 --> 00:10:48.700
of Chromebook users
with your Chrome app.

00:10:48.700 --> 00:10:50.050
So go build it.

00:10:50.050 --> 00:10:53.080
To get started, visit
the Chrome app site here.

00:10:53.080 --> 00:10:55.080
Thanks for watching.

