WEBVTT
Kind: captions
Language: en

00:00:00.780 --> 00:00:02.100
Hey guys, I'm Eric Bidelman.

00:00:02.100 --> 00:00:03.790
I'm a staff developer
relations engineer

00:00:03.790 --> 00:00:05.178
working on Polymer at Google.

00:00:05.178 --> 00:00:07.303
So in this video I'm going
to talk to you about how

00:00:07.303 --> 00:00:09.510
you can use Polymer and
Web Components to interact

00:00:09.510 --> 00:00:12.750
with some of Google's most
popular APIs and services

00:00:12.750 --> 00:00:15.870
just by writing a
little bit of HTML.

00:00:15.870 --> 00:00:18.640
The other day I was thinking,
how many APIs does Google have?

00:00:18.640 --> 00:00:19.386
Do you now?

00:00:19.386 --> 00:00:20.260
I actually did't.

00:00:20.260 --> 00:00:21.930
I had to do my
research on this one.

00:00:21.930 --> 00:00:24.069
So it's over 250 APIs.

00:00:24.069 --> 00:00:26.360
Things like Google Maps and
Google Drive, Spreadsheets,

00:00:26.360 --> 00:00:27.630
Calendar, Analytics.

00:00:27.630 --> 00:00:30.190
You name it, Google's
probably got it.

00:00:30.190 --> 00:00:32.670
And of course we all know
that creating complex web

00:00:32.670 --> 00:00:34.250
applications requires
you to interact

00:00:34.250 --> 00:00:36.125
with APIs and services.

00:00:36.125 --> 00:00:37.500
So on the polymer
team we've been

00:00:37.500 --> 00:00:38.874
thinking about
this a little bit.

00:00:38.874 --> 00:00:41.080
How do you combine
Google's awesomeness

00:00:41.080 --> 00:00:42.640
with the world of
Web Components?

00:00:42.640 --> 00:00:45.100
We really want to make working
with Web Components as easy

00:00:45.100 --> 00:00:46.530
as writing a little bit of HTML.

00:00:46.530 --> 00:00:49.230
That's really the power
of Web Components.

00:00:49.230 --> 00:00:51.570
And it turns out, they're
a great delivery vehicle

00:00:51.570 --> 00:00:54.930
for wrapping existing content,
libraries, and services.

00:00:54.930 --> 00:00:57.210
Think of it as a way to
declaratively provide

00:00:57.210 --> 00:01:01.010
a declarative service area
for the API that exists.

00:01:01.010 --> 00:01:03.834
This is really where
Polymer comes in.

00:01:03.834 --> 00:01:05.250
For those that
don't know, Polymer

00:01:05.250 --> 00:01:06.820
is a bleeding edge technology.

00:01:06.820 --> 00:01:08.450
It's a library built
for the web that

00:01:08.450 --> 00:01:10.790
allows you to create
web applications based

00:01:10.790 --> 00:01:12.320
on Web Components.

00:01:12.320 --> 00:01:13.810
But to me what
Polymer really does

00:01:13.810 --> 00:01:16.610
is provide a thin layer
of opinionated layer

00:01:16.610 --> 00:01:18.910
on top of the Web
Component APIs.

00:01:18.910 --> 00:01:21.790
So we built in things like data
binding, property observation,

00:01:21.790 --> 00:01:23.332
[? jester ?] support,
mobile support.

00:01:23.332 --> 00:01:25.873
These are really important when
you're building applications.

00:01:25.873 --> 00:01:28.220
We want to make it easier
for you to ramp up and use,

00:01:28.220 --> 00:01:30.690
so we built that
into Polymer itself.

00:01:30.690 --> 00:01:32.800
A popular API is something
like Google Maps.

00:01:32.800 --> 00:01:34.789
It's very complex,
it's very rich.

00:01:34.789 --> 00:01:37.080
So let's take a look at how
Web Components can actually

00:01:37.080 --> 00:01:39.560
make your life easier
using that API.

00:01:39.560 --> 00:01:41.491
This is Google
Maps' Hello World.

00:01:41.491 --> 00:01:43.990
It's pretty simple, but there's
a little bit of boiler plate

00:01:43.990 --> 00:01:45.948
code that you have to
write every time you want

00:01:45.948 --> 00:01:47.769
to render just a
map to your page.

00:01:47.769 --> 00:01:50.060
You have to know to style it
using a little bit of CSS.

00:01:50.060 --> 00:01:51.768
You have to know that
there's a container

00:01:51.768 --> 00:01:52.935
div that you need to create.

00:01:52.935 --> 00:01:55.268
You have to load the library,
you have to remember that.

00:01:55.268 --> 00:01:57.060
You have to work with
loading and callbacks

00:01:57.060 --> 00:01:58.601
and write a little
bit of JavaScript.

00:01:58.601 --> 00:02:00.249
The point is, there's
a lot of process

00:02:00.249 --> 00:02:02.290
you have to go through to
get this thing kicking.

00:02:02.290 --> 00:02:04.661
So let's see what we can
do with Web Components.

00:02:04.661 --> 00:02:07.160
In the world of Web Components,
this is the Google Maps API.

00:02:07.160 --> 00:02:09.120
It's a single tag you
declare on your page.

00:02:09.120 --> 00:02:11.349
That's ridiculous,
ridiculously awesome.

00:02:11.349 --> 00:02:13.140
You declare it and
you're off to the races.

00:02:13.140 --> 00:02:14.790
And it does exactly
what you expect,

00:02:14.790 --> 00:02:16.760
which is render a
map to your page.

00:02:16.760 --> 00:02:18.800
It's simple, it's
declarative, it's intuitive.

00:02:18.800 --> 00:02:20.620
I don't have to write
JavaScript code.

00:02:20.620 --> 00:02:22.161
I don't have to know
about callbacks.

00:02:22.161 --> 00:02:23.820
I don't have to read
API documentation.

00:02:23.820 --> 00:02:24.528
You get my point.

00:02:24.528 --> 00:02:27.240
You just use this
thing and it works.

00:02:27.240 --> 00:02:30.455
But Google Maps is an
extremely complex API.

00:02:30.455 --> 00:02:31.830
So instead of
writing JavaScript,

00:02:31.830 --> 00:02:33.246
what we can do in
the world of Web

00:02:33.246 --> 00:02:35.800
Components is expose attributes
on this element for people

00:02:35.800 --> 00:02:37.841
to configure the different
properties and methods

00:02:37.841 --> 00:02:39.470
that the API exposes.

00:02:39.470 --> 00:02:41.470
So for instance, a really
common thing to do,

00:02:41.470 --> 00:02:42.490
latitude and longitude.

00:02:42.490 --> 00:02:43.890
Set the center of the map.

00:02:43.890 --> 00:02:46.770
We can do that now using
the latitude and longitude

00:02:46.770 --> 00:02:47.680
attributes.

00:02:47.680 --> 00:02:49.610
We can also set the
zoom level of this map

00:02:49.610 --> 00:02:52.460
just by setting the
zoom attribute to 15.

00:02:52.460 --> 00:02:53.460
That's really awesome.

00:02:53.460 --> 00:02:55.460
Again, it's all declarative
and super intuitive.

00:02:55.460 --> 00:02:58.640
You can read this code
and know what's going on.

00:02:58.640 --> 00:03:00.330
And adding markers
is just as easy.

00:03:00.330 --> 00:03:01.840
It's just as declarative.

00:03:01.840 --> 00:03:04.250
So we can drop in a bunch of
Google Map marker elements

00:03:04.250 --> 00:03:05.850
inside of the Google
Map tag itself

00:03:05.850 --> 00:03:07.662
and compose these
in different ways.

00:03:07.662 --> 00:03:10.120
The fact that the market tag
is in the wrap is significant.

00:03:10.120 --> 00:03:13.540
It knows to render that
marker to the page.

00:03:13.540 --> 00:03:15.670
I'm also reusing other
parts of the platform here.

00:03:15.670 --> 00:03:18.150
So you notice I didn't reinvent
the wheel for the title

00:03:18.150 --> 00:03:18.766
attribute.

00:03:18.766 --> 00:03:21.140
Or I didn't reinvent the wheel
for the drag and drop API.

00:03:21.140 --> 00:03:23.580
I'm using the draggable
true attribute.

00:03:23.580 --> 00:03:25.540
So again, I can use
parts of the web platform

00:03:25.540 --> 00:03:26.384
that already exist.

00:03:26.384 --> 00:03:28.300
I don't have to reinvent
that wheel every time

00:03:28.300 --> 00:03:29.495
I start a new project.

00:03:29.495 --> 00:03:31.140
That's cool.

00:03:31.140 --> 00:03:33.140
The other thing I really
love about this element

00:03:33.140 --> 00:03:36.266
is that it makes some of
the API complexity go away.

00:03:36.266 --> 00:03:37.640
So one thing that's
really common

00:03:37.640 --> 00:03:39.490
to do in the world
of Maps is center

00:03:39.490 --> 00:03:42.330
your map inside of the
viewpoint of all the markers

00:03:42.330 --> 00:03:43.660
contained inside of it.

00:03:43.660 --> 00:03:46.340
Make sure they're available
to users at all times.

00:03:46.340 --> 00:03:47.660
It's a little bit of
boilerplate code, a little bit

00:03:47.660 --> 00:03:49.118
of JavaScript that
you have to know

00:03:49.118 --> 00:03:51.150
how to write every
time you want to do it.

00:03:51.150 --> 00:03:53.250
You add a new marker, you
want to update the map.

00:03:53.250 --> 00:03:54.820
Instead, what we can do in
the world of Web Components

00:03:54.820 --> 00:03:57.660
is again expose another
attribute, this Fit to Markets

00:03:57.660 --> 00:03:58.590
attribute.

00:03:58.590 --> 00:04:02.214
So as long as I have on my
marker tag, my map tag, boom,

00:04:02.214 --> 00:04:03.380
the map just updates itself.

00:04:03.380 --> 00:04:07.549
It knows to set the zoom
property accordingly.

00:04:07.549 --> 00:04:08.340
That's Google Maps.

00:04:08.340 --> 00:04:10.560
It's super declarative,
super easy to use.

00:04:10.560 --> 00:04:12.700
But you could imagine a
ton of other use cases

00:04:12.700 --> 00:04:15.140
here for all the APIs
Google has, whether it's

00:04:15.140 --> 00:04:17.959
working which Charts or
Spreadsheets, Analytics.

00:04:17.959 --> 00:04:19.751
Anything can be a Web Component.

00:04:19.751 --> 00:04:21.709
We can provide a declarative
surface for people

00:04:21.709 --> 00:04:23.362
to tap into that.

00:04:23.362 --> 00:04:24.820
And that's exactly
what we've done.

00:04:24.820 --> 00:04:26.670
So we've been experimenting
with this over on GitHub.

00:04:26.670 --> 00:04:28.460
If you want to check
it out, Google Web

00:04:28.460 --> 00:04:30.060
Components us the
GitHub organization.

00:04:30.060 --> 00:04:32.870
We have a growing collection
of awesome components there,

00:04:32.870 --> 00:04:36.080
things for Analytics and maps
you saw, Google Spreadsheets.

00:04:36.080 --> 00:04:38.830
We also have base components
for doing more low-level things,

00:04:38.830 --> 00:04:40.930
working with the
libraries that Google has,

00:04:40.930 --> 00:04:44.400
doing OAuth2-- God knows
that is very complex.

00:04:44.400 --> 00:04:46.840
So just like Maps, these
are super declarative, super

00:04:46.840 --> 00:04:47.515
easy to use.

00:04:47.515 --> 00:04:48.140
Check them out.

00:04:48.140 --> 00:04:49.520
If anything is
missing, let us now.

00:04:49.520 --> 00:04:51.590
We're really interested
in getting your feedback,

00:04:51.590 --> 00:04:54.050
getting pool requests, and
adding new APIs and services

00:04:54.050 --> 00:04:56.124
all the time.

00:04:56.124 --> 00:04:57.290
So actually, let's use this.

00:04:57.290 --> 00:04:59.080
Let's combine-- proof
in the pudding--

00:04:59.080 --> 00:05:01.480
create an application that
uses Google Maps and Google

00:05:01.480 --> 00:05:02.250
Spreadsheets.

00:05:02.250 --> 00:05:04.850
We'll create a Polymer element
that wraps all that together,

00:05:04.850 --> 00:05:06.830
and users can use
that element inside

00:05:06.830 --> 00:05:08.369
of their own applications.

00:05:08.369 --> 00:05:09.410
Oh yeah, I almost forgot.

00:05:09.410 --> 00:05:11.534
We're not going to write
any JavaScript to do this.

00:05:11.534 --> 00:05:14.000
We're just going to write
a little bit of HTML.

00:05:14.000 --> 00:05:15.417
So if you're
curious, this data is

00:05:15.417 --> 00:05:17.291
going to be coming from
a Google Spreadsheet.

00:05:17.291 --> 00:05:19.200
This is what the data
actually looks like.

00:05:19.200 --> 00:05:21.890
Essentially it's just a list of
business in Portland, Oregon.

00:05:21.890 --> 00:05:23.376
There's a little
bit of metadata,

00:05:23.376 --> 00:05:24.750
but the most
important thing here

00:05:24.750 --> 00:05:26.874
is that we have the latitude
and longitude columns.

00:05:26.874 --> 00:05:30.382
This is the data that's going
to render those marker objects.

00:05:30.382 --> 00:05:31.840
So the first thing
we do, we've got

00:05:31.840 --> 00:05:33.180
to bring this stuff
locally it our app.

00:05:33.180 --> 00:05:34.610
We're going to use
Bio to install it.

00:05:34.610 --> 00:05:36.590
We're going to Bio-install
the Google Map tag.

00:05:36.590 --> 00:05:39.090
And then you see the example
here, which we've already seen,

00:05:39.090 --> 00:05:40.780
so let's move on.

00:05:40.780 --> 00:05:42.790
What you haven't seen is
the Google Sheets tag.

00:05:42.790 --> 00:05:45.340
This is an element for working
with Google Spreadsheets.

00:05:45.340 --> 00:05:47.256
We're also going to
Bio-install that, bring it

00:05:47.256 --> 00:05:48.506
in locally to our application.

00:05:48.506 --> 00:05:50.464
And the second example
here is how you actually

00:05:50.464 --> 00:05:51.260
use this element.

00:05:51.260 --> 00:05:52.740
So again, it's
super declarative.

00:05:52.740 --> 00:05:55.850
I declared Google Sheets, and
boom, I'm off to the races.

00:05:55.850 --> 00:05:58.280
It's got a Publish property,
which essentially means,

00:05:58.280 --> 00:06:00.030
hey this data is being
published publicly.

00:06:00.030 --> 00:06:03.000
Don't worry about doing
authentication just there.

00:06:03.000 --> 00:06:05.470
GID corresponds to the
tab in the spreadsheet

00:06:05.470 --> 00:06:08.722
that I want to interact
with, so GID 0, first tab.

00:06:08.722 --> 00:06:10.180
And the last thing
that we're doing

00:06:10.180 --> 00:06:11.500
is providing a spreadsheet key.

00:06:11.500 --> 00:06:12.830
And you see the example here.

00:06:12.830 --> 00:06:15.137
Where you actually get
the key is in the URL bar

00:06:15.137 --> 00:06:16.970
when viewing the
spreadsheet in Google Docs.

00:06:16.970 --> 00:06:18.612
So it's super easy to use.

00:06:18.612 --> 00:06:20.570
And the last step, if
you're outside of Polymer

00:06:20.570 --> 00:06:22.180
you just have to write a
little bit of JavaScript

00:06:22.180 --> 00:06:24.390
to maybe listen for the
event that this element fires

00:06:24.390 --> 00:06:26.060
and then it will
react accordingly.

00:06:26.060 --> 00:06:27.810
So in this case, we
can print out the data

00:06:27.810 --> 00:06:29.140
that the spreadsheet return.

00:06:29.140 --> 00:06:32.696
But it's really that
easy, declare, go.

00:06:32.696 --> 00:06:34.570
So that we have those
dependencies installed,

00:06:34.570 --> 00:06:36.430
Google Maps and Sheets,
let's actually use them.

00:06:36.430 --> 00:06:37.888
Let's create a
Polymer element that

00:06:37.888 --> 00:06:39.484
wraps that
functionality together.

00:06:39.484 --> 00:06:41.150
This is the entirety
of the application.

00:06:41.150 --> 00:06:43.202
Let's walk through these pieces.

00:06:43.202 --> 00:06:45.410
So the first thing, now that
we have the dependencies

00:06:45.410 --> 00:06:47.970
installed, you want to listen
at the top of your file.

00:06:47.970 --> 00:06:49.710
So this is using
HTML imports, which

00:06:49.710 --> 00:06:51.690
is one of the Web
Component APIs.

00:06:51.690 --> 00:06:53.634
We're going to list
Polymer as a dependency,

00:06:53.634 --> 00:06:55.050
the Google Sheets
as a dependency,

00:06:55.050 --> 00:06:57.830
and Google maps as
a dependency now

00:06:57.830 --> 00:06:59.215
that they're in our application.

00:06:59.215 --> 00:07:01.840
The second thing we're going to
do is create a Polymer element,

00:07:01.840 --> 00:07:05.210
so using Polymer's declarative
sugaring to do this.

00:07:05.210 --> 00:07:07.740
The name of the tag we're
going to create is map-sheets.

00:07:07.740 --> 00:07:10.364
This is what somebody's actually
going to declare on their page

00:07:10.364 --> 00:07:11.680
when they use our stuff.

00:07:11.680 --> 00:07:14.096
The second thing you see here
is this no script attribute.

00:07:14.096 --> 00:07:16.540
That's essentially just a
hint to Polymer to say hey,

00:07:16.540 --> 00:07:17.500
I'm not going to
add any properties,

00:07:17.500 --> 00:07:18.400
any methods to this.

00:07:18.400 --> 00:07:20.233
It's just going to be
a little bit of markup

00:07:20.233 --> 00:07:23.630
that we're essentially
repackaging for users.

00:07:23.630 --> 00:07:25.420
So it's a pretty simple element.

00:07:25.420 --> 00:07:26.920
Inside the Elements
template, you're

00:07:26.920 --> 00:07:28.430
drop in that Google
Sheets component.

00:07:28.430 --> 00:07:29.970
This is what's going to
talk to or spreadsheet.

00:07:29.970 --> 00:07:31.360
You can see I've
got the key there,

00:07:31.360 --> 00:07:32.984
I got that publish
attribute, and we're

00:07:32.984 --> 00:07:34.600
data binding to
the rows attribute

00:07:34.600 --> 00:07:35.730
that this thing has on it.

00:07:35.730 --> 00:07:37.815
More on that in just a second.

00:07:37.815 --> 00:07:39.690
Right below it we have
the Google Maps sheet.

00:07:39.690 --> 00:07:42.319
This is your friendly tag
that we already know about.

00:07:42.319 --> 00:07:44.110
Notice that we're using
that fit to markers

00:07:44.110 --> 00:07:46.480
attribute that we
talked about before.

00:07:46.480 --> 00:07:48.740
So again, any time I have
extra markers being rendered

00:07:48.740 --> 00:07:50.240
in this map, it's
just going to know

00:07:50.240 --> 00:07:53.455
to set the zoom level to
the appropriate level.

00:07:53.455 --> 00:07:54.830
Lastly, what we're
doing is we're

00:07:54.830 --> 00:07:56.460
using [? Plamers' ?]
declarative data

00:07:56.460 --> 00:07:58.690
binding features to
declare the [INAUDIBLE]

00:07:58.690 --> 00:08:00.855
over the row data returned
in the spreadsheet.

00:08:00.855 --> 00:08:02.730
So again, I'm not writing
any JavaScript code

00:08:02.730 --> 00:08:03.646
to wire this stuff up.

00:08:03.646 --> 00:08:05.410
I'm literally just
declaring a template,

00:08:05.410 --> 00:08:07.930
looking over the data, and
stamping out Google Map marker

00:08:07.930 --> 00:08:08.552
children.

00:08:08.552 --> 00:08:10.510
And of course, we're data
binding that latitude

00:08:10.510 --> 00:08:13.030
and longitude property
to the particular cell

00:08:13.030 --> 00:08:14.189
that we're interested in.

00:08:14.189 --> 00:08:15.730
So again, it's all
super declarative,

00:08:15.730 --> 00:08:18.820
and the surface area is
just using HTML attributes.

00:08:18.820 --> 00:08:20.570
So that's the entirety
of the application.

00:08:20.570 --> 00:08:22.028
If somebody wants
to use this, it's

00:08:22.028 --> 00:08:24.229
just a matter of
bringing in platform JS.

00:08:24.229 --> 00:08:25.770
These are the
polyfills that actually

00:08:25.770 --> 00:08:27.540
allow you to use the
stuff in browsers

00:08:27.540 --> 00:08:29.570
that don't support
the native APIs.

00:08:29.570 --> 00:08:30.720
Check.

00:08:30.720 --> 00:08:33.220
You want to declare the Google
Maps sheet as an HTML import.

00:08:33.220 --> 00:08:35.428
That's going to bring in
the element we just created.

00:08:35.428 --> 00:08:36.090
Check.

00:08:36.090 --> 00:08:37.720
The last thing you
want to do is just

00:08:37.720 --> 00:08:39.902
declare the Map sheets
tag on your page.

00:08:39.902 --> 00:08:42.110
And of course, what people
get is this beautiful map,

00:08:42.110 --> 00:08:44.114
marker data, all powered
by Google Spreadsheets.

00:08:44.114 --> 00:08:45.530
We didn't write
any code to do it.

00:08:45.530 --> 00:08:47.380
We used Polymer Web Components.

00:08:47.380 --> 00:08:48.912
That's the bee's knees.

00:08:48.912 --> 00:08:51.370
So if you want to see a live
demo of this, go check it out.

00:08:51.370 --> 00:08:54.205
It's at
googlewebcomponents.github.io.

00:08:54.205 --> 00:08:55.840
We have this demo,
as well as a ton

00:08:55.840 --> 00:08:59.090
of other demos for all the
other components we've created.

00:08:59.090 --> 00:09:01.590
So that's a small taste,
just a small, small taste

00:09:01.590 --> 00:09:03.545
of what Polymer and
Web Components can do.

00:09:03.545 --> 00:09:04.920
I really think
Web Components are

00:09:04.920 --> 00:09:07.580
going to lock a fundamentally
new way to program for the web.

00:09:07.580 --> 00:09:09.140
You've already seen,
it's productive,

00:09:09.140 --> 00:09:10.880
it's declarative, its reusable.

00:09:10.880 --> 00:09:12.742
And you can vastly
reduce the amount of code

00:09:12.742 --> 00:09:14.200
you write as a
front end developer.

00:09:14.200 --> 00:09:15.799
That's really, really awesome.

00:09:15.799 --> 00:09:18.090
So if you want to know more
about creating applications

00:09:18.090 --> 00:09:20.710
using Polymer, do check
out Rob Dodson's video

00:09:20.710 --> 00:09:21.710
and Addy Osmani's video.

00:09:21.710 --> 00:09:24.126
These are some stellar guys
with some really, really great

00:09:24.126 --> 00:09:25.770
content.

00:09:25.770 --> 00:09:27.560
Check us out at
polymer-project.org.

00:09:27.560 --> 00:09:30.230
This is our website, powered
by Polymer, of course.

00:09:30.230 --> 00:09:32.075
And follow us on
Twitter @polymer.

00:09:32.075 --> 00:09:34.700
You can also feel free to hit me
up at any time, ask questions.

00:09:34.700 --> 00:09:35.880
I'm always on Twitter.

00:09:35.880 --> 00:09:37.121
I'm on Google Plus.

00:09:37.121 --> 00:09:38.120
Oh yeah, one last thing.

00:09:38.120 --> 00:09:40.060
Go componentize the web, guys.

00:09:40.060 --> 00:09:41.880
Thanks for watching.

