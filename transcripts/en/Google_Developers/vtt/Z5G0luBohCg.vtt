WEBVTT
Kind: captions
Language: en

00:00:00.672 --> 00:00:01.500
Hey everybody.

00:00:01.500 --> 00:00:03.370
This is Wesley Chun,
engineer and developer

00:00:03.370 --> 00:00:04.392
advocate at Google.

00:00:04.392 --> 00:00:06.600
In this video we'll walk
through a simple script that

00:00:06.600 --> 00:00:08.940
lists the files on
your Google Drive.

00:00:08.940 --> 00:00:11.370
But before we do that,
why the drive API?

00:00:11.370 --> 00:00:13.890
We're not talking Google
Apps, syncing files,

00:00:13.890 --> 00:00:17.240
or a user Interface integration
using the Drive SDK.

00:00:17.240 --> 00:00:17.780
No.

00:00:17.780 --> 00:00:21.250
The API is about unlocking
drive functionality and making

00:00:21.250 --> 00:00:22.960
it accessible to
your app-- things

00:00:22.960 --> 00:00:26.880
like uploading and downloading
files, sharing, folders,

00:00:26.880 --> 00:00:29.380
metadata, and
managing revisions.

00:00:29.380 --> 00:00:32.330
With the API, you can write
an app that takes a zip file,

00:00:32.330 --> 00:00:35.660
decompresses the archive, and
uploads those files to a Google

00:00:35.660 --> 00:00:36.950
Drive folder.

00:00:36.950 --> 00:00:42.470
Or take a stack of photos on
Drive, build a collage, or two

00:00:42.470 --> 00:00:45.470
and upload the generated
image back to Drive.

00:00:45.470 --> 00:00:47.610
Wait, here's an
even better idea.

00:00:47.610 --> 00:00:51.360
All right, how many of you have
a massive folder of pictures

00:00:51.360 --> 00:00:53.120
from different times and places?

00:00:53.120 --> 00:00:54.470
A headache to sort.

00:00:54.470 --> 00:00:56.970
Well, what if you could write
a little piece of code that

00:00:56.970 --> 00:00:59.730
used the file timestamps
and the embedded geocoding

00:00:59.730 --> 00:01:01.970
metadata in each file image?

00:01:01.970 --> 00:01:04.230
Well, is it not past
well then to just auto

00:01:04.230 --> 00:01:08.540
create photo albums out of
thousands of unsorted images?

00:01:08.540 --> 00:01:10.970
Well, these are all
possible with the API.

00:01:10.970 --> 00:01:13.700
The simple script we're building
today is just the beginning.

00:01:13.700 --> 00:01:15.990
It's your launch point.

00:01:15.990 --> 00:01:17.490
The code we'll
write is in Python,

00:01:17.490 --> 00:01:19.010
but you can use
any language that's

00:01:19.010 --> 00:01:21.164
supported by the Google
API's client library

00:01:21.164 --> 00:01:23.580
because the calls are similar
regardless of which language

00:01:23.580 --> 00:01:25.560
you use.

00:01:25.560 --> 00:01:27.720
When using Google APIs,
you're either going to need

00:01:27.720 --> 00:01:29.740
authorization or you don't.

00:01:29.740 --> 00:01:32.400
For example, doing a generic
search for YouTube videos

00:01:32.400 --> 00:01:35.940
doesn't require authorization,
but accessing your Google Drive

00:01:35.940 --> 00:01:37.960
and updating your
YouTube playlists

00:01:37.960 --> 00:01:40.390
do because that's personal data.

00:01:40.390 --> 00:01:42.270
And there are code
snippets for each case.

00:01:42.270 --> 00:01:43.940
So use the right
one for the job.

00:01:43.940 --> 00:01:46.140
For us, because we're
doing Drive today,

00:01:46.140 --> 00:01:48.050
you're going to be
using the authorize one.

00:01:48.050 --> 00:01:50.591
Click the link to check out the
earlier episode on this topic

00:01:50.591 --> 00:01:51.462
if you missed it.

00:01:51.462 --> 00:01:53.670
Since we're looking at code,
let's go to the computer

00:01:53.670 --> 00:01:55.900
and write that script.

00:01:55.900 --> 00:01:56.570
OK.

00:01:56.570 --> 00:01:59.100
In a previous episode, we
looked at the boilerplate code

00:01:59.100 --> 00:02:02.220
that provides authorized
data access to Google APIs.

00:02:02.220 --> 00:02:04.990
The code is going to be very
similar, or exactly the same,

00:02:04.990 --> 00:02:07.850
to talk to any API
requiring authorized access.

00:02:07.850 --> 00:02:09.800
So you should get comfy with it.

00:02:09.800 --> 00:02:12.270
Today we're going to use
the Google Drive API.

00:02:12.270 --> 00:02:15.010
So to start we copy the
boilerplate code here

00:02:15.010 --> 00:02:16.930
as drivelist.py.

00:02:16.930 --> 00:02:18.900
You can call it
whatever you like.

00:02:18.900 --> 00:02:20.600
In this episode,
we want to list out

00:02:20.600 --> 00:02:22.370
the files in a drive folder.

00:02:22.370 --> 00:02:25.620
It's user data, hence
requiring authorized access.

00:02:25.620 --> 00:02:29.620
You can't get to this kind
of data with just an API key.

00:02:29.620 --> 00:02:32.100
Below the imports, the
first thing you need to do

00:02:32.100 --> 00:02:34.380
is set the scopes
variable on line five.

00:02:34.380 --> 00:02:37.040
Depending on what
you're trying to do,

00:02:37.040 --> 00:02:38.737
you may need one or more scopes.

00:02:38.737 --> 00:02:40.570
So either you'll have
an interval of strings

00:02:40.570 --> 00:02:44.620
or one long string with
multiple scopes space-delimited.

00:02:44.620 --> 00:02:46.920
The only scope needed
drive.readonly,

00:02:46.920 --> 00:02:49.040
and that's all we have
for the scopes variable.

00:02:49.040 --> 00:02:51.250
You can get a list of
scopes from the API stocks

00:02:51.250 --> 00:02:53.260
page or OAuth Playground.

00:02:53.260 --> 00:02:55.910
Line six is a client
secret file that you

00:02:55.910 --> 00:02:58.920
save when you click the Download
JSON button on the Projects

00:02:58.920 --> 00:03:00.400
Credentials page.

00:03:00.400 --> 00:03:01.984
When access is
granted to an app,

00:03:01.984 --> 00:03:03.400
you're given an
access token which

00:03:03.400 --> 00:03:06.669
is stored in the file
listed on line eight.

00:03:06.669 --> 00:03:08.960
Because we'll be running the
script for the first time,

00:03:08.960 --> 00:03:10.620
we've got no
credentials, meaning

00:03:10.620 --> 00:03:13.290
that we're going to fail
this if statement on line 10.

00:03:13.290 --> 00:03:15.530
That initiates the OAuth flow.

00:03:15.530 --> 00:03:18.780
Once access is granted, we need
to create a service endpoint.

00:03:18.780 --> 00:03:21.150
And that's done on line 14.

00:03:21.150 --> 00:03:23.390
The API string is
drive, since that's

00:03:23.390 --> 00:03:26.300
the API we're trying to
access, and at the time

00:03:26.300 --> 00:03:28.290
of this recording
it's on version 2.

00:03:28.290 --> 00:03:31.090
So we'll use v2 for the version.

00:03:31.090 --> 00:03:33.070
The last parameter is
using our credentials

00:03:33.070 --> 00:03:35.850
to sign our HTTP request with.

00:03:35.850 --> 00:03:38.410
Once everything executes
successfully now

00:03:38.410 --> 00:03:40.720
we'll have an endpoint to
access Google Drive with.

00:03:40.720 --> 00:03:42.220
We want to pull
down a user's files,

00:03:42.220 --> 00:03:43.940
so let's create
a files variable.

00:03:43.940 --> 00:03:47.310
And we'll use a service
endpoint to get access to that.

00:03:47.310 --> 00:03:50.100
We'll use the files
call to get file access.

00:03:50.100 --> 00:03:54.110
Then we'll use the list
method to get a list of files.

00:03:54.110 --> 00:03:56.500
And then we'll
execute that command.

00:03:56.500 --> 00:03:58.580
And if all goes well,
we'll get a payload

00:03:58.580 --> 00:04:02.210
that comes back that has
an items field in it.

00:04:02.210 --> 00:04:07.160
But just in case, we'll give an
empty list so that our for loop

00:04:07.160 --> 00:04:09.310
doesn't fail down below.

00:04:09.310 --> 00:04:11.620
Now we want to iterate
over each file.

00:04:11.620 --> 00:04:14.120
For every file in files,
what are we going to do?

00:04:14.120 --> 00:04:16.390
We're going to display
the file's name, which

00:04:16.390 --> 00:04:19.420
is given with the title field.

00:04:19.420 --> 00:04:21.230
And we'll display
its type, which

00:04:21.230 --> 00:04:24.590
is given with the
MIME type field.

00:04:24.590 --> 00:04:26.130
And that is pretty much it.

00:04:26.130 --> 00:04:27.790
We actually should
be good to go.

00:04:27.790 --> 00:04:30.995
So let's give it a shot over in
the command line window here.

00:04:30.995 --> 00:04:33.120
By the way, if you want to
know what other data you

00:04:33.120 --> 00:04:36.340
can get access to from the
API, just check out the docs.

00:04:36.340 --> 00:04:37.360
Now let's run it.

00:04:37.360 --> 00:04:39.360
Go through the OAuth flow,
get some credentials,

00:04:39.360 --> 00:04:41.170
and see some Drive files.

00:04:41.170 --> 00:04:43.190
By the way, before
I execute this,

00:04:43.190 --> 00:04:45.720
at the time of this
recording you'll

00:04:45.720 --> 00:04:48.720
get a warning saying that
the tools.run function is

00:04:48.720 --> 00:04:51.150
deprecated, which is true.

00:04:51.150 --> 00:04:53.720
There is a newer
function called Run Flow,

00:04:53.720 --> 00:04:56.960
but it requires additional
code on the Python side.

00:04:56.960 --> 00:05:00.010
We will look at those
changes in another episode.

00:05:00.010 --> 00:05:02.970
So for now, let's just
use tools.run as is.

00:05:02.970 --> 00:05:04.200
It's not quite dead yet.

00:05:04.200 --> 00:05:07.240
There's lots of code that still
uses it, but at some point

00:05:07.240 --> 00:05:09.540
it will be taken away.

00:05:09.540 --> 00:05:11.770
So when we run
this command, we'll

00:05:11.770 --> 00:05:16.510
see our browser window pop up
to go through the OAuth 2 flow.

00:05:16.510 --> 00:05:17.990
And you can see it come up here.

00:05:17.990 --> 00:05:20.360
Now instead of getting
the OAuth 2 window,

00:05:20.360 --> 00:05:22.580
if you actually get
a 401 error saying

00:05:22.580 --> 00:05:24.860
you're missing an application
name or email just

00:05:24.860 --> 00:05:27.730
go to your Projects
Consent screen page

00:05:27.730 --> 00:05:31.130
and fill out those two fields--
all the others are optional--

00:05:31.130 --> 00:05:33.900
and save it.

00:05:33.900 --> 00:05:37.350
And then you'll be able to
get to this exact screen here.

00:05:37.350 --> 00:05:39.890
Once a user accepts,
a valid access token

00:05:39.890 --> 00:05:42.060
is sent back and saved
in the storage.JSON

00:05:42.060 --> 00:05:43.960
file on lines 8 and 12.

00:05:43.960 --> 00:05:46.110
And then it'll just
execute our code down here.

00:05:46.110 --> 00:05:50.610
So we should see a bunch
of Drive files pop up here.

00:05:50.610 --> 00:05:53.110
And boom, there they are.

00:05:53.110 --> 00:05:53.940
All right.

00:05:53.940 --> 00:05:56.890
That was less than 20 lines
of code accessing your Drive

00:05:56.890 --> 00:05:58.870
files, and it's
just the beginning.

00:05:58.870 --> 00:06:00.130
Thinking about a mobile app?

00:06:00.130 --> 00:06:03.220
Well, Drive has both
Android and iOS APIs.

00:06:03.220 --> 00:06:06.540
Check out the developer
docs to find out more.

00:06:06.540 --> 00:06:08.540
Well, we hope we've
inspired you in this episode

00:06:08.540 --> 00:06:10.419
to see what you can
do with Google Drive.

00:06:10.419 --> 00:06:12.710
This is Wesley Chun from
Google, and we'll see you here

00:06:12.710 --> 00:06:15.430
next time on The Launch Pad.

