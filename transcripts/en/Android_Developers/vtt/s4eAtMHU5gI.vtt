WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.240
[MUSIC PLAYING]

00:00:02.240 --> 00:00:04.210
What do we do with
threaded work when

00:00:04.210 --> 00:00:06.850
the activity that kicked
it off is no longer alive?

00:00:06.850 --> 00:00:09.220
I'm Doug Stevenson, and
this is the exact issue

00:00:09.220 --> 00:00:10.850
solved by loaders.

00:00:10.850 --> 00:00:13.500
By now, you've seen that
activities in your application

00:00:13.500 --> 00:00:15.900
can be created and
destroyed at any time,

00:00:15.900 --> 00:00:17.960
either in response to the
user or because Android

00:00:17.960 --> 00:00:19.320
needed the resources.

00:00:19.320 --> 00:00:21.530
This poses a problem
for your threaded work

00:00:21.530 --> 00:00:25.110
since the work may extend beyond
the lifetime of the activity.

00:00:25.110 --> 00:00:27.110
Say you have a thread
chugging away at some work

00:00:27.110 --> 00:00:29.140
and that thread holds
references to views that

00:00:29.140 --> 00:00:30.880
will update upon completion.

00:00:30.880 --> 00:00:33.230
If the activity ends before
the work is complete,

00:00:33.230 --> 00:00:34.760
a few things will happen.

00:00:34.760 --> 00:00:37.610
First, because the strong
references to the views,

00:00:37.610 --> 00:00:39.590
the activity object
will be kept in memory

00:00:39.590 --> 00:00:41.620
until the work finally finishes.

00:00:41.620 --> 00:00:43.140
This is a memory
leak, and we don't

00:00:43.140 --> 00:00:44.930
have to tell you
this is bad since it

00:00:44.930 --> 00:00:48.060
can cause your app to run out
of memory and eventually crash.

00:00:48.060 --> 00:00:50.600
Second, the late
updates to these views

00:00:50.600 --> 00:00:52.620
are wasted because
they're no longer visible.

00:00:52.620 --> 00:00:55.140
And third, you might
have to repeat the work

00:00:55.140 --> 00:00:57.339
for a whole new set of views.

00:00:57.339 --> 00:00:59.130
To get your threaded
work to correctly cope

00:00:59.130 --> 00:01:01.520
with the activity lifecycle
and avoid these problems,

00:01:01.520 --> 00:01:03.140
you should use loaders.

00:01:03.140 --> 00:01:05.400
Loaders are wise to the inner
workings of the activity

00:01:05.400 --> 00:01:07.855
lifecycle, so you can
ensure your work ends

00:01:07.855 --> 00:01:09.570
in the right place every time.

00:01:09.570 --> 00:01:12.620
A properly implemented loader
is resistant to activity leaks,

00:01:12.620 --> 00:01:14.310
always updates
the correct views,

00:01:14.310 --> 00:01:17.460
and is never repeated
unnecessarily.

00:01:17.460 --> 00:01:19.330
Let's take a look
at how this works.

00:01:19.330 --> 00:01:21.430
Instead of kicking off
your work in an async task

00:01:21.430 --> 00:01:23.030
or some other
thread you control,

00:01:23.030 --> 00:01:26.100
you ask the activity for an
instance of a loader manager.

00:01:26.100 --> 00:01:27.720
Send the work to
the loader manager

00:01:27.720 --> 00:01:30.420
and it will make sure that your
work may be handled properly

00:01:30.420 --> 00:01:33.390
in the face of configuration
changes for the activity.

00:01:33.390 --> 00:01:35.650
The loader manager also
caches the work results

00:01:35.650 --> 00:01:38.460
so that it won't be repeated
with future changes.

00:01:38.460 --> 00:01:40.740
Now, what if an activity
with an active loader

00:01:40.740 --> 00:01:43.010
is being popped of the
stack, never to return?

00:01:43.010 --> 00:01:45.079
What happens to
this in-flight work?

00:01:45.079 --> 00:01:47.120
In this case, the loader
manager makes a callback

00:01:47.120 --> 00:01:50.400
into your code, saying that
its results will never be used.

00:01:50.400 --> 00:01:52.430
You can use this callback
to abort the work,

00:01:52.430 --> 00:01:55.920
clean up, and move on without
wasting any more resources.

00:01:55.920 --> 00:01:57.840
Now, it's worth
noting that loaders

00:01:57.840 --> 00:02:00.150
are specific to
activities, and as such,

00:02:00.150 --> 00:02:02.740
give you a solid framework
for separating your views

00:02:02.740 --> 00:02:05.214
from your worker threads and
minimize the amount of work

00:02:05.214 --> 00:02:07.380
you would otherwise have
to repeat with the activity

00:02:07.380 --> 00:02:08.711
lifecycle.

00:02:08.711 --> 00:02:10.169
The downside of
loaders is that can

00:02:10.169 --> 00:02:12.550
be quite a bit of extra
code to get them correctly

00:02:12.550 --> 00:02:13.816
integrated into your app.

00:02:13.816 --> 00:02:15.190
So to help you
get started, we've

00:02:15.190 --> 00:02:17.840
provided some sample code
illustrating some common use

00:02:17.840 --> 00:02:18.830
cases.

00:02:18.830 --> 00:02:21.510
And for more information on
improving your application

00:02:21.510 --> 00:02:24.270
performance, keep watching the
Android Performance Patterns

00:02:24.270 --> 00:02:24.820
videos.

00:02:24.820 --> 00:02:27.920
And don't forget to join the G+
community for advice from other

00:02:27.920 --> 00:02:28.910
great engineers.

00:02:28.910 --> 00:02:33.200
So keep calm, profile your
code, and always remember,

00:02:33.200 --> 00:02:34.290
#perfmatters.

00:02:34.290 --> 00:02:37.340
[MUSIC PLAYING]

