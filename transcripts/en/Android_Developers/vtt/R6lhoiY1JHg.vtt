WEBVTT
Kind: captions
Language: en

00:00:04.455 --> 00:00:06.462
CHRIS BANES: Chris Banes.

00:00:06.462 --> 00:00:07.290
NICK BUTCHER: I'm Nick Butcher.

00:00:07.290 --> 00:00:08.280
Hi.

00:00:08.280 --> 00:00:09.140
RICHARD HYNDMAN: I'm
Richard Hyndman.

00:00:09.140 --> 00:00:09.540
Hi.

00:00:09.540 --> 00:00:11.360
CHRIS BANES: We're going to keep
it short this week, as

00:00:11.360 --> 00:00:13.636
we're all busy guys, and
we're going to keep it

00:00:13.636 --> 00:00:15.170
down to half an hour.

00:00:15.170 --> 00:00:17.580
So should we get started
straight into any questions?

00:00:17.580 --> 00:00:18.410
Hi, Giuseppe.

00:00:18.410 --> 00:00:19.800
GIUSEPPE: Hello.

00:00:19.800 --> 00:00:20.760
FEMALE SPEAKER: [INAUDIBLE].

00:00:20.760 --> 00:00:22.200
CHRIS BANES: Shall we get
straight into the moderator?

00:00:22.200 --> 00:00:23.060
NICK BUTCHER: Let's do it.

00:00:23.060 --> 00:00:24.470
RICHARD HYNDMAN: Yeah, we're
going to focus primarily on

00:00:24.470 --> 00:00:25.350
the moderator this week because

00:00:25.350 --> 00:00:26.330
we're down to 30 minutes.

00:00:26.330 --> 00:00:28.780
So anyone who spotted
on Monday--

00:00:28.780 --> 00:00:31.980
we put a post on Plus Android
Developers saying we're

00:00:31.980 --> 00:00:34.280
bringing it down, making it a
bit more of a compact show,

00:00:34.280 --> 00:00:37.360
and be more of a guide to what's
actually been going on

00:00:37.360 --> 00:00:38.505
in the show afterwards,
as well.

00:00:38.505 --> 00:00:39.855
CHRIS BANES: Yeah, and we might
be trying to play with

00:00:39.855 --> 00:00:40.636
the format quite
a bit, as well.

00:00:40.636 --> 00:00:42.600
NICK BUTCHER: [INAUDIBLE]
through all of Andrew K.'s

00:00:42.600 --> 00:00:44.150
questions unless
we [INAUDIBLE].

00:00:44.150 --> 00:00:45.870
RICHARD HYNDMAN: [INAUDIBLE]
moderator machine saw the post

00:00:45.870 --> 00:00:47.760
on Monday [INAUDIBLE]

00:00:47.760 --> 00:00:53.089
and put like 28 questions in.

00:00:53.089 --> 00:00:54.630
CHRIS BANES: OK.

00:00:54.630 --> 00:00:57.240
Let's go for it.

00:00:57.240 --> 00:01:01.410
So [? Everland ?] has asked,
"will all developers be able

00:01:01.410 --> 00:01:02.980
to reply to comments
on Google Play.

00:01:02.980 --> 00:01:06.351
If so, is there an
estimated date?"

00:01:06.351 --> 00:01:08.140
RICHARD HYNDMAN: That is
one of the things we

00:01:08.140 --> 00:01:09.730
usually put in the--

00:01:09.730 --> 00:01:10.420
NICK BUTCHER: Top of the show.

00:01:10.420 --> 00:01:11.695
RICHARD HYNDMAN: --top
of the show.

00:01:11.695 --> 00:01:13.690
We won't be announcing any
roadmaps, things that aren't

00:01:13.690 --> 00:01:14.940
[INAUDIBLE] talk about,
blah, blah, blah.

00:01:14.940 --> 00:01:17.510
NICK BUTCHER: But we have
[INAUDIBLE] said that the idea

00:01:17.510 --> 00:01:19.155
is to get the reply to reviews
out to everyone.

00:01:19.155 --> 00:01:21.440
We're just taking some time
building the features, and

00:01:21.440 --> 00:01:23.030
things to support that.

00:01:23.030 --> 00:01:24.873
So it's kind of in a small
testing group at the moment.

00:01:24.873 --> 00:01:27.700
Not that small.

00:01:27.700 --> 00:01:28.165
OK.

00:01:28.165 --> 00:01:29.415
Next question.

00:01:34.350 --> 00:01:35.300
Shall we go from the top?

00:01:35.300 --> 00:01:38.010
"Is there an API to
programmatically build a video

00:01:38.010 --> 00:01:39.190
frame by frame?

00:01:39.190 --> 00:01:42.048
I want to do this to be able to
screen capture from my app

00:01:42.048 --> 00:01:43.936
so I can convert what is
happening on the screen into a

00:01:43.936 --> 00:01:47.510
video and upload it to YouTube
from within the app." And

00:01:47.510 --> 00:01:49.386
that's asked by Neo
in New York City.

00:01:49.386 --> 00:01:50.440
RICHARD HYNDMAN: No, there's
not an official

00:01:50.440 --> 00:01:52.080
Android API for that.

00:01:52.080 --> 00:01:53.350
I guess you could do it.

00:01:53.350 --> 00:01:54.080
You could grab FFmpeg or

00:01:54.080 --> 00:01:56.140
something and put one together.

00:01:56.140 --> 00:01:58.810
You could have a look at using
the media code at classes to

00:01:58.810 --> 00:01:59.616
try and put one together.

00:01:59.616 --> 00:02:02.156
But it certainly wouldn't create
a video stream with an

00:02:02.156 --> 00:02:03.260
output you could upload
to YouTube.

00:02:03.260 --> 00:02:04.690
NICK BUTCHER: It's not
automated that way.

00:02:04.690 --> 00:02:07.230
You'd have to do some kind of
color space conversions and

00:02:07.230 --> 00:02:08.469
all this stuff, turn it into
a stream, basically,

00:02:08.469 --> 00:02:10.365
from the bit map.

00:02:10.365 --> 00:02:11.845
It will be extremely
[? non-trivial. ?]

00:02:11.845 --> 00:02:12.910
CHRIS BANES: Yeah, the main
trouble you're going to have

00:02:12.910 --> 00:02:15.120
is getting the actual screen
shots and the actual--

00:02:15.120 --> 00:02:16.140
RICHARD HYNDMAN: [INAUDIBLE].

00:02:16.140 --> 00:02:18.052
It's OK.

00:02:18.052 --> 00:02:18.705
CHRIS BANES: True.

00:02:18.705 --> 00:02:20.595
But it's going to be
slow [INAUDIBLE].

00:02:20.595 --> 00:02:21.480
RICHARD HYNDMAN: Yeah, it's
not going to ideal.

00:02:21.480 --> 00:02:23.700
So no, not really,
there's no--

00:02:23.700 --> 00:02:24.820
NICK BUTCHER: So an alternative
to this, though.

00:02:24.820 --> 00:02:26.596
I've seen a bunch of games,
especially, who want to do

00:02:26.596 --> 00:02:28.693
this kind of thing, want to
capture footage and upload it

00:02:28.693 --> 00:02:29.110
to YouTube.

00:02:29.110 --> 00:02:31.560
And what they found easier
is to almost

00:02:31.560 --> 00:02:32.670
capture the input events--

00:02:32.670 --> 00:02:35.270
like what the user's pressed and
time codes and whatnot--

00:02:35.270 --> 00:02:38.270
and upload that, which is quite
efficient, to a server.

00:02:38.270 --> 00:02:41.050
And then almost, like, replay
the action and generate a

00:02:41.050 --> 00:02:42.370
video on the server.

00:02:42.370 --> 00:02:45.095
And from your server, upload
it to YouTube.

00:02:45.095 --> 00:02:46.040
So that's a possible
alternative.

00:02:46.040 --> 00:02:47.683
I don't know from your
description whether that would

00:02:47.683 --> 00:02:50.281
work for you, but it's something
to consider.

00:02:50.281 --> 00:02:51.560
RICHARD HYNDMAN: Yeah,
that's a good point.

00:02:51.560 --> 00:02:55.370
Trying to video a 25, 30
frames-a-second game as it's

00:02:55.370 --> 00:02:57.340
playing could probably have
quite an impact on

00:02:57.340 --> 00:02:59.040
performance, as well, writing
that app to the memory and

00:02:59.040 --> 00:03:01.930
then converting it and uploading
it afterwards.

00:03:01.930 --> 00:03:03.320
OK.

00:03:03.320 --> 00:03:07.060
Welcome to Johann, as well,
and Paul [? as well. ?]

00:03:07.060 --> 00:03:08.465
Hey guys, thanks
for joining us.

00:03:08.465 --> 00:03:09.971
JOHANN: Yeah.

00:03:09.971 --> 00:03:12.135
PAUL: Hi, guys.

00:03:12.135 --> 00:03:13.961
RICHARD HYNDMAN: [INAUDIBLE].

00:03:13.961 --> 00:03:17.200
PAUL: Hi, I put one question
on last minute.

00:03:17.200 --> 00:03:18.620
[INAUDIBLE] very lastminute.com
today.

00:03:18.620 --> 00:03:19.850
Sorry about that.

00:03:19.850 --> 00:03:23.340
I'm just wondering about if you
guys have come across any

00:03:23.340 --> 00:03:27.100
browsers that do two-way SSL
using the key chain.

00:03:27.100 --> 00:03:28.790
Have you heard of anything
like that?

00:03:28.790 --> 00:03:29.710
NICK BUTCHER: Nope.

00:03:29.710 --> 00:03:32.210
CHRIS BANES: Nope.

00:03:32.210 --> 00:03:34.140
RICHARD HYNDMAN: I assume you
mean Android, at least?

00:03:34.140 --> 00:03:34.740
PAUL: Yeah, sorry.

00:03:34.740 --> 00:03:35.060
Android.

00:03:35.060 --> 00:03:35.620
On the Android.

00:03:35.620 --> 00:03:36.540
Yeah, on the Android device.

00:03:36.540 --> 00:03:38.480
Anything on the Play Store
anyone know of?

00:03:38.480 --> 00:03:39.340
RICHARD HYNDMAN: No.

00:03:39.340 --> 00:03:41.080
I just had a quick search
of the Play Store.

00:03:41.080 --> 00:03:42.590
There aren't that many high-end
browsers [INAUDIBLE]

00:03:42.590 --> 00:03:44.720
try them out.

00:03:44.720 --> 00:03:46.700
But no, I've certainly not
tested that many of hte brands

00:03:46.700 --> 00:03:46.930
[INAUDIBLE]

00:03:46.930 --> 00:03:48.680
we'll see in a future
list anywhere.

00:03:48.680 --> 00:03:49.644
PAUL: All right.

00:03:49.644 --> 00:03:52.054
Cheers.

00:03:52.054 --> 00:03:52.960
RICHARD HYNDMAN: All right.

00:03:52.960 --> 00:03:54.180
Next muffin.

00:03:54.180 --> 00:03:54.830
Matt's not here.

00:03:54.830 --> 00:03:55.770
He should get our next muffin.

00:03:55.770 --> 00:03:57.725
NICK BUTCHER: Matt's sick today,
so we might have to

00:03:57.725 --> 00:04:00.463
bench Google TV questions
until next week.

00:04:00.463 --> 00:04:02.515
RICHARD HYNDMAN: He's
probably watching.

00:04:02.515 --> 00:04:04.130
NICK BUTCHER: Get
well soon, Matt.

00:04:04.130 --> 00:04:07.881
RICHARD HYNDMAN: Come
on, next one.

00:04:07.881 --> 00:04:10.600
NICK BUTCHER: OK, so I'll
read the next one, then.

00:04:10.600 --> 00:04:13.340
Next question says, "what is
the current status of app

00:04:13.340 --> 00:04:15.020
encryption in Jelly Bean?

00:04:15.020 --> 00:04:18.095
Blogs reported in August that
it was disabled, but

00:04:18.095 --> 00:04:20.350
conflicting reports from
users and devs--

00:04:20.350 --> 00:04:20.809
if [INAUDIBLE]

00:04:20.809 --> 00:04:24.520
SDK 16, as in Android 4.1, and
[? paid up ?] is published

00:04:24.520 --> 00:04:28.190
this month, will it be encrypted
on all devices?"

00:04:28.190 --> 00:04:30.680
RICHARD HYNDMAN: I think
yes is the answer.

00:04:30.680 --> 00:04:32.870
Last I heard, it did go live
and then there were some

00:04:32.870 --> 00:04:35.400
issues, so we kind of pulled it
back out, played with it,

00:04:35.400 --> 00:04:36.500
fix them, put it
back in again.

00:04:36.500 --> 00:04:38.000
But that was all resolved
months and

00:04:38.000 --> 00:04:39.820
months and months ago.

00:04:39.820 --> 00:04:41.760
As far as I know, the app
encryption has been working on

00:04:41.760 --> 00:04:44.550
Jelly Bean for many
months now.

00:04:47.296 --> 00:04:48.385
CHRIS BANES: Here's
a question--

00:04:48.385 --> 00:04:50.027
RICHARD HYNDMAN: For paid
applications from the Play

00:04:50.027 --> 00:04:51.972
Store qualify.

00:04:51.972 --> 00:04:55.160
CHRIS BANES: Here's a question
from [? Weiful. ?]

00:04:55.160 --> 00:04:56.240
It's a design type question.

00:04:56.240 --> 00:04:59.120
So, "is it fine to have a
horizontally scrolling views

00:04:59.120 --> 00:05:02.410
[? locker view ?] pager in
a [? verti-scrolling ?]

00:05:02.410 --> 00:05:06.020
scroll view?" Apparently he's
seen many apps that do this.

00:05:06.020 --> 00:05:07.880
And, "does this go against the
Android design principles?"

00:05:07.880 --> 00:05:10.310
RICHARD HYNDMAN: I think he's
talking about the kind of BBC

00:05:10.310 --> 00:05:14.000
News style app, [INAUDIBLE]
style app, where you have a

00:05:14.000 --> 00:05:16.160
list of horizontally
scrolling views.

00:05:16.160 --> 00:05:18.930
And it's quite a good way of
laying out information on an

00:05:18.930 --> 00:05:20.810
Android device because you can
flick through it both ways

00:05:20.810 --> 00:05:22.250
with one hand.

00:05:22.250 --> 00:05:24.030
So if you have topic-based
information, it could work.

00:05:24.030 --> 00:05:25.115
But from a design
point of view?

00:05:25.115 --> 00:05:25.710
Do you want to?

00:05:25.710 --> 00:05:26.290
NICK BUTCHER: Yeah.

00:05:26.290 --> 00:05:27.300
No troubles with that.

00:05:27.300 --> 00:05:30.220
I guess be careful that it
is easy to navigate.

00:05:30.220 --> 00:05:31.973
You don't want the user to feel
lost at any point, so

00:05:31.973 --> 00:05:35.830
make sure you've enough highway
signs, or whatever you

00:05:35.830 --> 00:05:38.360
want to call it, that the user
knows exactly where they are.

00:05:38.360 --> 00:05:39.760
And also be careful of your
finger tracking, as well,

00:05:39.760 --> 00:05:41.180
making sure you're locking
in one direction.

00:05:41.180 --> 00:05:43.320
It can get quite annoying if
you're trying to scroll down

00:05:43.320 --> 00:05:45.513
and you have a slight movement
one way and it cancels it or

00:05:45.513 --> 00:05:46.930
it starts scrolling
another way.

00:05:46.930 --> 00:05:48.724
So just make sure that all
that works well for you.

00:05:48.724 --> 00:05:50.610
But yeah, from a design point
of view, I don't see any

00:05:50.610 --> 00:05:51.762
problem with it.

00:05:51.762 --> 00:05:52.970
RICHARD HYNDMAN: Yeah.

00:05:52.970 --> 00:05:54.900
I guess it gives you
the ability to have

00:05:54.900 --> 00:05:57.040
infinity times something.

00:05:57.040 --> 00:05:58.260
[INAUDIBLE] amount of data.

00:05:58.260 --> 00:05:58.740
So instead of just having one
infinite scrolling list, you

00:05:58.740 --> 00:06:02.210
could have an infinite number
of infinite scrolling lists.

00:06:02.210 --> 00:06:03.410
Infinity times infinity.

00:06:03.410 --> 00:06:04.572
So much more data.

00:06:04.572 --> 00:06:05.822
NICK BUTCHER: Let's go on.

00:06:07.684 --> 00:06:09.130
RICHARD HYNDMAN: Next one.

00:06:09.130 --> 00:06:09.860
NICK BUTCHER: OK.

00:06:09.860 --> 00:06:10.850
So, [? Nani ?]

00:06:10.850 --> 00:06:16.040
in California asks, "After the
end of any key event, root

00:06:16.040 --> 00:06:16.850
view [? import ?]

00:06:16.850 --> 00:06:19.055
calls focus search on
the view, which

00:06:19.055 --> 00:06:20.700
currently has focus.

00:06:20.700 --> 00:06:22.966
In the case of list view, there
is no view at the top

00:06:22.966 --> 00:06:23.600
and bottom.

00:06:23.600 --> 00:06:26.270
The root view will return
a different view.

00:06:26.270 --> 00:06:29.860
How does ListView handle
this scenario?"

00:06:29.860 --> 00:06:31.870
CHRIS BANES: Have a look
at the ListView source.

00:06:31.870 --> 00:06:35.090
Handling focus is tricky,
it's quite complex.

00:06:35.090 --> 00:06:38.425
So it's all in there, so it's
[INAUDIBLE] doing it, really.

00:06:38.425 --> 00:06:41.210
I don't know the intricacies of
it, because it's different

00:06:41.210 --> 00:06:42.330
for each implementation.

00:06:42.330 --> 00:06:45.750
So ListView will do it linearly
as it goes down,

00:06:45.750 --> 00:06:49.650
whereas GridView will do left,
right, in a grid view.

00:06:49.650 --> 00:06:53.735
So just have a look at
the source and see.

00:06:53.735 --> 00:06:56.418
NICK BUTCHER: Tricky.

00:06:56.418 --> 00:06:57.873
RICHARD HYNDMAN: But
one of those great

00:06:57.873 --> 00:06:59.520
things about Android.

00:06:59.520 --> 00:07:01.670
We can always just [INAUDIBLE]
it off by

00:07:01.670 --> 00:07:03.416
saying look at the source.

00:07:03.416 --> 00:07:05.240
CHRIS BANES: It's
pretty readable.

00:07:05.240 --> 00:07:06.936
[INAUDIBLE].

00:07:06.936 --> 00:07:08.355
NICK BUTCHER: So, next
question from

00:07:08.355 --> 00:07:10.280
Andrew K., in Sydney.

00:07:10.280 --> 00:07:12.910
"When passing parameters to
an intent, do you have any

00:07:12.910 --> 00:07:15.670
thoughts on why some methods
use ArrayList--

00:07:15.670 --> 00:07:17.910
e.g., putStringArrayListExtra.

00:07:17.910 --> 00:07:19.580
I always thought it was
bad practice to use an

00:07:19.580 --> 00:07:21.370
implementation instead
of an interface.

00:07:21.370 --> 00:07:25.345
Why not put StringListExtra.

00:07:25.345 --> 00:07:27.020
CHRIS BANES: I had a look at
the source [INAUDIBLE] this

00:07:27.020 --> 00:07:29.580
morning and I couldn't see a
reason why they've done this.

00:07:29.580 --> 00:07:32.940
I guess it's just previously
there was a performance

00:07:32.940 --> 00:07:34.570
penalty with using interfaces.

00:07:34.570 --> 00:07:37.970
AL SUTTON: It might also be that
when you define the AIDL,

00:07:37.970 --> 00:07:40.470
you have to define concrete
types and list isn't a

00:07:40.470 --> 00:07:41.240
concrete type.

00:07:41.240 --> 00:07:43.120
CHRIS BANES: That's true.

00:07:43.120 --> 00:07:44.950
Yeah, that's probably
it, actually.

00:07:44.950 --> 00:07:46.300
NICK BUTCHER: [INAUDIBLE].

00:07:46.300 --> 00:07:47.950
CHRIS BANES: Yeah.

00:07:47.950 --> 00:07:49.790
RICHARD HYNDMAN: Nice.

00:07:49.790 --> 00:07:50.620
Good to have you back, Al.

00:07:50.620 --> 00:07:52.764
AL SUTTON: It's a pleasure.

00:07:52.764 --> 00:07:54.014
RICHARD HYNDMAN: OUYA.

00:07:56.340 --> 00:07:56.680
OK?

00:07:56.680 --> 00:07:57.700
CHRIS BANES: Yeah, that's
pretty much the answer

00:07:57.700 --> 00:07:58.490
[? to it. ?]

00:07:58.490 --> 00:08:00.322
RICHARD HYNDMAN:
Next one, yeah.

00:08:00.322 --> 00:08:01.645
NICK BUTCHER: Should
I go again?

00:08:01.645 --> 00:08:02.234
RICHARD HYNDMAN: Yeah.

00:08:02.234 --> 00:08:02.910
[INAUDIBLE].

00:08:02.910 --> 00:08:05.030
NICK BUTCHER: So one's just
popped up on moderator as I

00:08:05.030 --> 00:08:05.770
was looking.

00:08:05.770 --> 00:08:07.830
[? Azertas Set ?]

00:08:07.830 --> 00:08:11.450
asks, "If I have a progress
dialog showing in a fragment

00:08:11.450 --> 00:08:14.710
when I download data, how can
I remove the dialog if the

00:08:14.710 --> 00:08:17.495
phone comes back from
soft close?

00:08:17.495 --> 00:08:21.070
How can I prevent the dialog
from being leaked?" What's

00:08:21.070 --> 00:08:21.890
soft close?

00:08:21.890 --> 00:08:23.436
RICHARD HYNDMAN: I was going
to say, what do you think a

00:08:23.436 --> 00:08:23.650
soft close--

00:08:23.650 --> 00:08:25.844
CHRIS BANES: [? Hitting ?]
home button?

00:08:25.844 --> 00:08:29.140
AL SUTTON: Does he mean
on pause or on stop?

00:08:29.140 --> 00:08:30.470
CHRIS BANES: [INAUDIBLE] stop.

00:08:30.470 --> 00:08:32.728
NICK BUTCHER: I don't know.

00:08:32.728 --> 00:08:33.950
RICHARD HYNDMAN: [INAUDIBLE]

00:08:33.950 --> 00:08:36.293
if the phone comes back from a
soft close, and then the app

00:08:36.293 --> 00:08:39.549
is still in memory, but it's
just being resumed again?

00:08:39.549 --> 00:08:44.320
And it's just all that
relaunching [INAUDIBLE]

00:08:44.320 --> 00:08:46.280
you'll get it on resume.

00:08:46.280 --> 00:08:47.480
You can either choose on
[INAUDIBLE] pause or

00:08:47.480 --> 00:08:48.730
[INAUDIBLE] resume.

00:08:51.332 --> 00:08:54.360
NICK BUTCHER: Can you reply,
Azertas, if you're still here

00:08:54.360 --> 00:08:56.350
following along, with
some clarification

00:08:56.350 --> 00:08:56.930
on what you're asking?

00:08:56.930 --> 00:08:59.655
RICHARD HYNDMAN: I mean, at the
time when it returns from

00:08:59.655 --> 00:09:02.690
soft close, you should get some
kind of indication from

00:09:02.690 --> 00:09:04.390
the system that your
app has resumed--

00:09:04.390 --> 00:09:07.320
probably [INAUDIBLE] resume,
depending on what you mean by

00:09:07.320 --> 00:09:07.760
soft close.

00:09:07.760 --> 00:09:09.060
By that point, you
should check if

00:09:09.060 --> 00:09:11.020
your download is finished.

00:09:11.020 --> 00:09:12.800
If it has finished, of course,
just remove the dialog.

00:09:12.800 --> 00:09:18.536
If it hasn't finished,
just update it.

00:09:18.536 --> 00:09:20.120
NICK BUTCHER: Yeah,
[INAUDIBLE]

00:09:20.120 --> 00:09:23.270
might be to, if you do get your
on pause, to dismiss the

00:09:23.270 --> 00:09:25.780
dialog itself and perhaps write
a notification if the

00:09:25.780 --> 00:09:27.540
download is ongoing.

00:09:27.540 --> 00:09:30.530
And then when you're on
resume, you can cancel

00:09:30.530 --> 00:09:31.725
[INAUDIBLE] and re-initiate
the dialog.

00:09:31.725 --> 00:09:32.850
Might be a nice way.

00:09:32.850 --> 00:09:34.159
So you're never actually losing
track--it's always one

00:09:34.159 --> 00:09:35.351
or the other.

00:09:35.351 --> 00:09:36.260
CHRIS BANES: [INAUDIBLE]

00:09:36.260 --> 00:09:38.710
the leaking section, you'll
never leak a dialog, all that,

00:09:38.710 --> 00:09:40.010
because it would bounce
the activity.

00:09:40.010 --> 00:09:42.790
So as soon as the activity
goes, your dialog will.

00:09:42.790 --> 00:09:44.956
So memory-wise, you'll
never leak it.

00:09:44.956 --> 00:09:47.060
RICHARD HYNDMAN: Nice.

00:09:47.060 --> 00:09:48.020
NICK BUTCHER: Cool.

00:09:48.020 --> 00:09:49.110
All right.

00:09:49.110 --> 00:09:50.110
Next question.

00:09:50.110 --> 00:09:50.634
RICHARD HYNDMAN: Flying through

00:09:50.634 --> 00:09:50.730
these moderators today.

00:09:50.730 --> 00:09:52.640
NICK BUTCHER: So Andrew
K. has put another

00:09:52.640 --> 00:09:53.390
question in to the moderator.

00:09:53.390 --> 00:09:54.580
CHRIS BANES: Of course he has.

00:09:54.580 --> 00:09:56.830
NICK BUTCHER: "Once an intense
service enters the on handle

00:09:56.830 --> 00:09:59.967
intent method, is there a way to
cancel the processing from

00:09:59.967 --> 00:10:01.910
an activity?"

00:10:01.910 --> 00:10:06.016
He's after something like the
cancel method on AsyncTask.

00:10:06.016 --> 00:10:08.033
But he'd also accept
[INAUDIBLE].

00:10:08.033 --> 00:10:09.950
RICHARD HYNDMAN: [INAUDIBLE]
minus nine.

00:10:09.950 --> 00:10:11.795
Death to my intent service.

00:10:11.795 --> 00:10:13.020
CHRIS BANES: No, there's not.

00:10:13.020 --> 00:10:14.930
RICHARD HYNDMAN: There's
no priority

00:10:14.930 --> 00:10:16.220
handling, there's no ordering.

00:10:16.220 --> 00:10:18.170
It's just the order in which
it receives them, right?

00:10:18.170 --> 00:10:19.890
CHRIS BANES: It's supposed to
be a fire and forget type

00:10:19.890 --> 00:10:22.190
service, so you're not supposed
to really care what

00:10:22.190 --> 00:10:23.895
happens after you've fired it.

00:10:23.895 --> 00:10:25.150
RICHARD HYNDMAN: Usually there's
somewhere in the link

00:10:25.150 --> 00:10:25.673
you can build a [? finish in ?]
or

00:10:25.673 --> 00:10:26.540
something like that.

00:10:26.540 --> 00:10:28.755
CHRIS BANES: Yeah,
[INAUDIBLE].

00:10:28.755 --> 00:10:29.600
It's in [? Railway Spice, ?]

00:10:29.600 --> 00:10:29.940
I think, isn't it?

00:10:29.940 --> 00:10:31.840
Don't know if you guys have
ever looked at that.

00:10:31.840 --> 00:10:34.114
It's a third-party library
out there for doing

00:10:34.114 --> 00:10:35.300
this kind of thing.

00:10:35.300 --> 00:10:36.550
MALE SPEAKER: [INAUDIBLE].

00:10:38.866 --> 00:10:41.300
NICK BUTCHER: Hello, whoever
said that, thanks for your

00:10:41.300 --> 00:10:44.226
contribution.

00:10:44.226 --> 00:10:47.390
AL SUTTON: It's probably worth
looking at this level of

00:10:47.390 --> 00:10:50.740
detail setting up a custom
binder and putting the code in

00:10:50.740 --> 00:10:53.433
that, and then just having the
main service loop look for a

00:10:53.433 --> 00:10:55.360
setting that you're setting
borrow method in that binder.

00:10:55.360 --> 00:10:57.130
RICHARD HYNDMAN: Yeah.

00:10:57.130 --> 00:10:59.650
It'll pick it up at some
point and dump out.

00:10:59.650 --> 00:11:01.470
I'd agree.

00:11:01.470 --> 00:11:03.300
If you know that this is a case
that you're going to be

00:11:03.300 --> 00:11:04.650
frequently coming across.

00:11:04.650 --> 00:11:07.186
CHRIS BANES: Yeah, there's
many ways of doing it.

00:11:07.186 --> 00:11:09.960
AL SUTTON: Is intense service
designed for long-running

00:11:09.960 --> 00:11:10.500
tasks, though?

00:11:10.500 --> 00:11:13.320
Because I tend to only use it
for short-running things, so

00:11:13.320 --> 00:11:16.100
it wouldn't really have an
activity that would last long

00:11:16.100 --> 00:11:18.010
enough to need killing.

00:11:18.010 --> 00:11:20.450
CHRIS BANES: No, exactly.

00:11:20.450 --> 00:11:24.110
It's fire and forget, so it's
short-lived tasks that should

00:11:24.110 --> 00:11:25.950
just be fired on the--

00:11:25.950 --> 00:11:28.050
that you want them [INAUDIBLE]

00:11:28.050 --> 00:11:29.986
and [INAUDIBLE].

00:11:29.986 --> 00:11:32.950
It should be short-lived
tasks.

00:11:32.950 --> 00:11:37.390
I think Andrew is using
it as a rest client.

00:11:37.390 --> 00:11:37.992
NICK BUTCHER: He has been
one of the first ones

00:11:37.992 --> 00:11:39.610
[INAUDIBLE], actually.

00:11:39.610 --> 00:11:43.020
He just seemed to run out
of time and space.

00:11:43.020 --> 00:11:43.770
Let's see.

00:11:43.770 --> 00:11:45.420
He thought about having a
global flag outside the

00:11:45.420 --> 00:11:47.385
service which the service
checks when on

00:11:47.385 --> 00:11:49.460
handle intent completes.

00:11:49.460 --> 00:11:51.820
If the flag is set, then return
results as normal.

00:11:51.820 --> 00:11:53.250
Otherwise, discard the result.

00:11:53.250 --> 00:11:54.815
This doesn't free up any
resources, et cetera, but it

00:11:54.815 --> 00:11:56.810
just means you don't
have to cancel it.

00:11:56.810 --> 00:11:58.960
You don't have to worry
about doing [? UI. ?]

00:11:58.960 --> 00:11:59.215
Blah, blah, blah.

00:11:59.215 --> 00:11:59.765
You could do that.

00:11:59.765 --> 00:12:00.600
Proxy [INAUDIBLE]

00:12:00.600 --> 00:12:00.740
back end.

00:12:00.740 --> 00:12:02.815
RICHARD HYNDMAN: Why doesn't
your implementation inside the

00:12:02.815 --> 00:12:04.600
intent service check the flag
every so often, as well?

00:12:07.100 --> 00:12:09.494
Because if it knows it's not
going to need the result, it

00:12:09.494 --> 00:12:14.070
can just kill itself,
stop processing.

00:12:14.070 --> 00:12:15.650
I don't know what's
inside your--

00:12:15.650 --> 00:12:17.635
NICK BUTCHER: Yeah, I would
definitely take a look at

00:12:17.635 --> 00:12:18.070
[? Railway Spice, ?]

00:12:18.070 --> 00:12:19.320
because it's definitely built
to do this kind of thing.

00:12:21.860 --> 00:12:23.970
CHRIS BANES: The actual
implementation of intent

00:12:23.970 --> 00:12:27.090
service is about, I don't
know, 50 lines of code.

00:12:27.090 --> 00:12:28.250
So it's not too complex.

00:12:28.250 --> 00:12:30.953
If you want to take it yourself
and then add to it,

00:12:30.953 --> 00:12:32.886
it's not particularly
difficult.

00:12:32.886 --> 00:12:34.970
So that's probably what
I'd say to do.

00:12:34.970 --> 00:12:37.320
RICHARD HYNDMAN: Well, we've
got a full set of 10 people

00:12:37.320 --> 00:12:38.800
inside the Hangout
with us today.

00:12:38.800 --> 00:12:41.280
So even though we are primarily
focusing on the

00:12:41.280 --> 00:12:44.370
moderator, because we're in
this reduced 30 minute

00:12:44.370 --> 00:12:47.210
format-- which, I think, so far,
has forced us to answer

00:12:47.210 --> 00:12:51.610
more questions more concisely,
which was one of the points.

00:12:51.610 --> 00:12:54.180
Does anybody who has joined
us in the Hangout have a

00:12:54.180 --> 00:12:55.488
question for us?

00:12:55.488 --> 00:12:57.902
And thank you for joining
us in advance.

00:13:00.500 --> 00:13:01.800
Somebody is typing.

00:13:01.800 --> 00:13:04.150
Ally.

00:13:04.150 --> 00:13:06.995
It's kind of a chat question.

00:13:06.995 --> 00:13:07.590
Anybody else?

00:13:07.590 --> 00:13:08.540
No heads nodding at all?

00:13:08.540 --> 00:13:10.965
All just here for
the experience?

00:13:10.965 --> 00:13:11.960
Al's [INAUDIBLE]

00:13:11.960 --> 00:13:13.250
now.

00:13:13.250 --> 00:13:14.500
Al's [INAUDIBLE] question.

00:13:18.160 --> 00:13:19.146
CHRIS BANES: [INAUDIBLE].

00:13:19.146 --> 00:13:20.110
RICHARD HYNDMAN: We've
got one-- no

00:13:20.110 --> 00:13:21.375
questions at the moment.

00:13:21.375 --> 00:13:22.800
OK.

00:13:22.800 --> 00:13:24.356
LEONARDO: Hello.

00:13:24.356 --> 00:13:25.714
RICHARD HYNDMAN: Oh, hi there.

00:13:25.714 --> 00:13:27.196
Who is that?

00:13:27.196 --> 00:13:30.590
LEONARDO: It's the one without
a camera, because I

00:13:30.590 --> 00:13:31.895
don't have a camera.

00:13:31.895 --> 00:13:32.720
Can you hear me?

00:13:32.720 --> 00:13:33.330
RICHARD HYNDMAN: Yeah, we can.

00:13:33.330 --> 00:13:34.757
Hi there, Leonardo.

00:13:34.757 --> 00:13:36.960
LEONARDO: OK, good.

00:13:36.960 --> 00:13:41.720
So I'm developing this Android
application, and as part of my

00:13:41.720 --> 00:13:45.810
application I've got a web view
which is used to display

00:13:45.810 --> 00:13:47.810
the guide on the application.

00:13:47.810 --> 00:13:52.630
The data comes from the local
application, because it's

00:13:52.630 --> 00:13:55.310
dynamically generated,
so I can't really

00:13:55.310 --> 00:13:59.350
use an external website.

00:13:59.350 --> 00:14:02.430
My question is, I randomly--

00:14:02.430 --> 00:14:05.710
I don't know how to reproduce
it, it seldom happens--

00:14:05.710 --> 00:14:07.510
get white pages.

00:14:07.510 --> 00:14:11.310
So the page is there, the links
are there, the links

00:14:11.310 --> 00:14:12.260
actually work.

00:14:12.260 --> 00:14:16.880
Because if I click on the links,
I see that history of

00:14:16.880 --> 00:14:18.950
the web view changes
and stuff.

00:14:18.950 --> 00:14:20.200
But it's completely white.

00:14:22.890 --> 00:14:28.290
This only happens on Android 4,
not Android 2, I can't test

00:14:28.290 --> 00:14:33.800
on 3 because I don't have any
devices with Android 3.

00:14:33.800 --> 00:14:35.360
RICHARD HYNDMAN: Have you
tried the hardware

00:14:35.360 --> 00:14:36.780
acceleration in the web view?

00:14:36.780 --> 00:14:39.550
It's the first port of call for
all these kind of issues.

00:14:39.550 --> 00:14:40.795
LEONARDO: Sorry, can
you repeat please?

00:14:40.795 --> 00:14:42.350
CHRIS BANES: Have you tried
looking at the hardware

00:14:42.350 --> 00:14:43.470
acceleration--

00:14:43.470 --> 00:14:44.180
LEONARDO: No, I haven't.

00:14:44.180 --> 00:14:46.340
RICHARD HYNDMAN: --trying
to [INAUDIBLE].

00:14:46.340 --> 00:14:48.500
There was a lot of hardware
acceleration optimizations

00:14:48.500 --> 00:14:51.025
that have been going into the
web view through Android

00:14:51.025 --> 00:14:53.190
3 and Android 4.

00:14:53.190 --> 00:14:54.680
And 4.1 and 4.2.

00:14:54.680 --> 00:14:58.300
And it sounds like a classic
lack of redraw on the hardware

00:14:58.300 --> 00:14:59.940
acceleration.

00:14:59.940 --> 00:15:02.452
LEONARDO: Oh, it makes sense.

00:15:02.452 --> 00:15:05.800
RICHARD HYNDMAN: So you could
just try, in your manifest,

00:15:05.800 --> 00:15:07.840
turning hardware acceleration
off.

00:15:07.840 --> 00:15:09.740
Use hardware acceleration
[INAUDIBLE].

00:15:09.740 --> 00:15:15.160
If that works for you, then
maybe have a look at our blog

00:15:15.160 --> 00:15:19.190
posts on which functions in a
web view do support hardware

00:15:19.190 --> 00:15:21.800
acceleration.

00:15:21.800 --> 00:15:22.880
Maybe you can work around it.

00:15:22.880 --> 00:15:24.990
I hope that you don't have to
disable hardware acceleration

00:15:24.990 --> 00:15:27.310
for the whole web view
for the whole time.

00:15:27.310 --> 00:15:29.752
But it's definitely the
first thing to check.

00:15:29.752 --> 00:15:31.390
LEONARDO: That's interesting.

00:15:31.390 --> 00:15:34.330
That's something I had
no idea about.

00:15:34.330 --> 00:15:35.990
Well, thank you.

00:15:35.990 --> 00:15:37.050
I'll have a look at it.

00:15:37.050 --> 00:15:38.420
Thank you very much.

00:15:38.420 --> 00:15:39.320
RICHARD HYNDMAN: No problem.

00:15:39.320 --> 00:15:41.485
Thank you for the question.

00:15:41.485 --> 00:15:42.350
NICK BUTCHER: All righty.

00:15:42.350 --> 00:15:44.249
[INAUDIBLE] times.

00:15:44.249 --> 00:15:45.235
Shall we ask the moderator?

00:15:45.235 --> 00:15:46.255
CHRIS BANES: Let's go for it.

00:15:46.255 --> 00:15:49.460
NICK BUTCHER: So Andrew Kelly,
again, asks, "If I publish an

00:15:49.460 --> 00:15:52.440
app in the Samsung or Amazon
store, and not in the Google

00:15:52.440 --> 00:15:55.830
Play store, do I run the risk
of not being able to use the

00:15:55.830 --> 00:15:59.040
newer Google Play services APIs,
e.g., Maps or YouTube

00:15:59.040 --> 00:16:00.880
API?"

00:16:00.880 --> 00:16:03.445
And he expands, "I think if the
user doesn't have a Google

00:16:03.445 --> 00:16:06.020
Play account, they can have
an out-of-date version

00:16:06.020 --> 00:16:06.920
of Google Play APIs.

00:16:06.920 --> 00:16:08.753
Or can these be updated
on a device without

00:16:08.753 --> 00:16:10.560
a Google Play account?

00:16:10.560 --> 00:16:13.240
What if they have a Google Play
but have never signed in?

00:16:13.240 --> 00:16:16.545
Will the APIs get updated when
you do new releases, e.g.,

00:16:16.545 --> 00:16:21.540
Maps?"

00:16:21.540 --> 00:16:22.500
RICHARD HYNDMAN: He's sort of
asking the moderator, so I'll

00:16:22.500 --> 00:16:22.800
just let you go for it.

00:16:22.800 --> 00:16:25.600
NICK BUTCHER: Yeah,
I'll just--

00:16:25.600 --> 00:16:28.540
so Google Maps, the API is
distributed through the Google

00:16:28.540 --> 00:16:31.360
Play services [INAUDIBLE],
which is

00:16:31.360 --> 00:16:32.820
distributed on Google Play.

00:16:32.820 --> 00:16:36.990
The YouTube API is distributed
on the YouTube app.

00:16:36.990 --> 00:16:39.350
So if those apps aren't updated
to the necessary

00:16:39.350 --> 00:16:41.053
levels, then you are never
going to be able

00:16:41.053 --> 00:16:42.470
to use those APIs.

00:16:42.470 --> 00:16:45.760
And so in short answer to your
question, if they don't have

00:16:45.760 --> 00:16:48.430
Google Play on their account,
or they haven't signed in,

00:16:48.430 --> 00:16:50.580
don't assume you can
use Google APIs.

00:16:50.580 --> 00:16:53.090
AL SUTTON: One of the things
about the Amazon store is it

00:16:53.090 --> 00:16:55.100
comes on the Kindle Fire,
which doesn't

00:16:55.100 --> 00:16:56.050
have Play at all.

00:16:56.050 --> 00:16:57.320
So they just wouldn't
be available.

00:16:57.320 --> 00:16:58.220
RICHARD HYNDMAN: Yeah.

00:16:58.220 --> 00:17:01.350
So make sure you're checking
your services are available

00:17:01.350 --> 00:17:04.130
before you start using them.

00:17:04.130 --> 00:17:05.060
You're safe if it's published
in the Play store.

00:17:05.060 --> 00:17:10.630
If you published it in the other
ones, just be careful.

00:17:10.630 --> 00:17:12.910
There are a bunch of services
that are still available.

00:17:15.880 --> 00:17:19.180
You could use, potentially, the
web version of the Maps

00:17:19.180 --> 00:17:23.865
API instead of the Android
client version.

00:17:23.865 --> 00:17:24.774
There's a YouTube [INAUDIBLE]

00:17:24.774 --> 00:17:28.119
API, as well, they could
use [INAUDIBLE].

00:17:28.119 --> 00:17:30.600
And then maybe fall back on
that, because the Android

00:17:30.600 --> 00:17:32.296
native experience delivered
through the Play store is

00:17:32.296 --> 00:17:34.950
going to be better.

00:17:34.950 --> 00:17:36.200
But if they're not available,
use the web APIs.

00:17:38.772 --> 00:17:40.580
NICK BUTCHER: Next question.

00:17:40.580 --> 00:17:42.940
"Is there a way to query if the
user has enabled a pin,

00:17:42.940 --> 00:17:44.560
password, or face unlock
for their device?

00:17:44.560 --> 00:17:47.460
I have an app that requires the
user to enter a pin, but I

00:17:47.460 --> 00:17:50.630
could skip this step if I've
trusted the Android device to

00:17:50.630 --> 00:17:53.880
have authenticated
the user first."

00:17:53.880 --> 00:17:55.170
CHRIS BANES: Yeah,
I was looking at

00:17:55.170 --> 00:17:56.770
the source for this.

00:17:56.770 --> 00:17:57.300
And in Keyguard--

00:17:57.300 --> 00:17:58.700
I think KeyguardManager--

00:17:58.700 --> 00:18:02.430
there's a method called
isKeyguardSecure.

00:18:02.430 --> 00:18:05.705
That's the only real method
that's exposed to a developer

00:18:05.705 --> 00:18:08.110
that you can query.

00:18:08.110 --> 00:18:09.380
NICK BUTCHER: And there's
different levels of security.

00:18:09.380 --> 00:18:12.540
So, for example, a pin or
password is considered secure,

00:18:12.540 --> 00:18:15.840
whereas a face unlock isn't
necessarily considered secure.

00:18:15.840 --> 00:18:18.600
And these come down from the
device profile stuff.

00:18:18.600 --> 00:18:21.200
So where you can have app
[INAUDIBLE] sync profiles, and

00:18:21.200 --> 00:18:24.030
so on, which you can require
the app has to be secure.

00:18:24.030 --> 00:18:25.595
Or enforce--

00:18:25.595 --> 00:18:27.850
a corporate device, for example,
has a sufficiently

00:18:27.850 --> 00:18:29.000
complex password.

00:18:29.000 --> 00:18:31.120
There are definitions
of what's secure

00:18:31.120 --> 00:18:32.200
and what's not secure.

00:18:32.200 --> 00:18:34.166
So that's what we're
referring to.

00:18:34.166 --> 00:18:36.200
RICHARD HYNDMAN: Absolutely.

00:18:36.200 --> 00:18:39.100
Just checking in the Android
Developers thread, as well.

00:18:39.100 --> 00:18:40.940
There's some comments
going on.

00:18:40.940 --> 00:18:42.070
One cheeky one from Beaver
that I'm just

00:18:42.070 --> 00:18:44.980
totally going to ignore.

00:18:44.980 --> 00:18:46.620
I don't have an answer to
you for that, Beaver.

00:18:46.620 --> 00:18:48.000
But there you go.

00:18:51.040 --> 00:18:51.850
So I guess back--

00:18:51.850 --> 00:18:54.120
unless anybody in the hangout
has a question.

00:18:54.120 --> 00:18:55.370
20 minutes in.

00:18:55.370 --> 00:18:56.970
NICK BUTCHER: No, it's
prioritize moderator.

00:18:56.970 --> 00:18:58.580
RICHARD HYNDMAN: Prioritize
moderator.

00:18:58.580 --> 00:18:58.900
There's more?

00:18:58.900 --> 00:18:59.380
NICK BUTCHER: There's more.

00:18:59.380 --> 00:19:02.160
RICHARD HYNDMAN: [INAUDIBLE]
been busier?

00:19:02.160 --> 00:19:03.070
Next moderator question.

00:19:03.070 --> 00:19:03.880
NICK BUTCHER: OK.

00:19:03.880 --> 00:19:07.200
ContentResolver.requestSync
and onPerformSync on my

00:19:07.200 --> 00:19:10.370
abstract SyncAdapter
is completed fine.

00:19:10.370 --> 00:19:13.180
But on my device, under Settings
slash Accounts, the

00:19:13.180 --> 00:19:17.160
indeterminate progress bar runs
forever, and isSyncActive

00:19:17.160 --> 00:19:19.130
returns true.

00:19:19.130 --> 00:19:22.666
Also, the wakelock detector
reports [INAUDIBLE].

00:19:22.666 --> 00:19:24.110
CHRIS BANES: Yeah.

00:19:24.110 --> 00:19:25.990
I read this one, and I'm
guessing you're referring to

00:19:25.990 --> 00:19:29.202
AbstractThreadedSyncAdapter
because I don't think there is

00:19:29.202 --> 00:19:31.510
an abstract SyncAdapter.

00:19:31.510 --> 00:19:35.340
So there's multiple reasons
why this happens.

00:19:35.340 --> 00:19:37.650
The fact that you mention a
wakelock is ringing alarm

00:19:37.650 --> 00:19:40.500
bells, as you must have
had that yourself.

00:19:40.500 --> 00:19:45.790
And there are samples
available on

00:19:45.790 --> 00:19:49.850
developer.android.com, which
go through all this.

00:19:49.850 --> 00:19:51.460
So I'd of go through that
and make sure your

00:19:51.460 --> 00:19:54.090
code is roughly similar.

00:19:54.090 --> 00:19:57.960
See if you're doing anything
weird or funky which may cause

00:19:57.960 --> 00:20:00.760
threads to keep running
or anything like that.

00:20:00.760 --> 00:20:02.563
So there could be millions of
reasons why this could happen.

00:20:05.675 --> 00:20:09.110
RICHARD HYNDMAN: We received a
message in the chats, as well,

00:20:09.110 --> 00:20:10.710
from Marty.

00:20:10.710 --> 00:20:11.620
Hey, Marty.

00:20:11.620 --> 00:20:13.870
"Are there any special
permissions required for

00:20:13.870 --> 00:20:16.370
reading a file from
the SD card?"

00:20:16.370 --> 00:20:18.100
There used to not be any
permissions required for

00:20:18.100 --> 00:20:22.110
reading a file from the SD card,
but as of Jelly Bean,

00:20:22.110 --> 00:20:25.785
you do need now the real
external storage permission.

00:20:25.785 --> 00:20:27.786
NICK BUTCHER: Just
to be clear, it's

00:20:27.786 --> 00:20:28.560
optional at the moment.

00:20:28.560 --> 00:20:30.570
So we are, at some point,
going to enforce this

00:20:30.570 --> 00:20:30.910
permission.

00:20:30.910 --> 00:20:34.080
Right now, a user
can [INAUDIBLE]

00:20:34.080 --> 00:20:36.380
enable developer settings, go
on and make it a strict

00:20:36.380 --> 00:20:36.620
permission.

00:20:36.620 --> 00:20:39.125
But right now it's kind
of an advisory one.

00:20:39.125 --> 00:20:41.310
RICHARD HYNDMAN: If you
target API [INAUDIBLE]

00:20:41.310 --> 00:20:42.570
and you [INAUDIBLE]

00:20:42.570 --> 00:20:44.645
storage, you get a [INAUDIBLE]
error.

00:20:44.645 --> 00:20:45.495
NICK BUTCHER: [INAUDIBLE]
error.

00:20:45.495 --> 00:20:46.910
RICHARD HYNDMAN: You get a
[INAUDIBLE] warning telling

00:20:46.910 --> 00:20:50.330
you that you should be
requesting the read external

00:20:50.330 --> 00:20:51.720
storage permission.

00:20:51.720 --> 00:20:53.860
And as Hugo points out, you
definitely need the right

00:20:53.860 --> 00:20:55.575
external storage permission if
you're going to be writing to

00:20:55.575 --> 00:20:57.358
the SD Card.

00:20:57.358 --> 00:20:58.754
MARTY: Thanks, Guys.

00:20:58.754 --> 00:21:02.132
RICHARD HYNDMAN: Oh, hi there.

00:21:02.132 --> 00:21:03.577
GIUSEPPE: Can I ask
a question?

00:21:03.577 --> 00:21:04.471
RICHARD HYNDMAN: Yeah.

00:21:04.471 --> 00:21:04.920
Hey, Giuseppe.

00:21:04.920 --> 00:21:06.562
Go ahead.

00:21:06.562 --> 00:21:09.960
GIUSEPPE: I have a fragment
with [INAUDIBLE]

00:21:09.960 --> 00:21:14.840
AsyncTask that shows a progress
dialog when the

00:21:14.840 --> 00:21:17.356
AsyncTask start.

00:21:17.356 --> 00:21:22.830
On rotation, I would like to
know what is the best working

00:21:22.830 --> 00:21:28.892
solution to keep on the screen
the progress dialog.

00:21:28.892 --> 00:21:31.030
RICHARD HYNDMAN: I see.

00:21:31.030 --> 00:21:33.500
You're going to lose your
AsyncTask when you rotate.

00:21:33.500 --> 00:21:36.030
The easiest way, the way I
would normally do it, is

00:21:36.030 --> 00:21:38.790
either not use an AsyncTask,
or go stop the on

00:21:38.790 --> 00:21:40.980
configuration change
for rotation

00:21:40.980 --> 00:21:43.000
and relay that yourself.

00:21:43.000 --> 00:21:48.450
If you just allow the system to
perform its rotation, it's

00:21:48.450 --> 00:21:51.342
going to relay out, you're going
to lose your AsyncTask

00:21:51.342 --> 00:21:52.830
and your dialog, as well.

00:21:52.830 --> 00:21:54.750
GIUSEPPE: So I have
to control the

00:21:54.750 --> 00:21:57.313
rotation through the manifest?

00:21:57.313 --> 00:21:58.040
RICHARD HYNDMAN: Yeah.

00:21:58.040 --> 00:22:01.196
Either don't use AsyncTask
for it--

00:22:01.196 --> 00:22:02.740
I know that an in-line AsyncTask
is very quick and

00:22:02.740 --> 00:22:03.960
easy to throw in--

00:22:03.960 --> 00:22:06.690
but you could have a separate
thread and a handler to pass

00:22:06.690 --> 00:22:09.490
the messages back,
in which case you

00:22:09.490 --> 00:22:12.050
control that yourself.

00:22:12.050 --> 00:22:14.070
It's not too many more
lines of code.

00:22:14.070 --> 00:22:17.995
Or stop the rotation, the on
configuration change going

00:22:17.995 --> 00:22:19.640
through to the rotation.

00:22:19.640 --> 00:22:22.190
GIUSEPPE: Now, this just
stop the rotation,

00:22:22.190 --> 00:22:23.920
it's not to my case.

00:22:23.920 --> 00:22:28.040
I would like just that when I
rotate the phone, the progress

00:22:28.040 --> 00:22:29.187
download [INAUDIBLE].

00:22:29.187 --> 00:22:31.730
RICHARD HYNDMAN: I don't mean
stop the rotation as in force

00:22:31.730 --> 00:22:34.290
the application to stay
in one orientation.

00:22:34.290 --> 00:22:37.550
I mean when the rotation
happens, an on configuration

00:22:37.550 --> 00:22:39.990
change message gets passed
into your application.

00:22:39.990 --> 00:22:42.586
Or you can request one
in the manifest.

00:22:42.586 --> 00:22:46.347
And at that point, you can
request that the layout is

00:22:46.347 --> 00:22:47.812
re-laid out.

00:22:47.812 --> 00:22:50.740
GIUSEPPE: And this work
also for fragments?

00:22:50.740 --> 00:22:52.556
Or work only on the activity?

00:22:52.556 --> 00:22:55.166
RICHARD HYNDMAN: Yeah, it can
work for fragments, as well.

00:22:55.166 --> 00:23:00.730
And if you don't have the system
follow through its own

00:23:00.730 --> 00:23:02.290
life cycle for the
rotation, then it

00:23:02.290 --> 00:23:04.225
won't kill your AsyncTask.

00:23:04.225 --> 00:23:06.322
GIUSEPPE: Thank you very much.

00:23:06.322 --> 00:23:08.300
RICHARD HYNDMAN: It's the way
that things like the YouTube

00:23:08.300 --> 00:23:10.310
application do it when they want
to rotate and keep the

00:23:10.310 --> 00:23:12.200
video playing.

00:23:12.200 --> 00:23:13.450
GIUSEPPE: OK.

00:23:18.121 --> 00:23:19.370
CHRIS BANES: Cool.

00:23:19.370 --> 00:23:23.090
There's a couple of questions
that you and Andrew K. have

00:23:23.090 --> 00:23:24.300
been having a back and
forth chat with.

00:23:24.300 --> 00:23:25.160
RICHARD HYNDMAN: I know.

00:23:25.160 --> 00:23:26.320
I mean, we know how those
computers gained a

00:23:26.320 --> 00:23:28.310
consciousness and started
killing him.

00:23:28.310 --> 00:23:29.130
[INAUDIBLE].

00:23:29.130 --> 00:23:31.580
NICK BUTCHER: OK.

00:23:31.580 --> 00:23:36.510
So Leonid in Israel asks, "I
want to use a content provider

00:23:36.510 --> 00:23:39.080
with a
ContentResolver.bulkInsert.

00:23:39.080 --> 00:23:41.810
Does he have some kind of cue?

00:23:41.810 --> 00:23:46.794
Or how it works when there
is many inserts?"

00:23:46.794 --> 00:23:48.950
RICHARD HYNDMAN: Any comment
on that, Chris?

00:23:48.950 --> 00:23:51.280
CHRIS BANES: I can't say I've
looked at the source of that.

00:23:51.280 --> 00:23:52.525
And I guess--

00:23:52.525 --> 00:23:55.166
NICK BUTCHER: The bulkInsert--
yeah, you basically build a

00:23:55.166 --> 00:23:56.970
list of content operations,
right?

00:23:56.970 --> 00:23:58.785
And then it will basically
loop over them.

00:23:58.785 --> 00:24:01.350
So the key thing to do there
is really make sure you're

00:24:01.350 --> 00:24:02.440
yielding at the right
point, right?

00:24:02.440 --> 00:24:03.110
CHRIS BANES: Yeah.

00:24:03.110 --> 00:24:04.860
If you're doing database--

00:24:04.860 --> 00:24:06.440
if you're going to send it to a
database, make sure you use

00:24:06.440 --> 00:24:09.390
transactions because you'll
get a performance increase

00:24:09.390 --> 00:24:12.282
[INAUDIBLE] the actual
inserts.

00:24:12.282 --> 00:24:14.505
Yeah, that's what I'd say,
really, about that.

00:24:14.505 --> 00:24:16.270
AL SUTTON: If there's any
concern about it, it's worth

00:24:16.270 --> 00:24:18.685
making a block of code inside
the bulkInsert method or

00:24:18.685 --> 00:24:21.540
rather in the insert method
synchronized, and that will

00:24:21.540 --> 00:24:26.770
enforce single, threaded, one
job at a time on the inserts.

00:24:26.770 --> 00:24:29.505
NICK BUTCHER: But I think
probably there is an advantage

00:24:29.505 --> 00:24:33.700
of having one core to bulkInsert
rather than in a

00:24:33.700 --> 00:24:35.940
loop, perhaps, calling
insert many times.

00:24:35.940 --> 00:24:37.230
Because he's going to be doing
lots of [INAUDIBLE] and stuff.

00:24:40.580 --> 00:24:41.490
I'd say build them
up and bulkInsert

00:24:41.490 --> 00:24:42.740
them is a good idea.

00:24:47.010 --> 00:24:48.460
[? Maureen of Hell ?]

00:24:48.460 --> 00:24:52.180
in Germany, apparently, asks,
"Is there possibility to show

00:24:52.180 --> 00:24:55.080
an animation by redrawing the
same activity with different

00:24:55.080 --> 00:24:58.040
data using a gesture
[INAUDIBLE]?

00:24:58.040 --> 00:25:02.430
For example, to zoom out into
a monthly overview, or zoom

00:25:02.430 --> 00:25:04.950
into a weekly, would it be
better to create two

00:25:04.950 --> 00:25:05.800
activities?

00:25:05.800 --> 00:25:08.420
Thanks."

00:25:08.420 --> 00:25:10.190
So, drawing the same activity
with two different--

00:25:10.190 --> 00:25:11.710
so it sounds like you want to
look at something called the

00:25:11.710 --> 00:25:12.960
ActivityOptions [? pass, ?]

00:25:12.960 --> 00:25:14.470
which will do that
for you, for the

00:25:14.470 --> 00:25:15.860
zooming in case, at least.

00:25:15.860 --> 00:25:17.710
You won't get the zooming out.

00:25:17.710 --> 00:25:21.570
But say you're wanting to open
from a small thumbnail into an

00:25:21.570 --> 00:25:23.000
activity, then yeah.

00:25:23.000 --> 00:25:25.910
Look at the recent [INAUDIBLE]
animation, which Rich is

00:25:25.910 --> 00:25:28.310
beautifully demonstrating, that
no one can see on there.

00:25:28.310 --> 00:25:28.990
RICHARD HYNDMAN: Oh, come on.

00:25:28.990 --> 00:25:29.950
I can see a big white
blob moving around.

00:25:29.950 --> 00:25:30.010
I don't want them
to read the--

00:25:30.010 --> 00:25:30.958
NICK BUTCHER: [INAUDIBLE]

00:25:30.958 --> 00:25:31.432
Hangout video.

00:25:31.432 --> 00:25:34.060
RICHARD HYNDMAN: But this is
actually part of the animation

00:25:34.060 --> 00:25:36.270
framework now, being
able to do this.

00:25:36.270 --> 00:25:38.645
I'll stop doing that.

00:25:38.645 --> 00:25:40.603
NICK BUTCHER: But yeah, it's
going to be quite tricky if

00:25:40.603 --> 00:25:42.880
you do it yourself, unless
you're going to go into all

00:25:42.880 --> 00:25:45.108
the overriding pending
transitions

00:25:45.108 --> 00:25:46.052
and stuff like that.

00:25:46.052 --> 00:25:48.555
CHRIS BANES: Yeah, unless you
[INAUDIBLE], and then do it as

00:25:48.555 --> 00:25:49.805
a fragment [INAUDIBLE].

00:25:52.630 --> 00:25:55.730
Because the fragment transaction
will give you a

00:25:55.730 --> 00:25:56.730
way to [INAUDIBLE]

00:25:56.730 --> 00:25:58.600
animations to the actual
transaction.

00:25:58.600 --> 00:25:59.320
So [? it will handle ?]
a lot for you.

00:25:59.320 --> 00:26:00.470
So that's going to be
a good way to--

00:26:00.470 --> 00:26:01.600
NICK BUTCHER: But then you
wouldn't be able to animate

00:26:01.600 --> 00:26:02.824
the whole chrome of
the window, right?

00:26:02.824 --> 00:26:04.845
You wouldn't be doing the action
bar, it's just going to

00:26:04.845 --> 00:26:05.310
be the contents within.

00:26:05.310 --> 00:26:06.210
CHRIS BANES: Yeah.

00:26:06.210 --> 00:26:08.257
NICK BUTCHER: But yeah, two
things for you to take a look

00:26:08.257 --> 00:26:10.186
at there, if it helps.

00:26:10.186 --> 00:26:11.740
AL SUTTON: Just found
a sentence on

00:26:11.740 --> 00:26:12.760
developer.android.com.

00:26:12.760 --> 00:26:16.530
The content providers methods
may be called for multiple

00:26:16.530 --> 00:26:18.090
threads and so must
be implemented in

00:26:18.090 --> 00:26:20.506
the thread-safe manner.

00:26:20.506 --> 00:26:21.310
[? It's popping ?]

00:26:21.310 --> 00:26:21.855
back to the last question.

00:26:21.855 --> 00:26:23.185
CHRIS BANES: Yeah.

00:26:23.185 --> 00:26:24.435
NICK BUTCHER: Good.

00:26:26.890 --> 00:26:27.500
[? Sheru ?]

00:26:27.500 --> 00:26:30.070
in India says, "can we suggest
an app for improving the

00:26:30.070 --> 00:26:33.744
signal strength through the
Xperia Mini?" No, we can't.

00:26:33.744 --> 00:26:34.390
RICHARD HYNDMAN: No?

00:26:34.390 --> 00:26:36.625
No, I've not seen any apps for
improving signal strength on a

00:26:36.625 --> 00:26:36.820
device yet.

00:26:36.820 --> 00:26:37.310
There's probably some for faking
the signal strength,

00:26:37.310 --> 00:26:41.130
but not for improving it.

00:26:41.130 --> 00:26:45.140
NICK BUTCHER: And also not
really a development question.

00:26:45.140 --> 00:26:45.480
OK.

00:26:45.480 --> 00:26:47.710
So we've got a couple here which
you've got answered, but

00:26:47.710 --> 00:26:50.264
we're going to read them out
for posterity's sake.

00:26:50.264 --> 00:26:51.250
[INAUDIBLE].

00:26:51.250 --> 00:26:53.045
RICHARD HYNDMAN: Down to
1 and 1/2 minutes.

00:26:53.045 --> 00:26:55.840
NICK BUTCHER: "With the Google
Play private channel, how does

00:26:55.840 --> 00:26:58.600
this work for apps I want to
release internally in beta,

00:26:58.600 --> 00:27:00.600
and apps I want to publish on
Google Play [INAUDIBLE]

00:27:00.600 --> 00:27:00.810
everyone?

00:27:00.810 --> 00:27:05.877
Can I choose a target audience
for each app?" I would say

00:27:05.877 --> 00:27:06.100
that's a no.

00:27:06.100 --> 00:27:08.310
CHRIS BANES: So when you publish
apps to your private

00:27:08.310 --> 00:27:10.900
channel, they're only accessible
to people in your

00:27:10.900 --> 00:27:11.250
organization.

00:27:11.250 --> 00:27:12.995
NICK BUTCHER: In your
domain, yep.

00:27:12.995 --> 00:27:15.700
CHRIS BANES: So it's up to you
under what channel you

00:27:15.700 --> 00:27:16.730
actually publish your apps to.

00:27:16.730 --> 00:27:18.650
NICK BUTCHER: So if you want
to publish beta to your

00:27:18.650 --> 00:27:20.550
company, then you have to
[? upshoot ?] twice?

00:27:20.550 --> 00:27:22.295
CHRIS BANES: Yeah.

00:27:22.295 --> 00:27:24.160
NICK BUTCHER: And the last
question for the moderator,

00:27:24.160 --> 00:27:27.560
another one from Andrew K.,
says, "From within an app, can

00:27:27.560 --> 00:27:29.300
I programmatically work out
which app store it was

00:27:29.300 --> 00:27:32.570
downloaded from, or do I need to
separate code base for each

00:27:32.570 --> 00:27:35.310
store with different features
compiled, e.g. first building

00:27:35.310 --> 00:27:37.970
an app that was sponsored
by Samsung?"

00:27:37.970 --> 00:27:39.300
CHRIS BANES: So PackageManager's
got a good

00:27:39.300 --> 00:27:41.986
method for this called
getInstallerPackage--

00:27:41.986 --> 00:27:42.825
for Package--

00:27:42.825 --> 00:27:43.290
[INAUDIBLE]

00:27:43.290 --> 00:27:44.670
it's not that--

00:27:44.670 --> 00:27:45.640
where you give it--

00:27:45.640 --> 00:27:47.402
NICK BUTCHER:
getInstallerPackageName.

00:27:47.402 --> 00:27:49.010
CHRIS BANES: OK.

00:27:49.010 --> 00:27:51.130
And it will give you the package
name of the installer.

00:27:51.130 --> 00:27:55.250
So be that Google Play or
Amazon or wherever.

00:27:55.250 --> 00:27:56.020
And [INAUDIBLE]

00:27:56.020 --> 00:27:57.980
if you need to install
it manually.

00:27:57.980 --> 00:28:00.750
And yeah, that's probably the
best way of doing that.

00:28:00.750 --> 00:28:02.270
RICHARD HYNDMAN: OK.

00:28:02.270 --> 00:28:03.986
Done with the moderator, then?

00:28:03.986 --> 00:28:05.530
NICK BUTCHER: One
more popped in.

00:28:05.530 --> 00:28:06.230
[INAUDIBLE].

00:28:06.230 --> 00:28:07.770
RICHARD HYNDMAN: All right,
while Nick's [INAUDIBLE]

00:28:07.770 --> 00:28:08.240
that--

00:28:08.240 --> 00:28:09.110
NICK BUTCHER: It's too late.

00:28:09.110 --> 00:28:10.700
RICHARD HYNDMAN: Excellent.

00:28:10.700 --> 00:28:13.250
If you happen to be in London
tomorrow night, we're going to

00:28:13.250 --> 00:28:15.980
be hanging out at the London
Android user group over at

00:28:15.980 --> 00:28:17.810
Skills Matter near--

00:28:17.810 --> 00:28:18.580
NICK BUTCHER: Near Old Street.

00:28:18.580 --> 00:28:19.650
RICHARD HYNDMAN: --Old Street.

00:28:19.650 --> 00:28:20.830
Thanks, Nick.

00:28:20.830 --> 00:28:25.460
So we'll be discussing stORM.

00:28:25.460 --> 00:28:28.590
David Chandler from our team
in the US is coming over to

00:28:28.590 --> 00:28:31.660
discuss S-T-O-R-M at the London
Android user group

00:28:31.660 --> 00:28:32.290
tomorrow night.

00:28:32.290 --> 00:28:33.850
So if you happen to be
around London, please

00:28:33.850 --> 00:28:34.610
pop in and say hello.

00:28:34.610 --> 00:28:35.440
Or, sign up at

00:28:35.440 --> 00:28:38.906
meetup.com/android, first of all.

00:28:38.906 --> 00:28:40.090
NICK BUTCHER: So I hope
you enjoyed the

00:28:40.090 --> 00:28:41.280
new compressed format.

00:28:41.280 --> 00:28:42.740
And as we've said, we're
going to be giving

00:28:42.740 --> 00:28:44.860
priority to the moderator.

00:28:44.860 --> 00:28:46.940
So it really does encourage you
to get your questions in

00:28:46.940 --> 00:28:48.900
earlier, which gives us more
time to give you a better

00:28:48.900 --> 00:28:50.660
answer, hopefully.

00:28:50.660 --> 00:28:52.740
RICHARD HYNDMAN: I think we've
got through as much material

00:28:52.740 --> 00:28:55.090
in this half hour as we
usually do in an hour.

00:28:55.090 --> 00:28:56.870
CHRIS BANES: [INAUDIBLE].

00:28:56.870 --> 00:28:59.376
NICK BUTCHER: So if you've come
for the chat, I'm sorry.

00:28:59.376 --> 00:29:01.318
RICHARD HYNDMAN: Put it
in the moderator and

00:29:01.318 --> 00:29:02.550
we'll discuss it.

00:29:02.550 --> 00:29:03.910
OK, thanks very much,
everyone.

00:29:03.910 --> 00:29:04.710
Catch you again next week.

00:29:04.710 --> 00:29:05.540
CHRIS BANES: Cheers, guys.

00:29:05.540 --> 00:29:06.150
AL SUTTON: Thanks, guys.

00:29:06.150 --> 00:29:07.400
GIUSEPPE: Bye.

