WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
Here is my solution to the programming assignment,

00:00:04.000 --> 00:00:09.000
and it's quite straightforward given the class, but I'm really proud if you go it correct,

00:00:09.000 --> 00:00:14.000
because it enabled you to program your own localization algorithm

00:00:14.000 --> 00:00:18.000
very similar to the way we do it at the Google self-driving car.

00:00:18.000 --> 00:00:23.000
First, I did two simple bookkeeping assignments.

00:00:23.000 --> 00:00:28.000
I assigned a value to sensor_wrong as 1.0 minus the probability of sensor_right

00:00:28.000 --> 00:00:31.000
and a probability of staying--that is, a motion failure--

00:00:31.000 --> 00:00:35.000
as 1.0 minus the probability of p_move.

00:00:35.000 --> 00:00:41.000
Let me scroll down very slowly.

00:00:41.000 --> 00:00:45.000
Let me first go to my main routine.

00:00:45.000 --> 00:00:48.000
I actually put a little check where the length of the measurements vector

00:00:48.000 --> 00:00:53.000
is the same as the motions vector, and it would give me an error message if not.

00:00:53.000 --> 00:00:55.000
Of course, this wasn't necessary for you.

00:00:55.000 --> 00:01:00.000
I just did it because I want my software to look nice.

00:01:00.000 --> 00:01:05.000
Then here is my initialization of my probability table.

00:01:05.000 --> 00:01:10.000
I compute my initial uniform distribution by calculating the size of the array--

00:01:10.000 --> 00:01:13.000
the number of rows times the number columns--

00:01:13.000 --> 00:01:16.000
and then dividing 1.0 over the product of those

00:01:16.000 --> 00:01:19.000
to be my initial distribution value.

00:01:19.000 --> 00:01:29.000
This thing over here just builds up an array of the size of my colors array

00:01:29.000 --> 00:01:32.000
but initializes it with the value of "pinit."

00:01:32.000 --> 00:01:38.000
These two lines over here give me an initial uniform distribution, and then I iterate.

00:01:38.000 --> 00:01:42.000
I go through the number of measurements, which is the same as number of motions.

00:01:42.000 --> 00:01:47.000
I move first using the "move" command of which I provide my current distribution

00:01:47.000 --> 00:01:51.000
and my motions command to obtain a new distribution.

00:01:51.000 --> 00:01:54.000
Then I do the same with the sensing command.

00:01:54.000 --> 00:01:58.000
I take my current distribution, the world itself, and the measurement vector

00:01:58.000 --> 00:02:01.000
to obtain a new probability distribution.

00:02:01.000 --> 00:02:05.000
When I've done this as many time as I have measurements and motions,

00:02:05.000 --> 00:02:08.000
I output the final distribution.

00:02:08.000 --> 00:02:11.000
So much for the main routine.

00:02:11.000 --> 00:02:19.000
I now have to specify what move is and what sense is.

00:02:19.000 --> 00:02:21.000
Let me start with sense.

00:02:21.000 --> 00:02:25.000
This is my sense routine. It goes from here to down here.

00:02:25.000 --> 00:02:29.000
As an input, I have a probability distribution and my world map--

00:02:29.000 --> 00:02:35.000
they're both of the same size--and a specific measurement, which is either red or green.

00:02:35.000 --> 00:02:38.000
I construct and cite my new posterior distribution.

00:02:38.000 --> 00:02:46.000
I initialize this with zeros, and I set the same size as my vector p.

00:02:46.000 --> 00:02:52.000
In the inner loop, I now iterate over all elements in my grid cell.

00:02:52.000 --> 00:02:56.000
I compute whether the measurement matches the color in the cell,

00:02:56.000 --> 00:02:58.000
in which case I call it a hit.

00:02:58.000 --> 00:03:05.000
Now my non-normalized posterior is the prior times this big sum over here.

00:03:05.000 --> 00:03:10.000
It uses sensor_right if the measurement was correct

00:03:10.000 --> 00:03:15.000
and sensor_wrong if the measurement was incorrect.

00:03:15.000 --> 00:03:20.000
Finally, I add up all the values in aux--I do this with the variable "s."

00:03:20.000 --> 00:03:31.000
Down here, I can normalize aux to have a total probability of 1, and then I return it.

00:03:31.000 --> 00:03:36.000
The "move" command takes as an input a distribution and a motion vector.

00:03:36.000 --> 00:03:42.000
It constructs the next distribution just like before as aux variable and sets it to zero.

00:03:42.000 --> 00:03:49.000
Now I go through each grid cell and for each cell, I collect possible cells

00:03:49.000 --> 00:03:52.000
that the robot might have come from.

00:03:52.000 --> 00:03:54.000
With probability p_move, it actually moved,

00:03:54.000 --> 00:03:59.000
in which case its prior coordinate would've been i minus the motion command.

00:03:59.000 --> 00:04:02.000
That's because you go backwards in time.

00:04:02.000 --> 00:04:06.000
This is a truncation, indicating we have a cyclic array,

00:04:06.000 --> 00:04:12.000
and we do the same with j--let me scroll very carefully.

00:04:12.000 --> 00:04:16.000
It's j minus the motion command, again in a cyclic fashion.

00:04:16.000 --> 00:04:20.000
But it might've been we didn't move, in which case you just use the probability

00:04:20.000 --> 00:04:24.000
of that specific cell multiplied by the probability of staying.

00:04:24.000 --> 00:04:31.000
Now, this line together gives me the correct probability for the variable i and j.

00:04:31.000 --> 00:04:34.000
I don't have to normalize, because it's not Bayes Rule.

00:04:34.000 --> 00:04:37.000
I just return the corresponding posterior distribution.

00:04:37.000 --> 00:04:42.000
I also have a little routine called "show" that goes through the entire probability field

00:04:42.000 --> 00:04:46.000
and computes out all these probability vectors of p

00:04:46.000 --> 00:04:52.000
that makes it slightly better formatted than just printing p in a single command.

00:04:52.000 --> 00:04:57.000
If I run my software with a specific word over here,

00:04:57.000 --> 00:05:05.000
it initializes p as 1/20 because there are 20 grid cells,

00:05:05.000 --> 00:05:09.000
then runs 5 times through the motion command and the measurement command,

00:05:09.000 --> 00:05:13.000
updates those, and then shows me the final result,

00:05:13.000 --> 00:05:17.000
which I already explained, which is the array over here.

00:05:17.000 --> 00:05:21.000
If you got this correct, then you've done something quite amazing.

00:05:21.000 --> 00:05:28.000
You've programmed the core of Google's self-driving car localization methods.

00:05:28.000 --> 00:05:32.000
In Google's case, the world isn't as simple as just red and green.

00:05:32.000 --> 00:05:38.000
In Google's case, these are carefully assembled 2D surface models of the road surface.

00:05:38.000 --> 00:05:41.000
But that doesn't affect what we've programed here.

00:05:41.000 --> 00:05:44.000
It makes the measurement function slightly more involved.

00:05:44.000 --> 00:05:48.000
The fact is that the thing we programmed here captures the key

00:05:48.000 --> 00:05:53.000
of the probabilistic inference necessary to localize the Google care.

00:05:53.000 --> 00:05:57.000
If you programmed this, you just have to replace the simple matching

00:05:57.000 --> 00:06:02.000
of a measurement of green with an image matching of an entire imagery record

00:06:02.000 --> 00:06:04.000
with imagery map.

00:06:04.000 --> 00:06:09.000
I leave this as an exercise, because I can't do this in this Python environment here.

00:06:09.000 --> 00:06:13.000
But I congratulate you that you really managed to do something quite amazing,

00:06:13.000 --> 09:59:59.000
which is build an amazing piece of localization software.

