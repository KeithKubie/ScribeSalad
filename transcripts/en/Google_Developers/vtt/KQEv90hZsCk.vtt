WEBVTT
Kind: captions
Language: en

00:00:08.610 --> 00:00:09.520
Hello, everyone.

00:00:09.520 --> 00:00:11.370
My name is Brian Dorsey,
and we're going to

00:00:11.370 --> 00:00:12.550
talk about load balancing.

00:00:12.550 --> 00:00:16.110
So as you're probably aware,
load balancing is a critical

00:00:16.110 --> 00:00:20.890
part of nearly every scalable
service you might want to run

00:00:20.890 --> 00:00:22.070
on the internet.

00:00:22.070 --> 00:00:27.790
And luckily, Google Cloud
Platform Compute Engine has a

00:00:27.790 --> 00:00:30.940
very scalable, powerful load
balancer built right in.

00:00:33.770 --> 00:00:35.480
Basically what you do
is you configure a

00:00:35.480 --> 00:00:37.380
pool of your instances.

00:00:37.380 --> 00:00:40.010
And the Load Balancer will
automatically direct traffic

00:00:40.010 --> 00:00:43.620
among them, spreading out TCP
connections and [? UDP ?]

00:00:43.620 --> 00:00:45.705
packets amongst all
of your instances.

00:00:48.940 --> 00:00:50.960
As long as they stay healthy,
they get traffic.

00:00:50.960 --> 00:00:54.130
And if they become unhealthy,
the Load Balancer will no

00:00:54.130 --> 00:00:56.920
longer send them traffic until
they become healthy again.

00:00:56.920 --> 00:01:00.130
And you get to define
what exactly

00:01:00.130 --> 00:01:03.230
healthy is for your instances.

00:01:03.230 --> 00:01:06.700
What happens is Compute Engine
will send HTTP requests to

00:01:06.700 --> 00:01:08.130
your instances.

00:01:08.130 --> 00:01:10.740
And when they get a
200 response back,

00:01:10.740 --> 00:01:12.120
it's considered healthy.

00:01:12.120 --> 00:01:14.150
And if anything else comes
back, it's unhealthy.

00:01:14.150 --> 00:01:16.460
So it's completely under
your control.

00:01:16.460 --> 00:01:17.710
Let's go ahead and take
a look at the demo.

00:01:20.700 --> 00:01:24.470
So what we've got here is an
App Engine application.

00:01:24.470 --> 00:01:29.060
When I hit this Start VMs
button, it's made a request to

00:01:29.060 --> 00:01:31.440
the Compute Engine API, and
we're spinning up some

00:01:31.440 --> 00:01:34.680
instances to run this
demo workload.

00:01:34.680 --> 00:01:36.920
It's a fractal generator.

00:01:36.920 --> 00:01:40.010
And as the instances come up,
they're running a startup

00:01:40.010 --> 00:01:46.110
script that downloads a go
language fractal generator,

00:01:46.110 --> 00:01:48.650
and spins that up and
starts it running.

00:01:48.650 --> 00:01:52.660
As the instances have gone green
here on the demo, that

00:01:52.660 --> 00:01:55.960
means the instance is up and
it's starting to go through

00:01:55.960 --> 00:01:57.340
its boot process.

00:01:57.340 --> 00:02:00.200
And as soon as we start seeing
check marks, then those are

00:02:00.200 --> 00:02:02.860
actually running this
fractal software.

00:02:02.860 --> 00:02:07.690
And this is basically intended
as a proxy for your

00:02:07.690 --> 00:02:09.070
application.

00:02:09.070 --> 00:02:13.600
You can imagine any sort of
CPU-heavy application--

00:02:13.600 --> 00:02:15.830
this is taking the place
of that in the demo.

00:02:15.830 --> 00:02:19.190
So let me go ahead and show
the fractals here.

00:02:19.190 --> 00:02:21.580
On the left-hand side, we've
got a single instance

00:02:21.580 --> 00:02:22.410
serving this up.

00:02:22.410 --> 00:02:25.220
And on the right-hand
side, right

00:02:25.220 --> 00:02:27.250
now we have 10 instances.

00:02:27.250 --> 00:02:31.560
So we can go ahead
and add more VMs.

00:02:31.560 --> 00:02:37.080
And as we zoom around, even
though we have new VMs coming

00:02:37.080 --> 00:02:42.550
up, we see both of them
working well.

00:02:42.550 --> 00:02:45.210
And the one on the right, things
are coming in faster

00:02:45.210 --> 00:02:47.660
because we're actually
cooperating, using multiple

00:02:47.660 --> 00:02:49.300
instances to pull this up.

00:02:49.300 --> 00:02:51.940
And that's all transparent
as far as this client

00:02:51.940 --> 00:02:52.950
application's concerned.

00:02:52.950 --> 00:02:56.050
Each side is just hitting one
IP address, and the answers

00:02:56.050 --> 00:02:57.516
are coming back.

00:02:57.516 --> 00:03:03.350
If something were to go wrong,
say we head behind the scenes

00:03:03.350 --> 00:03:10.350
and we cause a failure in this
case, but something happened

00:03:10.350 --> 00:03:11.950
to one of your instances, we're
going to go ahead and

00:03:11.950 --> 00:03:15.890
get rid of number two.

00:03:15.890 --> 00:03:21.660
And it's zero-based here, so
we should see this one drop

00:03:21.660 --> 00:03:23.140
out, and there it goes.

00:03:23.140 --> 00:03:28.530
And we can still zoom around and
nothing is changed as far

00:03:28.530 --> 00:03:29.990
as our client application's
concerned.

00:03:29.990 --> 00:03:33.460
It's still sending and receiving
requests, still

00:03:33.460 --> 00:03:34.680
moving fast.

00:03:34.680 --> 00:03:37.010
We've added new instances in and
we've dropped one out, and

00:03:37.010 --> 00:03:40.050
all of that's transparent to
both our application and all

00:03:40.050 --> 00:03:41.380
of our clients.

00:03:41.380 --> 00:03:43.850
So let's come back.

00:03:43.850 --> 00:03:44.695
Thanks for that.

00:03:44.695 --> 00:03:48.910
And I also want to stress that
this is not just a virtual

00:03:48.910 --> 00:03:51.440
machine serving this
traffic up.

00:03:51.440 --> 00:03:54.830
This is Google's network
infrastructure acting as your

00:03:54.830 --> 00:03:55.670
load balancer.

00:03:55.670 --> 00:04:01.220
So our network infrastructure is
actually routing your data

00:04:01.220 --> 00:04:02.680
to your instances.

00:04:02.680 --> 00:04:06.750
And what that means is, if you
have a big spike in traffic,

00:04:06.750 --> 00:04:09.720
you don't have to wait for
virtual machines to warm up in

00:04:09.720 --> 00:04:11.700
order to handle that traffic.

00:04:11.700 --> 00:04:12.970
Google's network infrastructure
will

00:04:12.970 --> 00:04:14.100
handle it for you.

00:04:14.100 --> 00:04:16.180
So please give it a try.

00:04:16.180 --> 00:04:20.130
We'll have some links to the
docs and other details down

00:04:20.130 --> 00:04:21.100
below the video.

00:04:21.100 --> 00:04:22.750
So take care, and happy
load balancing.

