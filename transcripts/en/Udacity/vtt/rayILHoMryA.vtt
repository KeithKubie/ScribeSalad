WEBVTT
Kind: captions
Language: en

00:00:01.160 --> 00:00:04.450
In the programming
webcast session today.

00:00:04.450 --> 00:00:09.550
And today we'll be focusing upon
object-oriented programming.

00:00:09.550 --> 00:00:15.350
A lot, some people may be at stage three
already, who are taking Kinnaugh's

00:00:15.350 --> 00:00:19.370
course, and who are looking at how
you would do object-oriented design.

00:00:20.650 --> 00:00:24.370
And some people maybe may
have not gotten there.

00:00:24.370 --> 00:00:28.710
So if you feel like the concepts that
we're talking and the code that we're

00:00:28.710 --> 00:00:35.070
sharing with you, if it doesn't make
sense, feel free to pause the video.

00:00:35.070 --> 00:00:39.510
You know, make sure you work through
stage three first before you come on and

00:00:39.510 --> 00:00:40.800
look at this webcast session.

00:00:40.800 --> 00:00:41.510
&gt;&gt; Yeah, come back here.

00:00:41.510 --> 00:00:45.456
That will always be here
recorded on the forums and

00:00:45.456 --> 00:00:48.628
on the Google Plus
page site [INAUDIBLE].

00:00:48.628 --> 00:00:52.250
&gt;&gt; Yeah, so highly recommend it because
we will not go over the basics of

00:00:52.250 --> 00:00:53.560
object oriented programming.

00:00:53.560 --> 00:00:57.520
We assume that you know the basics
already through stage three.

00:00:57.520 --> 00:01:01.905
Because the stage three videos will
actually tell you how you would do basic

00:01:01.905 --> 00:01:03.790
object oriented programming.

00:01:05.269 --> 00:01:09.825
So this is for people who want to
learn how to apply this or stuff.

00:01:09.825 --> 00:01:14.790
If you need more practice,
if you want to see another application,

00:01:14.790 --> 00:01:17.480
something a little more real world,
I think will be good.

00:01:17.480 --> 00:01:24.707
So that this perfect webcast for the
students who are at that stage already.

00:01:24.707 --> 00:01:26.564
&gt;&gt; Yeah, actually I have
a question right before we start.

00:01:26.564 --> 00:01:28.306
It's a good thing to start off with.

00:01:28.306 --> 00:01:32.596
What is the main difference between
what we've been learning like procedural

00:01:32.596 --> 00:01:37.125
programming and then we’re learning now
which is object oriented programming?

00:01:37.125 --> 00:01:40.020
&gt;&gt; Yeah, so procedural programming
is step by step instruction.

00:01:40.020 --> 00:01:45.510
So basically you start from top to
bottom and that's in a nutshell.

00:01:45.510 --> 00:01:50.958
You start everything from top to bottom
and you never go back to the code.

00:01:50.958 --> 00:01:56.445
Object oriented programming, you start
from top to bottom but you also go back.

00:01:56.445 --> 00:01:59.760
[LAUGHTER] That’s the in a nutshell,
you go back.

00:01:59.760 --> 00:02:03.918
You actually take to program,
okay this is what I programmed before,

00:02:03.918 --> 00:02:05.538
I want to keep going back and

00:02:05.538 --> 00:02:09.145
keep executing this code that I
want you to do, as an object.

00:02:09.145 --> 00:02:13.005
And furthermore the main
difference between procedural and

00:02:13.005 --> 00:02:16.946
object is that procedures there's
no such thing as objects.

00:02:16.946 --> 00:02:23.600
And basically an object is defined as,
it's a state.

00:02:23.600 --> 00:02:26.140
It's an entity that contains a state and

00:02:26.140 --> 00:02:29.430
it contains actions to
interact with the world.

00:02:29.430 --> 00:02:32.720
It's like an outside world or
an internal world like the programming

00:02:32.720 --> 00:02:38.380
system, because basically, if I can
give you an example, this is an object.

00:02:38.380 --> 00:02:43.310
This is a dry eraser marker.

00:02:43.310 --> 00:02:48.120
So the state and the attributes,
it's black, it's cylindrical.

00:02:48.120 --> 00:02:48.930
&gt;&gt; It's erasable.

00:02:48.930 --> 00:02:49.980
&gt;&gt; It's erasable.

00:02:49.980 --> 00:02:53.650
And an action is that I could
actually use this to write.

00:02:53.650 --> 00:02:57.180
So I can actually think
about programming,

00:02:57.180 --> 00:03:00.130
if I were to assimilate
this in my programming.

00:03:00.130 --> 00:03:04.940
In the programming world like in
the computer, I would tell the computer,

00:03:04.940 --> 00:03:07.570
this is an object.

00:03:07.570 --> 00:03:12.910
And I'm going to tell it, okay, every
object has the ability to hold a shape.

00:03:12.910 --> 00:03:14.350
&gt;&gt; Cool.
&gt;&gt; A cylindrical shape?

00:03:14.350 --> 00:03:15.480
&gt;&gt; Yeah.

00:03:15.480 --> 00:03:21.260
Has an attribute to be black and
it has the ability.

00:03:21.260 --> 00:03:23.450
I'm going to write
a function called write so

00:03:23.450 --> 00:03:27.960
that each object has the ability
to write by itself and on its own.

00:03:27.960 --> 00:03:30.520
So we'll show you right now how

00:03:31.860 --> 00:03:35.240
of the application that
we'll be building today.

00:03:35.240 --> 00:03:39.180
And how it'd be very,
very hard and very error prone if

00:03:39.180 --> 00:03:43.930
you were to use procedural programming
versus object oriented programming.

00:03:43.930 --> 00:03:45.430
Do you have anything else to add, John?

00:03:45.430 --> 00:03:48.290
&gt;&gt; Not for right now, but will later.

00:03:48.290 --> 00:03:51.240
&gt;&gt; Okay, great, so
let's click done here.

00:03:51.240 --> 00:03:53.950
&gt;&gt; All right, let’s dive in.

00:03:53.950 --> 00:03:57.029
&gt;&gt; Let’s dive in.
I'm just show you in the next 30 minutes

00:03:57.029 --> 00:04:00.320
or so, 40 minutes,
of what we'll be building.

00:04:00.320 --> 00:04:02.500
So I'll just show you right now.

00:04:02.500 --> 00:04:07.882
So basically you seeing
the screen shot here?

00:04:07.882 --> 00:04:12.090
So basically, go here, here you go.

00:04:12.090 --> 00:04:12.690
&gt;&gt; Very cool.
&gt;&gt; So

00:04:12.690 --> 00:04:15.750
this is actually an application
that you can build in Python.

00:04:15.750 --> 00:04:21.050
We're going to give you all the starter
code and also this final code as well.

00:04:21.050 --> 00:04:26.437
So you can all go back and code along
and try to understand and the parts and

00:04:26.437 --> 00:04:31.402
the processes that's involved
in object oriented programming.

00:04:31.402 --> 00:04:36.020
In this case, you see it's a simple
program, it's a graphical program.

00:04:36.020 --> 00:04:38.820
&gt;&gt; Yeah.
&gt;&gt; So this is actually for a lot of

00:04:38.820 --> 00:04:42.663
people probably your first time seeing-
&gt;&gt; Colors.

00:04:42.663 --> 00:04:47.028
&gt;&gt; And not just the terminal,
not just a text based interface.

00:04:47.028 --> 00:04:51.103
But now we're diving a little bit into
the world of graphical user interface or

00:04:51.103 --> 00:04:52.880
GUI programming.

00:04:52.880 --> 00:04:56.740
And yeah, there are tons of
libraries that Python has.

00:04:56.740 --> 00:05:01.723
So you just have the ability to
use these libraries to be able

00:05:01.723 --> 00:05:05.620
to build these sort of
graphical interfaces.

00:05:06.930 --> 00:05:09.637
Great, so that is what we want to build.

00:05:09.637 --> 00:05:12.946
And our starter code,
this is our starter code.

00:05:12.946 --> 00:05:16.640
I'm just going to run our
starter code right now.

00:05:16.640 --> 00:05:19.264
It's just this and that's it.

00:05:19.264 --> 00:05:22.931
&gt;&gt; That's so-
&gt;&gt; And no, there's no edge collision.

00:05:22.931 --> 00:05:27.765
We need to program that in but you can
see that it's a very basic program that

00:05:27.765 --> 00:05:30.620
actually goes in and animates a circle.

00:05:30.620 --> 00:05:37.558
I'll just say these are balls,
just to make everyone understand that

00:05:37.558 --> 00:05:42.720
we're trying to animate
some balls in this swing.

00:05:42.720 --> 00:05:46.997
So here are the things that we're
going to go on and talk about and

00:05:46.997 --> 00:05:50.284
learn throughout this webcast.

00:05:50.284 --> 00:05:54.540
I'm going to to dive in and
talk about the theory on animation and

00:05:54.540 --> 00:05:56.600
how to implement animation in a program.

00:05:56.600 --> 00:06:02.546
So it's pretty simple once we decompose
animation and what animation really is.

00:06:02.546 --> 00:06:07.126
So hopefully after this webcast you'll
be able to understand basically

00:06:07.126 --> 00:06:12.095
the magic behind animation and computer
graphics and computer programming.

00:06:12.095 --> 00:06:17.233
So any animation that you see, this is
actually the building blocks stuff and

00:06:17.233 --> 00:06:22.708
then the details that you'll see in
computer graphics, computer programming.

00:06:22.708 --> 00:06:24.320
That's Jonah?

00:06:24.320 --> 00:06:26.990
&gt;&gt; Yeah, we're going to dive in
a little bit deeper into the code and

00:06:26.990 --> 00:06:31.340
then see actually how these circle
objects are created in Python and

00:06:31.340 --> 00:06:36.080
then how it sort of derives from other
classes that we've created like a shape.

00:06:36.080 --> 00:06:39.440
And sort of see the nitty-gritty
about how class methods work,

00:06:39.440 --> 00:06:42.020
how instances work and
how method overriding works.

00:06:42.020 --> 00:06:44.210
I know that you tried these but

00:06:44.210 --> 00:06:47.910
we can see it happen live right
in front of us, so it'll be cool.

00:06:47.910 --> 00:06:51.220
And then later on we'll see how we can

00:06:51.220 --> 00:06:56.180
make this a full-featured program by
making the circles hit that edge and

00:06:56.180 --> 00:06:58.350
then bounce back in
a way that's believable.

00:06:59.430 --> 00:07:02.600
And anyway that looks
kind of cool in the end.

00:07:02.600 --> 00:07:06.320
And that's all doable in
few lines of Python code,

00:07:06.320 --> 00:07:09.400
so it'll be fun to see
how it comes together.

00:07:09.400 --> 00:07:10.380
&gt;&gt; Awesome, great.

00:07:10.380 --> 00:07:13.570
So can we switch back
to just our camera?

00:07:13.570 --> 00:07:14.800
&gt;&gt; Yeah.

00:07:14.800 --> 00:07:15.380
&gt;&gt; Awesome, great.

00:07:15.380 --> 00:07:20.700
So let's talk about animation,
theory of animation, all right?

00:07:20.700 --> 00:07:24.570
Jonah, when you were growing up
have you ever used a flip book?

00:07:24.570 --> 00:07:25.480
&gt;&gt; Yeah, those are fun.

00:07:25.480 --> 00:07:26.210
&gt;&gt; Those are fun, right?

00:07:26.210 --> 00:07:29.730
Basically you have a flip book,
stacks of paper here.

00:07:29.730 --> 00:07:34.640
You draw something, and then on the next
page you draw the same object, right?

00:07:34.640 --> 00:07:39.060
Say a character, like say
Mickey Mouse or something like that.

00:07:39.060 --> 00:07:41.320
Then make Mickey Mouse slightly change.

00:07:41.320 --> 00:07:44.230
Yeah he dances, and on every paper,
and on every frame,

00:07:44.230 --> 00:07:46.440
the image slightly changes.

00:07:46.440 --> 00:07:47.890
Not too much, but

00:07:47.890 --> 00:07:51.320
just enough to be able to see a picture,
make you believe that it's moving.

00:07:51.320 --> 00:07:56.059
So basically animation and
computer graphics in movies and film,

00:07:56.059 --> 00:07:58.608
is just a series of still pictures.

00:07:58.608 --> 00:08:00.779
It's all a lie.
&gt;&gt; It's all a lie, really, basically.

00:08:00.779 --> 00:08:01.498
It's an illusion.

00:08:01.498 --> 00:08:07.852
I think it's our eyes cannot,
above a certain point,

00:08:07.852 --> 00:08:12.684
like 65 frame per second, our eyes will

00:08:12.684 --> 00:08:17.810
not be able to see,
if we, well let's see.

00:08:17.810 --> 00:08:20.789
You know those stop-motion cameras,
or those high FPS cameras?

00:08:20.789 --> 00:08:22.311
&gt;&gt; Right, right, right.

00:08:22.311 --> 00:08:26.155
&gt;&gt; because if it's a high FPS camera,
like at 2,000 frames per second when you

00:08:26.155 --> 00:08:29.260
record it, you'll be able to
see things like doing this.

00:08:29.260 --> 00:08:33.436
If I drop this, you'll be able to,
at a high FPS camera,

00:08:33.436 --> 00:08:38.830
you'll be able to see this because it's
fast enough to see these frames so

00:08:38.830 --> 00:08:41.280
that it looks like you got stuff.

00:08:41.280 --> 00:08:43.990
But our eyes can not process that fast.

00:08:43.990 --> 00:08:48.070
&gt;&gt; If you mean like a high
FPS camera were filming film.

00:08:48.070 --> 00:08:50.230
&gt;&gt; Yeah, filming or
filming this pen drop.

00:08:50.230 --> 00:08:50.890
&gt;&gt; Right.

00:08:50.890 --> 00:08:51.840
&gt;&gt; It will look like this.

00:08:51.840 --> 00:08:53.140
&gt;&gt; Right.

00:08:53.140 --> 00:08:56.090
&gt;&gt; But
our eyes will just look like this.

00:08:56.090 --> 00:08:59.560
Same thing, it's like we're just
basically fooling our eyes because

00:09:00.610 --> 00:09:03.078
we can only display at
50 frames per second.

00:09:03.078 --> 00:09:07.030
If this was 50 frames per second,
this is an image, this is an image,

00:09:07.030 --> 00:09:08.640
this is an image here.

00:09:08.640 --> 00:09:14.010
It means that it gives us the illusion
that the picture that I'm seeing in

00:09:14.010 --> 00:09:17.617
the frame of the picture is
actually moving, movement.

00:09:17.617 --> 00:09:22.200
And that is the whole big
theory of animation right now,

00:09:22.200 --> 00:09:25.490
so let's just step back and
reflect on what it means.

00:09:25.490 --> 00:09:28.660
Is that animation is really
just series of pictures.

00:09:29.940 --> 00:09:31.860
Okay, we have this basic theory.

00:09:31.860 --> 00:09:33.260
How do we actually apply it?

00:09:33.260 --> 00:09:36.674
With programming,
we basically tell the program,

00:09:36.674 --> 00:09:40.090
okay I want you to display
this picture many times.

00:09:40.090 --> 00:09:41.393
&gt;&gt; Yeah.
&gt;&gt; In rapid succession.

00:09:41.393 --> 00:09:45.907
So basically, what does that mean,
in computer programming,

00:09:45.907 --> 00:09:47.506
in rapid succession?

00:09:47.506 --> 00:09:51.344
I want to draw a picture
about the same time but

00:09:51.344 --> 00:09:55.300
then I just changed
the picture a little bit.

00:09:55.300 --> 00:09:59.660
Can I just call that function over and
over again?

00:09:59.660 --> 00:10:04.246
Let's say that I have a function
that draws something,

00:10:04.246 --> 00:10:09.124
can't I just draw it and
then wait a certain amount of time,

00:10:09.124 --> 00:10:12.464
very little time and then draw it again?

00:10:12.464 --> 00:10:15.036
Create a function, wait, execute it,

00:10:15.036 --> 00:10:17.848
then wait to then call
this function again?

00:10:17.848 --> 00:10:22.412
Draw, so that's basically how
they're actually going to

00:10:22.412 --> 00:10:26.530
implement animation, so
let's go back to the code.

00:10:26.530 --> 00:10:31.890
I'll show you how actual the animation
will work out and don't worry,

00:10:31.890 --> 00:10:35.140
we will give you all
these starter code and

00:10:35.140 --> 00:10:37.770
when we post our notes in
the discussion forums.

00:10:38.870 --> 00:10:43.800
So basically our animation
is basically made up of,

00:10:43.800 --> 00:10:49.440
this whole application is made
of these things right here.

00:10:49.440 --> 00:10:51.766
This is the constructor.

00:10:51.766 --> 00:10:55.151
So again if you, should have been
able to go to stage three or

00:10:55.151 --> 00:10:59.450
if you finish stage three, you're
familiar with constructor function.

00:10:59.450 --> 00:11:01.720
So whenever we create
an application like this,

00:11:01.720 --> 00:11:04.800
an application frame,
I have a construction function.

00:11:04.800 --> 00:11:09.040
So it will actually upon option
creation of this application it's

00:11:09.040 --> 00:11:12.568
going to actually execute these steps.

00:11:12.568 --> 00:11:13.660
So I'm going to use,

00:11:13.660 --> 00:11:17.328
so this is, by the way the library
that we're using is called Tkinter.

00:11:17.328 --> 00:11:21.014
T-K-I-N-T-E-R.

00:11:21.014 --> 00:11:24.510
So basically what this says is like,

00:11:24.510 --> 00:11:29.120
I want to call,
I want to inherit a frame object, and

00:11:29.120 --> 00:11:33.620
then basically call the constructor for
the frame object.

00:11:33.620 --> 00:11:36.140
I'll then put on line 18 self.grid.

00:11:36.140 --> 00:11:41.310
I'll then put this whole application,
and make it show.

00:11:41.310 --> 00:11:44.140
Because it's not enough
that I create the object,

00:11:44.140 --> 00:11:47.440
I need to make it show on the screen.

00:11:47.440 --> 00:11:50.650
Then after that great,
I'm going to create all my widgets.

00:11:50.650 --> 00:11:58.320
And my widgets is just things that I
want to put onto my application screen.

00:11:58.320 --> 00:12:00.262
And in this function,

00:12:00.262 --> 00:12:03.840
this create which you will
actually create my CanvasObject.

00:12:03.840 --> 00:12:07.110
We're going to be using an object
called the canvas object.

00:12:07.110 --> 00:12:13.741
The canvas actually has functions

00:12:13.741 --> 00:12:18.316
that help us draw base.

00:12:18.316 --> 00:12:22.687
So without the canvas object it
will be harder for us actually,

00:12:22.687 --> 00:12:28.540
basically physically access the screen
and then paint the pixels on the screen.

00:12:28.540 --> 00:12:30.855
because we will have to figure
out how to do ourselves.

00:12:30.855 --> 00:12:36.225
But this library gives us the ability to
draw shapes, pre-packaged, draw shapes,

00:12:36.225 --> 00:12:41.575
put picture stuff on it,
put pixels on it, pretty easily.

00:12:41.575 --> 00:12:43.175
And then I'm going to
create my canvas objects.

00:12:43.175 --> 00:12:47.051
And in there my canvas objects is
actually my circles, my balls.

00:12:47.051 --> 00:12:49.670
And then I'm going to call
these function called animate.

00:12:49.670 --> 00:12:51.640
Okay, I've created my initial state.

00:12:51.640 --> 00:12:55.250
I have certain circles and balls and
then I'm going to actually

00:12:55.250 --> 00:12:59.550
call the animate function to
actually start animating this.

00:12:59.550 --> 00:13:04.550
So let's go down to the animate
function itself, the __animate.

00:13:04.550 --> 00:13:10.040
And by the way, a caveat, __ in Python
means that it's a private variable.

00:13:10.040 --> 00:13:14.420
So I'm creating these private
functions as well to tell, yeah,

00:13:14.420 --> 00:13:15.620
this is a private function.

00:13:15.620 --> 00:13:18.900
You should not be able to,
you should not access

00:13:18.900 --> 00:13:22.670
this method animate outside
of the application object.

00:13:22.670 --> 00:13:24.950
You should never access that.

00:13:24.950 --> 00:13:26.640
So, let's go down to animate.

00:13:26.640 --> 00:13:29.950
&gt;&gt; Can you tell us a little bit more
about the difference between private and

00:13:29.950 --> 00:13:31.330
public functions?

00:13:31.330 --> 00:13:37.290
&gt;&gt; Sure, so private functions and
variables are variables

00:13:37.290 --> 00:13:40.330
that need you define in your object
that that's an internal space.

00:13:40.330 --> 00:13:43.453
Work space you don't
want other people other

00:13:43.453 --> 00:13:47.492
programmers to access it because yeah,
it's internal.

00:13:47.492 --> 00:13:54.320
It's similar to, I'll say let's
imagine that an object is a person.

00:13:54.320 --> 00:13:55.907
&gt;&gt; Okay.
&gt;&gt; I want to be able to

00:13:55.907 --> 00:13:59.100
access the breathing rate of a person.

00:14:00.290 --> 00:14:03.974
&gt;&gt; Right.
I don't want to actually literally go in

00:14:03.974 --> 00:14:07.610
and take your lung and
[LAUGH] it's crude but

00:14:07.610 --> 00:14:12.370
it's kind of like, it's an-
&gt;&gt; Yeah, you can ask them.

00:14:12.370 --> 00:14:13.510
&gt;&gt; Can you measure it?

00:14:13.510 --> 00:14:14.040
You measure it.

00:14:14.040 --> 00:14:21.240
So basically there's probably
a function called like askBreathRate.

00:14:21.240 --> 00:14:23.410
And then the person would know, okay,

00:14:23.410 --> 00:14:26.190
I'll put my mouth on the breathalyzer
and I'll breathe into this machine.

00:14:26.190 --> 00:14:30.496
Versus you just literally taking
my lungs out and examining them.

00:14:30.496 --> 00:14:31.180
&gt;&gt; Right, okay.

00:14:31.180 --> 00:14:32.290
&gt;&gt; That happens,

00:14:32.290 --> 00:14:38.740
there's a whole potential world of
problems that they can run into.

00:14:38.740 --> 00:14:41.900
If you were to mess with a persons
lungs directly, that's bad.

00:14:42.920 --> 00:14:45.379
Even accidentally,
even if you had the best intentions.

00:14:46.520 --> 00:14:48.190
These private variables are private for
a reason.

00:14:48.190 --> 00:14:52.866
&gt;&gt; Don't be messing with
other people's organs.

00:14:52.866 --> 00:14:55.074
&gt;&gt; Yeah, that's,
I'll say it's a very crude analogy but

00:14:55.074 --> 00:14:56.186
I think that analogy works.

00:14:56.186 --> 00:14:57.706
&gt;&gt; No, I understand, yeah.

00:14:57.706 --> 00:14:59.970
&gt;&gt; Yeah, so that's the reason why we
have this notion of public variables.

00:14:59.970 --> 00:15:05.560
These are, okay, public facing
functions that you should use.

00:15:05.560 --> 00:15:08.480
Don't mess with the internal
implications that I'm

00:15:08.480 --> 00:15:09.990
setting up in my objects.

00:15:09.990 --> 00:15:14.940
They're meant to be, they're there and
they're not meant to be accessed.

00:15:14.940 --> 00:15:16.966
&gt;&gt; Now, how do you separate them?

00:15:16.966 --> 00:15:17.798
How do you separate,

00:15:17.798 --> 00:15:20.750
how do you know if something's
a private variable as opposed to?

00:15:20.750 --> 00:15:24.520
&gt;&gt; So, as I've mentioned before,
in Python there's this __.

00:15:24.520 --> 00:15:25.850
&gt;&gt; I'm sorry, right, gotcha.

00:15:25.850 --> 00:15:30.496
&gt;&gt; So, you'll often see a lot of,
if you're diving into a function or

00:15:30.496 --> 00:15:36.480
an object, you're liable to see __ in
the function's or object's definition.

00:15:36.480 --> 00:15:38.490
That means that these are private.

00:15:38.490 --> 00:15:41.790
You should not be playing
around with them.

00:15:41.790 --> 00:15:44.460
You can always investigate and
see what they are.

00:15:44.460 --> 00:15:46.900
If you're trying to understand
how they're implemented.

00:15:46.900 --> 00:15:48.720
Implemented thereafter, but using it?

00:15:48.720 --> 00:15:49.660
&gt;&gt; I don't.

00:15:49.660 --> 00:15:51.547
&gt;&gt; Stay away from those.

00:15:51.547 --> 00:15:52.790
Good question though.

00:15:52.790 --> 00:15:55.924
So, animate,
here's the whole animate function.

00:15:55.924 --> 00:15:59.157
This is actually the whole
secret to animation.

00:15:59.157 --> 00:16:00.040
This is the magic.

00:16:00.040 --> 00:16:04.650
This is what,
less than ten lines of code.

00:16:04.650 --> 00:16:05.880
&gt;&gt; Great stuff.

00:16:05.880 --> 00:16:07.612
&gt;&gt; Right.
So, here we go.

00:16:07.612 --> 00:16:11.730
Here's that's, and you're thinking
about it like, wow this is it?

00:16:11.730 --> 00:16:13.200
Well, yeah this is it.

00:16:13.200 --> 00:16:15.740
It's basically,
here's three stages of animation.

00:16:15.740 --> 00:16:19.570
One is,
I update all my object's positions.

00:16:19.570 --> 00:16:22.470
In this case, I update their x and
y coordinates.

00:16:22.470 --> 00:16:24.100
because we're using
a coordinates system.

00:16:24.100 --> 00:16:27.420
This is how we place objects on
a canvas music coordinate system.

00:16:27.420 --> 00:16:29.505
So x axis, y axis.

00:16:29.505 --> 00:16:32.805
Axis if your own back
to your algebra days,

00:16:32.805 --> 00:16:34.335
where you're trying to graph an object.

00:16:34.335 --> 00:16:37.685
So, yeah there we go, so you should've
paid more attention in math class.

00:16:37.685 --> 00:16:41.305
This actually applies directly

00:16:41.305 --> 00:16:46.475
if you understand the Cartesian
coordinate system.

00:16:46.475 --> 00:16:48.505
So, I have a function that
says update everything.

00:16:48.505 --> 00:16:53.310
Go through all of my objects,
and update their position.

00:16:53.310 --> 00:16:58.450
So basically, if I go down here,
updateAll is with my starting code.

00:16:58.450 --> 00:16:59.440
I have it all in one circle.

00:16:59.440 --> 00:17:06.260
My circleLeft is my coordinate,
is basically my x axis.

00:17:06.260 --> 00:17:10.790
And then I'm adding 250
over FPS to number,

00:17:10.790 --> 00:17:14.910
what number The circleLeft is already.

00:17:14.910 --> 00:17:20.280
So in theory, if I have circleLeft
is equal to zero, the next frame or

00:17:20.280 --> 00:17:25.750
the next second,
I move it 250 pixels for every second,

00:17:25.750 --> 00:17:31.590
then the next second,
it's going to be at coordinate 250.

00:17:31.590 --> 00:17:33.520
So, that's how you update things.

00:17:33.520 --> 00:17:36.690
Let's goes back and do a redrawAll.

00:17:36.690 --> 00:17:38.060
Now, here's the thing.

00:17:38.060 --> 00:17:40.160
This won't count as a canvas.

00:17:41.460 --> 00:17:45.550
If we're painting on a regular canvas,
it means that

00:17:46.670 --> 00:17:51.210
if you put paint on your
canvas that's pretty much it.

00:17:51.210 --> 00:17:54.290
You can't, it's hard to erase the
pixels, or erase the paint, on a canvas.

00:17:54.290 --> 00:17:58.310
And that's why we tell them, we tell
people especially in programming,

00:17:58.310 --> 00:17:59.360
we use technology.

00:17:59.360 --> 00:18:02.020
That's why we use
the term called canvas.

00:18:02.020 --> 00:18:04.730
If you paint pixels on the canvas,
it will not go away.

00:18:05.910 --> 00:18:09.190
Unless, you tell it to
basically erase it.

00:18:09.190 --> 00:18:14.050
So therefore, if you were to paint,
we paint on top of the canvas.

00:18:14.050 --> 00:18:17.220
It's not going to look like
the circle is animated.

00:18:17.220 --> 00:18:19.950
So, let's actually culling of this out.

00:18:19.950 --> 00:18:24.185
I'm not going to clear everything now,
so actually going to run this program.

00:18:24.185 --> 00:18:29.922
Self rejoin, so now you can rejoin,

00:18:29.922 --> 00:18:37.520
there you go,there you go,
I'm going to do this.

00:18:40.170 --> 00:18:43.670
So, I'm not dealing all
the stuff on my accounts,

00:18:43.670 --> 00:18:47.330
I'm just costly drawing things over and
over again.

00:18:47.330 --> 00:18:47.830
&gt;&gt; Okay.

00:18:48.980 --> 00:18:50.500
So.
&gt;&gt; So, it should make a line.

00:18:50.500 --> 00:18:51.370
&gt;&gt; It should make a line.

00:18:52.480 --> 00:18:53.460
&gt;&gt; See.
There it is.

00:18:53.460 --> 00:18:54.040
&gt;&gt; There it is.
See.

00:18:54.040 --> 00:18:54.890
Okay.

00:18:54.890 --> 00:18:58.720
And, that's not what we want.

00:18:58.720 --> 00:19:02.240
Sometimes we want that,
if we were to check what's wrong.

00:19:02.240 --> 00:19:09.790
Draw a series of pixels, then we waste
what's on the canvas at every frame.

00:19:09.790 --> 00:19:11.790
So, still back here, there we go.

00:19:11.790 --> 00:19:13.086
So, basically we draw,

00:19:13.086 --> 00:19:16.360
basic cells tell us I'm going to
delete all my existing Pixels and

00:19:16.360 --> 00:19:21.130
then I'm going to actually call on
canvas, the kind of canvas over here.

00:19:21.130 --> 00:19:23.280
And there's a function
called create_oval and

00:19:23.280 --> 00:19:26.260
then you actually feed
it the coordinates here.

00:19:27.520 --> 00:19:32.220
And the fill color is the circleColor
and then the width is zero like a iii.

00:19:32.220 --> 00:19:35.920
So, then this will
actually draw the circle.

00:19:37.110 --> 00:19:41.590
Now, let's go back this is
still how I set up things,

00:19:41.590 --> 00:19:44.930
like a class application that's
an object but that's like bullet point

00:19:45.940 --> 00:19:50.870
stuff but if we were to not use object
one to program for our object itself.

00:19:50.870 --> 00:19:54.780
Joan, I want to ask you okay,
Give me 30 objects.

00:19:54.780 --> 00:19:55.280
&gt;&gt; Yeah.

00:19:56.420 --> 00:19:57.110
That would be tough.

00:19:57.110 --> 00:19:58.670
&gt;&gt; Why would it be tough?

00:19:58.670 --> 00:20:03.830
Here's the code to create
this one object here.

00:20:03.830 --> 00:20:05.610
&gt;&gt; Yeah.
I mean, we can do that.

00:20:05.610 --> 00:20:08.610
We can just copy and
paste, and do it 30 times.

00:20:08.610 --> 00:20:09.880
That would be fine.

00:20:09.880 --> 00:20:11.030
We could do that.

00:20:12.310 --> 00:20:19.170
&gt;&gt; How about if I want to say, okay I
want some of the circles to be green.

00:20:19.170 --> 00:20:21.010
&gt;&gt; How many circle do
you want to be green?

00:20:21.010 --> 00:20:21.570
&gt;&gt; Well, 10.
10 green circles.

00:20:21.570 --> 00:20:24.570
And, I want maybe their
velocities to be different,

00:20:24.570 --> 00:20:26.995
I want them to start at
different locations.

00:20:26.995 --> 00:20:28.285
Sounds like too much work.

00:20:28.285 --> 00:20:28.875
&gt;&gt; Right, right.

00:20:28.875 --> 00:20:34.105
&gt;&gt; Sounds like, I want to do something
that could automate that work for

00:20:34.105 --> 00:20:34.995
me, to some extent.

00:20:34.995 --> 00:20:36.815
&gt;&gt; Right.
So this is in the procedural world.

00:20:36.815 --> 00:20:39.645
We don't have any sets of objects,

00:20:39.645 --> 00:20:41.825
like internal representation
of an object, right?

00:20:41.825 --> 00:20:42.720
&gt;&gt; Yeah.

00:20:42.720 --> 00:20:45.000
So, and
here's where the rubber meets the rope.

00:20:45.000 --> 00:20:47.880
I know there was a question asked,
what's the whole point?

00:20:47.880 --> 00:20:49.740
What's the advantages of
object [INAUDIBLE] primary?

00:20:49.740 --> 00:20:51.730
This is it, right here.

00:20:51.730 --> 00:20:55.297
If I tell you I wanted you
to create 1,000 objects.

00:20:55.297 --> 00:20:58.400
Let's say,
I want you to create a part of a system.

00:20:58.400 --> 00:20:59.670
So, sort of like a game.

00:20:59.670 --> 00:21:01.500
Write a part of a system.

00:21:01.500 --> 00:21:03.050
A thousand objects is nothing, really.

00:21:04.620 --> 00:21:05.640
&gt;&gt; Yeah.
10,000 objects.

00:21:05.640 --> 00:21:10.510
&gt;&gt; You need 10,000+ lines of code to
actually create all those objects.

00:21:10.510 --> 00:21:12.270
Those little circles.

00:21:12.270 --> 00:21:14.000
And then, change them.

00:21:14.000 --> 00:21:18.300
And then figure out, at 10,000
lines of code, all I want to find,

00:21:18.300 --> 00:21:22.760
maybe 500 of those,
I want to actually change the particle.

00:21:22.760 --> 00:21:25.920
Look at four or
five hundred of those circles.

00:21:25.920 --> 00:21:31.020
You could clearly see, that you're
going to be just lost hunting down,

00:21:31.020 --> 00:21:34.480
going through 10,000 lines of code.

00:21:34.480 --> 00:21:36.005
It takes way too much much time.

00:21:36.005 --> 00:21:37.665
It's not an efficient use of your time.

00:21:37.665 --> 00:21:40.855
It's going to slow down your computer,
if you have all these things and

00:21:40.855 --> 00:21:43.965
you try and change things on the fly.

00:21:43.965 --> 00:21:46.045
If, you know,
500 objects a time or not objects.

00:21:46.045 --> 00:21:48.320
500 lines coded at a time,
you try and change them on the fly.

00:21:48.320 --> 00:21:50.290
It's going to slow down your computer,
and

00:21:50.290 --> 00:21:52.270
it's not going to be a good
experience for the user.

00:21:52.270 --> 00:21:53.910
&gt;&gt; Yeah.
&gt;&gt; And that's what counts in the end.

00:21:53.910 --> 00:21:56.230
&gt;&gt; Yeah, and
development time will increase.

00:21:56.230 --> 00:21:57.760
&gt;&gt; Development time increases.

00:21:57.760 --> 00:22:00.390
If you ever want to change anything,
you need to debug.

00:22:00.390 --> 00:22:01.450
&gt;&gt; Yeah.
&gt;&gt; That's going to increase.

00:22:01.450 --> 00:22:02.370
&gt;&gt; That's going to increase.

00:22:02.370 --> 00:22:05.440
If you're working with other developers,
they're going to hate you.

00:22:05.440 --> 00:22:06.400
&gt;&gt; Yeah, that's true.

00:22:06.400 --> 00:22:07.140
&gt;&gt; That's true, right?

00:22:07.140 --> 00:22:08.990
Like other developers will say,
all right, great.

00:22:08.990 --> 00:22:10.170
You've created this.

00:22:10.170 --> 00:22:13.460
Gimme your code to
create 10,000 objects,

00:22:13.460 --> 00:22:16.550
I need to work on the user interface.

00:22:16.550 --> 00:22:17.840
&gt;&gt; I know.
And they're like, holy cow.

00:22:17.840 --> 00:22:19.560
&gt;&gt; Yeah.
You've just gained 10,000 lines of code.

00:22:19.560 --> 00:22:21.770
This is not going to work.

00:22:21.770 --> 00:22:24.700
&gt;&gt; People will talk behind your back and
be like, it's no abstraction,

00:22:24.700 --> 00:22:26.500
your object oriented programming is
&gt;&gt; Yeah.

00:22:26.500 --> 00:22:28.770
Exactly, and that's not good.

00:22:28.770 --> 00:22:33.330
So now, general work,
I go into how exactly we'd be,

00:22:33.330 --> 00:22:38.220
actually convert this implementation
to more of an object oriented one.

00:22:38.220 --> 00:22:38.960
&gt;&gt; Yeah, absolutely.

00:22:38.960 --> 00:22:41.920
I mean, you guys have run into
this sort of thing before in CSS.

00:22:41.920 --> 00:22:44.910
You don't want to style
things on the fly.

00:22:44.910 --> 00:22:47.790
It's really similar with object
oriented programming in Python.

00:22:47.790 --> 00:22:51.370
So, rather than creating those
four lines of code that you see,

00:22:51.370 --> 00:22:57.610
that Mark highlighted you can take
this idea and create an object for it.

00:22:57.610 --> 00:23:00.580
So, like we were talking about
earlier we'll make something like

00:23:00.580 --> 00:23:04.620
this expo marker except it's going to
be on the computer and it's a circle.

00:23:04.620 --> 00:23:09.860
So, what do we think about what's
the most general idea of when

00:23:09.860 --> 00:23:11.150
we think about a circle.

00:23:11.150 --> 00:23:13.780
So what A circle is a kind of shape,
right?

00:23:13.780 --> 00:23:15.250
So, when we're talking
about programming,

00:23:15.250 --> 00:23:18.000
we want to think general and
then more specific.

00:23:18.000 --> 00:23:20.960
So, we'll start with making a shape,

00:23:20.960 --> 00:23:24.190
because let's say later on
we want to make squares.

00:23:24.190 --> 00:23:25.570
&gt;&gt; Yeah, good point there.

00:23:25.570 --> 00:23:29.170
&gt;&gt; Or we want to make Corgis.

00:23:29.170 --> 00:23:30.170
&gt;&gt; They are your dogs, right?

00:23:30.170 --> 00:23:31.290
&gt;&gt; Yeah.
&gt;&gt; The shapes.

00:23:31.290 --> 00:23:32.820
It's a kind of shape, a dog shape.

00:23:32.820 --> 00:23:34.816
But you can still animate.

00:23:34.816 --> 00:23:40.030
Or actually,
draw the specific shape of a corgie.

00:23:40.030 --> 00:23:42.530
And there's options for
you to draw it out.

00:23:42.530 --> 00:23:44.348
&gt;&gt; Anything's possible, but

00:23:44.348 --> 00:23:48.300
it's only possibl.e if you
allow it to happen later on.

00:23:48.300 --> 00:23:50.450
So, you want to be forward
thinking with your programming.

00:23:50.450 --> 00:23:53.460
So, we start with
creating a Shape class.

00:23:53.460 --> 00:23:55.580
&gt;&gt; So, let me go back, go here?

00:23:55.580 --> 00:23:56.678
&gt;&gt; Yep.
&gt;&gt; So, class shape here.

00:23:56.678 --> 00:23:57.280
&gt;&gt; Class Shape.

00:23:57.280 --> 00:24:01.670
So we started defining this in
our final version of this code.

00:24:01.670 --> 00:24:06.162
And what, what are some
things that define a shape?

00:24:06.162 --> 00:24:08.950
So we can think about
where it is on the canvas.

00:24:08.950 --> 00:24:12.520
So have balls that move
around the canvas and

00:24:12.520 --> 00:24:15.240
they'll be in different
spots as their position.

00:24:15.240 --> 00:24:18.960
They're going to have a velocity
which is going to be their direction

00:24:18.960 --> 00:24:22.010
as well as the speed.

00:24:22.010 --> 00:24:23.690
They're going to have
a certain width and

00:24:23.690 --> 00:24:27.720
height, so we want to code
all these things into them.

00:24:27.720 --> 00:24:29.100
So this is how we do it.

00:24:29.100 --> 00:24:34.830
If you look closely in the code here,
we initialize it.

00:24:34.830 --> 00:24:37.850
Whenever we create a shape
we want to initialize it.

00:24:37.850 --> 00:24:40.430
And we're going to pass in all these
variables that we just talked about.

00:24:40.430 --> 00:24:43.780
We're going to pass in the velocity,
the width, the height, and the color.

00:24:43.780 --> 00:24:47.320
The canvas width, the canvas height,
and then its x and y values.

00:24:49.720 --> 00:24:54.160
So, we want to create these randomly
because we're just going to put them on

00:24:54.160 --> 00:24:58.830
the page, and make them do whatever they
do, and then have them bounce around.

00:24:58.830 --> 00:25:01.950
And then it will look fun in the end.

00:25:01.950 --> 00:25:07.480
So the way this works is we assigned
the x value of this shape to a random

00:25:07.480 --> 00:25:12.710
integer between zero and a canvas
width minus the width of circle.

00:25:12.710 --> 00:25:16.180
So this make sure that your
circle is within your canvas.

00:25:18.270 --> 00:25:19.866
Because you want to make sure,

00:25:19.866 --> 00:25:21.515
[BLANK_AUDIO]

00:25:21.515 --> 00:25:24.330
Your circle is where it is.

00:25:24.330 --> 00:25:25.880
So make sure that you're
not here on the edge.

00:25:25.880 --> 00:25:28.167
The same thing with the Y value.

00:25:28.167 --> 00:25:31.240
You want to make sure
its on the page itself.

00:25:33.300 --> 00:25:37.182
Then we assign width of the circle
to all the values that we created.

00:25:37.182 --> 00:25:42.847
The height, the color, and then also
we pass in the velocity as a list.

00:25:42.847 --> 00:25:44.566
Since it's going to be two values.

00:25:44.566 --> 00:25:48.141
We want to put in the speed
as well as the direction.

00:25:48.141 --> 00:25:50.010
&gt;&gt; So, actually, these are x and y.

00:25:50.010 --> 00:25:55.275
So the list velocity is just x and y.

00:25:55.275 --> 00:25:56.309
Just x and y.

00:25:56.309 --> 00:25:59.628
&gt;&gt; Okay, okay, okay.
&gt;&gt; It tells you the direction and

00:25:59.628 --> 00:26:01.591
magnitude as well.

00:26:01.591 --> 00:26:05.074
&gt;&gt; All right, so the x and y value's
going to give you the magnitude and

00:26:05.074 --> 00:26:06.080
the direction.

00:26:06.080 --> 00:26:08.260
&gt;&gt; And the direction at the same time.

00:26:08.260 --> 00:26:12.430
And also, I just want to point out,
why would we assign lists.

00:26:14.070 --> 00:26:19.568
Velocity is now just velocity
equals velocity here.

00:26:19.568 --> 00:26:21.939
And the reason why it's like with lists,

00:26:21.939 --> 00:26:25.660
like other mutable objects
that they act like pointers.

00:26:25.660 --> 00:26:26.230
&gt;&gt; Right.

00:26:26.230 --> 00:26:30.610
&gt;&gt; So you passed in a pointer You're
basically back passing in a reference

00:26:30.610 --> 00:26:34.970
to that same, look,
this is getting a little technical,

00:26:34.970 --> 00:26:36.110
down that same location in memory.

00:26:36.110 --> 00:26:40.630
And if you somehow change that,
things start happening.

00:26:40.630 --> 00:26:46.400
So whenever you want to pass
in a list or a tuple or

00:26:46.400 --> 00:26:51.690
anything that is mutable, make sure and
if you plan to change that and make

00:26:51.690 --> 00:26:57.255
sure that you've constantly like really
make sure that state is preserved.

00:26:57.255 --> 00:26:59.545
Patent a copy of it.

00:26:59.545 --> 00:27:04.633
And a trick that a lot of Python
programmers will will do is go use

00:27:04.633 --> 00:27:09.529
the list function to pass in
the list and the appList function

00:27:09.529 --> 00:27:14.980
will create an entire copy
dedicated just for that one object.

00:27:14.980 --> 00:27:15.870
&gt;&gt; Okay, that's great Mark.

00:27:15.870 --> 00:27:17.840
Actually, I didn't know about that.

00:27:17.840 --> 00:27:21.930
&gt;&gt; Yeah, so that's why I add in comments
like, you need to pass in this or else.

00:27:21.930 --> 00:27:26.840
Because if you're doing something
in multiple velocities,

00:27:26.840 --> 00:27:28.770
somehow they're all the same.

00:27:28.770 --> 00:27:32.860
missile like all rockets are sharing or
pointed to the same velocity,

00:27:32.860 --> 00:27:37.118
whenever we're going to change one
object, it affects the entire system.

00:27:37.118 --> 00:27:41.010
So we always need to make sure
that we're passing in their

00:27:42.950 --> 00:27:48.090
velocities that will own
the that one object has.

00:27:48.090 --> 00:27:50.500
&gt;&gt; Had that characteristic to it.

00:27:50.500 --> 00:27:52.670
&gt;&gt; Yeah, that's characteristic to that.

00:27:52.670 --> 00:27:54.010
So this is a big kayak here.

00:27:54.010 --> 00:27:55.570
&gt;&gt; That's a great trick.

00:27:55.570 --> 00:27:56.100
&gt;&gt; Yeah.

00:27:56.100 --> 00:27:59.910
&gt;&gt; Probably a really necessary
trick by this point.

00:27:59.910 --> 00:28:02.460
&gt;&gt; Cool.
&gt;&gt; Great, so if we look further down on

00:28:02.460 --> 00:28:07.070
this code, we see some methods
that we defined for this class.

00:28:07.070 --> 00:28:07.570
&gt;&gt; Shape.

00:28:08.710 --> 00:28:11.850
&gt;&gt; So when we use this shape,

00:28:11.850 --> 00:28:16.130
we want to have some functions
that we can pull out of it.

00:28:16.130 --> 00:28:18.250
So we can call these getters and
setters.

00:28:19.310 --> 00:28:22.390
So when we want to,
like Mark was saying.

00:28:22.390 --> 00:28:24.190
We want to ask the shape where it is.

00:28:24.190 --> 00:28:26.080
We don't want to just go in and
pull out a shape.

00:28:26.080 --> 00:28:29.350
We want to have this function
called get velocity,

00:28:29.350 --> 00:28:32.680
which will return that list velocity,
which we copied earlier.

00:28:32.680 --> 00:28:34.410
&gt;&gt; It's a copy as well,
it's not the direct reference.

00:28:34.410 --> 00:28:36.330
That's actually very dangerous,

00:28:36.330 --> 00:28:39.570
to actually do it that way
because it's very error prone.

00:28:39.570 --> 00:28:43.080
&gt;&gt; Right, yeah, so
you want to pull out a copy of it so

00:28:43.080 --> 00:28:45.470
that you can use that and change it.

00:28:45.470 --> 00:28:47.930
Or passing back in, that's different.

00:28:47.930 --> 00:28:53.000
Without actually messing
up the class itself.

00:28:53.000 --> 00:28:55.090
We also have a function here,
we can set the velocity.

00:28:55.090 --> 00:28:59.700
So this is going to be
really valuable when we want

00:28:59.700 --> 00:29:03.130
to set the initial velocity
of the of the circle.

00:29:03.130 --> 00:29:05.800
But then also later on if
you want to change it.

00:29:05.800 --> 00:29:10.288
Then we have getting
the position of the circle.

00:29:10.288 --> 00:29:16.316
And then we also have a function for
setting the position of the circle.

00:29:16.316 --> 00:29:18.430
Do you have anything else you want
to say about this at this point?

00:29:18.430 --> 00:29:19.173
&gt;&gt; No, we could move on.

00:29:19.173 --> 00:29:23.880
&gt;&gt; Okay, great, all right.

00:29:23.880 --> 00:29:28.720
So we have these animation
methods within the shape itself.

00:29:28.720 --> 00:29:33.070
So we had defined earlier
the general idea of animation.

00:29:33.070 --> 00:29:36.030
But it's going to be a little bit
different for the circle itself.

00:29:37.380 --> 00:29:44.550
We want to have the shapes position be
updating as we move through the code.

00:29:44.550 --> 00:29:49.670
So the way we do this is we take that
self.x, which is its expedition.

00:29:49.670 --> 00:29:56.310
Now we add to it the velocity
divided by the frames per second.

00:29:56.310 --> 00:30:00.010
So this gets a little
bit technical here.

00:30:00.010 --> 00:30:02.470
I don't want to spend
too much time on it.

00:30:02.470 --> 00:30:07.432
But it is going to be how we update
the function as we go through or

00:30:07.432 --> 00:30:10.630
how we update the shape
as we animate it.

00:30:10.630 --> 00:30:13.950
[BLANK_AUDIO]

00:30:13.950 --> 00:30:17.367
Do you want to talk a little bit
more about the how this animates

00:30:17.367 --> 00:30:18.770
the shape, Mark.

00:30:18.770 --> 00:30:19.910
&gt;&gt; Yeah.
&gt;&gt; Further than what we had before.

00:30:19.910 --> 00:30:21.010
&gt;&gt; Further than what we had before.

00:30:21.010 --> 00:30:25.600
Basically in a nutshell how we think
about is like for every update call.

00:30:25.600 --> 00:30:30.381
Might recall, because we're calling this
update function every few milliseconds

00:30:30.381 --> 00:30:30.994
at a time.

00:30:30.994 --> 00:30:36.288
To be exact, in this program, it's 16
milliseconds per frame or per update.

00:30:36.288 --> 00:30:42.570
So every 16 milliseconds I'm going to
update the x position with a number.

00:30:42.570 --> 00:30:46.850
And this number is
inspired by this velocity.

00:30:46.850 --> 00:30:50.890
And this velocity tells it, because it
tells us a magnitude and a direction.

00:30:50.890 --> 00:30:51.540
&gt;&gt; Okay.
&gt;&gt; because

00:30:51.540 --> 00:30:54.580
it tells me where I want to go and
how fast I want to go there.

00:30:54.580 --> 00:30:59.360
Okay, so basically I, we'll have more

00:30:59.360 --> 00:31:03.925
details that tells us just
why are we dividing by FPS,

00:31:03.925 --> 00:31:07.780
but basically it's just
as a It's a good way for

00:31:07.780 --> 00:31:11.670
us to, say, give it a velocity of 100.

00:31:11.670 --> 00:31:15.990
100 means 100 pixels per second.

00:31:15.990 --> 00:31:19.940
I want you to move at
100 pixels per second.

00:31:19.940 --> 00:31:23.050
In this case if I divide this by a few
SS we're working in the realm of

00:31:23.050 --> 00:31:24.620
milliseconds.

00:31:24.620 --> 00:31:30.443
We need to convert that into
the number of pixels per frame.

00:31:30.443 --> 00:31:35.580
&gt;&gt; Got you, okay so
basically each time the frame updates,

00:31:35.580 --> 00:31:37.430
It'll be that much further and
it's faster.

00:31:37.430 --> 00:31:40.010
&gt;&gt; Yeah.
&gt;&gt; If it's slow there will be less

00:31:40.010 --> 00:31:41.260
pixels per frame.

00:31:41.260 --> 00:31:44.100
If it's fast,
using more pixels per frame.

00:31:44.100 --> 00:31:45.730
&gt;&gt; Yeah, that's just yeah you know.

00:31:45.730 --> 00:31:47.812
Well if you,
if you're confused on that I would say,

00:31:47.812 --> 00:31:51.910
I recommend just to work
it out on pen and paper.

00:31:51.910 --> 00:31:54.330
When I was developing this application,
there was a lot.

00:31:54.330 --> 00:31:56.660
I had to take a lot of
notes on my cell phone.

00:31:56.660 --> 00:31:57.286
I had to draw on my fingers.

00:31:57.286 --> 00:32:00.270
Visually see how my enemy thinks.

00:32:00.270 --> 00:32:03.149
&gt;&gt; That's what makes it kind of
fun with this sort of programming.

00:32:03.149 --> 00:32:06.969
&gt;&gt; Yeah, like the a little bit
differently than you would otherwise.

00:32:06.969 --> 00:32:09.970
Cool, so let's dive into-
&gt;&gt; Let's define the circles actually.

00:32:09.970 --> 00:32:10.660
&gt;&gt; Yeah.

00:32:10.660 --> 00:32:16.150
So now, that we've defined a general
shape, we can get a little more specific

00:32:16.150 --> 00:32:18.680
and talk about the actual circles
that we're going to put on the page.

00:32:18.680 --> 00:32:20.570
So, this is the fun part.

00:32:20.570 --> 00:32:24.970
So, we are going to inherit the class.

00:32:24.970 --> 00:32:25.800
Shape.

00:32:25.800 --> 00:32:29.760
So the way we do that is, we have
circle and then within parentheses,

00:32:29.760 --> 00:32:30.470
we have shapes.

00:32:30.470 --> 00:32:33.300
So this means that all the methods, all

00:32:35.260 --> 00:32:40.450
the variables that we used in
shape get passed down to circle.

00:32:40.450 --> 00:32:42.910
&gt;&gt; And this is actually very efficient.

00:32:42.910 --> 00:32:45.650
&gt;&gt; Yeah.
Right this, if I want to change

00:32:45.650 --> 00:32:51.535
something into shape, I just I
don't need to change 10,000 things.

00:32:51.535 --> 00:32:55.090
So, this actually really helps you
with maintaining your code base.

00:32:55.090 --> 00:32:59.880
So instead of,
this was maybe 30 lines of code,

00:32:59.880 --> 00:33:02.720
we reduced possibly 10,000 lines
of code to 30 lines of code.

00:33:03.790 --> 00:33:06.640
So, it's huge, this is a very
powerful way of programming.

00:33:08.940 --> 00:33:13.560
So, what we can do with this is
we actually define a separate

00:33:13.560 --> 00:33:16.250
initial start method this in here.

00:33:16.250 --> 00:33:20.540
So, it's going to be a little bit
different than the shape object,

00:33:20.540 --> 00:33:26.210
where we ask in the velocity with the
height, color, canvas width can say X.

00:33:26.210 --> 00:33:33.960
All the same but we're going to change
a couple different variables in here.

00:33:33.960 --> 00:33:36.340
So, we have the radius in the center.

00:33:36.340 --> 00:33:39.190
So, why does that matter?

00:33:40.940 --> 00:33:44.060
If you think about a circle,
what are the two things that define it?

00:33:45.740 --> 00:33:46.790
&gt;&gt; Radius in the center, yeah, [LAUGH].

00:33:46.790 --> 00:33:47.800
&gt;&gt; It's actually really important to,

00:33:47.800 --> 00:33:49.430
especially ,when it's a is a map right,
exactly.

00:33:49.430 --> 00:33:54.860
So whenever, whenever your
defining a circle in a plane,

00:33:54.860 --> 00:33:57.920
you just want to go where the center
is and see how big its radius is.

00:33:57.920 --> 00:34:01.450
Since if you know its radius, you can
know what its going to look like.

00:34:03.320 --> 00:34:07.910
So three is just going to be with
the whole circle divided in half.

00:34:08.920 --> 00:34:13.170
Because twice the radius is [INAUDIBLE],

00:34:13.170 --> 00:34:16.320
very exact which is
the same as the width.

00:34:16.320 --> 00:34:21.766
And the center is going to be
the x value plus the radius and

00:34:21.766 --> 00:34:23.483
then the y value.

00:34:23.483 --> 00:34:25.283
&gt;&gt; [INAUDIBLE]
&gt;&gt; Yeah.

00:34:25.283 --> 00:34:26.080
So right here.

00:34:26.080 --> 00:34:30.230
&gt;&gt; So
here’s one negative feelings about that.

00:34:30.230 --> 00:34:32.980
&gt;&gt; Yeah,
like if we thought out turn out so.

00:34:32.980 --> 00:34:34.284
&gt;&gt; Let’s pull this.

00:34:34.284 --> 00:34:37.260
&gt;&gt; [INAUDIBLE] right here.

00:34:37.260 --> 00:34:39.331
&gt;&gt; Clearly [INAUDIBLE] so
it’s one on the top.

00:34:39.331 --> 00:34:40.620
&gt;&gt; [INAUDIBLE] on top.

00:34:40.620 --> 00:34:45.639
&gt;&gt; How things we could find out
&gt;&gt; A shape is an x and

00:34:45.639 --> 00:34:48.449
&gt;&gt; It's the top left corner, right?

00:34:48.449 --> 00:34:52.820
The x and y's, when we define a shape,
in our canvas system,

00:34:52.820 --> 00:34:54.420
it's actually the top left corner.

00:34:55.570 --> 00:34:56.368
&gt;&gt; Here.
&gt;&gt; Here we go.

00:34:56.368 --> 00:34:58.640
We're going low tech everyone.

00:34:58.640 --> 00:35:01.330
This is our top left corner,
this is your x and y.

00:35:03.540 --> 00:35:08.860
This is our general shape,
this top x mark.

00:35:08.860 --> 00:35:12.020
So, the information we have is x over y.

00:35:12.020 --> 00:35:18.020
But we want to know the center here,
so how do we get to the center?

00:35:18.020 --> 00:35:19.090
&gt;From this little corner.

00:35:19.090 --> 00:35:25.680
&gt;&gt; Exactly, so we only know where the
center is and then where the radius is.

00:35:27.320 --> 00:35:31.012
So, I've draw a line out here which is
centered on the radius up to the top and

00:35:31.012 --> 00:35:33.048
that's the focus of the circle.

00:35:33.048 --> 00:35:37.621
[BLANK_AUDIO]

00:35:37.621 --> 00:35:38.536
So we got that right here.

00:35:38.536 --> 00:35:43.297
So the way we can work through this,

00:35:43.297 --> 00:35:47.594
is we have only okay [CROSSTALK].

00:35:47.594 --> 00:35:51.060
&gt;&gt; but still on the and the camera here.

00:35:51.060 --> 00:35:56.890
&gt;&gt; So, we can find the center by
if you know where the x value is,

00:35:56.890 --> 00:35:58.470
and we add the radius.

00:35:58.470 --> 00:36:02.300
That's going to give us,
sorry, that's the y value.

00:36:02.300 --> 00:36:08.250
If you add the center here, and
then radius, that's going to help

00:36:08.250 --> 00:36:13.400
us Identify the center based
on the information I pass in,

00:36:13.400 --> 00:36:15.760
same thing with the y value.

00:36:15.760 --> 00:36:20.160
Right now, the y value is zero,
so I just have the radius and

00:36:20.160 --> 00:36:22.760
that gives us the y value from top.

00:36:24.730 --> 00:36:28.080
&gt;&gt; Yeah, so basically
&gt;&gt; You add [INAUDIBLE] y.

00:36:28.080 --> 00:36:30.300
You add then your rays here.

00:36:30.300 --> 00:36:31.676
And then, you add in your weight here.

00:36:31.676 --> 00:36:35.640
And then so

00:36:35.640 --> 00:36:40.130
if r going here and then r going here,
this is your center.

00:36:40.130 --> 00:36:45.480
r, r because if x and y is there,
basically x that's how you,

00:36:45.480 --> 00:36:48.530
in general, find the center for
any circle.

00:36:48.530 --> 00:36:52.503
Giving an x,
y position in the top left corner.

00:36:52.503 --> 00:36:54.800
And, again, get a little confused.

00:36:54.800 --> 00:36:56.010
&gt;&gt; It's a little complex.

00:36:56.010 --> 00:36:58.070
We went through that
a little bit quickly.

00:36:58.070 --> 00:37:00.040
&gt;&gt; It's just, again, draw it out, and

00:37:00.040 --> 00:37:02.010
you'll be able figure out,
this makes sense.

00:37:02.010 --> 00:37:03.100
That's okay, I get it.

00:37:03.100 --> 00:37:05.490
That's how you can find the center.

00:37:05.490 --> 00:37:07.640
&gt;&gt; The best way to do
this is draw it out.

00:37:08.680 --> 00:37:10.910
Mess with the math a little bit.

00:37:10.910 --> 00:37:16.030
Put some programs in, break it, try to
see what's wrong, try to see what works.

00:37:16.030 --> 00:37:18.320
And then, you'll get it right.

00:37:18.320 --> 00:37:23.100
This sample code that we'll give you,
we'll definitely give you the sample.

00:37:23.100 --> 00:37:26.200
So let's switch to screen code.

00:37:26.200 --> 00:37:30.020
So, let's dive back into
the code of somewhere.

00:37:30.020 --> 00:37:34.830
So, we can start creating methods for
the circle and one of the most important

00:37:34.830 --> 00:37:39.360
ones that's actually in the circles on
the page is this create random circle.

00:37:39.360 --> 00:37:44.060
This is going to help us
create a random circle with

00:37:44.060 --> 00:37:48.560
a randomized size, randomized velocity,
and randomized color.

00:37:48.560 --> 00:37:52.010
So, they have a few variables in here
that help define the maximum and

00:37:52.010 --> 00:37:53.920
minimum widths in speeds.

00:37:53.920 --> 00:37:58.310
Some colors that Mark defined that you
can change the different colors too.

00:37:58.310 --> 00:38:01.115
And then, the width is going to be

00:38:01.115 --> 00:38:04.425
random integer between those
two values that we defined.

00:38:04.425 --> 00:38:08.125
The height's going to be same as
the width, because it's a circle so

00:38:08.125 --> 00:38:10.455
it's going to be circular.

00:38:10.455 --> 00:38:15.315
The velocity is also going to be
randomized between the minimum and

00:38:15.315 --> 00:38:16.735
maximum that we created.

00:38:16.735 --> 00:38:18.229
The colors are going to be randomized.

00:38:19.290 --> 00:38:25.120
And then, when we're done, it's going to
return this circle with a philosophy.

00:38:25.120 --> 00:38:26.280
With a color, a height.

00:38:26.280 --> 00:38:29.420
And then, it's also going to put.

00:38:29.420 --> 00:38:31.180
Does this actually put
this on the canvas.

00:38:31.180 --> 00:38:33.000
This application.canvas width.

00:38:33.000 --> 00:38:36.130
Or is that just pulling out the width
of the canvas that we create?

00:38:36.130 --> 00:38:37.653
&gt;&gt; Yeah.
It's just [INAUDIBLE].

00:38:37.653 --> 00:38:40.144
&gt;&gt; Okay.
So, it's going to pass in the width and

00:38:40.144 --> 00:38:42.049
the height of the canvas as well.

00:38:42.049 --> 00:38:44.685
[BLANK_AUDIO]

00:38:44.685 --> 00:38:48.717
So, this create_random_circle
is a method, which takes

00:38:48.717 --> 00:38:53.760
in the reference to the class and
actually doesn't belong to any object.

00:38:53.760 --> 00:38:56.600
That means we can just call it
straight out of the circle.

00:38:57.620 --> 00:38:59.160
&gt;&gt; Circle.
Basically, I'll type this in.

00:38:59.160 --> 00:39:00.730
&gt;&gt; Yeah, that would be great.

00:39:00.730 --> 00:39:07.426
&gt;&gt; Basically,
call this in the rest of our code.

00:39:07.426 --> 00:39:08.638
&gt;&gt; Yeah, anyway.

00:39:08.638 --> 00:39:11.078
&gt;&gt; Let's say create and do this.

00:39:11.078 --> 00:39:14.630
&gt;&gt; Yup, so like when you were working
with Turtle earlier in the course

00:39:14.630 --> 00:39:16.300
That was a really similar one.

00:39:16.300 --> 00:39:19.350
Where you could do turtle dot turtle and
it will draw a turtle.

00:39:19.350 --> 00:39:23.380
This is the same thing, it's going to
be Circle.create_random_circle and

00:39:23.380 --> 00:39:25.660
it's going to throw
a circle on the page.

00:39:25.660 --> 00:39:30.920
And it's not going to be any particular,
it's not

00:39:30.920 --> 00:39:34.360
going to launch any particular object,
which makes it very powerful and useful.

00:39:37.510 --> 00:39:38.010
Okay.

00:39:39.620 --> 00:39:41.220
And then.
&gt;&gt; Like, update and

00:39:41.220 --> 00:39:45.690
draw, go for that, yeah.

00:39:45.690 --> 00:39:47.360
&gt;&gt; Yeah.
So, the final method that we have here

00:39:47.360 --> 00:39:48.530
is a draw function.

00:39:48.530 --> 00:39:53.320
Which helps us actually take
in the canvas object and

00:39:53.320 --> 00:39:56.280
we'll draw a circle on
that canvas object.

00:39:56.280 --> 00:39:59.152
This goes back to the actual
canvas that's been created.

00:39:59.152 --> 00:40:04.601
It takes that white square and
then helps us to Draw

00:40:04.601 --> 00:40:10.620
a circle on it by pushing in
the x value, the y value.

00:40:10.620 --> 00:40:16.491
Putting in where it's going to be
by using the width and the height,

00:40:16.491 --> 00:40:21.203
and then filling it using
the color that we defined.

00:40:21.203 --> 00:40:24.994
And is there anything further
that we want to talk about?

00:40:24.994 --> 00:40:27.930
&gt;&gt; The update functions here
because we're overwriting.

00:40:27.930 --> 00:40:32.270
This is also overwriting
the update function of the shape.

00:40:35.230 --> 00:40:37.810
&gt;&gt; Yeah, so
shape has it's own update function.

00:40:37.810 --> 00:40:43.470
And we're going to want something a
little bit different for a circle class,

00:40:43.470 --> 00:40:46.805
and it's going to update in the same
way but then were going to move center.

00:40:46.805 --> 00:40:50.237
Yeah, we're going to
go to center as well,

00:40:50.237 --> 00:40:54.950
according to the x value and the radius,
and the y value and the radius.

00:40:54.950 --> 00:40:58.860
&gt;&gt; Yeah, because every time you update,
the x and y changes.

00:40:58.860 --> 00:41:03.420
So your center needs to update
along with the new x and ys.

00:41:03.420 --> 00:41:05.556
&gt;&gt; Yeah, exactly.

00:41:05.556 --> 00:41:11.876
&gt;&gt; So that's again, it tells you
how we would use method overriding.

00:41:11.876 --> 00:41:13.956
Good example case right here.

00:41:13.956 --> 00:41:19.436
&gt;&gt; And I think we have edge collision.

00:41:19.436 --> 00:41:20.190
Edge collision, all right.

00:41:20.190 --> 00:41:22.330
&gt;&gt; So this is where the magic happens.

00:41:23.820 --> 00:41:29.050
We want to have the circle
behave realistically

00:41:29.050 --> 00:41:33.610
when it hits an edge, to bounce
off in a way that's believable.

00:41:33.610 --> 00:41:38.190
So, the first thing we got to
do is create an imaginary box.

00:41:38.190 --> 00:41:41.747
You have a canvas, but we actually need
to create a box that will bounce back

00:41:41.747 --> 00:41:43.720
the ball when it hits it.

00:41:43.720 --> 00:41:48.085
So we've created a bounding box
that covers a circle itself.

00:41:48.085 --> 00:41:51.764
So when that circle hits
the bounding box, the square,

00:41:51.764 --> 00:41:55.660
then that's how we know
the collision happened.

00:41:55.660 --> 00:41:59.410
Now we can make the bounce happen.

00:41:59.410 --> 00:42:05.340
So say for the edge on a canvas, if edge
is at or beyond the edge of the canvas.

00:42:05.340 --> 00:42:07.280
Sorry, if the edge of
the circle is at or

00:42:07.280 --> 00:42:10.640
beyond the edge of the canvas,
we can say that the edge collides.

00:42:10.640 --> 00:42:14.327
And therefore we can change the velocity
to have the object bounce back towards

00:42:14.327 --> 00:42:16.280
the inside of the canvas.

00:42:16.280 --> 00:42:17.800
So you have it up?

00:42:17.800 --> 00:42:18.376
&gt;&gt; Yeah.
&gt;&gt; Collision.

00:42:18.376 --> 00:42:20.251
&gt;&gt; We're right here.

00:42:20.251 --> 00:42:21.920
&gt;&gt; Okay cool.

00:42:21.920 --> 00:42:26.406
So the way we can check is,
we pass in the object.

00:42:26.406 --> 00:42:32.120
We pass into canvas,
the canvas width and the canvas height.

00:42:32.120 --> 00:42:35.130
So we check the top and
the bottom edges.

00:42:35.130 --> 00:42:40.410
And if the object y is less than or
equal to 0,

00:42:40.410 --> 00:42:45.220
that means it's hit the upper-left
corner of the canvas.

00:42:46.320 --> 00:42:49.700
And then if you want to check whether
the bottom of the bounding box collides

00:42:49.700 --> 00:42:52.090
at the bottom edge of the canvas.

00:42:52.090 --> 00:42:56.680
We do the y value of the object
plus the object height, and

00:42:56.680 --> 00:42:59.640
check whether that's greater than or
equal to the canvas height.

00:42:59.640 --> 00:43:02.290
And now we know that
it's hit the bottom.

00:43:03.790 --> 00:43:07.890
&gt;&gt; So what happens when we hit the edge.

00:43:07.890 --> 00:43:09.295
How do we set it to bounce back?

00:43:09.295 --> 00:43:13.660
&gt;&gt; Okay, yeah.

00:43:13.660 --> 00:43:20.410
So when you hit the edge you want to
change the velocity of the function.

00:43:20.410 --> 00:43:26.080
And the way that bouncing works,
we just want to change the y value.

00:43:26.080 --> 00:43:28.390
Let's say it's bouncing up.

00:43:28.390 --> 00:43:30.380
If we hit at the top we
want it to bounce down.

00:43:30.380 --> 00:43:34.020
So basically we're exchanging the y
velocity from something that's positive

00:43:34.020 --> 00:43:35.530
to something that's negative.

00:43:35.530 --> 00:43:36.750
&gt;&gt; Yeah, we're just inverting it.

00:43:36.750 --> 00:43:37.760
&gt;&gt; Inverse it, yeah.

00:43:37.760 --> 00:43:39.130
And then, what exactly?

00:43:39.130 --> 00:43:42.340
Yeah, so if it's bouncing down it's
going to be negative and going back up.

00:43:42.340 --> 00:43:43.310
So it's going to be an inverse.

00:43:43.310 --> 00:43:45.760
So we want to change
the velocity of the y to

00:43:47.020 --> 00:43:50.060
something that's negative
of the velocity of y.

00:43:50.060 --> 00:43:51.616
It's going to flip that, change.

00:43:51.616 --> 00:43:53.530
And we're going to do
that also with the x.

00:43:53.530 --> 00:43:56.750
So if it's moving sideways, now we're

00:43:56.750 --> 00:44:00.090
going to change it when it hits the edge
and it'll bounce straight back.

00:44:00.090 --> 00:44:05.010
So this means that if we're moving
even obliquely, it's going to

00:44:05.010 --> 00:44:09.720
help change it in the way that's exactly
opposite the way that it came in.

00:44:09.720 --> 00:44:11.470
&gt;&gt; Yeah, because the x and
y are both changed.

00:44:11.470 --> 00:44:13.650
They're both inverse,
so it will go back.

00:44:13.650 --> 00:44:17.610
This goes here, hits,
it will just go here.

00:44:18.880 --> 00:44:22.110
&gt;&gt; And yeah,
that's actually very straightforward.

00:44:23.240 --> 00:44:24.260
&gt;&gt; Pretty straightforward.

00:44:24.260 --> 00:44:27.205
A lot of people get
tripped up with data.

00:44:27.205 --> 00:44:29.309
If they're thinking like,
how do you collect it?

00:44:29.309 --> 00:44:30.580
&gt;&gt; Right, what if it's spinning?

00:44:30.580 --> 00:44:31.589
&gt;&gt; No if, you don't have to worry that.

00:44:31.589 --> 00:44:33.800
&gt;&gt; You don't have to worry about
these things, like where it is.

00:44:33.800 --> 00:44:38.208
Again like how a program works,
it's like you got this big problem.

00:44:38.208 --> 00:44:42.290
Just decompose it into like
small little components.

00:44:42.290 --> 00:44:46.210
And then just deal with
small things one at a time.

00:44:46.210 --> 00:44:48.260
Like say, just collision on the canvas.

00:44:48.260 --> 00:44:52.500
You don't need to worry about
collisions in the circles, or

00:44:52.500 --> 00:44:54.030
even if it's spinning.

00:44:54.030 --> 00:44:57.730
Like say, what's the angular velocity or
angular momentum?

00:44:57.730 --> 00:44:59.762
I'm like okay,
well that's a whole different function.

00:44:59.762 --> 00:45:03.755
To check to make sure,
okay if it's spinning, okay, I need to.

00:45:03.755 --> 00:45:08.710
My update my function
catches the pictures and

00:45:08.710 --> 00:45:13.861
I need to update my function
based on what vectors

00:45:13.861 --> 00:45:17.860
of the spectre here,
also this angular factor here.

00:45:17.860 --> 00:45:20.760
So we need to figure out how to do that.

00:45:20.760 --> 00:45:22.510
&gt;&gt; So I need to take physics, more.

00:45:22.510 --> 00:45:23.680
&gt;&gt; That's all physics, really.

00:45:23.680 --> 00:45:27.170
This is actually a real-world
application of physics.

00:45:27.170 --> 00:45:30.370
And this is how you like, model things.

00:45:30.370 --> 00:45:32.860
&gt;&gt; Yeah.
&gt;&gt; That's really, you know,

00:45:32.860 --> 00:45:36.700
if you're interested
in game programming.

00:45:36.700 --> 00:45:37.220
&gt;&gt; Yeah, it's huge.

00:45:37.220 --> 00:45:41.870
&gt;&gt; This is huge, and this is where you
need to start thinking about hops to

00:45:41.870 --> 00:45:44.235
pick up extracting in terms
of 2D space and 3D space.

00:45:44.235 --> 00:45:47.988
And also understand the physics
of objects when they collide,

00:45:47.988 --> 00:45:50.180
when they spin.

00:45:50.180 --> 00:45:52.880
All the things that you talk about
when you're modeling a system

00:45:53.910 --> 00:45:58.990
in the physical world, we use that to
model our systems in the computer.

00:45:58.990 --> 00:46:03.590
So just an FYI for our people who
are interested in game development and

00:46:03.590 --> 00:46:08.365
actually programming game engines,
and this is a good sneak peak.

00:46:08.365 --> 00:46:09.191
&gt;&gt; Yeah.

00:46:09.191 --> 00:46:09.879
&gt;&gt; Sorry.

00:46:09.879 --> 00:46:12.361
&gt;&gt; You're going to be
doing a lot of this.

00:46:12.361 --> 00:46:14.200
&gt;&gt; Yeah.
&gt;&gt; A lot of arrays, a lot of vectors,

00:46:14.200 --> 00:46:16.820
a lot of, you know
&gt;&gt; Cosines, tangents.

00:46:16.820 --> 00:46:20.620
Yeah, lot's of vector decompositions.

00:46:20.620 --> 00:46:22.486
Lots of linear algebra too, actually.

00:46:22.486 --> 00:46:23.263
&gt;&gt; Good stuff.

00:46:23.263 --> 00:46:24.040
Good stuff.

00:46:24.040 --> 00:46:26.920
We're almost out of time, so
let's bring it all together now.

00:46:26.920 --> 00:46:29.640
So let's go back to the screen sharing
&gt;&gt; Mm-hm.

00:46:29.640 --> 00:46:32.530
&gt;&gt; So
in this code we have all these objects,

00:46:32.530 --> 00:46:37.240
and let's go back to really the basics
of like, how this application works.

00:46:37.240 --> 00:46:40.930
I create my widgets,
I create my canvas object, and

00:46:40.930 --> 00:46:44.000
then I create my circles,
and then I animate them.

00:46:44.000 --> 00:46:49.250
So let's go back to
Create_canvas_objects.

00:46:49.250 --> 00:46:51.770
I'm going to create ten random
circles to bounce around.

00:46:51.770 --> 00:46:54.520
So basically I just have a for
loop, and then I tell them, okay.

00:46:54.520 --> 00:46:59.182
I have a list that is
an internal list that contains

00:46:59.182 --> 00:47:03.190
a reference to all my circle objects.

00:47:03.190 --> 00:47:06.660
So basically, I'm going to, for

00:47:06.660 --> 00:47:10.890
every iteration I'm going to
create a random circle, and

00:47:10.890 --> 00:47:15.330
then add into my memory and
I'll be able to access it later on.

00:47:15.330 --> 00:47:17.000
&gt;&gt; It's that easy?

00:47:17.000 --> 00:47:17.640
&gt;&gt; It's that easy.

00:47:17.640 --> 00:47:21.770
So basically I could do this.

00:47:21.770 --> 00:47:23.220
I'm fine, that's it.

00:47:23.220 --> 00:47:24.000
So 10,000 objects?

00:47:24.000 --> 00:47:24.900
All right, that's great.

00:47:24.900 --> 00:47:29.075
I will probably crash right in my memory
right now, but I'll just go back to ten.

00:47:29.075 --> 00:47:31.950
So let's do 50 right now.

00:47:31.950 --> 00:47:35.470
&gt;&gt; You're crazy, Mark.

00:47:35.470 --> 00:47:36.130
&gt;&gt; I am crazy.

00:47:36.130 --> 00:47:41.170
And then the animate thing,
it's still updateAll.

00:47:41.170 --> 00:47:43.879
The updateAll function, let's see.

00:47:43.879 --> 00:47:44.676
&gt;&gt; updateAll?

00:47:44.676 --> 00:47:49.511
&gt;&gt; Yeah, the updateAll and the redraw
functions are slightly different.

00:47:49.511 --> 00:47:55.070
because now for every object that
I have created in my updateAll,

00:47:55.070 --> 00:47:59.439
I will check whether
that object has collided.

00:47:59.439 --> 00:48:07.318
Okay, change the Change of velocity.

00:48:07.318 --> 00:48:11.095
I added a feature,
feature to check for circle hood.

00:48:11.095 --> 00:48:14.988
So if the balls collide
with one another,

00:48:14.988 --> 00:48:20.117
they should react and
bounce away from the [INAUDIBLE].

00:48:20.117 --> 00:48:23.023
That has not been implemented yet
so, and

00:48:23.023 --> 00:48:27.930
though I will show you how one looks
like if you actually implement it.

00:48:27.930 --> 00:48:29.499
In this then you just call update.

00:48:29.499 --> 00:48:31.867
And, like, okay, I'm just going to.

00:48:31.867 --> 00:48:36.130
After I complate all my coalitions,
I'm going to update the position now.

00:48:36.130 --> 00:48:38.820
And based on the need
factors that I've complated.

00:48:40.450 --> 00:48:42.410
Same thing as in redraw here.

00:48:42.410 --> 00:48:48.040
As you can see, for every object
I'm just going to drop the object.

00:48:48.040 --> 00:48:52.313
It's a very simple way for me to
communicate with you what I'm doing.

00:48:52.313 --> 00:48:58.849
So hopefully everyone could understand,
okay in terms of objects.

00:48:58.849 --> 00:49:01.171
Let's see.

00:49:01.171 --> 00:49:08.288
Sorry, that's okay.

00:49:08.288 --> 00:49:10.471
In terms of objects.

00:49:10.471 --> 00:49:12.654
&gt;&gt; I don't think those
screens should come up.

00:49:12.654 --> 00:49:16.171
&gt;&gt; I need to code that, messaging.

00:49:16.171 --> 00:49:24.026
Let's see,
let's go back I need to screenshot that.

00:49:24.026 --> 00:49:25.898
And so let me show you.

00:49:25.898 --> 00:49:30.576
[BLANK_AUDIO]

00:49:30.576 --> 00:49:32.584
Turn screen.

00:49:32.584 --> 00:49:33.339
&gt;&gt; Whoa!

00:49:33.339 --> 00:49:34.329
&gt;&gt; Whoa.

00:49:34.329 --> 00:49:39.380
&gt;&gt; [LAUGH]
&gt;&gt; Yeah, so basically, if we.

00:49:39.380 --> 00:49:40.124
So it's yes.

00:49:40.124 --> 00:49:46.320
Just a way for me to draw and
talk in terms of very Intuitive ways.

00:49:46.320 --> 00:49:49.916
What I'm talking with another programmer
when I'm trying to think abstractly in

00:49:49.916 --> 00:49:51.334
terms of how I'm moving those.

00:49:51.334 --> 00:49:52.838
Not just how I'm going to draw them.

00:49:52.838 --> 00:49:57.102
I'm going to check the collisions and
I'm going to change them and

00:49:57.102 --> 00:50:00.725
then you see,
you abstract all of the details away.

00:50:00.725 --> 00:50:02.730
So the code is very real.

00:50:02.730 --> 00:50:03.240
&gt;&gt; Yeah.

00:50:03.240 --> 00:50:04.300
&gt;&gt; And very maintainable.

00:50:04.300 --> 00:50:08.170
&gt;&gt; If you want something else,
you can do it right there.

00:50:08.170 --> 00:50:10.310
Yes, not that much harder.

00:50:10.310 --> 00:50:13.150
So long do more objects or
different objects can

00:50:15.630 --> 00:50:18.690
append different sorts of
objects in once you create them.

00:50:18.690 --> 00:50:19.510
So it makes life easy.

00:50:19.510 --> 00:50:20.200
&gt;&gt; Makes life easy.

00:50:20.200 --> 00:50:24.620
So this is 50, this is over 50 random
objects, random circles that I created.

00:50:24.620 --> 00:50:28.040
So yeah, still works pretty well.

00:50:28.040 --> 00:50:29.220
&gt;&gt; Cool stuff.

00:50:29.220 --> 00:50:30.978
&gt;&gt; Cool stuff, and let's see.

00:50:30.978 --> 00:50:33.382
[BLANK_AUDIO]

00:50:33.382 --> 00:50:37.690
Let them call to the code,
where's that code?

00:50:37.690 --> 00:50:40.870
&gt;&gt; What's the bonus round?

00:50:40.870 --> 00:50:43.480
&gt;&gt; The bonus round, final.

00:50:45.210 --> 00:50:51.570
So basically this one will have,
oops let's see.

00:50:51.570 --> 00:50:53.486
No.

00:50:53.486 --> 00:50:55.204
Licenses as a typo.

00:50:55.204 --> 00:50:59.094
[BLANK_AUDIO]

00:50:59.094 --> 00:51:01.014
Okay.

00:51:01.014 --> 00:51:03.680
Bonus round, here you go.

00:51:03.680 --> 00:51:07.902
There you go, so
once you've updated the function to do

00:51:07.902 --> 00:51:12.770
object to object illusion this
is what it will look like.

00:51:12.770 --> 00:51:16.708
And this is the secret
the key of actually trick and

00:51:16.708 --> 00:51:21.495
what you do in this like can you imagine
procedural program you have to literally

00:51:21.495 --> 00:51:24.546
check every single object.

00:51:24.546 --> 00:51:30.810
And literally calculate
the collisions and the vectors for

00:51:30.810 --> 00:51:34.450
every single object at every single
time at any given point in time.

00:51:34.450 --> 00:51:36.497
&gt;&gt; There's no point having
computers if you have to do that.

00:51:36.497 --> 00:51:41.080
&gt;&gt; Yeah so you get the computer to
actually handle that for you so

00:51:41.080 --> 00:51:42.320
with actually the programming.

00:51:42.320 --> 00:51:46.349
You just basically program like that
the object itself will say I have

00:51:46.349 --> 00:51:50.946
a function, I'm going to look out for
myself if I can, why would anyone else?

00:51:50.946 --> 00:51:58.365
I'm going to change my vectors and
my path based on my own collision.

00:51:58.365 --> 00:52:03.386
My own way, so
you don't need to like think of it from

00:52:03.386 --> 00:52:08.864
a top down approach,
you can think of it from a bottom up,

00:52:08.864 --> 00:52:14.689
bottom base approach these
objects are self-contained and

00:52:14.689 --> 00:52:17.452
they kind of act on their own.

00:52:17.452 --> 00:52:24.123
It's kind of like your programming
an army of things that can think or

00:52:24.123 --> 00:52:30.808
act on their own, with you not
having to, track every single thing.

00:52:30.808 --> 00:52:31.853
&gt;&gt; You just give them guidelines.

00:52:31.853 --> 00:52:39.108
&gt;&gt; Just give them guidelines and
then they'll just go ahead and do it.

00:52:39.108 --> 00:52:44.606
Hopefully this gives you a really
good application to play around and

00:52:44.606 --> 00:52:48.700
also to think about object
oriented programming.

00:52:48.700 --> 00:52:51.320
So if you have any Last minute thoughts,
Jonah,

00:52:51.320 --> 00:52:53.810
on object-oriented programming
in general or what we did?

00:52:53.810 --> 00:52:57.370
&gt;&gt; I thought it was a really cool start.

00:52:57.370 --> 00:53:00.750
I thought that that analogy to the video
game programming was really good.

00:53:00.750 --> 00:53:03.830
I mean, object-oriented
programming is going to be

00:53:03.830 --> 00:53:06.120
important in anything that you do.

00:53:07.860 --> 00:53:08.605
&gt;&gt; Any big project.

00:53:08.605 --> 00:53:13.820
&gt;&gt; Yeah any big project, any
&gt;&gt; Even in life, I think.

00:53:13.820 --> 00:53:15.310
&gt;&gt; In life, wow.

00:53:15.310 --> 00:53:17.010
&gt;&gt; Think a little bit bigger here.

00:53:17.010 --> 00:53:22.519
It's good to,
isolate certain tasks like,

00:53:22.519 --> 00:53:26.410
let's say in the mornings
I'll go through and

00:53:26.410 --> 00:53:29.720
do all the reviews but have it at,
isolated at it's own task and

00:53:29.720 --> 00:53:33.970
then I'll think to myself,
this reviewer needs to have an email.

00:53:33.970 --> 00:53:35.710
It's already a pre-defined set of tasks.

00:53:35.710 --> 00:53:37.540
I don't have to think
through it every single time.

00:53:37.540 --> 00:53:39.150
&gt;&gt; Yeah.
&gt;&gt; There's little things that I change

00:53:40.570 --> 00:53:45.040
each time but if you think about
abstraction, in a greater sense it's

00:53:47.290 --> 00:53:50.300
useful to apply to on
a lot of different things.

00:53:50.300 --> 00:53:53.110
It's kind of cool to
see I can play here.

00:53:53.110 --> 00:53:53.760
&gt;&gt; Right, yeah.

00:53:53.760 --> 00:54:01.450
So, my final thoughts is, object logic
programming is a little weird at first.

00:54:01.450 --> 00:54:06.580
But it's, I'd say at the end,
if you're thinking big you'll be

00:54:06.580 --> 00:54:10.040
basically programming the computer to
take care of all the little details for

00:54:10.040 --> 00:54:15.590
you and make a system that each object
will be able to take care of itself.

00:54:15.590 --> 00:54:18.880
And it knows what it needs
to do on its own and

00:54:18.880 --> 00:54:22.500
it knows how to update its own state.

00:54:22.500 --> 00:54:25.120
You don't need to literally go through

00:54:26.140 --> 00:54:28.340
all your objects every
time a state change.

00:54:29.760 --> 00:54:32.700
There's one change of state for
one object.

00:54:32.700 --> 00:54:38.060
You just program it in a way that the
object itself will take care of itself.

00:54:39.530 --> 00:54:41.280
&gt;&gt; That's what makes computers powerful.

00:54:41.280 --> 00:54:45.920
&gt;&gt; Yeah, that's a really
powerful way of thinking, and

00:54:45.920 --> 00:54:50.220
you Once you get it, it will stay there.

00:54:50.220 --> 00:54:52.748
It won't go away.

00:54:52.748 --> 00:54:54.269
Okay, great.

00:54:54.269 --> 00:54:55.861
Thank you everyone for
&gt;&gt; [CROSSTALK] Thank you everyone for

00:54:55.861 --> 00:54:56.568
coming and staying.

00:54:56.568 --> 00:54:59.399
And we'll post our notes and
this example code so

00:54:59.399 --> 00:55:02.242
you'll be able to play
around with it yourself.

00:55:02.242 --> 00:55:02.776
&gt;&gt; All right.

00:55:02.776 --> 00:55:03.286
See you guys next time.

00:55:03.286 --> 00:55:03.786
&gt;&gt; Bye!

