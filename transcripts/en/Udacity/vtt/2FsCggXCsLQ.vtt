WEBVTT
Kind: captions
Language: en

00:00:00.350 --> 00:00:03.790
Now that we know how to define methods,
let's see how to call them.

00:00:03.790 --> 00:00:07.090
We'll start by filling in the body
of the throw down method.

00:00:07.090 --> 00:00:10.170
This method will simulate
a player throwing down a move

00:00:10.170 --> 00:00:14.410
rock paper scissors, and simultaneously
generate an opponent's move

00:00:14.410 --> 00:00:16.900
in order to create a rock
paper scissors game.

00:00:16.900 --> 00:00:20.710
In our case,
an instance of the class RPS game.

00:00:20.710 --> 00:00:24.010
The player chooses a move,
rock paper or scissors, and

00:00:24.010 --> 00:00:27.600
that move gets passed into
the throwDown method.

00:00:27.600 --> 00:00:31.710
First off, we'll take that move and
generate an instance of RPSTurn.

00:00:31.710 --> 00:00:33.610
We'll call it playersTurn.

00:00:33.610 --> 00:00:37.340
Notice that the Objective C compiler
doesn't infer types the way the Swift

00:00:37.340 --> 00:00:38.660
compiler does.

00:00:38.660 --> 00:00:40.920
So every time we create a new variable,

00:00:40.920 --> 00:00:44.250
we need to first indicate its
type like we're doing here.

00:00:44.250 --> 00:00:49.070
Then on the right side, we allocate and
initialize an instance of RPSTurn.

00:00:49.070 --> 00:00:52.080
I'd like to dissect the right
side of this statement.

00:00:52.080 --> 00:00:55.185
Focus in on this section and
you'll see our first method call.

00:00:55.185 --> 00:01:00.120
In-between brackets on the left, we see
the object receiving the method call.

00:01:00.120 --> 00:01:01.350
RPSTurn.

00:01:01.350 --> 00:01:04.300
And on the right,
we see the method alloc.

00:01:04.300 --> 00:01:08.010
But in Objective C, instead of
saying we're calling a method,

00:01:08.010 --> 00:01:09.980
we say that we're sending a message.

00:01:09.980 --> 00:01:13.880
So the general form for
a method call looks something like this.

00:01:13.880 --> 00:01:17.560
In the previous example,
RPSTurn is the receiver and

00:01:17.560 --> 00:01:20.620
alloc is the message being
sent to the receiver.

00:01:20.620 --> 00:01:24.050
Next, let's zoom out to
the call to end it with move.

00:01:24.050 --> 00:01:26.880
On the left,
we see the receiver of the method call,

00:01:26.880 --> 00:01:29.600
the space in memory
that's been allocated.

00:01:29.600 --> 00:01:32.310
On the right,
we see the method in it with move

00:01:32.310 --> 00:01:35.070
followed by the argument players move.

00:01:35.070 --> 00:01:38.980
So here's the receiver,
the message and the argument.

