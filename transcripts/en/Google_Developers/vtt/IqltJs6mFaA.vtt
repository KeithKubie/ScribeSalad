WEBVTT
Kind: captions
Language: en

00:00:00.314 --> 00:00:01.980
ALEX DANILO: It's
nice to be in Beijing.

00:00:01.980 --> 00:00:03.355
Lovely to see you
all here today.

00:00:07.390 --> 00:00:09.440
That's gone out of-- oh,
excuse me, one moment.

00:00:13.733 --> 00:00:18.440
Right, OK, hi, my
name is Alex Danilo.

00:00:18.440 --> 00:00:22.950
I've been doing web standards
with the W3C since 2002,

00:00:22.950 --> 00:00:24.590
so, almost 15 years now.

00:00:24.590 --> 00:00:28.689
I'm currently editing the
HTML 5.2 specification.

00:00:28.689 --> 00:00:30.980
I've done a lot of work with
SVG and I'm playing around

00:00:30.980 --> 00:00:34.420
with WebAssembly, which is a
really exciting new technology.

00:00:34.420 --> 00:00:38.720
But today I want to talk to
you about HTTPS, which is also

00:00:38.720 --> 00:00:41.930
a very important technology when
you're building progressive web

00:00:41.930 --> 00:00:43.250
apps.

00:00:43.250 --> 00:00:45.800
So one thing that we say when
you're building progressive web

00:00:45.800 --> 00:00:50.450
apps is that they introduce
a whole lot of new APIs.

00:00:50.450 --> 00:00:53.360
And these new APIs are
extremely powerful.

00:00:53.360 --> 00:00:56.450
So with that new power
comes great responsibility.

00:00:56.450 --> 00:00:59.420
It is your job to
protect your users

00:00:59.420 --> 00:01:03.470
and protect your own sites
from any kinds of problems.

00:01:03.470 --> 00:01:06.420
And I'll try to
explain what I mean.

00:01:06.420 --> 00:01:10.850
So even older APIs, like
geolocation, geolocation

00:01:10.850 --> 00:01:12.790
used to be available on HTTP.

00:01:12.790 --> 00:01:17.540
And now it is moving to HTTPS,
because knowing where a user is

00:01:17.540 --> 00:01:19.380
a very powerful thing.

00:01:19.380 --> 00:01:22.910
For example, if you use
geolocation on your site,

00:01:22.910 --> 00:01:26.830
you know if your user is at home
or at work, or almost anywhere.

00:01:26.830 --> 00:01:29.690
And that is a lot of knowledge
that you have about the users.

00:01:29.690 --> 00:01:34.920
So this is why it's important to
take care of that information.

00:01:34.920 --> 00:01:37.930
So I'll tell you a little story.

00:01:37.930 --> 00:01:40.020
And this is the
story of the web.

00:01:40.020 --> 00:01:43.320
Imagine 25 years ago,
a little scientist

00:01:43.320 --> 00:01:45.630
decided that he wanted
to share his documents

00:01:45.630 --> 00:01:47.460
with his fellow colleagues.

00:01:47.460 --> 00:01:51.300
And so I wrote a little
server and a little browser.

00:01:51.300 --> 00:01:53.400
And you could send these
documents to each other.

00:01:53.400 --> 00:01:55.620
So I could send you my
document of my latest

00:01:55.620 --> 00:01:57.570
scientific discovery.

00:01:57.570 --> 00:01:59.400
This was a fantastic idea.

00:01:59.400 --> 00:02:03.480
And when I built that, if I was
that man 25 years ago building

00:02:03.480 --> 00:02:06.570
that, I wouldn't
care about HTTPS.

00:02:06.570 --> 00:02:08.310
I would just use
the normal network

00:02:08.310 --> 00:02:10.680
and come up with a simple
protocol, something

00:02:10.680 --> 00:02:13.130
I would call HTTP.

00:02:13.130 --> 00:02:14.640
And I would invent
a language called

00:02:14.640 --> 00:02:17.510
HTML to display the documents.

00:02:17.510 --> 00:02:19.250
And my name is Tim Berners-Lee.

00:02:19.250 --> 00:02:20.870
That is actually what happened.

00:02:20.870 --> 00:02:23.120
But that was 25 years ago.

00:02:23.120 --> 00:02:25.460
And since then, the
web has changed.

00:02:25.460 --> 00:02:27.920
It's moved from a document
format to something

00:02:27.920 --> 00:02:30.140
we can build full, rich apps.

00:02:30.140 --> 00:02:34.040
And so in the old days, it was
fine to just go and collect

00:02:34.040 --> 00:02:36.020
a document from the
server and retrieve it,

00:02:36.020 --> 00:02:39.880
because all the network was
inside a very closed system.

00:02:39.880 --> 00:02:42.540
But fast-forward to today,
and all that traffic

00:02:42.540 --> 00:02:44.820
travels around the
world, between countries

00:02:44.820 --> 00:02:46.210
all over the place.

00:02:46.210 --> 00:02:49.470
And the fact is that
anybody on the network,

00:02:49.470 --> 00:02:54.460
between you and the server, can
see that traffic coming past.

00:02:54.460 --> 00:02:57.280
Now when we're sharing
documents, that was OK.

00:02:57.280 --> 00:03:02.060
But today, a lot of the internet
is about e-commerce and money.

00:03:02.060 --> 00:03:03.940
So it's your
responsibility to protect

00:03:03.940 --> 00:03:07.000
your revenue streams
as website developers,

00:03:07.000 --> 00:03:09.730
and also your users'
credit card information.

00:03:09.730 --> 00:03:13.810
If I'm on public
Wi-Fi, or connecting

00:03:13.810 --> 00:03:16.840
to my internet service provider,
if I send my credit card

00:03:16.840 --> 00:03:21.790
number, over HTTP, anybody
in between can see it.

00:03:21.790 --> 00:03:23.380
And this is a real problem.

00:03:23.380 --> 00:03:25.300
So this is what we
need to protect.

00:03:25.300 --> 00:03:29.080
We need to protect the financial
backbone of web commerce.

00:03:29.080 --> 00:03:31.215
And this is why
HTTPS is crucial.

00:03:34.300 --> 00:03:36.510
So what we're
really aiming to do

00:03:36.510 --> 00:03:40.990
is to try and get this little
green icon up on our sites.

00:03:40.990 --> 00:03:44.260
And to get that to happen, there
are three fundamental things

00:03:44.260 --> 00:03:45.760
that you need to do.

00:03:45.760 --> 00:03:48.160
Now, I'll just
quickly explain what

00:03:48.160 --> 00:03:51.010
happens if you don't do this.

00:03:51.010 --> 00:03:54.910
If this was google.com and
it was served over HTTP,

00:03:54.910 --> 00:03:56.830
I could be sitting in
an airport connected

00:03:56.830 --> 00:03:59.410
to a public Wi-Fi
spot, and somebody

00:03:59.410 --> 00:04:02.650
could put a big
advertisement right here

00:04:02.650 --> 00:04:06.520
on top of my page saying, click
here, download the new Chrome

00:04:06.520 --> 00:04:08.060
browser.

00:04:08.060 --> 00:04:10.360
And if I click that, it
could take me to a site

00:04:10.360 --> 00:04:13.090
that downloads malware
onto my laptop.

00:04:13.090 --> 00:04:15.520
And this is the risk with HTTP.

00:04:15.520 --> 00:04:18.620
But with HTTPS, this
does not happen.

00:04:18.620 --> 00:04:21.579
And there are three
things that it gives you.

00:04:21.579 --> 00:04:25.843
The first thing it
gives you is identity.

00:04:25.843 --> 00:04:27.320
Right?

00:04:27.320 --> 00:04:31.290
With HTTPS, what happens
is a digital certificate

00:04:31.290 --> 00:04:34.680
is sent between the
server and the client.

00:04:34.680 --> 00:04:37.230
What that certificate
does is it guarantees

00:04:37.230 --> 00:04:40.370
that if I connect to
google.com or google.cn,

00:04:40.370 --> 00:04:43.830
I am talking to that server
and not another server that

00:04:43.830 --> 00:04:46.782
is impersonating that site.

00:04:46.782 --> 00:04:47.740
So it's very important.

00:04:47.740 --> 00:04:50.210
So it guarantees you are
connecting to the server you

00:04:50.210 --> 00:04:52.810
attempted to connect to.

00:04:52.810 --> 00:04:57.280
The second thing it gives
you is confidentiality.

00:04:57.280 --> 00:04:59.050
What that means
is nobody can read

00:04:59.050 --> 00:05:03.300
the data transferred between
the server and the browser.

00:05:03.300 --> 00:05:06.260
So in the case where we were
exchanging credit card numbers,

00:05:06.260 --> 00:05:07.830
no one can see my
credit card number

00:05:07.830 --> 00:05:11.470
and then use it to
buy things on Alibaba.

00:05:11.470 --> 00:05:12.840
This is very important.

00:05:12.840 --> 00:05:16.570
And the third thing it gives
me is integrity of data.

00:05:16.570 --> 00:05:18.240
And what that means
is [AUDIO OUT]

00:05:18.240 --> 00:05:22.290
modified the data between
the server and the browser.

00:05:22.290 --> 00:05:25.020
So the only two
parties that can change

00:05:25.020 --> 00:05:27.750
the data that we
exchange are the server

00:05:27.750 --> 00:05:29.500
and the browser itself.

00:05:29.500 --> 00:05:35.910
So these are three fundamental
pieces that you get with HTTPS.

00:05:35.910 --> 00:05:40.100
OK, but a lot of people
wondered about the performance

00:05:40.100 --> 00:05:44.360
impact, the cost of
actually implementing HTTPS,

00:05:44.360 --> 00:05:46.850
and the maintenance burden.

00:05:46.850 --> 00:05:48.830
Now of course, as
developers, if you're

00:05:48.830 --> 00:05:52.370
building sites or serving
sites, you want it to be fast,

00:05:52.370 --> 00:05:53.795
so you worry about performance.

00:05:53.795 --> 00:05:55.420
You don't want to
spend a lot of money,

00:05:55.420 --> 00:05:57.620
or you don't want to
burn money for no reason.

00:05:57.620 --> 00:05:59.480
So cost is important.

00:05:59.480 --> 00:06:01.090
And maintenance is [AUDIO OUT].

00:06:01.090 --> 00:06:03.620
It means you have to
get the certificates.

00:06:03.620 --> 00:06:04.730
You have to manage them.

00:06:04.730 --> 00:06:06.600
You have to work with them.

00:06:06.600 --> 00:06:10.160
So let's just dive into
this a little bit more.

00:06:10.160 --> 00:06:13.430
So let's take a look at
a few of the criticisms

00:06:13.430 --> 00:06:17.120
that people have
levied against HTTPS.

00:06:17.120 --> 00:06:19.640
One is that my site
doesn't really need it.

00:06:19.640 --> 00:06:21.140
Do you really need it?

00:06:21.140 --> 00:06:24.080
I mean, all my site does
is show a few photos

00:06:24.080 --> 00:06:26.120
that I've taken on my holidays.

00:06:26.120 --> 00:06:28.440
Is that really
necessary to use it?

00:06:28.440 --> 00:06:31.530
The other thing is, it'll
cause performance problems.

00:06:31.530 --> 00:06:34.749
And I'll lose money, because
if my site slows down,

00:06:34.749 --> 00:06:37.290
people will run away and they
won't buy the e-commerce things

00:06:37.290 --> 00:06:38.700
that I have for sale.

00:06:38.700 --> 00:06:41.910
The other thing is, it
costs a lot to implement.

00:06:41.910 --> 00:06:44.970
And third party sites won't
necessarily support it.

00:06:44.970 --> 00:06:46.650
So why should I bother?

00:06:46.650 --> 00:06:49.940
So let's just dive
into them one by one.

00:06:49.940 --> 00:06:55.040
What we think is that HTTPS
is the minimum foundation

00:06:55.040 --> 00:06:58.310
of building a modern website
today, or a modern web app--

00:06:58.310 --> 00:07:00.260
something you really need to do.

00:07:00.260 --> 00:07:03.620
Because even if you think
your site doesn't need it,

00:07:03.620 --> 00:07:07.640
if you go, as I said before,
to a public Wi-Fi hotspot

00:07:07.640 --> 00:07:11.330
and connect to your simple
site that just shows pictures,

00:07:11.330 --> 00:07:13.850
there is nothing stopping
that site popping up

00:07:13.850 --> 00:07:18.260
an ad over the top of the
picture saying, click me.

00:07:18.260 --> 00:07:23.390
I personally have connected HTTP
sites on my phone at airports

00:07:23.390 --> 00:07:25.820
and suddenly I have
a pop-up that says,

00:07:25.820 --> 00:07:28.070
your Android device is
infected with malware.

00:07:28.070 --> 00:07:30.560
Click here to wipe your device.

00:07:30.560 --> 00:07:34.310
Has anyone experienced anything
like that in this room?

00:07:34.310 --> 00:07:36.640
Yes, yes, a few people.

00:07:36.640 --> 00:07:40.840
Right, so that is
the risk using HTTP.

00:07:40.840 --> 00:07:45.130
So one of the other seriously
important aspects of this

00:07:45.130 --> 00:07:48.490
is all of these
fantastic new APIs

00:07:48.490 --> 00:07:51.160
that give you the progressive
web app experience.

00:07:51.160 --> 00:07:54.610
Not even just progressive web
apps, but any modern site,

00:07:54.610 --> 00:07:57.070
these require HTTPS.

00:07:57.070 --> 00:07:59.890
Not all of them here
now, but some people

00:07:59.890 --> 00:08:03.940
may still use app cache and
encrypted media extensions.

00:08:03.940 --> 00:08:07.630
Now, both of those APIs
currently work without HTTPS,

00:08:07.630 --> 00:08:12.280
but they are being migrated
to HTTPS as an extra security

00:08:12.280 --> 00:08:15.940
measure because app cache
is a perfect example where

00:08:15.940 --> 00:08:19.990
I can intercept the traffic
and store the wrong data

00:08:19.990 --> 00:08:20.860
into my app cache.

00:08:20.860 --> 00:08:23.020
So that is moving to HTTPS.

00:08:23.020 --> 00:08:24.940
Same with encrypted
media extensions.

00:08:24.940 --> 00:08:27.520
So if you currently
use these two APIs,

00:08:27.520 --> 00:08:33.070
please make a migration plan and
move off HTTP and onto HTTPS.

00:08:36.140 --> 00:08:36.650
OK.

00:08:36.650 --> 00:08:39.679
We've just heard Pete give us
a lovely explanation about what

00:08:39.679 --> 00:08:43.919
service workers are and why
they are so useful to you.

00:08:43.919 --> 00:08:46.670
Now, the thing is that
service workers will only

00:08:46.670 --> 00:08:48.800
work on an HTTPS connection.

00:08:48.800 --> 00:08:53.610
You must have HTTPS or service
worker will fail to run at all.

00:08:53.610 --> 00:08:56.960
Now the reason for this
is that the service worker

00:08:56.960 --> 00:09:00.140
is the thing that jumps between
the browser and the network.

00:09:00.140 --> 00:09:02.690
So it has a massive,
massive exposure

00:09:02.690 --> 00:09:06.800
to the data that comes between
the browser and the server.

00:09:06.800 --> 00:09:09.500
So it must be encrypted.

00:09:09.500 --> 00:09:13.770
This is purely for protection
of your users, of course.

00:09:13.770 --> 00:09:17.640
So now, what do we say here?

00:09:17.640 --> 00:09:21.610
So the point about
this slide is basically

00:09:21.610 --> 00:09:25.470
HTTPS is no longer considered
something that is only needed

00:09:25.470 --> 00:09:27.540
for security-sensitive sites.

00:09:27.540 --> 00:09:31.260
We're seeing ad injections,
all sorts of strange things

00:09:31.260 --> 00:09:33.180
that go on in the
public internet.

00:09:33.180 --> 00:09:35.370
And it's very important
for your users

00:09:35.370 --> 00:09:37.110
to give them a proper
user experience.

00:09:37.110 --> 00:09:40.800
Because if you're running
an e-commerce site,

00:09:40.800 --> 00:09:43.410
you want all the
money to come to you.

00:09:43.410 --> 00:09:45.750
If you're hosting some
kind of information

00:09:45.750 --> 00:09:48.810
and you use advertising
to monetize that,

00:09:48.810 --> 00:09:50.460
you don't want your
users to suddenly

00:09:50.460 --> 00:09:55.610
be served different ads and
the money to go somebody else.

00:09:55.610 --> 00:09:58.519
So what about the
performance issues?

00:09:58.519 --> 00:10:00.560
One of the things that
people talk about is it'll

00:10:00.560 --> 00:10:04.620
cause performance problems
and I'll lose money.

00:10:04.620 --> 00:10:08.900
So, this might have been
true five to 10 years ago.

00:10:08.900 --> 00:10:11.390
But all the browser vendors
and the entire internet

00:10:11.390 --> 00:10:13.940
infrastructure has
changed over the years.

00:10:13.940 --> 00:10:16.130
And it's no longer
a real problem.

00:10:16.130 --> 00:10:20.540
So I'll tell you what's
happened in the past few years.

00:10:20.540 --> 00:10:26.600
So when you set up a HTTPS
session, what happens

00:10:26.600 --> 00:10:31.010
is that normally
you connect on HTTP.

00:10:31.010 --> 00:10:35.390
Say if your server is serving
HTTPS only and somebody

00:10:35.390 --> 00:10:39.200
attempts to connect
with an HTTP address,

00:10:39.200 --> 00:10:41.240
there were three round trips.

00:10:41.240 --> 00:10:44.020
What happens is that
you connect with HTTP.

00:10:44.020 --> 00:10:47.510
The server says, sorry,
here's a 301 redirect.

00:10:47.510 --> 00:10:50.457
We actually want you
to serve over HTTPS.

00:10:50.457 --> 00:10:52.040
And then you have
to go back and forth

00:10:52.040 --> 00:10:55.880
to the server two more times
to do a TLS handshake to set up

00:10:55.880 --> 00:10:58.910
the HTTPS session.

00:10:58.910 --> 00:11:03.200
You can shorten that very
easily by using Strict Transport

00:11:03.200 --> 00:11:04.700
Security, HSTS.

00:11:04.700 --> 00:11:07.760
And so what this is is
a header that you return

00:11:07.760 --> 00:11:12.270
from your server to the browser
that says, in the future,

00:11:12.270 --> 00:11:15.560
if you ever ask for
HTTP, we will just

00:11:15.560 --> 00:11:18.560
please ask for HTTPS instead.

00:11:18.560 --> 00:11:22.340
So in this example, I'm
saying, for the next month,

00:11:22.340 --> 00:11:26.510
if anybody types
HTTP into my domain,

00:11:26.510 --> 00:11:31.730
automatically issue an
HTTPS attempt to connect.

00:11:31.730 --> 00:11:36.530
Right, so if I have
http://google.cn,

00:11:36.530 --> 00:11:40.490
and this comes back in the first
response, then in the future,

00:11:40.490 --> 00:11:44.870
if the user types
http://google.cn

00:11:44.870 --> 00:11:47.330
into the browser
and hits Return,

00:11:47.330 --> 00:11:49.220
the browser will
intercept and go,

00:11:49.220 --> 00:11:52.520
no, it should be HTTPS,
and start the TLS handshake

00:11:52.520 --> 00:11:56.750
immediately, which
saves a full round trip.

00:11:56.750 --> 00:12:00.927
So this is basically,
that's the written version.

00:12:00.927 --> 00:12:03.260
If you didn't understand how
I was speaking because I do

00:12:03.260 --> 00:12:06.840
have an Australian accent, which
can be difficult to understand,

00:12:06.840 --> 00:12:08.800
even for me.

00:12:08.800 --> 00:12:11.520
OK, so, oh [INAUDIBLE].

00:12:11.520 --> 00:12:13.190
This keeps jumping out of--

00:12:18.050 --> 00:12:21.330
sorry, yeah.

00:12:21.330 --> 00:12:22.860
OK, so here is a
typical handshake.

00:12:22.860 --> 00:12:24.651
So this is what I was
talking about before.

00:12:24.651 --> 00:12:28.740
The original HTTP
request goes out.

00:12:28.740 --> 00:12:31.020
The 301 redirect comes back.

00:12:31.020 --> 00:12:34.110
Then we start doing
the TLS handshake.

00:12:34.110 --> 00:12:35.910
So there are three
full round trips

00:12:35.910 --> 00:12:38.387
until we can issue
the first get requests

00:12:38.387 --> 00:12:39.470
to get our first resource.

00:12:39.470 --> 00:12:41.400
So it's a lot of slowdown.

00:12:41.400 --> 00:12:45.050
But there are ways
to speed this up.

00:12:45.050 --> 00:12:47.660
This is the actual
TLS handshake itself.

00:12:47.660 --> 00:12:49.580
And so one of the
things that you see here

00:12:49.580 --> 00:12:53.580
is that it goes out, comes
back with a certificate,

00:12:53.580 --> 00:12:56.790
says, OK, it's finished, waits
for the response, and then

00:12:56.790 --> 00:12:57.800
issues the get request.

00:12:57.800 --> 00:13:01.010
But what we can actually
do on the client side

00:13:01.010 --> 00:13:05.540
is change the order by
issuing the get request

00:13:05.540 --> 00:13:09.060
before the second or the
third finished has come back.

00:13:09.060 --> 00:13:12.320
And so this will actually
speed up our response time.

00:13:12.320 --> 00:13:15.530
And we call this
TLS false start.

00:13:15.530 --> 00:13:17.930
So we're actually
starting to get requests

00:13:17.930 --> 00:13:20.720
before we've acknowledged that
we're finished the hand shake.

00:13:20.720 --> 00:13:23.450
And that is an option that you
can turn on on your server.

00:13:23.450 --> 00:13:26.530
And I encourage you to do so.

00:13:26.530 --> 00:13:29.980
Now another thing is that
when we start the first TLS

00:13:29.980 --> 00:13:33.260
handshake, we can
use a session ID.

00:13:33.260 --> 00:13:35.380
So this session ID is
something we can issue.

00:13:35.380 --> 00:13:38.260
So with the first request
to set up the TLS handshake,

00:13:38.260 --> 00:13:39.900
we send a session ID.

00:13:39.900 --> 00:13:42.490
And what that does is
that in the future when

00:13:42.490 --> 00:13:45.400
we start to do another
request, we can actually

00:13:45.400 --> 00:13:50.260
use what is called TLS session
resumption, which will also

00:13:50.260 --> 00:13:52.450
get rid of the extra
finished, takes off

00:13:52.450 --> 00:13:53.660
one of the round trips.

00:13:53.660 --> 00:13:55.540
So that also speeds things up.

00:13:55.540 --> 00:13:59.940
This is also something you
should turn on on your servers.

00:13:59.940 --> 00:14:04.100
OK, now another
incredibly important thing

00:14:04.100 --> 00:14:08.570
is that HTTPS is
required for HTTP/2.

00:14:08.570 --> 00:14:11.240
Does anybody know what
HTTP/2 is, in the room?

00:14:14.220 --> 00:14:15.270
A few people, great.

00:14:15.270 --> 00:14:17.280
Well, HTTP2 is the
next generation

00:14:17.280 --> 00:14:20.550
of transport protocol
for web browsers.

00:14:20.550 --> 00:14:25.990
And two of its main features are
multiplexing and server push.

00:14:25.990 --> 00:14:29.770
Multiplexing means that
you can get multiple assets

00:14:29.770 --> 00:14:32.500
on a single TCP IP connection.

00:14:32.500 --> 00:14:35.980
So instead of using one
socket for one resource

00:14:35.980 --> 00:14:38.590
at the same time, I can be
fetching three, or four, or 10,

00:14:38.590 --> 00:14:42.220
or 100 resources on
the one TCP connection.

00:14:42.220 --> 00:14:45.920
And the browser and the server
negotiate how that works.

00:14:45.920 --> 00:14:48.070
Server push is a
completely different thing.

00:14:48.070 --> 00:14:50.110
Server push means
that the server

00:14:50.110 --> 00:14:54.280
can send assets to the browser
before the browser asks

00:14:54.280 --> 00:14:55.430
for them.

00:14:55.430 --> 00:14:58.550
So for example, if I ask
for an HTML page that

00:14:58.550 --> 00:15:01.820
contains a lot of
images, the server

00:15:01.820 --> 00:15:04.360
can start sending
the HTML page back.

00:15:04.360 --> 00:15:06.760
And the server knows that
the next thing I will do

00:15:06.760 --> 00:15:09.050
is ask for all the
images on the page.

00:15:09.050 --> 00:15:12.250
So the server can begin sending
the images back to the browser

00:15:12.250 --> 00:15:14.520
even before I ask for them.

00:15:14.520 --> 00:15:16.870
And this is a feature of HTTP/2.

00:15:16.870 --> 00:15:20.830
And the reason it's there is to
speed up loading of websites.

00:15:20.830 --> 00:15:25.190
However HTTP/2 requires HTTPS.

00:15:25.190 --> 00:15:28.720
So it runs on top of HTTPS.

00:15:28.720 --> 00:15:31.360
One of the reasons
that is is that there

00:15:31.360 --> 00:15:33.272
is a lot of
infrastructure already

00:15:33.272 --> 00:15:34.480
around the world for the web.

00:15:34.480 --> 00:15:36.490
There are a lot of
gateways that all

00:15:36.490 --> 00:15:40.150
understand HTTP 1.0 and 1.1.

00:15:40.150 --> 00:15:43.181
All of those gateways can
do things with the traffic.

00:15:43.181 --> 00:15:43.680
Right?

00:15:43.680 --> 00:15:44.721
They could change things.

00:15:44.721 --> 00:15:46.940
They could do
compression on the fly.

00:15:46.940 --> 00:15:49.150
They can make all sorts
of different changes.

00:15:49.150 --> 00:15:51.250
And because of the
existing infrastructure,

00:15:51.250 --> 00:15:55.870
its impossible to deploy
HTTP/2 without sending it

00:15:55.870 --> 00:15:59.200
over HTTPS, which provides
an end to end connection

00:15:59.200 --> 00:16:01.900
with no integrity violation.

00:16:01.900 --> 00:16:03.820
Remember, we talked
about integrity?

00:16:03.820 --> 00:16:08.080
So HTTPS means the server
data is exactly what ends up

00:16:08.080 --> 00:16:09.100
at the client.

00:16:09.100 --> 00:16:11.590
And that's why HTTPS
needs to be the transport

00:16:11.590 --> 00:16:15.050
medium for HTTP/2.

00:16:15.050 --> 00:16:19.420
OK, so here is an
example of a site

00:16:19.420 --> 00:16:22.630
called weather.com, who
actually made the transition

00:16:22.630 --> 00:16:27.250
from an HTTP site to an
HTTPS site and HTTP/2

00:16:27.250 --> 00:16:29.290
at the same time.

00:16:29.290 --> 00:16:32.680
Due to their architecture when
they first jumped to HTTPS,

00:16:32.680 --> 00:16:35.710
they saw a 50-millisecond
slowdown because of the way

00:16:35.710 --> 00:16:37.180
their site was constructed.

00:16:37.180 --> 00:16:41.140
However, this was part of a
larger plan to shift to HTTP/2.

00:16:41.140 --> 00:16:43.990
And when they deployed
the HTTP/2 version,

00:16:43.990 --> 00:16:48.670
they saw a
250-millisecond-per-page-view

00:16:48.670 --> 00:16:50.650
reduction in time, in latency.

00:16:50.650 --> 00:16:53.350
So they saved a quarter
of a second on a page

00:16:53.350 --> 00:16:56.620
by switching to an
HTTPS connection

00:16:56.620 --> 00:17:00.440
with HTTP/2 traffic
on top of it.

00:17:00.440 --> 00:17:02.350
So from a performance
point of view,

00:17:02.350 --> 00:17:04.060
you can actually
get a win if you

00:17:04.060 --> 00:17:08.130
shift to this kind of model.

00:17:08.130 --> 00:17:10.640
OK, but what about the expense?

00:17:10.640 --> 00:17:14.660
I mean, what happens
with the HTTPS connection

00:17:14.660 --> 00:17:16.130
is that the server
and the client

00:17:16.130 --> 00:17:17.990
communicate using
digital certificates.

00:17:17.990 --> 00:17:20.300
And you have to
obtain a certificate.

00:17:20.300 --> 00:17:23.270
And historically, this has
been a very expensive thing.

00:17:23.270 --> 00:17:26.030
And so people don't
want to spend the money

00:17:26.030 --> 00:17:28.700
to do this kind of thing,
all the cost of implementing,

00:17:28.700 --> 00:17:30.290
developer time, et cetera.

00:17:30.290 --> 00:17:33.560
So buying a cost, buying
a certificate was costly.

00:17:33.560 --> 00:17:37.100
The other concern with
HTTPS that I've heard

00:17:37.100 --> 00:17:38.660
is search ranking.

00:17:38.660 --> 00:17:40.190
So if you tell a
search engine, I

00:17:40.190 --> 00:17:43.550
have an HTTP version of my
site and an HTTPS version

00:17:43.550 --> 00:17:46.040
of my site, people
sometimes think

00:17:46.040 --> 00:17:49.010
that means because half your
traffic is going to each site

00:17:49.010 --> 00:17:51.380
that your search
ranking will drop.

00:17:51.380 --> 00:17:52.730
This is not quite true.

00:17:52.730 --> 00:17:55.280
And I'll just walk you
through a couple of things.

00:17:55.280 --> 00:17:57.560
So let's start
with certificates.

00:17:57.560 --> 00:18:00.665
Has anyone bought a
certificate for HTTPS recently?

00:18:03.340 --> 00:18:05.110
At least a couple of people.

00:18:05.110 --> 00:18:08.440
OK, well, we've known
for this project that's

00:18:08.440 --> 00:18:11.800
an external project over,
I'm not exactly sure

00:18:11.800 --> 00:18:15.670
where it's hosted, but they sell
certificates for $16 a year.

00:18:15.670 --> 00:18:18.830
16 US dollars, that's
about 110 yuan.

00:18:18.830 --> 00:18:20.800
So that's not a lot of money.

00:18:20.800 --> 00:18:22.990
In fact, if you host
a multi-site site,

00:18:22.990 --> 00:18:25.660
they'll sell it
for about 170 yuan.

00:18:25.660 --> 00:18:27.940
So it's not actually
a large expense

00:18:27.940 --> 00:18:31.270
when you're paying
developers to write code.

00:18:31.270 --> 00:18:34.060
Then there's another project
that started relatively

00:18:34.060 --> 00:18:36.270
recently, called Let's Encrypt.

00:18:36.270 --> 00:18:39.260
And this project provides
you certificates for free.

00:18:39.260 --> 00:18:41.486
So they don't cost you anything.

00:18:41.486 --> 00:18:44.110
Now this is a great way to avoid
having to spend money on this.

00:18:44.110 --> 00:18:47.190
And so that really takes
away any problem of cost.

00:18:50.200 --> 00:18:53.190
Now, we should go into
the search ranking.

00:18:53.190 --> 00:18:55.947
Now search ranking is
an interesting one.

00:18:55.947 --> 00:18:58.280
You, of course, don't want
to go down in search ranking.

00:18:58.280 --> 00:19:01.610
Everybody's trying to get up
to the top as much as possible.

00:19:01.610 --> 00:19:05.950
So if you migrate your
site from HTTP to HTTPS,

00:19:05.950 --> 00:19:07.600
there are a few best
practices that you

00:19:07.600 --> 00:19:11.350
can use that search
engines will understand.

00:19:11.350 --> 00:19:17.620
So one of the first things is if
you issue this HTTP 301 direct,

00:19:17.620 --> 00:19:21.310
like say, somebody says,
HTTP, go and get the services,

00:19:21.310 --> 00:19:23.380
no, 301 redirect.

00:19:23.380 --> 00:19:28.670
If you actually put in moved
permanently the new location,

00:19:28.670 --> 00:19:30.350
then from that point
on, the browser

00:19:30.350 --> 00:19:33.760
knows, for the meantime,
that it should go there.

00:19:33.760 --> 00:19:36.190
But search engines are smart
enough to remember these too.

00:19:36.190 --> 00:19:39.190
So search engines
will go, ah, the HTTP

00:19:39.190 --> 00:19:40.690
site is no longer there.

00:19:40.690 --> 00:19:45.520
We will refer to the HTTPS
site as the correct site.

00:19:45.520 --> 00:19:48.340
And then on top of that,
inside your content,

00:19:48.340 --> 00:19:53.020
when you serve it on HTTPS,
you need to put in this,

00:19:53.020 --> 00:19:55.120
link rel=canonical.

00:19:55.120 --> 00:19:57.970
Now this tells the
search engine that this

00:19:57.970 --> 00:20:00.940
is the definitive
version of your site.

00:20:00.940 --> 00:20:04.930
Right, so the HTTPS
version is canonical,

00:20:04.930 --> 00:20:07.870
which means whenever you want
to refer to that for search

00:20:07.870 --> 00:20:11.200
ranking or anything like
that, that is the site and not

00:20:11.200 --> 00:20:14.490
the HTTP.

00:20:14.490 --> 00:20:17.280
OK, so as far as
working out what

00:20:17.280 --> 00:20:19.620
to do with search
engine stuff, we've

00:20:19.620 --> 00:20:21.720
put together a whole
lot of guidance.

00:20:21.720 --> 00:20:26.010
So if you actually go to the
site, you can walk through it

00:20:26.010 --> 00:20:29.190
and find a whole lot of
guidance on best practices

00:20:29.190 --> 00:20:32.820
to make sure that your search
engine ranking remains high

00:20:32.820 --> 00:20:36.640
when you make the migration
from HTTP to HTTPS.

00:20:36.640 --> 00:20:38.950
It's a very good thing to do.

00:20:38.950 --> 00:20:42.480
OK so finally, the last
point on all of this

00:20:42.480 --> 00:20:45.720
is that if you have a
site that pulls together

00:20:45.720 --> 00:20:48.870
content from a bunch of
third party sites, like ads,

00:20:48.870 --> 00:20:52.500
or images from any image
server, or content from a CDN,

00:20:52.500 --> 00:20:55.380
then you have to worry about
whether or not those sites

00:20:55.380 --> 00:20:57.930
support HTTPS as well.

00:20:57.930 --> 00:21:00.240
Because to get the
full green icon,

00:21:00.240 --> 00:21:04.920
all your content on the page
needs to be served on HTTPS.

00:21:04.920 --> 00:21:07.320
Now one of the most
important things that we

00:21:07.320 --> 00:21:09.830
put on our websites are ads.

00:21:09.830 --> 00:21:15.060
And so of course, there was this
kind of survey done by the IAB.

00:21:15.060 --> 00:21:18.360
The IAB is a internet
advertising kind

00:21:18.360 --> 00:21:22.080
of oversight committee that
has a lot of the ad serving

00:21:22.080 --> 00:21:23.460
networks as members.

00:21:23.460 --> 00:21:27.600
So, back as far back as
2013, so three years ago,

00:21:27.600 --> 00:21:30.090
they noted that a lot
of their members, 80%,

00:21:30.090 --> 00:21:33.210
had already completely
shifted to HTTPS.

00:21:33.210 --> 00:21:37.050
And the plan was to have
100% compliance very soon.

00:21:37.050 --> 00:21:40.950
So as far as ad serving goes,
that's already well and truly

00:21:40.950 --> 00:21:41.940
on this way.

00:21:41.940 --> 00:21:45.930
And we'll wait to see when
they finally hit 100%.

00:21:45.930 --> 00:21:50.180
Now if you are a developer
and you're working with HTTPS

00:21:50.180 --> 00:21:52.770
and you're trying to
debug on your site,

00:21:52.770 --> 00:21:54.480
you can also pull
up Chrome DevTools.

00:21:54.480 --> 00:21:56.520
So Pete showed you
Chrome DevTools,

00:21:56.520 --> 00:22:00.070
which had the wonderful
stuff in the service workers.

00:22:00.070 --> 00:22:01.710
So inside Chrome
DevTools, we actually

00:22:01.710 --> 00:22:04.110
have a whole lot of HTTPS stuff.

00:22:04.110 --> 00:22:06.790
And this is showing you, you
can look at the certificates.

00:22:06.790 --> 00:22:09.570
You can look whether the site
has mixed content, which means

00:22:09.570 --> 00:22:12.090
some secure and some insecure.

00:22:12.090 --> 00:22:14.621
And it will show you
a whole lot of stuff

00:22:14.621 --> 00:22:15.620
that you can debug with.

00:22:15.620 --> 00:22:17.760
It'll put out
console log warnings.

00:22:17.760 --> 00:22:20.260
So as a developer, when you're
trying to debug your site

00:22:20.260 --> 00:22:22.980
and you don't know why you
haven't got the green lock,

00:22:22.980 --> 00:22:25.000
the Chrome Developer
Tools will help you.

00:22:25.000 --> 00:22:29.700
And I'm sure all the other
browsers pretty much have this.

00:22:29.700 --> 00:22:34.890
So what's next, we have
basically a whole lot of stuff

00:22:34.890 --> 00:22:38.370
that you can look at on the
developers.google.cn website.

00:22:38.370 --> 00:22:42.090
So encrypting data in transit,
which just kind of explains

00:22:42.090 --> 00:22:45.570
how this all works, using
content security policy--

00:22:45.570 --> 00:22:49.320
does anyone know about content
security policy in here?

00:22:49.320 --> 00:22:52.530
Put up your hands if you
know what [? cause ?] is?

00:22:52.530 --> 00:22:55.320
Excellent, I would highly
recommend people read this

00:22:55.320 --> 00:22:56.790
because this is very important.

00:22:56.790 --> 00:23:01.530
Content security policy is
a way of enforcing loading

00:23:01.530 --> 00:23:04.930
from third domains, like
other domains than your own.

00:23:04.930 --> 00:23:07.620
And one of the nice things
you can do with the content

00:23:07.620 --> 00:23:10.680
security policy
stuff is if you have

00:23:10.680 --> 00:23:13.420
a site that is migrating,
on your server,

00:23:13.420 --> 00:23:15.570
you can add a header
that will give you

00:23:15.570 --> 00:23:17.580
a warning in the
console whenever you try

00:23:17.580 --> 00:23:20.509
and load non-encrypted content.

00:23:20.509 --> 00:23:22.800
So things like this, there
are some very good practices

00:23:22.800 --> 00:23:25.410
that you can following
there and guidelines

00:23:25.410 --> 00:23:27.930
for preventing mixed content.

00:23:27.930 --> 00:23:31.650
So anyway, I have a nice
short talk for you today.

00:23:31.650 --> 00:23:34.740
And I would just
highly recommend you

00:23:34.740 --> 00:23:39.270
all switched HTTPS because,
as I said at the beginning,

00:23:39.270 --> 00:23:42.900
I'll just reinforce it, the days
of e-commerce on the web here

00:23:42.900 --> 00:23:43.830
today.

00:23:43.830 --> 00:23:44.580
And it's huge.

00:23:44.580 --> 00:23:47.630
And it's up to you to
protect your users,

00:23:47.630 --> 00:23:50.700
protect the money that they're
paying to you for services,

00:23:50.700 --> 00:23:53.010
and also protect your
own revenue streams

00:23:53.010 --> 00:23:54.509
when you're running sites.

00:23:54.509 --> 00:23:57.050
And if you want to a progressive
web app with service worker,

00:23:57.050 --> 00:23:58.410
it's required.

00:23:58.410 --> 00:24:01.320
So anyway, thanks for
listening to me today,

00:24:01.320 --> 00:24:03.340
and hope you learned something.

00:24:03.340 --> 00:24:06.670
[APPLAUSE]

00:24:09.550 --> 00:24:11.502
SPEAKER 1: [SPEAKING CHINESE]

00:24:27.299 --> 00:24:30.810
AUDIENCE: You said
searching ranking rule

00:24:30.810 --> 00:24:38.940
is the common rule for almost
searcher like Baidu or Bing.

00:24:41.510 --> 00:24:50.990
This is the common rule
recommend to use the link

00:24:50.990 --> 00:24:54.517
the HTTPS domain, dot com.

00:24:54.517 --> 00:24:56.850
ALEX DANILO: Yes, that was
the question of whether using

00:24:56.850 --> 00:25:00.720
the link rel=canonical is the
right way for search engine

00:25:00.720 --> 00:25:02.820
such as Baidu and
Bing, et cetera.

00:25:02.820 --> 00:25:05.640
Yes, this is common knowledge
for all the search engines.

00:25:05.640 --> 00:25:10.200
So that's the best practices
so that the algorithms that

00:25:10.200 --> 00:25:12.390
generate the searching
database understand

00:25:12.390 --> 00:25:15.700
that that is the definitive
version of your site.

00:25:15.700 --> 00:25:19.350
Especially if, so if you have
a site that you're migrating,

00:25:19.350 --> 00:25:22.680
like say that you already
had a site that was on HTTP,

00:25:22.680 --> 00:25:24.750
and it has a ranking.

00:25:24.750 --> 00:25:28.020
So that ranking is stored
against the URL with the HTTP

00:25:28.020 --> 00:25:29.730
on the front.

00:25:29.730 --> 00:25:33.090
As soon as you do the redirect
and then put the link,

00:25:33.090 --> 00:25:37.170
rel=canonical, then the
search engine will assign all

00:25:37.170 --> 00:25:41.159
the weights of the
ranking to the HTTPS site.

00:25:41.159 --> 00:25:41.700
AUDIENCE: OK.

00:25:41.700 --> 00:25:42.636
Thank you.

00:25:46.290 --> 00:25:49.640
AUDIENCE: May I ask you some
tips for mobile developer,

00:25:49.640 --> 00:25:52.420
like Tinder?

00:25:52.420 --> 00:25:59.370
It works for [INAUDIBLE]
or make the server notify

00:25:59.370 --> 00:26:04.429
our [INAUDIBLE] work for HTTPS?

00:26:04.429 --> 00:26:06.470
ALEX DANILO: Can you repeat
the question, please?

00:26:06.470 --> 00:26:12.360
AUDIENCE: OK, I want to add
[INAUDIBLE] in my mobile apps

00:26:12.360 --> 00:26:14.604
for HTTPS.

00:26:14.604 --> 00:26:17.419
[INAUDIBLE]

00:26:17.419 --> 00:26:18.210
ALEX DANILO: A pin?

00:26:18.210 --> 00:26:18.730
Or--

00:26:18.730 --> 00:26:19.849
AUDIENCE: [INAUDIBLE]

00:26:19.849 --> 00:26:20.890
ALEX DANILO: Oh, pinning?

00:26:25.190 --> 00:26:27.220
AUDIENCE: It works for HTTPS?

00:26:27.220 --> 00:26:29.285
It works for HTTPS?

00:26:29.285 --> 00:26:31.660
ALEX DANILO: I'm not actually
sure of the answer to that,

00:26:31.660 --> 00:26:32.860
sorry.

00:26:32.860 --> 00:26:34.870
AUDIENCE: I think he's
asking your opinion

00:26:34.870 --> 00:26:39.580
about like mobile development
on using HTTPS, maybe some tips,

00:26:39.580 --> 00:26:40.900
maybe some like extra.

00:26:40.900 --> 00:26:42.900
ALEX DANILO: Oh, tips.

00:26:42.900 --> 00:26:49.010
My opinion, well HTTPS is,
for mobile, is basically

00:26:49.010 --> 00:26:52.370
very little cost, in terms
of performance, battery life,

00:26:52.370 --> 00:26:53.690
and things like that.

00:26:53.690 --> 00:26:56.730
A long time ago, five years
ago, that was not the case.

00:26:56.730 --> 00:27:00.590
But now in a modern
browser, the CPU load

00:27:00.590 --> 00:27:04.940
for using HTTPS is like
less than 1% over HTTP,

00:27:04.940 --> 00:27:10.250
it's a very low
computational cost.

00:27:10.250 --> 00:27:13.280
And as far as
performance, latency

00:27:13.280 --> 00:27:15.680
is, once the
connection is set up,

00:27:15.680 --> 00:27:20.000
it's exactly the same as HTTP.

00:27:20.000 --> 00:27:24.170
If you shift to HTTP/2, you will
see lower latency and higher

00:27:24.170 --> 00:27:25.120
performance.

00:27:27.940 --> 00:27:28.720
AUDIENCE: Thanks.

00:27:28.720 --> 00:27:31.102
Thanks, Thanks a lot.

00:27:37.090 --> 00:27:39.280
AUDIENCE: [SPEAKING CHINESE]

00:28:12.742 --> 00:28:15.460
AUDIENCE: OK, let
me do a translation.

00:28:18.510 --> 00:28:23.330
So you just mention HTTPS
together with HTTP/2

00:28:23.330 --> 00:28:26.840
to give a performance boost
on mobile development.

00:28:26.840 --> 00:28:29.960
But the question here is
that for Android development,

00:28:29.960 --> 00:28:33.770
if we don't account
for HTTPS, well,

00:28:33.770 --> 00:28:37.830
actually 2, what would be
your suggestion about HTTPS

00:28:37.830 --> 00:28:39.970
in mobile development
because that seems

00:28:39.970 --> 00:28:43.420
to incur a performance hit.

00:28:43.420 --> 00:28:45.590
ALEX DANILO: Very good question.

00:28:45.590 --> 00:28:48.190
In general, the performance
hit is very low.

00:28:48.190 --> 00:28:51.160
The weather.com example,
their performance

00:28:51.160 --> 00:28:53.650
hit that they took was
due to the architecture

00:28:53.650 --> 00:28:56.860
of their application,
not HTTPS itself.

00:28:56.860 --> 00:29:02.140
So basically the only cost
is in the initial set up,

00:29:02.140 --> 00:29:04.000
if there is any cost.

00:29:04.000 --> 00:29:08.890
And so if you do the
permanent redirect and the TLS

00:29:08.890 --> 00:29:12.010
false start, you will
reduce the round tripping.

00:29:12.010 --> 00:29:14.950
And so the performance
cost is almost negligible.

00:29:14.950 --> 00:29:16.630
You wouldn't even notice it.

00:29:26.820 --> 00:29:28.550
AUDIENCE: [SPEAKING CHINESE]

00:29:57.730 --> 00:29:59.570
AUDIENCE: I think
the question is,

00:29:59.570 --> 00:30:02.890
for to be able to
get the certificate,

00:30:02.890 --> 00:30:04.730
security is always
the first concern.

00:30:04.730 --> 00:30:09.890
And you just mentioned
two wonderful places

00:30:09.890 --> 00:30:11.642
to get the certificate.

00:30:11.642 --> 00:30:13.100
Now the question
is, he's wondering

00:30:13.100 --> 00:30:18.880
how secure, what was guaranteed
for security for those site

00:30:18.880 --> 00:30:22.600
as they are open source, which
I'm not sure if it's correct.

00:30:22.600 --> 00:30:24.280
So what's your opinion on that?

00:30:24.280 --> 00:30:28.190
ALEX DANILO: OK, well firstly
to get the certificate issued,

00:30:28.190 --> 00:30:29.740
you have to prove who you are.

00:30:29.740 --> 00:30:32.800
Like I said, they are just a
certificate issuing authority.

00:30:32.800 --> 00:30:35.020
So you have to first
prove to them that you

00:30:35.020 --> 00:30:37.510
own the domain, et cetera.

00:30:37.510 --> 00:30:40.100
Those certificates are signed
by a central authority,

00:30:40.100 --> 00:30:44.320
and so there isn't that problem
as far as their authenticity.

00:30:44.320 --> 00:30:47.650
But one thing that I
did forget to mention,

00:30:47.650 --> 00:30:51.100
which I should mention, with
both those things, SSLMATE

00:30:51.100 --> 00:30:53.680
and Let's Encrypt,
they also provide

00:30:53.680 --> 00:30:57.010
command line tools,
which lets you update,

00:30:57.010 --> 00:31:00.290
maintain your certificates so
that they will never expire.

00:31:00.290 --> 00:31:02.620
So they handle all
the automatic updating

00:31:02.620 --> 00:31:04.810
when the certificates expire.

00:31:04.810 --> 00:31:07.570
And so by using their
tools, it basically

00:31:07.570 --> 00:31:11.050
takes the development
burden down to zero,

00:31:11.050 --> 00:31:13.680
once you've started
using them, that is.

00:31:13.680 --> 00:31:15.550
AUDIENCE: So basically
you're saying

00:31:15.550 --> 00:31:18.822
that's safe to use those
websites to get a certificate.

00:31:18.822 --> 00:31:20.030
ALEX DANILO: Yes, absolutely.

00:31:20.030 --> 00:31:20.530
Yeah.

00:31:25.980 --> 00:31:30.895
AUDIENCE: I have heard that
we can use HTTPS to defend

00:31:30.895 --> 00:31:33.340
the man in the middle attack.

00:31:33.340 --> 00:31:39.690
But when I try to
attack myself website,

00:31:39.690 --> 00:31:43.140
I change it from HTTP to HTTPS.

00:31:43.140 --> 00:31:46.680
I successed.

00:31:46.680 --> 00:31:50.020
What's the right
way to use, what's

00:31:50.020 --> 00:31:54.720
the right way to use
HTTPS to defend man

00:31:54.720 --> 00:31:56.450
in the middle attack.

00:31:56.450 --> 00:31:58.450
ALEX DANILO: All right,
what's the way, the best

00:31:58.450 --> 00:32:01.962
way to use HTTPS to prevent
a man in the middle attack?

00:32:01.962 --> 00:32:03.420
When you attacked
your own website,

00:32:03.420 --> 00:32:06.190
did you use a self-signed
certificate or certificate

00:32:06.190 --> 00:32:09.250
from an authority?

00:32:09.250 --> 00:32:13.830
AUDIENCE: I install, I install
a software in my server.

00:32:13.830 --> 00:32:27.420
And try to pull request to my
self website by use browser.

00:32:27.420 --> 00:32:31.725
And then I try to--

00:32:38.200 --> 00:33:40.308
[SPEAKING CHINESE]

00:33:40.308 --> 00:33:41.433
AUDIENCE: I'll try my best.

00:33:44.680 --> 00:33:45.710
OK,

00:33:45.710 --> 00:33:47.860
OK, I can try it, I think.

00:33:47.860 --> 00:33:50.250
Since I have the microphone,
so I was listening.

00:33:50.250 --> 00:33:54.800
So, so I think that the audience
is asking a debugging question.

00:33:54.800 --> 00:33:59.190
He was trying to set
up a hacker machine,

00:33:59.190 --> 00:34:02.520
trying to hack his own
domain using HTTPS.

00:34:02.520 --> 00:34:06.700
And he found some issues
that his hacking machine,

00:34:06.700 --> 00:34:10.710
in the same local
network can actually

00:34:10.710 --> 00:34:14.909
intercept the response from
server and then return a 404

00:34:14.909 --> 00:34:15.920
to the client.

00:34:15.920 --> 00:34:18.360
And then the client
actually get the 404.

00:34:18.360 --> 00:34:21.780
I mean, the [INAUDIBLE] the
content itself is encrypted.

00:34:21.780 --> 00:34:26.010
But since he is still be able to
manipulate [INAUDIBLE] response

00:34:26.010 --> 00:34:27.600
in some way.

00:34:27.600 --> 00:34:28.539
ALEX DANILO: Yeah, OK.

00:34:28.539 --> 00:34:31.080
If you're on a local network,
if you're going through a proxy

00:34:31.080 --> 00:34:32.580
or if you're going
through anything,

00:34:32.580 --> 00:34:35.310
there is nothing that
HTTPS can do to stop

00:34:35.310 --> 00:34:36.719
you breaking the network.

00:34:36.719 --> 00:34:39.699
You can cut through the network
by doing almost anything.

00:34:39.699 --> 00:34:43.139
But if you are trying to
set up an HTTPS session,

00:34:43.139 --> 00:34:46.710
the first thing that
goes out is the domain

00:34:46.710 --> 00:34:49.122
that you're trying
to connect to.

00:34:49.122 --> 00:34:50.580
And the certificate
that comes back

00:34:50.580 --> 00:34:55.199
from the server to the client
is signed with that domain.

00:34:55.199 --> 00:34:58.830
So even if you can block
the requests going out,

00:34:58.830 --> 00:35:00.870
you should never
get a response back.

00:35:00.870 --> 00:35:03.937
Like you, if you're doing it
on your own local network,

00:35:03.937 --> 00:35:05.020
like there are exceptions.

00:35:05.020 --> 00:35:09.130
For example, when you are
debugging service worker

00:35:09.130 --> 00:35:13.570
on the local network, on
local host, 127.0.0.1,

00:35:13.570 --> 00:35:17.170
you can actually use a
service worker without HTTPS.

00:35:17.170 --> 00:35:20.500
You can use HTTP local
host because it's

00:35:20.500 --> 00:35:22.330
the local, trusted network.

00:35:22.330 --> 00:35:25.810
And the client understands that.

00:35:25.810 --> 00:35:29.260
But you should never be
able to have the connection

00:35:29.260 --> 00:35:31.960
from the server back
to the client blocked,

00:35:31.960 --> 00:35:34.720
unless that
certificate is valid.

00:35:34.720 --> 00:35:40.920
So if you successfully set up an
HTTPS connection to your server

00:35:40.920 --> 00:35:42.420
that you were
trying to hack, you

00:35:42.420 --> 00:35:45.060
would have had to have
served the certificate, which

00:35:45.060 --> 00:35:47.320
validates the domain that
you trying to connect to.

00:35:51.630 --> 00:35:53.670
AUDIENCE: [SPEAKING CHINESE]

00:36:42.490 --> 00:36:44.950
OK, I think he's still
filling out the question.

00:36:44.950 --> 00:36:47.560
And I think maybe
I should correct

00:36:47.560 --> 00:36:48.910
the previous translation.

00:36:48.910 --> 00:36:56.440
He was not on the local machine,
he's from the same LAN, the,

00:36:56.440 --> 00:36:59.190
it's like in the
same LAN network

00:36:59.190 --> 00:37:01.490
you're sharing probably the
same set of IP [INAUDIBLE].

00:37:01.490 --> 00:37:02.570
It doesn't matter.

00:37:02.570 --> 00:37:05.230
So his follow-up
question is, he somehow

00:37:05.230 --> 00:37:07.720
continued to have
[INAUDIBLE] [? pollution, ?]

00:37:07.720 --> 00:37:10.314
and you know, still
manipulated some way.

00:37:10.314 --> 00:37:11.980
But I think it's very
specific, in which

00:37:11.980 --> 00:37:13.550
I'm not sure I get it right.

00:37:13.550 --> 00:37:14.560
So maybe you guys can--

00:37:14.560 --> 00:37:15.010
ALEX DANILO: Well,
I think what we

00:37:15.010 --> 00:37:17.510
should do is talk after the--
he can come over here and talk

00:37:17.510 --> 00:37:19.564
to me after the talk,
because this will go on

00:37:19.564 --> 00:37:20.230
for a long time.

00:37:20.230 --> 00:37:22.950
And you can explain
in more detail.

00:37:22.950 --> 00:37:23.450
OK?

00:37:28.560 --> 00:37:29.810
AUDIENCE: Hi, sir.

00:37:29.810 --> 00:37:32.780
If we apply HTTPS
into our website,

00:37:32.780 --> 00:37:36.380
so government can now see
the data during connection.

00:37:36.380 --> 00:37:38.630
So do you think
the authorities are

00:37:38.630 --> 00:37:41.300
more likely to block
the [INAUDIBLE]

00:37:41.300 --> 00:37:47.450
of the use of free
certificates in the future?

00:37:47.450 --> 00:37:49.800
ALEX DANILO: I honestly don't
know the answer to that.

00:37:49.800 --> 00:37:52.310
I think that it's
basically impossible

00:37:52.310 --> 00:37:55.190
to tell the difference in
the certificate itself,

00:37:55.190 --> 00:37:58.330
because that goes over the
encrypted connection anyway,

00:37:58.330 --> 00:38:00.360
because the
certificate is signed.

00:38:00.360 --> 00:38:02.120
Because what happens in a--

00:38:02.120 --> 00:38:05.210
that's basically like a
public/private key setup,

00:38:05.210 --> 00:38:07.880
where the browser is
sending a public key.

00:38:07.880 --> 00:38:09.500
The certificate gets encrypted.

00:38:09.500 --> 00:38:10.670
And it comes back encrypted.

00:38:10.670 --> 00:38:14.210
So there's no way to
know the issuer until it

00:38:14.210 --> 00:38:16.280
decrypts on the client, anyway.

00:38:16.280 --> 00:38:18.930
So that is not something
that's detectable.

00:38:18.930 --> 00:38:21.200
So the data is not visible.

00:38:21.200 --> 00:38:25.100
So, because the connection is
from the client to the server,

00:38:25.100 --> 00:38:27.810
and encrypted in
both directions.

00:38:27.810 --> 00:38:30.890
So the visibility of the
certificate authority

00:38:30.890 --> 00:38:34.340
is nowhere to be seen
until it decrypts it

00:38:34.340 --> 00:38:35.930
on the client in the browser.

00:38:35.930 --> 00:38:51.690
So it should be no different
to any other certificate

00:38:51.690 --> 00:38:54.000
AUDIENCE: [SPEAKING CHINESE]

00:39:08.380 --> 00:39:10.632
AUDIENCE: How to debug?

00:39:10.632 --> 00:39:12.090
ALEX DANILO: How
to debug the HTTPS

00:39:12.090 --> 00:39:13.298
connection, or the handshake?

00:39:13.298 --> 00:39:15.720
AUDIENCE: He was asking you
how the debug a binary data,

00:39:15.720 --> 00:39:19.750
like web socket
things like that.

00:39:19.750 --> 00:39:25.100
I mean using HTTPS, if he's
just putting binary data,

00:39:25.100 --> 00:39:26.640
I'm not sure.

00:39:26.640 --> 00:39:31.730
So it's how to debug binary data
including a web socket and some

00:39:31.730 --> 00:39:33.580
of the things.

00:39:33.580 --> 00:39:35.207
ALEX DANILO: Right,
you mean for like,

00:39:35.207 --> 00:39:36.790
watching it to try
and work out what's

00:39:36.790 --> 00:39:38.720
going back and forth
across the web socket?

00:39:38.720 --> 00:39:41.830
AUDIENCE: Right, what kind
of tool you can use to debug,

00:39:41.830 --> 00:39:47.890
say a binary data, or HTTPS?

00:39:47.890 --> 00:39:49.960
ALEX DANILO: Or encrypted data?

00:39:49.960 --> 00:39:52.290
Well, that's a
very hard question.

00:39:52.290 --> 00:39:54.975
If you're talking about when
you're developing your site,

00:39:54.975 --> 00:39:57.308
if you want to debug what's
going across the web socket,

00:39:57.308 --> 00:39:59.487
I would--

00:39:59.487 --> 00:40:00.570
It's a very hard question.

00:40:00.570 --> 00:40:03.980
I'm not sure of the answer
to that, to be honest.

00:40:03.980 --> 00:40:07.860
But maybe you can describe your
scenario to me after the talk

00:40:07.860 --> 00:40:10.604
and we can talk through
it, because right now I

00:40:10.604 --> 00:40:11.645
can't think of an answer.

00:40:11.645 --> 00:40:17.020
AUDIENCE: [SPEAKING CHINESE]

00:40:20.990 --> 00:40:23.500
OK one more question.

00:40:23.500 --> 00:40:25.810
AUDIENCE: [SPEAKING CHINESE]

00:40:41.610 --> 00:40:44.230
AUDIENCE: OK, so the
whole HTTPS story

00:40:44.230 --> 00:40:46.140
is based on the certificate.

00:40:46.140 --> 00:40:49.350
What happen if the local
copy of the certificate

00:40:49.350 --> 00:40:53.330
was replaced by
a malicious copy?

00:40:53.330 --> 00:40:55.707
ALEX DANILO: Then
you're in bad trouble.

00:40:55.707 --> 00:40:57.832
Yeah, that's a very good,
very, very good question.

00:41:00.370 --> 00:41:03.670
The certificates, because of
the way that they're encoded,

00:41:03.670 --> 00:41:07.580
they remain encrypted
on the device.

00:41:07.580 --> 00:41:10.987
So basically, if you have
some kind of malware thing

00:41:10.987 --> 00:41:13.570
that compromise the certificate,
yes, there could be problems.

00:41:13.570 --> 00:41:16.900
But again, this is kind
of beyond my expertise

00:41:16.900 --> 00:41:19.330
in cryptography.

00:41:19.330 --> 00:41:22.279
I know that there have been a
number of accidental collision

00:41:22.279 --> 00:41:24.820
attacks, where people have been
able to generate certificates

00:41:24.820 --> 00:41:27.490
that have the same hash
as another certificate.

00:41:27.490 --> 00:41:29.980
And what we've done in
the browser community

00:41:29.980 --> 00:41:34.870
is try to deprecate and get
rid of insecure, cryptographic

00:41:34.870 --> 00:41:35.520
algorithms.

00:41:35.520 --> 00:41:39.790
So for example, SHA-1, which
was used for certificates,

00:41:39.790 --> 00:41:42.640
is something that is no
longer supported in browsers.

00:41:42.640 --> 00:41:47.540
So Firefox, Edge, Chrome, all
don't honor that certificate,

00:41:47.540 --> 00:41:50.900
because it's something
that we know can be broken.

00:41:50.900 --> 00:41:54.700
So browsers have moved to
more secure, cryptographic

00:41:54.700 --> 00:41:55.720
algorithms.

00:41:55.720 --> 00:41:58.840
And so the chances
of impersonating

00:41:58.840 --> 00:42:00.850
a valid certificate
are very, very low,

00:42:00.850 --> 00:42:04.540
because those impersonations,
to replace a certificate

00:42:04.540 --> 00:42:06.340
with another one
that impersonates,

00:42:06.340 --> 00:42:08.740
means that you have
to have a collision

00:42:08.740 --> 00:42:14.200
in the cryptographic hash, which
is very, very difficult to do.

00:42:14.200 --> 00:42:17.090
So when we have identified
weaker encryptions,

00:42:17.090 --> 00:42:19.000
they've been removed
from the browsers.

00:42:19.000 --> 00:42:23.705
And so you will get the red bad
certificate icon on the address

00:42:23.705 --> 00:42:24.580
bar, if that happens.

00:42:33.540 --> 00:42:35.364
AUDIENCE: OK, thanks, Alex.

00:42:35.364 --> 00:42:36.780
ALEX DANILO: Thank
you, everybody.

00:42:36.780 --> 00:42:40.430
[APPLAUSE]

