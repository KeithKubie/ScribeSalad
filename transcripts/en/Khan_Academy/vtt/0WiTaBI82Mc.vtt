WEBVTT
Kind: captions
Language: en

00:00:00.835 --> 00:00:02.138
Voiceover: Cryptographic hash functions

00:00:02.138 --> 00:00:04.199
are basically fundamental building blocks

00:00:04.199 --> 00:00:07.201
that are used within many
cryptographic algorithms

00:00:07.201 --> 00:00:08.051
and protocols,

00:00:08.051 --> 00:00:09.631
and they have a number of very important

00:00:09.631 --> 00:00:13.090
applications in the context
of information security

00:00:13.090 --> 00:00:14.577
as a whole.

00:00:14.577 --> 00:00:16.135
Now, some of the more common algorithms

00:00:16.135 --> 00:00:17.575
in this category that are known

00:00:17.575 --> 00:00:20.119
as cryptographic has functions include:

00:00:20.119 --> 00:00:22.848
things like MD5, and also,

00:00:22.848 --> 00:00:26.438
it has some predecessors
like MD4 and others,

00:00:26.438 --> 00:00:29.877
as well as algorithms like SHA-256,

00:00:29.877 --> 00:00:32.941
and actually, SHA-256 is preceded

00:00:32.941 --> 00:00:36.822
by other algorithms like SHA-1 and so on,

00:00:36.822 --> 00:00:38.645
and also there are some algorithms

00:00:38.645 --> 00:00:40.668
that maybe you've heard of,

00:00:40.668 --> 00:00:42.543
or maybe that are a bit lesser known,

00:00:42.543 --> 00:00:45.040
but things like RIPEMD,
and BLAKE, and Skein,

00:00:45.040 --> 00:00:46.109
and others.

00:00:46.109 --> 00:00:48.543
Now, cryptographic hash
functions are basically

00:00:48.543 --> 00:00:52.090
used as critical building
blocks in many applications,

00:00:52.090 --> 00:00:54.671
and really the first
motivating application,

00:00:54.671 --> 00:00:56.751
the first historical application

00:00:56.751 --> 00:00:58.591
of these types of hash functions

00:00:58.591 --> 00:01:00.922
was in the context of what's known

00:01:00.922 --> 00:01:03.198
as a digital signature,

00:01:03.198 --> 00:01:05.735
and digital signatures are
used in so many different

00:01:05.735 --> 00:01:07.838
cryptographic applications today.

00:01:07.838 --> 00:01:09.759
They're the cornerstone of many

00:01:09.759 --> 00:01:11.572
ecommerce protocols.

00:01:11.572 --> 00:01:14.255
They are used in doing things
like bitcoin generation

00:01:14.255 --> 00:01:15.593
and so on.

00:01:15.593 --> 00:01:17.326
Cryptographic has functions are also used

00:01:17.326 --> 00:01:20.569
in things like message
authentication protocols,

00:01:20.569 --> 00:01:22.810
in pseudorandom number generation

00:01:22.810 --> 00:01:24.589
and password security,

00:01:24.589 --> 00:01:26.903
even encryption to some degree.

00:01:26.903 --> 00:01:30.820
In fact, aside from their
use in digital signatures,

00:01:30.820 --> 00:01:33.069
these hash functions are
also used in other places

00:01:33.069 --> 00:01:35.738
in the bitcoin protocol as well.

00:01:35.738 --> 00:01:37.082
First of all, let me talk about

00:01:37.082 --> 00:01:39.986
what a cryptographic hash
function actually is,

00:01:39.986 --> 00:01:42.036
and of course, as the name implies,

00:01:42.036 --> 00:01:43.284
the first thing it is,

00:01:43.284 --> 00:01:44.651
it's a hash function.

00:01:44.651 --> 00:01:45.546
And by hash function,

00:01:45.546 --> 00:01:48.601
I basically mean that it will take input.

00:01:48.601 --> 00:01:49.889
It's a mathematical function,

00:01:49.889 --> 00:01:51.655
a transformation, if you will,

00:01:51.655 --> 00:01:54.101
that takes a particular input,

00:01:54.101 --> 00:01:57.432
and we call this input a message,

00:01:57.432 --> 00:01:59.864
and the message can be
of arbitrary length,

00:01:59.864 --> 00:02:01.990
and the hash function basically applies

00:02:01.990 --> 00:02:04.442
a mathematical transformation,

00:02:04.442 --> 00:02:06.460
or maybe a set of
mathematical transformations

00:02:06.460 --> 00:02:09.281
to this input to produce a single output,

00:02:09.281 --> 00:02:11.861
and we typically call
this output a digest,

00:02:11.861 --> 00:02:13.698
although, sometimes you will see

00:02:13.698 --> 00:02:17.597
the output referred to
as a tag, or as a hash,

00:02:17.597 --> 00:02:19.223
or as a fingerprint,

00:02:19.223 --> 00:02:22.112
but digest is sort of the
most common nomenclature.

00:02:22.112 --> 00:02:24.274
In fact, MD5, which was

00:02:24.274 --> 00:02:26.605
one of the earlier hash functions,

00:02:26.605 --> 00:02:29.370
stands for message digest 5,

00:02:29.370 --> 00:02:30.935
and MD4 was message digest 4,

00:02:30.935 --> 00:02:32.781
and so on, and so forth.

00:02:32.781 --> 00:02:35.543
Now, the message, as I mentioned briefly

00:02:35.543 --> 00:02:36.843
can be of arbitrary size.

00:02:36.843 --> 00:02:38.488
It can be as long as you want,

00:02:38.488 --> 00:02:40.360
or as short as you want,

00:02:40.360 --> 00:02:41.214
but the output,

00:02:41.214 --> 00:02:44.108
the size of the digest
or the size of the tag,

00:02:44.108 --> 00:02:45.783
is going to be fixed in length,

00:02:45.783 --> 00:02:48.221
and for example, in the
context of a hash function

00:02:48.221 --> 00:02:50.777
like, let's say, SHA-256,

00:02:50.777 --> 00:02:56.114
the digest will actually be
exactly 256 bits in length.

00:02:56.114 --> 00:02:57.917
It's going to have a fixed-length output,

00:02:57.917 --> 00:03:01.654
but an arbitrary-length input.

00:03:01.654 --> 00:03:02.626
The other thing I want to point out

00:03:02.626 --> 00:03:04.445
about these cryptographic hash functions

00:03:04.445 --> 00:03:06.943
is that the function here
is a deterministic function,

00:03:06.943 --> 00:03:07.712
and by that, I mean

00:03:07.712 --> 00:03:11.281
that the output will always be the same

00:03:11.281 --> 00:03:12.365
for a given input,

00:03:12.365 --> 00:03:14.112
so if you have a given input,

00:03:14.112 --> 00:03:15.490
you're going to see the exact same output.

00:03:15.490 --> 00:03:17.112
You won't have a
situation in which, maybe,

00:03:17.112 --> 00:03:19.344
a given input will have two
different possible outputs.

00:03:19.344 --> 00:03:21.698
It's going to be consistent.

00:03:21.698 --> 00:03:25.151
Now, traditional hash functions have been

00:03:25.151 --> 00:03:27.841
used in computer science
for quite some time,

00:03:27.841 --> 00:03:29.115
and they are used in many

00:03:29.115 --> 00:03:30.156
computing applications,

00:03:30.156 --> 00:03:31.506
so, for example, you may
have heard of something

00:03:31.506 --> 00:03:33.065
like a hash function used in something

00:03:33.065 --> 00:03:34.973
called a hash table,

00:03:34.973 --> 00:03:37.255
but the kinds of hash
functions that are used

00:03:37.255 --> 00:03:39.935
in hash tables, and I want to stress this,

00:03:39.935 --> 00:03:42.396
they aren't necessarily the same

00:03:42.396 --> 00:03:44.530
as cryptographic hash functions.

00:03:44.530 --> 00:03:48.159
The qualifier "cryptographic"
here is very important,

00:03:48.159 --> 00:03:50.964
and it usually means or implies that

00:03:50.964 --> 00:03:53.695
that hash function has
to have a certain set

00:03:53.695 --> 00:03:56.656
of critical design goals and maybe some

00:03:56.656 --> 00:03:57.988
particular properties in mind

00:03:57.988 --> 00:04:00.209
that make it suitable for use

00:04:00.209 --> 00:04:02.109
in applications that use cryptography

00:04:02.109 --> 00:04:03.397
or cryptographic applications,

00:04:03.397 --> 00:04:06.646
areas where perhaps security or privacy

00:04:06.646 --> 00:04:08.639
or confidentiality or authentications

00:04:08.639 --> 00:04:11.596
are a serious concern.

00:04:11.596 --> 00:04:12.354
First and foremost,

00:04:12.354 --> 00:04:13.986
maybe in describing
some of these properties

00:04:13.986 --> 00:04:17.090
is that, and maybe this
almost goes without saying,

00:04:17.090 --> 00:04:18.599
one of the first properties you want

00:04:18.599 --> 00:04:19.828
of a cryptographic hash function

00:04:19.828 --> 00:04:24.544
is that it should be
computationally efficient,

00:04:24.544 --> 00:04:27.213
and by that, I mean that it
shouldn't take a lot of time

00:04:27.213 --> 00:04:30.882
to compute the output from a given input.

00:04:30.882 --> 00:04:32.588
If you're given a message

00:04:32.588 --> 00:04:34.900
and you want to apply this
set of transformations

00:04:34.900 --> 00:04:37.332
to that message to get a digest,

00:04:37.332 --> 00:04:40.560
that set of transformation
should not take a long time

00:04:40.560 --> 00:04:41.888
to implement on a computer.

00:04:41.888 --> 00:04:43.907
It should be very fast,
or relatively fast.

00:04:43.907 --> 00:04:45.049
It almost goes without saying,

00:04:45.049 --> 00:04:47.327
but I think it's important
to stress and point it out

00:04:47.327 --> 00:04:49.402
because I've seen people come up

00:04:49.402 --> 00:04:51.714
with grossly inefficient
hash functions sometimes,

00:04:51.714 --> 00:04:54.007
and those would not be considered suitable

00:04:54.007 --> 00:04:56.548
in the context of when typical

00:04:56.548 --> 00:04:58.087
cryptographic hash functions are used

00:04:58.087 --> 00:05:01.210
for cryptographic applications.

00:05:01.210 --> 00:05:02.865
The second property you typically need

00:05:02.865 --> 00:05:03.627
in the context,

00:05:03.627 --> 00:05:06.647
and this is especially in the
context of digital signing,

00:05:06.647 --> 00:05:08.261
is that you want it to be the case

00:05:08.261 --> 00:05:11.768
that it's hard to find two
inputs that actually map

00:05:11.768 --> 00:05:12.802
to the same output,

00:05:12.802 --> 00:05:14.438
and I mean two distinct inputs

00:05:14.438 --> 00:05:17.920
whose corresponding digest is identical.

00:05:17.920 --> 00:05:20.460
This property is typically referred to as

00:05:20.460 --> 00:05:24.355
collision resistance.

00:05:24.355 --> 00:05:28.798
That means it's hard to find
a colliding pair of input,

00:05:28.798 --> 00:05:30.886
so in other words, if you have two inputs

00:05:30.886 --> 00:05:32.518
and let's say you have a message M1,

00:05:32.518 --> 00:05:34.981
and you have a message M2,

00:05:34.981 --> 00:05:36.674
their output under the application

00:05:36.674 --> 00:05:40.174
of the hash function
should not be the same.

00:05:40.174 --> 00:05:42.529
You won't ever have it
be the same that the,

00:05:42.529 --> 00:05:44.133
you won't even have it
be the case, rather,

00:05:44.133 --> 00:05:46.206
that the output of M1 and M2

00:05:46.206 --> 00:05:47.907
under an application of the hash function

00:05:47.907 --> 00:05:48.872
is the same.

00:05:48.872 --> 00:05:50.207
They should never be the same.

00:05:50.207 --> 00:05:52.145
It should always be different.

00:05:52.145 --> 00:05:54.301
Now, I should take a step back here

00:05:54.301 --> 00:05:57.879
and point out that of course in practice,

00:05:57.879 --> 00:06:00.304
given that messages can
be of arbitrary size

00:06:00.304 --> 00:06:03.280
and given that the input
or the output, rather,

00:06:03.280 --> 00:06:04.945
is a fixed size,

00:06:04.945 --> 00:06:08.903
it's not mathematically
possible to guarantee

00:06:08.903 --> 00:06:11.402
that the output will always be different

00:06:11.402 --> 00:06:13.039
for two distinct messages,

00:06:13.039 --> 00:06:15.205
but what you typically want
is not that the outputs

00:06:15.205 --> 00:06:16.734
are necessarily different,

00:06:16.734 --> 00:06:19.707
but that it's hard to
find two distinct messages

00:06:19.707 --> 00:06:21.436
that produce the same output.

00:06:21.436 --> 00:06:23.159
We know they exist by virtue of the fact

00:06:23.159 --> 00:06:25.441
that there are many
messages that can be hash,

00:06:25.441 --> 00:06:28.287
and only a finite, small number,

00:06:28.287 --> 00:06:29.508
relatively small number compared to

00:06:29.508 --> 00:06:30.839
the number of messages,

00:06:30.839 --> 00:06:34.166
a smaller number of
possible digest values,

00:06:34.166 --> 00:06:36.602
but aside from that consideration,

00:06:36.602 --> 00:06:38.869
it should be hard. It
should take a long time,

00:06:38.869 --> 00:06:42.206
and by long, I mean an
astromonically long time

00:06:42.206 --> 00:06:45.011
to find two distinct
messages that would result

00:06:45.011 --> 00:06:47.047
in the same output

00:06:47.047 --> 00:06:51.397
under the application
of the hash function.

00:06:51.397 --> 00:06:52.902
Now, the third thing
that I want to point out

00:06:52.902 --> 00:06:55.706
is that in many cases, you might want,

00:06:55.706 --> 00:06:57.427
also, in the context of a hash function,

00:06:57.427 --> 00:06:59.638
for the hash function to be able to hide

00:06:59.638 --> 00:07:01.585
information about the inputs.

00:07:01.585 --> 00:07:02.375
In other words,

00:07:02.375 --> 00:07:06.186
given the output,

00:07:06.186 --> 00:07:08.922
it should be hard to glean anything useful

00:07:08.922 --> 00:07:11.756
or interesting about the input.

00:07:11.756 --> 00:07:13.615
Anything, any relevant detail,

00:07:13.615 --> 00:07:15.323
and I don't just mean the whole input,

00:07:15.323 --> 00:07:16.891
but maybe even something as simple as

00:07:16.891 --> 00:07:19.384
was the input an even
number or an odd number?

00:07:19.384 --> 00:07:20.343
I mean, that should be the kind of thing

00:07:20.343 --> 00:07:24.357
that should be hard to infer
when you see the output,

00:07:24.357 --> 00:07:26.401
even something as simple as the,

00:07:27.631 --> 00:07:30.648
the evenness or oddness of the input.

00:07:30.648 --> 00:07:32.571
Now, a fourth property I want to point out

00:07:32.571 --> 00:07:35.584
is that you typically
want the output to be

00:07:36.153 --> 00:07:37.559
well distributed.

00:07:37.559 --> 00:07:38.158
In other words,

00:07:38.158 --> 00:07:43.358
the output should look random.

00:07:43.358 --> 00:07:44.545
In other words, it should look

00:07:44.545 --> 00:07:46.395
like a set of coin flips took place,

00:07:46.395 --> 00:07:49.149
not that there was a predictable way

00:07:49.902 --> 00:07:53.515
in which the output was created.

00:07:54.146 --> 00:07:55.586
Really, what that means is that,

00:07:55.586 --> 00:07:57.454
and you can think of it
maybe more conceptually as

00:07:57.454 --> 00:07:59.473
it's almost as if you
flipped a bunch of coins

00:07:59.473 --> 00:08:00.426
to get to the output.

00:08:00.426 --> 00:08:02.808
It should look just that random.

00:08:02.808 --> 00:08:04.123
And so what you can maybe think of

00:08:04.123 --> 00:08:05.838
cryptographic hash functions as,

00:08:05.838 --> 00:08:07.994
as it's, perhaps, maybe
the mathematical equivalent

00:08:07.994 --> 00:08:11.237
or mathematical analog of
a meat grinder of sort.

00:08:11.237 --> 00:08:12.724
It can take inputs and apply

00:08:12.724 --> 00:08:15.807
these mathematical transformations to them

00:08:15.807 --> 00:08:18.169
such that the output looks,

00:08:18.169 --> 00:08:19.745
for all intents and purposes,

00:08:19.745 --> 00:08:21.406
completely random and unrelated

00:08:21.406 --> 00:08:23.979
to the original input.

00:08:23.979 --> 00:08:25.548
I do want to make a few quick remarks

00:08:25.548 --> 00:08:28.019
about these particular properties,

00:08:28.019 --> 00:08:31.132
and first of all, they are interrelated.

00:08:31.132 --> 00:08:33.014
For example, if you have a situation

00:08:33.014 --> 00:08:34.581
where the outputs, let's say,

00:08:34.581 --> 00:08:37.660
really appear to bear no
relationship to the input

00:08:37.660 --> 00:08:40.127
and the outputs also look random,

00:08:40.127 --> 00:08:42.596
then that will, in fact,
give you to a large degree,

00:08:42.596 --> 00:08:44.694
a lot of the collision
resistance properties

00:08:44.694 --> 00:08:46.842
because just the fact that you can't

00:08:46.842 --> 00:08:47.754
predict the output

00:08:47.754 --> 00:08:49.933
and the fact that it
hides all this information

00:08:49.933 --> 00:08:52.754
implies that it's going to be hard to find

00:08:52.754 --> 00:08:54.098
two inputs that are distinct

00:08:54.098 --> 00:08:55.993
that map to the same output.

00:08:55.993 --> 00:08:57.245
And so sometimes, you get one property

00:08:57.245 --> 00:08:59.097
in exchange for the others.

00:08:59.097 --> 00:09:00.083
The second thing I want to point out

00:09:00.083 --> 00:09:03.160
is that typically, these
properties in practice,

00:09:03.160 --> 00:09:05.775
or maybe in the underlying mathematics,

00:09:05.775 --> 00:09:07.626
are things that you hope for

00:09:07.626 --> 00:09:09.753
but you can't always guarantee

00:09:09.753 --> 00:09:11.426
that they'll always hold,

00:09:11.426 --> 00:09:14.158
and it may be entirely possible that

00:09:14.158 --> 00:09:15.363
you could design a hash function

00:09:15.363 --> 00:09:18.506
that you think is completely
collision resistant,

00:09:18.506 --> 00:09:20.817
but someone might come
along a year from now

00:09:20.817 --> 00:09:23.420
and come up with a more
clever way for finding

00:09:23.420 --> 00:09:23.983
a collision.

00:09:23.983 --> 00:09:25.217
Maybe they'll find a clever shortcut

00:09:25.217 --> 00:09:28.001
that does not involve
doing a brute force search

00:09:28.001 --> 00:09:29.265
of any sort.

00:09:29.265 --> 00:09:31.155
It turns out that cryptographers,

00:09:31.155 --> 00:09:34.128
for better or worse currently do not have

00:09:34.512 --> 00:09:35.895
any mathematical techniques.

00:09:35.895 --> 00:09:37.500
They haven't developed
techniques for being able

00:09:37.500 --> 00:09:40.118
to work around some of these limitations.

00:09:40.118 --> 00:09:43.824
So we often do take it on face value

00:09:43.824 --> 00:09:45.191
that these schemes are secure

00:09:45.191 --> 00:09:48.207
based on how long they've been around.

00:09:48.207 --> 00:09:49.464
Now, I also want to point out,

00:09:49.464 --> 00:09:50.459
and the last thing I want to point out,

00:09:50.459 --> 00:09:51.873
is that this treatment that I've given

00:09:51.873 --> 00:09:53.996
is not meant to be mathematically rigorous

00:09:53.996 --> 00:09:55.763
by any stretch of the imagination.

00:09:55.763 --> 00:09:59.503
There are far more
precise ways to describe

00:09:59.503 --> 00:10:01.172
these underlying properties,

00:10:01.172 --> 00:10:03.273
but my hope, instead, is that

00:10:03.273 --> 00:10:05.921
this video gives you,
maybe, a bit of a flavor

00:10:05.921 --> 00:10:08.634
for what is required of a
cryptographic hash function

00:10:08.634 --> 00:10:11.164
without maybe getting
bogged down in some of the

00:10:11.164 --> 00:10:13.520
mathematical minutia and formalism.

