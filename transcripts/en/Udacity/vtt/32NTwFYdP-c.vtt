WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
Even if you do have dependencies and assertions

00:00:04.000 --> 00:00:07.000
that help you rule out large parts of state,

00:00:07.000 --> 00:00:13.000
you may still end up with a multitude of individual origins

00:00:13.000 --> 00:00:17.000
where a specific infection may come from.

00:00:17.000 --> 00:00:21.000
While you can rule them out one after the other using the scientific method,

00:00:21.000 --> 00:00:26.000
the question is of these origins are you going to look at first?

00:00:26.000 --> 00:00:29.000
The idea is to look at the most likely origins first.

00:00:29.000 --> 00:00:33.000
The question is what is a likely origin.

00:00:33.000 --> 00:00:36.000
What possible origin should I look at first?

00:00:36.000 --> 00:00:39.000
Here are a few guidelines: First and foremost, infections.

00:00:39.000 --> 00:00:42.000
If you know that some origin is wrong, go for it.

00:00:42.000 --> 00:00:44.000
Next is causes.

00:00:44.000 --> 00:00:47.000
If you know that some state causes the failure,

00:00:47.000 --> 00:00:49.000
because you can change it to another value.

00:00:49.000 --> 00:00:51.000
Such if the failure goes away, .

00:00:51.000 --> 00:00:54.000
which is something you can find out through Delta Debugging, for instance,

00:00:54.000 --> 00:00:56.000
follow it.

00:00:56.000 --> 00:00:59.000
Next up: Code smells--If you suspect some code to be wrong,

00:00:59.000 --> 00:01:02.000
or you have gotten warnings from a static checker, go for it.

00:01:02.000 --> 00:01:04.000
Next up is bug history.

00:01:04.000 --> 00:01:06.000
If you know that some piece of code

00:01:06.000 --> 00:01:09.000
has gotten a lot of problem reports lately,

00:01:09.000 --> 00:01:13.000
chances are what you're looking at will be another problem report.

00:01:13.000 --> 00:01:15.000
Next up is last changes.

00:01:15.000 --> 00:01:20.000
Code that has changed recently is way more likely to have errors.

00:01:20.000 --> 00:01:24.000
So go for code which has recently changed,

00:01:24.000 --> 00:01:28.000
and go for the state that comes out of this code.

00:01:28.000 --> 00:01:31.000
Finally, anomalies.

00:01:31.000 --> 00:01:35.000
If some code shows abnormal behavior before reaching the failure,

00:01:35.000 --> 00:01:39.000
for instance, by producing a log entry,

00:01:39.000 --> 00:01:41.000
follow this one as well.

00:01:41.000 --> 00:01:45.000
Of all these features infections are the strongest,

00:01:45.000 --> 00:01:48.000
because they are sure indicators of errors,

00:01:48.000 --> 00:01:51.000
followed by causes.

00:01:51.000 --> 00:01:58.000
Any cause implies a way to possibly work around the failure.

00:01:58.000 --> 00:02:01.000
As far as the others are concerned though,

00:02:01.000 --> 00:02:05.000
this is up to you and the specific project.

00:02:05.000 --> 00:02:08.000
In fact, this is where your knowledge about

00:02:08.000 --> 00:02:14.000
the specific project and its domain and the code comes into play.

00:02:14.000 --> 00:02:21.000
Being able to specifically focus on the most likely sources of a bug

00:02:21.000 --> 00:02:23.000
makes you a debugging expert for the specific project.

