WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.929
 
welcome back vectorization is basically

00:00:02.929 --> 00:00:02.939
welcome back vectorization is basically
 

00:00:02.939 --> 00:00:05.900
welcome back vectorization is basically
the odds of getting rid of explicit for

00:00:05.900 --> 00:00:05.910
the odds of getting rid of explicit for
 

00:00:05.910 --> 00:00:08.509
the odds of getting rid of explicit for
loops in your code in the deep learning

00:00:08.509 --> 00:00:08.519
loops in your code in the deep learning
 

00:00:08.519 --> 00:00:10.970
loops in your code in the deep learning
error surfing in deep learning in

00:00:10.970 --> 00:00:10.980
error surfing in deep learning in
 

00:00:10.980 --> 00:00:12.650
error surfing in deep learning in
practice you often find yourself

00:00:12.650 --> 00:00:12.660
practice you often find yourself
 

00:00:12.660 --> 00:00:14.749
practice you often find yourself
training on gods of these large data

00:00:14.749 --> 00:00:14.759
training on gods of these large data
 

00:00:14.759 --> 00:00:16.580
training on gods of these large data
sets because that's when deep learning

00:00:16.580 --> 00:00:16.590
sets because that's when deep learning
 

00:00:16.590 --> 00:00:19.580
sets because that's when deep learning
algorithms tend to shine and so it's

00:00:19.580 --> 00:00:19.590
algorithms tend to shine and so it's
 

00:00:19.590 --> 00:00:21.349
algorithms tend to shine and so it's
important that your code run quickly

00:00:21.349 --> 00:00:21.359
important that your code run quickly
 

00:00:21.359 --> 00:00:23.540
important that your code run quickly
because otherwise if you're training on

00:00:23.540 --> 00:00:23.550
because otherwise if you're training on
 

00:00:23.550 --> 00:00:25.700
because otherwise if you're training on
a big data set your code may take a long

00:00:25.700 --> 00:00:25.710
a big data set your code may take a long
 

00:00:25.710 --> 00:00:27.080
a big data set your code may take a long
time to run you just find yourself

00:00:27.080 --> 00:00:27.090
time to run you just find yourself
 

00:00:27.090 --> 00:00:29.720
time to run you just find yourself
waiting a very long time to get a result

00:00:29.720 --> 00:00:29.730
waiting a very long time to get a result
 

00:00:29.730 --> 00:00:32.420
waiting a very long time to get a result
so in the deep learning error I think

00:00:32.420 --> 00:00:32.430
so in the deep learning error I think
 

00:00:32.430 --> 00:00:35.840
so in the deep learning error I think
the ability to perform vectorization has

00:00:35.840 --> 00:00:35.850
the ability to perform vectorization has
 

00:00:35.850 --> 00:00:38.180
the ability to perform vectorization has
become a key skill let's start with an

00:00:38.180 --> 00:00:38.190
become a key skill let's start with an
 

00:00:38.190 --> 00:00:42.369
become a key skill let's start with an
example so what is vectorization in

00:00:42.369 --> 00:00:42.379
example so what is vectorization in
 

00:00:42.379 --> 00:00:45.020
example so what is vectorization in
logistic regression you need to compute

00:00:45.020 --> 00:00:45.030
logistic regression you need to compute
 

00:00:45.030 --> 00:00:49.580
logistic regression you need to compute
Z equals W transpose X plus B where W

00:00:49.580 --> 00:00:49.590
Z equals W transpose X plus B where W
 

00:00:49.590 --> 00:00:53.330
Z equals W transpose X plus B where W
was this you know column vector and X is

00:00:53.330 --> 00:00:53.340
was this you know column vector and X is
 

00:00:53.340 --> 00:00:56.209
was this you know column vector and X is
also this vector maybe they're very

00:00:56.209 --> 00:00:56.219
also this vector maybe they're very
 

00:00:56.219 --> 00:00:57.560
also this vector maybe they're very
large vectors if you have a lot of

00:00:57.560 --> 00:00:57.570
large vectors if you have a lot of
 

00:00:57.570 --> 00:01:01.430
large vectors if you have a lot of
features so W and X will go from these

00:01:01.430 --> 00:01:01.440
features so W and X will go from these
 

00:01:01.440 --> 00:01:07.550
features so W and X will go from these
are n or R and X dimensional vectors so

00:01:07.550 --> 00:01:07.560
are n or R and X dimensional vectors so
 

00:01:07.560 --> 00:01:11.530
are n or R and X dimensional vectors so
to compute W transpose X if you had a

00:01:11.530 --> 00:01:11.540
to compute W transpose X if you had a
 

00:01:11.540 --> 00:01:16.160
to compute W transpose X if you had a
non vectorized implementation you would

00:01:16.160 --> 00:01:16.170
non vectorized implementation you would
 

00:01:16.170 --> 00:01:19.130
non vectorized implementation you would
do something like z equals 0 and then

00:01:19.130 --> 00:01:19.140
do something like z equals 0 and then
 

00:01:19.140 --> 00:01:25.700
do something like z equals 0 and then
for I in range of and X so for I equals

00:01:25.700 --> 00:01:25.710
for I in range of and X so for I equals
 

00:01:25.710 --> 00:01:32.120
for I in range of and X so for I equals
1 to n X Z plus equals W I you know

00:01:32.120 --> 00:01:32.130
1 to n X Z plus equals W I you know
 

00:01:32.130 --> 00:01:35.929
1 to n X Z plus equals W I you know
times X I and then maybe you do Z plus

00:01:35.929 --> 00:01:35.939
times X I and then maybe you do Z plus
 

00:01:35.939 --> 00:01:37.670
times X I and then maybe you do Z plus
equals B at the N so that's a non

00:01:37.670 --> 00:01:37.680
equals B at the N so that's a non
 

00:01:37.680 --> 00:01:40.310
equals B at the N so that's a non
vectorized implementation and you find

00:01:40.310 --> 00:01:40.320
vectorized implementation and you find
 

00:01:40.320 --> 00:01:43.100
vectorized implementation and you find
that that's going to be really slow in

00:01:43.100 --> 00:01:43.110
that that's going to be really slow in
 

00:01:43.110 --> 00:01:45.560
that that's going to be really slow in
contrasted vectorized implementation we

00:01:45.560 --> 00:01:45.570
contrasted vectorized implementation we
 

00:01:45.570 --> 00:01:49.810
contrasted vectorized implementation we
just compute W transpose X directly in

00:01:49.810 --> 00:01:49.820
just compute W transpose X directly in
 

00:01:49.820 --> 00:01:53.030
just compute W transpose X directly in
Python or a numpy the command is used

00:01:53.030 --> 00:01:53.040
Python or a numpy the command is used
 

00:01:53.040 --> 00:02:02.480
Python or a numpy the command is used
for that is Z equals NP m dot W comma X

00:02:02.480 --> 00:02:02.490
for that is Z equals NP m dot W comma X
 

00:02:02.490 --> 00:02:04.960
for that is Z equals NP m dot W comma X
so this computes W

00:02:04.960 --> 00:02:04.970
so this computes W
 

00:02:04.970 --> 00:02:08.170
so this computes W
stalls X and you can also just add B to

00:02:08.170 --> 00:02:08.180
stalls X and you can also just add B to
 

00:02:08.180 --> 00:02:10.300
stalls X and you can also just add B to
that directly and you find that this is

00:02:10.300 --> 00:02:10.310
that directly and you find that this is
 

00:02:10.310 --> 00:02:14.170
that directly and you find that this is
much faster that's actually illustrate

00:02:14.170 --> 00:02:14.180
much faster that's actually illustrate
 

00:02:14.180 --> 00:02:17.350
much faster that's actually illustrate
this with a little demo alright so

00:02:17.350 --> 00:02:17.360
this with a little demo alright so
 

00:02:17.360 --> 00:02:20.200
this with a little demo alright so
here's my Jupiter notebook in which I'm

00:02:20.200 --> 00:02:20.210
here's my Jupiter notebook in which I'm
 

00:02:20.210 --> 00:02:22.360
here's my Jupiter notebook in which I'm
going to write some Python code so first

00:02:22.360 --> 00:02:22.370
going to write some Python code so first
 

00:02:22.370 --> 00:02:26.620
going to write some Python code so first
let me import the numpy library so

00:02:26.620 --> 00:02:26.630
let me import the numpy library so
 

00:02:26.630 --> 00:02:30.280
let me import the numpy library so
import 17 and so for example I can

00:02:30.280 --> 00:02:30.290
import 17 and so for example I can
 

00:02:30.290 --> 00:02:36.900
import 17 and so for example I can
create a as in array as follows or on

00:02:36.900 --> 00:02:36.910
create a as in array as follows or on
 

00:02:36.910 --> 00:02:40.150
create a as in array as follows or on
let's say print a now having written

00:02:40.150 --> 00:02:40.160
let's say print a now having written
 

00:02:40.160 --> 00:02:42.540
let's say print a now having written
this chunk of code if I hit shift enter

00:02:42.540 --> 00:02:42.550
this chunk of code if I hit shift enter
 

00:02:42.550 --> 00:02:45.460
this chunk of code if I hit shift enter
then it executes the code so it created

00:02:45.460 --> 00:02:45.470
then it executes the code so it created
 

00:02:45.470 --> 00:02:48.070
then it executes the code so it created
the array a and it prints it out now

00:02:48.070 --> 00:02:48.080
the array a and it prints it out now
 

00:02:48.080 --> 00:02:50.830
the array a and it prints it out now
unless do the vectorization demo then

00:02:50.830 --> 00:02:50.840
unless do the vectorization demo then
 

00:02:50.840 --> 00:02:52.720
unless do the vectorization demo then
import the time libraries I'm going to

00:02:52.720 --> 00:02:52.730
import the time libraries I'm going to
 

00:02:52.730 --> 00:02:55.090
import the time libraries I'm going to
use that in order to time how long

00:02:55.090 --> 00:02:55.100
use that in order to time how long
 

00:02:55.100 --> 00:02:57.130
use that in order to time how long
different operations take I'm going to

00:02:57.130 --> 00:02:57.140
different operations take I'm going to
 

00:02:57.140 --> 00:03:01.750
different operations take I'm going to
create an array a this was random not R

00:03:01.750 --> 00:03:01.760
create an array a this was random not R
 

00:03:01.760 --> 00:03:06.699
create an array a this was random not R
and this create a million dimensional

00:03:06.699 --> 00:03:06.709
and this create a million dimensional
 

00:03:06.709 --> 00:03:09.880
and this create a million dimensional
array it was random there the values

00:03:09.880 --> 00:03:09.890
array it was random there the values
 

00:03:09.890 --> 00:03:13.110
array it was random there the values
vehicles and pins are random dot R and

00:03:13.110 --> 00:03:13.120
vehicles and pins are random dot R and
 

00:03:13.120 --> 00:03:15.759
vehicles and pins are random dot R and
another million dimensional array and

00:03:15.759 --> 00:03:15.769
another million dimensional array and
 

00:03:15.769 --> 00:03:19.300
another million dimensional array and
now ticking equals x or x so let's

00:03:19.300 --> 00:03:19.310
now ticking equals x or x so let's
 

00:03:19.310 --> 00:03:23.820
now ticking equals x or x so let's
measure the current time c equals NP dot

00:03:23.820 --> 00:03:23.830
measure the current time c equals NP dot
 

00:03:23.830 --> 00:03:29.340
measure the current time c equals NP dot
ad let's see talk equals x our time and

00:03:29.340 --> 00:03:29.350
ad let's see talk equals x our time and
 

00:03:29.350 --> 00:03:33.820
ad let's see talk equals x our time and
let's print this is the vectorized

00:03:33.820 --> 00:03:33.830
let's print this is the vectorized
 

00:03:33.830 --> 00:03:37.620
let's print this is the vectorized
version right so vectorize version and

00:03:37.620 --> 00:03:37.630
version right so vectorize version and
 

00:03:37.630 --> 00:03:44.170
version right so vectorize version and
so let's print out armed let's see the

00:03:44.170 --> 00:03:44.180
so let's print out armed let's see the
 

00:03:44.180 --> 00:03:48.490
so let's print out armed let's see the
last time so let's talk - tick x 1000 so

00:03:48.490 --> 00:03:48.500
last time so let's talk - tick x 1000 so
 

00:03:48.500 --> 00:03:52.000
last time so let's talk - tick x 1000 so
that we can express this in milliseconds

00:03:52.000 --> 00:03:52.010
that we can express this in milliseconds
 

00:03:52.010 --> 00:03:54.580
that we can express this in milliseconds
so unless there's more seconds okay so

00:03:54.580 --> 00:03:54.590
so unless there's more seconds okay so
 

00:03:54.590 --> 00:03:56.890
so unless there's more seconds okay so
I'm going to hit shift enter okay so

00:03:56.890 --> 00:03:56.900
I'm going to hit shift enter okay so
 

00:03:56.900 --> 00:04:00.729
I'm going to hit shift enter okay so
that code took about 3 milliseconds or

00:04:00.729 --> 00:04:00.739
that code took about 3 milliseconds or
 

00:04:00.739 --> 00:04:03.460
that code took about 3 milliseconds or
this time 1.5 okay it may be about 1.5

00:04:03.460 --> 00:04:03.470
this time 1.5 okay it may be about 1.5
 

00:04:03.470 --> 00:04:05.740
this time 1.5 okay it may be about 1.5
or 3.5 over seconds at time

00:04:05.740 --> 00:04:05.750
or 3.5 over seconds at time
 

00:04:05.750 --> 00:04:07.810
or 3.5 over seconds at time
so you know it varies a little bit as I

00:04:07.810 --> 00:04:07.820
so you know it varies a little bit as I
 

00:04:07.820 --> 00:04:09.460
so you know it varies a little bit as I
run it looks like maybe on average

00:04:09.460 --> 00:04:09.470
run it looks like maybe on average
 

00:04:09.470 --> 00:04:12.730
run it looks like maybe on average
taking like 1.5 milliseconds maybe 2

00:04:12.730 --> 00:04:12.740
taking like 1.5 milliseconds maybe 2
 

00:04:12.740 --> 00:04:16.000
taking like 1.5 milliseconds maybe 2
milliseconds as I as I run this alright

00:04:16.000 --> 00:04:16.010
milliseconds as I as I run this alright
 

00:04:16.010 --> 00:04:18.550
milliseconds as I as I run this alright
um let's keep adding to this block of

00:04:18.550 --> 00:04:18.560
um let's keep adding to this block of
 

00:04:18.560 --> 00:04:20.920
um let's keep adding to this block of
code so let's now implement a non

00:04:20.920 --> 00:04:20.930
code so let's now implement a non
 

00:04:20.930 --> 00:04:23.200
code so let's now implement a non
vectorized version let's say C equals

00:04:23.200 --> 00:04:23.210
vectorized version let's say C equals
 

00:04:23.210 --> 00:04:28.120
vectorized version let's say C equals
zero then x equals x on time and now

00:04:28.120 --> 00:04:28.130
zero then x equals x on time and now
 

00:04:28.130 --> 00:04:30.790
zero then x equals x on time and now
let's implement a formula Phi is range

00:04:30.790 --> 00:04:30.800
let's implement a formula Phi is range
 

00:04:30.800 --> 00:04:36.130
let's implement a formula Phi is range
of 1 million right I've got the number

00:04:36.130 --> 00:04:36.140
of 1 million right I've got the number
 

00:04:36.140 --> 00:04:42.850
of 1 million right I've got the number
of zeros right C plus equals a I times B

00:04:42.850 --> 00:04:42.860
of zeros right C plus equals a I times B
 

00:04:42.860 --> 00:04:49.110
of zeros right C plus equals a I times B
I and then on talking 12 times our time

00:04:49.110 --> 00:04:49.120
I and then on talking 12 times our time
 

00:04:49.120 --> 00:04:55.300
I and then on talking 12 times our time
and finally print you know with an

00:04:55.300 --> 00:04:55.310
and finally print you know with an
 

00:04:55.310 --> 00:04:59.920
and finally print you know with an
explicit for loop um the time it takes

00:04:59.920 --> 00:04:59.930
explicit for loop um the time it takes
 

00:04:59.930 --> 00:05:10.180
explicit for loop um the time it takes
is this 1000 times talk - tick plus 1

00:05:10.180 --> 00:05:10.190
is this 1000 times talk - tick plus 1
 

00:05:10.190 --> 00:05:12.990
is this 1000 times talk - tick plus 1
oops

00:05:12.990 --> 00:05:13.000
oops
 

00:05:13.000 --> 00:05:16.510
oops
m/s just to denote that by doing this in

00:05:16.510 --> 00:05:16.520
m/s just to denote that by doing this in
 

00:05:16.520 --> 00:05:18.940
m/s just to denote that by doing this in
milliseconds okay oh and actually let's

00:05:18.940 --> 00:05:18.950
milliseconds okay oh and actually let's
 

00:05:18.950 --> 00:05:20.830
milliseconds okay oh and actually let's
do one more thing let's just you know

00:05:20.830 --> 00:05:20.840
do one more thing let's just you know
 

00:05:20.840 --> 00:05:23.530
do one more thing let's just you know
print out the value of C we computer to

00:05:23.530 --> 00:05:23.540
print out the value of C we computer to
 

00:05:23.540 --> 00:05:26.260
print out the value of C we computer to
make sure that is the same value in both

00:05:26.260 --> 00:05:26.270
make sure that is the same value in both
 

00:05:26.270 --> 00:05:31.270
make sure that is the same value in both
cases okay so I'm going to hit shift

00:05:31.270 --> 00:05:31.280
cases okay so I'm going to hit shift
 

00:05:31.280 --> 00:05:35.980
cases okay so I'm going to hit shift
enter to run des and check that out so

00:05:35.980 --> 00:05:35.990
enter to run des and check that out so
 

00:05:35.990 --> 00:05:38.440
enter to run des and check that out so
in both cases the vectorized version and

00:05:38.440 --> 00:05:38.450
in both cases the vectorized version and
 

00:05:38.450 --> 00:05:40.240
in both cases the vectorized version and
a non vectorized version computed the

00:05:40.240 --> 00:05:40.250
a non vectorized version computed the
 

00:05:40.250 --> 00:05:43.360
a non vectorized version computed the
same values as you know to 503 six point

00:05:43.360 --> 00:05:43.370
same values as you know to 503 six point
 

00:05:43.370 --> 00:05:47.260
same values as you know to 503 six point
99 to 1 the vectors version took 1 point

00:05:47.260 --> 00:05:47.270
99 to 1 the vectors version took 1 point
 

00:05:47.270 --> 00:05:50.380
99 to 1 the vectors version took 1 point
5 milliseconds the explicit for loot and

00:05:50.380 --> 00:05:50.390
5 milliseconds the explicit for loot and
 

00:05:50.390 --> 00:05:54.730
5 milliseconds the explicit for loot and
non-veterans version took about 400 over

00:05:54.730 --> 00:05:54.740
non-veterans version took about 400 over
 

00:05:54.740 --> 00:05:58.900
non-veterans version took about 400 over
almost 500 milliseconds so the non

00:05:58.900 --> 00:05:58.910
almost 500 milliseconds so the non
 

00:05:58.910 --> 00:06:00.490
almost 500 milliseconds so the non
vectorized version took you know

00:06:00.490 --> 00:06:00.500
vectorized version took you know
 

00:06:00.500 --> 00:06:03.310
vectorized version took you know
something like 300 times longer then the

00:06:03.310 --> 00:06:03.320
something like 300 times longer then the
 

00:06:03.320 --> 00:06:07.180
something like 300 times longer then the
vectorized version right and so what

00:06:07.180 --> 00:06:07.190
vectorized version right and so what
 

00:06:07.190 --> 00:06:09.190
vectorized version right and so what
this example you see that if only you

00:06:09.190 --> 00:06:09.200
this example you see that if only you
 

00:06:09.200 --> 00:06:11.350
this example you see that if only you
remember to vectorize your code your

00:06:11.350 --> 00:06:11.360
remember to vectorize your code your
 

00:06:11.360 --> 00:06:14.060
remember to vectorize your code your
code actually runs 0 over 300 times

00:06:14.060 --> 00:06:14.070
code actually runs 0 over 300 times
 

00:06:14.070 --> 00:06:16.160
code actually runs 0 over 300 times
there yeah well let's just run of the

00:06:16.160 --> 00:06:16.170
there yeah well let's just run of the
 

00:06:16.170 --> 00:06:19.730
there yeah well let's just run of the
game right is run again yeah vectorized

00:06:19.730 --> 00:06:19.740
game right is run again yeah vectorized
 

00:06:19.740 --> 00:06:21.650
game right is run again yeah vectorized
version 1.5 milliseconds and the

00:06:21.650 --> 00:06:21.660
version 1.5 milliseconds and the
 

00:06:21.660 --> 00:06:25.820
version 1.5 milliseconds and the
for-loop so 481 milliseconds so again

00:06:25.820 --> 00:06:25.830
for-loop so 481 milliseconds so again
 

00:06:25.830 --> 00:06:28.220
for-loop so 481 milliseconds so again
about 300 times slower to do the

00:06:28.220 --> 00:06:28.230
about 300 times slower to do the
 

00:06:28.230 --> 00:06:31.190
about 300 times slower to do the
explicit volume so 3x slowdown is the

00:06:31.190 --> 00:06:31.200
explicit volume so 3x slowdown is the
 

00:06:31.200 --> 00:06:32.720
explicit volume so 3x slowdown is the
difference between your code ticking

00:06:32.720 --> 00:06:32.730
difference between your code ticking
 

00:06:32.730 --> 00:06:34.670
difference between your code ticking
maybe one minute to run versus it

00:06:34.670 --> 00:06:34.680
maybe one minute to run versus it
 

00:06:34.680 --> 00:06:38.960
maybe one minute to run versus it
ticking say five hours to run and when

00:06:38.960 --> 00:06:38.970
ticking say five hours to run and when
 

00:06:38.970 --> 00:06:40.610
ticking say five hours to run and when
you are implementing deep learning

00:06:40.610 --> 00:06:40.620
you are implementing deep learning
 

00:06:40.620 --> 00:06:42.470
you are implementing deep learning
algorithms you can really get a result

00:06:42.470 --> 00:06:42.480
algorithms you can really get a result
 

00:06:42.480 --> 00:06:43.880
algorithms you can really get a result
back faster and then being much faster

00:06:43.880 --> 00:06:43.890
back faster and then being much faster
 

00:06:43.890 --> 00:06:47.570
back faster and then being much faster
if you vectorize your code so some of

00:06:47.570 --> 00:06:47.580
if you vectorize your code so some of
 

00:06:47.580 --> 00:06:49.010
if you vectorize your code so some of
you might have heard that a lot of

00:06:49.010 --> 00:06:49.020
you might have heard that a lot of
 

00:06:49.020 --> 00:06:51.800
you might have heard that a lot of
scalable people implementations are done

00:06:51.800 --> 00:06:51.810
scalable people implementations are done
 

00:06:51.810 --> 00:06:54.050
scalable people implementations are done
on a GPU and a graphics processor unit

00:06:54.050 --> 00:06:54.060
on a GPU and a graphics processor unit
 

00:06:54.060 --> 00:06:56.540
on a GPU and a graphics processor unit
but all the demos I did just now in the

00:06:56.540 --> 00:06:56.550
but all the demos I did just now in the
 

00:06:56.550 --> 00:06:59.120
but all the demos I did just now in the
Jupiter notebook were actually on a CPU

00:06:59.120 --> 00:06:59.130
Jupiter notebook were actually on a CPU
 

00:06:59.130 --> 00:07:01.970
Jupiter notebook were actually on a CPU
and it turns out that both GPU and CPUs

00:07:01.970 --> 00:07:01.980
and it turns out that both GPU and CPUs
 

00:07:01.980 --> 00:07:04.610
and it turns out that both GPU and CPUs
have kernelization instructions they're

00:07:04.610 --> 00:07:04.620
have kernelization instructions they're
 

00:07:04.620 --> 00:07:07.160
have kernelization instructions they're
sometimes called sim D instructions

00:07:07.160 --> 00:07:07.170
sometimes called sim D instructions
 

00:07:07.170 --> 00:07:08.810
sometimes called sim D instructions
this stands for a single instruction

00:07:08.810 --> 00:07:08.820
this stands for a single instruction
 

00:07:08.820 --> 00:07:12.020
this stands for a single instruction
multiple data but what this basically

00:07:12.020 --> 00:07:12.030
multiple data but what this basically
 

00:07:12.030 --> 00:07:14.810
multiple data but what this basically
means is that if you use built-in

00:07:14.810 --> 00:07:14.820
means is that if you use built-in
 

00:07:14.820 --> 00:07:17.810
means is that if you use built-in
functions such as this NT dot function

00:07:17.810 --> 00:07:17.820
functions such as this NT dot function
 

00:07:17.820 --> 00:07:20.480
functions such as this NT dot function
or other per functions that don't

00:07:20.480 --> 00:07:20.490
or other per functions that don't
 

00:07:20.490 --> 00:07:22.580
or other per functions that don't
require you're explicitly implementing a

00:07:22.580 --> 00:07:22.590
require you're explicitly implementing a
 

00:07:22.590 --> 00:07:26.600
require you're explicitly implementing a
for loop it enables it enables Python

00:07:26.600 --> 00:07:26.610
for loop it enables it enables Python
 

00:07:26.610 --> 00:07:29.510
for loop it enables it enables Python
numpy to take much better advantage of

00:07:29.510 --> 00:07:29.520
numpy to take much better advantage of
 

00:07:29.520 --> 00:07:32.600
numpy to take much better advantage of
parallelism to do your computations much

00:07:32.600 --> 00:07:32.610
parallelism to do your computations much
 

00:07:32.610 --> 00:07:34.820
parallelism to do your computations much
faster and this is true both for

00:07:34.820 --> 00:07:34.830
faster and this is true both for
 

00:07:34.830 --> 00:07:37.820
faster and this is true both for
computations on CPUs and computations on

00:07:37.820 --> 00:07:37.830
computations on CPUs and computations on
 

00:07:37.830 --> 00:07:40.850
computations on CPUs and computations on
GPUs it's just GPUs are remarkably good

00:07:40.850 --> 00:07:40.860
GPUs it's just GPUs are remarkably good
 

00:07:40.860 --> 00:07:43.250
GPUs it's just GPUs are remarkably good
at these Sindhi calculations but CPU is

00:07:43.250 --> 00:07:43.260
at these Sindhi calculations but CPU is
 

00:07:43.260 --> 00:07:45.320
at these Sindhi calculations but CPU is
actually also not too bad at them maybe

00:07:45.320 --> 00:07:45.330
actually also not too bad at them maybe
 

00:07:45.330 --> 00:07:48.140
actually also not too bad at them maybe
just not as good as GPUs so you see in

00:07:48.140 --> 00:07:48.150
just not as good as GPUs so you see in
 

00:07:48.150 --> 00:07:50.210
just not as good as GPUs so you see in
how vectorization can significantly

00:07:50.210 --> 00:07:50.220
how vectorization can significantly
 

00:07:50.220 --> 00:07:52.280
how vectorization can significantly
speed up your code the rule of thumb to

00:07:52.280 --> 00:07:52.290
speed up your code the rule of thumb to
 

00:07:52.290 --> 00:07:54.640
speed up your code the rule of thumb to
remember is whenever possible avoid

00:07:54.640 --> 00:07:54.650
remember is whenever possible avoid
 

00:07:54.650 --> 00:07:57.830
remember is whenever possible avoid
using explicit for loops let's go onto

00:07:57.830 --> 00:07:57.840
using explicit for loops let's go onto
 

00:07:57.840 --> 00:07:59.450
using explicit for loops let's go onto
the next video to see some more examples

00:07:59.450 --> 00:07:59.460
the next video to see some more examples
 

00:07:59.460 --> 00:08:01.880
the next video to see some more examples
of vectorization and also start to

00:08:01.880 --> 00:08:01.890
of vectorization and also start to
 

00:08:01.890 --> 00:08:05.690
of vectorization and also start to
vectorize logistic regression

