WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.994
[UPBEAT MUSIC PLAYING]

00:00:06.986 --> 00:00:08.483
[CLUCKING]

00:00:08.483 --> 00:00:10.479
[CROWING]

00:00:10.479 --> 00:00:11.477
[ALARM BELL]

00:00:11.477 --> 00:00:13.473
[UPBEAT MUSIC PLAYING]

00:00:13.473 --> 00:00:14.471
[RATCHETING]

00:00:14.471 --> 00:00:17.465
[UPBEAT MUSIC PLAYING]

00:00:17.465 --> 00:00:20.459
[HAIRDRYER WHINE]

00:00:20.459 --> 00:00:22.455
[MOTORCYCLE KICK-START SOUNDS]

00:00:22.455 --> 00:00:23.453
[BICYCLE BELL]

00:00:23.453 --> 00:00:25.948
[UPBEAT MUSIC PLAYING]

00:00:31.936 --> 00:00:33.433
[SQUEAKING]

00:00:33.433 --> 00:00:35.928
[UPBEAT MUSIC PLAYING]

00:00:35.928 --> 00:00:37.924
[TYPEWRITER CLACKING]

00:00:37.924 --> 00:00:40.918
[RECORD SCRATCHING SOUNDS]

00:00:40.918 --> 00:00:43.413
[UPBEAT MUSIC PLAYING]

00:00:47.903 --> 00:00:48.403
[DING]

00:00:48.403 --> 00:00:50.399
[CHOPPING SOUNDS]

00:00:51.397 --> 00:00:52.395
[CHAINSAW SOUNDS]

00:00:52.395 --> 00:00:54.890
[UPBEAT MUSIC PLAYING]

00:00:57.884 --> 00:00:58.882
[RECORD SCRATCH]

00:01:00.878 --> 00:01:01.876
[WHOOSH]

00:01:01.876 --> 00:01:05.369
[UPBEAT MUSIC PLAYING]

00:01:29.820 --> 00:01:32.814
[APPLAUSE]

00:01:34.840 --> 00:01:36.590
MATT HENDERSON: So
hello, everybody.

00:01:36.590 --> 00:01:40.310
As the video shows, things
get better over time.

00:01:40.310 --> 00:01:42.850
Technology helps
things get better.

00:01:42.850 --> 00:01:49.280
It helps things get smaller,
faster, easier, much

00:01:49.280 --> 00:01:50.430
much better.

00:01:50.430 --> 00:01:51.830
But how about apps?

00:01:51.830 --> 00:01:55.910
How will the architecture
of apps get better?

00:01:55.910 --> 00:01:59.060
We're here to tell you
more about our vision

00:01:59.060 --> 00:02:02.870
for the future of Android
app development, discovery,

00:02:02.870 --> 00:02:04.206
and distribution.

00:02:07.680 --> 00:02:11.310
Android's first 10
years have centered

00:02:11.310 --> 00:02:13.930
around the app download.

00:02:13.930 --> 00:02:15.750
It works like this.

00:02:15.750 --> 00:02:20.790
Developers build a large app
with all their features in it.

00:02:20.790 --> 00:02:25.650
People find apps on Google Play
and install the ones they want.

00:02:25.650 --> 00:02:31.220
And then they wait while Play
sends the app to their device.

00:02:31.220 --> 00:02:33.540
And it's been a great 10 years.

00:02:33.540 --> 00:02:36.120
There are now over 2
billion active Android

00:02:36.120 --> 00:02:38.010
devices around the world.

00:02:38.010 --> 00:02:41.760
And Play installed close to
100 billion apps and games

00:02:41.760 --> 00:02:43.170
in the last year--

00:02:43.170 --> 00:02:45.450
100 billion.

00:02:45.450 --> 00:02:49.950
But our app model
can get even better.

00:02:49.950 --> 00:02:52.380
So what to improve?

00:02:52.380 --> 00:02:56.400
Well, during development,
building and publishing

00:02:56.400 --> 00:03:01.270
for different device
types is still hard.

00:03:01.270 --> 00:03:04.590
In the discovery
stage, new users

00:03:04.590 --> 00:03:08.640
are put off by long wait
times for the download.

00:03:08.640 --> 00:03:12.390
And after distribution,
large apps sizes--

00:03:12.390 --> 00:03:17.280
these large apps are much more
likely to get uninstalled.

00:03:17.280 --> 00:03:21.030
So the future of apps will
address these problems.

00:03:21.030 --> 00:03:24.450
Development will
be more modular.

00:03:24.450 --> 00:03:26.640
Discovery will be more instant.

00:03:26.640 --> 00:03:31.410
And distribution
will be more dynamic.

00:03:31.410 --> 00:03:35.490
Our first step in this
direction has been Instant Apps

00:03:35.490 --> 00:03:37.860
and you'll hear
more today about how

00:03:37.860 --> 00:03:40.470
it's removing install
friction and helping

00:03:40.470 --> 00:03:43.320
to improve discovery.

00:03:43.320 --> 00:03:46.590
We've made Instant Apps
available to game developers

00:03:46.590 --> 00:03:48.480
at GDC this year.

00:03:48.480 --> 00:03:51.660
You can simply tap
the Try Now button

00:03:51.660 --> 00:03:55.290
to jump into game
experiences like this one,

00:03:55.290 --> 00:03:58.620
"King's Candy Crush Saga."

00:03:58.620 --> 00:04:01.230
Developers are seeing
that Instant Apps

00:04:01.230 --> 00:04:03.620
drives incremental installs.

00:04:03.620 --> 00:04:08.280
Users that would have otherwise
abandoned, at this page,

00:04:08.280 --> 00:04:12.360
are trying the experience,
they're clicking Try Now,

00:04:12.360 --> 00:04:16.410
and then they're
proceeding to install.

00:04:16.410 --> 00:04:19.410
Today, we're revealing
our related efforts

00:04:19.410 --> 00:04:22.590
on development and distribution.

00:04:22.590 --> 00:04:24.690
In the developer
keynote, you heard

00:04:24.690 --> 00:04:28.180
a little bit about what we're
working on in these areas.

00:04:28.180 --> 00:04:30.900
And we're going to talk
much more about them now.

00:04:30.900 --> 00:04:33.210
To tell you more about
what we've been working on,

00:04:33.210 --> 00:04:36.130
let me invite out Milena,
Engineering Manager

00:04:36.130 --> 00:04:39.690
for Play App Distribution,
and Kobi Product Manager

00:04:39.690 --> 00:04:41.579
for Play App Distribution.

00:04:41.579 --> 00:04:45.571
[APPLAUSE]

00:04:52.560 --> 00:04:54.450
KOBI GLICK: Thanks, Matt.

00:04:54.450 --> 00:04:57.930
The Android ecosystem has
evolved since the humble G1

00:04:57.930 --> 00:05:00.480
was introduced 10 years ago.

00:05:00.480 --> 00:05:03.360
With over two billion
devices, there

00:05:03.360 --> 00:05:06.270
are new form factors and
thousands of new device models

00:05:06.270 --> 00:05:09.100
every year.

00:05:09.100 --> 00:05:11.340
This is great for user choice.

00:05:11.340 --> 00:05:13.830
There is a device for everyone.

00:05:13.830 --> 00:05:15.982
But thinking about
all these devices

00:05:15.982 --> 00:05:17.190
has made development complex.

00:05:20.110 --> 00:05:23.810
Some of you use multi APK to
optimize the size of your app.

00:05:23.810 --> 00:05:26.240
This is costly and complicated.

00:05:26.240 --> 00:05:28.750
Instead of focusing on
making your app unique,

00:05:28.750 --> 00:05:34.100
you end up focusing on trying
to target the right devices.

00:05:34.100 --> 00:05:37.790
With Multi APKs, the dimensions
of device configurations

00:05:37.790 --> 00:05:40.230
on Android multiply
really quickly.

00:05:40.230 --> 00:05:44.020
So if you try to optimize by
CPU architecture and stream

00:05:44.020 --> 00:05:48.830
densities, you will
end up with many APKs.

00:05:48.830 --> 00:05:52.214
And the number of APKs will
grow really, really quickly,

00:05:52.214 --> 00:05:54.005
especially when you
start targeting 64-bit.

00:05:56.710 --> 00:06:00.990
And each one of those APKs has
its own unique version code,

00:06:00.990 --> 00:06:03.870
although you release all of
them as part of the same app

00:06:03.870 --> 00:06:05.400
release.

00:06:05.400 --> 00:06:07.500
This is painful for developers.

00:06:07.500 --> 00:06:10.560
There must be a better way.

00:06:10.560 --> 00:06:12.750
To avoid the hassle
of multi APK,

00:06:12.750 --> 00:06:16.962
some apps simply ship everything
to everyone, all screen

00:06:16.962 --> 00:06:21.090
densities, all CPU
architectures, all languages.

00:06:21.090 --> 00:06:24.600
The result are really,
really big apps.

00:06:24.600 --> 00:06:26.190
This is painful for users.

00:06:26.190 --> 00:06:28.860
MILENA NIKOLIC: There
must be a better way.

00:06:28.860 --> 00:06:30.450
Supporting all the
different devices,

00:06:30.450 --> 00:06:33.060
while also adding new
features, has also

00:06:33.060 --> 00:06:36.960
contributed to apps
becoming larger over time.

00:06:36.960 --> 00:06:40.200
Since March 2012,
the average APK size

00:06:40.200 --> 00:06:42.870
has grown by five times.

00:06:42.870 --> 00:06:46.860
This is bad for users because
mobile data and device storage

00:06:46.860 --> 00:06:49.140
are both at a premium,
and users don't

00:06:49.140 --> 00:06:54.510
want to have to wait forever to
start using an app or a game.

00:06:54.510 --> 00:06:56.530
We can't reiterate
this point enough.

00:06:56.530 --> 00:07:00.240
APK size has a very real
effect on conversion

00:07:00.240 --> 00:07:02.980
and successful
download of your app.

00:07:02.980 --> 00:07:05.010
This graph shows
you the correlation

00:07:05.010 --> 00:07:08.220
between user conversion
in a Play Store listing

00:07:08.220 --> 00:07:09.960
and the size of an APK.

00:07:09.960 --> 00:07:13.650
Clearly, the heavier
your app, the less likely

00:07:13.650 --> 00:07:15.820
a user will download it.

00:07:15.820 --> 00:07:17.820
You may have read about
this in one of our media

00:07:17.820 --> 00:07:19.080
posts on this topic.

00:07:19.080 --> 00:07:22.740
For every six megabytes of
an increase in APK size,

00:07:22.740 --> 00:07:26.070
the conversion rate
goes down by 1%.

00:07:26.070 --> 00:07:28.930
This is a material loss
in conversion rate,

00:07:28.930 --> 00:07:32.760
which can be recovered by
focusing on the APK size.

00:07:32.760 --> 00:07:36.090
But that's not all.

00:07:36.090 --> 00:07:39.930
Bloated APKs can also
be bad for innovation.

00:07:39.930 --> 00:07:41.490
Some developers are
having to choose

00:07:41.490 --> 00:07:45.990
between adding new features
and keeping their apps lean.

00:07:45.990 --> 00:07:49.710
For example, Flipkart is a
leading e-commerce player

00:07:49.710 --> 00:07:52.710
in India, where data
costs are still high.

00:07:52.710 --> 00:07:55.260
So it's important for them
to keep their app download

00:07:55.260 --> 00:07:57.120
size small.

00:07:57.120 --> 00:07:59.730
They're looking for solutions
to keep their initial install

00:07:59.730 --> 00:08:03.000
as small as possible,
while being able to provide

00:08:03.000 --> 00:08:07.060
rich experiences for their
users in the long run.

00:08:07.060 --> 00:08:09.400
So we've been
thinking about this.

00:08:09.400 --> 00:08:13.050
How can we decrease APK size
without affecting development

00:08:13.050 --> 00:08:15.220
and distribution complexity?

00:08:15.220 --> 00:08:18.810
Well, let's look at
what's in today's APK.

00:08:18.810 --> 00:08:23.070
Many languages, most of
which a user never needs.

00:08:23.070 --> 00:08:26.760
Duplicative CPU
information for ARM and x86

00:08:26.760 --> 00:08:31.050
and, sometimes, even
32-bit and 64-bit.

00:08:31.050 --> 00:08:34.890
It includes resources in five or
six different screen densities.

00:08:34.890 --> 00:08:38.610
And it probably includes niche
or experimental features,

00:08:38.610 --> 00:08:40.470
which only a percentage
of the audience

00:08:40.470 --> 00:08:43.289
will ever be exposed to.

00:08:43.289 --> 00:08:45.810
This doesn't make much sense.

00:08:45.810 --> 00:08:48.990
A far better solution would
be to only deliver the code

00:08:48.990 --> 00:08:51.950
and resources that a
particular device needs,

00:08:51.950 --> 00:08:54.840
and to deliver a leaner
app experience, where

00:08:54.840 --> 00:08:59.812
users could download
additional features on demand.

00:08:59.812 --> 00:09:01.770
KOBI GLICK: So our vision
for solving this pain

00:09:01.770 --> 00:09:06.270
point in development
is a new app format.

00:09:06.270 --> 00:09:09.240
I'm happy to announce that today
we're launching the Android App

00:09:09.240 --> 00:09:10.420
Bundle.

00:09:10.420 --> 00:09:13.950
The Android App Bundle is
the new publishing format

00:09:13.950 --> 00:09:15.380
for Android.

00:09:15.380 --> 00:09:19.770
It is open source and
backward compatible.

00:09:19.770 --> 00:09:23.100
It will help your users
benefit from smaller apps.

00:09:23.100 --> 00:09:26.280
And you will not need to
build multi APK to optimize

00:09:26.280 --> 00:09:28.050
the size of your apps anymore.

00:09:28.050 --> 00:09:32.396
Yes, you heard that right,
multi APK is finally going away.

00:09:32.396 --> 00:09:33.644
[APPLAUSE]

00:09:33.644 --> 00:09:34.650
MILENA NIKOLIC: Nice.

00:09:34.650 --> 00:09:36.540
Thank you.

00:09:36.540 --> 00:09:39.510
KOBI GLICK: With the App Bundle,
you only build one thing.

00:09:39.510 --> 00:09:42.810
And you don't need to refactor
your code to start using it.

00:09:42.810 --> 00:09:46.290
In addition, it enables
modular app development,

00:09:46.290 --> 00:09:49.920
which we'll talk about
later in this session.

00:09:49.920 --> 00:09:52.080
So how does this
work on Google Play?

00:09:52.080 --> 00:09:54.829
For end users to benefit
from the app bundle,

00:09:54.829 --> 00:09:57.120
we're doing some of the heavy
lifting behind the scene,

00:09:57.120 --> 00:09:59.242
on the distribution side.

00:09:59.242 --> 00:10:01.200
We called this Google
Play innovation launching

00:10:01.200 --> 00:10:04.710
today Dynamic Delivery.

00:10:04.710 --> 00:10:08.580
With Dynamic Delivery, Play
will take your up bundle

00:10:08.580 --> 00:10:12.750
and generate APKs that are
specific to a device, with only

00:10:12.750 --> 00:10:16.320
the code and resources
needed by that device.

00:10:16.320 --> 00:10:19.540
This means much smaller
apps for your users,

00:10:19.540 --> 00:10:22.470
which is great news for the
billions of new users coming

00:10:22.470 --> 00:10:24.004
online.

00:10:24.004 --> 00:10:25.920
So let's take a look at
the Android App Bundle

00:10:25.920 --> 00:10:29.050
in a little bit more detail.

00:10:29.050 --> 00:10:31.170
MILENA NIKOLIC: So here
is an Android App Bundle.

00:10:31.170 --> 00:10:34.030
As you can see, it is
quite similar to an APK.

00:10:34.030 --> 00:10:38.580
It has DEX files, resources,
assets, and native libraries.

00:10:38.580 --> 00:10:41.040
But one difference you can
see is that it can also

00:10:41.040 --> 00:10:42.930
include more than one module--

00:10:42.930 --> 00:10:46.380
in this particular example,
Base, Foo, and Bar.

00:10:46.380 --> 00:10:48.450
This is important for
app modularity, which

00:10:48.450 --> 00:10:50.502
we'll get to talk about soon.

00:10:50.502 --> 00:10:52.710
Another thing you can see
is that the format includes

00:10:52.710 --> 00:10:55.320
a few metadata files,
where you can provide

00:10:55.320 --> 00:11:01.440
Play with different instructions
on how to process the bundle.

00:11:01.440 --> 00:11:03.510
Now, how does Google
Play use this format

00:11:03.510 --> 00:11:05.850
to create the
lightweight binary?

00:11:05.850 --> 00:11:08.820
We use an Android platform
feature, launched in Lollipop,

00:11:08.820 --> 00:11:11.220
called split APKs.

00:11:11.220 --> 00:11:14.400
If you think about Android App
Bundle as a publishing format,

00:11:14.400 --> 00:11:17.640
splits are the serving format
and what eventually ends up

00:11:17.640 --> 00:11:20.910
being installed on user devices.

00:11:20.910 --> 00:11:23.150
When you upload
your bundle to Play,

00:11:23.150 --> 00:11:26.550
we will process it
to generate splits.

00:11:26.550 --> 00:11:29.910
We do this with a tool we
have very originally named

00:11:29.910 --> 00:11:31.830
Bundle Tool.

00:11:31.830 --> 00:11:33.720
This tool will be
open source, so you

00:11:33.720 --> 00:11:35.670
can use it to perform
the same processing

00:11:35.670 --> 00:11:39.180
that we do for off-Play testing
and distribution purposes.

00:11:42.300 --> 00:11:45.000
Bundle Tool facilitates all
the necessary conversions

00:11:45.000 --> 00:11:47.340
between a bundle
format and split APKs,

00:11:47.340 --> 00:11:50.370
for example, generating all
the splits for densities,

00:11:50.370 --> 00:11:52.800
architectures, and
even languages,

00:11:52.800 --> 00:11:56.800
selecting specific splits
needed by a particular device,

00:11:56.800 --> 00:11:59.410
installing splits on
a connected device,

00:11:59.410 --> 00:12:02.580
and, for devices on Android
versions older than Lollipop,

00:12:02.580 --> 00:12:06.180
it facilitates fusing of
splits into monolithic

00:12:06.180 --> 00:12:09.510
device-optimized APKs.

00:12:09.510 --> 00:12:12.060
There are many more options
available with the bundle

00:12:12.060 --> 00:12:13.710
and the Bundle Tool.

00:12:13.710 --> 00:12:17.010
In the next session, at
stage two, at 6:00 PM,

00:12:17.010 --> 00:12:19.860
our engineering team will
provide a technical deep dive

00:12:19.860 --> 00:12:22.680
about the bundle format,
the Bundle Tool, and all

00:12:22.680 --> 00:12:25.020
the options it enables.

00:12:25.020 --> 00:12:27.240
KOBI GLICK: OK, so you
mentioned size savings.

00:12:27.240 --> 00:12:29.310
Tell me a little bit more
about how it happens.

00:12:29.310 --> 00:12:30.360
MILENA NIKOLIC: Sure.

00:12:30.360 --> 00:12:33.180
So the big difference
between splits and multi APK

00:12:33.180 --> 00:12:36.660
are that splits are
additive not multiplicative.

00:12:36.660 --> 00:12:40.770
For example, the app here has
the base APK with DEX files,

00:12:40.770 --> 00:12:45.240
and the corresponding density,
API, and language splits.

00:12:45.240 --> 00:12:48.930
With Dynamic Delivery, Play
will only deliver the density

00:12:48.930 --> 00:12:52.350
and API splits required
by a particular device,

00:12:52.350 --> 00:12:55.200
making the app
smaller for users.

00:12:55.200 --> 00:12:57.330
In addition, Play
will start handling

00:12:57.330 --> 00:12:59.940
a new dimension, languages.

00:12:59.940 --> 00:13:01.440
In the Android App
Bundle, you will

00:13:01.440 --> 00:13:04.050
be able to supply
all the languages.

00:13:04.050 --> 00:13:07.120
And Play will only send to
users the splits for languages

00:13:07.120 --> 00:13:10.050
they're typically using.

00:13:10.050 --> 00:13:12.810
In the rare case where a user
switches to a new language,

00:13:12.810 --> 00:13:15.180
that we weren't
aware of before, Play

00:13:15.180 --> 00:13:18.150
will dynamically
deliver relevant splits

00:13:18.150 --> 00:13:19.500
to their device.

00:13:19.500 --> 00:13:21.720
For some apps,
language splits alone

00:13:21.720 --> 00:13:25.217
introduce massive size savings.

00:13:25.217 --> 00:13:27.050
KOBI GLICK: So we've
been testing you with--

00:13:27.050 --> 00:13:28.966
we've been testing this
with a few developers.

00:13:28.966 --> 00:13:32.120
Probably, some of you are
in the audience, right now.

00:13:32.120 --> 00:13:35.990
For example, Twitter is one
of our early access partners.

00:13:35.990 --> 00:13:39.050
By splitting over languages
and string densities,

00:13:39.050 --> 00:13:43.070
they are saving 35%
of their app size.

00:13:43.070 --> 00:13:44.840
This is huge.

00:13:44.840 --> 00:13:46.460
And this is not everything.

00:13:46.460 --> 00:13:48.350
Here are a few more examples--

00:13:48.350 --> 00:13:54.410
text+ with 26% size savings,
Blue Apron with 27% size

00:13:54.410 --> 00:13:59.552
savings, and Jaumo
with 50% size savings.

00:13:59.552 --> 00:14:01.010
MILENA NIKOLIC:
And that's not all.

00:14:01.010 --> 00:14:02.000
We have more.

00:14:02.000 --> 00:14:05.030
Here a few more examples of
our early access partners.

00:14:05.030 --> 00:14:07.560
All these partners
have built the bundle,

00:14:07.560 --> 00:14:10.430
published it to Play, and
were able to make their apps

00:14:10.430 --> 00:14:12.380
significantly smaller.

00:14:12.380 --> 00:14:13.670
Look at the results.

00:14:13.670 --> 00:14:21.110
ABA English, Airbnb, LinkedIn,
Memorise, Perigee, Pluto TV,

00:14:21.110 --> 00:14:26.150
and RV AppStudios have all
saved between 11% and 64%

00:14:26.150 --> 00:14:29.240
of their app size.

00:14:29.240 --> 00:14:32.410
And that's how Android App
Bundle and Google Play's

00:14:32.410 --> 00:14:33.980
Dynamic Delivery work.

00:14:33.980 --> 00:14:36.530
Once you publish and
build your bundle,

00:14:36.530 --> 00:14:40.520
Google Play will deliver just
what the specific device needs.

00:14:40.520 --> 00:14:43.369
Now, let me invite Karen, who
leads Android Studio Product

00:14:43.369 --> 00:14:45.410
Team, to the stage, to
tell you a little bit more

00:14:45.410 --> 00:14:48.173
about how you build a bundle.

00:14:48.173 --> 00:14:50.578
[APPLAUSE]

00:14:54.910 --> 00:14:56.020
KAREN NG: Thanks, Milena.

00:14:56.020 --> 00:14:56.620
Hi, I'm Karen.

00:14:56.620 --> 00:14:57.770
And I work on the Android Team.

00:14:57.770 --> 00:14:59.394
SPEAKER: The sound
is really bad, guys.

00:14:59.394 --> 00:15:01.639
[LAUGHTER]

00:15:01.639 --> 00:15:03.430
KOBI GLICK: The sound
is indeed really bad.

00:15:03.430 --> 00:15:05.888
KAREN NG: Those are the best
moments, when the mic is still

00:15:05.888 --> 00:15:08.650
on in the back stage.

00:15:08.650 --> 00:15:11.570
So you've now seen the
concept of an app bundle.

00:15:11.570 --> 00:15:13.112
What I want to do
is pivot directions

00:15:13.112 --> 00:15:14.528
and show you a bit
about the tools

00:15:14.528 --> 00:15:16.620
that you're going to use
to build the app bundle.

00:15:16.620 --> 00:15:19.330
In Android Studio
3.2 Canary that

00:15:19.330 --> 00:15:22.150
was released less
than four hours ago--

00:15:22.150 --> 00:15:23.620
so go download it--

00:15:23.620 --> 00:15:26.200
there is full support,
inside Studio and Gradle,

00:15:26.200 --> 00:15:28.870
to build the app bundle format.

00:15:28.870 --> 00:15:31.420
The app bundle will contain
everything your app needs,

00:15:31.420 --> 00:15:34.750
all your languages, support
for every device screen,

00:15:34.750 --> 00:15:37.600
every hardware architecture, and
will automatically build those

00:15:37.600 --> 00:15:39.910
into configurations,
those configurations

00:15:39.910 --> 00:15:42.520
into APKs for you.

00:15:42.520 --> 00:15:44.890
If you're using Android
Studio to build a bundle,

00:15:44.890 --> 00:15:50.740
the flow will feel very similar
to working with an APK today.

00:15:50.740 --> 00:15:53.110
What we've introduced
in the Build menu

00:15:53.110 --> 00:15:55.570
is a new option
to build a bundle.

00:15:55.570 --> 00:15:58.240
If you're using a continuous
integration system,

00:15:58.240 --> 00:16:00.040
all the Gradle
build-tasks have also

00:16:00.040 --> 00:16:02.200
been updated to build a bundle.

00:16:02.200 --> 00:16:05.890
So replacing a single option,
rebuilding your project,

00:16:05.890 --> 00:16:08.110
as a bundle, means
that's all you

00:16:08.110 --> 00:16:11.620
need to do to take advantage
of the APK size savings.

00:16:11.620 --> 00:16:14.050
You'll also be able to take
advantage of Google Play's

00:16:14.050 --> 00:16:17.020
Dynamic Delivery, so only
the bits that are needed

00:16:17.020 --> 00:16:20.200
are downloaded to the device.

00:16:20.200 --> 00:16:22.960
The Android App Bundle is
your new publishing format

00:16:22.960 --> 00:16:24.640
for the Store.

00:16:24.640 --> 00:16:26.170
Testing and
deploying your bundle

00:16:26.170 --> 00:16:28.210
will, again, feel
very similar to it

00:16:28.210 --> 00:16:30.220
what it does today
in Android Studio.

00:16:30.220 --> 00:16:32.830
You're just working with APKs.

00:16:32.830 --> 00:16:35.380
What we've also done is updated
the new run configuration

00:16:35.380 --> 00:16:37.600
dialog, so you can
choose the bundle

00:16:37.600 --> 00:16:39.890
and select your
deployment target

00:16:39.890 --> 00:16:43.120
and deploy directly to a
device or to an emulator.

00:16:43.120 --> 00:16:45.280
Gradle will build
the bundle, and then

00:16:45.280 --> 00:16:49.120
deploy only the APKs that
are needed by the device.

00:16:49.120 --> 00:16:51.400
This ability to test
and deploy your bundle

00:16:51.400 --> 00:16:54.854
will simulate exactly
what the Play Store does.

00:16:54.854 --> 00:16:56.770
If you're just testing
your app functionality,

00:16:56.770 --> 00:17:00.580
though, you can go ahead and
use an APK like you did before.

00:17:00.580 --> 00:17:01.810
It'll work the same way.

00:17:01.810 --> 00:17:05.480
And it's actually going to be
faster to deploy the device.

00:17:05.480 --> 00:17:08.319
To upload the bundle
into the Play Store,

00:17:08.319 --> 00:17:11.020
you'll need to sing the
bundle with a signing key.

00:17:11.020 --> 00:17:13.599
For all existing apps,
you need to provide

00:17:13.599 --> 00:17:16.230
Google Play with
your signing key,

00:17:16.230 --> 00:17:19.599
so Play can process that key
and then resign your bundle

00:17:19.599 --> 00:17:22.030
with the same key.

00:17:22.030 --> 00:17:27.040
For new apps, Play will just
generate that key for you.

00:17:27.040 --> 00:17:29.530
If you recall, in
a multi APK world,

00:17:29.530 --> 00:17:33.340
you used to have to
upload every APK,

00:17:33.340 --> 00:17:36.040
manually, yourself,
to that Store.

00:17:36.040 --> 00:17:38.800
In a bundle world, we do all
the heavy lifting for you.

00:17:38.800 --> 00:17:40.540
You only have to
upload one thing.

00:17:43.230 --> 00:17:44.940
KOBI GLICK: Once you
build the bundle,

00:17:44.940 --> 00:17:48.210
you can upload and publish
it through the Play Console.

00:17:48.210 --> 00:17:50.130
You will use the same
release flow you're

00:17:50.130 --> 00:17:53.550
familiar with, with an APK.

00:17:53.550 --> 00:17:56.100
In addition, in order
to test your app bundle,

00:17:56.100 --> 00:18:00.570
with your testers, you can use
our new internal testing track.

00:18:00.570 --> 00:18:03.097
It allows you to distribute
your app to your testers

00:18:03.097 --> 00:18:04.180
within less than a minute.

00:18:06.860 --> 00:18:10.130
When you publish in a
bundle, to the Play Console,

00:18:10.130 --> 00:18:12.530
we provide you a new way
to look at your App bundle

00:18:12.530 --> 00:18:15.910
and understand the size of
the device-specific APKs

00:18:15.910 --> 00:18:19.140
that Play generates and
delivers to your users.

00:18:19.140 --> 00:18:22.670
We call this new page
the Bundle Explorer.

00:18:22.670 --> 00:18:24.620
Here, you can see
what is the size

00:18:24.620 --> 00:18:28.280
of all those device-specific
APKs case that Play generates

00:18:28.280 --> 00:18:30.320
for every device configuration.

00:18:30.320 --> 00:18:32.390
For example, you
can see, what is

00:18:32.390 --> 00:18:36.050
the size of the APKs that Play
will deliver to an ARM XHDPI

00:18:36.050 --> 00:18:37.710
device?

00:18:37.710 --> 00:18:40.460
You can also use
this page to download

00:18:40.460 --> 00:18:42.320
the device-specific
APKs generated

00:18:42.320 --> 00:18:45.410
by Play to any
device model that is

00:18:45.410 --> 00:18:46.740
listed in our device catalog.

00:18:49.510 --> 00:18:52.120
KAREN NG: We showed you how the
Android App Bundle and Dynamic

00:18:52.120 --> 00:18:55.220
Delivery will benefit
you in a number of ways.

00:18:55.220 --> 00:18:56.860
For developers, you
really no longer

00:18:56.860 --> 00:18:59.440
have to manage the
multi APK world.

00:18:59.440 --> 00:19:01.360
For your users,
we're really hoping

00:19:01.360 --> 00:19:02.860
that they won't
have to pay the cost

00:19:02.860 --> 00:19:05.380
of that giant, upfront install.

00:19:05.380 --> 00:19:08.054
So what does it all
mean in practice?

00:19:08.054 --> 00:19:09.595
We worked with a
number of developers

00:19:09.595 --> 00:19:12.250
in an early access program,
as Kobi mentioned earlier.

00:19:12.250 --> 00:19:14.920
And it's been fun.

00:19:14.920 --> 00:19:17.290
Twitter has told us what
they like about the new flow.

00:19:17.290 --> 00:19:20.740
With the Android App Bundle,
they upload one binary,

00:19:20.740 --> 00:19:23.200
with one version code,
and Dynamic Delivery

00:19:23.200 --> 00:19:26.770
handles API, density,
and language splits.

00:19:26.770 --> 00:19:29.530
For Twitter to have
done this themselves,

00:19:29.530 --> 00:19:34.660
it would have required the
maintenance of 500 APKs.

00:19:34.660 --> 00:19:36.490
That's not a small feat.

00:19:36.490 --> 00:19:38.500
They described their
build and release process

00:19:38.500 --> 00:19:41.230
as more streamlined, with
the size of their app

00:19:41.230 --> 00:19:45.160
has significantly
decreased for their users.

00:19:45.160 --> 00:19:47.280
So you've now seen how
building an app bundle

00:19:47.280 --> 00:19:48.840
results in smaller apps.

00:19:48.840 --> 00:19:51.000
And it also means
that you no longer

00:19:51.000 --> 00:19:53.670
have to manage multiple APKs.

00:19:53.670 --> 00:19:56.400
The second big change that
the app bundle enables

00:19:56.400 --> 00:19:58.630
is more modular apps.

00:19:58.630 --> 00:20:01.800
So today, we're releasing
a preview of the ability

00:20:01.800 --> 00:20:05.370
to deliver features on demand.

00:20:05.370 --> 00:20:07.350
Just as building a
bundle automatically

00:20:07.350 --> 00:20:11.070
builds splits, such a language,
screen density, and hardware,

00:20:11.070 --> 00:20:13.980
you can create a split
for additional features.

00:20:13.980 --> 00:20:17.640
We call these features
Dynamic Features.

00:20:17.640 --> 00:20:19.470
And they are
installed on demand.

00:20:19.470 --> 00:20:22.280
Each app will then have
a base feature and n

00:20:22.280 --> 00:20:23.610
number of dynamic features.

00:20:26.130 --> 00:20:29.010
Again, with the latest
version of Android Studio,

00:20:29.010 --> 00:20:32.754
you can start creating apps
today with Dynamic Features.

00:20:32.754 --> 00:20:34.920
If you want to publish that
app into the Play Store,

00:20:34.920 --> 00:20:37.260
however, we're still
in beta, so you'll

00:20:37.260 --> 00:20:40.020
need to join the beta
program on the Play Store.

00:20:40.020 --> 00:20:43.380
Although most apps won't need
any effort to create the bundle

00:20:43.380 --> 00:20:46.620
and support Dynamic Delivery,
creating these modular apps,

00:20:46.620 --> 00:20:49.740
with on demand features, we do
expect will be a longer term

00:20:49.740 --> 00:20:50.610
progression.

00:20:50.610 --> 00:20:52.860
And it works best as you
re-architect your apps over

00:20:52.860 --> 00:20:55.475
time.

00:20:55.475 --> 00:20:57.850
So let me give you an example
of what it means for an app

00:20:57.850 --> 00:20:59.500
to have Dynamic Features.

00:20:59.500 --> 00:21:02.950
In this particular example,
we have a Camera Depot app.

00:21:02.950 --> 00:21:05.020
Its just a simple
e-commerce app.

00:21:05.020 --> 00:21:07.690
There's four features
to pay attention to.

00:21:07.690 --> 00:21:09.820
The first feature is
just to be able to browse

00:21:09.820 --> 00:21:13.000
goods, the second one, to
be able to see what offers

00:21:13.000 --> 00:21:15.730
you have, third,
being the buy items,

00:21:15.730 --> 00:21:18.880
and the fourth
being able to sell.

00:21:18.880 --> 00:21:21.830
You can imagine that,
from our app's usage,

00:21:21.830 --> 00:21:24.250
that we see that less
than 1% of people

00:21:24.250 --> 00:21:25.660
ever use the sell feature.

00:21:25.660 --> 00:21:30.010
And its only by people in a
particular region or primarily.

00:21:30.010 --> 00:21:31.960
Every person who
downloaded your app

00:21:31.960 --> 00:21:36.130
has to pay the price of
installing all the features.

00:21:36.130 --> 00:21:39.710
In this case, we should make the
sell feature a dynamic feature.

00:21:39.710 --> 00:21:44.200
So if a user clicks
on the Sell button,

00:21:44.200 --> 00:21:46.360
you'll see a small user
prompt that the feature is

00:21:46.360 --> 00:21:48.220
downloading, and
then it's dynamically

00:21:48.220 --> 00:21:51.750
delivered to the device.

00:21:51.750 --> 00:21:54.920
So how do these dynamic features
then relate to a bundle?

00:21:54.920 --> 00:21:57.800
In the e-commerce app, the
main browse application

00:21:57.800 --> 00:22:00.890
today was what we would
call a base feature.

00:22:00.890 --> 00:22:02.540
You can then extend
your base feature

00:22:02.540 --> 00:22:05.660
with dynamic features
that deliver to your users

00:22:05.660 --> 00:22:07.020
on demand.

00:22:07.020 --> 00:22:09.380
In Android Studio, we've
added a new plugin,

00:22:09.380 --> 00:22:11.030
called Dynamic Feature.

00:22:11.030 --> 00:22:13.370
You can extend your
application in Android studio

00:22:13.370 --> 00:22:17.130
by adding multiple
Dynamic Features to it.

00:22:17.130 --> 00:22:19.230
So let's take another example.

00:22:19.230 --> 00:22:21.920
Imagine that you have
a video chat app.

00:22:21.920 --> 00:22:23.840
And the main app would
be your base feature.

00:22:23.840 --> 00:22:26.600
You can then carve
out a special feature,

00:22:26.600 --> 00:22:30.350
like augmented reality stickers,
and deliver it on demand

00:22:30.350 --> 00:22:33.350
to users only with devices
with the right camera

00:22:33.350 --> 00:22:35.317
to support that feature.

00:22:35.317 --> 00:22:37.400
If you build a new app,
you should design your app

00:22:37.400 --> 00:22:39.680
as modular from the
start, thinking carefully

00:22:39.680 --> 00:22:41.930
about a lightweight
base app experience,

00:22:41.930 --> 00:22:44.900
and then how you would extend
that app with Dynamic Features.

00:22:44.900 --> 00:22:46.490
If you have an
existing app, we're

00:22:46.490 --> 00:22:49.870
expecting to see people take
advantage of Dynamic Features

00:22:49.870 --> 00:22:52.460
but carve out specific
features over time.

00:22:55.190 --> 00:22:57.290
So once you've created
your Dynamic Features,

00:22:57.290 --> 00:23:00.890
you can choose to deploy only
a set of them to the device.

00:23:00.890 --> 00:23:03.710
As you can see here, in
Android Studio, what we've done

00:23:03.710 --> 00:23:06.530
is we've also updated
how you deploy.

00:23:06.530 --> 00:23:09.050
The box, here, shows you
three Dynamic Features,

00:23:09.050 --> 00:23:11.480
Buy, Offers, and Sell.

00:23:11.480 --> 00:23:14.260
You have full control over
which features you deploy.

00:23:14.260 --> 00:23:16.400
So that you can
mix and match them.

00:23:16.400 --> 00:23:19.574
And the base feature
is always deployed.

00:23:19.574 --> 00:23:20.990
KOBI GLICK: So
this framework will

00:23:20.990 --> 00:23:24.620
help large apps become
smaller and small apps

00:23:24.620 --> 00:23:27.750
remain small, while
adding more functionality.

00:23:27.750 --> 00:23:30.740
The first step is building
an Android App Bundle.

00:23:30.740 --> 00:23:33.260
And the next step, like
Karen just described,

00:23:33.260 --> 00:23:35.870
is identifying features
that can be carved out

00:23:35.870 --> 00:23:38.830
as Dynamic Features.

00:23:38.830 --> 00:23:41.410
After refactoring
your code to carve out

00:23:41.410 --> 00:23:43.300
those dynamic
features, you will need

00:23:43.300 --> 00:23:47.050
to integrate with a new client
library we're releasing today.

00:23:47.050 --> 00:23:49.840
It's called the Google
Play Core Library,

00:23:49.840 --> 00:23:52.300
and it includes a
set of APIs allowing

00:23:52.300 --> 00:23:55.690
you to manage the delivery
of those Dynamic Features

00:23:55.690 --> 00:23:57.670
to your users.

00:23:57.670 --> 00:23:59.650
And in case you want
to deliver a feature

00:23:59.650 --> 00:24:02.080
as a response to a user
request, you probably

00:24:02.080 --> 00:24:06.550
want to build a nice user
experience around it.

00:24:06.550 --> 00:24:08.950
The Google Play Core Library
provides a high degree

00:24:08.950 --> 00:24:11.410
of flexibility when
you want to deliver

00:24:11.410 --> 00:24:13.180
a feature to your users.

00:24:13.180 --> 00:24:17.060
Beyond delivering a feature, as
a response to a user request,

00:24:17.060 --> 00:24:20.950
you can also ask to prefetch
a feature, when you predict

00:24:20.950 --> 00:24:22.810
the user will need
it soon, or you

00:24:22.810 --> 00:24:25.150
can ask Play to deliver
the feature as part

00:24:25.150 --> 00:24:27.340
of the next update cycle.

00:24:27.340 --> 00:24:31.990
We call this option
Deferred Installation.

00:24:31.990 --> 00:24:35.230
When thinking about good use
cases for Dynamic Features,

00:24:35.230 --> 00:24:38.690
we've identified two
broad categories.

00:24:38.690 --> 00:24:42.320
The first category is what
we call distinct features.

00:24:42.320 --> 00:24:44.860
These features are logically
separate from the main flow

00:24:44.860 --> 00:24:46.120
of your app.

00:24:46.120 --> 00:24:49.640
For example, in the e-commerce
app Karen mentioned earlier,

00:24:49.640 --> 00:24:52.990
there is a buyer experience
and a seller experience.

00:24:52.990 --> 00:24:54.760
The seller experience
is logically

00:24:54.760 --> 00:24:57.970
separate and, therefore, a
great candidate for a Dynamic

00:24:57.970 --> 00:25:00.500
Feature.

00:25:00.500 --> 00:25:03.940
The second category is what
we call interrupting features.

00:25:03.940 --> 00:25:07.840
Those features pop up during
normal user flow in your app.

00:25:07.840 --> 00:25:10.490
For example, if you
have a photography app,

00:25:10.490 --> 00:25:12.880
you might have an option
to add additional filters

00:25:12.880 --> 00:25:15.020
during the editing process.

00:25:15.020 --> 00:25:17.260
This is what we call an
interrupting feature.

00:25:17.260 --> 00:25:19.900
And for those features,
it is typically better

00:25:19.900 --> 00:25:23.000
to use the deferred installation
option I mentioned earlier,

00:25:23.000 --> 00:25:25.840
to make sure users have
the feature available

00:25:25.840 --> 00:25:27.760
when they are ready to use it.

00:25:27.760 --> 00:25:29.440
And of course, we'll
be super curious

00:25:29.440 --> 00:25:33.130
to see what use cases you come
up with as you start innovating

00:25:33.130 --> 00:25:36.370
with Dynamic Features.

00:25:36.370 --> 00:25:37.990
Earlier in this
talk, we've mentioned

00:25:37.990 --> 00:25:40.540
how developers want to
keep their base install

00:25:40.540 --> 00:25:44.290
as small as possible, while
building rich, new user

00:25:44.290 --> 00:25:45.820
experiences.

00:25:45.820 --> 00:25:49.930
Flipkart and Facebook are two
of our early access partners

00:25:49.930 --> 00:25:53.020
who are helping us to
test dynamic features.

00:25:53.020 --> 00:25:56.590
For Flipkart, as they think
about building for the next 100

00:25:56.590 --> 00:25:59.350
million users,
Dynamic Features allow

00:25:59.350 --> 00:26:02.500
them to ship new and rich
user experiences that

00:26:02.500 --> 00:26:06.250
are naturally size-heavy, like
vernacular support, video,

00:26:06.250 --> 00:26:09.100
and fees.

00:26:09.100 --> 00:26:12.340
Facebook uses Dynamic Features
to improve the experience

00:26:12.340 --> 00:26:14.500
of the app for
different devices,

00:26:14.500 --> 00:26:18.230
while reducing its network
and resource usage.

00:26:18.230 --> 00:26:19.900
They told us that
one thing they really

00:26:19.900 --> 00:26:22.420
like about the new
framework is how

00:26:22.420 --> 00:26:26.121
Dynamic Features are updated
seamlessly as part of any up

00:26:26.121 --> 00:26:26.620
update.

00:26:30.130 --> 00:26:33.940
Dynamic Features enable
dynamic code loading

00:26:33.940 --> 00:26:36.580
when you deliver a feature
on demand to your user,

00:26:36.580 --> 00:26:40.750
it can include code,
resources, and assets.

00:26:40.750 --> 00:26:44.710
As you know, apps on Play are
scanned by Google Play Protect

00:26:44.710 --> 00:26:47.920
and delivered securely
to user devices.

00:26:47.920 --> 00:26:51.910
Dynamic Features will also be
scanned by Google Play Protect,

00:26:51.910 --> 00:26:53.470
which means your
users will benefit

00:26:53.470 --> 00:26:55.810
from all the same protections
we've been building

00:26:55.810 --> 00:26:57.290
for years on Google Play.

00:27:00.310 --> 00:27:04.679
KAREN NG: The Android App Bundle
will make development easier

00:27:04.679 --> 00:27:06.470
and is the future of
the Android app model.

00:27:06.470 --> 00:27:08.959
Dynamic delivery will
improve distribution.

00:27:08.959 --> 00:27:10.750
But what about the big
thing in the middle?

00:27:10.750 --> 00:27:13.420
We've barely touched
upon discovery.

00:27:13.420 --> 00:27:15.670
JONATHAN KARMEL: I want to
invite Jonathan Karmel, who

00:27:15.670 --> 00:27:17.800
leads the Instant Apps
Team, to come join me

00:27:17.800 --> 00:27:20.182
and to tell us a little
bit more about discovery.

00:27:20.182 --> 00:27:22.150
SPEAKER: There you go.

00:27:22.150 --> 00:27:25.102
[APPLAUSE]

00:27:29.038 --> 00:27:31.020
JONATHAN KARMEL: Thanks.

00:27:31.020 --> 00:27:32.118
Thanks, Karen.

00:27:32.118 --> 00:27:33.990
Whoa.

00:27:33.990 --> 00:27:36.540
Last year, on this
stage, we announced

00:27:36.540 --> 00:27:40.770
that all app developers can
now develop an instant app.

00:27:40.770 --> 00:27:43.980
Today, we're excited to
add games to the mix.

00:27:43.980 --> 00:27:48.360
Today, all game developers can
now develop an instant app.

00:27:48.360 --> 00:27:50.790
So let's start with an
example of one of our top game

00:27:50.790 --> 00:27:53.100
developers that are alive today.

00:27:53.100 --> 00:27:55.551
Roll the video, please.

00:27:55.551 --> 00:27:59.030
[UPBEAT MUSIC PLAYING]

00:28:36.830 --> 00:28:39.320
Welcome to Google
Play Instant, where

00:28:39.320 --> 00:28:42.740
you can get apps and
now games instantly.

00:28:42.740 --> 00:28:45.650
And as you saw in the video,
when you click Try Now,

00:28:45.650 --> 00:28:48.770
you'll launch into a native
app experience that is instant.

00:28:48.770 --> 00:28:51.170
And then you'll have
an option to install.

00:28:51.170 --> 00:28:55.850
And users are installing more
because of this Try Now button.

00:28:55.850 --> 00:28:58.250
Let me explain how.

00:28:58.250 --> 00:29:02.240
In the old world, you'd
see a Store listing page

00:29:02.240 --> 00:29:06.950
like this, where the user
has two options, Install

00:29:06.950 --> 00:29:08.210
or abandon.

00:29:08.210 --> 00:29:10.730
And users were abandoning,
because they weren't

00:29:10.730 --> 00:29:14.000
ready to commit to 100
megs onto their phone

00:29:14.000 --> 00:29:18.800
without playing the game or
understanding the game fully.

00:29:18.800 --> 00:29:22.140
But in the new world,
it now looks like this.

00:29:22.140 --> 00:29:25.250
So if you are already coming
to the Store to install,

00:29:25.250 --> 00:29:28.430
you're going to continue to
install at the same rate you

00:29:28.430 --> 00:29:29.274
have before.

00:29:29.274 --> 00:29:30.190
And we're seeing this.

00:29:30.190 --> 00:29:32.900
The CTR rate for
Install has not changed.

00:29:32.900 --> 00:29:36.200
But if you were starting to
wander and think about leaving,

00:29:36.200 --> 00:29:37.610
you now have another option.

00:29:37.610 --> 00:29:39.190
You have the Try Now button.

00:29:39.190 --> 00:29:41.540
And that will launch you
into the Instant Experience

00:29:41.540 --> 00:29:44.340
and allow you to install.

00:29:44.340 --> 00:29:47.030
So where do you see these
Instant Experiences?

00:29:47.030 --> 00:29:49.760
Well, clearly, from
the Play Store,

00:29:49.760 --> 00:29:52.340
where you'll see not only
Try Now, but collections

00:29:52.340 --> 00:29:56.060
and banners that launch
directly into an instant app.

00:29:56.060 --> 00:29:58.697
But the opportunity that
we talked about, last year,

00:29:58.697 --> 00:30:00.280
was nothing to do
with the Play Store.

00:30:00.280 --> 00:30:02.180
It was everything
outside the Play Store

00:30:02.180 --> 00:30:04.070
because that's often
where the decision is

00:30:04.070 --> 00:30:06.110
to install or abandon,
and that's where

00:30:06.110 --> 00:30:08.300
the biggest drop-off rates are.

00:30:08.300 --> 00:30:10.820
Let's take ads for example.

00:30:10.820 --> 00:30:13.130
In the old world,
I click this ad,

00:30:13.130 --> 00:30:14.960
and I'd land in the
Store listing page

00:30:14.960 --> 00:30:17.320
with an option to install.

00:30:17.320 --> 00:30:19.490
In the new world,
I click this, and I

00:30:19.490 --> 00:30:23.480
land in the Instant Experience,
with an option to install.

00:30:23.480 --> 00:30:26.390
In both worlds, I have to decide
if I want to install or not,

00:30:26.390 --> 00:30:29.000
but now I get to play the
game while I assess if this

00:30:29.000 --> 00:30:32.000
is worth it to be on my phone.

00:30:32.000 --> 00:30:35.720
And if I receive an
SMS from a friend that

00:30:35.720 --> 00:30:37.730
says, try out this
new TV show, I

00:30:37.730 --> 00:30:40.310
can start watching that
TV show immediately,

00:30:40.310 --> 00:30:43.440
and then decide if I
want to install the app.

00:30:43.440 --> 00:30:46.430
And if I'm looking for a
new home on Google Search,

00:30:46.430 --> 00:30:50.420
I can actually find the
home, land in the experience,

00:30:50.420 --> 00:30:54.135
look at the images, assess
if I like the property,

00:30:54.135 --> 00:30:55.760
and then determine
if I want to install

00:30:55.760 --> 00:30:57.560
the app, the real
estate app that

00:30:57.560 --> 00:30:59.990
got me all that information.

00:30:59.990 --> 00:31:00.830
Now, this is great.

00:31:00.830 --> 00:31:02.730
It's a consumer
first experience.

00:31:02.730 --> 00:31:04.020
It's great for the user.

00:31:04.020 --> 00:31:05.900
But is it good for developers?

00:31:05.900 --> 00:31:07.160
The answer is yes.

00:31:07.160 --> 00:31:09.631
We're seeing installs,
convergence, and engagement

00:31:09.631 --> 00:31:10.130
go up.

00:31:12.750 --> 00:31:14.430
So let's start with installs.

00:31:14.430 --> 00:31:17.750
"Mighty Battle" saw an
19% increase in installs

00:31:17.750 --> 00:31:19.910
just from the Try Now button.

00:31:19.910 --> 00:31:22.550
Now, this is one of the higher
data points that we've seen.

00:31:22.550 --> 00:31:25.680
But we have seen incremental
installs across the board.

00:31:25.680 --> 00:31:28.744
And as a developer, as you
expand beyond the Play Store

00:31:28.744 --> 00:31:30.410
and start thinking
about all the traffic

00:31:30.410 --> 00:31:32.960
sources I showed
on the other slide,

00:31:32.960 --> 00:31:35.780
you'll start noticing that
your new customer acquisition

00:31:35.780 --> 00:31:39.050
channel is instant apps.

00:31:39.050 --> 00:31:42.500
Take Vimeo, for example, which
is sitting right over here.

00:31:42.500 --> 00:31:45.170
They're seeing 15% of
their installs coming

00:31:45.170 --> 00:31:46.790
from instant apps.

00:31:46.790 --> 00:31:51.530
And NOS, a news app, is seeing
30% of their installs coming

00:31:51.530 --> 00:31:52.760
from instant apps.

00:31:52.760 --> 00:31:56.100
This is their new customer
acquisition channel.

00:31:56.100 --> 00:31:58.900
So are instant apps just
driving users to install?

00:31:58.900 --> 00:32:01.550
No, they're also having great
experiences for the user

00:32:01.550 --> 00:32:04.250
within the instant app.

00:32:04.250 --> 00:32:08.300
Wego, a travel app, is seeing
27% increase in convergence

00:32:08.300 --> 00:32:10.640
within the travel app,
where you get new paid

00:32:10.640 --> 00:32:14.090
leads from the instant app.

00:32:14.090 --> 00:32:17.900
And Viki, a TV show app, is
seeing monetizable watch time

00:32:17.900 --> 00:32:19.806
increase by 5x.

00:32:19.806 --> 00:32:21.680
So be it, if you're
trying to drive installs,

00:32:21.680 --> 00:32:23.430
or you want to make
sure that the user has

00:32:23.430 --> 00:32:25.200
a great experience
within the instant app,

00:32:25.200 --> 00:32:28.310
instant apps are doing both.

00:32:28.310 --> 00:32:30.530
Now, I know what
you're wondering.

00:32:30.530 --> 00:32:32.740
We just talked about
Android App Bundle.

00:32:32.740 --> 00:32:34.154
We talked about instant apps.

00:32:34.154 --> 00:32:35.570
And now you're
worried that you're

00:32:35.570 --> 00:32:37.170
going to have double the work.

00:32:37.170 --> 00:32:39.530
You're going to go home and
have to work on both things.

00:32:39.530 --> 00:32:41.870
Or you're going to have to
choose one or the other.

00:32:41.870 --> 00:32:43.100
Absolutely not.

00:32:43.100 --> 00:32:45.230
This is part of the same effort.

00:32:45.230 --> 00:32:49.680
An instant is just the mode
of the Android App Bundle.

00:32:49.680 --> 00:32:53.600
So what I'm going to do is take
you from an Android App Bundle

00:32:53.600 --> 00:32:56.420
and migrate it to an
instant-enabled Android App

00:32:56.420 --> 00:32:57.104
Bundle.

00:32:57.104 --> 00:32:59.270
And then I'm also going to
start with an instant app

00:32:59.270 --> 00:33:01.394
and show you how you get
to the Android App Bundle.

00:33:04.280 --> 00:33:07.270
All right, so Kobi came up here
and said, you take your APK,

00:33:07.270 --> 00:33:09.287
and you get to an
Android App Bundle.

00:33:09.287 --> 00:33:10.870
And then he also
mentioned that you're

00:33:10.870 --> 00:33:13.000
going to start carving
out code and start

00:33:13.000 --> 00:33:14.780
modularizing your app.

00:33:14.780 --> 00:33:16.450
So as you go through
this process,

00:33:16.450 --> 00:33:18.820
you might notice that
one of your features

00:33:18.820 --> 00:33:20.350
makes a great entry point.

00:33:20.350 --> 00:33:23.650
And you would love that your
users actually instantly jump

00:33:23.650 --> 00:33:25.450
into your app that way.

00:33:25.450 --> 00:33:28.420
So, if your base module and
your dynamic feature module

00:33:28.420 --> 00:33:31.480
are small enough, you can just
make those instant enabled.

00:33:34.240 --> 00:33:37.539
And for all that code that
is in your installed app

00:33:37.539 --> 00:33:39.830
that you're not ready to have
part of your instant app,

00:33:39.830 --> 00:33:42.370
you're going to wrap that
as a dynamic feature module,

00:33:42.370 --> 00:33:46.030
and you're just going to make
it available at install time.

00:33:46.030 --> 00:33:48.130
And there you have
it, one binary

00:33:48.130 --> 00:33:51.730
that is both an instant
app and an installed app.

00:33:51.730 --> 00:33:53.530
Now let's see what
this looks like

00:33:53.530 --> 00:33:55.930
if you're one of the
instant app developers

00:33:55.930 --> 00:33:57.824
that I see in the
audience today.

00:33:57.824 --> 00:33:59.990
So you probably have something
that looks like this.

00:33:59.990 --> 00:34:01.750
You have a zip file.

00:34:01.750 --> 00:34:05.200
It has both a base feature
module, potentially another

00:34:05.200 --> 00:34:07.054
feature module.

00:34:07.054 --> 00:34:09.429
And you're going to take--
and you did all this hard work

00:34:09.429 --> 00:34:12.179
to decrease the
binary, to modularize.

00:34:12.179 --> 00:34:13.179
That work is not wasted.

00:34:13.179 --> 00:34:15.130
You're just going to
take that same code,

00:34:15.130 --> 00:34:19.510
and you're just going to make it
part of the Android App Bundle.

00:34:19.510 --> 00:34:22.547
And for all that code that's
in your Installed app, that's

00:34:22.547 --> 00:34:24.130
not in your instant
app, again, you're

00:34:24.130 --> 00:34:26.530
going to wrap it as a
dynamic feature module,

00:34:26.530 --> 00:34:30.400
and just make sure it's
available at install time.

00:34:30.400 --> 00:34:31.000
There you are.

00:34:31.000 --> 00:34:32.380
Again, you have
one binary that's

00:34:32.380 --> 00:34:34.840
both an instant app
and installed app.

00:34:34.840 --> 00:34:36.489
So now Karen's going
to talk about what

00:34:36.489 --> 00:34:38.920
this looks like in Android
Studio and the tooling that

00:34:38.920 --> 00:34:40.630
is coming soon to
help you do just that.

00:34:43.500 --> 00:34:46.426
KAREN NG: Thanks, Jonathan.

00:34:46.426 --> 00:34:48.300
So let's take the same
view of the app bundle

00:34:48.300 --> 00:34:49.649
that we saw earlier.

00:34:49.649 --> 00:34:51.679
If you're going to relate
it, an instant app,

00:34:51.679 --> 00:34:53.940
and relate it to an
Android App Bundle,

00:34:53.940 --> 00:34:55.409
what would that look like?

00:34:55.409 --> 00:34:57.190
So as Jonathan
mentioned, at this point,

00:34:57.190 --> 00:35:00.360
you already have a
pretty modular app,

00:35:00.360 --> 00:35:03.240
built using the existing
Android Studio plug-ins.

00:35:03.240 --> 00:35:06.120
You have a base feature and
a set of feature modules.

00:35:06.120 --> 00:35:08.700
It relates really nicely
to the Android App Bundle.

00:35:08.700 --> 00:35:12.330
The only difference is that
your base feature is now

00:35:12.330 --> 00:35:15.930
com.android.application, and
that your feature modules are

00:35:15.930 --> 00:35:20.070
just using the Gradle plug-in,
com.android.dynamic-feature.

00:35:20.070 --> 00:35:21.570
In the future,
we'll be releasing

00:35:21.570 --> 00:35:24.450
tooling to support full
unification of these two

00:35:24.450 --> 00:35:25.380
formats.

00:35:25.380 --> 00:35:30.450
Your Android App Bundle will
simply be instant-enabled.

00:35:30.450 --> 00:35:32.490
So regardless of
where you start from,

00:35:32.490 --> 00:35:36.870
if it's an instant app moving
to an Android App Bundle

00:35:36.870 --> 00:35:39.630
or an Android App Bundle that
wants to be instant-enabled,

00:35:39.630 --> 00:35:41.860
you're going to be covered.

00:35:41.860 --> 00:35:44.520
So as I mentioned
earlier, dynamic features,

00:35:44.520 --> 00:35:47.330
you can build them today in
Android Studio, building apps

00:35:47.330 --> 00:35:48.540
with dynamic features.

00:35:48.540 --> 00:35:51.762
But if you do want to
publish them to production,

00:35:51.762 --> 00:35:53.220
they're still
available as preview,

00:35:53.220 --> 00:35:56.580
and you need to join the beta
program on the Play Store.

00:35:56.580 --> 00:36:00.450
At the same time that we're
releasing dynamic features

00:36:00.450 --> 00:36:02.160
and making them fully
available, we'll

00:36:02.160 --> 00:36:05.100
also be working on the tooling
to instant-enable your app

00:36:05.100 --> 00:36:06.570
bundle.

00:36:06.570 --> 00:36:08.340
Now let me invite
Matt back up here

00:36:08.340 --> 00:36:11.900
to talk more about the future.

00:36:11.900 --> 00:36:13.432
[APPLAUSE]

00:36:13.432 --> 00:36:14.390
MATT HENDERSON: Thanks.

00:36:18.390 --> 00:36:21.590
So we've talked about
big changes coming today.

00:36:21.590 --> 00:36:24.830
Firstly, much leaner
apps are possible,

00:36:24.830 --> 00:36:27.830
and there's no more multi APK.

00:36:27.830 --> 00:36:31.940
And secondly, dynamic
features are out as a beta.

00:36:31.940 --> 00:36:34.910
Now I'd like to encourage
you to imagine how you'll

00:36:34.910 --> 00:36:38.720
use these capabilities in the
future and make use of them

00:36:38.720 --> 00:36:41.330
for your own app.

00:36:41.330 --> 00:36:45.080
So as you've heard, using the
Android App Bundle and Google

00:36:45.080 --> 00:36:48.230
Play Dynamic Delivery, you'll
be able to create highly

00:36:48.230 --> 00:36:51.200
configurable,
modularized apps that

00:36:51.200 --> 00:36:55.260
can be adapted to different
users and different use cases.

00:36:55.260 --> 00:37:00.140
So your preliminary experience
can be lean and instant,

00:37:00.140 --> 00:37:03.530
with additional features
provided to users, on demand,

00:37:03.530 --> 00:37:05.150
as they need it.

00:37:05.150 --> 00:37:07.700
Which of your
features are only used

00:37:07.700 --> 00:37:08.915
by a fraction of your users?

00:37:12.480 --> 00:37:15.780
The capabilities will allow you
to create different versions

00:37:15.780 --> 00:37:20.250
of the same feature for
different device types,

00:37:20.250 --> 00:37:23.130
such as low memory and
high memory devices.

00:37:26.620 --> 00:37:30.550
It will also enable you
to do live experimentation

00:37:30.550 --> 00:37:33.400
with different versions
of the same functionality

00:37:33.400 --> 00:37:36.080
without making your app bigger.

00:37:36.080 --> 00:37:39.190
And you can find out which
variant works the best

00:37:39.190 --> 00:37:41.310
and fuels your success.

00:37:41.310 --> 00:37:45.580
What sensitive user journeys in
your app, like a checkout path,

00:37:45.580 --> 00:37:49.780
could benefit from that
sort of experimentation?

00:37:49.780 --> 00:37:53.680
We're moving away from a
world of giant installs

00:37:53.680 --> 00:37:57.760
to a world of modular app
development, instant app

00:37:57.760 --> 00:38:01.090
experiences, and
dynamic delivery.

00:38:01.090 --> 00:38:06.400
Apps will be richer, yet they'll
be smaller and more efficient,

00:38:06.400 --> 00:38:10.420
both on disk and over the wire.

00:38:10.420 --> 00:38:12.580
We encourage you
to start thinking

00:38:12.580 --> 00:38:16.540
about how you'll use these
capabilities to improve

00:38:16.540 --> 00:38:20.650
your install conversion, start
thinking about how you'll

00:38:20.650 --> 00:38:24.520
use these capabilities to
lower your uninstall rates,

00:38:24.520 --> 00:38:28.510
and start thinking about how
you'll use them to build richer

00:38:28.510 --> 00:38:32.140
experiences that help
you to improve engagement

00:38:32.140 --> 00:38:32.780
with your app.

00:38:35.450 --> 00:38:37.670
Android apps are evolving.

00:38:37.670 --> 00:38:39.830
And we're excited
to see what you can

00:38:39.830 --> 00:38:41.750
build with these capabilities.

00:38:41.750 --> 00:38:43.110
And we start today.

00:38:43.110 --> 00:38:46.820
All developers can now
build Android App Bundles,

00:38:46.820 --> 00:38:50.630
in the latest Canary release
of Android Studio 3.2,

00:38:50.630 --> 00:38:52.940
and upload them to
the Play Console.

00:38:52.940 --> 00:38:57.290
You don't need to refactor
your app to get started.

00:38:57.290 --> 00:39:02.030
You can get started on the
web at g.co/androidAppBundle.

00:39:02.030 --> 00:39:05.030
And you can get started with
modularization and dynamic

00:39:05.030 --> 00:39:07.430
features in the Canary, too.

00:39:07.430 --> 00:39:09.140
Those who are ready
to start publishing

00:39:09.140 --> 00:39:11.960
apps with dynamic
features can apply

00:39:11.960 --> 00:39:14.360
to join the beta on the website.

00:39:14.360 --> 00:39:17.180
To find out more, attend the
session right after this one,

00:39:17.180 --> 00:39:20.030
on stage two, where our
engineering team are going

00:39:20.030 --> 00:39:22.670
to share some technical
deep-dives about building

00:39:22.670 --> 00:39:26.930
the bundle and using
the new client library,

00:39:26.930 --> 00:39:29.390
enabling dynamic delivery.

00:39:29.390 --> 00:39:31.643
Thanks, and have a great IO.

00:39:31.643 --> 00:39:34.058
[APPLAUSE]

00:39:34.058 --> 00:39:37.720
[UPBEAT MUSIC PLAYING]

