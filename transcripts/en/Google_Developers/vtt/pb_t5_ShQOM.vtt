WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.880
[MUSIC PLAYING]

00:00:12.196 --> 00:00:13.630
IKAI LAN: Hey everybody.

00:00:13.630 --> 00:00:16.190
Welcome to another edition of
YouTube Developers Live.

00:00:16.190 --> 00:00:17.770
My name is Ikai Lan.

00:00:17.770 --> 00:00:19.480
IBRAHIM ULUKAYA: And this
is Ibrahim Ulukaya.

00:00:19.480 --> 00:00:22.190
IKAI LAN: And today what we're
going to be talking about is

00:00:22.190 --> 00:00:25.720
using IDEs with the YouTube
API samples.

00:00:25.720 --> 00:00:28.050
Now, after I'm done with that,
Ibrahim's going to talk a

00:00:28.050 --> 00:00:31.240
little bit about the YouTube
samples and the code--

00:00:31.240 --> 00:00:32.980
the code and the samples
themselves.

00:00:32.980 --> 00:00:35.813
But for the first part of this,
I was really excited to

00:00:35.813 --> 00:00:38.050
do the show because a lot of
what we're going to talk about

00:00:38.050 --> 00:00:40.990
is also going to be applicable
to many of the APIs that we

00:00:40.990 --> 00:00:41.540
have available.

00:00:41.540 --> 00:00:43.970
For instance, if you want to
work with Google Drive API,

00:00:43.970 --> 00:00:47.230
you could use many of the same
steps to import into your IDE.

00:00:47.230 --> 00:00:49.890
And if it isn't clear, we're
talking about Java.

00:00:49.890 --> 00:00:52.640
So the two IDEs that I'll be
using today are going to be

00:00:52.640 --> 00:00:54.880
Eclipse and IntelliJ.

00:00:54.880 --> 00:00:57.360
So with that, are you
ready to being?

00:00:57.360 --> 00:00:58.040
IBRAHIM ULUKAYA:
Sure, let's go.

00:00:58.040 --> 00:01:00.320
IKAI LAN: So I'm going to take
my trusty laptop here and put

00:01:00.320 --> 00:01:01.550
it into my lap.

00:01:01.550 --> 00:01:05.990
And this is running OS X, but
these commands should more or

00:01:05.990 --> 00:01:09.530
less be the exact same across
platform, because I think that

00:01:09.530 --> 00:01:12.460
Eclipse and IntelliJ have done
a really good job of more or

00:01:12.460 --> 00:01:14.990
less making the experience the
same across the different

00:01:14.990 --> 00:01:16.540
development platforms.

00:01:16.540 --> 00:01:18.900
It's just that on some platforms
if I were to do

00:01:18.900 --> 00:01:21.030
anything on the command line,
I might have slightly

00:01:21.030 --> 00:01:23.510
different commands or I would
have to do things a little bit

00:01:23.510 --> 00:01:24.460
differently.

00:01:24.460 --> 00:01:26.270
So what we're looking
at right now is the

00:01:26.270 --> 00:01:28.700
YouTube API samples page.

00:01:28.700 --> 00:01:31.930
This is a Google Code project
that contains all of our

00:01:31.930 --> 00:01:33.120
sample projects.

00:01:33.120 --> 00:01:36.280
So it includes our sample code
that show you how to do basic

00:01:36.280 --> 00:01:39.220
things such as uploading a
video, posting a bulletin,

00:01:39.220 --> 00:01:40.570
doing a search--

00:01:40.570 --> 00:01:43.090
basically, a lot of things
you want to do.

00:01:43.090 --> 00:01:44.310
So how do you get
to this page?

00:01:44.310 --> 00:01:47.745
Well, you go to code.google.com/

00:01:47.745 --> 00:01:52.200
p/youtube-api-samples, or you
can just search for YouTube

00:01:52.200 --> 00:01:54.840
API samples and what will happen
is this will be one of

00:01:54.840 --> 00:01:56.110
the top results.

00:01:56.110 --> 00:01:56.970
Now my samples--

00:01:56.970 --> 00:01:59.840
or my search results might be
ordered differently from

00:01:59.840 --> 00:02:03.290
yours, but it'll be on the
first page for sure.

00:02:03.290 --> 00:02:05.410
So now that we're on this page,
we want to download the

00:02:05.410 --> 00:02:07.020
samples here from download
samples.

00:02:07.020 --> 00:02:09.400
And you'll see that we have a
.zip file here that we can

00:02:09.400 --> 00:02:11.120
click and start downloading
samples.

00:02:11.120 --> 00:02:13.385
I've already done this, and I've
already unzipped it to

00:02:13.385 --> 00:02:14.690
save us some time.

00:02:14.690 --> 00:02:17.220
Now let's start talking
about--

00:02:17.220 --> 00:02:18.840
oops, let's start talking
about Eclipse.

00:02:18.840 --> 00:02:20.960
Eclipse is one of the most
popular Java IDEs.

00:02:20.960 --> 00:02:22.830
I mean, it's free.

00:02:22.830 --> 00:02:24.240
You've got lots of different
options.

00:02:24.240 --> 00:02:25.930
There are many, many plug-ins.

00:02:25.930 --> 00:02:28.190
What I'm running here is I'm
running a newer version of

00:02:28.190 --> 00:02:31.050
Eclipse, so let's take a look
at what version I'm running.

00:02:31.050 --> 00:02:34.130
I'm running Eclipse Kepler,
and this is either

00:02:34.130 --> 00:02:36.410
Eclipse 4.2 or 4.3.

00:02:36.410 --> 00:02:38.430
What's important is that--

00:02:38.430 --> 00:02:39.780
excuse me--

00:02:39.780 --> 00:02:42.150
we're using something nowadays
to bundle all of our samples

00:02:42.150 --> 00:02:43.160
called Maven.

00:02:43.160 --> 00:02:46.595
If you've never used Maven
before, Maven is a Java build

00:02:46.595 --> 00:02:49.780
and distribution system that
effectively you configure an

00:02:49.780 --> 00:02:51.310
XML file-- and I'll show
you a little bit of

00:02:51.310 --> 00:02:52.640
what this looks like--

00:02:52.640 --> 00:02:53.810
of all your dependencies.

00:02:53.810 --> 00:02:55.705
And when you're building, Maven
will check to see if

00:02:55.705 --> 00:02:58.560
those dependencies exist on
your system and in your

00:02:58.560 --> 00:03:00.240
library, in your code.

00:03:00.240 --> 00:03:02.050
If they do not, it's going
to go to the internet.

00:03:02.050 --> 00:03:04.380
It's going to download these
sources, and it's going update

00:03:04.380 --> 00:03:05.110
your build path.

00:03:05.110 --> 00:03:08.150
So you include the appropriate
.jar files and dependencies

00:03:08.150 --> 00:03:09.430
when you're compiling
your code.

00:03:09.430 --> 00:03:12.790
And this is really a huge deal,
I think, because prior

00:03:12.790 --> 00:03:15.380
to this we were using Ant, and
we used to tell people, well,

00:03:15.380 --> 00:03:17.550
go find this .jar file, go
find this .jar file, and

00:03:17.550 --> 00:03:20.560
compile this, and that's kind
of crazy, don't you think?

00:03:20.560 --> 00:03:22.360
It's like you've got to go
around, and you've got to play

00:03:22.360 --> 00:03:24.970
this Where's Waldo game to
find your dependencies.

00:03:24.970 --> 00:03:26.800
And Maven makes this
really easy.

00:03:26.800 --> 00:03:29.740
A second thing is that with
Maven there's a very defined

00:03:29.740 --> 00:03:33.120
kind of structure for what your
projects more or less

00:03:33.120 --> 00:03:37.120
look like, and this makes it
really easy for IDEs to import

00:03:37.120 --> 00:03:38.040
your project.

00:03:38.040 --> 00:03:39.870
So I'm going to show you
what this means.

00:03:39.870 --> 00:03:41.800
I've already imported a few
projects here, but that's

00:03:41.800 --> 00:03:44.240
because this is for Ibrahim
afterwards to walk us

00:03:44.240 --> 00:03:45.150
through some code.

00:03:45.150 --> 00:03:48.380
So what I'm going to do right
now is I'm going to go ahead,

00:03:48.380 --> 00:03:50.810
and I'm going to import
the YouTube

00:03:50.810 --> 00:03:52.860
command line search sample.

00:03:52.860 --> 00:03:54.050
And how do we do this?

00:03:54.050 --> 00:03:57.510
Well, again, I'm running
Eclipse Kepler.

00:03:57.510 --> 00:04:02.050
Most versions of Eclipse past
4.2 for Java, these will

00:04:02.050 --> 00:04:04.530
include the m2eclipse plug-in.

00:04:04.530 --> 00:04:06.540
If you're using an older
version of Eclipse--

00:04:06.540 --> 00:04:08.950
I'm going to go back to
Chrome real quick--

00:04:08.950 --> 00:04:10.450
you'll need to install
m2eclipse.

00:04:10.450 --> 00:04:12.240
You need to install this
plug-in if you don't

00:04:12.240 --> 00:04:13.160
already have it.

00:04:13.160 --> 00:04:15.690
And the way you do this is the
same as the way you would

00:04:15.690 --> 00:04:21.529
install most Java plug-ins where
you copy the URL, you go

00:04:21.529 --> 00:04:28.650
to Eclipse, you click on Help,
install new software, put in

00:04:28.650 --> 00:04:32.060
the URL, click Add, name it
something-- m2eclipse.

00:04:36.330 --> 00:04:38.390
This will go ahead and try
to connect to the site.

00:04:38.390 --> 00:04:39.410
You click on it.

00:04:39.410 --> 00:04:41.630
You click Next.

00:04:41.630 --> 00:04:43.030
It's going to calculate
dependencies.

00:04:43.030 --> 00:04:45.820
This could take a long time,
depending on what you're

00:04:45.820 --> 00:04:46.380
installing.

00:04:46.380 --> 00:04:48.305
But you just kind of click
through the menus until this

00:04:48.305 --> 00:04:49.200
thing installs.

00:04:49.200 --> 00:04:50.790
I'm not going to show you how to
do this, because I already

00:04:50.790 --> 00:04:53.800
have Maven integration
on my laptop.

00:04:53.800 --> 00:04:54.850
So we're just going to
go ahead and start

00:04:54.850 --> 00:04:56.470
importing the project.

00:04:56.470 --> 00:05:00.010
So I'm going to click
file, import.

00:05:00.010 --> 00:05:03.350
And what you want to select is
existing Maven projects.

00:05:03.350 --> 00:05:06.690
So if it doesn't show up right
away-- and it shows up because

00:05:06.690 --> 00:05:10.700
I was just working on this--
type in Maven in the filter,

00:05:10.700 --> 00:05:14.446
and this will filter down to
every kind of import step that

00:05:14.446 --> 00:05:15.050
includes the word Maven.

00:05:15.050 --> 00:05:18.520
And again, you want to select
existing Maven projects.

00:05:18.520 --> 00:05:21.060
I'm going to click next.

00:05:21.060 --> 00:05:22.930
Now we're going to browse
the root directory

00:05:22.930 --> 00:05:23.700
of the samples folder.

00:05:23.700 --> 00:05:26.500
I put this in my downloads
directory, so let's go ahead,

00:05:26.500 --> 00:05:28.570
and let's go to my home
directory-- ooh, there's a lot

00:05:28.570 --> 00:05:30.200
of stuff in here.

00:05:30.200 --> 00:05:32.700
We're going to go
to downloads.

00:05:32.700 --> 00:05:34.620
I'm going to go to
youtube-api.samples--

00:05:34.620 --> 00:05:36.685
this is what it unzips into.

00:05:36.685 --> 00:05:38.520
I'm going to click
on samples, Java.

00:05:38.520 --> 00:05:39.860
We have all of our samples
in all different

00:05:39.860 --> 00:05:40.760
languages on here.

00:05:40.760 --> 00:05:42.290
Now I'm going to go into
a search sample.

00:05:42.290 --> 00:05:44.643
Now that I'm in the root of the
directory, I'm going go

00:05:44.643 --> 00:05:47.740
ahead and click Open.

00:05:47.740 --> 00:05:50.210
And notice that there's
a pom.xml.

00:05:50.210 --> 00:05:51.550
If you've used Maven before,
you should be

00:05:51.550 --> 00:05:52.570
familiar with this file.

00:05:52.570 --> 00:05:55.010
It defines the dependencies.

00:05:55.010 --> 00:05:56.750
But if you don't know what this,
don't worry too much

00:05:56.750 --> 00:05:58.140
about it for now.

00:05:58.140 --> 00:06:00.600
I'm going to go ahead and click
Finish, and it's going

00:06:00.600 --> 00:06:03.450
to go and start importing this
project into my sample.

00:06:03.450 --> 00:06:06.360
Now this went pretty quickly
because I've already done this

00:06:06.360 --> 00:06:09.630
before, but on your first time
doing this it might take a

00:06:09.630 --> 00:06:12.395
little bit longer, because what
Maven does is it looks to

00:06:12.395 --> 00:06:13.810
see what the dependencies are.

00:06:13.810 --> 00:06:17.020
And it goes ahead and it
downloads into a local cache

00:06:17.020 --> 00:06:17.830
on a local machine.

00:06:17.830 --> 00:06:19.830
If you already have those
dependencies, it's basically

00:06:19.830 --> 00:06:21.010
just copying a file.

00:06:21.010 --> 00:06:23.036
If you don't have these, that's
when it has to connect

00:06:23.036 --> 00:06:25.060
to the internet and download
the dependencies.

00:06:25.060 --> 00:06:26.390
So when I open search.java--

00:06:26.390 --> 00:06:29.150
and I have a humongous font--

00:06:29.150 --> 00:06:30.350
I've got a bunch of
imports here.

00:06:30.350 --> 00:06:33.460
And you see that I didn't
have to do anything--

00:06:33.460 --> 00:06:35.450
Maven just automatically
included all of these

00:06:35.450 --> 00:06:39.790
dependencies even though these
are not in the .zip file.

00:06:39.790 --> 00:06:41.850
So I can go ahead and-- and you
can see that I don't have

00:06:41.850 --> 00:06:42.930
any errors--

00:06:42.930 --> 00:06:46.920
run this code by going
to Run, Run.

00:06:46.920 --> 00:06:48.170
Enter a search term.

00:06:50.840 --> 00:06:53.120
I'm surprised that worked, but I
think it's because I already

00:06:53.120 --> 00:06:56.460
edited this code earlier.

00:06:56.460 --> 00:06:59.870
There's a youtube.properties
where you enter an API key,

00:06:59.870 --> 00:07:03.490
and that's why this code
is able to work.

00:07:03.490 --> 00:07:06.140
So let me just open up a quick
file so you can see what this

00:07:06.140 --> 00:07:06.840
looks like.

00:07:06.840 --> 00:07:14.510
This is pom.xml, and let's
open up the raw XML.

00:07:14.510 --> 00:07:17.260
And this is an XML file that
defines all the different

00:07:17.260 --> 00:07:21.150
dependencies that your project
has as well as where to go to

00:07:21.150 --> 00:07:21.720
download these.

00:07:21.720 --> 00:07:26.430
So you're saying, oh, you've got
to go to Maven repository.

00:07:26.430 --> 00:07:28.740
And you're going to go
ahead and download--

00:07:28.740 --> 00:07:32.280
we need Google API services, we
need the YouTube client, we

00:07:32.280 --> 00:07:35.640
need Google HTTP client, and it
kind of recursively goes in

00:07:35.640 --> 00:07:38.300
and downloads the dependencies
of those projects.

00:07:38.300 --> 00:07:41.410
So it's a very, very helpful
tool for running code.

00:07:41.410 --> 00:07:44.280
As you could see, I put in
that code really quickly.

00:07:44.280 --> 00:07:46.520
Whereas if I weren't using Maven
I'd have to go through a

00:07:46.520 --> 00:07:51.060
bunch of steps of configuring
.jar dependencies and just

00:07:51.060 --> 00:07:53.510
copying files around until I get
the right mix of things to

00:07:53.510 --> 00:07:54.690
make it work.

00:07:54.690 --> 00:07:56.710
So that's how you do
this in Eclipse.

00:07:56.710 --> 00:07:58.050
IBRAHIM ULUKAYA: Actually,
I have a question

00:07:58.050 --> 00:07:58.555
if you don't mind.

00:07:58.555 --> 00:07:59.490
IKAI LAN: Absolutely.

00:07:59.490 --> 00:08:01.715
IBRAHIM ULUKAYA: In doing that,
do you actually specify

00:08:01.715 --> 00:08:05.390
a resource in Maven repository
doing that, or is it getting

00:08:05.390 --> 00:08:09.266
it from a central Maven
repository?

00:08:09.266 --> 00:08:12.270
IKAI LAN: There is kind of like
a Maven central where a

00:08:12.270 --> 00:08:13.760
lot of very common
packages are.

00:08:13.760 --> 00:08:16.440
Now, there are ways to configure
Maven to go to

00:08:16.440 --> 00:08:17.870
different repositories.

00:08:17.870 --> 00:08:20.960
I don't think we're doing
that in pom.xml.

00:08:20.960 --> 00:08:23.240
For running the samples, it's
not important because

00:08:23.240 --> 00:08:25.225
everything we've done should
just work out of the box.

00:08:25.225 --> 00:08:25.765
IBRAHIM ULUKAYA: Perfect.

00:08:25.765 --> 00:08:26.960
IKAI LAN: Yeah.

00:08:26.960 --> 00:08:28.360
You do need an internet
connection.

00:08:28.360 --> 00:08:30.550
So it becomes a little bit
tricky if you work in a

00:08:30.550 --> 00:08:34.190
company where you have a proxy,
right, because network

00:08:34.190 --> 00:08:36.020
proxies are kind of crazy.

00:08:36.020 --> 00:08:38.380
Like, you've got all kinds of
different levels of proxies.

00:08:38.380 --> 00:08:40.669
You've got proxy settings in
your browser, proxy settings

00:08:40.669 --> 00:08:43.400
at your system level, and a
whole bunch of other places

00:08:43.400 --> 00:08:46.180
where you can modify proxy
settings, and this causes lots

00:08:46.180 --> 00:08:47.240
of craziness to happen.

00:08:47.240 --> 00:08:50.520
So, unfortunately, debugging
network proxy is out of the

00:08:50.520 --> 00:08:51.335
scope of this show.

00:08:51.335 --> 00:08:54.580
I'm trying to move relatively
quickly, so let's go ahead and

00:08:54.580 --> 00:08:56.130
talk about IntelliJ.

00:08:56.130 --> 00:09:01.090
So IntelliJ is probably
my favorite IDE.

00:09:01.090 --> 00:09:06.520
This is a product that I pay
for for doing random stuff.

00:09:06.520 --> 00:09:07.470
Even though we're
going to open--

00:09:07.470 --> 00:09:09.960
I could probably try to apply
for an open source license,

00:09:09.960 --> 00:09:16.010
but because IntelliJ IDEA Pro
is something that costs for

00:09:16.010 --> 00:09:17.960
personal development,
I think, like $200.

00:09:17.960 --> 00:09:21.480
But JetBrains, the company
behind IntelliJ, has made a

00:09:21.480 --> 00:09:25.290
community version that is
extremely good, and it's free.

00:09:25.290 --> 00:09:27.505
So anyone can go ahead and
download this, and I'll show

00:09:27.505 --> 00:09:28.820
you what I'm talking about--

00:09:28.820 --> 00:09:31.490
IntelliJ IDEA.

00:09:31.490 --> 00:09:34.150
And well, they say
it's the best.

00:09:34.150 --> 00:09:36.670
I mean, they're arguably
biased, but it's

00:09:36.670 --> 00:09:38.040
a pretty good IDE.

00:09:38.040 --> 00:09:41.080
We click on download, you'll
see that, oh, there's an

00:09:41.080 --> 00:09:43.110
ultimate addition, and this is
the addition that you have to

00:09:43.110 --> 00:09:43.890
buy a license for.

00:09:43.890 --> 00:09:46.280
But there's a free community
edition, and even though they

00:09:46.280 --> 00:09:50.400
say it's lightweight,
it's very powerful.

00:09:50.400 --> 00:09:52.620
So let's go back to--

00:09:52.620 --> 00:09:53.790
this is still Eclipse.

00:09:53.790 --> 00:09:54.750
I get confused.

00:09:54.750 --> 00:09:55.500
Let's go back.

00:09:55.500 --> 00:09:56.650
I'm all confused now
because I have

00:09:56.650 --> 00:09:58.250
different weird font sizes.

00:09:58.250 --> 00:09:59.780
So we'll open up IntelliJ.

00:09:59.780 --> 00:10:01.710
This is the main screen
you see when you

00:10:01.710 --> 00:10:03.060
first open up IntelliJ.

00:10:03.060 --> 00:10:06.660
And how do we import the samples
so that we can start

00:10:06.660 --> 00:10:07.530
writing code?

00:10:07.530 --> 00:10:10.280
Again, even though we're doing
this with YouTube API samples,

00:10:10.280 --> 00:10:12.860
you could do this with most of
the samples that we have on

00:10:12.860 --> 00:10:15.820
developers.google.com as long
as you're using Maven.

00:10:15.820 --> 00:10:18.190
You can do this with BigQuery,
Drive API, and

00:10:18.190 --> 00:10:19.590
so on and so forth.

00:10:19.590 --> 00:10:23.470
So I'm now going to go ahead
and click Import Project.

00:10:23.470 --> 00:10:23.840
I cheated--

00:10:23.840 --> 00:10:24.660
I already browsed to this.

00:10:24.660 --> 00:10:26.540
But, again, it's downloads,
YouTube API

00:10:26.540 --> 00:10:28.570
samples, samples, Java.

00:10:28.570 --> 00:10:31.210
And let's do something else.

00:10:31.210 --> 00:10:34.940
I'm going to go ahead and let's
import myuploads.sample.

00:10:34.940 --> 00:10:37.180
This little m here, this
is the Maven symbol.

00:10:37.180 --> 00:10:39.780
Let's go ahead and click OK.

00:10:39.780 --> 00:10:42.440
And by default, it might
say create project

00:10:42.440 --> 00:10:43.540
from existing sources.

00:10:43.540 --> 00:10:46.060
You want to make sure to select
import project from

00:10:46.060 --> 00:10:47.610
external model.

00:10:47.610 --> 00:10:50.290
We are using Maven, so
we select Maven.

00:10:50.290 --> 00:10:53.520
We click next, and now you've
got a whole bunch of different

00:10:53.520 --> 00:10:56.130
settings, and you can tweak
these as needed.

00:10:56.130 --> 00:10:58.080
I don't think I need to change
these too much, so I'm just

00:10:58.080 --> 00:10:59.450
going to go ahead
and click next.

00:10:59.450 --> 00:11:00.710
Now it's going to ask
you which Maven

00:11:00.710 --> 00:11:02.010
project you want to import.

00:11:02.010 --> 00:11:03.870
The Maven project we want to
import-- well, it's the name

00:11:03.870 --> 00:11:04.720
of the project you
want to run.

00:11:04.720 --> 00:11:05.560
In this case, it's
youtube-cmdline-

00:11:05.560 --> 00:11:06.810
myuploads.sample.

00:11:08.920 --> 00:11:13.860
So now I'm going
to click Next.

00:11:13.860 --> 00:11:16.643
And on your first time you're
running IntelliJ, you're going

00:11:16.643 --> 00:11:18.450
to need to specify which
JDK you're using.

00:11:18.450 --> 00:11:21.060
So what's kind of
cool is that--

00:11:21.060 --> 00:11:22.570
this is just a default
Mac one.

00:11:22.570 --> 00:11:24.710
If you don't know where the path
is, just go on Google and

00:11:24.710 --> 00:11:28.440
look for how to configure
default JDK for IntelliJ IDEA,

00:11:28.440 --> 00:11:31.450
or your favorite search engine,
if it's not Google.

00:11:31.450 --> 00:11:32.310
Project name.

00:11:32.310 --> 00:11:33.430
I know this seems like
a lot, but this

00:11:33.430 --> 00:11:34.440
actually very, very easy.

00:11:34.440 --> 00:11:37.340
In most cases, you don't need
to change anything here.

00:11:37.340 --> 00:11:39.790
Click next, no frameworks,
finished.

00:11:39.790 --> 00:11:43.050
Now we're going to go ahead
and start importing this.

00:11:43.050 --> 00:11:46.850
And what you'll see is when I
start opening this up, I'm

00:11:46.850 --> 00:11:49.870
opening up the Java file.

00:11:49.870 --> 00:11:51.830
I'm surprised it worked
right away.

00:11:51.830 --> 00:11:53.940
It shouldn't have worked right
away, because it should have

00:11:53.940 --> 00:11:58.100
been like, oh, well, you haven't
defined Jackson or any

00:11:58.100 --> 00:11:59.490
of these client libraries.

00:11:59.490 --> 00:12:02.290
But because I'm using Maven
and I've already run this

00:12:02.290 --> 00:12:03.920
before, it's gone and it's
downloaded all of the

00:12:03.920 --> 00:12:06.020
dependencies and all of the
libraries you need to run the

00:12:06.020 --> 00:12:06.880
sample code.

00:12:06.880 --> 00:12:09.700
So let's see what we
need to do here.

00:12:09.700 --> 00:12:11.880
When you're running the myupload
sample, you need make

00:12:11.880 --> 00:12:13.420
changes to client_secrets.json.

00:12:13.420 --> 00:12:14.280
And this shouldn't
work, because I

00:12:14.280 --> 00:12:15.990
recently reset this key.

00:12:15.990 --> 00:12:18.190
But I'm going to go ahead
and run this now.

00:12:21.220 --> 00:12:28.420
MyUploads, it's going to build
everything, and there.

00:12:28.420 --> 00:12:32.960
It's taken me through the OAuth
authorization flow, and

00:12:32.960 --> 00:12:35.460
it has bombed out, because I'm
using an invalid client ID,

00:12:35.460 --> 00:12:37.650
but don't worry too much
about that right now.

00:12:37.650 --> 00:12:40.070
The point is that you don't have
compilation errors, and

00:12:40.070 --> 00:12:42.010
things are working right away.

00:12:42.010 --> 00:12:44.150
Maven has a bunch of
other features.

00:12:44.150 --> 00:12:46.680
So when you right click on your
project, you can scroll

00:12:46.680 --> 00:12:49.150
down to Maven, and you can see
some of the different things

00:12:49.150 --> 00:12:51.550
you could do.

00:12:51.550 --> 00:12:54.010
You can reimport things if
somehow you've messed things

00:12:54.010 --> 00:12:56.010
up, if you've deleted
the local .jars.

00:12:56.010 --> 00:12:59.230
You can generate sources, and
you can just do a lot of

00:12:59.230 --> 00:13:00.310
different things in Maven.

00:13:00.310 --> 00:13:02.540
So this is IntelliJ IDEA.

00:13:02.540 --> 00:13:05.650
There's just a lot things I like
about this product, which

00:13:05.650 --> 00:13:09.440
I like their approach to
a lot of things you

00:13:09.440 --> 00:13:10.500
want to do in an IDE.

00:13:10.500 --> 00:13:13.490
But then again, it's up to you
which one you want to use.

00:13:13.490 --> 00:13:16.590
Both IntelliJ IDEA and Eclipse
are very good options.

00:13:16.590 --> 00:13:18.540
I simply prefer to use IntelliJ
for a bunch of

00:13:18.540 --> 00:13:19.830
personal reasons.

00:13:19.830 --> 00:13:22.240
So that's all I have for now.

00:13:22.240 --> 00:13:24.790
So if you have any questions
about how to do any of this

00:13:24.790 --> 00:13:26.730
stuff, do find us on Stack
Overflow using

00:13:26.730 --> 00:13:28.840
the youtube-api tag.

00:13:28.840 --> 00:13:30.570
What I'm going to do now is
I'm going to close down

00:13:30.570 --> 00:13:32.890
IntelliJ, and I'm going to
hand this laptop over to

00:13:32.890 --> 00:13:34.780
Ibrahim because he
uses Eclipse.

00:13:34.780 --> 00:13:35.810
I'm trying to convert
him, and he's

00:13:35.810 --> 00:13:36.880
actually pretty open minded.

00:13:36.880 --> 00:13:38.530
He said, yeah, I'll
give it a try.

00:13:38.530 --> 00:13:40.843
But for this show he's going to
be using Eclipse because he

00:13:40.843 --> 00:13:41.910
knows it a little bit better.

00:13:41.910 --> 00:13:44.030
So let's go ahead and
do that right now.

00:13:44.030 --> 00:13:47.650
I'm going to minimize
my browser, and

00:13:47.650 --> 00:13:50.060
let's open up Eclipse.

00:13:50.060 --> 00:13:51.200
And I'm going to hand
this over to you.

00:13:51.200 --> 00:13:52.796
IBRAHIM ULUKAYA: Cool, thanks.

00:13:52.796 --> 00:13:54.940
IKAI LAN: Did you have any
questions about that?

00:13:54.940 --> 00:13:56.360
Hopefully, that was
very clear, and

00:13:56.360 --> 00:13:57.090
I was able to explain.

00:13:57.090 --> 00:13:58.540
IBRAHIM ULUKAYA: I think
that was clear.

00:13:58.540 --> 00:14:01.570
So far I was using the command
line of Maven, but using this

00:14:01.570 --> 00:14:04.395
way, I think it will make
my life much easier.

00:14:04.395 --> 00:14:07.600
IKAI LAN: What I actually do is
I do something different,

00:14:07.600 --> 00:14:11.050
where when I'm developing I used
the Maven plug-in, so in

00:14:11.050 --> 00:14:12.700
my IDE it imports things
correctly.

00:14:12.700 --> 00:14:14.870
But I still also use the
command line heavily.

00:14:14.870 --> 00:14:17.370
I use the command line for doing
things, because I prefer

00:14:17.370 --> 00:14:19.820
to use the command line for
source control and just doing

00:14:19.820 --> 00:14:20.330
these builds.

00:14:20.330 --> 00:14:21.830
But again, it's all personal
preference.

00:14:21.830 --> 00:14:23.780
Some people like
GUIs and IDEs.

00:14:23.780 --> 00:14:26.250
I like a mix of an IDE and
command line based

00:14:26.250 --> 00:14:27.275
environment.

00:14:27.275 --> 00:14:28.430
IBRAHIM ULUKAYA: Perfect.

00:14:28.430 --> 00:14:29.080
IKAI LAN: All right.

00:14:29.080 --> 00:14:29.850
Take it away, man.

00:14:29.850 --> 00:14:31.780
IBRAHIM ULUKAYA: OK, great.

00:14:31.780 --> 00:14:34.700
So far, Ikai has made
my life so easier--

00:14:34.700 --> 00:14:37.760
upload, import everything,
everything's super set up, all

00:14:37.760 --> 00:14:41.190
the dependencies are ready,
so I think I'm good to go.

00:14:41.190 --> 00:14:44.580
Now we can just look at our
code a little bit and see

00:14:44.580 --> 00:14:46.030
everything we've done.

00:14:46.030 --> 00:14:49.430
Maybe we can just see and
go through our code and

00:14:49.430 --> 00:14:53.850
understand how it will
augment in YouTube,

00:14:53.850 --> 00:14:56.120
how we develop stuff.

00:14:56.120 --> 00:14:59.190
So actually, I will start with
search, and I will to the

00:14:59.190 --> 00:15:02.740
other three examples of
MyUploads in subscription and

00:15:02.740 --> 00:15:04.300
uploading video.

00:15:04.300 --> 00:15:06.510
And search is a little bit
different by authorization,

00:15:06.510 --> 00:15:11.130
because you'll use just an API
key, but for other stuff,

00:15:11.130 --> 00:15:13.680
other examples, we'll be
using the OAuth 2.0.

00:15:13.680 --> 00:15:16.410
So we will have a client_secrets
kind of

00:15:16.410 --> 00:15:19.710
authorization going through.

00:15:19.710 --> 00:15:21.670
Let's look at the code
a little bit.

00:15:21.670 --> 00:15:24.970
So in this one, in the search,
everything starts with

00:15:24.970 --> 00:15:26.590
authorization, basically.

00:15:26.590 --> 00:15:29.030
We'll create or you could build
a class, which is the

00:15:29.030 --> 00:15:33.090
class, actually, to create
our YouTube object.

00:15:33.090 --> 00:15:35.120
And this is like the
main class you need

00:15:35.120 --> 00:15:35.670
to like deal with.

00:15:35.670 --> 00:15:38.720
And it will create the YouTube
object that will be

00:15:38.720 --> 00:15:42.620
interacting all over the YouTube
development phase.

00:15:42.620 --> 00:15:46.700
So we initialize the class,
giving the HTTP request.

00:15:46.700 --> 00:15:50.340
We set our application name
as an identifier.

00:15:50.340 --> 00:15:53.150
And we build the class, so all
builders like [INAUDIBLE] or

00:15:53.150 --> 00:15:55.170
YouTube object is all ready.

00:15:55.170 --> 00:16:01.590
For this one, we will need to
have the credentials early,

00:16:01.590 --> 00:16:04.320
because we'll be just
using an API key.

00:16:04.320 --> 00:16:10.710
So the YouTube model, we'll just
go to the object YouTube

00:16:10.710 --> 00:16:15.640
search method to give us
the search object.

00:16:15.640 --> 00:16:19.460
And since we want to do like
a search, we'll do

00:16:19.460 --> 00:16:21.450
a list of the search.

00:16:21.450 --> 00:16:25.130
So we created the YouTube search
list object by using

00:16:25.130 --> 00:16:26.440
the YouTube search list.

00:16:26.440 --> 00:16:30.150
And anything we want to give
as the parameters, optional

00:16:30.150 --> 00:16:34.720
parameters, these are the
resources we want to get back

00:16:34.720 --> 00:16:36.530
from all searches out.

00:16:36.530 --> 00:16:39.090
So we want the ID and snippet
to be returned back.

00:16:39.090 --> 00:16:41.300
IKAI LAN: Now, is this list
object compatible

00:16:41.300 --> 00:16:43.800
with Java util list?

00:16:43.800 --> 00:16:43.820
IBRAHIM ULUKAYA: No.

00:16:43.820 --> 00:16:44.900
It is not a Java util list.

00:16:44.900 --> 00:16:48.110
Maybe there could be
like a small--

00:16:48.110 --> 00:16:50.650
people tend to get confused
about it, but it's the YouTube

00:16:50.650 --> 00:16:52.270
search list object.

00:16:52.270 --> 00:16:56.070
So I'd really like, actually,
rather than importing all the

00:16:56.070 --> 00:16:57.610
way to the [INAUDIBLE]

00:16:57.610 --> 00:17:01.100
Google YouTube search list, I
would rather just go to the

00:17:01.100 --> 00:17:06.660
way it was before the YouTube,
so you will be able to see any

00:17:06.660 --> 00:17:07.290
lists in your screen.

00:17:07.290 --> 00:17:09.450
You can see, actually, it's
YouTube.search.list.

00:17:09.450 --> 00:17:11.760
IKAI LAN: That's a
very good tip.

00:17:11.760 --> 00:17:15.030
IBRAHIM ULUKAYA: If you don't
do it, I think, you may see

00:17:15.030 --> 00:17:16.589
the list in both ways,
and you may get

00:17:16.589 --> 00:17:17.710
confused really easily.

00:17:17.710 --> 00:17:17.950
IKAI LAN: Exactly.

00:17:17.950 --> 00:17:19.839
That's a really good tip.

00:17:19.839 --> 00:17:22.130
Thank you for that.

00:17:22.130 --> 00:17:24.319
IBRAHIM ULUKAYA: So since we're
doing get authorized

00:17:24.319 --> 00:17:26.230
before, we will use
the API key.

00:17:26.230 --> 00:17:28.820
For this example, for the sake
of this example, we just get

00:17:28.820 --> 00:17:31.690
the API key from a
property object.

00:17:31.690 --> 00:17:36.200
And we set it to all
search object.

00:17:36.200 --> 00:17:38.480
We create the search
object by the list.

00:17:38.480 --> 00:17:41.740
And we want to actually have
a query term, because it's

00:17:41.740 --> 00:17:43.530
either from the user--

00:17:43.530 --> 00:17:46.010
for this example, we just
get it from the

00:17:46.010 --> 00:17:47.450
user, the query term.

00:17:47.450 --> 00:17:49.980
We want, actually, for this one,
we just want the videos

00:17:49.980 --> 00:17:52.420
to be returned, not the
playlist or channels.

00:17:52.420 --> 00:17:54.090
For this one, just videos.

00:17:54.090 --> 00:17:56.160
We set the type.

00:17:56.160 --> 00:17:59.130
The field is an optional
parameter, if you want just

00:17:59.130 --> 00:18:01.330
the few fields to be returned
rather than

00:18:01.330 --> 00:18:04.380
everything in that resource.

00:18:04.380 --> 00:18:07.450
We want that one, we set
the maximum resource.

00:18:07.450 --> 00:18:10.550
And after we set all these
objects, and we make it ready

00:18:10.550 --> 00:18:14.040
for execution, all we need
to do is execute.

00:18:14.040 --> 00:18:16.420
And this time, we execute it.

00:18:16.420 --> 00:18:21.620
And since it's a source list
execution, it will return us

00:18:21.620 --> 00:18:23.390
the list of search results.

00:18:23.390 --> 00:18:25.610
Not to confuse, this time we
are using the Java list.

00:18:25.610 --> 00:18:26.590
IKAI LAN: Now this time
it's a Java list.

00:18:26.590 --> 00:18:27.240
IBRAHIM ULUKAYA: Yeah.

00:18:27.240 --> 00:18:28.610
This time is a Java list.

00:18:28.610 --> 00:18:33.570
So since we named the other one
as YouTube.search.list, so

00:18:33.570 --> 00:18:36.390
it is obvious that this time we
are using the other list.

00:18:36.390 --> 00:18:39.370
IKAI LAN: So just to clarify, a
YouTube.search.list, you're

00:18:39.370 --> 00:18:41.600
not actually creating an
object that's a list.

00:18:41.600 --> 00:18:43.300
You're creating an
API request doc.

00:18:43.300 --> 00:18:44.280
IBRAHIM ULUKAYA: Yeah.

00:18:44.280 --> 00:18:46.150
IKAI LAN: Because the API
request, if you look at the

00:18:46.150 --> 00:18:48.460
URI when you go to the
API explorer, it

00:18:48.460 --> 00:18:50.270
is slash list, right?

00:18:50.270 --> 00:18:52.420
It's very in this kind
of RESTful style.

00:18:52.420 --> 00:18:54.860
So again, that is a
request object.

00:18:54.860 --> 00:18:57.960
And this is an actual
list of objects.

00:18:57.960 --> 00:18:58.100
IBRAHIM ULUKAYA: Yeah.

00:18:58.100 --> 00:19:00.320
The one we created first
was a request object.

00:19:00.320 --> 00:19:02.520
And this one is actually
our response.

00:19:02.520 --> 00:19:06.560
So any time, the way we'll be
going on all these examples is

00:19:06.560 --> 00:19:09.110
we will be creating the
request, modify it if

00:19:09.110 --> 00:19:13.145
necessary, and once we do the
execution, after execution we

00:19:13.145 --> 00:19:14.895
will get like a response
object.

00:19:17.430 --> 00:19:21.150
This object here is like a type
of list search results.

00:19:21.150 --> 00:19:24.860
So we will have all the search
results inside our list.

00:19:24.860 --> 00:19:28.390
And we can, for this example,
we can just go over the list

00:19:28.390 --> 00:19:33.642
and get all the things we want
inside the object, which will

00:19:33.642 --> 00:19:36.250
be like search results.

00:19:36.250 --> 00:19:39.700
I will move over, and I will
just go to other examples,

00:19:39.700 --> 00:19:43.670
actually going through the
OAuth2, which is the suggested

00:19:43.670 --> 00:19:46.700
way of using our APIs.

00:19:46.700 --> 00:19:48.670
IKAI LAN: So one nice thing
about this while he's setting

00:19:48.670 --> 00:19:52.090
up this project I'll talk about
is that I really like

00:19:52.090 --> 00:19:53.140
the Python client.

00:19:53.140 --> 00:19:54.670
I think it reads
really nicely.

00:19:54.670 --> 00:19:55.710
It's very concise.

00:19:55.710 --> 00:19:57.530
It works really well.

00:19:57.530 --> 00:19:59.930
You do have some advantages
when you're using the Java

00:19:59.930 --> 00:20:03.690
client, which is that you have
type safety, which allows the

00:20:03.690 --> 00:20:05.430
autocomplete to be
somewhat useful.

00:20:05.430 --> 00:20:07.780
Now, this can also be
frustrating in some instances

00:20:07.780 --> 00:20:10.860
when you make an API request and
you must pass a specific

00:20:10.860 --> 00:20:13.150
instance of a certain
type of object.

00:20:13.150 --> 00:20:15.440
But while you're learning the
API, just having autocomplete

00:20:15.440 --> 00:20:18.530
to say YouTube dot search dot
what are my methods, oh, is it

00:20:18.530 --> 00:20:19.660
the right number of parameters,

00:20:19.660 --> 00:20:20.960
it's very, very helpful.

00:20:20.960 --> 00:20:23.440
So there's kind of
win and lose.

00:20:23.440 --> 00:20:23.530
IBRAHIM ULUKAYA: Yeah.

00:20:23.530 --> 00:20:27.970
I think when I first started
doing my own examples on the

00:20:27.970 --> 00:20:30.820
Python, it was fast,
and it was good.

00:20:30.820 --> 00:20:33.170
But on the other hand, like when
I'm stuck somewhere, and

00:20:33.170 --> 00:20:36.360
I don't know which is the right
object type, that was a

00:20:36.360 --> 00:20:38.770
time that I was like, oh,
maybe Java would be much

00:20:38.770 --> 00:20:40.200
easier that way.

00:20:40.200 --> 00:20:40.440
IKAI LAN: Right.

00:20:40.440 --> 00:20:43.470
And definitely use the YouTube
API explorer that's on

00:20:43.470 --> 00:20:47.220
developers.google.com to kind of
figure out what to pass in,

00:20:47.220 --> 00:20:49.100
because your alternative is
you're writing code and

00:20:49.100 --> 00:20:49.840
testing, writing code
and testing.

00:20:49.840 --> 00:20:53.270
The YouTube API explorer, it
will deal with the-- it will

00:20:53.270 --> 00:20:54.460
manage the authentication
for you.

00:20:54.460 --> 00:20:55.790
And you can try different
things until you find a

00:20:55.790 --> 00:20:57.950
combination that works.

00:20:57.950 --> 00:21:00.470
IBRAHIM ULUKAYA: And in
documents it says which ones

00:21:00.470 --> 00:21:03.800
are the required parameters,
which are the optionals.

00:21:03.800 --> 00:21:04.930
So definitely go there.

00:21:04.930 --> 00:21:08.300
Definitely go whenever you are
stuck in something that you

00:21:08.300 --> 00:21:11.090
are not sure what kind of
parameter you want to pass, or

00:21:11.090 --> 00:21:14.710
you are getting responses like
bad request, definitely go

00:21:14.710 --> 00:21:18.110
there and check it out, which
is the right one.

00:21:18.110 --> 00:21:19.490
IKAI LAN: So what are
we looking at now?

00:21:19.490 --> 00:21:20.540
IBRAHIM ULUKAYA: It
is my uploads.

00:21:20.540 --> 00:21:23.530
So we want to try to get like
all the uploads related to our

00:21:23.530 --> 00:21:25.080
own channel.

00:21:25.080 --> 00:21:28.480
So this one, we will use, as I
explained, the OAuth2 kind of

00:21:28.480 --> 00:21:30.920
authorization from
a client secret.

00:21:30.920 --> 00:21:35.670
For installed applications, we
use this [INAUDIBLE], using

00:21:35.670 --> 00:21:39.860
the authorization code flow,
which actually when you

00:21:39.860 --> 00:21:43.140
actually run the client and run
the user, wants to use our

00:21:43.140 --> 00:21:48.780
application, he uses own
identity and logins that he

00:21:48.780 --> 00:21:51.290
authorizes with his identity.

00:21:51.290 --> 00:21:54.200
And once it's passed, we will
save the identity to the

00:21:54.200 --> 00:21:58.560
client sequence JSON, not the
password, not the user name,

00:21:58.560 --> 00:21:59.930
just the token.

00:21:59.930 --> 00:22:03.130
IKAI LAN: Again, not the user
name and not the password.

00:22:03.130 --> 00:22:04.300
This is very important.

00:22:04.300 --> 00:22:05.750
IBRAHIM ULUKAYA: Yeah, this
is like the approved way.

00:22:05.750 --> 00:22:10.380
We don't want to save users'
credentials in this way.

00:22:10.380 --> 00:22:11.510
So we try to check it.

00:22:11.510 --> 00:22:14.960
And for this example, if the
client sequence file is

00:22:14.960 --> 00:22:17.880
nonexistent, we try to
get it from the user.

00:22:17.880 --> 00:22:19.570
And once we get it,
we want to--

00:22:19.570 --> 00:22:21.520
IKAI LAN: Let's just browse
to it real quick.

00:22:21.520 --> 00:22:24.690
If you need to edit this, it's
in source, main resources.

00:22:24.690 --> 00:22:25.940
Its client_sequence.json.

00:22:31.610 --> 00:22:34.420
I was considering refactoring
this to use a properties file,

00:22:34.420 --> 00:22:37.920
just because it's kind of silly
in this instance how

00:22:37.920 --> 00:22:39.950
we're loading Jackson
just so we can load

00:22:39.950 --> 00:22:41.515
this one tiny JSON.

00:22:41.515 --> 00:22:43.470
IBRAHIM ULUKAYA: That would
be much easier.

00:22:43.470 --> 00:22:44.870
IKAI LAN: Not a huge deal,
though, I don't think,

00:22:44.870 --> 00:22:46.560
especially since we're
using Maven.

00:22:46.560 --> 00:22:46.850
IBRAHIM ULUKAYA: Yeah.

00:22:46.850 --> 00:22:48.830
Maven will be doing all the--

00:22:48.830 --> 00:22:53.420
so from our JSON once we sent it
over there, we were able to

00:22:53.420 --> 00:22:56.440
just read it as a credentials
store.

00:22:56.440 --> 00:22:59.330
And what we will do is we will
pass these credentials, but we

00:22:59.330 --> 00:23:02.530
will set the credential to our
Google authorization code

00:23:02.530 --> 00:23:05.210
flow, which will do the
flow for ourselves.

00:23:05.210 --> 00:23:07.720
And we will have the local
receiver for it.

00:23:07.720 --> 00:23:12.690
And here at this line, since we
are using an installed app

00:23:12.690 --> 00:23:19.960
and in the API console we set it
as an installed app, using

00:23:19.960 --> 00:23:23.820
the credentials, we were able
to use this flow, use the

00:23:23.820 --> 00:23:27.130
local receiver we just created
in this line, and

00:23:27.130 --> 00:23:29.030
authorize the user.

00:23:29.030 --> 00:23:35.085
At this line, once the user puts
his authorization, gives

00:23:35.085 --> 00:23:38.120
that authorization with
the right scopes--

00:23:38.120 --> 00:23:40.550
it's really important to use
with the right scopes.

00:23:40.550 --> 00:23:43.610
You may have problems if you
don't use the right scopes,

00:23:43.610 --> 00:23:48.950
which you will also find in
the documentation, which

00:23:48.950 --> 00:23:52.490
scopes are needed for what
kind of requests.

00:23:52.490 --> 00:23:58.420
Here we have for this one, we
have the Google API slash

00:23:58.420 --> 00:24:02.390
OAuth slash YouTube scope,
which is both

00:24:02.390 --> 00:24:06.230
read and write scope.

00:24:06.230 --> 00:24:08.050
This is like the full
authorization.

00:24:08.050 --> 00:24:11.250
There is also the actual three
scopes I will go over today,

00:24:11.250 --> 00:24:13.650
the YouTube.readonly, which
will only give read-only

00:24:13.650 --> 00:24:16.270
access, and YouTube.upload,
which is

00:24:16.270 --> 00:24:18.590
able to upload videos.

00:24:18.590 --> 00:24:22.180
So using the previous method
we authorized, now we are

00:24:22.180 --> 00:24:25.420
ready to go and do the similar
way as we did before.

00:24:25.420 --> 00:24:28.210
We created our YouTube
builder object.

00:24:28.210 --> 00:24:30.670
And look at this small
difference here.

00:24:30.670 --> 00:24:33.800
We actually pass our
credentials, since we

00:24:33.800 --> 00:24:36.260
authorized with that
credential.

00:24:36.260 --> 00:24:39.170
And we don't need to set API
keys anymore, since we are

00:24:39.170 --> 00:24:40.510
already authorized.

00:24:40.510 --> 00:24:42.650
This one is like
we did before.

00:24:42.650 --> 00:24:46.180
We will create a channel request
object, channel list

00:24:46.180 --> 00:24:47.310
request object.

00:24:47.310 --> 00:24:49.970
You want to return the
contact details.

00:24:49.970 --> 00:24:55.100
And we want only my videos, my
channel's content, basically.

00:24:55.100 --> 00:24:56.800
And we'll set mine to true.

00:25:00.290 --> 00:25:03.100
IKAI LAN: And set mine true just
means return my uploads.

00:25:03.100 --> 00:25:03.340
IBRAHIM ULUKAYA: Yeah.

00:25:03.340 --> 00:25:04.620
Just my uploads.

00:25:04.620 --> 00:25:07.240
Basically, for this one, my
channel and my uploads.

00:25:07.240 --> 00:25:10.110
IKAI LAN: And when you look
inside the API explorer, what

00:25:10.110 --> 00:25:13.540
this maps to is a field that
says mine, true or false.

00:25:13.540 --> 00:25:16.340
IBRAHIM ULUKAYA: Yeah.

00:25:16.340 --> 00:25:19.810
And as we did before,
we will create the

00:25:19.810 --> 00:25:21.610
channel request object.

00:25:21.610 --> 00:25:22.280
And we execute it.

00:25:22.280 --> 00:25:26.670
And this one, again, we will
return the list of Java

00:25:26.670 --> 00:25:30.390
utilities kind of channels.

00:25:30.390 --> 00:25:35.365
If you go to the channel
resource in the documents, you

00:25:35.365 --> 00:25:38.350
will be able to see the
resources like the contact

00:25:38.350 --> 00:25:40.100
details, snippet ID.

00:25:40.100 --> 00:25:43.050
And inside contact details,
there's a field

00:25:43.050 --> 00:25:45.450
called related playlists.

00:25:45.450 --> 00:25:48.120
So we want to actually get from
that channel's response,

00:25:48.120 --> 00:25:49.060
which is [INAUDIBLE]

00:25:49.060 --> 00:25:51.170
I'll be able to get all
my channel back.

00:25:51.170 --> 00:25:54.160
So I will go through and get my
uploads inside the channel,

00:25:54.160 --> 00:25:57.440
which is a playlist
called uploads.

00:25:57.440 --> 00:25:59.310
IKAI LAN: So this is something
that's a little bit confusing

00:25:59.310 --> 00:26:01.440
to people, which is, how
do I fetch my uploads?

00:26:01.440 --> 00:26:03.130
They're now a playlist.

00:26:03.130 --> 00:26:05.310
And they're now specifically
a related

00:26:05.310 --> 00:26:07.260
playlist and an upload.

00:26:07.260 --> 00:26:08.700
So this is to be aware of.

00:26:08.700 --> 00:26:12.170
People are always asking us,
how do I get my uploads?

00:26:12.170 --> 00:26:14.700
You make a get playlist
call essentially.

00:26:14.700 --> 00:26:14.930
IBRAHIM ULUKAYA: Yes.

00:26:14.930 --> 00:26:17.400
Some people are confused, and
they want to go to videos and

00:26:17.400 --> 00:26:19.980
try to search from there, but
the right way is going to the

00:26:19.980 --> 00:26:22.300
channels and get it from that.

00:26:22.300 --> 00:26:24.460
So inside the get playlist
there is an

00:26:24.460 --> 00:26:25.950
upload field as well.

00:26:25.950 --> 00:26:29.690
And with this one, we were able
to get my upload, which

00:26:29.690 --> 00:26:31.280
is a playlist.

00:26:31.280 --> 00:26:35.450
So now, since we have a list
of playlist items, which

00:26:35.450 --> 00:26:40.710
playlist actually has items
of playlist item.

00:26:40.710 --> 00:26:45.740
And every item is essentially
like it's a video or another

00:26:45.740 --> 00:26:47.100
item in it.

00:26:47.100 --> 00:26:48.790
And this is where, actually,
you will be able to get all

00:26:48.790 --> 00:26:54.010
the upload video, since we said
only set mine before.

00:26:54.010 --> 00:26:55.710
In this one, we'll
go through the--

00:26:58.840 --> 00:27:03.020
since now we have the playlist
item list, and not the

00:27:03.020 --> 00:27:06.300
playlist itself, we only get
the playlist up to now.

00:27:06.300 --> 00:27:08.630
Now we want to go into the
playlist and fetch all the

00:27:08.630 --> 00:27:10.200
videos inside it.

00:27:10.200 --> 00:27:14.160
So it's a two-step process.

00:27:14.160 --> 00:27:16.760
So far, we were able to get
the playlists inside.

00:27:16.760 --> 00:27:19.230
And we will get the first
playlist out of there, which

00:27:19.230 --> 00:27:21.170
was our upload playlist.

00:27:21.170 --> 00:27:26.590
And putting the playlist item,
playlist items, that list is

00:27:26.590 --> 00:27:29.960
another request object we
will be using there.

00:27:29.960 --> 00:27:31.090
IKAI LAN: So essentially, what
you're saying is we're making

00:27:31.090 --> 00:27:32.500
two requests to get
up our uploads.

00:27:32.500 --> 00:27:32.980
IBRAHIM ULUKAYA: Yeah.

00:27:32.980 --> 00:27:35.160
First request was
get the channel,

00:27:35.160 --> 00:27:36.880
get the channel request.

00:27:36.880 --> 00:27:40.010
And we get over channel
the uploads, the

00:27:40.010 --> 00:27:41.680
upload playlist ID.

00:27:41.680 --> 00:27:44.220
And once we get that playlist,
now we will go to that

00:27:44.220 --> 00:27:48.510
playlist and request the items
inside that playlist.

00:27:48.510 --> 00:27:50.970
With this one, we
set the fields.

00:27:50.970 --> 00:27:56.540
And now we set page tokens,
because there will be subpages

00:27:56.540 --> 00:27:59.560
over there if you already
had a token before.

00:27:59.560 --> 00:28:01.380
Maybe it will be empty,
or maybe we went

00:28:01.380 --> 00:28:02.820
to the first page.

00:28:02.820 --> 00:28:05.560
And you only get a second
page in the example.

00:28:05.560 --> 00:28:09.730
So we'll go through all the
pages by going with page

00:28:09.730 --> 00:28:11.890
tokens done by [INAUDIBLE].

00:28:11.890 --> 00:28:15.835
Build the loop for that, and
every time you put a new page

00:28:15.835 --> 00:28:18.713
token, we will execute our
request again with the new

00:28:18.713 --> 00:28:20.270
page token.

00:28:20.270 --> 00:28:24.040
And for the sake of this
example, we will add them to a

00:28:24.040 --> 00:28:25.340
normal Java list.

00:28:25.340 --> 00:28:27.830
We will keep populating all
the results we will gain

00:28:27.830 --> 00:28:30.800
through the different pages.

00:28:30.800 --> 00:28:34.320
And once we have all the
requests, we can just print it

00:28:34.320 --> 00:28:36.790
out or we can use which one
we are interested in.

00:28:39.790 --> 00:28:42.550
And that's all I have
for my uploads part.

00:28:42.550 --> 00:28:47.960
I'll do an upload video, which
I was getting questions about

00:28:47.960 --> 00:28:51.910
it before, how we upload video,
especially I was like--

00:28:51.910 --> 00:28:54.220
maybe it's a good time to talk
about it a little bit.

00:28:54.220 --> 00:28:57.440
I was working on
an Android app.

00:28:57.440 --> 00:29:01.670
And some people were asking,
oh, you want to make an

00:29:01.670 --> 00:29:03.880
Android app and upload
some media.

00:29:03.880 --> 00:29:05.160
How are we going
to get samples?

00:29:05.160 --> 00:29:07.980
They couldn't find inside
Android samples,

00:29:07.980 --> 00:29:09.420
that kind of stuff.

00:29:09.420 --> 00:29:12.410
Actually, if you just put this
one into the Android sample,

00:29:12.410 --> 00:29:14.290
it will just work, because
they are both

00:29:14.290 --> 00:29:15.280
using the Java as well.

00:29:15.280 --> 00:29:15.920
IKAI LAN: Yeah.

00:29:15.920 --> 00:29:18.880
And in Android, you can always
also use the upload intent--

00:29:18.880 --> 00:29:19.910
IBRAHIM ULUKAYA:
Yeah, you can.

00:29:19.910 --> 00:29:20.360
IKAI LAN: --which
is really nice.

00:29:20.360 --> 00:29:21.480
IBRAHIM ULUKAYA: You can
just-- totally, yeah.

00:29:21.480 --> 00:29:23.370
IKAI LAN: But there are some
people that do want to do this

00:29:23.370 --> 00:29:23.680
for whatever reason.

00:29:23.680 --> 00:29:23.830
IBRAHIM ULUKAYA: Yeah.

00:29:23.830 --> 00:29:25.520
They want to customize,
and they want to

00:29:25.520 --> 00:29:26.300
create their own uploads.

00:29:26.300 --> 00:29:30.290
But definitely if you want to
use it, test it right away,

00:29:30.290 --> 00:29:31.790
and you want to do
it fast, you can

00:29:31.790 --> 00:29:33.100
just create the intent.

00:29:33.100 --> 00:29:36.080
IKAI LAN: I will say that if you
try rebuilding the intent,

00:29:36.080 --> 00:29:38.280
a lot of engineering work went
into that, like doing the

00:29:38.280 --> 00:29:39.290
background uploads.

00:29:39.290 --> 00:29:41.700
And there's a lot
that can happen.

00:29:41.700 --> 00:29:45.270
When you're uploading using the
intent, it cues up a bunch

00:29:45.270 --> 00:29:48.070
of videos, and it shows you an
upload progress in the bar.

00:29:48.070 --> 00:29:49.940
There's a lot you
have to build.

00:29:49.940 --> 00:29:51.230
It's not a trivial
amount of work.

00:29:51.230 --> 00:29:54.450
So before, first examine if you
can already use intents.

00:29:54.450 --> 00:29:57.070
Intents are one of the best
features of Android.

00:29:57.070 --> 00:30:00.450
And if you're not making
good use of that, well,

00:30:00.450 --> 00:30:02.330
what are you doing?

00:30:02.330 --> 00:30:06.280
Focus on building your app and
not reinventing every single

00:30:06.280 --> 00:30:06.790
[INAUDIBLE].

00:30:06.790 --> 00:30:07.010
IBRAHIM ULUKAYA: Yeah.

00:30:07.010 --> 00:30:08.990
Don't try to reinvent
the wheel.

00:30:08.990 --> 00:30:10.300
First try it.

00:30:10.300 --> 00:30:11.480
Definitely.

00:30:11.480 --> 00:30:16.330
So in this one, we want
to upload a video

00:30:16.330 --> 00:30:17.540
style type of video.

00:30:17.540 --> 00:30:21.310
So actually this is the file
format we will be putting

00:30:21.310 --> 00:30:25.180
while we'll be uploading
the video.

00:30:25.180 --> 00:30:28.610
You want it categorized
as a video.

00:30:28.610 --> 00:30:30.370
As we did before, we
will do the same.

00:30:30.370 --> 00:30:34.144
Authorization levels, this one
the only difference will be we

00:30:34.144 --> 00:30:37.400
will be using a different scope
called YouTube.upload.

00:30:37.400 --> 00:30:41.090
And we create our file.

00:30:41.090 --> 00:30:42.560
It's different from
the other object.

00:30:42.560 --> 00:30:47.120
We have to get a file from our
user, or whatever you want to

00:30:47.120 --> 00:30:48.520
specify the path.

00:30:48.520 --> 00:30:53.145
And once we create the file, in
the video upload request we

00:30:53.145 --> 00:30:55.310
will be using both
the file and the

00:30:55.310 --> 00:30:57.380
metadata at the same time.

00:30:57.380 --> 00:31:00.730
So we will be able to the set
the properties and the

00:31:00.730 --> 00:31:03.596
metadata while uploading
the video itself.

00:31:03.596 --> 00:31:08.395
We created the new video, which
is the video object we

00:31:08.395 --> 00:31:11.610
will be standing
over the wire.

00:31:11.610 --> 00:31:13.110
And we want it to be public.

00:31:13.110 --> 00:31:15.400
We set this private status.

00:31:15.400 --> 00:31:18.720
It's a video status object,
so as we explained before,

00:31:18.720 --> 00:31:20.680
everything here will be
like an object, every

00:31:20.680 --> 00:31:23.350
field we want to create.

00:31:23.350 --> 00:31:26.190
Maybe if you guys are using it
as a dictionary in Python,

00:31:26.190 --> 00:31:29.330
here we will be using
as an object for

00:31:29.330 --> 00:31:31.770
all of these fields.

00:31:31.770 --> 00:31:34.340
It's a video status object, if
you want to set the status.

00:31:34.340 --> 00:31:36.930
And we can set status public.

00:31:36.930 --> 00:31:40.570
We set it to the metadata we
want to really push it, which

00:31:40.570 --> 00:31:41.930
is the video.

00:31:41.930 --> 00:31:44.350
It's the video object.

00:31:44.350 --> 00:31:46.940
We want to set the
snippet as well.

00:31:46.940 --> 00:31:47.860
We create--

00:31:47.860 --> 00:31:50.280
just from a calendar, we
just get today's date

00:31:50.280 --> 00:31:51.680
or any date we want.

00:31:51.680 --> 00:31:54.855
We set snippet as title,
description.

00:31:57.450 --> 00:32:01.620
And there was a question of how
we put the text inside.

00:32:01.620 --> 00:32:04.750
And you will put the text inside
the snippet as a list,

00:32:04.750 --> 00:32:08.840
as a Java list, or a special
list, Java util list.

00:32:08.840 --> 00:32:09.910
And [INAUDIBLE]

00:32:09.910 --> 00:32:11.770
just for this example.

00:32:11.770 --> 00:32:15.150
And we set the snippet with all
the text, the title, the

00:32:15.150 --> 00:32:16.640
description.

00:32:16.640 --> 00:32:20.610
And you want to push
it to YouTube.

00:32:20.610 --> 00:32:22.130
IKAI LAN: Right.

00:32:22.130 --> 00:32:23.800
So I noticed that this
is just taking a

00:32:23.800 --> 00:32:25.420
standard input stream.

00:32:25.420 --> 00:32:28.320
So what we're doing in this
sample is we're specifically

00:32:28.320 --> 00:32:29.620
loading from a file.

00:32:29.620 --> 00:32:32.240
But if you somehow have a
different input stream, like

00:32:32.240 --> 00:32:35.120
say you're loading from a
database and you have that as

00:32:35.120 --> 00:32:37.600
an input stream, or an alternate
data source,

00:32:37.600 --> 00:32:41.110
anything that's compatible
with the input stream

00:32:41.110 --> 00:32:43.460
interface should be able
to-- you just drop

00:32:43.460 --> 00:32:44.610
and replace the code.

00:32:44.610 --> 00:32:44.700
IBRAHIM ULUKAYA: Yeah.

00:32:44.700 --> 00:32:46.290
Definitely.

00:32:46.290 --> 00:32:48.230
As long as there's in input
stream interface that

00:32:48.230 --> 00:32:51.290
implemented, you can just
use it right away.

00:32:51.290 --> 00:32:52.590
You can plug it in.

00:32:52.590 --> 00:32:56.820
So for this one, we want to
create an insert request which

00:32:56.820 --> 00:33:02.690
is YouTube videos insert, and
we want to return for this

00:33:02.690 --> 00:33:06.350
example snippets status fields
on the way back.

00:33:06.350 --> 00:33:09.770
And what we want to put is, we
want to put the input stream

00:33:09.770 --> 00:33:11.960
as well as the metadata
as I explained.

00:33:11.960 --> 00:33:13.910
So metadata is here.

00:33:13.910 --> 00:33:15.890
Input stream you already
got from the user.

00:33:15.890 --> 00:33:19.680
We created the file put
this input stream.

00:33:19.680 --> 00:33:24.680
And we have a Google's own
metadata HTTP uploader you can

00:33:24.680 --> 00:33:25.490
use right away.

00:33:25.490 --> 00:33:27.010
It's from the video insert.

00:33:27.010 --> 00:33:30.320
You can get the HTTP uploader
from that if you

00:33:30.320 --> 00:33:33.600
want to use that one.

00:33:33.600 --> 00:33:38.370
So this is a tricky part if you
want to use a resumable

00:33:38.370 --> 00:33:42.120
upload, which is the premier,
or if you want to use the

00:33:42.120 --> 00:33:47.950
simple normal previous upload,
which tries to do the upload

00:33:47.950 --> 00:33:51.160
as one huge chunk.

00:33:51.160 --> 00:33:54.360
If you do want to use the
resumable one, it has some

00:33:54.360 --> 00:34:00.450
nice features, like you can
also track the progress of

00:34:00.450 --> 00:34:01.700
your upload.

00:34:01.700 --> 00:34:04.350
You can create, like in this
example, create a progress

00:34:04.350 --> 00:34:08.179
listener, which will be like
at every stage of the

00:34:08.179 --> 00:34:10.190
progress, you will be getting
notifications.

00:34:10.190 --> 00:34:14.510
And you can set display bars,
or you can, in your example,

00:34:14.510 --> 00:34:22.590
show by getting this progress
listener, you can track what

00:34:22.590 --> 00:34:25.150
percentage of upload you have
sent so far, how many bytes

00:34:25.150 --> 00:34:26.460
you have sent for a file.

00:34:26.460 --> 00:34:29.000
You can definitely tell
the user how his

00:34:29.000 --> 00:34:30.070
upload in going on.

00:34:30.070 --> 00:34:33.230
IKAI LAN: On that note, this
is not asynchronous.

00:34:33.230 --> 00:34:35.730
If you are writing for
Android, absolutely,

00:34:35.730 --> 00:34:38.469
absolutely do this in
the background.

00:34:38.469 --> 00:34:40.030
Do not block the UI thread.

00:34:40.030 --> 00:34:42.126
Sometimes I still open
Android apps, and I

00:34:42.126 --> 00:34:43.489
go, who's doing this?

00:34:43.489 --> 00:34:44.810
Don't block UI thread.

00:34:44.810 --> 00:34:45.480
Yeah.

00:34:45.480 --> 00:34:48.530
And it's true of any-- it's
don't ever block the UI thread

00:34:48.530 --> 00:34:51.040
in any mobile application you're
ever writing, be it

00:34:51.040 --> 00:34:52.076
Android or iOS.

00:34:52.076 --> 00:34:54.210
IBRAHIM ULUKAYA: Yeah.

00:34:54.210 --> 00:34:58.390
So like here we implemented
the progress listener.

00:34:58.390 --> 00:35:01.810
And now we set our progress
listener to our uploader.

00:35:01.810 --> 00:35:03.620
And now we are all good to go.

00:35:03.620 --> 00:35:08.610
We will just create our insert
object before, request object

00:35:08.610 --> 00:35:10.550
before, we will just
execute it.

00:35:10.550 --> 00:35:13.880
And the way it will return,
it will return the media

00:35:13.880 --> 00:35:18.520
metadata, the one returned
from the service,

00:35:18.520 --> 00:35:19.790
the response object.

00:35:19.790 --> 00:35:23.600
From that, we can get anything
we want, we ask for, like

00:35:23.600 --> 00:35:25.050
[INAUDIBLE]

00:35:25.050 --> 00:35:26.230
the statistics about it.

00:35:26.230 --> 00:35:26.710
IKAI LAN: Right.

00:35:26.710 --> 00:35:28.710
And the [INAUDIBLE] we would do
if we want to, again, edit

00:35:28.710 --> 00:35:32.560
the video data after the fact,
or add it to a playlist or

00:35:32.560 --> 00:35:34.530
things of that sort.

00:35:34.530 --> 00:35:34.770
Yes.

00:35:34.770 --> 00:35:36.020
So hopefully--

00:35:37.980 --> 00:35:40.210
did you want to show any more
samples, because I just wanted

00:35:40.210 --> 00:35:42.290
to say that we are a little
bit out of time.

00:35:42.290 --> 00:35:44.410
IBRAHIM ULUKAYA: I think that
was like the main one, and it

00:35:44.410 --> 00:35:45.850
will get you definitely
started.

00:35:45.850 --> 00:35:49.410
If you want more later on, we
can go through or you can

00:35:49.410 --> 00:35:51.090
definitely write in
Stack Overflow.

00:35:51.090 --> 00:35:52.640
Or you can just go
to-- actually we

00:35:52.640 --> 00:35:53.840
already gave the link.

00:35:53.840 --> 00:35:57.250
You should definitely go to the
API samples page and check

00:35:57.250 --> 00:35:58.090
it out from there.

00:35:58.090 --> 00:35:58.330
IKAI LAN: Yeah.

00:35:58.330 --> 00:36:01.120
And if you have any ideas for
future shows that you want to

00:36:01.120 --> 00:36:03.880
see, let us know on any
one of these forms.

00:36:03.880 --> 00:36:06.150
Google+ is a very good place to
tell us, hey, you know, I'm

00:36:06.150 --> 00:36:07.560
looking to do this.

00:36:07.560 --> 00:36:09.860
And if it's something that we
think is going to help a lot

00:36:09.860 --> 00:36:11.720
of people, then we'll say,
hey, you know what?

00:36:11.720 --> 00:36:12.930
That sounds like a great
idea for a show.

00:36:12.930 --> 00:36:16.020
So we'll go ahead and we'll get
cranking on that for you.

00:36:16.020 --> 00:36:19.390
So thank you very much for that
introduction and that

00:36:19.390 --> 00:36:21.180
very kind of quick code
walk through.

00:36:21.180 --> 00:36:22.860
I'm hoping that was helpful
to you guys.

00:36:22.860 --> 00:36:24.820
I'm hoping that if you're a
Java developer, it's just

00:36:24.820 --> 00:36:26.880
going to make things a little
bit less intimidating.

00:36:26.880 --> 00:36:29.520
So yeah, thank you guys
very much for

00:36:29.520 --> 00:36:30.580
joining us on the show.

00:36:30.580 --> 00:36:32.740
And we'll see you next time.

00:36:32.740 --> 00:36:34.100
IBRAHIM ULUKAYA: And
one last note.

00:36:34.100 --> 00:36:35.080
We are hiring.

00:36:35.080 --> 00:36:35.600
IKAI LAN: Oh, yeah.

00:36:35.600 --> 00:36:35.920
That's right.

00:36:35.920 --> 00:36:38.147
I always forget this, and they
always get mad at me because I

00:36:38.147 --> 00:36:38.570
don't say it.

00:36:38.570 --> 00:36:39.500
We are hiring.

00:36:39.500 --> 00:36:41.250
It's not just YouTube Developer

00:36:41.250 --> 00:36:42.110
Relations that's hiring.

00:36:42.110 --> 00:36:44.220
We are hiring pretty much across
every single function

00:36:44.220 --> 00:36:45.190
developer relations.

00:36:45.190 --> 00:36:47.150
We are hiring in our
multiple offices.

00:36:47.150 --> 00:36:48.830
We have the most positions
in Mountain View.

00:36:48.830 --> 00:36:50.670
But we also have positions
in New York City, I

00:36:50.670 --> 00:36:52.790
think Tokyo, London.

00:36:52.790 --> 00:36:53.620
IBRAHIM ULUKAYA: All
across the world.

00:36:53.620 --> 00:36:54.090
IKAI LAN: Yeah.

00:36:54.090 --> 00:36:57.000
Yeah Just in all of our
different offices.

00:36:57.000 --> 00:36:58.220
And Seattle.

00:36:58.220 --> 00:36:59.150
I think those are
the main ones.

00:36:59.150 --> 00:37:00.690
Anyway, thank you
guys very much.

00:37:00.690 --> 00:37:02.450
If you have any questions,
find us on Google+

00:37:02.450 --> 00:37:04.420
or on our Plus page.

00:37:04.420 --> 00:37:06.540
Or we sometimes look
at the comments

00:37:06.540 --> 00:37:07.350
on the YouTube videos.

00:37:07.350 --> 00:37:09.890
But we don't check them as
much as we check Plus.

00:37:09.890 --> 00:37:11.350
So thank you guys very much.

00:37:11.350 --> 00:37:13.700
And tell all your friends
about us.

00:37:13.700 --> 00:37:13.990
IBRAHIM ULUKAYA: Definitely.

00:37:13.990 --> 00:37:14.370
IKAI LAN: Thanks.

00:37:14.370 --> 00:37:15.140
Take it easy.

00:37:15.140 --> 00:37:16.390
IBRAHIM ULUKAYA: Have
a good one.

