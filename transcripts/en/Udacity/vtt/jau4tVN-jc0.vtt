WEBVTT
Kind: captions
Language: en

00:00:00.430 --> 00:00:04.210
Now, let's breakdown our monolith
application into micro services.

00:00:04.210 --> 00:00:06.880
Ideally we want to break our
monolith around functionality

00:00:06.880 --> 00:00:08.500
that's self-contained.

00:00:08.500 --> 00:00:10.730
So I create an auth and hello service.

00:00:12.610 --> 00:00:14.830
Each service has its own binary.

00:00:14.830 --> 00:00:17.170
Let's build and run both of them now and

00:00:17.170 --> 00:00:19.710
see what it's like to work with
the new application deployment.

00:00:21.200 --> 00:00:22.690
I'm going to start
with the hello service.

00:00:24.120 --> 00:00:27.060
In a new shell tab,
I'll do the same for the auth service.

00:00:28.740 --> 00:00:32.549
Now that I have both services running,
I can use the curl command

00:00:32.549 --> 00:00:35.550
in a new shell to interact with
the auth and hello micro services.

00:00:37.410 --> 00:00:39.630
Now that we have multiple
binaries to manage for

00:00:39.630 --> 00:00:43.620
our application, our deployment has
been made twice as complex, and

00:00:43.620 --> 00:00:47.290
now our clients need to know how
to talk to two separate services.

00:00:47.290 --> 00:00:50.695
The additional complexity only
grows as the number of services for

00:00:50.695 --> 00:00:52.169
an application increases.

00:00:52.169 --> 00:00:56.071
This problem is exactly what's driving
the adoption of application containers

00:00:56.071 --> 00:00:59.583
and management platforms,
like curbernetties, to coordinate them.

