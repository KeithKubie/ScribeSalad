WEBVTT
Kind: captions
Language: en

00:00:08.420 --> 00:00:08.960
Hi.

00:00:08.960 --> 00:00:11.280
My name is Roman Nurik from the
Android team at Google.

00:00:11.280 --> 00:00:14.040
And in today's design, I'd like
to talk to you about how

00:00:14.040 --> 00:00:17.200
screen pixel density affects
your workflow as an Android

00:00:17.200 --> 00:00:18.510
App Designer.

00:00:18.510 --> 00:00:20.500
Let's take a look.

00:00:20.500 --> 00:00:22.790
So the first thing to understand
is that Android

00:00:22.790 --> 00:00:25.320
devices come in all
shapes and sizes.

00:00:25.320 --> 00:00:27.060
And the screens on these
devices have

00:00:27.060 --> 00:00:29.000
different pixel densities.

00:00:29.000 --> 00:00:33.200
And this number is measured
in dots per inch, or DPI.

00:00:33.200 --> 00:00:37.430
And these pixel densities simply
say in a given square,

00:00:37.430 --> 00:00:40.430
say, inch of space on
the screen, how many

00:00:40.430 --> 00:00:42.260
pixels will fit in?

00:00:42.260 --> 00:00:46.970
And this determines very much
the level of crispness that

00:00:46.970 --> 00:00:49.490
you're going to see graphics and
text and things like that

00:00:49.490 --> 00:00:51.000
on that screen.

00:00:51.000 --> 00:00:54.500
So in this example, here a
couple of different DPI

00:00:54.500 --> 00:00:58.910
values, possible DPI values and
how text, in this case,

00:00:58.910 --> 00:01:01.860
the letter a, would be rendered
on those screens.

00:01:01.860 --> 00:01:04.180
You'll notice that on the higher
density screens, the

00:01:04.180 --> 00:01:08.780
letter A is rendered in a much
more crisp, a much more almost

00:01:08.780 --> 00:01:12.040
correct representation of the
letter A than on the medium

00:01:12.040 --> 00:01:15.420
density screens on the left.

00:01:15.420 --> 00:01:20.340
Now as a designer, these pixel
densities like 165, 234 and so

00:01:20.340 --> 00:01:23.030
on, could be very cumbersome
to work with.

00:01:23.030 --> 00:01:26.160
So fortunately, Android has
created something called

00:01:26.160 --> 00:01:30.340
logical pixel densities, or
buckets of densities that the

00:01:30.340 --> 00:01:35.350
real densities would fall into,
to simplify things.

00:01:35.350 --> 00:01:39.180
So here on screen, you see a
couple of the key, the most

00:01:39.180 --> 00:01:42.240
important logical densities that
you as a designer would

00:01:42.240 --> 00:01:43.590
have to work with.

00:01:43.590 --> 00:01:48.700
So something like, if a real
device had 165 DPI screen,

00:01:48.700 --> 00:01:52.140
that would be mapped
down to 160 DPI.

00:01:52.140 --> 00:01:54.900
And then everything that you
would do from that point on,

00:01:54.900 --> 00:01:57.710
you wouldn't have to worry
about the 165 number.

00:01:57.710 --> 00:02:00.830
You simply think about, oh this
screen I will treat as a

00:02:00.830 --> 00:02:02.750
160 DPI screen.

00:02:02.750 --> 00:02:05.550
And 160 DPI is a
special value.

00:02:05.550 --> 00:02:09.039
It's something called the
baseline density in Android,

00:02:09.039 --> 00:02:11.880
where everything, and
specifically the density

00:02:11.880 --> 00:02:14.580
independent pixel units we'll
talk about in a second, where

00:02:14.580 --> 00:02:18.930
everything is based on this
baseline density.

00:02:18.930 --> 00:02:20.660
So that's 160 DPI.

00:02:20.660 --> 00:02:24.440
At the other far end of the
spectrum currently, the

00:02:24.440 --> 00:02:28.760
highest number, the highest
logical density is extra extra

00:02:28.760 --> 00:02:34.790
high DPI, or XXHDPI, which
is 480 dots per inch.

00:02:34.790 --> 00:02:39.360
And so there are four specific
densities between 160 and 480

00:02:39.360 --> 00:02:41.160
that you should really
be aware of.

00:02:41.160 --> 00:02:45.500
That's 160, 240, 320, and 480.

00:02:45.500 --> 00:02:47.440
And there are a couple that
are not listed here.

00:02:47.440 --> 00:02:52.780
There's LDPI at 120 and TVDPI
at 213, but those are less

00:02:52.780 --> 00:02:53.980
common, and you generally
don't need

00:02:53.980 --> 00:02:56.630
to worry about those.

00:02:56.630 --> 00:02:59.330
So now that we understand
density, let's now talk about

00:02:59.330 --> 00:03:02.070
something that's critical to
designing for Android, and

00:03:02.070 --> 00:03:04.825
that's the density-independent
pixel unit.

00:03:04.825 --> 00:03:08.540
Now, density-independent pixel
units, which are sometimes

00:03:08.540 --> 00:03:13.920
abbreviated as DP, or DIP,
sometimes referred to as DIPs

00:03:13.920 --> 00:03:15.770
in conversation.

00:03:15.770 --> 00:03:18.630
They are a virtual pixel unit,
and they're equivalent to one

00:03:18.630 --> 00:03:19.940
physical pixel--

00:03:19.940 --> 00:03:24.610
that's one physical pixel on the
screen on a MDPI, or 160

00:03:24.610 --> 00:03:26.680
DPI screen.

00:03:26.680 --> 00:03:32.410
And now if you have a single
density independent pixel on a

00:03:32.410 --> 00:03:35.700
MDPI screen, that's one
physical pixel.

00:03:35.700 --> 00:03:39.130
But if you're on a larger
screen, let's say an XHDPI

00:03:39.130 --> 00:03:42.160
screen, it's actually
four pixels, two

00:03:42.160 --> 00:03:44.960
across and two down.

00:03:44.960 --> 00:03:47.890
So why do we use density
independent pixels?

00:03:47.890 --> 00:03:50.000
Well, the reason for that is
that we want to make sure that

00:03:50.000 --> 00:03:53.710
when we create layouts, and
overall kind of define the

00:03:53.710 --> 00:03:57.000
user interface for our
application, we want to make

00:03:57.000 --> 00:04:01.750
sure that UI elements remain
the same physical size,

00:04:01.750 --> 00:04:05.340
approximately, across devices
with different densities.

00:04:05.340 --> 00:04:08.930
We don't want to have to specify
for each individual

00:04:08.930 --> 00:04:12.930
density what the sizes of our
UI elements should be.

00:04:12.930 --> 00:04:15.390
So let's look at an example.

00:04:15.390 --> 00:04:20.760
So here we have 200 dips, and
again, dip units or DP units

00:04:20.760 --> 00:04:24.240
keep things roughly the same
physical size across devices.

00:04:24.240 --> 00:04:29.390
So we have 200 DP units and we
have, let's say, this wide

00:04:29.390 --> 00:04:31.060
purple rectangle
that's spanning

00:04:31.060 --> 00:04:33.780
across a couple devices.

00:04:33.780 --> 00:04:39.150
Now on an MDPI device, like the
tablet you see here, 200

00:04:39.150 --> 00:04:41.750
DPs will actually result
in something that

00:04:41.750 --> 00:04:43.710
is 200 pixels tall.

00:04:43.710 --> 00:04:49.020
So again, one DP is
one pixel at MDPI.

00:04:49.020 --> 00:04:56.440
Now on an XHDPI device like this
Nexus 4 here, the 200 DPs

00:04:56.440 --> 00:04:59.900
will actually become
400 pixels tall.

00:04:59.900 --> 00:05:02.590
And this is actually
built-in behavior.

00:05:02.590 --> 00:05:06.200
If you specify that something
should be 200 DP, it'll be the

00:05:06.200 --> 00:05:09.600
same physical size on
different devices.

00:05:09.600 --> 00:05:12.830
Now one interesting thing about
DP units is that since

00:05:12.830 --> 00:05:16.090
they're the same physical size
across devices, we can start

00:05:16.090 --> 00:05:20.240
representing physical objects
in terms of DPs.

00:05:20.240 --> 00:05:24.270
So for example, the fingertip,
the human fingertip is about

00:05:24.270 --> 00:05:26.120
50 DPs wide.

00:05:26.120 --> 00:05:29.390
Now what that means is that
when you are sizing your

00:05:29.390 --> 00:05:32.700
buttons and other UI elements,
you want to make sure that

00:05:32.700 --> 00:05:36.380
things don't get too small,
small enough to touch.

00:05:36.380 --> 00:05:38.640
You want to make sure they're
about the size of a human

00:05:38.640 --> 00:05:42.250
fingertip so that a regular
person could comfortably press

00:05:42.250 --> 00:05:45.900
that button without making
too many mistakes.

00:05:45.900 --> 00:05:47.830
So let's look at some math
that will help us get

00:05:47.830 --> 00:05:52.240
comfortable with converting
between pixels and DP units.

00:05:52.240 --> 00:05:55.240
Now here's the only real
formula you need.

00:05:55.240 --> 00:05:58.050
To solve for one of the
variables, you simply plug in

00:05:58.050 --> 00:05:59.670
the other two.

00:05:59.670 --> 00:06:02.190
So let's look at
some examples.

00:06:02.190 --> 00:06:05.410
So here's the definition
of DPs.

00:06:05.410 --> 00:06:11.100
One pixel is one dip or one dip
is one pixel at 160 DPI.

00:06:11.100 --> 00:06:13.290
Easy enough.

00:06:13.290 --> 00:06:18.810
Now on a 320 DPI screen, one dip
is actually two pixels--

00:06:18.810 --> 00:06:22.130
two pixels across and
two pixels down.

00:06:22.130 --> 00:06:24.980
So let's actually put this
equation in practice, and look

00:06:24.980 --> 00:06:28.220
at a quick exercise.

00:06:28.220 --> 00:06:32.922
So how big is the 2013
Nexus 7 screen in

00:06:32.922 --> 00:06:35.160
density-independent pixels?

00:06:35.160 --> 00:06:37.980
Now the information we have is
that we know that the screen

00:06:37.980 --> 00:06:40.980
is seven inches across
diagonally.

00:06:40.980 --> 00:06:44.180
We know that it's an XHDPI
screen, meaning

00:06:44.180 --> 00:06:47.260
it's a 320 DPI screen.

00:06:47.260 --> 00:06:51.100
And we also know that the screen
resolution is 1920 by

00:06:51.100 --> 00:06:53.140
1200 pixels.

00:06:53.140 --> 00:06:57.340
And so the first thing you may
want to ask yourself is, what

00:06:57.340 --> 00:06:59.630
information here is necessary?

00:06:59.630 --> 00:07:02.670
Now the fact that it's a seven
inch screen here is not

00:07:02.670 --> 00:07:04.040
actually necessary.

00:07:04.040 --> 00:07:06.920
To calculate the number of
density-independent pixels, we

00:07:06.920 --> 00:07:09.370
don't actually need the diagonal
screen size if we

00:07:09.370 --> 00:07:14.760
have the number of pixels
and the density.

00:07:14.760 --> 00:07:17.480
So if you look at the formula
from before, you'll notice

00:07:17.480 --> 00:07:23.480
that the ratio between XHDPI
and MDPI is two to one.

00:07:23.480 --> 00:07:28.310
So to convert from pixels to DP
units on an XHDPI device,

00:07:28.310 --> 00:07:30.660
you simply divide by two.

00:07:30.660 --> 00:07:35.510
So the answer here is 1920
divided by 2 by 1200 divided

00:07:35.510 --> 00:07:41.810
by 2, or simply 960 by 600
density-independent pixels.

00:07:41.810 --> 00:07:44.760
So you may be asking, what's the
point of this calculation?

00:07:44.760 --> 00:07:47.470
Well, the reason is that
density-independent pixels

00:07:47.470 --> 00:07:51.300
better capture device physical
screen size.

00:07:51.300 --> 00:07:54.190
Pixels could be the same across
devices of different

00:07:54.190 --> 00:07:55.320
screen sizes.

00:07:55.320 --> 00:07:59.150
For example, you can have a
medium-density tablet at 1280

00:07:59.150 --> 00:08:04.890
by 800 pixels, and an extra
high-density phone at 1280 by

00:08:04.890 --> 00:08:06.340
720 pixels.

00:08:06.340 --> 00:08:09.600
And their screen resolutions in
pixels are almost the same.

00:08:09.600 --> 00:08:12.910
But that same phone will
actually have a much smaller

00:08:12.910 --> 00:08:15.950
screen resolution when
looked at in terms of

00:08:15.950 --> 00:08:17.820
density-independent pixels.

00:08:17.820 --> 00:08:23.000
And so density-independent
pixels better capture that.

00:08:23.000 --> 00:08:25.790
So with that, let's move
on to some quick tips

00:08:25.790 --> 00:08:27.850
before we sign off.

00:08:27.850 --> 00:08:32.539
So first, remember to design and
spec all of your layout in

00:08:32.539 --> 00:08:35.929
terms of arrangement of UI
elements, the sizes of

00:08:35.929 --> 00:08:38.000
elements, the positions
of elements.

00:08:38.000 --> 00:08:40.960
Make sure to spec that
all out in DP units.

00:08:40.960 --> 00:08:43.940
It's going to make it a lot
easier for your developers to

00:08:43.940 --> 00:08:47.070
implement things correctly.

00:08:47.070 --> 00:08:49.650
Second, remember that because
there are a number of

00:08:49.650 --> 00:08:53.490
different densities, for optimal
crispness of assets

00:08:53.490 --> 00:08:56.450
you want to make sure that you
provide those graphic assets,

00:08:56.450 --> 00:08:59.740
those PNG files in all the
different densities.

00:08:59.740 --> 00:09:02.430
So here's an example
of a share icon.

00:09:02.430 --> 00:09:04.830
You want to make sure that
you're providing it in four

00:09:04.830 --> 00:09:09.220
different densities, if
possible, in XHDPI all the way

00:09:09.220 --> 00:09:11.050
down to MDPI.

00:09:11.050 --> 00:09:14.430
And to do again the calculation
for the sizes of

00:09:14.430 --> 00:09:17.950
these things, you simply use
the formula we used before.

00:09:17.950 --> 00:09:22.160
So if we know that we want to
have a 32 DP square icon,

00:09:22.160 --> 00:09:26.660
we'll know that on an XXHDPI
device, the asset you need for

00:09:26.660 --> 00:09:31.480
that should be 96
by 96 pixels.

00:09:31.480 --> 00:09:35.050
So that's it on today's design
byte on how screen density,

00:09:35.050 --> 00:09:37.730
and specifically,
density-independent pixels

00:09:37.730 --> 00:09:39.910
should affect your workflow
as a designer.

00:09:39.910 --> 00:09:42.810
Stay tuned for more design bytes
on how to put this into

00:09:42.810 --> 00:09:45.780
practice in tools like
Photoshop and

00:09:45.780 --> 00:09:47.300
Illustrator and so on.

00:09:47.300 --> 00:09:48.550
Thanks.

