WEBVTT
Kind: captions
Language: en

00:00:00.149 --> 00:00:01.690
ERIK ERNST: So my
name is Erik Ernst,

00:00:01.690 --> 00:00:04.000
and I'm a member
of the Dart team.

00:00:04.000 --> 00:00:06.270
And I'm located in Aarhus.

00:00:06.270 --> 00:00:08.500
And we are working
on various tools,

00:00:08.500 --> 00:00:10.430
including the dart2js compiler.

00:00:10.430 --> 00:00:13.610
And you may have
noticed that there's

00:00:13.610 --> 00:00:14.820
an issue about the size.

00:00:14.820 --> 00:00:17.990
So space-frugal reflection
is reflection where it

00:00:17.990 --> 00:00:20.200
doesn't take up so much space.

00:00:20.200 --> 00:00:22.590
So that's the reason why you
might want to stay around

00:00:22.590 --> 00:00:24.200
to listen to this talk.

00:00:24.200 --> 00:00:26.050
If you've had this
conflict that you

00:00:26.050 --> 00:00:27.900
want to have dynamic
code-- for instance,

00:00:27.900 --> 00:00:29.510
if you want to
invoke a method, you

00:00:29.510 --> 00:00:31.810
don't want to decide
upfront at compile time

00:00:31.810 --> 00:00:35.330
exactly what the name of
the method is-- in that case

00:00:35.330 --> 00:00:37.170
you need to use reflection.

00:00:37.170 --> 00:00:39.460
And if you do that,
and you're not careful,

00:00:39.460 --> 00:00:42.400
you'll have a size explosion.

00:00:42.400 --> 00:00:44.840
So, in particular, this
happens in any platform

00:00:44.840 --> 00:00:47.880
where you're using a compiler
that needs to do tree shaking.

00:00:47.880 --> 00:00:51.050
But it's commonly
seen with dart2js.

00:00:51.050 --> 00:00:52.540
So it's a problem
that's inherent.

00:00:52.540 --> 00:00:55.380
It's basically an issue that
you don't know exactly what is

00:00:55.380 --> 00:00:57.680
going to be used reflectively.

00:00:57.680 --> 00:00:59.620
And this is an
undecidable a problem,

00:00:59.620 --> 00:01:02.800
so you can't really hope to
remove the problem totally,

00:01:02.800 --> 00:01:05.500
but you can give
programmers a better tool

00:01:05.500 --> 00:01:08.430
to tell the system what
is going to be used.

00:01:08.430 --> 00:01:11.179
So we're writing this
new package, Reflectable.

00:01:11.179 --> 00:01:13.720
And Reflectable would give you
essentially the same interface

00:01:13.720 --> 00:01:16.200
as what you already
know with Dart:mirrors.

00:01:16.200 --> 00:01:19.610
And we have made
some small updates,

00:01:19.610 --> 00:01:24.380
because we think that's
useful for the API as such.

00:01:24.380 --> 00:01:26.750
It's not because it's
motivated technically

00:01:26.750 --> 00:01:28.310
by the implementation.

00:01:28.310 --> 00:01:30.200
So essentially the
same interface,

00:01:30.200 --> 00:01:32.690
but you don't get
this size explosion.

00:01:32.690 --> 00:01:33.860
So how does it work?

00:01:33.860 --> 00:01:38.880
Reflectable has a foundation,
and the basic idea which

00:01:38.880 --> 00:01:40.065
is associated with metadata.

00:01:40.065 --> 00:01:43.530
So you have @-something on the
classes where you want to use

00:01:43.530 --> 00:01:44.690
reflection.

00:01:44.690 --> 00:01:47.970
So you would declare
reflection using metadata,

00:01:47.970 --> 00:01:52.060
and then you'd also specify
which piece of metadata

00:01:52.060 --> 00:01:54.830
you want to use to
get the reflection.

00:01:54.830 --> 00:01:59.140
So you can see in the code here
that we want to use reflection

00:01:59.140 --> 00:02:01.330
with the class C.
So we have created

00:02:01.330 --> 00:02:05.520
this myReflectable
object, which contains

00:02:05.520 --> 00:02:07.690
a specification of a
certain level of support

00:02:07.690 --> 00:02:09.060
for reflection.

00:02:09.060 --> 00:02:11.340
And then you'd use that to
indicate that the class is

00:02:11.340 --> 00:02:13.980
included in support
for reflection,

00:02:13.980 --> 00:02:16.640
and also to say that
this is the place where

00:02:16.640 --> 00:02:21.250
we go to find the
reflect operation to get

00:02:21.250 --> 00:02:24.620
a reflected version of
this particular object,

00:02:24.620 --> 00:02:25.930
and that is a mirror.

00:02:25.930 --> 00:02:28.555
So this is just to show you, for
once, this is the kind of code

00:02:28.555 --> 00:02:29.221
that you'll see.

00:02:29.221 --> 00:02:31.190
I'm going to go back
to similar examples

00:02:31.190 --> 00:02:35.950
later on to explain how
this works in more detail.

00:02:35.950 --> 00:02:40.330
So the idea was conceived
by Florian Loitsch.

00:02:40.330 --> 00:02:42.210
You already know him.

00:02:42.210 --> 00:02:43.750
You may have seen
a public document

00:02:43.750 --> 00:02:47.490
that's called MirrorTags or
that talks about MirrorTags.

00:02:47.490 --> 00:02:49.090
Now we've renamed
it to Reflectable,

00:02:49.090 --> 00:02:54.670
because nobody liked the word
"tag" that kept turning up

00:02:54.670 --> 00:02:56.819
in the API in different places.

00:02:56.819 --> 00:02:58.110
So now it's called Reflectable.

00:02:58.110 --> 00:02:59.710
That's far too
long, so you're not

00:02:59.710 --> 00:03:04.185
going to put it in unsuspecting
places in your identifiers.

00:03:04.185 --> 00:03:08.240
And Reflectable is about
where you can do reflection.

00:03:08.240 --> 00:03:09.990
Currently, I'm
working on it, Sigurd

00:03:09.990 --> 00:03:14.040
has been helping me
the past few weeks.

00:03:14.040 --> 00:03:17.460
So it's a project that's
not particularly large,

00:03:17.460 --> 00:03:18.980
but we're making
a lot of progress

00:03:18.980 --> 00:03:22.410
right now, because we have sort
of got the foundation in place.

00:03:22.410 --> 00:03:25.186
And we are now implementing
the actual API.

00:03:25.186 --> 00:03:26.560
If you want to
take a look at it,

00:03:26.560 --> 00:03:30.130
it's available at this location.

00:03:30.130 --> 00:03:33.850
It is able to run the examples
that I show you today,

00:03:33.850 --> 00:03:37.370
but there's a lot of
work to do on this still.

00:03:37.370 --> 00:03:38.920
So, the basic concepts.

00:03:38.920 --> 00:03:40.932
I just want to give you
the basic concepts such

00:03:40.932 --> 00:03:43.140
that we know that we're
talking about the same things

00:03:43.140 --> 00:03:44.940
with the same words.

00:03:44.940 --> 00:03:47.810
So, in particular,
reflection as a concept

00:03:47.810 --> 00:03:53.520
has got to do with the ability
of code to work on other code

00:03:53.520 --> 00:03:55.370
as data.

00:03:55.370 --> 00:03:58.840
So this makes it possible to
create new program elements

00:03:58.840 --> 00:04:01.790
and to modify your
program in arbitrary ways.

00:04:01.790 --> 00:04:03.750
So that's basically
the old LISP idea

00:04:03.750 --> 00:04:07.720
where you'd work on your
program in a programmatic way.

00:04:07.720 --> 00:04:11.749
Now, if you restrict this
to only introspection,

00:04:11.749 --> 00:04:13.790
so that means you can take
a look at your program

00:04:13.790 --> 00:04:15.340
to investigate what
are the classes

00:04:15.340 --> 00:04:17.029
around for this
particular object, what

00:04:17.029 --> 00:04:19.630
is the class of this object,
and, for this particular class,

00:04:19.630 --> 00:04:22.260
what are the declarations.

00:04:22.260 --> 00:04:23.780
And that's one part.

00:04:23.780 --> 00:04:26.460
And the other part
is runtiming--

00:04:26.460 --> 00:04:30.150
that is, taking something which
is usually a static expression,

00:04:30.150 --> 00:04:33.730
like x.y, then the y is
a compile-time constant

00:04:33.730 --> 00:04:34.769
identifier.

00:04:34.769 --> 00:04:37.060
If you want to make the choice
of which feature to use,

00:04:37.060 --> 00:04:39.970
which method to call, or so-- if
you want to do that at runtime

00:04:39.970 --> 00:04:42.240
using a computed
value, then that

00:04:42.240 --> 00:04:44.280
is what I call runtiming here.

00:04:44.280 --> 00:04:46.970
So these two things are
at the core of reflection.

00:04:46.970 --> 00:04:48.530
I guess this is
totally well known,

00:04:48.530 --> 00:04:50.960
but I wanted to make
sure that nobody would

00:04:50.960 --> 00:04:54.100
be in doubt of what it means.

00:04:54.100 --> 00:04:55.860
So here's standard code.

00:04:55.860 --> 00:04:58.010
I'm using Ruby code
here to show you

00:04:58.010 --> 00:05:00.170
something that contains
kind of an error

00:05:00.170 --> 00:05:01.690
that we don't have
been Dart, then

00:05:01.690 --> 00:05:04.170
I'll return to Dart
code in the next slide.

00:05:04.170 --> 00:05:07.560
If you do something without
reflection-- that could be,

00:05:07.560 --> 00:05:09.950
you know, we have
a Lottery class,

00:05:09.950 --> 00:05:11.770
we create a new instance
of that Lottery,

00:05:11.770 --> 00:05:14.650
and we have this convenient
method called "win,"

00:05:14.650 --> 00:05:17.222
so we're going to
win the lottery.

00:05:17.222 --> 00:05:19.430
If you want to do that in
a way that's more flexible,

00:05:19.430 --> 00:05:24.410
then you would specify the
class name as a runtime value--

00:05:24.410 --> 00:05:25.370
something you compute.

00:05:25.370 --> 00:05:28.010
It could be arbitrary
computation involved.

00:05:28.010 --> 00:05:31.600
Here you have the :win symbol.

00:05:31.600 --> 00:05:35.096
A symbol would be a string
that is better with respect

00:05:35.096 --> 00:05:36.220
to its runtime performance.

00:05:36.220 --> 00:05:38.499
It could be canonicalized,
it could be minified--

00:05:38.499 --> 00:05:39.540
there are various things.

00:05:39.540 --> 00:05:40.890
But basically, it's a string.

00:05:40.890 --> 00:05:44.570
And then you could achieve
the same thing as we had here.

00:05:44.570 --> 00:05:46.664
You'd create a new
instance, but now it's

00:05:46.664 --> 00:05:47.830
not a compile-time constant.

00:05:47.830 --> 00:05:50.110
It is a runtime expression.

00:05:50.110 --> 00:05:52.530
So we would get an
instance of that class.

00:05:52.530 --> 00:05:54.850
And we do that by sending
the new message to it.

00:05:54.850 --> 00:05:57.340
And then here, we
can do object.send,

00:05:57.340 --> 00:06:01.380
and that is a message that
is the generic reflector

00:06:01.380 --> 00:06:05.410
message that will enable us
to call a particular method,

00:06:05.410 --> 00:06:07.550
including that one.

00:06:07.550 --> 00:06:10.500
So this is reflection
in the basic sense.

00:06:10.500 --> 00:06:14.470
The next step is that
Gilad Bracha and David

00:06:14.470 --> 00:06:17.360
Ungar argued in an OOPSLA
paper about 11 years ago

00:06:17.360 --> 00:06:22.810
that it's a bad idea to
wrap up reflection together

00:06:22.810 --> 00:06:23.920
with the base objects.

00:06:23.920 --> 00:06:26.740
So the good design--
lots of reasons

00:06:26.740 --> 00:06:29.090
for that in that
paper-- the good design

00:06:29.090 --> 00:06:30.040
is to separate them.

00:06:30.040 --> 00:06:32.640
So we want to have
a separate system

00:06:32.640 --> 00:06:38.680
for providing reflection,
and we do that using mirrors.

00:06:38.680 --> 00:06:42.920
So a mirror is an object that
plays a role as a proxy that

00:06:42.920 --> 00:06:44.840
will allow you to
perform reflective

00:06:44.840 --> 00:06:48.380
operations on the target
object, on the reflectee

00:06:48.380 --> 00:06:50.870
of that particular mirror.

00:06:50.870 --> 00:06:54.860
So, with that, you can have
multiple mirror systems.

00:06:54.860 --> 00:06:57.361
That means that you can decide
on what kind of mirror system

00:06:57.361 --> 00:06:57.985
you would have.

00:06:57.985 --> 00:06:59.850
And the traditional
examples would be things

00:06:59.850 --> 00:07:02.520
like, oh, this is for run time.

00:07:02.520 --> 00:07:05.690
Here's another one for
investigating source code.

00:07:05.690 --> 00:07:08.280
Here's a third one
for remote debugging,

00:07:08.280 --> 00:07:10.680
for somebody else who's
running on a different machine

00:07:10.680 --> 00:07:11.754
somewhere.

00:07:11.754 --> 00:07:13.920
In this case, we want to
have multiple mirror system

00:07:13.920 --> 00:07:16.460
because that will enable
you to tailor them.

00:07:16.460 --> 00:07:18.699
If you want to have a lot
of support for reflection

00:07:18.699 --> 00:07:20.115
with a few classes,
and then there

00:07:20.115 --> 00:07:21.531
are lots of classes
where you want

00:07:21.531 --> 00:07:23.130
to have more
lightweight support,

00:07:23.130 --> 00:07:26.960
then you can tailor your system
in a very detailed manner.

00:07:26.960 --> 00:07:30.170
So here we have Dart code
doing a similar thing

00:07:30.170 --> 00:07:32.320
as what you just saw in Ruby.

00:07:32.320 --> 00:07:34.740
And the difference
here is that you're not

00:07:34.740 --> 00:07:37.490
using a method on
the object itself

00:07:37.490 --> 00:07:41.800
that says something
like obj.send.

00:07:41.800 --> 00:07:43.520
Here, we are working
on the mirror

00:07:43.520 --> 00:07:45.580
to get the reflective operation.

00:07:45.580 --> 00:07:47.990
And other than that,
it's just the same thing

00:07:47.990 --> 00:07:50.750
that you have already seen.

00:07:50.750 --> 00:07:54.500
So there's one concept here
which is kind of a detour,

00:07:54.500 --> 00:07:57.240
but it also illustrates
the underlying issues.

00:07:57.240 --> 00:08:00.810
Why do programs get so large
when you translate them

00:08:00.810 --> 00:08:02.830
with dart2js, and
you're not careful,

00:08:02.830 --> 00:08:04.880
and you're using reflection?

00:08:04.880 --> 00:08:08.370
So the problem is that you
need to preserve information

00:08:08.370 --> 00:08:10.790
about the program
also at runtime.

00:08:10.790 --> 00:08:12.970
And minification
shows very clearly why

00:08:12.970 --> 00:08:14.270
that will make a difference.

00:08:14.270 --> 00:08:16.550
So minification is
known from JavaScript,

00:08:16.550 --> 00:08:18.770
and it's also a well-established
concept elsewhere,

00:08:18.770 --> 00:08:24.970
but it's also used
in Dart with dart2js.

00:08:24.970 --> 00:08:29.610
We're doing this automatic
renaming to take long names

00:08:29.610 --> 00:08:31.860
and transform them to the
shortest possible names that

00:08:31.860 --> 00:08:32.789
are distinct.

00:08:32.789 --> 00:08:36.679
And we don't care about
how readable they are.

00:08:36.679 --> 00:08:39.260
So we have these long
names, and they disappear

00:08:39.260 --> 00:08:40.690
during the minification phase.

00:08:40.690 --> 00:08:43.650
And then we only have
these short names.

00:08:43.650 --> 00:08:47.120
So my long readable
name becomes "xj7,"

00:08:47.120 --> 00:08:49.170
and then if you look
at the running program,

00:08:49.170 --> 00:08:51.450
it's actually going
to do "xj7" where you

00:08:51.450 --> 00:08:54.850
had this nicely-named method.

00:08:54.850 --> 00:08:58.840
Now, if you have a class that
implements no such method,

00:08:58.840 --> 00:09:02.650
because you want to be able
to handle the situation where

00:09:02.650 --> 00:09:05.870
somebody calls a method on
this object that doesn't exist,

00:09:05.870 --> 00:09:07.390
then this guy's called.

00:09:07.390 --> 00:09:11.380
And then we can
subject that invocation

00:09:11.380 --> 00:09:12.530
to special treatment.

00:09:12.530 --> 00:09:15.290
So we take the invocation,
and we investigate,

00:09:15.290 --> 00:09:17.190
what were they trying to call?

00:09:17.190 --> 00:09:20.040
Oh, they were trying to
call this foo37 method.

00:09:20.040 --> 00:09:22.120
So let's compute something.

00:09:22.120 --> 00:09:26.644
And that is an entirely dynamic
thing here, the expression.

00:09:26.644 --> 00:09:29.060
And then we decide on whether
that's what they're calling,

00:09:29.060 --> 00:09:32.160
so maybe we'll compute foo37.

00:09:32.160 --> 00:09:35.856
And then that's going to give
rise to some behavior here.

00:09:35.856 --> 00:09:37.480
And then we can return
the result here.

00:09:37.480 --> 00:09:41.660
And people will think, oh,
this guy implements foo37.

00:09:41.660 --> 00:09:43.760
Now, that's used
in a lot of places.

00:09:43.760 --> 00:09:45.730
And in this case
here, you can see

00:09:45.730 --> 00:09:49.400
that we have a new symbol and
a runtime expression here,

00:09:49.400 --> 00:09:52.560
and we're comparing to the
member name, which is a symbol.

00:09:52.560 --> 00:09:54.540
And that symbol
has been minified.

00:09:54.540 --> 00:09:59.950
So now we have a nice long name,
and we're comparing to xj7.

00:09:59.950 --> 00:10:02.710
So we can't answer whether
they are equal to each other,

00:10:02.710 --> 00:10:06.230
because we have to know
the original readable

00:10:06.230 --> 00:10:09.850
version of that name in
order to be able to determine

00:10:09.850 --> 00:10:11.930
whether it's the same name.

00:10:11.930 --> 00:10:15.810
Because the programmer
could never predict that

00:10:15.810 --> 00:10:17.470
this would become xj7.

00:10:17.470 --> 00:10:20.140
That's just going to be
this long readable name.

00:10:20.140 --> 00:10:22.840
So we have to
preserve the mapping

00:10:22.840 --> 00:10:25.490
from all those short names
to all those long names,

00:10:25.490 --> 00:10:27.320
or the other way
around, or both ways,

00:10:27.320 --> 00:10:29.940
in order to be able
to implement this.

00:10:29.940 --> 00:10:32.410
So this guy is expensive.

00:10:32.410 --> 00:10:35.040
And there's no limit
to the set of symbols

00:10:35.040 --> 00:10:37.990
that you need to keep
around in order to do this.

00:10:37.990 --> 00:10:40.079
So this is a good
example why you

00:10:40.079 --> 00:10:41.620
don't want to use
a new symbol if you

00:10:41.620 --> 00:10:44.070
can use a const symbol instead.

00:10:44.070 --> 00:10:47.420
And it's also a good example
of the kind of effect

00:10:47.420 --> 00:10:50.030
that makes programs so large.

00:10:50.030 --> 00:10:51.160
OK.

00:10:51.160 --> 00:10:54.740
So what is the new approach that
we're taking to Dart reflection

00:10:54.740 --> 00:10:57.200
using this new package?

00:10:57.200 --> 00:11:00.610
First, I'll just return to the
existing reflection system.

00:11:00.610 --> 00:11:03.340
It's a very nice system for
reflection that's called

00:11:03.340 --> 00:11:05.010
dart:mirrors.

00:11:05.010 --> 00:11:07.990
It has a very compact
representation at runtime

00:11:07.990 --> 00:11:13.650
at the JavaScript level.

00:11:13.650 --> 00:11:16.300
And you couldn't really expect
to make it much more compact

00:11:16.300 --> 00:11:16.940
than that.

00:11:16.940 --> 00:11:19.050
But still, what we've
seen in practice

00:11:19.050 --> 00:11:22.080
is that when people
use this, they

00:11:22.080 --> 00:11:25.830
get these humongous programs,
these large programs,

00:11:25.830 --> 00:11:30.060
and they're really had not happy
about the space performance.

00:11:30.060 --> 00:11:33.970
And the problem is that
it's hard to control

00:11:33.970 --> 00:11:37.740
what is supported by the
reflective system using

00:11:37.740 --> 00:11:41.164
the available mechanism, which
is this MirrorsUsed annotation.

00:11:41.164 --> 00:11:42.830
So what we're doing
is, basically, we're

00:11:42.830 --> 00:11:44.730
trying to take an entirely
different approach

00:11:44.730 --> 00:11:46.800
to this in order to make
it possible for people

00:11:46.800 --> 00:11:49.780
to control the
level of reflection

00:11:49.780 --> 00:11:53.471
in a much more detailed manner.

00:11:53.471 --> 00:11:53.970
OK.

00:11:53.970 --> 00:11:56.810
So what we're doing with
this new Reflectable package

00:11:56.810 --> 00:12:00.150
is that we provide the same API.

00:12:00.150 --> 00:12:01.900
There are a couple
of tiny differences

00:12:01.900 --> 00:12:05.260
where we wanted to make an
experiment with the API.

00:12:05.260 --> 00:12:09.030
So, for instance, if you
call invoke in dart:mirros,

00:12:09.030 --> 00:12:11.460
you get a mirror.

00:12:11.460 --> 00:12:14.610
If you do this with Reflectable,
you get the actual object.

00:12:14.610 --> 00:12:17.650
Now, the point is
that you wouldn't

00:12:17.650 --> 00:12:20.000
want to create a lot
of mirrors and then

00:12:20.000 --> 00:12:22.090
not use them for anything,
because you're just

00:12:22.090 --> 00:12:27.080
looking up the reflectee and
then dropping the mirror.

00:12:27.080 --> 00:12:30.300
So it seems to be OK to
return the object directly,

00:12:30.300 --> 00:12:31.845
and it gives you
better performance.

00:12:31.845 --> 00:12:33.470
And if you do want
the mirror, then you

00:12:33.470 --> 00:12:35.670
can just recreate
it by saying reflect

00:12:35.670 --> 00:12:37.450
to that particular object.

00:12:37.450 --> 00:12:41.430
So, apart from tiny differences
like that, it's the same API.

00:12:41.430 --> 00:12:44.110
That means you could just
take your existing code that

00:12:44.110 --> 00:12:46.970
uses reflection, and you
adjust it in these tiny ways,

00:12:46.970 --> 00:12:47.810
and then it'll work.

00:12:47.810 --> 00:12:50.530
Manual process, but a
very lightweight one.

00:12:50.530 --> 00:12:51.750
Then we have a transformer.

00:12:51.750 --> 00:12:55.480
That's basically a compiler
that does whole-program analysis

00:12:55.480 --> 00:13:00.020
and produces a program that
does not use reflection anymore.

00:13:00.020 --> 00:13:02.630
So you have the
pre-transform code--

00:13:02.630 --> 00:13:05.620
you can think of that
as development code--

00:13:05.620 --> 00:13:09.800
and for the pre-transform
code, you will use the library

00:13:09.800 --> 00:13:13.160
Reflectable, and Reflectable
will indirectly use the library

00:13:13.160 --> 00:13:14.012
dart:mirrors.

00:13:14.012 --> 00:13:15.720
So we're back to the
old system, and it's

00:13:15.720 --> 00:13:17.410
going to take up a lot of space.

00:13:17.410 --> 00:13:20.670
But maybe you don't care
at that point in time.

00:13:20.670 --> 00:13:22.840
And then you transform
it, and the result

00:13:22.840 --> 00:13:25.500
is that we're generating
static mirror classes.

00:13:25.500 --> 00:13:27.495
And they contain
ordinary static code--

00:13:27.495 --> 00:13:30.140
there's no use of
reflection at all.

00:13:30.140 --> 00:13:33.330
The whole system doesn't
include dart:mirrors.

00:13:33.330 --> 00:13:35.860
And at that point,
we have this code

00:13:35.860 --> 00:13:38.417
that'll actually do the
same thing for you, but only

00:13:38.417 --> 00:13:39.875
for the cases that
you've specified

00:13:39.875 --> 00:13:43.410
that you want support for.

00:13:43.410 --> 00:13:44.350
OK.

00:13:44.350 --> 00:13:46.170
So what's this used for?

00:13:46.170 --> 00:13:49.080
Well, anything that you're
doing that needs reflection--

00:13:49.080 --> 00:13:50.760
if you have a good
case, then please

00:13:50.760 --> 00:13:52.940
come forward and tell us.

00:13:52.940 --> 00:13:55.760
And important
cases inside Google

00:13:55.760 --> 00:13:59.500
is Polymer and Angular and
Serialization and Mustache,

00:13:59.500 --> 00:14:03.410
so lots of cases-- anything
that uses reflection.

00:14:03.410 --> 00:14:08.080
So the package itself-- how does
it look, and how do you use it?

00:14:08.080 --> 00:14:09.670
You need to think
in two steps here,

00:14:09.670 --> 00:14:12.720
because this about mirror
systems that you're tailoring

00:14:12.720 --> 00:14:14.716
for your particular purpose.

00:14:14.716 --> 00:14:16.340
So the first step is
to design a mirror

00:14:16.340 --> 00:14:18.710
system that has the
suitable level of support

00:14:18.710 --> 00:14:19.990
for reflection.

00:14:19.990 --> 00:14:21.010
And how do you do that?

00:14:21.010 --> 00:14:23.570
Well, we have this
ReflectCapability capability

00:14:23.570 --> 00:14:24.410
class.

00:14:24.410 --> 00:14:27.700
You could say that this is
a stupid class, because it

00:14:27.700 --> 00:14:29.940
has no methods, it
has no state; it's

00:14:29.940 --> 00:14:32.290
basically just the
identity saying, here's

00:14:32.290 --> 00:14:34.430
a ReflectCapability subclass.

00:14:34.430 --> 00:14:37.030
It could be
InvokeInstanceMembers;

00:14:37.030 --> 00:14:39.770
it could be InvokeStaticMembers.

00:14:39.770 --> 00:14:41.700
All kinds of capabilities.

00:14:41.700 --> 00:14:43.320
And then you just
build expressions

00:14:43.320 --> 00:14:46.090
by piling up these things,
building trees of these.

00:14:46.090 --> 00:14:47.680
And you could consider
them basically

00:14:47.680 --> 00:14:50.600
as the abstract syntax
tree for an expression.

00:14:50.600 --> 00:14:52.200
So what we have
here is basically

00:14:52.200 --> 00:14:55.770
a DSL, or a
domain-specific language,

00:14:55.770 --> 00:14:59.610
that will allow you to specify
the level of reflection

00:14:59.610 --> 00:15:01.330
that you want to have.

00:15:01.330 --> 00:15:04.660
And then we tie that up
with a particular object

00:15:04.660 --> 00:15:07.370
which is an instance of
the class Reflectable.

00:15:07.370 --> 00:15:10.180
And I'll show you
how that happens.

00:15:10.180 --> 00:15:12.970
So here we have the
core class Reflectable.

00:15:12.970 --> 00:15:16.110
That's in a library-- that's
in the library Reflectable--

00:15:16.110 --> 00:15:17.460
and you just include that.

00:15:17.460 --> 00:15:20.530
Then you create your own
subclass, MyReflectable,

00:15:20.530 --> 00:15:23.620
and you specify inside that
class how much support you

00:15:23.620 --> 00:15:25.970
want to have for reflection.

00:15:25.970 --> 00:15:29.190
So here we have the
Reflectable class,

00:15:29.190 --> 00:15:30.720
and one of the
things it contains

00:15:30.720 --> 00:15:35.460
is the capabilities, which is
a list of ReflectCapability--

00:15:35.460 --> 00:15:37.330
that wouldn't fit here.

00:15:37.330 --> 00:15:41.950
So you're giving an argument to
this one-argument constructor

00:15:41.950 --> 00:15:44.545
in order to specify what
those capabilities are

00:15:44.545 --> 00:15:45.170
supposed to be.

00:15:45.170 --> 00:15:49.509
And you do that in a subclass
that has zero arguments.

00:15:49.509 --> 00:15:51.550
So we have a fixed setup
here, because that makes

00:15:51.550 --> 00:15:52.860
it easy to generate the code.

00:15:52.860 --> 00:15:54.540
Because that
basically means that,

00:15:54.540 --> 00:15:58.080
for this particular class,
there'll be one instance.

00:15:58.080 --> 00:16:01.050
So we enforce this
singleton property simply

00:16:01.050 --> 00:16:02.550
by saying it has
to look like this--

00:16:02.550 --> 00:16:04.910
you have to have a constructor
that has zero arguments.

00:16:04.910 --> 00:16:07.960
This is just because it's
easy to get started like that,

00:16:07.960 --> 00:16:09.715
and then we can
generalize that later on,

00:16:09.715 --> 00:16:11.670
and we can support some
more flexible schemes.

00:16:11.670 --> 00:16:13.670
But right now, that's the
only thing you can do.

00:16:13.670 --> 00:16:17.770
You have to have a class that
looks like this and that has

00:16:17.770 --> 00:16:21.750
this single constructor
that has zero arguments

00:16:21.750 --> 00:16:25.550
and passes these arguments
to the superclass.

00:16:25.550 --> 00:16:27.590
So that means that
when we have this,

00:16:27.590 --> 00:16:29.780
we just continue, just
moved it over here

00:16:29.780 --> 00:16:33.900
and create a const,
an object, that

00:16:33.900 --> 00:16:37.070
is the single instance
of that class.

00:16:37.070 --> 00:16:39.630
And now we'll use that
the rest of the time.

00:16:39.630 --> 00:16:41.740
So when you look
over your system,

00:16:41.740 --> 00:16:44.250
and you decide that you want
to have that level of support

00:16:44.250 --> 00:16:46.040
for reflection in
this particular class,

00:16:46.040 --> 00:16:50.050
then you say @myReflectable
on that class.

00:16:50.050 --> 00:16:54.720
And when you've done that in the
suitable places in your system,

00:16:54.720 --> 00:16:56.470
then you have
annotated where you

00:16:56.470 --> 00:16:59.560
want to have your reflection
in a way that is local,

00:16:59.560 --> 00:17:03.390
it's bottom-up, and
it's quite flexible.

00:17:03.390 --> 00:17:07.500
It's very easy to support
generalizations of this-- like,

00:17:07.500 --> 00:17:12.520
if you choose to specify
that to myReflectable

00:17:12.520 --> 00:17:15.319
applies not just for the class,
but for all the subclasses

00:17:15.319 --> 00:17:17.160
or for all the
subtypes, it would

00:17:17.160 --> 00:17:19.630
be very easy to
extend the capability

00:17:19.630 --> 00:17:20.910
language to cover that case.

00:17:20.910 --> 00:17:22.089
So we'll see what we need.

00:17:22.089 --> 00:17:24.589
But right now, we're just going
for the very simple approach

00:17:24.589 --> 00:17:26.660
where you put these
guys everywhere

00:17:26.660 --> 00:17:29.940
you want to have reflection.

00:17:29.940 --> 00:17:31.070
OK.

00:17:31.070 --> 00:17:34.010
So here, again, we have
the myReflectable class,

00:17:34.010 --> 00:17:36.170
and we have this win method.

00:17:36.170 --> 00:17:38.080
And now we want
to call this such

00:17:38.080 --> 00:17:39.920
that people can't see
statically that we're

00:17:39.920 --> 00:17:42.730
calling the win method,
because that's sort of unfair.

00:17:42.730 --> 00:17:44.740
So here we do that reflectively.

00:17:44.740 --> 00:17:48.130
And the only difference
to what you've seen before

00:17:48.130 --> 00:17:52.940
is that we take the object and
then we get a mirror for it.

00:17:52.940 --> 00:17:56.580
And we do that by asking the
mirror system for its reflect

00:17:56.580 --> 00:18:00.850
operation, whereas the standard
dart:mirror system would tell

00:18:00.850 --> 00:18:05.080
you to use the reflect
operation at top level,

00:18:05.080 --> 00:18:08.380
so basically you can only
get that specific version.

00:18:08.380 --> 00:18:13.830
And then you invoke
methods using that mirror.

00:18:13.830 --> 00:18:16.020
So that's how it looks
when you're using it.

00:18:16.020 --> 00:18:19.070
And here are a couple of words
about the singleton-ness.

00:18:19.070 --> 00:18:23.530
So what happens is that if you
have a subclass of Reflectable

00:18:23.530 --> 00:18:26.877
that has zero arguments
in its constructor,

00:18:26.877 --> 00:18:28.460
and it's just that
single constructor,

00:18:28.460 --> 00:18:30.180
then we know how it's created.

00:18:30.180 --> 00:18:34.080
So if you have a const instance,
because that instance has

00:18:34.080 --> 00:18:36.670
been canonicalized, so if
you have two of them that

00:18:36.670 --> 00:18:38.355
have the same
state, then you only

00:18:38.355 --> 00:18:39.990
have one, because
it's canonicalized

00:18:39.990 --> 00:18:41.610
into a single
instance and you just

00:18:41.610 --> 00:18:43.410
get more pointers
to that one if you

00:18:43.410 --> 00:18:45.270
think you create more of those.

00:18:45.270 --> 00:18:48.620
That means that if we're
editing the code of that guy,

00:18:48.620 --> 00:18:51.330
we'll edit the behavior.

00:18:51.330 --> 00:18:54.560
So if I edit-- I think
this is the slide that's

00:18:54.560 --> 00:18:57.790
best-- this one.

00:18:57.790 --> 00:18:58.370
Right.

00:18:58.370 --> 00:19:02.290
If we edit the
code of this class,

00:19:02.290 --> 00:19:05.750
then we edit the
behavior of that object.

00:19:05.750 --> 00:19:07.970
It's a one-to-one thing.

00:19:07.970 --> 00:19:10.336
So that's what we
rely on currently.

00:19:10.336 --> 00:19:11.960
And we'll have to
generate more classes

00:19:11.960 --> 00:19:14.066
and invent new fresh
names and stuff.

00:19:14.066 --> 00:19:15.440
So it's going to
be later, if you

00:19:15.440 --> 00:19:19.270
want to have a more
flexible approach to that.

00:19:19.270 --> 00:19:22.040
So here's an example of
some actual running code.

00:19:22.040 --> 00:19:25.150
So this is just a prototype
implementation of this win.

00:19:25.150 --> 00:19:28.910
Of course, if you do have an
actual working implementation

00:19:28.910 --> 00:19:30.670
of that, we'd like
to hear about that,

00:19:30.670 --> 00:19:34.060
and you can send that by
private encrypted email.

00:19:34.060 --> 00:19:36.840
Otherwise, we just
use this method here,

00:19:36.840 --> 00:19:39.200
and the structure
of the whole program

00:19:39.200 --> 00:19:41.880
is as what you've
seen until now.

00:19:41.880 --> 00:19:46.230
So what happens if we take
this static program and make it

00:19:46.230 --> 00:19:51.180
reflective using dart:mirrors
and no special precautions?

00:19:51.180 --> 00:19:54.440
Well, it's just the extension
that you've seen before.

00:19:54.440 --> 00:19:56.340
We get the same
expression down here

00:19:56.340 --> 00:19:57.880
that you've seen several times.

00:19:57.880 --> 00:19:59.970
So let's just note
that you can do this.

00:19:59.970 --> 00:20:02.000
If you want to be
more careful, you

00:20:02.000 --> 00:20:04.230
can add this
MirrorsUsed annotation.

00:20:04.230 --> 00:20:05.370
So that's here.

00:20:05.370 --> 00:20:07.400
And, in particular, one
of things you can say

00:20:07.400 --> 00:20:12.240
is that the targets are foo and
that means-- oh, sorry, that's

00:20:12.240 --> 00:20:14.340
going to be Lottery here.

00:20:14.340 --> 00:20:16.220
So the target is Lottery.

00:20:16.220 --> 00:20:18.020
And that means that
you're only going

00:20:18.020 --> 00:20:21.710
to use reflection on this
particular Lottery class.

00:20:21.710 --> 00:20:25.160
And that means that you can
generate much more tight code.

00:20:25.160 --> 00:20:29.820
You don't have to have as much
information about the program

00:20:29.820 --> 00:20:31.760
preserved as you would
have if you're just

00:20:31.760 --> 00:20:35.070
using the reflection in
an unrestricted manner.

00:20:35.070 --> 00:20:36.670
If you want to use
Reflectable, you

00:20:36.670 --> 00:20:38.044
have to work a
little bit harder,

00:20:38.044 --> 00:20:42.180
because you have to specify
the level of support.

00:20:42.180 --> 00:20:43.910
So the way we do
that is by creating

00:20:43.910 --> 00:20:47.110
this subclass, myReflectable,
of Reflectable.

00:20:47.110 --> 00:20:51.230
It has this zero-argument
constructor,

00:20:51.230 --> 00:20:54.090
and it passes this
argument to the superclass,

00:20:54.090 --> 00:20:56.630
and it basically says, we
want to invoke members,

00:20:56.630 --> 00:20:58.330
and that's all we
want to do here.

00:20:58.330 --> 00:21:01.080
And then we have
this const again.

00:21:01.080 --> 00:21:02.520
So what happens?

00:21:02.520 --> 00:21:04.460
Well, what happens
is that if you're

00:21:04.460 --> 00:21:09.520
using the non-reflective code,
it takes up like 9.6 kilobytes.

00:21:09.520 --> 00:21:11.180
If you're just
using dot:mirrors,

00:21:11.180 --> 00:21:13.870
it's like 170 times bigger.

00:21:13.870 --> 00:21:15.730
So this is what
people have seen.

00:21:15.730 --> 00:21:17.840
If you're very careful
with MirrorsUsed,

00:21:17.840 --> 00:21:21.110
you could get that down
like 16 times to 100k.

00:21:21.110 --> 00:21:26.300
And if you use Reflectable
right now, you would go to 78k.

00:21:26.300 --> 00:21:28.190
So, basically,
this shows that you

00:21:28.190 --> 00:21:29.770
have to be very
careful about this,

00:21:29.770 --> 00:21:34.400
and we hope that we will give
you a much more flexible path

00:21:34.400 --> 00:21:38.320
to specify the level of support
for reflection that you want.

00:21:38.320 --> 00:21:40.360
And definitely you
wouldn't want to pay

00:21:40.360 --> 00:21:43.970
that unless it doesn't matter
how much space programs take

00:21:43.970 --> 00:21:44.860
up.

00:21:44.860 --> 00:21:49.510
OK, so the implementation--
we have libraries,

00:21:49.510 --> 00:21:50.760
and we have a transformer.

00:21:50.760 --> 00:21:55.520
And the libraries
work immediately.

00:21:55.520 --> 00:21:57.820
But if you want to have the
benefits of this package,

00:21:57.820 --> 00:21:59.620
basically you need to
run to transformer,

00:21:59.620 --> 00:22:01.400
and that's going to
be an in an integrated

00:22:01.400 --> 00:22:04.110
part of the pub build.

00:22:04.110 --> 00:22:05.890
And that basically
means that you

00:22:05.890 --> 00:22:08.356
would specify that
you're using Reflectable,

00:22:08.356 --> 00:22:09.730
and you're using
the transformer.

00:22:09.730 --> 00:22:11.240
And then you're just
running pub build,

00:22:11.240 --> 00:22:13.020
and then automatically
your program is going to be

00:22:13.020 --> 00:22:15.040
transformed in the ways
I described such that it

00:22:15.040 --> 00:22:17.210
doesn't use dart:mirrors.

00:22:17.210 --> 00:22:20.680
For that, you will have to
use an import of Reflectable.

00:22:20.680 --> 00:22:23.760
And you're not going to use
dot:mirrors in other ways,

00:22:23.760 --> 00:22:27.430
because in that case you're
just undoing all the work that

00:22:27.430 --> 00:22:28.710
we've been doing here.

00:22:28.710 --> 00:22:31.510
So with it supports
invoke currently.

00:22:31.510 --> 00:22:34.470
invokeGetter and invokeSetter
are the new names for getField

00:22:34.470 --> 00:22:35.887
and setField.

00:22:35.887 --> 00:22:37.470
That's one of those
little experiments

00:22:37.470 --> 00:22:38.770
we're doing with the API.

00:22:38.770 --> 00:22:41.240
They're going to be very
easy and very similar.

00:22:41.240 --> 00:22:43.350
Code browsing requires
a lot more code,

00:22:43.350 --> 00:22:45.477
so getting a class mirror,
getting a method mirror,

00:22:45.477 --> 00:22:48.060
looking at all the decorations
in the class-- all those things

00:22:48.060 --> 00:22:49.101
haven't been written yet.

00:22:49.101 --> 00:22:49.970
So it's not ready.

00:22:49.970 --> 00:22:51.420
But if you want to fetch
the code right now,

00:22:51.420 --> 00:22:53.240
you can at least play
around with invoke

00:22:53.240 --> 00:22:57.010
and get an impression
about how this works.

00:22:57.010 --> 00:23:00.910
So the basic idea
here is here is

00:23:00.910 --> 00:23:04.900
that we want to create a balance
between dynamism and output

00:23:04.900 --> 00:23:06.410
size.

00:23:06.410 --> 00:23:09.480
There's the core
class Reflectable.

00:23:09.480 --> 00:23:12.770
You would create
subclasses of Reflectable

00:23:12.770 --> 00:23:20.670
and pass in the superconstructor
invocation, the value of type

00:23:20.670 --> 00:23:23.240
list of ReflectCapability--
that specifies

00:23:23.240 --> 00:23:25.360
how much support
for reflection you

00:23:25.360 --> 00:23:27.360
want to get with this
particular mirror system.

00:23:27.360 --> 00:23:29.760
And then, when you have
designed your mirror systems,

00:23:29.760 --> 00:23:32.850
you go around and apply
them in your system,

00:23:32.850 --> 00:23:35.970
and it's going to look very
much like dart:mirrors.

00:23:35.970 --> 00:23:39.140
But you need to remember to
say myReflectable.reflect

00:23:39.140 --> 00:23:40.510
in order to get started.

00:23:40.510 --> 00:23:42.110
And, basically, that's it.

00:23:45.110 --> 00:23:46.660
[APPLAUSE]

