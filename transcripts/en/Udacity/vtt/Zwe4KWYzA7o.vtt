WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:04.552
So instead, we're going to look at another algorithm, one which is far better in terms of work complexity.

00:00:04.552 --> 00:00:08.745
This implementation was written by Duane Merrill and his colleagues and published in 2012.

00:00:08.745 --> 00:00:11.508
What's inefficient about the previous algorithm

00:00:11.508 --> 00:00:15.483
is that we visit the same edge over and over again on each iteration, but we only set its depth once.

00:00:15.483 --> 00:00:19.295
If we could, instead, only visit an edge when it's ready to be processed and never visit it again,

00:00:19.295 --> 00:00:21.322
we'd be much more efficient.

00:00:21.322 --> 00:00:24.665
So let's go back to the serial algorithm and think about why it's an efficient algorithm.

00:00:24.665 --> 00:00:28.068
It's efficient because it tries to minimize the number of visits to nodes,

00:00:28.068 --> 00:00:30.634
and it does so by maintaining a frontier

00:00:30.634 --> 00:00:34.170
that marks the boundary between visited nodes and unvisited nodes.

00:00:34.170 --> 00:00:39.415
At any given time, only the nodes that border the frontier are subject to computation.

00:00:39.415 --> 00:00:42.045
This is different than our brute force N squared algorithm,

00:00:42.045 --> 00:00:44.250
where every node is touched on every iteration.

00:00:44.250 --> 00:00:47.424
How do we implement something like the frontier on the GPU?

