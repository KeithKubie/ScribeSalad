WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:05.310
Well, today we're going to talk about the
Analytical Engine. We've already got

00:00:05.310 --> 00:00:09.450
footage "in the can", as it were, about the
principal people involved in this:

00:00:09.450 --> 00:00:13.769
Charles Babbage, Ada Lovelace. The
important thing now, I think, is to just

00:00:13.769 --> 00:00:19.619
give you the most general overview about
how this Analytical Engine would have

00:00:19.619 --> 00:00:27.930
worked, if only it had ever been built.
At the Ada Lovelace symposium, December

00:00:27.930 --> 00:00:37.050
2015; 200th anniversary of her birth; I actually met
up with Stephen Wolfram - of "Wolfram [Language]" and

00:00:37.050 --> 00:00:42.989
"Mathematica" fame who has done a very good
blog on Ada Lovelace - computer programmer.

00:00:42.989 --> 00:00:47.730
There's also -- you'll see it in the Info 
Block again -- a link to all the lectures

00:00:47.730 --> 00:00:54.510
given at that 200th Anniversary Symposium.
Last but not least - and it relates to

00:00:54.510 --> 00:01:00.719
this picture we're using here - one of the
lectures there was by Sydney Padua, who

00:01:00.719 --> 00:01:07.229
is a very, very talented graphic artist.
She turned her attention to actually

00:01:07.229 --> 00:01:12.030
researching the Babbage-Lovelace story
and has done the whole thing in a

00:01:12.030 --> 00:01:17.130
hilarious comic book. She envisages, as
you see here. Lovelace as this

00:01:17.130 --> 00:01:20.460
impossible, detached heroine - but 
fearfully bright -

00:01:20.460 --> 00:01:25.289
Babbage's faithful assistant. Here's Charles
Babbage: short-tempered, thin-skinned,

00:01:25.289 --> 00:01:29.670
exactly like the real Babbage! But, thanks
to Sydney

00:01:29.670 --> 00:01:34.259
we're able to actually have a picture
here that I can talk to;  of what the

00:01:34.259 --> 00:01:39.899
Analytical Engine will have to look like
should it ever be built. It may get built

00:01:39.899 --> 00:01:44.009
but it'll be years - it'll be decades
before it's ever built - because one has

00:01:44.009 --> 00:01:48.630
to understand all of Babbage's notation,
in his technical drawings, and that's no

00:01:48.630 --> 00:01:53.550
mean feat. Anyway,
Sydney has decoded enough of what must

00:01:53.550 --> 00:01:58.259
happen. Here it is - it's fantastic!  This is
the Analytical Engine, as it would have

00:01:58.259 --> 00:02:04.380
been. I'll try and interpret this for you
in modern terms. This - sort of - almost

00:02:04.380 --> 00:02:10.080
amphitheatre thing - at the end here -
that's the CPU !  This is, as it were, your

00:02:10.080 --> 00:02:16.080
Intel chip at the end of this thing. The
whole corridor-looking thing of stuff

00:02:16.080 --> 00:02:19.319
behind her, with a proud Babbage
standing beside it,

00:02:19.319 --> 00:02:23.670
that's the memory! And if you look more
carefully at this you'll find that the

00:02:23.670 --> 00:02:30.060
memory consists of thousands of
positions, each of which can hold a 50

00:02:30.060 --> 00:02:36.210
decimal digit number. Binary had not
occurred to mathematicians even,

00:02:36.210 --> 00:02:40.410
in the early 19th century - in saying that I
do know that the mathematician

00:02:40.410 --> 00:02:44.880
Leibniz was aware of it - but you can
see that even if Babbage had been aware

00:02:44.880 --> 00:02:50.910
of it - actually the temptation will be
stick to what you know. "We're here to do

00:02:50.910 --> 00:02:55.710
generalized arithmetic and we all know
and understand decimal!" So, yes, it's a

00:02:55.710 --> 00:02:59.760
decimal machine - 50 decimal places. Every
time you want one of these numbers

00:02:59.760 --> 00:03:04.740
there's an elaborate mechanical way to
fetch it into the CPU and just look at

00:03:04.740 --> 00:03:08.970
the CPU itself! If it has got to store
these numbers, temporarily, before it

00:03:08.970 --> 00:03:13.620
adds them, or something like that, then
yes, you're going to have yet more of these

00:03:13.620 --> 00:03:19.320
50-digit columns, inside here, to hold the
numbers that are in the process of being

00:03:19.320 --> 00:03:23.790
processed. Roughly speaking this memory, 
for the

00:03:23.790 --> 00:03:29.340
machine as designed, was seven metres
long and the whole thing was three metres

00:03:29.340 --> 00:03:32.190
high. It's the most enormous thing! Could you

00:03:32.190 --> 00:03:36.660
drive this with a handle, by hand? Not a
chance! Little picture here that

00:03:36.660 --> 00:03:40.560
Sydney's put in of a  steam engine.
Babbage was going to drive the whole

00:03:40.560 --> 00:03:44.700
thing by steam! For those of you who aren't 
perhaps up with the history of these things

00:03:44.700 --> 00:03:50.550
please remember this is the 1830s and
1840s. Faraday's work on electromagnetism

00:03:50.550 --> 00:03:56.190
was just about getting under way. But any
idea of having electric motors and mains

00:03:56.190 --> 00:04:00.390
electricity to drive this thing?
Not until at least the end of the 19th

00:04:00.390 --> 00:04:05.670
century, turn of the 20th, when this kind
of thing would become possible. So, yeah,

00:04:05.670 --> 00:04:10.920
you wanted to drive this thing? The only
option would have been steam. Way

00:04:10.920 --> 00:04:16.410
beyond even a gang of humans - to turn
all these cogs. So number one, it says

00:04:16.410 --> 00:04:23.190
here, The Store. Do remember that in
English notation, for computers, even as

00:04:23.190 --> 00:04:29.490
late as the 40s and 50s we in
the UK used to call it Store. In the US

00:04:29.490 --> 00:04:33.960
it was always called "memory" on IBM
machines.  American usage has become

00:04:33.960 --> 00:04:39.570
universal. We now call that memory.
Equally very early papers on computing,

00:04:39.570 --> 00:04:46.470
in the UK - certainly Babbage - this CPU he
called "The Mill" because you put the

00:04:46.470 --> 00:04:49.180
numbers in, you mill 'em om around and you 
add and you

00:04:49.180 --> 00:04:54.280
subtract them, and whatever. They get, y'know,
know, roughed up and knocked into an

00:04:54.280 --> 00:04:58.480
answer. It was called The Mill. So, that's
the only bit of translation you really

00:04:58.480 --> 00:05:01.180
need. So, where's the program stored? 
Is that

00:05:01.180 --> 00:05:05.620
stored in this memory here?
No, it isn't, the idea was that this - the

00:05:05.620 --> 00:05:09.700
cards that drove this thing - would be
based on well-established and very

00:05:09.700 --> 00:05:16.210
reliable Jacquard loom technology. Jacquard 
looms weave [silk and] lace and they are

00:05:16.210 --> 00:05:21.910
programmed to get the right pattern in
the lace by having a set of cards that

00:05:21.910 --> 00:05:27.460
go over sensing rods. And the sensing
rods, basically, every time they sense a

00:05:27.460 --> 00:05:31.900
hole do a stitch at that position.
Roughly speaking. So by putting different

00:05:31.900 --> 00:05:36.430
hole patterns on different cards and
having a succession of cards, just like a

00:05:36.430 --> 00:05:40.810
succession of instructions in the
program, you could get a beautiful

00:05:40.810 --> 00:05:44.650
pattern to appear on your lace machine.
And there were even card punches

00:05:44.650 --> 00:05:49.630
available for preparing Jacquard cards,
which I think are roughly about 30

00:05:49.630 --> 00:05:54.700
centimetres long. Something like that. So
this was not a flight of fantasy this

00:05:54.700 --> 00:05:59.320
was building on existing technology.  You
can go to a Jacquard Lace museum, in

00:05:59.320 --> 00:06:04.270
Macclesfield, here in the UK. You can see
all of this in action. You might say "Well,

00:06:04.270 --> 00:06:09.610
how do you keep the sequence, then, of the
program instructions on the cards?".  You

00:06:09.610 --> 00:06:16.000
sequence them by tying your Jacquard cards
together with binding cords, down the

00:06:16.000 --> 00:06:20.350
sides. When you go on to the next card you
don't have to feed it in separately. It's

00:06:20.350 --> 00:06:26.050
pulled along in,  by the cords that bind
the sides of all the cards together. This

00:06:26.050 --> 00:06:32.380
most amazing machine was Turing
Complete. Now, I've done a video on Turing

00:06:32.380 --> 00:06:36.790
Complete and what's the requirements
for Turing Complete?  Number one - you've got

00:06:36.790 --> 00:06:41.380
to be able to have an arbitrary amount of memory.
Well, in principle, on this, you could.

00:06:41.380 --> 00:06:46.090
Number two - you've got to have a
conditional branch statement. You've got

00:06:46.090 --> 00:06:51.250
to [be able to] say "If this piece of data is this
then do that, else do this". Two possible

00:06:51.250 --> 00:06:56.040
routes through your program. Amazingly
Babbage's Analytical

00:06:56.040 --> 00:07:01.320
Engine has got 'if' statements built into
it. And, going along with that, whichever

00:07:01.320 --> 00:07:07.470
way you go on the 'if' statement, might need
you to do, as it were. a 'goto' to a

00:07:07.470 --> 00:07:12.180
different instruction. It was all done on
these cards. If you wanted to go to an

00:07:12.180 --> 00:07:18.150
instruction ten ahead [of current position] then 
the machine had to arrange to just slip ten cards on.

00:07:18.150 --> 00:07:24.510
Bump! Bump! Bump! Count to ten, and then "Ding!"
Up would come the sensor rods on the 11th card. 

00:07:24.510 --> 00:07:28.170
You've done your jump. And as part of being
able to do a jump

00:07:28.170 --> 00:07:32.070
why can't you jump back earlier? In other
words, do a loop?

00:07:32.070 --> 00:07:35.730
Yes, of course, if you can do an 'if' statement
you can jump backwards. You can do loops.

00:07:35.730 --> 00:07:40.920
And this [AE] could, and did, do loops as well.
Was he a complete genius did he realize

00:07:40.920 --> 00:07:45.900
what he was doing? Or did he just
accidentally do the right thing?  But this

00:07:45.900 --> 00:07:51.570
is the thing remember, the program is not
stored in the same place as the data, as

00:07:51.570 --> 00:07:57.060
it would be on a modern von Neumann computer.
They're both in RAM. I mean, great steps are taken

00:07:57.060 --> 00:08:01.680
[by the OS] to protect your program from being
over-written once it's known that that's where

00:08:01.680 --> 00:08:05.700
the program is. But, in principle, they

00:08:05.700 --> 00:08:08.880
both [program and data] sit in the same technology. 
Whereas, here, it was moving about with your cards,

00:08:08.880 --> 00:08:14.400
shuffling them backwards and forwards,
that caused the jumps and loops. So what

00:08:14.400 --> 00:08:21.540
else did this have?  Well, it did have the
ability to store numbers anywhere in

00:08:21.540 --> 00:08:26.460
memory so there was a crude
addressing system of sorts. It did have

00:08:26.460 --> 00:08:33.510
the ability to read in a number off
so-called 'number cards'. So if you were

00:08:33.510 --> 00:08:39.570
to say: "Let's add three plus five"
where are the 3 and the 5 going to come from?

00:08:39.570 --> 00:08:44.730
Well, the easy answer would be: "Get
them from number cards". So, you put an

00:08:44.730 --> 00:08:49.320
instruction here, in your program, saying
"read next number card" and the number

00:08:49.320 --> 00:08:54.510
cards here, which are at number 7 [see figure]. 
you would read in. And you say: "Ooh! that's 

00:08:54.510 --> 00:08:59.910
interesting! That's a three!" and you can
then either keep it in the CPU and read

00:08:59.910 --> 00:09:04.500
in the next card or, if you wanted to,
optionally, you could store the three and

00:09:04.500 --> 00:09:08.079
the five in memory.  Now if you decided 
to store

00:09:08.079 --> 00:09:12.579
them, and keep them for later, the most
amazing thing had to happen was that you

00:09:12.579 --> 00:09:16.689
had to take a copy of what is in the
column here, representing number three

00:09:16.689 --> 00:09:21.909
and transfer it to the place in store
where you want to hold it. In other words it's

00:09:21.909 --> 00:09:25.779
the data bus: stuff being pulled in and
pushed  back out. And in

00:09:25.779 --> 00:09:29.229
typical Victorian style it's not called the
data bus;

00:09:29.229 --> 00:09:34.359
it's called the Ingress Axis and the
Egress axis. Now the Ingress Axis was

00:09:34.359 --> 00:09:39.970
for reading stuff in from store, memory,
and the Egress Axis was for storing it

00:09:39.970 --> 00:09:45.669
back out again. But - and my mouth
dropped open - I mean "How is that

00:09:45.669 --> 00:09:51.970
mechanically done?!" And the answer is with
racks and pinions like you've never dreamed

00:09:51.970 --> 00:09:56.349
off in your worst nightmares. Because
this is 7 metres long and the only bit

00:09:56.349 --> 00:10:01.809
of vacant memory [say] is down at the far end.
You've got to transfer the number 3, seven

00:10:01.809 --> 00:10:07.449
metres down to be stored. Just
imagine these cogs and racks going "BRRRRR!!!!" 

00:10:07.449 --> 00:10:12.129
like mad, and transferring the 3 down to
the far end.  But you could. You can store

00:10:12.129 --> 00:10:16.479
the 3; you can store the 5 if you want
to. But you would retain copies in the

00:10:16.479 --> 00:10:21.759
CPU and you would add them together. The
addition was done by the barrel

00:10:21.759 --> 00:10:27.579
controllers here, that's part of the CPU,
and corresponds very closely to what's

00:10:27.579 --> 00:10:32.559
sometimes called the Microprogramming
Level inside a CPU. Again, for those of

00:10:32.559 --> 00:10:38.889
you who know about the era when CPUs were
really like 'computers within computers'.

00:10:38.889 --> 00:10:45.189
They were easier to program that way
rather than doing hard-core 'close to the

00:10:45.189 --> 00:10:50.529
metal' logic. [You] used to have the ability to
be able to write a 'program within a

00:10:50.529 --> 00:10:55.299
program' as to how to do an addition,
within the CPU. Now that is the basis on

00:10:55.299 --> 00:11:00.999
which this is done. There are sets of
barrels with pegs coming out of them

00:11:00.999 --> 00:11:05.619
which, if they rotate around in the right
way and read the two numbers that you

00:11:05.619 --> 00:11:13.329
put in, 3 and 5; you call up the
addition barrel which swings around on

00:11:13.329 --> 00:11:15.910
lots of levers and says "I am the 
addition barrel",

00:11:15.910 --> 00:11:21.040
reads off the two numbers - there's
lots of other complex stuff inside there

00:11:21.040 --> 00:11:24.490
because it's like an Arithmetic Unit
built in there as well - comes to the

00:11:24.490 --> 00:11:27.610
conclusion the answer's 8. And then posts
the answer back out,

00:11:27.610 --> 00:11:33.190
optionally, if that's what the program
cards say to do. So it's all kind of

00:11:33.190 --> 00:11:38.530
functionally complete there'd be an adder in
there, there'd be a thing for doing subtractions and

00:11:38.530 --> 00:11:46.840
so on. But the operations of it are
really very, very well known to us. There

00:11:46.840 --> 00:11:52.360
are other things in here called 'variable
cards'. Those really were to stipulate

00:11:52.360 --> 00:11:58.570
where things might be stored. You might
have a 'read a number' card but you would

00:11:58.570 --> 00:12:05.050
then, optionally,  read a variable card to
discover which location it's to be

00:12:05.050 --> 00:12:08.200
stored in - if you want to keep a
permanent copy. So you can imagine that

00:12:08.200 --> 00:12:14.260
writing programs for this thing was not
just getting the instructions right but

00:12:14.260 --> 00:12:19.240
also realizing that sometimes you
might need to do what we call a STORE

00:12:19.240 --> 00:12:24.250
operation in assembler-level programming
Well, that STORE operation required you

00:12:24.250 --> 00:12:29.440
to read yet another card from this stack to 
find out where to store it.  During the

00:12:29.440 --> 00:12:33.460
era where he [Babbage] was in charge of
supervising hand-produced logarithm

00:12:33.460 --> 00:12:36.580
tables it was the printing that was always

00:12:36.580 --> 00:12:42.730
the problem! Typos crept in! People sent
him flame-notes saying: "I bought your

00:12:42.730 --> 00:12:47.920
seven-figure log tables and there's the
following 50 errors!" So he always wanted

00:12:47.920 --> 00:12:53.590
his machines, if ever they got built, to have
printers built in at the back. So buried

00:12:53.590 --> 00:12:57.430
around at the back of this,
yes, there is a printer that could print

00:12:57.430 --> 00:13:02.490
out the answer and make a permanent record.

