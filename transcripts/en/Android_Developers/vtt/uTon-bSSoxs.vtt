WEBVTT
Kind: captions
Language: en

00:00:00.239 --> 00:00:01.530
SPEAKER 1: Thank you very much.

00:00:01.530 --> 00:00:05.260
This is my second time at an
Android Game Developer Summit.

00:00:07.800 --> 00:00:10.940
It is really good
to be here and I

00:00:10.940 --> 00:00:19.470
can see the faces I
have known before,

00:00:19.470 --> 00:00:25.090
and I hope they
enjoy this session.

00:00:25.090 --> 00:00:32.640
We'll talk a little bit about
Vulkan and also some problems

00:00:32.640 --> 00:00:36.580
we can face during
the real world.

00:00:36.580 --> 00:00:40.320
And I'll invite
Ito-san and Enji-san

00:00:40.320 --> 00:00:47.120
to talk about more their great
creation on the "Final Fantasy

00:00:47.120 --> 00:00:50.770
XV Pocket Edition"
as a best practice.

00:00:50.770 --> 00:00:54.180
So I'm [? reading ?]
GPU driver team

00:00:54.180 --> 00:00:56.670
and also game dev tech team
in Samsung mobile division.

00:01:00.140 --> 00:01:02.450
So we'll start with the Vulkan.

00:01:02.450 --> 00:01:06.260
So let's try this.

00:01:06.260 --> 00:01:10.180
Who already knew about Vulkan?

00:01:10.180 --> 00:01:12.730
Many Vulkan developers.

00:01:12.730 --> 00:01:18.350
Who are really engaged with
your Vulkan project now?

00:01:18.350 --> 00:01:19.450
There's some of us.

00:01:19.450 --> 00:01:21.980
[? A usual ?] thing, yes.

00:01:21.980 --> 00:01:25.650
So Vulkan is not new thing.

00:01:25.650 --> 00:01:31.880
The Vulkan published from 2006
in February [? Acronis, ?]

00:01:31.880 --> 00:01:36.110
and multiple companies really
hard effort to making that

00:01:36.110 --> 00:01:38.890
happen right on time.

00:01:38.890 --> 00:01:42.090
But still we are
saying that Vulkan

00:01:42.090 --> 00:01:44.760
is a future API or something.

00:01:44.760 --> 00:01:50.010
It's meaning it's not
perfect yet, maybe.

00:01:50.010 --> 00:01:54.120
So because of growing of
importance of the gaming

00:01:54.120 --> 00:01:59.152
and under it is
really higher than--

00:01:59.152 --> 00:02:02.570
and also you can see a market.

00:02:02.570 --> 00:02:09.949
And the business is merging
between a PC and mobile more

00:02:09.949 --> 00:02:10.789
and more.

00:02:10.789 --> 00:02:16.316
Like new [? drawing ?] in mobile
battle royale and PvP games.

00:02:16.316 --> 00:02:21.430
And what we've seen similar
with MMORPG and [INAUDIBLE]..

00:02:21.430 --> 00:02:25.080
So that the expectation
from the user

00:02:25.080 --> 00:02:29.060
is a little bit
different because there

00:02:29.060 --> 00:02:33.064
are different areas
or different platform.

00:02:35.930 --> 00:02:39.930
Because these users coming
from PC and console,

00:02:39.930 --> 00:02:43.070
they really care about
the fidelity of the game.

00:02:47.500 --> 00:02:49.730
But in Android,
the mobile devices

00:02:49.730 --> 00:02:54.390
are still in some limitation,
because the battery technology

00:02:54.390 --> 00:02:57.970
is not enhanced a lot.

00:02:57.970 --> 00:03:03.440
So it's stuck on somewhere
during recent over 10 years.

00:03:03.440 --> 00:03:08.260
So there are still many hurdles
to limited budget of the power

00:03:08.260 --> 00:03:10.270
and performance.

00:03:10.270 --> 00:03:16.800
So the new technology is really
required to overcome that.

00:03:16.800 --> 00:03:21.480
So the optimization itself is
really important than ever,

00:03:21.480 --> 00:03:25.230
but you can imagine easily about
the traditional optimization

00:03:25.230 --> 00:03:29.920
is just a trade off between the
quality and also performance.

00:03:29.920 --> 00:03:33.760
If you want to
increase in more FPS,

00:03:33.760 --> 00:03:38.440
then you're just dropping down
your fidelity of the game.

00:03:38.440 --> 00:03:42.760
But that user's expectation
is something like this.

00:03:42.760 --> 00:03:47.490
Even just five inches
[? of ?] your mobile phone.

00:03:47.490 --> 00:03:50.340
And how you can overcome this--

00:03:50.340 --> 00:03:53.040
what is advance optimization?

00:03:53.040 --> 00:03:56.240
What is the fundamental
solution for that?

00:03:56.240 --> 00:04:00.990
You go with a better quality
but better performance.

00:04:00.990 --> 00:04:06.630
We think that Vulkan
is one of the answers.

00:04:06.630 --> 00:04:08.500
Am I right?

00:04:08.500 --> 00:04:10.060
I'm not sure.

00:04:10.060 --> 00:04:13.700
But I am sure of several
things, even if Vulkan is not

00:04:13.700 --> 00:04:17.079
so perfect but still works.

00:04:17.079 --> 00:04:22.690
And because many people already
knew about what Vulkan is,

00:04:22.690 --> 00:04:25.920
so I'll just run through
this really quickly.

00:04:25.920 --> 00:04:31.040
The Vulkan advantage is
cross-platform support

00:04:31.040 --> 00:04:36.080
and lightweight, predictable,
explicit control.

00:04:36.080 --> 00:04:39.050
And there's a bunch
of great tools

00:04:39.050 --> 00:04:41.480
to help you to
optimize your game.

00:04:41.480 --> 00:04:44.650
That is backed.

00:04:44.650 --> 00:04:46.570
I'm not lying.

00:04:46.570 --> 00:04:49.810
And yes, there's
the low overhead.

00:04:49.810 --> 00:04:54.230
You can add more
[? drokols ?] than GLES.

00:04:54.230 --> 00:04:58.040
Does not means you can
cover 3,000 [? drokol ?]

00:04:58.040 --> 00:05:02.570
for your game, but is maybe
three or four times more

00:05:02.570 --> 00:05:06.560
[? drokols ?] you can cover
with Vulkan than GLES.

00:05:06.560 --> 00:05:08.760
So I heard sometimes
about our partner

00:05:08.760 --> 00:05:15.290
game developers mention a
game is really slow, even

00:05:15.290 --> 00:05:17.510
with the new Galaxy S9.

00:05:17.510 --> 00:05:21.550
I saw that is at
2,000 [? drokols. ?]

00:05:21.550 --> 00:05:27.550
It's not so capable to
be covered on a device,

00:05:27.550 --> 00:05:30.460
even with up to date model.

00:05:30.460 --> 00:05:34.990
But it's still that is capable
to do more [? drokols ?]

00:05:34.990 --> 00:05:37.810
with the Vulkan than GLES.

00:05:37.810 --> 00:05:41.610
And more controllability
you can have

00:05:41.610 --> 00:05:46.220
does not mean that you can
resolve any issues with that.

00:05:46.220 --> 00:05:50.860
But you have more margin
or way of control things

00:05:50.860 --> 00:05:54.780
that feed into your content
for better performance.

00:05:54.780 --> 00:05:56.760
It's not just a
command [? bots, ?]

00:05:56.760 --> 00:06:01.170
or command before submission,
but also the other things too.

00:06:01.170 --> 00:06:05.100
Like from allocation of
memory, binding the memory,

00:06:05.100 --> 00:06:09.720
copying the memory, and also
to merging the render passes

00:06:09.720 --> 00:06:11.670
and making cell passes.

00:06:11.670 --> 00:06:14.770
There is a grouping
that passes into the one

00:06:14.770 --> 00:06:19.380
or split, the timings, so on.

00:06:19.380 --> 00:06:26.180
And the other various way of
optimization you can have.

00:06:26.180 --> 00:06:30.890
You can make more better
management of the resources

00:06:30.890 --> 00:06:34.910
and can have more a way
of reusing your resources

00:06:34.910 --> 00:06:38.000
you used before.

00:06:38.000 --> 00:06:42.110
That means that there's more
possibilities you can optimize

00:06:42.110 --> 00:06:47.090
or improve things better than
GLES, because GLES there's

00:06:47.090 --> 00:06:49.790
not many things you
can do unless you

00:06:49.790 --> 00:06:52.880
can have a implementation.

00:06:52.880 --> 00:06:54.630
But Vulkan you
can see many ways,

00:06:54.630 --> 00:06:58.190
even if that is not giving
you that twice or a third time

00:06:58.190 --> 00:06:59.120
better performance.

00:06:59.120 --> 00:07:04.130
But you can find a small
amount of improvement

00:07:04.130 --> 00:07:08.000
that also can give
you more capability

00:07:08.000 --> 00:07:15.630
to do things more you can show
to people, make differences.

00:07:15.630 --> 00:07:23.710
So yes, we can see that twice or
a third time better performance

00:07:23.710 --> 00:07:26.460
FPS with the sample demo.

00:07:26.460 --> 00:07:29.640
We made some cool
demo, Protostar,

00:07:29.640 --> 00:07:32.760
for our [? S7 ?] [? unpack. ?]

00:07:32.760 --> 00:07:39.380
But that is just a demo and
the samples we're showing off.

00:07:39.380 --> 00:07:43.420
The real world is not
that simple like this.

00:07:43.420 --> 00:07:47.450
It's more complicated than that.

00:07:47.450 --> 00:07:51.430
And it could be thing you--

00:07:51.430 --> 00:07:53.590
the Vulkan is a
kind of the magic

00:07:53.590 --> 00:07:57.770
and just click the part and
everything is going better.

00:07:57.770 --> 00:08:00.530
But real world, that is not.

00:08:00.530 --> 00:08:05.240
So you have to do something and
sometimes you cannot get any

00:08:05.240 --> 00:08:07.320
benefit of that.

00:08:07.320 --> 00:08:11.430
So it means that Vulkan
as advanced technology

00:08:11.430 --> 00:08:15.450
can deliver you more optimizing
your content with better

00:08:15.450 --> 00:08:19.030
quality and better
performance at the same time.

00:08:19.030 --> 00:08:24.630
But it could not be the solution
for your content sometimes.

00:08:24.630 --> 00:08:28.500
So during our collaboration
with [? expressive, ?]

00:08:28.500 --> 00:08:33.270
with our partner game
companies, and there

00:08:33.270 --> 00:08:37.179
are new [INAUDIBLE]
gaming problem with 2016.

00:08:37.179 --> 00:08:41.880
Our game developer support
program Galaxy GameDev.

00:08:41.880 --> 00:08:45.880
We struggled with many
issues and problems.

00:08:45.880 --> 00:08:48.960
So now I will talk about
the real world problems we

00:08:48.960 --> 00:08:52.090
learned from those experiences.

00:08:54.610 --> 00:09:00.440
Yes, the Vulkan has
some advantages.

00:09:00.440 --> 00:09:02.180
But it is not so
simple and is not

00:09:02.180 --> 00:09:07.200
so all solution for all cases.

00:09:07.200 --> 00:09:11.480
If you do just porting
API from GLES to Vulkan

00:09:11.480 --> 00:09:14.870
and that implementation
is proper,

00:09:14.870 --> 00:09:19.850
then you can have a quite
big improvement in CPU.

00:09:19.850 --> 00:09:21.480
That is true.

00:09:21.480 --> 00:09:27.860
But it's not giving you
sometimes better performance,

00:09:27.860 --> 00:09:31.550
because it sometimes
is bounded by GPU fully

00:09:31.550 --> 00:09:34.280
or your implementation
is not wrong,

00:09:34.280 --> 00:09:38.750
but it's not well fitted into
a certain game, a certain GPU

00:09:38.750 --> 00:09:41.760
architecture.

00:09:41.760 --> 00:09:46.890
So the GPU is the real
problem, yes, partly.

00:09:46.890 --> 00:09:49.310
There's some part
of that the GPU

00:09:49.310 --> 00:09:53.410
driver is the issue because
that the quality is not enough.

00:09:53.410 --> 00:09:57.800
Sometimes the game developers
on the console and PC,

00:09:57.800 --> 00:10:02.300
they complain about that
the mobile GPU is not

00:10:02.300 --> 00:10:04.400
enough performance.

00:10:04.400 --> 00:10:09.680
It's because that
mobile GPU is running

00:10:09.680 --> 00:10:15.920
on just less than 10 watt
power, but your GeForce

00:10:15.920 --> 00:10:21.290
is running with over
100 watts or something.

00:10:21.290 --> 00:10:25.790
It's 10 times bigger
power budget they can use,

00:10:25.790 --> 00:10:28.910
so the mobile GPU is--

00:10:28.910 --> 00:10:31.990
you have to bear on it.

00:10:31.990 --> 00:10:34.210
Those two quality and
performance issues

00:10:34.210 --> 00:10:37.570
is just fundamental thing.

00:10:37.570 --> 00:10:41.680
Quality we are now trying
to improve more than that

00:10:41.680 --> 00:10:47.270
with the Google and also
the other GPU vendors.

00:10:47.270 --> 00:10:50.120
But still there's
something remained.

00:10:50.120 --> 00:10:54.840
So the GPU is not the
real problems, partly,

00:10:54.840 --> 00:10:59.230
because you are wrong
targeting the power budget

00:10:59.230 --> 00:11:00.230
and performance target.

00:11:03.880 --> 00:11:09.320
So it's bounded by
fully GPU because you

00:11:09.320 --> 00:11:12.280
overloaded the fidelity
of the graphics

00:11:12.280 --> 00:11:16.150
to over work your GPU a lot.

00:11:16.150 --> 00:11:18.910
That will not give
you any benefit.

00:11:18.910 --> 00:11:22.990
And also your implementation
is not well fitted

00:11:22.990 --> 00:11:25.510
with certain GPU architecture.

00:11:25.510 --> 00:11:28.440
That is also one of the problem.

00:11:28.440 --> 00:11:33.000
So you have to figure out with
some optimization or better

00:11:33.000 --> 00:11:37.620
policy to target the power
budget and performance target.

00:11:40.570 --> 00:11:44.950
So for chasing that
topic, the developers

00:11:44.950 --> 00:11:49.900
really need to have some way
of optimizing and analysis

00:11:49.900 --> 00:11:51.460
or something.

00:11:51.460 --> 00:11:56.180
So the simplest way is just
delivering better game engine,

00:11:56.180 --> 00:11:58.430
including all the solution.

00:11:58.430 --> 00:12:04.525
But as you know, the Unity
and UE4 is not that level yet.

00:12:04.525 --> 00:12:06.780
Oh, sorry.

00:12:06.780 --> 00:12:09.090
And also, we have
to bring more better

00:12:09.090 --> 00:12:13.140
tooling to understand more--

00:12:13.140 --> 00:12:17.880
to deliver a better way
of the game developers

00:12:17.880 --> 00:12:23.820
to understand more about their
games running on a device

00:12:23.820 --> 00:12:25.260
inside.

00:12:25.260 --> 00:12:29.210
And also, delivering
a more better way

00:12:29.210 --> 00:12:35.810
of interacting the OEM and GPU
vendor to share your feedback.

00:12:35.810 --> 00:12:39.950
You can share about
similar things

00:12:39.950 --> 00:12:45.140
what I'm now talking about, and
that many times former session

00:12:45.140 --> 00:12:48.380
also Google guys
now talking about.

00:12:48.380 --> 00:12:51.230
So the vendor channel
is there and also you

00:12:51.230 --> 00:12:53.270
have a Google channel.

00:12:53.270 --> 00:12:58.430
But the problem is when
you found that AGP driver

00:12:58.430 --> 00:13:04.810
box, then wherever you contact
with, the vendor or Google,

00:13:04.810 --> 00:13:07.550
but is not give you
fix your problem.

00:13:07.550 --> 00:13:09.950
Because the driver
fixes should be

00:13:09.950 --> 00:13:13.700
shipping into the real
product, into the market,

00:13:13.700 --> 00:13:18.220
so we have to know about
that kind of thing.

00:13:18.220 --> 00:13:22.910
But usually the game developer
doesn't have any channel

00:13:22.910 --> 00:13:26.000
to contacting with OEM.

00:13:26.000 --> 00:13:31.710
That is really hurt the
situation around the ecosystem,

00:13:31.710 --> 00:13:34.850
so we are now
seeing the game dev

00:13:34.850 --> 00:13:38.680
and you can contact with
the game dev at samsung.com

00:13:38.680 --> 00:13:41.110
anytime if you want.

00:13:41.110 --> 00:13:46.452
And the last one is the better
guidance about power budget

00:13:46.452 --> 00:13:47.410
and performance target.

00:13:47.410 --> 00:13:52.650
I want to really
talk more about this.

00:13:52.650 --> 00:13:54.680
Power budget.

00:13:54.680 --> 00:14:00.140
So my personal opinion, you
have to avoid the GPU bounding

00:14:00.140 --> 00:14:02.940
situation at all
with your content.

00:14:05.990 --> 00:14:08.850
So there is three
bounding types.

00:14:08.850 --> 00:14:14.600
One is CPU bounding and
second is this GPU bounding.

00:14:14.600 --> 00:14:18.473
And the best case is a
non-bounding situation.

00:14:21.580 --> 00:14:26.910
So if you have the three
different type of situation

00:14:26.910 --> 00:14:31.770
with your GLES build,
and after Vulkan port,

00:14:31.770 --> 00:14:36.880
you can have some benefit
with the Vulkan with the CPU

00:14:36.880 --> 00:14:41.620
bounding in normal situation,
but you cannot see any benefit

00:14:41.620 --> 00:14:45.720
with Vulkan port with
the GPU bounding.

00:14:45.720 --> 00:14:49.500
You can easily see
after Vulkan port,

00:14:49.500 --> 00:14:54.050
the CPU load decreased
and then GPU load

00:14:54.050 --> 00:14:57.300
increased because
the FPS increasing.

00:14:57.300 --> 00:15:01.350
But with the GPU bounding
situation, just the CPU drop.

00:15:01.350 --> 00:15:06.660
But because GPU is
already in the 100% busy,

00:15:06.660 --> 00:15:12.230
so there's no way of
increasing more FPS.

00:15:12.230 --> 00:15:19.110
So the good design policy
about the power budget

00:15:19.110 --> 00:15:25.920
is making a reference load
with your former device target

00:15:25.920 --> 00:15:32.390
and adjusting that load with
the other quality leveling

00:15:32.390 --> 00:15:34.890
and also the different
performance target

00:15:34.890 --> 00:15:40.400
adjustment for the lower
load for the all devices set,

00:15:40.400 --> 00:15:46.270
and the higher load for
the latest device set.

00:15:46.270 --> 00:15:51.160
And also you can consider
carefully, this budget is also,

00:15:51.160 --> 00:15:53.861
you have to consider,
throttling situation.

00:15:57.160 --> 00:15:59.830
And about performance
target, you sometimes

00:15:59.830 --> 00:16:01.720
have to design your
performance target

00:16:01.720 --> 00:16:04.560
with the resolution and FPS.

00:16:04.560 --> 00:16:08.020
So HD 30 frame per
second is there,

00:16:08.020 --> 00:16:11.610
then you can easily
imagine that increasing

00:16:11.610 --> 00:16:16.260
your resolution to the full
HD will go up the GPU a lot.

00:16:16.260 --> 00:16:20.850
But with both FPS and
resolution double,

00:16:20.850 --> 00:16:23.250
then you can expect
easily to imagine

00:16:23.250 --> 00:16:27.240
that the right side of
the picture, the GPU

00:16:27.240 --> 00:16:31.090
will be the quadrupole
and CPU will be double.

00:16:31.090 --> 00:16:38.530
It is quite higher increasing
load for both GPU and CPU.

00:16:38.530 --> 00:16:41.530
And quality leveling is a
little bit more complicated.

00:16:44.170 --> 00:16:50.890
You can tune your quality lever
for the effect or geometry

00:16:50.890 --> 00:16:56.050
and character details, and
also resolution or texture.

00:16:56.050 --> 00:17:00.880
But it also can
make a side effect

00:17:00.880 --> 00:17:06.000
to give hardware memory
bandwidth and so on.

00:17:06.000 --> 00:17:09.260
So you have to really
carefully design that and need

00:17:09.260 --> 00:17:13.060
more better understanding about
the GPU and system inside.

00:17:20.069 --> 00:17:22.300
So with this guidance
I have shared

00:17:22.300 --> 00:17:26.640
during this session, the
policy design performance

00:17:26.640 --> 00:17:29.360
target and also
the power budget,

00:17:29.360 --> 00:17:33.380
we use this policy
for our partners.

00:17:33.380 --> 00:17:36.500
And 90% of partnered
games get benefit.

00:17:36.500 --> 00:17:43.920
It comes from the 15% to
get around the twice better.

00:17:43.920 --> 00:17:50.160
And one main problem about this
guidance, because you usually

00:17:50.160 --> 00:17:56.960
do not have any way to
measuring the load itself easily

00:17:56.960 --> 00:18:00.250
with the other tools and
also just in the device.

00:18:00.250 --> 00:18:03.880
So we are developing
our internal tool

00:18:03.880 --> 00:18:08.290
that's shipping with the
Galaxy, called GPUWatch, that

00:18:08.290 --> 00:18:10.930
will give you a better
understanding and a way

00:18:10.930 --> 00:18:14.080
of measuring the load
within that budget

00:18:14.080 --> 00:18:15.660
target of that device.

00:18:19.545 --> 00:18:20.170
One more thing.

00:18:20.170 --> 00:18:27.930
Is a plan to be integrated
into the developer option.

00:18:27.930 --> 00:18:30.610
I cannot say--

00:18:30.610 --> 00:18:34.030
I cannot promise when
that will be shipping,

00:18:34.030 --> 00:18:37.360
but that will be shipping
at some day soon.

00:18:40.080 --> 00:18:42.850
And for better understanding
about the tool,

00:18:42.850 --> 00:18:48.220
we are working with the Google
and other GPU vendors like

00:18:48.220 --> 00:18:53.050
GAPID and PerfDoc, RenderDoc,
and the vendor tools like

00:18:53.050 --> 00:18:55.510
[? Snapter ?] and Profiler,
[? Molygraphic ?] [INAUDIBLE]

00:18:55.510 --> 00:18:59.280
and the [? S5 ?]
[? streamline. ?] We are really

00:18:59.280 --> 00:19:04.560
hard at work to support them and
improve that and shipping with

00:19:04.560 --> 00:19:07.550
the more better
support the tool.

00:19:07.550 --> 00:19:12.990
Summary is we try to
steer Vulkan-centric work

00:19:12.990 --> 00:19:18.260
in the industry of
gaming under mobile,

00:19:18.260 --> 00:19:22.120
but it is really
not that simple.

00:19:22.120 --> 00:19:25.780
And so we continue
the heavy effort

00:19:25.780 --> 00:19:30.100
to bring the quality of the
driver and better tooling.

00:19:30.100 --> 00:19:32.650
Also will deliver better
and clear guidance

00:19:32.650 --> 00:19:36.490
of the power budget
and perform target.

00:19:36.490 --> 00:19:39.250
Really hope to
have your feedback.

00:19:39.250 --> 00:19:42.280
Please contact again
gamedev@samsung.com

00:19:42.280 --> 00:19:45.490
for any questions or feedback.

00:19:45.490 --> 00:19:50.050
And I want to introduce
Ito-san and Enji-san to talk

00:19:50.050 --> 00:19:53.020
about the Final Fantasy
XV Pocket Edition

00:19:53.020 --> 00:19:57.003
as the best practices of
mobile game optimization.

00:20:04.400 --> 00:20:08.690
KOSEI ITO: OK, hello.

00:20:08.690 --> 00:20:12.240
My name is Kosei Ito,
and I am a producer

00:20:12.240 --> 00:20:15.930
at Luminous Productions, one
of the Square Enix studio.

00:20:15.930 --> 00:20:18.740
First, please take a
look at this short video.

00:20:21.728 --> 00:20:24.218
[VIDEO PLAYBACK]

00:20:24.218 --> 00:20:27.206
[DRAMATIC MUSIC]

00:22:53.120 --> 00:22:56.860
[END PLAYBACK]

00:22:56.860 --> 00:22:58.800
KOSEI ITO: OK, so
what you just saw

00:22:58.800 --> 00:23:03.300
was our latest Final
Fantasy XV efforts.

00:23:03.300 --> 00:23:06.870
We call it Final
Fantasy XV universe.

00:23:06.870 --> 00:23:12.420
It is a universe that
has a console game, FFXV,

00:23:12.420 --> 00:23:14.280
at its base.

00:23:14.280 --> 00:23:17.070
It continues to
transcend all platforms

00:23:17.070 --> 00:23:22.290
and expand its reach
throughout the globe.

00:23:22.290 --> 00:23:25.590
Two years ago, Final
Fantasy XV, which

00:23:25.590 --> 00:23:28.860
was released for
home game console,

00:23:28.860 --> 00:23:35.670
become a huge hit, selling over
6.5 million units worldwide.

00:23:35.670 --> 00:23:39.360
Now the mobile version
of Final Fantasy XV

00:23:39.360 --> 00:23:44.660
comes to smartphone and tablet
with the Final Fantasy XV

00:23:44.660 --> 00:23:46.770
Pocket Edition
that we would like

00:23:46.770 --> 00:23:49.810
to showcase for you all today.

00:23:49.810 --> 00:23:53.234
So please watch
this short video.

00:23:53.234 --> 00:23:58.712
[VIDEO PLAYBACK]

00:23:58.712 --> 00:24:02.198
[HARMONICA MUSIC]

00:24:14.680 --> 00:24:17.100
- I think we can forget
about hitching our way there.

00:24:17.100 --> 00:24:20.472
I thought people were
friendly outside of the city.

00:24:20.472 --> 00:24:25.145
- You can only go so far on
the kindness of strangers.

00:24:25.145 --> 00:24:27.630
- Come on, the car isn't
going to move itself.

00:24:30.927 --> 00:24:32.760
- I thought the car was
supposed to move us.

00:24:32.760 --> 00:24:33.910
- Wouldn't that be nice.

00:24:33.910 --> 00:24:34.480
- Can it.

00:24:34.480 --> 00:24:35.370
Ready, steady?

00:24:37.974 --> 00:24:39.135
- Hey there.

00:24:39.135 --> 00:24:41.280
Y'all kept a girl waiting.

00:24:41.280 --> 00:24:45.390
Cindy, Cid's grease
monkey grand daughter.

00:24:45.390 --> 00:24:48.067
If you're up to the
challenge, how about it?

00:24:59.498 --> 00:25:01.486
- See you, slowpoke.

00:25:01.486 --> 00:25:02.480
- I'm going up ahead.

00:25:08.441 --> 00:25:08.941
- Noct!

00:25:41.743 --> 00:25:45.320
[END PLAYBACK]

00:25:45.320 --> 00:25:47.470
KOSEI ITO: Sorry, we
have some audio problems.

00:25:47.470 --> 00:25:50.910
Anyway, Final Fantasy
XV Pocket Edition

00:25:50.910 --> 00:25:54.120
underwent a major
optimization process

00:25:54.120 --> 00:25:58.230
in order to bring Final
Fantasy XV to mobile devices.

00:25:58.230 --> 00:26:02.070
The game has also
been root optimized.

00:26:02.070 --> 00:26:07.950
And awesome game graphics
is just the start of it.

00:26:07.950 --> 00:26:10.590
We logically changed
the look of the game

00:26:10.590 --> 00:26:14.550
to match our target users.

00:26:14.550 --> 00:26:19.020
The game was introduced
in a series of episodes.

00:26:19.020 --> 00:26:25.060
And by the way, Galaxy played
a huge role in its development.

00:26:25.060 --> 00:26:29.040
The game fully supported
DeX and Vulkan.

00:26:29.040 --> 00:26:31.320
So now let's get
the lead programmer,

00:26:31.320 --> 00:26:34.770
Yoshimasa Enji at
Summer Time Studio,

00:26:34.770 --> 00:26:38.910
to showcase the activities
that we engaged in with Samsung

00:26:38.910 --> 00:26:39.725
for Vulkan support.

00:26:53.950 --> 00:26:58.510
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:26:58.510 --> 00:27:01.190
INTERPRETER: I'm going to
help him for translation.

00:27:01.190 --> 00:27:03.470
Hello, my name is Enji.

00:27:03.470 --> 00:27:07.190
I'm the CTO of Summer Time
Studios, the developer of Final

00:27:07.190 --> 00:27:09.830
Fantasy FV Pocket Edition.

00:27:09.830 --> 00:27:18.837
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:27:18.837 --> 00:27:20.420
INTERPRETER: Here I
would like to talk

00:27:20.420 --> 00:27:24.800
about optimization using Vulkan
of the Final Fantasy XV Pocket

00:27:24.800 --> 00:27:27.142
Edition.

00:27:27.142 --> 00:27:29.100
YOSHIMASA ENJI: Final
Fantasy XV Pocket Edition

00:27:29.100 --> 00:27:32.380
[SPEAKING JAPANESE]

00:27:32.380 --> 00:27:33.880
INTERPRETER: One
of the major points

00:27:33.880 --> 00:27:36.920
of Final Fantasy
XV, graphics-wise,

00:27:36.920 --> 00:27:40.820
is its art style.

00:27:40.820 --> 00:27:48.985
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:27:48.985 --> 00:27:50.360
INTERPRETER: While
being faithful

00:27:50.360 --> 00:27:53.640
to the world of Final
Fantasy, we aimed [INAUDIBLE]

00:27:53.640 --> 00:27:56.880
[? side, ?] which is like a
more friendly style rather

00:27:56.880 --> 00:27:59.830
than a photorealistic one.

00:27:59.830 --> 00:28:09.630
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:28:09.630 --> 00:28:12.080
INTERPRETER: In order to
bring this other style

00:28:12.080 --> 00:28:18.040
to appeal wider audience,
we needed to create a new--

00:28:18.040 --> 00:28:23.280
not an anime style, but
to produce an ambiance

00:28:23.280 --> 00:28:29.110
of the visuals using new style.

00:28:29.110 --> 00:28:41.220
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:28:41.220 --> 00:28:42.660
INTERPRETER: To
achieve that goal,

00:28:42.660 --> 00:28:46.110
we discussed with
Unity technology

00:28:46.110 --> 00:28:51.675
and eventually we
decided to adopt

00:28:51.675 --> 00:28:55.430
post-processing stack of Unity.

00:28:55.430 --> 00:29:08.080
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:29:08.080 --> 00:29:09.790
INTERPRETER: So
post-processing stack

00:29:09.790 --> 00:29:13.000
is Unity's new feature
set that can manage

00:29:13.000 --> 00:29:21.150
multiple posts affecting to one,
and quite optimal to produce

00:29:21.150 --> 00:29:24.970
great graphics effect.

00:29:24.970 --> 00:29:34.440
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:29:34.440 --> 00:29:37.140
INTERPRETER: By adapting
the post-processing stack,

00:29:37.140 --> 00:29:40.800
we were able to achieve
better graphics quality

00:29:40.800 --> 00:29:47.490
and we were able to tune each
of the scenes in the game.

00:29:47.490 --> 00:29:52.800
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:29:52.800 --> 00:29:55.530
INTERPRETER: Not only do we
look in to the cutscenes,

00:29:55.530 --> 00:29:59.910
but also during the gameplay,
we have tuned the performance

00:29:59.910 --> 00:30:05.580
using the post-processing stack.

00:30:05.580 --> 00:30:09.740
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:30:09.740 --> 00:30:12.290
INTERPRETER: Quality
screenshot which

00:30:12.290 --> 00:30:15.120
shows the difference
of quality is here.

00:30:18.400 --> 00:30:23.240
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:30:23.240 --> 00:30:26.340
INTERPRETER: So the
screenshots is comparable

00:30:26.340 --> 00:30:30.440
before and after using the
post-processing stacks.

00:30:30.440 --> 00:30:39.870
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:30:39.870 --> 00:30:41.580
INTERPRETER: For
each of the scenes,

00:30:41.580 --> 00:30:45.450
we are able to choose
a graphics parameter

00:30:45.450 --> 00:30:49.900
and we are able to achieve those
qualities that our artists were

00:30:49.900 --> 00:30:51.330
aiming to.

00:30:51.330 --> 00:31:03.120
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:31:03.120 --> 00:31:06.970
INTERPRETER: We used a
color grading [? broom ?]

00:31:06.970 --> 00:31:09.195
and full-screen anti-aliasing.

00:31:09.195 --> 00:31:12.330
And for some scenes
we adapted the depth

00:31:12.330 --> 00:31:16.890
of field, motion blur,
and vignette and so on.

00:31:16.890 --> 00:31:22.020
We used multiple post effects.

00:31:22.020 --> 00:31:32.110
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:31:32.110 --> 00:31:34.390
INTERPRETER: But
as you can imagine,

00:31:34.390 --> 00:31:38.640
those kinds of post-processing
would take a lot of GPU load,

00:31:38.640 --> 00:31:42.270
and sometimes it went
to below 20 frames

00:31:42.270 --> 00:31:46.030
per second on some
Android devices.

00:31:46.030 --> 00:31:51.840
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:31:51.840 --> 00:31:54.660
INTERPRETER: Our goal was to
achieve 30 frames per second,

00:31:54.660 --> 00:31:59.340
so we needed to do some
kind of optimization

00:31:59.340 --> 00:32:02.055
to achieve the goal of
the graphics quality.

00:32:05.380 --> 00:32:15.190
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:32:15.190 --> 00:32:18.730
INTERPRETER: So we worked
together with Samsung graphics

00:32:18.730 --> 00:32:20.620
optimization team
and Square Enix

00:32:20.620 --> 00:32:24.336
as well to achieve the goal.

00:32:24.336 --> 00:32:33.560
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:32:33.560 --> 00:32:36.360
INTERPRETER: Of our my initial
expectations, just having

00:32:36.360 --> 00:32:38.110
the short time camp.

00:32:38.110 --> 00:32:46.480
But eventually it became a total
of 53 days of support camp.

00:32:46.480 --> 00:32:55.820
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:32:55.820 --> 00:33:00.430
INTERPRETER: While at the camp,
we optimized Unity engine side

00:33:00.430 --> 00:33:04.430
and we are able to achieve
the goal using Vulkan.

00:33:07.678 --> 00:33:16.410
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:33:16.410 --> 00:33:21.800
INTERPRETER: At first, we
built Unity using Vulkan.

00:33:21.800 --> 00:33:27.220
We debuted its Unity Engine
using Vulkan settings.

00:33:27.220 --> 00:33:36.100
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:33:36.100 --> 00:33:38.430
INTERPRETER: That's
a profiling result.

00:33:38.430 --> 00:33:41.070
We found that the
multiple RenderPass

00:33:41.070 --> 00:33:45.767
was being used, which can be
combined into one RenderPass.

00:33:45.767 --> 00:33:54.280
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:33:54.280 --> 00:33:59.020
INTERPRETER: So we added a quick
call to check RenderPass status

00:33:59.020 --> 00:34:04.240
and merge multiple
RenderPass in to one pass.

00:34:04.240 --> 00:34:14.420
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:34:14.420 --> 00:34:16.929
INTERPRETER: In the Final
Fantasy XV Pocket Edition,

00:34:16.929 --> 00:34:22.130
we are using Unity
with this optimization.

00:34:22.130 --> 00:34:33.949
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:34:33.949 --> 00:34:36.670
INTERPRETER: This
version of Unity Editor

00:34:36.670 --> 00:34:42.280
is having as optimization
or bug fixes, like not

00:34:42.280 --> 00:34:46.150
to crash the editor,
or some optimization

00:34:46.150 --> 00:34:51.110
to [? makes ?] DeX support.

00:34:51.110 --> 00:35:04.810
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:35:04.810 --> 00:35:07.670
INTERPRETER: The editor
crash that I mentioned,

00:35:07.670 --> 00:35:12.160
that was originated from
our [? code side, ?] but it

00:35:12.160 --> 00:35:15.230
was hard in our side to
work around those issues.

00:35:15.230 --> 00:35:24.580
So we chose to have the Vulkan
on the Unity Editor side.

00:35:24.580 --> 00:35:35.010
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:35:35.010 --> 00:35:37.830
INTERPRETER: By performing
the optimizations,

00:35:37.830 --> 00:35:41.850
we're able to achieve the
CPU load from 60 millisecond

00:35:41.850 --> 00:35:45.815
to 90 millisecond using Vulkan.

00:35:45.815 --> 00:35:54.810
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:35:54.810 --> 00:35:57.470
INTERPRETER: In comparison
to OpenGL version,

00:35:57.470 --> 00:36:02.130
OpenGL version was 18 frames
per second and Vulkan version

00:36:02.130 --> 00:36:06.910
is 30 frames per second.

00:36:06.910 --> 00:36:17.470
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:36:17.470 --> 00:36:21.760
INTERPRETER: So that in our
case of Final Fantasy XV Pocket

00:36:21.760 --> 00:36:26.160
Edition optimization, adopting
Vulkan API worked pretty well.

00:36:29.620 --> 00:36:36.350
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:36:36.350 --> 00:36:39.360
INTERPRETER: We did some other
optimization, not limited

00:36:39.360 --> 00:36:40.660
to Vulkan itself.

00:36:40.660 --> 00:36:48.090
But we did some optimization of
our gaming code itself as well.

00:36:48.090 --> 00:36:55.990
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:36:55.990 --> 00:36:58.260
INTERPRETER: Samsung
Game Dev team also

00:36:58.260 --> 00:37:01.820
contributed to
this part as well.

00:37:01.820 --> 00:37:11.250
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:37:11.250 --> 00:37:14.110
INTERPRETER: For the post
effect, post-processing

00:37:14.110 --> 00:37:22.259
as well, we did the optimization
of the code itself using Unity.

00:37:22.259 --> 00:37:31.030
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:37:31.030 --> 00:37:36.105
INTERPRETER: That version of
optimized post-processing, this

00:37:36.105 --> 00:37:40.550
is why it's different from
Unity's post-processing stack.

00:37:40.550 --> 00:37:46.264
And it is selectable in
an option in the game.

00:37:49.050 --> 00:38:00.480
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:38:00.480 --> 00:38:03.610
INTERPRETER: We are also keeping
the post-processing stack

00:38:03.610 --> 00:38:06.780
option as is because
it can produce

00:38:06.780 --> 00:38:09.060
better graphics quality.

00:38:09.060 --> 00:38:16.850
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:38:16.850 --> 00:38:20.220
INTERPRETER: And we also
added lighter rendering option

00:38:20.220 --> 00:38:23.880
to achieve a better performance
in a wider variety of devices.

00:38:27.296 --> 00:38:32.600
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:38:32.600 --> 00:38:37.590
INTERPRETER: We did optimization
in the shader code as well.

00:38:37.590 --> 00:38:42.920
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:38:42.920 --> 00:38:46.990
INTERPRETER: Also, we added
a cap for the maximum number

00:38:46.990 --> 00:38:51.030
of particles used in the game.

00:38:51.030 --> 00:39:02.140
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:39:02.140 --> 00:39:05.220
INTERPRETER: And are not
limited to optimization.

00:39:05.220 --> 00:39:09.660
Samsung Dev Team contributed
to fix some issues in the game

00:39:09.660 --> 00:39:12.330
code and a lot of time
optimizations as well,

00:39:12.330 --> 00:39:16.780
so we are very thankful to them.

00:39:16.780 --> 00:39:20.580
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:39:20.580 --> 00:39:23.310
INTERPRETER: They did
tons of contributions,

00:39:23.310 --> 00:39:26.420
but we cannot list
all of them here.

00:39:29.120 --> 00:39:41.605
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:39:41.605 --> 00:39:45.680
INTERPRETER: And so a result
of optimization, in average

00:39:45.680 --> 00:39:48.980
we were able to achieve
an increase of 10

00:39:48.980 --> 00:39:52.550
frames per second in average,
and that maximum frame rate

00:39:52.550 --> 00:39:54.560
was doubled.

00:39:54.560 --> 00:40:01.480
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:40:01.480 --> 00:40:03.370
INTERPRETER: So that
we have successfully

00:40:03.370 --> 00:40:08.080
adapted post-processing
stack as an advanced feature

00:40:08.080 --> 00:40:09.445
to achieve better quality.

00:40:12.490 --> 00:40:23.060
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:40:23.060 --> 00:40:27.030
INTERPRETER: I am very proud of
[? our ?] [? art, ?] which was

00:40:27.030 --> 00:40:33.360
able to achieve with co-working
with the Samsung and Square

00:40:33.360 --> 00:40:36.170
Enix development team.

00:40:36.170 --> 00:40:45.450
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:40:45.450 --> 00:40:48.270
INTERPRETER: We are able
to achieve better quality

00:40:48.270 --> 00:40:51.260
and performance at the
same time using Vulkan

00:40:51.260 --> 00:40:53.920
as our optimization techniques.

00:40:53.920 --> 00:41:00.920
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:41:00.920 --> 00:41:04.050
INTERPRETER: This has been
a great opportunity for us

00:41:04.050 --> 00:41:08.340
to achieve better quality
and to develop greater games.

00:41:08.340 --> 00:41:15.128
Many thanks to the
people to contribute.

00:41:15.128 --> 00:41:16.586
YOSHIMASA ENJI:
[SPEAKING JAPANESE]

00:41:16.586 --> 00:41:18.900
INTERPRETER: Thank
you very much.

00:41:18.900 --> 00:41:21.650
[APPLAUSE]

