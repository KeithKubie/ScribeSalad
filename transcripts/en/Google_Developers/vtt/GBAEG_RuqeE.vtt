WEBVTT
Kind: captions
Language: en

00:00:01.404 --> 00:00:03.570
SERGE LACHAPELLE: I'll just
introduce everyone once,

00:00:03.570 --> 00:00:05.720
so we won't have to do it.

00:00:05.720 --> 00:00:09.330
I'm Serge, product
lead on Chrome WebRTC.

00:00:09.330 --> 00:00:12.670
This is my partner in crime,
Justin, who's tech lead.

00:00:12.670 --> 00:00:15.760
Sam works with me very
closely, he runs dev rel,

00:00:15.760 --> 00:00:19.240
so developer relations, for
Chrome Media, based in London.

00:00:19.240 --> 00:00:20.660
Pangu.

00:00:20.660 --> 00:00:22.580
Hi, Pangu.

00:00:22.580 --> 00:00:23.730
The guy with the long name.

00:00:23.730 --> 00:00:24.230
Pangu.

00:00:24.230 --> 00:00:28.320
works with WebM, so
the VP codecs and such.

00:00:28.320 --> 00:00:31.050
So he's going to bring you a
little bit of his knowledge

00:00:31.050 --> 00:00:32.030
to us here.

00:00:32.030 --> 00:00:34.760
And Dimitri has the fun job.

00:00:34.760 --> 00:00:37.170
Dmitri is going to
start off by bringing

00:00:37.170 --> 00:00:39.180
in a little bit of
Google I/O here.

00:00:39.180 --> 00:00:43.200
And so we'll try to
get a demo going.

00:00:43.200 --> 00:00:45.220
You might have heard
about cardboard.

00:00:45.220 --> 00:00:49.670
And Dmitriy and Pangu built
something pretty amazing

00:00:49.670 --> 00:00:52.350
on their own time,
or on the side,

00:00:52.350 --> 00:00:55.750
for Google I/O using
cardboard and WebRTC.

00:00:55.750 --> 00:00:57.993
So I'll leave the
honors to them.

00:00:57.993 --> 00:00:59.368
PANGU: Do you want
me to explain,

00:00:59.368 --> 00:01:00.060
or do you want to explain?

00:01:00.060 --> 00:01:01.018
SERGE LACHAPELLE: Yeah.

00:01:01.018 --> 00:01:02.321
PANGU: Cool.

00:01:02.321 --> 00:01:02.820
So hi.

00:01:02.820 --> 00:01:06.720
My name is Pangu, I also go
as the guy with the long name.

00:01:06.720 --> 00:01:11.260
And I work on the WebM project
as well as video on Chrome.

00:01:11.260 --> 00:01:14.470
And Dmitriy is one of the
engineers who I work with.

00:01:14.470 --> 00:01:16.030
And Dmitriy has
done an amazing job.

00:01:16.030 --> 00:01:18.090
So I shouldn't take any
credit whatsoever other

00:01:18.090 --> 00:01:21.960
than sort of helping
him get here.

00:01:21.960 --> 00:01:24.737
So yeah, what we've sort of
done is-- how many of you

00:01:24.737 --> 00:01:26.820
heard of Cardboard yesterday,
or like through I/O?

00:01:26.820 --> 00:01:27.440
All right.

00:01:27.440 --> 00:01:30.336
How many of you
find it interesting?

00:01:30.336 --> 00:01:30.960
A lower number.

00:01:33.510 --> 00:01:37.710
We were fascinated
with virtual reality.

00:01:37.710 --> 00:01:41.620
So we had planned another
demo for I/O. Essentially

00:01:41.620 --> 00:01:44.970
we wanted to get a quadcopter
and a submarine connected

00:01:44.970 --> 00:01:47.776
using about WebRTC channels
so that people could control

00:01:47.776 --> 00:01:49.650
these things in different
parts of the world.

00:01:49.650 --> 00:01:51.310
And then we heard of Cardboard.

00:01:51.310 --> 00:01:53.210
And then we were like,
OK, scrap everything.

00:01:53.210 --> 00:01:54.210
We have to work on this.

00:01:54.210 --> 00:01:55.830
Because we found it so exciting.

00:01:55.830 --> 00:01:58.010
And the idea in the
heart of Cardboard

00:01:58.010 --> 00:02:00.440
was that you are getting
an Android SDK so that you

00:02:00.440 --> 00:02:02.630
can build apps which
will automatically

00:02:02.630 --> 00:02:05.660
take care of virtual reality
and all that stuff for you.

00:02:05.660 --> 00:02:07.410
And then we thought,
why not the web?

00:02:07.410 --> 00:02:10.820
This should be as easy to code
for the web for virtual reality

00:02:10.820 --> 00:02:12.840
as it is for Android.

00:02:12.840 --> 00:02:14.810
And we sort of started
off with that mission,

00:02:14.810 --> 00:02:17.400
saying the web should be a great
platform for virtual reality

00:02:17.400 --> 00:02:19.000
end that's what we try to do.

00:02:19.000 --> 00:02:22.550
So it's going to be a
little bit hard to demo

00:02:22.550 --> 00:02:24.060
without the Cardboard
in your face.

00:02:24.060 --> 00:02:26.220
And unfortunately I
don't have a, ooh, look

00:02:26.220 --> 00:02:30.150
under your seats moment today.

00:02:30.150 --> 00:02:31.480
So sorry about that.

00:02:31.480 --> 00:02:32.850
We tried.

00:02:32.850 --> 00:02:35.580
But I have to show
you one thing.

00:02:35.580 --> 00:02:37.990
So we made a couple of things.

00:02:37.990 --> 00:02:40.960
The first one is this little
rower, who we called Dmitriy.

00:02:44.790 --> 00:02:48.310
And Dmitriy is a rower
that can be controlled

00:02:48.310 --> 00:02:51.380
over the WebRTC data
channels for both motion

00:02:51.380 --> 00:02:55.360
as well as this 3-D camera
right in front of here.

00:02:55.360 --> 00:02:57.110
And what they did
was we piped this

00:02:57.110 --> 00:03:02.520
through-- a little bit of a hack
to make WebRTC work with it.

00:03:02.520 --> 00:03:06.000
But essentially, what
we did was the video

00:03:06.000 --> 00:03:09.120
goes through an Arduino board
as well as this XP transmitter

00:03:09.120 --> 00:03:11.440
and transmits to a
video capture card,

00:03:11.440 --> 00:03:13.981
which we've sort of hidden away
right there so that you don't

00:03:13.981 --> 00:03:15.840
have to see how the
sausage is made.

00:03:15.840 --> 00:03:18.770
And once the sausage is made,
though, it's really tasty.

00:03:18.770 --> 00:03:22.920
Because as you can do is
set this up right here.

00:03:22.920 --> 00:03:26.210
And I'm going to do a live
test to see if this works.

00:03:26.210 --> 00:03:27.030
All right.

00:03:27.030 --> 00:03:29.124
Dmitriy.

00:03:29.124 --> 00:03:30.540
So what Dmitriy
is doing right now

00:03:30.540 --> 00:03:33.770
is actually looking
through the cardboard.

00:03:33.770 --> 00:03:39.130
And his eyes are sort of placed
onto this particular camera.

00:03:39.130 --> 00:03:41.860
And it moves as
with the Cardboard.

00:03:49.800 --> 00:03:51.160
It can also be controlled.

00:03:54.690 --> 00:03:56.900
As we were testing this, we
worked with Justin's team

00:03:56.900 --> 00:03:57.550
up in Seattle.

00:03:57.550 --> 00:03:59.300
And Zeek, another
developer there,

00:03:59.300 --> 00:04:03.310
he was able to control this
while watching up in Seattle.

00:04:03.310 --> 00:04:05.460
And all thanks
because of WebRTC.

00:04:05.460 --> 00:04:08.590
So you're going to
put it right here.

00:04:08.590 --> 00:04:10.220
Go ahead.

00:04:10.220 --> 00:04:12.740
So as it goes, Dmitriy
can see what's going on.

00:04:15.874 --> 00:04:17.374
And no, these are
not killer robots.

00:04:22.360 --> 00:04:26.180
This is a very fun
little Dmitriy robot.

00:04:26.180 --> 00:04:28.370
So what we'll have
is we'll have this

00:04:28.370 --> 00:04:30.786
set up here so that during the
break a few of you can come

00:04:30.786 --> 00:04:33.070
and check it out, if
you're interested.

00:04:33.070 --> 00:04:37.444
And yeah, I'll let the show go
on and I'll come back later.

00:04:37.444 --> 00:04:38.610
SERGE LACHAPELLE: Thank you.

00:04:43.362 --> 00:04:44.945
There is one great
thing with Dmitriy,

00:04:44.945 --> 00:04:49.910
is that he feels no motion
sickness whatsoever.

00:04:49.910 --> 00:04:52.420
I tried this for a few
minutes, and after a while

00:04:52.420 --> 00:04:53.910
you get pretty busy.

00:04:53.910 --> 00:04:55.170
So thank you.

00:04:55.170 --> 00:04:59.450
This is just an example of,
with a little bit of time,

00:04:59.450 --> 00:05:02.180
a little bit of knowledge, and
a bunch of open source code,

00:05:02.180 --> 00:05:04.530
what you can achieve.

00:05:04.530 --> 00:05:08.830
And you can build things that
are completely surprising.

00:05:08.830 --> 00:05:12.060
I have not seen this
before going to Google I/O,

00:05:12.060 --> 00:05:13.590
and I was completely surprised.

00:05:13.590 --> 00:05:16.720
So thanks guys.

00:05:16.720 --> 00:05:17.850
All right.

00:05:17.850 --> 00:05:20.390
Now Justin.

00:05:20.390 --> 00:05:22.945
JUSTIN UBERTI: Sorry, I just
want to sort of-- check, check.

00:05:22.945 --> 00:05:24.820
I just want to sort of
add to what Serge just

00:05:24.820 --> 00:05:25.528
said right there.

00:05:25.528 --> 00:05:29.125
That if you'd asked me three
years ago, when we first

00:05:29.125 --> 00:05:30.500
came up with the
idea for WebRTC,

00:05:30.500 --> 00:05:32.770
would we use it to
basically pretend

00:05:32.770 --> 00:05:36.660
like we're in virtual reality
while we're driving a race car?

00:05:36.660 --> 00:05:38.230
I would've been quite surprised.

00:05:38.230 --> 00:05:40.980
But we've built this
really strong platform

00:05:40.980 --> 00:05:42.530
that's really malleable.

00:05:42.530 --> 00:05:45.490
And it was very, very easy
for Dmitriy and his team,

00:05:45.490 --> 00:05:48.750
and in a whole different office,
to get this all up and running.

00:05:48.750 --> 00:05:50.710
We even had it
running over AppRTC,

00:05:50.710 --> 00:05:53.600
so that you could connect
AppRTC, have the thing.

00:05:53.600 --> 00:05:56.660
And someone in our
office in Seattle

00:05:56.660 --> 00:05:57.920
could actually drive the car.

00:05:57.920 --> 00:06:00.390
So we could take the
technology and very quickly

00:06:00.390 --> 00:06:02.330
go after new opportunities.

00:06:02.330 --> 00:06:05.970
That's one of the things I'm
most excited about WebRTC.

00:06:05.970 --> 00:06:09.210
So anyway, on the platform,
we've been hard at work

00:06:09.210 --> 00:06:10.910
on a ton of things.

00:06:10.910 --> 00:06:12.430
I made this little
tag cloud here,

00:06:12.430 --> 00:06:14.180
just sort of talking
about the stuff we've

00:06:14.180 --> 00:06:15.711
done in the past 18 months.

00:06:15.711 --> 00:06:17.210
You can go through
all these things.

00:06:17.210 --> 00:06:19.620
But your eyes may start
hurting after a while,

00:06:19.620 --> 00:06:22.780
because there's a ton
of stuff on there.

00:06:22.780 --> 00:06:24.560
But I do like coming
to these events

00:06:24.560 --> 00:06:26.160
and sharing our road maps.

00:06:26.160 --> 00:06:29.590
Because some of the things that
people tell us is, you know,

00:06:29.590 --> 00:06:31.870
we've been waiting
for feature x.

00:06:31.870 --> 00:06:33.980
And I'd say, well, we
actually implemented that

00:06:33.980 --> 00:06:35.070
three months ago.

00:06:35.070 --> 00:06:38.210
Or we've been
waiting to do this,

00:06:38.210 --> 00:06:40.602
but we didn't know
this was coming.

00:06:40.602 --> 00:06:42.310
And so I really like
being able to go out

00:06:42.310 --> 00:06:43.893
and say, here's what
we're working on,

00:06:43.893 --> 00:06:45.170
here is we're trying to do.

00:06:45.170 --> 00:06:47.639
And if there's things that
aren't on the road map,

00:06:47.639 --> 00:06:49.680
well I like to sort of
hear, what are we missing?

00:06:56.300 --> 00:06:59.830
So that was stuff we did
over the past 18 months.

00:06:59.830 --> 00:07:02.580
Here's kind of where we
are with Chrome 36, which

00:07:02.580 --> 00:07:05.850
is going to go into stable,
I think, in two weeks.

00:07:05.850 --> 00:07:10.060
And then Chrome 37, which
is sort of later on in Q3.

00:07:10.060 --> 00:07:12.790
And so, I'm not going to
spend a ton of time going

00:07:12.790 --> 00:07:14.640
into every single
thing, because we

00:07:14.640 --> 00:07:17.870
have actually a lot of
content for you today.

00:07:17.870 --> 00:07:20.720
But if you have questions of
anything and hear it in detail,

00:07:20.720 --> 00:07:23.320
please come up and
catch one of us later.

00:07:23.320 --> 00:07:27.070
But one of the big things
we've heard from people

00:07:27.070 --> 00:07:32.260
is that trying to do an HD
video, or even video on mobile,

00:07:32.260 --> 00:07:34.410
people say the video
quality is not very good.

00:07:34.410 --> 00:07:36.640
And they say it's the codec.

00:07:36.640 --> 00:07:38.040
Or they say it's WebRTC.

00:07:38.040 --> 00:07:42.120
And it turns out, in many
cases, it's the network.

00:07:42.120 --> 00:07:45.910
And the way that video
works over IP networks

00:07:45.910 --> 00:07:48.870
is that you kind of have to play
this sort of black magic game

00:07:48.870 --> 00:07:52.100
of guessing how much
capacity the network has.

00:07:52.100 --> 00:07:54.960
There's no API where you can
say, how much bandwidth do you

00:07:54.960 --> 00:07:55.730
support?

00:07:55.730 --> 00:07:56.882
Because it's fully dynamic.

00:07:56.882 --> 00:07:58.340
It changes based
on how many people

00:07:58.340 --> 00:08:01.125
are using the network, how
much load is on the thing.

00:08:01.125 --> 00:08:04.730
And it can even depend on what
kind of network type it is.

00:08:04.730 --> 00:08:06.530
So you have to do
this sort of thing

00:08:06.530 --> 00:08:08.090
where you do these probes.

00:08:08.090 --> 00:08:11.450
Or you set a bunch of data, and
you sort of see, did that work?

00:08:11.450 --> 00:08:13.840
Now I can send a
little more data.

00:08:13.840 --> 00:08:16.720
What ends up happening
is that if you end up

00:08:16.720 --> 00:08:19.540
making bad guesses about
what the network can support,

00:08:19.540 --> 00:08:21.510
you either under
use the network--

00:08:21.510 --> 00:08:25.340
meaning it takes forever and
the video bit rate is very low.

00:08:25.340 --> 00:08:27.940
Typically for HD
stream, you want one

00:08:27.940 --> 00:08:29.884
to two megabits of video.

00:08:29.884 --> 00:08:31.550
And if you're predicting
less than that,

00:08:31.550 --> 00:08:34.789
you have a very chunky,
blocky, grainy video.

00:08:34.789 --> 00:08:35.947
Looks terrible.

00:08:35.947 --> 00:08:38.030
If you overuse the network,
things are even worse.

00:08:38.030 --> 00:08:41.500
Because the video just
turns black and it freezes.

00:08:41.500 --> 00:08:42.924
AUDIENCE: Kills your audio.

00:08:42.924 --> 00:08:44.610
JUSTIN UBERTI: Yeah, exactly.

00:08:44.610 --> 00:08:45.470
You get robot voice.

00:08:45.470 --> 00:08:47.770
So getting bandwidth
estimation right,

00:08:47.770 --> 00:08:48.812
it's a very hard problem.

00:08:48.812 --> 00:08:50.936
There's probably some people
in the audience who've

00:08:50.936 --> 00:08:53.370
worked on this problem in
and know what's involved.

00:08:53.370 --> 00:08:56.110
So we've been very
hard at work on this.

00:08:56.110 --> 00:08:58.730
We want to make sure
that we can make

00:08:58.730 --> 00:09:01.050
these scenarios on my
Cardboard work great.

00:09:01.050 --> 00:09:02.650
And these require
things that are

00:09:02.650 --> 00:09:04.400
more than just HD resolution.

00:09:04.400 --> 00:09:06.710
We're going past
720p, past 1080p.

00:09:06.710 --> 00:09:09.216
You know, 4K type resolution.

00:09:09.216 --> 00:09:11.590
And if you're going to be
sending 5, 10 megabits of video

00:09:11.590 --> 00:09:14.850
over the network, you
better be able to ramp up

00:09:14.850 --> 00:09:16.680
to that sort of
level very quickly.

00:09:16.680 --> 00:09:20.160
So in Chrome 36, we have an
all new bandwidth estimation

00:09:20.160 --> 00:09:23.190
algorithm that is much
better about analyzing

00:09:23.190 --> 00:09:27.040
the sort of peculiarities of
Wi-Fi and ramps up faster,

00:09:27.040 --> 00:09:29.350
avoids mispredicting
in many cases.

00:09:29.350 --> 00:09:32.020
If you're doing HD
streams on Chrome 36,

00:09:32.020 --> 00:09:34.640
you should see much
better HD quality.

00:09:34.640 --> 00:09:37.750
You should see it faster, you
should see it more stable.

00:09:37.750 --> 00:09:39.860
We've also been
trying to make sure

00:09:39.860 --> 00:09:42.680
that screen casting, the
ability to share your screen

00:09:42.680 --> 00:09:45.920
and have that image be
distributed to the world,

00:09:45.920 --> 00:09:47.080
works great.

00:09:47.080 --> 00:09:50.430
And there are a couple issues
we had in previous versions

00:09:50.430 --> 00:09:54.040
where, when we had a
big scene transition,

00:09:54.040 --> 00:09:55.510
we would generate
a very big video

00:09:55.510 --> 00:09:58.990
frame that could be
like 50, 70k of data.

00:09:58.990 --> 00:10:01.970
And when we tried to put that
data on a network all at once,

00:10:01.970 --> 00:10:04.030
we would basically
crush the network.

00:10:04.030 --> 00:10:05.100
You can lose packets.

00:10:05.100 --> 00:10:07.950
You end up with a long delay,
and it would take a long time

00:10:07.950 --> 00:10:11.470
from the time you put a new
slide on the screen to the time

00:10:11.470 --> 00:10:13.340
people could actually see that.

00:10:13.340 --> 00:10:15.710
We spent a lot of time
tuning this, fixing it.

00:10:15.710 --> 00:10:19.120
It now works a lot better
in 36, even better in 37.

00:10:19.120 --> 00:10:21.930
So now, you should see that
screen sharing performance

00:10:21.930 --> 00:10:24.330
has improved substantially.

00:10:24.330 --> 00:10:27.940
I talked to the Screenhero
guys just today.

00:10:27.940 --> 00:10:30.270
And we really want a
screen sharing applications

00:10:30.270 --> 00:10:33.700
to be first class citizens
in the WebRTC ecosystem.

00:10:33.700 --> 00:10:36.470
And if you're not seeing
the performance where

00:10:36.470 --> 00:10:39.780
it's working great for you,
we want to hear from you.

00:10:39.780 --> 00:10:42.070
Just a few other things we had.

00:10:42.070 --> 00:10:44.370
We now automatically
will back down,

00:10:44.370 --> 00:10:46.720
if we're on a low power
machine, and we're kind of

00:10:46.720 --> 00:10:47.860
over driving the CPU.

00:10:47.860 --> 00:10:49.980
We're trying to send like
HD quality or something.

00:10:49.980 --> 00:10:52.610
We can now back that down
and send a lower resolution

00:10:52.610 --> 00:10:55.130
automatically if we detect that
we're over driving the CPU.

00:10:55.130 --> 00:10:56.780
This is what we
call CPU adaptation.

00:10:56.780 --> 00:10:59.700
New NetEq is our
adaptive gen buffer,

00:10:59.700 --> 00:11:01.645
it's more efficient for stereo.

00:11:01.645 --> 00:11:03.020
And a bunch of
things on the data

00:11:03.020 --> 00:11:06.540
channels to be fully spec
and protocol compliant.

00:11:06.540 --> 00:11:10.691
On the 37 side-- so 37
just went through cut

00:11:10.691 --> 00:11:16.250
and is going to dev channel,
or will be beta very soon.

00:11:16.250 --> 00:11:19.190
One thing we've heard
consistently from developers

00:11:19.190 --> 00:11:22.040
is that the bar that comes
down on the top of the screen,

00:11:22.040 --> 00:11:25.520
asking for Chrome to use your
camera, is too hard to see.

00:11:25.520 --> 00:11:29.370
And then we know this,
because every single app puts

00:11:29.370 --> 00:11:32.000
in their own "hey, look
at this thing up here"

00:11:32.000 --> 00:11:33.780
in the user interface.

00:11:33.780 --> 00:11:35.930
That tells us we're
not doing a good job.

00:11:35.930 --> 00:11:38.190
So we've been working
on this for a while.

00:11:38.190 --> 00:11:40.530
And whenever you do something
like this in Chrome,

00:11:40.530 --> 00:11:42.780
it's like you can't just
replace the thing for WebRTC,

00:11:42.780 --> 00:11:46.420
it's like we have to go and
rework the entire permissions

00:11:46.420 --> 00:11:48.850
request experience
across geolocation,

00:11:48.850 --> 00:11:50.070
WebRTC, everything.

00:11:50.070 --> 00:11:50.570
Well--

00:11:53.522 --> 00:11:55.942
SERGE LACHAPELLE:
And you have to do it

00:11:55.942 --> 00:11:58.850
across Windows,
Mac, Linux, Android.

00:11:58.850 --> 00:12:00.470
And you have to do
it for, as Justin

00:12:00.470 --> 00:12:03.930
said, geolocation,
offline content,

00:12:03.930 --> 00:12:07.280
all the permissions that a
web browser needs to ask.

00:12:07.280 --> 00:12:10.010
So it turns out that this
is a huge undertaking.

00:12:10.010 --> 00:12:12.850
And having all that previously
reviewed and approved

00:12:12.850 --> 00:12:15.260
and security reviewed and
approved takes a long time.

00:12:15.260 --> 00:12:16.930
But finally, we're
getting there.

00:12:16.930 --> 00:12:20.132
And you should start seeing
this in Chrome 37 soon.

00:12:20.132 --> 00:12:21.090
JUSTIN UBERTI: Finally.

00:12:21.090 --> 00:12:21.590
Yes.

00:12:21.590 --> 00:12:24.370
So your users should
all benefit from this.

00:12:24.370 --> 00:12:26.760
[APPLAUSE]

00:12:26.760 --> 00:12:29.120
And hopefully your
poor HTML developers

00:12:29.120 --> 00:12:32.190
will not have to spend time
aligning pixels for like, point

00:12:32.190 --> 00:12:34.580
to the allow button.

00:12:34.580 --> 00:12:36.580
Some other things are
retransmission of packets.

00:12:36.580 --> 00:12:38.810
We now follow RFC properly.

00:12:38.810 --> 00:12:42.540
And we also have now
adaptive opus FEC.

00:12:42.540 --> 00:12:46.130
So if you turn on the Use
in-band FEC parameter in SDP--

00:12:46.130 --> 00:12:49.610
it's not on by default right
now, we hope to fix that in 38.

00:12:49.610 --> 00:12:51.630
We will look at the
packet loss that's

00:12:51.630 --> 00:12:55.010
occurring on the connection,
and we'll turn up FEC

00:12:55.010 --> 00:12:57.660
based on what
actually we encounter.

00:12:57.660 --> 00:13:00.350
So if your network
connection is great,

00:13:00.350 --> 00:13:02.717
then no FEC will be used.

00:13:02.717 --> 00:13:04.550
If your network connection
starts to suffer,

00:13:04.550 --> 00:13:06.740
we'll start basing
encoding redundant copies

00:13:06.740 --> 00:13:08.630
of the audio packets
when using opus,

00:13:08.630 --> 00:13:11.440
to make sure that if
you have some dropouts,

00:13:11.440 --> 00:13:14.329
that the conversation
is still intelligible.

00:13:14.329 --> 00:13:16.370
SERGE LACHAPELLE: And
that's what FEC stands for.

00:13:16.370 --> 00:13:19.010
Forward Error Correction,
for the web developers here.

00:13:19.010 --> 00:13:22.200
It means you sort of send
out copies of the audio.

00:13:22.200 --> 00:13:23.710
In case one of the
copy gets lost,

00:13:23.710 --> 00:13:25.127
you have another
one that came in.

00:13:25.127 --> 00:13:25.960
JUSTIN UBERTI: Yeah.

00:13:25.960 --> 00:13:27.888
I'm going to use a
ton of acronyms here--

00:13:27.888 --> 00:13:28.844
AUDIENCE: [INAUDIBLE].

00:13:31.667 --> 00:13:33.750
JUSTIN UBERTI: Opus has
support for automatically,

00:13:33.750 --> 00:13:36.330
but the codec does not
do it automatically.

00:13:36.330 --> 00:13:41.220
It needs a source
basically indicating

00:13:41.220 --> 00:13:43.710
that, here's what the
actual packet loss is.

00:13:43.710 --> 00:13:46.020
And since we also have our
own packet loss concealment

00:13:46.020 --> 00:13:48.210
inside NetEq, we had to
do a bunch of integration

00:13:48.210 --> 00:13:52.150
between that PLC and
the opus FEC processing.

00:13:52.150 --> 00:13:55.880
So you are correct, in that
Opus does support does natively.

00:13:55.880 --> 00:13:57.780
By making this work
inside WebRTC and Chrome

00:13:57.780 --> 00:13:59.363
was a substantial
engineering project.

00:14:01.415 --> 00:14:03.040
Otherwise it would
have worked already.

00:14:05.890 --> 00:14:09.240
So one other thing
is on Mac, we're

00:14:09.240 --> 00:14:11.290
supporting AV
foundation in Chrome 37.

00:14:11.290 --> 00:14:15.800
So previously, the thing you
used to open camera devices

00:14:15.800 --> 00:14:17.720
was something
called QTKit, which

00:14:17.720 --> 00:14:19.990
had its own sort
of peculiarities.

00:14:19.990 --> 00:14:21.460
And that was the old and busted.

00:14:21.460 --> 00:14:23.800
And [INAUDIBLE] is
the new hotness.

00:14:23.800 --> 00:14:27.215
So you should see better,
more stable-- just

00:14:27.215 --> 00:14:30.800
in our crash rates we can see
this-- performance in Chrome 37

00:14:30.800 --> 00:14:33.420
on Mac.

00:14:33.420 --> 00:14:35.500
So looking forward.

00:14:35.500 --> 00:14:38.930
We continue to make
significant investments

00:14:38.930 --> 00:14:41.199
in bandwidth estimation.

00:14:41.199 --> 00:14:42.990
We want to make sure
we can ramp up faster.

00:14:42.990 --> 00:14:46.950
Currently it takes-- what
was it Serge, to get to HD?

00:14:46.950 --> 00:14:48.079
15 seconds?

00:14:48.079 --> 00:14:49.120
SERGE LACHAPELLE: 15, 20.

00:14:49.120 --> 00:14:50.340
JUSTIN UBERTI: Yeah.

00:14:50.340 --> 00:14:52.040
We still feel that's too long.

00:14:52.040 --> 00:14:54.930
We're providing APIs that allow
you to set the start-bit rate.

00:14:54.930 --> 00:14:58.210
So if you're on like a
LAN or dedicated network,

00:14:58.210 --> 00:15:01.310
you could start
out closer to HD.

00:15:01.310 --> 00:15:03.730
But in order to get
up to 4K, we want

00:15:03.730 --> 00:15:05.610
to make sure you can
start higher and ramp up

00:15:05.610 --> 00:15:08.450
faster and make sure
that, in all these cases,

00:15:08.450 --> 00:15:10.500
we're never over
driving the network.

00:15:10.500 --> 00:15:12.610
We also have some
work being done

00:15:12.610 --> 00:15:14.990
to vastly improve
echo cancellation.

00:15:14.990 --> 00:15:16.650
To be much more
tolerant of the cases

00:15:16.650 --> 00:15:18.220
where the operating
system does not

00:15:18.220 --> 00:15:20.064
give us reliable delay values.

00:15:20.064 --> 00:15:21.730
The delay value is a
very important part

00:15:21.730 --> 00:15:23.700
of echo cancellation,
to know how

00:15:23.700 --> 00:15:25.410
much longer and
further in time you

00:15:25.410 --> 00:15:28.205
should expect the reflected
signal to come back in,

00:15:28.205 --> 00:15:30.080
after it was played out
of the speakers, back

00:15:30.080 --> 00:15:31.190
to the microphone.

00:15:31.190 --> 00:15:33.600
In some cases, it very easy
to tell, because the OS

00:15:33.600 --> 00:15:36.480
tells us immediately how much
data, how much time there is.

00:15:36.480 --> 00:15:38.480
In other cases, you kind
of have to guess at it.

00:15:38.480 --> 00:15:39.896
We're working on
improving things,

00:15:39.896 --> 00:15:43.350
so that we can do a great job
even when we need to guess.

00:15:43.350 --> 00:15:45.800
We're also adding
new APIs to add

00:15:45.800 --> 00:15:49.100
per stream control of
things like bit rate.

00:15:49.100 --> 00:15:51.292
That if you're sending
in multiple streams,

00:15:51.292 --> 00:15:52.750
you might want to
say, this one, we

00:15:52.750 --> 00:15:57.760
want to send in HD, and this
one, we want to send in QVGA.

00:15:57.760 --> 00:16:01.890
Because you want to send maybe
a screen share plus your image.

00:16:01.890 --> 00:16:05.930
In the past, we didn't really
have these kind of controls.

00:16:05.930 --> 00:16:09.120
We only had these very high
level constraints types things.

00:16:09.120 --> 00:16:11.090
We couldn't say,
hey, set the bit rate

00:16:11.090 --> 00:16:13.620
for this one particular stream.

00:16:13.620 --> 00:16:17.790
And we're adding a new set of
APIs called RTC, RTP Sender,

00:16:17.790 --> 00:16:20.166
and RTC, RTP Receiver,
which basically gives you

00:16:20.166 --> 00:16:22.540
a new thing in the object
model that gives you per stream

00:16:22.540 --> 00:16:23.990
and coding control.

00:16:23.990 --> 00:16:26.240
This will be useful
in WebRTC 1.0

00:16:26.240 --> 00:16:27.880
for things like
bit rate control.

00:16:27.880 --> 00:16:29.725
And addition things
in WebRTC 1.1,

00:16:29.725 --> 00:16:31.956
which I'll talk about
in a little bit.

00:16:31.956 --> 00:16:33.330
Another thing
we've heard from is

00:16:33.330 --> 00:16:36.560
people wanted the ability to
set what audio output device is

00:16:36.560 --> 00:16:37.610
being used.

00:16:37.610 --> 00:16:42.727
This is a very complicated
security and usability

00:16:42.727 --> 00:16:43.310
sort of thing.

00:16:43.310 --> 00:16:45.030
But we know people want this.

00:16:45.030 --> 00:16:46.490
We're working very hard on it.

00:16:46.490 --> 00:16:49.760
And a bunch of stuff
on the ISE side.

00:16:49.760 --> 00:16:51.660
Being able to limit
yourself to only using

00:16:51.660 --> 00:16:54.300
relay candidates for
privacy and other privacy

00:16:54.300 --> 00:16:55.715
preserving techniques.

00:16:55.715 --> 00:16:57.840
SERGE LACHAPELLE: So I'll
let you catch your breath

00:16:57.840 --> 00:17:00.300
and do the rest here.

00:17:00.300 --> 00:17:02.020
VP 9, we've talked about it.

00:17:02.020 --> 00:17:03.800
Pangu will talk
about it in a minute.

00:17:03.800 --> 00:17:04.810
Very important for us.

00:17:04.810 --> 00:17:07.359
We're going to start
experimenting with VP 9

00:17:07.359 --> 00:17:09.480
in a way that you
can also try it out.

00:17:09.480 --> 00:17:12.150
It's a better video codec.

00:17:12.150 --> 00:17:14.420
I won't talk too much
about it right now.

00:17:14.420 --> 00:17:16.530
Noise reduction.

00:17:16.530 --> 00:17:20.970
Little, little tiny
cameras are super noisy.

00:17:20.970 --> 00:17:24.540
They're not very precise, they
have a very small sensor size.

00:17:24.540 --> 00:17:28.010
So the image they produce
is often very noisy.

00:17:28.010 --> 00:17:31.040
And cleaning out that
image in real time,

00:17:31.040 --> 00:17:34.070
turns out there's a quite
complex mathematical problem

00:17:34.070 --> 00:17:35.260
that we are tackling.

00:17:35.260 --> 00:17:38.340
And hopefully, you will
see the benefits of this

00:17:38.340 --> 00:17:39.810
before the end of the year.

00:17:39.810 --> 00:17:41.500
Media stream recorder.

00:17:41.500 --> 00:17:47.260
The number one voted
Chromium feature request.

00:17:47.260 --> 00:17:49.430
By far, for our team.

00:17:49.430 --> 00:17:52.802
So we are absolutely
going to tackle that.

00:17:52.802 --> 00:17:54.510
And you will also see
the results of this

00:17:54.510 --> 00:17:58.010
before the end of the year.

00:17:58.010 --> 00:18:03.890
We've been using SCTP
for our data channel API.

00:18:03.890 --> 00:18:06.210
We are going to
start experimenting

00:18:06.210 --> 00:18:08.110
with QUIC, instead.

00:18:08.110 --> 00:18:09.665
QUIC is an experimental--

00:18:09.665 --> 00:18:10.790
JUSTIN UBERTI: In addition.

00:18:10.790 --> 00:18:14.610
SERGE LACHAPELLE: In
addition, right, not instead.

00:18:14.610 --> 00:18:17.450
We won't be
experimenting with SCTP.

00:18:17.450 --> 00:18:21.160
And this is going to be
an interesting project.

00:18:21.160 --> 00:18:23.880
And hopefully we will be able
to see much better network

00:18:23.880 --> 00:18:28.610
performance from data channels
using this new network stack.

00:18:28.610 --> 00:18:32.190
And we are refactoring
the way Chrome does audio.

00:18:32.190 --> 00:18:35.930
You're going to see us move
critical components more

00:18:35.930 --> 00:18:39.680
or less outside of
WebRTC and inside Chrome.

00:18:39.680 --> 00:18:42.690
So for example, if you're
watching a YouTube video,

00:18:42.690 --> 00:18:46.610
and you're in a
WebRTC audio chat,

00:18:46.610 --> 00:18:50.846
the audio from the YouTube video
won't go back into your chat

00:18:50.846 --> 00:18:51.720
through the speakers.

00:18:51.720 --> 00:18:55.780
So we'll be able to do sort of
system wide echo cancellation.

00:18:55.780 --> 00:18:59.080
And we're going to start
doing this a lot more,

00:18:59.080 --> 00:19:01.050
so that Chrome
can take advantage

00:19:01.050 --> 00:19:03.530
of the WebRTC components.

00:19:03.530 --> 00:19:07.100
And WebRTC developers can take
advantage of these components

00:19:07.100 --> 00:19:08.450
Chrome-wide.

00:19:08.450 --> 00:19:12.000
So that's also planned
for the end of the year.

00:19:12.000 --> 00:19:14.150
And before we go on.

00:19:14.150 --> 00:19:18.610
It's important to mention
that we base this road map,

00:19:18.610 --> 00:19:21.370
and we plan our work--
we're a small team-- we

00:19:21.370 --> 00:19:22.770
plan our work very carefully.

00:19:22.770 --> 00:19:25.890
And we plan it based on
the feedback you give us.

00:19:25.890 --> 00:19:29.840
So sometimes I'll
go to Twitter, and I

00:19:29.840 --> 00:19:32.355
will look at the WebRTC hashtag.

00:19:32.355 --> 00:19:35.720
And I'll see people
complain about x or y.

00:19:35.720 --> 00:19:38.620
But that's like
screaming out in space.

00:19:38.620 --> 00:19:41.830
If you want us to hear
some of your pain,

00:19:41.830 --> 00:19:46.600
some of your questions,
some of your concerns,

00:19:46.600 --> 00:19:51.750
this is a much better place
to go and share them with us

00:19:51.750 --> 00:19:56.220
than the WebRTC hashtag or
just the usual complaining.

00:19:56.220 --> 00:19:59.590
Because we really do listen,
and we really sit down

00:19:59.590 --> 00:20:03.590
with these things super
frequently and plan

00:20:03.590 --> 00:20:05.780
our work through these tools.

00:20:05.780 --> 00:20:08.700
So the Chromium tracker,
the WebRTC tracker,

00:20:08.700 --> 00:20:11.902
and the discuss WebRTC
list are your friends.

00:20:11.902 --> 00:20:13.290
Thank you.

00:20:13.290 --> 00:20:15.414
JUSTIN UBERTI: Couldn't
have said it better myself.

00:20:15.414 --> 00:20:17.690
I mean, we look at these
bugs by how many stars

00:20:17.690 --> 00:20:19.940
they have and say, what are
the things that are really

00:20:19.940 --> 00:20:21.370
causing pain to developers?

00:20:21.370 --> 00:20:25.960
And just over the course of the
past quarter, when I generated

00:20:25.960 --> 00:20:29.930
this list, we ticked off,
I think, about 70 to 80%

00:20:29.930 --> 00:20:31.120
of these bugs.

00:20:31.120 --> 00:20:34.590
So again, if there's something
that's causing an issue,

00:20:34.590 --> 00:20:35.520
please file it.

00:20:35.520 --> 00:20:38.080
You can send us an email,
bring it to our attention.

00:20:38.080 --> 00:20:40.700
But otherwise,
it's just very hard

00:20:40.700 --> 00:20:44.120
to know what is
holding people back.

00:20:44.120 --> 00:20:48.110
I also just want to talk
briefly about mobile support.

00:20:48.110 --> 00:20:49.480
I talked about Chrome.

00:20:49.480 --> 00:20:54.102
And we're doing a fantastic
job on Chrome for Android.

00:20:54.102 --> 00:20:55.810
You may have seen some
of the things that

00:20:55.810 --> 00:20:58.370
are new in L, where
webpages become

00:20:58.370 --> 00:21:01.240
really peers of native apps.

00:21:01.240 --> 00:21:05.560
Basically, every web page
is in the recents view

00:21:05.560 --> 00:21:07.650
of your test
switcher on Android.

00:21:07.650 --> 00:21:09.830
Now every webpage is a
peer with a native app.

00:21:09.830 --> 00:21:12.310
So you can have a page
that basically acts just

00:21:12.310 --> 00:21:13.460
like an application.

00:21:13.460 --> 00:21:16.480
That's a great sort of fit
for a WebRTC app on Chrome

00:21:16.480 --> 00:21:18.480
for Android.

00:21:18.480 --> 00:21:20.540
But it talks about
a few other things.

00:21:20.540 --> 00:21:23.620
Also in the L
runnings of Android,

00:21:23.620 --> 00:21:27.334
both web audio and WebRTC
are fully supported.

00:21:27.334 --> 00:21:28.750
So if you're
building a native app

00:21:28.750 --> 00:21:32.630
and want to be able to use
these technologies from web,

00:21:32.630 --> 00:21:36.100
you can now do that
using web view.

00:21:36.100 --> 00:21:41.252
And that's going to be part
of Chrome WebView v 36.

00:21:41.252 --> 00:21:43.710
Another thing that's-- this is
not really Android specific,

00:21:43.710 --> 00:21:45.840
but it really comes
up a lot on Android--

00:21:45.840 --> 00:21:48.460
is tuning our bandwidth
estimation to deal with

00:21:48.460 --> 00:21:50.450
cellular networks.

00:21:50.450 --> 00:21:53.870
We found that with Wi-Fi, Wi-Fi
has a lot of interesting packet

00:21:53.870 --> 00:21:54.780
patterns.

00:21:54.780 --> 00:21:56.370
Turns out, not only
is it not a truck,

00:21:56.370 --> 00:21:59.030
it's also not a series
of tubes, either.

00:21:59.030 --> 00:22:01.327
So we're doing a
lot of things just

00:22:01.327 --> 00:22:03.160
in looking at what the
networks are actually

00:22:03.160 --> 00:22:07.480
doing with the data to make sure
that video really works well.

00:22:07.480 --> 00:22:10.760
Y'all may have also
heard, 64-bitness.

00:22:10.760 --> 00:22:13.670
There's a iPhone 5
supporting 64-bit.

00:22:13.670 --> 00:22:15.900
Android is also going
to support 64-bit,

00:22:15.900 --> 00:22:17.730
and we want to make
sure WebRTC works

00:22:17.730 --> 00:22:21.360
great, is fully optimized
for 64-bit scenarios.

00:22:21.360 --> 00:22:24.190
I've talked about video hardware
acceleration a bit in the past.

00:22:24.190 --> 00:22:26.990
The Android K release
was the first release

00:22:26.990 --> 00:22:30.250
to have VP8 exposed
in the media codec API

00:22:30.250 --> 00:22:31.700
that's usable for real time.

00:22:31.700 --> 00:22:33.200
We're continuing
to iterate on that.

00:22:33.200 --> 00:22:35.325
Make sure it can be used
for doing multiple encodes

00:22:35.325 --> 00:22:37.710
at the same time, multiple
decodes at the same time.

00:22:37.710 --> 00:22:41.100
Really respect proper bit rate
changing, that sort of thing.

00:22:41.100 --> 00:22:43.490
And work across a
variety of vendors.

00:22:43.490 --> 00:22:47.452
K was mostly Qualcomm
and Snapdragon 800.

00:22:47.452 --> 00:22:48.910
We're making sure
this works really

00:22:48.910 --> 00:22:51.060
well across a variety
of other chip makers,

00:22:51.060 --> 00:22:53.670
including Samsung,
Invidia, et cetera.

00:22:53.670 --> 00:22:56.170
To basically make sure
you can get HD quality

00:22:56.170 --> 00:22:58.656
without being CP
unlimited, because you

00:22:58.656 --> 00:23:01.259
can offload a lot of
stuff to the DSP block.

00:23:01.259 --> 00:23:02.800
SERGE LACHAPELLE:
An interesting fact

00:23:02.800 --> 00:23:06.750
is that, for example, the Chrome
OS ChromeBook 2 by Samsung

00:23:06.750 --> 00:23:10.790
fully supports encode
and decode of VP8

00:23:10.790 --> 00:23:14.262
in hardware for any
WebRTC app out of the box.

00:23:14.262 --> 00:23:16.220
JUSTIN UBERTI: You may
have heard the Android 1

00:23:16.220 --> 00:23:18.950
announcement at Google I/O.
Basically there's a reference

00:23:18.950 --> 00:23:21.292
platform for kind of low
cost Android devices.

00:23:21.292 --> 00:23:23.750
We're going to make sure the
WebRTC stack works really well

00:23:23.750 --> 00:23:26.620
on Android 1 as well.

00:23:26.620 --> 00:23:28.580
While we do have
Chrome for Android,

00:23:28.580 --> 00:23:30.290
as a platform for
WebRTC, we also

00:23:30.290 --> 00:23:34.040
support as a first class citizen
basically the Java native API.

00:23:34.040 --> 00:23:35.437
It's peerconnection.java.

00:23:35.437 --> 00:23:38.020
And we'll continue to make sure
that peerconnection.java keeps

00:23:38.020 --> 00:23:40.603
in sync with the new APIs that
are being added, as I mentioned

00:23:40.603 --> 00:23:43.130
on the previous page, for
RTP Sender and Receiver

00:23:43.130 --> 00:23:45.790
and that sort of thing.

00:23:45.790 --> 00:23:49.434
On the iOS side, we're doing a
number of just catch up things,

00:23:49.434 --> 00:23:51.850
making sure we have the full
set of APIs available on iOS.

00:23:51.850 --> 00:23:53.641
Data channels is probably
the biggest thing

00:23:53.641 --> 00:23:54.740
that's missing right now.

00:23:54.740 --> 00:23:57.229
And I was just thought the
developer working on this,

00:23:57.229 --> 00:23:59.520
they're trying to get this
working as soon as possible.

00:23:59.520 --> 00:24:00.670
I think within the
next couple weeks,

00:24:00.670 --> 00:24:02.211
we should have full
support including

00:24:02.211 --> 00:24:06.080
SETB data channels on iOS.

00:24:06.080 --> 00:24:09.070
And another interesting
thing is just

00:24:09.070 --> 00:24:12.130
iOS has a bunch of great
APIs for accessing the GPU.

00:24:12.130 --> 00:24:13.950
Looking into what
kind of hardware

00:24:13.950 --> 00:24:15.730
offload we can do
for VPA processing

00:24:15.730 --> 00:24:19.980
on iOS, as well as
for camera capture.

00:24:19.980 --> 00:24:24.158
So Alex mentioned
the state AppRTC.

00:24:24.158 --> 00:24:26.920
And we've also been aware
of some the problems

00:24:26.920 --> 00:24:28.671
he mentioned as far
as message delivery.

00:24:28.671 --> 00:24:30.170
You would think
that kind of getting

00:24:30.170 --> 00:24:32.120
like a message from
point A to point B

00:24:32.120 --> 00:24:34.100
would be a soft problem in 2014.

00:24:34.100 --> 00:24:36.730
It turns out that this is
actually very complicated.

00:24:36.730 --> 00:24:38.940
As Alex sort of
went into detail on,

00:24:38.940 --> 00:24:41.370
we are going to be overhauling
the back end of AppRTC

00:24:41.370 --> 00:24:44.160
to use some of the new
technologies available on App

00:24:44.160 --> 00:24:47.210
Engine to make it
the way faster, way

00:24:47.210 --> 00:24:49.630
better about preserving
things like ordering,

00:24:49.630 --> 00:24:51.800
and that just way more reliable.

00:24:51.800 --> 00:24:55.220
So if you're using
App RTC as kind

00:24:55.220 --> 00:24:57.860
of a base for your
application, we

00:24:57.860 --> 00:24:59.520
should have a lot
of things that will

00:24:59.520 --> 00:25:02.690
make joining our
call much faster.

00:25:02.690 --> 00:25:06.104
And reliability, just like we
want that to 100% of the time,

00:25:06.104 --> 00:25:08.520
it shouldn't have anything
where the message got delivered

00:25:08.520 --> 00:25:11.015
in the wrong order and you had
to fix it up on the client.

00:25:11.015 --> 00:25:12.640
You shouldn't have
to worry about that.

00:25:12.640 --> 00:25:15.098
SERGE LACHAPELLE: Depending on
when we get booted off stage

00:25:15.098 --> 00:25:18.390
by Tahee, we might have a
demo of an upcoming version.

00:25:18.390 --> 00:25:19.380
JUSTIN UBERTI: Right.

00:25:19.380 --> 00:25:21.870
And we also are working
to make AppRTC, Sam

00:25:21.870 --> 00:25:25.120
here, our tireless dev
rel advocate for WebRTC,

00:25:25.120 --> 00:25:28.247
is working on making
it fully mobile.

00:25:28.247 --> 00:25:30.580
So it works great on Nexus
7, it works great on Nexus 5,

00:25:30.580 --> 00:25:35.100
works great on basically any
browser that supports WebRTC.

00:25:35.100 --> 00:25:37.600
So that's long overdue,
and we're very much

00:25:37.600 --> 00:25:40.912
looking forward to
that being done.

00:25:40.912 --> 00:25:43.370
Now we also talked about turn
a little bit before and about

00:25:43.370 --> 00:25:46.150
how we do the load
balancing for turn.

00:25:46.150 --> 00:25:48.610
If you go to my GitHub,
GitHub [INAUDIBLE],

00:25:48.610 --> 00:25:51.067
there's a project called
Compute Engine on Demand.

00:25:51.067 --> 00:25:53.650
And that's a thing I've talked
about before, where we spool up

00:25:53.650 --> 00:25:59.250
GCE instances that are running
on RFC 57, 76 TURN server.

00:25:59.250 --> 00:26:00.880
You can clone that, hack on it.

00:26:00.880 --> 00:26:02.820
That's the secret
sauce you mentioned.

00:26:02.820 --> 00:26:04.730
It's not secret anymore.

00:26:04.730 --> 00:26:08.210
SERGE LACHAPELLE: Did
you just release it now?

00:26:08.210 --> 00:26:11.130
JUSTIN UBERTI: It was in
[INAUDIBLE] GitHub before.

00:26:11.130 --> 00:26:12.720
It was undiscovered.

00:26:15.325 --> 00:26:19.640
It was the obscure
sauce, if you will.

00:26:19.640 --> 00:26:21.800
But the part that's
even better about this

00:26:21.800 --> 00:26:25.230
is that-- the fact that you
even have to do this all on GC

00:26:25.230 --> 00:26:27.010
is kind of crap.

00:26:27.010 --> 00:26:28.280
GC should do this for you.

00:26:28.280 --> 00:26:31.110
That and basically if you have
TURN load that's increasing,

00:26:31.110 --> 00:26:33.940
you should be able to seamlessly
and elastically scale up

00:26:33.940 --> 00:26:34.910
your TURN clusters.

00:26:34.910 --> 00:26:37.620
And there's a thing
called GC replica pools.

00:26:37.620 --> 00:26:39.400
And replica pools
already are really

00:26:39.400 --> 00:26:42.630
good about scaling
up based on CPU.

00:26:42.630 --> 00:26:45.190
So if you're using GC replica
pools for your TURN server,

00:26:45.190 --> 00:26:47.180
you're already kind
of half the way there.

00:26:47.180 --> 00:26:51.606
And we're pushing on the
GC team to add replica pool

00:26:51.606 --> 00:26:53.980
support where they can scale
up based on bandwidth, which

00:26:53.980 --> 00:26:56.880
is kind of what you really,
really want for turn.

00:26:56.880 --> 00:27:00.590
So long story short, you
have Compute Engine on Demand

00:27:00.590 --> 00:27:01.740
for doing this now.

00:27:01.740 --> 00:27:05.470
But I'm hoping that the GC
infrastructure will also

00:27:05.470 --> 00:27:08.421
do all the heavy lifting
for us later this year.

00:27:08.421 --> 00:27:09.920
SERGE LACHAPELLE:
And lastly, you're

00:27:09.920 --> 00:27:11.900
going to see us pay
down technical debt.

00:27:11.900 --> 00:27:15.140
Which means cleaning up
APIs, removing old code,

00:27:15.140 --> 00:27:18.310
moving to newer APIs,
a ton of refactoring.

00:27:18.310 --> 00:27:21.200
So things are going to change
a lot in the code base,

00:27:21.200 --> 00:27:22.390
for the better.

00:27:22.390 --> 00:27:26.460
This helps us make Chrome
more responsive, helps us make

00:27:26.460 --> 00:27:29.850
our developers, our engineers,
much more productive.

00:27:29.850 --> 00:27:34.300
And so as you tag along
with us on this journey,

00:27:34.300 --> 00:27:36.010
you're going to see
some churn there.

00:27:36.010 --> 00:27:38.710
And if you're wondering
what's going on, a lot of it

00:27:38.710 --> 00:27:40.670
is about paying
down technical debt

00:27:40.670 --> 00:27:43.575
to make sure we don't become
a huge bloated platform.

00:27:43.575 --> 00:27:44.950
JUSTIN UBERTI: An
example of this

00:27:44.950 --> 00:27:47.370
is just what Serge mentioned
about the rewrite of how

00:27:47.370 --> 00:27:49.450
audio processing is being
done inside of Chrome.

00:27:49.450 --> 00:27:52.812
And when we get to sort
of the promised land,

00:27:52.812 --> 00:27:55.020
not only will we have full
browser echo cancellation,

00:27:55.020 --> 00:27:57.964
but we'll also have the ability
to apply web audio effects

00:27:57.964 --> 00:28:00.005
on received media coming
in on a peer connection.

00:28:04.170 --> 00:28:05.730
The spec.

00:28:05.730 --> 00:28:07.660
OK.

00:28:07.660 --> 00:28:08.894
SERGE LACHAPELLE: I did that.

00:28:08.894 --> 00:28:09.700
[LAUGHTER]

00:28:09.700 --> 00:28:11.230
JUSTIN UBERTI:
That's very clever.

00:28:11.230 --> 00:28:13.843
Yes.

00:28:13.843 --> 00:28:17.744
Sometimes I do feel this way.

00:28:17.744 --> 00:28:19.910
So I want to just talk about
some of the big issues.

00:28:19.910 --> 00:28:22.620
A lot of questions,
and some information I

00:28:22.620 --> 00:28:25.540
think that might be alarming
some people incorrectly.

00:28:25.540 --> 00:28:28.730
I want to set the record
straight on some things.

00:28:28.730 --> 00:28:30.670
getUserMedia,
we're trying to get

00:28:30.670 --> 00:28:32.900
this to working group last call.

00:28:32.900 --> 00:28:36.010
So we're very close,
but there still

00:28:36.010 --> 00:28:38.350
are some things where there's
still arguing going on,

00:28:38.350 --> 00:28:42.210
on exactly how you specify,
I want this resolution,

00:28:42.210 --> 00:28:43.791
but not this resolution.

00:28:43.791 --> 00:28:45.290
I'm hoping this
will get worked out,

00:28:45.290 --> 00:28:47.510
and we get this spec to
last call later this year

00:28:47.510 --> 00:28:50.840
and consider this done.

00:28:50.840 --> 00:28:52.210
WebRTC 1.0.

00:28:52.210 --> 00:28:56.110
So WebRTC 1.0 is basically
taking the peer connection spec

00:28:56.110 --> 00:28:57.690
and getting that to last call.

00:28:57.690 --> 00:29:00.023
Where we feel like we have
the features we need for 1.0,

00:29:00.023 --> 00:29:03.330
it doesn't mean that WebRTC
never moves forward past 1.0.

00:29:03.330 --> 00:29:06.170
But there's a consistent,
complete set of APIs

00:29:06.170 --> 00:29:08.412
that can be supported
across browsers,

00:29:08.412 --> 00:29:10.120
and developers know
what they can expect.

00:29:10.120 --> 00:29:12.020
They can get
deterministic behavior.

00:29:12.020 --> 00:29:16.220
And I'm hoping that we can
get at least to working

00:29:16.220 --> 00:29:20.900
group on last call of WebRTC
1.0 spec later this year.

00:29:20.900 --> 00:29:24.830
And so that leads into,
well, what happens past 1.0?

00:29:24.830 --> 00:29:27.720
And what is this thing I've
heard about called ORTC?

00:29:27.720 --> 00:29:30.570
Is ORTC going to replace WebRTC?

00:29:30.570 --> 00:29:32.240
Do I need to
rewrite all my code?

00:29:32.240 --> 00:29:34.790
Is this going to
be a sort of schism

00:29:34.790 --> 00:29:38.710
between the two
churches of WebRTC?

00:29:38.710 --> 00:29:42.820
I want to head that
off and say ORTC

00:29:42.820 --> 00:29:46.357
will be integrated
into WebRTC 1.1.

00:29:46.357 --> 00:29:47.815
There's already a
bunch of concepts

00:29:47.815 --> 00:29:49.550
that I talked about earlier.

00:29:49.550 --> 00:29:51.620
RTP Sender, RTP Receiver.

00:29:51.620 --> 00:29:54.280
These are concepts that
originated within ORTC

00:29:54.280 --> 00:29:58.540
and have been very definitely
woven into the WebRTC 1.0

00:29:58.540 --> 00:29:59.690
specification.

00:29:59.690 --> 00:30:03.420
So ORTC was kind of over
here, and WebRTC 1.0 was here,

00:30:03.420 --> 00:30:04.554
or 0.9 was here.

00:30:04.554 --> 00:30:06.470
And we kind of moved
WebRTC in this direction.

00:30:06.470 --> 00:30:08.280
We're ORTC in this direction.

00:30:08.280 --> 00:30:11.390
So what you're going to
get is your existing code

00:30:11.390 --> 00:30:13.290
is going to keep on working.

00:30:13.290 --> 00:30:15.620
You're going to get more
knobs to tune things.

00:30:15.620 --> 00:30:17.300
And if you don't want to deal
with the high level things,

00:30:17.300 --> 00:30:19.050
you want to go right
down to the low level

00:30:19.050 --> 00:30:21.610
and handle all the settings
and stuff like that,

00:30:21.610 --> 00:30:22.860
you can do that.

00:30:22.860 --> 00:30:25.470
So it's like the
best of both worlds.

00:30:25.470 --> 00:30:28.220
Your existing code works,
you get more stuff.

00:30:28.220 --> 00:30:29.920
And if you're a
rock star expert who

00:30:29.920 --> 00:30:31.610
wants to really
have all control,

00:30:31.610 --> 00:30:33.300
you're going to get that too.

00:30:33.300 --> 00:30:35.425
SERGE LACHAPELLE: So a
normal evolution, basically.

00:30:38.120 --> 00:30:43.750
Like Justin said, there's been
a little bit of FUD around this.

00:30:43.750 --> 00:30:47.860
JUSTIN UBERTI: ORTC and WebRTC
are an evolution of-- 1.1

00:30:47.860 --> 00:30:50.920
is an evolution of WebRTC 1.0.

00:30:50.920 --> 00:30:54.030
Not a French Revolution with
guillotines and all that.

00:30:57.020 --> 00:30:57.780
OK.

00:30:57.780 --> 00:30:58.960
So codecs.

00:30:58.960 --> 00:31:02.300
This is another
thing that causes

00:31:02.300 --> 00:31:03.870
no shortage of controversy.

00:31:03.870 --> 00:31:07.450
And I want to just articulate
what the Chrome position is

00:31:07.450 --> 00:31:09.210
on some of these things.

00:31:09.210 --> 00:31:11.990
And then we're going to have
a fantastic update on VP9

00:31:11.990 --> 00:31:15.280
specifically, from Pangu.

00:31:15.280 --> 00:31:17.410
So first, VP8.

00:31:17.410 --> 00:31:20.870
The short story is VP7 is
Google's codec of choice.

00:31:20.870 --> 00:31:23.390
We think this is the right
codec for the open web platform.

00:31:23.390 --> 00:31:25.700
We think this is the
right codec for WebRTC.

00:31:25.700 --> 00:31:27.680
We are trying to get
this in as many hardware

00:31:27.680 --> 00:31:28.660
places as possible.

00:31:28.660 --> 00:31:31.570
Across Android, across
Chrome, making this hardware

00:31:31.570 --> 00:31:33.630
accelerated, getting
the best performance

00:31:33.630 --> 00:31:37.960
for screen sharing,
for HD, for 4K.

00:31:37.960 --> 00:31:41.520
VP8 is the codec
of now, and we're

00:31:41.520 --> 00:31:44.080
going to make sure that
it's successful for people

00:31:44.080 --> 00:31:46.660
who are using it.

00:31:46.660 --> 00:31:48.660
So H.264.

00:31:48.660 --> 00:31:50.020
Some folks have asked us--

00:31:50.020 --> 00:31:50.936
SERGE LACHAPELLE: Boo.

00:31:54.312 --> 00:31:56.270
JUSTIN UBERTI: So I just
mentioned the position

00:31:56.270 --> 00:31:57.070
that we have.

00:31:57.070 --> 00:31:59.250
But some folks have
asked us, well,

00:31:59.250 --> 00:32:02.040
can I submit a
patch to add H.264

00:32:02.040 --> 00:32:03.750
into the WebRTC code base?

00:32:03.750 --> 00:32:05.790
And we're not ideologues here.

00:32:05.790 --> 00:32:06.960
So there's a patch.

00:32:06.960 --> 00:32:08.470
We're working on integrating it.

00:32:08.470 --> 00:32:11.210
If you want to ship
H.264 support where

00:32:11.210 --> 00:32:15.482
you bring your own H.264
from Joe's H.264 store,

00:32:15.482 --> 00:32:17.190
then you're certainly
welcome to do that.

00:32:17.190 --> 00:32:19.470
And we will have the
packetization support

00:32:19.470 --> 00:32:24.260
in WebRTC, the negotiation
support, where that can work.

00:32:24.260 --> 00:32:25.920
But it won't be in Chrome.

00:32:25.920 --> 00:32:29.640
So if you want to build
your own application using

00:32:29.640 --> 00:32:32.920
the WebRTC source code,
H.264 can be supported.

00:32:32.920 --> 00:32:34.505
You can integrate
it very easily.

00:32:34.505 --> 00:32:36.320
But as I mentioned,
we think the VP8

00:32:36.320 --> 00:32:40.064
is the right choice
for the web platform.

00:32:40.064 --> 00:32:44.240
But we think the even better
choice, starting next year,

00:32:44.240 --> 00:32:45.280
will be VP9.

00:32:45.280 --> 00:32:48.050
And I'm going to hand it over
to Pangu to regal us on--

00:32:48.050 --> 00:32:49.990
PANGU: Was that a subtle
dig that both of them

00:32:49.990 --> 00:32:52.660
were in black and white
and this is a color?

00:32:52.660 --> 00:32:55.990
JUSTIN UBERTI: Well,
it's, you know, 9.

00:32:55.990 --> 00:33:00.360
It's at least 1.25 times better.

00:33:00.360 --> 00:33:01.410
Or .125.

00:33:01.410 --> 00:33:05.760
PANGU: So before I get started
on VP9, a couple [INAUDIBLE].

00:33:05.760 --> 00:33:08.280
First is unfortunately,
Dmitriy has to leave.

00:33:08.280 --> 00:33:12.360
But Instructions on how to
build this will be coming up

00:33:12.360 --> 00:33:15.230
on g.co/chromevr.

00:33:15.230 --> 00:33:17.410
We already have a bunch of
Chrome experiments there

00:33:17.410 --> 00:33:18.850
that already works
with Cardboard.

00:33:18.850 --> 00:33:21.720
So if you have a Cardboard, you
should totally check that out.

00:33:21.720 --> 00:33:23.136
And if you don't
have a Cardboard,

00:33:23.136 --> 00:33:25.995
you can actually build
your own at g.co/cardboard.

00:33:25.995 --> 00:33:29.150
There's chromatic set up there.

00:33:29.150 --> 00:33:31.029
So VP9.

00:33:31.029 --> 00:33:32.570
One of the things
that we got started

00:33:32.570 --> 00:33:35.340
as we were thinking
about codecs was,

00:33:35.340 --> 00:33:37.750
this is from a company
called Sandvine.

00:33:37.750 --> 00:33:41.270
And they do this
stage of the internet

00:33:41.270 --> 00:33:43.510
roughly twice every year.

00:33:43.510 --> 00:33:46.260
And this is from the
second half of 2013.

00:33:46.260 --> 00:33:48.830
And it shows what are the
different activities that

00:33:48.830 --> 00:33:51.180
happen over the internet.

00:33:51.180 --> 00:33:54.290
And you'll see that 61%
of peak internet bandwidth

00:33:54.290 --> 00:33:56.160
is taken over by
video streaming.

00:33:56.160 --> 00:33:58.990
And this is across
the VOD streaming

00:33:58.990 --> 00:34:02.650
as well as any form of video
conferencing, et cetera.

00:34:02.650 --> 00:34:04.580
So we saw that number
a couple years.

00:34:04.580 --> 00:34:07.270
At that point it was
close to 50% percent.

00:34:07.270 --> 00:34:09.300
And that just scared us.

00:34:09.300 --> 00:34:12.150
Because it clearly showed that
global internet bandwidth was

00:34:12.150 --> 00:34:14.620
not growing at a pace
that was keeping up

00:34:14.620 --> 00:34:17.260
with how much video is being
consumed over the internet.

00:34:17.260 --> 00:34:20.840
And so, I should have probably
led with this question.

00:34:20.840 --> 00:34:23.014
Who here knows of VP9?

00:34:23.014 --> 00:34:24.170
All right.

00:34:24.170 --> 00:34:24.670
Whoa.

00:34:24.670 --> 00:34:26.440
That's a low number.

00:34:26.440 --> 00:34:28.860
So let me give you a quick
introduction with respect

00:34:28.860 --> 00:34:31.650
to what we did to
solve this problem.

00:34:31.650 --> 00:34:34.980
Our goal was, if we put a
little bit more compute cycles,

00:34:34.980 --> 00:34:37.110
how much more can we
actually compress the video?

00:34:37.110 --> 00:34:40.810
And I sort of really,
really do injustice

00:34:40.810 --> 00:34:42.741
to the technology
that goes in by sort

00:34:42.741 --> 00:34:43.949
of calling it compute cycles.

00:34:43.949 --> 00:34:45.540
But there's a lot
of decisions that

00:34:45.540 --> 00:34:47.900
can be made at the
time of encoding.

00:34:47.900 --> 00:34:50.110
And as with Moore's law,
as we get a little bit

00:34:50.110 --> 00:34:51.630
more compute cycles,
we can actually

00:34:51.630 --> 00:34:52.620
compress the video further.

00:34:52.620 --> 00:34:54.745
And that's been the theory
behind you video codecs.

00:34:54.745 --> 00:34:59.347
And with VP9 we just
look it one step higher.

00:34:59.347 --> 00:35:00.930
With a little bit
more compute cycles,

00:35:00.930 --> 00:35:03.460
you can actually get now
up to 50% compression

00:35:03.460 --> 00:35:05.610
for the same quality.

00:35:05.610 --> 00:35:08.980
Usually I run a video,
to show that-- I

00:35:08.980 --> 00:35:12.510
show a H.264 clip and a VP9
clip, and we have roughly 50%.

00:35:12.510 --> 00:35:16.130
I'll actually send links
instead, along with the e-mail,

00:35:16.130 --> 00:35:17.950
along with all these things.

00:35:17.950 --> 00:35:24.540
So over the past year-- we
announced VP9 in June 2013.

00:35:24.540 --> 00:35:26.320
And since then, we've
been working hard

00:35:26.320 --> 00:35:28.820
to ensure that
YouTube runs on VP9.

00:35:28.820 --> 00:35:30.070
It was not an easy sell.

00:35:30.070 --> 00:35:31.486
It was a really,
really hard sell.

00:35:31.486 --> 00:35:34.605
And I'll tell you what were
the benefits that we got.

00:35:34.605 --> 00:35:36.920
Because we were really trying
hard to sell to YouTube.

00:35:36.920 --> 00:35:38.550
But the first one
is that, I wanted

00:35:38.550 --> 00:35:41.160
to give you an idea of what
YouTube is in its current form

00:35:41.160 --> 00:35:41.890
today.

00:35:41.890 --> 00:35:44.950
So YouTube has over a
billion monthly active users.

00:35:44.950 --> 00:35:48.720
It deals with over 6
billion hours of video

00:35:48.720 --> 00:35:51.400
on a monthly basis.

00:35:51.400 --> 00:35:55.590
100 hours of video are uploaded
into YouTube every minute,

00:35:55.590 --> 00:35:58.670
and that's increasing.

00:35:58.670 --> 00:36:03.330
[LAUGHTER]

00:36:03.330 --> 00:36:05.380
And 80% of the traffic
that comes to YouTube

00:36:05.380 --> 00:36:06.630
comes from outside of the USA.

00:36:10.810 --> 00:36:12.880
And YouTube did a
really, really hard job

00:36:12.880 --> 00:36:14.600
of making sure that
H.264 works for them.

00:36:14.600 --> 00:36:16.300
And we were going to
them and telling, hey,

00:36:16.300 --> 00:36:17.660
we've got this new,
happy, fancy, new codec.

00:36:17.660 --> 00:36:19.285
Why don't you start
using that instead?

00:36:19.285 --> 00:36:21.365
And they were like,
nope, hold your horses.

00:36:21.365 --> 00:36:22.990
We want to see what
the performance is,

00:36:22.990 --> 00:36:24.610
what the benefits
are, et cetera.

00:36:24.610 --> 00:36:27.950
And so instead of leading
with how we did what we did,

00:36:27.950 --> 00:36:32.090
I wanted to show you one
more data point from YouTube.

00:36:32.090 --> 00:36:36.940
Which was, on the left--
or, wait, that's the right.

00:36:36.940 --> 00:36:40.380
On the right, you have the
uploaded videos in 2010

00:36:40.380 --> 00:36:41.510
in YouTube.

00:36:41.510 --> 00:36:44.070
And the uploaded videos
in 2013 in YouTube.

00:36:44.070 --> 00:36:48.680
And that's roughly a 600%
increase that they saw.

00:36:48.680 --> 00:36:52.810
And then you could also see,
from 2008 onwards, what's

00:36:52.810 --> 00:36:56.145
been 720p and greater
uploads on YouTube.

00:36:56.145 --> 00:36:58.020
Unfortunately, we can't
give you the numbers,

00:36:58.020 --> 00:37:00.140
but this is one of
those Bezos charts.

00:37:00.140 --> 00:37:01.050
It just goes up.

00:37:04.780 --> 00:37:07.350
So we somehow imagined that
we somehow convinced VP9,

00:37:07.350 --> 00:37:08.574
it was a lot of hypnotizing.

00:37:08.574 --> 00:37:09.990
And then they were
like, OK, cool.

00:37:09.990 --> 00:37:11.194
VP9 works.

00:37:11.194 --> 00:37:13.360
That's actually start
re-encoding the entire YouTube

00:37:13.360 --> 00:37:16.050
catalog in VP9, and we'll
start with the popular ones.

00:37:16.050 --> 00:37:18.310
And this includes 4K as well.

00:37:18.310 --> 00:37:22.710
And you'll see that the
top chart is calling out

00:37:22.710 --> 00:37:25.880
what is known as the format
distribution in YouTube.

00:37:25.880 --> 00:37:31.340
So YouTube needs to maintain
a 240p video, a 360p video,

00:37:31.340 --> 00:37:35.680
a 480p video, a 720p video,
a 1080p video, a 4K video,

00:37:35.680 --> 00:37:37.692
and all the other
ones in between,

00:37:37.692 --> 00:37:39.650
to make sure that we give
you a great streaming

00:37:39.650 --> 00:37:41.020
performance in YouTube.

00:37:41.020 --> 00:37:42.610
So [INAUDIBLE]
distribution is one

00:37:42.610 --> 00:37:43.850
of the biggest
challenges for YouTube.

00:37:43.850 --> 00:37:45.730
Now imagine that now
you need to feed this

00:37:45.730 --> 00:37:48.220
across all the caches
across the world.

00:37:48.220 --> 00:37:50.020
What do you keep, and
how do you keep it?

00:37:50.020 --> 00:37:50.870
Et cetera.

00:37:50.870 --> 00:37:55.000
And with VP9, our
goal was, if you

00:37:55.000 --> 00:37:57.420
can encode the video
in VP9, we will just

00:37:57.420 --> 00:37:58.642
have the bit rate overall.

00:37:58.642 --> 00:38:00.100
And as a result of
that, you should

00:38:00.100 --> 00:38:05.626
be able to store more content
and egress more content.

00:38:05.626 --> 00:38:07.000
And that's where
you sort of see.

00:38:07.000 --> 00:38:09.750
Another one with no
numbers shows you

00:38:09.750 --> 00:38:11.640
how the format
distribution changed.

00:38:11.640 --> 00:38:16.390
And think of this as 1080p,
720p, 480p, 360p, 240p, et

00:38:16.390 --> 00:38:16.890
cetera.

00:38:16.890 --> 00:38:18.848
That's the amount of
storage that they contain,

00:38:18.848 --> 00:38:20.815
and how we've shrunken
that down for YouTube.

00:38:23.885 --> 00:38:25.010
I won't bore you with this.

00:38:31.870 --> 00:38:35.350
So why YouTube keeps
these various formats

00:38:35.350 --> 00:38:37.490
is also so that we can
adapt the video for you,

00:38:37.490 --> 00:38:40.660
so that you get a much
better streaming experience.

00:38:40.660 --> 00:38:45.380
And with HTML5 we
added MSE to make sure

00:38:45.380 --> 00:38:48.140
that YouTube can take advantage
of this adapted streaming.

00:38:48.140 --> 00:38:51.030
And using that as well as dash,
what we've been able to do

00:38:51.030 --> 00:38:53.560
is sort of give you a really
fast streaming experience.

00:38:53.560 --> 00:38:56.382
And you can do this on your own.

00:38:56.382 --> 00:38:57.690
Go to YouTube today.

00:38:57.690 --> 00:39:00.520
In your hopefully crappy Wi-Fi
connection, and hopefully

00:39:00.520 --> 00:39:01.510
that's not true.

00:39:01.510 --> 00:39:03.620
But with less than
1 BPS, earlier you

00:39:03.620 --> 00:39:06.370
could barely stream
480p content on YouTube

00:39:06.370 --> 00:39:08.620
without encountering
the rebuffer circle.

00:39:08.620 --> 00:39:11.590
Today, you can stream 720p if
that video is encoded in VP9.

00:39:11.590 --> 00:39:13.425
And it will be a pretty
smooth experience.

00:39:13.425 --> 00:39:14.300
It's not, file a bug.

00:39:17.410 --> 00:39:20.360
And how you can check if that
particular video is VP9 or not

00:39:20.360 --> 00:39:22.640
is you can right
click on the player.

00:39:22.640 --> 00:39:25.590
And you can see a thing
called stats for nerds,

00:39:25.590 --> 00:39:27.320
and then you can see
what's the MIME type

00:39:27.320 --> 00:39:28.120
for that particular video.

00:39:28.120 --> 00:39:28.869
It should say VP9.

00:39:31.840 --> 00:39:36.230
So in order to
convince YouTube-- let

00:39:36.230 --> 00:39:38.490
me just see if I have
some more numbers here.

00:39:41.090 --> 00:39:43.040
So YouTube adopted VP9.

00:39:43.040 --> 00:39:45.940
And today, more than 60% of
daily playbacks on Chrome

00:39:45.940 --> 00:39:47.670
are done using dash VP9.

00:39:47.670 --> 00:39:49.770
And this has had a
tremendous benefit for them.

00:39:49.770 --> 00:39:50.820
And some of the
numbers that I want

00:39:50.820 --> 00:39:52.490
to highlight but I
couldn't get it in

00:39:52.490 --> 00:39:55.080
were-- the first
one is, overall,

00:39:55.080 --> 00:39:59.590
worldwide, now you see 25% more
HD video content as a result.

00:39:59.590 --> 00:40:01.842
And they load 15%
percent faster.

00:40:01.842 --> 00:40:04.300
And this is because we've been
able to reduce the bit rate.

00:40:04.300 --> 00:40:08.730
Because the codec provides
that corresponding benefit.

00:40:08.730 --> 00:40:12.430
Along with that is also the
fact that we made VP9 really,

00:40:12.430 --> 00:40:16.390
really fast, so that YouTube
can actually use this.

00:40:16.390 --> 00:40:18.310
So we've added
multiple points now

00:40:18.310 --> 00:40:20.960
between the computational
efficiency and the compression

00:40:20.960 --> 00:40:22.540
efficiency that
you wanted to do,

00:40:22.540 --> 00:40:25.560
so that VP9 can be used
by YouTube and the like,

00:40:25.560 --> 00:40:27.790
as well as with RTC.

00:40:27.790 --> 00:40:30.340
So you'll see that this
is a VPN speed parameter

00:40:30.340 --> 00:40:31.940
chart that we use.

00:40:31.940 --> 00:40:35.180
Which is-- think of speed 0
as kind of the kitchen sink,

00:40:35.180 --> 00:40:37.960
where we use all the encode
tools and consume as much

00:40:37.960 --> 00:40:40.710
of your CPU resources
as possible.

00:40:40.710 --> 00:40:42.740
And with every
step, we have tried

00:40:42.740 --> 00:40:45.540
to give you a slightly
lower compassion efficiency,

00:40:45.540 --> 00:40:49.070
but a much faster
performance from VP9.

00:40:49.070 --> 00:40:51.740
So you have to sort
of read it as, if you

00:40:51.740 --> 00:40:56.260
use speed 1 over speed 0 of
VP9, it'll be seven times more

00:40:56.260 --> 00:40:57.080
faster.

00:40:57.080 --> 00:41:00.050
And you'll get roughly 95 off
the compression efficiency

00:41:00.050 --> 00:41:03.240
that you would have had
if you had used speed 0.

00:41:03.240 --> 00:41:05.740
And the jump at speed 5.

00:41:05.740 --> 00:41:09.840
It says that it's 57 times
faster than speed 0 is.

00:41:09.840 --> 00:41:13.209
So that speed 5 are
our beginning target

00:41:13.209 --> 00:41:14.750
that we're trying
to look for WebRTC.

00:41:17.540 --> 00:41:20.330
So roughly 5% speed
efficiency drop

00:41:20.330 --> 00:41:23.150
for a speed increase
at the speed 4.

00:41:23.150 --> 00:41:25.450
And at the beginning
of this year,

00:41:25.450 --> 00:41:29.250
when we started working on
the real-time mode for VP9,

00:41:29.250 --> 00:41:31.800
we were 25 times
slower than real time.

00:41:31.800 --> 00:41:36.720
Which means that for every
frame that you need to encode,

00:41:36.720 --> 00:41:37.435
that's what?

00:41:37.435 --> 00:41:38.090
It's too high.

00:41:38.090 --> 00:41:38.590
Too high.

00:41:41.450 --> 00:41:45.170
And today, we are at a point
where we can now give you

00:41:45.170 --> 00:41:48.500
roughly, for 2.2 times real
time speed, we can give you

00:41:48.500 --> 00:41:50.230
significant
compression efficiency.

00:41:50.230 --> 00:41:53.260
But we've added a little
bit more speeds here.

00:41:53.260 --> 00:41:55.190
And I don't have a chart there.

00:41:55.190 --> 00:41:56.840
So we have two speeds
right now in VP9

00:41:56.840 --> 00:41:59.090
that this function is that
you can test for your time.

00:41:59.090 --> 00:42:01.650
The first is at speed 5, which
is roughly 2.2x and gives you

00:42:01.650 --> 00:42:03.680
40% compression efficiency.

00:42:03.680 --> 00:42:07.120
And speed 6, very roughly
40% more CPU cycles,

00:42:07.120 --> 00:42:10.010
but it gives you 20%
compression efficiency over VP8.

00:42:10.010 --> 00:42:11.950
We've started testing
this in certain cases.

00:42:11.950 --> 00:42:15.150
So for example, we have
together a Chrome remote desktop

00:42:15.150 --> 00:42:16.520
experience with VP9.

00:42:16.520 --> 00:42:17.920
The visual quality
is phenomenal.

00:42:17.920 --> 00:42:21.940
And for text, especially, we've
added I444 experimental support

00:42:21.940 --> 00:42:22.450
as well.

00:42:22.450 --> 00:42:25.380
You can see almost
lostless text rendering.

00:42:25.380 --> 00:42:28.700
And for that extra 40% more
we see roughly 20% gains

00:42:28.700 --> 00:42:30.095
in compression efficiency.

00:42:30.095 --> 00:42:31.720
We are very confident
that we'll get it

00:42:31.720 --> 00:42:35.615
to you by the end of this year,
as Serge mentioned earlier.

00:42:35.615 --> 00:42:37.990
And just wanted to give you
a quick note on the adoption.

00:42:37.990 --> 00:42:40.950
Today they're on Android,
Chrome, Firefox, and Opera.

00:42:40.950 --> 00:42:43.420
And more than a billion devices
can already play VP9 today.

00:42:43.420 --> 00:42:45.200
If they are part of
the media codec APIs,

00:42:45.200 --> 00:42:50.910
from KitKat onwards, and we'll
have some more stuff for L.

00:42:50.910 --> 00:42:51.670
I think that's it.

00:42:51.670 --> 00:42:52.907
Thanks.

00:42:52.907 --> 00:42:54.338
[APPLAUSE]

00:42:58.160 --> 00:43:01.730
SERGE LACHAPELLE: 60% of
all YouTube videos on Chrome

00:43:01.730 --> 00:43:02.857
are using VP9.

00:43:02.857 --> 00:43:03.690
JUSTIN UBERTI: Yeah.

00:43:03.690 --> 00:43:06.000
So we're talking about
millions upon millions

00:43:06.000 --> 00:43:09.990
upon millions of
minutes every day, VP9.

00:43:09.990 --> 00:43:13.990
And compare that to HEVC.

00:43:13.990 --> 00:43:15.990
I think that we're in a
very nice place for VP9.

00:43:15.990 --> 00:43:17.448
SERGE LACHAPELLE:
Thank you, Pangu.

00:43:17.448 --> 00:43:18.950
Thank you very much.

00:43:18.950 --> 00:43:19.991
JUSTIN UBERTI: Thank you.

00:43:21.720 --> 00:43:24.300
So again, the future.

00:43:24.300 --> 00:43:27.875
And let's talk about current
day adoption of WebRTC.

00:43:27.875 --> 00:43:29.750
SERGE LACHAPELLE: And
we'll have to be quick,

00:43:29.750 --> 00:43:32.130
because time is running out,
and we have some fun stuff

00:43:32.130 --> 00:43:33.179
to talk about.

00:43:33.179 --> 00:43:34.720
JUSTIN UBERTI: You
want to take this?

00:43:34.720 --> 00:43:36.660
SERGE LACHAPELLE: Yeah.

00:43:36.660 --> 00:43:41.900
So we're tracking over
300 companies that

00:43:41.900 --> 00:43:44.580
are deploying WebRTC
technology today.

00:43:44.580 --> 00:43:46.080
And in fact, I
think Tahee's going

00:43:46.080 --> 00:43:48.212
to say that that
number is wrong.

00:43:48.212 --> 00:43:48.920
AUDIENCE: 450.

00:43:48.920 --> 00:43:50.690
SERGE LACHAPELLE: 450 now?

00:43:50.690 --> 00:43:54.640
So if you're doing anything
with WebRTC, talk to this guy

00:43:54.640 --> 00:43:57.560
so you get tracked.

00:43:57.560 --> 00:44:01.209
We've got about 1.7 billion
WebRTC enabled devices.

00:44:01.209 --> 00:44:03.000
That's our estimate by
the end of the year,

00:44:03.000 --> 00:44:05.370
if you include all the mobile
phones, all the desktop,

00:44:05.370 --> 00:44:08.900
the penetration of the
HTML5 capable browsers

00:44:08.900 --> 00:44:10.670
that support WebRTC.

00:44:10.670 --> 00:44:15.080
And wow, where did
that number come from?

00:44:15.080 --> 00:44:19.050
2018.

00:44:19.050 --> 00:44:20.900
Up and to the right.

00:44:20.900 --> 00:44:21.400
All right.

00:44:21.400 --> 00:44:27.380
So basically even dogs will
be running-- but just to say.

00:44:27.380 --> 00:44:31.010
Like we have
watches, we're going

00:44:31.010 --> 00:44:33.740
to have all these devices that
are going to be around us.

00:44:33.740 --> 00:44:35.620
And these devices
are going to be

00:44:35.620 --> 00:44:37.990
built on top of the
same kind of technology

00:44:37.990 --> 00:44:40.760
that we have in our phones,
that we have in our laptops.

00:44:40.760 --> 00:44:44.617
And so the WebRTC
experience, right?

00:44:44.617 --> 00:44:46.450
It's going to be in the
remote-control cars.

00:44:46.450 --> 00:44:47.920
You can imagine
this being the gift

00:44:47.920 --> 00:44:50.570
of the year for Christmas
this year, or next year.

00:44:50.570 --> 00:44:55.360
And so as the hardware
becomes commoditized

00:44:55.360 --> 00:44:59.440
and the open software finds
its way on all that hardware,

00:44:59.440 --> 00:45:02.790
this is not a hard
thing to believe.

00:45:02.790 --> 00:45:08.262
So I'm looking forward to 2018.

00:45:08.262 --> 00:45:09.720
JUSTIN UBERTI: This
is current day.

00:45:09.720 --> 00:45:11.450
SERGE LACHAPELLE: Current day.

00:45:11.450 --> 00:45:13.200
JUSTIN UBERTI: These
are not projections,

00:45:13.200 --> 00:45:15.030
these are real stats.

00:45:15.030 --> 00:45:18.020
SERGE LACHAPELLE: We've got
300 million 30-day actives

00:45:18.020 --> 00:45:21.600
on Chrome for Android.

00:45:21.600 --> 00:45:27.280
We have Chrome and Firefox
interopping, and Opera.

00:45:27.280 --> 00:45:32.100
And this is not just sort of a
you make a blog post, woohoo,

00:45:32.100 --> 00:45:35.550
we've achieved interop, and
then you go forward in life.

00:45:35.550 --> 00:45:38.645
We actually do integrated tests.

00:45:38.645 --> 00:45:41.620
So on a daily basis, there
are hundreds and hundreds

00:45:41.620 --> 00:45:44.120
of calls made by our test bots.

00:45:44.120 --> 00:45:47.620
They bring up a virtual Firefox,
they bring up a virtual Chrome,

00:45:47.620 --> 00:45:49.500
and they place calls
between each other.

00:45:49.500 --> 00:45:53.270
We're trying very, very hard to
maintain this interoperability

00:45:53.270 --> 00:45:56.750
and we're working closely
with the Firefox team.

00:45:56.750 --> 00:46:01.170
And this is also a
testament to the standards

00:46:01.170 --> 00:46:06.047
community that are
helping us out with this.

00:46:06.047 --> 00:46:08.630
I don't know if you want to talk
about the under consideration

00:46:08.630 --> 00:46:09.647
for Internet Explorer?

00:46:09.647 --> 00:46:10.480
JUSTIN UBERTI: Yeah.

00:46:10.480 --> 00:46:12.480
Just coming back
to the ORTC point,

00:46:12.480 --> 00:46:16.360
there's a
status.modern.IE-- basically

00:46:16.360 --> 00:46:21.270
IE's current proposed
future support

00:46:21.270 --> 00:46:23.520
for a bunch of web technologies.

00:46:23.520 --> 00:46:26.910
And Microsoft has
said on that site

00:46:26.910 --> 00:46:31.220
that they are currently
looking at supporting ORTC.

00:46:31.220 --> 00:46:35.070
My expectation, based
on just intuition,

00:46:35.070 --> 00:46:37.900
is that we should see
WebRTC support coming

00:46:37.900 --> 00:46:40.570
in Internet Explorer very soon.

00:46:40.570 --> 00:46:42.810
I can't speak for our friends
in Cupertino right now,

00:46:42.810 --> 00:46:46.980
but nobody wants to
be the only person

00:46:46.980 --> 00:46:48.307
not invited to the party, so.

00:46:50.925 --> 00:46:52.550
SERGE LACHAPELLE: We
talked about this.

00:46:52.550 --> 00:46:53.900
I guess we can just skip it.

00:46:53.900 --> 00:46:55.608
JUSTIN UBERTI: Well,
you know, 1 billion.

00:46:55.608 --> 00:46:57.155
They're Android 30-day actives.

00:46:57.155 --> 00:46:58.363
SERGE LACHAPELLE: Huge thing.

00:46:58.363 --> 00:47:00.670
Lots of work went into this.

00:47:00.670 --> 00:47:01.700
Any questions?

00:47:01.700 --> 00:47:03.780
All right.

00:47:03.780 --> 00:47:05.750
JUSTIN UBERTI: Do you
want Sam to cover this?

00:47:05.750 --> 00:47:06.708
SERGE LACHAPELLE: Yeah.

00:47:11.092 --> 00:47:11.800
SAM DUTTON: Yeah.

00:47:11.800 --> 00:47:13.800
Just a quick word
about the resources

00:47:13.800 --> 00:47:16.360
we have for web developers.

00:47:16.360 --> 00:47:20.150
Justin's already mentioned
the reference video chat

00:47:20.150 --> 00:47:22.010
app, AppRTC.

00:47:22.010 --> 00:47:25.000
Like you said, as well as a
stack of work on the back end

00:47:25.000 --> 00:47:30.690
stuff, we're working on
improving the UI/UX for that

00:47:30.690 --> 00:47:32.560
particularly, so
it will work really

00:47:32.560 --> 00:47:35.770
well across multiple devices.

00:47:35.770 --> 00:47:39.030
And also a kind of optimizing
the JavaScript and so on.

00:47:39.030 --> 00:47:43.090
We've moved the
reference WebRTC samples

00:47:43.090 --> 00:47:46.530
that are built by the
WebRTC team to GitHub.

00:47:46.530 --> 00:47:52.360
And we really, really welcome
the patches and issues

00:47:52.360 --> 00:47:53.610
that we're receiving for that.

00:47:53.610 --> 00:47:58.435
So please, we'd love to see
your samples and anything

00:47:58.435 --> 00:48:00.310
you're having problems
with with our samples.

00:48:00.310 --> 00:48:05.730
And again, we've tried to build
all those-- kind of refactor

00:48:05.730 --> 00:48:06.940
them so they work.

00:48:06.940 --> 00:48:11.030
And the demos for all these
samples via GitHub pages,

00:48:11.030 --> 00:48:12.310
on that site.

00:48:12.310 --> 00:48:15.950
And they have refactored
in order to work on mobile.

00:48:15.950 --> 00:48:19.100
We also have, for people who
are learning about WebRTC,

00:48:19.100 --> 00:48:22.410
we maintain a code lab, which is
currently on big bucket there.

00:48:22.410 --> 00:48:25.340
And I also maintain this
giant list of everything

00:48:25.340 --> 00:48:26.740
to do with WebRTC.

00:48:26.740 --> 00:48:30.030
So check that out and please
feel free to add to that.

00:48:30.030 --> 00:48:32.230
We have, obviously, Google+.

00:48:32.230 --> 00:48:33.900
WebRTC with that.

00:48:33.900 --> 00:48:36.720
And there's the big
bucket code lab.

00:48:36.720 --> 00:48:38.630
And just one last thing.

00:48:38.630 --> 00:48:43.460
As you can see from the
numbers on these I/O videos,

00:48:43.460 --> 00:48:45.411
there is incredible
interest that we

00:48:45.411 --> 00:48:47.160
find from-- from our
perspective-- there's

00:48:47.160 --> 00:48:50.860
incredible interest in WebRTC,
relative to other APIs,

00:48:50.860 --> 00:48:52.530
I think.

00:48:52.530 --> 00:48:54.770
So if you're doing
WebRTC stuff, I

00:48:54.770 --> 00:48:57.010
think you're in
the right business.

00:48:57.010 --> 00:49:01.640
JUSTIN UBERTI: The 2012 video
is the number five most watched

00:49:01.640 --> 00:49:04.880
video of all Google
I/O, for WebRTC.

00:49:04.880 --> 00:49:07.587
And the one for 2013
was the number 3.

00:49:07.587 --> 00:49:09.670
SERGE LACHAPELLE: Let's
see what we get this year.

00:49:09.670 --> 00:49:10.140
JUSTIN UBERTI: Yeah.

00:49:10.140 --> 00:49:10.765
Well, you know.

00:49:10.765 --> 00:49:11.510
It's--

00:49:11.510 --> 00:49:13.926
SERGE LACHAPELLE: And this is
an interesting thing, right?

00:49:13.926 --> 00:49:16.370
We did a little gather
up like this in January,

00:49:16.370 --> 00:49:19.470
and we had about 30,
35 people show up.

00:49:19.470 --> 00:49:24.530
And today, we didn't
have Chris helping us.

00:49:24.530 --> 00:49:26.637
So it's amazing to
see the interest.

00:49:26.637 --> 00:49:28.970
Now I think I'm going to
attack the agenda a little bit,

00:49:28.970 --> 00:49:30.919
because we went a
little bit over time.

00:49:30.919 --> 00:49:33.460
What we're going to do is we're
going to go past the question

00:49:33.460 --> 00:49:35.940
section, and we're
going to come back

00:49:35.940 --> 00:49:38.570
to the questions after the
break and after the demos,

00:49:38.570 --> 00:49:41.020
so that those of you that
need to leave can leave,

00:49:41.020 --> 00:49:44.330
and those of you who are
interested in listening to us

00:49:44.330 --> 00:49:46.440
answer these
questions can do that.

00:49:46.440 --> 00:49:48.830
And so we don't
cut into the time

00:49:48.830 --> 00:49:51.540
of the people that prepared
demos for us today.

00:49:51.540 --> 00:49:52.260
Is that OK?

00:49:52.260 --> 00:49:53.510
JUSTIN UBERTI: One more thing?

00:49:53.510 --> 00:49:54.426
SERGE LACHAPELLE: Yep.

00:50:01.750 --> 00:50:05.550
JUSTIN UBERTI: So
we've seen great uptake

00:50:05.550 --> 00:50:09.600
from people actually shipping
real applications this year.

00:50:09.600 --> 00:50:12.780
Already in 2014, we've
seen Snapchat roll out,

00:50:12.780 --> 00:50:14.380
with WebRTC-based video chat.

00:50:14.380 --> 00:50:16.760
And the Amazon
Mayday service, which

00:50:16.760 --> 00:50:19.010
is also powered by WebRTC.

00:50:19.010 --> 00:50:21.450
So it gives me great
pleasure to announce

00:50:21.450 --> 00:50:26.050
that, starting today, Google
Hangouts is now rolling out

00:50:26.050 --> 00:50:27.724
on WebRTC.

00:50:27.724 --> 00:50:29.200
[APPLAUSE]

00:50:34.120 --> 00:50:36.140
This is a long time coming.

00:50:36.140 --> 00:50:39.920
And a number of
people asked, you guys

00:50:39.920 --> 00:50:43.780
have been working on WebRTC,
why isn't this here yet?

00:50:43.780 --> 00:50:45.030
We had a bunch of stuff to do.

00:50:45.030 --> 00:50:49.750
For one, we transitioned from
a different codec to VP8.

00:50:49.750 --> 00:50:51.830
That was a fair
pretty heavy forklift.

00:50:51.830 --> 00:50:55.180
And we also wanted to
make sure that we didn't

00:50:55.180 --> 00:50:57.390
regress any feature
functionality.

00:50:57.390 --> 00:51:03.920
So this version of
Hangouts, based on WebRTC,

00:51:03.920 --> 00:51:07.839
provides all the features
that you expect in Hangouts.

00:51:07.839 --> 00:51:09.380
Including things
like screen sharing,

00:51:09.380 --> 00:51:12.140
it includes Hangouts
video effects,

00:51:12.140 --> 00:51:15.030
which is accomplished
using something

00:51:15.030 --> 00:51:17.960
we do in Native Client for
video stream processing.

00:51:17.960 --> 00:51:22.370
And it supports the whole
group video chat experience.

00:51:22.370 --> 00:51:24.270
Hangouts on air, all that.

00:51:26.950 --> 00:51:28.700
SERGE LACHAPELLE: It's
slowly rolling out.

00:51:28.700 --> 00:51:31.480
If you install Chrome Beta.

00:51:31.480 --> 00:51:34.650
Chrome dev, you're going
to most likely get it

00:51:34.650 --> 00:51:36.990
off your Gmail account.

00:51:36.990 --> 00:51:38.640
And if you're on
the Chrome's table,

00:51:38.640 --> 00:51:40.730
we're slowly rolling it out.

00:51:40.730 --> 00:51:45.040
And that roll-out is going
to take a little bit of time,

00:51:45.040 --> 00:51:47.180
as we do these things carefully.

00:51:47.180 --> 00:51:48.340
But give us feedback.

00:51:48.340 --> 00:51:51.066
Install dev or beta
and give us feedback.

