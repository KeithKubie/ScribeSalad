WEBVTT
Kind: captions
Language: en

00:00:01.205 --> 00:00:03.480
SPEAKER: OK, so
let's get started.

00:00:03.480 --> 00:00:06.030
So there are a lot
of materials here.

00:00:06.030 --> 00:00:08.180
What I was preparing
is that I think

00:00:08.180 --> 00:00:10.200
I'm going to go
through some of them

00:00:10.200 --> 00:00:12.150
and leave about 10 minutes.

00:00:12.150 --> 00:00:14.680
I'd like to go over
some of the samples

00:00:14.680 --> 00:00:18.450
to how see how the scenes line
up with Google [? Stores. ?]

00:00:18.450 --> 00:00:21.700
Question-wise, after we finish,
I think that we are so--

00:00:24.550 --> 00:00:30.157
based on the number of you, we
can have a very intimate talk.

00:00:30.157 --> 00:00:32.240
So whenever you guys have
questions, you can stop.

00:00:32.240 --> 00:00:34.270
And also this one
is the last one.

00:00:34.270 --> 00:00:36.352
So I think time pressure
is not that big.

00:00:40.810 --> 00:00:43.290
Yeah, I've got to say that.

00:00:43.290 --> 00:01:07.990
[SPEAKING CHINESE]
OK, here we go.

00:01:07.990 --> 00:01:10.540
So the topic of here
today is the performance

00:01:10.540 --> 00:01:13.080
of 3D graphics for Android.

00:01:13.080 --> 00:01:19.000
[INAUDIBLE] It's kind of just
to give you an overview of what

00:01:19.000 --> 00:01:21.760
Vulkan looks like.

00:01:21.760 --> 00:01:30.460
There's no [INAUDIBLE]
sessions, you can [INAUDIBLE].

00:01:30.460 --> 00:01:36.370
Vulkan, it's kind over
the top in that way.

00:01:36.370 --> 00:01:38.920
OK, this is the first slide.

00:01:38.920 --> 00:01:40.889
The first thing on the left.

00:01:43.600 --> 00:01:46.310
His name is Jesse.

00:01:46.310 --> 00:01:48.902
He's the main person
behind Android graphics.

00:01:51.776 --> 00:01:53.650
So on the right is the
red book from Khronos.

00:01:53.650 --> 00:01:57.735
That's a tradition, Khronos
always publishes a book.

00:01:57.735 --> 00:02:01.960
[INAUDIBLE]

00:02:01.960 --> 00:02:04.306
So last week, I asked
them, do you need

00:02:04.306 --> 00:02:06.410
me to talk about the future.

00:02:06.410 --> 00:02:12.310
Maybe check whether you
guys have NDA with Khronos.

00:02:12.310 --> 00:02:16.230
Oh, let me ask, how many of
you have an NDA with Khronos.

00:02:16.230 --> 00:02:21.760
Just within Khronos group.
your NDA [INAUDIBLE].

00:02:21.760 --> 00:02:23.990
Just an agreement.

00:02:23.990 --> 00:02:29.300
A shared agreement, whatever
I talk, if I talk the future,

00:02:29.300 --> 00:02:33.820
whatever I talk,l then you guys
only keep this in to yourself.

00:02:33.820 --> 00:02:36.620
You have something
signed with Khronos.

00:02:38.952 --> 00:02:40.910
Well, I better not talk
anything in the future.

00:02:40.910 --> 00:02:43.330
But I don't know too
much about the future.

00:02:43.330 --> 00:02:45.085
It's fine.

00:02:45.085 --> 00:02:49.855
[INAUDIBLE]

00:02:49.855 --> 00:02:54.002
OK, let me talk to you
today about [INAUDIBLE].

00:02:54.002 --> 00:02:55.406
[? So many ?] said why?

00:02:55.406 --> 00:02:56.260
Why Vulkan?

00:02:56.260 --> 00:03:00.745
What is it, and how can I get
started on Vulkan Android.

00:03:00.745 --> 00:03:04.470
And the last two is,
hopefully the last one

00:03:04.470 --> 00:03:08.840
after you hear the first two,
the problem is already solved.

00:03:08.840 --> 00:03:11.460
Otherwise I didn't
do a good work.

00:03:11.460 --> 00:03:14.280
So the first one is
a very important one.

00:03:14.280 --> 00:03:18.720
So some tips from partners
we worked with in the past.

00:03:18.720 --> 00:03:22.720
So my focus will be
on the first three.

00:03:22.720 --> 00:03:27.425
The fourth one, I will
kick off with three topics.

00:03:27.425 --> 00:03:32.664
from it, [INAUDIBLE]

00:03:32.664 --> 00:03:35.970
So why don't we start over.

00:03:35.970 --> 00:03:41.280
So let's look at the
vertical timeline.

00:03:41.280 --> 00:03:43.940
So look at this.

00:03:43.940 --> 00:03:48.840
Back to 1992, the first
version of OpenGL released.

00:03:48.840 --> 00:03:51.190
The computing world
is like this--

00:03:51.190 --> 00:03:52.890
486.

00:03:52.890 --> 00:03:55.530
That's Windows 3.1.

00:03:55.530 --> 00:03:59.270
Windows 3.1, looking at
the history, looking back,

00:03:59.270 --> 00:04:02.640
it's a very important one.

00:04:02.640 --> 00:04:08.770
To me, that is beginning of
the green industry [INAUDIBLE]

00:04:08.770 --> 00:04:12.376
or applications,
computing work, together.

00:04:12.376 --> 00:04:17.290
[INAUDIBLE] In those days,
there's no such thing as a GPU.

00:04:17.290 --> 00:04:21.769
All you had is a
[INAUDIBLE], basically,

00:04:21.769 --> 00:04:23.930
a scan line, just a display.

00:04:23.930 --> 00:04:26.760
30 or 40 registers
for the right,

00:04:26.760 --> 00:04:30.268
and you get the digital mapping.

00:04:30.268 --> 00:04:33.446
You can put in the memory
[INAUDIBLE] for the image you

00:04:33.446 --> 00:04:36.760
want to display and then write
the register for the timings,

00:04:36.760 --> 00:04:39.050
and then you do the [? DA ?]
[? transformation. ?]

00:04:39.050 --> 00:04:41.900
That's all.

00:04:41.900 --> 00:04:46.650
Looking at it today, so mobile
CPUs today look like this.

00:04:46.650 --> 00:04:48.870
On CPU size, these are the CPUs.

00:04:48.870 --> 00:04:52.170
So CPUs now all
have multiple cores.

00:04:52.170 --> 00:04:53.570
This is the mobile.

00:04:53.570 --> 00:04:55.464
We are not talking
about desktop yet.

00:04:55.464 --> 00:04:58.030
For desktop, you have
even more powerful.

00:04:58.030 --> 00:05:00.770
So all the [INAUDIBLE]
all have a cache.

00:05:00.770 --> 00:05:04.750
They all have the multiple
cores running at the same time.

00:05:08.935 --> 00:05:12.420
And look at the power
and clock speed.

00:05:12.420 --> 00:05:16.470
So we see here, what I'm trying
to say is, mathematically, I

00:05:16.470 --> 00:05:20.220
think this one is [INAUDIBLE].

00:05:20.220 --> 00:05:22.045
And I think, comparing
to a 3D thing,

00:05:22.045 --> 00:05:25.930
this is the simplest
one, the [INAUDIBLE].

00:05:25.930 --> 00:05:27.870
So what it is trying
to say over here

00:05:27.870 --> 00:05:30.425
is that the
multi-core is helping

00:05:30.425 --> 00:05:32.660
for the power consumption.

00:05:32.660 --> 00:05:36.670
So by looking at the line
over here, it's a 2.2,

00:05:36.670 --> 00:05:44.320
where the frequency over here,
with one core, it's over here.

00:05:44.320 --> 00:05:45.870
Some are here.

00:05:45.870 --> 00:05:49.320
So now it's about 1.6 watts.

00:05:49.320 --> 00:05:54.790
Looking at the dual
core, so this second one,

00:05:54.790 --> 00:05:57.270
if I ran a dual core
at 1.1, so I'm here,

00:05:57.270 --> 00:06:01.830
I'm [? currently ?] using about
less than half of the power.

00:06:01.830 --> 00:06:05.200
So that point of here is
that by using multi-core,

00:06:05.200 --> 00:06:08.430
you really can save
power for the system.

00:06:12.870 --> 00:06:16.540
And now we have GPUs.

00:06:16.540 --> 00:06:19.470
So GPUs, you can
look at the GPUs

00:06:19.470 --> 00:06:23.130
and have [INAUDIBLE]
[? one sharing ?] unit how

00:06:23.130 --> 00:06:25.220
this is done inside the chip.

00:06:27.790 --> 00:06:30.810
Now in any of the GPUs
in use nowadays, we

00:06:30.810 --> 00:06:32.640
can easily get to 32.

00:06:32.640 --> 00:06:36.465
Now, on desktop,
it's [? in solids. ?]

00:06:36.465 --> 00:06:40.630
So you can see the computing
power change in these 20 years

00:06:40.630 --> 00:06:43.500
or so.

00:06:43.500 --> 00:06:46.860
So with this
happening, there need

00:06:46.860 --> 00:06:51.935
to be new things, new APIs to
address the parallelization

00:06:51.935 --> 00:06:54.050
to use these multi-cores.

00:06:54.050 --> 00:06:55.470
GPU [? set, ?] it's OK.

00:06:55.470 --> 00:06:56.220
It's already done.

00:06:56.220 --> 00:06:58.010
Because GPU, you have shares.

00:06:58.010 --> 00:07:00.820
Shares [INAUDIBLE] GPU.

00:07:00.820 --> 00:07:03.850
The shares need
[INAUDIBLE] to [INAUDIBLE].

00:07:03.850 --> 00:07:05.770
So that part is taken care of.

00:07:05.770 --> 00:07:11.940
The other part that needs to
be taken care of [INAUDIBLE]

00:07:11.940 --> 00:07:15.540
is the CPU set, the
parallelization.

00:07:15.540 --> 00:07:23.270
So to help address that, there
is no silver bullet for this

00:07:23.270 --> 00:07:24.210
yet.

00:07:24.210 --> 00:07:31.390
So a lot of people have been
trying to get a generic library

00:07:31.390 --> 00:07:32.920
to this.

00:07:32.920 --> 00:07:35.340
But in the end, is--

00:07:35.340 --> 00:07:37.910
yeah, it's kind of
like wait in line

00:07:37.910 --> 00:07:41.370
lower level API [INAUDIBLE].

00:07:41.370 --> 00:07:43.890
Developers, let
them decide what is

00:07:43.890 --> 00:07:45.890
the best for their application.

00:07:45.890 --> 00:07:50.920
Because only application
knows what is the best things

00:07:50.920 --> 00:07:52.176
they do.

00:07:52.176 --> 00:07:56.955
And with that, they know how
to address those problems.

00:07:56.955 --> 00:08:00.900
[INAUDIBLE] memory
[INAUDIBLE] processing.

00:08:00.900 --> 00:08:06.110
So that is the
industry, [INAUDIBLE].

00:08:06.110 --> 00:08:11.829
Now, by looking at the
[INAUDIBLE], iOS, 2014,

00:08:11.829 --> 00:08:12.620
they released that.

00:08:16.040 --> 00:08:18.480
Anybody writing programs on iOS?

00:08:22.890 --> 00:08:26.140
So same thing, a similar
story on Windows.

00:08:26.140 --> 00:08:29.550
On Windows side,
the [? dx ?] is also

00:08:29.550 --> 00:08:32.190
released around
the same timeframe.

00:08:32.190 --> 00:08:34.840
So those OS, the two
major non-open source

00:08:34.840 --> 00:08:38.789
OS, they all have
their own solutions.

00:08:38.789 --> 00:08:40.240
So you can imagine.

00:08:40.240 --> 00:08:43.090
Open source is
[INAUDIBLE] left behind.

00:08:43.090 --> 00:08:47.150
So open is the answer to this.

00:08:47.150 --> 00:08:54.460
So Vulkan is used by, they're
mainly targeting for all OS's.

00:08:54.460 --> 00:08:55.780
That's the [INAUDIBLE].

00:08:55.780 --> 00:09:00.010
Vulkan, [? what it does, ?]
it does its best.

00:09:00.010 --> 00:09:01.685
It's targeted for
all [INAUDIBLE].

00:09:01.685 --> 00:09:05.065
You can use all the
four major OS's.

00:09:05.065 --> 00:09:09.250
But later on, there's
a [INAUDIBLE] for that.

00:09:09.250 --> 00:09:17.620
For Android, Vulkan is the
primary runner [INAUDIBLE].

00:09:17.620 --> 00:09:21.930
So that's why Vulkan is here.

00:09:21.930 --> 00:09:26.430
Now, let's get into Vulkan.

00:09:26.430 --> 00:09:29.830
So what are the major
Vulkan features for us?

00:09:32.750 --> 00:09:35.630
Everybody is using
these new API standards.

00:09:35.630 --> 00:09:40.770
So on iOS, they
have their own ones.

00:09:40.770 --> 00:09:42.787
And [? dx ?] have
their own ones.

00:09:42.787 --> 00:09:46.860
Vulkan, when it does it,
it does it for everybody.

00:09:46.860 --> 00:09:54.130
So the features from
Vulkan is explicit.

00:09:54.130 --> 00:09:58.695
Explicit means, if it's
OpenGL, for example,

00:09:58.695 --> 00:10:01.330
if you don't use something,
you don't have to set it.

00:10:01.330 --> 00:10:04.310
[INAUDIBLE] default for it.

00:10:04.310 --> 00:10:08.110
Here, anything you use,
you need to [INAUDIBLE].

00:10:08.110 --> 00:10:09.540
You need to set it to something.

00:10:09.540 --> 00:10:10.957
But as soon as
you don't need it,

00:10:10.957 --> 00:10:14.850
you need to initialize
it [? for yourself. ?]

00:10:14.850 --> 00:10:18.220
It's all [INAUDIBLE]
application.

00:10:18.220 --> 00:10:21.100
Those things are not
specific for Vulkan either.

00:10:21.100 --> 00:10:24.216
It applies to all
these three major

00:10:24.216 --> 00:10:28.260
rendering engines [INAUDIBLE].
[? Dx, ?] similar thing.

00:10:28.260 --> 00:10:32.680
So this, this [? visit ?] is
kind of the industry standard.

00:10:32.680 --> 00:10:37.400
It's a trend we
are moving toward.

00:10:37.400 --> 00:10:44.231
So more than we are going to
see later for those [INAUDIBLE],

00:10:44.231 --> 00:10:47.320
and another very important
one is extensible.

00:10:47.320 --> 00:10:50.340
So this extensibility
is very important,

00:10:50.340 --> 00:10:55.160
and is kind of a
traditional tool for Kronos.

00:10:55.160 --> 00:11:01.890
Kronos open stacks,
not only for graphics.

00:11:01.890 --> 00:11:06.377
So OpenGL [INAUDIBLE]
have the interface

00:11:06.377 --> 00:11:12.220
designed for extensions,
so those kind of things.

00:11:12.220 --> 00:11:17.049
So now let's look at
what explicit means.

00:11:17.049 --> 00:11:19.090
By looking at this graph,
we can see from OpenGL,

00:11:19.090 --> 00:11:21.896
in driver is a [? fat ?] driver.

00:11:21.896 --> 00:11:24.745
The driver needs to
handle a lot of things.

00:11:24.745 --> 00:11:26.270
Driver gives you
abstraction layers

00:11:26.270 --> 00:11:28.770
and in context management.

00:11:28.770 --> 00:11:31.595
Memory allocation come
here a lot of times

00:11:31.595 --> 00:11:35.266
here share GL
[? SAL ?] compiler.

00:11:35.266 --> 00:11:37.260
And the validation
error checking

00:11:37.260 --> 00:11:39.210
is one we'll also
going to come back to.

00:11:39.210 --> 00:11:41.820
And that is an
important portion of it.

00:11:41.820 --> 00:11:47.290
Now all this, you've got to push
it over to application work.

00:11:47.290 --> 00:11:50.180
So you really have the power
to do whatever you want,

00:11:50.180 --> 00:11:50.990
basically.

00:11:50.990 --> 00:11:52.650
You have [INAUDIBLE].

00:11:52.650 --> 00:11:54.460
The layer here is very thin.

00:11:54.460 --> 00:11:58.170
Basically it's just one wrapper
for the [? analyst ?] hardware.

00:11:58.170 --> 00:11:59.765
So the rest is all yours.

00:12:02.986 --> 00:12:08.610
So you can [? replicate ?]
every single cycle from the GPU,

00:12:08.610 --> 00:12:10.796
with these explicit APIs.

00:12:24.890 --> 00:12:29.840
So the benefit with explicit
APIs is, in a sense,

00:12:29.840 --> 00:12:34.400
you already know what is going
to happen in your program

00:12:34.400 --> 00:12:37.316
because the driver
there is so thin,

00:12:37.316 --> 00:12:39.625
it then draws too
much processing.

00:12:39.625 --> 00:12:42.730
So everything,
almost everything,

00:12:42.730 --> 00:12:44.590
is in your application code.

00:12:44.590 --> 00:12:47.331
So there is-- you
know, definitely you

00:12:47.331 --> 00:12:50.100
know what is going to
happen at which time.

00:12:50.100 --> 00:12:52.550
So that brings you
predictable behavior

00:12:52.550 --> 00:12:54.360
and predictable performance.

00:12:54.360 --> 00:12:58.520
Back [? on there is ?] OpenGL,
it has to reach to a dual core

00:12:58.520 --> 00:13:01.010
to know how to
parallelize these things.

00:13:06.100 --> 00:13:07.550
Now moving on to the next one.

00:13:07.550 --> 00:13:15.330
[INAUDIBLE] design for desktop
and mobile [? cores ?] OS.

00:13:15.330 --> 00:13:20.730
So [INAUDIBLE] is a
big feature for this.

00:13:20.730 --> 00:13:29.350
So right now, core standard
is the same for all OS's.

00:13:29.350 --> 00:13:32.060
The only [INAUDIBLE]
that are different

00:13:32.060 --> 00:13:35.140
is the WSI portion of it,
Windows System Interface.

00:13:35.140 --> 00:13:36.980
So how do you present?

00:13:36.980 --> 00:13:41.520
Once you get a draw, you
get [INAUDIBLE] system.

00:13:41.520 --> 00:13:43.710
That porting is separate.

00:13:43.710 --> 00:13:45.430
But it's part.

00:13:45.430 --> 00:13:48.360
If you got to the Khronos, you
will see that standard, WSI.

00:13:48.360 --> 00:13:53.590
So that [INAUDIBLE]
is heavily native OS,

00:13:53.590 --> 00:14:00.022
whatever OS it is, you need
to use that OS mechanism.

00:14:00.022 --> 00:14:01.480
So when the OS is
ported to Vulkan,

00:14:01.480 --> 00:14:03.255
it will provide this service.

00:14:08.210 --> 00:14:12.240
So that brings a lot of
good things for [INAUDIBLE].

00:14:12.240 --> 00:14:15.923
Most of your code,
for Vulkan, or most--

00:14:19.480 --> 00:14:23.770
99%, I think, is close to that.

00:14:23.770 --> 00:14:29.800
So all of them can be
directly used on all the OS's.

00:14:29.800 --> 00:14:32.290
You develop it for
Windows Vulkan,

00:14:32.290 --> 00:14:34.750
you [? can use ?] for
[INAUDIBLE] Linux, Vulkan,

00:14:34.750 --> 00:14:37.390
and for Android.

00:14:37.390 --> 00:14:42.205
For iOS, there is a Vulkan VT.

00:14:42.205 --> 00:14:47.520
That company already [INAUDIBLE]
have a wrapper for Vulkan

00:14:47.520 --> 00:14:49.682
to run on top of iOS.

00:14:49.682 --> 00:14:57.940
We have a demo on
[INAUDIBLE] [? earlier. ?]

00:14:57.940 --> 00:15:01.880
Next big picture for
this is [INAUDIBLE].

00:15:04.600 --> 00:15:07.450
One of the major things
Vulkan is trying to address

00:15:07.450 --> 00:15:10.360
is CPU use in
parallel processing.

00:15:10.360 --> 00:15:12.290
This is for that.

00:15:12.290 --> 00:15:16.330
So how do these
[? multi-processing ?] work

00:15:16.330 --> 00:15:19.760
is-- for example, if you
recommend the buffers,

00:15:19.760 --> 00:15:23.380
you can have separate
threads on CPU.

00:15:23.380 --> 00:15:26.130
We're talking about the
CPU thread, on CPU thread.

00:15:26.130 --> 00:15:28.850
You can have several
[INAUDIBLE] view

00:15:28.850 --> 00:15:31.172
command buffers for that scene.

00:15:31.172 --> 00:15:33.785
In another thread
you can run buffers

00:15:33.785 --> 00:15:36.370
for another thing in the
frame, in a single frame.

00:15:36.370 --> 00:15:41.200
Then you can let them submit the
command into the command queue.

00:15:41.200 --> 00:15:44.340
So of course, you need to handle
the syncronization or portion

00:15:44.340 --> 00:15:46.640
of it, because it
might [INAUDIBLE] share

00:15:46.640 --> 00:15:47.780
in the same queue.

00:15:47.780 --> 00:15:52.440
But those are kind of
traditional programming stuff.

00:15:52.440 --> 00:15:56.000
This leads to the next for us.

00:15:56.000 --> 00:15:57.560
That's the example.

00:15:57.560 --> 00:16:01.441
So in this example, here's
the [? force ?] [? array, ?]

00:16:01.441 --> 00:16:04.950
and viewing different command
buffers [INAUDIBLE] the same

00:16:04.950 --> 00:16:06.370
command queue.

00:16:06.370 --> 00:16:10.700
This over here, when
you submit, it's

00:16:10.700 --> 00:16:18.630
your responsibility to provide
synchronization [INAUDIBLE]

00:16:18.630 --> 00:16:19.350
your queue.

00:16:23.200 --> 00:16:30.460
OK, so next, we said
[INAUDIBLE] is the graphics

00:16:30.460 --> 00:16:34.500
and the computer also put in a
[INAUDIBLE], all of this talk

00:16:34.500 --> 00:16:36.370
is about graphics.

00:16:36.370 --> 00:16:39.630
And another one is the SPIR.

00:16:39.630 --> 00:16:44.980
So SPIR in OpenGL have
GL as a [INAUDIBLE].

00:16:44.980 --> 00:16:46.560
You gave to OpenGL.

00:16:46.560 --> 00:16:49.640
It will compile at runtime.

00:16:49.640 --> 00:16:52.030
And you [INAUDIBLE]
to meet over there.

00:16:52.030 --> 00:16:54.880
So we see compile is at runtime.

00:16:54.880 --> 00:16:59.400
But Vulkan always
specifies what is

00:16:59.400 --> 00:17:01.710
the [INAUDIBLE] representation.

00:17:01.710 --> 00:17:05.430
It's called intermediate
representation.

00:17:05.430 --> 00:17:09.119
This is for [INAUDIBLE].

00:17:09.119 --> 00:17:11.800
But that is the lower
level, lower level

00:17:11.800 --> 00:17:14.400
than GL as [INAUDIBLE].

00:17:14.400 --> 00:17:16.380
And it can be compiled offline.

00:17:16.380 --> 00:17:19.770
It doesn't have to be
compiled at runtime.

00:17:19.770 --> 00:17:24.663
So the benefit that is some of
the games, when you compile,

00:17:24.663 --> 00:17:28.430
it takes a long time, so
it can cause a glitch.

00:17:28.430 --> 00:17:32.880
But with this one, you
can compile it offline,

00:17:32.880 --> 00:17:36.180
and directly through
Vulkan, then these glitches

00:17:36.180 --> 00:17:40.400
can get removed.

00:17:40.400 --> 00:17:47.890
So remember, 2007, [INAUDIBLE].

00:17:47.890 --> 00:17:50.714
At that time, I was
not working at Google.

00:17:53.680 --> 00:17:58.080
So the tool to do the
[INAUDIBLE] translate

00:17:58.080 --> 00:18:00.465
your [INAUDIBLE]
GLSL [INAUDIBLE]

00:18:00.465 --> 00:18:04.660
or the high level language
to [? SPIR, ?] it's yours.

00:18:04.660 --> 00:18:06.645
It's your applications.

00:18:06.645 --> 00:18:10.430
So the responsibility
can do whatever you want.

00:18:10.430 --> 00:18:14.730
So just to translate for
[INAUDIBLE] that's all.

00:18:14.730 --> 00:18:18.070
So from Google we
have a tool called

00:18:18.070 --> 00:18:23.695
[INAUDIBLE] to help you to
do this compiling translation

00:18:23.695 --> 00:18:24.545
[INAUDIBLE].

00:18:28.550 --> 00:18:29.960
You don't have to use it.

00:18:29.960 --> 00:18:33.116
So you can do your
own [INAUDIBLE]

00:18:33.116 --> 00:18:37.300
optimization over
these kinds of things.

00:18:37.300 --> 00:18:42.940
The major thing nowadays, is
the battle is in the shader.

00:18:42.940 --> 00:18:46.380
What decides whether you
have the best application,

00:18:46.380 --> 00:18:48.380
those things is in the shader.

00:18:51.960 --> 00:19:00.380
OK, so this slide over here,
[INAUDIBLE] it's from Khronos.

00:19:00.380 --> 00:19:02.910
So this is talking
about the pipeline, what

00:19:02.910 --> 00:19:09.790
the pipeline looks like and then
how the buffers get submitted

00:19:09.790 --> 00:19:11.990
to the pipeline at which point.

00:19:11.990 --> 00:19:19.770
So this booklet is from Khronos
before I came I contacted them.

00:19:19.770 --> 00:19:23.630
They sent it to me so
I brought it over here.

00:19:23.630 --> 00:19:25.670
So you guys can feel
free to pick it up.

00:19:25.670 --> 00:19:27.678
It's right there on the table.

00:19:30.600 --> 00:19:36.680
The point here, I think, is if
you are doing Vulkan rendering,

00:19:36.680 --> 00:19:39.845
get familiar with
these kinds of help

00:19:39.845 --> 00:19:43.610
when you are coding
your own application.

00:19:43.610 --> 00:19:46.364
So put it that way.

00:19:46.364 --> 00:19:47.680
[SPEAKING CHINESE]

00:19:51.030 --> 00:19:56.660
Yeah, this one is like a forest.

00:19:56.660 --> 00:19:59.570
So Vulkan [INAUDIBLE]
is a big subject.

00:19:59.570 --> 00:20:04.140
When you focus on something,
that one is kind of a leaf.

00:20:04.140 --> 00:20:06.465
I might have said it wrong.

00:20:10.650 --> 00:20:15.724
So we're talking about the
extensibility of Vulkan.

00:20:15.724 --> 00:20:18.510
Vulkan is designed in layers.

00:20:18.510 --> 00:20:22.750
So the layers is
loaded by loader,

00:20:22.750 --> 00:20:24.790
and the interface
is well-defined,

00:20:24.790 --> 00:20:29.460
across for all of
the supported OS's.

00:20:29.460 --> 00:20:33.090
So [? it's our ?] OS, just
implement those entries

00:20:33.090 --> 00:20:35.640
[? full order. ?] And
you design your layers,

00:20:35.640 --> 00:20:39.240
then it will be
automatically loaded.

00:20:39.240 --> 00:20:42.660
[INAUDIBLE] once you deep drill,
[INAUDIBLE] it'll be uploaded.

00:20:42.660 --> 00:20:45.450
What they're good for the
layers and [? continuing. ?]

00:20:45.450 --> 00:20:50.080
So if the layers give you a
good [? starting space. ?]

00:20:50.080 --> 00:20:54.430
If you want to
extend, there's some

00:20:54.430 --> 00:20:56.690
of the value added
from the Vulkan,

00:20:56.690 --> 00:20:58.810
then this is the
interface you use.

00:20:58.810 --> 00:21:03.235
And also, for
hardware vendors, you

00:21:03.235 --> 00:21:05.600
have your new hardware features.

00:21:05.600 --> 00:21:08.370
It's not available
in standard yet,

00:21:08.370 --> 00:21:10.470
layers and extensions
are your friend.

00:21:14.250 --> 00:21:18.100
Off subject a little
bit, I think following

00:21:18.100 --> 00:21:20.095
a standard is a good thing.

00:21:20.095 --> 00:21:23.870
I think a better thing is
[? ahead of ?] standard.

00:21:23.870 --> 00:21:29.820
The industry is standard
serving the industry,

00:21:29.820 --> 00:21:32.550
not industry creates a standard.

00:21:32.550 --> 00:21:35.910
Whatever the standard
is, the industry

00:21:35.910 --> 00:21:39.074
has already moved ahead of that.

00:21:39.074 --> 00:21:41.490
So if you want to do something,
hopefully, you will really

00:21:41.490 --> 00:21:43.880
do something that
[? eventually ?] is ahead

00:21:43.880 --> 00:21:46.080
of standard, then
your features move

00:21:46.080 --> 00:21:51.610
into the standard, not only for
technical stuff, [INAUDIBLE]

00:21:51.610 --> 00:21:55.870
also for the first
time getting to market

00:21:55.870 --> 00:21:58.163
for some kind of
thing like that.

00:21:58.163 --> 00:22:01.775
I know it's off from
today's subject.

00:22:04.720 --> 00:22:13.030
So with those layers, so you can
extend the Vulkan at any time.

00:22:13.030 --> 00:22:16.150
When I give you an
example for this

00:22:16.150 --> 00:22:20.770
is looking at one of the major
uses for layers right now

00:22:20.770 --> 00:22:22.290
is [INAUDIBLE].

00:22:26.500 --> 00:22:30.463
So where we talk about,
in OpenGL applications,

00:22:30.463 --> 00:22:34.460
there's a lot of validated
code in your parameter

00:22:34.460 --> 00:22:35.980
if correct or not.

00:22:35.980 --> 00:22:37.270
If not, then do something.

00:22:37.270 --> 00:22:39.715
If we're correct, then
you still check, right?

00:22:39.715 --> 00:22:41.670
Because that cycle is wasted.

00:22:41.670 --> 00:22:43.990
If your [? picture ?]
is well behaved,

00:22:43.990 --> 00:22:46.260
those cycles are wasted.

00:22:46.260 --> 00:22:49.470
Now the Vulkan model is this.

00:22:49.470 --> 00:22:52.190
You can take out this.

00:22:52.190 --> 00:22:54.457
You're going to take out
those validation things out

00:22:54.457 --> 00:22:56.615
of this Vulkan driver.

00:22:56.615 --> 00:22:58.386
It's not part of that anymore.

00:22:58.386 --> 00:23:01.830
You take it out, then
put them into layers.

00:23:01.830 --> 00:23:04.440
Later on, we have a
big section for that.

00:23:04.440 --> 00:23:05.770
We have seven layers right now.

00:23:05.770 --> 00:23:08.690
So we have all
validations in layers,

00:23:08.690 --> 00:23:10.840
and you plug it in, easy.

00:23:10.840 --> 00:23:12.435
Plug it in and show that.

00:23:12.435 --> 00:23:14.350
Then you write application.

00:23:14.350 --> 00:23:17.780
Anything like parameters
wrong or something set

00:23:17.780 --> 00:23:19.660
is [? draw image ?] not
in a correct format,

00:23:19.660 --> 00:23:24.651
then those kind of things get
caused by a broken validation

00:23:24.651 --> 00:23:26.140
in layers [INAUDIBLE].

00:23:26.140 --> 00:23:30.668
So after your application
gets [INAUDIBLE] well debugged

00:23:30.668 --> 00:23:33.990
and well validated, you
are ready to deploy,

00:23:33.990 --> 00:23:35.950
this is the model you go.

00:23:35.950 --> 00:23:39.980
You just don't load
the validation layers.

00:23:39.980 --> 00:23:44.760
All the cycles you
used to waste over here

00:23:44.760 --> 00:23:47.870
are used for your application.

00:23:47.870 --> 00:23:51.820
So that's why I said you can
get every cycle of your GPU

00:23:51.820 --> 00:23:53.236
to your application.

00:23:56.190 --> 00:23:58.007
Here we are, CPU set is simple.

00:24:03.980 --> 00:24:07.190
[INAUDIBLE]

00:24:07.190 --> 00:24:10.670
So core loader interface,
we talked about that.

00:24:10.670 --> 00:24:14.310
[INAUDIBLE], one interface
is used across the board.

00:24:14.310 --> 00:24:18.020
Loader interface is
easier than this.

00:24:18.020 --> 00:24:24.716
It's well-defined, and for all
the OS, it's the same thing.

00:24:24.716 --> 00:24:28.040
But for Android, the loader--

00:24:28.040 --> 00:24:31.790
all of these loaders
are kind of a part of OS

00:24:31.790 --> 00:24:33.971
for Android is the OS component.

00:24:39.630 --> 00:24:43.030
See Vulkan is an open standard.

00:24:43.030 --> 00:24:47.380
So that is another
advantage here for Vulkan.

00:24:47.380 --> 00:24:50.500
Before [INAUDIBLE]
it's open source.

00:24:50.500 --> 00:24:53.356
It's [? for ?]
all the OS to use.

00:24:53.356 --> 00:24:56.100
And it provides
for specifications

00:24:56.100 --> 00:24:59.010
and [? confirm this ?] test.

00:24:59.010 --> 00:25:05.490
Specification is for
application developers

00:25:05.490 --> 00:25:08.610
and also for the GPU developers.

00:25:08.610 --> 00:25:11.305
Because from here it's spec.

00:25:11.305 --> 00:25:13.610
And your developers are
going to use the spec

00:25:13.610 --> 00:25:15.010
to develop applications.

00:25:15.010 --> 00:25:18.590
For [INAUDIBLE] Qualcomm
and [INAUDIBLE],

00:25:18.590 --> 00:25:22.980
they also need to know what
the expectation is to implement

00:25:22.980 --> 00:25:25.070
all the required features.

00:25:25.070 --> 00:25:29.160
They normally do more than
just standard requests.

00:25:29.160 --> 00:25:36.190
So the [INAUDIBLE] test is
meant to be used for the GPU

00:25:36.190 --> 00:25:41.010
[? writers. ?] So once they
have the GPU on the system,

00:25:41.010 --> 00:25:44.840
then they need to parse
the [? performance ?] test.

00:25:44.840 --> 00:25:47.670
The [? component ?] test is
designed to offer the committee

00:25:47.670 --> 00:25:50.916
and the media driving
for component test is

00:25:50.916 --> 00:25:52.015
[? from Google. ?]

00:25:52.015 --> 00:25:57.330
And there's also tools, a
set of tools available like

00:25:57.330 --> 00:25:59.200
[INAUDIBLE].

00:25:59.200 --> 00:26:02.485
All these tools are available.

00:26:02.485 --> 00:26:06.090
They are all GitHub.

00:26:06.090 --> 00:26:08.230
And last but not least
is the validation errors.

00:26:08.230 --> 00:26:11.210
Validation errors are
designed by [INAUDIBLE].

00:26:11.210 --> 00:26:13.615
It's developed by [INAUDIBLE].

00:26:13.615 --> 00:26:17.110
And [INAUDIBLE]
is part of Google.

00:26:17.110 --> 00:26:19.650
So it's part of
Google's support.

00:26:19.650 --> 00:26:23.190
So we're going to talk about
validation layers later on.

00:26:23.190 --> 00:26:26.370
And the [INAUDIBLE]
support with [INAUDIBLE].

00:26:26.370 --> 00:26:36.290
And the macOS [INAUDIBLE]
media supported,

00:26:36.290 --> 00:26:38.320
use the plugin wrapper.

00:26:38.320 --> 00:26:40.730
If you go to YouTube,
you'll find it.

00:26:45.340 --> 00:26:50.290
OK, with all these
good things, how do we

00:26:50.290 --> 00:26:55.800
start with Vulkan
development on Android?

00:26:55.800 --> 00:27:01.656
So there's a video, this
one, I actually skipped it.

00:27:04.990 --> 00:27:08.030
So we can save some
time for later.

00:27:08.030 --> 00:27:12.480
So this is [? when I recorded ?]
this one to Android.

00:27:12.480 --> 00:27:13.990
I'm going to skip this.

00:27:13.990 --> 00:27:20.270
So to do Vulkan,
we need a device.

00:27:20.270 --> 00:27:23.320
So emulator is not
supported in Vulkan yet.

00:27:23.320 --> 00:27:26.835
So we need a device to test
out the Vulkan applications.

00:27:26.835 --> 00:27:32.580
So when Vulkan was released
in May, this set of devices

00:27:32.580 --> 00:27:35.030
was supported on Android.

00:27:35.030 --> 00:27:37.350
Now there are more.

00:27:37.350 --> 00:27:40.180
And you need an OS,
of course, right?

00:27:40.180 --> 00:27:46.280
Android N is the first OS
baked in for Vulkan support.

00:27:46.280 --> 00:27:48.810
And you need another
set of tools.

00:27:48.810 --> 00:27:57.760
Android Studio is easiest
for the development.

00:27:57.760 --> 00:28:03.120
Oh yeah, how many of you are
from the game engine companies?

00:28:03.120 --> 00:28:04.455
Writing game engines?

00:28:07.302 --> 00:28:08.760
So normally, game
engine companies,

00:28:08.760 --> 00:28:10.360
they have their own IDEs.

00:28:15.060 --> 00:28:17.820
Android Studio, download
latest Android Studio.

00:28:17.820 --> 00:28:22.690
And Android Studio will download
SDK for you, which that is easy

00:28:22.690 --> 00:28:25.690
[INAUDIBLE].

00:28:25.690 --> 00:28:35.503
SDK with the OS, then all the
OS Android all have these.

00:28:35.503 --> 00:28:38.800
The library all
built in already.

00:28:38.800 --> 00:28:44.650
And once you go over to
your old application,

00:28:44.650 --> 00:28:48.350
then you will need header
files and the library,

00:28:48.350 --> 00:28:50.696
the [? lib stop. ?]
It's not a full library.

00:28:50.696 --> 00:28:52.480
This is dynamically linked.

00:28:52.480 --> 00:28:55.810
So library stuff
is all inside NDK.

00:28:55.810 --> 00:29:00.615
From Release 12 and up.

00:29:03.590 --> 00:29:07.730
Then Vulkan is pretty big API.

00:29:07.730 --> 00:29:10.790
So some samples already baked.

00:29:10.790 --> 00:29:12.465
You can look at those samples.

00:29:12.465 --> 00:29:17.690
And it is helpful for [? to ?]
get [INAUDIBLE] started.

00:29:17.690 --> 00:29:22.640
This is a set of
one file samples.

00:29:22.640 --> 00:29:25.800
Each sample just
includes one file.

00:29:25.800 --> 00:29:28.620
And in the file is
tried to illustrate

00:29:28.620 --> 00:29:30.600
how to use that one API.

00:29:30.600 --> 00:29:33.730
Each one is one [INAUDIBLE].

00:29:33.730 --> 00:29:35.410
And this is how you generate.

00:29:35.410 --> 00:29:39.890
You see [? make ?] generate
the Android studio project

00:29:39.890 --> 00:29:41.420
for those samples.

00:29:41.420 --> 00:29:47.350
And right now, if you get the
source code from the repo,

00:29:47.350 --> 00:29:50.480
you don't have to do this.

00:29:50.480 --> 00:29:54.460
Everything is checked
in from this repo.

00:29:54.460 --> 00:29:57.920
So this one, you
don't have to do it.

00:29:57.920 --> 00:30:01.380
And then you can import
the generated samples

00:30:01.380 --> 00:30:03.460
into Android Studio [INAUDIBLE].

00:30:08.120 --> 00:30:15.096
There's been a [INAUDIBLE]
for the samples of the--

00:30:15.096 --> 00:30:18.620
basic samples you see from
[INAUDIBLE] and [INAUDIBLE]

00:30:18.620 --> 00:30:21.050
device, and all
the major APIs you

00:30:21.050 --> 00:30:24.100
needed to use to create
one application, one

00:30:24.100 --> 00:30:25.700
simple application [INAUDIBLE].

00:30:25.700 --> 00:30:31.980
So to draw a [? queue, ?] in
the graphics rendering stacks,

00:30:31.980 --> 00:30:33.670
normally people
say, how do I draw

00:30:33.670 --> 00:30:36.029
my first triangle
this is the way

00:30:36.029 --> 00:30:39.340
to draw your first triangle.

00:30:39.340 --> 00:30:43.658
[INAUDIBLE] triangles.

00:30:43.658 --> 00:30:46.300
So then you have a next
[? range ?] that add

00:30:46.300 --> 00:30:50.185
in the textures, get a
texture [? queue. ?] So

00:30:50.185 --> 00:30:53.890
the recommendation
is [INAUDIBLE].

00:30:57.650 --> 00:30:59.950
And to see what's
going on there,

00:30:59.950 --> 00:31:01.812
then you get some feeling of it.

00:31:01.812 --> 00:31:03.080
It's like [INAUDIBLE].

00:31:03.080 --> 00:31:04.760
I don't think you
have to follow that.

00:31:04.760 --> 00:31:07.640
Geniuses never
follow other people.

00:31:07.640 --> 00:31:09.610
That's why you guys
are called geniuses.

00:31:14.620 --> 00:31:21.570
So with that, we get
into the next one

00:31:21.570 --> 00:31:25.550
is tips for what do
we learn from partners

00:31:25.550 --> 00:31:30.680
and from ourselves when
we [INAUDIBLE] Vulkan.

00:31:30.680 --> 00:31:35.060
So mostly from partners
working with us.

00:31:35.060 --> 00:31:38.930
So from these, there are a
lot of materials from here.

00:31:38.930 --> 00:31:42.510
So I'm going to
skip some of this.

00:31:42.510 --> 00:31:45.810
I will pick up three from them.

00:31:45.810 --> 00:31:49.550
The three I think
is very pressing.

00:31:49.550 --> 00:31:53.505
These three would be
what I feel is important.

00:31:58.060 --> 00:32:02.260
So the first one, it doesn't
have a lot of materials.

00:32:02.260 --> 00:32:04.030
First one is the
validation layers.

00:32:04.030 --> 00:32:06.060
You've got to use that one.

00:32:06.060 --> 00:32:11.257
You've used that one
as he must use too.

00:32:11.257 --> 00:32:15.176
So what the validation
layers does [INAUDIBLE]

00:32:15.176 --> 00:32:19.870
is check all the possible
errors from your application.

00:32:19.870 --> 00:32:24.705
So that is going to save
you a lot of trouble.

00:32:24.705 --> 00:32:27.607
Vulkan, by the way, if
anything set is wrong,

00:32:27.607 --> 00:32:28.940
it's going to crash your system.

00:32:32.820 --> 00:32:35.610
We said before, it is explicit.

00:32:35.610 --> 00:32:38.480
Anything you use, you set it.

00:32:38.480 --> 00:32:41.110
If you don't set it, it's
going to take whatever garbage

00:32:41.110 --> 00:32:41.831
in there, right?

00:32:41.831 --> 00:32:43.830
And you can imagine that
it's going [INAUDIBLE].

00:32:43.830 --> 00:32:48.270
This one goes down [INAUDIBLE]
to the GPU, to the [INAUDIBLE].

00:32:48.270 --> 00:32:50.650
It's a very low
level. iOS [? used ?]

00:32:50.650 --> 00:32:55.130
their other team over here,
they do the presentations.

00:32:55.130 --> 00:33:00.740
They have a large [INAUDIBLE]
for the prompt for the Android

00:33:00.740 --> 00:33:02.250
[INAUDIBLE].

00:33:02.250 --> 00:33:04.720
There are a lot of
prompts to choose from.

00:33:04.720 --> 00:33:06.630
Vulkan is going a different way.

00:33:06.630 --> 00:33:11.170
They give you everything
you can possibly have.

00:33:11.170 --> 00:33:14.080
The choice is all
yours from yourself.

00:33:18.285 --> 00:33:20.430
Validation errors is
going to the rescue

00:33:20.430 --> 00:33:23.790
for a lot of troubles.

00:33:23.790 --> 00:33:26.480
So we talked about it already.

00:33:26.480 --> 00:33:28.590
The detector reports
errors and also

00:33:28.590 --> 00:33:31.020
points out performance issues.

00:33:31.020 --> 00:33:34.770
So, so far, the
[INAUDIBLE] is important.

00:33:34.770 --> 00:33:36.690
[INAUDIBLE]

00:33:36.690 --> 00:33:39.500
So the partners working
with us, they all

00:33:39.500 --> 00:33:43.496
have good feedback for the
Vulkan validation errors.

00:33:43.496 --> 00:33:44.360
It's like a must.

00:33:47.750 --> 00:33:51.780
OK validation errors is
important [INAUDIBLE].

00:33:51.780 --> 00:33:57.195
So there are three
places to get it.

00:33:57.195 --> 00:33:58.570
That slide over
here, by the way,

00:33:58.570 --> 00:34:02.480
is a little bit different
from slides [INAUDIBLE]

00:34:02.480 --> 00:34:04.960
from the conference, I
modified portion a little bit.

00:34:04.960 --> 00:34:09.489
So the industry one for
you to use is from NDK.

00:34:09.489 --> 00:34:13.609
The validation layers is
packed inside NDK from NDK 3.0

00:34:13.609 --> 00:34:15.250
and above.

00:34:15.250 --> 00:34:18.389
Later on, we can open
and try to have a look.

00:34:18.389 --> 00:34:20.739
So it's in that directory.

00:34:20.739 --> 00:34:25.330
We have preview layers, or
[INAUDIBLE] directly usage.

00:34:25.330 --> 00:34:30.050
Or if you want to have
some more hands on it,

00:34:30.050 --> 00:34:34.030
later on we can show
you [INAUDIBLE].

00:34:34.030 --> 00:34:37.170
So as far as I know,
it's the [INAUDIBLE].

00:34:37.170 --> 00:34:40.444
[? Layers ?] together
with your application

00:34:40.444 --> 00:34:41.860
with the [INAUDIBLE]
at same time,

00:34:41.860 --> 00:34:45.542
so the symbols would set
out correctly for your IDE,

00:34:45.542 --> 00:34:47.980
so you can trace the code
from your application

00:34:47.980 --> 00:34:50.510
into the validating layers.

00:34:50.510 --> 00:34:53.455
Now this one over here is the--

00:34:53.455 --> 00:35:01.660
Khronos group is the real
source for all the validation

00:35:01.660 --> 00:35:03.720
layers on the GitHub.

00:35:03.720 --> 00:35:06.630
So you see any GitHub
copy we get, normally when

00:35:06.630 --> 00:35:08.790
NDK released, then,
at release time,

00:35:08.790 --> 00:35:12.640
we get a selection
[INAUDIBLE] for NDK to upload.

00:35:12.640 --> 00:35:15.560
And there are other providers
in these original [? four ?]

00:35:15.560 --> 00:35:19.450
is Lunar G samples,
and those are all

00:35:19.450 --> 00:35:21.832
coming from the Khronos place.

00:35:26.440 --> 00:35:30.080
How do you build
validation layers?

00:35:30.080 --> 00:35:34.550
So validation layers is
built with NDK builder.

00:35:34.550 --> 00:35:36.980
So your NDK builder
is always there.

00:35:36.980 --> 00:35:41.510
And in R12, you can use
[? a grade or ?] experimental.

00:35:44.090 --> 00:35:50.210
How many of you guys hear about
[? grade or ?] experimental?

00:35:50.210 --> 00:35:50.750
OK.

00:35:50.750 --> 00:35:53.410
So I will skip over that part.

00:35:53.410 --> 00:36:00.060
So in NDK 13,
[INAUDIBLE] took out

00:36:00.060 --> 00:36:03.670
[? the grade or ?]
experimental portion of it.

00:36:03.670 --> 00:36:07.690
So that one brings Android
Studio 2.2 release,

00:36:07.690 --> 00:36:11.030
it supports NDK build natively.

00:36:11.030 --> 00:36:17.380
That's disabled without
a [? password. ?]

00:36:17.380 --> 00:36:22.610
Once you build, you will need
to [INAUDIBLE] into the NDKs

00:36:22.610 --> 00:36:24.620
together with your
application so they can

00:36:24.620 --> 00:36:27.550
be loaded during the runtime.

00:36:27.550 --> 00:36:31.850
And that is
[INAUDIBLE] load from.

00:36:31.850 --> 00:36:34.610
[INAUDIBLE] how do we
enable validation layers

00:36:34.610 --> 00:36:38.580
in your application that is
on your application source

00:36:38.580 --> 00:36:40.180
code-wise.

00:36:40.180 --> 00:36:46.060
You have this thing
available [INAUDIBLE] target.

00:36:46.060 --> 00:36:47.560
Then you're inside
your application.

00:36:47.560 --> 00:36:49.700
How do you hook up to it?

00:36:49.700 --> 00:36:52.840
How do you get it to track?

00:36:52.840 --> 00:36:56.660
To track your application,
this is the way.

00:36:56.660 --> 00:37:01.370
For all the layers, put them
into these instance layers.

00:37:01.370 --> 00:37:07.070
When you create instance, you'll
give him that layer array name.

00:37:07.070 --> 00:37:09.320
Name is the [? only one ?]
that it will use.

00:37:09.320 --> 00:37:11.840
Validation layers and the
extensions all have a name.

00:37:11.840 --> 00:37:13.560
The name is a string.

00:37:13.560 --> 00:37:20.870
It's 8-bit characters
not UTF or 16.

00:37:20.870 --> 00:37:23.760
So you give him the layers
and the total count of layers.

00:37:23.760 --> 00:37:27.688
And then you'll go ahead
and create an instance.

00:37:27.688 --> 00:37:30.892
The layers will
trigger for the loader

00:37:30.892 --> 00:37:33.542
to load if you try to
create an instance.

00:37:39.670 --> 00:37:41.080
You have that loaded.

00:37:41.080 --> 00:37:43.272
How do you use it?

00:37:43.272 --> 00:37:44.980
Because you loaded it.

00:37:44.980 --> 00:37:46.956
Yeah, then that's good.

00:37:46.956 --> 00:37:49.730
Then when the validation
layers find some errors,

00:37:49.730 --> 00:37:53.410
how does one bring to
interact [INAUDIBLE]?

00:37:53.410 --> 00:37:54.460
This is the way.

00:37:54.460 --> 00:37:58.705
You need to register for
some mechanism over here

00:37:58.705 --> 00:38:02.430
that this, well-defined,
is the callback.

00:38:02.430 --> 00:38:07.440
You implement a callback
function defined like this.

00:38:07.440 --> 00:38:12.040
And you also need to register
to the Vulkan [INAUDIBLE].

00:38:12.040 --> 00:38:14.660
Yes, I have a callback.

00:38:14.660 --> 00:38:16.090
I have one registered.

00:38:16.090 --> 00:38:19.385
Whenever there is any
error, call my function.

00:38:19.385 --> 00:38:20.760
So we're going to
open the source

00:38:20.760 --> 00:38:23.340
code to have a look at it.

00:38:28.720 --> 00:38:31.870
Beyond the validations,
so this portion here

00:38:31.870 --> 00:38:35.300
works as a testing,
[INAUDIBLE] Vulkan

00:38:35.300 --> 00:38:38.670
is the cross of the platforms.

00:38:38.670 --> 00:38:44.906
Now desktop, most
new GPUs, it's got

00:38:44.906 --> 00:38:54.550
to be from the [INAUDIBLE] half
from the middle of last year.

00:38:54.550 --> 00:38:59.470
So those new GPUs, it's going
to support Vulkan on desktop.

00:38:59.470 --> 00:39:01.790
The other thing is
that you go to GPU

00:39:01.790 --> 00:39:04.870
and there's a place to check
[? out, ?] they will have.

00:39:04.870 --> 00:39:09.100
If they support Vulkan, they
will show you that [INAUDIBLE].

00:39:09.100 --> 00:39:16.010
And you can use those platforms
to validate your Vulkan code.

00:39:16.010 --> 00:39:19.030
So if you feel mobile
device [? management ?]

00:39:19.030 --> 00:39:21.660
is a little bit too
hard, you know, too

00:39:21.660 --> 00:39:25.520
time consuming, you can do
that, use that platform,

00:39:25.520 --> 00:39:28.280
then you use some
other IDEs to validate

00:39:28.280 --> 00:39:31.400
the majority of your code.

00:39:31.400 --> 00:39:33.655
Then [INAUDIBLE] the portion
that is Android-specific

00:39:33.655 --> 00:39:36.980
can be tested later on.

00:39:39.920 --> 00:39:44.980
The second element here
is is the kind of caution.

00:39:44.980 --> 00:39:47.105
Vulkan is still new.

00:39:47.105 --> 00:39:53.380
For a standard [INAUDIBLE]
to mature takes some time.

00:39:53.380 --> 00:39:56.350
So the writers also-- a
new standard coming out,

00:39:56.350 --> 00:39:59.566
all the people try to
understand and gradually get it

00:39:59.566 --> 00:40:01.350
to the same understanding.

00:40:01.350 --> 00:40:04.650
So this is new to everyone.

00:40:04.650 --> 00:40:07.075
So when it's new to
everybody [INAUDIBLE],

00:40:07.075 --> 00:40:09.720
there can be different
interpretations

00:40:09.720 --> 00:40:11.520
for this standard.

00:40:11.520 --> 00:40:14.410
So error can happen.

00:40:14.410 --> 00:40:18.120
So when you validate
the [INAUDIBLE] errors,

00:40:18.120 --> 00:40:22.540
we saw the [INAUDIBLE] document.

00:40:22.540 --> 00:40:27.670
Yeah, so be prepared and,
if you see some errors,

00:40:27.670 --> 00:40:30.028
report to the GPU owners
and try to find out

00:40:30.028 --> 00:40:37.910
what went wrong for it to,
so get yourself [? code. ?]

00:40:37.910 --> 00:40:47.010
Distribute Vulkan, [INAUDIBLE]
so Vulkan, [INAUDIBLE].

00:40:53.440 --> 00:41:00.710
Android applications,
we have one APK

00:41:00.710 --> 00:41:06.681
targeted for all the
architecture like [INAUDIBLE]

00:41:06.681 --> 00:41:08.690
or MIPS, if you want.

00:41:08.690 --> 00:41:12.600
All these things can
be in one package.

00:41:12.600 --> 00:41:16.531
For that package can get
too big when you get people

00:41:16.531 --> 00:41:17.655
to download to their phone.

00:41:17.655 --> 00:41:20.860
It might be just user error
for this one architecture.

00:41:20.860 --> 00:41:26.650
So libraries not used
it's [INAUDIBLE] that

00:41:26.650 --> 00:41:29.340
is solution for that.

00:41:29.340 --> 00:41:35.580
You split those APKs into
different, multiple APKs.

00:41:35.580 --> 00:41:38.160
So each one addresses
each architecture,

00:41:38.160 --> 00:41:41.350
though there are
some other criteria.

00:41:41.350 --> 00:41:44.240
If you do this in
Vulkan is one of it.

00:41:44.240 --> 00:41:48.680
You can say that my APKs,
my application for this APK

00:41:48.680 --> 00:41:50.980
version, I need Vulkan.

00:41:50.980 --> 00:41:57.000
Then when user downloads
from a place [INAUDIBLE],

00:41:57.000 --> 00:42:00.220
if that platform
doesn't support Vulkan,

00:42:00.220 --> 00:42:03.274
it will not download that one
but download the other one.

00:42:06.270 --> 00:42:11.820
In the future, there might
be another fine granularity

00:42:11.820 --> 00:42:15.072
for this, it's which
version of Vulkan

00:42:15.072 --> 00:42:17.268
is needed for your application.

00:42:17.268 --> 00:42:19.124
A little bit in the future.

00:42:19.124 --> 00:42:21.810
I'm not supposed to
talk about the future.

00:42:21.810 --> 00:42:24.315
OK, just a little
bit [INAUDIBLE].

00:42:27.410 --> 00:42:37.830
On Android, [INAUDIBLE], so if
you [? don't ?] want to see it,

00:42:37.830 --> 00:42:42.977
you can ask Android
compositor to do the rotation.

00:42:42.977 --> 00:42:44.560
That will end up
[? bleeding extra. ?]

00:42:44.560 --> 00:42:46.360
So you need extra [INAUDIBLE].

00:42:46.360 --> 00:42:48.030
Oh, OK.

00:42:48.030 --> 00:42:50.800
So we need to quickly
go through this.

00:42:50.800 --> 00:42:55.500
With the Vulkan [INAUDIBLE]
with one [INAUDIBLE]

00:42:55.500 --> 00:42:57.846
you're saving a lot of stuff.

00:43:07.130 --> 00:43:09.794
OK, so major thing
with this I want

00:43:09.794 --> 00:43:12.100
to see talk about this one.

00:43:12.100 --> 00:43:17.240
Multi-pass is another feature,
but GPU rendering on mobile

00:43:17.240 --> 00:43:17.990
is all tile-based.

00:43:17.990 --> 00:43:19.930
So what is the tile?

00:43:19.930 --> 00:43:23.260
Direct rendering, I will leave
you guys to find out later.

00:43:26.060 --> 00:43:31.020
So what this is trying to tell
you here is with multi-pass,

00:43:31.020 --> 00:43:33.330
is you have a
multi-pass application.

00:43:33.330 --> 00:43:35.660
You build single
rendering parts,

00:43:35.660 --> 00:43:37.950
and put all the paths
into a submit path.

00:43:37.950 --> 00:43:40.050
So you [? give the ?]
GPU with one submit,

00:43:40.050 --> 00:43:45.550
and it will do all that drawing
for that build at one time.

00:43:45.550 --> 00:43:46.810
So in that case, it's good.

00:43:46.810 --> 00:43:50.775
It doesn't have to bring
memory back and forth any more,

00:43:50.775 --> 00:43:54.270
so it will save you a
lot of waiting time.

00:43:54.270 --> 00:43:57.092
So that brings you
processing power.

00:43:59.950 --> 00:44:03.500
So benefits, those things.

00:44:03.500 --> 00:44:05.750
This is another [? matrix use ?]
of memory management.

00:44:05.750 --> 00:44:10.430
Vulkan assumes the application
will have your own video memory

00:44:10.430 --> 00:44:13.590
manager for all memories.

00:44:13.590 --> 00:44:16.330
And for host memory,
it's kind of recommended.

00:44:16.330 --> 00:44:20.303
It's recommended but
for video memory,

00:44:20.303 --> 00:44:21.960
is [INAUDIBLE] [? erase. ?]

00:44:21.960 --> 00:44:24.200
So you need your
own memory manager.

00:44:24.200 --> 00:44:28.925
Mandatory for your
application, what memory

00:44:28.925 --> 00:44:32.420
size you use more often,
and what type of memory

00:44:32.420 --> 00:44:34.204
you used more.

00:44:34.204 --> 00:44:37.880
So you can do this by
yourselves to maximize the usage

00:44:37.880 --> 00:44:40.128
within the memory limit.

00:44:40.128 --> 00:44:42.940
OK.

00:44:42.940 --> 00:44:45.820
So some tips are [INAUDIBLE]
allocation memories

00:44:45.820 --> 00:44:51.284
and what are the tips for
effective memory management.

00:44:51.284 --> 00:44:52.950
OK multi-threading
we talked about that.

00:44:52.950 --> 00:44:55.750
It is important, you must do it.

00:44:55.750 --> 00:45:00.230
So that is a major feature
for Vulkan [INAUDIBLE].

00:45:00.230 --> 00:45:04.060
With multithreading
and [INAUDIBLE].

00:45:04.060 --> 00:45:09.130
I think that's all we
want to cover for this.

00:45:09.130 --> 00:45:14.070
Now we can take a couple
of minutes right now

00:45:14.070 --> 00:45:17.430
and show some of the code.

00:45:17.430 --> 00:45:20.570
We are in the last session here.

00:45:20.570 --> 00:45:25.584
If you guys need to leave,
then feel free to leave.

00:45:25.584 --> 00:45:28.190
Nobody will kick us out.

00:45:28.190 --> 00:45:33.940
So I'd like to show some of
the things, in Android studio,

00:45:33.940 --> 00:45:35.914
how the thing is
done in the samples.

00:45:35.914 --> 00:45:37.270
Yeah, feel free to leave.

00:45:47.230 --> 00:45:49.974
[SIDE CONVERSATION]

