WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.360
[PEPPY MUSIC]

00:00:08.650 --> 00:00:10.420
MARY XIA: Good morning!

00:00:10.420 --> 00:00:11.440
Hey.

00:00:11.440 --> 00:00:12.550
My name is Mary.

00:00:12.550 --> 00:00:14.860
I'm a software engineer
who works with Flutter.

00:00:14.860 --> 00:00:16.110
WILL LARCHE: And And I'm Will.

00:00:16.110 --> 00:00:18.130
I'm a software engineer
at Material Design.

00:00:18.130 --> 00:00:19.600
MARY XIA: Today
we'll show you how

00:00:19.600 --> 00:00:23.680
building an app with Flutter
and Material is expressive,

00:00:23.680 --> 00:00:27.820
enhanced, and a delightful
developer experience.

00:00:27.820 --> 00:00:30.400
WILL LARCHE: And we'll do
it for both Android and iOS,

00:00:30.400 --> 00:00:33.370
but build it once using Flutter.

00:00:33.370 --> 00:00:37.420
MARY XIA: Flutter is a way
to build native mobile apps.

00:00:37.420 --> 00:00:39.970
You can build apps that are
expressive and flexible,

00:00:39.970 --> 00:00:43.960
create high-quality experiences,
and iterate quickly.

00:00:43.960 --> 00:00:45.670
You can use Flutter today.

00:00:45.670 --> 00:00:48.760
It's already being used by
developers and organizations

00:00:48.760 --> 00:00:50.740
around the world.

00:00:50.740 --> 00:00:54.790
Flutter comes pre-built with
a large library of widgets,

00:00:54.790 --> 00:00:59.620
such as containers, list views
that are efficient, scrolling,

00:00:59.620 --> 00:01:03.775
gestures, and more.

00:01:03.775 --> 00:01:06.880
WILL LARCHE: Now, Material
Design is an adaptable design

00:01:06.880 --> 00:01:10.600
system, backed by open source
code, that helps designers

00:01:10.600 --> 00:01:15.340
and developers make beautiful,
usable products faster.

00:01:15.340 --> 00:01:18.910
It's a visual design system used
in millions of apps and sites

00:01:18.910 --> 00:01:20.260
all around the world.

00:01:20.260 --> 00:01:24.250
What's new this year
is Material theming.

00:01:24.250 --> 00:01:27.280
Material theming helps you
systematically apply brand

00:01:27.280 --> 00:01:29.350
throughout your designs.

00:01:29.350 --> 00:01:31.810
As you can see, Material
is more flexible than ever.

00:01:31.810 --> 00:01:35.650
The shape, color, typography,
the animation curves,

00:01:35.650 --> 00:01:40.000
are all customizable
to match your brand.

00:01:40.000 --> 00:01:43.750
You could even choose color
palettes from our online color

00:01:43.750 --> 00:01:48.700
generator that are generated
for you, and typography themes.

00:01:48.700 --> 00:01:51.730
You can even change
the shapes in your app

00:01:51.730 --> 00:01:53.380
to have a theme of their own.

00:01:53.380 --> 00:01:55.699
MARY XIA: Will, I love
how this is taking shape.

00:01:55.699 --> 00:01:56.740
WILL LARCHE: Right, yeah.

00:02:00.040 --> 00:02:02.560
And I'm excited
to announce today

00:02:02.560 --> 00:02:07.162
that Flutter is a first-class
platform in Material Design.

00:02:07.162 --> 00:02:10.360
[APPLAUSE]

00:02:10.360 --> 00:02:13.810
From today forward, you'll find
documentation for Android, iOS,

00:02:13.810 --> 00:02:17.050
web, and Flutter, throughout
Material Components,

00:02:17.050 --> 00:02:20.722
the Material Tools Suite,
and the Material Guidelines.

00:02:20.722 --> 00:02:22.930
MARY XIA: So it sounds like
Material and Flutter have

00:02:22.930 --> 00:02:24.340
really embraced each other.

00:02:24.340 --> 00:02:26.230
What's it like building
an app with them?

00:02:26.230 --> 00:02:28.860
WILL LARCHE: I'm
glad you asked, Mary.

00:02:28.860 --> 00:02:30.850
Let's see how they
work together.

00:02:30.850 --> 00:02:32.440
And a reminder, you
can do everything

00:02:32.440 --> 00:02:36.810
that we're about to
do at home, today.

00:02:36.810 --> 00:02:39.820
Behold Shrine, our retail app.

00:02:39.820 --> 00:02:42.180
I love the clothes, I
love the home goods,

00:02:42.180 --> 00:02:46.210
but unfortunately, the UI
is disturbingly last season.

00:02:46.210 --> 00:02:49.237
MARY XIA: Who else has
seen an app like this?

00:02:49.237 --> 00:02:51.070
WILL LARCHE: Yes, I
think we all have, Mary.

00:02:51.070 --> 00:02:52.319
WILL LARCHE: Yep, Google Docs.

00:02:52.319 --> 00:02:54.730
They look very similar.

00:02:54.730 --> 00:02:56.920
When Material first
came out, many apps

00:02:56.920 --> 00:02:59.482
faithfully followed the
Material guidelines.

00:02:59.482 --> 00:03:00.940
And so they ended
up with apps that

00:03:00.940 --> 00:03:02.560
looked identical to each other.

00:03:02.560 --> 00:03:04.600
Or worse, they looked
like Google's brand,

00:03:04.600 --> 00:03:06.250
rather than their own.

00:03:06.250 --> 00:03:09.370
We want your apps to
look like your brand.

00:03:09.370 --> 00:03:11.930
WILL LARCHE: Material
theming helps with that.

00:03:11.930 --> 00:03:16.242
It applies consistent brand
elements throughout your UI.

00:03:16.242 --> 00:03:17.950
MARY XIA: So let's
apply Material theming

00:03:17.950 --> 00:03:22.420
to Shrine and show how Material
on Flutter is expressive,

00:03:22.420 --> 00:03:25.990
with its customizable
widgets, layouts, and themes.

00:03:25.990 --> 00:03:28.360
WILL LARCHE: Enhanced, with
new components and styles

00:03:28.360 --> 00:03:30.700
like our text
fields and backdrop.

00:03:30.700 --> 00:03:33.460
MARY XIA: And delightful,
offering developer tools

00:03:33.460 --> 00:03:37.990
and easy extensibility
of components.

00:03:37.990 --> 00:03:40.450
WILL LARCHE: Now,
what is a widget?

00:03:40.450 --> 00:03:43.510
In Flutter, a widget is
pretty much everything.

00:03:43.510 --> 00:03:45.880
There are your buttons, your
cards, your text fields,

00:03:45.880 --> 00:03:48.040
all your views are widgets.

00:03:48.040 --> 00:03:51.160
You can also compose your own
widgets from existing ones.

00:03:51.160 --> 00:03:54.130
And we'll show you how to
do some of that today, too.

00:03:54.130 --> 00:03:57.310
Material Components is
a library of widgets

00:03:57.310 --> 00:04:02.350
that are expressive, enhanced,
and delightful to work with.

00:04:02.350 --> 00:04:04.352
MARY XIA: So we'll start
by building this app.

00:04:04.352 --> 00:04:05.310
We've already built it.

00:04:05.310 --> 00:04:07.320
We're going to enhance it now.

00:04:07.320 --> 00:04:09.210
It is built with
the default theming

00:04:09.210 --> 00:04:11.481
and doesn't have any of
the latest of material.

00:04:11.481 --> 00:04:13.230
WILL LARCHE: So let's
look at the guidance

00:04:13.230 --> 00:04:15.600
our designer gave us.

00:04:15.600 --> 00:04:21.640
It's a font, logo,
shape, layout and color.

00:04:21.640 --> 00:04:23.946
MARY XIA: OK, great, let's
start with the color theme.

00:04:23.946 --> 00:04:25.320
WILL LARCHE: Mary,
will you code?

00:04:25.320 --> 00:04:25.890
MARY XIA: Yes.

00:04:25.890 --> 00:04:26.848
WILL LARCHE: Thank you.

00:04:26.848 --> 00:04:31.490
I will stand here and talk,
because I crave attention.

00:04:31.490 --> 00:04:34.430
So we've already used a
lot of Material Components

00:04:34.430 --> 00:04:35.940
to build the unthemed app.

00:04:35.940 --> 00:04:38.480
So we've imported the
Material Flutter package

00:04:38.480 --> 00:04:40.710
in all of our apps files.

00:04:40.710 --> 00:04:43.400
We have the unthemed app
running in the Emulator.

00:04:43.400 --> 00:04:46.520
Here's Shrine's login page.

00:04:46.520 --> 00:04:49.470
And here's its homepage.

00:04:49.470 --> 00:04:52.190
Both of those pages are
routed to the screen

00:04:52.190 --> 00:04:54.530
by the Shrine app widget.

00:04:54.530 --> 00:04:56.960
This is what gets passed
into the main function, which

00:04:56.960 --> 00:04:59.060
is run when we start our app.

00:04:59.060 --> 00:05:01.730
It's the highest level
widget in our project.

00:05:01.730 --> 00:05:05.880
It returns a Material app
widget in its build function.

00:05:05.880 --> 00:05:08.560
Let's take a look at
that Material app widget.

00:05:08.560 --> 00:05:12.050
Its home property is set
to a homepage widget, which

00:05:12.050 --> 00:05:14.000
we've built just for Shrine.

00:05:14.000 --> 00:05:15.410
There's also a theme property.

00:05:15.410 --> 00:05:19.520
And you can pass in a themed
data in the app's constructor.

00:05:19.520 --> 00:05:22.280
All the descendants--
widgets- of the app

00:05:22.280 --> 00:05:24.740
will have this theme
applied to them.

00:05:24.740 --> 00:05:29.010
Let's look at the color
theme our designer gave us.

00:05:29.010 --> 00:05:31.440
The color theme has most of
the colors you need in an app,

00:05:31.440 --> 00:05:34.380
like primary and secondary
colors, background,

00:05:34.380 --> 00:05:36.960
and a surface color
for things like modals.

00:05:36.960 --> 00:05:40.020
It also has the colors you
need for text and icons that

00:05:40.020 --> 00:05:42.750
are drawn on the primary,
secondary, background,

00:05:42.750 --> 00:05:44.090
and surface colors.

00:05:44.090 --> 00:05:46.950
There is even a primary
variant for any time

00:05:46.950 --> 00:05:50.010
the primary color is
against another color

00:05:50.010 --> 00:05:53.340
and that combination
is inaccessible.

00:05:53.340 --> 00:05:55.200
We've already copied
the Shrine color values

00:05:55.200 --> 00:05:58.022
into a color constants
file for convenience.

00:05:58.022 --> 00:05:59.730
You can see little
swatches of the colors

00:05:59.730 --> 00:06:01.770
on the left side next
to the line number.

00:06:01.770 --> 00:06:05.670
By the way, Material icons
will also appear in this way.

00:06:05.670 --> 00:06:08.370
The Material package already
has predefined colors,

00:06:08.370 --> 00:06:09.960
like colors.red.

00:06:09.960 --> 00:06:13.320
But Shrines designer is
using custom branded colors,

00:06:13.320 --> 00:06:15.780
like millennial pink and brown.

00:06:15.780 --> 00:06:17.370
Mary started a theme already.

00:06:17.370 --> 00:06:19.140
She's going to add
those colors to it.

00:06:19.140 --> 00:06:22.107
These are the colors our app
will use on a global level.

00:06:22.107 --> 00:06:23.940
She started with a light
theme and now she's

00:06:23.940 --> 00:06:26.380
changing some of the values.

00:06:26.380 --> 00:06:29.490
She's adding a primary
text theme from a function

00:06:29.490 --> 00:06:32.110
that she built herself.

00:06:32.110 --> 00:06:36.826
It's going to use as a base the
existing primary text theme.

00:06:36.826 --> 00:06:39.325
And then it's going to change
one of the values to be brown.

00:06:43.860 --> 00:06:45.880
Now she's adding an icon theme.

00:06:48.490 --> 00:06:51.220
She's going to again
start with the base theme,

00:06:51.220 --> 00:06:54.310
and then change the values
that she wants to be different.

00:06:54.310 --> 00:06:56.770
Copy with, by the way,
is a very common method

00:06:56.770 --> 00:06:58.840
that you'll see on a
lot of Flutter widgets.

00:06:58.840 --> 00:07:00.760
It allows you to
copy an instance,

00:07:00.760 --> 00:07:04.865
but change whatever
parameters you put inside.

00:07:04.865 --> 00:07:06.240
Now she's going
to set the button

00:07:06.240 --> 00:07:09.310
color throughout the app, for
raised or contained buttons.

00:07:11.931 --> 00:07:12.430
Reload.

00:07:17.110 --> 00:07:18.730
MARY XIA: What do you think?

00:07:18.730 --> 00:07:20.560
WILL LARCHE: It's
better, no more blue.

00:07:20.560 --> 00:07:21.310
Thank you, Mary.

00:07:24.610 --> 00:07:28.660
So let's work on the font
on those titles, please.

00:07:28.660 --> 00:07:31.180
She's going to set a
custom font for large type,

00:07:31.180 --> 00:07:33.580
like titles and headlines.

00:07:33.580 --> 00:07:38.050
I always thought the font
family sounded so wholesome.

00:07:38.050 --> 00:07:40.950
It's a slight change, but at
least it matches our logo now.

00:07:40.950 --> 00:07:44.230
It's not default
Roboto for larger type.

00:07:44.230 --> 00:07:46.850
Now to the login screen.

00:07:46.850 --> 00:07:49.000
So the login screen
itself is a widget.

00:07:49.000 --> 00:07:51.550
And every widget
has a build method.

00:07:51.550 --> 00:07:53.595
In it, you construct your UI.

00:07:53.595 --> 00:07:55.570
Our build function
has a safe area

00:07:55.570 --> 00:07:58.060
widget, which can account
for the notched top

00:07:58.060 --> 00:08:00.070
on a lot of newer phones.

00:08:00.070 --> 00:08:02.530
Inside we have
the logo, the text

00:08:02.530 --> 00:08:05.320
fields, and buttons
in a list view.

00:08:05.320 --> 00:08:06.850
We could have used
a column widget,

00:08:06.850 --> 00:08:08.920
but the list view
automatically handles

00:08:08.920 --> 00:08:13.080
scrolling on smaller screens
and when the keyboard appears.

00:08:13.080 --> 00:08:16.400
These are all widgets
provided by Flutter.

00:08:16.400 --> 00:08:19.220
Note that the build text field
function Mary and I wrote

00:08:19.220 --> 00:08:20.840
returns a widget.

00:08:20.840 --> 00:08:23.360
This is directly called
in our build function.

00:08:23.360 --> 00:08:26.240
We can even pass in our own
parameters to this function.

00:08:26.240 --> 00:08:29.180
It's not a static layout.

00:08:29.180 --> 00:08:31.550
Right now, the text
field is automatically

00:08:31.550 --> 00:08:34.250
using the global color
theme's primary color

00:08:34.250 --> 00:08:35.780
as its active color.

00:08:35.780 --> 00:08:37.669
And you can see
when she's typing,

00:08:37.669 --> 00:08:40.070
the floating placeholder
and underline decoration

00:08:40.070 --> 00:08:42.049
are not very accessible.

00:08:42.049 --> 00:08:44.600
We could change our global
theme's primary color,

00:08:44.600 --> 00:08:47.690
or we could change just the
primary color of our text field

00:08:47.690 --> 00:08:49.700
to the primary variant.

00:08:49.700 --> 00:08:51.950
Each widget can override
their ancestor's theme

00:08:51.950 --> 00:08:55.190
by being wrapped in a new theme.

00:08:55.190 --> 00:08:57.320
If we highlight a widget
and press Alt-Enter

00:08:57.320 --> 00:08:58.934
a shortcut menu appears.

00:08:58.934 --> 00:09:01.100
And one of the common
shortcuts is wrapping a widget

00:09:01.100 --> 00:09:02.025
with another widget.

00:09:02.025 --> 00:09:03.650
We'll wrap the text
fields in that copy

00:09:03.650 --> 00:09:05.870
of the theme that has
the primary variant

00:09:05.870 --> 00:09:08.120
as its primary color.

00:09:08.120 --> 00:09:10.700
Now you can see
what you're doing.

00:09:10.700 --> 00:09:13.200
Our material theme also
has a shape story that's

00:09:13.200 --> 00:09:15.225
angled, based on our logo.

00:09:15.225 --> 00:09:17.930
Mary's setting the
shape of the Next button

00:09:17.930 --> 00:09:20.610
to the beveled
rectangle border widget.

00:09:20.610 --> 00:09:23.840
This is a component that
Flutter provides out of the box.

00:09:23.840 --> 00:09:26.540
It takes the size you
want the cuts to be

00:09:26.540 --> 00:09:29.120
and returns an
octagonal outline.

00:09:29.120 --> 00:09:33.610
As you can see, the
button is now eight-sided.

00:09:33.610 --> 00:09:36.100
By the way, if you're
working without a designer,

00:09:36.100 --> 00:09:37.937
or you're a designer
yourself, we now

00:09:37.937 --> 00:09:39.520
have a tool that can
help you generate

00:09:39.520 --> 00:09:41.740
palettes of colors for theming.

00:09:41.740 --> 00:09:43.960
Imagine we didn't have a
complete brand guideline,

00:09:43.960 --> 00:09:46.960
but we had a color that we were
already using consistently,

00:09:46.960 --> 00:09:49.870
or wanted to use
more consistently.

00:09:49.870 --> 00:09:53.470
You can go to this website
material.io/design,

00:09:53.470 --> 00:09:57.010
and it can suggest complimentary
palettes and extended tonal

00:09:57.010 --> 00:10:00.110
palettes to go with that color.

00:10:00.110 --> 00:10:03.290
So just for fun, let's
see how Shrine would look

00:10:03.290 --> 00:10:05.180
if it were built from charcoal.

00:10:05.180 --> 00:10:08.390
We added some colors earlier
in our color constants file.

00:10:08.390 --> 00:10:11.420
Mary's changing to an
alternate theme function

00:10:11.420 --> 00:10:12.435
that uses those colors.

00:10:15.630 --> 00:10:19.750
See, very different
alternative theme very easily.

00:10:19.750 --> 00:10:23.040
Now, let's go back
to the real theme.

00:10:23.040 --> 00:10:25.950
So we've seen how color and
shape can express your brand,

00:10:25.950 --> 00:10:27.570
but what about layout?

00:10:27.570 --> 00:10:30.540
Well, our designer has read the
new guidelines on image listing

00:10:30.540 --> 00:10:34.230
cards, and decided to
make an asymmetric layout

00:10:34.230 --> 00:10:36.390
part of our Material theme.

00:10:36.390 --> 00:10:38.910
At the moment, our products
are displayed in a simple grid

00:10:38.910 --> 00:10:40.470
of cards with images.

00:10:40.470 --> 00:10:42.810
And this is the
default for grid view.

00:10:42.810 --> 00:10:45.780
Our designer wants it
broken up into threes,

00:10:45.780 --> 00:10:48.870
with asymmetric alignments,
and aspect ratios

00:10:48.870 --> 00:10:51.730
inspired by the
angles in our logo.

00:10:51.730 --> 00:10:54.384
It's a custom design
just for our app.

00:10:54.384 --> 00:10:56.550
We're going to use a
completely custom widget called

00:10:56.550 --> 00:10:58.740
asymmetric view widget
for asymmetric layout

00:10:58.740 --> 00:11:00.330
that we made earlier.

00:11:00.330 --> 00:11:02.959
It's based on the list view
widget in Material Components.

00:11:02.959 --> 00:11:05.250
By the way, you can find the
source code for everything

00:11:05.250 --> 00:11:08.580
we're doing today in the
Material Flutter code labs.

00:11:08.580 --> 00:11:10.040
Mary removed the
grid view widget

00:11:10.040 --> 00:11:12.870
we had inserted our
asymmetric view widget.

00:11:12.870 --> 00:11:14.820
Since the asymmetric
view is built

00:11:14.820 --> 00:11:17.090
on top of a Flutter
list view widget,

00:11:17.090 --> 00:11:19.980
the widgets are
recycled as we scroll.

00:11:19.980 --> 00:11:22.440
Flutter list views let you
specify the scroll direction,

00:11:22.440 --> 00:11:24.690
and we've set it to horizontal.

00:11:24.690 --> 00:11:28.260
The asymmetric layout code
is less than 100 lines.

00:11:28.260 --> 00:11:30.870
It's a very expensive-looking
component that's--

00:11:30.870 --> 00:11:32.840
oh--

00:11:32.840 --> 00:11:34.040
MARY XIA: What?

00:11:34.040 --> 00:11:35.760
What's going on?

00:11:35.760 --> 00:11:37.260
WILL LARCHE: I have that scarf.

00:11:37.260 --> 00:11:41.320
[APPLAUSE]

00:11:41.320 --> 00:11:43.930
MARY XIA: Will, you
have every scarf.

00:11:43.930 --> 00:11:46.720
WILL LARCHE: Yes,
thank you, Mary.

00:11:46.720 --> 00:11:50.740
Anyway, so Flutter lets you
develop in one code base,

00:11:50.740 --> 00:11:53.470
but deploy it at
both Android and iOS.

00:11:53.470 --> 00:11:55.120
The app is looking great.

00:11:55.120 --> 00:11:58.600
And I want to see how it looks
on iOS, so let's switch places.

00:11:58.600 --> 00:11:59.575
MARY XIA: Sounds good.

00:11:59.575 --> 00:12:01.450
WILL LARCHE: We'll be
using the iOS simulator

00:12:01.450 --> 00:12:03.130
for the rest of our
development to show

00:12:03.130 --> 00:12:06.040
how easy it is to switch
between the two platforms.

00:12:06.040 --> 00:12:11.800
You just set the device
selector to iPhone simulator.

00:12:11.800 --> 00:12:12.710
MARY XIA: OK, great.

00:12:12.710 --> 00:12:14.440
So Will has just
shown us how you can

00:12:14.440 --> 00:12:17.330
express your brand in your app.

00:12:17.330 --> 00:12:20.500
Now I'll talk about how the
enhancements to Material

00:12:20.500 --> 00:12:22.510
can help make your
apps stand out,

00:12:22.510 --> 00:12:25.780
and make it easy for you
to use existing components,

00:12:25.780 --> 00:12:29.330
and use guidance to build
components that, well, you

00:12:29.330 --> 00:12:32.062
know, also express your brand.

00:12:32.062 --> 00:12:33.520
The first thing
Will's going to add

00:12:33.520 --> 00:12:36.020
is an outline input
border to the text field.

00:12:36.020 --> 00:12:37.550
Right now, our text
fields just have

00:12:37.550 --> 00:12:40.370
a line on the bottom
saying it's a text field.

00:12:40.370 --> 00:12:43.430
The outline input border
wraps the whole text field

00:12:43.430 --> 00:12:46.790
with a border, making it
obvious that it's something

00:12:46.790 --> 00:12:48.440
that users can fill in.

00:12:48.440 --> 00:12:51.170
Now, you might be
wondering, how do

00:12:51.170 --> 00:12:54.230
we have any proof that this
is a better design system,

00:12:54.230 --> 00:12:57.200
or that Material Design
is a great design system?

00:12:57.200 --> 00:12:59.280
Well, we did a lot of research.

00:12:59.280 --> 00:13:02.150
And it turns out that
these types of text fields

00:13:02.150 --> 00:13:04.160
are much more
performant, and users

00:13:04.160 --> 00:13:06.590
are more likely to see
them in a busy form.

00:13:06.590 --> 00:13:09.810
They know that it's
a call to action.

00:13:09.810 --> 00:13:12.120
So that's why we're
using it here.

00:13:12.120 --> 00:13:14.120
You can also watch the
talk "Measuring Material"

00:13:14.120 --> 00:13:17.480
to learn more about
Material research.

00:13:17.480 --> 00:13:21.320
You know, that looks great,
but it doesn't look as edgy

00:13:21.320 --> 00:13:24.260
as the Shrine brand really is.

00:13:24.260 --> 00:13:26.750
You don't cut corners
with Material Design,

00:13:26.750 --> 00:13:30.290
unless you're using
a cut corners border.

00:13:30.290 --> 00:13:32.330
This border literally
cuts the corners off

00:13:32.330 --> 00:13:36.380
of your text field's outline
so that it can match the button

00:13:36.380 --> 00:13:38.327
and it can match
our Shrine logo.

00:13:38.327 --> 00:13:39.410
There, it looks octagonal.

00:13:39.410 --> 00:13:42.690
Looks great.

00:13:42.690 --> 00:13:46.056
Will, we can see your password.

00:13:46.056 --> 00:13:47.430
WILL LARCHE: Oh,
you shouldn't be

00:13:47.430 --> 00:13:50.430
able to know that my
password is yaasresearch.

00:13:50.430 --> 00:13:52.560
MARY XIA: Yeah,
so the text yields

00:13:52.560 --> 00:13:54.640
come with a built-in
property obscure text.

00:13:54.640 --> 00:13:58.290
And now we're passing in our
own Boolean is password so

00:13:58.290 --> 00:14:00.390
that we can hide our password.

00:14:00.390 --> 00:14:04.440
As I said, we build our text
fields using our own function,

00:14:04.440 --> 00:14:05.640
and it returns a widget.

00:14:05.640 --> 00:14:09.620
And we just pass that right
into our build function.

00:14:09.620 --> 00:14:10.120
Great.

00:14:10.120 --> 00:14:12.040
Now that we've spruced
up our login page,

00:14:12.040 --> 00:14:14.740
let's see what we can
do on our homepage.

00:14:18.300 --> 00:14:22.650
Our homepage currently is
one page with a menu bar.

00:14:22.650 --> 00:14:24.590
What we want to do
is add a backdrop.

00:14:24.590 --> 00:14:28.210
A backdrop allows you to
have two layers in your app.

00:14:28.210 --> 00:14:32.520
It's an intuitive way to display
both a menu and some content,

00:14:32.520 --> 00:14:35.330
rather than having a menu
pop in from the side.

00:14:35.330 --> 00:14:36.740
Will's is going
to remove the app

00:14:36.740 --> 00:14:39.630
bar from our current version,
because the backdrop comes

00:14:39.630 --> 00:14:41.270
with an app bar.

00:14:41.270 --> 00:14:43.410
Will and I built the
backdrop ourselves,

00:14:43.410 --> 00:14:47.016
but it came entirely from
Guidance by Material Design.

00:14:47.016 --> 00:14:48.390
They have a lot
of specifications

00:14:48.390 --> 00:14:51.930
for how you can do layouts
and what sort of navigation

00:14:51.930 --> 00:14:54.099
can exist.

00:14:54.099 --> 00:14:55.640
After he's done
that, he's also going

00:14:55.640 --> 00:14:59.550
to remove the homepage from our
home property in our Material

00:14:59.550 --> 00:15:02.460
app and replace that
with the backdrop.

00:15:02.460 --> 00:15:04.880
Now, the backdrop is
essentially just a stack.

00:15:04.880 --> 00:15:07.820
A stack is a way of
layering various components

00:15:07.820 --> 00:15:09.030
on top of each other--

00:15:09.030 --> 00:15:11.150
for example, a footer.

00:15:11.150 --> 00:15:13.442
Here, our backdrop has a
front panel and a back panel,

00:15:13.442 --> 00:15:15.150
and they're stacked
on top of each other.

00:15:15.150 --> 00:15:17.870
The front panel is our
homepage, and our back panel

00:15:17.870 --> 00:15:20.610
will be a menu page.

00:15:20.610 --> 00:15:23.000
So let's see how that looks.

00:15:23.000 --> 00:15:23.970
It has the Shrine edge.

00:15:23.970 --> 00:15:25.820
We added that as well.

00:15:25.820 --> 00:15:28.310
Let's try clicking on the
icon and seeing whether or not

00:15:28.310 --> 00:15:30.350
it goes up and down.

00:15:30.350 --> 00:15:33.130
No, because we have not
implemented that yet.

00:15:33.130 --> 00:15:35.360
OK, so let's do that now.

00:15:35.360 --> 00:15:40.830
And to do this, we need to
use a transition or animation.

00:15:40.830 --> 00:15:43.370
We're going to use a
positioned transition.

00:15:43.370 --> 00:15:46.220
Essentially, this is
just a way for the parent

00:15:46.220 --> 00:15:49.820
to tell the child, hey,
you're my child widget.

00:15:49.820 --> 00:15:52.220
You start off at this
size and location,

00:15:52.220 --> 00:15:54.890
and you'll end up at
this size and location.

00:15:54.890 --> 00:15:56.720
For this case, we
want to animate

00:15:56.720 --> 00:15:59.870
from closed, which is
the bottom, to open,

00:15:59.870 --> 00:16:03.240
which is with the
whole home screen open.

00:16:03.240 --> 00:16:06.470
So let's start with
a panel animation.

00:16:06.470 --> 00:16:08.930
Now this animation is
of a type relative rect.

00:16:08.930 --> 00:16:11.690
So this is the way you
tell your animation

00:16:11.690 --> 00:16:15.720
that it wants to start off with
a certain location and size,

00:16:15.720 --> 00:16:18.110
and where it should end.

00:16:18.110 --> 00:16:22.920
It takes in a begin and
an end and a controller.

00:16:22.920 --> 00:16:24.450
So Will's typing that out now.

00:16:24.450 --> 00:16:28.350
We've already predefined what
the panel height and the height

00:16:28.350 --> 00:16:32.580
of the app bar should be.

00:16:32.580 --> 00:16:36.252
And also, we need to
pass in a controller.

00:16:36.252 --> 00:16:38.210
The controller is
responsible for orchestrating

00:16:38.210 --> 00:16:40.670
the actual animation.

00:16:40.670 --> 00:16:45.820
Every frame that is drawn
is determined by it.

00:16:45.820 --> 00:16:49.560
We now pass the panel animation
into position transition

00:16:49.560 --> 00:16:50.580
widget.

00:16:50.580 --> 00:16:53.630
Flutter comes with a lot
of different transitions--

00:16:53.630 --> 00:16:57.160
for example, fading, rotation,
scaling, and much more.

00:16:57.160 --> 00:17:01.640
They come out of the box, so
all you have to do is use them.

00:17:01.640 --> 00:17:04.200
It takes in a rectangle
property, which

00:17:04.200 --> 00:17:06.420
is our animation, and
it takes in the child,

00:17:06.420 --> 00:17:09.700
which is the child we want
to animate up and down.

00:17:09.700 --> 00:17:12.852
So let's try animating.

00:17:12.852 --> 00:17:14.710
There we go.

00:17:14.710 --> 00:17:18.070
[APPLAUSE]

00:17:19.990 --> 00:17:22.115
Now, back to the
animation controller.

00:17:22.115 --> 00:17:24.670
As I said earlier, it's
responsible for drawing

00:17:24.670 --> 00:17:26.140
the new frames.

00:17:26.140 --> 00:17:28.740
Well, let's take a look at it.

00:17:28.740 --> 00:17:31.000
This comes out of
the box with Flutter.

00:17:31.000 --> 00:17:32.710
And this is the
code that is used.

00:17:32.710 --> 00:17:34.310
It's open source.

00:17:34.310 --> 00:17:38.630
You can see that it animates
from the value 0 and 1.

00:17:38.630 --> 00:17:41.950
You know how I said that Flutter
comes with a lot of animations

00:17:41.950 --> 00:17:42.636
already?

00:17:42.636 --> 00:17:44.010
Well, you can also
build your own

00:17:44.010 --> 00:17:46.090
if there is something
really custom you want.

00:17:46.090 --> 00:17:49.570
And then you map your widgets
to these values 0 and 1

00:17:49.570 --> 00:17:51.300
while they animate.

00:17:51.300 --> 00:17:53.590
OK, so the material
guidelines also

00:17:53.590 --> 00:17:56.020
suggest that for a
backdrop, that users

00:17:56.020 --> 00:17:57.610
would like to tap on the top.

00:18:00.280 --> 00:18:02.330
You've switched to
the Android phone.

00:18:02.330 --> 00:18:04.621
WILL LARCHE: I know, I hit
the wrong button, I'm sorry.

00:18:04.621 --> 00:18:06.556
It's live.

00:18:06.556 --> 00:18:08.930
It's loading the new-- it's
loading the iPhone simulator.

00:18:08.930 --> 00:18:13.920
MARY XIA: Just tab
out to the uh, oh, OK.

00:18:13.920 --> 00:18:16.640
There we go, back to
the backdrop version.

00:18:19.810 --> 00:18:21.460
Anyway, so that
Material guidelines

00:18:21.460 --> 00:18:24.790
say that you want to tap
on the top of your backdrop

00:18:24.790 --> 00:18:28.540
in order to animate up and down,
as well as tapping on the app

00:18:28.540 --> 00:18:29.590
bar itself.

00:18:29.590 --> 00:18:31.950
Currently, tapping on the
top doesn't do anything.

00:18:31.950 --> 00:18:33.930
We now add a gesture detector.

00:18:33.930 --> 00:18:37.240
Flutter also comes with a lot of
gesture detectors, like on tap,

00:18:37.240 --> 00:18:40.360
on drag, on long
press, a lot more.

00:18:40.360 --> 00:18:42.160
They're meant to be extensible.

00:18:42.160 --> 00:18:44.180
They take in a function.

00:18:44.180 --> 00:18:46.870
Functions are first
class objects in Dart.

00:18:46.870 --> 00:18:49.480
And this means that we
can pass in any function

00:18:49.480 --> 00:18:54.040
and have your tap and gesture
do anything you want--

00:18:54.040 --> 00:18:57.700
show hide, change a variable,
other things like that.

00:18:57.700 --> 00:19:02.680
So Will is now setting that
up and putting a parens

00:19:02.680 --> 00:19:04.360
after the 2.

00:19:04.360 --> 00:19:05.860
There we go.

00:19:05.860 --> 00:19:10.150
Now when you tap on the
backdrop, it should animate.

00:19:10.150 --> 00:19:12.280
WILL LARCHE: Oh
Mary, I did it wrong.

00:19:12.280 --> 00:19:14.297
Classic Will.

00:19:14.297 --> 00:19:15.130
MARY XIA: That's OK.

00:19:18.370 --> 00:19:19.850
WILL LARCHE: Help me debug.

00:19:19.850 --> 00:19:21.370
MARY XIA: Oh, that's OK.

00:19:21.370 --> 00:19:22.020
Well--

00:19:22.020 --> 00:19:22.686
WILL LARCHE: Oh.

00:19:28.240 --> 00:19:29.142
There we go.

00:19:29.142 --> 00:19:30.850
MARY XIA: All right,
cool, we're all set.

00:19:30.850 --> 00:19:32.830
[APPLAUSE]

00:19:32.830 --> 00:19:37.510
Great, well, now you've seen
how all the enhanced new things

00:19:37.510 --> 00:19:40.390
for Material have helped
us build an app that

00:19:40.390 --> 00:19:43.330
is much more enhanced, and
well, kind of cool and much more

00:19:43.330 --> 00:19:45.864
unique.

00:19:45.864 --> 00:19:48.280
Now we're going to talk about
how delightful the developer

00:19:48.280 --> 00:19:50.860
experience is.

00:19:50.860 --> 00:19:53.320
Sometimes someone
gives you code,

00:19:53.320 --> 00:19:55.810
and you want to make
changes to that code.

00:19:55.810 --> 00:19:59.110
For example, right now
our image and our text

00:19:59.110 --> 00:20:00.640
are very close together.

00:20:00.640 --> 00:20:03.160
We want to put some
space between the two.

00:20:03.160 --> 00:20:06.490
So you can look at the
image and admire the goods,

00:20:06.490 --> 00:20:10.410
and then look down
and see the price tag.

00:20:10.410 --> 00:20:11.590
How do we do that?

00:20:11.590 --> 00:20:14.010
Well, we can use the
Flutter inspector.

00:20:14.010 --> 00:20:18.420
The inspector maps between the
UI and the exact line of code

00:20:18.420 --> 00:20:22.350
where that widget
was being created.

00:20:22.350 --> 00:20:24.900
Now Will's going to
demo the inspector.

00:20:24.900 --> 00:20:26.470
You just tap on
the inspect button.

00:20:26.470 --> 00:20:31.450
And if you tap on anywhere on
your app, it will pop up a box.

00:20:31.450 --> 00:20:34.890
And this box will then take
you to the exact widget

00:20:34.890 --> 00:20:37.940
for that app.

00:20:37.940 --> 00:20:41.810
Currently we are tapping on
that, and it shows that--

00:20:44.360 --> 00:20:46.584
Will, I think your
inspector's running for--

00:20:46.584 --> 00:20:48.500
WILL LARCHE: Doesn't
want to show the widgets,

00:20:48.500 --> 00:20:49.940
but we've got the render tree.

00:20:49.940 --> 00:20:53.360
MARY XIA: OK, the render tree
is a much more detailed version

00:20:53.360 --> 00:20:54.920
of your widget tree.

00:20:54.920 --> 00:20:57.170
It shows literally
every single thing

00:20:57.170 --> 00:20:59.600
that is being drawn, whereas
your widget tree only

00:20:59.600 --> 00:21:02.510
shows the widgets that
you've drawn, and not

00:21:02.510 --> 00:21:04.610
only your widgets,
but also widgets

00:21:04.610 --> 00:21:06.560
that are being drawn
by part of the system.

00:21:06.560 --> 00:21:08.900
Your widgets are
drawn in bold color.

00:21:08.900 --> 00:21:10.400
And if you right-click,
you can jump

00:21:10.400 --> 00:21:12.420
to this exact line of code.

00:21:12.420 --> 00:21:15.650
Well, here, we'll know
that this actually

00:21:15.650 --> 00:21:19.490
points to the
product card, which

00:21:19.490 --> 00:21:22.970
is responsible for drawing
the actual card with the image

00:21:22.970 --> 00:21:24.140
and text.

00:21:24.140 --> 00:21:28.380
So let's check out our
product card widget.

00:21:28.380 --> 00:21:32.340
Remember, this was given to
us and we didn't build it.

00:21:32.340 --> 00:21:34.586
Although technically,
we did build it.

00:21:34.586 --> 00:21:35.777
All right.

00:21:35.777 --> 00:21:37.860
Inside the product card,
there are two functions--

00:21:37.860 --> 00:21:39.630
build image and build text.

00:21:39.630 --> 00:21:41.820
They are arranged in a column.

00:21:41.820 --> 00:21:44.730
We want to put space
between the two.

00:21:44.730 --> 00:21:48.400
We look at our column and
note that it says cross axle

00:21:48.400 --> 00:21:49.620
alignment at center.

00:21:49.620 --> 00:21:52.200
There's no main axis alignment.

00:21:52.200 --> 00:21:56.790
Through reading the Dart
docs, or through reading,

00:21:56.790 --> 00:21:59.790
trying stuff out,
usually even checking

00:21:59.790 --> 00:22:02.310
in the inspector, which
shows all the properties that

00:22:02.310 --> 00:22:04.980
are being defined, you'll
find that our main access

00:22:04.980 --> 00:22:07.880
alignment is set to start, even
though we never actually set

00:22:07.880 --> 00:22:09.950
it.

00:22:09.950 --> 00:22:12.692
What does main access
alignment mean?

00:22:12.692 --> 00:22:14.150
WILL LARCHE: Main
axis alignment is

00:22:14.150 --> 00:22:17.990
the direction you want things to
begin in the scroll direction.

00:22:17.990 --> 00:22:19.910
So it starts at the top.

00:22:19.910 --> 00:22:22.190
MARY XIA: So it seems like
our image and text are all

00:22:22.190 --> 00:22:24.170
going to start at the top.

00:22:24.170 --> 00:22:26.390
Let's try changing
that to center,

00:22:26.390 --> 00:22:30.080
so that inside the space
allotted to our product card,

00:22:30.080 --> 00:22:31.670
maybe our text
will center itself,

00:22:31.670 --> 00:22:34.723
rather than align
itself to the beginning.

00:22:41.620 --> 00:22:44.120
There, there's a little bit of
space, but that's not enough.

00:22:44.120 --> 00:22:45.190
Let's change that to end.

00:22:45.190 --> 00:22:46.000
We want more space.

00:22:55.950 --> 00:22:57.200
There, that looks much better.

00:22:57.200 --> 00:22:58.340
WILL LARCHE: That looks good.

00:22:58.340 --> 00:23:00.214
MARY XIA: Now you can
see your image and text

00:23:00.214 --> 00:23:02.024
with some space in between.

00:23:02.024 --> 00:23:03.440
Well, while we're
here, let's also

00:23:03.440 --> 00:23:05.840
change our image aspect ratio.

00:23:05.840 --> 00:23:08.480
Currently the images have
an image aspect ratio,

00:23:08.480 --> 00:23:09.500
I want it to be one.

00:23:09.500 --> 00:23:10.865
I want my images to be square.

00:23:20.270 --> 00:23:21.830
OK, that looks great.

00:23:21.830 --> 00:23:27.650
But who here has had a cat
walk across their keyboard?

00:23:27.650 --> 00:23:29.240
There's more than
that, I'm sure.

00:23:29.240 --> 00:23:31.670
All right, well, cats
are the number one cause

00:23:31.670 --> 00:23:32.930
of typos in code.

00:23:32.930 --> 00:23:33.722
It's a proven fact.

00:23:33.722 --> 00:23:34.680
WILL LARCHE: It's true.

00:23:34.680 --> 00:23:36.680
I've actually never
made a mistake in code.

00:23:36.680 --> 00:23:39.590
Even today, it was a cat.

00:23:39.590 --> 00:23:41.910
MARY XIA: OK, so
let's say a cat--

00:23:41.910 --> 00:23:43.230
Nate, what's your cat's name?

00:23:43.230 --> 00:23:43.600
WILL LARCHE: Nate.

00:23:43.600 --> 00:23:44.660
MARY XIA: Oh, whoops.

00:23:44.660 --> 00:23:45.830
All right.

00:23:45.830 --> 00:23:47.600
Wait, wait, why Nate?

00:23:47.600 --> 00:23:50.420
WILL LARCHE: He's
my concat Nate.

00:23:50.420 --> 00:23:52.310
MARY XIA: OK.

00:23:52.310 --> 00:23:53.810
All right, that's
a classic, right?

00:23:53.810 --> 00:23:54.893
WILL LARCHE: You loved it.

00:23:54.893 --> 00:23:57.830
MARY XIA: OK, well, let's say,
Nate the cat negated the aspect

00:23:57.830 --> 00:23:59.370
ratio.

00:23:59.370 --> 00:24:00.710
And so now it's negative 1.

00:24:00.710 --> 00:24:02.120
What happens?

00:24:02.120 --> 00:24:03.870
You know your app's
going to crash, right,

00:24:03.870 --> 00:24:05.820
because negative
1-- and it's still--

00:24:05.820 --> 00:24:08.710
the compiler accepts it
because it's still a float.

00:24:08.710 --> 00:24:10.950
But no, only the part that--

00:24:10.950 --> 00:24:13.660
the widget that like
has a negative 1,

00:24:13.660 --> 00:24:16.024
the aspect ratio widget crashes.

00:24:16.024 --> 00:24:17.190
Everything else still works.

00:24:17.190 --> 00:24:18.148
Your app still scrolls.

00:24:18.148 --> 00:24:20.820
You can still go to the menu.

00:24:20.820 --> 00:24:22.886
So now let's just change
that back and reload,

00:24:22.886 --> 00:24:24.010
and let's see what happens.

00:24:31.200 --> 00:24:33.900
There, all right, all fixed.

00:24:33.900 --> 00:24:36.267
So this is one of the
cool things about Flutter.

00:24:36.267 --> 00:24:37.850
We've been making
changes, and they've

00:24:37.850 --> 00:24:39.830
been loading really quickly.

00:24:39.830 --> 00:24:43.430
Only the widgets that are being
changed are being redrawn.

00:24:43.430 --> 00:24:45.260
We've been restarting
the app in this demo.

00:24:45.260 --> 00:24:48.610
But earlier you saw the colors
would show up immediately.

00:24:48.610 --> 00:24:50.780
Asymmetric layout
showed up immediately.

00:24:50.780 --> 00:24:52.800
We did not have to
restart the app.

00:24:52.800 --> 00:24:55.670
So you could easily backtrack
and rebuild UI and try things

00:24:55.670 --> 00:24:56.340
out.

00:24:56.340 --> 00:24:58.760
And if it doesn't
work out, that's OK.

00:24:58.760 --> 00:25:02.240
You don't waste that much time.

00:25:02.240 --> 00:25:07.319
Also navigational state is being
preserved during hot reload.

00:25:07.319 --> 00:25:08.860
A couple of other
cool things-- we've

00:25:08.860 --> 00:25:11.470
been autoformatting our
code as we've been building.

00:25:11.470 --> 00:25:15.220
And also, you can add
closing labels to your code.

00:25:15.220 --> 00:25:19.120
These closing labels tell you
what widget has just finished.

00:25:19.120 --> 00:25:21.790
Let's see what it looks like.

00:25:21.790 --> 00:25:22.290
There, see?

00:25:22.290 --> 00:25:24.060
Now you know you have a text.

00:25:24.060 --> 00:25:26.190
You have widgets and columns.

00:25:26.190 --> 00:25:30.220
This way you can tell
where those braces mean.

00:25:30.220 --> 00:25:32.729
Great.

00:25:32.729 --> 00:25:34.520
Well, Will, I think
that looks pretty good.

00:25:34.520 --> 00:25:35.120
What do you think?

00:25:35.120 --> 00:25:36.260
I think it looks lovely.

00:25:36.260 --> 00:25:37.280
WILL LARCHE: Yeah,
I don't think it

00:25:37.280 --> 00:25:39.050
looks anything like
the generic blue app

00:25:39.050 --> 00:25:40.190
we had when we started.

00:25:40.190 --> 00:25:42.692
MARY XIA: All right, well,
let's come back here.

00:25:42.692 --> 00:25:45.650
All right.

00:25:45.650 --> 00:25:47.150
So let's recap.

00:25:47.150 --> 00:25:50.210
We just revamped an outdated
app with Material Design

00:25:50.210 --> 00:25:52.550
and Flutter.

00:25:52.550 --> 00:25:55.160
WILL LARCHE: Material theming
and the asymmetric layout

00:25:55.160 --> 00:25:58.391
showed how expressive
our app can be.

00:25:58.391 --> 00:26:00.140
MARY XIA: The new text
fields and backdrop

00:26:00.140 --> 00:26:02.510
showed the enhancements
to Material Components

00:26:02.510 --> 00:26:04.474
that you can use
today in Flutter.

00:26:04.474 --> 00:26:06.140
WILL LARCHE: And all
the Flutter tooling

00:26:06.140 --> 00:26:08.952
made a delightful experience
for us developers.

00:26:08.952 --> 00:26:10.910
MARY XIA: You're used to
seeing people give you

00:26:10.910 --> 00:26:13.070
custom complicated designs.

00:26:13.070 --> 00:26:15.795
And you want to work on
them, but they're just

00:26:15.795 --> 00:26:18.000
going to take too much time.

00:26:18.000 --> 00:26:22.190
But with Material Components,
your designs and code

00:26:22.190 --> 00:26:24.740
live in the same world.

00:26:24.740 --> 00:26:27.290
MARY XIA: With Flutter's
support for Material theming,

00:26:27.290 --> 00:26:29.270
it's no big deal if
your designers suddenly

00:26:29.270 --> 00:26:31.550
says, "Let's change
everything that's light

00:26:31.550 --> 00:26:32.990
blue to dark blue."

00:26:32.990 --> 00:26:35.960
You might not have to say
no to your designer anymore.

00:26:35.960 --> 00:26:39.560
We want you to spend less time
on boilerplate and more time

00:26:39.560 --> 00:26:42.082
building the things that
make your app special.

00:26:42.082 --> 00:26:44.540
MARY XIA: So you should import
the Flutter Material package

00:26:44.540 --> 00:26:45.560
today.

00:26:45.560 --> 00:26:47.060
Also, be sure to
check out our code

00:26:47.060 --> 00:26:48.950
labs where you can
code everything

00:26:48.950 --> 00:26:50.760
we talked about in this talk.

00:26:50.760 --> 00:26:53.900
They're available online
and in the code lab at IO.

00:26:53.900 --> 00:26:56.300
WILL LARCHE: Also check out
the Total Mobile Dev Made

00:26:56.300 --> 00:26:59.090
Fun with Firebase
and Flutter at 2:30,

00:26:59.090 --> 00:27:01.737
and Build Reactive
Mobile Apps with Flutter.

00:27:01.737 --> 00:27:03.320
MARY XIA: We're going
to be here after

00:27:03.320 --> 00:27:06.080
for questions, and in the
Sandbox from 2:30 to 6:00

00:27:06.080 --> 00:27:08.017
today.

00:27:08.017 --> 00:27:11.510
[APPLAUSE]

00:27:13.789 --> 00:27:15.330
WILL LARCHE: Everything
else you need

00:27:15.330 --> 00:27:18.690
is on flutter.io
and material.io.

00:27:18.690 --> 00:27:23.977
MARY XIA: Now, go code beautiful
UI with Flutter and Material.

00:27:23.977 --> 00:27:24.810
MARY XIA: Thank you!

00:27:24.810 --> 00:27:26.244
[APPLAUSE]

00:27:26.244 --> 00:27:31.318
[PEPPY MUSIC]

