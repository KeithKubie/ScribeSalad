WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.437
[MUSIC PLAYING]

00:00:08.347 --> 00:00:10.320
EWA GASPEROWICZ:
Hello, everyone.

00:00:10.320 --> 00:00:11.790
My name is Ewa Gasperowicz.

00:00:11.790 --> 00:00:15.240
I'm a Developer Program
Engineer here at Google.

00:00:15.240 --> 00:00:17.520
And I'm very happy to see
you here at today's session

00:00:17.520 --> 00:00:20.370
and especially in the
beautiful city of Greco, which

00:00:20.370 --> 00:00:21.825
I'm very proud of, so welcome.

00:00:21.825 --> 00:00:23.870
[APPLAUSE]

00:00:23.870 --> 00:00:29.030
My intention today
is to shed some light

00:00:29.030 --> 00:00:32.970
on the process of transforming
an existing website

00:00:32.970 --> 00:00:35.480
into a Progressive Web App.

00:00:35.480 --> 00:00:38.930
Me and my team, we
recently went through a few

00:00:38.930 --> 00:00:40.610
of such processes.

00:00:40.610 --> 00:00:43.610
And I would like to share
with you some of the things we

00:00:43.610 --> 00:00:46.840
found out on the way.

00:00:46.840 --> 00:00:49.540
Probably by now, you've
heard a little bit

00:00:49.540 --> 00:00:51.700
about Progressive Web Apps.

00:00:51.700 --> 00:00:55.630
The notion of PWAs is making
rounds in the industry.

00:00:55.630 --> 00:00:57.350
And also if you've
been, by any chance,

00:00:57.350 --> 00:01:00.790
to some session about PWA--
who have been in the morning?

00:01:00.790 --> 00:01:03.730
I've been there, yeah,
plenty of people--

00:01:03.730 --> 00:01:06.700
you probably know
all of them by now.

00:01:06.700 --> 00:01:08.725
But in a nutshell,
Progressive Web Apps

00:01:08.725 --> 00:01:14.350
are experiences that
combine the best of the web

00:01:14.350 --> 00:01:16.030
and the best of the apps.

00:01:16.030 --> 00:01:20.940
They are web experiences,
which means they have

00:01:20.940 --> 00:01:23.380
the wonderful reach of the web.

00:01:23.380 --> 00:01:24.760
There is no installation.

00:01:24.760 --> 00:01:28.320
And every new experience
is just one click away.

00:01:28.320 --> 00:01:30.930
At the same time, they
use to the full extent

00:01:30.930 --> 00:01:34.890
the capabilities of modern
apps and modern devices.

00:01:34.890 --> 00:01:36.530
It means they are fast.

00:01:36.530 --> 00:01:40.800
They don't make the user wait
for them to load or react.

00:01:40.800 --> 00:01:43.500
They are integrated,
which means they

00:01:43.500 --> 00:01:46.800
feel like a natural
part of your device.

00:01:46.800 --> 00:01:49.920
They are ready-able, which
means they load and operate,

00:01:49.920 --> 00:01:52.380
no matter the circumstances.

00:01:52.380 --> 00:01:55.320
And they are engaging, which
means they give users pleasure

00:01:55.320 --> 00:01:56.290
from using them.

00:02:00.070 --> 00:02:04.570
This all sounds very
new and very exciting.

00:02:04.570 --> 00:02:06.930
But is it really?

00:02:06.930 --> 00:02:10.680
Some years back, when I first
got my hands on a smartphone

00:02:10.680 --> 00:02:13.740
and started to browse
the web, I totally

00:02:13.740 --> 00:02:16.590
expected it to work
just like on desktop.

00:02:16.590 --> 00:02:19.590
My expectation was that,
if I visit the URL,

00:02:19.590 --> 00:02:21.090
it actually loads, right?

00:02:21.090 --> 00:02:23.100
That's not too much to ask.

00:02:23.100 --> 00:02:25.010
And I expected it
to load quickly,

00:02:25.010 --> 00:02:27.330
within my attention span.

00:02:27.330 --> 00:02:32.240
And please mind
that people like me

00:02:32.240 --> 00:02:34.760
don't want to get stuck on
the loading screen forever.

00:02:34.760 --> 00:02:36.740
And for people like
me, the forever

00:02:36.740 --> 00:02:38.960
usually means 30 seconds.

00:02:38.960 --> 00:02:40.910
That's the reality we live in.

00:02:40.910 --> 00:02:44.036
30 seconds, it's already
forever in mobile.

00:02:44.036 --> 00:02:45.980
So I wanted it to load fast.

00:02:45.980 --> 00:02:48.410
I wanted it to work smoothly,
so that I can actually

00:02:48.410 --> 00:02:50.660
enjoy using the app.

00:02:50.660 --> 00:02:55.010
And I wanted to have an easy
way to access the content

00:02:55.010 --> 00:02:57.290
and be fully immersed
in the experience.

00:02:57.290 --> 00:03:01.190
So those expectations
are pretty old.

00:03:01.190 --> 00:03:05.570
It's not anything new
to expect your website

00:03:05.570 --> 00:03:09.980
to work really well, just in the
way we describe Progressive Web

00:03:09.980 --> 00:03:11.050
Apps.

00:03:11.050 --> 00:03:19.040
So why do we even introduce this
concept of Progressive Web Apps

00:03:19.040 --> 00:03:23.060
as a new concept, if all
we want to talk about

00:03:23.060 --> 00:03:26.320
are actually websites just
done so well that the user has

00:03:26.320 --> 00:03:29.690
a real pleasure from using it?

00:03:29.690 --> 00:03:34.880
We use Progressive Web App
notion to build a mental model

00:03:34.880 --> 00:03:38.730
and to communicate better
about our expectations

00:03:38.730 --> 00:03:40.800
towards the modern web.

00:03:40.800 --> 00:03:45.590
It just makes it easier for us
to wrap our heads around it.

00:03:45.590 --> 00:03:49.010
It also allows us to
effectively communicate

00:03:49.010 --> 00:03:52.760
the expectations and the
new possibilities that

00:03:52.760 --> 00:03:54.950
are coming to the web.

00:03:54.950 --> 00:04:00.560
And by talking about PWA, we
can encode those expectations

00:04:00.560 --> 00:04:02.030
into different models.

00:04:02.030 --> 00:04:04.550
Here, you can see
three of such models.

00:04:04.550 --> 00:04:08.260
The first one is describing
behaviors of a Progressive Web

00:04:08.260 --> 00:04:12.770
App, fast integrated,
ready-able, and engaging.

00:04:12.770 --> 00:04:15.290
The second one is
a PW checklist.

00:04:15.290 --> 00:04:18.630
If you just Google it and
go to the first result,

00:04:18.630 --> 00:04:20.600
you will see a
checklist of features

00:04:20.600 --> 00:04:24.380
that you can pay attention to in
order to enable progressiveness

00:04:24.380 --> 00:04:25.860
in your app.

00:04:25.860 --> 00:04:28.890
And finally, we
encode also a set

00:04:28.890 --> 00:04:32.130
of rules in a tool
called Lighthouse.

00:04:32.130 --> 00:04:34.650
Lighthouse can audit
a website and give you

00:04:34.650 --> 00:04:39.000
a report how progressive
or not progressive it is.

00:04:39.000 --> 00:04:41.280
So these are three
different models,

00:04:41.280 --> 00:04:45.010
three different formats of
describing a Progressive Web

00:04:45.010 --> 00:04:45.510
App.

00:04:45.510 --> 00:04:48.410
But actually, the
notion is the same.

00:04:48.410 --> 00:04:50.730
I'm going to use different
tools like this today

00:04:50.730 --> 00:04:53.580
to talk about progressiveness
and how to achieve it

00:04:53.580 --> 00:04:56.800
on your own websites.

00:04:56.800 --> 00:05:01.180
OK, getting from a website
to a Progressive Web App

00:05:01.180 --> 00:05:02.830
is a process.

00:05:02.830 --> 00:05:05.660
It looks roughly like this.

00:05:05.660 --> 00:05:09.840
As most of the projects, it
starts with a thought, an idea,

00:05:09.840 --> 00:05:10.680
right?

00:05:10.680 --> 00:05:13.560
In my case, thinking is
usually triggered by coffee.

00:05:13.560 --> 00:05:16.590
So here we go, we
start with coffee.

00:05:16.590 --> 00:05:19.200
And while drinking
coffee, you can also

00:05:19.200 --> 00:05:21.270
ponder about the
scope of the project,

00:05:21.270 --> 00:05:25.110
about the things
you want to achieve.

00:05:25.110 --> 00:05:28.170
After that, once you're
done with your coffee,

00:05:28.170 --> 00:05:30.960
you can go and
analyze your website

00:05:30.960 --> 00:05:34.050
to understand your
starting point.

00:05:34.050 --> 00:05:35.880
You need to have
a reference point,

00:05:35.880 --> 00:05:37.860
once you are done
implementing PWA features,

00:05:37.860 --> 00:05:41.070
to know how you did.

00:05:41.070 --> 00:05:43.720
Next step is to prioritize.

00:05:43.720 --> 00:05:47.940
The truth is, we rarely have
the resources to implement all

00:05:47.940 --> 00:05:50.760
of this stuff at once, right?

00:05:50.760 --> 00:05:55.810
And the cool thing about PWA
is that it's a modular concept.

00:05:55.810 --> 00:05:57.960
It's not a monolithic
technology.

00:05:57.960 --> 00:06:00.750
You can actually pick and
choose what to implement

00:06:00.750 --> 00:06:01.660
and in what order.

00:06:01.660 --> 00:06:04.779
And I'm going to talk a
little bit about that later.

00:06:04.779 --> 00:06:06.320
You should always
set your priorities

00:06:06.320 --> 00:06:08.960
according to your user base
and your business needs.

00:06:08.960 --> 00:06:11.400
So always talk to
your stakeholders

00:06:11.400 --> 00:06:14.970
while prioritizing PWA features.

00:06:14.970 --> 00:06:18.000
Then, you should
prepare your tools.

00:06:18.000 --> 00:06:20.640
Every job is easier
when you choose

00:06:20.640 --> 00:06:23.880
the right tools to perform it.

00:06:23.880 --> 00:06:26.580
Finally, you can just
execute your plan,

00:06:26.580 --> 00:06:28.740
implement the features.

00:06:28.740 --> 00:06:31.920
I'll talk about some issues that
you can encounter at this step,

00:06:31.920 --> 00:06:33.340
although it's a
very broad topic.

00:06:33.340 --> 00:06:37.540
And by no means I can
be exhaustive here.

00:06:37.540 --> 00:06:41.160
At the end, there is
sometimes an overlooked step,

00:06:41.160 --> 00:06:45.120
the evaluation,
measure, and evaluate.

00:06:45.120 --> 00:06:47.790
It gives you both a
nice summary of how

00:06:47.790 --> 00:06:49.800
you did in your
migration from web sites

00:06:49.800 --> 00:06:51.490
to Progressive Web Apps.

00:06:51.490 --> 00:06:54.630
But it can also be a very
valuable starting point

00:06:54.630 --> 00:06:58.040
for your next iteration
on the project.

00:06:58.040 --> 00:06:59.720
This is how the
process looks like.

00:06:59.720 --> 00:07:03.460
And we're going to follow it
throughout this presentation.

00:07:03.460 --> 00:07:06.490
OK, so while
drinking our coffee,

00:07:06.490 --> 00:07:09.530
let's talk about
the scope of PWA,

00:07:09.530 --> 00:07:12.640
what this notion
actually includes.

00:07:12.640 --> 00:07:15.640
We know the goal, that we want
to deliver the delightful user

00:07:15.640 --> 00:07:16.750
experience.

00:07:16.750 --> 00:07:22.470
But what are the actual,
practical deliverables?

00:07:22.470 --> 00:07:26.640
Usually, when we
talk about PWA, we

00:07:26.640 --> 00:07:29.850
talk about these three
core technologies first.

00:07:29.850 --> 00:07:32.280
We talk about Service Worker
and related techniques

00:07:32.280 --> 00:07:33.780
like caching.

00:07:33.780 --> 00:07:37.230
They allow you to offer your
users an offline experience.

00:07:37.230 --> 00:07:39.810
But also, they can
improve reliability

00:07:39.810 --> 00:07:43.890
of your app, which can now load
no matter the circumstances

00:07:43.890 --> 00:07:46.520
and also positively
influence the speed

00:07:46.520 --> 00:07:49.560
for your second-time visitors.

00:07:49.560 --> 00:07:53.040
Push notifications allow you
to send the right message

00:07:53.040 --> 00:07:56.986
and bring them back to
your app or re-engage them.

00:07:56.986 --> 00:08:01.770
Add to Home Screen allows
you to make your app feel

00:08:01.770 --> 00:08:05.010
like a first-class
citizen on your mobile.

00:08:05.010 --> 00:08:08.610
The user can install
it to their home screen

00:08:08.610 --> 00:08:11.910
and access it easily,
making it easy for them

00:08:11.910 --> 00:08:14.100
to go back to your app again.

00:08:14.100 --> 00:08:15.810
And all of it, of
course, is enabled

00:08:15.810 --> 00:08:20.550
by HTTPS, which is a bottom
line of a secure web experience.

00:08:20.550 --> 00:08:24.510
I like to call these three
features a native parity core.

00:08:24.510 --> 00:08:28.170
Because they actually
allow us, these days,

00:08:28.170 --> 00:08:31.290
to do on the web the same
things that just recently

00:08:31.290 --> 00:08:34.440
were possible only
on native apps.

00:08:34.440 --> 00:08:36.750
And while they make me super
excited about the future

00:08:36.750 --> 00:08:40.740
of the web, I think there is
much more to Progressive Web

00:08:40.740 --> 00:08:43.770
Apps than just
the native parity.

00:08:43.770 --> 00:08:46.260
Well, let's fill some
of this white space.

00:08:46.260 --> 00:08:48.880
Let's add the
performance factor.

00:08:48.880 --> 00:08:52.120
I cannot stress enough how
important it is to make

00:08:52.120 --> 00:08:56.110
your site fast and performant,
preferably even before you

00:08:56.110 --> 00:09:01.580
implement Service Worker,
push, and Add to Home Screen.

00:09:01.580 --> 00:09:04.880
Making sites performant
includes a lot of techniques,

00:09:04.880 --> 00:09:08.590
like optimizing your
assets, especially images,

00:09:08.590 --> 00:09:13.260
blocking scripts, and making
good use of browser cache.

00:09:13.260 --> 00:09:15.870
Getting this part right
is especially important

00:09:15.870 --> 00:09:17.940
for your first
time visitors, who

00:09:17.940 --> 00:09:20.520
do not have a Service Worker
yet or are on browsers that

00:09:20.520 --> 00:09:23.540
don't fully support it yet.

00:09:23.540 --> 00:09:26.970
They have to rely on network
in order to get to your site.

00:09:26.970 --> 00:09:29.690
So by making it more
performant, using

00:09:29.690 --> 00:09:31.534
a lot of available
techniques, you'll

00:09:31.534 --> 00:09:32.950
make life easier
for them as well.

00:09:35.670 --> 00:09:41.040
As a matter of fact,
going for PWA features

00:09:41.040 --> 00:09:45.000
is in general a very
good audit opportunity,

00:09:45.000 --> 00:09:48.360
not only for performance
issues, but also for UX issues

00:09:48.360 --> 00:09:51.570
and for other problems
with your site.

00:09:51.570 --> 00:09:55.620
It is crucial to make
your website of generally

00:09:55.620 --> 00:10:00.510
good quality before adding the
additional complexity of PWA

00:10:00.510 --> 00:10:01.800
features.

00:10:01.800 --> 00:10:05.460
I personally call
it PWA readiness.

00:10:05.460 --> 00:10:07.440
Especially if you plan
to implement offline

00:10:07.440 --> 00:10:11.450
down the line, you need to be
respectful of user resources,

00:10:11.450 --> 00:10:13.920
like bandwidth and memory.

00:10:13.920 --> 00:10:15.860
And you don't want to
push to the user's cache

00:10:15.860 --> 00:10:18.000
a bloated website.

00:10:18.000 --> 00:10:21.240
Similarly, you don't want
to send push notifications

00:10:21.240 --> 00:10:24.780
to the user, only for him
to come back to your site

00:10:24.780 --> 00:10:28.110
and discover he cannot perform
the action he was asked to do

00:10:28.110 --> 00:10:30.960
because your forms are
convoluted or are not

00:10:30.960 --> 00:10:32.490
accessible, right?

00:10:32.490 --> 00:10:36.060
So first, remember to fix the
basic issues with your site

00:10:36.060 --> 00:10:38.280
and only then move on
to the PWA features.

00:10:41.610 --> 00:10:46.020
All right, our site is PWA
ready, it's performant.

00:10:46.020 --> 00:10:50.330
We already have an idea of how
to implement Service Worker,

00:10:50.330 --> 00:10:52.260
push, and Add to Home Screen.

00:10:52.260 --> 00:10:54.080
Is it all we need to care about?

00:10:54.080 --> 00:10:56.360
Well, the web is
always evolving.

00:10:56.360 --> 00:10:59.450
And only recently,
two features were

00:10:59.450 --> 00:11:02.000
added to the platform,
credentials management

00:11:02.000 --> 00:11:03.380
and payments.

00:11:03.380 --> 00:11:07.550
And I'm pretty sure there
will be more APIs coming

00:11:07.550 --> 00:11:11.640
that will make your user
experience even better

00:11:11.640 --> 00:11:13.190
on your website.

00:11:13.190 --> 00:11:16.430
So you always need to keep an
open mind about what's coming

00:11:16.430 --> 00:11:18.230
and what you can use
in your projects.

00:11:21.400 --> 00:11:24.790
Finally, all of this
is nothing if you

00:11:24.790 --> 00:11:27.400
don't open up with a great UX.

00:11:27.400 --> 00:11:29.440
Good UX drives engagement.

00:11:29.440 --> 00:11:33.580
And without it, you might find
that the gain from implementing

00:11:33.580 --> 00:11:36.850
all the underlying features
is less than expected,

00:11:36.850 --> 00:11:39.100
just as I described
with the push

00:11:39.100 --> 00:11:40.810
or with the Service Worker.

00:11:40.810 --> 00:11:43.600
So always make sure that
all of these features

00:11:43.600 --> 00:11:47.360
are tied by a nice
and smooth UX.

00:11:47.360 --> 00:11:51.230
Finally, it's always a great
comfort and a good practice

00:11:51.230 --> 00:11:54.380
to make decisions based on data.

00:11:54.380 --> 00:11:58.670
For this, you need to
measure things, both before

00:11:58.670 --> 00:12:01.482
and after the implementation
of the PWA feature,

00:12:01.482 --> 00:12:03.065
actually throughout
the whole process.

00:12:06.050 --> 00:12:10.840
So that's the full scope, in
my opinion, of PWA concepts.

00:12:10.840 --> 00:12:14.310
It's much more than just
the Service Worker, right?

00:12:14.310 --> 00:12:16.920
These are all the areas you
should take into account,

00:12:16.920 --> 00:12:20.070
or at least think
about when investing

00:12:20.070 --> 00:12:24.150
how to approach adding
PWA features to your site.

00:12:24.150 --> 00:12:27.290
Well, that's a big chart,
and a lot to digest,

00:12:27.290 --> 00:12:28.620
and quite a monster.

00:12:28.620 --> 00:12:30.960
So how do you eat an elephant?

00:12:30.960 --> 00:12:33.910
I've heard one
mouthful at a time.

00:12:33.910 --> 00:12:35.145
So let's start.

00:12:35.145 --> 00:12:36.460
We had our coffee.

00:12:36.460 --> 00:12:38.940
We understand the
scope of our project.

00:12:38.940 --> 00:12:40.530
Let's actually start it.

00:12:40.530 --> 00:12:43.560
We start with analysis.

00:12:43.560 --> 00:12:47.280
First, you need to audit
the website in order

00:12:47.280 --> 00:12:50.700
to understand the
current state of the app.

00:12:50.700 --> 00:12:54.460
And in order to do that, we
provide a very good tool,

00:12:54.460 --> 00:12:56.100
Lighthouse.

00:12:56.100 --> 00:12:58.530
Lighthouse is a great tool
for website diagnostics.

00:12:58.530 --> 00:13:00.630
It's a Chrome
extension that allows

00:13:00.630 --> 00:13:05.420
you to measure how close your
web app is to a Progressive Web

00:13:05.420 --> 00:13:07.030
App.

00:13:07.030 --> 00:13:09.610
When you install the
extension, Lighthouse,

00:13:09.610 --> 00:13:11.680
and run your website
through it, it

00:13:11.680 --> 00:13:15.970
gives you back a score and
a report that summarizes

00:13:15.970 --> 00:13:17.600
the state of your app for you.

00:13:20.480 --> 00:13:25.010
This is how the average
report might look like, right?

00:13:25.010 --> 00:13:28.790
There are different areas where
you need to pay attention to.

00:13:28.790 --> 00:13:32.930
And there is also a long
list with explanations

00:13:32.930 --> 00:13:36.680
why your website got
this score and not

00:13:36.680 --> 00:13:40.680
another, together with the links
of how to make things better.

00:13:40.680 --> 00:13:42.690
So apart from being
a diagnostic tool,

00:13:42.690 --> 00:13:45.530
it's also a very good
educational tool,

00:13:45.530 --> 00:13:48.080
because just by checking
a report for your website,

00:13:48.080 --> 00:13:49.790
you can learn a
lot about how you

00:13:49.790 --> 00:13:52.010
can make this website better.

00:13:52.010 --> 00:13:54.710
One feature I wanted to
call out is the Share button

00:13:54.710 --> 00:13:57.020
in the top right corner.

00:13:57.020 --> 00:13:58.730
Apart from sharing,
it allows you to save

00:13:58.730 --> 00:14:02.000
this report in JSON format.

00:14:02.000 --> 00:14:04.730
I really encourage you
to save your report

00:14:04.730 --> 00:14:06.140
before you start any projects.

00:14:06.140 --> 00:14:10.700
Because it provides you a
benchmark and a reference point

00:14:10.700 --> 00:14:17.200
that you can compare to
once your project finishes.

00:14:17.200 --> 00:14:19.970
Of course, Lighthouse is
not the only tool available.

00:14:19.970 --> 00:14:21.520
There are other ones.

00:14:21.520 --> 00:14:25.120
And most of them
actually also allow you

00:14:25.120 --> 00:14:28.010
to save the data somewhere.

00:14:28.010 --> 00:14:32.830
So if you have only 15
minutes to analyze your site,

00:14:32.830 --> 00:14:36.400
record and save the results
from the tools mentioned

00:14:36.400 --> 00:14:41.050
above, Lighthouse, the security
panel in Chrome Dev Tools, page

00:14:41.050 --> 00:14:44.024
speed insights, web page test.

00:14:44.024 --> 00:14:46.440
It will allow you to understand
the standing of your site,

00:14:46.440 --> 00:14:49.560
but also provide a
reference for comparison

00:14:49.560 --> 00:14:52.710
after implementation.

00:14:52.710 --> 00:14:54.580
All right, so we
analyzed our website.

00:14:54.580 --> 00:14:56.890
We saved our snapshots of data.

00:14:56.890 --> 00:15:00.670
And we know exactly how it
performs in different areas.

00:15:00.670 --> 00:15:02.650
Now, it's time to prioritize.

00:15:06.850 --> 00:15:09.970
All areas I mentioned, you
should take into account.

00:15:09.970 --> 00:15:12.930
So the question
is, where to start?

00:15:12.930 --> 00:15:16.740
I would say, start at
the beginning, Ensure PWA

00:15:16.740 --> 00:15:18.000
readiness.

00:15:18.000 --> 00:15:21.990
No amount of PWA features will
solve unresponsive clutter

00:15:21.990 --> 00:15:23.880
or a janky website.

00:15:23.880 --> 00:15:26.490
So before you add
new complexity,

00:15:26.490 --> 00:15:29.760
you want your site to be
as lean, smooth working,

00:15:29.760 --> 00:15:33.540
and optimized as
reasonably possible.

00:15:33.540 --> 00:15:36.990
In particular, based
on your outcome,

00:15:36.990 --> 00:15:39.510
of course, because
each site differs,

00:15:39.510 --> 00:15:43.280
you might look into the
areas like optimizing images,

00:15:43.280 --> 00:15:48.120
easy thing and really brings big
gains; remove unnecessary code;

00:15:48.120 --> 00:15:52.860
leverage browser caching, before
you even switch to a Service

00:15:52.860 --> 00:15:56.400
Worker; avoid blocking
code; and divide

00:15:56.400 --> 00:15:59.580
big, monolithic JavaScript
into smaller chunks,

00:15:59.580 --> 00:16:02.340
if adequate for your website.

00:16:02.340 --> 00:16:04.770
These are common things
that are very well known.

00:16:04.770 --> 00:16:08.880
But as your website
evolves over time,

00:16:08.880 --> 00:16:14.110
sometimes they're overlooked
and they go off track.

00:16:14.110 --> 00:16:16.740
So going for PWA is
actually a great moment

00:16:16.740 --> 00:16:21.180
to stop for a moment, audit
them again, and fix the issues,

00:16:21.180 --> 00:16:24.360
if you encounter any.

00:16:24.360 --> 00:16:26.470
Let me show you an example.

00:16:26.470 --> 00:16:29.880
Some time ago, I was working
on the WomanTechmaker.org site.

00:16:29.880 --> 00:16:31.290
I was doing exactly that.

00:16:31.290 --> 00:16:35.610
I was preparing it for
some upcoming PWA features.

00:16:35.610 --> 00:16:41.550
Here, you can see the network
panel of the Chrome Dev Tools.

00:16:41.550 --> 00:16:45.480
What I did here, I just
sorted the assets by size.

00:16:45.480 --> 00:16:49.520
And focusing only on the
very top of this list,

00:16:49.520 --> 00:16:53.990
you can pin down the best
targets for optimization.

00:16:53.990 --> 00:16:58.080
Here, the two biggest files
were the YouTube API file

00:16:58.080 --> 00:17:00.930
and the hero image you
can see on the home page.

00:17:00.930 --> 00:17:04.480
So the question was
how to optimize those.

00:17:04.480 --> 00:17:06.461
Well, let's start
with the hero image.

00:17:06.461 --> 00:17:07.210
It's a hero image.

00:17:07.210 --> 00:17:08.560
So it covers the whole viewport.

00:17:08.560 --> 00:17:11.260
So it needs to be
as big as viewport.

00:17:11.260 --> 00:17:14.369
But it doesn't need to
be bigger than that.

00:17:14.369 --> 00:17:17.819
So I just created two other
versions of this file.

00:17:17.819 --> 00:17:19.950
I saved the medium
and small images.

00:17:19.950 --> 00:17:24.810
I added a few
breakpoints to my CSS.

00:17:24.810 --> 00:17:29.190
And as an outcome on
the medium size page,

00:17:29.190 --> 00:17:35.310
I got a 21% gain of lower weight
of the images on that site.

00:17:35.310 --> 00:17:39.720
And this all took maybe six
minutes altogether to perform.

00:17:39.720 --> 00:17:43.620
And this 21% gain, just
by optimizing one image.

00:17:43.620 --> 00:17:49.260
Really, small improvements can
lead to big gains in this area.

00:17:49.260 --> 00:17:54.990
Similarly, I was able to replace
heavy assets with simpler ones.

00:17:54.990 --> 00:17:58.530
Previously, we used the
Player API for YouTube video

00:17:58.530 --> 00:18:01.620
on the page, which
today is actually

00:18:01.620 --> 00:18:03.300
possible to do
with Simple iframe

00:18:03.300 --> 00:18:07.590
with the correct configuration
to embed the video.

00:18:07.590 --> 00:18:09.600
So I just replaced
it with the iframe.

00:18:09.600 --> 00:18:12.720
And the whole 400
kilobytes of YouTube API

00:18:12.720 --> 00:18:15.060
disappeared from my site, right?

00:18:15.060 --> 00:18:16.410
And it's one line of code.

00:18:16.410 --> 00:18:18.420
It's very easy to do.

00:18:18.420 --> 00:18:21.160
Similarly, we
realized that we don't

00:18:21.160 --> 00:18:23.410
use the full extent
of the load-library,

00:18:23.410 --> 00:18:25.150
we just use few functions.

00:18:25.150 --> 00:18:27.490
So we can replace
it with the core.

00:18:27.490 --> 00:18:30.850
It brings us from 24
kilobytes to four kilobytes.

00:18:30.850 --> 00:18:33.130
And maybe 20 kilobytes
is not a great deal

00:18:33.130 --> 00:18:40.650
of amount of download data, but
those small gains do add up.

00:18:40.650 --> 00:18:46.250
Finally, we started to leverage
browser caching better.

00:18:46.250 --> 00:18:48.210
In the previous
version of the site,

00:18:48.210 --> 00:18:55.080
we were versioning our
assets by the build version.

00:18:55.080 --> 00:18:57.840
This means that with
each build of our site,

00:18:57.840 --> 00:19:00.180
this number changed and
the name of the file

00:19:00.180 --> 00:19:03.570
changed, which means the browser
would need to download it

00:19:03.570 --> 00:19:06.930
again, even if this particular
asset did not change,

00:19:06.930 --> 00:19:10.230
just because the overall
build for this site changed.

00:19:10.230 --> 00:19:14.910
So we switched it to the
content-based hashing instead.

00:19:14.910 --> 00:19:17.860
Now, only if the content
of the file changes,

00:19:17.860 --> 00:19:20.850
we change the hash and
therefore the filename.

00:19:20.850 --> 00:19:25.230
And this way, we can
optimize the browser caching.

00:19:25.230 --> 00:19:28.470
This allows users to
download much less resources

00:19:28.470 --> 00:19:31.490
than in the previous use case.

00:19:31.490 --> 00:19:35.980
So you can see all of those
changes were pretty simple

00:19:35.980 --> 00:19:38.120
and were very easy to achieve.

00:19:38.120 --> 00:19:40.800
And they did add up to
big gains on our website.

00:19:44.060 --> 00:19:46.910
Once you are PWA
ready, you should

00:19:46.910 --> 00:19:49.375
ensure safety of your users.

00:19:52.020 --> 00:19:55.610
We want to develop great
Progressive Web Apps in order

00:19:55.610 --> 00:20:02.280
to leverage the frictionless
and accessible web out there.

00:20:02.280 --> 00:20:03.830
But the web is also dangerous.

00:20:03.830 --> 00:20:07.980
So keeping your users
safe is hugely important.

00:20:07.980 --> 00:20:11.770
So I would go for HTTPS
as one of the first things

00:20:11.770 --> 00:20:14.750
to implement on your
site, if you go for PWA.

00:20:14.750 --> 00:20:18.740
Also, a lot of new
web APIs actually

00:20:18.740 --> 00:20:22.490
require HTTPS to be
enabled on your site.

00:20:22.490 --> 00:20:26.370
So it should be a
natural step to take.

00:20:26.370 --> 00:20:29.230
Once your site is
PWA ready and secure,

00:20:29.230 --> 00:20:31.480
you can simply follow
your business needs.

00:20:31.480 --> 00:20:35.310
And this pretty much depends on
your site and on your business.

00:20:35.310 --> 00:20:40.140
For example, if user acquisition
is important for your business,

00:20:40.140 --> 00:20:42.210
you should focus on perf.

00:20:42.210 --> 00:20:45.510
Because performance
site that loads

00:20:45.510 --> 00:20:48.300
quickly on the
first visit allows

00:20:48.300 --> 00:20:50.520
you to gain some more users.

00:20:50.520 --> 00:20:54.120
If you have a huge bounce rate
because of unperformant site,

00:20:54.120 --> 00:20:58.060
a lot of users don't even see
your site in the first place.

00:20:58.060 --> 00:21:02.270
So for user acquisition, you
might want to focus on perf.

00:21:02.270 --> 00:21:06.800
If you care about users that
are in low connectivity areas

00:21:06.800 --> 00:21:10.100
or in, I don't know,
London Tube maybe, then you

00:21:10.100 --> 00:21:12.980
should focus offline, on
implementing Service Worker

00:21:12.980 --> 00:21:14.240
and the offline experience.

00:21:14.240 --> 00:21:18.680
Because this is where the
big gain for your users is.

00:21:18.680 --> 00:21:19.970
User retention?

00:21:19.970 --> 00:21:23.090
Focus on push and
Add to Home Screen.

00:21:23.090 --> 00:21:27.350
This allows you to reengage
users in your experience.

00:21:27.350 --> 00:21:30.560
And you can pick and choose
because PWA is modular.

00:21:30.560 --> 00:21:34.830
And you can see which areas
benefit your business best.

00:21:39.210 --> 00:21:40.880
Now we're choosing the tools.

00:21:40.880 --> 00:21:44.130
And there is a lot of
tools out there, right?

00:21:44.130 --> 00:21:46.020
There is a lot of tools.

00:21:46.020 --> 00:21:50.010
There are some starter
packs and generators

00:21:50.010 --> 00:21:52.110
for different
frameworks and libraries

00:21:52.110 --> 00:21:54.390
that allow you to
build a Progressive Web

00:21:54.390 --> 00:21:55.800
App from scratch.

00:21:55.800 --> 00:22:00.030
But I want to focus on migrating
an existing website to a PWA.

00:22:00.030 --> 00:22:04.920
That's why I will give a shout
to one library in particular.

00:22:04.920 --> 00:22:07.790
It's the Workbox library.

00:22:07.790 --> 00:22:09.590
When developing
offline experience,

00:22:09.590 --> 00:22:11.930
things might get a
little bit fiddly.

00:22:11.930 --> 00:22:13.430
There is also a
lot of boilerplate

00:22:13.430 --> 00:22:17.390
because many tasks are simply
repetitive, like caching.

00:22:17.390 --> 00:22:21.480
So my advice is, don't
do things by hand.

00:22:21.480 --> 00:22:23.330
They might bite you.

00:22:23.330 --> 00:22:28.400
Remove both stress and
boilerplate with Workbox.

00:22:28.400 --> 00:22:31.100
And luckily, at
quarter to three,

00:22:31.100 --> 00:22:33.920
we have a wonderful
workshop for you

00:22:33.920 --> 00:22:37.620
from website to PWA with
Workbox on the third floor.

00:22:37.620 --> 00:22:40.040
So if you want to see all
the ins and outs and gains

00:22:40.040 --> 00:22:42.855
you can get from this
library for your website,

00:22:42.855 --> 00:22:44.105
go and check out the training.

00:22:46.850 --> 00:22:49.870
Yay, finally, we
got to the point

00:22:49.870 --> 00:22:55.210
where we can implement
our PWA features.

00:22:55.210 --> 00:22:57.850
This is the hardest part
to give any generic advice

00:22:57.850 --> 00:23:01.900
on because it differs a lot
from project to project, right?

00:23:01.900 --> 00:23:04.480
So instead, let
me share with you

00:23:04.480 --> 00:23:07.560
an example of how we solved an
offline dilemma in the Women

00:23:07.560 --> 00:23:08.980
Techmaker site.

00:23:08.980 --> 00:23:11.020
I think it shows nicely
the type of problems

00:23:11.020 --> 00:23:14.740
you need to solve when
implementing PWA features,

00:23:14.740 --> 00:23:17.550
in this case offline.

00:23:17.550 --> 00:23:22.950
So this is a Women Techmaker
site seen as online.

00:23:22.950 --> 00:23:24.490
And it's a beautiful site.

00:23:24.490 --> 00:23:26.880
It's a very rich,
visual experience,

00:23:26.880 --> 00:23:31.850
lots of images, a really,
really nice looking site.

00:23:31.850 --> 00:23:35.910
And I was supposed to implement
offline experience for it.

00:23:35.910 --> 00:23:38.370
If I wanted to save
all of this to cache,

00:23:38.370 --> 00:23:40.680
that would be very, very heavy.

00:23:40.680 --> 00:23:45.040
So caching all the images
was rather a no go.

00:23:45.040 --> 00:23:47.250
How about new images?

00:23:47.250 --> 00:23:49.590
Well, this site
looks kind of ugly.

00:23:49.590 --> 00:23:51.180
But it's also unusable.

00:23:51.180 --> 00:23:53.520
I can't even go to a
different sub page.

00:23:53.520 --> 00:23:55.140
Because the Menu
button is missing.

00:23:55.140 --> 00:23:56.910
So it's totally unusable.

00:23:56.910 --> 00:23:59.970
Therefore, caching no
images is also a no go.

00:23:59.970 --> 00:24:01.530
How do we find a middle point?

00:24:01.530 --> 00:24:04.340
How do we negotiate this?

00:24:04.340 --> 00:24:07.430
Well, I took a deeper
look at the website

00:24:07.430 --> 00:24:10.720
to really understand
its structure.

00:24:10.720 --> 00:24:13.850
I divided images by function.

00:24:13.850 --> 00:24:15.010
Let's take a look.

00:24:15.010 --> 00:24:20.030
The yellow images are the
navigational and action images.

00:24:20.030 --> 00:24:23.170
They are there so that users
can navigate and perform

00:24:23.170 --> 00:24:25.480
some activities on our website.

00:24:25.480 --> 00:24:27.520
Therefore, they're
crucial for the site

00:24:27.520 --> 00:24:29.920
to be fully functional.

00:24:29.920 --> 00:24:33.130
Then, the red ones are
branding and priority.

00:24:33.130 --> 00:24:35.090
They allow you to
connect with your user.

00:24:35.090 --> 00:24:36.650
They're very important.

00:24:36.650 --> 00:24:38.410
For example, thanks
to them, the user

00:24:38.410 --> 00:24:40.690
recognizes which site
they're looking at, right?

00:24:40.690 --> 00:24:44.240
So they are high
priority images.

00:24:44.240 --> 00:24:47.270
Then the blue ones
are decorative.

00:24:47.270 --> 00:24:49.280
They make the side look nice.

00:24:49.280 --> 00:24:50.660
They add to the experience.

00:24:50.660 --> 00:24:53.690
But if they're missing, they
don't really break anything.

00:24:53.690 --> 00:24:55.550
The site is slightly less rich.

00:24:55.550 --> 00:24:57.790
But it's still usable.

00:24:57.790 --> 00:25:00.340
And the third type of
picture, the green ones,

00:25:00.340 --> 00:25:02.080
I call informative.

00:25:02.080 --> 00:25:03.640
It means they look nice.

00:25:03.640 --> 00:25:06.400
They add to the graphical
layer of the site.

00:25:06.400 --> 00:25:10.280
But they also convey
some message within them.

00:25:10.280 --> 00:25:14.490
So how do we deal with those
four different types of images?

00:25:14.490 --> 00:25:18.600
Well, for navigation
and action images,

00:25:18.600 --> 00:25:21.030
I just inline them with SVG.

00:25:21.030 --> 00:25:21.970
They're usually small.

00:25:21.970 --> 00:25:23.350
They're icon-like.

00:25:23.350 --> 00:25:24.860
So it's easy to do.

00:25:24.860 --> 00:25:28.074
And if you embed them in
your HTML, if you cache HTML,

00:25:28.074 --> 00:25:29.740
they're going to
always be there, right?

00:25:29.740 --> 00:25:30.760
So problem solved.

00:25:30.760 --> 00:25:33.550
You don't even need to come
up with caching strategy

00:25:33.550 --> 00:25:34.360
with them.

00:25:34.360 --> 00:25:38.450
Because if the HTML is there,
your images are there as well.

00:25:38.450 --> 00:25:39.575
Now, branding and priority.

00:25:42.390 --> 00:25:44.550
I want for them
to always be there

00:25:44.550 --> 00:25:47.100
because they're
important for me, because

00:25:47.100 --> 00:25:48.580
of my business case.

00:25:48.580 --> 00:25:49.680
So I precache them.

00:25:49.680 --> 00:25:52.620
It means when user enters
the site, in this case,

00:25:52.620 --> 00:25:55.110
I precache them with
the Workbox library.

00:25:55.110 --> 00:25:56.670
I just push them
to the user cache

00:25:56.670 --> 00:25:58.090
because they are important.

00:25:58.090 --> 00:26:02.510
And without them, their
experience will be broken.

00:26:02.510 --> 00:26:07.070
Now, decorative, I employed
the runtime cache strategy,

00:26:07.070 --> 00:26:10.070
which means, as user
navigates through the site

00:26:10.070 --> 00:26:13.920
and is online, I download those
pictures and save to the cache.

00:26:13.920 --> 00:26:16.400
Because there is high
likelihood that the user

00:26:16.400 --> 00:26:19.070
will want to go
back to those sites

00:26:19.070 --> 00:26:20.990
later on when they're offline.

00:26:20.990 --> 00:26:24.590
But if the user doesn't venture
to some parts of my site,

00:26:24.590 --> 00:26:31.090
I just show a fallback
instead, a placeholder, right?

00:26:31.090 --> 00:26:34.800
The site maybe looks less
rich, but it's still usable.

00:26:34.800 --> 00:26:36.330
And I didn't blow
the user's cache

00:26:36.330 --> 00:26:39.800
with a lot of decorative images.

00:26:39.800 --> 00:26:43.670
Now, informative images
are fancy ones in the slot.

00:26:43.670 --> 00:26:47.210
Because here, I use full
power of Service Worker.

00:26:47.210 --> 00:26:49.240
Service worker is just
a JavaScript file,

00:26:49.240 --> 00:26:51.630
which means you can put
a lot of logic into it.

00:26:51.630 --> 00:26:56.120
Here, I wanted to be able not to
save all the logos to the user

00:26:56.120 --> 00:27:00.230
cache, but still convey the
message, who are the sponsors?

00:27:00.230 --> 00:27:05.720
So instead of the logos,
I generate the images

00:27:05.720 --> 00:27:10.310
on the fly in Service
Worker, using the alt text

00:27:10.310 --> 00:27:12.530
from the image stack, right?

00:27:12.530 --> 00:27:15.470
So instead of saving
all the images,

00:27:15.470 --> 00:27:19.430
I generate them on the fly
to not have a real image

00:27:19.430 --> 00:27:21.780
but still convey the message.

00:27:21.780 --> 00:27:24.620
And this is just
an example of how

00:27:24.620 --> 00:27:28.820
you can deal with images and
four different strategies.

00:27:28.820 --> 00:27:31.460
The message I want to convey
is that you should really

00:27:31.460 --> 00:27:33.890
look deeply into the
structure of your site

00:27:33.890 --> 00:27:36.800
and type of content you
have, and try to divide it,

00:27:36.800 --> 00:27:38.630
and come up with
different strategies

00:27:38.630 --> 00:27:40.550
to different parts
of your content.

00:27:40.550 --> 00:27:43.550
And this way, you can provide
the best user experience

00:27:43.550 --> 00:27:45.530
for your users while offline.

00:27:50.390 --> 00:27:52.810
OK, once we
implement everything,

00:27:52.810 --> 00:27:55.090
we need to evaluate the site.

00:27:55.090 --> 00:27:59.770
And it's often an
overlooked step.

00:27:59.770 --> 00:28:03.460
Remember when I told you to
save the snapshots of data

00:28:03.460 --> 00:28:05.160
from before the implementation?

00:28:05.160 --> 00:28:07.420
Well, now, they come in handy.

00:28:07.420 --> 00:28:10.810
You can go again through
the audit procedure

00:28:10.810 --> 00:28:12.820
and record all the
same stack traces

00:28:12.820 --> 00:28:16.660
and compare the outcome
with the previous version.

00:28:16.660 --> 00:28:18.640
Hopefully, it will
give you a surge

00:28:18.640 --> 00:28:22.930
of joy, as you see metrics
improve on your site.

00:28:22.930 --> 00:28:26.330
However, there is one caveat.

00:28:26.330 --> 00:28:28.340
Metrics are helpful.

00:28:28.340 --> 00:28:30.200
But they're only metrics.

00:28:30.200 --> 00:28:33.570
Getting a 100 on
Lighthouse feels great.

00:28:33.570 --> 00:28:37.160
I can assure you it
feels really good.

00:28:37.160 --> 00:28:40.400
And it may also help to
convince your stakeholders

00:28:40.400 --> 00:28:43.650
about the impact you achieved
or maybe get your project

00:28:43.650 --> 00:28:46.020
funding for the next iteration.

00:28:46.020 --> 00:28:49.850
But it does not answer how the
users are finding your changes,

00:28:49.850 --> 00:28:51.290
right?

00:28:51.290 --> 00:28:53.630
And as a matter of
fact, PWA influences

00:28:53.630 --> 00:28:56.120
many areas of your app.

00:28:56.120 --> 00:28:57.387
It influences the UX.

00:28:57.387 --> 00:28:58.970
For example, now,
you need to consider

00:28:58.970 --> 00:29:01.370
a lot of offline
scenarios, for example,

00:29:01.370 --> 00:29:04.490
how users will try to
buy your product when

00:29:04.490 --> 00:29:06.770
they're in an offline mode.

00:29:06.770 --> 00:29:08.660
It influences your workflow.

00:29:08.660 --> 00:29:11.660
You need to add things
to users' cache.

00:29:11.660 --> 00:29:15.170
And it's very hard to manage
this process manually.

00:29:15.170 --> 00:29:18.290
So maybe you need to invest
into some build tools

00:29:18.290 --> 00:29:21.130
and into your
workflow optimization.

00:29:21.130 --> 00:29:22.610
It influences your measuring.

00:29:22.610 --> 00:29:25.270
Now, a lot of interaction
of your user with your site

00:29:25.270 --> 00:29:27.520
might happen when
they're offline, right?

00:29:27.520 --> 00:29:30.820
So you need to implement
offline analytics.

00:29:30.820 --> 00:29:34.000
And it might also
influence your SEO.

00:29:34.000 --> 00:29:37.690
So you should check if
nothing's changed there

00:29:37.690 --> 00:29:40.550
or if the things were even
improved on the SEO part.

00:29:46.370 --> 00:29:48.220
So that's the process.

00:29:48.220 --> 00:29:52.510
That's how we got from
the website to PWA.

00:29:52.510 --> 00:29:54.170
First, we analyzed the website.

00:29:54.170 --> 00:29:56.650
And then we prioritized
and we chose the features

00:29:56.650 --> 00:29:59.030
we wanted to focus on.

00:29:59.030 --> 00:30:03.380
We get a set of tools to
perform those actions.

00:30:03.380 --> 00:30:05.610
Then we implemented our changes.

00:30:05.610 --> 00:30:09.364
And then we evaluated.

00:30:09.364 --> 00:30:11.460
And the important
thing is this can

00:30:11.460 --> 00:30:13.980
be an iterative process, right?

00:30:13.980 --> 00:30:15.810
Each ending point
where you measure

00:30:15.810 --> 00:30:19.350
can be also a starting
point for the next iteration

00:30:19.350 --> 00:30:20.940
of your website.

00:30:20.940 --> 00:30:24.030
The web develops, and your
websites will develop over time

00:30:24.030 --> 00:30:27.490
as well, and your user
needs will change over time,

00:30:27.490 --> 00:30:29.970
so you need to keep
going back and checking

00:30:29.970 --> 00:30:32.370
what can be done to provide
better experience for them.

00:30:34.910 --> 00:30:37.760
Luckily, you're not
alone in this road

00:30:37.760 --> 00:30:40.160
for perfection of your website.

00:30:40.160 --> 00:30:41.570
There is a lot of resources.

00:30:41.570 --> 00:30:45.320
And a lot of them are
available to you today

00:30:45.320 --> 00:30:46.940
at this conference.

00:30:46.940 --> 00:30:48.080
There is Lighthouse tool.

00:30:48.080 --> 00:30:51.290
You can use it both as a
Chrome extension and online.

00:30:51.290 --> 00:30:56.270
And there is one real life
Lighthouse on the first floor.

00:30:56.270 --> 00:30:58.710
So feel free to give it a try.

00:30:58.710 --> 00:31:01.760
There are site clinics where
you can consult the healthiness

00:31:01.760 --> 00:31:04.700
of your site with Googlers.

00:31:04.700 --> 00:31:06.200
They have been on
the third floor.

00:31:06.200 --> 00:31:07.529
We had some office hours.

00:31:07.529 --> 00:31:09.320
If you have any questions
after the session

00:31:09.320 --> 00:31:12.440
or want to talk to me, I'll
be present in the office hours

00:31:12.440 --> 00:31:16.460
area on the third floor
after the session.

00:31:16.460 --> 00:31:19.070
There is the Instructor Led
Training, quarter to three,

00:31:19.070 --> 00:31:20.870
that walks you through Workbox.

00:31:20.870 --> 00:31:23.210
And of course, there is the
Progressive Web Apps section

00:31:23.210 --> 00:31:25.490
on developers.Google.com
that I really

00:31:25.490 --> 00:31:28.070
encourage you to try out.

00:31:28.070 --> 00:31:29.640
Thank you very much.

00:31:29.640 --> 00:31:31.220
I hope you enjoyed the session.

00:31:31.220 --> 00:31:32.560
And see you around.

00:31:32.560 --> 00:31:33.760
[APPLAUSE]

00:31:33.760 --> 00:31:37.110
[MUSIC PLAYING]

