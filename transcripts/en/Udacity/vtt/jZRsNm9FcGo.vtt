WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
We've seen a few examples, measuring the time of execution

00:00:03.000 --> 00:00:06.000
of toy programs of a loop that does nothing.

00:00:06.000 --> 00:00:11.000
What we care about though, is the time of execution of our indexing code.

00:00:11.000 --> 00:00:17.000
What I'm going to do next is write a program to be able to test the time of execution of indexing code.

00:00:17.000 --> 00:00:19.000
To get a good test, we need to make a big index.

00:00:19.000 --> 00:00:23.000
We need to fill up an index with lots and lots of words, and we could do that by hand.

00:00:23.000 --> 00:00:25.000
That would take a lot of time and effort.

00:00:25.000 --> 00:00:29.000
What I'm going to do instead is define a procedure that makes a big index.

00:00:29.000 --> 00:00:36.000
What it does is take in a size, and then it's going to fill up an index with that number of words.

00:00:36.000 --> 00:00:39.000
To fill up the index with that number of keywords, we need to generate different words.

00:00:39.000 --> 00:00:44.000
What I've done is create a variable called "letters" that initially is all a's.

00:00:44.000 --> 00:00:49.000
As we go through the loop, we go through the loop size number of times.

00:00:49.000 --> 00:00:53.000
We keep making a new string. We add that string to the index.

00:00:53.000 --> 00:00:56.000
I'll explain what make_string does later.

00:00:56.000 --> 00:01:00.000
We add that string to the index. Then we change the letters.

00:01:00.000 --> 00:01:05.000
We're going to keep increasing the letter. Once we get to z, we wrap around.

00:01:05.000 --> 00:01:08.000
For now it's not too important to understand everything in this code,

00:01:08.000 --> 00:01:10.000
but I do want to walk through the code a little bit.

00:01:10.000 --> 00:01:14.000
What this loop is doing is going through all the positions in the letters array.

00:01:14.000 --> 00:01:17.000
We filled this up with 8 different elements.

00:01:17.000 --> 00:01:21.000
We're going to go through those elements, starting from the last one and going backwards.

00:01:21.000 --> 00:01:26.000
This range group goes from the length minus 1 to zero, stepping by -1.

00:01:26.000 --> 00:01:28.000
We're going to check each letter.

00:01:28.000 --> 00:01:31.000
If the letter is less than z, that means we can increase it.

00:01:31.000 --> 00:01:34.000
We're going to increase it using this code here.

00:01:34.000 --> 00:01:37.000
I'll talk soon about the code that turns letters into numbers,

00:01:37.000 --> 00:01:39.000
but what this expression does is get the next letter.

00:01:39.000 --> 00:01:43.000
If the letter was an 'a,' the result after this will be a 'b.'

00:01:43.000 --> 00:01:49.000
We're going to replace the letter at that position in the letters list with the next letter.

00:01:49.000 --> 00:01:52.000
If the letter is a 'z,' we don't want to go beyond the alphabet,

00:01:52.000 --> 00:01:55.000
so instead we're going to set that letter to 'a,' and we're going to go back

00:01:55.000 --> 00:01:57.000
through the loop to find the next letter.

00:01:57.000 --> 00:02:02.000
Once we've found one less than z, we break. We only need to change one letter.

00:02:02.000 --> 00:02:08.000
What the make_string procedure does--that we call here--is just turn that array into 1 string.

00:02:08.000 --> 00:02:12.000
It's going through the elements of p, which is this list of letters that keeps changing,

00:02:12.000 --> 00:02:15.000
and concatenating all those letters into one string.

00:02:15.000 --> 00:02:18.000
The whole point of this is to allow us to easily make big indexes,

00:02:18.000 --> 00:02:21.000
so we can run tests on different-sized indexes.

00:02:21.000 --> 00:02:24.000
Let's try this in the Python shell.

00:02:24.000 --> 00:02:27.000
First I'll show you what the result is when we use make&lt;u&gt;big&lt;/u&gt;index.

00:02:27.000 --> 00:02:30.000
We'll start with a fairly small one, so I'm passing in 3 as the size.

00:02:30.000 --> 00:02:33.000
What make&lt;u&gt;big&lt;/u&gt;index gives us is an index with three keywords--

00:02:33.000 --> 00:02:38.000
"aaaaaaaa," "aaaaaaab," "aaaaaaac."

00:02:38.000 --> 00:02:41.000
For each of them there's one URL, which is the name "fake."

00:02:41.000 --> 00:02:47.000
If we pass in a bigger value, this will have an index with 100 keywords,

00:02:47.000 --> 00:02:49.000
so we're going to pass in 100 as the size.

00:02:49.000 --> 00:02:53.000
We get this big index, and you can see it's starting to change the second from the last letter

00:02:53.000 --> 00:02:57.000
to make sure each word is a different word in the index.

00:02:57.000 --> 00:03:03.000
What we want to do now is look at how the times of execution take for different size indexes.

00:03:03.000 --> 00:03:06.000
Let's make a really big index.

00:03:06.000 --> 00:03:10.000
What we're going to do is make an index of size 10,000.

00:03:10.000 --> 00:03:14.000
Remember our concern is to time for lookups--that's the operation that's going to happen most frequently.

00:03:14.000 --> 00:03:17.000
We're not timing the time to make the big index.

00:03:17.000 --> 00:03:20.000
Let's see what the time is to do a lookup.

00:03:20.000 --> 00:03:25.000
I'll time the execution of looking up in index10000 the keyword,

00:03:25.000 --> 00:03:28.000
and the word makes a difference.

00:03:28.000 --> 00:03:34.000
First, let's try looking up the word "udacity," which sadly is not in our index.

00:03:34.000 --> 00:03:37.000
We'd need a much bigger index to get up to Udacity.

00:03:37.000 --> 00:03:43.000
The time of execution is shown here--it's 0.0008 seconds.

00:03:43.000 --> 00:03:46.000
It's getting close to a millisecond but still quite fast.

00:03:46.000 --> 00:03:51.000
Let's make a bigger index. This time we have 100,000 keywords.

00:03:51.000 --> 00:03:55.000
It's going to take a little longer to make it, but we're not worrying about the time to make it now.

00:03:55.000 --> 00:03:57.000
What we care about is the timeo to do a lookup.

00:03:57.000 --> 00:03:59.000
[Approximately five minutes later...]

00:03:59.000 --> 00:04:03.000
That took a long time. Let's see how many entries there are.

00:04:03.000 --> 00:04:06.000
We can look at the very last element in our index,

00:04:06.000 --> 00:04:11.000
and we can see we got to "aaaafryd," which I don't know how to pronounce.

00:04:11.000 --> 00:04:15.000
Another way to see that, which we didn't talk about yet,

00:04:15.000 --> 00:04:18.000
is we can actually index from the back using negative numbers.

00:04:18.000 --> 00:04:22.000
If we use -1 as the index, that will give us the last entry in the list.

00:04:22.000 --> 00:04:27.000
Now we'll try doing a timed execution. We're going to lookup in the 10,000-sized index.

00:04:27.000 --> 00:04:30.000
We'll see the time is pretty similar to what it was before.

00:04:30.000 --> 00:04:34.000
That time might vary a little bit. Let's try it once more. Again, it's just under a millisecond.

00:04:34.000 --> 00:04:42.000
Now we'll try, instead of the 10,000 index, looking up in the 100,000 length index the same lookup.

00:04:42.000 --> 00:04:47.000
And we see that the time is now 10 times that.

00:04:47.000 --> 00:04:53.000
It's now about 8.6 milliseconds whereas before it was 0.9 milliseconds.

00:04:53.000 --> 00:04:55.000
For consistency, let's try that again.

00:04:55.000 --> 00:04:59.000
We'll note that these timings vary a little bit each time we do it.

00:04:59.000 --> 00:05:02.000
There are lots of reasons why the time varies.

00:05:02.000 --> 00:05:05.000
We're running lots of other things on the computer at the same time.

00:05:05.000 --> 00:05:08.000
It's not the case that we have total control over the processor

00:05:08.000 --> 00:05:10.000
and running exactly the same thing every time,

00:05:10.000 --> 00:05:12.000
because all of the other programs might be doing other things.

00:05:12.000 --> 00:05:15.000
The other reason the time can vary is where things are in memory.

00:05:15.000 --> 00:05:18.000
Sometimes it's very quick to lookup a value in memory.

00:05:18.000 --> 00:05:20.000
Sometimes it takes longer.

00:05:20.000 --> 00:05:23.000
We're not going to talk about the details of that.

00:05:23.000 --> 00:05:27.000
What matters is that the time is roughly the same each time we execute it.

00:05:27.000 --> 00:05:30.000
It really depends on the size of the input.

00:05:30.000 --> 00:05:33.000
In this case, it's the size of the input table.

00:05:33.000 --> 00:05:36.000
When we increase the size of the table to have 100,000 entries,

00:05:36.000 --> 00:05:40.000
it's about 10 times as slow as when we had 10,000 entries.

00:05:40.000 --> 00:05:45.000
Now let's have a few quizzes to see if you can guess how these timings work.

