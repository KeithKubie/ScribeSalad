WEBVTT
Kind: captions
Language: en

00:00:00.280 --> 00:00:03.280
In order to create a circle similar to the circle that

00:00:03.280 --> 00:00:06.950
represented China in the gapminder visualization,

00:00:06.950 --> 00:00:11.580
we'll first need to figure out a way to map data values to pixels.

00:00:11.580 --> 00:00:17.500
As I just mentioned, d3's scale module allows us to map from data values

00:00:17.500 --> 00:00:23.460
to pixel values, or rather, from any arbitrary domain to any arbitrary range.

00:00:23.460 --> 00:00:27.230
As you can see here in the auto complete that Chrome provides for us,

00:00:27.230 --> 00:00:33.510
there's a linear scale, a log scale, ordinal, power, and so forth.

00:00:33.510 --> 00:00:36.870
For the y axis, we'll be using a linear scale.

00:00:36.870 --> 00:00:43.170
And with this scale, we'll be mapping a domain from 15 to 90 into a range

00:00:43.170 --> 00:00:49.390
corresponding to the height of our SVG element, in this case 150 pixels.

00:00:49.390 --> 00:00:54.590
One quirk I just mentioned is that since SVG's coordinate space actually has

00:00:54.590 --> 00:00:59.070
zero values for y near the top and as you go down on the page the y

00:00:59.070 --> 00:01:02.810
value increases, we actually want to flip the bounds for the range.

00:01:02.810 --> 00:01:04.730
Such that they properly get mapped.

00:01:04.730 --> 00:01:08.950
What this says here is create a scale that's linear,

00:01:08.950 --> 00:01:15.790
maps to the domain 15 to 90, and to the range 150 and zero.

00:01:15.790 --> 00:01:20.910
So in our case, the greatest domain value maps to the highest pixel value,

00:01:20.910 --> 00:01:25.010
in this case zero being closest to the top of the browser window.

00:01:25.010 --> 00:01:28.940
As you can see here, what's returned is actually a function.

00:01:28.940 --> 00:01:30.890
And as I previously mentioned,

00:01:30.890 --> 00:01:36.630
a scale can be thought of as a functional mapping from a domain to a range.

00:01:36.630 --> 00:01:39.230
And that's exactly what d3 returns to us.

00:01:39.230 --> 00:01:44.580
A function that, if given an x value, maps to a range appropriately, and

00:01:44.580 --> 00:01:47.260
returns the value it's been mapped into.

00:01:47.260 --> 00:01:50.620
Let us store the scale this time in a variable y,

00:01:50.620 --> 00:01:53.430
corresponding to the scale of the y axis.

00:01:53.430 --> 00:01:58.070
Since D3's API is very general and adaptable I'm simply going to

00:01:58.070 --> 00:02:02.580
reuse the functions I just called but this time to create an x scale.

