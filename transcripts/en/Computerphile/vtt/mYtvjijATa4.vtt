WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:02.599
Dr. Steve Bagley:
- So on Monday the 16th of October, 2017,

00:00:02.599 --> 00:00:05.940
two researchers of the Belgian University released

00:00:06.220 --> 00:00:09.365
information of an exploit that they've found

00:00:09.365 --> 00:00:12.509
for the security mechanism used on all major

00:00:12.670 --> 00:00:14.081
Wi-Fi connections these days.

00:00:14.081 --> 00:00:16.000
So this is WPA, the encryption protocol that was

00:00:16.000 --> 00:00:18.100
brought in to replace the early one,

00:00:18.280 --> 00:00:21.460
WEP, which was basically useless.

00:00:21.460 --> 00:00:24.400
So this one has been proven to be mathematically correct.

00:00:24.940 --> 00:00:26.710
It's been proven to be mathematically

00:00:26.710 --> 00:00:28.160
secure and so it was thought

00:00:28.160 --> 00:00:31.820
that you wouldn't be able to attack it. And for the last 15 years or so

00:00:32.020 --> 00:00:37.900
there's been a few fringe effects that you could exploit to get certain things,

00:00:37.960 --> 00:00:40.660
but in general, it's secure. Until yesterday ðŸ˜²

00:00:43.270 --> 00:00:44.889
The way that WPA works is that

00:00:44.889 --> 00:00:49.260
when the client, your computer, connects to the base station initially starts off

00:00:49.500 --> 00:00:53.180
unencrypted and very quickly they exchange a series of messages between the two

00:00:53.186 --> 00:00:57.180
which get them so they've agreed on a key that they're going to use to encrypt the message.

00:00:57.699 --> 00:01:02.939
And so to understand how this attack works we need to understand how those messages are transmitted,

00:01:02.940 --> 00:01:07.080
and then how that's used to encrypt the data, which is why I brought Mike

00:01:07.689 --> 00:01:10.559
along to sort of help talk about the encryption side of things

00:01:11.080 --> 00:01:12.180
Hello, Mike

00:01:12.320 --> 00:01:13.180
Dr. Make Pound:
- Hello!

00:01:13.840 --> 00:01:15.490
What am I doing here?

00:01:15.490 --> 00:01:18.240
- So what we've got open on the computer here is I

00:01:18.939 --> 00:01:21.719
set wireshark going when I turned on my Wi-Fi card

00:01:21.720 --> 00:01:24.749
It's captured a series of packets and what we can see here

00:01:24.850 --> 00:01:27.939
is there are four packets of information that are sent

00:01:27.939 --> 00:01:30.570
between the computer and the access point and

00:01:30.880 --> 00:01:34.400
These effectively agree the shared key that they're going to use.

00:01:34.400 --> 00:01:36.500
now this isn't the password you put into your Wi-Fi router.

00:01:36.960 --> 00:01:39.880
One of the interesting things that this attack works

00:01:39.880 --> 00:01:42.900
without ever necessarily getting hold of your password.

00:01:42.980 --> 00:01:46.880
So we end up with four messages that are being sent between the base station and

00:01:47.460 --> 00:01:49.480
Your computer to establish those things.

00:01:49.480 --> 00:01:50.279
So if we have a look at them,

00:01:50.860 --> 00:01:53.819
we got our computer here, and we have

00:01:54.670 --> 00:01:57.299
The access point here, or the base station

00:01:57.299 --> 00:01:58.580
and we've associated with it,

00:01:58.580 --> 00:02:01.100
so the first thing to set up the encryption is that the access point

00:02:01.149 --> 00:02:04.040
sends a message across, and we'll call this Message 1.

00:02:04.040 --> 00:02:08.120
This contains various information in there including a random number

00:02:08.120 --> 00:02:10.400
which is used, and a counter which is used for something else.

00:02:10.400 --> 00:02:11.520
But we won't go into too much detail

00:02:11.520 --> 00:02:15.480
And then we reply with our random number which is Message 2

00:02:15.660 --> 00:02:18.719
They send Message 3 which contains a bit more information, and then we send

00:02:19.810 --> 00:02:22.060
Message 4 which basically says,

00:02:22.060 --> 00:02:25.770
"Yep. I got that. The communication is now established."

00:02:26.740 --> 00:02:31.900
Now the way the Krack Attack works is by sitting in the middle you have another computer,

00:02:31.900 --> 00:02:34.019
which is your malicious actor

00:02:34.020 --> 00:02:39.270
which is going to sit there to try and break into this encryption, and he has to sit in such a way that he can

00:02:40.030 --> 00:02:43.979
know when Message 3 is sent and stop Message 4 being sent back

00:02:43.980 --> 00:02:46.760
- Sean: What does he do? Block it or something?

00:02:47.100 --> 00:02:49.980
- Dr. Bagley: I mean basically the way this works

00:02:49.980 --> 00:02:55.360
Is that you need to cause Message 3 to be received by the computer

00:02:55.360 --> 00:02:58.780
more than once in a way that you know about

00:02:58.960 --> 00:03:02.460
and you've got access to things and if you do that you can start capturing data

00:03:02.460 --> 00:03:04.949
and you can use some of the techniques that Mike's going to talk about

00:03:05.470 --> 00:03:07.540
to decrypt the information.

00:03:07.540 --> 00:03:09.330
So one way you could do it is you could perhaps

00:03:10.210 --> 00:03:12.920
splat a bit of noise on to the Wi-Fi signal at that point.

00:03:12.920 --> 00:03:16.019
There are easy ways where you pretend to be

00:03:16.600 --> 00:03:19.040
a base station and quickly send a message saying,

00:03:19.040 --> 00:03:23.820
"Switch to me on a different channel because I've got better communications here,"

00:03:24.020 --> 00:03:25.200
which means you receive it

00:03:25.200 --> 00:03:28.139
And the other base station doesn't and then it sends it out

00:03:28.140 --> 00:03:29.400
and you could sort of forward it on.

00:03:29.400 --> 00:03:30.570
So there's various ways you could probably

00:03:31.120 --> 00:03:37.560
push this into into use, but basically once you've got in here, and you caused this to be resent

00:03:37.560 --> 00:03:41.280
it causes parts of the values that the computer uses to encrypt the messages

00:03:41.580 --> 00:03:46.520
To be reset as well and once you've done that you can get into a position where you can actually start to

00:03:46.520 --> 00:03:47.660
decrypt the messages.

00:03:47.660 --> 00:03:50.280
Dr Mike Pound:
- When the client receives message 3,

00:03:50.400 --> 00:03:55.220
That's a moment it thinks right I've got my keys now. I can store them away ready for encryption

00:03:55.740 --> 00:04:00.300
The problem is that if the access point doesn't receive message 4, it thinks

00:04:00.300 --> 00:04:05.160
Oh well something must have happened to it. So I'll send message 3 again to make sure the client got it .

00:04:05.160 --> 00:04:10.560
The bugs that these researchers have found is that if message 3 gets resent, it restores the key

00:04:10.600 --> 00:04:16.320
and in doing so also resets all of the other cryptographic variables it's been working with, which is a real problem

00:04:16.860 --> 00:04:21.960
In particular it's a problem when you reset something called the nonce, or a number used once.

00:04:22.060 --> 00:04:27.640
So the way we usually encrypt in WPA is through AES, advanced encryption standard

00:04:27.640 --> 00:04:31.560
and we do it in counter mode generally speaking because it's quite fast so

00:04:32.080 --> 00:04:34.080
If you think back to the video we did on

00:04:34.390 --> 00:04:35.590
XOR and

00:04:35.590 --> 00:04:41.070
Stream ciphers we basically use AES as a stream cipher so we have an ever-increasing counter

00:04:41.070 --> 00:04:45.599
Let's say it starts at one, and we encrypt these numbers with our AES block cipher

00:04:45.600 --> 00:04:47.530
Here's our key coming in here

00:04:47.530 --> 00:04:53.440
So this one when encrypted using this key will produce a block of AES encrypted data that's random.

00:04:53.440 --> 00:04:59.220
So basically we're generating here a set of random numbers that goes on like this from the first block

00:04:59.220 --> 00:05:01.830
and then the second, and then the third and so on all the way along

00:05:01.830 --> 00:05:07.080
But it's not a truly random thing because if I know the key and I can still get want to generate the same, yeah

00:05:07.080 --> 00:05:08.380
And so I mean, that's about

00:05:08.380 --> 00:05:12.990
Unfortunate is the problem with cryptography is that we couldn't ever use truly random because we wouldn't be able to decrypt it again

00:05:12.990 --> 00:05:17.240
We have our message bits, which are you know naught, 1, 1, naught, something different

00:05:17.240 --> 00:05:20.260
And we XOR these together one bit at a time

00:05:20.280 --> 00:05:24.720
And that's how we encrypt and the nice thing is to decrypt we basically regenerate

00:05:24.720 --> 00:05:27.089
This key stream and do the exact process again

00:05:27.090 --> 00:05:32.429
we XOR our ciphertext and get our message back out. Now counter mode is very very fast and

00:05:33.040 --> 00:05:37.050
It's perfectly secure if your block cipher produces nicely random bits

00:05:37.740 --> 00:05:38.860
unless

00:05:38.860 --> 00:05:44.220
You reuse the numbers in which case it's completely broken. In this attack, remember,

00:05:44.220 --> 00:05:50.860
We're resetting the nonce because we're sending message 3 the client sees this and goes,

00:05:50.860 --> 00:05:53.120
"Oh I better restart  my encryption from start from scratch again."

00:05:53.130 --> 00:05:59.429
So this number goes back to one, or goes back to zero somewhere at the beginning, and so we're generating the exact same key stream

00:05:59.950 --> 00:06:00.910
multiple times

00:06:00.910 --> 00:06:06.689
We start by cryptic some data using the key starting at 1 2 3 4 and then it gets reset

00:06:06.689 --> 00:06:09.760
and we encrypt some different data with 1 2 3 4

00:06:09.780 --> 00:06:13.840
Q: So normally it doesn't go around like 1 2 3 4, 1 2 3 4. It literally keeps --

00:06:13.900 --> 00:06:17.300
It will just keep counting up and obviously the theoretical limit will be the

00:06:18.600 --> 00:06:24.200
128-bit number that you're trying to store. That's unlikely to happen in the time you're connected to the Wi-Fi

00:06:24.200 --> 00:06:26.200
But it's a theoretical possibility

00:06:26.320 --> 00:06:30.920
If they use one multiple times you can probably work out what? -- yeah,

00:06:30.929 --> 00:06:34.800
so if you imagine that we've used one multiple times

00:06:35.290 --> 00:06:41.459
The same keys been used, because the key didn't get changed, then the same key stream of zeros and ones have been XOR our message

00:06:41.860 --> 00:06:49.559
and that's very very weak when we use the same key twice we can essentially nullify the key by XOR in two messages together and

00:06:49.900 --> 00:06:56.040
Then we do a very similar process become something called crib dragging so we will come up with hypothetical bits of plaintext

00:06:56.040 --> 00:06:58.679
we think let's say the word HTML or

00:06:59.350 --> 00:07:04.739
Someone's login name or something like this, and we will slide it over the message until

00:07:05.380 --> 00:07:07.589
It gets a hit and at that point

00:07:07.590 --> 00:07:10.590
We know not only where it is

00:07:10.590 --> 00:07:15.420
But also what the keystream bits for that position were. So it's not a completely trivial process

00:07:15.550 --> 00:07:19.980
But on our computer it can be bruteforced incredibly quickly. If you reuse the same

00:07:20.050 --> 00:07:23.400
counter twice with the same key in something like counter mode

00:07:23.530 --> 00:07:27.959
It's such a huge problem because basically you can extract plaintext bits from multiple messages

00:07:28.180 --> 00:07:33.390
Once you've started to do that then you've got some idea of what we've sent you might be able to predict what they're going to

00:07:33.390 --> 00:07:36.899
send and sort of get in and start doing replay attacks and things like this or

00:07:37.390 --> 00:07:43.769
injecting information in, but we've done all this without even knowing what the key was. So it's an interesting part of encryption where

00:07:44.590 --> 00:07:49.649
You aren't necessarily secure just because the key is secret right and in this case very much not the case

00:07:50.260 --> 00:07:53.670
The other issue is that some of these modes you can extract the

00:07:54.160 --> 00:07:56.730
Authentication key as well so when we talked about HMAC

00:07:56.800 --> 00:08:02.880
We had a secret key that we used to make sure the message hadn't been interfered with. Well, if we can find that key

00:08:02.880 --> 00:08:09.839
Which you can using this attack, then you can start to forge your own messages. Start to, let's say, add in TCP packets of

00:08:09.970 --> 00:08:16.140
HTML that conveniently holds some JavaScript that runs some ransomware for example, and then you know you're in business

00:08:16.270 --> 00:08:19.529
And we've done that without knowing what the key is. One question

00:08:19.930 --> 00:08:21.989
What would happen if this key was zero?

00:08:22.060 --> 00:08:26.190
Here when we're generating this counter what happen if the key was zero. If the key is zero

00:08:26.470 --> 00:08:31.350
Then you're encrypting one with zeros it will still produce a random output, but it'll produce a random output

00:08:31.350 --> 00:08:33.250
That's always the same, and we will know what it is

00:08:33.250 --> 00:08:37.020
So we could we could guess the key stream. And if we knew were in the key stream then

00:08:37.020 --> 00:08:41.009
We could generate the right values generate the right packets. The way this

00:08:41.860 --> 00:08:48.570
Plays out is on certain operating systems. It basically has no effect so Windows. IOS. It seems because of the way they

00:08:49.870 --> 00:08:54.989
Follow or don't quite follow the standard it seems that this has limited effect.

00:08:54.990 --> 00:08:58.080
There are still ways you can attack things, but it has a limited effect

00:08:58.270 --> 00:09:02.639
So you'll say people on Windows laptops and on iOS devices should be alright?

00:09:03.490 --> 00:09:06.780
They are safer than other devices the problem comes with them

00:09:06.910 --> 00:09:12.509
The program that does it in Linux and on certain Android friends so the implementation used on Linux and Android

00:09:13.030 --> 00:09:17.519
That clears the key out of memory which is a good thing to do because if you're sitting in a coffee shop when you go

00:09:17.520 --> 00:09:19.559
After buy a coffee it's not

00:09:20.110 --> 00:09:26.370
impossible to plug the device quickly, a Thunderbolt device to do it into the side of the machine and copy the

00:09:27.280 --> 00:09:29.549
bit of memory out of there, which is perhaps got the key in it

00:09:29.550 --> 00:09:33.270
And then we can decrypt your traffic so that makes sense the problem is that

00:09:33.910 --> 00:09:36.059
When you replay message 3

00:09:36.060 --> 00:09:38.060
Which you need to do to make the attack work

00:09:38.320 --> 00:09:43.619
That also resets the counter, the things that Mike's talked about, and it now uses the key which is 0 to

00:09:43.720 --> 00:09:49.079
Start encrypting these things so actually you end up with a known sequence of counters being generated

00:09:49.080 --> 00:09:53.280
Which means that you can then as well as decrypt the messages you can sort of

00:09:53.710 --> 00:10:01.530
insert data into that message stream and start sending things to you that you perhaps weren't expecting to get. So on certain operating systems, it's

00:10:02.040 --> 00:10:05.480
Relatively benign on others it's more dangerous

00:10:05.480 --> 00:10:12.300
But it's also worth remembering that we should still use WPA2 to encrypt things because the alternative is that you have no security

00:10:12.480 --> 00:10:18.540
And that even if someone does come and do this they could do exactly the same by unplugging your base station and plugging in

00:10:18.960 --> 00:10:21.580
a new device into the Ethernet the other side of that

00:10:21.940 --> 00:10:25.080
and listen there anyway, so it's the risk, it needs to be patched

00:10:25.350 --> 00:10:28.350
It'll be patched, and then we can all go back to using Wi-Fi and browsing the web

00:10:29.050 --> 00:10:35.849
Those leaks happen all the time and so passwords are being just dumped into the internet all the time, so there's this password list called RockYou

00:10:36.370 --> 00:10:41.969
Which is a bit of a game changer in password cracking if that's a thing like-- 50

00:10:42.310 --> 00:10:48.900
But this is the IBM pc/xt the model 51 60 which came out two years later in 1983

00:10:49.090 --> 00:10:51.899
So this is really what the first PC was like--

