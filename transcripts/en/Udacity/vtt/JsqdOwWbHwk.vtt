WEBVTT
Kind: captions
Language: en

00:00:01.030 --> 00:00:02.743
Inexact repeating alarms.

00:00:02.743 --> 00:00:04.725
Infinitely better than 
exact repeating alarms,

00:00:04.725 --> 00:00:06.707
but still far from ideal.

00:00:06.707 --> 00:00:08.860
The problem with any kind 
of repeating alarm

00:00:08.860 --> 00:00:12.340
is that it's still polling 
your server to check for updates.

00:00:12.340 --> 00:00:15.680
So the more frequently you poll, 
the fresher the data you can display

00:00:15.680 --> 00:00:17.870
but the higher the cost in battery life.

00:00:17.870 --> 00:00:20.740
You can pull as frequently 
to conserve battery

00:00:20.740 --> 00:00:22.670
but that just means
your content will be stale

00:00:22.670 --> 00:00:23.400
for longer.

00:00:23.400 --> 00:00:25.143
You could just let the user decide

00:00:25.143 --> 00:00:26.796
the update frequency themselves,

00:00:26.796 --> 00:00:28.570
but then you lose the magic.

00:00:28.570 --> 00:00:30.263
If only there was a better way.

00:00:30.263 --> 00:00:33.156
Is such a thing possible?
Yes it is.

00:00:33.156 --> 00:00:36.440
Google cloud messaging 
let's your server notify your app

00:00:36.440 --> 00:00:39.340
directly when there's data ready 
to be downloaded.

00:00:39.340 --> 00:00:41.010
Or it can even 
include the new data

00:00:41.010 --> 00:00:42.936
in the message payload itself.

00:00:42.936 --> 00:00:45.642
Using Google Cloud Messaging, 
you can send messages from

00:00:45.642 --> 00:00:47.558
your server to any installed instance

00:00:47.558 --> 00:00:49.774
of your app via the Google Cloud.

00:00:49.774 --> 00:00:51.650
As a result, you can stop polling,

00:00:51.650 --> 00:00:53.778
which will immediately 
improve battery life

00:00:53.778 --> 00:00:55.906
and also improve 
the freshness of your app.

00:00:55.906 --> 00:00:58.036
And instead, rely on your server

00:00:58.036 --> 00:01:00.890
notifying clients when 
there's data to sync.

00:01:00.890 --> 00:01:03.003
These messages can be simple tickles,

00:01:03.003 --> 00:01:05.346
that trigger a sync adapter 
by notifying your app

00:01:05.346 --> 00:01:07.450
that there is new data 
or need to download.

00:01:07.450 --> 00:01:10.560
Or you can include the new data 
within the message payload.

00:01:10.560 --> 00:01:14.140
In the sunshine example, 
we're using someone else's server.

00:01:14.140 --> 00:01:16.470
But even then, 
it may make sense to create

00:01:16.470 --> 00:01:18.743
your own middle tier 
that pulls the source

00:01:18.743 --> 00:01:21.026
and notifies your installed app instances

00:01:21.026 --> 00:01:22.764
when it notices a change.

00:01:22.764 --> 00:01:25.362
Now we're not going to set up 
a server in this lesson,

00:01:25.362 --> 00:01:26.985
but you can see the full details

00:01:26.985 --> 00:01:28.506
for using Google cloud messaging

00:01:28.506 --> 00:01:31.000
from the developer guide 
linked to instructor nets.

