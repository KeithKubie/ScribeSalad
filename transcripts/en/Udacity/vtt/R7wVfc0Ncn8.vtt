WEBVTT
Kind: captions
Language: en

00:00:00.320 --> 00:00:02.630
So we end up with an objectized structure of

00:00:02.630 --> 00:00:05.980
the virtual memory manager that looks like this. That you

00:00:05.980 --> 00:00:10.120
have a process object that is equivalent to a PCB

00:00:10.120 --> 00:00:12.800
in the traditional setting. And of course there's a TLB

00:00:12.800 --> 00:00:16.040
on the processor that's going to be maintained even in

00:00:16.040 --> 00:00:19.340
hardware or software depending on the architecture. Because architectures do

00:00:19.340 --> 00:00:21.500
it in hardware, some architectures leave it up to the

00:00:21.500 --> 00:00:25.480
software to manage the TLB. And the region object Is,

00:00:25.480 --> 00:00:27.610
as they said, a portion of the

00:00:27.610 --> 00:00:30.980
address piece. So essentially, the page table data

00:00:30.980 --> 00:00:34.340
structure is split into these region objects.

00:00:34.340 --> 00:00:37.610
And the regionobjects, there is a file cache

00:00:37.610 --> 00:00:42.680
manager that knows the location of the

00:00:42.680 --> 00:00:46.010
files on the backing store that corresponds to

00:00:46.010 --> 00:00:48.050
the a particular region. So the file

00:00:48.050 --> 00:00:51.290
cash manager is responsible for backing this region.

00:00:51.290 --> 00:00:54.420
And this file cache manager interacts with the

00:00:54.420 --> 00:00:56.820
DRAM manager in order to get a physical

00:00:56.820 --> 00:00:59.350
frame because when there is a page fault

00:00:59.350 --> 00:01:02.230
in a particular region, the file cache manager has

00:01:02.230 --> 00:01:04.750
to contact the DRAM object in order to

00:01:04.750 --> 00:01:08.140
get a physical page frame. And, once it gets

00:01:08.140 --> 00:01:11.070
the physical page frame, it kicks off this

00:01:11.070 --> 00:01:16.180
COR, which we said is the cached object representation.

00:01:16.180 --> 00:01:21.580
Of a page. It [UNKNOWN] this COR object to say, well, here is a page frame for

00:01:21.580 --> 00:01:26.730
you and here is the page on the disk. Go do it. And it is the responsibility of

00:01:26.730 --> 00:01:31.080
the cached object representation to populate the physical page

00:01:31.080 --> 00:01:34.810
frame by doing I/O with the disk in order

00:01:34.810 --> 00:01:38.160
to move this page from the disk representation into

00:01:38.160 --> 00:01:41.380
a memory representation. So, this is sort of the

00:01:41.380 --> 00:01:45.750
structure of the objectized virtual memory manager and

00:01:45.750 --> 00:01:50.180
depending on the region of the virtual memory space

00:01:50.180 --> 00:01:53.570
that you're accessing the path that a particular

00:01:53.570 --> 00:01:55.730
page fault may take will be different. if you're

00:01:55.730 --> 00:01:58.580
accessing a page that is in the green

00:01:58.580 --> 00:02:00.830
region then this is a path that is going to

00:02:00.830 --> 00:02:03.070
be taken by the page fault handler and

00:02:03.070 --> 00:02:06.560
similarly... If the page fault happens to be in

00:02:06.560 --> 00:02:08.800
the purple region then this is the path that's going to

00:02:08.800 --> 00:02:12.220
be taken by the page fault handler. So, logically given

00:02:12.220 --> 00:02:16.560
the structure, let's think about what is the work flow

00:02:16.560 --> 00:02:19.680
in handling a page fault with this objectized structure of

00:02:19.680 --> 00:02:23.280
the virtual menu manager. The third T1 is executing poor

00:02:23.280 --> 00:02:25.920
guy, and it incurs a page fault. And when it

00:02:25.920 --> 00:02:29.030
incurs a page fault, it goes to a process object.

00:02:29.030 --> 00:02:32.000
And the process object is able to say, say given

00:02:32.000 --> 00:02:35.740
the virtual page number, what region is that

00:02:35.740 --> 00:02:39.300
particular page fault falling into? So, that's the

00:02:39.300 --> 00:02:42.070
region that we want to go to in order

00:02:42.070 --> 00:02:45.000
to service the page fault. So that region object

00:02:45.000 --> 00:02:48.360
is then going to contact the file cache

00:02:48.360 --> 00:02:52.110
manager. That corresponds to this region object and

00:02:52.110 --> 00:02:54.220
to the file and the file cache manager

00:02:54.220 --> 00:02:57.820
is going to do two things. One, it's going to see

00:02:57.820 --> 00:03:02.220
what exactly is the backing file for that particular

00:03:02.220 --> 00:03:05.260
virtual that is missing. So it may be that it

00:03:05.260 --> 00:03:08.420
is a file that contains multiple pages. And so it's

00:03:08.420 --> 00:03:10.800
going to say file and offset. And that is going

00:03:10.800 --> 00:03:12.660
to be the information that has to be passed

00:03:12.660 --> 00:03:16.510
on to the COR object. Saying that, here is a

00:03:16.510 --> 00:03:18.920
file, and here is the offset in the file. And

00:03:18.920 --> 00:03:22.870
that's where the faulty page content can be found on

00:03:22.870 --> 00:03:27.690
the storage device. And of course FCM has to get a physical frame. So it

00:03:27.690 --> 00:03:32.710
contacts the DRAM object in order to get a physical frame. And so once it

00:03:32.710 --> 00:03:38.200
has the physical frame and it has the actual location of the file

00:03:38.200 --> 00:03:43.110
then the COR object can preform the IO and pull the

00:03:43.110 --> 00:03:47.930
data from the disc into the DRAM. And so

00:03:47.930 --> 00:03:50.420
now the p frame, the page frame that has

00:03:50.420 --> 00:03:54.410
been allocated for backing this particular virtual page, has

00:03:54.410 --> 00:03:57.390
now populated because of the I/O being complete. So

00:03:57.390 --> 00:03:59.745
the green arrows is showing you the completion of the

00:03:59.745 --> 00:04:02.490
I/O. As a result of that, you've got the

00:04:02.490 --> 00:04:05.600
page frame containing the contents of the virtual page

00:04:05.600 --> 00:04:08.210
that was missing in the first place. And once

00:04:08.210 --> 00:04:13.010
that is available, then the FCM can indicate to the

00:04:13.010 --> 00:04:16.149
region that your page fault service is complete. And

00:04:16.149 --> 00:04:18.920
at that point, the region can go through the

00:04:18.920 --> 00:04:22.120
process object in order to update the TLB, in

00:04:22.120 --> 00:04:25.590
order to indicate that now there is a mapping

00:04:25.590 --> 00:04:27.910
between the virtual page and the physical frame that

00:04:27.910 --> 00:04:30.930
is being populated in physical memory And now the

00:04:30.930 --> 00:04:33.750
process can be resumed. So this is the, the

00:04:33.750 --> 00:04:38.470
flow of information in order to make the process

00:04:38.470 --> 00:04:41.550
runnable again, which faltered on the first place on a,

00:04:41.550 --> 00:04:44.920
on a virtual page that is missing in physical memory.

00:04:44.920 --> 00:04:47.310
So, now that we have this flow, and we also

00:04:47.310 --> 00:04:50.950
mentioned that the cluster object has a single representation. When it

00:04:50.950 --> 00:04:53.570
is a region, it's a region. Now how do we

00:04:53.570 --> 00:04:57.740
replicate a region object? Should this be a singleton object,

00:04:57.740 --> 00:05:00.300
should we replicate it, should this region object be a

00:05:00.300 --> 00:05:03.500
singleton object, should it be replicated? If you're going to replicate it,

00:05:03.500 --> 00:05:06.230
should it be replicated for every core or a

00:05:06.230 --> 00:05:09.570
set of processors of, of a group of processors and

00:05:09.570 --> 00:05:12.110
so on? These are all the design decisions. That

00:05:12.110 --> 00:05:14.640
the operating system designer has to make. So let's look

00:05:14.640 --> 00:05:17.745
at the process object. The process object is mostly

00:05:17.745 --> 00:05:21.560
read-only and you can replicate it one per CPU. It's

00:05:21.560 --> 00:05:24.660
like a process control block, and you can make it

00:05:24.660 --> 00:05:28.590
one per CPU. And all the cores on the CPU

00:05:28.590 --> 00:05:32.830
can share this process object because ultimately, The

00:05:32.830 --> 00:05:35.610
TLB is a common entity for the entire

00:05:35.610 --> 00:05:38.420
processor and since the processed object is updating

00:05:38.420 --> 00:05:41.080
the TLB, we can have a single processed object

00:05:41.080 --> 00:05:44.340
that manages the TLB. What about the region

00:05:44.340 --> 00:05:47.280
object? Well, let's think about this. Now region

00:05:47.280 --> 00:05:50.570
represents a portion of the address space. Now

00:05:50.570 --> 00:05:54.040
a portion of the address space Maybe traversed by

00:05:54.040 --> 00:05:56.480
more than one thread. So, a set of threads

00:05:56.480 --> 00:05:58.540
that are running on a group of processors may

00:05:58.540 --> 00:06:02.550
actually access a portion of this address space. And

00:06:02.550 --> 00:06:05.710
we don't know a priori, how many threads may

00:06:05.710 --> 00:06:09.820
actually access a particular region. It's something that may

00:06:09.820 --> 00:06:13.040
have to evolve. Over time, but it is definitely

00:06:13.040 --> 00:06:16.520
a candidate for partial replication. That is, it is

00:06:16.520 --> 00:06:19.120
in the critical path of a page four, so let's

00:06:19.120 --> 00:06:22.170
partial replicate the region, not one per

00:06:22.170 --> 00:06:25.520
processor, but maybe for a group of processors,

00:06:25.520 --> 00:06:27.910
because a group of processors may be running

00:06:27.910 --> 00:06:31.060
threads that are accessing the same portion of

00:06:31.060 --> 00:06:33.000
the address space, and so we will

00:06:33.000 --> 00:06:36.610
replicate this region object one... For every group

00:06:36.610 --> 00:06:40.030
of processors. And the granularity of replication decides

00:06:40.030 --> 00:06:44.670
the exploitable concurrency from parallel page fault handling.

00:06:44.670 --> 00:06:47.840
Now, the interesting thing to notice is that the degree

00:06:47.840 --> 00:06:51.600
of replication and the design decision that we take for

00:06:51.600 --> 00:06:55.310
how we cluster, the degree of clustering that we choose

00:06:55.310 --> 00:06:57.730
for every one of these objects is independent of one

00:06:57.730 --> 00:07:00.400
another. So when we talk about the process object, we

00:07:00.400 --> 00:07:03.440
said that well, the process object can be one per

00:07:03.440 --> 00:07:07.360
CPU. And I said for region object could be applicated

00:07:07.360 --> 00:07:09.880
for a group of processes. Now what about the FCM

00:07:09.880 --> 00:07:13.380
object, FCM object is backing A region. There

00:07:13.380 --> 00:07:16.100
may be multiple replicas of this region, but

00:07:16.100 --> 00:07:21.830
all of those regions are backed by the same FCM. And therefore, what we can do

00:07:21.830 --> 00:07:24.780
is, the portion of the address space that

00:07:24.780 --> 00:07:27.890
is being backed by a particular FCM can

00:07:27.890 --> 00:07:29.580
be partioned. So, we can go for a

00:07:29.580 --> 00:07:35.310
partioned representation of this FCM. Where competition represents

00:07:35.310 --> 00:07:37.940
the portion of the agro space that is managed

00:07:37.940 --> 00:07:41.210
by this particular FCM. So, you can see that there

00:07:41.210 --> 00:07:44.870
is a degree of freedom in how we choose

00:07:44.870 --> 00:07:48.190
to replicate process object, how you we choose to the

00:07:48.190 --> 00:07:51.270
region objects. Of course we're partitioning the region objects,

00:07:51.270 --> 00:07:54.740
but once we've partitioned it, how we have replications for

00:07:54.740 --> 00:07:57.460
each, each of these partitioned regions is something that

00:07:57.460 --> 00:08:00.780
is up for grabs as an OS designer. And similarly,

00:08:00.780 --> 00:08:03.380
for the file cache manager, because it's backing

00:08:03.380 --> 00:08:06.490
a specific region, we can go for a partitioned

00:08:06.490 --> 00:08:09.690
representation of the FCM. And what about the

00:08:09.690 --> 00:08:14.460
COR, the Cached Object Representation now? Now, this object

00:08:14.460 --> 00:08:16.260
is the one that is really dealing with

00:08:16.260 --> 00:08:19.610
physically entities. It is actually doing the IO from

00:08:19.610 --> 00:08:22.740
the disk into the physical memory. And since we

00:08:22.740 --> 00:08:26.100
are dealing with physical entities, it may be appropriate

00:08:26.100 --> 00:08:30.480
to have a true shared object for cached

00:08:30.480 --> 00:08:33.929
object representation. And the, all the I/O is

00:08:33.929 --> 00:08:36.450
going to be managed by this cached object

00:08:36.450 --> 00:08:39.480
representation. Even though I'm showing you two different boxes

00:08:39.480 --> 00:08:42.220
here, in principle it could be a singleton

00:08:42.220 --> 00:08:44.850
object that is managing all of the I/O

00:08:44.850 --> 00:08:49.070
activity that corresponds to the virtual memory management.

00:08:49.070 --> 00:08:51.200
And what about the DRAM object? Now, the DRAM

00:08:51.200 --> 00:08:54.250
object you can have several representations for the

00:08:54.250 --> 00:08:57.050
DRAM object depending on how the physical memory

00:08:57.050 --> 00:09:00.000
is managed. For example, we may have at

00:09:00.000 --> 00:09:03.970
least one representation of the DRAM object for every

00:09:03.970 --> 00:09:09.390
DSM piece that you have in a single node's portion of the physical memory. So in

00:09:09.390 --> 00:09:12.090
other words, We can break up the entire

00:09:12.090 --> 00:09:16.220
physical memory that's available in the entire system into

00:09:16.220 --> 00:09:19.580
the portions that are managed individually by each

00:09:19.580 --> 00:09:22.470
processor. And there could be a DRAM object that

00:09:22.470 --> 00:09:26.000
corresponds to the physical mapped memory that is managed

00:09:26.000 --> 00:09:29.650
by each of those. processors, but you can go

00:09:29.650 --> 00:09:31.780
even finer than that if it is appropriate, but

00:09:31.780 --> 00:09:33.790
it is a design decision that is up to

00:09:33.790 --> 00:09:37.290
the designer. So we come up with an replicated

00:09:37.290 --> 00:09:41.210
process object, a partial replication for the region object,

00:09:41.210 --> 00:09:45.070
a partitioned representation for the FCM object,

00:09:45.070 --> 00:09:48.790
and maybe a trued shared object for COR,

00:09:48.790 --> 00:09:51.910
and several representations - For the DM object.

00:09:51.910 --> 00:09:54.580
So this is one way of thinking about

00:09:54.580 --> 00:09:57.380
it, but the nice thing about this objectized

00:09:57.380 --> 00:10:01.170
structure is that when we designed the objectized

00:10:01.170 --> 00:10:03.680
structure, we did not have to think about

00:10:03.680 --> 00:10:06.340
how we could replicate it when we actually

00:10:06.340 --> 00:10:10.945
populate these objects. That is a level of design decision that could be...

00:10:10.945 --> 00:10:13.830
[INAUDIBLE], because of the secret source, that's

00:10:13.830 --> 00:10:16.040
available in tornadoes is a cluster object.

