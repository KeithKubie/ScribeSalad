WEBVTT
Kind: captions
Language: en

00:00:05.800 --> 00:00:07.720
ANKUR KOTWAL: Hi, and welcome
to another Android Developer

00:00:07.720 --> 00:00:12.050
Lab+ for the 13th of
December, 2012.

00:00:12.050 --> 00:00:16.250
It is actually our final ADL+
for the year, so I hope you're

00:00:16.250 --> 00:00:19.620
excited because we're talking
about a new API that we've

00:00:19.620 --> 00:00:20.810
recently launched.

00:00:20.810 --> 00:00:24.840
And let me first introduce
our special guest.

00:00:24.840 --> 00:00:28.120
Welcome, Paul Saxman.

00:00:28.120 --> 00:00:30.470
Paul, why don't you introduce
yourself?

00:00:30.470 --> 00:00:31.080
PAUL SAXMAN: Sure.

00:00:31.080 --> 00:00:31.830
My name is Paul Saxman.

00:00:31.830 --> 00:00:34.730
And I'm a developer advocate
on the Google Maps team.

00:00:34.730 --> 00:00:41.320
And so I will be working more
on the Android APIs and some

00:00:41.320 --> 00:00:43.840
of our other API that we
recently announced that I

00:00:43.840 --> 00:00:46.620
won't talk about but we will be
talking about in the next

00:00:46.620 --> 00:00:48.240
couple of weeks.

00:00:48.240 --> 00:00:51.620
And yeah, so we're really
excited to be here and to talk

00:00:51.620 --> 00:00:56.373
a little more about what's going
on in the Android Map.

00:00:56.373 --> 00:00:59.874
Or is it the Google
Maps Android API?

00:00:59.874 --> 00:01:00.920
ANKUR KOTWAL: v2.

00:01:00.920 --> 00:01:02.520
PAUL SAXMAN: v2.

00:01:02.520 --> 00:01:03.810
ANKUR KOTWAL: Well, it's really
good to have you.

00:01:03.810 --> 00:01:06.550
So thank you for joining
us today.

00:01:06.550 --> 00:01:10.790
And we have our usual regulator,
Tony Chan.

00:01:10.790 --> 00:01:11.270
TONY CHAN: Yeah.

00:01:11.270 --> 00:01:12.590
Hello, everyone.

00:01:12.590 --> 00:01:16.100
ANKUR KOTWAL: Joining us from
Hong Kong, as usual.

00:01:16.100 --> 00:01:17.210
I'm Ankur Kotwal.

00:01:17.210 --> 00:01:19.850
And I'm joining you from
Mountain View,

00:01:19.850 --> 00:01:22.150
California this week.

00:01:22.150 --> 00:01:25.770
And yeah, we're just waiting
to get started.

00:01:25.770 --> 00:01:29.390
So that being said, let's get
started with the presentation.

00:01:31.990 --> 00:01:36.880
Just sharing my slides,
and here we are.

00:01:36.880 --> 00:01:42.320
So as usual, first we'll start
off with what's been happening

00:01:42.320 --> 00:01:44.930
recently in terms of news.

00:01:44.930 --> 00:01:46.160
We launched an Android

00:01:46.160 --> 00:01:48.880
Developer Survey very recently.

00:01:48.880 --> 00:01:52.050
And basically we're asking
Android developers to give us

00:01:52.050 --> 00:01:54.840
feedback on a whole
range of topics.

00:01:54.840 --> 00:01:58.160
It takes probably anywhere
between 5 and 15 minutes,

00:01:58.160 --> 00:01:59.970
depending on how long
you spend on it.

00:01:59.970 --> 00:02:01.840
But it's really valuable
information to us.

00:02:01.840 --> 00:02:04.320
And we want to hear what your
experience is like.

00:02:04.320 --> 00:02:06.820
So please do let us know.

00:02:06.820 --> 00:02:10.110
The survey is closing
fairly soon.

00:02:10.110 --> 00:02:14.300
And yeah, it helps
us prioritize the

00:02:14.300 --> 00:02:15.270
work that we do.

00:02:15.270 --> 00:02:18.610
It helps us go to the
engineering team and tell us

00:02:18.610 --> 00:02:22.030
that these are the important
things that the developers are

00:02:22.030 --> 00:02:23.600
asking for.

00:02:23.600 --> 00:02:27.120
And so more data points is
always a good thing.

00:02:27.120 --> 00:02:30.160
In other news, we've recently
launched Google Play

00:02:30.160 --> 00:02:32.170
Services version 2.

00:02:32.170 --> 00:02:35.270
So if you remember back to
about two months ago, we

00:02:35.270 --> 00:02:38.310
launched version 1, which had
the OAuth 2.0 component as

00:02:38.310 --> 00:02:40.600
well as the Google+ API.

00:02:40.600 --> 00:02:42.050
Well, now we have version 2.

00:02:42.050 --> 00:02:46.290
And it includes the Google Maps
Android API version 2 as

00:02:46.290 --> 00:02:49.200
well, which explains
why Paul is here.

00:02:49.200 --> 00:02:53.155
So there's tons of great
things about it.

00:02:53.155 --> 00:02:55.670
For starters, we get
vector-based maps, so we're

00:02:55.670 --> 00:02:59.290
able to retain graphical
fidelity regardless of what

00:02:59.290 --> 00:03:00.820
zoom level you're at.

00:03:00.820 --> 00:03:05.690
We have beautiful 3D camera
control now, so not just your

00:03:05.690 --> 00:03:07.770
zoom and rotate but
tilt as well.

00:03:07.770 --> 00:03:10.660
And you'll get 3D buildings
popping up in cities that

00:03:10.660 --> 00:03:11.650
support them.

00:03:11.650 --> 00:03:15.170
It includes support for Indoor
Maps and of course everything

00:03:15.170 --> 00:03:17.990
that developers have been asking
for for a while, which

00:03:17.990 --> 00:03:19.240
is Map Fragments.

00:03:23.100 --> 00:03:25.320
Hopefully we're not going to see
any questions now saying

00:03:25.320 --> 00:03:27.860
when can we use Maps on tablets,
because they're

00:03:27.860 --> 00:03:29.330
finally here.

00:03:29.330 --> 00:03:31.540
Google Play Services version
2 also included a

00:03:31.540 --> 00:03:33.690
Photo Sphere API.

00:03:33.690 --> 00:03:38.300
So Photo Sphere is a new feature
on Android 4.2, which

00:03:38.300 --> 00:03:42.820
basically allows you to capture
a 360-degree panorama.

00:03:42.820 --> 00:03:45.000
They're really beautiful.

00:03:45.000 --> 00:03:47.670
There's some great ones up
there on Google+, so go

00:03:47.670 --> 00:03:48.500
hunting for them.

00:03:48.500 --> 00:03:49.860
They're wroth looking at.

00:03:49.860 --> 00:03:54.760
And so obviously we have some
APIs around that too.

00:03:54.760 --> 00:03:57.645
And next up is In-App Billing.

00:03:57.645 --> 00:04:01.340
So one of the things the
developers have been asking

00:04:01.340 --> 00:04:04.850
for with In-App Billing is
being able to have a

00:04:04.850 --> 00:04:06.190
synchronous way of doing it.

00:04:06.190 --> 00:04:09.300
So in the past with In-App
Billing version 1 and 2, what

00:04:09.300 --> 00:04:11.750
would happen is you send off a
purchase request, and it would

00:04:11.750 --> 00:04:14.640
get back to you at
some point later.

00:04:14.640 --> 00:04:19.040
Whereas now as soon as you ask
for it you'll get a response.

00:04:19.040 --> 00:04:21.560
So you'll basically wait
for a response.

00:04:21.560 --> 00:04:25.640
So this really simplifies
coding around the API.

00:04:25.640 --> 00:04:28.760
It makes it a lot more
reliable as well.

00:04:28.760 --> 00:04:32.990
And there's a ton of new
functionality there as well,

00:04:32.990 --> 00:04:36.540
including local caching and
something, again, developers

00:04:36.540 --> 00:04:39.040
have been asking for, which
is being able to query for

00:04:39.040 --> 00:04:40.170
product info.

00:04:40.170 --> 00:04:44.030
So now with this API you can
actually query at runtime to

00:04:44.030 --> 00:04:47.540
say what are the In-App
purchases available, what are

00:04:47.540 --> 00:04:50.030
their prices, and what are
their description.

00:04:50.030 --> 00:04:52.980
So you no longer need to hard
code those prices in your

00:04:52.980 --> 00:04:55.610
applications, which is just
great news both for developers

00:04:55.610 --> 00:04:58.070
but also for users.

00:04:58.070 --> 00:05:02.130
So the thing that's missing in
In-App Billing version 3 at

00:05:02.130 --> 00:05:05.450
the moment is subscription, but
that's coming very soon.

00:05:05.450 --> 00:05:10.250
And it's we basically expect
developers to start using

00:05:10.250 --> 00:05:15.990
version 3 as soon as possible
because it really is great.

00:05:15.990 --> 00:05:18.390
So with that being said, I'm now
going to hand it over to

00:05:18.390 --> 00:05:23.360
Tony to talk to us about
the Maps API.

00:05:23.360 --> 00:05:24.670
So Tony.

00:05:24.670 --> 00:05:26.000
TONY CHAN: Yeah, thanks.

00:05:26.000 --> 00:05:28.050
So let's get started.

00:05:28.050 --> 00:05:32.190
So before we get into the
details, let me give a brief

00:05:32.190 --> 00:05:37.970
introduction on how to get
started to incorporate the new

00:05:37.970 --> 00:05:42.050
Maps API into your
Android apps.

00:05:42.050 --> 00:05:47.386
So the first thing you need to
have is, of course, installing

00:05:47.386 --> 00:05:53.630
in the Google Play Services is
including part of the Android

00:05:53.630 --> 00:05:54.650
SDK Manager.

00:05:54.650 --> 00:05:59.570
So if you go to Eclipse and
launch the SDK Manager, you

00:05:59.570 --> 00:06:03.710
will see a new version of
Google Play Services,

00:06:03.710 --> 00:06:05.030
which is version 2.

00:06:05.030 --> 00:06:06.810
And just install it.

00:06:06.810 --> 00:06:08.710
That's the first step.

00:06:08.710 --> 00:06:11.180
Next slide.

00:06:11.180 --> 00:06:15.380
The next thing you need to have
is, of course, just like

00:06:15.380 --> 00:06:20.580
the first version, you need to
have a Google Maps API key.

00:06:20.580 --> 00:06:25.095
So one thing which is really
important is the existing key

00:06:25.095 --> 00:06:29.900
you have if you already have an
application using the Maps

00:06:29.900 --> 00:06:35.470
view version 1, one thing
important is that the key for

00:06:35.470 --> 00:06:38.610
version 1 is not going to work
with the version 2 API.

00:06:38.610 --> 00:06:43.440
So you do need to generate a
new Maps API key to use the

00:06:43.440 --> 00:06:45.790
new version.

00:06:45.790 --> 00:06:50.790
Another thing about the API key
is it's generated in the

00:06:50.790 --> 00:06:53.020
Google API Console.

00:06:53.020 --> 00:06:54.520
So pay attention.

00:06:54.520 --> 00:06:56.670
That's not the Google Play
Developer Console.

00:06:56.670 --> 00:07:01.260
So I actually include a
screenshot of what the Google

00:07:01.260 --> 00:07:03.210
API Console looks like.

00:07:03.210 --> 00:07:07.430
You can go to this Console
by going to

00:07:07.430 --> 00:07:11.560
code.google.com/apis/console.

00:07:11.560 --> 00:07:17.000
So one thing you will notice now
under the All Services, if

00:07:17.000 --> 00:07:21.250
you already have a Google
project, you will see the

00:07:21.250 --> 00:07:25.940
Google Maps API version 2
services available now.

00:07:25.940 --> 00:07:31.750
You can click into that
to generate new keys.

00:07:31.750 --> 00:07:34.620
Next slide.

00:07:34.620 --> 00:07:45.100
So about the Maps API key, you
need two things to generate

00:07:45.100 --> 00:07:46.940
the Maps API key.

00:07:46.940 --> 00:07:50.910
The key itself is a
40-character key.

00:07:50.910 --> 00:07:54.850
But in order to generate a key
you need to have two things.

00:07:54.850 --> 00:07:59.960
One is your apps certificate's
SHA1 fingerprint.

00:07:59.960 --> 00:08:04.220
And the next thing is
the package name.

00:08:04.220 --> 00:08:09.370
So how to get the SHA1
fingerprint.

00:08:09.370 --> 00:08:12.650
You can use the keytool
command line.

00:08:12.650 --> 00:08:15.950
I have included the
command line here.

00:08:15.950 --> 00:08:20.190
But one thing you need to pay
attention to is you need to

00:08:20.190 --> 00:08:29.590
use the -v verbose attribute so
that it will show the SHA1

00:08:29.590 --> 00:08:30.260
fingerprint.

00:08:30.260 --> 00:08:35.570
So one thing is if you don't
include it the -v parameter,

00:08:35.570 --> 00:08:40.419
by default the fingerprint shown
on the result is going

00:08:40.419 --> 00:08:44.540
to be MD5 fingerprint, which
looks almost exactly like the

00:08:44.540 --> 00:08:47.190
SHA1 fingerprint.

00:08:47.190 --> 00:08:52.300
So we had some developers try to
run the keytools, and then

00:08:52.300 --> 00:08:55.170
they said they couldn't generate
the key because it's

00:08:55.170 --> 00:08:57.340
the wrong fingerprint.

00:08:57.340 --> 00:09:03.620
In this case, we need the SHA1
fingerprint itself, MD5-1.

00:09:03.620 --> 00:09:08.700
Another best practice I want
to share with you is it's a

00:09:08.700 --> 00:09:12.480
good practice to use a different
certificate to sign

00:09:12.480 --> 00:09:15.570
each application.

00:09:15.570 --> 00:09:21.315
So in this case you will use
your application's certificate

00:09:21.315 --> 00:09:23.170
to get the SHA1 fingerprint.

00:09:23.170 --> 00:09:32.860
And then we append the package
name after colon.

00:09:32.860 --> 00:09:37.870
And you will generate the
right Maps API key.

00:09:37.870 --> 00:09:40.710
Next slide.

00:09:40.710 --> 00:09:46.040
So another thing you need to
make sure to include in your

00:09:46.040 --> 00:09:50.100
project, especially if you
want to target anything

00:09:50.100 --> 00:09:53.230
earlier than API 11.

00:09:53.230 --> 00:09:56.100
So in most cases I
think the Support

00:09:56.100 --> 00:09:57.740
Library is really important.

00:09:57.740 --> 00:10:02.500
So the new Maps API also
backports to the Support

00:10:02.500 --> 00:10:06.160
Library, and so you need
to install the

00:10:06.160 --> 00:10:08.940
latest Support Library.

00:10:08.940 --> 00:10:12.550
Instead of using the Map
Fragment, if you use the

00:10:12.550 --> 00:10:17.710
Support Library use support
Map Fragment.

00:10:17.710 --> 00:10:20.220
Next slide.

00:10:20.220 --> 00:10:25.380
So now let's talk about how
after you generate the Maps

00:10:25.380 --> 00:10:30.500
API key how to include that
in your application.

00:10:30.500 --> 00:10:36.580
So if you go to your
AndroidManifest.xml, you need

00:10:36.580 --> 00:10:46.400
to add a metadata tag with the
name com.google android.maps

00:10:46.400 --> 00:10:48.030
v2 API key.

00:10:48.030 --> 00:10:52.680
And then you paste your newly
generated API key

00:10:52.680 --> 00:10:53.930
to the value attribute.

00:10:56.370 --> 00:11:00.820
You also need to create a custom
permission to include

00:11:00.820 --> 00:11:03.390
that in your Android Manifest.

00:11:03.390 --> 00:11:06.130
The permission name is
your package name dot

00:11:06.130 --> 00:11:07.380
permission.maps_receive.

00:11:10.620 --> 00:11:17.080
So I already include all the
details in the slide.

00:11:17.080 --> 00:11:20.240
So that's a special custom
permission you need.

00:11:20.240 --> 00:11:21.800
You also need some other
permissions.

00:11:21.800 --> 00:11:23.050
Next slides.

00:11:25.410 --> 00:11:28.230
So here are a couple of
permission that you most

00:11:28.230 --> 00:11:29.910
likely will need.

00:11:29.910 --> 00:11:31.890
The first one is the internet
connection.

00:11:31.890 --> 00:11:37.140
So we need to download
the map tiles from

00:11:37.140 --> 00:11:41.100
the Google Maps server.

00:11:41.100 --> 00:11:44.730
You also need to include the
right external storage

00:11:44.730 --> 00:11:51.700
permission to take advantage
of the caching of Maps.

00:11:51.700 --> 00:11:56.860
Another Google Services
permissions.

00:11:56.860 --> 00:12:00.680
That's a permission we need to
access all the Google web

00:12:00.680 --> 00:12:02.220
based services.

00:12:02.220 --> 00:12:06.240
There are a couple optional but
most likely very useful

00:12:06.240 --> 00:12:11.240
for most of the Maps application
is you probably

00:12:11.240 --> 00:12:15.850
need access to course location
and find location if you plan

00:12:15.850 --> 00:12:21.490
to get access to the user
current location.

00:12:21.490 --> 00:12:25.090
ANKUR KOTWAL: So I just want
to emphasize the point here

00:12:25.090 --> 00:12:26.770
that Tony made.

00:12:26.770 --> 00:12:31.740
The access course and find
location are truly optional.

00:12:31.740 --> 00:12:34.450
Don't just blindly include them
just because you're using

00:12:34.450 --> 00:12:35.020
the Library.

00:12:35.020 --> 00:12:39.550
Because often you'll have a map
in your app and you're not

00:12:39.550 --> 00:12:42.590
actually using the
user's location.

00:12:42.590 --> 00:12:46.770
I've written many apps using
this new API where I didn't

00:12:46.770 --> 00:12:47.710
need these permissions.

00:12:47.710 --> 00:12:50.710
So it's really important
that people don't just

00:12:50.710 --> 00:12:53.230
blindly copy and paste.

00:12:53.230 --> 00:12:56.400
We've had a previous
presentation on abusing

00:12:56.400 --> 00:12:58.020
permissions.

00:12:58.020 --> 00:13:00.936
So yeah, don't be overzealous
with them.

00:13:00.936 --> 00:13:04.300
TONY CHAN: Yeah,
thanks, Ankur.

00:13:04.300 --> 00:13:09.610
So the next thing you need to
include in the manifest is to

00:13:09.610 --> 00:13:13.580
include the feature OpenGL
ES version 2.

00:13:13.580 --> 00:13:19.130
As Ankur mentioned earlier,
the new Maps are using

00:13:19.130 --> 00:13:25.230
vector-based maps, and that's
actually a requirement to have

00:13:25.230 --> 00:13:28.120
OpenGL ES version 2.

00:13:28.120 --> 00:13:34.640
So I'm sure you guys will enjoy
trying out the new API.

00:13:34.640 --> 00:13:39.030
So one small favor we need to
ask you guys to include is

00:13:39.030 --> 00:13:44.670
attribution requirement in order
to use the new Maps API.

00:13:44.670 --> 00:13:49.180
So you can add that as a
separate action item or as

00:13:49.180 --> 00:13:54.120
part of your original or your
own About action item in your

00:13:54.120 --> 00:13:55.370
application.

00:13:55.370 --> 00:13:57.310
We make it even easier
for you.

00:13:57.310 --> 00:14:03.010
So there is API core from Google
Play Services to get

00:14:03.010 --> 00:14:04.840
the open source software
licensing code.

00:14:04.840 --> 00:14:10.370
So you just need to grab that
text from that method and just

00:14:10.370 --> 00:14:14.890
include that in your About
Us action item.

00:14:14.890 --> 00:14:17.200
ANKUR KOTWAL: Just also want to
add here that as of the 1st

00:14:17.200 --> 00:14:22.820
of October 90% of Android
devices support

00:14:22.820 --> 00:14:25.300
OpenGL version 2.

00:14:25.300 --> 00:14:29.030
So anything remotely modern
will definitely do it.

00:14:29.030 --> 00:14:32.210
But in terms of older devices
that don't support OpenGL

00:14:32.210 --> 00:14:34.970
version 2, we're talking
about 9.2%.

00:14:34.970 --> 00:14:38.170
So the majority of devices
definitely will support this.

00:14:41.250 --> 00:14:44.520
It's not such a hard requirement
because you

00:14:44.520 --> 00:14:45.780
definitely get better maps.

00:14:45.780 --> 00:14:48.820
And the experience
on [INAUDIBLE]

00:14:48.820 --> 00:14:50.170
wouldn't be worthwhile anyway.

00:14:50.170 --> 00:14:54.570
So this isn't as strict a
requirement as it may seem.

00:14:54.570 --> 00:14:55.380
TONY CHAN: OK.

00:14:55.380 --> 00:14:55.785
Yeah.

00:14:55.785 --> 00:14:56.500
Yeah.

00:14:56.500 --> 00:14:57.390
Thanks, Ankur.

00:14:57.390 --> 00:15:02.240
So that's pretty much all I have
for getting started to

00:15:02.240 --> 00:15:04.460
have your apps to incorporate
the Maps.

00:15:04.460 --> 00:15:10.370
And I'll pass it to Paul to
tell you guys more details

00:15:10.370 --> 00:15:15.110
about all the features
in the new Maps API.

00:15:15.110 --> 00:15:15.810
Paul.

00:15:15.810 --> 00:15:16.190
PAUL SAXMAN: Cool.

00:15:16.190 --> 00:15:18.490
Yep, thanks, Tony.

00:15:18.490 --> 00:15:23.620
So Tony took you through all the
steps to get prepped for

00:15:23.620 --> 00:15:24.390
including a map.

00:15:24.390 --> 00:15:27.080
And now I'll start off with
telling you actually how to

00:15:27.080 --> 00:15:29.800
get the map in your
application from

00:15:29.800 --> 00:15:31.610
code point of view.

00:15:31.610 --> 00:15:33.630
So first thing is you definitely
want to set up a

00:15:33.630 --> 00:15:37.670
layout to actually
hold the map.

00:15:37.670 --> 00:15:41.460
And that layout component is a
fragment, or you can use a

00:15:41.460 --> 00:15:43.450
fragment for that.

00:15:43.450 --> 00:15:46.940
In the first example here we're
using the Support Map

00:15:46.940 --> 00:15:49.920
Fragment because we're using
the Support Library.

00:15:49.920 --> 00:15:53.170
But you can, if you're not using
the Support Library,

00:15:53.170 --> 00:15:56.480
which you probably should be
using the Support Library,

00:15:56.480 --> 00:16:00.390
just leave support out of the
Support Map Fragment line

00:16:00.390 --> 00:16:01.790
there at the end.

00:16:01.790 --> 00:16:03.930
ANKUR KOTWAL: So basically if
you're supporting devices

00:16:03.930 --> 00:16:07.830
prior to Honeycomb, Android
3.0, you'll be using the

00:16:07.830 --> 00:16:09.370
Support Library, because
we didn't have

00:16:09.370 --> 00:16:10.780
Fragments prior to that.

00:16:10.780 --> 00:16:14.520
Now given that Gingerbread,
which is 2.3, is still roughly

00:16:14.520 --> 00:16:18.310
about 50% of the user base, you
almost definitely will be

00:16:18.310 --> 00:16:19.360
using the Support Library.

00:16:19.360 --> 00:16:21.720
So this is an important point.

00:16:21.720 --> 00:16:22.910
PAUL SAXMAN: Yep.

00:16:22.910 --> 00:16:23.280
Yeah.

00:16:23.280 --> 00:16:26.530
So we'll carry on under the
assumption that you're using

00:16:26.530 --> 00:16:27.890
the Support Map Fragment.

00:16:27.890 --> 00:16:31.230
But the code essentially
looks exactly the same.

00:16:31.230 --> 00:16:32.350
ANKUR KOTWAL: Different
namespaces.

00:16:32.350 --> 00:16:32.810
PAUL SAXMAN: Exactly.

00:16:32.810 --> 00:16:34.050
Different namespaces
and slightly

00:16:34.050 --> 00:16:36.320
different function calls.

00:16:36.320 --> 00:16:39.680
But yeah.

00:16:39.680 --> 00:16:43.400
So when we're actually creating
our activity, using

00:16:43.400 --> 00:16:46.120
the Support Library you define
it as a fragment activity.

00:16:48.910 --> 00:16:51.870
Ankur, what is the fragment
activity?

00:16:51.870 --> 00:16:54.300
Why isn't it not just
called fragment?

00:16:54.300 --> 00:16:58.460
ANKUR KOTWAL: Well, in Android
3.0 and up where the

00:16:58.460 --> 00:17:00.790
activities could host fragments,
now fragments are

00:17:00.790 --> 00:17:02.520
part of the life
cycle as well.

00:17:02.520 --> 00:17:06.569
Now prior to Android 3.0,
because there were no

00:17:06.569 --> 00:17:08.970
fragments, those activities
don't support the fragment

00:17:08.970 --> 00:17:09.910
life cycle.

00:17:09.910 --> 00:17:13.390
So in the Support Library we
introduced a fragment activity

00:17:13.390 --> 00:17:14.599
which extends activity.

00:17:14.599 --> 00:17:17.619
But it adds the calls in for the
fragment life cycles, and

00:17:17.619 --> 00:17:19.244
there you can host fragments.

00:17:22.250 --> 00:17:24.319
That's why we're using the
fragment activity here.

00:17:24.319 --> 00:17:25.160
PAUL SAXMAN: Very cool.

00:17:25.160 --> 00:17:28.880
And so from then on out it's
just a matter of getting the

00:17:28.880 --> 00:17:31.980
map in your activity,
your fragment.

00:17:31.980 --> 00:17:36.220
So it's called a Google
Map is the class name.

00:17:36.220 --> 00:17:38.660
And you can see in the create
method is actually where

00:17:38.660 --> 00:17:42.610
you're going to get it out of
your layout file just using

00:17:42.610 --> 00:17:46.350
the ID that you specified
in your layout.

00:17:46.350 --> 00:17:49.460
And I should mention the
activity main is the

00:17:49.460 --> 00:17:53.970
activitymain.xml file for the
layout I defined up above.

00:17:53.970 --> 00:17:56.400
So that's pretty much
it to get a map in

00:17:56.400 --> 00:18:00.550
your activity or fragment.

00:18:00.550 --> 00:18:04.250
So actually, with this code here
I'd have a map that was

00:18:04.250 --> 00:18:07.530
basically the entire view.

00:18:07.530 --> 00:18:10.030
But that fragment, obviously,
you can put anywhere in your

00:18:10.030 --> 00:18:15.170
view hierarchy, so you could
embed it below some buttons or

00:18:15.170 --> 00:18:17.890
in a modifiable pane,
that type of thing.

00:18:17.890 --> 00:18:20.140
ANKUR KOTWAL: And now you can
actually have more than one.

00:18:20.140 --> 00:18:20.760
PAUL SAXMAN: Oh, yeah.

00:18:20.760 --> 00:18:22.440
ANKUR KOTWAL: So for all those
developers that have been

00:18:22.440 --> 00:18:27.000
asking for Map fragments, we
want to see these apps that

00:18:27.000 --> 00:18:28.440
use more than one
map at a time.

00:18:28.440 --> 00:18:28.900
PAUL SAXMAN: Yeah.

00:18:28.900 --> 00:18:31.850
ANKUR KOTWAL: Because I think
it'll be interesting to see

00:18:31.850 --> 00:18:35.350
what kind of experience
you provide there.

00:18:35.350 --> 00:18:38.640
Keep in mind that typically Maps
allow you to pan as well.

00:18:38.640 --> 00:18:40.710
So if you've got swipe gestures
and so on, like if

00:18:40.710 --> 00:18:45.390
you're using a ViewPager,
that introduces

00:18:45.390 --> 00:18:46.610
an interesting dynamic.

00:18:46.610 --> 00:18:50.120
Because the ViewPager itself can
swipe across pages, but if

00:18:50.120 --> 00:18:51.840
you're hosting a map
it's going to

00:18:51.840 --> 00:18:53.570
consume those swipe events.

00:18:53.570 --> 00:18:55.710
PAUL SAXMAN: Oh, that's
an interesting point.

00:18:55.710 --> 00:18:56.560
ANKUR KOTWAL: Yeah.

00:18:56.560 --> 00:18:59.470
Just keep these sorts
of things in mind.

00:18:59.470 --> 00:19:01.400
You can do tricks with
the ViewPager.

00:19:01.400 --> 00:19:04.920
Because you can just press the
Tab at the top to go to the

00:19:04.920 --> 00:19:08.400
next page, you can kind
of get away with it.

00:19:08.400 --> 00:19:10.860
But if you've got a bunch of
pages where you're swiping

00:19:10.860 --> 00:19:13.380
left or right to go through them
and suddenly there's a

00:19:13.380 --> 00:19:17.260
map in there, it's going to
seem inconsistent to users

00:19:17.260 --> 00:19:19.920
where they've been able
to swipe across pages.

00:19:19.920 --> 00:19:22.290
Sometimes you've just got a
static map, in which case it

00:19:22.290 --> 00:19:24.920
doesn't move, so you can
just allow the swipes.

00:19:24.920 --> 00:19:27.770
But if it's consuming it, just
pay attention to the user

00:19:27.770 --> 00:19:28.340
experience.

00:19:28.340 --> 00:19:28.716
PAUL SAXMAN: All right.

00:19:28.716 --> 00:19:29.092
Yeah.

00:19:29.092 --> 00:19:32.760
And if you really want to see
multiple maps in an app at the

00:19:32.760 --> 00:19:36.140
same time, definitely check out
the sample application,

00:19:36.140 --> 00:19:41.415
the demo app that's part
of the SDK Tools.

00:19:41.415 --> 00:19:44.240
I think there's one sample in
there that has four maps in a

00:19:44.240 --> 00:19:45.000
single view.

00:19:45.000 --> 00:19:49.320
And all the events are being
handled independently.

00:19:49.320 --> 00:19:51.250
Pretty cool stuff.

00:19:51.250 --> 00:19:53.730
So a couple of really
important things.

00:19:53.730 --> 00:19:56.540
I'm just going to cover two kind
of high level concepts or

00:19:56.540 --> 00:19:57.740
important Map concepts.

00:19:57.740 --> 00:19:59.810
And these are the
basic use cases.

00:19:59.810 --> 00:20:01.450
One is the camera.

00:20:01.450 --> 00:20:06.480
So that's actually kind of your
viewport into the map or

00:20:06.480 --> 00:20:09.330
what part of the map that you're
actually looking at.

00:20:09.330 --> 00:20:12.490
And of the other is markers.

00:20:12.490 --> 00:20:16.260
Markers are very fundamental
generally for most mapping

00:20:16.260 --> 00:20:17.830
applications.

00:20:17.830 --> 00:20:20.810
So camera and markers are what
we're going to cover today.

00:20:20.810 --> 00:20:23.540
There's obviously a lot more
features to the API that we

00:20:23.540 --> 00:20:29.550
can cover in a later show,
things like polylines and

00:20:29.550 --> 00:20:34.160
polygons and ground overlays
and that type of thing.

00:20:34.160 --> 00:20:36.370
ANKUR KOTWAL: I just have a
question for you, Paul.

00:20:36.370 --> 00:20:37.970
For someone that doesn't
know, what would

00:20:37.970 --> 00:20:39.035
you define as a marker?

00:20:39.035 --> 00:20:42.390
What does that mean?

00:20:42.390 --> 00:20:43.830
PAUL SAXMAN: We'll cover
that in just a second.

00:20:43.830 --> 00:20:43.980
ANKUR KOTWAL: Sure.

00:20:43.980 --> 00:20:45.540
PAUL SAXMAN: I have
an image of that.

00:20:45.540 --> 00:20:48.920
So a marker, just fundamentally
is if you want

00:20:48.920 --> 00:20:54.730
to put a marker or a pin on the
map as to where somebody

00:20:54.730 --> 00:20:55.740
or something is.

00:20:55.740 --> 00:20:59.770
So the iconic marker that we
use for Google Maps is the

00:20:59.770 --> 00:21:00.135
inverted teardrop.

00:21:00.135 --> 00:21:03.370
It looks like an inverted
red teardrop.

00:21:03.370 --> 00:21:06.442
ANKUR KOTWAL: So it's in a fixed
location, something that

00:21:06.442 --> 00:21:06.970
sits on the map.

00:21:06.970 --> 00:21:07.390
PAUL SAXMAN: Yep.

00:21:07.390 --> 00:21:08.250
ANKUR KOTWAL: OK, cool.

00:21:08.250 --> 00:21:09.880
PAUL SAXMAN: Well, not
necessarily fixed.

00:21:09.880 --> 00:21:11.610
You can move them around
if you really want to.

00:21:11.610 --> 00:21:14.840
And it's actually relatively
easy to move around.

00:21:14.840 --> 00:21:16.676
But we'll cover a few of
these in a minutes.

00:21:16.676 --> 00:21:17.072
ANKUR KOTWAL: Cool.

00:21:17.072 --> 00:21:17.470
Sure.

00:21:17.470 --> 00:21:19.830
PAUL SAXMAN: You'll see
what they look like.

00:21:19.830 --> 00:21:23.720
So in terms of the camera, The
key concepts with camera is

00:21:23.720 --> 00:21:24.980
obviously the camera location.

00:21:24.980 --> 00:21:27.250
That's actually where the
camera is positioned

00:21:27.250 --> 00:21:28.790
over top the map.

00:21:28.790 --> 00:21:30.910
And that can actually
take two forms.

00:21:30.910 --> 00:21:33.970
It's Lat/Long, so you can
actually center it at a

00:21:33.970 --> 00:21:37.500
certain point on the map
or the view of the map.

00:21:37.500 --> 00:21:38.790
And then the other
one is bounds.

00:21:38.790 --> 00:21:40.590
And that takes two
Lat/Long objects.

00:21:40.590 --> 00:21:43.960
So you can say I want the map
centered at this point, or I

00:21:43.960 --> 00:21:47.090
want a certain area of
the map to be just

00:21:47.090 --> 00:21:49.170
viewable in the display.

00:21:49.170 --> 00:21:51.000
And you do that via
the bounds.

00:21:51.000 --> 00:21:54.740
ANKUR KOTWAL: And so
it'll zoom out or

00:21:54.740 --> 00:21:55.500
zoom in to cover those.

00:21:55.500 --> 00:21:56.110
PAUL SAXMAN: Exactly.

00:21:56.110 --> 00:21:59.080
So let's say if you want to
actually show a neighborhood

00:21:59.080 --> 00:22:02.490
and you know the top left and
bottom right coordinates for

00:22:02.490 --> 00:22:05.490
that neighborhood, in terms
of geographic terms.

00:22:05.490 --> 00:22:09.150
You just say I want to have this
bounds or this bounding

00:22:09.150 --> 00:22:11.210
box, actually, displayed
on my map.

00:22:11.210 --> 00:22:14.940
And the map will actually resume
and position itself to

00:22:14.940 --> 00:22:16.590
actually display the entire
bounding area.

00:22:16.590 --> 00:22:16.880
ANKUR KOTWAL: Cool.

00:22:16.880 --> 00:22:20.000
PAUL SAXMAN: So very useful if
you wanted to display area as

00:22:20.000 --> 00:22:22.920
opposed to display a
particular point.

00:22:22.920 --> 00:22:25.800
Displaying a particular point,
you just need the Lat/Long.

00:22:25.800 --> 00:22:28.610
Zoom is actually essentially
how high the

00:22:28.610 --> 00:22:31.530
camera is over the map.

00:22:31.530 --> 00:22:38.280
So it's fairly fundamental, but
it's kind of analogous to

00:22:38.280 --> 00:22:41.580
altitude, except that
it's inverted.

00:22:41.580 --> 00:22:44.390
So 0 is actually zoomed
all the way out

00:22:44.390 --> 00:22:45.860
and as you zoom in.

00:22:49.260 --> 00:22:51.580
If you're at zoom 0, you
won't necessarily

00:22:51.580 --> 00:22:52.710
get the entire map.

00:22:52.710 --> 00:22:59.230
Zoom 0 just says that I'm going
to go as far out as the

00:22:59.230 --> 00:23:01.330
viewport allows me to.

00:23:01.330 --> 00:23:02.860
So if you have a very
big screen--

00:23:02.860 --> 00:23:06.370
I haven't tried it on, let's
say, a Nexus 10, but

00:23:06.370 --> 00:23:08.410
presumably if you're zoomed all
the way out on a Nexus 10

00:23:08.410 --> 00:23:11.310
you'll actually see the entire
map of the world.

00:23:11.310 --> 00:23:13.770
On a smaller device you'll
probably actually see a

00:23:13.770 --> 00:23:14.870
fraction of the map.

00:23:14.870 --> 00:23:20.270
I think you'll see the entire
map if it's like 256 dp.

00:23:20.270 --> 00:23:21.520
ANKUR KOTWAL: I see.

00:23:23.690 --> 00:23:25.080
PAUL SAXMAN: So bearing.

00:23:25.080 --> 00:23:28.460
Now that we have vector-based
maps and you can actually

00:23:28.460 --> 00:23:33.230
rotate them, which is a really
cool effect, bearing is

00:23:33.230 --> 00:23:37.840
actually the rotation
of the map.

00:23:40.560 --> 00:23:45.770
It actually rotates clockwise,
so bearing 0, north is at the

00:23:45.770 --> 00:23:47.320
top of your interface.

00:23:47.320 --> 00:23:51.270
And as you rotate the
bearing, actually,

00:23:51.270 --> 00:23:53.210
the map rotates clockwise.

00:23:53.210 --> 00:23:55.020
And you go all the way
up to 360, and then

00:23:55.020 --> 00:23:57.210
you're back to north.

00:23:57.210 --> 00:24:00.240
So 90 degrees, I think, is north
on the right-hand side

00:24:00.240 --> 00:24:02.210
of the interface.

00:24:02.210 --> 00:24:02.810
Tilt.

00:24:02.810 --> 00:24:04.810
Again, this is a nice feature.

00:24:04.810 --> 00:24:09.375
The nice feature of the
vector-based maps is actually

00:24:09.375 --> 00:24:10.640
you can look at it
at an angle.

00:24:10.640 --> 00:24:13.850
So you don't have to look at the
map exactly straight down.

00:24:13.850 --> 00:24:14.910
ANKUR KOTWAL: Up, down.

00:24:14.910 --> 00:24:18.670
PAUL SAXMAN: You can actually
specify a tilt.

00:24:18.670 --> 00:24:22.970
0 is actually top down and
somewhere between like 45 and

00:24:22.970 --> 00:24:24.320
90 degrees.

00:24:24.320 --> 00:24:24.640
ANKUR KOTWAL: Yeah.

00:24:24.640 --> 00:24:27.505
It depends on your zoom level
as to how much tilt you can

00:24:27.505 --> 00:24:28.430
have, right?

00:24:28.430 --> 00:24:29.960
PAUL SAXMAN: Exactly, exactly.

00:24:29.960 --> 00:24:34.090
So if you're looking at a map at
45, you can definitely see

00:24:34.090 --> 00:24:36.400
that there's an angle there.

00:24:36.400 --> 00:24:38.960
If you actually bring it below
45, you start to see some kind

00:24:38.960 --> 00:24:42.670
of 3D effect, so it will be a
little bit of kind of fogging

00:24:42.670 --> 00:24:44.910
at the further end and
that type of thing.

00:24:44.910 --> 00:24:49.480
So really great effect if you're
moving through the map

00:24:49.480 --> 00:24:51.680
to have some kind of
tilt on the map.

00:24:51.680 --> 00:24:56.400
Scrolling is actually just
programmatically moving the

00:24:56.400 --> 00:24:58.330
position of the map.

00:24:58.330 --> 00:25:02.610
And animation is a really
important topic too, because

00:25:02.610 --> 00:25:05.860
when you're actually
repositioning the map you can

00:25:05.860 --> 00:25:08.070
either do it instantaneously.

00:25:08.070 --> 00:25:10.310
So let's say I want
to move from

00:25:10.310 --> 00:25:11.700
New York to San Francisco.

00:25:11.700 --> 00:25:15.730
I can have the map at one moment
display New York, and

00:25:15.730 --> 00:25:17.370
then when I send the command
actually have

00:25:17.370 --> 00:25:19.170
it display San Francisco.

00:25:19.170 --> 00:25:23.440
Also you can actually have that
camera change animated.

00:25:23.440 --> 00:25:25.790
So you can actually fly over the
United States to go from

00:25:25.790 --> 00:25:27.770
New York to San Francisco.

00:25:27.770 --> 00:25:31.950
Really nice effect for more
advanced use cases.

00:25:31.950 --> 00:25:35.350
General use case, obviously
you'd reposition the map.

00:25:35.350 --> 00:25:39.720
ANKUR KOTWAL: So I'll just add
that these capabilities of

00:25:39.720 --> 00:25:44.350
zoom, rotation, bearing, tilt,
and scrolling, when you add

00:25:44.350 --> 00:25:49.120
the map yourself, when you add
the map fragment, the typical

00:25:49.120 --> 00:25:50.400
touch controls come with it.

00:25:50.400 --> 00:25:52.120
So by default they're enabled.

00:25:52.120 --> 00:25:56.330
So users can swipe
to pan around.

00:25:56.330 --> 00:25:58.390
For those of you that don't
know, we have two-fingered

00:25:58.390 --> 00:26:02.810
gestures for rotation where you
hold one finger steady and

00:26:02.810 --> 00:26:05.840
rotate your other finger around
that steady finger.

00:26:05.840 --> 00:26:08.810
Tilt is two fingers
up and down.

00:26:08.810 --> 00:26:10.850
And well, scrolling
is scrolling.

00:26:10.850 --> 00:26:13.140
There's also a trick
to zoom obviously.

00:26:13.140 --> 00:26:16.360
There's pinching in your fingers
and pinching out.

00:26:16.360 --> 00:26:18.880
But we've actually got a
one-handed gesture as well

00:26:18.880 --> 00:26:21.790
where you can double tap it.

00:26:21.790 --> 00:26:24.920
On a second tap you actually
hold it down and drag up and

00:26:24.920 --> 00:26:26.210
down, and it zooms out.

00:26:26.210 --> 00:26:30.250
So when you've got something
like a phone in your hand, you

00:26:30.250 --> 00:26:32.460
can zoom on these maps
without having to put

00:26:32.460 --> 00:26:33.190
these gestures in.

00:26:33.190 --> 00:26:35.660
The reason it's important for
developers to know this is

00:26:35.660 --> 00:26:38.030
that it comes for free with
the map fragment.

00:26:38.030 --> 00:26:39.830
You don't need to implement
it yourself.

00:26:39.830 --> 00:26:42.780
You can override it and disabled
if you want, though.

00:26:42.780 --> 00:26:45.210
PAUL SAXMAN: Yeah.

00:26:45.210 --> 00:26:46.190
Yeah.

00:26:46.190 --> 00:26:48.000
Actually, when we get to markers
I'll cover a few of

00:26:48.000 --> 00:26:51.080
the events that you receive
on markers.

00:26:51.080 --> 00:26:54.020
But yeah, you do actually get
a lot of these events.

00:26:54.020 --> 00:26:56.740
You can override all of them,
but a lot of them are

00:26:56.740 --> 00:26:58.660
available for override
as well.

00:26:58.660 --> 00:27:03.980
But yeah, that double tap and
hold to zoom is definitely a

00:27:03.980 --> 00:27:06.275
lifesaver a lot of times.

00:27:06.275 --> 00:27:07.570
ANKUR KOTWAL: You're not using
it while you're driving or

00:27:07.570 --> 00:27:08.580
anything, right, Paul?

00:27:08.580 --> 00:27:09.830
PAUL SAXMAN: No, no.

00:27:13.060 --> 00:27:15.180
Because these are vector
maps, you actually

00:27:15.180 --> 00:27:16.620
can zoom to any level.

00:27:16.620 --> 00:27:21.630
It's actually continuous zooming
scale, so unlike

00:27:21.630 --> 00:27:25.040
tile-based or raster-based
mapping where you tend to do

00:27:25.040 --> 00:27:27.140
it at discrete levels.

00:27:27.140 --> 00:27:30.000
So having the ability to
actually just slide and zoom

00:27:30.000 --> 00:27:33.490
is really nice from a
user's perspective.

00:27:33.490 --> 00:27:36.320
The last thing that we'll
talk about a little bit,

00:27:36.320 --> 00:27:40.770
positioning versus updating
of the camera.

00:27:40.770 --> 00:27:41.980
Just lost the lights in here.

00:27:41.980 --> 00:27:42.540
There we go.

00:27:42.540 --> 00:27:45.250
So positioning is actually
moving the camera.

00:27:45.250 --> 00:27:53.260
And actually you specify
between location, zoom,

00:27:53.260 --> 00:27:59.120
bearing, and tilt whichever ones
you want to specify of

00:27:59.120 --> 00:28:00.160
those four.

00:28:00.160 --> 00:28:01.940
And you change the
camera position.

00:28:01.940 --> 00:28:04.020
All the other ones are
actually defaulted.

00:28:04.020 --> 00:28:07.740
So if I, say, move to New York
and I just pass the Lat/Longs

00:28:07.740 --> 00:28:10.750
to New York, it'll go to default
zoom level, default

00:28:10.750 --> 00:28:12.920
bearing, tilt, et cetera.

00:28:12.920 --> 00:28:19.490
And positioning is kind of the
default way to actually move

00:28:19.490 --> 00:28:21.090
the view around the map.

00:28:21.090 --> 00:28:23.370
On the other hand, camera
updating is you're just

00:28:23.370 --> 00:28:27.380
changing a particular
attribute,

00:28:27.380 --> 00:28:28.660
so for example location.

00:28:28.660 --> 00:28:32.250
So this is where scrolling comes
is if I want to scroll

00:28:32.250 --> 00:28:36.090
the viewport left to right or I
want to actually zoom in one

00:28:36.090 --> 00:28:38.650
level or zoom out one level,
these are just updates.

00:28:38.650 --> 00:28:42.010
I'm not actually changing the
entire camera position.

00:28:42.010 --> 00:28:45.030
So position is for actually
starting from scratch and

00:28:45.030 --> 00:28:47.320
changing the viewport or
where the camera's

00:28:47.320 --> 00:28:48.640
position over the map.

00:28:48.640 --> 00:28:51.930
And updating is actually just
incrementally changing.

00:28:51.930 --> 00:28:54.014
ANKUR KOTWAL: And updating
also animates to the

00:28:54.014 --> 00:28:54.810
destination, right?

00:28:54.810 --> 00:28:55.500
PAUL SAXMAN: You can or can't.

00:28:55.500 --> 00:28:57.570
So animation is something
that you

00:28:57.570 --> 00:28:58.830
essentially turn on or off.

00:28:58.830 --> 00:29:02.450
So I'll show a little bit I
think on the next slide where

00:29:02.450 --> 00:29:05.370
we have a little bit of code.

00:29:05.370 --> 00:29:06.730
Yeah.

00:29:06.730 --> 00:29:07.230
So, yeah.

00:29:07.230 --> 00:29:09.406
Actually I left the animation
out of this one, but I think I

00:29:09.406 --> 00:29:10.440
have it in a later slide.

00:29:10.440 --> 00:29:17.630
So in terms of camera position,
bearing and tile are

00:29:17.630 --> 00:29:20.450
actually only available
in position.

00:29:20.450 --> 00:29:23.690
So bearing and tile aren't
available in updates.

00:29:23.690 --> 00:29:25.560
I'm not exactly sure
why we didn't

00:29:25.560 --> 00:29:26.910
include them in updates.

00:29:26.910 --> 00:29:31.480
Probably because of the
primary use cases of

00:29:31.480 --> 00:29:33.840
positioning.

00:29:33.840 --> 00:29:37.730
But you can see here there in
this camera position builder.

00:29:37.730 --> 00:29:41.390
This is more or less
a factory object.

00:29:41.390 --> 00:29:43.260
I can actually specify
the target, zoom,

00:29:43.260 --> 00:29:44.960
bearing, and tilt.

00:29:44.960 --> 00:29:47.180
Zoom, bearing, and tilt
are all optional.

00:29:47.180 --> 00:29:51.100
So if you just want to
reposition, like I said, at

00:29:51.100 --> 00:29:54.220
default zoom, bearing, and tilt
levels, you just specify

00:29:54.220 --> 00:29:57.080
the target, and the map will
kind of start over again at

00:29:57.080 --> 00:29:58.610
that location.

00:29:58.610 --> 00:30:01.960
The zoom, bearing, and tilt you
can optionally set to get

00:30:01.960 --> 00:30:03.650
a particular effect.

00:30:03.650 --> 00:30:05.750
ANKUR KOTWAL: I'm a bit of a
fan of the fact that these

00:30:05.750 --> 00:30:08.340
methods all return the same
object back so that you can

00:30:08.340 --> 00:30:09.760
change them in this nice way--

00:30:09.760 --> 00:30:10.390
PAUL SAXMAN: Oh, yeah.

00:30:10.390 --> 00:30:13.930
ANKUR KOTWAL: --without having
a ton of verbose code that

00:30:13.930 --> 00:30:15.970
states your same object
over and over again.

00:30:15.970 --> 00:30:16.300
PAUL SAXMAN: Yeah.

00:30:16.300 --> 00:30:19.170
The really nice feature in this
builder is that you just

00:30:19.170 --> 00:30:23.370
kind of build these things
up and fire them away.

00:30:23.370 --> 00:30:28.180
So once you have this new camera
position, you just pass

00:30:28.180 --> 00:30:30.420
it to the camera update factory,
get your camera

00:30:30.420 --> 00:30:34.120
update object out, and then you
just do map.movecamera.

00:30:34.120 --> 00:30:36.540
And the other one, what
is it called?

00:30:36.540 --> 00:30:37.810
I'm going to go to the--

00:30:37.810 --> 00:30:40.480
I just cheated right there.

00:30:40.480 --> 00:30:42.112
ANKUR KOTWAL: Nobody
saw it, though.

00:30:42.112 --> 00:30:43.800
It's not like this is recorded
or anything.

00:30:43.800 --> 00:30:45.240
PAUL SAXMAN: No,
of course not.

00:30:45.240 --> 00:30:48.135
Nobody will notice that
10-frame slide

00:30:48.135 --> 00:30:50.320
switch that I just did.

00:30:50.320 --> 00:30:54.530
So yeah, so map.movecamera,
you just pass the camera

00:30:54.530 --> 00:30:56.830
update map.animate.

00:30:56.830 --> 00:30:57.990
Oh, jeez, I forgot already.

00:30:57.990 --> 00:31:03.730
Animate camera will actually
animate the transition.

00:31:03.730 --> 00:31:05.720
So once you have this camera
update object, you can make a

00:31:05.720 --> 00:31:10.740
decision about how you want
to do the transition.

00:31:10.740 --> 00:31:12.670
So camera update, on
the other hand, is

00:31:12.670 --> 00:31:13.550
a little bit different.

00:31:13.550 --> 00:31:16.390
So we're going directly to that
cut camera update class,

00:31:16.390 --> 00:31:21.030
so we're not actually using
the camera position class.

00:31:21.030 --> 00:31:23.220
So here we have a camera
update factory.

00:31:28.208 --> 00:31:30.670
I can specify the Lat/Long.

00:31:30.670 --> 00:31:31.690
Like I said before--

00:31:31.690 --> 00:31:33.730
and that's for the center
of the map--

00:31:33.730 --> 00:31:39.400
I can also do a Lat/Long zoom
here where I specify a new

00:31:39.400 --> 00:31:40.820
Lat/Long and zoom level.

00:31:40.820 --> 00:31:42.760
And that can also do the
bounds here as well.

00:31:42.760 --> 00:31:46.170
So if I want to basically zoom
out to show a neighborhood or

00:31:46.170 --> 00:31:50.600
zoom in to show a particular
area of the city, these are

00:31:50.600 --> 00:31:53.930
very convenient functions
for doing that.

00:31:53.930 --> 00:31:56.000
So scrolling is actually
part of the camera

00:31:56.000 --> 00:31:57.640
update class as well.

00:31:57.640 --> 00:32:02.140
So scrolling and zoom, the
primary use cases I see for

00:32:02.140 --> 00:32:06.200
these two, as opposed to using
camera position, is for if you

00:32:06.200 --> 00:32:07.870
want to actually do your
own map controls.

00:32:07.870 --> 00:32:09.780
Let's say you want to provide
your own zoom buttons or you

00:32:09.780 --> 00:32:12.210
want to actually provide your
own panning buttons.

00:32:12.210 --> 00:32:16.090
There are really a next
class to use.

00:32:16.090 --> 00:32:20.980
Another use case is let's
say you're animating a

00:32:20.980 --> 00:32:22.140
sprite on the map.

00:32:22.140 --> 00:32:28.820
Let's say he's walking across
the map to show directions to

00:32:28.820 --> 00:32:30.340
the grocery store.

00:32:30.340 --> 00:32:34.460
You can actually use the
scrolling method to actually

00:32:34.460 --> 00:32:37.050
scroll the change.

00:32:37.050 --> 00:32:41.520
And again, these are actually
animated or not animated.

00:32:41.520 --> 00:32:43.950
Interesting thing about zoom
is you can actually do zoom

00:32:43.950 --> 00:32:48.340
in, zoom out, zoom by a certain
percentage, or zoom to

00:32:48.340 --> 00:32:49.590
one of the discrete levels.

00:32:52.030 --> 00:32:58.030
Markers, we'll talk about
these real quick.

00:32:58.030 --> 00:33:00.320
Positioning markers is obviously
very important

00:33:00.320 --> 00:33:03.220
because markers actually
show a particular

00:33:03.220 --> 00:33:04.600
geolocation on the map.

00:33:04.600 --> 00:33:08.250
Info windows, this is
information that's related to

00:33:08.250 --> 00:33:11.950
a position or a marker
that you can display.

00:33:11.950 --> 00:33:14.510
Dragging is actually you can
allow users to move the marker

00:33:14.510 --> 00:33:16.720
around the map if
they want to.

00:33:16.720 --> 00:33:18.270
This is a little bit of an
advanced thing, but is

00:33:18.270 --> 00:33:20.320
actually really easy to do.

00:33:20.320 --> 00:33:20.990
Icons.

00:33:20.990 --> 00:33:24.030
So there's obviously a default
marker icon, which, as I said

00:33:24.030 --> 00:33:26.330
before, is the inverted
teardrop.

00:33:26.330 --> 00:33:28.120
But you can actually
customize it.

00:33:31.750 --> 00:33:33.070
Actually I have this
a little bit wrong.

00:33:33.070 --> 00:33:35.830
So customizing is actually
part of Info Windows that

00:33:35.830 --> 00:33:37.050
we'll talk about later.

00:33:37.050 --> 00:33:40.690
But icons you can actually
customize by specifying unique

00:33:40.690 --> 00:33:45.480
colors, specifying your images
or bitmaps and specifying how

00:33:45.480 --> 00:33:46.370
they anchor on that.

00:33:46.370 --> 00:33:49.780
And then there's events
on markers as well.

00:33:49.780 --> 00:33:52.360
So in terms of positioning Info
Windows and dragging,

00:33:52.360 --> 00:33:53.490
really easy to do.

00:33:53.490 --> 00:33:59.950
This is a huge update from
the Map View 1.0.

00:33:59.950 --> 00:34:03.150
Position basically you add
a marker to your map, you

00:34:03.150 --> 00:34:07.370
specify your marker options,
and then you set whatever

00:34:07.370 --> 00:34:08.900
properties you want.

00:34:08.900 --> 00:34:10.980
Position is you absolutely
have to have a position.

00:34:10.980 --> 00:34:13.230
If you don't have a position for
your marker and you try to

00:34:13.230 --> 00:34:16.560
place it on the map, you're
going to get an exception.

00:34:16.560 --> 00:34:19.320
Title, snippet, and dragable
are all optional.

00:34:19.320 --> 00:34:23.575
So if you specify title and/or
snippet, actually you'll get

00:34:23.575 --> 00:34:24.389
an Info Window.

00:34:24.389 --> 00:34:27.300
So on the right-hand side, the
red inverted teardrop is

00:34:27.300 --> 00:34:32.670
actually the marker just to show
where the position is,

00:34:32.670 --> 00:34:34.300
the Lat/Long coordinates are.

00:34:34.300 --> 00:34:39.340
And the title and the snippets
show up in the Info Window.

00:34:39.340 --> 00:34:41.679
So by default Info
Windows are off.

00:34:41.679 --> 00:34:42.940
You can actually turn them on.

00:34:42.940 --> 00:34:45.969
I think it's actually
marker.showinfowindow.

00:34:45.969 --> 00:34:48.900
That will actually
programmatically display the

00:34:48.900 --> 00:34:50.790
Info Window.

00:34:50.790 --> 00:34:54.195
And there's also, I believe, a
hide method as well, so if you

00:34:54.195 --> 00:34:55.940
want to programmatically
hide it.

00:34:55.940 --> 00:34:57.300
So by default they're off.

00:34:57.300 --> 00:35:01.550
By default if you specify title
or snippet and the user

00:35:01.550 --> 00:35:04.860
touches the marker you'll
see the Info Window.

00:35:04.860 --> 00:35:06.150
Dragable is a neat thing.

00:35:06.150 --> 00:35:07.560
You have to see it
to understand

00:35:07.560 --> 00:35:08.520
exactly what it does.

00:35:08.520 --> 00:35:12.530
But the default behavior is that
if a user long presses a

00:35:12.530 --> 00:35:16.140
marker and the marker is
dragable, which is specified

00:35:16.140 --> 00:35:20.640
with this dragable true, the
marker actually becomes

00:35:20.640 --> 00:35:22.340
repositionable by the user.

00:35:22.340 --> 00:35:26.960
So this is really great use case
if you want to actually

00:35:26.960 --> 00:35:28.980
get feedback from
the user about

00:35:28.980 --> 00:35:30.230
the location of something.

00:35:33.820 --> 00:35:40.150
So in terms of the icons or
the images, all this is

00:35:40.150 --> 00:35:42.730
actually accessed through these
marker options, or you

00:35:42.730 --> 00:35:45.445
specify marker images or colors
images and anchoring

00:35:45.445 --> 00:35:49.560
via the marker options class.

00:35:49.560 --> 00:35:53.130
So as I said before, position
has to be in all of these, so

00:35:53.130 --> 00:35:55.550
all of these actually
show position here.

00:35:55.550 --> 00:35:59.350
So the first thing is that you
can pretty easily change the

00:35:59.350 --> 00:36:02.010
color using this bitmap
descriptor factory.

00:36:02.010 --> 00:36:04.690
And you actually just
specify the hue.

00:36:04.690 --> 00:36:07.020
You can specify use one of
our pre-canned hues.

00:36:07.020 --> 00:36:10.650
I can't remember exactly how
many of them there are, but

00:36:10.650 --> 00:36:15.360
there's a fair number of pretty
appealing colors.

00:36:15.360 --> 00:36:19.250
Or you can actually specify
the hue using a float.

00:36:19.250 --> 00:36:20.770
You can specify your
own image.

00:36:20.770 --> 00:36:23.240
The easiest way to get the image
in there is having it in

00:36:23.240 --> 00:36:29.380
your APK and just specify the
resource to load the bitmap.

00:36:29.380 --> 00:36:30.820
I think there's a number
of other ways.

00:36:30.820 --> 00:36:34.650
You can actually pass a bitmap
object if you want, so you

00:36:34.650 --> 00:36:38.410
could actually generate a marker
image on the fly if you

00:36:38.410 --> 00:36:40.760
really wanted to.

00:36:40.760 --> 00:36:43.480
I think the other options it's
like a resource identifier.

00:36:43.480 --> 00:36:45.340
You can specify a
bitmap object.

00:36:45.340 --> 00:36:49.160
You can specify a file if you
want to actually load the file

00:36:49.160 --> 00:36:50.560
out of storage.

00:36:50.560 --> 00:36:51.580
ANKUR KOTWAL: Yeah.

00:36:51.580 --> 00:36:53.390
Typically for the file situation
you might want to

00:36:53.390 --> 00:36:56.740
download it from the
web or something.

00:36:56.740 --> 00:37:00.710
But yeah, as much as possible
you want to use resource IDs

00:37:00.710 --> 00:37:04.180
because you can chuck them in
your drawable directories and

00:37:04.180 --> 00:37:08.570
get the right scale to image for
whatever DPI the device is

00:37:08.570 --> 00:37:11.160
running at that time.

00:37:11.160 --> 00:37:11.460
PAUL SAXMAN: Yeah.

00:37:11.460 --> 00:37:17.690
Really the primary use case I
see for using a file or a

00:37:17.690 --> 00:37:21.400
bitmap for that matter is
actually if you're doing

00:37:21.400 --> 00:37:23.990
something like overlaying
images, for

00:37:23.990 --> 00:37:26.060
example, on your map.

00:37:26.060 --> 00:37:28.720
So there you're specifying,
let's say, this image is

00:37:28.720 --> 00:37:30.500
associated with this position
on the map.

00:37:30.500 --> 00:37:36.710
So you could actually just load
that from local storage

00:37:36.710 --> 00:37:39.343
or over the wire--

00:37:39.343 --> 00:37:40.110
ANKUR KOTWAL: Cool.

00:37:40.110 --> 00:37:40.860
PAUL SAXMAN: --as opposed
to out of

00:37:40.860 --> 00:37:42.630
your resources directory.

00:37:42.630 --> 00:37:45.620
But if you're just reusing the
same icon over and over again,

00:37:45.620 --> 00:37:47.375
definitely drop it in your
resources directory.

00:37:52.020 --> 00:37:54.960
So I'm just going to go back to
the last slide real quick.

00:37:54.960 --> 00:37:57.740
So the anchor on the default
marker is actually the very

00:37:57.740 --> 00:38:01.150
bottom center of that
red teardrop.

00:38:01.150 --> 00:38:02.580
So that's actually where the

00:38:02.580 --> 00:38:03.610
coordinates are when I specify--

00:38:03.610 --> 00:38:06.670
Well, in this case it shows 0,
0, but that's definitely not

00:38:06.670 --> 00:38:09.930
San Francisco Lat/Long.

00:38:09.930 --> 00:38:13.720
So the Lat/Long is actually
associated with the bottom

00:38:13.720 --> 00:38:18.260
center of that teardrop,
which is the pinpoint.

00:38:18.260 --> 00:38:20.470
So you can actually change
that, however.

00:38:20.470 --> 00:38:22.810
So what I had done before
I wish I could show you.

00:38:22.810 --> 00:38:27.550
But you can create your own
custom marker icon.

00:38:27.550 --> 00:38:30.230
And you can do things like
put a drop shadow on it.

00:38:30.230 --> 00:38:36.880
Or you could offset the pinpoint
off a little bit to

00:38:36.880 --> 00:38:40.660
the left or right so you can
just customize it to make it

00:38:40.660 --> 00:38:42.640
look a little more appealing
to your application.

00:38:42.640 --> 00:38:45.130
If you do that you have to set a
new anchor point, and that's

00:38:45.130 --> 00:38:48.470
the very last method down in
the anchoring section, so

00:38:48.470 --> 00:38:50.270
that's percentage
from top left.

00:38:50.270 --> 00:38:52.140
ANKUR KOTWAL: Would a good use
case for this be something

00:38:52.140 --> 00:38:54.720
like where your marker
is like a pin?

00:38:54.720 --> 00:38:58.470
It's kind of angled, and so the
center point of the marker

00:38:58.470 --> 00:39:01.840
isn't actually the point that
touches the ground.

00:39:01.840 --> 00:39:05.990
And so if you set the position
to be that marker, it would

00:39:05.990 --> 00:39:07.970
have put the center point rather
in the bottom right

00:39:07.970 --> 00:39:10.340
corner, if it was a
pin, for example.

00:39:10.340 --> 00:39:12.090
PAUL SAXMAN: Exactly.

00:39:12.090 --> 00:39:16.220
I think the classic marker
is actually the pin.

00:39:16.220 --> 00:39:21.420
And generally it's positioned
so the pinpoint is at the

00:39:21.420 --> 00:39:22.400
bottom left of the image.

00:39:22.400 --> 00:39:22.670
Yeah.

00:39:22.670 --> 00:39:25.620
So in that case you actually
have to specify an anchor.

00:39:25.620 --> 00:39:32.550
And the anchor would be 0, 1,
because you're 0% along the

00:39:32.550 --> 00:39:37.090
x-axis and 100% along the
y-axis, because the origin is

00:39:37.090 --> 00:39:38.155
the top left of the image.

00:39:38.155 --> 00:39:40.060
ANKUR KOTWAL: Yes.

00:39:40.060 --> 00:39:41.740
PAUL SAXMAN: So for the default
marker it's going to

00:39:41.740 --> 00:39:47.840
be 0.51 because it's
the center bottom.

00:39:47.840 --> 00:39:51.030
And for the case where you have
the push pin, it's going

00:39:51.030 --> 00:39:53.330
to be 0, 1.

00:39:53.330 --> 00:39:54.090
ANKUR KOTWAL: Got you.

00:39:54.090 --> 00:39:56.150
PAUL SAXMAN: So just base
and percentage points.

00:39:59.210 --> 00:40:02.270
I definitely should've covered
map events, but maybe we can

00:40:02.270 --> 00:40:03.360
talk about those
in another one.

00:40:03.360 --> 00:40:05.750
Marker events are actually
really important because it's

00:40:05.750 --> 00:40:09.490
the way that users actually
interact with your pinpoints

00:40:09.490 --> 00:40:11.360
for your markers on your map.

00:40:14.740 --> 00:40:20.510
So by default our users can
actually touch the icons.

00:40:20.510 --> 00:40:22.900
If you have an Info Window, the
default behavior is the

00:40:22.900 --> 00:40:27.030
Info Window is displayed and
users can actually touch the

00:40:27.030 --> 00:40:27.750
Info Window.

00:40:27.750 --> 00:40:31.690
So this would be use cases let's
say you don't want to

00:40:31.690 --> 00:40:33.380
show all the restaurants
in a particular city.

00:40:33.380 --> 00:40:35.980
You can put markers on the map
for all the restaurants.

00:40:35.980 --> 00:40:38.880
The user can press the marker
to actually see the Info

00:40:38.880 --> 00:40:41.920
Window, which would be, let's
say, the restaurant name.

00:40:41.920 --> 00:40:43.980
And if the user touches the
Info Window, that can take

00:40:43.980 --> 00:40:46.720
them to a details page.

00:40:46.720 --> 00:40:52.060
So that's the rationale behind
things like the on-marker

00:40:52.060 --> 00:40:53.930
click listener, because you know
when the user clicked the

00:40:53.930 --> 00:40:57.570
marker, the on-window click
listener, because you know

00:40:57.570 --> 00:41:01.460
when the user actually clicked
the Info Window, and then

00:41:01.460 --> 00:41:03.750
marker drag, because like we
showed before users can

00:41:03.750 --> 00:41:06.140
actually move the market
around the map.

00:41:06.140 --> 00:41:08.720
There's also a marker drag
listener as well.

00:41:08.720 --> 00:41:11.960
So the way that you actually
set yourself up to receive

00:41:11.960 --> 00:41:15.650
these events is you define the
listeners, any one of those

00:41:15.650 --> 00:41:18.210
three or all three
if you want.

00:41:18.210 --> 00:41:19.590
You register your listeners.

00:41:19.590 --> 00:41:21.740
Once you've actually created
your map, you can actually

00:41:21.740 --> 00:41:25.340
specify who your
listeners are.

00:41:25.340 --> 00:41:27.720
The easiest case is if you
attach the listeners to your

00:41:27.720 --> 00:41:30.360
activity and then when you
create the map just pass in a

00:41:30.360 --> 00:41:32.100
reference to your activity.

00:41:32.100 --> 00:41:35.960
And then once that's all set
up, you implement these

00:41:35.960 --> 00:41:38.320
methods in your activity or
fragment, and you can start

00:41:38.320 --> 00:41:41.770
receiving these events
and do fun and

00:41:41.770 --> 00:41:44.730
interesting stuff with them.

00:41:44.730 --> 00:41:47.850
So drag, drag in, and drag start
are obviously associated

00:41:47.850 --> 00:41:49.100
with the marker drag listener.

00:41:52.010 --> 00:41:54.860
Info Window click listener and
on-marker click is the

00:41:54.860 --> 00:41:56.390
on-marker click listener.

00:41:56.390 --> 00:41:59.310
And for each of these you
obviously, as you can see, you

00:41:59.310 --> 00:42:03.100
get the marker that was touched,
click, dragged, or

00:42:03.100 --> 00:42:04.250
whatever else.

00:42:04.250 --> 00:42:07.610
So I think that's it.

00:42:07.610 --> 00:42:08.010
ANKUR KOTWAL: Yeah.

00:42:08.010 --> 00:42:09.270
Thanks for that.

00:42:09.270 --> 00:42:13.215
Just so that you all know, today
was part one in a series

00:42:13.215 --> 00:42:19.510
of ADL+ shows that we're going
to have about the Maps API.

00:42:19.510 --> 00:42:21.270
The next episode won't
be this year.

00:42:21.270 --> 00:42:22.620
It'll be early next year.

00:42:22.620 --> 00:42:25.720
But we're going to go into some
more of what we consider

00:42:25.720 --> 00:42:29.160
our more advanced topics, like
polylines line and so on.

00:42:29.160 --> 00:42:32.620
But we've got some really cool
stuff coming up around in and

00:42:32.620 --> 00:42:34.350
around the API.

00:42:34.350 --> 00:42:43.620
So with that being said,
let us move onto Q&amp;A.

00:42:43.620 --> 00:42:46.810
TONY CHAN: Ankur, we got a
couple questions from Lindon

00:42:46.810 --> 00:42:48.780
on the chat window.

00:42:48.780 --> 00:42:52.020
So maybe we can take
a look at them.

00:42:52.020 --> 00:42:52.520
ANKUR KOTWAL: Awesome.

00:42:52.520 --> 00:42:53.610
Welcome, Lindon.

00:42:53.610 --> 00:42:56.210
And Andrew was on there
for a while as well.

00:42:59.110 --> 00:43:01.380
OK.

00:43:01.380 --> 00:43:03.380
There's quite a lot of chatter
here, so I'm just trying to

00:43:03.380 --> 00:43:04.140
see where the first question--

00:43:04.140 --> 00:43:04.495
TONY CHAN: Yeah.

00:43:04.495 --> 00:43:06.300
Let me read the first question
to you guys.

00:43:06.300 --> 00:43:10.920
So the first question was, "Any
chance we can access the

00:43:10.920 --> 00:43:15.250
frame buffer for Google Maps
to wrap a big map?

00:43:15.250 --> 00:43:18.810
Well, it was possible with
MapView version 1 and, of

00:43:18.810 --> 00:43:19.570
course, the [INAUDIBLE]

00:43:19.570 --> 00:43:21.185
I had just [INAUDIBLE]

00:43:21.185 --> 00:43:25.890
with the old API." So that's
the first question.

00:43:25.890 --> 00:43:26.970
ANKUR KOTWAL: I don't believe
it's possible

00:43:26.970 --> 00:43:28.490
right now to do it.

00:43:28.490 --> 00:43:32.150
This API does not allow you
to grab the frame buffer.

00:43:32.150 --> 00:43:36.380
But it's something that I can
take back to the team.

00:43:36.380 --> 00:43:41.015
Just out of interest, Lindon,
if you're still on, what are

00:43:41.015 --> 00:43:41.810
your use cases?

00:43:41.810 --> 00:43:43.530
It'll just help us explain
it better to

00:43:43.530 --> 00:43:44.780
the engineering team.

00:43:47.970 --> 00:43:49.370
I think Lindon's a
bit shy today.

00:43:49.370 --> 00:43:51.840
He's got his--

00:43:51.840 --> 00:43:56.860
"Sharing an image." So it's an
image that you're actually

00:43:56.860 --> 00:43:58.960
taking off your app,
like a screenshot?

00:44:04.420 --> 00:44:04.810
"Close

00:44:04.810 --> 00:44:06.640
to it." OK.

00:44:06.640 --> 00:44:08.090
Look, it's not there
right now.

00:44:08.090 --> 00:44:10.320
Let me talk it over
with the team.

00:44:10.320 --> 00:44:13.070
There may be reason that
we didn't do that.

00:44:13.070 --> 00:44:16.340
And we'll get back to you.

00:44:16.340 --> 00:44:19.460
PAUL SAXMAN: One potential
alternative, if you just want

00:44:19.460 --> 00:44:26.540
a snapshot of the map, is
there is the Google Maps

00:44:26.540 --> 00:44:27.860
static image API.

00:44:32.470 --> 00:44:35.300
[INAUDIBLE] also
doesn't do it.

00:44:35.300 --> 00:44:41.010
So yeah, you should essentially
get the exact same

00:44:41.010 --> 00:44:43.900
information back if you specify
the bounding box for

00:44:43.900 --> 00:44:47.360
what you want to get from
the static images API.

00:44:47.360 --> 00:44:49.230
So yeah, static maps is--

00:44:49.230 --> 00:44:50.180
ANKUR KOTWAL: [INAUDIBLE]

00:44:50.180 --> 00:44:50.410
work on.

00:44:50.410 --> 00:44:51.130
Yeah.

00:44:51.130 --> 00:44:52.610
So for now you'll
have to do that.

00:44:52.610 --> 00:44:54.520
But obviously that wouldn't
cater for us if you've got

00:44:54.520 --> 00:44:56.670
custom markers--

00:44:56.670 --> 00:44:57.280
PAUL SAXMAN: Exactly, yeah.

00:44:57.280 --> 00:44:57.860
ANKUR KOTWAL: --and
things like that.

00:44:57.860 --> 00:45:00.930
So if you're doing very
Android-centric things--

00:45:00.930 --> 00:45:01.400
PAUL SAXMAN: Yeah.

00:45:01.400 --> 00:45:07.570
And generally direct tile access
is what we call it or

00:45:07.570 --> 00:45:11.390
actually extracting the map
information out, we

00:45:11.390 --> 00:45:12.560
generally shun that.

00:45:12.560 --> 00:45:15.650
It actually violates their
terms, which is why we have

00:45:15.650 --> 00:45:18.970
things like the static
map API.

00:45:18.970 --> 00:45:21.650
But yeah, I think it's
definitely worth talking with

00:45:21.650 --> 00:45:24.930
the engineering team to see what
kind of use cases we can

00:45:24.930 --> 00:45:25.940
support around this.

00:45:25.940 --> 00:45:32.350
Because definitely it is nice
to share your RAMs.

00:45:32.350 --> 00:45:33.940
ANKUR KOTWAL: Yeah.

00:45:33.940 --> 00:45:34.810
OK.

00:45:34.810 --> 00:45:36.956
Next question.

00:45:36.956 --> 00:45:39.060
Tony, you want to just
read them out for us?

00:45:39.060 --> 00:45:39.900
TONY CHAN: Yeah, sure.

00:45:39.900 --> 00:45:43.400
The next question, "Is it
possible to overlay another

00:45:43.400 --> 00:45:46.860
OpenGL view that has transparent
background on top

00:45:46.860 --> 00:45:49.382
of Google Maps?

00:45:49.382 --> 00:45:52.746
Is that what Ingress
is doing?"

00:45:52.746 --> 00:45:54.610
ANKUR KOTWAL: No, I
think Ingress is

00:45:54.610 --> 00:45:55.860
doing something special.

00:45:57.975 --> 00:46:00.060
Yeah, so we can't talk about
what Ingress is doing.

00:46:00.060 --> 00:46:02.170
But I think Ingress is doing
something special.

00:46:02.170 --> 00:46:06.180
As to whether you can do that
with this library, my gut

00:46:06.180 --> 00:46:08.920
feeling is no, because I believe
we render directly to

00:46:08.920 --> 00:46:11.440
the surface.

00:46:11.440 --> 00:46:13.420
And there will be some
complications around that.

00:46:13.420 --> 00:46:18.160
So I'm pretty sure the
answer is no, Lindon.

00:46:18.160 --> 00:46:19.410
TONY CHAN: Lindon said
we were enlightened.

00:46:22.500 --> 00:46:23.340
ANKUR KOTWAL: Actually,
I'm not.

00:46:23.340 --> 00:46:24.590
I'm on the resistance side.

00:46:28.750 --> 00:46:30.780
OK.

00:46:30.780 --> 00:46:32.675
Were there any other questions
from Lindon?

00:46:36.420 --> 00:46:42.790
In the meanwhile, whilst he asks
those questions I'll just

00:46:42.790 --> 00:46:47.360
bring up some questions that
Andrew asked before he left.

00:46:47.360 --> 00:46:49.750
This is on the Moderator page.

00:46:49.750 --> 00:46:53.375
"I haven't had a chance to look
at the new v2 maps, and

00:46:53.375 --> 00:46:57.230
I've been meaning to." Just
waiting for a refresh.

00:46:57.230 --> 00:46:59.640
That was a bad time
to hit Refresh.

00:46:59.640 --> 00:47:02.500
PAUL SAXMAN: There we go.

00:47:02.500 --> 00:47:04.520
ANKUR KOTWAL: "Does this mean I
don't have to use the Users

00:47:04.520 --> 00:47:09.340
Library tag anymore?

00:47:09.340 --> 00:47:12.740
Does this is also mean I don't
need to use the Google API's

00:47:12.740 --> 00:47:15.310
checkbox in the Eclipse plug-in
to support Google

00:47:15.310 --> 00:47:19.590
Maps?" So Users Library,
we no longer need that?

00:47:19.590 --> 00:47:20.380
PAUL SAXMAN: Yeah.

00:47:20.380 --> 00:47:22.390
So the process now is
that you use the

00:47:22.390 --> 00:47:25.865
library project in Android.

00:47:25.865 --> 00:47:29.780
And that's the Google Play
Services library project.

00:47:29.780 --> 00:47:32.480
ANKUR KOTWAL: Yep.

00:47:32.480 --> 00:47:34.890
For the checkbox, however,
for the Google APIs--

00:47:34.890 --> 00:47:36.750
So when he says Eclipse plug-in,
I think what he's

00:47:36.750 --> 00:47:39.990
talking about is the AVD
manager, the Android Virtual

00:47:39.990 --> 00:47:41.640
Device manager.

00:47:41.640 --> 00:47:48.200
You definitely do need to use
the Google API's image,

00:47:48.200 --> 00:47:49.780
because this is part
of Google.

00:47:49.780 --> 00:47:53.100
Well, the Maps API is part of
Google Play services, which

00:47:53.100 --> 00:47:55.580
does rely on the Google
API access.

00:47:55.580 --> 00:47:58.220
So that hasn't changed.

00:48:02.530 --> 00:48:04.650
OK.

00:48:04.650 --> 00:48:07.400
That's all the questions
on Moderator.

00:48:07.400 --> 00:48:09.760
If anyone has any more
questions, now's

00:48:09.760 --> 00:48:11.010
the time to ask them.

00:48:13.490 --> 00:48:16.210
Whilst we wait for that to
happen, as I said, we'll be

00:48:16.210 --> 00:48:19.710
taking a couple of weeks
off for ADL+.

00:48:19.710 --> 00:48:26.630
But our first episode back will
be focusing around some

00:48:26.630 --> 00:48:29.910
more of the capabilities
of this API.

00:48:29.910 --> 00:48:32.760
And then in a future episode
we'll be talking about some

00:48:32.760 --> 00:48:36.490
really cool recipes that you
could do with the API.

00:48:36.490 --> 00:48:41.140
And we've got some sample
apps to show off.

00:48:41.140 --> 00:48:41.560
Yes.

00:48:41.560 --> 00:48:43.790
Coming soon.

00:48:43.790 --> 00:48:45.660
Well, I don't think there's
anything more.

00:48:45.660 --> 00:48:47.930
So thank you very much
for joining us.

00:48:47.930 --> 00:48:48.530
PAUL SAXMAN: My pleasure.

00:48:48.530 --> 00:48:49.590
Thanks for having me.

00:48:49.590 --> 00:48:50.560
I love to talk about
this stuff.

00:48:50.560 --> 00:48:50.920
ANKUR KOTWAL: Yeah.

00:48:50.920 --> 00:48:53.460
We'll definitely try to have
you on more often.

00:48:53.460 --> 00:48:54.260
PAUL SAXMAN: Awesome.

00:48:54.260 --> 00:48:55.180
My pleasure.

00:48:55.180 --> 00:48:58.240
ANKUR KOTWAL: Thanks, Tony, for
joining as well and Lindon

00:48:58.240 --> 00:49:01.210
as well and Andrew for
your question.

00:49:01.210 --> 00:49:04.205
And we will catch you next
time or next year.

00:49:04.205 --> 00:49:07.430
Hope you all have a great
and safe holiday

00:49:07.430 --> 00:49:08.800
and a happy New Year.

00:49:08.800 --> 00:49:10.050
TONY CHAN: Happy holidays.

