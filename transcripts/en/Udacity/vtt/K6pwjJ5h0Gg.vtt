WEBVTT
Kind: captions
Language: en

00:00:00.280 --> 00:00:03.130
In our example,
we have a Client and a Server.

00:00:03.130 --> 00:00:06.560
The Client wants to access some
protected data on our Server, but

00:00:06.560 --> 00:00:09.230
the Server knows Clients
cannot be trusted.

00:00:10.270 --> 00:00:14.080
The Server only wants to give
the data to a trustworthy Client.

00:00:14.080 --> 00:00:17.550
So our Client sends a request to our
Server along with data to verify

00:00:17.550 --> 00:00:18.100
who it is.

00:00:19.160 --> 00:00:23.290
In our example, this user data was
accepted as valid by the Server.

00:00:23.290 --> 00:00:27.770
Now instead of saving this user data,
the Server instead creates a token.

00:00:27.770 --> 00:00:31.520
This token is returned to the Client and
it's up to the Client to store this data

00:00:31.520 --> 00:00:34.810
and send it along as required for
any requests to the Server.

00:00:34.810 --> 00:00:39.020
The next time our Client makes a request
along a secure route, it does just that.

00:00:39.020 --> 00:00:40.990
It sends along the job token.

00:00:40.990 --> 00:00:43.040
But our Server knows
not to trust the Client

00:00:44.150 --> 00:00:47.210
because Clients cannot be trusted.

00:00:47.210 --> 00:00:50.720
So our Server verifies this token
is who it says it's from and

00:00:50.720 --> 00:00:51.970
that it hasn't been tampered with.

00:00:53.580 --> 00:00:57.490
If everything checks out like it does
in our example, the Server sends back

00:00:57.490 --> 00:01:02.210
a response with the requested data and
everybody lives happily ever after.

00:01:02.210 --> 00:01:04.810
And that's a brief overview
of how JSON Web Token work.

