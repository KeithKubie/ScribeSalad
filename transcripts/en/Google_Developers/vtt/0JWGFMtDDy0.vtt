WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.248
[MUSIC PLAYING]

00:00:06.140 --> 00:00:07.680
SAM BEDER: Hi, everyone.

00:00:07.680 --> 00:00:10.460
My name is Sam Beder,
and I'm a product manager

00:00:10.460 --> 00:00:11.897
on Android Things.

00:00:11.897 --> 00:00:13.730
Today, I'm going to
talk to you about Google

00:00:13.730 --> 00:00:16.400
services on Android
Things, and how

00:00:16.400 --> 00:00:18.770
adding these services
to your device

00:00:18.770 --> 00:00:21.800
can unlock your
device's potential.

00:00:21.800 --> 00:00:24.140
What I really want to
convince you of today

00:00:24.140 --> 00:00:27.320
is not only is integrating
Google services on Android

00:00:27.320 --> 00:00:31.190
Things really, really easy
and really, really seamless,

00:00:31.190 --> 00:00:34.250
but it can make a huge
difference in the use cases

00:00:34.250 --> 00:00:38.970
that you can put on your device
as well as for your end users.

00:00:38.970 --> 00:00:42.350
And I know this year, we have
many sessions on Android Things

00:00:42.350 --> 00:00:44.680
as well as demos in
the sandbox area,

00:00:44.680 --> 00:00:47.150
and code labs to learn
more about what's

00:00:47.150 --> 00:00:49.520
possible on Android Things.

00:00:49.520 --> 00:00:52.400
I also know that many of you
are coming to this session

00:00:52.400 --> 00:00:55.040
already with ideas
of devices that you

00:00:55.040 --> 00:00:59.720
want to make on Android Things
or for IoT devices in general.

00:00:59.720 --> 00:01:02.847
And I want to show you today
all the compelling use cases

00:01:02.847 --> 00:01:05.180
that you can get when you
integrate some of these Google

00:01:05.180 --> 00:01:07.080
services.

00:01:07.080 --> 00:01:09.410
So I'm going to go through
a number of services today.

00:01:09.410 --> 00:01:12.890
First, I'm going to talk about
Google Play services, which

00:01:12.890 --> 00:01:16.820
includes a whole suite of
tools such as the mobile Vision

00:01:16.820 --> 00:01:22.250
APIs, location services,
as well as Firebase.

00:01:22.250 --> 00:01:24.740
After that, I'm going to dive
into Firebase in a little bit

00:01:24.740 --> 00:01:27.530
more detail to show
you how the real time

00:01:27.530 --> 00:01:30.350
database that
Firebase provides can

00:01:30.350 --> 00:01:33.100
allow you to publish
and persist data

00:01:33.100 --> 00:01:36.380
and events in interesting ways.

00:01:36.380 --> 00:01:38.510
After that, I'm going
go into TensorFlow,

00:01:38.510 --> 00:01:40.010
and how TensorFlow--

00:01:40.010 --> 00:01:42.380
we think-- is the
perfect application

00:01:42.380 --> 00:01:44.930
of the powerful
on-device processing

00:01:44.930 --> 00:01:47.900
of your Android Things device
to really add intelligence

00:01:47.900 --> 00:01:50.390
to that device.

00:01:50.390 --> 00:01:52.880
Next, I'm going to talk
about Google Cloud platform

00:01:52.880 --> 00:01:54.950
and how using Google
Cloud platform,

00:01:54.950 --> 00:01:58.310
you can train, visualize,
and take action

00:01:58.310 --> 00:01:59.600
on your devices in the field.

00:02:01.140 --> 00:02:03.990
Finally, I'm going to touch on
the Google Assistant and all

00:02:03.990 --> 00:02:05.510
the amazing use
cases that you can

00:02:05.510 --> 00:02:08.270
get when you integrate the
Google Assistant on Android

00:02:08.270 --> 00:02:10.340
Things.

00:02:10.340 --> 00:02:12.260
Before I dive into
these services,

00:02:12.260 --> 00:02:16.040
I want to quickly go
over Android Things.

00:02:16.040 --> 00:02:20.250
So, Android Things is based
on a system on module design.

00:02:20.250 --> 00:02:24.080
This means that we work really
closely with our silicon

00:02:24.080 --> 00:02:28.220
partners to bring you modules
which you can place directly

00:02:28.220 --> 00:02:30.560
into your IoT devices.

00:02:30.560 --> 00:02:33.170
Now, these modules
are such that it's

00:02:33.170 --> 00:02:35.900
economical to put them
in devices when you're

00:02:35.900 --> 00:02:40.460
making millions of devices or
if you have a very small run,

00:02:40.460 --> 00:02:42.959
or if you're just
prototyping a device.

00:02:42.959 --> 00:02:44.750
So earlier today, we
actually had a session

00:02:44.750 --> 00:02:47.930
specifically on going from
prototype to production

00:02:47.930 --> 00:02:51.230
on Android Things, which can
give you more detail about how

00:02:51.230 --> 00:02:54.650
it's feasible to do all this,
all the hardware design,

00:02:54.650 --> 00:02:59.330
and bring your device to
production on Android Things.

00:02:59.330 --> 00:03:01.640
The Android Things
operating system

00:03:01.640 --> 00:03:05.070
is then placed on
top of these modules.

00:03:05.070 --> 00:03:07.790
So Android Things
is a new vertical

00:03:07.790 --> 00:03:12.050
of Android built
for IoT devices.

00:03:12.050 --> 00:03:15.200
Since we work so closely
with our silicon partners,

00:03:15.200 --> 00:03:18.830
we're able to maintain
these modules in new ways.

00:03:18.830 --> 00:03:24.200
It allows these devices to be
more secure and updateable.

00:03:24.200 --> 00:03:26.780
Also, since it's an
Android vertical,

00:03:26.780 --> 00:03:28.790
you get all the
Android APIs they're

00:03:28.790 --> 00:03:33.590
used to for Android development
as well as the developer tools

00:03:33.590 --> 00:03:36.620
and the Android ecosystem.

00:03:36.620 --> 00:03:38.900
In addition, on
Android Things we've

00:03:38.900 --> 00:03:43.700
added some new APIs such
as peripheral iO and user

00:03:43.700 --> 00:03:46.610
drivers that allow you
to control the hardware

00:03:46.610 --> 00:03:50.600
on your device in new ways.

00:03:50.600 --> 00:03:53.090
We've also added support
for a zero display

00:03:53.090 --> 00:03:57.630
build for IoT devices
without a screen.

00:03:57.630 --> 00:04:01.160
But really the key piece of
Android Things, I believe,

00:04:01.160 --> 00:04:03.560
is the services on top.

00:04:03.560 --> 00:04:07.730
Because of the API surface
that Android Things provides,

00:04:07.730 --> 00:04:09.770
it makes it much
easier for Google

00:04:09.770 --> 00:04:14.030
to put our services on
top of Android Things.

00:04:14.030 --> 00:04:17.990
I say endless possibilities here
because not only does Google

00:04:17.990 --> 00:04:19.820
already support all
the services I'm

00:04:19.820 --> 00:04:22.790
going to walk you through
today, but any services

00:04:22.790 --> 00:04:26.630
that Google makes in the future
will be much more portable

00:04:26.630 --> 00:04:31.180
on Android Things because
of this API surface.

00:04:31.180 --> 00:04:33.560
So now, let's start diving
into some of these services.

00:04:33.560 --> 00:04:35.910
Let's talk about Google
Play services and all

00:04:35.910 --> 00:04:39.290
the useful tools
that it provides.

00:04:39.290 --> 00:04:40.940
Google Play services
gives you access

00:04:40.940 --> 00:04:44.460
to a suite of tools, some
of which you see here.

00:04:44.460 --> 00:04:46.800
So you get things like
the mobile vision APIs,

00:04:46.800 --> 00:04:50.870
which allow you to leverage the
intelligence in your Android

00:04:50.870 --> 00:04:54.620
camera to identify
people in an image

00:04:54.620 --> 00:04:58.970
as well as faces and
their expressions.

00:04:58.970 --> 00:05:02.720
You also get the nearby
APIs, which lets you--

00:05:02.720 --> 00:05:05.450
when you have two
devices near each other--

00:05:05.450 --> 00:05:07.650
allows those devices to
interact with each other

00:05:07.650 --> 00:05:10.110
in interesting ways.

00:05:10.110 --> 00:05:12.840
You get all the Cast
APIs, which lets you

00:05:12.840 --> 00:05:16.920
from your Android device
cast to a cast enabled device

00:05:16.920 --> 00:05:19.800
somewhere else.

00:05:19.800 --> 00:05:22.440
Next, you get all the
location services,

00:05:22.440 --> 00:05:24.750
which lets you
query things like,

00:05:24.750 --> 00:05:30.500
what are the cafes near me
and what are their hours.

00:05:30.500 --> 00:05:32.780
You also get the
Google Fit APIs,

00:05:32.780 --> 00:05:36.140
which allow you to attach
sensors and accelerometers

00:05:36.140 --> 00:05:39.080
to your device
and then visualize

00:05:39.080 --> 00:05:44.877
this data as steps or other
activities in interesting ways.

00:05:44.877 --> 00:05:46.460
Finally, you get
Firebase, which we'll

00:05:46.460 --> 00:05:49.720
talk about more in a minute.

00:05:49.720 --> 00:05:53.380
Some of you might know
about CTF certification

00:05:53.380 --> 00:05:57.730
and how CTF certification
is a necessary step in order

00:05:57.730 --> 00:06:00.760
to get these Google
Play services.

00:06:00.760 --> 00:06:03.500
With Android Things, because
of our hardware model

00:06:03.500 --> 00:06:05.860
that I just talked
about, these modules

00:06:05.860 --> 00:06:08.470
actually come pre-certified.

00:06:08.470 --> 00:06:10.830
So they're all
pre-CTF certified,

00:06:10.830 --> 00:06:15.180
meaning Google Play Services
will work right out of the box.

00:06:15.180 --> 00:06:17.320
You have to do
absolutely no work

00:06:17.320 --> 00:06:20.001
to get these Google Play
services on your Android Things

00:06:20.001 --> 00:06:20.500
device.

00:06:23.120 --> 00:06:24.760
We also have, for
Android Things,

00:06:24.760 --> 00:06:29.050
a custom IoT variant of
Google Play services.

00:06:29.050 --> 00:06:31.030
Now I actually think this
is a pretty big deal.

00:06:31.030 --> 00:06:34.960
This allows us to make Google
Play services more lightweight

00:06:34.960 --> 00:06:38.620
by taking out things like
phone specific UI elements

00:06:38.620 --> 00:06:40.720
and game libraries
that we don't think

00:06:40.720 --> 00:06:43.240
are relevant for IoT devices.

00:06:43.240 --> 00:06:45.730
We also give you a
signed out experience

00:06:45.730 --> 00:06:47.210
of Google Play services.

00:06:47.210 --> 00:06:50.890
So, no unauthenticated APIs
because these just aren't

00:06:50.890 --> 00:06:54.280
relevant for many IoT devices.

00:06:54.280 --> 00:06:57.340
So now, let's dive into Firebase
in a little bit more detail.

00:06:57.340 --> 00:07:00.170
I'm going to walk you through
one of our code samples.

00:07:00.170 --> 00:07:04.240
So this is the code sample for
a smart doorbell using Firebase.

00:07:04.240 --> 00:07:07.160
It involves one of
our supported boards,

00:07:07.160 --> 00:07:09.944
as well as a button
and a camera.

00:07:09.944 --> 00:07:11.860
So I'm going to walk you
through this diagram.

00:07:11.860 --> 00:07:15.280
On the left, you see
a user interacting

00:07:15.280 --> 00:07:16.951
with the smart doorbell.

00:07:16.951 --> 00:07:19.450
What happens is, they press the
button on the smart doorbell

00:07:19.450 --> 00:07:21.670
and the camera takes
a picture of them.

00:07:21.670 --> 00:07:23.980
On the right,
there's another user

00:07:23.980 --> 00:07:27.100
who, in their
Android phone, they

00:07:27.100 --> 00:07:30.070
can use an app to connect
to a Firebase database that

00:07:30.070 --> 00:07:33.920
can retrieve that
image in real time.

00:07:33.920 --> 00:07:35.290
So how does this work?

00:07:35.290 --> 00:07:39.220
When you press the button
on the smart camera,

00:07:39.220 --> 00:07:41.140
the camera takes
a picture of you.

00:07:41.140 --> 00:07:44.240
Then, using the
Android Firebase SDK,

00:07:44.240 --> 00:07:46.270
which uses the Google
Play services APIs

00:07:46.270 --> 00:07:49.210
all on the device,
it sends this image

00:07:49.210 --> 00:07:52.450
to the Firebase
database in the cloud.

00:07:52.450 --> 00:07:54.850
The user on the
other end can then

00:07:54.850 --> 00:07:57.910
use the exact same Google Play
services and Android Firebase

00:07:57.910 --> 00:08:01.960
SDK on their phone to connect
to this Firebase database

00:08:01.960 --> 00:08:04.160
and retrieve that image.

00:08:04.160 --> 00:08:07.060
In our code sample, we
also send this image

00:08:07.060 --> 00:08:11.170
to the Cloud Vision APIs to
get additional annotations

00:08:11.170 --> 00:08:13.160
about what's in the image.

00:08:13.160 --> 00:08:16.650
So these annotations could be
something like, in this image

00:08:16.650 --> 00:08:19.400
there is a person
holding a package.

00:08:19.400 --> 00:08:23.242
So that can give you additional
context about what's going on.

00:08:23.242 --> 00:08:23.950
It's pretty cool.

00:08:23.950 --> 00:08:27.400
If you actually go and build
this demo, you can see.

00:08:27.400 --> 00:08:30.760
When you press the button and it
takes a picture, in less than a

00:08:30.760 --> 00:08:32.809
second the picture will appear.

00:08:32.809 --> 00:08:34.820
And then a few seconds
later, after the image

00:08:34.820 --> 00:08:37.720
is propagated through
the Cloud Vision APIs,

00:08:37.720 --> 00:08:40.700
the annotations
will appear as well.

00:08:40.700 --> 00:08:42.280
So to really show
you how this works,

00:08:42.280 --> 00:08:44.238
I'm going to walk through
some of the code that

00:08:44.238 --> 00:08:45.670
pushes this data to Firebase.

00:08:49.260 --> 00:08:51.600
So the first line
you see here is just

00:08:51.600 --> 00:08:54.870
creating a new
door ring instance

00:08:54.870 --> 00:08:58.890
that we're going to use
in our Firebase database.

00:08:58.890 --> 00:09:01.530
Then, all we need to do
to make this data appear

00:09:01.530 --> 00:09:05.850
in our Firebase database is
set the appropriate fields

00:09:05.850 --> 00:09:08.050
of our door ring instance.

00:09:08.050 --> 00:09:10.740
So here you can see in
the highlighted portion,

00:09:10.740 --> 00:09:15.000
we're setting the time stamp
and the image fields so that--

00:09:15.000 --> 00:09:18.270
with the server time
stamp and the image URL--

00:09:18.270 --> 00:09:21.090
and then this image as
well as the timestamp

00:09:21.090 --> 00:09:23.010
will appear in our
Firebase database

00:09:23.010 --> 00:09:26.820
to be retrieved by the
user on the other side.

00:09:26.820 --> 00:09:28.740
As I mentioned in
our code sample,

00:09:28.740 --> 00:09:31.830
we also send our images
to the Cloud Vision APIs

00:09:31.830 --> 00:09:33.990
to get those annotations.

00:09:33.990 --> 00:09:36.540
So, we do that by calling
the Cloud Vision APIs

00:09:36.540 --> 00:09:39.240
and then simply setting
the appropriate field

00:09:39.240 --> 00:09:43.320
for those annotations so
that that additional context

00:09:43.320 --> 00:09:49.100
will appear as well for
the user on the other end.

00:09:49.100 --> 00:09:51.550
So, Firebase is one of the
many Google Play services

00:09:51.550 --> 00:09:53.752
that you get with
Android Things.

00:09:53.752 --> 00:09:55.710
But in the interest of
time, I can't talk about

00:09:55.710 --> 00:09:57.420
all the Google Play services.

00:09:57.420 --> 00:09:59.355
So instead, I want to
move on to TensorFlow.

00:10:02.330 --> 00:10:06.140
We really think that TensorFlow
is the perfect application

00:10:06.140 --> 00:10:10.757
for the on device processing
of your Android Things device.

00:10:10.757 --> 00:10:13.340
So, as you've heard from some
of the previous talks on Android

00:10:13.340 --> 00:10:16.190
Things, Android
Things is not really

00:10:16.190 --> 00:10:19.580
well suited if you're just
making a simple sensor.

00:10:19.580 --> 00:10:22.640
To fully utilize the
Android Things platform,

00:10:22.640 --> 00:10:24.150
it should be doing more.

00:10:24.150 --> 00:10:28.160
There should be some
intelligence on this device.

00:10:28.160 --> 00:10:30.680
You might wonder, though,
if you're making an internet

00:10:30.680 --> 00:10:33.200
connected device--
an IoT device--

00:10:33.200 --> 00:10:36.870
why do you actually need
this on device processing?

00:10:36.870 --> 00:10:38.630
There's actually
several reasons why

00:10:38.630 --> 00:10:41.060
this could be really important.

00:10:41.060 --> 00:10:43.280
One reason has to
do with bandwidth.

00:10:43.280 --> 00:10:46.640
If, for example, you're
making a camera that's

00:10:46.640 --> 00:10:49.480
counting the number
of people in a line

00:10:49.480 --> 00:10:51.600
and you just care
about that number,

00:10:51.600 --> 00:10:53.390
by only propagating
out that number

00:10:53.390 --> 00:10:55.220
you save huge
amounts on bandwidth

00:10:55.220 --> 00:10:58.760
by not needing to send
the image anywhere.

00:10:58.760 --> 00:11:01.850
The second reason for
on device processing

00:11:01.850 --> 00:11:05.760
has to do with when you have
intermittent connectivity.

00:11:05.760 --> 00:11:08.540
So if your device is
only sometimes connected

00:11:08.540 --> 00:11:11.860
to the internet, for it
to be really functional

00:11:11.860 --> 00:11:14.270
it needs to have on
device processing for when

00:11:14.270 --> 00:11:16.610
it's offline.

00:11:16.610 --> 00:11:18.890
The next reason for
on device processing

00:11:18.890 --> 00:11:22.860
has to do with the principle
of least privilege.

00:11:22.860 --> 00:11:27.230
So if you, again, had that
camera where all you care about

00:11:27.230 --> 00:11:30.830
is the number of people
standing in a line,

00:11:30.830 --> 00:11:32.450
by the principle
of least privilege

00:11:32.450 --> 00:11:34.760
you should only be
propagating that number

00:11:34.760 --> 00:11:38.240
even if you trust the other
and where you're sending it.

00:11:38.240 --> 00:11:40.490
There's also some
regulatory reasons

00:11:40.490 --> 00:11:44.390
where this could be
important for your use case.

00:11:44.390 --> 00:11:46.490
The final reason for
device processing

00:11:46.490 --> 00:11:49.290
has to do with real
time applications.

00:11:49.290 --> 00:11:51.110
So if you're, for
example, making

00:11:51.110 --> 00:11:55.190
a robot that has to navigate
through an environment,

00:11:55.190 --> 00:11:57.240
you want to have on
device processing

00:11:57.240 --> 00:11:59.210
so if something comes
in front of that robot,

00:11:59.210 --> 00:12:02.770
you'll be able to
react to the situation.

00:12:02.770 --> 00:12:06.040
Again, I want to mention that we
have a code lab for TensorFlow

00:12:06.040 --> 00:12:07.340
and Android Things.

00:12:07.340 --> 00:12:11.147
So you can try it out in the
code lab area or at home.

00:12:11.147 --> 00:12:12.980
But to really show you
TensorFlow in action,

00:12:12.980 --> 00:12:15.620
I actually want to do a
live demo so we can really

00:12:15.620 --> 00:12:18.640
see that it works.

00:12:18.640 --> 00:12:19.740
So what I have here--

00:12:19.740 --> 00:12:21.780
it's a pretty simple setup.

00:12:21.780 --> 00:12:23.820
We have one of our
supported boards, which

00:12:23.820 --> 00:12:28.110
is a Raspberry Pi in this case,
as well as a button, a camera,

00:12:28.110 --> 00:12:30.000
and a speaker.

00:12:30.000 --> 00:12:31.170
The button's here on top.

00:12:31.170 --> 00:12:34.890
The camera is actually located
in this little Android head's

00:12:34.890 --> 00:12:35.970
eye.

00:12:35.970 --> 00:12:37.560
So it's in its eye right there.

00:12:37.560 --> 00:12:39.720
And then the speaker's
in its mouth.

00:12:39.720 --> 00:12:43.320
So what's going to happen
is, when I press the button,

00:12:43.320 --> 00:12:45.360
the camera will take a picture.

00:12:45.360 --> 00:12:48.990
That image is then sent through
a TensorFlow model located

00:12:48.990 --> 00:12:50.980
locally on the device.

00:12:50.980 --> 00:12:53.670
And then the speaker will
then say what that TensorFlow

00:12:53.670 --> 00:12:56.170
model thinks it saw.

00:12:56.170 --> 00:12:58.920
So for you here today,
I have various dog

00:12:58.920 --> 00:13:03.750
breeds because locally on
this TensorFlow model, I have

00:13:03.750 --> 00:13:06.210
what's called the
Inception Model.

00:13:06.210 --> 00:13:10.800
Now the Inception Model is
a model provided by Google

00:13:10.800 --> 00:13:14.130
that's able to identify
thousands of objects, including

00:13:14.130 --> 00:13:15.300
dog breeds.

00:13:15.300 --> 00:13:18.060
So let's see if it can do it.

00:13:18.060 --> 00:13:23.130
I just need to line
up the image and--

00:13:23.130 --> 00:13:24.630
GOOGLE ASSISTANT:
I see a Dalmatian.

00:13:24.630 --> 00:13:25.710
SAM BEDER: All right.

00:13:25.710 --> 00:13:27.170
So for those of
you couldn't see--

00:13:27.170 --> 00:13:27.670
Yeah.

00:13:27.670 --> 00:13:28.330
[APPLAUSE]

00:13:28.330 --> 00:13:29.205
Deserves an applause.

00:13:31.200 --> 00:13:32.880
It is, in fact, a dalmatian.

00:13:32.880 --> 00:13:37.080
But let's do it one more time
to show you that it, you know,

00:13:37.080 --> 00:13:38.910
can do more than
just one dog breed.

00:13:38.910 --> 00:13:41.175
So this time I have
a French bulldog.

00:13:44.410 --> 00:13:45.490
All right.

00:13:45.490 --> 00:13:46.900
Line it up again.

00:13:46.900 --> 00:13:47.690
Hope for the best.

00:13:49.841 --> 00:13:51.590
GOOGLE ASSISTANT: Hey,
that looks like me.

00:13:51.590 --> 00:13:52.400
Just kidding.

00:13:52.400 --> 00:13:53.431
I see a French bulldog.

00:13:53.431 --> 00:13:53.930
[APPLAUSE]

00:13:53.930 --> 00:13:55.040
SAM BEDER: All right.

00:13:55.040 --> 00:13:57.290
Yeah.

00:13:57.290 --> 00:13:59.180
Good job, little guy.

00:13:59.180 --> 00:14:02.660
So as I mentioned, this is
all running totally locally.

00:14:02.660 --> 00:14:04.670
So this is not connected
to the internet at all,

00:14:04.670 --> 00:14:09.340
and since this is battery
powered, it's totally portable.

00:14:09.340 --> 00:14:12.910
So I think that
this example really

00:14:12.910 --> 00:14:15.340
shows you some of the power
you can get with TensorFlow.

00:14:15.340 --> 00:14:17.050
So now, let's actually
walk through some

00:14:17.050 --> 00:14:19.091
of the code that makes
this integration possible.

00:14:21.540 --> 00:14:24.510
This first page, as you
can see, is pretty simple.

00:14:24.510 --> 00:14:28.410
And this just shows us loading
up the appropriate TensorFlow

00:14:28.410 --> 00:14:31.890
library to be used
by our device.

00:14:31.890 --> 00:14:34.200
The first thing I
want you to note here

00:14:34.200 --> 00:14:38.400
is that we're actually only
loading the same libraries

00:14:38.400 --> 00:14:40.620
as is used by Android.

00:14:40.620 --> 00:14:44.250
So, all the TensorFlow
code that works on Android

00:14:44.250 --> 00:14:46.740
will also work on
Android Things.

00:14:46.740 --> 00:14:48.210
All of the samples
that you already

00:14:48.210 --> 00:14:51.360
have on Android for TensorFlow
you can import immediately

00:14:51.360 --> 00:14:53.760
to Android Things.

00:14:53.760 --> 00:14:55.890
The second thing
I want you to note

00:14:55.890 --> 00:14:57.680
is that here we're
actually only loading

00:14:57.680 --> 00:15:01.890
in the inference
libraries of TensorFlow.

00:15:01.890 --> 00:15:06.000
TensorFlow is basically composed
of two sets of libraries.

00:15:06.000 --> 00:15:09.690
There's training, which is
where you give it thousands

00:15:09.690 --> 00:15:11.790
of images along with labels--

00:15:11.790 --> 00:15:15.450
so you can make that model that
can make those predictions.

00:15:15.450 --> 00:15:17.520
And then there's the
inference libraries,

00:15:17.520 --> 00:15:19.950
where you're using that model
that you trained to actually

00:15:19.950 --> 00:15:22.524
make those predictions.

00:15:22.524 --> 00:15:24.815
So now, let's go through some
of the core functionality

00:15:24.815 --> 00:15:28.510
to actually do
those predictions.

00:15:28.510 --> 00:15:31.180
So these are the steps to
actually run input data

00:15:31.180 --> 00:15:33.280
through a TensorFlow model.

00:15:33.280 --> 00:15:36.400
The first method you see
there, the feed method,

00:15:36.400 --> 00:15:39.290
is where you're actually
loading in your input data.

00:15:39.290 --> 00:15:40.840
So we have three arguments.

00:15:40.840 --> 00:15:42.610
There's the input
layer name, which

00:15:42.610 --> 00:15:46.030
is simply that first layer
of your TensorFlow model

00:15:46.030 --> 00:15:49.210
where you're going to
put your input data.

00:15:49.210 --> 00:15:52.540
Next, there's tensor dimensions
which simply describes

00:15:52.540 --> 00:15:55.000
the structure of
your input layer

00:15:55.000 --> 00:15:58.330
so you can understand what's
going into your model.

00:15:58.330 --> 00:15:59.837
Then you have
image pixels, which

00:15:59.837 --> 00:16:01.420
is the actual input
data which you are

00:16:01.420 --> 00:16:03.280
going to make predictions on.

00:16:03.280 --> 00:16:07.900
So here in our case, since we're
taking a picture, of course

00:16:07.900 --> 00:16:10.690
the input data is pixels.

00:16:10.690 --> 00:16:13.630
But this same type
of TensorFlow model

00:16:13.630 --> 00:16:16.790
will work across many use cases.

00:16:16.790 --> 00:16:20.830
So if instead you had just
sensor data or a combination

00:16:20.830 --> 00:16:23.170
of sensor data and
camera data, you

00:16:23.170 --> 00:16:25.690
could use the same type
of TensorFlow model

00:16:25.690 --> 00:16:28.430
and it would still work.

00:16:28.430 --> 00:16:31.280
So the next slide, the
actual highlighted portion,

00:16:31.280 --> 00:16:33.420
is where the actual
work gets done.

00:16:33.420 --> 00:16:34.700
So we call it the run method--

00:16:34.700 --> 00:16:37.880
to actually run this input data
through our TensorFlow model

00:16:37.880 --> 00:16:40.080
to get that prediction
on the other side.

00:16:40.080 --> 00:16:42.530
So here, we just need to
provide the output layer

00:16:42.530 --> 00:16:45.270
where we want the data to go.

00:16:45.270 --> 00:16:47.510
Finally, we need to fetch
our data so we can use it.

00:16:47.510 --> 00:16:50.090
So we call it Fetch along
with an output array

00:16:50.090 --> 00:16:52.080
to store our data.

00:16:52.080 --> 00:16:55.160
Now, this output
array is composed

00:16:55.160 --> 00:16:59.240
of elements that correspond
to the confidence

00:16:59.240 --> 00:17:03.420
that an object is what
we saw in the image.

00:17:03.420 --> 00:17:06.500
So in our first example,
we predicted dalmatian.

00:17:06.500 --> 00:17:09.980
That means that the element
with highest confidence

00:17:09.980 --> 00:17:13.760
was that that
corresponded to dalmatian.

00:17:13.760 --> 00:17:16.490
You could actually do a
little bit more nuanced things

00:17:16.490 --> 00:17:18.270
with these results.

00:17:18.270 --> 00:17:22.609
So for example, if
there's two results that

00:17:22.609 --> 00:17:25.310
both were highly
confident, you could say,

00:17:25.310 --> 00:17:27.810
I think it's one of
these two things.

00:17:27.810 --> 00:17:32.270
And if there were no results
above a certain threshold

00:17:32.270 --> 00:17:34.400
of confidence, you
could say, I don't

00:17:34.400 --> 00:17:35.880
know what's in this image.

00:17:35.880 --> 00:17:38.780
So even once you have your
output of confidences,

00:17:38.780 --> 00:17:43.990
you can do a little bit extra
depending on your use case.

00:17:43.990 --> 00:17:47.196
So as I mentioned, this demo
is running completely locally.

00:17:47.196 --> 00:17:48.570
But I think that
there's actually

00:17:48.570 --> 00:17:52.350
more interesting things that
we can do once we also connect

00:17:52.350 --> 00:17:55.350
devices like this to the cloud.

00:17:55.350 --> 00:17:57.330
So next, I want to
talk about Google Cloud

00:17:57.330 --> 00:18:01.890
Platform and specifically
Cloud IoT Core.

00:18:01.890 --> 00:18:05.040
So Cloud IoT Core
is a new offering

00:18:05.040 --> 00:18:08.370
that we're announcing here
at iO that's specifically

00:18:08.370 --> 00:18:13.570
for connecting IoT devices
to the Google Cloud Platform.

00:18:13.570 --> 00:18:16.200
Now, the Google Cloud Platform
has a number of services.

00:18:16.200 --> 00:18:19.610
You can do things like
MQTT protocol support.

00:18:19.610 --> 00:18:22.800
MQTT is a lightweight
protocol that's

00:18:22.800 --> 00:18:28.970
used for communications as well
as many industrial purposes.

00:18:28.970 --> 00:18:32.220
Cloud IoT Core is also
a 100% managed service.

00:18:32.220 --> 00:18:34.790
This means you get things
like automatic load balancing

00:18:34.790 --> 00:18:37.420
and resource pre-provisioning.

00:18:37.420 --> 00:18:40.610
You can connect one device to
Cloud IoT Core or a million

00:18:40.610 --> 00:18:45.200
devices, and all these things
still work the same way.

00:18:45.200 --> 00:18:47.160
There's also a
global access point,

00:18:47.160 --> 00:18:50.420
which means that no matter
what region your device is in,

00:18:50.420 --> 00:18:52.040
it can use the
same configurations

00:18:52.040 --> 00:18:56.310
and connect to the
same Google Cloud.

00:18:56.310 --> 00:18:59.150
Cloud IoT Core also comes
with a Device Manager

00:18:59.150 --> 00:19:02.234
that can allow you to interact
with your devices in the field.

00:19:02.234 --> 00:19:03.650
So you get things
like the ability

00:19:03.650 --> 00:19:07.220
to configure individual devices
that you have in the field,

00:19:07.220 --> 00:19:08.900
as well as control
those devices,

00:19:08.900 --> 00:19:12.755
set up alerts, and set up
role level access controls.

00:19:12.755 --> 00:19:14.630
Role level access controls
could be something

00:19:14.630 --> 00:19:18.680
like allowing one user to be
able to have read and write

00:19:18.680 --> 00:19:22.490
access over a set of devices,
and then another user

00:19:22.490 --> 00:19:28.140
could only have read access
or a subset of those devices.

00:19:28.140 --> 00:19:29.870
So as I mentioned,
Cloud IoT Core

00:19:29.870 --> 00:19:32.270
also connects you
to all the benefits

00:19:32.270 --> 00:19:34.940
of Google Cloud Platform.

00:19:34.940 --> 00:19:37.160
This diagram shows you
a bunch of the benefits

00:19:37.160 --> 00:19:38.867
that Google Cloud
Platform provides.

00:19:38.867 --> 00:19:40.700
And I'm not going to
go through all of them,

00:19:40.700 --> 00:19:42.130
but just to point out a few.

00:19:42.130 --> 00:19:45.410
You get things like
BigQuery and BigData

00:19:45.410 --> 00:19:48.440
that allow you to input all
the data that you're gathering

00:19:48.440 --> 00:19:52.070
from your Android Things devices
and then visualize and query

00:19:52.070 --> 00:19:54.470
over that data.

00:19:54.470 --> 00:19:58.520
You also get CloudML, to make
even more complicated machine

00:19:58.520 --> 00:20:01.970
learning models based on all
the data you've collected

00:20:01.970 --> 00:20:05.390
using the power of the cloud.

00:20:05.390 --> 00:20:07.580
Finally, you get all
the analytics tools

00:20:07.580 --> 00:20:09.380
that Google Cloud
Platform provides,

00:20:09.380 --> 00:20:12.380
to visualize and set
up alerts on your data

00:20:12.380 --> 00:20:16.810
and take action on the
devices you have in the field.

00:20:16.810 --> 00:20:19.400
So to understand these
analytics a little bit better,

00:20:19.400 --> 00:20:23.130
I'm going to go
through one more demo.

00:20:23.130 --> 00:20:26.360
So this demo is actually running
live in our sandbox area.

00:20:26.360 --> 00:20:28.880
And this is just a
screenshot of it working.

00:20:28.880 --> 00:20:31.670
What we've done
here is we've set up

00:20:31.670 --> 00:20:34.310
a bunch of
environmental stations

00:20:34.310 --> 00:20:36.680
running on Android
Things and spread them

00:20:36.680 --> 00:20:39.170
around Mountain View campus.

00:20:39.170 --> 00:20:40.730
Now, these
environmental stations

00:20:40.730 --> 00:20:42.710
have a bunch of
sensors on them, things

00:20:42.710 --> 00:20:45.440
like humidity sensor,
temperature sensor, air

00:20:45.440 --> 00:20:50.570
pressure sensor, luminosity
sensor, and motion detection.

00:20:50.570 --> 00:20:54.200
And then we're able to aggregate
all this data in the cloud

00:20:54.200 --> 00:20:56.750
by connecting it through
a Cloud IoT Core.

00:20:56.750 --> 00:20:58.970
So on the left, you can
see some of the data

00:20:58.970 --> 00:21:02.120
from some of these devices
they were able to aggregate.

00:21:02.120 --> 00:21:04.820
We can also see
average temperatures

00:21:04.820 --> 00:21:07.560
and other analytics on our data.

00:21:07.560 --> 00:21:11.120
We can also dive into
one specific device

00:21:11.120 --> 00:21:13.250
to really see more
data on what's

00:21:13.250 --> 00:21:16.490
going on with that device
as well as more time series

00:21:16.490 --> 00:21:21.830
data on how that device
has performed over time.

00:21:21.830 --> 00:21:24.680
You might notice, though,
that this demo shows you

00:21:24.680 --> 00:21:28.610
really well that you can connect
these devices to Google Cloud.

00:21:28.610 --> 00:21:32.410
But it doesn't really utilize
the on device processing

00:21:32.410 --> 00:21:35.460
that I talked about
with my TensorFlow demo.

00:21:35.460 --> 00:21:38.630
So next, I want to go over
a few more examples that

00:21:38.630 --> 00:21:42.140
show you these two
services working together.

00:21:42.140 --> 00:21:44.730
Because when you combine
TensorFlow and Google Cloud

00:21:44.730 --> 00:21:47.900
Platform, I think you can
do some really amazingly

00:21:47.900 --> 00:21:51.110
powerful things.

00:21:51.110 --> 00:21:53.750
So my first example
kind of extends

00:21:53.750 --> 00:21:57.860
this environmental station demo
that I just walked you through.

00:21:57.860 --> 00:22:01.550
Imagine instead of just putting
these environmental stations

00:22:01.550 --> 00:22:04.340
around, we actually
connected them

00:22:04.340 --> 00:22:07.070
to a smart vending machine.

00:22:07.070 --> 00:22:09.320
We were then able
to use all the input

00:22:09.320 --> 00:22:11.990
data from our
environmental station

00:22:11.990 --> 00:22:15.830
to have a machine learning
model using TensorFlow running

00:22:15.830 --> 00:22:18.020
locally on this device.

00:22:18.020 --> 00:22:21.110
You could predict things
like supply and demand

00:22:21.110 --> 00:22:23.210
based on that vending
machine's environment,

00:22:23.210 --> 00:22:25.010
and then optimize
when this vending

00:22:25.010 --> 00:22:28.250
machine would be restocked.

00:22:28.250 --> 00:22:30.140
You could also connect
all of your vending

00:22:30.140 --> 00:22:34.070
machines to the cloud and do
even more complicated analysis

00:22:34.070 --> 00:22:35.720
on those vending machines.

00:22:35.720 --> 00:22:38.000
You could do inventory
analysis to figure out

00:22:38.000 --> 00:22:42.380
which items are performing
best in which environments,

00:22:42.380 --> 00:22:45.800
and you could also do even
better prediction models

00:22:45.800 --> 00:22:48.830
based on all the data
you're collecting.

00:22:48.830 --> 00:22:50.690
This is actually
a perfect example

00:22:50.690 --> 00:22:53.730
to do what we call
federated learning.

00:22:53.730 --> 00:22:58.190
So, federated learning is when
we have multiple machines that

00:22:58.190 --> 00:23:01.220
are all able to learn
locally, but based

00:23:01.220 --> 00:23:04.160
on those local learning
we can aggregate

00:23:04.160 --> 00:23:06.410
that data to make an even
better machine learning

00:23:06.410 --> 00:23:08.540
model in the cloud.

00:23:08.540 --> 00:23:13.670
So here, you can imagine having
one vending machine in a school

00:23:13.670 --> 00:23:16.460
and another vending
machine in a stadium,

00:23:16.460 --> 00:23:20.390
and both vending machines would
have very personalized models

00:23:20.390 --> 00:23:21.980
based on their environment.

00:23:21.980 --> 00:23:24.440
But they would also both
benefit from each other

00:23:24.440 --> 00:23:28.310
by aggregating their
data in the cloud.

00:23:28.310 --> 00:23:30.170
This is also a good
example that shows

00:23:30.170 --> 00:23:32.930
you can do interesting things
without a camera just using

00:23:32.930 --> 00:23:34.460
sensor data.

00:23:34.460 --> 00:23:37.650
But my next example goes
over a camera use case

00:23:37.650 --> 00:23:41.780
because I think that cameras are
perfect applications for doing

00:23:41.780 --> 00:23:44.700
some of this on
device processing.

00:23:44.700 --> 00:23:47.000
So imagine you have
a grocery store.

00:23:47.000 --> 00:23:49.370
And the grocery
store puts up cameras

00:23:49.370 --> 00:23:52.940
to count the number of
people standing in line.

00:23:52.940 --> 00:23:55.130
This camera would use
a TensorFlow model

00:23:55.130 --> 00:23:57.350
that's locally able to
count that number of people

00:23:57.350 --> 00:24:01.250
in the image and propagate
that number to the cloud.

00:24:01.250 --> 00:24:05.390
You could use this data to open
the optimal number of registers

00:24:05.390 --> 00:24:07.820
at any given time
so you never have

00:24:07.820 --> 00:24:10.940
to wait in line at the
grocery store again.

00:24:10.940 --> 00:24:12.860
With all of your
aggregated data,

00:24:12.860 --> 00:24:14.930
you could also do more
complicated machine

00:24:14.930 --> 00:24:16.670
learning models.

00:24:16.670 --> 00:24:19.010
You could predict
how many people

00:24:19.010 --> 00:24:23.090
you should staff at your
grocery store on any given day.

00:24:23.090 --> 00:24:25.520
You could also see how
optimal each grocery

00:24:25.520 --> 00:24:27.230
store is performing
and the differences

00:24:27.230 --> 00:24:30.160
between grocery stores.

00:24:30.160 --> 00:24:32.740
This could even be
useful for the shoppers--

00:24:32.740 --> 00:24:34.330
the end users.

00:24:34.330 --> 00:24:36.370
You can imagine
making a mobile app

00:24:36.370 --> 00:24:39.130
where, at home, you can check
how long the grocery store

00:24:39.130 --> 00:24:42.100
line is so that you
never are frustrated

00:24:42.100 --> 00:24:44.680
by having to wait in line
because you'll know in advance

00:24:44.680 --> 00:24:47.960
what the situation will be.

00:24:47.960 --> 00:24:50.600
The next use case
I want to go over

00:24:50.600 --> 00:24:53.450
brought in this camera
example a little bit more

00:24:53.450 --> 00:24:56.435
and applies it to an
industrial use case.

00:24:59.020 --> 00:25:02.410
So imagine with a factory
that, let's say, makes pizzas.

00:25:02.410 --> 00:25:06.940
And we add a camera that's
able to do quality control

00:25:06.940 --> 00:25:10.420
to increase both the
quality and the efficiency

00:25:10.420 --> 00:25:13.330
for this industrial application.

00:25:13.330 --> 00:25:16.030
I should note that we
have another talk that's

00:25:16.030 --> 00:25:20.300
specifically on enterprise
use cases on Android Things.

00:25:20.300 --> 00:25:21.800
So you should
listen to that talk

00:25:21.800 --> 00:25:23.560
if you want to know
more about what's

00:25:23.560 --> 00:25:25.870
possible on Android
Things for some

00:25:25.870 --> 00:25:29.580
of these industrial
applications.

00:25:29.580 --> 00:25:32.030
So in this case, we would
have a TensorFlow model

00:25:32.030 --> 00:25:37.460
that's locally able to learn how
to accept and reject pizzas by,

00:25:37.460 --> 00:25:42.320
for example, counting the number
of toppings of each pizza.

00:25:42.320 --> 00:25:44.330
So as we see some of
these pizzas go by,

00:25:44.330 --> 00:25:48.530
most of them we'll see will have
six tomatoes and five olives.

00:25:48.530 --> 00:25:49.760
And so they're accepted.

00:25:49.760 --> 00:25:52.820
But then soon, we'll
come to one-- this one--

00:25:52.820 --> 00:25:55.040
that one-- that has
too many tomatoes--

00:25:55.040 --> 00:25:57.620
too few tomatoes--
and too few olives.

00:25:57.620 --> 00:25:58.400
Sorry.

00:25:58.400 --> 00:26:01.170
Too few tomatoes
and too many olives.

00:26:01.170 --> 00:26:03.676
So we reject that pizza.

00:26:03.676 --> 00:26:05.050
We could also
propagate this data

00:26:05.050 --> 00:26:07.970
to the cloud to do more
analysis such as track

00:26:07.970 --> 00:26:11.270
our throughput and flag
if our error rate goes

00:26:11.270 --> 00:26:12.930
above a certain
threshold and we want

00:26:12.930 --> 00:26:17.240
to do a manual check
on our machines.

00:26:17.240 --> 00:26:19.310
There's one more use
case I want to go over

00:26:19.310 --> 00:26:23.190
that uses machine learning
in a slightly different way.

00:26:23.190 --> 00:26:26.750
So that's going to be
reinforcement learning applied

00:26:26.750 --> 00:26:28.325
to an agricultural use case.

00:26:31.350 --> 00:26:33.210
So imagine we have
a field that has

00:26:33.210 --> 00:26:35.970
a bunch of moisture
sensors in the ground,

00:26:35.970 --> 00:26:38.530
as well as sprinklers.

00:26:38.530 --> 00:26:41.460
And these are all
connected to a central hub

00:26:41.460 --> 00:26:44.190
running Android Things.

00:26:44.190 --> 00:26:46.550
Now, this Android
Things hub could

00:26:46.550 --> 00:26:49.440
do some machine
learning to optimize

00:26:49.440 --> 00:26:52.530
exactly what the output
of when and how much

00:26:52.530 --> 00:26:55.410
water each sprinkler
should output

00:26:55.410 --> 00:26:58.650
to optimize our crop growth.

00:26:58.650 --> 00:27:00.400
You may have heard of DeepMind.

00:27:00.400 --> 00:27:02.640
Sundar actually mentioned
it in his keynote

00:27:02.640 --> 00:27:05.370
as a company at
Alphabet that recently

00:27:05.370 --> 00:27:09.390
made AlphaGo, which beat the
best go player in the world.

00:27:09.390 --> 00:27:11.510
Now, this used
reinforcement learning

00:27:11.510 --> 00:27:13.135
in really powerful ways.

00:27:13.135 --> 00:27:14.760
And I think that
reinforcement learning

00:27:14.760 --> 00:27:17.970
is an amazing tool that could
also be used on Android Things

00:27:17.970 --> 00:27:20.220
really well.

00:27:20.220 --> 00:27:23.580
With reinforcement learning, you
could discover some nuanced use

00:27:23.580 --> 00:27:25.920
cases, such as--

00:27:25.920 --> 00:27:29.490
imagine your hill
had a hill on it.

00:27:29.490 --> 00:27:31.230
In that case, you
may actually want

00:27:31.230 --> 00:27:34.380
to water the crops at
the bottom of the hill

00:27:34.380 --> 00:27:36.766
less than those at
the top of the hill

00:27:36.766 --> 00:27:38.640
because the sprinklers
at the top of the hill

00:27:38.640 --> 00:27:41.265
might have runoff
water that'll add

00:27:41.265 --> 00:27:45.390
the extra water to the crops
at the bottom of the hill.

00:27:45.390 --> 00:27:47.370
So Android Things
makes integrations

00:27:47.370 --> 00:27:50.340
like these really
seamless, and provides you

00:27:50.340 --> 00:27:52.660
the tools to do anything
that you imagine.

00:27:55.580 --> 00:27:58.550
And I think that using things
like TensorFlow and cloud

00:27:58.550 --> 00:28:02.690
together can also do some really
amazing use cases that you

00:28:02.690 --> 00:28:04.160
can't do with just one.

00:28:04.160 --> 00:28:08.360
Combining these services could
do so much more for your device

00:28:08.360 --> 00:28:10.850
and for your end users.

00:28:10.850 --> 00:28:13.280
There's one more service I
want to talk about today,

00:28:13.280 --> 00:28:15.920
and that's the Google Assistant.

00:28:15.920 --> 00:28:19.365
So Android Things supports
the Google Assistant SDK.

00:28:19.365 --> 00:28:22.160
Now, there is a huge
number of use cases

00:28:22.160 --> 00:28:25.310
that we think the
Assistant can do for you.

00:28:25.310 --> 00:28:29.000
It allows you to connect to
all the knowledge of Google

00:28:29.000 --> 00:28:33.740
as well as allows you to control
the devices in your home.

00:28:33.740 --> 00:28:35.780
Again, we have a
code lab that goes

00:28:35.780 --> 00:28:39.290
over getting Android Things to
work with the Google Assistant.

00:28:39.290 --> 00:28:43.800
So you can do it at home or you
can do it in our sandbox area.

00:28:43.800 --> 00:28:46.640
We also partnered
with AIY, which

00:28:46.640 --> 00:28:48.890
is a group at Google
that makes kits

00:28:48.890 --> 00:28:52.670
for do it yourself artificial
intelligence makers.

00:28:52.670 --> 00:28:54.800
And so what you see on
the screen here is the kit

00:28:54.800 --> 00:28:56.330
they recently released--

00:28:56.330 --> 00:28:59.390
the voice kit-- that is
one of the easiest ways

00:28:59.390 --> 00:29:01.760
that you can get started
with Android Things

00:29:01.760 --> 00:29:05.360
working with the
Google Assistant.

00:29:05.360 --> 00:29:06.980
Before I end my
talk today, I want

00:29:06.980 --> 00:29:10.670
to go over one more
feature of Android Things,

00:29:10.670 --> 00:29:14.600
and that's the Android
Things Developer Console.

00:29:14.600 --> 00:29:16.400
The Android Things
Developer Console

00:29:16.400 --> 00:29:19.380
brings all these
services together.

00:29:19.380 --> 00:29:21.770
It's our new Developer
Portal, which

00:29:21.770 --> 00:29:23.300
we're going to
release soon, that

00:29:23.300 --> 00:29:26.810
lets you add all these services
to a device in a really

00:29:26.810 --> 00:29:28.970
simple way.

00:29:28.970 --> 00:29:31.910
The key with the Android
Things developer console

00:29:31.910 --> 00:29:33.770
is customization.

00:29:33.770 --> 00:29:36.950
You get ultimate control
of exactly what services

00:29:36.950 --> 00:29:39.140
will go on your device when
using the Android Things

00:29:39.140 --> 00:29:41.090
Developer Console.

00:29:41.090 --> 00:29:44.175
You also get device
management and updates.

00:29:44.175 --> 00:29:46.730
So this Allows you to
create your projects

00:29:46.730 --> 00:29:50.420
as well as upload your own
APKs for your own device

00:29:50.420 --> 00:29:53.210
functionality and push
those feature updates

00:29:53.210 --> 00:29:56.180
to your devices in the field.

00:29:56.180 --> 00:29:57.860
The Android Things
Developer Console

00:29:57.860 --> 00:30:01.110
is also where you'll get
all the updates from Google.

00:30:01.110 --> 00:30:02.720
So these are the
security updates

00:30:02.720 --> 00:30:08.210
and the feature updates that
will make your devices secure.

00:30:08.210 --> 00:30:11.120
Now, since you get total control
with the Developer Console

00:30:11.120 --> 00:30:14.050
you get to control
which updates you take

00:30:14.050 --> 00:30:17.220
and exactly when these
updates push out.

00:30:17.220 --> 00:30:19.880
But I believe that the
customization of The Developer

00:30:19.880 --> 00:30:23.330
Console gives you the control
to really create anything

00:30:23.330 --> 00:30:27.650
that you can imagine, unlocking
this unlimited potential

00:30:27.650 --> 00:30:30.374
of what we think is
possible of Android Things,

00:30:30.374 --> 00:30:32.290
especially when combined
with Google services.

00:30:35.230 --> 00:30:37.930
So to summarize,
Android Things gives you

00:30:37.930 --> 00:30:42.070
that platform that makes
hardware development feasible.

00:30:42.070 --> 00:30:44.260
It gives you all
the Android APIs

00:30:44.260 --> 00:30:46.690
to make your development
process easy,

00:30:46.690 --> 00:30:49.570
combined with this
system on module design

00:30:49.570 --> 00:30:53.350
to make it quick and
economical to make a prototype

00:30:53.350 --> 00:30:56.350
and also bring that
device to production.

00:30:56.350 --> 00:30:58.630
But the services
on top, I believe,

00:30:58.630 --> 00:31:01.510
are the huge factor that
allows you to really

00:31:01.510 --> 00:31:04.480
innovate and enhance your
device as well as bring

00:31:04.480 --> 00:31:07.510
new features to your users.

00:31:07.510 --> 00:31:09.400
So we have Google
Play services, which

00:31:09.400 --> 00:31:12.940
gives you this suite of tools
like the mobile vision APIs,

00:31:12.940 --> 00:31:16.620
location services,
as well as Firebase.

00:31:16.620 --> 00:31:19.710
You get TensorFlow, which
uses the powerful on device

00:31:19.710 --> 00:31:21.160
processing of your
Android Things

00:31:21.160 --> 00:31:25.640
device to add that
intelligence to your device.

00:31:25.640 --> 00:31:28.420
You also get Google Cloud
Platform, and specifically

00:31:28.420 --> 00:31:31.570
Cloud IoT Core to
connect your device

00:31:31.570 --> 00:31:35.660
to the even greater
intelligence of the cloud.

00:31:35.660 --> 00:31:37.540
And finally, you get
the Google Assistant,

00:31:37.540 --> 00:31:39.250
the latest and
greatest in Google's

00:31:39.250 --> 00:31:41.980
personal assistant technology.

00:31:41.980 --> 00:31:44.920
All these services, and any
that come in the future,

00:31:44.920 --> 00:31:46.930
will fit on top
of Android Things

00:31:46.930 --> 00:31:49.195
to unlock this potential
of your device.

00:31:49.195 --> 00:31:53.120
I want to leave you today
with my call to action.

00:31:53.120 --> 00:31:54.580
We have a huge
number of sessions

00:31:54.580 --> 00:31:58.150
on Android Things this year,
as well as demos and code

00:31:58.150 --> 00:32:00.130
labs for you to learn
more about what's

00:32:00.130 --> 00:32:02.500
possible on Android Things.

00:32:02.500 --> 00:32:04.180
We also have a
developer site where

00:32:04.180 --> 00:32:07.360
you can visit to download the
latest Android Things image

00:32:07.360 --> 00:32:09.820
and start making your idea.

00:32:09.820 --> 00:32:13.000
I encourage you to add some
of these Google services

00:32:13.000 --> 00:32:15.970
to your device to see how
powerful they really can

00:32:15.970 --> 00:32:19.060
be, and then tell us about it.

00:32:19.060 --> 00:32:22.300
Join our developer community,
where thousands of people

00:32:22.300 --> 00:32:25.870
are already asking questions,
sharing their ideas,

00:32:25.870 --> 00:32:30.160
sharing their prototypes,
and getting feedback.

00:32:30.160 --> 00:32:31.800
Again, I'm Sam Beder.

00:32:31.800 --> 00:32:34.870
And I look forward to hearing
about all the amazing devices

00:32:34.870 --> 00:32:37.300
that you're building on
Android Things that integrate

00:32:37.300 --> 00:32:39.790
these powerful Google services.

00:32:39.790 --> 00:32:40.630
Thank you.

00:32:40.630 --> 00:32:43.510
[APPLAUSE]

00:32:43.510 --> 00:32:50.050
[MUSIC PLAYING]

