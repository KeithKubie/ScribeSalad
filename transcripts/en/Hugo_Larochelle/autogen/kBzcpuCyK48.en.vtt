WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.140
 in this capsule we will describe 

00:00:02.159 --> 00:00:08.730
 and motivated the concept of local search 

00:00:06.140 --> 00:00:11.130
 then the purpose of this part of 

00:00:08.730 --> 00:00:12.750
 course it's first of all good 

00:00:11.130 --> 00:00:15.750
 understand what is the difference 

00:00:12.750 --> 00:00:17.940
 between heuristic research and the 

00:00:15.750 --> 00:00:20.250
 local search then from his going to see 

00:00:17.940 --> 00:00:21.150
 three methods to make the 

00:00:20.250 --> 00:00:23.039
 local search 

00:00:21.150 --> 00:00:26.580
 the first one that's going to be the method of 

00:00:23.039 --> 00:00:29.160
 cambi the second sim in the late evening or 

00:00:26.580 --> 00:00:30.900
 annealing simulate in French and finally 

00:00:29.160 --> 00:00:33.289
 we will talk about them the algorithms 

00:00:30.900 --> 00:00:33.289
 genetic 

00:00:33.890 --> 00:00:40.950
 so let's start with quick lapidot of 

00:00:37.829 --> 00:00:42.239
 skiing and the context of research 

00:00:40.950 --> 00:00:44.430
 heuristic and among others of 

00:00:42.239 --> 00:00:45.030
 the star algorithm that we saw 

00:00:44.430 --> 00:00:47.879
 previously 

00:00:45.030 --> 00:00:50.700
 so in this case also when doing 

00:00:47.879 --> 00:00:53.460
 heuristic search in a graph 

00:00:50.700 --> 00:00:56.219
 one of them is a function aim 

00:00:53.460 --> 00:00:59.370
 goal that allows us to identify if a 

00:00:56.219 --> 00:01:01.850
 node n is an ubu a place that one 

00:00:59.370 --> 00:01:04.979
 wants to reach a particular 

00:01:01.850 --> 00:01:06.900
 peculiarity of the problem is 

00:01:04.979 --> 00:01:08.430
 that in fact the solution that we 

00:01:06.900 --> 00:01:11.100
 interest it's really a way 

00:01:08.430 --> 00:01:13.860
 initial data up to a final or 

00:01:11.100 --> 00:01:15.960
 an oversight is also ideally 

00:01:13.860 --> 00:01:19.799
 wants to have a path that is optimal the 

00:01:15.960 --> 00:01:21.479
 shortest way and in the 

00:01:19.799 --> 00:01:24.090
 research process but we have to 

00:01:21.479 --> 00:01:25.799
 among other things store all of 

00:01:24.090 --> 00:01:28.590
 nodes that are who are encountered that 

00:01:25.799 --> 00:01:30.600
 are visited in order, among other 

00:01:28.590 --> 00:01:34.350
 to ensure that we do not revisit 

00:01:30.600 --> 00:01:36.299
 nutrients on the other hand for some 

00:01:34.350 --> 00:01:39.509
 problems actually we'll see in 

00:01:36.299 --> 00:01:40.890
 this part is part of the coup we have 

00:01:39.509 --> 00:01:41.970
 certain characteristics that makes that 

00:01:40.890 --> 00:01:44.729
 the algorithm to the stars and not 

00:01:41.970 --> 00:01:47.340
 necessarily appropriate so sometimes 

00:01:44.729 --> 00:01:49.500
 we will see among other things a relationship 

00:01:47.340 --> 00:01:51.240
 of an objective function that one 

00:01:49.500 --> 00:01:53.549
 wants to optimize either maximize or 

00:01:51.240 --> 00:01:54.869
 minimized maybe we'll have more 

00:01:53.549 --> 00:01:56.070
 a goal function that will allow us 

00:01:54.869 --> 00:01:58.710
 to identify when one has reached a 

00:01:56.070 --> 00:02:00.450
 solution as it may possibly we 

00:01:58.710 --> 00:02:01.979
 interested in in some problems 

00:02:00.450 --> 00:02:04.049
 it's to make optimizing a certain 

00:02:01.979 --> 00:02:06.360
 function that we took function objectives 

00:02:04.049 --> 00:02:08.940
 who will identify us just how much a 

00:02:06.360 --> 00:02:14.190
 does not correspond to a good good state 

00:02:08.940 --> 00:02:16.260
 solution or if sometimes we will the solution 

00:02:14.190 --> 00:02:18.569
 which is going to be searched is only 

00:02:16.260 --> 00:02:20.430
 precisely the identification of this node 

00:02:18.569 --> 00:02:22.050
 which is optimal according to our function of 

00:02:20.430 --> 00:02:24.480
 goals or a whole that is close 

00:02:22.050 --> 00:02:27.150
 an optimal solution but we will not 

00:02:24.480 --> 00:02:31.739
 look at the path that allows us 

00:02:27.150 --> 00:02:33.390
 to get to this draw is finally there 

00:02:31.739 --> 00:02:36.840
 some problems but over space 

00:02:33.390 --> 00:02:38.730
 states or nudes that we explored will 

00:02:36.840 --> 00:02:41.160
 to be too big to allow us 

00:02:38.730 --> 00:02:42.750
 to register them so visit us 

00:02:41.160 --> 00:02:44.129
 it's for this kind of problem there that 

00:02:42.750 --> 00:02:49.590
 the local search is going to be 

00:02:44.129 --> 00:02:52.739
 particularly appropriate an example 

00:02:49.590 --> 00:02:55.379
 of a problem like that is the problem 

00:02:52.739 --> 00:02:58.170
 of solving the enigma of the que queens 

00:02:55.379 --> 00:03:02.159
 or enter into this riddle we must 

00:02:58.170 --> 00:03:04.950
 place a number of reindeers on 

00:03:02.159 --> 00:03:09.030
 a chessboard that will contain a large g 

00:03:04.950 --> 00:03:10.890
 and n colleges and we have to place all cn 

00:03:09.030 --> 00:03:13.319
 reindeer there so that does not exist 

00:03:10.890 --> 00:03:15.360
 reindeer that attack each other 

00:03:13.319 --> 00:03:17.040
 in other words we must not have two 

00:03:15.360 --> 00:03:19.500
 queens that lies on the same 

00:03:17.040 --> 00:03:19.950
 diagonal the same column where the same 

00:03:19.500 --> 00:03:22.200
 row 

00:03:19.950 --> 00:03:27.330
 so you have an example in what 6 

00:03:22.200 --> 00:03:28.019
 where n is equal to 8 or effective to 

00:03:27.330 --> 00:03:29.610
 check 

00:03:28.019 --> 00:03:31.140
 none of the queens who are attacking 

00:03:29.610 --> 00:03:33.900
 mutually that is on the same 

00:03:31.140 --> 00:03:35.970
 row where the town hall like this is a 

00:03:33.900 --> 00:03:37.680
 solution to this enigma the the dance that 

00:03:35.970 --> 00:03:39.780
 if in fact we are really interested 

00:03:37.680 --> 00:03:42.840
 simply to a place that corresponds to 

00:03:39.780 --> 00:03:45.030
 this configuration of 8 reindeer that 

00:03:42.840 --> 00:03:47.099
 does not attack the objective function that 

00:03:45.030 --> 00:03:49.110
 will be made the name of reindeer who 

00:03:47.099 --> 00:03:50.580
 tackle this is an example of 

00:03:49.110 --> 00:03:53.220
 objective functions for this problem there 

00:03:50.580 --> 00:03:55.319
 and finally we are just interested in un 

00:03:53.220 --> 00:03:56.909
 which optimizes 7 works the most 

00:03:55.319 --> 00:03:58.650
 possible therefore that a number of annuities 

00:03:56.909 --> 00:04:01.439
 tackle as little as possible to 

00:03:58.650 --> 00:04:02.970
 know in this case 6.0 so the way 

00:04:01.439 --> 00:04:04.409
 to get there and not really 

00:04:02.970 --> 00:04:05.939
 important since just know the 

00:04:04.409 --> 00:04:08.780
 let us know how 

00:04:05.939 --> 00:04:08.780
 organize the ranks 

00:04:11.050 --> 00:04:18.250
 so this type of problem there research 

00:04:14.680 --> 00:04:20.200
 local is going to be an appropriate solution 

00:04:18.250 --> 00:04:23.020
 a peculiarity looking for the 15 

00:04:20.200 --> 00:04:24.550
 is that the local market will keep 

00:04:23.020 --> 00:04:27.250
 only a number number 

00:04:24.550 --> 00:04:28.750
 limited of honor in memory the case the 

00:04:27.250 --> 00:04:30.400
 simpler that is first case that we are going 

00:04:28.750 --> 00:04:33.160
 to see is that of a city like bing 

00:04:30.400 --> 00:04:35.410
 where we will keep only one in memory at 

00:04:33.160 --> 00:04:38.320
 as we search 

00:04:35.410 --> 00:04:39.640
 that we run the algorithm is in 

00:04:38.320 --> 00:04:41.410
 more elaborate hulls in order one 

00:04:39.640 --> 00:04:42.880
 night set among others with the 

00:04:41.410 --> 00:04:44.440
 genetic algorithms 

00:04:42.880 --> 00:04:46.180
 we will keep an eye we see a 

00:04:44.440 --> 00:04:48.940
 all of us that we will call 

00:04:46.180 --> 00:04:50.500
 population then this population there this 

00:04:48.940 --> 00:04:52.510
 set of new routes evolve to 

00:04:50.500 --> 00:04:53.820
 as the gateway goes 

00:04:52.510 --> 00:04:57.730
 run 

00:04:53.820 --> 00:04:59.080
 so as I said sometimes way 

00:04:57.730 --> 00:05:00.580
 general research algae 

00:04:59.080 --> 00:05:03.190
 local authorities will try to optimize 

00:05:00.580 --> 00:05:06.340
 objective function that is specified by 

00:05:03.190 --> 00:05:08.170
 the user in in the frame hill 

00:05:06.340 --> 00:05:10.930
 climbing is this function that goes 

00:05:08.170 --> 00:05:12.130
 determine which node to visit 

00:05:10.930 --> 00:05:14.080
 next as we will see 

00:05:12.130 --> 00:05:15.669
 and actually in the algorithms 

00:05:14.080 --> 00:05:18.100
 genetic this goal function the 

00:05:15.669 --> 00:05:20.919
 will allow me to design and a 

00:05:18.100 --> 00:05:22.540
 fitness or adaptation function that 

00:05:20.919 --> 00:05:24.400
 will intervene in the calculation that will us 

00:05:22.540 --> 00:05:25.960
 to identify what is the 

00:05:24.400 --> 00:05:28.960
 next generation the next 

00:05:25.960 --> 00:05:32.500
 together not to generate in 

00:05:28.960 --> 00:05:34.570
 dalger execution is the most 

00:05:32.500 --> 00:05:36.040
 important to remember in relation to 

00:05:34.570 --> 00:05:38.169
 local search algorithms this is 

00:05:36.040 --> 00:05:40.120
 that it does not guarantee that we are going 

00:05:38.169 --> 00:05:42.970
 find a solution that gets so 

00:05:40.120 --> 00:05:44.200
 his atrix is ​​really it's especially at 

00:05:42.970 --> 00:05:46.050
 we will be able to find 

00:05:44.200 --> 00:05:48.910
 a solution that is acceptable in a 

00:05:46.050 --> 00:05:52.860
 deadline that is going to be that they are going to be 

00:05:48.910 --> 00:05:52.860
 interesting that will be fast 

