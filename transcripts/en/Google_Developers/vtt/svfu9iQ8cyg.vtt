WEBVTT
Kind: captions
Language: en

00:00:00.645 --> 00:00:01.520
ROB DODSON: Hey guys.

00:00:01.520 --> 00:00:01.810
What's up?

00:00:01.810 --> 00:00:04.220
It's Rob Dodson here from the
Google Developer Relations

00:00:04.220 --> 00:00:04.540
team.

00:00:04.540 --> 00:00:06.289
And today, I want to
talk to you about how

00:00:06.289 --> 00:00:08.600
you can create your
own responsive UI

00:00:08.600 --> 00:00:10.750
elements using Polymer.

00:00:10.750 --> 00:00:12.540
Now, Polymer's a
new kind of library

00:00:12.540 --> 00:00:15.570
for creating custom HTML tags.

00:00:15.570 --> 00:00:17.780
And with that comes
the ability to do

00:00:17.780 --> 00:00:21.070
things like bake
responsiveness in by default.

00:00:21.070 --> 00:00:23.160
That's a really awesome feature.

00:00:23.160 --> 00:00:25.540
As recent studies have
shown, the average person

00:00:25.540 --> 00:00:29.360
is interacting with about
three different devices a day,

00:00:29.360 --> 00:00:31.490
oftentimes beginning
a task on one device

00:00:31.490 --> 00:00:34.340
and later finishing
it on another one.

00:00:34.340 --> 00:00:37.590
Now, as web developers,
it's our responsibility

00:00:37.590 --> 00:00:41.020
to make sure the experiences
that we create work well

00:00:41.020 --> 00:00:43.060
in this new multi-device world.

00:00:43.060 --> 00:00:45.730
But HTML and CSS
don't always give us

00:00:45.730 --> 00:00:48.722
the best tools for
completing that job.

00:00:48.722 --> 00:00:50.180
That's where a
library like Polymer

00:00:50.180 --> 00:00:52.960
can actually jump in
and really help us out.

00:00:52.960 --> 00:00:56.560
Now as I mentioned, Polymer's
for creating custom HTML

00:00:56.560 --> 00:00:57.640
elements.

00:00:57.640 --> 00:01:00.270
Under the hood, it's
actually using a new set

00:01:00.270 --> 00:01:04.370
of emerging standards called
web components, which basically

00:01:04.370 --> 00:01:07.870
give developers access to
the same low level APIs

00:01:07.870 --> 00:01:10.010
that the browser
makers use when they

00:01:10.010 --> 00:01:12.590
implement their own elements.

00:01:12.590 --> 00:01:14.700
Now, from a high level,
that means we actually

00:01:14.700 --> 00:01:17.400
have the ability to create
a whole new ecosystem

00:01:17.400 --> 00:01:22.340
of shared, responsive,
performant HTML elements.

00:01:22.340 --> 00:01:24.910
And when the tools we use
are performant by default,

00:01:24.910 --> 00:01:26.760
it makes the whole
process of supporting

00:01:26.760 --> 00:01:30.040
the multi-screen web
that much easier.

00:01:30.040 --> 00:01:32.030
So in this video,
I'm going to show you

00:01:32.030 --> 00:01:35.776
how to create a responsive
Polymer element.

00:01:35.776 --> 00:01:38.275
We're actually going to make a
little collapsing toolbar tag

00:01:38.275 --> 00:01:39.900
that's going to take
all of its anchors

00:01:39.900 --> 00:01:42.150
and put them into a
little menu button.

00:01:42.150 --> 00:01:45.280
But most importantly, every
technique that we cover here

00:01:45.280 --> 00:01:47.350
can be applied to any
responsive element

00:01:47.350 --> 00:01:49.630
that we build using Polymer.

00:01:49.630 --> 00:01:51.342
Now, as we're
working, we're going

00:01:51.342 --> 00:01:52.800
to be building
something that's got

00:01:52.800 --> 00:01:54.340
to be shared with
other developers.

00:01:54.340 --> 00:01:56.350
So we've got to
constantly ask ourselves,

00:01:56.350 --> 00:02:00.414
how can I make this
flexible for others to use?

00:02:00.414 --> 00:02:02.330
The first part in this
process is figuring out

00:02:02.330 --> 00:02:05.740
when we want to change the
appearance of our element.

00:02:05.740 --> 00:02:09.199
Every site is going to have
different amounts of content

00:02:09.199 --> 00:02:11.670
and layout, and in particular
at different screen sizes,

00:02:11.670 --> 00:02:14.620
it's going to need to know
when to update its appearance.

00:02:14.620 --> 00:02:16.828
Let me show you an example
of what I'm talking about.

00:02:16.828 --> 00:02:19.530
So over here, I've got about
nine items in my toolbar,

00:02:19.530 --> 00:02:23.115
meaning my toolbar can only
be about 900 pixels before it

00:02:23.115 --> 00:02:24.390
needs to collapse.

00:02:24.390 --> 00:02:27.760
But over here, I've got
four items in my toolbar.

00:02:27.760 --> 00:02:30.280
So my toolbar can be
as small as 500 pixels

00:02:30.280 --> 00:02:31.796
before it needs to collapse.

00:02:31.796 --> 00:02:33.545
Every site's going to
have this same issue

00:02:33.545 --> 00:02:35.320
of having different
amounts of content.

00:02:35.320 --> 00:02:38.260
So how can I create
a responsive element

00:02:38.260 --> 00:02:41.440
that doesn't bake in
all of its break points?

00:02:41.440 --> 00:02:43.070
One option is to
allow the developer

00:02:43.070 --> 00:02:45.065
to actually pass
in a breakpoint,

00:02:45.065 --> 00:02:47.970
to actually configure my
element from the outside

00:02:47.970 --> 00:02:51.030
and tell me when they
want it to collapse.

00:02:51.030 --> 00:02:53.130
Now, to make this happen,
the Polymer team's

00:02:53.130 --> 00:02:55.980
created the core
media query element.

00:02:55.980 --> 00:02:57.990
Under the hood, the core
media query element's

00:02:57.990 --> 00:03:00.120
going to check the
size of the view port

00:03:00.120 --> 00:03:03.899
and see when it matches a
developer provided breakpoint.

00:03:03.899 --> 00:03:05.190
Let me show you how that works.

00:03:05.190 --> 00:03:08.140
So over here, I've got a
core media query element.

00:03:08.140 --> 00:03:11.360
And I've gone ahead and
configured it's query attribute

00:03:11.360 --> 00:03:14.230
to have a maximum
width of 500 pixels,

00:03:14.230 --> 00:03:17.810
meaning when the screen size
is less than 500 pixels,

00:03:17.810 --> 00:03:20.320
it's going to go ahead and set
its query matches attribute

00:03:20.320 --> 00:03:21.670
to true.

00:03:21.670 --> 00:03:24.170
And this means we can actually
create our own binding called

00:03:24.170 --> 00:03:28.210
small screen and set it to
the value of query matches.

00:03:28.210 --> 00:03:30.890
When the screen is
less than 500 pixels,

00:03:30.890 --> 00:03:33.140
it's going to set
small screen to true.

00:03:33.140 --> 00:03:36.040
And now any element that's
watching small screen

00:03:36.040 --> 00:03:39.200
will know that it's time
to update its appearance.

00:03:39.200 --> 00:03:42.830
So let's actually put this
into our collapse toolbar tag.

00:03:42.830 --> 00:03:44.830
I've got a very simple
Polymer definition

00:03:44.830 --> 00:03:45.869
here to get us started.

00:03:45.869 --> 00:03:47.410
And the first thing
we're going to do

00:03:47.410 --> 00:03:50.690
is we're going to import that
core media query element.

00:03:50.690 --> 00:03:52.900
Then we can drop the
media query element

00:03:52.900 --> 00:03:56.140
into the template for
our Polymer element.

00:03:56.140 --> 00:03:58.870
And lastly, we're going to
publish that query attribute

00:03:58.870 --> 00:04:02.720
to the outside world by adding
it to our attributes list.

00:04:02.720 --> 00:04:05.580
And we can bind that value
back to the query property

00:04:05.580 --> 00:04:07.570
on the core media query element.

00:04:07.570 --> 00:04:10.550
This allows a developer to
actually pass in a breakpoint

00:04:10.550 --> 00:04:13.920
and have it reflected
inside of our tag.

00:04:13.920 --> 00:04:17.010
So that lets us
know when it's time

00:04:17.010 --> 00:04:18.980
to update the appearance
of our element,

00:04:18.980 --> 00:04:21.640
but that brings us to the
next point, which is how do we

00:04:21.640 --> 00:04:25.157
actually update the
appearance of our element?

00:04:25.157 --> 00:04:27.740
Now, to do this we're going to
use one more feature of Polymer

00:04:27.740 --> 00:04:31.160
called conditional
template bindings.

00:04:31.160 --> 00:04:34.170
As we know, from the top
level of a Polymer element,

00:04:34.170 --> 00:04:37.370
there's a template for rendering
content into the shadow dome.

00:04:37.370 --> 00:04:40.170
But what's really cool is
that this top level template

00:04:40.170 --> 00:04:43.200
can actually contain additional
nested templates which

00:04:43.200 --> 00:04:45.170
support data bindings.

00:04:45.170 --> 00:04:48.480
So if we use an if
condition inside

00:04:48.480 --> 00:04:50.370
of one of our
nested templates, we

00:04:50.370 --> 00:04:52.920
can actually bind to the
value of small screen

00:04:52.920 --> 00:04:56.790
and only display content
on smaller screen sizes.

00:04:56.790 --> 00:04:59.110
As an example, I'm
going to actually try

00:04:59.110 --> 00:05:01.920
to grab all of the
links out of my toolbar

00:05:01.920 --> 00:05:04.800
using a content element
which I've placed inside

00:05:04.800 --> 00:05:07.710
of a menu button, which
is inside of our template

00:05:07.710 --> 00:05:11.429
that's only going to render
on smaller screen sizes.

00:05:11.429 --> 00:05:13.970
Now from the user's perspective,
the developer who's actually

00:05:13.970 --> 00:05:17.472
using our tag, their code is
going to remain the exact same.

00:05:17.472 --> 00:05:18.930
They don't need to
change anything.

00:05:18.930 --> 00:05:21.050
They just pass in
a few anchor tags.

00:05:21.050 --> 00:05:24.230
They set the query attribute
to max width 500 pixels.

00:05:24.230 --> 00:05:26.449
And now the toolbar just
does the right thing.

00:05:26.449 --> 00:05:28.490
I'll show you an example
of what that looks like.

00:05:28.490 --> 00:05:30.740
So over here, as
we start to reach

00:05:30.740 --> 00:05:32.417
that 500 pixel
breakpoint, you'll

00:05:32.417 --> 00:05:34.000
see that all the
anchor tags are going

00:05:34.000 --> 00:05:37.630
to jump out of the toolbar
and into that Menu button.

00:05:37.630 --> 00:05:40.130
This is really awesome,
because if the developer using

00:05:40.130 --> 00:05:41.790
our element doesn't
have to stress out

00:05:41.790 --> 00:05:44.070
about supporting all these
different screen sizes,

00:05:44.070 --> 00:05:46.600
it means they can spend more
time doing the things they

00:05:46.600 --> 00:05:50.380
enjoy, like adding really
awesome features to their app.

00:05:50.380 --> 00:05:52.610
So if you want to grab
the code for this example,

00:05:52.610 --> 00:05:54.580
head on over to
GitHub and grab it

00:05:54.580 --> 00:05:57.530
at robdodson/collapse-toolbar.

00:05:57.530 --> 00:05:59.400
If you want to learn
more about Polymer,

00:05:59.400 --> 00:06:01.180
be sure to check out
Addy Osmani's video

00:06:01.180 --> 00:06:03.990
on building web components with
Polymer and Eric Bidelman's

00:06:03.990 --> 00:06:09.585
video on using Google services
with Polymer elements.

00:06:09.585 --> 00:06:11.460
Also be sure to check
out the Polymer website

00:06:11.460 --> 00:06:13.030
at polymer/project.org.

00:06:13.030 --> 00:06:15.280
And if you haven't done so
yet, make sure to follow us

00:06:15.280 --> 00:06:19.360
on Twitter at @polymer and
Google+ at PolymerProject.

00:06:19.360 --> 00:06:21.140
Now, I want all of
you get out there

00:06:21.140 --> 00:06:23.080
and start
componentizing the web.

00:06:23.080 --> 00:06:26.010
It's up to all of us to
build this new ecosystem

00:06:26.010 --> 00:06:28.110
of responsive elements.

00:06:28.110 --> 00:06:31.980
My name's Rob Dodson, and
thank you so much for watching.

