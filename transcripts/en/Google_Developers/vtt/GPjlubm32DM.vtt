WEBVTT
Kind: captions
Language: en

00:00:01.440 --> 00:00:01.980
IAN ELLISON-TAYLOR: All right.

00:00:01.980 --> 00:00:04.770
I see the clock counting
down, so I guess

00:00:04.770 --> 00:00:05.963
we should get started.

00:00:05.963 --> 00:00:11.410
First of all, thank you for
coming this late on a Friday.

00:00:11.410 --> 00:00:13.810
I'm quite impressed
with the turnout.

00:00:13.810 --> 00:00:14.940
I can't believe this
many people had

00:00:14.940 --> 00:00:16.190
nothing better to do.

00:00:19.630 --> 00:00:20.760
Anyways, thank you for coming.

00:00:20.760 --> 00:00:25.340
I hope everyone has had good
I/O. This is the fireside chat

00:00:25.340 --> 00:00:29.450
for Chrome, so this is your
opportunity to have one last

00:00:29.450 --> 00:00:31.050
shot to ask us questions
before we

00:00:31.050 --> 00:00:32.920
all turn into pumpkins.

00:00:32.920 --> 00:00:36.830
Things that have come up over
through I/O or things are on

00:00:36.830 --> 00:00:39.540
the top of your mind.

00:00:39.540 --> 00:00:42.120
We'll quickly run through
just who we are.

00:00:42.120 --> 00:00:47.220
And something of a tradition
for fireside chats is we

00:00:47.220 --> 00:00:50.540
usually begin with what each of
us is most interested in,

00:00:50.540 --> 00:00:53.400
in terms of an upcoming feature
or what's on the top

00:00:53.400 --> 00:00:54.480
of our mind.

00:00:54.480 --> 00:00:56.940
So we'll do that, and hopefully
that will inspire

00:00:56.940 --> 00:00:59.950
some of you to hit the mics
and ask us questions.

00:00:59.950 --> 00:01:03.170
Otherwise, it's just going to
be us talking for about 40

00:01:03.170 --> 00:01:05.580
minutes, which probably isn't
going to be that interesting.

00:01:05.580 --> 00:01:10.950
So definitely get your
questions ready.

00:01:10.950 --> 00:01:12.070
I'm Ian Ellison-Taylor.

00:01:12.070 --> 00:01:15.370
I'm the director of product
management for the web

00:01:15.370 --> 00:01:18.500
platform part of Chrome.

00:01:18.500 --> 00:01:19.640
I think we've already--

00:01:19.640 --> 00:01:21.560
trying to think of the
top features as I

00:01:21.560 --> 00:01:22.280
look down the line.

00:01:22.280 --> 00:01:24.880
I think we've already hit,
probably, my favorite in the

00:01:24.880 --> 00:01:28.950
keynote, which is Web Components
and the tool kit,

00:01:28.950 --> 00:01:33.360
just simply for what I think it
will allow folks like you

00:01:33.360 --> 00:01:36.580
to be able to do over the next
year, much more easily than

00:01:36.580 --> 00:01:37.530
you've been able to do.

00:01:37.530 --> 00:01:39.530
So I think that's going
to be my top feature.

00:01:39.530 --> 00:01:40.780
So I will pass the mic.

00:01:43.620 --> 00:01:44.590
LARS BAK: I'm Lars Bak.

00:01:44.590 --> 00:01:46.120
I'm a software engineer
at Google.

00:01:46.120 --> 00:01:50.580
And my favorite feature I look
forward to is speed.

00:01:50.580 --> 00:01:52.210
And that'll come to you
in the form of Dart.

00:01:55.766 --> 00:01:59.400
GREG SIMON: Hi, I'm
Greg Simon.

00:01:59.400 --> 00:02:00.570
I'm managing director
for Blink.

00:02:00.570 --> 00:02:04.690
And my most anticipated feature
that I can't wait to

00:02:04.690 --> 00:02:06.320
see is the lazy-block layout.

00:02:09.780 --> 00:02:10.680
ERIK KAY: Hi, Erik Kay.

00:02:10.680 --> 00:02:14.670
I'm the instructor for Apps and
Extensions Native Client.

00:02:14.670 --> 00:02:18.960
And I too am really excited
about Web Components.

00:02:18.960 --> 00:02:22.540
I think it's been this huge gap
in the web platform that

00:02:22.540 --> 00:02:26.400
were finally going to fill in,
and really make the web an

00:02:26.400 --> 00:02:28.950
equal to other tool
kits out there.

00:02:31.920 --> 00:02:33.160
DARIN FISHER: Hi, my name's
Darin Fisher.

00:02:33.160 --> 00:02:35.580
I'm an eng lead on Chrome.

00:02:35.580 --> 00:02:37.810
And by far the thing that I'm
most excited about is

00:02:37.810 --> 00:02:40.610
performance, and I'm really
excited about what we're doing

00:02:40.610 --> 00:02:44.090
to give you all back the main
thread and de-jank the

00:02:44.090 --> 00:02:47.070
browser, make the rendering
engine much, much, much faster

00:02:47.070 --> 00:02:49.501
and more responsive.

00:02:49.501 --> 00:02:51.060
MATT MCNULTY: Hi, I'm
Matt McNulty.

00:02:51.060 --> 00:02:52.910
I lead the polymer team.

00:02:52.910 --> 00:02:55.810
And I'm most excited about Web
Components as well. 'cause

00:02:55.810 --> 00:02:57.450
without them, we're dead.

00:02:57.450 --> 00:03:00.260
[LAUGHTER]

00:03:00.260 --> 00:03:00.965
JEFF CHANG: Hello.

00:03:00.965 --> 00:03:02.240
Wow.

00:03:02.240 --> 00:03:06.630
My name is Jeff Chang, and
I am a product manager on

00:03:06.630 --> 00:03:09.830
Chrome's UI features
and releases.

00:03:09.830 --> 00:03:13.010
And one of the things that I'm
most excited about personally

00:03:13.010 --> 00:03:17.440
is WebRTC, particularly
on mobile.

00:03:17.440 --> 00:03:20.390
I think the notion that you can
use your phone and fire up

00:03:20.390 --> 00:03:23.430
a browser and just go to a
website and immediately be

00:03:23.430 --> 00:03:25.450
able to video chat with
someone else, without

00:03:25.450 --> 00:03:27.760
installing any plug-ins
or what not, I

00:03:27.760 --> 00:03:30.880
think that's amazing.

00:03:30.880 --> 00:03:32.210
VANGELIS KOKKEVIS: And I'm
Vangelis Kokkevis.

00:03:32.210 --> 00:03:35.980
I'm the engineering lead for the
Chrome GPU team, for the

00:03:35.980 --> 00:03:39.480
folks who take care of rendering
performance in

00:03:39.480 --> 00:03:43.410
Chrome, including GPU
accelerating or rendering, and

00:03:43.410 --> 00:03:46.520
some of the 3D APIs that we
currently have in Chrome.

00:03:46.520 --> 00:03:49.320
And then I'll echo what
most people said here.

00:03:49.320 --> 00:03:53.170
Performance is really what
we're after here.

00:03:53.170 --> 00:03:54.950
IAN ELLISON-TAYLOR: Uh, we've
also got other members of the

00:03:54.950 --> 00:03:57.770
Chrome team and other parts
of Google sitting in the

00:03:57.770 --> 00:03:58.510
audience, as well.

00:03:58.510 --> 00:04:02.710
So hopefully, we can answer
questions in any sort of area

00:04:02.710 --> 00:04:03.830
that might be on your mind.

00:04:03.830 --> 00:04:06.290
We have a couple of folks,
I see, from Adobe.

00:04:06.290 --> 00:04:11.800
And Bruce, as well, from
Opera, who's on hand to

00:04:11.800 --> 00:04:14.110
answer, maybe, if there are
general questions about web

00:04:14.110 --> 00:04:16.930
standards, maybe get an
outside perspective.

00:04:16.930 --> 00:04:19.260
I'm more than happy to hand
over the mic to Bruce and

00:04:19.260 --> 00:04:21.540
others if people
have questions.

00:04:21.540 --> 00:04:23.750
So with that, let's
get started.

00:04:23.750 --> 00:04:24.730
First question.

00:04:24.730 --> 00:04:26.990
Who wants to go first?

00:04:26.990 --> 00:04:28.820
AUDIENCE: Hi, guys.

00:04:28.820 --> 00:04:32.910
I was wondering why Chrome was
not the default browser and

00:04:32.910 --> 00:04:35.990
web view in Android, and if
there is any light at the end

00:04:35.990 --> 00:04:38.080
of the tunnel with that.

00:04:38.080 --> 00:04:40.310
IAN ELLISON-TAYLOR: Who's most
qualified to answer that?

00:04:40.310 --> 00:04:40.900
Darin?

00:04:40.900 --> 00:04:43.500
DARIN FISHER: Well, I can just
say that that's something

00:04:43.500 --> 00:04:44.520
that's being worked on.

00:04:44.520 --> 00:04:46.980
You can see, if you go to
chromium.org, that there is an

00:04:46.980 --> 00:04:50.020
Android WebView project
that can be built from

00:04:50.020 --> 00:04:51.470
the Chromium sources.

00:04:51.470 --> 00:04:54.070
It's a project that of course
we're really interested in.

00:04:54.070 --> 00:04:58.610
I think Chrome is, our team is
all about making the web

00:04:58.610 --> 00:05:02.280
platform better, and we want to
make sure that that extends

00:05:02.280 --> 00:05:06.890
to the WebView that's available
on Android.

00:05:06.890 --> 00:05:09.620
IAN ELLISON-TAYLOR: Yeah, and I
think just as time goes on,

00:05:09.620 --> 00:05:14.530
the plan, we hope, is that
you'll see WebView and Chrome

00:05:14.530 --> 00:05:17.170
increasingly become the default
on newer devices.

00:05:17.170 --> 00:05:20.510
There's work to be
done, I think.

00:05:20.510 --> 00:05:21.500
AUDIENCE: Since there aren't
many people standing, I

00:05:21.500 --> 00:05:23.135
thought maybe I'd ask
one more question.

00:05:23.135 --> 00:05:25.070
IAN ELLISON-TAYLOR:
All right, sure.

00:05:25.070 --> 00:05:28.570
AUDIENCE: I kind of see the
future of web IDs as being in

00:05:28.570 --> 00:05:31.430
the user agents themselves,
and I think the Chrome

00:05:31.430 --> 00:05:37.960
DevTools kind of realize this
vision the most out of any

00:05:37.960 --> 00:05:39.880
sort of developer suite.

00:05:39.880 --> 00:05:42.140
But it's not really quite there
yet, when you compare it

00:05:42.140 --> 00:05:45.910
to things like Coda
and Sublime Text.

00:05:45.910 --> 00:05:48.250
But it seems to be pushing
further and further in that

00:05:48.250 --> 00:05:49.670
direction every year.

00:05:49.670 --> 00:05:52.600
And I was wondering what the
team's philosophy or intent

00:05:52.600 --> 00:05:54.930
was in this area.

00:05:54.930 --> 00:05:57.870
IAN ELLISON-TAYLOR: Lars, are
you closest to DevTools?

00:06:02.580 --> 00:06:03.450
ERIK KAY: I'll take a swing.

00:06:03.450 --> 00:06:05.970
So unfortunately, Pavel's
not here.

00:06:05.970 --> 00:06:09.980
But I mean, if anybody's been
following the progress of

00:06:09.980 --> 00:06:13.680
Chrome DevTools over the last
couple years, I think the

00:06:13.680 --> 00:06:17.142
changes they've made, the rate
of change is just amazing.

00:06:17.142 --> 00:06:21.060
You check back every few months,
and it's like some

00:06:21.060 --> 00:06:23.260
huge, awesome new feature
has landed.

00:06:23.260 --> 00:06:26.850
And so this time around, yeah,
they did land code editing,

00:06:26.850 --> 00:06:28.460
local code editing.

00:06:28.460 --> 00:06:30.020
And so that's a new feature.

00:06:30.020 --> 00:06:34.390
And since it's just added and
just showing up, I think it's

00:06:34.390 --> 00:06:35.090
early days.

00:06:35.090 --> 00:06:38.820
And so yes, they definitely want
to make it possible for

00:06:38.820 --> 00:06:41.210
people to do end-to-end
development and to take care

00:06:41.210 --> 00:06:45.770
of all the debugging needs, from
memory profiling to sort

00:06:45.770 --> 00:06:48.260
of timeline rendering
performance--

00:06:48.260 --> 00:06:51.420
I think end-to-end, they want
to do the whole thing.

00:06:51.420 --> 00:06:53.600
And the other bit of philosophy,
by the way, just

00:06:53.600 --> 00:06:58.150
from the team's perspective
is they don't--

00:06:58.150 --> 00:06:59.980
even though they want to build
it into the browser so it's

00:06:59.980 --> 00:07:02.330
there by default, they want to
make it possible for other

00:07:02.330 --> 00:07:03.770
tools to integrate as well.

00:07:03.770 --> 00:07:07.820
So everything that's done in
Chrome DevTools is done via an

00:07:07.820 --> 00:07:09.930
open protocol, a network
protocol, that

00:07:09.930 --> 00:07:11.120
anyone can plug in to.

00:07:11.120 --> 00:07:13.620
And you see that a number
of IDEs are doing this.

00:07:13.620 --> 00:07:19.060
From the JetBrains guys, to
Eclipse, to whatever, they all

00:07:19.060 --> 00:07:21.500
now talk to the Chrome
debugging tools.

00:07:21.500 --> 00:07:24.270
And basically, they can
use all the same

00:07:24.270 --> 00:07:25.870
features that we add.

00:07:25.870 --> 00:07:27.670
GREG SIMON: Certainly in the
short term, you're going to

00:07:27.670 --> 00:07:33.620
see the team focus more on tools
to help you find and fix

00:07:33.620 --> 00:07:38.020
jank and deal with memory, so.

00:07:38.020 --> 00:07:39.270
AUDIENCE: Thank you guys.

00:07:41.960 --> 00:07:44.980
AUDIENCE: Thank you for making
web faster with Chrome.

00:07:44.980 --> 00:07:48.390
And my question is back
to WebView in Android.

00:07:48.390 --> 00:07:51.460
Like once you make Chrome
default one, how [INAUDIBLE]

00:07:54.480 --> 00:07:57.950
have a rapid release
cycle for that?

00:07:57.950 --> 00:07:59.760
DARIN FISHER: Well, I will just
say that I think we are

00:07:59.760 --> 00:08:04.460
all very interested in getting
to a point where the WebView

00:08:04.460 --> 00:08:06.400
is something that could
be auto-updated.

00:08:06.400 --> 00:08:09.820
It's the kind of thing that
definitely, that we dream and

00:08:09.820 --> 00:08:12.010
imagine, wouldn't
that be nice?

00:08:12.010 --> 00:08:14.040
So it's definitely the kind of
thing, you know, coming from

00:08:14.040 --> 00:08:16.410
the Chrome team, this is
something that's very--

00:08:16.410 --> 00:08:17.920
this is how we look
at software.

00:08:17.920 --> 00:08:19.900
I mean, Chrome has this kind
of auto-update cycle.

00:08:19.900 --> 00:08:21.920
It would make sense for the
WebView to have that as well.

00:08:25.340 --> 00:08:26.015
AUDIENCE: Hey there.

00:08:26.015 --> 00:08:29.130
I'm a release manager for
Firefox, so just full

00:08:29.130 --> 00:08:29.910
transparency.

00:08:29.910 --> 00:08:33.179
I'm really curious to know
about your releases, your

00:08:33.179 --> 00:08:35.240
stability, and if there's
anything you're planning to do

00:08:35.240 --> 00:08:39.090
to open up crash data for public
viewing, as a way that

00:08:39.090 --> 00:08:42.010
we could maybe even know if
there's common crashes we're

00:08:42.010 --> 00:08:45.055
experiencing on the
web in general.

00:08:45.055 --> 00:08:47.300
It looks like you already
anonymize the data, so is that

00:08:47.300 --> 00:08:50.900
something that you might
open up at some point?

00:08:50.900 --> 00:08:53.870
And actually, a follow-up to
that is, I'm just curious if

00:08:53.870 --> 00:08:56.020
the recent dip in Chrome
adoption, is

00:08:56.020 --> 00:08:57.405
all related to stability?

00:08:57.405 --> 00:08:59.590
Are there any opinions
on that?

00:08:59.590 --> 00:09:01.430
JEFF CHANG: Hi, so first
of all, thank

00:09:01.430 --> 00:09:03.620
you to Firefox for--

00:09:03.620 --> 00:09:07.960
I think the fact that you guys
moved to a faster release

00:09:07.960 --> 00:09:11.160
cycle is great for the web and
great for users in general.

00:09:11.160 --> 00:09:13.950
On the crash data thing, I'll
definitely look into that.

00:09:13.950 --> 00:09:15.870
I'll talk with our release
managers about that.

00:09:15.870 --> 00:09:18.410
I actually had Adobe asking a
similar question recently, and

00:09:18.410 --> 00:09:21.210
so we'll see what we can do.

00:09:21.210 --> 00:09:24.650
And the last point, we actually
haven't seen any dip

00:09:24.650 --> 00:09:26.158
in user adoption, so.

00:09:29.030 --> 00:09:30.830
ERIK KAY: So one other
thing about that--

00:09:30.830 --> 00:09:34.341
it turns out the crash data,
that even if you anonymize it,

00:09:34.341 --> 00:09:36.990
it has personally identifiable
information in it.

00:09:36.990 --> 00:09:38.590
It'll be a URL.

00:09:38.590 --> 00:09:41.220
It'll be maybe form contents
of the page.

00:09:41.220 --> 00:09:43.140
It'll be that sort of thing.

00:09:43.140 --> 00:09:45.800
So actually, it turns out that
crash data is very sensitive.

00:09:45.800 --> 00:09:48.740
It's not the sort of thing that
we can sort of easily

00:09:48.740 --> 00:09:50.060
give out on that front.

00:09:50.060 --> 00:09:52.180
The other big problem
with crash data is

00:09:52.180 --> 00:09:54.520
that crashes are almost--

00:09:54.520 --> 00:09:58.180
well, a large percentage of
crashes are a pointer to

00:09:58.180 --> 00:10:00.060
potential security problems.

00:10:00.060 --> 00:10:02.750
If there's a crash, that
probably means that there's

00:10:02.750 --> 00:10:05.390
some exploit behind it, quite
often, I should say.

00:10:05.390 --> 00:10:08.420
And that's another reason why
until we've tracked down the

00:10:08.420 --> 00:10:11.900
source of that crash, we
probably can't make it public.

00:10:11.900 --> 00:10:15.470
Now it's possible that things
like crash rates and stability

00:10:15.470 --> 00:10:18.580
and changes on that front are
something that we could do, or

00:10:18.580 --> 00:10:21.830
maybe even pointing at
modules or individual

00:10:21.830 --> 00:10:23.480
areas of the product.

00:10:23.480 --> 00:10:25.710
But in terms of actually getting
the crash data out

00:10:25.710 --> 00:10:27.950
there and making it available,
I don't think that something

00:10:27.950 --> 00:10:29.650
we'll be able to do.

00:10:29.650 --> 00:10:31.930
GREG SIMON: Right, but like
pointing at SVG wouldn't

00:10:31.930 --> 00:10:34.251
actually tell you anything
useful, right?

00:10:34.251 --> 00:10:35.634
[LAUGHTER]

00:10:38.870 --> 00:10:41.850
AUDIENCE: I have a question
about Netflix.

00:10:41.850 --> 00:10:43.060
[LAUGHTER]

00:10:43.060 --> 00:10:45.810
AUDIENCE: On the Chromebook
Pixel, which I've been using

00:10:45.810 --> 00:10:50.160
for a while, the LTE version,
in the stable channel,

00:10:50.160 --> 00:10:52.810
everything works great.

00:10:52.810 --> 00:10:55.630
There are times I've noticed
that whenever the Pixel gets

00:10:55.630 --> 00:10:58.970
hot, it'll downgrade the
CPU, and the video

00:10:58.970 --> 00:11:00.940
quality will go down.

00:11:00.940 --> 00:11:04.500
But what I don't understand is
in the developer and beta

00:11:04.500 --> 00:11:09.310
version, the video quality is
really poor, regardless of the

00:11:09.310 --> 00:11:10.990
bandwidth connection,
or regardless of

00:11:10.990 --> 00:11:13.450
my settings on Netflix.

00:11:13.450 --> 00:11:16.500
I've asked around while I've
been here, and I haven't been

00:11:16.500 --> 00:11:19.390
able to find a clear-cut
answer of why.

00:11:19.390 --> 00:11:22.610
I know whenever I'm using Chrome
on my Windows computer,

00:11:22.610 --> 00:11:29.100
and I hit Shift-Control-Alt-S, I
have the ability to manually

00:11:29.100 --> 00:11:34.680
select the speed at which
it's playing the video.

00:11:34.680 --> 00:11:40.175
But I don't know a combination
on for Chrome OS.

00:11:42.940 --> 00:11:46.200
But my goal in my question is,
how do I get my video quality

00:11:46.200 --> 00:11:47.133
back up to HD?

00:11:47.133 --> 00:11:48.820
[LAUGHTER]

00:11:48.820 --> 00:11:51.190
DARIN FISHER: Well, I mean, I
don't know that we necessarily

00:11:51.190 --> 00:11:56.480
have experts here who know
exactly all the details there.

00:11:56.480 --> 00:11:57.740
So it's possible you're
just seeing a

00:11:57.740 --> 00:11:59.190
bug in the beta channel.

00:11:59.190 --> 00:12:09.560
It's also possible that you're
seeing the effects of the

00:12:09.560 --> 00:12:11.500
changes to the player.

00:12:11.500 --> 00:12:12.230
I'm not really sure.

00:12:12.230 --> 00:12:14.030
I think we'd have
to look into it.

00:12:14.030 --> 00:12:14.800
GREG SIMON: Yeah.

00:12:14.800 --> 00:12:16.430
The other thing is, you
know, we have these

00:12:16.430 --> 00:12:19.280
channels for a reason.

00:12:19.280 --> 00:12:23.725
When I first got my first
Chromebook, I was living on

00:12:23.725 --> 00:12:26.820
dev channel, and there were some
days where it just didn't

00:12:26.820 --> 00:12:28.030
quite work at all.

00:12:28.030 --> 00:12:31.640
So now I live on beta.

00:12:31.640 --> 00:12:37.940
We do use these channels
to do experiments.

00:12:37.940 --> 00:12:39.460
Well, at least the [INAUDIBLE]

00:12:39.460 --> 00:12:40.630
in dev.

00:12:40.630 --> 00:12:42.790
DARIN FISHER: I would really
encourage you to file a bug.

00:12:42.790 --> 00:12:45.060
Actually, don't assume that
just because you're seeing

00:12:45.060 --> 00:12:48.860
something that seems wrong in
beta channel, don't assume

00:12:48.860 --> 00:12:51.700
that everybody else
is seeing it too.

00:12:51.700 --> 00:12:53.750
So we really appreciate
bug reports.

00:12:53.750 --> 00:12:55.326
AUDIENCE: Yes, I had one--

00:12:55.326 --> 00:12:58.250
one was filed for me
earlier today.

00:12:58.250 --> 00:12:58.780
DARIN FISHER: Excellent.

00:12:58.780 --> 00:13:00.140
AUDIENCE: While I was
asking the question.

00:13:00.140 --> 00:13:02.230
[LAUGHTER]

00:13:02.230 --> 00:13:04.980
AUDIENCE: Thank you.

00:13:04.980 --> 00:13:06.530
AUDIENCE: Quick question
about Bluetooth.

00:13:06.530 --> 00:13:09.580
It's cool to see Chrome getting
Bluetooth support.

00:13:09.580 --> 00:13:12.150
Is it also going to get
Bluetooth LE support?

00:13:15.050 --> 00:13:16.760
ERIK KAY: I don't know
if anybody here is--

00:13:16.760 --> 00:13:19.450
we don't have any Chrome
OS hardware guys here.

00:13:19.450 --> 00:13:21.620
But I believe so.

00:13:21.620 --> 00:13:25.670
I mean, I think that that's a
fairly new emerging standard,

00:13:25.670 --> 00:13:28.820
and I know people who
are playing with it.

00:13:28.820 --> 00:13:32.280
I just don't know what any
timeline or any products in

00:13:32.280 --> 00:13:33.252
particular.

00:13:33.252 --> 00:13:35.020
DARIN FISHER: Mention
Chrome [INAUDIBLE].

00:13:35.020 --> 00:13:36.440
ERIK KAY: Oh yeah.

00:13:36.440 --> 00:13:39.420
The reason Darin handed the mic
to me is that we do have

00:13:39.420 --> 00:13:43.380
APIs, that we are part of Chrome
packaged apps, that

00:13:43.380 --> 00:13:46.620
allow you to write apps to talk
to Bluetooth devices.

00:13:46.620 --> 00:13:53.190
No LE support in there either,
but definitely, you can

00:13:53.190 --> 00:13:55.980
integrate with hardware
from your apps.

00:13:55.980 --> 00:13:56.140
AUDIENCE: Right.

00:13:56.140 --> 00:13:57.870
And those APIs are actually
pretty good.

00:13:57.870 --> 00:13:59.120
So thanks.

00:13:59.120 --> 00:14:00.370
ERIK KAY: Thanks.

00:14:02.090 --> 00:14:02.335
AUDIENCE: Hi there.

00:14:02.335 --> 00:14:05.530
I had a question about
release cycles.

00:14:05.530 --> 00:14:07.830
And I think that the rapid
release cycle that's been

00:14:07.830 --> 00:14:10.840
adopted initially by Chrome and
kind of carried on to some

00:14:10.840 --> 00:14:13.770
other browsers as well has
really accelerated the rate at

00:14:13.770 --> 00:14:16.700
which we're seeing some great
new features show up.

00:14:16.700 --> 00:14:19.530
The way we end up kind of
deciding what we feel safe

00:14:19.530 --> 00:14:22.480
targeting now, because there is
still somewhat of a tail of

00:14:22.480 --> 00:14:24.680
people-- how long
it is varies--

00:14:24.680 --> 00:14:28.600
who are on older versions of
assorted browsers, we kind of

00:14:28.600 --> 00:14:31.635
pick features that we feel are
in the majority of browsers,

00:14:31.635 --> 00:14:35.430
and then we look and see, OK,
how much can we fill in using

00:14:35.430 --> 00:14:36.240
JavaScript?

00:14:36.240 --> 00:14:39.390
And if we have to support
something really far back, how

00:14:39.390 --> 00:14:41.650
much can we fill in by drinking
ourselves into a

00:14:41.650 --> 00:14:44.900
stupor and pretending that
feature doesn't exist?

00:14:44.900 --> 00:14:47.180
Do you think that going forward,
we're still going to

00:14:47.180 --> 00:14:51.200
see the main way in which we get
new features for people on

00:14:51.200 --> 00:14:54.380
older browsers is through
JavaScript fill-in?

00:14:54.380 --> 00:14:57.560
Or do you think that there might
be some way we could

00:14:57.560 --> 00:15:01.300
find a way to approximate
features outside of

00:15:01.300 --> 00:15:03.450
JavaScript, and maybe something
natively supported

00:15:03.450 --> 00:15:04.700
in the browser?

00:15:07.900 --> 00:15:09.800
GREG SIMON: I mean, there are
some things that just can't be

00:15:09.800 --> 00:15:10.500
polyfilled, right?

00:15:10.500 --> 00:15:13.100
I mean, like we're doing a
project right now called the

00:15:13.100 --> 00:15:17.240
Navigation Controller, which
involves a script running when

00:15:17.240 --> 00:15:19.760
a URL request is made
in the browser.

00:15:19.760 --> 00:15:23.070
I'm not sure exactly how to
polyfill that, so for that,

00:15:23.070 --> 00:15:27.440
we're just going to actually
implement it, plant a flag.

00:15:27.440 --> 00:15:28.950
But yeah.

00:15:28.950 --> 00:15:31.890
ERIK KAY: I think if you took
a look at the work that the

00:15:31.890 --> 00:15:34.080
Polymer team has done--

00:15:34.080 --> 00:15:37.300
I used to be pretty skeptical
about polyfills.

00:15:37.300 --> 00:15:40.340
I told them they were crazy to
try to polyfill Shadow DOM,

00:15:40.340 --> 00:15:41.430
for example.

00:15:41.430 --> 00:15:44.750
And I think they even agreed
with me when they were

00:15:44.750 --> 00:15:45.770
trying to do it.

00:15:45.770 --> 00:15:49.440
But yet somehow, they actually
managed to do it, and to get

00:15:49.440 --> 00:15:51.030
pretty darn close.

00:15:51.030 --> 00:15:55.190
And so I think JavaScript
polyfills are actually an

00:15:55.190 --> 00:15:57.180
important way forward.

00:15:57.180 --> 00:15:59.880
I'll toss out a plug for another
polyfill approach,

00:15:59.880 --> 00:16:03.100
which can work with other
types of features.

00:16:03.100 --> 00:16:07.950
Which is at least within Chrome,
we can experiment and

00:16:07.950 --> 00:16:10.380
prototype new features
with Native Client.

00:16:10.380 --> 00:16:14.260
So for example, one of the
things that Darin has pointed

00:16:14.260 --> 00:16:19.210
out repeatedly is if in the
past, we had Native Client, we

00:16:19.210 --> 00:16:24.080
might have been able to, say,
prototype Web SQL without

00:16:24.080 --> 00:16:25.410
having to add it
to the browser.

00:16:25.410 --> 00:16:27.720
And we would have learned quite
a bit about what people

00:16:27.720 --> 00:16:30.510
thought about it, and probably
wouldn't have needed to have

00:16:30.510 --> 00:16:32.980
implemented it to begin
with at that point.

00:16:32.980 --> 00:16:36.230
So I think that when you have a
big pile of native code and

00:16:36.230 --> 00:16:39.280
you want to use that as a way to
add features, we don't have

00:16:39.280 --> 00:16:41.620
to worry about rewriting it from
scratch in JavaScript.

00:16:41.620 --> 00:16:46.605
We can still do polyfills
that way as well.

00:16:46.605 --> 00:16:48.930
DARIN FISHER: Yeah, I'll just
say that general issue

00:16:48.930 --> 00:16:51.670
definitely encourages us to
focus on identifying the best

00:16:51.670 --> 00:16:53.510
primitives, the simplest
primitives that we can add to

00:16:53.510 --> 00:16:56.800
the platform, that give us the
most value-add that allows us

00:16:56.800 --> 00:16:59.680
to make the polyfills
work well.

00:16:59.680 --> 00:17:01.490
For example, there's
a lot of discussion

00:17:01.490 --> 00:17:02.790
about pointer events.

00:17:02.790 --> 00:17:04.730
And we have a polyfill for
pointer events, but it's

00:17:04.730 --> 00:17:06.150
missing one little piece,
which is the

00:17:06.150 --> 00:17:07.740
touch-action CSS property.

00:17:07.740 --> 00:17:11.465
So instead of biting off the
whole pointer events spec up

00:17:11.465 --> 00:17:13.240
front, we're focusing
just down on the

00:17:13.240 --> 00:17:15.380
touch-action CSS property.

00:17:15.380 --> 00:17:17.060
Because that's the thing that we
actually have to put in the

00:17:17.060 --> 00:17:19.489
engine in order to make the
polyfill actually have you

00:17:19.489 --> 00:17:21.140
full fidelity.

00:17:21.140 --> 00:17:23.700
And once we do that, it turns
out separating that

00:17:23.700 --> 00:17:26.695
touch-action CSS property is
actually generally useful.

00:17:26.695 --> 00:17:28.569
It's useful outside of the
context of pointer events.

00:17:28.569 --> 00:17:32.780
It's useful as a way to-- well,
by the way, if you add a

00:17:32.780 --> 00:17:34.940
touch event handler to your
page, you generally put the

00:17:34.940 --> 00:17:36.480
browser in a slow path.

00:17:36.480 --> 00:17:39.920
But the touch-action CSS
property lets you give the

00:17:39.920 --> 00:17:42.280
browser a little more
information about this.

00:17:42.280 --> 00:17:44.710
And so it's a useful property,
all by itself.

00:17:44.710 --> 00:17:48.040
And so that whole idea of
focusing on primitives really,

00:17:48.040 --> 00:17:49.680
really works out nicely,
I think.

00:17:49.680 --> 00:17:53.030
It's worked out for things like
MDV, where we decided to

00:17:53.030 --> 00:17:56.910
do mutation observers instead
of the full thing up front.

00:17:56.910 --> 00:18:00.490
We added object.observe in a
similar fashion to help make

00:18:00.490 --> 00:18:04.050
MDV work better, the
model-driven views, which is

00:18:04.050 --> 00:18:07.295
leveraged by a polymer
quite extensively.

00:18:07.295 --> 00:18:09.540
Don't know if you have anything
to add, Matt.

00:18:09.540 --> 00:18:11.450
MATT MCNULTY: I was going to
bring up object.observe.

00:18:11.450 --> 00:18:13.530
DARIN FISHER: Oh, I stole
your thunder.

00:18:13.530 --> 00:18:16.620
AUDIENCE: Great, thank
you very much.

00:18:16.620 --> 00:18:18.390
AUDIENCE: Hi, my question
is about scrolling.

00:18:18.390 --> 00:18:20.560
And using Chrome on different
platforms--

00:18:20.560 --> 00:18:22.790
like Mac, Linux, Windows,
and Android--

00:18:22.790 --> 00:18:25.500
I notice there's kind of a big
gap in scrolling performance.

00:18:25.500 --> 00:18:26.650
It's not always consistent.

00:18:26.650 --> 00:18:29.300
It's not always as smooth as
it could be or perhaps as

00:18:29.300 --> 00:18:29.977
other browsers are.

00:18:29.977 --> 00:18:33.090
So I was curious, like how much
of that is under control

00:18:33.090 --> 00:18:36.160
by the Chrome browser, and how
much is kind of determined by

00:18:36.160 --> 00:18:36.780
the platform?

00:18:36.780 --> 00:18:39.850
And maybe what areas are being
looked at, in terms of

00:18:39.850 --> 00:18:42.080
scrolling performance.

00:18:42.080 --> 00:18:44.190
VANGELIS KOKKEVIS: So a lot
of it is indeed us.

00:18:44.190 --> 00:18:48.350
We are in this strange state
where we have a number of

00:18:48.350 --> 00:18:51.430
architectures are evolving over
time, but they haven't

00:18:51.430 --> 00:18:53.910
been fully pushed out in all
the platforms we have.

00:18:53.910 --> 00:18:56.030
So for example, on Android,
we're sort of on the

00:18:56.030 --> 00:18:58.290
cutting-edge scrolling
architecture, where we want to

00:18:58.290 --> 00:19:00.460
be, which is heavily
multi-threaded.

00:19:00.460 --> 00:19:03.630
And we can do a lot of work
outside the main thread.

00:19:03.630 --> 00:19:06.650
And then if you go backwards,
Chrome OS is in sort of the

00:19:06.650 --> 00:19:08.640
next step, and then Windows.

00:19:08.640 --> 00:19:11.750
So we have threaded scrolling
on Windows, Chrome OS, and

00:19:11.750 --> 00:19:13.820
Android with a slightly
different version.

00:19:13.820 --> 00:19:15.950
And Mac is in a slightly
older model.

00:19:15.950 --> 00:19:18.570
So our goal throughout the rest
of this year is really to

00:19:18.570 --> 00:19:22.000
bring all the platforms at the
same point, and address

00:19:22.000 --> 00:19:25.990
scrolling performance problems
once and for all.

00:19:25.990 --> 00:19:27.900
GREG SIMON: If you have
questions about scrolling from

00:19:27.900 --> 00:19:31.100
your own code, I strongly
encourage you to go see Nat

00:19:31.100 --> 00:19:35.450
Duca and Tom Wiltzius' talk
from yesterday, called

00:19:35.450 --> 00:19:36.740
"Jank--" What's it called?

00:19:36.740 --> 00:19:37.800
It's got jank in the title.

00:19:37.800 --> 00:19:39.630
DARIN FISHER: Go to
jankfree.org.

00:19:39.630 --> 00:19:40.300
GREG SIMON: Yeah.

00:19:40.300 --> 00:19:40.680
Yeah.

00:19:40.680 --> 00:19:41.820
It's really, really good.

00:19:41.820 --> 00:19:43.410
It'll explain exactly
how people

00:19:43.410 --> 00:19:44.660
fall into these pitfalls.

00:19:49.780 --> 00:19:51.430
AUDIENCE: My question
is about extensions

00:19:51.430 --> 00:19:55.030
and their save data.

00:19:55.030 --> 00:19:57.170
At the keynote, we heard about
the possibility of Android

00:19:57.170 --> 00:20:00.660
being able to save the data
from device to device.

00:20:00.660 --> 00:20:03.750
But with Chrome, whenever I sign
into a new machine, it

00:20:03.750 --> 00:20:05.290
downloads all my extensions,
which is great.

00:20:05.290 --> 00:20:07.530
But all my preferences
don't come over.

00:20:07.530 --> 00:20:11.220
Is there something that would
allow kind of the same way

00:20:11.220 --> 00:20:14.040
that Android does that, so that
those preferences would

00:20:14.040 --> 00:20:15.710
go into Chrome and then
travel with me?

00:20:15.710 --> 00:20:18.840
Or is that sort of on the
extension developer's end?

00:20:18.840 --> 00:20:21.208
ERIK KAY: So we were
there first.

00:20:21.208 --> 00:20:23.870
[LAUGHTER]

00:20:23.870 --> 00:20:27.910
ERIK KAY: No, seriously, a year
ago, we added an API to

00:20:27.910 --> 00:20:30.770
Extensions called Chrome
Storage Sync.

00:20:30.770 --> 00:20:32.360
And it's really simple.

00:20:32.360 --> 00:20:36.060
It's key value, very similar to
local storage, but async.

00:20:36.060 --> 00:20:39.790
And it uses the Chrome
sync engine.

00:20:39.790 --> 00:20:43.060
So it's a great way to store
settings and preferences, and

00:20:43.060 --> 00:20:46.370
we encourage all extensions
and apps to use it.

00:20:46.370 --> 00:20:50.210
Within Packaged we, also have
another sync mechanism called

00:20:50.210 --> 00:20:51.670
sync file system.

00:20:51.670 --> 00:20:55.100
Sync file system allows you to
use things like documents and

00:20:55.100 --> 00:20:57.390
media files and that sort of
thing, and to easily do

00:20:57.390 --> 00:20:59.740
file-based synchronization
across machines.

00:20:59.740 --> 00:21:02.460
And it uses your Drive
account to do that.

00:21:02.460 --> 00:21:05.440
And so with apps, not only do
you bring your settings and

00:21:05.440 --> 00:21:07.690
your state with you, but you can
also bring your documents

00:21:07.690 --> 00:21:10.260
with you wherever you go, so
that those will be synced

00:21:10.260 --> 00:21:12.870
offline automatically, without
you as the app developer

00:21:12.870 --> 00:21:15.890
having to build any server
infrastructure at all.

00:21:15.890 --> 00:21:18.610
So the tools are all there.

00:21:18.610 --> 00:21:21.480
But because they weren't there
from day one, what you'll find

00:21:21.480 --> 00:21:24.340
is that there are some older
extensions, or perhaps

00:21:24.340 --> 00:21:26.800
extension authors who just
aren't aware of the feature,

00:21:26.800 --> 00:21:27.930
who haven't done it.

00:21:27.930 --> 00:21:32.170
And so definitely just bug your
favorite extension author

00:21:32.170 --> 00:21:33.390
to add the feature.

00:21:33.390 --> 00:21:34.774
It's really easy.

00:21:34.774 --> 00:21:36.024
AUDIENCE: OK, thank you.

00:21:39.420 --> 00:21:41.440
AUDIENCE: Hi.

00:21:41.440 --> 00:21:44.650
I'd like to know if you have
any plans on releasing a

00:21:44.650 --> 00:21:48.350
64-bit version for Mac.

00:21:48.350 --> 00:21:53.370
Just because of Java,
and you know.

00:21:53.370 --> 00:21:55.035
JEFF CHANG: Yep, we're
working on it.

00:21:55.035 --> 00:21:58.360
[LAUGHTER]

00:21:58.360 --> 00:22:02.750
ERIK KAY: Yeah, It's hard to
get all the things right,

00:22:02.750 --> 00:22:04.770
particularly with plug-ins.

00:22:04.770 --> 00:22:07.440
I mean I think on
Mac, it's more

00:22:07.440 --> 00:22:09.170
straightforward than others.

00:22:09.170 --> 00:22:12.250
But on Windows, for those of you
who would ask the obvious

00:22:12.250 --> 00:22:15.220
following question, it turns
out it's a much harder

00:22:15.220 --> 00:22:18.000
problem, because most
plug-ins are 32-bit.

00:22:18.000 --> 00:22:20.910
And so you have to do this
32-to-64-bit bridge.

00:22:20.910 --> 00:22:23.960
And anyway, there's a lot of
other fun, interesting things.

00:22:23.960 --> 00:22:25.670
JEFF CHANG: Yeah, I mean, I'm
not just giving lip service.

00:22:25.670 --> 00:22:26.390
We are actually working on it.

00:22:26.390 --> 00:22:28.980
I exchanged an email with
Adobe in the last week.

00:22:28.980 --> 00:22:31.340
We're working on it for
Flash, as well.

00:22:31.340 --> 00:22:33.460
And so it's definitely actively
being worked on by

00:22:33.460 --> 00:22:35.174
engineers on our team.

00:22:35.174 --> 00:22:36.030
AUDIENCE: OK, thank you.

00:22:36.030 --> 00:22:37.120
DARIN FISHER: And there's a
lot of excitement on the

00:22:37.120 --> 00:22:38.640
Chrome team for 64-bit.

00:22:38.640 --> 00:22:40.200
It allows us to improve
security.

00:22:40.200 --> 00:22:41.860
it allows us to improve
performance in some

00:22:41.860 --> 00:22:43.190
respects, for sure.

00:22:43.190 --> 00:22:45.710
Also, though, there's the risk
of hurting performance because

00:22:45.710 --> 00:22:46.980
we end up using more memory.

00:22:46.980 --> 00:22:49.760
Things are just, they end up
taking up more space because

00:22:49.760 --> 00:22:54.960
they're 64-bit pointers
and so on.

00:22:54.960 --> 00:22:56.210
AUDIENCE: Thank you.

00:23:00.010 --> 00:23:03.660
AUDIENCE: Yes, I used
to use Netscape.

00:23:03.660 --> 00:23:04.960
Anybody remember that?

00:23:04.960 --> 00:23:06.370
[LAUGHTER]

00:23:06.370 --> 00:23:09.900
AUDIENCE: And it became a kind
of slow and bloated over time,

00:23:09.900 --> 00:23:14.420
and I switched to Phoenix, which
became Firebird, which

00:23:14.420 --> 00:23:16.280
became Firefox.

00:23:16.280 --> 00:23:21.960
And that became kind of overly
large and bloated over time,

00:23:21.960 --> 00:23:24.850
and so I switched to Chrome.

00:23:24.850 --> 00:23:27.770
And over the past few months,
I've noticed, especially with

00:23:27.770 --> 00:23:30.040
lots of tabs--

00:23:30.040 --> 00:23:32.610
I keep dozens of them open--

00:23:32.610 --> 00:23:36.140
it's been getting slower
and slower.

00:23:36.140 --> 00:23:39.670
And I'm wondering what
steps that you'll

00:23:39.670 --> 00:23:42.890
take in general to--

00:23:42.890 --> 00:23:46.410
as computers become faster,
there's a tendency to optimize

00:23:46.410 --> 00:23:49.560
for the current, whatever
the newest one is.

00:23:49.560 --> 00:23:53.500
What steps do you take to make
sure it doesn't become slower

00:23:53.500 --> 00:23:57.060
and slower and more bloated
on existing computers?

00:24:04.980 --> 00:24:06.380
LARS BAK: I'll go first.

00:24:06.380 --> 00:24:08.284
I used to work on V8 team.

00:24:08.284 --> 00:24:13.240
And I think we did a good job in
making performance better,

00:24:13.240 --> 00:24:15.160
and that translates to
old machines, too.

00:24:15.160 --> 00:24:17.970
If you had an old machine, it
will run faster with a better

00:24:17.970 --> 00:24:19.280
[INAUDIBLE] engine.

00:24:19.280 --> 00:24:23.280
But at the same time, we spend
a lot of time profiling

00:24:23.280 --> 00:24:26.130
applications and reducing memory
footprint by tuning the

00:24:26.130 --> 00:24:30.230
garbage collector so the total
footprint for the app would

00:24:30.230 --> 00:24:33.100
stay minimal.

00:24:33.100 --> 00:24:36.370
Again, we are not the only ones
at fault here, right?

00:24:36.370 --> 00:24:39.300
Because the application
developers, they also put in

00:24:39.300 --> 00:24:42.210
code in the browser that
allocates objects.

00:24:42.210 --> 00:24:45.720
And of course, when they get
more modern machines, they

00:24:45.720 --> 00:24:47.670
write more code and
it penalizes the

00:24:47.670 --> 00:24:49.480
people using the browser.

00:24:49.480 --> 00:24:53.290
So certainly, we are trying all
the time to minimize the

00:24:53.290 --> 00:24:55.080
amount of memory
used by a tab.

00:24:55.080 --> 00:24:58.080
But in some cases,
it's very hard.

00:24:58.080 --> 00:25:00.670
Because when you have
[INAUDIBLE], it's used by the

00:25:00.670 --> 00:25:02.925
application as well.

00:25:02.925 --> 00:25:07.390
GREG SIMON: Yeah, I mean,
there is more than one

00:25:07.390 --> 00:25:08.780
contributing factor
to this, right?

00:25:08.780 --> 00:25:15.010
I mean, there's just-- there is
content you load that just

00:25:15.010 --> 00:25:16.720
runs in the background,
and you don't know

00:25:16.720 --> 00:25:18.880
it's running, et cetera.

00:25:18.880 --> 00:25:22.780
And we aren't prioritizing
the processes, et cetera.

00:25:22.780 --> 00:25:26.670
There are many, many
micro-benchmarks that we

00:25:26.670 --> 00:25:29.120
monitor with every build
of Chrome, et cetera.

00:25:29.120 --> 00:25:34.680
But sometimes, some piece of
content comes down that

00:25:34.680 --> 00:25:36.010
tickles it in a certain
way that we

00:25:36.010 --> 00:25:37.230
weren't actually measuring.

00:25:37.230 --> 00:25:40.280
And so there are certainly areas
that we can improve, and

00:25:40.280 --> 00:25:43.290
we are working on improving
right now in the area of

00:25:43.290 --> 00:25:47.410
shared workers and threads
and things like that.

00:25:47.410 --> 00:25:50.110
ERIK KAY: So the old story we
say, and some of you may have

00:25:50.110 --> 00:25:51.870
heard us tell this
story before--

00:25:51.870 --> 00:25:55.470
I thought Darin was going to go
with this, so I'll step on

00:25:55.470 --> 00:25:58.130
that one for him.

00:25:58.130 --> 00:26:02.250
When we started Chrome, when
Darin and Ben first got the

00:26:02.250 --> 00:26:04.460
first version of Chrome up and
running-- and when I say first

00:26:04.460 --> 00:26:08.060
version of Chrome, I mean like
no UI, just rendering a web

00:26:08.060 --> 00:26:09.660
page really literally.

00:26:09.660 --> 00:26:10.980
Come on, it had grey
squares for tabs.

00:26:10.980 --> 00:26:13.000
ERIK KAY: OK, grey
squares for tabs.

00:26:13.000 --> 00:26:16.960
So basically, people said,
well, you know what?

00:26:16.960 --> 00:26:21.800
From today on, this won't
get any faster.

00:26:21.800 --> 00:26:24.080
Because from now on,
we're just going

00:26:24.080 --> 00:26:25.600
to be adding features.

00:26:25.600 --> 00:26:28.450
And as you say, features,
it's bloat, right?

00:26:28.450 --> 00:26:31.030
It just can't help but
slow things down.

00:26:31.030 --> 00:26:32.980
And so how do we prevent that?

00:26:32.980 --> 00:26:36.500
How do we keep it as fast
as it feels right now?

00:26:36.500 --> 00:26:39.420
And the idea was that, well,
let's create a performance

00:26:39.420 --> 00:26:43.120
benchmarks now, before
we add any features.

00:26:43.120 --> 00:26:44.850
And let's not regress that.

00:26:44.850 --> 00:26:47.320
Let's promise ourselves that
we will not regress those

00:26:47.320 --> 00:26:48.410
benchmarks.

00:26:48.410 --> 00:26:51.040
And so start-up performance
was a big one.

00:26:51.040 --> 00:26:53.660
We wanted that to be
instantaneous.

00:26:53.660 --> 00:26:57.430
We have a page cycler benchmark
from the early days

00:26:57.430 --> 00:27:00.370
that also, we were very
religious about.

00:27:00.370 --> 00:27:05.500
And so when every check-in,
effectively every check-in, we

00:27:05.500 --> 00:27:06.950
run those tests.

00:27:06.950 --> 00:27:08.990
And when there's a very
small regression,

00:27:08.990 --> 00:27:11.750
we revert that change.

00:27:11.750 --> 00:27:15.380
So even something as small
as 10 milliseconds, 20

00:27:15.380 --> 00:27:18.240
milliseconds, that's grounds
for giving reverted.

00:27:18.240 --> 00:27:21.730
Because those small regressions
add up over time.

00:27:21.730 --> 00:27:24.100
Now every now and again, you
would look at something, and a

00:27:24.100 --> 00:27:26.730
feature landed, and it caused
a regression, and you could

00:27:26.730 --> 00:27:29.520
totally understand why it caused
a regression, but it

00:27:29.520 --> 00:27:31.020
was for a really good reason.

00:27:31.020 --> 00:27:34.870
And so the good news is that
by measuring it so

00:27:34.870 --> 00:27:37.150
consistently, you could make
informed trade-offs.

00:27:37.150 --> 00:27:38.800
There are times where you're
willing to take a small

00:27:38.800 --> 00:27:41.150
performance hit to land
a particular feature.

00:27:41.150 --> 00:27:44.480
But because we're religious
about measuring it all along

00:27:44.480 --> 00:27:48.220
the way, we could make those
as informed decisions.

00:27:48.220 --> 00:27:50.310
I think the last bit that I just
want to reinforce from

00:27:50.310 --> 00:27:52.390
what these guys are saying is
that in some ways, we're a

00:27:52.390 --> 00:27:56.030
victim of all the cool
performance and features we've

00:27:56.030 --> 00:27:56.560
been adding.

00:27:56.560 --> 00:28:01.090
That by making JavaScript
amazingly faster, and by

00:28:01.090 --> 00:28:06.680
adding WebGL and whatever, that
people are now writing

00:28:06.680 --> 00:28:07.960
more complex web pages.

00:28:07.960 --> 00:28:09.720
That even the most basic things
that you were doing

00:28:09.720 --> 00:28:12.800
before, people are doing
cooler stuff with it.

00:28:12.800 --> 00:28:15.550
And so those 20 tabs that you
have open today are actually

00:28:15.550 --> 00:28:18.790
doing a lot more than they were
just a few years ago.

00:28:18.790 --> 00:28:20.320
And so that's part of it.

00:28:20.320 --> 00:28:22.790
But I want to be clear, though,

00:28:22.790 --> 00:28:25.780
that we're not perfect.

00:28:25.780 --> 00:28:26.930
We do have regressions.

00:28:26.930 --> 00:28:28.000
We do have things that happen.

00:28:28.000 --> 00:28:30.610
And one of the things that we're
concerned about over

00:28:30.610 --> 00:28:33.050
time is that there are things
that just happen because

00:28:33.050 --> 00:28:36.170
people's profiles get big,
because their history ages,

00:28:36.170 --> 00:28:38.130
because they install
more stuff.

00:28:38.130 --> 00:28:40.400
And those are things that are
hard to test up front.

00:28:40.400 --> 00:28:42.065
They're hard to test in the lab,
and hard to reproduce.

00:28:42.065 --> 00:28:45.910
And so to catch those,
we tried to do field

00:28:45.910 --> 00:28:48.640
measurements, and get aggregate
statistics, and look

00:28:48.640 --> 00:28:50.840
for regressions in the
field on that front.

00:28:50.840 --> 00:28:53.340
But some of these things, even
still, are hard to track down.

00:28:53.340 --> 00:28:56.980
And so if you've got specific
things or specific pages or

00:28:56.980 --> 00:29:00.360
whatever that you think are
just noticeably worse, or

00:29:00.360 --> 00:29:04.400
scenarios that are noticeably
worse, please file a bug.

00:29:04.400 --> 00:29:07.240
We take performance
very seriously.

00:29:07.240 --> 00:29:09.275
It's really our number-one
concern.

00:29:09.275 --> 00:29:11.420
IAN ELLISON-TAYLOR: Yeah, I just
add, just briefly on top

00:29:11.420 --> 00:29:12.930
of that, there's definitely
those two

00:29:12.930 --> 00:29:13.920
halves to the equation.

00:29:13.920 --> 00:29:15.760
There's the sites that we're
loading that have changed over

00:29:15.760 --> 00:29:19.260
time and gotten bigger, and so
that's where things like SPDY,

00:29:19.260 --> 00:29:23.330
WebP, and other things, we hope
will speed things up a

00:29:23.330 --> 00:29:27.220
little bit and get some of
that performance back.

00:29:27.220 --> 00:29:30.570
And also, those usage cases
have changed over time.

00:29:30.570 --> 00:29:34.480
And so we've been recently
looking at rebalancing some of

00:29:34.480 --> 00:29:37.080
the code that sort of
better reflects

00:29:37.080 --> 00:29:38.260
most typical use cases.

00:29:38.260 --> 00:29:42.110
And I think page load time got
about 5%, something around 5%

00:29:42.110 --> 00:29:46.530
faster just recently, because
we went and re-architected a

00:29:46.530 --> 00:29:48.240
few things to recognize
these scenarios.

00:29:48.240 --> 00:29:53.090
So there's still a lot more that
we can do, and those sort

00:29:53.090 --> 00:29:53.760
of heuristics.

00:29:53.760 --> 00:29:57.490
And also trying to get more
code out of the way at

00:29:57.490 --> 00:30:00.410
start-up, and get rid of some of
that bloat that's crept in.

00:30:00.410 --> 00:30:04.930
But there is also that-- using
WebP and other similar

00:30:04.930 --> 00:30:06.320
techniques to reduce
the load so you can

00:30:06.320 --> 00:30:07.150
have more tabs open.

00:30:07.150 --> 00:30:10.980
So hopefully, we'll continue to
see improvements over the

00:30:10.980 --> 00:30:11.966
months to come.

00:30:11.966 --> 00:30:17.550
GREG SIMON: Yeah, I mean, there
are so many performance

00:30:17.550 --> 00:30:20.890
metrics that we measure now that
it became too much for a

00:30:20.890 --> 00:30:22.330
human to actually read.

00:30:22.330 --> 00:30:27.150
So earlier in the year, we
borrowed some signal

00:30:27.150 --> 00:30:32.050
processing code from Google
Search, I guess.

00:30:32.050 --> 00:30:33.330
Sure.

00:30:33.330 --> 00:30:36.620
To actually go through and watch
it all, and then to send

00:30:36.620 --> 00:30:37.960
us alerts when it happens.

00:30:37.960 --> 00:30:39.230
Because it just became
too much.

00:30:39.230 --> 00:30:41.560
We really care about it a lot.

00:30:41.560 --> 00:30:43.470
IAN ELLISON-TAYLOR: We very
nearly had a screenshot for

00:30:43.470 --> 00:30:45.790
the keynote, and it got cut at
the last minute, that showed

00:30:45.790 --> 00:30:48.540
one of the performance
dashboards that was 100

00:30:48.540 --> 00:30:50.820
different charts that monitored
all these different

00:30:50.820 --> 00:30:53.290
things, and some of the
alerts that went on.

00:30:53.290 --> 00:30:53.850
It's gone.

00:30:53.850 --> 00:30:56.300
It's very, very complicated to
look at these performance

00:30:56.300 --> 00:30:57.770
scenarios, but we'll
keep working on it.

00:30:57.770 --> 00:30:59.360
VANGELIS KOKKEVIS: And I also
think it's worth mentioning

00:30:59.360 --> 00:31:01.630
that the way that technology
is moving in general, it

00:31:01.630 --> 00:31:05.110
forces us to go and rethink some
of the core architecture

00:31:05.110 --> 00:31:06.570
principles that we've had.

00:31:06.570 --> 00:31:11.660
Because now instead of having
the 8, 12, 30-core machines,

00:31:11.660 --> 00:31:14.220
we're dealing with mobile
devices with a lot more

00:31:14.220 --> 00:31:15.120
constraints.

00:31:15.120 --> 00:31:17.340
So a lot of the architecture
decisions we are making are to

00:31:17.340 --> 00:31:19.600
address lower-bar devices.

00:31:19.600 --> 00:31:22.580
And so as a side effect of that,
we're going to get older

00:31:22.580 --> 00:31:24.926
PCs to become faster as well.

00:31:24.926 --> 00:31:27.210
ERIK KAY: By the way, in case
it isn't obvious from the

00:31:27.210 --> 00:31:29.930
number of people who wanted to
chime in on this one, we care

00:31:29.930 --> 00:31:31.170
a lot about performance.

00:31:31.170 --> 00:31:32.540
IAN ELLISON-TAYLOR: Performance
and security.

00:31:32.540 --> 00:31:34.390
But we should probably--

00:31:34.390 --> 00:31:35.150
I'm sorry.

00:31:35.150 --> 00:31:36.180
DARIN FISHER: I was going
to pile on with

00:31:36.180 --> 00:31:38.750
what Erik just said.

00:31:38.750 --> 00:31:38.900
IAN ELLISON-TAYLOR: OK.

00:31:38.900 --> 00:31:39.780
I was going to try
and move us on.

00:31:39.780 --> 00:31:41.310
I'm watching that clock
count down.

00:31:41.310 --> 00:31:42.810
OK, let's go to the next one.

00:31:42.810 --> 00:31:43.260
Thanks.

00:31:43.260 --> 00:31:44.370
AUDIENCE: Hopefully this
is a quick one.

00:31:44.370 --> 00:31:45.820
My question's about Flash.

00:31:45.820 --> 00:31:48.260
Chrome is kind of unique in
that Flash is bundled and

00:31:48.260 --> 00:31:49.720
updated through the browser.

00:31:49.720 --> 00:31:51.940
I was curious how that
partnership with Adobe works,

00:31:51.940 --> 00:31:54.140
and also if you see that as
continuing long-term or if

00:31:54.140 --> 00:31:58.050
Flash might be phased
out in the future.

00:31:58.050 --> 00:32:00.950
JEFF CHANG: So I can't comment
on the business partnership,

00:32:00.950 --> 00:32:04.280
but we definitely enjoy working
with Adobe to one, as

00:32:04.280 --> 00:32:06.530
you say, build in Flash into
Chrome, so that you get it

00:32:06.530 --> 00:32:07.140
right off the bat.

00:32:07.140 --> 00:32:08.750
You never have to worry
about installing it.

00:32:08.750 --> 00:32:11.585
And two, the kind of bigger
reason we did that was so that

00:32:11.585 --> 00:32:14.375
we could work directly with them
to get Flash inside of

00:32:14.375 --> 00:32:15.170
Chrome Sandbox.

00:32:15.170 --> 00:32:17.970
And so we're very happy that on
Windows and Mac and Chrome

00:32:17.970 --> 00:32:20.760
OS, Flash is actually running
inside of Chrome Sandbox.

00:32:20.760 --> 00:32:24.600
And so when you see news about
all these exploits, and people

00:32:24.600 --> 00:32:27.830
getting pwned through Flash,
we've been happy that Chrome

00:32:27.830 --> 00:32:29.910
users are protected even more
through that Sandbox.

00:32:29.910 --> 00:32:33.090
And so because we take security
so seriously, yes, we

00:32:33.090 --> 00:32:36.460
will definitely keep
doing that.

00:32:36.460 --> 00:32:38.710
DARIN FISHER: Yeah, and just to
put that into perspective,

00:32:38.710 --> 00:32:41.730
I mean, the amount of security
bugs that we

00:32:41.730 --> 00:32:44.980
encounter in Blink--

00:32:44.980 --> 00:32:46.450
it's ongoing.

00:32:46.450 --> 00:32:49.460
The Sandbox is really the best
mitigation we have, as well as

00:32:49.460 --> 00:32:54.170
our rapid auto-update,
to keep users safe.

00:32:54.170 --> 00:32:55.110
Code is complicated.

00:32:55.110 --> 00:32:57.830
It's easy to write bugs
that can be exploited.

00:32:57.830 --> 00:32:59.670
And so we need belts
and suspenders.

00:32:59.670 --> 00:33:01.010
We need ways to protect users.

00:33:01.010 --> 00:33:05.280
And so getting Flash not just
in the Sandbox, but onto our

00:33:05.280 --> 00:33:09.160
auto-update train means that we
can help provide users with

00:33:09.160 --> 00:33:12.240
the best experience, and a
very secure experience.

00:33:12.240 --> 00:33:14.810
JEFF CHANG: Yeah, I forgot to
mention the auto-update part.

00:33:14.810 --> 00:33:17.480
So every time a new Flash
version comes out, you get it

00:33:17.480 --> 00:33:18.120
in Chrome automatically.

00:33:18.120 --> 00:33:21.525
You don't have to
worry about it.

00:33:21.525 --> 00:33:23.120
AUDIENCE: Go to this side.

00:33:23.120 --> 00:33:24.650
AUDIENCE: Hi, everybody.

00:33:24.650 --> 00:33:26.810
One of the problems I have is
when I have a lot of tabs

00:33:26.810 --> 00:33:29.460
open, the individual tab items
themselves get very, very

00:33:29.460 --> 00:33:31.320
small and kind of hard
to work with.

00:33:31.320 --> 00:33:33.940
it used to be possible to have
vertical tabs in Chrome, and I

00:33:33.940 --> 00:33:36.030
was wondering, what are your
thoughts on vertical tabs, and

00:33:36.030 --> 00:33:38.180
will we ever see them again?

00:33:38.180 --> 00:33:38.860
IAN ELLISON-TAYLOR: Jeff.

00:33:38.860 --> 00:33:41.260
[LAUGHTER]

00:33:41.260 --> 00:33:42.390
DARIN FISHER: We can
all look at Jeff--

00:33:42.390 --> 00:33:43.100
IAN ELLISON-TAYLOR: Yeah,
come on, Jeff.

00:33:43.100 --> 00:33:44.550
DARIN FISHER: He was PM
for Chrome front ends.

00:33:44.550 --> 00:33:46.030
IAN ELLISON-TAYLOR: He's backing
away from the stage.

00:33:46.030 --> 00:33:47.120
JEFF CHANG: Yeah, yeah, OK.

00:33:47.120 --> 00:33:49.060
And now I have another data
point, another request.

00:33:49.060 --> 00:33:51.710
So I'll keep it in mind.

00:33:51.710 --> 00:33:53.700
DARIN FISHER: It's been
one of these long--

00:33:53.700 --> 00:33:55.040
things we've always talked
about, how to

00:33:55.040 --> 00:33:56.950
manage more tabs better.

00:33:56.950 --> 00:33:59.560
It's a very challenging topic.

00:33:59.560 --> 00:34:01.300
ERIK KAY: We do have a wacky
idea, if you're interested in

00:34:01.300 --> 00:34:01.830
hearing that.

00:34:01.830 --> 00:34:06.120
A wacky idea is to provide an
extension API to just hide

00:34:06.120 --> 00:34:08.550
tabs, to make them so they're
not even visible.

00:34:08.550 --> 00:34:11.510
And then to give extension
authors the ability to create

00:34:11.510 --> 00:34:13.820
their own UI surface for them.

00:34:13.820 --> 00:34:15.830
I don't know if we'll actually
get around to doing something

00:34:15.830 --> 00:34:18.472
like that, but it was
one wacky idea.

00:34:18.472 --> 00:34:20.340
AUDIENCE: Thanks.

00:34:20.340 --> 00:34:23.630
AUDIENCE: My question's
regarding extensions for

00:34:23.630 --> 00:34:25.980
Chrome, and is there any
plan to bring that

00:34:25.980 --> 00:34:28.719
to Chrome for Android?

00:34:28.719 --> 00:34:30.659
ERIK KAY: It's something
we've explored.

00:34:30.659 --> 00:34:32.710
It's hard on a lot of front.

00:34:32.710 --> 00:34:39.440
First off, as Vangelis pointed
out earlier, Android phones in

00:34:39.440 --> 00:34:40.889
particular, I should
say, are very

00:34:40.889 --> 00:34:42.780
constrained devices, right?

00:34:42.780 --> 00:34:45.210
And so right now, we're
trying to make Chrome

00:34:45.210 --> 00:34:46.360
as small as we can.

00:34:46.360 --> 00:34:49.159
And so we're stripping as much
out as we can and still

00:34:49.159 --> 00:34:50.060
keeping it functional.

00:34:50.060 --> 00:34:54.030
And so we're not quite ready to
say that it's time to add

00:34:54.030 --> 00:34:56.370
more features back
in quite yet.

00:34:56.370 --> 00:34:59.180
But we're experimenting
with it internally.

00:34:59.180 --> 00:35:02.410
And I think the other big
concern to think about with

00:35:02.410 --> 00:35:07.670
extensions on mobile is mobile
is very different on a few

00:35:07.670 --> 00:35:10.230
fronts that don't really
work all that well with

00:35:10.230 --> 00:35:11.230
the model we've got.

00:35:11.230 --> 00:35:13.550
So first off, there's different
UI surfaces.

00:35:13.550 --> 00:35:17.740
There's a much smaller amount
of screen real estate.

00:35:17.740 --> 00:35:23.630
Secondly, in these mobile
environments, things are

00:35:23.630 --> 00:35:25.860
killed off all the time.

00:35:25.860 --> 00:35:27.130
The browser doesn't
keep running.

00:35:27.130 --> 00:35:29.490
When you switch to another
app, it's gone.

00:35:29.490 --> 00:35:32.000
And one of the nice things about
extensions were things

00:35:32.000 --> 00:35:33.850
that keep running and they
keep doing their thing.

00:35:33.850 --> 00:35:35.940
So I think that there
are some challenges.

00:35:35.940 --> 00:35:38.470
That even when we want to do it,
the experiments we've done

00:35:38.470 --> 00:35:39.750
are just trying to figure
out how to make

00:35:39.750 --> 00:35:40.900
it even make sense.

00:35:40.900 --> 00:35:44.110
So even if we do it, it's likely
to be something that's

00:35:44.110 --> 00:35:46.870
not 100% compatible with what
we're doing on the desktop.

00:35:46.870 --> 00:35:48.485
That would be a different
beast altogether.

00:35:54.007 --> 00:35:55.450
AUDIENCE: Hello.

00:35:55.450 --> 00:35:59.590
I was curious about how you've
been using all the anonymous

00:35:59.590 --> 00:36:03.270
user usage data you've
been getting from us.

00:36:03.270 --> 00:36:06.560
How to make the product better,
the Chrome browser?

00:36:06.560 --> 00:36:08.460
JEFF CHANG: Yeah, so you're
talking about, when you

00:36:08.460 --> 00:36:12.020
install Chrome, there's an
option to opt in to anonymous

00:36:12.020 --> 00:36:13.030
usage statistics.

00:36:13.030 --> 00:36:15.920
And that's like button clicks
and things, and crash reports,

00:36:15.920 --> 00:36:17.670
and stuff like that when
you're using features.

00:36:17.670 --> 00:36:19.980
And yeah, we look at that
stuff all the time.

00:36:19.980 --> 00:36:24.080
And recently, we've actually
improved upon that system.

00:36:24.080 --> 00:36:25.160
I think we blogged about it.

00:36:25.160 --> 00:36:27.580
But we have, basically, an
experimental system by which

00:36:27.580 --> 00:36:29.770
we can push out different
versions of features to

00:36:29.770 --> 00:36:30.715
different buckets of users.

00:36:30.715 --> 00:36:32.690
So we do live A/B experiments
through

00:36:32.690 --> 00:36:34.110
our auto-update system.

00:36:34.110 --> 00:36:36.362
And then we can say, oh--

00:36:36.362 --> 00:36:38.100
a trivial example, you know--

00:36:38.100 --> 00:36:40.060
this many people clicked on
version A of the button versus

00:36:40.060 --> 00:36:41.700
version B of the button
versus version C of

00:36:41.700 --> 00:36:42.520
the button or whatever.

00:36:42.520 --> 00:36:45.500
And we can compare metrics like
stability and feature

00:36:45.500 --> 00:36:48.900
usage and retention of Chrome
users and stuff like that.

00:36:48.900 --> 00:36:51.200
And then we can decide which
one we want to go with.

00:36:51.200 --> 00:36:53.800
Of course, it doesn't make all
of our decisions for us.

00:36:53.800 --> 00:36:56.590
We take the combination of the
data and our intuition and

00:36:56.590 --> 00:36:59.100
stuff like that to decide
what to do.

00:36:59.100 --> 00:37:02.131
But yeah, we definitely
look at that.

00:37:02.131 --> 00:37:03.820
The other thing I should mention
is we only put in

00:37:03.820 --> 00:37:05.110
stats for things--

00:37:05.110 --> 00:37:07.050
we have to decide what to
measure, and then put in the

00:37:07.050 --> 00:37:08.820
stats for it, and then
decide what to do.

00:37:08.820 --> 00:37:10.480
So it's not like we're just
collecting random stats

00:37:10.480 --> 00:37:11.550
everywhere.

00:37:11.550 --> 00:37:14.040
GREG SIMON: We can also
use it to do-- sorry.

00:37:14.040 --> 00:37:16.590
We can also use it to do really
short experiments.

00:37:16.590 --> 00:37:19.785
One of my favorite examples of
this was one of the folks on

00:37:19.785 --> 00:37:25.520
the team couldn't figure out, by
reading MSDN, what the max

00:37:25.520 --> 00:37:27.640
file path length was.

00:37:27.640 --> 00:37:31.560
He got at least two, maybe
three different answers.

00:37:31.560 --> 00:37:34.090
But this is something that you
actually want to get right,

00:37:34.090 --> 00:37:36.485
because it can lead to
strings that are out

00:37:36.485 --> 00:37:37.190
of bounds, et cetera.

00:37:37.190 --> 00:37:41.660
So he checked in an experiment
for like 24 hours and got the

00:37:41.660 --> 00:37:43.370
decisive answer for it.

00:37:43.370 --> 00:37:45.160
And then took the
actual code out.

00:37:45.160 --> 00:37:47.310
All done in the open.

00:37:47.310 --> 00:37:49.070
DARIN FISHER: I mean, there's
just been countless examples

00:37:49.070 --> 00:37:51.950
of tuning Chrome by
using this system.

00:37:51.950 --> 00:37:54.600
I mean, one of the classic
examples was figuring out how

00:37:54.600 --> 00:37:58.310
many parallel TCP connections
to open per origin.

00:37:58.310 --> 00:38:02.340
I mean, today, it's six, but it
used to be that the typical

00:38:02.340 --> 00:38:03.000
number was four.

00:38:03.000 --> 00:38:04.120
This spec says two.

00:38:04.120 --> 00:38:05.720
I mean, what do you
choose, right?

00:38:05.720 --> 00:38:10.570
And so by making adjustments and
measuring and looking at

00:38:10.570 --> 00:38:13.750
the statistical data we get
back, we can make informed

00:38:13.750 --> 00:38:16.020
decisions, and that'll make
a faster product.

00:38:16.020 --> 00:38:19.020
The number that I think Ian
quoted, on 5% page load

00:38:19.020 --> 00:38:21.440
performance, that kind of stuff
gets validated using

00:38:21.440 --> 00:38:24.790
that anonymous usage data.

00:38:24.790 --> 00:38:26.700
ERIK KAY: I think crash reports
are probably the most

00:38:26.700 --> 00:38:27.790
useful, far and away.

00:38:27.790 --> 00:38:30.860
I mean, what we use it for is
a quick stability check for

00:38:30.860 --> 00:38:33.470
us, especially with Canary
and dev channel.

00:38:33.470 --> 00:38:37.450
What we can see is release over
release, we have a stat

00:38:37.450 --> 00:38:39.980
which we look at as crash
per million page views.

00:38:39.980 --> 00:38:41.220
Crashes per million
page views.

00:38:41.220 --> 00:38:43.040
And we can look at it by
different process type and

00:38:43.040 --> 00:38:43.750
that sort of thing.

00:38:43.750 --> 00:38:46.710
And so looking at that over
time, you can see when one

00:38:46.710 --> 00:38:50.900
release is dramatically less
stable than another, and then

00:38:50.900 --> 00:38:51.920
have somebody drill in.

00:38:51.920 --> 00:38:52.970
So it sets off alarms.

00:38:52.970 --> 00:38:55.830
And so we have as a metric, we
talked about wanting to drive

00:38:55.830 --> 00:38:57.180
performance numbers down.

00:38:57.180 --> 00:38:59.090
We also--

00:38:59.090 --> 00:39:02.250
there's a fourth S that Linus
didn't mention in the keynote,

00:39:02.250 --> 00:39:04.840
which is stability, as well,
that we take very seriously.

00:39:04.840 --> 00:39:07.530
And we're always trying to drive
that crash per million

00:39:07.530 --> 00:39:08.980
number down for all the

00:39:08.980 --> 00:39:10.570
processes, for all the platforms.

00:39:10.570 --> 00:39:14.200
And so that's another incredibly
useful bit of data.

00:39:14.200 --> 00:39:16.160
IAN ELLISON-TAYLOR: I see that
clock counting down ominously.

00:39:16.160 --> 00:39:17.740
I think we've probably got time
for one more question,

00:39:17.740 --> 00:39:19.900
and then we'll take questions
outside, if

00:39:19.900 --> 00:39:21.970
anyone can hang around.

00:39:21.970 --> 00:39:24.500
AUDIENCE: Chrome OS Sync
FileSystem seems to be backed

00:39:24.500 --> 00:39:25.720
only by Google Drive
right now.

00:39:25.720 --> 00:39:27.540
Are there any plans to make that
pluggable for something

00:39:27.540 --> 00:39:30.330
like Dropbox to be the data
store, economical cloud data

00:39:30.330 --> 00:39:32.720
store for our Chrome
OS device?

00:39:32.720 --> 00:39:34.170
ERIK KAY: We'd love to do it.

00:39:34.170 --> 00:39:37.300
We're starting off with one
use case first, and really

00:39:37.300 --> 00:39:38.680
trying to make sure
we nail it.

00:39:38.680 --> 00:39:43.120
But yes, we'd love to make it
so that's more pluggable.

00:39:43.120 --> 00:39:45.410
IAN ELLISON-TAYLOR: All right,
I see the last 10 seconds.

00:39:45.410 --> 00:39:47.270
I'll take this as
an opportunity

00:39:47.270 --> 00:39:48.200
just to thank everybody.

00:39:48.200 --> 00:39:50.670
First, for coming to I/O, coming
to this session, and

00:39:50.670 --> 00:39:52.320
asking such fantastic
questions.

00:39:52.320 --> 00:39:53.650
I really appreciate it.

00:39:53.650 --> 00:39:56.030
So give yourselves a hand
for great questions.

00:39:56.030 --> 00:40:01.570
[APPLAUSE]

00:40:01.570 --> 00:40:03.230
IAN ELLISON-TAYLOR: And we'll
maybe see some of you outside

00:40:03.230 --> 00:40:04.870
if we didn't get
to answer them.

00:40:04.870 --> 00:40:06.120
All right.

