WEBVTT
Kind: captions
Language: en

00:00:00.380 --> 00:00:03.090
FRED SAUER: I need a testing
strategy of App Engine

00:00:03.090 --> 00:00:06.280
applications, as the SDK doesn't
implement all the

00:00:06.280 --> 00:00:08.140
services exactly the
way that the

00:00:08.140 --> 00:00:10.070
production environment does.

00:00:10.070 --> 00:00:13.010
Do you have any insight about
how to test your applications,

00:00:13.010 --> 00:00:15.420
taking into account some
of those differences?

00:00:15.420 --> 00:00:15.940
MANDY WAITE: Yes.

00:00:15.940 --> 00:00:17.580
So I guess testing--

00:00:17.580 --> 00:00:19.300
there's a lot of ways
to do testing.

00:00:19.300 --> 00:00:20.660
There's a lot of levels
you can do testing.

00:00:20.660 --> 00:00:22.570
You can do unit testing,
functional testing,

00:00:22.570 --> 00:00:24.590
integration testing.

00:00:24.590 --> 00:00:27.960
Development testing is pretty
important of App Engine.

00:00:27.960 --> 00:00:30.740
You really probably don't want
to deploy an untested version

00:00:30.740 --> 00:00:33.100
or application, replace the
current version that's working

00:00:33.100 --> 00:00:35.880
really well with one that's not
been tested particularly

00:00:35.880 --> 00:00:37.170
extensively.

00:00:37.170 --> 00:00:40.960
So, as always when testing in
the development environment,

00:00:40.960 --> 00:00:42.990
it's probably important to mock
services that you can't

00:00:42.990 --> 00:00:45.075
actually access directly.

00:00:45.075 --> 00:00:45.750
FRED SAUER: Sure.

00:00:45.750 --> 00:00:48.142
MANDY WAITE: So, in this case,
if there are any shortfalls in

00:00:48.142 --> 00:00:51.111
what the development server
offers over what App Engine

00:00:51.111 --> 00:00:53.880
offers itself, then you would
probably want to mock that.

00:00:53.880 --> 00:00:58.770
So that will be the same with
accessing another API that you

00:00:58.770 --> 00:01:01.240
don't want to access from
development, you may just mock

00:01:01.240 --> 00:01:03.420
that service up, so you can
actually get reasonable

00:01:03.420 --> 00:01:07.530
results from making calls
to that service.

00:01:07.530 --> 00:01:10.800
You can probably do the same
with App Engine as well, any

00:01:10.800 --> 00:01:12.510
App Engine services
that are missing.

00:01:12.510 --> 00:01:14.185
Beyond that, really,
there's lots of

00:01:14.185 --> 00:01:16.370
different options for testing.

00:01:16.370 --> 00:01:19.350
Once you've deployed the
application, you may-- as Fred

00:01:19.350 --> 00:01:21.980
has already mentioned, you may
deploy it to a different app

00:01:21.980 --> 00:01:25.800
version, and then you may
use Traffic Splitting.

00:01:25.800 --> 00:01:27.900
App Engine has this feature
called Traffic Splitting that

00:01:27.900 --> 00:01:31.240
allows you to incrementally
direct traffic towards new

00:01:31.240 --> 00:01:32.112
versions of your app.

00:01:32.112 --> 00:01:35.040
So you can actually test the
thing in isolation to a

00:01:35.040 --> 00:01:37.620
degree, only pushing a small
amount of traffic to it

00:01:37.620 --> 00:01:40.932
initially, and then slowly
migrating all of the traffic

00:01:40.932 --> 00:01:44.250
over as you get more confident
in the application's

00:01:44.250 --> 00:01:45.690
performance.

00:01:45.690 --> 00:01:48.850
And, again, also that other
kinds of testing, load testing

00:01:48.850 --> 00:01:51.905
and suchlike, you don't really
want to do load testing on a

00:01:51.905 --> 00:01:53.500
production application.

00:01:53.500 --> 00:01:55.930
You would probably need to build
a different version of

00:01:55.930 --> 00:01:58.740
your application before that
and do your testing on that

00:01:58.740 --> 00:02:02.450
particular version of
your application.

00:02:02.450 --> 00:02:04.785
You're also likely to need data
as well, so you need to

00:02:04.785 --> 00:02:08.100
probably have a representative
set of sample data, you can

00:02:08.100 --> 00:02:09.949
deploy your application.

00:02:09.949 --> 00:02:12.596
If you have an empty datastore
it's not really going to give

00:02:12.596 --> 00:02:15.225
you the exact same kind of
results that your production

00:02:15.225 --> 00:02:18.610
application would do, so you
probably want to define a set

00:02:18.610 --> 00:02:22.555
of data that you can actually
populate into your application

00:02:22.555 --> 00:02:24.464
initially to do the
testing mode.

00:02:24.464 --> 00:02:29.580
FRED SAUER: Yep, those
are very good points.

00:02:29.580 --> 00:02:32.410
One thing that bites people a
lot of times when they're

00:02:32.410 --> 00:02:35.840
testing in a different
application ID, or even on

00:02:35.840 --> 00:02:41.500
their production application
before they launch, is people

00:02:41.500 --> 00:02:45.590
will not use representative
workloads.

00:02:45.590 --> 00:02:49.160
So instead of creating say 1,000
unique accounts, which

00:02:49.160 --> 00:02:52.570
is sometimes tricky to do,
they'll say, OK we'll take 10

00:02:52.570 --> 00:02:56.160
accounts, and we'll have each
one log in 100 times all

00:02:56.160 --> 00:02:57.470
running concurrently.

00:02:57.470 --> 00:03:00.730
And those access patterns
actually change the way the

00:03:00.730 --> 00:03:04.640
data is utilized, and you don't
get very representative

00:03:04.640 --> 00:03:06.100
results there.

00:03:06.100 --> 00:03:09.500
So you already talked about
making sure that you have some

00:03:09.500 --> 00:03:10.760
good sample data there.

00:03:10.760 --> 00:03:13.910
Making sure you have good
representative requests and

00:03:13.910 --> 00:03:15.350
users logging in.

00:03:15.350 --> 00:03:17.770
It's kind of just
as important.

00:03:17.770 --> 00:03:21.320
In any case, as much as you
can take the production

00:03:21.320 --> 00:03:24.990
environment that you expect and
replicate it, the closer

00:03:24.990 --> 00:03:26.085
you get, the closer
your results are

00:03:26.085 --> 00:03:27.360
going to match, obviously.

00:03:27.360 --> 00:03:29.740
MANDY WAITE: So you can use
tools [INAUDIBLE], like

00:03:29.740 --> 00:03:31.015
Selenium and JMeter,
those kind of

00:03:31.015 --> 00:03:32.810
things for load testing.

00:03:32.810 --> 00:03:35.150
The same kind of tools you would
use for any kind of web

00:03:35.150 --> 00:03:37.720
application to generate tests.

00:03:37.720 --> 00:03:39.118
And they generate representative
workloads,

00:03:39.118 --> 00:03:41.070
believe me.

00:03:41.070 --> 00:03:42.550
FRED SAUER: They do.

00:03:42.550 --> 00:03:45.460
Just watch out that you're not
testing from one machine that

00:03:45.460 --> 00:03:47.520
just doesn't have a big enough
network connection.

00:03:47.520 --> 00:03:48.520
MANDY WAITE: [INAUDIBLE]

00:03:48.520 --> 00:03:50.043
Don't talk to me about
client side.

00:03:50.043 --> 00:03:52.470
Because if your client can't
handle the load, then you're

00:03:52.470 --> 00:03:53.960
never going to actually load
up the server the way you

00:03:53.960 --> 00:03:54.760
think you are.

00:03:54.760 --> 00:03:56.960
So you need to make sure you can
actually generate the load

00:03:56.960 --> 00:03:59.380
correctly, you're not
[INAUDIBLE] over a lack of

00:03:59.380 --> 00:04:00.810
client resources as well
when you're testing.

00:04:00.810 --> 00:04:03.360
FRED SAUER: I guess you can
always get a few instances on

00:04:03.360 --> 00:04:04.300
Compute Engine.

00:04:04.300 --> 00:04:07.310
There's some capacity there.

00:04:07.310 --> 00:04:08.730
Nice big pipe of data.

