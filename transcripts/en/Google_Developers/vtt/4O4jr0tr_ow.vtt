WEBVTT
Kind: captions
Language: en

00:00:00.520 --> 00:00:04.000
JOHN RYAN: So I actually
really am excited to be here.

00:00:04.000 --> 00:00:05.550
I'm here because
last year, our team

00:00:05.550 --> 00:00:09.290
ported our entire code
base on a new app to Dart.

00:00:09.290 --> 00:00:11.490
And I'll be talking a
little bit about that.

00:00:11.490 --> 00:00:13.670
And it's been a really
positive experience.

00:00:13.670 --> 00:00:15.490
And reflecting back
on that experience,

00:00:15.490 --> 00:00:18.970
and looking back
over the last year,

00:00:18.970 --> 00:00:20.980
we're very convinced that
Dart's a great choice

00:00:20.980 --> 00:00:23.200
for teams, and for
groups of teams,

00:00:23.200 --> 00:00:25.310
building complicated web apps.

00:00:25.310 --> 00:00:27.840
And we also believe
in Dart's mission

00:00:27.840 --> 00:00:32.340
to make the web an even better
place to build those web apps.

00:00:32.340 --> 00:00:36.170
So the title of this talk
is Switching to Dart.

00:00:36.170 --> 00:00:36.700
I'm John.

00:00:36.700 --> 00:00:40.990
I like to climb rocks when
I'm not writing software.

00:00:40.990 --> 00:00:44.260
This is in Snow
Canyon, Saint George.

00:00:44.260 --> 00:00:48.370
So this is a timeline
of our project.

00:00:48.370 --> 00:00:51.370
We started prototyping
things a year ago.

00:00:51.370 --> 00:00:53.850
We formed a product team in May.

00:00:53.850 --> 00:00:55.660
We switched to
Dart last October,

00:00:55.660 --> 00:00:59.710
after using a bunch of
tools in JavaScript.

00:00:59.710 --> 00:01:01.284
And we shipped early this year.

00:01:01.284 --> 00:01:02.450
We're very happy about that.

00:01:02.450 --> 00:01:03.950
We're getting a lot
of good feedback

00:01:03.950 --> 00:01:08.100
from internal and external
customers already.

00:01:08.100 --> 00:01:11.562
And immediately after switching,
we have a lot of advantages.

00:01:11.562 --> 00:01:13.770
We were just getting a lot
of development advantages.

00:01:13.770 --> 00:01:17.200
So getting new engineers
on the team really sped up.

00:01:17.200 --> 00:01:20.300
It only took about one or two
days for the three engineers

00:01:20.300 --> 00:01:22.310
we had to start shipping
code for our app.

00:01:22.310 --> 00:01:24.881
And that was really great.

00:01:24.881 --> 00:01:27.130
We think the developer
experience is much, much better

00:01:27.130 --> 00:01:29.280
than what we were doing before.

00:01:29.280 --> 00:01:31.500
We focus a lot
less on our tools.

00:01:31.500 --> 00:01:33.450
A lot less.

00:01:33.450 --> 00:01:37.170
And we find code a lot
easier to share among teams,

00:01:37.170 --> 00:01:42.070
using Pub and all the features
that are available there.

00:01:42.070 --> 00:01:47.230
Does anybody know what this
chart is, by any chance?

00:01:47.230 --> 00:01:48.264
AUDIENCE: [INAUDIBLE].

00:01:48.264 --> 00:01:48.930
JOHN RYAN: Yeah.

00:01:48.930 --> 00:01:49.480
Yeah.

00:01:49.480 --> 00:01:49.979
Yeah.

00:01:49.979 --> 00:01:50.940
It's for climbing.

00:01:50.940 --> 00:01:53.210
So it's the Yosemite
decimal system.

00:01:53.210 --> 00:01:57.130
And all these climbs are
graded on their hardest move.

00:01:57.130 --> 00:01:59.630
And some of these
climbs are multi-pitch.

00:01:59.630 --> 00:02:01.810
So you might have one
section that's considered

00:02:01.810 --> 00:02:05.889
5.9 and one that's 5.11.

00:02:05.889 --> 00:02:07.180
And this is just North America.

00:02:07.180 --> 00:02:10.820
So if you're from Aarhus,
it would be different.

00:02:10.820 --> 00:02:12.960
But the reason I'm showing
you this is, I think,

00:02:12.960 --> 00:02:14.751
software and climbing
have a lot in common.

00:02:14.751 --> 00:02:18.210
I think they're fundamentally
about problem-solving.

00:02:18.210 --> 00:02:20.930
In fact, certain climbs
are called problems.

00:02:20.930 --> 00:02:23.150
They're called molding problems.

00:02:23.150 --> 00:02:25.440
And when you're
solving problems,

00:02:25.440 --> 00:02:27.740
and you're seeing some
improvement in what you're

00:02:27.740 --> 00:02:30.430
working on, or in what
your team is working on,

00:02:30.430 --> 00:02:32.090
it's going to be a lot more fun.

00:02:32.090 --> 00:02:34.210
And we think that
this starts a cycle.

00:02:34.210 --> 00:02:35.924
And the more fun you
have, the more you

00:02:35.924 --> 00:02:37.090
want to solve more problems.

00:02:37.090 --> 00:02:39.180
And if you expand
this to the team,

00:02:39.180 --> 00:02:42.380
I think it makes for a
good work environment.

00:02:42.380 --> 00:02:44.960
And I think using good tools
is like using good climbing

00:02:44.960 --> 00:02:47.170
technique.

00:02:47.170 --> 00:02:50.480
And that's what we
want for our engineers.

00:02:50.480 --> 00:02:52.680
So I'll talk about who we are.

00:02:52.680 --> 00:02:55.410
I'll talk briefly about why
we evaluated Dart and switched

00:02:55.410 --> 00:02:57.105
to Dart.

00:02:57.105 --> 00:02:58.480
Very briefly, I'll
talk about how

00:02:58.480 --> 00:03:00.190
we did it, and some
of the tools that

00:03:00.190 --> 00:03:03.190
are available to make
that process easier,

00:03:03.190 --> 00:03:07.100
and a little bit about
what we are doing today,

00:03:07.100 --> 00:03:10.610
and how we're using
the tools today.

00:03:10.610 --> 00:03:11.830
We make Wdesk.

00:03:11.830 --> 00:03:16.810
And Wdesk is a complex
business reporting application.

00:03:16.810 --> 00:03:20.320
And what that means
is a lot of companies

00:03:20.320 --> 00:03:23.690
use our application for
documents, presentations,

00:03:23.690 --> 00:03:25.960
charts, mobile apps.

00:03:25.960 --> 00:03:29.760
And they use our full suite
of apps for this specific use

00:03:29.760 --> 00:03:30.260
case.

00:03:30.260 --> 00:03:34.412
And we're able to customize our
software for them, because we

00:03:34.412 --> 00:03:36.370
deploy to the web, and
we get a lot of feedback

00:03:36.370 --> 00:03:37.630
from them really quickly.

00:03:37.630 --> 00:03:40.840
We can deliver features
multiple times a day,

00:03:40.840 --> 00:03:44.600
and fix bugs, and get
feedback really quickly.

00:03:44.600 --> 00:03:49.550
And we have over 65% of the
Fortune 500 using our product.

00:03:49.550 --> 00:03:51.810
And that's really exciting.

00:03:51.810 --> 00:03:54.030
And this is what
we attribute it to.

00:03:54.030 --> 00:03:56.020
I think it's this
build-measure-learn loop.

00:03:56.020 --> 00:03:59.740
It's our way of getting
feedback from customers.

00:03:59.740 --> 00:04:03.760
And I think the Dart project
also wants this, too.

00:04:03.760 --> 00:04:06.670
And so if we can give a lot of
feedback to the Dart project

00:04:06.670 --> 00:04:09.100
while we're here,
I think they'll

00:04:09.100 --> 00:04:13.920
be able to take that back and
build better stuff for us.

00:04:13.920 --> 00:04:16.730
And that's what we do.

00:04:16.730 --> 00:04:19.720
And that's what we're about.

00:04:19.720 --> 00:04:23.240
So why did we switch to Dart?

00:04:23.240 --> 00:04:27.220
Well, we primarily
build large-scale apps.

00:04:27.220 --> 00:04:29.100
We were using JavaScript tools.

00:04:29.100 --> 00:04:32.700
And we found them very difficult
to compose together, and get

00:04:32.700 --> 00:04:35.270
working together
in a nice package.

00:04:35.270 --> 00:04:38.280
And when we evaluated Dart, it
was a complete solution for us.

00:04:38.280 --> 00:04:42.070
So I mentioned we build
large-scale applications.

00:04:42.070 --> 00:04:46.335
We build Wdesk in ActionScript,
starting five years ago.

00:04:46.335 --> 00:04:47.710
And it gave us a
lot of benefits,

00:04:47.710 --> 00:04:48.940
and a really scalable language.

00:04:48.940 --> 00:04:49.990
It has type information.

00:04:49.990 --> 00:04:52.480
It's got build tools
in place for you.

00:04:52.480 --> 00:04:55.220
When you're navigating code,
that works really well.

00:04:55.220 --> 00:04:58.770
And Jetbrains has done a great
job over the last five years

00:04:58.770 --> 00:05:03.350
working on ActionScript, and
getting that support in place.

00:05:03.350 --> 00:05:06.760
And the libraries and
frameworks are there, too.

00:05:06.760 --> 00:05:10.000
And so this is probably
sounding familiar to you.

00:05:10.000 --> 00:05:11.670
Language tools and libraries.

00:05:11.670 --> 00:05:13.990
And it just allowed
us to build Wdesk.

00:05:13.990 --> 00:05:17.380
And I don't think we would have
built the same product had we

00:05:17.380 --> 00:05:20.940
immediately gone to HTML5.

00:05:20.940 --> 00:05:23.420
But there's some problems
with our current application.

00:05:23.420 --> 00:05:25.320
It's over 1 million
lines of code.

00:05:25.320 --> 00:05:28.160
And it takes two to eight
minutes to compile it.

00:05:28.160 --> 00:05:30.220
And that's not a great
developer experience.

00:05:30.220 --> 00:05:33.230
So for our new products,
starting last year,

00:05:33.230 --> 00:05:35.330
and before that, we
were targeting the web,

00:05:35.330 --> 00:05:39.680
and trying it make new apps
that solved this problem.

00:05:39.680 --> 00:05:43.510
But the problem with
JavaScript is decision-making.

00:05:43.510 --> 00:05:45.360
We had to decide
whether we were using

00:05:45.360 --> 00:05:50.064
internal external modules,
AD, or common JS, what kind

00:05:50.064 --> 00:05:51.730
of package manager
we were going to use.

00:05:51.730 --> 00:05:56.550
Each of these arrows is
where we changed our mind.

00:05:56.550 --> 00:06:00.260
Bundler, you have to have
Bundler to produce a compiled

00:06:00.260 --> 00:06:01.420
JavaScript output.

00:06:01.420 --> 00:06:03.420
And you have to have a
build and test framework.

00:06:03.420 --> 00:06:06.470
And you have to glue all
these pieces together and hope

00:06:06.470 --> 00:06:08.000
that something good comes out.

00:06:08.000 --> 00:06:12.325
But after all that
work, we evaluated Dart

00:06:12.325 --> 00:06:14.070
and found it to be
a complete solution.

00:06:14.070 --> 00:06:16.570
So you have the great
developer experience.

00:06:16.570 --> 00:06:18.070
And when we were
evaluating, we knew

00:06:18.070 --> 00:06:20.840
we could work with existing
JavaScript libraries.

00:06:20.840 --> 00:06:23.060
And I'll talk a little
bit more about that.

00:06:23.060 --> 00:06:25.030
And there's a good
testing story around Dart.

00:06:25.030 --> 00:06:27.321
And it's getting even better
with the new test package.

00:06:27.321 --> 00:06:29.339
So we're really
excited about this.

00:06:29.339 --> 00:06:31.630
And when we evaluated this,
this was really compelling.

00:06:34.200 --> 00:06:35.850
So how did we switch?

00:06:35.850 --> 00:06:38.170
Well, that's why we switched.

00:06:38.170 --> 00:06:40.720
But how did we switch?

00:06:40.720 --> 00:06:43.115
So I'll talk quickly about
our strategy for switching.

00:06:43.115 --> 00:06:44.820
I'll talk about
React components.

00:06:44.820 --> 00:06:47.315
There's been a lot
of interest in React

00:06:47.315 --> 00:06:50.910
and why that helped us switch,
and we switched our unit test

00:06:50.910 --> 00:06:52.420
over.

00:06:52.420 --> 00:06:56.690
So our strategy was we had
four developers at the time.

00:06:56.690 --> 00:06:59.680
We had a medium-sized code
base, maybe a small code

00:06:59.680 --> 00:07:01.720
base, 13,000 lines of code.

00:07:01.720 --> 00:07:04.340
It's not a small amount of code.

00:07:04.340 --> 00:07:05.940
153 files.

00:07:05.940 --> 00:07:07.680
And it only took
us about a week.

00:07:07.680 --> 00:07:10.130
So there's a lot of
reasons for this.

00:07:10.130 --> 00:07:11.099
And I'll get into that.

00:07:11.099 --> 00:07:12.640
But I think it's
really cool that you

00:07:12.640 --> 00:07:15.480
can take an app you've been
working on for five months,

00:07:15.480 --> 00:07:18.260
and just switch it to Dart.

00:07:18.260 --> 00:07:20.540
And we actually
shaved a lot of lines

00:07:20.540 --> 00:07:25.400
off our code because of Dart's
package system, and how clean

00:07:25.400 --> 00:07:29.780
that is, versus
JavaScript's module system.

00:07:29.780 --> 00:07:32.180
So our strategy
looked like this.

00:07:32.180 --> 00:07:34.570
We didn't really focus
on writing idiomatic Dart

00:07:34.570 --> 00:07:35.190
code at first.

00:07:35.190 --> 00:07:38.220
We just wanted to get it
working and switch it over.

00:07:38.220 --> 00:07:41.910
And then, maybe, in the weeks
after we got our working app,

00:07:41.910 --> 00:07:44.440
we could make the
code more idiomatic.

00:07:44.440 --> 00:07:49.600
So for example, we weren't using
RXJS for these tooling reasons

00:07:49.600 --> 00:07:50.330
I was mentioning.

00:07:50.330 --> 00:07:53.110
But we did want a
stream-based model.

00:07:53.110 --> 00:07:57.060
So we wanted to be able to
subscribe to some events,

00:07:57.060 --> 00:08:00.220
and maybe receive
errors, and then--

00:08:00.220 --> 00:08:02.704
so here, I'm calling Subscribe
to Model at the bottom.

00:08:02.704 --> 00:08:04.120
And when we reported
this to Dart,

00:08:04.120 --> 00:08:06.150
we really didn't focus
on changing this.

00:08:06.150 --> 00:08:08.525
We just got the code
running the same way

00:08:08.525 --> 00:08:09.780
it was running in JavaScript.

00:08:09.780 --> 00:08:12.980
And we were done.

00:08:12.980 --> 00:08:15.174
And then later, it's
really exciting.

00:08:15.174 --> 00:08:17.340
And it's actually a lot of
fun to refactor the code,

00:08:17.340 --> 00:08:18.610
and make it more idiomatic.

00:08:18.610 --> 00:08:21.580
So you can see we're just
using a stream, here.

00:08:21.580 --> 00:08:26.520
And we keep a stream controller
on our class called Thing.

00:08:26.520 --> 00:08:29.410
And it's a lot cleaner.

00:08:29.410 --> 00:08:35.190
And plus, you get all the
advantages of the stream class.

00:08:35.190 --> 00:08:36.794
React components
were another thing

00:08:36.794 --> 00:08:37.960
that was a challenge for us.

00:08:37.960 --> 00:08:41.535
And we weren't sure how
this was going to work.

00:08:41.535 --> 00:08:42.909
So for those who
aren't familiar,

00:08:42.909 --> 00:08:43.992
this is a React component.

00:08:43.992 --> 00:08:45.220
It's really simple.

00:08:45.220 --> 00:08:48.290
It's written in JSX, which
is a little controversial,

00:08:48.290 --> 00:08:50.840
because you're inlining
XML into JavaScript,

00:08:50.840 --> 00:08:52.590
and then compiling
that, the JavaScript.

00:08:52.590 --> 00:08:54.800
But it's actually
pretty simple to use.

00:08:54.800 --> 00:08:56.510
And we like it.

00:08:56.510 --> 00:08:58.700
So we had a lot of
components written in React.

00:08:58.700 --> 00:09:00.500
And when this compiles,
it looks something

00:09:00.500 --> 00:09:03.860
like this, where the div
element has no properties.

00:09:03.860 --> 00:09:05.150
So we give it null.

00:09:05.150 --> 00:09:09.130
And then we say, hello, name.

00:09:09.130 --> 00:09:14.050
So when we ported this, there's
this library called React Dart.

00:09:14.050 --> 00:09:17.530
And it allows you to
write normal Dart classes

00:09:17.530 --> 00:09:21.450
and use the inheritance
model extend component.

00:09:21.450 --> 00:09:23.860
And here, we're using
some string interpolation.

00:09:23.860 --> 00:09:27.987
And yeah, it worked really well.

00:09:27.987 --> 00:09:29.570
We have an engineer
here, Trent, who's

00:09:29.570 --> 00:09:31.986
going to be giving a lightning
talk about React, if you're

00:09:31.986 --> 00:09:34.516
interested in this binding.

00:09:34.516 --> 00:09:39.606
And if you're interested in how
this works, you can check here.

00:09:39.606 --> 00:09:40.980
So that was the
React components.

00:09:40.980 --> 00:09:44.800
And we got those ported
over using that strategy.

00:09:44.800 --> 00:09:47.550
The final thing we did
was port our tests.

00:09:47.550 --> 00:09:51.240
And the Angular team has written
this library called Guinness.

00:09:51.240 --> 00:09:53.370
So I'm going to go
back and forth here

00:09:53.370 --> 00:09:55.000
between Jasmine and Guinness.

00:09:55.000 --> 00:09:56.212
Boom.

00:09:56.212 --> 00:09:57.670
Boom.

00:09:57.670 --> 00:10:00.100
Boom.

00:10:00.100 --> 00:10:01.770
So that's how we switched.

00:10:01.770 --> 00:10:04.230
We took a strategy of just
moving the code over, and then

00:10:04.230 --> 00:10:05.562
improving it after.

00:10:05.562 --> 00:10:06.270
Move and improve.

00:10:09.910 --> 00:10:11.050
Trademark.

00:10:11.050 --> 00:10:15.792
React components were able to
be switched using React.Dart.

00:10:15.792 --> 00:10:18.250
And then, using the Guinness
package, we switched our apps.

00:10:18.250 --> 00:10:19.890
And now, we're
using a unit test.

00:10:19.890 --> 00:10:25.044
But having that initial port go
smoothly was important to us.

00:10:25.044 --> 00:10:26.460
So I'm going to
talk a little bit,

00:10:26.460 --> 00:10:28.830
spend the rest time talking,
about what we do now

00:10:28.830 --> 00:10:30.850
and how we're using
the tools today.

00:10:30.850 --> 00:10:34.190
And we're seeing a lot of
awesome stuff happening

00:10:34.190 --> 00:10:36.630
in a lot of these,
especially testing.

00:10:36.630 --> 00:10:39.630
So this is really
exciting to talk about.

00:10:39.630 --> 00:10:44.280
But the Dart VM just immediately
give us a great development

00:10:44.280 --> 00:10:45.270
experience.

00:10:45.270 --> 00:10:48.630
I don't think I'll get any
controversy saying this here.

00:10:48.630 --> 00:10:51.550
Debugging is just really
fast and predictable for us.

00:10:51.550 --> 00:10:54.300
We used the IDE Webstorm.

00:10:54.300 --> 00:10:56.960
And we're able to
debug remote apps

00:10:56.960 --> 00:11:00.750
and debug apps locally just
right in the source code.

00:11:00.750 --> 00:11:02.204
That's really great.

00:11:02.204 --> 00:11:04.370
I'll talk a little bit about
this on the next slide,

00:11:04.370 --> 00:11:06.990
but switching branches is
really important to us,

00:11:06.990 --> 00:11:08.000
because we review code.

00:11:08.000 --> 00:11:11.680
And keeping a Pub server
running and switching branches

00:11:11.680 --> 00:11:14.400
is a great developer experience.

00:11:14.400 --> 00:11:18.710
Checked mode is also
really nice for us.

00:11:18.710 --> 00:11:22.350
Being able to put certs in our
code and have those type checks

00:11:22.350 --> 00:11:26.300
makes you understand the
bugs that much quicker.

00:11:26.300 --> 00:11:29.180
And I have a quick example here
of something I think it's cool.

00:11:29.180 --> 00:11:33.230
So I know there's a question
about using a REPL in Dart.

00:11:33.230 --> 00:11:35.790
So this is something that you
can do if you set a breakpoint.

00:11:35.790 --> 00:11:39.000
You can just start,
open up the console,

00:11:39.000 --> 00:11:40.650
and just play with
different frames.

00:11:40.650 --> 00:11:43.615
Here, I selected the package
I wanted to play with.

00:11:43.615 --> 00:11:44.740
And I'm typing in a string.

00:11:44.740 --> 00:11:47.610
And it's going to
parse it for me.

00:11:47.610 --> 00:11:49.720
I'm a really fast
typer, as you can see.

00:11:53.150 --> 00:11:54.410
So there we go.

00:11:54.410 --> 00:11:55.840
It's going to parse that for us.

00:11:55.840 --> 00:11:57.980
Cool.

00:11:57.980 --> 00:12:00.220
So switching branches
is much cheaper.

00:12:00.220 --> 00:12:02.619
And this is
important, because we

00:12:02.619 --> 00:12:03.910
like to test each other's code.

00:12:03.910 --> 00:12:07.750
And we like to
really quickly get

00:12:07.750 --> 00:12:09.000
feedback on each other's code.

00:12:09.000 --> 00:12:10.580
So we pushed to GitHub.

00:12:10.580 --> 00:12:12.020
We set up a pull request.

00:12:12.020 --> 00:12:14.380
And this was the
old workflow, where

00:12:14.380 --> 00:12:17.660
we had to commit
our working changes,

00:12:17.660 --> 00:12:21.110
compile and serve the
application, and that took,

00:12:21.110 --> 00:12:23.410
in JavaScript, that
took 10 to 12 seconds.

00:12:23.410 --> 00:12:25.940
We had a medium-size app.

00:12:25.940 --> 00:12:28.434
And then, we review and
test the code like normal.

00:12:28.434 --> 00:12:29.850
And then, when
we're done, we have

00:12:29.850 --> 00:12:31.910
to go back to our old
branch we were working on

00:12:31.910 --> 00:12:35.100
and check our working changes,
and then compile and serve

00:12:35.100 --> 00:12:36.329
to get back running again.

00:12:36.329 --> 00:12:37.620
So there's a mental block here.

00:12:37.620 --> 00:12:40.790
It's not fun to, eh, maybe
I'll pull down this code,

00:12:40.790 --> 00:12:43.214
but maybe I'll just keep
working on what I'm working on.

00:12:43.214 --> 00:12:45.380
But with Dart, you just
keep the Pub server running.

00:12:45.380 --> 00:12:48.860
And you can eliminate
those compile steps.

00:12:48.860 --> 00:12:51.840
I know for me, it's a lot
less of a mental block

00:12:51.840 --> 00:12:53.340
to just play with
each other's code.

00:12:55.970 --> 00:12:57.400
I think Pub is awesome.

00:12:57.400 --> 00:13:01.320
And we have found that it's
allowed us to share code

00:13:01.320 --> 00:13:04.030
a lot more easily.

00:13:04.030 --> 00:13:07.280
So we have this
notion of writing code

00:13:07.280 --> 00:13:09.340
as classes and
functions, and not

00:13:09.340 --> 00:13:12.080
really knowing what the
future of those will be.

00:13:12.080 --> 00:13:15.090
And over time, we say,
well, we can abstract this

00:13:15.090 --> 00:13:18.260
into a library and declare what
other libraries it imports.

00:13:18.260 --> 00:13:20.910
And then in the same
repo, because Pub

00:13:20.910 --> 00:13:24.080
has package dependency, or
path dependency, support,

00:13:24.080 --> 00:13:27.414
we can put that into a package
in our same repository.

00:13:27.414 --> 00:13:29.080
Keep the code reviews
in the same place.

00:13:29.080 --> 00:13:31.590
And then, eventually
separate it into a repo.

00:13:31.590 --> 00:13:35.950
And then, we open-sourced our
first Dart repo the other day.

00:13:35.950 --> 00:13:41.360
So just really good story around
how flexible Pub makes writing

00:13:41.360 --> 00:13:44.060
packages.

00:13:44.060 --> 00:13:46.860
So there's a really clear
structure for Pub packages.

00:13:46.860 --> 00:13:48.890
So actually analyzable.

00:13:48.890 --> 00:13:50.720
So I'm not saying this
is clear structure.

00:13:50.720 --> 00:13:55.680
But this is our dependency
for a package right now.

00:13:55.680 --> 00:13:56.747
And Kevin made this.

00:13:56.747 --> 00:13:57.580
It's really awesome.

00:14:01.120 --> 00:14:02.530
AUDIENCE: [INAUDIBLE].

00:14:02.530 --> 00:14:03.670
JOHN RYAN: The tool, yeah.

00:14:03.670 --> 00:14:05.330
Yeah.

00:14:05.330 --> 00:14:06.700
That's our code.

00:14:06.700 --> 00:14:08.230
That's the mess.

00:14:08.230 --> 00:14:10.920
So the Git versus
private Pub server

00:14:10.920 --> 00:14:13.400
is one issue where I think
it would be cool to improve.

00:14:13.400 --> 00:14:15.360
So there is a
private Pub server.

00:14:15.360 --> 00:14:17.110
If you're a company
or you're a team,

00:14:17.110 --> 00:14:20.640
you can host this on App
Engine, and, eventually,

00:14:20.640 --> 00:14:23.760
just on your own server, and
share your code that way.

00:14:23.760 --> 00:14:28.420
And what that gives you is
path constraint-solving,

00:14:28.420 --> 00:14:32.730
or constraint-solving
for your package.

00:14:32.730 --> 00:14:35.310
One other cool thing
that might work

00:14:35.310 --> 00:14:42.080
would be to use get tags for
path or constraint-solving.

00:14:42.080 --> 00:14:44.510
So if everyone wants
to get out their laptop

00:14:44.510 --> 00:14:47.960
and vote for Issue
22481, I will stand here.

00:14:47.960 --> 00:14:49.528
I'll wait.

00:14:49.528 --> 00:14:51.352
AUDIENCE: [INAUDIBLE].

00:14:51.352 --> 00:14:52.810
JOHN RYAN: But
seriously, though, I

00:14:52.810 --> 00:14:56.790
think having a team dedicated
and responding to issues

00:14:56.790 --> 00:14:58.920
quickly is really cool.

00:14:58.920 --> 00:15:00.590
And we get that for
free from you guys.

00:15:00.590 --> 00:15:01.090
Thanks.

00:15:03.690 --> 00:15:06.380
So we bind to JavaScript.

00:15:06.380 --> 00:15:08.950
We do this do through the
React binding that we use.

00:15:08.950 --> 00:15:11.740
And we just do it for existing
libraries that we have,

00:15:11.740 --> 00:15:13.099
and we haven't ported yet.

00:15:13.099 --> 00:15:14.890
The first choice should
be to port to Dart,

00:15:14.890 --> 00:15:17.990
but if you can't,
you can use this.

00:15:17.990 --> 00:15:23.030
So here, I have a class.

00:15:23.030 --> 00:15:24.590
I'm using this Promise object.

00:15:24.590 --> 00:15:27.550
So I'm getting the
Quokka Promise object

00:15:27.550 --> 00:15:29.880
from our JavaScript context.

00:15:29.880 --> 00:15:33.610
And what that looks like
is something like this.

00:15:33.610 --> 00:15:35.250
So we can actually wrap.

00:15:35.250 --> 00:15:37.130
We're wrapping
promises and stuff

00:15:37.130 --> 00:15:39.380
for simple libraries like that.

00:15:39.380 --> 00:15:42.020
And we're just using
Dart JS right now.

00:15:44.990 --> 00:15:48.600
There's a problem that
we have been seeing

00:15:48.600 --> 00:15:50.420
with binding to JavaScript.

00:15:50.420 --> 00:15:52.950
So here, if you pass a
function over to JavaScript,

00:15:52.950 --> 00:15:55.180
they're not equal.

00:15:55.180 --> 00:15:57.040
And I think this
is a huge problem,

00:15:57.040 --> 00:16:02.100
because you can do something
like set timeout does, which is

00:16:02.100 --> 00:16:05.250
return an ID for that listener.

00:16:05.250 --> 00:16:09.330
And then, you can clean
those listeners up yourself.

00:16:09.330 --> 00:16:11.510
But I think with the
stuff that's coming out,

00:16:11.510 --> 00:16:13.680
I think this will improve.

00:16:13.680 --> 00:16:15.320
So that's how we bind to JS.

00:16:15.320 --> 00:16:18.940
It's worked really well for us
for the libraries that we have.

00:16:18.940 --> 00:16:22.510
And it's only going
to get better.

00:16:22.510 --> 00:16:24.780
We have a story around
CI that looks like this.

00:16:24.780 --> 00:16:26.810
We push to GitHub,
our CI server.

00:16:26.810 --> 00:16:29.440
It's an internal CI
tool that we have.

00:16:29.440 --> 00:16:30.310
Pulls down our code.

00:16:30.310 --> 00:16:32.310
And then it grabs the
Dart Docker container

00:16:32.310 --> 00:16:35.010
from our Docker registry,
and then runs our test

00:16:35.010 --> 00:16:37.860
using that Docker container.

00:16:37.860 --> 00:16:38.620
Travis CI.

00:16:38.620 --> 00:16:43.320
There's support for Travis CI
on their site for Dart, now.

00:16:43.320 --> 00:16:48.390
But if you want to do this
and get a green check mark,

00:16:48.390 --> 00:16:50.150
there's lots of Docker
files available.

00:16:50.150 --> 00:16:52.210
So if you have some
base Docker image,

00:16:52.210 --> 00:16:55.950
and you want to get your
tests and stuff running

00:16:55.950 --> 00:16:58.810
on that Docker image, you
can download the base Docker

00:16:58.810 --> 00:17:03.810
image that is shipped by the
Dart team and then use that.

00:17:03.810 --> 00:17:05.980
Or, you can look at one
of these Docker files,

00:17:05.980 --> 00:17:08.800
if you're interested
in how that works.

00:17:08.800 --> 00:17:12.871
That works pretty nicely for us.

00:17:12.871 --> 00:17:14.829
One of the final things
I'm going to talk about

00:17:14.829 --> 00:17:18.800
is our testing story, and
something we think is cool.

00:17:18.800 --> 00:17:24.430
We think WebDriver is really a
nice tool for running automated

00:17:24.430 --> 00:17:25.819
browser tests.

00:17:25.819 --> 00:17:28.349
So what WebDriver
allows you to do

00:17:28.349 --> 00:17:31.050
is actually automate
real browser interactions

00:17:31.050 --> 00:17:32.800
that user might
do-- click buttons,

00:17:32.800 --> 00:17:34.800
and do all that sort of thing.

00:17:34.800 --> 00:17:38.330
So it's a project
by the Selenium,

00:17:38.330 --> 00:17:39.980
it's part of the
Selenium project.

00:17:39.980 --> 00:17:42.950
And there's multiple languages
supported, and one of them

00:17:42.950 --> 00:17:45.210
is Dart.

00:17:45.210 --> 00:17:48.790
So I'll show you an example
of a Python test, here.

00:17:48.790 --> 00:17:51.850
This is a synchronous test,
so each line actually blocks.

00:17:51.850 --> 00:17:55.200
So there's a few advantages
to writing these in Python,

00:17:55.200 --> 00:17:59.220
because you have some
interactivity with clicking

00:17:59.220 --> 00:18:02.010
through the browser
and using the API.

00:18:02.010 --> 00:18:03.976
But when we switched to
JavaScript a year ago

00:18:03.976 --> 00:18:05.850
for our project, we
wanted to write our tests

00:18:05.850 --> 00:18:07.210
in the same language.

00:18:07.210 --> 00:18:10.230
And this was actually
harder to debug.

00:18:10.230 --> 00:18:15.880
And we had some problems just
getting our WebDriver client

00:18:15.880 --> 00:18:19.180
to be readable and
understandable.

00:18:19.180 --> 00:18:23.630
So when we switched to Dart,
we used, at the time, the Dart

00:18:23.630 --> 00:18:24.260
Async package.

00:18:24.260 --> 00:18:25.290
We used Features.

00:18:25.290 --> 00:18:27.070
And you can write
something like this,

00:18:27.070 --> 00:18:30.010
where you're getting the URL,
you're finding the element

00:18:30.010 --> 00:18:31.170
that you want to click on.

00:18:31.170 --> 00:18:33.930
Then, you click on
it, set the text,

00:18:33.930 --> 00:18:36.750
and check the text that
is what you expect.

00:18:36.750 --> 00:18:38.620
But I remember the
first time I saw you

00:18:38.620 --> 00:18:42.890
Async await was with our test,
because it was a preview.

00:18:42.890 --> 00:18:45.830
And we could run our tests
using whatever we wanted.

00:18:45.830 --> 00:18:48.760
And yeah, I knew it was a
feature that we were going

00:18:48.760 --> 00:18:51.470
to really love and start using.

00:18:51.470 --> 00:18:52.390
So that's WebDriver.

00:18:52.390 --> 00:18:55.190
And the advantage to
running WebDriver tests

00:18:55.190 --> 00:18:57.930
in the same language is that you
get the full power of the Dart

00:18:57.930 --> 00:18:58.430
language.

00:18:58.430 --> 00:18:59.888
You get anything
you would normally

00:18:59.888 --> 00:19:01.800
use when you're writing code.

00:19:01.800 --> 00:19:04.780
And we found that our
quality assurance engineers

00:19:04.780 --> 00:19:07.180
and our developers can
collaborate and review

00:19:07.180 --> 00:19:09.020
each other's code.

00:19:09.020 --> 00:19:10.930
And that's been really
positive for us.

00:19:10.930 --> 00:19:14.080
So that's what we do now.

00:19:14.080 --> 00:19:15.700
We use the Dart VM.

00:19:15.700 --> 00:19:18.480
And all the developer tools
give us a great developer

00:19:18.480 --> 00:19:19.740
experience.

00:19:19.740 --> 00:19:22.100
Pub allows us to share
code really easily.

00:19:22.100 --> 00:19:24.580
Were still able to use
JavaScript in a way that's

00:19:24.580 --> 00:19:26.640
sane and makes sense to us.

00:19:26.640 --> 00:19:28.570
And we have a great
testing story.

00:19:28.570 --> 00:19:30.800
And the testing story's
only getting better.

00:19:30.800 --> 00:19:35.010
So we're really
excited for 2015.

00:19:35.010 --> 00:19:37.900
So switching to Dart
has allowed us, I think,

00:19:37.900 --> 00:19:41.320
to build, measure, and learn
more quickly, get features

00:19:41.320 --> 00:19:43.690
out quicker, and get feedback.

00:19:43.690 --> 00:19:45.500
It's a better
developer experience.

00:19:45.500 --> 00:19:49.230
And having more fun
as a developer means

00:19:49.230 --> 00:19:51.139
you're working hard,
getting better,

00:19:51.139 --> 00:19:52.180
and that's what you want.

00:19:52.180 --> 00:19:53.860
Just like climbing.

00:19:53.860 --> 00:19:56.260
We focus a lot less
on tools, so it's

00:19:56.260 --> 00:19:59.335
like climbing more efficiently,
when you're not messing around

00:19:59.335 --> 00:20:01.150
with your harness, for example.

00:20:01.150 --> 00:20:04.400
And code is much easier
to share between teams.

00:20:04.400 --> 00:20:07.150
And overall, I just I think
it's the number one thing

00:20:07.150 --> 00:20:08.930
we've done to be
more productive.

00:20:08.930 --> 00:20:11.570
So looking forward, I think
there's some cool things

00:20:11.570 --> 00:20:14.690
that we're excited about.

00:20:14.690 --> 00:20:17.410
This notion of libraries that
are platform-independent,

00:20:17.410 --> 00:20:19.410
like the HTTP package.

00:20:19.410 --> 00:20:21.390
Really exciting
stuff, because you

00:20:21.390 --> 00:20:23.460
can write a library
like a GitHub API,

00:20:23.460 --> 00:20:26.520
run it on the server
or the client.

00:20:26.520 --> 00:20:29.100
And you can also--
Dan Schultz has

00:20:29.100 --> 00:20:32.930
an example of rendering React
components on the client

00:20:32.930 --> 00:20:34.490
or the server, as well.

00:20:34.490 --> 00:20:36.960
So that's something we're
looking into and getting

00:20:36.960 --> 00:20:39.300
really excited about.

00:20:39.300 --> 00:20:41.090
So we're here.

00:20:41.090 --> 00:20:43.880
We've completed our first pitch.

00:20:43.880 --> 00:20:46.000
We've been working for a year.

00:20:46.000 --> 00:20:48.350
And we have shipped
our products.

00:20:48.350 --> 00:20:51.870
And we feel like we've climbed
this last section much more

00:20:51.870 --> 00:20:52.830
efficiently.

00:20:52.830 --> 00:20:54.840
And when you climb
more efficiently,

00:20:54.840 --> 00:20:59.700
you usually have the stamina
to look up and keep going.

00:20:59.700 --> 00:21:01.600
So that's my talk.

00:21:01.600 --> 00:21:04.990
If anybody has any
questions, I'll be here.

00:21:04.990 --> 00:21:07.100
We have a lot of
Workiva engineers here.

00:21:07.100 --> 00:21:09.069
And we're just really
glad to be here.

00:21:09.069 --> 00:21:10.360
It's great to see all you guys.

00:21:10.360 --> 00:21:10.860
Thanks.

00:21:17.570 --> 00:21:19.320
MALE SPEAKER: Bob, I
don't know about you,

00:21:19.320 --> 00:21:20.986
but I want to have
the Workiva guys just

00:21:20.986 --> 00:21:22.440
always give our pitch.

00:21:22.440 --> 00:21:23.370
BOB: Yeah.

00:21:23.370 --> 00:21:24.660
MALE SPEAKER: Why are we here?

00:21:24.660 --> 00:21:25.242
Geez.

00:21:25.242 --> 00:21:26.700
Actually, no, stick
around, though,

00:21:26.700 --> 00:21:28.140
because we have
time for questions.

00:21:28.140 --> 00:21:28.889
JOHN RYAN: Oh, OK.

00:21:28.889 --> 00:21:29.650
Yeah, sure.

00:21:29.650 --> 00:21:30.485
BOB: Guess what?

00:21:30.485 --> 00:21:31.540
Any questions for John?

00:21:34.340 --> 00:21:34.840
Back here?

00:21:34.840 --> 00:21:35.339
I'll run.

00:21:40.225 --> 00:21:40.850
AUDIENCE: Yeah.

00:21:40.850 --> 00:21:43.970
So is Wdesk hosted?

00:21:43.970 --> 00:21:46.720
Do you do any actual content
hosting on your site?

00:21:46.720 --> 00:21:49.184
Or do they run it inter-office?

00:21:49.184 --> 00:21:49.850
JOHN RYAN: Yeah.

00:21:49.850 --> 00:21:50.974
So that's a great question.

00:21:50.974 --> 00:21:53.730
Actually, we've been using
App Engine for a long time

00:21:53.730 --> 00:21:55.240
to host our product.

00:21:55.240 --> 00:21:57.090
And App Engine's a great tool.

00:21:57.090 --> 00:22:00.040
We are still using
it today a lot.

00:22:00.040 --> 00:22:03.710
So I think we're a really
large App Engine customer.

00:22:03.710 --> 00:22:05.501
And now we can run
Dart on App Engine.

00:22:05.501 --> 00:22:06.500
We're looking into that.

00:22:06.500 --> 00:22:09.950
And that's exciting, as well.

00:22:09.950 --> 00:22:11.880
BOB: Anyone else?

00:22:11.880 --> 00:22:12.440
Ivan.

00:22:12.440 --> 00:22:12.990
Oh, no.

00:22:16.299 --> 00:22:18.090
IVAN: So I had a question
about the million

00:22:18.090 --> 00:22:20.400
lines of ActionScript code.

00:22:20.400 --> 00:22:23.300
When are you switching those?

00:22:23.300 --> 00:22:26.030
And how would you go about that?

00:22:26.030 --> 00:22:28.730
JOHN RYAN: Million lines
of ActionScript code.

00:22:28.730 --> 00:22:30.950
I think our strategy
going forward

00:22:30.950 --> 00:22:33.860
is we're building
new products in Dart.

00:22:33.860 --> 00:22:36.330
And I don't see our
current ActionScript code

00:22:36.330 --> 00:22:39.010
base moving very quickly.

00:22:39.010 --> 00:22:43.500
But it's actually a great
reference for any new features

00:22:43.500 --> 00:22:46.450
we're implementing,
because we can go back.

00:22:46.450 --> 00:22:50.650
I think ActionScript
translates to Dart pretty well

00:22:50.650 --> 00:22:53.250
in terms of how the
languages are structured.

00:22:53.250 --> 00:22:57.625
And Dart is just a
very-- it's a language

00:22:57.625 --> 00:22:59.000
that a lot of
languages are like.

00:22:59.000 --> 00:23:00.390
It's a C family language.

00:23:00.390 --> 00:23:05.260
And so it's not like we're
translating a whole bunch

00:23:05.260 --> 00:23:09.102
of different concepts.

00:23:09.102 --> 00:23:10.560
AUDIENCE: How many
lines of Haskell

00:23:10.560 --> 00:23:11.720
do you have to translate?

00:23:11.720 --> 00:23:12.386
JOHN RYAN: Zero.

00:23:14.800 --> 00:23:17.810
BOB: Anyone else?

00:23:17.810 --> 00:23:20.860
We have a live,
large-scale Dart user here.

00:23:20.860 --> 00:23:21.660
Pick their brain.

00:23:26.030 --> 00:23:28.080
AUDIENCE: What did you
use for the UI framework?

00:23:28.080 --> 00:23:30.120
Did you pick anything
liked Dart or Polymer

00:23:30.120 --> 00:23:33.094
or anything for the UI, or
just straight Dart HTML?

00:23:33.094 --> 00:23:33.760
JOHN RYAN: Yeah.

00:23:33.760 --> 00:23:36.760
Trent's going to be giving a
lightning talk a little bit

00:23:36.760 --> 00:23:37.930
more about that.

00:23:37.930 --> 00:23:40.200
We're using React for
most of our components.

00:23:40.200 --> 00:23:43.885
And in some places, we just
use Dart HTML directly.

00:23:48.370 --> 00:23:52.420
BOB: Got time for one
more, maybe one more.

00:23:52.420 --> 00:23:53.680
Going.

00:23:53.680 --> 00:23:54.260
Going once.

00:23:54.260 --> 00:23:57.068
Going twice.

00:23:57.068 --> 00:23:58.502
AUDIENCE: [INAUDIBLE].

00:23:58.502 --> 00:23:59.960
JOHN RYAN: We are
using App Engine.

00:23:59.960 --> 00:24:00.460
Yeah.

00:24:00.460 --> 00:24:02.270
We've been using
it for a long time.

00:24:02.270 --> 00:24:06.085
BOB: The question was,
are you using App Engine?

00:24:06.085 --> 00:24:07.144
AUDIENCE: Sorry.

00:24:07.144 --> 00:24:08.810
JOHN RYAN: Thanks for
the clarification.

00:24:08.810 --> 00:24:10.330
MALE SPEAKER: Thank
you very much.

00:24:10.330 --> 00:24:11.880
JOHN RYAN: Thanks.

