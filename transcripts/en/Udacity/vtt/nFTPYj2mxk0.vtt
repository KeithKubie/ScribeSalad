WEBVTT
Kind: captions
Language: en

00:00:00.250 --> 00:00:02.800
Let's take a closer look at longest prefix match.

00:00:02.800 --> 00:00:06.420
So each packet has a destination IP address, which determines

00:00:06.420 --> 00:00:08.540
where the package should be forwarded next. And a

00:00:08.540 --> 00:00:12.770
router basically looks up a table entry that matches that

00:00:12.770 --> 00:00:16.379
address. So for example, a forwarding table might have

00:00:16.379 --> 00:00:18.930
a number of prefixes in it. And many of these

00:00:18.930 --> 00:00:21.220
prefixes might be overlapping. But when we see an

00:00:21.220 --> 00:00:25.710
IP address, it may match. On one or more prefixes

00:00:25.710 --> 00:00:32.490
in this table, you simply match that IP address to the entry in the forwarding

00:00:32.490 --> 00:00:37.400
table with the longest matching prefix. So the benefits of cider and longest

00:00:37.400 --> 00:00:41.220
matching prefix. Our efficiency, since prefix blocks

00:00:41.220 --> 00:00:43.220
can be allocated on a much finer

00:00:43.220 --> 00:00:46.880
granularity than with classical inter-domain routing, any

00:00:46.880 --> 00:00:51.150
opportunity for aggregation if two downstream networks with

00:00:51.150 --> 00:00:54.490
more specific or longer prefixes, should be treated

00:00:54.490 --> 00:00:57.120
in the same way. By an upstream network,

00:00:57.120 --> 00:01:00.500
who might simply aggregate two contiguous shorter prefixes

00:01:00.500 --> 00:01:03.720
into one forwarding table entry with a shorter

00:01:03.720 --> 00:01:07.220
prefix. For example, a benefit for aggregation might

00:01:07.220 --> 00:01:10.450
exist if two downstream networks A and B

00:01:10.450 --> 00:01:12.910
each had slash 16 address space allocated to

00:01:12.910 --> 00:01:16.990
them. But upstream, all the traffic always cam

00:01:16.990 --> 00:01:20.180
through same upstream network, C. If the rest

00:01:20.180 --> 00:01:22.748
of the internet only reached A and B.

00:01:22.748 --> 00:01:24.640
Via C, then the rest of the internet

00:01:24.640 --> 00:01:27.960
need only know about C's address space which might

00:01:27.960 --> 00:01:30.828
be 12/8. This might allow the upstream network

00:01:30.828 --> 00:01:34.454
to simply aggregate, or not announce these more specific

00:01:34.454 --> 00:01:37.858
prefixes, since they're already covered by the less

00:01:37.858 --> 00:01:42.108
specific upstream prefix. Now cider had a significant effect

00:01:42.108 --> 00:01:45.186
on slowing the growth of the internet routing

00:01:45.186 --> 00:01:48.719
tables from 1994 to 1998. So, from 1994

00:01:48.719 --> 00:01:51.113
to 1998, we see roughly linear growth in

00:01:51.113 --> 00:01:53.570
the number of prefixes in the internet routing

00:01:53.570 --> 00:01:57.566
table. Around 2000, fast growth in routing tables

00:01:57.566 --> 00:02:01.500
resumed. You can see that growth here once

00:02:01.500 --> 00:02:04.470
again started to pick up a significant contributor

00:02:04.470 --> 00:02:07.538
to this growth, was a practice called multi-homing.

00:02:07.538 --> 00:02:11.250
Multi-homing can actually make it difficult

00:02:11.250 --> 00:02:14.800
for upstream providers to aggregate IP

00:02:14.800 --> 00:02:17.500
prefixes together, often requiring an upstream

00:02:17.500 --> 00:02:21.460
provider to store multiple IP prefixes for

00:02:21.460 --> 00:02:24.230
a single autonomous system. Sometimes those

00:02:24.230 --> 00:02:27.670
IP prefixes are contiguous and sometimes

00:02:27.670 --> 00:02:33.570
they aren't. Let's take a quick look at how multi-homing can stymie aggregation.

