WEBVTT
Kind: captions
Language: en

00:00:00.790 --> 00:00:02.300
JEN KING: Hi, I'm
Jen King, and I'm

00:00:02.300 --> 00:00:04.414
the Technical Lead on
the Drive Android API.

00:00:04.414 --> 00:00:06.830
Today I'm going to talk about
the DriveEventService, which

00:00:06.830 --> 00:00:09.340
allows your app to respond
to background events.

00:00:09.340 --> 00:00:11.660
First, we'll cover change
events, which notify you

00:00:11.660 --> 00:00:13.750
of changes to a particular item.

00:00:13.750 --> 00:00:15.490
Next, we'll introduce
completion events,

00:00:15.490 --> 00:00:17.630
which tell you the outcome
a particular action.

00:00:17.630 --> 00:00:19.370
For example, whether
a file you created

00:00:19.370 --> 00:00:20.453
was uploaded successfully.

00:00:21.320 --> 00:00:23.930
Last, we'll show you how to use
completion events to resolve

00:00:23.930 --> 00:00:26.440
conflicts when multiple
apps or multiple devices

00:00:26.440 --> 00:00:28.120
edit the same file.

00:00:28.120 --> 00:00:29.512
Let's get started.

00:00:29.512 --> 00:00:31.970
Some of you may already be
aware of change event listeners,

00:00:31.970 --> 00:00:34.460
which allow you to listen for
changes to a particular item

00:00:34.460 --> 00:00:36.001
while your app is running.

00:00:36.001 --> 00:00:38.000
But what if you want to
inform users that a file

00:00:38.000 --> 00:00:39.374
they're interested
in has changed

00:00:39.374 --> 00:00:41.290
while your app isn't running.

00:00:41.290 --> 00:00:43.060
The newly added change
event subscriptions

00:00:43.060 --> 00:00:44.950
allow you to do just that.

00:00:44.950 --> 00:00:47.007
Subscriptions deliver
exactly the same events

00:00:47.007 --> 00:00:48.840
as are delivered to a
change event listener,

00:00:48.840 --> 00:00:50.381
but you request them
and receive them

00:00:50.381 --> 00:00:51.910
in a slightly different way.

00:00:51.910 --> 00:00:53.620
To add a change
event subscription,

00:00:53.620 --> 00:00:55.700
retrieve the Drive resource
you're interested in

00:00:55.700 --> 00:00:58.266
and simply call add
change subscription.

00:00:58.266 --> 00:00:59.640
But now you're
probably wondering

00:00:59.640 --> 00:01:01.090
where these events
get delivered.

00:01:01.090 --> 00:01:02.509
That's a good question.

00:01:02.509 --> 00:01:04.050
To handle background
events, you need

00:01:04.050 --> 00:01:06.650
to create a service that
extends DriveEventService

00:01:06.650 --> 00:01:08.954
and add this class to
your apps manifest.

00:01:08.954 --> 00:01:10.370
You'll override
the Handler method

00:01:10.370 --> 00:01:12.520
in this class for each
event in DriveEventService

00:01:12.520 --> 00:01:14.030
that you care about.

00:01:14.030 --> 00:01:15.860
Let's try this out.

00:01:15.860 --> 00:01:17.630
First, let's create
the service class

00:01:17.630 --> 00:01:19.470
that will handle
the change events.

00:01:19.470 --> 00:01:21.967
Create a class that
extends DriveEventService--

00:01:21.967 --> 00:01:23.550
in this example, my
DriveEventService.

00:01:25.270 --> 00:01:28.920
Override the onChange method in
your DriveEventService subclass

00:01:28.920 --> 00:01:30.420
and print out the
event using Log.d.

00:01:31.500 --> 00:01:34.125
This is where you should do any
application specific processing

00:01:34.125 --> 00:01:35.090
that you need to do.

00:01:36.214 --> 00:01:38.380
The last thing you need to
do is define your service

00:01:38.380 --> 00:01:41.210
in the manifest so that
the Drive API can find it.

00:01:41.210 --> 00:01:43.070
In AndroidManifest
and XML, create

00:01:43.070 --> 00:01:44.640
an entry for your service.

00:01:44.640 --> 00:01:47.180
Set the Android exported
attribute to true

00:01:47.180 --> 00:01:49.570
and add an intent filter
for the handle event actions

00:01:49.570 --> 00:01:52.250
so that Drive knows how
to identify your service.

00:01:52.250 --> 00:01:55.570
Now whenever name gets updated
by another app on the device

00:01:55.570 --> 00:01:57.869
or the Drive API download
changes from the server,

00:01:57.869 --> 00:01:59.410
your app will receive
a change event.

00:02:00.367 --> 00:02:02.450
Now that you've got your
DriveEventService set up,

00:02:02.450 --> 00:02:05.719
you can easily add support for
handling completion events.

00:02:05.719 --> 00:02:07.260
When you make a call
to the Drive API

00:02:07.260 --> 00:02:09.592
you receive a pending
result with a status.

00:02:09.592 --> 00:02:11.050
The pending result
status tells you

00:02:11.050 --> 00:02:12.550
whether this action
was successfully

00:02:12.550 --> 00:02:14.070
applied locally on the device.

00:02:14.070 --> 00:02:16.180
But the action might not
get sent to the server

00:02:16.180 --> 00:02:18.365
until later-- for instance,
if you're offline.

00:02:19.392 --> 00:02:21.850
Completion events let you know
when the action has actually

00:02:21.850 --> 00:02:23.910
made it up to the server
if it was successfully

00:02:23.910 --> 00:02:25.404
applied on the device.

00:02:25.404 --> 00:02:27.070
You'll only receive
the completion event

00:02:27.070 --> 00:02:29.430
is the original call
successful, meaning the pending

00:02:29.430 --> 00:02:31.800
result returned from that
call had a successful status.

00:02:32.850 --> 00:02:34.670
Completion events
themselves can result

00:02:34.670 --> 00:02:37.171
in either success,
failure, or conflict.

00:02:37.171 --> 00:02:39.670
We'll start by looking at how
to request these notifications

00:02:39.670 --> 00:02:41.745
and how to handle success
and failure results.

00:02:42.760 --> 00:02:45.040
Completion events are
requested for a single action,

00:02:45.040 --> 00:02:48.130
rather than for a single file
or folder like change events.

00:02:48.130 --> 00:02:51.210
To request a completion event,
create an execution options

00:02:51.210 --> 00:02:53.870
builder call set
notify on completion

00:02:53.870 --> 00:02:56.550
and pass the new object as a
parameter in your file creation

00:02:56.550 --> 00:02:58.892
or content update method calls.

00:02:58.892 --> 00:03:00.600
You can also add an
optional tracking tag

00:03:00.600 --> 00:03:02.350
to the execution options
to make it easier

00:03:02.350 --> 00:03:04.260
to identify which action
the completion event

00:03:04.260 --> 00:03:05.606
corresponds to.

00:03:05.606 --> 00:03:08.300
To add a tracking tag
call set tracking tag

00:03:08.300 --> 00:03:10.182
when you create your
execution options.

00:03:10.182 --> 00:03:11.890
This tracking tag will
be returned to you

00:03:11.890 --> 00:03:13.056
when the event is delivered.

00:03:13.830 --> 00:03:15.330
To handle events
when they're fired,

00:03:15.330 --> 00:03:18.250
use the same DriveEventService
class you created before

00:03:18.250 --> 00:03:20.760
and override the
onCompletion method.

00:03:20.760 --> 00:03:23.010
You can compare the
results of event.getStatus

00:03:23.010 --> 00:03:25.220
to CompletionEvent.statuses
success

00:03:25.220 --> 00:03:27.540
to determine whether the
action was successful.

00:03:27.540 --> 00:03:30.449
Similarly, check for
CompletionEvent.status failure

00:03:30.449 --> 00:03:31.865
to determine if
the action failed.

00:03:33.000 --> 00:03:35.739
For more info on what other data
the completion event contains,

00:03:35.739 --> 00:03:38.405
take a look at the documentation
for the completion event class.

00:03:39.980 --> 00:03:42.067
Last, once you've processed
the completionEvent,

00:03:42.067 --> 00:03:43.900
you need to dismiss the
event to acknowledge

00:03:43.900 --> 00:03:45.149
that you were able to respond.

00:03:46.060 --> 00:03:49.110
If your app can't process the
event right away-- for example,

00:03:49.110 --> 00:03:51.870
if your app is offline and needs
to do a server query to process

00:03:51.870 --> 00:03:54.020
it-- you can snooze the event.

00:03:54.020 --> 00:03:57.364
The Drive API will notify you
about it again in the future.

00:03:57.364 --> 00:03:59.780
You should dismiss or snooze
every event that you receive.

00:04:00.790 --> 00:04:02.390
In addition to
success and failure,

00:04:02.390 --> 00:04:04.720
actions can also
result in conflicts.

00:04:04.720 --> 00:04:06.970
Conflicts can happen when
two apps on the same device

00:04:06.970 --> 00:04:08.790
head at the same file
at the same time,

00:04:08.790 --> 00:04:11.540
or when a user interacts with
your app from multiple devices.

00:04:11.540 --> 00:04:13.790
Let's take a look at how you
can use completion events

00:04:13.790 --> 00:04:14.706
to resolve a conflict.

00:04:16.110 --> 00:04:18.019
Requesting a conflict
event is almost

00:04:18.019 --> 00:04:20.920
exactly the same as requesting
a standard completion event.

00:04:20.920 --> 00:04:23.320
The only difference is
the conflict strategy.

00:04:23.320 --> 00:04:26.110
You set the conflict strategy
using the set conflict strategy

00:04:26.110 --> 00:04:28.910
method when creating
your execution options.

00:04:28.910 --> 00:04:30.930
The default strategy,
overwrite remote,

00:04:30.930 --> 00:04:33.440
overrides any changes
on the server.

00:04:33.440 --> 00:04:35.060
To respond to a
conflict, you need

00:04:35.060 --> 00:04:37.740
to use the key promote strategy
to keep the remote changes.

00:04:39.140 --> 00:04:41.240
Conflict events are a
type of completion event.

00:04:41.240 --> 00:04:43.910
So you'll receive these events
in exactly the same way, using

00:04:43.910 --> 00:04:46.505
the onCompletion method of your
DriveEventService subclass.

00:04:47.510 --> 00:04:49.260
If the upload results
in a conflict,

00:04:49.260 --> 00:04:52.270
you'll receive an event with
the status-status conflict.

00:04:52.270 --> 00:04:54.210
Remember to dismiss
or snooze the event

00:04:54.210 --> 00:04:55.860
when you finish processing it.

00:04:55.860 --> 00:04:58.132
Each app will handle
conflicts differently.

00:04:58.132 --> 00:04:59.840
You might be able to
do a three way merge

00:04:59.840 --> 00:05:02.120
or you might want
to ask the user.

00:05:02.120 --> 00:05:03.710
To get the server
version of the file,

00:05:03.710 --> 00:05:05.520
open the file from the
devices you normally

00:05:05.520 --> 00:05:08.547
would using DriveFile.open file.

00:05:08.547 --> 00:05:11.130
As long as your online this call
will download the new version

00:05:11.130 --> 00:05:12.490
from the server.

00:05:12.490 --> 00:05:14.340
To get your modified
version of the file,

00:05:14.340 --> 00:05:16.940
call
getModifiedContentsInputStream

00:05:16.940 --> 00:05:18.890
on the completion event.

00:05:18.890 --> 00:05:21.010
Last, to get your
original local copy

00:05:21.010 --> 00:05:23.000
before your
modification was made,

00:05:23.000 --> 00:05:25.910
call getBaseContentsInputStream
on the completion event.

00:05:27.060 --> 00:05:29.040
Now compare the three
copies of the file

00:05:29.040 --> 00:05:31.390
to create the merged
version, write this content

00:05:31.390 --> 00:05:33.690
as you normally would
using contents.commit

00:05:33.690 --> 00:05:35.700
and dismiss the
completion event.

00:05:35.700 --> 00:05:37.180
See our sample
code for an example

00:05:37.180 --> 00:05:38.890
of merging items in a task list.

00:05:40.340 --> 00:05:42.770
You've just learned how to
use the DriveEventService

00:05:42.770 --> 00:05:44.610
to respond to change
events, completion

00:05:44.610 --> 00:05:46.050
events, and conflicts.

00:05:46.050 --> 00:05:48.770
We can't wait to see what
you built with these APIs.

00:05:48.770 --> 00:05:51.550
I'm Jen King, and
thanks for watching.

