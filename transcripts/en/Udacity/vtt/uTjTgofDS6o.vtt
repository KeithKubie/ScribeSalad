WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
Let's continue our exploration of testing.

00:00:02.000 --> 00:00:06.000
As part of this class we're going to be working on a final project together--

00:00:06.000 --> 00:00:09.000
for example, a web browser for HTML and JavaScript.

00:00:09.000 --> 00:00:13.000
You'll want to ensure that it's correct, that it does what it's supposed to do.

00:00:13.000 --> 00:00:17.000
One of the best ways to make that happen is to stop and think before you write anything

00:00:17.000 --> 00:00:21.000
and plan and reason about how the program will go.

00:00:21.000 --> 00:00:24.000
It's like designing a building before you set out to build it.

00:00:24.000 --> 00:00:26.000
If you have even the most rudimentary blueprints,

00:00:26.000 --> 00:00:28.000
your odds of success go up quite a bit.

00:00:28.000 --> 00:00:31.000
But often we don't spend the time we would like

00:00:31.000 --> 00:00:34.000
or we don't have the resources to plan everything in meticulous detail,

00:00:34.000 --> 00:00:36.000
so at some point we just go out and write the source code,

00:00:36.000 --> 00:00:39.000
at which point you want to test the implementation.

00:00:39.000 --> 00:00:42.000
Let me give you another example of mistakes in testing

00:00:42.000 --> 00:00:47.000
by imagining that I'm going to make a mistake when writing our code

00:00:47.000 --> 00:00:49.000
to look up a variable in the environment.

00:00:49.000 --> 00:00:53.000
Remember that our environment is a tuple of a parent pointer

00:00:53.000 --> 00:00:56.000
and then a Python dictionary that maps variable names like x or y

00:00:56.000 --> 00:00:59.000
to values like 22 or 33.

00:00:59.000 --> 00:01:01.000
So when it comes time to look up a variable in the environment,

00:01:01.000 --> 00:01:03.000
we check and see if the variable name is in the dictionary.

00:01:03.000 --> 00:01:06.000
That's the oneth component of this tuple.

00:01:06.000 --> 00:01:08.000
And if it is, we just return it.

00:01:08.000 --> 00:01:10.000
So there are 3 cases.

00:01:10.000 --> 00:01:13.000
One possibility is we have a value for the variable.

00:01:13.000 --> 00:01:16.000
Another possibility is we are the global environment--

00:01:16.000 --> 00:01:19.000
our parent pointer is None--so if we don't have it, no one does.

00:01:19.000 --> 00:01:21.000
We'll just return None. There is no value.

00:01:21.000 --> 00:01:26.000
Otherwise, we call ourselves recursively and look up this same variable

00:01:26.000 --> 00:01:28.000
in our parent environment.

00:01:28.000 --> 00:01:32.000
So these lines represent the correct code, but let's say I make a mistake

00:01:32.000 --> 00:01:34.000
and I do the following implementation.

00:01:34.000 --> 00:01:37.000
When it comes time to look up a variable in the environment,

00:01:37.000 --> 00:01:40.000
if it's in my environment, I give you the answer.

00:01:40.000 --> 00:01:42.000
Otherwise, I return None.

00:01:42.000 --> 00:01:44.000
I never ask the parent.

00:01:44.000 --> 00:01:46.000
We know this is a bug because I'm making a big deal about it,

00:01:46.000 --> 00:01:49.000
but it's easy to make mistakes when you're writing the code on your own.

00:01:49.000 --> 00:01:54.000
Let's remember this mistake that I'm not going to look in my parent frame.

00:01:54.000 --> 00:01:58.000
Let's go through this program and get a feeling for what it should be in our mind.

00:01:58.000 --> 00:02:03.000
A is 1, and we call mistletoe with 5, so baldr has the value 5.

00:02:03.000 --> 00:02:05.000
Now I assign it, we look up the old value,

00:02:05.000 --> 00:02:08.000
5 + 1 is 6, so now baldr is 6.

00:02:08.000 --> 00:02:13.000
A gets a + 2, so 1 + 2 is 3, so our variables are 6 and 3.

00:02:13.000 --> 00:02:16.000
Baldr gets 6 + 3, so baldr is 9.

00:02:16.000 --> 00:02:19.000
So the answer should be 9.

00:02:19.000 --> 00:02:24.000
However, with the bug we're going to get an error

00:02:24.000 --> 00:02:27.000
because at some point we'll try to look up this variable a,

00:02:27.000 --> 00:02:29.000
and it won't be in our current environment frame.

00:02:29.000 --> 00:02:31.000
Current environment frame only has baldr.

00:02:31.000 --> 00:02:35.000
And instead of looking it up in our parent frame, we'll just return None

00:02:35.000 --> 00:02:39.000
and then we'll try to add None to numbers and we'll get the wrong result.

00:02:39.000 --> 00:02:41.000
We will be super sad.

00:02:41.000 --> 00:02:43.000
Baldr was a god in Norse mythology--

00:02:43.000 --> 00:02:49.000
so beautiful, so perfect that as a child his mother asked all of the other things in the world

00:02:49.000 --> 00:02:52.000
to promise not to hurt him. That's quite the protection deal.

00:02:52.000 --> 00:02:56.000
But she forgot to ask mistletoe,

00:02:56.000 --> 00:03:00.000
so everything in the world bounced off Baldr except for mistletoe.

00:03:00.000 --> 00:03:05.000
And in one of the stories in Norse mythology--it's variously told different ways--

00:03:05.000 --> 00:03:10.000
Loki, the trickster god, convinced another god to throw mistletoe at Baldr.

00:03:10.000 --> 00:03:12.000
Actually, a common element in the story is that they were having fun

00:03:12.000 --> 00:03:15.000
by chucking things at him--throwing rocks. They'd just bounce off or whatnot.

00:03:15.000 --> 00:03:19.000
That's a little morbid, but I guess if you're invulnerable it could be fun.

00:03:19.000 --> 00:03:22.000
The person being asked to throw didn't understand the situation,

00:03:22.000 --> 00:03:25.000
threw the mistletoe at Baldr, killing Baldr--very sad.

00:03:25.000 --> 00:03:30.000
In fact, Baldr is sometimes compared and contrasted to Achilles in Greek mythology,

00:03:30.000 --> 00:03:34.000
who famously was invulnerable on all parts of his body except the heel.

00:03:34.000 --> 00:03:38.000
So anyway, this program should print 9, but instead it's going to raise an error.

00:03:38.000 --> 00:03:41.000
Let's say we don't know where the bug is.

00:03:41.000 --> 00:03:43.000
We don't know it's in environment lookup.

00:03:43.000 --> 00:03:49.000
What can we do to refine this test case so that it more closely points to

00:03:49.000 --> 00:03:51.000
exactly what's going on?

00:03:51.000 --> 00:03:55.000
A common approach is actually just to comment out lines in your test case

00:03:55.000 --> 00:03:57.000
and see if it still breaks.

00:03:57.000 --> 00:04:00.000
For example, if I comment out these 3 lines in my test case

00:04:00.000 --> 00:04:03.000
so that mistletoe just returns baldr,

00:04:03.000 --> 00:04:06.000
we expect to write 5, and we will.

00:04:06.000 --> 00:04:12.000
So now we know the bug is triggered or the problem lies in 1 of these 3 lines.

00:04:12.000 --> 00:04:15.000
This is sometimes called fault localization

00:04:15.000 --> 09:59:59.000
because we're trying to zoom in on--localize--where the problem is.

