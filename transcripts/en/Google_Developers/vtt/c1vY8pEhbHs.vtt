WEBVTT
Kind: captions
Language: en

00:00:07.970 --> 00:00:10.890
CLAUDIO: Hi everyone, and
welcome back to the Google

00:00:10.890 --> 00:00:12.640
Drive SDK question time.

00:00:12.640 --> 00:00:14.760
My name is Claudio
and this is Ali.

00:00:14.760 --> 00:00:15.650
ALI: Hi everyone.

00:00:15.650 --> 00:00:17.860
CLAUDIO: We are two engineers in
the Google Drive developer

00:00:17.860 --> 00:00:19.060
relations team.

00:00:19.060 --> 00:00:22.830
Today we're going to show you
a tool we have developed

00:00:22.830 --> 00:00:25.410
called the OAuth
2.0 Playground.

00:00:25.410 --> 00:00:29.940
We think this tool will make
it easy for developers and

00:00:29.940 --> 00:00:33.300
users in general to
test the API.

00:00:33.300 --> 00:00:35.660
So it can be used for many APIs
but today we're going to

00:00:35.660 --> 00:00:37.760
use it for the Drive API.

00:00:37.760 --> 00:00:39.310
Ali, can you tell us a bit
more about the OAuth

00:00:39.310 --> 00:00:40.420
Playground?

00:00:40.420 --> 00:00:44.840
ALI: So we use OAuth 2.0 as
our best authorization

00:00:44.840 --> 00:00:46.990
mechanism for using
all our APIs.

00:00:46.990 --> 00:00:49.980
It's not only just us, it's
becoming an industry standard

00:00:49.980 --> 00:00:52.270
way of authorization.

00:00:52.270 --> 00:00:55.086
Now we developed this tool
called the OAuth 2.0

00:00:55.086 --> 00:00:59.670
Playground that allows you to
debug and test and experiment

00:00:59.670 --> 00:01:01.490
with the OAuth flow.

00:01:01.490 --> 00:01:04.220
If you've ever used OAuth, you
know it's not entirely simple.

00:01:04.220 --> 00:01:07.190
It's quite straightforward,
but there are a few steps.

00:01:07.190 --> 00:01:09.930
And what this tool does is it
allows you to go through the

00:01:09.930 --> 00:01:13.390
steps, it shows you how they
work, it shows you the full

00:01:13.390 --> 00:01:16.540
debugging output, and then it
allows you to make requests

00:01:16.540 --> 00:01:19.210
with APIs using the
authorization credentials that

00:01:19.210 --> 00:01:20.760
you've got.

00:01:20.760 --> 00:01:21.650
CLAUDIO: Let's see
how we can use it

00:01:21.650 --> 00:01:24.510
with a set of scenarios.

00:01:24.510 --> 00:01:28.000
So I think we can start from
the Google Drive UI.

00:01:28.000 --> 00:01:31.870
And the OAuth 2.0 Playground is
integrated with the UI, so

00:01:31.870 --> 00:01:35.290
we can start from there and see
how we can reach to the

00:01:35.290 --> 00:01:36.150
application.

00:01:36.150 --> 00:01:36.510
ALI: OK.

00:01:36.510 --> 00:01:40.460
So this is the Google Drive
user interface.

00:01:40.460 --> 00:01:42.630
I'm sure you're all
familiar with it.

00:01:42.630 --> 00:01:46.140
But one thing we've allowed with
the OAuth Playground is

00:01:46.140 --> 00:01:49.800
we allow you to open files from
the drive user interface

00:01:49.800 --> 00:01:52.190
in the OAuth Playground.

00:01:52.190 --> 00:01:52.440
OK.

00:01:52.440 --> 00:01:54.010
So here's a list of files.

00:01:54.010 --> 00:01:56.920
What I'm going to do is I'm
going to right-click on this.

00:01:56.920 --> 00:02:00.940
Because I've got the OAuth 2.0
Playground installed and a few

00:02:00.940 --> 00:02:03.882
other drive apps, I just click
Open with the OAuth 2.0

00:02:03.882 --> 00:02:05.170
Playground.

00:02:05.170 --> 00:02:09.570
And what happens is I get an
authorization request and it

00:02:09.570 --> 00:02:11.810
goes through the first
step of OAuth.

00:02:11.810 --> 00:02:14.750
So you can see here, if you're
familiar with OAuth 2.0, you

00:02:14.750 --> 00:02:19.540
know that once authorization
has happened, a redirect

00:02:19.540 --> 00:02:22.340
occurs to the server with
the code and the

00:02:22.340 --> 00:02:23.460
information I need.

00:02:23.460 --> 00:02:29.030
The code is here in this box and
this allows me to perform

00:02:29.030 --> 00:02:32.560
the next step of the OAuth 2.0
dance, which is to exchange

00:02:32.560 --> 00:02:33.940
the code for a token.

00:02:33.940 --> 00:02:37.370
And if you see, I've exchanged
the code here, just go back

00:02:37.370 --> 00:02:39.670
there, and I've got
this access token.

00:02:39.670 --> 00:02:41.760
Quickly copy that down, because
you'll be able to use

00:02:41.760 --> 00:02:43.770
it to access my data.

00:02:43.770 --> 00:02:46.170
It's OK, it's just a test
account so there's nothing

00:02:46.170 --> 00:02:48.200
really you can do in there.

00:02:48.200 --> 00:02:53.440
Once you've done that, you can
then make API requests.

00:02:53.440 --> 00:02:56.195
Now, because I opened this file
directly in the OAuth

00:02:56.195 --> 00:02:59.800
Playground, it's already
preloaded a request for me.

00:02:59.800 --> 00:03:01.290
And so what do I do?

00:03:01.290 --> 00:03:04.580
I make that API request
and I get a response.

00:03:04.580 --> 00:03:06.710
Let's just look at
that quickly.

00:03:06.710 --> 00:03:08.540
So what was the request
we made?

00:03:08.540 --> 00:03:15.755
Well, it was a Get here to that
URL using the code that--

00:03:15.755 --> 00:03:18.510
the access token that we just
obtained, which is there.

00:03:18.510 --> 00:03:19.610
And we get a response.

00:03:19.610 --> 00:03:20.690
It's a 200.

00:03:20.690 --> 00:03:21.800
Fantastic.

00:03:21.800 --> 00:03:24.860
The usual kind of headers,
content length.

00:03:24.860 --> 00:03:26.760
And then the JSON response.

00:03:26.760 --> 00:03:30.040
And if you've seen any of our
documentation or if you used

00:03:30.040 --> 00:03:33.490
our APIs, you know this
is fairly standard.

00:03:33.490 --> 00:03:35.700
There are few fields,
interesting ones.

00:03:35.700 --> 00:03:38.650
Download URL we'll have
a look at later.

00:03:38.650 --> 00:03:41.770
The title, which is test image,
which you can see

00:03:41.770 --> 00:03:45.200
corresponds to the title in
the drive user interface.

00:03:45.200 --> 00:03:47.890
And the MIME type of the file,
which is an image.png.

00:03:47.890 --> 00:03:48.790
Makes sense.

00:03:48.790 --> 00:03:53.090
We have some labels here that
refer to Boolean attributes on

00:03:53.090 --> 00:03:55.970
the file itself, whether it's
starred, whether it's hidden,

00:03:55.970 --> 00:03:56.770
whether it's trashed.

00:03:56.770 --> 00:03:57.850
That kind of thing.

00:03:57.850 --> 00:04:02.650
So this allows you immediately
to get into a situation where

00:04:02.650 --> 00:04:06.590
you are debugging driver API
calls directly from the drive

00:04:06.590 --> 00:04:07.770
user interface.

00:04:07.770 --> 00:04:10.400
CLAUDIO: That's perfect and that
works perfectly and it's

00:04:10.400 --> 00:04:12.500
super easy when you start
from the drive UI.

00:04:12.500 --> 00:04:15.720
So you just right-click on a
file and you open it from the

00:04:15.720 --> 00:04:16.730
OAuth Playground.

00:04:16.730 --> 00:04:19.110
But what if you want to start
directly from the OAuth

00:04:19.110 --> 00:04:20.769
Playground?

00:04:20.769 --> 00:04:21.720
ALI: OK.

00:04:21.720 --> 00:04:25.060
So this big X here resets
all the settings.

00:04:25.060 --> 00:04:25.590
That's great.

00:04:25.590 --> 00:04:27.220
So I've reset all of that.

00:04:27.220 --> 00:04:29.590
Now, when you do OAuth 2.0--

00:04:29.590 --> 00:04:32.130
and this was preselected for us
when we came from the drive

00:04:32.130 --> 00:04:33.710
user interface, but
you have to pick a

00:04:33.710 --> 00:04:35.470
scope or multiple scopes.

00:04:35.470 --> 00:04:38.230
And you see all our APIs are
listed here, but the one we're

00:04:38.230 --> 00:04:41.640
interested in is the
Google Drive scope.

00:04:41.640 --> 00:04:44.150
We click Authorize and, of
course, we're going to get

00:04:44.150 --> 00:04:46.450
through to the OAuth
authorization page.

00:04:46.450 --> 00:04:50.680
This is what a user would see to
say, do you give access to

00:04:50.680 --> 00:04:51.960
this application or not?

00:04:51.960 --> 00:04:54.045
And you can see the application
here is the OAuth

00:04:54.045 --> 00:04:54.260
Playground.

00:04:54.260 --> 00:04:58.760
So we allow access and we get
redirected back here with the

00:04:58.760 --> 00:05:01.550
code which we exchange
as before.

00:05:01.550 --> 00:05:03.110
CLAUDIO: So starting from here,
it's exactly the same

00:05:03.110 --> 00:05:03.795
flow as before.

00:05:03.795 --> 00:05:04.150
ALI: Exactly.

00:05:04.150 --> 00:05:05.080
It's slightly different.

00:05:05.080 --> 00:05:08.830
You might have noticed that
here, we have a refresh token,

00:05:08.830 --> 00:05:11.730
and previously we didn't
have a refresh token.

00:05:11.730 --> 00:05:15.800
This just means that we can have
offline access, ie, when

00:05:15.800 --> 00:05:19.450
our access token expires, we can
refresh it and get a new

00:05:19.450 --> 00:05:20.350
access token.

00:05:20.350 --> 00:05:22.160
So that's the only difference,
but apart from that, it's

00:05:22.160 --> 00:05:23.450
exactly the same.

00:05:23.450 --> 00:05:28.210
Now, what we can do here is we
can enter our custom request.

00:05:28.210 --> 00:05:30.680
That was preselected
for us before.

00:05:30.680 --> 00:05:33.130
But what we find is this really
useful button called

00:05:33.130 --> 00:05:35.270
Find Available Request URIs.

00:05:35.270 --> 00:05:40.540
And that gives an ordered list
of all the endpoints for this

00:05:40.540 --> 00:05:43.650
API with the various parameters
that you need.

00:05:43.650 --> 00:05:45.750
So what was the first thing
you wanted to do, Claudio?

00:05:45.750 --> 00:05:47.820
CLAUDIO: I would say that the
first thing is to list all the

00:05:47.820 --> 00:05:51.930
files the OAuth Playground
is allowed to open.

00:05:51.930 --> 00:05:56.600
So we look for a list files
method and that

00:05:56.600 --> 00:05:57.710
should be it, right?

00:05:57.710 --> 00:05:57.970
ALI: Yeah.

00:05:57.970 --> 00:05:58.980
That's just there.

00:05:58.980 --> 00:06:02.450
So you can click on the URI and
it preloads it in there.

00:06:02.450 --> 00:06:03.530
That's all we're doing.

00:06:03.530 --> 00:06:05.580
And it will show you that you
just need to make a Get to

00:06:05.580 --> 00:06:08.030
this request, send the request,

00:06:08.030 --> 00:06:09.230
and here's our response.

00:06:09.230 --> 00:06:11.580
Do you want talk about
this a bit, Claudio?

00:06:11.580 --> 00:06:11.790
CLAUDIO: Sure.

00:06:11.790 --> 00:06:13.760
So the response is
now field feed

00:06:13.760 --> 00:06:16.280
containing a number of entries.

00:06:16.280 --> 00:06:21.100
For each entry, as the one you
showed before, there is a set

00:06:21.100 --> 00:06:25.070
of attributes we set.

00:06:25.070 --> 00:06:29.460
Each of them has a number
of links to download the

00:06:29.460 --> 00:06:34.310
document, export a document in
different formats, and another

00:06:34.310 --> 00:06:37.150
set of metadata, like the
title, the MIME type.

00:06:37.150 --> 00:06:40.800
This case the one we're looking
at right now is a text

00:06:40.800 --> 00:06:42.300
file, a plain text file.

00:06:42.300 --> 00:06:44.290
And the same levels as before.

00:06:44.290 --> 00:06:50.700
So if this item has being
starred, if it's in trash,

00:06:50.700 --> 00:06:53.190
something else like
the extension--

00:06:53.190 --> 00:06:57.370
a very useful MD5 checksum,
which is a checksum for the

00:06:57.370 --> 00:06:58.240
content of the file.

00:06:58.240 --> 00:07:02.010
So you can use that field to
know if the content has

00:07:02.010 --> 00:07:08.300
changed and many other details,
including the name of

00:07:08.300 --> 00:07:14.230
the owner, the size of this file
on your storage, who is

00:07:14.230 --> 00:07:16.700
the user that last modified
it, and what are your

00:07:16.700 --> 00:07:19.290
permissions on this file?

00:07:19.290 --> 00:07:23.095
ALI: So this is interesting
because as you might may know

00:07:23.095 --> 00:07:25.240
in Google Drive, you have
two kinds of files.

00:07:25.240 --> 00:07:28.146
One are binary files that we
store the content, and the

00:07:28.146 --> 00:07:29.930
other type are Google
Docs files.

00:07:29.930 --> 00:07:33.510
Now, some of these attributes
are only available for binary

00:07:33.510 --> 00:07:38.390
files, for example, the original
file name, the amount

00:07:38.390 --> 00:07:40.080
of quota the file is using.

00:07:40.080 --> 00:07:42.320
Google Docs files and Google
Docs spreadsheets,

00:07:42.320 --> 00:07:43.800
presentations, drawings--

00:07:43.800 --> 00:07:46.465
all of these occupy zero
of your quota.

00:07:46.465 --> 00:07:47.890
That's just worth saying.

00:07:47.890 --> 00:07:50.640
So you get two slightly
different types, and these are

00:07:50.640 --> 00:07:53.190
only present-- and, of course,
the MD5 checksum is only

00:07:53.190 --> 00:07:54.980
present on these kind
of files as well.

00:07:54.980 --> 00:07:58.410
CLAUDIO: Can we download
a file from here?

00:07:58.410 --> 00:08:00.530
ALI: So it's a text file.

00:08:00.530 --> 00:08:04.450
So conveniently with the OAuth
Playground, you can't download

00:08:04.450 --> 00:08:05.830
binary files, unfortunately.

00:08:05.830 --> 00:08:07.430
That's a feature that we
should probably add.

00:08:07.430 --> 00:08:10.100
But you can download text files
because it's just text.

00:08:10.100 --> 00:08:14.570
So one thing we've got in here
is the download URL.

00:08:14.570 --> 00:08:18.520
So you can just click on this
download URL and you see it's

00:08:18.520 --> 00:08:20.640
preloaded now in the
Request URI.

00:08:20.640 --> 00:08:23.900
And if I click on Send the
Request, before I do it, it

00:08:23.900 --> 00:08:27.923
will make an authorized Get
request to this, which it

00:08:27.923 --> 00:08:28.670
needs to be authorized.

00:08:28.670 --> 00:08:30.480
Of course, we don't want to
share this file with just

00:08:30.480 --> 00:08:32.700
anyone, even if they know
what the link is.

00:08:32.700 --> 00:08:35.320
So we make that request
and fingers

00:08:35.320 --> 00:08:36.330
crossed, it should work.

00:08:36.330 --> 00:08:37.240
I think it's going to.

00:08:37.240 --> 00:08:42.140
You get a 200 with some
interesting information in the

00:08:42.140 --> 00:08:42.950
headers, actually.

00:08:42.950 --> 00:08:45.760
For example, the content
disposition which allows your

00:08:45.760 --> 00:08:48.905
application to create the
correctly named file, in this

00:08:48.905 --> 00:08:50.430
case hello.txt.

00:08:50.430 --> 00:08:52.530
And we go down to the bottom and
we see the content of the

00:08:52.530 --> 00:08:54.930
file, Hello Drive SDK users.

00:08:54.930 --> 00:08:57.640
CLAUDIO: Well, how
cheesy it that?

00:08:57.640 --> 00:08:58.940
ALI: Well, I didn't even
prepare it for this.

00:08:58.940 --> 00:08:59.540
I'm joking.

00:08:59.540 --> 00:09:01.090
I did prepare it for this.

00:09:01.090 --> 00:09:02.870
CLAUDIO: I believed you.

00:09:02.870 --> 00:09:05.230
ALI: So that's how you
use the Download URL

00:09:05.230 --> 00:09:06.120
and you can do that.

00:09:06.120 --> 00:09:08.240
I can't show you with any
binary files because,

00:09:08.240 --> 00:09:10.520
obviously, binary data would
not be rendered properly in

00:09:10.520 --> 00:09:11.330
this browser.

00:09:11.330 --> 00:09:13.150
So that's why we're using
a text file here.

00:09:13.150 --> 00:09:14.830
CLAUDIO: What about exporting
documents

00:09:14.830 --> 00:09:15.670
in different formats?

00:09:15.670 --> 00:09:18.490
We're not going to do it now,
but how can you do that?

00:09:18.490 --> 00:09:18.750
ALI: OK.

00:09:18.750 --> 00:09:24.870
So just to show you that,
let's just pick a file.

00:09:24.870 --> 00:09:27.360
Now for exporting, we're talking
about Google Docs

00:09:27.360 --> 00:09:28.470
types really, aren't we?

00:09:28.470 --> 00:09:29.940
So which one would you like?

00:09:29.940 --> 00:09:32.100
One of these Google Docs
files, I guess.

00:09:32.100 --> 00:09:33.170
Probably presentation?

00:09:33.170 --> 00:09:34.860
CLAUDIO: It's probably
presentation.

00:09:34.860 --> 00:09:35.950
ALI: Let's use that one.

00:09:35.950 --> 00:09:37.440
So if I just open that with--

00:09:37.440 --> 00:09:40.560
this saves me listing a
file, finding the ID,

00:09:40.560 --> 00:09:41.890
performing a Get on it.

00:09:41.890 --> 00:09:45.200
It just saves all of
that information.

00:09:45.200 --> 00:09:53.430
So let's get the file and we
see here in the file for

00:09:53.430 --> 00:10:00.550
Google Docs types, we will
have a export link.

00:10:00.550 --> 00:10:04.396
CLAUDIO: We sent a request
to Version 1 of the API.

00:10:04.396 --> 00:10:06.570
ALI: Rather than Version
2 of the API.

00:10:06.570 --> 00:10:08.072
I can just about see that.

00:10:08.072 --> 00:10:08.880
Let's see.

00:10:08.880 --> 00:10:11.190
Will that work?

00:10:11.190 --> 00:10:11.590
OK.

00:10:11.590 --> 00:10:15.350
So now we've got that and we see
among all these links, we

00:10:15.350 --> 00:10:16.730
will have a link--

00:10:16.730 --> 00:10:19.080
a set of links called
the export links.

00:10:19.080 --> 00:10:21.740
Now, these are great because
although you could probably

00:10:21.740 --> 00:10:26.150
try and construct that URL
manually, we strongly advise

00:10:26.150 --> 00:10:27.820
against you doing that.

00:10:27.820 --> 00:10:29.580
But for each type you
can export, in

00:10:29.580 --> 00:10:33.360
this case, txt, pdf,--

00:10:33.360 --> 00:10:34.710
CLAUDIO: OpenOffice--

00:10:34.710 --> 00:10:36.956
ALI: OpenOffice presentations.

00:10:36.956 --> 00:10:41.010
It offers you a different
download URL that you can use.

00:10:41.010 --> 00:10:42.330
CLAUDIO: Well actually,
that is not OpenOffice

00:10:42.330 --> 00:10:43.040
presentation.

00:10:43.040 --> 00:10:43.370
I lied.

00:10:43.370 --> 00:10:44.760
That is pptx.

00:10:44.760 --> 00:10:47.340
So it's a new format for
Microsoft PowerPoint

00:10:47.340 --> 00:10:48.530
presentation.

00:10:48.530 --> 00:10:49.780
ALI: Interesting.

00:10:51.310 --> 00:10:53.650
CLAUDIO: So you just take
that link, download the

00:10:53.650 --> 00:10:54.730
file from that link.

00:10:54.730 --> 00:10:57.380
And then you get the file
in exported format.

00:10:57.380 --> 00:10:57.870
ALI: Exactly.

00:10:57.870 --> 00:10:59.800
And we can't show you
because, of course,

00:10:59.800 --> 00:11:01.260
they are binary formats.

00:11:01.260 --> 00:11:04.520
CLAUDIO: And how can you know
what the available export

00:11:04.520 --> 00:11:05.970
formats are?

00:11:05.970 --> 00:11:06.220
ALI: OK.

00:11:06.220 --> 00:11:09.930
So this really depends on the
type of file, but we do list

00:11:09.930 --> 00:11:13.290
this information in what we
call-- and let's start again.

00:11:13.290 --> 00:11:16.650
We call the About feed.

00:11:16.650 --> 00:11:17.030
OK.

00:11:17.030 --> 00:11:19.090
While I'm doing this, do you
just want to explain a bit

00:11:19.090 --> 00:11:19.570
about the About feed.

00:11:19.570 --> 00:11:23.240
CLAUDIO: So in the Drive
API, we have many feeds

00:11:23.240 --> 00:11:26.140
that you can get.

00:11:26.140 --> 00:11:30.350
The one we have used so far is
the File Scope, which is the

00:11:30.350 --> 00:11:32.880
feed you have to use to list all
your files, to search for

00:11:32.880 --> 00:11:35.190
files, to download
files, and so on.

00:11:35.190 --> 00:11:37.410
But there are others, including
the Permissions

00:11:37.410 --> 00:11:41.050
feeds, which returns permissions
for a file or a

00:11:41.050 --> 00:11:47.440
folder, or the Changes feed,
which lists old changes that

00:11:47.440 --> 00:11:50.770
happen to your document list.

00:11:50.770 --> 00:11:52.800
But there is also another feed
called the About feed.

00:11:52.800 --> 00:11:56.010
The About feed includes--

00:11:56.010 --> 00:12:00.970
it's a read-only feed that
includes a set of metadata.

00:12:00.970 --> 00:12:04.920
So you can get the list of
available export formats for

00:12:04.920 --> 00:12:08.530
all of the source documents we
know, a list of reports from

00:12:08.530 --> 00:12:11.450
us for all the documents we
can import, and other

00:12:11.450 --> 00:12:12.640
information we're going
to show you

00:12:12.640 --> 00:12:14.790
when we get that feed.

00:12:14.790 --> 00:12:17.630
ALI: So as you can see, I've
just clicked on this link

00:12:17.630 --> 00:12:19.030
here, About.

00:12:19.030 --> 00:12:20.670
And the URL is easy.

00:12:20.670 --> 00:12:23.310
It's just a Get to
our API with the

00:12:23.310 --> 00:12:24.830
version and then About.

00:12:24.830 --> 00:12:26.010
And I click Get.

00:12:26.010 --> 00:12:28.990
And of course, I'm going to get
a 200 response back, and

00:12:28.990 --> 00:12:30.480
with loads of information.

00:12:30.480 --> 00:12:35.060
So just to shoot quickly to what
Claudio was talking about

00:12:35.060 --> 00:12:39.690
with the export formats, there
we see a list of export

00:12:39.690 --> 00:12:44.700
formats, each one specifying
the source, so you can see

00:12:44.700 --> 00:12:48.170
here that a drawing will export
to an svg, a jpg, a

00:12:48.170 --> 00:12:49.320
png, or a pdf.

00:12:49.320 --> 00:12:52.210
CLAUDIO: That's the native
Google Docs drawing, right?

00:12:52.210 --> 00:12:53.190
ALI: Exactly right.

00:12:53.190 --> 00:12:56.360
And then, likewise, a native
Google document that can

00:12:56.360 --> 00:13:04.080
export to OpenOffice, Word, HTML
obviously, a rich text, a

00:13:04.080 --> 00:13:05.700
plain text, or a PDF.

00:13:05.700 --> 00:13:09.390
So this is fairly predictable,
but it's really worth looking

00:13:09.390 --> 00:13:13.140
at this feed so you can know
what kind of files are going

00:13:13.140 --> 00:13:16.200
to be able to be exported from
the native documents.

00:13:16.200 --> 00:13:18.960
Pretty useful, I think, so
you can display the right

00:13:18.960 --> 00:13:21.310
thing to the user.

00:13:21.310 --> 00:13:23.160
CLAUDIO: What other
information do we

00:13:23.160 --> 00:13:25.480
get from this feed?

00:13:25.480 --> 00:13:29.810
One question we often get is,
how do I know how much disk

00:13:29.810 --> 00:13:33.030
space I have on Google Drive,
and how much of that disk

00:13:33.030 --> 00:13:34.420
space is available?

00:13:34.420 --> 00:13:38.550
ALI: So apart from metadata
about things the user can do,

00:13:38.550 --> 00:13:40.330
there's also metadata
about the account.

00:13:40.330 --> 00:13:42.280
It's kind of a miscellaneous
feed with the

00:13:42.280 --> 00:13:44.080
information that you need.

00:13:44.080 --> 00:13:46.330
And there are some quota
fields, as well.

00:13:46.330 --> 00:13:49.360
So the first one here
is quotaBytesTotal.

00:13:49.360 --> 00:13:51.810
That's how much total
quota the user has.

00:13:51.810 --> 00:13:53.620
In this case, it's Claudio.

00:13:53.620 --> 00:13:57.740
How much of the quota is being
used, which is a small amount.

00:13:57.740 --> 00:13:59.510
And how much is used in trash?

00:13:59.510 --> 00:14:02.570
And this helps you to, perhaps,
display to the user

00:14:02.570 --> 00:14:03.650
that they're running
out of quota.

00:14:03.650 --> 00:14:06.920
Or if the user in your
application wants to upload a

00:14:06.920 --> 00:14:10.050
huge file, well, you can predict
that there's not

00:14:10.050 --> 00:14:11.760
enough quota to upload
that file.

00:14:11.760 --> 00:14:13.740
So you can say, no,
I'm not going to

00:14:13.740 --> 00:14:14.780
perform this operation.

00:14:14.780 --> 00:14:16.800
Delete some files or buy
some more quota.

00:14:16.800 --> 00:14:21.420
CLAUDIO: And the value for the
quota used by files in trash

00:14:21.420 --> 00:14:25.830
can be useful for you to know
anytime how much disk space

00:14:25.830 --> 00:14:30.210
you can recover without deleting
any important file.

00:14:30.210 --> 00:14:32.060
So you know that all of those
files were deleted by the

00:14:32.060 --> 00:14:36.070
users, so if you empty the
trash, you just recovered some

00:14:36.070 --> 00:14:40.450
space and only lose
non-important things.

00:14:40.450 --> 00:14:44.230
ALI: So let's go through some
of these other ones because

00:14:44.230 --> 00:14:45.690
they are kind of interesting
for highlighting

00:14:45.690 --> 00:14:47.080
features of the API.

00:14:47.080 --> 00:14:49.750
So here I've got what
is a root folder ID.

00:14:49.750 --> 00:14:52.150
Can you tell us a bit about the
root folder and what the

00:14:52.150 --> 00:14:53.410
root folder ID would be?

00:14:53.410 --> 00:14:53.980
CLAUDIO: Oh, yes.

00:14:53.980 --> 00:14:57.350
So in Drive, files
can be organized

00:14:57.350 --> 00:14:58.610
in different folders.

00:14:58.610 --> 00:15:03.540
And a single file can have
multiple parents, which we

00:15:03.540 --> 00:15:04.610
call folders.

00:15:04.610 --> 00:15:07.420
And a folder, of course, could
have multiple children.

00:15:07.420 --> 00:15:11.810
And so when you try to draw the
structure of all files in

00:15:11.810 --> 00:15:14.530
Google Drive, this structure
would look like a tree.

00:15:14.530 --> 00:15:18.480
And, of course, as all trees,
at the top of it there would

00:15:18.480 --> 00:15:22.590
be a root folder that we want
to be always available for

00:15:22.590 --> 00:15:23.180
developers.

00:15:23.180 --> 00:15:25.170
So we have--

00:15:25.170 --> 00:15:28.320
the root folder is a folder
like any other folder.

00:15:28.320 --> 00:15:29.360
So it has an ID.

00:15:29.360 --> 00:15:31.830
It is actually a file like
all other folders.

00:15:31.830 --> 00:15:35.630
But at any time if you want to
know how to get the content of

00:15:35.630 --> 00:15:37.900
the root folder, if you want
to get some specific

00:15:37.900 --> 00:15:41.260
information about the root
folder, you can access that by

00:15:41.260 --> 00:15:42.820
using this ID.

00:15:42.820 --> 00:15:45.750
We also added some convenience
methods to do that.

00:15:45.750 --> 00:15:49.330
And actually, we added an alias
for the root folders.

00:15:49.330 --> 00:15:52.250
If you don't want to know or
if you don't want to check

00:15:52.250 --> 00:15:54.740
what the ID for the root folder
is, you can always

00:15:54.740 --> 00:15:58.960
refer to it using the string
root, which is

00:15:58.960 --> 00:16:00.870
quite easy to remember.

00:16:00.870 --> 00:16:02.470
ALI: So you have a choice
there which

00:16:02.470 --> 00:16:03.300
one you want to use.

00:16:03.300 --> 00:16:05.200
So thanks for explaining that.

00:16:05.200 --> 00:16:07.830
And I think this will
conveniently get us on to the

00:16:07.830 --> 00:16:09.620
next thing we want
to talk about.

00:16:09.620 --> 00:16:12.440
What's the largest change ID?

00:16:12.440 --> 00:16:15.860
CLAUDIO: So we have this other
feed that I briefly mentioned

00:16:15.860 --> 00:16:18.110
earlier, which is called
the changes feed.

00:16:18.110 --> 00:16:20.260
With the changes feed--

00:16:20.260 --> 00:16:22.790
what the changes feed contains
is a list of entries.

00:16:22.790 --> 00:16:28.120
And each entry represents
some changes to the

00:16:28.120 --> 00:16:29.830
documents list you have.

00:16:29.830 --> 00:16:34.110
So let's say you want to
synchronize your local files

00:16:34.110 --> 00:16:36.120
with the files in
Google Drive.

00:16:36.120 --> 00:16:40.610
Instead of having to download
all your files and check each

00:16:40.610 --> 00:16:45.110
of them with your local copy,
you can simply synchronize

00:16:45.110 --> 00:16:49.910
once by downloading all the
files, sorting the change ID

00:16:49.910 --> 00:16:53.680
corresponding to that moment
in time when you downloaded

00:16:53.680 --> 00:16:56.910
all the files, and then only
check the Changes feed, which

00:16:56.910 --> 00:17:02.400
will tell you something like
on the change ID x, a

00:17:02.400 --> 00:17:03.940
new file was added.

00:17:03.940 --> 00:17:10.190
On change x plus 1, this file
has been deleted or this file

00:17:10.190 --> 00:17:12.680
has changed its metadata
or its content.

00:17:12.680 --> 00:17:13.680
ALI: Shall we look?

00:17:13.680 --> 00:17:13.930
CLAUDIO: Yeah.

00:17:13.930 --> 00:17:17.510
Let's have a look at what the
Changes feed looks like.

00:17:17.510 --> 00:17:20.349
ALI: So back again we'll look
at the available feeds.

00:17:20.349 --> 00:17:22.329
You don't ever need to remember

00:17:22.329 --> 00:17:24.130
these URIs, of course.

00:17:24.130 --> 00:17:26.579
You just need to know where
to find it in--

00:17:26.579 --> 00:17:28.180
CLAUDIO: They're also pretty
easy to remember in case you

00:17:28.180 --> 00:17:31.200
want to, because they all have
the same RESTful structure.

00:17:31.200 --> 00:17:36.560
So they all start with
www.googleapis.com slash the

00:17:36.560 --> 00:17:39.520
name of the API, which is drive,
slash the version which

00:17:39.520 --> 00:17:43.845
is v2 since Google I/O, and
then slash the name of the

00:17:43.845 --> 00:17:45.970
feed, in this case is
going to be change.

00:17:45.970 --> 00:17:50.040
ALI: With any additional query
parameters or path parameters,

00:17:50.040 --> 00:17:52.190
but this feed doesn't
have any.

00:17:52.190 --> 00:17:55.750
So, again, the Change
feed is read-only.

00:17:55.750 --> 00:17:57.440
So I've done a Get there.

00:17:57.440 --> 00:18:01.340
And this time I get a list
of drive changes, a

00:18:01.340 --> 00:18:02.710
drive change list.

00:18:02.710 --> 00:18:04.470
And you can see them here.

00:18:04.470 --> 00:18:06.460
So as Claudio was saying,
each one--

00:18:06.460 --> 00:18:10.010
each change has an ID.

00:18:10.010 --> 00:18:14.220
CLAUDIO: We should say
it's increasing.

00:18:14.220 --> 00:18:17.390
It's an integer, it's a
monotonic increasing integer.

00:18:17.390 --> 00:18:21.560
So you can always trust that the
new ones will be greater

00:18:21.560 --> 00:18:22.340
than the previous ones.

00:18:22.340 --> 00:18:27.200
ALI: It's actually stored as
a string, but there we go.

00:18:27.200 --> 00:18:30.150
And then the file that the
change referred to.

00:18:30.150 --> 00:18:32.620
So that's by the file ID.

00:18:32.620 --> 00:18:36.130
Now, here is where we have a
choice of how we behave, how

00:18:36.130 --> 00:18:37.180
we were return with
this field.

00:18:37.180 --> 00:18:39.060
So a file could be deleted.

00:18:39.060 --> 00:18:42.490
Now, if it's being deleted,
obviously we don't return the

00:18:42.490 --> 00:18:45.210
file data, because that data
doesn't exist anymore.

00:18:45.210 --> 00:18:48.870
So the change itself describes
at the top level whether it

00:18:48.870 --> 00:18:52.480
refers to a delete operation
or a modify operation.

00:18:52.480 --> 00:18:56.360
And if it hasn't been deleted,
ie deleted is set to false, we

00:18:56.360 --> 00:19:00.340
also have the entire file
data in the feed here.

00:19:00.340 --> 00:19:01.820
CLAUDIO: By the entire
file they mean all

00:19:01.820 --> 00:19:02.710
the metadata, right?

00:19:02.710 --> 00:19:04.170
We don't return the content.

00:19:04.170 --> 00:19:04.680
ALI: Of course.

00:19:04.680 --> 00:19:05.760
So the content, no.

00:19:05.760 --> 00:19:08.830
Just the file metadata
is contained in here.

00:19:08.830 --> 00:19:11.270
CLAUDIO: This is consistent with
what we always do when

00:19:11.270 --> 00:19:13.420
retrieving the list of files.

00:19:13.420 --> 00:19:18.000
We never return the content
together with the metadata.

00:19:18.000 --> 00:19:20.590
We return the link to the
content and then you have to

00:19:20.590 --> 00:19:21.100
download it.

00:19:21.100 --> 00:19:23.780
Because remember, the metadata
is very small, so you can

00:19:23.780 --> 00:19:26.600
always get it, but the content
can be pretty big.

00:19:26.600 --> 00:19:29.650
A file in Google Drive can be
up to 10 gigabytes, so we

00:19:29.650 --> 00:19:33.010
don't want to return 100
gigabytes every time you want

00:19:33.010 --> 00:19:34.502
to know the list of
files you have.

00:19:34.502 --> 00:19:35.830
ALI: Exactly.

00:19:35.830 --> 00:19:39.340
So Claudio, tell me why there's
only one file in this

00:19:39.340 --> 00:19:40.470
list of changes.

00:19:40.470 --> 00:19:42.020
CLAUDIO: Because we only
changed one file.

00:19:42.020 --> 00:19:45.220
ALI: We only changed one file.

00:19:45.220 --> 00:19:45.550
OK.

00:19:45.550 --> 00:19:47.310
That's it.

00:19:47.310 --> 00:19:52.470
If we look at the actual file
itself, it was a Google Docs

00:19:52.470 --> 00:19:53.780
letter to the employees.

00:19:53.780 --> 00:19:54.223
CLAUDIO: Oh yeah.

00:19:54.223 --> 00:19:56.610
ALI: Good one.

00:19:56.610 --> 00:20:00.840
So here you can see the ID
Claudio was talking about, and

00:20:00.840 --> 00:20:03.510
that refers also to the largest
change ID that we've--

00:20:03.510 --> 00:20:06.520
CLAUDIO: Let's say you
synchronize your local status

00:20:06.520 --> 00:20:11.230
with this change, which is
number 1620, I think,

00:20:11.230 --> 00:20:13.840
if I can read it.

00:20:13.840 --> 00:20:17.420
So next time, we can
go to the next--

00:20:17.420 --> 00:20:19.360
starting from the largest
change ID, which

00:20:19.360 --> 00:20:21.960
is 2533, plus 1.

00:20:21.960 --> 00:20:22.440
ALI: Plus 1.

00:20:22.440 --> 00:20:25.450
Do you remember what the
query parametere is?

00:20:25.450 --> 00:20:25.955
CLAUDIO: Nope.

00:20:25.955 --> 00:20:26.260
ALI: No, neither do I.

00:20:26.260 --> 00:20:26.830
CLAUDIO: It's
[? not in any of ?] the

00:20:26.830 --> 00:20:28.200
documentation.

00:20:28.200 --> 00:20:32.490
Whenever you request the changes
feed, you can say,

00:20:32.490 --> 00:20:35.190
don't give me all of it, just
give me everything starting

00:20:35.190 --> 00:20:37.580
from ID number.

00:20:37.580 --> 00:20:40.565
And so next time, you want to
start from an ID number that

00:20:40.565 --> 00:20:42.150
is greater than that.

00:20:42.150 --> 00:20:42.760
OK, cool.

00:20:42.760 --> 00:20:44.170
I think that's perfect.

00:20:44.170 --> 00:20:47.420
I think there's only one
question left, which is, how

00:20:47.420 --> 00:20:48.710
do we get this?

00:20:48.710 --> 00:20:49.870
ALI: How do we get it?

00:20:49.870 --> 00:20:50.430
CLAUDIO: Yeah.

00:20:50.430 --> 00:20:55.065
ALI: Well, you just go to the
website, code.google.com/

00:20:55.065 --> 00:20:57.620
oauthplayground, and you
can just start using it

00:20:57.620 --> 00:20:58.740
immediately.

00:20:58.740 --> 00:21:01.160
If you have Google Drive--

00:21:01.160 --> 00:21:03.950
if you use Google Drive, then
you can also go to the Chrome

00:21:03.950 --> 00:21:08.120
Web Store and install the
OAuth 2.0 Google Drive

00:21:08.120 --> 00:21:10.350
application that is responsible
for this

00:21:10.350 --> 00:21:14.310
functionality where you can
open a file directly.

00:21:14.310 --> 00:21:15.050
OK.

00:21:15.050 --> 00:21:17.480
So that's in--

00:21:17.480 --> 00:21:20.520
well, we'll add the URL
somewhere so you can look at

00:21:20.520 --> 00:21:21.956
it when you're looking
at this.

00:21:21.956 --> 00:21:22.670
CLAUDIO: Perfect.

00:21:22.670 --> 00:21:23.610
Thank you very much, Ali.

00:21:23.610 --> 00:21:23.850
ALI: OK.

00:21:23.850 --> 00:21:24.470
Thank you, Claudio.

00:21:24.470 --> 00:21:25.500
And thanks for watching.

00:21:25.500 --> 00:21:26.750
Take care.

