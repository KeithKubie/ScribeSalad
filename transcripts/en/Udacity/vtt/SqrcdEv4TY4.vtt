WEBVTT
Kind: captions
Language: en

00:00:00.200 --> 00:00:02.969
So the barrier algorithm is going to work like this. When

00:00:02.969 --> 00:00:06.160
a thread arrives at a barrier, what it is going to

00:00:06.160 --> 00:00:08.780
do is, it is decrement the count exactly like, like

00:00:08.780 --> 00:00:11.670
in the counting barrier. It's going to decrement the count. But after

00:00:11.670 --> 00:00:14.600
it, its decrements the count, what it is going to do

00:00:14.600 --> 00:00:18.560
is, it's going to Spin on Sense reversal. Remember that, you

00:00:18.560 --> 00:00:21.440
know the sense flag is going to be True for. This

00:00:21.440 --> 00:00:25.180
barrier and once everybody has progressed to the next barrier the,

00:00:25.180 --> 00:00:29.116
the sense flag will become false. And therefore, let's say

00:00:29.116 --> 00:00:32.680
that we are executing the, the true barrier. In other words

00:00:32.680 --> 00:00:36.090
all the threads are executing some right here. The sense flag

00:00:36.090 --> 00:00:39.830
is true, and so if T1 comes along it decrements the

00:00:39.830 --> 00:00:42.400
count and it's not going to worry about whether the count

00:00:42.400 --> 00:00:44.490
has become zero or no. All that it is going to read

00:00:44.490 --> 00:00:48.070
on, is for the sense to reverse. So it's, it's saying

00:00:48.070 --> 00:00:50.970
well my sense is we are on the true value here

00:00:50.970 --> 00:00:53.890
I'll stay here until the sense becomes false. I'll

00:00:53.890 --> 00:00:57.540
know then that, that we've moved on to the next

00:00:57.540 --> 00:01:01.140
value point. That's the idea behind behind what all the

00:01:01.140 --> 00:01:04.090
processors will do except the last one. What did the

00:01:04.090 --> 00:01:06.900
last one do? Well, you guessed it. The last one,

00:01:06.900 --> 00:01:10.150
in addition to resetting the count to N, which was

00:01:10.150 --> 00:01:12.910
happening in the counting barrier, it was also going to reverse

00:01:12.910 --> 00:01:16.140
the sense flag. So, last processor comes along and finds

00:01:16.140 --> 00:01:19.810
that the count has become zero, it'll reset it to N.

00:01:19.810 --> 00:01:21.840
No problem with that. And then it is going to reverse the

00:01:21.840 --> 00:01:24.200
sense flag. It used to be True here, and it's going to

00:01:24.200 --> 00:01:27.060
reset it to False. And all the other guys are waiting on

00:01:27.060 --> 00:01:30.661
the sense reversal. So decrementing the count itself by chaining the,

00:01:30.661 --> 00:01:34.504
the count value, that doesn't do anything to these threads. Only

00:01:34.504 --> 00:01:39.100
when the sense flag is reversed, all these guys come out

00:01:39.100 --> 00:01:41.310
of the spindle and they can go on. So you can see

00:01:41.310 --> 00:01:45.020
now that we ha, have only one spinning

00:01:45.020 --> 00:01:49.300
episode per critical section or one spinning episode per

00:01:49.300 --> 00:01:52.720
Barrier. What we're doing is we decrement the count

00:01:52.720 --> 00:01:56.550
and spin on sense reversal, last guy decrements the

00:01:56.550 --> 00:01:58.880
count. When count goes to zero, resets it to

00:01:58.880 --> 00:02:02.060
N. And then it is going to reverse the sense.

00:02:02.060 --> 00:02:04.530
And that is the signal for all the reading

00:02:04.530 --> 00:02:06.420
processes to say well we can now go on

00:02:06.420 --> 00:02:09.340
to the next phase of the computation. So we've gotten

00:02:09.340 --> 00:02:11.830
rid of one of the spinning episodes that used to

00:02:11.830 --> 00:02:15.990
be there in the pure counting version of the centralized

00:02:15.990 --> 00:02:20.050
barrier. One of the centralized barrier is simple and intuitive

00:02:20.050 --> 00:02:22.050
as to what's going on and of course with the

00:02:22.050 --> 00:02:25.610
sense reversing barrier we got rid of two spinning episodes

00:02:25.610 --> 00:02:27.840
and got it down to to one. All of these

00:02:27.840 --> 00:02:31.440
are good things. But the problem is, that you have a

00:02:31.440 --> 00:02:34.136
si, shared variable for all the processors. And

00:02:34.136 --> 00:02:37.450
so if you have a large scale. multi-processor. And

00:02:37.450 --> 00:02:41.200
if you're running large-scale scientific applications with lots of

00:02:41.200 --> 00:02:43.880
parallel threads and they have to do a barrier,

00:02:43.880 --> 00:02:46.150
causes a lot of contention on the interconnection

00:02:46.150 --> 00:02:48.900
network. Because of this hot spot for this shared

00:02:48.900 --> 00:02:51.940
variable. And remember what our good friend Chuck Thacker

00:02:51.940 --> 00:02:56.130
said, less sharing means the multi-processor is more scalable.

00:02:57.690 --> 00:02:59.810
And that is something that we want to carry forward in

00:02:59.810 --> 00:03:03.030
thinking about how to get rid of this sharing that

00:03:03.030 --> 00:03:05.890
is happening among the large number of processes in order

00:03:05.890 --> 00:03:11.110
to build a more scalable version of a various synchronization algorithm.

