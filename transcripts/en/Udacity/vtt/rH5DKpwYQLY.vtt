WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.000
Here is my solution, I have the value function initialized. It has lots of 999s.

00:00:07.000 --> 00:00:11.000
The policy is a similar function in 3D.

00:00:11.000 --> 00:00:15.000
Then I have a function called policy2d, which is the one I'm later going to print.

00:00:15.000 --> 00:00:17.000
That's the same in 2D.

00:00:17.000 --> 00:00:23.000
Scrolling down, my update function is exactly the same as before for dynamic programming

00:00:23.000 --> 00:00:29.000
While change exists go through [x, y]'s and all orientations

00:00:29.000 --> 00:00:32.000
of which there are 4, so it's now a deeper loop.

00:00:32.000 --> 00:00:36.000
If you found the goal location, then update the value,

00:00:36.000 --> 00:00:39.000
and if there's an actual update, set "change" to True

00:00:39.000 --> 00:00:42.000
and also mark it as the goal location.

00:00:42.000 --> 00:00:45.000
Otherwise, if our grid cell is navigable at all,

00:00:45.000 --> 00:00:48.000
let's go through the 3 different actions and here's a tricky part

00:00:48.000 --> 00:00:52.000
how to make the action work but it works beautifully.

00:00:52.000 --> 00:00:54.000
We go through the 3 different actions.

00:00:54.000 --> 00:00:57.000
When we tag the ith action,

00:00:57.000 --> 00:01:04.000
we add the corresponding orientation change to our orientation modulo 4.

00:01:04.000 --> 00:01:07.000
It's a cyclic buffer, so this might subtract 1.

00:01:07.000 --> 00:01:10.000
Keeping it the same will add 1 to orientation.

00:01:10.000 --> 00:01:16.000
Then we apply the corresponding new motion model to x and y to obtain x2 and y2.

00:01:16.000 --> 00:01:21.000
Then over here is our model of a car that steers first and then moves.

00:01:21.000 --> 00:01:25.000
Scrolling down further, if we arrived at a valid grid cell in that it's still inside the grid

00:01:25.000 --> 00:01:34.000
and it's not an obstacle, then like before we add to the value

00:01:34.000 --> 00:01:37.000
the value of this new grid cell plus the cost of the corresponding action.

00:01:37.000 --> 00:01:40.000
This is non-uniform, depending on what action we pick now.

00:01:40.000 --> 00:01:43.000
This improves over the existing value.

00:01:43.000 --> 00:01:47.000
We set this value to be the new value, and we mark change as True.

00:01:47.000 --> 00:01:50.000
We also memorize the action name as before.

00:01:50.000 --> 00:01:53.000
This is all effectively the same code as we had before

00:01:53.000 --> 00:01:57.000
when we did dynamic programming in a 2-dimensional world.

00:01:57.000 --> 00:02:00.000
It gets us the value function, and it gets us the policy action.

00:02:00.000 --> 00:02:04.000
However, I printed out a 2-dimensional table, not a 3-dimensional table.

00:02:04.000 --> 00:02:09.000
To get to the 2-dimensional table, I now need to be sensitive of my initial state.

00:02:09.000 --> 00:02:12.000
Otherwise, it actually turns out to be undefined.

00:02:12.000 --> 00:02:17.000
Let me set the initial state to be x, y, and orientation.

00:02:17.000 --> 00:02:20.000
All I do now is run the policy.

00:02:20.000 --> 00:02:26.000
With the very first state, I copy over the policy form the 3-dimensional table

00:02:26.000 --> 00:02:29.000
into the 2-dimensional one, which will be this hash mark over here.

00:02:29.000 --> 00:02:32.000
While I haven't reached the goal state quite yet as indicated

00:02:32.000 --> 00:02:35.000
by checking for the star in my policy table.

00:02:35.000 --> 00:02:38.000
Now, my policy table has a hash mark R and L,

00:02:38.000 --> 00:02:40.000
but otherwise is the same as before.

00:02:40.000 --> 00:02:43.000
If it's a hash mark, we just keep our orientation the way it is.

00:02:43.000 --> 00:02:45.000
If it's R, I turn to the right. L is turn to the left.

00:02:45.000 --> 00:02:48.000
I apply my forward motion,

00:02:48.000 --> 00:02:52.000
and I then update my new x and y coordinates

00:02:52.000 --> 00:02:55.000
to be the corresponding after the motion,

00:02:55.000 --> 00:02:58.000
and I update my orientation to be o2.

00:02:58.000 --> 00:03:05.000
Finally, I copy the 3-dimensional symbol for my policy straight into the 2-dimensional array.

00:03:05.000 --> 00:03:07.000
This is the array that I finally print.

00:03:07.000 --> 00:03:10.000
The key insight here is to go from the 3-dimensional full policy

00:03:10.000 --> 00:03:14.000
to a 2-dimensional array I had to run the policy.

00:03:14.000 --> 00:03:18.000
That's something you would have done to get back this table over here.

00:03:18.000 --> 00:03:21.000
That's somewhat nontrivial. I didn't tell you this, but I hope you figured it out.

00:03:21.000 --> 09:59:59.000
But everything else is the same dynamic programming loop that you've seen before.

