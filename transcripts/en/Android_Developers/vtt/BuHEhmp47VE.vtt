WEBVTT
Kind: captions
Language: en

00:00:01.072 --> 00:00:02.530
LISA WRAY: Hi, my
name is Lisa Wray

00:00:02.530 --> 00:00:04.270
and I'm a Developer
Advocate at Google.

00:00:04.270 --> 00:00:07.690
Today I'm going to talk
about MediaRouteProvider.

00:00:07.690 --> 00:00:10.060
In the last episode, we talked
about the Android Support

00:00:10.060 --> 00:00:11.345
Library MediaRouter.

00:00:11.345 --> 00:00:13.720
That was the first part of
our series on the Media Router

00:00:13.720 --> 00:00:15.920
Framework, the API
for any Android app

00:00:15.920 --> 00:00:18.130
to cast its content via
supported media routes

00:00:18.130 --> 00:00:20.380
to remote devices.

00:00:20.380 --> 00:00:23.360
In this episode I'm going
to cover MediaRouteProvider.

00:00:23.360 --> 00:00:25.930
A MediaRouteProvider can be
used by other applications

00:00:25.930 --> 00:00:29.070
to control media content
playback equipment such as TVs,

00:00:29.070 --> 00:00:31.710
stereos, and home
theater components.

00:00:31.710 --> 00:00:35.125
If you are device manufacturer
then this DevByte is for you.

00:00:35.125 --> 00:00:37.420
Makers of media devices
can publish their products

00:00:37.420 --> 00:00:40.834
as media routes on Android by
implementing their own MRPs.

00:00:40.834 --> 00:00:43.000
The providers can then be
plugged into the framework

00:00:43.000 --> 00:00:44.900
and presented to any
Android application that

00:00:44.900 --> 00:00:46.436
supports media routes.

00:00:46.436 --> 00:00:47.810
This approach
allows applications

00:00:47.810 --> 00:00:49.770
to control content
playback equipment

00:00:49.770 --> 00:00:52.950
without knowing the specific and
possibly proprietary interfaces

00:00:52.950 --> 00:00:55.976
to manufacturers'
playback equipment.

00:00:55.976 --> 00:00:57.850
A sample implementation
of MediaRouteProvider

00:00:57.850 --> 00:01:00.020
is the Google Cast
SDK, which allows

00:01:00.020 --> 00:01:02.650
apps to cast content to Google
Cast-compatible receiver

00:01:02.650 --> 00:01:04.380
devices, such as Chromecast.

00:01:04.380 --> 00:01:06.130
If you've use one, you
know how satisfying

00:01:06.130 --> 00:01:08.160
it is to cast a video
from your mobile device

00:01:08.160 --> 00:01:10.390
to the big screen.

00:01:10.390 --> 00:01:12.689
First, an important note,
the media route framework

00:01:12.689 --> 00:01:15.230
we're examining here is the one
in the Support Library, which

00:01:15.230 --> 00:01:18.820
means it is backward compatible
with Android 2.1 and above.

00:01:18.820 --> 00:01:21.220
It supersedes the media
router classes in the Android

00:01:21.220 --> 00:01:23.320
framework, meaning
should not use them.

00:01:23.320 --> 00:01:27.910
Use the classes in the v7
Media Router Library, instead.

00:01:27.910 --> 00:01:29.540
So how do we get started?

00:01:29.540 --> 00:01:31.790
Subclass MediaRouteProvider
and the constructor

00:01:31.790 --> 00:01:33.290
we register one or
more media routes

00:01:33.290 --> 00:01:36.780
was using a media
route descriptor.

00:01:36.780 --> 00:01:38.691
Each route needs
control intent filters.

00:01:38.691 --> 00:01:40.190
These filters tell
applications that

00:01:40.190 --> 00:01:42.356
use your route what types
of features are supported,

00:01:42.356 --> 00:01:45.000
including playback controls
that play, pause, rewind, fast

00:01:45.000 --> 00:01:46.970
forward, et cetera;
queuing features

00:01:46.970 --> 00:01:49.630
or playlist management; and
session features, meaning

00:01:49.630 --> 00:01:53.400
Android device to playback
device connection management.

00:01:53.400 --> 00:01:55.796
You can also set many other
capabilities of the route,

00:01:55.796 --> 00:01:57.295
such as the playback
type, which can

00:01:57.295 --> 00:01:59.160
be remote playback
or secondary output.

00:01:59.160 --> 00:02:01.870
The media type can
be audio or video.

00:02:01.870 --> 00:02:03.930
The volume can be
fixed or variable.

00:02:03.930 --> 00:02:05.750
And intent filters
we just discussed

00:02:05.750 --> 00:02:08.470
define playback controls such
as basic controls, queuing,

00:02:08.470 --> 00:02:10.665
and session management.

00:02:10.665 --> 00:02:13.040
Next, you need to implement
a route controller class that

00:02:13.040 --> 00:02:15.710
extends MediaRouteProvider,
RouteController.

00:02:15.710 --> 00:02:18.110
This class handles the
actual media control requests

00:02:18.110 --> 00:02:20.272
from other applications
supported by your route.

00:02:20.272 --> 00:02:21.730
Anything you defined
in your intent

00:02:21.730 --> 00:02:24.190
filters including playback
controls, queueing,

00:02:24.190 --> 00:02:25.750
and session features.

00:02:25.750 --> 00:02:27.920
This RouteController
class acts as the wrapper

00:02:27.920 --> 00:02:31.160
for the proprietary interface to
your media playback equipment.

00:02:31.160 --> 00:02:32.550
This is where the magic happens.

00:02:32.550 --> 00:02:35.677
Your implementation will depend
on your specific media device.

00:02:35.677 --> 00:02:37.260
And finally, it
should be instantiated

00:02:37.260 --> 00:02:40.110
in this helpful named method
onCreateRouteController

00:02:40.110 --> 00:02:41.235
of your MediaRouteProvider.

00:02:43.320 --> 00:02:44.790
Next is the service wrapper.

00:02:44.790 --> 00:02:46.850
To enable other applications
to use the provider,

00:02:46.850 --> 00:02:49.290
a MediaRouteProvider should
be wrapped in a service.

00:02:49.290 --> 00:02:51.550
To do this, extend the
MediaRouteProvider service

00:02:51.550 --> 00:02:54.260
class and provide an instance
of your MediaRouteProvider

00:02:54.260 --> 00:02:56.542
from within the class.

00:02:56.542 --> 00:02:58.000
You can make a
media route provider

00:02:58.000 --> 00:03:00.530
private within the scope of
an app by simply calling media

00:03:00.530 --> 00:03:02.431
route [? add ?] provider,
no service needed.

00:03:02.431 --> 00:03:04.680
But in this example, we'll
make the MediaRouteProvider

00:03:04.680 --> 00:03:07.354
available to all
apps on the device.

00:03:07.354 --> 00:03:09.020
To do this, our
application must declare

00:03:09.020 --> 00:03:10.690
in the manifest a
service declaration

00:03:10.690 --> 00:03:13.810
for the MediaRouteProvider with
an intent filter for Android

00:03:13.810 --> 00:03:16.100
media MediaRouteProvider
service.

00:03:16.100 --> 00:03:19.520
This service is the same
one we just looked at.

00:03:19.520 --> 00:03:20.950
Finally, the
provider should watch

00:03:20.950 --> 00:03:22.580
for changes to the
discovery requests

00:03:22.580 --> 00:03:25.036
by implementing
onDiscoveryRequestChanged.

00:03:25.036 --> 00:03:27.410
In this method, we kick off
an update of the media routes

00:03:27.410 --> 00:03:30.210
the provider describes by
finding the routes that satisfy

00:03:30.210 --> 00:03:33.250
the new criteria specified
by the current request.

00:03:33.250 --> 00:03:36.520
To publish them we create a new
MediaRouteProvider descriptor

00:03:36.520 --> 00:03:39.270
with information about each
route and call setDescriptor

00:03:39.270 --> 00:03:39.960
again.

00:03:39.960 --> 00:03:42.320
This notifies the currently
registered callback.

00:03:42.320 --> 00:03:46.240
And this process usually
happens asynchronously.

00:03:46.240 --> 00:03:48.700
If you are a manufacturer
of media playback devices

00:03:48.700 --> 00:03:51.670
or you work with one, the
MediaRouteProvider is for you.

00:03:51.670 --> 00:03:54.884
Android devices everywhere can
be casting to your MRP shortly.

00:03:54.884 --> 00:03:56.800
Please take a look at
the docs and sample code

00:03:56.800 --> 00:03:58.010
and get started.

00:03:58.010 --> 00:03:59.040
My name is Lisa Wray.

00:03:59.040 --> 00:04:00.900
Thanks for watching.

