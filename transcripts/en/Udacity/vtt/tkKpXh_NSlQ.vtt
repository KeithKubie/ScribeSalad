WEBVTT
Kind: captions
Language: en

00:00:00.330 --> 00:00:02.050
Applying the Java plugin is simple.

00:00:02.050 --> 00:00:05.250
We only need to add a single
line to our build script.

00:00:05.250 --> 00:00:09.010
Now if we run Gradle tasks, we see
a whole wealth of capabilities that

00:00:09.010 --> 00:00:11.340
the Gradle Java plugin can handle for
us.

00:00:11.340 --> 00:00:15.890
There are four main tasks we'll
use most often, assemble, build,

00:00:15.890 --> 00:00:20.220
clean and scrolling down a bit
we'll use the test task as well.

00:00:20.220 --> 00:00:22.850
Assemble creates the output
we're interest in.

00:00:22.850 --> 00:00:26.820
This is usually a jar but
can also be more interesting artifacts.

00:00:26.820 --> 00:00:29.455
Check runs any tasks we've set up.

00:00:29.455 --> 00:00:32.064
Build depends on both assemble and
check.

00:00:32.064 --> 00:00:34.035
Finally, clean deletes
all the build output.

00:00:35.315 --> 00:00:37.455
We've got a trivial Java
project in this folder,

00:00:37.455 --> 00:00:39.965
with a single class called person.

00:00:39.965 --> 00:00:41.842
Let's try running Gradle assemble.

00:00:41.842 --> 00:00:43.392
Looks like it's done.

00:00:43.392 --> 00:00:46.362
Looks like the build directory
contains another four directories.

00:00:46.362 --> 00:00:48.132
Looking in the newly
created build directory,

00:00:48.132 --> 00:00:51.912
we find a classes subdirectory,
which holds our compiled classes.

00:00:51.912 --> 00:00:55.302
And a libs subdirectory,
which holds our newly created jar.

00:00:55.302 --> 00:00:56.622
Now you might be thinking to yourself,

00:00:56.622 --> 00:00:58.542
I thought there wasn't
going to be any magic.

00:00:58.542 --> 00:01:00.150
This sure seems like magic.

00:01:00.150 --> 00:01:02.490
How did Gradle know where
to find my source code?

00:01:02.490 --> 00:01:04.090
I promise there's no magic.

00:01:04.090 --> 00:01:06.930
Gradle just has a lot of
very sensible defaults.

00:01:06.930 --> 00:01:08.000
Like, for instance,

00:01:08.000 --> 00:01:12.260
it assumes that your JAVA sources live
in a folder named source name JAVA.

00:01:12.260 --> 00:01:14.660
This, like most everything else
in Gradle, can be configured,

00:01:14.660 --> 00:01:16.780
and we'll show how shortly.

00:01:16.780 --> 00:01:18.460
There's another important
thing to know how to do.

00:01:18.460 --> 00:01:21.240
And that's run
the project we just built.

00:01:21.240 --> 00:01:23.990
You might have noticed that the Java
plug-in doesn't add any tasks for

00:01:23.990 --> 00:01:27.780
running your code, and
that's because the JavaExec task type is

00:01:27.780 --> 00:01:30.520
already part of the core
Gradle functionality.

00:01:30.520 --> 00:01:33.880
The main property tells the JavaExec
task the path of your main class.

00:01:33.880 --> 00:01:37.670
And we'll talk about this class
path property very shortly.

00:01:37.670 --> 00:01:40.320
If we go ahead and
run this task, there we go.

00:01:40.320 --> 00:01:41.590
We see our task running, and

00:01:41.590 --> 00:01:43.660
then we see a greeting coming
from our newly compiled Java.

