WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.458
EMCEE: It's Colt
McAnlis, everyone.

00:00:06.930 --> 00:00:08.330
COLT MCANLIS: Hello.

00:00:08.330 --> 00:00:10.220
Good crowd today.

00:00:10.220 --> 00:00:12.354
Are we on the videos up here?

00:00:12.354 --> 00:00:14.178
No?

00:00:14.178 --> 00:00:16.219
I'm going to stand awkwardly
live on the internet

00:00:16.219 --> 00:00:16.810
for awhile.

00:00:16.810 --> 00:00:18.700
How about that?

00:00:18.700 --> 00:00:19.300
There we go.

00:00:19.300 --> 00:00:20.294
Fantastic.

00:00:20.294 --> 00:00:21.710
Hey, guys, really
quick, big round

00:00:21.710 --> 00:00:24.060
of applause for Jake and
Paul for emceeing this thing.

00:00:24.060 --> 00:00:24.559
Right?

00:00:24.559 --> 00:00:28.221
[APPLAUSE]

00:00:28.221 --> 00:00:29.720
COLT MCANLIS: It's
not every day you

00:00:29.720 --> 00:00:32.391
get charismatic people able
to keep a crowd entertained

00:00:32.391 --> 00:00:33.890
while the rest of
us babble on about

00:00:33.890 --> 00:00:35.710
technical matters all day.

00:00:35.710 --> 00:00:38.150
I am Colt McAnlis.

00:00:38.150 --> 00:00:41.354
Hopefully my bald
attenuation comes before me.

00:00:41.354 --> 00:00:43.020
By the way, really
quick before we talk,

00:00:43.020 --> 00:00:44.603
because this is sort
of the first talk

00:00:44.603 --> 00:00:46.630
I've done since the pirate talk.

00:00:46.630 --> 00:00:48.470
How many people have
seen my pirate talk?

00:00:48.470 --> 00:00:49.303
A round of applause.

00:00:49.303 --> 00:00:51.474
The people on the
screen can't hear you.

00:00:51.474 --> 00:00:51.974
[APPLAUSE]

00:00:51.974 --> 00:00:52.220
COLT MCANLIS: Yeah.

00:00:52.220 --> 00:00:52.800
That's it.

00:00:52.800 --> 00:00:55.140
So the reason I ask that is
I've been approached by like six

00:00:55.140 --> 00:00:57.181
people today, like, hey
what are you doing today?

00:00:57.181 --> 00:01:00.580
Is today National Speak Like
a Carny Day or something?

00:01:00.580 --> 00:01:01.370
What do you do?

00:01:01.370 --> 00:01:03.950
And I have to tell
you the story.

00:01:03.950 --> 00:01:06.430
After the pirate talk,
there was a serious memo

00:01:06.430 --> 00:01:08.200
sent between my
managers, like, he's not

00:01:08.200 --> 00:01:10.834
going to do something
crazy at Dev Summit, is he?

00:01:10.834 --> 00:01:12.750
They were checking the
schedule, like, no, no.

00:01:12.750 --> 00:01:14.010
It's just National Hello Day.

00:01:14.010 --> 00:01:15.235
He can't screw that up.

00:01:15.235 --> 00:01:18.070
[LAUGHTER]

00:01:18.070 --> 00:01:20.430
COLT MCANLIS: Hey, guys,
thanks for your time today.

00:01:20.430 --> 00:01:21.370
Thanks for listening so far.

00:01:21.370 --> 00:01:22.840
I know that lunch
is on the horizon.

00:01:22.840 --> 00:01:24.370
I'm going to try to keep you
entertained for the next 30

00:01:24.370 --> 00:01:25.520
minutes here.

00:01:25.520 --> 00:01:26.921
Really, #PERFMATTERS.

00:01:26.921 --> 00:01:27.420
Yes?

00:01:27.420 --> 00:01:28.340
A round of applause
for #PERFMATTERS.

00:01:28.340 --> 00:01:29.129
You follow this?

00:01:29.129 --> 00:01:29.670
You use this?

00:01:29.670 --> 00:01:31.382
[APPLAUSE]

00:01:31.382 --> 00:01:32.840
COLT MCANLIS: It
was a little weird

00:01:32.840 --> 00:01:35.430
having Linus come up here and
be like, perf is everything.

00:01:35.430 --> 00:01:36.346
And I'm like, oh crap.

00:01:36.346 --> 00:01:38.210
I didn't work on my
slides that well.

00:01:38.210 --> 00:01:40.694
So hopefully today we
can move through it.

00:01:40.694 --> 00:01:41.610
I've said this before.

00:01:41.610 --> 00:01:42.690
I'll say this a million times.

00:01:42.690 --> 00:01:45.023
Today we're going to be talking
about tooling techniques

00:01:45.023 --> 00:01:46.170
for the performance ninja.

00:01:46.170 --> 00:01:48.550
If you see anything
that inspires you,

00:01:48.550 --> 00:01:51.562
any fact, any statistic
you didn't know,

00:01:51.562 --> 00:01:53.270
go to your social
media outlet of choice,

00:01:53.270 --> 00:01:55.640
put #PERFMATTERS on
it, send it out today.

00:01:55.640 --> 00:01:58.280
Keep the discussion going.

00:01:58.280 --> 00:02:01.150
A year ago, think
about a year ago.

00:02:01.150 --> 00:02:04.452
We didn't even have mobile
performance tooling.

00:02:04.452 --> 00:02:05.285
That wasn't a thing.

00:02:05.285 --> 00:02:07.100
And in a year, we've
actually sort of built

00:02:07.100 --> 00:02:09.789
this community of angry,
angry web developers

00:02:09.789 --> 00:02:12.260
who want better
performance on the web.

00:02:12.260 --> 00:02:14.430
And really, that's
what today is about.

00:02:14.430 --> 00:02:17.370
Because I think we can
all agree that mobile

00:02:17.370 --> 00:02:18.940
is all that matters right now.

00:02:18.940 --> 00:02:21.380
If you're not spending 90%
of your time optimizing

00:02:21.380 --> 00:02:23.805
your mobile website for the
next five billion humans

00:02:23.805 --> 00:02:25.430
that are going to be
coming on the web,

00:02:25.430 --> 00:02:26.860
you're kind of
wasting your time.

00:02:26.860 --> 00:02:28.859
So let's all just come
together [INHALING SOUND]

00:02:28.859 --> 00:02:31.470
big, deep breath in, my
website is slow on mobile.

00:02:31.470 --> 00:02:31.980
I accept it.

00:02:31.980 --> 00:02:32.479
Come on.

00:02:32.479 --> 00:02:33.324
Everyone say it.

00:02:33.324 --> 00:02:34.990
No?

00:02:34.990 --> 00:02:35.490
Nobody?

00:02:35.490 --> 00:02:35.840
OK.

00:02:35.840 --> 00:02:36.340
That's fine.

00:02:36.340 --> 00:02:36.841
[LAUGHTER]

00:02:36.841 --> 00:02:37.965
COLT MCANLIS: That's right.

00:02:37.965 --> 00:02:38.540
Self-denial.

00:02:38.540 --> 00:02:39.040
It's a step.

00:02:39.040 --> 00:02:39.590
You'll get there.

00:02:39.590 --> 00:02:40.070
Don't worry.

00:02:40.070 --> 00:02:41.111
It took me a little time.

00:02:41.111 --> 00:02:43.012
I lost my hair,
it comes through.

00:02:43.012 --> 00:02:44.470
Really, mobile is
all that matters.

00:02:44.470 --> 00:02:46.920
And performance hasn't
been good on mobile,

00:02:46.920 --> 00:02:49.386
and I think we all need to
be very blunt about that.

00:02:49.386 --> 00:02:51.010
And I think one of
the reasons is this.

00:02:51.010 --> 00:02:52.980
I love this quote by Ilya.

00:02:52.980 --> 00:02:54.770
He said this in a blog
post a while ago--

00:02:54.770 --> 00:02:56.960
"What you can measure,
you can optimize."

00:02:56.960 --> 00:03:00.410
And this is really sort
of a telling thing.

00:03:00.410 --> 00:03:02.590
Because if you think
about it, we really

00:03:02.590 --> 00:03:04.850
haven't had the ability
to measure anything

00:03:04.850 --> 00:03:06.060
in the mobile web.

00:03:06.060 --> 00:03:08.260
Again, this time
last year we didn't

00:03:08.260 --> 00:03:10.010
have the concept of
being able to get

00:03:10.010 --> 00:03:12.591
data of a web page running
on a mobile device.

00:03:12.591 --> 00:03:14.090
But thankfully,
today, with the help

00:03:14.090 --> 00:03:16.580
of ADB extension
and Chrome DevTools,

00:03:16.580 --> 00:03:19.020
we actually have the
ability to load a website

00:03:19.020 --> 00:03:21.920
on a mobile device and actually
get the information back

00:03:21.920 --> 00:03:22.985
into Chrome DevTools.

00:03:22.985 --> 00:03:25.610
So you can get the same power of
your debugging on your desktop

00:03:25.610 --> 00:03:28.460
and actually see the
performance characteristics.

00:03:28.460 --> 00:03:29.937
Now this is good and bad.

00:03:29.937 --> 00:03:31.520
It's good because
you have this power.

00:03:31.520 --> 00:03:34.350
It's bad that everyone's
starting to know about this.

00:03:34.350 --> 00:03:37.150
So if your website is slow,
there's no more excuses.

00:03:37.150 --> 00:03:38.104
Sorry.

00:03:38.104 --> 00:03:40.020
I actually had someone
come to my desk one day

00:03:40.020 --> 00:03:40.970
and they're like, wait a minute.

00:03:40.970 --> 00:03:41.820
Wait a minute.

00:03:41.820 --> 00:03:44.805
We have this power, so why
are websites still slow?

00:03:44.805 --> 00:03:46.670
It's the internet, buddy.

00:03:46.670 --> 00:03:48.719
So once you get the
ability to actually go

00:03:48.719 --> 00:03:50.260
through this process
and actually get

00:03:50.260 --> 00:03:52.843
these powerful tools giving you
the information that you need,

00:03:52.843 --> 00:03:55.090
it's worth pointing out
that that's not enough.

00:03:55.090 --> 00:03:58.696
So for those of you who aren't
versed in this repetitive

00:03:58.696 --> 00:04:00.070
loop of performance
optimization,

00:04:00.070 --> 00:04:01.528
you need to understand
that there's

00:04:01.528 --> 00:04:04.120
three steps, three steps
to performance tooling.

00:04:04.120 --> 00:04:08.520
And it starts at the basic
form, which is go get data.

00:04:08.520 --> 00:04:11.740
If someone says, hey it's slow,
you've got go figure out why.

00:04:11.740 --> 00:04:14.240
So you have to go use DevTools,
collect as much information,

00:04:14.240 --> 00:04:15.640
and this usually ends
up being some sort

00:04:15.640 --> 00:04:17.490
of huge sheet of
floating point numbers.

00:04:17.490 --> 00:04:19.200
And this actually
goes into stage two.

00:04:19.200 --> 00:04:21.399
A huge sheet of floating point
numbers really kind of sucks.

00:04:21.399 --> 00:04:23.530
No one wants that, because
it doesn't tell you anything.

00:04:23.530 --> 00:04:25.030
This goes into the
number two, which

00:04:25.030 --> 00:04:28.127
is you have to gather insight
from that sheet of numbers.

00:04:28.127 --> 00:04:29.710
You have to figure
out, wait a minute.

00:04:29.710 --> 00:04:32.240
We're seeing all of these
waterfall characteristics,

00:04:32.240 --> 00:04:35.390
and it's pointing at this
piece of data over here.

00:04:35.390 --> 00:04:36.350
That's the insight.

00:04:36.350 --> 00:04:39.880
Our site is slow because we have
too many megabytes on the wire.

00:04:39.880 --> 00:04:41.677
That's causing
six-second load times.

00:04:41.677 --> 00:04:43.260
That's why we're
about to go bankrupt.

00:04:43.260 --> 00:04:45.000
Woe is me.

00:04:45.000 --> 00:04:46.670
Of course, these
are the easy parts.

00:04:46.670 --> 00:04:48.160
Chrome DevTools
can really help you

00:04:48.160 --> 00:04:49.500
get far enough along in this.

00:04:49.500 --> 00:04:51.250
And the really hard
part is stage three.

00:04:51.250 --> 00:04:53.640
And anyone in here
who's dealt with this

00:04:53.640 --> 00:04:55.862
realizes that the third
one, which is action,

00:04:55.862 --> 00:04:56.570
is the hard part.

00:04:56.570 --> 00:04:58.780
This is where you take all the
numbers and all the insight

00:04:58.780 --> 00:04:59.863
and you go, wait a minute.

00:04:59.863 --> 00:05:02.756
It's because we have this
five-megabyte GIF animating

00:05:02.756 --> 00:05:04.380
on our main page that
we can't do this.

00:05:04.380 --> 00:05:06.560
And you have to go over to
the designers and the artists

00:05:06.560 --> 00:05:07.935
and you say, I
need this removed.

00:05:07.935 --> 00:05:10.548
And they go, nope.

00:05:10.548 --> 00:05:12.485
A round of applause if
that's happened to you.

00:05:12.485 --> 00:05:12.984
Yeah?

00:05:12.984 --> 00:05:14.534
[APPLAUSE]

00:05:14.534 --> 00:05:16.450
COLT MCANLIS; See, I've
to keep you guys awake

00:05:16.450 --> 00:05:17.430
before lunch gets here.

00:05:17.430 --> 00:05:20.050
One guy in the back
is like, sandwiches!

00:05:20.050 --> 00:05:21.300
This is really the tough part.

00:05:21.300 --> 00:05:22.940
And probably the most
important part of this loop,

00:05:22.940 --> 00:05:24.344
though, is actually
repeating it.

00:05:24.344 --> 00:05:26.260
More times than, not
what you're going to find

00:05:26.260 --> 00:05:28.940
is that your website does
not have a single performance

00:05:28.940 --> 00:05:32.240
problem, but it has a plethora
of performance problems.

00:05:32.240 --> 00:05:35.279
Uncovering one perf problem
and fixing it is not enough,

00:05:35.279 --> 00:05:37.320
because chances are it
was hiding something else.

00:05:37.320 --> 00:05:39.050
And once you've
unturned that stone,

00:05:39.050 --> 00:05:40.300
you realize, oh wait a minute.

00:05:40.300 --> 00:05:43.524
We've got an even bigger problem
that we need to fight below it.

00:05:43.524 --> 00:05:45.190
Now once you sort of
realize that you're

00:05:45.190 --> 00:05:48.880
going to have to continually go
through this process of gather,

00:05:48.880 --> 00:05:51.580
insight, action, repeat,
gather, insight, action,

00:05:51.580 --> 00:05:55.204
you start getting a sense that
the world is not that easy.

00:05:55.204 --> 00:05:56.870
And what we're going
to talk about today

00:05:56.870 --> 00:05:58.610
is only the gather
and insight parts.

00:05:58.610 --> 00:06:01.150
You can go argue the action
parts with your web designers

00:06:01.150 --> 00:06:02.390
later.

00:06:02.390 --> 00:06:04.050
So when you're
doing this, you need

00:06:04.050 --> 00:06:05.758
to come to the
understanding that there's

00:06:05.758 --> 00:06:08.420
no longer a single pillar
of web performance.

00:06:08.420 --> 00:06:10.250
Up until now, we've
really been talking

00:06:10.250 --> 00:06:12.512
about networking, load time.

00:06:12.512 --> 00:06:14.220
This has been the
currency that we've all

00:06:14.220 --> 00:06:17.510
traded amongst our
web developer brethren

00:06:17.510 --> 00:06:19.579
as the metric of
performance on our sites.

00:06:19.579 --> 00:06:21.370
Hey, dude, how fast
does your website load?

00:06:21.370 --> 00:06:22.370
Dude, two seconds, dude.

00:06:22.370 --> 00:06:23.774
High five. [HIGH FIVING SOUND]

00:06:23.774 --> 00:06:24.440
Anybody do that?

00:06:24.440 --> 00:06:25.380
No one?

00:06:25.380 --> 00:06:25.880
OK.

00:06:25.880 --> 00:06:27.046
Maybe I'm in the wrong room.

00:06:27.046 --> 00:06:27.796
OK.

00:06:27.796 --> 00:06:29.170
But really what
we've been seeing

00:06:29.170 --> 00:06:31.960
is how web apps have
developed, and the need,

00:06:31.960 --> 00:06:35.220
and what users have demanded
from our web applications

00:06:35.220 --> 00:06:36.602
have brought these other two.

00:06:36.602 --> 00:06:37.560
The next one is render.

00:06:37.560 --> 00:06:39.268
Linus stood on stage
today and said that.

00:06:39.268 --> 00:06:42.370
Rendering is a performance
problem on mobile right now,

00:06:42.370 --> 00:06:43.380
and we need to fix that.

00:06:43.380 --> 00:06:44.090
And guess what?

00:06:44.090 --> 00:06:46.820
Now we finally have tools that
allow you as the developer

00:06:46.820 --> 00:06:49.680
to take control of your
rendering performance,

00:06:49.680 --> 00:06:51.814
figure out the problems
that actually address them.

00:06:51.814 --> 00:06:53.230
And then, of course,
the final one

00:06:53.230 --> 00:06:55.120
is compute, network,
render, and compute.

00:06:55.120 --> 00:06:58.160
Compute has been one of the
brethren of network over time.

00:06:58.160 --> 00:07:00.700
JavaScript performance, you
see it over and over again.

00:07:00.700 --> 00:07:03.950
Nowadays, VMs are so
fast and so powerful,

00:07:03.950 --> 00:07:05.360
you generally don't see that.

00:07:05.360 --> 00:07:07.234
Of course, once you put
it on a mobile device

00:07:07.234 --> 00:07:08.870
and you get slower
compute speed,

00:07:08.870 --> 00:07:11.310
you may run into some problems.

00:07:11.310 --> 00:07:12.871
So I generally hate doing this.

00:07:12.871 --> 00:07:14.370
I hate standing on
stage, and I hate

00:07:14.370 --> 00:07:16.682
telling you, go fix
these three things.

00:07:16.682 --> 00:07:18.890
But today I'm going to make
an exception, because I'm

00:07:18.890 --> 00:07:20.850
particularly bald
and angry today,

00:07:20.850 --> 00:07:23.100
and I figure I can get away
with stuff when I do that.

00:07:23.100 --> 00:07:24.730
So here is your hit list.

00:07:24.730 --> 00:07:27.330
We like to joke in the Perf
Squad that there's a hit list.

00:07:27.330 --> 00:07:30.470
Like if we had a performance
assassin on your team

00:07:30.470 --> 00:07:33.090
and he needed to take out three
things, these would be it.

00:07:33.090 --> 00:07:34.930
So under the
networking list, you

00:07:34.930 --> 00:07:36.785
should be optimizing
critical path.

00:07:36.785 --> 00:07:38.910
And I know this is the tip
of the iceberg question.

00:07:38.910 --> 00:07:39.880
We'll get into that in a minute.

00:07:39.880 --> 00:07:42.030
For the render list, reduce
your number of paints.

00:07:42.030 --> 00:07:45.390
And for compute, reduce
JavaScript execution time.

00:07:45.390 --> 00:07:46.547
These are the things.

00:07:46.547 --> 00:07:48.380
If you come away with
nothing from this talk

00:07:48.380 --> 00:07:50.970
other than that angry
bald man yells loudly,

00:07:50.970 --> 00:07:52.520
come away with
these three things.

00:07:52.520 --> 00:07:54.480
This is where you need to
focus your performance time.

00:07:54.480 --> 00:07:55.910
Now what we're going to do
for the rest of the talk

00:07:55.910 --> 00:07:58.060
here is we're going to talk
a little bit about where

00:07:58.060 --> 00:07:59.434
these things come
from and how we

00:07:59.434 --> 00:08:02.080
can dive in to diagnose them.

00:08:02.080 --> 00:08:04.990
So let's start with
network, load time.

00:08:04.990 --> 00:08:06.500
Again, this is where we've been.

00:08:06.500 --> 00:08:09.780
Unfortunately, "load time"
is a really bad, bad term.

00:08:09.780 --> 00:08:12.150
Measuring your performance
of your network speed

00:08:12.150 --> 00:08:14.830
by a load time is like
measuring your cholesterol

00:08:14.830 --> 00:08:17.470
by how many doughnuts
you ate today.

00:08:17.470 --> 00:08:20.010
It's an insanely
complex procedure

00:08:20.010 --> 00:08:23.390
with many dependent
parts working together.

00:08:23.390 --> 00:08:26.860
This is just one spec for
timing on just getting data

00:08:26.860 --> 00:08:27.730
off the wire.

00:08:27.730 --> 00:08:29.980
It doesn't even talk about
rendering or anything else.

00:08:29.980 --> 00:08:31.750
So we actually have to change
our vocabulary a little bit

00:08:31.750 --> 00:08:32.159
here.

00:08:32.159 --> 00:08:33.575
And we could
actually probably use

00:08:33.575 --> 00:08:35.719
a better term, which
is "critical path."

00:08:35.719 --> 00:08:37.010
So it's not just about loading.

00:08:37.010 --> 00:08:40.429
It's about what pixels are
needed to get to the screen.

00:08:40.429 --> 00:08:42.130
So basically you
have a mobile device,

00:08:42.130 --> 00:08:44.580
and it's kind of waiting around.

00:08:44.580 --> 00:08:46.090
The user types in
some information.

00:08:46.090 --> 00:08:48.250
That goes sent off
into the intertubules,

00:08:48.250 --> 00:08:50.872
amongst all the cats and
everything else out there,

00:08:50.872 --> 00:08:51.830
and it requests a site.

00:08:51.830 --> 00:08:53.246
The site, of course,
is then going

00:08:53.246 --> 00:08:55.300
to return some sort
of markup form.

00:08:55.300 --> 00:08:57.870
Now what's going to happen here
is that your page says, cool.

00:08:57.870 --> 00:08:58.750
I've got HTML.

00:08:58.750 --> 00:09:00.430
Let me go start
parsing all this stuff

00:09:00.430 --> 00:09:02.080
so that I can start painting.

00:09:02.080 --> 00:09:04.480
Unfortunately, the web
isn't that way anymore.

00:09:04.480 --> 00:09:07.050
All the content isn't just
contained in your HTML.

00:09:07.050 --> 00:09:11.390
It's actually a complex
dance of other resources.

00:09:11.390 --> 00:09:13.840
And so we can't
actually build our HTML

00:09:13.840 --> 00:09:14.900
to start rendering yet.

00:09:14.900 --> 00:09:17.970
Instead, we have to wait for
all of these other dependencies

00:09:17.970 --> 00:09:18.940
to get resolved.

00:09:18.940 --> 00:09:20.650
This is the critical path.

00:09:20.650 --> 00:09:22.710
If you haven't heard
this term before,

00:09:22.710 --> 00:09:24.130
this is the critical path.

00:09:24.130 --> 00:09:27.830
It's the resolution of the
dependencies of your assets

00:09:27.830 --> 00:09:30.800
to get the first
pixel on your screen.

00:09:30.800 --> 00:09:32.550
Because if you have
JavaScript that you're

00:09:32.550 --> 00:09:34.591
loading that's going to
affect how the DOM exists

00:09:34.591 --> 00:09:36.650
or the CSS classes,
that's got to be present.

00:09:36.650 --> 00:09:39.779
If you've got 50 CSS classes,
that's got to be present.

00:09:39.779 --> 00:09:41.320
So this is what you
need to optimize,

00:09:41.320 --> 00:09:43.486
is the number of dependencies
in your critical path.

00:09:43.486 --> 00:09:46.322
And this really comes
from two to three places.

00:09:46.322 --> 00:09:48.780
The first one is that, once we
put out a request like this,

00:09:48.780 --> 00:09:50.946
you've got a lot of
dependencies to other resources.

00:09:50.946 --> 00:09:53.390
The number of requests
that you send out there

00:09:53.390 --> 00:09:56.270
actually has an implicit
overhead for each one of them,

00:09:56.270 --> 00:09:58.930
which even gets worse
on mobile devices.

00:09:58.930 --> 00:10:01.300
When you've got a 3G
network radio that's

00:10:01.300 --> 00:10:04.320
spinning up and going through
cell towers and all sort

00:10:04.320 --> 00:10:07.510
of other arcane magical
technologies that existed back

00:10:07.510 --> 00:10:10.360
in the caveman days, that
we still have in our pocket,

00:10:10.360 --> 00:10:13.610
oddly enough, that has
overhead associated with it.

00:10:13.610 --> 00:10:15.140
So the more requests
you're doing,

00:10:15.140 --> 00:10:17.800
the additional fat you're
adding to your time

00:10:17.800 --> 00:10:19.724
for each one of those requests.

00:10:19.724 --> 00:10:21.640
So if you're looking at
this, you need to say,

00:10:21.640 --> 00:10:23.440
OK, one of our first
things we need to do

00:10:23.440 --> 00:10:24.800
is reduce the number
of requests we're

00:10:24.800 --> 00:10:27.300
doing to get assets, which
kind of comes back to the fact

00:10:27.300 --> 00:10:30.120
that you have to reduce the
complexity of asset dependency

00:10:30.120 --> 00:10:30.966
on your page.

00:10:30.966 --> 00:10:32.090
I see some people sleeping.

00:10:32.090 --> 00:10:33.665
Do I need to clap?

00:10:33.665 --> 00:10:34.165
No.

00:10:34.165 --> 00:10:34.700
Kidding.

00:10:34.700 --> 00:10:35.199
I like that.

00:10:35.199 --> 00:10:35.855
Who did that?

00:10:35.855 --> 00:10:38.094
You get a t-shirt afterwards.

00:10:38.094 --> 00:10:39.760
Everyone else is like,
I'm clapping now.

00:10:39.760 --> 00:10:41.810
Free stuff.

00:10:41.810 --> 00:10:43.150
Let's go to the second one here.

00:10:43.150 --> 00:10:45.608
So once you've actually got
those requests out on the wire,

00:10:45.608 --> 00:10:47.270
the next problem is page weight.

00:10:47.270 --> 00:10:48.640
How fat are your assets.

00:10:48.640 --> 00:10:50.300
And so I've kind of
done a lot of study

00:10:50.300 --> 00:10:52.360
in this over the past couple
of months about compression

00:10:52.360 --> 00:10:52.860
on the web.

00:10:52.860 --> 00:10:55.910
Anyone read my series,
"Compression on the Web"?

00:10:55.910 --> 00:10:56.430
More?

00:10:56.430 --> 00:10:56.860
Yes?

00:10:56.860 --> 00:10:57.320
[APPLAUSE]

00:10:57.320 --> 00:10:59.778
COLT MCANLIS: I saw one dude
throw up the 10's in the back.

00:10:59.778 --> 00:11:01.630
I like you, dude.

00:11:01.630 --> 00:11:04.000
Two t-shirts.

00:11:04.000 --> 00:11:05.500
The problem here
is that a lot of us

00:11:05.500 --> 00:11:07.520
are still making
content for our website

00:11:07.520 --> 00:11:09.890
as though you have a cable
internet connection, when

00:11:09.890 --> 00:11:12.110
the reality is that
3G kind of sucks.

00:11:12.110 --> 00:11:15.230
Linus stood on the stage
and said that earlier today.

00:11:15.230 --> 00:11:15.730
Right?

00:11:15.730 --> 00:11:17.932
We have assets
that are too large.

00:11:17.932 --> 00:11:20.390
If your assets are too large
and the number of dependencies

00:11:20.390 --> 00:11:21.764
you have are too
large, of course

00:11:21.764 --> 00:11:24.190
it's going to keep your critical
path from being resolved.

00:11:24.190 --> 00:11:25.900
So look at it from a
#PERFMATTERS side of it.

00:11:25.900 --> 00:11:27.608
Reduce the number of
requests, and reduce

00:11:27.608 --> 00:11:29.584
the size of the total
number of requests.

00:11:29.584 --> 00:11:32.250
So what happens here is this, is
that once we get all this done,

00:11:32.250 --> 00:11:33.791
we can finally get
to a point that we

00:11:33.791 --> 00:11:36.414
can build our DOM and our
CSSOM or our Render Tree.

00:11:36.414 --> 00:11:37.830
And then we can
resolve this chaos

00:11:37.830 --> 00:11:39.950
and actually finally
start painting the page.

00:11:39.950 --> 00:11:42.430
So the question for you then
is, if all of this chaos

00:11:42.430 --> 00:11:44.880
is going on under the hood
that I have no idea about,

00:11:44.880 --> 00:11:46.390
how do I use my
tooling to find it?

00:11:46.390 --> 00:11:49.150
So let's take a look
at that really quick.

00:11:49.150 --> 00:11:50.570
So this is The Verge.

00:11:50.570 --> 00:11:52.200
It's a website.

00:11:52.200 --> 00:11:53.035
It does some things.

00:11:53.035 --> 00:11:54.660
I'm not going to go
too deep into that.

00:11:54.660 --> 00:11:57.460
But most of you
already in the audience

00:11:57.460 --> 00:11:59.024
here know the network tab.

00:11:59.024 --> 00:12:00.440
So I've got The
Verge set up here.

00:12:00.440 --> 00:12:02.040
It's actually loading
the mobile site.

00:12:02.040 --> 00:12:04.560
We just hit reload here.

00:12:04.560 --> 00:12:06.950
And you actually see
immediately what's going on.

00:12:06.950 --> 00:12:09.010
Now I can dive deep,
deep, deep into this tool.

00:12:09.010 --> 00:12:10.630
I think there's fantastic
resources out there

00:12:10.630 --> 00:12:11.770
that get that done better.

00:12:11.770 --> 00:12:13.030
And I've only got
30 minutes today,

00:12:13.030 --> 00:12:14.780
so I'm going to give you
the high level one here.

00:12:14.780 --> 00:12:16.696
So we're talking about
reducing critical path.

00:12:16.696 --> 00:12:19.050
If we scroll, keep
scrolling, scroll all the way

00:12:19.050 --> 00:12:21.540
to the bottom here, we see
there's about 90 requests

00:12:21.540 --> 00:12:25.687
to get this site on the screen,
as well as 1.4 meg-- oh, it's

00:12:25.687 --> 00:12:26.270
not even done.

00:12:26.270 --> 00:12:27.330
Keep scrolling down.

00:12:27.330 --> 00:12:28.850
1.4 megs of data.

00:12:28.850 --> 00:12:29.350
OK.

00:12:29.350 --> 00:12:31.808
Now for a mobile connection,
that's actually a lot of data.

00:12:31.808 --> 00:12:34.220
How many of you are
in here from Europe

00:12:34.220 --> 00:12:37.280
and other-- how many of you are
on roaming charges right now?

00:12:37.280 --> 00:12:39.040
A round of applause
if you hate that.

00:12:39.040 --> 00:12:40.324
[APPLAUSE]

00:12:40.324 --> 00:12:41.740
COLT MCANLIS: A
round of applause

00:12:41.740 --> 00:12:45.330
if you'd like to see
it less than 1.5 megs.

00:12:45.330 --> 00:12:45.830
No.

00:12:45.830 --> 00:12:45.980
It's okay.

00:12:45.980 --> 00:12:46.500
We can take time.

00:12:46.500 --> 00:12:47.000
It's cool.

00:12:47.000 --> 00:12:48.450
We've got time.

00:12:48.450 --> 00:12:49.700
I love confusing the audience.

00:12:49.700 --> 00:12:50.491
They're like, wait.

00:12:50.491 --> 00:12:52.150
Did we really want to do that?

00:12:52.150 --> 00:12:52.860
I don't know.

00:12:52.860 --> 00:12:54.881
And so the problem with
this is that all of this

00:12:54.881 --> 00:12:56.630
has to get down before
we can do anything.

00:12:56.630 --> 00:12:58.030
And so this is webpagetest.org.

00:12:58.030 --> 00:12:59.446
Hopefully you guys
are using this.

00:12:59.446 --> 00:13:01.700
And you run The Verge
through webpagetest.org,

00:13:01.700 --> 00:13:03.450
you go down here
into waterfall view,

00:13:03.450 --> 00:13:05.110
and you can see that
this green line--

00:13:05.110 --> 00:13:06.650
everybody see this
green line over here?

00:13:06.650 --> 00:13:07.150
Yeah?

00:13:07.150 --> 00:13:11.340
This green line represents
when the page painting occurs.

00:13:11.340 --> 00:13:13.790
Anything before this
green line represents

00:13:13.790 --> 00:13:15.730
assets and
dependencies that have

00:13:15.730 --> 00:13:19.670
to be resolved before we can
put a pixel on the screen.

00:13:19.670 --> 00:13:20.789
So now look at this.

00:13:20.789 --> 00:13:21.330
What is this?

00:13:21.330 --> 00:13:22.290
We keep scrolling down.

00:13:22.290 --> 00:13:24.550
It looks like we've
got maybe-- I'm

00:13:24.550 --> 00:13:27.370
just going to give it to them
here and say about 60 assets.

00:13:27.370 --> 00:13:28.970
That's 60 requests on the wire.

00:13:28.970 --> 00:13:31.109
I don't have the sizes of
all of these assets here.

00:13:31.109 --> 00:13:33.400
But that's 60 requests that
had to go out there and get

00:13:33.400 --> 00:13:35.170
resolved for it put a
pixel on the screen.

00:13:35.170 --> 00:13:36.360
Let's look at something
that's a little bit better.

00:13:36.360 --> 00:13:37.776
Granted, it's a
different example.

00:13:37.776 --> 00:13:41.640
But this is m.lanyard.com,
all props to Jake Archibald.

00:13:41.640 --> 00:13:45.140
And so we just hit reload here.

00:13:45.140 --> 00:13:47.700
And was that one request?

00:13:47.700 --> 00:13:48.200
No.

00:13:48.200 --> 00:13:50.230
There we go.

00:13:50.230 --> 00:13:53.280
This example is too good.

00:13:53.280 --> 00:13:56.620
So you can see as a very
different pace, this version

00:13:56.620 --> 00:13:59.779
of the mobile site is actually
23 requests and about 125 K.

00:13:59.779 --> 00:14:01.070
Still able to get to your data.

00:14:01.070 --> 00:14:02.640
And I understand there's
a design principle

00:14:02.640 --> 00:14:03.900
difference between
these two sites,

00:14:03.900 --> 00:14:05.190
but you want to get it low.

00:14:05.190 --> 00:14:07.440
And with the networking tab,
you can figure this out.

00:14:07.440 --> 00:14:10.050
And when you look over here
at webpagetest details,

00:14:10.050 --> 00:14:12.590
you can actually see that
that green line actually

00:14:12.590 --> 00:14:14.200
comes in at about 0.9 seconds.

00:14:14.200 --> 00:14:14.820
Look at this.

00:14:14.820 --> 00:14:18.085
We have maybe one,
two, three assets,

00:14:18.085 --> 00:14:20.210
three assets that had to
be downloaded and resolved

00:14:20.210 --> 00:14:22.043
before the critical
path can start painting.

00:14:22.043 --> 00:14:24.864
That's the website you
want your users to load,

00:14:24.864 --> 00:14:26.280
because that's
where the money is.

00:14:26.280 --> 00:14:26.520
All right.

00:14:26.520 --> 00:14:26.850
We're running out of time.

00:14:26.850 --> 00:14:28.070
I got to keep hurrying here.

00:14:28.070 --> 00:14:31.610
So once you resolve the
chaos, we get networking done.

00:14:31.610 --> 00:14:35.450
Here's the thing-- I am just
the Ghost of Christmas Present.

00:14:35.450 --> 00:14:37.170
My job here is not
to inform you guys.

00:14:37.170 --> 00:14:39.950
My job is to set up these
brave and awesome and smart

00:14:39.950 --> 00:14:40.650
gentlemen.

00:14:40.650 --> 00:14:42.275
More information will
be brought to you

00:14:42.275 --> 00:14:44.710
at this conference from Ilya
on performance networking,

00:14:44.710 --> 00:14:48.184
as well as Bryan on creating
instant mobile apps.

00:14:48.184 --> 00:14:49.600
So now let's talk
about rendering.

00:14:49.600 --> 00:14:50.550
So we've got a bunch
of cat pictures.

00:14:50.550 --> 00:14:52.800
We want to deliver the cat
pictures in a friendly cat

00:14:52.800 --> 00:14:55.400
picture way, because it's a cat
picture world that we live in.

00:14:55.400 --> 00:14:56.710
And we have to paint it.

00:14:56.710 --> 00:14:58.580
So the cool thing is
that a lot of people

00:14:58.580 --> 00:15:01.910
didn't know until earlier this
year that painting on a web

00:15:01.910 --> 00:15:04.054
page was not free.

00:15:04.054 --> 00:15:05.720
So there's actually
a software resource.

00:15:05.720 --> 00:15:06.720
Something has to happen.

00:15:06.720 --> 00:15:08.420
So the user actually puts
his finger on your site,

00:15:08.420 --> 00:15:09.460
and he starts scrolling around.

00:15:09.460 --> 00:15:11.320
And what happens is, we
have to translate the page.

00:15:11.320 --> 00:15:12.986
And then what's not
visible to the page,

00:15:12.986 --> 00:15:14.900
we have to actually
spin up the CPU

00:15:14.900 --> 00:15:19.310
and spend cycles
rasterizing that content.

00:15:19.310 --> 00:15:20.620
And this keeps occurring.

00:15:20.620 --> 00:15:21.420
The user scrolls.

00:15:21.420 --> 00:15:22.628
We have to rasterize content.

00:15:22.628 --> 00:15:23.800
Now there's a good talk.

00:15:23.800 --> 00:15:24.710
You can see the
link on the bottom

00:15:24.710 --> 00:15:26.460
here where we talk about
the interdependency

00:15:26.460 --> 00:15:27.650
between the CPU and the GPU.

00:15:27.650 --> 00:15:28.640
I won't get into that today.

00:15:28.640 --> 00:15:30.306
But the point that
you need to take away

00:15:30.306 --> 00:15:33.854
is that scrolling isn't the
only place that painting occurs.

00:15:33.854 --> 00:15:35.270
There's other
things that the user

00:15:35.270 --> 00:15:36.603
does that causes paints as well.

00:15:36.603 --> 00:15:38.460
For example, let's
say you have your DOM,

00:15:38.460 --> 00:15:40.920
and the DOM's doing awesome,
and it's a DOMmy-DOM day.

00:15:40.920 --> 00:15:42.340
And the user clicks
on something,

00:15:42.340 --> 00:15:43.700
and you're like,
dude, free stuff!

00:15:43.700 --> 00:15:45.450
And you have to actually
pop up a dialogue

00:15:45.450 --> 00:15:47.390
to say, dude, free stuff!

00:15:47.390 --> 00:15:50.360
And in doing so,
you modify the DOM.

00:15:50.360 --> 00:15:52.100
Well when you
modify the DOM, all

00:15:52.100 --> 00:15:53.910
of the properties of the
DOM have to be recalculated,

00:15:53.910 --> 00:15:55.080
because we have to
figure out did you

00:15:55.080 --> 00:15:56.740
change something
that was visible.

00:15:56.740 --> 00:15:58.794
When you do this, we have
to rebuild everything,

00:15:58.794 --> 00:16:00.710
which means things on
the screen have changed,

00:16:00.710 --> 00:16:03.249
which means we need to
actually repaint things.

00:16:03.249 --> 00:16:05.790
So when you change the DOM, you
update properties to the DOM,

00:16:05.790 --> 00:16:07.180
repaints have to occur.

00:16:07.180 --> 00:16:08.320
Another great example.

00:16:08.320 --> 00:16:11.110
So let's say we've got a user
who's scrolling your site.

00:16:11.110 --> 00:16:13.780
And a lot of mobile
websites I see nowadays

00:16:13.780 --> 00:16:18.409
use CSS properties to
sort of store state.

00:16:18.409 --> 00:16:19.950
So you've got some
piece of code here

00:16:19.950 --> 00:16:22.810
that's like, the user
is scrolling now.

00:16:22.810 --> 00:16:26.240
Let's add this class to the
DOM that represents sticky.

00:16:26.240 --> 00:16:27.500
We want a sticky header.

00:16:27.500 --> 00:16:29.004
Anyone do this?

00:16:29.004 --> 00:16:29.920
Don't raise your hand.

00:16:29.920 --> 00:16:30.416
Don't.

00:16:30.416 --> 00:16:30.912
Stop.

00:16:30.912 --> 00:16:31.410
Don't.

00:16:31.410 --> 00:16:32.145
You're about to
find out-- don't.

00:16:32.145 --> 00:16:33.269
Just don't raise your hand.

00:16:35.950 --> 00:16:37.106
I'm giving you a warning.

00:16:37.106 --> 00:16:38.480
What's good is on
the live stream

00:16:38.480 --> 00:16:40.901
they can't see this direction,
so they don't see this.

00:16:40.901 --> 00:16:43.150
What happens is, every time
you modify the class list,

00:16:43.150 --> 00:16:45.587
the CSS object model
has to be rebuilt.

00:16:45.587 --> 00:16:47.170
And, of course, this
causes a repaint.

00:16:47.170 --> 00:16:48.090
So you touch the DOM.

00:16:48.090 --> 00:16:49.090
You touch CSS.

00:16:49.090 --> 00:16:50.120
Repaints have to occur.

00:16:50.120 --> 00:16:51.620
We call this "paint
storming" if you

00:16:51.620 --> 00:16:53.160
get into a weird cycle of this.

00:16:53.160 --> 00:16:55.360
So let's take a
look at a demo here.

00:16:55.360 --> 00:16:57.580
Single demo-- this
is super easy.

00:16:57.580 --> 00:17:00.730
Paul Irish did a fantastic
video of this earlier this year.

00:17:00.730 --> 00:17:02.080
I just want to show what he did.

00:17:02.080 --> 00:17:04.540
So this is scrolling a site.

00:17:04.540 --> 00:17:07.180
And I'm just kind of
scrolling slowly here,

00:17:07.180 --> 00:17:09.369
but you can see it's actually
just a little jittery.

00:17:09.369 --> 00:17:11.089
I'm not sure how well this
is coming on the stream.

00:17:11.089 --> 00:17:12.797
But you can see some
of these white boxes

00:17:12.797 --> 00:17:14.220
here just aren't
moving too well.

00:17:14.220 --> 00:17:16.760
And so when -- hold on.

00:17:16.760 --> 00:17:19.236
Doing live demos is awesome.

00:17:19.236 --> 00:17:21.069
If we actually get
recording on the timeline

00:17:21.069 --> 00:17:25.400
here and start
scrolling, we can see

00:17:25.400 --> 00:17:29.090
sort of a plethora of
these green and purples.

00:17:29.090 --> 00:17:30.840
And what we're effectively
looking at here

00:17:30.840 --> 00:17:33.173
is, when you see green and
purples on the timeline view,

00:17:33.173 --> 00:17:34.890
these are recalc
styles of layout.

00:17:34.890 --> 00:17:36.806
So this is exactly what
we were talking about.

00:17:36.806 --> 00:17:38.120
We have some event going on.

00:17:38.120 --> 00:17:40.161
When you mouse over them,
you get to go down here

00:17:40.161 --> 00:17:42.660
and say, hey here's the
call stack that caused this.

00:17:42.660 --> 00:17:45.180
And lo and behold, here
is a JavaScript function

00:17:45.180 --> 00:17:46.990
that's intermixed
between the jQuery

00:17:46.990 --> 00:17:50.220
that the user developers of
this website actually wrote

00:17:50.220 --> 00:17:51.430
and you can see here.

00:17:51.430 --> 00:17:52.846
Basically what
they're doing-- let

00:17:52.846 --> 00:17:55.380
me see if I can zoom that
in just a little bit.

00:17:55.380 --> 00:17:59.650
What they're doing here is,
every time the user scrolls,

00:17:59.650 --> 00:18:03.400
they're toggling a class
based upon some heuristic.

00:18:03.400 --> 00:18:06.030
So every single
mouse scroll, they're

00:18:06.030 --> 00:18:09.440
updating the CSS tree, which
then has to be rebuilt,

00:18:09.440 --> 00:18:10.940
which then causes a repaint.

00:18:10.940 --> 00:18:13.350
And we're seeing this here
in the timeline as well.

00:18:13.350 --> 00:18:14.190
Boom.

00:18:14.190 --> 00:18:16.523
Scroll, recalculate, layout,
paint, paint, paint, paint,

00:18:16.523 --> 00:18:17.430
paint.

00:18:17.430 --> 00:18:19.420
And now this actually
is pretty bad.

00:18:19.420 --> 00:18:22.380
This is 7 milliseconds
on my desktop here.

00:18:22.380 --> 00:18:24.030
We get into some
pretty gnarly places

00:18:24.030 --> 00:18:25.810
where this is 10 milliseconds.

00:18:25.810 --> 00:18:29.940
Down here it looks like we've
got some big, thick purples.

00:18:29.940 --> 00:18:30.860
Big, thick purples.

00:18:30.860 --> 00:18:31.360
[LAUGHTER]

00:18:31.360 --> 00:18:33.840
COLT MCANLIS: Seven
milliseconds there.

00:18:33.840 --> 00:18:35.400
We're live on the internet guys.

00:18:35.400 --> 00:18:36.830
Simmer down.

00:18:36.830 --> 00:18:37.411
Simmer down.

00:18:37.411 --> 00:18:39.160
So the point here is
that you can actually

00:18:39.160 --> 00:18:40.910
use the timeline
view to find out

00:18:40.910 --> 00:18:45.150
what's causing these recalcs
and paints on your page.

00:18:45.150 --> 00:18:47.540
So want more info?

00:18:47.540 --> 00:18:48.880
jankfree.org.

00:18:48.880 --> 00:18:50.130
These are the jank-busters.

00:18:50.130 --> 00:18:51.750
These are the guys who
invented the term "jank."

00:18:51.750 --> 00:18:52.370
Go follow them.

00:18:52.370 --> 00:18:53.830
They got a talk a
little bit later.

00:18:53.830 --> 00:18:55.080
Tom Wiltzius and
Nat Duca, they'll

00:18:55.080 --> 00:18:56.455
give you all the
details you need

00:18:56.455 --> 00:18:58.660
to make silky smooth
rendering performance.

00:18:58.660 --> 00:19:00.710
So let's go to my
favorite area, compute.

00:19:00.710 --> 00:19:03.850
This is the thing that
I live and thrive on.

00:19:03.850 --> 00:19:06.990
So let's say 16
milliseconds a frame.

00:19:06.990 --> 00:19:08.430
You have 60 frames a second.

00:19:08.430 --> 00:19:09.990
It means you have
16 milliseconds.

00:19:09.990 --> 00:19:12.440
But the funny thing is, you
don't have 16 milliseconds.

00:19:12.440 --> 00:19:14.010
The browser has 16 milliseconds.

00:19:14.010 --> 00:19:15.052
You have to share.

00:19:15.052 --> 00:19:16.760
Remember your mom and
your dad taught you

00:19:16.760 --> 00:19:18.314
that when you were
a kid, like, hey

00:19:18.314 --> 00:19:20.230
you can't have your whole
time with the truck.

00:19:20.230 --> 00:19:21.840
You've got to trade
the truck with Chrome.

00:19:21.840 --> 00:19:22.900
Chrome needs time
with the truck,

00:19:22.900 --> 00:19:23.840
and then you can
have the truck back.

00:19:23.840 --> 00:19:24.810
And you're ilke, I want my time.

00:19:24.810 --> 00:19:26.310
And Chrome's like,
I want my time.

00:19:26.310 --> 00:19:29.140
Anyhow, the point is that
you don't have fully 16

00:19:29.140 --> 00:19:30.810
milliseconds to
do all your work.

00:19:30.810 --> 00:19:34.640
When you get a rAF event,
Chrome's doing other stuff.

00:19:34.640 --> 00:19:37.220
Including that other
stuff is a paint event.

00:19:37.220 --> 00:19:38.720
It actually has to
branch off and go

00:19:38.720 --> 00:19:40.970
do painting and compositing
and all this other stuff.

00:19:40.970 --> 00:19:42.520
And that's intermixed
with all the JavaScript

00:19:42.520 --> 00:19:44.410
that you're trying to
run for your application.

00:19:44.410 --> 00:19:46.090
So what happens is,
every 16 milliseconds

00:19:46.090 --> 00:19:47.798
you'll get a rAF pulse,
and this is fine,

00:19:47.798 --> 00:19:51.030
until something happens in your
code that actually pushes back

00:19:51.030 --> 00:19:55.570
this designated work that
Chrome's going to do anyway.

00:19:55.570 --> 00:19:58.560
And when that happens, you miss
that 16th frame and your rAF

00:19:58.560 --> 00:19:59.100
skips.

00:19:59.100 --> 00:20:00.960
And this is known
as a skipped frame.

00:20:00.960 --> 00:20:03.340
This is when users feel jank.

00:20:03.340 --> 00:20:05.090
Now I know we're talking
about a rendering

00:20:05.090 --> 00:20:07.298
problem in the compute
section, but bear with me now.

00:20:07.298 --> 00:20:10.719
So the question is, what caused
that JavaScript to get slow?

00:20:10.719 --> 00:20:12.760
We need to make sure that
we keep an eye on this.

00:20:12.760 --> 00:20:15.450
60 frames a second means
16 milliseconds a frame.

00:20:15.450 --> 00:20:19.187
You have to play nice, share.

00:20:19.187 --> 00:20:21.770
So let's say you've got a cool
game like Super Resident Raver,

00:20:21.770 --> 00:20:24.310
and you're going along
doing some cool touch stuff.

00:20:24.310 --> 00:20:27.460
Touch Handler occurs, and you
just do a flood of things.

00:20:27.460 --> 00:20:28.320
The user touched.

00:20:28.320 --> 00:20:30.569
So I need to go through and
order a pizza, because I'm

00:20:30.569 --> 00:20:32.880
hungry right now, and
update 10 million zombies,

00:20:32.880 --> 00:20:34.300
because they're going
to attack the pizza,

00:20:34.300 --> 00:20:36.030
and they're going to be
doing cool stuff, too.

00:20:36.030 --> 00:20:38.410
Well, the problem with this is
that you miss your rAF target.

00:20:38.410 --> 00:20:39.826
And, of course,
the next rAF would

00:20:39.826 --> 00:20:41.560
want to come immediately
at that point.

00:20:41.560 --> 00:20:43.270
But, again, it has
to skip a frame.

00:20:43.270 --> 00:20:44.860
So the problem here
is that you end up

00:20:44.860 --> 00:20:47.290
doing too much work
in a single frame,

00:20:47.290 --> 00:20:49.430
and you can end up
pushing it back.

00:20:49.430 --> 00:20:51.955
Another problem is probably
a little bit more complex,

00:20:51.955 --> 00:20:54.130
and I've done some talks
about this in the past.

00:20:54.130 --> 00:20:56.460
But let's say you've got
just a ton of stuff going on.

00:20:56.460 --> 00:20:59.650
By the way, if anyone
sends me source code

00:20:59.650 --> 00:21:01.710
of an HTML5 game they
make that implements

00:21:01.710 --> 00:21:05.610
all of those gestures at once,
I will send you free stuff.

00:21:05.610 --> 00:21:07.400
I just want to put
that out there.

00:21:07.400 --> 00:21:10.150
But let's say you've got 90
hands on a game right now,

00:21:10.150 --> 00:21:12.310
and this is actually causing
a lot of allocations.

00:21:12.310 --> 00:21:15.037
What can actually occur is
that during your update phase,

00:21:15.037 --> 00:21:17.620
garbage collection can occur any
time garbage collection feels

00:21:17.620 --> 00:21:20.160
like it needs to occur, which
can push out your update loop,

00:21:20.160 --> 00:21:21.750
because it needs time to go.

00:21:21.750 --> 00:21:23.321
And it's a
single-threaded model,

00:21:23.321 --> 00:21:25.070
which is then going
to put your draw back,

00:21:25.070 --> 00:21:26.897
which again is going
to put your rAF back.

00:21:26.897 --> 00:21:28.480
So I've got a little
bit of time here.

00:21:28.480 --> 00:21:30.030
I want to finish
up on a high note.

00:21:30.030 --> 00:21:31.950
So, actually, not
to Paul Lewis yet.

00:21:31.950 --> 00:21:32.650
He's bald.

00:21:32.650 --> 00:21:33.210
OK.

00:21:33.210 --> 00:21:34.690
So I want to show you
what this looks like.

00:21:34.690 --> 00:21:36.450
So if you're trying to track
down performance issues

00:21:36.450 --> 00:21:38.290
from compute-- here's
Super Resident Raver--

00:21:38.290 --> 00:21:40.050
there's two tools you
need to check out.

00:21:40.050 --> 00:21:42.590
First off is collecting
a JavaScript CPU profile.

00:21:42.590 --> 00:21:44.006
So I'm not going
to play the game.

00:21:44.006 --> 00:21:45.439
I'm just going to
hit start here.

00:21:45.439 --> 00:21:47.230
Well OK, maybe I'll
make some stuff happen.

00:21:47.230 --> 00:21:47.440
OK.

00:21:47.440 --> 00:21:47.950
Things are going-- yes.

00:21:47.950 --> 00:21:48.487
Good.

00:21:48.487 --> 00:21:49.570
People are running around.

00:21:49.570 --> 00:21:50.325
Chaos ensues.

00:21:50.325 --> 00:21:50.825
Fantastic.

00:21:50.825 --> 00:21:53.100
And I'm going to let that
dude run around and get

00:21:53.100 --> 00:21:54.070
eaten by zombies for a second.

00:21:54.070 --> 00:21:55.110
But what you can
actually see down here,

00:21:55.110 --> 00:21:56.740
and this is one of my
favorite things added

00:21:56.740 --> 00:21:58.906
to Chrome DevTools-- is
this is a flame chart, which

00:21:58.906 --> 00:22:02.040
effectively shows me
where all of my calls

00:22:02.040 --> 00:22:05.390
are going for a given frame.

00:22:05.390 --> 00:22:07.660
So I can actually see,
hey wait a minute.

00:22:07.660 --> 00:22:09.860
Where is my time
going in my frame?

00:22:09.860 --> 00:22:11.340
Who's responsible for it?

00:22:11.340 --> 00:22:13.932
What's the function
that's taking that time?

00:22:13.932 --> 00:22:16.140
This allows me, again, to
measure where my content is

00:22:16.140 --> 00:22:17.474
going and update it accordingly.

00:22:17.474 --> 00:22:18.848
The second thing
you need to look

00:22:18.848 --> 00:22:20.720
at when you're dealing
with memory issues

00:22:20.720 --> 00:22:22.737
is actually this record
heap allocations.

00:22:22.737 --> 00:22:24.195
Now for HTML5 game
developers, this

00:22:24.195 --> 00:22:25.945
is fantastic, because
you can kind of just

00:22:25.945 --> 00:22:27.244
hit Start and sit back.

00:22:27.244 --> 00:22:29.410
Now for those of you who
aren't versed in this tool,

00:22:29.410 --> 00:22:32.300
it's actually fantastic,
because it sort of melds

00:22:32.300 --> 00:22:34.797
heap allocation tracking
with a timeline view.

00:22:34.797 --> 00:22:36.380
So what you're seeing
at the top there

00:22:36.380 --> 00:22:39.396
is allocations that have
been allocated and freed.

00:22:39.396 --> 00:22:41.270
Some of them are still
resident on the stack.

00:22:41.270 --> 00:22:42.410
You can see that in blue.

00:22:42.410 --> 00:22:45.590
Some of them have been freed,
and you can see that in gray.

00:22:45.590 --> 00:22:48.325
And then you can find a specific
portion here and actually drill

00:22:48.325 --> 00:22:49.700
down and say, hey,
wait a minute.

00:22:49.700 --> 00:22:52.460
What was actually
created during that frame

00:22:52.460 --> 00:22:53.830
to create those allocations?

00:22:53.830 --> 00:22:55.246
And if you're
lucky, sometimes you

00:22:55.246 --> 00:22:57.974
can actually figure
out where in your code

00:22:57.974 --> 00:22:58.890
it actually came from.

00:22:58.890 --> 00:23:00.864
So here I could see
that the fade timer

00:23:00.864 --> 00:23:02.030
stream was actually created.

00:23:02.030 --> 00:23:04.340
It was probably passed off
to some anonymous function

00:23:04.340 --> 00:23:06.900
that needed work done to it.

00:23:06.900 --> 00:23:08.990
So with all of these
tools, you kind of

00:23:08.990 --> 00:23:11.750
start getting the sense
that you can actually

00:23:11.750 --> 00:23:13.860
measure what's going on
in your mobile universe.

00:23:13.860 --> 00:23:15.640
You can actually
get to the data.

00:23:15.640 --> 00:23:17.520
You can actually figure
out what's going on,

00:23:17.520 --> 00:23:20.120
take ownership of your website
performance, and move forward.

00:23:20.120 --> 00:23:22.790
I love this quote by
Paul Lewis-- "Tools.

00:23:22.790 --> 00:23:23.777
Not rules."

00:23:23.777 --> 00:23:25.360
Anyone who stands
on the stage at this

00:23:25.360 --> 00:23:27.660
point-- Well OK, let's
roll back for a minute.

00:23:27.660 --> 00:23:29.400
About a year and
a half ago, people

00:23:29.400 --> 00:23:31.497
would give performance
advice, but there

00:23:31.497 --> 00:23:33.330
wasn't enough information
on the client side

00:23:33.330 --> 00:23:34.225
to actually give that advice.

00:23:34.225 --> 00:23:35.710
Like, hey, your
scrolling is slow.

00:23:35.710 --> 00:23:36.941
Well how?

00:23:36.941 --> 00:23:37.690
Well I don't know.

00:23:37.690 --> 00:23:39.350
I kind of tossed some
chicken bones around

00:23:39.350 --> 00:23:40.290
and it said it was slow.

00:23:40.290 --> 00:23:40.790
Sweet.

00:23:40.790 --> 00:23:41.577
Chicken bones.

00:23:41.577 --> 00:23:43.160
But now we have the
tools, and now you

00:23:43.160 --> 00:23:44.910
need to move towards
that methodology.

00:23:44.910 --> 00:23:46.460
Validate everything
you're seeing.

00:23:46.460 --> 00:23:47.176
Measure it.

00:23:47.176 --> 00:23:48.550
Go forward with
that methodology.

00:23:48.550 --> 00:23:50.840
Don't just rely on a bunch
of bald people standing

00:23:50.840 --> 00:23:52.720
on stage telling you
what to optimize.

00:23:52.720 --> 00:23:55.560
Go find it in your tool
chain in your application

00:23:55.560 --> 00:23:56.790
and fix it there.

00:23:56.790 --> 00:23:58.420
My name is Colt McAnlis.

00:23:58.420 --> 00:24:02.610
Go to HTML5 Rocks if you want
to become a performance guru.

00:24:02.610 --> 00:24:04.235
Check out the slides
in the other talks

00:24:04.235 --> 00:24:05.526
we've been talking about today.

00:24:05.526 --> 00:24:07.540
Here's how you get a
hold of me, #perfmatters.

00:24:07.540 --> 00:24:08.790
Thank you for your time today.

00:24:08.790 --> 00:24:09.456
I appreciate it.

00:24:09.456 --> 00:24:14.125
[APPLAUSE]

