WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.760
I thought today maybe we would talk about 'grep', a well-known command 
in the UNIX world. Something that's been around since the early

00:00:07.140 --> 00:00:12.900
1970s. What 'grep' lets you do is to search for 
patterns of text - arbitrary patterns of text in

00:00:13.360 --> 00:00:16.800
one or more files and there could be an unbounded number of

00:00:17.350 --> 00:00:21.119
files of input. Or the input could be coming from some other

00:00:21.310 --> 00:00:25.289
program, for example as it is if you're using Unix pipelines.

00:00:25.289 --> 00:00:32.339
So you take some program and you pipe it into 'grep' and 
that way, no matter what the amount of input is, 'grep' can

00:00:32.469 --> 00:00:35.369
filter out, or show you, the things that you're interested in.

00:00:35.590 --> 00:00:39.389
And that's stuff that you can't do with a text 
editor very conveniently - if at all.

00:00:39.610 --> 00:00:41.610
One of the issues with 'grep' has always been:

00:00:41.800 --> 00:00:43.559
Where does that weird name come from?

00:00:43.559 --> 00:00:48.929
And so I thought, perhaps, I could tell that story, if it would be 
of any interest and we'll see where we go from there.

00:00:51.370 --> 00:00:57.930
The way it came about - you have to put yourself back in the 
early days of computing, before everybody present in this room,

00:00:57.930 --> 00:00:59.739
except me, was born.

00:00:59.739 --> 00:01:01.739
Let's say something like

00:01:02.020 --> 00:01:05.729
1970-71 -- the very, very, early days of UNIX.

00:01:05.979 --> 00:01:09.989
The computer that UNIX ran on was a PDP 11. At that point

00:01:09.990 --> 00:01:15.119
it was probably an 11/20. It was a machine that had very 
very little computing power. It didn't run very fast.

00:01:15.119 --> 00:01:17.489
It also didn't have very much memory.

00:01:18.100 --> 00:01:20.669
Probably something in the order of 32K,

00:01:20.670 --> 00:01:25.530
maybe 64K bytes and that's 64 Kbytes, not megabytes.

00:01:25.869 --> 00:01:30.989
And very small secondary storage as well, you know 
a few megabytes of disk and things like that.

00:01:31.259 --> 00:01:37.109
So, very very limited computing resources and that meant 
that a lot of the software that was in early days of UNIX

00:01:37.600 --> 00:01:39.989
tended to be fairly simple and straightforward.

00:01:42.610 --> 00:01:50.279
And, that reflected not only the sort of ... the relative 'wimpiness' of
the hardware but also the personal tastes of the people doing the work,

00:01:50.590 --> 00:01:52.680
primarily Ken Thompson and Dennis Ritchie.

00:01:53.530 --> 00:01:58.619
So one of the prop ... one of the standard programs that 
people use is the text editor on any system

00:01:58.899 --> 00:02:03.209
The UNIX text editor was called 'ed', and it's not pronounced 'edd'

00:02:04.090 --> 00:02:07.350
At least by those in the know, it's pronounced 'ee dee'.

00:02:07.920 --> 00:02:09.840
And this was written by Ken Thompson

00:02:09.840 --> 00:02:13.379
and I think it was a, basically, stripped-down version of an

00:02:13.560 --> 00:02:17.729
editor called QED, which Ken had worked with 
and done a lot of work on earlier.

00:02:18.730 --> 00:02:21.239
So a very small, simple, straightforward

00:02:22.569 --> 00:02:27.119
editor and the thing that you have to remember 
is that, in those days, in addition

00:02:27.580 --> 00:02:30.690
you didn't have actual video display terminals -

00:02:30.690 --> 00:02:35.249
not of the sort that we're used to today, or 
even 10 or 20 years ago.

00:02:35.250 --> 00:02:39.750
But in fact all the computing, all of your 
editing and so on, was done on paper

00:02:40.150 --> 00:02:42.390
Remember paper? If you zoom down here

00:02:42.390 --> 00:02:47.339
you can see paper! This meant that there were a lot of 
things that tried to minimize the use of paper.

00:02:47.560 --> 00:02:51.660
It also meant that editors worked one line at 
a time, or multiple lines at a time,

00:02:51.660 --> 00:02:54.989
but there was no cursor addressing, so you 
couldn't move around within a line.

00:02:54.989 --> 00:02:59.189
And so the 'ed' text editor reflected that kind of thing.

00:02:59.190 --> 00:03:05.279
Maybe what I should do is just a quick look at what 'ed' looked like? 
so the commands for 'ed' were single-letter commands.

00:03:05.530 --> 00:03:08.580
So, for example, there was a command called 'p',

00:03:08.580 --> 00:03:12.749
Which stood for 'print'; there was a command called 'd',
which would delete a line

00:03:12.750 --> 00:03:18.539
There was a command called 's', which took a little bit ... which 
said 'substitute' so you could change this

00:03:18.730 --> 00:03:22.079
y'know, 'ABC' into 'DEF', or something like that.

00:03:22.150 --> 00:03:28.799
There was an 'append' command that simply said 'add some more text' and 
you could add a bunch of lines and then terminate it with something.

00:03:29.049 --> 00:03:31.049
There was, of course, a 'read' command

00:03:31.299 --> 00:03:34.679
so that you could read information from a file, and there was 
a 'write' command [so]

00:03:34.780 --> 00:03:41.250
that you could put it back in a file. a handful of other 
things like that. So that was the essence of what it did.

00:03:42.100 --> 00:03:47.759
One of the things that 'ed' did very nicely was that, 
OK, these apply by default to the current line

00:03:47.760 --> 00:03:52.470
But what do you do when you want to have more 
specification of what lines you're operating on?

00:03:52.690 --> 00:03:57.419
And so you could say things like 'line 1 to line 10 print'

00:03:57.420 --> 00:04:00.869
So, this would print the first to 10 lines. 10 was that.

00:04:01.150 --> 00:04:04.590
But suppose you wanted to print all of the lines in the file?

00:04:04.590 --> 00:04:10.350
So there was a shorthand called '$'. So, I could say '1,$p' 
and that would print all of the lines in the file.

00:04:10.350 --> 00:04:15.509
Or I could say: "Gee! I wonder ... I just want to see the last line".
So I could say '$p' and that would

00:04:15.510 --> 00:04:18.269
give me that. I could even elide the 'p', but that's good enough.

00:04:18.310 --> 00:04:24.690
Or I could delete the last line by saying '$d'. Or I could 
delete the first line by saying '1d'.

00:04:24.729 --> 00:04:28.859
That is sort of the line addressing. So far not very complicated.

00:04:29.280 --> 00:04:35.429
The thing that 'ed' added to all of that, and this is definitely 
Ken's influence was the idea of regular expressions.

00:04:35.430 --> 00:04:37.680
So, a regular expression is a pattern of

00:04:38.199 --> 00:04:41.098
text - its a way of specifying patterns of text.

00:04:41.099 --> 00:04:47.249
They could be literal texts like the word 'print' or they could be 
something more complicated, like things that start with

00:04:47.650 --> 00:04:53.699
'Prin' and but might go on to 'Print' or 'Princeton' or 'Princess',
or whatever, That kind of thing.

00:04:53.909 --> 00:04:59.819
And the way that regular expressions were written in the 'ed' text 
editor was you said '/' and

00:04:59.979 --> 00:05:03.658
then you wrote the characters of the regular expression. 
So, I could say '/print/'

00:05:03.759 --> 00:05:10.709
and that would be something that would match the next line,
in what I was working on, that contained the word 'print'

00:05:10.780 --> 00:05:12.699
anywhere within it.

00:05:12.699 --> 00:05:17.309
eSo the regular expressions in the 'ed' editor 
were somewhat different - a little more

00:05:17.560 --> 00:05:22.349
sophisticated, and complicated, than the regular expressions 
that you might find in shell wildcards,

00:05:22.599 --> 00:05:26.158
where, for example, a star means 'anything at all'. So,

00:05:27.789 --> 00:05:30.689
the same idea of patterns of text - a slightly different

00:05:31.330 --> 00:05:38.669
specification - a different way of writing patterns but suitable for 
text editing. And so, then, I could say things like "I want to find the next

00:05:38.669 --> 00:05:43.739
occurrence of the word 'print' in my file". And then there I would be.

00:05:44.229 --> 00:05:49.318
And on, and on, and on, like that. OK, so that's the 'ed' text editor.

00:05:49.319 --> 00:05:52.589
We are a long way away from 'grep' at this point. 
So what's 'grep' all about?

00:05:52.690 --> 00:05:57.419
Well, it turns out that at the time that this 
was going on, 'ed' was the standard text editor.

00:05:57.419 --> 00:06:00.538
But, as I said, the machines you're working on are very very wimpy.

00:06:00.690 --> 00:06:02.639
Not much computing capacity in a lot of ways

00:06:02.639 --> 00:06:03.270
And in fact

00:06:03.270 --> 00:06:05.969
one of the limitations was that you couldn't edit a very big file,

00:06:06.279 --> 00:06:10.409
because there wasn't enough memory and the 'ed' 
worked entirely within memory and

00:06:10.599 --> 00:06:16.589
so you were stuck. One of my colleagues at the time, 
Lee McMahon, was very interested in doing text

00:06:16.990 --> 00:06:19.590
analysis. The sort of thing that we would call today,

00:06:19.590 --> 00:06:21.130
perhaps, Natural Language Processing.

00:06:21.130 --> 00:06:24.389
And so what Lee wanted to do ... he had been studying

00:06:24.490 --> 00:06:28.409
something that, at the time, was the very 
interesting question of who were the authors of

00:06:28.750 --> 00:06:34.169
some fundamental American documents called the Federalist Papers. 
The Federalist Papers were written by,

00:06:34.690 --> 00:06:39.119
variously, James Madison and Alexander Hamilton and John Jay in

00:06:39.610 --> 00:06:44.040
1787 and 88, if I recall correctly, There were 85 of these documents

00:06:44.040 --> 00:06:50.219
But they were published anonymously under the name Publius. 
And so we had no idea, in theory, who wrote them

00:06:50.220 --> 00:06:52.920
And so there's been a lot of scholarship trying 
to figure out for sure.

00:06:52.930 --> 00:06:56.729
It's well known who wrote some of them and others are still, I think, a

00:06:57.010 --> 00:07:01.200
little uncertain and so Lee was interested in seeing 
whether you could actually,

00:07:01.990 --> 00:07:04.650
by textual analysis of his own devising,

00:07:05.230 --> 00:07:12.390
figure out who wrote these things. So that's fine. But it turns out 
that these 85 documents was in total just over a megabyte

00:07:12.390 --> 00:07:17.039
- I mean down in the noise by today's standards - wouldn't fit. 
He couldn't edit them all in 'ed'.

00:07:19.690 --> 00:07:21.310
And so what do you do?

00:07:21.310 --> 00:07:27.119
So one day he said: "I just want to go through and find all the 
occurrences of 'something' in the Federalist Papers

00:07:27.120 --> 00:07:30.210
so I can look at 'em!" And he said this to Ken Thompson and

00:07:31.180 --> 00:07:36.090
then went home for dinner or something like that. 
And he came back the next day and Ken had written the program - 

00:07:36.190 --> 00:07:40.890
and the program was called 'grep'. And what 'grep' did was to go through a

00:07:41.650 --> 00:07:44.729
bunch of documents - one or more files - and

00:07:45.400 --> 00:07:50.459
simply find all of the places where a particular regular expression 
appeared in those things.

00:07:51.010 --> 00:07:58.679
And so the way ... it turns out that one more of the commands in 
'ed' is a command called 'g'. And this stood for 'global'.

00:07:58.900 --> 00:08:05.039
And what it said was, on every line that matches a particular 
regular expression -

00:08:05.040 --> 00:08:11.580
so, for example,'print'- I can then do an 'ed' command 
So, I could say: "On every line that contains the word 'print'

00:08:11.580 --> 00:08:16.199
I'll just print it". So, I can see what my various print 
statements would look like.

00:08:16.930 --> 00:08:23.250
Or I could, in some other way, say 'g' - and some other regular 
expression in there - and delete them. So I could delete all of the

00:08:23.500 --> 00:08:25.500
comments in a program, or something like that.

00:08:26.050 --> 00:08:31.739
So the general structure of that is 'g' followed by (in slashes), a 
regular expression,

00:08:32.470 --> 00:08:38.790
followed by the letter 'p' - g/re/p - and that's the genesis of where it came from.

00:08:39.340 --> 00:08:46.290
OK, and so this is in some ways the genius of Ken Thompson.
A beautiful program, written in no time at all, by taking some

00:08:46.290 --> 00:08:52.829
other program and just trimming it out and then giving it a name that stuck. 
That's the story of where 'grep' came from.

00:08:53.460 --> 00:08:58.049
Let me add one thing - 25 years ago [it] literally was the spring of 1993,

00:08:58.050 --> 00:09:00.960
I was teaching at Princeton as a visitor.

00:09:01.210 --> 00:09:06.389
And I needed an assignment for my programming class. And I thought "Hmm!"

00:09:06.970 --> 00:09:12.390
So what I did was to tell them - the students in the class: 
"OK, here is the source code for 'ed' "

00:09:12.430 --> 00:09:14.260
It was at that time probably

00:09:14.260 --> 00:09:16.180
1800 lines of C.

00:09:16.180 --> 00:09:22.409
"Your job is to take these 1800 lines of C and convert them into 
'grep' as a C program.

00:09:22.510 --> 00:09:24.510
OK, and you've got a week to do it".

00:09:25.510 --> 00:09:30.390
And I told them, at that point, that they had 
a couple of advantages. First,

00:09:30.670 --> 00:09:32.040
they knew what the target was.

00:09:32.040 --> 00:09:36.690
Somebody had already done 'grep' so they knew what it was supposed
to look like. And all they had to do was replicate that behavior.

00:09:37.450 --> 00:09:43.020
And the other thing is that it was now written in C. 
The original 'grep' was written in PDP 11 assembly language.

00:09:44.350 --> 00:09:48.540
And of course, they also had one grave disadvantage:
None of them were Ken Thompson.

