WEBVTT
Kind: captions
Language: en

00:00:14.285 --> 00:00:15.310
Hi everybody.

00:00:15.310 --> 00:00:17.460
I'm Eric Leichtenschlag
from the AdMob

00:00:17.460 --> 00:00:18.880
Developer Relations Team.

00:00:18.880 --> 00:00:21.920
And today, I'm here to talk to
you about DFP Showcase v2.

00:00:25.230 --> 00:00:26.540
So to start off, you
might all be

00:00:26.540 --> 00:00:29.520
wondering what is DFP Showcase.

00:00:29.520 --> 00:00:32.740
DFP Showcase is a sample app
that features the different

00:00:32.740 --> 00:00:36.170
creative types offered by
DoubleClick for Mobile,

00:00:36.170 --> 00:00:39.430
DoubleClick for Publishers
Mobile, both bundled and

00:00:39.430 --> 00:00:41.350
premium features.

00:00:41.350 --> 00:00:44.420
To the right here, you see a
screenshot of what the version

00:00:44.420 --> 00:00:49.440
one app looked like with a set
of eight examples here.

00:00:49.440 --> 00:00:51.680
And what does v2 include?

00:00:51.680 --> 00:00:54.850
Well, v2 adds support for
additional creative types such

00:00:54.850 --> 00:00:59.380
as MRAID banners, Mobile Image
Carousel ads, video

00:00:59.380 --> 00:01:01.780
interstitials on Android.

00:01:01.780 --> 00:01:05.150
And we also are more explicit
about the categorization

00:01:05.150 --> 00:01:09.390
between bundled features offered
to DFP Publishers for

00:01:09.390 --> 00:01:13.710
Small Business and premium, to
creative types which are

00:01:13.710 --> 00:01:15.420
offered to DFP premium
Publishers.

00:01:19.220 --> 00:01:21.230
So now that we know what the
project is all about, let's

00:01:21.230 --> 00:01:23.390
walk through how to build it.

00:01:23.390 --> 00:01:27.610
So if you're trying to build
this on Android, you're going

00:01:27.610 --> 00:01:29.950
to need the Android SDK
installed with the latest

00:01:29.950 --> 00:01:31.270
system image.

00:01:31.270 --> 00:01:33.230
We recommend the latest image.

00:01:33.230 --> 00:01:35.560
You don't actually
need the latest.

00:01:35.560 --> 00:01:38.110
We prefer the Eclipse
development environment, or if

00:01:38.110 --> 00:01:40.730
you use InnteliJ, that's
fine as well.

00:01:40.730 --> 00:01:45.010
And you'll want to download
the DFP Showcase Android

00:01:45.010 --> 00:01:48.920
version two Sample Project from
our Google Mobile Dev

00:01:48.920 --> 00:01:52.240
Google Code Project as well
as the Google AdMob Ads

00:01:52.240 --> 00:01:57.010
SDK from our Docs.

00:01:57.010 --> 00:02:00.060
If you're on iOS, you want to
make sure you have Xcode 4.5

00:02:00.060 --> 00:02:04.750
installed as well as an iOS
version 4.3 or higher.

00:02:04.750 --> 00:02:07.090
And you'll want to download
the iOS version of the DFP

00:02:07.090 --> 00:02:12.700
Showcase App as well as the
Google AdMob Ads SDK for iOS.

00:02:12.700 --> 00:02:14.310
So currently, the
Android version

00:02:14.310 --> 00:02:15.520
has just been released.

00:02:15.520 --> 00:02:17.480
And so we're going to walk
through that today.

00:02:17.480 --> 00:02:20.690
The iOS version will be
coming out shortly.

00:02:20.690 --> 00:02:24.960
The implementation is
pretty similar.

00:02:24.960 --> 00:02:28.730
So to build the project, we're
just going to import the

00:02:28.730 --> 00:02:32.340
sample app that we downloaded
into our workspace, add the

00:02:32.340 --> 00:02:35.280
Google AdMob SDK library that
you also downloaded, and just

00:02:35.280 --> 00:02:35.920
run the app.

00:02:35.920 --> 00:02:38.470
That's all that's required.

00:02:38.470 --> 00:02:42.100
So I have an empty Eclipse
workspace here.

00:02:42.100 --> 00:02:46.820
I'm going to go to File, New
Project, Import a Project from

00:02:46.820 --> 00:02:48.590
Existing Code.

00:02:48.590 --> 00:02:51.940
And I already have it
downloaded here.

00:02:51.940 --> 00:02:53.190
So I'm just going
to open it up.

00:02:55.640 --> 00:02:58.990
Here's our project.

00:02:58.990 --> 00:03:03.230
We're also going to want to add
to Google AdMob SDK in the

00:03:03.230 --> 00:03:07.460
Libs directory, that way we
don't need to reference it

00:03:07.460 --> 00:03:09.320
explicitly in our build path.

00:03:09.320 --> 00:03:11.050
So I've added it here.

00:03:11.050 --> 00:03:14.250
All the compilers
have gone away.

00:03:14.250 --> 00:03:15.790
We should be able to run
this app right away.

00:03:32.550 --> 00:03:35.090
So I'm running it on a
Galaxy Nexus emulator

00:03:35.090 --> 00:03:36.890
running Jelly Bean.

00:03:36.890 --> 00:03:38.140
And it's loading up the app.

00:03:44.540 --> 00:03:47.280
And this is what it looks
like on Android.

00:03:47.280 --> 00:03:50.100
So we have a list view here.

00:03:50.100 --> 00:03:53.840
Well, two list views in a tab
controller here showing all

00:03:53.840 --> 00:03:55.610
the different examples.

00:03:55.610 --> 00:04:02.006
If we click through, for
example, just a basic image,

00:04:02.006 --> 00:04:04.060
we'll just come to an image
activity and it will

00:04:04.060 --> 00:04:07.080
load the image ad.

00:04:07.080 --> 00:04:09.060
We can go to some more
complex examples like

00:04:09.060 --> 00:04:10.310
Mobile Image Carousel.

00:04:13.090 --> 00:04:17.070
And here, we're getting a
bigger a 300 by 250 ad--

00:04:17.070 --> 00:04:19.649
or we should.

00:04:19.649 --> 00:04:21.440
Here we go--

00:04:21.440 --> 00:04:22.390
with multiple images.

00:04:22.390 --> 00:04:24.640
And you can swipe through.

00:04:24.640 --> 00:04:26.120
You can also click through.

00:04:26.120 --> 00:04:28.960
These ads all have clickthrough
URLs.

00:04:28.960 --> 00:04:34.150
So this is a Google Glass ad.

00:04:34.150 --> 00:04:43.520
And so we'll go to
google.com/glass.

00:04:43.520 --> 00:04:44.940
So I'm going to quickly walk
through how this is

00:04:44.940 --> 00:04:48.680
implemented on the
native side.

00:04:48.680 --> 00:04:55.460
So here's our main activity with
our tab controller here.

00:04:55.460 --> 00:05:00.280
We create a tab host, and
we're adding two tabs.

00:05:00.280 --> 00:05:05.370
One's going to be for bundled,
one's going to be for premium.

00:05:05.370 --> 00:05:11.800
We have our list of constants
here representing each enum.

00:05:11.800 --> 00:05:14.270
And the constant here represents
an ad format.

00:05:14.270 --> 00:05:19.790
We give it a name, a size, an
icon, and that will be the

00:05:19.790 --> 00:05:22.870
icons that you see
on the main page.

00:05:22.870 --> 00:05:24.830
So name, size, icon.

00:05:24.830 --> 00:05:26.490
As well as an ad unit
that we're using

00:05:26.490 --> 00:05:29.180
to make the ad request.

00:05:29.180 --> 00:05:33.250
And the actual implementation
checks to see which example

00:05:33.250 --> 00:05:34.880
we're running.

00:05:34.880 --> 00:05:38.370
It either creates a banner view
or an interstitial with

00:05:38.370 --> 00:05:42.566
the appropriate ad unit.

00:05:42.566 --> 00:05:46.150
I'll walk through an example
interstitial here.

00:05:46.150 --> 00:05:47.960
Let's walk through the mobile
interstitial with auto-close.

00:05:51.380 --> 00:05:54.210
So this interstitial will
automatically close after five

00:05:54.210 --> 00:05:55.730
seconds because that's
how it was set up.

00:06:01.740 --> 00:06:03.340
So that's pretty much
the implementation

00:06:03.340 --> 00:06:04.605
on the native side.

00:06:04.605 --> 00:06:07.820
But I think what's more
important for DFP Publishers

00:06:07.820 --> 00:06:11.740
is how you actually set
it up within DFP.

00:06:11.740 --> 00:06:14.480
So we're going to walk through
each of these examples and

00:06:14.480 --> 00:06:18.030
talk about how they're
set up in DFP.

00:06:18.030 --> 00:06:21.000
So the first example we have
is just your basic image.

00:06:21.000 --> 00:06:24.170
I showed it to you already.

00:06:24.170 --> 00:06:30.900
We come into Image, and it's
just set up as a 360 by 50

00:06:30.900 --> 00:06:32.170
banner here.

00:06:32.170 --> 00:06:33.880
So how do we do that in DFP?

00:06:33.880 --> 00:06:37.210
Well, this is using
a bundled feature.

00:06:37.210 --> 00:06:39.980
So small businesses
can use the Image

00:06:39.980 --> 00:06:42.450
Creative Format template.

00:06:42.450 --> 00:06:44.990
And all you need to provide
is a clickthrough URL.

00:06:44.990 --> 00:06:47.960
So we'll click through
to plus.google.com.

00:06:47.960 --> 00:06:49.150
A size.

00:06:49.150 --> 00:06:52.370
So this is actually implemented
as a 320 by 50 and

00:06:52.370 --> 00:06:55.730
a 360 by 50 so we can support
some of the bigger Android

00:06:55.730 --> 00:06:59.610
devices like the Galaxy Nexus
or S3 as well as like the

00:06:59.610 --> 00:07:02.830
iPhone 5 who's only 320 wide.

00:07:02.830 --> 00:07:07.760
We provide a clickthrough URL,
target the ad unit size, and

00:07:07.760 --> 00:07:08.510
we're good to go.

00:07:08.510 --> 00:07:11.960
And we get an ad unit, and we
just put that in our app and

00:07:11.960 --> 00:07:14.410
make sure we request the correct
size, and we'll get

00:07:14.410 --> 00:07:16.430
that served.

00:07:16.430 --> 00:07:19.550
The downside of this basic image
template is that you do

00:07:19.550 --> 00:07:22.320
not get high-resolution
images.

00:07:22.320 --> 00:07:27.190
What that means is if you upload
a 320 by 50 image,

00:07:27.190 --> 00:07:31.680
you'll have a 320 by 50
creative, and that's what it

00:07:31.680 --> 00:07:32.710
will look like on the screen.

00:07:32.710 --> 00:07:38.620
If you wanted to upload
a 640 by 100 image for

00:07:38.620 --> 00:07:41.250
high-resolution devices, it
would actually look too big

00:07:41.250 --> 00:07:44.270
and it would only show
the top left segment

00:07:44.270 --> 00:07:46.010
on the screen here.

00:07:46.010 --> 00:07:48.300
That's one of the downsides
of using an image

00:07:48.300 --> 00:07:49.600
template like this.

00:07:49.600 --> 00:07:52.420
To get around that for
high-resolution images, you'll

00:07:52.420 --> 00:07:56.570
have to use a custom template
that you can create or write

00:07:56.570 --> 00:07:57.450
some custom code.

00:07:57.450 --> 00:07:59.926
And we'll kind of walk through
that later, how you do that.

00:08:03.280 --> 00:08:06.880
So the next sample we'll talk
about is an AdMob banner.

00:08:06.880 --> 00:08:12.010
So within DFP, you can set
up to backfill to AdMob.

00:08:12.010 --> 00:08:16.140
And what this is doing under the
hood is calling into the

00:08:16.140 --> 00:08:19.620
Google AdMob SDK and requesting
an AdMob ad.

00:08:19.620 --> 00:08:21.090
So how is that done in DFP?

00:08:21.090 --> 00:08:24.100
Well, it's set up as AdMob
Creative Type.

00:08:24.100 --> 00:08:27.920
And all you need to pass is
your AdMob publisher ID.

00:08:27.920 --> 00:08:31.650
And DFP will go and request
the AdMob ad for you.

00:08:31.650 --> 00:08:36.059
You also request a target
size, 320 by 50.

00:08:36.059 --> 00:08:39.900
In this case, we can't support
360 by 50 because AdMob

00:08:39.900 --> 00:08:41.659
doesn't support that as
an explicit size.

00:08:41.659 --> 00:08:48.180
DFP requires specific sizes like
320 by 50, 300 by 250,

00:08:48.180 --> 00:08:50.040
and has to request a size
that AdMob supports.

00:08:53.200 --> 00:08:56.960
Similar to the AdMob example is
the SDK Mediation example.

00:08:56.960 --> 00:09:00.650
So you can also implement
AdMob Mediation directly

00:09:00.650 --> 00:09:02.010
through DFP.

00:09:02.010 --> 00:09:05.070
So in this example, we're
using the SDK Mediation

00:09:05.070 --> 00:09:06.390
Creative type.

00:09:06.390 --> 00:09:10.870
And we only set up one ad
network here which is AdMob,

00:09:10.870 --> 00:09:14.410
and also provided the
publisher ID here.

00:09:14.410 --> 00:09:16.480
On the native side, this will
actually go through the

00:09:16.480 --> 00:09:20.290
mediation flow, and you could
set up multiple networks if

00:09:20.290 --> 00:09:21.300
you wanted to.

00:09:21.300 --> 00:09:23.750
We just have AdMob
in this example.

00:09:23.750 --> 00:09:25.500
So again, you'll see it'll
look the same.

00:09:25.500 --> 00:09:28.930
You'll see an AdMob ad.

00:09:28.930 --> 00:09:31.260
But again, you could set up
multiple networks here.

00:09:31.260 --> 00:09:35.760
And you can also provide the
timeout, which is how long we

00:09:35.760 --> 00:09:39.250
expect AdMob to wait for each
network to come back with a

00:09:39.250 --> 00:09:40.120
creative or not.

00:09:40.120 --> 00:09:41.470
If it takes too long,
we'll timeout.

00:09:45.910 --> 00:09:47.610
So the next example we
have here is just a

00:09:47.610 --> 00:09:49.320
text and image ad.

00:09:49.320 --> 00:09:51.840
There's a text and
image template.

00:09:51.840 --> 00:09:55.020
This is all for small
business.

00:09:55.020 --> 00:09:58.240
You just provide, again,
a destination URL, the

00:09:58.240 --> 00:10:04.480
headlines, so DFP Showcase ad
is what you see up top.

00:10:04.480 --> 00:10:08.340
Two descriptions which
will flip, as well

00:10:08.340 --> 00:10:09.920
as the button text.

00:10:09.920 --> 00:10:11.910
I think that's if the button's
not available.

00:10:11.910 --> 00:10:15.440
And it generates this text
and image ad for you.

00:10:15.440 --> 00:10:19.480
So again, in the application,
this is what it looks like.

00:10:23.270 --> 00:10:27.040
And we have our text
and image ad.

00:10:27.040 --> 00:10:32.280
So this is also set
up as a 320 by 50.

00:10:32.280 --> 00:10:34.040
The next example is a DFA tag.

00:10:34.040 --> 00:10:37.210
So as a DFP publisher, you
might be working with a

00:10:37.210 --> 00:10:41.370
creative agency who sets up
an ad in DoubleClick for

00:10:41.370 --> 00:10:44.620
advertisers and just gives
you a DoubleClick tag.

00:10:44.620 --> 00:10:47.710
And you'll just go into DFP and
create a DoubleClick tag

00:10:47.710 --> 00:10:51.750
template and pass in
the redirect URL.

00:10:51.750 --> 00:10:55.660
And it will redirect to the DFA
and serve the DFA ad that

00:10:55.660 --> 00:10:58.350
the creative agency gave you.

00:10:58.350 --> 00:11:02.530
So in this case, this redirect
URL points to a DoubleClick

00:11:02.530 --> 00:11:13.870
ad, also set up as
a 320 by 50.

00:11:13.870 --> 00:11:15.192
And we can see it here below.

00:11:22.090 --> 00:11:24.030
So the next example we're
showing here is an MRAID

00:11:24.030 --> 00:11:25.310
Expandable.

00:11:25.310 --> 00:11:28.180
This is actually using a
third-party template where you

00:11:28.180 --> 00:11:30.180
actually are writing
your own code.

00:11:30.180 --> 00:11:32.750
For this example, we've set up
two different creatives--

00:11:32.750 --> 00:11:36.390
one for 320 by 50 and
one for 360 by 50.

00:11:36.390 --> 00:11:39.650
And the native application will
determine the screen size

00:11:39.650 --> 00:11:44.270
to figure out which one is more
appropriate to request.

00:11:44.270 --> 00:11:46.860
And the creative itself is using
media queries to serve

00:11:46.860 --> 00:11:51.570
the appropriate assets for
the expanded image.

00:11:51.570 --> 00:11:53.750
And we'll talk about
that in a second.

00:11:53.750 --> 00:11:57.850
And it also uses the MRAID
API to expand the image.

00:11:57.850 --> 00:12:00.580
So let's quickly look at what
it looks like in the

00:12:00.580 --> 00:12:01.830
application.

00:12:08.090 --> 00:12:11.050
In this case, we'll get a 360 by
50 because the Galaxy Nexus

00:12:11.050 --> 00:12:12.300
is big enough.

00:12:12.300 --> 00:12:14.560
If we click through, it'll
open to an overlay.

00:12:14.560 --> 00:12:15.910
This is a one piece
expandable.

00:12:15.910 --> 00:12:22.720
And it's serving a 360 by 592
image in this case with some

00:12:22.720 --> 00:12:25.680
black borders and the
big image here.

00:12:25.680 --> 00:12:27.380
And we can close it.

00:12:27.380 --> 00:12:29.240
And we'll walk through the
creative code for this.

00:12:32.220 --> 00:12:35.860
So there's a couple things
to look at here.

00:12:35.860 --> 00:12:38.630
The big thing to point out
is the media query here.

00:12:38.630 --> 00:12:42.780
We're looking at only screens
and the max height of 592,

00:12:42.780 --> 00:12:44.520
which represents
a Galaxy Nexus.

00:12:44.520 --> 00:12:51.400
Then we'll serve content URL
for a 360 by 592 image.

00:12:51.400 --> 00:12:53.370
If the screen is bigger
than that--

00:12:53.370 --> 00:12:58.300
so like the S3 has, I think,
640 density pixels high--

00:12:58.300 --> 00:13:04.610
then we'll serve the 360
by 640 image here.

00:13:04.610 --> 00:13:08.620
So this is how we can have the
creative decide which asset to

00:13:08.620 --> 00:13:12.730
serve based on the
screen size.

00:13:12.730 --> 00:13:14.050
And that's the basic HTML.

00:13:14.050 --> 00:13:15.295
We just have a banner.

00:13:15.295 --> 00:13:17.750
When it's clicked, we
call MRAID.expand.

00:13:17.750 --> 00:13:22.700
It's using the basic MRAID
API to call expand.

00:13:22.700 --> 00:13:25.290
And it's a one piece expendable
because we're not

00:13:25.290 --> 00:13:28.810
passing in a parameter here.

00:13:28.810 --> 00:13:30.290
Expand can take a URL.

00:13:30.290 --> 00:13:33.280
And if you pass that, it'll be a
two piece expandable, and it

00:13:33.280 --> 00:13:38.000
will load the new HTML file
that you pass there.

00:13:38.000 --> 00:13:40.690
On the JavaScript side, we're
doing a couple things.

00:13:40.690 --> 00:13:43.930
We are listening for
state changes.

00:13:43.930 --> 00:13:46.720
So when the MRAID state changes,
if it's expanded,

00:13:46.720 --> 00:13:52.290
we're setting the banner image
to use the overlay banner.

00:13:52.290 --> 00:13:56.200
And the overlay banner will be
one of these content URLs.

00:13:56.200 --> 00:13:58.450
And in the default case when
it's not expanded, we're just

00:13:58.450 --> 00:14:03.280
using the basic banner which is
a 360 by 50, or the other

00:14:03.280 --> 00:14:07.650
creative would have
a 320 by 50 here.

00:14:07.650 --> 00:14:12.210
And so when the creative loads,
we're going to add the

00:14:12.210 --> 00:14:14.650
event listener for
the state change.

00:14:14.650 --> 00:14:16.460
And if it's already in the
default mode, then we're going

00:14:16.460 --> 00:14:19.920
to call handle state changes
explicitly to set

00:14:19.920 --> 00:14:22.500
the class to banner.

00:14:25.040 --> 00:14:28.810
So this is all set up as a
third-party creative template,

00:14:28.810 --> 00:14:30.605
and you have to put in all
this code yourself.

00:14:34.780 --> 00:14:38.460
The final example that we're
going to show from the bundled

00:14:38.460 --> 00:14:40.540
side is an interstitial.

00:14:40.540 --> 00:14:42.130
So this is a basic
interstitial.

00:14:42.130 --> 00:14:45.376
It's also implemented as
a third-party creative.

00:14:45.376 --> 00:14:48.530
But we're serving it as an
interstitial within the SDK.

00:14:48.530 --> 00:14:52.050
So in this case, we just have
one third-party creative.

00:14:52.050 --> 00:14:55.320
And because it's an interstitial
overlay, the

00:14:55.320 --> 00:14:57.510
media queries won't work.

00:14:57.510 --> 00:15:00.760
I tested it out, and looks like
the min and max height

00:15:00.760 --> 00:15:04.550
can be infinite because
the overlay kind of

00:15:04.550 --> 00:15:06.360
spans pass the screen.

00:15:06.360 --> 00:15:09.550
So the way we worked around this
here is to, on the native

00:15:09.550 --> 00:15:14.650
side, pass some parameters of
the screen size basically to

00:15:14.650 --> 00:15:15.190
the creative.

00:15:15.190 --> 00:15:17.840
And the creative can read
those and determine

00:15:17.840 --> 00:15:19.970
what asset to serve.

00:15:19.970 --> 00:15:23.320
This example also uses the
countdown timer and can also

00:15:23.320 --> 00:15:25.340
auto close the interstitial.

00:15:25.340 --> 00:15:28.010
So this is what it looks like
on both iOS and Android.

00:15:28.010 --> 00:15:30.210
You can click the Show
Interstitial button.

00:15:30.210 --> 00:15:33.180
And will put in the right
creative based

00:15:33.180 --> 00:15:36.320
on the screen size.

00:15:36.320 --> 00:15:39.770
So how is this done in code?

00:15:39.770 --> 00:15:41.520
Again, we're looking
at JavaScript here.

00:15:41.520 --> 00:15:45.590
This top portion shows how to
implement the auto-close.

00:15:45.590 --> 00:15:49.140
We have a display counter
of five seconds.

00:15:49.140 --> 00:15:52.810
And we'll start the countdown
and basically the number of

00:15:52.810 --> 00:15:55.350
seconds times 1,000
milliseconds.

00:15:55.350 --> 00:15:59.040
That's how long we'll wait to
call admob.opener.close.

00:15:59.040 --> 00:16:03.610
This is part of the Google
Mobile Ads API.

00:16:03.610 --> 00:16:08.720
And after that time, we will
call admob.opener.close.

00:16:08.720 --> 00:16:12.300
and it will automatically
close the interstitial.

00:16:12.300 --> 00:16:14.100
The magic with the multiple
creatives here

00:16:14.100 --> 00:16:16.530
is under Set Image.

00:16:16.530 --> 00:16:18.980
So we get the screen
width and screen

00:16:18.980 --> 00:16:22.760
height via this pattern.

00:16:22.760 --> 00:16:27.080
And this pattern screen width
is coming directly from the

00:16:27.080 --> 00:16:31.300
native portion of the code,
which is set down here.

00:16:31.300 --> 00:16:37.260
So in our ad request, we're
specifying some extras with

00:16:37.260 --> 00:16:41.030
the screen width parameter,
which gets the screen width

00:16:41.030 --> 00:16:44.330
and density pixels as well
as the screen height.

00:16:44.330 --> 00:16:49.330
And we can read those within
a DFP creative by doing

00:16:49.330 --> 00:16:55.750
%%pattern colon and then
the extra key name.

00:16:55.750 --> 00:17:00.130
So for a Galaxy Nexus, this will
return 360 and 592 as a

00:17:00.130 --> 00:17:02.470
screen width and height.

00:17:02.470 --> 00:17:06.460
And we're going to get our image
source based on this.

00:17:06.460 --> 00:17:09.670
So we're going to default
to a smaller image.

00:17:09.670 --> 00:17:13.190
And if the screen height's
more than 640, then we're

00:17:13.190 --> 00:17:17.310
going to set the image source
to the 360 by 640 creative.

00:17:17.310 --> 00:17:19.530
If the screen height's greater
than 592, we're going to set

00:17:19.530 --> 00:17:22.530
it to the 360 by 592 creative.

00:17:22.530 --> 00:17:28.510
So in this way, we're able to
serve a different asset using

00:17:28.510 --> 00:17:31.770
the same code by checking the
screen width and screen height

00:17:31.770 --> 00:17:33.220
that we're expecting from
the native SDK.

00:17:37.050 --> 00:17:38.955
So that's it for the
bundled features.

00:17:38.955 --> 00:17:41.070
Now I'm going to talk
about the premium

00:17:41.070 --> 00:17:43.660
features offered in DFP.

00:17:43.660 --> 00:17:46.930
So the first one is Mobile
Image Carousel.

00:17:46.930 --> 00:17:50.850
This is set up as a create
template that's pre-defined

00:17:50.850 --> 00:17:53.430
called Mobile Image Carousel
App and Web.

00:17:53.430 --> 00:17:55.530
You pass in a target size--

00:17:55.530 --> 00:18:00.920
in this case, 300 by 250, a
clickthrough URL, the width

00:18:00.920 --> 00:18:03.840
and height of the images.

00:18:03.840 --> 00:18:07.760
And then you just upload
five images assets.

00:18:07.760 --> 00:18:13.040
And DFP will create the
snippet for you.

00:18:13.040 --> 00:18:16.700
It's read only, so the creative
code gets essentially

00:18:16.700 --> 00:18:18.350
sent to the application.

00:18:18.350 --> 00:18:23.210
And I'll show it to you
in the app again.

00:18:28.560 --> 00:18:32.280
We get this carousel looking ad
that we can swipe through.

00:18:36.070 --> 00:18:39.430
So the advantage with
DoubleClick for Publishers

00:18:39.430 --> 00:18:41.940
premium is that you can get
this template for free.

00:18:41.940 --> 00:18:45.450
You can actually implement the
same thing with DoubleClick

00:18:45.450 --> 00:18:48.240
for Publishers bundled
if you had this code.

00:18:48.240 --> 00:18:51.240
So this snippet right here, you
could actually copy and

00:18:51.240 --> 00:18:53.710
paste that.

00:18:53.710 --> 00:18:55.580
I guess you don't have access
to it if you're not premium

00:18:55.580 --> 00:18:58.900
publisher, but you could write
this same code yourself, and

00:18:58.900 --> 00:19:00.360
you could host your own
images, and you could

00:19:00.360 --> 00:19:01.870
essentially kind of make
the same thing.

00:19:01.870 --> 00:19:04.710
But it's kind of roll
your own solution.

00:19:04.710 --> 00:19:07.030
Premium gives you these
pre-defined templates which

00:19:07.030 --> 00:19:08.710
you can use to set
up these types of

00:19:08.710 --> 00:19:09.960
creatives really easily.

00:19:12.640 --> 00:19:14.920
The next example I have here
is a mobile image with a

00:19:14.920 --> 00:19:16.740
Google +1 button.

00:19:16.740 --> 00:19:20.020
So this, again, is another
DoubleClick for Publishers

00:19:20.020 --> 00:19:24.720
premium creative pre-defined
mobile image with Google +1

00:19:24.720 --> 00:19:26.200
app and web.

00:19:26.200 --> 00:19:28.790
Again, you give it an image
asset, a width and height, a

00:19:28.790 --> 00:19:32.310
clickthrough URL, and a couple
other parameters.

00:19:32.310 --> 00:19:36.400
And it'll show the asset for
you and also put in this

00:19:36.400 --> 00:19:37.910
Google +1 button.

00:19:37.910 --> 00:19:40.530
And again, the template snippet
is below if you want

00:19:40.530 --> 00:19:41.780
to roll your own solution.

00:19:45.050 --> 00:19:49.540
So in the app, we're requesting
the appropriate 300

00:19:49.540 --> 00:19:53.850
by 250 size with the ad unit
that we set up in DFP, and we

00:19:53.850 --> 00:19:55.100
get that ad.

00:20:06.300 --> 00:20:09.080
Next example we have is Mobile
Interstitial with Auto-close.

00:20:09.080 --> 00:20:13.020
This is very similar to the
interstitial example we showed

00:20:13.020 --> 00:20:16.280
you on the DoubleClick for
Publishers bundled side,

00:20:16.280 --> 00:20:19.480
except the advantage here is
that we can use a template

00:20:19.480 --> 00:20:22.890
instead of having to hand
form our own code.

00:20:22.890 --> 00:20:26.920
So in this example, we set a
target ad size, an image for

00:20:26.920 --> 00:20:30.020
portrait, an image for
landscape, and a clickthrough

00:20:30.020 --> 00:20:32.830
URL, as well as how long
we want to display this

00:20:32.830 --> 00:20:36.500
interstitial before
we close it.

00:20:36.500 --> 00:20:39.470
And we can set up this
interstitial.

00:20:39.470 --> 00:20:41.720
The creative template
snippet is below.

00:20:41.720 --> 00:20:45.730
That's essentially what we use
to build the bundled version

00:20:45.730 --> 00:20:47.960
of this interstitial.

00:20:47.960 --> 00:20:51.030
The downside of this specific
template is it does not allow

00:20:51.030 --> 00:20:54.520
you to specify multiple
image assets for

00:20:54.520 --> 00:20:56.160
different screen sizes.

00:20:56.160 --> 00:20:58.820
So if you wanted to do what
we did in the regular

00:20:58.820 --> 00:21:01.760
interstitial example, you're
still going to need to kind of

00:21:01.760 --> 00:21:04.370
hand form your own creative.

00:21:04.370 --> 00:21:07.600
But this is good to give
you just your basic--

00:21:07.600 --> 00:21:08.160
in this case--

00:21:08.160 --> 00:21:10.390
320 by 480 example.

00:21:10.390 --> 00:21:13.845
And if you rotated your device
to landscape, it would give

00:21:13.845 --> 00:21:15.490
you the landscape version
of this image.

00:21:19.030 --> 00:21:21.310
Our bundled interstitial
example did not include

00:21:21.310 --> 00:21:22.980
landscape assets.

00:21:22.980 --> 00:21:24.730
And so there, you would see the

00:21:24.730 --> 00:21:26.640
portrait asset in landscape.

00:21:26.640 --> 00:21:30.770
So you would have to alter that
code if you wanted to get

00:21:30.770 --> 00:21:32.020
this kind of effect.

00:21:35.500 --> 00:21:37.610
Another template that
DFP premium

00:21:37.610 --> 00:21:39.890
offers is Image Animation.

00:21:39.890 --> 00:21:44.020
So with Image Animation, you
essentially set up an image

00:21:44.020 --> 00:21:50.470
animation template and upload a
few images that you want to

00:21:50.470 --> 00:21:51.480
move between.

00:21:51.480 --> 00:21:53.820
You can decide how long each
one of those assets gets

00:21:53.820 --> 00:21:57.690
displayed, how they're
transitioned and their

00:21:57.690 --> 00:22:00.030
clickthrough URL.

00:22:00.030 --> 00:22:03.610
And you get something that
looks like this.

00:22:03.610 --> 00:22:07.040
We're going to serve this as
an interstitial, and we

00:22:07.040 --> 00:22:10.490
provided 320 by 480 images.

00:22:10.490 --> 00:22:14.100
And here, we have Honeycomb
images that are transitioning.

00:22:19.590 --> 00:22:21.895
So again, you get this template
for free when you're

00:22:21.895 --> 00:22:23.800
a premium publisher.

00:22:23.800 --> 00:22:28.620
If you were doing this as a not
premium publisher, you'd

00:22:28.620 --> 00:22:29.870
have to implement
this yourself.

00:22:33.380 --> 00:22:36.770
I want to talk about the Video
Interstitial template.

00:22:36.770 --> 00:22:41.870
For DFP premium, again, we
specify a default loading

00:22:41.870 --> 00:22:44.880
image while the interstitial
is loading.

00:22:44.880 --> 00:22:48.800
And then we just upload a video
file, and DFP will put

00:22:48.800 --> 00:22:50.590
it in all the right formats
that you need for all

00:22:50.590 --> 00:22:52.410
different devices.

00:22:52.410 --> 00:22:56.210
You give it a destination URL,
and you can also add a couple

00:22:56.210 --> 00:22:59.350
buttons on the bottom to
go to Google+ or post

00:22:59.350 --> 00:23:02.730
to Facebook or Twitter.

00:23:02.730 --> 00:23:05.250
And they all have clickthrough
URLs as well.

00:23:05.250 --> 00:23:09.140
And using that template really
quick, you can get a video

00:23:09.140 --> 00:23:10.390
interstitial.

00:23:20.370 --> 00:23:25.750
So this is our image while the
video interstitial is loading.

00:23:25.750 --> 00:23:27.548
And the video should
start playing.

00:23:30.754 --> 00:23:32.430
Might be a little slow
one on the emulator.

00:23:35.910 --> 00:23:38.690
You can also decide whether or
not this video interstitial

00:23:38.690 --> 00:23:40.245
should auto close after
it's done playing.

00:23:45.010 --> 00:23:46.470
So the last three templates
we have

00:23:46.470 --> 00:23:49.920
here are custom templates.

00:23:49.920 --> 00:23:53.530
This is very similar to the
basic image that we had on the

00:23:53.530 --> 00:23:57.500
bundled side, except we wrote
our own code, but we're able

00:23:57.500 --> 00:24:00.700
to write a template for it so
that we could keep reusing it

00:24:00.700 --> 00:24:02.400
for different types
of creatives.

00:24:02.400 --> 00:24:04.730
So this is a click
to download ad.

00:24:04.730 --> 00:24:07.210
It's essentially just your
basic image except its

00:24:07.210 --> 00:24:12.780
clickthrough URL is a Google
Play URL, so it will go to the

00:24:12.780 --> 00:24:15.940
Google Play Store as opposed
to just a web browser.

00:24:15.940 --> 00:24:21.310
We also set up an equivalent iOS
version that goes to the

00:24:21.310 --> 00:24:22.880
Apple Store.

00:24:22.880 --> 00:24:28.310
And the benefit of this type
of template that we set up

00:24:28.310 --> 00:24:34.850
here is we allowed you to
specify a width and height,

00:24:34.850 --> 00:24:36.610
and as well as an
image upload.

00:24:36.610 --> 00:24:39.750
But you can upload, in this
case, a high-res image, like

00:24:39.750 --> 00:24:45.100
640 by 100, and set the width
and height to be 320 by 50.

00:24:45.100 --> 00:24:48.350
And the actual code here has an
image tag which takes the

00:24:48.350 --> 00:24:52.640
big URL but specifically
sets the width and

00:24:52.640 --> 00:24:55.010
height to 320 by 50.

00:24:55.010 --> 00:24:57.710
So this allows you to
shoehorn, I guess, a

00:24:57.710 --> 00:25:02.540
higher-res creative into
a smaller space.

00:25:02.540 --> 00:25:05.810
And so for those bigger devices,
bigger res devices

00:25:05.810 --> 00:25:10.640
that are actually 640 by 100,
you'll get that clear image.

00:25:10.640 --> 00:25:13.950
So again, if you're a bundled
publisher or a small business

00:25:13.950 --> 00:25:17.120
publisher, you can write
this code yourself.

00:25:17.120 --> 00:25:19.065
You just won't be able to create
a template for it, and

00:25:19.065 --> 00:25:21.550
every image you want to do high
res like this, you'll

00:25:21.550 --> 00:25:23.922
have to, again, hand
form your own code.

00:25:27.850 --> 00:25:30.540
So similarly for click to call,
it's using the exact

00:25:30.540 --> 00:25:32.830
same template, high-res
images.

00:25:32.830 --> 00:25:39.000
We have it set up 320 and 360 by
50 for both iPhones as well

00:25:39.000 --> 00:25:41.490
as Androids with
bigger screens.

00:25:41.490 --> 00:25:45.390
And the clickthrough URL in this
case is just a tel colon

00:25:45.390 --> 00:25:46.700
with the telephone number.

00:25:51.220 --> 00:25:52.440
Finally, the click to map.

00:25:52.440 --> 00:25:53.880
Again, very similar.

00:25:53.880 --> 00:26:00.440
Same 320 and 360 by
50 creatives.

00:26:00.440 --> 00:26:02.820
I think I have the wrong
image set up here.

00:26:02.820 --> 00:26:07.380
But the clickthrough URL will
be a Google Maps URL, and

00:26:07.380 --> 00:26:08.630
it'll open up Google Maps.

00:26:13.800 --> 00:26:20.300
So just to demo one for click
to map, it asks if you're

00:26:20.300 --> 00:26:23.010
looking for coffee.

00:26:23.010 --> 00:26:26.990
And it clicks through to Google
Maps which has a query

00:26:26.990 --> 00:26:29.343
for coffee in Mountain View.

00:26:41.910 --> 00:26:44.490
So it'll open up Maps.

00:26:44.490 --> 00:26:46.620
It'll input your query, assuming
you put in the right

00:26:46.620 --> 00:26:48.280
URL, and it'll do the search.

00:26:52.690 --> 00:26:55.440
So these are all the creatives
that we have in

00:26:55.440 --> 00:26:57.340
DFP Showcase V2.

00:26:57.340 --> 00:27:00.070
I'm going to leave you with a
couple resources for how to

00:27:00.070 --> 00:27:03.480
get started with this and some
other useful resources.

00:27:03.480 --> 00:27:06.355
So the SDK download you can
find that developers.googl

00:27:06.355 --> 00:27:06.590
e.com/mobile-ads-sdk/download.

00:27:06.590 --> 00:27:12.900
I The DFP site where you can set
up your creatives is just

00:27:12.900 --> 00:27:15.600
google.com/DFP.

00:27:15.600 --> 00:27:19.280
If you want to set up AdMob
creatives or SDK mediation,

00:27:19.280 --> 00:27:22.840
you can go to
google.com/ad/admob to log

00:27:22.840 --> 00:27:25.090
into your AdMob account.

00:27:25.090 --> 00:27:29.140
If you need help setting up
the native Android or iOS

00:27:29.140 --> 00:27:32.490
code, you can go to our
developer docs at

00:27:32.490 --> 00:27:32.816
developers.googl
e.com/mobile-ads

00:27:32.816 --> 00:27:34.066
-sdk/docs/dfp/fundamentals.

00:27:38.660 --> 00:27:43.270
We have a specific doc set,
especially for DFP.

00:27:43.270 --> 00:27:47.620
If you have any questions, you
can ask us in our forum at

00:27:47.620 --> 00:27:47.920
developers.googl
e.come/mobile-ad

00:27:47.920 --> 00:27:49.170
s-sdk/community.

00:27:51.850 --> 00:27:57.210
You can also see our Plus page
for all ads-related updates on

00:27:57.210 --> 00:27:59.080
your Google Developer
products.

00:27:59.080 --> 00:28:00.140
We also a blog.

00:28:00.140 --> 00:28:04.530
You can search for the AdMob SDK
tag on our blog for cool

00:28:04.530 --> 00:28:06.270
blog posts.

00:28:06.270 --> 00:28:11.070
For code examples, like the v2
version of this app, it will

00:28:11.070 --> 00:28:16.170
be hosted on code.google.com/
p/google-mobile-dev, our

00:28:16.170 --> 00:28:18.680
Google Mobile Dev, Google
Code project.

00:28:18.680 --> 00:28:22.390
And finally, for some sample
creatives if you're a small

00:28:22.390 --> 00:28:26.710
business publisher, some
of these creatives like

00:28:26.710 --> 00:28:31.450
interstitial with auto-close
and MRAID expandable, they

00:28:31.450 --> 00:28:34.990
have some sample code from
those templates on this

00:28:34.990 --> 00:28:38.690
support.google.com/dfp
small business site.

00:28:38.690 --> 00:28:41.740
I would recommend that if you're
looking to do MRAID

00:28:41.740 --> 00:28:43.660
expandables or kind of
writing your own code

00:28:43.660 --> 00:28:47.030
and need some help.

00:28:47.030 --> 00:28:47.660
So that's it.

00:28:47.660 --> 00:28:48.770
I'm Eric Leichtenschlag.

00:28:48.770 --> 00:28:50.020
Thanks for watching.

