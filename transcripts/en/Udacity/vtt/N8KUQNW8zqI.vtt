WEBVTT
Kind: captions
Language: en

00:00:00.370 --> 00:00:05.920
Liedtke, the author of the L3 microkernal, suggests tricks for exploiting the

00:00:05.920 --> 00:00:12.090
hardware and avoiding TLB flushes, even if the TLB is not address space tagged.

00:00:12.090 --> 00:00:15.366
And in particular, Liedtke's suggestion is

00:00:15.366 --> 00:00:18.894
that take advantage of whatever the architecture

00:00:18.894 --> 00:00:22.310
offers you. For example, the architecture may

00:00:22.310 --> 00:00:26.640
offer segment registers in x86 and PowerPC,

00:00:26.640 --> 00:00:32.280
both of them offer segment registers. What the segment registers do is give

00:00:32.280 --> 00:00:34.830
an opportunity for the operating system to

00:00:34.830 --> 00:00:38.630
specify the range of virtual addresses that

00:00:38.630 --> 00:00:42.560
can be legally accessed by the currently

00:00:42.560 --> 00:00:46.280
running process. What that means is, even

00:00:46.280 --> 00:00:52.340
though you have a linear address space, that is, a linear virtual address space.

00:00:52.340 --> 00:00:54.870
You can carve out that linear virtual

00:00:54.870 --> 00:00:58.770
address space among several different protection domains by

00:00:58.770 --> 00:01:01.950
using segment registers. So, here is the

00:01:01.950 --> 00:01:06.760
linear address space provided by the hardware, starts

00:01:06.760 --> 00:01:12.840
from zero to a max and that max is, of course, decided by the number

00:01:12.840 --> 00:01:17.380
of bits you have for addressing in the hardware architecture. If it's a 32 bit

00:01:17.380 --> 00:01:23.550
architecture, you have 2 to the 32 as the maximum addressing capability of

00:01:23.550 --> 00:01:29.510
that particular processor. If you have 64 bits, you have 2 to the 64 as a

00:01:29.510 --> 00:01:32.760
maximum address space that's available in that

00:01:32.760 --> 00:01:36.220
particular architecture. So that's the linear address space

00:01:36.220 --> 00:01:39.280
that is provided by the hardware. If

00:01:39.280 --> 00:01:43.130
the architecture, such as the PowerPC, offers segment

00:01:43.130 --> 00:01:45.620
registers to bound the range of virtual

00:01:45.620 --> 00:01:48.660
addresses that can be legally generated by

00:01:48.660 --> 00:01:52.400
a running process. Then use segment registers

00:01:52.400 --> 00:01:54.570
to define a protection domain. So here is

00:01:54.570 --> 00:01:58.190
one protection domain, S1, and it uses

00:01:58.190 --> 00:02:02.000
segment registers to say that this particular

00:02:02.000 --> 00:02:05.720
protection domain can generate virtual addresses starting

00:02:05.720 --> 00:02:08.650
from here to here. Any other virtual address

00:02:08.650 --> 00:02:13.400
generated by this guy is illegal, and the hardware will check that, because the

00:02:13.400 --> 00:02:18.460
segment registers are hardware-provided facility for bonding

00:02:18.460 --> 00:02:21.190
the range of legal virtual addresses that

00:02:21.190 --> 00:02:24.100
can be generated by this protection domain.

00:02:24.100 --> 00:02:28.140
Similarly, another protection domain, S2, can use

00:02:28.140 --> 00:02:29.950
the segment registers to carve out a

00:02:29.950 --> 00:02:33.680
different portion of the linear hardware address space.

00:02:33.680 --> 00:02:41.150
So, for S2, the bounds for legal, virtual addresses that can be generated by, a

00:02:41.150 --> 00:02:46.010
thread that is running, in this protect domain, starts from here. Ends here. And

00:02:46.010 --> 00:02:51.240
so on. So, in other words, we can take the hardware address space that's

00:02:51.240 --> 00:02:55.760
available. And using segment registers, provided by

00:02:55.760 --> 00:02:58.930
the hardware, you can carve out the hardware

00:02:58.930 --> 00:03:01.550
address space into these regions. And once we

00:03:01.550 --> 00:03:03.840
do that, there is no need for flushing the

00:03:03.840 --> 00:03:07.050
TLB on a context switch. Because, even before

00:03:07.050 --> 00:03:09.720
we consult the TLB to see if there is

00:03:09.720 --> 00:03:12.990
a match for a particular virtual address in

00:03:12.990 --> 00:03:17.290
the TLB, segment register will act as a first

00:03:17.290 --> 00:03:20.790
line of defense. And say that, oh, this address

00:03:20.790 --> 00:03:23.960
is kosher. This address is not kosher because it

00:03:23.960 --> 00:03:28.740
is not within the bounds of legal addresses that can be generated by this

00:03:28.740 --> 00:03:31.700
protection domain. In other words, the segment

00:03:31.700 --> 00:03:34.480
bounds that we're talking about are hardware

00:03:34.480 --> 00:03:38.360
enforced, so this works really well. If

00:03:38.360 --> 00:03:41.450
these protection domains are fairly small, meaning

00:03:41.450 --> 00:03:45.450
that the amount of space, memory space,

00:03:45.450 --> 00:03:49.370
that is needed by any given protection domain,

00:03:49.370 --> 00:03:52.280
is not the entire hardware address space. But it is a

00:03:52.280 --> 00:03:55.120
portion of the hardware address space. So we're able to carve

00:03:55.120 --> 00:03:57.440
out the available hardware address

00:03:57.440 --> 00:04:01.980
space among multiple co-resident, protection domains,

00:04:01.980 --> 00:04:05.820
in the hardware address space, using these concept of segment registers.

