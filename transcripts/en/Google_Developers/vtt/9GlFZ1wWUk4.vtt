WEBVTT
Kind: captions
Language: en

00:00:08.870 --> 00:00:09.770
CLAUDIO CHERUBINO:
Hi everyone.

00:00:09.770 --> 00:00:11.990
Welcome back to Google
Developers Live.

00:00:11.990 --> 00:00:14.410
My name is Claudio, and I'm one
of the engineers on the

00:00:14.410 --> 00:00:16.550
Google Drive developer
relations team.

00:00:16.550 --> 00:00:20.720
Today, I want to talk about how
to integrate your mobile

00:00:20.720 --> 00:00:24.550
app with the drive
app on Android.

00:00:24.550 --> 00:00:25.650
Why do that?

00:00:25.650 --> 00:00:28.540
Why should you do that?

00:00:28.540 --> 00:00:31.270
Sometimes, you want your
application to be able to open

00:00:31.270 --> 00:00:36.860
up a file that a user has, and
you don't want to write the

00:00:36.860 --> 00:00:38.520
file browser yourself.

00:00:38.520 --> 00:00:40.940
Also, because the users already
have a file browser,

00:00:40.940 --> 00:00:42.440
which is the drive
app on Android.

00:00:42.440 --> 00:00:45.830
So you can piggyback on that and
make sure that whenever a

00:00:45.830 --> 00:00:48.760
user wants to open up a file
from there, and that file is

00:00:48.760 --> 00:00:54.370
supported by your app, you can
automatically land the user

00:00:54.370 --> 00:00:56.660
from the drive up
into your app.

00:00:56.660 --> 00:01:00.910
What I'm going to show you today
is very easy, and I'm

00:01:00.910 --> 00:01:02.410
not going to start
from scratch.

00:01:02.410 --> 00:01:06.500
We already showed you how we can
build your first drive app

00:01:06.500 --> 00:01:08.740
on Android, and we have a
quick start guide in our

00:01:08.740 --> 00:01:09.860
documentation.

00:01:09.860 --> 00:01:11.750
So I will point you to that.

00:01:11.750 --> 00:01:14.680
And if this is the first time
you build a drive app on

00:01:14.680 --> 00:01:19.970
Android, you might want to go
back to one of our recordings

00:01:19.970 --> 00:01:22.960
and watch the video where I
explain how to get started,

00:01:22.960 --> 00:01:27.440
how to start up the application,
how [? does ?]

00:01:27.440 --> 00:01:29.970
the API's console project
and everything else.

00:01:29.970 --> 00:01:32.930
Once you've done that, you can
go back here and see how to

00:01:32.930 --> 00:01:36.500
improve the same quick start
application, so instead of

00:01:36.500 --> 00:01:41.140
doing whatever it was doing,
it will integrate with the

00:01:41.140 --> 00:01:42.630
drive app for Android.

00:01:42.630 --> 00:01:46.800
So I would just give you some
pointers, and if we take a

00:01:46.800 --> 00:01:51.580
look at my computer, what I have
here is the home page of

00:01:51.580 --> 00:01:56.120
the Drive SDK documentation,
which is available at

00:01:56.120 --> 00:01:59.420
developers.google.com/drive.

00:01:59.420 --> 00:02:00.920
We have a lot of things here.

00:02:00.920 --> 00:02:04.480
What you might want to
start with is the

00:02:04.480 --> 00:02:05.092
Android quick start.

00:02:05.092 --> 00:02:07.390
So if you go to the top right
corner in your page, you'll

00:02:07.390 --> 00:02:09.509
see that we have five-minute
quick starts in multiple

00:02:09.509 --> 00:02:11.290
languages and multiple
platforms.

00:02:11.290 --> 00:02:13.170
One of them is the
Android one.

00:02:13.170 --> 00:02:17.390
So if you click on this icon
here, we will be brought to a

00:02:17.390 --> 00:02:21.640
page that is a step-by-step
guide that explains how to run

00:02:21.640 --> 00:02:23.250
your first drive
up on Android.

00:02:23.250 --> 00:02:26.780
There are some preliminary
steps, some configuration

00:02:26.780 --> 00:02:29.350
required, and you will have
to do all of this.

00:02:29.350 --> 00:02:31.160
And this, well--

00:02:31.160 --> 00:02:33.550
I mean, you will always have to
do these steps regardless

00:02:33.550 --> 00:02:35.650
of the type of application
you build in Android.

00:02:35.650 --> 00:02:38.840
So before we can do what
I'm doing today, you

00:02:38.840 --> 00:02:40.580
will have to do this.

00:02:40.580 --> 00:02:43.790
So the steps are just, very
quickly, you have to generate

00:02:43.790 --> 00:02:47.350
a sign-in certificate that's
used to uniquely identify your

00:02:47.350 --> 00:02:49.900
app, and then you enable the
drive API into Google's API

00:02:49.900 --> 00:02:52.460
console and we will see that.

00:02:52.460 --> 00:02:55.830
And then you create and
configure an Android project

00:02:55.830 --> 00:02:57.150
on your machine.

00:02:57.150 --> 00:02:59.690
I use Eclipse and with Eclipse,
you have a Google

00:02:59.690 --> 00:03:04.120
plug-in that helps you get the
libraries you need and get all

00:03:04.120 --> 00:03:07.050
the .jars you need.

00:03:07.050 --> 00:03:09.810
What I'm going to talk about
today is about integrating

00:03:09.810 --> 00:03:13.900
your drive app with Android,
and we have a specific page

00:03:13.900 --> 00:03:15.100
for that in our docs.

00:03:15.100 --> 00:03:19.180
And these page is titled,
Integrate with Android, so if

00:03:19.180 --> 00:03:21.910
you click on that, you will be
brought to another page that

00:03:21.910 --> 00:03:24.680
explains what I'm actually
doing today.

00:03:24.680 --> 00:03:26.150
So there are some
of the steps.

00:03:26.150 --> 00:03:28.290
There are some of the
configuration here that is

00:03:28.290 --> 00:03:31.740
explained and this is where
I'll start from.

00:03:31.740 --> 00:03:36.930
So whenever you want to
integrate your Android

00:03:36.930 --> 00:03:39.650
application with Drive
application, the Google

00:03:39.650 --> 00:03:42.070
provided Drive application, the
first thing you have to do

00:03:42.070 --> 00:03:44.710
is to go to the APIs console.

00:03:44.710 --> 00:03:47.250
This is the API's console
from my project.

00:03:47.250 --> 00:03:51.070
I created this the last time
I built my quick start.

00:03:51.070 --> 00:03:55.390
So there are some additional
steps here.

00:03:55.390 --> 00:04:00.250
First of those steps, is to go
to the API Access tab, and--

00:04:00.250 --> 00:04:03.970
Sorry, go to the Services
tab first, and

00:04:03.970 --> 00:04:06.400
enable the drive SDK.

00:04:06.400 --> 00:04:08.330
Last time we only enabled
the Drive API.

00:04:08.330 --> 00:04:09.710
With the Drive API,
you can read and

00:04:09.710 --> 00:04:10.660
write files from Drive.

00:04:10.660 --> 00:04:12.540
You can manage files from Drive,
but if you want to

00:04:12.540 --> 00:04:16.730
integrate with the UI, either
the mobile UI or the web UI,

00:04:16.730 --> 00:04:18.760
you also have to enable
the Drive SDK.

00:04:18.760 --> 00:04:25.200
So I did this, and once you do
that, you will have a new page

00:04:25.200 --> 00:04:29.410
in your API console page with
specific configuration for the

00:04:29.410 --> 00:04:33.220
Drive SDK, so you can go there,
you actually have to,

00:04:33.220 --> 00:04:36.500
and then all you have to do
here to integrate with a

00:04:36.500 --> 00:04:39.270
mobile app is to fill
the required fields.

00:04:39.270 --> 00:04:42.290
And the required feels are just
the application icon.

00:04:42.290 --> 00:04:43.940
I have an icon.

00:04:43.940 --> 00:04:46.640
So you can select your file.

00:04:46.640 --> 00:04:48.690
I used this cloud file.

00:04:48.690 --> 00:04:50.920
It's just whatever
icon you want.

00:04:50.920 --> 00:04:52.290
That is required.

00:04:52.290 --> 00:04:54.660
And then, a document icon is
not actually required.

00:04:54.660 --> 00:04:58.060
The only other thing that is
required is the open URL.

00:04:58.060 --> 00:05:02.460
And the open URL, it is required
here, but it is not

00:05:02.460 --> 00:05:04.250
truly required in
a mobile app.

00:05:04.250 --> 00:05:07.530
So if you're only building
a mobile app, you can put

00:05:07.530 --> 00:05:11.560
whatever you want like a valid
URL, but it doesn't have to be

00:05:11.560 --> 00:05:15.540
an existing URL, so
I put example.com.

00:05:15.540 --> 00:05:18.400
We might want to change this
to streamline this process.

00:05:18.400 --> 00:05:21.030
If your app is only mobile, you
will not need to do this,

00:05:21.030 --> 00:05:22.320
so we might change this.

00:05:22.320 --> 00:05:24.380
But for the moment,
you will have to

00:05:24.380 --> 00:05:26.020
specify an open URL there.

00:05:26.020 --> 00:05:26.740
That's it.

00:05:26.740 --> 00:05:27.850
You can save your changes.

00:05:27.850 --> 00:05:33.080
And your mobile application
now, will be ready to

00:05:33.080 --> 00:05:35.610
integrate with the Drive app.

00:05:35.610 --> 00:05:39.560
Let's do this, I'm going to
show you what the app does

00:05:39.560 --> 00:05:43.585
live from my tablet, and
then, I will show the

00:05:43.585 --> 00:05:44.740
code that does that.

00:05:44.740 --> 00:05:46.870
So let's switch to the tablet.

00:05:46.870 --> 00:05:51.100
And my hidden assistant will
help me with this.

00:05:51.100 --> 00:05:54.800
So if we switch to the tablet
and we click on the Drive

00:05:54.800 --> 00:05:57.220
application.

00:05:57.220 --> 00:05:59.330
This is the standard
Drive application.

00:05:59.330 --> 00:06:00.760
We have a list of files.

00:06:00.760 --> 00:06:04.790
In my application, you will see
how this is done, but my

00:06:04.790 --> 00:06:07.740
application can't
open text files.

00:06:07.740 --> 00:06:11.380
So let's say a GDL.txt file.

00:06:11.380 --> 00:06:15.240
Since my application is
registered to open those

00:06:15.240 --> 00:06:18.240
files, whenever you click on
that text file, you will have

00:06:18.240 --> 00:06:21.980
a choice of which application
you want to use

00:06:21.980 --> 00:06:23.010
to open this one.

00:06:23.010 --> 00:06:25.350
My application, I didn't
even change its name.

00:06:25.350 --> 00:06:27.120
It's called Drive Quickstart.

00:06:27.120 --> 00:06:29.400
So we can click on that.

00:06:29.400 --> 00:06:34.260
From this point, all that
is here is done by my

00:06:34.260 --> 00:06:34.850
application.

00:06:34.850 --> 00:06:39.600
So you do authentication, you
grant access to your app, and

00:06:39.600 --> 00:06:41.730
the app is very, very simple.

00:06:41.730 --> 00:06:45.460
The UI is really let's
say, simple.

00:06:45.460 --> 00:06:49.530
What it does is basically, it
just opens the file and dumps

00:06:49.530 --> 00:06:53.880
the content of the file as
plain text on the screen.

00:06:53.880 --> 00:06:57.990
That said, now, if we go back
from here, we will go back to

00:06:57.990 --> 00:07:00.450
the Drive application.

00:07:00.450 --> 00:07:03.770
And if you have other files,
we can open other files.

00:07:03.770 --> 00:07:07.800
I said in my application that
it can also open HTML files.

00:07:07.800 --> 00:07:10.610
But it will not render them, it
will just open the HTML as

00:07:10.610 --> 00:07:13.880
plain text and dump
it into the page.

00:07:13.880 --> 00:07:15.690
And that said, this is what
my application does.

00:07:15.690 --> 00:07:20.450
Of course, you might want to
have other applications that,

00:07:20.450 --> 00:07:24.150
let's say, open files like
videos, images, or render

00:07:24.150 --> 00:07:25.240
HTML, do whatever you want.

00:07:25.240 --> 00:07:27.920
Of course, here, your
application business logic is

00:07:27.920 --> 00:07:29.280
yours too, to make.

00:07:29.280 --> 00:07:31.560
Let's see how this works.

00:07:31.560 --> 00:07:34.070
Let's switch to Eclipse.

00:07:34.070 --> 00:07:37.220
There are basically two things
you have to do in Eclipse in

00:07:37.220 --> 00:07:39.810
your Android application.

00:07:39.810 --> 00:07:43.630
The first thing here, sorry,
this font might be a bit

00:07:43.630 --> 00:07:47.670
small, the code is going
to be bigger.

00:07:47.670 --> 00:07:52.280
So the first thing you have to
do is say, in the manifest, in

00:07:52.280 --> 00:07:56.910
your app manifest, that
your application

00:07:56.910 --> 00:07:58.930
can handle an intent.

00:07:58.930 --> 00:08:00.300
An intent called Drive Open.

00:08:00.300 --> 00:08:04.860
So whenever you click on a file
in the Drive application,

00:08:04.860 --> 00:08:07.590
what happens is that the Drive
application will fire intent,

00:08:07.590 --> 00:08:08.890
called Drive Open.

00:08:08.890 --> 00:08:12.630
Any application, any third party
application, that can

00:08:12.630 --> 00:08:18.060
handle that intent will be
listed for the user to choose.

00:08:18.060 --> 00:08:22.680
So my application, I added
this intent filter here.

00:08:22.680 --> 00:08:27.390
And when you define an intent
filter, which is basically how

00:08:27.390 --> 00:08:31.430
you say, I can handle this
intent, you say what is the

00:08:31.430 --> 00:08:35.120
name of the intent and enable
the intend is Drive Open.

00:08:35.120 --> 00:08:39.289
And then, well, this is a
default intent, and then, you

00:08:39.289 --> 00:08:41.679
have to specify for this intent,
you have to specify

00:08:41.679 --> 00:08:45.130
which MIME types your
application can open.

00:08:45.130 --> 00:08:49.720
My application can open plain
text files, can open HTML

00:08:49.720 --> 00:08:55.110
files, and can also open this
kind of weird MIME type.

00:08:55.110 --> 00:09:02.430
This MIME type is the MIME type
that is used to say, any

00:09:02.430 --> 00:09:04.520
file that this application
has created.

00:09:04.520 --> 00:09:06.730
This application will not create
any files, so this is

00:09:06.730 --> 00:09:09.270
probably useless in this
case, but you might

00:09:09.270 --> 00:09:10.460
want to have this.

00:09:10.460 --> 00:09:13.900
And the way you generate, the
way you construct, this MIME

00:09:13.900 --> 00:09:15.805
type, you always have
applications/vnd

00:09:15.805 --> 00:09:17.055
.googleapps.drive.sdk.

00:09:20.020 --> 00:09:24.540
And this number here
is your client ID.

00:09:24.540 --> 00:09:26.450
Where do you get the
app client ID from?

00:09:26.450 --> 00:09:28.930
It's in the API's console.

00:09:28.930 --> 00:09:32.810
So if I go back to the API's
console, and I go back to my

00:09:32.810 --> 00:09:35.830
API access page, where I see
my credentials, where I

00:09:35.830 --> 00:09:39.790
generated my credentials, I see
that my client ID is that

00:09:39.790 --> 00:09:40.640
very number.

00:09:40.640 --> 00:09:47.120
So this uniquely identifies my
application, and this way I

00:09:47.120 --> 00:09:50.560
can say all files created but
this app will have this

00:09:50.560 --> 00:09:53.030
specific MIME type.

00:09:53.030 --> 00:09:59.710
If I go back to the Android
manifest, there is another

00:09:59.710 --> 00:10:02.470
thing to add here, which
is that you have to

00:10:02.470 --> 00:10:05.710
add your app ID here.

00:10:05.710 --> 00:10:09.170
Same thing, this is used to
uniquely identify your app, so

00:10:09.170 --> 00:10:16.400
I have app ID metadata with the
same value, which says ID

00:10:16.400 --> 00:10:18.580
equal to same thing.

00:10:18.580 --> 00:10:21.920
And then, I have to make sure
that my activity is supported.

00:10:24.480 --> 00:10:25.360
That's it.

00:10:25.360 --> 00:10:28.510
That's all you have to do to
configure your app and to

00:10:28.510 --> 00:10:30.520
support the intent.

00:10:30.520 --> 00:10:33.250
Now, of course, you have to
write the code that handles

00:10:33.250 --> 00:10:34.130
the intent.

00:10:34.130 --> 00:10:38.730
And this is the same way you
would handle any other intent,

00:10:38.730 --> 00:10:40.340
so let's show that.

00:10:40.340 --> 00:10:43.870
And I was smart enough to make
the font bigger here.

00:10:43.870 --> 00:10:50.020
So whenever my application
starts, it starts as always,

00:10:50.020 --> 00:10:51.690
it starts on create.

00:10:51.690 --> 00:10:55.410
What I do is, I check if I have
an intent, and if I have

00:10:55.410 --> 00:10:59.390
an intent, I check what
the action is.

00:10:59.390 --> 00:11:03.420
This is how you should handle
it, because the user can go to

00:11:03.420 --> 00:11:06.020
your app directly and start it,
and you might want to do

00:11:06.020 --> 00:11:06.930
something there.

00:11:06.930 --> 00:11:10.900
In my case, this is very simple,
so I decided if the

00:11:10.900 --> 00:11:17.480
action is Drive Open, which is
defined in a string here, this

00:11:17.480 --> 00:11:19.960
constant string here, which
is the name of the

00:11:19.960 --> 00:11:22.010
intent I want to handle.

00:11:22.010 --> 00:11:24.970
So if the action is that,
I do something.

00:11:24.970 --> 00:11:27.510
Otherwise, I just kill my app.

00:11:27.510 --> 00:11:29.510
You might want to show
a landing page.

00:11:29.510 --> 00:11:31.810
You might want to show
a help page.

00:11:31.810 --> 00:11:32.930
You might want to
do something.

00:11:32.930 --> 00:11:36.550
You might want to tell the
user to go to Drive.

00:11:36.550 --> 00:11:40.080
You might do whatever it takes
in your app to help the users.

00:11:40.080 --> 00:11:42.930
But it is very simple, so I've
just killed the app.

00:11:42.930 --> 00:11:50.980
If the app is coming from the
intent, I take the file ID,

00:11:50.980 --> 00:11:54.270
the file ID, is what the Drive
app sends with the intent.

00:11:54.270 --> 00:11:59.350
So when you click on a file, the
file is not automatically

00:11:59.350 --> 00:12:00.490
send to the app.

00:12:00.490 --> 00:12:03.500
All that's being sent is the
file ID, which is the unique

00:12:03.500 --> 00:12:04.930
ID for the file.

00:12:04.930 --> 00:12:08.340
Then, it is up to the
application to download the

00:12:08.340 --> 00:12:12.390
file content, get its metadata
and do anything else you want

00:12:12.390 --> 00:12:13.540
to do with the file.

00:12:13.540 --> 00:12:16.230
This makes sense, because,
remember, files in Drive can

00:12:16.230 --> 00:12:20.850
be very big, up to 5 gigabytes,
so we don't want to

00:12:20.850 --> 00:12:23.190
transfer the file if
it's not necessary.

00:12:23.190 --> 00:12:27.000
And that's even more important
to mobile, so remember, you

00:12:27.000 --> 00:12:30.200
get the file ID, and if you
don't need the content, just

00:12:30.200 --> 00:12:31.170
don't download it.

00:12:31.170 --> 00:12:34.830
You might only want to change
the sharing permission, rename

00:12:34.830 --> 00:12:37.970
it, and all of these tasks do
not require you to download

00:12:37.970 --> 00:12:40.070
the file content, and
you will save 10

00:12:40.070 --> 00:12:42.570
gigabytes of mobile data.

00:12:42.570 --> 00:12:46.490
So I take the file ID, I store
it in a variable called N file

00:12:46.490 --> 00:12:50.780
ID, and then, I start the
authorization part.

00:12:50.780 --> 00:12:54.500
So I have this other method
called Get User Account and

00:12:54.500 --> 00:12:56.000
Process File.

00:12:56.000 --> 00:12:58.790
What this does is--

00:12:58.790 --> 00:12:59.870
just here--

00:12:59.870 --> 00:13:03.610
is just starting
the auth flow.

00:13:03.610 --> 00:13:06.620
I won't go into details
for this.

00:13:06.620 --> 00:13:13.260
We explained this, I hope, very
clearly, in the previous

00:13:13.260 --> 00:13:15.170
Google Developers
Live session.

00:13:15.170 --> 00:13:19.310
So what happens here, just
quickly, is that we use the

00:13:19.310 --> 00:13:23.380
Google Play services to
start the auth flow.

00:13:23.380 --> 00:13:27.840
Then, if you remember from the
demo we just did, the user

00:13:27.840 --> 00:13:30.590
will be prompted to choose an
account, and then grant access

00:13:30.590 --> 00:13:31.590
to the app.

00:13:31.590 --> 00:13:35.560
If the user has already granted
access to the app, you

00:13:35.560 --> 00:13:37.500
will only have to choose
an account.

00:13:37.500 --> 00:13:40.130
So all of this is done by
using the Google Play

00:13:40.130 --> 00:13:43.700
Services, which guarantees all
the security here and does all

00:13:43.700 --> 00:13:45.570
the things for you.

00:13:45.570 --> 00:13:48.620
So if you want to know more
about this, check the docs or

00:13:48.620 --> 00:13:49.750
check our video.

00:13:49.750 --> 00:13:53.370
So what I'm saying here is that
I want the user to have

00:13:53.370 --> 00:13:57.990
access to the Drive scope, which
is the full scope that

00:13:57.990 --> 00:14:04.170
is required to open all files,
and this case we could have

00:14:04.170 --> 00:14:06.970
asked for the Drive file
scope, which is a more

00:14:06.970 --> 00:14:12.090
restrictive scope, but I'm not
going into details here.

00:14:12.090 --> 00:14:13.330
And then we start an intent.

00:14:13.330 --> 00:14:16.140
This is how Google Play Services
works, so don't worry

00:14:16.140 --> 00:14:16.600
about this.

00:14:16.600 --> 00:14:17.345
This is pretty standard.

00:14:17.345 --> 00:14:20.200
You started intent, which is
the choose account intent.

00:14:20.200 --> 00:14:22.180
You might remember that
we had first app was

00:14:22.180 --> 00:14:23.850
to choose an account.

00:14:23.850 --> 00:14:28.050
So the file is intent, the
dialogue pops up, the user

00:14:28.050 --> 00:14:32.030
selects an account, and then,
we go to an activity result,

00:14:32.030 --> 00:14:36.350
which is the callback method
that is called when the user

00:14:36.350 --> 00:14:40.600
has selected the account or the
user has or tries the app.

00:14:40.600 --> 00:14:45.540
We have two cases
we support here.

00:14:45.540 --> 00:14:49.060
One of them is when the user has
selected an account, the

00:14:49.060 --> 00:14:53.460
other one is when authorization
is required.

00:14:53.460 --> 00:14:56.000
Still no details here, but what
happens here is that we

00:14:56.000 --> 00:15:00.160
get credentials, and once we
have credentials, we can build

00:15:00.160 --> 00:15:01.060
the drive service.

00:15:01.060 --> 00:15:04.330
This is exactly the same code we
have in the Quickstart, so

00:15:04.330 --> 00:15:05.980
if you go to the Quickstart
page, you will see

00:15:05.980 --> 00:15:07.390
the exact same code.

00:15:07.390 --> 00:15:09.690
We built the drive service.

00:15:09.690 --> 00:15:12.170
Once we have a drive service
which is authorized by the

00:15:12.170 --> 00:15:15.910
user to read files, we call read
file from drive, and this

00:15:15.910 --> 00:15:17.040
is the new part.

00:15:17.040 --> 00:15:20.110
Read file for drive is here.

00:15:20.110 --> 00:15:22.820
I will share this code later.

00:15:22.820 --> 00:15:26.010
Read file from drive is here.

00:15:26.010 --> 00:15:27.220
I start a new thread.

00:15:27.220 --> 00:15:32.780
Remember, you cannot perform
any network requests on the

00:15:32.780 --> 00:15:36.060
main thread on Android, because
otherwise, the UI will

00:15:36.060 --> 00:15:39.590
freeze and the application
will die, and this will

00:15:39.590 --> 00:15:40.770
actually throw an exception.

00:15:40.770 --> 00:15:45.750
So you will have to spun new
thread or your async tasks to

00:15:45.750 --> 00:15:49.120
perform long running operations
somewhere else.

00:15:49.120 --> 00:15:52.550
And so what we're doing here is
that we want to fetch the

00:15:52.550 --> 00:15:55.550
content of the file, and this
is done in two steps

00:15:55.550 --> 00:15:56.440
in the Drive API.

00:15:56.440 --> 00:16:01.550
First, you perform a get
using the file ID.

00:16:01.550 --> 00:16:04.800
The get will give you the file
metadata, which includes the

00:16:04.800 --> 00:16:08.500
title, which includes the
description, which includes

00:16:08.500 --> 00:16:11.900
the sharing permission,
and includes

00:16:11.900 --> 00:16:14.040
a link to the content.

00:16:14.040 --> 00:16:16.380
It's called download URL.

00:16:16.380 --> 00:16:19.840
Once we have the metadata, then
we have a download URL,

00:16:19.840 --> 00:16:22.570
it will check if the download
URL is there, and if the

00:16:22.570 --> 00:16:27.100
download URL is actually valid,
if it is, we just send

00:16:27.100 --> 00:16:32.370
an HTTP authorize request to
it by building it here.

00:16:32.370 --> 00:16:35.950
And what we get back
is an input string.

00:16:35.950 --> 00:16:40.440
With an input string, there is
nothing that is Drive API

00:16:40.440 --> 00:16:41.210
specific here.

00:16:41.210 --> 00:16:44.430
These are just standard Java
Android programming.

00:16:44.430 --> 00:16:45.910
I get an input string.

00:16:45.910 --> 00:16:49.320
I can use it to build a string,
or in my case, I'm

00:16:49.320 --> 00:16:53.860
going to use a string builder,
so I have this helper method

00:16:53.860 --> 00:16:56.170
input string to string builder,
that I just wrote,

00:16:56.170 --> 00:17:01.290
which basically just reads
line-by-line the whole content

00:17:01.290 --> 00:17:03.920
of the file I passed,
so this string.

00:17:03.920 --> 00:17:09.569
So what I get here is just a
string builder, which contains

00:17:09.569 --> 00:17:13.390
all the lines from the
file I'm opening.

00:17:13.390 --> 00:17:18.109
And once I have the string
builder, I use it to show the

00:17:18.109 --> 00:17:22.740
text, which is just dump the
whole content of the file into

00:17:22.740 --> 00:17:23.800
the screen.

00:17:23.800 --> 00:17:24.670
Show [? the apps, ?]

00:17:24.670 --> 00:17:29.180
you might have better, fancier
solutions here.

00:17:29.180 --> 00:17:33.890
All I have in my app is
single text view.

00:17:33.890 --> 00:17:37.690
So I'm just taking the text
view, finding it by ID.

00:17:37.690 --> 00:17:38.540
I know the ID.

00:17:38.540 --> 00:17:42.090
This is hard coded,
just do what I do.

00:17:42.090 --> 00:17:45.030
And then, I set to text,
and that's it.

00:17:45.030 --> 00:17:46.800
And the text will show up.

00:17:46.800 --> 00:17:50.760
Of course, you might want to
have the text be editable and

00:17:50.760 --> 00:17:52.380
maybe save it back to Drive.

00:17:52.380 --> 00:17:55.880
And you might want to build
something that is actually

00:17:55.880 --> 00:18:00.760
useful like this, but this is
how you take a file from Drive

00:18:00.760 --> 00:18:04.920
and land it into your app, open
it and get authorized,

00:18:04.920 --> 00:18:09.300
and do whatever you want
with the content.

00:18:09.300 --> 00:18:13.190
This is pretty easy and this
sample shows everything.

00:18:13.190 --> 00:18:18.270
Half of it is the same as the
previous example, so you will

00:18:18.270 --> 00:18:20.540
only have to check
the other half.

00:18:20.540 --> 00:18:26.180
And before I leave, I'll
just go back to the

00:18:26.180 --> 00:18:27.580
documentation page.

00:18:27.580 --> 00:18:30.490
Remember, we have this Integrate
With the Android

00:18:30.490 --> 00:18:33.390
Drive App, which explains
basically the same thing.

00:18:33.390 --> 00:18:36.160
I'm going to add this
feed to this page.

00:18:36.160 --> 00:18:39.120
It explains the same thing, so
setting the MIME types in the

00:18:39.120 --> 00:18:43.380
app manifest, exporting the
manifest, handle the intent,

00:18:43.380 --> 00:18:47.030
what the intent name is, what
data you get from the intent,

00:18:47.030 --> 00:18:48.940
so everything else is here.

00:18:48.940 --> 00:18:50.520
And that's basically it.

00:18:50.520 --> 00:18:55.470
So the code I used is--

00:18:55.470 --> 00:18:58.140
well, most of it comes from
this page so it should be

00:18:58.140 --> 00:19:00.010
pretty easy for you
to do the same.

00:19:02.990 --> 00:19:06.410
And with that, I think,
that's it.

00:19:06.410 --> 00:19:09.100
Pretty sure this will be very
easy for you to follow.

00:19:09.100 --> 00:19:11.820
And if you have questions,
remember, you can always reach

00:19:11.820 --> 00:19:14.940
out to us for technical
questions on StackOverFlow or

00:19:14.940 --> 00:19:16.490
on Google+.

00:19:16.490 --> 00:19:19.070
It's usually pretty easy to get
in touch with us, and we

00:19:19.070 --> 00:19:21.830
try to be as responsive
as possible.

00:19:21.830 --> 00:19:25.250
With that, thank you very much,
and I'll see you next on

00:19:25.250 --> 00:19:27.715
Google Developers Live
on next Tuesday.

00:19:27.715 --> 00:19:28.965
Bye bye.

