WEBVTT
Kind: captions
Language: en

00:00:00.429 --> 00:00:02.330
&gt;&gt; Ankur: Alright.

00:00:02.330 --> 00:00:03.330
Welcome everyone.

00:00:03.330 --> 00:00:10.230
Thank you for joining us for another Android
Developer Lab Plus. [clears throat] We didn't

00:00:10.230 --> 00:00:13.340
run the episode last week.

00:00:13.340 --> 00:00:15.760
But we are here today.

00:00:15.760 --> 00:00:18.420
And today's topic is actually in app billing.

00:00:18.420 --> 00:00:27.020
But before I go ahead with introducing the
topic, let's see who else has joined us live.

00:00:27.020 --> 00:00:28.020
So firstly, Anirudh.

00:00:28.020 --> 00:00:29.020
&gt;&gt;Anirudh: Hi guys.

00:00:29.020 --> 00:00:30.020
I'm Anirudh Dewani.

00:00:30.020 --> 00:00:32.050
Based out of Hyderabad.

00:00:32.050 --> 00:00:35.329
&gt;&gt;Tony: Hi.

00:00:35.329 --> 00:00:39.010
I'm Tony Chan.

00:00:39.010 --> 00:00:41.320
I'm based out of Hong Kong.

00:00:41.320 --> 00:00:46.420
&gt;&gt;Ankur: And I'm Ankur Kotwal and I'm coming
to you live from Sydney.

00:00:46.420 --> 00:00:50.280
So, let's get started with this.

00:00:50.280 --> 00:00:52.580
The first section we have is news.

00:00:52.580 --> 00:00:54.750
And Tony's going to introduce it.

00:00:54.750 --> 00:00:56.070
&gt;&gt;Tony: Sure.

00:00:56.070 --> 00:01:02.809
So the first news we have this week is, can
we jump to the next line please?

00:01:02.809 --> 00:01:05.150
&gt;&gt;Ankur: Sure.

00:01:05.150 --> 00:01:12.850
&gt;&gt;Tony: So we have a new BTU number four for
our Android developer tools.

00:01:12.850 --> 00:01:13.850
There's no new feature.

00:01:13.850 --> 00:01:17.760
But there are a lot of bugs fixes in this
release.

00:01:17.760 --> 00:01:29.270
The second news I want to talk about is, we
now published the app template documentations.

00:01:29.270 --> 00:01:36.580
So I think we need to jump the next bullet.

00:01:36.580 --> 00:01:41.200
To show the short length.

00:01:41.200 --> 00:01:47.759
So basically, we introduce earlier something
called application templates.

00:01:47.759 --> 00:01:56.990
So it's a tool for developer to easily get
started by building Android applications.

00:01:56.990 --> 00:02:01.010
And we want to share this actually with developers.

00:02:01.010 --> 00:02:04.229
So that you can build your own templates.

00:02:04.229 --> 00:02:09.700
And so we have some template guidelines to
format.

00:02:09.700 --> 00:02:14.909
I mean in order to build your own.

00:02:14.909 --> 00:02:22.400
And it's covered in one of a Google+ post
by our colleague Roman Nurik.

00:02:22.400 --> 00:02:25.639
And the [unintelligible] is here.

00:02:25.639 --> 00:02:36.319
So, the third news I want to mention is, we're
going to have an event in Hong Kong.

00:02:36.319 --> 00:02:44.290
It's a GD, Google Developer Group event in
Hong Kong coming up on the 24th.

00:02:44.290 --> 00:02:50.090
It's in the evening, in the [Kowloon Si] of
Hong Kong in the InnoCentre.

00:02:50.090 --> 00:02:54.219
So the details you can find in this short
link.

00:02:54.219 --> 00:02:58.680
And we have and that night I will be there.

00:02:58.680 --> 00:03:08.590
And also Ankur and [ unintelligible] Felix
Three of us will be speaking on Android in

00:03:08.590 --> 00:03:10.370
different topics.

00:03:10.370 --> 00:03:16.180
So hopefully if you are in Hong Kong or you're
based in Hong Kong we look forward to seeing

00:03:16.180 --> 00:03:21.260
you on 24th.

00:03:21.260 --> 00:03:30.329
&gt;&gt;Ankur: We're looking forward to meeting
those developers in Hong Kong.

00:03:30.329 --> 00:03:35.309
Last week, or earlier this week we got to
meet some developers in Korea and that was

00:03:35.309 --> 00:03:36.719
a really great experience.

00:03:36.719 --> 00:03:40.699
So we're looking forward to seeing more in
more developer's event in Hong Kong.

00:03:40.699 --> 00:03:41.699
[inaudible]

00:03:41.699 --> 00:03:45.349
So today's topic, as I mentioned, is in-app
billing.

00:03:45.349 --> 00:03:49.900
So in-app billing is something we introduced
last year.

00:03:49.900 --> 00:03:54.269
And it's really taken the market by storm.

00:03:54.269 --> 00:03:56.199
Back then it was called Android Market.

00:03:56.199 --> 00:04:02.510
But it's, it's proven to be a very successful
business model for a lot of apps.

00:04:02.510 --> 00:04:10.311
So, it's really enabled the freemium model,
where the app itself is free and your users

00:04:10.311 --> 00:04:16.070
can get a taste for the type of experience
or utility that your app provides.

00:04:16.070 --> 00:04:21.220
And then they can choose to pay for more of
whatever it is that you're selling in your

00:04:21.220 --> 00:04:22.220
app.

00:04:22.220 --> 00:04:24.180
So don't just think about it from a games
point of view.

00:04:24.180 --> 00:04:29.379
It's also a great migration path to convert
free users to paid users.

00:04:29.379 --> 00:04:33.620
So the old model of offering a light version
and a pro version.

00:04:33.620 --> 00:04:38.600
It's still valid but really in-app billing
makes it even, even better.

00:04:38.600 --> 00:04:41.650
Because you don't need to have two different
app listings.

00:04:41.650 --> 00:04:43.259
You can have a single one.

00:04:43.259 --> 00:04:50.090
Users can pay from the one upgrade and continue
their experience from within your app itself.

00:04:50.090 --> 00:04:54.080
Often when you upgrade from the light to pro,
the user has to go and download the pro version.

00:04:54.080 --> 00:04:57.439
They end up with two different versions of
your app on their device.

00:04:57.439 --> 00:05:02.780
And you have to do some extra work to convert
whatever data you had from the free version

00:05:02.780 --> 00:05:04.449
into the paid version.

00:05:04.449 --> 00:05:09.639
So in-app billing really enables that pay
model very well.

00:05:09.639 --> 00:05:14.750
So today we wanted to talk about well, how
do you go about implementing in-app billing.

00:05:14.750 --> 00:05:18.039
And then we'd love to hear some questions.

00:05:18.039 --> 00:05:19.139
So just an overview.

00:05:19.139 --> 00:05:25.210
With in-app billing there's really two types
of items that you can have.

00:05:25.210 --> 00:05:26.850
One are managed items.

00:05:26.850 --> 00:05:29.539
And these are typically things that you only
buy once.

00:05:29.539 --> 00:05:31.190
And we'll talk about the details of these.

00:05:31.190 --> 00:05:34.180
Then we have unmanaged items as well.

00:05:34.180 --> 00:05:39.250
Now, when it comes to the implementation side
of it t, here's actually, you can do an in-app

00:05:39.250 --> 00:05:42.219
billing implementation that's entirely client-side.

00:05:42.219 --> 00:05:47.210
Or you can have a version of it where you've
got some of that data stored on your server.

00:05:47.210 --> 00:05:52.069
And we're going to look at how that process
varies between the two and what advantages

00:05:52.069 --> 00:05:54.800
and disadvantages you can have.

00:05:54.800 --> 00:05:56.990
So, managed items.

00:05:56.990 --> 00:06:00.930
These are typically, as I mentioned, items
that you only buy once.

00:06:00.930 --> 00:06:06.310
So, if you have a book or an app that's like
a book, you might have some episodic content,

00:06:06.310 --> 00:06:12.820
where you provide chapter one of that app
or that content for free.

00:06:12.820 --> 00:06:17.289
And then users can pay to unlock chapter two
and then chapter three and so on.

00:06:17.289 --> 00:06:21.490
And in the case of a game it might not be
chapters, it could be levels.

00:06:21.490 --> 00:06:23.539
It could be characters.

00:06:23.539 --> 00:06:24.539
And so on and so forth.

00:06:24.539 --> 00:06:30.110
Now, one of the features that we have in in-app
billing is that your client, your app, can

00:06:30.110 --> 00:06:32.169
actually ask to replay transactions.

00:06:32.169 --> 00:06:39.860
Now this sort of thing is useful for users
that kind of install the app on multiple devices

00:06:39.860 --> 00:06:42.310
and you wanna make sure those purchases transfer
across.

00:06:42.310 --> 00:06:50.039
But you know there can be times where if you
found some gray areas in your logic where

00:06:50.039 --> 00:06:54.470
for some reason that transaction even though
it was successful, your app hasn't picked

00:06:54.470 --> 00:06:55.470
it up.

00:06:55.470 --> 00:07:00.289
You've got this option to replay transactions
and restore the users [unintelligible].

00:07:00.289 --> 00:07:02.210
So managed items are really great.

00:07:02.210 --> 00:07:06.370
They're called managed items because we allow
you to be able to replay them and we track

00:07:06.370 --> 00:07:08.499
them for you so and so.

00:07:08.499 --> 00:07:12.740
The next type of items are unmanaged items.

00:07:12.740 --> 00:07:17.319
And these are not typically the type of items
that you only consume or purchase once.

00:07:17.319 --> 00:07:21.340
So in the case of a game, it might be some
in-game coins.

00:07:21.340 --> 00:07:25.469
So you wanna allow the user to purchase these
coin packs more than once.

00:07:25.469 --> 00:07:29.690
Or it could be potions, whatever.

00:07:29.690 --> 00:07:37.629
In the case of an app or a service that you're
providing, you could also do something like

00:07:37.629 --> 00:07:43.479
ask the user to pay X amount of money every
month or every year.

00:07:43.479 --> 00:07:47.029
Today I wouldn't actually use in-app billing
for that recurring payment because we actually

00:07:47.029 --> 00:07:48.620
have subscription billing.

00:07:48.620 --> 00:07:50.879
Which is very similar to in-app billing.

00:07:50.879 --> 00:07:55.479
But it automatically sort of recurs for your
refreshes.

00:07:55.479 --> 00:07:57.690
So subscription billing is a separate topic.

00:07:57.690 --> 00:08:02.259
But I guess the end of this slide is talking
about unmanaged items.

00:08:02.259 --> 00:08:06.749
Now because they're unmanaged items, it means
that we as in Google Play don't manage them

00:08:06.749 --> 00:08:07.749
for you.

00:08:07.749 --> 00:08:10.270
You can't ask to have them replayed.

00:08:10.270 --> 00:08:13.759
So you need to keep track of that state information
yourself.

00:08:13.759 --> 00:08:19.080
And this is where some of that service side
implementation may actually help you.

00:08:19.080 --> 00:08:20.080
Alright.

00:08:20.080 --> 00:08:22.330
So let's go to the next slide.

00:08:22.330 --> 00:08:24.099
This here is a flow chart.

00:08:24.099 --> 00:08:29.470
And what we wanna show you is this kinda flow
that you get from your application.

00:08:29.470 --> 00:08:31.819
And how those requests and responses work.

00:08:31.819 --> 00:08:35.510
So the top half of the screen is the Google
Play server.

00:08:35.510 --> 00:08:39.260
And then everything below that dotted line
is really the device itself.

00:08:39.260 --> 00:08:42.440
Now for in-app billing, there's two critical
components.

00:08:42.440 --> 00:08:44.039
One is your app.

00:08:44.039 --> 00:08:46.900
The other part is the Google Play client.

00:08:46.900 --> 00:08:50.220
And we're gonna see how the Google Play client
is really involved here.

00:08:50.220 --> 00:08:54.430
So what happens in terms of how we secure
this data.

00:08:54.430 --> 00:08:59.070
We actually have, your app will have a public
key that you generate.

00:08:59.070 --> 00:09:02.029
The play server has a private key.

00:09:02.029 --> 00:09:06.450
Now from your app what you do is you use your
billing service to make a billing request.

00:09:06.450 --> 00:09:11.220
And your app is actually, when you make that
billing request, it's making it locally on

00:09:11.220 --> 00:09:12.490
the device to start with.

00:09:12.490 --> 00:09:14.790
It goes to the Google Play client.

00:09:14.790 --> 00:09:19.490
The Google Play client then, actually forwards
on that billing request to the Google Play

00:09:19.490 --> 00:09:20.660
server.

00:09:20.660 --> 00:09:24.790
Where it's processed and the users have an
opportunity to you know, say "Hey, I wanna

00:09:24.790 --> 00:09:27.120
pay for it using this credit card."

00:09:27.120 --> 00:09:34.120
Or if they've bought a Nexus7 they might have
some credit left over so they might choose

00:09:34.120 --> 00:09:35.120
that purchasing option.

00:09:35.120 --> 00:09:40.110
But anyway, so it's purchased at the Google
Play server side.

00:09:40.110 --> 00:09:43.839
And then we get a response that's signed by
the Google Play server with that private key

00:09:43.839 --> 00:09:44.839
we talked about.

00:09:44.839 --> 00:09:49.110
That response is passed back to the Google
Play client which in turn passes the response

00:09:49.110 --> 00:09:50.110
back to your app.

00:09:50.110 --> 00:09:52.850
To your billing receiver component.

00:09:52.850 --> 00:09:58.839
You then use that public key to decrypt that
message and process it how you want.

00:09:58.839 --> 00:10:02.070
So that's basically telling you "Hey, the
purchase succeeded."

00:10:02.070 --> 00:10:05.170
Or occasionally maybe tell you things like
"The purchase failed."

00:10:05.170 --> 00:10:09.670
And there are a number of failure states that
you do need to take care of.

00:10:09.670 --> 00:10:12.620
For example the user's credit card may not
have had the funds.

00:10:12.620 --> 00:10:15.740
Or the purchase may have been declined for
whatever reason.

00:10:15.740 --> 00:10:21.630
And you have extensive documentation on these
scenarios that you need to support on developer.Android.com.

00:10:21.630 --> 00:10:24.399
Well this is the client version.

00:10:24.399 --> 00:10:29.000
And you can see it's fairly straight forward
when you look at it step by step.

00:10:29.000 --> 00:10:32.821
Let's now talk about a version of this where
we introduce your own server.

00:10:32.821 --> 00:10:36.600
So you see now we have two dotted lines.

00:10:36.600 --> 00:10:39.790
So above the topmost dotted line we have the
Google Play server.

00:10:39.790 --> 00:10:43.690
And in the middle there, in between the two
dotted lines is the device.

00:10:43.690 --> 00:10:47.199
And we have the Google Play client in your
app.

00:10:47.199 --> 00:10:52.200
And then below the dotted line we have your
server.

00:10:52.200 --> 00:10:57.070
Now you'll notice that the public key is no
longer sitting in your app itself.

00:10:57.070 --> 00:10:58.070
It's now sitting on your server.

00:10:58.070 --> 00:11:02.070
That's how, where we're going to use it.

00:11:02.070 --> 00:11:06.079
But let's now look at the flow of how this
part of it works.

00:11:06.079 --> 00:11:10.940
The app will make the billing request which
gets forwarded onto the Google Play server.

00:11:10.940 --> 00:11:16.190
The Google Play server will respond and sign
it with the private key.

00:11:16.190 --> 00:11:21.899
And then that signed response will actually
be passed back to your app to its billing

00:11:21.899 --> 00:11:22.899
receiver.

00:11:22.899 --> 00:11:25.639
So so far it is actually the same at that
client-side version.

00:11:25.639 --> 00:11:28.089
But this is where it differs.

00:11:28.089 --> 00:11:34.520
Your app will then take that, whatever credentials
it has, and pass it through your sever.

00:11:34.520 --> 00:11:38.019
Including that sort of signed response.

00:11:38.019 --> 00:11:41.110
So let's do a deep dive into what that part
of it is.

00:11:41.110 --> 00:11:44.959
The, your app, your server side.

00:11:44.959 --> 00:11:46.980
[clears throat]

00:11:46.980 --> 00:11:51.769
So what happens is, your server takes those
credentials and returns back a session token

00:11:51.769 --> 00:11:53.890
to your client.

00:11:53.890 --> 00:11:55.580
It's obviously utilized that public key.

00:11:55.580 --> 00:11:57.070
Or it will do so.

00:11:57.070 --> 00:11:59.600
Then we take that session token into your
app.

00:11:59.600 --> 00:12:03.470
Your app then requests content with that session
token.

00:12:03.470 --> 00:12:06.880
Now, you should follow the best practices
around the session token.

00:12:06.880 --> 00:12:08.680
Make sure they expire after so long.

00:12:08.680 --> 00:12:16.490
And you know, the point of this token is,
it's really the [unintelligible] between your

00:12:16.490 --> 00:12:17.940
app and your server.

00:12:17.940 --> 00:12:20.890
It should really be used to set up a session.

00:12:20.890 --> 00:12:24.360
Every time the client contacts the server.

00:12:24.360 --> 00:12:29.520
So, once you pass that content with that session
token, you can then, your server can then

00:12:29.520 --> 00:12:32.130
return the content.

00:12:32.130 --> 00:12:35.750
Now this is that scenario with the unmanaged
items.

00:12:35.750 --> 00:12:42.970
You can do it this way if you wanna track
information server-side.

00:12:42.970 --> 00:12:45.019
Now of course, this is going to work for a
device.

00:12:45.019 --> 00:12:49.430
Because presumably when you add those credentials
you're gaining some information from your

00:12:49.430 --> 00:12:50.430
app.

00:12:50.430 --> 00:12:55.560
Now, on the server you may choose to have
your own user accounts on, where you're tracking

00:12:55.560 --> 00:12:56.560
them.

00:12:56.560 --> 00:13:02.490
So that when the users fire up your app they're
basically saying "Hey, I'm signing in as Bob

00:13:02.490 --> 00:13:06.089
and my password is, password123."

00:13:06.089 --> 00:13:11.620
And then your server's able to track which
for that particular identity, what items,

00:13:11.620 --> 00:13:13.519
unmanaged items have been purchased.

00:13:13.519 --> 00:13:17.889
And then that way you can restore [unintelligible].

00:13:17.889 --> 00:13:24.089
So that's the, that's the server version of
in-app billing.

00:13:24.089 --> 00:13:30.490
So when you're developing this, you probably
wanna do a lot of sample testing or prototyping.

00:13:30.490 --> 00:13:32.120
So what we've implemented are some test-IDs.

00:13:32.120 --> 00:13:34.750
That are reserved.

00:13:34.750 --> 00:13:37.930
That you can use to simulate different scenarios.

00:13:37.930 --> 00:13:44.110
So, this is a good way to actually verify
the code if you're using automatic unit test.

00:13:44.110 --> 00:13:49.810
You can use these prompt IDs when you make
the requests so that you get the responses

00:13:49.810 --> 00:13:50.960
back straight away.

00:13:50.960 --> 00:13:55.250
And you know, we're simulating the response
request response here.

00:13:55.250 --> 00:14:00.940
It's not actually going to go through all
of those steps that we talked about.

00:14:00.940 --> 00:14:02.540
But during development we'd use this.

00:14:02.540 --> 00:14:06.970
But there comes a time when you wanna actually
test with real purchases.

00:14:06.970 --> 00:14:10.820
So, there are a few more steps that you need
to do when you're testing real purchases.

00:14:10.820 --> 00:14:17.519
First you need to go into your publisher site
and register some test accounts.

00:14:17.519 --> 00:14:20.940
Now these test accounts are typically any
other Google account.

00:14:20.940 --> 00:14:23.140
So let's say I'm the developer.

00:14:23.140 --> 00:14:26.360
And I'm sitting here and I'm saying "Hey,
look we need to add our testers."

00:14:26.360 --> 00:14:31.449
And Tony and Anirudh are my testers, I would
go and grab their email address, register

00:14:31.449 --> 00:14:33.149
it on the publisher's site.

00:14:33.149 --> 00:14:39.069
So that when users, when Anirudh and Tony
make these requests, it knows that these are

00:14:39.069 --> 00:14:40.069
test accounts.

00:14:40.069 --> 00:14:43.100
Now I'll tell you why it becomes important.

00:14:43.100 --> 00:14:48.089
What we then need to do is that go and upload
our APK to the Play Store.

00:14:48.089 --> 00:14:50.829
But leave it in an unpublished state.

00:14:50.829 --> 00:14:52.500
Because right now we're testing it, right?

00:14:52.500 --> 00:14:56.750
We don't wanna publish it and make it available
to the world.

00:14:56.750 --> 00:14:59.420
Then what we do is go and add our products.

00:14:59.420 --> 00:15:02.000
The in-app purchases that we have.

00:15:02.000 --> 00:15:05.150
We're gonna go and add those to the publisher
site.

00:15:05.150 --> 00:15:08.029
And here's a very important part.

00:15:08.029 --> 00:15:11.760
You need to go and publish those items there
and then.

00:15:11.760 --> 00:15:15.759
Don't leave those items in an unpublished
or draft state.

00:15:15.759 --> 00:15:19.100
Because otherwise your app won't be able to
find it.

00:15:19.100 --> 00:15:23.139
It'll say "Hey, I didn't recognize this particular
item ID."

00:15:23.139 --> 00:15:25.699
And it's perfectly safe to publish these items.

00:15:25.699 --> 00:15:27.430
Because your app has still not been published.

00:15:27.430 --> 00:15:30.790
So nobody else will be able to make those
purchases.

00:15:30.790 --> 00:15:37.000
In fact, and this is where those test accounts
are important, only those test accounts and

00:15:37.000 --> 00:15:39.670
the publisher account will be able to make
those purchases.

00:15:39.670 --> 00:15:42.020
Because the app is still unpublished.

00:15:42.020 --> 00:15:47.330
So, publish your items, but leave your app
unpublished.

00:15:47.330 --> 00:15:54.480
So once we've added our SKUs or our app product
list what we would do is install our app on

00:15:54.480 --> 00:15:55.970
a real device.

00:15:55.970 --> 00:16:00.689
You can't use the emulator because the emulator
doesn't have the Google Play store on it.

00:16:00.689 --> 00:16:06.350
And remember as we said earlier you need the
Google Play client to actually go and make

00:16:06.350 --> 00:16:07.350
these purchases.

00:16:07.350 --> 00:16:12.129
Now for those test accounts that we talked
about, they have to be the primary account

00:16:12.129 --> 00:16:15.050
on each of those devices that you're testing
on.

00:16:15.050 --> 00:16:19.579
So, by primary account, ideally what you want,
primary account, the notion of the primary

00:16:19.579 --> 00:16:21.649
account has become a little bit foggier.

00:16:21.649 --> 00:16:25.279
But typically it's the first account that
you added to the device.

00:16:25.279 --> 00:16:29.230
Now if you've got some testing devices that
you've added, there are some other accounts

00:16:29.230 --> 00:16:32.380
on there, what you would need to do is do
a factory reset.

00:16:32.380 --> 00:16:38.629
And then go and add those test accounts that
you registered on step one.

00:16:38.629 --> 00:16:43.709
Then, those test accounts can go and read
the APK and make purchases.

00:16:43.709 --> 00:16:46.769
Now these are going to be real purchases.

00:16:46.769 --> 00:16:47.769
Right?

00:16:47.769 --> 00:16:51.899
We're going to go through the whole process
of actually billing those credit cards when

00:16:51.899 --> 00:16:53.620
you make these purchases.

00:16:53.620 --> 00:16:59.600
So from the publisher side, you need to go
and manually refund those purchases when you're

00:16:59.600 --> 00:17:00.880
finished testing.

00:17:00.880 --> 00:17:02.079
That part is really important.

00:17:02.079 --> 00:17:06.560
If you don't go ahead and refund your test
purchases, you could rack up pretty large

00:17:06.560 --> 00:17:07.640
bills.

00:17:07.640 --> 00:17:15.810
So it is your responsibility to go and manually
refund those via the publisher side.

00:17:15.810 --> 00:17:16.810
So that's it.

00:17:16.810 --> 00:17:21.800
During the testing phase you're actually exercising
the full end to end purchase mechanism.

00:17:21.800 --> 00:17:23.870
And we're actually getting responses.

00:17:23.870 --> 00:17:28.620
And we're making requests to the Google Play
client and getting them back from the Google

00:17:28.620 --> 00:17:29.820
Play server as well.

00:17:29.820 --> 00:17:32.480
So we're really simulating real world situations
here.

00:17:32.480 --> 00:17:33.480
[unintelligible]

00:17:33.480 --> 00:17:38.340
&gt;&gt;Tony: So, I had a small thing to add on
testing.

00:17:38.340 --> 00:17:50.169
That's, so, recently we had some issue with
testing account set up for billing testing.

00:17:50.169 --> 00:17:53.670
And it was a issue on our end.

00:17:53.670 --> 00:18:00.960
And it gave some developer impressions actually
that they can not test billing with test account.

00:18:00.960 --> 00:18:05.220
So, but it's actually it was a issue earlier.

00:18:05.220 --> 00:18:07.690
And that should be fixed now.

00:18:07.690 --> 00:18:11.250
So, so testing with test accounts should be
working now.

00:18:11.250 --> 00:18:12.390
&gt;&gt;Ankur: OK.

00:18:12.390 --> 00:18:13.390
Great.

00:18:13.390 --> 00:18:15.250
That's a good point.

00:18:15.250 --> 00:18:20.420
Yeah, it's just something over the last couple
of weeks that we believe it's been resolved.

00:18:20.420 --> 00:18:24.590
But if you had some issues it should be fixed
now.

00:18:24.590 --> 00:18:28.260
If it isn't, please do let us know.

00:18:28.260 --> 00:18:30.350
&gt;&gt;Tony: Let us know.

00:18:30.350 --> 00:18:31.350
Yeah.

00:18:31.350 --> 00:18:32.350
&gt;&gt;Ankur: OK.

00:18:32.350 --> 00:18:37.140
So that's a really high level overview of
in-app billing.

00:18:37.140 --> 00:18:39.450
We today wanted to just introduce the concept.

00:18:39.450 --> 00:18:42.840
We know many developers that are using them.

00:18:42.840 --> 00:18:45.170
And in-app billing has been very successful
on Google Play.

00:18:45.170 --> 00:18:52.100
We think that more developers should adopt
the user in-app purchases or in-app billing.

00:18:52.100 --> 00:18:58.670
Because it does at the end of the day provide
a really nice user experience.

00:18:58.670 --> 00:19:01.800
So with that, let's take some questions.

00:19:01.800 --> 00:19:06.090
We don't actually have anyone live on the
Hangout today.

00:19:06.090 --> 00:19:12.830
So if there's people that can post on the
thread, in the Hangout on the thread that's

00:19:12.830 --> 00:19:16.440
on the Google+ stream, that would be great.

00:19:16.440 --> 00:19:21.290
If not, let's move to Google Moderator and
I'll hand it over to Anirudh.

00:19:21.290 --> 00:19:25.450
&gt;&gt;Anirudh: I would just like to add something
to the presentation.

00:19:25.450 --> 00:19:31.080
Some developers have asked me about support
in different countries for in-app billing.

00:19:31.080 --> 00:19:36.060
And because we use the same [wire] infrastructure
behind scenes, it's pretty much the same support

00:19:36.060 --> 00:19:38.030
as the status support for paid apps.

00:19:38.030 --> 00:19:41.850
So that's one of the considerations for in-app
billing.

00:19:41.850 --> 00:19:42.890
[pause]

00:19:42.890 --> 00:19:44.950
&gt;&gt;Ankur: OK.

00:19:44.950 --> 00:19:48.520
Do we wanna bring up the Moderator thread?

00:19:48.520 --> 00:19:50.390
&gt;&gt;Anirudh: Yes.

00:19:50.390 --> 00:19:56.070
So in the first question there is, and this
is from Ian, Orange, California.

00:19:56.070 --> 00:19:59.130
The first question is, "I'd like to use in-app
billing for donations.

00:19:59.130 --> 00:20:04.670
Is this an appropriate use or would you recommend
using an external system?"

00:20:04.670 --> 00:20:10.160
Tony would you like to take that?

00:20:10.160 --> 00:20:11.160
[pause]

00:20:11.160 --> 00:20:14.860
Tony we cannot hear you.

00:20:14.860 --> 00:20:15.860
[pause]

00:20:15.860 --> 00:20:17.210
&gt;&gt;Tony: Sorry.

00:20:17.210 --> 00:20:20.530
So for in-app billing for donations.

00:20:20.530 --> 00:20:27.630
So we don't have any like, special policy
to prevent developer using in-app billing

00:20:27.630 --> 00:20:28.630
for donation.

00:20:28.630 --> 00:20:36.370
But one thing you need to keep in mind is,
so for donation using Google Wallet, it just

00:20:36.370 --> 00:20:47.900
like, regular how you use Google Checkout
Wallet in the past like for doing, for donation.

00:20:47.900 --> 00:20:53.450
You have to be a verified, valid non-profit
organization.

00:20:53.450 --> 00:21:02.340
In other words, it's a 501C3 or 501C6 organization.

00:21:02.340 --> 00:21:07.520
So we have a process to verify these organization.

00:21:07.520 --> 00:21:16.350
And as long as you satisfy this criteria then
you can use in-app billing for donation.

00:21:16.350 --> 00:21:18.240
&gt;&gt;Anirudh: OK.

00:21:18.240 --> 00:21:20.130
Thanks Tony.

00:21:20.130 --> 00:21:23.810
The second question is most, is from Romania.

00:21:23.810 --> 00:21:29.100
And the questions is "Most of my clients are
requesting a calendar component into their

00:21:29.100 --> 00:21:30.320
applications.

00:21:30.320 --> 00:21:34.780
So far I was using a custom calendar component
from a GitHub user.

00:21:34.780 --> 00:21:37.280
I was wondering if you."

00:21:37.280 --> 00:21:38.350
Sorry.

00:21:38.350 --> 00:21:43.260
"I was wondering if you're thinking to release
a standard widget which would support this

00:21:43.260 --> 00:21:44.260
functionality?"

00:21:44.260 --> 00:21:49.170
We o not have a UI widget for a calendar built
in that you could embed.

00:21:49.170 --> 00:21:53.090
But starting I think, ICS, we do have a calendar
provider.

00:21:53.090 --> 00:21:55.990
Which you can query to get the calendar data.

00:21:55.990 --> 00:21:59.680
And kind of use the widget to put that on
your application.

00:21:59.680 --> 00:22:01.110
Yeah.

00:22:01.110 --> 00:22:06.940
So, anything more you guys would like to add?

00:22:06.940 --> 00:22:08.240
&gt;&gt;Ankur: No.

00:22:08.240 --> 00:22:17.820
I guess the calendar widget that we provide
for users today is part of the AOSP.

00:22:17.820 --> 00:22:20.530
So Android open source project.

00:22:20.530 --> 00:22:26.650
So you can certainly go and have them look
a the code for that widget today.

00:22:26.650 --> 00:22:29.970
And see if you wanna build something similar
to that itself.

00:22:29.970 --> 00:22:32.730
&gt;&gt;Anirudh: Thanks Ankur.

00:22:32.730 --> 00:22:40.860
Also, if you're using a pre-ICS device, or
writing for pre-ICS devices, there's a calendar

00:22:40.860 --> 00:22:45.630
API that's part of the Google API client library
and you could also get calendar, user calendar

00:22:45.630 --> 00:22:46.630
data from there.

00:22:46.630 --> 00:22:50.220
Once you authorize using OAuth.

00:22:50.220 --> 00:22:53.080
So let's move to the next question.

00:22:53.080 --> 00:22:56.710
Which is again from Romania.

00:22:56.710 --> 00:22:58.320
"Hello.

00:22:58.320 --> 00:23:02.970
Trying to remove a dialog when coming from
back task to front task gives me a illegal

00:23:02.970 --> 00:23:04.590
state exception.

00:23:04.590 --> 00:23:07.870
Cannot perform this action after on save instant
state.

00:23:07.870 --> 00:23:12.050
Can you help me on this matter?"

00:23:12.050 --> 00:23:14.330
So this seems like a life cycle issue.

00:23:14.330 --> 00:23:20.330
I do not have any specific answer but I do
not understand what you're trying to do.

00:23:20.330 --> 00:23:25.770
So maybe if you have some good-- "Trying to
remove a dialog."

00:23:25.770 --> 00:23:29.390
Is this a fragment dialog or a regular progress
dialog?

00:23:29.390 --> 00:23:30.390
Mm.

00:23:30.390 --> 00:23:34.240
Guys do you have any inputs?

00:23:34.240 --> 00:23:44.760
&gt;&gt;Ankur: From memory, this sort of issue occurs,
it is definitely a life-cycle issue.

00:23:44.760 --> 00:23:49.530
And it's because some certain code is being
invoked out of sequence basically.

00:23:49.530 --> 00:23:54.980
Or relying on, I'm trying to remember what
the details are.

00:23:54.980 --> 00:23:56.790
Because there are several ways to end up in
this.

00:23:56.790 --> 00:24:02.470
But I think you're trying to rely on this
state of certain, it could be a fragment--.

00:24:02.470 --> 00:24:11.410
&gt;&gt;Tony: So I, from what I remember, like,
this exception tends to happen in two places.

00:24:11.410 --> 00:24:23.870
One is if someone trying to do things in the
AsyncTask and, or trying to update, do a fragment

00:24:23.870 --> 00:24:33.370
transaction, , when using AsyncTask or using
loaders.

00:24:33.370 --> 00:24:42.290
Because some of this operation can be, can
still happen actually, even the activity go

00:24:42.290 --> 00:24:43.870
off the screen.

00:24:43.870 --> 00:24:48.370
So, and past the safe instant state.

00:24:48.370 --> 00:24:56.430
And the framework is very conservative trying
to prevent these kind of states happen.

00:24:56.430 --> 00:25:05.240
Even in reality in most of the time, your
activity is still in, not in that state.

00:25:05.240 --> 00:25:18.420
So, I guess the solution or, I think you really
need to look into whether it's proper to update

00:25:18.420 --> 00:25:23.470
the UI actually in those scenario.

00:25:23.470 --> 00:25:25.660
And because things could happen.

00:25:25.660 --> 00:25:36.920
Actually after the activity got recycled off
of or past the safe instance state.

00:25:36.920 --> 00:25:47.020
So you have to see whether it makes sense
actually trying to do some of these UI updates.

00:25:47.020 --> 00:25:57.710
And one way to avoid the exception but not
necessarily the best solution is to have a

00:25:57.710 --> 00:26:01.160
fragment keep track of what state you are
in.

00:26:01.160 --> 00:26:14.190
And if you're, if your state is not actually
in that state, you just, you can do the fragment

00:26:14.190 --> 00:26:18.420
transaction or things otherwise.

00:26:18.420 --> 00:26:20.360
Just skip it.

00:26:20.360 --> 00:26:25.050
Because you don't, you're not actually, your
own activity is not actually on the UI anymore.

00:26:25.050 --> 00:26:26.050
So.

00:26:26.050 --> 00:26:30.070
&gt;&gt;Anirudh: So thanks Tony.

00:26:30.070 --> 00:26:34.820
So yeah, just look for a life cycle method
before safe instance.

00:26:34.820 --> 00:26:36.250
Probably on plus or somewhere.

00:26:36.250 --> 00:26:39.790
And you can place your request for removing
the dialog there.

00:26:39.790 --> 00:26:43.210
Depending on whether it's a progress or a
fragment dialog you may need to do a fragment

00:26:43.210 --> 00:26:45.150
transaction.

00:26:45.150 --> 00:26:48.200
So I think that's it.

00:26:48.200 --> 00:26:52.220
That's all the questions we had in Moderator.

00:26:52.220 --> 00:26:53.220
So.

00:26:53.220 --> 00:26:55.630
Yeah that kind of brings us to the end of
this Hangout.

00:26:55.630 --> 00:26:57.960
Guys do you have anything more to add?

00:26:57.960 --> 00:26:58.960
&gt;&gt;Ankur: Yeah.

00:26:58.960 --> 00:27:00.880
Just one last thing.

00:27:00.880 --> 00:27:06.990
Next week's Hangout will, just for next week,
we're changing the day of the week that we're

00:27:06.990 --> 00:27:07.990
doing it.

00:27:07.990 --> 00:27:11.070
So only next week we're going to do it on
Tuesday.

00:27:11.070 --> 00:27:14.880
Tony and I will, as we mentioned, we're going
to be in Hong Kong on Monday.

00:27:14.880 --> 00:27:17.050
We're also going to be in Hong Kong on Tuesday.

00:27:17.050 --> 00:27:23.130
So we'll be running the Hangout together in
the same location for once.

00:27:23.130 --> 00:27:25.530
From Hong Kong on Tuesday.

00:27:25.530 --> 00:27:26.530
So stay tuned.

00:27:26.530 --> 00:27:33.780
We'll make the, post the new time and a Moderator
link for you as soon as we can.

00:27:33.780 --> 00:27:34.780
So with that--

00:27:34.780 --> 00:27:42.991
&gt;&gt;Tony: And again, if you happen to be in
Hong Kong at that, on the 24th, please join

00:27:42.991 --> 00:27:46.670
us to the GDG event at night.

00:27:46.670 --> 00:27:48.220
On the 24th.

00:27:48.220 --> 00:27:51.520
So, Ankur and I and Felix, we will be there.

00:27:51.520 --> 00:28:00.570
And we're happy to meet with you guys and
talk about Android or anything about Google.

00:28:00.570 --> 00:28:07.330
&gt;&gt;Ankur: OK, well thanks everyone for joining
and we will catch you next time.

00:28:07.330 --> 00:28:09.290
&gt;&gt;Tony: Thanks.

00:28:09.290 --> 00:28:11.250
&gt;&gt;Anirudh: Thanks.

00:28:11.250 --> 00:28:12.240
Bye-bye.

