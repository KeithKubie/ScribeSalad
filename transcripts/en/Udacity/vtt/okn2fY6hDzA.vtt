WEBVTT
Kind: captions
Language: en

00:00:00.480 --> 00:00:03.900
So, we need a directory
that will fit on chip.

00:00:03.900 --> 00:00:07.270
Otherwise, to maintain coherence
between our caches that are very,

00:00:07.270 --> 00:00:10.810
very fast, we will need to
look up a directory in very,

00:00:10.810 --> 00:00:15.460
very slow memory which kind of defeats
the purpose of having these caches.

00:00:15.460 --> 00:00:19.410
Some of the questions about this
directory are easy to answer.

00:00:19.410 --> 00:00:22.370
For example, where is the home node

00:00:22.370 --> 00:00:26.170
where we go to find the directory
information about the block?

00:00:26.170 --> 00:00:31.120
And the answer to that is the same tile
that has the last level cache slice

00:00:31.120 --> 00:00:32.619
where that block would be.

00:00:32.619 --> 00:00:38.540
Because, if the directory entry for that
block indicates that none of the private

00:00:38.540 --> 00:00:43.320
caches have it, then we want to look up
the last level cache to find that block,

00:00:43.320 --> 00:00:46.580
so we might as well do that in
the same node that has the directory,

00:00:46.580 --> 00:00:49.900
otherwise there would be a lot of
traffic between where the directory for

00:00:49.900 --> 00:00:54.270
a block is and where the last
level cache for the block is.

00:00:54.270 --> 00:00:57.340
So naturally they should
be on the same node.

00:00:57.340 --> 00:01:02.040
But that doesn't really answer the
question of having a directory entry for

00:01:02.040 --> 00:01:03.590
every memory block.

00:01:03.590 --> 00:01:07.900
We have seen that we only keep the data
in the last level cache slice for

00:01:07.900 --> 00:01:11.180
those blocks that we actually
have in our level 3 cache.

00:01:11.180 --> 00:01:15.550
But a directory without any
changes would need to be for

00:01:15.550 --> 00:01:19.350
every possible memory block that
might ever come into that slice,

00:01:19.350 --> 00:01:22.660
which is a big problem because
there are a lot of memory blocks.

00:01:22.660 --> 00:01:26.410
So instead of keeping a directory
entry for every memory block,

00:01:26.410 --> 00:01:32.000
we need to realize that the entries
that are not in our last level cache,

00:01:32.000 --> 00:01:37.490
or in any caches on chip,
really are not shared by anybody,

00:01:37.490 --> 00:01:40.400
so we don't really have to
maintain that information.

00:01:40.400 --> 00:01:43.090
So we will maintain what is
called a partial directory.

00:01:43.090 --> 00:01:47.230
We don't maintain a directory entry for
every memory block.

00:01:47.230 --> 00:01:50.910
Instead, our directory will have
a limited number of entries, and

00:01:50.910 --> 00:01:55.880
then we allocate an entry in
this limited directory only for

00:01:55.880 --> 00:02:00.370
such blocks that have at
least 1 presence bit at 1.

00:02:00.370 --> 00:02:05.740
Basically, only for blocks that might be
in at least one of the private caches.

00:02:05.740 --> 00:02:09.720
So for a block for which we know
that it is not in any L1 or

00:02:09.720 --> 00:02:14.150
L2 cache, it's present only in the LLC,
or only memory for

00:02:14.150 --> 00:02:17.590
that matter,
we don't need the directory entry.

00:02:17.590 --> 00:02:22.180
Implicitly we know that such a directory
entry would just be all zeros, but

00:02:22.180 --> 00:02:25.310
let's say that we have decided on
some limited number of entries.

00:02:25.310 --> 00:02:30.230
We start allocating those entries when
we put flaws in L1 and L2 caches, and

00:02:30.230 --> 00:02:33.460
eventually we will run
out of directory entries.

00:02:33.460 --> 00:02:34.290
What do we do now?

