WEBVTT
Kind: captions
Language: en

00:00:00.410 --> 00:00:03.450
In our definitions so far,
we've limited our flow networks

00:00:03.450 --> 00:00:07.140
in several ways to make our
treatment of them a little simpler.

00:00:07.140 --> 00:00:08.400
Before going any further,

00:00:08.400 --> 00:00:11.550
I want to show some tricks of the trade
that will allow all of the theorems and

00:00:11.550 --> 00:00:15.820
algorithms that we'll study to be
applied to more general networks.

00:00:15.820 --> 00:00:17.660
One such limitation is the need for

00:00:17.660 --> 00:00:21.150
all the capacities on
the edges to be integers.

00:00:21.150 --> 00:00:24.609
We can extend all our arguments
to rational capacities,

00:00:24.609 --> 00:00:27.923
just by multiplying
the capacities by the least common

00:00:27.923 --> 00:00:31.686
multiple of the denominators
to create integer capacities.

00:00:31.686 --> 00:00:35.880
So in this case, I would simply
multiply all the capacities by six.

00:00:35.880 --> 00:00:40.483
This just amounts to a change of
units in our measurement of the flow.

00:00:40.483 --> 00:00:44.907
Another limitation we've imposed is that
no antiparallel edges are allowed in

00:00:44.907 --> 00:00:45.707
the network.

00:00:45.707 --> 00:00:49.800
This forces us to choose a direction for
the flow between every pair of vertices.

00:00:50.910 --> 00:00:53.550
In general, however,
it might not be clear in which direction

00:00:53.550 --> 00:00:56.670
the flow should go before
solving the max flow problem.

00:00:57.960 --> 00:01:01.620
It's possible to cope with this
situation with some slightly less

00:01:01.620 --> 00:01:06.990
elegant analysis or just to convince
yourself that the theorems still hold,

00:01:06.990 --> 00:01:11.110
add an artificial vortex
between the two nodes and

00:01:11.110 --> 00:01:15.570
create two edges to simulate
a reverse flow in this direction.

00:01:15.570 --> 00:01:18.830
Another limitation of our model is
that we've limited ourselves to having

00:01:18.830 --> 00:01:21.810
a single source and a single sink.

00:01:21.810 --> 00:01:25.590
At first, it would seem like we
couldn't handle a network like this one

00:01:25.590 --> 00:01:29.060
where we have two sources and
three sinks.

00:01:29.060 --> 00:01:32.200
Actually, however, this situation
is quite easy to deal with.

00:01:32.200 --> 00:01:35.050
We can just add an artificial
source node and

00:01:35.050 --> 00:01:38.520
connect that to the others
with an infinite capacity.

00:01:38.520 --> 00:01:41.560
And similarly, add an artificial sink.

00:01:41.560 --> 00:01:43.550
So don't let that limitation
trouble you either.

