WEBVTT
Kind: captions
Language: en

00:00:00.539 --> 00:00:01.830
ANKUR KOTWAL: Thank you, Kunal.

00:00:05.240 --> 00:00:05.790
Hi everyone.

00:00:05.790 --> 00:00:07.010
I'm Ankur Kotwal.

00:00:07.010 --> 00:00:10.470
I'm a developer advocate on the
developer products group team.

00:00:10.470 --> 00:00:12.340
And today what I want
to talk to you about

00:00:12.340 --> 00:00:17.360
is the 3Cs framework that
Kunal just introduced.

00:00:17.360 --> 00:00:19.620
We feel that the
3Cs framework helps

00:00:19.620 --> 00:00:22.940
to categorize a range
of technical challenges

00:00:22.940 --> 00:00:26.570
that you will find
in this market.

00:00:26.570 --> 00:00:28.230
And what I want
to share with you

00:00:28.230 --> 00:00:31.250
are ways that you can
address those challenges.

00:00:31.250 --> 00:00:35.440
So let's start off by
talking about connectivity.

00:00:35.440 --> 00:00:38.560
The first thing to keep in
mind is that not all networks

00:00:38.560 --> 00:00:40.170
are the same.

00:00:40.170 --> 00:00:42.670
You can have users
on a 4G network

00:00:42.670 --> 00:00:44.800
that have 2G-like speeds.

00:00:44.800 --> 00:00:47.040
You can have users that
are on broadband networks,

00:00:47.040 --> 00:00:50.800
on Wi-Fi networks, that
also have very slow speeds.

00:00:50.800 --> 00:00:53.970
And in fact, that same
user on a 4G network

00:00:53.970 --> 00:00:58.400
with 2G-like connectivity can
travel two blocks that way

00:00:58.400 --> 00:01:02.060
and suddenly get
4G connectivity.

00:01:02.060 --> 00:01:04.319
So what you want to do
is not make an assumption

00:01:04.319 --> 00:01:08.360
about the quality of the network
based on its network type.

00:01:08.360 --> 00:01:11.370
But you want to be continually
conscious of the quality

00:01:11.370 --> 00:01:15.280
of the network that your
app is experiencing.

00:01:15.280 --> 00:01:19.070
So to keep our apps
responsive and useful,

00:01:19.070 --> 00:01:23.660
we want to do things like
prioritize our data requests.

00:01:23.660 --> 00:01:26.410
Pull down text from
your servers first.

00:01:26.410 --> 00:01:29.220
Because you can present that
information to your users

00:01:29.220 --> 00:01:34.350
and have your app usable whilst
the rest of your images load.

00:01:34.350 --> 00:01:39.810
To show you an example, you
can see here, with this app,

00:01:39.810 --> 00:01:42.220
the text loaded
up nice and early.

00:01:42.220 --> 00:01:44.870
And the images started
to load up over time.

00:01:44.870 --> 00:01:47.260
We didn't fetch all the
images ahead of time, either.

00:01:47.260 --> 00:01:51.050
So as we scrolled down the list,
we pulled more images down.

00:01:51.050 --> 00:01:52.930
In fact, if you start
to think about it,

00:01:52.930 --> 00:01:58.267
you realize that, as you start
to address unreliable networks,

00:01:58.267 --> 00:01:59.850
you start thinking
more towards, well,

00:01:59.850 --> 00:02:01.880
how is my offline experience?

00:02:01.880 --> 00:02:05.390
Because they are, in
some ways, similar.

00:02:05.390 --> 00:02:09.570
What we want to start to do
is actually optimize our apps

00:02:09.570 --> 00:02:12.840
for useful offline experiences.

00:02:12.840 --> 00:02:17.830
We want to start caching our
data where it's appropriate.

00:02:17.830 --> 00:02:21.140
So when we fetch an
image from our servers,

00:02:21.140 --> 00:02:23.270
we want to store that locally.

00:02:23.270 --> 00:02:25.780
And next time, when we
need to present that image,

00:02:25.780 --> 00:02:30.200
we want to present it
from our local cache.

00:02:30.200 --> 00:02:32.530
There are libraries that
can help you with this.

00:02:32.530 --> 00:02:36.004
Picasso and Glide-- these
are open-source libraries.

00:02:36.004 --> 00:02:37.420
And I recommend
that you use them.

00:02:37.420 --> 00:02:39.370
Because they will
fetch your URLs.

00:02:39.370 --> 00:02:40.890
They will also cache it.

00:02:40.890 --> 00:02:42.527
They will manage it for you.

00:02:42.527 --> 00:02:44.860
And actually, they can help
you downsample those images.

00:02:44.860 --> 00:02:47.090
And we'll talk about
that in a minute.

00:02:47.090 --> 00:02:48.980
The material design
guidelines actually

00:02:48.980 --> 00:02:52.620
recommend that when you
have space for images

00:02:52.620 --> 00:02:54.740
and they haven't loaded
yet, you shouldn't leave

00:02:54.740 --> 00:02:56.570
that with just empty space.

00:02:56.570 --> 00:03:00.160
You should use flat colors
as placeholder images.

00:03:00.160 --> 00:03:03.750
And we have a library called
Palette in the Android Design

00:03:03.750 --> 00:03:07.800
Support Library that helps you
generate those colors depending

00:03:07.800 --> 00:03:10.190
on the imagery
that you're seeing.

00:03:10.190 --> 00:03:14.300
Now, this app here is
working in airplane mode.

00:03:14.300 --> 00:03:16.800
And as you may have noticed,
as we scrolled through the app,

00:03:16.800 --> 00:03:18.730
it was totally usable.

00:03:18.730 --> 00:03:23.270
And that's because it was
designed with offline in mind.

00:03:23.270 --> 00:03:27.660
So I recommend that you
look at your own apps

00:03:27.660 --> 00:03:30.520
and see how they work offline.

00:03:30.520 --> 00:03:33.960
And the way that you can do this
is just to go to your device,

00:03:33.960 --> 00:03:37.234
put it in airplane
mode, and test it out.

00:03:37.234 --> 00:03:38.650
It's a fairly
straightforward way.

00:03:38.650 --> 00:03:41.811
And you may be surprised
at the results.

00:03:41.811 --> 00:03:43.560
So that's a little bit
about connectivity.

00:03:43.560 --> 00:03:46.230
Let's talk about compatibility.

00:03:46.230 --> 00:03:49.090
One of the strengths of
the Android ecosystem

00:03:49.090 --> 00:03:53.500
is that developers and users
have a choice of device.

00:03:53.500 --> 00:03:55.860
Some users like small screens.

00:03:55.860 --> 00:03:57.870
Some users like big screens.

00:03:57.870 --> 00:03:59.940
Some users like great cameras.

00:03:59.940 --> 00:04:02.360
Other users like more storage.

00:04:02.360 --> 00:04:04.580
So this means that,
as developers, we

00:04:04.580 --> 00:04:06.880
shouldn't make assumptions.

00:04:06.880 --> 00:04:11.100
Or rather, we should optimize
our apps to be flexible.

00:04:11.100 --> 00:04:12.890
I'm going to talk about that.

00:04:12.890 --> 00:04:15.970
Let's start with screen sizes.

00:04:15.970 --> 00:04:18.040
All of our layouts
should be declared

00:04:18.040 --> 00:04:20.910
in density-independent
pixels, or DIPs.

00:04:20.910 --> 00:04:22.860
Developers will
know these as DIPs.

00:04:22.860 --> 00:04:27.650
A density-independent pixel
is basically a physical size

00:04:27.650 --> 00:04:28.950
for your layouts.

00:04:28.950 --> 00:04:32.250
So if you have a
64 by 64 DIP image,

00:04:32.250 --> 00:04:34.150
that image is
physically going to be

00:04:34.150 --> 00:04:39.190
the same size on a three-inch
phone or a five-inch phone.

00:04:39.190 --> 00:04:42.570
And that helps our apps
be responsive and scale

00:04:42.570 --> 00:04:45.520
to different device sizes.

00:04:45.520 --> 00:04:48.540
Google also provides the
AppCompat and Design Support

00:04:48.540 --> 00:04:53.620
libraries that include a set
of pre-defined components

00:04:53.620 --> 00:04:55.080
that you can use.

00:04:55.080 --> 00:04:58.380
These components actually
embrace the material design

00:04:58.380 --> 00:05:01.380
guidelines that Francis
mentioned earlier.

00:05:01.380 --> 00:05:04.060
But best of all,
these components

00:05:04.060 --> 00:05:07.230
are backward-compatible
to Android 2.1.

00:05:07.230 --> 00:05:09.830
So if you have users
on older devices,

00:05:09.830 --> 00:05:11.640
on older versions
of Android, they

00:05:11.640 --> 00:05:14.670
can still have a modern user
experience, a modern look

00:05:14.670 --> 00:05:16.770
and feel, from your app today.

00:05:20.300 --> 00:05:25.540
In India, everyone speaks
so many different languages.

00:05:25.540 --> 00:05:28.440
You can go to one state and have
a different set of languages

00:05:28.440 --> 00:05:29.470
to another state.

00:05:29.470 --> 00:05:32.720
And so it's really important
that, as developers and content

00:05:32.720 --> 00:05:35.980
creators, we create
content in languages

00:05:35.980 --> 00:05:38.980
that our users
understand and can read.

00:05:38.980 --> 00:05:43.580
To help with this effort,
Google provides the Noto font

00:05:43.580 --> 00:05:48.980
that includes support for 10
Indic languages and growing.

00:05:48.980 --> 00:05:50.850
And the great thing
about this font

00:05:50.850 --> 00:05:53.870
is it's designed to
read really well.

00:05:53.870 --> 00:05:56.860
But it's also designed
to scale really well.

00:05:56.860 --> 00:05:59.720
It's really readable on a watch.

00:05:59.720 --> 00:06:02.010
It's just as legible on a phone.

00:06:02.010 --> 00:06:06.630
And it scales beautifully
to big screens as well.

00:06:06.630 --> 00:06:10.490
As we go to build our layouts,
we also want to test them out.

00:06:10.490 --> 00:06:12.690
So in Android Studio,
you can actually

00:06:12.690 --> 00:06:14.425
preview all screen sizes.

00:06:14.425 --> 00:06:17.200
So as you code your
layouts, you can

00:06:17.200 --> 00:06:23.280
see how that layout looks in
real time on a set of devices.

00:06:23.280 --> 00:06:26.030
And in fact, Francis
mentioned earlier

00:06:26.030 --> 00:06:29.885
that we've recently
announced Android Studio 2.0.

00:06:29.885 --> 00:06:32.290
It has a brand new emulator.

00:06:32.290 --> 00:06:34.960
Now, I know many developers
have given us feedback

00:06:34.960 --> 00:06:36.280
about our emulator before.

00:06:36.280 --> 00:06:37.980
So I'm really
excited to tell you

00:06:37.980 --> 00:06:41.960
that our new emulators are
faster than physical devices.

00:06:41.960 --> 00:06:45.140
So when it comes to supporting
multiple screen sizes,

00:06:45.140 --> 00:06:48.210
there's no excuse for having
a different set of emulator

00:06:48.210 --> 00:06:52.060
configurations set up for
all the types of device sizes

00:06:52.060 --> 00:06:55.510
you think your users have.

00:06:55.510 --> 00:06:57.710
Instant Run makes
it even better.

00:06:57.710 --> 00:07:01.000
Instant Run is a feature
of Android Studio which

00:07:01.000 --> 00:07:04.660
will deploy changes that you
make to your code in just

00:07:04.660 --> 00:07:06.190
a few seconds.

00:07:06.190 --> 00:07:08.700
And the reason it
works so fast is

00:07:08.700 --> 00:07:11.960
that rather than package up
your whole APK and deploy it,

00:07:11.960 --> 00:07:13.770
it can connect to
the app that you're

00:07:13.770 --> 00:07:16.940
debugging on an emulator
or a physical device

00:07:16.940 --> 00:07:19.330
and just send the
changes across.

00:07:19.330 --> 00:07:21.720
So it's really smart
and really, really fast.

00:07:21.720 --> 00:07:24.330
It helps you make rapid
changes and see them

00:07:24.330 --> 00:07:26.890
across various screen sizes.

00:07:26.890 --> 00:07:29.920
But I want to switch gears
now and talk about memory.

00:07:29.920 --> 00:07:33.240
Because memory is also
another differentiating factor

00:07:33.240 --> 00:07:36.150
across devices.

00:07:36.150 --> 00:07:39.940
And as developers, we should
be conscious of how much memory

00:07:39.940 --> 00:07:42.730
is available to our
app at run time.

00:07:42.730 --> 00:07:47.150
We have APIs like
isLowRamDevice, getMemoryClass.

00:07:47.150 --> 00:07:52.240
And these APIs help give us
indications of how much memory

00:07:52.240 --> 00:07:53.900
we have to play with.

00:07:53.900 --> 00:07:57.760
So it's really important that
we actually request these values

00:07:57.760 --> 00:07:59.915
and change our
behavior accordingly.

00:08:03.310 --> 00:08:05.290
As we run on different
size devices,

00:08:05.290 --> 00:08:09.540
we should also be conscious
of the images that we use.

00:08:09.540 --> 00:08:12.760
Because we know that
images typically

00:08:12.760 --> 00:08:16.290
take up the most amount of
memory in a running app.

00:08:16.290 --> 00:08:19.570
So there's no point rendering
a really high-resolution image

00:08:19.570 --> 00:08:22.960
onto a small little image
view on a three-inch screen.

00:08:22.960 --> 00:08:24.520
You should be
downsampling that image

00:08:24.520 --> 00:08:26.510
and presenting it
in the resolution

00:08:26.510 --> 00:08:28.980
that you're going to show it at.

00:08:28.980 --> 00:08:32.260
And again, Picasso and
Glide help with this.

00:08:32.260 --> 00:08:34.371
They will not only
downsample an image for you.

00:08:34.371 --> 00:08:35.870
They will cache
that as well, so you

00:08:35.870 --> 00:08:37.036
don't have to keep doing it.

00:08:39.580 --> 00:08:40.860
We love services.

00:08:40.860 --> 00:08:42.309
Developers love services.

00:08:42.309 --> 00:08:45.310
Because with services, we get to
do some work in the background.

00:08:45.310 --> 00:08:48.000
We can preempt what the user
might want in the morning,

00:08:48.000 --> 00:08:50.430
fetch some data,
do some processing.

00:08:50.430 --> 00:08:53.340
But it's really important
that our services are not

00:08:53.340 --> 00:08:54.490
long-running.

00:08:54.490 --> 00:08:58.010
You don't need a service
that stays awake and active

00:08:58.010 --> 00:08:59.580
the whole time.

00:08:59.580 --> 00:09:01.540
It's actually much better
to have your service

00:09:01.540 --> 00:09:06.570
wake up at appropriate times,
do its work, and then shut down.

00:09:06.570 --> 00:09:09.242
Because then your
app isn't basically

00:09:09.242 --> 00:09:10.200
running the whole time.

00:09:10.200 --> 00:09:14.430
If every app on your device
had a service that was active,

00:09:14.430 --> 00:09:17.580
there would be no memory left
for the actual foreground app.

00:09:17.580 --> 00:09:19.260
And of course, in
the Settings app

00:09:19.260 --> 00:09:23.310
you can check out what apps
are causing memory pressure

00:09:23.310 --> 00:09:24.730
on your device.

00:09:24.730 --> 00:09:27.350
And I really hope that your
app isn't one of those.

00:09:30.170 --> 00:09:32.780
We've tried to be really
clever about giving you

00:09:32.780 --> 00:09:37.070
the right tools in Android
Studio to detect memory usage.

00:09:37.070 --> 00:09:40.150
So I want to call out
these two graphs here.

00:09:40.150 --> 00:09:43.560
On this side, we have
a 512 meg RAM device.

00:09:43.560 --> 00:09:47.050
And on the left side, we
have a 1 gig RAM device.

00:09:47.050 --> 00:09:48.880
And what I want
you to focus on are

00:09:48.880 --> 00:09:51.700
those numbers on the top left.

00:09:51.700 --> 00:09:55.200
On the 512 meg RAM
device, this app

00:09:55.200 --> 00:09:59.010
is using about 12
megs of memory.

00:09:59.010 --> 00:10:02.600
On this device, the
same app is actually

00:10:02.600 --> 00:10:05.960
using 36 megabytes
of memory, which

00:10:05.960 --> 00:10:08.510
means that this app
is being really clever

00:10:08.510 --> 00:10:11.890
and using all these
optimizations to adjust

00:10:11.890 --> 00:10:15.100
its memory usage based
on what's available.

00:10:15.100 --> 00:10:17.450
The other thing that
this tool helps us with

00:10:17.450 --> 00:10:19.540
is detect things
like memory leaks.

00:10:19.540 --> 00:10:24.160
You can see our graphs go flat
towards the end there, which

00:10:24.160 --> 00:10:26.890
basically means our app is
allocating a bunch of memory

00:10:26.890 --> 00:10:30.720
to start with, and
then capping it off.

00:10:30.720 --> 00:10:32.740
We don't have leaks where
this graph just grows

00:10:32.740 --> 00:10:36.120
and grows and grows.

00:10:36.120 --> 00:10:38.230
This is the shape of a
graph that we should all

00:10:38.230 --> 00:10:39.410
aspire to in our apps.

00:10:44.410 --> 00:10:48.260
Battery is near and dear
to everyone's heart.

00:10:48.260 --> 00:10:50.800
We love our devices so
much that we're always

00:10:50.800 --> 00:10:53.020
complaining that we
don't have enough juice.

00:10:53.020 --> 00:10:55.600
We don't have enough
batteries available to do

00:10:55.600 --> 00:10:56.911
all the things that we want.

00:10:56.911 --> 00:10:58.410
And so it's made
even worse when you

00:10:58.410 --> 00:11:03.530
have apps that don't address
battery use appropriately.

00:11:03.530 --> 00:11:06.020
So in your own apps, what
you should be doing is,

00:11:06.020 --> 00:11:09.070
if you need to do some
background work, coalesce it.

00:11:09.070 --> 00:11:10.540
Batch it up.

00:11:10.540 --> 00:11:14.390
Don't have the device wake up
frequently for you to do work.

00:11:14.390 --> 00:11:17.860
You're better off waking up
once, doing a chunk of work,

00:11:17.860 --> 00:11:21.050
and then letting the device
go back into standby.

00:11:21.050 --> 00:11:23.130
Even better, what
we should be doing

00:11:23.130 --> 00:11:26.380
is making sure that we're
not running this sort of work

00:11:26.380 --> 00:11:29.075
when the device is
running on battery.

00:11:29.075 --> 00:11:30.450
We actually should
be making sure

00:11:30.450 --> 00:11:34.020
that the device is connected
to a power charger that

00:11:34.020 --> 00:11:36.420
is connected to a
network that's unmetered,

00:11:36.420 --> 00:11:39.740
so we're not costing
the user money.

00:11:39.740 --> 00:11:41.090
And there is an API to do this.

00:11:41.090 --> 00:11:43.670
In Android Lollipop, we
introduced the JobScheduler

00:11:43.670 --> 00:11:45.970
API, which does exactly that.

00:11:45.970 --> 00:11:49.300
You can mandate heuristics that
say, I want to be charging.

00:11:49.300 --> 00:11:50.520
I want to be on Wi-Fi.

00:11:50.520 --> 00:11:54.910
And I want to do it around
this time of the day.

00:11:54.910 --> 00:11:56.190
But I know what you're saying.

00:11:56.190 --> 00:11:57.731
I don't want to just
run on Lollipop.

00:11:57.731 --> 00:12:00.280
I want to support all my users.

00:12:00.280 --> 00:12:03.880
The GcmNetworkManager API is
part of Google Play Services.

00:12:03.880 --> 00:12:06.750
And it is JobScheduler
for Android 2.3

00:12:06.750 --> 00:12:09.670
and up-- for Gingerbread and up.

00:12:09.670 --> 00:12:13.190
Don't be fooled by the fact that
it's called GcmNetworkManager.

00:12:13.190 --> 00:12:15.690
This is not a
GoogleCloudMessaging API.

00:12:15.690 --> 00:12:18.370
It literally is for
scheduling your jobs.

00:12:18.370 --> 00:12:24.370
And my personal favorite thing
is that both of these APIs

00:12:24.370 --> 00:12:26.320
help you survive reboots.

00:12:26.320 --> 00:12:28.060
So you can schedule a task.

00:12:28.060 --> 00:12:30.460
And if the user
reboots their device,

00:12:30.460 --> 00:12:32.900
or they turn off their device,
when they turn it back on,

00:12:32.900 --> 00:12:36.740
you can dictate that those
scheduled tasks will still

00:12:36.740 --> 00:12:39.840
run without you having
to re-schedule them.

00:12:39.840 --> 00:12:42.070
So this is a great way to
respect the user's battery.

00:12:44.910 --> 00:12:47.467
We've talked about
caching quite a lot.

00:12:47.467 --> 00:12:49.300
But it's really important
that we don't just

00:12:49.300 --> 00:12:50.740
run away with our cache.

00:12:50.740 --> 00:12:52.340
We don't grow forever.

00:12:52.340 --> 00:12:54.090
We do it intelligently.

00:12:54.090 --> 00:12:56.130
So we should have a
strategy for caching.

00:12:56.130 --> 00:12:59.190
We should hold onto the things
that are most important,

00:12:59.190 --> 00:13:02.710
as well as the things that
are most frequently used.

00:13:02.710 --> 00:13:04.440
Things that are
old and out of date

00:13:04.440 --> 00:13:06.545
we should actually throw away.

00:13:06.545 --> 00:13:08.420
Now, the nice way and
the easy way to do this

00:13:08.420 --> 00:13:11.680
is to use Glide or Picasso
that manage this for you

00:13:11.680 --> 00:13:13.230
for your image cache.

00:13:13.230 --> 00:13:16.280
But if you're using your
own cache, something custom,

00:13:16.280 --> 00:13:18.610
you definitely need
a strategy in place

00:13:18.610 --> 00:13:20.050
that helps you manage it.

00:13:20.050 --> 00:13:22.100
And the reason
that you need it is

00:13:22.100 --> 00:13:25.690
because of this scary
notification-- storage

00:13:25.690 --> 00:13:27.130
space running out.

00:13:27.130 --> 00:13:30.570
You may have seen this yourself,
that apps have taken up

00:13:30.570 --> 00:13:34.240
enough memory, enough
storage space, on your device

00:13:34.240 --> 00:13:36.680
that your device is starting
to run low on space.

00:13:36.680 --> 00:13:37.430
So what do you do?

00:13:37.430 --> 00:13:39.420
You tap the notification.

00:13:39.420 --> 00:13:41.330
And you see this dialogue.

00:13:41.330 --> 00:13:42.600
This is the Settings app.

00:13:42.600 --> 00:13:44.950
It sorts all the apps
by the amount of space

00:13:44.950 --> 00:13:46.769
that they're taking up.

00:13:46.769 --> 00:13:48.310
Now if your device
is low on storage,

00:13:48.310 --> 00:13:51.024
and you can't take photos
of your family and friends,

00:13:51.024 --> 00:13:52.440
the first thing
you're going to do

00:13:52.440 --> 00:13:55.930
is start to uninstall
the big, heavy apps.

00:13:55.930 --> 00:13:58.780
You really don't want your
app to be one of these.

00:13:58.780 --> 00:14:01.500
You want to have a good
caching strategy in mind.

00:14:01.500 --> 00:14:04.200
But I'm going to
give you another tip.

00:14:04.200 --> 00:14:07.740
The Android framework
actually sends out a broadcast

00:14:07.740 --> 00:14:10.342
before it gives the
user that notification.

00:14:10.342 --> 00:14:12.175
That broadcast is
ACTION_DEVICE_STORAGE_LOW.

00:14:14.860 --> 00:14:17.140
And what you can do is
listen for that broadcast.

00:14:17.140 --> 00:14:19.100
And at the point
that you receive it,

00:14:19.100 --> 00:14:21.420
you can clear out your cache.

00:14:21.420 --> 00:14:24.410
And that means you're doing
exactly what the system wants

00:14:24.410 --> 00:14:25.230
you to do.

00:14:25.230 --> 00:14:26.240
The system is saying, hey, look.

00:14:26.240 --> 00:14:27.364
I'm running out of storage.

00:14:27.364 --> 00:14:28.794
Can you please
clean yourself up?

00:14:28.794 --> 00:14:29.710
And you're doing that.

00:14:29.710 --> 00:14:31.430
You're clearing out your cache.

00:14:31.430 --> 00:14:35.570
And better yet, you're trying
to remove your app from being

00:14:35.570 --> 00:14:37.450
at the top of this list.

00:14:37.450 --> 00:14:39.490
So the apps that
don't respond to this

00:14:39.490 --> 00:14:41.505
are more likely the ones
that get uninstalled.

00:14:44.130 --> 00:14:47.116
You should go and measure
the storage of your own apps.

00:14:47.116 --> 00:14:48.240
The Settings app does this.

00:14:48.240 --> 00:14:50.270
In fact, it breaks
it down very nicely.

00:14:50.270 --> 00:14:53.310
You can see how much space
your APK is taking up,

00:14:53.310 --> 00:14:55.840
how much data in
the data directory,

00:14:55.840 --> 00:14:58.290
as well as your cache.

00:14:58.290 --> 00:14:59.460
So go ahead and measure it.

00:14:59.460 --> 00:15:05.340
Look at your storage space
across different devices.

00:15:05.340 --> 00:15:08.440
All right, connectivity,
compatibility--

00:15:08.440 --> 00:15:10.440
let's talk about data cost.

00:15:10.440 --> 00:15:15.700
The first cost that your
users incur from your app

00:15:15.700 --> 00:15:17.870
is actually at installation.

00:15:17.870 --> 00:15:21.190
And we know from research
that Indian users

00:15:21.190 --> 00:15:23.990
are sensitive to APK sizes.

00:15:23.990 --> 00:15:26.350
And they're not just
sensitive to the APK size

00:15:26.350 --> 00:15:27.600
when they install the app.

00:15:27.600 --> 00:15:30.200
They're just as sensitive
to it when they upgrade

00:15:30.200 --> 00:15:32.910
to a new version of
your app and are alarmed

00:15:32.910 --> 00:15:35.640
by just how big it's gotten.

00:15:35.640 --> 00:15:38.100
So the first thing you
should do is audit your APKs.

00:15:38.100 --> 00:15:40.700
If you feel like your APK
size is starting to bloat,

00:15:40.700 --> 00:15:44.110
make sure you don't have
really high-resolution images

00:15:44.110 --> 00:15:47.930
in your app that are targeting
low-resolution devices.

00:15:47.930 --> 00:15:49.250
You should profile your users.

00:15:49.250 --> 00:15:52.690
Use the Play Developer Console
to see what type of devices

00:15:52.690 --> 00:15:54.400
are installing your app.

00:15:54.400 --> 00:15:57.610
And if you find that you
still need those assets,

00:15:57.610 --> 00:16:00.470
you should consider
using multi-APK.

00:16:00.470 --> 00:16:05.815
Multi-APK is a configuration
in build.gradle.

00:16:05.815 --> 00:16:08.190
And the reason it's useful is
that if you think about how

00:16:08.190 --> 00:16:10.790
APKs are built today,
when you hit Build,

00:16:10.790 --> 00:16:13.460
we compile one
monolithic APK that's

00:16:13.460 --> 00:16:16.760
applicable to all these
different densities, right?

00:16:16.760 --> 00:16:19.930
Multi-APK helps you
split up your APK

00:16:19.930 --> 00:16:24.680
so that you end up with an
APK for LDPI, MDPI, HDPI,

00:16:24.680 --> 00:16:26.510
so on and so forth.

00:16:26.510 --> 00:16:28.810
So it's a really simple
build configuration.

00:16:28.810 --> 00:16:30.750
It adds a little bit
of overhead for you.

00:16:30.750 --> 00:16:33.620
Because when you upload
it to the Play Store,

00:16:33.620 --> 00:16:36.320
you have a number of
APKs now that you upload.

00:16:36.320 --> 00:16:38.140
But the benefits
are huge, right?

00:16:38.140 --> 00:16:40.200
Because you end up
with an APK size

00:16:40.200 --> 00:16:45.400
which is much smaller and really
targeted to your user's device.

00:16:45.400 --> 00:16:47.930
It helps you get
those conversions.

00:16:47.930 --> 00:16:51.769
And you can track the growth
of your APK size on your

00:16:51.769 --> 00:16:52.310
build server.

00:16:54.870 --> 00:16:57.480
We've talked about
data at rest-- caching.

00:16:57.480 --> 00:17:00.370
Let's talk about data
in motion-- things

00:17:00.370 --> 00:17:01.790
that we request over a network.

00:17:01.790 --> 00:17:03.940
We really should be efficient.

00:17:03.940 --> 00:17:06.310
And there are many ways
we can be efficient.

00:17:06.310 --> 00:17:09.069
A simple way is we
only request the things

00:17:09.069 --> 00:17:10.990
that are visible on screen.

00:17:10.990 --> 00:17:14.292
So we saw an animated
image earlier of an app.

00:17:14.292 --> 00:17:15.750
Those images were
being pulled down

00:17:15.750 --> 00:17:17.470
because they were
being displayed.

00:17:17.470 --> 00:17:19.829
We weren't trying to
pre-fetch ahead of time tons

00:17:19.829 --> 00:17:20.960
and tons of images.

00:17:20.960 --> 00:17:23.690
We were being clever about it.

00:17:23.690 --> 00:17:27.040
In terms of efficiency,
we also never want

00:17:27.040 --> 00:17:29.990
to request the same
image from the network

00:17:29.990 --> 00:17:31.085
if we don't have to.

00:17:31.085 --> 00:17:33.210
So the first time you
request it, you pull it down.

00:17:33.210 --> 00:17:34.335
You cache it.

00:17:34.335 --> 00:17:35.710
The next time you
need it, you'll

00:17:35.710 --> 00:17:37.420
get it from the local cache.

00:17:37.420 --> 00:17:41.160
It's really, really
important we do these things.

00:17:41.160 --> 00:17:43.480
We also want to
optimize our images.

00:17:43.480 --> 00:17:45.750
We want our servers
to send us images

00:17:45.750 --> 00:17:47.519
that are downsampled already.

00:17:47.519 --> 00:17:49.810
You don't want to have to
fetch a high-resolution image

00:17:49.810 --> 00:17:52.390
from your server and
downsample it locally.

00:17:52.390 --> 00:17:54.690
Because that's
cost to your user.

00:17:54.690 --> 00:17:57.700
You've transferred
all those bytes.

00:17:57.700 --> 00:18:00.345
There's a file format that
can help you called WebP.

00:18:00.345 --> 00:18:01.720
Now, I know what
you're thinking.

00:18:01.720 --> 00:18:02.890
Did he say WebP?

00:18:02.890 --> 00:18:04.910
I thought it's an Android talk.

00:18:04.910 --> 00:18:07.690
WebP is not just for the web.

00:18:07.690 --> 00:18:09.730
WebP is a file format
that's very much

00:18:09.730 --> 00:18:11.860
relevant to mobile apps.

00:18:11.860 --> 00:18:17.490
In fact, Android has had support
for WebP since Jelly Bean.

00:18:17.490 --> 00:18:22.650
And WebP results in a smaller
file size than PNG or JPG

00:18:22.650 --> 00:18:26.590
at both lossy and lossless.

00:18:26.590 --> 00:18:29.490
So it's something you
really should consider.

00:18:29.490 --> 00:18:31.710
Now when it comes to
measuring our data use,

00:18:31.710 --> 00:18:35.100
Android Studio provides
an excellent monitor.

00:18:35.100 --> 00:18:37.110
This is the Network
Monitor on Android Studio.

00:18:37.110 --> 00:18:41.170
And you'll see here that
our app is requesting

00:18:41.170 --> 00:18:43.980
three short bursts
of data, and then

00:18:43.980 --> 00:18:47.410
big ones-- big, chunky requests.

00:18:47.410 --> 00:18:50.787
This is the type of data
request that you should have.

00:18:50.787 --> 00:18:52.370
There on the left,
those initial ones,

00:18:52.370 --> 00:18:55.550
we requested the text that we
were displaying to the users.

00:18:55.550 --> 00:18:57.700
Then we started to
pull down our images.

00:18:57.700 --> 00:19:00.490
So go ahead and monitor
and measure your own apps.

00:19:00.490 --> 00:19:02.040
See how they fit in with this.

00:19:05.470 --> 00:19:09.400
So that's just a taste
of what's possible.

00:19:09.400 --> 00:19:11.900
India is an exciting place.

00:19:11.900 --> 00:19:15.470
The number of users coming
online are exciting.

00:19:15.470 --> 00:19:18.650
The opportunity is
immense and huge.

00:19:18.650 --> 00:19:21.810
So I hope today that, by
sharing with you the 3C

00:19:21.810 --> 00:19:24.500
framework and some ways
that you can really

00:19:24.500 --> 00:19:27.070
optimize your apps
for India, you're

00:19:27.070 --> 00:19:32.170
able to be the apps that
these new users want and love.

00:19:32.170 --> 00:19:36.870
With that, I'd like to
invite Bapu Kota, the CTO

00:19:36.870 --> 00:19:40.150
and VP of Dailyhunt, to
talk about their experience

00:19:40.150 --> 00:19:42.324
with applying this framework.

00:19:42.324 --> 00:19:45.216
[APPLAUSE]

00:19:51.000 --> 00:19:54.310
BAPU KOTA: Hi everyone.

00:19:54.310 --> 00:19:55.640
I'm Bapu.

00:19:55.640 --> 00:19:58.110
I head engineering
for Dailyhunt.

00:20:00.620 --> 00:20:06.260
I wanted to start off talking
about the spread of literacy

00:20:06.260 --> 00:20:11.310
in India, the spread of
local dialects in India.

00:20:11.310 --> 00:20:14.020
So as we know, India
is a diverse country.

00:20:14.020 --> 00:20:19.840
It has 22 official
languages and off the census

00:20:19.840 --> 00:20:23.510
reported literacy of 70%.

00:20:23.510 --> 00:20:26.580
Only 10% makes up for English.

00:20:26.580 --> 00:20:32.140
What that amounts to is
that, like Kunal said,

00:20:32.140 --> 00:20:34.910
around half a billion
mobile smartphone users

00:20:34.910 --> 00:20:37.410
consuming internet
services would

00:20:37.410 --> 00:20:42.680
be engaging with these services
through local language.

00:20:42.680 --> 00:20:44.303
This is our playing field.

00:20:47.140 --> 00:20:54.710
Dailyhunt is India's largest
news and content platform--

00:20:54.710 --> 00:21:01.830
content ranging from ebooks to
content helping with education

00:21:01.830 --> 00:21:05.060
and test prep material.

00:21:05.060 --> 00:21:09.870
And these stats help us.

00:21:09.870 --> 00:21:12.450
So far the app has
been able to manage

00:21:12.450 --> 00:21:15.290
over 110 million installs.

00:21:15.290 --> 00:21:17.790
Through the
high-engaging experience,

00:21:17.790 --> 00:21:21.590
it manages 3-plus billion
page views a month,

00:21:21.590 --> 00:21:25.590
over 28 million book downloads.

00:21:25.590 --> 00:21:28.000
And then the last statistic
is very important.

00:21:28.000 --> 00:21:32.140
And that highlights the
nature of consumption--

00:21:32.140 --> 00:21:37.080
the consumption pattern both
in terms of users and usage

00:21:37.080 --> 00:21:38.380
on our app.

00:21:38.380 --> 00:21:42.710
So we see that more than
95% of our usage and users

00:21:42.710 --> 00:21:47.565
look to consume content and
services in local languages.

00:21:52.220 --> 00:21:57.540
At Dailyhunt, we are aspiring
to be a destination that offers

00:21:57.540 --> 00:21:59.940
daily habits for our users.

00:21:59.940 --> 00:22:04.030
We wish to be the first point of
internet access for the users.

00:22:04.030 --> 00:22:06.990
And towards that, we've
been investing heavily

00:22:06.990 --> 00:22:10.120
in terms of not just
building for scale

00:22:10.120 --> 00:22:13.870
on the back-end-- building
services and platforms that

00:22:13.870 --> 00:22:17.220
are able to manage this
larger scale in terms of reach

00:22:17.220 --> 00:22:20.940
and engagement-- but also
equally emphasizing on,

00:22:20.940 --> 00:22:26.310
like Ankur was detailing just
now, aspects around experience

00:22:26.310 --> 00:22:29.880
and aspects around performance.

00:22:29.880 --> 00:22:32.800
I just wanted to walk you
through a couple of things

00:22:32.800 --> 00:22:36.900
that were relevant given the
flow of our session so far.

00:22:36.900 --> 00:22:41.960
On the localization and script
support, we have within the app

00:22:41.960 --> 00:22:46.070
a rendering engine that is
built on top of Android's

00:22:46.070 --> 00:22:48.590
native TTF-based rendering.

00:22:48.590 --> 00:22:54.380
And this helps us transform,
compose, and render content

00:22:54.380 --> 00:22:59.125
from across 15 Indian local
languages based on 12 scripts.

00:23:02.230 --> 00:23:04.940
While we look to
transfer the content

00:23:04.940 --> 00:23:08.250
from our back-end systems
onto the app on the front end,

00:23:08.250 --> 00:23:13.350
we also do certain kinds
of compacting and backing

00:23:13.350 --> 00:23:17.710
that helps us optimize the
size of the content that

00:23:17.710 --> 00:23:20.330
transfers from the
back-end infrastructure

00:23:20.330 --> 00:23:22.040
to the front end.

00:23:22.040 --> 00:23:24.040
This eventually shows up
in terms of better user

00:23:24.040 --> 00:23:25.436
performance on the app.

00:23:28.172 --> 00:23:31.070
Since we are local
language-focused,

00:23:31.070 --> 00:23:36.210
we also invested in tools that
help a nontechnical workforce

00:23:36.210 --> 00:23:40.260
in helping us build an
experience that is also

00:23:40.260 --> 00:23:42.620
localized-- not
just the content,

00:23:42.620 --> 00:23:46.350
but also the navigation and
the entire user experience.

00:23:46.350 --> 00:23:49.240
So we have tools that
allow people to contribute

00:23:49.240 --> 00:23:55.260
towards translation, people to
contribute towards corrections.

00:23:55.260 --> 00:23:59.780
And then the tools take care
of building those translations

00:23:59.780 --> 00:24:02.710
into the APKs that eventually
the users get to use.

00:24:08.690 --> 00:24:12.300
We are also very
focused on managing

00:24:12.300 --> 00:24:17.610
the performance of our apps
on low-bandwidth networks,

00:24:17.610 --> 00:24:21.090
and put a great emphasis
on testing and validating

00:24:21.090 --> 00:24:23.840
our experiences on
low-end devices.

00:24:23.840 --> 00:24:29.000
We believe that if
we focus on creating

00:24:29.000 --> 00:24:32.710
optimal performance of the
app on lower-end devices,

00:24:32.710 --> 00:24:36.040
then with better capabilities
and resources on the devices,

00:24:36.040 --> 00:24:39.710
the app's performance
will only be more optimal.

00:24:39.710 --> 00:24:41.480
Some of the things
that we've looked to do

00:24:41.480 --> 00:24:43.660
and that have helped
us include things

00:24:43.660 --> 00:24:48.660
like having different
HTTP engines for text

00:24:48.660 --> 00:24:50.840
versus images versus ads.

00:24:50.840 --> 00:24:55.760
I think Ankur just walked
through this one as well.

00:24:55.760 --> 00:24:59.850
On the images side, we
have benefited tremendously

00:24:59.850 --> 00:25:05.140
by shifting from other formats
of images to WebP-based images.

00:25:05.140 --> 00:25:07.931
And this has given us savings
from anywhere between 30%

00:25:07.931 --> 00:25:08.430
to 80%.

00:25:11.010 --> 00:25:13.320
We also do
bucketizing of images.

00:25:13.320 --> 00:25:16.680
Because on the news
side, we have experiences

00:25:16.680 --> 00:25:20.740
focusing on news aggregation,
news curation, and news

00:25:20.740 --> 00:25:22.580
personalization.

00:25:22.580 --> 00:25:25.370
Our back-end systems
create buckets of images

00:25:25.370 --> 00:25:28.460
as they acquire content
from publishing houses.

00:25:28.460 --> 00:25:34.500
And these buckets of images get
mapped depending on the device

00:25:34.500 --> 00:25:37.980
resolutions that the users own.

00:25:37.980 --> 00:25:41.740
And this has helped us in
managing an optimal experience

00:25:41.740 --> 00:25:46.810
in terms of not just the size,
but also the way in which

00:25:46.810 --> 00:25:47.900
the app renders itself.

00:25:51.300 --> 00:25:53.440
As far as the images go,
one of the other things

00:25:53.440 --> 00:25:59.050
that we have looked to do is to
manage a prioritization policy.

00:25:59.050 --> 00:26:03.570
So the images follow a
last-in, first-out order

00:26:03.570 --> 00:26:07.050
wherein the images on
the screen take priority.

00:26:07.050 --> 00:26:10.650
And therefore, the overall
experience on the user's side

00:26:10.650 --> 00:26:13.852
ends up being more responsive.

00:26:13.852 --> 00:26:15.310
So that's pretty
much what I wanted

00:26:15.310 --> 00:26:17.930
to cover in terms of
some of the things

00:26:17.930 --> 00:26:20.660
that we've attempted to do,
much along the lines of what

00:26:20.660 --> 00:26:22.760
we have heard through
the other sessions.

00:26:22.760 --> 00:26:24.400
We have benefited.

00:26:24.400 --> 00:26:27.190
We have continued to invest
in making our app better.

00:26:27.190 --> 00:26:30.570
We are launching features
like offline mode,

00:26:30.570 --> 00:26:33.670
doing better at caching,
and then allowing

00:26:33.670 --> 00:26:36.240
the user to engage with
the app and consume content

00:26:36.240 --> 00:26:38.240
in the offline mode.

00:26:38.240 --> 00:26:40.630
So thank you.

00:26:40.630 --> 00:26:44.130
We look forward to having
you try out the app

00:26:44.130 --> 00:26:47.220
and help us with your
valuable feedback.

00:26:47.220 --> 00:26:48.354
Thanks a lot.

00:26:48.354 --> 00:26:50.814
[APPLAUSE]

00:26:54.750 --> 00:26:57.660
ANKUR KOTWAL: All right,
thank you very much.

00:26:57.660 --> 00:27:00.940
I hope you can see why it's
really important for you

00:27:00.940 --> 00:27:04.160
to optimize your apps for India.

00:27:04.160 --> 00:27:08.870
With this, I'd like to now
welcome back Kunal Soni.

