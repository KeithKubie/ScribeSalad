WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:01.810
MAX WOGHIREN: Hi everyone.

00:00:01.810 --> 00:00:05.290
My name's Max and I'm an
engineer on the Chrome team.

00:00:05.290 --> 00:00:07.360
Today I'd like to show
you my favorite way

00:00:07.360 --> 00:00:10.910
to build amazing Android
and iOS applications using

00:00:10.910 --> 00:00:12.050
web technologies.

00:00:12.050 --> 00:00:15.580
You can install Chrome
apps on mobile devices.

00:00:15.580 --> 00:00:18.250
First though, a
bit of background.

00:00:18.250 --> 00:00:20.510
Many of you are aware that
you can build applications

00:00:20.510 --> 00:00:23.930
for Android and iOS that
heavily leveraged the web view

00:00:23.930 --> 00:00:26.100
component, to the extent
to your application

00:00:26.100 --> 00:00:30.840
is almost entirely built with
HTML, JavaScript, and CSS.

00:00:30.840 --> 00:00:32.860
Now to be clear, these
are apps that you still

00:00:32.860 --> 00:00:34.540
install from the app store.

00:00:34.540 --> 00:00:36.060
They have an icon
on the home screen

00:00:36.060 --> 00:00:38.260
and full access to
device capabilities,

00:00:38.260 --> 00:00:39.680
like any other app.

00:00:39.680 --> 00:00:42.000
But they're built
using web technologies.

00:00:42.000 --> 00:00:45.110
We often call these types
of applications hybrid

00:00:45.110 --> 00:00:48.320
because they are a blend of
web and native technologies.

00:00:48.320 --> 00:00:50.720
On Android, one drawback
of hybrid applications

00:00:50.720 --> 00:00:53.230
is that web views on
older versions of Android

00:00:53.230 --> 00:00:54.940
can be a bit limited.

00:00:54.940 --> 00:00:57.190
Chrome has seen a ton of
improvements on Android,

00:00:57.190 --> 00:00:58.930
especially over the past year.

00:00:58.930 --> 00:01:01.070
But running on old
web views means

00:01:01.070 --> 00:01:04.000
that you can't take advantage
of those improvements.

00:01:04.000 --> 00:01:08.000
That's where the Intel crosswalk
open source project comes in.

00:01:08.000 --> 00:01:10.680
The crosswalk project provides
an embed double Chromium web

00:01:10.680 --> 00:01:14.380
view for Android versions as
far back as Ice Cream Sandwich.

00:01:14.380 --> 00:01:16.450
Using Crosswalk,
hybrid applications

00:01:16.450 --> 00:01:19.130
can run on the latest
version of Chromium,

00:01:19.130 --> 00:01:21.400
regardless of Android versions.

00:01:21.400 --> 00:01:24.490
Similarly on iOS, the web
view has seen great updates

00:01:24.490 --> 00:01:25.690
since version 6.

00:01:25.690 --> 00:01:27.750
And now, with iOS
8, the web view

00:01:27.750 --> 00:01:31.840
will match the full capabilities
of the Safari browser.

00:01:31.840 --> 00:01:33.540
And what does this all mean?

00:01:33.540 --> 00:01:36.330
Well, it means that it's
finally possible to build

00:01:36.330 --> 00:01:39.280
hybrid apps that use
a modern web view

00:01:39.280 --> 00:01:41.900
and run on almost every
Android and iOS device released

00:01:41.900 --> 00:01:44.600
within the past three years.

00:01:44.600 --> 00:01:48.600
Now here's an HTML5 Canvas based
game called Pop Pop Win running

00:01:48.600 --> 00:01:50.240
on the crosswalk web view.

00:01:50.240 --> 00:01:53.900
Smooth as silk thanks to a
hardware accelerated canvas.

00:01:53.900 --> 00:01:55.870
This wasn't possible year ago.

00:01:55.870 --> 00:01:57.930
Nowadays, hybrid apps
can use technologies

00:01:57.930 --> 00:02:03.170
like WebGL, WebRTC, Web
Audio, accelerated 2D Canvas,

00:02:03.170 --> 00:02:05.430
and modern web tool
kits like Polymer

00:02:05.430 --> 00:02:07.870
all at maximum performance
without the need

00:02:07.870 --> 00:02:10.090
for browser polyfills.

00:02:10.090 --> 00:02:11.770
And it gets even better.

00:02:11.770 --> 00:02:15.630
Hybrid applications are not
limited to just using web APIs.

00:02:15.630 --> 00:02:17.660
Since these apps are
also native apps,

00:02:17.660 --> 00:02:22.050
you'll have full access to all
Android and iOS device APIs,

00:02:22.050 --> 00:02:25.790
such as identity, Cloud
Messaging, notifications,

00:02:25.790 --> 00:02:32.040
payments, Bluetooth, sockets,
cameras, and much more.

00:02:32.040 --> 00:02:34.290
Here's an app written
using Polymer showing off

00:02:34.290 --> 00:02:37.826
some nice animations,
running polyfill free.

00:02:37.826 --> 00:02:40.200
So it's clear that there's a
lot to like about hybrid app

00:02:40.200 --> 00:02:41.195
development.

00:02:41.195 --> 00:02:43.010
But how do you get started?

00:02:43.010 --> 00:02:45.630
Well, over a year
ago our team started

00:02:45.630 --> 00:02:48.580
contributing to the popular
open source hybrid application

00:02:48.580 --> 00:02:51.190
Toolkit Apache Cordova.

00:02:51.190 --> 00:02:52.980
We also took a look
at the amazing work

00:02:52.980 --> 00:02:56.310
being done with Chrome
packaged apps for desktop.

00:02:56.310 --> 00:03:00.070
So, in January, we released
a developer preview of a tool

00:03:00.070 --> 00:03:04.060
called CCA, which allows you to
build hybrid mobile apps using

00:03:04.060 --> 00:03:07.290
the Chrome packaged app format.

00:03:07.290 --> 00:03:09.900
Now one of the most convenient
aspects of web development

00:03:09.900 --> 00:03:13.790
is it's extremely rapid workflow
and short feedback loop.

00:03:13.790 --> 00:03:16.140
No compiling, you can
just make a change,

00:03:16.140 --> 00:03:18.060
and see it right away.

00:03:18.060 --> 00:03:21.160
Sadly, with hybrid apps,
like all native apps,

00:03:21.160 --> 00:03:23.050
you do have to wait
for compilation.

00:03:23.050 --> 00:03:25.750
So you lose that
rapid feedback loop.

00:03:25.750 --> 00:03:28.810
Our companion tool, the Chrome
app developer tool for mobile,

00:03:28.810 --> 00:03:30.260
changes everything.

00:03:30.260 --> 00:03:33.170
Let me show you how it works.

00:03:33.170 --> 00:03:35.590
I've connected to
my device via USB,

00:03:35.590 --> 00:03:37.660
but you can also use Wi-Fi.

00:03:37.660 --> 00:03:40.670
On the device I'm
running the App Dev Tool.

00:03:40.670 --> 00:03:43.680
Now I can type a command to
push my app to the device

00:03:43.680 --> 00:03:45.542
and watch for changes.

00:03:45.542 --> 00:03:47.750
You can see that the app is
transferred to the device

00:03:47.750 --> 00:03:51.250
and launched within
the App Dev tool.

00:03:51.250 --> 00:03:53.450
Now that settings button
in the top right corner,

00:03:53.450 --> 00:03:56.520
it's a little small, so let's
make it a little bigger.

00:03:56.520 --> 00:03:58.565
I can open up the CSS file.

00:03:58.565 --> 00:04:03.290
And once I do, we'll scale
it up by a factor of 2.

00:04:03.290 --> 00:04:07.310
Once that's done,
I'll save the file.

00:04:07.310 --> 00:04:09.550
The change has been detected
and pushed to the device

00:04:09.550 --> 00:04:11.736
and the app is relaunched.

00:04:11.736 --> 00:04:14.210
The settings button's bigger,
looks a little better,

00:04:14.210 --> 00:04:17.510
so we'll have our designers
make a bigger icon.

00:04:17.510 --> 00:04:20.159
Now let's go into
that settings menu.

00:04:20.159 --> 00:04:21.279
OK, it's not working.

00:04:21.279 --> 00:04:22.760
So let's look into that.

00:04:22.760 --> 00:04:24.535
I know the click
handler's in weather.js

00:04:24.535 --> 00:04:26.620
so I'll open that file.

00:04:26.620 --> 00:04:28.120
Right, I commented
that out earlier.

00:04:28.120 --> 00:04:32.810
So let's un-comment
that and save the file.

00:04:32.810 --> 00:04:34.860
Once again, that
change is detected,

00:04:34.860 --> 00:04:38.710
and hopefully once it loads--
Yep, settings now work.

00:04:38.710 --> 00:04:40.640
No recompilation.

00:04:40.640 --> 00:04:42.650
I can continue to
iterate on my mobile app

00:04:42.650 --> 00:04:44.940
smoothly and instantly.

00:04:44.940 --> 00:04:47.460
We're also working on
supporting the same edit refresh

00:04:47.460 --> 00:04:49.700
workflow on Chrome
Dev editor, which

00:04:49.700 --> 00:04:52.990
you can learn about during a
live talk here at Google I/O.

00:04:52.990 --> 00:04:54.230
So there you have it.

00:04:54.230 --> 00:04:56.870
Chrome apps a great way
to target many platforms,

00:04:56.870 --> 00:05:03.400
including Windows, Linux, Mac,
Chrome OS, Android, and iOS.

00:05:03.400 --> 00:05:05.090
With Chrome apps
on mobile devices

00:05:05.090 --> 00:05:08.050
you can leverage all the latest
and greatest hybrid application

00:05:08.050 --> 00:05:10.530
techniques, easier
than ever before.

00:05:10.530 --> 00:05:12.940
We're excited to
see what you build.

