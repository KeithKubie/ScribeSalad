WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:02.480
The Android Wear platform
is flexible enough

00:00:02.480 --> 00:00:05.220
to allow your app to display
information to the user

00:00:05.220 --> 00:00:06.880
whenever it's useful.

00:00:06.880 --> 00:00:09.330
Now, this includes sharing
fitness information, travel

00:00:09.330 --> 00:00:11.420
updates, or to-do
lists for as long

00:00:11.420 --> 00:00:13.160
as the user might need them.

00:00:13.160 --> 00:00:15.670
However, doing this
in the usual fashion

00:00:15.670 --> 00:00:17.630
means keeping the screen
on full brightness

00:00:17.630 --> 00:00:19.980
and providing constant updates.

00:00:19.980 --> 00:00:22.640
This can have a big
impact on battery life.

00:00:22.640 --> 00:00:25.910
But with Always-On, your app
can present useful information

00:00:25.910 --> 00:00:27.900
while the watch is
in ambient mode,

00:00:27.900 --> 00:00:31.890
keeping your user informed while
also saving precious power.

00:00:31.890 --> 00:00:33.570
Hi, I'm Timothy Jordan.

00:00:33.570 --> 00:00:36.270
And this is a quick introduction
to keeping your Android Wear

00:00:36.270 --> 00:00:38.820
app always on.

00:00:38.820 --> 00:00:41.650
Android Wear operates
in two primary states--

00:00:41.650 --> 00:00:43.820
interactive and ambient.

00:00:43.820 --> 00:00:45.680
When in interactive
mode, the watch

00:00:45.680 --> 00:00:47.950
can display full color
with fluid animation

00:00:47.950 --> 00:00:50.440
and can respond to
user interactivity.

00:00:50.440 --> 00:00:53.040
This is typically when the user
is giving focused attention

00:00:53.040 --> 00:00:54.370
to their watch.

00:00:54.370 --> 00:00:56.390
Ambient mode is
a low power state

00:00:56.390 --> 00:00:58.640
that uses a limited
color palette is

00:00:58.640 --> 00:01:00.520
updated less frequently.

00:01:00.520 --> 00:01:02.420
This is the typical
state for the watch

00:01:02.420 --> 00:01:05.340
while the user goes
about their day.

00:01:05.340 --> 00:01:09.090
Always-On simply allows your
app to stay in the foreground

00:01:09.090 --> 00:01:11.260
while the watch is
in ambient mode.

00:01:11.260 --> 00:01:12.520
Think of it like this.

00:01:12.520 --> 00:01:14.790
Your user is in the
grocery store and loads

00:01:14.790 --> 00:01:16.880
your app to get
their shopping list.

00:01:16.880 --> 00:01:19.800
They see they need milk and
head to the dairy aisle.

00:01:19.800 --> 00:01:23.220
After a few moments, the
watch goes into ambient mode.

00:01:23.220 --> 00:01:25.060
Previously, your app
would have closed

00:01:25.060 --> 00:01:27.150
and the watch face would
take the foreground.

00:01:27.150 --> 00:01:30.040
However, now that you've
implemented Always-On,

00:01:30.040 --> 00:01:32.580
you get to continue displaying
relevant information

00:01:32.580 --> 00:01:33.530
to the user.

00:01:33.530 --> 00:01:35.340
It's the best of both worlds.

00:01:35.340 --> 00:01:37.780
The user gets to
continue using your app,

00:01:37.780 --> 00:01:40.770
while also maintaining
battery life.

00:01:40.770 --> 00:01:43.040
Before we dive into
the API specifics,

00:01:43.040 --> 00:01:46.610
let's look at a few quick
design considerations.

00:01:46.610 --> 00:01:48.560
The update frequency
you choose can

00:01:48.560 --> 00:01:50.740
be the difference between
a great experience

00:01:50.740 --> 00:01:55.510
and losing any power saving
value Always-On has to offer.

00:01:55.510 --> 00:01:58.450
Although you can choose any
frequency between, say, 10

00:01:58.450 --> 00:02:01.310
in 60 seconds,
the default is 60.

00:02:01.310 --> 00:02:05.170
And you should only change it if
your app needs it to be useful.

00:02:05.170 --> 00:02:08.100
For example, a shopping
app is fine at the default,

00:02:08.100 --> 00:02:12.270
whereas most fitness apps will
want to update more frequently.

00:02:12.270 --> 00:02:14.540
Another important battery
life consideration

00:02:14.540 --> 00:02:18.120
is how many pixels you light
up and what color you use.

00:02:18.120 --> 00:02:20.880
More pixels means more power.

00:02:20.880 --> 00:02:23.260
You should use grayscale
colors and keep around

00:02:23.260 --> 00:02:25.690
95% of the screen black.

00:02:25.690 --> 00:02:27.520
This is especially
important to prevent

00:02:27.520 --> 00:02:31.310
burn-in for OLED screens,
but also signals to the user

00:02:31.310 --> 00:02:33.009
that they're actually
in ambient mode

00:02:33.009 --> 00:02:34.550
and they'll need to
wake up the watch

00:02:34.550 --> 00:02:36.960
before they can
interact with it.

00:02:36.960 --> 00:02:38.820
It's also important
to avoid presenting

00:02:38.820 --> 00:02:41.130
any buttons or other
interactive elements

00:02:41.130 --> 00:02:43.430
when the watch is
in ambient mode.

00:02:43.430 --> 00:02:45.690
Touching the screen will
actually bring the user back

00:02:45.690 --> 00:02:46.880
to interactive mode.

00:02:46.880 --> 00:02:49.040
It won't trigger the button.

00:02:49.040 --> 00:02:50.420
One last thing.

00:02:50.420 --> 00:02:52.880
Consider the user's privacy
when displaying data

00:02:52.880 --> 00:02:54.310
in ambient mode.

00:02:54.310 --> 00:02:57.220
For example, keeping a
messaging app on the screen

00:02:57.220 --> 00:02:59.250
could be convenient
for a user who

00:02:59.250 --> 00:03:01.300
is in an ongoing conversation.

00:03:01.300 --> 00:03:03.520
But displaying personal
messages on the screen

00:03:03.520 --> 00:03:07.400
for an extended period of
time might bother some users.

00:03:07.400 --> 00:03:09.910
Consider removing
potentially private data

00:03:09.910 --> 00:03:12.780
after a short period of
being in ambient mode,

00:03:12.780 --> 00:03:16.270
or refrain from showing
sensitive data in ambient mode

00:03:16.270 --> 00:03:18.190
at all.

00:03:18.190 --> 00:03:20.370
Adding Always-On to
your app is simply

00:03:20.370 --> 00:03:23.160
a task of implementing
a different view mode.

00:03:23.160 --> 00:03:27.320
Here are the four primary things
you've got to do to set up.

00:03:27.320 --> 00:03:31.960
You currently need API level 22
or higher, or level 20 and up

00:03:31.960 --> 00:03:35.050
if you plan to support
backwards compatibility.

00:03:35.050 --> 00:03:37.480
Make sure you have these
dependencies in your gradle

00:03:37.480 --> 00:03:38.900
build file.

00:03:38.900 --> 00:03:42.970
Add the wearable shared library
in the wearable app manifest.

00:03:42.970 --> 00:03:46.520
And add the WAKE LOCK permission
to the handheld and wearable

00:03:46.520 --> 00:03:47.900
app manifests.

00:03:47.900 --> 00:03:48.730
That's it.

00:03:48.730 --> 00:03:51.060
Now you're ready
to start coding.

00:03:51.060 --> 00:03:53.590
You'll want to create
the Always-On activity.

00:03:53.590 --> 00:03:56.610
It should extend
wearable activity.

00:03:56.610 --> 00:03:58.880
In the onCreate method
of this activity,

00:03:58.880 --> 00:04:01.810
call setAmbientEnabled.

00:04:01.810 --> 00:04:03.870
When the watch switches
to ambient mode,

00:04:03.870 --> 00:04:07.290
the system calls the
onEnterAmbient method.

00:04:07.290 --> 00:04:11.110
Override this method to update
your UI to a more basic view.

00:04:11.110 --> 00:04:12.780
Don't move anything around.

00:04:12.780 --> 00:04:14.770
You'll want to keep
the same layout.

00:04:14.770 --> 00:04:18.100
But you'll transform into
a limited color palette,

00:04:18.100 --> 00:04:21.940
stop using anti-aliasing, and
remove interactive controls

00:04:21.940 --> 00:04:24.730
such as buttons and so on.

00:04:24.730 --> 00:04:27.580
When the user taps the screen
or brings up their wrist,

00:04:27.580 --> 00:04:30.520
the activity switches from
ambient to interactive mode,

00:04:30.520 --> 00:04:34.050
and the system calls the
onExitAmbient method.

00:04:34.050 --> 00:04:38.520
Here you can switch back to your
full color interactive layout.

00:04:38.520 --> 00:04:41.230
While the activity
is in ambient mode,

00:04:41.230 --> 00:04:45.380
the system will periodically
call onUpdateAmbient.

00:04:45.380 --> 00:04:47.060
The default is
once every minute,

00:04:47.060 --> 00:04:49.470
though you can create an
alarm manager to update

00:04:49.470 --> 00:04:51.440
the screen more frequently.

00:04:51.440 --> 00:04:53.170
You might do this for
a running app that

00:04:53.170 --> 00:04:56.570
displays the elapsed
runtime or current pace.

00:04:56.570 --> 00:04:59.290
However, to realize the
battery saving benefits

00:04:59.290 --> 00:05:02.300
of ambient mode, avoid updating
the screen more than once

00:05:02.300 --> 00:05:04.600
every 10 seconds.

00:05:04.600 --> 00:05:07.450
Take a look at the documentation
for more details and sample

00:05:07.450 --> 00:05:10.870
code for building great
Always-On experiences.

00:05:10.870 --> 00:05:12.750
Remember, the user
experience you

00:05:12.750 --> 00:05:15.470
build for Wear gets to
take advantage of the power

00:05:15.470 --> 00:05:17.810
and flexibility of
the android platform,

00:05:17.810 --> 00:05:20.370
along with some special
functionality just

00:05:20.370 --> 00:05:22.320
for the wearable experience.

00:05:22.320 --> 00:05:24.690
It's easy to get started
and possible to create

00:05:24.690 --> 00:05:27.780
truly groundbreaking
UI for your users.

00:05:27.780 --> 00:05:31.190
Giving them an experience
that they want when they want,

00:05:31.190 --> 00:05:33.940
whether that's in interactive
mode or just a glance

00:05:33.940 --> 00:05:35.930
at the ambient screen.

00:05:35.930 --> 00:05:37.800
I'm Timothy Jordan,
and I look forward

00:05:37.800 --> 00:05:39.720
to seeing your app Always-On.

00:05:39.720 --> 00:05:42.170
[MUSIC PLAYING]

