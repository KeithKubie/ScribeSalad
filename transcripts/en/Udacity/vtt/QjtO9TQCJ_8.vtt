WEBVTT
Kind: captions
Language: en

00:00:00.360 --> 00:00:02.160
Sometimes you want
to allow other people

00:00:02.160 --> 00:00:05.830
to access your resources even
if they are from another origin.

00:00:05.830 --> 00:00:07.859
This is mostly relevant
for API providers who

00:00:07.860 --> 00:00:10.169
want other sites to be
able to use the service,

00:00:10.169 --> 00:00:12.929
but the same-origin
policy prevents this.

00:00:12.929 --> 00:00:15.539
Nowadays, you can easily achieve
this sharing of [? ratios ?]

00:00:15.539 --> 00:00:18.449
with a set of AGB headers
called Cross Origin Resource

00:00:18.449 --> 00:00:20.859
Sharing or CORS, for short.

00:00:20.859 --> 00:00:23.009
This is the most powerful
engineering solution

00:00:23.010 --> 00:00:24.630
to the single-origin problem.

00:00:24.629 --> 00:00:27.390
But up until a few years ago,
the browser support for CORS

00:00:27.390 --> 00:00:28.890
was rather lacking
and people had

00:00:28.890 --> 00:00:30.449
to come up with
their own techniques

00:00:30.449 --> 00:00:34.019
to work around the single-origin
policy in the meantime.

00:00:34.020 --> 00:00:35.640
One of the oldest
techniques is called

00:00:35.640 --> 00:00:38.189
JSONP, JSON with Padding.

00:00:38.189 --> 00:00:39.629
Instead of simply
returning data,

00:00:39.630 --> 00:00:42.660
JSONP returns a script
containing the data.

00:00:42.659 --> 00:00:45.539
This exploits the fact that
the scripts from other origins

00:00:45.539 --> 00:00:48.269
will execute and share
the execution environment

00:00:48.270 --> 00:00:49.830
with your own scripts.

00:00:49.829 --> 00:00:52.920
JSONP-based APIs expect to
include the function name

00:00:52.920 --> 00:00:54.600
as a query parameter.

00:00:54.600 --> 00:00:57.240
The server will return a new
script calling the function

00:00:57.240 --> 00:00:59.260
that you named.

00:00:59.259 --> 00:01:01.030
Let's look at a
fictional example.

00:01:01.030 --> 00:01:03.280
Let's say we are building
an app at yourcourselist.com

00:01:03.280 --> 00:01:06.879
that wants to list all the
university courses the user is

00:01:06.879 --> 00:01:08.030
enrolled in.

00:01:08.030 --> 00:01:10.180
The naive approach would
be to make a fetch request

00:01:10.180 --> 00:01:13.870
to API, udacity.com and use
the return data to generate

00:01:13.870 --> 00:01:15.680
a list for the user.

00:01:15.680 --> 00:01:18.400
However, this will fail
with a security exception

00:01:18.400 --> 00:01:21.430
as your host differs
from Udacity's host.

00:01:21.430 --> 00:01:24.500
How would this API look
if it supports JSONP?

00:01:24.500 --> 00:01:27.250
Add a function name to
the URL and include it

00:01:27.250 --> 00:01:28.870
with a script tag.

00:01:28.870 --> 00:01:30.460
The server will
wrap all the data

00:01:30.459 --> 00:01:33.399
it needs to return in a function
call with the same name as

00:01:33.400 --> 00:01:35.710
given via the query parameter.

00:01:35.709 --> 00:01:38.529
You need to define this function
because when the response is

00:01:38.530 --> 00:01:40.840
returned the function
call is executed

00:01:40.840 --> 00:01:43.480
and you now have access to
the data for the parameter

00:01:43.480 --> 00:01:45.420
of that function.

