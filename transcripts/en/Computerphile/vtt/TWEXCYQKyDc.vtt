WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.830
So cryptography is the idea of
encrypting a message so that

00:00:04.830 --> 00:00:07.960
although everyone knows the message has been sent
they can't actually find out what it means.

00:00:07.960 --> 00:00:13.560
Whereas in steganography we're
trying to hide the fact that we've sent a message at all.

00:00:13.560 --> 00:00:17.400
So a classic example would be if i was
writing you a letter and then I wrote in

00:00:17.400 --> 00:00:21.100
invisible ink a whole different letter
between the lines or on the other side

00:00:21.100 --> 00:00:24.580
or something like that... And only you knew that that was going to be there.

00:00:24.580 --> 00:00:27.180
So you get home and everyone else maybe looks at the letter

00:00:27.180 --> 00:00:28.960
and thinks "it's not very interesting at all".

00:00:28.960 --> 00:00:31.200
And then of course you can uncover the secret message.

00:00:31.200 --> 00:00:34.140
Today we'll talk a bit about "digital image steganography"

00:00:34.140 --> 00:00:37.700
because obviously there's a huge scope for hiding things in digital images:

00:00:37.700 --> 00:00:39.460
Images can be megabytes or more

00:00:39.460 --> 00:00:43.120
and you can hide files of megabytes or more in them.

00:00:43.120 --> 00:00:48.060
But of course as the the amount of steganography in images increase,

00:00:48.060 --> 00:00:50.780
so is the attempts to try and find it.

00:00:50.780 --> 00:00:54.540
So there's lots of statistical approaches to try to find these things as well.

00:00:55.880 --> 00:00:58.580
Perhaps the most simple form of steganography an image is

00:00:58.580 --> 00:01:00.500
"least significant bit steganography"

00:01:00.500 --> 00:01:06.220
So if we've got a bitmap of any kind (a PNG or BMP)

00:01:06.220 --> 00:01:11.300
then we can change the lowest bits to be our message

00:01:11.300 --> 00:01:14.340
and you'll have an almost imperceptible change

00:01:14.340 --> 00:01:16.640
on the actual way the image looks.

00:01:16.720 --> 00:01:21.720
It's a bit like if I change the number 800,351

00:01:21.720 --> 00:01:24.500
if I changed the 1 or the 51 on that

00:01:24.500 --> 00:01:28.180
it's not gonna have a massive effect...
- That's exactly right, the number so big that

00:01:28.180 --> 00:01:30.560
in the grand scheme of things it makes no difference.

00:01:30.570 --> 00:01:34.200
So generally speaking we'll change (in an image) in every single byte

00:01:34.200 --> 00:01:36.820
we'll change the last bit or maybe the last two bits

00:01:36.820 --> 00:01:39.180
if we really try to cram in a lot of data.

00:01:39.180 --> 00:01:43.800
Every byte is eight bits, we take the last two and change that to our message

00:01:43.800 --> 00:01:45.690
in the hope no one's going to notice.

00:01:45.690 --> 00:01:50.680
So, for every byte (that's every 8-bits) six of them are the regular image

00:01:50.680 --> 00:01:52.460
and two of them are our secret message,

00:01:52.460 --> 00:01:55.080
so a quarter of our message is now secret.

00:01:55.080 --> 00:01:58.560
So if we have a normal pixel, it's going to be 4 bytes long

00:01:58.560 --> 00:02:04.050
(so that's one byte) so for each byte
we're talking about the last two bits in that byte.

00:02:04.050 --> 00:02:09.140
So that could be a 1, we can
change it 1, change it to 0 or leave them both the same.

00:02:09.140 --> 00:02:11.520
And what we do is we read
off our message

00:02:11.520 --> 00:02:16.140
so let's say our message we're trying to
encrypt is 10 11 01

00:02:16.140 --> 00:02:19.350
Okay? We get to the first byte and we say:
well this is great,

00:02:19.350 --> 00:02:24.180
our first two bytes are already 1 and 0 so we don't need to change anything at all

00:02:24.180 --> 00:02:25.880
so that byte stays as it is.

00:02:25.880 --> 00:02:28.380
So we go to the next byte, so this will be maybe red

00:02:28.380 --> 00:02:30.060
and this might be green in our pixel.

00:02:30.060 --> 00:02:33.320
Okay? The last two bits of this byte are 0 and 1,

00:02:33.320 --> 00:02:36.360
the two we're trying to put in from our message are 1 and 1,

00:02:36.360 --> 00:02:42.180
so we change this one to a 1.

00:02:42.180 --> 00:02:46.770
So by changing that second least
significant bit from 0 to 1

00:02:46.770 --> 00:02:51.320
we've just increased this value by two
and we're talking about one channel

00:02:51.330 --> 00:02:55.500
in a huge image - changing by two levels is probably not going to be too noticeable.

00:02:55.500 --> 00:02:59.420
If we start changing the highest significant bits then that might be a problem.

00:02:59.420 --> 00:03:02.020
All right, so I've written a program to do this

00:03:02.020 --> 00:03:04.640
and I've tried to hide a rather large file

00:03:04.640 --> 00:03:07.020
inside another rather large image

00:03:07.020 --> 00:03:09.260
OK, so this is a nice picture of a tree

00:03:09.269 --> 00:03:11.740
It's about 3 (and a bit) megapixels in
size.

00:03:11.740 --> 00:03:13.620
So this is the original image of our tree

00:03:13.620 --> 00:03:15.300
and that is the steganographic image.

00:03:15.300 --> 00:03:16.980
First one, into the second one.

00:03:16.980 --> 00:03:19.220
- It's not changing!
- It is changing.

00:03:19.220 --> 00:03:20.760
When you only change the last two significant bits

00:03:20.760 --> 00:03:22.980
of an 8 bits per channel image

00:03:22.980 --> 00:03:24.700
you're not going to see a huge amount of detail.

00:03:24.700 --> 00:03:27.660
if you actually do a subtraction on the images, you can see a difference

00:03:27.660 --> 00:03:30.520
but in general it's going to be pretty imperceptible.

00:03:30.520 --> 00:03:34.080
The really good thing to do would be to never release the original source image.

00:03:34.080 --> 00:03:36.920
I can tell that something has changed because I've got the original and

00:03:36.920 --> 00:03:39.240
the new steganographic image with me.

00:03:39.240 --> 00:03:42.140
But if I just sent out an image of my dog

00:03:42.140 --> 00:03:44.700
and I never sent out the original that the camera took

00:03:44.700 --> 00:03:46.700
no one's going to know that it's been
imperceptibly changed

00:03:46.700 --> 00:03:48.220
because they haven't got a reference.

00:03:48.220 --> 00:03:50.120
If you take a public domain image and change it,

00:03:50.120 --> 00:03:52.360
it's gonna be easy to look for the original source.

00:03:52.360 --> 00:03:53.420
- [...]
- Exactly

00:03:53.420 --> 00:03:56.040
The other thing is, it'll work better on photographs where

00:03:56.040 --> 00:03:58.620
there's a lot of variation (in the intensity levels anyway).

00:03:58.620 --> 00:04:01.460
So this steganographic image

00:04:01.460 --> 00:04:03.767
has the entire works of Shakespeare buried in it

00:04:03.767 --> 00:04:05.500
which comes to (when it's zipped up) about...

00:04:05.500 --> 00:04:07.260
1.5 MB, something like that.

00:04:07.260 --> 00:04:10.360
This kind of simple steganography can be detected.

00:04:10.360 --> 00:04:12.640
This image here is an image that I've created

00:04:12.640 --> 00:04:15.300
by taking only the last two bits of each channel.

00:04:15.300 --> 00:04:19.260
I've scrapped all the other information.
If a pixel has a value of 0, its black,

00:04:19.260 --> 00:04:22.300
if it has a value of 3 it's white, and then it ranges in-between.

00:04:22.300 --> 00:04:26.480
And you can see that it's a tree there, so you can see even in the first two bits that there's a tree

00:04:26.480 --> 00:04:28.380
and the sky is particularly bland.

00:04:28.380 --> 00:04:32.520
So if you look instead at the steganographic image

00:04:32.520 --> 00:04:34.200
I've done the same filters to that

00:04:34.200 --> 00:04:36.900
and you can see but the amount of noise is increased massively

00:04:36.900 --> 00:04:40.560
because that noise is all hidden in those least 2 significant bits

00:04:40.560 --> 00:04:42.960
So you can see if you compare the bits

00:04:42.960 --> 00:04:46.000
from one image to the other, you can see a difference and so

00:04:46.000 --> 00:04:47.860
hiding a messages in the least significant bits is fairly obvious

00:04:47.860 --> 00:04:50.360
particularly if you have the original for comparison.

00:04:50.360 --> 00:04:53.360
So this is the difference between those two images

00:04:53.360 --> 00:04:55.640
and I've massively scaled up the difference

00:04:55.640 --> 00:04:57.380
I mean it looks very gray.

00:04:57.380 --> 00:05:01.640
these white pixels and black pixels are
values of plus or minus 3 intensity changes.

00:05:01.640 --> 00:05:04.340
So we're still talking very
small differences over the image

00:05:04.349 --> 00:05:06.060
and it's very evenly distributed

00:05:06.060 --> 00:05:08.480
it's all sort of spread noisily throughout the image

00:05:08.480 --> 00:05:11.100
- Yes so you can't actually tell that there's a tree there now.

00:05:11.100 --> 00:05:13.840
- No, you can't tell there's a tree
there. Which could be a clue!

00:05:13.840 --> 00:05:17.950
Perhaps the more sophisticated method of hiding something in an image would be to hide it

00:05:17.950 --> 00:05:21.340
inside the Discrete Cosine Transform Coefficients of the jpeg.

00:05:21.340 --> 00:05:23.900
So we talked a little bit about the DCT

00:05:23.900 --> 00:05:27.280
and how we convert an image into a series of cosine waves.

00:05:27.280 --> 00:05:30.340
And we have coefficients saying
how much of each of those waves we have.

00:05:30.340 --> 00:05:34.150
If you change those coefficients instead of changing the raw pixel values,

00:05:34.150 --> 00:05:37.140
you have a much less predictable effect on the image:

00:05:37.140 --> 00:05:41.980
if you change the value of one of the alternating large current coefficients

00:05:41.980 --> 00:05:45.520
from 202 to 201

00:05:45.520 --> 00:05:48.190
you're gonna have a very imperceptible difference and it's going to happen over

00:05:48.190 --> 00:05:49.990
that entire 8x8 block

00:05:49.990 --> 00:05:53.200
so you're not going to be able to see
the clear sort of steganographic noise

00:05:53.200 --> 00:05:55.040
that we just looked at on that tree.

00:05:55.040 --> 00:05:58.240
A common algorithm that we see in use is called JSteg.

00:05:58.260 --> 00:06:01.660
So I see what you did there.

00:06:01.660 --> 00:06:06.680
And what JSteg does is it goes in and if it can it will cram

00:06:06.680 --> 00:06:11.400
DCT coefficients full of as much data as it can.

00:06:11.400 --> 00:06:16.760
And what it does is: any coefficients aren't 0 or 1 (because they might change and be a little obvious)

00:06:16.760 --> 00:06:22.000
so usually be low frequency ones might change up or down

00:06:22.000 --> 00:06:25.480
and you can see again that the difference is almost imperceptible.

00:06:25.480 --> 00:06:28.240
So here's a picture of a panda and what I've done here:

00:06:28.240 --> 00:06:31.320
I couldn't cram in as much information as before so it's just much better than this one.

00:06:31.360 --> 00:06:33.880
So there is the original and a
steganographic image.

00:06:33.880 --> 00:06:36.580
And I've looked at these and I've [...] a bit of difference

00:06:36.580 --> 00:06:39.060
and you can see that again

00:06:39.060 --> 00:06:43.460
it's very, very, very slight so these
pixels again have only changed by

00:06:43.460 --> 00:06:45.520
plus or minus 3 maybe one maybe two.

00:06:45.520 --> 00:06:48.820
- So that's just zoomed in on the...
- That's zoomed in on the difference right there

00:06:48.820 --> 00:06:52.510
so you can see that, yes, the pictures have changed, but have not changed by a lot.

00:06:52.510 --> 00:06:57.420
And the other crucial thing about hiding your message in the DCT coefficients:

00:06:57.420 --> 00:07:01.440
the jpg has already completely messed up the least significant bits of the image.

00:07:01.440 --> 00:07:05.260
So if you do an image like I did where
we're looking at just the bits,

00:07:05.260 --> 00:07:09.980
we will no longer be able to see a tree, w'll just be able to see very general jpg noise

00:07:09.980 --> 00:07:12.980
and that will be exactly the same in our steganographic image,

00:07:12.980 --> 00:07:15.160
so you can't do what they call a visual attack

00:07:15.160 --> 00:07:19.000
by looking and seeing if there is a
steganographic message hidden inside,

00:07:19.000 --> 00:07:21.000
because there's no real change.

00:07:21.000 --> 00:07:25.580
So this is the original and i'm only
showing here the least two significant bits.

00:07:25.580 --> 00:07:27.980
And you can see that they form into
little blocks

00:07:27.980 --> 00:07:30.800
[...] blocks is the 8x8 DCT blocks.

00:07:30.800 --> 00:07:36.300
And this is the steganographic data so
you can see that the blocks have changed,

00:07:36.300 --> 00:07:38.840
but the distribution of noise
throughout the image hasn't changed at all,

00:07:38.840 --> 00:07:42.020
so it's very difficult to see 
there's a message buried in there

00:07:42.020 --> 00:07:45.140
And if the message took up only a certain amount of the image

00:07:45.140 --> 00:07:47.960
it's hard to see where in this image the
message is.

00:07:47.960 --> 00:07:51.620
You could be trying to read off every DCT coefficient

00:07:51.620 --> 00:07:53.700
when in fact only some of them have a message in.

00:07:53.700 --> 00:07:55.860
- If you were sending this to someone as a message...

00:07:55.860 --> 00:07:57.820
how would they get it out?

00:07:57.820 --> 00:08:01.220
- OK, so in general you would also encrypt the message

00:08:01.220 --> 00:08:04.320
because, you know, you better be safe than sorry, why not use encryption.

00:08:04.320 --> 00:08:07.800
So we encrypt our message, we put it into DCT coefficients

00:08:07.800 --> 00:08:10.680
or in the least significant bits, and
then we send it off to someone.

00:08:10.680 --> 00:08:14.400
Now, they're going to have to have known the process that we used because if they don't,

00:08:14.400 --> 00:08:17.159
they're gonna be looking in the wrong
place, so they'll know

00:08:17.160 --> 00:08:26.500
that we used J Stag or F5 or one of the other DCT steganography tools and

00:08:26.500 --> 00:08:30.360
they're basically run the program
they'll type in their decryption key

00:08:30.360 --> 00:08:33.149
which will actually remove the
encryption and then out comes the message.

00:08:33.149 --> 00:08:37.500
When JSteg was invented, it was robust a visual attack

00:08:37.500 --> 00:08:40.720
so you couldn't look at it and go: "well that clearly has been altered".

00:08:40.720 --> 00:08:45.020
So they had to try and come up with -research had tried to come up with- some other way of

00:08:45.020 --> 00:08:50.960
detecting that an image has had a JSteg message buried in it

00:08:50.960 --> 00:08:55.000
and what in fact happens is that
the coefficients change ever so slightly.

00:08:55.000 --> 00:09:00.240
Because we're applying quantization to our DCT coefficients, most of them will be set to zero.

00:09:00.240 --> 00:09:03.620
OK? And JSteg won't put anything in there, because it's too obvious;

00:09:03.620 --> 00:09:07.520
it'll only put them in a few at the top corner that are big,

00:09:07.520 --> 00:09:12.660
and you'll find that there's a subtle imbalance produced in where your coefficients are

00:09:12.660 --> 00:09:17.900
so you expect most your coefficients to be 0 and then a fair few of them to be -1 or 1

00:09:17.900 --> 00:09:21.760
and -2 and 2 to be very close to
zero.

00:09:21.760 --> 00:09:25.200
And in fact you start to get a few 3s and 4s that you weren't expecting

00:09:25.200 --> 00:09:31.360
and the distribution of these numbers goes off a little bit and you can start to predict

00:09:31.360 --> 00:09:34.360
that the JSteg file has been buried inside.

00:09:34.950 --> 00:09:39.360
What's more is that this happens in each 8x8 block, so you can actually do this test

00:09:39.360 --> 00:09:43.960
on every block and find out which blocks have messages in them, which books don't.

00:09:43.960 --> 00:09:48.380
And you might find for example that the first 60% of the file has a message in

00:09:48.380 --> 00:09:51.360
and then abruptly stops and that's a blatant clue

00:09:51.400 --> 00:09:53.220
that we've got something that isn't  taking up the whole image

00:09:53.220 --> 00:09:55.440
It's has just been written sequentially into the file.

00:09:55.440 --> 00:10:01.980
So if we take the frequency of the
number of occurrences of each

00:10:01.980 --> 00:10:05.100
DCT coefficient - so nought (0) is
going to be the most common,

00:10:05.100 --> 00:10:08.200
there may be -1 and 1, and we plot those in a graph with

00:10:08.200 --> 00:10:13.380
frequency on the Y-axis and the DCT coefficient on the X-axis

00:10:13.380 --> 00:10:16.880
we get what's called a histogram and that's simply a plot

00:10:16.880 --> 00:10:19.920
of the frequency of
occurrences of various things.

00:10:19.920 --> 00:10:24.000
So you can do a histogram on an image, but you can also do a histogram on these

00:10:24.000 --> 00:10:27.760
DCT coefficients and find out whether
they've been imperceptibly changed.

00:10:27.760 --> 00:10:33.140
Once people started routinely detecting JSteg, other people came along and

00:10:33.140 --> 00:10:36.360
decided well that's, you know, it's too
obvious, so let's try and make it be more subtle.

00:10:36.360 --> 00:10:40.520
So what they did was they
wrote DCT steganography approaches

00:10:40.520 --> 00:10:44.060
where they pay attention to the statistics of the coefficients

00:10:44.060 --> 00:10:47.400
and try to keep them balanced.
So if you put in a 1

00:10:47.400 --> 00:10:50.820
you try to take one out somewhere else so that you keep the histogram

00:10:50.820 --> 00:10:54.020
and the probabilities of these coefficients occurring at the same.

00:10:54.020 --> 00:10:58.400
And that makes it much harder to use your standard histogram analysis technique

00:10:58.400 --> 00:11:01.120
to find out whether there's anything in the image.

00:11:01.120 --> 00:11:04.220
but now what they can do with the power of machine learning is:

00:11:04.220 --> 00:11:09.080
Take let's say a thousand images, 10 of which may or may not have

00:11:09.080 --> 00:11:15.200
something buried inside and a
classifier will pretty well find out which ones they are.

00:11:15.200 --> 00:11:18.300
You just have to have a lot of positive and negative samples to throw at it.

00:11:18.300 --> 00:11:23.660
- It all sounds wonderful but you know, [???]

00:11:23.660 --> 00:11:28.590
- Well. yeah, so aside from spies I should say i'm not using these techniques.

00:11:28.590 --> 00:11:31.520
you know everyone's watching....

00:11:31.520 --> 00:11:32.800
- [???] are going through your Instagram

00:11:32.800 --> 00:11:38.720
- Exactly, so I think one of the most common uses is digital watermarking.

00:11:38.720 --> 00:11:40.860
So in normal steganography what we want to do is

00:11:40.860 --> 00:11:44.240
try and hide a message as well as
possible.

00:11:44.240 --> 00:11:46.600
And then all that really matters is the person on the other side can get it

00:11:46.600 --> 00:11:48.460
and no one else really notices.

00:11:48.460 --> 00:11:52.420
In watermarking what we want to try and do is fingerprint to file so that we know

00:11:52.420 --> 00:11:54.400
where it came for we know it's ours,

00:11:54.400 --> 00:11:58.940
maybe for copyright reasons or to
trace who's been distributing illegal material.

00:11:58.940 --> 00:12:02.830
And the key to a watermark is, instead of it being as much payload as possible

00:12:02.980 --> 00:12:06.100
so instead of trying to cram the entire
works of Shakespeare into an image

00:12:06.100 --> 00:12:10.340
what you should be doing is just a small... let's say a small logo or a small piece of text

00:12:10.340 --> 00:12:16.680
repeated over and over so that if
the image gets cropped image gets re-compressed, it's still there.

00:12:16.680 --> 00:12:19.720
You can imagine that stock photo companies might do this

00:12:19.720 --> 00:12:23.020
to try and make sure that people
aren't distributing their files elsewhere.

00:12:23.020 --> 00:12:26.360
And you can imagine that
they would stroll through the web

00:12:26.360 --> 00:12:31.280
looking for steganographic images
embedded in their particular way.

00:12:31.280 --> 00:12:38.040
Another case you might find if you were distributing pre-release DVDs of a film

00:12:38.040 --> 00:12:40.680
and then it gets leaked onto the internet...

00:12:40.680 --> 00:12:46.100
If there's steganographic data on the source buried in, you'll be able to see who it was that leaked it.

00:12:46.100 --> 00:12:49.260
- Each file could be tailored...
- Each file could be tailored with

00:12:49.260 --> 00:12:51.580
the person they originally sent that file to

00:12:51.580 --> 00:12:55.960
and then when that particular find their way onto the Internet, that person is going to be in trouble.

00:12:59.320 --> 00:13:03.220
What was vital in recreating this image is now gone and we're not going to get it back

00:13:03.220 --> 00:13:06.490
and in fact that's exactly what you do
see so if we show the actual output here

00:13:06.490 --> 00:13:11.350
we can see [...] is kind of visible but
it's been completely dwarfed by

00:13:11.350 --> 00:13:13.040
all this random noise that's been added...

