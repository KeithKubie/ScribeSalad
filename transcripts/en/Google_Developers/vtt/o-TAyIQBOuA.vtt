WEBVTT
Kind: captions
Language: en

00:00:00.249 --> 00:00:02.540
In the last few years, we've
seen a staggering increase

00:00:02.540 --> 00:00:05.300
in media consumption on the
web, while worldwide internet

00:00:05.300 --> 00:00:07.100
bandwidth has not
kept the same pace.

00:00:07.100 --> 00:00:08.859
To help with this,
my name is Vignesh,

00:00:08.859 --> 00:00:10.900
I'm here to talk about
how you can take advantage

00:00:10.900 --> 00:00:13.032
of a new video
format for the web.

00:00:13.032 --> 00:00:14.740
Video already accounts
for more than half

00:00:14.740 --> 00:00:17.360
of the peak internet bandwidth
worldwide and almost 2/3

00:00:17.360 --> 00:00:20.100
of the peak internet bandwidth
in certain parts of the world.

00:00:20.100 --> 00:00:22.510
The WebM project is a collection
of open tools and media

00:00:22.510 --> 00:00:24.970
technologies that aim to
tackle the challenges of media

00:00:24.970 --> 00:00:27.870
at internet scale and enable
open and free communication

00:00:27.870 --> 00:00:29.770
of ideas through media.

00:00:29.770 --> 00:00:33.050
The WebM project develops two
video codecs-- VP8 and VP9--

00:00:33.050 --> 00:00:35.150
the media container,
that's the WebM container,

00:00:35.150 --> 00:00:36.905
and an image format called WebP.

00:00:36.905 --> 00:00:38.710
These technologies
together power

00:00:38.710 --> 00:00:41.290
some of your favorite Google
services at a large scale,

00:00:41.290 --> 00:00:42.860
like YouTube and Hangouts.

00:00:42.860 --> 00:00:44.390
They're also widely
used on the web.

00:00:44.390 --> 00:00:47.840
For example, Netflix
and Facebook use WebP.

00:00:47.840 --> 00:00:50.600
We announced VP9, our next
generation open video codec,

00:00:50.600 --> 00:00:51.930
at I/O 2013.

00:00:51.930 --> 00:00:55.030
Videos encoded in VP9
see up to 50% improvement

00:00:55.030 --> 00:00:56.410
in conversion efficiency.

00:00:56.410 --> 00:00:59.960
Today, VP9 video playback is
supported in Chrome, Firefox,

00:00:59.960 --> 00:01:01.590
Opera, and Android.

00:01:01.590 --> 00:01:04.170
Since I/O 2013, we've
improved both the speed

00:01:04.170 --> 00:01:06.670
and the compression
efficiency of VP9.

00:01:06.670 --> 00:01:08.100
This has enabled
YouTube to choose

00:01:08.100 --> 00:01:10.640
VP9 as their next
generation video codec.

00:01:10.640 --> 00:01:13.880
If you're curious about
updates to VP9 since I/O 2013,

00:01:13.880 --> 00:01:16.137
check out our video,
"Updates to VP9."

00:01:16.137 --> 00:01:17.720
Additionally, if you
want to deep dive

00:01:17.720 --> 00:01:19.980
into the encoding techniques
used to achieve the compression

00:01:19.980 --> 00:01:21.990
performance, we highly
recommend checking out

00:01:21.990 --> 00:01:23.920
our I/O 2013 session on VP9.

00:01:23.920 --> 00:01:25.850
It's called, "The New
Open Video Codec."

00:01:25.850 --> 00:01:27.480
In this video,
I'm going to focus

00:01:27.480 --> 00:01:30.990
on how to easily encode VP9
videos using open source tools

00:01:30.990 --> 00:01:34.290
and then go on to talk about how
we can play those videos back.

00:01:34.290 --> 00:01:36.214
First, the simple
progressive encode.

00:01:36.214 --> 00:01:38.130
Let's say that you just
want to encode a video

00:01:38.130 --> 00:01:40.534
and want it to be played
back across multiple devices.

00:01:40.534 --> 00:01:41.950
In other words,
all you want to do

00:01:41.950 --> 00:01:44.670
is just host a video and play
it back using the video tag

00:01:44.670 --> 00:01:46.650
by using the hosted
URL as the source.

00:01:46.650 --> 00:01:48.772
Here is how you do it.

00:01:48.772 --> 00:01:51.230
Progressive encodes are simple
and will allow any supported

00:01:51.230 --> 00:01:53.620
VP9 player to download
and play the file.

00:01:53.620 --> 00:01:56.661
Examples include Chrome,
Firefox, and Android.

00:01:56.661 --> 00:01:58.660
Here is how you create a
progressive VP9 encode.

00:01:58.660 --> 00:02:00.840
All you need to do is
bind ffmpeg to your input

00:02:00.840 --> 00:02:03.670
file and ask it to
use the VP9 encoder.

00:02:03.670 --> 00:02:05.810
Here's how you play
back this video.

00:02:05.810 --> 00:02:07.170
That was simple, wasn't it?

00:02:07.170 --> 00:02:08.979
If you have ideas on
making it even simpler

00:02:08.979 --> 00:02:11.280
we welcome all your
thoughts at this email.

00:02:11.280 --> 00:02:13.749
OK, now if you plan to
serve video over the web,

00:02:13.749 --> 00:02:15.540
chances are that you
want to take advantage

00:02:15.540 --> 00:02:16.964
of some of the
HTML5 technologies

00:02:16.964 --> 00:02:18.880
that'll allow you to
provide a great streaming

00:02:18.880 --> 00:02:20.464
experience to your customers.

00:02:20.464 --> 00:02:21.880
This has traditionally
been tough,

00:02:21.880 --> 00:02:23.380
and an industry
standard was spawned

00:02:23.380 --> 00:02:25.020
to solve this called DASH.

00:02:25.020 --> 00:02:27.684
DASH stands for Dynamic
Adaptive Streaming over HTTP,

00:02:27.684 --> 00:02:29.600
and it allows you to
select the stream that'll

00:02:29.600 --> 00:02:31.990
provide the best perceived
quality, depending

00:02:31.990 --> 00:02:33.250
on the client's constraints.

00:02:33.250 --> 00:02:34.666
Traditionally,
this is [INAUDIBLE]

00:02:34.666 --> 00:02:36.050
with the term adaptive playback.

00:02:36.050 --> 00:02:39.230
At Google, we use adaptive
playback using DASH and HTML5

00:02:39.230 --> 00:02:41.040
technologies like
media source extensions

00:02:41.040 --> 00:02:43.730
to provide a great streaming
experience on YouTube.

00:02:43.730 --> 00:02:46.230
For example, with
VP9 and DASH, we've

00:02:46.230 --> 00:02:48.920
improved the key metrics of
streaming videos-- rebuffers.

00:02:48.920 --> 00:02:51.330
VP9 DASH videos have
improved rebuffers

00:02:51.330 --> 00:02:56.110
by 25% in developed markets and
up to 50% in emerging markets.

00:02:56.110 --> 00:02:57.790
We've heard from
multimedia developers

00:02:57.790 --> 00:03:00.805
that creating a DASH manifest
for VP9 has been challenging.

00:03:00.805 --> 00:03:02.930
I'm happy to announce that
we've worked with ffmpeg

00:03:02.930 --> 00:03:04.805
and are announcing a
set of open source tools

00:03:04.805 --> 00:03:06.360
to simplify the
encoding process.

00:03:06.360 --> 00:03:09.080
Let's now take a look at how
to encode VP9 DASH videos

00:03:09.080 --> 00:03:11.210
and generate the manifest.

00:03:11.210 --> 00:03:13.664
Encoding a VP9 video to
be compatible with DASH

00:03:13.664 --> 00:03:15.580
is very similar to doing
a progressive encode,

00:03:15.580 --> 00:03:16.740
with a few minor changes.

00:03:16.740 --> 00:03:18.720
For DASH, the
video and audio has

00:03:18.720 --> 00:03:20.984
to be encoded separately
into two different files.

00:03:20.984 --> 00:03:22.900
You also need to pass
the extra DASH parameter

00:03:22.900 --> 00:03:24.880
to ffmpeg so that it
creates WebM files which

00:03:24.880 --> 00:03:26.640
are DASH compliant.

00:03:26.640 --> 00:03:29.040
Now that you have the video
and audio files encoded,

00:03:29.040 --> 00:03:31.290
you can make use of the
WebM DASH manifest tool

00:03:31.290 --> 00:03:33.155
to generate the
DASH manifest file.

00:03:33.155 --> 00:03:36.556
The WebM DASH manifest tool is
part of the WebM Tools project.

00:03:36.556 --> 00:03:37.930
You can download
the tools we use

00:03:37.930 --> 00:03:40.595
to create DASH streams and the
manifest from the links found

00:03:40.595 --> 00:03:42.030
on this slide.

00:03:42.030 --> 00:03:44.800
OK, let's now talk about
integrating a video player

00:03:44.800 --> 00:03:47.520
to play back VP9
videos using DASH.

00:03:47.520 --> 00:03:49.520
Just to reiterate,
VP9 decoding support

00:03:49.520 --> 00:03:52.780
is already available in Chrome,
Firefox, Opera, and Android.

00:03:52.780 --> 00:03:55.960
Together, they represent over
a billion devices and browsers

00:03:55.960 --> 00:03:57.930
that can playback VP9 video.

00:03:57.930 --> 00:04:01.250
But creating a VP9 player
to play back adaptive video

00:04:01.250 --> 00:04:03.420
is a little more
difficult, although there

00:04:03.420 --> 00:04:05.390
are two players
that makes it easy.

00:04:05.390 --> 00:04:08.396
To put together they enable
adaptive VP9 playback on two

00:04:08.396 --> 00:04:11.490
of the most popular platforms--
the web and Android.

00:04:11.490 --> 00:04:13.020
First off, Android.

00:04:13.020 --> 00:04:14.700
YouTube open sources
a player called

00:04:14.700 --> 00:04:17.630
Exoplayer that supports
adaptive playback of VP9.

00:04:17.630 --> 00:04:20.444
To know more about how to use
Exoplayer to enable VP9 DASH

00:04:20.444 --> 00:04:24.200
videos in your app, see the
talk by YouTube on Exoplayer.

00:04:24.200 --> 00:04:26.520
For the web, we added
VP9 DASH support

00:04:26.520 --> 00:04:29.000
to dash.js, which is a
fantastic all-in-one media

00:04:29.000 --> 00:04:31.330
player built entirely in HTML5.

00:04:31.330 --> 00:04:33.770
For more information on how
we use dash.js to play back

00:04:33.770 --> 00:04:36.775
adaptive VP9 videos, you can
follow the link on this slide.

00:04:36.775 --> 00:04:39.800
With these tools, encoding
and decoding VP9 content

00:04:39.800 --> 00:04:41.080
has never been easier.

00:04:41.080 --> 00:04:42.800
Now it's your job to
tell a great story

00:04:42.800 --> 00:04:44.370
or ship the next
great video player.

00:04:44.370 --> 00:04:45.440
And of course,
we're here to help.

00:04:45.440 --> 00:04:47.398
Drop us a line at
webm-discuss@webmproject.org.

00:04:49.120 --> 00:04:50.780
Thank you.

