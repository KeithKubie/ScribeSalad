WEBVTT
Kind: captions
Language: en

00:00:00.570 --> 00:00:03.100
In fact, this is a really important point. The

00:00:03.100 --> 00:00:07.290
browser can't really tell that it's definitively online. It

00:00:07.290 --> 00:00:10.330
can't tell that it's definitively offline either, unless it

00:00:10.330 --> 00:00:13.670
really has no connection to another device at all.

00:00:13.670 --> 00:00:18.090
In fact there's an attribute, navigator.onLine, that supposedly tells

00:00:18.090 --> 00:00:20.370
you whether you're online or not. There's also a

00:00:20.370 --> 00:00:22.300
pair of events that fire up the body of

00:00:22.300 --> 00:00:25.880
the document when you go online or offline. However,

00:00:25.880 --> 00:00:29.060
I don't recommend relying on these, they really just tell

00:00:29.060 --> 00:00:31.270
you if there's a network connection or not, they don't

00:00:31.270 --> 00:00:33.620
tell you if that network connection is actually connected to

00:00:33.620 --> 00:00:38.130
anything. For example, my computer at home is occasionally fooled

00:00:38.130 --> 00:00:41.080
because my cable modem will go out, but my computer

00:00:41.080 --> 00:00:45.130
is still connected to the router. Sometimes, computers or applications

00:00:45.130 --> 00:00:47.560
will use pings to various servers to tell them if

00:00:47.560 --> 00:00:51.360
there's a connection to the internet. But fundamentally, as a developer

00:00:51.360 --> 00:00:54.310
the only offline status that matters to you is can

00:00:54.310 --> 00:00:57.650
you get to your own servers, and of course in the

00:00:57.650 --> 00:01:01.250
cellular radio case it can be even more complex we've all

00:01:01.250 --> 00:01:04.300
had the experience of having a one bar signal. And trying

00:01:04.300 --> 00:01:07.680
to use the network. In fact, this is a critical

00:01:07.680 --> 00:01:10.490
point to offline use, and why we say you need to

00:01:10.490 --> 00:01:14.200
build offline first. You might think the way to support offline

00:01:14.200 --> 00:01:16.740
is to use the network first and then if it fails

00:01:16.740 --> 00:01:18.990
you can rely on the cash, but that doesn't

00:01:18.990 --> 00:01:22.010
really work in the real world. Precisely because it can

00:01:22.010 --> 00:01:24.580
take a long time to determine, if you don't

00:01:24.580 --> 00:01:27.880
really have an internet connection. If you only offer cache

00:01:27.880 --> 00:01:31.570
data once a network request has difinitively failed, you

00:01:31.570 --> 00:01:35.380
leave users waiting while their device desperately tries, but fails

00:01:35.380 --> 00:01:38.850
to actually transfer data over the network. This is what

00:01:38.850 --> 00:01:42.160
we mean by offline first, not that you should code

00:01:42.160 --> 00:01:45.040
offline first, but to underscore that your app has

00:01:45.040 --> 00:01:47.980
to be able to use cache data first. And then

00:01:47.980 --> 00:01:51.460
update the cache contents when it's online, but continue

00:01:51.460 --> 00:01:53.800
to use old data from the cache when it's offline.

