WEBVTT
Kind: captions
Language: en

00:00:00.499 --> 00:00:01.040
SPEAKER: Hi.

00:00:01.040 --> 00:00:03.340
Welcome to this
series on geocasts,

00:00:03.340 --> 00:00:05.530
where you can walk your
way through what you

00:00:05.530 --> 00:00:08.438
can do with Google Maps APIs.

00:00:08.438 --> 00:00:11.784
[MUSIC PLAYING]

00:00:15.130 --> 00:00:18.190
In part one, we saw how you
could delegate your mapping

00:00:18.190 --> 00:00:20.560
work to the Google Maps app.

00:00:20.560 --> 00:00:23.710
In part two, we saw how
you could go further

00:00:23.710 --> 00:00:26.170
by incorporating Google
Maps functionality

00:00:26.170 --> 00:00:27.610
right in your app.

00:00:27.610 --> 00:00:30.150
In this video, we'll
go a bit deeper

00:00:30.150 --> 00:00:33.430
and we'll talk about
integrating maps more deeply

00:00:33.430 --> 00:00:37.060
and customizing the maps
experience for the user.

00:00:37.060 --> 00:00:39.460
First, let's take a
look at the bus tracker

00:00:39.460 --> 00:00:42.160
app that was written
for Google I/O. Now

00:00:42.160 --> 00:00:43.450
here's a screenshot of it.

00:00:43.450 --> 00:00:45.850
Consider the map here
and how it's concisely

00:00:45.850 --> 00:00:47.830
styled to the rest of the app.

00:00:47.830 --> 00:00:52.720
In this example, we're doing
it using the JS Maps API V3,

00:00:52.720 --> 00:00:58.180
but custom styling is also
available on Android and iOS.

00:00:58.180 --> 00:01:00.730
Now, often you'll want
to style your experience

00:01:00.730 --> 00:01:04.190
to match whatever else
is on your app or site.

00:01:04.190 --> 00:01:06.220
And you need to build
everything around that.

00:01:06.220 --> 00:01:09.040
So the map is only
a part of your site.

00:01:09.040 --> 00:01:10.750
So here's an example
of the styling

00:01:10.750 --> 00:01:14.290
that we used in order
to have a map fade

00:01:14.290 --> 00:01:16.840
into the background of this app.

00:01:16.840 --> 00:01:20.650
It allows the user to focus
on the important information,

00:01:20.650 --> 00:01:23.020
like the nearby bus stops.

00:01:23.020 --> 00:01:25.030
Next up, let's
look at the camera

00:01:25.030 --> 00:01:27.370
and how you can use
it on Android and iOS

00:01:27.370 --> 00:01:30.400
to really bring
your maps to life.

00:01:30.400 --> 00:01:34.000
For example, check out
downtown Los Angeles here.

00:01:34.000 --> 00:01:35.890
By tweaking the
camera settings, I'm

00:01:35.890 --> 00:01:38.410
making the experience
feel more real.

00:01:38.410 --> 00:01:40.210
3D buildings pop up.

00:01:40.210 --> 00:01:42.970
And I'm able to see this
place the same way I would

00:01:42.970 --> 00:01:44.470
if I was there.

00:01:44.470 --> 00:01:45.880
It's quite a bit
better than just

00:01:45.880 --> 00:01:48.090
looking at these top down maps.

00:01:48.090 --> 00:01:51.970
Now you can achieve this sort
of effect with very little code.

00:01:51.970 --> 00:01:54.190
And here's how we
did it on Android.

00:01:54.190 --> 00:01:57.760
We've been changing the
bearing, tilt, and zoom values

00:01:57.760 --> 00:02:00.190
to give us this perspective.

00:02:00.190 --> 00:02:03.100
But to make that camera
move around more slowly,

00:02:03.100 --> 00:02:05.830
we've been using the
animate camera method.

00:02:05.830 --> 00:02:08.979
And what it does is it looks
at your source and destination

00:02:08.979 --> 00:02:10.960
and then interpolates
a path there

00:02:10.960 --> 00:02:14.740
so that the camera smoothly
animates to that position.

00:02:14.740 --> 00:02:16.120
So we've seen it on Android.

00:02:16.120 --> 00:02:18.520
Let's look at what
it looks like on iOS.

00:02:18.520 --> 00:02:19.960
It's quite similar, right?

00:02:19.960 --> 00:02:22.270
We've seen the 3D
buildings and those maps

00:02:22.270 --> 00:02:24.640
are just coming alive.

00:02:24.640 --> 00:02:26.870
The code is also quite similar.

00:02:26.870 --> 00:02:27.940
We have a camera.

00:02:27.940 --> 00:02:30.190
And then we set some
parameters on it.

00:02:30.190 --> 00:02:32.740
We're creating a
GMS camera position,

00:02:32.740 --> 00:02:35.660
and then providing those
appropriate values.

00:02:35.660 --> 00:02:38.650
Now just something to note--
what we called tilt on Android

00:02:38.650 --> 00:02:42.910
we're calling view angle
or viewing angle on iOS.

00:02:42.910 --> 00:02:45.280
Now let's look at a
different scenario--

00:02:45.280 --> 00:02:47.500
one that involves markers.

00:02:47.500 --> 00:02:51.490
Here we have a map of
Italian restaurants in Rome.

00:02:51.490 --> 00:02:53.830
Now, Italian restaurants
in Rome means

00:02:53.830 --> 00:02:55.390
that you have a lot of markers.

00:02:55.390 --> 00:02:57.880
So it's not very easy to
see all of these markers

00:02:57.880 --> 00:02:59.950
as you're looking at the map.

00:02:59.950 --> 00:03:02.410
So that's where marker
clustering helps us.

00:03:02.410 --> 00:03:06.520
And it's available in the maps
utils open source libraries.

00:03:06.520 --> 00:03:10.150
And what we can do is take
these markers and group them

00:03:10.150 --> 00:03:11.500
into clusters.

00:03:11.500 --> 00:03:14.110
And it provides a
better user experience,

00:03:14.110 --> 00:03:17.420
and also provides
better performance.

00:03:17.420 --> 00:03:20.860
So implementing it
actually ends up often

00:03:20.860 --> 00:03:23.749
with less code than if you were
managing the markers yourself.

00:03:23.749 --> 00:03:25.540
So let's have a look
at the code and you'll

00:03:25.540 --> 00:03:28.690
see that it's a four
step process on Android.

00:03:28.690 --> 00:03:31.600
What we're doing is we're
adding the utils library

00:03:31.600 --> 00:03:33.790
to your gradle configuration.

00:03:33.790 --> 00:03:37.060
Then we need to go and
implement a cluster item

00:03:37.060 --> 00:03:40.160
interface on our data classes.

00:03:40.160 --> 00:03:42.880
In our example, this
would be the object that

00:03:42.880 --> 00:03:45.790
stores restaurant information.

00:03:45.790 --> 00:03:48.910
What we'll then do is
instantiate a ClusterManager,

00:03:48.910 --> 00:03:51.010
and then register the
camera and marker click

00:03:51.010 --> 00:03:53.920
listeners to that manager.

00:03:53.920 --> 00:03:56.710
Then all we have to do is
go and add our data items

00:03:56.710 --> 00:03:58.390
to the ClusterManager.

00:03:58.390 --> 00:03:59.950
Now these are those
same data items

00:03:59.950 --> 00:04:02.380
we talked about that hold
the restaurant information,

00:04:02.380 --> 00:04:05.350
and have implemented that
cluster item interface.

00:04:05.350 --> 00:04:06.190
That's it.

00:04:06.190 --> 00:04:08.950
You can then remove your
marker management code,

00:04:08.950 --> 00:04:12.100
since this library
will handle it for you.

00:04:12.100 --> 00:04:15.160
Now in this example, we've
looked at Android code,

00:04:15.160 --> 00:04:18.370
but we also have a utils
library on iOS that

00:04:18.370 --> 00:04:19.930
includes marker clustering.

00:04:19.930 --> 00:04:22.630
And you can go
grab it right here.

00:04:22.630 --> 00:04:24.430
So we've looked at
marker clustering,

00:04:24.430 --> 00:04:27.550
but I want to show you another
great visualization-- heat

00:04:27.550 --> 00:04:28.910
maps.

00:04:28.910 --> 00:04:33.130
So let's look at that heat map
of Rome with those restaurants.

00:04:33.130 --> 00:04:36.610
And you can immediately
see that those restaurants,

00:04:36.610 --> 00:04:40.300
those locations of restaurants,
are now grouped by colors.

00:04:40.300 --> 00:04:42.130
You can see where
the busy areas, where

00:04:42.130 --> 00:04:44.650
are the hot spots,
quite literally,

00:04:44.650 --> 00:04:47.050
and interesting areas
for us to visit.

00:04:47.050 --> 00:04:51.670
So as I zoom in and out, I
get a really nice experience.

00:04:51.670 --> 00:04:55.030
In terms of the code, it's very
similar to what we just saw.

00:04:55.030 --> 00:04:57.160
And it's pretty simple.

00:04:57.160 --> 00:04:59.360
This time we have a
three step process.

00:04:59.360 --> 00:05:02.020
We add our utils library
to the gradle config.

00:05:02.020 --> 00:05:05.440
We then go and instantiate
a HeatMapTileProvider

00:05:05.440 --> 00:05:07.340
and pass in those data items.

00:05:07.340 --> 00:05:10.480
And then we just go ahead
and create the tile overlay.

00:05:10.480 --> 00:05:11.890
That's it.

00:05:11.890 --> 00:05:14.170
So now you've seen
how you can delegate

00:05:14.170 --> 00:05:16.150
your work to Google Maps.

00:05:16.150 --> 00:05:18.280
You've seen how you can
incorporate Google Maps

00:05:18.280 --> 00:05:19.990
functionality into your app.

00:05:19.990 --> 00:05:22.780
And in this episode,
you've seen technologies

00:05:22.780 --> 00:05:27.160
for integrating maps and
maps data in your apps.

00:05:27.160 --> 00:05:28.960
In the next video,
we're going to go

00:05:28.960 --> 00:05:32.050
to the deepest point--
taking raw data from Google

00:05:32.050 --> 00:05:34.750
and using it in your apps.

00:05:34.750 --> 00:05:36.010
Thanks for watching.

00:05:36.010 --> 00:05:38.460
[MUSIC PLAYING]

