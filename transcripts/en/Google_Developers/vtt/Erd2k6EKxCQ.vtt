WEBVTT
Kind: captions
Language: en

00:00:10.130 --> 00:00:11.130
&gt;&gt;&gt; Ladies and gentlemen, good morning.

00:00:11.130 --> 00:00:12.130
Would you please welcome Xavier Ducrohet and
Tor Norbye.

00:00:12.130 --> 00:00:13.130
&gt;&gt;Xavier Ducrohet: Good morning.

00:00:13.130 --> 00:00:14.130
I'm Xavier Ducrohet.

00:00:14.130 --> 00:00:15.130
&gt;&gt;Tor Norbye: And I'm Tor Norbye.

00:00:15.130 --> 00:00:16.130
In this talk, we will show you what we have
been working on in the tools team over the

00:00:16.130 --> 00:00:17.130
last year and give you sneak peaks coming
up.

00:00:17.130 --> 00:00:20.910
&gt;&gt;Xavier Ducrohet: Let's start with everyone's
favorite tool, the emulator.

00:00:20.910 --> 00:00:27.649
We are well aware that there's been a lot
of problems, especially on the emulator running

00:00:27.649 --> 00:00:31.910
larger configuration like tablet sizes, and
we have been working on fixing that.

00:00:31.910 --> 00:00:36.899
Last year at I/O, I talked about a prototype
of hardware GL, and I'm very happy that finally

00:00:36.899 --> 00:00:39.410
we released that a few months ago.

00:00:39.410 --> 00:00:44.530
If you are running ICS and above and if you
are unable to (indiscernible) support the

00:00:44.530 --> 00:00:50.090
AVD location dialogue, you will be able to
use your computer GPU to do the rendering.

00:00:50.090 --> 00:00:56.300
The problem is that software rendering using
code that is being interpreted into X86 was

00:00:56.300 --> 00:00:58.980
not fast enough for higher resolution.

00:00:58.980 --> 00:01:02.930
So that helps for general interactivity in
the emulator, but that doesn't help if you

00:01:02.930 --> 00:01:05.370
have an application that does a lot of computation.

00:01:05.370 --> 00:01:14.450
To help with that, Intel contributed into
the OSP project support for virtualization

00:01:14.450 --> 00:01:15.920
mode.

00:01:15.920 --> 00:01:20.700
And so we already had that for Linux, but
they added support for Windows and for Mac.

00:01:20.700 --> 00:01:26.990
They have released Jelly Bean system images
and ICS system images -- not Jelly Bean, Gingerbread

00:01:26.990 --> 00:01:27.990
and ICS.

00:01:27.990 --> 00:01:30.859
We are working for them for the Jelly Bean.

00:01:30.859 --> 00:01:34.630
If you are using that, you will see the emulator
is much faster, and I'm going to give you

00:01:34.630 --> 00:01:38.700
a quick demonstration in a little bit.

00:01:38.700 --> 00:01:42.090
First, let's talk about hardware emulation.

00:01:42.090 --> 00:01:45.920
We have had different strategies about supporting
hardware.

00:01:45.920 --> 00:01:49.860
So since, basically, 1.0, we added telephony
support.

00:01:49.860 --> 00:01:54.889
So to support telephony in the emulator, we
use another tool, DDMS, on the emulator and

00:01:54.889 --> 00:01:59.990
allow you to allow to initiate code to send
code into the emulator.

00:01:59.990 --> 00:02:03.709
About a year ago, we started really using,
actually, hardware to emulate hardware into

00:02:03.709 --> 00:02:04.929
the emulator.

00:02:04.929 --> 00:02:06.590
We started with webcam support.

00:02:06.590 --> 00:02:13.420
If you have USB webcam or webcam directly
into your lap, you can input a video stream

00:02:13.420 --> 00:02:14.870
into the emulator.

00:02:14.870 --> 00:02:20.210
If you used the camera application, you would
see the output of your webcam.

00:02:20.210 --> 00:02:26.250
Starting more recently, we decided that those
devices have a lot the hardware that you don't

00:02:26.250 --> 00:02:27.950
find anywhere else.

00:02:27.950 --> 00:02:35.200
Sensors, accelerometer, compass, gyroscopes,
multi-touch screens, you don't have that on

00:02:35.200 --> 00:02:36.990
your random computer.

00:02:36.990 --> 00:02:38.470
So we decided to start using that.

00:02:38.470 --> 00:02:43.890
And so using a device tethered through USB
cable, we are starting to send some of that

00:02:43.890 --> 00:02:46.150
information back into the emulator.

00:02:46.150 --> 00:02:50.390
Let's see what that looks like.

00:02:50.390 --> 00:02:52.690
So I have an emulator here.

00:02:52.690 --> 00:02:56.560
This is running a regular 10-inch tablet screen,
1280 by 800.

00:02:56.560 --> 00:03:02.390
It doesn't look great because it's a little
bit scaled so it fits on screen.

00:03:02.390 --> 00:03:07.400
This is running ICS with GPU on and with X86.

00:03:07.400 --> 00:03:13.730
The -- as you can see, it's very smooth.

00:03:13.730 --> 00:03:27.430
If we go into all apps, there we go, it's
-- really follows very well your interactivity.

00:03:27.430 --> 00:03:34.960
So I encourage you to try it.

00:03:34.960 --> 00:03:37.770
It works very well.

00:03:37.770 --> 00:03:40.090
So let's look at touch input.

00:03:40.090 --> 00:03:44.670
As you can see, when I click somewhere, there's
a small white dot that you touch feedback.

00:03:44.670 --> 00:03:49.760
And you can enable that in the settings if
you go into developer options.

00:03:49.760 --> 00:03:54.820
So I have a phone here running a small application
that's packaged with the SDK so you can compile

00:03:54.820 --> 00:03:58.840
it on application and then it can start swiping.

00:03:58.840 --> 00:04:02.390
I'm not touching my laptop; I'm just touching
my phone.

00:04:02.390 --> 00:04:09.180
[ Applause ]
&gt;&gt;Xavier Ducrohet: So doing that, with just

00:04:09.180 --> 00:04:14.300
one touch, it's pretty easy, but -- yes, that's
okay.

00:04:14.300 --> 00:04:21.260
I will do it that way.

00:04:21.260 --> 00:04:22.550
It may rotate while I'm doing it.

00:04:22.550 --> 00:04:24.420
We work to go disable that.

00:04:24.420 --> 00:04:29.509
So that's the point your location in dev tools.

00:04:29.509 --> 00:04:35.460
I can do two touches, three touches, four
touches, five touches, as many, really, as

00:04:35.460 --> 00:04:36.720
your device will support.

00:04:36.720 --> 00:04:39.320
A device like that will do ten touches.

00:04:39.320 --> 00:04:41.880
I will try to put all of my fingers.

00:04:41.880 --> 00:04:44.360
&gt;&gt;Tor Norbye: Good if you are developing a
ninja game.

00:04:44.360 --> 00:04:51.520
&gt;&gt;Xavier Ducrohet: That would be perfect.

00:04:51.520 --> 00:04:52.680
That's the emulator.

00:04:52.680 --> 00:04:58.330
Our goal here is to let you try on any type
of form factor that you don't necessarily

00:04:58.330 --> 00:05:02.430
own, and we don't expect you to buy every
device out there.

00:05:02.430 --> 00:05:05.860
We really want you to be able to try your
application on the emulator no matter what

00:05:05.860 --> 00:05:07.940
type of hardware your application is using.

00:05:07.940 --> 00:05:12.320
We will work to improve even more the hardware
support.

00:05:12.320 --> 00:05:16.870
So that means we want you to be able to create
emulators to really emulate any kind of devices.

00:05:16.870 --> 00:05:22.830
To help you with that, we will show you something
I just started working on.

00:05:22.830 --> 00:05:26.030
I have -- I forgot to clear that.

00:05:26.030 --> 00:05:28.780
So this is the AVD creation manager.

00:05:28.780 --> 00:05:34.950
AVD stands Android Virtual Device, really
a configuration of emulator to simulate a

00:05:34.950 --> 00:05:35.950
particular device.

00:05:35.950 --> 00:05:40.840
So, normally, you would enter an APL.

00:05:40.840 --> 00:05:46.320
And we are going to -- we just added that
particular menu here, where you have a bunch

00:05:46.320 --> 00:05:47.660
of devices.

00:05:47.660 --> 00:05:52.760
And we're going to work with OEMs to make
sure that this is populated with as many devices

00:05:52.760 --> 00:05:53.760
as we can.

00:05:53.760 --> 00:05:58.480
So here, let's say you want to create an emulator
that emulates exactly Nexus 7 -- not that

00:05:58.480 --> 00:06:01.630
any of you need that anymore.

00:06:01.630 --> 00:06:05.330
So you click here and here, all the properties,
all the hardware is set up for you.

00:06:05.330 --> 00:06:10.850
This is going to be exactly a Nexus 7, the
proper density, the proper resolution.

00:06:10.850 --> 00:06:15.240
Like the resolution is entered here, and it
will be done for you.

00:06:15.240 --> 00:06:21.260
[ Applause ]
&gt;&gt;Xavier Ducrohet: So I'm going to give you

00:06:21.260 --> 00:06:22.260
the name.

00:06:22.260 --> 00:06:27.090
Here I just created -- I started, but I'm
not going to do it.

00:06:27.090 --> 00:06:29.990
So I have a second one since I already had
a first one.

00:06:29.990 --> 00:06:35.050
One thing that we added was, you may have
noticed those generics devices, and those

00:06:35.050 --> 00:06:40.240
were presented before in the emulator, so
since we are doing that, we figured that we

00:06:40.240 --> 00:06:45.000
may as well also show you in the new editor.

00:06:45.000 --> 00:06:50.620
When you choose a device here, we just show
you your AVD here directly.

00:06:50.620 --> 00:06:55.270
When I chose the AVD I just created, since
we know it was created to match a Nexus 7,

00:06:55.270 --> 00:06:58.610
then we just render it as if it was on a Nexus
7.

00:06:58.610 --> 00:07:00.000
All right.

00:07:00.000 --> 00:07:01.850
So that's the new editor, or part of it.

00:07:01.850 --> 00:07:04.729
Why don't you tell us a bit more about that
editor.

00:07:04.729 --> 00:07:06.780
&gt;&gt;Tor Norbye: Okay.

00:07:06.780 --> 00:07:10.370
I'm going to defer the editor and start with
the basic editing we have improved over the

00:07:10.370 --> 00:07:11.370
last year.

00:07:11.370 --> 00:07:15.790
Hopefully, you all know, in Java files, in
Eclipse, you can press control O to open up

00:07:15.790 --> 00:07:19.240
this quick outline and do quick filtering
to navigate to a method.

00:07:19.240 --> 00:07:21.440
We made that work better in XML files now.

00:07:21.440 --> 00:07:27.970
So if I'm, for example, in this layout file
and I'm looking for button 5, I can type B

00:07:27.970 --> 00:07:29.900
log chart 5.

00:07:29.900 --> 00:07:33.300
[ Applause ]
&gt;&gt;Tor Norbye: You can also use control shift

00:07:33.300 --> 00:07:35.780
P to jump between matching tags.

00:07:35.780 --> 00:07:39.860
We enhanced the code completion to work with
custom views.

00:07:39.860 --> 00:07:41.500
This is particularly useful.

00:07:41.500 --> 00:07:43.620
Let me show it.

00:07:43.620 --> 00:07:47.570
Control space, you can see here we pick up
on the app name space.

00:07:47.570 --> 00:07:51.460
We even find the documentation for your custom
style and show it to you.

00:07:51.460 --> 00:07:53.949
Hopefully make that easier.

00:07:53.949 --> 00:07:56.800
My favorite part, though, in the XML is the
new formatter.

00:07:56.800 --> 00:08:01.660
If you look at this file here, this is what
you used to get when you reformatted the files

00:08:01.660 --> 00:08:02.920
out of the box.

00:08:02.920 --> 00:08:07.160
If I do this now, you can see I get a much
clearer layout.

00:08:07.160 --> 00:08:12.449
[ Applause ]
&gt;&gt;Tor Norbye: And this is not just adjusting

00:08:12.449 --> 00:08:13.449
indentation.

00:08:13.449 --> 00:08:15.090
It's also, for example, reordering attributes.

00:08:15.090 --> 00:08:21.240
So I put the height before the width and maybe
the ID down here, maybe mess up the indentation

00:08:21.240 --> 00:08:25.390
a bit, too, you can see it puts things back
in the right order.

00:08:25.390 --> 00:08:29.240
[ Applause ]
&gt;&gt;Tor Norbye: Not that Android cared what

00:08:29.240 --> 00:08:30.240
the order is.

00:08:30.240 --> 00:08:32.550
This is the style we recommend and we follow
in all of our tutorials.

00:08:32.550 --> 00:08:36.899
And the other thing you see here, for layouts,
we prefer to have a blank line for the elements

00:08:36.899 --> 00:08:38.550
and one attribute per line.

00:08:38.550 --> 00:08:42.360
You can use your editors and set it up to
format the same way.

00:08:42.360 --> 00:08:46.720
What's unique about this, if I switch to,
for example, a strings file, like this one,

00:08:46.720 --> 00:08:50.140
and I press control shift F here, it does
something totally different.

00:08:50.140 --> 00:08:54.570
Here we format the way string files should
be formatted, one string per line, unless

00:08:54.570 --> 00:08:55.900
you are working with a Perl.

00:08:55.900 --> 00:08:59.800
Of course, if I go to manifest file, there
are other heuristics which apply.

00:08:59.800 --> 00:09:05.370
Hey, let's put the permissions in one block,
and let's treat the application element as

00:09:05.370 --> 00:09:07.140
more like a layout tag.

00:09:07.140 --> 00:09:09.560
So I don't type indentation anymore.

00:09:09.560 --> 00:09:14.370
Instead of pressing the tab key, no matter
where I am, whatever I've copied or anything

00:09:14.370 --> 00:09:17.960
like that, I press control shift F and it
puts things back in order.

00:09:17.960 --> 00:09:23.020
The next thing I want to show you is the rebound
wizards.

00:09:23.020 --> 00:09:27.740
So if I open up the new wizard, you can see
that we have a bunch of new items in this

00:09:27.740 --> 00:09:28.740
list.

00:09:28.740 --> 00:09:29.740
And the list is going to get longer, by the
way.

00:09:29.740 --> 00:09:32.270
We mostly worked at infrastructure at this
point.

00:09:32.270 --> 00:09:34.550
This is what the new project wizard looks
like now.

00:09:34.550 --> 00:09:37.640
It's completely different, because it's been
rewritten.

00:09:37.640 --> 00:09:40.290
And let's type in an application name.

00:09:40.290 --> 00:09:42.910
Google I/O demo.

00:09:42.910 --> 00:09:47.260
So notice that as I'm moving the focus between
these text fields.

00:09:47.260 --> 00:09:48.760
On the bottom here, we have explanation.

00:09:48.760 --> 00:09:51.810
For example, when we get to the package name,
please choose carefully.

00:09:51.810 --> 00:09:54.580
You will have to stick with this package name
forever.

00:09:54.580 --> 00:09:58.830
Likewise, we explain the difference between
the build target and the MSDK version.

00:09:58.830 --> 00:10:01.050
We used to ask what number you want.

00:10:01.050 --> 00:10:05.820
Now we are showing you code names and version
numbers and everything.

00:10:05.820 --> 00:10:08.360
You also have the option of creating a custom
icon.

00:10:08.360 --> 00:10:10.570
And that happens on the second page.

00:10:10.570 --> 00:10:13.040
So this is the assets studio.

00:10:13.040 --> 00:10:17.200
[ Applause ]
&gt;&gt;Tor Norbye: So here we can choose between

00:10:17.200 --> 00:10:18.200
some clip art.

00:10:18.200 --> 00:10:19.870
You can also start with random text.

00:10:19.870 --> 00:10:22.730
So I can choose I/O. Maybe pick a different
shape.

00:10:22.730 --> 00:10:24.230
Add some padding.

00:10:24.230 --> 00:10:28.710
More likely, though, you will have some project
or company logo you want to use.

00:10:28.710 --> 00:10:31.230
So you can go in and fetch that image.

00:10:31.230 --> 00:10:34.870
So I'm going to put an I/O logo here and put
it in.

00:10:34.870 --> 00:10:40.670
And as you can see, it's now going to create
different density versions of this icon, also

00:10:40.670 --> 00:10:44.050
gives sort of a standard shading treatment.

00:10:44.050 --> 00:10:49.450
[ Applause ]
&gt;&gt;Tor Norbye: So this is even more useful

00:10:49.450 --> 00:10:52.670
when you're dealing with things like notification
icons and action bar icons.

00:10:52.670 --> 00:10:57.170
And we're going to show that in a bit more
detail in the layout talk tomorrow.

00:10:57.170 --> 00:11:00.320
So on a third page, I get to choose what to
put into the project.

00:11:00.320 --> 00:11:02.770
We no longer create this empty project.

00:11:02.770 --> 00:11:08.110
I can choose between a master detail flow
skeleton, which will create a tablet version

00:11:08.110 --> 00:11:15.250
with details on the left -- right and a chooser
thing on the left, or I can create among a

00:11:15.250 --> 00:11:17.200
set of blank activities.

00:11:17.200 --> 00:11:24.290
So, by default, I can get tabs, I can get
swiping, I can get swiping plus title script.

00:11:24.290 --> 00:11:28.240
[ Applause ]
&gt;&gt;Tor Norbye: Drop-down.

00:11:28.240 --> 00:11:30.920
Sadly, right now, this requires Ice Cream
Sandwich.

00:11:30.920 --> 00:11:36.200
But we are really hard at work at back porting
all this, and so ASAP, hopefully, this will

00:11:36.200 --> 00:11:44.709
also generate compatibility codes.

00:11:44.709 --> 00:11:46.870
Default layout, you see there it is.

00:11:46.870 --> 00:11:50.470
Let me show you what happens when I add into
an existing project.

00:11:50.470 --> 00:11:53.090
So I invoke the new wizard again.

00:11:53.090 --> 00:11:59.649
Choose add activity, and I'm going to have
to choose a unique name.

00:11:59.649 --> 00:12:02.649
When I hit "next" now, I get this preview.

00:12:02.649 --> 00:12:03.690
Let me maximize it.

00:12:03.690 --> 00:12:06.839
So you can see that what we are doing here
is, we are not just creating a new activity

00:12:06.839 --> 00:12:09.899
class, we are adding registration into the
manifest.

00:12:09.899 --> 00:12:12.810
We are adding resources into the string file.

00:12:12.810 --> 00:12:16.870
[ Applause ]
&gt;&gt;Tor Norbye: And so forth.

00:12:16.870 --> 00:12:19.680
So let's talk about the layout editor a bit.

00:12:19.680 --> 00:12:23.610
So when you're editing layouts, you don't
really need to be spending your precious screen

00:12:23.610 --> 00:12:26.610
real estate on the package explorer, output
window, and so forth.

00:12:26.610 --> 00:12:31.050
Luckily, Eclipse supports the concept of maximizing
the editor, Control M, which is really useful

00:12:31.050 --> 00:12:35.649
when you are editing Java code, but it's now
useful in the editor as when.

00:12:35.649 --> 00:12:41.110
Press Control M. Not only do we get rid of
this other stuff, we also include a structure

00:12:41.110 --> 00:12:43.650
view and property sheet inside the layout
editor now.

00:12:43.650 --> 00:12:45.240
These are configurable.

00:12:45.240 --> 00:12:48.620
I can, for example, drag the structure to
the bottom here.

00:12:48.620 --> 00:12:52.730
This is useful if I'm trying to do a landscape
orientation like this.

00:12:52.730 --> 00:12:56.279
I can also give myself more space by minimizing,
for example, the pallette.

00:12:56.279 --> 00:13:00.779
Now that it sits over there, I can hover over
it, I can drag out the widget I need.

00:13:00.779 --> 00:13:04.970
When I do that, it goes away and it gives
me the space I need to see my layout in.

00:13:04.970 --> 00:13:11.810
The most important change is the property
sheet which has been completely revamped.

00:13:11.810 --> 00:13:17.040
So you can see if I select something here,
first of all, if I hover, it will show me

00:13:17.040 --> 00:13:19.649
the documentation for the property that I'm
about to edit.

00:13:19.649 --> 00:13:23.760
If it's a Boolean property, I can click it
to cycle through the values true/false and

00:13:23.760 --> 00:13:24.760
not set.

00:13:24.760 --> 00:13:28.670
When you look at the properties here, you
can see where you might not be able to see

00:13:28.670 --> 00:13:30.670
because this font is small.

00:13:30.670 --> 00:13:34.590
Trust me, there's blue colors for things that
you have set.

00:13:34.590 --> 00:13:38.610
And we're also showing inherited attributes
when possible.

00:13:38.610 --> 00:13:40.790
So, for example -- it's okay.

00:13:40.790 --> 00:13:42.730
You can clap.

00:13:42.730 --> 00:13:47.019
You can see here the inherited color for text
link is blue.

00:13:47.019 --> 00:13:50.970
And the way most property sheet implementations
work is they call the getter and ask what

00:13:50.970 --> 00:13:52.610
is your color and they can display it.

00:13:52.610 --> 00:13:56.170
In Android, we can't do that, because many
XML attributes don't have a corresponding

00:13:56.170 --> 00:13:57.170
get every.

00:13:57.170 --> 00:14:01.160
What we have done, what Java has done, we
intercept the value lookup.

00:14:01.160 --> 00:14:03.180
That gives us something cool.

00:14:03.180 --> 00:14:07.110
Which is, look, we can show you that this
is not just blue but this is actually the

00:14:07.110 --> 00:14:10.240
resource Android color Holo blue lite.

00:14:10.240 --> 00:14:19.480
Likewise, we 
are showing these attributes in groups, so

00:14:19.480 --> 00:14:24.830
you can see nesting here, text view attributes
are all together, and we are showing the important

00:14:24.830 --> 00:14:26.300
properties in bold.

00:14:26.300 --> 00:14:29.260
That's useful if you switch to an alphabetical
order.

00:14:29.260 --> 00:14:33.720
If you are looking for a particular property
by name, you can switch that order.

00:14:33.720 --> 00:14:36.000
And we're also hiding a lot of more attributes.

00:14:36.000 --> 00:14:42.190
We ran statistics on code bases and found
there are attributes that are never set.

00:14:42.190 --> 00:14:44.540
You can expose them if you want.

00:14:44.540 --> 00:14:48.350
There are great italics properties here.

00:14:48.350 --> 00:14:53.490
If I choose this edit text, you can see something
interesting.

00:14:53.490 --> 00:14:59.170
We also preview drawables, so in edit text
has an actual attribute to set the icon that's

00:14:59.170 --> 00:15:02.460
shown when you are selecting and it's right
there, you can see we are previewing it for

00:15:02.460 --> 00:15:03.460
you.

00:15:03.460 --> 00:15:07.310
Let's set some actual properties with this
property sheet.

00:15:07.310 --> 00:15:11.170
So let me switch back from alphabetical order.

00:15:11.170 --> 00:15:12.190
All right.

00:15:12.190 --> 00:15:17.950
So hello Google I/O. And I'm going to set
the color.

00:15:17.950 --> 00:15:21.410
Notice that we do complete completion on resources
which is kind of handy.

00:15:21.410 --> 00:15:29.100
I'm going to set the size to 36, not bips,
but SPs.

00:15:29.100 --> 00:15:31.520
And you can invoke customizers as well.

00:15:31.520 --> 00:15:34.820
One other cool thing we have added is we showed
the resolve values.

00:15:34.820 --> 00:15:38.870
If you look where I'm pointing at here, as
I'm selecting different resources, you can

00:15:38.870 --> 00:15:41.290
see what the current resolve value of this
attribute is.

00:15:41.290 --> 00:15:45.490
This works not just for dimensions but strings
as well.

00:15:45.490 --> 00:15:47.470
That's a property sheet.

00:15:47.470 --> 00:15:51.370
You can see that the -- we have these weird
guidelines in the layout editor here that's

00:15:51.370 --> 00:15:53.300
because this is a relative layout.

00:15:53.300 --> 00:15:55.790
Last year at I/O we previewed this layout
support.

00:15:55.790 --> 00:16:00.839
Now it's basically done, and so if I'm dragging
in here, you can see we have been enhanced

00:16:00.839 --> 00:16:02.510
it a bit more.

00:16:02.510 --> 00:16:05.110
In addition to showing guidelines, we have
this tool tip which is trying to stay out

00:16:05.110 --> 00:16:06.680
of the way for the constraints being shown.

00:16:06.680 --> 00:16:10.820
But it shows me what it is it is displaying.

00:16:10.820 --> 00:16:15.000
So this year we have a preview of another
layout that came out in Ice Cream Sandwich,

00:16:15.000 --> 00:16:16.519
the grid layout.

00:16:16.519 --> 00:16:22.350
We are trying to go for the same tools experience
that you have with relative layout.

00:16:22.350 --> 00:16:24.649
As you are dragging, you get these guidelines.

00:16:24.649 --> 00:16:26.850
We are trying to go one step further.

00:16:26.850 --> 00:16:28.530
You can see these red lines.

00:16:28.530 --> 00:16:36.660
This is something that appears in a lot of
the internal UI specs at Google.

00:16:36.660 --> 00:16:39.370
This is a feature that is not done, and you
but we are working on it and bring it back

00:16:39.370 --> 00:16:45.459
to the other layouts so you get the recommend
UI look for these things.

00:16:45.459 --> 00:16:50.170
Let me show you fragment support.

00:16:50.170 --> 00:16:56.850
I brought up the wrong layout.

00:16:56.850 --> 00:17:00.149
So this is the Google I/O app, it is using
fragments.

00:17:00.149 --> 00:17:05.459
The key thing about this layout is that this
is only organizing how these fragments will

00:17:05.459 --> 00:17:06.799
appear.

00:17:06.799 --> 00:17:08.280
It's relative to each other.

00:17:08.280 --> 00:17:09.821
It's not controlling what's inside the fragment
at all.

00:17:09.821 --> 00:17:13.179
That obviously is controlled by Java code
at run time.

00:17:13.179 --> 00:17:17.770
So it could be different layouts showing up
depending on the context.

00:17:17.770 --> 00:17:21.370
We give you a way at design time pick which
one it is to work with.

00:17:21.370 --> 00:17:25.130
We basically look at the class, figure out
what layouts are you referring to and we offer

00:17:25.130 --> 00:17:26.150
them here.

00:17:26.150 --> 00:17:30.380
So you can see that in this layout, maybe
I want to show waiting for sync, here we have

00:17:30.380 --> 00:17:33.919
some various banners shown at the bottom.

00:17:33.919 --> 00:17:40.130
In the middle there's a ListView and on the
ride there's several options I'm going to

00:17:40.130 --> 00:17:41.180
choose this one.

00:17:41.180 --> 00:17:45.790
So you can see this is basically what this
app looks like when you run, but we can work

00:17:45.790 --> 00:17:48.650
on editing the overall structure.

00:17:48.650 --> 00:17:51.430
We can also go and edit the internals.

00:17:51.430 --> 00:17:55.110
If I do the swipe select, you can see this
is the outer layout.

00:17:55.110 --> 00:17:59.520
If you double click, I can go to the inner
fragment layout and edit just that.

00:17:59.520 --> 00:18:04.140
I can go into the property sheets and change
the text to, for example, be patient, or something

00:18:04.140 --> 00:18:05.419
like that.

00:18:05.419 --> 00:18:11.570
Let's save and exit that.

00:18:11.570 --> 00:18:15.650
Now, you can also work with new fragments
on your own.

00:18:15.650 --> 00:18:16.840
It's pretty easy.

00:18:16.840 --> 00:18:21.700
If I delete the fragment, now we have a normal
layout that you are familiar with.

00:18:21.700 --> 00:18:26.270
The way you insert a fragment is to just go
the pallette, find the fragment tag and drag

00:18:26.270 --> 00:18:28.420
it on to your layout.

00:18:28.420 --> 00:18:31.039
We pop up this dialogue, which fragment class
do you want.

00:18:31.039 --> 00:18:34.110
You can create a new one with the create new
on the bottom.

00:18:34.110 --> 00:18:37.980
I will pick an existing one for now.

00:18:37.980 --> 00:18:41.600
Choose something to show it design time and
there it is.

00:18:41.600 --> 00:18:42.890
All right.

00:18:42.890 --> 00:18:49.549
So the last thing I want to show in the layout
editor is the new configuration chooser.

00:18:49.549 --> 00:18:54.590
So I've already shown you that you can flip
orientations very easily through the orientation

00:18:54.590 --> 00:18:55.590
toggle.

00:18:55.590 --> 00:18:59.750
You can obviously choose between other things
such as the UL mode and the night mode.

00:18:59.750 --> 00:19:10.700
Xav showed you how to switch different screen
sizes to see how this looks in tablet size.

00:19:10.700 --> 00:19:12.640
We also let you choose between themes here.

00:19:12.640 --> 00:19:17.100
So we've ordered them so you can easily pick
the themes that you have defined in your project

00:19:17.100 --> 00:19:21.150
with the themes you have in your manifest
or Holo themes or Holo lite themes.

00:19:21.150 --> 00:19:22.710
This used to be a giant list.

00:19:22.710 --> 00:19:26.790
Hopefully it's easier to work with now.

00:19:26.790 --> 00:19:28.850
And we also have a new thing here.

00:19:28.850 --> 00:19:30.660
This is the activities users.

00:19:30.660 --> 00:19:34.130
So why would a layout have an associated activity?

00:19:34.130 --> 00:19:36.669
We haven't needed it until now, but we're
starting to.

00:19:36.669 --> 00:19:42.340
So right now we are using this to figure out
which theme to default your render with, because

00:19:42.340 --> 00:19:46.419
in your manifest is where you're declaring
theme associations and that's based on the

00:19:46.419 --> 00:19:47.419
manifest.

00:19:47.419 --> 00:19:51.440
But in the next release, hopefully, we're
going to use this to also be able to render

00:19:51.440 --> 00:19:52.850
your action bar items in line.

00:19:52.850 --> 00:19:55.929
We will look at this associative activity
and render it there.

00:19:55.929 --> 00:19:57.670
There might be other features as well.

00:19:57.670 --> 00:20:00.390
Now, we also have a locale chooser.

00:20:00.390 --> 00:20:04.070
So this shows you basically the locale to
have.

00:20:04.070 --> 00:20:05.950
And we have flags as well.

00:20:05.950 --> 00:20:10.530
This is based on a very simple heuristic mapping
from language to country flags so I hope there

00:20:10.530 --> 00:20:15.060
are no obvious mistakes, I don't want to start
some kind of an international incident.

00:20:15.060 --> 00:20:17.140
File a bug if you see something obviously
wrong.

00:20:17.140 --> 00:20:20.860
And so obviously I can choose the language
here and we'll rerender with the other language.

00:20:20.860 --> 00:20:25.140
And finally you can choose a different rendering
target to see what this looks like on a different

00:20:25.140 --> 00:20:26.300
platform.

00:20:26.300 --> 00:20:31.230
So everything I've shown you so far is in
AD20 which we shipped yesterday.

00:20:31.230 --> 00:20:34.450
But now I'm about to show you something I'm
really excited about which is a new feature

00:20:34.450 --> 00:20:39.330
that we're working on and this is something
we're calling multiconfiguration editing.

00:20:39.330 --> 00:20:42.970
So I don't even know how to start so I'm just
going to show you.

00:20:42.970 --> 00:20:47.240
I'm going to say generate the full thumbnails.

00:20:47.240 --> 00:20:51.299
So what I did here was this is showing what
this layout is going to look like with a different

00:20:51.299 --> 00:20:55.499
theme, in a different language, different
screen size, different orientation.

00:20:55.499 --> 00:21:03.790
And the key part about this is if I edit this,
these guys are staying in sync.

00:21:03.790 --> 00:21:08.070
[ Applause ]
&gt;&gt;Tor Norbye: And I can obviously switch between

00:21:08.070 --> 00:21:11.580
them to see, you know, what does this look
like, I can go back.

00:21:11.580 --> 00:21:15.410
I can zoom in on something, if I want to see
them, you know, in a larger dimension to see

00:21:15.410 --> 00:21:16.410
what's going on.

00:21:16.410 --> 00:21:19.530
And the key part about this also is that I
get to choose what these things are.

00:21:19.530 --> 00:21:23.730
So if I'm, for example, really interested
in supporting French, because French is?

00:21:23.730 --> 00:21:25.230
The best language, right, Xav?

00:21:25.230 --> 00:21:26.370
&gt;&gt;Xavier Ducrohet: Yes.

00:21:26.370 --> 00:21:27.510
I mean oui.

00:21:27.510 --> 00:21:31.010
[ Applause ]
&gt;&gt;Tor Norbye: I should have gone for the Brazil

00:21:31.010 --> 00:21:33.570
cheap shot but I didn't do that.

00:21:33.570 --> 00:21:37.940
So I can now pick French and I can go add
a thumbnail and see, now, it's showing up

00:21:37.940 --> 00:21:42.940
over here, showing me this in French, and
as I go back to the default, you can see this

00:21:42.940 --> 00:21:46.450
one states showing me what this looks like
in French, I don't know if you can see that,

00:21:46.450 --> 00:21:50.650
it might be tricky.

00:21:50.650 --> 00:21:51.650
Give it some more room here.

00:21:51.650 --> 00:21:54.550
So this is basically now showing me persistent
French preview.

00:21:54.550 --> 00:21:56.870
All right.

00:21:56.870 --> 00:22:01.559
So that's just -- we generated some default
thumbnails for you, you can also add your

00:22:01.559 --> 00:22:02.559
own.

00:22:02.559 --> 00:22:03.890
And we have some other ones.

00:22:03.890 --> 00:22:05.810
Look at this, preview all screen sizes.

00:22:05.810 --> 00:22:07.770
Let me get some more screen space.

00:22:07.770 --> 00:22:11.410
This is showing the layout across all the
screen sizes that I care about.

00:22:11.410 --> 00:22:18.740
[ Applause ]
&gt;&gt;Tor Norbye: And preview all locales.

00:22:18.740 --> 00:22:24.380
So here we have a rendering of what this looks
like across a bunch of different languages.

00:22:24.380 --> 00:22:29.240
And you can see that as I'm editing this,
these things immediately start rendering to

00:22:29.240 --> 00:22:33.800
whatever the current layout looks like.

00:22:33.800 --> 00:22:37.600
I can obviously -- I don't know if you can
tell, but something looks wrong, let me zoom

00:22:37.600 --> 00:22:43.669
in a bit more so it's easier to see from your
perspective.

00:22:43.669 --> 00:22:44.919
You can see that something looks wrong here.

00:22:44.919 --> 00:22:46.030
Let me zoom in so you can see.

00:22:46.030 --> 00:22:48.730
This button is too high compared to this one.

00:22:48.730 --> 00:22:53.870
So I could obviously zoom in like this, or
we can switch to it, right, and we can see

00:22:53.870 --> 00:22:55.030
what's going on.

00:22:55.030 --> 00:22:57.700
So this feature I think is going to be immensely
useful.

00:22:57.700 --> 00:23:01.730
You can basically make your edits and simultaneously
keep an eye on what this is going to look

00:23:01.730 --> 00:23:05.460
like across screen sizes, languages, any configuration
language you care about.

00:23:05.460 --> 00:23:09.110
&gt;&gt;Xavier Ducrohet: So one thing that's really
interesting here is that we show you a language,

00:23:09.110 --> 00:23:14.120
but it's really the main configuration so
that if you switch to something else --

00:23:14.120 --> 00:23:18.440
&gt;&gt;Tor Norbye: Yes, if I switch to a dark action
bar theme, it's now showing the dark action

00:23:18.440 --> 00:23:22.070
bar theme in these other languages, and I
can switch orientation, it's now showing me

00:23:22.070 --> 00:23:26.960
the other orientation, so, yeah, I think this
is going to be useful, so I'm really excited

00:23:26.960 --> 00:23:28.380
about finishing it.

00:23:28.380 --> 00:23:33.900
[ Applause ]
&gt;&gt;Tor Norbye: All right.

00:23:33.900 --> 00:23:40.340
So the last thing I want to show you is Lint.

00:23:40.340 --> 00:23:43.880
So you might have noticed as I've -- if you've
looked very carefully, you might have noticed

00:23:43.880 --> 00:23:47.550
-- and if you're sitting near the front, you
might have noticed these little warning icons

00:23:47.550 --> 00:23:50.610
showing up on top of the layout.

00:23:50.610 --> 00:23:51.610
This thing.

00:23:51.610 --> 00:23:53.179
What's that?

00:23:53.179 --> 00:23:57.549
We have a new tool in the Android tools called
Lint which is basically a bug-checker.

00:23:57.549 --> 00:24:02.560
It looks through your code, your Java files,
your XML files, your ping files, your -- even

00:24:02.560 --> 00:24:06.860
your Proguard files and looks for errors and
it cross-correlates things to make sure there

00:24:06.860 --> 00:24:07.860
aren't problems.

00:24:07.860 --> 00:24:12.120
We look for correctness issues, usability
issues, performance issues.

00:24:12.120 --> 00:24:14.540
Here's an example of a usability issue.

00:24:14.540 --> 00:24:18.160
If I hover over this, you can see we get a
tool tip on the bottom, so we're always putting

00:24:18.160 --> 00:24:21.250
the tool tips on the bottom, so they're not
on top of the layout, this could get really

00:24:21.250 --> 00:24:24.850
old really quickly if we kept putting up tool
tips on top of your design.

00:24:24.850 --> 00:24:26.990
This is showing that the bucking order is
wrong.

00:24:26.990 --> 00:24:31.670
Since we're targeting AP14 or higher, the
okay button should be on the right.

00:24:31.670 --> 00:24:33.409
So when I do that, the error goes away.

00:24:33.409 --> 00:24:38.090
So we're actually running Lint incrementally
for every UI action on this layout.

00:24:38.090 --> 00:24:43.659
If I add some more errors here, let's throw
in some buttons, for example, you can see

00:24:43.659 --> 00:24:45.250
there's a counter up in the right here.

00:24:45.250 --> 00:24:47.419
Does it look familiar?

00:24:47.419 --> 00:24:52.060
So this one is basically incrementing and
showing you the -- when you have no errors,

00:24:52.060 --> 00:24:55.250
it disappears, but it's saying I have two
issues now, and these are basically both -- there's

00:24:55.250 --> 00:24:57.800
a hard-coded string here.

00:24:57.800 --> 00:25:02.650
So we run Lint incrementally on every UI action,
we also run it on every save.

00:25:02.650 --> 00:25:07.650
So if I'm in an XML file and I find a -- if
I were to, like, hard code this string here

00:25:07.650 --> 00:25:11.830
and say cancel, the minute I hit save, you
see I get a warning where saying there's an

00:25:11.830 --> 00:25:14.010
issue, you should use a string and resource
here.

00:25:14.010 --> 00:25:15.580
This is not just for XML files.

00:25:15.580 --> 00:25:20.950
If I switch to a Java file and let's go and
create a toast.

00:25:20.950 --> 00:25:25.440
Toast dot -- c'mon, make text.

00:25:25.440 --> 00:25:29.770
Context, hello, and one.

00:25:29.770 --> 00:25:33.780
The minute I save, you can see it tells us,
did you forget to call show on this?

00:25:33.780 --> 00:25:35.369
I don't know if anyone who's done this but
--

00:25:35.369 --> 00:25:43.180
[ Applause ]
&gt;&gt;Tor Norbye: So we run Lint incrementally

00:25:43.180 --> 00:25:46.500
when we can, but there are certain kinds of
checks that require global analysis, we can't

00:25:46.500 --> 00:25:47.500
do it incrementally.

00:25:47.500 --> 00:25:48.690
For example, finding unused resources.

00:25:48.690 --> 00:25:52.549
That requires all declarations and all references.

00:25:52.549 --> 00:25:57.179
So the way you run Lint on the whole project
is to go to the Toolbar where we have this

00:25:57.179 --> 00:26:01.350
Lint action and I can run Lint on all projects
or just a particular project.

00:26:01.350 --> 00:26:05.940
And when I do that, you can see -- we open
this window in the bottom here, Lint warnings,

00:26:05.940 --> 00:26:08.090
and here we've collapsed it as much as possible.

00:26:08.090 --> 00:26:12.710
I can expand it if I want, but we're showing
one item per type of issue.

00:26:12.710 --> 00:26:16.880
And as I select these, you get a fuller description
because it's really hard to explain a problem

00:26:16.880 --> 00:26:18.640
to a user in less than 80 characters.

00:26:18.640 --> 00:26:22.750
So you can get the fuller explanation and
sometimes there's more information as well.

00:26:22.750 --> 00:26:25.039
So let's take a look at some of these errors.

00:26:25.039 --> 00:26:27.640
If I double click you can see we jump right
to it.

00:26:27.640 --> 00:26:33.410
Here it's saying there's a problem where in
the XML we can jump to it, in XML this is

00:26:33.410 --> 00:26:38.020
a button and that is not compatible with the
cast two toggle button, so it's cross-referencing

00:26:38.020 --> 00:26:40.549
XML and Java.

00:26:40.549 --> 00:26:45.260
Likewise, we have a string formatter called
here where we're passing a string as a second

00:26:45.260 --> 00:26:49.930
formatting argument, and if we look at that
actual string, you can see that it's actually

00:26:49.930 --> 00:26:53.289
supposed to be an integer.

00:26:53.289 --> 00:26:56.130
Here's a good one --
[ Applause ]

00:26:56.130 --> 00:26:59.730
&gt;&gt;Tor Norbye: Here's a call to set the text
color.

00:26:59.730 --> 00:27:02.320
We're passing in the color black, this compiles
just fine.

00:27:02.320 --> 00:27:03.350
So what's the problem?

00:27:03.350 --> 00:27:06.650
Well, we're passing a resource ID, not the
actual RGB triplet.

00:27:06.650 --> 00:27:11.650
These are just in, so it compiles just fine,
but it's a subtle problem so -- we found this

00:27:11.650 --> 00:27:16.050
in our own code, too, as well, unfortunately.

00:27:16.050 --> 00:27:20.049
In the keynote yesterday, you found out how
to increase the amount of butter in your diet.

00:27:20.049 --> 00:27:24.429
We have some Lint checks her to help you sort
of avoid jitter.

00:27:24.429 --> 00:27:28.809
So what you don't want to do unconditionally
allocate objects in any draw call or on measure

00:27:28.809 --> 00:27:31.050
call, so we look for that, calling create
bitmap.

00:27:31.050 --> 00:27:35.179
If you do put conditional logic around it
Lint should be quiet about it.

00:27:35.179 --> 00:27:37.960
Now, in the summary here, you see light bulbs.

00:27:37.960 --> 00:27:40.159
I don't know if you can see it, so I'm going
to zoom in again.

00:27:40.159 --> 00:27:42.150
There's light bulbs next to some of these
warnings.

00:27:42.150 --> 00:27:45.919
And this is basically telling you we have
an automatic quick fix for it.

00:27:45.919 --> 00:27:50.500
For example, it says here that this text field
does not specify input type or hint.

00:27:50.500 --> 00:27:55.390
I can either press the fix icon here or I
can use a quick fix while I'm editing.

00:27:55.390 --> 00:27:58.539
And we have explanation of the issue.

00:27:58.539 --> 00:28:02.610
I've run the quick fix and it inserts, you
know, the correct fix.

00:28:02.610 --> 00:28:05.940
I hit control shift F to just clean things
up again.

00:28:05.940 --> 00:28:08.710
The other thing I can do is suppress issues.

00:28:08.710 --> 00:28:12.500
So let's say that I don't care about hard-coded
text because I only want to support French.

00:28:12.500 --> 00:28:13.500
Yes!

00:28:13.500 --> 00:28:16.260
Do you see a theme here?

00:28:16.260 --> 00:28:21.480
If I invoke control one to invoke the quick
fix, there's actually and add ignore hard-coded

00:28:21.480 --> 00:28:22.480
to element here.

00:28:22.480 --> 00:28:24.040
This let's me suppress this issue.

00:28:24.040 --> 00:28:28.320
So if I select this you can se it actually
adds an ignore element on the specific type

00:28:28.320 --> 00:28:32.450
of issue, this can also say all or be a common
separate list of things I don't care about.

00:28:32.450 --> 00:28:37.570
And I can move this attribute up to the root
if I wanted to suppress it for the whole file.

00:28:37.570 --> 00:28:39.210
So the tools name space is special.

00:28:39.210 --> 00:28:41.980
This was something that was added I think
in tools 18.

00:28:41.980 --> 00:28:45.090
And this is basically going to be ignored
by AAPT.

00:28:45.090 --> 00:28:47.970
So anything in this name space, there's no
penalty whatsoever.

00:28:47.970 --> 00:28:49.809
It does not make it into the APK.

00:28:49.809 --> 00:28:50.820
But it's great for us.

00:28:50.820 --> 00:28:55.980
We can store metadata this way now, not using
comments like we used to.

00:28:55.980 --> 00:29:00.390
So the ability to suppress errors is not just
for XML files.

00:29:00.390 --> 00:29:04.230
If I go over to a Java file, I can do the
same thing there.

00:29:04.230 --> 00:29:08.500
So if invoke control one, I have a bunch of
suppressed Lints and this is using annotations.

00:29:08.500 --> 00:29:10.159
All right.

00:29:10.159 --> 00:29:16.200
So I want to show one more thing here.

00:29:16.200 --> 00:29:20.940
I assume many of you are trying to target
not just the very latest version of Android

00:29:20.940 --> 00:29:21.940
and so you always have a choice.

00:29:21.940 --> 00:29:27.659
Do you want to build your app against the
oldest platform you're supporting?

00:29:27.659 --> 00:29:31.279
That's good because it means you're not going
to accidentally use any APIs that aren't supported

00:29:31.279 --> 00:29:35.150
everywhere, but it's bad because you have
to access reflection to access anything newer

00:29:35.150 --> 00:29:37.100
and that's really cumbersome.

00:29:37.100 --> 00:29:41.500
The other choice is to compile against the
very latest version of the Android SDK, the

00:29:41.500 --> 00:29:44.870
problem then is that what if you accidently
use an API that isn't supported, you're going

00:29:44.870 --> 00:29:46.170
to have a runtime error.

00:29:46.170 --> 00:29:50.330
So we now have a solution for that with Lint
which basically lets you have the best of

00:29:50.330 --> 00:29:51.330
both worlds.

00:29:51.330 --> 00:29:54.320
Now you should compile against the latest
target and then Lint will tell you when you

00:29:54.320 --> 00:29:56.510
have some kind of a illegal API reference.

00:29:56.510 --> 00:30:02.640
So I'm going to show that here by calling
get action bar and we'll assign it to this.

00:30:02.640 --> 00:30:09.159
All right, let me save -- okay.

00:30:09.159 --> 00:30:14.679
So now, after I saved, it's coming up with
an error and it's saying that this class requires

00:30:14.679 --> 00:30:20.360
API 11 and that this method call here requires
API 11.

00:30:20.360 --> 00:30:21.640
And we're trying to target five.

00:30:21.640 --> 00:30:24.659
So the error message says exactly what the
problem is.

00:30:24.659 --> 00:30:28.690
And so you can basically make sure that this
code is then only called on a path that is

00:30:28.690 --> 00:30:30.510
guarded with some kind of a version check.

00:30:30.510 --> 00:30:36.470
And once you've done that, you can say I know
this class will only be called when we know

00:30:36.470 --> 00:30:41.720
the API is 11 so I can use the new target
API annotation to basically mark this as being

00:30:41.720 --> 00:30:43.440
clean for Lint.

00:30:43.440 --> 00:30:48.860
The last thing I want to show you is a preview
of a new Lint check that we're working on.

00:30:48.860 --> 00:30:51.730
So I'm going to open up the Lint preferences
dialogue.

00:30:51.730 --> 00:30:53.029
This is showing all the Lint errors.

00:30:53.029 --> 00:30:55.480
So we have about 100 of them right now that
we're checking, and this is increasing in

00:30:55.480 --> 00:30:57.051
every release, so make sure you keep updating.

00:30:57.051 --> 00:31:04.190
In this build I have a special -- special
Lint check which is disabled by default but

00:31:04.190 --> 00:31:05.190
I'm going to enable it now.

00:31:05.190 --> 00:31:08.130
This is called missing permission.

00:31:08.130 --> 00:31:13.309
So I'm now going to go into this class again
and I'm going to innocently create a new socket.

00:31:13.309 --> 00:31:15.210
All right.

00:31:15.210 --> 00:31:21.529
So I've got to fix the import.

00:31:21.529 --> 00:31:26.330
And now I get a new warning here saying this
requires Internet permission, which I don't

00:31:26.330 --> 00:31:28.090
have.

00:31:28.090 --> 00:31:33.120
So if I, then, go to the Lint window and say,
you know, fix this, it will open up the manifest

00:31:33.120 --> 00:31:35.789
file and add the Internet permission for me
and this checks all the libraries I'm using

00:31:35.789 --> 00:31:37.809
as well.

00:31:37.809 --> 00:31:44.830
[ Applause ]
&gt;&gt;Tor Norbye: So that check does, however,

00:31:44.830 --> 00:31:46.670
require a really good permission database
which we're working on.

00:31:46.670 --> 00:31:49.669
So this is not going to be out in the next
couple months, it's a little bit longer term

00:31:49.669 --> 00:31:52.330
goal, but I hope this will be useful.

00:31:52.330 --> 00:31:54.070
&gt;&gt;Xavier Ducrohet: Excellent.

00:31:54.070 --> 00:31:55.799
Thank you, Tor.

00:31:55.799 --> 00:32:00.190
All right, let's talk a little bit about developing
tools.

00:32:00.190 --> 00:32:05.529
So in 20 that we just released yesterday,
we added a few new tools.

00:32:05.529 --> 00:32:12.309
The first one that we added is a tool called
tracer for OpenGL ES, and as its name indicates,

00:32:12.309 --> 00:32:17.549
it's going to help you trace your OpenGL codes,
so it's useful if you're using an engine that's

00:32:17.549 --> 00:32:21.270
doing GL code for you and you don't know exactly
what's going on.

00:32:21.270 --> 00:32:29.320
It's working on Jelly Bean and only on devices,
I don't think it works on emulator.

00:32:29.320 --> 00:32:34.330
And it's available as an Eclipse plug-in and
it's available as a standalone application.

00:32:34.330 --> 00:32:37.919
Now the standalone application, when we developed
it, we realized that we were starting to have

00:32:37.919 --> 00:32:39.210
quite a few standard applications.

00:32:39.210 --> 00:32:44.360
DDMS, Traceview, (indiscernible) some are
the UI are kind of crappy.

00:32:44.360 --> 00:32:48.230
None of them were configurable, let's say.

00:32:48.230 --> 00:32:52.840
So we decided to just revamp that and integrate
all of them into a single application.

00:32:52.840 --> 00:32:58.130
We are basing that on the plug-ins that we
have for Eclipse, so we use and LCP-based

00:32:58.130 --> 00:33:02.919
application that's the Eclipse rich client
platform, so that you can figure out the windows

00:33:02.919 --> 00:33:06.470
to look like you want them to look, so it
will be much better.

00:33:06.470 --> 00:33:11.730
The second tool that we're adding which we
actually showed very quickly at the keynote

00:33:11.730 --> 00:33:13.149
yesterday, Systrace.

00:33:13.149 --> 00:33:17.980
This is a very low-level tracing tool, and
I will show you output and show you a few

00:33:17.980 --> 00:33:19.250
things in there.

00:33:19.250 --> 00:33:23.590
And then the third thing that we are adding
is the first bit (indiscernible) of the NDK

00:33:23.590 --> 00:33:25.900
support in Eclipse.

00:33:25.900 --> 00:33:28.210
So we have support for building.

00:33:28.210 --> 00:33:33.060
So as you edit your JNI code it automatically
get compiled and put in the right place.

00:33:33.060 --> 00:33:37.060
And we have debugging support so you have
a launch configuration, and we start you to

00:33:37.060 --> 00:33:41.170
be on the device, we do all the things, and
then if you have a break point, we just stop

00:33:41.170 --> 00:33:42.170
on there.

00:33:42.170 --> 00:33:51.370
Let's do a quick demo of -- so my SDK here.

00:33:51.370 --> 00:33:55.190
So the monitor, the Android device monitor
which is the tool that regroups everything

00:33:55.190 --> 00:33:58.340
is under tools, it's called monitor.

00:33:58.340 --> 00:34:02.500
We still have the other ways, so as we transition,
we will remove the other ones.

00:34:02.500 --> 00:34:08.560
But DDMS is still there, Trace is still there.

00:34:08.560 --> 00:34:10.540
We have a nice splash screen.

00:34:10.540 --> 00:34:15.889
&gt;&gt;Tor Norbye: Thanks, Romain.

00:34:15.889 --> 00:34:19.899
&gt;&gt;Xavier Ducrohet: Yes.

00:34:19.899 --> 00:34:22.279
There we go.

00:34:22.279 --> 00:34:27.279
That's not what I wanted but, well, let's
show it again.

00:34:27.279 --> 00:34:32.710
Okay, so this is -- so you have the DDMS here.

00:34:32.710 --> 00:34:35.149
There we go.

00:34:35.149 --> 00:34:40.279
So it looks like the DDMS that you may already
be using except that if you really don't care

00:34:40.279 --> 00:34:45.729
about the monitor control you can just go
in, close it, you can move things around.

00:34:45.729 --> 00:34:50.500
So if you have ever used Eclipse it's basically
the same view system.

00:34:50.500 --> 00:34:53.669
And then, you know, we have some utilities
in there that you should look at, we have

00:34:53.669 --> 00:34:55.359
like the network statistics.

00:34:55.359 --> 00:34:59.479
I think Jeff Sharkey is doing a demo where
he will show that so you should definitely

00:34:59.479 --> 00:35:01.170
try to see that.

00:35:01.170 --> 00:35:04.950
And then here, on the top right, you have
the different tools so the (indiscernible)

00:35:04.950 --> 00:35:09.200
is here and then the tracer for OpenGL ES
is here.

00:35:09.200 --> 00:35:12.180
So I have -- see my device here?

00:35:12.180 --> 00:35:13.910
And I'm going to start tracing a tool.

00:35:13.910 --> 00:35:18.249
So the way the tool works is that it's meant
to work on any chips that are out there.

00:35:18.249 --> 00:35:23.499
There are some GL debugger currently available
but they are generally tied to a particular

00:35:23.499 --> 00:35:24.499
chip set.

00:35:24.499 --> 00:35:28.269
So we wanted to do something that would work
on any devices so that whatever devices you

00:35:28.269 --> 00:35:29.900
have, that will work.

00:35:29.900 --> 00:35:35.900
This works whether you're using Java bindings
or whether you're using [NATPIs, it's just

00:35:35.900 --> 00:35:38.439
above the driver in the GL library.

00:35:38.439 --> 00:35:43.759
And what we do is intercept every code that
is done to the driver and then we start building,

00:35:43.759 --> 00:35:46.430
you know, a separate state.

00:35:46.430 --> 00:35:50.010
Because of that and because we can't query
the driver to actually get information about

00:35:50.010 --> 00:35:54.549
the context, we have to basically start the
application in a certain way.

00:35:54.549 --> 00:35:59.180
So if you have an application that's already
started, you have to quit it and then start

00:35:59.180 --> 00:36:00.180
it again.

00:36:00.180 --> 00:36:02.420
so you click here.

00:36:02.420 --> 00:36:05.109
And then -- so here I'm going to start the
settings application.

00:36:05.109 --> 00:36:07.920
You can select your device here.

00:36:07.920 --> 00:36:08.920
Which application.

00:36:08.920 --> 00:36:11.290
If you want to start a particular activity,
you can do that, too.

00:36:11.290 --> 00:36:14.269
And then here you have a couple options.

00:36:14.269 --> 00:36:20.349
So by default, we're going to get every GL
code that you're doing but sometime you actually

00:36:20.349 --> 00:36:22.119
want to see what you're drawing.

00:36:22.119 --> 00:36:27.039
So that -- those check boxes are for you to
choose what you want us to gather for you.

00:36:27.039 --> 00:36:31.459
By default, really, you want to get the result
of each frame so what happened after a swap

00:36:31.459 --> 00:36:32.459
buffer.

00:36:32.459 --> 00:36:36.289
In some cases you want to see the results
of every GL draw that's going to be significantly

00:36:36.289 --> 00:36:41.920
slower because we have to send them back from
the device on to the application.

00:36:41.920 --> 00:36:46.059
So I recommend not doing them all the time,
there's another way after, and then you decide

00:36:46.059 --> 00:36:47.920
where you're going to send the trace file.

00:36:47.920 --> 00:36:51.959
So let's trace a very simple session into
the sending app.

00:36:51.959 --> 00:36:56.609
So I'm going to click trace.

00:36:56.609 --> 00:36:57.609
There I go.

00:36:57.609 --> 00:36:59.589
So I'm going to start tracing.

00:36:59.589 --> 00:37:01.519
You can see that's it's starting to collect
frame.

00:37:01.519 --> 00:37:06.040
And as I said earlier, if you want to get
the result of every GL draw, just before you

00:37:06.040 --> 00:37:10.509
do an action, enable it here, then do your
action and then stop it.

00:37:10.509 --> 00:37:12.069
So I probably have enough data to show you
that.

00:37:12.069 --> 00:37:14.219
So let's stop tracing.

00:37:14.219 --> 00:37:17.349
And let's open it.

00:37:17.349 --> 00:37:19.150
Stop.

00:37:19.150 --> 00:37:20.960
Here.

00:37:20.960 --> 00:37:22.759
Okay.

00:37:22.759 --> 00:37:26.369
Let's see.

00:37:26.369 --> 00:37:32.460
So what you have here, at the top you have
the actual frames.

00:37:32.460 --> 00:37:38.160
So if we look here, you have the actual drawing
of the frame, normally.

00:37:38.160 --> 00:37:39.309
There we go.

00:37:39.309 --> 00:37:42.240
So this is what was drawn by the application.

00:37:42.240 --> 00:37:48.430
And as I scroll, we should start seeing the
-- basically scrolling through the sending

00:37:48.430 --> 00:37:49.430
application.

00:37:49.430 --> 00:37:53.619
Here, before that you actually have the construction
of each frames.

00:37:53.619 --> 00:37:59.019
So every -- you start with the GL view port,
and then you -- and all the way at the end

00:37:59.019 --> 00:38:01.040
with a swap buffer.

00:38:01.040 --> 00:38:07.140
And through all those codes you can look at
your GL context here, everything that's in

00:38:07.140 --> 00:38:10.369
blue means it's what changed from one code
to another.

00:38:10.369 --> 00:38:18.339
So if I start here and I change, you'll see
what change on every code, which, you know

00:38:18.339 --> 00:38:25.799
-- and then you can also go look at something,
for example, I just organized that over here,

00:38:25.799 --> 00:38:26.799
since we can.

00:38:26.799 --> 00:38:32.269
You can see your shader, you can see your
vertex, you can see your textures, you know,

00:38:32.269 --> 00:38:33.269
everything.

00:38:33.269 --> 00:38:35.690
You can also do this.

00:38:35.690 --> 00:38:40.709
There we go.

00:38:40.709 --> 00:38:43.440
You can do search.

00:38:43.440 --> 00:38:46.509
So one thing that you've seen -- oh, it's
collapsed.

00:38:46.509 --> 00:38:47.509
There we go.

00:38:47.509 --> 00:38:51.969
So one thing that you may have noticed is
there's some kind of ER key going on.

00:38:51.969 --> 00:38:57.190
So we added some extension to GL, the first
one is you can put a marker with a particular

00:38:57.190 --> 00:38:59.029
string and then will show up here.

00:38:59.029 --> 00:39:02.780
So if you want to say, hey, I'm starting to
do that and I'm done doing that, you put two

00:39:02.780 --> 00:39:05.680
markers and then you can search on that and
see it.

00:39:05.680 --> 00:39:09.829
And the other option is to actually push and
pump to and from a stack.

00:39:09.829 --> 00:39:11.299
So this is what happens here.

00:39:11.299 --> 00:39:12.940
This is the regular view framework.

00:39:12.940 --> 00:39:14.400
It's rendering with GL.

00:39:14.400 --> 00:39:19.219
So every time it unshows a new view group
it says, hey, I'm (indiscernible) out, so

00:39:19.219 --> 00:39:23.019
it does a push and then every children say,
I'm a text view, I'm a button, whatever, and

00:39:23.019 --> 00:39:26.260
then when they stop drawing, then pops from
the stack and then they would will show up

00:39:26.260 --> 00:39:27.260
here.

00:39:27.260 --> 00:39:30.009
So if you have your own game engine or anything
like that and you want to start doing some

00:39:30.009 --> 00:39:34.970
ER key display here, you can definitely do
those extensions.

00:39:34.970 --> 00:39:39.039
So that is GL tracer.

00:39:39.039 --> 00:39:42.670
The next tool that I want to show you is the
output of trace.

00:39:42.670 --> 00:39:46.579
So we showed it briefly during the keynote.

00:39:46.579 --> 00:39:49.450
I'm just going to show you a very quick demo.

00:39:49.450 --> 00:39:55.999
Romain and Chet Haase will actually do a more
in-depth look at the session at 2:45, I believe,

00:39:55.999 --> 00:39:56.999
today.

00:39:56.999 --> 00:39:58.799
So I encourage you to go see that.

00:39:58.799 --> 00:40:00.720
So it's a system-level trace.

00:40:00.720 --> 00:40:02.730
You can see everything that happens on your
CPU.

00:40:02.730 --> 00:40:06.479
You can see, you know, the binder thread for
interprocess communication.

00:40:06.479 --> 00:40:07.569
You can see the Vsync.

00:40:07.569 --> 00:40:11.079
You can see everything.

00:40:11.079 --> 00:40:15.859
It's very loadable, and it can really get
stuff into a lot of details.

00:40:15.859 --> 00:40:20.980
So if you look here, I'm showing about five
seconds, and then you can start zooming into

00:40:20.980 --> 00:40:26.589
things and see really what happens all the
way down to very, like, short events.

00:40:26.589 --> 00:40:38.680
Like this event here, whatever that was, 4.0.6
millisecond.

00:40:38.680 --> 00:40:43.309
So you can take on any blocks of color just
exactly -- what am I doing here?

00:40:43.309 --> 00:40:47.140
So exactly what was going on, what it was,
how long it took.

00:40:47.140 --> 00:40:54.479
You can do selection to see exactly what happened
somewhere to see the emulator and the speed.

00:40:54.479 --> 00:40:59.410
&gt;&gt;Tor Norbye: If you have some sort of jitter,
you want to use this to figure out why.

00:40:59.410 --> 00:41:05.839
&gt;&gt;Xavier Ducrohet: Traceview is there.

00:41:05.839 --> 00:41:13.000
If you want to see what happens at the system
level, Systrace is the way to do it.

00:41:13.000 --> 00:41:15.579
Okay.

00:41:15.579 --> 00:41:19.750
Let's talk a little bit about Android projects.

00:41:19.750 --> 00:41:24.109
So you're creating a complex application.

00:41:24.109 --> 00:41:27.799
Every time I talk to a developer, I'm always
amazed by what you are doing.

00:41:27.799 --> 00:41:30.789
You are using 20 library projects.

00:41:30.789 --> 00:41:33.849
I have a hundred jars or something like that.

00:41:33.849 --> 00:41:36.949
You are pushing the system to the limit.

00:41:36.949 --> 00:41:39.059
We really want to help you.

00:41:39.059 --> 00:41:42.979
We know that you want to share code and resources
across different applications or different

00:41:42.979 --> 00:41:46.640
-- across the same version of the same application.

00:41:46.640 --> 00:41:50.210
It's just, you know, very complicated.

00:41:50.210 --> 00:41:55.390
One thing we do want to do is make sure that
Eclipse and Ant work seamlessly.

00:41:55.390 --> 00:41:59.799
Our approach is you live in the ID.

00:41:59.799 --> 00:42:02.920
We do Eclipse but IntelliJ, why not, any other
tool.

00:42:02.920 --> 00:42:08.319
You can use the great feature that Tor showed
you today.

00:42:08.319 --> 00:42:12.730
If you do configuration, add dependency and
put it on your brief server, you shouldn't

00:42:12.730 --> 00:42:15.230
have to maintain two different projects.

00:42:15.230 --> 00:42:19.549
That's one of the things we are trying to
do.

00:42:19.549 --> 00:42:21.739
So how do you share code and resources?

00:42:21.739 --> 00:42:24.499
So we kind of have three ways of doing that
right now.

00:42:24.499 --> 00:42:27.499
The first way is by using Java Project in
Eclipse.

00:42:27.499 --> 00:42:32.709
It's really a shortcut to cross -- shortcut
for generating a Java file and putting that

00:42:32.709 --> 00:42:33.709
in another project.

00:42:33.709 --> 00:42:35.059
It doesn't work in Ant.

00:42:35.059 --> 00:42:37.369
You could do custom work in Ant.

00:42:37.369 --> 00:42:38.809
I would recommend against using that.

00:42:38.809 --> 00:42:41.319
But if you want to, it's up to you.

00:42:41.319 --> 00:42:45.650
Library project; so this is something that
we introduced a while ago and we are definitely

00:42:45.650 --> 00:42:46.650
committed to doing this.

00:42:46.650 --> 00:42:50.680
This is the right way of sharing code and
resources across Android applications.

00:42:50.680 --> 00:42:54.190
It's still available in source compile time
version.

00:42:54.190 --> 00:42:57.619
We are working on a binary distribution for
that.

00:42:57.619 --> 00:43:01.339
We are starting to see exactly what we need
to do there.

00:43:01.339 --> 00:43:06.549
Other systems like support some binary application.

00:43:06.549 --> 00:43:10.460
You can use (indiscernible), and then the
third one is Java.

00:43:10.460 --> 00:43:11.510
Java is easy.

00:43:11.510 --> 00:43:15.410
You go online, run a source library that does
what you want.

00:43:15.410 --> 00:43:19.150
You download, put Java in your project, you're
done.

00:43:19.150 --> 00:43:20.709
That works great when you have a small project.

00:43:20.709 --> 00:43:24.579
When you have a bigger project with lots of
libraries and Java, you can get into some

00:43:24.579 --> 00:43:26.680
serious problems.

00:43:26.680 --> 00:43:27.969
Let's look at an example here.

00:43:27.969 --> 00:43:29.329
Let's say you have an application.

00:43:29.329 --> 00:43:36.390
You have three library projects and each of
them actually use a jar file.

00:43:36.390 --> 00:43:42.249
As a human, I need the V2 version of the library
because the other one is redundant.

00:43:42.249 --> 00:43:44.930
The system doesn't work that way.

00:43:44.930 --> 00:43:48.559
The previous version was very stupid.

00:43:48.559 --> 00:43:51.559
It would take all three versions of the jar
file.

00:43:51.559 --> 00:43:54.920
Each of those library have a copy of that
file.

00:43:54.920 --> 00:44:00.430
So each would actually send all three versions
of the jar to the DX tool which convert into

00:44:00.430 --> 00:44:01.719
the byte code.

00:44:01.719 --> 00:44:05.009
It would process the first jar file, the second
one.

00:44:05.009 --> 00:44:09.640
On the first class of that jar, it would complain
saying, hey, I already know about this class

00:44:09.640 --> 00:44:11.180
and then it will break.

00:44:11.180 --> 00:44:16.760
I'm sure you've seen "this class already added"
error.

00:44:16.760 --> 00:44:19.969
So this is a very simple example.

00:44:19.969 --> 00:44:23.859
Very quickly, if you add more library, if
you have a jar file that will bring other

00:44:23.859 --> 00:44:27.430
dependencies, it gets complex very quickly.

00:44:27.430 --> 00:44:33.130
The right way of doing that is to -- fixing
that is to have a real dependency management

00:44:33.130 --> 00:44:35.549
system, like Maven or OIV.

00:44:35.549 --> 00:44:36.549
We definitely want to get there.

00:44:36.549 --> 00:44:37.900
We are not there at the moment.

00:44:37.900 --> 00:44:39.239
We are working on it.

00:44:39.239 --> 00:44:42.029
We do want great ID support.

00:44:42.029 --> 00:44:44.609
We are still looking at what we are going
to do.

00:44:44.609 --> 00:44:48.219
In the meantime, we do want to help you with
the most common use case.

00:44:48.219 --> 00:44:52.799
So a couple of months ago we released an update
that would support the case where, let's say,

00:44:52.799 --> 00:44:58.199
you have two library projects and in each
of them you have a jar file support library,

00:44:58.199 --> 00:45:00.529
and you want that to work.

00:45:00.529 --> 00:45:05.319
We introduced a very simple conflict resolution
system.

00:45:05.319 --> 00:45:12.079
Something like Maven will identify the jar
file by artifact ID version and a clear understanding

00:45:12.079 --> 00:45:15.369
of what a library is, what a jar file is.

00:45:15.369 --> 00:45:17.089
Here we don't really have that information.

00:45:17.089 --> 00:45:18.420
We have the file.

00:45:18.420 --> 00:45:20.569
So we just purely base that on file name.

00:45:20.569 --> 00:45:24.809
If you have plenty of library projects, all
of them have the support library, we are going

00:45:24.809 --> 00:45:28.000
to identify all the duplicates of Android.

00:45:28.000 --> 00:45:33.589
We are going to make sure they are all the
same exact file.

00:45:33.589 --> 00:45:36.950
By that I don't mean like the version because
we don't know about that.

00:45:36.950 --> 00:45:38.609
We just compare the file itself.

00:45:38.609 --> 00:45:40.030
If they are all the same, that's great.

00:45:40.030 --> 00:45:44.990
We just pick one of them randomly and then
we just discard all the rest and basically

00:45:44.990 --> 00:45:46.359
get rid of duplicates.

00:45:46.359 --> 00:45:51.209
If you -- if we find a file that's different,
then we are going to actually generate an

00:45:51.209 --> 00:45:52.209
error.

00:45:52.209 --> 00:45:53.729
Typically in this case, you have two library
projects.

00:45:53.729 --> 00:45:57.461
You get the newer version of the library support
we used yesterday but only completing one

00:45:57.461 --> 00:45:58.940
of those projects.

00:45:58.940 --> 00:46:02.109
You are completing both but you submitted
only one of the get project and not the other

00:46:02.109 --> 00:46:05.229
one and then your co-worker complains, that
kind of thing.

00:46:05.229 --> 00:46:07.430
We detect that.

00:46:07.430 --> 00:46:14.219
We did add a very simple custom support for
the library support actually because the V13

00:46:14.219 --> 00:46:17.760
version actually embeds the V4 inside.

00:46:17.760 --> 00:46:21.400
If we were using something like Maven, we
would not have the V4 inside.

00:46:21.400 --> 00:46:23.309
We say that depends on V4.

00:46:23.309 --> 00:46:25.770
Right now, this contains it.

00:46:25.770 --> 00:46:31.869
So if we took V4 and V13, we drop V4 and just
use V13.

00:46:31.869 --> 00:46:34.339
So as I said, this is very basic.

00:46:34.339 --> 00:46:39.770
We really want to get you a really good build
system that will do a better dependency management

00:46:39.770 --> 00:46:41.339
for you.

00:46:41.339 --> 00:46:42.809
And this is a very high priority.

00:46:42.809 --> 00:46:44.479
We are just not there yet.

00:46:44.479 --> 00:46:53.559
So on the implementation side, in Eclipse
you have to reference every jar file into

00:46:53.559 --> 00:46:58.359
your project, and so it would be even worse
than that.

00:46:58.359 --> 00:47:02.970
If a library project -- say I use that jar
file and you had 20 applications using that

00:47:02.970 --> 00:47:06.789
library project, you would have to go in all
of those 20 applications and manually also

00:47:06.789 --> 00:47:08.190
add that jar file.

00:47:08.190 --> 00:47:12.869
In Ant, you just drop it into the (indiscernible)
folder and it works.

00:47:12.869 --> 00:47:16.809
We wanted to simplify that and make that the
same way for Eclipse also.

00:47:16.809 --> 00:47:18.769
This is what you are doing now.

00:47:18.769 --> 00:47:23.509
If you are manually referencing jar project
into Eclipse, don't.

00:47:23.509 --> 00:47:24.509
Stop doing it.

00:47:24.509 --> 00:47:26.079
Just drop them into the libs folder.

00:47:26.079 --> 00:47:34.219
Many say lib without an s, so just libs, and
then we will automatically pick the right

00:47:34.219 --> 00:47:35.439
one.

00:47:35.439 --> 00:47:40.959
We have a dynamic container on the Eclipse
side, an Eclipse way of having a class pass

00:47:40.959 --> 00:47:47.410
container that is dynamically filed by (indiscernible).

00:47:47.410 --> 00:47:48.410
We do the resolution.

00:47:48.410 --> 00:47:52.309
We drop duplicate, and we just put what the
application needs and we pick up whatever

00:47:52.309 --> 00:47:54.960
is coming through the library project as well.

00:47:54.960 --> 00:47:58.450
So we just grab everything that your application
needs.

00:47:58.450 --> 00:48:03.289
So that was released a couple of months ago
in 17.

00:48:03.289 --> 00:48:08.479
When we did that, we completely followed that
dynamic container preventing from you actually

00:48:08.479 --> 00:48:10.799
doing source attachment.

00:48:10.799 --> 00:48:13.039
This is really silly, but you can't.

00:48:13.039 --> 00:48:18.450
And we could fix the UI to do it, but really
the registration is to make sure that wherever

00:48:18.450 --> 00:48:21.519
you have a jar, you have a source attachment
specific to that jar.

00:48:21.519 --> 00:48:25.449
So that if you have five applications using
the same library project that depends on a

00:48:25.449 --> 00:48:29.890
jar file, you don't have to do the source
attachment on all five applications.

00:48:29.890 --> 00:48:34.880
Again, if you had a dependency management
system, you wouldn't have that problem, because

00:48:34.880 --> 00:48:37.500
part of your dependency would know where the
source is.

00:48:37.500 --> 00:48:41.170
In the meantime, we have a very simple solution.

00:48:41.170 --> 00:48:44.799
It looks like a bit of a hack, I'll admit,
but it works.

00:48:44.799 --> 00:48:48.109
So if you have foo.jar properties.

00:48:48.109 --> 00:48:56.260
Create those properties in there linking to
the source command and it will be picked up

00:48:56.260 --> 00:48:59.039
automatically for you.

00:48:59.039 --> 00:49:02.160
So library project, more improvements.

00:49:02.160 --> 00:49:04.969
We have merging of manifest now.

00:49:04.969 --> 00:49:09.029
So before if you had an activity that was
declared in a library, it wouldn't be picked

00:49:09.029 --> 00:49:11.660
up by the application, even if you put it
in the manifest.

00:49:11.660 --> 00:49:12.660
So we do have that now.

00:49:12.660 --> 00:49:17.999
We will merge things like permissions, activities,
services, things like that.

00:49:17.999 --> 00:49:18.999
It's basic.

00:49:18.999 --> 00:49:21.049
If you have a conflict, it will fail.

00:49:21.049 --> 00:49:24.249
We are working on adding that, being able
to say ignore, you know.

00:49:24.249 --> 00:49:27.339
I know that library declared that permission.

00:49:27.339 --> 00:49:29.089
I don't want it, I don't want that activity.

00:49:29.089 --> 00:49:31.210
We are working on that kind of thing.

00:49:31.210 --> 00:49:33.130
Because of that, it is not enabled by default.

00:49:33.130 --> 00:49:40.260
If you want to try it in your project properties,
declare manifest merger.enabled and true and

00:49:40.260 --> 00:49:43.200
it will be enabled for you.

00:49:43.200 --> 00:49:50.799
[ Applause ]
&gt;&gt;Xavier Ducrohet: In 17 we also introduced

00:49:50.799 --> 00:49:55.989
buildconfig.java.

00:49:55.989 --> 00:49:56.989
It's very basic.

00:49:56.989 --> 00:50:00.549
It declares a Boolean that is true.

00:50:00.549 --> 00:50:05.859
So in Eclipse if you do an export, otherwise
it's debug and then in Ant it's depending

00:50:05.859 --> 00:50:08.519
on if you do Ant release.

00:50:08.519 --> 00:50:12.359
The one basic one we decided to introduce,
that for is this one.

00:50:12.359 --> 00:50:14.729
Please stop logging too much information.

00:50:14.729 --> 00:50:18.800
The log buffer is shared across all applications.

00:50:18.800 --> 00:50:28.509
Especially don't log information that is just
sensitive, put that -- when we compile a release,

00:50:28.509 --> 00:50:35.170
we ifelse, and the Java Compiler will discount
that code.

00:50:35.170 --> 00:50:36.939
You can use that also for whatever else you
want.

00:50:36.939 --> 00:50:39.400
This is one important use case.

00:50:39.400 --> 00:50:42.990
Finally, we have made a lot of improvement
to Proguard.

00:50:42.990 --> 00:50:45.630
We have linked the current rules.

00:50:45.630 --> 00:50:52.520
What we did is we used to only be able to
reference one single Proguard file into your

00:50:52.520 --> 00:50:53.779
project.properties.

00:50:53.779 --> 00:50:56.989
We changed that to be able to reference more
than one file.

00:50:56.989 --> 00:51:03.499
And we provide a default for into the SDK
folder and you can reference to it using the

00:51:03.499 --> 00:51:06.119
sdk.gear property.

00:51:06.119 --> 00:51:10.680
So now you can have your own word file that
Google will never touch.

00:51:10.680 --> 00:51:14.660
Whenever we do an Android update project we
have never (indiscernible) your changes, and

00:51:14.660 --> 00:51:20.859
then we can safely improve the Proguard rule.

00:51:20.859 --> 00:51:26.829
I think people have obsolete files because
of that.

00:51:26.829 --> 00:51:31.309
We have to optimize and non-optimize.

00:51:31.309 --> 00:51:38.219
We provide those to you depending on which
version, to choose which one you want.

00:51:38.219 --> 00:51:43.359
Another thing that we did is we used to be
able to be very conservative about removing

00:51:43.359 --> 00:51:52.800
classes, another rule five that we use, and
so we know exactly when I XML files are being

00:51:52.800 --> 00:51:55.049
used.

00:51:55.049 --> 00:51:57.319
We are much more interested in removing classes.

00:51:57.319 --> 00:52:03.180
If you use something like the support library
for just one particular small item that you

00:52:03.180 --> 00:52:07.669
want, everything else will get removed for
you and you will get a much smaller application.

00:52:07.669 --> 00:52:11.739
[ Applause ]
&gt;&gt;Xavier Ducrohet: All right, Lint.

00:52:11.739 --> 00:52:14.759
&gt;&gt;Tor Norbye: We already talked about this.

00:52:14.759 --> 00:52:16.529
We had a different order earlier.

00:52:16.529 --> 00:52:21.869
I will show a couple other things regarding
Lint.

00:52:21.869 --> 00:52:23.829
This is my window.

00:52:23.829 --> 00:52:28.199
So Lint is -- I showed it running in Eclipse,
but it does not require Eclipse.

00:52:28.199 --> 00:52:31.789
IntelliJ has integrated Lint as well, and
you can run on the command line.

00:52:31.789 --> 00:52:39.670
If I go in here, type Lint, I talk point to
a particular project -- one directly.

00:52:39.670 --> 00:52:42.789
It basically just runs through the code and
spits out the errors.

00:52:42.789 --> 00:52:46.349
This is not a very useful format, so it actually
has several other formats.

00:52:46.349 --> 00:52:55.439
I can pick a particular file name like that,
and when it runs it now, it creates a report

00:52:55.439 --> 00:52:57.079
that I can then open.

00:52:57.079 --> 00:53:03.869
So when I do that, I get something likes this,
which is basically -- it's showing the same

00:53:03.869 --> 00:53:06.069
errors I explained to you but a bit more readable.

00:53:06.069 --> 00:53:07.529
We include the descriptions.

00:53:07.529 --> 00:53:14.940
We inlined -- for example in the case of mismatched
string format, you can see both cases of the

00:53:14.940 --> 00:53:16.170
source inline right here.

00:53:16.170 --> 00:53:17.499
This is useful.

00:53:17.499 --> 00:53:23.420
[ Applause ]
&gt;&gt;Tor Norbye: Thank you.

00:53:23.420 --> 00:53:28.380
The main use case for this is that even though
you can run Lint during your development,

00:53:28.380 --> 00:53:32.930
you really want to run it continuously on
a server along with your unit tests, right?

00:53:32.930 --> 00:53:39.269
So I hope that you are familiar with Jenkins
which is a continuous integration server.

00:53:39.269 --> 00:53:48.099
Someone has contributed a Lint integration
for Jenkins.

00:53:48.099 --> 00:53:50.519
This is the AOSP project.

00:53:50.519 --> 00:53:56.140
If you look here, you can see this trend graph
showing the number of Lint warnings currently

00:53:56.140 --> 00:53:58.009
around 1200.

00:53:58.009 --> 00:54:01.519
Luckily there aren't very many red ones.

00:54:01.519 --> 00:54:06.640
We can drill into this and take a look at
them.

00:54:06.640 --> 00:54:08.589
So this is basically showing all the different
folders.

00:54:08.589 --> 00:54:11.160
We can swatch back category as well.

00:54:11.160 --> 00:54:16.019
So here we have a folder that has a red error,
and I can drill in to look at it.

00:54:16.019 --> 00:54:21.460
We can see -- actually, what is this one?

00:54:21.460 --> 00:54:22.460
Missing translation.

00:54:22.460 --> 00:54:24.390
I saw a worse one earlier.

00:54:24.390 --> 00:54:27.410
I guess I picked a different one.

00:54:27.410 --> 00:54:30.519
This is the one I think I was going to look
at.

00:54:30.519 --> 00:54:31.519
Correct.

00:54:31.519 --> 00:54:32.519
Yes.

00:54:32.519 --> 00:54:40.470
So here we have -- someone has used an underscore
instead of a colon in their attribute.

00:54:40.470 --> 00:54:45.609
This is Lint running on the current sample
that we are shipping with AOSP.

00:54:45.609 --> 00:54:49.279
So we have a bit of a cleanup job to do.

00:54:49.279 --> 00:54:52.609
Let me quickly show you how this is set up.

00:54:52.609 --> 00:54:58.890
If you go to configure, all I have done is
add these two commands here.

00:54:58.890 --> 00:55:03.239
It basically, like I showed you, you can do
dash dash html report.

00:55:03.239 --> 00:55:09.049
You can also emit XML reports.

00:55:09.049 --> 00:55:10.829
That's what the plug-in is using.

00:55:10.829 --> 00:55:16.090
That's basically how you set up Lint running
so you can basically blame people when they

00:55:16.090 --> 00:55:18.920
increase the error count.

00:55:18.920 --> 00:55:23.869
At the fireside yesterday someone asked, well,
can I add my own Lint rules?

00:55:23.869 --> 00:55:25.329
The answer is, yes, you can.

00:55:25.329 --> 00:55:26.329
It's actually pretty easy.

00:55:26.329 --> 00:55:28.920
I will very briefly show you how to do that.

00:55:28.920 --> 00:55:32.130
So the use case for this will be, let's say,
in your company you have a custom view.

00:55:32.130 --> 00:55:35.609
There is some attribute that is always set.

00:55:35.609 --> 00:55:40.699
So to do this, you need two classes.

00:55:40.699 --> 00:55:41.910
Where did you put them?

00:55:41.910 --> 00:55:42.910
Okay.

00:55:42.910 --> 00:55:44.069
Two classes.

00:55:44.069 --> 00:55:48.940
Issue registry, which is as simple as this:
Register this issue, and the detector class

00:55:48.940 --> 00:55:54.130
which basically has a description, ID, summary,
and we tell Lint, hey, these are the elements

00:55:54.130 --> 00:55:55.680
I relate to.

00:55:55.680 --> 00:56:00.579
This is my custom view, and when you hit this
element, check that it has the attribute.

00:56:00.579 --> 00:56:03.470
The way you do this is, you build this file.

00:56:03.470 --> 00:56:06.299
You get this custom Lint jar file.

00:56:06.299 --> 00:56:20.849
You copy that to your .Android Lint folder,
now when I run Lint, it is showing the error,

00:56:20.849 --> 00:56:22.730
showing the detector that it is added.

00:56:22.730 --> 00:56:24.390
So I can now run Lint.

00:56:24.390 --> 00:56:28.970
I can check the specific issue on this project.

00:56:28.970 --> 00:56:32.009
It should now emit the warning that we had
in this detector.

00:56:32.009 --> 00:56:33.009
This is pretty simple.

00:56:33.009 --> 00:56:35.710
The API is evolving, but it can be done for
today.

00:56:35.710 --> 00:56:39.880
That's it for Lint for me.

00:56:39.880 --> 00:56:45.009
[ Applause ]
&gt;&gt;Xavier Ducrohet: All right, so that was

00:56:45.009 --> 00:56:48.059
it for demonstration.

00:56:48.059 --> 00:56:50.959
A quick information about our team.

00:56:50.959 --> 00:56:52.479
We work directly in OSP.

00:56:52.479 --> 00:56:56.930
If you want to see what we are doing, Tor
should do some things that are coming, you

00:56:56.930 --> 00:56:59.440
can go and get it and try it.

00:56:59.440 --> 00:57:04.150
We have a tools site where we are regularly
posting information and sometimes we post

00:57:04.150 --> 00:57:05.150
previews, also.

00:57:05.150 --> 00:57:08.900
So we encourage you to try it and give us
feedback and then if you have questions, if

00:57:08.900 --> 00:57:12.249
you want to help us, to contribute, the list
is there.

00:57:12.249 --> 00:57:16.459
You can find us on Google+ also.

00:57:16.459 --> 00:57:20.039
And we have two minutes and a half for questions.

00:57:20.039 --> 00:57:21.479
There's two mics.

00:57:21.479 --> 00:57:24.019
If you want, we'll be at the office hours
right after.

00:57:24.019 --> 00:57:30.950
If you have any question, we'd be happy to
answer.

00:57:30.950 --> 00:57:39.819
[ Applause ]
&gt;&gt;&gt; So I had a question about relative layout,

00:57:39.819 --> 00:57:44.099
and I use it a lot.

00:57:44.099 --> 00:57:45.130
It's very useful.

00:57:45.130 --> 00:57:51.469
However, when I start to refactor elements,
it messes up orientation because it doesn't

00:57:51.469 --> 00:57:55.140
refactor IDs and other elements.

00:57:55.140 --> 00:57:58.739
&gt;&gt;Tor Norbye: I guess I should go and look
at that.

00:57:58.739 --> 00:58:07.829
Would you mind filing a debug, put the details
for how to reproduce it.

00:58:07.829 --> 00:58:09.160
Any other questions?

00:58:09.160 --> 00:58:16.130
&gt;&gt;&gt; Yes, I'm working on a project right now
where I have five APKs at once and probably

00:58:16.130 --> 00:58:19.069
more in the future and some libraries.

00:58:19.069 --> 00:58:20.829
Is there anything you can say for multi-APK
support.

00:58:20.829 --> 00:58:21.829
I have all these bass scripts and Ant in four
loops, it's getting really clunky.

00:58:21.829 --> 00:58:22.829
&gt;&gt;Xavier Ducrohet: Like building all of them
at the same time?

00:58:22.829 --> 00:58:23.829
&gt;&gt;&gt; Any suggestions for making my life easier.

00:58:23.829 --> 00:58:24.930
I have a four-loop with all these Ant scripts
in it.

00:58:24.930 --> 00:58:25.930
&gt;&gt;Xavier Ducrohet: Seems like a good fix.

00:58:25.930 --> 00:58:26.930
&gt;&gt;&gt; I'm working on a project right now, I
have five APKs at once, and probably more

00:58:26.930 --> 00:58:27.930
in the future, and some libraries.

00:58:27.930 --> 00:58:28.930
Is there anything you can say for multi-APK
support, because I just got all these, like,

00:58:28.930 --> 00:58:29.930
bash scripts with, like, Ant in four loops
right now, and it's getting really funky.

00:58:29.930 --> 00:58:32.359
&gt;&gt;Xavier Ducrohet: You mean like building
all of them at the same time?

00:58:32.359 --> 00:58:34.769
&gt;&gt;&gt; Any suggestions for making my life easier?

00:58:34.769 --> 00:58:40.630
Because I've got a four loop with, like, all
these Ant scripts in it.

00:58:40.630 --> 00:58:42.640
&gt;&gt;Xavier Ducrohet: Seems like a good fix.

00:58:42.640 --> 00:58:46.589
I mean, we don't really have a project set
up for that.

00:58:46.589 --> 00:58:51.430
So any kind of automation, you know, a batch
file, another Ant script.

00:58:51.430 --> 00:58:54.961
If you have five of them, I think another
Ant script that calls your other Ant script

00:58:54.961 --> 00:58:57.619
might be better than doing some batch magic.

00:58:57.619 --> 00:58:59.720
But that's up to you really.

00:58:59.720 --> 00:59:00.720
We don't really have anything.

00:59:00.720 --> 00:59:01.720
&gt;&gt;&gt; Okay.

00:59:01.720 --> 00:59:02.720
Thank you.

00:59:02.720 --> 00:59:05.260
You could put it in line for the future.

00:59:05.260 --> 00:59:06.319
&gt;&gt;Xavier Ducrohet: Yes.

00:59:06.319 --> 00:59:11.699
&gt;&gt;&gt; I've noticed that you've kind of been
slowly ramping up support for go to definition

00:59:11.699 --> 00:59:16.499
to layout files and, like, string definitions
from within the code, as opposed to actually

00:59:16.499 --> 00:59:18.910
just going to the R object, the
generated object --

00:59:18.910 --> 00:59:19.910
&gt;&gt;&gt; Yes.

00:59:19.910 --> 00:59:20.910
&gt;&gt;&gt; -- definition.

00:59:20.910 --> 00:59:23.869
And I was just wondering, it seems like I
kind of don't know where -- like, when that's

00:59:23.869 --> 00:59:24.890
implemented and when it's not implemented.

00:59:24.890 --> 00:59:28.459
It would be nice if I could always hit F3
and go to the in-code definition.

00:59:28.459 --> 00:59:32.479
Are you planning to, like, continue to support
more types of go to definition?

00:59:32.479 --> 00:59:35.630
Or what's the plan with that?

00:59:35.630 --> 00:59:39.229
&gt;&gt;Tor Norbye: Right now, in Java files, it
will always go to the R file.

00:59:39.229 --> 00:59:42.779
And the reason for that is that we don't have
a way to actually give our resolver higher

00:59:42.779 --> 00:59:44.839
priority than the built-in Java one.

00:59:44.839 --> 00:59:46.549
So that's kind of how it works.

00:59:46.549 --> 00:59:47.549
&gt;&gt;&gt; That's an Eclipse thing?

00:59:47.549 --> 00:59:48.549
&gt;&gt;Tor Norbye: It's Eclipse, yeah.

00:59:48.549 --> 00:59:52.489
We don't have the option to sort of say, hey,
ours is more important than the Java one.

00:59:52.489 --> 00:59:57.780
Because when you jump from, you know, our
definition to an actual field, that's the

00:59:57.780 --> 00:59:58.780
Java one.

00:59:58.780 --> 01:00:00.069
Going to the XML files, that's ours.

01:00:00.069 --> 01:00:01.910
And we don't have a way to say ours is more
important.

01:00:01.910 --> 01:00:03.039
Let us come in first.

01:00:03.039 --> 01:00:06.759
&gt;&gt;&gt; But it is in some places implemented from
the XML files; right?

01:00:06.759 --> 01:00:09.319
&gt;&gt;Tor Norbye: Yes, from XML, yeah.

01:00:09.319 --> 01:00:11.170
Those should always do the right thing.

01:00:11.170 --> 01:00:12.289
If they don't, please file a bug.

01:00:12.289 --> 01:00:14.009
&gt;&gt;&gt; I don't think they work for strings.

01:00:14.009 --> 01:00:16.459
But I might have just not checked --
&gt;&gt;Tor Norbye: They're supposed to.

01:00:16.459 --> 01:00:19.769
So if they don't -- what they didn't work
for and which recently was fixed and I didn't

01:00:19.769 --> 01:00:22.959
have time to show it, but is, they should
now work for theme references.

01:00:22.959 --> 01:00:25.259
So the question mark thing that didn't used
to work, it should now.

01:00:25.259 --> 01:00:26.259
&gt;&gt;&gt; Okay.

01:00:26.259 --> 01:00:27.259
Cool.

01:00:27.259 --> 01:00:28.259
Thanks.

01:00:28.259 --> 01:00:29.259
&gt;&gt;Xavier Ducrohet: We're running out of time.

01:00:29.259 --> 01:00:32.150
As we said, we'll be at the office hours on
the third floor over there.

01:00:32.150 --> 01:00:34.209
Feel free to come and ask us questions.

01:00:34.209 --> 01:00:36.279
We will be happy to talk to you.

01:00:36.279 --> 01:00:36.799
Thank you.

