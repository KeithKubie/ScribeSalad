WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.640
[MUSIC PLAYING]

00:00:05.640 --> 00:00:08.210
ARPIT MIDHA: Hi, everyone.

00:00:08.210 --> 00:00:09.200
I'm Arpit.

00:00:09.200 --> 00:00:11.385
I'm the lead PM for Android Go.

00:00:11.385 --> 00:00:13.010
PATRIK TORSTENSSON:
And hi, I'm Patrik.

00:00:13.010 --> 00:00:16.219
I'm the technical
lead for Android Go.

00:00:16.219 --> 00:00:17.510
ARPIT MIDHA: All right.

00:00:17.510 --> 00:00:23.210
So I want to start first by
sharing a personal story.

00:00:23.210 --> 00:00:28.820
Back in 2010, there was a spike
in farmer suicides in India,

00:00:28.820 --> 00:00:32.780
following a really, really
terrible monsoon season.

00:00:32.780 --> 00:00:35.420
I was very moved by it.

00:00:35.420 --> 00:00:38.360
A bunch of friends
and I got together,

00:00:38.360 --> 00:00:42.550
and we started a company
to sell weather insurance

00:00:42.550 --> 00:00:44.420
to the farmers of India.

00:00:44.420 --> 00:00:49.190
We traveled through states of
Maharashtra and Andhra Pradesh

00:00:49.190 --> 00:00:52.370
to meet these farmers,
talk to hundreds of them,

00:00:52.370 --> 00:00:54.710
and test our prototypes out.

00:00:54.710 --> 00:00:57.220
What I learned was
very astonishing.

00:00:57.220 --> 00:01:00.620
It appeared the cool,
innovative products

00:01:00.620 --> 00:01:04.970
like rain-indexed weather
insurance already existed,

00:01:04.970 --> 00:01:07.100
but very few knew of it.

00:01:07.100 --> 00:01:08.960
Very few carried it.

00:01:08.960 --> 00:01:12.330
And you know, the vast
majority didn't know about it.

00:01:12.330 --> 00:01:14.770
And it wasn't for
the lack of trying

00:01:14.770 --> 00:01:16.550
that they didn't know about it.

00:01:16.550 --> 00:01:18.770
Hacks existed in the market.

00:01:18.770 --> 00:01:23.570
Even the poorest tenant
farmer had a feature phone

00:01:23.570 --> 00:01:27.110
that gave him daily text
messages about the commodity

00:01:27.110 --> 00:01:28.970
prices that evening.

00:01:28.970 --> 00:01:34.400
So what I'm trying to say
is the thirst for knowledge

00:01:34.400 --> 00:01:38.900
is alive and kicking, and
yet the access to information

00:01:38.900 --> 00:01:41.070
is lacking.

00:01:41.070 --> 00:01:45.950
And that access is
only a smartphone away.

00:01:45.950 --> 00:01:49.580
But the jump from a
handed-down feature phone

00:01:49.580 --> 00:01:52.520
to the smartphone
with internet is

00:01:52.520 --> 00:01:56.360
too high for billions
of people out there.

00:01:56.360 --> 00:01:59.830
And it is our moral duty
to lower those barriers.

00:02:03.400 --> 00:02:08.410
We, at Google, believe that
this access to information

00:02:08.410 --> 00:02:12.190
should never be at
the cost of quality.

00:02:12.190 --> 00:02:15.060
And that is the reason
we started the project

00:02:15.060 --> 00:02:18.400
we internally call Android Go.

00:02:18.400 --> 00:02:23.210
Android Go is the next
phase of Google's investment

00:02:23.210 --> 00:02:27.970
after Project Svelte, the
original Android One program,

00:02:27.970 --> 00:02:32.620
to connect the people who
don't have the access to power

00:02:32.620 --> 00:02:37.570
of computing today and
are not connected today.

00:02:37.570 --> 00:02:41.160
There are three hurdles
to that access today,

00:02:41.160 --> 00:02:43.900
and the first and the
most important of it

00:02:43.900 --> 00:02:46.210
is device affordability.

00:02:46.210 --> 00:02:47.830
OK, I'm going to take a poll.

00:02:47.830 --> 00:02:54.190
How many of you here use a cell
phone that is less than $100?

00:02:54.190 --> 00:02:57.260
Raise your hands.

00:02:57.260 --> 00:02:58.930
Yeah.

00:02:58.930 --> 00:02:59.560
That is true.

00:02:59.560 --> 00:03:01.060
So now what I'm
about to say, you'll

00:03:01.060 --> 00:03:04.600
understand much better,
which is I personally dogfood

00:03:04.600 --> 00:03:07.000
a lot of entry-level devices.

00:03:07.000 --> 00:03:11.530
And I can tell you the
experience is very humbling.

00:03:11.530 --> 00:03:18.130
So what we're doing for
device affordability is--

00:03:18.130 --> 00:03:21.550
the first thing we
need to do is optimize

00:03:21.550 --> 00:03:27.880
our OS to run on the lowest
common denominator of SOCs,

00:03:27.880 --> 00:03:31.630
memory chipsets,
and screens, memory

00:03:31.630 --> 00:03:35.920
as low as 512 megabytes of RAM.

00:03:35.920 --> 00:03:38.130
But you all know here--
you're developers--

00:03:38.130 --> 00:03:40.180
OS isn't the game, right?

00:03:40.180 --> 00:03:43.390
The access to information
comes through apps.

00:03:43.390 --> 00:03:46.690
So we're not just
optimizing our OS.

00:03:46.690 --> 00:03:50.380
We're also optimizing our
apps, and then sometimes,

00:03:50.380 --> 00:03:53.470
writing new ones to
meet the requirements

00:03:53.470 --> 00:03:55.270
of the next billion users.

00:04:02.560 --> 00:04:05.770
The most important
factor in all of this

00:04:05.770 --> 00:04:10.180
is not the apps we build, but
the apps that you all build.

00:04:10.180 --> 00:04:13.870
And Patrik and I want to take
this opportunity talk to you

00:04:13.870 --> 00:04:17.950
about how can you write your
apps for these next billion

00:04:17.950 --> 00:04:20.500
users?

00:04:20.500 --> 00:04:23.050
The next biggest
hurdle to information

00:04:23.050 --> 00:04:27.200
after device affordability
is data affordability.

00:04:27.200 --> 00:04:30.040
So when I talk to people
who aren't connected yet,

00:04:30.040 --> 00:04:32.890
they tell me they
want to use data.

00:04:32.890 --> 00:04:34.780
They're willing to pay for it.

00:04:34.780 --> 00:04:37.120
But they're very afraid.

00:04:37.120 --> 00:04:40.750
Data is still very expensive
in large parts of the world.

00:04:40.750 --> 00:04:42.080
It's like money to them.

00:04:42.080 --> 00:04:45.430
MBs are like the
new social currency.

00:04:45.430 --> 00:04:46.240
I kid you not.

00:04:46.240 --> 00:04:50.590
There are young people out there
who gift their lovers 100 MB

00:04:50.590 --> 00:04:51.910
data packs.

00:04:51.910 --> 00:04:53.470
I'm not joking about that.

00:04:53.470 --> 00:04:54.890
That's actually true.

00:04:54.890 --> 00:04:56.380
It is like currency.

00:04:56.380 --> 00:04:59.740
So these users are
willing to come online.

00:04:59.740 --> 00:05:04.690
They're willing to pay as long
as they get control over where

00:05:04.690 --> 00:05:07.570
their precious MBs are spent.

00:05:07.570 --> 00:05:12.540
And that is the reason why we're
building features into our OS

00:05:12.540 --> 00:05:17.830
and in our apps that increase
the level of data transparency

00:05:17.830 --> 00:05:21.100
as well as can give
them additional controls

00:05:21.100 --> 00:05:23.500
to control their data.

00:05:23.500 --> 00:05:27.730
The third biggest factor and
hurdle that we want to overcome

00:05:27.730 --> 00:05:30.250
is linguistic flexibility.

00:05:30.250 --> 00:05:34.380
Now, this is not simply adding
more languages to the OS.

00:05:34.380 --> 00:05:38.560
Our users are increasingly
wanting an exposure

00:05:38.560 --> 00:05:40.960
to a second language.

00:05:40.960 --> 00:05:44.170
People want their
iOS to be in English,

00:05:44.170 --> 00:05:48.010
but they want their special
messaging app to be in Spanish.

00:05:48.010 --> 00:05:52.630
The same complexity exists
in typing preferences,

00:05:52.630 --> 00:05:57.100
in searching preferences, and
in my farmers' case, in browsing

00:05:57.100 --> 00:05:58.770
government websites.

00:05:58.770 --> 00:06:01.930
So we're building features
into our apps that

00:06:01.930 --> 00:06:06.070
accommodate for this
evolution of language

00:06:06.070 --> 00:06:10.010
and the preferences of
the next billion users.

00:06:10.010 --> 00:06:12.620
So let's jump right in.

00:06:12.620 --> 00:06:17.740
Let's let Patrik tell you
how we are solving for device

00:06:17.740 --> 00:06:21.430
affordability through
performance, data affordability

00:06:21.430 --> 00:06:23.950
through better controls
and transparency,

00:06:23.950 --> 00:06:27.330
and how we're solving for
linguistic flexibility

00:06:27.330 --> 00:06:29.160
through multilingualism
in our apps.

00:06:29.160 --> 00:06:29.660
Thanks.

00:06:35.084 --> 00:06:36.500
PATRIK TORSTENSSON:
Thanks, Arpit.

00:06:36.500 --> 00:06:39.620
So let's dive into what we're
doing to optimize the phone

00:06:39.620 --> 00:06:41.030
experience.

00:06:41.030 --> 00:06:44.270
We're improving everything
from the kernel to third party

00:06:44.270 --> 00:06:45.260
applications.

00:06:47.910 --> 00:06:51.610
So let's start with
the kernel, most

00:06:51.610 --> 00:06:54.320
our work in this area
being around the integrated

00:06:54.320 --> 00:06:58.310
Android lifecycle
management with Linux.

00:06:58.310 --> 00:07:01.250
First we spend time
on tuning the kernel

00:07:01.250 --> 00:07:05.270
to be more optimized for
the entry-level devices.

00:07:05.270 --> 00:07:07.580
This seems like a
simple task, but it

00:07:07.580 --> 00:07:09.620
involves a lot of
nitty gritty details

00:07:09.620 --> 00:07:13.910
like tuning cache sizes,
tuning swapping, tuning

00:07:13.910 --> 00:07:16.070
all kind of
threading parameters,

00:07:16.070 --> 00:07:17.780
as Linux, for a
long time, has been

00:07:17.780 --> 00:07:19.280
optimized for the server side.

00:07:19.280 --> 00:07:21.760
Even though Android has
done a lot of changes,

00:07:21.760 --> 00:07:23.870
there's still a lot to do there.

00:07:23.870 --> 00:07:29.030
Then we implemented prioritized
reclaiming of memory.

00:07:29.030 --> 00:07:30.830
I'll go into more
details about that

00:07:30.830 --> 00:07:33.930
soon as it's a key part
of what we've done.

00:07:33.930 --> 00:07:36.830
And we've done better
integration of memory events

00:07:36.830 --> 00:07:39.320
from Linux, allowing
us to be much more

00:07:39.320 --> 00:07:44.210
proactive with cleaning
up apps in the background

00:07:44.210 --> 00:07:46.380
and making sure we have
more memory available.

00:07:49.240 --> 00:07:52.770
So Android Go use
Linux control groups

00:07:52.770 --> 00:07:55.500
that enables better
resource management.

00:07:55.500 --> 00:07:59.100
Cgroups, as called in Linux,
isolate each application

00:07:59.100 --> 00:08:02.790
and allows Android to
prioritize memory collection

00:08:02.790 --> 00:08:05.130
and swapping for
each application.

00:08:05.130 --> 00:08:09.420
We have then integrated
that with Android's activity

00:08:09.420 --> 00:08:10.530
management.

00:08:10.530 --> 00:08:13.410
And that allows us to be much
more aggressive in swapping

00:08:13.410 --> 00:08:16.380
away memory for low
priority processes

00:08:16.380 --> 00:08:19.550
and better in selecting
which processes to stop.

00:08:19.550 --> 00:08:22.470
Overall, this results
in more memory

00:08:22.470 --> 00:08:26.790
being available for important
applications, hence yours,

00:08:26.790 --> 00:08:30.220
and leading to a smoother
user experience even on a 512

00:08:30.220 --> 00:08:32.610
megabyte to one gig device.

00:08:32.610 --> 00:08:34.460
To reduce the number
of memory pages

00:08:34.460 --> 00:08:38.429
Androids are using, we've
optimized how DEX files are

00:08:38.429 --> 00:08:40.500
laid out in memory,
as they currently

00:08:40.500 --> 00:08:44.130
tend to consume quite
a lot of clean pages,

00:08:44.130 --> 00:08:47.740
leading to more swapping
on entry-level devices.

00:08:47.740 --> 00:08:51.540
We're using profiling
to redo the DEX layout

00:08:51.540 --> 00:08:53.790
and co-locate them.

00:08:53.790 --> 00:08:56.130
As you can see in
this picture, we're

00:08:56.130 --> 00:08:59.880
taking code pages that are
used and then bundling them

00:08:59.880 --> 00:09:00.720
together.

00:09:00.720 --> 00:09:03.210
And therefore, we're also
creating more clean space

00:09:03.210 --> 00:09:05.160
for the kernel to collect.

00:09:05.160 --> 00:09:08.730
This improves both startup
time and memory usage.

00:09:08.730 --> 00:09:10.320
It's also allowing,
then, the kernel

00:09:10.320 --> 00:09:13.015
to be much more aggressive
of collecting code pages

00:09:13.015 --> 00:09:14.545
that is not used
on that platform.

00:09:17.870 --> 00:09:21.470
So we are doing innovations
in the UI design.

00:09:21.470 --> 00:09:24.300
Let's talk about
recents as an example.

00:09:24.300 --> 00:09:27.230
95% of the time,
our entry-level user

00:09:27.230 --> 00:09:31.280
only switch between their
four recent applications.

00:09:31.280 --> 00:09:35.870
So we redesigned the UI
to enable faster switching

00:09:35.870 --> 00:09:40.220
and save memory by reducing
memory intensive bitmaps.

00:09:40.220 --> 00:09:44.060
This is just one example
of optimizations in the UI

00:09:44.060 --> 00:09:46.340
that we're doing
to make it smoother

00:09:46.340 --> 00:09:50.870
but also to fit the form
factor, as it's very different,

00:09:50.870 --> 00:09:53.600
and, of course, like
you will hear many times

00:09:53.600 --> 00:09:55.410
during my talks, save memory.

00:09:57.980 --> 00:10:01.760
So we are rearchitecturing
Google Play Services.

00:10:01.760 --> 00:10:06.350
We're splitting the API
services into dynamic modules.

00:10:06.350 --> 00:10:09.200
This reduces disk
footprint, which

00:10:09.200 --> 00:10:12.830
is also a critical thing on
these devices, but also--

00:10:12.830 --> 00:10:16.220
take a guess-- reducing
the memory footprint.

00:10:16.220 --> 00:10:18.290
This is very important
as there are still

00:10:18.290 --> 00:10:22.850
a lot of APIs in Google
Play Services not used

00:10:22.850 --> 00:10:24.950
on entry-level devices
in these markets.

00:10:29.040 --> 00:10:32.580
And, of course, we're working
on making applications

00:10:32.580 --> 00:10:37.060
to take less space, less memory,
and consume less network.

00:10:37.060 --> 00:10:40.710
We designed some brand new
Google apps like YouTube Go,

00:10:40.710 --> 00:10:42.600
but we're also
optimizing our existing

00:10:42.600 --> 00:10:47.400
apps like Chrome and Play and a
lot of the pre-installed apps.

00:10:47.400 --> 00:10:49.200
These new Google
apps aim to take

00:10:49.200 --> 00:10:52.050
less than 10 meg of
APK size, and I'll

00:10:52.050 --> 00:10:55.500
talk more why 10 meg later on.

00:10:55.500 --> 00:10:59.010
Our OEM and carrier partners
are also joining us,

00:10:59.010 --> 00:11:03.990
and we'll be creating
optimized versions specifically

00:11:03.990 --> 00:11:07.230
for the entry-level
devices to make sure

00:11:07.230 --> 00:11:09.210
that we keep the promise
of the quality we want

00:11:09.210 --> 00:11:10.695
to deliver for this platform.

00:11:16.132 --> 00:11:17.090
ARPIT MIDHA: All right.

00:11:17.090 --> 00:11:22.350
So I'll talk about how we're
solving for data affordability.

00:11:22.350 --> 00:11:26.510
I talked to you
about how important

00:11:26.510 --> 00:11:32.510
it is for this set of users
to have better controls

00:11:32.510 --> 00:11:36.950
and transparency about their
data, told you that is the key.

00:11:36.950 --> 00:11:42.360
So today, users have to type
in a really complicated code--

00:11:42.360 --> 00:11:46.940
*#125-- some number, followed
by another complicated set

00:11:46.940 --> 00:11:49.930
of characters-- to find
out their data balance.

00:11:49.930 --> 00:11:52.830
We want to make this
super, super easy.

00:11:52.830 --> 00:11:56.480
We want to make this directly
accessible with a downswipe

00:11:56.480 --> 00:11:58.730
from your Quick Settings.

00:11:58.730 --> 00:12:02.030
Now to do that,
we're creating an API

00:12:02.030 --> 00:12:05.240
where third party
developers or carriers could

00:12:05.240 --> 00:12:09.620
provide this information to
the users by each data pack.

00:12:09.620 --> 00:12:12.890
So for their 4G data
pack, their 3G data pack,

00:12:12.890 --> 00:12:17.300
their social media data back,
and so on, all those balances

00:12:17.300 --> 00:12:21.170
would be available to the user
right at their fingertips.

00:12:21.170 --> 00:12:24.480
Now the next thing,
once they come online,

00:12:24.480 --> 00:12:26.300
we want them to
stay online, right?

00:12:26.300 --> 00:12:30.860
So imagine it's your
regular Sunday afternoon.

00:12:30.860 --> 00:12:34.940
You're on your little messaging
thread with your family,

00:12:34.940 --> 00:12:37.520
a heated political
debate comes up,

00:12:37.520 --> 00:12:40.970
your uncle just says the
most provocative thing ever,

00:12:40.970 --> 00:12:43.180
and you have a witty comeback.

00:12:43.180 --> 00:12:45.350
But bam-- your data runs out.

00:12:45.350 --> 00:12:46.610
You don't want that to happen.

00:12:46.610 --> 00:12:47.630
It's happened to me.

00:12:47.630 --> 00:12:49.580
You really don't
want that to happen.

00:12:49.580 --> 00:12:54.500
But jokes apart, our users
actually travel for kilometers

00:12:54.500 --> 00:12:57.920
to recharge their phones
or top up their phones.

00:12:57.920 --> 00:13:00.500
And oftentimes, when
they reach that far,

00:13:00.500 --> 00:13:02.630
they still don't know,
and even the seller

00:13:02.630 --> 00:13:06.770
doesn't know, what the latest
promotion by the carrier is.

00:13:06.770 --> 00:13:11.180
So what we want to do is
create an API for the carriers

00:13:11.180 --> 00:13:14.720
to provide this latest
information to the users

00:13:14.720 --> 00:13:17.750
and enable you to
top up your data

00:13:17.750 --> 00:13:20.120
plans right there on the phone.

00:13:20.120 --> 00:13:22.610
So that's how we
plan to do that.

00:13:22.610 --> 00:13:27.620
The next, these users
see apps using data

00:13:27.620 --> 00:13:30.920
in the background as a
hole in their wallet.

00:13:30.920 --> 00:13:32.270
They hate it.

00:13:32.270 --> 00:13:34.430
They hate it so much
that they will either

00:13:34.430 --> 00:13:37.310
turn off the data altogether
in the phone, which

00:13:37.310 --> 00:13:39.140
harms the whole
point of this, which

00:13:39.140 --> 00:13:42.830
is to get them data information,
or they delete your apps.

00:13:42.830 --> 00:13:44.480
They just absolutely
delete your apps,

00:13:44.480 --> 00:13:47.450
which is horrible because you
worked so hard to make them.

00:13:47.450 --> 00:13:51.650
So what we want to do is give
them controls so that they

00:13:51.650 --> 00:13:56.240
can choose which
apps get their MBs

00:13:56.240 --> 00:13:59.420
or which apps choose it when.

00:13:59.420 --> 00:14:01.940
So that's how the
OS is working hard

00:14:01.940 --> 00:14:04.680
to make sure that there's
transparency and controls.

00:14:04.680 --> 00:14:07.910
But our apps also pitch in.

00:14:07.910 --> 00:14:09.650
Let's talk about Chrome.

00:14:09.650 --> 00:14:12.320
Chrome has already
launched this feature out.

00:14:12.320 --> 00:14:18.590
And today, it is already saving
750 terabytes of data a day

00:14:18.590 --> 00:14:20.960
for the early adopters.

00:14:20.960 --> 00:14:24.110
On Chrome, data
in Android Chrome,

00:14:24.110 --> 00:14:27.230
Chrome's Data Saver features
will be turned on for default

00:14:27.230 --> 00:14:29.270
so they don't have to opt in.

00:14:29.270 --> 00:14:33.470
And what it does, it
transcodes data on its servers

00:14:33.470 --> 00:14:34.860
before it reaches you.

00:14:34.860 --> 00:14:37.970
Therefore, that's
how we save you data.

00:14:37.970 --> 00:14:41.960
Second, it also detects when
you are on a lowest connection,

00:14:41.960 --> 00:14:44.590
and then gives you
previews of pages,

00:14:44.590 --> 00:14:46.820
that way helping
you load the page

00:14:46.820 --> 00:14:49.910
and get the information faster.

00:14:49.910 --> 00:14:53.220
That just Chrome.

00:14:53.220 --> 00:14:56.510
I want to talk about my
favorite one of this.

00:14:56.510 --> 00:15:01.730
YouTube Go is an app that
we had to build from scratch

00:15:01.730 --> 00:15:04.190
to meet the hard requirements
that we put on ourselves.

00:15:04.190 --> 00:15:07.380
Once you start putting in the
requirements of the lowest end

00:15:07.380 --> 00:15:11.780
SSEs and memory and the needs
of the next billion users,

00:15:11.780 --> 00:15:14.400
we had to build
this from scratch.

00:15:14.400 --> 00:15:18.990
Now, how many of you look for
music videos on YouTube Go?

00:15:18.990 --> 00:15:20.420
All of you, right?

00:15:20.420 --> 00:15:24.710
So isn't it frustrating when
you want to download and look

00:15:24.710 --> 00:15:27.680
at the latest Adele
song, and it turns out

00:15:27.680 --> 00:15:30.690
to be another fan's
karaoke video?

00:15:30.690 --> 00:15:31.310
Yeah, right?

00:15:31.310 --> 00:15:34.190
So imagine that
frustration, even

00:15:34.190 --> 00:15:36.830
with people who have
little data balance.

00:15:36.830 --> 00:15:39.380
That's really, really
disappointing for them.

00:15:39.380 --> 00:15:43.670
So we built the preview
feature so that people preview

00:15:43.670 --> 00:15:45.500
what they're about
to watch before they

00:15:45.500 --> 00:15:48.600
spend their precious
few MBs doing that.

00:15:48.600 --> 00:15:50.810
And again, in this
next billion users,

00:15:50.810 --> 00:15:56.120
you can't assume the similar
or constant data rates

00:15:56.120 --> 00:15:57.190
throughout the day.

00:15:57.190 --> 00:16:00.030
You can't assume the same
level of connectivity.

00:16:00.030 --> 00:16:03.290
So we want to give users,
again, additional control

00:16:03.290 --> 00:16:06.910
to choose the quality of the
video they want to watch.

00:16:06.910 --> 00:16:09.830
Next, some of the
users might have

00:16:09.830 --> 00:16:11.910
a free Wi-Fi in their office.

00:16:11.910 --> 00:16:13.880
So we want them to
have the ability

00:16:13.880 --> 00:16:16.500
to download these videos and
watch them on their bus ride

00:16:16.500 --> 00:16:17.910
back.

00:16:17.910 --> 00:16:19.020
And the best of all--

00:16:19.020 --> 00:16:22.560
I don't know about you, but
when I see a funny video,

00:16:22.560 --> 00:16:25.250
I have to share it, right?

00:16:25.250 --> 00:16:27.720
But I don't want these
next billion users--

00:16:27.720 --> 00:16:30.030
or we don't want this
next billion users--

00:16:30.030 --> 00:16:33.570
to have them pay for that
video and have their friends

00:16:33.570 --> 00:16:35.020
pay for it, too.

00:16:35.020 --> 00:16:38.580
So we're building offline
peer-to-peer sharing

00:16:38.580 --> 00:16:41.010
of videos within YouTube
so that you don't

00:16:41.010 --> 00:16:43.650
have to pay for cellular data.

00:16:43.650 --> 00:16:46.150
So that's how we're
saving for data.

00:16:46.150 --> 00:16:49.473
Now let's talk about solving
for linguistic flexibility.

00:16:52.770 --> 00:16:55.920
When you want to express
your thoughts and your ideas,

00:16:55.920 --> 00:16:57.717
Google Keyboard will
come to your rescue.

00:16:57.717 --> 00:16:59.550
And this time I'm not
going to talk over it.

00:16:59.550 --> 00:17:03.070
I'm just going to show you, and
we'll have some fun doing it.

00:17:03.070 --> 00:17:05.200
Patrik, I'll need your help.

00:17:05.200 --> 00:17:09.359
All right, if we can
switch to my cell phone?

00:17:12.920 --> 00:17:13.970
All right.

00:17:13.970 --> 00:17:17.960
So Patrik is here.

00:17:17.960 --> 00:17:21.380
And I grew up in India,
so I speak Hindi.

00:17:21.380 --> 00:17:28.610
So I want to switch over to
typing phonetically in Hindi,

00:17:28.610 --> 00:17:30.110
but I want to write
to him in Hindi.

00:17:30.110 --> 00:17:36.140
So let's say
[SPEAKING HINDI] which

00:17:36.140 --> 00:17:38.210
means, "How are you, friend?"

00:17:38.210 --> 00:17:41.180
And I'm typing in English
letters phonetically,

00:17:41.180 --> 00:17:44.060
it's going to him, and it's
typing out in Hindi script,

00:17:44.060 --> 00:17:45.040
and it goes to him.

00:17:49.090 --> 00:17:53.560
But it so turns out
that he is Swedish.

00:17:53.560 --> 00:17:54.910
He doesn't get my Hindi, right?

00:17:54.910 --> 00:17:56.050
So that sucks.

00:17:56.050 --> 00:17:57.220
So what can I do?

00:17:57.220 --> 00:18:01.300
So again, Google
Keyboard to the rescue.

00:18:01.300 --> 00:18:03.430
I'll switch to translations.

00:18:03.430 --> 00:18:07.750
Now I'm going to type in English
letters in my native script,

00:18:07.750 --> 00:18:09.040
and still send it to him.

00:18:09.040 --> 00:18:10.570
So let's try this again.

00:18:10.570 --> 00:18:18.340
[SPEAKING HINDI] It
translates to Swedish for me,

00:18:18.340 --> 00:18:21.550
and there you go.

00:18:21.550 --> 00:18:23.980
So if that doesn't get
the geek out of you,

00:18:23.980 --> 00:18:25.829
then nothing else will.

00:18:25.829 --> 00:18:31.320
[APPLAUSE]

00:18:31.320 --> 00:18:33.030
So that was Google
Keyboard, right?

00:18:33.030 --> 00:18:36.750
So this is how you can
express yourself better.

00:18:36.750 --> 00:18:40.830
And beyond that, Google Keyboard
has 191 languages supported,

00:18:40.830 --> 00:18:42.420
22 Indian languages supported.

00:18:42.420 --> 00:18:43.650
So this is all good.

00:18:43.650 --> 00:18:46.580
But what if you want to
consume information, right?

00:18:46.580 --> 00:18:51.390
And at that point, Chrome comes.

00:18:51.390 --> 00:18:53.870
So Chrome will
automatically detect--

00:18:53.870 --> 00:18:55.950
or Chrome, it already detects--

00:18:55.950 --> 00:18:58.440
what your OS's language is.

00:18:58.440 --> 00:19:00.780
And any time you
access information

00:19:00.780 --> 00:19:03.720
on a page that is different
from your phone's language,

00:19:03.720 --> 00:19:07.560
it gives you proactive
suggestions to translate it.

00:19:07.560 --> 00:19:09.000
And here's an example of that.

00:19:09.000 --> 00:19:10.740
So that'll help you
consume information.

00:19:10.740 --> 00:19:12.484
It'll help that
farmer I talked about

00:19:12.484 --> 00:19:14.400
consume the information
in the language that's

00:19:14.400 --> 00:19:16.620
most comfortable to him.

00:19:16.620 --> 00:19:19.540
So that's all the translations.

00:19:19.540 --> 00:19:22.620
But you may ask,
why does it matter?

00:19:22.620 --> 00:19:25.650
Why should you care?

00:19:25.650 --> 00:19:28.470
PATRIK TORSTENSSON: So
let's dig into that.

00:19:28.470 --> 00:19:32.040
So one third of the
global shipments in 2017

00:19:32.040 --> 00:19:34.920
will be sub-hundred
dollar devices.

00:19:34.920 --> 00:19:36.990
This is a must
segment for developers

00:19:36.990 --> 00:19:39.610
that are focusing on
the growing user base

00:19:39.610 --> 00:19:41.930
or focused on the mass market.

00:19:41.930 --> 00:19:43.420
So you may be
thinking this is, you

00:19:43.420 --> 00:19:45.750
know, [INAUDIBLE]
market problem,

00:19:45.750 --> 00:19:48.720
but it turns out
that's not true.

00:19:48.720 --> 00:19:51.140
This is not [INAUDIBLE]
market product.

00:19:51.140 --> 00:19:55.470
US is the second largest market
for sub-hundred dollar devices,

00:19:55.470 --> 00:19:59.040
as it's a huge prepaid market.

00:19:59.040 --> 00:20:02.630
Therefore, we're announcing,
starting with OMR 1,

00:20:02.630 --> 00:20:05.340
all devices shipping
with one gig or less RAM

00:20:05.340 --> 00:20:07.970
will get Android
Go configuration.

00:20:07.970 --> 00:20:10.620
And going forward,
other releases

00:20:10.620 --> 00:20:13.150
will have a Go configuration.

00:20:13.150 --> 00:20:14.910
So this is a sustained
effort that we'll

00:20:14.910 --> 00:20:16.650
continue developing over time.

00:20:19.870 --> 00:20:23.290
So optimized Google
apps is a good start.

00:20:23.290 --> 00:20:27.280
But it's your apps
that will really

00:20:27.280 --> 00:20:31.220
solve the needs of the
next billion users.

00:20:31.220 --> 00:20:33.460
So let's see some hands.

00:20:33.460 --> 00:20:36.960
How many in here are optimizing
for entry-level devices today?

00:20:39.950 --> 00:20:41.690
Yeah, that's quite few.

00:20:41.690 --> 00:20:46.550
How many in here think they need
to optimize for low-end devices

00:20:46.550 --> 00:20:48.500
going forward?

00:20:48.500 --> 00:20:50.030
That's a lot more.

00:20:50.030 --> 00:20:51.090
That's very positive.

00:20:51.090 --> 00:20:54.940
I hope I see more hands next
year during the first question.

00:20:54.940 --> 00:21:00.380
And to be honest, several of
you have already jumped in,

00:21:00.380 --> 00:21:03.290
like Skype and Limelight.

00:21:03.290 --> 00:21:06.230
And I hope that many more
of you, after this talk,

00:21:06.230 --> 00:21:10.250
will start thinking seriously
about these devices,

00:21:10.250 --> 00:21:14.720
either develop new apps or
optimizing your existing apps.

00:21:17.590 --> 00:21:20.260
So we at Android Go, we have
added [? target ?] [? to ?]

00:21:20.260 --> 00:21:23.740
[? game ?] to the Play Store
to help such apps get better

00:21:23.740 --> 00:21:25.520
distribution.

00:21:25.520 --> 00:21:28.150
And we'll continue
surfacing these apps

00:21:28.150 --> 00:21:32.320
in more ways in the Play
Store for entry-level devices.

00:21:32.320 --> 00:21:36.980
We will also optimize the
Play Store to save more data,

00:21:36.980 --> 00:21:39.640
as data is very
important in this market.

00:21:39.640 --> 00:21:43.465
So we'll be supporting
secure peer-to-peer transfer

00:21:43.465 --> 00:21:46.120
and installation of apps.

00:21:46.120 --> 00:21:50.290
And we'll also support delaying
your download of the apps

00:21:50.290 --> 00:21:53.426
to a point when you may have a
better data plan because it's

00:21:53.426 --> 00:21:55.300
quite common in these
countries that you have

00:21:55.300 --> 00:21:57.370
much cheaper data
during night when

00:21:57.370 --> 00:22:00.437
it's less congestion
on the networks.

00:22:00.437 --> 00:22:01.270
So that's a feature.

00:22:01.270 --> 00:22:04.540
You will be able to say, hey,
download this automatically

00:22:04.540 --> 00:22:06.460
when I have a
lower-cost data plan.

00:22:06.460 --> 00:22:09.430
And the app will take care of
understanding when in time that

00:22:09.430 --> 00:22:09.930
is.

00:22:13.190 --> 00:22:15.150
So all of this is
what we are doing.

00:22:15.150 --> 00:22:18.870
And it's an continuing,
ongoing effort as we speak.

00:22:18.870 --> 00:22:24.360
Let's dive into what you should
be doing as app developers.

00:22:24.360 --> 00:22:27.530
First, let's talk about
data connectivity.

00:22:27.530 --> 00:22:30.410
3G and LTE is growing
around the world,

00:22:30.410 --> 00:22:32.540
and we're very happy for that.

00:22:32.540 --> 00:22:36.960
And 80% of the smartphone growth
is in the emerging markets.

00:22:36.960 --> 00:22:42.620
But 2G will still be over
a billion devices in 2020.

00:22:42.620 --> 00:22:45.710
So therefore, it's
important to design

00:22:45.710 --> 00:22:49.760
apps that can handle slow
and flaky connectivity.

00:22:49.760 --> 00:22:53.720
And it's important to create a
useful experience for the users

00:22:53.720 --> 00:22:56.660
without or on bad networks.

00:22:56.660 --> 00:23:00.470
And don't forget to adjust when
that changes, because networks

00:23:00.470 --> 00:23:07.200
in these countries is quite
flaky and comes and goes,

00:23:07.200 --> 00:23:10.790
so you may have a very fast
4G, then you end up on Wi-Fi,

00:23:10.790 --> 00:23:12.830
then you have no connectivity.

00:23:12.830 --> 00:23:15.620
So think about
optimizing for this

00:23:15.620 --> 00:23:19.910
and use the APIs that exist in
the platform to detect this.

00:23:19.910 --> 00:23:23.000
One way to improve this
handling, as shown here,

00:23:23.000 --> 00:23:26.780
is to prioritize text
over heavy images,

00:23:26.780 --> 00:23:30.560
so show something relevant
to the user while you can,

00:23:30.560 --> 00:23:33.260
because you don't know if the
connectivity will disappear

00:23:33.260 --> 00:23:34.790
or become bad or worse.

00:23:37.730 --> 00:23:40.400
So low-end devices
will continue to be

00:23:40.400 --> 00:23:43.950
memory restricted for quite
some time going forward.

00:23:43.950 --> 00:23:46.250
So be efficient of
how you use memory,

00:23:46.250 --> 00:23:50.150
have short-lived services,
eliminate unused--

00:23:50.150 --> 00:23:54.080
unneeded wakeups, use
Firebase job dispatcher

00:23:54.080 --> 00:23:57.020
to handle network tasks.

00:23:57.020 --> 00:23:59.270
It's both network
and battery aware.

00:23:59.270 --> 00:24:01.830
You can set policies
around saying, hey,

00:24:01.830 --> 00:24:06.620
I only want to do this task if
it's on a unmetered network.

00:24:06.620 --> 00:24:09.110
Have this same retry
policy so that you

00:24:09.110 --> 00:24:11.380
don't consume a lot
of power and battery

00:24:11.380 --> 00:24:15.110
without gaining
anything for the users.

00:24:15.110 --> 00:24:19.850
Use activity manager is low
RAM to adjust the experience

00:24:19.850 --> 00:24:21.800
and memory usage of
your application,

00:24:21.800 --> 00:24:24.410
as that will be
one of the ways we

00:24:24.410 --> 00:24:28.230
will signal you're on
the Android Go platform.

00:24:28.230 --> 00:24:31.570
And that includes
optimizing your images,

00:24:31.570 --> 00:24:33.290
as they can be quite big.

00:24:33.290 --> 00:24:36.650
And these devices are
normally small displays, not

00:24:36.650 --> 00:24:38.960
a high resolution,
not the best screen.

00:24:38.960 --> 00:24:41.510
So there is no need
to save the images

00:24:41.510 --> 00:24:43.550
in super high resolution.

00:24:43.550 --> 00:24:46.040
But also, size your
caches correctly.

00:24:46.040 --> 00:24:49.990
Think about how much you're
caching, and anything else

00:24:49.990 --> 00:24:51.560
that may take memory.

00:24:51.560 --> 00:24:54.510
There'll be a constant
trade off on these devices.

00:24:54.510 --> 00:24:57.850
So think through what
kind of experience

00:24:57.850 --> 00:25:00.590
you are trying to
give your users.

00:25:00.590 --> 00:25:01.940
And also, test.

00:25:01.940 --> 00:25:03.645
There is a lot of
tools out there

00:25:03.645 --> 00:25:07.130
that allows you to simulate
being on a 2G connection.

00:25:07.130 --> 00:25:09.110
It's quite revealing to do.

00:25:09.110 --> 00:25:11.660
At Google, we have
Wi-Fi networks that

00:25:11.660 --> 00:25:14.420
simulate a poor 2G connection.

00:25:14.420 --> 00:25:17.120
And its a horrible
experience today.

00:25:17.120 --> 00:25:20.650
So I recommend doing that.

00:25:20.650 --> 00:25:23.100
So this is an example of
using Android Studio Memory

00:25:23.100 --> 00:25:27.600
Monitor to measure the memory
usage between two apps.

00:25:30.390 --> 00:25:32.910
The app is using
its low RAM flag

00:25:32.910 --> 00:25:37.430
to detect if you are on
the Android Go device.

00:25:37.430 --> 00:25:41.910
It automatically adjusts
some image sizes and caches

00:25:41.910 --> 00:25:43.290
internally.

00:25:43.290 --> 00:25:45.840
And therefore, it's quite
easy to see the memory

00:25:45.840 --> 00:25:47.710
difference between them.

00:25:47.710 --> 00:25:50.810
The reason I have this here is
to remind everyone in this room

00:25:50.810 --> 00:25:54.810
that Android Studio profiling
tools are very powerful.

00:25:54.810 --> 00:25:57.720
There's been a lot of
talks about them this week.

00:25:57.720 --> 00:25:59.670
And I strongly recommend
you to check them

00:25:59.670 --> 00:26:02.340
out and use the
tooling that we provide

00:26:02.340 --> 00:26:04.430
to help optimize your app.

00:26:04.430 --> 00:26:06.810
We have tooling
around the ability

00:26:06.810 --> 00:26:08.640
to look into your
network traffic.

00:26:08.640 --> 00:26:12.240
You can see the distribution
of network, CPU profiling,

00:26:12.240 --> 00:26:14.110
and memory profiling.

00:26:14.110 --> 00:26:16.290
So get on top of
your app and see

00:26:16.290 --> 00:26:17.650
where are you consuming memory?

00:26:23.400 --> 00:26:30.800
Our research tells us that users
see a app greater than 10 meg

00:26:30.800 --> 00:26:32.640
as too heavy.

00:26:32.640 --> 00:26:35.005
And that means the
user has a tendency

00:26:35.005 --> 00:26:39.630
to go and delete that app if
they're running low on space.

00:26:39.630 --> 00:26:41.730
So 10 meg is kind of
the breaking point

00:26:41.730 --> 00:26:46.270
where they think it's acceptable
for app size in these markets.

00:26:46.270 --> 00:26:50.460
Image and language resources
are the biggest offenders

00:26:50.460 --> 00:26:51.750
we've seen in apps.

00:26:51.750 --> 00:26:54.150
And therefore,
optimize your images,

00:26:54.150 --> 00:26:57.240
think about what you're
trying to deliver, and be

00:26:57.240 --> 00:26:58.830
smart about translations.

00:26:58.830 --> 00:27:00.420
There's been quite
a lot of talks,

00:27:00.420 --> 00:27:02.130
again, this week, about this.

00:27:02.130 --> 00:27:04.650
I'll refer to some
of them later.

00:27:04.650 --> 00:27:07.470
Remove code that
you're not using.

00:27:07.470 --> 00:27:09.690
It's a simple task,
but important.

00:27:09.690 --> 00:27:13.440
We are optimizing the kernel
to be much better of collecting

00:27:13.440 --> 00:27:14.490
these code pages.

00:27:14.490 --> 00:27:16.980
But it's much easier if
you haven't allocated them

00:27:16.980 --> 00:27:18.810
from the start.

00:27:18.810 --> 00:27:22.830
And don't forget to optimize
for the smaller screens.

00:27:22.830 --> 00:27:25.450
That's something we spend
quite a lot of time on.

00:27:25.450 --> 00:27:28.890
And I strongly recommend
you do the same.

00:27:28.890 --> 00:27:31.800
And you may want to use
multi-APK to get better

00:27:31.800 --> 00:27:35.040
targeting around this, so
you can target these devices

00:27:35.040 --> 00:27:37.410
specifically.

00:27:37.410 --> 00:27:39.600
And one of the talks
I strongly recommend

00:27:39.600 --> 00:27:42.300
is Engineering for High
Performance With Tools.

00:27:42.300 --> 00:27:46.545
That was held this morning
if I remember correctly.

00:27:49.340 --> 00:27:53.680
So we have implemented a lot of
new functionality in Android Go

00:27:53.680 --> 00:27:57.910
to help improve memory and
battery like background check,

00:27:57.910 --> 00:28:01.870
that improves the system's
ability to control and manage

00:28:01.870 --> 00:28:07.660
background It sets the same
limit of how often you can pull

00:28:07.660 --> 00:28:12.550
Wi-Fi and location, depending
on the conditions you're in.

00:28:12.550 --> 00:28:15.700
And therefore, for
Android Go, we strongly

00:28:15.700 --> 00:28:20.110
recommend you to target
Android Go API level 26.

00:28:20.110 --> 00:28:23.800
I know this is very hard
for existing applications,

00:28:23.800 --> 00:28:26.470
but it'll give the user
quite a lot of benefits

00:28:26.470 --> 00:28:27.910
on this platform if you do.

00:28:32.950 --> 00:28:37.060
So important to say is that the
changes I've been talking about

00:28:37.060 --> 00:28:43.270
is really good even for
existing apps today.

00:28:43.270 --> 00:28:47.020
There is a lot of low-entry
devices out there in the market

00:28:47.020 --> 00:28:48.380
as we speak.

00:28:48.380 --> 00:28:51.500
And the experience of
them is quite poor as-is.

00:28:51.500 --> 00:28:54.410
So this is something you really
should be thinking about today.

00:28:54.410 --> 00:28:56.830
And the market is just growing.

00:28:56.830 --> 00:28:58.930
And having said
that, we're planning

00:28:58.930 --> 00:29:03.470
to preview Android Go
the end of this year,

00:29:03.470 --> 00:29:05.410
and with the first
devices shipping

00:29:05.410 --> 00:29:08.320
the first half of 2018.

00:29:08.320 --> 00:29:13.470
And you should start now
and be ready for Android Go.

00:29:13.470 --> 00:29:14.770
And that's it.

00:29:14.770 --> 00:29:15.642
Thank you.

00:29:15.642 --> 00:29:17.530
[APPLAUSE]

00:29:17.530 --> 00:29:24.654
[MUSIC PLAYING]

