WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.550
(music playing)

00:00:02.550 --> 00:00:06.499
So Android Wear is here, and you
can't wait to use its sensors.

00:00:06.499 --> 00:00:07.889
You're going to do everything

00:00:07.889 --> 00:00:10.859
from analyzing karate punches
to rating epic guitar solos.

00:00:11.140 --> 00:00:14.320
But if your watch runs out of battery,
none of that will happen.

00:00:14.640 --> 00:00:17.501
I'm Lisa Wray, and using the sensors
properly in Android Wear

00:00:17.501 --> 00:00:19.711
will keep your app up and running.

00:00:20.130 --> 00:00:23.092
Let's sum up the best practices
for sensors on Android Wear.

00:00:23.400 --> 00:00:25.796
Ask for updates as
infrequently as possible.

00:00:26.090 --> 00:00:29.228
That means unregistering your
listener when you don't need data,

00:00:29.362 --> 00:00:32.703
using a low delivery rate,
and bashing sensor data.

00:00:33.076 --> 00:00:34.607
Leverage your paired phone.

00:00:34.960 --> 00:00:38.031
Do processing on the phone using
the phone sensors, if possible.

00:00:38.240 --> 00:00:40.258
Ready? Let's see how it's done.

00:00:40.820 --> 00:00:42.967
First, take advantage of the platform.

00:00:43.450 --> 00:00:45.592
Don't calculate steps
yourself for movement.

00:00:45.620 --> 00:00:49.506
The watch has a hardware step sensor
optimized for minimal battery use.

00:00:49.911 --> 00:00:51.402
And instead of making your own,

00:00:51.402 --> 00:00:53.975
use Android's built-in activity
recognition framework.

00:00:55.070 --> 00:00:57.728
Next, only use the sensors
when you need them.

00:00:57.942 --> 00:01:00.950
Don't leave your watch app
listening to the step sensor all day.

00:01:01.019 --> 00:01:03.989
Unregister your listener after
the user finishes their run.

00:01:04.830 --> 00:01:08.098
You should also only ask for updates
as frequently as you need them.

00:01:08.300 --> 00:01:09.912
This is called the delivery rate.

00:01:09.912 --> 00:01:13.308
And some sensors are capable of
delivering updates extremely frequently.

00:01:13.749 --> 00:01:16.854
Getting data delivered many times a second
makes sense for a game

00:01:16.854 --> 00:01:19.585
using the accelerometer,
but not for the pedometer.

00:01:20.010 --> 00:01:22.245
People only make steps
once or twice a second.

00:01:23.090 --> 00:01:25.463
The next level is sensor event batching.

00:01:25.770 --> 00:01:28.248
You decide the frequency
of data collection.

00:01:28.360 --> 00:01:30.137
You decide the size of a batch.

00:01:30.280 --> 00:01:34.066
And you can request immediate
delivery of events even between batches.

00:01:34.402 --> 00:01:37.580
So for example, a running app
can request large batches

00:01:37.580 --> 00:01:39.090
of step events to save battery.

00:01:39.090 --> 00:01:42.542
But if the user turns their wrist
and activates the screen,

00:01:42.620 --> 00:01:45.506
you can immediately get
an updated step count.

00:01:45.920 --> 00:01:48.408
The final thing to remember
about your watch is that

00:01:48.408 --> 00:01:52.820
it's guaranteed to be paired to a larger,
more powerful phone with a bigger battery.

00:01:52.820 --> 00:01:56.042
So whenever possible,
take advantage of the phone.

00:01:56.230 --> 00:01:59.892
If you need to do any computation
or processing on watch sensor data,

00:01:59.940 --> 00:02:03.106
send that data to your phone
and process it there.

00:02:03.380 --> 00:02:05.594
And while you're
transferring data, remember,

00:02:05.594 --> 00:02:07.540
batching isn't just for sensor updates.

00:02:07.540 --> 00:02:11.039
And there's one more way to use your
phone to take the load off the watch.

00:02:11.039 --> 00:02:12.615
Use the phone sensors.

00:02:12.750 --> 00:02:15.071
The watch sensors are great
for hand movement,

00:02:15.071 --> 00:02:18.738
but if you need general motion, switch
to the phone's accelerometer instead.

00:02:18.738 --> 00:02:20.867
The phone's battery can take it.

00:02:21.350 --> 00:02:24.238
You can access and use the sensor
frameworks on Android Wear

00:02:24.246 --> 00:02:26.040
just like on any other Android phone.

00:02:26.318 --> 00:02:29.652
And for more information and tips
on sensors and sensor batching,

00:02:29.746 --> 00:02:32.111
check out this DevByte
I recorded last year.

00:02:32.950 --> 00:02:36.686
Finally, since Android Wear runs Android,
many other videos

00:02:36.686 --> 00:02:39.780
in Android Performance Patterns series
are just as useful to you.

00:02:39.781 --> 00:02:44.280
So check out the rest of the material, and
join us on the Wear Devs Google+ community

00:02:44.280 --> 00:02:46.507
for tips and advice from other developers.

00:02:46.720 --> 00:02:49.482
Thanks for watching.
And remember, Perf Matters.

00:02:49.523 --> 00:02:51.983
(music playing)

