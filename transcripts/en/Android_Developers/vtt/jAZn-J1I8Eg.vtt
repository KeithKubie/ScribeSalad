WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.402
[MUSIC PLAYING]

00:00:05.832 --> 00:00:07.720
OLIVER WOODMAN: So
my name's Ollie.

00:00:07.720 --> 00:00:09.286
This is Andrew.

00:00:09.286 --> 00:00:10.960
It's great to see
so many of you here.

00:00:10.960 --> 00:00:13.360
I know it's been a long day.

00:00:13.360 --> 00:00:15.790
And today we're going to talk
to you about media playback

00:00:15.790 --> 00:00:18.980
on Android using ExoPlayer.

00:00:18.980 --> 00:00:20.600
In terms of what
we're going to cover,

00:00:20.600 --> 00:00:23.170
we're really going to try and
cater a little bit for everyone

00:00:23.170 --> 00:00:24.930
in this talk.

00:00:24.930 --> 00:00:26.680
So what that means is
we're going to start

00:00:26.680 --> 00:00:27.670
with some fundamentals.

00:00:27.670 --> 00:00:31.210
So we're going to briefly
discuss what ExoPlayer is.

00:00:31.210 --> 00:00:34.047
We're going to discuss
some of its features.

00:00:34.047 --> 00:00:36.130
We're going to discuss a
little bit about when you

00:00:36.130 --> 00:00:38.116
might want to use ExoPlayer.

00:00:38.116 --> 00:00:40.240
And we're going to go
through a simple example that

00:00:40.240 --> 00:00:43.190
shows how you might be
able to get started.

00:00:43.190 --> 00:00:45.310
After that, perhaps more
for those who are already

00:00:45.310 --> 00:00:46.810
familiar with
ExoPlayer, we're going

00:00:46.810 --> 00:00:51.270
to run quite quickly through
some more advanced topics.

00:00:51.270 --> 00:00:53.410
So we'll talk about
media composition, which

00:00:53.410 --> 00:00:56.712
is a new feature ExoPlayer v2.

00:00:56.712 --> 00:01:00.010
We'll talk about some of
the internals of ExoPlayer,

00:01:00.010 --> 00:01:03.100
and we'll describe a little
bit about how they work

00:01:03.100 --> 00:01:06.280
and how playback actually works.

00:01:06.280 --> 00:01:08.420
And then finally we'll
build on that knowledge

00:01:08.420 --> 00:01:10.840
and we'll start to talk about
how you can really customize

00:01:10.840 --> 00:01:14.380
and fine tune ExoPlayer to do
a really good job of matching

00:01:14.380 --> 00:01:18.210
your specific use case.

00:01:18.210 --> 00:01:20.550
OK, so let's get started.

00:01:20.550 --> 00:01:22.391
What is ExoPlayer?

00:01:22.391 --> 00:01:24.640
So for those of you who
aren't familiar with ExoPlayer

00:01:24.640 --> 00:01:28.730
already, it's a media
playback library for Android.

00:01:28.730 --> 00:01:30.989
It works on Jelly
Bean and above,

00:01:30.989 --> 00:01:32.030
and it's written in Java.

00:01:32.030 --> 00:01:34.730
So as Android developers,
it's already in the language

00:01:34.730 --> 00:01:38.090
that you're most familiar with.

00:01:38.090 --> 00:01:40.700
If you want to ExoPlayer, you
include it as a dependency,

00:01:40.700 --> 00:01:44.300
just as you would include
any other Java library.

00:01:44.300 --> 00:01:45.710
And it's also open source.

00:01:45.710 --> 00:01:47.150
So if you're
inspired to check out

00:01:47.150 --> 00:01:49.850
our source code after this
talk, you can easily do that.

00:01:49.850 --> 00:01:52.130
And the last slide
of this presentation

00:01:52.130 --> 00:01:56.790
will actually have a link
to our GitHub repository.

00:01:56.790 --> 00:01:58.900
In terms of features,
we have come a long way

00:01:58.900 --> 00:02:00.900
since we initially open
sourced ExoPlayer, which

00:02:00.900 --> 00:02:04.800
was back at Google I/O in 2014.

00:02:04.800 --> 00:02:06.690
So in that initial
release, we supported

00:02:06.690 --> 00:02:10.380
DASH and SmoothStreaming
adaptive media playbacks,

00:02:10.380 --> 00:02:14.580
primarily using fragmented
MP4 as the container format.

00:02:14.580 --> 00:02:19.684
We also supported TTML
captions and common encryption.

00:02:19.684 --> 00:02:21.350
Not too long after
that we added support

00:02:21.350 --> 00:02:25.570
for HLS and the MPEG-TS
container format,

00:02:25.570 --> 00:02:29.347
and also some additional
caption formats.

00:02:29.347 --> 00:02:31.180
And since then we've
really been quite busy,

00:02:31.180 --> 00:02:33.940
adding support for loads
of more traditional media

00:02:33.940 --> 00:02:38.410
formats like MP3, MP4, Ogg
and Matroska and so on.

00:02:43.290 --> 00:02:46.840
We also others
several extensions.

00:02:46.840 --> 00:02:49.160
What ExoPlayer
extensions are is a way

00:02:49.160 --> 00:02:53.510
of bringing functionality from
other libraries into ExoPlayer.

00:02:53.510 --> 00:02:57.560
So as a concrete example, if you
use OkHttp as your networking

00:02:57.560 --> 00:03:00.136
stack for the rest
of your application,

00:03:00.136 --> 00:03:02.510
you might actually want to
use that exact same networking

00:03:02.510 --> 00:03:05.240
stack for media playbacks.

00:03:05.240 --> 00:03:08.300
And you can do that with
OkHttp extension, which

00:03:08.300 --> 00:03:11.540
allows you to use that exact
same network stack inside

00:03:11.540 --> 00:03:14.690
of ExoPlayer.

00:03:14.690 --> 00:03:17.720
So this brings us up to
the middle of last year.

00:03:17.720 --> 00:03:20.200
And at this point we
kind of took a step back,

00:03:20.200 --> 00:03:22.750
and we made some quite
in-depth architectural changes

00:03:22.750 --> 00:03:24.430
inside the player.

00:03:24.430 --> 00:03:27.724
And we released
ExoPlayer version 2.

00:03:27.724 --> 00:03:29.140
In this release
we had the support

00:03:29.140 --> 00:03:32.950
for more advanced features
like MultiPeriod DASH supports,

00:03:32.950 --> 00:03:34.642
gapless audio, and
media composition,

00:03:34.642 --> 00:03:36.100
which is something
we'll talk quite

00:03:36.100 --> 00:03:38.680
a lot about in a little while.

00:03:38.680 --> 00:03:41.290
At the same time we tried to
make ExoPlayer easier to use.

00:03:41.290 --> 00:03:43.290
So we added Simple
ExoPlayer view--

00:03:43.290 --> 00:03:47.020
sorry, Simple ExoPlayer, which
is a slightly higher level

00:03:47.020 --> 00:03:50.524
API for using ExoPlayer,
and also some playback UI

00:03:50.524 --> 00:03:51.940
components that
you can use to get

00:03:51.940 --> 00:03:55.490
started really quickly
out of the box.

00:03:55.490 --> 00:03:57.370
Since then we've been
adding more features.

00:03:57.370 --> 00:03:59.110
Most notably we
recently added support

00:03:59.110 --> 00:04:00.815
for variable speed playback.

00:04:00.815 --> 00:04:02.890
And we've also been
building up our ability

00:04:02.890 --> 00:04:07.070
to cache media as it's played.

00:04:07.070 --> 00:04:09.650
And so this is where
we're at today.

00:04:09.650 --> 00:04:11.150
And the key takeaway
from this slide

00:04:11.150 --> 00:04:12.983
isn't necessarily that
you should understand

00:04:12.983 --> 00:04:14.510
everything that's on it.

00:04:14.510 --> 00:04:16.579
Probably for your
particular use case

00:04:16.579 --> 00:04:20.120
you only need a very small
subset of these features.

00:04:20.120 --> 00:04:22.490
The key takeaway here
is really that ExoPlayer

00:04:22.490 --> 00:04:25.280
has kind of evolved into quite
a fully featured media library

00:04:25.280 --> 00:04:26.210
now.

00:04:26.210 --> 00:04:29.330
And so if you have a media
playback use case for Android,

00:04:29.330 --> 00:04:34.140
probably ExoPlayer is going to
support what you want to do.

00:04:34.140 --> 00:04:36.390
So now we know a bit
about the features there.

00:04:36.390 --> 00:04:39.510
Let's talk about when it might
make sense to use ExoPlayer

00:04:39.510 --> 00:04:42.300
and when it might makes sense
to use the obviously alternative

00:04:42.300 --> 00:04:47.394
to ExoPlayer, which is Android's
built in MediaPlayer API.

00:04:47.394 --> 00:04:49.310
So the first thing to
note is that MediaPlayer

00:04:49.310 --> 00:04:52.630
works all the way back to
the beginning of Android.

00:04:52.630 --> 00:04:55.650
ExoPlayer is Jelly
Bean and above only.

00:04:55.650 --> 00:04:57.650
This is far less of an
issue than it used to be.

00:04:57.650 --> 00:05:01.100
And in fact there's only around
2% of active Android devices

00:05:01.100 --> 00:05:03.620
still on earlier
versions of Android.

00:05:03.620 --> 00:05:05.570
But if you really care
a lot about providing

00:05:05.570 --> 00:05:08.660
continued support to
that 2%, then MediaPlayer

00:05:08.660 --> 00:05:12.040
is going to be your best bet.

00:05:12.040 --> 00:05:14.830
In terms of what use cases
each of these solutions

00:05:14.830 --> 00:05:18.970
is best suited for, MediaPlayer
does quite a good job

00:05:18.970 --> 00:05:20.090
of simple use cases.

00:05:20.090 --> 00:05:21.520
So if you just
have an MP3 that's

00:05:21.520 --> 00:05:24.130
maybe bundled in
your APK and you

00:05:24.130 --> 00:05:26.530
want to play it inside
your app, then MediaPlayer

00:05:26.530 --> 00:05:28.090
is going to work
just fine for you.

00:05:28.090 --> 00:05:29.339
Maybe you're already using it.

00:05:29.339 --> 00:05:33.230
And there's no real reason
why you should switch.

00:05:33.230 --> 00:05:35.290
Where ExoPlayer really
comes into its own

00:05:35.290 --> 00:05:39.010
is for more advanced use
cases, so specifically

00:05:39.010 --> 00:05:42.820
any kind of adaptive streaming,
including DASH, SmoothStreaming

00:05:42.820 --> 00:05:45.754
and HLS, and use
cases where you really

00:05:45.754 --> 00:05:47.670
want to leverage some
of the advanced features

00:05:47.670 --> 00:05:50.860
that ExoPlayer provides, like
media composition and caching.

00:05:53.092 --> 00:05:55.050
Another difference that's
worth bearing in mind

00:05:55.050 --> 00:05:58.610
is the way that these two
APIs have been designed.

00:05:58.610 --> 00:06:00.450
MediaPlayer is very
much a black box.

00:06:00.450 --> 00:06:02.760
You don't get very much
control over the inner workings

00:06:02.760 --> 00:06:04.100
of the player.

00:06:04.100 --> 00:06:06.450
And in contrast, ExoPlayer
is designed really

00:06:06.450 --> 00:06:08.550
to be very customizable
and extensible.

00:06:08.550 --> 00:06:10.050
And you can really
dig in and start

00:06:10.050 --> 00:06:13.740
to fine tune the various
dials inside of ExoPlayer

00:06:13.740 --> 00:06:17.770
to get things working just
the way you want them to.

00:06:17.770 --> 00:06:20.850
So ExoPlayer is really
best if you are probably

00:06:20.850 --> 00:06:25.500
an advanced user and you want
to kind of tweak these things.

00:06:25.500 --> 00:06:27.340
A final but important
consideration

00:06:27.340 --> 00:06:31.720
is to consider the difference
of where the player actually

00:06:31.720 --> 00:06:35.050
lives when using
MediaPlayer and ExoPlayer.

00:06:35.050 --> 00:06:39.520
So when you use MediaPlayer, as
you can see on the left here,

00:06:39.520 --> 00:06:41.350
the MediaPlayer
implementation is actually

00:06:41.350 --> 00:06:43.270
in the Android operating system.

00:06:43.270 --> 00:06:46.280
And the division here is the
horizontal line that you see.

00:06:46.280 --> 00:06:51.010
So below is the operating system
and above is your application.

00:06:51.010 --> 00:06:52.960
When you use ExoPlayer,
the actual player

00:06:52.960 --> 00:06:56.410
implementation ships as
part of your application.

00:06:56.410 --> 00:06:58.990
And it really just goes through
to some quite low level media

00:06:58.990 --> 00:07:01.840
APIs in the platform,
mainly for providing access

00:07:01.840 --> 00:07:04.650
to hardware decoders.

00:07:04.650 --> 00:07:06.820
So why is this important?

00:07:06.820 --> 00:07:08.730
Well one reason is that
Android's media power

00:07:08.730 --> 00:07:10.250
has actually evolved over time.

00:07:10.250 --> 00:07:13.770
So as a result of that,
the behavior that you get

00:07:13.770 --> 00:07:18.369
may vary slightly from Android
release to Android release.

00:07:18.369 --> 00:07:20.410
In contrast with ExoPlayer,
we have an advantage.

00:07:20.410 --> 00:07:22.770
So you can ship a single
version of the player

00:07:22.770 --> 00:07:24.180
inside your application.

00:07:24.180 --> 00:07:26.370
And you're going to get
that exact same version

00:07:26.370 --> 00:07:29.005
across all versions of Android.

00:07:29.005 --> 00:07:30.630
And this means that
ExoPlayer is really

00:07:30.630 --> 00:07:35.890
better positioned to provide
a very consistent experience.

00:07:35.890 --> 00:07:37.900
Another important
benefit of this model

00:07:37.900 --> 00:07:40.900
is when we add a new
feature, we can generally

00:07:40.900 --> 00:07:43.481
support all the way back to
Jelly Bean with ExoPlayer,

00:07:43.481 --> 00:07:44.980
whereas a new feature
in MediaPlayer

00:07:44.980 --> 00:07:47.950
is only going to be available
for subsequent releases

00:07:47.950 --> 00:07:50.940
of Android.

00:07:50.940 --> 00:07:53.220
An interesting example
of these advantages

00:07:53.220 --> 00:07:56.420
is actually variable
speed playback supports.

00:07:56.420 --> 00:08:00.189
So this was supported in
MediaPlayer from Marshmallow.

00:08:00.189 --> 00:08:01.980
And recently we added
support in ExoPlayer.

00:08:01.980 --> 00:08:05.040
And because we didn't have any
dependencies on new low level

00:08:05.040 --> 00:08:07.830
media APIs or anything
like that in the platform,

00:08:07.830 --> 00:08:11.730
we were able to add support
all the way back to Jelly Bean.

00:08:11.730 --> 00:08:13.890
What we discovered next
was that there was actually

00:08:13.890 --> 00:08:18.470
a bug in the playback rate and
pitch adjustment implementation

00:08:18.470 --> 00:08:21.584
that affected both
MediaPlayer and ExoPlayer.

00:08:21.584 --> 00:08:23.250
And we were able to
fix that bug, again,

00:08:23.250 --> 00:08:25.680
all the way back to Jelly
Bean with ExoPlayer,

00:08:25.680 --> 00:08:28.826
and only in O and
later for MediaPlayer.

00:08:31.691 --> 00:08:34.190
So at this point, hopefully you
can see some of the benefits

00:08:34.190 --> 00:08:35.549
ExoPlayer has.

00:08:35.549 --> 00:08:37.182
But you might be
thinking that you

00:08:37.182 --> 00:08:38.640
would be more
confident in using it

00:08:38.640 --> 00:08:42.709
if you knew that some people
were using it already.

00:08:42.709 --> 00:08:44.250
And I'm happy to
say that we actually

00:08:44.250 --> 00:08:47.160
use ExoPlayer very extensively
in Google's own applications.

00:08:47.160 --> 00:08:49.650
So most notably YouTube,
which is obviously

00:08:49.650 --> 00:08:52.380
a huge video streaming
service, and also

00:08:52.380 --> 00:08:57.334
applications like Google Play
Movies and Google Photos.

00:08:57.334 --> 00:08:59.250
And we've actually seen
really strong adoption

00:08:59.250 --> 00:09:01.600
from the wider development
community as well.

00:09:01.600 --> 00:09:03.330
So here are just some
of the applications

00:09:03.330 --> 00:09:08.790
that for some use or
other use ExoPlayer today.

00:09:08.790 --> 00:09:10.740
And it's not just
a handful either.

00:09:10.740 --> 00:09:14.100
There are actually over 140,000
applications on the Play Store

00:09:14.100 --> 00:09:17.460
today that are making
use of ExoPlayer.

00:09:17.460 --> 00:09:19.174
If your app's one
of these, thank you

00:09:19.174 --> 00:09:20.340
very much for your adoption.

00:09:20.340 --> 00:09:23.920
And please keep
sending us feedback.

00:09:23.920 --> 00:09:25.970
It's really important
to us and it actually

00:09:25.970 --> 00:09:29.610
does guide a lot
of what we work on.

00:09:29.610 --> 00:09:31.680
So next up we're going
to dive in some code

00:09:31.680 --> 00:09:32.940
and show a simple example.

00:09:32.940 --> 00:09:36.481
And for that I'm going to
hand you over to Andrew.

00:09:36.481 --> 00:09:38.388
ANDREW LEWIS: Hi, everyone.

00:09:38.388 --> 00:09:42.520
[APPLAUSE]

00:09:42.520 --> 00:09:45.310
So let's imagine you've
got an existing app

00:09:45.310 --> 00:09:48.340
and you'd like to
add an MP4 player

00:09:48.340 --> 00:09:50.420
to that app-- so just
showing a simple video

00:09:50.420 --> 00:09:51.760
in your existing app.

00:09:51.760 --> 00:09:53.710
I'm going to go through
the minimal changes

00:09:53.710 --> 00:09:56.680
that you need to make
to use ExoPlayer.

00:09:56.680 --> 00:09:58.330
So the first step is
going to be to add

00:09:58.330 --> 00:10:00.970
a dependency on ExoPlayer And
there are two main options

00:10:00.970 --> 00:10:02.050
here.

00:10:02.050 --> 00:10:05.470
You can either bring in the
whole of the ExoPlayer library.

00:10:05.470 --> 00:10:08.350
And that will include support
for adaptive streaming formats

00:10:08.350 --> 00:10:09.670
like DASH and HLS.

00:10:09.670 --> 00:10:13.750
And for that you can use this
line in your build.gradle file.

00:10:13.750 --> 00:10:15.490
This is kind of the
kitchen sink option.

00:10:15.490 --> 00:10:18.280
So the alternative is that
you can just pick and choose

00:10:18.280 --> 00:10:20.530
the specific modules from
the ExoPlayer library

00:10:20.530 --> 00:10:21.730
that you need.

00:10:21.730 --> 00:10:23.890
So for this example, I'm
going to add a dependency

00:10:23.890 --> 00:10:26.810
on the core library, which
contains the main player

00:10:26.810 --> 00:10:30.970
obviously, and also support
for regular media for like MP4s

00:10:30.970 --> 00:10:32.680
and MP3s.

00:10:32.680 --> 00:10:36.220
And there's also a dependency
here on the UI library,

00:10:36.220 --> 00:10:39.130
which brings in
SimpleExoPlayerView, which

00:10:39.130 --> 00:10:42.957
is a minimal but
customizable player that you

00:10:42.957 --> 00:10:43.790
can put in your app.

00:10:46.450 --> 00:10:48.190
So once we've added
the dependency,

00:10:48.190 --> 00:10:50.470
the next step is to
add some code snippets

00:10:50.470 --> 00:10:55.550
to your activity, which will
create a player and use it.

00:10:55.550 --> 00:10:57.430
So we have this
ExoPlayer factory,

00:10:57.430 --> 00:11:01.540
which has several methods for
creating player instances.

00:11:01.540 --> 00:11:03.280
And this is the
easiest to use one.

00:11:03.280 --> 00:11:06.510
It takes a context
and a track selector.

00:11:06.510 --> 00:11:08.140
And for this simple
use case we can

00:11:08.140 --> 00:11:10.180
use the
DefaultTrackSelector which

00:11:10.180 --> 00:11:14.590
has sensible defaults for almost
everything you'd want to do.

00:11:14.590 --> 00:11:16.510
Once we've created the
player, the next step

00:11:16.510 --> 00:11:19.120
is to drop a view
into your app's layout

00:11:19.120 --> 00:11:21.880
and then bind it to the player
by calling the setPlayer

00:11:21.880 --> 00:11:24.280
method.

00:11:24.280 --> 00:11:27.190
Now most importantly, we need to
tell the player exactly what we

00:11:27.190 --> 00:11:28.420
want to play.

00:11:28.420 --> 00:11:30.940
And for this we're going
to use a MediaSource.

00:11:30.940 --> 00:11:34.390
In ExoPlayer, everything that
you can play is a MediaSource.

00:11:34.390 --> 00:11:36.100
It's responsible for
loading the media

00:11:36.100 --> 00:11:38.950
and providing it to the player.

00:11:38.950 --> 00:11:41.980
So we're going to create an
ExtractorMediaSource, which

00:11:41.980 --> 00:11:45.280
has support for regular
media files like MP4s, MP3s,

00:11:45.280 --> 00:11:47.840
and Matroska files and so on.

00:11:47.840 --> 00:11:49.660
So you pass that to
the prepare method.

00:11:49.660 --> 00:11:51.220
And then we call
setPlayWhenReady

00:11:51.220 --> 00:11:53.790
to tell the player that as
soon as buffering is completed

00:11:53.790 --> 00:11:58.510
and playback can begin,
then playback should start.

00:11:58.510 --> 00:12:00.640
And finally it's very
important that you release

00:12:00.640 --> 00:12:02.980
the player when
playback is complete

00:12:02.980 --> 00:12:06.160
because the player holds
system resources like codecs

00:12:06.160 --> 00:12:08.620
and it uses memory for buffers.

00:12:08.620 --> 00:12:10.360
So these code snippets
would generally

00:12:10.360 --> 00:12:13.556
go in activity lifecycle
methods in your app.

00:12:17.050 --> 00:12:19.240
So this is a video
of what you got.

00:12:19.240 --> 00:12:23.140
I've got a nice video of
the skyline of London.

00:12:23.140 --> 00:12:25.490
And you can see there
that it had basic playback

00:12:25.490 --> 00:12:29.980
controls like play and
pause button and a seek bar.

00:12:29.980 --> 00:12:31.620
So if you'd like
to try this out,

00:12:31.620 --> 00:12:34.360
there's a codelab being
published as part of I/O, which

00:12:34.360 --> 00:12:35.930
you can go and try out.

00:12:35.930 --> 00:12:37.570
And there's also
a developer guide

00:12:37.570 --> 00:12:40.270
on our project page, which will
walk you through these steps.

00:12:43.020 --> 00:12:45.600
So as I mentioned,
everything that you can play

00:12:45.600 --> 00:12:47.160
is a media source.

00:12:47.160 --> 00:12:50.310
And it's responsible for
loading media for the player.

00:12:50.310 --> 00:12:52.800
And in that example we
used ExtractorMediaSource,

00:12:52.800 --> 00:12:54.870
but there are actually
other more advanced media

00:12:54.870 --> 00:12:57.710
sources available.

00:12:57.710 --> 00:12:59.850
So you may have
heard of DASH, which

00:12:59.850 --> 00:13:01.950
is a specification
for streaming which

00:13:01.950 --> 00:13:04.350
allows for adaptation
between qualities

00:13:04.350 --> 00:13:06.780
to handle varying
network conditions.

00:13:06.780 --> 00:13:11.160
And we provide DASHMediaSource
for support for DASH.

00:13:11.160 --> 00:13:13.950
We also have a HLS media
source for supporting

00:13:13.950 --> 00:13:20.220
HTTP live streaming and a media
source for SmoothStreaming.

00:13:20.220 --> 00:13:22.470
And with our recent
v2 release, we've

00:13:22.470 --> 00:13:25.890
also added a new category
of MediaSources which

00:13:25.890 --> 00:13:27.540
are designed for composition.

00:13:27.540 --> 00:13:29.700
And by composition we
mean joining together

00:13:29.700 --> 00:13:31.562
other media sources.

00:13:31.562 --> 00:13:32.770
Why would we want to do this?

00:13:32.770 --> 00:13:34.103
Well I'll go through an example.

00:13:34.103 --> 00:13:37.600
So let's say we've got a
video that we want to play

00:13:37.600 --> 00:13:40.100
and also some subtitles,
which are in a separate file,

00:13:40.100 --> 00:13:42.480
an SRT file.

00:13:42.480 --> 00:13:45.630
In that case, we can create
an ExtractorMediaSource

00:13:45.630 --> 00:13:49.590
to load the video, a single
sample media source, which

00:13:49.590 --> 00:13:52.050
is going to load the SRT file.

00:13:52.050 --> 00:13:55.620
And then we're going to play the
subtitles alongside the video.

00:13:55.620 --> 00:13:57.246
Now you could try
and do this yourself

00:13:57.246 --> 00:13:58.620
by looking at the
player position

00:13:58.620 --> 00:14:01.620
and synchronizing the playback
position with the subtitles

00:14:01.620 --> 00:14:02.580
that you're showing.

00:14:02.580 --> 00:14:05.460
But this is actually quite
difficult to do in general.

00:14:05.460 --> 00:14:09.100
It's much easier to use
a MergingMediaSource.

00:14:09.100 --> 00:14:11.640
And the MergingMediaSource
just takes the video

00:14:11.640 --> 00:14:13.530
you want to play
and the subtitles

00:14:13.530 --> 00:14:15.247
and handles everything for you.

00:14:15.247 --> 00:14:16.830
So it will handle
the synchronization.

00:14:16.830 --> 00:14:19.080
And then they'll be
shown in the player.

00:14:21.910 --> 00:14:26.050
Another time you'd use
composition is for playlists.

00:14:26.050 --> 00:14:30.280
So in this case, say you
have an album of MP3s

00:14:30.280 --> 00:14:33.490
that you want to
play back to back.

00:14:33.490 --> 00:14:35.020
You could try and
do this yourself

00:14:35.020 --> 00:14:38.200
by playing the first stream
and then swapping out

00:14:38.200 --> 00:14:39.460
the source for the next one.

00:14:39.460 --> 00:14:41.710
But that's not going to be
great because the player is

00:14:41.710 --> 00:14:45.460
going to buffer when
you swap out the source.

00:14:45.460 --> 00:14:49.690
So we've added a
ConcatenatingMediaSource,

00:14:49.690 --> 00:14:51.970
which takes a list
of sources that you

00:14:51.970 --> 00:14:54.310
want to combine together
and then plays them

00:14:54.310 --> 00:14:57.130
back to back with a
consistent buffering policy.

00:14:57.130 --> 00:14:59.650
So if you tell the player to
have three seconds of media

00:14:59.650 --> 00:15:01.570
buffered at all
times, then it will

00:15:01.570 --> 00:15:04.030
ensure that that is the
case even across transitions

00:15:04.030 --> 00:15:05.770
from one source to the next.

00:15:05.770 --> 00:15:08.240
And this also supports
gapless playback metadata.

00:15:08.240 --> 00:15:10.630
So you can play the album
of MP3s with completely

00:15:10.630 --> 00:15:11.560
seamless playback.

00:15:14.690 --> 00:15:16.519
And also composition
is very flexible.

00:15:16.519 --> 00:15:18.560
So we can combine those
two examples that we saw.

00:15:18.560 --> 00:15:22.370
So we concatenate a video
with the merged source

00:15:22.370 --> 00:15:25.430
that we created earlier
that had subtitles.

00:15:25.430 --> 00:15:28.040
And if you do that, this is
what you're going to get.

00:15:28.040 --> 00:15:30.424
So the first video plays.

00:15:30.424 --> 00:15:32.090
And then when the
first video completes,

00:15:32.090 --> 00:15:34.439
we get a seamless transition
to the next video.

00:15:34.439 --> 00:15:36.230
And you can see the
subtitles are coming up

00:15:36.230 --> 00:15:37.105
as we'd expect there.

00:15:41.070 --> 00:15:42.130
So this is great.

00:15:42.130 --> 00:15:46.940
We can play these
compositions of media.

00:15:46.940 --> 00:15:48.000
So we implemented this.

00:15:48.000 --> 00:15:50.430
And then we thought,
hold on a moment.

00:15:50.430 --> 00:15:52.320
We've got this seekTo
method on the player.

00:15:52.320 --> 00:15:56.100
But now we've got playlists
that we want to play back

00:15:56.100 --> 00:15:57.720
that have multiple sources.

00:15:57.720 --> 00:16:00.390
And a timestamp is not
really enough information

00:16:00.390 --> 00:16:03.390
to know where you want
to seek to anymore.

00:16:03.390 --> 00:16:05.954
So we thought about
this, and we thought

00:16:05.954 --> 00:16:08.370
about other types of media
sources you might want to play,

00:16:08.370 --> 00:16:10.200
like live media sources.

00:16:10.200 --> 00:16:14.730
And we realized that we really
need a way to expose to the app

00:16:14.730 --> 00:16:16.620
the structure of
the media source

00:16:16.620 --> 00:16:19.560
and what media is available.

00:16:19.560 --> 00:16:24.570
So to solve the issue
of needing to know which

00:16:24.570 --> 00:16:27.330
source you want to seek
into, we added a parameter

00:16:27.330 --> 00:16:29.780
that tells the player
which of the source

00:16:29.780 --> 00:16:33.840
is in the playlist
you want to seek to.

00:16:33.840 --> 00:16:35.760
And then we thought,
we're going to need

00:16:35.760 --> 00:16:37.420
a description of
the media available.

00:16:37.420 --> 00:16:41.760
So we added a new data
structure called a timeline.

00:16:41.760 --> 00:16:44.880
And a timeline basically
is a representation

00:16:44.880 --> 00:16:47.670
of all the media that is
available in a media source.

00:16:47.670 --> 00:16:50.220
And it consists of
a list of windows.

00:16:50.220 --> 00:16:51.690
Each of those
windows corresponds

00:16:51.690 --> 00:16:53.640
to one item in a playlist.

00:16:53.640 --> 00:16:55.990
And it describes which
parts of the media

00:16:55.990 --> 00:16:57.925
you can seek to at
any given moment.

00:16:57.925 --> 00:16:59.550
So I'm going to show
an example of this

00:16:59.550 --> 00:17:01.360
to make it a bit clearer.

00:17:01.360 --> 00:17:03.540
So let's imagine we've
got a single source where

00:17:03.540 --> 00:17:05.339
you can seek anywhere.

00:17:05.339 --> 00:17:08.230
The red line here
represents one window.

00:17:08.230 --> 00:17:11.609
The dot at the left
hand side represents

00:17:11.609 --> 00:17:15.599
the default start position for
this media source is at zero.

00:17:15.599 --> 00:17:17.250
So when the player
reaches the source,

00:17:17.250 --> 00:17:20.490
if it's in a concatenation,
then it will go to time zero.

00:17:20.490 --> 00:17:21.990
And the window
extends all the way

00:17:21.990 --> 00:17:24.826
to the duration of
the media source.

00:17:24.826 --> 00:17:28.200
A more interesting case is if
you concatenate two sources

00:17:28.200 --> 00:17:28.887
together.

00:17:28.887 --> 00:17:30.720
And in this case, you
end up with a timeline

00:17:30.720 --> 00:17:32.280
that has two windows.

00:17:32.280 --> 00:17:34.200
And as you can see,
for both windows

00:17:34.200 --> 00:17:38.320
the start position is at the
beginning of that source.

00:17:38.320 --> 00:17:41.320
What about if we have
a live media source?

00:17:41.320 --> 00:17:44.180
Well in this case, the
timeline is actually dynamic.

00:17:44.180 --> 00:17:46.930
So as the live event
progresses, more media

00:17:46.930 --> 00:17:48.910
is becoming available
in the window.

00:17:48.910 --> 00:17:50.860
And you can see that
the default position

00:17:50.860 --> 00:17:53.110
is tracking the live edge.

00:17:53.110 --> 00:17:55.030
And then when the
live event completes,

00:17:55.030 --> 00:17:57.810
the default position snaps
back to the beginning

00:17:57.810 --> 00:17:59.664
so that this becomes
a regular stream where

00:17:59.664 --> 00:18:01.330
playback begins at
the beginning and you

00:18:01.330 --> 00:18:02.410
can seek to any position.

00:18:05.325 --> 00:18:06.950
And we can build on
top of this to have

00:18:06.950 --> 00:18:09.740
concatenations of regular
streams and live streams.

00:18:09.740 --> 00:18:11.400
And this works in
the way you'd expect.

00:18:11.400 --> 00:18:13.640
So when you concatenate
sources, you

00:18:13.640 --> 00:18:15.200
end up with a time
line that consists

00:18:15.200 --> 00:18:16.964
of the concatenation
of the windows

00:18:16.964 --> 00:18:18.130
of those individual sources.

00:18:20.960 --> 00:18:23.020
So you'll see this
timeline exposed

00:18:23.020 --> 00:18:24.880
in ExoPlayer's top level API.

00:18:24.880 --> 00:18:27.010
You can get the
current timeline.

00:18:27.010 --> 00:18:29.980
You can pass in a window index
when you seek the player.

00:18:29.980 --> 00:18:32.740
So you can say please seek to
the second item in the playlist

00:18:32.740 --> 00:18:34.240
at a particular offset.

00:18:34.240 --> 00:18:37.180
And you can inspect
details about these windows

00:18:37.180 --> 00:18:41.267
like where the window
starts and how long it is.

00:18:41.267 --> 00:18:43.600
Now back over to Ollie to
talk a bit about the internals

00:18:43.600 --> 00:18:44.272
of the players.

00:18:49.614 --> 00:18:51.030
OLIVER WOODMAN:
So as Andrew says,

00:18:51.030 --> 00:18:55.200
we're now going to dive in
a bit deeper to ExoPlayer,

00:18:55.200 --> 00:18:58.440
and really talk about
what happens internally

00:18:58.440 --> 00:18:59.840
during a playback.

00:18:59.840 --> 00:19:01.590
And the reason that
we're going to do this

00:19:01.590 --> 00:19:03.715
is that after we've
talked about some

00:19:03.715 --> 00:19:05.090
of the internal
components, we're

00:19:05.090 --> 00:19:08.690
then going to go and talk about
how we might customize those

00:19:08.690 --> 00:19:12.860
to very fine tune the player
to your specific use case.

00:19:12.860 --> 00:19:14.610
So here we have an
ExoPlayer and it's just

00:19:14.610 --> 00:19:18.420
received its MediaSource
that it's going to play back.

00:19:18.420 --> 00:19:21.600
So what are the important
internal components?

00:19:21.600 --> 00:19:23.280
Well the first
important component

00:19:23.280 --> 00:19:26.030
that we should
mention are renderers.

00:19:26.030 --> 00:19:27.990
A renderer is
responsible for rendering

00:19:27.990 --> 00:19:30.030
a single component of media.

00:19:30.030 --> 00:19:34.590
So a VideoRenderer will
decode and display just video.

00:19:34.590 --> 00:19:37.680
And an AudioRenderer similarly
will decode and output

00:19:37.680 --> 00:19:39.710
just audio.

00:19:39.710 --> 00:19:41.132
And a real ExoPlayer
instance will

00:19:41.132 --> 00:19:43.590
have additional renderers for
things like text and metadata

00:19:43.590 --> 00:19:44.090
as well.

00:19:44.090 --> 00:19:46.620
But we're going to omit
those from this diagram just

00:19:46.620 --> 00:19:48.960
for simplicity.

00:19:48.960 --> 00:19:52.385
Another component that is
important is a TrackSelector.

00:19:52.385 --> 00:19:54.270
A media source may
actually expose

00:19:54.270 --> 00:19:58.230
multiple tracks that could
be played back by the player.

00:19:58.230 --> 00:20:01.140
Particularly if you have a
DASH or HLS adaptive playback,

00:20:01.140 --> 00:20:03.930
the MediaSource may actually
expose multiple video streams

00:20:03.930 --> 00:20:07.350
at different resolutions, and
maybe multiple audio languages

00:20:07.350 --> 00:20:08.531
as well.

00:20:08.531 --> 00:20:10.030
And its the job of
the TrackSelector

00:20:10.030 --> 00:20:11.790
to select the subset
of those tracks

00:20:11.790 --> 00:20:16.290
that should be buffered
and played by the player.

00:20:16.290 --> 00:20:19.345
The last component that we need
to talk about is a LoadControl.

00:20:19.345 --> 00:20:22.240
A LoadControl
actually has two jobs.

00:20:22.240 --> 00:20:25.010
Its first job is to
tell the MediaSource

00:20:25.010 --> 00:20:27.890
whether it should be buffering
at this point in time.

00:20:27.890 --> 00:20:29.830
And this is indicated
in this diagram

00:20:29.830 --> 00:20:32.382
by the green dots on
the left hand side.

00:20:32.382 --> 00:20:34.090
So since we haven't
started playback yet,

00:20:34.090 --> 00:20:35.537
we don't have anything buffered.

00:20:35.537 --> 00:20:37.870
And therefore it's green to
represent that a MediaSource

00:20:37.870 --> 00:20:39.820
should be buffering.

00:20:39.820 --> 00:20:42.520
Its second job is to tell
the player when playback

00:20:42.520 --> 00:20:44.200
is actually allowed to start.

00:20:44.200 --> 00:20:46.614
This is represented by
the right hand side dot.

00:20:46.614 --> 00:20:48.280
And because we don't
have any media yet,

00:20:48.280 --> 00:20:53.910
it's obviously too soon to start
playback and therefore is red.

00:20:53.910 --> 00:20:57.460
One of the components that we
should mention are DataSources.

00:20:57.460 --> 00:21:00.490
MediaSources use DataSources
to load the actual media

00:21:00.490 --> 00:21:03.600
that I'm going to provide
to the player for playback.

00:21:06.840 --> 00:21:10.630
So I've kind of given you
some major components.

00:21:10.630 --> 00:21:12.380
But let's talk a
little bit about how

00:21:12.380 --> 00:21:16.412
these components actually
interact during a playback.

00:21:16.412 --> 00:21:18.170
Well we haven't
buffered anything yet,

00:21:18.170 --> 00:21:20.030
and LoadControl is
telling the MediaSource

00:21:20.030 --> 00:21:22.220
that it should be buffering.

00:21:22.220 --> 00:21:24.680
And so the MediaSource is
going to start loading data

00:21:24.680 --> 00:21:28.270
through its DataSource.

00:21:28.270 --> 00:21:29.900
And after it's
loaded enough media,

00:21:29.900 --> 00:21:33.582
probably not very much, just a
header for a normal media file,

00:21:33.582 --> 00:21:35.540
the MediaSource is going
to be able to work out

00:21:35.540 --> 00:21:38.420
what tracks it can actually
expose to the player.

00:21:38.420 --> 00:21:42.249
And it does this by exposing
something called TrackGroups.

00:21:42.249 --> 00:21:44.290
Now we know the TrackSelector
is the thing that's

00:21:44.290 --> 00:21:47.482
going to choose which of
the tracks to actually play.

00:21:47.482 --> 00:21:50.087
But the TrackSelector
needs something else.

00:21:50.087 --> 00:21:51.670
And the reason it
needs something else

00:21:51.670 --> 00:21:54.400
is that different devices
have different capabilities.

00:21:54.400 --> 00:21:56.470
And in particular
the VideoRenderer

00:21:56.470 --> 00:22:00.090
may only be able to decode up
to a particular resolution.

00:22:00.090 --> 00:22:04.750
And so even if the MediaSource
exposes a 4K video stream,

00:22:04.750 --> 00:22:06.595
if you're on a low
end device, it's

00:22:06.595 --> 00:22:08.470
not going to make sense
for the TrackSelector

00:22:08.470 --> 00:22:11.500
to actually choose that stream.

00:22:11.500 --> 00:22:13.810
And the way we represent
these kind of capabilities

00:22:13.810 --> 00:22:16.510
in the player is we have each
renderer expose something

00:22:16.510 --> 00:22:18.580
called a
RendererCapabilities object

00:22:18.580 --> 00:22:24.110
that describes specifically what
it's actually able to handle.

00:22:24.110 --> 00:22:26.420
So what happens next
is that the TrackGroups

00:22:26.420 --> 00:22:29.720
and the RendererCapabilities
are fed into the TrackSelector.

00:22:29.720 --> 00:22:31.130
The TrackSelector
does its magic.

00:22:31.130 --> 00:22:33.080
It produces a selection.

00:22:33.080 --> 00:22:37.400
And that selection goes
back to the MediaSource.

00:22:37.400 --> 00:22:38.919
At this point the
MediaSource knows

00:22:38.919 --> 00:22:40.460
what it's going to
buffer, because it

00:22:40.460 --> 00:22:42.350
knows what the
track selection is,

00:22:42.350 --> 00:22:45.610
and so it allocates
some buffers.

00:22:45.610 --> 00:22:47.170
Of course we still
haven't actually

00:22:47.170 --> 00:22:49.240
loaded any useful
media for playback.

00:22:49.240 --> 00:22:53.430
The LoadControl is still
telling the MediaSource to load.

00:22:53.430 --> 00:22:56.890
And therefore the MediaSource
continues to load data

00:22:56.890 --> 00:22:58.840
and it starts to
fill its buffers.

00:22:58.840 --> 00:23:00.700
And what you can see
here is that as soon

00:23:00.700 --> 00:23:03.370
as these buffers
start to get full,

00:23:03.370 --> 00:23:06.220
the renderers actually start
consuming from those buffers

00:23:06.220 --> 00:23:08.440
and feeding that media data
through their decoders,

00:23:08.440 --> 00:23:11.500
getting ready for playback.

00:23:11.500 --> 00:23:13.560
So at this point we
have some media buffers.

00:23:13.560 --> 00:23:15.870
The renderers have
decoded a bit of media,

00:23:15.870 --> 00:23:18.590
so they're kind of
primed and ready to go.

00:23:18.590 --> 00:23:20.550
And so LoadControl
may at this point

00:23:20.550 --> 00:23:22.120
actually start the playback.

00:23:22.120 --> 00:23:25.280
So that little red
circle has gone green.

00:23:25.280 --> 00:23:29.100
And of course the MediaSource
is continuing to buffer.

00:23:29.100 --> 00:23:32.400
And at this point we've actually
buffered quite a lot of media.

00:23:32.400 --> 00:23:36.006
So these buffers on the left
hand side are quite full.

00:23:36.006 --> 00:23:39.370
Of course we don't want to
buffer arbitrarily far ahead.

00:23:39.370 --> 00:23:42.029
So the LoadControl may stop
buffering at this point.

00:23:42.029 --> 00:23:43.820
Because playbacks
continuing, the renderers

00:23:43.820 --> 00:23:45.390
are still consuming.

00:23:45.390 --> 00:23:47.610
And therefore these buffers
are draining back down

00:23:47.610 --> 00:23:50.102
to a lower level.

00:23:50.102 --> 00:23:52.060
Of course we don't want
the buffers to run out,

00:23:52.060 --> 00:23:55.080
so the LoadControl might
toggle buffering on again.

00:23:55.080 --> 00:23:56.680
And so you see this
pattern emerging

00:23:56.680 --> 00:23:58.850
of data being pulled
through the DataSource

00:23:58.850 --> 00:24:02.380
into MediaSource and
out to the renderers.

00:24:02.380 --> 00:24:04.320
One additional complexity
to keep in mind

00:24:04.320 --> 00:24:06.445
when you're thinking about
this is, as Andrew said,

00:24:06.445 --> 00:24:09.850
a MediaSource can actually be a
concatenation of, for example,

00:24:09.850 --> 00:24:11.705
different videos.

00:24:11.705 --> 00:24:14.080
And those videos may have a
different selection of tracks

00:24:14.080 --> 00:24:16.130
available.

00:24:16.130 --> 00:24:18.020
And so as this
process is continuing,

00:24:18.020 --> 00:24:20.110
you may actually get
additional track selections

00:24:20.110 --> 00:24:23.450
taking place at the same time.

00:24:23.450 --> 00:24:25.946
And so here we have the
playback continuing.

00:24:25.946 --> 00:24:27.820
The buffers are filling
up and draining down.

00:24:27.820 --> 00:24:30.520
And you see this pattern of
data being intermittently read

00:24:30.520 --> 00:24:33.250
through the DataSource
and continuously consumed

00:24:33.250 --> 00:24:34.455
by the renderers.

00:24:39.680 --> 00:24:43.550
So now we know a bit about how
the important components work

00:24:43.550 --> 00:24:45.860
during a playback.

00:24:45.860 --> 00:24:48.635
Let's talk a little bit
about how we might customize

00:24:48.635 --> 00:24:52.440
those internal behaviors.

00:24:52.440 --> 00:24:55.550
So here is code snippet
Andrew showed you earlier.

00:24:55.550 --> 00:24:59.232
We're creating an ExoPlayer
with ExoPlayerFactory.

00:24:59.232 --> 00:25:01.190
But there are actually
more complicated methods

00:25:01.190 --> 00:25:04.250
for creating an ExoPlayer
This is one of them.

00:25:04.250 --> 00:25:06.990
And you can see that what we're
injecting into this player

00:25:06.990 --> 00:25:09.890
instance are exactly the
components that we've just

00:25:09.890 --> 00:25:12.740
been talking about-- so the
renderers, a TrackSelector,

00:25:12.740 --> 00:25:13.610
and a LoadControl.

00:25:13.610 --> 00:25:18.159
And here we're just inserting
default implementations.

00:25:18.159 --> 00:25:20.700
So let's look at how we might
fine tune the player by pulling

00:25:20.700 --> 00:25:21.870
one of those out.

00:25:21.870 --> 00:25:23.310
So we'll look at
the LoadControl.

00:25:23.310 --> 00:25:27.480
And here we're still using
the default implementation.

00:25:27.480 --> 00:25:31.110
But we can actually pass some
variables into the constructor

00:25:31.110 --> 00:25:33.400
to manipulate its behavior.

00:25:33.400 --> 00:25:34.950
So this default
LoadControl is saying

00:25:34.950 --> 00:25:38.310
that it wants between 15 and
30 seconds in the buffer,

00:25:38.310 --> 00:25:39.840
and it wants to
start playback when

00:25:39.840 --> 00:25:44.010
there's 2.5 seconds buffered.

00:25:44.010 --> 00:25:45.690
So what does that
looks like in terms

00:25:45.690 --> 00:25:47.610
of wall clock time
versus duration

00:25:47.610 --> 00:25:49.619
of media in the buffer?

00:25:49.619 --> 00:25:50.910
Well the buffer starts to fill.

00:25:50.910 --> 00:25:53.550
And at 2.5 seconds we
allow playback to start,

00:25:53.550 --> 00:25:56.810
as indicated by the
little orange dot.

00:25:56.810 --> 00:25:59.640
And the LoadControl allows
buffering to continue up

00:25:59.640 --> 00:26:02.284
until 30 seconds.

00:26:02.284 --> 00:26:04.200
Buffering will then be
turned off for a while.

00:26:04.200 --> 00:26:06.033
And the MediaSource
buffers would drain down

00:26:06.033 --> 00:26:09.086
to 15 seconds, which
is the lower limit.

00:26:09.086 --> 00:26:10.710
And buffering would
then turn on again.

00:26:10.710 --> 00:26:12.870
And so you get this
kind of sawtooth pattern

00:26:12.870 --> 00:26:15.800
in terms of buffering behavior.

00:26:15.800 --> 00:26:17.550
So at this point it's
probably quite clear

00:26:17.550 --> 00:26:20.150
that you can start to really
influence this behavior.

00:26:20.150 --> 00:26:23.021
So you could change this
number from 15 to 25

00:26:23.021 --> 00:26:25.020
if you're not comfortable
with allowing a buffer

00:26:25.020 --> 00:26:27.160
to drain that low.

00:26:27.160 --> 00:26:29.700
And because we understand how
default LoadControl works,

00:26:29.700 --> 00:26:31.920
we can show the new graph.

00:26:31.920 --> 00:26:34.920
So here the buffer is kept
more full at all points

00:26:34.920 --> 00:26:36.360
during the playback.

00:26:36.360 --> 00:26:40.334
And buffering is toggled on
and off far more frequently.

00:26:40.334 --> 00:26:41.750
We could also
decide we might want

00:26:41.750 --> 00:26:45.230
to be more conservative when
we allow playback to start.

00:26:45.230 --> 00:26:49.880
So we bump up the value from
2.5 seconds to 10 seconds.

00:26:49.880 --> 00:26:51.650
And again we can
understand the difference

00:26:51.650 --> 00:26:55.220
in terms of this graph.

00:26:55.220 --> 00:26:57.390
We can now take our
modified default LoadControl

00:26:57.390 --> 00:27:00.900
and inject it back
into the player.

00:27:00.900 --> 00:27:03.000
So what if
LoadControl just isn't

00:27:03.000 --> 00:27:06.464
flexible enough for the actual
buffering policy that you want?

00:27:06.464 --> 00:27:08.130
Well you can go further
and you can just

00:27:08.130 --> 00:27:11.472
implement your own
LoadControl from scratch.

00:27:11.472 --> 00:27:12.930
So one of the
methods that you have

00:27:12.930 --> 00:27:16.050
to implement if you do this is
called shouldContinueLoading.

00:27:16.050 --> 00:27:17.100
It returns a boolean.

00:27:17.100 --> 00:27:19.000
It's polled during playback.

00:27:19.000 --> 00:27:20.790
And this is exactly
the method that's

00:27:20.790 --> 00:27:23.640
actually controlling whether
the MediaSource buffers or not.

00:27:23.640 --> 00:27:27.030
And you could implement all
kinds of behaviors and logics

00:27:27.030 --> 00:27:31.220
in your own implementation.

00:27:31.220 --> 00:27:33.810
You can do similar things with
the TrackSelector as well.

00:27:33.810 --> 00:27:37.280
So in this case, we can
actually get some parameters,

00:27:37.280 --> 00:27:40.100
and we can start manipulating
the way the default

00:27:40.100 --> 00:27:42.320
TrackSelector actually
chooses its tracks.

00:27:42.320 --> 00:27:47.962
So here we're limiting the
video tracks to SD, so 480p.

00:27:47.962 --> 00:27:50.420
And you might want to do this
if you know that your user is

00:27:50.420 --> 00:27:53.300
on a metered mobile connection.

00:27:53.300 --> 00:27:55.190
And even if they have
really great bandwidth,

00:27:55.190 --> 00:27:57.960
you probably don't want to use
all of their data very quickly.

00:27:57.960 --> 00:27:59.990
So you might want to
keep a cap on the quality

00:27:59.990 --> 00:28:01.940
that you deliver.

00:28:01.940 --> 00:28:04.947
Similarly if you know
that your user is German,

00:28:04.947 --> 00:28:07.280
you might select a preferred
audio language for the case

00:28:07.280 --> 00:28:09.200
where there are multiple
audio tracks exposed

00:28:09.200 --> 00:28:11.060
by the MediaSource.

00:28:11.060 --> 00:28:13.070
And you can certainly
modify parameters back

00:28:13.070 --> 00:28:16.180
on the selector to actually
activate this new behavior.

00:28:19.120 --> 00:28:21.689
Again if the default
implementation of TrackSelector

00:28:21.689 --> 00:28:23.980
isn't suitable, you can go
a step further and implement

00:28:23.980 --> 00:28:25.854
your own TrackSelector.

00:28:25.854 --> 00:28:27.520
One of the methods
you need to implement

00:28:27.520 --> 00:28:29.470
if you do this is selectTracks.

00:28:29.470 --> 00:28:32.290
And hopefully you can map
the signature of this method

00:28:32.290 --> 00:28:34.610
back to the diagram
we saw earlier.

00:28:34.610 --> 00:28:36.880
It's receiving the
capabilities from the renderers

00:28:36.880 --> 00:28:38.770
and the TrackGroups
from the MediaSource,

00:28:38.770 --> 00:28:42.820
and it's generating a selection.

00:28:42.820 --> 00:28:44.750
And of course the same
tricks can be applied

00:28:44.750 --> 00:28:46.760
for the renderers as well.

00:28:46.760 --> 00:28:48.920
Implementing your own
VideoRenderer from scratch

00:28:48.920 --> 00:28:51.290
is a pretty advanced
customization,

00:28:51.290 --> 00:28:53.190
but you could do it if
you really wanted to

00:28:53.190 --> 00:28:56.540
and you kind of have a good
handle on exactly what you

00:28:56.540 --> 00:28:59.500
have to do to achieve that.

00:28:59.500 --> 00:29:01.810
And you could extend
default RenderersFactory,

00:29:01.810 --> 00:29:03.940
override the
buildVideoRenderers method,

00:29:03.940 --> 00:29:06.911
and actually inject your own
VideoRenderer into the player

00:29:06.911 --> 00:29:09.160
instead of the default that
would normally be created.

00:29:12.520 --> 00:29:14.540
ANDREW LEWIS: OK, great.

00:29:14.540 --> 00:29:16.940
So hopefully you can
see a pattern emerging

00:29:16.940 --> 00:29:19.840
in each of the examples
of customization

00:29:19.840 --> 00:29:21.600
that Ollie talked about.

00:29:21.600 --> 00:29:23.840
So the first step
was establishing

00:29:23.840 --> 00:29:26.570
which component in the
player we need to customize,

00:29:26.570 --> 00:29:31.160
whether it's the TrackSelector
or the LoadControl.

00:29:31.160 --> 00:29:33.500
Then you look at the
API for that component

00:29:33.500 --> 00:29:37.760
and see if there's a way to
customize its behavior using,

00:29:37.760 --> 00:29:41.030
say, a different parameter,
as we did with LoadControl.

00:29:41.030 --> 00:29:42.860
If that's not a
possibility, then you

00:29:42.860 --> 00:29:44.720
might be able to
extend or actually

00:29:44.720 --> 00:29:47.315
implement your own version of
this component from scratch.

00:29:50.090 --> 00:29:52.700
So I'm just going to do one
more example of customization

00:29:52.700 --> 00:29:55.560
on the MediaSource
side this time.

00:29:55.560 --> 00:29:58.160
So imagine that we need
to send an authorization

00:29:58.160 --> 00:30:03.926
header with each HTTP request
that a MediaSource makes.

00:30:03.926 --> 00:30:05.300
Well, we know that
we are passing

00:30:05.300 --> 00:30:08.630
in a HttpDataSourceFactory.

00:30:08.630 --> 00:30:11.780
And this has a convenient method
to get the default request

00:30:11.780 --> 00:30:13.730
properties.

00:30:13.730 --> 00:30:16.130
And by getting the default
request properties,

00:30:16.130 --> 00:30:19.910
we can actually set a new header
to set the authorization header

00:30:19.910 --> 00:30:21.740
on the HTTP request.

00:30:21.740 --> 00:30:24.950
And once you've done that, you
pass the httpDataSourceFactory

00:30:24.950 --> 00:30:26.180
into the MediaSource.

00:30:26.180 --> 00:30:28.730
And that header will appear
on all requests that it makes.

00:30:31.630 --> 00:30:33.940
As another example,
let's say that you

00:30:33.940 --> 00:30:36.830
know that users are going to
rewind videos quite a lot,

00:30:36.830 --> 00:30:40.710
so you want to add a cache
in so that the player doesn't

00:30:40.710 --> 00:30:44.310
repeatedly load the same
media off the network.

00:30:44.310 --> 00:30:47.650
ExoPlayer has a simple
cache which you can use.

00:30:47.650 --> 00:30:49.260
And in this example
I'm posting in a

00:30:49.260 --> 00:30:51.580
LeastRecentlyUsedCacheEvictor.

00:30:51.580 --> 00:30:53.320
So the way this is
going to work is

00:30:53.320 --> 00:30:55.400
the cache has a maximum size.

00:30:55.400 --> 00:30:58.060
But if the media is
longer than that, then

00:30:58.060 --> 00:30:59.860
when the media
finishes, if they've

00:30:59.860 --> 00:31:01.090
watched the media
all the way through,

00:31:01.090 --> 00:31:02.464
then the cache
will actually have

00:31:02.464 --> 00:31:04.510
started to evict the
very beginning of it.

00:31:07.240 --> 00:31:11.200
So this cache gets passed
into a CacheDataSourceFactory.

00:31:11.200 --> 00:31:14.080
And it also needs to take
a normal DataSource which

00:31:14.080 --> 00:31:18.580
is used if there's a cache miss
and also to populate the cache.

00:31:18.580 --> 00:31:20.440
And then you pass the
CacheDataSourceFactory

00:31:20.440 --> 00:31:22.420
to the ExtractorMediaSource.

00:31:22.420 --> 00:31:25.254
So hopefully to make this
a little bit clearer,

00:31:25.254 --> 00:31:26.920
let's see how it fits
in with the player

00:31:26.920 --> 00:31:29.290
architecture we saw earlier.

00:31:29.290 --> 00:31:32.110
This cache is actually going
to sit between the MediaSource

00:31:32.110 --> 00:31:34.030
and the HttpDataSource.

00:31:34.030 --> 00:31:36.470
And when the MediaSource
requests data,

00:31:36.470 --> 00:31:38.680
it's first going to
look it up in the cache.

00:31:38.680 --> 00:31:41.310
If there's a cache miss, then
it's going to go to the network

00:31:41.310 --> 00:31:43.420
and use the HttpDataSource.

00:31:43.420 --> 00:31:45.640
Then when that
request is satisfied,

00:31:45.640 --> 00:31:47.600
it's going to come back
and fill in the cache

00:31:47.600 --> 00:31:49.789
so that next time the
MediaSource requests

00:31:49.789 --> 00:31:52.330
the same chunk, then hopefully
it's going to be in the cache.

00:31:56.120 --> 00:31:59.690
So we talked about how
the kind of extreme case

00:31:59.690 --> 00:32:03.140
of customization is
providing a MediaSource

00:32:03.140 --> 00:32:07.160
or whatever that you've
implemented yourself.

00:32:07.160 --> 00:32:09.576
So I'm going to go through
an example of doing that.

00:32:09.576 --> 00:32:11.450
Let's say that you've
got an app where you're

00:32:11.450 --> 00:32:12.824
showing some
content, but now you

00:32:12.824 --> 00:32:17.810
want to monetize that content
by showing ads alongside it.

00:32:17.810 --> 00:32:20.510
Let's have a think about
what the timeline is going

00:32:20.510 --> 00:32:22.310
to look like in this case.

00:32:22.310 --> 00:32:24.489
Well, it may be very simple.

00:32:24.489 --> 00:32:26.030
In this example on
the screen there's

00:32:26.030 --> 00:32:29.450
just one ad at the
beginning, a pre-roll ad.

00:32:29.450 --> 00:32:31.500
Or it may be more complicated.

00:32:31.500 --> 00:32:34.070
So in this case
there's a pre-roll ad

00:32:34.070 --> 00:32:36.620
on a mid-roll ad
and a post-roll ad.

00:32:36.620 --> 00:32:40.650
And they kind of
split up the content.

00:32:40.650 --> 00:32:42.630
So at first glance
you might think

00:32:42.630 --> 00:32:45.780
this is a place where we could
use ConcatenatingMediaSource.

00:32:45.780 --> 00:32:48.990
But unfortunately normally
when you're loading ads,

00:32:48.990 --> 00:32:52.320
you can't actually commit
to a particular ad URI

00:32:52.320 --> 00:32:54.280
until the time when
you're about to play it.

00:32:54.280 --> 00:32:56.654
It's not the case that we have
a list of exactly what ads

00:32:56.654 --> 00:32:59.660
we're going to play upfront.

00:32:59.660 --> 00:33:01.410
So let's see what would
happen if we tried

00:33:01.410 --> 00:33:06.030
to use just one player with
conventional MediaSources

00:33:06.030 --> 00:33:08.610
to play these ads.

00:33:08.610 --> 00:33:11.050
So at the beginning of
playback, we got the URI

00:33:11.050 --> 00:33:13.800
for the first ad, and
then we can play it.

00:33:13.800 --> 00:33:16.170
But then we know that we
need to play the content.

00:33:16.170 --> 00:33:18.180
So the player is
actually going to buffer

00:33:18.180 --> 00:33:22.400
when we tell it that we want
to play the content instead.

00:33:22.400 --> 00:33:24.420
Then the content will
play back and the user

00:33:24.420 --> 00:33:26.940
is going to see buffering again.

00:33:26.940 --> 00:33:30.030
Then the ad, more
buffering, and I

00:33:30.030 --> 00:33:32.086
guess you're saying how
this is going to work.

00:33:32.086 --> 00:33:33.210
There's a lot of buffering.

00:33:33.210 --> 00:33:35.710
And this is not a
good user experience.

00:33:35.710 --> 00:33:38.430
So one way that people
try to work around this

00:33:38.430 --> 00:33:40.500
is they will try
and use two players.

00:33:40.500 --> 00:33:42.060
And the idea is
that one player is

00:33:42.060 --> 00:33:44.277
going to play what's on
the screen at the moment

00:33:44.277 --> 00:33:46.860
while the other player is in the
background buffering whatever

00:33:46.860 --> 00:33:48.540
is coming up next.

00:33:48.540 --> 00:33:50.797
So as soon as the
ad URI arrives,

00:33:50.797 --> 00:33:52.380
you can populate the
background player

00:33:52.380 --> 00:33:54.210
and hopefully get
some data buffered

00:33:54.210 --> 00:33:56.700
before playback begins.

00:33:56.700 --> 00:33:59.340
And in this case,
the playback will

00:33:59.340 --> 00:34:01.980
switch in between the
ad and the content.

00:34:01.980 --> 00:34:05.520
But this solution also
has its drawbacks.

00:34:05.520 --> 00:34:08.250
These two players are both going
to use up memory for buffering,

00:34:08.250 --> 00:34:11.590
and they may even both be
using codecs at the same time.

00:34:11.590 --> 00:34:13.080
So that's not very good.

00:34:13.080 --> 00:34:15.000
And also this is
just very difficult

00:34:15.000 --> 00:34:18.730
to implement correctly if
you've ever tried doing this.

00:34:18.730 --> 00:34:21.989
So we thought about implementing
a MediaSource that's

00:34:21.989 --> 00:34:24.449
specifically designed for ads.

00:34:24.449 --> 00:34:26.010
And this MediaSource
is implemented

00:34:26.010 --> 00:34:29.840
in a slightly similar way to
the concatenating media source,

00:34:29.840 --> 00:34:33.210
except that it has these
playlists items which

00:34:33.210 --> 00:34:34.389
are not populated.

00:34:34.389 --> 00:34:36.580
And those are represented
by the question marks.

00:34:36.580 --> 00:34:38.670
Those are going to get
filled in with the ads

00:34:38.670 --> 00:34:41.340
as soon as they arrive.

00:34:41.340 --> 00:34:42.929
So let's see what
playback would look

00:34:42.929 --> 00:34:46.400
like with this
hypothetical MediaSource.

00:34:46.400 --> 00:34:48.600
Playback begins and
we get the first ad.

00:34:48.600 --> 00:34:49.920
Then the content plays.

00:34:49.920 --> 00:34:52.190
Hopefully we get the next
ad a little bit early.

00:34:52.190 --> 00:34:55.850
And that placeholder is
filled in in the timeline.

00:34:55.850 --> 00:34:58.380
And if this works
well, then the user

00:34:58.380 --> 00:35:02.620
is actually not going to see
any buffering during playback.

00:35:02.620 --> 00:35:04.980
So as a real practical
example of this,

00:35:04.980 --> 00:35:07.880
Google provides the
InteractiveMediaAds SDK.

00:35:07.880 --> 00:35:09.210
You may have heard of it.

00:35:09.210 --> 00:35:14.790
And we're using that for loading
ads in this ImaAdsMediaSource.

00:35:14.790 --> 00:35:17.490
And as you can see,
the area kind of

00:35:17.490 --> 00:35:21.030
highlights when the
ad is loaded from IMA.

00:35:21.030 --> 00:35:24.030
And the media source
is wrapping IMA,

00:35:24.030 --> 00:35:26.820
so the player doesn't need to
worry about any details of how

00:35:26.820 --> 00:35:28.560
ads are actually loaded.

00:35:28.560 --> 00:35:30.690
And in this timeline you
get seamless transitions

00:35:30.690 --> 00:35:32.110
between content and ads.

00:35:35.940 --> 00:35:38.360
So we actually pushed this
to our development branch

00:35:38.360 --> 00:35:39.980
today if you want
an early preview,

00:35:39.980 --> 00:35:42.610
if you want to try inserting
ads in your content.

00:35:42.610 --> 00:35:43.920
It's very easy to use.

00:35:43.920 --> 00:35:45.950
So you take your
content MediaSource

00:35:45.950 --> 00:35:47.780
and you pass it
into the construct

00:35:47.780 --> 00:35:51.920
of an ImaAdsMediaSource along
with an adTagUri which defines

00:35:51.920 --> 00:35:55.200
what ad playlists to load.

00:35:55.200 --> 00:35:56.870
And it also takes
an OverlayViewGroup

00:35:56.870 --> 00:35:59.240
which interactive
media ads will use

00:35:59.240 --> 00:36:01.880
to show any ad user interface
on top of your player

00:36:01.880 --> 00:36:05.590
like a skip button, for example.

00:36:05.590 --> 00:36:07.340
Here's what you get
if you try doing this.

00:36:07.340 --> 00:36:10.640
So you can see the
pre-roll ad is playing.

00:36:10.640 --> 00:36:12.380
And then when the
ad finishes we get

00:36:12.380 --> 00:36:14.900
a pretty seamless
transition between the ad

00:36:14.900 --> 00:36:16.719
into the content.

00:36:16.719 --> 00:36:19.010
And you can see that our
playback controls have support

00:36:19.010 --> 00:36:21.620
for showing little ad
markers so the user can

00:36:21.620 --> 00:36:23.246
see where the mid-roll ads are.

00:36:23.246 --> 00:36:24.620
And during this
playback, there's

00:36:24.620 --> 00:36:27.420
a consistent buffering policy
being applied at all times.

00:36:30.420 --> 00:36:33.975
Now back to Ollie to talk
about some of our future plans.

00:36:33.975 --> 00:36:35.600
OLIVER WOODMAN: So
before we leave you,

00:36:35.600 --> 00:36:37.790
I just want to say a little
bit about the direction

00:36:37.790 --> 00:36:40.520
in which ExoPlayer is headed.

00:36:40.520 --> 00:36:43.770
Just to caveat this,
this is no way a promise,

00:36:43.770 --> 00:36:47.024
and we're not going to
put timelines on anything.

00:36:47.024 --> 00:36:48.440
But in terms of
the kind of things

00:36:48.440 --> 00:36:50.856
that we're going to be looking
at over the next six months

00:36:50.856 --> 00:36:53.459
to a year, we're
going to continue

00:36:53.459 --> 00:36:55.000
to fill in the
remaining feature gaps

00:36:55.000 --> 00:36:57.680
that we have in terms of
becoming a really complete

00:36:57.680 --> 00:36:59.690
media playback library.

00:36:59.690 --> 00:37:02.990
One specific thing here that
we know is causing a lot of you

00:37:02.990 --> 00:37:05.007
problems is proper
support for offline.

00:37:05.007 --> 00:37:06.590
So this is where you
actually download

00:37:06.590 --> 00:37:09.060
media to playback later.

00:37:09.060 --> 00:37:10.490
And so you can
expect us to start

00:37:10.490 --> 00:37:13.580
building up support for offline
during the next six months

00:37:13.580 --> 00:37:15.500
to a year.

00:37:15.500 --> 00:37:17.000
We're also going
to continue to work

00:37:17.000 --> 00:37:18.990
on performance enhancements.

00:37:18.990 --> 00:37:22.760
And by that I mean things like
maintaining decoder instances

00:37:22.760 --> 00:37:25.340
from the platform from
one playback to the next,

00:37:25.340 --> 00:37:26.990
because releasing
and instantiating

00:37:26.990 --> 00:37:31.400
those decoders as we do
now can be quite expensive.

00:37:31.400 --> 00:37:33.950
Another aspect of performance
that we intend to look at

00:37:33.950 --> 00:37:37.320
is improved adaptive track
selections for DASH and HLS

00:37:37.320 --> 00:37:40.520
and SmoothStreaming
adaptive playbacks, and also

00:37:40.520 --> 00:37:42.980
more advanced
buffering policies.

00:37:42.980 --> 00:37:45.140
So the default components
that we currently

00:37:45.140 --> 00:37:48.050
provide for performing
these tasks,

00:37:48.050 --> 00:37:50.330
they're pretty
effective, but they're

00:37:50.330 --> 00:37:52.850
quite simple in terms of
the policies they implement.

00:37:52.850 --> 00:37:56.716
So we really want to start
kind of diving deeper

00:37:56.716 --> 00:37:58.340
and doing some proper
research and kind

00:37:58.340 --> 00:38:01.440
of fine tuning these to
deliver better performance out

00:38:01.440 --> 00:38:03.740
of the box.

00:38:03.740 --> 00:38:08.530
And finally we know that the
ExoPlayer API is very large

00:38:08.530 --> 00:38:10.640
and that it can be daunting
to get started with

00:38:10.640 --> 00:38:13.130
and to figure out exactly where
you need to dive in if you

00:38:13.130 --> 00:38:15.050
want to customize something.

00:38:15.050 --> 00:38:18.110
So we're going to work on some
better documentation as well,

00:38:18.110 --> 00:38:20.167
probably starting
with documenting

00:38:20.167 --> 00:38:22.250
some of the internal
components that the player is

00:38:22.250 --> 00:38:24.730
using, as we described earlier.

00:38:27.440 --> 00:38:30.410
In terms of what you can
do next with ExoPlayer

00:38:30.410 --> 00:38:32.660
whilst you're here, we
have office hours tomorrow

00:38:32.660 --> 00:38:35.897
over in the office hours
box at 9:30 in the morning.

00:38:35.897 --> 00:38:38.480
So if you have any questions for
us, then please do come along

00:38:38.480 --> 00:38:42.709
and we'll be more than happy to
have a chat and to answer them.

00:38:42.709 --> 00:38:44.750
If you want to go and
check out our source codes,

00:38:44.750 --> 00:38:49.382
the GitHub repository is public
and you can go and have a look.

00:38:49.382 --> 00:38:50.840
And we also have
a home page, which

00:38:50.840 --> 00:38:54.290
includes the developer guides
that will help you get started.

00:38:54.290 --> 00:38:56.720
And it also has various
piece of documentation

00:38:56.720 --> 00:39:00.280
such as supported formats.

00:39:00.280 --> 00:39:03.786
And with that, I'd like to
just thank you all for coming.

00:39:03.786 --> 00:39:05.910
We unfortunately don't have
time for questions now,

00:39:05.910 --> 00:39:08.870
but we will probably just
down in the corner afterwards.

00:39:08.870 --> 00:39:11.452
And as I said, if
you do have questions

00:39:11.452 --> 00:39:12.910
that we can't answer
now, please do

00:39:12.910 --> 00:39:14.670
you come along tomorrow
morning and we'd

00:39:14.670 --> 00:39:15.799
be happy to answer them.

00:39:15.799 --> 00:39:17.340
So thank you very
much for your time.

00:39:17.340 --> 00:39:20.040
[APPLAUSE]

00:39:20.040 --> 00:39:23.690
[MUSIC PLAYING]

