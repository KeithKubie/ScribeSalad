WEBVTT
Kind: captions
Language: en

00:00:00.290 --> 00:00:03.540
Let's look at how address translations work.

00:00:03.540 --> 00:00:07.600
An, an architecture that supports address space

00:00:07.600 --> 00:00:10.980
tags in the TLB. Recall that the

00:00:10.980 --> 00:00:14.570
virtual addresses are being generated on behalf of

00:00:14.570 --> 00:00:18.870
a particular process, and the process has a process ID that is uniquely assigned

00:00:18.870 --> 00:00:26.320
by the operating system for that process. So when we make an entry into the TLB,

00:00:26.320 --> 00:00:31.540
what we are storing in the TLB is not only the tag that is associated with a

00:00:31.540 --> 00:00:35.190
particular virtual address, but also the PID of

00:00:35.190 --> 00:00:38.540
the process for which we are creating this entry

00:00:38.540 --> 00:00:41.170
in the TLB. So in other words, every

00:00:41.170 --> 00:00:44.090
entry in the TLB is flagged with the process

00:00:44.090 --> 00:00:47.980
ID that, that particular entry corresponds to. So

00:00:47.980 --> 00:00:51.360
how does address translation work in this address space

00:00:51.360 --> 00:00:56.490
tagged TLB? Well, similar to a normal TLB, we're going to take this virtual

00:00:56.490 --> 00:01:01.210
address and split it in two parts, the index part and the tag part. The index

00:01:01.210 --> 00:01:06.270
part is what let's us look up a particular entry in the TLB. And

00:01:06.270 --> 00:01:11.160
from the TLB we get two tags. One tag is the address space

00:01:11.160 --> 00:01:16.410
tag. This is signifying which process created

00:01:16.410 --> 00:01:19.120
this particluar entry. So what we want to do is,

00:01:19.120 --> 00:01:22.050
we want to compare the PID of the process that is

00:01:22.050 --> 00:01:25.620
currently generating this virtual address against the tag that is

00:01:25.620 --> 00:01:29.150
contained at that entry. And this matching hardware, is going to

00:01:29.150 --> 00:01:32.100
say yes or no, if it says no then we

00:01:32.100 --> 00:01:35.560
are done, then this entry does not correspond to the virtual

00:01:35.560 --> 00:01:38.120
address that we're trying to translate here. On the other

00:01:38.120 --> 00:01:42.170
hand, if it does match, this entry does correspond to this

00:01:42.170 --> 00:01:45.630
process, then we want to ask the question,

00:01:45.630 --> 00:01:48.390
whether the tag that is associated with this

00:01:48.390 --> 00:01:52.170
entry, is the same as the tag that

00:01:52.170 --> 00:01:53.740
is contained in the virtual address. So that's

00:01:53.740 --> 00:02:01.320
a second level of matching that goes on. And only if both the process ID matches

00:02:01.320 --> 00:02:07.110
and the tag matches do we have a hit in the TLB. So in other words,

00:02:08.160 --> 00:02:10.639
there is two level of matching going on.

00:02:10.639 --> 00:02:13.660
And therefore, when we do a context switch from

00:02:13.660 --> 00:02:16.330
one process to another process, there is no need

00:02:16.330 --> 00:02:19.450
to flush the TLB on the context switch, because

00:02:19.450 --> 00:02:22.930
the TLB may contain some translations on behalf

00:02:22.930 --> 00:02:27.050
of the previously executing process. And it may contain

00:02:27.050 --> 00:02:30.310
some translations that correspond to the new process that

00:02:30.310 --> 00:02:34.260
has been scheduled on it. And the hardware disambiguates

00:02:34.260 --> 00:02:36.890
these entries by doing this second level

00:02:36.890 --> 00:02:39.700
of matching of process ID against the address

00:02:39.700 --> 00:02:41.530
space stack that is contained in the

00:02:41.530 --> 00:02:46.070
TLB. But, if the memory management hardware does

00:02:46.070 --> 00:02:51.320
not support address space tag, then what do we do? And this is a case

00:02:51.320 --> 00:02:54.390
for instance, in the Intel architecture, that

00:02:54.390 --> 00:02:57.090
the TLB does not have address space tags.

