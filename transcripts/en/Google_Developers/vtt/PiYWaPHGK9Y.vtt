WEBVTT
Kind: captions
Language: en

00:00:05.879 --> 00:00:06.670
TIMOTHY JORDAN: OK.

00:00:06.670 --> 00:00:09.190
So we're now in the
Android Sandbox area.

00:00:09.190 --> 00:00:11.140
I'm going to spend
some time in this area

00:00:11.140 --> 00:00:12.550
because there's a lot going on.

00:00:12.550 --> 00:00:14.980
But we're going to start
with just features of the OS.

00:00:14.980 --> 00:00:17.560
And David here is going
to tell us about a couple

00:00:17.560 --> 00:00:19.780
of things I've been
really curious about.

00:00:19.780 --> 00:00:22.695
Can we start with Kotlin?

00:00:22.695 --> 00:00:23.695
Let's talk about Kotlin.

00:00:23.695 --> 00:00:24.040
DAVID: Sure.

00:00:24.040 --> 00:00:25.770
Kotlin is definitely
the show-stealer,

00:00:25.770 --> 00:00:28.330
it seems to me from
watching the keynotes.

00:00:28.330 --> 00:00:32.560
So Android Studio now
has Kotlin support.

00:00:32.560 --> 00:00:35.490
You can create a new project.

00:00:35.490 --> 00:00:37.480
And you'll see that
you have the ability

00:00:37.480 --> 00:00:39.640
to check Kotlin support
in from the beginning.

00:00:39.640 --> 00:00:41.527
We already have a
Kotlin app here,

00:00:41.527 --> 00:00:43.360
but you can also write
Java code and convert

00:00:43.360 --> 00:00:46.832
it to Kotlin very simply.

00:00:46.832 --> 00:00:48.790
TIMOTHY JORDAN: And do
you like writing Kotlin?

00:00:48.790 --> 00:00:49.750
DAVID: I love writing Kotlin.

00:00:49.750 --> 00:00:51.166
I actually haven't
gotten a chance

00:00:51.166 --> 00:00:52.780
to write Kotlin recently.

00:00:52.780 --> 00:00:53.800
But when it was--

00:00:53.800 --> 00:00:55.780
when I was first learning
about it a year ago,

00:00:55.780 --> 00:00:58.114
I spent a lot of time just
going through the language

00:00:58.114 --> 00:00:59.530
and getting very
excited about it,

00:00:59.530 --> 00:01:02.200
just because it looked
so much more concise,

00:01:02.200 --> 00:01:04.861
and it brings in a
lot of modern features

00:01:04.861 --> 00:01:06.610
that I like from a lot
of other languages.

00:01:06.610 --> 00:01:09.250
And I was really happy to see
how fast they moved on it,

00:01:09.250 --> 00:01:11.670
and the great tooling
support that IntelliJ

00:01:11.670 --> 00:01:12.670
brought into it as well.

00:01:12.670 --> 00:01:12.820
TIMOTHY JORDAN: Yeah.

00:01:12.820 --> 00:01:15.250
I mean, I've been talking to
people around the festival

00:01:15.250 --> 00:01:17.260
today, and one of the
things they keep saying

00:01:17.260 --> 00:01:19.690
is how well-designed
they believe Kotlin is

00:01:19.690 --> 00:01:21.800
and what a mature language
it is because of that.

00:01:21.800 --> 00:01:23.200
DAVID: Yeah, no,
it's absolutely.

00:01:23.200 --> 00:01:24.991
I feel that they've
got a lot of influences

00:01:24.991 --> 00:01:26.350
from a lot of new languages.

00:01:26.350 --> 00:01:29.090
I highly recommend trying
it out, give it a shot.

00:01:29.090 --> 00:01:31.060
TIMOTHY JORDAN: And
Katherine, you've

00:01:31.060 --> 00:01:33.509
been working on bringing
Kotlin into Android

00:01:33.509 --> 00:01:34.300
for a little while.

00:01:34.300 --> 00:01:37.624
Can you tell us what the
motivation for that was?

00:01:37.624 --> 00:01:38.290
KATHERINE: Yeah.

00:01:38.290 --> 00:01:41.050
So I think the big reasons we
want to bring Kotlin to Android

00:01:41.050 --> 00:01:43.660
were that, like David
says, most developers who

00:01:43.660 --> 00:01:46.120
try it find it to be really
concise and expressive,

00:01:46.120 --> 00:01:48.700
and has a lot of awesome
features like type

00:01:48.700 --> 00:01:51.010
and null safety, which are
really useful for writing

00:01:51.010 --> 00:01:53.470
stable, non-crashy apps.

00:01:53.470 --> 00:01:55.990
Plus it's totally compatible
with the existing Android

00:01:55.990 --> 00:01:58.052
environment, and also
with the Java language,

00:01:58.052 --> 00:02:00.510
which means that, even if you
have a large existing Android

00:02:00.510 --> 00:02:03.510
code base, it's really easy
to incrementally adopt it.

00:02:03.510 --> 00:02:05.477
And you can kind of try
things where it works.

00:02:05.477 --> 00:02:07.810
You don't have to go rewriting
large swaths of the code.

00:02:07.810 --> 00:02:08.690
TIMOTHY JORDAN:
That's awesome, being

00:02:08.690 --> 00:02:10.750
able to incrementally adopt
it, as you were saying,

00:02:10.750 --> 00:02:13.090
so you don't have to sort of
jump in and refactor everything

00:02:13.090 --> 00:02:13.720
all at once.

00:02:13.720 --> 00:02:14.240
KATHERINE: Yeah, exactly.

00:02:14.240 --> 00:02:15.950
Like, if you have some chunk
of Java you're happy with,

00:02:15.950 --> 00:02:17.800
you can just leave
that, keep modifying it,

00:02:17.800 --> 00:02:19.133
write some new module in Kotlin.

00:02:19.133 --> 00:02:22.046
You kind of adopt it very
organically as you see fit.

00:02:22.046 --> 00:02:23.046
TIMOTHY JORDAN: Awesome.

00:02:23.046 --> 00:02:24.580
KATHERINE: Oh, and I
think the final thing is

00:02:24.580 --> 00:02:26.590
just we've been hearing about it
from more and more developers,

00:02:26.590 --> 00:02:28.280
that they love it,
it really makes

00:02:28.280 --> 00:02:29.530
them happy to write in it.

00:02:29.530 --> 00:02:31.363
And yeah, we try to
listen to our developers

00:02:31.363 --> 00:02:33.520
and give them things
they love, so hey.

00:02:33.520 --> 00:02:34.990
TIMOTHY JORDAN: Absolutely.

00:02:34.990 --> 00:02:37.090
I want to look at something
else as well, David--

00:02:37.090 --> 00:02:38.547
the profiler in Android Studio.

00:02:38.547 --> 00:02:39.880
Can you show me something there?

00:02:39.880 --> 00:02:40.360
DAVID: Sure.

00:02:40.360 --> 00:02:42.068
We're really excited
about the profilers.

00:02:42.068 --> 00:02:44.020
I feel like this is
a long time coming.

00:02:44.020 --> 00:02:45.436
If you look here,
you can actually

00:02:45.436 --> 00:02:47.040
see that this is
displaying Bitmaps.

00:02:47.040 --> 00:02:48.545
It's a sample Android app.

00:02:48.545 --> 00:02:50.460
We downloaded it as is.

00:02:50.460 --> 00:02:52.189
We didn't modify it at all.

00:02:52.189 --> 00:02:53.980
And if you look over
here, you can actually

00:02:53.980 --> 00:02:55.900
see we've already started
the profilers on it.

00:02:55.900 --> 00:02:57.820
We have the CPU, memory,
and network profiler.

00:02:57.820 --> 00:02:59.680
So if I start to
interact with the app,

00:02:59.680 --> 00:03:01.971
you'll start to see
the different profilers

00:03:01.971 --> 00:03:02.470
[INAUDIBLE].

00:03:02.470 --> 00:03:02.800
TIMOTHY JORDAN: Oh, wow.

00:03:02.800 --> 00:03:03.310
DAVID: Yeah.

00:03:03.310 --> 00:03:05.650
So you can deep dive
into any of them.

00:03:05.650 --> 00:03:09.790
You can sample
CPU activity here.

00:03:09.790 --> 00:03:11.860
We can click on some stuff.

00:03:11.860 --> 00:03:15.010
And then what you'll see is,
if you drag across there,

00:03:15.010 --> 00:03:18.550
you could actually look at
the content of the request.

00:03:18.550 --> 00:03:20.622
This is actually
an HTTPS request,

00:03:20.622 --> 00:03:22.330
and you can still see
the contents of it,

00:03:22.330 --> 00:03:24.460
which is something that
we're very excited about,

00:03:24.460 --> 00:03:26.949
because that was normally a
challenge for a lot of people

00:03:26.949 --> 00:03:27.490
to try to do.

00:03:27.490 --> 00:03:30.589
I think some people would
debug in HTTP traffic

00:03:30.589 --> 00:03:31.380
in order to see it.

00:03:31.380 --> 00:03:33.931
And so we've sort of enabled
some new features here,

00:03:33.931 --> 00:03:34.930
which we're happy about.

00:03:34.930 --> 00:03:35.350
TIMOTHY JORDAN: Oh, yeah.

00:03:35.350 --> 00:03:37.990
I'm used to inspecting
the traffic on the machine

00:03:37.990 --> 00:03:40.420
that I'm testing on to try and
get that debug information.

00:03:40.420 --> 00:03:42.270
And yet, here it
is right in Studio.

00:03:42.270 --> 00:03:43.390
That's so convenient.

00:03:43.390 --> 00:03:43.600
DAVID: Yeah.

00:03:43.600 --> 00:03:45.933
I really hope that people
have a chance to play with it.

00:03:45.933 --> 00:03:48.754
We hope that they find
the profilers intuitive.

00:03:48.754 --> 00:03:50.170
I mean, to me,
what's exciting is,

00:03:50.170 --> 00:03:52.790
as you're messing around
with your app, you might--

00:03:52.790 --> 00:03:54.790
all of these things that
were invisible for you,

00:03:54.790 --> 00:03:57.100
you now have a chance to
actually play around with it

00:03:57.100 --> 00:03:58.220
and see it.

00:03:58.220 --> 00:03:59.667
And as I said, we
don't even think

00:03:59.667 --> 00:04:01.250
we're including
documentation with it.

00:04:01.250 --> 00:04:03.083
But we're even hoping
that, even without it,

00:04:03.083 --> 00:04:06.100
you should just be able to
play around and try things

00:04:06.100 --> 00:04:07.900
out and see what
happens, and then learn

00:04:07.900 --> 00:04:09.220
more about your code.

00:04:09.220 --> 00:04:11.110
We were once
debugging some code.

00:04:11.110 --> 00:04:12.947
And we're like, no,
something's wrong here.

00:04:12.947 --> 00:04:14.530
We're getting this
weird memory spike.

00:04:14.530 --> 00:04:16.360
And we were actually--
we were surprised to find

00:04:16.360 --> 00:04:18.375
that, all along, this code
had a problem with it,

00:04:18.375 --> 00:04:19.660
but we didn't know
about it until we

00:04:19.660 --> 00:04:21.100
had written our own profilers.

00:04:21.100 --> 00:04:22.060
TIMOTHY JORDAN:
That's profiling.

00:04:22.060 --> 00:04:22.690
DAVID: There you go.

00:04:22.690 --> 00:04:23.050
TIMOTHY JORDAN: Awesome.

00:04:23.050 --> 00:04:24.340
David, thanks so much
for taking the time.

00:04:24.340 --> 00:04:25.465
DAVID: Thank you very much.

00:04:31.560 --> 00:04:33.270
A few people online
have been asking

00:04:33.270 --> 00:04:35.220
me to get a demo of
picture-in-picture.

00:04:35.220 --> 00:04:37.810
So I found Rob, and he's
going to give that to us.

00:04:37.810 --> 00:04:40.350
ROB: Hey, I'm Rob from the
Android Window Manager team.

00:04:40.350 --> 00:04:42.240
And I've been working
on picture-in-picture

00:04:42.240 --> 00:04:43.530
for this release.

00:04:43.530 --> 00:04:45.710
We're really excited
about it because Android--

00:04:45.710 --> 00:04:47.460
you know, it's always
been a good platform

00:04:47.460 --> 00:04:51.311
for interacting with content,
watching YouTube, et cetera.

00:04:51.311 --> 00:04:53.310
But if you want to start
to interact more deeply

00:04:53.310 --> 00:04:55.560
and multitask, we haven't
always provided the tools.

00:04:55.560 --> 00:04:57.850
And I think picture-in-picture
is a great one.

00:04:57.850 --> 00:05:00.660
So I'll walk you through
a way of using it.

00:05:00.660 --> 00:05:01.800
So here we have this video.

00:05:01.800 --> 00:05:05.640
And it's a Go game by Lee
Sedol, the player who famously

00:05:05.640 --> 00:05:08.640
challenged AlphaGo last year.

00:05:08.640 --> 00:05:11.644
And we can see, if we go back
to Home, we'll get the video.

00:05:11.644 --> 00:05:12.810
And it's still playing here.

00:05:12.810 --> 00:05:14.450
We can move it around.

00:05:14.450 --> 00:05:17.430
And for example, I
could go into my Go app,

00:05:17.430 --> 00:05:19.010
and I could start to multitask.

00:05:19.010 --> 00:05:20.480
And I could play
the game along--

00:05:20.480 --> 00:05:21.938
TIMOTHY JORDAN:
Oh, that's so cool.

00:05:21.938 --> 00:05:26.250
ROB: --so that I could, you
know, play along with the game

00:05:26.250 --> 00:05:28.250
and begin to explore
my own variations.

00:05:28.250 --> 00:05:29.804
And I can dismiss,
tap when I'm done.

00:05:29.804 --> 00:05:31.095
TIMOTHY JORDAN: That's awesome.

00:05:31.095 --> 00:05:32.856
ROB: That's the Android
picture-in-picture.

00:05:32.856 --> 00:05:34.022
TIMOTHY JORDAN: Thanks, Rob.

00:05:34.022 --> 00:05:34.919
ROB: Well, thank you.

00:05:34.919 --> 00:05:36.960
TIMOTHY JORDAN: Everybody's
talking about Kotlin,

00:05:36.960 --> 00:05:39.900
so I was able to get some
more info out of Andre

00:05:39.900 --> 00:05:40.691
from JetBrains.

00:05:40.691 --> 00:05:41.190
Hi, Andre.

00:05:41.190 --> 00:05:42.330
ANDRE: Hello.

00:05:42.330 --> 00:05:43.800
TIMOTHY JORDAN:
So first question.

00:05:43.800 --> 00:05:46.050
You've been working with the
Android team for a while.

00:05:46.050 --> 00:05:48.510
What are you most excited
about with this collaboration?

00:05:48.510 --> 00:05:52.440
ANDRE: Well, this is very great
to be here because, basically,

00:05:52.440 --> 00:05:55.770
this means that very many
people will be coming to Kotlin,

00:05:55.770 --> 00:05:59.850
new users, new-- well,
new, exciting ways

00:05:59.850 --> 00:06:02.967
of using the language,
new learning materials,

00:06:02.967 --> 00:06:04.050
new libraries, everything.

00:06:04.050 --> 00:06:07.050
So it's-- basically, Kotlin's
growing as we are looking

00:06:07.050 --> 00:06:07.800
at it.

00:06:07.800 --> 00:06:09.240
And it's altogether wonderful.

00:06:09.240 --> 00:06:10.950
I'm very grateful
to the Android team

00:06:10.950 --> 00:06:13.680
that they had the
courage to make the move.

00:06:13.680 --> 00:06:17.100
That was-- as they say, that
was what the public was actually

00:06:17.100 --> 00:06:17.910
wanting them to do.

00:06:17.910 --> 00:06:19.587
So we're very happy about it.

00:06:19.587 --> 00:06:20.670
TIMOTHY JORDAN: All right.

00:06:20.670 --> 00:06:22.140
So let's talk a little
bit about the future

00:06:22.140 --> 00:06:23.098
and what's coming next.

00:06:23.098 --> 00:06:24.120
First, the language.

00:06:24.120 --> 00:06:26.550
What's coming next with
the Kotlin language?

00:06:26.550 --> 00:06:30.030
ANDRE: There are actually
many things we're working on.

00:06:30.030 --> 00:06:32.760
So the brand new thing
with Kotlin is coroutines.

00:06:32.760 --> 00:06:37.230
We have shown the
experimental design pretty--

00:06:37.230 --> 00:06:40.140
yeah, it was, like,
three three months ago.

00:06:40.140 --> 00:06:41.880
So coroutines are
a big thing now,

00:06:41.880 --> 00:06:44.860
doing asynchronous
programming in an easy way.

00:06:44.860 --> 00:06:47.760
So we're now looking into
improving that and finalizing

00:06:47.760 --> 00:06:49.740
the design, so that the
next version of Kotlin

00:06:49.740 --> 00:06:53.070
will probably have it
already stable so everybody

00:06:53.070 --> 00:06:56.640
can use it and be sure it will
work for all the versions.

00:06:56.640 --> 00:06:59.170
Then the next big thing
is multiplatform Kotlin.

00:06:59.170 --> 00:07:02.930
So Kotlin's now big on Android,
big on the server side.

00:07:02.930 --> 00:07:04.470
We are working on JavaScript.

00:07:04.470 --> 00:07:06.830
And we have recently
introduced native,

00:07:06.830 --> 00:07:09.780
which is in a technical
preview version now.

00:07:09.780 --> 00:07:12.870
So we're trying to span the
language across many platforms

00:07:12.870 --> 00:07:14.880
and enable multiplatform
development, where

00:07:14.880 --> 00:07:18.390
we can, say, have a
couple of modules reused

00:07:18.390 --> 00:07:21.270
for many platforms, and then
some platform-specific modules

00:07:21.270 --> 00:07:24.690
implementing some functionality
in a specific way that's

00:07:24.690 --> 00:07:26.960
leveraging the intricacies
of the platform.

00:07:26.960 --> 00:07:29.670
So it's a very big
big direction for us.

00:07:29.670 --> 00:07:31.800
And then there are
language-only things

00:07:31.800 --> 00:07:34.650
like value types, for
example, for optimal storage

00:07:34.650 --> 00:07:35.910
or collection literals.

00:07:35.910 --> 00:07:38.580
So we have very many
directions there.

00:07:38.580 --> 00:07:40.380
And the strategic
ones are those,

00:07:40.380 --> 00:07:42.440
you know, platform things
and the coroutines.

00:07:42.440 --> 00:07:43.440
TIMOTHY JORDAN: Awesome.

00:07:43.440 --> 00:07:44.330
What about tooling?

00:07:44.330 --> 00:07:45.370
What's next there?

00:07:45.370 --> 00:07:45.870
ANDRE: Yeah.

00:07:45.870 --> 00:07:48.690
So we're-- actually, JetBrains
is all about tooling.

00:07:48.690 --> 00:07:52.560
So our first and
foremost goal with Kotlin

00:07:52.560 --> 00:07:54.480
was making the
language toolable.

00:07:54.480 --> 00:07:57.480
And now we're in a pretty
good shape with many things,

00:07:57.480 --> 00:07:59.550
but there's a long road ahead.

00:07:59.550 --> 00:08:01.860
We're now tightly integrated
with Android Studio,

00:08:01.860 --> 00:08:03.220
and we'll work more on that.

00:08:03.220 --> 00:08:07.980
So in 3.0 preview, we have new
wizards for creating things.

00:08:07.980 --> 00:08:11.330
And we have unified analysis
for Java and Kotlin,

00:08:11.330 --> 00:08:12.792
and we'll improve that.

00:08:12.792 --> 00:08:14.250
We're working on
the incrementality

00:08:14.250 --> 00:08:15.740
of the toolchain.

00:08:15.740 --> 00:08:18.750
So Google side as well
as JetBrains side.

00:08:18.750 --> 00:08:21.046
And for non-Android
things, we're

00:08:21.046 --> 00:08:22.170
doing pretty much the same.

00:08:22.170 --> 00:08:26.980
We're basically getting on par
with Java on the Java platform.

00:08:26.980 --> 00:08:30.160
We're working on debugability
and incrementality

00:08:30.160 --> 00:08:31.230
for JavaScript.

00:08:31.230 --> 00:08:34.080
Native is very young for that,
but we'll get all that there,

00:08:34.080 --> 00:08:34.580
too.

00:08:34.580 --> 00:08:35.579
TIMOTHY JORDAN: Awesome.

00:08:35.579 --> 00:08:36.720
Thank you so much.

00:08:36.720 --> 00:08:38.539
ANDRE: Thank you very much.

