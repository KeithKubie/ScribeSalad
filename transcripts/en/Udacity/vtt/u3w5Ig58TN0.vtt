WEBVTT
Kind: captions
Language: en

00:00:00.016 --> 00:00:02.960
Before reducing 3-CNF to subset sum,

00:00:02.960 --> 00:00:06.070
we have to define the subset
sum problem first.

00:00:06.070 --> 00:00:11.510
We're given a multi set of numbers, A,
consisting of numbers a1 through am,

00:00:11.510 --> 00:00:13.300
where each element is
a positive integer.

00:00:14.320 --> 00:00:15.500
A multiset by the way,

00:00:15.500 --> 00:00:19.410
is just a set that allows the same
element to be included more than once.

00:00:19.410 --> 00:00:24.667
So this set might include three 5's,
two 20s, and just one 31, for example.

00:00:24.667 --> 00:00:26.340
And we're also given a number k.

00:00:27.450 --> 00:00:31.570
The problem is to decide whether
there is a subset of this multiset,

00:00:31.570 --> 00:00:33.600
whose members add up to k.

00:00:33.600 --> 00:00:36.030
One instance of this
problem is partitioning.

00:00:36.030 --> 00:00:38.110
And I'll use this particular
example to illustrate.

00:00:39.120 --> 00:00:42.860
Imagine that you want to divide
assets evenly between two parties.

00:00:42.860 --> 00:00:44.900
Maybe we're picking
teams on the playground,

00:00:44.900 --> 00:00:46.460
trying to reach a divorce settlement,

00:00:46.460 --> 00:00:50.790
dividing spoils among the victors of
war, or something of that nature.

00:00:50.790 --> 00:00:54.340
Then the question becomes,
is there a way to partition a set so

00:00:54.340 --> 00:00:55.970
that things come out even?

00:00:55.970 --> 00:00:57.959
Each side getting exactly one half.

00:00:57.959 --> 00:01:00.340
In this case the total is 18.

00:01:00.340 --> 00:01:03.470
So we should choose k
to be equal to 9 and

00:01:03.470 --> 00:01:06.350
ask if there is a way to
get a subset to sum to 9.

00:01:06.350 --> 00:01:08.270
And indeed there is.

00:01:08.270 --> 00:01:12.050
We can choose two 1s and a 7,
and that will give us 9.

00:01:12.050 --> 00:01:13.440
So, yes.

00:01:13.440 --> 00:01:15.251
So would 4 and 5, of course.

00:01:15.251 --> 00:01:17.710
That's the subset sum problem.

00:01:17.710 --> 00:01:21.380
Note that the problem isn't
NP because given any subset,

00:01:21.380 --> 00:01:25.450
it takes polynomial time to add up
the numbers and see if the sum equals k.

00:01:26.470 --> 00:01:29.540
Finding the right subset,
however, seems much harder.

00:01:29.540 --> 00:01:32.840
We don't know of a way to do it that's
necessarily faster than just trying

00:01:32.840 --> 00:01:34.230
all two to the m subsets.

