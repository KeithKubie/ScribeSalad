WEBVTT
Kind: captions
Language: en

00:00:00.710 --> 00:00:01.170
Hi.

00:00:01.170 --> 00:00:02.260
I'm Nicolas Garnier.

00:00:02.260 --> 00:00:05.070
I'm a Developer Advocate
for Google Drive.

00:00:05.070 --> 00:00:08.020
Today I want to show you how web
applications can integrate

00:00:08.020 --> 00:00:11.820
deeply with Google Drive using
the Google Drive SDK.

00:00:11.820 --> 00:00:14.070
This will allow your application
to take advantage

00:00:14.070 --> 00:00:17.110
of Drive's user-managed storage,
integrate with the

00:00:17.110 --> 00:00:20.050
Google Drive online File
Explorer, and potentially

00:00:20.050 --> 00:00:23.040
leverage the billions of files
that are currently stored in

00:00:23.040 --> 00:00:24.710
users' Drive.

00:00:24.710 --> 00:00:27.850
We will demonstrate how to do
that by implementing and

00:00:27.850 --> 00:00:31.010
integrating the web-based
text editor.

00:00:31.010 --> 00:00:33.440
But first, it is important
to understand what can be

00:00:33.440 --> 00:00:34.750
achieved by integrating
your web

00:00:34.750 --> 00:00:37.020
application with Google Drive.

00:00:37.020 --> 00:00:40.030
So we're going to go through a
few scenarios showcasing how

00:00:40.030 --> 00:00:43.470
apps can integrate with
Google Drive today.

00:00:43.470 --> 00:00:45.900
Let's now go to Google
Drive File Explorer.

00:00:45.900 --> 00:00:47.990
As you probably know, Google
Drive offers a way to

00:00:47.990 --> 00:00:52.030
synchronize your files to your
devices and desktop computers.

00:00:52.030 --> 00:00:54.660
Our user currently has
a few images stored

00:00:54.660 --> 00:00:55.980
in his drive already.

00:00:55.980 --> 00:00:58.020
We can see one of them here.

00:00:58.020 --> 00:01:01.000
The user now wants to edit that
image, and for that, he

00:01:01.000 --> 00:01:02.560
has installed Cloud Paint.

00:01:02.560 --> 00:01:05.850
Cloud Paint is a third-party
image editor that offers a

00:01:05.850 --> 00:01:07.380
Google Drive integration.

00:01:07.380 --> 00:01:10.790
All that the user has to do is
right click on the file and

00:01:10.790 --> 00:01:13.970
choose to open it with
Cloud Paint.

00:01:13.970 --> 00:01:17.450
The user gets redirected to
the application, and it's

00:01:17.450 --> 00:01:20.470
displayed with the image
which he can edit.

00:01:20.470 --> 00:01:21.730
Here, let's edit it.

00:01:24.990 --> 00:01:27.930
When the user saves the image,
the modified image gets saved

00:01:27.930 --> 00:01:30.380
directly on Google Drive.

00:01:30.380 --> 00:01:32.860
Here, if we go back to Google
Drive and have a look at the

00:01:32.860 --> 00:01:35.910
image, as you can see, we've
got the modified image

00:01:35.910 --> 00:01:37.690
directly in Google Drive.

00:01:40.420 --> 00:01:43.360
Similarly, we can also create
an image through the Create

00:01:43.360 --> 00:01:45.103
Menu with Cloud Paint.

00:01:49.740 --> 00:01:51.000
We're going to call
it MrPotato.

00:01:54.500 --> 00:01:56.910
Let me do something using my
awesome drawing skills and

00:01:56.910 --> 00:01:58.160
click Save.

00:02:09.080 --> 00:02:13.160
As you can see in my Drive, the
new file has been created.

00:02:13.160 --> 00:02:14.770
Let's just have a look.

00:02:14.770 --> 00:02:16.640
And here, we can see MrPotato.

00:02:16.640 --> 00:02:18.310
All of that was done
in the cloud.

00:02:18.310 --> 00:02:20.510
There was no manual file
manipulation needed.

00:02:20.510 --> 00:02:23.630
I didn't have to download the
file from Drive and upload the

00:02:23.630 --> 00:02:25.310
file back to the tool.

00:02:25.310 --> 00:02:28.130
All that file creation and the
text change were done server

00:02:28.130 --> 00:02:30.820
to server using the
Google Drive API.

00:02:30.820 --> 00:02:33.310
This is the kind of experience
that Google Drive integrated

00:02:33.310 --> 00:02:36.740
application are able to
offer to their users.

00:02:36.740 --> 00:02:40.160
So now we're going to see how to
create a Drive application.

00:02:40.160 --> 00:02:42.630
For the purpose of this webinar,
we will implement and

00:02:42.630 --> 00:02:45.210
integrate a web-based
text editor that

00:02:45.210 --> 00:02:46.890
we will call DrEdit.

00:02:46.890 --> 00:02:49.670
Prior to coding, there are two
things that you need to do.

00:02:49.670 --> 00:02:52.470
First, you need to register
your application.

00:02:52.470 --> 00:02:55.450
And then list your
application.

00:02:55.450 --> 00:02:57.580
To register your application,
you have to go to the Google

00:02:57.580 --> 00:03:00.835
APIs console, create a new
project and enable the Google

00:03:00.835 --> 00:03:02.790
Drive API and the Google
Drive SDK.

00:03:07.720 --> 00:03:09.850
Then you need to create
OAuth 2.0 credentials.

00:03:09.850 --> 00:03:14.690
You would usually have to select
web applications and

00:03:14.690 --> 00:03:16.830
provide the URL at which
your app is hosted.

00:03:16.830 --> 00:03:19.750
In our case, it's going
to be DrEdit.

00:03:19.750 --> 00:03:21.690
Your OAuth 2.0 credentials
are now ready.

00:03:21.690 --> 00:03:23.210
You also need to configure
the Google

00:03:23.210 --> 00:03:24.930
Drive specific features.

00:03:24.930 --> 00:03:28.760
You can do that in the
Drive SDK section.

00:03:28.760 --> 00:03:30.690
You'll have to fill in some
information about your

00:03:30.690 --> 00:03:32.880
application and provide
some icons.

00:03:32.880 --> 00:03:34.620
Most of this is pretty
straightforward.

00:03:34.620 --> 00:03:37.500
In this example, I have already
configured my app, but

00:03:37.500 --> 00:03:39.440
let me go through a few
of these fields that

00:03:39.440 --> 00:03:41.166
need special attention.

00:03:41.166 --> 00:03:44.500
The Open URL is the URL to which
we will redirect users

00:03:44.500 --> 00:03:46.540
when they open the file
with your app.

00:03:46.540 --> 00:03:49.680
You will have to make sure the
Open URL is listed in the

00:03:49.680 --> 00:03:52.820
redirect URIs of your
OAuth 2.0 client ID.

00:03:52.820 --> 00:03:55.810
This is because we do the
redirect through an OAuth 2.0

00:03:55.810 --> 00:03:57.580
flow using the client ID.

00:03:57.580 --> 00:04:00.590
And therefore, the URL needs
to be listed as a valid

00:04:00.590 --> 00:04:02.060
redirect URI.

00:04:02.060 --> 00:04:04.590
You need to list the main types
and the extension that

00:04:04.590 --> 00:04:06.010
the app can open.

00:04:06.010 --> 00:04:09.760
For our app, we simply listed
the basic text file MIME type

00:04:09.760 --> 00:04:11.410
and the TXT extension.

00:04:11.410 --> 00:04:14.860
It is usually best to list both
MIME type and extensions.

00:04:14.860 --> 00:04:17.820
If your app supports creating
new files, which is the case

00:04:17.820 --> 00:04:20.950
for DrEdit, you will need to
specify the URL that will

00:04:20.950 --> 00:04:22.530
handle such requests.

00:04:22.530 --> 00:04:26.190
Make sure that the URL is also
listed as a valid redirect URI

00:04:26.190 --> 00:04:27.510
off your client ID.

00:04:27.510 --> 00:04:30.240
Typically, you would need access
to the user's email or

00:04:30.240 --> 00:04:32.540
ID, and we will explain
later why.

00:04:32.540 --> 00:04:35.680
So we've added the user info
profile scope here.

00:04:35.680 --> 00:04:38.390
You don't need to list the
Google Drive API scope as the

00:04:38.390 --> 00:04:40.980
Drive that file scope
is implicit.

00:04:40.980 --> 00:04:43.600
That default scope gives you
access to Drive files created

00:04:43.600 --> 00:04:46.630
by your application or a file
that has been opened through

00:04:46.630 --> 00:04:49.440
the Google Drive UI with
your application.

00:04:49.440 --> 00:04:52.550
It is important to be aware of
this profile security model.

00:04:52.550 --> 00:04:55.530
Now the second thing you need
to do is create a Chrome Web

00:04:55.530 --> 00:04:56.860
Store listing.

00:04:56.860 --> 00:04:59.800
You need that listing to be able
to install app to some

00:04:59.800 --> 00:05:02.990
Drive accounts so that you can
initiate Open and Create file

00:05:02.990 --> 00:05:04.800
actions from Drive.

00:05:04.800 --> 00:05:07.920
Currently, all Drive apps are
distributed and installable

00:05:07.920 --> 00:05:09.920
through the Chrome Web Store.

00:05:09.920 --> 00:05:11.160
This is the Chrome Web Store.

00:05:11.160 --> 00:05:13.650
In the Developer Dashboard, you
can create a new listing.

00:05:20.450 --> 00:05:23.190
This is like creating any other
Chrome Web Store listing

00:05:23.190 --> 00:05:25.820
except that you will need to add
two special lines to your

00:05:25.820 --> 00:05:28.920
Chrome Web Store apps
manifest file.

00:05:28.920 --> 00:05:31.830
You need to specify the Google
Drive container and also your

00:05:31.830 --> 00:05:34.610
API console apps ID.

00:05:34.610 --> 00:05:36.800
To create your listing, you
will need to include a few

00:05:36.800 --> 00:05:40.900
mandatory assets like icon,
screenshots, promo image.

00:05:40.900 --> 00:05:43.940
Also, enter a description to
verify that you are the owner

00:05:43.940 --> 00:05:45.820
of the website and so on.

00:05:45.820 --> 00:05:48.400
To save time, I have already
prepared the Chrome Web Store

00:05:48.400 --> 00:05:50.290
listing for DrEdit.

00:05:50.290 --> 00:05:52.710
Once these are done, make sure
that you publish your listing

00:05:52.710 --> 00:05:55.490
only to a list of trusted
testers while your Drive

00:05:55.490 --> 00:05:56.920
application is in development.

00:05:56.920 --> 00:06:00.090
This is important so that your
listing does not appear in the

00:06:00.090 --> 00:06:03.380
public list of available Drive
apps while not finished.

00:06:03.380 --> 00:06:06.630
Once your listing is ready and
published to trusted testers,

00:06:06.630 --> 00:06:07.890
just install your app.

00:06:07.890 --> 00:06:10.580
And the next time you open
Google Drive in your browser,

00:06:10.580 --> 00:06:12.790
you will get a notification
that the app has been

00:06:12.790 --> 00:06:15.680
installed, and you will be able
to open supported files

00:06:15.680 --> 00:06:19.050
with the app, in our
case, textile.

00:06:19.050 --> 00:06:21.390
You will also be able to create
files with the app

00:06:21.390 --> 00:06:23.710
through the Create Menu.

00:06:23.710 --> 00:06:27.530
So if you choose to create
a file with DrEdit, Drive

00:06:27.530 --> 00:06:29.520
initiates an OAuth 2.0 flow.

00:06:29.520 --> 00:06:32.050
And since this is the first
time that we are using the

00:06:32.050 --> 00:06:35.450
app, we are prompted to
authorize DrEdit for Google

00:06:35.450 --> 00:06:38.760
Drive file access and also for
the extra scopes that were

00:06:38.760 --> 00:06:40.570
listed in the API's console.

00:06:40.570 --> 00:06:43.450
After the user grants access,
he's redirected to your

00:06:43.450 --> 00:06:47.450
application Create with URL
where we first need to handle

00:06:47.450 --> 00:06:49.930
authorization to the API.

00:06:49.930 --> 00:06:52.840
There will be two parameters
passed in the URL.

00:06:52.840 --> 00:06:55.300
The first parameter contains
the auth code.

00:06:55.300 --> 00:06:58.560
And the second is the state
parameter which contains the

00:06:58.560 --> 00:07:00.750
JSON object containing
two attributes.

00:07:00.750 --> 00:07:03.430
The first one simply states
which action was triggered on

00:07:03.430 --> 00:07:06.970
Drive, in this case, a Create
New File action.

00:07:06.970 --> 00:07:10.010
The second is the ID of the
parent folder that was

00:07:10.010 --> 00:07:12.610
currently being displayed
in the Drive UI.

00:07:12.610 --> 00:07:15.210
This is provided so that the
file created can be saved

00:07:15.210 --> 00:07:18.320
directly to the currently
open folder.

00:07:18.320 --> 00:07:20.730
So now we need to finish
the OAuth 2.0 flow.

00:07:20.730 --> 00:07:23.680
This means exchanging the
auth code for tokens.

00:07:23.680 --> 00:07:25.800
In that case, we will
get an access token

00:07:25.800 --> 00:07:27.240
and a refresh token.

00:07:27.240 --> 00:07:30.060
As you can see here, this is
pretty easy to do using our

00:07:30.060 --> 00:07:31.250
client libraries.

00:07:31.250 --> 00:07:34.580
After initializing a few static
objects, the extension

00:07:34.580 --> 00:07:36.690
is done in one line of code.

00:07:36.690 --> 00:07:40.500
In Google OAuth 2.0 protected
APIs, the access token allows

00:07:40.500 --> 00:07:42.770
you to use the API
for one hour.

00:07:42.770 --> 00:07:45.690
And the refresh token allows you
to extend that by getting

00:07:45.690 --> 00:07:47.200
new access tokens.

00:07:47.200 --> 00:07:49.865
This is important because you
will need the refresh token if

00:07:49.865 --> 00:07:53.110
your application needs to use
the API for more than an hour,

00:07:53.110 --> 00:07:54.840
which is the case for DrEdit.

00:07:54.840 --> 00:07:57.620
Now, what you need to do is
save this refresh token.

00:07:57.620 --> 00:08:00.430
That's basically because we get
a refresh token only the

00:08:00.430 --> 00:08:03.220
first time a user opens the
application in Drive.

00:08:03.220 --> 00:08:06.030
Subsequent times, the user will
not be prompted for the

00:08:06.030 --> 00:08:09.540
OAuth 2.0 green screen, and we
will only get an access token.

00:08:09.540 --> 00:08:12.810
So in order to be able to
retrieve the refresh token in

00:08:12.810 --> 00:08:16.520
the future, we need to save it
against the ID of the user.

00:08:16.520 --> 00:08:19.420
And what we do here is get the
ID of the user through the

00:08:19.420 --> 00:08:21.120
UserInfo API.

00:08:21.120 --> 00:08:23.640
Alternatively, you could also
use the email of that user,

00:08:23.640 --> 00:08:25.520
but the ID is a little
more robust because

00:08:25.520 --> 00:08:27.110
it will never change.

00:08:27.110 --> 00:08:29.910
We now can save the refresh
token using the user ID

00:08:29.910 --> 00:08:31.410
as the table key.

00:08:31.410 --> 00:08:32.880
Just use your preferred
database.

00:08:32.880 --> 00:08:35.690
For instance, in an App Engine
environment, you could simply

00:08:35.690 --> 00:08:37.350
save it to the App Engine
Data Store.

00:08:37.350 --> 00:08:40.679
We now have an access token and
a refresh token, which we

00:08:40.679 --> 00:08:41.320
just saved.

00:08:41.320 --> 00:08:44.070
At that point, we save the
refresh token and the access

00:08:44.070 --> 00:08:46.570
token to the session, and
pass the folder ID

00:08:46.570 --> 00:08:48.260
as a request parameter.

00:08:48.260 --> 00:08:51.500
Then we display the UI of the
web-based text editor.

00:08:51.500 --> 00:08:53.430
Let's choose a name for
the new file and

00:08:53.430 --> 00:08:55.010
then enter some text.

00:08:55.010 --> 00:08:56.260
Let's simply call
it Hello World.

00:09:02.610 --> 00:09:04.525
The web-based text
editor using the

00:09:04.525 --> 00:09:06.280
sample is called ACE.

00:09:06.280 --> 00:09:08.690
ACE is open source, fully
client side, and

00:09:08.690 --> 00:09:09.980
JavaScript-based.

00:09:09.980 --> 00:09:12.770
To be able to use ACE with
Drive, we simply hooked up

00:09:12.770 --> 00:09:16.480
ACE's JavaScript API to some
Ajax call to our back end,

00:09:16.480 --> 00:09:20.090
which handles the reading and
writing of Drive files.

00:09:20.090 --> 00:09:22.970
So when the Save button is
clicked, what happens is we

00:09:22.970 --> 00:09:26.260
send the content of the text
file to our server side code

00:09:26.260 --> 00:09:28.030
through an Ajax call.

00:09:28.030 --> 00:09:30.530
Server side, we receive the
content of the new file, its

00:09:30.530 --> 00:09:33.850
name, description, and the
destination folder ID through

00:09:33.850 --> 00:09:34.800
an Ajax call.

00:09:34.800 --> 00:09:37.590
Then you simply need these few
lines of code to create the

00:09:37.590 --> 00:09:40.380
file on Google Drive using
our client libraries.

00:09:40.380 --> 00:09:43.810
There are two parts to a Drive
file, the metadata and the

00:09:43.810 --> 00:09:45.630
actual file's content.

00:09:45.630 --> 00:09:48.910
We first set some metadata, such
as the file, the name,

00:09:48.910 --> 00:09:52.140
the description, MIME type,
and parent folder.

00:09:52.140 --> 00:09:55.400
Then in the same request, both
the metadata and the file's

00:09:55.400 --> 00:09:59.420
content are sent to the Drive
API to create the file.

00:09:59.420 --> 00:10:02.750
Now let's go back to the Drive
Explorer, and as you can see,

00:10:02.750 --> 00:10:05.150
the text file that was
just created is here.

00:10:11.730 --> 00:10:14.310
Now let's see how to handle the
other integration point,

00:10:14.310 --> 00:10:16.960
which is opening an existing
file with your app.

00:10:16.960 --> 00:10:20.460
So if we choose to open a Drive
file with DrEdit, again,

00:10:20.460 --> 00:10:23.460
Drive will trigger an OAuth 2.0
flow, but your users won't

00:10:23.460 --> 00:10:26.360
see the green screen this time
because we have approved the

00:10:26.360 --> 00:10:27.730
application earlier.

00:10:27.730 --> 00:10:30.740
So all subsequent auth flow
for that app will skip the

00:10:30.740 --> 00:10:34.060
approval screen, and you will be
automatically redirected to

00:10:34.060 --> 00:10:35.858
the open URL of the app.

00:10:40.840 --> 00:10:43.760
Again, there will be two
parameters passed in the URL.

00:10:43.760 --> 00:10:47.040
The first parameter contains the
auth code, and the second

00:10:47.040 --> 00:10:48.910
contains adjacent
object again.

00:10:48.910 --> 00:10:51.370
Still containing two attributes,
the first one

00:10:51.370 --> 00:10:52.780
indicates that the
action triggered

00:10:52.780 --> 00:10:54.860
on Drive is an open-with.

00:10:54.860 --> 00:10:57.470
The second is an array
of IDs of the files

00:10:57.470 --> 00:10:59.080
that have been opened.

00:10:59.080 --> 00:11:01.980
It is an array because you can
enable a feature that will let

00:11:01.980 --> 00:11:04.840
your users open multiple
files with your app,

00:11:04.840 --> 00:11:05.770
if you choose so.

00:11:05.770 --> 00:11:08.220
Since this is not the first time
the user authorizes the

00:11:08.220 --> 00:11:11.350
app, exchanging the code will
only return an access token

00:11:11.350 --> 00:11:13.030
and the refresh token.

00:11:13.030 --> 00:11:15.780
Now, you have a refresh token
saved in your database from

00:11:15.780 --> 00:11:17.790
the first time the
user authorized.

00:11:17.790 --> 00:11:20.890
So to get it, you would
typically get the user ID

00:11:20.890 --> 00:11:24.510
using the access token to call
the UserInfo API, as we've

00:11:24.510 --> 00:11:28.890
seen earlier, and then pull the
refresh token from your

00:11:28.890 --> 00:11:31.370
local database using
the user ID.

00:11:31.370 --> 00:11:34.000
That way, we can have access to
the API for more than the

00:11:34.000 --> 00:11:36.290
expiration period of
the access token,

00:11:36.290 --> 00:11:37.570
which is one hour.

00:11:37.570 --> 00:11:39.945
Note that all of our client
libraries handle refreshing

00:11:39.945 --> 00:11:43.820
the access token automatically
if you passed a refresh token.

00:11:43.820 --> 00:11:46.500
Again, we saved the refresh
token and the access token to

00:11:46.500 --> 00:11:48.906
the session and passed
the file ID

00:11:48.906 --> 00:11:50.210
as a request parameter.

00:11:50.210 --> 00:11:53.990
Then we displayed the UI of
the web-based text editor.

00:11:53.990 --> 00:11:57.910
Now, the editor queries an Ajax
endpoint on your back end

00:11:57.910 --> 00:11:59.920
that will load the files
content, which we

00:11:59.920 --> 00:12:01.600
can display in ACE.

00:12:01.600 --> 00:12:04.620
So what happens here is that we
have a servlet serving the

00:12:04.620 --> 00:12:08.790
Ajax requests that will use
the API to read the file.

00:12:08.790 --> 00:12:11.300
After handling the authorization
and initializing

00:12:11.300 --> 00:12:15.180
the Drive service, this
is done in two steps.

00:12:15.180 --> 00:12:17.880
First, read the files
metadata.

00:12:17.880 --> 00:12:20.520
This gives us important info
like the file's name and also

00:12:20.520 --> 00:12:22.870
the download URL, which
is where the

00:12:22.870 --> 00:12:25.090
file's content is located.

00:12:25.090 --> 00:12:28.310
So then we download the file's
content using an authorized

00:12:28.310 --> 00:12:31.130
request to the download
URL and return

00:12:31.130 --> 00:12:32.830
that to the Ajax call.

00:12:32.830 --> 00:12:33.290
Here it is.

00:12:33.290 --> 00:12:35.170
The content of the file
is being displayed

00:12:35.170 --> 00:12:37.230
client side in the UI.

00:12:37.230 --> 00:12:38.660
This is it.

00:12:38.660 --> 00:12:40.630
Your app now has basic Google
Drive functionalities.

00:12:40.630 --> 00:12:42.800
It can open files from
Drive as well as

00:12:42.800 --> 00:12:44.500
create files from Drive.

00:12:44.500 --> 00:12:45.750
Don't forget to check
our online

00:12:45.750 --> 00:12:47.830
documentation for more details.

00:12:47.830 --> 00:12:51.140
You will also find the sources
for the sample application

00:12:51.140 --> 00:12:52.350
used in this video.

00:12:52.350 --> 00:12:55.340
It is available in
five languages.

00:12:55.340 --> 00:12:56.590
Thanks for watching.

