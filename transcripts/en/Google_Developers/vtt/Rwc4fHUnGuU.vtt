WEBVTT
Kind: captions
Language: en

00:00:00.890 --> 00:00:01.400
Hi.

00:00:01.400 --> 00:00:04.540
I'm Matt Gaunt, a Developer
Advocate here at Google.

00:00:04.540 --> 00:00:08.070
We can all agree mobile
is becoming more important

00:00:08.070 --> 00:00:10.460
and touch screens
are a common feature.

00:00:10.460 --> 00:00:13.660
So how can you implement
touch in your web app?

00:00:13.660 --> 00:00:16.690
For me touch support breaks
down into these two key areas.

00:00:16.690 --> 00:00:18.700
First, you have
the most basic way

00:00:18.700 --> 00:00:20.925
of responding to a user's
touch by adding styles

00:00:20.925 --> 00:00:24.420
for states, with the active
and focus pseudo-class.

00:00:24.420 --> 00:00:28.050
Second, you have touch events
to implement your own gestures.

00:00:28.050 --> 00:00:30.700
Let's start with the
active and focus state.

00:00:30.700 --> 00:00:32.200
Whenever you're
designing your site,

00:00:32.200 --> 00:00:35.170
you need to be thinking about
the styling for the default,

00:00:35.170 --> 00:00:38.320
active, and focus
states of your elements.

00:00:38.320 --> 00:00:40.180
Changing your UI
with these styles

00:00:40.180 --> 00:00:42.940
stops the user from questioning
if their touch has actually

00:00:42.940 --> 00:00:45.920
been acknowledged or not and
reduces the perceived latency

00:00:45.920 --> 00:00:47.190
of your web app.

00:00:47.190 --> 00:00:50.360
It makes your site feel
snappy and responsive.

00:00:50.360 --> 00:00:52.560
By default, most
browsers will add

00:00:52.560 --> 00:00:54.910
some kind of
highlighting to elements.

00:00:54.910 --> 00:00:58.480
On the left is a slim orange
focus ring added to a button.

00:00:58.480 --> 00:01:00.710
And on the right, you can
see a blue tap highlight

00:01:00.710 --> 00:01:02.370
on an anchor tag.

00:01:02.370 --> 00:01:04.930
Now, personally, I
hate it when my UI

00:01:04.930 --> 00:01:06.920
is altered with some
random styling that

00:01:06.920 --> 00:01:09.310
doesn't fit in with my design.

00:01:09.310 --> 00:01:11.140
By adding an active
and focus style,

00:01:11.140 --> 00:01:14.690
you get a much higher level
of polish for your site.

00:01:14.690 --> 00:01:17.300
That's the most
basic touch response.

00:01:17.300 --> 00:01:20.440
What if you wanted to
implement a custom gesture?

00:01:20.440 --> 00:01:22.830
That's where we start
to use touch events.

00:01:22.830 --> 00:01:25.200
If you've never played
with touch events before,

00:01:25.200 --> 00:01:28.240
you need to register listeners
for touchstart, touchmove,

00:01:28.240 --> 00:01:30.784
touchend, and
touchcancel events.

00:01:30.784 --> 00:01:32.700
And these events will
fire throughout the life

00:01:32.700 --> 00:01:34.100
cycle of a gesture.

00:01:34.100 --> 00:01:36.100
You'll see one
touchstart event followed

00:01:36.100 --> 00:01:39.950
by one or more touchmove and a
final touchend or touchcancel

00:01:39.950 --> 00:01:41.730
event at the end.

00:01:41.730 --> 00:01:44.030
The way you use this
is super simple.

00:01:44.030 --> 00:01:47.250
Just get your element as
usual with query selector

00:01:47.250 --> 00:01:49.900
or getElement by ID.

00:01:49.900 --> 00:01:52.830
Add your event listeners with
the event name and a callback

00:01:52.830 --> 00:01:53.990
function.

00:01:53.990 --> 00:01:55.860
And from this you can
use the event object,

00:01:55.860 --> 00:01:57.810
which is passed
into the callback

00:01:57.810 --> 00:02:00.540
to get the x- and
y-coordinates out and then

00:02:00.540 --> 00:02:03.010
react to the gesture.

00:02:03.010 --> 00:02:06.920
Now this is the rough outline
of how everything fits together.

00:02:06.920 --> 00:02:09.620
But there are a few best
practices you need to follow,

00:02:09.620 --> 00:02:13.206
otherwise you can really
hurt your frames per second.

00:02:13.206 --> 00:02:14.830
The best practices
we're going to cover

00:02:14.830 --> 00:02:17.880
are binding low
and binding late.

00:02:17.880 --> 00:02:21.180
Do as little as possible inside
of the touch callbacks, which

00:02:21.180 --> 00:02:22.830
is always a good thing.

00:02:22.830 --> 00:02:25.580
And use requestAnimateFrames.

00:02:25.580 --> 00:02:29.931
So let's start with
bind low and bind late.

00:02:29.931 --> 00:02:32.180
What bind low means is that
you should bind your event

00:02:32.180 --> 00:02:34.150
listeners to the element
you want the users

00:02:34.150 --> 00:02:38.157
to touch rather than
the entire document.

00:02:38.157 --> 00:02:40.240
The reason for this is
that it helps the browser's

00:02:40.240 --> 00:02:42.100
performance, since
the browser will only

00:02:42.100 --> 00:02:45.570
hop on to the main thread
and execute JavaScript when

00:02:45.570 --> 00:02:48.430
a touch falls in an
element with a listener,

00:02:48.430 --> 00:02:50.620
so the one you care about.

00:02:50.620 --> 00:02:53.760
Otherwise if you add the touch
event listeners to the document

00:02:53.760 --> 00:02:56.920
body, we're always going
to execute JavaScript

00:02:56.920 --> 00:02:59.870
on the main thread, even
though the touch may occur

00:02:59.870 --> 00:03:02.960
on an element we just
simply don't care about.

00:03:02.960 --> 00:03:07.240
So binding low means binding
to the element itself.

00:03:07.240 --> 00:03:08.910
Binding late is
referring to binding

00:03:08.910 --> 00:03:11.500
the touchmove, touchend,
and touchcancel

00:03:11.500 --> 00:03:15.530
event to the element
as late as possible.

00:03:15.530 --> 00:03:17.860
So in this example,
we want all touch

00:03:17.860 --> 00:03:20.680
events to be handled
by our swipeable boxes

00:03:20.680 --> 00:03:24.640
or swipe me areas when
the touchstart happens

00:03:24.640 --> 00:03:26.840
inside one of them.

00:03:26.840 --> 00:03:29.200
For this we add our
touchmove, touchend,

00:03:29.200 --> 00:03:33.160
and touchcancel events to the
entire document body inside

00:03:33.160 --> 00:03:35.720
of our touchstart
event callback.

00:03:35.720 --> 00:03:38.460
Then when we receive a
touchend or touchcancel,

00:03:38.460 --> 00:03:42.250
event we remove all of the
events from the document body.

00:03:42.250 --> 00:03:46.440
So we're binding as
late as possible.

00:03:46.440 --> 00:03:48.870
You should check out the Show
Potential Scroll Bottlenecks

00:03:48.870 --> 00:03:51.300
feature inside of
Chrome DevTools, which

00:03:51.300 --> 00:03:55.150
is really helpful to ensure your
logic is working as intended

00:03:55.150 --> 00:03:58.410
and helps highlight
any potential problems.

00:03:58.410 --> 00:04:00.960
You can find it under the
rendering tab which comes up

00:04:00.960 --> 00:04:04.230
when you hit the
hamburger menu icon.

00:04:04.230 --> 00:04:06.072
That's bind low and bind late.

00:04:06.072 --> 00:04:07.530
The next thing you
need to remember

00:04:07.530 --> 00:04:11.210
is to do as little as possible
inside the touch callback.

00:04:11.210 --> 00:04:11.710
Why?

00:04:11.710 --> 00:04:13.370
I hear you ask.

00:04:13.370 --> 00:04:16.450
Because a callback is going to
be running on the main thread.

00:04:16.450 --> 00:04:18.800
So if you do lots
of work inside of it

00:04:18.800 --> 00:04:22.570
you can really hurt your site's
frame rate, which nobody wants.

00:04:22.570 --> 00:04:25.970
So always try to be as quick as
possible inside the callback.

00:04:25.970 --> 00:04:29.840
But this raises the question
of, if I get the touch's x-

00:04:29.840 --> 00:04:32.730
and y-coordinates
inside the event,

00:04:32.730 --> 00:04:34.790
how can I do anything
with those values

00:04:34.790 --> 00:04:36.950
without blocking
the main thread?

00:04:36.950 --> 00:04:40.470
And that's where
requestAnimationFrame comes in.

00:04:40.470 --> 00:04:43.660
requestAnimationFrame is a
technique of batching changes

00:04:43.660 --> 00:04:45.940
you want to make to
the UI at a time that

00:04:45.940 --> 00:04:49.470
works with the browser
rather than against it.

00:04:49.470 --> 00:04:51.590
You would call
requestAnimationFrame

00:04:51.590 --> 00:04:54.580
and pass in a function which
basically asks the browser

00:04:54.580 --> 00:04:57.640
to execute that function
at a suitable point

00:04:57.640 --> 00:04:59.370
in its render [INAUDIBLE].

00:04:59.370 --> 00:05:02.260
When the animation frame
call back is executed

00:05:02.260 --> 00:05:05.920
you can update the UI based
on the last known touch event.

00:05:05.920 --> 00:05:09.340
So the overall flow is you
request an animation frame,

00:05:09.340 --> 00:05:12.020
you wait while
touchmove events fire,

00:05:12.020 --> 00:05:14.850
and then when the browser's
ready it will call your method

00:05:14.850 --> 00:05:17.200
and you can alter the UI.

00:05:17.200 --> 00:05:19.575
The important thing with
this is that rather than

00:05:19.575 --> 00:05:22.500
change the element styles
for every touch move, where

00:05:22.500 --> 00:05:26.500
you might see multiple events
fire between render frames,

00:05:26.500 --> 00:05:28.530
you make changes based
on the last known touch

00:05:28.530 --> 00:05:31.800
move, which is really the only
important bit of work that

00:05:31.800 --> 00:05:33.060
needs to happen.

00:05:33.060 --> 00:05:34.210
So there we have it.

00:05:34.210 --> 00:05:36.550
Touch on the web--
the most basic way

00:05:36.550 --> 00:05:39.160
to respond to a user's
touch with the active

00:05:39.160 --> 00:05:40.710
and focus pseudo-class.

00:05:40.710 --> 00:05:44.450
And if you want your own
gestures use touch events.

00:05:44.450 --> 00:05:48.180
Check out the web fundamentals
URL here for best practices,

00:05:48.180 --> 00:05:50.680
details on cross
browser implementation--

00:05:50.680 --> 00:05:53.160
so things like pointer
events-- and samples

00:05:53.160 --> 00:05:54.660
where you can steal some code.

00:05:54.660 --> 00:05:56.360
Cheers.

