WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.430
GUILLERMO RAUCH:
Thank you so much.

00:00:03.430 --> 00:00:07.870
My name is Guillermo Rauch, as
I was introduced earlier today,

00:00:07.870 --> 00:00:10.000
the creator of
Socket.IO I was involved

00:00:10.000 --> 00:00:12.960
very early on with the
Node.js community working

00:00:12.960 --> 00:00:17.580
on everything from trying
bring in the core APIs

00:00:17.580 --> 00:00:19.380
to a point where they
were useful to us

00:00:19.380 --> 00:00:22.620
at our first startup all the
way to creating new frameworks

00:00:22.620 --> 00:00:25.140
and supporting
existing frameworks.

00:00:25.140 --> 00:00:28.740
We worked with some of the
greatest Node.js people,

00:00:28.740 --> 00:00:34.490
like TJ Holowaychuk and
Nate Rajlich, Marco Aurelio.

00:00:34.490 --> 00:00:37.250
And today I'm going to
talk about something

00:00:37.250 --> 00:00:41.230
more encompassing and
something more generic

00:00:41.230 --> 00:00:44.860
then just Node.js, Specifically
about real time web

00:00:44.860 --> 00:00:49.570
applications and how I look
at real time web applications.

00:00:49.570 --> 00:00:51.850
When I was just thinking
about the title of my talk

00:00:51.850 --> 00:00:53.620
earlier today, I
started thinking

00:00:53.620 --> 00:00:57.430
about how we don't have
a definition for it

00:00:57.430 --> 00:01:00.580
or how when we say
real time, we'll

00:01:00.580 --> 00:01:03.150
think maybe about
different things.

00:01:03.150 --> 00:01:06.140
And some of you might
think about websockets.

00:01:06.140 --> 00:01:10.730
Some of you might think
about, for example,

00:01:10.730 --> 00:01:14.390
data that refreshes over
time, maybe regardless of how

00:01:14.390 --> 00:01:18.860
we convey or move that
data from different points.

00:01:18.860 --> 00:01:20.800
I'll start by talking
about a definition

00:01:20.800 --> 00:01:23.860
that I've come to after working
with lots of different web

00:01:23.860 --> 00:01:25.890
applications.

00:01:25.890 --> 00:01:28.160
All the way before
Node.js existed

00:01:28.160 --> 00:01:30.410
through Comet and all
the things that we

00:01:30.410 --> 00:01:33.627
want to do with
those technologies.

00:01:33.627 --> 00:01:35.210
The first conclusion
that have come to

00:01:35.210 --> 00:01:36.918
is that when people
think about real time

00:01:36.918 --> 00:01:40.310
and they think about actually
just moving data really fast.

00:01:40.310 --> 00:01:44.970
They think about refreshing
data with minimal latency.

00:01:44.970 --> 00:01:47.980
So it's all about the user
thinking that the data's not

00:01:47.980 --> 00:01:50.620
stale, that what they're
looking at on the screen

00:01:50.620 --> 00:01:53.720
is a representation of the
latest and greatest that's

00:01:53.720 --> 00:01:55.620
available on the
server, and that that's

00:01:55.620 --> 00:01:58.080
coming with minimal latency.

00:01:58.080 --> 00:02:01.060
It's coming really fast
after it gets to the server.

00:02:01.060 --> 00:02:03.685
So if you're chatting,
someone sends a message,

00:02:03.685 --> 00:02:05.310
you want to get that
message to someone

00:02:05.310 --> 00:02:08.370
else as fast as possible.

00:02:08.370 --> 00:02:10.280
And the other really
important aspect

00:02:10.280 --> 00:02:14.920
is that that data to the
user has update automatically

00:02:14.920 --> 00:02:16.230
and uniformly.

00:02:16.230 --> 00:02:18.910
So automatically
means that they're not

00:02:18.910 --> 00:02:20.710
pressing the Refresh
button, for example,

00:02:20.710 --> 00:02:23.520
or they're not keeping
track themselves

00:02:23.520 --> 00:02:25.510
of updating that data.

00:02:25.510 --> 00:02:30.340
And the other aspect of it is
that if a portion of the screen

00:02:30.340 --> 00:02:32.880
that's representing
some data on the server

00:02:32.880 --> 00:02:35.140
updates, and there's
another reference

00:02:35.140 --> 00:02:37.400
to that data within
the same application,

00:02:37.400 --> 00:02:39.800
both are synchronized.

00:02:39.800 --> 00:02:42.490
So the data updates everywhere.

00:02:42.490 --> 00:02:46.010
And that all comes down to you
write a web application that

00:02:46.010 --> 00:02:50.609
does never require that the
user presses F5, for example.

00:02:50.609 --> 00:02:52.150
And what I like
about this definition

00:02:52.150 --> 00:02:53.810
is that it's
actually pretty easy

00:02:53.810 --> 00:02:57.220
to summarize it in two
things, despite all

00:02:57.220 --> 00:02:58.680
those long explanations.

00:02:58.680 --> 00:03:01.230
So your time application
needs to be fast,

00:03:01.230 --> 00:03:03.090
and it needs to
be self-updating.

00:03:03.090 --> 00:03:06.810
So I'll go with this definition
for the rest of this talk.

00:03:06.810 --> 00:03:12.250
And just to put it in context
of an example of an application

00:03:12.250 --> 00:03:16.040
that you might write, I thought
about a traditional real time

00:03:16.040 --> 00:03:19.100
application, which is
a stock ticker showing

00:03:19.100 --> 00:03:21.560
the value of a
stock in real time.

00:03:21.560 --> 00:03:24.600
And I'll start with
some simple HTML, which

00:03:24.600 --> 00:03:28.060
has summary presentation
on the user's screen.

00:03:28.060 --> 00:03:31.000
And then we add some
naive JavaScript

00:03:31.000 --> 00:03:33.720
to make sure that's up to date.

00:03:33.720 --> 00:03:37.010
Usually when we approach
a problem like this,

00:03:37.010 --> 00:03:40.210
it's hard to decide
on what timer we're

00:03:40.210 --> 00:03:41.890
going to set on the front end.

00:03:41.890 --> 00:03:45.255
This has been a long
subject of debate.

00:03:45.255 --> 00:03:47.130
For example, when you
implement long polling,

00:03:47.130 --> 00:03:50.200
is how long does the
polling duration need to be,

00:03:50.200 --> 00:03:54.730
or how fast do we need to try to
get more data from the server?

00:03:54.730 --> 00:03:57.660
So we'll just go with
15 seconds right now.

00:03:57.660 --> 00:03:59.720
And then we assume
that the server

00:03:59.720 --> 00:04:03.940
at the start of this timeline
thinks that the price is 500.

00:04:03.940 --> 00:04:06.430
And disclaimer, I don't
know what the price is.

00:04:06.430 --> 00:04:08.410
I just came up with this.

00:04:08.410 --> 00:04:10.800
So the user goes to the page.

00:04:10.800 --> 00:04:14.950
And then of course, we're
going to request some JSON API.

00:04:14.950 --> 00:04:17.490
We're going to get
that the price is 500.

00:04:17.490 --> 00:04:20.620
And then we wait
15 seconds, which

00:04:20.620 --> 00:04:22.500
of course is
completely arbitrary.

00:04:22.500 --> 00:04:25.370
At this point, it's where this
application sort of breaks

00:04:25.370 --> 00:04:28.000
down and stops being
as fast as it could

00:04:28.000 --> 00:04:30.580
be because the price
might have changed,

00:04:30.580 --> 00:04:33.940
but your front end
will keep waiting.

00:04:33.940 --> 00:04:39.890
And see, it's Friday night,
and it's really slow.

00:04:39.890 --> 00:04:41.050
No one likes it.

00:04:41.050 --> 00:04:42.980
I don't like it.

00:04:42.980 --> 00:04:44.550
But we have to wait.

00:04:44.550 --> 00:04:45.562
Yeah.

00:04:45.562 --> 00:04:47.520
And then the front end
decides to get it again,

00:04:47.520 --> 00:04:50.680
and then, boom,
it updates to 505.

00:04:50.680 --> 00:04:54.500
The user at this point has
no idea what the server knew.

00:04:54.500 --> 00:04:57.720
And they didn't know that
it could have gotten faster,

00:04:57.720 --> 00:05:01.050
it's just your application
just became slow.

00:05:01.050 --> 00:05:03.780
So in this case, the front
end is self-updating.

00:05:03.780 --> 00:05:06.090
So I think this is
where a lot of people

00:05:06.090 --> 00:05:09.790
might be confused with, is my
application real time or not.

00:05:09.790 --> 00:05:12.690
Because if it's self-updating,
you might think it's real time.

00:05:12.690 --> 00:05:14.630
But in this case, it doesn't
satisfy the other condition

00:05:14.630 --> 00:05:15.140
that we set.

00:05:15.140 --> 00:05:17.890
It's fast and it's sad,
and it makes me cry.

00:05:20.607 --> 00:05:22.690
The next thing you might
think is an optimization.

00:05:22.690 --> 00:05:25.930
You might think, oh Guillermo,
you said 15 seconds.

00:05:25.930 --> 00:05:27.530
It could have been
just immediate.

00:05:27.530 --> 00:05:30.410
So now boom, it's fast
and self-updating.

00:05:30.410 --> 00:05:33.325
So even though it's fast,
or it might be fast,

00:05:33.325 --> 00:05:38.596
as I'll show next, in fact just
because you're requesting data

00:05:38.596 --> 00:05:39.970
from a client to
the server, it's

00:05:39.970 --> 00:05:41.620
not as fast as it could be.

00:05:41.620 --> 00:05:44.770
Because the server is really the
source of truth of this data.

00:05:44.770 --> 00:05:46.920
So the server is the
one that first finds out

00:05:46.920 --> 00:05:49.710
about the latest price,
and technically is

00:05:49.710 --> 00:05:51.920
the one that should
let the client know.

00:05:51.920 --> 00:05:55.120
The client doesn't need to ask.

00:05:55.120 --> 00:05:57.910
But by performing this
loop of get request,

00:05:57.910 --> 00:05:59.660
we also have a side effect.

00:05:59.660 --> 00:06:02.200
That is, we increase
latency by having

00:06:02.200 --> 00:06:07.030
to ask all the time, and then
of course server resources.

00:06:07.030 --> 00:06:10.235
And the natural conclusion
was that it's much better

00:06:10.235 --> 00:06:15.390
to have the server push data
to us with, boom, Socket.IO.

00:06:15.390 --> 00:06:17.090
Let's see that again.

00:06:17.090 --> 00:06:18.130
Boom.

00:06:18.130 --> 00:06:20.460
Beautiful, right?

00:06:20.460 --> 00:06:23.950
You're like this at this point.

00:06:23.950 --> 00:06:26.670
Yeah, I actually have
come to the conclusion

00:06:26.670 --> 00:06:29.160
that push is also
not necessarily

00:06:29.160 --> 00:06:32.480
part of the definition of
a real time application.

00:06:32.480 --> 00:06:37.790
And I'd like to explain with
an analogy, which is you go,

00:06:37.790 --> 00:06:40.530
and this is you.

00:06:40.530 --> 00:06:42.000
This [INAUDIBLE] has a body.

00:06:42.000 --> 00:06:44.860
And you think you're hungry.

00:06:44.860 --> 00:06:47.000
And boom, idea.

00:06:47.000 --> 00:06:51.820
Let's go to $7 Coffee
Cafe in Mission Dolores.

00:06:51.820 --> 00:06:53.480
So the analogy goes like this.

00:06:53.480 --> 00:06:57.452
You go and request the
menu from the server.

00:06:57.452 --> 00:06:59.160
So this is the
traditional-- this the way

00:06:59.160 --> 00:07:01.591
that I usually explain the
traditional request response

00:07:01.591 --> 00:07:02.090
model.

00:07:02.090 --> 00:07:03.240
You just sit there.

00:07:03.240 --> 00:07:04.120
You get something.

00:07:04.120 --> 00:07:06.420
You get some
response right away.

00:07:06.420 --> 00:07:13.202
So this waiter's kind of weird,
and he goes, 200 OK menu.

00:07:13.202 --> 00:07:15.160
And then he goes back to
whatever he was doing.

00:07:15.160 --> 00:07:15.900
He idles.

00:07:15.900 --> 00:07:17.400
And this is what
Node.js is good at.

00:07:17.400 --> 00:07:19.140
It's good at idling
and handling all

00:07:19.140 --> 00:07:20.760
this request-response cycles.

00:07:20.760 --> 00:07:22.840
And you're like, I know
what I'm going to get.

00:07:22.840 --> 00:07:25.120
It's a bagel.

00:07:25.120 --> 00:07:27.450
And in this case,
there's no response.

00:07:27.450 --> 00:07:30.330
HTTP is a great [INAUDIBLE]
for modeling this.

00:07:30.330 --> 00:07:33.740
It's just OK, I'll
let someone know.

00:07:33.740 --> 00:07:34.960
The metaphor is really good.

00:07:34.960 --> 00:07:37.710
They find out that the kitchen
is actually a web service.

00:07:37.710 --> 00:07:42.000
So the guy goes, and
he goes, bagel, OK.

00:07:42.000 --> 00:07:44.190
And then idles again.

00:07:44.190 --> 00:07:48.700
So this is where I think
the web disappointed us,

00:07:48.700 --> 00:07:53.120
in which if we were expecting
some update from someone else,

00:07:53.120 --> 00:07:54.720
it was usually
really hard to do.

00:07:54.720 --> 00:07:57.000
And what we've been
doing up until this point

00:07:57.000 --> 00:07:58.900
is always asking.

00:07:58.900 --> 00:08:02.190
So you become really upset, and
you're like, what's the status?

00:08:02.190 --> 00:08:05.360
And then you're incurring
more load to the server

00:08:05.360 --> 00:08:06.865
because you need to check again.

00:08:09.845 --> 00:08:12.220
The kitchen gets really upset
because they're like, dude,

00:08:12.220 --> 00:08:14.550
we're still working on it.

00:08:14.550 --> 00:08:18.010
And the guy is still pretty
chill with his glasses

00:08:18.010 --> 00:08:20.120
and his OK.

00:08:20.120 --> 00:08:21.850
And one second later, boom.

00:08:21.850 --> 00:08:24.180
Here's you again asking again.

00:08:24.180 --> 00:08:26.520
This is kind of like our
stock ticker example.

00:08:26.520 --> 00:08:28.210
You're like, yeah,
I'll just ask again.

00:08:28.210 --> 00:08:29.310
There's no problem.

00:08:29.310 --> 00:08:31.101
But then what happens,
there's other people

00:08:31.101 --> 00:08:33.169
that are interested in
consuming this service.

00:08:33.169 --> 00:08:35.870
They all look like you, too.

00:08:35.870 --> 00:08:39.530
And the result is
server congestion.

00:08:39.530 --> 00:08:42.470
This is a single
thread of JVM, and it's

00:08:42.470 --> 00:08:45.077
really bad at
handling many things.

00:08:45.077 --> 00:08:46.535
So what's the
solution of course is

00:08:46.535 --> 00:08:49.050
that we push all
this to the client

00:08:49.050 --> 00:08:50.690
without the client
requesting him.

00:08:50.690 --> 00:08:53.650
In this case, it
models back to someone

00:08:53.650 --> 00:08:57.060
announcing something and
delivering to the clients,

00:08:57.060 --> 00:08:58.490
which we call events.

00:08:58.490 --> 00:09:01.960
And this is how we think
about it in Socket.IO.

00:09:01.960 --> 00:09:05.540
But I'd like to make the
distinction that it's

00:09:05.540 --> 00:09:09.070
technically still
not required that you

00:09:09.070 --> 00:09:12.270
do push to satisfy the two
conditions that we set.

00:09:12.270 --> 00:09:15.980
So one of the ways that
people have circumvented this,

00:09:15.980 --> 00:09:19.840
if you reduce proximity from
the client to the server,

00:09:19.840 --> 00:09:24.880
so you minimize the
latency, in this case

00:09:24.880 --> 00:09:26.756
by having the waiter
right next to the guy,

00:09:26.756 --> 00:09:29.130
then you may think that your
application's real time just

00:09:29.130 --> 00:09:31.380
because the latency of
the request response cycle

00:09:31.380 --> 00:09:35.930
is so low that to the
end user, it's real time.

00:09:35.930 --> 00:09:39.490
And the other thing that you
have to do to make this work

00:09:39.490 --> 00:09:41.550
is you have to increase
server capacity.

00:09:41.550 --> 00:09:45.690
So it would be equivalent to
having tons of capacity just

00:09:45.690 --> 00:09:47.870
because you're expecting
so much more load.

00:09:47.870 --> 00:09:49.900
So if you do these
two things, you

00:09:49.900 --> 00:09:52.880
do effectively have a
real time application.

00:09:52.880 --> 00:09:55.520
And then now that
example that I set up

00:09:55.520 --> 00:09:57.180
would actually work really well.

00:09:57.180 --> 00:10:00.370
So what I want to
point to with this

00:10:00.370 --> 00:10:03.000
is that real time is more
about the user experience.

00:10:03.000 --> 00:10:06.370
It's not so much about
what stack you decide on

00:10:06.370 --> 00:10:07.900
or what transfer's you're using.

00:10:10.530 --> 00:10:12.240
There's two
implications that I've

00:10:12.240 --> 00:10:15.270
thought of that come with
setting up an application that

00:10:15.270 --> 00:10:18.650
is both fast and self-updating.

00:10:18.650 --> 00:10:22.190
So as far as making
your application fast,

00:10:22.190 --> 00:10:27.210
the speed at which you basically
make the data transfer work

00:10:27.210 --> 00:10:30.570
is going to determine how
real time your application is.

00:10:30.570 --> 00:10:33.430
And I've come to understand
that real time is

00:10:33.430 --> 00:10:37.410
more of a gradient, rather
than a binary classification.

00:10:37.410 --> 00:10:39.560
And an example that I
remember from many years

00:10:39.560 --> 00:10:42.030
ago when I was just getting
started with Socket.IO

00:10:42.030 --> 00:10:44.070
was Google Docs.

00:10:44.070 --> 00:10:46.070
There was a little startup
here in San Francisco

00:10:46.070 --> 00:10:50.860
called EtherPad that defined
themselves as really real time.

00:10:50.860 --> 00:10:55.860
So this was their way of saying
that, even though there were

00:10:55.860 --> 00:10:58.550
real time systems
available like Google Docs,

00:10:58.550 --> 00:11:01.320
they were sort of pointing
to them standing alone

00:11:01.320 --> 00:11:02.960
in that regard.

00:11:02.960 --> 00:11:04.770
And also they were
pointing to how

00:11:04.770 --> 00:11:07.580
Google was taking an arbitrary
length of time, as opposed

00:11:07.580 --> 00:11:10.110
to being as immediately
as it could be.

00:11:10.110 --> 00:11:12.560
So this kind of points to
that first naive example

00:11:12.560 --> 00:11:13.580
that we're doing.

00:11:13.580 --> 00:11:17.010
And they give a
great example of how

00:11:17.010 --> 00:11:20.350
most of the communication
that we do in real life

00:11:20.350 --> 00:11:24.740
doesn't really have this
sort of arbitrary latency.

00:11:24.740 --> 00:11:27.560
So at the time, I
think Google satisfied

00:11:27.560 --> 00:11:32.000
the self-updating thing, but it
wasn't as fast as it could be.

00:11:32.000 --> 00:11:34.620
So someone came up with a
little start-up in this case

00:11:34.620 --> 00:11:36.820
and made something
better, got acquired.

00:11:36.820 --> 00:11:40.910
Boom, now they're in
some beach in Hawaii.

00:11:40.910 --> 00:11:42.920
No, they're probably
just working here.

00:11:42.920 --> 00:11:45.880
They're maybe here.

00:11:45.880 --> 00:11:49.740
Friday night, thinking
about real time.

00:11:49.740 --> 00:11:51.550
One of the things
they did was they

00:11:51.550 --> 00:11:55.510
switched from an algorithm
of how they conversed changes

00:11:55.510 --> 00:11:56.660
in the text.

00:11:56.660 --> 00:11:58.950
And I'm not sure
about this one, but I

00:11:58.950 --> 00:12:01.510
think they were just polling
and implementing long polling.

00:12:01.510 --> 00:12:06.200
So they focused on making
the user experience better.

00:12:06.200 --> 00:12:10.990
And the other implication that
comes with these two conditions

00:12:10.990 --> 00:12:13.160
for real time applications
is that if you're

00:12:13.160 --> 00:12:15.330
going to make your
application self-updating,

00:12:15.330 --> 00:12:18.080
it can't just be self-updating
while the network is working

00:12:18.080 --> 00:12:20.980
perfectly, or during the
beginning of the session.

00:12:20.980 --> 00:12:23.530
And you have to make
it work all along.

00:12:23.530 --> 00:12:26.850
And right connection's one of
the things that you have to do.

00:12:26.850 --> 00:12:29.600
So you're setting up
an expectation, which

00:12:29.600 --> 00:12:32.240
is for the user, the
data is always up to date

00:12:32.240 --> 00:12:33.300
and coming in.

00:12:33.300 --> 00:12:36.340
And they're not going to be
used to thinking that they

00:12:36.340 --> 00:12:38.150
need to press the
refresh button.

00:12:38.150 --> 00:12:42.280
So one of the consequences
is that you have to make sure

00:12:42.280 --> 00:12:45.990
that the user knows that if
there's a network problem,

00:12:45.990 --> 00:12:48.990
or if they're disconnected,
that you're trying to reconnect.

00:12:48.990 --> 00:12:51.510
And of course, most of
the real time applications

00:12:51.510 --> 00:12:55.120
that you use today, like Google
Chat or Facebook Messenger,

00:12:55.120 --> 00:12:57.780
do a good job of doing this.

00:12:57.780 --> 00:13:01.280
But another thing that is
really important to consider

00:13:01.280 --> 00:13:03.930
is what I call state
reconciliation,

00:13:03.930 --> 00:13:07.740
or we could call it
resynchronization.

00:13:07.740 --> 00:13:11.860
And a test that I run most
applications is-- especially

00:13:11.860 --> 00:13:13.290
the ones that are
self-updating--

00:13:13.290 --> 00:13:15.960
is what happens if I'm
looking at something that's

00:13:15.960 --> 00:13:18.900
updating in real time,
I close my laptop lid,

00:13:18.900 --> 00:13:20.960
and I come back to
it a week later?

00:13:20.960 --> 00:13:24.070
I just open it, and what
happens to that session?

00:13:24.070 --> 00:13:26.000
And it turns out
that the front end

00:13:26.000 --> 00:13:29.490
needs to keep a few things
in mind that maybe we're

00:13:29.490 --> 00:13:31.120
not used to thinking about.

00:13:31.120 --> 00:13:33.402
One of them is that the
session could have expired.

00:13:33.402 --> 00:13:34.860
So the application
doesn't know how

00:13:34.860 --> 00:13:38.460
to rerender itself in a
logged out state, for example,

00:13:38.460 --> 00:13:40.940
dynamically.

00:13:40.940 --> 00:13:41.880
User login changed.

00:13:41.880 --> 00:13:45.210
So there's a chance that
maybe from another tab,

00:13:45.210 --> 00:13:47.560
or you validated this
session remotely.

00:13:47.560 --> 00:13:50.310
So you actually have
to reping the screen

00:13:50.310 --> 00:13:52.010
with a completely
different user.

00:13:52.010 --> 00:13:56.950
Or more concerningly, you might
have been offline for so long

00:13:56.950 --> 00:13:59.910
that the delta is really big.

00:13:59.910 --> 00:14:03.290
And in many cases, it's not
even worth showing entirely.

00:14:03.290 --> 00:14:07.620
So there's a lot of systems that
make your application satisfy

00:14:07.620 --> 00:14:10.700
the condition of being
self-updating by ensuring

00:14:10.700 --> 00:14:13.100
that they synchronize
every change that happens

00:14:13.100 --> 00:14:16.190
over time to any data
the user's looking at.

00:14:16.190 --> 00:14:19.000
But then they're going to
hit a problem when you're

00:14:19.000 --> 00:14:22.460
offline for a very long
time because of two reasons.

00:14:22.460 --> 00:14:25.170
One is you might overwhelm
the user with data.

00:14:25.170 --> 00:14:27.250
But even if the
user can handle it,

00:14:27.250 --> 00:14:28.490
it may not even be relevant.

00:14:28.490 --> 00:14:31.990
So if you're offline looking at
a Twitter stream or a Facebook

00:14:31.990 --> 00:14:34.280
stream for a very
long period of time,

00:14:34.280 --> 00:14:37.280
by the time a week
has passed, it

00:14:37.280 --> 00:14:40.170
doesn't even make sense to
get the entire [INAUDIBLE].

00:14:40.170 --> 00:14:42.050
You might just want
to get the tail,

00:14:42.050 --> 00:14:47.420
and also handle it
appropriately on the front end.

00:14:47.420 --> 00:14:48.980
The conclusion is
also that you have

00:14:48.980 --> 00:14:52.450
to be careful with the
signing in around an event

00:14:52.450 --> 00:14:56.320
log of sorts, where if
the user's subscribing

00:14:56.320 --> 00:14:58.290
to some data, your
front end assumes

00:14:58.290 --> 00:15:02.170
that every subsequent
change with that fault

00:15:02.170 --> 00:15:05.170
is going to be retrieved.

00:15:05.170 --> 00:15:09.940
And finally, I'd like to
mention an important caveat that

00:15:09.940 --> 00:15:13.630
comes with basically designing
this type of application.

00:15:13.630 --> 00:15:16.630
Or I should say, at this
time it's sort of a risk

00:15:16.630 --> 00:15:19.090
that a lot of us run into.

00:15:21.730 --> 00:15:25.120
I think in the effort to making
our web applications feel

00:15:25.120 --> 00:15:28.780
alive and self-updating, because
it's so rewarding to the user

00:15:28.780 --> 00:15:31.460
and sometimes so rewarding
to the developer,

00:15:31.460 --> 00:15:35.470
we've forgotten that we're
actually maybe making it

00:15:35.470 --> 00:15:39.550
fast during the
lifetime of the session,

00:15:39.550 --> 00:15:42.050
but in the beginning when we're
loading our web application,

00:15:42.050 --> 00:15:45.435
it's actually
really, really slow.

00:15:45.435 --> 00:15:48.410
So a term that I
object to as of today,

00:15:48.410 --> 00:15:51.310
because it dawned on me
today that single page app

00:15:51.310 --> 00:15:55.006
is a really bad name
for what we want to do.

00:15:55.006 --> 00:15:56.380
Because in some
cases, it implies

00:15:56.380 --> 00:15:57.963
that we're giving
up server rendering.

00:15:57.963 --> 00:16:01.130
There's only one page, which
means your server handles

00:16:01.130 --> 00:16:04.350
every URL the same
way, which is not good,

00:16:04.350 --> 00:16:06.450
and we're going to see why.

00:16:06.450 --> 00:16:10.190
In most cases, this type of
application incurs in too many

00:16:10.190 --> 00:16:15.020
hops in the network to give
the user data he wants.

00:16:15.020 --> 00:16:18.170
And in many cases, they
also give up the information

00:16:18.170 --> 00:16:19.830
that they have of the URL.

00:16:19.830 --> 00:16:22.120
If the user comes to
you with a certain URL,

00:16:22.120 --> 00:16:24.280
you already can prepare
the data that he wants to.

00:16:24.280 --> 00:16:28.380
You don't have to download a
huge single page application

00:16:28.380 --> 00:16:33.820
script, then evaluate
it, then get the data.

00:16:33.820 --> 00:16:37.180
And I think this happens
a lot because there's

00:16:37.180 --> 00:16:40.000
a lot of progress being made
in the frameworks that we use.

00:16:40.000 --> 00:16:42.737
So React.js, Socket.IO,
all these frameworks

00:16:42.737 --> 00:16:43.570
are really exciting.

00:16:43.570 --> 00:16:46.050
But we're forgetting
about basically

00:16:46.050 --> 00:16:49.160
how that first request works.

00:16:49.160 --> 00:16:52.550
So a useful reminder
is that we're all

00:16:52.550 --> 00:16:55.520
operating under the assumption
that TCP is how we establish

00:16:55.520 --> 00:16:57.020
that first connection
to the server,

00:16:57.020 --> 00:16:58.840
and that's how we get the data.

00:16:58.840 --> 00:17:03.370
Google is working on making
improvements to TCP end

00:17:03.370 --> 00:17:05.560
cobbling it in such a
way that it works better

00:17:05.560 --> 00:17:06.859
for SPDY connections.

00:17:06.859 --> 00:17:11.740
But for the moment, we have TCP
as a foundation of everything

00:17:11.740 --> 00:17:14.579
we do in real time
web obligations.

00:17:14.579 --> 00:17:19.020
The data is sent in segments
over a sliding window that

00:17:19.020 --> 00:17:21.740
acts as a congestion
control mechanism.

00:17:21.740 --> 00:17:23.970
And we have to keep
in mind that data

00:17:23.970 --> 00:17:27.630
is sent to the user
in a growing way.

00:17:27.630 --> 00:17:31.840
So initially, it just is only
able to send four segments.

00:17:31.840 --> 00:17:33.880
I like always
stealing this slide

00:17:33.880 --> 00:17:38.350
from Paul Irish that points
to how much data the client

00:17:38.350 --> 00:17:41.480
is able to absorb over time
for every TCP connection.

00:17:41.480 --> 00:17:43.510
And then he has really
interesting numbers

00:17:43.510 --> 00:17:46.010
for the equivalent
in 3G connections.

00:17:46.010 --> 00:17:48.870
And it kind of shows-- it kind
of puts it into perspective

00:17:48.870 --> 00:17:53.720
how bad it is to make the user
load all these huge single page

00:17:53.720 --> 00:17:55.430
applications.

00:17:55.430 --> 00:17:58.310
The conclusion is that
the first 14 kilobytes

00:17:58.310 --> 00:18:00.990
are the most important to make
the application feel really

00:18:00.990 --> 00:18:04.200
fast in that initial load time.

00:18:04.200 --> 00:18:06.780
So my conclusion is that
the most optimal real time

00:18:06.780 --> 00:18:09.600
application will have
to necessarily render

00:18:09.600 --> 00:18:13.080
data on the server, or at the
very least render a placeholder

00:18:13.080 --> 00:18:15.170
of where you're going
to fill in the data.

00:18:15.170 --> 00:18:17.580
So part of it or
completely, you have

00:18:17.580 --> 00:18:20.210
to render data on the server,
and it's not a choice.

00:18:20.210 --> 00:18:22.590
So I think when I
was asked to talk

00:18:22.590 --> 00:18:24.570
about the future of
real time applications,

00:18:24.570 --> 00:18:26.330
I think most of the
future will have

00:18:26.330 --> 00:18:29.630
to do with investment in making
this faster because we've

00:18:29.630 --> 00:18:32.085
made the lifetime of
the application fast.

00:18:32.085 --> 00:18:33.835
Like once everything
is loaded, everything

00:18:33.835 --> 00:18:36.090
is super fast and self-updating.

00:18:36.090 --> 00:18:40.650
But that initial connection
is actually pretty slow.

00:18:40.650 --> 00:18:45.330
It's very important that the
client side then takes over,

00:18:45.330 --> 00:18:47.980
once that initial
server render happens.

00:18:47.980 --> 00:18:51.360
Because if our goal is to
minimize latency and make

00:18:51.360 --> 00:18:54.200
the application really
fast, JavaScript

00:18:54.200 --> 00:18:57.650
is uniquely positioned to
do that because we can even

00:18:57.650 --> 00:19:01.235
mask the actual network
latency by using JavaScript

00:19:01.235 --> 00:19:06.390
in the client to make the front
end behave optimistically.

00:19:06.390 --> 00:19:08.490
And an example that
I always mention

00:19:08.490 --> 00:19:11.480
is, you write a
chat application,

00:19:11.480 --> 00:19:13.490
and it doesn't matter
how optimized it is.

00:19:13.490 --> 00:19:16.720
It doesn't matter that you use
the transport with the lowest

00:19:16.720 --> 00:19:18.880
amount of framing,
like WebSocket.

00:19:18.880 --> 00:19:20.860
At the end of the
day, most applications

00:19:20.860 --> 00:19:24.540
will actually insert
or repane the screen

00:19:24.540 --> 00:19:26.640
once you hold down
your Enter key.

00:19:26.640 --> 00:19:28.610
Because that's the
best user experience.

00:19:28.610 --> 00:19:30.620
They're not just
waiting for the network.

00:19:30.620 --> 00:19:35.580
So basically we do need this
basically initial really fast

00:19:35.580 --> 00:19:38.890
server load in many cases
with server rendering data,

00:19:38.890 --> 00:19:41.114
and then we have to have
the client take over.

00:19:41.114 --> 00:19:42.530
Because otherwise,
we're giving up

00:19:42.530 --> 00:19:45.820
on these really amazing
optimizations and opportunities

00:19:45.820 --> 00:19:47.290
to mask latency.

00:19:47.290 --> 00:19:49.860
So even if the
network is terrible,

00:19:49.860 --> 00:19:53.710
client side JavaScript
will always make it better.

00:19:53.710 --> 00:19:56.560
So the consequence that
I was mentioning earlier,

00:19:56.560 --> 00:19:59.320
or the implication that we
have to be really mindful

00:19:59.320 --> 00:20:01.530
of reconciliation
and reconnection

00:20:01.530 --> 00:20:03.110
is even more
important in this case

00:20:03.110 --> 00:20:06.410
because you have to think
of the server rendering

00:20:06.410 --> 00:20:09.790
some data as basically
a connection that

00:20:09.790 --> 00:20:11.010
disconnects immediately.

00:20:11.010 --> 00:20:13.310
Then the data gets
transferred to the client.

00:20:13.310 --> 00:20:15.210
Then the JavaScript
loads or whatever,

00:20:15.210 --> 00:20:17.920
and the connection
gets started up again.

00:20:17.920 --> 00:20:21.000
And then at that
point, there's a chance

00:20:21.000 --> 00:20:24.170
that from the moment that
the server rendered the page,

00:20:24.170 --> 00:20:25.540
data could have changed.

00:20:25.540 --> 00:20:27.150
That's why you have
to always think

00:20:27.150 --> 00:20:29.600
of these self-updating
applications

00:20:29.600 --> 00:20:31.800
through the lens of the
worst case scenario, which

00:20:31.800 --> 00:20:33.330
is there's a lot
of disconnections

00:20:33.330 --> 00:20:35.240
and reconnections.

00:20:35.240 --> 00:20:37.000
And to make this
seamless, and I think

00:20:37.000 --> 00:20:41.000
this is sort of the
conclusion, is the ability

00:20:41.000 --> 00:20:44.570
to share code is going
to be uniquely important.

00:20:44.570 --> 00:20:47.930
So the future is what it's
always been about, I think,

00:20:47.930 --> 00:20:51.220
which is make your app
deliver data faster.

00:20:51.220 --> 00:20:54.440
And I think writing JavaScript
on the server with Node.js

00:20:54.440 --> 00:20:56.290
is going to be really
helpful for that.

00:20:56.290 --> 00:20:56.890
Thank you.

00:20:56.890 --> 00:20:58.440
[APPLAUSE]

