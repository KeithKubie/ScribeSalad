WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:03.892
You can combine basic array algorithms to perform more complicated tasks. For

00:00:03.892 --> 00:00:07.294
example, we can calculate the final score, which is the sum of all the scores

00:00:07.294 --> 00:00:11.840
except the lowest one. This is related to several of the algorithms that you've

00:00:11.840 --> 00:00:15.664
just seen. Let's write a method to drop the lowest score, and I'll give you

00:00:15.664 --> 00:00:21.296
some methods that you can use. One removes the score at a particular index. One

00:00:21.296 --> 00:00:26.176
finds what the minimum score is and one finds the index of a given score. Skip

00:00:26.176 --> 00:00:30.810
to the quiz and code up remove lowest if you're pretty sure you've got this.

00:00:30.810 --> 00:00:33.188
I'm going to do a demo on a small data set in case you want a little more info

00:00:33.188 --> 00:00:38.424
first. Let's say our set of scores was eight, seven, eight point five, nine

00:00:38.424 --> 00:00:44.313
point five, seven, four and ten. We'd also have some zeros left over at the end

00:00:44.313 --> 00:00:48.729
of the arrays since it's paritially filled, but current size will tell us not

00:00:48.729 --> 00:00:52.731
to go past there, I'd first find the lowest score, it might be 8, but 7 is

00:00:52.731 --> 00:00:57.009
better, it's not 8.5 or 9.5, there is 7 again, okay 4 is better not 10, okay so

00:00:57.009 --> 00:01:06.269
4 was the lowest we say, now, I want to find the index of that element. So,

00:01:06.269 --> 00:01:10.427
I'll go through again this time looking for the number four and remembering the

00:01:10.427 --> 00:01:14.795
index. And it looks like I found it, the index I want, is five, now, I remove

00:01:14.795 --> 00:01:18.315
the fifth element, which will move ten down and I'll need to decrease current

00:01:18.315 --> 00:01:24.820
size. You won't actually have to implement remove. But now you can see why it

00:01:24.820 --> 00:01:27.700
might be important when you're calculating the sum, to only look at the items

00:01:27.700 --> 00:01:32.045
that you know are in the array. Because this ten will show up in two places

00:01:32.045 --> 00:01:37.170
now. And you wouldn't want to add 10 to the sum twice. If you already have

00:01:37.170 --> 00:01:40.525
methods to remove, and to find a minimum element and to find a location of a

00:01:40.525 --> 00:01:44.380
given element, how would you code remove lowest?

