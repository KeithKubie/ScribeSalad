WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.380
&gt;&gt; KOLEDA: Hi, I'm Eric Koleda with the Google
Developer Relations team. This screencast

00:00:05.380 --> 00:00:11.691
will show you how to get started with the
AdWords API PHP Client Library. The library

00:00:11.691 --> 00:00:20.950
requires PHP version 5.2 and the extensions
SoapClient, OpenSSL, and cURL. The first thing

00:00:20.950 --> 00:00:25.260
we need to do is download the library. The
best way to find it is by going to the AdWords

00:00:25.260 --> 00:00:40.550
API documentation at code.google.com/apis/adwords.
From here, click on Docs, Libraries &amp; Samples,

00:00:40.550 --> 00:00:48.670
and PHP Client Library. This is the main project
page of the AdWords API PHP Client Library.

00:00:48.670 --> 00:00:56.160
On the right-hand side of the pages, a convenient
link to download the latest version. Once

00:00:56.160 --> 00:01:04.239
the download is complete, extract it to a
folder of your choice. Before you can start

00:01:04.239 --> 00:01:13.170
using the library, you must set the Authentication
Information. Browse to Source, Google, API,

00:01:13.170 --> 00:01:21.219
Ads, AdWords, and open the file auth.ini.
When testing a new library, it's best to use

00:01:21.219 --> 00:01:26.159
a SandBox account. More information on the
SandBox environment is available in the screen

00:01:26.159 --> 00:01:32.170
cast, Intro to the AdWords API SandBox. Entering
your SandBox credentials, starting with the

00:01:32.170 --> 00:01:46.689
email and password of your Google account,
enter a user agent that identifies your application.

00:01:46.689 --> 00:01:52.509
The application token itself is ignored in
the SandBox. And enter a developer token which

00:01:52.509 --> 00:02:03.929
is your email address plus, plus the currency
code. Finally, set the client ID to the email

00:02:03.929 --> 00:02:11.480
of one the automatically generated client
accounts, and save the changes to the file.

00:02:11.480 --> 00:02:15.870
Since we are using the sandbox environment,
you must also set the default server in settings.ini.

00:02:15.870 --> 00:02:23.920
For the Sandbox, this is adwords-sandbox.google.com.
You are now ready to make a request with the

00:02:23.920 --> 00:02:30.400
library. The examples folder contains a subfolder
for every version of the API that the client

00:02:30.400 --> 00:02:47.370
library supports. To start, we'll open a command
prompt, and browse to the examples folder.

00:02:47.370 --> 00:02:57.270
The first example we'll run is GetAllCampaigns.php.
Since this is a new sandbox account, there

00:02:57.270 --> 00:03:12.930
will not be any existing campaigns. To create
some campaigns, we'll run AddCampaign.php.

00:03:12.930 --> 00:03:21.440
This example added a new campaign to the account,
and if we rerun GetAllCampaigns.php, we can

00:03:21.440 --> 00:03:26.890
see the return of the results. Now, let's
create a new example to pause a campaign.

00:03:26.890 --> 00:03:46.860
Create a new file called PauseCampaign.php,
and open the text editor. The first thing

00:03:46.860 --> 00:03:54.380
we need to do is include the Adwordsphp library.
One way to do this is to set the include path

00:03:54.380 --> 00:03:59.700
to contain the source code for the PHP client
library, and then require the AdWordsUser

00:03:59.700 --> 00:04:04.580
class. You don't need to require each service
individually because they will be automatically

00:04:04.580 --> 00:04:11.350
required by the AdWords user. Next, we'll
paste in the try catch loop to ensure that

00:04:11.350 --> 00:04:20.499
any errors generated by the library will be
caught and displayed. Next, we'll create the

00:04:20.499 --> 00:04:26.090
AdWords user object which will load the credentials
from the auth.ini set earlier and then enable

00:04:26.090 --> 00:04:31.930
logging. The campaign service can be fetched
from the AdWords user using the kit campaign

00:04:31.930 --> 00:04:40.169
service method. We'll need to set the campaign
ID for the campaign we wished to modify. We

00:04:40.169 --> 00:04:54.020
go back to the command prompt, we can pull
the ID from the previous example.

00:04:54.020 --> 00:05:00.629
Next, we'll create the updated campaign object
setting the ID to the ID of the existing campaign

00:05:00.629 --> 00:05:07.240
and changing the status to paused. Now that
we've created the updated campaign object,

00:05:07.240 --> 00:05:14.030
we can create the operation that will perform
the change. We'll set the operand to the campaign

00:05:14.030 --> 00:05:19.289
we just created and the operator to set which
will perform an update. Finally, we'll create

00:05:19.289 --> 00:05:24.870
an array of operations containing only this
one operation. We're now ready to make the

00:05:24.870 --> 00:05:30.240
API call which is done by calling the campaign
service method mutate passing in the array

00:05:30.240 --> 00:05:38.020
of operations. Finally, we'll loop over the
results displaying the name, ID, and status

00:05:38.020 --> 00:05:46.069
of each of the campaigns that were changed.
We'll save this example, go back to our command

00:05:46.069 --> 00:05:58.160
prompt, and run the example.
Now we can see there are campaigns where it's

00:05:58.160 --> 00:06:04.620
updated and has a status pause. Updates to
the library will be announced on a project's

00:06:04.620 --> 00:06:10.569
homepage. The AdWords API Blog will contain
the information about new services being launched.

00:06:10.569 --> 00:06:15.210
If you have any questions about using the
API, you can post them to the forum. Finally,

00:06:15.210 --> 00:06:20.669
if you find any bugs in the PHP client library,
click the Issue in the Issue tracker. Thank

00:06:20.669 --> 00:06:23.110
you for your time and then enjoy using the
client library.

