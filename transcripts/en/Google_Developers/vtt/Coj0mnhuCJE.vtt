WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.630
[MUSIC PLAYING]

00:00:07.630 --> 00:00:10.490
MALE SPEAKER 1: Shanghai GDG
is a very interesting

00:00:10.490 --> 00:00:11.450
developer community.

00:00:11.450 --> 00:00:12.290
FEMALE SPEAKER 1: I'm
glad somebody

00:00:12.290 --> 00:00:13.560
has asked this question.

00:00:13.560 --> 00:00:14.800
MALE SPEAKER 2: This is where
the magic happens.

00:00:14.800 --> 00:00:16.330
FEMALE SPEAKER 2: This is
primarily a question and

00:00:16.330 --> 00:00:16.920
answer show.

00:00:16.920 --> 00:00:18.930
So if any of you out there would
like to ask questions.

00:00:24.500 --> 00:00:24.840
MANO MARKS: Hi.

00:00:24.840 --> 00:00:26.130
I'm Mano Marks.

00:00:26.130 --> 00:00:28.930
I'm a developer advocate on
the Google Maps Developer

00:00:28.930 --> 00:00:30.200
Relations team.

00:00:30.200 --> 00:00:33.450
I'm here with Brendan Kenny,
who is also on

00:00:33.450 --> 00:00:34.390
the team with me.

00:00:34.390 --> 00:00:38.450
And we're here to talk to you
today about some of the latest

00:00:38.450 --> 00:00:43.170
experiments that we've been
doing with incorporating HTML5

00:00:43.170 --> 00:00:45.010
onto Google Maps.

00:00:45.010 --> 00:00:48.880
So these are very much work in
progress kind of things,

00:00:48.880 --> 00:00:51.930
building off of some things you
may have seen earlier in

00:00:51.930 --> 00:00:56.960
the summer when Brendan talked
about his canvas layer work

00:00:56.960 --> 00:00:57.830
he's been doing.

00:00:57.830 --> 00:01:02.710
So do you want to describe,
just briefly,

00:01:02.710 --> 00:01:04.650
what we've been doing?

00:01:04.650 --> 00:01:05.120
BRENDAN KENNY: Sure.

00:01:05.120 --> 00:01:08.590
So the most recent thing we've
been doing is taking a look at

00:01:08.590 --> 00:01:13.600
how to load, parse, and display
some of the most

00:01:13.600 --> 00:01:16.580
common GeoData formats.

00:01:16.580 --> 00:01:21.030
So especially looking at
shapefiles and KML.

00:01:21.030 --> 00:01:26.170
And the main problem that you
run into if you want to parse

00:01:26.170 --> 00:01:29.100
it-- well, actually, there's
several stages of problems.

00:01:29.100 --> 00:01:31.900
The first thing you have to
do is actually load them.

00:01:31.900 --> 00:01:33.910
And you actually wrote
that part.

00:01:33.910 --> 00:01:34.800
So if you want to
talk about that.

00:01:34.800 --> 00:01:38.140
MANO MARKS: So one of the things
that we looked at back

00:01:38.140 --> 00:01:42.180
in the spring is looking at a
pre-parsing data on a server

00:01:42.180 --> 00:01:45.390
and then passing it into the
browser for display.

00:01:45.390 --> 00:01:49.650
And we've had some really good
samples about doing that.

00:01:49.650 --> 00:01:52.570
And it's been really fun.

00:01:52.570 --> 00:01:56.050
But we want to look at doing
pure JavaScript in the browser

00:01:56.050 --> 00:01:58.110
solutions for this.

00:01:58.110 --> 00:02:02.320
And so what I've been looking
at doing is loading in

00:02:02.320 --> 00:02:09.070
shapefiles and KML files and
then displaying them on top of

00:02:09.070 --> 00:02:14.000
Google Maps by parsing them in
JavaScript and then passing

00:02:14.000 --> 00:02:16.260
that onto the canvas layer.

00:02:16.260 --> 00:02:21.540
So the shapefiles are
binary files.

00:02:21.540 --> 00:02:24.290
Actually, so those of you who
know about shapefiles would

00:02:24.290 --> 00:02:31.850
know that it's an open spec,
high-end GIS software, and

00:02:31.850 --> 00:02:34.470
lots of GIS software, basically,
can produce

00:02:34.470 --> 00:02:36.340
shapefiles.

00:02:36.340 --> 00:02:40.880
There's many files that compose
the single shapefile.

00:02:40.880 --> 00:02:44.170
I was looking particularly at
the .shp, which describes the

00:02:44.170 --> 00:02:45.220
geometries.

00:02:45.220 --> 00:02:49.710
and the .dbf, which describes
the attribute data.

00:02:49.710 --> 00:02:52.490
We aren't dealing at this
point with projections,

00:02:52.490 --> 00:02:53.920
although that's something
we want to

00:02:53.920 --> 00:02:56.190
deal with in the future.

00:02:56.190 --> 00:03:03.890
And so loading those in, HTML5
allows you to load in using

00:03:03.890 --> 00:03:06.730
XML HTTP requests.

00:03:06.730 --> 00:03:09.620
You can actually now a
load in binary files.

00:03:09.620 --> 00:03:13.050
So previously, people had dealt
with this by loading it

00:03:13.050 --> 00:03:17.305
in as a string, passing a string
that is basically a

00:03:17.305 --> 00:03:19.610
binary string, and then
doing fancy parsing.

00:03:19.610 --> 00:03:28.500
But you can actually load in
these shapefile formats as

00:03:28.500 --> 00:03:30.960
binary files instead
of as text.

00:03:30.960 --> 00:03:36.850
And then I compared that with
using KML, which is an XML

00:03:36.850 --> 00:03:37.790
data format.

00:03:37.790 --> 00:03:41.160
It's actually the most common
geographic data

00:03:41.160 --> 00:03:42.100
format in the world.

00:03:42.100 --> 00:03:46.020
There are about a billion of
them on the web right now.

00:03:46.020 --> 00:03:58.540
And so what we did was we took
some zip code boundary data

00:03:58.540 --> 00:04:01.400
from the US Census.

00:04:01.400 --> 00:04:06.350
So taking the TIGER/line data,
and we're looking at 100

00:04:06.350 --> 00:04:08.840
polygons in Northern California,
basically just to

00:04:08.840 --> 00:04:11.080
get a sense of how
that would work.

00:04:11.080 --> 00:04:14.740
And then I used a couple of
open-source libraries.

00:04:14.740 --> 00:04:20.560
There's shp.js, dbf.js for
parsing each of those pieces.

00:04:20.560 --> 00:04:28.530
And then also using JSTS, which
is a JavaScript port of

00:04:28.530 --> 00:04:32.750
the Java Topology Suite, to
do the triangulation.

00:04:32.750 --> 00:04:35.700
So then why don't you talk a
little bit more about what

00:04:35.700 --> 00:04:36.480
happens then.

00:04:36.480 --> 00:04:37.135
BRENDAN KENNY: Sure.

00:04:37.135 --> 00:04:42.340
So we can take a look at an
example here that I'm running.

00:04:42.340 --> 00:04:47.540
This is loading a shapefile of
those zip codes and/or--

00:04:47.540 --> 00:04:48.050
what are they?

00:04:48.050 --> 00:04:50.430
The census something--

00:04:50.430 --> 00:04:51.640
MANO MARKS: Yeah, zip code
boundaries from--

00:04:51.640 --> 00:04:53.170
BRENDAN KENNY: Anyway,
basically zip codes.

00:04:53.170 --> 00:04:59.410
And so this is just loading the
first 100 zip code areas

00:04:59.410 --> 00:05:01.630
in that file and then
displaying them.

00:05:01.630 --> 00:05:06.400
And this is actually doing the
convex hull of that, so the

00:05:06.400 --> 00:05:10.050
smallest convex polygon that
encompasses that zip code,

00:05:10.050 --> 00:05:14.276
which is useful for a lot of
questions about that area.

00:05:14.276 --> 00:05:19.905
And so what we're doing here
is, as Mano said, we are

00:05:19.905 --> 00:05:21.820
actually using XML
HTTP requests to

00:05:21.820 --> 00:05:23.410
bring in that file.

00:05:23.410 --> 00:05:27.310
You set the response type as
array buffer so you can get it

00:05:27.310 --> 00:05:32.200
as directly the binary data, and
then slipping through it

00:05:32.200 --> 00:05:35.710
and parsing it to get at
the actual data points.

00:05:35.710 --> 00:05:39.090
And from there, we pass it to
JSTS right now to do the

00:05:39.090 --> 00:05:40.350
triangulation.

00:05:40.350 --> 00:05:43.720
So the problem here is that we
want to use WebGL to display

00:05:43.720 --> 00:05:44.430
on top of a map.

00:05:44.430 --> 00:05:50.720
If you've seen some of our
previous live sessions, you've

00:05:50.720 --> 00:05:52.060
heard us talk about
canvas layer.

00:05:52.060 --> 00:05:55.220
And we had a session at Google
I/O where we also talked about

00:05:55.220 --> 00:05:59.000
it, just basically, putting a
WebGL canvas on top of a map

00:05:59.000 --> 00:06:01.310
so that we have access to that
hardware-accelerated, super

00:06:01.310 --> 00:06:06.190
fast, geometry-drawing
capability on top of a map.

00:06:06.190 --> 00:06:09.470
The problem is that WebGL is
intentionally meant to be low

00:06:09.470 --> 00:06:13.330
level and provide primitives
that are extremely fast but

00:06:13.330 --> 00:06:15.750
that you have to then put
together to do something more

00:06:15.750 --> 00:06:16.710
complicated.

00:06:16.710 --> 00:06:19.630
And in this case, it only
draws triangles.

00:06:19.630 --> 00:06:23.600
And the problem is, when you
have a big polygon, usually in

00:06:23.600 --> 00:06:24.510
a shapefile, it's just--

00:06:24.510 --> 00:06:27.030
MANO MARKS: Well, you need
points, lines, or triangles.

00:06:27.030 --> 00:06:28.740
BRENDAN KENNY: Sorry,
yes, yes, yes.

00:06:28.740 --> 00:06:31.140
But the only fill shape
is a polygon.

00:06:31.140 --> 00:06:38.820
You can't do quadrilaterals or
any kind of higher number of

00:06:38.820 --> 00:06:41.050
vertex shapes.

00:06:41.050 --> 00:06:44.160
So in this case, the shapefile
just has these polylines to

00:06:44.160 --> 00:06:46.060
define the borders
of the zip codes.

00:06:46.060 --> 00:06:49.410
And so we actually have to
triangulate them to get them

00:06:49.410 --> 00:06:51.560
into a format that
we can draw.

00:06:51.560 --> 00:06:53.400
And right now, we're
using JSTS.

00:06:53.400 --> 00:06:55.270
We're taking a look at--

00:06:55.270 --> 00:06:59.650
actually, I started porting
the live test, which is an

00:06:59.650 --> 00:07:05.990
open source version of the
tessellation library from the

00:07:05.990 --> 00:07:09.370
OpenGL utility library back
from 20 years ago.

00:07:09.370 --> 00:07:13.450
But it's still one of the
best methods to do this.

00:07:13.450 --> 00:07:16.350
And we'll all just have a nice
JavaScript library when that's

00:07:16.350 --> 00:07:17.830
done, which'll be great.

00:07:17.830 --> 00:07:23.070
So we can actually peek
in here in the code.

00:07:23.070 --> 00:07:29.320
If we look at just a particular
record, we can see

00:07:29.320 --> 00:07:30.450
the format that we get.

00:07:30.450 --> 00:07:35.170
So once it's parsed and
triangulated, we get an array

00:07:35.170 --> 00:07:36.730
of objects to draw.

00:07:36.730 --> 00:07:40.040
And then within that, we just
have the information about--

00:07:40.040 --> 00:07:45.440
there's this kind of primitive
level information.

00:07:45.440 --> 00:07:49.540
So for that particular polygon
here, we've stored the actual

00:07:49.540 --> 00:07:52.300
zip code and other information
about that.

00:07:52.300 --> 00:07:53.090
And this could be anything.

00:07:53.090 --> 00:07:55.260
So this was in the shapefile
already.

00:07:55.260 --> 00:08:00.020
But it could be anything from
demographic data to a

00:08:00.020 --> 00:08:04.910
reference to another shapefile
so we can pull in data that's

00:08:04.910 --> 00:08:07.270
particular to that zip code
and cross-reference it.

00:08:07.270 --> 00:08:08.580
Then we actually have
the binary data.

00:08:08.580 --> 00:08:11.750
And if we drill down here, you
can see it's just a series of

00:08:11.750 --> 00:08:16.600
latitude and longitudes that's
actually in normal lat/long

00:08:16.600 --> 00:08:21.370
space that we then take
care of on the inside.

00:08:21.370 --> 00:08:24.260
And then we have the
type polygon.

00:08:24.260 --> 00:08:26.170
And so this is where we can
switch on things like

00:08:26.170 --> 00:08:30.160
polylines and point data,
that sort of thing.

00:08:30.160 --> 00:08:33.150
And finally, we just had this
uniform object that lets us--

00:08:33.150 --> 00:08:35.780
if you're familiar with WebGL,
there's these uniform

00:08:35.780 --> 00:08:39.760
variables, which is how you pass
data in on the triangle

00:08:39.760 --> 00:08:42.669
level to say I want this
triangle red, or I want this

00:08:42.669 --> 00:08:45.770
triangle associated
with this value.

00:08:45.770 --> 00:08:48.490
And I can do whatever
I want in a shader.

00:08:48.490 --> 00:08:50.070
And so that's how we
actually render it.

00:08:50.070 --> 00:08:55.540
And then in canvas layer, we
just loop over this array of

00:08:55.540 --> 00:09:00.200
polygons and just say load this
list of data and then

00:09:00.200 --> 00:09:01.480
render that list of data.

00:09:01.480 --> 00:09:03.930
And so I think right now we're
actually showing something

00:09:03.930 --> 00:09:06.850
like 200,000 triangles.

00:09:06.850 --> 00:09:08.730
So this is unsimplified data.

00:09:08.730 --> 00:09:10.570
This is direct from
the shapefile.

00:09:10.570 --> 00:09:15.260
And it's a little hard to see
when it's presented like this.

00:09:15.260 --> 00:09:17.660
But it actually shows
at a full 60

00:09:17.660 --> 00:09:19.570
frames a second on this.

00:09:19.570 --> 00:09:21.590
I think this is like a two and
a half year-old machine.

00:09:21.590 --> 00:09:26.640
So it's nothing too-- it's a
decent computer, but it runs

00:09:26.640 --> 00:09:31.690
really well, is the thing
I'm getting at.

00:09:31.690 --> 00:09:34.220
MANO MARKS: And as you can
see, these are rather

00:09:34.220 --> 00:09:35.690
blobbish-looking polygons.

00:09:35.690 --> 00:09:39.360
If you actually look at
polygons, you can actually

00:09:39.360 --> 00:09:43.070
look up a particular zip
code, US zip code on

00:09:43.070 --> 00:09:44.440
maps.google.com.

00:09:44.440 --> 00:09:46.980
It'll highlight the
polygon for you.

00:09:46.980 --> 00:09:50.300
We don't do that in the Maps
API at this point.

00:09:50.300 --> 00:09:54.460
But they're much more
precise than this.

00:09:54.460 --> 00:09:58.730
And that's because JSTS uses,
as Brendan mentioned, this

00:09:58.730 --> 00:10:03.920
convex hull algorithm, which
creates a more simplified

00:10:03.920 --> 00:10:05.980
polygon that contains
the polygon.

00:10:05.980 --> 00:10:07.920
So you can see it looks
very roundish.

00:10:07.920 --> 00:10:13.030
This doesn't work well at all
for concave polygons or

00:10:13.030 --> 00:10:15.960
polygons that have holes in
then, which actually you can

00:10:15.960 --> 00:10:17.750
tell that this does because
you can see there's

00:10:17.750 --> 00:10:19.020
overlapping polygons.

00:10:19.020 --> 00:10:22.500
BRENDAN KENNY: Yeah, and if
you have polygons that

00:10:22.500 --> 00:10:24.720
self-intersect, then you're
really in trouble.

00:10:24.720 --> 00:10:28.170
In fact, I don't think-- or at
least we haven't found any

00:10:28.170 --> 00:10:30.590
JavaScript triangulation
library that handles

00:10:30.590 --> 00:10:32.710
self-intersection, which is
why we're turning towards

00:10:32.710 --> 00:10:35.300
these other libraries, which
can be a little bit slower,

00:10:35.300 --> 00:10:38.260
but are proven correct in almost
all situations and are

00:10:38.260 --> 00:10:43.410
also extremely numerically
stable and that sort of thing.

00:10:43.410 --> 00:10:46.270
So it's not that exciting, but
you can actually see the same

00:10:46.270 --> 00:10:47.870
thing over here.

00:10:47.870 --> 00:10:51.030
And this is parsing
the KML file.

00:10:51.030 --> 00:10:53.040
And so this--

00:10:53.040 --> 00:10:55.110
you're not using a
binary load here.

00:10:55.110 --> 00:10:55.910
You're using something slightly
different, right?

00:10:55.910 --> 00:10:57.640
MANO MARKS: No, I just
load it in as XML.

00:10:57.640 --> 00:10:58.910
BRENDAN KENNY: OK.

00:10:58.910 --> 00:11:03.930
MANO MARKS: And we get better
performance with the binary,

00:11:03.930 --> 00:11:07.690
loading in a binary shape file
and parsing that than the KML.

00:11:07.690 --> 00:11:10.920
Not significantly, but we're
only working with about 100

00:11:10.920 --> 00:11:12.445
polygons here.

00:11:12.445 --> 00:11:16.160
So I think you'd see much longer
load times if you were

00:11:16.160 --> 00:11:17.340
doing all of California.

00:11:17.340 --> 00:11:17.750
BRENDAN KENNY: Right.

00:11:17.750 --> 00:11:18.880
Oh, yeah, that's a good point.

00:11:18.880 --> 00:11:22.640
I mean, the slowest part is
triangulation because these

00:11:22.640 --> 00:11:24.220
things are tens of thousands
of vertices.

00:11:24.220 --> 00:11:26.430
And so you have to--

00:11:26.430 --> 00:11:27.410
at the very least, you're
going to have

00:11:27.410 --> 00:11:28.830
that order of triangles.

00:11:28.830 --> 00:11:33.880
And often, you have much more
if it's more complicated.

00:11:33.880 --> 00:11:41.240
But with KML, you have to parse
the XML, so the browser

00:11:41.240 --> 00:11:41.880
takes care of that.

00:11:41.880 --> 00:11:42.620
And then you walk it.

00:11:42.620 --> 00:11:45.100
You use the browser's
API to actually walk

00:11:45.100 --> 00:11:46.040
it, which is nice.

00:11:46.040 --> 00:11:49.180
You get all this nice correction
of the data.

00:11:49.180 --> 00:11:50.680
And the parsing engine takes
care of everything.

00:11:50.680 --> 00:11:54.130
Whereas if your shapefile is
malformed, you're in trouble.

00:11:54.130 --> 00:11:57.570
We can actually take a
look at the different

00:11:57.570 --> 00:12:00.080
file formats here.

00:12:00.080 --> 00:12:01.300
Here's the KML.

00:12:01.300 --> 00:12:04.320
And it's about what you would
expect with KML, just lots and

00:12:04.320 --> 00:12:05.930
lots of coordinates.

00:12:05.930 --> 00:12:10.860
But what's kind of cool is we
can come over here and see the

00:12:10.860 --> 00:12:13.550
binary representation
of the shapefile.

00:12:13.550 --> 00:12:15.280
And this is what
we're loading.

00:12:15.280 --> 00:12:17.780
So you don't have to deal
with a bunch of XML--

00:12:21.350 --> 00:12:21.652
I don't know.

00:12:21.652 --> 00:12:23.800
What should we call it?

00:12:23.800 --> 00:12:24.240
Verbosity?

00:12:24.240 --> 00:12:25.220
MANO MARKS: Verbosity, yeah.

00:12:25.220 --> 00:12:26.780
BRENDAN KENNY: Yeah, so
it's nicely packed

00:12:26.780 --> 00:12:28.890
into this binary data.

00:12:28.890 --> 00:12:32.690
On the other hand, it's very
much like load this byte.

00:12:32.690 --> 00:12:35.030
And in that byte, it describes
how many of the next bytes are

00:12:35.030 --> 00:12:37.640
going to be into this
coordinate.

00:12:37.640 --> 00:12:43.850
And so right now, I would say
that it works pretty well.

00:12:43.850 --> 00:12:46.730
We use what's called a data
view, which is kind of an

00:12:46.730 --> 00:12:52.680
NDN-independent view of this
data, whereas array buffers

00:12:52.680 --> 00:12:54.790
are NDN-dependent, which
doesn't really

00:12:54.790 --> 00:12:55.280
matter right now.

00:12:55.280 --> 00:12:58.890
But someday, computers
might switch again.

00:12:58.890 --> 00:13:00.770
Or you might have something over
the network which is the

00:13:00.770 --> 00:13:03.020
opposite of what you'd expect.

00:13:03.020 --> 00:13:04.770
So dataview takes care
of that for you.

00:13:04.770 --> 00:13:09.465
And there's a bunch of nice
libraries that deal with that

00:13:09.465 --> 00:13:10.850
sort of thing.

00:13:10.850 --> 00:13:13.420
MANO MARKS: Yeah, so definitely
based on current

00:13:13.420 --> 00:13:17.970
experience, I would say if you
were doing a project and you

00:13:17.970 --> 00:13:20.120
just want to display data that
you already had, I would

00:13:20.120 --> 00:13:24.430
pre-triangulate it and push
it down to the browser

00:13:24.430 --> 00:13:25.470
and do it that way.

00:13:25.470 --> 00:13:29.250
But this would allow you to do
things like have people drag

00:13:29.250 --> 00:13:32.325
and drop their own shapefiles
onto a map to view what their

00:13:32.325 --> 00:13:33.800
own data would look like
in conjunction

00:13:33.800 --> 00:13:35.880
with yours, for instance.

00:13:35.880 --> 00:13:37.210
So this is a good technique.

00:13:37.210 --> 00:13:43.010
We're going to work on refining
these libraries to

00:13:43.010 --> 00:13:46.380
get them so that we have
a better triangulation.

00:13:46.380 --> 00:13:50.270
We can handle polygons with
holes and also increasing

00:13:50.270 --> 00:13:51.160
their performance.

00:13:51.160 --> 00:13:52.410
BRENDAN KENNY: Yeah, so
triangulation is good.

00:13:52.410 --> 00:13:53.900
Simplification is good, too.

00:13:53.900 --> 00:13:57.020
WebGL has pretty amazing
performance.

00:13:57.020 --> 00:13:57.930
But it's not magic.

00:13:57.930 --> 00:14:02.680
If you have 500 million
triangles, it's not going to

00:14:02.680 --> 00:14:04.670
run very well.

00:14:04.670 --> 00:14:08.870
But if you can now simplify that
on the server side, or

00:14:08.870 --> 00:14:11.150
beforehand, you make that
a whole lot easier.

00:14:11.150 --> 00:14:13.830
And then you can start doing fun
things because you have a

00:14:13.830 --> 00:14:17.390
large performance window left
for you, where you can start

00:14:17.390 --> 00:14:19.600
styling things, and animating
things, and doing

00:14:19.600 --> 00:14:20.633
all sorts of craziness.

00:14:20.633 --> 00:14:21.440
MANO MARKS: Right.

00:14:21.440 --> 00:14:23.610
BRENDAN KENNY: So, Mano,
we're getting

00:14:23.610 --> 00:14:26.730
close to our time here.

00:14:26.730 --> 00:14:30.920
Do you want to talk about
how a high-level view?

00:14:30.920 --> 00:14:33.080
Why is this interesting?

00:14:33.080 --> 00:14:35.260
Why would we want to do this
sort of thing as opposed to

00:14:35.260 --> 00:14:40.050
just loading your KML through
as a KML layer.

00:14:40.050 --> 00:14:45.130
MANO MARKS: So one thing to
think about is the sort of

00:14:45.130 --> 00:14:48.260
difference between server-side
rendering of layers and

00:14:48.260 --> 00:14:49.660
client-side rendering.

00:14:49.660 --> 00:14:52.780
And server-side rendering gives
you tremendous power.

00:14:52.780 --> 00:14:57.200
You can push down the pipe
just the bare minimum of

00:14:57.200 --> 00:14:58.600
exactly what you need.

00:14:58.600 --> 00:15:02.030
And then the browser and the
computer that it's running on

00:15:02.030 --> 00:15:04.270
don't have to do any work
to figure it out.

00:15:04.270 --> 00:15:08.420
It's usually just displayed
as some sort of layer or--

00:15:08.420 --> 00:15:10.690
sorry, an image layer.

00:15:10.690 --> 00:15:14.020
In the case of a KML layer
in the Maps API,

00:15:14.020 --> 00:15:18.910
it's a clickable raster.

00:15:18.910 --> 00:15:23.420
But if you can do something on
the client side, then it can

00:15:23.420 --> 00:15:27.310
actually be dynamically
interacted with.

00:15:27.310 --> 00:15:31.700
You can change the data, change
the coloring, change

00:15:31.700 --> 00:15:35.480
the display of the data, do
queries on it without having

00:15:35.480 --> 00:15:37.960
to re-query the server and
pass data back down.

00:15:37.960 --> 00:15:41.010
So these are kind of the
trade-offs you're making

00:15:41.010 --> 00:15:44.980
between the client-side and
server-side rendering.

00:15:44.980 --> 00:15:48.580
So yeah, I mean, obviously at
Google, we're very committed

00:15:48.580 --> 00:15:51.870
to the cloud and having lots
of that sort of processing

00:15:51.870 --> 00:15:52.830
happening there.

00:15:52.830 --> 00:15:59.320
But I think with power of the
browser and the new APIs you

00:15:59.320 --> 00:16:00.940
get with HTML5--

00:16:00.940 --> 00:16:02.450
BRENDAN KENNY: Yeah,
we can't ignore it.

00:16:02.450 --> 00:16:03.170
It's still there.

00:16:03.170 --> 00:16:07.340
MANO MARKS: Yeah, I think we're
going to continue have

00:16:07.340 --> 00:16:11.250
this sort of dynamic tension
between the client- and

00:16:11.250 --> 00:16:12.500
server-side rendering.

00:16:16.920 --> 00:16:24.630
BRENDAN KENNY: Do we want to
dare do some live coding here?

00:16:24.630 --> 00:16:26.410
MANO MARKS: Do we have time?

00:16:26.410 --> 00:16:31.500
Do we have any YouTube questions
at this point?

00:16:31.500 --> 00:16:32.830
BRENDAN KENNY: I don't
believe so.

00:16:32.830 --> 00:16:33.400
MANO MARKS: We do.

00:16:33.400 --> 00:16:34.450
We have some YouTube
questions.

00:16:34.450 --> 00:16:34.845
BRENDAN KENNY: Oh, we do.

00:16:34.845 --> 00:16:35.240
I'm just kidding.

00:16:35.240 --> 00:16:37.590
MANO MARKS: OK, why
don't we take--

00:16:37.590 --> 00:16:39.570
BRENDAN KENNY: Yeah, so
let's take a look.

00:16:39.570 --> 00:16:43.420
So "what were the names of
those JS libraries?"

00:16:43.420 --> 00:16:45.370
MANO MARKS: So JSTS--

00:16:45.370 --> 00:16:47.840
BRENDAN KENNY: We'll link them
in the comments when we post

00:16:47.840 --> 00:16:48.750
this video.

00:16:48.750 --> 00:16:49.550
But for now--

00:16:49.550 --> 00:16:55.080
MANO MARKS: JSTS for the
JavaScript Topology Suite.

00:16:55.080 --> 00:16:57.520
It's a port of the Java
Topology Suite.

00:16:57.520 --> 00:17:01.170
There is shape jut--

00:17:01.170 --> 00:17:08.670
shp.js and dbf.js, both of
which are on GitHub.

00:17:08.670 --> 00:17:12.910
And I think those are the only
ones that we've mentioned.

00:17:12.910 --> 00:17:14.810
There's the one we're working
on porting and when we get

00:17:14.810 --> 00:17:17.010
that out, but that's
but that's part of

00:17:17.010 --> 00:17:18.700
the old OpenGL code.

00:17:18.700 --> 00:17:19.410
BRENDAN KENNY: Right.

00:17:19.410 --> 00:17:21.925
MANO MARKS: It's a port
of old C code.

00:17:21.925 --> 00:17:25.099
Is there another question?

00:17:25.099 --> 00:17:26.349
BRENDAN KENNY: Yes.

00:17:28.990 --> 00:17:30.770
"Moral of the story-- maybe
better suited to points than

00:17:30.770 --> 00:17:33.340
lines?"

00:17:33.340 --> 00:17:34.240
MANO MARKS: Possibly.

00:17:34.240 --> 00:17:38.510
I mean, points are things that
we've played with and have

00:17:38.510 --> 00:17:42.350
been obviously really,
really powerful.

00:17:42.350 --> 00:17:47.590
But I think polygons, once we
get the triangulation right, I

00:17:47.590 --> 00:17:50.220
think that the polygons are
going to give you a lot more

00:17:50.220 --> 00:17:51.890
powerful representation
of the data.

00:17:51.890 --> 00:17:54.730
But yeah, I mean, clearly,
points and lines are less

00:17:54.730 --> 00:17:56.910
computationally difficult
than triangles.

00:17:56.910 --> 00:17:58.160
BRENDAN KENNY: Right.

00:18:00.000 --> 00:18:03.500
I mean, so yeah.

00:18:03.500 --> 00:18:05.400
I would say that they're
less difficult.

00:18:05.400 --> 00:18:07.350
You can filter on them
more easily because

00:18:07.350 --> 00:18:09.160
it's a discrete point.

00:18:09.160 --> 00:18:09.520
MANO MARKS: Right.

00:18:09.520 --> 00:18:11.480
BRENDAN KENNY: But if you
want to show an area,

00:18:11.480 --> 00:18:12.660
then there's nothing--

00:18:12.660 --> 00:18:15.455
you can try and do some kind
of heat map effect.

00:18:15.455 --> 00:18:16.950
But that's not always
appropriate.

00:18:16.950 --> 00:18:18.920
You know, If you want to show
the difference between

00:18:18.920 --> 00:18:21.540
neighboring zip codes,
sometimes that's the

00:18:21.540 --> 00:18:23.470
granularity of your data.

00:18:23.470 --> 00:18:25.710
MANO MARKS: Yeah.

00:18:25.710 --> 00:18:29.290
BRENDAN KENNY: So it really
depends on what you're doing.

00:18:29.290 --> 00:18:31.073
So I think that's the
only questions.

00:18:35.480 --> 00:18:37.240
BRENDAN KENNY: We'll check
back if there's any more

00:18:37.240 --> 00:18:38.700
questions on the video.

00:18:38.700 --> 00:18:43.200
We'll check back in the next day
or so for more comments.

00:18:43.200 --> 00:18:44.110
BRENDAN KENNY: Yeah,
that sounds good.

00:18:44.110 --> 00:18:44.910
MANO MARKS: Cool.

00:18:44.910 --> 00:18:48.260
Do we have time for your
live coding exercise?

00:18:48.260 --> 00:18:49.400
BRENDAN KENNY: Yeah,
I think so.

00:18:49.400 --> 00:18:50.840
MANO MARKS: All right.

00:18:50.840 --> 00:18:53.920
BRENDAN KENNY: So here what I'm
doing is showing you why

00:18:53.920 --> 00:18:58.890
we might want to do this sort
of thing in the browser.

00:18:58.890 --> 00:19:01.690
I'm thinking show
your code here.

00:19:01.690 --> 00:19:03.440
We don't need these.

00:19:03.440 --> 00:19:06.440
So what I'm doing is, I'm just
going to loop over these

00:19:06.440 --> 00:19:10.410
records, these zip codes, and
just change the colors live.

00:19:10.410 --> 00:19:20.510
And if I don't mess this up,
then oh, yes, right.

00:19:20.510 --> 00:19:22.180
So I'm just looping
over these.

00:19:22.180 --> 00:19:23.070
I'm taking the color.

00:19:23.070 --> 00:19:23.980
I'm turning them green.

00:19:23.980 --> 00:19:25.720
And then I need to do
canvasLayer.scheduleUpdate.

00:19:29.700 --> 00:19:34.450
So canvas layer, by default,
doesn't redraw the screen

00:19:34.450 --> 00:19:35.430
every time.

00:19:35.430 --> 00:19:37.310
Right now, I haven't moved
the map at all.

00:19:37.310 --> 00:19:38.710
There's no reason to redraw.

00:19:38.710 --> 00:19:43.690
So I can call schedule update,
and that will make it so.

00:19:43.690 --> 00:19:44.150
MANO MARKS: Right.

00:19:44.150 --> 00:19:46.776
And that, of course, requires
no server calls or anything.

00:19:46.776 --> 00:19:50.410
It's just happening right there
live in the browser.

00:19:50.410 --> 00:19:51.440
BRENDAN KENNY: And there's
no reason why

00:19:51.440 --> 00:19:52.310
this can't be dynamic.

00:19:52.310 --> 00:19:55.280
This doesn't have to
be a stack number.

00:19:55.280 --> 00:20:00.460
So I could do I divided by 100
and just make sure that that

00:20:00.460 --> 00:20:05.400
is kept at one.

00:20:05.400 --> 00:20:10.600
And now I can count up to full
green based on the index

00:20:10.600 --> 00:20:12.670
within that array.

00:20:12.670 --> 00:20:13.830
This is using the index.

00:20:13.830 --> 00:20:15.500
But this could very well
be population.

00:20:15.500 --> 00:20:16.910
This could be anything.

00:20:16.910 --> 00:20:17.890
And it doesn't have
to be green.

00:20:17.890 --> 00:20:20.440
It could be some combination
of colors.

00:20:20.440 --> 00:20:21.090
It could be polka dotted.

00:20:21.090 --> 00:20:22.790
It could be anything you want.

00:20:22.790 --> 00:20:26.470
But the point is that
it's pretty much

00:20:26.470 --> 00:20:28.630
instantaneous here.

00:20:28.630 --> 00:20:32.460
There's nothing holding you back
from anything you want,

00:20:32.460 --> 00:20:36.550
which is a pretty exciting
part of our WebGL.

00:20:36.550 --> 00:20:40.620
All right, so that gives
us an idea of where

00:20:40.620 --> 00:20:41.780
we are right now.

00:20:41.780 --> 00:20:44.900
Did you have any last thoughts
before we wrap up?

00:20:44.900 --> 00:20:45.660
MANO MARKS: No.

00:20:45.660 --> 00:20:47.190
We'll continue work on this.

00:20:47.190 --> 00:20:50.870
We'll push it out, push
out some changes.

00:20:50.870 --> 00:20:53.900
In the next couple weeks, we'll
push out some samples

00:20:53.900 --> 00:20:58.480
around this that you might be
interested in to monitor the

00:20:58.480 --> 00:21:02.290
Google+ page and the Google
GeoDevelopers blog.

00:21:02.290 --> 00:21:04.360
BRENDAN KENNY: Yeah, and when we
post the video, as we said,

00:21:04.360 --> 00:21:07.250
check the links in the video
description, and we'll post

00:21:07.250 --> 00:21:08.560
them on Google+, probably.

00:21:08.560 --> 00:21:10.810
You can check out different
libraries we talk about,

00:21:10.810 --> 00:21:14.950
including if you go to the Maps
V3 utility libraries, you

00:21:14.950 --> 00:21:16.250
can check out canvas layer.

00:21:16.250 --> 00:21:20.240
And it has some simple samples
in there to get you started.

00:21:20.240 --> 00:21:23.470
And we're eager to see what
people come up with.

00:21:23.470 --> 00:21:23.962
MANO MARKS: Yeah.

00:21:23.962 --> 00:21:24.946
BRENDAN KENNY: Cool.

00:21:24.946 --> 00:21:25.930
MANO MARKS: All right.

00:21:25.930 --> 00:21:26.260
BRENDAN KENNY: Thanks a lot.

00:21:26.260 --> 00:21:27.010
MANO MARKS: Thanks
a lot, guys.

00:21:27.010 --> 00:22:03.933
[MUSIC PLAYING]

