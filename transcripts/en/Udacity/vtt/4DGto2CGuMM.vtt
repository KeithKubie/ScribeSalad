WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
One of the cool features of our JavaScript interpreter

00:00:02.000 --> 00:00:06.000
is that it supports anonymous or nested functions.

00:00:06.000 --> 00:00:10.000
However, these features can be very hard to test, so let's try it out together.

00:00:10.000 --> 00:00:13.000
You'll recall this Python example from before

00:00:13.000 --> 00:00:19.000
where we had a nested function definition of greeter that we returned,

00:00:19.000 --> 00:00:23.000
and the final output of this program would be "hello" "gracie".

00:00:23.000 --> 00:00:25.000
I'm going to write this same program in JavaScript.

00:00:25.000 --> 00:00:30.000
Aside from some minor syntactic differences, the content is the same.

00:00:30.000 --> 00:00:35.000
We make a variable, greeting, initialize to "hola". Variable greeting is "hola".

00:00:35.000 --> 00:00:39.000
We're going to define this makegreeter function of 1 argument called greeting,

00:00:39.000 --> 00:00:43.000
define the makegreeter function of 1 argument called greeting.

00:00:43.000 --> 00:00:45.000
Then we're going to make this sort of nested function greeter

00:00:45.000 --> 00:00:51.000
that takes an argument, person, and here the local variable greeter is a function

00:00:51.000 --> 00:00:53.000
that takes an argument, person.

00:00:53.000 --> 00:00:58.000
So where in Python we used another def, in JavaScript we're using this function keyword.

00:00:58.000 --> 00:01:00.000
Argument person is the same.

00:01:00.000 --> 00:01:04.000
Instead of print we call write or document.write and we return the greeter.

00:01:04.000 --> 00:01:08.000
Sayhello is a variable of makegreeter("hello"),

00:01:08.000 --> 00:01:11.000
variable sayhello is the result of calling makegreeter on "hello"

00:01:11.000 --> 00:01:13.000
and then we do it at the end.

00:01:13.000 --> 00:01:15.000
So the real exciting part is here.

00:01:15.000 --> 00:01:22.000
In JavaScript you can use the word function to make a new function anywhere

00:01:22.000 --> 00:01:26.000
without really giving it a name, although we assigned it to the variable greeter

00:01:26.000 --> 00:01:28.000
almost immediately.

00:01:28.000 --> 00:01:32.000
So you can use it at the top level to make a function with a name,

00:01:32.000 --> 00:01:34.000
or you can use it lower down.

00:01:34.000 --> 00:01:37.000
See, here we just have function and then we're listing the arguments.

00:01:37.000 --> 00:01:39.000
We didn't put a name in here.

00:01:39.000 --> 00:01:41.000
This is sometimes called an anonymous function

00:01:41.000 --> 00:01:43.000
because it doesn't immediately have a name.

00:01:43.000 --> 00:01:47.000
So as a quiz, let's add support for those anonymous functions

00:01:47.000 --> 00:01:49.000
to our JavaScript interpreter.

00:01:49.000 --> 00:01:53.000
I'll write the first part, you fill in the key details.

00:01:53.000 --> 00:01:55.000
Anonymous functions are expressions.

00:01:55.000 --> 00:01:59.000
We know that since they can come on the right-hand side of something like this.

00:01:59.000 --> 00:02:03.000
Anything on the right-hand side of a var or an assignment statement is an expression.

00:02:03.000 --> 00:02:05.000
So there are a bunch of different types of expressions--

00:02:05.000 --> 00:02:08.000
numbers, strings, binary operators.

00:02:08.000 --> 00:02:10.000
Let's just handle the function part for now.

00:02:10.000 --> 00:02:14.000
So as a running example, let's say we have a function of 2 variables, x and y,

00:02:14.000 --> 00:02:17.000
that's going to return their sum.

00:02:17.000 --> 00:02:20.000
The abstract syntax tree we get for that will have function

00:02:20.000 --> 00:02:25.000
in this sort of identifier position telling us what this sort of node is,

00:02:25.000 --> 00:02:27.000
then it will have a list of the parameters,

00:02:27.000 --> 00:02:30.000
and then it will have the body list of statements.

00:02:30.000 --> 00:02:35.000
And what I'd like you to do for this quiz is fill in these 4 blanks.

00:02:35.000 --> 00:02:37.000
We want to return a particular value--

00:02:37.000 --> 00:02:40.000
value corresponding to a function.

00:02:40.000 --> 00:02:44.000
This is going to require you to think back to how we treated function definitions

00:02:44.000 --> 00:02:47.000
and function calls earlier in our interpreter.

00:02:47.000 --> 00:02:53.000
But here's a hint: A function was a for tuple containing the word function at the beginning

00:02:53.000 --> 00:02:58.000
and then also listing in some order the body, the environment, and the parameters.

00:02:58.000 --> 09:59:59.000
Fill it in.

