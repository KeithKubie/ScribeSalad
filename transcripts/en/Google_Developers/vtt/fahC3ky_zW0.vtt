WEBVTT
Kind: captions
Language: en

00:00:02.435 --> 00:00:06.331
[MUSIC PLAYING]

00:00:06.331 --> 00:00:07.420
FILIP: Hello.

00:00:07.420 --> 00:00:11.020
Welcome to "The Boring
Show," episode four.

00:00:11.020 --> 00:00:13.061
With me today is Matt.

00:00:13.061 --> 00:00:14.560
MATT: Andrew couldn't
make it today,

00:00:14.560 --> 00:00:17.290
so I'm the stopgap,
again, for this episode.

00:00:17.290 --> 00:00:17.790
FILIP: Yep.

00:00:17.790 --> 00:00:18.280
I'm Filip.

00:00:18.280 --> 00:00:18.946
I'm still Filip.

00:00:18.946 --> 00:00:20.710
I'm back from vacation.

00:00:20.710 --> 00:00:24.200
I don't know anything
about Flutter anymore.

00:00:24.200 --> 00:00:25.810
So this will be interesting.

00:00:25.810 --> 00:00:27.100
I forgot everything.

00:00:27.100 --> 00:00:29.260
MATT: You should see
what we did last week.

00:00:29.260 --> 00:00:32.990
FILIP: I did kind of see it.

00:00:32.990 --> 00:00:36.430
But yeah, it's all good.

00:00:36.430 --> 00:00:38.070
So we're going to--

00:00:38.070 --> 00:00:40.870
so just like a
refresher, "Boring Show"

00:00:40.870 --> 00:00:44.320
is here to kind of
show the development

00:00:44.320 --> 00:00:51.250
of Flutter apps in a way
that's not edited at all.

00:00:51.250 --> 00:00:55.300
So there's all the
errors, and warts,

00:00:55.300 --> 00:00:59.410
and everything is in, so
that you have a chance

00:00:59.410 --> 00:01:02.440
to see us fail in
a spectacular way,

00:01:02.440 --> 00:01:06.860
and maybe learn something how
we can recover, hopefully,

00:01:06.860 --> 00:01:09.100
of all these things.

00:01:09.100 --> 00:01:12.160
And you know, it's "Boring
Show" because it's long.

00:01:12.160 --> 00:01:15.110
It's often one hour.

00:01:15.110 --> 00:01:20.080
And what we're trying to do is,
for the last three episodes,

00:01:20.080 --> 00:01:22.390
we've been slowly--

00:01:22.390 --> 00:01:24.550
or actually, pretty fast.

00:01:24.550 --> 00:01:29.350
We spend three hours building
a Hacker News reader app.

00:01:29.350 --> 00:01:36.520
And since what I saw last
time, you guys went to--

00:01:36.520 --> 00:01:38.100
you already have networking in.

00:01:38.100 --> 00:01:38.730
Right?

00:01:38.730 --> 00:01:39.229
MATT: Yep.

00:01:39.229 --> 00:01:42.460
So what we did last time,
we took Built Value,

00:01:42.460 --> 00:01:44.760
and we wrapped--

00:01:44.760 --> 00:01:46.480
built our data classes
with those, which

00:01:46.480 --> 00:01:49.494
gave us JSON serialization.

00:01:49.494 --> 00:01:51.160
And so when we had
that, what we did was

00:01:51.160 --> 00:01:53.020
we quickly added
networking, which

00:01:53.020 --> 00:01:54.250
was pretty straightforward.

00:01:54.250 --> 00:01:57.160
And from there, we
went back to the UI,

00:01:57.160 --> 00:02:00.010
and we started to pull in
the data over the network,

00:02:00.010 --> 00:02:01.990
using a FutureBuilder
to pull it in.

00:02:01.990 --> 00:02:04.680
So now you are with the
app in its current state.

00:02:04.680 --> 00:02:08.165
You're able to get the
top stories, I believe.

00:02:08.165 --> 00:02:09.539
And you're able
to click on them.

00:02:09.539 --> 00:02:11.770
And then we used the
URL Launcher Package

00:02:11.770 --> 00:02:19.300
to let you fullscreen, actually,
browse the URL for each story.

00:02:19.300 --> 00:02:22.450
FILIP: And so, and it all works.

00:02:22.450 --> 00:02:24.830
Actually, as you can
see on my screen,

00:02:24.830 --> 00:02:27.790
we can read the stories.

00:02:27.790 --> 00:02:32.290
We can launch them in
whatever the system gives you

00:02:32.290 --> 00:02:36.810
as the web browser.

00:02:36.810 --> 00:02:38.800
So that's all great.

00:02:38.800 --> 00:02:41.350
I think we've accrued
for the past three

00:02:41.350 --> 00:02:43.090
episodes some technical debt.

00:02:43.090 --> 00:02:44.790
So that's what
we're going to fix.

00:02:44.790 --> 00:02:47.110
MATT: We accrued a lot of
technical debt last episode.

00:02:47.110 --> 00:02:48.370
Which now that you're
back, you can fix.

00:02:48.370 --> 00:02:49.036
So that's great.

00:02:49.036 --> 00:02:49.810
FILIP: No, no, no.

00:02:49.810 --> 00:02:51.790
I think for the whole thing.

00:02:51.790 --> 00:02:54.520
And that's an interesting
part, because nobody

00:02:54.520 --> 00:02:57.310
wants to deal with that,
especially not on video.

00:02:57.310 --> 00:03:03.600
But we'll try and fix some
of the most glaring issues.

00:03:03.600 --> 00:03:05.330
So that's the first part.

00:03:05.330 --> 00:03:09.850
And if we have time to
delve more into stuff,

00:03:09.850 --> 00:03:14.270
there's been a lot of you
asking for state management.

00:03:14.270 --> 00:03:18.190
How do know I work out-- how
do I not mix [? V-Logic ?]

00:03:18.190 --> 00:03:19.600
and business logic and all that?

00:03:19.600 --> 00:03:22.420
And so we're in the same set up.

00:03:22.420 --> 00:03:25.690
If you've seen the I/O talk
that we gave with Matt,

00:03:25.690 --> 00:03:27.340
that was about state management.

00:03:27.340 --> 00:03:29.110
So who else?

00:03:29.110 --> 00:03:29.610
All right.

00:03:29.610 --> 00:03:31.609
MATT: So that should be
pretty quick, because we

00:03:31.609 --> 00:03:32.920
know what we're doing.

00:03:32.920 --> 00:03:34.180
FILIP: And it won't.

00:03:34.180 --> 00:03:35.540
But we'll see that.

00:03:35.540 --> 00:03:36.040
So--

00:03:36.040 --> 00:03:36.924
MATT: All right.

00:03:36.924 --> 00:03:37.840
Where are we starting?

00:03:37.840 --> 00:03:39.760
FILIP: We're starting
with the technical debt.

00:03:39.760 --> 00:03:40.260
Right?

00:03:40.260 --> 00:03:40.760
MATT: OK.

00:03:40.760 --> 00:03:43.810
FILIP: So we started
this project way,

00:03:43.810 --> 00:03:48.760
way back in, I think, February,
when we recorded the first one.

00:03:48.760 --> 00:03:52.560
And at that time, new was still
a thing, so the keyword new.

00:03:52.560 --> 00:03:57.160
I just want to make sure that
we don't have new anywhere.

00:03:57.160 --> 00:03:59.780
And that's pretty--

00:03:59.780 --> 00:04:00.280
OK.

00:04:00.280 --> 00:04:03.570
So we don't have new here.

00:04:03.570 --> 00:04:05.990
This is all commented
out for some reason.

00:04:05.990 --> 00:04:08.047
MATT: Oh, that's the
old JSON parsing code.

00:04:08.047 --> 00:04:08.630
FILIP: Oh, OK.

00:04:08.630 --> 00:04:09.985
So let's just-- OK.

00:04:09.985 --> 00:04:15.190
Part of it is just deleted
things that we don't use.

00:04:15.190 --> 00:04:16.070
OK.

00:04:16.070 --> 00:04:16.839
Save, Delete.

00:04:20.140 --> 00:04:23.620
Did it do that?

00:04:23.620 --> 00:04:26.100
Looks like it didn't delete.

00:04:26.100 --> 00:04:28.291
MATT: Are you sure nothing
is still use in there?

00:04:28.291 --> 00:04:29.290
Because we have article.

00:04:29.290 --> 00:04:30.900
But where do we parse the--

00:04:30.900 --> 00:04:34.330
there was-- we
parse the original.

00:04:34.330 --> 00:04:36.145
There's a list of IDs
that come through.

00:04:36.145 --> 00:04:36.645
FILIP: Oh.

00:04:36.645 --> 00:04:38.920
MATT: So we might
still be using that.

00:04:38.920 --> 00:04:39.490
FILIP: Yeah.

00:04:39.490 --> 00:04:40.300
We are.

00:04:40.300 --> 00:04:43.420
And it's in the JSON test.

00:04:43.420 --> 00:04:44.170
OK.

00:04:44.170 --> 00:04:45.260
That's a good one.

00:04:45.260 --> 00:04:48.880
So we will delete that.

00:04:48.880 --> 00:04:50.440
And in JSON test--

00:04:55.580 --> 00:04:57.210
what did we--?

00:04:57.210 --> 00:04:58.290
Oh.

00:04:58.290 --> 00:05:01.740
This is all commented out.

00:05:01.740 --> 00:05:07.740
And this is actually
no longer here,

00:05:07.740 --> 00:05:11.920
because you put it into
article, which makes sense.

00:05:11.920 --> 00:05:12.420
MATT: Yep.

00:05:12.420 --> 00:05:13.890
So we're going to be using
the serializer, which

00:05:13.890 --> 00:05:15.150
comes from serializers.dart.

00:05:15.150 --> 00:05:16.500
FILIP: Yes.

00:05:16.500 --> 00:05:17.160
All right.

00:05:17.160 --> 00:05:20.250
So that fixes that.

00:05:20.250 --> 00:05:22.980
Let me see.

00:05:22.980 --> 00:05:24.760
OK.

00:05:24.760 --> 00:05:25.320
News.

00:05:25.320 --> 00:05:27.600
There should be no news here.

00:05:27.600 --> 00:05:29.130
We're still on-- OK.

00:05:29.130 --> 00:05:30.420
A lot of commented out stuff.

00:05:30.420 --> 00:05:33.610
Oh, I love deleting code.

00:05:33.610 --> 00:05:34.110
Cool.

00:05:37.650 --> 00:05:41.250
I'm just going to assume that
this is there for some reason

00:05:41.250 --> 00:05:42.810
that we don't need
to care about.

00:05:42.810 --> 00:05:44.655
MATT: So that's
for parsing the--

00:05:44.655 --> 00:05:46.530
because when you make
the first network call,

00:05:46.530 --> 00:05:49.500
it pulls back a
list of integer IDs.

00:05:49.500 --> 00:05:51.960
And wrapping that in Built
Value seemed like overkill,

00:05:51.960 --> 00:05:54.360
because it's just a
list of integer IDs.

00:05:54.360 --> 00:05:55.950
But when we parse
the article, we

00:05:55.950 --> 00:05:58.500
have constructed the
serializer automatically

00:05:58.500 --> 00:06:00.709
using Built Value,
because a ton of stuff.

00:06:00.709 --> 00:06:01.250
FILIP: Right.

00:06:01.250 --> 00:06:02.460
Right.

00:06:02.460 --> 00:06:03.330
Which is great.

00:06:03.330 --> 00:06:08.910
So I think I got rid
of all the news here.

00:06:08.910 --> 00:06:12.120
So that's great.

00:06:12.120 --> 00:06:13.720
So I'm going to commit.

00:06:19.610 --> 00:06:22.400
We didn't actually
get rid of comments.

00:06:22.400 --> 00:06:23.079
Delete stuff.

00:06:23.079 --> 00:06:23.870
MATT: Delete stuff.

00:06:23.870 --> 00:06:25.140
There we go.

00:06:25.140 --> 00:06:27.050
A very descriptive
GitHub comment.

00:06:27.050 --> 00:06:28.250
FILIP: Yes, yes, yes.

00:06:28.250 --> 00:06:29.630
You will need that.

00:06:29.630 --> 00:06:32.840
So that's news.

00:06:32.840 --> 00:06:36.260
Do we need to refactor
names of anything?

00:06:36.260 --> 00:06:41.690
So I'm pretty OK
with the article.

00:06:41.690 --> 00:06:44.720
I'm also OK with
serializers, obviously.

00:06:44.720 --> 00:06:47.180
We still have only
one widget, which is--

00:06:47.180 --> 00:06:48.810
MATT: So you have a list of--

00:06:48.810 --> 00:06:51.140
that [? prop ?] list
of IDs is probably

00:06:51.140 --> 00:06:54.876
being pulled automatically now.

00:06:54.876 --> 00:06:57.250
FILIP: I think it's not.

00:06:57.250 --> 00:06:59.020
I think we're
still-- because you

00:06:59.020 --> 00:07:01.850
see, I remember in
the last episode,

00:07:01.850 --> 00:07:04.009
you were also looking
at why nobody ever

00:07:04.009 --> 00:07:05.050
wins the car at the mall.

00:07:05.050 --> 00:07:05.650
MATT: Oh.

00:07:05.650 --> 00:07:06.525
We haven't actually--

00:07:06.525 --> 00:07:08.050
FILIP: So, yeah.

00:07:08.050 --> 00:07:08.650
Which is fine.

00:07:08.650 --> 00:07:11.990
We'll have that as
a to-do item today.

00:07:11.990 --> 00:07:12.490
MATT: Yeah.

00:07:12.490 --> 00:07:15.490
We should fix that up.

00:07:15.490 --> 00:07:17.780
FILIP: In terms of names,
I think we're fine.

00:07:17.780 --> 00:07:21.310
We don't have widgets
outside the MyApp.

00:07:21.310 --> 00:07:22.882
It can still be MyApp.

00:07:22.882 --> 00:07:25.090
MATT: Our tree's pretty
shallow at the moment anyway.

00:07:25.090 --> 00:07:26.050
FILIP: Yes, yes.

00:07:26.050 --> 00:07:26.770
Which is fine.

00:07:26.770 --> 00:07:28.450
That's great.

00:07:28.450 --> 00:07:29.380
Testing.

00:07:29.380 --> 00:07:32.860
So we have the JSON [INAUDIBLE].

00:07:32.860 --> 00:07:34.180
Let's run it.

00:07:36.880 --> 00:07:40.440
So there's at least two
things that will break now.

00:07:43.100 --> 00:07:43.600
All right.

00:07:43.600 --> 00:07:49.570
So the widget test is breaking,
because it isn't actually

00:07:49.570 --> 00:07:54.610
waiting for the data to
load from the network.

00:07:54.610 --> 00:07:57.610
We haven't instrumented the
app so that we can actually

00:07:57.610 --> 00:08:01.250
give it some things
not from the network.

00:08:01.250 --> 00:08:02.830
So even in that
test, we're actually

00:08:02.830 --> 00:08:08.350
asking for the network,
which we could fix, but let's

00:08:08.350 --> 00:08:11.070
not do that now.

00:08:11.070 --> 00:08:14.260
Let's just leave
it be, and we can

00:08:14.260 --> 00:08:16.840
maybe at the end of this
episode or in the next episode,

00:08:16.840 --> 00:08:19.305
we can instrument
it so that it works.

00:08:19.305 --> 00:08:19.805
MATT: OK.

00:08:19.805 --> 00:08:22.240
FILIP: The JSON, I'm a
little more worried about.

00:08:22.240 --> 00:08:26.720
So we have-- this works.

00:08:26.720 --> 00:08:28.330
So the parsed up stories works.

00:08:28.330 --> 00:08:29.290
That's great.

00:08:29.290 --> 00:08:30.910
This also works.

00:08:30.910 --> 00:08:35.020
This seems to have
a problem here.

00:08:35.020 --> 00:08:37.750
And that's that--
oh, we are actually

00:08:37.750 --> 00:08:45.160
assuming that the first article
that we get from the best

00:08:45.160 --> 00:08:50.500
stories will always be authored
by a D. Houston, which is not

00:08:50.500 --> 00:08:51.870
true.

00:08:51.870 --> 00:08:56.260
So that was never a good test.

00:08:56.260 --> 00:08:57.010
So let's--

00:08:59.492 --> 00:09:01.450
MATT: What you could do
here is we could simply

00:09:01.450 --> 00:09:03.420
check that some of these
fields are not null.

00:09:03.420 --> 00:09:04.320
FILIP: Exactly.

00:09:04.320 --> 00:09:05.150
Yes.

00:09:05.150 --> 00:09:07.910
Is not null.

00:09:07.910 --> 00:09:08.920
Right.

00:09:08.920 --> 00:09:15.200
So if I run it again, again,
the widget test will fail.

00:09:15.200 --> 00:09:19.820
But these should not fail.

00:09:19.820 --> 00:09:22.470
And another thing
that I want to do is--

00:09:22.470 --> 00:09:24.590
and I know you talked
about this before.

00:09:24.590 --> 00:09:29.160
But this might want
a longer timeout.

00:09:29.160 --> 00:09:31.430
I think that the
timeout for a test

00:09:31.430 --> 00:09:35.315
is something like
the default one is--

00:09:39.695 --> 00:09:43.181
what's the default timeout?

00:09:43.181 --> 00:09:45.340
I won't figure it out now.

00:09:45.340 --> 00:09:51.420
But it's probably shorter than
we want for a networking call.

00:09:51.420 --> 00:09:54.030
Also, networking
call in a unit test

00:09:54.030 --> 00:09:55.470
is probably not a great idea.

00:09:55.470 --> 00:09:57.030
MATT: No, you're talking
more integration [? test. ?]

00:09:57.030 --> 00:09:57.530
FILIP: Yes.

00:09:57.530 --> 00:09:58.070
But--

00:09:58.070 --> 00:09:59.736
MATT: But at least
get this one working.

00:09:59.736 --> 00:10:00.840
FILIP: Yes.

00:10:00.840 --> 00:10:02.670
And that's probably the best.

00:10:02.670 --> 00:10:06.060
Because normally, you
would do a different file,

00:10:06.060 --> 00:10:07.620
and there you would try this.

00:10:07.620 --> 00:10:10.980
It's definitely better
to have it in a test.

00:10:10.980 --> 00:10:16.070
I'm just going to do and
skip this one by default,

00:10:16.070 --> 00:10:19.230
so that our tests run faster.

00:10:19.230 --> 00:10:20.540
That's what I do normally.

00:10:20.540 --> 00:10:25.320
And if you want to, so like
on really long-running tests,

00:10:25.320 --> 00:10:32.050
you either just skip, and
then you do something like--

00:10:32.050 --> 00:10:35.310
so normally, you
do a Flutter test.

00:10:35.310 --> 00:10:36.860
Not Flutter rust.

00:10:36.860 --> 00:10:37.450
Flutter test.

00:10:37.450 --> 00:10:39.470
MATT: Have you been
writing rust code?

00:10:39.470 --> 00:10:40.950
FILIP: No.

00:10:40.950 --> 00:10:42.930
So this will fail,
and I'll add--

00:10:42.930 --> 00:10:45.240
if you want.

00:10:45.240 --> 00:10:47.940
But our two tests
that we wanted,

00:10:47.940 --> 00:10:50.430
two tests actually run through.

00:10:50.430 --> 00:10:51.600
That's great.

00:10:51.600 --> 00:10:53.850
And you see here--

00:10:53.850 --> 00:10:58.410
that's not very-- but so you
see that one of them failed.

00:10:58.410 --> 00:11:00.120
Two of them passed.

00:11:00.120 --> 00:11:02.920
And one of them was skipped.

00:11:02.920 --> 00:11:03.420
MATT: OK.

00:11:03.420 --> 00:11:05.160
So it skipped the one
that you marked as true,

00:11:05.160 --> 00:11:06.390
and the other one that's
failing is the widget

00:11:06.390 --> 00:11:08.765
test that we're going to fix
at some point in the future.

00:11:08.765 --> 00:11:10.800
FILIP: Yes.

00:11:10.800 --> 00:11:15.930
And I thought there
was a Skipped option.

00:11:15.930 --> 00:11:18.090
So Flutter test help.

00:11:22.440 --> 00:11:22.940
OK.

00:11:22.940 --> 00:11:25.630
I'm thinking about another one.

00:11:25.630 --> 00:11:27.730
But anyway, so it's
possible to say, hey,

00:11:27.730 --> 00:11:32.350
I want to also run
the skipped tests.

00:11:32.350 --> 00:11:39.390
What I can do is, if you
just do [? prop ?] run test,

00:11:39.390 --> 00:11:42.340
I think like this.

00:11:42.340 --> 00:11:44.320
Oh, I have another dot.

00:11:44.320 --> 00:11:47.841
Anyway, you have to
trust me for this one.

00:11:47.841 --> 00:11:48.340
All right.

00:11:48.340 --> 00:11:57.400
So with this, and I'm just going
to also maybe skip this one so

00:11:57.400 --> 00:11:58.719
that we can easily just--

00:11:58.719 --> 00:12:00.510
MATT: But we're going
to come back to this.

00:12:00.510 --> 00:12:01.639
FILIP: Yes.

00:12:01.639 --> 00:12:03.430
MATT: And again, best
practice that-- well,

00:12:03.430 --> 00:12:04.670
practice that I
certainly have done,

00:12:04.670 --> 00:12:06.280
is when I'm doing
network calls, I

00:12:06.280 --> 00:12:09.070
tend to just make some
random network calls,

00:12:09.070 --> 00:12:11.790
save the JSON in a
JSON file, add it

00:12:11.790 --> 00:12:14.050
in an Assets folder
for testing, and then

00:12:14.050 --> 00:12:15.970
I just use that for my tests.

00:12:15.970 --> 00:12:17.560
FILIP: Yes.

00:12:17.560 --> 00:12:20.910
MATT: Which is a lot better than
having to rely on your network

00:12:20.910 --> 00:12:22.180
being available all the time.

00:12:22.180 --> 00:12:22.840
FILIP: Yes.

00:12:22.840 --> 00:12:25.420
MATT: Cool, cool.

00:12:25.420 --> 00:12:27.640
FILIP: So we have
got all our tests

00:12:27.640 --> 00:12:29.660
working by skipping
the tests that broke.

00:12:29.660 --> 00:12:30.160
Great.

00:12:30.160 --> 00:12:30.659
OK.

00:12:30.659 --> 00:12:31.570
[LAUGHING]

00:12:31.570 --> 00:12:34.330
And that's how you deal
with technical debt.

00:12:34.330 --> 00:12:35.002
MATT: Yes.

00:12:35.002 --> 00:12:36.850
[LAUGHING]

00:12:36.850 --> 00:12:40.460
FILIP: I also-- I think
I had another one here.

00:12:40.460 --> 00:12:42.190
So we have the
parsed up stories.

00:12:42.190 --> 00:12:43.900
And I think what
you're doing here

00:12:43.900 --> 00:12:52.840
is, basically, you're
decoding this as if you

00:12:52.840 --> 00:12:55.090
didn't have parsed up stories.

00:12:55.090 --> 00:12:58.870
So what I'm going to do
here is just do that.

00:12:58.870 --> 00:13:00.190
MATT: Oh, OK.

00:13:00.190 --> 00:13:03.340
FILIP: And just a little one.

00:13:03.340 --> 00:13:04.210
So, OK.

00:13:04.210 --> 00:13:07.370
So another comment,
deal with tests.

00:13:11.860 --> 00:13:14.020
OK.

00:13:14.020 --> 00:13:16.850
Yeah, we did remove some
commented out files.

00:13:19.510 --> 00:13:25.400
Oh, one thing that I saw here
is that there is this line end

00:13:25.400 --> 00:13:28.780
comment that basically says,
OK, these are the types

00:13:28.780 --> 00:13:32.740
that we expect this to have.

00:13:32.740 --> 00:13:36.350
We could have this as an
enum value, for example.

00:13:36.350 --> 00:13:39.490
But I think it's fine
to have it as a string.

00:13:39.490 --> 00:13:43.810
I just think this could be
done as a document instead

00:13:43.810 --> 00:13:46.630
of a comment at the
end of the line.

00:13:46.630 --> 00:13:50.020
So another thing
about technical debts,

00:13:50.020 --> 00:13:52.330
often you don't have
as much documentation

00:13:52.330 --> 00:13:53.500
as you would like.

00:13:53.500 --> 00:13:57.380
I just wanted to introduce
the documents in Dart.

00:13:57.380 --> 00:13:58.870
Documents are great because--

00:13:58.870 --> 00:14:04.480
so, I'm not going to spend
too much time coming up

00:14:04.480 --> 00:14:06.400
with a good text.

00:14:06.400 --> 00:14:14.260
But this is the type of article.

00:14:14.260 --> 00:14:21.665
And then, it can be either--

00:14:21.665 --> 00:14:22.720
MATT: And of.

00:14:22.720 --> 00:14:24.385
FILIP: --any of these.

00:14:27.430 --> 00:14:32.650
And so what I want to show you
is now whenever you use article

00:14:32.650 --> 00:14:42.610
anywhere, like here, and
you're like, OK, so type,

00:14:42.610 --> 00:14:44.170
it will show up in your ID.

00:14:44.170 --> 00:14:45.430
Is this really small?

00:14:45.430 --> 00:14:52.940
So you can do a bunch of things
and reach comments, and all

00:14:52.940 --> 00:14:53.440
that.

00:14:53.440 --> 00:14:59.010
But what Dart has a
really good thing about

00:14:59.010 --> 00:15:00.970
is these documentation comments.

00:15:00.970 --> 00:15:02.830
And documentation
comments are just,

00:15:02.830 --> 00:15:04.900
you put them in
front of anything

00:15:04.900 --> 00:15:07.210
that you want to
document, and then

00:15:07.210 --> 00:15:11.290
you use three instead
of two slashes.

00:15:11.290 --> 00:15:14.020
MATT: So one thing we might want
to explore, maybe not today,

00:15:14.020 --> 00:15:18.197
but later, is that Built
Value has its own enum type.

00:15:18.197 --> 00:15:19.530
Or, sorry, not eunum type, but--

00:15:19.530 --> 00:15:20.321
FILIP: That's true.

00:15:20.321 --> 00:15:23.290
MATT: --support for building
an enum class, which gives you

00:15:23.290 --> 00:15:25.820
much richer functionality
than the out of the box

00:15:25.820 --> 00:15:29.020
enums from Dart.

00:15:29.020 --> 00:15:31.470
In fact, we were talking
to David Morgan, who

00:15:31.470 --> 00:15:34.090
wrote "The Library Today," and
he came from a Java background.

00:15:34.090 --> 00:15:36.900
So the support for
enums in Built Value

00:15:36.900 --> 00:15:40.420
is more like Java enums
in his Dart enums.

00:15:40.420 --> 00:15:42.760
It might well be suitable
here, because everything plays

00:15:42.760 --> 00:15:46.714
well together in Built Value.

00:15:46.714 --> 00:15:49.130
So maybe in the future, we
could look at swapping that out

00:15:49.130 --> 00:15:51.213
with an enum, and that
might make our life easier.

00:15:51.213 --> 00:15:52.390
FILIP: Yes, absolutely.

00:15:52.390 --> 00:15:54.950
MATT: Something to
consider for another time.

00:15:54.950 --> 00:15:56.010
FILIP: Yes.

00:15:56.010 --> 00:15:57.580
That's a really good idea.

00:15:57.580 --> 00:16:00.100
One thing that I also
wanted to mention

00:16:00.100 --> 00:16:03.490
is that I just
found out yesterday

00:16:03.490 --> 00:16:10.630
about this amazing tool
called json2builtvalue,

00:16:10.630 --> 00:16:13.876
which is done by--

00:16:13.876 --> 00:16:17.530
I forgot the name.

00:16:17.530 --> 00:16:20.050
By Rafal.

00:16:20.050 --> 00:16:22.810
And this is amazing, because--

00:16:22.810 --> 00:16:25.140
let's see if we can--

00:16:25.140 --> 00:16:29.140
this basically is, you
just put JSON here.

00:16:29.140 --> 00:16:35.560
And you say, oh, I want the
root dot object to be article.

00:16:35.560 --> 00:16:38.980
And you click Convert,
and suddenly you

00:16:38.980 --> 00:16:44.500
have just, like, all
the things that you guys

00:16:44.500 --> 00:16:46.210
did for 30 minutes.

00:16:46.210 --> 00:16:49.030
You have it right here.

00:16:49.030 --> 00:16:52.180
Obviously, it cannot detect
nullable fields and stuff like

00:16:52.180 --> 00:16:55.480
this, so you'll still need
to actually understand what

00:16:55.480 --> 00:16:56.260
you're doing.

00:16:56.260 --> 00:16:59.740
But this can really help a lot.

00:16:59.740 --> 00:17:03.443
And it already has
it to JSON from JSON.

00:17:03.443 --> 00:17:05.359
MATT: It gives you a lot
of the-- it gives you

00:17:05.359 --> 00:17:06.310
all the boiler plate.

00:17:06.310 --> 00:17:07.450
And you can tweak
this for nullable

00:17:07.450 --> 00:17:09.310
and not nullable and
whatnot afterwards.

00:17:09.310 --> 00:17:11.020
But Filip is really
trying to say

00:17:11.020 --> 00:17:14.500
that the 30 minutes of Built
Value that we sweated blood

00:17:14.500 --> 00:17:16.240
and tears over in
the last episode

00:17:16.240 --> 00:17:17.760
has been replaced
with a web app.

00:17:17.760 --> 00:17:19.060
FILIP: Yes, yes.

00:17:19.060 --> 00:17:21.900
You have been automated.

00:17:21.900 --> 00:17:23.560
Sorry.

00:17:23.560 --> 00:17:26.262
So, cool.

00:17:26.262 --> 00:17:27.470
So definitely check this out.

00:17:27.470 --> 00:17:30.580
And I think this
also is a nice way

00:17:30.580 --> 00:17:34.630
of showing that this
is built-in Dart,

00:17:34.630 --> 00:17:37.150
and Dart can do webs as well.

00:17:37.150 --> 00:17:45.250
So you can either go and see
how Rafal made this happen,

00:17:45.250 --> 00:17:49.220
but also, if you don't
want to just go and install

00:17:49.220 --> 00:17:52.300
a thing or whatever, you
can just go to the website

00:17:52.300 --> 00:17:54.339
and put this in,
and you're done.

00:17:54.339 --> 00:17:55.630
MATT: This is like "Inception."

00:17:55.630 --> 00:17:57.930
We have a web app
written in Dart

00:17:57.930 --> 00:18:00.670
to generate Dart code, which
is then used by Built Value

00:18:00.670 --> 00:18:02.280
to generate more Dart code.

00:18:02.280 --> 00:18:04.870
FILIP: Dart code that
then communicates

00:18:04.870 --> 00:18:06.910
with a web interface.

00:18:06.910 --> 00:18:08.540
MATT: And the
circle is complete.

00:18:08.540 --> 00:18:10.191
FILIP: Yes.

00:18:10.191 --> 00:18:10.690
All right.

00:18:10.690 --> 00:18:11.830
So OK.

00:18:15.580 --> 00:18:17.020
I hope this is
not underwhelming,

00:18:17.020 --> 00:18:21.940
but I'm pretty happy with the
state of our code base now.

00:18:21.940 --> 00:18:24.340
Obviously, we'd want
to document more.

00:18:24.340 --> 00:18:27.100
We'd want to make sure
that the tests actually

00:18:27.100 --> 00:18:28.890
do something and all that.

00:18:28.890 --> 00:18:33.790
But we're kind of in a place.

00:18:33.790 --> 00:18:38.080
Oh, I made this change, so
let me just put this here.

00:18:38.080 --> 00:18:41.800
So at docs.

00:18:41.800 --> 00:18:43.060
All right.

00:18:43.060 --> 00:18:46.600
So now, we are getting to
the meat of this episode,

00:18:46.600 --> 00:18:49.431
and that is state management.

00:18:49.431 --> 00:18:49.930
MATT: OK.

00:18:49.930 --> 00:18:51.870
So we're going to
play with streams.

00:18:51.870 --> 00:18:52.850
FILIP: That's right.

00:18:52.850 --> 00:18:53.130
Yeah.

00:18:53.130 --> 00:18:53.630
MATT: OK.

00:18:53.630 --> 00:18:54.670
Cool.

00:18:54.670 --> 00:18:55.536
So set the stage.

00:18:55.536 --> 00:18:56.410
Why do we need state?

00:18:56.410 --> 00:18:58.550
What are we going to be doing?

00:18:58.550 --> 00:19:04.210
FILIP: So we currently,
as this is implemented,

00:19:04.210 --> 00:19:10.120
we have our business logic
right inside our widget.

00:19:10.120 --> 00:19:13.330
MATT: We're making the network
call inside our widget.

00:19:13.330 --> 00:19:17.200
We're using a FutureBuilder,
then, to handle all that.

00:19:17.200 --> 00:19:22.810
So basically our UI and our
network code is just munged

00:19:22.810 --> 00:19:25.156
together into this
big main .dart file.

00:19:25.156 --> 00:19:25.780
FILIP: Correct.

00:19:25.780 --> 00:19:27.490
Yes.

00:19:27.490 --> 00:19:30.760
Also, it looks like--

00:19:30.760 --> 00:19:36.810
it's also a bit less testable
now, because the app doesn't--

00:19:36.810 --> 00:19:38.600
well, it depends on networking.

00:19:38.600 --> 00:19:42.820
So that's why we have all these
problems with the widget test.

00:19:42.820 --> 00:19:48.570
And it's just nicer to
have things separate.

00:19:48.570 --> 00:19:49.450
MATT: OK.

00:19:49.450 --> 00:19:51.580
FILIP: So that's what
we're going to do.

00:19:51.580 --> 00:19:58.810
We're going to use BLoC, which
we talked about on our talk

00:19:58.810 --> 00:20:01.540
at I/O. We could
do anything else.

00:20:01.540 --> 00:20:03.700
We could actually
go with set state.

00:20:03.700 --> 00:20:06.845
We could go with
inherited widget.

00:20:06.845 --> 00:20:08.820
MATT: We could go
with scoped model.

00:20:08.820 --> 00:20:11.440
We could go with Redux.

00:20:11.440 --> 00:20:13.571
But we're going to try
the BLoC stream method.

00:20:13.571 --> 00:20:14.320
FILIP: Yeah, Yeah.

00:20:14.320 --> 00:20:19.030
I think it makes a lot of
sense, especially here, where

00:20:19.030 --> 00:20:23.830
the actual thing
that you see here

00:20:23.830 --> 00:20:27.110
is more or less a
stream of use, really.

00:20:27.110 --> 00:20:27.860
MATT: That's true.

00:20:27.860 --> 00:20:29.770
FILIP: So OK.

00:20:29.770 --> 00:20:32.560
So we are going to do that.

00:20:32.560 --> 00:20:37.660
And again, this is where I'm
going to be a little lost,

00:20:37.660 --> 00:20:43.600
because I literally haven't
done this for weeks now.

00:20:43.600 --> 00:20:49.140
So we're going to have
a Hacker News BLoC.

00:20:49.140 --> 00:20:54.220
So how I'm going to do
this is we will only

00:20:54.220 --> 00:21:02.680
have one BLoC, which will
manage the state of, basically,

00:21:02.680 --> 00:21:04.420
everything--

00:21:04.420 --> 00:21:06.340
the content that we're showing.

00:21:06.340 --> 00:21:08.540
So it will cache.

00:21:08.540 --> 00:21:10.810
So it will do the
network requests.

00:21:10.810 --> 00:21:13.390
It will cache them.

00:21:13.390 --> 00:21:15.790
It will-- what else can they do?

00:21:18.970 --> 00:21:23.110
Once we can implement
switching from top stories

00:21:23.110 --> 00:21:25.014
to news stories,
it can manage that.

00:21:25.014 --> 00:21:26.680
MATT: So it'll pull
different newsfeeds.

00:21:26.680 --> 00:21:28.720
FILIP: Yep, Yeah.

00:21:28.720 --> 00:21:31.859
MATT: So that, yeah, you are
kind of mixing responsibilities

00:21:31.859 --> 00:21:32.650
a little bit there.

00:21:32.650 --> 00:21:35.454
But because first cut, we're
going to keep things simple,

00:21:35.454 --> 00:21:37.120
we're going to have
just one [? BLoC. ?]

00:21:37.120 --> 00:21:40.330
FILIP: Yes, yes.

00:21:40.330 --> 00:21:45.220
And as you may
know from our talk,

00:21:45.220 --> 00:21:48.460
BLoC is a pretty simple class.

00:21:48.460 --> 00:21:50.620
And there are some
rules that you

00:21:50.620 --> 00:21:54.740
need to deal with, with BLoC.

00:21:54.740 --> 00:21:59.170
The basic ones are all
the outputs are streams,

00:21:59.170 --> 00:22:01.480
and all the inputs
are also streams.

00:22:01.480 --> 00:22:05.159
So there's no synchronous
communication stream.

00:22:05.159 --> 00:22:06.325
MATT: Stream in, stream out.

00:22:06.325 --> 00:22:06.640
FILIP: Yeah.

00:22:06.640 --> 00:22:07.556
Stream in, stream out.

00:22:07.556 --> 00:22:08.860
Nice.

00:22:08.860 --> 00:22:18.775
So this all going to be
called the HackerNewsBloc.

00:22:21.950 --> 00:22:27.470
And so we're going
to have as subject--

00:22:27.470 --> 00:22:30.490
so output of articles.

00:22:30.490 --> 00:22:32.210
Yes?

00:22:32.210 --> 00:22:32.830
OK.

00:22:32.830 --> 00:22:34.810
So--

00:22:34.810 --> 00:22:36.810
MATT: Why don't you talk
a little bit about what

00:22:36.810 --> 00:22:40.000
a BehaviorSubject
is, and tell me

00:22:40.000 --> 00:22:43.040
why that isn't a
stream controller.

00:22:43.040 --> 00:22:43.660
FILIP: Oh, OK.

00:22:46.630 --> 00:22:49.930
MATT: Because, typically, with a
stream, when I'm setting it up,

00:22:49.930 --> 00:22:51.470
I would create a
stream controller.

00:22:51.470 --> 00:22:53.560
And a stream controller
would give me

00:22:53.560 --> 00:22:55.600
a reference to a stream,
but it would also

00:22:55.600 --> 00:22:58.570
give me an Add method to
add things into the stream.

00:22:58.570 --> 00:22:59.380
FILIP: That's true.

00:22:59.380 --> 00:23:00.880
MATT: But you've got this
BehaviorSubject thing,

00:23:00.880 --> 00:23:02.350
which does something different?

00:23:02.350 --> 00:23:03.160
FILIP: Yes.

00:23:03.160 --> 00:23:10.690
So the nice thing and also
a problem with streams

00:23:10.690 --> 00:23:14.740
is that they're asynchronous,
while some things, especially

00:23:14.740 --> 00:23:17.860
the [INAUDIBLE] method in
Flutter is synchronous.

00:23:17.860 --> 00:23:22.990
And so using a stream
control would totally work,

00:23:22.990 --> 00:23:24.730
but there would be one problem.

00:23:24.730 --> 00:23:34.570
And that is that if there's a
change, for example, if Flutter

00:23:34.570 --> 00:23:37.900
now builds something
and suddenly

00:23:37.900 --> 00:23:44.410
wants to show a page
full of the articles,

00:23:44.410 --> 00:23:49.720
it will be empty until something
about the articles changes.

00:23:49.720 --> 00:23:53.630
What BehaviorSubject does is
whenever someone new listens

00:23:53.630 --> 00:23:58.795
to it, the first thing it does,
it will send you the latest--

00:24:02.000 --> 00:24:04.380
MATT: The last element
pushed into the stream.

00:24:04.380 --> 00:24:04.880
FILIP: Yes.

00:24:04.880 --> 00:24:05.410
Yes.

00:24:05.410 --> 00:24:09.880
MATT: So stream controller,
I have to wait for something

00:24:09.880 --> 00:24:11.870
to actively come
through the stream.

00:24:11.870 --> 00:24:14.950
BehaviorSubject, as
long as one thing

00:24:14.950 --> 00:24:16.840
has come through the
stream, I will always

00:24:16.840 --> 00:24:20.500
get the previous value when I
start to listen on that stream.

00:24:20.500 --> 00:24:22.750
FILIP: Correct.

00:24:22.750 --> 00:24:24.429
I just realized that we need--

00:24:24.429 --> 00:24:26.220
MATT: So where can we
find BehaviorSubject?

00:24:26.220 --> 00:24:26.770
FILIP: Yes.

00:24:26.770 --> 00:24:31.880
MATT: Because it's
not part of the SDK.

00:24:31.880 --> 00:24:33.020
FILIP: It's not.

00:24:33.020 --> 00:24:34.300
It's in--

00:24:34.300 --> 00:24:35.547
MATT: RxDart.

00:24:35.547 --> 00:24:36.130
FILIP: RxDart.

00:24:36.130 --> 00:24:37.100
Yes.

00:24:37.100 --> 00:24:39.670
Thank you.

00:24:39.670 --> 00:24:40.430
See?

00:24:40.430 --> 00:24:43.740
This is why you
have applications.

00:24:43.740 --> 00:24:47.720
RxDart is now at 0.18.

00:24:47.720 --> 00:24:51.780
So that's what we're going
to add to our pubspec.yaml.

00:24:54.970 --> 00:24:56.700
RxDart.

00:24:56.700 --> 00:25:00.060
We don't need this.

00:25:00.060 --> 00:25:00.855
And get packages.

00:25:04.060 --> 00:25:04.560
Right.

00:25:07.790 --> 00:25:08.290
OK.

00:25:08.290 --> 00:25:15.094
So we'll get, for some
reason, it doesn't--

00:25:15.094 --> 00:25:17.931
RxDart.

00:25:17.931 --> 00:25:18.430
OK.

00:25:18.430 --> 00:25:19.100
MATT: Perfect.

00:25:19.100 --> 00:25:20.058
FILIP: So we have that.

00:25:20.058 --> 00:25:22.910
So this is one thing.

00:25:22.910 --> 00:25:23.410
OK.

00:25:23.410 --> 00:25:24.940
So let's just have that.

00:25:24.940 --> 00:25:29.820
Let's just have one
output and no input.

00:25:29.820 --> 00:25:34.960
We'll add an input shortly, but
this is all we need for now.

00:25:34.960 --> 00:25:37.150
MATT: So, absolutely.

00:25:37.150 --> 00:25:42.040
But I see here that you're
streaming a list of articles,

00:25:42.040 --> 00:25:43.540
which means that
in the stream, it's

00:25:43.540 --> 00:25:45.310
not going to be one
article at the time,

00:25:45.310 --> 00:25:47.110
it's going to be a
list of articles.

00:25:47.110 --> 00:25:50.670
Why aren't we just getting
one article after the other?

00:25:50.670 --> 00:25:51.290
FILIP: Yeah.

00:25:51.290 --> 00:25:53.300
So that would be
really hard for us.

00:25:53.300 --> 00:25:56.050
We would have to have some kind
of business logic in our views

00:25:56.050 --> 00:25:59.410
again to kind of
put it all together.

00:25:59.410 --> 00:26:01.600
Because it wouldn't be--

00:26:01.600 --> 00:26:05.410
you would never be sure when--

00:26:05.410 --> 00:26:08.040
the list of articles
tells you, this

00:26:08.040 --> 00:26:12.250
is all the articles from top
to bottom, how they are sorted.

00:26:12.250 --> 00:26:16.320
And at the end of the
list, this is the end.

00:26:16.320 --> 00:26:19.300
While if it was just
a stream of article,

00:26:19.300 --> 00:26:22.780
you would never know, oh,
is this replacing the one

00:26:22.780 --> 00:26:25.250
at the bottom, or at the top?

00:26:25.250 --> 00:26:29.260
So that's why you want a
list, or something similar.

00:26:29.260 --> 00:26:32.710
MATT: And this is following
one of the rules of BLoC, which

00:26:32.710 --> 00:26:38.770
is pass to the UI what you're
going to represent in the UI,

00:26:38.770 --> 00:26:42.377
and not have to have additional
business logic in the UI.

00:26:42.377 --> 00:26:43.210
FILIP: That's right.

00:26:43.210 --> 00:26:43.870
Yes, yes.

00:26:43.870 --> 00:26:48.910
You don't want to force your
UI logic to do work for you.

00:26:48.910 --> 00:26:52.080
You basically want to
push exactly what it needs

00:26:52.080 --> 00:26:53.810
and nothing else, nothing more.

00:26:53.810 --> 00:26:56.375
MATT: So while this may seem
a little counter-intuitive

00:26:56.375 --> 00:26:58.000
or a little inelegant,
this is actually

00:26:58.000 --> 00:27:00.670
going to make our UI code
very, very, very clean.

00:27:00.670 --> 00:27:03.310
And there's nothing
stopping you from also

00:27:03.310 --> 00:27:06.970
having a stream of articles
in the BLoC as well,

00:27:06.970 --> 00:27:09.280
if there was a good
reason for doing that.

00:27:09.280 --> 00:27:11.530
FILIP: Yes.

00:27:11.530 --> 00:27:12.640
OK.

00:27:12.640 --> 00:27:18.820
So we are going to rip
out things from here.

00:27:22.082 --> 00:27:25.019
Think that's what we need.

00:27:29.510 --> 00:27:35.070
So we'll keep the
hardcoded IDs for now.

00:27:35.070 --> 00:27:37.810
So what you want to--

00:27:37.810 --> 00:27:42.920
yeah, so when we get
to this getArticle,

00:27:42.920 --> 00:27:46.730
instead of just
parsing and returning,

00:27:46.730 --> 00:27:50.690
it will actually populate
the list of articles.

00:27:50.690 --> 00:27:58.010
We can have, basically, a cache,
so that we don't always go to--

00:27:58.010 --> 00:27:59.720
so what I'm going
to do is, there's

00:27:59.720 --> 00:28:03.530
going to be a final variable
that is going to be private,

00:28:03.530 --> 00:28:06.670
and it's going to
be called articles.

00:28:06.670 --> 00:28:10.210
And that's going to be this.

00:28:10.210 --> 00:28:17.660
You know, it's just going
to keep things simple.

00:28:17.660 --> 00:28:20.150
And it's a list of articles.

00:28:20.150 --> 00:28:20.650
MATT: OK.

00:28:20.650 --> 00:28:23.150
So that initializes an
empty list of articles.

00:28:23.150 --> 00:28:25.670
FILIP: Yes.

00:28:25.670 --> 00:28:31.500
And then, oh, and we have
more business logic here.

00:28:31.500 --> 00:28:32.690
We have this.

00:28:32.690 --> 00:28:36.530
So we're mapping
over IDs, and then

00:28:36.530 --> 00:28:39.380
getting articles
for each of the IDs.

00:28:39.380 --> 00:28:39.880
MATT: Yeah.

00:28:39.880 --> 00:28:41.255
And what we want
to do is we just

00:28:41.255 --> 00:28:44.180
want to use a stream builder to
listen for the list of articles

00:28:44.180 --> 00:28:45.207
when it's ready.

00:28:45.207 --> 00:28:46.040
FILIP: That's right.

00:28:52.280 --> 00:29:00.740
So I'm just going to have a
method here that gets all--

00:29:03.470 --> 00:29:05.325
getArticle-- that's weird.

00:29:05.325 --> 00:29:05.950
Get a list of--

00:29:05.950 --> 00:29:07.690
ugh.

00:29:07.690 --> 00:29:09.060
You know what, getArticles.

00:29:09.060 --> 00:29:11.180
MATT: There you go.

00:29:11.180 --> 00:29:15.770
FILIP: And that's
going to get these IDs.

00:29:15.770 --> 00:29:18.170
And let's do it functionally.

00:29:18.170 --> 00:29:23.330
So it will map over
them, over the ID itself.

00:29:23.330 --> 00:29:24.530
getArticleID.

00:29:30.830 --> 00:29:34.190
MATT: So we're going to
have a slight problem

00:29:34.190 --> 00:29:38.990
here, because getArticleID
is asynchronous.

00:29:38.990 --> 00:29:40.060
FILIP: Yes.

00:29:40.060 --> 00:29:44.450
So this is now--

00:29:44.450 --> 00:29:49.080
it's an iterable of
future of article.

00:29:49.080 --> 00:29:50.930
MATT: And I think
there's a way in map

00:29:50.930 --> 00:29:56.085
to wait for map to finish
after all the futures finish.

00:29:56.085 --> 00:29:56.585
FILIP: Yes.

00:29:56.585 --> 00:29:57.085
Yes.

00:29:57.085 --> 00:29:59.700
MATT: I cannot remember
how to do that.

00:29:59.700 --> 00:30:03.750
FILIP: That's why--
so this is the first--

00:30:06.815 --> 00:30:09.080
expand.

00:30:09.080 --> 00:30:11.675
MATT: Because, can you await--

00:30:11.675 --> 00:30:13.050
FILIP: Yeah, that
would be great.

00:30:13.050 --> 00:30:14.300
MATT: --in the map?

00:30:14.300 --> 00:30:16.730
Map ID await getArticleID?

00:30:21.131 --> 00:30:22.598
FILIP: Maybe not.

00:30:22.598 --> 00:30:24.554
MATT: Let me have
a quick look here.

00:30:33.860 --> 00:30:35.050
FILIP: So I know--

00:30:35.050 --> 00:30:41.000
I think there is future wait.

00:30:41.000 --> 00:30:41.540
Right.

00:30:41.540 --> 00:30:44.870
So if you have an
iterable of futures,

00:30:44.870 --> 00:30:47.360
and you want to
wait all of them,

00:30:47.360 --> 00:30:51.590
you can do a future wait,
which is a static method

00:30:51.590 --> 00:30:53.420
on the future class.

00:30:53.420 --> 00:31:00.420
And it will return you a
future with a list of things.

00:31:00.420 --> 00:31:02.410
So if we do--

00:31:02.410 --> 00:31:03.200
OK, you know what?

00:31:06.280 --> 00:31:11.430
So future articles is this.

00:31:14.630 --> 00:31:16.650
We'll wait for the
future articles.

00:31:21.630 --> 00:31:28.460
So final articles is this.

00:31:28.460 --> 00:31:30.920
And then we'll just return it.

00:31:30.920 --> 00:31:34.520
MATT: The articles
is going to be in--

00:31:34.520 --> 00:31:38.800
so future articles returns
an iterator, not a list.

00:31:38.800 --> 00:31:39.300
Because--

00:31:39.300 --> 00:31:40.091
FILIP: That's true.

00:31:40.091 --> 00:31:43.782
But fortunately, this
takes an iterable.

00:31:43.782 --> 00:31:44.740
MATT: Oh, that's handy.

00:31:44.740 --> 00:31:45.170
FILIP: Yeah.

00:31:45.170 --> 00:31:46.836
MATT: So you don't
have to do any of the

00:31:46.836 --> 00:31:49.940
to list that you typically have
to do when you're using lists.

00:31:49.940 --> 00:31:50.640
FILIP: Yes, yes.

00:31:50.640 --> 00:31:51.140
Yeah.

00:31:51.140 --> 00:31:51.931
MATT: In list view.

00:31:51.931 --> 00:31:52.910
That's nice.

00:31:52.910 --> 00:31:56.160
FILIP: So I think
this should work.

00:31:56.160 --> 00:31:58.230
So now we have that.

00:31:58.230 --> 00:32:03.960
Oh, we didn't--
we will need this.

00:32:10.723 --> 00:32:11.223
OK.

00:32:15.401 --> 00:32:15.900
OK.

00:32:15.900 --> 00:32:16.890
So we have this.

00:32:16.890 --> 00:32:18.180
We have getArticles.

00:32:18.180 --> 00:32:25.050
And now, all we need to do
is we are going to shoot--

00:32:25.050 --> 00:32:27.600
when you create the
BLoC, it's going

00:32:27.600 --> 00:32:31.590
to shoot this getArticles.

00:32:31.590 --> 00:32:34.165
MATT: So getArticles
is going to give us a--

00:32:34.165 --> 00:32:35.040
FILIP: You know what?

00:32:35.040 --> 00:32:41.637
We can actually-- it's going to
give us the list of articles.

00:32:41.637 --> 00:32:42.220
You know what?

00:32:42.220 --> 00:32:44.540
We can actually do this.

00:32:44.540 --> 00:32:46.470
It doesn't need to
give us anything.

00:32:46.470 --> 00:32:49.620
It will just-- void.

00:32:49.620 --> 00:32:52.030
And it will just assign
this to articles.

00:32:56.590 --> 00:32:58.940
So it just updates, so maybe--

00:32:58.940 --> 00:33:00.790
MATT: OK.

00:33:00.790 --> 00:33:03.640
But you'll still need to
know when to push articles

00:33:03.640 --> 00:33:04.900
into the stream.

00:33:04.900 --> 00:33:05.620
FILIP: Yes.

00:33:05.620 --> 00:33:11.140
So I'm just going to bail
out of this by using then--

00:33:11.140 --> 00:33:11.640
wait--

00:33:11.640 --> 00:33:14.790
MATT: Has no longer future.

00:33:14.790 --> 00:33:16.960
Because you'll probably
want to return to future,

00:33:16.960 --> 00:33:18.325
just so you know that
that's completed.

00:33:18.325 --> 00:33:19.116
FILIP: That's true.

00:33:19.116 --> 00:33:19.870
Yes.

00:33:19.870 --> 00:33:22.870
So I'm going to return
a future of null.

00:33:22.870 --> 00:33:25.240
And now I can--

00:33:25.240 --> 00:33:31.450
then, that's going to be a
null value, so that's fine.

00:33:31.450 --> 00:33:35.590
And then what we're
going to do is

00:33:35.590 --> 00:33:40.240
we're going to add this
to the article subject.

00:33:40.240 --> 00:33:43.250
MATT: You're going to
push the list of articles

00:33:43.250 --> 00:33:47.150
into the stream.

00:33:47.150 --> 00:33:48.960
Yeah.

00:33:48.960 --> 00:33:49.900
FILIP: Right.

00:33:49.900 --> 00:33:54.220
So if we were really
clean, we would make this--

00:33:54.220 --> 00:33:57.940
maybe like, wrap it in
an unmodifiable list.

00:33:57.940 --> 00:34:04.910
Because this makes it push the
actual articles list to the--

00:34:04.910 --> 00:34:05.410
MATT: Yes.

00:34:05.410 --> 00:34:07.750
So people could actually
modify the list,

00:34:07.750 --> 00:34:09.790
and then that would modify
the list everywhere.

00:34:09.790 --> 00:34:10.290
FILIP: Yes.

00:34:10.290 --> 00:34:11.998
MATT: This should be a--

00:34:11.998 --> 00:34:13.340
FILIP: Unmodifiable.

00:34:13.340 --> 00:34:14.560
So let's do this.

00:34:14.560 --> 00:34:22.600
Unmodifiable of articles.

00:34:22.600 --> 00:34:26.980
This is not, like, super
performant, I guess,

00:34:26.980 --> 00:34:29.739
because we're making a copy.

00:34:29.739 --> 00:34:36.880
But I think there's an
unmodifiable view of the list,

00:34:36.880 --> 00:34:37.870
if I'm not mistaken.

00:34:42.580 --> 00:34:46.719
MATT: Built collection has
immutable collections as well,

00:34:46.719 --> 00:34:48.679
which would be an option.

00:34:48.679 --> 00:34:49.670
FILIP: Right.

00:34:49.670 --> 00:34:50.860
Oh, no, no, no no.

00:34:50.860 --> 00:34:55.515
Dart collection actually
has unmodifiable list view.

00:34:55.515 --> 00:34:57.072
MATT: And that's a list--

00:34:57.072 --> 00:34:58.240
OK.

00:34:58.240 --> 00:35:01.040
FILIP: So that's
basically what we want.

00:35:01.040 --> 00:35:03.860
That's in dart collection.

00:35:07.234 --> 00:35:08.640
Dart collection.

00:35:12.800 --> 00:35:16.580
And so now we have this.

00:35:16.580 --> 00:35:20.000
It creates an unmodifiable
list backed by the source.

00:35:20.000 --> 00:35:22.950
So it's not going
to have a copy.

00:35:22.950 --> 00:35:25.900
It's just showing you this--

00:35:25.900 --> 00:35:26.570
MATT: OK.

00:35:26.570 --> 00:35:28.580
So it's not copying the
internals of the list.

00:35:28.580 --> 00:35:30.830
OK.

00:35:30.830 --> 00:35:35.570
OK, so theoretically,
now we have--

00:35:35.570 --> 00:35:40.700
when we create the BLoC, at some
point in the near future, when

00:35:40.700 --> 00:35:42.650
it's done all the
network pieces,

00:35:42.650 --> 00:35:46.700
it is going to pump an
unmodifiable list of articles

00:35:46.700 --> 00:35:51.430
into the stream, which
we can access through--

00:35:51.430 --> 00:35:53.810
FILIP: The articles.

00:35:53.810 --> 00:35:56.000
MATT: Which we can
[INAUDIBLE] through articles.

00:35:56.000 --> 00:35:56.708
FILIP: All right.

00:35:56.708 --> 00:35:58.040
So let's see if that works.

00:36:00.590 --> 00:36:02.930
MATT: Oh, we're going to
have to change a lot of this.

00:36:02.930 --> 00:36:04.290
FILIP: That's true.

00:36:04.290 --> 00:36:10.110
So one thing I want to do here
is I'm going to pass it down.

00:36:10.110 --> 00:36:15.740
So normally in our talk
at I/O, what we did was

00:36:15.740 --> 00:36:20.040
we had this inherited widget
which it provided the BLoCs

00:36:20.040 --> 00:36:22.400
to the widgets below.

00:36:22.400 --> 00:36:25.160
We're not going to do it
today, because we have

00:36:25.160 --> 00:36:26.840
a really shallow widget stream.

00:36:26.840 --> 00:36:31.136
So what we can do is
just put the block down

00:36:31.136 --> 00:36:32.510
through a
[? structure. ?] Right?

00:36:32.510 --> 00:36:36.110
MATT: So we're going
to make MyApp--

00:36:36.110 --> 00:36:38.180
so we're going to pass the--

00:36:38.180 --> 00:36:39.680
and this is the
BLoC to MyApp, which

00:36:39.680 --> 00:36:42.630
is going to pass an instance
of the BLoC to my homepage.

00:36:42.630 --> 00:36:51.748
FILIP: So final hnBloc
is HackerNewsBloc.

00:36:54.890 --> 00:36:57.940
And in the future--

00:36:57.940 --> 00:37:00.540
MATT: K. There's no K in BLoC.

00:37:00.540 --> 00:37:02.082
FILIP: Oh.

00:37:02.082 --> 00:37:04.870
Oh.

00:37:04.870 --> 00:37:06.190
Thank you.

00:37:06.190 --> 00:37:10.120
In the future, we would actually
provide some kind of networking

00:37:10.120 --> 00:37:13.091
to the HackerNewsBloc,
so we can even do that.

00:37:13.091 --> 00:37:13.590
Right?

00:37:13.590 --> 00:37:14.920
MATT: So we'd inject
some sort of--

00:37:14.920 --> 00:37:16.540
so we could make it
testable at that point.

00:37:16.540 --> 00:37:17.080
FILIP: Yes.

00:37:17.080 --> 00:37:17.802
MATT: OK.

00:37:17.802 --> 00:37:18.510
FILIP: All right.

00:37:18.510 --> 00:37:22.150
So MyApp doesn't
yet get this, so we

00:37:22.150 --> 00:37:26.980
need to create a constructor,
and that will take--

00:37:26.980 --> 00:37:29.266
I can use BLoC.

00:37:29.266 --> 00:37:30.770
Oh, you know what?

00:37:30.770 --> 00:37:33.506
Maybe we want to do this.

00:37:33.506 --> 00:37:38.865
final bloc, this.bloc.

00:37:41.740 --> 00:37:43.660
So now we have--

00:37:43.660 --> 00:37:45.134
oh, that's the app.

00:37:45.134 --> 00:37:47.800
MATT: And now we need to pass it
down into my home page as well.

00:37:47.800 --> 00:37:48.991
FILIP: Oh.

00:37:48.991 --> 00:37:49.490
All right.

00:37:49.490 --> 00:37:49.990
No problem.

00:37:49.990 --> 00:37:51.790
MATT: This is why
we would recommend

00:37:51.790 --> 00:37:54.070
for an app of any size
to use inherited widget,

00:37:54.070 --> 00:37:58.180
because we have the flattest
tree imaginable with two

00:37:58.180 --> 00:37:59.920
or three levels,
and already we're

00:37:59.920 --> 00:38:03.010
having to pass through
constructor by constructor.

00:38:03.010 --> 00:38:05.940
An inherited widget kind of
takes care of all that for you.

00:38:05.940 --> 00:38:07.523
But for the time
being, this is great.

00:38:09.560 --> 00:38:10.280
FILIP: OK, cool.

00:38:10.280 --> 00:38:12.920
So we have it now,
accessible from here.

00:38:17.650 --> 00:38:19.080
How do I--

00:38:19.080 --> 00:38:20.740
I'm going to--

00:38:20.740 --> 00:38:22.960
MATT: So our list
view, we're going

00:38:22.960 --> 00:38:26.379
to want to wrap our list
view in a stream builder.

00:38:26.379 --> 00:38:26.920
FILIP: Right.

00:38:26.920 --> 00:38:28.730
We have the build item here.

00:38:28.730 --> 00:38:29.230
OK.

00:38:29.230 --> 00:38:30.790
So I'm just going to do this.

00:38:33.870 --> 00:38:35.281
List view.

00:38:35.281 --> 00:38:35.780
Yes.

00:38:35.780 --> 00:38:36.355
You're right.

00:38:36.355 --> 00:38:38.480
MATT: Because, yeah, we'll
need to wrap the widget.

00:38:38.480 --> 00:38:39.688
FILIP: With a stream builder.

00:38:43.640 --> 00:38:47.460
I think I have-- oh, so, live
templates, by the way, very

00:38:47.460 --> 00:38:50.620
cool things in [INAUDIBLE].

00:38:50.620 --> 00:38:53.520
MATT: Oh, yeah, you
told me about this.

00:38:53.520 --> 00:39:01.880
FILIP: So I have one that's for
stream builders, S-T-M-B-L-D.

00:39:01.880 --> 00:39:08.310
And that's going to be a stream
builder of unmodifiable view

00:39:08.310 --> 00:39:09.740
of article.

00:39:09.740 --> 00:39:11.553
MATT: Does exactly what
it says on the tin.

00:39:11.553 --> 00:39:12.400
[LAUGHING]

00:39:12.400 --> 00:39:15.650
FILIP: The stream is BLoC--

00:39:15.650 --> 00:39:17.230
oh, no, no, it's in widget.

00:39:17.230 --> 00:39:18.870
Widget BLoC--

00:39:18.870 --> 00:39:19.540
MATT: Articles.

00:39:19.540 --> 00:39:21.270
FILIP: Articles.

00:39:21.270 --> 00:39:23.330
Initial data is nothing.

00:39:23.330 --> 00:39:27.210
MATT: Do we-- we do
need initial data.

00:39:27.210 --> 00:39:28.080
FILIP: Yeah, I mean.

00:39:28.080 --> 00:39:28.990
Well, actually--

00:39:28.990 --> 00:39:31.677
MATT: Theoretically, we
don't, because we can--

00:39:31.677 --> 00:39:32.760
well, we could leave that.

00:39:32.760 --> 00:39:34.634
But one way we could do
it is in the builder,

00:39:34.634 --> 00:39:38.190
we could check to see if
the connection is waiting.

00:39:38.190 --> 00:39:40.610
Then, we know that it's
actually streaming data.

00:39:40.610 --> 00:39:42.739
FILIP: Right, right.

00:39:42.739 --> 00:39:44.280
MATT: But let's keep
going with this.

00:39:44.280 --> 00:39:46.680
FILIP: Yes.

00:39:46.680 --> 00:39:54.540
So we have a list view, and
the children of it are--

00:39:54.540 --> 00:39:56.160
let's do it functionally.

00:39:56.160 --> 00:39:59.768
So we have the snapshot.

00:39:59.768 --> 00:40:01.600
MATT: Mm-hm.

00:40:01.600 --> 00:40:02.600
.data.

00:40:02.600 --> 00:40:05.070
FILIP: Data.

00:40:05.070 --> 00:40:08.940
Oh, I'm just going
to say, this is--

00:40:08.940 --> 00:40:09.810
oh.

00:40:09.810 --> 00:40:14.190
MATT: Whereas you don't have
to put the type explicitly in,

00:40:14.190 --> 00:40:16.910
it helps the ID an
awful lot if you do.

00:40:16.910 --> 00:40:17.410
FILIP: Yeah.

00:40:22.810 --> 00:40:25.870
MATT: Oh, it's the whole thing.

00:40:25.870 --> 00:40:27.160
FILIP: Yeah, so.

00:40:30.090 --> 00:40:33.320
Unmodifiable list
view of article.

00:40:39.940 --> 00:40:41.594
Well, OK.

00:40:41.594 --> 00:40:43.070
MATT: We can tidy that up.

00:40:43.070 --> 00:40:50.240
FILIP: And then the data
maps to some widgets.

00:40:50.240 --> 00:40:53.250
And that could
just be buildItem.

00:40:53.250 --> 00:40:53.750
Right?

00:40:53.750 --> 00:40:57.950
So we're passing a function,
and that's that, I think.

00:40:57.950 --> 00:41:01.280
MATT: There is a point,
though, with-- so it's

00:41:01.280 --> 00:41:03.300
going to create the BLoC.

00:41:03.300 --> 00:41:04.860
The BLoC is going
to some networking.

00:41:04.860 --> 00:41:06.193
The BLoC is going to be created.

00:41:06.193 --> 00:41:08.750
But at this point, the stream
builder is already building.

00:41:08.750 --> 00:41:12.170
So maybe in this
scenario, there is

00:41:12.170 --> 00:41:13.670
going to be no data
in the snapshot,

00:41:13.670 --> 00:41:15.461
because the article
wouldn't have returned.

00:41:15.461 --> 00:41:17.740
So do we have to check?

00:41:17.740 --> 00:41:18.740
FILIP: Well, let's see--

00:41:18.740 --> 00:41:21.270
MATT: That the
snapshot has data.

00:41:21.270 --> 00:41:21.770
FILIP: Yeah.

00:41:21.770 --> 00:41:24.560
I think because we are
providing initial data,

00:41:24.560 --> 00:41:25.720
that it will always be--

00:41:25.720 --> 00:41:26.970
MATT: It puts it in snapshot--

00:41:26.970 --> 00:41:28.020
FILIP: Yeah, yeah.

00:41:28.020 --> 00:41:28.520
Let's see.

00:41:28.520 --> 00:41:29.020
Let's see.

00:41:29.020 --> 00:41:30.366
I think we're there.

00:41:35.500 --> 00:41:36.351
Oh, yeah.

00:41:36.351 --> 00:41:36.850
BLoC.

00:41:41.170 --> 00:41:41.710
All right.

00:41:48.840 --> 00:41:50.870
[? help ?] [? restart? ?]

00:41:50.870 --> 00:41:52.170
MATT: Now, because this is--

00:41:55.350 --> 00:41:58.860
FILIP: So what we have
here, a value of type stream

00:41:58.860 --> 00:42:02.120
can't be assigned to a
variable of type stream.

00:42:04.720 --> 00:42:07.356
Oh, we're inputting
two different articles.

00:42:07.356 --> 00:42:07.980
Is it possible?

00:42:12.220 --> 00:42:15.190
Try changing the
type of the left--

00:42:15.190 --> 00:42:18.310
MATT: Widget.bloc.articles.

00:42:18.310 --> 00:42:20.380
FILIP: Main 60-- no, no.

00:42:20.380 --> 00:42:24.998
Main 56 here.

00:42:24.998 --> 00:42:28.310
Interesting.

00:42:28.310 --> 00:42:30.140
Oh, you know what?

00:42:30.140 --> 00:42:31.840
So we're hitting an issue here.

00:42:34.490 --> 00:42:39.500
So here, we are importing
the article as package.

00:42:39.500 --> 00:42:44.300
And here, I think, we're
inputting it as this.

00:42:44.300 --> 00:42:50.865
So this is a really good
problem to happen upon

00:42:50.865 --> 00:42:56.020
on this show, because this
can be really hard to debug.

00:42:56.020 --> 00:42:58.250
You're like, why
is it complaining

00:42:58.250 --> 00:43:01.310
about a different type
when it's the same type?

00:43:01.310 --> 00:43:03.530
The thing is, currently
in Dart, there's

00:43:03.530 --> 00:43:07.370
this thing that's
kind of infuriating,

00:43:07.370 --> 00:43:13.090
is that when you import by
just a regular kind of path,

00:43:13.090 --> 00:43:17.660
versus if you import somewhere
else by the package path,

00:43:17.660 --> 00:43:19.370
it will assume it's different.

00:43:19.370 --> 00:43:23.600
Because actually, it cannot
know in advance, I think,

00:43:23.600 --> 00:43:29.930
that you're thinking-- it just
doesn't normalize this for some

00:43:29.930 --> 00:43:30.440
reason.

00:43:30.440 --> 00:43:32.660
MATT: I mean, theoretically, the
package could have been built

00:43:32.660 --> 00:43:35.210
earlier, , and the source
code could have been changed.

00:43:35.210 --> 00:43:37.460
What I typically do
is I force myself

00:43:37.460 --> 00:43:40.550
to use the package,
the full-blown package

00:43:40.550 --> 00:43:41.765
signature in the import.

00:43:41.765 --> 00:43:42.640
FILIP: I can do that.

00:43:42.640 --> 00:43:44.650
MATT: What do you typically to?

00:43:44.650 --> 00:43:47.930
FILIP: I tend to do like, if
I'm in [? LEP, ?] I just do

00:43:47.930 --> 00:43:52.480
everything not by package,
and everywhere else.

00:43:52.480 --> 00:43:59.510
But what we have
here is just this.

00:43:59.510 --> 00:44:00.589
All right, so--

00:44:00.589 --> 00:44:01.880
MATT: Wait, did that just work?

00:44:01.880 --> 00:44:02.380
FILIP: Yep.

00:44:02.380 --> 00:44:02.910
It did.

00:44:02.910 --> 00:44:05.750
MATT: Hot restart.

00:44:05.750 --> 00:44:08.100
FILIP: It wasn't
even [INAUDIBLE]..

00:44:08.100 --> 00:44:08.600
OK.

00:44:08.600 --> 00:44:15.311
So it seems like-- let me
just restart everything.

00:44:15.311 --> 00:44:15.810
All right.

00:44:15.810 --> 00:44:16.391
MATT: Wow.

00:44:16.391 --> 00:44:17.890
So we swapped out
the future builder

00:44:17.890 --> 00:44:18.890
with the stream builder.

00:44:18.890 --> 00:44:21.800
We moved all of the
code into the BLoC.

00:44:21.800 --> 00:44:25.490
So we have all of our business
logic compartmentalized now.

00:44:25.490 --> 00:44:27.820
And all the UI is doing,
as far as I can tell,

00:44:27.820 --> 00:44:32.150
is it's like, hey, I'd like
a stream of list of articles,

00:44:32.150 --> 00:44:32.800
please.

00:44:32.800 --> 00:44:35.120
And I'll just render that.

00:44:35.120 --> 00:44:36.030
FILIP: All right.

00:44:36.030 --> 00:44:42.920
So that seems like we're
basically almost done.

00:44:42.920 --> 00:44:47.090
So that was the
implementing of BLoC.

00:44:47.090 --> 00:44:50.750
So now, over to you.

00:44:50.750 --> 00:44:55.795
So I'm going to
push this to GitHub.

00:44:55.795 --> 00:44:58.460
Get prepared to get
this from the latest.

00:44:58.460 --> 00:45:01.220
Where's the--?

00:45:01.220 --> 00:45:03.110
So implement BLoC.

00:45:07.054 --> 00:45:08.040
And push.

00:45:19.062 --> 00:45:20.020
We normally have this--

00:45:20.020 --> 00:45:20.450
MATT: It's pushed?

00:45:20.450 --> 00:45:20.950
FILIP: Yes.

00:45:20.950 --> 00:45:21.920
MATT: OK.

00:45:21.920 --> 00:45:25.114
So what I'm going to
need to do, I need to--

00:45:25.114 --> 00:45:27.460
[? where ?] [? am I? ?] OK.

00:45:27.460 --> 00:45:31.670
FILIP: We normally have all
this very amazing animation,

00:45:31.670 --> 00:45:34.330
where we split places.

00:45:34.330 --> 00:45:36.950
Or, split places--
switch places.

00:45:36.950 --> 00:45:40.940
But we realize that it's kind
of dangerous, because then we

00:45:40.940 --> 00:45:44.270
force the other person
to work with the ID

00:45:44.270 --> 00:45:46.130
of the first person.

00:45:46.130 --> 00:45:51.440
And especially with my
ID, I wouldn't want that.

00:45:51.440 --> 00:45:53.687
MATT: Filip has a
heavily customized ID.

00:45:53.687 --> 00:45:54.770
FILIP: Well, everyone has.

00:45:54.770 --> 00:45:57.950
But, you know, mine
is kind of crazy.

00:45:57.950 --> 00:46:00.305
MATT: So let me just resolve
a couple of merge things

00:46:00.305 --> 00:46:02.910
that I was playing with earlier.

00:46:02.910 --> 00:46:03.410
There we go.

00:46:03.410 --> 00:46:04.040
OK.

00:46:04.040 --> 00:46:05.738
So let's see if I have the--

00:46:09.330 --> 00:46:14.060
so Filip was on the
Android Studio and--

00:46:14.060 --> 00:46:16.580
FILIP: Yeah, Android Studio
and iPhone simulator.

00:46:16.580 --> 00:46:18.080
MATT: So I got the
iPhone simulator,

00:46:18.080 --> 00:46:20.630
but I am using
Visual Studio Code.

00:46:20.630 --> 00:46:21.780
And I have some red BLoCs.

00:46:24.440 --> 00:46:24.940
OK.

00:46:24.940 --> 00:46:25.648
Behavior subject.

00:46:25.648 --> 00:46:27.110
I need to get packages.

00:46:27.110 --> 00:46:28.370
FILIP: Right.

00:46:28.370 --> 00:46:31.970
MATT: So [? I can issue that ?]
from the command line.

00:46:31.970 --> 00:46:33.970
FILIP: Yeah, Matt is all
about the command line.

00:46:33.970 --> 00:46:35.387
MATT: I love me
some command line.

00:46:35.387 --> 00:46:36.803
FILIP: I'm all
about [INAUDIBLE]..

00:46:36.803 --> 00:46:38.930
MATT: What result just
get through some app thing

00:46:38.930 --> 00:46:39.622
that you--

00:46:39.622 --> 00:46:41.570
FILIP: I know, right?

00:46:41.570 --> 00:46:46.790
MATT: OK, so I am
to do a hot restart.

00:46:51.160 --> 00:46:52.220
There we go.

00:46:52.220 --> 00:46:53.690
FILIP: That's amazing.

00:46:53.690 --> 00:46:55.740
I'm still amazed that it works.

00:46:55.740 --> 00:46:56.240
MATT: Yep.

00:46:56.240 --> 00:46:58.030
I have the stream
builder, as you can see.

00:46:58.030 --> 00:47:01.510
I've got unmodifiable-- the
first thing I'm going to do is

00:47:01.510 --> 00:47:02.990
I am going to--

00:47:02.990 --> 00:47:04.924
because it's been
driving me crazy.

00:47:04.924 --> 00:47:06.620
[LAUGHING]

00:47:06.620 --> 00:47:08.020
FILIP: All right.

00:47:08.020 --> 00:47:08.650
Yes.

00:47:08.650 --> 00:47:10.930
Details, but important details.

00:47:10.930 --> 00:47:11.680
MATT: There we go.

00:47:11.680 --> 00:47:12.180
FILIP: All right.

00:47:12.180 --> 00:47:12.890
MATT: Hooray!

00:47:12.890 --> 00:47:13.810
[LAUGHING]

00:47:13.810 --> 00:47:14.350
OK.

00:47:14.350 --> 00:47:16.992
So what would you like me to do?

00:47:16.992 --> 00:47:17.950
What should we do next?

00:47:17.950 --> 00:47:18.491
FILIP: Right.

00:47:18.491 --> 00:47:24.180
So I would like us to be
able, as a user of this app,

00:47:24.180 --> 00:47:26.970
to be able to somehow switch
between-- because in Hacker

00:47:26.970 --> 00:47:29.650
News, you have all
these different views.

00:47:29.650 --> 00:47:33.010
But what we really want to
just switch through right now

00:47:33.010 --> 00:47:36.440
is the top and the new, right?

00:47:36.440 --> 00:47:39.400
So sometimes you want to
read the newest stuff that's

00:47:39.400 --> 00:47:41.290
happening in Hacker News.

00:47:41.290 --> 00:47:46.180
But at least me, I like
to watch the top news.

00:47:46.180 --> 00:47:46.680
MATT: OK.

00:47:46.680 --> 00:47:48.221
So we could do that
a couple of ways.

00:47:48.221 --> 00:47:50.440
We could have a
bottom navigation bar

00:47:50.440 --> 00:47:53.050
with a couple of buttons,
which will fit between them.

00:47:53.050 --> 00:47:56.500
I could put a toggle
button in a modal pop up,

00:47:56.500 --> 00:47:57.950
or something like that.

00:47:57.950 --> 00:47:58.850
FILIP: Yeah.

00:47:58.850 --> 00:48:00.530
MATT: What do you think?

00:48:00.530 --> 00:48:01.690
FILIP: What I think--

00:48:04.240 --> 00:48:07.440
I actually-- I don't
have an opinion.

00:48:07.440 --> 00:48:10.407
I'm not a designer.

00:48:10.407 --> 00:48:12.240
MATT: If you're relying
on my design skills,

00:48:12.240 --> 00:48:15.300
this is not going to go well.

00:48:15.300 --> 00:48:18.280
FILIP: No, I think we
don't have that much time

00:48:18.280 --> 00:48:19.360
to implement this.

00:48:19.360 --> 00:48:22.370
So whatever is easiest
to implement right now.

00:48:22.370 --> 00:48:24.040
MATT: So why don't
we start with just--

00:48:24.040 --> 00:48:25.720
let's play around
with the scaffold,

00:48:25.720 --> 00:48:27.730
and we'll stick in a
bottom [INAUDIBLE]..

00:48:27.730 --> 00:48:29.992
FILIP: OK.

00:48:29.992 --> 00:48:31.450
MATT: What I would
do at this point

00:48:31.450 --> 00:48:33.821
is I would break out the
body into a separate widget,

00:48:33.821 --> 00:48:35.070
and this, that, and the other.

00:48:35.070 --> 00:48:37.360
But because we're manually
passing through the BLoC,

00:48:37.360 --> 00:48:39.318
I don't want to have to
deal with passing BLoCs

00:48:39.318 --> 00:48:40.105
further down.

00:48:40.105 --> 00:48:42.730
So one of the things we get with
scaffolds, we have an app bar,

00:48:42.730 --> 00:48:47.560
we have a body, we also have
a bottom navigation bar.

00:48:47.560 --> 00:48:51.730
And a bottom navigation bar,
there's a couple of ways

00:48:51.730 --> 00:48:53.295
we could do this.

00:48:53.295 --> 00:48:55.253
I haven't implemented
one of these for a while,

00:48:55.253 --> 00:48:57.608
so we'll see.

00:48:57.608 --> 00:48:58.552
There's a-- oops.

00:48:58.552 --> 00:48:59.500
Not a back button.

00:48:59.500 --> 00:49:04.280
There's a bottom app
bar, which will give us

00:49:04.280 --> 00:49:05.155
complete flexibility.

00:49:05.155 --> 00:49:06.738
There's a bottom
navigation bar, which

00:49:06.738 --> 00:49:08.360
will allow us to put icons in.

00:49:08.360 --> 00:49:11.500
So if we put in a bottom
navigation bar, it's great.

00:49:11.500 --> 00:49:13.150
What does it need?

00:49:13.150 --> 00:49:17.920
It needs a list of bottom
navigation bar items.

00:49:17.920 --> 00:49:21.430
So we are going
to give it items,

00:49:21.430 --> 00:49:24.990
which is going to be a list.

00:49:24.990 --> 00:49:26.570
List.

00:49:26.570 --> 00:49:31.290
And I think that's all
it is required here.

00:49:31.290 --> 00:49:34.330
So then what we
need to put in here

00:49:34.330 --> 00:49:37.880
is a bottom navigation bar item.

00:49:37.880 --> 00:49:40.200
And a bottom navigation
bar item is going

00:49:40.200 --> 00:49:42.360
to require an icon and a title.

00:49:42.360 --> 00:49:46.605
So a title will be top stories.

00:49:49.500 --> 00:49:51.580
And I bet this is
going to be a widget.

00:49:51.580 --> 00:49:58.440
So this is going to
be text of op stories.

00:49:58.440 --> 00:49:59.940
FILIP: Yep.

00:49:59.940 --> 00:50:04.740
MATT: And this is also
going to need an icon.

00:50:04.740 --> 00:50:10.260
And so I am going to
give this an icon.

00:50:10.260 --> 00:50:11.950
Icon.

00:50:11.950 --> 00:50:14.173
Is there a news one?

00:50:14.173 --> 00:50:14.980
News?

00:50:14.980 --> 00:50:16.250
FILIP: Yeah, let's do this.

00:50:16.250 --> 00:50:17.370
New releases looks good.

00:50:17.370 --> 00:50:17.870
MATT: OK.

00:50:17.870 --> 00:50:18.994
Let's just go new releases.

00:50:18.994 --> 00:50:24.120
Now, I'm going to
have to close this up.

00:50:24.120 --> 00:50:25.200
And--

00:50:25.200 --> 00:50:26.700
FILIP: Items length
needs to be two.

00:50:26.700 --> 00:50:27.840
MATT: We have to
have at least two.

00:50:27.840 --> 00:50:29.040
FILIP: Ooh, interesting.

00:50:29.040 --> 00:50:31.671
MATT: So we're
going to take this--

00:50:31.671 --> 00:50:33.670
FILIP: That's good, because
we have exactly two.

00:50:33.670 --> 00:50:36.255
MATT: We have exactly two.

00:50:36.255 --> 00:50:37.990
New stories.

00:50:37.990 --> 00:50:39.990
FILIP: Oh, you have top
stories and new stories.

00:50:39.990 --> 00:50:40.620
Yeah, yeah.

00:50:40.620 --> 00:50:42.450
We have the wrong icon
for the new stories.

00:50:42.450 --> 00:50:43.160
MATT: OK.

00:50:43.160 --> 00:50:44.970
Well, OK, so we'll
make this new stories,

00:50:44.970 --> 00:50:46.365
and we'll make this icon.

00:50:52.040 --> 00:50:52.891
There.

00:50:52.891 --> 00:50:53.390
Top.

00:50:53.390 --> 00:50:56.870
Because it points upwards.

00:50:56.870 --> 00:51:00.290
If you want to find out
what all the icons are,

00:51:00.290 --> 00:51:06.320
if you go over to Flutter and
search for icons, the Icons

00:51:06.320 --> 00:51:08.594
Class, they are all in here.

00:51:08.594 --> 00:51:10.010
FILIP: [GASPS] I
didn't know that.

00:51:10.010 --> 00:51:10.509
MATT: Yeah.

00:51:10.509 --> 00:51:13.180
And there are so many.

00:51:13.180 --> 00:51:14.930
FILIP: They are actually
in the documents.

00:51:14.930 --> 00:51:15.700
That's so amazing.

00:51:15.700 --> 00:51:16.199
MATT: Yeah.

00:51:16.199 --> 00:51:19.920
So you can scroll this
to your heart's content.

00:51:19.920 --> 00:51:22.140
But let us get back to
where we are with this.

00:51:22.140 --> 00:51:23.390
FILIP: It actually looks good.

00:51:23.390 --> 00:51:24.150
I saw it--

00:51:24.150 --> 00:51:25.370
MATT: Oh, there we go.

00:51:25.370 --> 00:51:28.430
So now we have top stories
and we have new stories.

00:51:28.430 --> 00:51:31.480
Now, one of the issues
with the bottom nav bar

00:51:31.480 --> 00:51:37.520
is that you have to put a
little bit of logic in here.

00:51:37.520 --> 00:51:38.150
FILIP: Right.

00:51:38.150 --> 00:51:39.830
MATT: So, for example,
current index,

00:51:39.830 --> 00:51:45.980
so we could do
current index of 1.

00:51:45.980 --> 00:51:48.170
And what you'll see then
is this will highlight.

00:51:48.170 --> 00:51:49.111
FILIP: Oh, OK.

00:51:49.111 --> 00:51:51.610
MATT: But we need to handle the
on tap and the other pieces.

00:51:51.610 --> 00:51:52.640
This is where it gets--

00:51:52.640 --> 00:51:54.470
it can get a little bit messy.

00:51:54.470 --> 00:52:00.800
But for each of these
bottom navigation bar items,

00:52:00.800 --> 00:52:09.130
we do not have a tap.

00:52:09.130 --> 00:52:10.030
What do we have here?

00:52:10.030 --> 00:52:11.200
We have double.

00:52:11.200 --> 00:52:13.360
We have on tap.

00:52:13.360 --> 00:52:16.690
That's the on tap for the
bottom navigation bar item.

00:52:16.690 --> 00:52:21.360
So how would I
typically do this?

00:52:21.360 --> 00:52:23.740
FILIP: So this is
the like, UI logic,

00:52:23.740 --> 00:52:26.050
so I'm fine with using
[INAUDIBLE] of something

00:52:26.050 --> 00:52:28.030
like this.

00:52:28.030 --> 00:52:31.780
We could just have, like,
what do they call it?

00:52:31.780 --> 00:52:32.680
Current index?

00:52:32.680 --> 00:52:35.800
MATT: I'm going to
go to the definition.

00:52:35.800 --> 00:52:37.675
So we have a bottom
navigation bar.

00:52:40.580 --> 00:52:42.310
That's fine.

00:52:42.310 --> 00:52:45.220
And then in here,
we have an on tap.

00:52:45.220 --> 00:52:49.450
This is called when
item is tapped.

00:52:49.450 --> 00:52:53.210
And that gives us an
int, which is the index.

00:52:53.210 --> 00:52:55.090
So what I can do
in here now is I

00:52:55.090 --> 00:53:00.470
can go on tap, which is
going to be a function.

00:53:00.470 --> 00:53:03.210
FILIP: Oh, the navigation
bar is in on tap.

00:53:03.210 --> 00:53:03.771
OK.

00:53:03.771 --> 00:53:04.270
OK.

00:53:04.270 --> 00:53:04.930
That's good.

00:53:04.930 --> 00:53:05.890
MATT: I think it does.

00:53:05.890 --> 00:53:07.090
Wait.

00:53:07.090 --> 00:53:08.590
I shouldn't put
that in my list of--

00:53:11.320 --> 00:53:13.490
I should put that as just--

00:53:13.490 --> 00:53:14.260
let's put this.

00:53:17.141 --> 00:53:17.641
Yes.

00:53:24.652 --> 00:53:26.110
FILIP: Oh, it will
give you an int.

00:53:26.110 --> 00:53:26.770
OK.

00:53:26.770 --> 00:53:28.360
That's clever OK.

00:53:30.955 --> 00:53:33.080
MATT: And at this point,
what I would do in here is

00:53:33.080 --> 00:53:35.960
I would put this in
a state for widget,

00:53:35.960 --> 00:53:39.184
and I would have the index,
and I would switch between.

00:53:39.184 --> 00:53:40.850
We might get to that,
but let's at least

00:53:40.850 --> 00:53:43.290
get our on taps working.

00:53:43.290 --> 00:53:54.864
So if index is 0,
print top stories

00:53:54.864 --> 00:54:12.770
tapped, else print new stories.

00:54:12.770 --> 00:54:14.340
OK.

00:54:14.340 --> 00:54:16.450
So let's see what happens here.

00:54:16.450 --> 00:54:18.420
So I'm going to
get rid of these.

00:54:18.420 --> 00:54:21.314
There we go, top
stories and new stories.

00:54:21.314 --> 00:54:22.480
FILIP: Oh, cool, cool, cool.

00:54:22.480 --> 00:54:23.350
MATT: OK.

00:54:23.350 --> 00:54:26.110
So that's good.

00:54:26.110 --> 00:54:32.780
We are going to now want
to-- so if I hit Top Stories.

00:54:32.780 --> 00:54:37.750
FILIP: So one way to do
this would be to just say

00:54:37.750 --> 00:54:40.990
to have an input on the block.

00:54:40.990 --> 00:54:44.380
And that input would
only accept, like,

00:54:44.380 --> 00:54:45.940
top stories or new stories.

00:54:45.940 --> 00:54:49.250
And from here, you would just,
like, do that, and that's it.

00:54:49.250 --> 00:54:49.750
MATT: OK.

00:54:49.750 --> 00:54:50.780
So let's take a look.

00:54:50.780 --> 00:54:54.700
So we are going to check out
our-- what is your BLoC code?

00:54:54.700 --> 00:54:55.325
FILIP: HN BLoC.

00:54:55.325 --> 00:54:57.380
MATT: Oh, HN BLoC.

00:54:57.380 --> 00:54:57.880
OK.

00:54:57.880 --> 00:54:59.515
So our BLoC is here.

00:55:02.260 --> 00:55:04.430
FILIP: You can just assume--

00:55:04.430 --> 00:55:07.480
you don't need to
implement this.

00:55:07.480 --> 00:55:14.440
Maybe even just assume there's
a stream controller or, like,

00:55:14.440 --> 00:55:18.584
subject that you can
add to, and that's it.

00:55:18.584 --> 00:55:19.750
MATT: So everything coming--

00:55:19.750 --> 00:55:21.310
do we want to make this?

00:55:21.310 --> 00:55:22.915
All the inputs are
streams, right?

00:55:22.915 --> 00:55:23.950
FILIP: Yes, yes.

00:55:23.950 --> 00:55:26.440
MATT: So we would want
an incoming stream

00:55:26.440 --> 00:55:31.855
for updating the stories.

00:55:31.855 --> 00:55:33.400
FILIP: Yeah, yeah.

00:55:33.400 --> 00:55:36.760
MATT: So what would
that look like?

00:55:36.760 --> 00:55:37.870
FILIP: That would be--

00:55:37.870 --> 00:55:40.000
oh, yeah.

00:55:40.000 --> 00:55:42.315
MATT: So I have a stream of--

00:55:42.315 --> 00:55:43.590
let's get rid of this.

00:55:43.590 --> 00:55:47.230
I have a stream of a modifiable
list of get articles.

00:55:47.230 --> 00:55:50.140
So I would have a--

00:55:50.140 --> 00:55:52.105
actually, what I would
have, I would have

00:55:52.105 --> 00:55:54.400
a new behavior subject, right?

00:55:54.400 --> 00:55:55.330
FILIP: You know what?

00:55:55.330 --> 00:56:01.420
Just do the sync, sync of either
enum, or something like this.

00:56:01.420 --> 00:56:04.040
And I will take care of the
underlying thing so that we

00:56:04.040 --> 00:56:04.540
don't--

00:56:04.540 --> 00:56:07.354
MATT: Why don't I
check this in, push it,

00:56:07.354 --> 00:56:08.770
and then you
implement that piece,

00:56:08.770 --> 00:56:10.043
and then I can finish it off.

00:56:10.043 --> 00:56:10.626
FILIP: Oh, OK.

00:56:10.626 --> 00:56:10.960
Yeah, yeah, yeah.

00:56:10.960 --> 00:56:12.676
MATT: Because
otherwise, you will be--

00:56:12.676 --> 00:56:14.050
tell me what to
type next, Filip.

00:56:14.050 --> 00:56:15.111
FILIP: Yes, yes, yes.

00:56:15.111 --> 00:56:15.610
MATT: So--

00:56:18.200 --> 00:56:20.082
[BEEP]

00:56:20.082 --> 00:56:20.790
FILIP: All right.

00:56:20.790 --> 00:56:22.350
So I'll just get this back.

00:56:22.350 --> 00:56:27.870
And meanwhile, we realized
that we're actually

00:56:27.870 --> 00:56:30.784
coming to one hour of Boring.

00:56:30.784 --> 00:56:32.200
MATT: So let's see
what we can get

00:56:32.200 --> 00:56:33.360
done in the next few minutes.

00:56:33.360 --> 00:56:33.859
FILIP: Yeah.

00:56:39.060 --> 00:56:40.510
OK.

00:56:40.510 --> 00:56:44.110
MATT: So you want to deal
with an incoming stream,

00:56:44.110 --> 00:56:45.420
so you're going to--

00:56:45.420 --> 00:56:46.650
create a sync.

00:56:46.650 --> 00:56:47.350
FILIP: Yes.

00:56:47.350 --> 00:56:47.850
All right.

00:56:47.850 --> 00:56:48.741
So this works.

00:56:48.741 --> 00:56:49.240
MATT: Yup.

00:56:52.840 --> 00:56:55.590
FILIP: So here, I'm
going to add a sync.

00:56:55.590 --> 00:56:58.140
And I have another
handy template.

00:56:58.140 --> 00:57:02.871
And that's going to be
a sync of stories type.

00:57:02.871 --> 00:57:04.620
MATT: Oh, you're going
to make it an enum?

00:57:04.620 --> 00:57:05.119
FILIP: Yep.

00:57:05.119 --> 00:57:07.480
MATT: OK.

00:57:07.480 --> 00:57:11.920
FILIP: And so it's a sync,
[? by ?] a stream control

00:57:11.920 --> 00:57:13.410
for now.

00:57:13.410 --> 00:57:15.030
Let's keep that.

00:57:15.030 --> 00:57:18.465
I'm going to do the enum here.

00:57:18.465 --> 00:57:23.080
So stories type.

00:57:23.080 --> 00:57:27.960
So top and new for now.

00:57:27.960 --> 00:57:30.060
Top stories and new stories.

00:57:30.060 --> 00:57:31.760
New is a keyword.

00:57:31.760 --> 00:57:33.950
New stories.

00:57:33.950 --> 00:57:34.840
Right.

00:57:34.840 --> 00:57:37.920
So we're accruing more
technical debt, as you can see,

00:57:37.920 --> 00:57:42.000
by naming crazy and all that.

00:57:42.000 --> 00:57:45.030
But that's fine.

00:57:45.030 --> 00:57:48.210
And now, I just need
to listen to that.

00:57:48.210 --> 00:57:49.820
So stories type.

00:57:53.475 --> 00:57:53.975
Listen.

00:57:56.686 --> 00:57:57.810
Stream, listen.

00:57:57.810 --> 00:57:58.310
Sorry.

00:58:00.890 --> 00:58:04.170
That's-- OK, so storiesType.

00:58:10.280 --> 00:58:12.200
MATT: So what we
could do is we could

00:58:12.200 --> 00:58:17.840
rename Update Articles to
Update Top Articles and update--

00:58:17.840 --> 00:58:21.140
well, where are
you doing the call?

00:58:21.140 --> 00:58:23.390
Basically, the only thing
we need to swap through here

00:58:23.390 --> 00:58:27.810
is change the story URL.

00:58:27.810 --> 00:58:28.310
FILIP: OK.

00:58:28.310 --> 00:58:30.170
So we still have this.

00:58:30.170 --> 00:58:35.600
So we still don't have what
IDs we're actually getting.

00:58:35.600 --> 00:58:38.810
So this could take
a list of integers

00:58:38.810 --> 00:58:41.080
that you will
actually want to get.

00:58:41.080 --> 00:58:42.160
Right.

00:58:42.160 --> 00:58:49.700
So list of int of article IDs.

00:58:49.700 --> 00:58:52.340
MATT: Maybe we just want
to take the current list

00:58:52.340 --> 00:58:55.170
and split it in half and
make one half top stories

00:58:55.170 --> 00:58:56.150
and one half the other?

00:58:56.150 --> 00:58:57.590
And that way, then
we can fix, we

00:58:57.590 --> 00:58:59.870
can do the actual
networking next time.

00:58:59.870 --> 00:59:01.910
FILIP: So this is now--

00:59:06.950 --> 00:59:14.010
static list of-- let's
say this is new IDs.

00:59:14.010 --> 00:59:16.070
And there's another one.

00:59:18.750 --> 00:59:24.320
Static list int of top IDs.

00:59:28.960 --> 00:59:32.990
Here by default, we're
doing the top stories.

00:59:32.990 --> 00:59:33.610
So top IDs.

00:59:36.610 --> 00:59:37.690
So that's the first one.

00:59:37.690 --> 00:59:38.860
So when we create--

00:59:38.860 --> 00:59:41.090
MATT: So it populates
it with top.

00:59:41.090 --> 00:59:43.870
FILIP: And then here,
we're listening to that,

00:59:43.870 --> 00:59:46.870
and we're doing--

00:59:46.870 --> 00:59:59.670
so if stories type equals
stories type news stories,

00:59:59.670 --> 01:00:02.280
then we'd just do
Update Articles.

01:00:02.280 --> 01:00:03.060
MATT: Yup.

01:00:03.060 --> 01:00:08.740
Because that will push a
new list into the stream.

01:00:08.740 --> 01:00:12.895
And we don't care that it's
asynchronous, because it

01:00:12.895 --> 01:00:15.240
will push through a stream.

01:00:15.240 --> 01:00:16.290
FILIP: I just wonder.

01:00:16.290 --> 01:00:20.570
We still need to push
the articles there.

01:00:24.540 --> 01:00:26.430
Yeah, I just don't
want to repeat myself,

01:00:26.430 --> 01:00:30.840
so I'm going to
do list int of IDs

01:00:30.840 --> 01:00:33.900
is going to be undefined
by default. But--

01:00:33.900 --> 01:00:35.290
MATT: I see what you're doing.

01:00:35.290 --> 01:00:42.080
FILIP: This is going to be
new stories IDs, and else.

01:00:42.080 --> 01:00:43.580
We could have a
switch [INAUDIBLE]..

01:00:43.580 --> 01:00:45.610
Be probably nice.

01:00:45.610 --> 01:00:48.600
Anyway, so IDs is top IDs.

01:00:48.600 --> 01:00:55.620
And then , we could do
article subject at--

01:00:55.620 --> 01:00:59.970
ooh, we still need to
get the actual articles.

01:00:59.970 --> 01:01:02.720
MATT: Yeah, you just need to do
Update Articles with the IDs.

01:01:02.720 --> 01:01:07.450
So basically, it's
that whole same piece

01:01:07.450 --> 01:01:09.172
that you can just move into a--

01:01:12.010 --> 01:01:15.210
FILIP: Get articles and update.

01:01:18.370 --> 01:01:20.854
MATT: Your naming is accruing
so much technical data.

01:01:20.854 --> 01:01:23.760
FILIP: I know.

01:01:23.760 --> 01:01:25.210
OK.

01:01:25.210 --> 01:01:27.530
Get articles and update.

01:01:31.165 --> 01:01:33.123
MATT: Or we'll have to
[? pass them ?] the IDs.

01:01:37.980 --> 01:01:39.890
There's going to
be a list of IDs.

01:01:39.890 --> 01:01:41.030
FILIP: That's right.

01:01:41.030 --> 01:01:41.550
Thank you.

01:01:45.890 --> 01:01:48.540
IDs.

01:01:48.540 --> 01:01:53.760
And here, then, we
can do exactly that.

01:01:53.760 --> 01:01:54.639
You know what?

01:01:54.639 --> 01:01:55.617
MATT: Yeah.

01:01:55.617 --> 01:01:59.040
[LAUGHING]

01:02:08.015 --> 01:02:11.170
FILIP: Oh, because, of course.

01:02:11.170 --> 01:02:12.023
And this.

01:02:18.930 --> 01:02:19.940
All right.

01:02:19.940 --> 01:02:22.140
MATT: You can get rid
of the list of int IDs.

01:02:22.140 --> 01:02:23.400
FILIP: Thank you.

01:02:23.400 --> 01:02:25.330
MATT: OK.

01:02:25.330 --> 01:02:26.705
FILIP: OK.

01:02:26.705 --> 01:02:28.080
And now, let's see.

01:02:28.080 --> 01:02:30.870
So are we actually
sending it there?

01:02:30.870 --> 01:02:31.470
No, we're not.

01:02:31.470 --> 01:02:33.210
MATT: No.

01:02:33.210 --> 01:02:35.610
FILIP: Let's see
if it even works.

01:02:35.610 --> 01:02:37.200
Because now we
should have only--

01:02:37.200 --> 01:02:39.560
yeah.

01:02:39.560 --> 01:02:42.880
MATT: So if you go
back into the bottom--

01:02:42.880 --> 01:02:50.160
the nav bar, you should be able
to, instead of those prints,

01:02:50.160 --> 01:02:53.180
you should just be
able to do widget.bloc.

01:02:53.180 --> 01:02:53.820
FILIP: Right.

01:02:53.820 --> 01:02:56.240
I'm just add this, because
I'm a little scared

01:02:56.240 --> 01:02:58.240
about just having--

01:02:58.240 --> 01:02:59.481
OK.

01:02:59.481 --> 01:03:01.230
MATT: Can you tell I
used to write Python?

01:03:01.230 --> 01:03:03.960
[LAUGHING]

01:03:03.960 --> 01:03:10.270
FILIP: Widget BLoC,
stories type at--

01:03:10.270 --> 01:03:12.900
and so if it's 0,
it's top stories.

01:03:12.900 --> 01:03:16.850
MATT: Yes, it's going to be
stories, the top stories.

01:03:16.850 --> 01:03:20.140
FILIP: And here, we
have new stories.

01:03:23.512 --> 01:03:24.012
All right.

01:03:24.012 --> 01:03:26.440
Let's do this.

01:03:26.440 --> 01:03:27.400
Oh.

01:03:27.400 --> 01:03:28.150
MATT: There we go.

01:03:28.150 --> 01:03:28.855
FILIP: All right.

01:03:28.855 --> 01:03:29.355
So--

01:03:29.355 --> 01:03:31.150
MATT: We got a bunch
of things that we

01:03:31.150 --> 01:03:32.710
need to tidy up
next session, which

01:03:32.710 --> 01:03:35.380
is tracking the state
of the bottom nav bar,

01:03:35.380 --> 01:03:37.474
or using a different control.

01:03:37.474 --> 01:03:38.890
Actually, I kind
of like that one.

01:03:38.890 --> 01:03:40.181
I think that looks pretty good.

01:03:40.181 --> 01:03:41.380
FILIP: Yeah.

01:03:41.380 --> 01:03:43.930
MATT: And we probably
want to tidy up--

01:03:43.930 --> 01:03:48.030
we want to pull the
live feed of IDs.

01:03:48.030 --> 01:03:48.789
FILIP: Right.

01:03:48.789 --> 01:03:50.830
MATT: Those are relatively
straightforward to do,

01:03:50.830 --> 01:03:54.210
but I'm afraid we're
out of time for that.

01:03:54.210 --> 01:03:54.710
FILIP: Yup.

01:03:54.710 --> 01:03:59.350
No, I'm very happy we
have a new functionality.

01:03:59.350 --> 01:04:01.480
We put everything in BLoC.

01:04:01.480 --> 01:04:03.970
We got rid of some of
the technical debt.

01:04:03.970 --> 01:04:06.280
We accrued new one,
which is always great.

01:04:06.280 --> 01:04:07.300
MATT: Just a tad.

01:04:07.300 --> 01:04:09.420
FILIP: And so yes, well,
thanks for watching.

01:04:09.420 --> 01:04:14.230
Please, if you have things that
you would like us to address,

01:04:14.230 --> 01:04:19.860
or that are weird, or not
clear, please let us know.

01:04:19.860 --> 01:04:22.000
We're aware of the
questions that you

01:04:22.000 --> 01:04:26.200
ask on the tag for
"The Boring Show,"

01:04:26.200 --> 01:04:30.610
we just don't have the
time to address them today.

01:04:30.610 --> 01:04:31.600
But next time.

01:04:31.600 --> 01:04:33.340
So don't worry about it.

01:04:33.340 --> 01:04:34.630
We're still watching that.

01:04:34.630 --> 01:04:37.189
MATT: We're accruing questions
debt, is what was done today.

01:04:37.189 --> 01:04:37.980
FILIP: That's true.

01:04:37.980 --> 01:04:38.480
Yes.

01:04:38.480 --> 01:04:42.340
And also, Andrew is really
great in answering them

01:04:42.340 --> 01:04:43.700
as they come in.

01:04:43.700 --> 01:04:49.330
So don't feel like you have
to wait until our next episode

01:04:49.330 --> 01:04:52.850
to ask and to get the answers.

01:04:52.850 --> 01:04:53.380
All right.

01:04:53.380 --> 01:04:55.160
So thank you for watching.

01:04:55.160 --> 01:04:56.560
MATT: Thank you very much.

01:04:56.560 --> 01:04:59.610
[MUSIC PLAYING]

