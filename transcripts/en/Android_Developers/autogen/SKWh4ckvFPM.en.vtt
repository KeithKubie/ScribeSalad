WEBVTT
Kind: captions
Language: en

00:00:02.860 --> 00:00:06.450
at Google i/o 2017 we opened the door to

00:00:06.450 --> 00:00:06.460
at Google i/o 2017 we opened the door to
 

00:00:06.460 --> 00:00:08.520
at Google i/o 2017 we opened the door to
room a persistence library that provides

00:00:08.520 --> 00:00:08.530
room a persistence library that provides
 

00:00:08.530 --> 00:00:11.790
room a persistence library that provides
an abstraction layer over SQLite now

00:00:11.790 --> 00:00:11.800
an abstraction layer over SQLite now
 

00:00:11.800 --> 00:00:15.030
an abstraction layer over SQLite now
room has rich version 2.0 and is part of

00:00:15.030 --> 00:00:15.040
room has rich version 2.0 and is part of
 

00:00:15.040 --> 00:00:17.550
room has rich version 2.0 and is part of
jetpack we fix the bugs you reported and

00:00:17.550 --> 00:00:17.560
jetpack we fix the bugs you reported and
 

00:00:17.560 --> 00:00:19.849
jetpack we fix the bugs you reported and
added some of the features you asked for

00:00:19.849 --> 00:00:19.859
added some of the features you asked for
 

00:00:19.859 --> 00:00:22.529
added some of the features you asked for
let's go over rooms main components and

00:00:22.529 --> 00:00:22.539
let's go over rooms main components and
 

00:00:22.539 --> 00:00:24.000
let's go over rooms main components and
see what queries are supported how to

00:00:24.000 --> 00:00:24.010
see what queries are supported how to
 

00:00:24.010 --> 00:00:26.279
see what queries are supported how to
implement my gracious and how to test

00:00:26.279 --> 00:00:26.289
implement my gracious and how to test
 

00:00:26.289 --> 00:00:28.820
implement my gracious and how to test
your work with a database

00:00:28.820 --> 00:00:28.830
your work with a database
 

00:00:28.830 --> 00:00:30.990
your work with a database
let's say that you want to have a table

00:00:30.990 --> 00:00:31.000
let's say that you want to have a table
 

00:00:31.000 --> 00:00:33.750
let's say that you want to have a table
of users and you want every row of that

00:00:33.750 --> 00:00:33.760
of users and you want every row of that
 

00:00:33.760 --> 00:00:35.580
of users and you want every row of that
table to be an instance of the user

00:00:35.580 --> 00:00:35.590
table to be an instance of the user
 

00:00:35.590 --> 00:00:38.010
table to be an instance of the user
class annotate your class with that

00:00:38.010 --> 00:00:38.020
class annotate your class with that
 

00:00:38.020 --> 00:00:40.290
class annotate your class with that
entity define the table name if you

00:00:40.290 --> 00:00:40.300
entity define the table name if you
 

00:00:40.300 --> 00:00:41.790
entity define the table name if you
don't want to use the name of the class

00:00:41.790 --> 00:00:41.800
don't want to use the name of the class
 

00:00:41.800 --> 00:00:45.030
don't want to use the name of the class
a stable name set the mandatory primary

00:00:45.030 --> 00:00:45.040
a stable name set the mandatory primary
 

00:00:45.040 --> 00:00:48.210
a stable name set the mandatory primary
key and the optional column info but

00:00:48.210 --> 00:00:48.220
key and the optional column info but
 

00:00:48.220 --> 00:00:49.890
key and the optional column info but
only if you want to change the name of

00:00:49.890 --> 00:00:49.900
only if you want to change the name of
 

00:00:49.900 --> 00:00:52.619
only if you want to change the name of
the color otherwise the field name is

00:00:52.619 --> 00:00:52.629
the color otherwise the field name is
 

00:00:52.629 --> 00:00:55.770
the color otherwise the field name is
used and that's it we'll take care of

00:00:55.770 --> 00:00:55.780
used and that's it we'll take care of
 

00:00:55.780 --> 00:00:57.930
used and that's it we'll take care of
the creation of the user table for you

00:00:57.930 --> 00:00:57.940
the creation of the user table for you
 

00:00:57.940 --> 00:01:01.020
the creation of the user table for you
so that's how the entity is done but we

00:01:01.020 --> 00:01:01.030
so that's how the entity is done but we
 

00:01:01.030 --> 00:01:02.880
so that's how the entity is done but we
need a way to access the data in the

00:01:02.880 --> 00:01:02.890
need a way to access the data in the
 

00:01:02.890 --> 00:01:06.149
need a way to access the data in the
database we do that with data access

00:01:06.149 --> 00:01:06.159
database we do that with data access
 

00:01:06.159 --> 00:01:09.480
database we do that with data access
objects dolls for short or precisely

00:01:09.480 --> 00:01:09.490
objects dolls for short or precisely
 

00:01:09.490 --> 00:01:12.270
objects dolls for short or precisely
create an interface annotated with at

00:01:12.270 --> 00:01:12.280
create an interface annotated with at
 

00:01:12.280 --> 00:01:15.749
create an interface annotated with at
TAO in this interface declare all the

00:01:15.749 --> 00:01:15.759
TAO in this interface declare all the
 

00:01:15.759 --> 00:01:17.630
TAO in this interface declare all the
methods needed to work with the database

00:01:17.630 --> 00:01:17.640
methods needed to work with the database
 

00:01:17.640 --> 00:01:19.740
methods needed to work with the database
annotating them with the corresponding

00:01:19.740 --> 00:01:19.750
annotating them with the corresponding
 

00:01:19.750 --> 00:01:21.990
annotating them with the corresponding
SQL query room takes care of

00:01:21.990 --> 00:01:22.000
SQL query room takes care of
 

00:01:22.000 --> 00:01:24.929
SQL query room takes care of
implementing these methods for you the

00:01:24.929 --> 00:01:24.939
implementing these methods for you the
 

00:01:24.939 --> 00:01:26.940
implementing these methods for you the
supported queries are insert update

00:01:26.940 --> 00:01:26.950
supported queries are insert update
 

00:01:26.950 --> 00:01:30.600
supported queries are insert update
delete query and Rock query all of them

00:01:30.600 --> 00:01:30.610
delete query and Rock query all of them
 

00:01:30.610 --> 00:01:33.120
delete query and Rock query all of them
except row query are checked at compile

00:01:33.120 --> 00:01:33.130
except row query are checked at compile
 

00:01:33.130 --> 00:01:35.160
except row query are checked at compile
time which means that if you write an

00:01:35.160 --> 00:01:35.170
time which means that if you write an
 

00:01:35.170 --> 00:01:36.990
time which means that if you write an
invalid query you'll find this out

00:01:36.990 --> 00:01:37.000
invalid query you'll find this out
 

00:01:37.000 --> 00:01:40.560
invalid query you'll find this out
immediately the closet puts together the

00:01:40.560 --> 00:01:40.570
immediately the closet puts together the
 

00:01:40.570 --> 00:01:42.570
immediately the closet puts together the
entities and the dolls is the room

00:01:42.570 --> 00:01:42.580
entities and the dolls is the room
 

00:01:42.580 --> 00:01:45.240
entities and the dolls is the room
database create an abstract class that

00:01:45.240 --> 00:01:45.250
database create an abstract class that
 

00:01:45.250 --> 00:01:48.149
database create an abstract class that
extends the room database annotated

00:01:48.149 --> 00:01:48.159
extends the room database annotated
 

00:01:48.159 --> 00:01:50.010
extends the room database annotated
declare the entities and the

00:01:50.010 --> 00:01:50.020
declare the entities and the
 

00:01:50.020 --> 00:01:52.740
declare the entities and the
corresponding dolls let's take a closer

00:01:52.740 --> 00:01:52.750
corresponding dolls let's take a closer
 

00:01:52.750 --> 00:01:55.950
corresponding dolls let's take a closer
look at the queries the return type of

00:01:55.950 --> 00:01:55.960
look at the queries the return type of
 

00:01:55.960 --> 00:01:58.320
look at the queries the return type of
query and raw query can be the entire

00:01:58.320 --> 00:01:58.330
query and raw query can be the entire
 

00:01:58.330 --> 00:02:01.170
query and raw query can be the entire
entity but also a subset of its fields

00:02:01.170 --> 00:02:01.180
entity but also a subset of its fields
 

00:02:01.180 --> 00:02:03.510
entity but also a subset of its fields
if you're working with guava or with

00:02:03.510 --> 00:02:03.520
if you're working with guava or with
 

00:02:03.520 --> 00:02:05.940
if you're working with guava or with
optional from the java.util package you

00:02:05.940 --> 00:02:05.950
optional from the java.util package you
 

00:02:05.950 --> 00:02:08.729
optional from the java.util package you
can also use them as return types so

00:02:08.729 --> 00:02:08.739
can also use them as return types so
 

00:02:08.739 --> 00:02:10.350
can also use them as return types so
this means that if there are no values

00:02:10.350 --> 00:02:10.360
this means that if there are no values
 

00:02:10.360 --> 00:02:12.780
this means that if there are no values
to satisfy your query then your query

00:02:12.780 --> 00:02:12.790
to satisfy your query then your query
 

00:02:12.790 --> 00:02:14.789
to satisfy your query then your query
will return optional dot empty or

00:02:14.789 --> 00:02:14.799
will return optional dot empty or
 

00:02:14.799 --> 00:02:17.309
will return optional dot empty or
optional dot absent depending on which

00:02:17.309 --> 00:02:17.319
optional dot absent depending on which
 

00:02:17.319 --> 00:02:19.860
optional dot absent depending on which
optional you're working with all of

00:02:19.860 --> 00:02:19.870
optional you're working with all of
 

00:02:19.870 --> 00:02:22.199
optional you're working with all of
these queries are synchronous meaning

00:02:22.199 --> 00:02:22.209
these queries are synchronous meaning
 

00:02:22.209 --> 00:02:24.180
these queries are synchronous meaning
that they will be run on the same thread

00:02:24.180 --> 00:02:24.190
that they will be run on the same thread
 

00:02:24.190 --> 00:02:27.030
that they will be run on the same thread
you are triggering them from room

00:02:27.030 --> 00:02:27.040
you are triggering them from room
 

00:02:27.040 --> 00:02:29.220
you are triggering them from room
ensures you follow best practices by

00:02:29.220 --> 00:02:29.230
ensures you follow best practices by
 

00:02:29.230 --> 00:02:31.199
ensures you follow best practices by
throwing an error if you run queries on

00:02:31.199 --> 00:02:31.209
throwing an error if you run queries on
 

00:02:31.209 --> 00:02:33.600
throwing an error if you run queries on
the main thread so use your preferred

00:02:33.600 --> 00:02:33.610
the main thread so use your preferred
 

00:02:33.610 --> 00:02:35.250
the main thread so use your preferred
method of handling threads in Android

00:02:35.250 --> 00:02:35.260
method of handling threads in Android
 

00:02:35.260 --> 00:02:37.730
method of handling threads in Android
and make sure you're off the main thread

00:02:37.730 --> 00:02:37.740
and make sure you're off the main thread
 

00:02:37.740 --> 00:02:40.559
and make sure you're off the main thread
room also supports asynchronous query

00:02:40.559 --> 00:02:40.569
room also supports asynchronous query
 

00:02:40.569 --> 00:02:42.250
room also supports asynchronous query
when working with live data or

00:02:42.250 --> 00:02:42.260
when working with live data or
 

00:02:42.260 --> 00:02:45.250
when working with live data or
chav what's more the cars that return

00:02:45.250 --> 00:02:45.260
chav what's more the cars that return
 

00:02:45.260 --> 00:02:48.280
chav what's more the cars that return
life data or flowable are observable

00:02:48.280 --> 00:02:48.290
life data or flowable are observable
 

00:02:48.290 --> 00:02:50.440
life data or flowable are observable
queries meaning that you will get

00:02:50.440 --> 00:02:50.450
queries meaning that you will get
 

00:02:50.450 --> 00:02:52.330
queries meaning that you will get
notified every time the data in the

00:02:52.330 --> 00:02:52.340
notified every time the data in the
 

00:02:52.340 --> 00:02:55.870
notified every time the data in the
table or tables updates

00:02:55.870 --> 00:02:55.880
table or tables updates
 

00:02:55.880 --> 00:02:58.400
table or tables updates
whenever you alter your database schema

00:02:58.400 --> 00:02:58.410
whenever you alter your database schema
 

00:02:58.410 --> 00:03:00.260
whenever you alter your database schema
either because you've added or renamed a

00:03:00.260 --> 00:03:00.270
either because you've added or renamed a
 

00:03:00.270 --> 00:03:02.420
either because you've added or renamed a
column or table you need to tell the

00:03:02.420 --> 00:03:02.430
column or table you need to tell the
 

00:03:02.430 --> 00:03:05.450
column or table you need to tell the
database how to handle that change in

00:03:05.450 --> 00:03:05.460
database how to handle that change in
 

00:03:05.460 --> 00:03:07.310
database how to handle that change in
order to do that in your database class

00:03:07.310 --> 00:03:07.320
order to do that in your database class
 

00:03:07.320 --> 00:03:09.890
order to do that in your database class
you'll need to first update your

00:03:09.890 --> 00:03:09.900
you'll need to first update your
 

00:03:09.900 --> 00:03:12.920
you'll need to first update your
database version second implement a

00:03:12.920 --> 00:03:12.930
database version second implement a
 

00:03:12.930 --> 00:03:15.470
database version second implement a
migration class which defines how to

00:03:15.470 --> 00:03:15.480
migration class which defines how to
 

00:03:15.480 --> 00:03:17.510
migration class which defines how to
handle the migration from the old schema

00:03:17.510 --> 00:03:17.520
handle the migration from the old schema
 

00:03:17.520 --> 00:03:20.270
handle the migration from the old schema
to the new one and then thirdly add that

00:03:20.270 --> 00:03:20.280
to the new one and then thirdly add that
 

00:03:20.280 --> 00:03:22.220
to the new one and then thirdly add that
migration class as a parameter to the

00:03:22.220 --> 00:03:22.230
migration class as a parameter to the
 

00:03:22.230 --> 00:03:24.710
migration class as a parameter to the
database filter after triggering the

00:03:24.710 --> 00:03:24.720
database filter after triggering the
 

00:03:24.720 --> 00:03:27.380
database filter after triggering the
migrations validates the schema for you

00:03:27.380 --> 00:03:27.390
migrations validates the schema for you
 

00:03:27.390 --> 00:03:29.330
migrations validates the schema for you
to ensure that the migration was done

00:03:29.330 --> 00:03:29.340
to ensure that the migration was done
 

00:03:29.340 --> 00:03:32.060
to ensure that the migration was done
correctly if you don't want to handle

00:03:32.060 --> 00:03:32.070
correctly if you don't want to handle
 

00:03:32.070 --> 00:03:33.680
correctly if you don't want to handle
migrations and you don't need to

00:03:33.680 --> 00:03:33.690
migrations and you don't need to
 

00:03:33.690 --> 00:03:36.230
migrations and you don't need to
preserve your database data call fall

00:03:36.230 --> 00:03:36.240
preserve your database data call fall
 

00:03:36.240 --> 00:03:38.210
preserve your database data call fall
back to destructive migrations when

00:03:38.210 --> 00:03:38.220
back to destructive migrations when
 

00:03:38.220 --> 00:03:40.880
back to destructive migrations when
building the database to destructively

00:03:40.880 --> 00:03:40.890
building the database to destructively
 

00:03:40.890 --> 00:03:43.280
building the database to destructively
recreate the database only from a

00:03:43.280 --> 00:03:43.290
recreate the database only from a
 

00:03:43.290 --> 00:03:45.949
recreate the database only from a
specific version on-call fall back to

00:03:45.949 --> 00:03:45.959
specific version on-call fall back to
 

00:03:45.959 --> 00:03:48.350
specific version on-call fall back to
destructive migration from then provide

00:03:48.350 --> 00:03:48.360
destructive migration from then provide
 

00:03:48.360 --> 00:03:49.670
destructive migration from then provide
the number for that version

00:03:49.670 --> 00:03:49.680
the number for that version
 

00:03:49.680 --> 00:03:52.160
the number for that version
so we have our entities downs database

00:03:52.160 --> 00:03:52.170
so we have our entities downs database
 

00:03:52.170 --> 00:03:54.500
so we have our entities downs database
and migrations how do we test them to

00:03:54.500 --> 00:03:54.510
and migrations how do we test them to
 

00:03:54.510 --> 00:03:56.420
and migrations how do we test them to
test the dolls you'll need to implement

00:03:56.420 --> 00:03:56.430
test the dolls you'll need to implement
 

00:03:56.430 --> 00:03:58.670
test the dolls you'll need to implement
an android a unit test that creates an

00:03:58.670 --> 00:03:58.680
an android a unit test that creates an
 

00:03:58.680 --> 00:04:00.949
an android a unit test that creates an
in-memory database the in-memory

00:04:00.949 --> 00:04:00.959
in-memory database the in-memory
 

00:04:00.959 --> 00:04:03.620
in-memory database the in-memory
database holds the data only for as long

00:04:03.620 --> 00:04:03.630
database holds the data only for as long
 

00:04:03.630 --> 00:04:05.840
database holds the data only for as long
as the process is alive meaning that

00:04:05.840 --> 00:04:05.850
as the process is alive meaning that
 

00:04:05.850 --> 00:04:07.670
as the process is alive meaning that
after every test the database is

00:04:07.670 --> 00:04:07.680
after every test the database is
 

00:04:07.680 --> 00:04:10.910
after every test the database is
destroyed to test asynchronous queries

00:04:10.910 --> 00:04:10.920
destroyed to test asynchronous queries
 

00:04:10.920 --> 00:04:13.490
destroyed to test asynchronous queries
use an instant task executor role to

00:04:13.490 --> 00:04:13.500
use an instant task executor role to
 

00:04:13.500 --> 00:04:17.300
use an instant task executor role to
execute each task synchronously in our

00:04:17.300 --> 00:04:17.310
execute each task synchronously in our
 

00:04:17.310 --> 00:04:18.979
execute each task synchronously in our
apps implementation you'll end up

00:04:18.979 --> 00:04:18.989
apps implementation you'll end up
 

00:04:18.989 --> 00:04:21.170
apps implementation you'll end up
referencing the dowels in other classes

00:04:21.170 --> 00:04:21.180
referencing the dowels in other classes
 

00:04:21.180 --> 00:04:24.200
referencing the dowels in other classes
to unit test those classes just smoke

00:04:24.200 --> 00:04:24.210
to unit test those classes just smoke
 

00:04:24.210 --> 00:04:26.440
to unit test those classes just smoke
the down or implement the fake version

00:04:26.440 --> 00:04:26.450
the down or implement the fake version
 

00:04:26.450 --> 00:04:29.450
the down or implement the fake version
here's another tip to implement espresso

00:04:29.450 --> 00:04:29.460
here's another tip to implement espresso
 

00:04:29.460 --> 00:04:31.700
here's another tip to implement espresso
tests covering code that uses

00:04:31.700 --> 00:04:31.710
tests covering code that uses
 

00:04:31.710 --> 00:04:34.250
tests covering code that uses
asynchronous queries extend the counting

00:04:34.250 --> 00:04:34.260
asynchronous queries extend the counting
 

00:04:34.260 --> 00:04:37.010
asynchronous queries extend the counting
task executor role to count the tasks as

00:04:37.010 --> 00:04:37.020
task executor role to count the tasks as
 

00:04:37.020 --> 00:04:40.219
task executor role to count the tasks as
they start and finish finally don't

00:04:40.219 --> 00:04:40.229
they start and finish finally don't
 

00:04:40.229 --> 00:04:42.980
they start and finish finally don't
forget to test the migrations export the

00:04:42.980 --> 00:04:42.990
forget to test the migrations export the
 

00:04:42.990 --> 00:04:44.990
forget to test the migrations export the
database schema first and then use

00:04:44.990 --> 00:04:45.000
database schema first and then use
 

00:04:45.000 --> 00:04:47.570
database schema first and then use
another hand apestrong the migration

00:04:47.570 --> 00:04:47.580
another hand apestrong the migration
 

00:04:47.580 --> 00:04:50.000
another hand apestrong the migration
test helper this class allows you to

00:04:50.000 --> 00:04:50.010
test helper this class allows you to
 

00:04:50.010 --> 00:04:51.350
test helper this class allows you to
create the database in an older version

00:04:51.350 --> 00:04:51.360
create the database in an older version
 

00:04:51.360 --> 00:04:54.680
create the database in an older version
and run and validate each migration all

00:04:54.680 --> 00:04:54.690
and run and validate each migration all
 

00:04:54.690 --> 00:04:56.270
and run and validate each migration all
you need to do is check that the data

00:04:56.270 --> 00:04:56.280
you need to do is check that the data
 

00:04:56.280 --> 00:04:58.219
you need to do is check that the data
you inserted in the other version is

00:04:58.219 --> 00:04:58.229
you inserted in the other version is
 

00:04:58.229 --> 00:05:02.180
you inserted in the other version is
also present after the migration okay so

00:05:02.180 --> 00:05:02.190
also present after the migration okay so
 

00:05:02.190 --> 00:05:04.310
also present after the migration okay so
let's summarize this let's swallow plate

00:05:04.310 --> 00:05:04.320
let's summarize this let's swallow plate
 

00:05:04.320 --> 00:05:07.190
let's summarize this let's swallow plate
code compile time check queries ease of

00:05:07.190 --> 00:05:07.200
code compile time check queries ease of
 

00:05:07.200 --> 00:05:09.020
code compile time check queries ease of
implementing migrations

00:05:09.020 --> 00:05:09.030
implementing migrations
 

00:05:09.030 --> 00:05:11.210
implementing migrations
idea of testability and checks for

00:05:11.210 --> 00:05:11.220
idea of testability and checks for
 

00:05:11.220 --> 00:05:12.800
idea of testability and checks for
keeping the database worked away from

00:05:12.800 --> 00:05:12.810
keeping the database worked away from
 

00:05:12.810 --> 00:05:15.230
keeping the database worked away from
the main threat all of these qualities

00:05:15.230 --> 00:05:15.240
the main threat all of these qualities
 

00:05:15.240 --> 00:05:17.780
the main threat all of these qualities
of room make it easier and more pleasant

00:05:17.780 --> 00:05:17.790
of room make it easier and more pleasant
 

00:05:17.790 --> 00:05:19.820
of room make it easier and more pleasant
to work with databases helping you

00:05:19.820 --> 00:05:19.830
to work with databases helping you
 

00:05:19.830 --> 00:05:20.980
to work with databases helping you
deliver better apps

00:05:20.980 --> 00:05:20.990
deliver better apps
 

00:05:20.990 --> 00:05:25.170
deliver better apps
[Applause]

00:05:25.170 --> 00:05:25.180
 

00:05:25.180 --> 00:05:27.240
you

