WEBVTT
Kind: captions
Language: en

00:00:00.190 --> 00:00:02.830
For most applications that
you'll want to create,

00:00:02.830 --> 00:00:06.130
you'll want to have some concept of
users to provide security and custom

00:00:06.130 --> 00:00:10.260
information based on each individual
person using your application.

00:00:10.260 --> 00:00:11.370
So for this exercise,

00:00:11.370 --> 00:00:15.580
I will create a new models.py
file with a user class like so.

00:00:15.580 --> 00:00:20.470
It is not considered a safe practice to
store actual passwords in your database.

00:00:20.470 --> 00:00:23.376
For this reason, I will store
the hash of a user password.

00:00:23.376 --> 00:00:26.929
A hash is the result of a mathematical
algorithm that can be used to map

00:00:26.929 --> 00:00:30.680
digital data of arbitrary size
to digital data of a fixed size.

00:00:30.680 --> 00:00:34.000
If my user database were to be
compromised or opened by an attacker,

00:00:34.000 --> 00:00:38.370
it would be extremely hard to decode
the real passwords from the hashes.

00:00:38.370 --> 00:00:40.840
Hashing algorithms
are one-way functions,

00:00:40.840 --> 00:00:44.490
meaning that they can only be used to
generate a hash from a password, but

00:00:44.490 --> 00:00:46.600
they cannot be used in
the reverse direction.

00:00:47.600 --> 00:00:50.020
These algorithms are also deterministic.

00:00:50.020 --> 00:00:51.830
This means that given the same inputs,

00:00:51.830 --> 00:00:54.040
they will always generate
the same output.

00:00:54.040 --> 00:00:58.100
In order to create these hashes,
I will use a library called Passlib,

00:00:58.100 --> 00:01:00.565
a package dedicated to password hashing.

00:01:00.565 --> 00:01:03.770
Passlib provides several hashing
algorithms to choose from.

00:01:03.770 --> 00:01:09.090
The custom app context object is an easy
to use option based on the SHA256

00:01:09.090 --> 00:01:10.400
hashing algorithm.

00:01:10.400 --> 00:01:11.700
To add password hashing and

00:01:11.700 --> 00:01:15.640
verification, I'm going to add two
new methods to the user model.

00:01:15.640 --> 00:01:17.602
I'll use them later on in my code.

00:01:17.602 --> 00:01:22.220
This hash_password method takes in
a plain password as an argument, and

00:01:22.220 --> 00:01:24.660
stores a hash of it in the user table.

00:01:24.660 --> 00:01:28.790
This method will also be called when a
new user is registering with the server

00:01:28.790 --> 00:01:30.860
or if the user changes her password.

00:01:30.860 --> 00:01:34.660
This verify_password method takes
a plain password as the argument and

00:01:34.660 --> 00:01:38.690
returns true if the password is correct,
or false if it's not.

00:01:38.690 --> 00:01:41.750
This method is called whenever the user
provides credentials that they need to

00:01:41.750 --> 00:01:43.190
be validated.

00:01:43.190 --> 00:01:45.830
All Passlib needs to do
to verify a password

00:01:45.830 --> 00:01:49.650
is to hash it with the same function
that was used during registration and

00:01:49.650 --> 00:01:53.540
then compare the resulting hash against
the ones stored in the database.

00:01:53.540 --> 00:01:56.550
This means that we never have to store
a real password in our database.

