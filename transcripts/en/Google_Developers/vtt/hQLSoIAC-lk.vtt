WEBVTT
Kind: captions
Language: en

00:00:00.940 --> 00:00:03.200
The next topic that I'll be
speaking about is going to be

00:00:03.200 --> 00:00:05.330
managing your application.

00:00:05.330 --> 00:00:08.290
And what this means is when
something is not going as

00:00:08.290 --> 00:00:11.650
planned, how do you
troubleshoot that?

00:00:11.650 --> 00:00:14.730
Where do you look, and
what do you do?

00:00:14.730 --> 00:00:17.390
And finally, how would you
control some of the details

00:00:17.390 --> 00:00:20.670
about budgeting your
application?

00:00:20.670 --> 00:00:24.200
With troubleshooting, we'll
discuss the System Status page

00:00:24.200 --> 00:00:27.020
and how to use the
Admin Console.

00:00:27.020 --> 00:00:30.020
There's a lot of information
about the quota.

00:00:30.020 --> 00:00:33.390
How you would set it,
how you'd use it.

00:00:33.390 --> 00:00:36.450
And then lastly, we'll
discuss how and why

00:00:36.450 --> 00:00:38.150
you'd enable billing.

00:00:38.150 --> 00:00:41.390
And once you're billing is
enabled, how you'd set the

00:00:41.390 --> 00:00:44.170
different budgets for
your application.

00:00:44.170 --> 00:00:46.970
We'll also touch a little on
how this relates and the

00:00:46.970 --> 00:00:50.830
differences between a premier
account and a standard online

00:00:50.830 --> 00:00:53.380
billed application.

00:00:53.380 --> 00:00:56.370
So if something stopped in your
Legacy environment, you

00:00:56.370 --> 00:00:58.190
could actually log into
your server and

00:00:58.190 --> 00:00:59.970
see a lot of details--

00:00:59.970 --> 00:01:02.750
the operating system,
the app, how it's

00:01:02.750 --> 00:01:04.860
running, what it's doing.

00:01:04.860 --> 00:01:08.730
But in the cloud, you lose
a little bit of control.

00:01:08.730 --> 00:01:11.670
We still provide a lot of tools
that we give you so that

00:01:11.670 --> 00:01:14.850
you can troubleshoot your
application and identify where

00:01:14.850 --> 00:01:17.560
those problems are, but there's
a different way of

00:01:17.560 --> 00:01:19.560
thinking about things.

00:01:19.560 --> 00:01:23.240
If nothing else, you could be
sitting in any data center.

00:01:23.240 --> 00:01:25.450
If you think about a traditional
environment having

00:01:25.450 --> 00:01:28.930
to aggregate those logs and
present them in one common

00:01:28.930 --> 00:01:32.250
format, it would be
very challenging.

00:01:32.250 --> 00:01:36.300
And so what we strive very
hard to do is to keep it

00:01:36.300 --> 00:01:38.970
simple so that you can leverage
the power of our

00:01:38.970 --> 00:01:41.560
infrastructure without
having to worry about

00:01:41.560 --> 00:01:44.340
tweaking a lot of knobs.

00:01:44.340 --> 00:01:47.560
So now, I'd like to talk a
little bit about where you'd

00:01:47.560 --> 00:01:50.930
look when problems do arise.

00:01:50.930 --> 00:01:53.400
If your application's returning
errors in every

00:01:53.400 --> 00:01:55.290
request, the first thing
you want to do

00:01:55.290 --> 00:01:57.362
is check a few things.

00:01:57.362 --> 00:02:00.590
The first is, is your
application actually running?

00:02:00.590 --> 00:02:02.990
Did you have a different
version deployed?

00:02:02.990 --> 00:02:06.740
Is the default version the right
version that you have?

00:02:06.740 --> 00:02:09.590
But then you would very quickly
look to see if you

00:02:09.590 --> 00:02:12.150
have any errors in your log.

00:02:12.150 --> 00:02:14.370
We aggregate all the
logs in the Admin

00:02:14.370 --> 00:02:16.630
Page for every request.

00:02:16.630 --> 00:02:19.370
In fact, we even keep track of a
lot of the requests that are

00:02:19.370 --> 00:02:22.290
served out of our edge caching
infrastructure.

00:02:22.290 --> 00:02:25.320
Obviously, those won't be any
of the source of dynamic

00:02:25.320 --> 00:02:28.970
errors, and we present that
all in a near real-time

00:02:28.970 --> 00:02:31.060
information.

00:02:31.060 --> 00:02:35.200
If App Engine itself is down,
we also have the Google App

00:02:35.200 --> 00:02:37.510
Engine Notify groups.

00:02:37.510 --> 00:02:41.560
Your application at any one time
is currently only served

00:02:41.560 --> 00:02:43.580
out of a single data center.

00:02:43.580 --> 00:02:46.580
We do that for latency
reasons.

00:02:46.580 --> 00:02:50.880
One is that if you're using
Cloud SQL, for example, we

00:02:50.880 --> 00:02:55.070
want to make sure that it's in
the same data center, but that

00:02:55.070 --> 00:02:58.920
all the ancillary services are
living with your application.

00:02:58.920 --> 00:03:02.130
And we failover very seamlessly

00:03:02.130 --> 00:03:04.060
between data centers.

00:03:04.060 --> 00:03:07.140
But the important thing to note
is that your application

00:03:07.140 --> 00:03:11.310
is currently only running in
one data center at a time.

00:03:11.310 --> 00:03:14.040
So when you're troubleshooting
things, you don't have to

00:03:14.040 --> 00:03:16.070
worry about different data
centers to look at.

00:03:19.020 --> 00:03:22.060
App Engine could possibly be
down in one data center, and

00:03:22.060 --> 00:03:24.940
all the applications could be
served over in a different

00:03:24.940 --> 00:03:26.920
data center very quickly.

00:03:26.920 --> 00:03:30.320
The Google App Engine Downtime
Notify tells you if there's a

00:03:30.320 --> 00:03:32.260
system-wide issue.

00:03:32.260 --> 00:03:35.570
You also see our Status
Dashboard, which shows

00:03:35.570 --> 00:03:38.610
aggregated metrics from apps
that we have running in

00:03:38.610 --> 00:03:40.440
different data centers.

00:03:40.440 --> 00:03:43.090
We're trying to give you a
snapshot of what's different

00:03:43.090 --> 00:03:46.250
at our infrastructure, and you
can see in your individual

00:03:46.250 --> 00:03:49.300
application it might
be different.

00:03:49.300 --> 00:03:53.280
Here's what the App Engine Admin
Console looks like, and

00:03:53.280 --> 00:03:55.940
this will tell you a
lot of information.

00:03:55.940 --> 00:03:59.120
Just simply, is your application
serving, how many

00:03:59.120 --> 00:04:02.910
different instances it has
running, and the average query

00:04:02.910 --> 00:04:04.930
per second, or QPS.

00:04:04.930 --> 00:04:06.000
It's great.

00:04:06.000 --> 00:04:07.980
It's what I always look at
first when I'm trying to

00:04:07.980 --> 00:04:09.230
troubleshoot a problem.

00:04:09.230 --> 00:04:12.070
And what you'll see very quickly
is if you've run out

00:04:12.070 --> 00:04:14.690
of quota, it's going to actually
show you the quota

00:04:14.690 --> 00:04:16.490
that you've run out of.

00:04:16.490 --> 00:04:18.829
And if there's additional quotas
that aren't shown on

00:04:18.829 --> 00:04:22.430
the Dashboard Page that you've
run into, it will actually add

00:04:22.430 --> 00:04:24.770
them to the bottom of the
screen and show a little

00:04:24.770 --> 00:04:27.420
exclamation mark notifying
you that you've

00:04:27.420 --> 00:04:29.800
hit some errors there.

00:04:29.800 --> 00:04:33.080
Perhaps the most important
page is that dashboard.

00:04:33.080 --> 00:04:36.660
The next one was instances
discussed earlier.

00:04:36.660 --> 00:04:39.000
And thirdly is the logs.

00:04:39.000 --> 00:04:41.200
There's a lot of great
information in those logs that

00:04:41.200 --> 00:04:44.440
cover what your application
is doing, who accessed the

00:04:44.440 --> 00:04:47.070
application and from which IP.

00:04:47.070 --> 00:04:49.960
If the instance is still
running, then you can also see

00:04:49.960 --> 00:04:52.330
inside that log a link
straight to the

00:04:52.330 --> 00:04:54.430
logs for that instance.

00:04:54.430 --> 00:04:57.500
So now, if you see an error
that's happening, you can very

00:04:57.500 --> 00:04:59.880
quickly see what's causing
the problem.

00:04:59.880 --> 00:05:02.390
And just like in a traditional
environment running in

00:05:02.390 --> 00:05:05.440
individual machines, it's not
unheard of for an individual

00:05:05.440 --> 00:05:07.320
machine to actually
have problems.

00:05:07.320 --> 00:05:10.530
We see that from time to time,
and we try to catch all those

00:05:10.530 --> 00:05:13.280
challenges or those
bugs on our side.

00:05:13.280 --> 00:05:16.050
And not even letting us
deploy application.

00:05:16.050 --> 00:05:19.280
And that's how we use the App
Master to coordinate which

00:05:19.280 --> 00:05:21.670
servers are currently hosting
applications in our

00:05:21.670 --> 00:05:22.910
environment.

00:05:22.910 --> 00:05:25.840
But in some cases, there might
be corrupt memory.

00:05:25.840 --> 00:05:28.530
There might be something wrong
with that local disk drive,

00:05:28.530 --> 00:05:31.400
and your application may be
spinning some errors.

00:05:31.400 --> 00:05:34.560
And if you see a lot of errors
from one instance, you can

00:05:34.560 --> 00:05:37.960
shut down that instance, and it
will spin a new instance up

00:05:37.960 --> 00:05:40.080
on a different machine.

00:05:40.080 --> 00:05:43.380
Now, that's very rare, but it
may happen, and so it's

00:05:43.380 --> 00:05:44.940
something to look into.

00:05:44.940 --> 00:05:48.470
If you see this a lot, or if you
notice it, we'd appreciate

00:05:48.470 --> 00:05:51.180
it if you could open a support
ticket so that we could

00:05:51.180 --> 00:05:53.920
identify which ones were causing
errors and why it

00:05:53.920 --> 00:05:56.640
caused errors that our system
didn't catch so that we can

00:05:56.640 --> 00:05:58.460
improve the server so
that it doesn't

00:05:58.460 --> 00:06:01.540
slip through the cracks.

00:06:01.540 --> 00:06:03.580
So let's discuss the logs.

00:06:03.580 --> 00:06:06.440
Whenever you express those tech
issues, obviously there's

00:06:06.440 --> 00:06:09.000
going to be a lot of information
in the logs.

00:06:09.000 --> 00:06:14.800
We store a free 1 gigabyte of
data at a timeline of 90 days.

00:06:14.800 --> 00:06:17.730
If you want to store more or
longer, we just charge you at

00:06:17.730 --> 00:06:21.835
$0.24 per gigabyte per month,
and you can use APIs to pull

00:06:21.835 --> 00:06:24.820
those logs and keep them
on a separate system.

00:06:24.820 --> 00:06:27.830
A lot of companies copy their
logs over to Google Cloud

00:06:27.830 --> 00:06:31.420
Storage for our long term
storage where you can do some

00:06:31.420 --> 00:06:35.010
transformation, import them
into BigQuery and do some

00:06:35.010 --> 00:06:37.220
analytics across them.

00:06:37.220 --> 00:06:41.090
In addition to just the simple
logs, you can do a system.out

00:06:41.090 --> 00:06:44.610
to write to the logs if you
specify that the log handler

00:06:44.610 --> 00:06:49.510
should be at a level info or
lower, meaning info debugging.

00:06:49.510 --> 00:06:51.770
Otherwise, you can also write
straight to the log with a

00:06:51.770 --> 00:06:54.040
normal logging mechanism.

00:06:54.040 --> 00:06:56.810
But since we do charge for
that storage, I would

00:06:56.810 --> 00:06:59.400
recommend against storing a
lot of information for all

00:06:59.400 --> 00:07:01.400
your production applications.

00:07:01.400 --> 00:07:05.500
It might make sense to do some
testing and then lower the log

00:07:05.500 --> 00:07:07.710
just for the same reason
you do that in a local

00:07:07.710 --> 00:07:09.410
environment.

00:07:09.410 --> 00:07:11.150
Now when you look at the
logs, there's a few

00:07:11.150 --> 00:07:12.430
things to keep in mind.

00:07:12.430 --> 00:07:15.450
We do present the millisecond
response time.

00:07:15.450 --> 00:07:19.100
The CPU response time also
in milliseconds.

00:07:19.100 --> 00:07:20.520
And then the cost.

00:07:20.520 --> 00:07:23.620
We touch more on how you'd
estimate those costs later,

00:07:23.620 --> 00:07:26.290
but this gives you a
relative indicator.

00:07:26.290 --> 00:07:28.830
So if you're trying two
different functions out, you

00:07:28.830 --> 00:07:31.290
could see if one ends
up costing more.

00:07:31.290 --> 00:07:34.400
That means that it spends more
time processing it and

00:07:34.400 --> 00:07:36.650
therefore is more expensive
whether or not it may have

00:07:36.650 --> 00:07:40.310
been faster for a variety
of different reasons.

00:07:40.310 --> 00:07:43.330
Perhaps you're doing API request
to other libraries or

00:07:43.330 --> 00:07:46.750
a URL fetch the could have
added a lot of delay, but

00:07:46.750 --> 00:07:50.760
doesn't actually require compute
processing power.

00:07:50.760 --> 00:07:53.620
What do you think is one of the
most common issues we see

00:07:53.620 --> 00:07:56.450
across the board?

00:07:56.450 --> 00:08:00.400
What most people do is launch
their app, and they think they

00:08:00.400 --> 00:08:02.280
could scale infinitely.

00:08:02.280 --> 00:08:04.930
But they forgot to enable
billing, and they wonder why

00:08:04.930 --> 00:08:08.990
it stops working after a certain
amount of requests.

00:08:08.990 --> 00:08:12.600
We have a whole quota system,
and there's good reason why.

00:08:12.600 --> 00:08:15.960
It's not just for the billing
purpose, but since we have a

00:08:15.960 --> 00:08:18.910
shared infrastructure, we want
to make sure that everybody

00:08:18.910 --> 00:08:21.110
has enough room to
grow and play.

00:08:21.110 --> 00:08:23.360
And so, we have some built-in
quotas that

00:08:23.360 --> 00:08:25.270
you can consume against.

00:08:25.270 --> 00:08:27.620
This would be things such
as incoming and outgoing

00:08:27.620 --> 00:08:31.500
bandwidth, the Datastore usage,
the different amounts

00:08:31.500 --> 00:08:34.659
of mail that you could send, but
we also have others like

00:08:34.659 --> 00:08:36.880
the static code that
you've stored.

00:08:36.880 --> 00:08:39.530
In fact, if you look at the
quota detail page, there's a

00:08:39.530 --> 00:08:42.450
huge list of different things
we have quotas for.

00:08:42.450 --> 00:08:45.850
A quota exceeded error is just
simply that you've run out of

00:08:45.850 --> 00:08:48.800
a quota in one of these buckets
when you've tried to

00:08:48.800 --> 00:08:50.280
perform the operation.

00:08:50.280 --> 00:08:53.200
So it's entirely possible that
you have a lot of quota left

00:08:53.200 --> 00:08:56.410
over for actually running
the application.

00:08:56.410 --> 00:09:00.390
For example, perhaps this task
queue you've hit 100,000

00:09:00.390 --> 00:09:03.460
times, and you've hit the quota
limit for it, so the

00:09:03.460 --> 00:09:05.450
task queue starts
throwing errors.

00:09:05.450 --> 00:09:08.060
So you might think that
something's wrong in the

00:09:08.060 --> 00:09:09.550
infrastructure.

00:09:09.550 --> 00:09:12.330
It takes you a while to finally
realize that you've

00:09:12.330 --> 00:09:14.770
just run out of task
queue quota.

00:09:14.770 --> 00:09:17.880
It would have been very simple
if you went to the dashboard,

00:09:17.880 --> 00:09:21.040
but then maybe they went
straight to the logs.

00:09:21.040 --> 00:09:22.310
Start digging.

00:09:22.310 --> 00:09:24.150
That's why you want to
look at the dashboard

00:09:24.150 --> 00:09:25.700
first before the logs.

00:09:28.220 --> 00:09:30.740
We have a couple of different
types of quotas which could

00:09:30.740 --> 00:09:33.610
confusing to new developers
in the cloud platform.

00:09:33.610 --> 00:09:35.810
We have two different types.

00:09:35.810 --> 00:09:39.200
We have a daily quota where I
think of it as a bunch of

00:09:39.200 --> 00:09:42.550
tokens in a bucket, and every
time you perform a task, it

00:09:42.550 --> 00:09:44.820
pulls a token from
that bucket.

00:09:44.820 --> 00:09:47.110
And if you've run out over
the period of the day,

00:09:47.110 --> 00:09:48.500
then you've run out.

00:09:48.500 --> 00:09:51.670
You have to wait for the next
reset period, which happens at

00:09:51.670 --> 00:09:54.300
10 AM Pacific Time.

00:09:54.300 --> 00:09:57.650
We also have a per-minute quota,
and the reason why we

00:09:57.650 --> 00:10:01.040
do this is we don't want one app
to drain all the resources

00:10:01.040 --> 00:10:02.520
in a data center.

00:10:02.520 --> 00:10:05.200
Believe it or not, that's
entirely possible.

00:10:05.200 --> 00:10:08.340
We use the same infrastructure
for our web crawler that we

00:10:08.340 --> 00:10:10.130
use for the URL fetch.

00:10:10.130 --> 00:10:12.610
So we put these quotas on
there so that you can't

00:10:12.610 --> 00:10:14.980
consume too fast
in one minute.

00:10:14.980 --> 00:10:18.000
The same as the concept as the
daily token or the daily

00:10:18.000 --> 00:10:21.510
bucket, is we have a bucket for
each minute that we keep

00:10:21.510 --> 00:10:24.710
throwing tokens in every single
minute, and then you

00:10:24.710 --> 00:10:25.810
pull from that.

00:10:25.810 --> 00:10:28.320
And if you've run out in a
minute, you just have to wait

00:10:28.320 --> 00:10:31.570
for that minute to finish to
replenish that bucket.

00:10:31.570 --> 00:10:33.610
And then you continue
processing.

00:10:33.610 --> 00:10:36.130
Now we have usually two
different limits.

00:10:36.130 --> 00:10:39.160
We have one limit for free apps
and a different limit for

00:10:39.160 --> 00:10:40.590
billed apps.

00:10:40.590 --> 00:10:43.980
Once you enable billing, we have
your credit card, we know

00:10:43.980 --> 00:10:46.550
who you are, so we trust
you a little more.

00:10:46.550 --> 00:10:49.270
And we know who to knock on
the door, so to speak, if

00:10:49.270 --> 00:10:52.010
something goes wrong or a
card that we can charge.

00:10:52.010 --> 00:10:54.240
So that's why you'll see
two different limits.

00:10:54.240 --> 00:10:57.580
But almost all of the limits
that we have are completely

00:10:57.580 --> 00:10:58.930
soft limits.

00:10:58.930 --> 00:11:01.120
And so, if there's an
application that, for example,

00:11:01.120 --> 00:11:03.790
needs to open a million channel
calls in a minute

00:11:03.790 --> 00:11:06.580
because you have a huge site
that a lot of people are going

00:11:06.580 --> 00:11:09.300
to connect to, we
can handle that.

00:11:09.300 --> 00:11:11.710
Just you need to talk to us so
that we can understand what

00:11:11.710 --> 00:11:12.950
you're trying to do.

00:11:12.950 --> 00:11:15.980
And when you're doing it at that
scale, a lot of times we

00:11:15.980 --> 00:11:18.480
might ask a few questions to
make sure that you're doing it

00:11:18.480 --> 00:11:20.350
appropriately and
not trying to do

00:11:20.350 --> 00:11:22.810
something kind of abusive.

00:11:22.810 --> 00:11:25.130
Or maybe there's a better
way to do it that

00:11:25.130 --> 00:11:26.610
we can talk to you.

00:11:26.610 --> 00:11:29.060
The way you would open those,
or talk to us, would be

00:11:29.060 --> 00:11:31.890
typically through our Premier
support, opening a ticket

00:11:31.890 --> 00:11:32.940
through that.

00:11:32.940 --> 00:11:35.670
And so, I can't stress enough
that I keep mentioning you'd

00:11:35.670 --> 00:11:39.020
want to open a ticket or you'd
want to talk to us.

00:11:39.020 --> 00:11:42.360
The best way to do that is by
having a Premier account.

00:11:42.360 --> 00:11:45.140
If you guys don't have a Premier
account, I recommend

00:11:45.140 --> 00:11:48.590
doing it, getting through the
process of getting that set up

00:11:48.590 --> 00:11:51.290
so you can submit tickets and
our team can interact with you

00:11:51.290 --> 00:11:52.880
very efficiently.

00:11:52.880 --> 00:11:56.440
One additional suggestion, you
can specify your application

00:11:56.440 --> 00:11:58.480
either single-thread
or multi-thread.

00:11:58.480 --> 00:12:01.390
If your code could handle
multiple threads, obviously

00:12:01.390 --> 00:12:03.390
it's much more efficient
to do that.

00:12:03.390 --> 00:12:05.900
Otherwise, your single instance
can only respond to

00:12:05.900 --> 00:12:08.050
one request at a time.

00:12:08.050 --> 00:12:11.000
Ultimately, it tends to cost
less for a multi-threaded

00:12:11.000 --> 00:12:13.270
application.

00:12:13.270 --> 00:12:16.170
So let's talk about quotas
for incoming and outgoing

00:12:16.170 --> 00:12:18.840
bandwidth, and this is just
one example from our

00:12:18.840 --> 00:12:19.910
documentation.

00:12:19.910 --> 00:12:23.550
As I mentioned, we have lots of
quotas, and so you have to

00:12:23.550 --> 00:12:25.540
go online to see all of them.

00:12:25.540 --> 00:12:28.920
But here's where we could
specify if we have outgoing

00:12:28.920 --> 00:12:32.700
bandwidths for the free limit
and then for billing-enabled.

00:12:32.700 --> 00:12:35.050
So you'll see that daily
limit go from a

00:12:35.050 --> 00:12:37.690
gigabyte to 14 terabytes.

00:12:37.690 --> 00:12:42.180
Just a small jump, but also from
56 megs a minute to 10

00:12:42.180 --> 00:12:43.150
gigs a minute.

00:12:43.150 --> 00:12:46.900
So we actually, even once you've
enabled billing, we

00:12:46.900 --> 00:12:48.990
already have a pretty
high quota.

00:12:48.990 --> 00:12:50.800
We just need to talk
to support and see

00:12:50.800 --> 00:12:52.100
how you can do that.

00:12:52.100 --> 00:12:55.130
And by the way, if you plan on
launching on Monday, don't

00:12:55.130 --> 00:12:56.590
open a ticket on Friday night.

00:12:56.590 --> 00:12:59.050
Give us at least a week
at a minimum.

00:12:59.050 --> 00:13:02.020
The longer you give us, the
better, because it sometimes

00:13:02.020 --> 00:13:04.820
has to involve engineering, and
they actually sometimes

00:13:04.820 --> 00:13:05.730
have to change code.

00:13:05.730 --> 00:13:09.000
Because if we're going over a
big spike, we'll create a

00:13:09.000 --> 00:13:14.420
whole new bucket system for
maybe just your app.

00:13:14.420 --> 00:13:17.670
So again, free incoming
bandwidth, same thing.

00:13:17.670 --> 00:13:20.210
Since we don't have the same
abuse issues for incoming

00:13:20.210 --> 00:13:23.800
bandwidth, meaning as we would
for outgoing, we've obviously

00:13:23.800 --> 00:13:25.080
higher limits.

00:13:25.080 --> 00:13:27.720
And a lot of things, too, is
from an infrastructure

00:13:27.720 --> 00:13:28.660
perspective.

00:13:28.660 --> 00:13:32.190
We have more data going out than
we do in, so it's a lot

00:13:32.190 --> 00:13:35.070
easier for us to say, sure, go
ahead and send it since our

00:13:35.070 --> 00:13:37.910
pipes are bidirectional.

00:13:37.910 --> 00:13:41.700
So here's the details page for
quotas, and this is where it

00:13:41.700 --> 00:13:44.760
lists a huge variety of
quotas that we have.

00:13:44.760 --> 00:13:47.690
And there's many more that
aren't even shown here that we

00:13:47.690 --> 00:13:51.410
can see internally just so it
doesn't confuse you as well as

00:13:51.410 --> 00:13:54.020
tell us more about our
infrastructure.

00:13:54.020 --> 00:13:56.530
But this should give you a good
snapshot of where you are

00:13:56.530 --> 00:13:57.550
in your quota.

00:13:57.550 --> 00:14:00.740
What this shows is the daily
quota, and typically, we'll

00:14:00.740 --> 00:14:03.340
show you the free, and a lot of
times you'll see the free

00:14:03.340 --> 00:14:05.900
consumption here, and
it will show red.

00:14:05.900 --> 00:14:08.460
But that just means that you
start paying for that.

00:14:08.460 --> 00:14:11.330
And there'll maybe be another
entry later that says, but

00:14:11.330 --> 00:14:13.930
your larger quota
may be greater.

00:14:13.930 --> 00:14:16.830
Know that this may slightly
different between the online

00:14:16.830 --> 00:14:20.380
billing and a Premier-enabled
account.

00:14:20.380 --> 00:14:23.295
So how would you handle these
quota errors that you get?

00:14:23.295 --> 00:14:26.670
But you can also catch these
exceptions as they happen.

00:14:26.670 --> 00:14:29.690
So for example, if your
application still works fine,

00:14:29.690 --> 00:14:32.420
but your task queue runs out
of quota, you could handle

00:14:32.420 --> 00:14:33.900
that gracefully.

00:14:33.900 --> 00:14:38.040
And the way you do that is in
Java, we throw over quota

00:14:38.040 --> 00:14:38.810
exceptions.

00:14:38.810 --> 00:14:42.630
Or in Python, we give it
an over quota error.

00:14:42.630 --> 00:14:44.810
So you're always going to
want to check it in your

00:14:44.810 --> 00:14:46.900
application when you've
run into this.

00:14:46.900 --> 00:14:50.020
If you're using the task queue,
for example, it may

00:14:50.020 --> 00:14:52.680
throw an error which you'll just
put it back in the task

00:14:52.680 --> 00:14:54.660
queue and will retry later.

00:14:54.660 --> 00:14:57.520
So maybe that's an acceptable
thing, to just simply let

00:14:57.520 --> 00:15:01.470
throw a non-success code
for the HTTP request.

00:15:01.470 --> 00:15:04.300
But just keep in mind of
the cost benefit of it.

00:15:04.300 --> 00:15:07.600
Is it really worth doing all
this capturing of errors in

00:15:07.600 --> 00:15:11.100
order to provide the
experience I want?

00:15:11.100 --> 00:15:13.360
So you've hit quota errors.

00:15:13.360 --> 00:15:15.820
Like I talked about earlier,
if you haven't enabled

00:15:15.820 --> 00:15:18.520
billing, you're going to
have lower quotas.

00:15:18.520 --> 00:15:22.320
So the first thing you want
to do is enable billing.

00:15:22.320 --> 00:15:25.980
Then you can set a budget on
the different resources.

00:15:25.980 --> 00:15:29.110
Something to consider, though,
is you don't have the ability

00:15:29.110 --> 00:15:32.920
to set maximum charges
on your application.

00:15:32.920 --> 00:15:36.240
If you have a new developer in
your team that launches a task

00:15:36.240 --> 00:15:38.730
queue with an endless loop
that spins up a lot of

00:15:38.730 --> 00:15:41.790
instances, for example, you're
going to pay for that, and

00:15:41.790 --> 00:15:44.200
there's no way to stop that.

00:15:44.200 --> 00:15:47.580
I've seen a lot of customers do
development on online apps,

00:15:47.580 --> 00:15:50.090
and most of development
can be free if they

00:15:50.090 --> 00:15:51.770
don't hit the quotas.

00:15:51.770 --> 00:15:54.450
Their only production
applications are in their

00:15:54.450 --> 00:15:55.970
Premier account.

00:15:55.970 --> 00:15:58.240
That's certainly a way
of addressing it.

00:15:58.240 --> 00:16:01.680
So when I talk about setting
a budget, that doesn't just

00:16:01.680 --> 00:16:04.560
apply to Premier accounts.

00:16:04.560 --> 00:16:07.650
So you'd enable the billing by
going to the Admin Console,

00:16:07.650 --> 00:16:11.210
and then the Billing Status, and
then just enable billing.

00:16:11.210 --> 00:16:13.820
And when you do that, it
actually uses our Google

00:16:13.820 --> 00:16:16.990
Wallet now to get your credit
card information and start

00:16:16.990 --> 00:16:20.200
billing you, so you'll have to
have a Google Wallet account

00:16:20.200 --> 00:16:21.590
in order to do this.

00:16:21.590 --> 00:16:24.450
And we'll charge the credit
card, but what's nice is if

00:16:24.450 --> 00:16:27.950
you go to Wallet, you can also
see the past invoices, as well

00:16:27.950 --> 00:16:29.620
as on the app console.

00:16:29.620 --> 00:16:32.720
You'll see all the information
there.

00:16:32.720 --> 00:16:35.370
All the different usage we have
has corresponding dollar

00:16:35.370 --> 00:16:36.470
amounts with it.

00:16:36.470 --> 00:16:39.350
And once you enable billing,
you still get all your free

00:16:39.350 --> 00:16:42.350
quotas, and we only start
charging you once you go

00:16:42.350 --> 00:16:44.710
beyond that free quota.

00:16:44.710 --> 00:16:47.780
Also worth noting is that if
you have billing enabled,

00:16:47.780 --> 00:16:52.090
we'll charge you a minimum of
$2.10 a week, and any usage

00:16:52.090 --> 00:16:54.920
that your app has will be
subtracted from that.

00:16:54.920 --> 00:16:59.150
So for example, if you have $5
in usage, you only pay $5

00:16:59.150 --> 00:17:02.180
because that's more
than $2.10.

00:17:02.180 --> 00:17:04.900
If you have zero usage for that
week, you'll still be

00:17:04.900 --> 00:17:07.310
charged $2.10.

00:17:07.310 --> 00:17:10.829
And once you enable billing,
it's just over in our system

00:17:10.829 --> 00:17:12.550
making sure that it's serious.

00:17:12.550 --> 00:17:15.230
And there's also abuse
vectors inside here.

00:17:15.230 --> 00:17:18.250
So for example, once you enable
billing, we wait until

00:17:18.250 --> 00:17:20.840
a certain number of our charges
have cleared so that

00:17:20.840 --> 00:17:23.680
we know the credit card is valid
before we allow you to

00:17:23.680 --> 00:17:25.750
send a large number of emails.

00:17:25.750 --> 00:17:28.710
We've noticed by doing that, it
cut down significantly on

00:17:28.710 --> 00:17:31.540
spammers using our system
to send email.

00:17:31.540 --> 00:17:33.510
So there's also reasons
for that, and

00:17:33.510 --> 00:17:36.200
that's part of the $2.10.

00:17:36.200 --> 00:17:38.930
Frankly, we're not getting
rich off of the $2.10.

00:17:38.930 --> 00:17:41.660
It's just to gate people that
aren't serious about this and

00:17:41.660 --> 00:17:45.360
would commit fraud from actually
enabling billing.

00:17:45.360 --> 00:17:48.340
If you have more than 1 gig in
your logs, for example, you

00:17:48.340 --> 00:17:50.340
have to enable billing
in or just do that.

00:17:50.340 --> 00:17:51.940
You also have certain
features.

00:17:51.940 --> 00:17:56.080
Like the minimum max idle
instances, I think, might be

00:17:56.080 --> 00:17:58.810
something you'd need billing
enabled for.

00:17:58.810 --> 00:18:01.850
There's some tweaks like that
when you go into your app, if

00:18:01.850 --> 00:18:04.500
it doesn't work exactly the way
your production app does,

00:18:04.500 --> 00:18:08.450
it might be because the billing
is not enabled.

00:18:08.450 --> 00:18:10.980
Now for the Frontend
Instance Hours.

00:18:10.980 --> 00:18:13.640
This is confusing to some people
because of the invoices

00:18:13.640 --> 00:18:14.690
in the billing.

00:18:14.690 --> 00:18:17.440
We only charge instance hours.

00:18:17.440 --> 00:18:21.020
We don't charge instance
sizes.

00:18:21.020 --> 00:18:23.950
And the way we do that
is every multiple.

00:18:23.950 --> 00:18:27.400
What you can do then, once
you've enabled billing, is you

00:18:27.400 --> 00:18:30.700
can set a daily max budget, and
that's very helpful for

00:18:30.700 --> 00:18:34.240
situations where you have an
endless loop, or a mistake, or

00:18:34.240 --> 00:18:36.840
you accidentally started writing
billions of objects in

00:18:36.840 --> 00:18:39.480
the Datastore, then you
have to go back

00:18:39.480 --> 00:18:41.140
and delete all those.

00:18:41.140 --> 00:18:43.950
The way to prevent that from
running out of control is to

00:18:43.950 --> 00:18:48.010
set the max daily budget, and we
can also specify discounted

00:18:48.010 --> 00:18:49.390
instance hours.

00:18:49.390 --> 00:18:52.680
It lets us do better capacity
planning because you'd set

00:18:52.680 --> 00:18:54.330
this for your application.

00:18:54.330 --> 00:18:56.280
And that pretty much means
you're going to consume

00:18:56.280 --> 00:18:59.590
however many instance hours per
week, or you're going to

00:18:59.590 --> 00:19:03.300
pay us that regardless,
or if not, you use it.

00:19:03.300 --> 00:19:06.230
So that allows us to ramp up
our capacity to meet the

00:19:06.230 --> 00:19:09.970
demands as planned, and we pass
on some cost savings.

00:19:09.970 --> 00:19:12.610
So rather than the $0.08 per
hour, we're only going to

00:19:12.610 --> 00:19:14.820
charge you $0.05 per hour.

00:19:14.820 --> 00:19:18.360
This means that if you put in
500 instance hours here, that

00:19:18.360 --> 00:19:20.850
means your app will consume
500 hours over

00:19:20.850 --> 00:19:22.260
the course of a week.

00:19:22.260 --> 00:19:25.410
And so every hour that's
consumed, we

00:19:25.410 --> 00:19:26.890
take from that bucket.

00:19:26.890 --> 00:19:29.420
And as soon as you've depleted
that bucket, we just continue

00:19:29.420 --> 00:19:33.460
serving the application, but
at the $0.08 per hour rate,

00:19:33.460 --> 00:19:38.430
not the discounted $0.05 per
instance hour, for example.

00:19:38.430 --> 00:19:40.320
Now, since we don't have
the ability to set this

00:19:40.320 --> 00:19:43.120
information for Premier
accounts, all instances are

00:19:43.120 --> 00:19:47.280
charged at $0.05 per instance
hour for Premier accounts.

00:19:47.280 --> 00:19:49.520
So, another great reason to
get a Premier account, not

00:19:49.520 --> 00:19:52.590
only you get the support, the
SLA, but you also get the

00:19:52.590 --> 00:19:55.580
discount on all your frontend
consumption.

00:19:55.580 --> 00:19:58.850
Another thing that I've seen
people run into is they enable

00:19:58.850 --> 00:20:01.290
billing because they've
run out of quota.

00:20:01.290 --> 00:20:04.230
It may take some time for our
system to process it, so you

00:20:04.230 --> 00:20:07.400
can expect a 15 to 20 minute
delay from when you enable

00:20:07.400 --> 00:20:09.870
billing to actually getting
the benefits.

00:20:09.870 --> 00:20:12.810
In some cases, like that email,
we don't actually

00:20:12.810 --> 00:20:17.270
increase the quota until we've
cleared at least one charge.

00:20:17.270 --> 00:20:20.240
Finally, here's a list of
resources of both documents

00:20:20.240 --> 00:20:23.010
and articles that you might
be interested in pursuing

00:20:23.010 --> 00:20:26.080
further, information on
managing your app.

