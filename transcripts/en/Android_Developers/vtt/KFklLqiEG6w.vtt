WEBVTT
Kind: captions
Language: en

00:00:02.634 --> 00:00:05.476
If there's one performance law
that everyone should follow

00:00:05.540 --> 00:00:07.714
it's avoid doing unnecessary work

00:00:08.210 --> 00:00:10.320
I'm Joanna Smith
and as simple as that sounds

00:00:10.320 --> 00:00:12.023
it can be a challenge
to find the places

00:00:12.047 --> 00:00:14.904
where your code spends time working
on things that don't matter

00:00:15.448 --> 00:00:17.861
Let me show you an example
so that you can visualize this

00:00:17.939 --> 00:00:19.392
courtesy of overdraw

00:00:19.543 --> 00:00:22.610
Overdraw is where pixels are drawn
to the screen by your application

00:00:22.610 --> 00:00:24.830
only to be drawn over
by some other pixel

00:00:24.830 --> 00:00:26.207
or view at a later time

00:00:26.390 --> 00:00:29.150
Basically all that work you did
to color in the pixel the first time

00:00:29.151 --> 00:00:30.554
is completely wasted work

00:00:30.998 --> 00:00:33.125
A technique to fix this
is called culling

00:00:33.252 --> 00:00:35.560
which essentially means
removing the code or situation

00:00:35.561 --> 00:00:37.387
where you are wasting processing time

00:00:37.712 --> 00:00:40.410
Not only will culling
take you from this to this

00:00:40.410 --> 00:00:43.386
but will also help you
get from ugh to wow

00:00:43.981 --> 00:00:45.910
Now as for actually fixing
your overdraw problems

00:00:45.910 --> 00:00:47.450
try to isolate
the portions of the screen

00:00:47.450 --> 00:00:49.302
that want to be drawn,
but won't be seen by the user

00:00:49.339 --> 00:00:50.469
and then avoid drawing them

00:00:51.130 --> 00:00:52.865
While I'm on the topic,
let's talk about drawing

00:00:53.103 --> 00:00:56.215
Drawing objects takes time,
memory, and battery to perform

00:00:56.405 --> 00:00:57.630
And if you can identify views

00:00:57.638 --> 00:01:00.039
that won't contribute to the final scene
and avoid drawing them

00:01:00.040 --> 00:01:01.515
then you get some
frame time back

00:01:01.785 --> 00:01:03.138
like those objects that are overdrawn

00:01:03.138 --> 00:01:05.428
when they're obscured
by another layer of objects

00:01:05.570 --> 00:01:07.704
But you also want to avoid
drawing objects that are off screen

00:01:07.728 --> 00:01:09.871
which is a complete waste
of time and memory

00:01:10.085 --> 00:01:12.150
So for all those obscured
and offscreen objects,

00:01:12.151 --> 00:01:13.887
learn to clip generously

00:01:14.322 --> 00:01:15.703
But culling isn't just for drawing

00:01:15.962 --> 00:01:19.052
Let's consider searching a database
for a user that meet several criteria

00:01:19.190 --> 00:01:22.080
like maybe they live in Texas,
are very bald

00:01:22.080 --> 00:01:23.660
and obsessed with performance

00:01:24.120 --> 00:01:26.710
Unimaginative developers might
start to begin in the database

00:01:26.710 --> 00:01:29.059
and search every user entry
for an address in Texas

00:01:29.150 --> 00:01:31.019
for hair color that's not applicable

00:01:31.150 --> 00:01:34.223
and for the use of the perfmatters
hashtag in their profile description

00:01:34.485 --> 00:01:36.505
But that would take forever

00:01:36.900 --> 00:01:38.660
Clever developers
would order the queries

00:01:38.660 --> 00:01:39.860
to reduce the set of users

00:01:39.860 --> 00:01:42.112
that need to be searched
for each successive criteria

00:01:42.294 --> 00:01:44.406
such as isolating
all the bald people first

00:01:44.550 --> 00:01:46.421
We've just culled
our list significantly

00:01:46.876 --> 00:01:49.410
Then they could eliminate
every address without a state

00:01:49.410 --> 00:01:50.740
or zip code for Texas

00:01:50.740 --> 00:01:53.336
which leaves us
a much reduced list of users

00:01:53.396 --> 00:01:55.786
Now we only need to run
the expansive search of their profiles

00:01:55.850 --> 00:01:57.180
for the perfmatters hashtag

00:01:57.181 --> 00:01:59.369
on that very small number of records

00:01:59.594 --> 00:02:01.637
And what do you know,
we found our guy!

00:02:02.594 --> 00:02:05.050
Culling is valuable everywhere,
from drawing the UI layer

00:02:05.050 --> 00:02:07.570
to searching databases,
to using real time services

00:02:07.571 --> 00:02:08.527
like location

00:02:08.695 --> 00:02:11.639
For example, if your app alerts
users based on local happening

00:02:11.640 --> 00:02:14.425
such as an Android Developer event
with barbecue

00:02:14.663 --> 00:02:16.880
then it doesn't make sense to check
for updates to events

00:02:16.881 --> 00:02:18.868
outside the area where the user lives

00:02:19.543 --> 00:02:22.304
In all of these instances,
the basic principle remains the same

00:02:22.970 --> 00:02:25.852
check whether something is relevant
before spending time on it

00:02:26.260 --> 00:02:27.860
Because in most cases

00:02:27.860 --> 00:02:30.460
actually processing the object
is more expensive

00:02:30.461 --> 00:02:33.331
than taking the time to determine
if you should process the object at all

00:02:33.791 --> 00:02:35.560
So take the time
to think about the user

00:02:35.560 --> 00:02:36.527
and what matters to them

00:02:36.622 --> 00:02:38.949
and then use culling to help you
focus on those things

00:02:39.107 --> 00:02:41.004
which gives you
not one but two wins

00:02:41.179 --> 00:02:44.203
Less work to do in your app
and a better experience for your users

00:02:45.454 --> 00:02:46.418
Culling us a great start

00:02:46.521 --> 00:02:48.800
but there's a whole world
of performance out there

00:02:48.800 --> 00:02:50.920
So watch the rest of the android
performance patterns content

00:02:50.920 --> 00:02:53.870
and consider joining our G+
community for tips, tricks and help

00:02:54.117 --> 00:02:55.727
So keep calm, profile your code

00:02:55.790 --> 00:02:57.849
and always remember,
perfmatters

