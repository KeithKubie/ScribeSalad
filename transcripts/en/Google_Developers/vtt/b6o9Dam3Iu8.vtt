WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.760
[MUSIC PLAYING]

00:00:04.760 --> 00:00:06.450
BILL LUAN: Shanghai
DJ is a very

00:00:06.450 --> 00:00:08.510
interesting developer community.

00:00:08.510 --> 00:00:09.350
FEMALE SPEAKER: I'm
glad somebody

00:00:09.350 --> 00:00:10.828
has asked this question.

00:00:10.828 --> 00:00:12.202
MALE SPEAKER: This is where
the magic happens.

00:00:12.202 --> 00:00:13.242
FEMALE SPEAKER: This
is primarily a

00:00:13.242 --> 00:00:13.640
question-and-answer show.

00:00:13.640 --> 00:00:15.955
So if any of you out there would
like to ask questions.

00:00:21.800 --> 00:00:22.530
ALI AFSHAR: Hello, everyone.

00:00:22.530 --> 00:00:24.970
Welcome to Google Drive Live.

00:00:24.970 --> 00:00:26.835
My name is Ali, and I'm joined
today with Steve.

00:00:26.835 --> 00:00:28.240
STEVE BAZYL: Hi, everyone.

00:00:28.240 --> 00:00:30.360
ALI AFSHAR: And today we're
going to talk to you a bit

00:00:30.360 --> 00:00:32.740
about the differences between
Google Drive and a

00:00:32.740 --> 00:00:35.950
conventional or traditional file
system as you would have

00:00:35.950 --> 00:00:37.600
on your hard disks at home.

00:00:37.600 --> 00:00:41.380
We're going to explore a range
of topics, mostly based around

00:00:41.380 --> 00:00:44.560
the use cases and why you'd want
to look at it this way.

00:00:44.560 --> 00:00:46.220
STEVE BAZYL: Yeah, I've gotten
this question from a lot of

00:00:46.220 --> 00:00:48.360
developers, some who are just
looking to integrate with

00:00:48.360 --> 00:00:51.840
Drive from a fairly
straightforward integration

00:00:51.840 --> 00:00:55.130
but are just new to the
model that Drive has.

00:00:55.130 --> 00:00:57.205
But there's also some really
cool use cases with like sync

00:00:57.205 --> 00:01:01.480
clients, virtual file systems,
all sorts of

00:01:01.480 --> 00:01:02.730
things people can do.

00:01:02.730 --> 00:01:05.590
ALI AFSHAR: So should we just
talk about them very briefly?

00:01:05.590 --> 00:01:08.390
What do you mean by a
virtual file system?

00:01:08.390 --> 00:01:09.820
STEVE BAZYL: So I know there's
actually an open-source

00:01:09.820 --> 00:01:12.600
project that somebody's
started working on.

00:01:12.600 --> 00:01:16.020
It's a fuse adapter for Drive
basically to make Drive look

00:01:16.020 --> 00:01:18.310
like a local file system.

00:01:18.310 --> 00:01:20.630
Personally, I actually started
playing around with doing this

00:01:20.630 --> 00:01:25.480
with the HTML5 file system and
see if I could do a shim that

00:01:25.480 --> 00:01:29.610
makes Drive appear like any
other file system in

00:01:29.610 --> 00:01:30.390
JavaScript.

00:01:30.390 --> 00:01:31.650
ALI AFSHAR: Cool.

00:01:31.650 --> 00:01:34.195
STEVE BAZYL: And I don't know
about sync clients, but rumor

00:01:34.195 --> 00:01:35.880
has it you were playing
around with one?

00:01:35.880 --> 00:01:38.030
ALI AFSHAR: Yeah, so a sync
client is essentially an

00:01:38.030 --> 00:01:41.220
application that runs on your
local machine that mirrors

00:01:41.220 --> 00:01:42.800
what's in Drive.

00:01:42.800 --> 00:01:45.020
And that's another use
case for this.

00:01:45.020 --> 00:01:48.210
And really anything, any
situation where you're using a

00:01:48.210 --> 00:01:50.840
conventional local file system,
you should consider

00:01:50.840 --> 00:01:53.860
what would happen if I swapped
out the local file system and

00:01:53.860 --> 00:01:57.180
replaced it with a cloud
file system like Drive.

00:01:57.180 --> 00:01:59.090
How would you go about
doing that?

00:01:59.090 --> 00:02:02.670
STEVE BAZYL: So before we go
into some of the challenges,

00:02:02.670 --> 00:02:05.350
what do you think some of the
key differences are with Drive

00:02:05.350 --> 00:02:07.300
and a regular file system?

00:02:07.300 --> 00:02:09.979
ALI AFSHAR: Well, my favorite
one is that you can run out of

00:02:09.979 --> 00:02:13.300
hard drive space, but you can
never run out of Drive.

00:02:13.300 --> 00:02:14.860
STEVE BAZYL: Well, that's
not entirely true.

00:02:14.860 --> 00:02:15.870
There's quota.

00:02:15.870 --> 00:02:17.040
ALI AFSHAR: There's quota.

00:02:17.040 --> 00:02:17.970
STEVE BAZYL: You do have
to pay for it.

00:02:17.970 --> 00:02:19.750
ALI AFSHAR: Exactly.

00:02:19.750 --> 00:02:20.820
But that's my favorite one.

00:02:20.820 --> 00:02:21.720
But apart from that, the

00:02:21.720 --> 00:02:24.810
structure is slightly different.

00:02:24.810 --> 00:02:26.540
Anything you want
to say about--

00:02:26.540 --> 00:02:28.900
STEVE BAZYL: Well, probably
the biggest one is paths.

00:02:28.900 --> 00:02:34.390
I mean, everything in Drive is
really identified by unique a

00:02:34.390 --> 00:02:34.500
identifier.

00:02:34.500 --> 00:02:38.630
It's basically a UUID for that
file as opposed to a path like

00:02:38.630 --> 00:02:40.610
you would have on a normal
file system.

00:02:40.610 --> 00:02:43.760
So that does creates some
challenges when you are

00:02:43.760 --> 00:02:46.430
expecting it to behave
like a file system.

00:02:46.430 --> 00:02:47.240
ALI AFSHAR: Right.

00:02:47.240 --> 00:02:50.220
So does that mean all your
files are flat and

00:02:50.220 --> 00:02:51.340
they have an ID?

00:02:51.340 --> 00:02:52.490
STEVE BAZYL: No, no.

00:02:52.490 --> 00:02:56.930
We do have parents, which
basically are labels.

00:02:56.930 --> 00:03:00.740
But we present them like
folders in the UI.

00:03:00.740 --> 00:03:03.100
And parents can be inside
other parents.

00:03:03.100 --> 00:03:06.320
And you can build up path-like
structures.

00:03:06.320 --> 00:03:10.730
But the concept of
path-addressable files is

00:03:10.730 --> 00:03:14.050
something that is missing in
Drive compared to a normal

00:03:14.050 --> 00:03:14.720
file system.

00:03:14.720 --> 00:03:23.300
So if you wanted to look up a
file by /who/bar/myfile.text,

00:03:23.300 --> 00:03:25.820
you'd have to do a little
bit of work.

00:03:25.820 --> 00:03:26.060
ALI AFSHAR: Right.

00:03:26.060 --> 00:03:29.250
So, OK, first use case.

00:03:29.250 --> 00:03:32.240
The standard thing you want
to do with a file system.

00:03:32.240 --> 00:03:35.410
Say you have a directory, a
folder with some files, and

00:03:35.410 --> 00:03:36.660
you want to list them.

00:03:39.130 --> 00:03:43.020
STEVE BAZYL: Generally, pretty
straightforward to list.

00:03:43.020 --> 00:03:46.190
It's basically files.list
in the API.

00:03:46.190 --> 00:03:48.250
But file systems have
some different rules

00:03:48.250 --> 00:03:49.760
than what Drive has.

00:03:49.760 --> 00:03:53.360
The biggest one that comes to
mind is the fact that the file

00:03:53.360 --> 00:03:55.340
names in Drive don't
have to be unique.

00:03:55.340 --> 00:03:57.200
ALI AFSHAR: Right.

00:03:57.200 --> 00:04:02.640
STEVE BAZYL: So if you require
file names to be unique

00:04:02.640 --> 00:04:04.450
because you're trying to
impersonate a file system, you

00:04:04.450 --> 00:04:07.450
have to figure out how do you
disambiguate two files with

00:04:07.450 --> 00:04:08.080
the same name.

00:04:08.080 --> 00:04:09.185
ALI AFSHAR: So any
thoughts on that?

00:04:09.185 --> 00:04:11.260
How would you go about
doing that?

00:04:11.260 --> 00:04:13.980
STEVE BAZYL: Well, I know, for
example, the sync client

00:04:13.980 --> 00:04:17.029
that's available with Drive
uses, I believe, the file

00:04:17.029 --> 00:04:18.180
creation date.

00:04:18.180 --> 00:04:20.660
In the case that it detects two
files with the same name,

00:04:20.660 --> 00:04:24.520
it will append to one of
them the creation time.

00:04:24.520 --> 00:04:27.190
It's nice, because it gives you
a nice stable ID that's

00:04:27.190 --> 00:04:31.380
not going to change in between
new files getting

00:04:31.380 --> 00:04:34.580
added and so on.

00:04:34.580 --> 00:04:36.950
But when I was playing around
the file system or doing this

00:04:36.950 --> 00:04:38.980
in JavaScript, I did
run into a few

00:04:38.980 --> 00:04:40.020
issues with that, though.

00:04:40.020 --> 00:04:43.050
It's actually not quite as
simple as it sounds.

00:04:43.050 --> 00:04:45.020
ALI AFSHAR: Like what
kind of issues?

00:04:45.020 --> 00:04:49.810
Well, so one of them is if you
take a look at the HTML5 file

00:04:49.810 --> 00:04:53.130
system, for example, it
encourages paging.

00:04:53.130 --> 00:04:56.230
And so when I was first
approaching this, I thought,

00:04:56.230 --> 00:04:59.450
well, I'll just take pages from
Google Drive as I get

00:04:59.450 --> 00:05:00.110
those results.

00:05:00.110 --> 00:05:03.620
And I will just call the
callback every time I get a

00:05:03.620 --> 00:05:06.040
new set of results, that I could
keep doing this and have

00:05:06.040 --> 00:05:09.340
a nice responsive API.

00:05:09.340 --> 00:05:14.110
The problem is, in order to do
the disambiguation reliably,

00:05:14.110 --> 00:05:16.130
you really want to make sure
that the files are always

00:05:16.130 --> 00:05:19.140
going to be returned back
in the same order.

00:05:19.140 --> 00:05:22.200
Because if you're doing this on
the fly, you can certainly

00:05:22.200 --> 00:05:24.100
keep track of all the ones
you've seen, and the next time

00:05:24.100 --> 00:05:26.360
you get a duplicate,
change that name.

00:05:26.360 --> 00:05:29.030
But if the files come out of
order, every time the user

00:05:29.030 --> 00:05:31.100
refreshes, file names are
going to come back.

00:05:31.100 --> 00:05:35.550
And sometimes file A will have
the time stamp, sometimes file

00:05:35.550 --> 00:05:36.574
B will have the time
stamp, and it

00:05:36.574 --> 00:05:37.700
can get kind of confusing.

00:05:37.700 --> 00:05:38.100
ALI AFSHAR: I see.

00:05:38.100 --> 00:05:42.130
So I had this similar problem
when trying to write a client

00:05:42.130 --> 00:05:45.060
that simulates synchronizing
like this.

00:05:45.060 --> 00:05:49.210
I actually opted to disambiguate
just by adding a

00:05:49.210 --> 00:05:51.500
1 or a 2 in brackets.

00:05:51.500 --> 00:05:52.860
STEVE BAZYL: But you still
have the same fundamental

00:05:52.860 --> 00:05:55.110
issue, though, that you
want that name to be

00:05:55.110 --> 00:05:56.010
as stable as possible.

00:05:56.010 --> 00:05:56.510
ALI AFSHAR: Exactly.

00:05:56.510 --> 00:05:59.370
So I ignored the fact that
it could be stable.

00:05:59.370 --> 00:06:02.220
I said, OK, well, I'm not
going to win there.

00:06:02.220 --> 00:06:06.900
Instead, I'll have to store a
set of metadata myself in a

00:06:06.900 --> 00:06:09.750
database, which sets the
absolute path on the local

00:06:09.750 --> 00:06:14.540
file system and the ID of the
file on Google Drive.

00:06:14.540 --> 00:06:16.395
And because of that, it means,
well, either can change, and

00:06:16.395 --> 00:06:17.550
it doesn't matter, because
I wont to lose

00:06:17.550 --> 00:06:18.790
track of what's happened.

00:06:18.790 --> 00:06:19.350
STEVE BAZYL: Exactly.

00:06:19.350 --> 00:06:21.810
And that is an option that
I was looking at on the

00:06:21.810 --> 00:06:24.690
JavaScript side as well as
using local storage or

00:06:24.690 --> 00:06:27.660
something as a cache so it can
keep track of some of this

00:06:27.660 --> 00:06:29.565
data in something that's
persistent to that client.

00:06:29.565 --> 00:06:32.630
So at least in between directory
calls, even if the

00:06:32.630 --> 00:06:34.980
files change order, I
can still map them

00:06:34.980 --> 00:06:35.830
back to the same name.

00:06:35.830 --> 00:06:39.470
So actually, if you have the
option of local storage, that

00:06:39.470 --> 00:06:43.330
actually works out to be
a pretty nice solution.

00:06:43.330 --> 00:06:45.190
ALI AFSHAR: And if you don't
have that, well, then it's

00:06:45.190 --> 00:06:46.430
going to be a bit
tricky, I guess.

00:06:46.430 --> 00:06:48.370
STEVE BAZYL: Yeah, you
end up having to

00:06:48.370 --> 00:06:49.710
either do what you said.

00:06:49.710 --> 00:06:54.590
You just don't worry about it,
or you have to do things like

00:06:54.590 --> 00:06:57.120
buffer up all the results, fetch
all your pages, sort on

00:06:57.120 --> 00:06:57.910
the client side.

00:06:57.910 --> 00:06:59.820
And then you can make
sure that you have a

00:06:59.820 --> 00:07:01.000
stable name that way.

00:07:01.000 --> 00:07:01.210
ALI AFSHAR: So--

00:07:01.210 --> 00:07:02.300
STEVE BAZYL: --with a little
bit of extra work.

00:07:02.300 --> 00:07:04.190
ALI AFSHAR: --this is one
of our big fundamental

00:07:04.190 --> 00:07:06.220
differences, is that
you get all the

00:07:06.220 --> 00:07:07.960
files in a file system.

00:07:07.960 --> 00:07:11.140
You can get them at the same
time, but you have to use

00:07:11.140 --> 00:07:12.550
paging in Google Drive.

00:07:12.550 --> 00:07:13.270
STEVE BAZYL: Right.

00:07:13.270 --> 00:07:14.940
Because it is a remote
service.

00:07:14.940 --> 00:07:18.170
The response time is
significantly longer than if

00:07:18.170 --> 00:07:20.710
you were doing this on
a local file system.

00:07:20.710 --> 00:07:24.500
So paging is really important if
you want to have that user

00:07:24.500 --> 00:07:28.240
responsiveness where you can
return back the first 50

00:07:28.240 --> 00:07:30.010
results or so very quickly.

00:07:30.010 --> 00:07:32.895
And then as the user continues
on, keep fetching.

00:07:32.895 --> 00:07:36.880
If you try to batch out a
2000-file directory, you're

00:07:36.880 --> 00:07:38.722
talking several seconds
of wait time.

00:07:38.722 --> 00:07:40.780
ALI AFSHAR: Right, which leads
us nicely on to the next

00:07:40.780 --> 00:07:43.170
point, is that when you're
developing for a local file

00:07:43.170 --> 00:07:45.720
system, you can really assume
that your calls are going to

00:07:45.720 --> 00:07:47.640
come back almost immediately--

00:07:47.640 --> 00:07:49.980
not really immediately, but
almost immediately.

00:07:49.980 --> 00:07:53.300
So a lot of local file system
programming just involves

00:07:53.300 --> 00:07:56.040
synchronous calls that blocks
until it returns.

00:07:56.040 --> 00:07:57.850
And you imagine that actually
that's not really going to

00:07:57.850 --> 00:07:58.450
take too long.

00:07:58.450 --> 00:07:58.890
STEVE BAZYL: Right.

00:07:58.890 --> 00:07:59.330
Exactly.

00:07:59.330 --> 00:08:02.160
ALI AFSHAR: With Google Drive
or any remote file system,

00:08:02.160 --> 00:08:05.240
really, you have to build this
into whatever you're doing.

00:08:05.240 --> 00:08:07.500
You have to put it into the
core, and it has to be

00:08:07.500 --> 00:08:08.460
asynchronous.

00:08:08.460 --> 00:08:11.560
So you have to say, go and do
this, and then when it's done,

00:08:11.560 --> 00:08:13.580
tell me about it, and I'll
do something there.

00:08:13.580 --> 00:08:14.500
STEVE BAZYL: Yeah, exactly.

00:08:14.500 --> 00:08:18.340
And that was another case where
it was actually easier

00:08:18.340 --> 00:08:21.690
when trying to do the file
system in JavaScript.

00:08:21.690 --> 00:08:24.290
Because that API is
asynchronous, it was a very

00:08:24.290 --> 00:08:25.770
nice match.

00:08:25.770 --> 00:08:27.240
There is actually a synchronous
version of that

00:08:27.240 --> 00:08:33.190
API that I didn't even attempt
to try just because trying to

00:08:33.190 --> 00:08:36.260
do that and make this inherently
asynchronous

00:08:36.260 --> 00:08:39.900
process appear synchronous was
too much work for what I was

00:08:39.900 --> 00:08:43.059
trying to do at the time, and
mostly just an experiment.

00:08:43.059 --> 00:08:44.600
ALI AFSHAR: And really important
for graphical

00:08:44.600 --> 00:08:45.190
applications.

00:08:45.190 --> 00:08:47.630
Because usually these
things run in a

00:08:47.630 --> 00:08:49.200
single thread by standard.

00:08:49.200 --> 00:08:51.830
And if you want to block that
thread, you're going to block

00:08:51.830 --> 00:08:52.370
everything.

00:08:52.370 --> 00:08:54.960
You know, the hover buttons
aren't going to work, and

00:08:54.960 --> 00:08:56.730
menus are going to crash, and
windows are going to go that

00:08:56.730 --> 00:08:58.610
nasty grey color.

00:08:58.610 --> 00:09:00.730
So really, really
important here.

00:09:00.730 --> 00:09:03.820
And modern operating systems,
Android specifically, it won't

00:09:03.820 --> 00:09:05.680
let you make blocking
calls like this.

00:09:05.680 --> 00:09:07.930
So you really have to bake
it in from the start.

00:09:07.930 --> 00:09:09.670
STEVE BAZYL: Yep, definitely.

00:09:09.670 --> 00:09:14.650
So another area that was less
important for sync clients,

00:09:14.650 --> 00:09:17.200
more for virtual file systems,
if you're doing a Fuse file

00:09:17.200 --> 00:09:22.220
system or anything like
that, is file paths.

00:09:22.220 --> 00:09:26.110
So just one thing that's just
not in Drive is the ability to

00:09:26.110 --> 00:09:29.790
address a file via path.

00:09:29.790 --> 00:09:32.090
And actually, this does relate
a little bit to the issue of

00:09:32.090 --> 00:09:34.770
disambiguation because in
these cases of file-name

00:09:34.770 --> 00:09:36.860
conflicts, we're doing all this
resolution on the client

00:09:36.860 --> 00:09:40.570
side in terms of detecting if
two file names have the same

00:09:40.570 --> 00:09:43.940
name or two folders have the
same name and creating a

00:09:43.940 --> 00:09:45.040
unique one.

00:09:45.040 --> 00:09:47.835
Whatever names we assign aren't
really known by the

00:09:47.835 --> 00:09:48.370
drive server.

00:09:48.370 --> 00:09:50.300
So we can't address those
files with those

00:09:50.300 --> 00:09:52.580
disambiguated paths.

00:09:52.580 --> 00:09:55.010
So it does create a little
bit of an issue.

00:09:55.010 --> 00:09:58.570
It's not a lot of work, but you
do have to do be able to

00:09:58.570 --> 00:10:01.645
handle that traversal on the
client side and be able to

00:10:01.645 --> 00:10:04.350
resolve parent and so on.

00:10:04.350 --> 00:10:07.010
But this is also a case where
local storage actually ends up

00:10:07.010 --> 00:10:10.260
being really handy because you
can basically build up a cache

00:10:10.260 --> 00:10:14.730
of paths mapped to file IDs so
that you can resolve those

00:10:14.730 --> 00:10:16.530
entirely on the client.

00:10:16.530 --> 00:10:19.150
ALI AFSHAR: So did you find an
elegant way to do the paths?

00:10:19.150 --> 00:10:21.830
Or were you just snipping a bit
off it each time and just

00:10:21.830 --> 00:10:23.390
going through?

00:10:23.390 --> 00:10:24.310
STEVE BAZYL: So I actually
tried a few different

00:10:24.310 --> 00:10:26.220
strategies.

00:10:26.220 --> 00:10:27.440
You probably did as well.

00:10:27.440 --> 00:10:28.400
ALI AFSHAR: Well, I'm
interested to

00:10:28.400 --> 00:10:28.620
know what you did.

00:10:28.620 --> 00:10:29.490
STEVE BAZYL: Yeah.

00:10:29.490 --> 00:10:32.880
Yeah, so the two strategies I
was looking at was-- one was

00:10:32.880 --> 00:10:38.130
basically just traversing with
each step in the path.

00:10:38.130 --> 00:10:40.530
Keeping track of relative
paths as

00:10:40.530 --> 00:10:42.940
well, is really important.

00:10:42.940 --> 00:10:44.890
But for things that I didn't
have cached, yeah, it would

00:10:44.890 --> 00:10:47.640
have to be go and
fetch this item.

00:10:47.640 --> 00:10:50.270
And if it's a folder and
there's more path, keep

00:10:50.270 --> 00:10:50.890
traversing.

00:10:50.890 --> 00:10:53.360
And it ends up being
several calls.

00:10:53.360 --> 00:10:55.930
Obviously, each part of the path
is another remote call.

00:10:55.930 --> 00:10:59.140
So it actually can get very
expensive if you're trying to

00:10:59.140 --> 00:11:01.650
traverse a really,
really deep path.

00:11:01.650 --> 00:11:05.100
The other approach, which was
much, much more performant but

00:11:05.100 --> 00:11:08.395
takes a little bit more to
actually set it up and get it

00:11:08.395 --> 00:11:12.350
to work reliably was kind of
what I mentioned earlier--

00:11:12.350 --> 00:11:17.840
building up a cache or basically
a mapping of full

00:11:17.840 --> 00:11:22.280
paths to their file ID, so that
as I traverse directories

00:11:22.280 --> 00:11:26.515
and retrieve files, I would
just store that path

00:11:26.515 --> 00:11:27.720
and that file ID.

00:11:27.720 --> 00:11:31.000
So if I ever needed to reference
it, I could do that.

00:11:31.000 --> 00:11:35.830
Or if I at least have part of
the parent, I can at least

00:11:35.830 --> 00:11:39.090
shortcut part of that lookup.

00:11:39.090 --> 00:11:41.150
So maybe I don't have the full
path, but I'll at least have

00:11:41.150 --> 00:11:43.640
one or two of the directories
in there.

00:11:43.640 --> 00:11:46.940
ALI AFSHAR: So you just that
whole path as a single string,

00:11:46.940 --> 00:11:47.760
essentially.

00:11:47.760 --> 00:11:49.790
STEVE BAZYL: Yeah, and do things
like prefix matching

00:11:49.790 --> 00:11:55.050
and so on, but, you know,
ways that you can save a

00:11:55.050 --> 00:11:56.810
little bit of work.

00:11:56.810 --> 00:12:02.800
But again, a lot of that
requires doing either--

00:12:02.800 --> 00:12:04.610
kind of building it up on the
fly, in which case you have to

00:12:04.610 --> 00:12:07.330
deal with misses and try
to traverse it any way.

00:12:07.330 --> 00:12:12.380
Or another thing I was
looking at was

00:12:12.380 --> 00:12:14.270
combining the changes feed.

00:12:14.270 --> 00:12:18.620
So basically doing one upfront
huge query to basically build

00:12:18.620 --> 00:12:21.690
all the paths and then using
the changes feed

00:12:21.690 --> 00:12:22.870
to keep up to date.

00:12:22.870 --> 00:12:25.390
So if things get moved around,
then I can just update that

00:12:25.390 --> 00:12:27.010
without having to query--

00:12:27.010 --> 00:12:27.850
ALI AFSHAR: I see.

00:12:27.850 --> 00:12:29.040
STEVE BAZYL: --a folder
every time that I

00:12:29.040 --> 00:12:30.370
wanted to get its content.

00:12:30.370 --> 00:12:32.550
ALI AFSHAR: So the changes
feed is one of those nice

00:12:32.550 --> 00:12:33.760
things that--

00:12:33.760 --> 00:12:36.160
we have more features in Google
Drive than a regular

00:12:36.160 --> 00:12:36.790
file system.

00:12:36.790 --> 00:12:38.620
And obviously, we can keep
adding features to it.

00:12:38.620 --> 00:12:41.510
Whereas a file system is pretty
much something that is

00:12:41.510 --> 00:12:43.810
there and it's not really
going to change.

00:12:43.810 --> 00:12:47.230
STEVE BAZYL: Yeah, it's a really
useful feature for

00:12:47.230 --> 00:12:48.820
these types of cases,
particularly sync clients.

00:12:48.820 --> 00:12:51.510
I mean, the heart of a sync
client is the changes feed.

00:12:51.510 --> 00:12:52.050
ALI AFSHAR: Yeah, absolutely.

00:12:52.050 --> 00:12:53.800
So, I mean, how the
sync client works

00:12:53.800 --> 00:12:55.290
is, well, it's two-way.

00:12:55.290 --> 00:12:56.600
The first one, we
have to monitor

00:12:56.600 --> 00:12:58.170
changes on the file system.

00:12:58.170 --> 00:13:00.300
And the second one, we have to
monitor changes in Drive.

00:13:00.300 --> 00:13:02.650
Now, you can do changes
on the file system.

00:13:02.650 --> 00:13:05.490
The different operating systems
have very much their

00:13:05.490 --> 00:13:11.130
own specific thing for that
so that they can do that.

00:13:11.130 --> 00:13:12.110
Windows has its own.

00:13:12.110 --> 00:13:14.070
Mac OS has its own.

00:13:14.070 --> 00:13:17.350
And on Linux, you use inotify
or something like this.

00:13:17.350 --> 00:13:19.540
So we have that baked
into Google Drive.

00:13:19.540 --> 00:13:20.920
So it's called the
changes feed.

00:13:20.920 --> 00:13:23.680
And you say what has changed
in the user's Google Drive

00:13:23.680 --> 00:13:25.540
since a certain point in time?

00:13:25.540 --> 00:13:26.740
And everything that has changed

00:13:26.740 --> 00:13:28.250
since then is returned.

00:13:28.250 --> 00:13:31.620
And that's how we were doing it
to check changes that have

00:13:31.620 --> 00:13:32.230
happened then.

00:13:32.230 --> 00:13:35.010
Obviously, there's going to be
problems because if someone

00:13:35.010 --> 00:13:38.180
changes a file in both places at
the same time, what are you

00:13:38.180 --> 00:13:39.680
going to do in that situation?

00:13:39.680 --> 00:13:42.140
STEVE BAZYL: Yeah, and that's
actually a good question.

00:13:42.140 --> 00:13:45.120
So one of the other issues
related to paths and

00:13:45.120 --> 00:13:48.180
everything is the fact
that a file can

00:13:48.180 --> 00:13:49.670
have multiple parents.

00:13:49.670 --> 00:13:54.876
And for the most part, at least
when I was doing some

00:13:54.876 --> 00:13:58.100
stuff with the file system, this
wasn't a huge problem.

00:13:58.100 --> 00:14:01.360
It's not that much different
than having, say, symlinks,

00:14:01.360 --> 00:14:02.350
for example.

00:14:02.350 --> 00:14:05.346
Just a file happens to exist
in two directories.

00:14:05.346 --> 00:14:07.860
I imagine, though, for the sync
client, that's probably a

00:14:07.860 --> 00:14:10.100
little bit more of a
challenge, though.

00:14:10.100 --> 00:14:11.240
There might be some
edge cases--

00:14:11.240 --> 00:14:14.000
probably really rare edge cases,
but things where you

00:14:14.000 --> 00:14:18.380
have concurrent edits of the
file locally, then you have to

00:14:18.380 --> 00:14:19.340
resolve those.

00:14:19.340 --> 00:14:21.810
ALI AFSHAR: So that is
a problem, really?

00:14:21.810 --> 00:14:22.860
Which one wins?

00:14:22.860 --> 00:14:25.380
Who is the real file, and
who is the symlink?

00:14:25.380 --> 00:14:28.690
So just to go over multiple
parents as we have in Drive,

00:14:28.690 --> 00:14:31.030
just to explain that properly.

00:14:31.030 --> 00:14:33.200
A file can be in many different

00:14:33.200 --> 00:14:34.170
folders at the same time.

00:14:34.170 --> 00:14:35.820
And Steve mentioned it,
they're just labels.

00:14:35.820 --> 00:14:37.110
They're just like
tags or labels.

00:14:37.110 --> 00:14:39.970
You can put them in as
many as you like.

00:14:39.970 --> 00:14:43.350
So when you synchronize that
down to the local file system,

00:14:43.350 --> 00:14:46.350
which one is a copy, which
one is the actual file?

00:14:46.350 --> 00:14:48.660
I just solved it by putting
a copy of the

00:14:48.660 --> 00:14:50.740
file in both places.

00:14:50.740 --> 00:14:53.880
And then if the file changed
in either place, I would

00:14:53.880 --> 00:14:57.490
update it remotely and in
both those locations.

00:14:57.490 --> 00:14:58.820
I'm not sure that's
the greatest

00:14:58.820 --> 00:15:00.610
solution, to be honest.

00:15:00.610 --> 00:15:03.770
STEVE BAZYL: So, if you had two
near-simultaneous edits?

00:15:03.770 --> 00:15:04.670
ALI AFSHAR: Right.

00:15:04.670 --> 00:15:06.020
STEVE BAZYL: Which
one would you--

00:15:06.020 --> 00:15:07.110
is it last in?

00:15:07.110 --> 00:15:09.626
ALI AFSHAR: Yeah, the last
in, the last in.

00:15:09.626 --> 00:15:11.150
STEVE BAZYL: So basically the
same as doing the resolution

00:15:11.150 --> 00:15:12.120
for the remote copy as well.

00:15:12.120 --> 00:15:14.830
ALI AFSHAR: I mean, how the sync
client works is it tries

00:15:14.830 --> 00:15:18.280
on that very level of
disambiguatiing it, it tries

00:15:18.280 --> 00:15:20.840
to run it all in a single queue
so that you never get

00:15:20.840 --> 00:15:22.160
race conditions there.

00:15:22.160 --> 00:15:24.690
So the last one would win
because it would just happen

00:15:24.690 --> 00:15:26.660
after the more previous one.

00:15:26.660 --> 00:15:28.350
Not ideal.

00:15:28.350 --> 00:15:31.240
And that's why my sync client
was just a learning experience

00:15:31.240 --> 00:15:32.320
or something like that.

00:15:32.320 --> 00:15:36.020
The real Google sync clients
spend a lot of code trying to

00:15:36.020 --> 00:15:38.090
handle these cases like this.

00:15:38.090 --> 00:15:39.630
STEVE BAZYL: So one of the
cases that comes up--

00:15:39.630 --> 00:15:42.100
I know I've talked to a couple
developers who've written

00:15:42.100 --> 00:15:45.660
their own sync processes
and so on is--

00:15:45.660 --> 00:15:45.970
time stamping.

00:15:45.970 --> 00:15:50.280
And so it's actually really
important in terms of suppose

00:15:50.280 --> 00:15:53.250
you have a local edit on the
file, making sure that that

00:15:53.250 --> 00:15:55.940
edit time is reflected
in Drive instead

00:15:55.940 --> 00:15:57.935
of the upload time.

00:15:57.935 --> 00:15:59.900
And is that something that
developers can do

00:15:59.900 --> 00:16:00.490
if they need to?

00:16:00.490 --> 00:16:02.000
You said to make sure
that edit times

00:16:02.000 --> 00:16:04.740
and creation times--

00:16:04.740 --> 00:16:06.270
ALI AFSHAR: I think the
creation time is set.

00:16:06.270 --> 00:16:08.200
But the edit time, I think you
can set that yourself.

00:16:08.200 --> 00:16:09.550
STEVE BAZYL: You can
override that?

00:16:09.550 --> 00:16:11.170
ALI AFSHAR: Yeah, you
can override that.

00:16:11.170 --> 00:16:13.810
I'm not exactly sure
about that.

00:16:13.810 --> 00:16:16.380
But yeah, that is really,
really important.

00:16:16.380 --> 00:16:19.280
So you want to know when the
file was last edited,

00:16:19.280 --> 00:16:22.160
actually, by a user, not by the
last time it was uploaded

00:16:22.160 --> 00:16:23.940
to our server.

00:16:23.940 --> 00:16:25.660
So useful use case.

00:16:25.660 --> 00:16:28.490
And we offer other ways
of finding out

00:16:28.490 --> 00:16:29.410
has the final changed.

00:16:29.410 --> 00:16:31.390
STEVE BAZYL: Right, as
like the MD5 hash.

00:16:31.390 --> 00:16:32.170
ALI AFSHAR: The MD5
hash, right.

00:16:32.170 --> 00:16:35.280
STEVE BAZYL: So very, very easy
to calculate, so a good

00:16:35.280 --> 00:16:37.110
way to check did the
metadata change?

00:16:37.110 --> 00:16:40.280
Or this is actually content
that's fresh and needs to be

00:16:40.280 --> 00:16:42.660
downloaded?

00:16:42.660 --> 00:16:46.310
So anything else that you
can think of or--

00:16:46.310 --> 00:16:48.540
ALI AFSHAR: Well, and I can
really only think of

00:16:48.540 --> 00:16:51.970
advantages of things than Google
Drive has that a local

00:16:51.970 --> 00:16:53.305
file system doesn't have.

00:16:53.305 --> 00:16:53.630
STEVE BAZYL: All right.

00:16:53.630 --> 00:16:53.840
Such as?

00:16:53.840 --> 00:16:56.840
ALI AFSHAR: Such as we have all
this additional metadata

00:16:56.840 --> 00:16:59.240
that's amazingly useful.

00:16:59.240 --> 00:17:00.980
Obviously, on a file system,
you have the name.

00:17:00.980 --> 00:17:02.790
You have the size of the file.

00:17:02.790 --> 00:17:04.950
You can get the permissions.

00:17:04.950 --> 00:17:06.510
That's pretty much
it without using

00:17:06.510 --> 00:17:08.040
third-party tools to do stuff.

00:17:08.040 --> 00:17:11.329
But we store things such as the
extension of the file, the

00:17:11.329 --> 00:17:12.480
MIME type of the file.

00:17:12.480 --> 00:17:14.319
That can be an absolute
nightmare to work out

00:17:14.319 --> 00:17:17.859
yourselves, the MD5 hash,
as you mentioned.

00:17:17.859 --> 00:17:21.960
And then we have ways in which
you can convert the file or

00:17:21.960 --> 00:17:25.589
export the file or look if it's
a video, for example,

00:17:25.589 --> 00:17:28.940
stream the file immediately, the
kind of benefits you can

00:17:28.940 --> 00:17:32.320
only really get from a
cloud file system.

00:17:32.320 --> 00:17:34.640
STEVE BAZYL: Actually, that
does the raise something.

00:17:34.640 --> 00:17:38.400
There are certain files in
Drive that aren't really

00:17:38.400 --> 00:17:39.520
files, right?

00:17:39.520 --> 00:17:41.590
So they are things like Google
Docs, presentations,

00:17:41.590 --> 00:17:43.080
spreadsheets--

00:17:43.080 --> 00:17:44.140
ALI AFSHAR: Folders?

00:17:44.140 --> 00:17:47.130
STEVE BAZYL: --folders,
shortcuts for third-party apps

00:17:47.130 --> 00:17:50.640
that everyone out there
is building.

00:17:50.640 --> 00:17:53.060
How do these behave
differently?

00:17:53.060 --> 00:17:54.770
ALI AFSHAR: Well, there's no
binary content in these.

00:17:54.770 --> 00:17:57.320
So by binary content, you know
the files data, there's

00:17:57.320 --> 00:17:57.960
nothing there.

00:17:57.960 --> 00:18:01.390
So a folder is just a
placeholder with a specific

00:18:01.390 --> 00:18:03.620
MIME type so that we know it's
a placeholder, and it can be

00:18:03.620 --> 00:18:05.460
used as a parent.

00:18:05.460 --> 00:18:08.360
And the more interesting
case are these links.

00:18:08.360 --> 00:18:10.370
Some of them are Google Docs,
and some of them are

00:18:10.370 --> 00:18:13.150
third-party linked files.

00:18:13.150 --> 00:18:15.460
So what do we get in
that situation?

00:18:15.460 --> 00:18:19.130
Well, all you can put on the
local file system is

00:18:19.130 --> 00:18:21.520
a URL to the file.

00:18:21.520 --> 00:18:24.300
Now what could that URL
do, for example?

00:18:24.300 --> 00:18:28.010
It could open up the file in the
remote application, in the

00:18:28.010 --> 00:18:30.230
third-party application, or
in Google Docs, Google

00:18:30.230 --> 00:18:32.230
spreadsheets.

00:18:32.230 --> 00:18:34.160
We could probably do a bit
better than that, couldn't we?

00:18:34.160 --> 00:18:35.260
What do you think?

00:18:35.260 --> 00:18:38.600
STEVE BAZYL: Ah, yeah,
they probably could.

00:18:38.600 --> 00:18:43.255
So one of the issues with the
current way it works has to

00:18:43.255 --> 00:18:45.600
do, I think, with OAuth
implementation, the way that

00:18:45.600 --> 00:18:47.460
we initiate the process.

00:18:47.460 --> 00:18:51.620
It's not really friendly right
now to offline access.

00:18:51.620 --> 00:18:56.600
There are cases where-- one
feature I would love to see is

00:18:56.600 --> 00:18:58.750
almost like shadow documents,
where it's like you could have

00:18:58.750 --> 00:19:02.090
the content in a third-party
system, in a database, but

00:19:02.090 --> 00:19:04.000
quietly in the background
keep data up to sync.

00:19:04.000 --> 00:19:04.960
So you always have
that export.

00:19:04.960 --> 00:19:06.310
You always have a binary
data that you can

00:19:06.310 --> 00:19:07.505
download and use locally.

00:19:07.505 --> 00:19:09.940
You can use it offline.

00:19:09.940 --> 00:19:11.100
Something like that would
actually be kind of cool.

00:19:11.100 --> 00:19:13.970
But as it is now, the URL
feature works pretty well

00:19:13.970 --> 00:19:17.070
because you can click on one of
these .glink files, open it

00:19:17.070 --> 00:19:21.490
up in a browser, and use the
app and launch it from the

00:19:21.490 --> 00:19:23.960
file system just the same way
as if you launched it

00:19:23.960 --> 00:19:24.790
from the Drive UI.

00:19:24.790 --> 00:19:26.740
So it's actually pretty cool
the way it works right now.

00:19:26.740 --> 00:19:28.250
ALI AFSHAR: I mean, that's
really nice in the case where

00:19:28.250 --> 00:19:30.000
you don't have a
native editor.

00:19:30.000 --> 00:19:32.010
And by native editor, I mean
something that will run on

00:19:32.010 --> 00:19:33.910
your PC or your Android
or whatever.

00:19:33.910 --> 00:19:37.190
And so if there is a native
editor exists, say, for

00:19:37.190 --> 00:19:41.100
example, I don't know, a text
editor that you can run on

00:19:41.100 --> 00:19:44.030
your local machine as well,
you'd probably like to use the

00:19:44.030 --> 00:19:44.720
local version.

00:19:44.720 --> 00:19:47.300
It just would give you
a better experience.

00:19:47.300 --> 00:19:50.270
And these days, still,
unfortunately native apps

00:19:50.270 --> 00:19:53.470
sometimes do feel a bit
better than web apps.

00:19:53.470 --> 00:19:55.540
STEVE BAZYL: Yeah, and this is a
criticism I've heard of even

00:19:55.540 --> 00:19:56.870
our own editors.

00:19:56.870 --> 00:20:01.960
So, for example, having a Word
doc in Drive, in order to that

00:20:01.960 --> 00:20:05.100
in our document editor, it
has to be converted.

00:20:05.100 --> 00:20:08.330
But then you lose that ability
to sync those changes back

00:20:08.330 --> 00:20:10.640
into the binary representation
of it.

00:20:10.640 --> 00:20:15.390
So having a little bit more
seamless support for switching

00:20:15.390 --> 00:20:20.680
between binary file for local or
for data maps, and then the

00:20:20.680 --> 00:20:23.420
online-only, more collaborative
version for when

00:20:23.420 --> 00:20:25.400
you're on the web, that would
actually be an ideal case.

00:20:25.400 --> 00:20:26.900
ALI AFSHAR: That's
something I would

00:20:26.900 --> 00:20:28.250
really like to see there.

00:20:28.250 --> 00:20:29.780
STEVE BAZYL: It's also a really
hard technical problem.

00:20:29.780 --> 00:20:30.740
ALI AFSHAR: Yeah really,
really hard.

00:20:30.740 --> 00:20:33.160
It would also solve a lot
of the offline issues.

00:20:33.160 --> 00:20:36.300
Say you lose web access.

00:20:36.300 --> 00:20:39.580
That might be something that
would be really useful.

00:20:39.580 --> 00:20:42.100
STEVE BAZYL: Something that we
can certainly suggest to the

00:20:42.100 --> 00:20:44.710
engineering team, but I know
there have been some

00:20:44.710 --> 00:20:45.470
conversations.

00:20:45.470 --> 00:20:50.080
And it's not the easiest
thing to tackle.

00:20:50.080 --> 00:20:53.360
ALI AFSHAR: Especially since
there are so many platforms.

00:20:53.360 --> 00:20:55.260
Sometimes you'll find an
app that's available

00:20:55.260 --> 00:20:56.320
for all these platforms.

00:20:56.320 --> 00:20:57.640
Which one should you launch?

00:20:57.640 --> 00:20:59.150
The authorization issue, as you

00:20:59.150 --> 00:21:00.555
mentioned, that's also huge.

00:21:00.555 --> 00:21:02.790
STEVE BAZYL: Yeah, and it's also
very hard to do this in a

00:21:02.790 --> 00:21:05.180
way that's not loss-y.

00:21:05.180 --> 00:21:07.790
Every time you do a conversion
between these formats, there's

00:21:07.790 --> 00:21:10.900
always that potential that
there's some item that's not

00:21:10.900 --> 00:21:12.640
going to map well.

00:21:12.640 --> 00:21:15.340
So you really want to do that
well and fix the issues that

00:21:15.340 --> 00:21:17.870
you run into in terms of the
conversion, and then work in

00:21:17.870 --> 00:21:19.300
the new format.

00:21:19.300 --> 00:21:20.560
So it's a nice to have thing.

00:21:20.560 --> 00:21:22.680
It sounds really, really cool.

00:21:22.680 --> 00:21:27.317
In practice, it's probably
a little limited.

00:21:27.317 --> 00:21:29.740
So we'll see how it
goes, though.

00:21:29.740 --> 00:21:31.020
Be cool to try at least.

00:21:31.020 --> 00:21:32.120
ALI AFSHAR: Yeah, definitely.

00:21:32.120 --> 00:21:35.244
So should we just summarize
what we've been over?

00:21:35.244 --> 00:21:38.990
STEVE BAZYL: Yeah, I
mean, in terms of--

00:21:38.990 --> 00:21:41.410
should people even be building
sync clients and

00:21:41.410 --> 00:21:42.420
virtual file systems?

00:21:42.420 --> 00:21:43.840
And I would say--

00:21:43.840 --> 00:21:44.500
I mean, yeah.

00:21:44.500 --> 00:21:45.360
If you can--

00:21:45.360 --> 00:21:46.670
ALI AFSHAR: I would say,
strongly, yes.

00:21:46.670 --> 00:21:47.200
Why not?

00:21:47.200 --> 00:21:48.980
STEVE BAZYL: I mean, especially
a virtual file

00:21:48.980 --> 00:21:52.910
system, I think, is actually
something that has some good

00:21:52.910 --> 00:21:55.040
practical uses with--

00:21:55.040 --> 00:21:58.070
we see a lot of apps like
these on Windows

00:21:58.070 --> 00:22:00.640
virtualization machines in the
cloud, where you can run

00:22:00.640 --> 00:22:04.310
native apps through
remote desktops.

00:22:04.310 --> 00:22:06.400
Those are cases where it doesn't
really make sense for

00:22:06.400 --> 00:22:10.660
them to try to sync everything
in Drive, especially when they

00:22:10.660 --> 00:22:13.440
have these kind of very
ephemeral machines that come

00:22:13.440 --> 00:22:16.160
and go, and they get
spun up and down.

00:22:16.160 --> 00:22:19.810
And a virtual file system is
perfect for that case.

00:22:19.810 --> 00:22:22.830
And a custom sync client,
there's probably a lot of

00:22:22.830 --> 00:22:26.000
value that you can add if
you have a good idea.

00:22:26.000 --> 00:22:28.490
ALI AFSHAR: Yeah, so, I mean,
already there are a number of

00:22:28.490 --> 00:22:30.410
custom sync clients out there.

00:22:30.410 --> 00:22:32.820
They're all slightly different,
and they approach

00:22:32.820 --> 00:22:34.020
things in a different way.

00:22:34.020 --> 00:22:37.350
I hope we got across that it's
actually technically quite a

00:22:37.350 --> 00:22:38.300
tricky problem.

00:22:38.300 --> 00:22:40.530
So each one has their
own benefits.

00:22:40.530 --> 00:22:45.440
There's one that's targeted
for OS X. There's a

00:22:45.440 --> 00:22:46.110
Linux-based one.

00:22:46.110 --> 00:22:47.690
There there's various ones.

00:22:47.690 --> 00:22:50.410
And I'd advise you to try them
out, read their code, because

00:22:50.410 --> 00:22:52.530
it is useful, and they will
have had to solve some of

00:22:52.530 --> 00:22:53.530
these problems.

00:22:53.530 --> 00:22:54.650
STEVE BAZYL: Yeah, definitely.

00:22:54.650 --> 00:22:58.290
But yeah, it's a really
fun problem to solve.

00:22:58.290 --> 00:22:59.370
The hopefully--

00:22:59.370 --> 00:23:01.540
ALI AFSHAR: If you like
that kind of thing.

00:23:01.540 --> 00:23:02.660
STEVE BAZYL: I like it.

00:23:02.660 --> 00:23:03.800
I think it's actually
really fun trying

00:23:03.800 --> 00:23:07.130
to solve these problems.

00:23:07.130 --> 00:23:10.310
And then even if you're not
doing anything like that, but

00:23:10.310 --> 00:23:16.100
are just new to Drive and are
trying to get your head around

00:23:16.100 --> 00:23:19.940
its model, it's useful to
understand these differences.

00:23:19.940 --> 00:23:21.580
ALI AFSHAR: Yeah, absolutely.

00:23:21.580 --> 00:23:23.070
So what have we talked about?

00:23:23.070 --> 00:23:25.400
Well, we spoke about
the use cases.

00:23:25.400 --> 00:23:26.580
Why would you want to do this?

00:23:26.580 --> 00:23:29.980
Why would you want to treat
Drive as a local file system,

00:23:29.980 --> 00:23:31.170
and how that would be.

00:23:31.170 --> 00:23:34.330
The key differences, well,
Steve mentioned paths.

00:23:34.330 --> 00:23:37.825
We spoke about multiple parents
and the non-uniqueness

00:23:37.825 --> 00:23:41.570
of file names and how you would
deal with those things.

00:23:41.570 --> 00:23:43.920
And we spoke about some of the
challenges involved in that.

00:23:43.920 --> 00:23:46.510
STEVE BAZYL: Right, especially
around disambiguating the file

00:23:46.510 --> 00:23:50.190
names and resolving paths.

00:23:50.190 --> 00:23:51.750
There's a lot of different
strategies that you can go

00:23:51.750 --> 00:23:55.280
around to address those,
depending on whether or not

00:23:55.280 --> 00:23:57.820
you're building a sync client
or a virtual file system.

00:23:57.820 --> 00:24:00.382
And if you have local storage
that you can use to cache some

00:24:00.382 --> 00:24:02.330
of that data--

00:24:02.330 --> 00:24:03.380
lots of different strategies.

00:24:03.380 --> 00:24:05.200
And you just have to kind of
look at your particular use

00:24:05.200 --> 00:24:07.980
case and what you're trying
to accomplish.

00:24:07.980 --> 00:24:12.160
But none of these are, I would
say, insurmountable problems.

00:24:12.160 --> 00:24:12.250
ALI AFSHAR: No, no.

00:24:12.250 --> 00:24:14.320
STEVE BAZYL: They're just little
small things that you

00:24:14.320 --> 00:24:15.510
have to kind of deal with.

00:24:15.510 --> 00:24:17.090
And they add a little
bit of complexity.

00:24:17.090 --> 00:24:21.760
But generally, things that you
can solve with just a little

00:24:21.760 --> 00:24:25.120
bit of forethought and have
a tiny bit of code.

00:24:25.120 --> 00:24:27.530
ALI AFSHAR: And we mentioned
the asynchronous nature of

00:24:27.530 --> 00:24:29.840
Drive in making web requests.

00:24:29.840 --> 00:24:32.640
Probably we concluded that
whatever you're doing, you

00:24:32.640 --> 00:24:35.680
should do this asynchronously
anyway, even for a local file

00:24:35.680 --> 00:24:38.160
system, because that would make
your app more responsive.

00:24:38.160 --> 00:24:40.630
And users love responsive
apps.

00:24:40.630 --> 00:24:44.040
STEVE BAZYL: Yeah, for people
used to writing using blocking

00:24:44.040 --> 00:24:46.640
calls in their web apps,
yeah, it's a little

00:24:46.640 --> 00:24:47.550
bit harder to do.

00:24:47.550 --> 00:24:49.330
But it's worth it.

00:24:49.330 --> 00:24:51.080
ALI AFSHAR: It's worth it.

00:24:51.080 --> 00:24:54.290
And I guess, finally, to end on,
we're really keen to see

00:24:54.290 --> 00:24:55.050
what you're writing.

00:24:55.050 --> 00:24:57.350
So if you're doing one of these
cool apps, you might

00:24:57.350 --> 00:25:00.290
think it's not exactly the use
case for Google Drive.

00:25:00.290 --> 00:25:02.470
You might think we don't want
to know about that.

00:25:02.470 --> 00:25:06.070
Actually, the more interesting
and strange your app is, the

00:25:06.070 --> 00:25:08.220
more likely we are that we
do want to know about it.

00:25:08.220 --> 00:25:09.100
STEVE BAZYL: But it
has to be good

00:25:09.100 --> 00:25:10.540
interesting and good strange.

00:25:10.540 --> 00:25:12.100
ALI AFSHAR: Of course, good
interesting, not bad

00:25:12.100 --> 00:25:13.280
interesting.

00:25:13.280 --> 00:25:15.750
STEVE BAZYL: Yeah, I definitely
encourage everyone.

00:25:15.750 --> 00:25:19.270
If you are building an app,
whether it's something that is

00:25:19.270 --> 00:25:22.515
like this, or just a regular web
app that's integrated with

00:25:22.515 --> 00:25:28.090
the drive UI or whatever, find
us on Google+, find us on

00:25:28.090 --> 00:25:31.025
Stack Overflow, but reach
out and let us

00:25:31.025 --> 00:25:32.700
know what you're building.

00:25:32.700 --> 00:25:34.150
ALI AFSHAR: Ask those
difficult questions.

00:25:34.150 --> 00:25:35.850
STEVE BAZYL: Especially
on Stack Overflow.

00:25:35.850 --> 00:25:38.810
And I think the response time
has been really great so far

00:25:38.810 --> 00:25:41.330
in getting answers out there.

00:25:41.330 --> 00:25:44.230
But since I'm the developer
advocate and tend to do a

00:25:44.230 --> 00:25:46.570
little bit more around one, I'd
love to get an email or

00:25:46.570 --> 00:25:49.390
put something on Google+ to just
let me know what you're

00:25:49.390 --> 00:25:52.580
doing and see what we
can do to help.

00:25:52.580 --> 00:25:53.140
ALI AFSHAR: Great.

00:25:53.140 --> 00:25:53.460
Thank you.

00:25:53.460 --> 00:25:54.590
Good luck with everything.

00:25:54.590 --> 00:25:55.040
STEVE BAZYL: Great.

00:25:55.040 --> 00:25:55.820
Thanks everyone.

00:25:55.820 --> 00:25:56.420
ALI AFSHAR: Bye-bye.

00:25:56.420 --> 00:26:07.667
[MUSIC PLAYING]

