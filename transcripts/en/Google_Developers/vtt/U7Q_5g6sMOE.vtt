WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.920
&gt;&gt; BOYD: So, my name is Ryan Boyd. I'm a developer
advocate at Google, working on Google Apps

00:00:08.920 --> 00:00:12.400
and the Apps Marketplace. I hope you're all
having a really great day today and learning

00:00:12.400 --> 00:00:18.220
a lot of things. I'm here with Marcos from
Just Digital, he is going to be presenting

00:00:18.220 --> 00:00:25.960
a little bit of their solution using the Google
Apps APIs along with me. So, let's get started.

00:00:25.960 --> 00:00:30.830
Here's the agenda. It's very wide. We're planning
on talking about a lot of different things

00:00:30.830 --> 00:00:37.329
with regards to Google Apps, a lot of the
different APIs. It's going to be a broad overview

00:00:37.329 --> 00:00:42.499
of the APIs and the capabilities of Google
Apps. It's not going to dive in super detail

00:00:42.499 --> 00:00:46.179
on any of these. You could probably figure
that out from title, and the session abstract,

00:00:46.179 --> 00:00:51.059
but if not, I'm not going to feel bad if you
guys decide to go to another session, if you're

00:00:51.059 --> 00:00:57.969
already deeply familiar with these APIs. So
Google Apps, Google Apps is tools for today's

00:00:57.969 --> 00:01:03.729
user. So, think of a lot of the consumer applications
that you're used to using on a regular basis.

00:01:03.729 --> 00:01:10.930
Gmail, Calendar, Docs, Google Talk, all these
different types of applications are package

00:01:10.930 --> 00:01:15.500
dub, and made available for businesses, and
adding a few of the features that businesses

00:01:15.500 --> 00:01:22.299
need. At Google Apps, it is all based off
of the web. The web is the enterprise platform.

00:01:22.299 --> 00:01:28.090
Technology is like HTML5, and JavaScript,
and CSS allow us to build a highly interactive

00:01:28.090 --> 00:01:34.200
web applications that you can't tell the difference
from them versus a desktop application. Gmail

00:01:34.200 --> 00:01:39.539
was one of the first applications that used
a lot of Ajax Technology, and it progressed

00:01:39.539 --> 00:01:46.359
forward from there, so you have live document
editing collaboration that works really well.

00:01:46.359 --> 00:01:49.570
Google Apps has lots of customers, and it's
growing very quickly. There are 30 million

00:01:49.570 --> 00:01:54.680
active users of Google Apps with three million
businesses over 3,000 new businesses who are

00:01:54.680 --> 00:02:01.590
signing up every single day, and these customers
are of all different types of businesses.

00:02:01.590 --> 00:02:06.759
There are small businesses, they are the mom
and pop shops, or the small retail stores

00:02:06.759 --> 00:02:13.430
going all the way through major enterprises,
and governments, and educational institutions.

00:02:13.430 --> 00:02:17.209
So, we have the Apps from Google. We have
these communication, and collaboration Apps

00:02:17.209 --> 00:02:21.730
that Google has, but how does this hook into
the--together with the things that you guys

00:02:21.730 --> 00:02:27.010
built? Well, in addition to the Apps from
Google, back in March, we launched the Apps

00:02:27.010 --> 00:02:33.010
Marketplace. The Apps Marketplace is basically
a store for you to discover and purchase web

00:02:33.010 --> 00:02:37.540
applications that are well integrated with
Google Apps. And for you as developers, it's

00:02:37.540 --> 00:02:42.311
an opportunity for you to sell applications
which are integrated, and it can have a lot

00:02:42.311 --> 00:02:47.170
of the same types of integrations that the
other applications in the Google Apps suite

00:02:47.170 --> 00:02:54.870
have. We also provide points for you to hook
in to Google Apps from custom applications.

00:02:54.870 --> 00:03:02.379
We have platform services with App Engine
and APIs that allow you to build custom applications

00:03:02.379 --> 00:03:07.840
and sell them to customers. And all of these
is on top of the same administration layer,

00:03:07.840 --> 00:03:13.610
same users, same security model, and all that
you're comfortable with, with Google Apps.

00:03:13.610 --> 00:03:21.709
Now, one of the types of APIs that Google
gives you for integrating with Google Apps

00:03:21.709 --> 00:03:26.640
are the data APIs, and here is a brief overview
of the data APIs. They basically allow you

00:03:26.640 --> 00:03:33.200
to hook in to the user's data, or the company's
data across the web. They are authorized using

00:03:33.200 --> 00:03:37.410
a protocol code called OAuth. We're not going
to dive in too deeply into OAuth during this

00:03:37.410 --> 00:03:43.060
session, but we will talk about that later
on if you guys attend my talk. I think it's

00:03:43.060 --> 00:03:49.720
two sessions from now. But OAuth allows you
to get secure access to a user's data like

00:03:49.720 --> 00:03:57.129
Calendar, like docs, et cetera. The data APIs
are based off of the Atom Publishing Protocol.

00:03:57.129 --> 00:04:04.120
It's an HTTP based protocol, it uses something
called REST, or Representational State Transfer.

00:04:04.120 --> 00:04:08.920
Basically allows you to pull objects back
and forth from the servers, and it's all based

00:04:08.920 --> 00:04:14.049
off the Atom data format. You're probably
already familiar with Atom from the days of

00:04:14.049 --> 00:04:20.540
dealing with blog feeds. Atom--the Atom format
describes some basic syntax that's required,

00:04:20.540 --> 00:04:26.021
and it's highly extensible, and that's why
we've chosen to use it to build APIs for things

00:04:26.021 --> 00:04:32.620
like Google Calendar. Now, there are two different
types of OAuth. I just want you to be familiar

00:04:32.620 --> 00:04:38.430
with this. So about the most detail in getting
in with OAuth in this presentation, but basically

00:04:38.430 --> 00:04:44.680
we have Three-Legged OAuth where the individual
user is the resource owner. So, when I say

00:04:44.680 --> 00:04:49.560
resource owner, I mean like, you have your
own personal Google Calendar, you're an individual

00:04:49.560 --> 00:04:55.970
user, you have the rights to grant access
to that calendar. There's another type of

00:04:55.970 --> 00:05:02.340
OAuth called 2-legged OAuth, and what's that--what
that's used for is when you have a resource

00:05:02.340 --> 00:05:08.389
that's owned by a company for them to be able
to grant an application, access to that resource

00:05:08.389 --> 00:05:15.770
for every user within the company. So the
Three-Legged OAuth--method of OAuth is basically

00:05:15.770 --> 00:05:21.889
a web redirect flow where the individual user
approves it, while the 2-legged OAuth is basically,

00:05:21.889 --> 00:05:29.370
an administrator goes in, and gives an application
access to the data. There are libraries to

00:05:29.370 --> 00:05:35.889
access all the different data APIs, so the
libraries that have variety of different languages

00:05:35.889 --> 00:05:39.580
and these libraries implement some of the
most common functionality. Not all the libraries

00:05:39.580 --> 00:05:43.460
implement everything, but they do implement
most--some of the most common functionality

00:05:43.460 --> 00:05:49.590
so that you can access without understanding
the raw protocol. So there's been some recent

00:05:49.590 --> 00:05:55.000
developments in the Google Data APIs, and
I want to talk about a couple of those here.

00:05:55.000 --> 00:05:59.840
These are in the protocol layer of the Google
Data APIs, partial response is one of those.

00:05:59.840 --> 00:06:04.240
So if you're developing a mobile application
that needs access to a user's Google Calendar

00:06:04.240 --> 00:06:09.569
data, and you only need the title of an event,
and maybe the time of an event, you can request

00:06:09.569 --> 00:06:14.229
just that information, whereas previously,
you had to request all of the information

00:06:14.229 --> 00:06:19.490
that--about the event including the attendees,
where it was taking place, and that sort of

00:06:19.490 --> 00:06:24.080
thing. Similarly, we've recently launched
partial updates for Google Calendar and we'll

00:06:24.080 --> 00:06:28.889
be rolling these features out to other APIs
too, and partial updates allow you to just

00:06:28.889 --> 00:06:33.880
patch a certain set of data. And we're going
to show an example here shortly, but basically

00:06:33.880 --> 00:06:38.990
you can take a calendar event and just update
the title, and not pass the rest of the data,

00:06:38.990 --> 00:06:44.540
it makes it so much more efficient to interact
with the APIs. And then we've also recently

00:06:44.540 --> 00:06:50.330
announced the JSON protocol called JSON-C
or compact JSON, and basically gives you a

00:06:50.330 --> 00:06:57.569
lot better JSON format for our APIs. We previously
had a JSON format that was based in large

00:06:57.569 --> 00:07:05.180
part of--on Atom, it actually had all the
XML namespaces in JSON rather ugly. You probably

00:07:05.180 --> 00:07:10.360
didn't like developing against it, if you're
familiar with it at all. The JSON-C format

00:07:10.360 --> 00:07:17.690
is much more compact and more friendly for
application developers. So, speaking of applications

00:07:17.690 --> 00:07:22.481
and Application APIs, these are all the different
types of applications that are part of the

00:07:22.481 --> 00:07:27.759
Google Apps Suite and all of these applications
have APIs that allow you to interact with

00:07:27.759 --> 00:07:33.539
them on behalf of the user. I'm going to give
you one example here with Google Calendar.

00:07:33.539 --> 00:07:39.370
Google Calendar allows you to manipulate calendars
themselves. You can create, retrieve, update,

00:07:39.370 --> 00:07:43.669
and delete calendars and you can also do the
same thing with Events and Access Control

00:07:43.669 --> 00:07:47.750
List. You can manage what the access is to
the various calendars. And you'll notice this

00:07:47.750 --> 00:07:50.830
create, retrieve, update, and delete, for
those of you who aren't familiar with the

00:07:50.830 --> 00:07:56.470
term CRUD, it's basically using the common
HTTP verbs that you see on the right-hand

00:07:56.470 --> 00:08:03.560
side there to manipulate and retrieve resources.
So, let's show what that looks like. Here

00:08:03.560 --> 00:08:11.789
is the Atom XML for creating a calendar event.
The XML is mostly Atom here. You can see the

00:08:11.789 --> 00:08:18.280
Atom title, which says, "Tennis with Beth,"
the Atom content, "Meet for a quick lesson."

00:08:18.280 --> 00:08:23.600
But then you also see some areas where Google
has extended the XML and added elements in

00:08:23.600 --> 00:08:28.379
its own namespace. These GD where, GD when,
those are very specific to Google Calendar

00:08:28.379 --> 00:08:33.470
and describe where the event is taking place
and when the event is taking place. After

00:08:33.470 --> 00:08:39.140
you create XML that looks like this, you can
then post it to Google Calendar at a URL like

00:08:39.140 --> 00:08:43.150
that--I'm missing the authorization header
here, like I said, I'm not diving deep into

00:08:43.150 --> 00:08:48.360
how that works, but when you take this content
and you post it to Google, you'll actually

00:08:48.360 --> 00:08:53.200
get a 201 created response code knowing it
was successful or hopefully get the 201 created

00:08:53.200 --> 00:08:57.760
response code. If you made a mistake, you'll
get a response code in the range of 400s,

00:08:57.760 --> 00:09:03.500
et cetera. Here's an example of the partial
update feature, which I mentioned is--it's

00:09:03.500 --> 00:09:10.030
a new feature for the Google Data APIs and
this is showing how you can patch an entry.

00:09:10.030 --> 00:09:15.630
So let's say, the event previously was for,
"Tennis with Beth." Let's say that Beth wanted

00:09:15.630 --> 00:09:22.111
to invite her friend Kate to play tennis as
well, she might update the title of the event

00:09:22.111 --> 00:09:28.130
to say, "Tennis with Beth and Kate." Now,
previously to--before this partial update

00:09:28.130 --> 00:09:34.140
protocol existed, every application would
either have to then retrieve the full entry,

00:09:34.140 --> 00:09:39.040
modify the title, and send the full entry
back or it would have to actually store a

00:09:39.040 --> 00:09:44.190
copy of the full entry including all the bits
of other metadata that they didn't care about.

00:09:44.190 --> 00:09:50.040
Well, with partial update it can actually
say, using that GD Fields attribute, up here,

00:09:50.040 --> 00:09:55.010
it can say, "I'm just modifying the title."
So, the server will go around and delete the

00:09:55.010 --> 00:10:00.110
title from the entry, and then add the title
back in using the element that's provided

00:10:00.110 --> 00:10:08.030
here. So, this may not look like Atom or XML.
I'm including Gmail in our list of data APIs

00:10:08.030 --> 00:10:14.080
because it's another application that you're--you
can have access to, and Gmail is something

00:10:14.080 --> 00:10:20.030
special here. Gmail does have an Atom based
feed. It's a read-only feed to access the

00:10:20.030 --> 00:10:26.660
user's inbox but mail has a lot--has common
protocols that have existed for a while now.

00:10:26.660 --> 00:10:31.980
IMAP is one of those protocols. So what Google
has done and we released earlier this year

00:10:31.980 --> 00:10:37.640
is OAuth Authorized IMAP access, because you
don't want to give every application access

00:10:37.640 --> 00:10:42.630
to your username and password just because
that application needs access to your mail.

00:10:42.630 --> 00:10:49.360
You can just give it access to your mail using
OAuth and it basically creates an API out

00:10:49.360 --> 00:10:54.000
of the IMAP standard that's existed for a
while now. And similarly we've done the same

00:10:54.000 --> 00:11:03.370
thing with sending email by SMTP. Now, in
addition to the Application APIs for accessing

00:11:03.370 --> 00:11:07.930
the user's data in manipulating things like
their calendars and their contacts, we also

00:11:07.930 --> 00:11:12.180
had a series of Management APIs. There are
many different integration points for the

00:11:12.180 --> 00:11:16.500
Management APIs; there's the Provisioning
API, this is perhaps one of the most common

00:11:16.500 --> 00:11:23.780
APIs. It allows you to create and delete users
and things like that--we also have a Calendar

00:11:23.780 --> 00:11:28.670
Resources API. So, if you have a bunch of
resources in your organization, things like

00:11:28.670 --> 00:11:35.260
conference rooms or projectors or maybe even
special tools that your employees use for

00:11:35.260 --> 00:11:40.400
their work. You can manage them as Calendar
Resources, so that when you add--when you

00:11:40.400 --> 00:11:44.570
create a calendar event, the employees can
actually add those resources and schedule

00:11:44.570 --> 00:11:51.120
them along with the event. There is the Email
Migration API, which allows you to push email

00:11:51.120 --> 00:11:56.200
into Google Apps; there's an Email Settings
API, which I might show you an example of

00:11:56.200 --> 00:12:00.060
shortly, basically allowing you to manipulate
all the settings that you use to accessing

00:12:00.060 --> 00:12:07.790
in Gmail, a Reporting API and an Audit API.
All the different types of enterprise--these

00:12:07.790 --> 00:12:13.040
sort of APIs that you would expect to be able
to manipulate data on behalf of an organization.

00:12:13.040 --> 00:12:20.770
So, I'll show you one example. This is the
Email Settings API. So let's say that you

00:12:20.770 --> 00:12:25.710
have a bunch of users who are contractors
that are actually working for other companies

00:12:25.710 --> 00:12:32.231
on a regular basis. And you're storing that
information in, say, your HR system and you

00:12:32.231 --> 00:12:37.830
want to update the user-signature in their
mail to let the people they're sending email

00:12:37.830 --> 00:12:43.980
to, know who they're currently working for.
So you can actually do that with the API.

00:12:43.980 --> 00:12:49.560
Here's an example. So Liz is a contractor,
she's working in the accounts management at

00:12:49.560 --> 00:12:54.920
a particular company. Their HR system can
automatically update and say, "Hey. She's

00:12:54.920 --> 00:12:59.960
working in the accounts management. Here's
her phone number." You could do similar things

00:12:59.960 --> 00:13:04.240
with promotions and all, if the user's title
changes; automatically update the signature

00:13:04.240 --> 00:13:10.560
in their email. Oh, and this was actually
using one of our client libraries. This is

00:13:10.560 --> 00:13:15.980
using the Python Client Library. It's kind
of funny. I actually thought this was using

00:13:15.980 --> 00:13:20.850
the Java Client Library, when I was reviewing
the slides at one point because it looks very

00:13:20.850 --> 00:13:28.040
similar but there's no semi-colon so it's
definitely Python. All right. Authentication

00:13:28.040 --> 00:13:32.990
and Users. So now we've talked about the different
APIs that you can access the different management

00:13:32.990 --> 00:13:38.770
functionality. You're probably wondering how
you deal with authentication. If you work

00:13:38.770 --> 00:13:44.060
with customers that are migrating to Google
Apps or customers that, you know, have existing

00:13:44.060 --> 00:13:50.240
systems like Microsoft Exchange, et cetera,
they probably have already an existing account

00:13:50.240 --> 00:13:55.520
system in their network. So they have something
like an active directory server, an LDAP server

00:13:55.520 --> 00:14:02.570
or Kerberos in their network and they want
to be able to reuse those accounts when they're

00:14:02.570 --> 00:14:07.250
using Google Apps. It's totally possible.
We'll talk about how that's done. They also

00:14:07.250 --> 00:14:12.890
likely have Cloud Apps. They have applications
like an online payroll application and they

00:14:12.890 --> 00:14:18.560
don't want to have users need to create new
user names and passwords for accessing those

00:14:18.560 --> 00:14:23.190
Cloud Apps. So they want those Cloud applications
to use the Google Apps accounts, so these

00:14:23.190 --> 00:14:28.130
can all work together and let's show you how.
First of all, the accounts must actually exist

00:14:28.130 --> 00:14:32.390
in Google Apps but the passwords don't need
to. So, how do we get the accounts there?

00:14:32.390 --> 00:14:39.160
So, given on premise system and you want to
create those accounts inside Google Apps,

00:14:39.160 --> 00:14:44.970
you can use those Management APIs. There are
also tools available. Google has a directory

00:14:44.970 --> 00:14:52.680
sync feature and Marcus' company Just Digital
has some tools for handling user accounts.

00:14:52.680 --> 00:14:56.130
So there are a lot of things you can do if
you don't want to use the Management APIs,

00:14:56.130 --> 00:15:00.931
but the Management APIs can sit underneath,
in particular the Provisioning API can create

00:15:00.931 --> 00:15:07.840
those accounts, and Marcus will show you some
examples of that. For the passwords though,

00:15:07.840 --> 00:15:12.440
you can have your passwords either migrated
with it so every time the user changes their

00:15:12.440 --> 00:15:17.550
password in your active directory or LDAP
server or Kerberos environment, you can actually

00:15:17.550 --> 00:15:21.880
synchronize those to Google Apps, but you
don't have to. You can use a technology called

00:15:21.880 --> 00:15:29.670
SAML which allows you as a company to have
your own login page. And for your login page,

00:15:29.670 --> 00:15:36.930
when a user goes to login to Google Apps,
Google will redirect the user to this login

00:15:36.930 --> 00:15:41.990
page that you host as a company. Now you can
host this company either publicly or--sorry,

00:15:41.990 --> 00:15:48.180
host this login page either publicly or behind
a firewall. But basically, it gives the ability

00:15:48.180 --> 00:15:54.191
for you to authenticate the user as a Google
Apps customer and then assert the identity

00:15:54.191 --> 00:15:59.300
of that user to Google Apps. You're telling
Google, "Hey, I know that this is my user,

00:15:59.300 --> 00:16:06.560
John at my company, please log him in," and
Google will log him in. So you may wonder,

00:16:06.560 --> 00:16:10.970
I talked about third party apps, these Cloud
applications that are out there. How do they

00:16:10.970 --> 00:16:16.070
authenticate Google Apps users? Well, they're
not going to want to actually integrate with

00:16:16.070 --> 00:16:21.980
every companies behind the firewall system
using something like SAML, but what they can

00:16:21.980 --> 00:16:28.080
do is use OpenID as a standard to authenticate
their users. Google Apps users can then sign

00:16:28.080 --> 00:16:32.750
in with their existing account simply by clicking
a button at the bottom that indicates that

00:16:32.750 --> 00:16:37.920
they have a Gmail account and basically the
user goes to login. The App will redirect

00:16:37.920 --> 00:16:44.480
to Google Apps and then the Apps trust Google
to assert the identity. This works very much

00:16:44.480 --> 00:16:49.960
in the same way as SAML, except in a little
bit different direction. Even if Google Apps

00:16:49.960 --> 00:16:55.610
doesn't know how to authenticate the user
on an OpenID request, it will actually redirect

00:16:55.610 --> 00:17:02.080
over to the SAML provider and handle all of
that for you. So now, Marcus, if you come

00:17:02.080 --> 00:17:05.379
up and talk about your company a little bit.
&gt;&gt; FARIAS: [SPEAKING IN FOREIGN LANGUAGE]

00:17:05.379 --> 00:17:09.640
&gt;&gt; BOYD: Thank you, Marcos. So, I want to
talk a little bit about hosting your application.

00:17:09.640 --> 00:17:15.660
So, you can host your App anywhere. So you
can host your App on your on your servers,

00:17:15.660 --> 00:17:19.910
in the Cloud, on your desktops, basically
anywhere that you want to host your application.

00:17:19.910 --> 00:17:30.170
You can do that and integrate with Google
Apps. You can integrate with Google Apps as

00:17:30.170 --> 00:17:34.690
a custom application or you can launch on
the Apps Marketplace, which I do have another

00:17:34.690 --> 00:17:37.370
session on later talking about the Apps Marketplace
specifically, but it does not matter where

00:17:37.370 --> 00:17:39.990
you host. These APIs are open and accessible
from any location. However--I--you know, I

00:17:39.990 --> 00:17:43.650
wouldn't be a Googler if I didn't talk a little
bit about App Engine. You can host your application

00:17:43.650 --> 00:17:47.050
on App Engine as well. App Engine has been
around for a bit now and provides a way for

00:17:47.050 --> 00:17:50.930
you to build, maintain, and scale applications,
running either in Java or in Python. And we

00:17:50.930 --> 00:17:56.340
recently--in--at Google I/O, this year launched
App Engine for business or announced App Engine

00:17:56.340 --> 00:18:03.160
for business. This basically adds a lot of
the enterprise tools to App Engine that businesses

00:18:03.160 --> 00:18:08.190
need. So OAuth administration aupport SLAs.
SQL is the one of the primary things here,

00:18:08.190 --> 00:18:13.310
a lot of people have been asking for SQL,
and basically, the pricing model that we're

00:18:13.310 --> 00:18:19.340
looking at right now for this is $8.00 per
user per month per application, so, this is

00:18:19.340 --> 00:18:24.220
obviously intended for internal applications,
not yet for High SV use or SaaS App developers

00:18:24.220 --> 00:18:29.270
who are selling their applications. But we
are looking at the possibility of doing a

00:18:29.270 --> 00:18:34.290
similar sort of App Engine for business for
those markets as well. So, in addition to

00:18:34.290 --> 00:18:39.430
hosting your full pledged application, Google
Apps also has a scripting environment, Google

00:18:39.430 --> 00:18:44.320
Apps Script, which it allows you to run your
code in the Cloud as Server-side JavaScript.

00:18:44.320 --> 00:18:47.640
So, JavaScript that actually sits and runs
on Google servers, you're not familiar with

00:18:47.640 --> 00:18:51.120
that usually with JavaScript, but Apps Script
is actually really powerful. This example

00:18:51.120 --> 00:18:56.550
here is showing how I oftentimes send emails
to developers if I have a list of their email

00:18:56.550 --> 00:19:00.373
addresses in a spreadsheet, I can actually
add a UI element to Google Spreadsheets, called

00:19:00.373 --> 00:19:05.280
Mail Merge you see at the bottom right here.
And when I click on that element, it actually

00:19:05.280 --> 00:19:10.770
uses Google services to send emails to each
of those users, all configured with this Server-side

00:19:10.770 --> 00:19:18.460
JavaScript. We also, in addition to allowing
your application to access the Google Apps

00:19:18.460 --> 00:19:25.010
data that's hosted in the Cloud, we allow
applications hosting the Cloud to access your

00:19:25.010 --> 00:19:35.970
unpremised systems as well. This is done using
the Secured Data Connector, basically, it

00:19:35.970 --> 00:19:40.200
creates a tunnel from your application to
your unpremised systems. So, you can access

00:19:40.200 --> 00:19:47.270
your CRM or ERP data, and this is what that
might actually look like. So, this is a Google

00:19:47.270 --> 00:19:50.970
Spreadsheet, the Secured Data Connector is
accessible from App Script, and accessible

00:19:50.970 --> 00:19:53.450
from App Engine, and it can actually retrieve
a lot of data from your internal systems.

00:19:53.450 --> 00:19:59.860
So, you can see this invoice has data from
the CRM App, from the product catalog, from

00:19:59.860 --> 00:20:06.900
the ERP system. A lot of different bits of
data that are hooked together and integrated

00:20:06.900 --> 00:20:12.480
into the spreadsheet. Gadgets are one of the
last things that we're going to talk about

00:20:12.480 --> 00:20:17.200
today as ways that you can integrate with
Google Apps, and this is really taking the

00:20:17.200 --> 00:20:21.170
functionality of your UI and putting it inside
Google Apps, inside Gmail Calendar docs--sorry,

00:20:21.170 --> 00:20:26.370
in the Gmail Calendar spreadsheets and Google
sites. It's all based off a standard HTML

00:20:26.370 --> 00:20:30.460
JavaScript, CSS, and the OpenSocial standard
for gadgets. Here's a few quick examples of

00:20:30.460 --> 00:20:36.370
that, this is from at [INDISTINCT] GeoStudio,
it's an issue tracking application, and they

00:20:36.370 --> 00:20:42.820
allow a project manager to have up to date
access to the issues that their software product

00:20:42.820 --> 00:20:51.520
has right from within Google--sorry, Google
mail. It's on the left navigation, they always

00:20:51.520 --> 00:21:01.610
have easy access to that, when they click
on that, it opens up the GeoStudio application.

00:21:01.610 --> 00:21:06.420
Gmail Contextual Gadgets are perhaps my favorite
feature that's launched, so, I saved it for

00:21:06.420 --> 00:21:14.790
close to the end here. Gmail Contextual Gadgets
allow you to display a gadget from your application

00:21:14.790 --> 00:21:22.650
below an email based off the context of that
email. So, you can look at the email and you

00:21:22.650 --> 00:21:31.780
could say this email is from a guy named Ryan
Boyd, and this first gadget here looks Ryan

00:21:31.780 --> 00:21:40.040
Boyd up in the social networks, and finds
my picture, my Facebook profile, my LinkedIn

00:21:40.040 --> 00:21:47.640
profile, my Twitter profile, as well as previous
messages that I have sent. And then the second

00:21:47.640 --> 00:21:55.290
contextual gadget is a more business used
case where the email detects at the word timesheet

00:21:55.290 --> 00:22:09.390
was present in the email, and it basically
says, "Hey Ryan, do you need to complete your

00:22:09.390 --> 00:22:14.970
timesheet for this week?" And you can enter
that information in authenticated and authorized

00:22:14.970 --> 00:22:20.530
way right where--from within the context on
your email, drastically improving your productivity.

00:22:20.530 --> 00:22:29.900
Here's one last example of contextual gadgets,
and this is from a company called Aperio and

00:22:29.900 --> 00:22:46.690
Aperio is a consulting company, and when they
receive an email from one of their customers,

00:22:46.690 --> 00:22:54.730
they can look up that customer's project information
in their systems, in their internal systems

00:22:54.730 --> 00:23:02.570
and their CRM application and provide that
information right there. So, in summary, you

00:23:02.570 --> 00:23:13.000
can build applications for yourself, for your
company, or you can make a living, building

00:23:13.000 --> 00:23:34.370
application for others, or selling applications
in the Apps Marketplace. If you want to make

00:23:34.370 --> 00:23:57.440
a living, building application for others,
a good way to start is becoming a reseller

00:23:57.440 --> 00:24:18.940
of Google Apps and doing integrations for
customers. You can build your applications

00:24:18.940 --> 00:24:57.970
anywhere you want, and you can integrate with
all sorts of components of Google Apps.

00:24:57.970 --> 00:25:13.350
Integrate

00:25:13.350 --> 00:25:34.530
with
the UI, integrates with the data, integrate

00:25:34.530 --> 00:25:48.140
with the accounts, and it's not all about
the Cloud, some systems are still behind the

00:25:48.140 --> 00:26:03.260
firewall, and

00:26:03.260 --> 00:26:27.870
you can still access those. If you want a
more lightweight scripting environment instead

00:26:27.870 --> 00:27:01.360
of

00:27:01.360 --> 00:27:32.700
a full application,

00:27:32.700 --> 00:28:17.250
you can write scripts using Google Apps script.
So, we have some resources here, I have--I

00:28:17.250 --> 00:29:05.550
will be around here for another few minutes
before I start the next session which is on

00:29:05.550 --> 00:29:21.470
the
Apps Marketplace, and then following that,

00:29:21.470 --> 00:32:15.130
there's a session that dives a little bit
more into OpenID and OAuth in the

00:32:15.130 --> 00:32:18.490
various used cases. So, thank you very much,
I hope you all learned something.

