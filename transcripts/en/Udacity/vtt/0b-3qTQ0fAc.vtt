WEBVTT
Kind: captions
Language: en

00:00:00.490 --> 00:00:03.969
I've recently been thinking about why we
use update children instead of lots of

00:00:03.969 --> 00:00:05.440
set value instructions.

00:00:05.440 --> 00:00:08.189
I'm guessing it has something
to do with data consistency.

00:00:08.189 --> 00:00:11.430
&gt;&gt; Frank said he was just talking with
somebody else about consistency issues.

00:00:11.430 --> 00:00:12.652
want to see if I can find him?

00:00:12.652 --> 00:00:16.113
&gt;&gt; Yes, but I've got a doctor's
appointment to check out the medical

00:00:16.113 --> 00:00:18.275
side effects of truth-seeing amulet's.

00:00:18.275 --> 00:00:18.910
Hm.

00:00:18.910 --> 00:00:21.220
The developer's free, though.

00:00:21.220 --> 00:00:22.900
&gt;&gt; Yeah, you should come over.

00:00:22.900 --> 00:00:24.267
&gt;&gt; want to take the company sailboat?

00:00:24.267 --> 00:00:30.694
[MUSIC]

00:00:30.694 --> 00:00:31.694
&gt;&gt; Hello and welcome.

00:00:31.694 --> 00:00:34.372
I'm here with Puff,
an engineer on the Firebase team, and

00:00:34.372 --> 00:00:37.490
we're here to talk about how to
keep data consistent in Firebase.

00:00:37.490 --> 00:00:39.032
&gt;&gt; Yeah that's going to be fun.

00:00:39.032 --> 00:00:41.320
&gt;&gt; So, Puff,
I get how you do initial design.

00:00:41.320 --> 00:00:44.480
But how do you ensure that your data
can remain scalable afterwards?

00:00:44.480 --> 00:00:47.220
&gt;&gt; Yeah, that's a good question,
it's always, always tricky, right.

00:00:47.220 --> 00:00:48.848
When we do the initial data design,

00:00:48.848 --> 00:00:54.580
lots of software engineers
are database modelers by education.

00:00:54.580 --> 00:00:57.330
So we try to minimize
the duplication of data.

00:00:57.330 --> 00:00:59.759
We go through all our
database normalization forms.

00:01:00.810 --> 00:01:04.060
And then we notice things
don't scale up very well, and

00:01:04.060 --> 00:01:06.770
we need to start denormalizing a bit.

00:01:06.770 --> 00:01:13.980
So in Firebase, that pretty much comes
in the form of duplicating data.

00:01:13.980 --> 00:01:17.700
So instead of having one place
where you store the bit of data,

00:01:17.700 --> 00:01:20.070
you actually store it in every
place where you might need it.

00:01:20.070 --> 00:01:22.920
So if you have a chat application, for
example, you have a list of messages and

00:01:22.920 --> 00:01:25.880
a list of users, and
every message belongs to one user.

00:01:25.880 --> 00:01:26.400
So it's very,

00:01:26.400 --> 00:01:30.410
very natural to want to just store
the ID of the user and look the user up.

00:01:30.410 --> 00:01:32.890
But that means that every time
you need to display a message,

00:01:32.890 --> 00:01:36.870
you need to look up the user
that the message belongs to.

00:01:36.870 --> 00:01:41.020
And it might be easier to actually store
the minimal information you need to

00:01:41.020 --> 00:01:44.070
display for a user, like the user name,
next to every chat message.

00:01:44.070 --> 00:01:46.300
Because then if you want to
show a list of chat messages,

00:01:46.300 --> 00:01:49.830
you just load the messages and
you don't need to do a lookup yet.

00:01:49.830 --> 00:01:53.340
So that's a very common thing we see,
and this is data duplication.

00:01:53.340 --> 00:01:57.243
It's not very natural, but it's how
you can keep your data scalable.

00:01:57.243 --> 00:02:01.230
&gt;&gt; Puff, would you explain what atomic
updates are versus the opposite sort of

00:02:01.230 --> 00:02:01.736
method?

00:02:01.736 --> 00:02:02.357
&gt;&gt; Yeah, sure.

00:02:02.357 --> 00:02:05.452
So the scenario we just had
where you have a chat room and

00:02:05.452 --> 00:02:07.472
you have the users separately, but

00:02:07.472 --> 00:02:11.400
you keep the name of every user
with the message that they post.

00:02:11.400 --> 00:02:14.260
And let's say that the user wants
to change their name, right.

00:02:14.260 --> 00:02:17.775
So the first thing you need to do is
that you update the user name in their

00:02:17.775 --> 00:02:21.230
user profile, but then you need to
loop through all chat messages and

00:02:21.230 --> 00:02:22.498
update the names there.

00:02:22.498 --> 00:02:26.571
So the simple way of doing this is
actually write your first update or

00:02:26.571 --> 00:02:31.000
set value on the user profile, and
then you find all the messages that they

00:02:31.000 --> 00:02:34.640
have, and you loop through them and
update them one by one.

00:02:34.640 --> 00:02:35.460
That works great.

00:02:35.460 --> 00:02:39.330
The problem with it is that if somewhere
in the middle, the user closes

00:02:39.330 --> 00:02:43.230
the Android app, then you have, yeah,
there will be no more updates being

00:02:43.230 --> 00:02:47.160
sent, and you have half of the messages
updated and the other half won't be.

00:02:47.160 --> 00:02:48.680
And that's what atomic updates solve.

00:02:48.680 --> 00:02:53.660
So with atomic updates, we build the
entire, both the changing of the name,

00:02:53.660 --> 00:02:56.430
and the fanning that data
out into every chat message,

00:02:56.430 --> 00:03:00.180
we put that in a single command
to the Firebase database.

00:03:00.180 --> 00:03:02.300
So that command can be pretty big, but

00:03:02.300 --> 00:03:07.750
it's either going to completely succeed
or it's not going to happen at all, so.

00:03:07.750 --> 00:03:12.330
And this is very beneficial if
you're updating duplicated data.

00:03:12.330 --> 00:03:14.990
&gt;&gt; So
what are the major ways that people keep

00:03:14.990 --> 00:03:16.894
data denormalized in
the world of Firebase?

00:03:18.620 --> 00:03:20.730
&gt;&gt; It's mostly about duplicating data.

00:03:20.730 --> 00:03:25.841
So I often tell people to model
screens in their Firebase.

00:03:25.841 --> 00:03:29.799
So the information that you need in
a screen, try to get that into one

00:03:29.799 --> 00:03:33.211
location or as few locations
as possible in the database.

00:03:33.211 --> 00:03:36.374
And so that's what we had before
with the chat application,

00:03:36.374 --> 00:03:39.846
right, where you store the user
name with each message even though

00:03:39.846 --> 00:03:42.770
you will also have their
name in the profile.

00:03:42.770 --> 00:03:44.744
And you will see this quite often.

00:03:44.744 --> 00:03:48.441
So we see people, if you're having
a list of bank transactions, for

00:03:48.441 --> 00:03:52.142
example, you might want to duplicate
the credit card information for

00:03:52.142 --> 00:03:54.050
every bank transaction.

00:03:54.050 --> 00:03:56.870
So this is one where we
see it quite often too.

00:03:56.870 --> 00:04:00.090
And essentially, they're all variations
on the same theme, where you duplicate

00:04:00.090 --> 00:04:05.970
the data into multiple places so that
you only have to read fewer locations.

00:04:05.970 --> 00:04:09.210
&gt;&gt; So, Puff, are there any times
when you can't use atomic updates?

00:04:09.210 --> 00:04:12.871
&gt;&gt; Yeah, there are, so
atomic updates, right,

00:04:12.871 --> 00:04:18.112
the update either makes it to
the Firebase database or it doesn't.

00:04:18.112 --> 00:04:20.930
So there's no inconsistent
state that you can have.

00:04:20.930 --> 00:04:24.650
We have one other way of doing that,
that's when you use a transaction.

00:04:24.650 --> 00:04:28.920
And atomic updates and transactions,
they are sort of similar,

00:04:28.920 --> 00:04:32.290
although they're
completely different APIs.

00:04:32.290 --> 00:04:36.590
Why you would want to use a transaction
is if you also want to get the previous

00:04:36.590 --> 00:04:38.212
value in there.

00:04:38.212 --> 00:04:40.460
An atomic update can write
to multiple locations, but

00:04:40.460 --> 00:04:42.840
you don't know the current
value on any of the locations.

00:04:42.840 --> 00:04:46.950
If you need to know the current value,
for example if you are going to increase

00:04:46.950 --> 00:04:51.720
a counter or keep the balance
of an account, then you need to

00:04:51.720 --> 00:04:54.640
still use a transaction,
you can't use atomic updates.

00:04:54.640 --> 00:04:56.629
&gt;&gt; So I just want to make
sure on this one, Puff, and

00:04:56.629 --> 00:04:59.072
just make sure our developer
really understands this one.

00:04:59.072 --> 00:05:03.496
Are there any other limits to atomic
updates that we should know about?

00:05:03.496 --> 00:05:05.623
&gt;&gt; Not atomic updates per se.

00:05:05.623 --> 00:05:10.259
One of the things, I think in the
course, we focused a lot on using atomic

00:05:10.259 --> 00:05:14.213
updates from the Android client,
and they work great there.

00:05:14.213 --> 00:05:19.171
But as you are updating more data,
your update command,

00:05:19.171 --> 00:05:22.960
the network traffic will get bigger.

00:05:22.960 --> 00:05:26.499
So there's a certain limit where it's
not a good idea to do this from a client

00:05:26.499 --> 00:05:27.011
anymore.

00:05:27.011 --> 00:05:29.691
If you're building a social media app,
then,

00:05:29.691 --> 00:05:33.912
if a user on your app has a million
followers, then probably you don't want

00:05:33.912 --> 00:05:37.128
to write all that duplicate
data from an Android device,

00:05:37.128 --> 00:05:41.120
because it just becomes too
much data that you're sending.

00:05:41.120 --> 00:05:45.060
So in that case you most likely want to
do still use the atomic updates, but

00:05:45.060 --> 00:05:46.930
you want to use them from a server.

00:05:46.930 --> 00:05:50.332
It's still the same mechanism,
you still use the same API, but

00:05:50.332 --> 00:05:54.238
you're moving it off of the client
device to an environment where you have

00:05:54.238 --> 00:05:58.153
probably better network connectivity,
and more memory available.

00:05:58.153 --> 00:05:58.922
&gt;&gt; That makes sense.

00:05:58.922 --> 00:06:00.115
So, Puff, thanks very much for time.

00:06:00.115 --> 00:06:02.030
I really appreciate your help.

00:06:02.030 --> 00:06:02.860
&gt;&gt; Sure.
You're welcome.

00:06:02.860 --> 00:06:04.780
&gt;&gt; I think it's going to
really help our developer out.

00:06:04.780 --> 00:06:05.820
&gt;&gt; Cool, that's why we're here.

00:06:05.820 --> 00:06:07.120
&gt;&gt; All right, thanks a lot.

00:06:07.120 --> 00:06:08.340
&gt;&gt; Sure.
&gt;&gt; All right, cheers.

00:06:08.340 --> 00:06:09.700
&gt;&gt; Now let's hit the pool.
&gt;&gt; Okay.

