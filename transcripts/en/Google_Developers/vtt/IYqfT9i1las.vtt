WEBVTT
Kind: captions
Language: en

00:00:02.867 --> 00:00:06.100
Alright, this discussion is
about producing custom maps

00:00:06.100 --> 00:00:12.367
with the Google Maps API,
it's really aimed at people

00:00:12.367 --> 00:00:16.033
who understand JavaScript,
server-side functions, and

00:00:16.033 --> 00:00:21.633
have used the API in the past.

00:00:21.633 --> 00:00:25.734
I'm John Coryat,
I'm the presenter.

00:00:25.734 --> 00:00:28.533
Most people have used markers
and polylines on the maps to,

00:00:28.533 --> 00:00:31.700
you know, indicate objects,
they are quite useful, you know,

00:00:31.700 --> 00:00:36.333
you can display a lot of stuff
in all sorts of interesting ways,

00:00:36.333 --> 00:00:41.633
this is a Delaunay triangulation
that I created, but they suffer

00:00:41.633 --> 00:00:47.133
from the slow script problems,
performance, erratic map

00:00:47.133 --> 00:00:49.266
movements when you get
past a certain number,

00:00:49.266 --> 00:00:52.467
obviously this is an exceeding,
exceedingly large number,

00:00:52.467 --> 00:00:55.800
but generally it seems to be
about somewhere between fifty

00:00:55.800 --> 00:01:00.100
and a hundred and fifty objects 
that cause this, this problem.

00:01:00.100 --> 00:01:03.367
Once you exceed that problem,
you have to have a number

00:01:03.367 --> 00:01:08.333
of methods of, of solving it in,
you know, like clustering,

00:01:08.333 --> 00:01:11.834
using the marker manager,
things like that work to a degree,

00:01:11.834 --> 00:01:17.500
but they do suffer from a lot of
data-intensive transactions

00:01:17.500 --> 00:01:19.300
between the server
and the, the map.

00:01:19.300 --> 00:01:23.967
They also have some limitations
as to what they can do.

00:01:23.967 --> 00:01:28.633
So, in conclusion, markers and
polylines are fun and easy, but

00:01:28.633 --> 00:01:31.834
they suffer from performance 
problems, and they're not 

00:01:31.834 --> 00:01:36.133
optimum for lots of data. 
I've, I've found that the best

00:01:36.133 --> 00:01:40.533
thing to display lots of data with
is are image overlays.

00:01:40.533 --> 00:01:41.967
And there are two types
of image overlays:

00:01:41.967 --> 00:01:45.467
you have whole image overlays
and you have tile overlays.

00:01:45.467 --> 00:01:48.834
An example of a whole image
overlay is a ground overlay,

00:01:48.834 --> 00:01:52.900
the G-ground overlay, which is
a standard feature in the maps API.

00:01:52.900 --> 00:01:57.367
This takes a flat projected image
and stretches it to the map.

00:01:57.367 --> 00:02:01.533
Flat projected images have an
equal number of pixels North

00:02:01.533 --> 00:02:04.300
and East and West, North, South,
East, and West, so that they're

00:02:04.300 --> 00:02:07.800
essentially, they are 
unprojected.

00:02:07.800 --> 00:02:08.734
Does that makes sense?

00:02:08.734 --> 00:02:14.000
Everyone understand that concept 
of unprojected flat…? Projected 

00:02:14.000 --> 00:02:17.333
images look, you know, they look 
more like the standard map. 

00:02:17.333 --> 00:02:20.066
Unprojected ones are these, 
it's unprojected, it's kind of 

00:02:20.066 --> 00:02:26.033
squishy. Example of project, 
unprojected image being 

00:02:26.033 --> 00:02:28.200
projected, you notice how it's 
stretched out nicely. 

00:02:28.200 --> 00:02:30.867
This is ground overlay doing 
this work. It's really a 

00:02:30.867 --> 00:02:34.367
phenomenal bunch of JavaScript 
that does this. What it actually 

00:02:34.367 --> 00:02:37.533
does is divide the image into 
three chunks, and stretches 

00:02:37.533 --> 00:02:41.533
each little piece a little bit 
depending on, where in latitude 

00:02:41.533 --> 00:02:44.834
and longitude or latitude the 
image falls, so it looks like 

00:02:44.834 --> 00:02:49.700
a seemless image. It's really 
amazing how this is done. 

00:02:49.700 --> 00:02:52.400
But it, in the process, like 
any JavaScript, 

00:02:52.400 --> 00:02:56.934
it's elaborate and it causes 
erratic movement. 

00:02:56.934 --> 00:03:03.100
Alright, I have, let me see…
..make sure I can do this right, 

00:03:03.100 --> 00:03:07.233
okay… alright, I have a couple 
of demonstrations here…

00:03:07.233 --> 00:03:13.200
...let's see if I can get this 
to work. This is a, a fitter 

00:03:13.200 --> 00:03:16.433
algorithm that, or page, 
that Pam wrote. 

00:03:16.433 --> 00:03:18.333
I copied it and stripped out 
some of the stuff, 

00:03:18.333 --> 00:03:21.233
but this is a clone of her 
page that you can take an 

00:03:21.233 --> 00:03:25.233
image and display it on the map, 
this is that same unprojected 

00:03:25.233 --> 00:03:30.533
image, and you can stretch out 
the image to make it fit. 

00:03:30.533 --> 00:03:34.700
And it's really quite clever, 
the way the system works, 

00:03:34.700 --> 00:03:38.667
you know, so you find how the, 
how the image fits on the map, 

00:03:38.667 --> 00:03:42.233
and you get, you know, 
the latitude and longitude of 

00:03:42.233 --> 00:03:45.400
the corners and you can move it 
around, you can stretch it, 

00:03:45.400 --> 00:03:48.066
all kinds of fun stuff with it. 

00:03:48.066 --> 00:03:50.266
And, see right there, in a 
couple steps, 

00:03:50.266 --> 00:03:53.200
I've gotten something 
fairly close. 

00:03:53.200 --> 00:03:55.100
It's just a matter of 
playing with it, 

00:03:55.100 --> 00:03:58.400
but once you get, once you 
get something that's fairly 

00:03:58.400 --> 00:04:03.033
close, than you can create a, 
a set image, here's an example 

00:04:03.033 --> 00:04:05.667
of a map that's got a ground 
overlay and it's, 

00:04:05.667 --> 00:04:09.533
it's fairly snappy, 
but when you start zooming in, 

00:04:09.533 --> 00:04:15.867
you get some slowish behavior out 
of it. 

00:04:15.867 --> 00:04:17.433
Well this one seems to be 
pretty snappy, 

00:04:17.433 --> 00:04:21.266
but you see when, even up here, 
on the lakes here, 

00:04:21.266 --> 00:04:24.700
the image fits really well, 
so this is ground-overlay with a, 

00:04:24.700 --> 00:04:29.333
with a projected or an 
unprojected image, a flat image. 

00:04:29.333 --> 00:04:30.500
It works pretty well. 

00:04:30.500 --> 00:04:35.633
Is that snapping when you, 
at the end, to the board or…? 

00:04:35.633 --> 00:04:37.400
When you're back here?

00:04:37.400 --> 00:04:38.667
Yeah, when you hit it(?)?

00:04:38.667 --> 00:04:43.133
Yeah, you just pick it up 
and you drag it, and you drop it,

00:04:43.133 --> 00:04:44.433
and it's just a marker.

00:04:44.433 --> 00:04:48.233
It's not snapping to anything, 
it's just using like manual tweaking.

00:04:48.233 --> 00:04:48.934
Yeah.

00:04:48.934 --> 00:04:51.400
So ground overlay is just defined 
by it's bounding box, 

00:04:51.400 --> 00:04:54.800
and so what these basically are 
are just markers that you're 

00:04:54.800 --> 00:04:57.433
dragging around to define 
the bounding box. 

00:04:57.433 --> 00:05:00.667
So all this is is just one, 
one, one image that's been 

00:05:00.667 --> 00:05:01.467
split up a little bit ____.

00:05:01.467 --> 00:05:04.767
Right, yeah, so it's, 
it's very clever and it's really 

00:05:04.767 --> 00:05:10.133
amazing and what's amazing is 
that this image here fits so well 

00:05:10.133 --> 00:05:12.266
after you stretch it, 
and when you consider 

00:05:12.266 --> 00:05:14.834
it's only three images, that's, 
that's really quite phenomenal 

00:05:14.834 --> 00:05:17.433
and the way that they do it 
is they, they locate pixel 

00:05:17.433 --> 00:05:20.367
boundaries and stuff 
so that there's no smudging. 

00:05:20.367 --> 00:05:21.100
It's really amazing.

00:05:21.100 --> 00:05:23.667
So you want to zoom in on 
that to show what happens when 

00:05:23.667 --> 00:05:24.867
you go in really far.

00:05:24.867 --> 00:05:28.900
Okay. 

00:05:28.900 --> 00:05:32.000
It does actually lose itself 
after you go four levels in, 

00:05:32.000 --> 00:05:36.767
I think, and, it's been said 
that that's a bug, 

00:05:36.767 --> 00:05:39.066
but I don't think that's a 
bug as much as it's 

00:05:39.066 --> 00:05:43.467
a capability issue. 
So you know, what is it, 

00:05:43.467 --> 00:05:46.900
a bug or a capability? 
Let's see, that's even, 

00:05:46.900 --> 00:05:50.233
notice also the image, of course, 
is smeared, 

00:05:50.233 --> 00:05:54.166
and it's pixilated because 
you're stretching one image out. 

00:05:54.166 --> 00:05:56.834
So there's limits to what you 
can do with this. 

00:05:56.834 --> 00:05:58.800
But if you've got some image 
that you want to put on the 

00:05:58.800 --> 00:06:02.066
maps and it's, you know, 
you don't, not gonna deal with 

00:06:02.066 --> 00:06:04.700
a lot of zoom levels, 
this is a great way to do it. 

00:06:04.700 --> 00:06:07.367
It's simple, it's clean, 
and generating a flat image 

00:06:07.367 --> 00:06:10.367
out of a program is fairly 
easy if you've got the data. 

00:06:10.367 --> 00:06:12.633
Can it be transparent?

00:06:12.633 --> 00:06:15.500
Unfortunately, you don't have 
opacity options with 

00:06:15.500 --> 00:06:18.367
ground overlay. 
That's, that's some of the 

00:06:18.367 --> 00:06:20.667
limitations, but this is 
essentially a, 

00:06:20.667 --> 00:06:25.300
a simple easy whole-image 
overlay. Yes, go ahead.

00:06:25.300 --> 00:06:28.233
So if you made that 
really high resolution image, 

00:06:28.233 --> 00:06:31.100
than it would slow down even 
more with the processing ____?

00:06:31.100 --> 00:06:33.400
Well, yeah, you take that 
high resolution image and 

00:06:33.400 --> 00:06:36.633
you cram it in to a little piece, 
you know, so you're still 

00:06:36.633 --> 00:06:38.533
loading the full image, 
it's not trimming it out, 

00:06:38.533 --> 00:06:41.166
it's just doing what browsers 
do with big images. 

00:06:41.166 --> 00:06:43.133
But it would look cleaner 
closer in but it would be slower?

00:06:43.133 --> 00:06:45.300
It would. 
And also you got to remember 

00:06:45.300 --> 00:06:49.133
that that image then extends 
out into the memory, so, 

00:06:49.133 --> 00:06:52.066
you know, you're you're taking 
a lot of risk by using 

00:06:52.066 --> 00:06:53.767
a big image, 
but still, even, 

00:06:53.767 --> 00:06:56.200
even zoomed in this fast, 
or this far, 

00:06:56.200 --> 00:06:57.500
this thing works pretty well. 

00:06:57.500 --> 00:07:01.500
It just is ugly, you know. 
It gets all smeary and stuff, 

00:07:01.500 --> 00:07:04.033
so it's not really usable for 
the users when you 

00:07:04.033 --> 00:07:05.800
start zooming in. 

00:07:05.800 --> 00:07:09.967
But as, as a, as a way of 
getting an image on the map, 

00:07:09.967 --> 00:07:13.000
this is really great. 
And it can be satellite pictures, 

00:07:13.000 --> 00:07:15.767
it could be like arial photos 
is a good example. 

00:07:15.767 --> 00:07:17.967
Once you locate them on the map, 
they, they, you know, 

00:07:17.967 --> 00:07:20.567
move around with it, 
they, they in, they zoom in, 

00:07:20.567 --> 00:07:24.100
zoom out, so it's really a 
great way to do it. 

00:07:24.100 --> 00:07:25.033
Any other questions. 

00:07:25.033 --> 00:07:25.700
Yes, sir. 

00:07:25.700 --> 00:07:29.867
If you do you're marking 
on the map like _______________, 

00:07:29.867 --> 00:07:31.633
when you put your picture on top, 
does it come through 

00:07:31.633 --> 00:07:32.800
or is it behind the picture?

00:07:32.800 --> 00:07:36.934
Um, as you can see from this 
one here, it's on top. 

00:07:36.934 --> 00:07:40.033
So the markers are on top of 
the, the ground overlay layer.

00:07:40.033 --> 00:07:42.400
But I mean, if you put something 
on the map, 

00:07:42.400 --> 00:07:45.233
and then put the picture on top, 
you would lose the markings 

00:07:45.233 --> 00:07:49.734
from the map, like all 
the states are gone.

00:07:49.734 --> 00:07:52.767
Oh yes, right, you have 
no opacity options with this, 

00:07:52.767 --> 00:07:56.300
this thing, and, and because 
of the way that it works with, 

00:07:56.300 --> 00:08:00.000
with inter, internet explorer, 
you have a choice of opacity 

00:08:00.000 --> 00:08:01.667
or transparency. 

00:08:01.667 --> 00:08:03.700
So you could create it with 
an alpha channel, 

00:08:03.700 --> 00:08:06.367
but it's gonna use 
the alpha loader, 

00:08:06.367 --> 00:08:08.533
an IE, and so you don't, 
you can't use them both, 

00:08:08.533 --> 00:08:10.967
you have the choice of opacity 
or transparency, 

00:08:10.967 --> 00:08:13.800
so if you used the alpha channel 
on this, this would be, 

00:08:13.800 --> 00:08:16.467
you know, whitish covering 
the ocean, 

00:08:16.467 --> 00:08:19.066
and you wouldn't have 
transparency. 

00:08:19.066 --> 00:08:20.467
So, it, it's, it's good. 

00:08:20.467 --> 00:08:21.400
It's a good way to do it. 

00:08:21.400 --> 00:08:24.633
It has some limited features, 
but for quick and dirty, 

00:08:24.633 --> 00:08:29.767
you can't beat it. 
Anything else? 

00:08:29.767 --> 00:08:37.734
Okay. Let's go back to this. 
Okay, so that's that. 

00:08:37.734 --> 00:08:41.266
In conclusion, flat images 
work well. 

00:08:41.266 --> 00:08:44.467
It's difficult to align and 
we have performance issues, 

00:08:44.467 --> 00:08:48.033
but other than that, it's, 
it's, for quick and dirty, 

00:08:48.033 --> 00:08:50.500
fast ways of doing it. 

00:08:50.500 --> 00:08:52.166
All you need to know are 
the corners, 

00:08:52.166 --> 00:08:54.533
and you can place an image
on the map. 

00:08:54.533 --> 00:08:57.200
There's a couple of really 
good examples out there people 

00:08:57.200 --> 00:09:02.000
did for Area 51 where they 
superimposed, you know, 

00:09:02.000 --> 00:09:06.066
things on top of airfields and, 
and that's pretty cool. 

00:09:06.066 --> 00:09:07.867
What did you have on your
one, you had…?

00:09:07.867 --> 00:09:09.300
I have the volcano. 

00:09:09.300 --> 00:09:10.100
Volcano, right.

00:09:10.100 --> 00:09:12.800
But I've actually done it, 
I did it with an old, 

00:09:12.800 --> 00:09:15.767
we had ariel photos of my house 
when I was a kid, 

00:09:15.767 --> 00:09:18.266
and I'm kind of mad because 
right now on Google maps, 

00:09:18.266 --> 00:09:21.600
it shows that somebody has
built a house on our land, 

00:09:21.600 --> 00:09:24.400
right? So I have, 
I sent this to my family, 

00:09:24.400 --> 00:09:27.834
it's just a ground overlay 
that is our old ariel photo 

00:09:27.834 --> 00:09:29.633
overlayed on the map, 
so they can see what it 

00:09:29.633 --> 00:09:31.700
used to be like before 
people intruded.

00:09:31.700 --> 00:09:34.300
Right, and see, using KML, 
that's even easier.

00:09:34.300 --> 00:09:35.133
Right

00:09:35.133 --> 00:09:37.700
You know, so you can create 
that as a KML object 

00:09:37.700 --> 00:09:38.900
and load it through MyMaps even.

00:09:38.900 --> 00:09:41.533
Right, cause ground overlay is 
actually taken from KML, 

00:09:41.533 --> 00:09:45.266
so you can either do it via 
the G-ground overlay class 

00:09:45.266 --> 00:09:48.333
in the maps API, or you can 
find the KML that has the ground 

00:09:48.333 --> 00:09:52.233
overlay defined in it, 
and it'll work the same.

00:09:52.233 --> 00:09:54.900
The bottom line is it's 
simple, it's easy to use, 

00:09:54.900 --> 00:09:58.333
and it, it's, it's fun. 

00:09:58.333 --> 00:10:00.333
Alright, the next whole 
image overlay is, 

00:10:00.333 --> 00:10:02.467
I call projected overlay, 
that's a class 

00:10:02.467 --> 00:10:05.000
I wrote in JavaScript. 

00:10:05.000 --> 00:10:08.100
It takes a projected image as 
opposed to an unprojected 

00:10:08.100 --> 00:10:09.633
image and sticks it on the map, 

00:10:09.633 --> 00:10:11.467
in a similar way to 
ground overlay, 

00:10:11.467 --> 00:10:14.600
except for it doesn't do all 
that extra stretching and stuff, 

00:10:14.600 --> 00:10:18.433
so it actually ends up 
being faster, 

00:10:18.433 --> 00:10:21.567
it suffers less from zooming. 

00:10:21.567 --> 00:10:23.600
And there's another really 
neat effect that you can do 

00:10:23.600 --> 00:10:27.100
is you can have programs 
generate the data to spit 

00:10:27.100 --> 00:10:29.400
out to the, the map. 

00:10:29.400 --> 00:10:33.066
As an example, here we have a 
projected overlay and it 

00:10:33.066 --> 00:10:36.834
slaps on to the map very cleanly, 
there's no stretching and 

00:10:36.834 --> 00:10:39.834
you end up with a cleaner, 
easier to see image. 

00:10:39.834 --> 00:10:42.567
The really only difference 
between ground overlay and 

00:10:42.567 --> 00:10:45.000
this class that I wrote is 
I just stripped out a lot of 

00:10:45.000 --> 00:10:48.367
the stuff, and added, 
I don't know if you've used, 

00:10:48.367 --> 00:10:52.467
what was it, T-photo? 
T-photo is the, I forget, 

00:10:52.467 --> 00:10:55.767
was it Mike Williams, 
was it one of his, gen, geniuses? 

00:10:55.767 --> 00:10:58.133
I believe Mike Williams 
wrote T-photo, 

00:10:58.133 --> 00:11:01.533
but T-photo was a, 
a similar type-thing, 

00:11:01.533 --> 00:11:05.066
except for that I needed to have 
a little extra functionality, 

00:11:05.066 --> 00:11:07.967
so I borrowed from T-photo, 
I borrowed from ground overlay, 

00:11:07.967 --> 00:11:09.367
and I created this one. 

00:11:09.367 --> 00:11:11.967
Everything, by the way, that you 
see today, is downloadable.

00:11:11.967 --> 00:11:14.367
All the source code, all the
server-side stuff, everything, 

00:11:14.367 --> 00:11:17.333
so you can download the data, 
to create every one of 

00:11:17.333 --> 00:11:22.300
these examples, so just keep 
that in mind. 

00:11:22.300 --> 00:11:28.000
So, as a demonstration, I 
have a couple of examples there. 

00:11:28.000 --> 00:11:32.367
And, let's see. 
And there is, there is, 

00:11:32.367 --> 00:11:35.300
you can see it's similar
to this one. 

00:11:35.300 --> 00:11:44.200
Opps, let's go back down. 
Five, or mayble a little bit in. 

00:11:44.200 --> 00:11:48.433
It's similar looking to this one, 
but it looks cleaner, 

00:11:48.433 --> 00:11:51.467
because there's no stretching, 
and as you zoom in, 

00:11:51.467 --> 00:11:56.834
of course, 
it's still looks clean. 

00:11:56.834 --> 00:11:58.066
It's, it's really a 
simple thing, 

00:11:58.066 --> 00:12:00.467
this is actually counties in 
the United States, 

00:12:00.467 --> 00:12:03.600
downloaded from the census and 
generated out of a program 

00:12:03.600 --> 00:12:04.867
as an image. 

00:12:04.867 --> 00:12:08.900
As a projected image, 
so using the Mercator(?) projection, 

00:12:08.900 --> 00:12:12.633
I have a, a, a Perl moduel 
that's pretty easy to read. 

00:12:12.633 --> 00:12:15.300
It can be translated very easily 
into any other languae, 

00:12:15.300 --> 00:12:19.100
but to calculate all the things 
that you need to create tiles 

00:12:19.100 --> 00:12:22.667
and understand how to, 
to fit them into a, 

00:12:22.667 --> 00:12:25.367
into images that, 
that appear on Google maps, 

00:12:25.367 --> 00:12:28.767
it, it's written in Perl, 
I don't know if any of you

00:12:28.767 --> 00:12:30.900
are familiar with Perl, 
Perl is a fairly easy 

00:12:30.900 --> 00:12:32.600
to read language. 

00:12:32.600 --> 00:12:37.867
If you've done Java or 
JavaScript or C or PHP, 

00:12:37.867 --> 00:12:39.767
it's almost directly 
translatable, 

00:12:39.767 --> 00:12:41.800
so if you just take this module 
that I wrote and 

00:12:41.800 --> 00:12:45.433
copy the formulas out of it, 
which I got out of the API, 

00:12:45.433 --> 00:12:48.567
you know, by picking through 
the JavaScript, 

00:12:48.567 --> 00:12:53.166
you can create your own, or 
use mine, you know, feel free. 

00:12:53.166 --> 00:12:55.266
And here's another example. 

00:12:55.266 --> 00:12:57.834
Oh, let's, let me see, 
I'm a little, 

00:12:57.834 --> 00:12:59.333
got that in the wrong spot. 

00:12:59.333 --> 00:13:01.900
Here's an example of a, 
of a projected overlay, 

00:13:01.900 --> 00:13:05.500
this is, these are counties 
generated directly out of data 

00:13:05.500 --> 00:13:07.567
and displayed on the map. 

00:13:07.567 --> 00:13:10.633
If I move this, 
this is the same stretcher thing. 

00:13:10.633 --> 00:13:13.300
It goes, it's going down to the, 
it just generated 

00:13:13.300 --> 00:13:15.800
that image on the fly 
using Postgres,

00:13:15.800 --> 00:13:19.633
the database Postgres, 
doing a boudingbox query 

00:13:19.633 --> 00:13:22.533
into the database to pull 
out counties that fit directly 

00:13:22.533 --> 00:13:23.633
into that bounding box. 

00:13:23.633 --> 00:13:27.200
And here are the counties 
that fall into that bounding box. 

00:13:27.200 --> 00:13:30.233
This is in this area, obviously. 

00:13:30.233 --> 00:13:32.900
The data, like I say, 
is available from the census…

00:13:32.900 --> 00:13:37.133
oh, one other thing you have 
is you have opacity options 

00:13:37.133 --> 00:13:40.533
with this, so you can, 
you know, go, 

00:13:40.533 --> 00:13:43.000
you can make a slider or 
something fancy out of this, 

00:13:43.000 --> 00:13:47.233
too, I just have, you notice 
it's really simple to set opacity, 

00:13:47.233 --> 00:13:50.033
you just dot, set, 
set opacity with a number in it 

00:13:50.033 --> 00:13:51.700
and that's the percentage. 

00:13:51.700 --> 00:13:53.734
That's fifty and 
a hundred percent. 

00:13:53.734 --> 00:13:58.300
But as you change this 
little box, 

00:13:58.300 --> 00:14:00.400
goes down and does another 
query and comes up with a 

00:14:00.400 --> 00:14:03.667
different list, 
and another interesting thing 

00:14:03.667 --> 00:14:06.900
that's going on in this program, 
is that the image being generated 

00:14:06.900 --> 00:14:11.600
by the Perl program, 
this is Perl using GD, 

00:14:11.600 --> 00:14:15.834
what it does inside is it put, 
attaches a cookie to this image, 

00:14:15.834 --> 00:14:18.633
and the cookie is received 
into the page, 

00:14:18.633 --> 00:14:21.233
and inside that cookie 
is this metadata for the 

00:14:21.233 --> 00:14:23.100
counties that is contained 
within the image, 

00:14:23.100 --> 00:14:24.934
so that's kind of a cool thing. 

00:14:24.934 --> 00:14:29.166
And, so instead of having to 
have the ser, the client, 

00:14:29.166 --> 00:14:30.166
the browser say, 

00:14:30.166 --> 00:14:32.834
“Okay, you just sent me 
something. What's in it?” 

00:14:32.834 --> 00:14:36.133
And then go down and have the, 
the, the server 

00:14:36.133 --> 00:14:38.400
re-generate that data, 
cause it would have to do another 

00:14:38.400 --> 00:14:40.233
similar bounding box query to say, 

00:14:40.233 --> 00:14:43.333
“Okay, well here are the counties 
that are in that image,” 

00:14:43.333 --> 00:14:46.867
what happens inside this image is 
the image already does the query, 

00:14:46.867 --> 00:14:47.467
so it says, 

00:14:47.467 --> 00:14:49.533
“Okay, I've got this data, 
let me just bound it up as 

00:14:49.533 --> 00:14:52.900
cookie and send it off to 
the browser.” 

00:14:52.900 --> 00:14:56.300
And then the browser harvets
the cookie and erases it. 

00:14:56.300 --> 00:14:59.367
So, are they all stored in a
database as a series of points?

00:14:59.367 --> 00:15:00.734
Yeah.

00:15:00.734 --> 00:15:03.066
You're using Postgres GIS.

00:15:03.066 --> 00:15:05.000
Postgres SQL straight.

00:15:05.000 --> 00:15:06.233
Oh, not GIS.

00:15:06.233 --> 00:15:09.367
I used post GIS, yes. 
I used that to handle 

00:15:09.367 --> 00:15:11.867
shape files and do a 
lot of cool things. 

00:15:11.867 --> 00:15:14.000
But when it comes to 
server performance, 

00:15:14.000 --> 00:15:19.100
post GIS is a lot slower 
than post SQL or Postgres 

00:15:19.100 --> 00:15:21.767
standard spatial functions. 

00:15:21.767 --> 00:15:23.734
We're talking orders 
of magnitude here, 

00:15:23.734 --> 00:15:27.300
because the post GIS 
library is external, 

00:15:27.300 --> 00:15:30.233
so every time you execute 
a post GIS function, 

00:15:30.233 --> 00:15:32.533
it has to load it from 
the external world and 

00:15:32.533 --> 00:15:35.400
then operate on the 
data one at a time. 

00:15:35.400 --> 00:15:40.567
Now, with postgres, postgres
SQL itself, 

00:15:40.567 --> 00:15:43.633
the standard spatial functions 
like “at”, and, you know, 

00:15:43.633 --> 00:15:45.633
the distance functions and 
various things, 

00:15:45.633 --> 00:15:48.500
they are executed as 
native functions. 

00:15:48.500 --> 00:15:52.000
You'll see at least ten to a 
hundred times faster 

00:15:52.000 --> 00:15:55.600
using Postgres as opposed 
to post GIS. 

00:15:55.600 --> 00:15:58.500
Now on the other side, 
post GIS does a lot more. 

00:15:58.500 --> 00:16:02.066
You can do union sets of 
polygons, you can do, 

00:16:02.066 --> 00:16:05.266
you know, intersection points, 
you can do all kinds of, 

00:16:05.266 --> 00:16:08.066
you can do actual distance 
calculations using miles 

00:16:08.066 --> 00:16:10.800
and such, or kilometers, 
you can do that using 

00:16:10.800 --> 00:16:13.266
post GIS and a million 
other things. 

00:16:13.266 --> 00:16:15.900
But, it is slower. 
It's slow as the dickens. 

00:16:15.900 --> 00:16:19.300
And I did one little test a 
couple months ago 

00:16:19.300 --> 00:16:22.900
where I was looking for…
I forget what it was, 

00:16:22.900 --> 00:16:27.567
it was a bounding things that 
intersected with each other. 

00:16:27.567 --> 00:16:30.200
And I wrote it in post GIS 
and it started executing 

00:16:30.200 --> 00:16:33.367
and I had sixty million 
things I had to go through, 

00:16:33.367 --> 00:16:36.834
I estimated it would take six 
hundred days to run. 

00:16:36.834 --> 00:16:39.533
And I turned around and 
I rewrote it with the native SQ, 

00:16:39.533 --> 00:16:42.800
post SQL functions, and 
it was done in twenty minutes. 

00:16:42.800 --> 00:16:47.066
So, you know, it was like 
phenomenally faster, 

00:16:47.066 --> 00:16:49.867
and I think you'll see if 
you're doing simple things, 

00:16:49.867 --> 00:16:51.500
if you're looking for 
bounding boxes, 

00:16:51.500 --> 00:16:51.567
if you're looking for 
point and polygon, 

00:16:51.567 --> 00:16:56.367
if you're looking for distance, 
“closest point to A”, 

00:16:56.367 --> 00:16:58.333
you know, those calculations, 
they're native 

00:16:58.333 --> 00:16:59.433
functions in Postgres. 

00:16:59.433 --> 00:17:01.233
You have to load the 
polygon sets, 

00:17:01.233 --> 00:17:04.000
they're different kind of data, 
they're polygon data types 

00:17:04.000 --> 00:17:09.934
in Postgress, as opposed to 
spatial objects in post GIS, 

00:17:09.934 --> 00:17:11.500
the data format 
is slightly different. 

00:17:11.500 --> 00:17:14.000
But they are much faster 
to execute, 

00:17:14.000 --> 00:17:18.066
it's easier to work with, I find 
post GIS a little bit 

00:17:18.066 --> 00:17:20.367
cumbersome to work 
with in programs. 

00:17:20.367 --> 00:17:23.367
The data is not as easy 
to play with. Yes, go ahead.

00:17:23.367 --> 00:17:25.333
Do other databases do 
those things, 

00:17:25.333 --> 00:17:30.533
like, could you do that 
in MySQL(?) or SQLserver? 

00:17:30.533 --> 00:17:33.066
I mean cause, post, the 
Postgres you're talking about, 

00:17:33.066 --> 00:17:36.266
it's just like a standard, 
you know, it's the one that, 

00:17:36.266 --> 00:17:37.867
you know, Sun didn't buy, right? 

00:17:37.867 --> 00:17:41.233
I mean, it's the other 
really big, you know, 

00:17:41.233 --> 00:17:43.633
database that ________.

00:17:43.633 --> 00:17:46.400
Yeah, the question is, 
I have to repeat the question, 

00:17:46.400 --> 00:17:48.934
the question is, can other 
databases besides
 

00:17:48.934 --> 00:17:52.033
Postgres do this? The answer 
is yes and no. 

00:17:52.033 --> 00:17:56.900
My SQL will do a lot of things, 
but they don't, 

00:17:56.900 --> 00:17:58.633
they're really haven't 
really imple, 

00:17:58.633 --> 00:18:01.333
implemented the spatial 
functions fully yet. 

00:18:01.333 --> 00:18:03.100
You can do bounding box 
calculations, 

00:18:03.100 --> 00:18:05.133
but you can't do point 
and polygon. 

00:18:05.133 --> 00:18:07.834
You can do distance calculations, 
but you can't 

00:18:07.834 --> 00:18:11.367
really do them right. 

00:18:11.367 --> 00:18:14.166
I think probably, 
you know, 

00:18:14.166 --> 00:18:16.867
now that they've been 
purchased by a big guy, 

00:18:16.867 --> 00:18:20.166
maybe they'll advance it, 
maybe they'll abandon it. 

00:18:20.166 --> 00:18:24.066
Who knows? But, there 
are some things that'll do. 

00:18:24.066 --> 00:18:26.600
Another thing that I find 
that MySQL is a little bit 

00:18:26.600 --> 00:18:28.734
more cumbersome with is that 
it stores the data 

00:18:28.734 --> 00:18:32.133
in the WKB format, 
the well-known binary 

00:18:32.133 --> 00:18:35.266
as opposed to wkt, 
well-known text. 

00:18:35.266 --> 00:18:37.734
Postgres in the polygon 
format is, 

00:18:37.734 --> 00:18:42.300
is a human-readable format, 
GIS is the WKB format, 

00:18:42.300 --> 00:18:44.367
it's pretty annoying, 
you do a data dump, 

00:18:44.367 --> 00:18:47.633
you got garbage you 
can't read it, you know, 

00:18:47.633 --> 00:18:49.266
you have to use a function 
to get the data on a 

00:18:49.266 --> 00:18:52.533
readable format, and it's 
a little less friendly, 

00:18:52.533 --> 00:18:57.700
I find. But Postgres, 
I'm just a Postgres fan, 

00:18:57.700 --> 00:19:02.900
I guess. As far as SQL server, 
Mircosoft I'm sure sells a 

00:19:02.900 --> 00:19:06.100
wonderful addition. 
It's ex, it's extra. 

00:19:06.100 --> 00:19:09.400
Same with Oracle, 
Oracle has a spatial. 

00:19:09.400 --> 00:19:11.233
From what I understand, 
I haven't worked with it myself, 

00:19:11.233 --> 00:19:14.967
it's top-notch. 
But, you know, I mean, 

00:19:14.967 --> 00:19:17.300
you just whip out the checkbook 
and start writing checks 

00:19:17.300 --> 00:19:19.133
and don't stop, and every year, 
you're gonna have 

00:19:19.133 --> 00:19:20.300
to write another one. 

00:19:20.300 --> 00:19:23.567
With SQLserver you go from, 
you know, the workstation, 

00:19:23.567 --> 00:19:26.767
to standard, to you know, 
enterprise, and you move up, 

00:19:26.767 --> 00:19:29.800
and it seems like the only 
difference between them is you 

00:19:29.800 --> 00:19:31.934
can run it with a 
gagillion processors, 

00:19:31.934 --> 00:19:34.166
you know, like workstations 
one processor, 

00:19:34.166 --> 00:19:36.066
standards two processors, 
like, they don't say 

00:19:36.066 --> 00:19:39.834
anything about GIS stuff when 
you move to the next version. 

00:19:39.834 --> 00:19:45.133
I'm not really sure how 
Microsoft wants to work things, 

00:19:45.133 --> 00:19:47.800
but the bottom line is 
with Microsoft is 

00:19:47.800 --> 00:19:51.867
you gotta pay for it, you know, 
the great thing about MySQL, 

00:19:51.867 --> 00:19:54.999
Postgres, post GIS, these 
are all free, you know, 

00:19:54.999 --> 00:19:58.033
or open-source products, 
so you know, 

00:19:58.033 --> 00:19:59.333
it doesn't matter how big 
your company or 

00:19:59.333 --> 00:20:01.867
how small your company is, like, 
for instance, my company, 

00:20:01.867 --> 00:20:03.367
USNaviguide, we're only, 
you know, one, two, 

00:20:03.367 --> 00:20:07.667
or three people, 
depending on the workload. 

00:20:07.667 --> 00:20:11.200
And, if I had to pay seven 
thousand dollars for a license 

00:20:11.200 --> 00:20:14.633
to SQLserver and then another 
four or five thousand for 

00:20:14.633 --> 00:20:18.500
the spatial functions, you know, 
I wouldn't do it, couldn't do it. 

00:20:18.500 --> 00:20:19.934
I'd have to find something else.

00:20:19.934 --> 00:20:21.367
You'd have to fire someone.

00:20:21.367 --> 00:20:24.967
Or I'd have to charge more, 
I couldn't give free things away, 

00:20:24.967 --> 00:20:26.667
like, like for instance, 
you know, 

00:20:26.667 --> 00:20:29.200
the zipcode maps are all free, 
you know, 

00:20:29.200 --> 00:20:32.734
they run under the free API 
using, you know, 

00:20:32.734 --> 00:20:36.500
free Linux-based servers, 
not free, open-source 

00:20:36.500 --> 00:20:40.000
Linux-based servers, 
open-source based languages 

00:20:40.000 --> 00:20:44.967
like Postgres or, like Perl, 
open-source extensions for Perl 

00:20:44.967 --> 00:20:47.900
like GD. GD is wonderful, 
I don't know if any of 

00:20:47.900 --> 00:20:52.667
you have used GD, 
G is, GD is extremely powerful 

00:20:52.667 --> 00:20:56.266
for image manipulation, 
all this is done with GD and Perl. 

00:20:56.266 --> 00:20:59.467
GD also works with C and 
also PHP, 

00:20:59.467 --> 00:21:01.533
there's image magic 
is another one…

00:21:01.533 --> 00:21:04.100
Wait, what part of this is
done with GD?

00:21:04.100 --> 00:21:07.800
Inside…what part of this is 
done with GD is inside of 

00:21:07.800 --> 00:21:09.967
the server, what I'm doing here 
on this page is
 

00:21:09.967 --> 00:21:12.834
I'm sending the coordinates of 
this bounding box to the server, 

00:21:12.834 --> 00:21:17.433
which happens to be this laptop, 
and I'm taking a Perl program, 

00:21:17.433 --> 00:21:19.233
a Perl script, 
and I'm saying, 

00:21:19.233 --> 00:21:23.200
“Give me all of the counties 
inside of this bounding box… 

00:21:23.200 --> 00:21:25.000
Like you, 
that's a SQL statement….

00:21:25.000 --> 00:21:25.367
Right.

00:21:25.367 --> 00:21:26.133
Okay.

00:21:26.133 --> 00:21:28.934
…that, that contain, that 
fully contain these counties. 

00:21:28.934 --> 00:21:31.400
Then I get back the data in 
the form of 

00:21:31.400 --> 00:21:34.867
human readable polygon data, 
I parse it with Perl, 

00:21:34.867 --> 00:21:38.367
and then I take it and 
I create filled polygons in, 

00:21:38.367 --> 00:21:41.500
with GD, 
GD is image manipulations program, 

00:21:41.500 --> 00:21:45.600
and create PNG images directly 
out of GD and transmit them back 

00:21:45.600 --> 00:21:48.033
to the server as 
fully-formed image. 

00:21:48.033 --> 00:21:49.333
So that's what's going on here. 

00:21:49.333 --> 00:21:53.500
That's magic, man! 
That's awesome!

00:21:53.500 --> 00:21:55.767
Just did it again, 
you see how fast that is? 

00:21:55.767 --> 00:21:58.333
I mean, that's incredibly fast, 
and there's thirty-five hundred 

00:21:58.333 --> 00:22:01.333
polygons in this, 
in this country that make 

00:22:01.333 --> 00:22:04.734
up the various counties. 
So, you know, I mean, 

00:22:04.734 --> 00:22:07.433
just that fast, and you know, 
when you zoom in, 

00:22:07.433 --> 00:22:10.400
as you zoom in, you know, 
it does it again, 

00:22:10.400 --> 00:22:12.000
and now I put labels on them. 

00:22:12.000 --> 00:22:13.266
Oh, when it gets big enough.

00:22:13.266 --> 00:22:15.166
Yeah, as soon as it gets 
big enough to hold the label, 

00:22:15.166 --> 00:22:16.000
I put a label on it…

00:22:16.000 --> 00:22:19.533
______ opay, opas, I don't 
know how to say it….

00:22:19.533 --> 00:22:20.400
Opacity.

00:22:20.400 --> 00:22:24.100
So you can add opacity 
and trans, like needs, 

00:22:24.100 --> 00:22:27.266
it also has transparency, 
too, like….

00:22:27.266 --> 00:22:32.433
There's a trick here, 
there's a little trick here that, 

00:22:32.433 --> 00:22:35.066
that seems kind of odd, 
with internet exploerer, 

00:22:35.066 --> 00:22:38.133
this works just as well, 
and what's funny is 

00:22:38.133 --> 00:22:43.200
that because this is a dot PL
image it's not a dot png image, 

00:22:43.200 --> 00:22:47.500
alpha channel or transparency 
and opacity work. 

00:22:47.500 --> 00:22:51.066
Don't ask me why. 
It's like Mircrosoft 

00:22:51.066 --> 00:22:53.467
decided that they were 
gonna treat PNGs as if, 

00:22:53.467 --> 00:22:57.800
as a you know, a secondary 
data-type or image type, 

00:22:57.800 --> 00:23:01.734
and created this limitation on 
them with the alpha or the, 

00:23:01.734 --> 00:23:05.266
the what's it called, 
the alpha-loader, 

00:23:05.266 --> 00:23:08.066
and for some reason, 
it works with Perl, 

00:23:08.066 --> 00:23:10.233
you know, with Perl 
generated images.

00:23:10.233 --> 00:23:12.367
Did you write all that stuff 
down somewhere? 

00:23:12.367 --> 00:23:15.133
I mean, like, how would we 
remember that, I mean that's…

00:23:15.133 --> 00:23:19.000
You can download, like I say, 
all of the code in all of 

00:23:19.000 --> 00:23:23.233
these examples is downloadable, 
so you can download this program 

00:23:23.233 --> 00:23:26.100
that generates this code, 
you can download the data 

00:23:26.100 --> 00:23:29.734
that produced this, you can put 
them on your own Linux server 

00:23:29.734 --> 00:23:31.667
or Mac server 
or whatever you want, 

00:23:31.667 --> 00:23:33.533
or put them in, 
you can also do, 

00:23:33.533 --> 00:23:36.934
all this works under Windows, 
Active Perl is a program 

00:23:36.934 --> 00:23:38.834
available for Windows, 

00:23:38.834 --> 00:23:42.467
Postgres with post GIS is 
available for windows. 

00:23:42.467 --> 00:23:46.166
Obviously, you know, apache(?) 
and all those other things 

00:23:46.166 --> 00:23:46.667
are available, 

00:23:46.667 --> 00:23:50.734
so these can be all 
done under any operating system. 

00:23:50.734 --> 00:23:53.000
You might have to tweak 
the various, 

00:23:53.000 --> 00:23:55.233
you know file names and 
such to work under Windows, 

00:23:55.233 --> 00:23:57.467
but it should work under any 
Linux server and 

00:23:57.467 --> 00:24:00.500
all those are free modules, 
or open-source moduels, 

00:24:00.500 --> 00:24:05.467
from, available as rpm's or, you 
know, directly from the, 

00:24:05.467 --> 00:24:08.166
the creators. I prefer to 
actually compile 

00:24:08.166 --> 00:24:11.800
everything from source rather 
than download them as rpm's, 

00:24:11.800 --> 00:24:14.166
you get better versions.

00:24:14.166 --> 00:24:16.033
Plus, you have a better 
understanding of what's 

00:24:16.033 --> 00:24:18.300
going on, right?

00:24:18.300 --> 00:24:19.734
At this point, 
I think I probably have 

00:24:19.734 --> 00:24:22.734
a fairly good understanding, 
but it's really not that difficult. 

00:24:22.734 --> 00:24:26.033
Once you see the code, 
the mystery is the fact 

00:24:26.033 --> 00:24:28.834
that you can do it, 
you know, that's what I think is 

00:24:28.834 --> 00:24:31.200
the big stumbling block is 
that people don't realize that 

00:24:31.200 --> 00:24:35.800
you can do this with easy 
to use tools, and fast. 

00:24:35.800 --> 00:24:39.233
But the mystery is just how, 
not, not, or the fact that 

00:24:39.233 --> 00:24:42.033
you can, not the how, 
the how is actually very easy, 

00:24:42.033 --> 00:24:44.333
the code to do this is 
incredibly simple, 

00:24:44.333 --> 00:24:48.133
it's almost like using the API, 
you just initialize a new object, 

00:24:48.133 --> 00:24:48.567
and you say, 

00:24:48.567 --> 00:24:52.133
“This is a new image object, 
and I'm creating a polygon, 

00:24:52.133 --> 00:24:54.467
and here are the points, 
and color it this, 

00:24:54.467 --> 00:24:57.934
and, you know, make the image 
this size and shoot it out 

00:24:57.934 --> 00:25:00.533
to standard out,” 
you know, it's no, 

00:25:00.533 --> 00:25:03.133
no real big deal here, you know, 
it's really quite simple. 

00:25:03.133 --> 00:25:07.433
It seems like a big deal, 
but, I mean, that looks cool, 

00:25:07.433 --> 00:25:11.734
I just can't believe that, 
all of, all of what it's doing. 

00:25:11.734 --> 00:25:13.800
Well once you see the actual 
code, and it's, 

00:25:13.800 --> 00:25:16.633
the download site 
is on the last page, 

00:25:16.633 --> 00:25:20.400
here, but the, the, all the 
stuff is available for download, 

00:25:20.400 --> 00:25:23.300
and you can create your own 
tiles, I have a tile-cutter, 

00:25:23.300 --> 00:25:25.600
I have all kinds of other 
things that I'll get to 

00:25:25.600 --> 00:25:26.533
here in a minute.

00:25:26.533 --> 00:25:27.700
We should move on.'

00:25:27.700 --> 00:25:30.367
Okay.

00:25:30.367 --> 00:25:32.867
Okay, does that print 
out when you print it?

00:25:32.867 --> 00:25:34.533
It would, yeah, 
cause that's an image, 

00:25:34.533 --> 00:25:36.400
it's not, it's not an 
overlay, so yes, 

00:25:36.400 --> 00:25:37.500
it would print out. 

00:25:37.500 --> 00:25:39.033
Or it should. 
I never really tried. 

00:25:39.033 --> 00:25:40.166
I don't do much printing. 

00:25:40.166 --> 00:25:43.867
I'm not a tree-cutter, 
so. But I believe…

00:25:43.867 --> 00:25:46.233
In real estate, they like 
to cut the trees. 

00:25:46.233 --> 00:25:50.066
I believe as far as printing 
goes that image overlays work 

00:25:50.066 --> 00:25:55.100
because they're not objects, 
they're not marker type objects, 

00:25:55.100 --> 00:25:58.100
they're just images, 
so they work just like, 

00:25:58.100 --> 00:26:00.300
if you can print a map, 
you can print these. 

00:26:00.300 --> 00:26:05.200
I'm not sure how the opacity and 
all of that works with printing, 

00:26:05.200 --> 00:26:08.433
that's not something I'm 
too familiar with. 

00:26:08.433 --> 00:26:10.400
Right, so in conclusion, 

00:26:10.400 --> 00:26:13.567
projected overlays work good 
for a single viewport, 

00:26:13.567 --> 00:26:16.567
type image, it's one of the 
limitations of this type of 

00:26:16.567 --> 00:26:21.834
whole image overlay is that you 
have to stick to one viewport. 

00:26:21.834 --> 00:26:25.767
So you can't have an image 
overlay that, that would take 

00:26:25.767 --> 00:26:27.767
up ten viewports because if 
you're looking at 

00:26:27.767 --> 00:26:32.867
a 1024 by 768 viewport, and you 
multiply that by ten, 

00:26:32.867 --> 00:26:36.100
you're looking at a ten thousand 
pixel image, which, obviously, 

00:26:36.100 --> 00:26:41.233
is not gonna work, you know, 
it may load for some people, 

00:26:41.233 --> 00:26:44.467
but it's gonna be sluggish, it's 
gonna be difficult to deal with, 

00:26:44.467 --> 00:26:46.533
so you should keep,  
hold(?) image overlays to 

00:26:46.533 --> 00:26:49.600
a single viewport, or like 
in the case of this one here, 

00:26:49.600 --> 00:26:52.934
what you could do is you could 
monitor the zooming and what, 

00:26:52.934 --> 00:26:57.700
on zoom in, refresh, re, 
re-change the bounds of the map 

00:26:57.700 --> 00:27:01.567
or of the image overlay to 
the map viewport, 

00:27:01.567 --> 00:27:02.967
and re-fetch a new image. 

00:27:02.967 --> 00:27:06.600
So you could do it that way, 
but, and as you pan on drag-end, 

00:27:06.600 --> 00:27:09.467
you know, fetch a new image to 
replace the existing one, 

00:27:09.467 --> 00:27:12.100
but that's sort of a poor-man's 
tiling routine, 

00:27:12.100 --> 00:27:13.867
I suppose you could say. 

00:27:13.867 --> 00:27:16.133
But I would say that for, 
for these whole image overlays, 

00:27:16.133 --> 00:27:18.834
you keep it to a single viewport, 
not more than a couple 

00:27:18.834 --> 00:27:23.500
of zoom levels, and it works 
well for proj, or program 

00:27:23.500 --> 00:27:27.033
generated images like this one 
with the counties. 

00:27:27.033 --> 00:27:30.734
And if you need more than that, 
the best thing to do 

00:27:30.734 --> 00:27:33.633
is to go to a tile system. 

00:27:33.633 --> 00:27:36.333
Okay, alright, 
now for tile overlays…

00:27:36.333 --> 00:27:40.934
anymore questions on that? 

00:27:40.934 --> 00:27:47.033
Okay, tile overlays are another 
type of image overlay. 

00:27:47.033 --> 00:27:50.166
They're incredibly efficient, 
as you've seen with 

00:27:50.166 --> 00:27:52.700
the Google Maps, I mean, 
the way this system works 

00:27:52.700 --> 00:27:54.333
is incredibly efficient. 

00:27:54.333 --> 00:27:59.934
It runs easily on, on, 
all of the browsers, very robust, 

00:27:59.934 --> 00:28:03.533
they take up very little memory 
in terms of the JavaScript 

00:28:03.533 --> 00:28:05.467
that's taken to 
make these things work, 

00:28:05.467 --> 00:28:10.500
it's virtually free 
to use image overlays. 

00:28:10.500 --> 00:28:13.667
They're flexible, the downside 
is that they're complex 

00:28:13.667 --> 00:28:18.600
to create and understand 
how they work. 

00:28:18.600 --> 00:28:20.900
Now, the first thing you have to 
understand is how the 

00:28:20.900 --> 00:28:23.300
tile system works. 

00:28:23.300 --> 00:28:25.133
The images are all two hundred 
and fifty six by 

00:28:25.133 --> 00:28:26.667
two hundred and fifty six pixels. 

00:28:26.667 --> 00:28:30.500
You can use other sized images, 
I've seen a couple of examples 

00:28:30.500 --> 00:28:32.533
where somebody tried to use a 
hundred and fifty by 

00:28:32.533 --> 00:28:35.600
a hundred and fifty and they 
ran into all kinds of problems. 

00:28:35.600 --> 00:28:38.467
I would say don't mess with the, 
the overlay size, 

00:28:38.467 --> 00:28:39.867
leave it at two fifty six. 

00:28:39.867 --> 00:28:42.934
As soon as you go outside of 
that, you start running into 

00:28:42.934 --> 00:28:46.500
little issues of the API 
not being able to handle 

00:28:46.500 --> 00:28:48.367
what it should be able to handle. 

00:28:48.367 --> 00:28:50.166
According to the 
API documentation, 

00:28:50.166 --> 00:28:53.100
you should be able to supply it 
with any-size image. 

00:28:53.100 --> 00:28:56.367
But, in reality, 
stick to the standard. 

00:28:56.367 --> 00:29:00.066
That's definitely a warning. 
Don't go outside of that. 

00:29:00.066 --> 00:29:02.033
If you do, you're, 
you're basically running a risk 

00:29:02.033 --> 00:29:05.533
of a malfunctioning map. 

00:29:05.533 --> 00:29:09.900
The image, the tile names are 
based on an X and a Y number, 

00:29:09.900 --> 00:29:13.400
and it's extremely simple 
how it works, yet, 

00:29:13.400 --> 00:29:14.967
it's very powerful. 

00:29:14.967 --> 00:29:17.800
And every time you zoom in what 
happens is you start with 

00:29:17.800 --> 00:29:21.333
the whole earth, is….
let me go down, 

00:29:21.333 --> 00:29:23.967
get ahead of myself…..
you have the zoom systing, 

00:29:23.967 --> 00:29:28.467
system, the numbering scheme, 
and the way the pixels work, 

00:29:28.467 --> 00:29:32.367
here's the zoom level zero for 
the whole earth in 

00:29:32.367 --> 00:29:35.433
two hundred fifty six by 
two hundred fifty six pixels. 

00:29:35.433 --> 00:29:39.567
The upper-left corner is 
zero zero, and the lower-right 

00:29:39.567 --> 00:29:41.467
corner is two fifty five by 
two fifty five, 

00:29:41.467 --> 00:29:42.867
that's the pixel numbers. 

00:29:42.867 --> 00:29:46.333
In order to build your own tiles, 
you have to understand pixels. 

00:29:46.333 --> 00:29:49.233
So, at zoom level zero is 
one tile, 

00:29:49.233 --> 00:29:54.266
which is four to the zero power, 
okay, or one. 

00:29:54.266 --> 00:29:59.033
The number of tiles that it 
contained, or the number of 

00:29:59.033 --> 00:30:03.834
tiles across and down are 
actually two to the zoom power. 

00:30:03.834 --> 00:30:09.266
So here we are, zoom level one, 
we take that one tile, 

00:30:09.266 --> 00:30:12.433
and we cut it into four pieces, 
so here's zoom level one, 

00:30:12.433 --> 00:30:15.834
one, we now have four pieces, 
and this is the whole, this 

00:30:15.834 --> 00:30:19.900
is the entire system is based 
on this chopping it in half. 

00:30:19.900 --> 00:30:20.433
It's brilliant. 

00:30:20.433 --> 00:30:21.333
It really is brilliant. 

00:30:21.333 --> 00:30:23.200
Every time, every time I go 
to play with this I 

00:30:23.200 --> 00:30:27.500
just marvel at the simplicity and 
the brilliance of this system. 

00:30:27.500 --> 00:30:29.600
And using two fifty six, 
the magic number, 

00:30:29.600 --> 00:30:31.967
as the number of pixels really 
is great, too. 

00:30:31.967 --> 00:30:36.033
So you see again, 
upper left tile is zero zero, 

00:30:36.033 --> 00:30:39.934
lower left one one, and 
one zero one one, 

00:30:39.934 --> 00:30:42.400
that's the tile numbering scheme. 

00:30:42.400 --> 00:30:44.934
Pixels is the same, 
up in the upper left had corner, 

00:30:44.934 --> 00:30:48.967
zero zero, lower righthand 
now is five eleven five eleven, 

00:30:48.967 --> 00:30:51.734
because it's two fifty 
six two fifty six, 

00:30:51.734 --> 00:30:54.033
starting with a zero base system. 

00:30:54.033 --> 00:30:57.734
So that's the world as four tiles. 

00:30:57.734 --> 00:30:59.133
Let me go up again. 

00:30:59.133 --> 00:31:01.033
Zoom level two. 

00:31:01.033 --> 00:31:02.767
Now we have sixteen tiles. 

00:31:02.767 --> 00:31:04.767
It's four across, same system. 

00:31:04.767 --> 00:31:08.500
Only ten twenty three in the corner, 
zero up in the top. 

00:31:08.500 --> 00:31:13.433
And now we're three zero and 
zero three and three three, 

00:31:13.433 --> 00:31:15.667
it's, you know, zero-based 
numbering for the, the, 

00:31:15.667 --> 00:31:17.900
the pixel system, 
so this is really. 

00:31:17.900 --> 00:31:19.900
Once you start understanding 
how this is work, 

00:31:19.900 --> 00:31:23.066
how this works, you can, 
can really leverage this 

00:31:23.066 --> 00:31:24.066
to your own use. 

00:31:24.066 --> 00:31:26.500
Now, of course, 
you can use this for anything, 

00:31:26.500 --> 00:31:28.233
it doesn't have to be maps. 

00:31:28.233 --> 00:31:32.367
Here it is as, as a table. 

00:31:32.367 --> 00:31:35.734
And you can see, once you start 
building up in zoom levels, 

00:31:35.734 --> 00:31:38.166
like you look down at zoom 
level seventeen, 

00:31:38.166 --> 00:31:40.300
there are an awful lot of 
tiles involved, 

00:31:40.300 --> 00:31:42.467
and there are just a tremendous 
amount of pixles. 

00:31:42.467 --> 00:31:45.667
Seventeen million tiles at zoom 
level seventeen. 

00:31:45.667 --> 00:31:47.900
Seventeen million plus, it was 
seventeen point three million, 

00:31:47.900 --> 00:31:49.300
or something like that. 

00:31:49.300 --> 00:31:50.500
That's a lot of tiles. 

00:31:50.500 --> 00:31:52.300
That's why it's 
very difficult to, 

00:31:52.300 --> 00:31:55.033
to deal this data out on 
a world basis, 

00:31:55.033 --> 00:31:57.367
and why you need somebody 
like Google to do it. 

00:31:57.367 --> 00:32:00.266
And in terms of pixels, 
three point three million pixels 

00:32:00.266 --> 00:32:03.600
makes up the world, and at that, 
you can show, you know, 

00:32:03.600 --> 00:32:05.934
individual buildings, 
and now we have 

00:32:05.934 --> 00:32:08.000
eighteen and nineteen we're 
using now, so that 

00:32:08.000 --> 00:32:10.667
even goes beyond that. 

00:32:10.667 --> 00:32:16.500
I have a little demonstration 
that shows how that works. 

00:32:16.500 --> 00:32:19.200
Let me see, 
I put it in the wrong place, 

00:32:19.200 --> 00:32:20.900
but I think it's here. 

00:32:20.900 --> 00:32:23.767
Okay, here we are in zoom 
level zero. 

00:32:23.767 --> 00:32:28.367
Z zero, one, one pixel, you 
notice how the tiles have crossed, 

00:32:28.367 --> 00:32:32.800
this is all…zoom…one tile, right? 

00:32:32.800 --> 00:32:33.633
Yeah, it's wrapping. 

00:32:33.633 --> 00:32:35.800
The wrapping world. 

00:32:35.800 --> 00:32:39.200
Not hip-hop, but 
the wrapping world. 

00:32:39.200 --> 00:32:44.300
Okay, than we go up one level, 
and here we have pix, zoom one, 

00:32:44.300 --> 00:32:47.600
and now we're one one, or,
here we are….

00:32:47.600 --> 00:32:50.200
go back ____.....oops, 

00:32:50.200 --> 00:32:56.433
I zoomed in by accident, here, 
cause I double-cliked on it…

00:32:56.433 --> 00:32:58.834
Here we have zero zero again, 
and one one, 

00:32:58.834 --> 00:33:01.066
so this is the 
world as four. 

00:33:01.066 --> 00:33:04.400
And all these calculations are 
done with this Perl module, 

00:33:04.400 --> 00:33:06.033
so the tile module 
that I created, 

00:33:06.033 --> 00:33:10.533
USNaviguide underscore Google 
underscore tiles dot P M, 

00:33:10.533 --> 00:33:12.533
that you can take and copy and 
translate into any 

00:33:12.533 --> 00:33:13.967
language that you want. 

00:33:13.967 --> 00:33:16.300
But all these calculations are 
critical if you want 

00:33:16.300 --> 00:33:17.533
to be able to create 
your own tiles, 

00:33:17.533 --> 00:33:20.767
you have to use these 
calculations that do it. 

00:33:20.767 --> 00:33:23.667
They're really not complicated, 
and if you create some sort of 

00:33:23.667 --> 00:33:26.900
class or something that creates 
these, these numbers for you, 

00:33:26.900 --> 00:33:30.367
you can leverage them 
fairly easily. 

00:33:30.367 --> 00:33:33.600
And, so then we go down another…

00:33:33.600 --> 00:33:35.200
This is kind of, I mean, 
this is kind of

00:33:35.200 --> 00:33:37.333
pathetically boring, 
but you can see, 

00:33:37.333 --> 00:33:40.400
see the idea here, you know, 
and as you go down…

00:33:40.400 --> 00:33:44.400
see if we go down really 
far here, you know, 

00:33:44.400 --> 00:33:47.633
here's zoom level ten, 
that's tile four twenty 

00:33:47.633 --> 00:33:51.467
by four forty, and this lat, 
latitude and longitude on 

00:33:51.467 --> 00:33:53.800
the Northwest corner and 
the Southeast corner 

00:33:53.800 --> 00:33:55.266
and the different pixels. 

00:33:55.266 --> 00:33:57.667
So if…anyone have a 
question on this? 

00:33:57.667 --> 00:34:00.567
It's kind of just a boring 
depiction of what's 

00:34:00.567 --> 00:34:04.000
actually going on, but this is 
important information, yes…

00:34:04.000 --> 00:34:07.967
Could you go back to the slide 
with all the numbers where you 

00:34:07.967 --> 00:34:10.734
had seventeen million tiles 
but only 

00:34:10.734 --> 00:34:12.734
three point three million pixels? 

00:34:12.734 --> 00:34:14.200
Oh, that probably not, 
not right, you know, 

00:34:14.200 --> 00:34:17.734
I had three people review this, 
and nobody caught that, 

00:34:17.734 --> 00:34:22.066
but I think you are 
absolutely right. 

00:34:22.066 --> 00:34:25.333
Yeah, your pixel numbers don't 
quite grow enough in the 

00:34:25.333 --> 00:34:26.533
pattern they should.

00:34:26.533 --> 00:34:30.033
Yes, exactly, I've got, I've, 
I have a problem there, 

00:34:30.033 --> 00:34:32.233
you're right. 

00:34:32.233 --> 00:34:33.233
Yup. 

00:34:33.233 --> 00:34:34.633
So, Good catch. 

00:34:34.633 --> 00:34:37.333
Yeah, Okay, so you caught 
me on that. 

00:34:37.333 --> 00:34:39.767
You know, I had this peer 
reviewed by, by three 

00:34:39.767 --> 00:34:41.500
different people and nobody 
caught it. 

00:34:41.500 --> 00:34:44.266
So, all three should have been 
able to but I guess they just 

00:34:44.266 --> 00:34:46.834
were so dazzled by my wonderful 
presentation that they didn't 

00:34:46.834 --> 00:34:49.567
bother to check the 
technical details. 

00:34:49.567 --> 00:34:51.567
But no, it's bound to be, 
there's bound to be an error 

00:34:51.567 --> 00:34:53.867
and I was looking for the flaw 
in the Indian rug, 

00:34:53.867 --> 00:34:54.433
and there it is. 

00:34:54.433 --> 00:34:56.000
Hopefully that's the only one. 

00:34:56.000 --> 00:35:01.767
Okay, let's see….we were here…
okay here we go…alright, 

00:35:01.767 --> 00:35:06.066
so with tile overlays, you have 
three types of tile overlays, 

00:35:06.066 --> 00:35:07.700
you have one's that are 
cut from images, 

00:35:07.700 --> 00:35:11.300
so you have an existing image, 
you have those that are static, 

00:35:11.300 --> 00:35:13.767
from data, in other words, 
that they're created once, 

00:35:13.767 --> 00:35:16.400
or they're created on a schedule 
and then you have one's that are 

00:35:16.400 --> 00:35:19.900
created on the fly or dynamically. 

00:35:19.900 --> 00:35:23.400
Tiles cut from images are 
probably the most common-type. 

00:35:23.400 --> 00:35:27.266
Others like, for instance, 
maps, or obsolete paper maps 

00:35:27.266 --> 00:35:32.166
that people have scanned in, 
panoramic pictures are a really 

00:35:32.166 --> 00:35:36.633
good example, aerial photos, 
such things like that, 

00:35:36.633 --> 00:35:38.400
circuit boards, even, 
circuit boards,
 

00:35:38.400 --> 00:35:39.500
and other kind of strange things. 

00:35:39.500 --> 00:35:42.734
I've seen documents and books 
that people have put into, 

00:35:42.734 --> 00:35:46.100
into, into data, or into tiles 
and, and created maps out 

00:35:46.100 --> 00:35:48.200
of them, so, you know, 
you gotta think, 

00:35:48.200 --> 00:35:52.400
“What can you use this, 
this user interface for?” 

00:35:52.400 --> 00:35:56.066
And essentially what you can use 
it for is whatever you can think 

00:35:56.066 --> 00:35:57.033
you can use it for. 

00:35:57.033 --> 00:36:00.700
It's amazing the varied things 
that you can do with this. 

00:36:00.700 --> 00:36:04.133
And, it's not just for maps, 
you know, any kind of depiction 

00:36:04.133 --> 00:36:07.433
of a three dimensional thing or
a two dimensional surface 

00:36:07.433 --> 00:36:11.333
can be done with, 
with this API using tiles. 

00:36:11.333 --> 00:36:14.033
And it's it's fairly easy 
to do so. 

00:36:14.033 --> 00:36:17.233
There's a lot of different 
resources out there to create 

00:36:17.233 --> 00:36:20.500
these tiles from images. 

00:36:20.500 --> 00:36:24.166
You have the map 
cruncher from Microsoft. 

00:36:24.166 --> 00:36:27.100
It has some limitations, 
but it's really very cool. 

00:36:27.100 --> 00:36:30.166
It has an interface that you can, 
you, you indicate points of 

00:36:30.166 --> 00:36:32.233
interest common with the map. 

00:36:32.233 --> 00:36:35.834
And it figures out your map 
from your, your page from 

00:36:35.834 --> 00:36:38.700
their your, your image, 
it overlays it in the right spot, 

00:36:38.700 --> 00:36:42.066
you say, “I think it's three 
or four points,” you target 

00:36:42.066 --> 00:36:45.333
on the map, like, could be a, 
a city or a mountain peak or 

00:36:45.333 --> 00:36:48.233
something like that, 
and then it automatically 

00:36:48.233 --> 00:36:51.066
stretches the map to the, 
or the image the right shape 

00:36:51.066 --> 00:36:52.700
and cuts it into tiles. 

00:36:52.700 --> 00:36:53.967
There's some limitations on that.
 

00:36:53.967 --> 00:36:55.467
It can't be used for commercial
 purposes, 

00:36:55.467 --> 00:36:58.233
I believe there's a way, 
there must be, it's Microsoft, 

00:36:58.233 --> 00:37:01.100
to pay for this, license it for 
commercial purposes, 

00:37:01.100 --> 00:37:04.867
but the Beta that they have on 
their website on the, 

00:37:04.867 --> 00:37:09.266
what is that, the virtual earth 
website, is, 

00:37:09.266 --> 00:37:11.400
is for non-commercial use. 

00:37:11.400 --> 00:37:13.600
But it's very cool, 
only runs under windows, 

00:37:13.600 --> 00:37:15.734
so that's kind of a drag, 
but other than that, 

00:37:15.734 --> 00:37:17.600
it's very cool, very usable. 

00:37:17.600 --> 00:37:21.300
There's the automatic tile-cutter 
script from Photoshop, 

00:37:21.300 --> 00:37:23.400
that's in the MapKey, 

00:37:23.400 --> 00:37:27.000
I've looked at it, I was 
gonna demonstrate it here today, 

00:37:27.000 --> 00:37:33.567
but I just got CS3, 
I upgraded to ten point five, 

00:37:33.567 --> 00:37:36.667
and my old photoshop didn't work, 
so I had to upgrade to CS3, 

00:37:36.667 --> 00:37:38.400
and I didn't get that 
till Thursday, 

00:37:38.400 --> 00:37:41.934
so I don't have a demonstration 
of that, but it does work, 

00:37:41.934 --> 00:37:44.633
the problem, that the automatic 
tile-cutter, the way it's 

00:37:44.633 --> 00:37:48.433
written right now is that it 
uses the old numbering system 

00:37:48.433 --> 00:37:51.567
of zooms where seventeen 
is the high, you know, 

00:37:51.567 --> 00:37:55.100
is the one earth and zero is the 
zoom seventeen, 

00:37:55.100 --> 00:37:58.967
now I'm sure just with a couple 
of quick changes in that, 

00:37:58.967 --> 00:38:02.600
it'll be up to snuff, 
but that's an easy way to take an 

00:38:02.600 --> 00:38:05.500
image and cut it up into tiles, 
there's one that you can 

00:38:05.500 --> 00:38:07.433
download from Crazed Monkey 
dot com, 

00:38:07.433 --> 00:38:11.767
which is a unix command line, 
using Image Magic, 

00:38:11.767 --> 00:38:14.266
that's a pretty cool one, too, 
but it has no alignment tool, 

00:38:14.266 --> 00:38:16.700
you have to know, 
where your images lie, 

00:38:16.700 --> 00:38:18.467
but if you know where 
your images lie, this, 

00:38:18.467 --> 00:38:21.367
this resources is really good 
because it chops them up  

00:38:21.367 --> 00:38:24.600
really quick and easy, and it 
works well, I actually tried it, 

00:38:24.600 --> 00:38:26.567
and it, I was impressed with it. 

00:38:26.567 --> 00:38:28.633
And then there's another option, 
which is the Perl one that 

00:38:28.633 --> 00:38:33.000
I include with this demonstration, 
which you also have to know the 

00:38:33.000 --> 00:38:36.333
bounds of, but it's, 
it's based on Perl and GD, 

00:38:36.333 --> 00:38:38.700
takes an image and chops it 
up into little chunks, 

00:38:38.700 --> 00:38:40.600
it works really well. 

00:38:40.600 --> 00:38:41.867
At least I think it works well.

00:38:41.867 --> 00:38:45.567
What do you need to know if 
you have an image, but the 

00:38:45.567 --> 00:38:49.767
image is already like a 
geotiff(?) Do you have to 

00:38:49.767 --> 00:38:52.967
tell it more is there enough 
in the geotiff file…?

00:38:52.967 --> 00:38:56.100
Well, that, that metadata is
in the image, but I don't 

00:38:56.100 --> 00:39:01.533
know, in the case of either 
the unix tool or the photshop 

00:39:01.533 --> 00:39:04.166
tool, I don't believe it can
read that, that metadata.

00:39:04.166 --> 00:39:05.867
You'd have to pull it out and 
say…

00:39:05.867 --> 00:39:06.999
You have to tell it what ____.

00:39:06.999 --> 00:39:09.767
Right. However, using, like, 
for instance, this Perl 

00:39:09.767 --> 00:39:14.367
tile-cutter that I wrote. If 
you could bring it in with the, 

00:39:14.367 --> 00:39:17.467
you know, with a tiff reader, 
you know module, and pull the 

00:39:17.467 --> 00:39:19.834
metadata out, you would, you 
wouldn't need to tell it 

00:39:19.834 --> 00:39:22.166
anything, you could do it all 
programmatically. And that 

00:39:22.166 --> 00:39:24.633
would be the ideal, you 
wouldn't want to have to do 

00:39:24.633 --> 00:39:27.500
anything manual, because 
you're gonna make a mistake, 

00:39:27.500 --> 00:39:29.934
and it's gonna get screwed 
up, you know, that's just human 

00:39:29.934 --> 00:39:31.867
nature, if you can do it 
automatic, that's the

00:39:31.867 --> 00:39:34.433
way to do it, but definetly if 
you've got a georeference tiff 

00:39:34.433 --> 00:39:38.233
in the image, and you have a 
tiff-reader, which I'm sure

00:39:38.233 --> 00:39:41.867
there's a module out there in 
Perl that does that, you could
 

00:39:41.867 --> 00:39:43.133
do that automatic, but you need 

00:39:43.133 --> 00:39:46.667
to know the corners in the, in 
the projected or unprojected 

00:39:46.667 --> 00:39:48.600
image, you need to know the 
corners where it's gonna sit 

00:39:48.600 --> 00:39:52.166
on the map in order to 
successfully chop it up. But 

00:39:52.166 --> 00:39:55.033
if you know that, that's, 
you know, you need to know two 

00:39:55.033 --> 00:39:57.333
things, three things, you 
need to know the corners, 

00:39:57.333 --> 00:39:59.667
upper-left and lower-right, 
essentially, well, which is 

00:39:59.667 --> 00:40:01.834
all the corners, you need to 
know the zoom level you want 

00:40:01.834 --> 00:40:04.433
to do it with, but….

00:40:04.433 --> 00:40:08.567
You said it won't do all the 
zoom levels….?

00:40:08.567 --> 00:40:12.567
Well, you have, you have some 
issues, as far as zoom levels, 

00:40:12.567 --> 00:40:14.700
you have some issues with 
images and multiple zoom 

00:40:14.700 --> 00:40:17.333
levels that are the same thing 
with, as with ground projected 

00:40:17.333 --> 00:40:20.333
images. Here's an example of 
an image, this is a source 

00:40:20.333 --> 00:40:23.467
image that's an actual at zoom 
seven, which, for the United

00:40:23.467 --> 00:40:27.233
States, is about five thousand 
by three thousand pixels. 

00:40:27.233 --> 00:40:31.700
And, when you cut it up into 
tiles, you'll see the, the 

00:40:31.700 --> 00:40:35.934
effect, you start on the far 
left at zoom five, the borders 

00:40:35.934 --> 00:40:39.600
get, you know, pixilated and 
they kind of dissapear, at 

00:40:39.600 --> 00:40:42.133
zoom level seven, it looks 
right, but down at zoom 

00:40:42.133 --> 00:40:44.800
level nine, it's, you know, 
kind of distorted and 

00:40:44.800 --> 00:40:46.800
pixilated because you're 
taking one single 

00:40:46.800 --> 00:40:49.000
image and you're stretching it. 

00:40:49.000 --> 00:40:52.100
You know, you can't create 
data out of nothing, so unless

00:40:52.100 --> 00:40:55.667
it's a vector graphic, you 
know, you have no way of, of
 

00:40:55.667 --> 00:40:58.567
stretching it. So that's the 
limitation of tiles 

00:40:58.567 --> 00:41:01.100
cut from images, you really 
can't exceed a certain number 

00:41:01.100 --> 00:41:04.700
of zoom levels of either side. 
It's generally two, as you can 

00:41:04.700 --> 00:41:07.667
see, if you go down one 
level and up one level, 

00:41:07.667 --> 00:41:10.233
and then you have the, the one 
that it's natural at, you have 

00:41:10.233 --> 00:41:13.700
a pretty good depiction. But 
anymore than that and you 

00:41:13.700 --> 00:41:16.734
start lousing it up, you know, 
it starts to look crappy and, 

00:41:16.734 --> 00:41:21.700
you know, what you generally 
do if you're gonna do that is

00:41:21.700 --> 00:41:24.700
you just would use another 
image after you go down one 

00:41:24.700 --> 00:41:26.834
zoom level, you would have 
another image that's less 

00:41:26.834 --> 00:41:33.400
detail or more detail, and cut 
that one. So here's a 

00:41:33.400 --> 00:41:39.533
demonstration of…any other 
questions before I go to this? 

00:41:39.533 --> 00:41:50.300
Okay. Here's a demonstration of
 a…____to the next one…This

00:41:50.300 --> 00:41:54.066
is the tile-level, tire, tile-
layer cut from an image, and 

00:41:54.066 --> 00:41:59.066
this is zoom level seven. Again, 
we have the opacity options. 

00:41:59.066 --> 00:42:02.333
It looks a little different with 
tile-layers, than it does with a 

00:42:02.333 --> 00:42:06.333
whole image overlay, with a 
tile-image, with a tile-layer, 

00:42:06.333 --> 00:42:09.700
if you change the opacity, you 
have to delete the old layer and 

00:42:09.700 --> 00:42:13.767
add a fresh one in. Which is a 
little bit more cumbersome, but it 

00:42:13.767 --> 00:42:20.300
actually works pretty well. Marcel 
Lomontaigne(?) wrote a cool slider 

00:42:20.300 --> 00:42:23.934
one for his county overlayout, I 
don't know if anyone's ever seen 

00:42:23.934 --> 00:42:27.233
that, he brought a really nice 
county-based tile overlay that 

00:42:27.233 --> 00:42:31.367
has a slider opacity system. It's 
a little complicated for a 

00:42:31.367 --> 00:42:34.700
demonstration like this, but what 
you can do with it is virtually 

00:42:34.700 --> 00:42:37.967
unlimited. Again, it's left to 
the imagination, but here's at 

00:42:37.967 --> 00:42:41.300
zoom level…this is overlaid 
with the standard hybrid level 

00:42:41.300 --> 00:42:48.867
layer that, that's used on the 
satellite maps. So as you zoom 

00:42:48.867 --> 00:42:51.033
in a little further, you notice 
the lines get kind of jaggedy,

00:42:51.033 --> 00:42:55.767
and, but you still have, you 
have great map movement, that's 

00:42:55.767 --> 00:42:59.066
one thing that's wonderful 
about these tile systems. And, 

00:42:59.066 --> 00:43:02.033
and this is all being done on 
this little laptop here, these 

00:43:02.033 --> 00:43:05.233
tiles were generated and are 
being served right here locally, 

00:43:05.233 --> 00:43:08.900
as local hosts, notice it's a 
local host job, so this is all 

00:43:08.900 --> 00:43:12.834
being done with this little 
teeny laptop, and, but it's 

00:43:12.834 --> 00:43:17.700
very snappy, it's extremely 
efficient, and I created this, 

00:43:17.700 --> 00:43:21.433
there's level nine, this is zoom 
nine, and you notice now the 

00:43:21.433 --> 00:43:26.567
boundaries are all real thick. 
And if we go back down to whole 

00:43:26.567 --> 00:43:29.633
country view….there we go….

00:43:29.633 --> 00:43:33.400
Now we lose our boundaries, 
they're no longer black. So you 

00:43:33.400 --> 00:43:36.367
suffer from the problem of, of
pixilation, just like you would 

00:43:36.367 --> 00:43:39.500
on an, a whole image overlay when 
you, when you take an existing 

00:43:39.500 --> 00:43:43.533
image and cut it up into tiles, 
but it, it, it's the next level. 

00:43:43.533 --> 00:43:45.300
If you've got a lot… go ahead. 

00:43:45.300 --> 00:43:48.967
So , to make it nice, you just 
basically have to have an image 

00:43:48.967 --> 00:43:51.567
for every single zoom level, 
and cut it up. 

00:43:51.567 --> 00:43:54.767
Yes, to make it nice, you 
really should have, at a 

00:43:54.767 --> 00:43:59.433
minimum, one image per every 
three  . That pretty 

00:43:59.433 --> 00:44:04.200
much is, is one for every other 
works even better, but if 

00:44:04.200 --> 00:44:07.800
you've got one level, one image 
for every level, that's 

00:44:07.800 --> 00:44:10.233
perfection, you know, you can 
do a really good job. 

00:44:10.233 --> 00:44:11.900
That's what Google does, 
I mean essentially.

00:44:11.900 --> 00:44:14.100
I'm, I'm sure that's what 
Google does. Now I, actually, 

00:44:14.100 --> 00:44:17.567
I have a demonstration of, of 
that, as well. These are, these 

00:44:17.567 --> 00:44:21.000
are all tiles cut from static 
images, so, you have an image, 

00:44:21.000 --> 00:44:24.600
doesn't change. Cut it up into 
chunks. Divide those chunks into 

00:44:24.600 --> 00:44:28.700
more chunks and you end up with 
tile layers that go in, in this 

00:44:28.700 --> 00:44:35.800
case, five layer, levels of zoom 
for one image. Okay…that's, 

00:44:35.800 --> 00:44:38.834
that's it for that one, any 
questions on that.

00:44:38.834 --> 00:44:40.000
I have a question.

00:44:40.000 --> 00:44:40.266
Yes?

00:44:40.266 --> 00:44:44.033
So I understand that the 
overlay is generated like with your Earth (?) 

00:44:44.033 --> 00:44:48.433
so the map that, you're matching 
that up with a map from Google, 

00:44:48.433 --> 00:44:49.500
and(?) the(?) Google API?

00:44:49.500 --> 00:44:50.033
Correct. 

00:44:50.033 --> 00:44:50.600
Okay

00:44:50.600 --> 00:44:54.200
Yes, what the, what the map 
is showing, is it's showing a, 

00:44:54.200 --> 00:45:01.367
a overlay, actually an underlay 
of a county tile layer, but 

00:45:01.367 --> 00:45:04.433
overlayed on top of that is the 
hybrid level, level, hybrid 

00:45:04.433 --> 00:45:07.967
layer I guess they call it,
from the satellite maps, if 

00:45:07.967 --> 00:45:10.066
you notice on the satellite maps, 
it' they would show the roads 

00:45:10.066 --> 00:45:13.166
and major roads in the cities, 
that's a transparent layer with 

00:45:13.166 --> 00:45:17.266
yellow written on top. You just 
overlay, you can overlay that 

00:45:17.266 --> 00:45:20.633
on top anything, it's, it's 
great data because it gives 

00:45:20.633 --> 00:45:23.433
you the, the basics to, 
to geographically…

00:45:23.433 --> 00:45:24.166
It has three(?) layers.

00:45:24.166 --> 00:45:28.100
Yeah. And you can see major 
roads, you can see cities, 

00:45:28.100 --> 00:45:31.000
things like that, it doesn't 
give you the road detail that, 

00:45:31.000 --> 00:45:34.834
that the, the maps do, and it's 
not as pretty, but if you're 

00:45:34.834 --> 00:45:38.500
trying to depict something like, 
for instance, Huffington Post 

00:45:38.500 --> 00:45:45.400
had a great map for donors that 
showed splotches of red and blue 

00:45:45.400 --> 00:45:49.533
for, and, and some other colors 
depending on, you know, red for 

00:45:49.533 --> 00:45:53.700
Republican, obviously, and blue 
for Dem, Democrat donations from 

00:45:53.700 --> 00:45:56.600
various places and it was, it 
was a nice depiction, it was a 

00:45:56.600 --> 00:46:00.467
little messy, but it was a nice 
depiction of, of, of using a 

00:46:00.467 --> 00:46:04.467
custom tile layer with an 
overlay of, of the hybrid level 

00:46:04.467 --> 00:46:07.700
so that you can, hybrid layer, 
so that you can see geographically, 

00:46:07.700 --> 00:46:10.000
“Okay, well is this New York?” 
and then you could zoom in and 

00:46:10.000 --> 00:46:12.667
say, “Okay, well, this is, you 
know, this is the, you know, 

00:46:12.667 --> 00:46:15.734
where I live, and this is 
Chesley, or whatever, and, you 

00:46:15.734 --> 00:46:18.567
know, Manhattan in general, and 
out in, you know, this is a 

00:46:18.567 --> 00:46:20.934
general area,” and you keep 
zooming out, it would show a 

00:46:20.934 --> 00:46:23.533
better, a broader and broader 
area. Plus, it had some other 

00:46:23.533 --> 00:46:26.500
interesting things with the way 
they handled the data. But that 

00:46:26.500 --> 00:46:30.266
was  a really good example of a 
data layer created, actually, 

00:46:30.266 --> 00:46:33.867
that was a data image layer 
created from data with an 

00:46:33.867 --> 00:46:37.133
overlay of a hybrid. So that 
wasn't done from an image map, 

00:46:37.133 --> 00:46:43.433
the, the one at Huffington Post, 
but it was a, a nice depiction. 

00:46:43.433 --> 00:46:45.567
Any other questions? 

00:46:45.567 --> 00:46:51.867
Okay. Alright, so in, in 
conclusion, image overlays or 

00:46:51.867 --> 00:46:54.467
tiles cut from an image have, 
have, suffer from some 

00:46:54.467 --> 00:46:58.066
limitations of pixilation, much 
like whole image overlays, but 

00:46:58.066 --> 00:47:02.467
they're really great for large 
areas. They can be used for 

00:47:02.467 --> 00:47:05.767
many different purposes, from 
anything from aerial photos and 

00:47:05.767 --> 00:47:11.533
panoramic maps to circuit boards, 
and house-plans for instance is 

00:47:11.533 --> 00:47:15.100
a, is another fun one. I remember 
seeing one where somebody did a 

00:47:15.100 --> 00:47:18.934
university, and they had 
individual, you, where you could 

00:47:18.934 --> 00:47:22.800
zoom into the buildings and see 
the layouts of the buildings and 

00:47:22.800 --> 00:47:26.600
the classrooms. And they wanted 
to, I remember the Post was, they 

00:47:26.600 --> 00:47:30.000
wanted to track people inside of 
the buildings, and I, I thought, 

00:47:30.000 --> 00:47:32.066
I thought that was an interesting 
idea, but it seemed a little bit 

00:47:32.066 --> 00:47:39.266
Orwellian, perhaps. Okay, the next 
thing is static data tiles. Now 

00:47:39.266 --> 00:47:43.133
what a static data tile is, it's 
a, it's a tile leayer created not

00:47:43.133 --> 00:47:46.734
from an image but from data, much 
like the, the projected overlay 

00:47:46.734 --> 00:47:50.633
example where I showed the, the, 
you know, the counties that were 

00:47:50.633 --> 00:47:54.600
created inside of a bounding box, 
you can actually create entire 

00:47:54.600 --> 00:47:58.066
tile overlays directly from the 
data, skipping the image step. 

00:47:58.066 --> 00:48:02.266
So if you skip the image step, 
the, the advantages really are 

00:48:02.266 --> 00:48:06.100
huge, because you can put more 
or less on the map depending on 

00:48:06.100 --> 00:48:09.166
the zoom level, much like what 
Google does with the maps, you 

00:48:09.166 --> 00:48:13.633
can, on a high zoom level, you 
show, you know, just the 

00:48:13.633 --> 00:48:17.900
population areas over a million, 
and when you start zooming in, 

00:48:17.900 --> 00:48:20.333
you can say, “Okay, now I'm 
gonna put labels on the map at 

00:48:20.333 --> 00:48:24.000
this level. The next zoom level 
I'm gonna show minor cities. 

00:48:24.000 --> 00:48:28.433
The next zoom level in, I'm gonna 
show, you know, census blocks, 

00:48:28.433 --> 00:48:31.066
or tracks,” so you have, you have
a choice you can make inside the 

00:48:31.066 --> 00:48:33.967
program as to what to display.
That gives you a huge amount of 

00:48:33.967 --> 00:48:37.700
power. Plus, the real advantage 
is you can create perfect tiles, 

00:48:37.700 --> 00:48:42.367
because you're creating them for 
the zoom at that, you know, at 

00:48:42.367 --> 00:48:44.633
the cre, at the time of creation, 
you're assigning what's being put 

00:48:44.633 --> 00:48:47.967
on there, you're deciding, “I want
a one pixel or a two pixel boundary.

00:48:47.967 --> 00:48:52.266
I'm deciding that, you know, I'm 
gonna put a label where I can fit

00:48:52.266 --> 00:48:57.834
it, ” etcetera, things like that. 
Here's an example of tiles in the 

00:48:57.834 --> 00:49:02.300
same county system, and you notice 
how much prettier they are, I put 

00:49:02.300 --> 00:49:05.400
the tile numbers up in the corner 
just for reference, they don't, 

00:49:05.400 --> 00:49:08.767
obviously, don't have to be there. 
But, you know, as you zoom in, 

00:49:08.767 --> 00:49:11.100
you know, Marin county looks a 
lot better when it actually 

00:49:11.100 --> 00:49:15.066
traces out the bay, and when you 
can put the name of the county in 

00:49:15.066 --> 00:49:18.166
there, you know, and that's
depending on the zoom level. At 

00:49:18.166 --> 00:49:21.266
zoom level seven, Marin county's 
too small. If you were to put a 

00:49:21.266 --> 00:49:25.100
ti, a, a title in there, it 
would look all mushy, you know, 

00:49:25.100 --> 00:49:27.800
it couldn't be readable. So 
rather than put it, a, an 

00:49:27.800 --> 00:49:31.200
unreadable title, you just leave 
it out. But you can decide 

00:49:31.200 --> 00:49:35.066
these things at the moment that 
you're producing the tile, and, 

00:49:35.066 --> 00:49:38.400
again, all these, the programs 
that generate these tiles are, 

00:49:38.400 --> 00:49:41.500
are in the downloads, so you 
know, from this example, you 

00:49:41.500 --> 00:49:44.300
should be able to create your 
own tile layer of counties 

00:49:44.300 --> 00:49:53.500
doing this exact same thing. 
Any questions on that? Okay. 

00:49:53.500 --> 00:50:03.266
So here's a demonstration. Now,
we go to the same type of map, 

00:50:03.266 --> 00:50:04.900
and here we have the same area. 

00:50:04.900 --> 00:50:07.767
These are now, it looks pretty 
much the same as the, the image 

00:50:07.767 --> 00:50:13.066
generated system, but this zoom 
level seven, the natural zoom for 

00:50:13.066 --> 00:50:17.367
that other one, but as soon as we 
start zooming in, you see, now it

00:50:17.367 --> 00:50:20.033
can put labels on the map, and 
it still looks nice and clean. 

00:50:20.033 --> 00:50:26.700
You zoom in even further, and, 
you know, everything looks nice 

00:50:26.700 --> 00:50:30.266
and pretty. And what's really 
cool about this is, it's the 

00:50:30.266 --> 00:50:34.900
area that you can cover. I have 
a, in this example, in this 

00:50:34.900 --> 00:50:38.500
demonstration, I have every tile 
needed to cover the United States 

00:50:38.500 --> 00:50:43.133
from zoom level five to nine. 
That's, you know, thousands of 

00:50:43.133 --> 00:50:46.600
tiles, and they were fairly 
easy to generate using the, the 

00:50:46.600 --> 00:50:51.734
census data. But when they're 
served up, you only serve up the 

00:50:51.734 --> 00:50:53.000
ones that you need. So like, as 

00:50:53.000 --> 00:50:57.467
I'm panning across the United 
States, here across the Bay Area, 

00:50:57.467 --> 00:51:00.734
actually. I'm pulling in more 
tiles from this side and 

00:51:00.734 --> 00:51:04.233
scrolling them off the other, so, 
you know, this wonderful tiling 

00:51:04.233 --> 00:51:06.567
system I'm sure everybody's 
familiar with, but I just can't 

00:51:06.567 --> 00:51:10.367
get over it, I, I  just love this, 
the way you move this thing around, 

00:51:10.367 --> 00:51:15.500
the first time  saw a Google Map, 
I almost fell out of my chair, and 

00:51:15.500 --> 00:51:18.600
I said, “Man, that's for me. I 
want to deal with that.” And then…

00:51:18.600 --> 00:51:19.667
That's everybody's experience.

00:51:19.667 --> 00:51:22.467
Right, and then we, what was it, 
housing maps?

00:51:22.467 --> 00:51:22.867
Yeah.

00:51:22.867 --> 00:51:26.433
Housing maps was the one who 
did the first hack, and I looked 

00:51:26.433 --> 00:51:29.166
at his code, and I thought, “Oh, 
this is so ugly, I can't do that, 

00:51:29.166 --> 00:51:32.266
I don't want to get into this.” 
And so I just bided my time, and 

00:51:32.266 --> 00:51:35.433
then the API came out in June, 
the end of June of two thousand 

00:51:35.433 --> 00:51:38.633
and five, and I, I was right on 
it. So I, I thought this was the 

00:51:38.633 --> 00:51:41.100
way to go, and I actually 
created the business around this. 

00:51:41.100 --> 00:51:43.767
I started this out as a hobby, 
and now this is all I do, full 

00:51:43.767 --> 00:51:47.734
time is, is creating, you know, 
custom maps and polygons for 

00:51:47.734 --> 00:51:51.467
customers, you know, I don't 
really have a job, you know, 

00:51:51.467 --> 00:51:55.667
I don't actually go to work, so
 it's, it's really great, it's a 

00:51:55.667 --> 00:51:58.433
great system. But anyway, you can 
see how this, this works when, as 

00:51:58.433 --> 00:52:03.100
you zoom it in and zoom it out. 
That's the real, the real 

00:52:03.100 --> 00:52:07.500
advantage of creating these things 
out of data directly. And I'll go 

00:52:07.500 --> 00:52:10.934
all the way out to the United 
States, and you can see at zoom 

00:52:10.934 --> 00:52:15.700
level five, it's, it's a lot 
prettier. Let me pan across…a 

00:52:15.700 --> 00:52:19.467
lot of counties in the world, 
or in the United States, rather

00:52:19.467 --> 00:52:22.066
…world, we think of the United 
States as the world, sometimes….

00:52:22.066 --> 00:52:27.166
And of course you have opacity, 
with this, as well. Pretty much 

00:52:27.166 --> 00:52:32.900
the same thing, so….it's pretty 
cool. Any questions on that? 

00:52:32.900 --> 00:52:36.200
And again, this code is 
downloadable. So if you want to 

00:52:36.200 --> 00:52:39.500
create your own, what, what I 
recommend doing is that you 

00:52:39.500 --> 00:52:44.433
download this code, you, you 
load it on a linux server, and

00:52:44.433 --> 00:52:47.767
run it exactly as it is, you 
know, configure everything the 

00:52:47.767 --> 00:52:51.066
way, configure it the way I have 
it and play with it, and add 

00:52:51.066 --> 00:52:55.033
options to it, make changes to it. 
You may have to play with Perl, 

00:52:55.033 --> 00:52:57.667
and even if you're not familiar 
with Perl, it shouldn't be that 

00:52:57.667 --> 00:53:01.166
much of a stretch to make changes
to these programs, because the 

00:53:01.166 --> 00:53:06.066
programs are really quite simple. 
It's just parsing text, you know, 

00:53:06.066 --> 00:53:12.433
creating polygons or creating an 
object and adding points to it. 

00:53:12.433 --> 00:53:15.033
It's, it's no different than 
working with the API, it really

00:53:15.033 --> 00:53:19.233
isn't. And since the, the way 
that GD works is so simple, I 

00:53:19.233 --> 00:53:23.066
think that you'll probably say, 
“My gosh! I can create X out of 

00:53:23.066 --> 00:53:28.033
this!” You know, “My company 
needs a Y, I can do this!” And 

00:53:28.033 --> 00:53:30.600
then you can actually take, 
take what I've done, and 

00:53:30.600 --> 00:53:33.767
translate it into your favorite 
language. And I don't know if 

00:53:33.767 --> 00:53:36.834
dot net has image manipulating 
abilities...       

00:53:36.834 --> 00:53:37.834
It does.

00:53:37.834 --> 00:53:42.300
Well, you can probably take and 
translate what I do with GD into 

00:53:42.300 --> 00:53:46.166
the dot net object very easily.
Because it's, it's all pretty 

00:53:46.166 --> 00:53:50.066
standard stuff. The important 
this is that you understand how 

00:53:50.066 --> 00:53:54.700
to reference the latitude and 
longitude to a pixel location 

00:53:54.700 --> 00:53:58.867
and a zoom, and that is just, 
it's a simple calculation, but 

00:53:58.867 --> 00:54:03.700
if you, if you, if you start 
from point and try to create a 

00:54:03.700 --> 00:54:07.367
tile directly, you're gonna say, 
“This is too hard.” So you, go 

00:54:07.367 --> 00:54:10.467
through what I've done already, 
decipher the, the code that I 

00:54:10.467 --> 00:54:13.867
have down on these examples,
 and I think you'll find that 

00:54:13.867 --> 00:54:18.633
it's really a lot simpler than 
you, than you thought. Okay?

00:54:18.633 --> 00:54:22.600
So with the static data tiles, 
the, the biggest, like, 

00:54:22.600 --> 00:54:25.467
basically, you just pre-
calculated a whole mess of images…? 
 

00:54:25.467 --> 00:54:28.367
Yes, they're all pre-calculated 
in advance. That's one of the 

00:54:28.367 --> 00:54:31.600
limitations of static data tiles 
is that, let's say, for instance, 

00:54:31.600 --> 00:54:35.200
it's counties of the United 
States, well, they don't change 

00:54:35.200 --> 00:54:38.934
but once every five or six years, 
there's some minor change. If 

00:54:38.934 --> 00:54:43.800
it's, if it's something like 
sales data, or sales territories,

00:54:43.800 --> 00:54:45.967
this is a big one, is sales 
territories, if it's sales 

00:54:45.967 --> 00:54:50.100
territories for my company, and 
the, I have a hundred and fifty 

00:54:50.100 --> 00:54:52.000
or two hundred and fifty 
salesmen spread out in the 

00:54:52.000 --> 00:54:54.734
United States, and they're 
constantly jockeying territories, 

00:54:54.734 --> 00:54:58.100
they've had(?), for instance, I 
do a lot of territory based 

00:54:58.100 --> 00:55:02.066
systems that are used in zip 
code as their base unit for 

00:55:02.066 --> 00:55:04.700
territory, you know, some 
salesman A has this list of 

00:55:04.700 --> 00:55:08.333
zipcodes, salesman B has another 
list, they want to see them 

00:55:08.333 --> 00:55:12.233
depicted on the map as a big 
red area and a big blue area 

00:55:12.233 --> 00:55:16.300
and a big green area for the 
different salesmen. 

00:55:16.300 --> 00:55:19.400
What you need to do with the 
static data tile system is you 

00:55:19.400 --> 00:55:23.000
need to say, “Okay, how often 
do you want an update?” And, to 

00:55:23.000 --> 00:55:27.600
generate a complete set of 
tiles for a zoom levels five to 

00:55:27.600 --> 00:55:31.533
seventeen, for instance, can 
take a lot of time. It's pretty 

00:55:31.533 --> 00:55:36.166
processor-intensive. I have 
customers that run it on, some 

00:55:36.166 --> 00:55:39.767
of these, they'll, you know, 
eight processor systems, they 

00:55:39.767 --> 00:55:43.867
can do it in four to six hours. 
If you've got a standard quad 

00:55:43.867 --> 00:55:47.667
mac, or something like that, I 
have a quad mac 3.0, I run it 

00:55:47.667 --> 00:55:51.900
on, it takes about six dual 
processor systems,  twelve to 

00:55:51.900 --> 00:55:54.667
eighteen, if you want to run it 
on a Celeron, come back next 

00:55:54.667 --> 00:55:59.300
week. You know, it's just not 
gonna be produced fast. But if 

00:55:59.300 --> 00:56:02.934
you have a reasonable schedule, 
once a month I'm gonna regenerate

00:56:02.934 --> 00:56:07.367
the tiles to show sales areas, 
works great, it really does. 

00:56:07.367 --> 00:56:11.633
If you can get it to, get people
to agree. Now if it's weather or

00:56:11.633 --> 00:56:14.233
if it's something of that nature 
that changes moment to moment, 

00:56:14.233 --> 00:56:16.867
it's not gonna work. 

00:56:16.867 --> 00:56:19.500
Now, what are you use, like, I 
mean, you're generating these 

00:56:19.500 --> 00:56:23.667
images, but before you generate 
the images that the polygons, 

00:56:23.667 --> 00:56:27.266
you know, the polygons that are
basically a bunch of just X,Y 

00:56:27.266 --> 00:56:29.900
coordinates are somewhere, where 
are they at? Like, where do they 

00:56:29.900 --> 00:56:33.300
exist? If someone wants to, 
“Okay, you have California and 

00:56:33.300 --> 00:56:37.500
Arizona as your sales area,” 
whatever reason, and then,

00:56:37.500 --> 00:56:40.333
“Okay, now you got Colorado, so 
now we're gonna include Colorado 

00:56:40.333 --> 00:56:44.700
in there,” like what software do 
they use to include Colorado now?

00:56:44.700 --> 00:56:47.867
Okay, the question is about 
source of the data. Well the 

00:56:47.867 --> 00:56:50.433
source of the data is really 
wonderful: The United States 

00:56:50.433 --> 00:56:52.834
Government. This is the United 
States only, the United States 

00:56:52.834 --> 00:56:56.433
government passed a rule sometime 
back that all of their data is 

00:56:56.433 --> 00:57:00.100
not copywriteable, so anything 
that the government produces is 

00:57:00.100 --> 00:57:03.900
free to use in any way we want. 
We can do anything we want with

00:57:03.900 --> 00:57:07.467
it. The census beuro produces 
just absolutely gobs of this 

00:57:07.467 --> 00:57:12.500
data. They have a cartography
bound, boundary website, I, I 

00:57:12.500 --> 00:57:15.367
don't have the URL, the dot 
URL of the top of my head, but 

00:57:15.367 --> 00:57:19.734
if you put in “cartographic 
boundary census” into Google, 

00:57:19.734 --> 00:57:25.834
you get right to it. They have 
states, they have counties, 

00:57:25.834 --> 00:57:29.467
they have a thing called the 
ZCTA, which is a, a sort of a 

00:57:29.467 --> 00:57:33.367
zipcode, it's not really very up 
to date, they have census blocks 

00:57:33.367 --> 00:57:36.467
and, I think they only have 
blocks, I don't know if they 

00:57:36.467 --> 00:57:39.200
have tracks, they may have tracks 
but not blocks, I'm not sure if 

00:57:39.200 --> 00:57:42.400
they have blocks, they have school 
districts, they have a lot of 

00:57:42.400 --> 00:57:46.266
data, a lot of it is as of the 
two thousand census, so it's not 

00:57:46.266 --> 00:57:50.433
that useful, but as far as this 
demonstration and, a lot of 

00:57:50.433 --> 00:57:54.033
other uses, if you want states 
and counties, great source of 

00:57:54.033 --> 00:57:59.800
data. Then there's the tiger-line 
database. Tiger is a database that 

00:57:59.800 --> 00:58:02.967
covers the entire United States 
down to the street level, 

00:58:02.967 --> 00:58:10.333
geo-coding. It's amazing resource 
before the current version, which is 

00:58:10.333 --> 00:58:16.900
called two thousand and six SE, is a 
bizarre database, seventeen different 

00:58:16.900 --> 00:58:20.934
record types, I mean it's like, if, 
if any of you who are legacy programmers, 

00:58:20.934 --> 00:58:27.600
you remember what a record-type is. A 
flat file with a header that has a character 

00:58:27.600 --> 00:58:30.567
in it that means it, “I am an X 
record.” You know, and it's 

00:58:30.567 --> 00:58:36.500
cumbersome, difficult to use, it's 
the most difficult to use sytem of 

00:58:36.500 --> 00:58:39.166
I have ever come up with. Reading 
the manual, just like reading an 

00:58:39.166 --> 00:58:43.400
IRS manual, if you like doing 
you're takes, you'll love tiger. 

00:58:43.400 --> 00:58:47.867
However, starting in March of this
year, I think sometime in March, 

00:58:47.867 --> 00:58:51.533
they're gonna release it, they're 
gonna start releasing these, this 

00:58:51.533 --> 00:58:53.233
data as shape(?) files directly. 

00:58:53.233 --> 00:58:54.333
Oh, really?

00:58:54.333 --> 00:58:57.133
Yes, they're gonna all be shape 
files. So instead of having to

00:58:57.133 --> 00:58:59.734
 take this data, like, what I've 
done is I take the Tiger data, 

00:58:59.734 --> 00:59:04.367
and I, with programs, I create 
shape files. And it's very 

00:59:04.367 --> 00:59:08.133
complicated and very difficult, 
I have, when they will put out a 

00:59:08.133 --> 00:59:12.300
release, it would take me over a 
month of, of, of processing time 

00:59:12.300 --> 00:59:16.967
to create a complete shape file, 
file, a shape file of the entire

00:59:16.967 --> 00:59:21.066
United States down to the 
sub-polygon level, called the 

00:59:21.066 --> 00:59:26.600
A-record level. Which is sixteen 
million polygons that define the 

00:59:26.600 --> 00:59:30.867
United States. Now they're gonna 
release that as shape files. Now, 

00:59:30.867 --> 00:59:32.533
they're not gonna, they're not 
gonna release, from what I 

00:59:32.533 --> 00:59:36.133
understand, the A-file, they're, 
they're gonna, which is the 

00:59:36.133 --> 00:59:38.433
sixteen million polygons, but 
they're gonna release all the 

00:59:38.433 --> 00:59:44.633
other, blocks, tracks, counties, 
states, they, they skipped ZCTAs, 

00:59:44.633 --> 00:59:48.233
for some reason, which actually 
I'm glad of, because I sell 

00:59:48.233 --> 00:59:51.333
zip-code polygons, so if they 
had published them, I would lose 

00:59:51.333 --> 00:59:58.667
a product, but they're, they're 
not doing zip-codes, but they 

00:59:58.667 --> 01:00:02.533
have a lot of other great things. 
They have school districts, 

01:00:02.533 --> 01:00:06.500
they have all the congressional 
districts, you know, as they're 

01:00:06.500 --> 01:00:10.367
currently mapped, so this is up to 
date. Congressional district or, 

01:00:10.367 --> 01:00:12.567
congressional, what is it, the 
hundred and tenth congress, all 

01:00:12.567 --> 01:00:17.667
the districts are mapped out as 
polygons that you can download 

01:00:17.667 --> 01:00:22.200
right now in the form of shape 
files from, from that website. 

01:00:22.200 --> 01:00:26.667
So that's an incredible resource 
you can do so much with it. You 

01:00:22.066 --> 01:00:24.800
know, and it's, and it's 
completely copyright free, 

01:00:24.800 --> 01:00:28.500
anything you create of it, you 
can re-sell it. And I do. 

01:00:28.500 --> 01:00:31.633
I create all kinds of products 
out of this stuff, custom polygon 

01:00:31.633 --> 01:00:35.266
products for, for customers and 
charge them a lot of money for it, 

01:00:35.266 --> 01:00:36.734
you know? Yes.

01:00:36.734 --> 01:00:41.834
Is there anything that you can 
turn from county into streetmap?

01:00:41.834 --> 01:00:45.433
The question is can you turn 
county into, county map into a 

01:00:45.433 --> 01:00:50.066
streetmap. With Tiger, you can 
because they have streetlevel 

01:00:50.066 --> 01:00:54.867
data down to a very fine level. 
The problem with Tiger is that 

01:00:54.867 --> 01:00:59.934
every county is responsible for 
maintaining their own data. So 

01:00:59.934 --> 01:01:01.934
you have, let's say, for 
instance, I'm from a county 

01:01:01.934 --> 01:01:04.900
called Desoto in Mississippi, 
not from, that's where I'm 

01:01:04.900 --> 01:01:07.834
currently living, I'm actually 
not from there, disclaimer. But, 

01:01:07.834 --> 01:01:11.000
the county I live in is Desoto 
county Mississippi, it happens to 

01:01:11.000 --> 01:01:14.367
be a rich county, it's the richest 
county in Mississippi. They have a 

01:01:14.367 --> 01:01:18.467
GAIS department to beat the band. 
Their data is better than TeleAtlas. 

01:01:18.467 --> 01:01:22.266
Now, you have another county next 
door, Marshall county, the poorest 

01:01:22.266 --> 01:01:25.633
county in the State. They don't 
even have a GIS department I went down there the other day to 

01:01:25.633 --> 01:01:29.433
get a deed from a property I own 
in Marshall county, they had a 

01:01:29.433 --> 01:01:32.533
guy working with a paper map 
that's like twenty years old, 

01:01:32.533 --> 01:01:35.633
it's all wrinkled on the edge, 
and they have an AS-400 computer. 

01:01:35.633 --> 01:01:39.567
An AS-400 computer to do GAIS 
stuff, it's like, that's just 

01:01:39.567 --> 01:01:43.967
not right, you know. So their 
data stinks because they don't 

01:01:43.967 --> 01:01:47.400
keep it up to date. Now I'm sure
when you look at, you know, 

01:01:47.400 --> 01:01:50.600
Alameda or Santa, is Santa Clara, 
is it the big one here? 

01:01:50.600 --> 01:01:54.200
Their data is probably great. 
They're probably within thirty 

01:01:54.200 --> 01:01:57.300
to a hundred feet on everything. 
They have address level data, 

01:01:57.300 --> 01:02:00.433
you can create your own geocoders. 
I have a reverse geocoder that I 

01:02:00.433 --> 01:02:03.166
created out of the Tiger data 
where you can click anywhere on 

01:02:03.166 --> 01:02:06.400
a map,and it'll tell you the 
address of that point, you know, 

01:02:06.400 --> 01:02:08.767
in reverse, in terms of the 
standard geocoder, you give it 

01:02:08.767 --> 01:02:12.367
an address and you get a point, 
reverse geocoder flips it around. 

01:02:12.367 --> 01:02:15.700
I created that from Tiger data.
These, these things are all 

01:02:15.700 --> 01:02:20.266
available for free. The problem 
is it's county level as to what 

01:02:20.266 --> 01:02:25.266
the quality is. And if it's an 
older city, usually it's fairly 

01:02:25.266 --> 01:02:30.200
good. New York City? Excellent 
data. Los Angeles? Pretty good. 

01:02:30.200 --> 01:02:34.333
San Francisco? Wonderful. I mean 
they, you know, this is the heart

01:02:34.333 --> 01:02:37.900
of all that stuff, so their, their 
stuff is wonderful. But as you 

01:02:37.900 --> 01:02:41.500
start to get out into the rural 
areas, you know, sometimes they 

01:02:41.500 --> 01:02:45.967
miss stuff by a long ways. There's
a county, or there's an interstate 

01:02:45.967 --> 01:02:49.166
in Arkansas 
that's off by a hundred miles. You know, 

01:02:49.166 --> 01:02:52.367
it's like, “Didn't anybody notice they 
put it on the wrong place on the map?” 

01:02:52.367 --> 01:02:57.467
You know it's like, “Well, you know, it 
does go through, you know, it just, 

01:02:57.467 --> 01:03:02.633
through to the wrong place.” So, that's 
the problem with that data. However, on 

01:03:02.633 --> 01:03:06.400
the other side of the coin is because 
it's free and it's so vast and they 

01:03:06.400 --> 01:03:12.033
cover so much, so much area you can 
leverage it to a lot of purposes. And if 

01:03:12.033 --> 01:03:15.633
you have some sort of self-correcting 
mechanism, you know, you can actually 

01:03:15.633 --> 01:03:22.934
correct the data yourself by……move-on? 
Okay. So anyway, so static data tiles 

01:03:22.934 --> 01:03:28.033
in conclusion. They work for any area, 
sorry to cut you off there, they work 

01:03:28.033 --> 01:03:34.633
for any area, they're great for large, 
large geographic areas, they work for 

01:03:34.633 --> 01:03:38.233
any zoom. They're not good for time 
sensitive data, and another thing 

01:03:38.233 --> 01:03:41.433
they can't do is you can't, for 
instance, pass something that a, 

01:03:41.433 --> 01:03:46.000
on the client, on the browser, you 
can't pass a selection data, piece 

01:03:46.000 --> 01:03:50.200
of data to get a different tile. 
Now the, what you can monkey that 

01:03:50.200 --> 01:03:53.433
up by creating a lot of different 
tile layers, but that's your only 

01:03:53.433 --> 01:03:57.734
different, the only way to do a 
static data tile. Okay, dynamic 

01:03:57.734 --> 01:04:01.066
data tiles, dynamic data tiles 
are created on the fly, they're 

01:04:01.066 --> 01:04:04.100
created when you, they're demanded, 
and that's a, a, it's a pretty cool 

01:04:04.100 --> 01:04:08.467
thing. You can use it for your own 
clustering algorithms on the server 

01:04:08.467 --> 01:04:11.800
instead of doing them in JavaScript. 
You can do it with time-sensitive data, 

01:04:11.800 --> 01:04:16.667
like, for instance, weather or sales 
data as it comes in.  You know, let's 

01:04:16.667 --> 01:04:20.767
say, for instance, you're showing houses 
that are sold. If a house is sold, 

01:04:20.767 --> 01:04:25.367
and you're depicting them on a map, 
it'll show, immediately, because you're, 

01:04:25.367 --> 01:04:30.133
you're creating the data, right, or the 
tile right out of the data. It is dependent 

01:04:30.133 --> 01:04:34.500
on a lot of programming skill. That's 
probably one of the real drawbacks of 

01:04:34.500 --> 01:04:38.400
this, and the other thing that kind 
of a, a limiter on this is server 

01:04:38.400 --> 01:04:43.767
resources, because it sucks the, 
the life out of your server. You 

01:04:43.767 --> 01:04:47.000
have to be, you know, pretty robust, 
you have to have a good quality 

01:04:47.000 --> 01:04:51.700
server in order to be able to create 
tiles on the fly. I use, my current 

01:04:51.700 --> 01:04:59.300
server is a quad three gigahertz quad 
with, I think I have six gig of ram 

01:04:59.300 --> 01:05:03.467
in the thing, and I'm running a mirrored 
then thousand rpm hard-drive, and it's 

01:05:03.467 --> 01:05:09.066
pretty fast, but, you know, when it gets 
loaded down, it can be slow. So you have

01:05:09.066 --> 01:05:13.667
to be, you have to weigh the advantages
first with the disadvantages. Now one of 

01:05:13.667 --> 01:05:19.633
the things that you can do is you can mix 
and match. Here's an example….let me go to 

01:05:19.633 --> 01:05:27.300
this…..you can, you can mix and match 
these things, so let's say, for instance, 

01:05:27.300 --> 01:05:33.734
on this map here, this is the same county,
this is a, a static tile later, layer 

01:05:33.734 --> 01:05:39.667
created from data. As the background layer, 
and as I zoom in, I only have this on zoom 

01:05:39.667 --> 01:05:42.367
level nine for this demonstration, so as I 

01:05:42.367 --> 01:05:47.600
hit zoom level nine, now we have these little 
points pop-up on the map. And these points, 

01:05:47.600 --> 01:05:51.400
are actually, what I'm doing here is I'm 
creating these tiles in the background with 

01:05:51.400 --> 01:05:54.133
these points, and they're the cities that are,

01:05:54.133 --> 01:05:58.567
that are contained on these points, 
and what's cool about this is 

01:05:58.567 --> 01:06:03.200
is as you mouse over it, it turns
into a hand, just like a marker, but 

01:06:03.200 --> 01:06:10.033
it's not a marker, it's a point on a static 
tile. And when you click it, you get an info 

01:06:10.033 --> 01:06:15.100
window. And the thing moved down and it 
populated some more and we got some more 

01:06:15.100 --> 01:06:19.333
cities, in, in this thing. What I'm doing
here, actually, is each tiles carries 

01:06:19.333 --> 01:06:24.133
along with it, the metadata, that's 
supports the tile as a cookie. So, 

01:06:24.133 --> 01:06:30.600
and this really, it's kind of a simple 
concept, but it's fairly revolutionary, 

01:06:30.600 --> 01:06:35.266
I suppose, I, I found it so. But what 
the ideas is is as you create the tile, 

01:06:35.266 --> 01:06:38.934
you have the data just like with the 
county map that I, that you change the 

01:06:38.934 --> 01:06:43.800
boundaries, as you create that tile, you 
have the data that supports it. So you 

01:06:43.800 --> 01:06:47.567
pass it, simply as a cookie. You just 
attach it as a cookie to the image, 

01:06:47.567 --> 01:06:52.166
and the image can transport cookies, 
as everybody knows, just as well as any 

01:06:52.166 --> 01:06:56.467
other thing, a page or, or anything else, 
so you can then harvest that cookie and 

01:06:56.467 --> 01:07:00.767
maintain that data as an array, in this 
case, what I do is I, I maintain in 

01:07:00.767 --> 01:07:06.133
this array of objects, objects by 
tile-name, so when I'm over a tile, 

01:07:06.133 --> 01:07:10.433
I know by mousing over what that 
tile name is, and when I hit that 

01:07:10.433 --> 01:07:16.533
point I know that there's only so 
many points in that tile, so instead 

01:07:16.533 --> 01:07:20.300
of having to go iterate over this 
entire array, which could be 

01:07:20.300 --> 01:07:24.567
thousands of points to locate 
that specific point, I'm only 

01:07:24.567 --> 01:07:27.467
looking at the points on that, 
that are contained on that tile, 

01:07:27.467 --> 01:07:29.867
because it's, the object only 
has the points that are in that 

01:07:29.867 --> 01:07:33.700
tile, tile, so that maybe a 
dozens instead of thousands, 

01:07:33.700 --> 01:07:38.533
so it's very snappy, you know, 
I mean that's fast. But this is 

01:07:38.533 --> 01:07:42.133
simulating marker behavior, and 
these points are pitiful looking, 

01:07:42.133 --> 01:07:45.567
but, you know, I, I didn't spend a 
lot of time on graphics. I'm not a 

01:07:45.567 --> 01:07:51.266
graphics person, I'm a programmer, 
you know, I'm, my wife says I have 

01:07:51.266 --> 01:07:56.000
no color taste, and I, I like purple 
and, and green, you know. Looks good 

01:07:56.000 --> 01:07:58.266
to me, but, you know, she doesn't 
like it. 

01:07:58.266 --> 01:08:01.066
So the search is done in JavaScript?

01:08:01.066 --> 01:08:04.734
Yeah, and the point, the point 
operation here is, what I'm doing 

01:08:04.734 --> 01:08:08.834
is in, in, in the JavaScript array,
and Marcela Montaigne, an associate 

01:08:08.834 --> 01:08:12.934
of mine, he wrote that, it's in this, 
in this page. What's actually

01:08:12.934 --> 01:08:17.400
happening is as the mouse moves, 
everytime the mouse, this little 

01:08:17.400 --> 01:08:20.867
JavaScript chunk goes and iterates 
through an array and says, “Okay, 

01:08:20.867 --> 01:08:26.066
do I have any points within ten 
pixels of this point?” And if it's 

01:08:26.066 --> 01:08:30.967
within ten pixels, I switch from 
an invisible marker that's located 

01:08:30.967 --> 01:08:35.266
somewhere on that map, I set the 
point of that marker to that point,

01:08:35.266 --> 01:08:40.867
and by setting the marker to that 
point, it turns into a hand. So it's, 

01:08:40.867 --> 01:08:45.300
it's kind of clever. It works really 
well, though, as you can see. I mean, 

01:08:45.300 --> 01:08:50.400
you, you, it, it works just as well
as the standard map, with markers. 

01:08:50.400 --> 01:08:54.367
But there are no markers. So there 
is no limit, you know, you're not 

01:08:54.367 --> 01:08:57.467
limited by markers, and you can do 
your clustering on the server. So you 

01:08:57.467 --> 01:09:00.600
can pick your clustering options 
on the server instead of in the 

01:09:00.600 --> 01:09:05.266
client. So you may have some 
secret clustering system that 

01:09:05.266 --> 01:09:08.166
you don't want to divulge. 
Well, on the server, you can 

01:09:08.166 --> 01:09:11.000
do all kinds of secret stuff. 
You can keep that stuff to yourself. 

01:09:11.000 --> 01:09:15.600
You don't have to publish it when 
it's in JavaScript, you can't see, 

01:09:15.600 --> 01:09:18.533
keep it secret. If somebody wants 
to see it and they want to copy it, 

01:09:18.533 --> 01:09:22.133
it's there for everyone to see. So, 
the difference between doing it on 

01:09:22.133 --> 01:09:28.934
the server and doing it on the 
browser is many fold, and security 

01:09:28.934 --> 01:09:30.266
is a big one. 

01:09:30.266 --> 01:09:32.367
Like, for instance, these points, 
if somebody wanted to harvest 

01:09:32.367 --> 01:09:35.567
these points, they could get the
pixel locations only. 

01:09:35.567 --> 01:09:37.734
They couldn't get latitudes 
and longitudes. 

01:09:37.734 --> 01:09:40.500
So they would 
have to translate those latitudes 

01:09:40.500 --> 01:09:44.400
and longitudes back into, or I 
mean those pixels, back into latitudes 

01:09:44.400 --> 01:09:47.700
and longitudes in order to harvest 
your points. And it wouldn't be as 

01:09:47.700 --> 01:09:51.667
precise as your original data. So 
you can hide this data from your 

01:09:51.667 --> 01:09:56.467
users and instead of just being an 
xml file that you can just Firefox, 

01:09:56.467 --> 01:10:00.567
you know, look under fire bug, look 
under the different things that are 

01:10:00.567 --> 01:10:04.200
loaded in that script, click on it, 
and bam, there it is, all the data 

01:10:04.200 --> 01:10:07.533
that's loaded by that program. Copy, 
paste, now they've got it on their 

01:10:07.533 --> 01:10:11.867
server, you know. So instead, this 
is a lot trickier, cause this data 

01:10:11.867 --> 01:10:15.700
comes across as cookies and it's, 
actually, they would have a real 

01:10:15.700 --> 01:10:21.567
trick of a time getting this data 
out of this program and into, into 

01:10:21.567 --> 01:10:25.967
their own. It's certainly not 
anything like stealing an xml file. 

01:10:25.967 --> 01:10:30.700
It would require real programming. 
So, it's another advantage of using 

01:10:30.700 --> 01:10:33.800
these dynamic data tiles, and of 
course, this data can change as you 

01:10:33.800 --> 01:10:37.800
do it. But there's virtually no limit 
to what you can do with something like 

01:10:37.800 --> 01:10:42.500
this. I find this really cool, you know,
myself. Any questions? 

01:10:42.500 --> 01:10:48.100
Could you have map objects behind that, 
too? Like did you show the streets and 

01:10:48.100 --> 01:10:49.266
all the other regular…?

01:10:49.266 --> 01:10:53.367
Oh sure. Absolutely. This is just a 
transparent tile layer. So you could put 

01:10:53.367 --> 01:10:54.500
anything you want on here…

01:10:54.500 --> 01:10:56.100
But you have two transparent tile layers.

01:10:56.100 --> 01:10:56.834
You could have five. 

01:10:56.834 --> 01:11:01.033
No but there, is there actually two 
being drawn there, like, one on top 

01:11:01.033 --> 01:11:04.166
of another or, do you draw it all on 
the server and send just one in?

01:11:04.166 --> 01:11:07.900
No, this is, this is actually two,
two layers, this is a static data 

01:11:07.900 --> 01:11:12.000
layer that you, that you saw in the 
previous demonstration overlayed with 

01:11:12.000 --> 01:11:16.100
a dynamic data layer, so these are 
two layers, is there, if we look at the…

01:11:16.100 --> 01:11:19.200
And that works in all browsers and 
everything?

01:11:19.200 --> 01:11:23.800
Yeah. It, it's standard Google maps, 
stuff. This is nothing revolutionary 

01:11:23.800 --> 01:11:27.433
or different. This is the same exact 
stuff that, when you look at a satellite 

01:11:27.433 --> 01:11:32.533
image with a hybrid overlay. You have one 
layer that's on the bottom, overlayed by 

01:11:32.533 --> 01:11:35.667
another one that's on top, you can 
choose the order in which these things 

01:11:35.667 --> 01:11:38.467
appear, too. You could put, you could 
flip it the other way and make the 

01:11:38.467 --> 01:11:43.066
satellite images transparent and show 
the, you know, hybrid under, but it
 

01:11:43.066 --> 01:11:43.900
wouldn't be as pretty.

01:11:43.900 --> 01:11:44.533
Right.

01:11:44.533 --> 01:11:46.633
You know, so you can choose 
which is on top and which is 

01:11:46.633 --> 01:11:50.734
on bottom. You can have multiple 
layers, you know, this is two, but 

01:11:50.734 --> 01:11:53.834
I've never tried it with more, but 
I'm imagining you can put as many 

01:11:53.834 --> 01:11:57.266
as you want, you can three, four,
five, you know, but every time every 

01:11:57.266 --> 01:12:02.133
layer is gonna require another tile 
fetch. So there is, you know, some 

01:12:02.133 --> 01:12:05.734
limits in terms of performance. Once 
you start, you know, if you had to 

01:12:05.734 --> 01:12:08.834
fetch five tiles to fill out one 
layer, you know, one square, that 

01:12:08.834 --> 01:12:12.600
would be kind of a, you know, drag 
on, on everything, including your 

01:12:12.600 --> 01:12:17.867
server. But, you know, the idea is 
that you make your static stuff 

01:12:17.867 --> 01:12:24.266
static, you make your dynamic stuff 
cheap and easy so that you lower the, 

01:12:24.266 --> 01:12:28.133
the server load, and what I actually 
did in this thing here is I calculated 

01:12:28.133 --> 01:12:32.533
all the positions in advance, put them 
in a field in the data base, along with 

01:12:32.533 --> 01:12:37.233
the tile number, so when I send in a 
tile number to fetch, the program does 

01:12:37.233 --> 01:12:43.433
a simple Postgres SQL query, said, 
“Give me the data for this tile number,” 

01:12:43.433 --> 01:12:49.533
and bam, it pops in. I don't do anything 
spatial here. This is all done as a standard 

01:12:49.533 --> 01:12:55.433
integer keys, which integer keys work great, 
as everybody knows. And then, of course, you 

01:12:55.433 --> 01:13:00.900
have your standard, you know, click on the 
sidebar thing and, wherever that is, oh, here 

01:13:00.900 --> 01:13:05.333
it is, right up here, that's Rigley(?) 
California, so…..go ahead. 

01:13:05.333 --> 01:13:10.266
So you're using GD in order to then 
generate the tiles for the dynamic data?

01:13:10.266 --> 01:13:16.033
Yes. The question is, “How is it generated?” 
It's generated with GD and Perl and Postgres

01:13:16.033 --> 01:13:22.000
doing a standard regular SQL query, and 
plotting these points, I just draw a, it's 

01:13:22.000 --> 01:13:30.100
actually, I think it's a line object, in, 
in GD that's like ten pixels long, but that, 

01:13:30.100 --> 01:13:34.700
the width, the thickness is ten, I think it's 
ten or eight, I'm not sure, and then I do a 

01:13:34.700 --> 01:13:38.233
smaller yellow dot inside of it. So, you know, that's how I make, 

01:13:38.233 --> 01:13:39.633
it's yellow and purple. 

01:13:39.633 --> 01:13:42.066
So it's not two fifty six and two fifty six?

01:13:42.066 --> 01:13:45.667
The tiles are, yes. I'm talking about 
these little teeny points. But it's 

01:13:45.667 --> 01:13:49.867
ninety nine percent empty space, so, 
you know, of that two hundred and 

01:13:49.867 --> 01:13:52.266
fifty six by two hundred and fifty 
six image, I've just got little tiny 

01:13:52.266 --> 01:13:57.367
little, itsy bits points here. And 
I have, I have the, the program that 

01:13:57.367 --> 01:14:00.467
generates these, the database here, 
I actually downloaded this data from 

01:14:00.467 --> 01:14:05.800
geonames dot org, this is U.S. dot 
zip, and then I pulled out all the 

01:14:05.800 --> 01:14:08.266
cities that had greater than three 
thousand people. Yes?

01:14:08.266 --> 01:14:13.867
What if a point is right on the edge 
of a tile, and a multiple pixel image 

01:14:13.867 --> 01:14:15.533
would overlap two tiles?

01:14:15.533 --> 01:14:18.633
The question is, “What do you do 
when it's on the edge of a tile?” 

01:14:18.633 --> 01:14:24.400
Now, cleverly, what I did is I 
checked. I checked to see if the 

01:14:24.400 --> 01:14:28.200
image fell within half the 
distance of the width of the 

01:14:28.200 --> 01:14:32.800
image. I just moved it over a 
little. So, cheated, you know. 

01:14:32.800 --> 01:14:36.934
And actually, that's, that's a 
way to ob, obfuscate your data, 

01:14:36.934 --> 01:14:39.166
as well, is you can obfuscate 
your data if you want to keep 

01:14:39.166 --> 01:14:43.400
the exact data from falling into 
the wrong hands, you can maneuver 

01:14:43.400 --> 01:14:46.633
the points around a little bit, 
you know, mess with it, so that 

01:14:46.633 --> 01:14:50.600
if somebody does copy, copy your 
data, maybe the numbers spell out 

01:14:50.600 --> 01:14:54.834
the name of your company, you know, 
in binary, and then you say, “Hey, this 

01:14:54.834 --> 01:14:58.834
is our data, see, it spells us, 
says so right here.” So, you know, 

01:14:58.834 --> 01:15:00.734
there's, there's all kinds of 
fun things you can do in there 

01:15:00.734 --> 01:15:04.934
and, I, I see a lot of questions 
on the forum about security of data. 

01:15:04.934 --> 01:15:10.900
You know, when you're using JavaScript 
and xml, goose-egg, you have no security. 

01:15:10.900 --> 01:15:15.433
You can try, but you have none. 
Using server-side techniques, 

01:15:15.433 --> 01:15:18.066
you have lots of security, you 
can do whatever you want. 

01:15:18.066 --> 01:15:22.834
So that's, that's the, the 
cleverness of this. Any other 

01:15:22.834 --> 01:15:31.567
questions? Okeydoke….so let's see
…and I think that pretty much wraps 

01:15:31.567 --> 01:15:37.166
it up. So in conclusion, dynamic data 
tiles on the fly offer all kinds of 

01:15:37.166 --> 01:15:42.367
flexibility, doesn't say so here, 
but it's, you have the security of 

01:15:42.367 --> 01:15:48.100
being able to keep your data close 
to your chest. You don't have to pass 

01:15:48.100 --> 01:15:53.200
it as, as a cookie, like I did. 
You can just put the name of that 

01:15:53.200 --> 01:15:57.867
piece of data on the tile and not 
pass it, keep it, keep it private. 

01:15:57.867 --> 01:16:00.800
There's a lot of things you can 
do with it. But it does come at a, 

01:16:00.800 --> 01:16:04.967
at a pretty stiff price. The power 
required to generate these tiles is 

01:16:04.967 --> 01:16:09.066
pretty immense, but it's still, 
on this little teeny laptop, 

01:16:09.066 --> 01:16:12.433
you see how fast it was, so 
it's not insurmountable. 

01:16:12.433 --> 01:16:14.600
If you have a really busy 
website where you're getting 

01:16:14.600 --> 01:16:19.333
ten or twenty thousand visitors 
a day, you're gonna probably 

01:16:19.333 --> 01:16:22.533
have to do some load balancing 
systems, you know, use multiple 

01:16:22.533 --> 01:16:27.400
servers and, and, you know, share 
the load, but that's also pretty 

01:16:27.400 --> 01:16:36.767
easy to do. So, okay, any questions, 
any other questions? Alright. 

01:16:36.767 --> 01:16:43.200
Getting help. Now if you need help 
on any of these things, there's the 

01:16:43.200 --> 01:16:47.467
Google Maps API discussion group. 
Now we, we always recommend that 

01:16:47.467 --> 01:16:52.200
you use that resource as heavily 
as you can, because there are experts 

01:16:52.200 --> 01:16:56.500
all around the world who are helping 
you twenty four hours a day, seven 

01:16:56.500 --> 01:17:00.600
days a week, in England, they don't 
celebrate Thanksgiving, and in, 

01:17:00.600 --> 01:17:04.967
you know, various countries, 
they don't celebrate Christmas, 

01:17:04.967 --> 01:17:08.066
and New Year's in China is a 
different time than, than it is here, 

01:17:08.066 --> 01:17:12.467
you know, twenty-four hours a day,
seven days a week, you can get your 

01:17:12.467 --> 01:17:15.767
question answered, usually in a 
matter of minutes. And that's really 

01:17:15.767 --> 01:17:19.000
amazing, you ask a question, as long 
as it's intelligently phrased, 

01:17:19.000 --> 01:17:24.266
it's not like, something like, “Help!” 
you know? “Help” is not the way you ask 

01:17:24.266 --> 01:17:29.467
the question, alright, we get that a lot. 
“Desperate for help” you know, it's like, 

01:17:29.467 --> 01:17:34.133
okay, this isn't a singles bar, you know, 
this is a, a help forum, so, you know, 

01:17:34.133 --> 01:17:39.000
you state your, the standard rules of 
asking a question hold true. State it, 

01:17:39.000 --> 01:17:44.233
the question in a short bit.  
Always include a link to your 

01:17:44.233 --> 01:17:47.800
existing page. If you don't have a 
link to your existing page, upload 

01:17:47.800 --> 01:17:52.233
it to Google Pages before you ask 
a question, because we gotta see 

01:17:52.233 --> 01:17:57.066
the page. If you ask a question about 
JavaScript, we cannot answer it by just 

01:17:57.066 --> 01:18:01.000
saying, “My page is jerky and it 
doesn't peform the way I want. 

01:18:01.000 --> 01:18:04.100
How do I fix it?” That's obviously 
not a good way to answer the question, 

01:18:04.100 --> 01:18:07.200
ask the question. But if you put in 
a link to your page, even if you 

01:18:07.200 --> 01:18:09.867
don't have the clearest question, 
we can go and look at it. 

01:18:09.867 --> 01:18:13.500
We can run it through the debugger, 
we can do all kinds of stuff, 

01:18:13.500 --> 01:18:15.967
we can see, you know, where the 
errors lie, and say, “Well, you know, 

01:18:15.967 --> 01:18:20.300
on line twenty three here, you missed 
the variable name.” Yes.

01:18:20.300 --> 01:18:24.533
I just forgot. I have so many 
things going on in my head….

01:18:24.533 --> 01:18:30.767
Okay. Then, there's also the Mapkey. 
The Mapkey is END's website where he's, 

01:18:30.767 --> 01:18:36.200
created a wiki kind of system. 
I like it. It's, it's not really 

01:18:36.200 --> 01:18:39.800
totally well organized yet, 
but it's got such a wealth of 

01:18:39.800 --> 01:18:42.200
information, you know, like, 
for instance, that tile cutter 

01:18:42.200 --> 01:18:46.100
and a lot of that stuff is all 
there. There's all kinds of 

01:18:46.100 --> 01:18:50.867
example and knowledge. It's a huge, 
huge tool that, that I recommend 

01:18:50.867 --> 01:18:54.934
everybody use. And then, of course, 
Google is your friend. You know, 

01:18:54.934 --> 01:18:58.834
if you can't get your answer from, 
in the time span that you need it 

01:18:58.834 --> 01:19:02.166
from the first two resources, 
go to Google and just type it in. 

01:19:02.166 --> 01:19:05.867
Odds are, somebody's already 
asked and answered that question, so…

01:19:05.867 --> 01:19:08.133
Yeah, shouldn't that be your 
first resource?

01:19:08.133 --> 01:19:11.400
No, actually not. I think 
that the first resource is go 

01:19:11.400 --> 01:19:14.500
to the Google maps discussion 
board and search within that, 

01:19:14.500 --> 01:19:17.700
because than you're, you're not 
getting, you know…

01:19:17.700 --> 01:19:18.433
Noise.

01:19:18.433 --> 01:19:23.700
Weird, you know, breast 
enlargement things, and strange stuff.

01:19:23.700 --> 01:19:25.100
What on earth(?) are you searching for?  

01:19:25.100 --> 01:19:27.867
Well, it seems that no matter what 
you search for, you always get some 

01:19:27.867 --> 01:19:28.767
weird thing, you know….

01:19:28.767 --> 01:19:32.367
Where's those Google, the 
Google guys to fix that problem?

01:19:32.367 --> 01:19:34.633
It's not a problem, 
it's a feature.

01:19:34.633 --> 01:19:38.467
It's a feature, right. It's a 
feature. Okay, so software and 

01:19:38.467 --> 01:19:42.900
data use in the discussion, I 
used Perl 5.8A with DBI, that's

01:19:42.900 --> 01:19:47.066
the module. GD and CGI, 
those are the moduels that 

01:19:47.066 --> 01:19:51.800
you need to run this under 
Perl. I have two Perl moduels 

01:19:51.800 --> 01:19:54.133
that I wrote, USNaviguide 
underscore Google underscore 

01:19:54.133 --> 01:19:58.734
relpicks, that's to calculate 
a relative pixel location on a map. 

01:19:58.734 --> 01:20:02.333
You just pass it a latitude and a 
longitude and a zoom, and it'll 

01:20:02.333 --> 01:20:08.066
bring you back the, the pixel that, 
where you have to put it on the 

01:20:08.066 --> 01:20:10.934
particular image or whatever 
you're working with. The tiles 

01:20:10.934 --> 01:20:16.900
moduel calculates the values of 
each tile. Postgres 8.2 is what 

01:20:16.900 --> 01:20:21.500
I used with Post GIS. Anything 
over Postgres 7.4 I think 7.3
 

01:20:21.500 --> 01:20:27.900
works well with spatial things, 
GIS, I think Post GIS 7.4 you 

01:20:27.900 --> 01:20:31.867
have to be and above. One thing, 
if you're gonna use Post GIS on 

01:20:31.867 --> 01:20:35.834
a linux box, you have to build 
it from source. It's really easy, 

01:20:35.834 --> 01:20:41.433
you just download the module 
from the Postgres website and 

01:20:41.433 --> 01:20:47.533
go to the quickmake instructions, 
it's like five steps to build a 

01:20:47.533 --> 01:20:50.500
Postgres from source. But you 
need to build it from source in 

01:20:50.500 --> 01:20:54.633
order to add the Post GIS module. 
If you're a windows user, Post 

01:20:54.633 --> 01:21:02.500
GIS comes included with the binary 
for Postgres. And, let's see…Apache 

01:21:02.500 --> 01:21:06.900
2.0 webserver, which you can still 
use, I guess, IES(?), although I 

01:21:06.900 --> 01:21:11.000
don't know why you would wanna. 
Projected image dot JS JavaScript, 

01:21:11.000 --> 01:21:16.233
yeah, US Census, cartography boundary 
county shape file, that was the, 

01:21:16.233 --> 01:21:20.867
the shape files, joenames dot org 
US zip file, and all the data for 

01:21:20.867 --> 01:21:27.266
this example can be downloaded from 
this url, including this presentation, 

01:21:27.266 --> 01:21:31.867
this presentation is a pdf, so if you 
want to download that, as well, or 

01:21:31.867 --> 01:21:34.200
review it or see anything that you missed. 

01:21:34.200 --> 01:21:38.800
So that, does the zip file include these 
things, this information as well?

01:21:38.800 --> 01:21:39.900
Yeah…

01:21:39.900 --> 01:21:42.266
Like a readme or something?

01:21:42.266 --> 01:21:47.200
(Eh), I don't know how much 
readme is there, but once you 

01:21:47.200 --> 01:21:50.567
explode it out, it, I would say 
take a look at it. There's a lot 

01:21:50.567 --> 01:21:55.533
of comments in the programs. It's 
kind of, I guess the Read Me is this 

01:21:55.533 --> 01:21:59.300
pdf, you know, that gives the 
demonstration and the names of 

01:21:59.300 --> 01:22:01.600
everything. But all of the….
yes, go ahead.

01:22:01.600 --> 01:22:08.500
Dash, that's a W S dash two 
thousand and eight dash 0 2 4, 

01:22:08.500 --> 01:22:09.367
this month. 

01:22:09.367 --> 01:22:13.000
I'll send at the url for all 
of this stuff, so you don't 

01:22:13.000 --> 01:22:15.166
have to be writing it down…

01:22:15.166 --> 01:22:17.567
And if you want to put that 
on some other, on a Google 

01:22:17.567 --> 01:22:20.900
site, that'd be fine, too. 
You said you had a download 

01:22:20.900 --> 01:22:24.567
site for, you wanted, I just 
put it here for, cause that's 

01:22:24.567 --> 01:22:29.433
my server, I had control over 
that one. And special thanks to 

01:22:29.433 --> 01:22:33.033
Marcel le Montaigne with helping 
me with some of those examples. 

01:22:33.033 --> 01:22:35.566
Any other questions? Okay, that's it. 

