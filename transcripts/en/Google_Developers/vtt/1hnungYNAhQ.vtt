WEBVTT
Kind: captions
Language: en

00:00:47.640 --> 00:00:48.280
Hi everybody.

00:00:48.280 --> 00:00:51.880
I hope this stream is working.

00:00:51.880 --> 00:00:53.300
My name is Nicolas Garnier.

00:00:53.300 --> 00:00:55.340
I'm a developer advocate
working on Google

00:00:55.340 --> 00:00:57.190
Drive here in Zurich.

00:00:57.190 --> 00:01:00.630
So this is the first time
we're trying this live

00:01:00.630 --> 00:01:02.010
broadcasting set up.

00:01:02.010 --> 00:01:03.720
Hopefully everything
will be live.

00:01:03.720 --> 00:01:07.860
If it's not, please complain
on the YouTube comment, and

00:01:07.860 --> 00:01:12.500
I'll try to have a look
during this web cast.

00:01:12.500 --> 00:01:15.430
So during the session, today
we're going to have a look at

00:01:15.430 --> 00:01:19.860
how the search feature inside
Google Drive is working and

00:01:19.860 --> 00:01:24.660
basically, as a developer, what
you have to do to make

00:01:24.660 --> 00:01:25.770
your file searchable.

00:01:25.770 --> 00:01:29.930
And, basically, have a very nice
integration between your

00:01:29.930 --> 00:01:33.020
app and Google Drive and have
all sorts of files.

00:01:33.020 --> 00:01:36.100
We'll see in details how that
works searchable through

00:01:36.100 --> 00:01:38.010
Google Drive.

00:01:38.010 --> 00:01:44.810
So first, let's see a bit how
Google Drive search works,

00:01:44.810 --> 00:01:48.220
today, for the basic
use cases.

00:01:48.220 --> 00:01:51.610
So let me switch to
my drive here.

00:01:51.610 --> 00:01:52.420
So this is my drive.

00:01:52.420 --> 00:01:53.740
This is one of my
test accounts.

00:01:53.740 --> 00:01:55.170
It doesn't have many
files in it.

00:01:55.170 --> 00:02:01.480
But what I want to show you is
the search feature, which you

00:02:01.480 --> 00:02:03.960
can use using the search
bar here on top.

00:02:03.960 --> 00:02:06.780
Whenever you're going to upload
a file to Google Drive,

00:02:06.780 --> 00:02:10.169
Google Drive is, usually, going
to index that file.

00:02:10.169 --> 00:02:14.630
Basically, read the content of
that file and index it so that

00:02:14.630 --> 00:02:20.000
your file can be easily
searchable using that future.

00:02:20.000 --> 00:02:22.110
So this is true for,
basically, all

00:02:22.110 --> 00:02:22.970
the common file types.

00:02:22.970 --> 00:02:26.760
So let's say you upload a text
document, or an HTML

00:02:26.760 --> 00:02:27.910
document, or PDF.

00:02:27.910 --> 00:02:31.980
Basically, every very, very
common file types.

00:02:31.980 --> 00:02:34.020
Google Drive is going to
automatically be able to read

00:02:34.020 --> 00:02:37.390
the content because Google Drive
knows that file type and

00:02:37.390 --> 00:02:41.320
is going to be able to read and
index that file content.

00:02:41.320 --> 00:02:43.980
So I have prepared a little
bit of code here.

00:02:43.980 --> 00:02:47.230
Let me switch to my eclipse.

00:02:47.230 --> 00:02:53.340
That first little code sample
here is actually using our

00:02:53.340 --> 00:02:56.050
Java Quick Start, which I took
from our documentation.

00:02:56.050 --> 00:02:58.980
I just modified it a bit so I
don't have to go through all

00:02:58.980 --> 00:03:02.580
the authorization part
of that Quick Start.

00:03:02.580 --> 00:03:04.280
It's already authorized.

00:03:04.280 --> 00:03:06.540
What it's going to do is, it's
simply going to go upload a

00:03:06.540 --> 00:03:10.840
text file, which I call
document.text.

00:03:10.840 --> 00:03:12.720
Here I can show you.

00:03:12.720 --> 00:03:15.690
This is the text file, very
simple text file, with only a

00:03:15.690 --> 00:03:17.390
little word in it.

00:03:17.390 --> 00:03:18.240
Test one, two, three.

00:03:18.240 --> 00:03:22.470
So we can use that to try
to search it later on.

00:03:22.470 --> 00:03:23.930
What that's going to do here
is, that's simply going to

00:03:23.930 --> 00:03:25.210
upload that text file.

00:03:25.210 --> 00:03:27.800
So let me do this.

00:03:27.800 --> 00:03:30.750
I run that little script.

00:03:30.750 --> 00:03:32.507
Test command file upload.

00:03:35.250 --> 00:03:37.670
The code is running.

00:03:37.670 --> 00:03:42.000
And when it's done here,
basically, the output tells me

00:03:42.000 --> 00:03:43.820
that the insert was
successful.

00:03:43.820 --> 00:03:47.230
Now, let me go back
to my drive.

00:03:47.230 --> 00:03:49.210
And we see the text file here.

00:03:49.210 --> 00:03:52.970
So just to show you that the
indexing is working properly,

00:03:52.970 --> 00:03:56.070
if I try to search for test123,
which is the content

00:03:56.070 --> 00:03:58.670
of that text file,
that works well.

00:03:58.670 --> 00:04:00.480
The file is found.

00:04:00.480 --> 00:04:03.800
Everything works as expected.

00:04:03.800 --> 00:04:08.010
So if you, as a developer,
upload any types of very, very

00:04:08.010 --> 00:04:09.240
common file types.

00:04:09.240 --> 00:04:14.280
As I said, PDF, HTML, text
files, that sort of files.

00:04:14.280 --> 00:04:15.960
Google Drive is going to
automatically index it.

00:04:15.960 --> 00:04:19.850
So if you're working with common
files types, you don't

00:04:19.850 --> 00:04:23.690
really have anything else to do
than simply uploading the

00:04:23.690 --> 00:04:25.980
text files, as usual.

00:04:25.980 --> 00:04:27.210
It also works with images.

00:04:27.210 --> 00:04:30.660
So here is an image that
I uploaded earlier.

00:04:30.660 --> 00:04:37.270
It's an image of a little
Android logo here.

00:04:37.270 --> 00:04:46.230
Google Drive also have some
image recognition logic.

00:04:46.230 --> 00:04:49.970
And basically, it's going to
index all the images and then

00:04:49.970 --> 00:04:52.900
try to detect a bunch of
patterns or known--

00:04:52.900 --> 00:04:56.900
for example, known buildings,
or anything like that.

00:04:56.900 --> 00:05:00.860
Or here it's going to recognize
that it's a little

00:05:00.860 --> 00:05:01.750
Android doll.

00:05:01.750 --> 00:05:07.020
And it's going to index that
file against that search

00:05:07.020 --> 00:05:09.000
query, which is, for example,
Android here.

00:05:09.000 --> 00:05:14.460
So if I search for Android, I'm
going to find that image

00:05:14.460 --> 00:05:17.710
even though the word Android
wasn't used in any of the

00:05:17.710 --> 00:05:19.540
metadata for that file.

00:05:19.540 --> 00:05:22.530
It's not in the title.

00:05:22.530 --> 00:05:23.850
It's not in the description.

00:05:23.850 --> 00:05:27.540
So just recognize it's
an Android doll.

00:05:27.540 --> 00:05:30.070
That's going to work for all
the images automatically.

00:05:30.070 --> 00:05:32.470
You have nothing special
to do here.

00:05:32.470 --> 00:05:36.630
If you upload an image, the user
will be able to search

00:05:36.630 --> 00:05:41.180
for it, and it will
automatically recognize its

00:05:41.180 --> 00:05:42.240
contents, usually.

00:05:42.240 --> 00:05:44.450
That works pretty nicely.

00:05:44.450 --> 00:05:47.690
A quick note, you also should
be able to use that

00:05:47.690 --> 00:05:48.920
feature in the API.

00:05:48.920 --> 00:05:52.570
So you can use our full text
search feature in the API.

00:05:52.570 --> 00:05:54.190
And you'll get--

00:05:54.190 --> 00:05:55.720
for example, if you search
for Android, you'll

00:05:55.720 --> 00:05:56.870
actually get that file.

00:05:56.870 --> 00:05:59.370
So this is all working
pretty nicely.

00:05:59.370 --> 00:06:02.710
Let me go back to
my actual files.

00:06:02.710 --> 00:06:07.220
Now I actually want to show
you what you can do as a

00:06:07.220 --> 00:06:10.650
developer for uncommon
file types.

00:06:10.650 --> 00:06:13.150
If you upload file types
that are not very

00:06:13.150 --> 00:06:15.340
common, let's say--

00:06:15.340 --> 00:06:20.950
Here, I have prepared another
file, which I'm going to give

00:06:20.950 --> 00:06:22.050
that very, very long name.

00:06:22.050 --> 00:06:24.630
And I'm going to give it
a very weird MimeType.

00:06:24.630 --> 00:06:28.320
The MimeType for that file is
going to be myown/mime.type.

00:06:28.320 --> 00:06:31.370
So it's an uncommon MimeType,
I would say.

00:06:31.370 --> 00:06:34.330
Google Drive is not going to try
to index that file, as we

00:06:34.330 --> 00:06:35.330
are going to see in a minute.

00:06:35.330 --> 00:06:37.045
So let me just upload it.

00:06:39.660 --> 00:06:41.350
OK, here.

00:06:41.350 --> 00:06:43.200
My script is uploading
that file.

00:06:43.200 --> 00:06:45.930
That file is actually the same
text file that we've seen

00:06:45.930 --> 00:06:47.740
before that contains test123.

00:06:47.740 --> 00:06:48.490
three.

00:06:48.490 --> 00:06:51.220
Except that because the MimeType
type set for that

00:06:51.220 --> 00:06:56.370
file is not plain slash text,
Google Drive is not going to

00:06:56.370 --> 00:07:00.330
try to read the files
contents.

00:07:00.330 --> 00:07:04.430
And as we can see when I go
back to my Drive here.

00:07:04.430 --> 00:07:05.640
OK, my file is uploaded here.

00:07:05.640 --> 00:07:08.410
This file content is not
automatically indexed because

00:07:08.410 --> 00:07:10.040
it has an uncommon MimeType.

00:07:10.040 --> 00:07:11.780
That's the name I
gave to my file.

00:07:11.780 --> 00:07:19.120
And if I search for test123
again, I'm only going to see

00:07:19.120 --> 00:07:20.630
the first file that
I've uploaded.

00:07:20.630 --> 00:07:24.190
Not the second one, which has
the special MimeType.

00:07:24.190 --> 00:07:27.550
So now we're going to see
what you can do, guys.

00:07:27.550 --> 00:07:32.030
As developers, when you upload
uncommon file types inside

00:07:32.030 --> 00:07:34.540
Google Drive, what you can do
to have the content of the

00:07:34.540 --> 00:07:38.110
file indexed by Google Drive.

00:07:38.110 --> 00:07:40.920
So there is two ways
to have the

00:07:40.920 --> 00:07:42.920
content of the file indexed.

00:07:42.920 --> 00:07:49.730
Basically, you have to think
in which case am I. Let me

00:07:49.730 --> 00:07:51.030
switch back to me here.

00:07:51.030 --> 00:07:52.120
Hi guys, again.

00:07:52.120 --> 00:07:54.670
Is the content of the
file readable?

00:07:54.670 --> 00:07:56.350
If the content of your
file is text--

00:07:56.350 --> 00:08:02.290
for example, you're using
XML as a data

00:08:02.290 --> 00:08:04.780
format for your file.

00:08:04.780 --> 00:08:08.350
Basically, you would think, A,
it's going to be very easy for

00:08:08.350 --> 00:08:12.160
Google Drive to simply read that
file content and index it

00:08:12.160 --> 00:08:16.220
as it would for a regular XML
file or an HTML file, except I

00:08:16.220 --> 00:08:18.100
have my own specific MimeType.

00:08:18.100 --> 00:08:21.550
Or, let's say, the other case
you could be in is, I'm

00:08:21.550 --> 00:08:23.480
uploading, for example,
binary data.

00:08:23.480 --> 00:08:25.210
Or I'm using a shortcut file.

00:08:25.210 --> 00:08:27.170
We'll see what a shortcut
file is in

00:08:27.170 --> 00:08:29.070
Google Drive in a moment.

00:08:29.070 --> 00:08:32.220
So if you're opening binary
data, basically data that

00:08:32.220 --> 00:08:35.940
Google cannot read, that's
another case here.

00:08:35.940 --> 00:08:41.250
And there is ways for
you to indicate

00:08:41.250 --> 00:08:42.379
what type of content--

00:08:42.379 --> 00:08:46.360
I mean how Google Drive
should index the

00:08:46.360 --> 00:08:48.180
content of that file.

00:08:48.180 --> 00:08:49.950
So let me switch back
to my eclipse here.

00:08:49.950 --> 00:08:58.370
I've prepared, again, some more
code sample for you here.

00:08:58.370 --> 00:09:01.680
So this is the first
case here.

00:09:01.680 --> 00:09:06.660
We have a special feature that
you can set to tell Google

00:09:06.660 --> 00:09:12.190
Drive that-- let me show
you my eclipse--

00:09:12.190 --> 00:09:15.540
that basically tells Google
Drive my thought is actually

00:09:15.540 --> 00:09:17.290
text based or XML based.

00:09:17.290 --> 00:09:18.906
You can actually read
the content of that

00:09:18.906 --> 00:09:20.770
file and index it.

00:09:20.770 --> 00:09:25.530
You can do that by simply
setting that little flag here

00:09:25.530 --> 00:09:29.450
when you upload the file to
Google Drive that I've

00:09:29.450 --> 00:09:31.170
highlighted.

00:09:31.170 --> 00:09:33.010
Very simply, you set
use content as

00:09:33.010 --> 00:09:34.620
indexable text true.

00:09:34.620 --> 00:09:36.940
If you're using the original
[INAUDIBLE]

00:09:36.940 --> 00:09:40.730
library or if you're using the
protocol directly, you could

00:09:40.730 --> 00:09:48.590
use your parameter content as
indexable equal true when you

00:09:48.590 --> 00:09:51.800
do the upload request
to Google Drive.

00:09:51.800 --> 00:09:54.370
So when you do that, Google
Drive is actually going to try

00:09:54.370 --> 00:09:57.370
to read the file content
as if it was text

00:09:57.370 --> 00:09:58.570
and index its content.

00:09:58.570 --> 00:10:03.430
So let me run that little
code sample here.

00:10:07.170 --> 00:10:08.900
So the sample is uploading
the file.

00:10:08.900 --> 00:10:11.120
Here, it's done.

00:10:11.120 --> 00:10:14.720
If I go back to my Drive,
let me see all items.

00:10:19.080 --> 00:10:20.270
This is here.

00:10:20.270 --> 00:10:23.130
My new file just appeared.

00:10:23.130 --> 00:10:24.930
This content is automatically
indexed because we tell Google

00:10:24.930 --> 00:10:26.590
Drive to do so.

00:10:26.590 --> 00:10:31.470
If you search for the content
that's inside that text file,

00:10:31.470 --> 00:10:34.600
which has a specific MimeType
type which is not plain dot

00:10:34.600 --> 00:10:36.520
slash text.

00:10:36.520 --> 00:10:40.590
Google Drive have actually found
it because that's what

00:10:40.590 --> 00:10:43.810
setting that little URL
parameter does.

00:10:43.810 --> 00:10:46.090
Google Drive just reads it
as if it was a text file.

00:10:46.090 --> 00:10:52.680
So you can do that if your
specific file type is any

00:10:52.680 --> 00:10:59.340
types of plain text or
XML or JSON based.

00:10:59.340 --> 00:11:04.470
Basically, anything that you
guys can read pretty easily.

00:11:04.470 --> 00:11:06.710
That's your first case.

00:11:06.710 --> 00:11:12.100
Now, the second case is, let's
say your file type is

00:11:12.100 --> 00:11:14.180
basically binary.

00:11:14.180 --> 00:11:16.490
Basically, Google Drive is
never going to be able to

00:11:16.490 --> 00:11:17.560
actually read it.

00:11:17.560 --> 00:11:20.430
It's your custom binary file
format you've come up with.

00:11:20.430 --> 00:11:22.690
Or it's like an encrypted
file that

00:11:22.690 --> 00:11:25.460
you've encrypted customly.

00:11:25.460 --> 00:11:27.400
Google Drive is never going
to be able to read the

00:11:27.400 --> 00:11:29.400
content of that file.

00:11:29.400 --> 00:11:31.610
What you want to do,
in that case, is

00:11:31.610 --> 00:11:34.000
use our other feature.

00:11:34.000 --> 00:11:37.030
Let me show you.

00:11:37.030 --> 00:11:38.110
Here.

00:11:38.110 --> 00:11:40.410
Basically, you want to set
the indexable text.

00:11:40.410 --> 00:11:42.390
That's part of the
file metadata.

00:11:42.390 --> 00:11:48.020
When you upload the file, you
can pass indexable text.

00:11:48.020 --> 00:11:49.790
That's a write-only field.

00:11:49.790 --> 00:11:51.540
You're not going to be
able to read it back.

00:11:51.540 --> 00:11:54.480
The user is never going to be
able to see that field.

00:11:54.480 --> 00:11:56.890
We're only going to use all
the words that are in that

00:11:56.890 --> 00:11:59.430
field to index your file.

00:11:59.430 --> 00:12:01.190
And your file is going
to be searchable.

00:12:01.190 --> 00:12:04.090
So let's say you came up with
your own encrypted file or

00:12:04.090 --> 00:12:05.460
it's a binary file format.

00:12:05.460 --> 00:12:10.100
You have a drawing app,
and it's drawing data.

00:12:10.100 --> 00:12:13.250
But the user adds a few text
inside the drawing.

00:12:13.250 --> 00:12:18.480
You could, for example, set the
text that is inside the

00:12:18.480 --> 00:12:19.810
file content.

00:12:19.810 --> 00:12:20.530
Pass it in the

00:12:20.530 --> 00:12:22.530
setIndexableText function here.

00:12:26.750 --> 00:12:30.650
These words are going to be
indexed for the file to be

00:12:30.650 --> 00:12:32.310
searched against.

00:12:32.310 --> 00:12:34.350
So let me try to upload
that file again.

00:12:34.350 --> 00:12:37.760
This is, again, our
custom file.

00:12:37.760 --> 00:12:40.360
I haven't set the little
flag that say to

00:12:40.360 --> 00:12:41.970
read the file content.

00:12:41.970 --> 00:12:45.640
I'm going to use only that
setIndexableText feature here.

00:12:45.640 --> 00:12:48.630
And I'm going to pass,
again, test123 as

00:12:48.630 --> 00:12:51.250
the text to be indexed.

00:12:51.250 --> 00:12:54.440
So let's run this now.

00:12:54.440 --> 00:12:55.690
Here.

00:12:58.200 --> 00:13:01.640
Again, my script is uploading
the file.

00:13:01.640 --> 00:13:03.000
That's done.

00:13:03.000 --> 00:13:05.780
Let me go back to my Chrome.

00:13:05.780 --> 00:13:07.055
Let's look at the recent file.

00:13:10.300 --> 00:13:11.640
Let's wait a bit.

00:13:14.190 --> 00:13:14.990
Here we go.

00:13:14.990 --> 00:13:18.260
This is my file here.

00:13:18.260 --> 00:13:20.180
No, actually.

00:13:20.180 --> 00:13:22.320
Which name did I give it?

00:13:22.320 --> 00:13:22.930
Very sorry.

00:13:22.930 --> 00:13:24.180
Going back here.

00:13:28.450 --> 00:13:29.970
OK.

00:13:29.970 --> 00:13:32.200
This is the one here on top.

00:13:32.200 --> 00:13:33.620
This file content is not
automatically indexed.

00:13:33.620 --> 00:13:36.790
Google Drive is not going to
index the file content per se,

00:13:36.790 --> 00:13:40.480
but it's going to index the
value that were passed in the

00:13:40.480 --> 00:13:44.440
indexable text field.

00:13:44.440 --> 00:13:50.770
So if I search for test123
again, this is the file here.

00:13:50.770 --> 00:13:52.140
It's showing up in search.

00:13:52.140 --> 00:13:54.680
Again, that's search query
because we've passed it in the

00:13:54.680 --> 00:14:02.600
indexable text data basically
when we uploaded the file.

00:14:02.600 --> 00:14:07.860
Now there is one last use
case when there is no

00:14:07.860 --> 00:14:10.130
content for the file.

00:14:10.130 --> 00:14:11.650
You have uploaded no content
for the file.

00:14:11.650 --> 00:14:12.945
That's actually called shortcut

00:14:12.945 --> 00:14:14.270
files in Google Drive.

00:14:14.270 --> 00:14:16.780
We have the special types
of file which are

00:14:16.780 --> 00:14:17.950
called shortcut files.

00:14:17.950 --> 00:14:20.440
So you don't have to upload
any content when you're

00:14:20.440 --> 00:14:21.830
integrating with Google Drive.

00:14:21.830 --> 00:14:24.910
You could upload only kind
of like a placeholder.

00:14:24.910 --> 00:14:27.010
It looks like a file
to the user.

00:14:27.010 --> 00:14:29.230
It's only a placeholder
in Google Drive.

00:14:29.230 --> 00:14:32.730
You haven't uploaded any actual
binary or any actual

00:14:32.730 --> 00:14:34.070
file content.

00:14:34.070 --> 00:14:35.180
Simply the file metadata.

00:14:35.180 --> 00:14:39.080
So the title, description,
MimeType, et cetera.

00:14:39.080 --> 00:14:46.240
So this is the code here to
upload such shortcut file.

00:14:46.240 --> 00:14:50.130
So typically, applications would
upload shortcut files

00:14:50.130 --> 00:14:52.530
when they want to keep the
data on the server.

00:14:52.530 --> 00:14:57.380
Or let's say they don't have
an actual specific file

00:14:57.380 --> 00:15:04.250
format, or it doesn't make sense
for their data to be

00:15:04.250 --> 00:15:06.040
bundled in a file, or they
don't want to do that.

00:15:06.040 --> 00:15:07.960
They want to keep total
control of the data.

00:15:07.960 --> 00:15:10.070
Keep that in their own database,
but they still want

00:15:10.070 --> 00:15:11.980
a nice integration with
Google Drive.

00:15:11.980 --> 00:15:15.490
So they upload, simply, a
shortcut that when the user is

00:15:15.490 --> 00:15:20.590
going to click, the user is
going to be automatically

00:15:20.590 --> 00:15:24.360
redirected to this application's
website.

00:15:24.360 --> 00:15:27.240
And you can load your data that
you have stored locally

00:15:27.240 --> 00:15:28.170
on your own database.

00:15:28.170 --> 00:15:31.940
So that's the use case here
for that type of file that

00:15:31.940 --> 00:15:34.690
doesn't have any content
on Google Drive.

00:15:34.690 --> 00:15:37.010
Though, in that case, you can
still set the indexable text.

00:15:40.030 --> 00:15:42.090
We really ask you to do this.

00:15:42.090 --> 00:15:46.210
Otherwise, you're going to miss
out on the search feature

00:15:46.210 --> 00:15:47.610
for Google Drive.

00:15:47.610 --> 00:15:50.690
Because we don't have any
content uploaded at all on

00:15:50.690 --> 00:15:53.340
Google Drive, you should really
tell us what's inside

00:15:53.340 --> 00:15:56.720
your document and what we should
index for the search to

00:15:56.720 --> 00:15:58.780
work on that file.

00:15:58.780 --> 00:16:05.850
So here is another code snippet
that I'm going to run.

00:16:05.850 --> 00:16:09.620
OK, I'm uploading my
shortcut file.

00:16:09.620 --> 00:16:13.280
As you can see here, we don't
actually pass any real file to

00:16:13.280 --> 00:16:14.180
be uploaded.

00:16:14.180 --> 00:16:18.450
Only metadata for the file is
uploaded to Google Drive.

00:16:18.450 --> 00:16:21.690
And when I go to Google Drive,
again, let's look at the

00:16:21.690 --> 00:16:23.750
recent file.

00:16:23.750 --> 00:16:24.540
This is it.

00:16:24.540 --> 00:16:28.790
This file has no content, but
we set the indexable text.

00:16:28.790 --> 00:16:33.530
So if I search again for
test123, the file shows up.

00:16:33.530 --> 00:16:37.950
So that was here using
the indexable text

00:16:37.950 --> 00:16:39.270
for shortcut files.

00:16:39.270 --> 00:16:43.710
So again, really, really use
that feature if you're

00:16:43.710 --> 00:16:49.710
uploading binary data or if
you're using shortcut files

00:16:49.710 --> 00:16:50.950
inside Google Drive.

00:16:50.950 --> 00:16:54.020
And for the other use case, in
case your file is actually

00:16:54.020 --> 00:16:55.840
text based--

00:16:55.840 --> 00:16:57.000
let me switch back again.

00:16:57.000 --> 00:16:59.420
Hello again.

00:16:59.420 --> 00:17:02.340
If the format of your file is
actually text based and you're

00:17:02.340 --> 00:17:06.069
uploading, for example, using
XML or JSON again--

00:17:06.069 --> 00:17:07.170
just a reminder--

00:17:07.170 --> 00:17:09.740
you could actually, very simply,
use the other feature,

00:17:09.740 --> 00:17:13.040
which is simply setting a little
Boolean, a little flag

00:17:13.040 --> 00:17:15.880
telling us that it's actually
safe to read the file content.

00:17:15.880 --> 00:17:16.700
It's not binary.

00:17:16.700 --> 00:17:20.280
It's not crap, basically.

00:17:20.280 --> 00:17:21.440
Google Drive can
read the file.

00:17:21.440 --> 00:17:26.329
And it's going to try to read
it as text and index that.

00:17:28.990 --> 00:17:32.020
And, basically, that's it.

00:17:32.020 --> 00:17:35.430
That was Google Drive Search
and how you could

00:17:35.430 --> 00:17:38.700
integrate with this.

00:17:38.700 --> 00:17:44.070
Thanks again for following
along.

00:17:44.070 --> 00:17:48.050
And, again, a warm
hi from Zurich.

00:17:48.050 --> 00:17:51.980
We don't very often do these
live demos here, these

00:17:51.980 --> 00:17:54.250
Hangouts here.

00:17:54.250 --> 00:17:57.360
So hi everybody, and I hope
to see you another time.

00:17:57.360 --> 00:17:58.610
All right, bye-bye.

