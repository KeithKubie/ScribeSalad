WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:02.910
So, there's one other interesting thing we can do with find.

00:00:02.910 --> 00:00:07.124
And going back to the original description of find, we said,

00:00:07.124 --> 00:00:11.210
well, find returns the first position, there might other occurrences. And

00:00:11.210 --> 00:00:14.260
we might want to find those other occurrences. The way to find

00:00:14.260 --> 00:00:16.740
those other occurrences is, we can actually pass in an extra

00:00:16.740 --> 00:00:20.860
parameter. So, instead of just passing in one string, we can

00:00:20.860 --> 00:00:22.560
pass in the second parameter, which is going to be a

00:00:22.560 --> 00:00:26.430
number. Then when we pass in a number what find will output

00:00:26.430 --> 00:00:29.100
is the number of the position in the search

00:00:29.100 --> 00:00:32.970
string, where the target string appears, the first occurrence after

00:00:32.970 --> 00:00:36.410
that position. So, it'll give the first occurrence where

00:00:36.410 --> 00:00:40.110
the target string appears in the search string, but starting

00:00:40.110 --> 00:00:42.890
from whatever position we pass in this number. So,

00:00:42.890 --> 00:00:45.190
if we pass in zero, well, it would start from

00:00:45.190 --> 00:00:47.170
the beginning, that would mean the same thing as

00:00:47.170 --> 00:00:51.550
the original find. If we pass in the position here,

00:00:51.550 --> 00:00:53.710
it would start from there and would still output

00:00:53.710 --> 00:00:57.680
the same value we found before. If we start from

00:00:57.680 --> 00:01:01.260
here, well then, it wouldn't find this occurrence, because this

00:01:01.260 --> 00:01:05.349
occurrence starts after that position, it would find this one.

00:01:08.380 --> 00:01:10.370
So, here's an example. We'll use this quote

00:01:10.370 --> 00:01:14.480
attributed to George Danton during the French Revolution. Translated

00:01:14.480 --> 00:01:18.120
loosely, it means audacity, more audacity, always audacity.

00:01:19.160 --> 00:01:22.420
I should mention that Danton was actually executed, so

00:01:22.420 --> 00:01:23.900
whether you want to follow this advice or

00:01:23.900 --> 00:01:26.660
not depends on how you think things worked out

00:01:26.660 --> 00:01:28.880
for him. But if we do a find

00:01:28.880 --> 00:01:34.060
with danton, passing in audace with no extra parameter,

00:01:34.060 --> 00:01:36.830
we'll get position five which is the position

00:01:36.830 --> 00:01:39.670
where audace starts. The first occurrence of audace

00:01:39.670 --> 00:01:45.410
is found. [NOISE] If we pass in a number as well, well if we pass in zero,

00:01:45.410 --> 00:01:48.030
we'll also get five. That's because starting from

00:01:48.030 --> 00:01:52.290
position zero, we find audace at position five. If

00:01:52.290 --> 00:01:55.920
we pass in the number five, we'll still

00:01:55.920 --> 00:01:59.240
get five as the result, starting from position five,

00:01:59.240 --> 00:02:02.430
we find audace at position five. If we

00:02:02.430 --> 00:02:06.320
pass in a number higher than five, let's pass

00:02:06.320 --> 00:02:09.150
in six, well now find is looking for

00:02:09.150 --> 00:02:11.440
an occurrence starting from position six, which is here.

00:02:12.790 --> 00:02:15.210
Instead of finding the first occurrence of audace,

00:02:15.210 --> 00:02:17.665
it'll find the first one that occurs after position

00:02:17.665 --> 00:02:20.690
six, which is the one here at position 25.

00:02:20.690 --> 00:02:24.480
Let's just print out the string from position six

00:02:24.480 --> 00:02:30.385
to confirm that. So, printing from position six to the end, we see that the

00:02:30.385 --> 00:02:33.990
quote is udace, encore. And so on.

00:02:33.990 --> 00:02:37.380
I'll spare you from my poor French pronunciation,

00:02:37.380 --> 00:02:39.050
and that's why it found audace at

00:02:39.050 --> 00:02:42.030
this location, which is position 25. The result

00:02:42.030 --> 00:02:43.510
always counts from the beginning of the

00:02:43.510 --> 00:02:46.970
original string. Position 25 of the original string,

00:02:49.850 --> 00:02:54.842
which is where it found the second occurrence of audace. So if we pass in 25.

00:02:56.040 --> 00:03:00.850
We'll get 25 as the output, finding the position where this occurrence occurs.

00:03:00.850 --> 00:03:07.720
If we pass in 26, now it will start searching at position 26 which is the u

00:03:07.720 --> 00:03:14.910
here. We'll find at position 47. The final occurrence of audace. So,

00:03:14.910 --> 00:03:17.260
seeing the string from position 47 to the end,

00:03:17.260 --> 00:03:21.950
starting from here, we see that. Now, we're starting

00:03:21.950 --> 00:03:25.570
from position 48, which is this u. We'll get

00:03:25.570 --> 00:03:29.060
as our output, negative one. And that's because, although

00:03:29.060 --> 00:03:32.630
the string occurs many times in the string danton,

00:03:32.630 --> 00:03:35.745
it doesn't occur at all starting from position 48.

00:03:35.745 --> 00:03:37.840
And so, the output of find, when the target

00:03:37.840 --> 00:03:40.240
string is not found in the search string, is negative

00:03:40.240 --> 00:03:43.480
one and that's true if we start from position 48, we

00:03:43.480 --> 00:03:46.240
don't find the target string at all in the search string.

