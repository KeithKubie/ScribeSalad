WEBVTT
Kind: captions
Language: en

00:00:05.420 --> 00:00:07.120
BILL LUAN: Shanghai
GDG is a very

00:00:07.120 --> 00:00:09.420
interesting developer community.

00:00:09.420 --> 00:00:10.040
SUSANNAH RAUB: I'm
glad somebody

00:00:10.040 --> 00:00:11.070
has asked this question.

00:00:11.070 --> 00:00:12.694
RETO MEIER: This is where
the magic happens.

00:00:12.694 --> 00:00:13.820
JENNY MURPHY: This is primarily
a question and

00:00:13.820 --> 00:00:14.270
answer show.

00:00:14.270 --> 00:00:16.680
So if any of you out there would
like to ask questions.

00:00:21.740 --> 00:00:23.800
PETE LEPAGE: Welcome,
everybody.

00:00:23.800 --> 00:00:27.200
This is, I think, our fourth or
fifth in the installment of

00:00:27.200 --> 00:00:29.570
the Chrome Apps Office Hours.

00:00:29.570 --> 00:00:33.170
This week, we have a really cool
event with some special

00:00:33.170 --> 00:00:35.260
guests who are joining us.

00:00:35.260 --> 00:00:39.940
This is the AngularJS team, who
was one of the first teams

00:00:39.940 --> 00:00:44.310
here at Google to build a Chrome
app using, obviously,

00:00:44.310 --> 00:00:46.970
the AngularJS framework.

00:00:46.970 --> 00:00:50.790
And they've learned a lot over
the last couple of months on

00:00:50.790 --> 00:00:53.850
how to build these things, some
of the issues they've run

00:00:53.850 --> 00:00:57.080
into, as well as how to
get around those.

00:00:57.080 --> 00:01:00.810
And really, how to build a
really cool Chrome app.

00:01:00.810 --> 00:01:06.045
So I'd like to introduce
Brad Green and Vojta--

00:01:06.045 --> 00:01:07.590
I forgot your last name.

00:01:07.590 --> 00:01:07.980
I apologize.

00:01:07.980 --> 00:01:08.310
VOJTA JINA: That's OK.

00:01:08.310 --> 00:01:10.544
Vojta, I think that's enough.

00:01:10.544 --> 00:01:11.800
PETE LEPAGE: All right.

00:01:11.800 --> 00:01:14.170
Brad, Vojta, why don't you guys
introduce yourselves.

00:01:14.170 --> 00:01:17.120
And we can talk about
TextDrive, this

00:01:17.120 --> 00:01:17.750
app that you guys--

00:01:17.750 --> 00:01:18.100
BRAD GREEN: Great.

00:01:18.100 --> 00:01:18.620
Great.

00:01:18.620 --> 00:01:19.700
So yeah, I'm Brad Green.

00:01:19.700 --> 00:01:22.120
I manage the AngularJS project
here at Google.

00:01:22.120 --> 00:01:25.530
And Vojta is one of the
engineers on the project.

00:01:25.530 --> 00:01:26.990
And we built this
app, TextDrive.

00:01:26.990 --> 00:01:28.490
It's a simple text editor.

00:01:28.490 --> 00:01:32.140
And it allows you to edit text,
which is actually cooler

00:01:32.140 --> 00:01:34.660
than you think on Chrome.

00:01:34.660 --> 00:01:37.490
Because if you want to edit your
CRX file without having

00:01:37.490 --> 00:01:41.160
to go rebuild the bundle, this
is a really cool thing to do.

00:01:41.160 --> 00:01:43.990
But I think it's a really
good example of

00:01:43.990 --> 00:01:45.200
pulling some pieces together.

00:01:45.200 --> 00:01:47.680
Some of these V2 APIs.

00:01:47.680 --> 00:01:49.600
We're showing you how you can
take really good advantage of

00:01:49.600 --> 00:01:51.630
them with Angular.

00:01:51.630 --> 00:01:53.650
So without talking too much
more, Vojta, why don't you

00:01:53.650 --> 00:01:54.930
take us through the
app itself.

00:01:54.930 --> 00:01:57.310
VOJTA JINA: Oh, sure.

00:01:57.310 --> 00:01:59.190
As we said, it's just
a text editor.

00:01:59.190 --> 00:02:06.010
So you can open files, you
can create new files--

00:02:06.010 --> 00:02:08.310
PETE LEPAGE: Now, I just want to
interject here for one sec.

00:02:08.310 --> 00:02:11.610
You can open files anywhere on
your file system, right?

00:02:11.610 --> 00:02:14.670
This is not just a matter of
hey, you're limited to the

00:02:14.670 --> 00:02:15.090
normal file system.

00:02:15.090 --> 00:02:17.395
No, this is my file system.

00:02:17.395 --> 00:02:19.450
BRAD GREEN: And just to mention,
we're using a MacBook

00:02:19.450 --> 00:02:21.830
here, but this works on
my Chromebook as well.

00:02:21.830 --> 00:02:24.160
PETE LEPAGE: Absolutely, yeah.

00:02:24.160 --> 00:02:24.590
VOJTA JINA: Yeah.

00:02:24.590 --> 00:02:29.270
So I can create new files.

00:02:29.270 --> 00:02:32.370
I think a really cool feature
is the searching.

00:02:32.370 --> 00:02:35.920
So the first thing, you
can just search.

00:02:35.920 --> 00:02:40.240
I can search for ng-click
or something.

00:02:40.240 --> 00:02:45.060
But, more than that, if you
start searching with forward

00:02:45.060 --> 00:02:48.900
slash, it does this like
grip-like filtering.

00:02:48.900 --> 00:02:52.910
So I can say ng-controller,
for instance.

00:02:52.910 --> 00:02:57.600
And you can see how it filters
just the lines that matches

00:02:57.600 --> 00:02:58.435
this regular expression.

00:02:58.435 --> 00:03:00.980
And I can go edit
the text, or--

00:03:00.980 --> 00:03:02.170
BRAD GREEN: So it collapses
all the code.

00:03:02.170 --> 00:03:03.395
VOJTA JINA: Yeah, it just
collapsed it, so I can--

00:03:03.395 --> 00:03:04.645
[INTERPOSING VOICES]

00:03:07.030 --> 00:03:08.940
PETE LEPAGE: And it's
not just text.

00:03:08.940 --> 00:03:11.580
But you've also got some
things in there so that

00:03:11.580 --> 00:03:13.920
editing code becomes that
much easier as well.

00:03:13.920 --> 00:03:14.820
VOJTA JINA: Yes.

00:03:14.820 --> 00:03:18.340
I think the main purpose of this
thing is for editing any

00:03:18.340 --> 00:03:20.020
sort of source code.

00:03:20.020 --> 00:03:21.520
PETE LEPAGE: OK.

00:03:21.520 --> 00:03:22.920
BRAD GREEN: So just a
little bit more of

00:03:22.920 --> 00:03:24.160
how we put this together.

00:03:24.160 --> 00:03:27.850
So we're using the ACE
editor component.

00:03:27.850 --> 00:03:28.520
VOJTA JINA: Which is awesome.

00:03:28.520 --> 00:03:30.220
BRAD GREEN: It is fantastic.

00:03:30.220 --> 00:03:32.010
But that doesn't make
a full app.

00:03:32.010 --> 00:03:34.970
So as the wiring bit, we're
using Angular to pull the

00:03:34.970 --> 00:03:36.480
whole thing together
into an app.

00:03:36.480 --> 00:03:40.590
And then we're using these V2
APIs to be able to access all

00:03:40.590 --> 00:03:42.635
the pieces we need to make
it a real application.

00:03:45.330 --> 00:03:47.960
VOJTA JINA: Maybe the last thing
I could show is there

00:03:47.960 --> 00:03:49.120
are settings, as well.

00:03:49.120 --> 00:03:52.910
So you can change the theme--

00:03:59.050 --> 00:03:59.995
BRAD GREEN: Fantastic.

00:03:59.995 --> 00:04:02.410
If I want to code in the dark.

00:04:02.410 --> 00:04:05.280
VOJTA JINA: All these settings
are synchronized through

00:04:05.280 --> 00:04:06.870
Chrome sync storage.

00:04:06.870 --> 00:04:10.580
PETE LEPAGE: So if I'm logged
into Chrome on one machine,

00:04:10.580 --> 00:04:12.850
and then go to a different
machine and start editing

00:04:12.850 --> 00:04:14.980
files, I get the
same settings--

00:04:14.980 --> 00:04:17.470
VOJTA JINA: Hopefully, you will
get the same settings.

00:04:17.470 --> 00:04:18.560
PETE LEPAGE: Very cool.

00:04:18.560 --> 00:04:20.730
So that was something we talked
about last week with

00:04:20.730 --> 00:04:24.140
the Chrome storage APIs being
able to sync those across

00:04:24.140 --> 00:04:25.390
multiple machines.

00:04:28.120 --> 00:04:31.730
BRAD GREEN: So it's kind
of a basic text editor.

00:04:31.730 --> 00:04:34.120
I think the interesting part is
how this editor works, and

00:04:34.120 --> 00:04:35.990
how we built it, and some of
the lessons we learned.

00:04:35.990 --> 00:04:37.190
VOJTA JINA: Yeah, I think we
learned a lot of stuff, even

00:04:37.190 --> 00:04:38.690
about Angler to about--

00:04:38.690 --> 00:04:39.440
[INTERPOSING VOICES]

00:04:39.440 --> 00:04:40.400
VOJTA JINA: We are developing
Angular.

00:04:40.400 --> 00:04:42.490
But sometimes it's good to
develop something with

00:04:42.490 --> 00:04:43.780
Angular, so that you can see--

00:04:43.780 --> 00:04:44.590
BRAD GREEN: Absolutely.

00:04:44.590 --> 00:04:46.900
VOJTA JINA: I think we learned
a lot of lessons as well.

00:04:46.900 --> 00:04:49.060
BRAD GREEN: So just for the
folks who haven't used Angular

00:04:49.060 --> 00:04:51.330
before, let me just give
a brief overview.

00:04:51.330 --> 00:04:53.670
Angular is a framework for
building web apps.

00:04:53.670 --> 00:04:56.260
And it really helps
you build MVC--

00:04:56.260 --> 00:04:58.650
model-view-controller
style web apps.

00:04:58.650 --> 00:05:01.230
And it does this through
a couple mechanisms.

00:05:01.230 --> 00:05:04.580
And you can check this
out at AngularJS.org.

00:05:04.580 --> 00:05:06.960
We've got a ton of
code examples.

00:05:06.960 --> 00:05:09.400
We support it through something
called data binding,

00:05:09.400 --> 00:05:13.620
where we automatically
synchronize elements in your

00:05:13.620 --> 00:05:17.740
UI, and the state of them, into
your properties in your

00:05:17.740 --> 00:05:20.790
model, into your JavaScript
objects.

00:05:20.790 --> 00:05:23.780
We also have something called
directives, which allow you to

00:05:23.780 --> 00:05:25.360
extend HTML syntax.

00:05:25.360 --> 00:05:28.520
So that instead of having a
whole bunch of divs and spans,

00:05:28.520 --> 00:05:30.170
if you want to build
tabs, you can just

00:05:30.170 --> 00:05:32.600
say tab, angle bracket.

00:05:32.600 --> 00:05:35.670
Or, you can-- if you're not
in an HTML5 browser--

00:05:35.670 --> 00:05:37.850
you can still say, color
picker, angle bracket.

00:05:37.850 --> 00:05:41.250
You can make that work in
any browser on the web.

00:05:41.250 --> 00:05:43.110
And we'll see some of these
features, and how they come

00:05:43.110 --> 00:05:47.450
together to build a really
nice MVC-style app.

00:05:47.450 --> 00:05:50.450
So, Vojta, can you take us
through some of this?

00:05:50.450 --> 00:05:51.850
As a matter of fact, let's
look at the app itself.

00:05:51.850 --> 00:05:55.640
So in MVC, the controllers
usually map to certain

00:05:55.640 --> 00:05:57.040
parts of the UI.

00:05:57.040 --> 00:05:57.660
And Vojta--

00:05:57.660 --> 00:05:59.350
VOJTA JINA: And that's exactly
what it does in Angular.

00:05:59.350 --> 00:06:00.650
BRAD GREEN: That is what
is does in Angular.

00:06:00.650 --> 00:06:03.950
Vojta's cooked this up so that's
we can actually see

00:06:03.950 --> 00:06:06.360
which controllers map to
which parts of the UI.

00:06:06.360 --> 00:06:06.800
VOJTA JINA: Yeah.

00:06:06.800 --> 00:06:09.740
So there is one root
controller,

00:06:09.740 --> 00:06:11.900
which is called App.

00:06:11.900 --> 00:06:15.790
And that's basically responsible
for stuff like--

00:06:15.790 --> 00:06:21.640
it keeps some state, like
the settings, is it

00:06:21.640 --> 00:06:23.360
open or is it closed?

00:06:23.360 --> 00:06:26.530
Is this search dialogue
open, or is it closed?

00:06:26.530 --> 00:06:27.830
And stuff like that.

00:06:27.830 --> 00:06:29.900
So that's App controller.

00:06:29.900 --> 00:06:34.640
Then we have Tabs controller,
which is right over

00:06:34.640 --> 00:06:35.560
there at the top.

00:06:35.560 --> 00:06:39.220
And that is responsible for
these buttons over there, in

00:06:39.220 --> 00:06:42.140
the right top corner, as
well as all the tabs.

00:06:42.140 --> 00:06:46.730
So creating new tab, closing
tab, focusing tabs.

00:06:46.730 --> 00:06:49.870
Basically keeping the state of
which tab is selected, and

00:06:49.870 --> 00:06:51.560
stuff like that.

00:06:51.560 --> 00:06:55.600
Then we have StatusBar
controller, which, again, is

00:06:55.600 --> 00:06:57.690
responsible for some
stuff here.

00:06:57.690 --> 00:07:01.320
So for instance, you can
manually change the file type,

00:07:01.320 --> 00:07:03.420
and stuff like that.

00:07:03.420 --> 00:07:06.750
And last piece is Settings
controller, at the bottom.

00:07:06.750 --> 00:07:10.870
And that's responsible for
changing the settings.

00:07:10.870 --> 00:07:11.670
BRAD GREEN: Great.

00:07:11.670 --> 00:07:13.730
VOJTA JINA: I think that's
pretty much the overview.

00:07:13.730 --> 00:07:17.430
These are the controllers
that we use.

00:07:17.430 --> 00:07:17.560
BRAD GREEN: OK.

00:07:17.560 --> 00:07:18.560
Well, let's look at
some of the code.

00:07:18.560 --> 00:07:23.120
And let's maybe zoom into
the Tabs controller.

00:07:23.120 --> 00:07:25.210
Would you take us through a
little bit of how that works?

00:07:25.210 --> 00:07:26.750
Maybe we'll start
on the template.

00:07:26.750 --> 00:07:27.160
VOJTA JINA: Yeah.

00:07:27.160 --> 00:07:28.870
That's a good idea, actually.

00:07:28.870 --> 00:07:33.960
So this is index.html, which
is basically a template of

00:07:33.960 --> 00:07:34.860
this whole app.

00:07:34.860 --> 00:07:36.810
It's just one template.

00:07:36.810 --> 00:07:40.630
And you can see this header
right over there, which is

00:07:40.630 --> 00:07:43.000
controlled by Tabs controller.

00:07:43.000 --> 00:07:44.960
And the first div--

00:07:44.960 --> 00:07:47.220
that's these buttons
right over there.

00:07:47.220 --> 00:07:52.450
And then we have these tabs,
which are done just by CSS.

00:07:52.450 --> 00:07:55.230
So it's just unordered list.

00:07:55.230 --> 00:07:57.410
BRAD GREEN: This is the template
of one tab, that will

00:07:57.410 --> 00:07:59.360
get expanded into
multiple tabs.

00:07:59.360 --> 00:08:00.390
VOJTA JINA: Exactly.

00:08:00.390 --> 00:08:02.580
You can see, there is
this just one item.

00:08:02.580 --> 00:08:04.950
And that's one tab.

00:08:04.950 --> 00:08:08.620
And this whole code basically
creates one tab.

00:08:08.620 --> 00:08:13.510
And here is when Angular comes
into play, because it says,

00:08:13.510 --> 00:08:17.690
repeat this tab for
every tab in tabs.

00:08:17.690 --> 00:08:18.440
Right?

00:08:18.440 --> 00:08:22.940
So I think we might go to tabs
controller, which is actually

00:08:22.940 --> 00:08:23.770
pretty lightweight.

00:08:23.770 --> 00:08:26.080
And most of the stuff
is in tab service.

00:08:26.080 --> 00:08:28.410
So let me actually go
to tab service.

00:08:28.410 --> 00:08:32.380
And I think we might show people
adding or something.

00:08:32.380 --> 00:08:33.039
BRAD GREEN: Yeah, let's
look at Add.

00:08:33.039 --> 00:08:36.630
I think Add is the interesting
part of tabs.

00:08:36.630 --> 00:08:39.669
VOJTA JINA: So here is
the source code to

00:08:39.669 --> 00:08:41.360
actually add a tab.

00:08:41.360 --> 00:08:44.920
And I think you can see
the magic of two-way

00:08:44.920 --> 00:08:46.150
data binding here.

00:08:46.150 --> 00:08:50.390
Because what we do, we
just create a new

00:08:50.390 --> 00:08:51.940
instance of tab object.

00:08:51.940 --> 00:08:56.670
And then we basically just
push it into an array.

00:08:56.670 --> 00:09:04.150
So tabs itself, if I search
for this, tabs is just the

00:09:04.150 --> 00:09:05.390
JavaScript array.

00:09:05.390 --> 00:09:06.670
Nothing special.

00:09:06.670 --> 00:09:10.530
So for me, in order to create
a new tab, I just push a new

00:09:10.530 --> 00:09:12.140
tab into this array.

00:09:12.140 --> 00:09:14.720
And this two-way data binding
automatically will synchronize

00:09:14.720 --> 00:09:18.730
it, so that if I create
a new tab--

00:09:18.730 --> 00:09:20.470
BRAD GREEN: Because we have it
bound to the UI, it knows

00:09:20.470 --> 00:09:23.720
that, for every item in the
array, I will create this tab

00:09:23.720 --> 00:09:25.390
template that you showed off.

00:09:25.390 --> 00:09:27.390
PETE LEPAGE: I think one of the
things that I've really

00:09:27.390 --> 00:09:30.800
liked when I've played with
Angular is that there's no

00:09:30.800 --> 00:09:35.310
really funky data set up or
anything that I need to do.

00:09:35.310 --> 00:09:37.810
Those are just an array--

00:09:37.810 --> 00:09:38.090
VOJTA JINA: Exactly.

00:09:38.090 --> 00:09:39.130
PETE LEPAGE: --of
strings, right?

00:09:39.130 --> 00:09:39.640
BRAD GREEN: That's right.

00:09:39.640 --> 00:09:40.280
PETE LEPAGE: That I can
just say, hey--

00:09:40.280 --> 00:09:41.420
VOJTA JINA: Just needed
the array.

00:09:41.420 --> 00:09:42.210
PETE LEPAGE: There you go.

00:09:42.210 --> 00:09:42.280
Great.

00:09:42.280 --> 00:09:42.350
Done.

00:09:42.350 --> 00:09:44.230
VOJTA JINA: Which makes it
really easy to work, for

00:09:44.230 --> 00:09:46.460
instance, with some
third-party code.

00:09:46.460 --> 00:09:49.590
You don't have to wrap it
with some custom stuff.

00:09:49.590 --> 00:09:51.940
PETE LEPAGE: And it makes it
easier, at some point, to

00:09:51.940 --> 00:09:53.170
serialize it out, as well.

00:09:53.170 --> 00:09:56.210
Because I don't have all this
crazy stuff that's in there.

00:09:56.210 --> 00:09:56.790
BRAD GREEN: For sure.

00:09:56.790 --> 00:09:57.980
Yeah.

00:09:57.980 --> 00:10:04.040
All right so do you want to take
a look at how we maximize

00:10:04.040 --> 00:10:04.610
the window?

00:10:04.610 --> 00:10:05.375
Do you want to see that?

00:10:05.375 --> 00:10:06.400
VOJTA JINA: Yeah, sure.

00:10:06.400 --> 00:10:09.130
So that's an Tabs controller
as well.

00:10:09.130 --> 00:10:10.430
BRAD GREEN: Let's describe
what you're doing here.

00:10:10.430 --> 00:10:10.870
PETE LEPAGE: Yes.

00:10:10.870 --> 00:10:14.390
Because the maximize window is
part of the windowing API,

00:10:14.390 --> 00:10:16.380
which means that we've got
the ability to be able to

00:10:16.380 --> 00:10:19.830
completely change the window and
size, minimize, maximize.

00:10:19.830 --> 00:10:20.445
VOJTA JINA: I can show you--

00:10:20.445 --> 00:10:22.780
PETE LEPAGE: Stuff we can't do
with normal web apps today.

00:10:22.780 --> 00:10:23.170
BRAD GREEN: That's right.

00:10:23.170 --> 00:10:26.560
PETE LEPAGE: But we expect to
be able to do with apps that

00:10:26.560 --> 00:10:28.055
are installed on our machine.

00:10:30.560 --> 00:10:35.950
VOJTA JINA: So this controller
just calls something.

00:10:35.950 --> 00:10:37.940
We call it Service.

00:10:37.940 --> 00:10:40.530
And we have App Windows
service.

00:10:40.530 --> 00:10:43.320
Let me actually show you this.

00:10:43.320 --> 00:10:46.110
So this service is really
lightweight.

00:10:46.110 --> 00:10:49.750
It's just a tiny wrapper
around this Chrome API.

00:10:49.750 --> 00:10:54.940
And I think that was one of the
lessons that I learned.

00:10:54.940 --> 00:10:59.330
The reason for doing this tiny
wrapper, which is basically

00:10:59.330 --> 00:11:02.810
almost empty service, I
think there are two

00:11:02.810 --> 00:11:04.230
advantages of that.

00:11:04.230 --> 00:11:10.480
First thing is whenever this API
changes, you have single

00:11:10.480 --> 00:11:11.870
place, where to change it.

00:11:11.870 --> 00:11:12.970
And for instance, this API--

00:11:12.970 --> 00:11:14.990
BRAD GREEN: The importance
of using API.

00:11:14.990 --> 00:11:17.420
VOJTA JINA: This API has changed
at least four times.

00:11:17.420 --> 00:11:19.350
And then it's easy to
change it, because

00:11:19.350 --> 00:11:20.580
there's just one place.

00:11:20.580 --> 00:11:22.190
And you change this
single place.

00:11:22.190 --> 00:11:24.620
And the rest of the
app doesn't care.

00:11:24.620 --> 00:11:25.740
So that's the first thing.

00:11:25.740 --> 00:11:29.370
And then the second thing
is testability.

00:11:29.370 --> 00:11:32.470
Because most of those things,
like Windows close.

00:11:32.470 --> 00:11:33.945
You don't want to do
that in unit test.

00:11:33.945 --> 00:11:36.860
You don't want to close the
window doing unit testing.

00:11:36.860 --> 00:11:40.040
So once you have this tiny
wrapper, you can just easily

00:11:40.040 --> 00:11:42.430
inject different versions
during unit testing.

00:11:42.430 --> 00:11:46.890
For instance, empty function,
or some Jasmine spy.

00:11:46.890 --> 00:11:49.390
So that you can assert whether
it was code or not.

00:11:49.390 --> 00:11:50.520
But that's pretty much it.

00:11:50.520 --> 00:11:52.390
It doesn't do anything.

00:11:52.390 --> 00:11:55.680
So that's the reason for this
tiny wrapper, which is

00:11:55.680 --> 00:11:58.530
something that you can
see multiple times

00:11:58.530 --> 00:12:00.000
in this source code.

00:12:00.000 --> 00:12:02.800
PETE LEPAGE: Now you guys
saw those change a lot.

00:12:02.800 --> 00:12:07.250
At this point, we kind of expect
and hope that we're not

00:12:07.250 --> 00:12:10.240
going to see a lot more changes
to the Window API.

00:12:10.240 --> 00:12:12.750
Because we are at a point
where things are really

00:12:12.750 --> 00:12:17.230
starting to become more stable,
the breaking changes

00:12:17.230 --> 00:12:20.250
really are fewer and much
further between.

00:12:20.250 --> 00:12:23.630
You guys started on this
two months ago?

00:12:23.630 --> 00:12:26.140
VOJTA JINA: This editor was
done couple weeks before

00:12:26.140 --> 00:12:30.150
Google I/O. We did that for
Google I/O. So that was a time

00:12:30.150 --> 00:12:32.420
when there were many changes.

00:12:32.420 --> 00:12:32.830
BRAD GREEN: This is true.

00:12:32.830 --> 00:12:37.300
And although this API will not
be changing, I think this

00:12:37.300 --> 00:12:38.390
lesson still applies.

00:12:38.390 --> 00:12:40.610
Because for me to be able to
change my code, and if I want

00:12:40.610 --> 00:12:45.550
to reorganize my code, using
Angular's dependency injection

00:12:45.550 --> 00:12:48.140
allows to just have a really
good, flexible code--

00:12:48.140 --> 00:12:48.430
VOJTA JINA: Exactly.

00:12:48.430 --> 00:12:49.530
BRAD GREEN: --no matter
what I want to do.

00:12:49.530 --> 00:12:51.870
PETE LEPAGE: I think that's
really good point.

00:12:51.870 --> 00:12:53.150
VOJTA JINA: Yeah.

00:12:53.150 --> 00:12:57.280
For me, that was really the
point where I realized, oh,

00:12:57.280 --> 00:12:58.680
this dependency injection
style.

00:12:58.680 --> 00:12:59.860
That's really amazing.

00:12:59.860 --> 00:13:06.870
Because you design something
one day, and it works well.

00:13:06.870 --> 00:13:09.510
But then the other day, it's
completely broken because some

00:13:09.510 --> 00:13:10.340
API changed.

00:13:10.340 --> 00:13:11.270
So you fix it.

00:13:11.270 --> 00:13:12.580
And guess what?

00:13:12.580 --> 00:13:14.650
The other day, it's
broken again.

00:13:14.650 --> 00:13:15.680
BRAD GREEN: And it may
not be an API.

00:13:15.680 --> 00:13:17.010
It may be other developers
you're working with.

00:13:17.010 --> 00:13:18.460
VOJTA JINA: Sure.

00:13:18.460 --> 00:13:21.400
It's the same if you're working
on a product for a

00:13:21.400 --> 00:13:23.960
customer and the requirements
keep changing.

00:13:23.960 --> 00:13:25.620
That's completely the same.

00:13:25.620 --> 00:13:29.250
And so suddenly, the
architecture of the original

00:13:29.250 --> 00:13:32.160
design is not that
great as it was.

00:13:32.160 --> 00:13:37.370
And I really believe that the
only way to manage and to keep

00:13:37.370 --> 00:13:40.810
the code nice and clean, is
just to keep refactoring.

00:13:40.810 --> 00:13:43.540
And the point is that, once
you have this dependency

00:13:43.540 --> 00:13:46.660
injection that wires all these
pieces together automatically,

00:13:46.660 --> 00:13:48.350
it is super easy to refactor.

00:13:48.350 --> 00:13:49.450
So you do it.

00:13:49.450 --> 00:13:51.115
If it's difficult,
you don't do it.

00:13:53.800 --> 00:13:56.160
BRAD GREEN: Let's move on to
the Settings controller.

00:13:56.160 --> 00:13:59.980
The settings where we keep track
of all your preferences

00:13:59.980 --> 00:14:02.800
and where we synchronize them
across all your devices.

00:14:02.800 --> 00:14:04.700
PETE LEPAGE: Before we jump
there, I just want to make one

00:14:04.700 --> 00:14:06.820
quick comment to the folks
who are watching.

00:14:06.820 --> 00:14:10.060
If you have questions for these
guys as we're going, or

00:14:10.060 --> 00:14:13.200
as we're working through some of
these examples and showing

00:14:13.200 --> 00:14:15.470
you this stuff, be sure to post
your questions to the

00:14:15.470 --> 00:14:16.950
Google Developers Live page.

00:14:16.950 --> 00:14:20.870
You can go to
developers.google.com/live,

00:14:20.870 --> 00:14:23.930
and click on the Live link, and
post your questions on the

00:14:23.930 --> 00:14:27.140
moderator queue just
down below.

00:14:27.140 --> 00:14:28.300
Because we want to
take your live

00:14:28.300 --> 00:14:29.980
questions as we go through.

00:14:29.980 --> 00:14:30.650
So please, post your
questions.

00:14:30.650 --> 00:14:32.670
VOJTA JINA: I think that's
what this is about.

00:14:32.670 --> 00:14:34.960
PETE LEPAGE: Absolutely.

00:14:34.960 --> 00:14:35.310
VOJTA JINA: All right.

00:14:35.310 --> 00:14:36.580
So settings.

00:14:36.580 --> 00:14:38.910
BRAD GREEN: So yeah, let's
look at the Settings

00:14:38.910 --> 00:14:40.080
controller.

00:14:40.080 --> 00:14:41.490
Is that what we have up?

00:14:41.490 --> 00:14:41.650
VOJTA JINA: Yeah.

00:14:41.650 --> 00:14:43.250
Sure.

00:14:43.250 --> 00:14:46.240
Again, this controller
is almost empty.

00:14:46.240 --> 00:14:49.600
I think that's another lesson
that I learned during

00:14:49.600 --> 00:14:50.980
building this app.

00:14:50.980 --> 00:14:55.990
Which is, regarding to Angular,
that I think it's

00:14:55.990 --> 00:14:59.800
good to keep the controllers
really lightweight, because

00:14:59.800 --> 00:15:03.130
then it's way easier to
move things around.

00:15:03.130 --> 00:15:07.790
So for instance, I remember
moving this Search dialogue.

00:15:07.790 --> 00:15:12.500
And at that time, I had it
inside controller [INAUDIBLE].

00:15:12.500 --> 00:15:15.070
And it was kind of difficult
to move it to a different

00:15:15.070 --> 00:15:16.380
place on the page.

00:15:16.380 --> 00:15:19.530
Because everything that is
inside the controller is tied

00:15:19.530 --> 00:15:23.510
to the position of the app,
because the controller has a

00:15:23.510 --> 00:15:25.140
specific position.

00:15:25.140 --> 00:15:29.410
So my lesson was, put more
stuff into services.

00:15:32.440 --> 00:15:35.460
Most of the controllers are
just publishing stuff into

00:15:35.460 --> 00:15:38.476
scope, so they are accessible
from templates.

00:15:38.476 --> 00:15:40.370
BRAD GREEN: Fantastic.

00:15:40.370 --> 00:15:42.260
So walk us through how
this works, though.

00:15:42.260 --> 00:15:42.610
VOJTA JINA: All right.

00:15:42.610 --> 00:15:44.710
BRAD GREEN: Into the
service itself.

00:15:44.710 --> 00:15:46.120
VOJTA JINA: So Settings.

00:15:46.120 --> 00:15:49.530
Let's open the Settings
service as well.

00:15:53.050 --> 00:15:54.630
PETE LEPAGE: And as you're
opening that up, one of the

00:15:54.630 --> 00:15:58.420
other things I'll comment on,
all of this code is available

00:15:58.420 --> 00:15:59.470
on GitHub today.

00:15:59.470 --> 00:16:03.240
So you can go to the GitHub
URL, which we can, in a

00:16:03.240 --> 00:16:04.300
minute, put on screen.

00:16:04.300 --> 00:16:06.140
But you can go to GitHub.

00:16:06.140 --> 00:16:07.810
You can pull this code down.

00:16:07.810 --> 00:16:09.800
And you can play with
this code yourself.

00:16:09.800 --> 00:16:12.270
You can go look in and see
how everything works.

00:16:12.270 --> 00:16:17.050
You can try seeing how all of
these different services work.

00:16:17.050 --> 00:16:19.020
If you want to try and move
something from one place to

00:16:19.020 --> 00:16:20.430
another, and see what you
were just talking

00:16:20.430 --> 00:16:22.010
about, you can do that.

00:16:22.010 --> 00:16:25.160
So all this code is available
for you to go play with.

00:16:25.160 --> 00:16:27.210
It will work on Chrome today.

00:16:30.150 --> 00:16:30.530
VOJTA JINA: All right.

00:16:30.530 --> 00:16:32.720
So the Setting service.

00:16:32.720 --> 00:16:36.350
That's the source of
the [INAUDIBLE]

00:16:36.350 --> 00:16:39.200
that keeps all the states
about your settings.

00:16:39.200 --> 00:16:41.455
And there's a bunch of other
components that communicates

00:16:41.455 --> 00:16:42.620
with the service.

00:16:42.620 --> 00:16:45.530
So first thing is the view.

00:16:45.530 --> 00:16:49.450
That's the part at the
bottom, like here.

00:16:49.450 --> 00:16:52.460
And the communication between
the view and the Setting

00:16:52.460 --> 00:16:55.340
service is down through
Angular data binding.

00:16:55.340 --> 00:16:59.310
So again, whenever a user
changes anything-- like

00:16:59.310 --> 00:17:00.770
whenever I change the select--

00:17:00.770 --> 00:17:03.320
it immediately changes
the model.

00:17:03.320 --> 00:17:05.579
That's Angular business.

00:17:05.579 --> 00:17:06.359
BRAD GREEN: We say model.

00:17:06.359 --> 00:17:08.680
These are just variables
in your app.

00:17:08.680 --> 00:17:09.160
Just properties--

00:17:09.160 --> 00:17:12.710
VOJTA JINA: Just objects,
properties.

00:17:12.710 --> 00:17:17.210
Another thing that is in the
game is the ACE editor itself.

00:17:17.210 --> 00:17:21.010
Because as you can see, most of
these settings are actually

00:17:21.010 --> 00:17:24.200
related to ACE editor.

00:17:24.200 --> 00:17:26.230
And ACE editor has getters
and setters.

00:17:26.230 --> 00:17:29.640
So there is a tiny wrapper
around ACE editor which

00:17:29.640 --> 00:17:34.860
translates changes to this
settings model, and calls

00:17:34.860 --> 00:17:37.950
proper settings, getters and
setters from ACE editor.

00:17:37.950 --> 00:17:40.860
So for instance, if I change
the theme, it will call ACE

00:17:40.860 --> 00:17:44.020
editor set theme to something.

00:17:44.020 --> 00:17:47.140
And the last piece
is the storage.

00:17:47.140 --> 00:17:50.440
Because as we mentioned at the
beginning, all these settings

00:17:50.440 --> 00:17:54.600
are synchronized, of course,
across all the devices.

00:17:54.600 --> 00:18:01.085
So at the bootstrap, the
settings loads all the data,

00:18:01.085 --> 00:18:05.330
all the settings from Chrome
storage, Chrome storage sync.

00:18:05.330 --> 00:18:09.260
And when you close the
app, it saves the

00:18:09.260 --> 00:18:11.390
settings back to the storage.

00:18:11.390 --> 00:18:12.060
PETE LEPAGE: OK.

00:18:12.060 --> 00:18:15.380
Now are you listening for
events that may happen?

00:18:15.380 --> 00:18:19.750
So if I'm on two computers, and
I make a change on one,

00:18:19.750 --> 00:18:23.870
Chrome fires an event
that says, hey, this

00:18:23.870 --> 00:18:25.000
data has been updated.

00:18:25.000 --> 00:18:26.480
Are you guys listening
for that today?

00:18:26.480 --> 00:18:26.880
VOJTA JINA: No.

00:18:26.880 --> 00:18:27.680
We don't.

00:18:27.680 --> 00:18:31.850
But you are welcome to send
us a pull request.

00:18:31.850 --> 00:18:33.310
PETE LEPAGE: So that's
one of the other cool

00:18:33.310 --> 00:18:33.900
things you can do.

00:18:33.900 --> 00:18:35.260
And we talked about
this last week.

00:18:35.260 --> 00:18:38.560
That you can say, hey, I want
to go listen for events.

00:18:38.560 --> 00:18:42.700
So that if you go update it on
one computer, you get that

00:18:42.700 --> 00:18:45.620
live update on the
second computer.

00:18:45.620 --> 00:18:47.080
VOJTA JINA: You could do that.

00:18:47.080 --> 00:18:49.070
We did not, but you could.

00:18:49.070 --> 00:18:51.700
PETE LEPAGE: And config settings
for an editor, you're

00:18:51.700 --> 00:18:54.160
usually not editing
on two computers.

00:18:54.160 --> 00:18:54.320
BRAD GREEN: Unlikely.

00:18:54.320 --> 00:18:55.870
But I think it would
be a cool demo.

00:18:55.870 --> 00:18:58.380
It would be a great
part of TextDrive.

00:18:58.380 --> 00:19:01.100
And like you say, this
is on GitHub.

00:19:01.100 --> 00:19:02.970
We'd like to see everybody
add to it.

00:19:02.970 --> 00:19:05.460
How cool is it that there's
a text editor that

00:19:05.460 --> 00:19:06.550
anybody can play with?

00:19:06.550 --> 00:19:08.390
You can add to your favorite
feature to it.

00:19:08.390 --> 00:19:08.840
PETE LEPAGE: Yeah.

00:19:08.840 --> 00:19:10.392
That's pretty neat.

00:19:10.392 --> 00:19:13.820
VOJTA JINA: So I think we
might actually show the

00:19:13.820 --> 00:19:15.120
dependency injection.

00:19:15.120 --> 00:19:16.510
At least a little
bit display--

00:19:16.510 --> 00:19:17.380
BRAD GREEN: Yeah,
we were talking

00:19:17.380 --> 00:19:18.400
about dependency injection.

00:19:18.400 --> 00:19:20.800
Maybe let's dive just a
little deeper into it.

00:19:20.800 --> 00:19:23.750
VOJTA JINA: Because what
dependency injection does,

00:19:23.750 --> 00:19:26.910
even this is a simple app.

00:19:26.910 --> 00:19:29.530
The hard work is done
by ACE editor.

00:19:29.530 --> 00:19:29.875
BRAD GREEN: For sure.

00:19:29.875 --> 00:19:32.090
VOJTA JINA: Let's be honest.

00:19:32.090 --> 00:19:37.950
And still, we have about 12
services and four controllers.

00:19:37.950 --> 00:19:41.270
The so that's a lot of
components playing together.

00:19:41.270 --> 00:19:44.510
And then, you need to wire all
these components together to

00:19:44.510 --> 00:19:47.010
actually get your app.

00:19:47.010 --> 00:19:49.860
And that's exactly what
dependency injection does.

00:19:49.860 --> 00:19:54.060
So if you look into this
concrete example.

00:19:54.060 --> 00:19:56.580
So let's look into Settings
controller.

00:19:56.580 --> 00:20:00.550
So when Angular sees Settings
controller, which is at the

00:20:00.550 --> 00:20:03.560
bottom of the page, it says, ah,
I need to instantiate this

00:20:03.560 --> 00:20:04.380
controller.

00:20:04.380 --> 00:20:06.500
So here is the constructor.

00:20:06.500 --> 00:20:10.110
And it first looks into the
constructor arguments, and it

00:20:10.110 --> 00:20:13.350
sees, ah, I need Settings
service first.

00:20:13.350 --> 00:20:16.295
So it goes to instantiate
Setting service first.

00:20:16.295 --> 00:20:17.772
BRAD GREEN: And it knows this
by the name "Settings." And

00:20:17.772 --> 00:20:21.220
you're going to show us how
we've told Angular, that when

00:20:21.220 --> 00:20:25.520
you see Settings, create
the service first.

00:20:25.520 --> 00:20:29.790
VOJTA JINA: So the dependency
injection, or Angular, goes to

00:20:29.790 --> 00:20:32.210
settings, construct,
and see, OK.

00:20:32.210 --> 00:20:35.410
But in order to instantiate
Settings service, I need to

00:20:35.410 --> 00:20:38.200
create storage first, and
et cetera and et cetera.

00:20:38.200 --> 00:20:43.390
So this is the way dependency
injection resolves all the

00:20:43.390 --> 00:20:46.590
dependencies doing runtime.

00:20:46.590 --> 00:20:48.110
And you don't have to
worry about it.

00:20:48.110 --> 00:20:51.930
Every component just declares,
defines, its

00:20:51.930 --> 00:20:54.060
dependencies, and that's it.

00:20:54.060 --> 00:20:57.350
And this makes it super
easy to refactor code.

00:20:57.350 --> 00:21:01.090
Because anything like adding
new stuff, like adding new

00:21:01.090 --> 00:21:04.650
service, like maybe adding new
features, or even extracting

00:21:04.650 --> 00:21:08.430
stuff from existing service
into new service--

00:21:08.430 --> 00:21:09.240
refactoring--

00:21:09.240 --> 00:21:10.650
it's super easy.

00:21:10.650 --> 00:21:12.760
BRAD GREEN: And it makes your
code very short, too.

00:21:12.760 --> 00:21:15.790
Because normally, in your code,
either you've got this

00:21:15.790 --> 00:21:18.780
big, main method, where you're
kind of wiring stuff together,

00:21:18.780 --> 00:21:20.550
where you create something that
it needs something else,

00:21:20.550 --> 00:21:22.344
or you create that, or you
ask for it, or you

00:21:22.344 --> 00:21:23.740
have to locate it.

00:21:23.740 --> 00:21:25.540
And here, you just ask
for these things.

00:21:25.540 --> 00:21:29.020
And they get automatically
passed to your function.

00:21:29.020 --> 00:21:33.770
VOJTA JINA: I think it really
enables you to do refactoring

00:21:33.770 --> 00:21:35.870
so you actually do it.

00:21:35.870 --> 00:21:36.690
Because it's easy.

00:21:36.690 --> 00:21:39.660
So why not?

00:21:39.660 --> 00:21:41.440
PETE LEPAGE: All right.

00:21:41.440 --> 00:21:43.700
So let's maybe let's review
some of the APIs

00:21:43.700 --> 00:21:45.510
that we used for this.

00:21:45.510 --> 00:21:49.790
Do you want to take us
through some of that?

00:21:49.790 --> 00:21:53.000
VOJTA JINA: I think the most
important API that we used was

00:21:53.000 --> 00:21:55.490
a file system API.

00:21:55.490 --> 00:21:59.290
So basically, reading all the
files, and writing to files,

00:21:59.290 --> 00:22:02.010
is done through
chrome.fileSystem.

00:22:02.010 --> 00:22:05.170
I think we can send links
to docs afterwards.

00:22:05.170 --> 00:22:05.410
BRAD GREEN: Yeah.

00:22:05.410 --> 00:22:06.920
So we've got the links
to the docs.

00:22:06.920 --> 00:22:09.460
But one of the things that's, I
think, interesting about the

00:22:09.460 --> 00:22:13.350
Chrome File System APIs that's
different from the HTML5 File

00:22:13.350 --> 00:22:17.050
System APIs, is that it allows
you to open files anywhere on

00:22:17.050 --> 00:22:17.830
your computer, right?

00:22:17.830 --> 00:22:21.640
So that I can go edit that
document that's sitting in My

00:22:21.640 --> 00:22:24.720
Documents folder, or
something else.

00:22:24.720 --> 00:22:27.380
I'm not limited that
specific set.

00:22:27.380 --> 00:22:27.810
VOJTA JINA: Exactly.

00:22:27.810 --> 00:22:30.820
PETE LEPAGE: I can also save
anywhere across my computer.

00:22:30.820 --> 00:22:33.880
So if I want to save it to the
My Documents folder, or--

00:22:33.880 --> 00:22:37.010
VOJTA JINA: And there are
still a lot of security

00:22:37.010 --> 00:22:37.720
restrictions.

00:22:37.720 --> 00:22:41.420
So it should be secure for
the user at first.

00:22:41.420 --> 00:22:42.330
PETE LEPAGE: Right.

00:22:42.330 --> 00:22:45.390
It's not going to let me just
go randomly open a file and

00:22:45.390 --> 00:22:47.120
not tell the user.

00:22:47.120 --> 00:22:49.970
VOJTA JINA: So for instance, at
this point TextDrive can't

00:22:49.970 --> 00:22:56.280
re-open previously opened files,
because there is no way

00:22:56.280 --> 00:23:00.370
to open files without actually
bringing up the pop-up.

00:23:00.370 --> 00:23:04.210
So the user has to explicitly
say, yes, I'm fine if

00:23:04.210 --> 00:23:05.470
you open this file.

00:23:05.470 --> 00:23:06.715
And you have writing
permissions

00:23:06.715 --> 00:23:08.100
to the file as well.

00:23:08.100 --> 00:23:11.840
So File System is definitely
the most important.

00:23:11.840 --> 00:23:15.280
Then we use the Chrome
Storage.

00:23:15.280 --> 00:23:18.770
We are using Chrome Storage Sync
so that it's synchronized

00:23:18.770 --> 00:23:19.960
in between devices.

00:23:19.960 --> 00:23:23.740
Again, the cool thing is that
you have just the storage that

00:23:23.740 --> 00:23:25.540
you write to and read from.

00:23:25.540 --> 00:23:29.355
And it's synchronized
across the devices.

00:23:29.355 --> 00:23:30.835
You don't worry about that.

00:23:36.625 --> 00:23:37.410
BRAD GREEN: There's one more.

00:23:37.410 --> 00:23:38.870
So you want to talk
a little bit about

00:23:38.870 --> 00:23:40.450
Content Security Policy--

00:23:40.450 --> 00:23:42.310
CSP?

00:23:42.310 --> 00:23:43.340
VOJTA JINA: Sure.

00:23:43.340 --> 00:23:46.010
BRAD GREEN: So the
Chrome apps.

00:23:46.010 --> 00:23:47.300
We want them to run.

00:23:47.300 --> 00:23:49.800
And users want to know that
they're not going to do

00:23:49.800 --> 00:23:52.490
nefarious things to
their machine.

00:23:52.490 --> 00:23:55.410
And so we need to comply with
the Content Security Policy.

00:23:55.410 --> 00:23:58.160
And Angular will implement
this for you.

00:23:58.160 --> 00:24:02.120
It'll set Angular into
a CSP-compliant mode.

00:24:02.120 --> 00:24:04.530
On Chrome, we can actually
auto-detect this.

00:24:04.530 --> 00:24:06.690
There's nothing for you to do.

00:24:06.690 --> 00:24:09.260
On other platforms, we've
got a tag you can use.

00:24:09.260 --> 00:24:12.050
VOJTA JINA: There's a directive
that you put onto

00:24:12.050 --> 00:24:14.060
body, or an HTML tag.

00:24:14.060 --> 00:24:16.910
You put NG-CSP.

00:24:16.910 --> 00:24:19.670
And that would enable CSP.

00:24:19.670 --> 00:24:22.460
Angular itself is pretty
fine with that.

00:24:22.460 --> 00:24:26.600
There is just one thing
that we do.

00:24:26.600 --> 00:24:29.180
When we instantiate a new
function, which is something

00:24:29.180 --> 00:24:34.546
that is not secure, so you're
not allowed to do that.

00:24:34.546 --> 00:24:36.320
Sorry.

00:24:36.320 --> 00:24:36.540
BRAD GREEN: Good.

00:24:36.540 --> 00:24:37.410
Good, good, good.

00:24:37.410 --> 00:24:37.940
PETE LEPAGE: Yeah.

00:24:37.940 --> 00:24:40.550
So that's actually a change
recently in Angular.

00:24:40.550 --> 00:24:45.140
Because it used to be that, if
I wanted Angular to go into

00:24:45.140 --> 00:24:50.450
it's CSP safe mode, I had to go
and put that into my head,

00:24:50.450 --> 00:24:54.140
or into my body, off the
bat, every single time.

00:24:54.140 --> 00:24:56.210
But now, I don't have
to do that.

00:24:56.210 --> 00:24:59.100
So it makes my development
a lot easier.

00:24:59.100 --> 00:25:00.110
BRAD GREEN: Well, we worked
together I this.

00:25:00.110 --> 00:25:01.160
PETE LEPAGE: Absolutely

00:25:01.160 --> 00:25:02.200
BRAD GREEN: This was something
we explored

00:25:02.200 --> 00:25:03.330
together, which was great.

00:25:03.330 --> 00:25:05.440
PETE LEPAGE: This has been a
really great learning project

00:25:05.440 --> 00:25:08.930
for all of us, because we've
been able to really go, oh,

00:25:08.930 --> 00:25:10.270
building a real app?

00:25:10.270 --> 00:25:13.380
Here's a problem that
we've run into,

00:25:13.380 --> 00:25:16.000
and a concrete example.

00:25:16.000 --> 00:25:17.120
How do we fix this?

00:25:17.120 --> 00:25:19.340
We found one, earlier
today, where we were

00:25:19.340 --> 00:25:21.720
talking about zooming.

00:25:21.720 --> 00:25:25.430
On Chrome, you can do controls
shift plus, and zoom in.

00:25:25.430 --> 00:25:28.410
But if you're running a Chrome
app, controls shift plus

00:25:28.410 --> 00:25:30.220
doesn't zoom in on
the Chrome app.

00:25:30.220 --> 00:25:34.530
So as we are starting to do
these demos, we went, oh.

00:25:34.530 --> 00:25:35.420
Oh.

00:25:35.420 --> 00:25:36.320
OK.

00:25:36.320 --> 00:25:38.230
Well, we're going to go
file a bug on that.

00:25:38.230 --> 00:25:43.900
So after our office hours
today, go have a peek.

00:25:43.900 --> 00:25:46.690
You'll probably see a bug in
there, filed by one of us, to

00:25:46.690 --> 00:25:49.290
say, we need to be able
to support zooming

00:25:49.290 --> 00:25:50.320
on our Chrome apps.

00:25:50.320 --> 00:25:51.430
VOJTA JINA: Yes.

00:25:51.430 --> 00:25:52.966
BRAD GREEN: Yes, for sure.

00:25:52.966 --> 00:25:55.400
Well, fantastic.

00:25:55.400 --> 00:25:58.080
So we've got URLs.

00:25:58.080 --> 00:26:01.510
AngularJS is just at
angularjs.org.

00:26:01.510 --> 00:26:04.480
For the V2 APIs--

00:26:04.480 --> 00:26:06.600
we have a URL for that.

00:26:06.600 --> 00:26:08.770
We can toss that up in a sec.

00:26:08.770 --> 00:26:11.988
But you can also get to that
always by going to

00:26:11.988 --> 00:26:17.120
developes.chrome.com, and
clicking on the Chrome apps

00:26:17.120 --> 00:26:18.030
link there.

00:26:18.030 --> 00:26:22.140
You can get to all of
the documentation

00:26:22.140 --> 00:26:24.160
for the special APIs.

00:26:24.160 --> 00:26:26.170
You can get to the documentation
for just

00:26:26.170 --> 00:26:27.800
generally the Hello World.

00:26:27.800 --> 00:26:31.000
And you can also get to all of
the samples that we have.

00:26:31.000 --> 00:26:34.370
So beyond the TextDrive app that
you guys have, we have an

00:26:34.370 --> 00:26:39.240
entire GitHub repo, where we
have probably about two dozen

00:26:39.240 --> 00:26:41.420
different Chrome apps.

00:26:41.420 --> 00:26:45.540
If you had a look at our Google+
developer page last

00:26:45.540 --> 00:26:51.390
week, we showed controlling
an AR Parrot Drone using a

00:26:51.390 --> 00:26:56.370
gamepad controller through
a Chrome app.

00:26:56.370 --> 00:26:58.360
We filmed some more footage
of it last night.

00:26:58.360 --> 00:27:00.200
I tried to get the
video together.

00:27:00.200 --> 00:27:01.270
And I didn't get it.

00:27:01.270 --> 00:27:05.190
But keep an eye on the
Chrome developers

00:27:05.190 --> 00:27:06.860
page today or tomorrow.

00:27:06.860 --> 00:27:08.380
And we'll get that up.

00:27:08.380 --> 00:27:14.290
It's pretty cool to be able to
control a helicopter through a

00:27:14.290 --> 00:27:17.760
Chrome app using a gamepad
controller.

00:27:17.760 --> 00:27:20.070
We're just going completely
out of the box.

00:27:20.070 --> 00:27:23.310
We want to make it possible
for developers to write

00:27:23.310 --> 00:27:27.080
applications that they just
haven't been able to write on

00:27:27.080 --> 00:27:28.530
the web before.

00:27:28.530 --> 00:27:30.590
BRAD GREEN: And then the last
thing, of course, is the URL

00:27:30.590 --> 00:27:33.480
to GitHub for the TextDrive
app itself.

00:27:33.480 --> 00:27:36.450
We'd love to see some
crazy pull requests

00:27:36.450 --> 00:27:37.360
coming for that app.

00:27:37.360 --> 00:27:38.210
PETE LEPAGE: That would
be really cool.

00:27:38.210 --> 00:27:41.430
BRAD GREEN: Please use it,
and please add to it.

00:27:41.430 --> 00:27:42.200
PETE LEPAGE: Awesome.

00:27:42.200 --> 00:27:44.520
VOJTA JINA: I think we have
a YouTube question?

00:27:44.520 --> 00:27:46.190
PETE LEPAGE: Yeah.

00:27:46.190 --> 00:27:47.830
Why don't we start jumping
into the questions?

00:27:47.830 --> 00:27:51.510
We've had a whole bunch come
in in the meantime.

00:27:51.510 --> 00:27:57.520
So the first question is,
"Updating or rewriting jQuery

00:27:57.520 --> 00:28:00.990
plugins using directives still
feels a little bit foreign,

00:28:00.990 --> 00:28:03.920
and could use some more
real-world examples.

00:28:03.920 --> 00:28:08.620
It would be great to have a
commented version of some real

00:28:08.620 --> 00:28:11.740
directives done correctly,
such as the Angular

00:28:11.740 --> 00:28:13.770
Bootstrap." Do you guys
have plans to do

00:28:13.770 --> 00:28:15.830
some more of those?

00:28:15.830 --> 00:28:17.290
BRAD GREEN: Yeah absolutely.

00:28:17.290 --> 00:28:18.210
Good question.

00:28:18.210 --> 00:28:21.130
So there are a couple projects
that do this.

00:28:21.130 --> 00:28:22.560
One of them is called
Angular UI.

00:28:22.560 --> 00:28:26.050
It's not something we do, but
part of the community of

00:28:26.050 --> 00:28:28.800
Angular is building it.

00:28:28.800 --> 00:28:31.060
Just go on GitHub and search
for Angular-UI.

00:28:31.060 --> 00:28:34.610
You can see a bunch of
great examples there.

00:28:34.610 --> 00:28:37.160
VOJTA JINA: This question is
really related to Angular, but

00:28:37.160 --> 00:28:40.320
it pops up very often.

00:28:40.320 --> 00:28:42.220
And it really depends.

00:28:42.220 --> 00:28:45.780
There are jQuery plugins that
are, actually, easy to wrap.

00:28:45.780 --> 00:28:48.030
And there are jQuery plugins
that are not

00:28:48.030 --> 00:28:48.930
that easy to wrap.

00:28:48.930 --> 00:28:50.180
It depends.

00:28:52.240 --> 00:28:54.410
To be fair, I think this is
some place that we could

00:28:54.410 --> 00:28:54.980
improve Angular.

00:28:54.980 --> 00:29:00.310
We could make it easier to work
with some of the really

00:29:00.310 --> 00:29:01.730
key components.

00:29:01.730 --> 00:29:05.330
And maybe we need to go talk
to the jQuery guys.

00:29:05.330 --> 00:29:06.110
PETE LEPAGE: Cool.

00:29:06.110 --> 00:29:08.170
So the next question
is actually a

00:29:08.170 --> 00:29:11.620
really interesting one.

00:29:11.620 --> 00:29:14.810
From somebody in New
Haven, Connecticut.

00:29:14.810 --> 00:29:17.310
His comment was, "This makes
me a little bit nervous,

00:29:17.310 --> 00:29:21.510
because part of this page seem
to have gone dangerously close

00:29:21.510 --> 00:29:25.570
to inline JavaScript, in the
style onclick and friends.

00:29:25.570 --> 00:29:27.970
Do you have thoughts
on this matter?"

00:29:27.970 --> 00:29:28.520
BRAD GREEN: Yes.

00:29:28.520 --> 00:29:31.350
So you're seeing a bunch of
attributes inside the tags,

00:29:31.350 --> 00:29:33.290
now, that we've added
in Angular.

00:29:33.290 --> 00:29:36.260
And this feels like, OK, that's
just like onclick.

00:29:36.260 --> 00:29:38.300
Why is that not just onclick?

00:29:38.300 --> 00:29:39.670
And maybe, Vojta, you've
got some comments.

00:29:39.670 --> 00:29:46.290
But one of the key differences
is that onclick is a global

00:29:46.290 --> 00:29:51.670
name space entity, and it has
all of the problems of

00:29:51.670 --> 00:29:56.340
testability and leakage into
the rest of your app.

00:29:56.340 --> 00:29:59.265
VOJTA JINA: In general, you can
say, I think pretty much--

00:29:59.265 --> 00:30:00.240
BRAD GREEN: The Angular
version does

00:30:00.240 --> 00:30:01.080
not have this problem.

00:30:01.080 --> 00:30:01.260
VOJTA JINA: Yeah.

00:30:01.260 --> 00:30:04.550
I think pretty much all the
problems that this onclick

00:30:04.550 --> 00:30:08.750
handlers suffers from,
Angular does not.

00:30:08.750 --> 00:30:13.280
BRAD GREEN: So it is
a good question.

00:30:13.280 --> 00:30:16.920
I think we've got a presentation
tonight at our

00:30:16.920 --> 00:30:18.790
meet up on Angular.

00:30:18.790 --> 00:30:22.350
If you can join us for that or
see the video afterwards,

00:30:22.350 --> 00:30:24.050
we'll go into that in
a lot more depth.

00:30:24.050 --> 00:30:26.360
VOJTA JINA: It's going to
be about directives.

00:30:26.360 --> 00:30:30.290
PETE LEPAGE: So where can they
find the video afterwards?

00:30:30.290 --> 00:30:35.760
BRAD GREEN: If you go to our
blog, just at angularjs.org,

00:30:35.760 --> 00:30:36.590
and click on blog.

00:30:36.590 --> 00:30:39.536
Or if you just go to
blog.angularjs.org, you'll be

00:30:39.536 --> 00:30:40.940
able to find that.

00:30:40.940 --> 00:30:42.530
PETE LEPAGE: So that'll
be later tonight?

00:30:42.530 --> 00:30:43.030
BRAD GREEN: That's right.

00:30:43.030 --> 00:30:43.510
PETE LEPAGE: OK.

00:30:43.510 --> 00:30:45.630
VOJTA JINA: Or there is a
YouTube channel, I think.

00:30:45.630 --> 00:30:46.640
BRAD GREEN: And there's
a YouTube channel.

00:30:46.640 --> 00:30:47.360
That's right.

00:30:47.360 --> 00:30:48.034
Just AngularJS.

00:30:48.034 --> 00:30:50.010
PETE LEPAGE: Cool.

00:30:50.010 --> 00:30:53.370
So Dennis wants to know why
TextDrive isn't on the Chrome

00:30:53.370 --> 00:30:54.820
Web Store yet.

00:30:54.820 --> 00:30:56.310
And I think there's
a good answer, but

00:30:56.310 --> 00:30:58.030
I'll let you guys--

00:30:58.030 --> 00:31:03.230
VOJTA JINA: I think the first
answer is that it doesn't run

00:31:03.230 --> 00:31:04.950
on stable Chrome.

00:31:04.950 --> 00:31:06.040
PETE LEPAGE: Yes.

00:31:06.040 --> 00:31:07.310
BRAD GREEN: And as soon
as it does, we'd love

00:31:07.310 --> 00:31:08.170
to put it up there.

00:31:08.170 --> 00:31:09.040
VOJTA JINA: Yeah, for sure.

00:31:09.040 --> 00:31:10.960
PETE LEPAGE: So the big thing
right now is for web

00:31:10.960 --> 00:31:16.170
developers who are building
Chrome apps, you can't upload

00:31:16.170 --> 00:31:17.510
them to he Chrome
Web Store yet.

00:31:17.510 --> 00:31:19.590
We're still really working
through and making sure that

00:31:19.590 --> 00:31:23.100
we get everything stable,
we get everything right.

00:31:23.100 --> 00:31:25.690
We're not 100% positive
that there will be no

00:31:25.690 --> 00:31:26.590
more breaking changes.

00:31:26.590 --> 00:31:27.830
We think we're there.

00:31:27.830 --> 00:31:29.920
But we're not positive yet.

00:31:29.920 --> 00:31:34.280
So we don't want to allow
developers to upload code only

00:31:34.280 --> 00:31:38.090
to find that, oh, we just made
that one last breaking change

00:31:38.090 --> 00:31:39.830
that we had to do and
all of a sudden,

00:31:39.830 --> 00:31:41.690
everybody's app stops working.

00:31:41.690 --> 00:31:45.310
So we'll make some pretty big
announcements, and do a

00:31:45.310 --> 00:31:48.730
Hangout here when developers
can start uploading those.

00:31:48.730 --> 00:31:52.050
And we'll work with you guys to
make sure that yours is one

00:31:52.050 --> 00:31:56.350
of the first to get uploaded
and available to folks.

00:31:56.350 --> 00:31:59.630
So the next question is from
Martin in Denmark.

00:31:59.630 --> 00:32:03.350
But he says, "I love AngularJS,"
but he's not so

00:32:03.350 --> 00:32:06.050
fond of JavaScript in general.

00:32:06.050 --> 00:32:08.830
"Will we see Angular in some
form of Dart?" And he's got a

00:32:08.830 --> 00:32:10.480
little smiley face afterwards.

00:32:10.480 --> 00:32:11.850
BRAD GREEN: That's
a great idea.

00:32:11.850 --> 00:32:13.840
I don't see any reason not to.

00:32:13.840 --> 00:32:16.530
We've talked to the
Dart team a bit.

00:32:16.530 --> 00:32:18.910
We haven't started working
on it, but yeah.

00:32:18.910 --> 00:32:20.060
Sounds great to me.

00:32:20.060 --> 00:32:20.940
PETE LEPAGE: Cool.

00:32:20.940 --> 00:32:21.930
Awesome.

00:32:21.930 --> 00:32:24.140
VOJTA JINA: Angular is ideas.

00:32:24.140 --> 00:32:26.040
It's not coupled to--

00:32:26.040 --> 00:32:26.410
BRAD GREEN: That's right.

00:32:26.410 --> 00:32:27.120
It's an--

00:32:27.120 --> 00:32:27.570
VOJTA JINA: --a language.

00:32:27.570 --> 00:32:28.410
BRAD GREEN: --idiom
for developing.

00:32:28.410 --> 00:32:30.310
And we're not tied
to JavaScript.

00:32:30.310 --> 00:32:31.250
Though we like JavaScript.

00:32:31.250 --> 00:32:33.100
Though we like Dart, too.

00:32:33.100 --> 00:32:35.040
PETE LEPAGE: Awesome.

00:32:35.040 --> 00:32:40.150
So we did mention that the code
is available on GitHub.

00:32:40.150 --> 00:32:41.760
Denis did have a comment.

00:32:41.760 --> 00:32:42.900
Not so much a question.

00:32:42.900 --> 00:32:47.620
But GitHub is, apparently,
not so happy right now.

00:32:47.620 --> 00:32:48.930
You will be able
to go grab it.

00:32:48.930 --> 00:32:51.990
The URL that we provided
will still work.

00:32:51.990 --> 00:32:55.250
So you can go to that URL
for the code, and

00:32:55.250 --> 00:32:57.271
pull it down later.

00:32:57.271 --> 00:32:58.180
VOJTA JINA: GitHub is awesome.

00:32:58.180 --> 00:33:00.530
I'm pretty sure it's going to
be OK in a couple of hours.

00:33:00.530 --> 00:33:01.030
PETE LEPAGE: Exactly.

00:33:01.030 --> 00:33:04.240
Hopefully it'll just be
a couple more minutes.

00:33:04.240 --> 00:33:08.020
I'm sure they're working
pretty hard right now.

00:33:08.020 --> 00:33:12.380
So this is a little bit of
an in-depth questions.

00:33:12.380 --> 00:33:16.250
So I'm going to try and read it
as best I can, and not mess

00:33:16.250 --> 00:33:17.760
it up too much.

00:33:17.760 --> 00:33:20.890
So Project in subdirectory.

00:33:20.890 --> 00:33:27.730
And they they added a base
source tag that says

00:33:27.730 --> 00:33:32.140
subdirectory, thinking the
HTML5 URL would be

00:33:32.140 --> 00:33:38.380
sudir/route1 and subdir/route2,
and for older

00:33:38.380 --> 00:33:44.830
browsers it would be
subdir/#!route1, #!route2.

00:33:44.830 --> 00:33:47.060
But instead, it came out
as subdir/#!/route1.

00:33:53.670 --> 00:33:54.210
Is that--

00:33:54.210 --> 00:33:56.000
VOJTA JINA: I got lost.

00:33:56.000 --> 00:33:58.280
PETE LEPAGE: Well let me
show you this code.

00:33:58.280 --> 00:34:02.750
It's the one highlighted
in blue there.

00:34:02.750 --> 00:34:06.620
And he's trying to figure out,
is that probably a code bug

00:34:06.620 --> 00:34:08.770
for him, or is that
a config thing?

00:34:08.770 --> 00:34:10.010
BRAD GREEN: It's probably
a config thing.

00:34:10.010 --> 00:34:15.530
But if you would post to the
AngularJS mailing list, with a

00:34:15.530 --> 00:34:19.130
snippet of your code, or a
jsFiddle example, we'd love to

00:34:19.130 --> 00:34:19.909
look at it for you.

00:34:19.909 --> 00:34:20.320
PETE LEPAGE: Perfect.

00:34:20.320 --> 00:34:23.150
And where can they go for
the mailing list?

00:34:23.150 --> 00:34:24.940
BRAD GREEN: So again,
go to AngularJS.org.

00:34:24.940 --> 00:34:27.030
And there's a menu
called Discuss.

00:34:27.030 --> 00:34:27.860
Go to Discuss.

00:34:27.860 --> 00:34:30.790
And then the mailing
list is there.

00:34:30.790 --> 00:34:31.370
PETE LEPAGE: Excellent.

00:34:31.370 --> 00:34:35.380
So for some of these things,
it's a little hard for us to

00:34:35.380 --> 00:34:37.159
really be able to
dig into these.

00:34:37.159 --> 00:34:38.110
BRAD GREEN: Could be a bug.

00:34:38.110 --> 00:34:39.110
We'd love that, too.

00:34:39.110 --> 00:34:42.739
VOJTA JINA: I think it's more
likely about configuration.

00:34:42.739 --> 00:34:44.699
PETE LEPAGE: All right.

00:34:44.699 --> 00:34:48.409
So, "How do you determine if a
jQuery plugin can be easily

00:34:48.409 --> 00:34:52.650
incorporated using directives or
not?" And this is from Vij

00:34:52.650 --> 00:34:55.000
in New Jersey.

00:34:55.000 --> 00:34:58.180
VOJTA JINA: I would say it
depends how much stuff this

00:34:58.180 --> 00:35:01.710
jQuery plugin does, with
regards to dome.

00:35:01.710 --> 00:35:06.160
As long as it can live inside a
div or something, and there

00:35:06.160 --> 00:35:08.750
do whatever it wants,
it's fine.

00:35:08.750 --> 00:35:11.760
But as long as it starts doing
things like, very often, these

00:35:11.760 --> 00:35:15.160
model windows and stuff, it does
stuff like, oh, I'm going

00:35:15.160 --> 00:35:16.770
to remove this is dome.

00:35:16.770 --> 00:35:18.580
And I'm going to put
it somewhere else.

00:35:18.580 --> 00:35:20.210
And then I'm going
to delete this.

00:35:20.210 --> 00:35:22.000
And I'm going to
create a clone.

00:35:22.000 --> 00:35:25.210
And this is something that
angular compile doesn't like.

00:35:25.210 --> 00:35:29.140
Because once you change
the structure, it's--

00:35:29.140 --> 00:35:30.472
BRAD GREEN: Yeah.

00:35:30.472 --> 00:35:34.270
If they're very invasive to
the entire page, it can be

00:35:34.270 --> 00:35:35.240
problematic.

00:35:35.240 --> 00:35:38.200
VOJTA JINA: Especially if you
need angular binding inside

00:35:38.200 --> 00:35:40.380
this component.

00:35:40.380 --> 00:35:45.370
BRAD GREEN: Though in the
angular-UI project, I know

00:35:45.370 --> 00:35:47.650
that there are some examples of
those type of things, like

00:35:47.650 --> 00:35:48.930
the modal dialogues.

00:35:48.930 --> 00:35:49.740
So go take a look.

00:35:49.740 --> 00:35:53.540
And I know some of them use the
Bootstrap code for that

00:35:53.540 --> 00:35:54.280
instead of jQuery UI.

00:35:54.280 --> 00:35:57.490
But I think you can get the
same effect you want.

00:35:57.490 --> 00:35:59.370
VOJTA JINA: Yeah, but I think,
actually, Twitter Bootstrap

00:35:59.370 --> 00:36:01.770
might be, in most of
the cases, easier.

00:36:01.770 --> 00:36:04.240
Because you can just
take the CSS--

00:36:04.240 --> 00:36:04.600
BRAD GREEN: That's right.

00:36:04.600 --> 00:36:06.390
VOJTA JINA: --and do the
JavaScript part with Angular,

00:36:06.390 --> 00:36:09.430
which is actually way
easier and faster.

00:36:09.430 --> 00:36:10.400
So I think that--

00:36:10.400 --> 00:36:10.520
BRAD GREEN: Yeah.

00:36:10.520 --> 00:36:12.770
We are big fans of Twitter
Bootstrap for that reason.

00:36:12.770 --> 00:36:14.940
And it looks great.

00:36:14.940 --> 00:36:17.480
PETE LEPAGE: It is
very pretty.

00:36:17.480 --> 00:36:18.650
We're almost out of time.

00:36:18.650 --> 00:36:21.460
I want to encourage anybody to
add any other questions they

00:36:21.460 --> 00:36:23.530
have to our moderator page.

00:36:23.530 --> 00:36:27.800
But one of the things that I
wanted to say is, in the

00:36:27.800 --> 00:36:32.670
learning that you guys have been
doing building Angular,

00:36:32.670 --> 00:36:35.770
and building Chrome apps, what's
the biggest learning

00:36:35.770 --> 00:36:39.600
thing that you guys have taken
away in terms of building a

00:36:39.600 --> 00:36:42.770
Chrome app that you think
our viewers would

00:36:42.770 --> 00:36:43.960
learn the most from?

00:36:43.960 --> 00:36:45.065
BRAD GREEN: Vojta, you
did all the work.

00:36:45.065 --> 00:36:46.520
So maybe you should answer.

00:36:46.520 --> 00:36:48.420
VOJTA JINA: Well, I think
we mentioned pretty

00:36:48.420 --> 00:36:49.170
much all the stuff.

00:36:49.170 --> 00:36:53.080
So with regards to Angular,
definitely keeping controllers

00:36:53.080 --> 00:36:55.460
light, and putting more
stuff into services.

00:36:55.460 --> 00:36:56.710
That's one thing I learned.

00:36:59.630 --> 00:37:00.040
I learned--

00:37:00.040 --> 00:37:01.440
BRAD GREEN: What do you think
about building an app

00:37:01.440 --> 00:37:03.315
versus a web app?

00:37:03.315 --> 00:37:04.565
Anything specific there?

00:37:08.330 --> 00:37:10.140
VOJTA JINA: I don't know.

00:37:10.140 --> 00:37:15.290
I ended up wrapping all the APIs
into services very often,

00:37:15.290 --> 00:37:18.800
so that I have just really
tiny wrapper around the

00:37:18.800 --> 00:37:22.020
service that I can mock
up around the service.

00:37:22.020 --> 00:37:24.530
BRAD GREEN: This was good,
because sometimes there is a

00:37:24.530 --> 00:37:29.380
difference between running it as
a web app and running it as

00:37:29.380 --> 00:37:31.600
an app on Chrome OS.

00:37:31.600 --> 00:37:32.410
VOJTA JINA: Good point.

00:37:32.410 --> 00:37:34.990
BRAD GREEN: And this dependency
injection will

00:37:34.990 --> 00:37:38.850
allow you to switch it in a
very, very transparent way.

00:37:38.850 --> 00:37:40.260
VOJTA JINA: I think we have
a good example of that.

00:37:40.260 --> 00:37:42.150
And that's actually
the storage.

00:37:42.150 --> 00:37:46.460
Because we said we are using
Chrome Storage Sync.

00:37:46.460 --> 00:37:51.470
But if you ran this code just in
regular Chrome, there is no

00:37:51.470 --> 00:37:52.800
Chrome Storage.

00:37:52.800 --> 00:37:57.960
So we fall back, and we
use local storage.

00:37:57.960 --> 00:38:01.940
Let me actually open this up.

00:38:01.940 --> 00:38:04.840
The local storage is completely
synchronous.

00:38:04.840 --> 00:38:08.910
But Chrome Storage Sync is
completely asynchronous.

00:38:08.910 --> 00:38:11.760
And you don't want to have
service that is sometimes

00:38:11.760 --> 00:38:13.500
synchronous and sometimes
asynchronous.

00:38:13.500 --> 00:38:14.050
PETE LEPAGE: Right.

00:38:14.050 --> 00:38:14.630
VOJTA JINA: That
kind of sucks.

00:38:14.630 --> 00:38:16.580
And it's difficult to
work with that.

00:38:16.580 --> 00:38:23.210
So what I did is just wrapping
this service, and basically

00:38:23.210 --> 00:38:24.490
creating wrapper.

00:38:24.490 --> 00:38:27.280
So that even the local storage
is asynchronous.

00:38:27.280 --> 00:38:28.870
And the rest of your
app doesn't have

00:38:28.870 --> 00:38:29.620
to worry about that.

00:38:29.620 --> 00:38:31.620
It's just asynchronous
all the time.

00:38:31.620 --> 00:38:34.670
BRAD GREEN: We did an impedance
matching exercise,

00:38:34.670 --> 00:38:37.745
so that you can run as
an app or on the web

00:38:37.745 --> 00:38:38.710
with the same code.

00:38:38.710 --> 00:38:41.730
VOJTA JINA: And again, with
dependency injection, you have

00:38:41.730 --> 00:38:43.780
these two versions
of this service.

00:38:43.780 --> 00:38:47.740
And you just inject whatever
version you need, depending on

00:38:47.740 --> 00:38:48.450
the platform.

00:38:48.450 --> 00:38:50.160
BRAD GREEN: It's a lot cleaner
than having a big switch

00:38:50.160 --> 00:38:52.530
statement, or a whole bunch
of ifs all over your code.

00:38:52.530 --> 00:38:55.670
VOJTA JINA: Better than having
one storage with a lot of ifs.

00:38:55.670 --> 00:38:57.270
I think it's easier to read.

00:38:57.270 --> 00:38:57.980
PETE LEPAGE: Cool.

00:38:57.980 --> 00:38:59.190
Well, I want to thank
you guys.

00:38:59.190 --> 00:39:01.510
We're pretty much out of
time at this point.

00:39:01.510 --> 00:39:04.260
And you guys have done, I think,
a really great job of

00:39:04.260 --> 00:39:07.650
introducing our viewers to
Angular, and talking about

00:39:07.650 --> 00:39:09.020
some of the learnings
that you've had

00:39:09.020 --> 00:39:11.020
building Chrome apps.

00:39:11.020 --> 00:39:14.880
As well as where they can go
learn more information about

00:39:14.880 --> 00:39:18.330
taking TextDrive apart and
using it themselves,

00:39:18.330 --> 00:39:22.010
understanding how it works, and
some of the best practices

00:39:22.010 --> 00:39:23.810
for building Chrome apps.

00:39:23.810 --> 00:39:27.860
We're going back again next
week, next Tuesday, same time.

00:39:27.860 --> 00:39:30.470
We're just figuring out
what our plan for next

00:39:30.470 --> 00:39:31.780
week is right now.

00:39:31.780 --> 00:39:35.500
But today, most of the other
guys who you're used to seeing

00:39:35.500 --> 00:39:38.060
aren't here, because we're
doing a hackathon.

00:39:38.060 --> 00:39:41.120
And we've got a whole bunch of
people who are sitting down,

00:39:41.120 --> 00:39:43.430
building apps, doing some
really cool stuff.

00:39:43.430 --> 00:39:46.400
So I think, probably next week,
we'll spend a little bit

00:39:46.400 --> 00:39:50.210
of time talking about the cool
stuff that everybody built,

00:39:50.210 --> 00:39:53.210
some of the lessons learned,
and giving you some of the

00:39:53.210 --> 00:39:57.030
great lessons, and showing off
some really cool things.

00:39:57.030 --> 00:40:00.030
So with that, I want to say
thank you to Brad and Vojta.

00:40:00.030 --> 00:40:02.320
And thank you for tuning
in and watching.

00:40:02.320 --> 00:40:04.000
And we'll join you next week.

00:40:04.000 --> 00:40:04.720
BRAD GREEN: Thanks
for having us.

00:40:04.720 --> 00:40:05.690
This was fun.

00:40:05.690 --> 00:40:06.500
VOJTA JINA: Thanks
for having us.

00:40:06.500 --> 00:40:07.470
PETE LEPAGE: Thanks,
everybody.

00:40:07.470 --> 00:40:08.720
Bye-bye.

