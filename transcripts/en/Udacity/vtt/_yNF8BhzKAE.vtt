WEBVTT
Kind: captions
Language: en

00:00:00.230 --> 00:00:03.836
Let's look at the solution to
our second Write-Update versus

00:00:03.836 --> 00:00:05.810
Write-Invalidate quiz.

00:00:05.810 --> 00:00:09.250
This time we have a program where
one core repeatedly reads and

00:00:09.250 --> 00:00:11.773
then writes A and then the other.

00:00:11.773 --> 00:00:15.850
So how many bus uses do we
get with the write update and

00:00:15.850 --> 00:00:18.110
the write-invalidate protocol?

00:00:18.110 --> 00:00:22.000
This time,
the write update protocol is going to

00:00:22.000 --> 00:00:26.070
have one bus access here to read,
because this is a miss.

00:00:26.070 --> 00:00:30.175
Because there is no sharing,
the write doesn't need a write access.

00:00:30.175 --> 00:00:34.096
because we know that we privately
have this thing in our cache.

00:00:34.096 --> 00:00:36.534
So, this is what happens the first time.

00:00:36.534 --> 00:00:41.800
In the remaining 499 iterations of this,
nothing else happens.

00:00:41.800 --> 00:00:43.850
We just hit in our cache.

00:00:43.850 --> 00:00:49.210
Once we get to core one however, the
reading is going to get the data from

00:00:49.210 --> 00:00:55.410
core zero but now we have the shared
bits at one and both caches.

00:00:55.410 --> 00:01:00.160
So the write here will need to
do a broadcast the first time.

00:01:00.160 --> 00:01:02.930
And then the next time and so on.

00:01:02.930 --> 00:01:07.600
So overall we get 1 for
the initial miss.

00:01:07.600 --> 00:01:11.530
And then 500 updates of core 0's cache.

00:01:11.530 --> 00:01:15.060
Note that this is wasteful because
core 0 is no longer really interested

00:01:15.060 --> 00:01:16.430
in this.

00:01:16.430 --> 00:01:22.880
So overall we get 502 bus accesss.

00:01:22.880 --> 00:01:27.320
In a right invalidate protocol,
we have the same thing here.

00:01:27.320 --> 00:01:32.280
We have a miss and
the data is not shared, so

00:01:32.280 --> 00:01:37.820
the right and all of the reason right
after that are just cache hits.

00:01:37.820 --> 00:01:42.880
However here what happens is the read
here will make the data shared and

00:01:42.880 --> 00:01:45.480
fetch the data from the other core.

00:01:45.480 --> 00:01:47.660
So that's going to be a miss.

00:01:47.660 --> 00:01:49.376
Because the data is shared,

00:01:49.376 --> 00:01:52.599
the right will have to do
an invalidation broadcast.

00:01:52.599 --> 00:01:55.046
So we will have another bus access, but

00:01:55.046 --> 00:02:00.103
that makes the data private to core one
now because this version is invalidated.

00:02:00.103 --> 00:02:05.450
So for the remaining 499 iterations
of this, nothing else happens.

00:02:05.450 --> 00:02:08.910
So overall we get only
three bus accesses.

00:02:08.910 --> 00:02:14.400
As you can see, write-in validate is
a lot more efficient if data tends to

00:02:14.400 --> 00:02:18.840
be used frequently on one core and then
the frequent use moves to another core.

