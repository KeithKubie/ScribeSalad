WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Now, the question is, how can I test a function like this,

00:00:03.000 --> 00:00:07.000
that includes this nondeterministic component?

00:00:07.000 --> 00:00:12.000
One thing we want to be able to do is inject into here

00:00:12.000 --> 00:00:15.000
some deterministic numbers to say this is the sequence

00:00:15.000 --> 00:00:18.000
of "die rolls" I want to give you and then,

00:00:18.000 --> 00:00:21.000
from that, then I can check if it's doing the right thing.

00:00:21.000 --> 00:00:25.000
This is an example of a concept called Dependency Injection,

00:00:25.000 --> 00:00:29.000
which has a rather scary and intimidating-sounding name,

00:00:29.000 --> 00:00:31.000
but it's actually a pretty simple idea.

00:00:31.000 --> 00:00:35.000
The idea is we've got a function like this, it's a big complicated function

00:00:35.000 --> 00:00:39.000
and way down somewhere inside, there's something

00:00:39.000 --> 00:00:41.000
that we want to affect, something we want

00:00:41.000 --> 00:00:43.000
to monitor or track or change.

00:00:43.000 --> 00:00:46.000
Dependency Injection says this function

00:00:46.000 --> 00:00:50.000
depends on this random number generator,

00:00:50.000 --> 00:00:52.000
so let's be able to inject that.

00:00:52.000 --> 00:00:55.000
How do we inject something into a function?

00:00:55.000 --> 00:00:57.000
Well, we just add it as an argument.

00:00:57.000 --> 00:01:01.000
So let's add in the argument here, and let's call it "die rolls"

00:01:01.000 --> 00:01:06.000
and say, that's going to be a sequence or

00:01:06.000 --> 00:01:11.000
an iterable that will generate possible "die rolls.

00:01:11.000 --> 00:01:17.000
In the normal case, that will just be random numbers exactly like it was before.

00:01:17.000 --> 00:01:20.000
We don't care what they are, but when we want to test the function

00:01:20.000 --> 00:01:24.000
we can inject the "die rolls" that we want.

00:01:24.000 --> 00:01:26.000
We can just pass in a list saying what happens

00:01:26.000 --> 00:01:33.000
if the "die rolls" are a 6 and a 1 and then a 3 and a 5, and so on.

00:01:33.000 --> 00:01:35.000
Tell me what happens.

00:01:35.000 --> 00:01:39.000
So here's my implementation of the Dependency Injected Play Pig.

00:01:39.000 --> 00:01:42.000
I still have the regular arguments "A" and "B."

00:01:42.000 --> 00:01:44.000
There's an optional argument.

00:01:44.000 --> 00:01:47.000
If I leave that out it should behave exactly like it did before.

00:01:47.000 --> 00:01:50.000
But if I specify it, then I have control over it.

00:01:50.000 --> 00:01:56.000
So "die rolls" should be an iterable that generates rolls.

00:01:56.000 --> 00:01:59.000
Here we go down and we ask for the next one

00:01:59.000 --> 00:02:02.000
out of those rolls and get it back.

00:02:02.000 --> 00:02:06.000
By default, "die rolls" just says we're going to generate

00:02:06.000 --> 00:02:09.000
an infinite sequence of random integers from 1 to 6.

00:02:09.000 --> 00:02:11.000
Oops, I think I misspoke there.

00:02:11.000 --> 00:02:15.000
I think I said that "die rolls" have to be an iterable.

00:02:15.000 --> 00:02:20.000
Actually, what it has to be is an iterator such as a

00:02:20.000 --> 00:02:24.000
generator expression or something else,

00:02:24.000 --> 99:59:59.000
in order for it to have the next apply to it.

