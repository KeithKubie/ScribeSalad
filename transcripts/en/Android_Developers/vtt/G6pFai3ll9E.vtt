WEBVTT
Kind: captions
Language: en

00:00:03.020 --> 00:00:04.920
Hi, everyone.

00:00:04.920 --> 00:00:09.270
Welcome to the State
of Media Playback.

00:00:09.270 --> 00:00:11.910
We'll be talking
today about how to do

00:00:11.910 --> 00:00:14.560
media playback the right way.

00:00:14.560 --> 00:00:16.290
So things have
changed quite a bit

00:00:16.290 --> 00:00:20.210
over time, from the earliest
Android days to now.

00:00:20.210 --> 00:00:22.320
But we've come up with
a pretty good solution

00:00:22.320 --> 00:00:24.210
on a lot of the
things you actually

00:00:24.210 --> 00:00:28.690
do need to do to really get the
best experience out of media

00:00:28.690 --> 00:00:29.530
playback.

00:00:29.530 --> 00:00:31.670
And so we'll be talking
through a lot of the best

00:00:31.670 --> 00:00:34.072
practices around all of that.

00:00:34.072 --> 00:00:36.530
A little bit about me-- I've
been doing Android development

00:00:36.530 --> 00:00:38.370
for about five years now.

00:00:38.370 --> 00:00:40.510
I started doing it
in my spare time

00:00:40.510 --> 00:00:43.510
and then moved to doing it
full time, first at Funware

00:00:43.510 --> 00:00:45.310
and then at Facebook.

00:00:45.310 --> 00:00:49.200
And now I work at Google
as a developer advocate.

00:00:49.200 --> 00:00:53.830
So I'm working on both the
advanced Android Udacity

00:00:53.830 --> 00:00:57.450
course, which is online
learning to get your learn on,

00:00:57.450 --> 00:00:59.850
as well as a new Android
development pattern

00:00:59.850 --> 00:01:03.430
series of kind of going into
all of these best practices.

00:01:03.430 --> 00:01:06.940
My focus has primarily been on
the framework and the Support

00:01:06.940 --> 00:01:07.584
Library.

00:01:07.584 --> 00:01:09.000
And I actually
work really closely

00:01:09.000 --> 00:01:11.620
with the Media
Framework Team as well

00:01:11.620 --> 00:01:16.040
to write a lot of these things
I'm going to be talking about.

00:01:16.040 --> 00:01:20.810
Now, media playback can mean a
lot to lot of different people.

00:01:20.810 --> 00:01:22.360
So today, we're
going to be focusing

00:01:22.360 --> 00:01:26.290
on just one part of that--
specifically, audio playback.

00:01:26.290 --> 00:01:30.750
Believe me, there's enough
in the land of media

00:01:30.750 --> 00:01:33.040
that we could cover
a whole presentation,

00:01:33.040 --> 00:01:34.380
a whole conference, about it.

00:01:34.380 --> 00:01:38.580
But for this, we'll be focusing
solely on audio playback.

00:01:38.580 --> 00:01:40.250
For video, you might
consider looking

00:01:40.250 --> 00:01:42.580
at the CastCompanionLibrary.

00:01:42.580 --> 00:01:43.412
It's up on GitHub.

00:01:43.412 --> 00:01:44.870
It's actually a
really good example

00:01:44.870 --> 00:01:48.900
of a lot of the best practices
around video playback,

00:01:48.900 --> 00:01:51.510
especially with interacting
with Google Cast devices.

00:01:54.210 --> 00:01:57.180
So when we talk about
any app, we really

00:01:57.180 --> 00:01:59.497
want to start with the user.

00:01:59.497 --> 00:02:01.330
They are the most
important part of the app.

00:02:01.330 --> 00:02:03.570
It's really our
job as developers

00:02:03.570 --> 00:02:06.820
to give them the best
experience that we can.

00:02:06.820 --> 00:02:08.979
And that really starts
with what they're

00:02:08.979 --> 00:02:10.889
expecting from your app.

00:02:10.889 --> 00:02:12.490
That starts with
the description,

00:02:12.490 --> 00:02:15.600
and screenshots, and goes
into the actual functionality

00:02:15.600 --> 00:02:16.820
of the app.

00:02:16.820 --> 00:02:19.815
And what we're trying to
do is rather than just meet

00:02:19.815 --> 00:02:21.440
those expectations,
we're really trying

00:02:21.440 --> 00:02:23.840
to exceed those expectations.

00:02:23.840 --> 00:02:26.210
The worst thing that
we can do to users

00:02:26.210 --> 00:02:29.440
is have them expect that, oh,
this is supposed to do this.

00:02:29.440 --> 00:02:33.060
But then all of a sudden, your
app, unlike every other app,

00:02:33.060 --> 00:02:34.660
doesn't do it the right way.

00:02:34.660 --> 00:02:37.770
And for media apps,
especially for audio playback,

00:02:37.770 --> 00:02:39.470
there are a lot
of things that do

00:02:39.470 --> 00:02:45.180
come as kind of pre-conditions
and expectations from the user.

00:02:45.180 --> 00:02:50.015
And of course for audio apps,
the first user expectation

00:02:50.015 --> 00:02:52.765
is really background playback.

00:02:52.765 --> 00:02:54.500
Or if you've ever
had a media app--

00:02:54.500 --> 00:02:58.850
like you hit the Home button
and it just stops playing, even

00:02:58.850 --> 00:03:01.670
for video apps, like
YouTube for example,

00:03:01.670 --> 00:03:04.170
now they also support
that background playback.

00:03:04.170 --> 00:03:06.610
So for audio apps
particularly, this

00:03:06.610 --> 00:03:09.420
is one of those
base requirements.

00:03:09.420 --> 00:03:12.150
And when we think about
background playback,

00:03:12.150 --> 00:03:15.260
we should really already
be thinking about services.

00:03:15.260 --> 00:03:18.930
These are the top-level,
Android component specifically

00:03:18.930 --> 00:03:21.210
for doing work in
the background that

00:03:21.210 --> 00:03:25.950
isn't tied to an activity or a
short-lived broadcast receiver.

00:03:25.950 --> 00:03:28.920
So it really is
the natural choice

00:03:28.920 --> 00:03:33.510
for handling all
of our media state.

00:03:33.510 --> 00:03:36.930
So what actually goes into
media playback at just

00:03:36.930 --> 00:03:39.110
the 10,000-foot level?

00:03:39.110 --> 00:03:43.170
A lot of this comes down to
this super-simplified version

00:03:43.170 --> 00:03:46.320
of the events in media playback.

00:03:46.320 --> 00:03:50.160
So for every service
that's running, eventually

00:03:50.160 --> 00:03:52.520
it's going to be created.

00:03:52.520 --> 00:03:54.600
This may be the
start of playback

00:03:54.600 --> 00:03:56.640
or when your app
first gets created.

00:03:56.640 --> 00:03:59.130
But we have some
one-time initialization

00:03:59.130 --> 00:04:00.750
in the created step.

00:04:00.750 --> 00:04:03.570
And then eventually,
when the user actually

00:04:03.570 --> 00:04:05.650
hits that Play
button, that's where

00:04:05.650 --> 00:04:08.070
we're going to go into
the Playing state.

00:04:08.070 --> 00:04:10.380
And Playing state
here really means

00:04:10.380 --> 00:04:15.550
any time when we are
actually outputting audio.

00:04:15.550 --> 00:04:18.560
So this is slightly different
from the Pause state, which

00:04:18.560 --> 00:04:22.950
would be the reverse of any
time that we're ready to play,

00:04:22.950 --> 00:04:27.250
or getting ready to play, but
not actually playing any music.

00:04:27.250 --> 00:04:29.650
So from a Play/Pause
perspective,

00:04:29.650 --> 00:04:32.270
obviously for any
audio app, we're

00:04:32.270 --> 00:04:33.880
going to want to be
able to transition

00:04:33.880 --> 00:04:36.470
back and forth
between those states.

00:04:36.470 --> 00:04:39.690
But at some point
the user is probably

00:04:39.690 --> 00:04:41.990
going to stop playback.

00:04:41.990 --> 00:04:45.170
This may be something like
swiping away the notification,

00:04:45.170 --> 00:04:47.200
or closing your
app, or rebooting

00:04:47.200 --> 00:04:49.220
their device, or what have you.

00:04:49.220 --> 00:04:52.070
In that case, we're going
to move to be Stopped state.

00:04:52.070 --> 00:04:56.600
And this case is really the case
where we're explicitly closed.

00:04:56.600 --> 00:05:00.470
And we can generally remove
all of our information

00:05:00.470 --> 00:05:02.970
and say, hey, we're
done playing back.

00:05:02.970 --> 00:05:06.340
And where we are going to then
transition to the Destroyed

00:05:06.340 --> 00:05:08.740
state, which is where we
do that one time Cleanup

00:05:08.740 --> 00:05:11.530
state of releasing
system resources,

00:05:11.530 --> 00:05:14.102
stopping our service,
that type of thing.

00:05:14.102 --> 00:05:16.560
There may be some difference
between Stopped and Destroyed,

00:05:16.560 --> 00:05:19.660
and we'll get into that.

00:05:19.660 --> 00:05:22.000
So it wouldn't be
much of an audio app

00:05:22.000 --> 00:05:23.810
if it didn't
actually play audio.

00:05:23.810 --> 00:05:26.070
That's kind of a big part of it.

00:05:26.070 --> 00:05:28.450
So we'll be assuming that
you're using something

00:05:28.450 --> 00:05:30.580
like MediaPlayer, which
is built into Android.

00:05:30.580 --> 00:05:34.100
But the same talk works
actually extremely well

00:05:34.100 --> 00:05:36.420
if you're using something
like [? XO ?] player

00:05:36.420 --> 00:05:39.920
or any other third
party playback system.

00:05:39.920 --> 00:05:44.030
All this is kind of agnostic
to that, and really building

00:05:44.030 --> 00:05:47.340
on top of that to say,
OK, well, beyond just

00:05:47.340 --> 00:05:51.230
let's play some audio, can
we do a little bit more?

00:05:51.230 --> 00:05:53.445
But for MediaPlayer,
we can see it

00:05:53.445 --> 00:05:56.070
has a pretty easy,
straightforward flow

00:05:56.070 --> 00:05:58.352
for our different events states.

00:05:58.352 --> 00:05:59.060
You'll create it.

00:05:59.060 --> 00:06:00.890
We'll create a new media player.

00:06:00.890 --> 00:06:03.580
And then, of course,
we'll prepare it and play.

00:06:03.580 --> 00:06:05.640
When we go to
playing, we'll pause.

00:06:05.640 --> 00:06:07.410
When we pause, we stop.

00:06:07.410 --> 00:06:09.530
When we stop-- this
should be fairly

00:06:09.530 --> 00:06:12.540
straightforward from the
media playback perspective.

00:06:12.540 --> 00:06:15.060
And, well, we're done.

00:06:15.060 --> 00:06:17.940
Media plays, pause, and
we have lots of time

00:06:17.940 --> 00:06:20.310
back for getting
ready for lunch.

00:06:20.310 --> 00:06:24.910
But maybe we should go into
a little bit more detail.

00:06:24.910 --> 00:06:27.220
So we're really trying
to do it the right way.

00:06:27.220 --> 00:06:30.450
In fact, just playing
audio in the background

00:06:30.450 --> 00:06:34.424
with no controls, no
information, and no idea

00:06:34.424 --> 00:06:36.340
of what the user is doing
is probably actually

00:06:36.340 --> 00:06:39.350
a net negative for the user.

00:06:39.350 --> 00:06:41.980
And we want to get
onto the positive side.

00:06:41.980 --> 00:06:46.850
So what can we get to really
bump this up to at least an

00:06:46.850 --> 00:06:50.380
acceptable experience rather
than something that is just

00:06:50.380 --> 00:06:52.401
blasting music from your
phone with no controls

00:06:52.401 --> 00:06:54.400
in the background that
they can control and have

00:06:54.400 --> 00:06:56.200
to find your app to kill it?

00:06:56.200 --> 00:06:58.500
Probably not the
best place to be.

00:06:58.500 --> 00:07:02.480
So the first thing we
want to do is audio focus.

00:07:02.480 --> 00:07:04.980
Now it really is one
of those keys of being

00:07:04.980 --> 00:07:07.970
a great citizen on Android.

00:07:07.970 --> 00:07:11.780
So it's the way of getting
that heads up to other apps

00:07:11.780 --> 00:07:15.630
and to the system that you
want to play something,

00:07:15.630 --> 00:07:18.670
that you are ready to play.

00:07:18.670 --> 00:07:21.640
And at the same
point, it also means

00:07:21.640 --> 00:07:25.150
that someone can't necessarily
take your audio focus.

00:07:25.150 --> 00:07:28.330
What we don't want is we don't
want multiple apps playing back

00:07:28.330 --> 00:07:32.510
on top of one another and
causing issues where you can't

00:07:32.510 --> 00:07:34.820
understand either one of them.

00:07:34.820 --> 00:07:38.770
Now, this is slightly distinct
from actually playing audio.

00:07:38.770 --> 00:07:41.450
It's the intent to play audio.

00:07:41.450 --> 00:07:44.070
So we'll want to
continue to have

00:07:44.070 --> 00:07:48.760
audio focus any time we're
ready to play, or going to play,

00:07:48.760 --> 00:07:52.180
or really taking on that
role of the main media

00:07:52.180 --> 00:07:54.930
playback in an app.

00:07:54.930 --> 00:07:58.950
So we can look at some code like
this to request audio focus.

00:07:58.950 --> 00:08:01.280
We'll use Audio
Manager for this.

00:08:01.280 --> 00:08:04.900
And then actually going through
and requesting audio focus--

00:08:04.900 --> 00:08:07.670
in this case, looking
for the streamed music,

00:08:07.670 --> 00:08:11.920
the main playback stream
for audio playback--

00:08:11.920 --> 00:08:14.120
and hoping to gain audio focus.

00:08:14.120 --> 00:08:17.650
Now one thing to note is
that almost all the time,

00:08:17.650 --> 00:08:19.400
you'll be granted audio focus.

00:08:19.400 --> 00:08:22.570
But there are a few exceptions
where you'll actually not

00:08:22.570 --> 00:08:23.960
be granted audio focus.

00:08:23.960 --> 00:08:27.180
One example is maybe when
the user is in a phone call.

00:08:27.180 --> 00:08:30.040
And that probably isn't the
time to start blasting music

00:08:30.040 --> 00:08:33.059
because they're actually talking
with another human, which

00:08:33.059 --> 00:08:33.950
is great.

00:08:33.950 --> 00:08:36.700
But it means that our media
playback should probably just

00:08:36.700 --> 00:08:38.250
abort and say, you know what?

00:08:38.250 --> 00:08:40.539
We didn't get audio focus,
so we shouldn't continue.

00:08:40.539 --> 00:08:43.470
But most of the time, you'll
be able to proceed and play

00:08:43.470 --> 00:08:46.463
your glorious music.

00:08:46.463 --> 00:08:49.310
And then, of course, we
need to abandon audio focus

00:08:49.310 --> 00:08:51.590
when we're stopping
playback, when we get

00:08:51.590 --> 00:08:53.760
to that final Stopped state.

00:08:53.760 --> 00:08:58.090
But what is that audio focus
change listener thing I just

00:08:58.090 --> 00:08:59.990
put in here for no reason?

00:08:59.990 --> 00:09:03.530
Well, it's actually how you
learn from other apps what's

00:09:03.530 --> 00:09:04.960
going on in the system.

00:09:04.960 --> 00:09:09.150
It's your link to other apps
and to the system saying, well,

00:09:09.150 --> 00:09:11.840
someone else is
requesting audio focus.

00:09:11.840 --> 00:09:15.460
And how does your app
actually react to that?

00:09:15.460 --> 00:09:17.450
It's the callback system.

00:09:17.450 --> 00:09:20.115
So you may be getting
an audio focus loss.

00:09:20.115 --> 00:09:21.500
Now, this is pretty serious.

00:09:21.500 --> 00:09:23.790
This means that the
other app is taking

00:09:23.790 --> 00:09:26.150
over permanent control
of audio focus--

00:09:26.150 --> 00:09:29.960
at least while it's the
last one to request it.

00:09:29.960 --> 00:09:32.820
And your audio focus
isn't coming back.

00:09:32.820 --> 00:09:33.550
You're done.

00:09:33.550 --> 00:09:35.040
It's not your turn yet.

00:09:35.040 --> 00:09:38.090
So in this case, we'll want
to move to the Stopped state.

00:09:38.090 --> 00:09:40.510
You're done playing back audio.

00:09:40.510 --> 00:09:42.700
They've moved on
to a different app.

00:09:42.700 --> 00:09:45.390
Now, one thing to
consider is that maybe you

00:09:45.390 --> 00:09:49.490
don't want to immediately
remove notifications, and delete

00:09:49.490 --> 00:09:52.690
your service, and everything
immediately upon audio loss.

00:09:52.690 --> 00:09:55.820
You could decide to wait
around for 30 seconds just

00:09:55.820 --> 00:09:58.890
in case they accidentally
hit the wrong app.

00:09:58.890 --> 00:10:01.480
But this is really one of
those user experience things

00:10:01.480 --> 00:10:03.340
where you should
test with your users

00:10:03.340 --> 00:10:06.810
on what they expect when they
accidentally hit another app.

00:10:06.810 --> 00:10:10.170
For most Google apps, when
they do lose audio focus,

00:10:10.170 --> 00:10:14.520
you'll see that they immediately
stop playback and awaits

00:10:14.520 --> 00:10:17.410
any future concerns.

00:10:17.410 --> 00:10:20.220
Now, there's another one
called loss transient.

00:10:20.220 --> 00:10:23.180
Now in this case, it's
not a permanent loss.

00:10:23.180 --> 00:10:24.890
It's just a short-term loss.

00:10:24.890 --> 00:10:27.660
So this may be a case where
you're using something

00:10:27.660 --> 00:10:29.980
like Google Maps, and it's
announcing like, oh, you're

00:10:29.980 --> 00:10:31.720
going to be on time.

00:10:31.720 --> 00:10:35.970
A temporary loss, but
you can expect it back.

00:10:35.970 --> 00:10:38.710
So in this case, loss
transient means you should just

00:10:38.710 --> 00:10:41.305
pause your media playback.

00:10:41.305 --> 00:10:43.680
Now, there's the other one
you may be very familiar with,

00:10:43.680 --> 00:10:46.210
which is the
LOSS_TRANSIENT_CAN_DUCK.

00:10:46.210 --> 00:10:48.820
Now, this is the
basic-- like when

00:10:48.820 --> 00:10:51.150
a notification sound comes in.

00:10:51.150 --> 00:10:53.810
And in this case,
the expectation

00:10:53.810 --> 00:10:56.010
is that you're going
to lower the volume.

00:10:56.010 --> 00:10:58.670
You don't necessarily
need to pause completely.

00:10:58.670 --> 00:11:01.270
But you just lower the volume
so that the other sound

00:11:01.270 --> 00:11:02.640
to be heard clearly.

00:11:02.640 --> 00:11:07.720
And then you'll regain
audio focus with audio gain.

00:11:07.720 --> 00:11:10.440
Now, one thing to keep
in mind with the CAN_DUCK

00:11:10.440 --> 00:11:13.510
is that you don't have
to lower your volume.

00:11:13.510 --> 00:11:15.140
You can actually pause.

00:11:15.140 --> 00:11:17.470
For example, if you're
a podcast playing out,

00:11:17.470 --> 00:11:19.350
and you're having
spoken words, it's

00:11:19.350 --> 00:11:21.320
very important
that the user hears

00:11:21.320 --> 00:11:22.500
everything that's going on.

00:11:22.500 --> 00:11:26.540
And maybe they don't want
Google Maps talking over them.

00:11:26.540 --> 00:11:30.150
You can actually pause
for any of these events

00:11:30.150 --> 00:11:33.110
and then resume when
you get audio gains.

00:11:33.110 --> 00:11:37.120
So there aren't necessarily
requirements to do anything.

00:11:37.120 --> 00:11:40.610
But in any case, you should be
respecting these audio focus

00:11:40.610 --> 00:11:41.110
changes.

00:11:44.160 --> 00:11:47.810
So what is our
updated life cycle?

00:11:47.810 --> 00:11:50.390
So we can see here
now, we're requesting

00:11:50.390 --> 00:11:52.260
focus when we start playback.

00:11:52.260 --> 00:11:55.580
And we're removing
focus, abandoning focus,

00:11:55.580 --> 00:11:57.400
when we're actually stopped.

00:11:57.400 --> 00:12:01.010
Now, note this isn't tied
to playing audio or back.

00:12:01.010 --> 00:12:04.080
And even with just
this, we already

00:12:04.080 --> 00:12:07.740
are a lot better
citizen and working well

00:12:07.740 --> 00:12:10.460
with the system and
other media apps.

00:12:10.460 --> 00:12:12.486
But are we done?

00:12:12.486 --> 00:12:13.420
We're done?

00:12:13.420 --> 00:12:13.475
No.

00:12:13.475 --> 00:12:13.974
All right.

00:12:13.974 --> 00:12:16.750
So more to go, and
that's fine because these

00:12:16.750 --> 00:12:19.830
are important things that
users are going to expect.

00:12:19.830 --> 00:12:22.480
Now, one of the things--
and probably my favorite

00:12:22.480 --> 00:12:26.250
named broadcast-- is the
becoming noisy broadcast, which

00:12:26.250 --> 00:12:27.990
is exactly how it sounds.

00:12:27.990 --> 00:12:30.240
It's actually when you're
listening to something

00:12:30.240 --> 00:12:32.750
on headphones or a
Bluetooth headset,

00:12:32.750 --> 00:12:35.920
and the Bluetooth headset
runs on batteries,

00:12:35.920 --> 00:12:38.280
or the headphone
gets yanked out.

00:12:38.280 --> 00:12:42.430
And all of a sudden, it's
blaring to the whole crowd,

00:12:42.430 --> 00:12:45.060
to the whole audience, of
wow, that's really what

00:12:45.060 --> 00:12:47.400
you're listening to right now.

00:12:47.400 --> 00:12:51.290
Probably should have
used becoming noisy

00:12:51.290 --> 00:12:54.260
to be able to pause
your playback.

00:12:54.260 --> 00:12:55.940
So it's a really
nice way of saying,

00:12:55.940 --> 00:13:01.010
OK, well, the user is expecting
that they are not blaring out

00:13:01.010 --> 00:13:02.380
their music to everyone.

00:13:02.380 --> 00:13:05.840
And we can register a becoming
noisy broadcast very simply

00:13:05.840 --> 00:13:10.870
with register receiver, and
then, of course, unregistering.

00:13:10.870 --> 00:13:13.280
Now in this case,
because this is

00:13:13.280 --> 00:13:17.810
tied to not wanting to blare
music out to the world,

00:13:17.810 --> 00:13:22.680
these events are going to be
tied into the actual Playing

00:13:22.680 --> 00:13:24.350
and Pause state.

00:13:24.350 --> 00:13:26.700
So only when we're
outputting audio

00:13:26.700 --> 00:13:30.780
are we going to want to
register for the becoming noisy,

00:13:30.780 --> 00:13:34.420
and then unregister when
we actually pause playback.

00:13:34.420 --> 00:13:35.710
So slightly different here.

00:13:35.710 --> 00:13:39.060
And actually at this point,
we're at a fairly decent state.

00:13:39.060 --> 00:13:42.340
We're never going to be playing
audio when the user is not

00:13:42.340 --> 00:13:43.610
expecting it.

00:13:43.610 --> 00:13:46.210
And we're going to play well
with other apps that are doing

00:13:46.210 --> 00:13:47.630
notifications or other things.

00:13:47.630 --> 00:13:52.650
But we're not quite to the
best media playback experience.

00:13:52.650 --> 00:13:55.790
In fact, we haven't talked
about controls at all.

00:13:55.790 --> 00:13:59.260
And it's certainly one of
those very frustrating things

00:13:59.260 --> 00:14:01.690
when you're trying to find
the Pause button, or the Play

00:14:01.690 --> 00:14:04.600
button, or the Next Track
button because that track isn't

00:14:04.600 --> 00:14:07.140
appropriate for everyone
who's in the car,

00:14:07.140 --> 00:14:10.730
and you want that control
available as many places as

00:14:10.730 --> 00:14:11.260
possible.

00:14:11.260 --> 00:14:12.970
You don't want to
dive into an app

00:14:12.970 --> 00:14:15.980
and find it in your
recents, or what have you.

00:14:15.980 --> 00:14:18.620
So thankfully, Android
offers a lot of ways

00:14:18.620 --> 00:14:21.730
to actually get
controls everywhere.

00:14:21.730 --> 00:14:24.120
And one of the ones that's
most frustrating in our work

00:14:24.120 --> 00:14:26.550
are headphones and
Bluetooth controls--

00:14:26.550 --> 00:14:29.410
the times when you're
really listening to music,

00:14:29.410 --> 00:14:31.660
and you don't necessarily
want to pull off your phone.

00:14:31.660 --> 00:14:33.430
And they have
buttons on them now.

00:14:33.430 --> 00:14:36.680
So we should probably
get those working.

00:14:36.680 --> 00:14:39.990
And collectively, these
are called media buttons.

00:14:39.990 --> 00:14:42.210
In fact, they're just
like any other button

00:14:42.210 --> 00:14:44.090
that is hit on the system.

00:14:44.090 --> 00:14:46.920
They're key events that
are sent to the system

00:14:46.920 --> 00:14:49.080
and onto your apps.

00:14:49.080 --> 00:14:51.560
And by default, the
system is actually

00:14:51.560 --> 00:14:54.040
going to capture all of
these and then send them out

00:14:54.040 --> 00:14:57.030
as a media button
broadcast, which, of course,

00:14:57.030 --> 00:15:00.240
your app can then
receive and handle.

00:15:00.240 --> 00:15:02.910
And you can build just a
simple broadcast receiver.

00:15:02.910 --> 00:15:06.200
The button extracts a key
event and then does work on it.

00:15:06.200 --> 00:15:09.490
And we found that basically
all of these receivers

00:15:09.490 --> 00:15:12.230
were doing the exact same thing.

00:15:12.230 --> 00:15:13.750
They need to look
at a key event,

00:15:13.750 --> 00:15:17.290
and then extract from the
intent what the key event was,

00:15:17.290 --> 00:15:20.260
and then somehow transfer
that to our service.

00:15:20.260 --> 00:15:21.970
So we built it all for you.

00:15:21.970 --> 00:15:25.160
We built a media button receiver
in the Support Library, version

00:15:25.160 --> 00:15:28.560
23.1 and higher, so
that it kind of handles

00:15:28.560 --> 00:15:31.180
a lot of the
boilerplate for you.

00:15:31.180 --> 00:15:32.390
How does it work?

00:15:32.390 --> 00:15:34.390
You have no code whatsoever.

00:15:34.390 --> 00:15:36.340
It's just a few
manifest entries.

00:15:36.340 --> 00:15:38.090
You'll add it to your manifest.

00:15:38.090 --> 00:15:42.940
You'll note our media
button intent filter here.

00:15:42.940 --> 00:15:46.100
And then, instead of writing
all the code yourself,

00:15:46.100 --> 00:15:47.570
what it's going to
do is it's going

00:15:47.570 --> 00:15:51.330
to look for a service that's
also in your manifest that has

00:15:51.330 --> 00:15:54.020
that same media button intent.

00:15:54.020 --> 00:15:57.890
And what it'll do is every time
the broadcast receiver receives

00:15:57.890 --> 00:15:59.930
a media button intent,
it will forward

00:15:59.930 --> 00:16:03.600
that on to your service,
which makes it really nice

00:16:03.600 --> 00:16:07.040
because in your service
that has your media player

00:16:07.040 --> 00:16:10.610
and that type of things, you can
actually act on those events.

00:16:10.610 --> 00:16:14.290
The big problem we found
was that in so many times

00:16:14.290 --> 00:16:17.060
you want the broadcast
receiver to say, oh,

00:16:17.060 --> 00:16:20.380
you hit the Play/Pause button,
or you hit the Next Track

00:16:20.380 --> 00:16:20.929
button.

00:16:20.929 --> 00:16:23.470
Now all of a sudden I need to
somehow get that to my service.

00:16:23.470 --> 00:16:26.510
And this really helps
in that common case.

00:16:26.510 --> 00:16:28.890
So one problem though,
if you have this code,

00:16:28.890 --> 00:16:31.860
it won't actually work.

00:16:31.860 --> 00:16:33.470
Thanks, Ian.

00:16:33.470 --> 00:16:37.540
But it turns out that this
is an important thing for all

00:16:37.540 --> 00:16:40.650
of Android in that there's
what's called a preferred media

00:16:40.650 --> 00:16:42.460
button receiver.

00:16:42.460 --> 00:16:44.590
In fact, it's probably
not a very good idea

00:16:44.590 --> 00:16:47.180
if every media app
on your phone all

00:16:47.180 --> 00:16:49.100
received every media button.

00:16:49.100 --> 00:16:51.680
First, we'd have many,
many processes starting

00:16:51.680 --> 00:16:54.190
at the same time, as
well as, of course,

00:16:54.190 --> 00:16:56.030
there's usually
only one app that

00:16:56.030 --> 00:16:58.420
has audio focus that
wants to play back

00:16:58.420 --> 00:17:02.690
apps that is actually the one
that is the preferred app.

00:17:02.690 --> 00:17:05.054
So it's very similar to
audio focus in that it's

00:17:05.054 --> 00:17:07.096
a "last wins" kind of model.

00:17:07.096 --> 00:17:09.720
If you're the last one to say,
I want to be the preferred media

00:17:09.720 --> 00:17:12.780
button receiver, then you'll
become the preferred button

00:17:12.780 --> 00:17:13.800
receiver.

00:17:13.800 --> 00:17:16.960
So if you've ever had
like Play Music take over

00:17:16.960 --> 00:17:18.550
when you hit the
Play/Pause button,

00:17:18.550 --> 00:17:20.310
or when you get into
your car, that's

00:17:20.310 --> 00:17:23.520
usually the app you're
expecting not actually handling

00:17:23.520 --> 00:17:26.040
being the preferred
media button receiver.

00:17:26.040 --> 00:17:27.700
So if all apps do
this correctly,

00:17:27.700 --> 00:17:30.180
then when you do get in your
car and your Bluetooth auto

00:17:30.180 --> 00:17:31.980
connects, and it
starts playback,

00:17:31.980 --> 00:17:34.890
it's actually going to start
the app that you actually last

00:17:34.890 --> 00:17:39.680
used rather than the one that
was just last registered.

00:17:39.680 --> 00:17:42.930
So that's really where
MediaSessionCompat,

00:17:42.930 --> 00:17:44.700
another class, comes in.

00:17:44.700 --> 00:17:47.060
It's really that
consolidated connection

00:17:47.060 --> 00:17:50.860
between your app and the system.

00:17:50.860 --> 00:17:54.480
And it's actually doing a lot
more than you might imagine.

00:17:54.480 --> 00:17:59.310
So we built the MediaSession
APIs in LOLLIPOP.

00:17:59.310 --> 00:18:02.280
And MediaSession brings
that back to every app,

00:18:02.280 --> 00:18:05.990
even down to V4, if
you're that person who's

00:18:05.990 --> 00:18:07.400
still supporting V4.

00:18:07.400 --> 00:18:09.530
Please, no V4s.

00:18:09.530 --> 00:18:11.530
The 8 maybe?

00:18:11.530 --> 00:18:13.810
Everything cool in media
starts at about V8,

00:18:13.810 --> 00:18:17.270
so we were covering everyone
with MediaSessionCompat.

00:18:17.270 --> 00:18:20.610
And it's actually doing just
about everything for you

00:18:20.610 --> 00:18:23.050
with just a simple few methods.

00:18:23.050 --> 00:18:26.280
But of course, we do
want to create it.

00:18:26.280 --> 00:18:29.050
And there's one thing
you want to do especially

00:18:29.050 --> 00:18:31.200
is make sure you're
setting flags.

00:18:31.200 --> 00:18:35.080
You want to set both media
buttons and the transport

00:18:35.080 --> 00:18:35.920
controls flag.

00:18:35.920 --> 00:18:38.490
This is what actually allows
some of those connections

00:18:38.490 --> 00:18:39.990
to your app.

00:18:39.990 --> 00:18:43.600
Now, if you're doing a very
temporary thing, like showing

00:18:43.600 --> 00:18:46.600
an advertisement that probably
shouldn't have these actions,

00:18:46.600 --> 00:18:48.400
those flags are actually
a really good way

00:18:48.400 --> 00:18:52.070
of turning those off temporarily
and then turning them back on.

00:18:52.070 --> 00:18:54.810
But for the most [? part, ?]
[? this ?] [? is ?] for media

00:18:54.810 --> 00:18:55.537
playback.

00:18:55.537 --> 00:18:57.870
You'll want to just always
supposed set those two flags.

00:18:57.870 --> 00:19:01.890
And then we have this
concept of callbacks.

00:19:01.890 --> 00:19:06.530
And these callbacks are
really the onPlay, onPause,

00:19:06.530 --> 00:19:11.000
basically all of the events that
your app wants to respond to.

00:19:11.000 --> 00:19:14.240
And [? what ?] [? we'll ?] use
our callbacks for is the main

00:19:14.240 --> 00:19:17.580
way of interacting
with Media Player.

00:19:17.580 --> 00:19:21.340
So everything that's coming into
your service, everything that's

00:19:21.340 --> 00:19:25.860
coming into your app, then goes
through one of these callbacks

00:19:25.860 --> 00:19:29.080
to actually then trigger
the media player.

00:19:29.080 --> 00:19:30.640
The nice part
about this solution

00:19:30.640 --> 00:19:32.210
is that it works
really well if you

00:19:32.210 --> 00:19:34.840
do want to enable
Cast in your media app

00:19:34.840 --> 00:19:37.060
because you can just
switch out your callbacks,

00:19:37.060 --> 00:19:41.180
and switch from local
callbacks to remote callbacks,

00:19:41.180 --> 00:19:43.900
and not have to actually touch
any of the rest of your code.

00:19:43.900 --> 00:19:47.510
Just have onPlay and
onPause do a different thing

00:19:47.510 --> 00:19:51.750
based on whatever the
current callback is.

00:19:51.750 --> 00:19:55.180
So the one thing we actually
need to really do then

00:19:55.180 --> 00:19:57.840
to become the preferred
media button playback

00:19:57.840 --> 00:19:59.930
is called setActive.

00:19:59.930 --> 00:20:03.260
And we'll setActive to true
basically at the same time

00:20:03.260 --> 00:20:04.960
we're requesting
audio focus, and we've

00:20:04.960 --> 00:20:09.040
been granted audio focus,
and then setActive to false

00:20:09.040 --> 00:20:11.120
when we actually stop.

00:20:11.120 --> 00:20:13.440
So this is the
important part that's

00:20:13.440 --> 00:20:16.760
actually going to get us to
the preferred media button

00:20:16.760 --> 00:20:17.370
receiver.

00:20:17.370 --> 00:20:20.090
And you'll note the once
we call these lines,

00:20:20.090 --> 00:20:22.480
then magically, all of
our broadcast receivers

00:20:22.480 --> 00:20:24.330
start working.

00:20:24.330 --> 00:20:26.430
This is also the
exact time where

00:20:26.430 --> 00:20:29.830
we can use media button
receiver's other handy method,

00:20:29.830 --> 00:20:31.920
which is handle Intent.

00:20:31.920 --> 00:20:36.070
So this handle Intent takes
in your MediaSessionCompat,

00:20:36.070 --> 00:20:38.850
extracts the key events,
and then hands it

00:20:38.850 --> 00:20:41.330
off to your callbacks,
all without having

00:20:41.330 --> 00:20:42.530
to write any more code.

00:20:42.530 --> 00:20:45.130
It's just one line in
your onStart command.

00:20:45.130 --> 00:20:46.920
And all of a sudden
your callbacks

00:20:46.920 --> 00:20:49.250
are then receiving
media button events

00:20:49.250 --> 00:20:52.580
without you having to
write or decode key events

00:20:52.580 --> 00:20:54.590
to get through all that.

00:20:54.590 --> 00:20:57.340
Now, there's one wrinkle
though because how does it

00:20:57.340 --> 00:20:58.940
know that when you
hit the Play/Pause

00:20:58.940 --> 00:21:03.750
button on your Bluetooth
remote that you want to play

00:21:03.750 --> 00:21:05.160
or you want to pause?

00:21:05.160 --> 00:21:07.800
We haven't actually told
you what's going on.

00:21:07.800 --> 00:21:11.050
We haven't told the
system anything.

00:21:11.050 --> 00:21:14.480
So that's what
PlaybackStateCompat is for.

00:21:14.480 --> 00:21:16.830
It's actually how you
tell the system what's

00:21:16.830 --> 00:21:18.050
currently going on.

00:21:18.050 --> 00:21:19.660
And there's actually
two parts to it.

00:21:19.660 --> 00:21:21.590
One is setState.

00:21:21.590 --> 00:21:23.780
So this is what's
currently going on.

00:21:23.780 --> 00:21:28.590
So this is like StatePlaying,
StatePaused, Buffering, as well

00:21:28.590 --> 00:21:29.930
as kind of your position.

00:21:29.930 --> 00:21:32.280
So if you're 30
seconds into a track,

00:21:32.280 --> 00:21:35.000
you'll set the position to 30.

00:21:35.000 --> 00:21:37.380
The other part is setActions.

00:21:37.380 --> 00:21:41.190
Now, setActions are what
controls we support.

00:21:41.190 --> 00:21:44.250
So you'll definitely want
to support, say, Play/Pause

00:21:44.250 --> 00:21:45.550
and Stop.

00:21:45.550 --> 00:21:48.950
But of course, if you
support SkipToNext or not,

00:21:48.950 --> 00:21:50.740
those actions are
actually going to be

00:21:50.740 --> 00:21:52.810
really important to set here.

00:21:52.810 --> 00:21:54.680
If you don't set
those actions here,

00:21:54.680 --> 00:21:56.900
you won't get media
buttons for them,

00:21:56.900 --> 00:21:59.500
and you won't get
controls on Android Wear

00:21:59.500 --> 00:22:02.100
and on Android Auto as well.

00:22:02.100 --> 00:22:04.890
They all rely on those
actions to be set.

00:22:04.890 --> 00:22:08.160
So if you want to
support Rewind,

00:22:08.160 --> 00:22:11.530
again, one of the
actions you need to add.

00:22:11.530 --> 00:22:14.620
So these are actually grouped
together because many times

00:22:14.620 --> 00:22:17.100
they could change
at the same time.

00:22:17.100 --> 00:22:19.550
If you are buffering,
you probably

00:22:19.550 --> 00:22:21.320
don't have a FastForward button.

00:22:21.320 --> 00:22:25.980
If you're paused, you probably
don't have a Pause button.

00:22:25.980 --> 00:22:28.670
You'll want to switch the
actions at the same time you're

00:22:28.670 --> 00:22:32.100
switching your state.

00:22:32.100 --> 00:22:34.290
What about those cool
lock screen controls?

00:22:34.290 --> 00:22:36.365
We added them in
Ice Cream Sandwich.

00:22:36.365 --> 00:22:39.350
And you could Play/Pause
without unlocking your phone.

00:22:39.350 --> 00:22:42.620
It's probably the coolest thing,
except for the whole combining

00:22:42.620 --> 00:22:44.540
phones and tablets
together, but that's not

00:22:44.540 --> 00:22:47.290
important for this talk.

00:22:47.290 --> 00:22:48.990
And it's actually pretty easy.

00:22:48.990 --> 00:22:51.250
It requires a little
bit of metadata.

00:22:51.250 --> 00:22:56.840
In fact, a picture would be
required for this information.

00:22:56.840 --> 00:23:00.545
Now, this is actually used
for a lot more than just

00:23:00.545 --> 00:23:01.420
lock screen controls.

00:23:01.420 --> 00:23:04.780
Like Android Wear, we'll
take the background image

00:23:04.780 --> 00:23:07.740
from your metadata.

00:23:07.740 --> 00:23:09.360
So what kinds of metadata?

00:23:09.360 --> 00:23:12.750
Well there's actually like 27
different kinds of metadata

00:23:12.750 --> 00:23:13.770
you can add.

00:23:13.770 --> 00:23:15.410
These are the most
important ones,

00:23:15.410 --> 00:23:19.410
the ones you'd expect--
Title, Album, Artist,

00:23:19.410 --> 00:23:22.370
AlbumArtist, if that's a
different thing-- as well

00:23:22.370 --> 00:23:24.060
as the duration.

00:23:24.060 --> 00:23:26.390
It goes really well
with that position.

00:23:26.390 --> 00:23:29.270
We added it in playback
state, as well as

00:23:29.270 --> 00:23:30.960
the actual images themselves.

00:23:30.960 --> 00:23:33.240
You can store them
as bitmaps or provide

00:23:33.240 --> 00:23:37.990
URIs to content URIs, which
then the app can read.

00:23:37.990 --> 00:23:42.010
Now, really, really
don't store like 4,000

00:23:42.010 --> 00:23:44.430
by 4,000 pixel bitmaps in this.

00:23:44.430 --> 00:23:46.510
These are sent to other apps.

00:23:46.510 --> 00:23:48.620
So if you're doing
it, you probably

00:23:48.620 --> 00:23:51.480
want to set a smaller
image in a bitmap

00:23:51.480 --> 00:23:55.440
and then provide a URI for the
full-size image in case apps

00:23:55.440 --> 00:23:59.980
really do one level
of information.

00:23:59.980 --> 00:24:02.840
So how does this actually
work with our playback,

00:24:02.840 --> 00:24:03.770
with our life cycle?

00:24:03.770 --> 00:24:07.280
Well, we'll want to create
setFlag, setCallback

00:24:07.280 --> 00:24:10.450
in onCreate, and then
setActive to make

00:24:10.450 --> 00:24:13.642
sure our metadata and state are
updated when we start playing.

00:24:13.642 --> 00:24:15.100
And then, of course,
when we pause,

00:24:15.100 --> 00:24:17.090
we'll want to update our state.

00:24:17.090 --> 00:24:20.690
Stopped will setActive
to false similarly,

00:24:20.690 --> 00:24:22.780
again, along with
our audio focus.

00:24:22.780 --> 00:24:25.750
And then we'll release
when we're all done.

00:24:25.750 --> 00:24:29.960
So lock screen controls,
like how old are those?

00:24:29.960 --> 00:24:32.820
We actually removed all of them.

00:24:32.820 --> 00:24:35.657
So in fact, notifications
are the new hotness

00:24:35.657 --> 00:24:36.490
for the lock screen.

00:24:36.490 --> 00:24:39.610
And in fact, you probably should
have been using notifications

00:24:39.610 --> 00:24:40.320
all along.

00:24:40.320 --> 00:24:41.510
They're kind of a big deal.

00:24:41.510 --> 00:24:45.100
It doesn't really make sense
to lock your phone just

00:24:45.100 --> 00:24:47.370
to get to media controls.

00:24:47.370 --> 00:24:51.930
So having notifications actually
turns out to be really useful.

00:24:51.930 --> 00:24:54.280
But writing a
custom notification

00:24:54.280 --> 00:24:56.660
that does media
controls and have it

00:24:56.660 --> 00:25:00.720
work well on every device--
it's actually really hard.

00:25:00.720 --> 00:25:03.060
So we built it for you.

00:25:03.060 --> 00:25:07.460
We backported the
MediaStyle notification,

00:25:07.460 --> 00:25:10.790
which was added in LOLLIPOP,
so that now you can use it

00:25:10.790 --> 00:25:12.280
on all platform versions.

00:25:12.280 --> 00:25:15.610
But that did come
with a few caveats.

00:25:15.610 --> 00:25:17.879
First of all, prior
to API 14, you

00:25:17.879 --> 00:25:20.045
couldn't actually have
buttons in your notification.

00:25:20.045 --> 00:25:22.200
It was just one click target.

00:25:22.200 --> 00:25:23.570
Can you imagine?

00:25:23.570 --> 00:25:25.990
It must have been horrible.

00:25:25.990 --> 00:25:27.680
But we've moved on.

00:25:27.680 --> 00:25:30.020
But thankfully, MediaStyle
will just continue to work.

00:25:30.020 --> 00:25:33.120
It will give you the best
effort it can at that level.

00:25:33.120 --> 00:25:36.790
An API 14, we actually
can add actions.

00:25:36.790 --> 00:25:39.450
So you'll note there it
could be up to three actions

00:25:39.450 --> 00:25:41.880
in the collapsed view,
that single line view,

00:25:41.880 --> 00:25:44.010
of the notification.

00:25:44.010 --> 00:25:48.180
API 16, Jelly Bean, added
expanded notifications

00:25:48.180 --> 00:25:50.890
where now we can have
up to five actions.

00:25:50.890 --> 00:25:52.700
And on 5.0 and
higher, we'll just

00:25:52.700 --> 00:25:54.560
use the framework MediaStyle.

00:25:54.560 --> 00:25:56.670
So as we change
things, and things

00:25:56.670 --> 00:25:59.070
get even better, or
the styling changes,

00:25:59.070 --> 00:26:03.540
you'll always know that you
are in sync with the framework

00:26:03.540 --> 00:26:08.200
at all API 21 and higher.

00:26:08.200 --> 00:26:11.070
So I don't like
writing boilerplate.

00:26:11.070 --> 00:26:13.730
I'm sure many of you
love writing boilerplate.

00:26:13.730 --> 00:26:14.620
Boilerplate?

00:26:14.620 --> 00:26:15.630
No?

00:26:15.630 --> 00:26:16.130
Wow.

00:26:16.130 --> 00:26:16.950
You all hate boilerplate, too.

00:26:16.950 --> 00:26:17.600
So it's OK.

00:26:17.600 --> 00:26:21.840
I wrote it for you because
I want you guys to save

00:26:21.840 --> 00:26:24.000
as much time as possible.

00:26:24.000 --> 00:26:27.190
And so I built this
helper that actually takes

00:26:27.190 --> 00:26:31.510
a MediaSessionCompat and
builds a notification for you.

00:26:31.510 --> 00:26:35.230
And it all relies on
MediaMetadata's getDescription.

00:26:35.230 --> 00:26:38.980
So getDescription actually looks
at all of those metadata fields

00:26:38.980 --> 00:26:41.960
that you've added and extracts
just the most important

00:26:41.960 --> 00:26:43.270
information from it.

00:26:43.270 --> 00:26:46.410
It turns out that it extracts
the same information,

00:26:46.410 --> 00:26:48.300
the same fields, that
I already talked about.

00:26:48.300 --> 00:26:51.200
It's like I planned it that way.

00:26:51.200 --> 00:26:55.800
But there's actually
display-specific metadata items

00:26:55.800 --> 00:26:59.290
if you want to specifically
override this case because this

00:26:59.290 --> 00:27:03.150
is actually what Android
Wear is also going to use.

00:27:03.150 --> 00:27:05.510
But once we have
that description,

00:27:05.510 --> 00:27:08.320
we can actually build
most of our notification

00:27:08.320 --> 00:27:10.290
directly from that
description-- getting

00:27:10.290 --> 00:27:14.490
the title, the text, and any
subtext that's available,

00:27:14.490 --> 00:27:19.030
as well as a large icon
in the actual icon itself.

00:27:19.030 --> 00:27:20.920
We can also actually
fill out other things,

00:27:20.920 --> 00:27:23.370
like the Click Intent
for going through.

00:27:23.370 --> 00:27:26.430
As long as we call
setSessionActivity

00:27:26.430 --> 00:27:29.130
on our MediaSessionCompat,
we can then pull it out

00:27:29.130 --> 00:27:31.410
for our notification.

00:27:31.410 --> 00:27:33.650
Additionally in
LOLLIPOP, there's

00:27:33.650 --> 00:27:35.740
a concept of hidden
notifications.

00:27:35.740 --> 00:27:37.820
You may not want all
of your notifications

00:27:37.820 --> 00:27:40.390
on the lock screen all the time.

00:27:40.390 --> 00:27:44.430
So for these notifications
for media controls,

00:27:44.430 --> 00:27:46.940
you probably want to
set them to Public.

00:27:46.940 --> 00:27:49.080
That way people
can interact even

00:27:49.080 --> 00:27:52.950
if they've chosen to hide
their other notifications.

00:27:52.950 --> 00:27:55.330
And then, of course, when
the notification is actually

00:27:55.330 --> 00:27:58.800
removed, swiped away,
we'll want to stopPlayback.

00:27:58.800 --> 00:28:00.510
We don't necessarily
want the user

00:28:00.510 --> 00:28:04.520
to continue to hear music when
they specifically swiped away

00:28:04.520 --> 00:28:06.610
our notification.

00:28:06.610 --> 00:28:09.060
So you'll note we actually
use a different one called

00:28:09.060 --> 00:28:10.430
getActionIntent.

00:28:10.430 --> 00:28:12.880
And that's actually fairly easy.

00:28:12.880 --> 00:28:16.840
It's basically me faking
what you'd receive as a media

00:28:16.840 --> 00:28:19.430
button, building
our own key intent,

00:28:19.430 --> 00:28:21.070
and then building a broadcast.

00:28:21.070 --> 00:28:24.480
That's just going to trigger
that same media button

00:28:24.480 --> 00:28:27.220
receiver, going to your
service, going to your callback.

00:28:27.220 --> 00:28:30.170
So again, you don't need
to write anything more

00:28:30.170 --> 00:28:30.960
of all this.

00:28:30.960 --> 00:28:34.380
So I actually have a gist
available of all this code,

00:28:34.380 --> 00:28:36.834
so I'm sure you're
furiously writing.

00:28:36.834 --> 00:28:38.500
There must be someone
furiously writing.

00:28:38.500 --> 00:28:38.970
No?

00:28:38.970 --> 00:28:40.470
You're just working
on your laptops.

00:28:40.470 --> 00:28:41.350
That's fine.

00:28:41.350 --> 00:28:41.850
That's fine.

00:28:41.850 --> 00:28:43.350
I understand.

00:28:43.350 --> 00:28:45.250
So let's actually
build our notification.

00:28:45.250 --> 00:28:48.470
You'll still need a small
icon for the status bar.

00:28:48.470 --> 00:28:50.510
And there's one
thing that's slightly

00:28:50.510 --> 00:28:53.010
different about MediaStyle
notifications in that

00:28:53.010 --> 00:28:56.780
the color, rather than just
affecting the small icon,

00:28:56.780 --> 00:29:00.080
it's going to fill the whole
background of the image.

00:29:00.080 --> 00:29:03.500
So bright orange--
not a good idea.

00:29:03.500 --> 00:29:05.640
Generally, you want
to use something

00:29:05.640 --> 00:29:07.300
branded for your color.

00:29:07.300 --> 00:29:10.487
The primary dark is actually
a really good example

00:29:10.487 --> 00:29:11.320
of something to use.

00:29:11.320 --> 00:29:13.570
But you could also use
a more neutral color.

00:29:13.570 --> 00:29:17.590
By default, it will
default to a gray color.

00:29:17.590 --> 00:29:20.512
So it wouldn't be much
of a media notification

00:29:20.512 --> 00:29:21.720
if it didn't have any action.

00:29:21.720 --> 00:29:24.720
So I'd say a Play/Pause
action, and then

00:29:24.720 --> 00:29:28.890
actually use our getActionIntent
to help us build the pending

00:29:28.890 --> 00:29:30.460
intent that we need.

00:29:30.460 --> 00:29:35.130
And then we'll actually
call creating a media style.

00:29:35.130 --> 00:29:37.780
So this media style actually
requires that we then

00:29:37.780 --> 00:29:40.540
choose which actions,
zero indexed,

00:29:40.540 --> 00:29:42.660
you want to display
in that compact view,

00:29:42.660 --> 00:29:43.730
that single line view.

00:29:43.730 --> 00:29:46.130
In this case, we'll show
our Play/Pause button

00:29:46.130 --> 00:29:47.780
because that's kind of useful.

00:29:47.780 --> 00:29:50.224
But you may want to show,
say, an NextTrack button-- is

00:29:50.224 --> 00:29:52.390
a really good example of
something you may also want

00:29:52.390 --> 00:29:53.660
to show in the compact view.

00:29:56.220 --> 00:29:58.430
We want to set
the media session.

00:29:58.430 --> 00:30:02.050
So this SessionToken is
actually really critical

00:30:02.050 --> 00:30:04.700
to get things like
Android Wear working.

00:30:04.700 --> 00:30:06.100
So Android Wear
is actually going

00:30:06.100 --> 00:30:10.190
to use that SessionToken to
pass callbacks to you on Android

00:30:10.190 --> 00:30:11.620
5.0 and higher devices.

00:30:11.620 --> 00:30:14.940
So if you forget this line,
you get a great notification

00:30:14.940 --> 00:30:16.109
that appears on your wrist.

00:30:16.109 --> 00:30:17.650
And you'll hit the
Play/Pause button,

00:30:17.650 --> 00:30:18.990
and it won't do anything.

00:30:18.990 --> 00:30:21.110
And your users will
be so frustrated.

00:30:21.110 --> 00:30:23.090
So thankfully,
it's just one line.

00:30:23.090 --> 00:30:24.400
It's super easy to add.

00:30:24.400 --> 00:30:26.960
Just make sure you add it.

00:30:26.960 --> 00:30:30.690
So Lifecycle-wise, here we have
we're showing our notification.

00:30:30.690 --> 00:30:32.570
When we start playing,
we'll pause it.

00:30:32.570 --> 00:30:34.880
We'll update it when we're
paused, any time we're

00:30:34.880 --> 00:30:36.360
changing the state.

00:30:36.360 --> 00:30:38.900
And then, of course, when
we're stopped or destroyed,

00:30:38.900 --> 00:30:41.367
we'll want to clear
the notification.

00:30:41.367 --> 00:30:42.950
Now, one thing you
might consider here

00:30:42.950 --> 00:30:46.340
is sometimes it makes sense to
actually keep your notification

00:30:46.340 --> 00:30:48.850
around just a little bit
longer before you're actually

00:30:48.850 --> 00:30:51.680
stopped in case the
user wants to restart.

00:30:51.680 --> 00:30:53.780
Say they reach the
end of their playlist.

00:30:53.780 --> 00:30:56.650
So don't consider it
necessarily a hard requirement

00:30:56.650 --> 00:30:57.930
to remove your notification.

00:30:57.930 --> 00:31:01.380
But in all cases, you should
consider maybe a timeout kind

00:31:01.380 --> 00:31:04.470
of a system.

00:31:04.470 --> 00:31:06.410
So media playback
is actually one

00:31:06.410 --> 00:31:08.160
of the things that's
actually going

00:31:08.160 --> 00:31:11.170
to be a really good candidate
for foreground services.

00:31:11.170 --> 00:31:14.270
Foreground services raise the
priority of your background

00:31:14.270 --> 00:31:19.260
service such that it isn't
killed in only the most extreme

00:31:19.260 --> 00:31:20.860
memory conditions.

00:31:20.860 --> 00:31:24.770
So this is great because it's
super noticeable when the media

00:31:24.770 --> 00:31:26.980
playback app is killed
in the background,

00:31:26.980 --> 00:31:29.810
because media playback stops.

00:31:29.810 --> 00:31:33.650
So foreground services
have a requirement

00:31:33.650 --> 00:31:36.060
that you have a notification.

00:31:36.060 --> 00:31:38.590
And thankfully, we just
built a notification.

00:31:38.590 --> 00:31:41.250
So it should be fairly easy
to get this actually started

00:31:41.250 --> 00:31:43.250
as a foreground service.

00:31:43.250 --> 00:31:45.890
Now, there's one caveat, though.

00:31:45.890 --> 00:31:51.060
Prior to LOLLIPOP, if you
call stopForeground false,

00:31:51.060 --> 00:31:54.430
you actually can't slight
(dismiss) the notification.

00:31:54.430 --> 00:31:58.340
And this is actually a really
common case in media playback

00:31:58.340 --> 00:31:59.830
apps because you
don't necessarily

00:31:59.830 --> 00:32:03.770
need to be a foreground service
when you're not playing audio.

00:32:03.770 --> 00:32:09.097
In theory in the most
memory-hard areas,

00:32:09.097 --> 00:32:11.430
you'll probably not want to
be a foreground service when

00:32:11.430 --> 00:32:14.470
you're Stopped playback.

00:32:14.470 --> 00:32:16.551
So how do I work
around this Bug ?

00:32:16.551 --> 00:32:17.550
We fixed it in LOLLIPOP.

00:32:17.550 --> 00:32:21.110
But that doesn't help people
who are not in SDK 21.

00:32:21.110 --> 00:32:23.900
Anyone?

00:32:23.900 --> 00:32:26.350
No one lucky here.

00:32:26.350 --> 00:32:29.580
So MediaStyle kind of
built something for it--

00:32:29.580 --> 00:32:30.910
the Cancel button.

00:32:30.910 --> 00:32:34.890
A simple X in the corner
that allows users, even prior

00:32:34.890 --> 00:32:37.470
to LOLLIPOP, to remove
your notification,

00:32:37.470 --> 00:32:41.320
even though they can't
ever swipe it away.

00:32:41.320 --> 00:32:45.130
So actually extremely
easy to add your call.

00:32:45.130 --> 00:32:48.790
Set show CancelButton true,
and then add the intent

00:32:48.790 --> 00:32:50.830
to send StopPlayback.

00:32:50.830 --> 00:32:54.650
Now, the nice part is because
we fixed it in LOLLIPOP,

00:32:54.650 --> 00:32:58.230
these calls won't actually do
anything on LOLLIPOP and above.

00:32:58.230 --> 00:33:02.216
They're just only for backward
compatibility reasons.

00:33:02.216 --> 00:33:04.784
On LOLLIPOP and above,
as soon as you hit Pause,

00:33:04.784 --> 00:33:07.450
and you set your state to Pause,
and you stop being a foreground

00:33:07.450 --> 00:33:13.380
service, you can swipe away the
notification without a problem.

00:33:13.380 --> 00:33:15.840
So we've updated
our notification.

00:33:15.840 --> 00:33:18.270
Now we're going to
startForeground, stopForeground

00:33:18.270 --> 00:33:22.301
false to keep the notification
around, but not be a foreground

00:33:22.301 --> 00:33:22.800
service.

00:33:22.800 --> 00:33:26.310
And then stopForeground true
to remove our notification

00:33:26.310 --> 00:33:29.210
when we've actually
stopped entirely.

00:33:29.210 --> 00:33:32.340
Actually our services--
this is about everything.

00:33:32.340 --> 00:33:35.180
It's a lot, but we've actually
handled all the things

00:33:35.180 --> 00:33:36.810
that our service can handle.

00:33:36.810 --> 00:33:41.580
There's just one thing we
still need to do-- build a UI.

00:33:41.580 --> 00:33:45.440
That's a big deal for
most media playback apps.

00:33:45.440 --> 00:33:49.010
Maybe if you had a
single radio station,

00:33:49.010 --> 00:33:52.440
would be really boring,
but maybe get away with it.

00:33:52.440 --> 00:33:55.360
So we have to figure out
some way of connecting

00:33:55.360 --> 00:33:58.520
our service to our UI.

00:33:58.520 --> 00:34:00.980
And ideally, we'd like to
reuse all of those callbacks--

00:34:00.980 --> 00:34:04.930
the onPlay, onPause,
onStop-- that we already

00:34:04.930 --> 00:34:09.040
have in our service for
hooking up our buttons to it.

00:34:09.040 --> 00:34:10.434
So we build one of those.

00:34:10.434 --> 00:34:12.900
It's called
MediaControllerCompat.

00:34:12.900 --> 00:34:16.429
And it's actually the
way of once you connect,

00:34:16.429 --> 00:34:19.139
you can actually get all
of the current metadata.

00:34:19.139 --> 00:34:22.670
So you can update your II to
say what's currently playing.

00:34:22.670 --> 00:34:24.540
You can actually get
the playback state.

00:34:24.540 --> 00:34:26.300
So you'll know,
hey, are we playing?

00:34:26.300 --> 00:34:27.179
Are we paused?

00:34:27.179 --> 00:34:28.400
Are we buffering?

00:34:28.400 --> 00:34:32.739
So you'll be able to update
the UI based on those actions.

00:34:32.739 --> 00:34:36.080
And then there's also a
transport controls callback.

00:34:36.080 --> 00:34:38.530
And here, it actually
gives you that one to one.

00:34:38.530 --> 00:34:42.850
So it has methods like
Play, Pause, SkiptoNext,

00:34:42.850 --> 00:34:46.449
that directly correspond with
the callback we registered

00:34:46.449 --> 00:34:48.350
in our MediaSessionCompat.

00:34:48.350 --> 00:34:53.058
So you can very easily hook
up, then, your Play button

00:34:53.058 --> 00:34:56.330
to transport controls
play, and you're done.

00:34:56.330 --> 00:34:58.660
There's no additional
communication steps

00:34:58.660 --> 00:35:00.910
you need as soon as you have
a MediaControllerCompat.

00:35:03.450 --> 00:35:06.740
One thing, though--
you actually need

00:35:06.740 --> 00:35:11.270
to get a MediaControllerCompat
instance.

00:35:11.270 --> 00:35:12.770
And to do that,
we're actually going

00:35:12.770 --> 00:35:15.180
to use that same
SessionToken that we

00:35:15.180 --> 00:35:16.880
added to our notification.

00:35:16.880 --> 00:35:22.845
We just somehow need to get
that from our service to our UI.

00:35:22.845 --> 00:35:25.740
So there's a really nice
class that does that, too.

00:35:25.740 --> 00:35:27.490
We thought of everything.

00:35:27.490 --> 00:35:32.060
It's called MediaBrowserService
and the MediaBrowser.

00:35:32.060 --> 00:35:35.860
And when you create a
MediaBrowserService, rather

00:35:35.860 --> 00:35:38.970
than just a service,
it actually gives you

00:35:38.970 --> 00:35:43.370
mechanisms to connect to
your service from your UI,

00:35:43.370 --> 00:35:48.320
and then retrieve the token as
well as get new APIs, which--

00:35:48.320 --> 00:35:52.510
you guessed it-- allows you to
browse media on your device.

00:35:52.510 --> 00:35:56.490
So this may be able to easily
build out your UI based on,

00:35:56.490 --> 00:36:00.150
say, a list of tracks,
or a list of albums,

00:36:00.150 --> 00:36:01.970
or any other kind
of things you want.

00:36:01.970 --> 00:36:05.210
It is actually required for
Android Auto integration.

00:36:05.210 --> 00:36:06.940
If you think about
Android Auto, you

00:36:06.940 --> 00:36:11.710
don't have control over the UI
itself because of car safety.

00:36:11.710 --> 00:36:15.300
But you do have control over
what audio tracks appear

00:36:15.300 --> 00:36:16.390
in your media playback.

00:36:16.390 --> 00:36:18.765
And that's all done through
MediaBrowserService.

00:36:18.765 --> 00:36:23.130
It also adds a browse
action on Android Wear,

00:36:23.130 --> 00:36:25.876
which if you scroll all the way
over from a playback, actually

00:36:25.876 --> 00:36:27.000
you'll see a browse button.

00:36:27.000 --> 00:36:30.610
You'll actually be able to
select the next track directly

00:36:30.610 --> 00:36:32.910
from there.

00:36:32.910 --> 00:36:34.790
So it's really simple
to actually use

00:36:34.790 --> 00:36:36.900
MediaBrowserService.

00:36:36.900 --> 00:36:40.580
Instead of extending service,
you extend MediaBrowserService.

00:36:40.580 --> 00:36:42.720
And then there's just
one method to do set

00:36:42.720 --> 00:36:44.600
SessionToken in your onCreate.

00:36:44.600 --> 00:36:47.120
This is what ties
in that SessionToken

00:36:47.120 --> 00:36:50.160
so that your MediaBrowserService
knows, all right, well,

00:36:50.160 --> 00:36:52.610
what is that token I need?

00:36:52.610 --> 00:36:55.290
Of course, there are the
new methods onGetRoot,

00:36:55.290 --> 00:36:58.120
which is kind of the root
of your whole application,

00:36:58.120 --> 00:37:00.430
as well as onLoadChildren,
onLoadItem,

00:37:00.430 --> 00:37:03.360
which you could expect
loads a list of tracks

00:37:03.360 --> 00:37:05.780
or a single track.

00:37:05.780 --> 00:37:09.690
And we actually have an example
of the Universal Android Music

00:37:09.690 --> 00:37:12.700
Player, UM, which goes
through this entire flow

00:37:12.700 --> 00:37:15.070
and has a lot more code.

00:37:15.070 --> 00:37:17.100
It goes through
basically everything

00:37:17.100 --> 00:37:20.400
we've talked about here today.

00:37:20.400 --> 00:37:24.050
Now, one downside is
that MediaBrowserService

00:37:24.050 --> 00:37:26.880
is API 21 and above.

00:37:26.880 --> 00:37:29.200
So we're actually working
on backporting it right now.

00:37:29.200 --> 00:37:30.410
We have a version that works.

00:37:30.410 --> 00:37:32.800
It's going to be in the next
version of Support Library.

00:37:32.800 --> 00:37:34.830
But if you can't wait,
there's a few things

00:37:34.830 --> 00:37:36.980
you can do in the
meantime because remember,

00:37:36.980 --> 00:37:41.150
all we need is just
a token in our UI.

00:37:41.150 --> 00:37:45.900
So we could actually
just use a static method,

00:37:45.900 --> 00:37:49.120
called getSessionToken,
which then retrieves a token.

00:37:49.120 --> 00:37:54.400
If you have your favorite event
bus application of choice,

00:37:54.400 --> 00:37:57.240
there's certainly very many
ways of getting a random item

00:37:57.240 --> 00:37:59.550
from one to the other.

00:37:59.550 --> 00:38:02.030
Do note that the
SessionToken is parcelable.

00:38:02.030 --> 00:38:05.480
So you can send it over
broadcasts or between processes

00:38:05.480 --> 00:38:07.590
without a problem.

00:38:07.590 --> 00:38:12.610
The other choice is to build
a MediaBrowserService light.

00:38:12.610 --> 00:38:16.090
Basically, do your own
binding to the service,

00:38:16.090 --> 00:38:19.130
and then actually
just have the getToken

00:38:19.130 --> 00:38:21.400
as part of that binder API.

00:38:21.400 --> 00:38:23.260
So it's a little bit
more complicated to get

00:38:23.260 --> 00:38:25.914
through that, but we have a nice
article about bound services

00:38:25.914 --> 00:38:28.080
if you're interested in
going through that approach.

00:38:30.650 --> 00:38:32.750
And so that's about everything.

00:38:32.750 --> 00:38:34.202
This is the slide.

00:38:34.202 --> 00:38:36.410
I could have just given to
you this at the beginning.

00:38:36.410 --> 00:38:39.710
But I would have felt a
little anti-climactic.

00:38:39.710 --> 00:38:41.570
But this is actually
everything that we

00:38:41.570 --> 00:38:45.480
need to get our service to be
doing literally everything it

00:38:45.480 --> 00:38:50.300
possibly can to give the best
user experience for our users.

00:38:50.300 --> 00:38:52.810
That means playing well
with audio playback,

00:38:52.810 --> 00:38:55.940
having controls
everywhere possible,

00:38:55.940 --> 00:38:59.000
using notifications, and using
a foreground service to make

00:38:59.000 --> 00:39:01.190
sure we're not killed
in the background,

00:39:01.190 --> 00:39:05.480
as well as doing Android Wear
and Android Auto integrations

00:39:05.480 --> 00:39:09.800
so that your media playback
works perfectly everywhere.

00:39:09.800 --> 00:39:11.530
So if you have any
questions for me,

00:39:11.530 --> 00:39:15.320
feel free to reach out to
me on Google+ or Twitter.

00:39:15.320 --> 00:39:16.900
Happy to answer your questions.

00:39:16.900 --> 00:39:18.750
Thanks again.

