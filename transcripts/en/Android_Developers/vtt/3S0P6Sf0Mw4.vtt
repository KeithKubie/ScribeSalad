WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.780
[MUSIC PLAYING]

00:00:03.780 --> 00:00:05.555
BEN GABLE: Hi, everyone.

00:00:05.555 --> 00:00:06.680
It's great to see you here.

00:00:06.680 --> 00:00:07.805
Hope you had a great lunch.

00:00:07.805 --> 00:00:08.940
My name is Ben Gable.

00:00:08.940 --> 00:00:11.370
I'm a game developer and
developer advocate here

00:00:11.370 --> 00:00:12.550
at Google.

00:00:12.550 --> 00:00:14.820
I work with game
developers to help them

00:00:14.820 --> 00:00:16.133
make great games on Android.

00:00:16.133 --> 00:00:17.550
And today, I'm
here to talk to you

00:00:17.550 --> 00:00:21.600
all about a topic that I find
very personally interesting,

00:00:21.600 --> 00:00:25.980
and that is adapting Android
games beyond the phone.

00:00:25.980 --> 00:00:28.980
So it wasn't too many years
ago that when somebody

00:00:28.980 --> 00:00:31.103
said mobile gaming
or Android gaming,

00:00:31.103 --> 00:00:32.520
you'd think of a
device like this.

00:00:35.190 --> 00:00:36.520
Everybody knows what this is.

00:00:36.520 --> 00:00:37.080
It's a phone.

00:00:37.080 --> 00:00:38.520
So you've got a touch screen.

00:00:38.520 --> 00:00:39.720
You've got an accelerometer.

00:00:39.720 --> 00:00:41.310
Gyro controls.

00:00:41.310 --> 00:00:43.050
Resolution and aspect
ratio are pretty

00:00:43.050 --> 00:00:45.600
standard across all of them.

00:00:45.600 --> 00:00:49.320
But I'm here today to tell you
guys that Android gaming is not

00:00:49.320 --> 00:00:50.970
just phones anymore.

00:00:50.970 --> 00:00:54.960
And the Android ecosystem
is constantly evolving.

00:00:54.960 --> 00:00:57.720
And Android now not
only runs on phones,

00:00:57.720 --> 00:01:03.030
but things like Chromebooks,
tablets, desktop extension

00:01:03.030 --> 00:01:06.120
technologies like Samsung
decks, and coming very soon,

00:01:06.120 --> 00:01:07.150
the world of foldables.

00:01:07.150 --> 00:01:09.940
So tons of OEMs are working
on foldable devices.

00:01:09.940 --> 00:01:14.010
You might have heard of
the Samsung Galaxy Fold.

00:01:14.010 --> 00:01:17.280
So as game developers,
you guys need

00:01:17.280 --> 00:01:19.740
to start considering
what kinds of devices

00:01:19.740 --> 00:01:22.410
that your players are going to
be experiencing your game on.

00:01:22.410 --> 00:01:24.150
It could be a phone
in portrait mode.

00:01:24.150 --> 00:01:27.570
It could be a Chromebook or
DeX device with a keyboard

00:01:27.570 --> 00:01:28.747
a mouse attached.

00:01:28.747 --> 00:01:30.330
Or pretty soon, it
could be a foldable

00:01:30.330 --> 00:01:33.300
with two screens that are
changing the resolutions when

00:01:33.300 --> 00:01:34.950
they open up the device.

00:01:34.950 --> 00:01:37.740
So I want to get a quick show
of hands of how many of you have

00:01:37.740 --> 00:01:39.360
actually thought
about this problem

00:01:39.360 --> 00:01:40.950
and maybe have a
game that you've

00:01:40.950 --> 00:01:45.170
optimized for a device that's
not just the mobile phone.

00:01:45.170 --> 00:01:46.990
Show of hands.

00:01:46.990 --> 00:01:47.700
OK.

00:01:47.700 --> 00:01:48.390
Not too many.

00:01:48.390 --> 00:01:49.298
So that's good.

00:01:49.298 --> 00:01:51.090
Hopefully, you guys
learn a lot today then.

00:01:53.940 --> 00:01:57.390
And this is really important
because as game developers,

00:01:57.390 --> 00:01:59.610
we want to provide the
best possible gaming

00:01:59.610 --> 00:02:02.910
experience for our players
no matter what device they

00:02:02.910 --> 00:02:04.740
happen to be playing it on.

00:02:04.740 --> 00:02:09.117
So as gameplay
continues to evolve--

00:02:09.117 --> 00:02:12.450
not only devices are
evolving, but we're seeing

00:02:12.450 --> 00:02:14.160
the gameplay evolve as well.

00:02:14.160 --> 00:02:18.870
So mobile gaming isn't just
hyper-casual one button one

00:02:18.870 --> 00:02:20.490
touch games anymore.

00:02:20.490 --> 00:02:23.070
We're seeing these
gameplay designs

00:02:23.070 --> 00:02:25.050
that mirrors something
you'd expect on

00:02:25.050 --> 00:02:28.620
like a PC or a console with
longer playing sessions, more

00:02:28.620 --> 00:02:30.120
advanced controls.

00:02:30.120 --> 00:02:32.430
And so people like
me and many others

00:02:32.430 --> 00:02:36.060
want to play these types of
games on Android in a way

00:02:36.060 --> 00:02:38.910
that I would expect to play
it maybe at home on a console,

00:02:38.910 --> 00:02:41.580
or on a PC with a
keyboard and mouse.

00:02:41.580 --> 00:02:44.130
And not only that,
but maybe I want

00:02:44.130 --> 00:02:46.140
to see it on a bigger,
more beautiful screen.

00:02:46.140 --> 00:02:49.440
I want to avoid the hand claw
of playing my favorite MMORPG

00:02:49.440 --> 00:02:51.460
for many hours on end.

00:02:51.460 --> 00:02:53.340
And it's not just
about providing

00:02:53.340 --> 00:02:56.190
the best possible experience,
it's also about reach.

00:02:56.190 --> 00:02:59.520
One of the key themes of
the gaming keynote this year

00:02:59.520 --> 00:03:01.440
at I/O, which I don't
if you guys saw it,

00:03:01.440 --> 00:03:04.410
was about reach and
reaching more players.

00:03:04.410 --> 00:03:07.620
And so gamers-- the
number one thing

00:03:07.620 --> 00:03:09.720
that we hear from our end
users are that they want

00:03:09.720 --> 00:03:11.340
to play games on these devices.

00:03:11.340 --> 00:03:13.110
And our friends at
Gameloft actually

00:03:13.110 --> 00:03:14.970
found this out firsthand.

00:03:14.970 --> 00:03:16.800
So they have a game, Asphalt 8.

00:03:16.800 --> 00:03:20.190
And they saw that people were
playing it on a Chromebook.

00:03:20.190 --> 00:03:22.170
And so they went in
and we worked with them

00:03:22.170 --> 00:03:25.740
to optimize the controls
and some of the UI elements

00:03:25.740 --> 00:03:27.773
to suit these larger screens.

00:03:27.773 --> 00:03:29.940
And what they found is that
after they optimized it,

00:03:29.940 --> 00:03:34.680
they saw a 6x increase in daily
active users and a 9x increase

00:03:34.680 --> 00:03:38.280
in revenue, just for the
Chrome OS version of the app,

00:03:38.280 --> 00:03:41.470
not against mobile.

00:03:41.470 --> 00:03:43.390
So this just goes
to show that players

00:03:43.390 --> 00:03:46.250
want to play these games
on these other devices.

00:03:46.250 --> 00:03:48.110
And so it's really important.

00:03:48.110 --> 00:03:50.980
There is a desire to play across
all these different classes

00:03:50.980 --> 00:03:52.280
of devices.

00:03:52.280 --> 00:03:55.000
So let's talk going
over overview of what

00:03:55.000 --> 00:03:58.285
each of these classes are.

00:03:58.285 --> 00:03:59.660
So starting off
with Chromebooks.

00:03:59.660 --> 00:04:02.030
So you might know
Chromebooks as laptops.

00:04:02.030 --> 00:04:04.160
But the operating
system Chrome OS

00:04:04.160 --> 00:04:07.470
now runs on many different
kinds of devices.

00:04:07.470 --> 00:04:09.530
So we've got all-in-one
desktop boxes.

00:04:09.530 --> 00:04:10.970
You've got detachables.

00:04:10.970 --> 00:04:13.853
You've got tablets now,
like the Pixel Slate.

00:04:13.853 --> 00:04:15.770
There's a variety of
inputs usually associated

00:04:15.770 --> 00:04:17.060
with Chrome OS.

00:04:17.060 --> 00:04:22.310
But the primary input devices
are keyboard and touchpad.

00:04:22.310 --> 00:04:27.350
And as you know or may not
know, Android runs inside

00:04:27.350 --> 00:04:29.690
of a container on Chrome OS.

00:04:29.690 --> 00:04:32.173
So the full version of Android
is running inside there.

00:04:32.173 --> 00:04:33.590
And to your game,
it's essentially

00:04:33.590 --> 00:04:35.280
running on an Android device.

00:04:35.280 --> 00:04:38.030
It's just that it happens to be
connected to a larger display

00:04:38.030 --> 00:04:41.060
device, and maybe it
has inputs attached.

00:04:41.060 --> 00:04:43.640
So what we found for
a lot of developers

00:04:43.640 --> 00:04:46.760
is that 90% of their
game is probably

00:04:46.760 --> 00:04:48.770
running on a Chrome
OS device right

00:04:48.770 --> 00:04:50.440
now if you go and download it.

00:04:50.440 --> 00:04:53.120
And the last 10% is just
really easy small tweaks

00:04:53.120 --> 00:04:57.740
to make sure it's fully
optimized for that hardware.

00:04:57.740 --> 00:04:59.220
And Chromebooks are growing.

00:04:59.220 --> 00:05:04.710
So we saw that reach 26%
market share last year.

00:05:04.710 --> 00:05:08.850
And year over year, the market
is growing 77% for Chromebooks

00:05:08.850 --> 00:05:10.440
according to NPD.

00:05:10.440 --> 00:05:13.440
So Google's put a lot of effort
into growing the Chromebook

00:05:13.440 --> 00:05:14.790
and Chrome OS line.

00:05:14.790 --> 00:05:17.250
And gamers are continuing
to buy these devices.

00:05:17.250 --> 00:05:18.480
And they want to play games.

00:05:21.010 --> 00:05:22.030
Tablets.

00:05:22.030 --> 00:05:24.340
Tablets have been around
since Android Honeycomb.

00:05:24.340 --> 00:05:25.890
A longtime.

00:05:25.890 --> 00:05:28.330
And you now you've got a
wide variety of tablets.

00:05:28.330 --> 00:05:30.460
Everything from the Pixel
Slate, which is more,

00:05:30.460 --> 00:05:33.490
I would say, high-end, to
more affordable devices

00:05:33.490 --> 00:05:37.660
and other premium tablets
like the Galaxy Tab S4.

00:05:37.660 --> 00:05:40.270
And tablets remain
a huge portion

00:05:40.270 --> 00:05:43.690
of what we think of as
this mobile gaming space.

00:05:43.690 --> 00:05:49.300
So according to NPD, last year,
19% of all active mobile gamers

00:05:49.300 --> 00:05:51.040
were playing on
an Android tablet.

00:05:51.040 --> 00:05:53.420
And that's across
all mobile platforms.

00:05:53.420 --> 00:05:55.840
So as you can see, there's a
large group of players there

00:05:55.840 --> 00:06:00.870
that are active and
want to play games.

00:06:00.870 --> 00:06:03.300
Third, desktop
extension technologies.

00:06:03.300 --> 00:06:06.240
So more and more we're
seeing mobile devices,

00:06:06.240 --> 00:06:09.000
like a lot of Samsung
devices, come with technology

00:06:09.000 --> 00:06:11.460
that allows you to connect
it to a larger display,

00:06:11.460 --> 00:06:13.680
to connect things like
a keyboard and mouse.

00:06:13.680 --> 00:06:16.830
And actually it is
not just the Android

00:06:16.830 --> 00:06:18.870
OS, with you've got
a full screen app,

00:06:18.870 --> 00:06:22.320
but it actually simulates
a multi-window environment

00:06:22.320 --> 00:06:26.100
where your game window can be
resized and dragged around.

00:06:26.100 --> 00:06:28.710
So it's much more like
a desktop experience

00:06:28.710 --> 00:06:33.480
than what you'd expect
from Android on the phone.

00:06:33.480 --> 00:06:35.800
And as I said before, coming
very soon are foldables.

00:06:35.800 --> 00:06:37.530
So we've got tons
of OEMs that we

00:06:37.530 --> 00:06:39.610
know are working on
foldable devices.

00:06:39.610 --> 00:06:41.610
And there's going to be
a lot of interesting use

00:06:41.610 --> 00:06:44.610
cases with the smaller
outer screen opening up

00:06:44.610 --> 00:06:46.390
to the larger inner screen.

00:06:46.390 --> 00:06:48.030
So this is something
that you guys

00:06:48.030 --> 00:06:52.180
are gonna have think about
as well, coming very soon.

00:06:52.180 --> 00:06:55.090
Now, I realize the
words "new platform"

00:06:55.090 --> 00:06:57.070
are kind of scary to a
lot of game developers.

00:06:57.070 --> 00:06:59.650
And there's already
a lot of challenge

00:06:59.650 --> 00:07:03.280
on supporting all of the device
fragmentation on Android.

00:07:03.280 --> 00:07:04.720
But what I want
to stress here is

00:07:04.720 --> 00:07:06.940
that this is all still Android.

00:07:06.940 --> 00:07:09.580
And by following the Android
best practices, which

00:07:09.580 --> 00:07:11.320
I'll talk about
today, you're going

00:07:11.320 --> 00:07:13.630
to get a great baseline
experience across all

00:07:13.630 --> 00:07:15.740
these different devices.

00:07:15.740 --> 00:07:17.950
Now, there are obviously
more targeted things

00:07:17.950 --> 00:07:20.433
you can do for specific
devices and form factors.

00:07:20.433 --> 00:07:21.850
But today, I'm
just going to focus

00:07:21.850 --> 00:07:24.220
on the stuff in the middle
there, the best practices.

00:07:24.220 --> 00:07:27.250
They're going to give you the
best overall compatibility,

00:07:27.250 --> 00:07:29.050
no matter which device
your players are

00:07:29.050 --> 00:07:30.008
going to be playing on.

00:07:32.400 --> 00:07:36.120
And you can do this
all with one APK.

00:07:36.120 --> 00:07:38.220
And it's possible.

00:07:38.220 --> 00:07:39.720
You don't have to
do multiple APKs.

00:07:39.720 --> 00:07:42.540
You don't have to try to
fit everything into one APK

00:07:42.540 --> 00:07:44.040
and stay under some size limit.

00:07:44.040 --> 00:07:46.410
This is all possible
with one APK.

00:07:46.410 --> 00:07:49.230
And it starts with
changing your mindset.

00:07:49.230 --> 00:07:50.340
I get it.

00:07:50.340 --> 00:07:51.612
You're in development.

00:07:51.612 --> 00:07:53.070
There's features
that have to ship,

00:07:53.070 --> 00:07:56.160
deadlines that have to be hit,
patches that have to be pushed.

00:07:56.160 --> 00:07:57.570
And it's very easy
for developers

00:07:57.570 --> 00:08:00.818
to start thinking
about devices as,

00:08:00.818 --> 00:08:02.610
I've got to fix this
bug for these devices,

00:08:02.610 --> 00:08:05.320
I've got to improve
performance for these devices.

00:08:05.320 --> 00:08:09.600
But as engineers, we're taught
to be adaptive, and anticipate

00:08:09.600 --> 00:08:12.970
changes, and make sure we handle
a wide variety of scenarios.

00:08:12.970 --> 00:08:15.630
So I realize in the fast
pace of game development,

00:08:15.630 --> 00:08:17.950
it can be very hard
to think about that.

00:08:17.950 --> 00:08:20.675
But for supporting
all these devices,

00:08:20.675 --> 00:08:22.050
the key thing I
want to stress is

00:08:22.050 --> 00:08:25.380
to anticipate changes
and be adaptive.

00:08:25.380 --> 00:08:28.740
And, for example, you might
change your assumptions

00:08:28.740 --> 00:08:32.820
that you're not just playing
on a small screen with a set

00:08:32.820 --> 00:08:33.692
resolution.

00:08:33.692 --> 00:08:36.150
You could be playing on a laptop
or a larger display screen

00:08:36.150 --> 00:08:39.652
with a much different
aspect ratio and resolution.

00:08:39.652 --> 00:08:40.860
You might have a touchscreen.

00:08:40.860 --> 00:08:41.507
You might not.

00:08:41.507 --> 00:08:43.049
You might have a
controller attached,

00:08:43.049 --> 00:08:44.550
or keyboard and mouse.

00:08:44.550 --> 00:08:45.810
You might have accelerometer.

00:08:45.810 --> 00:08:49.020
You might have a gyro
available for input.

00:08:49.020 --> 00:08:51.600
And you might be playing on
something from a low-end phone

00:08:51.600 --> 00:08:55.860
all the way up to a
gaming-capable high-performance

00:08:55.860 --> 00:08:57.940
Chromebook, for example.

00:08:57.940 --> 00:09:00.810
So it's really
important to get rid

00:09:00.810 --> 00:09:02.430
of the mindset of
you're just building

00:09:02.430 --> 00:09:05.040
one APK for a
certain set of device

00:09:05.040 --> 00:09:06.990
with a certain set
of assumptions,

00:09:06.990 --> 00:09:10.650
and build an APK that can
adapt and change no matter what

00:09:10.650 --> 00:09:13.510
environment it's running in.

00:09:13.510 --> 00:09:15.970
So luckily in Android,
if you're not aware,

00:09:15.970 --> 00:09:18.490
there is this concept of
configuration changes, which

00:09:18.490 --> 00:09:22.240
is the method by which
Android tells your game

00:09:22.240 --> 00:09:25.487
and your activity about
things that have changed

00:09:25.487 --> 00:09:27.070
with the environment
you're running in

00:09:27.070 --> 00:09:30.167
and that you might care
about and adapt to.

00:09:30.167 --> 00:09:32.500
So there's lots of different
configuration change events

00:09:32.500 --> 00:09:35.042
that are getting thrown around
in Android when things happen.

00:09:35.042 --> 00:09:38.260
For example, if a keyboard
gets attached or detached,

00:09:38.260 --> 00:09:41.320
if the orientation of the
screen changes, or maybe

00:09:41.320 --> 00:09:44.960
the screen size resolution
changes as well.

00:09:44.960 --> 00:09:47.950
And so by default,
what's going to happen

00:09:47.950 --> 00:09:49.420
is the Android OS
is sitting there.

00:09:49.420 --> 00:09:52.060
And it's listening for any of
these configuration changes.

00:09:52.060 --> 00:09:54.370
And what it does
by default is, it

00:09:54.370 --> 00:09:56.370
will ask you to maybe
save your game's state.

00:09:56.370 --> 00:09:59.620
It will give you some
method to save custom data.

00:09:59.620 --> 00:10:01.370
It's going to restart
your activity.

00:10:01.370 --> 00:10:03.870
And then it's going to restart
it and give you back the data

00:10:03.870 --> 00:10:06.100
that you saved to try
to reinstance and go

00:10:06.100 --> 00:10:07.960
back to where you were at.

00:10:07.960 --> 00:10:11.560
However, for a lot of
resource-heavy applications,

00:10:11.560 --> 00:10:14.050
and especially games,
we do not recommend

00:10:14.050 --> 00:10:16.720
that you let the Android
OS do this for you

00:10:16.720 --> 00:10:20.860
because, in some cases, you
can get lots of configuration

00:10:20.860 --> 00:10:24.080
change events, even across a
couple of different frames.

00:10:24.080 --> 00:10:27.640
So for resource-heavy heavy
games, restarting the activity

00:10:27.640 --> 00:10:29.350
and reallocating
all your resources

00:10:29.350 --> 00:10:30.753
is going to slow
down the system.

00:10:30.753 --> 00:10:32.170
It's going to slow
down your game.

00:10:32.170 --> 00:10:34.360
And it's not going to give
that seamless experience

00:10:34.360 --> 00:10:36.550
that you want when
players are switching

00:10:36.550 --> 00:10:38.580
between different
configurations.

00:10:38.580 --> 00:10:41.080
So there's another way in which
you can handle configuration

00:10:41.080 --> 00:10:43.750
changes, and that's through
handling them yourself

00:10:43.750 --> 00:10:45.292
in your code.

00:10:45.292 --> 00:10:46.750
So in your manifest,
you can simply

00:10:46.750 --> 00:10:49.300
declare all these different
configuration changes

00:10:49.300 --> 00:10:51.370
that you want to
handle yourself.

00:10:51.370 --> 00:10:54.400
And then in your
activity, instead

00:10:54.400 --> 00:10:55.930
of restarting your
activity, it's

00:10:55.930 --> 00:10:58.220
going to invoke on
configuration changed.

00:10:58.220 --> 00:11:00.220
And it's going to give
you the new configuration

00:11:00.220 --> 00:11:01.178
that you're running in.

00:11:01.178 --> 00:11:03.460
So now you could do
things like scale your UI

00:11:03.460 --> 00:11:06.453
or your OpenGL content to
match the new resolution.

00:11:06.453 --> 00:11:07.870
You can toggle
your control scheme

00:11:07.870 --> 00:11:12.130
to adapt to some input device
that was attached or detached,

00:11:12.130 --> 00:11:14.060
et cetera, et cetera.

00:11:14.060 --> 00:11:18.070
And so there's lots of
different configuration changes

00:11:18.070 --> 00:11:19.360
that you can listen for.

00:11:19.360 --> 00:11:22.930
But what I've done is I've boil
it down into three key areas

00:11:22.930 --> 00:11:25.870
that you guys should be
thinking about and looking

00:11:25.870 --> 00:11:28.510
at when it comes to handling
these different types

00:11:28.510 --> 00:11:30.160
of configuration changes.

00:11:30.160 --> 00:11:32.500
And they are screen
considerations,

00:11:32.500 --> 00:11:35.800
input considerations,
and how to build your APK

00:11:35.800 --> 00:11:37.710
and set it up in a
way that it's going

00:11:37.710 --> 00:11:40.900
to be very adaptable across
all these different devices.

00:11:44.020 --> 00:11:48.090
Now, different devices mean that
there are certain configuration

00:11:48.090 --> 00:11:51.450
changes that will happen more
often, or maybe more important

00:11:51.450 --> 00:11:54.190
to handle and be aware of.

00:11:54.190 --> 00:11:56.610
But again, for the greatest
baseline compatibility,

00:11:56.610 --> 00:11:58.887
which is what we suggest
everybody goes for,

00:11:58.887 --> 00:12:00.720
you're going to have
to look at all of them.

00:12:03.330 --> 00:12:05.970
So that's a quick overview
on configuration changes.

00:12:05.970 --> 00:12:09.200
Now let's jump into, what are
some of the considerations

00:12:09.200 --> 00:12:12.200
you have around dealing with
screen configuration changes

00:12:12.200 --> 00:12:15.600
while you're building
out your game?

00:12:15.600 --> 00:12:17.990
So you've got a game.

00:12:17.990 --> 00:12:20.585
And on devices like
Chromebooks and Samsung DeX,

00:12:20.585 --> 00:12:22.460
by default, your game
is going to be launched

00:12:22.460 --> 00:12:24.240
in a windowed environment.

00:12:24.240 --> 00:12:26.150
So this means that you
have a game window.

00:12:26.150 --> 00:12:29.060
It can be dynamically resized
to different aspect ratios

00:12:29.060 --> 00:12:30.890
and resolutions.

00:12:30.890 --> 00:12:33.098
And this is by
default. So this is

00:12:33.098 --> 00:12:34.640
much different than
what you'd expect

00:12:34.640 --> 00:12:37.970
happening on a mobile device
when your game gets launched.

00:12:37.970 --> 00:12:40.820
And now coming soon on
devices like foldables,

00:12:40.820 --> 00:12:43.580
you've actually got a much
different aspect ratio

00:12:43.580 --> 00:12:44.880
on the outer screen.

00:12:44.880 --> 00:12:48.080
And when you open up, the
player can open up the foldable

00:12:48.080 --> 00:12:50.830
at any point in time, and your
resolution and aspect ratio

00:12:50.830 --> 00:12:52.130
are going to change yet again.

00:12:52.130 --> 00:12:55.530
So you guys have to be
set up to handle that.

00:12:55.530 --> 00:12:57.500
Now, each one of these
cases, as I said,

00:12:57.500 --> 00:13:01.150
is going to fire off an
onConfigurationChanged event.

00:13:01.150 --> 00:13:04.470
So again, the key all comes back
to handle these configuration

00:13:04.470 --> 00:13:07.600
changes and make sure that
your game is set up to do so.

00:13:07.600 --> 00:13:09.210
So in this example,
I've set up that I

00:13:09.210 --> 00:13:12.295
want to handle screen size
and orientation configuration

00:13:12.295 --> 00:13:12.795
changes.

00:13:15.540 --> 00:13:18.020
So now, if somebody
is playing my game

00:13:18.020 --> 00:13:20.630
and either one of
those events happens,

00:13:20.630 --> 00:13:23.990
I'm going to get a callback
to my onConfigurationChanged.

00:13:23.990 --> 00:13:27.230
And now I can scale my UI
to match the new resolution.

00:13:27.230 --> 00:13:30.230
I can adjust my orientation.

00:13:30.230 --> 00:13:31.730
I can adjust my input areas.

00:13:31.730 --> 00:13:34.430
Because if your screen
resolution changes,

00:13:34.430 --> 00:13:37.980
now your touch input areas
are going to change as well.

00:13:37.980 --> 00:13:40.100
So it's a pretty
powerful function

00:13:40.100 --> 00:13:43.130
to be able to do whatever you
need to do that suits your game

00:13:43.130 --> 00:13:45.260
and how you've built
it to be able to handle

00:13:45.260 --> 00:13:48.500
all these different things that
might be happening at any point

00:13:48.500 --> 00:13:49.220
during gameplay.

00:13:52.670 --> 00:13:55.820
Now, if your game
is always intended

00:13:55.820 --> 00:13:59.270
to be run in full screen, which
for a lot of mobile developers

00:13:59.270 --> 00:14:03.030
and Android developers,
they expect this.

00:14:03.030 --> 00:14:05.305
There is a way to lock
your game to full screen.

00:14:05.305 --> 00:14:06.680
So in your manifest,
you can just

00:14:06.680 --> 00:14:09.740
simply declare resizable
activity equals false.

00:14:09.740 --> 00:14:13.070
And this will by default launch
your game in a full screen.

00:14:13.070 --> 00:14:15.630
And it will not be
resizable at all.

00:14:15.630 --> 00:14:18.470
However, we don't
recommend that you do this.

00:14:18.470 --> 00:14:20.780
Only as a last
resort, or if you're

00:14:20.780 --> 00:14:22.580
trying to fix some
bugs in the meantime.

00:14:22.580 --> 00:14:25.970
Because what it does is it
limits the user experience

00:14:25.970 --> 00:14:28.290
on these windowed
kind of environments.

00:14:28.290 --> 00:14:29.930
So for example,
now they can't have

00:14:29.930 --> 00:14:32.090
like a chat application
open, or YouTube,

00:14:32.090 --> 00:14:33.620
or something like that.

00:14:33.620 --> 00:14:36.540
And actually, on
mobile devices as well,

00:14:36.540 --> 00:14:39.260
it prevents it from
running in split view mode.

00:14:39.260 --> 00:14:41.870
So as you'll see
a little bit later

00:14:41.870 --> 00:14:43.730
in the deck when I
talk about foldables,

00:14:43.730 --> 00:14:47.870
this becomes even more of
a limitation for the user

00:14:47.870 --> 00:14:52.177
if you don't allow your
game to be the resizable.

00:14:54.980 --> 00:14:56.120
Orientation.

00:14:56.120 --> 00:14:58.790
So you should be thinking
about the default

00:14:58.790 --> 00:15:01.710
orientation of the
device you're running on.

00:15:01.710 --> 00:15:03.950
So on phones, it's portrait.

00:15:03.950 --> 00:15:06.290
But many other
devices, it's not.

00:15:06.290 --> 00:15:07.430
It's landscape.

00:15:07.430 --> 00:15:09.800
And actually, a lot of these
devices now we're seeing

00:15:09.800 --> 00:15:11.360
are convertibles.

00:15:11.360 --> 00:15:12.980
So Pixelbooks and
other Chromebooks

00:15:12.980 --> 00:15:14.438
are a great example,
where they can

00:15:14.438 --> 00:15:17.390
switch from a clamshell
landscape orientation

00:15:17.390 --> 00:15:20.750
to now a portrait tablet mode.

00:15:20.750 --> 00:15:22.820
So it's really
important to make sure

00:15:22.820 --> 00:15:25.310
that if you haven't
already, specify

00:15:25.310 --> 00:15:28.490
the sensor orientations
that your game supports.

00:15:28.490 --> 00:15:29.960
And so what this
is going to do is

00:15:29.960 --> 00:15:33.560
it's going to tell the OS what
orientations your game runs in.

00:15:33.560 --> 00:15:35.510
And you won't get
into weird situations

00:15:35.510 --> 00:15:37.490
where if somebody
flips the device

00:15:37.490 --> 00:15:40.670
into a different orientation,
your game flips upside down,

00:15:40.670 --> 00:15:44.130
or it gets into some weird
orientation change loop.

00:15:44.130 --> 00:15:45.710
And if you're
handling it in code,

00:15:45.710 --> 00:15:48.080
make sure you're using
Display.getRotation,

00:15:48.080 --> 00:15:51.530
as this is going to get you the
actual rotation of the device.

00:15:51.530 --> 00:15:55.550
But be aware that the rotation
might be swapped to the default

00:15:55.550 --> 00:15:58.400
values depending on what
the default hardware

00:15:58.400 --> 00:15:59.508
orientation is.

00:15:59.508 --> 00:16:00.550
So just be aware of that.

00:16:03.450 --> 00:16:06.740
Now, another thing with
foldables to think about now

00:16:06.740 --> 00:16:09.347
is aspect ratio becomes
really important.

00:16:09.347 --> 00:16:11.180
So as you can see there
on the outer screen,

00:16:11.180 --> 00:16:12.920
the aspect ratio is much longer.

00:16:12.920 --> 00:16:14.930
It's 21 9 to be exact.

00:16:14.930 --> 00:16:19.850
And so for supporting full
screen on that outer screen,

00:16:19.850 --> 00:16:22.610
you have three options
to make sure your game is

00:16:22.610 --> 00:16:24.380
going to handle this correctly.

00:16:24.380 --> 00:16:27.980
The first is to target
SDK 26 and above,

00:16:27.980 --> 00:16:30.440
which for a lot of you,
if you're pushing updates,

00:16:30.440 --> 00:16:32.420
this is required
by Google Play now.

00:16:32.420 --> 00:16:34.250
So that's the first option.

00:16:34.250 --> 00:16:37.410
Make sure you also set your
resizable activity as true.

00:16:37.410 --> 00:16:40.040
So again, letting the system
resize your application

00:16:40.040 --> 00:16:42.080
as it needs to be done.

00:16:42.080 --> 00:16:45.560
And now, if neither of
those are an option for you,

00:16:45.560 --> 00:16:48.260
what you have to do then
is specify a max aspect

00:16:48.260 --> 00:16:50.430
ratio inside your manifest.

00:16:50.430 --> 00:16:53.570
So this needs to be set
underneath the application tag.

00:16:53.570 --> 00:17:00.260
2.4 will handle aspect
ratios up to 21 9.

00:17:00.260 --> 00:17:01.940
So that ensures
that your game will

00:17:01.940 --> 00:17:04.550
run on these different
aspect ratios.

00:17:04.550 --> 00:17:06.740
And of course, when
you do this, make

00:17:06.740 --> 00:17:09.536
sure that your UI and
everything behaves

00:17:09.536 --> 00:17:11.869
the way you would expect it
to on these different aspect

00:17:11.869 --> 00:17:12.369
ratios.

00:17:15.290 --> 00:17:17.690
Now, I talked a little
bit about split view.

00:17:17.690 --> 00:17:20.900
And on foldables,
there's this new feature

00:17:20.900 --> 00:17:23.900
in Android P called
multi-resume.

00:17:23.900 --> 00:17:27.290
So with these larger screens,
there is this interesting use

00:17:27.290 --> 00:17:29.630
case that now you can have
multiple activities up

00:17:29.630 --> 00:17:32.240
and running on the
screen at the same time.

00:17:32.240 --> 00:17:36.320
Now by default, as of
Android P and earlier,

00:17:36.320 --> 00:17:39.530
if you had two activities
running in split view mode,

00:17:39.530 --> 00:17:41.660
only the one that was
last interacted with

00:17:41.660 --> 00:17:43.790
is going to be running
in the onResume state.

00:17:43.790 --> 00:17:46.940
Everything else would either be
an onStart or onPaused, which

00:17:46.940 --> 00:17:50.120
doesn't make a lot of sense
because then you can't really

00:17:50.120 --> 00:17:53.960
play a game or have a chat
like application update

00:17:53.960 --> 00:17:55.980
if you're not
interacting with it.

00:17:55.980 --> 00:17:59.450
So now in P, there's this new
feature called multi-resume,

00:17:59.450 --> 00:18:03.230
which means that if both the
OEM and the game developer--

00:18:03.230 --> 00:18:06.500
or application developer--
opt into this feature,

00:18:06.500 --> 00:18:09.830
now every top level
visible activity is going

00:18:09.830 --> 00:18:11.900
to be in the onResume state.

00:18:11.900 --> 00:18:14.960
So essentially, this means that
users can finally multitask

00:18:14.960 --> 00:18:16.520
on these larger screens.

00:18:16.520 --> 00:18:19.070
And they can have the game
open with a chat application

00:18:19.070 --> 00:18:20.430
or whatever.

00:18:20.430 --> 00:18:22.580
So this, again, is
really important

00:18:22.580 --> 00:18:26.660
that you're tie it back to make
sure your game does support use

00:18:26.660 --> 00:18:27.770
cases like this.

00:18:27.770 --> 00:18:31.218
Because as more and more players
pick up foldable devices,

00:18:31.218 --> 00:18:33.510
they're going to expect that
something like this works.

00:18:33.510 --> 00:18:34.968
It will be a
disappointment to them

00:18:34.968 --> 00:18:37.160
if they download your
game, and they find out

00:18:37.160 --> 00:18:40.020
they can't utilize it.

00:18:40.020 --> 00:18:42.470
Now, to support multi-resume,
it's super easy.

00:18:42.470 --> 00:18:44.420
Again, you just go
in your manifest,

00:18:44.420 --> 00:18:46.830
and you add this
metadata in there.

00:18:46.830 --> 00:18:50.990
So now if both the OEM and you
have opted into multi-resume,

00:18:50.990 --> 00:18:52.340
you're going to support it.

00:18:52.340 --> 00:18:55.130
And for devices that don't
yet support multi-resume,

00:18:55.130 --> 00:18:57.740
it'll run exactly as it
does by default where

00:18:57.740 --> 00:19:01.440
only the last activity that
the user interacted with

00:19:01.440 --> 00:19:03.410
will be running in
the onResume state.

00:19:03.410 --> 00:19:05.070
So it's really
easy to support it.

00:19:05.070 --> 00:19:07.620
And if the device
does not support it,

00:19:07.620 --> 00:19:08.870
there's no risk there for you.

00:19:11.720 --> 00:19:15.950
Now in general, with more
pixels comes more flexibility

00:19:15.950 --> 00:19:19.310
as well with HUD and UI design.

00:19:19.310 --> 00:19:22.070
So if your players are
playing on a larger screen,

00:19:22.070 --> 00:19:25.850
consider what UI elements
they can add, expand, change,

00:19:25.850 --> 00:19:28.350
or adapt to suit that display.

00:19:28.350 --> 00:19:32.750
So they also tend to sit farther
away from the screen the larger

00:19:32.750 --> 00:19:33.710
that screen is.

00:19:33.710 --> 00:19:35.660
So make sure all your
text and elements

00:19:35.660 --> 00:19:38.480
are readable and
identifiable as well.

00:19:38.480 --> 00:19:40.980
And our friends over at Klei,
the makers of Don't Starve,

00:19:40.980 --> 00:19:43.730
did a great job of handling
this, where they actually

00:19:43.730 --> 00:19:47.690
give you the option of
removing the virtual joystick

00:19:47.690 --> 00:19:50.360
and the touch buttons
on the screen.

00:19:50.360 --> 00:19:53.990
And you can also scale
the size of the UI and HUD

00:19:53.990 --> 00:19:56.330
to match what you would
expect for whatever device you

00:19:56.330 --> 00:19:57.590
happen to be playing on.

00:19:57.590 --> 00:19:59.930
So it's a great
example of giving users

00:19:59.930 --> 00:20:04.470
the choice of setting up to
optimize for a certain screen

00:20:04.470 --> 00:20:04.970
size.

00:20:08.510 --> 00:20:10.450
So now let's talk about input.

00:20:10.450 --> 00:20:13.430
And input, I'm going to
throw up this line again

00:20:13.430 --> 00:20:17.082
because input is a very--

00:20:17.082 --> 00:20:18.540
this is where this
comes into play.

00:20:18.540 --> 00:20:20.290
Because input is very volatile.

00:20:20.290 --> 00:20:22.240
At any point during
your gameplay,

00:20:22.240 --> 00:20:24.430
a user can attach
an input device.

00:20:24.430 --> 00:20:26.380
They could remove
an input device.

00:20:26.380 --> 00:20:28.810
And so it really
comes down to, again,

00:20:28.810 --> 00:20:31.360
trying to anticipate
that you're going

00:20:31.360 --> 00:20:34.150
to get some kind of
input hardware event,

00:20:34.150 --> 00:20:36.850
and being adaptive
to what that is.

00:20:36.850 --> 00:20:38.650
And by being
adaptive, that really

00:20:38.650 --> 00:20:42.260
means try to anticipate
what the user might intend.

00:20:42.260 --> 00:20:45.040
So obviously, if somebody
attaches a controller

00:20:45.040 --> 00:20:46.810
in the middle of
gameplay, they probably

00:20:46.810 --> 00:20:48.200
want to use that controller.

00:20:48.200 --> 00:20:52.210
So your game should just
naturally switch over to it.

00:20:52.210 --> 00:20:54.970
And not only doing that,
but allowing users to choose

00:20:54.970 --> 00:20:57.575
what kind of input methods
that they want to use.

00:20:57.575 --> 00:20:59.950
So you might find that there's
a bunch of different input

00:20:59.950 --> 00:21:03.430
methods that are attached to the
device your game is running on,

00:21:03.430 --> 00:21:06.430
you want to give players the
choice of picking which one.

00:21:06.430 --> 00:21:09.685
So it all comes down, again, to
it's not just the touch screen.

00:21:09.685 --> 00:21:11.560
There could be a lot of
other things attached

00:21:11.560 --> 00:21:16.500
to it as well that the
users want to play with.

00:21:16.500 --> 00:21:19.500
So again, ties back to
the configuration changes.

00:21:19.500 --> 00:21:21.450
So here in this
example, I'm setting up

00:21:21.450 --> 00:21:25.740
that I want to handle keyboard
being attached or detached,

00:21:25.740 --> 00:21:28.690
and also if the keyboard
becomes unusable.

00:21:28.690 --> 00:21:31.290
So that's that keyboard
hidden flag right there.

00:21:31.290 --> 00:21:34.950
And where that comes into play
is on things like Pixelbooks,

00:21:34.950 --> 00:21:38.010
you might have a keyboard
that's available in the hardware

00:21:38.010 --> 00:21:41.640
when you're in clamshell
mode, but when a user flips it

00:21:41.640 --> 00:21:44.210
into the tablet, the
keyboard is in the backside

00:21:44.210 --> 00:21:45.660
and is no longer usable.

00:21:45.660 --> 00:21:47.220
So it's important
to also not forget

00:21:47.220 --> 00:21:49.710
about the keyboard hidden
configuration events as well.

00:21:52.310 --> 00:21:57.080
And now, a way to kind of
approach this volatility of all

00:21:57.080 --> 00:21:59.030
these different input methods--

00:21:59.030 --> 00:22:03.530
what I've done here
is, as an example,

00:22:03.530 --> 00:22:05.600
trying to detect
maybe a game startup,

00:22:05.600 --> 00:22:08.330
or during my
onConfigurationChanged loop,

00:22:08.330 --> 00:22:10.550
trying to detect all the
devices that are available

00:22:10.550 --> 00:22:12.320
for me to control the game.

00:22:12.320 --> 00:22:14.570
So I can use input
manager here to loop

00:22:14.570 --> 00:22:16.970
through all the
hardware and figure out

00:22:16.970 --> 00:22:23.090
what input devices are attached
to this particular device.

00:22:23.090 --> 00:22:26.060
And then once I do that, I can
loop through and maybe check

00:22:26.060 --> 00:22:28.400
out and see, is there
a mouse attached?

00:22:28.400 --> 00:22:29.960
Is there a keyboard attached?

00:22:29.960 --> 00:22:31.580
Is the keyboard usable?

00:22:31.580 --> 00:22:34.670
And it comes down
to trying to assess

00:22:34.670 --> 00:22:38.180
the state of all the input
devices that are currently

00:22:38.180 --> 00:22:39.270
available.

00:22:39.270 --> 00:22:42.110
And then in this case, if I
detect that I have a mouse,

00:22:42.110 --> 00:22:44.280
and I have a keyboard,
and it's usable,

00:22:44.280 --> 00:22:47.420
I now switch my control
scheme over to desktop mode.

00:22:47.420 --> 00:22:50.720
So I've got WASD, and maybe
mouse to click or something

00:22:50.720 --> 00:22:51.990
like that.

00:22:51.990 --> 00:22:55.040
So it comes down to
trying to figure out

00:22:55.040 --> 00:22:59.130
what's available to you and
what the user might want to use.

00:22:59.130 --> 00:23:02.390
And this also ties in with,
what is your gameplay?

00:23:02.390 --> 00:23:06.530
So obviously for a first person
shooter type of gameplay,

00:23:06.530 --> 00:23:08.750
mouse control is going
to be more important.

00:23:08.750 --> 00:23:10.580
If you've got a
third person camera,

00:23:10.580 --> 00:23:12.770
maybe use the mouse
to control that,

00:23:12.770 --> 00:23:16.010
or you're using WASD to
control the player movement.

00:23:16.010 --> 00:23:20.368
So adapt it for
your game as well.

00:23:20.368 --> 00:23:22.910
Different gameplay, different
things are going to make sense.

00:23:26.070 --> 00:23:28.030
So Asphalt 9.

00:23:28.030 --> 00:23:31.120
Gameloft did a great job
of this with Asphalt 9

00:23:31.120 --> 00:23:35.410
and Asphalt 8 where basically
at any point during gameplay

00:23:35.410 --> 00:23:39.310
if somebody attaches a new input
device like a game controller,

00:23:39.310 --> 00:23:41.320
it just seamlessly
pauses the game,

00:23:41.320 --> 00:23:45.220
it pops up a new dialog that
shows the user, OK, here's

00:23:45.220 --> 00:23:48.130
all the buttons you need to
press for a actual controller.

00:23:48.130 --> 00:23:50.200
And throughout the
entire game, they

00:23:50.200 --> 00:23:54.460
change all of their
text and visual textures

00:23:54.460 --> 00:23:57.580
to show that new input method,
whatever the primary input

00:23:57.580 --> 00:23:58.630
method is.

00:23:58.630 --> 00:24:00.820
And on top of that,
they also let the users

00:24:00.820 --> 00:24:02.740
go into the options
at any point in time

00:24:02.740 --> 00:24:05.600
and adjust what control
method they want to use.

00:24:05.600 --> 00:24:06.850
So it's a great example.

00:24:06.850 --> 00:24:09.460
And I recommend you
check it out of, again,

00:24:09.460 --> 00:24:11.485
being adaptive and
anticipating those changes.

00:24:14.690 --> 00:24:17.282
And for a lot of you
that make mobile games,

00:24:17.282 --> 00:24:19.490
you might not think that
keyboard support makes a lot

00:24:19.490 --> 00:24:21.570
of sense for your type of game.

00:24:21.570 --> 00:24:23.330
And I would ask
you, maybe though,

00:24:23.330 --> 00:24:26.420
to consider that when you
add in keyboard support,

00:24:26.420 --> 00:24:28.860
you improve the
accessibility of your game.

00:24:28.860 --> 00:24:32.300
So you could do things
like skill key bindings,

00:24:32.300 --> 00:24:36.653
WASD for character
movement, menu navigation.

00:24:36.653 --> 00:24:38.070
If you really
wanted to get fancy,

00:24:38.070 --> 00:24:40.550
you could also let players
map specific buttons

00:24:40.550 --> 00:24:43.130
to in-game actions,
so they can set it up

00:24:43.130 --> 00:24:46.990
to play exactly how they want.

00:24:46.990 --> 00:24:49.300
And don't forget
about mouse capture.

00:24:49.300 --> 00:24:53.140
So this was added in Android
O, this mouse capture API.

00:24:53.140 --> 00:24:56.860
And it's very, very frustrating
when I boot up a first person

00:24:56.860 --> 00:24:59.740
shooter or something else,
and I try to use the mouse,

00:24:59.740 --> 00:25:01.060
and it does not work.

00:25:01.060 --> 00:25:04.130
So it's really easy to just
request pointer capture.

00:25:04.130 --> 00:25:06.160
It locks the cursor to
the center of the screen.

00:25:06.160 --> 00:25:08.440
You can get your motion
vectors from your mouse.

00:25:08.440 --> 00:25:09.910
And then if you
want at some point,

00:25:09.910 --> 00:25:11.740
you can release pointer
capture to go back

00:25:11.740 --> 00:25:14.020
to standard mouse control.

00:25:14.020 --> 00:25:16.870
So it really, really
makes a huge difference

00:25:16.870 --> 00:25:19.150
and makes games
infinitely more playable

00:25:19.150 --> 00:25:22.400
when you're playing on something
like a Pixelbook in laptop mode

00:25:22.400 --> 00:25:24.040
if you can use the
mouse, and it works.

00:25:26.810 --> 00:25:27.890
Game controllers.

00:25:27.890 --> 00:25:29.870
Now, game controllers
have been around

00:25:29.870 --> 00:25:31.580
for a long time on Android.

00:25:31.580 --> 00:25:33.740
And there's been
game controller APIs

00:25:33.740 --> 00:25:36.320
with varying levels
of game controller

00:25:36.320 --> 00:25:38.750
support from developers.

00:25:38.750 --> 00:25:41.990
So there's more and more
game controllers that

00:25:41.990 --> 00:25:43.340
are being launched for Android.

00:25:43.340 --> 00:25:47.450
And as we see these new devices
that are running Android,

00:25:47.450 --> 00:25:50.180
there's a growing
interest in players

00:25:50.180 --> 00:25:53.510
being able to pick up some kind
of Bluetooth-enabled controller

00:25:53.510 --> 00:25:56.270
sitting on their couch and
playing on a larger display

00:25:56.270 --> 00:25:57.110
device.

00:25:57.110 --> 00:25:59.360
So considering adding
in game controller

00:25:59.360 --> 00:26:02.255
support because it's becoming
more and more prevalent.

00:26:05.510 --> 00:26:07.930
So we've talked about
screen considerations.

00:26:07.930 --> 00:26:10.270
And we've talked about
input considerations.

00:26:10.270 --> 00:26:12.640
Now I want to talk about
some general considerations

00:26:12.640 --> 00:26:16.270
around building and setting
up your APK in a way

00:26:16.270 --> 00:26:20.050
to make sure it supports all
these various devices running

00:26:20.050 --> 00:26:22.090
Android.

00:26:22.090 --> 00:26:24.280
So first off, you should
review your permissions

00:26:24.280 --> 00:26:25.570
that you're asking for.

00:26:25.570 --> 00:26:28.000
And not only your permissions,
but your features.

00:26:28.000 --> 00:26:30.550
So not all features are
supported across all

00:26:30.550 --> 00:26:31.690
these different devices.

00:26:31.690 --> 00:26:35.500
And if you're blindly asking
for a certain feature that's

00:26:35.500 --> 00:26:37.990
not available, somebody
is going to come along

00:26:37.990 --> 00:26:40.130
in the Play Store excited
to play your game,

00:26:40.130 --> 00:26:41.630
they're going to
try to download it,

00:26:41.630 --> 00:26:43.480
and it's going to
say this game is not

00:26:43.480 --> 00:26:47.290
supported on this device,
which is not a win for anybody.

00:26:47.290 --> 00:26:50.530
So what I recommend you do is
you list them as not required

00:26:50.530 --> 00:26:53.510
in your manifests, unless
you absolutely need them.

00:26:53.510 --> 00:26:55.690
And then in your
code, just check

00:26:55.690 --> 00:26:59.350
for the availability at runtime
and if they're not available,

00:26:59.350 --> 00:27:01.670
just handle it
gracefully if you can.

00:27:01.670 --> 00:27:05.390
So again, being adaptive to
the device you're running on.

00:27:05.390 --> 00:27:06.820
So good examples
of features that

00:27:06.820 --> 00:27:08.740
are not supported on
all of these devices

00:27:08.740 --> 00:27:12.010
are things like GPS, SMS.

00:27:12.010 --> 00:27:13.780
Even something like
the back facing camera

00:27:13.780 --> 00:27:15.880
is not present in a
lot of Chromebooks.

00:27:15.880 --> 00:27:19.007
So if you ask for these or
need them for certain features,

00:27:19.007 --> 00:27:20.965
you won't be able to
download on those devices.

00:27:23.940 --> 00:27:27.110
Now, you should also
consider the hardware profile

00:27:27.110 --> 00:27:29.330
that your game
could be running on.

00:27:29.330 --> 00:27:31.760
So I know a lot
of game developers

00:27:31.760 --> 00:27:35.510
either have some kind of
quality profiles set up

00:27:35.510 --> 00:27:39.650
for different device classes
or performance levels,

00:27:39.650 --> 00:27:41.680
and some developers
actually implement

00:27:41.680 --> 00:27:45.110
a kind of runtime automatic
quality control detection

00:27:45.110 --> 00:27:47.750
system that's seeing
what your frame rate is

00:27:47.750 --> 00:27:50.000
and trying to adjust things
like draw count and stuff

00:27:50.000 --> 00:27:51.870
like that on the fly.

00:27:51.870 --> 00:27:55.980
It's really important to either
test the automatic quality

00:27:55.980 --> 00:27:58.500
control software you
might be running,

00:27:58.500 --> 00:28:02.640
or to add quality
profiles set up

00:28:02.640 --> 00:28:05.510
for these new range of devices.

00:28:05.510 --> 00:28:09.060
So if you've got a
gaming-focused Chromebook that

00:28:09.060 --> 00:28:12.690
comes out, or something like
that that has a lot more CPU

00:28:12.690 --> 00:28:14.760
and GPU performance
potential, try

00:28:14.760 --> 00:28:18.270
to create profiles or make
sure your game handles

00:28:18.270 --> 00:28:20.640
a case of running on
these higher-end systems

00:28:20.640 --> 00:28:24.590
and looks great on
these larger screens.

00:28:24.590 --> 00:28:28.080
Additionally, try to provide
an x86 build if you can.

00:28:28.080 --> 00:28:31.400
So a lot of Chrome OS
devices are Intel only.

00:28:31.400 --> 00:28:33.710
And while your ARM
binaries will still run,

00:28:33.710 --> 00:28:37.250
you might incur some
overhead with the instruction

00:28:37.250 --> 00:28:38.840
translation that's happening.

00:28:38.840 --> 00:28:42.920
So try to provide an x86
version of your native libraries

00:28:42.920 --> 00:28:43.940
if you can.

00:28:43.940 --> 00:28:45.410
I'm going to talk
about Android App

00:28:45.410 --> 00:28:47.327
Bundles in a little bit,
which is a great tool

00:28:47.327 --> 00:28:51.070
to make this a lot easier
to support, rather than just

00:28:51.070 --> 00:28:55.310
inside your APK along
with your ARM binaries.

00:28:55.310 --> 00:28:59.890
And if you're going for the
most graphical performance,

00:28:59.890 --> 00:29:02.270
lots of these devices
now support Vulkan.

00:29:02.270 --> 00:29:05.360
And Vulkan has
reached a point where

00:29:05.360 --> 00:29:08.690
we're seeing lots of gains from
developers that are choosing

00:29:08.690 --> 00:29:11.210
to use it, in terms of
maximizing their battery

00:29:11.210 --> 00:29:14.220
performance, and their
graphical performance as well.

00:29:14.220 --> 00:29:15.920
So consider moving
over to Vulkan

00:29:15.920 --> 00:29:18.970
if you're really going for that
high-fidelity type gameplay.

00:29:22.570 --> 00:29:25.510
And finally, test across
all these devices.

00:29:25.510 --> 00:29:28.360
So add test cases
that cover things

00:29:28.360 --> 00:29:32.200
like resizing,
minimizing, maximizing,

00:29:32.200 --> 00:29:34.000
switching from
the smaller screen

00:29:34.000 --> 00:29:36.668
to the larger inner screen.

00:29:36.668 --> 00:29:38.710
I know that you might not
have all these devices,

00:29:38.710 --> 00:29:41.050
or have the resources
available to have

00:29:41.050 --> 00:29:43.750
the actual physical
devices the test on.

00:29:43.750 --> 00:29:47.530
So use things like the
Android or Chrome OS emulator

00:29:47.530 --> 00:29:49.510
to test on.

00:29:49.510 --> 00:29:51.490
Samsung has released
a foldable emulator

00:29:51.490 --> 00:29:54.160
that works on Android
Studio as well.

00:29:54.160 --> 00:29:56.023
So just try to boot
up your game in one

00:29:56.023 --> 00:29:57.940
of those, if you don't
have the actual device,

00:29:57.940 --> 00:29:59.650
and see how it behaves.

00:29:59.650 --> 00:30:01.420
And doing that,
you're going to be

00:30:01.420 --> 00:30:05.230
able to get a great idea of
if you have any major problems

00:30:05.230 --> 00:30:07.660
right out of the gate.

00:30:07.660 --> 00:30:10.060
Also, you can use something
like Firebase Test Lab

00:30:10.060 --> 00:30:11.950
to help automate the
process as well, which

00:30:11.950 --> 00:30:14.200
has all these different kinds
of devices inside of it.

00:30:18.980 --> 00:30:21.220
And in the spirit of
using the tools that

00:30:21.220 --> 00:30:23.440
are available for these
different devices,

00:30:23.440 --> 00:30:26.050
Chrome OS specifically
has a performance tool

00:30:26.050 --> 00:30:28.870
they just announced here at
I/O that if you are looking

00:30:28.870 --> 00:30:31.150
at developing for Chrome
OS, I highly recommend

00:30:31.150 --> 00:30:32.883
you take a look at it.

00:30:32.883 --> 00:30:34.300
It's kind of like
systrace, if you

00:30:34.300 --> 00:30:38.410
use that, where it shows
you how the desktop is being

00:30:38.410 --> 00:30:41.500
composited, when the memory
swapping is occurring,

00:30:41.500 --> 00:30:45.200
CPU, GPU frequencies, and so on.

00:30:45.200 --> 00:30:46.990
So highly recommend
you use the tools

00:30:46.990 --> 00:30:50.650
available for the specific
devices if they exist.

00:30:50.650 --> 00:30:52.690
And if there's a tool
that you guys would

00:30:52.690 --> 00:30:55.780
like to see that's not
available, let us know somehow.

00:30:55.780 --> 00:30:58.910
And we will do our best to
try to accommodate that.

00:31:01.420 --> 00:31:03.520
Now, I mentioned
Android App Bundles.

00:31:03.520 --> 00:31:05.200
And for those of you--

00:31:05.200 --> 00:31:07.150
to tie it back to
what I said about,

00:31:07.150 --> 00:31:09.370
you can do this with one APK.

00:31:09.370 --> 00:31:11.710
Well, you could do
it with one APK,

00:31:11.710 --> 00:31:13.960
or you could do with
one Android App Bundle.

00:31:13.960 --> 00:31:16.540
And Android App
Bundles are essentially

00:31:16.540 --> 00:31:20.890
a new way of distribution on
the Google Play Store, where

00:31:20.890 --> 00:31:23.950
it saves you from having
to manage multiple APKs,

00:31:23.950 --> 00:31:28.090
or trying to fit everything
inside of a single APK,

00:31:28.090 --> 00:31:31.210
and staying underneath
the Play Store size

00:31:31.210 --> 00:31:33.490
requirements for your base APK.

00:31:33.490 --> 00:31:37.360
So instead of uploading an
APK to Google Play, what

00:31:37.360 --> 00:31:41.200
you do is you put everything,
all your native libraries,

00:31:41.200 --> 00:31:45.160
all your different screen
density resolution assets,

00:31:45.160 --> 00:31:47.710
all your localization
files into an App Bundle.

00:31:47.710 --> 00:31:49.615
And you upload that
to Google Play.

00:31:49.615 --> 00:31:50.990
And now what Google
Play is going

00:31:50.990 --> 00:31:55.270
to do is when somebody
comes along on, let's say,

00:31:55.270 --> 00:31:58.060
high resolution x86
device, it's going

00:31:58.060 --> 00:32:00.430
to generate and
sign and give them

00:32:00.430 --> 00:32:03.640
an optimized APK
that only contains

00:32:03.640 --> 00:32:06.170
the x86 and high
resolution assets.

00:32:06.170 --> 00:32:08.050
So they get a smaller
download size.

00:32:08.050 --> 00:32:09.970
And they don't get
all this extra stuff

00:32:09.970 --> 00:32:13.150
that they don't need
to run the game.

00:32:13.150 --> 00:32:16.360
Now, some of you might be
aware of on the Play Store

00:32:16.360 --> 00:32:19.510
that there's a hundred
megabyte limit for your APK.

00:32:19.510 --> 00:32:22.690
If you go over that amount, you
have to use expansion files.

00:32:22.690 --> 00:32:24.760
If you use App
Bundles, that limit

00:32:24.760 --> 00:32:27.410
is actually increased
to 150 megabytes.

00:32:27.410 --> 00:32:29.110
So we're really
recommending-- this

00:32:29.110 --> 00:32:32.590
is what we feel is the future of
distribution on the Play Store

00:32:32.590 --> 00:32:34.100
and Android in general.

00:32:34.100 --> 00:32:36.970
So we've been recommending to
all developers, and especially

00:32:36.970 --> 00:32:39.910
game developers that
have a lot of assets,

00:32:39.910 --> 00:32:42.377
and different sets of
libraries, we recommend you

00:32:42.377 --> 00:32:43.960
guys try to switch
over to App Bundles

00:32:43.960 --> 00:32:46.690
if you can as
quickly as possible.

00:32:46.690 --> 00:32:51.650
And luckily, it's
pretty easy to do.

00:32:51.650 --> 00:32:53.750
I've talked about that.

00:32:53.750 --> 00:32:56.620
If you're using Unity
2018.3 and above,

00:32:56.620 --> 00:32:59.380
you can simply just choose to
build an App Bundle instead

00:32:59.380 --> 00:33:01.330
of an APK.

00:33:01.330 --> 00:33:03.970
Or if you're using Android
Studio 3.2 and above,

00:33:03.970 --> 00:33:06.670
you can simply, again, choose
to build an App Bundle instead

00:33:06.670 --> 00:33:07.870
of an APK.

00:33:07.870 --> 00:33:09.790
And then once you
build that App Bundle,

00:33:09.790 --> 00:33:13.130
you just upload it straight
to the Google Play Store.

00:33:13.130 --> 00:33:15.380
Now if you have a custom
build pipeline or something

00:33:15.380 --> 00:33:17.600
like that, you can
use a great tool

00:33:17.600 --> 00:33:20.870
called Bundletool to generate
an App Bundle from the command

00:33:20.870 --> 00:33:21.740
line.

00:33:21.740 --> 00:33:24.530
And another useful
feature of Bundletool

00:33:24.530 --> 00:33:28.280
is that not only will it
generate an App Bundle for you

00:33:28.280 --> 00:33:32.690
to use, it will also let
you generate test APKs

00:33:32.690 --> 00:33:33.950
from that App Bundle.

00:33:33.950 --> 00:33:36.470
So let's say you
build your App Bundle

00:33:36.470 --> 00:33:38.930
and now you can
generate specific APKs

00:33:38.930 --> 00:33:40.670
for different device
configurations

00:33:40.670 --> 00:33:42.260
and hand that off
to your QA team

00:33:42.260 --> 00:33:44.120
or to your automated
testing solution

00:33:44.120 --> 00:33:46.790
such that you get all
the benefits of this App

00:33:46.790 --> 00:33:49.970
Bundle, smaller
download sizes, but you

00:33:49.970 --> 00:33:52.070
don't have any of the
overhead of trying

00:33:52.070 --> 00:33:56.870
to also generate APKs to fit
into your existing testing

00:33:56.870 --> 00:33:58.125
processes.

00:33:58.125 --> 00:33:59.000
So it's a great tool.

00:33:59.000 --> 00:34:00.583
And I recommend you
guys check it out.

00:34:03.570 --> 00:34:04.070
OK.

00:34:04.070 --> 00:34:05.990
So we've talked about a
lot different things today.

00:34:05.990 --> 00:34:08.240
And obviously, there's a lot
more we could talk about.

00:34:08.240 --> 00:34:10.130
But what I really want
to stress to you guys,

00:34:10.130 --> 00:34:13.850
again, is that Android gaming
is not just phones anymore.

00:34:13.850 --> 00:34:17.570
Players are experiencing,
whether you know about it

00:34:17.570 --> 00:34:19.460
or not, or like it
or not, they are

00:34:19.460 --> 00:34:22.920
experiencing your game across
a wide variety of devices.

00:34:22.920 --> 00:34:26.210
And by following some of these
best practices that I've talked

00:34:26.210 --> 00:34:29.270
about-- so thinking
about the screen, input,

00:34:29.270 --> 00:34:31.670
setting up your APK
in a smart way--

00:34:31.670 --> 00:34:36.380
you're going to cover all
these additional use cases

00:34:36.380 --> 00:34:40.429
and get the best possible gaming
experience for your players

00:34:40.429 --> 00:34:44.000
no matter what device they
happen to be playing on.

00:34:44.000 --> 00:34:47.630
And if there's one thing
that you take away--

00:34:47.630 --> 00:34:51.370
we talked a lot about
different technical points.

00:34:51.370 --> 00:34:53.650
I want to stress that
if you start off just

00:34:53.650 --> 00:34:57.700
by changing your mindset
about what kind of device

00:34:57.700 --> 00:35:00.760
you're building for, in the
sense that you're not making

00:35:00.760 --> 00:35:02.710
any assumptions about
its capabilities,

00:35:02.710 --> 00:35:06.160
or what input devices, or input
methods it might have attached

00:35:06.160 --> 00:35:10.150
to it, just change your mindset
and try to build something

00:35:10.150 --> 00:35:12.910
that's adaptive is possible,
either in your next game

00:35:12.910 --> 00:35:15.413
engine or your next game that
you happen to be building.

00:35:15.413 --> 00:35:17.830
And if you start off just by
spending a little bit of time

00:35:17.830 --> 00:35:19.930
thinking about these
additional use cases,

00:35:19.930 --> 00:35:21.680
it's going to make
your life a lot easier,

00:35:21.680 --> 00:35:26.750
and you're already going to
get 99% of the way there.

00:35:26.750 --> 00:35:31.090
So I wanted to call out if
you're very interested in maybe

00:35:31.090 --> 00:35:32.890
having your game
looked at and seeing

00:35:32.890 --> 00:35:36.070
how it might function on
these different devices

00:35:36.070 --> 00:35:38.675
or any other technical
questions you might have,

00:35:38.675 --> 00:35:41.050
we're actually doing game
reviews in a garage back there.

00:35:41.050 --> 00:35:43.447
So I highly recommend you
guys stop by and check it out.

00:35:43.447 --> 00:35:45.280
You can just go through
the doors over there

00:35:45.280 --> 00:35:46.210
in the back corner.

00:35:46.210 --> 00:35:48.100
There's a walk-up desk.

00:35:48.100 --> 00:35:50.050
Either myself or one of
my esteemed colleagues

00:35:50.050 --> 00:35:51.508
can sit down and
talk with you guys

00:35:51.508 --> 00:35:54.790
about any kind of technical
issues you might be having.

00:35:54.790 --> 00:35:56.450
And that's it.

00:35:56.450 --> 00:36:00.170
I hope you guys found this talk
informational and exciting.

00:36:00.170 --> 00:36:02.050
And I hope a lot
more of you consider

00:36:02.050 --> 00:36:04.180
all these different
devices as you continue

00:36:04.180 --> 00:36:05.620
to build out your games.

00:36:05.620 --> 00:36:06.890
And thank you so much.

00:36:06.890 --> 00:36:09.790
And I hope you have a great
rest of the I/O. Thanks.

00:36:09.790 --> 00:36:12.240
[MUSIC PLAYING]

