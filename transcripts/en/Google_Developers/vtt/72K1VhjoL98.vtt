WEBVTT
Kind: captions
Language: en

00:00:00.300 --> 00:00:02.914
Hi, I'm Ankur Kotwal, a
developer advocate at Google.

00:00:03.224 --> 00:00:04.880
Today, I'm going to talk about how

00:00:04.880 --> 00:00:07.615
you can start building
apps for Android TV.

00:00:08.780 --> 00:00:12.510
Great experiences on Android
TV are casual, cinematic,

00:00:12.510 --> 00:00:13.305
and simple.

00:00:14.330 --> 00:00:17.250
A TV screen is typically
viewed from about 10 feet away,

00:00:17.250 --> 00:00:21.350
and it's much larger than
other Android devices.

00:00:22.390 --> 00:00:25.450
Building an effective
user interface for TV

00:00:25.450 --> 00:00:28.280
requires a different
approach and different tools.

00:00:29.090 --> 00:00:33.080
To make your life easier, we provide
the Leanback Support Library.

00:00:33.230 --> 00:00:37.620
It includes APIs, resources, and
widgets to build apps for TV.

00:00:38.510 --> 00:00:40.720
You can build apps for
Android TV without it,

00:00:40.870 --> 00:00:41.790
but why would you?

00:00:42.220 --> 00:00:44.720
It makes building
high-quality user experiences

00:00:44.720 --> 00:00:46.960
for the big screen super easy.

00:00:48.400 --> 00:00:51.470
When you create a project and
choose TV as your form factor,

00:00:51.470 --> 00:00:54.080
the Leanback Support
Library is automatically

00:00:54.080 --> 00:00:55.270
added into your project.

00:00:55.760 --> 00:00:57.880
If you're not using Android Studio,

00:00:57.880 --> 00:00:59.880
you can declare these dependencies

00:01:00.410 --> 00:01:02.870
through your build.gradle file.

00:01:03.190 --> 00:01:05.600
The Android Support Library is available

00:01:05.600 --> 00:01:07.575
in the Android Repository Package.

00:01:08.440 --> 00:01:10.550
So if you haven't installed
this package yet,

00:01:10.550 --> 00:01:13.310
you can do so via the SDK manager.

00:01:14.340 --> 00:01:16.000
Now let's look at our sample app.

00:01:16.000 --> 00:01:18.830
First, you must declare
an activity for TV

00:01:18.830 --> 00:01:23.333
in the Manifest using the
Leanback Launcher Intent Filter.

00:01:23.520 --> 00:01:25.880
This intent filter identifies your app

00:01:25.880 --> 00:01:27.870
as being built for Android TV.

00:01:28.490 --> 00:01:31.370
At the same time,
setting this intent filter

00:01:31.370 --> 00:01:33.880
also identifies which activity in your app

00:01:33.880 --> 00:01:37.540
should be launched when a user
selects the app icon on TV.

00:01:38.350 --> 00:01:41.290
The Leanback Library
provides a standard theme

00:01:41.290 --> 00:01:44.280
for TV activities called theme.leanback.

00:01:45.250 --> 00:01:48.550
This provides a consistent
visual style for TV apps.

00:01:48.550 --> 00:01:51.780
And it is recommended for any TV app that

00:01:51.780 --> 00:01:54.005
uses the Leanback Library classes.

00:01:54.440 --> 00:01:56.810
The Leanback Support Library is designed

00:01:56.810 --> 00:01:59.597
based on the model-presenter-view pattern.

00:02:00.497 --> 00:02:03.350
A derivative of the
model-view-controller pattern.

00:02:04.200 --> 00:02:07.000
There are strict requirements
for model objects.

00:02:07.000 --> 00:02:10.320
An object adapter can be used
to define any kinds of models,

00:02:10.320 --> 00:02:13.450
and therefore you should be
able to update your existing app

00:02:13.450 --> 00:02:15.610
without changing your model.

00:02:16.520 --> 00:02:19.910
It's also possible to connect local
or online data sources

00:02:19.910 --> 00:02:23.500
that contain your media
using object adapters.

00:02:23.750 --> 00:02:25.970
And you can define how these items

00:02:25.970 --> 00:02:27.870
will look using presenters.

00:02:28.910 --> 00:02:31.750
The Leanback Library also
provides pre-built fragments

00:02:31.750 --> 00:02:34.340
for browsing and interacting
with media catalogs,

00:02:34.470 --> 00:02:36.200
and you can take advantage of this

00:02:36.200 --> 00:02:38.580
when you're building your
own media browsing apps.

00:02:39.140 --> 00:02:41.080
Here is the initial layout for the app.

00:02:41.550 --> 00:02:45.210
It consists of a single
subclass of the BrowseFragment

00:02:45.210 --> 00:02:46.890
from the Leanback Support Library.

00:02:47.550 --> 00:02:50.380
The BrowseFragment allows you
to create a primary layout

00:02:50.380 --> 00:02:53.810
for browsing categories
and rows of media items

00:02:53.810 --> 00:02:55.420
with minimum effort.

00:02:55.890 --> 00:02:57.620
As you can see in this sample app.

00:02:58.290 --> 00:03:00.380
Just adding this class to our layout

00:03:00.380 --> 00:03:02.860
has created a multi-pane layout

00:03:02.860 --> 00:03:05.330
along with standard navigational design

00:03:05.330 --> 00:03:07.750
and polished transition animations.

00:03:08.830 --> 00:03:10.770
Let's look at how we can populate

00:03:10.770 --> 00:03:12.760
the fragment with some content.

00:03:13.800 --> 00:03:16.330
A single ArrayObjectAdapter is used

00:03:16.330 --> 00:03:19.480
to define a list of ListRow objects.

00:03:19.480 --> 00:03:22.940
And a ListRow presenter
is used to display them.

00:03:24.530 --> 00:03:27.710
Categories are automatically
displayed vertically

00:03:27.710 --> 00:03:30.540
on the left, whilst
media for each category

00:03:30.540 --> 00:03:33.580
is a horizontal scrolling list.

00:03:33.580 --> 00:03:36.820
As the user drills
deeper into the category,

00:03:36.820 --> 00:03:39.950
the categories
themselves will collapse

00:03:39.950 --> 00:03:43.060
and will be displayed
per row as a header item.

00:03:43.060 --> 00:03:46.369
Each ListRow object is
composed of one header item

00:03:46.369 --> 00:03:48.500
and another ArrayObjectAdapter.

00:03:49.110 --> 00:03:51.550
The header item
describes the metadata

00:03:51.550 --> 00:03:54.820
of this row-- in this
case, the category name.

00:03:55.240 --> 00:03:58.560
And the ArrayObjectAdapter
contains the media items

00:03:58.560 --> 00:03:59.790
for each category.

00:04:00.530 --> 00:04:03.010
Here, a user-defined CardPresenter

00:04:03.010 --> 00:04:05.530
is used to display each media item.

00:04:05.910 --> 00:04:07.825
You need to present this yourself.

00:04:09.000 --> 00:04:11.660
All of these classes--ArrayObjectAdapter,

00:04:11.660 --> 00:04:13.600
ListRepresenter, and ListRow,

00:04:13.600 --> 00:04:16.320
are provided by the
Leanback Support Library.

00:04:16.320 --> 00:04:18.860
The only thing you need
to implement yourself

00:04:18.860 --> 00:04:21.940
is a presenter for
displaying your media items.

00:04:22.820 --> 00:04:24.680
When you create a ListRow object,

00:04:24.680 --> 00:04:27.160
you can pass your
own custom presenter

00:04:27.160 --> 00:04:30.860
to define how each
individual item will look.

00:04:31.980 --> 00:04:35.570
In this example, CardPresenter
displays each media item

00:04:35.570 --> 00:04:38.250
as a card filled with a thumbnail image.

00:04:38.470 --> 00:04:41.200
The CardPresenter extends
the Presenter class,

00:04:41.200 --> 00:04:44.000
overriding onCreateViewHolder
to generate views

00:04:44.000 --> 00:04:47.460
and unbindViewHolder to bind objects

00:04:47.460 --> 00:04:49.260
to views on demand.

00:04:49.290 --> 00:04:50.870
One thing you should keep in mind

00:04:50.870 --> 00:04:53.790
is that every interactive
view in Android TV

00:04:53.790 --> 00:04:56.620
should be navigable by
the directional pad.

00:04:57.490 --> 00:05:00.490
To achieve this, you
need to set the Focusable

00:05:00.490 --> 00:05:04.350
and FocusableInTouchMode
properties to true, like here.

00:05:05.260 --> 00:05:07.880
In order to interact with user input,

00:05:07.880 --> 00:05:11.630
you need to add the OnItemClick
listener to the BrowseFragment.

00:05:12.750 --> 00:05:15.570
During the callback,
you can fire an intent

00:05:15.570 --> 00:05:18.300
to start the item DetailsActivity

00:05:18.300 --> 00:05:21.760
or replace the BrowseFragment
with the DetailsFragment

00:05:21.760 --> 00:05:23.140
via the fragment manager.

00:05:24.520 --> 00:05:27.540
The DetailsFragment, also
found in the Support Library,

00:05:27.540 --> 00:05:29.750
allows you to create a primary layout

00:05:29.750 --> 00:05:32.060
for displaying detailed information.

00:05:32.060 --> 00:05:35.240
And again, it does so with
minimum effort on your part.

00:05:35.470 --> 00:05:38.250
Again, a single ArrayObjectAdapter

00:05:38.250 --> 00:05:40.650
is used to define a list of rows.

00:05:41.210 --> 00:05:43.230
The DetailsOverviewRow is the row

00:05:43.230 --> 00:05:46.700
which contains the
specifics of a media item.

00:05:46.700 --> 00:05:50.360
In order to render the
DetailsOverview object itself,

00:05:50.360 --> 00:05:53.785
you use the DetailsOverviewRow presenter.

00:05:54.970 --> 00:05:57.460
This row consists of an image,

00:05:57.920 --> 00:05:59.270
a DescriptionView,

00:05:59.410 --> 00:06:01.050
and a series of actions.

00:06:02.000 --> 00:06:04.590
You can easily preview an image,

00:06:05.390 --> 00:06:07.290
or add actions to this object

00:06:07.290 --> 00:06:10.840
by calling the methods
setImageBitmap or addAction.

00:06:11.970 --> 00:06:13.960
For displaying the DescriptionView,

00:06:13.960 --> 00:06:16.530
you can use the
AbstractDetailsDescription

00:06:16.530 --> 00:06:17.690
presenter class.

00:06:18.530 --> 00:06:21.390
It is also possible to add more content,

00:06:21.390 --> 00:06:23.590
such as related videos.

00:06:23.590 --> 00:06:26.570
And to do so, you can
add an additional row

00:06:26.570 --> 00:06:31.000
into the ArrayObjectAdapter with
a presenter to display them.

00:06:31.120 --> 00:06:33.730
Here, an additional ListRow object

00:06:33.730 --> 00:06:35.900
is at the end of the ArrayObjectAdapter

00:06:35.900 --> 00:06:38.090
with a list of related videos.

00:06:38.090 --> 00:06:41.820
And again, the ListRow presenter
is used to display this row.

00:06:42.500 --> 00:06:44.610
So these are the basic steps

00:06:44.610 --> 00:06:47.120
to get started with
Android TV development.

00:06:47.400 --> 00:06:49.310
In summary, the Leanback Support Library

00:06:49.310 --> 00:06:52.740
makes it super easy to build
high-quality experiences.

00:06:53.210 --> 00:06:55.240
The BrowseFragment and DetailsFragment

00:06:55.240 --> 00:06:58.275
are the easy way to jump start
your Android TV development.

00:06:59.020 --> 00:07:01.380
The code shown in this dev byte

00:07:01.380 --> 00:07:03.570
is part of the samples listed here.

00:07:03.730 --> 00:07:07.020
And you can also discover more
about the many unique features

00:07:07.020 --> 00:07:10.440
of the Android TV platform,
such as recommendations

00:07:10.440 --> 00:07:12.500
and the background manager,

00:07:12.500 --> 00:07:15.850
at developer.android.com/tv.

00:07:16.290 --> 00:07:19.310
I look forward to seeing
your apps on the big screen.

