WEBVTT
Kind: captions
Language: en

00:00:03.890 --> 00:00:06.710
PAUL COVELL: Hi, good morning.

00:00:06.710 --> 00:00:08.680
My name is Paul and
I'm a product manager

00:00:08.680 --> 00:00:10.420
on Brillo and Weave.

00:00:10.420 --> 00:00:13.915
And I am also looking after
security for the products.

00:00:17.230 --> 00:00:19.720
It looks like you can see that.

00:00:19.720 --> 00:00:21.180
So I'm going to jump right in.

00:00:21.180 --> 00:00:22.820
There's a lot to cover.

00:00:22.820 --> 00:00:25.860
And I may have time for some
questions at the very end.

00:00:25.860 --> 00:00:29.670
But I'll also be at the office
hours for the next two hours.

00:00:29.670 --> 00:00:32.060
So feel free to come
by and talk to me there

00:00:32.060 --> 00:00:34.480
if you do have questions.

00:00:34.480 --> 00:00:39.000
So I'd like to start with
just, what is IoT security?

00:00:39.000 --> 00:00:40.810
IoT can be a pretty broad term.

00:00:40.810 --> 00:00:45.370
I'd like to give a little
context for the next half hour

00:00:45.370 --> 00:00:49.220
so we can all be thinking
about it in the same way.

00:00:49.220 --> 00:00:51.070
It's about all the
things in the product.

00:00:51.070 --> 00:00:53.690
And this is especially
important when it comes to IoT.

00:00:53.690 --> 00:00:55.810
There's usually several
different parts-- a cloud

00:00:55.810 --> 00:00:59.510
server, an app, a
mobile app or two,

00:00:59.510 --> 00:01:01.250
and then the device itself.

00:01:01.250 --> 00:01:03.330
So if we want to talk
seriously about security,

00:01:03.330 --> 00:01:05.349
we have to think about
each of these things

00:01:05.349 --> 00:01:08.440
and the different ways
they might be attacked.

00:01:08.440 --> 00:01:10.570
And we also have to think
about all the networks

00:01:10.570 --> 00:01:11.778
that they use to communicate.

00:01:15.590 --> 00:01:17.670
The second thing that
we feel is important is

00:01:17.670 --> 00:01:20.080
that this isn't just
another web service, right.

00:01:20.080 --> 00:01:23.190
These devices are in your
home, your office, car,

00:01:23.190 --> 00:01:25.726
they can record data,
they can control things.

00:01:25.726 --> 00:01:27.100
And if one of them
is compromised

00:01:27.100 --> 00:01:29.100
it can be used as
a jumping off point

00:01:29.100 --> 00:01:33.330
to attack other
things in that area.

00:01:33.330 --> 00:01:35.320
Let's take a quick example.

00:01:35.320 --> 00:01:37.750
Here my webcam is
monitoring my living room.

00:01:37.750 --> 00:01:39.730
This picture of my dog
ends up everywhere.

00:01:42.655 --> 00:01:45.030
So now the data could be stolen
from any of these places,

00:01:45.030 --> 00:01:45.820
right.

00:01:45.820 --> 00:01:48.080
It's not just on my camera.

00:01:48.080 --> 00:01:49.760
And it isn't really
just about the data.

00:01:49.760 --> 00:01:51.830
If they managed to
steal the credentials,

00:01:51.830 --> 00:01:54.190
then they might be able to
control my webcam remotely

00:01:54.190 --> 00:01:56.940
in the future and I might not
even that they're doing it.

00:01:56.940 --> 00:01:59.020
So we really have to
look at the whole system

00:01:59.020 --> 00:02:00.520
if we want to build
secure products.

00:02:02.720 --> 00:02:06.190
So this sort of
thinking led us to a few

00:02:06.190 --> 00:02:09.650
of the big elements of
security in Brillo and Weave.

00:02:09.650 --> 00:02:11.950
And you may have seen these
from the first day keynote,

00:02:11.950 --> 00:02:14.490
but just to reiterate,
the first item

00:02:14.490 --> 00:02:17.240
is that the owner needs to
be able to grant and revoke

00:02:17.240 --> 00:02:21.800
specific privileges to people,
apps, and other devices.

00:02:21.800 --> 00:02:24.390
And this also means
that the system itself

00:02:24.390 --> 00:02:27.030
needs a way to authenticate the
owner and those other people,

00:02:27.030 --> 00:02:28.820
apps, and device.

00:02:28.820 --> 00:02:31.510
And so we'll talk
about how that works.

00:02:31.510 --> 00:02:33.200
The second thing is
that any user data

00:02:33.200 --> 00:02:36.830
needs to be stored securely
on the device, on the servers.

00:02:36.830 --> 00:02:39.339
It needs to be transmitted
securely among these things.

00:02:39.339 --> 00:02:40.880
There's no cheating
on local networks

00:02:40.880 --> 00:02:44.000
that you think are secure or
backend cloud servers that just

00:02:44.000 --> 00:02:47.429
don't encrypt the stored data.

00:02:47.429 --> 00:02:49.470
And the final thing is--
oh, I had a click there.

00:02:49.470 --> 00:02:50.280
Sorry.

00:02:50.280 --> 00:02:52.770
And the final thing
is that the devices

00:02:52.770 --> 00:02:56.230
need to be resistant
to attacks, updatable,

00:02:56.230 --> 00:02:59.411
and recoverable in the case
that there's a problem.

00:02:59.411 --> 00:03:01.410
So with that in mind,
let's look at a few places

00:03:01.410 --> 00:03:03.869
where real world products
have had problems in the past.

00:03:03.869 --> 00:03:05.910
I'll leave out the names
but if you're interested

00:03:05.910 --> 00:03:07.493
there's a long reading
list at the end

00:03:07.493 --> 00:03:09.690
and you can go
educate yourself more.

00:03:13.080 --> 00:03:17.000
So, a home automation system
that trusts the local network.

00:03:17.000 --> 00:03:20.240
This particular home automation
product has an iPhone app.

00:03:20.240 --> 00:03:23.450
The iPhone app can be used to
control your home remotely.

00:03:23.450 --> 00:03:24.680
So how does it do this?

00:03:24.680 --> 00:03:27.160
It gives the iPhone app
an authorization token

00:03:27.160 --> 00:03:30.250
that it presents to the cloud
server when you are remote,

00:03:30.250 --> 00:03:33.210
and the cloud server then
presents that to your house

00:03:33.210 --> 00:03:35.334
and you can control it.

00:03:35.334 --> 00:03:36.750
But it turns out,
they'll actually

00:03:36.750 --> 00:03:39.080
give any iPhone app on your
local network this token.

00:03:42.199 --> 00:03:42.990
But it's OK, right?

00:03:42.990 --> 00:03:44.906
You only let your friends
on your home network

00:03:44.906 --> 00:03:46.350
and you trust your friends.

00:03:46.350 --> 00:03:49.205
But the catch that we all
have to be thinking about here

00:03:49.205 --> 00:03:52.540
is that that means you also
have to trust any device they

00:03:52.540 --> 00:03:53.990
add to the network.

00:03:53.990 --> 00:03:56.140
And that that device
isn't running any malware

00:03:56.140 --> 00:03:58.170
or hasn't been compromised.

00:03:58.170 --> 00:04:02.300
So now you're
several layers down.

00:04:02.300 --> 00:04:04.230
So if any of those
devices are compromised

00:04:04.230 --> 00:04:06.550
or are running a
malicious application,

00:04:06.550 --> 00:04:09.269
that device can then request
this token, get this token,

00:04:09.269 --> 00:04:11.185
send it off somewhere
that can be then be used

00:04:11.185 --> 00:04:13.030
to control your home remotely.

00:04:13.030 --> 00:04:16.339
So it's much better if you
just don't trust other devices

00:04:16.339 --> 00:04:19.040
in the local network, and
you use sort of an end

00:04:19.040 --> 00:04:21.570
to end authentication and
encryption model with all

00:04:21.570 --> 00:04:22.486
of your communication.

00:04:24.707 --> 00:04:27.040
I'd like to complete the story
a little bit because this

00:04:27.040 --> 00:04:29.780
was something that
frankly was news to me

00:04:29.780 --> 00:04:32.750
when I started really
digging into this area,

00:04:32.750 --> 00:04:36.920
into the world of how a malware
gets onto a laptop or a phone.

00:04:36.920 --> 00:04:38.700
We're all familiar
with the basic advice,

00:04:38.700 --> 00:04:40.967
don't click on links
that you get from someone

00:04:40.967 --> 00:04:42.050
you don't know, et cetera.

00:04:42.050 --> 00:04:43.600
We all do that.

00:04:43.600 --> 00:04:44.430
Right?

00:04:44.430 --> 00:04:47.390
But it turns out with the
right kind of exploit,

00:04:47.390 --> 00:04:49.460
a malicious or
compromised website

00:04:49.460 --> 00:04:52.360
can actually install
malware on your machine

00:04:52.360 --> 00:04:53.960
just by you loading
the web page.

00:04:56.630 --> 00:04:58.180
So for example,
a zero to exploit

00:04:58.180 --> 00:05:00.055
in your browser,
your Flash player,

00:05:00.055 --> 00:05:03.770
your Java Runtime can
actually load up on the page

00:05:03.770 --> 00:05:05.600
and plop some code on
and you might never

00:05:05.600 --> 00:05:07.181
know that's happening.

00:05:07.181 --> 00:05:09.430
There is also a whole market
where people buy and sell

00:05:09.430 --> 00:05:11.770
these exploits.

00:05:11.770 --> 00:05:14.030
So this does happen.

00:05:14.030 --> 00:05:18.170
It can be a fairly expansive
exploit to implement.

00:05:18.170 --> 00:05:22.080
So not all products might
consider this attack case.

00:05:22.080 --> 00:05:25.970
But mitigating it
is fairly cheap

00:05:25.970 --> 00:05:29.414
and it's the same
we just mentioned.

00:05:29.414 --> 00:05:31.330
If you do end to end
authentication encryption

00:05:31.330 --> 00:05:33.163
devices, you don't trust
your local network,

00:05:33.163 --> 00:05:35.990
you can mitigate the impact
of this kind of attack also.

00:05:35.990 --> 00:05:39.970
So we should take a
serious look at that.

00:05:39.970 --> 00:05:40.480
OK.

00:05:40.480 --> 00:05:43.490
Let's move on to
look at smart TVs

00:05:43.490 --> 00:05:45.300
with weak secure boot schemes.

00:05:45.300 --> 00:05:47.550
For those of you who aren't
familiar with secure boot,

00:05:47.550 --> 00:05:50.640
it's simply a way to make sure
that the image that the device

00:05:50.640 --> 00:05:55.150
runs after it boots is authentic
and hasn't been tampered with.

00:05:55.150 --> 00:05:58.570
So that if someone does insert
malware into the device when

00:05:58.570 --> 00:06:01.830
you reboot it should detect
that and say, something's wrong,

00:06:01.830 --> 00:06:04.050
please recover me.

00:06:04.050 --> 00:06:06.390
It's also a very
important part of securing

00:06:06.390 --> 00:06:08.040
the auto-update process.

00:06:08.040 --> 00:06:10.420
So if I'm shipping an
image in from the internet,

00:06:10.420 --> 00:06:12.660
I don't want that device to
run the image unless it's

00:06:12.660 --> 00:06:15.590
authenticated to be from
the original manufacturer

00:06:15.590 --> 00:06:18.090
and also untampered with.

00:06:18.090 --> 00:06:21.260
So probably your devices will
implement something like this.

00:06:23.765 --> 00:06:25.140
This is something
we'll come back

00:06:25.140 --> 00:06:28.850
to but in the case of this
smart TV, they did this.

00:06:28.850 --> 00:06:31.350
They implemented a
secure boot model,

00:06:31.350 --> 00:06:33.590
but they used a simple
encryption mechanism

00:06:33.590 --> 00:06:36.905
and as the secret key they used
the model number of the device.

00:06:39.999 --> 00:06:41.790
So you can bet the
hacker community figured

00:06:41.790 --> 00:06:43.385
that out pretty
quick and they made

00:06:43.385 --> 00:06:46.570
it easy to produce
images for the TV that

00:06:46.570 --> 00:06:48.049
contained whatever you want.

00:06:48.049 --> 00:06:49.590
So if you're a
weekend hacker and you

00:06:49.590 --> 00:06:51.160
want to install some
software on your TV

00:06:51.160 --> 00:06:53.090
and have it do some
stuff that you like then

00:06:53.090 --> 00:06:54.675
this is actually
really great for you.

00:06:54.675 --> 00:06:56.050
But if someone
wants to take over

00:06:56.050 --> 00:06:58.490
your TV without you
knowing, then this

00:06:58.490 --> 00:07:00.520
is a pretty bad thing.

00:07:00.520 --> 00:07:03.290
So one mitigating factor
here is the updates

00:07:03.290 --> 00:07:06.555
were only possible via USB.

00:07:06.555 --> 00:07:08.220
That has other
maintenance issues

00:07:08.220 --> 00:07:09.790
that we'll talk about later on.

00:07:09.790 --> 00:07:12.840
But in this case it meant you
couldn't compromise the devices

00:07:12.840 --> 00:07:15.430
remotely by knowing this.

00:07:15.430 --> 00:07:17.870
But what it did do is
enable a drive-by attack.

00:07:17.870 --> 00:07:22.200
So somebody could walk by
your TV, plug in a USB stick,

00:07:22.200 --> 00:07:24.830
get it to load the update,
and then pull the USB stick

00:07:24.830 --> 00:07:26.144
and walk along.

00:07:26.144 --> 00:07:27.560
So for something
in your home that

00:07:27.560 --> 00:07:29.630
might not be a major concern.

00:07:29.630 --> 00:07:32.830
Again, you trust your friends,
you trust your house guests,

00:07:32.830 --> 00:07:35.370
but a lot of these
televisions are actually

00:07:35.370 --> 00:07:37.380
deployed in commercial
retail spaces

00:07:37.380 --> 00:07:41.630
where that kind of-- a few
minutes of unmonitored access

00:07:41.630 --> 00:07:44.820
might be completely plausible.

00:07:44.820 --> 00:07:47.570
So the moral of this story is,
you really should implement

00:07:47.570 --> 00:07:49.200
a strong secure boot scheme.

00:07:49.200 --> 00:07:50.991
We'll talk more about
what that looks like.

00:07:53.470 --> 00:07:55.815
Third example-- this is
kind of a broad example.

00:07:55.815 --> 00:08:00.970
A lot of the research that is
being done on IoT devices--

00:08:00.970 --> 00:08:04.974
security audits, is showing that
a lot of the servers, the web

00:08:04.974 --> 00:08:07.140
servers that people use to
interact with the devices

00:08:07.140 --> 00:08:10.920
remotely are very weak
on basic security things

00:08:10.920 --> 00:08:15.100
that we've known for a long time
in the web server development

00:08:15.100 --> 00:08:16.660
process.

00:08:16.660 --> 00:08:18.460
And we touched on
this a little earlier.

00:08:18.460 --> 00:08:19.960
This isn't just
another web service.

00:08:19.960 --> 00:08:22.085
So you need to take things
a little more seriously.

00:08:22.085 --> 00:08:26.060
For example, a lot of websites
don't offer even basic attack

00:08:26.060 --> 00:08:27.080
mitigation.

00:08:27.080 --> 00:08:29.700
So I can try the
password 100 times

00:08:29.700 --> 00:08:32.750
and it doesn't lock me out
and it doesn't insert a delay.

00:08:32.750 --> 00:08:35.680
So brute force attacks
become possible.

00:08:35.680 --> 00:08:37.179
There's no two
factor authentication

00:08:37.179 --> 00:08:39.787
for most websites.

00:08:39.787 --> 00:08:42.120
Understandably it takes a
little more work to implement.

00:08:42.120 --> 00:08:44.370
But what that
means is you can be

00:08:44.370 --> 00:08:46.677
much more vulnerable to
things like phishing attempts.

00:08:46.677 --> 00:08:49.010
You put in your password and
then they get your password

00:08:49.010 --> 00:08:50.590
and off they go.

00:08:50.590 --> 00:08:52.120
And finally they
make it very easy

00:08:52.120 --> 00:08:54.740
to simply reset your
password with an email.

00:08:54.740 --> 00:08:59.990
So that by itself seems OK
because your email account

00:08:59.990 --> 00:09:01.120
might be secure.

00:09:01.120 --> 00:09:03.250
But that means then any
of the other mechanisms--

00:09:03.250 --> 00:09:04.791
if you're using an
email account that

00:09:04.791 --> 00:09:07.410
doesn't have a good password
or doesn't have a two factor

00:09:07.410 --> 00:09:10.930
authentication, then
you're vulnerable that way.

00:09:10.930 --> 00:09:13.360
So again, when
this account access

00:09:13.360 --> 00:09:16.400
might allow you to unlock
your door or your car

00:09:16.400 --> 00:09:18.000
or view the webcam
in your house,

00:09:18.000 --> 00:09:20.010
you really have to implement
best practices when

00:09:20.010 --> 00:09:22.530
it comes to securing
your web server as well.

00:09:25.550 --> 00:09:28.750
The final thing I'd like to look
at is a little bit different

00:09:28.750 --> 00:09:31.020
and that's because
physical security

00:09:31.020 --> 00:09:33.900
isn't always considered
for consumer devices.

00:09:33.900 --> 00:09:36.520
And that's fair
in a lot of cases.

00:09:36.520 --> 00:09:39.170
If you imagine an attacker who
has persistent physical access

00:09:39.170 --> 00:09:41.670
to your device and they can
open it and play around with it,

00:09:41.670 --> 00:09:43.680
and if they have
sufficient time and budget,

00:09:43.680 --> 00:09:45.260
they'll almost certainly
compromise the device.

00:09:45.260 --> 00:09:47.610
There's really-- you could
try to build an ATM machine

00:09:47.610 --> 00:09:49.840
but it's seldom worth the cost.

00:09:49.840 --> 00:09:54.660
So that doesn't mean it's
not worth considering at all.

00:09:54.660 --> 00:09:58.970
And within your
specific use case,

00:09:58.970 --> 00:10:01.630
it's worth identifying, what
are the physical attacks

00:10:01.630 --> 00:10:04.730
and how they might be
mitigated in your case.

00:10:04.730 --> 00:10:06.330
So let's look at this one.

00:10:06.330 --> 00:10:07.950
This is a hotel door lock.

00:10:07.950 --> 00:10:11.450
It had a configuration port that
was accessible from the outside

00:10:11.450 --> 00:10:13.290
with just a couple
of minutes of work.

00:10:13.290 --> 00:10:15.100
The attacker did
have to be prepared.

00:10:15.100 --> 00:10:19.079
But it was a $40 preparation
and a 30-minute process.

00:10:19.079 --> 00:10:21.370
And so then they show up at
the hotel door, plug it in.

00:10:21.370 --> 00:10:24.350
They plug it in-- there's
no authorization required

00:10:24.350 --> 00:10:25.850
once you're plugged
into the report.

00:10:25.850 --> 00:10:28.280
You can just read all the
memory off the device.

00:10:28.280 --> 00:10:30.570
So that by itself
maybe allows you

00:10:30.570 --> 00:10:32.820
to compromise a single lock.

00:10:32.820 --> 00:10:35.500
But on the device,
the manufacturer

00:10:35.500 --> 00:10:38.180
had stored a shared
secret key that

00:10:38.180 --> 00:10:41.559
was used to authorize many
rooms within the same block.

00:10:41.559 --> 00:10:42.850
So it could be the whole hotel.

00:10:42.850 --> 00:10:44.474
It could have been
if they separated it

00:10:44.474 --> 00:10:45.660
by wing or something.

00:10:45.660 --> 00:10:48.440
So by having this
key, then the attacker

00:10:48.440 --> 00:10:51.240
could create a card that would
work in any of these doors that

00:10:51.240 --> 00:10:52.432
shared the same block.

00:10:52.432 --> 00:10:54.140
So we're talking about
just a few minutes

00:10:54.140 --> 00:10:59.306
of physical access and boom.

00:10:59.306 --> 00:11:01.180
What are some lessons
we can learn from this?

00:11:01.180 --> 00:11:05.070
Well, you might say take
away the program import,

00:11:05.070 --> 00:11:07.110
and that might be
practical in some cases.

00:11:07.110 --> 00:11:10.350
But this is always a usability
straight off with security.

00:11:10.350 --> 00:11:14.174
So it might be more
appropriate to leave the device

00:11:14.174 --> 00:11:15.840
with the programming
port, but implement

00:11:15.840 --> 00:11:17.530
some kind of
authorization on it if you

00:11:17.530 --> 00:11:23.090
recognize the people
might access it

00:11:23.090 --> 00:11:25.570
without authorization.

00:11:25.570 --> 00:11:29.000
But beyond that, the
most important thing

00:11:29.000 --> 00:11:30.960
is, think about
what happens when

00:11:30.960 --> 00:11:32.280
your device is compromised.

00:11:32.280 --> 00:11:35.960
How widespread is the
value of that compromise?

00:11:35.960 --> 00:11:39.750
So in this case they really
should have come up with a way

00:11:39.750 --> 00:11:42.110
to scope that shared key
down a little bit-- come up

00:11:42.110 --> 00:11:44.767
with another way so that if
one device is compromised,

00:11:44.767 --> 00:11:46.350
you don't get access
to lots of rooms.

00:11:46.350 --> 00:11:47.725
You just get access
to that room.

00:11:52.180 --> 00:11:53.760
So up to now we've
talked about what

00:11:53.760 --> 00:11:55.650
elements should go
into security and we've

00:11:55.650 --> 00:11:59.600
looked at some empirical
lessons from other devices.

00:11:59.600 --> 00:12:03.420
There's a lot more of
those, but I didn't

00:12:03.420 --> 00:12:04.920
want to take forever on that.

00:12:04.920 --> 00:12:07.980
So let's look at how Brillo
and Weave can help you make

00:12:07.980 --> 00:12:09.380
your IT products more secure.

00:12:11.980 --> 00:12:16.850
Weave handles the user
accounts and sharing for you.

00:12:16.850 --> 00:12:20.800
So it provides an
integrated solution

00:12:20.800 --> 00:12:22.570
across all of the devices.

00:12:22.570 --> 00:12:24.585
It understands the
concept of a user.

00:12:24.585 --> 00:12:26.960
And that user is the same user
when you log in on the web

00:12:26.960 --> 00:12:29.126
and it's the same user when
you log in on the phone.

00:12:29.126 --> 00:12:31.200
It's the same user that
the device thinks it is.

00:12:31.200 --> 00:12:33.740
And that's all based
on Google accounts.

00:12:33.740 --> 00:12:35.610
So right off the bat
you get this sort

00:12:35.610 --> 00:12:38.070
of state of the art
user authentication

00:12:38.070 --> 00:12:40.780
that's built in there-- password
strength indicators, repeated

00:12:40.780 --> 00:12:44.190
bad login attempt blocking,
optional two factor

00:12:44.190 --> 00:12:47.270
authentication with several
different mechanisms.

00:12:47.270 --> 00:12:50.010
On top of that, we've added
some IoT specific features.

00:12:50.010 --> 00:12:53.150
So a secure way to
identify a specific user

00:12:53.150 --> 00:12:55.800
on all platforms,
which I mentioned.

00:12:55.800 --> 00:13:00.030
But from there the owner
can share that access

00:13:00.030 --> 00:13:02.430
and revoke that access
from other users who

00:13:02.430 --> 00:13:04.820
are understood in the same way.

00:13:04.820 --> 00:13:07.110
So that provides a very
consistent experience

00:13:07.110 --> 00:13:10.180
for users across many devices.

00:13:10.180 --> 00:13:13.680
And think about it
like Google doc sharing

00:13:13.680 --> 00:13:15.805
but for your devices.

00:13:15.805 --> 00:13:17.680
So you pick the device,
you share the device.

00:13:17.680 --> 00:13:20.860
You pick the privilege,
share the privilege.

00:13:20.860 --> 00:13:25.560
So the next thing Weave provides
is data transmission security.

00:13:25.560 --> 00:13:29.270
Like we talked about, all
of this endpoint security

00:13:29.270 --> 00:13:33.360
is fairly useless if I
can sniff your traffic

00:13:33.360 --> 00:13:35.840
or spoof your traffic whenever
it goes over the network.

00:13:35.840 --> 00:13:39.910
So Weave secures everything
end to end using TLS,

00:13:39.910 --> 00:13:42.620
whether it's the local
network or over the internet.

00:13:42.620 --> 00:13:44.786
For those of you who are
interested in the Bluetooth

00:13:44.786 --> 00:13:49.730
BLE, we'll be doing work
there as well so stay tuned.

00:13:49.730 --> 00:13:51.860
And then all the data
stored in the Weave cloud

00:13:51.860 --> 00:13:54.230
is encrypted when it's on disk.

00:13:54.230 --> 00:13:58.730
So that limits the exposure
in all these different areas

00:13:58.730 --> 00:14:03.282
without any manual
effort on your part.

00:14:03.282 --> 00:14:04.990
So all of that's good
and it makes sense,

00:14:04.990 --> 00:14:07.610
but the big wins start to
come when you can use Weave

00:14:07.610 --> 00:14:09.930
instead of implementing
these things yourself.

00:14:09.930 --> 00:14:12.480
So the more you can use the
Weave and Google provided

00:14:12.480 --> 00:14:15.590
services, the more you reuse the
existing code that we already

00:14:15.590 --> 00:14:17.860
have and the best practices
that are implemented.

00:14:17.860 --> 00:14:19.010
And for the parts
that are maintained

00:14:19.010 --> 00:14:21.301
by us, that's simply less
work you need to do yourself.

00:14:24.430 --> 00:14:29.490
For each of these items,
it's the kind of thing

00:14:29.490 --> 00:14:31.712
where you could choose.

00:14:31.712 --> 00:14:33.170
You don't have to
take all of them.

00:14:33.170 --> 00:14:34.253
You can take some of them.

00:14:34.253 --> 00:14:36.450
You can add your own
service next to it.

00:14:36.450 --> 00:14:38.270
We're trying to strike
a balance with Weave

00:14:38.270 --> 00:14:40.350
so that it provides
a lot of value,

00:14:40.350 --> 00:14:43.130
but when you have
a particular need

00:14:43.130 --> 00:14:45.089
to go outside of that you can.

00:14:45.089 --> 00:14:46.880
So that way you can
capture as much of this

00:14:46.880 --> 00:14:50.650
as is relevant for your product.

00:14:50.650 --> 00:14:53.200
So let's look at Brillo.

00:14:53.200 --> 00:14:56.285
Brillo provides
integrated updates.

00:14:56.285 --> 00:14:57.660
We've spent a lot
of time on this

00:14:57.660 --> 00:15:00.250
in some of the other talks,
particularly the services

00:15:00.250 --> 00:15:01.750
talk yesterday.

00:15:01.750 --> 00:15:04.780
And so for those of you
who are interested in that,

00:15:04.780 --> 00:15:08.760
I'd recommend you go and review
that if you didn't see it.

00:15:08.760 --> 00:15:11.020
In a nutshell though,
devices that are secure today

00:15:11.020 --> 00:15:12.544
will have some exploit tomorrow.

00:15:12.544 --> 00:15:13.960
We can't anticipate
what that will

00:15:13.960 --> 00:15:17.500
be so we need to provide
a full service solution.

00:15:17.500 --> 00:15:19.440
Google maintains
the operating system

00:15:19.440 --> 00:15:21.990
and we make security
fixes available.

00:15:21.990 --> 00:15:26.780
Developers fix-- I've sort of
got a little progress bar here.

00:15:26.780 --> 00:15:30.550
Developers fix their software,
or with the new distribution

00:15:30.550 --> 00:15:33.510
of our software they pop
up to the developer portal.

00:15:33.510 --> 00:15:36.060
The devices in the
field pull it down.

00:15:36.060 --> 00:15:37.600
We secure the payloads.

00:15:37.600 --> 00:15:41.730
You sign the image so the
device will verify that image

00:15:41.730 --> 00:15:44.470
before it will run it.

00:15:44.470 --> 00:15:49.070
And then as a second step
here, crash reporting

00:15:49.070 --> 00:15:52.360
isn't always thought of
as a security element

00:15:52.360 --> 00:15:55.096
but stability and security
really go hand in hand.

00:15:55.096 --> 00:15:56.470
Things that can
crash your device

00:15:56.470 --> 00:15:59.450
can potentially also be
used to exploit your device.

00:15:59.450 --> 00:16:02.690
So watching crashes and
trying to understand

00:16:02.690 --> 00:16:04.980
where your big
stability problems are,

00:16:04.980 --> 00:16:06.919
we feel is also an
important part of security.

00:16:06.919 --> 00:16:08.460
I bundle it with
updates because it's

00:16:08.460 --> 00:16:12.490
one way to tell if your
updates are sticking.

00:16:12.490 --> 00:16:14.570
Finally, updates are
applied in the background

00:16:14.570 --> 00:16:17.300
so they don't interrupt
device behavior.

00:16:17.300 --> 00:16:19.229
This is fairly important
because you really

00:16:19.229 --> 00:16:20.770
don't want to end
up at the situation

00:16:20.770 --> 00:16:24.240
where the fix for an exploit
has been available for months

00:16:24.240 --> 00:16:26.530
but nobody's installed
it so all of your routers

00:16:26.530 --> 00:16:28.680
are vulnerable to
attack for example.

00:16:28.680 --> 00:16:32.720
So finding a way to
allow the consumer

00:16:32.720 --> 00:16:38.300
to get updates that they
will actually apply,

00:16:38.300 --> 00:16:41.180
and that doesn't either have a
lot of friction to that process

00:16:41.180 --> 00:16:45.671
or cause them a lot of
worry is really, really

00:16:45.671 --> 00:16:48.170
important to getting people to
actually apply these updates.

00:16:52.191 --> 00:16:54.690
Finally-- and it looks like we
will have time for questions.

00:16:54.690 --> 00:16:57.610
Finally, I'd like to end
with a discussion on defense

00:16:57.610 --> 00:16:59.740
in depth, which is a
kind of security ideology

00:16:59.740 --> 00:17:03.540
that we feel works
quite well in this area.

00:17:03.540 --> 00:17:06.780
So this is a photo of the
Dun Aengus Castle on the Aran

00:17:06.780 --> 00:17:08.440
Islands in Ireland.

00:17:08.440 --> 00:17:11.990
And I've only been there once,
and it was a long time ago,

00:17:11.990 --> 00:17:14.000
but it really stuck with me.

00:17:14.000 --> 00:17:16.910
And you could see somewhat
from this picture--

00:17:16.910 --> 00:17:19.172
I looked for my own pictures
but I didn't have any.

00:17:19.172 --> 00:17:20.710
It was too long ago.

00:17:20.710 --> 00:17:23.839
So these rocks in front-- when
you approach from the top,

00:17:23.839 --> 00:17:25.480
it's like, what is
this field of rocks?

00:17:25.480 --> 00:17:27.789
And actually it's
cavalry defense.

00:17:27.789 --> 00:17:31.740
So if you got to the
islands, and you got up

00:17:31.740 --> 00:17:38.850
the 200-foot cliff to the
castle, with your horses--

00:17:38.850 --> 00:17:39.350
Yeah.

00:17:39.350 --> 00:17:40.230
You'd be so tired.

00:17:40.230 --> 00:17:43.530
But then you have to
cross this boulder field

00:17:43.530 --> 00:17:45.057
with sort of spiky
rocks pointing

00:17:45.057 --> 00:17:47.390
toward you that the horses
wouldn't be able to navigate.

00:17:47.390 --> 00:17:49.160
You have to climb the wall.

00:17:49.160 --> 00:17:51.310
Once you're inside
there's additional rooms.

00:17:51.310 --> 00:17:53.742
So for you Game of
Thrones fans out there,

00:17:53.742 --> 00:17:55.950
this is more difficult to
attack than King's Landing.

00:18:01.010 --> 00:18:04.100
But the summary here is that
if one defense fails then

00:18:04.100 --> 00:18:07.370
there's others waiting to make
it harder to actually capture

00:18:07.370 --> 00:18:10.880
any benefit from your successful
attack on the first defense.

00:18:10.880 --> 00:18:15.810
So an attacker has to be very
persistent and very successful

00:18:15.810 --> 00:18:19.080
through many layers before they
can really get to their goal.

00:18:19.080 --> 00:18:23.900
We think about device
security in much the same way.

00:18:23.900 --> 00:18:26.730
So verified boot, which is what
we call the secure boot that we

00:18:26.730 --> 00:18:30.170
talked about-- verified boot
starts from the very moment

00:18:30.170 --> 00:18:31.229
the processor powers on.

00:18:31.229 --> 00:18:33.020
It verifies all of the
software that you're

00:18:33.020 --> 00:18:36.930
going to run, all the way
down to the root file system

00:18:36.930 --> 00:18:38.430
where the executables live.

00:18:38.430 --> 00:18:42.907
So any changes or compromises
there will be caught.

00:18:42.907 --> 00:18:44.740
If something makes it
past that then there's

00:18:44.740 --> 00:18:47.560
process sandboxing
and IPC, interprocess

00:18:47.560 --> 00:18:52.630
control authentication, so
that if a single process is

00:18:52.630 --> 00:18:55.920
compromised it can't escape and
gain additional privileges very

00:18:55.920 --> 00:19:00.630
easily or it can't attack
other processes very easily.

00:19:00.630 --> 00:19:02.880
We have mandatory access
control mechanisms.

00:19:02.880 --> 00:19:05.260
This was brought up
SELinux and setcomp.

00:19:05.260 --> 00:19:09.440
I think Gaurav mentioned
it in the Fireside Chat.

00:19:09.440 --> 00:19:14.440
The idea there is just to
provide additional defaults

00:19:14.440 --> 00:19:17.230
for anything that you
might have missed.

00:19:17.230 --> 00:19:21.320
And then there's all sorts of
other things like tool chain

00:19:21.320 --> 00:19:24.120
configuration for
address randomization

00:19:24.120 --> 00:19:28.500
so that some of the attacks
that have emerged over the years

00:19:28.500 --> 00:19:30.760
and are well known are
protected against without you

00:19:30.760 --> 00:19:32.468
having to set any
configuration yourself.

00:19:37.710 --> 00:19:40.179
We build all of the
Brillo core services

00:19:40.179 --> 00:19:42.470
and set up the operating
system using all these things.

00:19:42.470 --> 00:19:45.590
But just as importantly,
we make the tools

00:19:45.590 --> 00:19:49.320
configured and available so that
you can build your own software

00:19:49.320 --> 00:19:52.150
while continuing to take
advantage of these things.

00:19:52.150 --> 00:19:56.160
So that way-- the whole thing.

00:19:56.160 --> 00:20:00.189
In addition, we'll keep
adding to this list as we go.

00:20:00.189 --> 00:20:02.730
There's lots of little bits that
fit into making an operating

00:20:02.730 --> 00:20:05.580
system as secure as
possible and as new

00:20:05.580 --> 00:20:08.360
best practices are
found and implemented,

00:20:08.360 --> 00:20:13.600
or as things evolve, Brillo
will be tracking that.

00:20:13.600 --> 00:20:17.320
So I'd to summarize
what we covered.

00:20:17.320 --> 00:20:20.450
Really, IoT security needs
to cover the whole system.

00:20:20.450 --> 00:20:22.130
We saw a couple
of examples where

00:20:22.130 --> 00:20:24.340
a mistake in one area like
trusting a local network

00:20:24.340 --> 00:20:26.770
can allow remote access to
the devices in the home.

00:20:29.492 --> 00:20:31.200
It's happening over
and over-- developers

00:20:31.200 --> 00:20:32.800
are rolling their own
and rediscovering all

00:20:32.800 --> 00:20:34.230
of these problems the hard way.

00:20:34.230 --> 00:20:36.390
If you read some of the
security researchers

00:20:36.390 --> 00:20:38.931
that have been in the community
for 20 years, they're saying,

00:20:38.931 --> 00:20:41.700
hey, these are all problems
we discovered long ago

00:20:41.700 --> 00:20:43.630
with web servers and
with other devices

00:20:43.630 --> 00:20:47.820
and it's really a shame that
people are rediscovering them.

00:20:47.820 --> 00:20:49.290
What we should be
doing is trying

00:20:49.290 --> 00:20:54.580
to move some of that knowledge
into this new program.

00:20:54.580 --> 00:20:57.610
And finally, Weave and Brillo
provide the building blocks

00:20:57.610 --> 00:21:00.440
to build more securely
with less effort.

00:21:00.440 --> 00:21:03.730
The one thing I'll end on here,
especially on that last note,

00:21:03.730 --> 00:21:06.640
is that security
is both holistic

00:21:06.640 --> 00:21:09.330
and quite specific
to the product

00:21:09.330 --> 00:21:10.620
that you're trying to build.

00:21:10.620 --> 00:21:14.390
So we want to provide best
practices and some checklists

00:21:14.390 --> 00:21:16.100
and some tools and
software to make sure

00:21:16.100 --> 00:21:19.260
that you can build a secure
system and a secure device.

00:21:19.260 --> 00:21:24.300
But we can't do it all
for you, essentially.

00:21:24.300 --> 00:21:26.570
The specific attacks
that your device might

00:21:26.570 --> 00:21:28.890
want to mitigate against,
the environments it's

00:21:28.890 --> 00:21:30.890
going to be in, the special
features that you're

00:21:30.890 --> 00:21:34.320
adding or being
asked to add, all

00:21:34.320 --> 00:21:35.690
need to be looked at carefully.

00:21:35.690 --> 00:21:37.460
One of the ways
in which security

00:21:37.460 --> 00:21:42.460
is most commonly broken is
when you designed a system

00:21:42.460 --> 00:21:44.079
to fit into a
particular environment

00:21:44.079 --> 00:21:45.620
and to do a particular
thing and then

00:21:45.620 --> 00:21:48.280
you're asked to apply it in a
slightly different environment

00:21:48.280 --> 00:21:50.320
or asked to add a slightly
different feature.

00:21:50.320 --> 00:21:53.062
And you either bolt it on
at the end or the marketing

00:21:53.062 --> 00:21:54.520
departments sells
it into that area

00:21:54.520 --> 00:21:58.100
and then suddenly, like with
smart TVs that they assumed

00:21:58.100 --> 00:21:59.830
were secure for a
home, may not be

00:21:59.830 --> 00:22:01.530
secure in a retail environment.

00:22:01.530 --> 00:22:04.550
So we're really trying to
think about all those places

00:22:04.550 --> 00:22:08.020
your device might go and
at least have a plan.

00:22:08.020 --> 00:22:10.570
So with that I'll take a
few minutes of questions.

00:22:14.230 --> 00:22:17.110
There are mics on the left and
the right, on the first level

00:22:17.110 --> 00:22:19.422
here and then I think there's
one up in the balcony.

00:22:19.422 --> 00:22:20.880
As other speakers
have pointed out,

00:22:20.880 --> 00:22:22.310
I can't see up there very well.

00:22:22.310 --> 00:22:26.140
So feel free to holler
if you're up there.

00:22:30.310 --> 00:22:32.780
Oh, reading list.

00:22:32.780 --> 00:22:36.130
I assume you guys can all
see this offline somewhere

00:22:36.130 --> 00:22:41.970
but there's a lot
of good stuff here.

00:22:41.970 --> 00:22:44.520
And that's it.

00:22:44.520 --> 00:22:47.161
Oh, you want me to go back one?

00:22:47.161 --> 00:22:47.660
Yeah.

00:22:56.862 --> 00:22:59.320
Do you have a question over
there or just someone standing?

00:22:59.320 --> 00:22:59.650
I see.

00:22:59.650 --> 00:23:00.149
OK.

00:23:04.710 --> 00:23:05.700
OK.

00:23:05.700 --> 00:23:07.420
I'm not seeing any questions.

00:23:07.420 --> 00:23:09.170
Going once, going twice.

00:23:09.170 --> 00:23:09.760
OK.

00:23:09.760 --> 00:23:11.210
Thanks everyone for coming.

00:23:11.210 --> 00:23:11.709
[INAUDIBLE]

00:23:14.190 --> 00:23:18.140
[MUSIC PLAYING]

