WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
Unfortunately, we're not quite ready to be all smiley.

00:00:04.000 --> 00:00:07.000
Sebastian tells me it's going to be a few years before I can get

00:00:07.000 --> 00:00:11.000
my own self-driving car, but the bigger problem is we haven't yet talked about

00:00:11.000 --> 00:00:13.000
how to actually use the procedure.

00:00:13.000 --> 00:00:17.000
All we've done is make them; until we can actually use them

00:00:17.000 --> 00:00:19.000
we don't have a good reason to be really happy yet.

00:00:19.000 --> 00:00:22.000
We're going to learn how to use them next, then we'll be back to being smiley.

00:00:22.000 --> 00:00:25.000
Now we are going to learn how to use a procedure.

00:00:25.000 --> 00:00:32.000
The way to use a procedure we need the name of the procedure, followed by

00:00:32.000 --> 00:00:36.000
a left paren, followed by a list of inputs.

00:00:36.000 --> 00:00:40.000
There could be any number of inputs, but it has to match the number of inputs

00:00:40.000 --> 00:00:42.000
the procedure expects.

00:00:42.000 --> 00:00:44.000
These inputs are sometimes called "operands."

00:00:44.000 --> 00:00:46.000
They are sometimes called "arguments."

00:00:46.000 --> 00:00:48.000
We're not going to argue about that.

00:00:48.000 --> 00:00:50.000
We're just going to call them inputs.

00:00:50.000 --> 00:00:52.000
You have actually already done something quite similar to this.

00:00:52.000 --> 00:00:57.000
Back in Unit 1, you learned about using "find" on "strings."

00:00:57.000 --> 00:00:59.000
With "find" you would pass in one or two inputs.

00:00:59.000 --> 00:01:01.000
The first input was a "string."

00:01:01.000 --> 00:01:04.000
That was the string you are looking for that's the first input

00:01:04.000 --> 00:01:07.000
and the second input could be a number the position where you start

00:01:07.000 --> 00:01:09.000
looking for that string.

00:01:09.000 --> 00:01:13.000
We use "find" in many ways in Unit 1, as well as you used it

00:01:13.000 --> 00:01:15.000
yourself in the homework for Unit 1.

00:01:15.000 --> 00:01:17.000
"Find" is a little different from the procedures that you define yourself.

00:01:17.000 --> 00:01:19.000
First of all, it's built in.

00:01:19.000 --> 00:01:22.000
The other thing that was different is that, instead of just having "find," we had

00:01:22.000 --> 00:01:25.000
another input that was really over here.

00:01:25.000 --> 00:01:31.000
We have the string that we were doing the "find" in let's say it was

00:01:31.000 --> 00:01:34.000
in the variable page that's really another input to find.

00:01:34.000 --> 00:01:38.000
We'll talk in a later class about why that's done differently, but it's

00:01:38.000 --> 00:01:41.000
very similar to calling a procedure where one of the inputs is over here

00:01:41.000 --> 00:01:43.000
the other two are here.

00:01:43.000 --> 00:01:46.000
It's a little different from that and we won't get into that in this course but

00:01:46.000 --> 00:01:50.000
in a later course you'll learn more about what this really means.

00:01:50.000 --> 00:01:55.000
For all the procedures that you define yourself, we won't have any

00:01:55.000 --> 00:01:56.000
object to invoke them on.

00:01:56.000 --> 00:02:00.000
We'll just have the procedure to call and the arguments or operands or inputs

00:02:00.000 --> 00:02:03.000
as you like to call them to pass in.

00:02:03.000 --> 00:02:06.000
Let's see how that works with a simple procedure.

00:02:06.000 --> 00:02:10.000
I am going to define the procedure "rest_of_string," and we'll give it the

00:02:10.000 --> 00:02:13.000
parameter "s," so that means it takes one input and we are going to use the

00:02:13.000 --> 00:02:16.000
name "s" to refer to the value of that input.

00:02:16.000 --> 00:02:21.000
We'll make it "return to string" from the first character to the end.

00:02:21.000 --> 00:02:25.000
We will use the "string" indexing operator "return s [1:]."

00:02:25.000 --> 00:02:31.000
This will evaluate to the "string," with the first letter removed, so all "strings" from

00:02:31.000 --> 00:02:33.000
position 1 until the end of the "string."

00:02:33.000 --> 00:02:35.000
That's what we return.

00:02:35.000 --> 00:02:39.000
So, the output of "rest_of_string" is that new string that starts from

00:02:39.000 --> 00:02:42.000
the second letter in the input "string."

00:02:42.000 --> 00:02:45.000
Here's an example of how to use this procedure.

00:02:45.000 --> 00:02:47.000
We could call it directly.

00:02:47.000 --> 00:02:51.000
We could say "print rest_of_string."

00:02:51.000 --> 00:02:53.000
That's our procedure.

00:02:53.000 --> 00:02:56.000
Now we are going to have our paren and we are going to pass in an input.

00:02:56.000 --> 00:02:59.000
There's one parameter to "rest_of_string," so we need one input

00:02:59.000 --> 00:03:02.000
to pass in and it should be a "string."

00:03:02.000 --> 00:03:05.000
We'll pass in the string 'audacity'.

00:03:05.000 --> 00:03:07.813
What happens when we call a procedure like this, execution will jump

00:03:07.813 --> 00:03:10.000
into the body of the procedure.

00:03:10.000 --> 00:03:10.566
We can think of what the interpreter is doing now.

00:03:10.566 --> 00:03:17.000
Instead of running the code here, the interpreter will move.

00:03:17.000 --> 00:03:21.000
When we call a procedure, it will jump to run the code inside the procedure.

00:03:21.000 --> 00:03:26.000
It will assign to the parameters the values passed in as the inputs.

00:03:26.000 --> 00:03:30.000
We can think of this as there being an assignment that says now the value of

00:03:30.000 --> 00:03:31.974
"s" is the value of this input that was passed in.

00:03:31.974 --> 00:03:36.000
Now we are going to evaluate the body of the procedure.

00:03:36.000 --> 00:03:39.000
In this case there's only one statement it's this return statement.

00:03:39.000 --> 00:03:43.000
We are going to find this value, so s [1:].

00:03:43.000 --> 00:03:47.000
The result of that is going to be the string 'udacity'.

00:03:47.000 --> 00:03:49.000
Then we got to the return.

00:03:49.000 --> 00:03:51.000
What return means is we're going to jump back.

00:03:51.000 --> 00:03:56.000
We're jumping back to where we called the procedure, but now we actually

00:03:56.000 --> 00:03:58.000
have a result.

00:03:58.000 --> 00:04:03.000
When we jump back, the value that this evaluates to is whatever value we

00:04:03.000 --> 00:04:04.000
returned.

00:04:04.000 --> 00:04:07.000
In this case, it's the string 'udacity.'

00:04:07.050 --> 00:04:08.556
So we don't have our self driving car,

00:04:08.556 --> 00:04:10.867
but now you can define and use procedures.

00:04:10.867 --> 00:04:12.745
This is a really powerful concept

00:04:12.902 --> 00:04:14.993
Anything that we are going to do in the rest of the course and anything

00:04:14.993 --> 00:04:18.529
almost anyone does in programming computers is all about defining

00:04:18.529 --> 00:04:20.697
procedures and using procedures.

00:04:20.697 --> 00:04:22.778
Now we should have a big smile.

00:04:22.778 --> 00:04:26.777
We can think of our procedures in terms of mapping inputs to outputs.

00:04:26.777 --> 00:04:30.396
We can think of our humans as also mapping inputs to outputs.

00:04:30.396 --> 00:04:33.065
We have inputs coming in through the eyes, through the

00:04:33.065 --> 00:04:35.689
mouth maybe we even have a nose.

00:04:35.689 --> 00:04:39.081
I won't try to draw any of the outputs of our human procedure, but since

00:04:39.081 --> 00:04:41.495
procedures are such an important concept, we are going to have several

00:04:41.495 --> 00:04:44.000
quizzes now to check that you understand them well.

