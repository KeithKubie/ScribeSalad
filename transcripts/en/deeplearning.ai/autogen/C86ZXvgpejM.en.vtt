WEBVTT
Kind: captions
Language: en

00:00:00.120 --> 00:00:02.480
when designing a lair for a conflict you

00:00:02.480 --> 00:00:02.490
when designing a lair for a conflict you
 

00:00:02.490 --> 00:00:04.820
when designing a lair for a conflict you
might have to pick do you want a 1x3

00:00:04.820 --> 00:00:04.830
might have to pick do you want a 1x3
 

00:00:04.830 --> 00:00:06.829
might have to pick do you want a 1x3
filter or a three by three or a five by

00:00:06.829 --> 00:00:06.839
filter or a three by three or a five by
 

00:00:06.839 --> 00:00:09.620
filter or a three by three or a five by
five or do you want a pulling layer what

00:00:09.620 --> 00:00:09.630
five or do you want a pulling layer what
 

00:00:09.630 --> 00:00:11.509
five or do you want a pulling layer what
the inception that Network does is it

00:00:11.509 --> 00:00:11.519
the inception that Network does is it
 

00:00:11.519 --> 00:00:13.669
the inception that Network does is it
says why should do them all and this

00:00:13.669 --> 00:00:13.679
says why should do them all and this
 

00:00:13.679 --> 00:00:15.379
says why should do them all and this
makes the network architecture more

00:00:15.379 --> 00:00:15.389
makes the network architecture more
 

00:00:15.389 --> 00:00:17.630
makes the network architecture more
complicated but it also works remarkably

00:00:17.630 --> 00:00:17.640
complicated but it also works remarkably
 

00:00:17.640 --> 00:00:20.330
complicated but it also works remarkably
well let's see how this works let's say

00:00:20.330 --> 00:00:20.340
well let's see how this works let's say
 

00:00:20.340 --> 00:00:22.189
well let's see how this works let's say
for the sake of example that you have

00:00:22.189 --> 00:00:22.199
for the sake of example that you have
 

00:00:22.199 --> 00:00:25.910
for the sake of example that you have
input is a 28 by 28 by 192 dimensional

00:00:25.910 --> 00:00:25.920
input is a 28 by 28 by 192 dimensional
 

00:00:25.920 --> 00:00:30.259
input is a 28 by 28 by 192 dimensional
volume so what the inception network or

00:00:30.259 --> 00:00:30.269
volume so what the inception network or
 

00:00:30.269 --> 00:00:33.049
volume so what the inception network or
what an inception layer says is instead

00:00:33.049 --> 00:00:33.059
what an inception layer says is instead
 

00:00:33.059 --> 00:00:35.810
what an inception layer says is instead
of choosing what filter size you want in

00:00:35.810 --> 00:00:35.820
of choosing what filter size you want in
 

00:00:35.820 --> 00:00:36.880
of choosing what filter size you want in
a conflate

00:00:36.880 --> 00:00:36.890
a conflate
 

00:00:36.890 --> 00:00:39.380
a conflate
do you want a convolutional layer or

00:00:39.380 --> 00:00:39.390
do you want a convolutional layer or
 

00:00:39.390 --> 00:00:42.530
do you want a convolutional layer or
pooling layer let's do them all so one

00:00:42.530 --> 00:00:42.540
pooling layer let's do them all so one
 

00:00:42.540 --> 00:00:46.430
pooling layer let's do them all so one
of you can use a one by one convolution

00:00:46.430 --> 00:00:46.440
of you can use a one by one convolution
 

00:00:46.440 --> 00:00:50.209
of you can use a one by one convolution
and that will output a 28 by 28 by

00:00:50.209 --> 00:00:50.219
and that will output a 28 by 28 by
 

00:00:50.219 --> 00:00:55.580
and that will output a 28 by 28 by
something let's say 28 by 28 by 64

00:00:55.580 --> 00:00:55.590
something let's say 28 by 28 by 64
 

00:00:55.590 --> 00:00:57.970
something let's say 28 by 28 by 64
output and you just have a volume there

00:00:57.970 --> 00:00:57.980
output and you just have a volume there
 

00:00:57.980 --> 00:01:01.040
output and you just have a volume there
but maybe you also want to try a 3 by 3

00:01:01.040 --> 00:01:01.050
but maybe you also want to try a 3 by 3
 

00:01:01.050 --> 00:01:05.179
but maybe you also want to try a 3 by 3
and that might output a tawny by 28 by

00:01:05.179 --> 00:01:05.189
and that might output a tawny by 28 by
 

00:01:05.189 --> 00:01:10.190
and that might output a tawny by 28 by
128 and then what you do is just stack

00:01:10.190 --> 00:01:10.200
128 and then what you do is just stack
 

00:01:10.200 --> 00:01:13.190
128 and then what you do is just stack
up this second volume next to the first

00:01:13.190 --> 00:01:13.200
up this second volume next to the first
 

00:01:13.200 --> 00:01:15.920
up this second volume next to the first
volume and to make the dimensions match

00:01:15.920 --> 00:01:15.930
volume and to make the dimensions match
 

00:01:15.930 --> 00:01:19.760
volume and to make the dimensions match
up let's make this a same convolution so

00:01:19.760 --> 00:01:19.770
up let's make this a same convolution so
 

00:01:19.770 --> 00:01:22.910
up let's make this a same convolution so
the output dimension is still 28 by 28

00:01:22.910 --> 00:01:22.920
the output dimension is still 28 by 28
 

00:01:22.920 --> 00:01:26.330
the output dimension is still 28 by 28
same as the input dimension in terms of

00:01:26.330 --> 00:01:26.340
same as the input dimension in terms of
 

00:01:26.340 --> 00:01:29.120
same as the input dimension in terms of
height and width but 28 by 28 by in this

00:01:29.120 --> 00:01:29.130
height and width but 28 by 28 by in this
 

00:01:29.130 --> 00:01:33.170
height and width but 28 by 28 by in this
example 128 and maybe you might say well

00:01:33.170 --> 00:01:33.180
example 128 and maybe you might say well
 

00:01:33.180 --> 00:01:35.390
example 128 and maybe you might say well
I want to hatch my bed's maybe a 5 by 5

00:01:35.390 --> 00:01:35.400
I want to hatch my bed's maybe a 5 by 5
 

00:01:35.400 --> 00:01:37.819
I want to hatch my bed's maybe a 5 by 5
filter works better so let's do that too

00:01:37.819 --> 00:01:37.829
filter works better so let's do that too
 

00:01:37.829 --> 00:01:44.289
filter works better so let's do that too
and have that to output a 28 by 28 by 32

00:01:44.289 --> 00:01:44.299
and have that to output a 28 by 28 by 32
 

00:01:44.299 --> 00:01:47.210
and have that to output a 28 by 28 by 32
and again you use the same convolution

00:01:47.210 --> 00:01:47.220
and again you use the same convolution
 

00:01:47.220 --> 00:01:49.370
and again you use the same convolution
to keep the dimensions the same and

00:01:49.370 --> 00:01:49.380
to keep the dimensions the same and
 

00:01:49.380 --> 00:01:52.219
to keep the dimensions the same and
maybe you don't want to convolutional

00:01:52.219 --> 00:01:52.229
maybe you don't want to convolutional
 

00:01:52.229 --> 00:01:55.340
maybe you don't want to convolutional
there let's apply pooling and that has

00:01:55.340 --> 00:01:55.350
there let's apply pooling and that has
 

00:01:55.350 --> 00:01:57.469
there let's apply pooling and that has
some other output and let's stack that

00:01:57.469 --> 00:01:57.479
some other output and let's stack that
 

00:01:57.479 --> 00:02:01.429
some other output and let's stack that
up as well and here pulling outputs to

00:02:01.429 --> 00:02:01.439
up as well and here pulling outputs to
 

00:02:01.439 --> 00:02:07.639
up as well and here pulling outputs to
neat by 28 by 32 now in order to make

00:02:07.639 --> 00:02:07.649
neat by 28 by 32 now in order to make
 

00:02:07.649 --> 00:02:09.830
neat by 28 by 32 now in order to make
all the dimensions match you actually

00:02:09.830 --> 00:02:09.840
all the dimensions match you actually
 

00:02:09.840 --> 00:02:11.820
all the dimensions match you actually
need to use padding from

00:02:11.820 --> 00:02:11.830
need to use padding from
 

00:02:11.830 --> 00:02:14.190
need to use padding from
fooling so this is an unusual form of

00:02:14.190 --> 00:02:14.200
fooling so this is an unusual form of
 

00:02:14.200 --> 00:02:16.770
fooling so this is an unusual form of
polling because if you want the input to

00:02:16.770 --> 00:02:16.780
polling because if you want the input to
 

00:02:16.780 --> 00:02:18.000
polling because if you want the input to
have higher than worth twenty by twenty

00:02:18.000 --> 00:02:18.010
have higher than worth twenty by twenty
 

00:02:18.010 --> 00:02:20.910
have higher than worth twenty by twenty
eight and have the output you know match

00:02:20.910 --> 00:02:20.920
eight and have the output you know match
 

00:02:20.920 --> 00:02:23.550
eight and have the output you know match
the dimension everything else also by 28

00:02:23.550 --> 00:02:23.560
the dimension everything else also by 28
 

00:02:23.560 --> 00:02:26.970
the dimension everything else also by 28
by 28 then you need to use same padding

00:02:26.970 --> 00:02:26.980
by 28 then you need to use same padding
 

00:02:26.980 --> 00:02:31.920
by 28 then you need to use same padding
as well as the strata one for pooling so

00:02:31.920 --> 00:02:31.930
as well as the strata one for pooling so
 

00:02:31.930 --> 00:02:33.630
as well as the strata one for pooling so
this detail might seem a bit funny to

00:02:33.630 --> 00:02:33.640
this detail might seem a bit funny to
 

00:02:33.640 --> 00:02:37.230
this detail might seem a bit funny to
you now but let's let's keep going and

00:02:37.230 --> 00:02:37.240
you now but let's let's keep going and
 

00:02:37.240 --> 00:02:40.620
you now but let's let's keep going and
we'll make this all work later but with

00:02:40.620 --> 00:02:40.630
we'll make this all work later but with
 

00:02:40.630 --> 00:02:43.440
we'll make this all work later but with
a inception module like this you can

00:02:43.440 --> 00:02:43.450
a inception module like this you can
 

00:02:43.450 --> 00:02:46.320
a inception module like this you can
input some volume and output in this

00:02:46.320 --> 00:02:46.330
input some volume and output in this
 

00:02:46.330 --> 00:02:47.880
input some volume and output in this
case I guess if you add up all these

00:02:47.880 --> 00:02:47.890
case I guess if you add up all these
 

00:02:47.890 --> 00:02:51.050
case I guess if you add up all these
numbers 32 plus 32 plus 128 plus 64

00:02:51.050 --> 00:02:51.060
numbers 32 plus 32 plus 128 plus 64
 

00:02:51.060 --> 00:02:56.730
numbers 32 plus 32 plus 128 plus 64
that's equal to 2 5 6 so you will have 1

00:02:56.730 --> 00:02:56.740
that's equal to 2 5 6 so you will have 1
 

00:02:56.740 --> 00:03:01.260
that's equal to 2 5 6 so you will have 1
Inception module input 28 by 28 by 129

00:03:01.260 --> 00:03:01.270
Inception module input 28 by 28 by 129
 

00:03:01.270 --> 00:03:07.530
Inception module input 28 by 28 by 129
and output 28 by 28 by 256 and this is

00:03:07.530 --> 00:03:07.540
and output 28 by 28 by 256 and this is
 

00:03:07.540 --> 00:03:10.920
and output 28 by 28 by 256 and this is
the heart of the inception Network which

00:03:10.920 --> 00:03:10.930
the heart of the inception Network which
 

00:03:10.930 --> 00:03:13.380
the heart of the inception Network which
is due to Christians agony wanly

00:03:13.380 --> 00:03:13.390
is due to Christians agony wanly
 

00:03:13.390 --> 00:03:15.720
is due to Christians agony wanly
orienting TRPs I mean Scott lead

00:03:15.720 --> 00:03:15.730
orienting TRPs I mean Scott lead
 

00:03:15.730 --> 00:03:18.270
orienting TRPs I mean Scott lead
Dragomir Angela Dmitri Orhan Vincent and

00:03:18.270 --> 00:03:18.280
Dragomir Angela Dmitri Orhan Vincent and
 

00:03:18.280 --> 00:03:21.900
Dragomir Angela Dmitri Orhan Vincent and
cook and Andrew ramen average and the

00:03:21.900 --> 00:03:21.910
cook and Andrew ramen average and the
 

00:03:21.910 --> 00:03:24.090
cook and Andrew ramen average and the
basic idea is that instead of you

00:03:24.090 --> 00:03:24.100
basic idea is that instead of you
 

00:03:24.100 --> 00:03:26.759
basic idea is that instead of you
needing to pick one of these filter

00:03:26.759 --> 00:03:26.769
needing to pick one of these filter
 

00:03:26.769 --> 00:03:29.340
needing to pick one of these filter
sizes or pooling you want and committing

00:03:29.340 --> 00:03:29.350
sizes or pooling you want and committing
 

00:03:29.350 --> 00:03:31.380
sizes or pooling you want and committing
to that you can do them all and just

00:03:31.380 --> 00:03:31.390
to that you can do them all and just
 

00:03:31.390 --> 00:03:33.900
to that you can do them all and just
concatenate all the outputs and let the

00:03:33.900 --> 00:03:33.910
concatenate all the outputs and let the
 

00:03:33.910 --> 00:03:35.640
concatenate all the outputs and let the
network learn whatever parameters it

00:03:35.640 --> 00:03:35.650
network learn whatever parameters it
 

00:03:35.650 --> 00:03:37.530
network learn whatever parameters it
wants to use whatever combinations of

00:03:37.530 --> 00:03:37.540
wants to use whatever combinations of
 

00:03:37.540 --> 00:03:41.130
wants to use whatever combinations of
these filter sizes it wants now it turns

00:03:41.130 --> 00:03:41.140
these filter sizes it wants now it turns
 

00:03:41.140 --> 00:03:42.690
these filter sizes it wants now it turns
out that there's a problem with the

00:03:42.690 --> 00:03:42.700
out that there's a problem with the
 

00:03:42.700 --> 00:03:44.340
out that there's a problem with the
inception there as we've described it

00:03:44.340 --> 00:03:44.350
inception there as we've described it
 

00:03:44.350 --> 00:03:47.460
inception there as we've described it
here which is computational cost on the

00:03:47.460 --> 00:03:47.470
here which is computational cost on the
 

00:03:47.470 --> 00:03:49.170
here which is computational cost on the
next slide let's figure out what's the

00:03:49.170 --> 00:03:49.180
next slide let's figure out what's the
 

00:03:49.180 --> 00:03:53.390
next slide let's figure out what's the
computational cost of this 5x5 filter

00:03:53.390 --> 00:03:53.400
computational cost of this 5x5 filter
 

00:03:53.400 --> 00:03:57.360
computational cost of this 5x5 filter
resulting in this block over here so

00:03:57.360 --> 00:03:57.370
resulting in this block over here so
 

00:03:57.370 --> 00:04:01.530
resulting in this block over here so
just focusing on the 5x5 pot on the

00:04:01.530 --> 00:04:01.540
just focusing on the 5x5 pot on the
 

00:04:01.540 --> 00:04:05.310
just focusing on the 5x5 pot on the
previous slide we had as input a 28 8 by

00:04:05.310 --> 00:04:05.320
previous slide we had as input a 28 8 by
 

00:04:05.320 --> 00:04:08.490
previous slide we had as input a 28 8 by
20 by 192 block and you implement a 5 by

00:04:08.490 --> 00:04:08.500
20 by 192 block and you implement a 5 by
 

00:04:08.500 --> 00:04:11.640
20 by 192 block and you implement a 5 by
5 same convolution or 32 filters to

00:04:11.640 --> 00:04:11.650
5 same convolution or 32 filters to
 

00:04:11.650 --> 00:04:16.020
5 same convolution or 32 filters to
output 28 by 28 by 32 on their previous

00:04:16.020 --> 00:04:16.030
output 28 by 28 by 32 on their previous
 

00:04:16.030 --> 00:04:18.509
output 28 by 28 by 32 on their previous
slide I had drawn this as a thin purple

00:04:18.509 --> 00:04:18.519
slide I had drawn this as a thin purple
 

00:04:18.519 --> 00:04:20.279
slide I had drawn this as a thin purple
slice so I'm just I draw this as a more

00:04:20.279 --> 00:04:20.289
slice so I'm just I draw this as a more
 

00:04:20.289 --> 00:04:24.300
slice so I'm just I draw this as a more
normal looking blue block here so let's

00:04:24.300 --> 00:04:24.310
normal looking blue block here so let's
 

00:04:24.310 --> 00:04:25.080
normal looking blue block here so let's
look at

00:04:25.080 --> 00:04:25.090
look at
 

00:04:25.090 --> 00:04:28.830
look at
computational cost of outputting this 20

00:04:28.830 --> 00:04:28.840
computational cost of outputting this 20
 

00:04:28.840 --> 00:04:34.280
computational cost of outputting this 20
by 20 by 32 so you have 32 filters

00:04:34.280 --> 00:04:34.290
by 20 by 32 so you have 32 filters
 

00:04:34.290 --> 00:04:37.980
by 20 by 32 so you have 32 filters
because the output has 32 channels and

00:04:37.980 --> 00:04:37.990
because the output has 32 channels and
 

00:04:37.990 --> 00:04:44.189
because the output has 32 channels and
each filter is going to be 5 by 5 by 192

00:04:44.189 --> 00:04:44.199
each filter is going to be 5 by 5 by 192
 

00:04:44.199 --> 00:04:48.030
each filter is going to be 5 by 5 by 192
and so the output size is 20 by 20 by 32

00:04:48.030 --> 00:04:48.040
and so the output size is 20 by 20 by 32
 

00:04:48.040 --> 00:04:52.110
and so the output size is 20 by 20 by 32
and so you need to compute Tony by 28 by

00:04:52.110 --> 00:04:52.120
and so you need to compute Tony by 28 by
 

00:04:52.120 --> 00:04:55.230
and so you need to compute Tony by 28 by
32 numbers and for each of them you need

00:04:55.230 --> 00:04:55.240
32 numbers and for each of them you need
 

00:04:55.240 --> 00:04:57.300
32 numbers and for each of them you need
to do you know this many multiplications

00:04:57.300 --> 00:04:57.310
to do you know this many multiplications
 

00:04:57.310 --> 00:05:02.280
to do you know this many multiplications
right 5 by 5 by 192 so the total number

00:05:02.280 --> 00:05:02.290
right 5 by 5 by 192 so the total number
 

00:05:02.290 --> 00:05:05.040
right 5 by 5 by 192 so the total number
multiplies you need is the number of

00:05:05.040 --> 00:05:05.050
multiplies you need is the number of
 

00:05:05.050 --> 00:05:07.050
multiplies you need is the number of
multiplies you need to compute each of

00:05:07.050 --> 00:05:07.060
multiplies you need to compute each of
 

00:05:07.060 --> 00:05:09.900
multiplies you need to compute each of
the output values times the number of

00:05:09.900 --> 00:05:09.910
the output values times the number of
 

00:05:09.910 --> 00:05:13.500
the output values times the number of
output values you need to compute and if

00:05:13.500 --> 00:05:13.510
output values you need to compute and if
 

00:05:13.510 --> 00:05:15.390
output values you need to compute and if
you multiply out all these numbers this

00:05:15.390 --> 00:05:15.400
you multiply out all these numbers this
 

00:05:15.400 --> 00:05:21.270
you multiply out all these numbers this
is equal to 120 million and so while you

00:05:21.270 --> 00:05:21.280
is equal to 120 million and so while you
 

00:05:21.280 --> 00:05:23.670
is equal to 120 million and so while you
can do 120 million multiplies on the

00:05:23.670 --> 00:05:23.680
can do 120 million multiplies on the
 

00:05:23.680 --> 00:05:25.920
can do 120 million multiplies on the
modern computer this is still a pretty

00:05:25.920 --> 00:05:25.930
modern computer this is still a pretty
 

00:05:25.930 --> 00:05:28.560
modern computer this is still a pretty
expensive operation on the next line you

00:05:28.560 --> 00:05:28.570
expensive operation on the next line you
 

00:05:28.570 --> 00:05:31.440
expensive operation on the next line you
see how using the idea of one-by-one

00:05:31.440 --> 00:05:31.450
see how using the idea of one-by-one
 

00:05:31.450 --> 00:05:33.150
see how using the idea of one-by-one
convolutions which you learned about in

00:05:33.150 --> 00:05:33.160
convolutions which you learned about in
 

00:05:33.160 --> 00:05:34.920
convolutions which you learned about in
the previous video you'd be able to

00:05:34.920 --> 00:05:34.930
the previous video you'd be able to
 

00:05:34.930 --> 00:05:37.710
the previous video you'd be able to
reduce the computational cost by about a

00:05:37.710 --> 00:05:37.720
reduce the computational cost by about a
 

00:05:37.720 --> 00:05:40.740
reduce the computational cost by about a
factor of 10 to go from about 120

00:05:40.740 --> 00:05:40.750
factor of 10 to go from about 120
 

00:05:40.750 --> 00:05:43.560
factor of 10 to go from about 120
million multiplies to about one tenth of

00:05:43.560 --> 00:05:43.570
million multiplies to about one tenth of
 

00:05:43.570 --> 00:05:47.490
million multiplies to about one tenth of
that so please remember the number 120

00:05:47.490 --> 00:05:47.500
that so please remember the number 120
 

00:05:47.500 --> 00:05:49.650
that so please remember the number 120
so you can compare it with what you see

00:05:49.650 --> 00:05:49.660
so you can compare it with what you see
 

00:05:49.660 --> 00:05:51.860
so you can compare it with what you see
on the next slide hundred twenty million

00:05:51.860 --> 00:05:51.870
on the next slide hundred twenty million
 

00:05:51.870 --> 00:05:55.589
on the next slide hundred twenty million
here's an alternative architecture for

00:05:55.589 --> 00:05:55.599
here's an alternative architecture for
 

00:05:55.599 --> 00:05:58.560
here's an alternative architecture for
inputting to an 8 by 20 by 192 and

00:05:58.560 --> 00:05:58.570
inputting to an 8 by 20 by 192 and
 

00:05:58.570 --> 00:06:02.460
inputting to an 8 by 20 by 192 and
outputting to an 8 by 20 by 32 which is

00:06:02.460 --> 00:06:02.470
outputting to an 8 by 20 by 32 which is
 

00:06:02.470 --> 00:06:04.830
outputting to an 8 by 20 by 32 which is
following your going to input the volume

00:06:04.830 --> 00:06:04.840
following your going to input the volume
 

00:06:04.840 --> 00:06:09.120
following your going to input the volume
use a 1 by 1 convolution to reduce the

00:06:09.120 --> 00:06:09.130
use a 1 by 1 convolution to reduce the
 

00:06:09.130 --> 00:06:13.710
use a 1 by 1 convolution to reduce the
volume to a 16 channels instead of 192

00:06:13.710 --> 00:06:13.720
volume to a 16 channels instead of 192
 

00:06:13.720 --> 00:06:16.379
volume to a 16 channels instead of 192
channels and then on this much smaller

00:06:16.379 --> 00:06:16.389
channels and then on this much smaller
 

00:06:16.389 --> 00:06:19.950
channels and then on this much smaller
volume run your 5 by 5 convolution to

00:06:19.950 --> 00:06:19.960
volume run your 5 by 5 convolution to
 

00:06:19.960 --> 00:06:22.680
volume run your 5 by 5 convolution to
give you your final output so notice the

00:06:22.680 --> 00:06:22.690
give you your final output so notice the
 

00:06:22.690 --> 00:06:24.270
give you your final output so notice the
input and output dimensions are still

00:06:24.270 --> 00:06:24.280
input and output dimensions are still
 

00:06:24.280 --> 00:06:27.150
input and output dimensions are still
the same you input Tony by 20 but 182

00:06:27.150 --> 00:06:27.160
the same you input Tony by 20 but 182
 

00:06:27.160 --> 00:06:32.250
the same you input Tony by 20 but 182
and output Tony by 20 by 32 same as the

00:06:32.250 --> 00:06:32.260
and output Tony by 20 by 32 same as the
 

00:06:32.260 --> 00:06:34.620
and output Tony by 20 by 32 same as the
previous slide but what we've done is

00:06:34.620 --> 00:06:34.630
previous slide but what we've done is
 

00:06:34.630 --> 00:06:36.750
previous slide but what we've done is
we're taking this huge volley we had on

00:06:36.750 --> 00:06:36.760
we're taking this huge volley we had on
 

00:06:36.760 --> 00:06:38.970
we're taking this huge volley we had on
the left and we'll shrunk it to

00:06:38.970 --> 00:06:38.980
the left and we'll shrunk it to
 

00:06:38.980 --> 00:06:42.030
the left and we'll shrunk it to
this much smaller intermediate volume

00:06:42.030 --> 00:06:42.040
this much smaller intermediate volume
 

00:06:42.040 --> 00:06:45.090
this much smaller intermediate volume
which is only has 16 instead of hundred

00:06:45.090 --> 00:06:45.100
which is only has 16 instead of hundred
 

00:06:45.100 --> 00:06:46.530
which is only has 16 instead of hundred
ninety-two channels

00:06:46.530 --> 00:06:46.540
ninety-two channels
 

00:06:46.540 --> 00:06:49.760
ninety-two channels
sometimes this is called a bottleneck

00:06:49.760 --> 00:06:49.770
sometimes this is called a bottleneck
 

00:06:49.770 --> 00:06:57.180
sometimes this is called a bottleneck
there all right I guess because a

00:06:57.180 --> 00:06:57.190
there all right I guess because a
 

00:06:57.190 --> 00:06:59.250
there all right I guess because a
bottleneck is usually the smallest part

00:06:59.250 --> 00:06:59.260
bottleneck is usually the smallest part
 

00:06:59.260 --> 00:07:01.140
bottleneck is usually the smallest part
of something right so I guess if you

00:07:01.140 --> 00:07:01.150
of something right so I guess if you
 

00:07:01.150 --> 00:07:04.730
of something right so I guess if you
have a glass bottle that looks like this

00:07:04.730 --> 00:07:04.740
have a glass bottle that looks like this
 

00:07:04.740 --> 00:07:07.470
have a glass bottle that looks like this
then you know this is Vegas where the

00:07:07.470 --> 00:07:07.480
then you know this is Vegas where the
 

00:07:07.480 --> 00:07:11.310
then you know this is Vegas where the
core goes then the bottleneck is the

00:07:11.310 --> 00:07:11.320
core goes then the bottleneck is the
 

00:07:11.320 --> 00:07:14.640
core goes then the bottleneck is the
smallest part of this bottle so the same

00:07:14.640 --> 00:07:14.650
smallest part of this bottle so the same
 

00:07:14.650 --> 00:07:16.680
smallest part of this bottle so the same
way the bottleneck layer is the smallest

00:07:16.680 --> 00:07:16.690
way the bottleneck layer is the smallest
 

00:07:16.690 --> 00:07:18.690
way the bottleneck layer is the smallest
part of this network we shrink the

00:07:18.690 --> 00:07:18.700
part of this network we shrink the
 

00:07:18.700 --> 00:07:21.390
part of this network we shrink the
representation before increasing the

00:07:21.390 --> 00:07:21.400
representation before increasing the
 

00:07:21.400 --> 00:07:24.660
representation before increasing the
size again now let's look at the

00:07:24.660 --> 00:07:24.670
size again now let's look at the
 

00:07:24.670 --> 00:07:27.840
size again now let's look at the
computational cost involved to apply

00:07:27.840 --> 00:07:27.850
computational cost involved to apply
 

00:07:27.850 --> 00:07:31.500
computational cost involved to apply
this one-by-one convolution we have 16

00:07:31.500 --> 00:07:31.510
this one-by-one convolution we have 16
 

00:07:31.510 --> 00:07:34.110
this one-by-one convolution we have 16
filters each of the filters is going to

00:07:34.110 --> 00:07:34.120
filters each of the filters is going to
 

00:07:34.120 --> 00:07:38.130
filters each of the filters is going to
be of dimension 1 by 1 by 192 this 192

00:07:38.130 --> 00:07:38.140
be of dimension 1 by 1 by 192 this 192
 

00:07:38.140 --> 00:07:41.520
be of dimension 1 by 1 by 192 this 192
matches that 192 and so the cost of

00:07:41.520 --> 00:07:41.530
matches that 192 and so the cost of
 

00:07:41.530 --> 00:07:44.430
matches that 192 and so the cost of
computing this 20 by 20 by 16 volume is

00:07:44.430 --> 00:07:44.440
computing this 20 by 20 by 16 volume is
 

00:07:44.440 --> 00:07:46.650
computing this 20 by 20 by 16 volume is
going to be well you need this many

00:07:46.650 --> 00:07:46.660
going to be well you need this many
 

00:07:46.660 --> 00:07:50.820
going to be well you need this many
outputs and for each of them you need to

00:07:50.820 --> 00:07:50.830
outputs and for each of them you need to
 

00:07:50.830 --> 00:07:52.460
outputs and for each of them you need to
do

00:07:52.460 --> 00:07:52.470
do
 

00:07:52.470 --> 00:07:55.520
do
192 multiplications I could have written

00:07:55.520 --> 00:07:55.530
192 multiplications I could have written
 

00:07:55.530 --> 00:07:59.100
192 multiplications I could have written
1 times 1/5 times 192 right this is this

00:07:59.100 --> 00:07:59.110
1 times 1/5 times 192 right this is this
 

00:07:59.110 --> 00:08:02.070
1 times 1/5 times 192 right this is this
and if you multiply this out this is 2.4

00:08:02.070 --> 00:08:02.080
and if you multiply this out this is 2.4
 

00:08:02.080 --> 00:08:04.950
and if you multiply this out this is 2.4
under the n is about 2.4 million how

00:08:04.950 --> 00:08:04.960
under the n is about 2.4 million how
 

00:08:04.960 --> 00:08:06.950
under the n is about 2.4 million how
about the second so that's the cost of

00:08:06.950 --> 00:08:06.960
about the second so that's the cost of
 

00:08:06.960 --> 00:08:12.390
about the second so that's the cost of
this first convolutional layer the cost

00:08:12.390 --> 00:08:12.400
this first convolutional layer the cost
 

00:08:12.400 --> 00:08:14.760
this first convolutional layer the cost
of this second convolutional layer will

00:08:14.760 --> 00:08:14.770
of this second convolutional layer will
 

00:08:14.770 --> 00:08:16.760
of this second convolutional layer will
be that well you have this many outputs

00:08:16.760 --> 00:08:16.770
be that well you have this many outputs
 

00:08:16.770 --> 00:08:22.170
be that well you have this many outputs
so 20 by 28 by 32 and then for each of

00:08:22.170 --> 00:08:22.180
so 20 by 28 by 32 and then for each of
 

00:08:22.180 --> 00:08:25.350
so 20 by 28 by 32 and then for each of
the outputs you have to apply a 5 by 5

00:08:25.350 --> 00:08:25.360
the outputs you have to apply a 5 by 5
 

00:08:25.360 --> 00:08:29.730
the outputs you have to apply a 5 by 5
by 16 dimensional filter and so 5 by 5

00:08:29.730 --> 00:08:29.740
by 16 dimensional filter and so 5 by 5
 

00:08:29.740 --> 00:08:33.990
by 16 dimensional filter and so 5 by 5
by 16 and you multiply that out is equal

00:08:33.990 --> 00:08:34.000
by 16 and you multiply that out is equal
 

00:08:34.000 --> 00:08:38.040
by 16 and you multiply that out is equal
to 10.0 and so the total number of

00:08:38.040 --> 00:08:38.050
to 10.0 and so the total number of
 

00:08:38.050 --> 00:08:40.290
to 10.0 and so the total number of
multiplications you need to do is the

00:08:40.290 --> 00:08:40.300
multiplications you need to do is the
 

00:08:40.300 --> 00:08:42.839
multiplications you need to do is the
sum of those which is twelve point four

00:08:42.839 --> 00:08:42.849
sum of those which is twelve point four
 

00:08:42.849 --> 00:08:45.840
sum of those which is twelve point four
million multiplications and you compare

00:08:45.840 --> 00:08:45.850
million multiplications and you compare
 

00:08:45.850 --> 00:08:46.980
million multiplications and you compare
this with what we had on the previous

00:08:46.980 --> 00:08:46.990
this with what we had on the previous
 

00:08:46.990 --> 00:08:49.620
this with what we had on the previous
slide you reduce the computational cost

00:08:49.620 --> 00:08:49.630
slide you reduce the computational cost
 

00:08:49.630 --> 00:08:52.140
slide you reduce the computational cost
from about 120 million

00:08:52.140 --> 00:08:52.150
from about 120 million
 

00:08:52.150 --> 00:08:55.830
from about 120 million
flies down to about one tenth of that to

00:08:55.830 --> 00:08:55.840
flies down to about one tenth of that to
 

00:08:55.840 --> 00:08:57.440
flies down to about one tenth of that to
twelve point four million

00:08:57.440 --> 00:08:57.450
twelve point four million
 

00:08:57.450 --> 00:09:00.810
twelve point four million
multiplications oh and the number of

00:09:00.810 --> 00:09:00.820
multiplications oh and the number of
 

00:09:00.820 --> 00:09:03.780
multiplications oh and the number of
additions you need to do is about very

00:09:03.780 --> 00:09:03.790
additions you need to do is about very
 

00:09:03.790 --> 00:09:05.640
additions you need to do is about very
similar to the number of multiplications

00:09:05.640 --> 00:09:05.650
similar to the number of multiplications
 

00:09:05.650 --> 00:09:07.140
similar to the number of multiplications
you need to do so that's why I'm just

00:09:07.140 --> 00:09:07.150
you need to do so that's why I'm just
 

00:09:07.150 --> 00:09:10.100
you need to do so that's why I'm just
counting the number of multiplications

00:09:10.100 --> 00:09:10.110
counting the number of multiplications
 

00:09:10.110 --> 00:09:13.170
counting the number of multiplications
so to summarize if you're building a

00:09:13.170 --> 00:09:13.180
so to summarize if you're building a
 

00:09:13.180 --> 00:09:15.060
so to summarize if you're building a
layer of a new network and you don't

00:09:15.060 --> 00:09:15.070
layer of a new network and you don't
 

00:09:15.070 --> 00:09:17.370
layer of a new network and you don't
want to have to decide do you want a one

00:09:17.370 --> 00:09:17.380
want to have to decide do you want a one
 

00:09:17.380 --> 00:09:19.110
want to have to decide do you want a one
by one or three by three or five by five

00:09:19.110 --> 00:09:19.120
by one or three by three or five by five
 

00:09:19.120 --> 00:09:21.510
by one or three by three or five by five
were pooling layer the inception module

00:09:21.510 --> 00:09:21.520
were pooling layer the inception module
 

00:09:21.520 --> 00:09:24.000
were pooling layer the inception module
lets you say let's do them all and let's

00:09:24.000 --> 00:09:24.010
lets you say let's do them all and let's
 

00:09:24.010 --> 00:09:26.610
lets you say let's do them all and let's
concatenate the results and then we ran

00:09:26.610 --> 00:09:26.620
concatenate the results and then we ran
 

00:09:26.620 --> 00:09:28.860
concatenate the results and then we ran
to the problem of computational cost and

00:09:28.860 --> 00:09:28.870
to the problem of computational cost and
 

00:09:28.870 --> 00:09:31.230
to the problem of computational cost and
which you saw here was how using a one

00:09:31.230 --> 00:09:31.240
which you saw here was how using a one
 

00:09:31.240 --> 00:09:33.450
which you saw here was how using a one
by one convolution you can create this

00:09:33.450 --> 00:09:33.460
by one convolution you can create this
 

00:09:33.460 --> 00:09:36.030
by one convolution you can create this
bottleneck layer thereby reducing the

00:09:36.030 --> 00:09:36.040
bottleneck layer thereby reducing the
 

00:09:36.040 --> 00:09:38.970
bottleneck layer thereby reducing the
computational cost significantly now you

00:09:38.970 --> 00:09:38.980
computational cost significantly now you
 

00:09:38.980 --> 00:09:41.010
computational cost significantly now you
might be wondering does shrinking down

00:09:41.010 --> 00:09:41.020
might be wondering does shrinking down
 

00:09:41.020 --> 00:09:43.560
might be wondering does shrinking down
the representation size so dramatic does

00:09:43.560 --> 00:09:43.570
the representation size so dramatic does
 

00:09:43.570 --> 00:09:46.170
the representation size so dramatic does
it hurt the performance of your neural

00:09:46.170 --> 00:09:46.180
it hurt the performance of your neural
 

00:09:46.180 --> 00:09:48.870
it hurt the performance of your neural
network it turns out that so long as you

00:09:48.870 --> 00:09:48.880
network it turns out that so long as you
 

00:09:48.880 --> 00:09:51.240
network it turns out that so long as you
implement this bottleneck layer so the

00:09:51.240 --> 00:09:51.250
implement this bottleneck layer so the
 

00:09:51.250 --> 00:09:54.360
implement this bottleneck layer so the
proven reason you can string down the

00:09:54.360 --> 00:09:54.370
proven reason you can string down the
 

00:09:54.370 --> 00:09:56.910
proven reason you can string down the
representation size significantly and it

00:09:56.910 --> 00:09:56.920
representation size significantly and it
 

00:09:56.920 --> 00:09:59.460
representation size significantly and it
doesn't seem to hurt the performance but

00:09:59.460 --> 00:09:59.470
doesn't seem to hurt the performance but
 

00:09:59.470 --> 00:10:02.730
doesn't seem to hurt the performance but
saves you a lot of computation so this

00:10:02.730 --> 00:10:02.740
saves you a lot of computation so this
 

00:10:02.740 --> 00:10:05.550
saves you a lot of computation so this
is the key of the these are the key

00:10:05.550 --> 00:10:05.560
is the key of the these are the key
 

00:10:05.560 --> 00:10:08.580
is the key of the these are the key
ideas of the inception module let's put

00:10:08.580 --> 00:10:08.590
ideas of the inception module let's put
 

00:10:08.590 --> 00:10:10.800
ideas of the inception module let's put
them together and in the next video show

00:10:10.800 --> 00:10:10.810
them together and in the next video show
 

00:10:10.810 --> 00:10:13.410
them together and in the next video show
you what the full inception network

00:10:13.410 --> 00:10:13.420
you what the full inception network
 

00:10:13.420 --> 00:10:16.110
you what the full inception network
looks like

