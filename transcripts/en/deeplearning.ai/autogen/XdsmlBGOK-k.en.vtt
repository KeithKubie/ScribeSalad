WEBVTT
Kind: captions
Language: en

00:00:00.030 --> 00:00:02.540
in the last video you learned about the

00:00:02.540 --> 00:00:02.550
in the last video you learned about the
 

00:00:02.550 --> 00:00:04.340
in the last video you learned about the
sliding windows object detection

00:00:04.340 --> 00:00:04.350
sliding windows object detection
 

00:00:04.350 --> 00:00:06.590
sliding windows object detection
algorithm using a consonant but we

00:00:06.590 --> 00:00:06.600
algorithm using a consonant but we
 

00:00:06.600 --> 00:00:08.720
algorithm using a consonant but we
thought that it was too slow in this

00:00:08.720 --> 00:00:08.730
thought that it was too slow in this
 

00:00:08.730 --> 00:00:11.089
thought that it was too slow in this
video you learn how to implement that

00:00:11.089 --> 00:00:11.099
video you learn how to implement that
 

00:00:11.099 --> 00:00:13.820
video you learn how to implement that
algorithm convolutional e let's see what

00:00:13.820 --> 00:00:13.830
algorithm convolutional e let's see what
 

00:00:13.830 --> 00:00:16.010
algorithm convolutional e let's see what
this means to build up toward the

00:00:16.010 --> 00:00:16.020
this means to build up toward the
 

00:00:16.020 --> 00:00:18.320
this means to build up toward the
convolutional implementation of sliding

00:00:18.320 --> 00:00:18.330
convolutional implementation of sliding
 

00:00:18.330 --> 00:00:20.810
convolutional implementation of sliding
windows let's first see how you can turn

00:00:20.810 --> 00:00:20.820
windows let's first see how you can turn
 

00:00:20.820 --> 00:00:22.790
windows let's first see how you can turn
fully connected layers in your neural

00:00:22.790 --> 00:00:22.800
fully connected layers in your neural
 

00:00:22.800 --> 00:00:26.179
fully connected layers in your neural
network into convolutional layers we'll

00:00:26.179 --> 00:00:26.189
network into convolutional layers we'll
 

00:00:26.189 --> 00:00:28.099
network into convolutional layers we'll
do that first on this slide and then the

00:00:28.099 --> 00:00:28.109
do that first on this slide and then the
 

00:00:28.109 --> 00:00:29.870
do that first on this slide and then the
next slide we'll use the ideas from this

00:00:29.870 --> 00:00:29.880
next slide we'll use the ideas from this
 

00:00:29.880 --> 00:00:32.030
next slide we'll use the ideas from this
slide to show you the convolution

00:00:32.030 --> 00:00:32.040
slide to show you the convolution
 

00:00:32.040 --> 00:00:34.760
slide to show you the convolution
implementation so let's say that your

00:00:34.760 --> 00:00:34.770
implementation so let's say that your
 

00:00:34.770 --> 00:00:38.119
implementation so let's say that your
object detection algorithm inputs 14 by

00:00:38.119 --> 00:00:38.129
object detection algorithm inputs 14 by
 

00:00:38.129 --> 00:00:40.520
object detection algorithm inputs 14 by
14 by 3 images this is quite small but

00:00:40.520 --> 00:00:40.530
14 by 3 images this is quite small but
 

00:00:40.530 --> 00:00:42.709
14 by 3 images this is quite small but
just for illustrative purposes and let's

00:00:42.709 --> 00:00:42.719
just for illustrative purposes and let's
 

00:00:42.719 --> 00:00:45.200
just for illustrative purposes and let's
say it then uses five by five filters

00:00:45.200 --> 00:00:45.210
say it then uses five by five filters
 

00:00:45.210 --> 00:00:48.590
say it then uses five by five filters
and let's say uses 16 of them to map it

00:00:48.590 --> 00:00:48.600
and let's say uses 16 of them to map it
 

00:00:48.600 --> 00:00:51.740
and let's say uses 16 of them to map it
from 14 by 14 by 3 to 10 by 10 by 16 and

00:00:51.740 --> 00:00:51.750
from 14 by 14 by 3 to 10 by 10 by 16 and
 

00:00:51.750 --> 00:00:54.979
from 14 by 14 by 3 to 10 by 10 by 16 and
then does a 2 by 2 max pooling to reduce

00:00:54.979 --> 00:00:54.989
then does a 2 by 2 max pooling to reduce
 

00:00:54.989 --> 00:00:58.819
then does a 2 by 2 max pooling to reduce
it to 5 a 5 by 16 then has a fully

00:00:58.819 --> 00:00:58.829
it to 5 a 5 by 16 then has a fully
 

00:00:58.829 --> 00:01:01.520
it to 5 a 5 by 16 then has a fully
connected layer 2 connected 400 units

00:01:01.520 --> 00:01:01.530
connected layer 2 connected 400 units
 

00:01:01.530 --> 00:01:03.139
connected layer 2 connected 400 units
then another fully connected layer and

00:01:03.139 --> 00:01:03.149
then another fully connected layer and
 

00:01:03.149 --> 00:01:06.770
then another fully connected layer and
then finally outputs Y using a soft max

00:01:06.770 --> 00:01:06.780
then finally outputs Y using a soft max
 

00:01:06.780 --> 00:01:10.370
then finally outputs Y using a soft max
unit in order to make the change we'll

00:01:10.370 --> 00:01:10.380
unit in order to make the change we'll
 

00:01:10.380 --> 00:01:12.469
unit in order to make the change we'll
need to in a second I'm going to change

00:01:12.469 --> 00:01:12.479
need to in a second I'm going to change
 

00:01:12.479 --> 00:01:13.880
need to in a second I'm going to change
this picture a little bit and instead

00:01:13.880 --> 00:01:13.890
this picture a little bit and instead
 

00:01:13.890 --> 00:01:17.950
this picture a little bit and instead
I'm going to view Y as 4 numbers

00:01:17.950 --> 00:01:17.960
I'm going to view Y as 4 numbers
 

00:01:17.960 --> 00:01:20.630
I'm going to view Y as 4 numbers
corresponding to the cost probabilities

00:01:20.630 --> 00:01:20.640
corresponding to the cost probabilities
 

00:01:20.640 --> 00:01:22.969
corresponding to the cost probabilities
of the four classes that the softmax

00:01:22.969 --> 00:01:22.979
of the four classes that the softmax
 

00:01:22.979 --> 00:01:27.530
of the four classes that the softmax
units is classifying amongst and the

00:01:27.530 --> 00:01:27.540
units is classifying amongst and the
 

00:01:27.540 --> 00:01:31.760
units is classifying amongst and the
four classes could be pedestrian car

00:01:31.760 --> 00:01:31.770
four classes could be pedestrian car
 

00:01:31.770 --> 00:01:34.370
four classes could be pedestrian car
motorcycle and background or something

00:01:34.370 --> 00:01:34.380
motorcycle and background or something
 

00:01:34.380 --> 00:01:38.390
motorcycle and background or something
else now what I'd like to do is show how

00:01:38.390 --> 00:01:38.400
else now what I'd like to do is show how
 

00:01:38.400 --> 00:01:41.230
else now what I'd like to do is show how
these layers can be turned into

00:01:41.230 --> 00:01:41.240
these layers can be turned into
 

00:01:41.240 --> 00:01:44.480
these layers can be turned into
convolutional layers so the confident

00:01:44.480 --> 00:01:44.490
convolutional layers so the confident
 

00:01:44.490 --> 00:01:46.730
convolutional layers so the confident
with a draw same as before for the first

00:01:46.730 --> 00:01:46.740
with a draw same as before for the first
 

00:01:46.740 --> 00:01:48.980
with a draw same as before for the first
few layers and now one way of

00:01:48.980 --> 00:01:48.990
few layers and now one way of
 

00:01:48.990 --> 00:01:51.440
few layers and now one way of
implementing this next layer this fully

00:01:51.440 --> 00:01:51.450
implementing this next layer this fully
 

00:01:51.450 --> 00:01:53.749
implementing this next layer this fully
connected layer is to implement this as

00:01:53.749 --> 00:01:53.759
connected layer is to implement this as
 

00:01:53.759 --> 00:01:58.550
connected layer is to implement this as
a five by five filter and let's use four

00:01:58.550 --> 00:01:58.560
a five by five filter and let's use four
 

00:01:58.560 --> 00:02:03.289
a five by five filter and let's use four
hundred five by five filters so if you

00:02:03.289 --> 00:02:03.299
hundred five by five filters so if you
 

00:02:03.299 --> 00:02:06.230
hundred five by five filters so if you
take a 5 by 5 by 16 image and convolve

00:02:06.230 --> 00:02:06.240
take a 5 by 5 by 16 image and convolve
 

00:02:06.240 --> 00:02:09.469
take a 5 by 5 by 16 image and convolve
it with a 5 by 5 filter remember a 5 by

00:02:09.469 --> 00:02:09.479
it with a 5 by 5 filter remember a 5 by
 

00:02:09.479 --> 00:02:13.400
it with a 5 by 5 filter remember a 5 by
5 filter is implemented as 5 by 5

00:02:13.400 --> 00:02:13.410
5 filter is implemented as 5 by 5
 

00:02:13.410 --> 00:02:16.430
5 filter is implemented as 5 by 5
sixteen because our convention is that

00:02:16.430 --> 00:02:16.440
sixteen because our convention is that
 

00:02:16.440 --> 00:02:18.740
sixteen because our convention is that
the filter looks across all 16 channels

00:02:18.740 --> 00:02:18.750
the filter looks across all 16 channels
 

00:02:18.750 --> 00:02:22.940
the filter looks across all 16 channels
so the 16 and just 16 must match and so

00:02:22.940 --> 00:02:22.950
so the 16 and just 16 must match and so
 

00:02:22.950 --> 00:02:26.060
so the 16 and just 16 must match and so
the output will be one by one and if you

00:02:26.060 --> 00:02:26.070
the output will be one by one and if you
 

00:02:26.070 --> 00:02:30.050
the output will be one by one and if you
have 400 of these 5 by 5 by 16 filters

00:02:30.050 --> 00:02:30.060
have 400 of these 5 by 5 by 16 filters
 

00:02:30.060 --> 00:02:32.510
have 400 of these 5 by 5 by 16 filters
then the output dimension is going to be

00:02:32.510 --> 00:02:32.520
then the output dimension is going to be
 

00:02:32.520 --> 00:02:37.310
then the output dimension is going to be
1 by 1 by 400 and so rather than viewing

00:02:37.310 --> 00:02:37.320
1 by 1 by 400 and so rather than viewing
 

00:02:37.320 --> 00:02:41.240
1 by 1 by 400 and so rather than viewing
these 400 as just a set of notes we're

00:02:41.240 --> 00:02:41.250
these 400 as just a set of notes we're
 

00:02:41.250 --> 00:02:44.210
these 400 as just a set of notes we're
going to view this as a 1 by 1 by 400

00:02:44.210 --> 00:02:44.220
going to view this as a 1 by 1 by 400
 

00:02:44.220 --> 00:02:47.270
going to view this as a 1 by 1 by 400
volume and mathematically this is the

00:02:47.270 --> 00:02:47.280
volume and mathematically this is the
 

00:02:47.280 --> 00:02:50.660
volume and mathematically this is the
same as a fully connected layer because

00:02:50.660 --> 00:02:50.670
same as a fully connected layer because
 

00:02:50.670 --> 00:02:54.170
same as a fully connected layer because
each of these 400 notes has a filter of

00:02:54.170 --> 00:02:54.180
each of these 400 notes has a filter of
 

00:02:54.180 --> 00:02:57.920
each of these 400 notes has a filter of
dimension 5 by 5 by 16 and so each of

00:02:57.920 --> 00:02:57.930
dimension 5 by 5 by 16 and so each of
 

00:02:57.930 --> 00:03:00.650
dimension 5 by 5 by 16 and so each of
those 400 values is some you know

00:03:00.650 --> 00:03:00.660
those 400 values is some you know
 

00:03:00.660 --> 00:03:03.470
those 400 values is some you know
arbitrary linear function of these 5 by

00:03:03.470 --> 00:03:03.480
arbitrary linear function of these 5 by
 

00:03:03.480 --> 00:03:07.040
arbitrary linear function of these 5 by
5 by 16 activations from the previous

00:03:07.040 --> 00:03:07.050
5 by 16 activations from the previous
 

00:03:07.050 --> 00:03:09.140
5 by 16 activations from the previous
layer next to implement the next

00:03:09.140 --> 00:03:09.150
layer next to implement the next
 

00:03:09.150 --> 00:03:11.450
layer next to implement the next
convolutional layer we're going to

00:03:11.450 --> 00:03:11.460
convolutional layer we're going to
 

00:03:11.460 --> 00:03:14.870
convolutional layer we're going to
implement a 1 by 1 convolution and if

00:03:14.870 --> 00:03:14.880
implement a 1 by 1 convolution and if
 

00:03:14.880 --> 00:03:18.920
implement a 1 by 1 convolution and if
you have 400 1 by 1 filters then with

00:03:18.920 --> 00:03:18.930
you have 400 1 by 1 filters then with
 

00:03:18.930 --> 00:03:21.860
you have 400 1 by 1 filters then with
400 filters the next layer will again be

00:03:21.860 --> 00:03:21.870
400 filters the next layer will again be
 

00:03:21.870 --> 00:03:26.270
400 filters the next layer will again be
1 by 1 by 400 so that gives you this

00:03:26.270 --> 00:03:26.280
1 by 1 by 400 so that gives you this
 

00:03:26.280 --> 00:03:29.390
1 by 1 by 400 so that gives you this
next fully connected layer and then

00:03:29.390 --> 00:03:29.400
next fully connected layer and then
 

00:03:29.400 --> 00:03:32.990
next fully connected layer and then
finally we're going to have another one

00:03:32.990 --> 00:03:33.000
finally we're going to have another one
 

00:03:33.000 --> 00:03:36.410
finally we're going to have another one
by one filter followed by a softmax

00:03:36.410 --> 00:03:36.420
by one filter followed by a softmax
 

00:03:36.420 --> 00:03:39.920
by one filter followed by a softmax
activation so as to give a 1 by 1 by 4

00:03:39.920 --> 00:03:39.930
activation so as to give a 1 by 1 by 4
 

00:03:39.930 --> 00:03:43.160
activation so as to give a 1 by 1 by 4
volume to take the place of these four

00:03:43.160 --> 00:03:43.170
volume to take the place of these four
 

00:03:43.170 --> 00:03:45.520
volume to take the place of these four
numbers that the network was outputting

00:03:45.520 --> 00:03:45.530
numbers that the network was outputting
 

00:03:45.530 --> 00:03:48.080
numbers that the network was outputting
so this shows how you can take these

00:03:48.080 --> 00:03:48.090
so this shows how you can take these
 

00:03:48.090 --> 00:03:50.750
so this shows how you can take these
fully connect two layers and implement

00:03:50.750 --> 00:03:50.760
fully connect two layers and implement
 

00:03:50.760 --> 00:03:54.470
fully connect two layers and implement
them using convolutional layers so that

00:03:54.470 --> 00:03:54.480
them using convolutional layers so that
 

00:03:54.480 --> 00:03:57.500
them using convolutional layers so that
these sets of units instead are now

00:03:57.500 --> 00:03:57.510
these sets of units instead are now
 

00:03:57.510 --> 00:04:00.830
these sets of units instead are now
implemented as one by one by 400 and one

00:04:00.830 --> 00:04:00.840
implemented as one by one by 400 and one
 

00:04:00.840 --> 00:04:04.729
implemented as one by one by 400 and one
by one by four volumes armed of this

00:04:04.729 --> 00:04:04.739
by one by four volumes armed of this
 

00:04:04.739 --> 00:04:07.460
by one by four volumes armed of this
conversion let's see how you can have a

00:04:07.460 --> 00:04:07.470
conversion let's see how you can have a
 

00:04:07.470 --> 00:04:09.830
conversion let's see how you can have a
convolutional implementation of sliding

00:04:09.830 --> 00:04:09.840
convolutional implementation of sliding
 

00:04:09.840 --> 00:04:12.910
convolutional implementation of sliding
windows object detection and

00:04:12.910 --> 00:04:12.920
windows object detection and
 

00:04:12.920 --> 00:04:15.290
windows object detection and
presentation on the slide is based on

00:04:15.290 --> 00:04:15.300
presentation on the slide is based on
 

00:04:15.300 --> 00:04:17.570
presentation on the slide is based on
the over feet paper reference at the

00:04:17.570 --> 00:04:17.580
the over feet paper reference at the
 

00:04:17.580 --> 00:04:20.900
the over feet paper reference at the
bottom by piercer meet David Egan Xia

00:04:20.900 --> 00:04:20.910
bottom by piercer meet David Egan Xia
 

00:04:20.910 --> 00:04:24.440
bottom by piercer meet David Egan Xia
Jiang micro Matthew Ron Ferguson Oakland

00:04:24.440 --> 00:04:24.450
Jiang micro Matthew Ron Ferguson Oakland
 

00:04:24.450 --> 00:04:26.720
Jiang micro Matthew Ron Ferguson Oakland
let's say that your sliding windows

00:04:26.720 --> 00:04:26.730
let's say that your sliding windows
 

00:04:26.730 --> 00:04:30.320
let's say that your sliding windows
confident inputs 14 by 14 by 3 images

00:04:30.320 --> 00:04:30.330
confident inputs 14 by 14 by 3 images
 

00:04:30.330 --> 00:04:33.440
confident inputs 14 by 14 by 3 images
and again I'm just using small numbers

00:04:33.440 --> 00:04:33.450
and again I'm just using small numbers
 

00:04:33.450 --> 00:04:36.560
and again I'm just using small numbers
like the 14 by 14 image in this slide

00:04:36.560 --> 00:04:36.570
like the 14 by 14 image in this slide
 

00:04:36.570 --> 00:04:38.840
like the 14 by 14 image in this slide
may need to make the numbers and

00:04:38.840 --> 00:04:38.850
may need to make the numbers and
 

00:04:38.850 --> 00:04:42.560
may need to make the numbers and
illustrations simpler so as before you

00:04:42.560 --> 00:04:42.570
illustrations simpler so as before you
 

00:04:42.570 --> 00:04:45.170
illustrations simpler so as before you
have a neural network as follows that

00:04:45.170 --> 00:04:45.180
have a neural network as follows that
 

00:04:45.180 --> 00:04:48.650
have a neural network as follows that
eventually outputs a 1 by 1 by 4 volume

00:04:48.650 --> 00:04:48.660
eventually outputs a 1 by 1 by 4 volume
 

00:04:48.660 --> 00:04:51.800
eventually outputs a 1 by 1 by 4 volume
which is the output of your softmax unit

00:04:51.800 --> 00:04:51.810
which is the output of your softmax unit
 

00:04:51.810 --> 00:04:54.440
which is the output of your softmax unit
and again to simplify the drawing here

00:04:54.440 --> 00:04:54.450
and again to simplify the drawing here
 

00:04:54.450 --> 00:04:58.640
and again to simplify the drawing here
14 by 14 by 3 is technically a volume 5

00:04:58.640 --> 00:04:58.650
14 by 14 by 3 is technically a volume 5
 

00:04:58.650 --> 00:05:01.760
14 by 14 by 3 is technically a volume 5
by 5 or 10 by 10 by 16 a second clear

00:05:01.760 --> 00:05:01.770
by 5 or 10 by 10 by 16 a second clear
 

00:05:01.770 --> 00:05:04.010
by 5 or 10 by 10 by 16 a second clear
volume but to simplify the drawing for

00:05:04.010 --> 00:05:04.020
volume but to simplify the drawing for
 

00:05:04.020 --> 00:05:06.260
volume but to simplify the drawing for
this slide I'm just only draw the front

00:05:06.260 --> 00:05:06.270
this slide I'm just only draw the front
 

00:05:06.270 --> 00:05:08.030
this slide I'm just only draw the front
face of these volumes so instead of

00:05:08.030 --> 00:05:08.040
face of these volumes so instead of
 

00:05:08.040 --> 00:05:10.670
face of these volumes so instead of
drawing you know 1 by 1 by 400 volume

00:05:10.670 --> 00:05:10.680
drawing you know 1 by 1 by 400 volume
 

00:05:10.680 --> 00:05:13.640
drawing you know 1 by 1 by 400 volume
I'm just only draw the 1 by 1 parts of

00:05:13.640 --> 00:05:13.650
I'm just only draw the 1 by 1 parts of
 

00:05:13.650 --> 00:05:16.760
I'm just only draw the 1 by 1 parts of
all of these right so just drop the 3d

00:05:16.760 --> 00:05:16.770
all of these right so just drop the 3d
 

00:05:16.770 --> 00:05:18.680
all of these right so just drop the 3d
component of these drawings just for

00:05:18.680 --> 00:05:18.690
component of these drawings just for
 

00:05:18.690 --> 00:05:20.360
component of these drawings just for
this slide so let's say that you're

00:05:20.360 --> 00:05:20.370
this slide so let's say that you're
 

00:05:20.370 --> 00:05:23.660
this slide so let's say that you're
confident inputs 14 by 14 images or 14

00:05:23.660 --> 00:05:23.670
confident inputs 14 by 14 images or 14
 

00:05:23.670 --> 00:05:26.330
confident inputs 14 by 14 images or 14
by 14 by 3 images and your test set

00:05:26.330 --> 00:05:26.340
by 14 by 3 images and your test set
 

00:05:26.340 --> 00:05:30.230
by 14 by 3 images and your test set
image is 16 by 16 by 3 so now added that

00:05:30.230 --> 00:05:30.240
image is 16 by 16 by 3 so now added that
 

00:05:30.240 --> 00:05:32.930
image is 16 by 16 by 3 so now added that
yellow stripe to the border of this

00:05:32.930 --> 00:05:32.940
yellow stripe to the border of this
 

00:05:32.940 --> 00:05:35.450
yellow stripe to the border of this
image so in the original sliding windows

00:05:35.450 --> 00:05:35.460
image so in the original sliding windows
 

00:05:35.460 --> 00:05:39.650
image so in the original sliding windows
algorithm you might want to input the

00:05:39.650 --> 00:05:39.660
algorithm you might want to input the
 

00:05:39.660 --> 00:05:42.320
algorithm you might want to input the
blue region into a confident and run

00:05:42.320 --> 00:05:42.330
blue region into a confident and run
 

00:05:42.330 --> 00:05:44.480
blue region into a confident and run
that once to generate a classification 0

00:05:44.480 --> 00:05:44.490
that once to generate a classification 0
 

00:05:44.490 --> 00:05:46.970
that once to generate a classification 0
1 and then slide it down a bit let's use

00:05:46.970 --> 00:05:46.980
1 and then slide it down a bit let's use
 

00:05:46.980 --> 00:05:50.840
1 and then slide it down a bit let's use
the stride of 2 pixels and and then you

00:05:50.840 --> 00:05:50.850
the stride of 2 pixels and and then you
 

00:05:50.850 --> 00:05:52.760
the stride of 2 pixels and and then you
might slide oh and then you might slide

00:05:52.760 --> 00:05:52.770
might slide oh and then you might slide
 

00:05:52.770 --> 00:05:56.030
might slide oh and then you might slide
that to the right by 2 pixels to input

00:05:56.030 --> 00:05:56.040
that to the right by 2 pixels to input
 

00:05:56.040 --> 00:05:58.940
that to the right by 2 pixels to input
this green rectangle into the confident

00:05:58.940 --> 00:05:58.950
this green rectangle into the confident
 

00:05:58.950 --> 00:06:00.920
this green rectangle into the confident
and rerun the whole continent and get

00:06:00.920 --> 00:06:00.930
and rerun the whole continent and get
 

00:06:00.930 --> 00:06:03.920
and rerun the whole continent and get
another label 0 1 and then you might

00:06:03.920 --> 00:06:03.930
another label 0 1 and then you might
 

00:06:03.930 --> 00:06:08.210
another label 0 1 and then you might
input this orange region into the

00:06:08.210 --> 00:06:08.220
input this orange region into the
 

00:06:08.220 --> 00:06:11.030
input this orange region into the
confident and run it one more time to

00:06:11.030 --> 00:06:11.040
confident and run it one more time to
 

00:06:11.040 --> 00:06:13.970
confident and run it one more time to
get another label and then do the fourth

00:06:13.970 --> 00:06:13.980
get another label and then do the fourth
 

00:06:13.980 --> 00:06:16.250
get another label and then do the fourth
and final time with this your lower

00:06:16.250 --> 00:06:16.260
and final time with this your lower
 

00:06:16.260 --> 00:06:21.650
and final time with this your lower
right now purple square and

00:06:21.650 --> 00:06:21.660
right now purple square and
 

00:06:21.660 --> 00:06:23.810
right now purple square and
to run sliding windows on this 16 by 16

00:06:23.810 --> 00:06:23.820
to run sliding windows on this 16 by 16
 

00:06:23.820 --> 00:06:26.480
to run sliding windows on this 16 by 16
by 3 image is pretty small image you run

00:06:26.480 --> 00:06:26.490
by 3 image is pretty small image you run
 

00:06:26.490 --> 00:06:29.840
by 3 image is pretty small image you run
this confident from above 4 times in

00:06:29.840 --> 00:06:29.850
this confident from above 4 times in
 

00:06:29.850 --> 00:06:32.600
this confident from above 4 times in
order to forget 4 labels but it turns

00:06:32.600 --> 00:06:32.610
order to forget 4 labels but it turns
 

00:06:32.610 --> 00:06:35.150
order to forget 4 labels but it turns
out a lot of this computation done by

00:06:35.150 --> 00:06:35.160
out a lot of this computation done by
 

00:06:35.160 --> 00:06:37.850
out a lot of this computation done by
these 4 confidence is highly duplicated

00:06:37.850 --> 00:06:37.860
these 4 confidence is highly duplicated
 

00:06:37.860 --> 00:06:39.530
these 4 confidence is highly duplicated
so where the convolutional

00:06:39.530 --> 00:06:39.540
so where the convolutional
 

00:06:39.540 --> 00:06:41.300
so where the convolutional
implementation of sliding windows does

00:06:41.300 --> 00:06:41.310
implementation of sliding windows does
 

00:06:41.310 --> 00:06:44.960
implementation of sliding windows does
is it allows these 4 forward passes of

00:06:44.960 --> 00:06:44.970
is it allows these 4 forward passes of
 

00:06:44.970 --> 00:06:46.760
is it allows these 4 forward passes of
the confident to share a lot of

00:06:46.760 --> 00:06:46.770
the confident to share a lot of
 

00:06:46.770 --> 00:06:49.250
the confident to share a lot of
computation specifically here's what you

00:06:49.250 --> 00:06:49.260
computation specifically here's what you
 

00:06:49.260 --> 00:06:51.380
computation specifically here's what you
can do you can take the confidence and

00:06:51.380 --> 00:06:51.390
can do you can take the confidence and
 

00:06:51.390 --> 00:06:55.160
can do you can take the confidence and
just run it same parameters the same 5

00:06:55.160 --> 00:06:55.170
just run it same parameters the same 5
 

00:06:55.170 --> 00:06:58.880
just run it same parameters the same 5
by 5 by filters also 16 5 by 5 filters

00:06:58.880 --> 00:06:58.890
by 5 by filters also 16 5 by 5 filters
 

00:06:58.890 --> 00:07:02.690
by 5 by filters also 16 5 by 5 filters
and run it and now you can have a 12 by

00:07:02.690 --> 00:07:02.700
and run it and now you can have a 12 by
 

00:07:02.700 --> 00:07:05.540
and run it and now you can have a 12 by
12 by 16 output volume and then do the

00:07:05.540 --> 00:07:05.550
12 by 16 output volume and then do the
 

00:07:05.550 --> 00:07:07.940
12 by 16 output volume and then do the
max cool same as before now you have a 6

00:07:07.940 --> 00:07:07.950
max cool same as before now you have a 6
 

00:07:07.950 --> 00:07:12.290
max cool same as before now you have a 6
by 6 by 16 run through your same 400 5.5

00:07:12.290 --> 00:07:12.300
by 6 by 16 run through your same 400 5.5
 

00:07:12.300 --> 00:07:16.640
by 6 by 16 run through your same 400 5.5
filters to get now your 2 by 2 by 40

00:07:16.640 --> 00:07:16.650
filters to get now your 2 by 2 by 40
 

00:07:16.650 --> 00:07:21.290
filters to get now your 2 by 2 by 40
volume so now instead of a 1 by 1 so now

00:07:21.290 --> 00:07:21.300
volume so now instead of a 1 by 1 so now
 

00:07:21.300 --> 00:07:25.340
volume so now instead of a 1 by 1 so now
instead of a 1 by 1 by 400 volume you

00:07:25.340 --> 00:07:25.350
instead of a 1 by 1 by 400 volume you
 

00:07:25.350 --> 00:07:29.440
instead of a 1 by 1 by 400 volume you
have the said a 2 by 2 by 400 volume

00:07:29.440 --> 00:07:29.450
have the said a 2 by 2 by 400 volume
 

00:07:29.450 --> 00:07:32.960
have the said a 2 by 2 by 400 volume
Ramnath 301 by 1 filter gives you

00:07:32.960 --> 00:07:32.970
Ramnath 301 by 1 filter gives you
 

00:07:32.970 --> 00:07:36.740
Ramnath 301 by 1 filter gives you
another 2 by 2 by 407 one by one by 400

00:07:36.740 --> 00:07:36.750
another 2 by 2 by 407 one by one by 400
 

00:07:36.750 --> 00:07:39.170
another 2 by 2 by 407 one by one by 400
do that one more time and now you're

00:07:39.170 --> 00:07:39.180
do that one more time and now you're
 

00:07:39.180 --> 00:07:42.440
do that one more time and now you're
left with a 2 by 2 by 4 output volume is

00:07:42.440 --> 00:07:42.450
left with a 2 by 2 by 4 output volume is
 

00:07:42.450 --> 00:07:45.500
left with a 2 by 2 by 4 output volume is
that 1 by 1 by 4 and it turns out that

00:07:45.500 --> 00:07:45.510
that 1 by 1 by 4 and it turns out that
 

00:07:45.510 --> 00:07:48.409
that 1 by 1 by 4 and it turns out that
this blue one by one by four subset

00:07:48.409 --> 00:07:48.419
this blue one by one by four subset
 

00:07:48.419 --> 00:07:50.750
this blue one by one by four subset
gives you the result of running in the

00:07:50.750 --> 00:07:50.760
gives you the result of running in the
 

00:07:50.760 --> 00:07:53.900
gives you the result of running in the
upper left-hand corner 14 by 14 image

00:07:53.900 --> 00:07:53.910
upper left-hand corner 14 by 14 image
 

00:07:53.910 --> 00:07:58.430
upper left-hand corner 14 by 14 image
this upper right 1 by 1 by 4 volume

00:07:58.430 --> 00:07:58.440
this upper right 1 by 1 by 4 volume
 

00:07:58.440 --> 00:08:02.180
this upper right 1 by 1 by 4 volume
gives you the upper right result the

00:08:02.180 --> 00:08:02.190
gives you the upper right result the
 

00:08:02.190 --> 00:08:04.730
gives you the upper right result the
lower left gives you the results of

00:08:04.730 --> 00:08:04.740
lower left gives you the results of
 

00:08:04.740 --> 00:08:06.770
lower left gives you the results of
implementing the content on the lower

00:08:06.770 --> 00:08:06.780
implementing the content on the lower
 

00:08:06.780 --> 00:08:09.820
implementing the content on the lower
left 14 by 14 region and the lower right

00:08:09.820 --> 00:08:09.830
left 14 by 14 region and the lower right
 

00:08:09.830 --> 00:08:12.800
left 14 by 14 region and the lower right
1 by 1 by 4 volume gives you the same

00:08:12.800 --> 00:08:12.810
1 by 1 by 4 volume gives you the same
 

00:08:12.810 --> 00:08:15.710
1 by 1 by 4 volume gives you the same
result as running the confident on the

00:08:15.710 --> 00:08:15.720
result as running the confident on the
 

00:08:15.720 --> 00:08:18.530
result as running the confident on the
lower right 14 by 14 media and if you

00:08:18.530 --> 00:08:18.540
lower right 14 by 14 media and if you
 

00:08:18.540 --> 00:08:20.180
lower right 14 by 14 media and if you
step through all the steps of the

00:08:20.180 --> 00:08:20.190
step through all the steps of the
 

00:08:20.190 --> 00:08:21.740
step through all the steps of the
calculation let's look at the green

00:08:21.740 --> 00:08:21.750
calculation let's look at the green
 

00:08:21.750 --> 00:08:25.100
calculation let's look at the green
example if you had cropped out just this

00:08:25.100 --> 00:08:25.110
example if you had cropped out just this
 

00:08:25.110 --> 00:08:26.810
example if you had cropped out just this
region and passed it through the

00:08:26.810 --> 00:08:26.820
region and passed it through the
 

00:08:26.820 --> 00:08:28.820
region and passed it through the
confident through the confident on top

00:08:28.820 --> 00:08:28.830
confident through the confident on top
 

00:08:28.830 --> 00:08:31.490
confident through the confident on top
then the first layers activations would

00:08:31.490 --> 00:08:31.500
then the first layers activations would
 

00:08:31.500 --> 00:08:34.220
then the first layers activations would
have been exactly this region

00:08:34.220 --> 00:08:34.230
have been exactly this region
 

00:08:34.230 --> 00:08:35.870
have been exactly this region
the next layers activation of the mass

00:08:35.870 --> 00:08:35.880
the next layers activation of the mass
 

00:08:35.880 --> 00:08:37.700
the next layers activation of the mass
cooling would have been exactly this

00:08:37.700 --> 00:08:37.710
cooling would have been exactly this
 

00:08:37.710 --> 00:08:40.850
cooling would have been exactly this
region and then the next layer the next

00:08:40.850 --> 00:08:40.860
region and then the next layer the next
 

00:08:40.860 --> 00:08:43.850
region and then the next layer the next
layer would have been as follows so what

00:08:43.850 --> 00:08:43.860
layer would have been as follows so what
 

00:08:43.860 --> 00:08:45.050
layer would have been as follows so what
this process does what this

00:08:45.050 --> 00:08:45.060
this process does what this
 

00:08:45.060 --> 00:08:46.670
this process does what this
convolutional inclination does is

00:08:46.670 --> 00:08:46.680
convolutional inclination does is
 

00:08:46.680 --> 00:08:49.370
convolutional inclination does is
instead of forcing you to run for a

00:08:49.370 --> 00:08:49.380
instead of forcing you to run for a
 

00:08:49.380 --> 00:08:52.310
instead of forcing you to run for a
propagation on four subsets of the input

00:08:52.310 --> 00:08:52.320
propagation on four subsets of the input
 

00:08:52.320 --> 00:08:55.610
propagation on four subsets of the input
image independently instead it combines

00:08:55.610 --> 00:08:55.620
image independently instead it combines
 

00:08:55.620 --> 00:08:58.220
image independently instead it combines
all four into one for computation and

00:08:58.220 --> 00:08:58.230
all four into one for computation and
 

00:08:58.230 --> 00:09:00.080
all four into one for computation and
shares a lot of the computation in the

00:09:00.080 --> 00:09:00.090
shares a lot of the computation in the
 

00:09:00.090 --> 00:09:02.900
shares a lot of the computation in the
regions of the image that are common so

00:09:02.900 --> 00:09:02.910
regions of the image that are common so
 

00:09:02.910 --> 00:09:06.260
regions of the image that are common so
all four of the 14 by 14 patches we saw

00:09:06.260 --> 00:09:06.270
all four of the 14 by 14 patches we saw
 

00:09:06.270 --> 00:09:09.200
all four of the 14 by 14 patches we saw
here now let's just go through a bigger

00:09:09.200 --> 00:09:09.210
here now let's just go through a bigger
 

00:09:09.210 --> 00:09:11.150
here now let's just go through a bigger
example let's say you now want to run

00:09:11.150 --> 00:09:11.160
example let's say you now want to run
 

00:09:11.160 --> 00:09:14.390
example let's say you now want to run
sliding windows on a 28 by 28 by 3 image

00:09:14.390 --> 00:09:14.400
sliding windows on a 28 by 28 by 3 image
 

00:09:14.400 --> 00:09:17.690
sliding windows on a 28 by 28 by 3 image
it turns out if you run for crop the

00:09:17.690 --> 00:09:17.700
it turns out if you run for crop the
 

00:09:17.700 --> 00:09:20.270
it turns out if you run for crop the
same way then you end up with an 8 by 8

00:09:20.270 --> 00:09:20.280
same way then you end up with an 8 by 8
 

00:09:20.280 --> 00:09:23.240
same way then you end up with an 8 by 8
by 4 output and this corresponds to

00:09:23.240 --> 00:09:23.250
by 4 output and this corresponds to
 

00:09:23.250 --> 00:09:26.210
by 4 output and this corresponds to
running sliding windows with that 14 by

00:09:26.210 --> 00:09:26.220
running sliding windows with that 14 by
 

00:09:26.220 --> 00:09:28.820
running sliding windows with that 14 by
14 region and that corresponds to

00:09:28.820 --> 00:09:28.830
14 region and that corresponds to
 

00:09:28.830 --> 00:09:31.580
14 region and that corresponds to
running sliding windows first on that

00:09:31.580 --> 00:09:31.590
running sliding windows first on that
 

00:09:31.590 --> 00:09:34.430
running sliding windows first on that
region does giving you the output

00:09:34.430 --> 00:09:34.440
region does giving you the output
 

00:09:34.440 --> 00:09:35.780
region does giving you the output
corresponding on the upper left-hand

00:09:35.780 --> 00:09:35.790
corresponding on the upper left-hand
 

00:09:35.790 --> 00:09:38.510
corresponding on the upper left-hand
corner then using Strider two to shift

00:09:38.510 --> 00:09:38.520
corner then using Strider two to shift
 

00:09:38.520 --> 00:09:41.150
corner then using Strider two to shift
one window over one window over one

00:09:41.150 --> 00:09:41.160
one window over one window over one
 

00:09:41.160 --> 00:09:43.310
one window over one window over one
window over and so on and there ain't

00:09:43.310 --> 00:09:43.320
window over and so on and there ain't
 

00:09:43.320 --> 00:09:45.470
window over and so on and there ain't
position so that gives you this first

00:09:45.470 --> 00:09:45.480
position so that gives you this first
 

00:09:45.480 --> 00:09:48.320
position so that gives you this first
row and then as you go down the image as

00:09:48.320 --> 00:09:48.330
row and then as you go down the image as
 

00:09:48.330 --> 00:09:50.450
row and then as you go down the image as
well that gives you all of these 8 by 8

00:09:50.450 --> 00:09:50.460
well that gives you all of these 8 by 8
 

00:09:50.460 --> 00:09:55.340
well that gives you all of these 8 by 8
by 4 outputs and the N is because of the

00:09:55.340 --> 00:09:55.350
by 4 outputs and the N is because of the
 

00:09:55.350 --> 00:09:58.430
by 4 outputs and the N is because of the
max pooling of 2 that this corresponds

00:09:58.430 --> 00:09:58.440
max pooling of 2 that this corresponds
 

00:09:58.440 --> 00:10:00.920
max pooling of 2 that this corresponds
to running your neural network with a

00:10:00.920 --> 00:10:00.930
to running your neural network with a
 

00:10:00.930 --> 00:10:03.590
to running your neural network with a
stride of 2 on the original image

00:10:03.590 --> 00:10:03.600
stride of 2 on the original image
 

00:10:03.600 --> 00:10:07.220
stride of 2 on the original image
so just to recap to implement sliding

00:10:07.220 --> 00:10:07.230
so just to recap to implement sliding
 

00:10:07.230 --> 00:10:09.620
so just to recap to implement sliding
windows previously what you do is you

00:10:09.620 --> 00:10:09.630
windows previously what you do is you
 

00:10:09.630 --> 00:10:12.860
windows previously what you do is you
drop out a region let's say this is on

00:10:12.860 --> 00:10:12.870
drop out a region let's say this is on
 

00:10:12.870 --> 00:10:16.430
drop out a region let's say this is on
14 by 14 and run that to your content

00:10:16.430 --> 00:10:16.440
14 by 14 and run that to your content
 

00:10:16.440 --> 00:10:18.280
14 by 14 and run that to your content
and do that for the next region over

00:10:18.280 --> 00:10:18.290
and do that for the next region over
 

00:10:18.290 --> 00:10:20.840
and do that for the next region over
then do that for the next 14 by 14

00:10:20.840 --> 00:10:20.850
then do that for the next 14 by 14
 

00:10:20.850 --> 00:10:22.670
then do that for the next 14 by 14
region then the next one then the next

00:10:22.670 --> 00:10:22.680
region then the next one then the next
 

00:10:22.680 --> 00:10:25.550
region then the next one then the next
one the next one the next one and so on

00:10:25.550 --> 00:10:25.560
one the next one the next one and so on
 

00:10:25.560 --> 00:10:28.550
one the next one the next one and so on
until hopefully that one recognizes the

00:10:28.550 --> 00:10:28.560
until hopefully that one recognizes the
 

00:10:28.560 --> 00:10:30.440
until hopefully that one recognizes the
car but now instead of doing it

00:10:30.440 --> 00:10:30.450
car but now instead of doing it
 

00:10:30.450 --> 00:10:33.170
car but now instead of doing it
sequentially with this convolutional

00:10:33.170 --> 00:10:33.180
sequentially with this convolutional
 

00:10:33.180 --> 00:10:34.640
sequentially with this convolutional
implementation that you saw in the

00:10:34.640 --> 00:10:34.650
implementation that you saw in the
 

00:10:34.650 --> 00:10:36.590
implementation that you saw in the
previous slide you can implement the

00:10:36.590 --> 00:10:36.600
previous slide you can implement the
 

00:10:36.600 --> 00:10:39.200
previous slide you can implement the
entire image or maybe twenty by twenty

00:10:39.200 --> 00:10:39.210
entire image or maybe twenty by twenty
 

00:10:39.210 --> 00:10:42.260
entire image or maybe twenty by twenty
eight and convolutional 'i make all the

00:10:42.260 --> 00:10:42.270
eight and convolutional 'i make all the
 

00:10:42.270 --> 00:10:45.140
eight and convolutional 'i make all the
predictions at the same time by one for

00:10:45.140 --> 00:10:45.150
predictions at the same time by one for
 

00:10:45.150 --> 00:10:46.920
predictions at the same time by one for
pass through this big confident in

00:10:46.920 --> 00:10:46.930
pass through this big confident in
 

00:10:46.930 --> 00:10:48.990
pass through this big confident in
we have it recognize the position of the

00:10:48.990 --> 00:10:49.000
we have it recognize the position of the
 

00:10:49.000 --> 00:10:52.769
we have it recognize the position of the
car so that's how you implement sliding

00:10:52.769 --> 00:10:52.779
car so that's how you implement sliding
 

00:10:52.779 --> 00:10:55.290
car so that's how you implement sliding
windows convolutional v and it makes the

00:10:55.290 --> 00:10:55.300
windows convolutional v and it makes the
 

00:10:55.300 --> 00:10:58.260
windows convolutional v and it makes the
whole thing much more efficient now this

00:10:58.260 --> 00:10:58.270
whole thing much more efficient now this
 

00:10:58.270 --> 00:11:00.120
whole thing much more efficient now this
algorithm store has one weakness which

00:11:00.120 --> 00:11:00.130
algorithm store has one weakness which
 

00:11:00.130 --> 00:11:02.579
algorithm store has one weakness which
is the position of the bounding boxes is

00:11:02.579 --> 00:11:02.589
is the position of the bounding boxes is
 

00:11:02.589 --> 00:11:05.400
is the position of the bounding boxes is
not going to be too accurate in the next

00:11:05.400 --> 00:11:05.410
not going to be too accurate in the next
 

00:11:05.410 --> 00:11:07.170
not going to be too accurate in the next
video let's see how you can fix that

00:11:07.170 --> 00:11:07.180
video let's see how you can fix that
 

00:11:07.180 --> 00:11:09.240
video let's see how you can fix that
problem

