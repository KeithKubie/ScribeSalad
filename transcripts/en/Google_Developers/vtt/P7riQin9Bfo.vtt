WEBVTT
Kind: captions
Language: en

00:00:00.157 --> 00:00:01.990
COLT MCANLIS: If you're
a 2D game developer,

00:00:01.990 --> 00:00:05.260
a large portion of your game
content comes from textures.

00:00:05.260 --> 00:00:07.950
And in a world with harsh data
caps, devices with low memory,

00:00:07.950 --> 00:00:09.900
and impatient users,
you can't afford

00:00:09.900 --> 00:00:11.826
to have a game with
bloated content.

00:00:11.826 --> 00:00:14.200
My name is Colt McAnlis, and
with the new texture format,

00:00:14.200 --> 00:00:16.074
you can reduce your
game's texture footprint,

00:00:16.074 --> 00:00:18.240
reduce download
sizes, and improve

00:00:18.240 --> 00:00:19.912
load times, which
is a good thing.

00:00:19.912 --> 00:00:20.870
I mean, think about it.

00:00:20.870 --> 00:00:23.297
In a free to play market, it's
all about user acquisition.

00:00:23.297 --> 00:00:25.630
You want to be able to minimize
the cycle between a user

00:00:25.630 --> 00:00:28.190
seeing an ad for your game,
installing it, playing

00:00:28.190 --> 00:00:30.470
it, and becoming a paying user.

00:00:30.470 --> 00:00:32.220
But having a 10
minute download pause

00:00:32.220 --> 00:00:34.540
in the middle of that cycle
hurts your user acquisition

00:00:34.540 --> 00:00:36.760
rates and just frustrates users.

00:00:36.760 --> 00:00:38.650
For 2D games, flip
book animations

00:00:38.650 --> 00:00:41.220
tend to comprise the bulk
of the texture footprint.

00:00:41.220 --> 00:00:44.020
Usually, an artist will create
a frame of each animation

00:00:44.020 --> 00:00:46.700
as a separate file and then
pack them into a single texture

00:00:46.700 --> 00:00:49.430
atlas to optimize for loading
and rendering performance.

00:00:49.430 --> 00:00:50.950
But these flip book
animations tend

00:00:50.950 --> 00:00:53.600
to be using more memory
than they actually need to.

00:00:53.600 --> 00:00:55.800
Firstly, there tends to be
lots of duplicate pixels

00:00:55.800 --> 00:00:57.487
between the frames of animation.

00:00:57.487 --> 00:00:59.070
That is, most of the
frame is visually

00:00:59.070 --> 00:01:01.970
identical to the last frame
with only a small portion of it

00:01:01.970 --> 00:01:05.290
actually animating and changing
between subsequent frames.

00:01:05.290 --> 00:01:07.640
And secondly, there tends
to be lots of wasted space

00:01:07.640 --> 00:01:10.304
once your frames get packed
into a single texture atlas.

00:01:10.304 --> 00:01:12.470
This is mostly due to the
fact that your frames have

00:01:12.470 --> 00:01:14.890
transparency, and when
placed side by side,

00:01:14.890 --> 00:01:17.690
this data creates
lots of wasted pixels.

00:01:17.690 --> 00:01:19.430
Rather than a large
texture atlas,

00:01:19.430 --> 00:01:22.480
you really want some format to
reduce the texture footprint

00:01:22.480 --> 00:01:23.960
for these animated textures.

00:01:23.960 --> 00:01:25.450
Now, there are
traditional formats

00:01:25.450 --> 00:01:26.950
for these sorts of
things out there,

00:01:26.950 --> 00:01:29.340
like GIF, H.264, and WebM.

00:01:29.340 --> 00:01:31.520
But sadly, these are
unusable for games.

00:01:31.520 --> 00:01:33.040
See, all of these
texture formats

00:01:33.040 --> 00:01:36.150
require a per frame
CPU decompression step

00:01:36.150 --> 00:01:39.590
coupled with a GPU upload step
to get them to the screen.

00:01:39.590 --> 00:01:41.490
You effectively have to
decompress each frame

00:01:41.490 --> 00:01:43.900
to CPU memory and then
upload it to the GPU,

00:01:43.900 --> 00:01:45.700
which is anything
but performant.

00:01:45.700 --> 00:01:47.790
While these formats help
with distribution sizes,

00:01:47.790 --> 00:01:49.910
the savings stop there.

00:01:49.910 --> 00:01:51.789
What we really want
instead is a format

00:01:51.789 --> 00:01:53.330
that provides
compression but doesn't

00:01:53.330 --> 00:01:55.130
need the CPU decompression step.

00:01:55.130 --> 00:01:58.930
Rather, we can use it on the GPU
in its direct compressed form.

00:01:58.930 --> 00:02:01.910
To address this problem, we've
released an open source texture

00:02:01.910 --> 00:02:04.500
format called Crabby
that focuses on flip book

00:02:04.500 --> 00:02:07.355
compression alongside
GPU reconstruction.

00:02:07.355 --> 00:02:09.229
The compression in Crabby
comes from removing

00:02:09.229 --> 00:02:11.470
blocks of duplicate
pixels in your image.

00:02:11.470 --> 00:02:13.430
See, for a given frame
of your animation,

00:02:13.430 --> 00:02:16.250
we subdivide the image into
four by four blocks of pixels

00:02:16.250 --> 00:02:18.630
and then do an exhaustive
search to identify blocks

00:02:18.630 --> 00:02:20.474
which are identical
to each other.

00:02:20.474 --> 00:02:21.890
All of the unique
pixel blocks are

00:02:21.890 --> 00:02:25.260
kept in a texture in their
32 bit per pixel format.

00:02:25.260 --> 00:02:27.950
We replace the blocks in
the image with an index

00:02:27.950 --> 00:02:29.527
into the unique block.

00:02:29.527 --> 00:02:31.860
For example, all of the white
blocks that are duplicates

00:02:31.860 --> 00:02:34.160
will share the
same texture index.

00:02:34.160 --> 00:02:36.310
The process is then
duplicated for each frame

00:02:36.310 --> 00:02:39.030
of your animation, where you
can share blocks between frames

00:02:39.030 --> 00:02:41.990
all adding up to output
the final textures.

00:02:41.990 --> 00:02:44.290
Now, when compared with
the standard PNG file,

00:02:44.290 --> 00:02:47.130
Crabby provides significant
compression improvement

00:02:47.130 --> 00:02:49.500
for distribution
sizes, CPU residency,

00:02:49.500 --> 00:02:53.106
and most importantly, GPU
residency of your textures.

00:02:53.106 --> 00:02:55.480
Now, it's worth pointing out
that Crabby's compression is

00:02:55.480 --> 00:02:57.764
lossless, meaning there's
no visual artifacts that

00:02:57.764 --> 00:02:59.930
are added to your image for
the sake of compression.

00:02:59.930 --> 00:03:01.554
But if you're interested
in trading off

00:03:01.554 --> 00:03:03.860
visual quality for additional
compression savings,

00:03:03.860 --> 00:03:05.770
you could pass the
pixel block texture off

00:03:05.770 --> 00:03:09.640
to WebP or one of the many
awesome GPU formats out there.

00:03:09.640 --> 00:03:11.260
To render your
animations at runtime,

00:03:11.260 --> 00:03:14.890
Crabby uses a special shader
to reconstruct any single frame

00:03:14.890 --> 00:03:17.840
of your animation on
demand on the GPU.

00:03:17.840 --> 00:03:19.810
It works like this.

00:03:19.810 --> 00:03:22.210
We use the standard
UVs of a rendered quad

00:03:22.210 --> 00:03:25.010
to sample the block index's
texture, which gives us

00:03:25.010 --> 00:03:28.120
an index into our list
of unique pixel blocks.

00:03:28.120 --> 00:03:31.050
We then fetch that block
with a second sample

00:03:31.050 --> 00:03:33.120
from the pixel block's
texture, giving us

00:03:33.120 --> 00:03:35.919
the pixels that we'll use to
reconstruct your final frame.

00:03:35.919 --> 00:03:37.460
And the best part
is that this is all

00:03:37.460 --> 00:03:40.710
done on the GPU on demand
without having to first do

00:03:40.710 --> 00:03:43.950
an intermediate decompression
step on the CPU.

00:03:43.950 --> 00:03:47.010
To test performance of this
heavier than normal shader,

00:03:47.010 --> 00:03:49.690
I set up three devices and
then ran the Crabby demos

00:03:49.690 --> 00:03:50.670
in full screen mode.

00:03:50.670 --> 00:03:53.030
That is, 100% of the
screen was covered

00:03:53.030 --> 00:03:55.970
with pixels being decompressed
by this process, which

00:03:55.970 --> 00:03:59.930
would be the worst possible case
scenario for a typical game.

00:03:59.930 --> 00:04:02.700
The Nexus 5 performed
the best with this test,

00:04:02.700 --> 00:04:05.940
but you can see that the Galaxy
Nexus and the Nexus 7 hardware

00:04:05.940 --> 00:04:08.410
had some performance
overhead for Crabby.

00:04:08.410 --> 00:04:10.450
This is mainly due to
the tiling architecture

00:04:10.450 --> 00:04:11.980
that those devices use.

00:04:11.980 --> 00:04:15.040
Crabby's double sample set up
can create a performance issue

00:04:15.040 --> 00:04:18.120
on these types of
tile based GPU chips.

00:04:18.120 --> 00:04:20.600
The Crabby codec is
available in alpha mode,

00:04:20.600 --> 00:04:23.540
and it's available on GitHub
for you to try out and break.

00:04:23.540 --> 00:04:25.820
You'll find the client-side
implementations for OpenGL

00:04:25.820 --> 00:04:28.100
on Windows, Android, and WebGL.

00:04:28.100 --> 00:04:30.559
Take a look at it
and file some bugs.

00:04:30.559 --> 00:04:32.100
Decreasing the
texture footprint size

00:04:32.100 --> 00:04:34.474
is the biggest step you can
take to make your game easier

00:04:34.474 --> 00:04:37.260
to download and install so
users can get back to what they

00:04:37.260 --> 00:04:40.290
really love most--
killing zombies.

00:04:40.290 --> 00:04:42.120
Thanks for watching.

