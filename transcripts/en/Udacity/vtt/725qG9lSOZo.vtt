WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
[Evans] Let's define our procedure in the Python interpreter.

00:00:03.000 --> 00:00:05.000
We'll give it the name measure_udacity,

00:00:05.000 --> 00:00:08.000
and we'll give the parameter the name p.

00:00:08.000 --> 00:00:14.000
Actually, we should probably give the parameter the name U, and we'll use an upper case U.

00:00:14.000 --> 00:00:18.000
Not the most standard name for a parameter but appropriate in this case.

00:00:18.000 --> 00:00:20.000
We'll introduce the variable count.

00:00:20.000 --> 00:00:22.000
We'll set its initial value to 0.

00:00:22.000 --> 00:00:26.000
We're going to use count to keep track of the number of strings that we found

00:00:26.000 --> 00:00:29.000
that satisfy the udacity property.

00:00:29.000 --> 00:00:33.000
And we'll use the for-loop to go through all of the elements in U.

00:00:33.000 --> 00:00:36.000
Now we need to decide whether or not to count this element.

00:00:36.000 --> 00:00:38.000
We can use an if statement to do this.

00:00:38.000 --> 00:00:41.000
We're going to need to use a comparison to check if the first character of the string

00:00:41.000 --> 00:00:43.000
is an upper case U.

00:00:43.000 --> 00:00:46.000
If it is, we want to add 1 to the value of count.

00:00:46.000 --> 00:00:48.000
If it's not, we do nothing.

00:00:48.000 --> 00:00:53.000
So we use the equality test to check if the value at position 0 in e,

00:00:53.000 --> 00:00:56.000
the current element of the list, is an upper case U.

00:00:56.000 --> 00:00:58.000
If it is, we add 1 to count.

00:00:58.000 --> 00:01:02.000
If not, we don't need to do anything, so we don't need an else clause.

00:01:02.000 --> 00:01:05.000
And now we just need to return the value of count.

00:01:05.000 --> 00:01:07.000
Let's test our procedure.

00:01:07.000 --> 00:01:12.000
Our first example, the input strings were Dave, Sebastian, and Katy.

00:01:12.000 --> 00:01:15.000
We see the result is 0, as expected.

00:01:15.000 --> 00:01:21.000
We'll try the second example where we have 2 strings that start with the letter U

00:01:21.000 --> 00:01:25.000
and see that we get the result 2 as the second value printed out.

00:01:25.000 --> 00:01:31.000
We should also test a string that has a mix of Us and non-Us.

00:01:31.000 --> 00:01:33.000
Now we're passing in 4 strings.

00:01:33.000 --> 00:01:36.000
They all start with a U, but only 2 of them start with an upper case U.

00:01:36.000 --> 00:01:41.000
So the result for the third number printed out should also be a 2.

00:01:41.000 --> 00:01:44.000
And we see that we get the expected result.

