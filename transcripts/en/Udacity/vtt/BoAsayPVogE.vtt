WEBVTT
Kind: captions
Language: en

00:00:00.750 --> 00:00:03.070
Sometimes when you're
working on managing focus,

00:00:03.070 --> 00:00:05.950
it can be possible to get
a little carried away.

00:00:05.950 --> 00:00:06.960
Let me show you an example.

00:00:06.960 --> 00:00:09.700
So here I've got an autocomplete widget.

00:00:09.700 --> 00:00:12.070
I can press the Tab key to focus it.

00:00:12.070 --> 00:00:16.758
I can start typing, which will
give me this list of city names.

00:00:16.758 --> 00:00:18.882
I can press the down key to focus one.

00:00:18.882 --> 00:00:21.240
And then can press Tab again
to complete the selection.

00:00:22.320 --> 00:00:25.630
Now, the next thing I want to do is
move to this next field by pressing Tab.

00:00:25.630 --> 00:00:27.382
So I'll hit Tab once more.

00:00:27.382 --> 00:00:30.340
Hm, and
it looks like I'm not going anywhere.

00:00:30.340 --> 00:00:31.520
I think what's happening is,

00:00:31.520 --> 00:00:37.130
this autocomplete thinks I'm still
trying to finish my complete action.

00:00:37.130 --> 00:00:40.641
So no matter how many times I press
Tab I'm just sort of stuck here.

00:00:41.720 --> 00:00:44.330
This is what's known as a keyboard trap.

00:00:44.330 --> 00:00:47.510
And it can be very frustrating for
users.

00:00:47.510 --> 00:00:52.315
In fact, Section 2.1.2 of the WebAIM
checklist specifically calls this out.

00:00:52.315 --> 00:00:54.850
Stating, the keyboard focus
should never be locked or

00:00:54.850 --> 00:00:57.800
trapped at any one
particular page element.

00:00:57.800 --> 00:01:00.230
The user should be
able to navigate to and

00:01:00.230 --> 00:01:02.919
from all page elements
using just their keyboard.

00:01:04.040 --> 00:01:05.960
But strange as it may seem,

00:01:05.960 --> 00:01:09.330
there are times when this
behavior is actually desirable.

00:01:09.330 --> 00:01:12.010
Take for instance, the modal window.

00:01:12.010 --> 00:01:15.310
Now, normally when a modal
window is displaying on screen,

00:01:15.310 --> 00:01:18.760
we don't want the user to be able to
access any of the content behind it.

00:01:19.840 --> 00:01:24.090
Oftentimes developers will add
an overlay to cover the page, but

00:01:24.090 --> 00:01:27.420
that doesn't stop keyboard focus
from accidentally traveling

00:01:27.420 --> 00:01:28.780
outside of the model.

00:01:28.780 --> 00:01:30.780
Here, I'll tab through this dialog.

00:01:30.780 --> 00:01:33.719
So I'll press the Tab key,
which will focus the Decline button.

00:01:33.719 --> 00:01:36.130
I'll tab again,
which focuses the Accept button.

00:01:36.130 --> 00:01:37.905
And I tab one more time.

00:01:37.905 --> 00:01:41.840
No, it looks like our focus has
now moved behind the modal window.

00:01:43.030 --> 00:01:47.673
Now in instances like this what we
want is a temporary keyboard trap to

00:01:47.673 --> 00:01:52.254
ensure that we track focus within
the modal wall it's displaying.

00:01:52.254 --> 00:01:55.814
And then that we can restore it to the
previously focused item once the model

00:01:55.814 --> 00:01:57.210
is closed.

00:01:57.210 --> 00:01:59.400
This can be a tricky
technique to implement, and

00:01:59.400 --> 00:02:03.040
while there are proposed ideas on how
to make it easier for developers.

00:02:03.040 --> 00:02:06.130
For instance,
like this dialogue element here,

00:02:06.130 --> 00:02:10.407
they don't currently have
widespread browser support.

00:02:10.407 --> 00:02:12.920
Meaning, we're going to have
to roll up our sleeves and

00:02:12.920 --> 00:02:14.140
implement this ourselves.

00:02:15.760 --> 00:02:18.360
So here's an example of what
I'm going to try to build.

00:02:18.360 --> 00:02:21.560
I've got a little open modal
button up here in the top corner.

00:02:21.560 --> 00:02:24.570
And when I focus it and
hit Enter, I get a modal dialog.

00:02:24.570 --> 00:02:27.910
I can tab through it, and
the focus is trapped.

00:02:27.910 --> 00:02:29.920
I can hit that button and
it'll close it.

00:02:29.920 --> 00:02:33.670
I can open it again, and I can hit
Escape or click the background, and

00:02:33.670 --> 00:02:37.210
it'll close it and
restore focus to that button.

00:02:37.210 --> 00:02:41.571
So this is what I'm going to work
on right now in my code editor.

00:02:41.571 --> 00:02:44.925
So, switching to my HTML, I'll start
off by creating a button element,

00:02:44.925 --> 00:02:46.742
which I'm going to call modal-toggle.

00:02:46.742 --> 00:02:48.750
That's going to be that little
Open Modal button you saw up there

00:02:48.750 --> 00:02:49.268
in the corner.

00:02:49.268 --> 00:02:50.779
Then I'm going to have a div,

00:02:50.779 --> 00:02:53.879
which will hold all of
the content from my modal window.

00:02:53.879 --> 00:02:55.811
I'm going to give it that class modal.

00:02:55.811 --> 00:02:58.105
Inside of here I've got some text.

00:02:58.105 --> 00:03:02.120
And I've got some input fields for
the user to sign up for our newsletter.

00:03:02.120 --> 00:03:04.700
And lastly, we've got a little
sign up button down here,

00:03:04.700 --> 00:03:06.186
which we're going to call signup.

00:03:06.186 --> 00:03:08.730
Clicking this will close
our middle window.

00:03:08.730 --> 00:03:11.392
We've also got a modal overlay
down here at the bottom.

00:03:11.392 --> 00:03:14.240
That's going to be that
sort of gray background.

00:03:14.240 --> 00:03:16.724
Clicking that should
also close the modal.

00:03:16.724 --> 00:03:20.080
Okay, so that's our HTML markup,
now let's look at our JavaScript.

00:03:21.460 --> 00:03:24.640
Over in our JavaScript, I'm going to
start by creating this variable

00:03:24.640 --> 00:03:26.870
called focusedElementBeforeModal.

00:03:26.870 --> 00:03:30.590
This is where I'm going to store a
reference to the element that had focus

00:03:30.590 --> 00:03:32.280
before we open the modal.

00:03:32.280 --> 00:03:36.300
When we close the modal, we want to
restore focus back to this element.

00:03:37.320 --> 00:03:39.850
Then I'm going to use
document.querySelector to select both my

00:03:39.850 --> 00:03:42.760
modal and my overlay.

00:03:42.760 --> 00:03:47.170
I'm also going to use querySelector
to select my modalToggle button.

00:03:47.170 --> 00:03:50.464
And I'm going to add an eventListener
to modalToggle to listen for

00:03:50.464 --> 00:03:53.820
the click event, which is going
to run this openModal function.

00:03:55.060 --> 00:03:59.453
Inside of the openModal function we're
going to take that focusedElement

00:03:59.453 --> 00:04:04.120
BeforeModal reference and we're going
to grab the document.activeElement and

00:04:04.120 --> 00:04:05.430
store it there.

00:04:05.430 --> 00:04:08.266
We're going to listen for
keydown events.

00:04:08.266 --> 00:04:11.230
And call this trap keyboard function,
which I'll get to in a moment.

00:04:12.360 --> 00:04:15.330
We're also going to listen to
indicators for us to close our modal.

00:04:15.330 --> 00:04:20.209
So, if someone clicks on modalOverlay,
we're going to close the modal.

00:04:20.209 --> 00:04:24.398
And if someone clicks on the signupBtn
that's contained within the modal,

00:04:24.398 --> 00:04:26.372
we're also going to close the modal.

00:04:26.372 --> 00:04:29.310
And the next thing we're going to do,
is we're going to try and

00:04:29.310 --> 00:04:33.610
figure out all the focusable children
that are inside of the modal dialogue.

00:04:33.610 --> 00:04:36.760
To do this I'm going to
create this huge query string

00:04:36.760 --> 00:04:39.770
of potentially focusable elements.

00:04:39.770 --> 00:04:41.930
And I'm going to call
modal.querySelectorAll

00:04:41.930 --> 00:04:43.340
using that string.

00:04:43.340 --> 00:04:46.220
So this should give me a grouping
of everything within my modal

00:04:46.220 --> 00:04:49.730
window that could
possibly receive focus.

00:04:49.730 --> 00:04:50.610
And what I want to do,

00:04:50.610 --> 00:04:55.100
is I want to figure out what
the first element in that group is.

00:04:55.100 --> 00:04:58.040
And what the last element
in that group is.

00:04:58.040 --> 00:05:02.130
And the idea here is these can act
sort of like sentinel elements.

00:05:02.130 --> 00:05:05.814
So, if the user is tabbing
through the modal window and

00:05:05.814 --> 00:05:09.832
they reach the last focusable element or
the lastTabStop.

00:05:09.832 --> 00:05:12.770
And they press Tab again,
we're going to loop them around and

00:05:12.770 --> 00:05:15.040
put them on the firstTabStop.

00:05:15.040 --> 00:05:18.970
Similarly, if they're on the
firstTabStop, and they press Shift+Tab,

00:05:18.970 --> 00:05:22.990
we're going to loop them around and
put them on the lastTabStop.

00:05:22.990 --> 00:05:26.480
Next, we're just going to tell
the modal window to display itself.

00:05:26.480 --> 00:05:29.400
So we'll set its style to display block.

00:05:29.400 --> 00:05:32.670
And we'll also set
the modalOverlay to display block.

00:05:32.670 --> 00:05:36.160
And then we're going to focus that
firstTabStop child inside of it.

00:05:37.350 --> 00:05:41.616
Now from this point on, if the user
starts to press a key on their keyboard,

00:05:41.616 --> 00:05:44.690
we're going to check to see
if they've hit the Tab key.

00:05:44.690 --> 00:05:48.213
Now using a modifier key,
they could have hit Shift+Tab.

00:05:48.213 --> 00:05:51.182
And if they've hit Shift + Tab,
what we're going to do,

00:05:51.182 --> 00:05:55.890
is we're going to first figure out,
are they currently on the firstTabStop?

00:05:55.890 --> 00:06:00.540
If they are, let's wrap them around
to the lastTabStop and call focus.

00:06:00.540 --> 00:06:04.290
If they haven't hit a modifier key and
they've just hit Tab by itself,

00:06:04.290 --> 00:06:07.280
then we'll sa,
are they currently on the lastTabStop?

00:06:07.280 --> 00:06:12.030
If they are, we're going to wrap them
around to the firstTabStop and focus it.

00:06:12.030 --> 00:06:15.200
Now we're also going to add
a listener for the Escape key.

00:06:15.200 --> 00:06:18.270
So if they've hit the Escape key,
we're just going to go ahead and

00:06:18.270 --> 00:06:19.630
close the modal.

00:06:19.630 --> 00:06:22.254
The closeModal method is
pretty straightforward.

00:06:22.254 --> 00:06:24.619
We're going to tell
the model to display none.

00:06:24.619 --> 00:06:26.979
We'll tell the overlay to display none.

00:06:26.979 --> 00:06:30.368
And then we'll use that reference for
that first focused element.

00:06:30.368 --> 00:06:34.460
And we're going to call focus
on it again to restore focus.

00:06:34.460 --> 00:06:40.000
So in this case, it'll restore focus
back to that open model toggle button.

00:06:40.000 --> 00:06:43.080
Now I realize this is a ton of code.

00:06:43.080 --> 00:06:46.160
I sort of think of
the accessible model window as

00:06:46.160 --> 00:06:49.460
one of the boss battles
in accessibility.

00:06:49.460 --> 00:06:53.093
So, what I want you to do in
the next lesson is use some of this

00:06:53.093 --> 00:06:55.797
code to implement
a modal window yourself.

00:06:55.797 --> 00:06:58.640
And that way you'll have a deeper
understanding of how all of this works.

