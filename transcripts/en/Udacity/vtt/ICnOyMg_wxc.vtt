WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
There are many popular hash algorithms, and of course, you can write your own,

00:00:04.000 --> 00:00:05.000
but you should never write your own.

00:00:05.000 --> 00:00:10.000
The first lesson you'll learn in CS387 is don't write your own,

00:00:10.000 --> 00:00:11.000
at least for our purposes.

00:00:11.000 --> 00:00:16.000
Of course, if you're building a hash table, you can do whatever you want,

00:00:16.000 --> 00:00:19.000
but if you're going to use it for security purposes, don't write your own.

00:00:19.000 --> 00:00:23.000
Then if you want to learn how to make a hash table, knock yourself out.

00:00:23.000 --> 00:00:26.000
Of course, somebody has probably done it better, but hey, you never know.

00:00:26.000 --> 00:00:30.000
So anyways, some popular algorithms are CRC32,

00:00:30.000 --> 00:00:33.000
which is basically designed for checksomes.

00:00:33.000 --> 00:00:37.000
If you were to send somebody a bunch of data, like a big file,

00:00:37.000 --> 00:00:43.000
you might also include a CRC of that file, and that is basically just a simple way

00:00:43.000 --> 00:00:46.000
to verify that you've got the entire file, and it's not corrupted

00:00:46.000 --> 00:00:52.000
because you can send a hash easier than you can send a whole file.

00:00:52.000 --> 00:00:54.000
You can copy and paste a hash. It's just a few bits.

00:00:54.000 --> 00:00:59.000
You can verify that the file you received has the same CRC as the file they sent.

00:00:59.000 --> 00:01:02.000
Then you don't have to verify bit for bit that you have the correct file.

00:01:02.000 --> 00:01:07.000
So CRC is really fast. Its really only purpose is for doing checksomes.

00:01:07.000 --> 00:01:09.000
Basically, creating a hash of a large file.

00:01:09.000 --> 00:01:12.000
It's security properties are not very good.

00:01:12.000 --> 00:01:15.000
It's very easy to find what we call a collision,

00:01:15.000 --> 00:01:19.000
which is when 2 things hash to the same value,

00:01:19.000 --> 00:01:22.000
which is the whole point of a hash is that we can get a different value for almost

00:01:22.000 --> 00:01:24.000
anything that we're going to hash.

00:01:24.000 --> 00:01:32.000
Now obviously, if the size of the input is substantially greater than the size of the output,

00:01:32.000 --> 00:01:34.000
yes, there are going to be collisions.

00:01:34.000 --> 00:01:40.000
The whole point is that it's hard to find them, and with CRC32, it's very easy to find them.

00:01:40.000 --> 00:01:42.000
The reason you'd use CRC is because you don't care about collisions,

00:01:42.000 --> 00:01:46.000
you just care about speed, and CRC is very fast.

00:01:46.000 --> 00:01:49.000
The most popular hashing algorithm out there is still md5,

00:01:49.000 --> 00:01:57.000
which used to be used because it was both fast-ish--not as fast as CRC32,

00:01:57.000 --> 00:02:03.000
but pretty fast and people thought it was pretty secure, except it's not.

00:02:03.000 --> 00:02:09.000
Md5 has been broken repeatedly over the last few years, and it's very easy to find

00:02:09.000 --> 00:02:11.000
md5 collisions.

00:02:11.000 --> 00:02:18.000
Given an x that hashes into a y, it's very easy given this y to find another x

00:02:18.000 --> 00:02:23.000
that hashes into it, which is, as you'll see, a big problem.

00:02:23.000 --> 00:02:27.000
So we won't be using md5 for much at all in this class.

00:02:27.000 --> 00:02:29.000
Well, it has its use cases, right?

00:02:29.000 --> 00:02:32.000
If you have a limited input, it's hard to find a collision.

00:02:32.000 --> 00:02:38.000
There's certain a class of attacks, making x longer and longer and longer,

00:02:38.000 --> 00:02:40.000
that's a really easy way to find a collision in md5.

00:02:40.000 --> 00:02:45.000
But if you limit the length of x, then you don't have to worry too much about that vulnerability.

00:02:45.000 --> 00:02:47.000
So anyway, just keep that in mind.

00:02:47.000 --> 00:02:50.000
When you really care about the data, don't use md5.

00:02:50.000 --> 00:02:53.000
The second most popular hash is called sha1.

00:02:53.000 --> 00:03:00.000
This is not as fast, but it's fairly secure, just now are we starting to hear demonstrations

00:03:00.000 --> 00:03:02.000
of people finding collisions in sha1.

00:03:02.000 --> 00:03:07.000
It's still pretty good. It's actually the second most widely used hash behind md5.

00:03:07.000 --> 00:03:11.000
But for things going forward, you should really use something like for example, sha256,

00:03:11.000 --> 00:03:18.000
which is as you might guess just kind of a bigger version of sha1.

00:03:18.000 --> 00:03:22.000
It's actually not, The algorithm, I believe, is changed as well.

00:03:22.000 --> 00:03:26.000
So let's say this one is secure-ish, and this one is pretty good.

00:03:26.000 --> 00:03:28.000
It's going to take some time.

00:03:28.000 --> 00:03:30.000
Now, of course, the trade off is speed.

00:03:30.000 --> 00:03:34.000
So the better the hashing algorithm right now, the slower it is.

00:03:34.000 --> 00:03:38.000
So these are, basically, organized in cost and in security,

00:03:38.000 --> 00:03:44.000
so no big surprise there that there's an inverse correlation between cost and security.

00:03:44.000 --> 00:03:45.000
But that's the name of the game.

00:03:45.000 --> 00:03:47.000
So depending on what problem you're working on,

00:03:47.000 --> 00:03:50.000
you may need to actually make a decision.

00:03:50.000 --> 00:03:54.000
But for our purposes, we're not going to get a whole lot of traffic.

00:03:54.000 --> 00:03:56.000
We'll probably use sha256 for most things.

00:03:56.000 --> 00:04:00.000
So let me show you how you would use these.

