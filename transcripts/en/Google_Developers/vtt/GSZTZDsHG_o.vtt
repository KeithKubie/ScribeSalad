WEBVTT
Kind: captions
Language: en

00:00:20.270 --> 00:00:20.940
Hi everybody.

00:00:20.940 --> 00:00:24.020
My name's Eric Leichtenschlag,
and I'm here with you today to

00:00:24.020 --> 00:00:25.850
talk about AdMob getting
started on Android.

00:00:30.720 --> 00:00:33.400
So first we're going to talk
about the prerequisites, run

00:00:33.400 --> 00:00:37.510
through a fundamentals example,
talk about how we can

00:00:37.510 --> 00:00:41.450
implement AdMob through XML,
then discuss the different ad

00:00:41.450 --> 00:00:45.250
formats available in the AdMob
SDK, talk about the different

00:00:45.250 --> 00:00:48.140
ad request options you have
when making a request,

00:00:48.140 --> 00:00:50.820
listening for ad events so you
know when ads are being

00:00:50.820 --> 00:00:53.610
presented and clicked in your
mobile applications, as well

00:00:53.610 --> 00:00:56.470
as discuss mediation
and custom events.

00:00:56.470 --> 00:00:59.520
So let's get started.

00:00:59.520 --> 00:01:01.790
Before running through this
code lab, there are some

00:01:01.790 --> 00:01:02.770
prerequisites.

00:01:02.770 --> 00:01:05.390
You should have the Android SDK
installed with the latest

00:01:05.390 --> 00:01:09.510
system image, 4.2.0 from
the SDK manager.

00:01:09.510 --> 00:01:12.140
For development environment
this code lab will use

00:01:12.140 --> 00:01:15.960
Eclipse, but you can also use
IntelliJ if you prefer.

00:01:15.960 --> 00:01:18.560
You're going to need to download
the AdMob SDK sample

00:01:18.560 --> 00:01:21.050
project from our
google-mobile-dev code

00:01:21.050 --> 00:01:25.390
project, as well as the AdMob
SDK from our docs.

00:01:25.390 --> 00:01:28.300
And it's great if you've read
the Android AdMob docs.

00:01:28.300 --> 00:01:30.760
If not, we'll go through
it in this code lab.

00:01:30.760 --> 00:01:32.960
And, also, you can optionally
sign up and create an AdMob

00:01:32.960 --> 00:01:34.170
publisher account.

00:01:34.170 --> 00:01:37.885
If you don't do that, then we
will provide sample IDs for

00:01:37.885 --> 00:01:39.135
you to use when testing.

00:01:42.330 --> 00:01:43.470
So now we're going to start
with running the

00:01:43.470 --> 00:01:45.290
fundamentals example.

00:01:45.290 --> 00:01:47.090
The first thing we're going
to do is import our

00:01:47.090 --> 00:01:49.470
project into Eclipse.

00:01:49.470 --> 00:01:51.580
Import is an Android project
from existing code.

00:01:51.580 --> 00:01:54.550
You should have downloaded
this already.

00:01:54.550 --> 00:01:57.720
And then we're going to add
the Google AdMob SDK jar

00:01:57.720 --> 00:01:59.290
because it's not included
in the sample project.

00:02:02.600 --> 00:02:04.940
We're going to set our
project.properties file to

00:02:04.940 --> 00:02:07.410
point to the latest Android
versions, so we compile

00:02:07.410 --> 00:02:08.660
against the latest
Android version.

00:02:13.030 --> 00:02:17.106
We're going to replace the AD
UNIT ID with a sample ad unit

00:02:17.106 --> 00:02:21.230
ID or an ad unit ID that you
had previously created when

00:02:21.230 --> 00:02:23.430
setting up your AdMob
publisher account.

00:02:23.430 --> 00:02:25.720
And these four steps will get
us to be able to run the

00:02:25.720 --> 00:02:26.760
fundamentals example.

00:02:26.760 --> 00:02:31.590
So I'm going to switch over to
our Eclipse and try to follow

00:02:31.590 --> 00:02:34.500
these steps to run
the project.

00:02:34.500 --> 00:02:36.490
So the first thing we're going
to want to do is go to File,

00:02:36.490 --> 00:02:43.470
New, Project, Android Project
from Existing Code and Browse

00:02:43.470 --> 00:02:45.820
and Find the code lab
that we have.

00:02:45.820 --> 00:02:48.070
I have it saved on
my desktop here.

00:02:48.070 --> 00:02:49.320
And import it.

00:02:51.420 --> 00:02:53.330
So there are couple compilers.

00:02:53.330 --> 00:02:56.390
One of them is that we don't
have the SDK installed, so

00:02:56.390 --> 00:03:00.640
we're going to create a new
folder and label it lbs.

00:03:03.890 --> 00:03:06.650
And then we're going to go
grab the AdMob SDK jar.

00:03:06.650 --> 00:03:09.480
The latest version right
now is 6.2.1.

00:03:09.480 --> 00:03:11.520
I have this on my desktop, and
I'm just going to add it right

00:03:11.520 --> 00:03:13.660
into the project, into lbs.

00:03:13.660 --> 00:03:16.550
By adding the SDK into lbs,
it'll automatically get

00:03:16.550 --> 00:03:21.090
bundled up when I
run my project.

00:03:21.090 --> 00:03:23.560
So that should resolve most
of the compile errors.

00:03:23.560 --> 00:03:27.535
We're also going to want to fix
up project.properties to

00:03:27.535 --> 00:03:29.210
point to Android 17.

00:03:29.210 --> 00:03:32.770
That'll change this Android
4.0.3 to compile against

00:03:32.770 --> 00:03:34.020
Android 4.2.

00:03:36.550 --> 00:03:38.810
And finally, we're going
to fix the ad unit ID.

00:03:38.810 --> 00:03:46.460
So let's just go in and copy
the sample ad unit ID here,

00:03:46.460 --> 00:03:51.880
stick it in as a string
to our project, and we

00:03:51.880 --> 00:03:53.060
should be good to go.

00:03:53.060 --> 00:03:55.290
So let's try running this
project and see what we get.

00:03:58.540 --> 00:04:00.560
I'm going to run it on a Galaxy

00:04:00.560 --> 00:04:01.840
Nexus Jelly Bean emulator.

00:04:14.050 --> 00:04:16.190
I believe the simulators not
working so I'm going to quit

00:04:16.190 --> 00:04:20.870
this one, and we're going
to try to run it

00:04:20.870 --> 00:04:22.120
on this other emulator.

00:04:29.040 --> 00:04:30.860
So the app should
be starting up.

00:04:30.860 --> 00:04:33.530
Just a basic project, Hello
World, and we should see a

00:04:33.530 --> 00:04:35.410
banner coming in here,
and yes we do.

00:04:35.410 --> 00:04:37.990
So this is the AdMob test ad.

00:04:37.990 --> 00:04:39.490
So that's all it really
takes to get started

00:04:39.490 --> 00:04:41.390
with the sample project.

00:04:41.390 --> 00:04:42.880
Now let's go back and
see kind of what we

00:04:42.880 --> 00:04:44.130
did here to get started.

00:04:46.870 --> 00:04:50.330
So this is what the sample
project should look like.

00:04:50.330 --> 00:04:53.760
So there are two components here
that are basic, that are

00:04:53.760 --> 00:04:56.085
different from the standard
Android project, if you were

00:04:56.085 --> 00:04:58.730
just to create a basic
project yourself.

00:04:58.730 --> 00:05:00.480
Part of this is altering
the manifest.

00:05:00.480 --> 00:05:02.300
The important things to
note here are the

00:05:02.300 --> 00:05:06.680
com.Google.ads.AdActivity
required for the AdMob ad to

00:05:06.680 --> 00:05:10.600
be shown, as well as with the
proper config changes

00:05:10.600 --> 00:05:12.230
displayed here.

00:05:12.230 --> 00:05:16.410
AdMob also requires two
permissions, the internet

00:05:16.410 --> 00:05:19.070
permission here, of course,
to get the ads, as well as

00:05:19.070 --> 00:05:21.589
accessing the network state to
see if internet's enabled.

00:05:25.720 --> 00:05:28.830
In the sample activity there's
only four lines needed to

00:05:28.830 --> 00:05:30.650
create this banner.

00:05:30.650 --> 00:05:33.140
All we're doing here is
creating an ad view.

00:05:33.140 --> 00:05:34.920
The ad view is, Extends
From View.

00:05:34.920 --> 00:05:37.190
It's just an ad object view.

00:05:37.190 --> 00:05:41.610
We're passing in the activity
context, an ad size, in this

00:05:41.610 --> 00:05:44.120
case, we're doing a 320
by 50 banner, and our

00:05:44.120 --> 00:05:46.910
sample ad unit ID.

00:05:46.910 --> 00:05:49.640
The next line of code shows us
grabbing the linear layout

00:05:49.640 --> 00:05:51.820
from our sample XML file.

00:05:51.820 --> 00:05:56.970
It's assuming we have a linear
layout in XML with ID linear

00:05:56.970 --> 00:05:59.540
layout here, and we're just
going to ad the ad view to the

00:05:59.540 --> 00:06:01.580
linear layout.

00:06:01.580 --> 00:06:03.150
Then we're going to create
an ad request,

00:06:03.150 --> 00:06:05.540
just a new ad request.

00:06:05.540 --> 00:06:08.020
Here, below this, we're
adding a test device.

00:06:08.020 --> 00:06:10.860
This is saying hey, give me
test ads on all emulators.

00:06:10.860 --> 00:06:14.070
So that's why we see the test
add on the emulator here,

00:06:14.070 --> 00:06:17.160
because we're running emulator
not a device.

00:06:17.160 --> 00:06:18.800
And then we're just going
to load an ad

00:06:18.800 --> 00:06:20.990
with this ad request.

00:06:20.990 --> 00:06:23.670
So that's all it takes to get
started, and you can see that

00:06:23.670 --> 00:06:25.710
we have the ad here.

00:06:31.190 --> 00:06:34.440
So there's two different ways
to implement AdMob.

00:06:34.440 --> 00:06:37.960
I showed you how to
set it up in code.

00:06:37.960 --> 00:06:38.940
Now we're going to walk
through how to

00:06:38.940 --> 00:06:41.560
set it up in XML.

00:06:41.560 --> 00:06:45.290
So you can actually ad a
com.Google.ads.AdView in XML

00:06:45.290 --> 00:06:47.940
without any Java code.

00:06:47.940 --> 00:06:52.250
In your XML, just specify the
com.Google.ads.AdView, provide

00:06:52.250 --> 00:06:54.320
the ad's name space.

00:06:54.320 --> 00:06:57.880
And the important properties
here are the ad unit ID, as

00:06:57.880 --> 00:07:00.220
well as the ad size.

00:07:00.220 --> 00:07:03.050
Optionally, we have
the test devices.

00:07:03.050 --> 00:07:07.150
Here I am specifying that
a test emulator again.

00:07:07.150 --> 00:07:11.520
You can also specify an ID, test
device ID, to get test

00:07:11.520 --> 00:07:12.670
ads on your device.

00:07:12.670 --> 00:07:14.000
We'll talk about this
more later.

00:07:14.000 --> 00:07:17.960
This is just a dummy
device ID.

00:07:17.960 --> 00:07:20.960
Test ads will be white listed
on your device only.

00:07:20.960 --> 00:07:24.280
So only the specific device that
you pass the ID for will

00:07:24.280 --> 00:07:26.070
get test ads.

00:07:26.070 --> 00:07:29.680
Finally, this last option here
says load and ad request in

00:07:29.680 --> 00:07:31.350
the on create method.

00:07:31.350 --> 00:07:34.170
This prevents you from having
to grab the AdView in code

00:07:34.170 --> 00:07:37.120
from the XML and call load
ad with any requests.

00:07:37.120 --> 00:07:40.080
It will do it for you.

00:07:40.080 --> 00:07:43.640
So let's just copy this XML
implementation and try it out

00:07:43.640 --> 00:07:45.840
in our app.

00:07:45.840 --> 00:07:48.040
The first thing I'm going to do
is comment out all the code

00:07:48.040 --> 00:07:50.710
as a proof of concept to show
that no code is necessary.

00:07:56.710 --> 00:07:59.470
I'm going to hop into Res,
Layout, main.XML.

00:08:05.020 --> 00:08:07.790
Looks like we already have a
sample implementation here.

00:08:07.790 --> 00:08:09.040
I'll just comment this out.

00:08:11.730 --> 00:08:13.070
And we're going to run
our project again.

00:08:20.080 --> 00:08:21.860
So we're waiting for the project
to be uploaded to the

00:08:21.860 --> 00:08:28.390
emulator, and we loaded it up
again, we get a Hello World,

00:08:28.390 --> 00:08:30.590
and we get our test ad.

00:08:30.590 --> 00:08:32.780
The difference here is that
this was actually a smart

00:08:32.780 --> 00:08:34.350
banner test ad.

00:08:34.350 --> 00:08:36.409
And we'll kind of talk about
this more later.

00:08:36.409 --> 00:08:38.450
There are different
ad formats.

00:08:38.450 --> 00:08:40.334
This one here is shown
as a smart banner.

00:08:48.240 --> 00:08:50.880
So now that I just showed you
about smart banner, let's talk

00:08:50.880 --> 00:08:52.850
about some of the other
ad formats.

00:08:52.850 --> 00:08:54.650
From the code we saw the
standard banner.

00:08:54.650 --> 00:08:57.770
This is available on
phones and tablets.

00:08:57.770 --> 00:08:59.840
The other format that's
also available on

00:08:59.840 --> 00:09:01.120
phones is a smart banner.

00:09:01.120 --> 00:09:02.530
The smart banner actually
takes up the full

00:09:02.530 --> 00:09:04.040
width of the screen.

00:09:04.040 --> 00:09:07.320
That's why you actually
saw the test ad here.

00:09:07.320 --> 00:09:09.230
It took up the entire width of
the screen, whereas the test

00:09:09.230 --> 00:09:13.700
ad we saw earlier in the program
was only 320 by 50,

00:09:13.700 --> 00:09:17.150
did not take up the
full width.

00:09:17.150 --> 00:09:19.690
Some of the other tablet formats
that we offer are 300

00:09:19.690 --> 00:09:27.180
by 250 rectangle, 480 by 60
banner, as well as a 728 by 90

00:09:27.180 --> 00:09:29.030
leader board.

00:09:29.030 --> 00:09:31.950
So the smart banner behaves
with full width, and its

00:09:31.950 --> 00:09:35.090
height is dependent on the
height of the device.

00:09:35.090 --> 00:09:38.720
So, generally, for phones in
portrait mode, the height will

00:09:38.720 --> 00:09:42.540
be 56 pixels, and in landscape
it will be 32.

00:09:42.540 --> 00:09:45.900
And for tablets it'll be
both 90 pixels in both

00:09:45.900 --> 00:09:47.150
portrait and landscape.

00:09:49.140 --> 00:09:51.810
So these are different formats
that AdMob offers.

00:09:51.810 --> 00:09:54.840
Let's talk about some of the
different ad request options

00:09:54.840 --> 00:09:58.300
in the ad request class.

00:09:58.300 --> 00:10:00.640
So we talked about test
mode already.

00:10:00.640 --> 00:10:04.450
AdRequest.addTestDevice, with
the test emulator gets you

00:10:04.450 --> 00:10:06.770
test ads on all emulators.

00:10:06.770 --> 00:10:09.770
You can also call addTestDevice
with specific

00:10:09.770 --> 00:10:11.810
device IDs.

00:10:11.810 --> 00:10:15.800
AdMob will hash your
device ID and print

00:10:15.800 --> 00:10:17.070
it in log cat output.

00:10:17.070 --> 00:10:20.990
So if you want to get a test ad
on your test Galaxy Nexus

00:10:20.990 --> 00:10:24.820
device, you would run
the app without any

00:10:24.820 --> 00:10:25.810
test device in there.

00:10:25.810 --> 00:10:29.390
The logs would say this message,
to get test ads on

00:10:29.390 --> 00:10:32.090
this device call
AdRequest.addTestDevice with

00:10:32.090 --> 00:10:33.510
some hashed ID.

00:10:33.510 --> 00:10:36.460
If you provide this hashed ID in
your code, you'll then get

00:10:36.460 --> 00:10:38.340
test ads on your device.

00:10:38.340 --> 00:10:42.330
As I mentioned before, you wait
list this specific device

00:10:42.330 --> 00:10:43.870
for test ads.

00:10:43.870 --> 00:10:46.250
All other devices will
get live ads.

00:10:46.250 --> 00:10:49.590
So it is safe to release your
app with this in here.

00:10:49.590 --> 00:10:52.732
We prevent you from shooting
yourself in the foot.

00:10:56.180 --> 00:10:59.130
There are other targeting
options that AdMob provides.

00:10:59.130 --> 00:11:03.150
You have the ability to set the
gender on the ad request.

00:11:03.150 --> 00:11:05.850
You can set location
using a suitable

00:11:05.850 --> 00:11:08.620
location strategy in Android.

00:11:08.620 --> 00:11:11.880
AdMob recommends that you don't
provide location unless

00:11:11.880 --> 00:11:13.230
your app already uses it.

00:11:13.230 --> 00:11:17.420
Maybe as a maps application,
for example.

00:11:17.420 --> 00:11:19.710
Providing location requires
that you add additional

00:11:19.710 --> 00:11:22.940
permissions in your app, and if
those are required by your

00:11:22.940 --> 00:11:25.730
app alone, then it's
not worth it to add

00:11:25.730 --> 00:11:28.090
it in the ad request.

00:11:28.090 --> 00:11:31.955
You can also set the users
birthday if you have it on the

00:11:31.955 --> 00:11:35.790
ad request, as well as set the
background color and text

00:11:35.790 --> 00:11:37.330
colors on the ads.

00:11:37.330 --> 00:11:41.540
And this is targeting option
I'll walk through here.

00:11:41.540 --> 00:11:44.840
So we're going to try to change
the background color to

00:11:44.840 --> 00:11:47.770
blue, and the text color to
yellow by creating a new

00:11:47.770 --> 00:11:53.100
AdMobAdapterExtras and adding
these extras to our class.

00:11:53.100 --> 00:11:55.960
So this actually needs to be
done in codes, so I'm going to

00:11:55.960 --> 00:11:57.550
comment out the XML notation.

00:12:03.050 --> 00:12:04.300
We'll hop back to our code.

00:12:14.130 --> 00:12:18.720
And on the ad request I'm going
to set network extras

00:12:18.720 --> 00:12:22.240
with the new AdMobAdapterExtras
and set the

00:12:22.240 --> 00:12:25.464
color background to blue, and
the color text to yellow.

00:12:29.730 --> 00:12:32.740
I'm also going to change the
ad size to smart banner

00:12:32.740 --> 00:12:34.510
because this will produce
a text ad.

00:12:34.510 --> 00:12:36.490
The colors only work on
text ads, image ads

00:12:36.490 --> 00:12:37.870
will remain the same.

00:12:37.870 --> 00:12:41.010
So since I'm expecting the smart
banner to be a text ad,

00:12:41.010 --> 00:12:44.260
we can see the different
colors.

00:12:44.260 --> 00:12:47.190
So we're loading the new version
of the app to the

00:12:47.190 --> 00:12:52.380
Galaxy Nexus emulator, and we
get our Hello World again, and

00:12:52.380 --> 00:12:54.260
we get our full width test ad.

00:12:54.260 --> 00:12:55.950
And, as you can see,
it's got a blue

00:12:55.950 --> 00:12:58.930
background and yellow text.

00:12:58.930 --> 00:13:02.060
The ability to do this lets you
customize the ad so that

00:13:02.060 --> 00:13:03.250
it looks better with your app.

00:13:03.250 --> 00:13:05.890
If your app has purple
background and yellow text,

00:13:05.890 --> 00:13:08.200
for example, you can make your
ad with a purple background

00:13:08.200 --> 00:13:10.780
and yellow text and it'll
seem more integrated.

00:13:10.780 --> 00:13:12.625
And, overall, it's just a
better user experience.

00:13:17.410 --> 00:13:20.530
So that's it for targeting
on the ad request.

00:13:20.530 --> 00:13:22.500
Let's talk about some of the
ad events which are very

00:13:22.500 --> 00:13:26.250
important when implementing
AdMob.

00:13:26.250 --> 00:13:30.440
The AdListener class in the
AdMob SDK has five events.

00:13:30.440 --> 00:13:34.710
OnReceiveAd callback let's you
know when AdMob has received

00:13:34.710 --> 00:13:37.620
an ad and is about to present
it on the screen.

00:13:37.620 --> 00:13:40.730
You can perform any necessary
logic you need to do in your

00:13:40.730 --> 00:13:43.630
app when this happens.

00:13:43.630 --> 00:13:45.750
AdMob also has
onFailedToReceiveAd.

00:13:45.750 --> 00:13:47.716
This happens when AdMob
can't receive an

00:13:47.716 --> 00:13:49.420
ad for your ad request.

00:13:49.420 --> 00:13:51.400
There are many reasons that
this could happen.

00:13:51.400 --> 00:13:53.550
One could be no internet.

00:13:53.550 --> 00:13:55.990
The phone that you're running
on doesn't have internet

00:13:55.990 --> 00:13:58.350
access, and so we
can fetch an ad.

00:13:58.350 --> 00:14:02.090
If you put in your publisher ID
incorrectly you might have

00:14:02.090 --> 00:14:03.910
an invalid ad request.

00:14:03.910 --> 00:14:06.100
Sometimes AdMob just doesn't
have enough inventory and

00:14:06.100 --> 00:14:07.520
can't fill the ad request.

00:14:07.520 --> 00:14:10.560
In this case, you will get
the onFailedToReceiveAd

00:14:10.560 --> 00:14:12.940
notification.

00:14:12.940 --> 00:14:14.860
Just as important are
onPresentScreen and

00:14:14.860 --> 00:14:16.430
onDismissScreen.

00:14:16.430 --> 00:14:20.670
OnPresentScreen will get called
when the user clicks on

00:14:20.670 --> 00:14:24.690
your ad and is about to exit
your app and go to some

00:14:24.690 --> 00:14:27.820
overlay or the Google
Play Store.

00:14:27.820 --> 00:14:30.230
If you have a game, for example,
and you might want to

00:14:30.230 --> 00:14:33.210
pause the game when the user
clicks on an ad, right before

00:14:33.210 --> 00:14:36.050
we leave your app we'll let
you execute anything in

00:14:36.050 --> 00:14:39.660
onPresentScreen to take
care of this.

00:14:39.660 --> 00:14:42.890
Similarly, onDismissScreen is
invoked when the user comes

00:14:42.890 --> 00:14:45.090
back to your app after
clicking on the ad.

00:14:45.090 --> 00:14:47.250
So maybe you can resume the
game or put up some menu

00:14:47.250 --> 00:14:50.820
saying hey, would you like to
continue the game, when coming

00:14:50.820 --> 00:14:55.010
back to your app from
an ad request click.

00:14:55.010 --> 00:14:57.320
Finally, onLeaveApplication
is very similar to

00:14:57.320 --> 00:14:58.400
onPresentScreen.

00:14:58.400 --> 00:15:01.240
It just means you're actually
leaving the application versus

00:15:01.240 --> 00:15:02.490
presenting an overlay.

00:15:02.490 --> 00:15:05.250
So if you were just presenting
an overlay, if the ad

00:15:05.250 --> 00:15:08.870
presented an overlay on top of
the app, then you would see

00:15:08.870 --> 00:15:12.100
onPresentScreen being invoked,
and onLeaveApplication would

00:15:12.100 --> 00:15:13.390
not be invoked.

00:15:13.390 --> 00:15:15.910
So they have pretty similar
functionalities.

00:15:15.910 --> 00:15:19.360
OnPresentScreen should
he called every time

00:15:19.360 --> 00:15:21.890
onLeaveApplication is called,
and is probably the safer bet

00:15:21.890 --> 00:15:23.670
if you're trying to
do some pause

00:15:23.670 --> 00:15:24.920
functionality or something.

00:15:27.230 --> 00:15:29.230
So this is what is contained
in the AdListener.

00:15:29.230 --> 00:15:30.910
Let's try to implement
this AdListener

00:15:30.910 --> 00:15:33.160
interface in our app.

00:15:33.160 --> 00:15:34.860
There are two things
to do here.

00:15:34.860 --> 00:15:38.300
First, we're going to have our
banner sample activity

00:15:38.300 --> 00:15:42.350
implement the AdListener, and
implement those five methods.

00:15:42.350 --> 00:15:44.940
And the next important piece
is to tell the AdView to

00:15:44.940 --> 00:15:46.730
listen to these events.

00:15:46.730 --> 00:15:49.190
So the AdView that we created
in code, we're going to tell

00:15:49.190 --> 00:15:53.140
it to listen to the AdListener
from the banner sample class.

00:15:56.850 --> 00:16:00.190
I have a sample interface
implementation here, so I'm

00:16:00.190 --> 00:16:03.430
going to copy this
into the app.

00:16:03.430 --> 00:16:06.780
It just presents toast messages,
so we can see little

00:16:06.780 --> 00:16:08.030
pop-ups in the app.

00:16:11.970 --> 00:16:15.230
So the first thing I'm going
to do here is have my class

00:16:15.230 --> 00:16:17.010
implement AdListener.

00:16:25.660 --> 00:16:31.740
And we're going to want to, on
our AdView, set AdListener

00:16:31.740 --> 00:16:32.990
with this class.

00:16:41.760 --> 00:16:47.802
Looks like we didn't get all
of our methods here so I'm

00:16:47.802 --> 00:16:49.052
going to recopy them.

00:17:10.119 --> 00:17:11.790
I seem to have a quick compile
error that I'm

00:17:11.790 --> 00:17:13.040
going to fix here.

00:17:26.869 --> 00:17:31.630
All right, it seems like copying
from the presentation

00:17:31.630 --> 00:17:32.880
is causing some issues.

00:17:35.110 --> 00:17:36.700
So I'm going to try to
roll my own here.

00:17:41.290 --> 00:17:45.090
We'll just copy one
toast message.

00:17:51.610 --> 00:17:52.860
We'll make this onDismissScreen.

00:18:06.688 --> 00:18:27.460
OnFailedtoReceiveAd,
onLeaveApplication,

00:18:27.460 --> 00:18:29.080
onPresentScreen and finally,
onReceiveAd.

00:18:41.440 --> 00:18:44.850
So let's run our app here.

00:18:44.850 --> 00:18:48.724
And we should see these toast
messages as the ads come in.

00:18:54.420 --> 00:18:56.900
So when we receive our ad, we'll
get this onReceivedAd

00:18:56.900 --> 00:18:59.430
toast message.

00:18:59.430 --> 00:19:03.400
Let's try clicking the ad this
time, and we should see

00:19:03.400 --> 00:19:04.650
onPresentScreen.

00:19:07.190 --> 00:19:09.230
So it looks like it's presenting
an overlay here.

00:19:09.230 --> 00:19:11.940
I take that back, we get
onLeaveApplication, which

00:19:11.940 --> 00:19:16.420
means it's actually going to
the external web browser.

00:19:16.420 --> 00:19:20.260
And as we come back to the
app we should get an

00:19:20.260 --> 00:19:23.030
onDismissScreen call back.

00:19:23.030 --> 00:19:25.000
So if I had failed to receive
an ad I would get this

00:19:25.000 --> 00:19:27.040
onFailedtoReceive call back.

00:19:27.040 --> 00:19:31.030
So you'll want to override these
methods and implement

00:19:31.030 --> 00:19:33.020
them as your app sees fit.

00:19:39.260 --> 00:19:40.270
The final thing we're
going to talk about

00:19:40.270 --> 00:19:42.580
today is AdMob Mediation.

00:19:42.580 --> 00:19:45.820
AdMob Mediation is a feature
that was added a few versions

00:19:45.820 --> 00:19:47.070
ago on our SDK.

00:19:47.070 --> 00:19:51.030
It allows you to request ads
from other ad networks using

00:19:51.030 --> 00:19:53.090
the AdMob SDK interface.

00:19:53.090 --> 00:19:56.400
So if you had already signed up
on AdMob.com and created a

00:19:56.400 --> 00:19:59.030
publisher account, you could
also create a mediation

00:19:59.030 --> 00:20:00.280
placement on
mediation.admob.com.

00:20:03.780 --> 00:20:06.930
Here, when you create a
mediation placement, you can

00:20:06.930 --> 00:20:10.310
specify which ad networks you
want to mediate with.

00:20:10.310 --> 00:20:12.760
In this case, we have
the AdMob network

00:20:12.760 --> 00:20:14.810
and AdMob House Ads.

00:20:14.810 --> 00:20:17.700
Both set up to serve
50% of the time.

00:20:17.700 --> 00:20:20.780
So 50% of the time I'll get an
AdMob ad, 50% of the time I'll

00:20:20.780 --> 00:20:22.870
get and AdMob house ad.

00:20:22.870 --> 00:20:25.030
And there's actually no
additional code required to

00:20:25.030 --> 00:20:26.140
set up mediation.

00:20:26.140 --> 00:20:29.580
All that you do is you replace
your AdMob publisher ID with

00:20:29.580 --> 00:20:30.868
the mediation placement ID.

00:20:33.680 --> 00:20:36.310
So I already have this ID
set up to serve 50%

00:20:36.310 --> 00:20:38.680
AdMob, 50% house ads.

00:20:38.680 --> 00:20:41.210
Let's try putting that in.

00:20:41.210 --> 00:20:43.870
We're going to go back to a
banner request because we set

00:20:43.870 --> 00:20:45.380
up the mediation placement
to serve banners.

00:20:48.550 --> 00:20:49.800
And let's try running
the app again.

00:20:58.880 --> 00:20:59.730
So we're running the app.

00:20:59.730 --> 00:21:02.650
We get our Hello World.

00:21:02.650 --> 00:21:05.830
It's making mediation requests,
coming back with a

00:21:05.830 --> 00:21:09.530
config, and it looks like it
chose AdMob this time.

00:21:09.530 --> 00:21:14.970
And it displayed an AdMob
network ad, but it's a test ad

00:21:14.970 --> 00:21:18.960
since we specified
testing devices.

00:21:18.960 --> 00:21:21.820
I'll leave this as an exercise
to you all to set up your

00:21:21.820 --> 00:21:24.540
mediation placement and see if
you can get house ads using

00:21:24.540 --> 00:21:25.790
this method.

00:21:29.610 --> 00:21:32.510
I should also note that with
mediation you can set up other

00:21:32.510 --> 00:21:34.430
ad networks.

00:21:34.430 --> 00:21:36.980
All you need to do is include
the other ad network's SDK and

00:21:36.980 --> 00:21:39.030
adapter code.

00:21:39.030 --> 00:21:42.830
Libraries into your app and
set them up to serve a

00:21:42.830 --> 00:21:46.420
percentage of the time using
your mediation placement, and

00:21:46.420 --> 00:21:49.060
you should be able to see ads
from other networks as well

00:21:49.060 --> 00:21:51.060
without having to integrate
with their APIs.

00:21:54.470 --> 00:21:57.380
Another powerful feature
is custom events.

00:21:57.380 --> 00:22:00.570
AdMob already supports about 10
or 12 networks, but maybe

00:22:00.570 --> 00:22:02.590
the ad network that you're
interested in using is not

00:22:02.590 --> 00:22:04.340
directly supported by AdMob.

00:22:04.340 --> 00:22:07.590
In this case, you can roll your
own custom event that can

00:22:07.590 --> 00:22:11.880
essentially implement one
of these ad networks.

00:22:11.880 --> 00:22:13.810
You can also do something
else other than

00:22:13.810 --> 00:22:15.120
implement an ad network.

00:22:15.120 --> 00:22:18.080
And in this example, we're just
going to create a custom

00:22:18.080 --> 00:22:22.890
event that just displays the
Android icon image as an ad

00:22:22.890 --> 00:22:26.220
because we don't currently have
another icon in our app.

00:22:26.220 --> 00:22:28.350
So let me walk through how
you would do this.

00:22:28.350 --> 00:22:31.790
In the AdMob UI, instead of
configuring another ad

00:22:31.790 --> 00:22:34.560
network, you would add
a custom event.

00:22:34.560 --> 00:22:38.780
You would be presented with this
pop-up that asks you to

00:22:38.780 --> 00:22:41.690
include a label, a class
name and a parameter.

00:22:41.690 --> 00:22:44.030
The label is just a label
for your custom event.

00:22:44.030 --> 00:22:46.000
I called it My Custom Event.

00:22:46.000 --> 00:22:49.830
The class name is the fully
qualified class name of the

00:22:49.830 --> 00:22:53.540
class that will implement
the custom event.

00:22:53.540 --> 00:22:54.993
So in this example, we'll
use com.Google.examp

00:22:54.993 --> 00:22:56.243
le.ads.fundament
als.MyCustomEvent.

00:23:01.200 --> 00:23:04.900
And the parameter is any
parameter you want to pass to

00:23:04.900 --> 00:23:07.300
that custom event for another
ad network that might

00:23:07.300 --> 00:23:09.330
be an AD UNIT ID.

00:23:09.330 --> 00:23:12.230
In our case, for this example,
we don't actually need a

00:23:12.230 --> 00:23:14.760
parameter, so I just presented
the Hello World

00:23:14.760 --> 00:23:16.030
screen as the parameter.

00:23:18.970 --> 00:23:24.120
So let's implement this example
custom event class.

00:23:24.120 --> 00:23:25.340
So here's what it looks like.

00:23:25.340 --> 00:23:26.360
There are two methods.

00:23:26.360 --> 00:23:28.810
One is the requestBannerAd
method.

00:23:28.810 --> 00:23:32.110
In this class you will want
to call out to another ad

00:23:32.110 --> 00:23:35.540
network, or grab some view.

00:23:35.540 --> 00:23:39.500
And then we're going to call
this CustomEventBannerListener

00:23:39.500 --> 00:23:42.630
and tell it we received an
ad and pass in the view

00:23:42.630 --> 00:23:44.940
of the ad we got.

00:23:44.940 --> 00:23:47.210
Generally, when implementing
other networks, you're going

00:23:47.210 --> 00:23:51.460
to request an ad in this method,
and implement the

00:23:51.460 --> 00:23:54.930
third party ad networks
AdListener.

00:23:54.930 --> 00:23:58.200
And when they see that they
received an ad you would call

00:23:58.200 --> 00:24:01.240
Listener or onReceivedAd
with their banner.

00:24:01.240 --> 00:24:04.240
In this example, we're just
creating an image view and

00:24:04.240 --> 00:24:08.260
setting the Android icon as
the imagery source, and

00:24:08.260 --> 00:24:10.680
calling onReceivedAd
with that icon.

00:24:10.680 --> 00:24:12.450
The other method that you'll
implement is the simple

00:24:12.450 --> 00:24:13.610
destroy method.

00:24:13.610 --> 00:24:16.470
If you have any cleanup that's
necessary you'll want to

00:24:16.470 --> 00:24:20.750
implement it in this
destroy method.

00:24:20.750 --> 00:24:22.400
So let's try this out.

00:24:22.400 --> 00:24:24.680
I already have the proper
package here, so I'm going to

00:24:24.680 --> 00:24:28.110
create a new class called
My Custom Event.

00:24:32.510 --> 00:24:35.460
I'm going to replace the
implementation here with the

00:24:35.460 --> 00:24:36.710
implementation from the slide.

00:24:43.720 --> 00:24:51.710
And, finally, I'm going to grab
the example, AD UNIT ID,

00:24:51.710 --> 00:24:54.470
here for custom events.

00:24:54.470 --> 00:24:58.760
I set up this event to serve
100% of the time, so we should

00:24:58.760 --> 00:25:00.010
see it here.

00:25:03.040 --> 00:25:04.130
So this is our main code.

00:25:04.130 --> 00:25:08.450
It's going to load the ad
view with an ad request.

00:25:08.450 --> 00:25:11.020
It's going to hit the mediation
server, grab a

00:25:11.020 --> 00:25:13.910
config that says I want
to request a custom

00:25:13.910 --> 00:25:16.420
event 100% of the time.

00:25:16.420 --> 00:25:20.010
The AdMob SDK is going to know
from your configuration that

00:25:20.010 --> 00:25:21.693
you want to call in to
com.Google.ads.e

00:25:21.693 --> 00:25:25.440
xample.fundament
als.MyCustomEvent and call

00:25:25.440 --> 00:25:27.320
request banner ad.

00:25:27.320 --> 00:25:30.360
And here we're just going to
return in Android icon.

00:25:30.360 --> 00:25:32.316
So let's try running the app
and see what we get.

00:25:41.020 --> 00:25:47.350
So we're uploading be app to our
Galaxy Nexus emulator, and

00:25:47.350 --> 00:25:49.310
here we have it.

00:25:49.310 --> 00:25:53.400
We got a mediation config that
said I want to get a custom

00:25:53.400 --> 00:25:57.190
event, and we created our
image view and set the

00:25:57.190 --> 00:25:59.950
resource to the icon,
and this is kind of

00:25:59.950 --> 00:26:01.760
like our banner here.

00:26:01.760 --> 00:26:04.910
You could replace this with a
320 by 50 image and serve

00:26:04.910 --> 00:26:08.030
custom ads, perhaps, as a back
fill if no other mediation

00:26:08.030 --> 00:26:09.390
works field the request.

00:26:14.490 --> 00:26:16.280
So let's make this a little bit
more interesting and an

00:26:16.280 --> 00:26:17.530
OnClickListener.

00:26:19.170 --> 00:26:21.270
So we're just going to--

00:26:21.270 --> 00:26:25.870
when the image view is clicked,
send the user to a

00:26:25.870 --> 00:26:35.970
web browser that goes
to www.google.com.

00:26:35.970 --> 00:26:39.530
This will also hit the
listener.onclick,

00:26:39.530 --> 00:26:40.860
onPresentsScreen, and

00:26:40.860 --> 00:26:43.120
onLeaveApplication called backs.

00:26:43.120 --> 00:26:48.200
For mediation the OnClick call
back let's the AdMob SDK know

00:26:48.200 --> 00:26:52.250
that the ad has been clicked,
and this is used for reporting

00:26:52.250 --> 00:26:54.950
purposes in the AdMob UI.

00:26:57.870 --> 00:27:02.350
Let's try running this and
seeing if we can click our

00:27:02.350 --> 00:27:03.600
Android icon.

00:27:10.900 --> 00:27:13.830
So again, we're fetching a
mediation config, calling it a

00:27:13.830 --> 00:27:16.460
custom event serving the icon.

00:27:16.460 --> 00:27:19.050
We got our onReceivedAd call
back because we notified the

00:27:19.050 --> 00:27:22.530
mediation layer that
we received an ad.

00:27:22.530 --> 00:27:27.150
And when I click here we should
get the onPresentScreen

00:27:27.150 --> 00:27:29.370
and onLeaveApplication
call backs.

00:27:29.370 --> 00:27:31.100
Hopefully.

00:27:31.100 --> 00:27:32.470
Because we provided them here.

00:27:36.190 --> 00:27:38.650
It's important to note that when
implementing your custom

00:27:38.650 --> 00:27:43.640
event, you want to send these
messages back to AdMob

00:27:43.640 --> 00:27:50.950
mediation as much as possible in
the right places because by

00:27:50.950 --> 00:27:54.400
calling onPresentScreen here
in your custom event, your

00:27:54.400 --> 00:27:58.870
main app will be able to listen
for it and AdMob can

00:27:58.870 --> 00:28:02.250
call onPresentScreen here.

00:28:02.250 --> 00:28:06.060
If you fail to provide some of
these callbacks, then your

00:28:06.060 --> 00:28:10.720
main app, when a custom event
is shown, it won't get those

00:28:10.720 --> 00:28:13.470
call backs, and you might not
be able to pause your game,

00:28:13.470 --> 00:28:15.480
and your game might end up
being at a bad state.

00:28:15.480 --> 00:28:18.290
So when implementing your custom
event try to call as

00:28:18.290 --> 00:28:19.980
many of these Listener
methods as possible.

00:28:26.070 --> 00:28:28.860
So just to reiterate, custom
events let you implement any

00:28:28.860 --> 00:28:31.350
ad network within
AdMob Mediation.

00:28:31.350 --> 00:28:35.480
If the adapters aren't working
you can roll your own solution

00:28:35.480 --> 00:28:36.580
using these custom events.

00:28:36.580 --> 00:28:39.510
You can implement as many as
you want, and you can do

00:28:39.510 --> 00:28:41.050
something else instead
of showing an ad.

00:28:41.050 --> 00:28:43.010
Like for example, we
showed this icon.

00:28:43.010 --> 00:28:45.420
And there are some or other use
cases that I'll leave as

00:28:45.420 --> 00:28:49.180
an exercise for you all to
figure out what you can do

00:28:49.180 --> 00:28:50.430
with custom events.

00:28:52.840 --> 00:28:54.800
So that's it for
this code lab.

00:28:54.800 --> 00:28:58.640
You should be familiar with all
of the important parts of

00:28:58.640 --> 00:29:01.980
AdMob, and be able to implement
it pretty easily.

00:29:01.980 --> 00:29:04.510
Here are some more resources
in case you need help.

00:29:04.510 --> 00:29:08.810
Here's the SDK download
on our Docs page.

00:29:08.810 --> 00:29:10.470
Here's the AdMob site
where you can

00:29:10.470 --> 00:29:13.460
create an AdMob placement.

00:29:13.460 --> 00:29:16.930
We have our developer docs, our
form where you can ask us

00:29:16.930 --> 00:29:18.520
technical questions.

00:29:18.520 --> 00:29:20.520
You can follow us on our Google
Ads Developer Plus

00:29:20.520 --> 00:29:25.870
page, listen in on our Google
Ads Developer blog, check out

00:29:25.870 --> 00:29:27.570
our code examples.

00:29:27.570 --> 00:29:31.430
And we have a Google Developer
Academy class to help you more

00:29:31.430 --> 00:29:33.020
with in depth custom events.

00:29:35.960 --> 00:29:36.930
So thanks for watching.

00:29:36.930 --> 00:29:37.990
My name's Eric Leichtenschlag.

00:29:37.990 --> 00:29:39.830
And I hope to see
you next time.

00:29:39.830 --> 00:29:41.080
Bye.

