WEBVTT
Kind: captions
Language: en

00:00:00.940 --> 00:00:04.940
Almost every Android app has
to open third party content

00:00:04.940 --> 00:00:06.860
at some point.

00:00:06.860 --> 00:00:09.310
At that moment,
developers need to decide

00:00:09.310 --> 00:00:13.580
if they open that content in
the browser or use a web view.

00:00:13.580 --> 00:00:17.050
Opening links in the browser
is a heavyweight transition

00:00:17.050 --> 00:00:21.280
from the application and doesn't
allow you to customize the UI.

00:00:21.280 --> 00:00:23.950
This may frustrate
users and make it harder

00:00:23.950 --> 00:00:26.490
for them to return to your app.

00:00:26.490 --> 00:00:29.710
Using a web view gives you
more control of the UI,

00:00:29.710 --> 00:00:31.750
but it's harder to
build and doesn't

00:00:31.750 --> 00:00:34.900
include all the cool features
that browser developers work

00:00:34.900 --> 00:00:37.070
hard to provide.

00:00:37.070 --> 00:00:41.110
Wouldn't it be nice if you could
have the best of both worlds?

00:00:41.110 --> 00:00:44.400
That's why we created
Chrome Custom Tabs.

00:00:44.400 --> 00:00:47.830
My name is Andre Bandarra,
and with Chrome Custom Tabs,

00:00:47.830 --> 00:00:51.640
third party content in your
app is a first class citizen.

00:00:51.640 --> 00:00:55.000
Chrome Custom Tabs is a new
way to show third party content

00:00:55.000 --> 00:00:56.020
on Android.

00:00:56.020 --> 00:00:59.540
It allows you to change
how Chrome looks and feels,

00:00:59.540 --> 00:01:03.420
making the transition
from app to web seamless.

00:01:03.420 --> 00:01:05.640
By using Custom Tabs,
you can customize

00:01:05.640 --> 00:01:09.290
Chrome to match your application
color, change the start

00:01:09.290 --> 00:01:13.340
and exit animations, or add a
custom action to the toolbar,

00:01:13.340 --> 00:01:16.340
like a button to save an
article to read later.

00:01:16.340 --> 00:01:19.360
It also features a
customizable Up button

00:01:19.360 --> 00:01:21.180
that makes it
easier for the user

00:01:21.180 --> 00:01:24.220
to return to your app once
done with the content.

00:01:24.220 --> 00:01:28.190
Being a part of Chrome, it
shares the same cookie jar

00:01:28.190 --> 00:01:30.980
so your users won't have
to log in frequently

00:01:30.980 --> 00:01:33.260
to view third part content.

00:01:33.260 --> 00:01:36.030
It also makes it easier
for the content publishers

00:01:36.030 --> 00:01:40.060
to track user engagement
coming from your application.

00:01:40.060 --> 00:01:44.600
You also get the Chrome features
like form autofill, geolocation

00:01:44.600 --> 00:01:47.060
prompts, and page translation.

00:01:47.060 --> 00:01:50.910
But it's also about speed
as it allows your app

00:01:50.910 --> 00:01:53.790
to ask Chrome to preload
content in the background

00:01:53.790 --> 00:01:58.550
so that when users click on a
link, it will open really fast.

00:01:58.550 --> 00:02:00.420
Preloading content
can make the links

00:02:00.420 --> 00:02:03.330
inside your at open up
to three times faster

00:02:03.330 --> 00:02:06.710
than using a normal
Chrome tab or web view.

00:02:06.710 --> 00:02:08.820
Chrome Custom Tabs
is already available

00:02:08.820 --> 00:02:10.725
starting from Chrome version 45.

00:02:13.230 --> 00:02:15.760
Let's take a look at
how to use Chrome Custom

00:02:15.760 --> 00:02:18.070
Tabs in your Android app.

00:02:18.070 --> 00:02:21.570
First, add the Android Support
Library to your project

00:02:21.570 --> 00:02:23.020
build file.

00:02:23.020 --> 00:02:25.210
To enable warm up
and preloading,

00:02:25.210 --> 00:02:28.310
you need to connect
to browser service.

00:02:28.310 --> 00:02:32.040
Once connected, you can
ask Chrome to warm up.

00:02:32.040 --> 00:02:36.110
To prefetch the contents,
create a new navigation session,

00:02:36.110 --> 00:02:38.480
optionally passing a callback.

00:02:38.480 --> 00:02:42.690
Now you are ready to ask Chrome
to prefetch the third party

00:02:42.690 --> 00:02:44.000
content.

00:02:44.000 --> 00:02:47.770
You can give it a single
URL, or if you need more,

00:02:47.770 --> 00:02:52.590
you can add a list of other URLs
the user is likely to navigate.

00:02:52.590 --> 00:02:55.220
Chrome will prioritize
the first URL

00:02:55.220 --> 00:02:59.290
followed by all other URLs on
the list in the order passed

00:02:59.290 --> 00:03:00.560
to it.

00:03:00.560 --> 00:03:03.900
And don't forget to unbind
the service when Chrome Custom

00:03:03.900 --> 00:03:06.390
Tabs is no longer needed.

00:03:06.390 --> 00:03:11.470
Now if possible, Chrome will
start to prefetch the content.

00:03:11.470 --> 00:03:13.980
It may go all the
way from resolving

00:03:13.980 --> 00:03:18.100
DNS to fetching the page and
support content like CSS,

00:03:18.100 --> 00:03:22.320
JavaScript, and images, and
even prerender the page up

00:03:22.320 --> 00:03:24.010
to the point that
all that remains

00:03:24.010 --> 00:03:28.010
is to actually draw the
pixels on the screen.

00:03:28.010 --> 00:03:31.850
You open a Chrome Tab by
using a custom tab Intent.

00:03:31.850 --> 00:03:34.710
Pass it a reference to the
host activity and the URI

00:03:34.710 --> 00:03:36.250
you want to open.

00:03:36.250 --> 00:03:40.590
If the URI matches, one of the
URIs [INAUDIBLE] prefetching,

00:03:40.590 --> 00:03:43.210
Chrome will use
prefetched contents.

00:03:43.210 --> 00:03:46.870
Otherwise, it will fetch and
render the page at that moment.

00:03:46.870 --> 00:03:50.990
There are various customizations
possible in the Custom Tab UI.

00:03:50.990 --> 00:03:53.470
Use them by calling the
corresponding methods

00:03:53.470 --> 00:03:56.020
on the Custom Tabs
Intent Builder.

00:03:56.020 --> 00:03:59.080
To change the application
bar color for instance,

00:03:59.080 --> 00:04:02.750
you need to call the
setToolbarColor methods.

00:04:02.750 --> 00:04:05.130
Chrome Custom Tabs
is a powerful tool

00:04:05.130 --> 00:04:07.070
that allows your
application to open

00:04:07.070 --> 00:04:09.640
web content in a seamless way.

00:04:09.640 --> 00:04:13.190
By using it, you get the UI
flexibility of a web view,

00:04:13.190 --> 00:04:16.649
increase the user retention,
and create a seamless transition

00:04:16.649 --> 00:04:19.690
between your app and the web.

00:04:19.690 --> 00:04:23.150
You also get a shared
cookie jar, form autofill,

00:04:23.150 --> 00:04:26.550
and all the other cool
features from Chrome,

00:04:26.550 --> 00:04:28.790
improving even more
the user experience

00:04:28.790 --> 00:04:32.380
and providing better metrics
for content publishers.

00:04:32.380 --> 00:04:34.560
It also has the unique
advantage of being

00:04:34.560 --> 00:04:38.340
able to prefetch the content,
making it load faster.

00:04:38.340 --> 00:04:40.765
All those features make
it the best solution

00:04:40.765 --> 00:04:44.490
when opening third party
content in your application.

00:04:44.490 --> 00:04:47.220
It's also an open
specification, which

00:04:47.220 --> 00:04:51.110
means that other browsers
besides Chrome is supported.

00:04:51.110 --> 00:04:53.810
If you want to see how to
integrate Chrome Custom

00:04:53.810 --> 00:04:57.130
Tabs in your Android app,
check out them on GitHub.

00:04:57.130 --> 00:04:59.810
Or if you have questions,
you can send them

00:04:59.810 --> 00:05:03.250
on the Stack Overflow
tag chrome-custom-tabs.

00:05:03.250 --> 00:05:06.390
Next time you want third
party content in your app,

00:05:06.390 --> 00:05:08.400
let Chrome pick up the tab.

00:05:08.400 --> 00:05:12.350
[MUSIC PLAYING]

