WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.000
&gt;&gt; 

00:00:10.240 --> 00:00:13.010
Tom Manshreck: Welcome, developers. Ah, my
name is Tom

00:00:13.010 --> 00:00:17.260
Manshreck. I am a technical writer. I write
the Maps API

00:00:17.260 --> 00:00:19.720
documentation. Probably you get a lot of engineers
giving

00:00:19.720 --> 00:00:22.669
talks. I'm a writer. Um, so I'm -- I'm here
to kind of

00:00:22.669 --> 00:00:25.630
give you, ah, a different perspective. This
is more of a

00:00:25.630 --> 00:00:29.779
tutorial for one of our products, which is
the Maps Data

00:00:29.779 --> 00:00:32.260
API. And you probably are pretty familiar
with this right

00:00:32.260 --> 00:00:39.260
now, but, ah, we have a live blog in wave.
So you can use

00:00:39.360 --> 00:00:43.549
this bit.ly to get on the, ah, live wave and,
ah, pose

00:00:43.549 --> 00:00:43.799
questions and ask them. I'll leave this up
for a little

00:00:43.610 --> 00:00:43.860
bit. Um, just a little bit about myself. I've
been at the

00:00:43.680 --> 00:00:45.129
Maps API team since 2007. I think you've seen
a lot of good

00:00:45.129 --> 00:00:52.129
stuff today. We've launched the Place API,
or we will

00:00:52.699 --> 00:00:54.960
launch it soon. Um, and we've also, ah, basically
migrated

00:00:54.960 --> 00:00:58.920
the V3 to be the default application. So,
on today, I'm

00:00:58.920 --> 00:01:02.699
going to talk about the Maps Data API. Um,
first of all,

00:01:02.699 --> 00:01:04.049
how many people are familiar with V3? [ pause
while

00:01:04.049 --> 00:01:05.080
audience responds ] And how many people are
using V2

00:01:05.080 --> 00:01:05.880
applications? [ pause while audience responds
 ] All right,

00:01:05.880 --> 00:01:10.950
so it's roughly half and half. Um, so what
I'm going to be

00:01:10.950 --> 00:01:15.670
doing today is -- is basically describing
how you can use

00:01:15.670 --> 00:01:20.780
the Maps Data API to do a matchup in V3. Um,
now what

00:01:20.780 --> 00:01:24.539
counts as Maps Data? I -- I like to look at
Maps Data in

00:01:24.539 --> 00:01:27.700
terms of three basic categories of stuff.
Um, you can have

00:01:27.700 --> 00:01:30.380
your own personal data. Um, this is the kind
of stuff

00:01:30.380 --> 00:01:33.820
you're walking around and, you know, you have
a favorite

00:01:33.820 --> 00:01:36.479
coffee shop. You want to get -- you want to
take it down.

00:01:36.479 --> 00:01:40.009
Do it by location. Um, another one would be
a shared model.

00:01:40.009 --> 00:01:42.340
Um, and a shared model would be like you have
a group of

00:01:42.340 --> 00:01:44.330
friends. You -- you have a bunch of bike paths
you want to

00:01:44.330 --> 00:01:47.890
-- want to share at -- in a club, or something
like that.

00:01:47.890 --> 00:01:50.030
Um, and then, finally, there's the public
model. Um, many

00:01:50.030 --> 00:01:52.549
of you in business are going to like that,
because the

00:01:52.549 --> 00:01:56.359
public model allows you to give your data
to your consumers.

00:01:56.359 --> 00:01:59.689
Um, so basically the Maps Data API allows
you to pretty

00:01:59.689 --> 00:02:03.149
quickly get an application running that presents
your data

00:02:03.149 --> 00:02:08.130
to your users. So why store in the Cloud?
Um, I think

00:02:08.130 --> 00:02:12.760
probably many of you probably use Gmail. Um,
I've learned a

00:02:12.760 --> 00:02:14.280
lot of Gmail. Um, this is, um, ah, a model
for storing

00:02:14.280 --> 00:02:15.090
geospatial data in the Cloud, um, in the Google
Cloud. Um,

00:02:15.090 --> 00:02:21.200
it is safer. You know, we have redundancy.
Um, it's

00:02:21.200 --> 00:02:23.590
exposed via multiple interfaces. Um, what
I'll -- what I'll

00:02:23.590 --> 00:02:27.450
show you today is a -- is a Maps Data API
that you

00:02:27.450 --> 00:02:30.530
manipulate, but anything that you put there
will actually

00:02:30.530 --> 00:02:33.630
show up on Maps.Google.com in your My Maps
directory, once

00:02:33.630 --> 00:02:36.420
you're logged in. Um, and, finally, it's 
-- it's accessible

00:02:36.420 --> 00:02:39.560
from any browser or application or server,
meaning that you

00:02:39.560 --> 00:02:43.490
can provide one application to serve data
to people looking

00:02:43.490 --> 00:02:48.320
on a desktop or a mobile device or to, ah,
another service.

00:02:48.320 --> 00:02:54.840
And we do use the, ah, this uses, ah, Google
Data platform,

00:02:54.840 --> 00:02:58.700
so we do use the open standards of Atom. So
what's the Maps

00:02:58.700 --> 00:02:59.780
Data API? Um, it's an interface to Maps Data
stored in

00:02:59.780 --> 00:03:03.460
Google Cloud. And it's -- it's basically a
REST API. Um,

00:03:03.460 --> 00:03:06.720
which is a cool data API, which allows you
to do basic

00:03:06.720 --> 00:03:09.940
create, read, update, and deletes. Um, it
does these

00:03:09.940 --> 00:03:16.940
through HTTP requests. So you can think of
these things as

00:03:17.690 --> 00:03:24.090
URLs or actually kind of functions with parameters.
Um,

00:03:24.090 --> 00:03:28.540
and, in a kind of neat way, create would be
a POST. So if

00:03:28.540 --> 00:03:29.250
you send a POST to a URL, what that says is
I want to create

00:03:29.250 --> 00:03:29.820
something. If you send a GET, oh, I want to
read something.

00:03:29.820 --> 00:03:30.440
If you send a PUT, it means I want to update
something. And

00:03:30.440 --> 00:03:31.370
you can also send a DELETE to delete something.
So you can

00:03:31.370 --> 00:03:36.840
do all those operations in the Maps Data API.
Um, Maps Data

00:03:36.840 --> 00:03:41.320
API works through the concept of feeds. These
feeds

00:03:41.320 --> 00:03:43.320
basically manipulate three different entities,
in the Maps

00:03:43.320 --> 00:03:48.230
Data API. We have feeds for maps, um, which
counts for a

00:03:48.230 --> 00:03:50.440
collection of data. Now, I don't want to confuse
you and

00:03:50.440 --> 00:03:53.410
say that we have a feed that allows you to
create what is

00:03:53.410 --> 00:03:55.160
known as the Google Maps map with the tiles
and the paint

00:03:55.160 --> 00:03:57.940
and all that. A map here would be a collection
of

00:03:57.940 --> 00:04:00.430
geographic data. You might have crime statistics,
you know,

00:04:00.430 --> 00:04:03.580
from Chicago where I was born. It seems to
be a hot topic

00:04:03.580 --> 00:04:07.370
all the time to have crime statistics being
indexed in -- in

00:04:07.370 --> 00:04:11.640
Data. Um, but it's the collection of that
data that you put

00:04:11.640 --> 00:04:14.430
together, um, which counts as a map. Um, we
also have a

00:04:14.430 --> 00:04:18.699
feed, ah, feed for features, which is an individual
feature

00:04:18.699 --> 00:04:20.489
on that map. Um, so you can ma -- manipulate
not only the

00:04:20.489 --> 00:04:23.870
map with -- as a collection feature, but you
can manipulate

00:04:23.870 --> 00:04:25.770
individual features of putting the data that
you attach to

00:04:25.770 --> 00:04:27.909
these features. And, finally, we allow you
to manipulate

00:04:27.909 --> 00:04:31.389
access control lists, um, and that will allow
you to do your

00:04:31.389 --> 00:04:36.139
private share and public model. Um, and we
launched the

00:04:36.139 --> 00:04:39.650
Maps Data API at I/O last year, um, but it
was purely an

00:04:39.650 --> 00:04:41.900
HTTP service at the time. We didn't have a
lot of features.

00:04:41.900 --> 00:04:44.409
We have updated it, so I want to -- to give
you an

00:04:44.409 --> 00:04:47.099
opportunity to look at those new features.
And one of the

00:04:47.099 --> 00:04:51.139
most important is spatial search. Um, and
we also allow

00:04:51.139 --> 00:04:52.610
attribute search. Ah, spatial search will
allow you to

00:04:52.610 --> 00:04:55.949
search for a bunch of features within a given
radius or a

00:04:55.949 --> 00:04:58.990
bounding box; let's say if you put it in a
map. Um, an

00:04:58.990 --> 00:05:01.900
attribute search will allow you to search
for your own

00:05:01.900 --> 00:05:07.030
particular data, um, within that -- that 
-- that area. So

00:05:07.030 --> 00:05:09.039
here's an example that I was talking about
with basic feed.

00:05:09.039 --> 00:05:10.539
Now, you might think that's URL; I'm going
to get some, you

00:05:10.539 --> 00:05:15.349
know, Web page. But that's not actually how
it works. Um,

00:05:15.349 --> 00:05:17.680
a POST to that feed, which is the top one,
actually is

00:05:17.680 --> 00:05:20.430
called --this is called the Default Feed;
this is a special

00:05:20.430 --> 00:05:26.099
feed. This is a feed that basically is just
yours. Um,

00:05:26.099 --> 00:05:28.550
and, ah, what that means is if -- if I send
a feed -- ah, a

00:05:28.550 --> 00:05:32.270
POST your request to this, it's going to create
a map. Um,

00:05:32.270 --> 00:05:32.990
so the initial map can be provided as XML
or Comma-Separated

00:05:32.990 --> 00:05:34.759
Values or KML. KML turns out to be the best
to manipulate

00:05:34.759 --> 00:05:38.509
within the Maps Data API. Um, and -- and once
you can

00:05:38.509 --> 00:05:42.999
actually create a map here, if you send a
POST to this,

00:05:42.999 --> 00:05:45.240
you'll get a map, um, with some URL parameters.
And you can

00:05:45.240 --> 00:05:51.469
actually look at it in My Maps. Um, the second
kind is the

00:05:51.469 --> 00:05:54.310
basic Feature feeds. So that's actually to
manipulate

00:05:54.310 --> 00:05:57.029
little features. Um, as you see there, instead
of Maps

00:05:57.029 --> 00:06:00.569
Feeds Maps, I'm going to Maps Feeds Features.
Um, so it's a

00:06:00.569 --> 00:06:04.509
very similar URL that you would send. A POST
to this one

00:06:04.509 --> 00:06:07.650
would act to create a map, ah -- I mean, I'm
sorry; it would

00:06:07.650 --> 00:06:10.110
act to create a feature in the map. Um, you
see here that

00:06:10.110 --> 00:06:12.830
it's specified. You have to specify your User
ID and your

00:06:12.830 --> 00:06:16.180
Map ID; that means it's a per user and it's
per map. Um,

00:06:16.180 --> 00:06:19.479
you can't have features across multiple maps,
ah, but you

00:06:19.479 --> 00:06:23.590
can have a -- a large number of features within
any given

00:06:23.590 --> 00:06:25.650
map. Um, and the features are exposed is KML.
So we now

00:06:25.650 --> 00:06:31.590
support points, linestrings, and, ah, polygons.
Ah, we also

00:06:31.590 --> 00:06:35.599
support authentication options, which is we
have, ah,

00:06:35.599 --> 00:06:38.879
AuthSub and OAuth support. Um, and we provide
authorization

00:06:38.879 --> 00:06:42.830
via Access Control Lists. So this is also
a -- a feed. Um,

00:06:42.830 --> 00:06:45.150
so you can send a feed for your default feed,
which is

00:06:45.150 --> 00:06:47.879
everyone in the world, or you can send a feed
for yourself.

00:06:47.879 --> 00:06:52.559
Um, now importantly, the default feed, ah,
has a default of

00:06:52.559 --> 00:06:55.870
READ, meaning that if you -- if you, ah, create
a map under

00:06:55.870 --> 00:07:00.089
my, ah, ah, My Maps Data API, it's not necessarily
public.

00:07:00.089 --> 00:07:02.939
It's -- it's called, ah, ah, unlisted, which
means if

00:07:02.939 --> 00:07:05.650
someone has that ID, they can actually look
at the data. So

00:07:05.650 --> 00:07:09.270
this allows you to create a map, create a
bunch of data, and

00:07:09.270 --> 00:07:11.110
then share it with someone else without it
necessarily being

00:07:11.110 --> 00:07:13.599
public. Um, but you can also change that to
be a completely

00:07:13.599 --> 00:07:15.059
private, ah, application. So you can change
the de --

00:07:15.059 --> 00:07:17.809
default to be to -- to -- to nothing. Um,
and, in that

00:07:17.809 --> 00:07:21.930
case, no one is going to be able to get at
your data. Um,

00:07:21.930 --> 00:07:25.849
and, of course, also write for yourself. Now,
if you looked

00:07:25.849 --> 00:07:28.129
at it, you're, like, I've got to send these
URLs and

00:07:28.129 --> 00:07:32.309
manipulate this stuff and read this stuff
back. Um, no I

00:07:32.309 --> 00:07:35.990
didn't like doing that either. So, I mean,
URLs are a pain.

00:07:35.990 --> 00:07:38.969
So what we've done in the Maps Data API is
we've provided

00:07:38.969 --> 00:07:41.210
clients with libraries. Ah, when we initially
 -- initially

00:07:41.210 --> 00:07:44.259
launched, we only had, ah, Java. Ah, we only
had Python.

00:07:44.259 --> 00:07:47.629
We went to Java in June. Um, and in December
we went to the

00:07:47.629 --> 00:07:51.509
Javascript client library. Um, now many of
you are going to

00:07:51.509 --> 00:07:54.499
be creating applications on your own servers.
So, in that

00:07:54.499 --> 00:07:56.369
case, you're actually going to want to use
Java or Python

00:07:56.369 --> 00:07:57.589
probably. Um, but I'm going to be using Javascript
today

00:07:57.589 --> 00:08:02.259
because I can do it completely within the
browser. [ pause ]

00:08:02.259 --> 00:08:04.550
So here's an example. The first thing you
have to do when

00:08:04.550 --> 00:08:08.240
you use the Maps Data API is load it. Um,
and if, ah,

00:08:08.240 --> 00:08:08.860
you're familiar with V3, you're probably familiar
with, ah,

00:08:08.860 --> 00:08:12.949
this paradigm of loading the application.
So, you're

00:08:12.949 --> 00:08:16.129
loading Javascript here, um, using the script
tag. Um, and

00:08:16.129 --> 00:08:18.979
I'm loading two packages. And this is nice
and convenient

00:08:18.979 --> 00:08:21.409
because this actually loads everything asynchronously.
So

00:08:21.409 --> 00:08:25.400
I'm going to load the GData package Maps,
which is the Maps

00:08:25.400 --> 00:08:29.210
Data API, and I'm also going to load Maps
API V3. Um, you

00:08:29.210 --> 00:08:32.599
see this Google set onload callback. What
that basically

00:08:32.599 --> 00:08:35.750
means is that when both of those packages
are ready, ah,

00:08:35.750 --> 00:08:38.650
call that initialized function. Um, and then,
ah, here's a

00:08:38.650 --> 00:08:42.159
simple pattern for using AuthSub to redirect
you to Google

00:08:42.159 --> 00:08:44.060
login. Now, importantly, this is an application
that's

00:08:44.060 --> 00:08:47.620
existing on the Internet. Someone opens it
up. If you want

00:08:47.620 --> 00:08:50.110
to -- if you want to be able to use it yourself
to enter

00:08:50.110 --> 00:08:52.690
data, you're going to need to provide some
sort of

00:08:52.690 --> 00:08:54.370
authorization in that application. So this
is a good

00:08:54.370 --> 00:08:56.410
pattern here. It basically checks whether
you're logged in;

00:08:56.410 --> 00:08:59.269
it checks the login status. And if you're
not, it's going

00:08:59.269 --> 00:09:03.880
to basically call these Google accounts. Um,
sorry, it's

00:09:03.880 --> 00:09:07.540
going to call Google accounts user login.
That's going to

00:09:07.540 --> 00:09:09.110
do the -- the three-legged dance with all
eyes. It's going

00:09:09.110 --> 00:09:11.350
to bring you to a page where you log in and
identify

00:09:11.350 --> 00:09:13.250
yourself, and then it's going to ask you whether
you

00:09:13.250 --> 00:09:16.560
actually want to allow this application to
do that to your

00:09:16.560 --> 00:09:19.190
data. And then, finally, there's a little
trick. You've

00:09:19.190 --> 00:09:22.399
got to have an image on your page some place.
Most people

00:09:22.399 --> 00:09:25.480
do anyway, but it's just important. This actually
holds the

00:09:25.480 --> 00:09:29.670
authorization cookie. Um, so this may trip
you up. So just

00:09:29.670 --> 00:09:34.720
make sure that you -- you put that. Um, I'm
going to post

00:09:34.720 --> 00:09:36.130
all these slides on KodakCo.com when this
is done, so don't

00:09:36.130 --> 00:09:37.040
worry about taking copious notes. Um, here's
a simple

00:09:37.040 --> 00:09:39.740
example. Um, I talked about Creating Map.
That's the

00:09:39.740 --> 00:09:42.470
default feed. So you see here this is Javascript.
This

00:09:42.470 --> 00:09:45.880
isn't Python or Ja -- or, ah, or Java. Um,
so this is done

00:09:45.880 --> 00:09:49.430
through callback functions. And we have a
Map feed URL,

00:09:49.430 --> 00:09:51.699
which is the default feed. And, basically,
I call the

00:09:51.699 --> 00:09:54.769
Google Map service, and I pass it that Map
feed. And I --

00:09:54.769 --> 00:09:57.949
and I also pass it a callback function. So
that's -- what

00:09:57.949 --> 00:10:00.670
that's going to do is that's actually going
to assemble all

00:10:00.670 --> 00:10:03.720
these parameters. Um, I'm going to set the
title; I'm going

00:10:03.720 --> 00:10:05.980
to set the summary. And then I'm going to
call Insert

00:10:05.980 --> 00:10:09.339
Entry. Insert Entry is actually doing the
HTTP post there.

00:10:09.339 --> 00:10:11.800
So that will do the whole operation. Once
that's done,

00:10:11.800 --> 00:10:16.870
it'll return. Um, and I will get My Map, and
it'll return

00:10:16.870 --> 00:10:20.019
in IE. Um, so that's -- that's creating a
map. You only

00:10:20.019 --> 00:10:22.089
need to do that once. You don't need to put
that in your

00:10:22.089 --> 00:10:23.910
application. You can just run that once, and
now you'll

00:10:23.910 --> 00:10:26.649
have a map. You'll have, ah, a Map ID, which
consists of

00:10:26.649 --> 00:10:29.579
your Map ID and your User ID, and that will
allow you

00:10:29.579 --> 00:10:31.810
uniquely to get the map. So let's create an
application

00:10:31.810 --> 00:10:34.199
with this. And I wanted to give you kind of
an application

00:10:34.199 --> 00:10:36.610
design specification. This is a thing that
I created. Um,

00:10:36.610 --> 00:10:39.060
I like coffee. I drink a lot of coffee. I
think I drank

00:10:39.060 --> 00:10:44.610
six cups today. Um, and I had about three
hours of sleep.

00:10:44.610 --> 00:10:47.209
So, in that case, you know, I want to have
a coffee rating

00:10:47.209 --> 00:10:51.069
application. And so I can go around and have
 -- have a cup

00:10:51.069 --> 00:10:52.990
of coffee, basically click and say, hey, you
know, I like

00:10:52.990 --> 00:10:57.209
this coffee. What kind of coffee did I have?
What's the

00:10:57.209 --> 00:11:00.209
name of the place? That kind of thing, so
I can look at it

00:11:00.209 --> 00:11:01.839
later. Um, I want to use the Maps Data API
V3. Um, and I

00:11:01.839 --> 00:11:03.920
also want to use geolocation so I can find
out where I am.

00:11:03.920 --> 00:11:06.339
These are a lot of the things that have been
talked about

00:11:06.339 --> 00:11:09.250
today. Um, and I want to have the data populated
into the

00:11:09.250 --> 00:11:12.310
Maps Data API. And, finally, I want to be
able to implement

00:11:12.310 --> 00:11:19.310
search. I mean, putting data in is -- is great,
but you

00:11:26.579 --> 00:11:33.579
also want to be able to retrieve that data
later on.

00:11:36.680 --> 00:11:43.680
Generally, that's a good thing to do. So,
I'm going to show

00:11:43.970 --> 00:11:50.970
this application first so you can get an good
idea. So this

00:11:53.579 --> 00:12:00.579
is the application here. And I'll just refresh
it to make

00:12:02.060 --> 00:12:08.370
sure you know I'm not cheating. Oh, wow. Now
I'll go to

00:12:08.370 --> 00:12:15.370
Alameda. It didn't do that before. So I can
go to San

00:12:24.160 --> 00:12:31.160
Francisco. [ click] [ pause ] Geocode that.
Um, and what

00:12:34.220 --> 00:12:38.949
I want to do here is I want to basically click
and add Add a

00:12:38.949 --> 00:12:43.050
Coffee Joint. So, if I go down to -- [ pause
 ] Let's just

00:12:43.050 --> 00:12:47.379
put random coffee joint here. I click on it;
it says you

00:12:47.379 --> 00:12:51.019
must log in entry data. So I put that little
login button

00:12:51.019 --> 00:12:54.649
over there, and this will do that little three-legged
dance.

00:12:54.649 --> 00:12:58.009
So, I've actually logged into my account previously.
And

00:12:58.009 --> 00:13:04.300
what -- you've probably seen this if you're
familiar with

00:13:04.300 --> 00:13:11.300
the Google Data. I basically have to grant
access to this

00:13:11.980 --> 00:13:18.269
application. So I click on Grant Access. Everything
will

00:13:18.269 --> 00:13:25.269
refresh, and it will bring me back to Alameda
for some

00:13:25.959 --> 00:13:31.550
reason, which didn't do it today. [ pause
 ] [ click ]

00:13:31.550 --> 00:13:37.089
[ pause ] Um, and I'll just give you an example.
So I

00:13:37.089 --> 00:13:40.850
click. I say, you know, hmm, this is going
to be okay

00:13:40.850 --> 00:13:46.940
coffee. And I have options for the type of
coffee that I

00:13:46.940 --> 00:13:51.689
want. Um, you might not be familiar with this
last one.

00:13:51.689 --> 00:13:56.439
It's a big popular coffee in Australia where
I'm based. I

00:13:56.439 --> 00:14:00.769
have not actually figured out the difference
between it and

00:14:00.769 --> 00:14:05.029
a flat white, I mean, between it and a latte.
Um, maybe you

00:14:05.029 --> 00:14:09.399
know the difference. They both taste the same
to me. Um,

00:14:09.399 --> 00:14:15.740
so it will allow you to select the coffee.
It will allow

00:14:15.740 --> 00:14:21.850
you to give it the rating. And then it will
add the coffee.

00:14:21.850 --> 00:14:27.629
Now, I put a temporary marker on there, but
it's actually

00:14:27.629 --> 00:14:34.379
also doing that insert feature, and it's sending
that to the

00:14:34.379 --> 00:14:41.379
Maps Data API. And if I go to my My Maps,
I'll have my

00:14:42.509 --> 00:14:47.569
little coffee shops around the world. And
here you can see

00:14:47.569 --> 00:14:52.810
an example -- [ pause ] -- if I can get this
bigger, of all

00:14:52.810 --> 00:14:57.990
these little coffee joints around the world.
So you can get

00:14:57.990 --> 00:15:04.810
an example of this is how it would be exposed
in My Maps.

00:15:04.810 --> 00:15:10.730
[ pause ] All right, you have an idea of what
we want to

00:15:10.730 --> 00:15:13.730
build. So I'll walk through that building.
So the first

00:15:13.730 --> 00:15:15.879
thing you need to do is set up your map. Now,
if you've

00:15:15.879 --> 00:15:20.779
used V3 before, all -- a lot of this will
be very familiar.

00:15:20.779 --> 00:15:23.089
Um, there are a little bit of dif -- some
few differences

00:15:23.089 --> 00:15:28.569
here. You see that I've put in a bunch of
global variables.

00:15:28.569 --> 00:15:34.180
The reason I did that was because we're going
to be filling

00:15:34.180 --> 00:15:38.930
this up in with callback functions. So these
things are not

00:15:38.930 --> 00:15:43.569
-- so the Javascript symbols are not going
to be there until

00:15:43.569 --> 00:15:47.519
that initialized function comes back. So,
instead, I put

00:15:47.519 --> 00:15:52.560
these as global variables. I don't actually
give them -- I

00:15:52.560 --> 00:15:58.040
don't actually construct anything. Um, and
I put my map ID

00:15:58.040 --> 00:16:03.100
there just as a convenience so I can use it
again and again.

00:16:03.100 --> 00:16:06.990
So there's that function initialized. That's
going to get

00:16:06.990 --> 00:16:11.579
called when everything is ready. Um, I'm going
to create an

00:16:11.579 --> 00:16:14.899
info window. I'm going to create a geocoder
 -- with the,

00:16:14.899 --> 00:16:18.269
ah, geocoder. And I'm going to create my map.
And,

00:16:18.269 --> 00:16:22.410
basically, what I'm going to then do is called
the Geolocate

00:16:22.410 --> 00:16:27.639
Function. Um, and then I'm going to add an
event -- ah, add

00:16:27.639 --> 00:16:31.569
an event listener for that map on clicks that
will call

00:16:31.569 --> 00:16:34.290
something called Open Coffee Dialogue. So
that's a pretty

00:16:34.290 --> 00:16:36.240
simple initialization. So, the Geolocate Function,
which

00:16:36.240 --> 00:16:39.160
somehow put me in Alameda, um, probably because
there's some

00:16:39.160 --> 00:16:43.889
weird, ah, VLAN here. Um, I use the W3C geolocation
here

00:16:43.889 --> 00:16:48.480
because it's -- it's the -- the best standard.
You can also

00:16:48.480 --> 00:16:51.480
use Google Gears. Um, there's Latitude API,
people are

00:16:51.480 --> 00:16:54.810
talking about too. So there are a variety
of different

00:16:54.810 --> 00:16:59.829
options that you can use for your geolocation.
But,

00:16:59.829 --> 00:17:02.589
basically, all we're doing is checking whether
geolocation

00:17:02.589 --> 00:17:06.040
exists. And if it does, we're getting the
current position.

00:17:06.040 --> 00:17:10.180
And then we're -- we're creating -- we're
creating initial

00:17:10.180 --> 00:17:14.409
location with that latitude and longitude
and centering the

00:17:14.409 --> 00:17:17.929
map in that location. Um, and if we don't
have any

00:17:17.929 --> 00:17:22.549
geolocation, as you saw I put there a little,
ah, Take,

00:17:22.549 --> 00:17:23.000
which would say it would take me to Moscone.
It's always a

00:17:23.000 --> 00:17:27.130
good idea to have a default. So that click
event -- that

00:17:27.130 --> 00:17:29.130
click event is, ah, is what's -- what's called
an Event

00:17:29.130 --> 00:17:35.380
Handler. So I click that event, and I'll 
-- what I want to

00:17:35.380 --> 00:17:39.260
do is open that coffee dialogue box, which
you saw. So the

00:17:39.260 --> 00:17:44.720
first thing that I'm going to do is I'm going
to populate

00:17:44.720 --> 00:17:47.809
the location where I clicked. So I get that
from -- from

00:17:47.809 --> 00:17:50.620
the event, event not that long. And I create
this little

00:17:50.620 --> 00:17:53.370
HTML form. You see this actually is a form,
um, with a

00:17:53.370 --> 00:17:56.690
table, types of coffee, um, and the ratings.
Don't really

00:17:56.690 --> 00:18:01.409
need to go into specifics. Um, at the end,
I actually hide

00:18:01.409 --> 00:18:05.380
the Latin Longus as -- as form values. And
then I have this

00:18:05.380 --> 00:18:09.779
onclick save data. Um, and finally when that's
done, I

00:18:09.779 --> 00:18:11.440
actually just basically set the content of
some HTML

00:18:11.440 --> 00:18:15.659
supposition and open it. Um, and what -- 
what that -- what

00:18:15.659 --> 00:18:18.500
that basically means is that now I've -- 
I've instantiated

00:18:18.500 --> 00:18:24.440
that info window with that -- with that form.
Um, and then,

00:18:24.440 --> 00:18:31.440
finally, when I save the data, all I simply
do is take out

00:18:32.919 --> 00:18:37.549
those form values and stuff them in, and then
pass it off to

00:18:37.549 --> 00:18:41.760
another function. So it's pretty simple. So
the -- the

00:18:41.760 --> 00:18:48.760
whole meat there is that I have a map. I want
to add

00:18:56.690 --> 00:19:01.809
features. So how do you add features? Well,
of course,

00:19:01.809 --> 00:19:07.450
Maps Data API can support, you know, tens
of thousands of

00:19:07.450 --> 00:19:13.230
features. Um, so you don't want to be loading
everything in

00:19:13.230 --> 00:19:19.200
all at once. Um, instead, what you're going
to do is load

00:19:19.200 --> 00:19:26.200
in a map and then load in individual features
that -- that

00:19:27.940 --> 00:19:31.710
you pick. So the way you would actually access
the Feature

00:19:31.710 --> 00:19:38.710
Feed is to get the Map feed for your map.
Get that

00:19:38.900 --> 00:19:41.650
MapEntry, um, and then to get the MapEntry's
Feature Feed,

00:19:41.650 --> 00:19:48.650
and then populate a FeatureEntry and insert
that in. So

00:19:51.500 --> 00:19:53.700
it's a two-step process by design. So in this,
ah, Add

00:19:53.700 --> 00:19:57.370
Coffee, which is being passed as variables,
what I do is I

00:19:57.370 --> 00:20:03.830
-- I set up my map feed, which is Map URL,
which is to that

00:20:03.830 --> 00:20:10.830
Map ID. So that's just me. Oh, excuse me there.
Um, and

00:20:11.480 --> 00:20:18.480
then I will get the MapEntry with that, create
what --

00:20:20.110 --> 00:20:27.110
create, ah, Get My Coffee Map, and then construct
a -- pull

00:20:27.390 --> 00:20:32.970
out the Feature Feed URL. Now, what that means
is -- is

00:20:32.970 --> 00:20:39.039
that what I'm taking, I'm taking that Map
feed, and I'm

00:20:39.039 --> 00:20:46.039
getting the URL. Now, if I send a POST to
that Map feed,

00:20:46.090 --> 00:20:52.480
you know, it's that specific Map feed. I'm
going to end up

00:20:52.480 --> 00:20:57.570
creating a feature. So then I -- I pass all
this other

00:20:57.570 --> 00:21:03.590
stuff off to another function. I'm doing a
little bit of

00:21:03.590 --> 00:21:10.590
pass -- passing around here, but it's a lot
clearer that

00:21:10.590 --> 00:21:17.590
way. So this is the meat of adding the feature,
and it's

00:21:20.500 --> 00:21:22.779
pretty simple. Basically, I just go through
each of the

00:21:22.779 --> 00:21:28.570
things that was passed, and I create, um,
ah, a title using

00:21:28.570 --> 00:21:34.440
text. Um, so -- So I basically create a new
feature, which

00:21:34.440 --> 00:21:39.750
is the Google.GData.Maps, that FeatureEntry.
And I set the

00:21:39.750 --> 00:21:44.669
title. Um, and here's the interesting part.
The

00:21:44.669 --> 00:21:48.320
interesting part is that I can actually put
arbitrary name

00:21:48.320 --> 00:21:51.169
value pairs as custom data. So any data that
you want to

00:21:51.169 --> 00:21:58.169
store, you can put in there right now. And
I use that using

00:22:02.750 --> 00:22:09.419
the custom properties, um, of -- of KML. So
I will put the

00:22:09.419 --> 00:22:13.620
coffee; I will put the rating. And then I
will set the

00:22:13.620 --> 00:22:19.460
actual KML content. Now, since this is, ah,
a bunch of

00:22:19.460 --> 00:22:23.049
coffee locations, um, it's going to be point
values. I

00:22:23.049 --> 00:22:25.799
mean, I could have put polygons or something
like that

00:22:25.799 --> 00:22:31.039
there; that would be complex. So I'm basically
just going

00:22:31.039 --> 00:22:34.080
to take the latitude -- the latitude and longitude,
which I

00:22:34.080 --> 00:22:37.179
attract from the location and create a placemark
point.

00:22:37.179 --> 00:22:38.140
And, finally, I'm going to set that KML to
the KML string.

00:22:38.140 --> 00:22:45.140
And I'm going to set that MIME type to --
 to the KML MIME

00:22:45.220 --> 00:22:52.220
type. Once I've done all that, I'll actually
call that

00:22:52.250 --> 00:22:54.789
InsertEntry. And what that's -- what that's
going to do is

00:22:54.789 --> 00:23:00.020
send an HTTP POST with that information to
My Map, and it's

00:23:00.020 --> 00:23:04.669
going to create a feature. Um, so I'll just
go over that

00:23:04.669 --> 00:23:11.669
again just in case. So if I click here, it
populates to the

00:23:12.659 --> 00:23:18.710
HTML form. I just type something in, and I
do this. I

00:23:18.710 --> 00:23:23.590
created that temporarily, but it's sending
that off as an

00:23:23.590 --> 00:23:26.640
asynchronous request. When -- when the info
window

00:23:26.640 --> 00:23:30.789
disappears is when it's actually created and
comes -- and

00:23:30.789 --> 00:23:37.789
comes back. [ pause ] Okay, so that's good.
I could put

00:23:37.929 --> 00:23:44.929
coffee joints there. But, I mean, the important
thing about

00:23:45.070 --> 00:23:52.070
the data is actually being able to use it.
So what I want

00:23:55.640 --> 00:24:01.860
to do is implement a search. Um, now there's
various

00:24:01.860 --> 00:24:04.269
different ways that -- that you can do a search
in the Maps

00:24:04.269 --> 00:24:07.429
Data API. Um, you -- a search is basically
a search over

00:24:07.429 --> 00:24:11.799
features. So it's actually a special type
of feature

00:24:11.799 --> 00:24:18.230
feeding. Um, so basically you -- you use the
normal feature

00:24:18.230 --> 00:24:20.320
feed, pass, slash, snippet, which basically
means that I

00:24:20.320 --> 00:24:24.659
want to get, you know, little bits of snippets
of

00:24:24.659 --> 00:24:29.850
information from all of the features that
are within a

00:24:29.850 --> 00:24:36.850
certain area. Um, and you can pass two types
of -- of

00:24:39.529 --> 00:24:45.570
feature, ah, parameters. Um, you can -- you
can search on

00:24:45.570 --> 00:24:49.490
attributes, which are those arbitrary name
value pairs that

00:24:49.490 --> 00:24:53.380
I mentioned before like my -- my -- the coffee
type and the,

00:24:53.380 --> 00:25:00.380
um, and the -- and the, ah, rating that I
gave. Those are

00:25:01.640 --> 00:25:08.640
pass brackets, um, using the map query parameter,
the mq

00:25:11.570 --> 00:25:16.659
parameter. Um, the example there is mq is
rating 5, for

00:25:16.659 --> 00:25:23.559
example. Um, I've never had coffee that good.
No, wait a

00:25:23.559 --> 00:25:30.159
minute, New York I did. Um, and then I do
spatial searches

00:25:30.159 --> 00:25:36.100
by either a radius or a bounding box. Um,
the bounding box

00:25:36.100 --> 00:25:41.299
is -- is a pretty convenient one for your
viewport. You --

00:25:41.299 --> 00:25:47.019
you just basically want to take your Maps
viewport and say

00:25:47.019 --> 00:25:52.710
like, you know, show me what's -- I'm currently
looking at.

00:25:52.710 --> 00:25:59.179
Um, but I'll do a radius search. And, ah,
basically a

00:25:59.179 --> 00:26:03.570
radius -- radius requires a lat and long center
and it --

00:26:03.570 --> 00:26:07.870
and it requires a radius that's expressed
in meters. And

00:26:07.870 --> 00:26:12.190
they have an optional sort by parameter, which
returns the

00:26:12.190 --> 00:26:17.399
results in a specified order. And so we're
going to sort by

00:26:17.399 --> 00:26:21.320
distance. So, basically, we're going to return
the first

00:26:21.320 --> 00:26:24.620
results. Um, I don't actually use that because
I just

00:26:24.620 --> 00:26:26.470
populate the stuff on the map. But you could,
for example,

00:26:26.470 --> 00:26:32.120
use that to -- to give someone a preferred
location, like

00:26:32.120 --> 00:26:35.690
the closest store that are there. So here's
an example of

00:26:35.690 --> 00:26:41.340
doing the search. So I'm going to create a
button on my

00:26:41.340 --> 00:26:46.580
map, and it's basically going to be search.
And it's going

00:26:46.580 --> 00:26:53.580
to give it a radius of five miles. Um, so
you see that I

00:26:56.769 --> 00:27:03.140
basically take the feature feed and just add
the slash,

00:27:03.140 --> 00:27:09.500
snippet, um, signal, flag. I'm going to --
 I'm going to

00:27:09.500 --> 00:27:14.010
basically assume that I'm searching over the
center of the

00:27:14.010 --> 00:27:18.700
map. So I just basically look at the center
of the map and

00:27:18.700 --> 00:27:23.789
give that the address. Um, now, what I do
here is I

00:27:23.789 --> 00:27:29.500
actually extract the lat and the long from
that address, um,

00:27:29.500 --> 00:27:35.380
and then I will, ah, track the rating -- 
ah, rating and the

00:27:35.380 --> 00:27:42.380
radius, and I multiply by, ah, 1609, which
is the number of

00:27:42.639 --> 00:27:49.639
meters in a mile, if you live in a place outside
the United

00:27:51.730 --> 00:27:58.139
States. Um, and, if I create attribute features,
basically

00:27:58.139 --> 00:28:05.139
I'll just create an array. So they'll come
in brackets and

00:28:05.980 --> 00:28:09.539
give it that string. And I can do that for
multiple, ah,

00:28:09.539 --> 00:28:12.070
ratings. Um, and then, basically, there I
construct that

00:28:12.070 --> 00:28:17.260
full URL. And then we'll send that off to
the Feature Feed.

00:28:17.260 --> 00:28:23.240
Now, what I'm going to get back is an array
of features.

00:28:23.240 --> 00:28:29.720
I'm not going to get just one feature. So
I -- I create an

00:28:29.720 --> 00:28:33.860
array. Um, and then I will call another function,
Show

00:28:33.860 --> 00:28:37.840
Results, passing it that array. [ pause ]
 So I've gotten

00:28:37.840 --> 00:28:41.899
back a bunch of features as an array. Um,
so I'll call Show

00:28:41.899 --> 00:28:45.029
Results with those results. Um, what I'm going
to do first

00:28:45.029 --> 00:28:50.700
is create a, ah, lat-long bounds object. The
reason I'll do

00:28:50.700 --> 00:28:51.010
that is, basically, I'm going to try to center
the map on

00:28:51.010 --> 00:28:55.669
all of the places that I've searched. Ah,
and I'm going to

00:28:55.669 --> 00:28:58.570
expand the bounds with each, ah, ah, feature
that I return.

00:28:58.570 --> 00:29:01.470
I'm also going to clear the markers, which
is just a little

00:29:01.470 --> 00:29:04.860
trick. So I'm going to clear any previously
existing

00:29:04.860 --> 00:29:07.960
markers. And then I'm going to iterate over
those features.

00:29:07.960 --> 00:29:11.519
And for each feature I'm going to pull up
the title. I'm

00:29:11.519 --> 00:29:17.929
going to pull -- I'm going to get the custom
properties and

00:29:17.929 --> 00:29:24.750
pull up the coffee type and the rating. And
then I'm going

00:29:24.750 --> 00:29:29.440
to get the -- going to get the KML, which,
in this case,

00:29:29.440 --> 00:29:34.260
is -- is, ah, done with bit content bit text.
Um, and I'm

00:29:34.260 --> 00:29:40.559
actually going to parse over the KML here,
which -- which

00:29:40.559 --> 00:29:46.070
is, ah, is a bit of a challenge in Javascript.
But bear

00:29:46.070 --> 00:29:51.580
with me; I have some surprises for you at
the end. Um, and

00:29:51.580 --> 00:29:58.580
then I'm going to call -- ah -- ah, I'm basically
going to

00:30:00.669 --> 00:30:04.279
extract the coordinates. Now note here that
I actually have

00:30:04.279 --> 00:30:09.860
to extract and construct the lat-long with
reverse

00:30:09.860 --> 00:30:16.299
coordinates, and that's because KML passes
longs --

00:30:16.299 --> 00:30:23.299
longitudes kind of latitudes, and the Maps
API does the

00:30:25.500 --> 00:30:30.710
reverse. Um, and then I'm going to create,
ah, a marker at

00:30:30.710 --> 00:30:33.590
that coordinate with the title, um, on My
Map. And then I'm

00:30:33.590 --> 00:30:37.960
going to attach content to each of those markers
in an info

00:30:37.960 --> 00:30:44.960
window. And I'm go to extend the bounds, and
then I'm going

00:30:50.549 --> 00:30:55.500
to push that marker on to a temporary array.
Now that array

00:30:55.500 --> 00:31:00.309
-- That array there is just for convenience.
That's so

00:31:00.309 --> 00:31:06.179
later on I can actually look through the array
and clear it

00:31:06.179 --> 00:31:13.179
out. So, if I want to add -- when I do another
search, I

00:31:14.909 --> 00:31:20.190
don't want previously existing markers to
 -- to -- to exist.

00:31:20.190 --> 00:31:23.590
Um, and then, finally, I'll fit the map to
the bounds of

00:31:23.590 --> 00:31:26.130
those features. And -- this is the example
of attaching the

00:31:26.130 --> 00:31:28.970
content, the HTML content. So I'm going to
add a listener

00:31:28.970 --> 00:31:32.369
for -- for the click event on that marker.
Remember, this a

00:31:32.369 --> 00:31:36.340
-- this is a listener on the mark -- on the
marker not the

00:31:36.340 --> 00:31:41.789
map. And I'm going to set the content to that
title and the

00:31:41.789 --> 00:31:46.980
coffee type and the rating. And I'm going
to position the

00:31:46.980 --> 00:31:51.830
info window where the marker is, and I'm going
to open it on

00:31:51.830 --> 00:31:58.830
the map. And there's an example of a rating
over the clear

00:31:59.309 --> 00:32:06.210
mark -- the clear marker is where I want to
do that. So

00:32:06.210 --> 00:32:13.210
I'll just show that again so you can get a
good idea how it

00:32:15.789 --> 00:32:22.789
works. So I've done here -- What I'm going
to do is, ah --

00:32:27.380 --> 00:32:34.380
I've actually lived out here for six years,
and I used to go

00:32:40.519 --> 00:32:47.409
to Berkeley. So I will jump over to Berkeley,
and I will

00:32:47.409 --> 00:32:49.399
search for five miles over Berkeley. You see,
that I

00:32:49.399 --> 00:32:50.480
basically -- I retrieved four features. I
autocentered the

00:32:50.480 --> 00:32:51.710
map. And if I go and I click on each individual
feature, I

00:32:51.710 --> 00:32:51.960
have my little fuu coffee shop. Um, Coco is
an actual real

00:32:51.909 --> 00:32:52.830
coffee shop. And my favorite would be Caffe
Strada. So you

00:32:52.830 --> 00:32:59.370
have an idea here that I'm basically -- Um,
if you've worked

00:32:59.370 --> 00:33:02.900
with KML before, you realize that it -- it
doesn't have data

00:33:02.900 --> 00:33:07.029
-- send a data attached to it that that can
display it like

00:33:07.029 --> 00:33:09.960
this. This is an example of -- of -- of the
versatility of

00:33:09.960 --> 00:33:11.559
the Maps Data API is that I can pull out arbitrary
data and

00:33:11.559 --> 00:33:18.559
populate it on a map. [pause ] Okay, so, I
mean, I've

00:33:25.000 --> 00:33:32.000
shown you pretty quickly how you can get a
working

00:33:36.380 --> 00:33:39.139
application done. It's a personal application.
It's not

00:33:39.139 --> 00:33:41.200
necessarily a very robust application. Um,
I'd like to

00:33:41.200 --> 00:33:43.490
introduce, ah, Steve Sullivan, who works at
IHG, to talk

00:33:43.490 --> 00:33:44.960
about a more robust application that he's
developed using

00:33:44.960 --> 00:33:45.389
the Maps Data API.

00:33:45.389 --> 00:33:46.309
&gt;&gt; Steve Sullivan: Hello. Thank you. Um, as
you can

00:33:46.309 --> 00:33:48.309
imagine, this is right up my alley. Um, I
work for a hotel

00:33:48.309 --> 00:33:50.919
company. And we have four and a half thousand
hotels to

00:33:50.919 --> 00:33:51.169
keep track of. And so keeping track of those
is -- is big

00:33:50.990 --> 00:33:51.240
business for us. [pause ] So a little bit
about my

00:33:51.049 --> 00:33:52.490
company. Um, as I mentioned, we have around
four and a half

00:33:52.490 --> 00:33:54.070
thousand hotels. And, ah, our most upscale
brand is

00:33:54.070 --> 00:33:55.480
Intercontinental. Um, right -- there's one
right next door

00:33:55.480 --> 00:34:02.480
to here. Some of you may have spent the night
there or

00:34:09.370 --> 00:34:11.880
going to spend the night there tonight. Ah,
we have Crowne

00:34:11.880 --> 00:34:13.340
Plaza, Holiday Inn, Holiday Inn Express, Candlewood,
Daybridge, and Indigo. Um, so we get the advantages

00:34:13.340 --> 00:34:14.399
of the
Cloud that you would expect, um, robustness.

00:34:14.399 --> 00:34:16.020
We get speed,
reliability, all those things. And the heavy

00:34:16.020 --> 00:34:19.329
lifting is
done by Google. So my company doesn't have

00:34:19.329 --> 00:34:23.139
to worry about
setting up a database, opening up ports and

00:34:23.139 --> 00:34:23.490
the firewall,
providing Web services for our applications

00:34:23.490 --> 00:34:23.780
to access it.
Essentially, what we've done is we've gathered

00:34:23.780 --> 00:34:27.710
the data
about our hotels, longitude, latitude, do

00:34:27.710 --> 00:34:34.710
they have a pool,
do they have free breakfast, do they have

00:34:41.669 --> 00:34:48.669
free Internet,
those sorts of information that you might

00:34:52.200 --> 00:34:59.200
want to search on.
And we've pushed all that information out

00:35:05.240 --> 00:35:12.240
to the Cloud,
using what -- what Tom showed us a little

00:35:15.079 --> 00:35:22.079
bit earlier. We
push all that data out there. Then we can

00:35:24.920 --> 00:35:26.470
write
applications that search on that and display

00:35:26.470 --> 00:35:28.020
to our
customers on different applications like our

00:35:28.020 --> 00:35:32.760
Android App
that will be launched in a couple of weeks,

00:35:32.760 --> 00:35:39.760
our iPhone App,
which is on the market now doing really well,

00:35:46.240 --> 00:35:53.240
and also on
our Web sites. Um, so there's a couple of

00:35:58.300 --> 00:36:05.300
screen shots on
coming up, ah. But first I just wanted to

00:36:08.020 --> 00:36:15.020
show here's an
example query that you can see, which [pause

00:36:21.009 --> 00:36:28.009
 ] -- is very
simple. What -- Part of the beauty here, one

00:36:29.410 --> 00:36:36.410
of the reasons
I really like this is that the -- the query

00:36:41.440 --> 00:36:46.800
can be created
and passed a longitude-latitude radius at

00:36:46.800 --> 00:36:51.410
a distance. We
get back an XML. We can parse this XML and

00:36:51.410 --> 00:36:57.119
display it on a
map. So if anybody goes to HolidayInn.com

00:36:57.119 --> 00:37:03.720
or any of our
other seven brands, you'll see this technology

00:37:03.720 --> 00:37:10.720
being used
today. Or if you have an iPhone App, and you

00:37:16.780 --> 00:37:22.270
search find
near -- find hotels near my current location,

00:37:22.270 --> 00:37:27.150
it's using
this technology today. [ pause ] Here's a

00:37:27.150 --> 00:37:33.210
couple of screen
shots of the iPhone App, of Android App and

00:37:33.210 --> 00:37:40.210
the iPhone App.
[ pause ] So, when we were developing our

00:37:42.619 --> 00:37:49.619
iPhone App, we
ran into a situation where we realized the

00:37:53.160 --> 00:37:53.410
existing Web
services that we were using that were built

00:37:53.200 --> 00:37:55.770
for companies
like Travelocity and Expedia, they didn't

00:37:55.770 --> 00:37:57.510
have all the
information we needed. So the traditional

00:37:57.510 --> 00:38:04.460
route would have
been let's kick off a project and have our

00:38:04.460 --> 00:38:07.220
B2B team add
those new pieces of information that we need.

00:38:07.220 --> 00:38:08.130
Look,
somebody had an idea and said, you know, why

00:38:08.130 --> 00:38:08.760
don't we use
Google Maps Data API? And that was our first

00:38:08.760 --> 00:38:09.250
use of this
technology. We had -- we had resolution to

00:38:09.250 --> 00:38:09.740
our problem
within 24 hours. One of the developers stayed

00:38:09.740 --> 00:38:10.079
late,
crunched some code, gathered the data -- 

00:38:10.079 --> 00:38:10.520
gathered our
information up from our database, pushed it

00:38:10.520 --> 00:38:11.060
to the Google
Data API. Our data is on that infrastructure.

00:38:11.060 --> 00:38:11.599
The next day
we were searching on it and displaying on

00:38:11.599 --> 00:38:13.890
this map. So
that's a great example of a traditional map

00:38:13.890 --> 00:38:15.510
that -- which
may have taken a long time, and we'd had to

00:38:15.510 --> 00:38:17.550
have made time
for an existing team to put that into their

00:38:17.550 --> 00:38:20.400
schedule. And
we were able to do it overnight and have fast,

00:38:20.400 --> 00:38:22.760
reliable
service that you see. [ pause ] So, um, that's

00:38:22.760 --> 00:38:24.609
it. Ah,
just one closing thought on this is it's really

00:38:24.609 --> 00:38:26.450
simple. And
so that's one of the main features that I

00:38:26.450 --> 00:38:27.660
really like about
it. It's you push your data. You query against

00:38:27.660 --> 00:38:28.990
it using
REST queries or the Java API, which we're

00:38:28.990 --> 00:38:31.550
using. And your
results are, ah, back in a flash. And it's

00:38:31.550 --> 00:38:32.980
reliable. Um,
we plan on continuing this. You're going to

00:38:32.980 --> 00:38:34.250
see more and
more uses of this. We have all kinds of types

00:38:34.250 --> 00:38:35.030
of
information we'd like to eventually push out.

00:38:35.030 --> 00:38:36.119
But, for now,
ah, we're getting a lot of value out of it,

00:38:36.119 --> 00:38:36.450
and we're going
to continue using it.

00:38:36.450 --> 00:38:36.700
&gt;&gt; Tom Manshreck: Thanks, Steve.

00:38:36.640 --> 00:38:36.890
&gt;&gt; Steve Sullivan: Uh-huh. Sure.

00:38:36.830 --> 00:38:37.430
&gt;&gt; Tom Manshreck: Um, as I understand it,
you also used the

00:38:37.430 --> 00:38:38.130
driving directions, Web services that we launched
today.

00:38:38.130 --> 00:38:38.490
&gt;&gt; Steve Sullivan: That's correct.

00:38:38.490 --> 00:38:39.369
&gt;&gt; Tom Manshreck: Yeah. So -- so the point
is that I --

00:38:39.369 --> 00:38:41.089
that I showed you the Maps Data matched up,
um, with the --

00:38:41.089 --> 00:38:47.630
with a V3 App. You can also use any of the
Maps API family

00:38:47.630 --> 00:38:52.790
of services or other APIs and pull those things
together.

00:38:52.790 --> 00:38:54.560
Um, so once you do those, you can have geocoding,
um, you

00:38:54.560 --> 00:38:57.190
know, driving directions, elevation data we
launched -- we

00:38:57.190 --> 00:38:58.720
launched a couple of months ago, um, and the
Place API,

00:38:58.720 --> 00:39:00.420
which is coming out, ah, in June, which will
be especially

00:39:00.420 --> 00:39:01.970
important for June location. So, I'm kind
of wrapping up

00:39:01.970 --> 00:39:03.319
here, but I also wanted to give you a little
teaser. Um,

00:39:03.319 --> 00:39:05.240
we, of course, like to have all of the stuff
to you right

00:39:05.240 --> 00:39:05.490
now, but we do have them coming soon. Um,
you probably saw

00:39:05.359 --> 00:39:05.609
when I was doing that little Javascript that
I was parsing

00:39:05.460 --> 00:39:05.710
to KML. Now, parsing to KML within Javascript
is not

00:39:05.560 --> 00:39:06.240
necessarily, um, the most elegant experience.
Um, so we

00:39:06.240 --> 00:39:07.359
will be launching soon, ah, within the --
 by the end of, ah,

00:39:07.359 --> 00:39:09.339
Q2 -- by the end of June, um, a JSON feature
upload and

00:39:09.339 --> 00:39:09.589
download. Um, so there's no need to parse
KML. Of course,

00:39:09.480 --> 00:39:10.660
if you have JSON being returned within a Javascript
application, it's pretty easy to parse. It's

00:39:10.660 --> 00:39:14.020
also very easy
to parse in Python. Um, you probably don't

00:39:14.020 --> 00:39:18.410
need to -- to
change it because you're using Java, and Java

00:39:18.410 --> 00:39:18.660
is pretty
robust, XML parsing built in. Um -- Yeah.

00:39:18.430 --> 00:39:18.680
Um, well --
We'll have questions at the end; I'm sorry

00:39:18.460 --> 00:39:18.710
 -- ah, because
I'm almost done. And then the, ah, what we

00:39:18.490 --> 00:39:18.740
also want to
announce is on the Maps Data API is -- is

00:39:18.520 --> 00:39:18.770
a, ah, a -- a
great simple API for providing spatial data.

00:39:18.550 --> 00:39:22.800
Um, but if you
-- But if you have a ton of data that you

00:39:22.800 --> 00:39:24.890
want to do, like,
heat maps for -- in other words, fusion tables,

00:39:24.890 --> 00:39:28.030
we are proud
enough that we're going to be supporting fusion

00:39:28.030 --> 00:39:30.290
tables in
the Javascript API natively. Um, and what

00:39:30.290 --> 00:39:30.859
 -- what that
basically is going to do is you're going to

00:39:30.859 --> 00:39:35.290
be able to have
columns and perform sequel queries. So it's

00:39:35.290 --> 00:39:39.690
somewhat
similar to what we've done in the Maps Data

00:39:39.690 --> 00:39:45.300
API. With the
Maps Data API would be focused on attribute

00:39:45.300 --> 00:39:47.160
searches and
spatial searches. This would be an example

00:39:47.160 --> 00:39:47.480
of just
selecting, um, basic -- basic -- you're selecting

00:39:47.480 --> 00:39:47.920
your raw
data and putting up a heat map, for example.

00:39:47.920 --> 00:39:48.480
So, I will go
to hit the live blogging reminder. And, ah,

00:39:48.480 --> 00:39:48.940
I will
encourage you, ah, to ask questions. Let me

00:39:48.940 --> 00:39:49.960
bring that up
and refresh. Um, so you asked about JSON-C.

00:39:49.960 --> 00:39:50.970
So I have the
lead engineer here, and he'd like to talk

00:39:50.970 --> 00:39:52.290
for a bit.
[ pause ]

00:39:52.290 --> 00:39:53.140
&gt;&gt; Um, okay. Can everybody hear me? Um, well,
JSON-C is --

00:39:53.140 --> 00:39:54.060
is a sort of a compressed, flattened form
of JSON that's

00:39:54.060 --> 00:39:56.660
sort of easier to adjust if you have very
structured data.

00:39:56.660 --> 00:39:57.530
And if you look to the KML spec, it's got
lotta lotta deep

00:39:57.530 --> 00:39:57.839
structures. So you've got like, you know,
placemark, point,

00:39:57.839 --> 00:39:58.089
blah-blah, or polygon, LineString, style 
-- anyway. So --

00:39:58.069 --> 00:39:58.750
so JSON-C lets you, um, have a -- a bidirectional,
not

00:39:58.750 --> 00:39:59.000
necessarily lost list translation between
XML, the dome

00:39:58.810 --> 00:39:59.060
structure, and JSON. So you can have something
that's

00:39:58.880 --> 00:39:59.130
fairly flat and -- and very easy to adjust
and to manipulate

00:39:58.970 --> 00:39:59.220
in your program. Ah, and you can -- you can
always say just

00:39:59.060 --> 00:39:59.310
up equals JSON and -- and get a JSON, exact
JSON

00:39:59.240 --> 00:39:59.670
representation of -- of the -- the XML. Um,
but it'll be

00:39:59.670 --> 00:40:00.140
ugly, and it'll have the name, spaces, and
blah. And -- and

00:40:00.140 --> 00:40:00.569
we're very close to launching the JSON-C,
which is much

00:40:00.569 --> 00:40:00.819
cleaner and easier to use.

00:40:00.780 --> 00:40:01.030
&gt;&gt; [ inaudible question from the audience
 ]

00:40:01.000 --> 00:40:01.250
&gt;&gt; Yes, yes.

00:40:01.080 --> 00:40:01.330
&gt;&gt; Tom Manshreck: Yes. Yeah.

00:40:01.250 --> 00:40:01.500
&gt;&gt; [ inaudible question from the audience
 ]

00:40:01.470 --> 00:40:01.720
&gt;&gt; Oh, yes. Yes.

00:40:01.590 --> 00:40:01.840
&gt;&gt; Tom Manshreck: That fits.

00:40:01.760 --> 00:40:02.010
&gt;&gt; That's the whole idea.

00:40:01.940 --> 00:40:02.190
&gt;&gt; [ inaudible question from the audience
 ]

00:40:02.150 --> 00:40:02.400
&gt;&gt; Yes. Very much so.

00:40:02.320 --> 00:40:02.710
&gt;&gt; Tom Manshreck: So -- so -- so you asked
what -- whether

00:40:02.710 --> 00:40:05.079
it would still be accessible via -- via objects,
right, in

00:40:05.079 --> 00:40:05.349
Javascript.

00:40:05.349 --> 00:40:07.720
&gt;&gt; Right, right. So like -- like the coordinates.
In KML,

00:40:07.720 --> 00:40:09.579
it's, you know, coordinates are a bunch of
space-separated,

00:40:09.579 --> 00:40:09.829
comma-separated numbers.

00:40:09.579 --> 00:40:09.829
&gt;&gt; So, basically -- [ inaudible question from
the audience ]

00:40:09.589 --> 00:40:09.839
&gt;&gt; Right. Both ways.

00:40:09.599 --> 00:40:09.849
&gt;&gt; [ inaudible question from the audience
 ]

00:40:09.609 --> 00:40:09.859
&gt;&gt; Tom Manshreck: Yes.

00:40:09.609 --> 00:40:09.859
&gt;&gt; [ inaudible question from the audience
 ]

00:40:09.619 --> 00:40:09.869
&gt;&gt; Tom Manshreck: If -- if you want to use
it that way.

00:40:09.640 --> 00:40:10.160
Yeah, you can use it as a -- as a KML.

00:40:10.160 --> 00:40:10.410
&gt;&gt; Right. Right, you can -- you can -- yeah.
It's

00:40:10.160 --> 00:40:10.410
bidirectional.

00:40:10.160 --> 00:40:10.410
&gt;&gt; Tom Manshreck: Okay. Um, I want to -- 
I want to get to

00:40:10.180 --> 00:40:10.430
a couple of other questions. Um, what is the
plan to offer

00:40:10.190 --> 00:40:10.440
other Sort By options? Only distance sorting
appears

00:40:10.200 --> 00:40:10.450
possible. For example, what if I wanted to
sort by time or

00:40:10.210 --> 00:40:10.460
coffee rating? Um, I know that we've tossed
around some

00:40:10.220 --> 00:40:10.470
ideas for other sorting options, but, ah 
-- Bart, if you

00:40:10.230 --> 00:40:10.480
could, again, address this. Why don't you
come up here too.

00:40:10.240 --> 00:40:10.490
You're probably going to get most of these.
 [ pause ]

00:40:10.250 --> 00:40:10.500
&gt;&gt; Bart: Um, the answer for different sorting
options is

00:40:10.260 --> 00:40:10.510
real soon now. [ laughter ]

00:40:10.260 --> 00:40:10.510
&gt;&gt; Tom Manshreck: Um, that would be multi-attribute
search

00:40:10.270 --> 00:40:10.520
and stuff like that.

00:40:10.270 --> 00:40:10.520
&gt;&gt; Bart: Right. Right.

00:40:10.270 --> 00:40:10.520
&gt;&gt; Tom Manshreck: Um --

00:40:10.280 --> 00:40:10.530
&gt;&gt; Bart: And the merit properties and -- 
yeah.

00:40:10.280 --> 00:40:10.530
&gt;&gt; Tom Manshreck: Yeah. And it would, of course,
be good

00:40:10.290 --> 00:40:10.540
to sort on your arbitrary data, because that's
 -- that's

00:40:10.300 --> 00:40:10.550
what you want to do.

00:40:10.310 --> 00:40:10.560
&gt;&gt; Bart: Right.

00:40:10.310 --> 00:40:10.560
&gt;&gt; Tom Manshreck: Um, will Google Map Cloud
services

00:40:10.319 --> 00:40:10.569
support open geospatial consortium standard
APIs like WMS,

00:40:10.319 --> 00:40:10.690
WFMS, WFST, etc. in the future? I'm not actually
aware of

00:40:10.690 --> 00:40:10.940
-- of -- of those. I mean, obviously, we use
Atom --

00:40:10.810 --> 00:40:11.060
[ laughter ] -- which is the --

00:40:10.859 --> 00:40:11.109
&gt;&gt; Bart: Right. Atom and KML and -- and --
 and KML is

00:40:10.990 --> 00:40:11.240
acquiring other standards.

00:40:11.030 --> 00:40:11.280
&gt;&gt; Tom Manshreck: Yeah. I mean, K -- K --
 KML is our data

00:40:11.170 --> 00:40:11.420
format, um, ah, for the Maps Data API.

00:40:11.270 --> 00:40:11.520
&gt;&gt; Bart: They're -- they're all -- Well, I
shouldn't say

00:40:11.380 --> 00:40:11.630
they're all interchangeable. There are some
things you can

00:40:11.589 --> 00:40:11.839
do with these others. Um, but right now we're
focusing on

00:40:11.609 --> 00:40:11.859
-- on KML.

00:40:11.619 --> 00:40:11.869
&gt;&gt; Tom Manshreck: Yeah. Now, of course, if
there's demand,

00:40:11.640 --> 00:40:11.890
you'll let us know.

00:40:11.640 --> 00:40:11.890
&gt;&gt; Bart: Right. If you look at the KML, um,
um, reference,

00:40:11.670 --> 00:40:11.920
you'll see a few extensions to do with --
 with tours and so

00:40:11.700 --> 00:40:11.950
on. And -- and we need to have a good answer
to GPX data.

00:40:11.720 --> 00:40:11.970
Um, the great thing about standards is having
so many to

00:40:11.750 --> 00:40:12.000
choose from.

00:40:11.750 --> 00:40:12.000
&gt;&gt; Tom Manshreck: Yes. A question from the
audience.

00:40:11.770 --> 00:40:12.020
&gt;&gt; I don't see any documentation on the, ah,
developer guide

00:40:12.010 --> 00:40:15.150
about Search for Java. Is that the -- in the
library --

00:40:15.150 --> 00:40:15.400
&gt;&gt; Tom Manshreck: Search for -- for Java?

00:40:15.170 --> 00:40:15.420
&gt;&gt; Sorry. Ah, yeah.

00:40:15.170 --> 00:40:15.420
&gt;&gt; Tom Manshreck: Ah, I'm not aware of that,
but, ah, we

00:40:15.200 --> 00:40:15.450
can certainly look into that.

00:40:15.210 --> 00:40:15.460
&gt;&gt; Well, so, I mean, you get the -- there's
the example of,

00:40:15.230 --> 00:40:15.480
ah, HT -- HTTP protocol provides search, right?

00:40:15.250 --> 00:40:15.500
&gt;&gt; Tom Manshreck: Yes. Yeah. There are --
 There are

00:40:15.450 --> 00:40:15.770
similar -- ah, ah, functions in -- in Java.

00:40:15.770 --> 00:40:16.190
&gt;&gt; Bart: It's just a URL. There's no, like,
structured

00:40:16.190 --> 00:40:16.440
construction of a search query.

00:40:16.420 --> 00:40:16.710
&gt;&gt; There is a Java library to --

00:40:16.710 --> 00:40:16.960
&gt;&gt; Bart: To construct search queries?

00:40:16.720 --> 00:40:16.970
&gt;&gt; Well, I'm -- just in general for, um, um,
accessing the

00:40:16.760 --> 00:40:17.010
-- the Data API.

00:40:16.770 --> 00:40:17.020
&gt;&gt; Tom Manshreck: Yeah.

00:40:16.780 --> 00:40:17.030
&gt;&gt; Bart: Yeah, yeah. It's -- it's just a 
-- a feed. I

00:40:16.809 --> 00:40:17.059
mean, you can -- you can get the slash bit
feed or you can

00:40:16.920 --> 00:40:17.170
get the slash full projection and get, like,
everything with

00:40:16.920 --> 00:40:17.170
--

00:40:16.920 --> 00:40:17.170
&gt;&gt; Right.

00:40:16.920 --> 00:40:17.170
&gt;&gt; Bart: -- with all the features.

00:40:16.920 --> 00:40:17.170
&gt;&gt; Tom Manshreck: Yeah. I mean, the key point
is remember

00:40:16.920 --> 00:40:17.170
that it's a feature feed and that the query
is actually just

00:40:16.930 --> 00:40:17.180
extra parameters on top of that feature feed.

00:40:16.930 --> 00:40:17.180
&gt;&gt; Right.

00:40:16.930 --> 00:40:17.180
&gt;&gt; Tom Manshreck: So you can just do -- do
those in

00:40:16.930 --> 00:40:17.180
arbitrarily.

00:40:16.930 --> 00:40:17.180
&gt;&gt; Right. [ pause ]

00:40:16.930 --> 00:40:17.180
&gt;&gt; Tom Manshreck: Yes?

00:40:16.930 --> 00:40:17.180
&gt;&gt; I just had a question about, ah, it looks
a lot - a

00:40:16.940 --> 00:40:17.190
little like Bigtable. Is it being stored there
or is it

00:40:16.940 --> 00:40:17.190
separate?

00:40:16.940 --> 00:40:17.190
&gt;&gt; Bart: Is -- Is the data stored in Bigtable?
 [ laughter ]

00:40:16.940 --> 00:40:17.190
&gt;&gt; Yeah. Well --

00:40:16.940 --> 00:40:17.190
&gt;&gt; Tom Manshreck: I don't know. [ laughter
 ]

00:40:16.940 --> 00:40:17.190
&gt;&gt; You don't have to say it is.

00:40:16.940 --> 00:40:17.190
&gt;&gt; Tom Manshreck: I -- I don't know. And if
I did, I

00:40:16.950 --> 00:40:17.200
couldn't tell you. [ laughter ]

00:40:16.950 --> 00:40:17.200
&gt;&gt; Well, that's all right. But -- I guess
my question is --

00:40:16.950 --> 00:40:17.200
&gt;&gt; Bart: I could tell you, but I'd have to
kill myself.

00:40:16.950 --> 00:40:17.200
[ laughter ]

00:40:16.950 --> 00:40:17.200
&gt;&gt; What's -- What's the advantage of -- of
using the API

00:40:16.960 --> 00:40:17.210
versus, like, Bigtable, because Bigtable you
could do all

00:40:16.960 --> 00:40:17.210
those searches for the different attributes.
So, is there a

00:40:16.960 --> 00:40:17.210
speed or is there some sort of performance,
ah, that you

00:40:16.960 --> 00:40:17.210
could --

00:40:16.960 --> 00:40:17.210
&gt;&gt; Bart: Searches are blindingly fast. Um
 -- [ pause ]

00:40:16.960 --> 00:40:17.210
Can we talk about layers?

00:40:16.970 --> 00:40:17.220
&gt;&gt; Tom Manshreck: Um, what -- what layers?
The Fusion

00:40:16.970 --> 00:40:17.220
Table layers?

00:40:16.970 --> 00:40:17.220
&gt;&gt; Bart: No, no, no. The -- the -- the V3
layers.

00:40:16.970 --> 00:40:17.220
&gt;&gt; Tom Manshreck: Yeah, we -- we have, ah,
a -- a V3 KML

00:40:16.970 --> 00:40:17.220
layer object that you can provide a public
URL. And it will

00:40:16.980 --> 00:40:17.230
render those KML. It renders them as an MVC
object. So

00:40:16.980 --> 00:40:17.230
that means that if you -- it will only pull
those features

00:40:16.980 --> 00:40:17.230
in that are in your viewport as you move around.
It will

00:40:16.980 --> 00:40:17.230
load those -- those in dynamically. And that
is -- is very

00:40:16.990 --> 00:40:17.240
fast, you know. So that's -- that's an option
for getting

00:40:16.990 --> 00:40:17.240
your data very quickly.

00:40:16.990 --> 00:40:17.240
&gt;&gt; Bart: Right, yeah, um.

00:40:16.990 --> 00:40:17.240
&gt;&gt; Okay. Thank you.

00:40:16.990 --> 00:40:17.240
&gt;&gt; Tom Manshreck: Okay.

00:40:16.990 --> 00:40:17.240
&gt;&gt; Bart: Sorry. [ laughter ]

00:40:16.990 --> 00:40:17.240
&gt;&gt; Tom Manshreck: Any other questions?

00:40:16.990 --> 00:40:17.240
&gt;&gt; Um, the Fusion Tables, I was playing around
with that a

00:40:17.000 --> 00:40:17.250
little bit. Is -- is there an overlap between
Fusion Tables

00:40:17.000 --> 00:40:17.250
and this Maps Data API? When should I use
one? When should

00:40:17.000 --> 00:40:17.250
I use the other?

00:40:17.000 --> 00:40:17.250
&gt;&gt; Tom Manshreck: Ah, I would say, obviously,
if you're

00:40:17.010 --> 00:40:17.260
doing a spatial search. Um, if you're also
trying to get

00:40:17.010 --> 00:40:17.260
something up to speed very quickly, Maps Data
API is where

00:40:17.010 --> 00:40:17.260
-- where you would go. Um, Fusion Tables was
originally

00:40:17.010 --> 00:40:17.260
designed to -- to have large columns of data
sets, um, for

00:40:17.020 --> 00:40:17.270
example, to -- to, you know, -- to find, ah,
you know, the

00:40:17.020 --> 00:40:17.270
millimeters of rainfall in Brazil and do it
by -- by

00:40:17.020 --> 00:40:17.270
location. And then you can just have a huge
column of that.

00:40:17.020 --> 00:40:17.270
Um, it's -- it's -- it's -- Obviously, there's
some things

00:40:17.030 --> 00:40:17.280
you can do with both. Um, Fusion Tables have
heat maps,

00:40:17.030 --> 00:40:17.280
which Maps Data API doesn't. So, if you want
to provide

00:40:17.030 --> 00:40:17.280
some sort of heat maps that basically shows
denser

00:40:17.030 --> 00:40:17.280
populations, you definitely would want to
go with Fusion

00:40:17.040 --> 00:40:17.290
Tables. If you want to do Search, you'd want
to go with the

00:40:17.040 --> 00:40:17.290
Maps Data API.

00:40:17.040 --> 00:40:17.290
&gt;&gt; So, I can leverage Fusion Tables that show
a heat map on

00:40:17.040 --> 00:40:17.290
my Google Maps Advert V3, ah, Web page?

00:40:17.040 --> 00:40:17.290
&gt;&gt; Tom Manshreck: Yes.

00:40:17.050 --> 00:40:17.300
&gt;&gt; Bart: Right.

00:40:17.050 --> 00:40:17.300
&gt;&gt; I don't have to get a separate utility
library or

00:40:17.050 --> 00:40:17.300
something like that?

00:40:17.050 --> 00:40:17.300
&gt;&gt; Tom Manshreck: Nope. It will be -- it will
be native.

00:40:17.050 --> 00:40:17.300
&gt;&gt; Oh. Okay.

00:40:17.050 --> 00:40:17.300
&gt;&gt; Bart: Basically, it's a URL with a query,
SQL query.

00:40:17.050 --> 00:40:17.300
Moments there. Um, I don't know what Fusion
Tables has for

00:40:17.059 --> 00:40:17.309
an API yet. They may not have a --

00:40:17.059 --> 00:40:17.309
&gt;&gt; Tom Manshreck: They -- they -- they do
have a public

00:40:17.059 --> 00:40:17.309
API.

00:40:17.059 --> 00:40:17.309
&gt;&gt; Bart: Okay. Okay.

00:40:17.059 --> 00:40:17.309
&gt;&gt; Tom Manshreck: Um, and because it's MVC,
I'm not -- I'm

00:40:17.059 --> 00:40:17.309
not sure, but I would think that you could
modify the query,

00:40:17.069 --> 00:40:17.319
for example, and it will update with, ah,
V3. It's -- It's

00:40:17.069 --> 00:40:17.319
MVC, meaning Model-View-Controller.

00:40:17.069 --> 00:40:17.319
&gt;&gt; Bart: Right.

00:40:17.069 --> 00:40:17.319
&gt;&gt; Tom Manshreck: You can update the query
and it would

00:40:17.069 --> 00:40:17.319
update the data that -- that's shown, which,
of course, is

00:40:17.079 --> 00:40:17.329
very powerful.

00:40:17.079 --> 00:40:17.329
&gt;&gt; Bart: Right.

00:40:17.079 --> 00:40:17.329
&gt;&gt; All right.

00:40:17.079 --> 00:40:17.329
&gt;&gt; Bart: Obviously, there's -- there's a lot
of overlap.

00:40:17.079 --> 00:40:17.329
And, ah, right.

00:40:17.079 --> 00:40:17.329
&gt;&gt; Tom Manshreck: Okay. Well, it's the end
of the day.

00:40:17.079 --> 00:40:17.329
Thank you, ah, for attending my talk and staying
up. And

00:40:17.089 --> 00:40:17.339
get -- ah, enjoy the party tonight. Ah, take
care.

00:40:17.089 --> 00:40:17.339
[ applause ]

