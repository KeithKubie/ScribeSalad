WEBVTT
Kind: captions
Language: en

00:00:00.230 --> 00:00:03.270
Alright. I want you to guess my word, using this hill

00:00:03.270 --> 00:00:04.400
climbing approach that we've just been

00:00:04.400 --> 00:00:06.790
talking about. And unfortunately, well, we

00:00:06.790 --> 00:00:09.800
tried this will actual words and the space is a little bit

00:00:09.800 --> 00:00:12.300
big and frustrating. But what we can do instead is pretend that

00:00:12.300 --> 00:00:14.550
a five bit sequence is a word. So, I'm thinking of

00:00:14.550 --> 00:00:17.880
a word and by word I mean five bits. And what we're

00:00:17.880 --> 00:00:21.060
going to do is I'm going to give you, for each time you guess

00:00:21.060 --> 00:00:25.560
a 5-bit sequence, I'm going to tell you the number of correct bits.

00:00:25.560 --> 00:00:28.960
So in each position it's, it's, if you matched what I am

00:00:28.960 --> 00:00:31.880
thinking in that position, then I give you an additional point for that.

00:00:31.880 --> 00:00:33.160
&gt;&gt; Okay.

00:00:33.160 --> 00:00:34.520
&gt;&gt; And you're going to now step

00:00:34.520 --> 00:00:37.830
through the hill-climbing algorithm. Okay, so three

00:00:37.830 --> 00:00:42.690
things. 1, if you had done eight bits, that would be a word. And.

00:00:42.690 --> 00:00:44.950
&gt;&gt; Oh. Nice.

00:00:44.950 --> 00:00:48.700
&gt;&gt; 2, four bits is a nibble. Okay, here's

00:00:48.700 --> 00:00:50.740
the third thing. We need to define a neighbor function.

00:00:50.740 --> 00:00:53.360
So, I'm going to define a neighbor function. So, I can think

00:00:53.360 --> 00:00:57.750
about this. This is all one bit differences from where you are.

00:00:57.750 --> 00:01:01.410
&gt;&gt; That's good and, and an interesting question is, was it your

00:01:01.410 --> 00:01:03.330
job to come up with that or was it my job to come

00:01:03.330 --> 00:01:05.370
up with that? Now is it, is it part of the problem

00:01:05.370 --> 00:01:07.760
or is it part of the algorithm that's trying to solve the problem?

00:01:07.760 --> 00:01:09.470
&gt;&gt; Huh. I'm going to say it's a part

00:01:09.470 --> 00:01:11.410
of the algorithm that's trying to solve the problem.

00:01:11.410 --> 00:01:12.330
&gt;&gt; That's how I think of it, too.

00:01:12.330 --> 00:01:13.860
&gt;&gt; Alright, so, we have to start

00:01:13.860 --> 00:01:15.900
somewhere, so let's just pretend for the sake

00:01:15.900 --> 00:01:17.720
of argument that we start it at all five zeros.

00:01:17.720 --> 00:01:20.050
&gt;&gt; And I'm going to give you a score of two for that.

00:01:20.050 --> 00:01:25.120
&gt;&gt; Okay. And so now I have to do all possible neighbors, and there are five

00:01:25.120 --> 00:01:30.206
of them. So there is one followed by four zeros. 01 followed by

00:01:30.206 --> 00:01:35.140
three zeroes and you know, the rest of the identity.

00:01:35.140 --> 00:01:38.174
&gt;&gt; Alright, here is all your neighbors for the x, you're aware.

00:01:38.174 --> 00:01:38.520
&gt;&gt; Mm-hm.

00:01:38.520 --> 00:01:40.890
&gt;&gt; And here is the scores for all of those neighbors.

00:01:40.890 --> 00:01:41.980
&gt;&gt; So,

00:01:41.980 --> 00:01:44.500
there are three of them that are maximal

00:01:44.500 --> 00:01:47.010
but for the sake of simplicity and drawing,

00:01:47.010 --> 00:01:50.810
I am going to stick with the first one. So you can get rid of the bottom four.

00:01:50.810 --> 00:01:52.650
&gt;&gt; Alright, so here is our new x.

00:01:52.650 --> 00:01:54.930
&gt;&gt; Okay. And now I have to try

00:01:54.930 --> 00:01:56.970
all different. So one of the neighbors would be

00:01:56.970 --> 00:01:58.470
all zeroes. But I already know what that

00:01:58.470 --> 00:02:00.630
is. So I don't have to worry about that.

00:02:00.630 --> 00:02:01.790
&gt;&gt; That's good. So the algorithm, the

00:02:01.790 --> 00:02:03.590
pseudocode that we wrote didn't do that,

00:02:03.590 --> 00:02:05.660
do that optimization but in general if

00:02:05.660 --> 00:02:07.880
as long as the neighborhood function is symmetric

00:02:07.880 --> 00:02:09.520
then you can save yourself a little bit of effort.

00:02:09.520 --> 00:02:12.670
&gt;&gt; Right, so, or we can just keep track of everything that we've ever seen,

00:02:12.670 --> 00:02:14.940
although that gets very space inefficient very quickly.

00:02:14.940 --> 00:02:17.470
And since it's the identity maker's [UNKNOWN] with

00:02:17.470 --> 00:02:23.150
the one matrix. [LAUGH] Okay, so what are the numbers to that one? Wow, that's

00:02:23.150 --> 00:02:24.947
pretty cool! So, you said we're getting there

00:02:24.947 --> 00:02:27.454
very quickly. So, it's going to be, so, [CROSSTALK]

00:02:27.454 --> 00:02:30.470
&gt;&gt; In fact, we now, have enough information, that

00:02:30.470 --> 00:02:32.860
smart human being could actually jump to the, optimum.

00:02:32.860 --> 00:02:33.620
&gt;&gt; Yeah, I

00:02:33.620 --> 00:02:34.990
think we do. I was actually thinking about that.

00:02:34.990 --> 00:02:36.260
&gt;&gt; Let's see what happened.

