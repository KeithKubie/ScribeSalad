WEBVTT
Kind: captions
Language: en

00:00:05.651 --> 00:00:07.849
Hello, we're David y Maciek,

00:00:07.849 --> 00:00:10.222
web application
development experts.

00:00:10.222 --> 00:00:13.189
The two of us have designed
this course for Hackademy

00:00:13.189 --> 00:00:14.618
about Google App Engine,

00:00:14.618 --> 00:00:16.750
the auto-scalable platform
by Google that will allow you

00:00:16.750 --> 00:00:19.354
to create scalable applications
for thousands of users

00:00:19.354 --> 00:00:21.552
without having to worry
about the infrastructure

00:00:21.552 --> 00:00:23.981
of the servers necessary
for its operation.

00:00:23.981 --> 00:00:26.189
In this version
we will accompany Paco,

00:00:26.189 --> 00:00:28.816
a web developer that works
in the local census office,

00:00:28.816 --> 00:00:31.519
step by step while developing
his application.

00:00:31.519 --> 00:00:34.057
We will cover all the necessary
basic aspects

00:00:34.057 --> 00:00:37.024
to help Paco develop
with Google App Engine,

00:00:37.024 --> 00:00:38.849
and we will explain
some good procedures

00:00:38.849 --> 00:00:41.420
that are integral
to use this platform.

00:00:41.420 --> 00:00:43.981
Grab your tools and help us

00:00:43.981 --> 00:00:45.519
develop Paco's application.

00:00:45.519 --> 00:00:47.948
HELP US DEVELOP
PACO'S APPLICATION!

00:00:48.354 --> 00:00:51.156
This year, the office wants
to make the population

00:00:51.156 --> 00:00:53.717
information capturing process
a lot more efficient.

00:00:53.717 --> 00:00:56.024
Paco's task
is to create a web tool

00:00:56.024 --> 00:00:59.057
that allows people to enter
and register some data.

00:00:59.057 --> 00:01:01.156
Initially,
it will be somewhat simple,

00:01:01.156 --> 00:01:03.618
for example:
the number of people

00:01:03.618 --> 00:01:05.849
that make up the family nucleus

00:01:05.849 --> 00:01:07.387
or the educational level
of family members.

00:01:07.387 --> 00:01:09.816
The census application
will expect to receive

00:01:09.816 --> 00:01:12.420
some 30 million people
in a period of two days.

00:01:12.420 --> 00:01:14.453
This means that if traffic
is equally divided

00:01:14.453 --> 00:01:17.684
between 6:00 a.m. and 8:00 p.m.,

00:01:17.684 --> 00:01:20.189
Paco will have to design
the system in such a way

00:01:20.189 --> 00:01:21.849
that it's able to process

00:01:21.849 --> 00:01:24.585
at least 298 applications
a second.

00:01:24.585 --> 00:01:26.222
But this rarely happens.

00:01:26.222 --> 00:01:28.321
The most common scenario
is that users enter

00:01:28.321 --> 00:01:30.387
certain hours of the day,
causing peaks,

00:01:30.387 --> 00:01:32.420
and the application
will need to attend

00:01:32.420 --> 00:01:34.321
to between 1 and 2 thousand
applications a second.

00:01:34.321 --> 00:01:37.255
Something like 120 thousand
transactions every minute.

00:01:37.255 --> 00:01:39.816
The most important:
the application must be ready

00:01:39.816 --> 00:01:41.420
in 30 days.

00:01:44.189 --> 00:01:46.486
What technology stack
would you recommend Paco use

00:01:46.486 --> 00:01:48.255
to build his application?

00:01:48.255 --> 00:01:50.816
What would the most
important points be

00:01:50.816 --> 00:01:52.420
to keep in mind
during development?

00:01:52.717 --> 00:01:54.453
Let's think for a minute.

00:01:54.453 --> 00:01:56.453
If Paco tries
to configure a solution

00:01:56.453 --> 00:01:59.222
with traditional architecture,
he would need to:

00:01:59.222 --> 00:02:01.750
equip a web server
able to attend to

00:02:01.750 --> 00:02:03.981
the 2 thousand applications
per second;

00:02:03.981 --> 00:02:06.354
equip a database system

00:02:06.354 --> 00:02:08.057
with similar capacities;

00:02:08.057 --> 00:02:10.981
equip a cache system
to guarantee

00:02:10.981 --> 00:02:12.684
good performance
from the application.

00:02:12.684 --> 00:02:14.420
But Paco knows that web servers

00:02:14.420 --> 00:02:16.354
are temperamental
and they like to go down

00:02:16.354 --> 00:02:18.189
at the worst moment.

00:02:18.189 --> 00:02:20.849
That's why he plans
to have at least two servers

00:02:20.849 --> 00:02:22.222
working in parallel,

00:02:22.222 --> 00:02:24.420
in such a way that,
if one fails,

00:02:24.420 --> 00:02:26.585
the other can continue
to function

00:02:26.585 --> 00:02:27.783
and the census can develop
without any problems.

00:02:27.783 --> 00:02:30.585
Since servers with a memory
of more than 32 GB

00:02:30.585 --> 00:02:32.288
are relatively expensive,

00:02:32.288 --> 00:02:34.222
Paco decided to use four servers

00:02:34.222 --> 00:02:36.519
with 32 GB of memory each one.

00:02:36.519 --> 00:02:38.981
At this time,
Paco's necessary function costs

00:02:38.981 --> 00:02:41.453
during 2 weeks

00:02:41.453 --> 00:02:43.750
to complete configuration tests

00:02:43.750 --> 00:02:45.420
are approximately 1,200 dollars.

00:02:45.420 --> 00:02:47.882
But he still needs to solve
various problems:

00:02:47.882 --> 00:02:50.486
contract a similar configuration
for the database that will store

00:02:50.486 --> 00:02:53.684
the information and another
for the cache system,

00:02:53.684 --> 00:02:55.882
at the same time
he implements a reliable way

00:02:55.882 --> 00:02:59.156
to monitor his servers.
All this keeps adding costs

00:02:59.156 --> 00:03:01.189
and a lot of work to the project.

00:03:01.189 --> 00:03:04.156
With all of this to do,
it's better to work quickly,

00:03:04.156 --> 00:03:06.057
or it's possible the project

00:03:06.057 --> 00:03:07.552
won't be ready on time.

00:03:07.552 --> 00:03:09.255
Paco will be in charge
of implementing

00:03:09.255 --> 00:03:11.783
the application, but,
with only 30 days available,

00:03:11.783 --> 00:03:13.948
Will Paco be able to equip
all the infrastructure

00:03:13.948 --> 00:03:15.321
the servers need?

00:03:15.387 --> 00:03:18.519
App Engine is a platform
for application development,

00:03:18.519 --> 00:03:21.222
completely scalable
and managed by Google.

00:03:21.222 --> 00:03:23.948
Paco quickly notices that,
with Google App Engine,

00:03:23.948 --> 00:03:26.915
he can develop the application
with his favorite language

00:03:26.915 --> 00:03:30.090
and he can begin to test it

00:03:30.090 --> 00:03:31.684
as soon as
the first prototype is ready,

00:03:31.684 --> 00:03:34.156
without having to deal with

00:03:34.156 --> 00:03:36.189
any server
configuration aspects.

00:03:36.189 --> 00:03:39.585
With App Engine, Paco's
application will automatically scale

00:03:39.585 --> 00:03:42.552
the number of requests
from entering traffic

00:03:42.552 --> 00:03:45.585
and complete the thousands
of consults per second needed.

00:03:45.585 --> 00:03:47.981
In addition, it will help him
to save money

00:03:47.981 --> 00:03:51.156
by destroying the requests
when they are no longer needed.

00:03:51.354 --> 00:03:54.222
But, what will happen
to the database?

00:03:54.222 --> 00:03:56.684
With App Engine,
the application database

00:03:56.684 --> 00:03:59.123
will function through
Google Datastore.

00:03:59.123 --> 00:04:01.420
Datastore is
a distributed database,

00:04:01.420 --> 00:04:03.453
that makes sure
there are multiple copies

00:04:03.453 --> 00:04:04.651
of each record.

00:04:04.651 --> 00:04:07.222
In addition, the information
will always be available,

00:04:07.222 --> 00:04:09.519
even when census
application traffic

00:04:09.519 --> 00:04:11.915
grows higher
than initially planned for.

00:04:12.156 --> 00:04:14.552
Since Google App Engine
offers free services

00:04:14.552 --> 00:04:17.024
to developers, Paco decides
not to wait any longer

00:04:17.024 --> 00:04:18.486
and to try it now.

00:04:18.486 --> 00:04:19.915
The only thing he has to do

00:04:19.915 --> 00:04:22.057
is start developing
his application.

00:04:22.057 --> 00:04:24.189
A great way to start
familiarizing yourself

00:04:24.189 --> 00:04:26.717
with Google App Engine is
through the official documents.

00:04:26.717 --> 00:04:28.882
There you will find
a large amount of information

00:04:28.882 --> 00:04:30.849
about how
the platform functions,

00:04:30.849 --> 00:04:33.288
as well as the different
services offered.

00:04:33.288 --> 00:04:35.387
Don't forget to download
the code that comes

00:04:35.387 --> 00:04:37.288
with the lessons
from the GitHub repo.

00:04:37.288 --> 00:04:40.948
KEEP PROGRAMMING!

