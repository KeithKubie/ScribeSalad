WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
[Evans] I hope everyone understands the main idea behind the hash table now.

00:00:04.000 --> 00:00:07.000
Our goal is to map a keyword and the number of buckets

00:00:07.000 --> 00:00:11.000
using a hash&lt;u&gt;string function to a particular bucket,&lt;/u&gt;

00:00:11.000 --> 00:00:16.000
and that bucket will contain all of the keywords that map to that location.

00:00:16.000 --> 00:00:19.000
So now what we're going to do is try to actually write the code to do this.

00:00:19.000 --> 00:00:23.000
We're going to start from our index that we wrote for the previous unit

00:00:23.000 --> 00:00:27.000
but try to figure out how to implement that with a hash table instead.

00:00:27.000 --> 00:00:30.000
The first question is, how is this going to change our data structure?

00:00:30.000 --> 00:00:32.000
This was what we had before.

00:00:32.000 --> 00:00:35.000
If you remember, we had our index was a list of keywords.

00:00:35.000 --> 00:00:42.000
We had a list of entries, and each entry was a pair, which was a keyword,

00:00:42.000 --> 00:00:49.000
and the second element of the pair was a list of the URLs where that word appears.

00:00:49.000 --> 00:00:56.000
And we would have each word in the index as its own entry with its own list of URLs.

00:00:56.000 --> 00:00:59.000
So this was the data structure that we used last class.

00:00:59.000 --> 00:01:03.000
Now we want to change things to implement a hash table.

00:01:03.000 --> 00:01:07.000
I want you to think about what data structure I'll use, and we'll make that a quiz

00:01:07.000 --> 00:01:11.000
to decide a good data structure to use to implement the hash table.

00:01:11.000 --> 00:01:14.000
The question is, which of these data structures would make most sense

00:01:14.000 --> 00:01:16.000
to implement the hash table index?

00:01:16.000 --> 00:01:19.000
The first choice is a list where the elements in the list

00:01:19.000 --> 00:01:23.000
are a list where the first element is a word and the second element is a list of URLs

00:01:23.000 --> 00:01:25.000
where that word appears.

00:01:25.000 --> 00:01:30.000
The second choice is a list where each element in the list is a list itself

00:01:30.000 --> 00:01:33.000
where the first element is a word and the second element is a list of lists

00:01:33.000 --> 00:01:37.000
where each element in that list is a list of URLs.

00:01:37.000 --> 00:01:41.000
The third choice is a list where each element is a list

00:01:41.000 --> 00:01:45.000
where the element lists themselves contain lists

00:01:45.000 --> 00:01:52.000
where the element lists of the element lists are a list of a word followed by a list of all the URLs

00:01:52.000 --> 00:01:54.000
where that word appears.

00:01:54.000 --> 00:01:58.000
So we have 3 nested lists for choice 3.

00:01:58.000 --> 00:02:02.000
For choice 4 we have a list where each element of the list is a list

00:02:02.000 --> 00:02:05.000
where within the element list there's another list

00:02:05.000 --> 00:02:09.000
which is a list of words followed by a list of URLs.

00:02:09.000 --> 00:02:13.000
And for the final choice we also have 3 nested lists

00:02:13.000 --> 00:02:16.000
where each element list is a list where the elements of that list are lists

00:02:16.000 --> 00:02:22.000
that are a word followed by a list where each element in that list is a list of URLs.

00:02:22.000 --> 99:59:59.000
So which one of these would be the best structure to use to implement a hash table?

