WEBVTT
Kind: captions
Language: en

00:00:00.520 --> 00:00:02.230
You may have gotten a lot of these

00:00:02.230 --> 00:00:05.450
abstractions yourself, but let's walk through and think

00:00:05.450 --> 00:00:09.290
about all the abstractions that sit between the

00:00:09.290 --> 00:00:13.460
electrons and holes, and applications at the top. We've

00:00:13.460 --> 00:00:16.230
already talked about the transistor, we know at

00:00:16.230 --> 00:00:19.560
the lowest level of the hierarchy, the movement of

00:00:19.560 --> 00:00:22.670
the electrons in the holes. Are governed by

00:00:22.670 --> 00:00:25.980
the laws of physics. And as I mentioned earlier,

00:00:25.980 --> 00:00:30.030
transistor reigns in the randomness in the movement

00:00:30.030 --> 00:00:32.770
of electrons and holes, and gives us an

00:00:32.770 --> 00:00:34.910
abstraction of a switching device, which is the

00:00:34.910 --> 00:00:38.430
transistor. Using the switching device which is a transistor,

00:00:38.430 --> 00:00:41.390
we can implement. The next level up in

00:00:41.390 --> 00:00:45.060
the hierarchy which are logic gates. Here is where

00:00:45.060 --> 00:00:46.934
the and- gates and the or-gates and the

00:00:46.934 --> 00:00:51.980
not-gates come in, where we are implementing Boolean logic

00:00:51.980 --> 00:00:57.620
using transistor as a switching device. Sequential and combination logic

00:00:57.620 --> 00:01:04.550
elements are implemented using logic gates such as and, not and or. Logic

00:01:04.550 --> 00:01:10.310
elements. Sequential and combination logic elements are then organized into a

00:01:10.310 --> 00:01:13.630
data pack, depending on what hardware

00:01:13.630 --> 00:01:17.570
circuitry, or functionality we want to implement.

00:01:17.570 --> 00:01:21.470
The data pack establishes the communication paths

00:01:21.470 --> 00:01:25.216
we need between these combinational, and sequential

00:01:25.216 --> 00:01:28.600
logic elements. To realize whatever is the

00:01:28.600 --> 00:01:32.300
hardware device that we're trying to design, and

00:01:32.300 --> 00:01:36.820
the control part of it is a finite shaped machine that controls the data

00:01:36.820 --> 00:01:40.800
path, and implements the repertoire of the

00:01:40.800 --> 00:01:43.740
hardware device that we are trying to realize.

00:01:43.740 --> 00:01:50.730
And for instance, if. The intent is to implement a processor, then

00:01:50.730 --> 00:01:56.750
the instructions in the processor have to be implemented using the data pad, and

00:01:56.750 --> 00:02:01.970
controlled by the control logic. Next level up in this hierarchy is the

00:02:01.970 --> 00:02:05.310
instruction set architecture. This is the

00:02:05.310 --> 00:02:09.350
abstraction that is defined by a processor.

00:02:09.350 --> 00:02:14.550
When you hear the promo commercial, for instance, that says Intel Inside, it

00:02:14.550 --> 00:02:19.820
is the ISA, or the Instruction Set Architecture that is being talked about

00:02:19.820 --> 00:02:24.990
by the promo. Buried within. This term ISA,

00:02:24.990 --> 00:02:29.820
or the abstraction ISA, is all the details of how the

00:02:29.820 --> 00:02:35.130
ISA is actually implemented by the data path and

00:02:35.130 --> 00:02:39.720
the control logic. Now we come to software. Sitting on top of the

00:02:39.720 --> 00:02:43.460
Instruction Set Architecture, is the system software.

00:02:43.460 --> 00:02:46.780
Operating systems, compilers, run-time systems and so

00:02:46.780 --> 00:02:51.540
on, that exercise the instructions provided by

00:02:51.540 --> 00:02:55.360
the processor architecture. Finally, we have apps

00:02:55.360 --> 00:03:00.490
on top. This is where applications like Google Earth come in. Notice that the

00:03:00.490 --> 00:03:02.990
abstraction that is used by the

00:03:02.990 --> 00:03:06.780
applications themselves is the high level language

00:03:06.780 --> 00:03:09.800
in which these applications are written. The

00:03:09.800 --> 00:03:13.240
system software component such as the compiler,

00:03:13.240 --> 00:03:16.790
translate the high level language used.

00:03:16.790 --> 00:03:20.230
In writing these applications into the instructions

00:03:20.230 --> 00:03:22.430
that can be executed on the processor.

00:03:22.430 --> 00:03:25.910
Similarly, the operating system provides interface for

00:03:25.910 --> 00:03:29.310
the applications to request services of

00:03:29.310 --> 00:03:31.690
the operating system. For instance, to access

00:03:31.690 --> 00:03:35.340
specific devices. During the execution of

00:03:35.340 --> 00:03:39.320
the application, or for getting resources such

00:03:39.320 --> 00:03:44.960
as memory. On demand, those are the functions provided by the operating system

00:03:44.960 --> 00:03:47.530
as an abstraction. Thus, the instruction

00:03:47.530 --> 00:03:51.910
set is the meeting point between software.

00:03:51.910 --> 00:03:58.010
And hardware. It serves as the abstraction needed by the system software, for

00:03:58.010 --> 00:04:02.080
example, the compiler, to generate the code

00:04:02.080 --> 00:04:05.590
that corresponds to the high-level language constructs

00:04:05.590 --> 00:04:11.800
that are being used in coding up an application. The software, whether it is.

00:04:11.800 --> 00:04:17.660
At the system software level or at the application level does not care and

00:04:17.660 --> 00:04:20.990
does not know how this instruction set may

00:04:20.990 --> 00:04:25.590
actually be implemented down below. Meaning the implementation

00:04:25.590 --> 00:04:27.800
of the instruction set itself in terms of

00:04:27.800 --> 00:04:31.780
data path and control. The sequential logic, elements that

00:04:31.780 --> 00:04:33.900
sit below that, are the logic gates of

00:04:33.900 --> 00:04:36.500
the transistor, or finally the electrons and [INAUDIBLE],

00:04:36.500 --> 00:04:39.550
they don't care what programs are running on

00:04:39.550 --> 00:04:43.050
top of the processor. So the instruction said architecture

00:04:43.050 --> 00:04:46.250
is the meeting point between software and

00:04:46.250 --> 00:04:50.192
hardware. The hardware implementation simply fulfils the

00:04:50.192 --> 00:04:54.880
contract. Of realizing the instructions of architecture

00:04:54.880 --> 00:04:57.920
of the processor. Operation system is the

00:04:57.920 --> 00:05:03.160
abstraction level we will be focusing on in this course, which is a course

00:05:03.160 --> 00:05:05.840
on advanced operating systems. You will have

00:05:05.840 --> 00:05:10.140
the opportunity to learn about other levels.

00:05:10.140 --> 00:05:13.810
In this hierarchy, from other courses that are offered through this program.

