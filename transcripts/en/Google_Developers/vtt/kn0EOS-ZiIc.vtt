WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.826
[MUSIC PLAYING]

00:00:04.710 --> 00:00:07.294
EMILY: Hey, I'm Emily
from the Flutter team.

00:00:07.294 --> 00:00:09.210
In this video, we're
going to talk about using

00:00:09.210 --> 00:00:11.460
the key parameter on widgets.

00:00:11.460 --> 00:00:13.410
If you're wondering what
the heck a widget is,

00:00:13.410 --> 00:00:15.270
I recommend going back
to the first video

00:00:15.270 --> 00:00:17.280
in the series, where we
introduced the building

00:00:17.280 --> 00:00:18.810
blocks of Flutter.

00:00:18.810 --> 00:00:21.420
Keys preserve state
when widgets move around

00:00:21.420 --> 00:00:22.680
in your widget tree.

00:00:22.680 --> 00:00:25.680
They can be used to preserve
the user's scroll location,

00:00:25.680 --> 00:00:28.740
or keeping state when
modifying a collection.

00:00:28.740 --> 00:00:31.200
In this video, we'll
cover three things--

00:00:31.200 --> 00:00:35.010
when you need keys, where to
put them in your widget tree,

00:00:35.010 --> 00:00:37.180
and which key is right for you.

00:00:37.180 --> 00:00:38.520
[BELL DINGING]

00:00:38.520 --> 00:00:41.600
So when do you need to use keys?

00:00:41.600 --> 00:00:43.100
Most of the time, you don't.

00:00:43.100 --> 00:00:45.860
But if you find yourself
adding, removing, or reordering

00:00:45.860 --> 00:00:49.520
collection of widgets of the
same type that hold some state,

00:00:49.520 --> 00:00:52.170
it's key time.

00:00:52.170 --> 00:00:55.410
No, key time.

00:00:55.410 --> 00:00:58.550
An example of this
is a to-do list app.

00:00:58.550 --> 00:01:01.490
When using the app, you want
to reorder the items based

00:01:01.490 --> 00:01:03.950
on your to-do list
based on priority,

00:01:03.950 --> 00:01:06.480
and then remove them
when you're done.

00:01:06.480 --> 00:01:09.410
Another example is the Hacker
News app in the Flutter Boring

00:01:09.410 --> 00:01:10.430
Show.

00:01:10.430 --> 00:01:12.920
Adding keys prevented
the story widgets

00:01:12.920 --> 00:01:15.530
from incorrectly picking
up old state when

00:01:15.530 --> 00:01:18.320
the list view was rebuilt.

00:01:18.320 --> 00:01:21.200
To illustrate why you need
keys in this situation,

00:01:21.200 --> 00:01:24.410
I wrote an extremely simple
app with two randomly colored

00:01:24.410 --> 00:01:27.770
widgets that swap places
when you tap a button.

00:01:27.770 --> 00:01:29.660
Here's the code for the app.

00:01:29.660 --> 00:01:31.640
It consists of a
stateful widget,

00:01:31.640 --> 00:01:35.570
called PositionedTiles, that
constructs two stateless tiles,

00:01:35.570 --> 00:01:37.760
and places them in a row.

00:01:37.760 --> 00:01:40.730
When I tap the Floating Action
button down at the bottom,

00:01:40.730 --> 00:01:44.340
it swaps their position
in the list, as expected.

00:01:44.340 --> 00:01:46.620
But what happens if we
make those colorful tiles

00:01:46.620 --> 00:01:49.250
stateful instead of
stateless, and store

00:01:49.250 --> 00:01:51.380
the color in the state?

00:01:51.380 --> 00:01:55.110
Now, when I hit the button, it
looks like nothing is changing.

00:01:55.110 --> 00:01:58.310
But if I add a key
to each tile widget,

00:01:58.310 --> 00:02:01.220
the widgets swap
places like you expect.

00:02:01.220 --> 00:02:03.230
Remember, though,
if the entire widget

00:02:03.230 --> 00:02:07.460
subtree in your collection is
stateless, keys aren't needed.

00:02:07.460 --> 00:02:09.289
Technically, this
is all you need

00:02:09.289 --> 00:02:11.990
to know to use keys in your
apps for most simple situations.

00:02:15.050 --> 00:02:16.670
Now that everyone's
left, we can go

00:02:16.670 --> 00:02:18.260
into how keys work
under the covers

00:02:18.260 --> 00:02:21.340
when Flutter renders
these widgets.

00:02:21.340 --> 00:02:24.090
In the stateless widget
version, the row widget

00:02:24.090 --> 00:02:27.060
has a set of ordered
slots for its children.

00:02:27.060 --> 00:02:29.670
As you've seen in the earlier
episodes of the series,

00:02:29.670 --> 00:02:33.930
for every widget, Flutter
builds a corresponding element.

00:02:33.930 --> 00:02:36.480
The element tree is
extremely simple,

00:02:36.480 --> 00:02:38.580
only holding information
about the type

00:02:38.580 --> 00:02:42.306
of each widget and a reference
to children elements.

00:02:42.306 --> 00:02:43.680
You can think of
the element tree

00:02:43.680 --> 00:02:46.350
like a skeleton of
your Flutter app.

00:02:46.350 --> 00:02:48.324
It shows the
structure of your app,

00:02:48.324 --> 00:02:49.740
but all the
additional information

00:02:49.740 --> 00:02:53.250
can be looked up via reference
to the original widget.

00:02:53.250 --> 00:02:56.580
When we swap the order of
the tile widgets in the row,

00:02:56.580 --> 00:02:58.530
Flutter walks the
element tree to see

00:02:58.530 --> 00:03:01.440
if the skeletal
structure is the same.

00:03:01.440 --> 00:03:05.910
It starts with the row element
and then moves to its children.

00:03:05.910 --> 00:03:09.690
The element tree checks that
the new widget is the same type

00:03:09.690 --> 00:03:11.950
and key as the old one.

00:03:11.950 --> 00:03:16.050
And if so, it updates its
reference to the new widget.

00:03:16.050 --> 00:03:18.420
In this case, the
widgets don't have keys,

00:03:18.420 --> 00:03:21.300
so Flutter just checks the type.

00:03:21.300 --> 00:03:24.060
It does the same for
the second child.

00:03:24.060 --> 00:03:26.910
Now, let's run through
the same scenario again,

00:03:26.910 --> 00:03:30.420
only this time with
stateful tile widgets.

00:03:30.420 --> 00:03:34.230
You can see I've got the same
widgets and elements as before,

00:03:34.230 --> 00:03:37.080
but now there are a pair
of state objects with them.

00:03:37.080 --> 00:03:40.020
And the color information
is being stored there, not

00:03:40.020 --> 00:03:41.910
in the widgets themselves.

00:03:41.910 --> 00:03:44.820
So this time, when I swap
the order of the two widgets,

00:03:44.820 --> 00:03:47.280
Flutter walks the
element tree, checks

00:03:47.280 --> 00:03:50.980
the type of the row widget,
and updates the reference.

00:03:50.980 --> 00:03:54.060
Then, tile element checks that
the corresponding widget is

00:03:54.060 --> 00:03:56.280
the same type-- a tile widget--

00:03:56.280 --> 00:03:57.650
and it is.

00:03:57.650 --> 00:04:00.030
And it does the same
for the second child.

00:04:00.030 --> 00:04:03.780
Flutter uses the element tree
and its corresponding state

00:04:03.780 --> 00:04:06.785
to determine what to actually
display on your device.

00:04:06.785 --> 00:04:08.910
So from our perspective,
it looks like your widgets

00:04:08.910 --> 00:04:10.520
didn't properly swap.

00:04:10.520 --> 00:04:13.160
In the second version,
with the stateful tiles,

00:04:13.160 --> 00:04:15.930
I added key properties
to the widgets.

00:04:15.930 --> 00:04:19.170
Now if we swap the widgets, the
row widgets match like before,

00:04:19.170 --> 00:04:21.420
but the key of the
tile element doesn't

00:04:21.420 --> 00:04:24.540
match the key of the
corresponding tile widget.

00:04:24.540 --> 00:04:27.360
So Flutter deactivates
those elements,

00:04:27.360 --> 00:04:30.500
moving the references to the
tile elements in the element

00:04:30.500 --> 00:04:34.180
tree, starting with the
first one that doesn't match.

00:04:34.180 --> 00:04:37.500
Then Flutter looks through
the non-matched children

00:04:37.500 --> 00:04:40.260
for an element with
the corresponding key.

00:04:40.260 --> 00:04:42.660
It finds a match, and
updates its reference

00:04:42.660 --> 00:04:44.970
to the corresponding widget.

00:04:44.970 --> 00:04:48.390
Flutter then does the same
thing for the second child.

00:04:48.390 --> 00:04:51.480
Now, Flutter will display what
we expect, with the widgets

00:04:51.480 --> 00:04:53.950
swapping places and
updating their color.

00:04:53.950 --> 00:04:56.220
So, in summary, keys
are useful if you're

00:04:56.220 --> 00:05:00.210
modifying the order or number of
staple widgets in a collection.

00:05:00.210 --> 00:05:02.880
For the sake of illustration,
I stored the color as state

00:05:02.880 --> 00:05:04.020
in this example.

00:05:04.020 --> 00:05:06.660
Often, though, state
is much more subtle.

00:05:06.660 --> 00:05:10.500
Playing animations, displaying
data that the user has entered,

00:05:10.500 --> 00:05:13.660
and scroll location
all involve state.

00:05:13.660 --> 00:05:17.370
So you have a scenario where
you need a key for your app.

00:05:17.370 --> 00:05:18.210
Where do you put it?

00:05:18.210 --> 00:05:21.450
The answer is to specify a
key at the top of the widget

00:05:21.450 --> 00:05:23.250
subtree that you
need to preserve.

00:05:23.250 --> 00:05:25.692
Since we've been talking
about state so much,

00:05:25.692 --> 00:05:27.900
you might think that it is
the first stateful widget.

00:05:27.900 --> 00:05:31.290
But (SPEAKING WITH STERN
MONOTONE) you'd be wrong.

00:05:31.290 --> 00:05:34.380
To show you why, I wrapped
my colorful tile widgets

00:05:34.380 --> 00:05:38.220
with padding widgets, but I
left the keys on the tiles.

00:05:38.220 --> 00:05:40.050
Now when I click the
button, the tiles

00:05:40.050 --> 00:05:42.810
change to completely
different random colors.

00:05:42.810 --> 00:05:44.140
What's going on?

00:05:44.140 --> 00:05:46.140
Here's what the widget
tree and the element tree

00:05:46.140 --> 00:05:49.170
look like with the
padding widgets added.

00:05:49.170 --> 00:05:51.780
When we swapped the
positions of the children,

00:05:51.780 --> 00:05:54.600
Flutter's element-to-widget
matching algorithm

00:05:54.600 --> 00:05:57.750
looks at one level of
the tree at a time.

00:05:57.750 --> 00:06:00.270
I grayed out the children's
children in the diagram

00:06:00.270 --> 00:06:03.090
so we can focus on
one level at a time.

00:06:03.090 --> 00:06:05.130
At that first level of
children, everything

00:06:05.130 --> 00:06:06.540
matches up correctly.

00:06:06.540 --> 00:06:08.430
At the second level,
Flutter notices

00:06:08.430 --> 00:06:10.380
that the key of the
tile element doesn't

00:06:10.380 --> 00:06:11.610
match the key of the widget.

00:06:11.610 --> 00:06:13.740
So it deactivates
that tile element,

00:06:13.740 --> 00:06:15.420
dropping those connections.

00:06:15.420 --> 00:06:18.690
The keys we're using in
this example are local keys.

00:06:18.690 --> 00:06:22.170
That means that when matching
up widgets to elements,

00:06:22.170 --> 00:06:24.390
Flutter only looks
for a key that

00:06:24.390 --> 00:06:27.600
matches within a particular
level in the tree.

00:06:27.600 --> 00:06:30.150
Since it can't
find a tile element

00:06:30.150 --> 00:06:33.570
at that level with that key
value, it creates a new one,

00:06:33.570 --> 00:06:35.400
and initializes a new state.

00:06:35.400 --> 00:06:38.490
In this case, making
the widget orange.

00:06:38.490 --> 00:06:40.860
The same problem happens
for the other tile.

00:06:40.860 --> 00:06:44.400
If we add keys at the level
of the padding widgets,

00:06:44.400 --> 00:06:47.070
Flutter notices the problem,
and updates the connections

00:06:47.070 --> 00:06:50.430
correctly, just like it did
in our previous example.

00:06:50.430 --> 00:06:53.440
Order is restored
in the universe.

00:06:53.440 --> 00:06:57.542
So now you know when to use
keys and where to put them.

00:06:57.542 --> 00:06:59.500
But if you looked at the
Flutter documentation,

00:06:59.500 --> 00:07:01.708
you'll see there are several
different kinds of keys.

00:07:01.708 --> 00:07:03.030
So which one should you use?

00:07:03.030 --> 00:07:04.680
In the scenario where
you're modifying

00:07:04.680 --> 00:07:07.710
a collection of widgets, like
the swapping colored tiles

00:07:07.710 --> 00:07:10.470
example, you only need to
distinguish between the keys

00:07:10.470 --> 00:07:12.139
of other children.

00:07:12.139 --> 00:07:13.680
Take a look at the
information you're

00:07:13.680 --> 00:07:15.930
storing in those
child widgets to help

00:07:15.930 --> 00:07:18.110
understand what widget to use.

00:07:18.110 --> 00:07:22.100
In a to-do list app, we might
expect the text of a to-do item

00:07:22.100 --> 00:07:23.936
to be constant and unique.

00:07:23.936 --> 00:07:25.310
If that's the
case, it's probably

00:07:25.310 --> 00:07:27.310
a good candidate
for a value key,

00:07:27.310 --> 00:07:29.090
where the text is the value.

00:07:29.090 --> 00:07:31.580
Now suppose that instead,
each child widget

00:07:31.580 --> 00:07:34.250
stores a more complex
combination of data.

00:07:34.250 --> 00:07:37.310
Perhaps you have an address
book app that listed information

00:07:37.310 --> 00:07:38.990
about each user.

00:07:38.990 --> 00:07:41.390
Any of the individual
fields, like a first name

00:07:41.390 --> 00:07:44.150
or a birthday, might be
the same as another entry,

00:07:44.150 --> 00:07:46.670
but the combination is unique.

00:07:46.670 --> 00:07:50.480
In this scenario, an object key
is probably most appropriate.

00:07:50.480 --> 00:07:52.700
If you have multiple
widgets in your collection

00:07:52.700 --> 00:07:55.160
with the same value, or if
you want to really ensure

00:07:55.160 --> 00:07:57.650
that each widget is
distinct from all others,

00:07:57.650 --> 00:07:59.270
you can use the UniqueKey.

00:07:59.270 --> 00:08:01.250
I used the UniqueKey
in the example app

00:08:01.250 --> 00:08:03.710
because we didn't have any
other constant data that we're

00:08:03.710 --> 00:08:05.510
storing on our
tiles, and we don't

00:08:05.510 --> 00:08:09.380
know what the color will be
until we construct the widget.

00:08:09.380 --> 00:08:11.630
But one thing you
don't want to use

00:08:11.630 --> 00:08:14.210
is a random number in your key.

00:08:14.210 --> 00:08:16.874
Every time a widget gets
built, a new random number

00:08:16.874 --> 00:08:18.290
will be generated,
and you'll lose

00:08:18.290 --> 00:08:20.660
the consistency between frames.

00:08:20.660 --> 00:08:23.750
Then you might not as well have
used keys in the first place.

00:08:23.750 --> 00:08:26.120
Page storage keys
are specialized keys

00:08:26.120 --> 00:08:28.730
that store a user's scroll
location so the app can

00:08:28.730 --> 00:08:30.620
preserve it for later.

00:08:30.620 --> 00:08:32.570
Global keys have two uses.

00:08:32.570 --> 00:08:35.360
They allow widgets to change
parents anywhere in your app

00:08:35.360 --> 00:08:37.850
without losing
state, or they can

00:08:37.850 --> 00:08:40.880
be used to access information
about another widget

00:08:40.880 --> 00:08:43.820
in a completely different
part of the widget tree.

00:08:43.820 --> 00:08:45.680
An example of the
first scenario might

00:08:45.680 --> 00:08:48.020
be if you want to show
the same widget on two

00:08:48.020 --> 00:08:50.960
different screens, but
holding all the same states.

00:08:50.960 --> 00:08:52.490
You'd want to use a global key.

00:08:52.490 --> 00:08:54.170
In the second
scenario, maybe you

00:08:54.170 --> 00:08:55.900
want to validate a
password, but you

00:08:55.900 --> 00:08:57.650
don't want to share
that state information

00:08:57.650 --> 00:08:59.930
with other widgets in the tree.

00:08:59.930 --> 00:09:02.614
Often, though, global keys are
a little like global variables.

00:09:02.614 --> 00:09:04.280
There is usually a
better way to look up

00:09:04.280 --> 00:09:06.320
that state using
inherited widgets,

00:09:06.320 --> 00:09:09.180
or something like redux
or the block pattern.

00:09:09.180 --> 00:09:12.680
So, in summary, use keys when
you want to preserve state

00:09:12.680 --> 00:09:14.270
across widget trees.

00:09:14.270 --> 00:09:15.920
This most commonly
occurs when you're

00:09:15.920 --> 00:09:19.310
modifying a collection of
widgets of the same type,

00:09:19.310 --> 00:09:20.990
like in a list.

00:09:20.990 --> 00:09:24.122
Put the key at the top of the
widget tree you want preserved,

00:09:24.122 --> 00:09:25.580
and choose the key
type that you're

00:09:25.580 --> 00:09:29.690
using based on the type of data
you're storing in that widget.

00:09:29.690 --> 00:09:32.545
For more documentation,
check out flutter.io.

00:09:32.545 --> 00:09:33.170
Happy creating.

00:09:33.170 --> 00:09:36.820
[MUSIC PLAYING]

