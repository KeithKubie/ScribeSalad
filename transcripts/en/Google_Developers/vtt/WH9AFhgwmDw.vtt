WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.944
[MUSIC PLAYING]

00:00:02.387 --> 00:00:04.970
COLT MCANLIS: Understanding how
to make a great performing app

00:00:04.970 --> 00:00:06.810
has everything to do
with understanding

00:00:06.810 --> 00:00:08.520
what's going on under the hood.

00:00:08.520 --> 00:00:10.440
If you don't know what
the hardware is doing,

00:00:10.440 --> 00:00:12.485
you've got a good chance
of using it poorly.

00:00:12.485 --> 00:00:13.860
My name is Colt
McAnlis, and when

00:00:13.860 --> 00:00:15.600
it comes to rendering
your application,

00:00:15.600 --> 00:00:18.270
understanding how Android
is utilizing the GPU

00:00:18.270 --> 00:00:20.620
can go a long way to
understanding your performance

00:00:20.620 --> 00:00:21.500
problems.

00:00:21.500 --> 00:00:24.340
The main question is this--
how does your activity actually

00:00:24.340 --> 00:00:25.550
get drawn to the screen?

00:00:25.550 --> 00:00:28.390
Or rather, how does all that
crazy XML and markup language

00:00:28.390 --> 00:00:31.620
turn into pixels that the
user can see and understand?

00:00:31.620 --> 00:00:35.266
At its core, this is done with a
process known as rasterization.

00:00:35.266 --> 00:00:37.140
This is the process of
taking some high level

00:00:37.140 --> 00:00:40.250
object like a string or a
button or a path or a shape

00:00:40.250 --> 00:00:43.810
and turning it into pixels in
the texture or on your screen.

00:00:43.810 --> 00:00:47.542
Now, rasterization is a really,
really time consuming process.

00:00:47.542 --> 00:00:49.000
And as such there's
a special piece

00:00:49.000 --> 00:00:50.900
of hardware in
your mobile device

00:00:50.900 --> 00:00:52.900
that's designed to make
it happen a lot faster.

00:00:52.900 --> 00:00:56.050
The graphics processing
unit, or GPU,

00:00:56.050 --> 00:00:58.750
was introduced to mainstream
computers back in the '90s

00:00:58.750 --> 00:01:01.410
to help accelerate the
rasterization process.

00:01:01.410 --> 00:01:03.440
The GPU itself is
designed to use

00:01:03.440 --> 00:01:05.820
a specific set of primitives,
dominately polygons

00:01:05.820 --> 00:01:08.510
and textures, or as you
may call them, images.

00:01:08.510 --> 00:01:11.114
And your CPU is responsible
for feeding these primitives

00:01:11.114 --> 00:01:12.530
to your GPU before
it can actually

00:01:12.530 --> 00:01:14.000
draw anything to the screen.

00:01:14.000 --> 00:01:16.240
This is done with a
common API on Android

00:01:16.240 --> 00:01:20.190
known as OpenGL ES, which
means that any time your UI

00:01:20.190 --> 00:01:22.640
objects like buttons
or paths or checkboxes

00:01:22.640 --> 00:01:24.830
need to be drawn to
the screen, they first

00:01:24.830 --> 00:01:28.130
need to be converted on the
CPU to polygons and textures

00:01:28.130 --> 00:01:31.086
before being passed off
to the GPU to rasterize.

00:01:31.086 --> 00:01:32.710
And, as you would
imagine, this process

00:01:32.710 --> 00:01:36.040
of converting a UI object into
a set of polygons and textures

00:01:36.040 --> 00:01:38.360
is not really the
fastest of operations.

00:01:38.360 --> 00:01:41.440
Likewise, needing to upload
it from the CPU to the GPU

00:01:41.440 --> 00:01:43.774
really isn't that fast
either, which makes sense then

00:01:43.774 --> 00:01:46.190
that you would want to reduce
the number of times you have

00:01:46.190 --> 00:01:48.660
to convert an object as
well as the number of times

00:01:48.660 --> 00:01:50.490
you have to upload
it for drawing.

00:01:50.490 --> 00:01:53.180
Now, thankfully,
OpenGL ES API allows

00:01:53.180 --> 00:01:56.022
you to upload content to
the GPU and leave it there.

00:01:56.022 --> 00:01:58.230
When you'd like to draw a
button again in the future,

00:01:58.230 --> 00:02:00.396
you simply need to reference
the mesh that's already

00:02:00.396 --> 00:02:04.070
resident in GPU memory and just
tell OpenGL how to draw it.

00:02:04.070 --> 00:02:06.000
The general rule is
this-- optimizing

00:02:06.000 --> 00:02:09.180
for rendering performance means
getting as much data on the GPU

00:02:09.180 --> 00:02:11.500
as fast as possible
and then leave it there

00:02:11.500 --> 00:02:14.140
without modifying it
for as long as possible.

00:02:14.140 --> 00:02:17.130
See, every time you update a
resource that's on the GPU,

00:02:17.130 --> 00:02:19.260
you're losing precious
processing time.

00:02:19.260 --> 00:02:21.670
And this is a rule that the
Android system lives by--

00:02:21.670 --> 00:02:23.369
to make rendering performant.

00:02:23.369 --> 00:02:25.910
For example, resources that are
provided by your theme-- that

00:02:25.910 --> 00:02:28.400
is bitmaps and drawables--
are grouped together

00:02:28.400 --> 00:02:30.840
into a single texture
and uploaded to the GPU

00:02:30.840 --> 00:02:34.210
on your behalf alongside
commonly used polygon meshes

00:02:34.210 --> 00:02:35.616
like nine patches.

00:02:35.616 --> 00:02:36.990
This means that
any time you draw

00:02:36.990 --> 00:02:38.392
a view that uses
these resources,

00:02:38.392 --> 00:02:39.850
we don't have to
do any conversion.

00:02:39.850 --> 00:02:42.810
See, all the content is
already resident on the GPU,

00:02:42.810 --> 00:02:46.490
making these type of views
really fast to display.

00:02:46.490 --> 00:02:48.650
However, this process
gets more and more complex

00:02:48.650 --> 00:02:51.350
as UI objects get more
and more advanced.

00:02:51.350 --> 00:02:53.980
For example, displaying
images, means

00:02:53.980 --> 00:02:56.480
loading these images
on the CPU into memory

00:02:56.480 --> 00:02:59.220
and then transferring them
over to the GPU to draw.

00:02:59.220 --> 00:03:01.342
Using paths creates
a whole separate mass

00:03:01.342 --> 00:03:02.800
as we might need
to actually create

00:03:02.800 --> 00:03:04.680
a chain of polygons in the CPU.

00:03:04.680 --> 00:03:07.160
Or even make a masking
texture on the GPU

00:03:07.160 --> 00:03:08.610
that approximates the shape.

00:03:08.610 --> 00:03:11.112
Drawing text is like a
complete double whammy.

00:03:11.112 --> 00:03:12.070
I mean, think about it.

00:03:12.070 --> 00:03:14.510
On the CPU side we actually
have to rasterize the glyphs

00:03:14.510 --> 00:03:17.590
to a texture and then
upload that over to the GPU,

00:03:17.590 --> 00:03:19.980
and then go back and for
each character in our string,

00:03:19.980 --> 00:03:23.640
draw a rectangle that references
those glyphs on the GPU memory.

00:03:23.640 --> 00:03:27.135
And animations can make this
whole thing even more complex.

00:03:27.135 --> 00:03:29.260
See, depending on how you're
changing your visuals,

00:03:29.260 --> 00:03:32.040
you may have to incur all the
overhead of updating your GPU

00:03:32.040 --> 00:03:35.755
resources again and again
and again every single frame.

00:03:35.755 --> 00:03:38.380
And this doesn't even cover all
the other crazy GPU performance

00:03:38.380 --> 00:03:38.880
stuff.

00:03:38.880 --> 00:03:41.890
For instance, rather than
redrawing the whole application

00:03:41.890 --> 00:03:44.280
every frame, Android
saves performance

00:03:44.280 --> 00:03:47.200
by only updating and drawing
the area of the screen that's

00:03:47.200 --> 00:03:50.700
actually been modified, not
to mention all the CPU side

00:03:50.700 --> 00:03:52.532
conversions and
uploads that Android

00:03:52.532 --> 00:03:53.990
has to go through
to get everything

00:03:53.990 --> 00:03:56.150
ready to render in
a performant manner.

00:03:56.150 --> 00:03:57.800
But here's the
tricky part, in order

00:03:57.800 --> 00:04:00.580
to provide a smooth,
luscious user experience,

00:04:00.580 --> 00:04:03.550
you have to accomplish all
the code updates, GPU resource

00:04:03.550 --> 00:04:06.990
updates, and final rendering
in 16 milliseconds per frame

00:04:06.990 --> 00:04:09.820
of your animation-- every frame.

00:04:09.820 --> 00:04:11.310
Or at least that's
the goal, which

00:04:11.310 --> 00:04:13.976
is why you need to check out the
rest of the Android Performance

00:04:13.976 --> 00:04:16.209
Patterns content to help
supercharge the rendering

00:04:16.209 --> 00:04:18.141
pipeline in your application.

00:04:18.141 --> 00:04:20.640
Oh, and don't forget to join
our Google+ community for other

00:04:20.640 --> 00:04:24.080
great tips and tricks and
advice from more developers.

00:04:24.080 --> 00:04:26.240
As always, keep calm,
profile your code,

00:04:26.240 --> 00:04:28.202
and remember, perf matters.

00:04:28.202 --> 00:04:32.896
[MUSIC PLAYING]

