WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
[Evans] Let's try to define a hash function that has these properties.

00:00:04.000 --> 00:00:08.000
What we want the hash function to do is to take a string as its input--

00:00:08.000 --> 00:00:12.000
we'll call the hash function hash&lt;u&gt;string--&lt;/u&gt;

00:00:12.000 --> 00:00:18.000
and it will produce as its output a number between 0 and b.

00:00:18.000 --> 00:00:21.000
We also need another input to our hash string

00:00:21.000 --> 00:00:24.000
which is going to be the size of the hash table.

00:00:24.000 --> 00:00:30.000
So that will be the second input is the size of the hash table, the number of buckets.

00:00:30.000 --> 00:00:33.000
What we haven't seen yet that we're going to need for this function

00:00:33.000 --> 00:00:36.000
is a way to turn a string into a number.

00:00:36.000 --> 00:00:42.000
Python provides an operation to do that. It's called ord for ordinal.

00:00:42.000 --> 00:00:44.000
And what ord takes as its input is a 1-letter string

00:00:44.000 --> 00:00:48.000
and produces as its output a number.

00:00:48.000 --> 00:00:51.000
The actual mapping between strings and numbers is not so important.

00:00:51.000 --> 00:00:55.000
We just want something that's going to map different strings to different numbers.

00:00:55.000 --> 00:00:58.000
There's another operator that goes in the opposite direction

00:00:58.000 --> 00:01:06.000
that takes in a number and outputs the 1-letter string that corresponds to that number.

00:01:06.000 --> 00:01:09.000
The property these functions have is they're inverses,

00:01:09.000 --> 00:01:14.000
that if we take the character corresponding to the ordinal

00:01:14.000 --> 00:01:18.000
corresponding to any 1-letter string--we'll call that alpha--

00:01:18.000 --> 00:01:23.000
what we get as a result is the same alpha that we passed in.

00:01:23.000 --> 00:01:28.000
Let's try a few examples in the Python interpreter to see how ord and chr work.

00:01:28.000 --> 00:01:34.000
We'll print ord('a'), and when we run that we see we get the number 97.

00:01:34.000 --> 00:01:42.000
If we try print ord('A'), that's different. We get 65.

00:01:42.000 --> 00:01:48.000
And if we print ord('B'), we get 66.

00:01:48.000 --> 00:01:51.000
So the numbers are sort of sensible.

00:01:51.000 --> 00:01:57.000
B is higher than A. The lower case letters have different ordinals than the upper case.

00:01:57.000 --> 00:02:03.000
If we try lower case b, we should expect to get 98, and that is indeed what we get.

00:02:03.000 --> 00:02:06.000
These are the numbers based on the ASCII character encoding.

00:02:06.000 --> 00:02:09.000
What the actual numbers are are not very important for us

00:02:09.000 --> 00:02:12.000
other than that we get different numbers for different letters.

00:02:12.000 --> 00:02:17.000
So we'll be able to use the results of ord to make different strings hash to different values

00:02:17.000 --> 00:02:22.000
and just to show that they are inverses.

00:02:22.000 --> 00:02:25.000
If we do ord('u') and then chr of that,

00:02:25.000 --> 00:02:32.000
what we get back is the single letter string u that we started with.

00:02:32.000 --> 00:02:35.000
The limit of ord is it only works on 1-letter strings.

00:02:35.000 --> 00:02:41.000
If it provided a mapping from any string to a number that would be useful for a hash table,

00:02:41.000 --> 00:02:43.000
then we'd be done, but it doesn't do that.

00:02:43.000 --> 00:02:46.000
If we try running it on a multi-letter string, we get an error.

00:02:46.000 --> 00:02:50.000
It says that ord expects a single character but it got a string of length 7.

00:02:50.000 --> 00:02:55.000
So we're going to need to use ord only on single letter strings.

00:02:55.000 --> 00:02:58.000
So with ord we have a way of converting strings to numbers,

00:02:58.000 --> 00:03:00.000
converting single character strings to numbers.

00:03:00.000 --> 00:03:03.000
The other property we need our hash function to have

00:03:03.000 --> 00:03:07.000
is that the output number is always between 0 and b -1.

00:03:07.000 --> 00:03:11.000
We need it to be in that range because we're going to use that to index the list

00:03:11.000 --> 99:59:59.000
to find the bucket where that string belongs.

