WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.240
Android - PadrÃµes de desempenho

00:00:02.240 --> 00:00:05.660
Do you want your material design
inspired animation to be battery smooth

00:00:05.660 --> 00:00:10.070
on the user's wrist and having the bonus
of being power efficient as well?

00:00:10.260 --> 00:00:11.530
I'm Hoi Lam.

00:00:11.530 --> 00:00:14.150
With a few simple but not
always obvious tricks,

00:00:14.150 --> 00:00:17.670
you can make your apps run smoothly
without straining the battery.

00:00:17.670 --> 00:00:19.000
Let's take a look.

00:00:19.600 --> 00:00:23.940
One of the most important considerations
is the manipulation of large bitmaps.

00:00:24.000 --> 00:00:27.280
It is an expensive operation,
and you can save hugely

00:00:27.280 --> 00:00:29.920
by resizing bitmaps to what is needed
for your screen

00:00:29.920 --> 00:00:33.570
and crop the invisible
or transparent pixels out.

00:00:34.450 --> 00:00:39.150
For example, in the Santa watch face
we published during the 2014 holidays,

00:00:39.150 --> 00:00:42.610
we removed the transparent
areas around Santa's hand.

00:00:42.610 --> 00:00:48.110
This reduced bitmap size by 97%
and increased frame rate by 56%.

00:00:48.740 --> 00:00:51.880
The reason for this performance gain
is that, on some devices,

00:00:51.880 --> 00:00:53.939
bitmaps are software rasterized.

00:00:54.520 --> 00:00:58.230
Getting rid of transparent pixels
greatly reduces the amount of work,

00:00:58.230 --> 00:01:00.620
which, of course, increases performance.

00:01:02.020 --> 00:01:05.580
Second, if you have a complex
and static graphical element,

00:01:05.580 --> 00:01:07.880
make sure that you only draw it once.

00:01:08.430 --> 00:01:11.180
For example, take my colleague's
open source project,

00:01:11.180 --> 00:01:12.840
the "ultimate stopwatch".

00:01:13.280 --> 00:01:16.100
Drawing all the elements
of the watch face in every frame

00:01:16.100 --> 00:01:19.970
would have cost about 
100 to 150 milliseconds per frame.

00:01:20.530 --> 00:01:24.510
If you do the math, that's only
about 10 frames per second.

00:01:25.450 --> 00:01:28.640
So instead of redrawing the
watch face in every frame,

00:01:28.640 --> 00:01:30.837
the app draws it once and saves it.

00:01:31.170 --> 00:01:34.110
When it redraws a frame,
it can load the saved watch face

00:01:34.110 --> 00:01:36.240
and draw the hand on top of it.

00:01:36.940 --> 00:01:38.800
So how do we implement this?

00:01:39.310 --> 00:01:41.070
Well, there are two ways.

00:01:41.070 --> 00:01:44.928
The first applies to general application
with a view hierarchy.

00:01:45.740 --> 00:01:48.960
The second relates to the specific case
of the watch face,

00:01:48.960 --> 00:01:51.120
which does not have a view hierarchy.

00:01:51.950 --> 00:01:54.810
For applications, you can refactor
the static background

00:01:54.810 --> 00:01:58.800
into a separate custom view
and set this layer type to hardware.

00:01:59.480 --> 00:02:01.530
For this type of view, the onDraw method

00:02:01.530 --> 00:02:04.890
will only be called once
when the view is first shown.

00:02:05.560 --> 00:02:08.950
Remember, this should only
be done for complex shapes.

00:02:09.550 --> 00:02:13.660
If the app just needs to draw a bitmap,
separating this into another layer

00:02:13.670 --> 00:02:15.720
will not improve performance.

00:02:15.720 --> 00:02:18.510
For watch faces, which do
not have a view hierarchy,

00:02:18.510 --> 00:02:23.090
and are not hardware accelerated,
override the onSizeChanged method

00:02:23.090 --> 00:02:24.790
in the watch face engine.

00:02:25.450 --> 00:02:29.480
Initiate your background object,
connect it to a canvas object,

00:02:29.480 --> 00:02:31.200
and draw on that.

00:02:31.200 --> 00:02:35.030
Whatever you draw on this canvas
will automatically be saved

00:02:35.030 --> 00:02:36.560
to the background bitmap.

00:02:37.490 --> 00:02:41.172
Of course, like all things
in computer science, there are trade-offs.

00:02:41.440 --> 00:02:44.840
In the case of offscreen canvas
rendering, there are two.

00:02:45.140 --> 00:02:49.490
First, we need to ask whether this
is faster than just drawing the image.

00:02:49.930 --> 00:02:53.339
In the case of the ultimate stopwatch,
the answer is yes.

00:02:53.450 --> 00:02:56.200
For a simpler design,
the answer may be no.

00:02:56.850 --> 00:03:00.450
Luckily, there is a simple way
to help you make the correct decision.

00:03:00.840 --> 00:03:04.430
You can use the Android Device Monitor
to see how your application

00:03:04.430 --> 00:03:05.950
or watch face is running.

00:03:06.350 --> 00:03:11.670
In Android Studio, go to Tools, Android,
and then Android Device Monitor,

00:03:11.670 --> 00:03:14.400
and select the device you want to profile.

00:03:15.140 --> 00:03:18.780
Generate a report by clicking
on the Systrace button.

00:03:19.310 --> 00:03:21.730
When prompted, select three items:

00:03:21.730 --> 00:03:26.480
Graphics, View Hierarchy,
and CPU Scheduling in your report.

00:03:26.480 --> 00:03:30.220
You can count the number
of SurfaceFlinger events per second

00:03:30.220 --> 00:03:32.920
during the sampling period
and obtain the frame rate.

00:03:34.740 --> 00:03:38.730
Second, we need to consider the
classic memory and processing trade-off.

00:03:39.210 --> 00:03:42.115
How will accelerated layers
take up video memory?

00:03:42.440 --> 00:03:46.870
For watch faces, the pre-drawn bitmap
requires up to 200 kilobytes of memory.

00:03:47.640 --> 00:03:50.320
For the ultimate stopwatch,
we made a conscious decision

00:03:50.320 --> 00:03:52.540
to trade memory for performance,

00:03:53.170 --> 00:03:56.330
because the processing time for each frame
was simply too long.

00:03:57.250 --> 00:04:00.990
Another technique that can save you pixels
is to consider where the two layers

00:04:00.990 --> 00:04:03.840
can be combined
without impacting the visuals.

00:04:04.850 --> 00:04:08.310
For example, with the Santa watch face,
we combined a blue sky

00:04:08.310 --> 00:04:13.320
with the minute mark around the edges,
resulting in a 39% gain in frame rate.

00:04:14.990 --> 00:04:18.329
Remember, when it comes to rendering,
less is more,

00:04:18.380 --> 00:04:22.843
because the fewer pixels you're processing
the better your frame rates will be.

00:04:23.760 --> 00:04:27.877
Last but not least, how should developers
implement animations?

00:04:28.870 --> 00:04:31.850
Here are two sets of advice,
one for general application,

00:04:31.850 --> 00:04:33.684
the other for watch faces.

00:04:34.070 --> 00:04:36.910
For general application,
you should use the property

00:04:36.910 --> 00:04:38.752
of view animation framework.

00:04:39.120 --> 00:04:42.490
This enables the system to help determine
the most optimal frame rates

00:04:42.490 --> 00:04:43.801
for your animation.

00:04:44.710 --> 00:04:48.110
For watch faces, since that
does not have a view hierarchy,

00:04:48.110 --> 00:04:50.379
the recommendation is slightly different.

00:04:51.510 --> 00:04:53.807
Your aim should be to make
your animation code

00:04:53.807 --> 00:04:56.311
run as fast and as efficient as possible.

00:04:56.810 --> 00:05:00.374
For fluid animation on Android Wear,
aim for 30 frames a second.

00:05:00.510 --> 00:05:02.250
But more is better.

00:05:03.080 --> 00:05:06.480
In addition, please consider
if having one frame per second

00:05:06.480 --> 00:05:09.630
or one frame per minute,
rather than full animation,

00:05:09.630 --> 00:05:13.361
will be sufficient, as this will allow
the processes to sleep,

00:05:13.361 --> 00:05:15.735
saving significant battery power.

00:05:16.900 --> 00:05:21.235
To implement this, use a handler
which sends a delay message at set period

00:05:21.235 --> 00:05:22.653
and trigger an update.

00:05:23.210 --> 00:05:27.972
For a detailed example, please refer
to the analog watch face example.

00:05:30.070 --> 00:05:32.260
At the end of the day,
it's important to realize

00:05:32.260 --> 00:05:34.790
that Android Wear is based on Android.

00:05:34.790 --> 00:05:38.340
As a result, many optimization
tips which works on Android

00:05:38.340 --> 00:05:39.988
also applies to Android Wear.

00:05:41.030 --> 00:05:45.197
There are lots of performance practices
and tips that you should know about.

00:05:45.717 --> 00:05:48.896
So check out the rest of the
Android Performance Pattern videos.

00:05:49.440 --> 00:05:51.972
Also, join the G+ community
for Android Wear

00:05:51.972 --> 00:05:55.105
and Android Performance Patterns
for more updates.

00:05:55.670 --> 00:05:58.230
I'm Hoi Lam, and thanks for watching.

00:05:58.230 --> 00:06:02.637
Android Wear is for people on the move.
So let's keep those pixels moving.

00:06:02.820 --> 00:06:04.780
And remember, Perf Matters.

00:06:04.780 --> 00:06:07.530
(music playing)

