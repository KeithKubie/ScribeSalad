WEBVTT
Kind: captions
Language: en

00:00:00.800 --> 00:00:02.800
Building connected
devices is hard enough,

00:00:02.800 --> 00:00:04.520
but once you've got
your device running,

00:00:04.520 --> 00:00:06.140
the really hard work begins.

00:00:06.140 --> 00:00:09.070
How do you make it easy for your
users to get onto the network?

00:00:09.070 --> 00:00:12.690
Or interact with it from mobile
apps or your web service?

00:00:12.690 --> 00:00:15.000
Or even give other
developers the ability

00:00:15.000 --> 00:00:17.720
to include it in more
apps and services?

00:00:17.720 --> 00:00:21.730
Hi, I'm Timothy Jordan, and this
is an introduction to Weave.

00:00:21.730 --> 00:00:24.640
Weave helps you focus on adding
intelligence into the user

00:00:24.640 --> 00:00:26.960
experience in two ways.

00:00:26.960 --> 00:00:28.510
By giving you all
the building blocks

00:00:28.510 --> 00:00:30.950
you need for communicating
with your devices directly

00:00:30.950 --> 00:00:33.990
or through the cloud, and by
providing a common language

00:00:33.990 --> 00:00:35.870
for your app or service
to use across all

00:00:35.870 --> 00:00:38.210
of the user's devices.

00:00:38.210 --> 00:00:40.400
Specifically, Weave
provides a protocol

00:00:40.400 --> 00:00:43.550
for device discovery,
provisioning, authentication,

00:00:43.550 --> 00:00:45.050
and interaction.

00:00:45.050 --> 00:00:48.830
This protocol is implemented
across a device-side library,

00:00:48.830 --> 00:00:50.830
mobile SDKs, and
a web service that

00:00:50.830 --> 00:00:53.090
enables remote interactions.

00:00:53.090 --> 00:00:56.680
A Weave implementation typically
involves three components.

00:00:56.680 --> 00:00:58.230
First, the device itself.

00:00:58.230 --> 00:01:00.680
And this is what ends
up on store shelves.

00:01:00.680 --> 00:01:03.290
You'll add Weave functionality
by including a library that

00:01:03.290 --> 00:01:05.190
handles a lot of the
implementation details,

00:01:05.190 --> 00:01:06.580
such as the protocol.

00:01:06.580 --> 00:01:08.580
This makes it easy
for you let your users

00:01:08.580 --> 00:01:11.220
interact with your device
locally or remotely.

00:01:11.220 --> 00:01:12.810
And by the way,
the integration is

00:01:12.810 --> 00:01:14.600
easiest if you use
the Brillo operating

00:01:14.600 --> 00:01:17.310
system, where the Weave library
is built in and maintained

00:01:17.310 --> 00:01:18.362
directly.

00:01:18.362 --> 00:01:19.820
Once you've integrated
the library,

00:01:19.820 --> 00:01:21.600
you'll add support
for a schema, which

00:01:21.600 --> 00:01:24.150
are commands in state that are
common for your device type

00:01:24.150 --> 00:01:27.490
and customized or extended for
your product in particular.

00:01:27.490 --> 00:01:29.360
This makes it easy
for apps and services

00:01:29.360 --> 00:01:30.900
to interact with your device.

00:01:30.900 --> 00:01:33.420
And if you're not building
a device, don't worry.

00:01:33.420 --> 00:01:35.000
You can still build
apps and services

00:01:35.000 --> 00:01:37.930
that use Weave to make
device interactions easier.

00:01:37.930 --> 00:01:39.930
We'll get to that in a minute.

00:01:39.930 --> 00:01:41.620
Next, the cloud service.

00:01:41.620 --> 00:01:44.200
This enables communication
between the user and the device

00:01:44.200 --> 00:01:47.085
when they're not in proximity
or on the same network.

00:01:47.085 --> 00:01:49.210
You don't have to write
any specific code for this.

00:01:49.210 --> 00:01:52.200
It's already handled for
you by the Weave library.

00:01:52.200 --> 00:01:54.010
And because this
is in place, you

00:01:54.010 --> 00:01:56.070
can see aggregated
metrics in the developer

00:01:56.070 --> 00:01:57.970
console to help you
better understand

00:01:57.970 --> 00:02:00.410
your universe of devices.

00:02:00.410 --> 00:02:02.630
And finally, there are
client apps and services

00:02:02.630 --> 00:02:05.880
on the user's mobile
phone, desktop, or the web.

00:02:05.880 --> 00:02:08.050
These are where users go
to set up and interact

00:02:08.050 --> 00:02:08.910
with your devices.

00:02:08.910 --> 00:02:11.320
And the setup experience
is quick and easy.

00:02:11.320 --> 00:02:13.860
The user can initiate a
secure setup experience

00:02:13.860 --> 00:02:17.010
common to all Weave devices
that works from both Android

00:02:17.010 --> 00:02:18.180
and iOS.

00:02:18.180 --> 00:02:20.530
It's especially nice on
Android because the flow

00:02:20.530 --> 00:02:23.440
ends with the option
to install your app.

00:02:23.440 --> 00:02:25.420
After set up, if you
want your app or service

00:02:25.420 --> 00:02:27.410
to talk to your device,
all you need to do

00:02:27.410 --> 00:02:29.440
is use the local or cloud API.

00:02:29.440 --> 00:02:31.440
They'll allow you to
communicate with the device

00:02:31.440 --> 00:02:34.300
to get state or send commands,
whether from the same network,

00:02:34.300 --> 00:02:36.360
or halfway around the world.

00:02:36.360 --> 00:02:37.470
One more thing.

00:02:37.470 --> 00:02:39.220
Your apps and services
can communicate

00:02:39.220 --> 00:02:41.410
with Weave devices made
by other developers,

00:02:41.410 --> 00:02:44.500
too, using the same
standardized schemas.

00:02:44.500 --> 00:02:47.010
This makes it easy to
build richer experience

00:02:47.010 --> 00:02:50.130
around your devices and how
they fit into users lives,

00:02:50.130 --> 00:02:53.525
regardless of the underlying
hardware, make, or model.

00:02:53.525 --> 00:02:56.410
And that's a quick overview
of Weave, its components,

00:02:56.410 --> 00:02:57.920
and how they fit together.

00:02:57.920 --> 00:03:00.030
We're excited to see what
you'll build with it.

00:03:00.030 --> 00:03:02.030
Here's a link to help
you get started today.

00:03:02.030 --> 00:03:04.310
Oh, and please be sure
to send us feedback so

00:03:04.310 --> 00:03:06.660
that together, we can
make Weave the easiest way

00:03:06.660 --> 00:03:07.820
to connect all the things.

00:03:07.820 --> 00:03:11.170
[MUSIC PLAYING]

