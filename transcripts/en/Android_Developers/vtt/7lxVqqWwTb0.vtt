WEBVTT
Kind: captions
Language: en

00:00:02.060 --> 00:00:04.730
You know what the fastest,
most efficient way to download

00:00:04.730 --> 00:00:05.840
a piece of content is?

00:00:05.840 --> 00:00:07.245
Not downloading it at all.

00:00:07.245 --> 00:00:08.440
My name is Colt McAnlis,

00:00:08.440 --> 00:00:11.310
and when it comes to networking
performance, properly caching

00:00:11.310 --> 00:00:14.130
your network data is one of the
most fundamental performance

00:00:14.130 --> 00:00:15.660
wins that you can create.

00:00:15.660 --> 00:00:17.650
At its core, reading
data from your device

00:00:17.650 --> 00:00:20.240
will always be faster
than reading the same data

00:00:20.240 --> 00:00:21.629
from your network connection.

00:00:21.629 --> 00:00:23.660
And if you consider
that that piece of data

00:00:23.660 --> 00:00:26.120
will be used multiple times,
it makes a lot of sense

00:00:26.120 --> 00:00:28.950
to fetch it from the network
and then store it on the device

00:00:28.950 --> 00:00:31.870
so that future requests don't
have to re-download the file.

00:00:31.870 --> 00:00:35.060
But a slight problem
here-- you see, by default,

00:00:35.060 --> 00:00:38.300
caching of HTTP
responses is disabled

00:00:38.300 --> 00:00:39.584
for Android applications.

00:00:39.584 --> 00:00:42.520
Pretty much everything you're
requesting in your app right now

00:00:42.520 --> 00:00:45.030
is just dropped on the
floor after it's been fetched.

00:00:45.030 --> 00:00:49.070
Turning caching on means
using the HTTP response

00:00:49.070 --> 00:00:51.490
cache class, which allows
you to define a location

00:00:51.490 --> 00:00:53.310
on the device as
physical file storage

00:00:53.310 --> 00:00:56.180
as well as a max size
for the cache to be.

00:00:56.180 --> 00:00:59.790
Now, once enabled, all HTTP
responses for your application

00:00:59.790 --> 00:01:02.030
will be cached on
the file system.

00:01:02.030 --> 00:01:05.510
And, yes, this does apply to
APIs, like a URL connection

00:01:05.510 --> 00:01:08.990
and HTTP URL connections and all
the other fancy code snippets

00:01:08.990 --> 00:01:11.420
that you <i>copy-paste</i> from
Stack Overflow examples.

00:01:11.420 --> 00:01:14.110
And don't forget that
this also applies

00:01:14.110 --> 00:01:17.180
to any HTTP request made
from libraries that you've

00:01:17.180 --> 00:01:19.570
bundled into your application.

00:01:19.570 --> 00:01:22.350
Now, it's worth pointing out
that with HTTP response cache,

00:01:22.350 --> 00:01:24.800
data is evicted from
the device in two ways.

00:01:24.800 --> 00:01:26.590
Number one, if the cache fills up,

00:01:26.590 --> 00:01:29.540
then the system will delete
the oldest unused files to make

00:01:29.540 --> 00:01:31.600
room for the new
ones, and number two,

00:01:31.600 --> 00:01:35.090
files will be removed according
to their cache control header

00:01:35.090 --> 00:01:38.300
information included
with the server response.

00:01:38.300 --> 00:01:41.280
See, for HTTP 1.1
standards the server

00:01:41.280 --> 00:01:44.270
will pass a flag down with
your requested data that

00:01:44.270 --> 00:01:47.140
hints to the device how
long the information should

00:01:47.140 --> 00:01:48.100
be cached for.

00:01:48.100 --> 00:01:51.057
So, if the server says something
like, cache it for three days,

00:01:51.057 --> 00:01:54.740
then the device will keep the file 
around for three days before evicting it.

00:01:54.780 --> 00:01:56.690
Or, if the server
says don't cache,

00:01:56.690 --> 00:01:59.200
well, the file won't be
cached on the device at all.

00:01:59.200 --> 00:02:02.410
Basically, HTTP response
cache puts all the control

00:02:02.410 --> 00:02:05.000
of how to cache content in
the hands of the server,

00:02:05.000 --> 00:02:08.030
assuming that it knows best what
types of data you're requesting

00:02:08.030 --> 00:02:09.930
and how the device
should use it,

00:02:09.930 --> 00:02:13.420
which is completely fine for
simple networking situations

00:02:13.420 --> 00:02:15.410
or if you somehow
control the server

00:02:15.410 --> 00:02:18.210
and have the ability to
set caching explicitly

00:02:18.210 --> 00:02:19.510
for each data type.

00:02:19.510 --> 00:02:22.289
But beyond that, you can get
into some really big trouble,

00:02:22.289 --> 00:02:24.330
especially if you don't
control the server.

00:02:24.330 --> 00:02:27.140
For instance,what if the server
never sets caching duration,

00:02:27.140 --> 00:02:29.300
and nothing ever gets
cached on your device,

00:02:29.300 --> 00:02:31.410
or what if the caching
values are in conflict

00:02:31.410 --> 00:02:33.370
with the physical
resources of the device,

00:02:33.370 --> 00:02:36.190
like a mis-estimating how much
free space there is to cache,

00:02:36.190 --> 00:02:37.980
or what if your
client is trying to be

00:02:37.980 --> 00:02:40.540
adaptive to the needs of
high latency environments

00:02:40.540 --> 00:02:42.570
and actually tries
to modify the way

00:02:42.570 --> 00:02:44.390
it's caching due to
those environments,

00:02:44.390 --> 00:02:48.110
but the server won't let it because it 
assumes you're on a 4G network?

00:02:48.360 --> 00:02:50.450
Basically, any of
these advanced situations

00:02:50.450 --> 00:02:53.000
requires you to punt
on HTTP response cache,

00:02:53.000 --> 00:02:55.780
and instead brew your own
caching solution

00:02:55.780 --> 00:02:58.150
which includes two
things-- number one,

00:02:58.150 --> 00:02:59.910
writing your own
manager to cache

00:02:59.910 --> 00:03:02.670
and fetch resources from disk
on demand, and, number two,

00:03:02.670 --> 00:03:06.050
creating your own caching
policy based on the type of data

00:03:06.050 --> 00:03:08.250
and the state of
the device itself.

00:03:08.250 --> 00:03:10.950
Now, writing your own disk
cache can be a bit of a pain.

00:03:10.950 --> 00:03:12.710
So unless you need
something custom,

00:03:12.710 --> 00:03:16.500
it's probably a better idea
to steal the <i>DiskLRUCache.java</i>

00:03:16.500 --> 00:03:18.770
implementation from
the Android source

00:03:18.770 --> 00:03:20.360
and re-purpose it for your needs.

00:03:20.360 --> 00:03:23.290
One of our sample code packages
has already done that for you,

00:03:23.290 --> 00:03:24.950
if you're willing
to take a look.

00:03:24.950 --> 00:03:28.430
Now, probably more complex is defining
a policy for what types of caching

00:03:28.430 --> 00:03:31.471
to do for what types of assets 
you are grabbing from the server.

00:03:31.481 --> 00:03:34.730
See, thumbnails need
to be cached less often

00:03:34.730 --> 00:03:36.930
than high-resolution
images, and other things,

00:03:36.930 --> 00:03:39.560
like server pings, probably
shouldn't be cached at all.

00:03:39.560 --> 00:03:41.130
And you might want
to keep around

00:03:41.130 --> 00:03:44.840
server responses that describe
UI data for a much longer duration.

00:03:45.170 --> 00:03:47.699
The truth is that this is
all exceptionally complex,

00:03:47.699 --> 00:03:49.720
and thankfully, there's
libraries out there

00:03:49.720 --> 00:03:50.850
to help make it easier.

00:03:50.850 --> 00:03:53.860
Grabbing the <i>Volley</i>
or <i>okHTTP</i> libraries

00:03:53.860 --> 00:03:56.500
will put you on a good start
to a more stable networking

00:03:56.500 --> 00:03:59.510
implementation, although you
have to fiddle with the source

00:03:59.510 --> 00:04:03.210
code a little bit to get it to
call your custom caching logic.

00:04:03.210 --> 00:04:06.040
And, by the way, the
image library <i>Picasso</i>

00:04:06.040 --> 00:04:08.410
comes built in with
custom image cache

00:04:08.410 --> 00:04:10.780
management on your behalf.

00:04:10.780 --> 00:04:13.910
Now, if you're not sure
how caching or lack thereof

00:04:13.910 --> 00:04:15.790
is impacting your
application, make sure

00:04:15.790 --> 00:04:18.010
you check out the
Networking Monitor tool

00:04:18.010 --> 00:04:19.899
inside of Android Studio.

00:04:19.899 --> 00:04:21.839
It offers a nice
visual representation

00:04:21.839 --> 00:04:24.930
of the types of inbound and outbound
requests that are happening.

00:04:24.930 --> 00:04:26.910
If you're seeing some
requests for content

00:04:26.910 --> 00:04:28.594
occur that should
be cached instead,

00:04:28.594 --> 00:04:31.330
it might be a good sign that
you should be digging deeper,

00:04:31.330 --> 00:04:34.400
which is why I like to
use AT&amp;T's ARO tool.

00:04:34.400 --> 00:04:36.160
It basically lets you
do exactly that,

00:04:36.160 --> 00:04:38.470
dig deeper with each
network request,

00:04:38.470 --> 00:04:40.870
even checking out what
types of network header data

00:04:40.870 --> 00:04:42.220
has been sent to the device.

00:04:42.220 --> 00:04:44.097
But caching your data
is just the start.

00:04:44.097 --> 00:04:46.710
That's why you need to check
out the rest of the Android

00:04:46.720 --> 00:04:49.248
Performance Patterns content
and don't forget to join

00:04:49.248 --> 00:04:51.860
our Google+ community for
tips from other developers.

00:04:51.860 --> 00:04:54.760
So keep calm, profile your
code, and always remember,

00:04:54.760 --> 00:04:56.640
perf matters.

