WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:05.060
So, recently the Home Secretary of the United Kingdom Government was on

00:00:05.060 --> 00:00:07.340
breakfast news or something along those lines

00:00:07.340 --> 00:00:09.520
and was talking about how criminals are using

00:00:09.520 --> 00:00:12.540
end-to-end encryption to essentially evade detection

00:00:12.540 --> 00:00:14.240
and that this is unacceptable.

00:00:14.240 --> 00:00:17.640
Um, now, in some sense that's very much true: it is unacceptable.

00:00:17.680 --> 00:00:19.860
Um, criminal activity IS unacceptable

00:00:19.860 --> 00:00:23.520
Um, but... What they're suggesting is that we

00:00:23.520 --> 00:00:25.520
find a way to remove this encryption

00:00:25.520 --> 00:00:29.500
or we find a way of only allowing certain parties, like trusted government parties,

00:00:29.500 --> 00:00:31.160
to have access to it.

00:00:31.160 --> 00:00:35.780
So, before we declare that as insane, let's look at what that means

00:00:35.780 --> 00:00:38.500
and what end-to-end encryption is

00:00:38.500 --> 00:00:40.640
and if that's even feasible.

00:00:42.520 --> 00:00:45.720
Let's imagine that I am using Whatsapp or

00:00:45.720 --> 00:00:49.160
Facebook Messenger or some other end-to-end encrypted messenger with you, right?

00:00:49.160 --> 00:00:52.940
So, you have a phone here, right? It could be a phone, it could be a computer

00:00:52.940 --> 00:00:56.000
it's not really important - some device, right, with a screen

00:00:56.000 --> 00:00:58.300
- this is why I'm not employed to design these things.

00:00:58.300 --> 00:01:02.920
This is you, but I'm gonna call you Alice this time because we always do that

00:01:02.920 --> 00:01:04.400
(Brady) &gt;&gt; Does that make you Bob?

00:01:04.400 --> 00:01:07.760
(Mike) &gt;&gt; It does. So we've got Alice and Bob here having a communication between two phones

00:01:07.760 --> 00:01:11.160
There's gonna be some communication mechanism between these two devices, right?

00:01:11.160 --> 00:01:15.180
It could be SMS or, you know, GSM phone signal

00:01:15.180 --> 00:01:18.040
or it could be something like Wi-Fi over the internet.

00:01:18.040 --> 00:01:21.060
In all of these cases there's usually gonna be an intermediary server

00:01:21.060 --> 00:01:22.440
handling this transport

00:01:22.440 --> 00:01:25.360
This phones aren't capable of connecting to each other on their own

00:01:25.360 --> 00:01:28.100
apart for things like NFC, where you come really close.

00:01:28.100 --> 00:01:32.080
So, there's going to be some server in here, which I'm just gonna label "S"

00:01:32.080 --> 00:01:34.480
which in the case of Whatsapp will be a Whatsapp server

00:01:34.480 --> 00:01:36.940
and obviously it's gotta be a server for whatever product you're using

00:01:36.940 --> 00:01:41.080
Now, anytime that Bob sends Alice a message it's going to go via the server, by definition

00:01:41.080 --> 00:01:43.420
because that's the thing that relays the message to Alice.

00:01:43.420 --> 00:01:46.860
It knows how to communicate with Alice, you know, it knows what her phone number is,

00:01:46.860 --> 00:01:49.620
it has a list of you contacts and things, you know, this is how it works.

00:01:49.620 --> 00:01:54.500
This could be a phone provider, and there's gonna be, you know, phone antennas and things in this mix, but

00:01:54.500 --> 00:01:55.360
it's not important.

00:01:55.360 --> 00:02:00.620
So, this message here is gonna come in this way from Bob and it's gonna go to Alice like this.

00:02:00.620 --> 00:02:05.560
The issue is if we want to encrypt this channel, right, we want certain people not to be able to read it,

00:02:05.560 --> 00:02:08.460
if I'm sitting on a router somewhere on the internet, here

00:02:08.460 --> 00:02:12.520
we do want me to go "Oh, that's a nice message with your credit card details" and I'll have that, right?

00:02:12.520 --> 00:02:14.520
So that's what we're trying to avoid here

00:02:14.520 --> 00:02:17.460
(Brady) &gt;&gt; Because that's how email works, right? (Mike) &gt;&gt; Yeah (Brady) &gt;&gt; You could sit there and-

00:02:17.460 --> 00:02:21.120
(Mike) &gt;&gt; Absolutely. And people do. Encryption of channels is nothing new, right?

00:02:21.120 --> 00:02:26.120
We've seen it for a long long time, right? These techniques, things like public key cryptography

00:02:26.120 --> 00:02:28.220
and some of these cyphers has been around for many years.

00:02:28.220 --> 00:02:31.040
So how do we do this? Well, there's really two options:

00:02:31.040 --> 00:02:36.160
the first is that Alice could negotiate some shared secret key with the server.

00:02:36.160 --> 00:02:39.180
We'll call that key "KAS".

00:02:39.180 --> 00:02:42.560
So that key there could be used by Alice to talk to the server

00:02:42.560 --> 00:02:46.300
and she could send a message encrypted by KAS to the server and say

00:02:46.300 --> 00:02:47.860
"Please, can you forward this message to Bob?"

00:02:47.860 --> 00:02:50.040
Bob would have another key with the server, KBS,

00:02:50.040 --> 00:02:52.160
and that's what he uses to communicate.

00:02:52.160 --> 00:02:56.020
Obviously here Alice does not know what KBS is, and Bob doesn't know what KAS is.

00:02:56.020 --> 00:02:59.540
The server decrypts a message using KAS, that it knows

00:02:59.540 --> 00:03:01.860
and it re-encrpyts it with KBS and forwards it to Bob.

00:03:01.860 --> 00:03:03.980
Now, this IS NOT end-to-end encryption

00:03:03.980 --> 00:03:06.920
because obviously it's been decrypted halfway through.

00:03:06.920 --> 00:03:09.340
In some sense that's a good thing, right?

00:03:09.340 --> 00:03:12.440
If I'm a terrorist, or a criminal, and I send a message,

00:03:12.440 --> 00:03:16.960
this server could perform some kind of rudimentary checks to make sure I wasn't doing anything untoward.

00:03:16.960 --> 00:03:20.060
But for obvious reasons a lot of people don't like this idea.

00:03:20.060 --> 00:03:23.780
What end-to-end encryption does is replace these two keys

00:03:23.780 --> 00:03:25.760
with a key that only Alice and Bob know.

00:03:25.760 --> 00:03:28.980
The idea being that this server's quite happy to relay the packages back and forth

00:03:28.980 --> 00:03:30.980
but it doesn't have any idea of what's in them.

00:03:30.980 --> 00:03:35.240
And this works you very well for this server as well, because when someone says "Can you give us this data?"

00:03:35.240 --> 00:03:39.100
they can reasonably say "No. Not because we don't want to, but because we actually can't."

00:03:39.100 --> 00:03:41.520
The process we use for this is something called a "key exchange".

00:03:41.720 --> 00:03:46.940
The obvious problem here is that at some point Alice and the server have got to share a key,

00:03:46.940 --> 00:03:49.600
without an encrypted channel. When she first ever connects

00:03:49.600 --> 00:03:51.820
they haven't got this key yet, right?

00:03:51.820 --> 00:03:55.420
And so, how do we get the key? There's a sort of chicken and egg problem.

00:03:56.240 --> 00:03:58.600
The solution was proposed by Diffie and Hellman

00:03:58.600 --> 00:04:01.500
which is the Diffie-Hellman key exchange, right?

00:04:01.560 --> 00:04:05.220
We're not gonna go into the details of mathematics of Diffie-Hellman in this video

00:04:05.220 --> 00:04:10.040
but I'll simply say that Alice and Bob both have public and private components of this key.

00:04:10.040 --> 00:04:13.740
They share the public ones, and then they use the private ones in secret

00:04:13.740 --> 00:04:15.740
to create a shared key that no one else can know.

00:04:15.740 --> 00:04:18.260
That's essentially how it works. So it is a way

00:04:18.260 --> 00:04:25.960
of even via the server, producing a shared key "KAB" that no one else knows.

00:04:25.960 --> 00:04:28.920
So now they have this shared communication channel.

00:04:28.920 --> 00:04:33.080
So when you first connect, you will send some identifiers to the server,

00:04:33.080 --> 00:04:37.400
you will establish a public and private key pair, and then from then on

00:04:37.400 --> 00:04:41.080
anytime you want to connect to anyone new you'll generate one of these keys.

00:04:41.080 --> 00:04:44.580
It's called "ephemeral" which means that basically generate one almost every message,

00:04:44.580 --> 00:04:46.400
if not every message for some of these apps.

00:04:46.400 --> 00:04:50.080
The important thing is that the server, although they relay these messages,

00:04:50.080 --> 00:04:53.120
is not involved in this key exchange process and can't

00:04:53.120 --> 00:04:57.520
inject itself in the middle, which means that it doesn't know what KAB is

00:04:57.520 --> 00:04:59.520
and it can't decrypt the message physically.

00:04:59.520 --> 00:05:01.560
When the Minister or someone in the media says

00:05:01.560 --> 00:05:06.880
"What we really want to do is allow some kind of entry for government into the system"

00:05:06.880 --> 00:05:09.040
you can quite reasonably say "That is impossible."

00:05:09.040 --> 00:05:13.400
because you'd have to inject something in the middle of this key exchange which would completely undo it.

00:05:13.400 --> 00:05:17.160
So let's think about the different ways we could do it and discuss whether they're practical.

00:05:17.160 --> 00:05:19.380
Okay, so the first one is we could go back to this system here.

00:05:19.380 --> 00:05:23.340
So, we could have Alice talking to the server in a secure way, using a key exchange.

00:05:23.340 --> 00:05:27.160
We could have Bob talking to the server in a secure way, through key exchange

00:05:27.160 --> 00:05:32.080
and the advantage would be that if, let's say, a judge ordered a warrant on some of this data

00:05:32.080 --> 00:05:37.280
the company would have it on their servers, probably, decrypted, and they could send it off.

00:05:37.280 --> 00:05:40.780
In some sense I don't absolutely object to that because I don't really have anything to hide, right?

00:05:40.780 --> 00:05:44.980
that's the obvious argument. But the problem is that if this server ever gets hacked

00:05:44.980 --> 00:05:48.400
everyone's messages and emails and pictures get dumped out on the Internet, right?

00:05:48.400 --> 00:05:52.360
We see that happen lots of times. We can't know for sure that this is secure, right?

00:05:52.360 --> 00:05:58.180
So in some sense what we're doing is introducing a very big point of failure that could be catastrophic

00:05:58.180 --> 00:06:03.820
simply so that the very few people who do things illegally could... we could serve a warrant on those people.

00:06:03.820 --> 00:06:08.080
Another alternative that gets sort of suggested is this kind of backdoor.

00:06:08.080 --> 00:06:11.240
Now, in some sense this is a backdoor already, this double key mechanism.

00:06:11.240 --> 00:06:16.140
But when we talk about a backdoor what we're really talking about is some mathematical property of this key exchange

00:06:16.140 --> 00:06:20.440
that no one else knows about, that means that we could actually decrypt the messages -is the idea.

00:06:20.440 --> 00:06:24.220
Again, this is a huge problem. It's a problem because if someone else -

00:06:24.220 --> 00:06:29.060
a criminal - finds out this flaw, then again all of our photos are dumped on the Internet.

00:06:29.060 --> 00:06:35.560
And it seems unlikely to me that the majority of people who found this flaw, would publicize it straight away,

00:06:35.560 --> 00:06:41.100
right? They would quite happily sit on it and see what interesting things they could find out.

00:06:41.100 --> 00:06:47.000
That's a kind of-that's kind of worrying. Um... So again, I have some concerns about that approach.

00:06:47.000 --> 00:06:51.300
(Brady) &gt;&gt; As long as we don't have a backdoor then there's no way for them to get in there, is it?

00:06:51.300 --> 00:06:53.640
(Mike) &gt;&gt; Erm... Well, so yes and no, right?

00:06:53.640 --> 00:06:59.120
The issue is that the messages have to be decrypted somewhere because they have to be presented onto your screen, right?

00:06:59.120 --> 00:07:04.160
So Alice receives this message, her mobile app receives this message, using KAB decrypts it

00:07:04.160 --> 00:07:06.460
and then it's on the screen, right?

00:07:06.460 --> 00:07:09.740
At this point someone just steals her phone, runs off and reads her messages

00:07:09.740 --> 00:07:14.060
or bugs her phone... Um, and reads her messages routinely, has them forwarded on.

00:07:14.060 --> 00:07:17.520
In this day and age of quite secure end-to-end encryption

00:07:17.520 --> 00:07:21.900
the much more likely target of attack is not the encryption itself: it's just the end points.

00:07:21.900 --> 00:07:25.680
So, I've got your phone here, right? Which you have kindly left the PIN code off for me.

00:07:25.680 --> 00:07:28.160
And I can just scroll thought your messages and read them all, right?

00:07:28.160 --> 00:07:32.660
They're not encrypted because that encryption has been removed once it got to this end point.

00:07:32.660 --> 00:07:35.320
(Brady) &gt;&gt; So it's basically automatically decrypted, then.

00:07:35.320 --> 00:07:40.620
(Mike) &gt;&gt; Well, yes. To have a good user experience it's got to essentially hide all that encryption away

00:07:40.620 --> 00:07:44.040
and it presents you with a nice set of readable messages.

00:07:44.040 --> 00:07:49.780
So, in some sense, then your security relies on your PIN code, and the operating system running on your phone

00:07:49.780 --> 00:07:58.080
or your laptop device. Um, and if those are vulnerable then, you know, really the end-to-end encryption is completely circumvented.

00:08:00.760 --> 00:08:04.620
"This is directly adding content to my normal vision.

00:08:04.620 --> 00:08:11.520
The problem is the area that it has to add this content is really very narrow, I think it's the [...]"

