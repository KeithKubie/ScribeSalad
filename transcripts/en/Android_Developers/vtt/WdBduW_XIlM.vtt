WEBVTT
Kind: captions
Language: en

00:00:00.680 --> 00:00:02.009
BEN GABLE: OK, everybody.

00:00:02.009 --> 00:00:04.530
As Bill mentioned,
my name is Ben Gable.

00:00:04.530 --> 00:00:08.940
I'm a partner developer advocate
and game developer at Google.

00:00:08.940 --> 00:00:12.750
And I am working on the
initiative of Chromebooks

00:00:12.750 --> 00:00:14.760
and games on Chromebooks.

00:00:14.760 --> 00:00:19.750
And basically, we're super
excited about this opportunity.

00:00:19.750 --> 00:00:22.060
And we're going to go over
the Chrome OS, a little bit

00:00:22.060 --> 00:00:23.832
overview of the Chrome OS.

00:00:23.832 --> 00:00:26.040
Then we're going to hear
from Daniel about Star Wars:

00:00:26.040 --> 00:00:28.500
Galaxy of Heroes and
how they optimized

00:00:28.500 --> 00:00:29.665
the game for Chromebooks.

00:00:29.665 --> 00:00:31.290
And then I'm going
to talk a little bit

00:00:31.290 --> 00:00:32.873
about the technical
overview of things

00:00:32.873 --> 00:00:35.280
you might look out
for when optimizing

00:00:35.280 --> 00:00:37.650
your game for Chromebooks.

00:00:37.650 --> 00:00:41.880
So as I mentioned, as some of
you might know or may not know,

00:00:41.880 --> 00:00:47.472
all Chromebooks launched in 2017
and later now contain ARC++.

00:00:47.472 --> 00:00:49.680
And so they've got a Android
container running in it.

00:00:49.680 --> 00:00:53.950
And they can play Android
apps and games natively.

00:00:53.950 --> 00:00:56.070
So it's super exciting
because now you

00:00:56.070 --> 00:00:57.990
can play it on
your mobile device

00:00:57.990 --> 00:01:02.570
and on a PC like form factor.

00:01:02.570 --> 00:01:05.069
And this is something that's
important because it's not just

00:01:05.069 --> 00:01:06.660
Chromebooks.

00:01:06.660 --> 00:01:08.910
There's a push, I think,
in the entire industry

00:01:08.910 --> 00:01:12.060
where we're pushing towards
this Universal App type

00:01:12.060 --> 00:01:14.040
thing where you can play
on your mobile device.

00:01:14.040 --> 00:01:18.414
You can play using like Samsung
DeX on a PC type experience.

00:01:18.414 --> 00:01:20.580
So it's important to think
about this moving forward

00:01:20.580 --> 00:01:23.190
that users are really
going to expect

00:01:23.190 --> 00:01:25.620
to play their game on the go
and then maybe at home plug

00:01:25.620 --> 00:01:28.590
into some device or load it
up on another different form

00:01:28.590 --> 00:01:30.480
factor device and
continue playing

00:01:30.480 --> 00:01:32.490
from where they left off.

00:01:32.490 --> 00:01:33.890
And, of course,
we're all gamers.

00:01:33.890 --> 00:01:35.400
So I think some
of us might argue

00:01:35.400 --> 00:01:38.350
that playing on a keyboard and
mouse is the only way to play--

00:01:38.350 --> 00:01:42.106
so super exciting for
that reason as well.

00:01:42.106 --> 00:01:44.230
Just a little bit about
the momentum of Chromebook.

00:01:44.230 --> 00:01:47.830
So this just rolled out in 2017.

00:01:47.830 --> 00:01:52.580
And we overtook Macs
in the US in 2016.

00:01:52.580 --> 00:01:55.000
It's a huge player in
the educational space,

00:01:55.000 --> 00:01:57.790
so a lot of schools
are buying Chromebooks,

00:01:57.790 --> 00:02:01.480
obviously not to play games
on them, but, you know, hey.

00:02:01.480 --> 00:02:04.770
And it's growing, and Google
is putting in a lot of effort

00:02:04.770 --> 00:02:09.030
in making Chromebooks
a huge success.

00:02:09.030 --> 00:02:10.949
And so some of the
common issues that we

00:02:10.949 --> 00:02:14.870
run into when we optimize
Android apps for Chromebooks

00:02:14.870 --> 00:02:16.630
is, obviously, you've
got a bigger screen,

00:02:16.630 --> 00:02:18.200
increased resolutions.

00:02:18.200 --> 00:02:20.290
You're at default
landscape orientation

00:02:20.290 --> 00:02:22.260
now, instead of portrait.

00:02:22.260 --> 00:02:24.910
You've got windowing to
take into consideration.

00:02:24.910 --> 00:02:27.210
And then also you've got
keyboard and mouse controls.

00:02:27.210 --> 00:02:30.452
And while these are
common issues, for games,

00:02:30.452 --> 00:02:31.660
there's a lot of opportunity.

00:02:31.660 --> 00:02:35.730
So you can avoid "hand-claw"
playing these hi-fi immersive

00:02:35.730 --> 00:02:39.120
games that kind of now you
could play for hours on end.

00:02:39.120 --> 00:02:41.416
You can avoid
cramping your hand.

00:02:41.416 --> 00:02:42.540
You've got a bigger screen.

00:02:42.540 --> 00:02:44.220
So UI is more readable.

00:02:44.220 --> 00:02:45.460
It does its job better.

00:02:45.460 --> 00:02:47.466
It's more functional.

00:02:47.466 --> 00:02:48.840
And obviously,
keyboard and mouse

00:02:48.840 --> 00:02:51.210
means you've got more
accessibility, better controls,

00:02:51.210 --> 00:02:52.950
especially in
competitive type games,

00:02:52.950 --> 00:02:55.300
or really any type of game.

00:02:55.300 --> 00:02:57.930
But we've got somebody here
who has more experience

00:02:57.930 --> 00:03:00.660
and can give us a firsthand
look at how they optimize it.

00:03:00.660 --> 00:03:02.369
So I'd like to welcome
Daniel up from EA.

00:03:02.369 --> 00:03:04.326
And he's going to talk
about how they optimized

00:03:04.326 --> 00:03:06.840
"Star Wars, Galaxy of Heroes"
to make an awesome Chromebook

00:03:06.840 --> 00:03:07.410
experience.

00:03:07.410 --> 00:03:08.130
DANIEL R. LEVY: All right.

00:03:08.130 --> 00:03:08.755
Thank you, Ben.

00:03:08.755 --> 00:03:09.928
BEN GABLE: Yep.

00:03:09.928 --> 00:03:12.150
DANIEL R. LEVY: All
right, I'm Daniel Levy

00:03:12.150 --> 00:03:13.300
with Electronic Arts.

00:03:13.300 --> 00:03:15.880
And I work on "Star
Wars, Galaxy of Heroes."

00:03:15.880 --> 00:03:18.070
Recently, I've had the
exciting opportunity

00:03:18.070 --> 00:03:21.160
to work with Ben to get
"Star Wars, Galaxy of Heroes"

00:03:21.160 --> 00:03:23.600
Chromebook ready.

00:03:23.600 --> 00:03:27.920
Now, out of the box, if
you've got a Unity title,

00:03:27.920 --> 00:03:30.410
you are going to be
pretty far along in terms

00:03:30.410 --> 00:03:33.440
of what you need to do to
support the Chromebook.

00:03:33.440 --> 00:03:36.230
But we're going to go over
today a few best practices

00:03:36.230 --> 00:03:37.910
and key considerations
that we've

00:03:37.910 --> 00:03:41.750
learned at Electronic Arts
when designing new features

00:03:41.750 --> 00:03:44.240
and retrofitting existing
features for the Chromebook

00:03:44.240 --> 00:03:46.402
platform.

00:03:46.402 --> 00:03:47.860
So just a little
bit of background,

00:03:47.860 --> 00:03:50.610
if you're not familiar with
"Star Wars, Galaxy of "Heroes,"

00:03:50.610 --> 00:03:53.580
we provide a mobile CCG,
Collectible Card Game,

00:03:53.580 --> 00:03:56.820
Collectible Character Game,
with strong RPG elements

00:03:56.820 --> 00:03:58.320
and mechanics.

00:03:58.320 --> 00:04:01.980
We let players collect their
favorite characters and ships

00:04:01.980 --> 00:04:04.080
across a wide
variety of timelines

00:04:04.080 --> 00:04:06.730
within the entire
"Star Wars" universe.

00:04:06.730 --> 00:04:09.090
Through our use of
the Unity game engine,

00:04:09.090 --> 00:04:15.420
we support iOS, Android, and,
as we'll see, the Chromebook.

00:04:15.420 --> 00:04:19.110
Though our worldwide launch
was in November of 2015,

00:04:19.110 --> 00:04:21.790
more recently in
November of 2017,

00:04:21.790 --> 00:04:24.377
we've added support for
keyboard-focused features,

00:04:24.377 --> 00:04:25.960
which we'll get into
in a second here.

00:04:28.800 --> 00:04:31.700
So if you're an
existing live title,

00:04:31.700 --> 00:04:33.920
you're probably
thinking, why would I

00:04:33.920 --> 00:04:35.510
retrofit keyboard support?

00:04:35.510 --> 00:04:37.730
Why would I rethink
the features in my game

00:04:37.730 --> 00:04:41.400
and engineer them and redesign
them around keyboards?

00:04:41.400 --> 00:04:44.990
There's quite a bit of
technical jargon here,

00:04:44.990 --> 00:04:47.730
but really the core
is consistently

00:04:47.730 --> 00:04:51.050
we've seen month
over month of growth

00:04:51.050 --> 00:04:54.590
in key indicators that are
important to game developers.

00:04:54.590 --> 00:04:57.350
Our daily active
users on Chromebook

00:04:57.350 --> 00:04:59.250
have grown month over month.

00:04:59.250 --> 00:05:01.340
And we've also
seen just specific

00:05:01.340 --> 00:05:04.980
to the Chromebook platform
our gross revenue increase.

00:05:04.980 --> 00:05:08.330
And again, as we stated earlier,
if you're a Unity title,

00:05:08.330 --> 00:05:12.170
you're 80% of the way there to
supporting a great experience

00:05:12.170 --> 00:05:13.295
on the Chromebook platform.

00:05:16.120 --> 00:05:18.880
Now, you're probably
thinking, this

00:05:18.880 --> 00:05:22.270
sounds great, how do I start
redesigning my features

00:05:22.270 --> 00:05:24.820
or integrating support for new
features around the Chromebook

00:05:24.820 --> 00:05:26.714
platform?

00:05:26.714 --> 00:05:28.630
There are a couple of
pillars that we consider

00:05:28.630 --> 00:05:30.550
in redesigning and
creating new features that

00:05:30.550 --> 00:05:32.200
are keyboard-focused.

00:05:32.200 --> 00:05:33.490
One of the key things--

00:05:33.490 --> 00:05:35.290
and this is going to
seem somewhat obvious,

00:05:35.290 --> 00:05:36.730
but keep it in mind--

00:05:36.730 --> 00:05:39.480
focus on wide audience value.

00:05:39.480 --> 00:05:41.800
What do we mean by
wide audience value?

00:05:41.800 --> 00:05:44.440
If you're designing a
new feature in your game,

00:05:44.440 --> 00:05:47.620
don't design that
feature such that it's

00:05:47.620 --> 00:05:50.950
entirely specific to
keyboard functionality.

00:05:50.950 --> 00:05:52.750
Think about new
features when you're

00:05:52.750 --> 00:05:55.780
supporting keyboard
functionality that add value

00:05:55.780 --> 00:05:58.570
to both existing
users of your game

00:05:58.570 --> 00:06:00.850
and new players that are
going to want to interact

00:06:00.850 --> 00:06:02.470
with your game on a keyboard.

00:06:02.470 --> 00:06:04.570
This provides an
easy justification

00:06:04.570 --> 00:06:07.660
to your development team and
makes this side quest easier

00:06:07.660 --> 00:06:11.060
to justify in terms
of development cost.

00:06:11.060 --> 00:06:15.000
Another important item to
note, look at existing features

00:06:15.000 --> 00:06:16.560
and functionality in your game.

00:06:16.560 --> 00:06:20.640
You might have a lot of existing
features, such as in-game chat,

00:06:20.640 --> 00:06:24.690
that are so close to being
ready for a great keyboard

00:06:24.690 --> 00:06:26.160
experience.

00:06:26.160 --> 00:06:29.400
Take those features,
don't ignore polish,

00:06:29.400 --> 00:06:31.740
and take them to the next
level, so that you can provide

00:06:31.740 --> 00:06:34.230
a great keyboard experience.

00:06:34.230 --> 00:06:39.420
Now-- and this is important to
any level of game development--

00:06:39.420 --> 00:06:41.460
listen to your player base.

00:06:41.460 --> 00:06:42.894
You'll be surprised.

00:06:42.894 --> 00:06:44.810
If you go on the "Star
Wars, Galaxy of Heroes"

00:06:44.810 --> 00:06:49.470
subreddit and you search for
Android emulator or keyboard,

00:06:49.470 --> 00:06:51.300
you're going to find
a plethora of posts

00:06:51.300 --> 00:06:54.990
from users talking about macros
that they've set up in game

00:06:54.990 --> 00:06:58.290
or how they're engaging with
the game using a keyboard.

00:06:58.290 --> 00:07:00.210
We'll see a specific
example later on,

00:07:00.210 --> 00:07:03.090
where we drew from this
player-base feedback

00:07:03.090 --> 00:07:07.430
to design one of our
keyboard first features.

00:07:07.430 --> 00:07:10.730
So our first case study
here is roster search.

00:07:10.730 --> 00:07:12.650
This is, to me, an
excellent example

00:07:12.650 --> 00:07:15.320
of a way that we're able
to provide wide audience

00:07:15.320 --> 00:07:16.970
value in our game.

00:07:16.970 --> 00:07:21.710
We both provided value for
non-keyboard users and keyboard

00:07:21.710 --> 00:07:22.862
users.

00:07:22.862 --> 00:07:24.320
If you've played
"Star Wars, Galaxy

00:07:24.320 --> 00:07:27.890
of Heroes," or for
that matter any CCG,

00:07:27.890 --> 00:07:31.030
you know that there's a strong
collection mechanic here.

00:07:31.030 --> 00:07:34.580
"Star Wars, Galaxy of Heroes"
has hundreds of characters,

00:07:34.580 --> 00:07:35.920
hundreds of ships.

00:07:35.920 --> 00:07:37.850
And each of those
characters and ships

00:07:37.850 --> 00:07:40.010
have a unique set
of abilities that

00:07:40.010 --> 00:07:42.230
have a unique way of
interacting with combat

00:07:42.230 --> 00:07:44.370
mechanics in the game.

00:07:44.370 --> 00:07:49.140
Even more so, we design events
and raids that specifically key

00:07:49.140 --> 00:07:51.240
off of those certain
ability mechanics

00:07:51.240 --> 00:07:52.844
of certain characters.

00:07:52.844 --> 00:07:54.510
So a lot of times,
we would find players

00:07:54.510 --> 00:07:58.380
would go into a certain event,
and they would ask, hey,

00:07:58.380 --> 00:07:59.850
what are the best
set of characters

00:07:59.850 --> 00:08:02.280
that I want to bring into
my squad for this event?

00:08:02.280 --> 00:08:03.990
They would analyze
the meta, they'd

00:08:03.990 --> 00:08:06.930
understand what to do with
respect to that event.

00:08:06.930 --> 00:08:09.750
But then they would get down
to the actual squad selection,

00:08:09.750 --> 00:08:13.920
and they would find themselves
inundated with a roster scroll

00:08:13.920 --> 00:08:16.200
list that they would
have to flick through

00:08:16.200 --> 00:08:18.300
to find their characters
or ships to assign

00:08:18.300 --> 00:08:20.260
to their squad for that event.

00:08:20.260 --> 00:08:23.220
So we designed a
roster search filter,

00:08:23.220 --> 00:08:27.300
which for non-keyboard
users gives quick access

00:08:27.300 --> 00:08:29.550
for selecting different
classifications

00:08:29.550 --> 00:08:33.990
and factions of characters
and for keyboard users

00:08:33.990 --> 00:08:36.240
allows them to quickly
type and search

00:08:36.240 --> 00:08:38.700
for any different type of
characters they're looking for.

00:08:38.700 --> 00:08:40.950
And this is a feature that
we've gotten great feedback

00:08:40.950 --> 00:08:45.710
on that's provided value
to both types of users.

00:08:45.710 --> 00:08:47.540
Now, our next case study--

00:08:47.540 --> 00:08:50.060
and this is the one that I'm
kind of most excited about-- is

00:08:50.060 --> 00:08:52.550
battle keyboard bindings.

00:08:52.550 --> 00:08:55.190
This goes back to the
social media aspect here.

00:08:55.190 --> 00:08:57.680
Everybody on the subreddit
who's talking about emulators

00:08:57.680 --> 00:08:59.630
is saying, they're
using emulators

00:08:59.630 --> 00:09:03.020
for faster combat,
better interaction

00:09:03.020 --> 00:09:06.560
with their characters,
ease of ability switching.

00:09:06.560 --> 00:09:09.050
And from that, we
were able to build

00:09:09.050 --> 00:09:11.510
this piece of
functionality that exists

00:09:11.510 --> 00:09:13.910
on top of our existing
battle function.

00:09:13.910 --> 00:09:17.450
So listen to your player base
and design new and exciting

00:09:17.450 --> 00:09:21.630
ways to interact with your
existing game features that

00:09:21.630 --> 00:09:25.680
are very keyboard-focused and
provide a better experience.

00:09:25.680 --> 00:09:29.840
Finally-- and this one is
going to seem really obvious--

00:09:29.840 --> 00:09:31.730
almost every game out
there has some sort

00:09:31.730 --> 00:09:34.280
of in-game chat functionality.

00:09:34.280 --> 00:09:36.590
But this, in my mind,
is the perfect example

00:09:36.590 --> 00:09:39.600
of why polish is important.

00:09:39.600 --> 00:09:42.950
Let's say you take the base
game with chat functionality.

00:09:42.950 --> 00:09:46.370
You're in battle, you
see a chat UI icon,

00:09:46.370 --> 00:09:48.350
you're able to
open a chat dialog,

00:09:48.350 --> 00:09:50.450
and you're able to
interact with your guild.

00:09:50.450 --> 00:09:53.960
Now, there are a couple pieces
of friction within that flow.

00:09:53.960 --> 00:09:58.070
You have to first tap the
icon, go into the prompt,

00:09:58.070 --> 00:10:01.820
focus the text entry box,
and then start typing.

00:10:01.820 --> 00:10:04.190
That's not
keyboard-focused design.

00:10:04.190 --> 00:10:07.260
We have the ability to
detect these keyboard users.

00:10:07.260 --> 00:10:08.840
So let's take advantage of that.

00:10:08.840 --> 00:10:11.360
Let's give these users
a spacebar macro,

00:10:11.360 --> 00:10:15.080
for example, that allows
them to easily open and close

00:10:15.080 --> 00:10:16.670
the chat dialog.

00:10:16.670 --> 00:10:19.010
Let's detect if these
users have a keyboard,

00:10:19.010 --> 00:10:21.950
and then let's automatically
focus the text entry box,

00:10:21.950 --> 00:10:24.710
so that they can immediately
start typing and interacting

00:10:24.710 --> 00:10:26.120
with the chat feature.

00:10:26.120 --> 00:10:28.910
Those are very simple
pieces of work,

00:10:28.910 --> 00:10:31.250
very low lift, low
effort, but they

00:10:31.250 --> 00:10:33.680
improve the keyboard
experience just that much more.

00:10:36.320 --> 00:10:38.690
In addition to these key
considerations for designing

00:10:38.690 --> 00:10:43.030
your features or new features
around keyboard-focused design,

00:10:43.030 --> 00:10:45.710
there are additionally a number
of special considerations

00:10:45.710 --> 00:10:47.930
that we've encountered.

00:10:47.930 --> 00:10:51.170
One key thing that many
Unity developers probably

00:10:51.170 --> 00:10:56.180
have already encountered is
the concept of KeyCode.Escape.

00:10:56.180 --> 00:10:58.220
Now, out of the
box, Unity is going

00:10:58.220 --> 00:11:03.020
to surface the hardware back
button and the hardware escape

00:11:03.020 --> 00:11:06.710
key on a Chromebook keyboard
as the same input event,

00:11:06.710 --> 00:11:09.040
as a KeyCode.Escape.

00:11:09.040 --> 00:11:13.150
So one thing that you can
do to work around this

00:11:13.150 --> 00:11:17.810
is extend your Android
activity for your Unity app,

00:11:17.810 --> 00:11:20.840
handle input there
around these two cases,

00:11:20.840 --> 00:11:24.780
and then trampoline those values
back to your manage game code.

00:11:24.780 --> 00:11:28.520
Another option to
consider is a compromise.

00:11:28.520 --> 00:11:30.830
For your escape key and
your hardware back button

00:11:30.830 --> 00:11:33.380
functionality, consider
prompting the user,

00:11:33.380 --> 00:11:36.530
instead of just hard quitting
or hard minimizing out

00:11:36.530 --> 00:11:38.960
of the application.

00:11:38.960 --> 00:11:42.560
Another key consideration is
that of Unity iOS keyboard

00:11:42.560 --> 00:11:43.870
support.

00:11:43.870 --> 00:11:46.050
This is really important
to keep in mind.

00:11:46.050 --> 00:11:49.300
I've talked to a number of
people who have developed

00:11:49.300 --> 00:11:51.370
around keyboard entry.

00:11:51.370 --> 00:11:55.044
They take an iPad, they get
a Bluetooth keyboard, hook

00:11:55.044 --> 00:11:56.710
up the Bluetooth
keyboard, see that they

00:11:56.710 --> 00:12:00.310
can enter emails and
iMessage, enter the game,

00:12:00.310 --> 00:12:02.590
and have no idea why their
keyboard functionality

00:12:02.590 --> 00:12:04.000
isn't working.

00:12:04.000 --> 00:12:06.400
Unfortunately, right now,
there are some limitations

00:12:06.400 --> 00:12:10.720
around how Bluetooth input
is handled on iOS devices,

00:12:10.720 --> 00:12:13.780
specifically with respect to
how Unity services those input

00:12:13.780 --> 00:12:14.750
events.

00:12:14.750 --> 00:12:18.250
So I suggest for the
time being, if you

00:12:18.250 --> 00:12:22.960
detect that the device is
ARC compatible, by default

00:12:22.960 --> 00:12:25.000
enable keyboard features.

00:12:25.000 --> 00:12:27.010
Get your keyboard users
into those keyboard

00:12:27.010 --> 00:12:29.590
features that you've spent
all this time polishing.

00:12:29.590 --> 00:12:31.900
If it's a general
Android device, which

00:12:31.900 --> 00:12:34.630
is standard compliant
with Bluetooth keyboards,

00:12:34.630 --> 00:12:37.870
default your keyboard
functionality off

00:12:37.870 --> 00:12:41.140
and give users an option to then
enable keyboard functionality

00:12:41.140 --> 00:12:42.790
if they want to.

00:12:42.790 --> 00:12:45.130
On an iOS device,
however, at this time,

00:12:45.130 --> 00:12:47.620
I recommend disabling
keyboard input,

00:12:47.620 --> 00:12:51.300
because it can provide a
confusing experience to users.

00:12:51.300 --> 00:12:54.150
Now, we've got a lot of
engineers in the room,

00:12:54.150 --> 00:12:57.650
so this is preaching to
the choir, and I apologize.

00:12:57.650 --> 00:13:00.230
But as with any sort
of side quest project

00:13:00.230 --> 00:13:02.300
or any sort of support
or retrofitting

00:13:02.300 --> 00:13:06.530
around a new platform,
focus on minimizing coupling

00:13:06.530 --> 00:13:08.840
and ensure maintainability.

00:13:08.840 --> 00:13:11.120
That's a lot of words,
there's a lot of jargon there.

00:13:11.120 --> 00:13:14.180
Let me give you a
specific example of that.

00:13:14.180 --> 00:13:18.704
Going back to the battle
keyboard bindings, now,

00:13:18.704 --> 00:13:20.120
I know many people
in the audience

00:13:20.120 --> 00:13:22.730
are probably thinking about how
they might implement something

00:13:22.730 --> 00:13:24.590
like this in their
own game right now.

00:13:24.590 --> 00:13:26.630
And there are many
ways to do so.

00:13:26.630 --> 00:13:28.130
One of the first
approaches, which

00:13:28.130 --> 00:13:31.010
might be somewhat naive with
respect to this statement,

00:13:31.010 --> 00:13:34.610
is taking those
battle ability icons

00:13:34.610 --> 00:13:38.090
and directly coupling the
display and functionality

00:13:38.090 --> 00:13:43.850
of those keyboard macros with
the battle ability icons.

00:13:43.850 --> 00:13:47.150
Now, that's probably
an easy way to get

00:13:47.150 --> 00:13:50.210
this functionality started
and get it going in your game.

00:13:50.210 --> 00:13:52.400
However, the downside
is now you've

00:13:52.400 --> 00:13:55.610
introduced a coupling between
your keyboard functionality

00:13:55.610 --> 00:13:59.290
and the core mechanics
of battle in your game.

00:13:59.290 --> 00:14:00.539
This isn't good.

00:14:00.539 --> 00:14:02.080
You're going to end
up in a situation

00:14:02.080 --> 00:14:04.510
where you've pat
yourself on the back,

00:14:04.510 --> 00:14:06.610
you've gotten awesome
keyboard-focused features

00:14:06.610 --> 00:14:09.760
in your game, you have
Chromebook support,

00:14:09.760 --> 00:14:13.030
months in the future
an engineer is

00:14:13.030 --> 00:14:14.930
going to roll onto
the project, they're

00:14:14.930 --> 00:14:17.740
going to have to redesign some
core mechanic of your battle

00:14:17.740 --> 00:14:19.090
ability system.

00:14:19.090 --> 00:14:21.670
And they're are going to be
stuck maintaining your keyboard

00:14:21.670 --> 00:14:23.170
binding code.

00:14:23.170 --> 00:14:25.510
So instead for this
example, consider

00:14:25.510 --> 00:14:29.590
having an overlay,
where you pin those UI

00:14:29.590 --> 00:14:32.890
elements on the abilities,
detect them at the time

00:14:32.890 --> 00:14:34.840
that you're in battle,
and then do something

00:14:34.840 --> 00:14:37.150
like simulate an input press.

00:14:37.150 --> 00:14:40.750
It's not exactly elegant, but
it at least removes the coupling

00:14:40.750 --> 00:14:44.930
from your keyboard functionality
and your battle ability system.

00:14:47.460 --> 00:14:49.440
Now, I'm going to turn
the microphone back over

00:14:49.440 --> 00:14:52.652
to Ben for some more
technical considerations.

00:14:55.207 --> 00:14:56.290
BEN GABLE: Thanks, Daniel.

00:14:59.520 --> 00:15:03.330
So as we saw from
Daniel, thinking

00:15:03.330 --> 00:15:06.600
about how you can optimize your
game on this new form factor

00:15:06.600 --> 00:15:08.340
is really a huge benefit.

00:15:08.340 --> 00:15:10.180
And there's a possibility there.

00:15:10.180 --> 00:15:12.638
So we're going to go over some
of the technical aspects you

00:15:12.638 --> 00:15:15.450
should consider when optimizing
your game for Chromebooks.

00:15:15.450 --> 00:15:17.810
So first off, it's
the real Android.

00:15:17.810 --> 00:15:21.371
So it is Android
running side by side

00:15:21.371 --> 00:15:22.620
with Chrome OS and Chromebook.

00:15:22.620 --> 00:15:25.250
So you've got access
to all the things

00:15:25.250 --> 00:15:27.990
you would expect in Android.

00:15:27.990 --> 00:15:30.030
And as Daniel mentioned,
the first step

00:15:30.030 --> 00:15:31.380
is kind of already done for you.

00:15:31.380 --> 00:15:34.380
So if your app is published
on the Play Store right now,

00:15:34.380 --> 00:15:36.180
it's already running
on Chromebooks.

00:15:36.180 --> 00:15:40.320
That might freak some of
you out, but don't worry.

00:15:40.320 --> 00:15:44.100
I would say you're probably
80% to 90% of the way there.

00:15:44.100 --> 00:15:46.710
You're using the same APK
for both mobile devices

00:15:46.710 --> 00:15:49.150
and Chromebooks.

00:15:49.150 --> 00:15:52.480
So let's go over some common
issues, some best practices,

00:15:52.480 --> 00:15:54.190
and some of the
testing and tools

00:15:54.190 --> 00:15:59.850
that you have available when
optimizing for Chrome OS.

00:15:59.850 --> 00:16:02.450
So the first thing we're
going to talk about

00:16:02.450 --> 00:16:05.420
is targetSdkVersion
and 64-bit support.

00:16:05.420 --> 00:16:10.640
So Chrome OS is currently
running Android M. P

00:16:10.640 --> 00:16:12.954
is coming later this
summer, which is awesome,

00:16:12.954 --> 00:16:14.870
because there are some
cool mouse capture APIs

00:16:14.870 --> 00:16:16.370
that we'll have there.

00:16:16.370 --> 00:16:19.910
But you have to target at
least API level 24 in order

00:16:19.910 --> 00:16:24.770
to get all of the freeform
resizing functionality

00:16:24.770 --> 00:16:25.652
in your game.

00:16:25.652 --> 00:16:27.860
If you don't do that, your
game will restart whenever

00:16:27.860 --> 00:16:29.310
you get a configuration change.

00:16:29.310 --> 00:16:31.490
So it's important to
target at least 24.

00:16:31.490 --> 00:16:33.950
But as mentioned
earlier, this fall, we're

00:16:33.950 --> 00:16:36.620
going to require you
to target Android O.

00:16:36.620 --> 00:16:38.120
So it's a good idea
to start working

00:16:38.120 --> 00:16:40.580
on this now rather than later.

00:16:40.580 --> 00:16:42.680
Your minimum API level
doesn't need to change.

00:16:42.680 --> 00:16:46.160
And some things you might run
into are permission updates--

00:16:46.160 --> 00:16:47.930
we've talked about
it a bit earlier--

00:16:47.930 --> 00:16:50.316
and some background
execution changes as well.

00:16:50.316 --> 00:16:52.190
So first thing you should
do is start looking

00:16:52.190 --> 00:16:55.140
at your targetSdkVersion.

00:16:55.140 --> 00:16:57.822
So some features and
sensors are actually

00:16:57.822 --> 00:16:59.030
incompatible with Chromebook.

00:16:59.030 --> 00:17:04.579
So for example, if
your game is asking

00:17:04.579 --> 00:17:08.780
for using GPS, or NFC,
or stuff like that,

00:17:08.780 --> 00:17:10.369
those are not supported
on Chromebook.

00:17:10.369 --> 00:17:13.310
So it's going to show up as
not compatible with your device

00:17:13.310 --> 00:17:14.300
on the Play Store.

00:17:14.300 --> 00:17:17.630
So you want to make sure that
you remove those permissions,

00:17:17.630 --> 00:17:21.290
if you're not using them, or add
required equals false in order

00:17:21.290 --> 00:17:23.355
to prevent it from being
filtered out on the Play

00:17:23.355 --> 00:17:25.480
Store for any Chromebook users.

00:17:25.480 --> 00:17:27.980
If you do that, however, just
make sure to dynamically check

00:17:27.980 --> 00:17:30.146
in your code these features
are available before you

00:17:30.146 --> 00:17:31.240
try to use them.

00:17:31.240 --> 00:17:32.830
Otherwise, things will blow up.

00:17:32.830 --> 00:17:35.840
And that's never fun.

00:17:35.840 --> 00:17:38.490
And some permissions also
imply feature requirements.

00:17:38.490 --> 00:17:40.730
So it's kind of a small list.

00:17:40.730 --> 00:17:42.630
It's on the Developer page.

00:17:42.630 --> 00:17:47.480
But if you're looking
for like SMSs or stuff

00:17:47.480 --> 00:17:49.910
like that to send out
maybe invites to friends

00:17:49.910 --> 00:17:53.880
lists or whatever, your app will
be filtered from Chromebook.

00:17:53.880 --> 00:17:57.050
So it's important to just
double-check your permissions

00:17:57.050 --> 00:17:58.430
and features to
make sure there's

00:17:58.430 --> 00:18:03.086
nothing that could be filtering
it out on Chromebooks.

00:18:03.086 --> 00:18:06.470
So the other big set of common
issues is around the display.

00:18:06.470 --> 00:18:10.610
So dynamic resizing by default
is enabled if your API level

00:18:10.610 --> 00:18:13.370
target is greater than 24.

00:18:13.370 --> 00:18:17.940
So in a lot of cases can
cause flickering or texture

00:18:17.940 --> 00:18:19.940
stretching.

00:18:19.940 --> 00:18:23.149
And especially with a
lot of game engines,

00:18:23.149 --> 00:18:24.440
it doesn't handle it very well.

00:18:24.440 --> 00:18:27.040
Because in the gaming
world, PC, we kind of

00:18:27.040 --> 00:18:30.160
expect things to be at a set
resolution as a locked aspect

00:18:30.160 --> 00:18:31.040
ratio.

00:18:31.040 --> 00:18:33.550
So what we kind of recommend
is that, if you can't support

00:18:33.550 --> 00:18:36.690
dynamic resizing, which we
encourage you take a look at,

00:18:36.690 --> 00:18:39.400
you can always set resizable
activity equal to false

00:18:39.400 --> 00:18:43.330
in your manifest in order to
prevent Chrome OS from allowing

00:18:43.330 --> 00:18:45.079
your app to dynamically resize.

00:18:45.079 --> 00:18:46.870
One thing you should
keep a note is that it

00:18:46.870 --> 00:18:48.760
has to be on the root activity.

00:18:48.760 --> 00:18:51.050
So we've seen some cases
where if you happen

00:18:51.050 --> 00:18:53.410
to use a different
launch mode or something,

00:18:53.410 --> 00:18:54.640
it will ignore this setting.

00:18:54.640 --> 00:18:56.265
So you just have to
make sure that that

00:18:56.265 --> 00:18:59.525
is set on your root activity.

00:18:59.525 --> 00:19:01.360
Another thing to
take into account

00:19:01.360 --> 00:19:03.280
is that Chromebooks
are convertibles.

00:19:03.280 --> 00:19:07.660
You can put them in
laptop mode, tablet mode.

00:19:07.660 --> 00:19:09.070
And upside down apps are bad.

00:19:09.070 --> 00:19:12.140
So how do we prevent this?

00:19:12.140 --> 00:19:16.700
So basically what
you want to do is,

00:19:16.700 --> 00:19:22.400
if you are checking your code
and determining the orientation

00:19:22.400 --> 00:19:24.320
based on that, you
want to make sure

00:19:24.320 --> 00:19:25.910
that you're using
display getRotation

00:19:25.910 --> 00:19:29.630
and you're taking into account
that portrait mode might not

00:19:29.630 --> 00:19:30.920
always be rotation 0.

00:19:30.920 --> 00:19:33.510
So you want to swap
your axis accordingly,

00:19:33.510 --> 00:19:35.385
if you are doing this
in code dynamically,

00:19:35.385 --> 00:19:37.510
because it's going to be
different from your mobile

00:19:37.510 --> 00:19:40.550
device to Chromebooks.

00:19:40.550 --> 00:19:43.070
However, easiest way
to get to handle this

00:19:43.070 --> 00:19:46.830
is to just specify sensor
orientations in your manifest.

00:19:46.830 --> 00:19:48.646
So you can specify
portrait or landscape.

00:19:48.646 --> 00:19:50.270
And then if you do
that, just make sure

00:19:50.270 --> 00:19:52.730
that you don't specify
one thing in the manifest

00:19:52.730 --> 00:19:55.230
and then try to do something
different in the code later on.

00:19:55.230 --> 00:19:57.070
You'll make Chrome OS go crazy.

00:19:59.604 --> 00:20:01.020
Another thing to
take into account

00:20:01.020 --> 00:20:03.750
is that if you have
a portrait mode game

00:20:03.750 --> 00:20:07.140
and you play it in a full
screen landscape setting,

00:20:07.140 --> 00:20:09.450
you might want to add some
flowers or other cool stuff

00:20:09.450 --> 00:20:12.690
on the sides there to
prevent the ugly black bars.

00:20:12.690 --> 00:20:14.520
So it's just something
to think about.

00:20:17.410 --> 00:20:19.230
So another thing
that's on Chrome OS

00:20:19.230 --> 00:20:21.990
is input compatibility mode.

00:20:21.990 --> 00:20:25.350
So what this aims to
do is it basically

00:20:25.350 --> 00:20:28.290
tries to just make touch-based
games and apps just

00:20:28.290 --> 00:20:31.350
work, which makes sense,
because most of the apps

00:20:31.350 --> 00:20:34.440
and games on Google Play right
now for mobile devices only

00:20:34.440 --> 00:20:36.510
expect touch inputs.

00:20:36.510 --> 00:20:39.780
So it basically translates
mouse and trackpad events

00:20:39.780 --> 00:20:42.180
to touch events under the hood.

00:20:42.180 --> 00:20:44.160
This might not be
the best if you're

00:20:44.160 --> 00:20:46.650
trying to actually
optimize your game

00:20:46.650 --> 00:20:48.850
and take advantage of
mouse and trackpad events.

00:20:48.850 --> 00:20:51.510
So what you can
do is you can tell

00:20:51.510 --> 00:20:55.320
Chrome OS you're targeting
PC-type hardware by specifying

00:20:55.320 --> 00:20:57.130
the following in your manifest.

00:20:57.130 --> 00:21:00.330
And then you can check the
source of your motion events

00:21:00.330 --> 00:21:02.957
to actually determine
where this is coming from.

00:21:02.957 --> 00:21:05.040
So once you do that, you
can do things like listen

00:21:05.040 --> 00:21:07.800
for mouse hovering,
scrolling, stuff

00:21:07.800 --> 00:21:10.527
like that, all these nice
things that users would expect

00:21:10.527 --> 00:21:11.610
when playing with a mouse.

00:21:14.280 --> 00:21:19.800
So a really good example of
this is "Minecraft, Story Mode."

00:21:19.800 --> 00:21:22.230
Telltale basically
dynamically checks

00:21:22.230 --> 00:21:25.080
to see if the user is playing
with a keyboard and mouse.

00:21:25.080 --> 00:21:30.540
And if they are, they change the
input mode to basically support

00:21:30.540 --> 00:21:32.670
from their touch-base
control scheme

00:21:32.670 --> 00:21:37.010
to their desktop PC and
mouse type control scheme.

00:21:37.010 --> 00:21:39.610
So it really works really
well, and it's seamlessly.

00:21:39.610 --> 00:21:40.980
And so if you're looking
for a great example,

00:21:40.980 --> 00:21:42.479
I recommend that
you check that out.

00:21:45.240 --> 00:21:48.740
So let's talk about
some best practices now.

00:21:48.740 --> 00:21:50.210
Targeting compatible
Chromebooks--

00:21:50.210 --> 00:21:53.210
so not all Chromebooks are
going to support touch or even

00:21:53.210 --> 00:21:54.424
have touch screens.

00:21:54.424 --> 00:21:56.090
A lot of them do right
now, but it's not

00:21:56.090 --> 00:21:57.980
something you should
rely on in the future.

00:21:57.980 --> 00:22:00.710
So you should make
sure that you specify

00:22:00.710 --> 00:22:04.990
that you don't
require a touchscreen,

00:22:04.990 --> 00:22:06.310
because of a faketouch feature.

00:22:06.310 --> 00:22:07.960
Otherwise, again,
your app or game

00:22:07.960 --> 00:22:11.650
will get filtered out from
the Google Play Store.

00:22:11.650 --> 00:22:14.290
You can also ex-- we
don't recommend this,

00:22:14.290 --> 00:22:16.450
but if you want to
exclude specific devices,

00:22:16.450 --> 00:22:18.820
you can always do so through
the Google Play Console.

00:22:18.820 --> 00:22:20.530
But we recommend that
you try to support

00:22:20.530 --> 00:22:24.040
as many devices as possible.

00:22:24.040 --> 00:22:26.580
So mouse and keyboard--
probably one of the biggest

00:22:26.580 --> 00:22:30.450
best practices we can suggest is
to support mouse and keyboard.

00:22:30.450 --> 00:22:33.460
So what does that actually mean?

00:22:33.460 --> 00:22:35.340
Well, detecting
clamshell versus tablet

00:22:35.340 --> 00:22:39.660
is one, showing contextual
control prompts, and consider

00:22:39.660 --> 00:22:43.290
accessibility menus and UI.

00:22:43.290 --> 00:22:48.060
So again, "Asphalt 8"
detects that you're

00:22:48.060 --> 00:22:50.519
using a keyboard when
you start up the game.

00:22:50.519 --> 00:22:52.560
And it will actually show
you your control scheme

00:22:52.560 --> 00:22:55.420
based on which control
scheme you're using.

00:22:55.420 --> 00:22:57.000
So if you're playing
in tablet mode,

00:22:57.000 --> 00:22:59.100
which works great,
not so great when

00:22:59.100 --> 00:23:00.750
you're playing with a laptop.

00:23:00.750 --> 00:23:02.907
So they will change the
control prompts when you're

00:23:02.907 --> 00:23:05.490
playing with keyboard and mouse,
so that users aren't confused

00:23:05.490 --> 00:23:07.300
when they're sitting there,
and they're like, what,

00:23:07.300 --> 00:23:09.300
do I have to pick up my
laptop and play with it?

00:23:09.300 --> 00:23:13.126
So definitely keep that in mind.

00:23:13.126 --> 00:23:16.580
If you're using Unity, luckily
detecting a mouse and keyboard

00:23:16.580 --> 00:23:17.850
is pretty easy.

00:23:17.850 --> 00:23:20.840
You can just use a
standard input class

00:23:20.840 --> 00:23:25.040
to detect keyboard
and mouse input.

00:23:25.040 --> 00:23:29.180
If you're using Java, you can
do something a little bit more

00:23:29.180 --> 00:23:35.270
interesting, where basically
you can pull the input manager

00:23:35.270 --> 00:23:38.425
and basically figure out if
your device has a hardware

00:23:38.425 --> 00:23:39.800
keyboard and mouse
and then maybe

00:23:39.800 --> 00:23:42.351
toggle some kind of
input mode to say,

00:23:42.351 --> 00:23:43.850
I'm playing on a
desktop environment

00:23:43.850 --> 00:23:45.824
versus I'm playing on
a mobile environment.

00:23:45.824 --> 00:23:47.240
So those are some
ideas in how you

00:23:47.240 --> 00:23:49.490
might detect the different
environment you're

00:23:49.490 --> 00:23:55.250
in and providing the right
control scheme for your users.

00:23:55.250 --> 00:23:58.610
And Daniel kind of talked
about some of these ideas

00:23:58.610 --> 00:24:00.230
for keyboard.

00:24:00.230 --> 00:24:03.020
But things like skill
keybindings, navigation,

00:24:03.020 --> 00:24:06.882
menu navigation, extra credit,
custom key mappings, these

00:24:06.882 --> 00:24:08.840
are all things that would
really be appreciated

00:24:08.840 --> 00:24:10.980
by users on Chrome OS.

00:24:10.980 --> 00:24:12.980
If you're using gamepads,
which some of you are,

00:24:12.980 --> 00:24:15.710
it supports for up to 4 and
it uses all the standard APIs

00:24:15.710 --> 00:24:16.440
for reporting.

00:24:16.440 --> 00:24:19.790
So you're set there.

00:24:19.790 --> 00:24:22.970
And performance
front, so Chromebooks

00:24:22.970 --> 00:24:25.790
support the Pixelbooks and
some of the newer [INAUDIBLE]

00:24:25.790 --> 00:24:28.240
like devices, all
support Vulkan 1.0.

00:24:28.240 --> 00:24:29.820
1.1 is coming soon.

00:24:29.820 --> 00:24:33.150
So this is rolling out
across different devices.

00:24:33.150 --> 00:24:35.510
So definitely take advantage
of that, if you can.

00:24:35.510 --> 00:24:39.920
Also try to provide
an x86 build.

00:24:39.920 --> 00:24:42.950
There's a lot of Chromebooks
that have x86 processors.

00:24:42.950 --> 00:24:45.790
And there is some overhead
with Houdini ARM translation.

00:24:45.790 --> 00:24:47.670
So just keep that in
mind, that if you can,

00:24:47.670 --> 00:24:49.920
it's best to provide
an x86 build,

00:24:49.920 --> 00:24:52.010
so that you can take
advantage of that.

00:24:52.010 --> 00:24:54.770
And also, you should be careful
with dynamic performance

00:24:54.770 --> 00:24:56.250
optimizations in your game.

00:24:56.250 --> 00:25:00.560
So Chrome OS is based
using a compositor.

00:25:00.560 --> 00:25:04.430
And it can totally
screw up-- you

00:25:04.430 --> 00:25:06.500
could get into situations
where you end up

00:25:06.500 --> 00:25:09.920
with quadruple buffering based
on how the compositor is doing.

00:25:09.920 --> 00:25:12.350
So you might want to
think about testing,

00:25:12.350 --> 00:25:14.810
if you're doing any kind
of dynamic optimizations,

00:25:14.810 --> 00:25:17.210
to make sure that you could
be getting requesting buffers

00:25:17.210 --> 00:25:18.610
and getting them
back super fast.

00:25:18.610 --> 00:25:19.640
And you might get
one buffer that

00:25:19.640 --> 00:25:21.620
takes it some time
because of the compositor.

00:25:21.620 --> 00:25:23.990
So that could totally screw
up your dynamic performance

00:25:23.990 --> 00:25:25.050
optimizations.

00:25:25.050 --> 00:25:26.630
So that's something
to test and just

00:25:26.630 --> 00:25:31.170
keep in mind when you're trying
to optimize for Chrome OS.

00:25:31.170 --> 00:25:33.180
So testing and tools--

00:25:33.180 --> 00:25:36.040
you want to make sure that you
test your old and new flows.

00:25:36.040 --> 00:25:38.590
So moving forward, our goal
is to keep Chrome OS in line

00:25:38.590 --> 00:25:39.970
with--

00:25:39.970 --> 00:25:42.410
the Android version in line
with your mobile devices,

00:25:42.410 --> 00:25:44.974
so there's not a lot of big,
large, breaking changes.

00:25:44.974 --> 00:25:46.390
But with that said,
when you first

00:25:46.390 --> 00:25:48.181
start bringing your
game over to Chrome OS,

00:25:48.181 --> 00:25:50.080
you want to make sure
you test the Close

00:25:50.080 --> 00:25:52.069
button in the
upper right corner,

00:25:52.069 --> 00:25:54.235
make sure that your app
isn't dynamically resizable,

00:25:54.235 --> 00:25:56.620
if you're saying
it's not resizable,

00:25:56.620 --> 00:26:02.830
minimizing, maximizing,
x86 builds, ARM builds.

00:26:02.830 --> 00:26:05.530
You just want to make sure
that there's no gotchas.

00:26:05.530 --> 00:26:09.670
The Android lifecycle is the
same across Android and Chrome

00:26:09.670 --> 00:26:10.270
OS.

00:26:10.270 --> 00:26:12.392
So it should all be
the same, but there

00:26:12.392 --> 00:26:14.350
might be some gotchas
you should just test for.

00:26:17.050 --> 00:26:20.200
And the Chrome OS
emulator is now available.

00:26:20.200 --> 00:26:21.700
It's integrated
with Android Studio.

00:26:21.700 --> 00:26:23.650
And it has hardware
acceleration.

00:26:23.650 --> 00:26:25.750
This is a great tool
if you're developing

00:26:25.750 --> 00:26:30.370
to quickly test any kind
of performance or issues

00:26:30.370 --> 00:26:33.230
with your game.

00:26:33.230 --> 00:26:38.210
And also big news is that ADB
over USB is now available.

00:26:38.210 --> 00:26:40.550
It's coming out to
Chromebooks, rolling out

00:26:40.550 --> 00:26:41.910
to the different models.

00:26:41.910 --> 00:26:44.510
Previously, you had
to attach over Wi-Fi,

00:26:44.510 --> 00:26:48.170
which obviously is kind of
not ideal in some cases.

00:26:48.170 --> 00:26:49.640
But we're slowly
rolling this out.

00:26:49.640 --> 00:26:52.580
And you should watch the
keynote later this week

00:26:52.580 --> 00:26:53.790
for more information on this.

00:26:53.790 --> 00:26:59.030
But this is also a really
big win for Chromebooks.

00:26:59.030 --> 00:27:04.850
And for profiling and debugging
APKs, in Android Studio 3

00:27:04.850 --> 00:27:12.740
and up, you can now import any
debuggable APK or Unity Gradle

00:27:12.740 --> 00:27:15.530
project and actually take
advantage of the Android

00:27:15.530 --> 00:27:19.100
Profiler for things like
CPU, memory, network usage.

00:27:19.100 --> 00:27:21.660
So that's super-- it's
a really handy tool.

00:27:21.660 --> 00:27:25.140
And I recommend you
all check it out.

00:27:25.140 --> 00:27:26.810
And we have a lot of
developer resources

00:27:26.810 --> 00:27:29.840
on developing and
optimizing for Chrome OS.

00:27:29.840 --> 00:27:32.090
So I'd recommend
that you definitely

00:27:32.090 --> 00:27:35.240
go check out our developer
pages for all the even more

00:27:35.240 --> 00:27:37.640
nitty gritty than this talk.

00:27:37.640 --> 00:27:39.140
And also our developer
blog, there's

00:27:39.140 --> 00:27:40.640
some very specific
posts that we've

00:27:40.640 --> 00:27:42.830
written on specific
aspects of Chromebook.

00:27:42.830 --> 00:27:45.380
So if you're looking
for more in-depth topics

00:27:45.380 --> 00:27:49.290
or in-depth knowledge,
you should check that out.

00:27:49.290 --> 00:27:53.270
So to recap, we're really
excited about the possibility

00:27:53.270 --> 00:27:56.570
of Chromebooks now that we
can play on a mobile app,

00:27:56.570 --> 00:27:59.330
take it to your big screen,
when at home on your Chromebook.

00:27:59.330 --> 00:28:03.644
And it really opens up, I
think, the way you can present--

00:28:03.644 --> 00:28:05.060
using Chromebooks,
you can provide

00:28:05.060 --> 00:28:09.470
the best possible experience
for your mobile game.

00:28:09.470 --> 00:28:11.900
And as we've seen,
we've got lots

00:28:11.900 --> 00:28:15.410
of partners that are doing this
and taking advantage of it.

00:28:15.410 --> 00:28:17.720
And they're finding out
it's a great opportunity,

00:28:17.720 --> 00:28:20.112
like our friends from "Roblox."

00:28:20.112 --> 00:28:22.070
And they're finding out
it's not a lot of work.

00:28:22.070 --> 00:28:25.280
80% to 90% of the way, just
the keyboard and mouse,

00:28:25.280 --> 00:28:29.360
some testing, and now, you've
got this whole, new set

00:28:29.360 --> 00:28:34.910
of users that can enjoy and play
your mobile game in the best

00:28:34.910 --> 00:28:35.880
way possible.

00:28:35.880 --> 00:28:37.254
So we're super excited.

00:28:37.254 --> 00:28:38.670
We think our
partners are excited.

00:28:38.670 --> 00:28:41.580
And we hope you all
take advantage of it.

00:28:41.580 --> 00:28:44.120
So as I mentioned, there's an
I/O session later this week,

00:28:44.120 --> 00:28:45.920
where we're going to talk
about, not specifically games,

00:28:45.920 --> 00:28:47.594
but just kind of
Chrome OS in general.

00:28:47.594 --> 00:28:49.010
There's a lot of
cool stuff that's

00:28:49.010 --> 00:28:50.051
going to be in that talk.

00:28:50.051 --> 00:28:54.220
So if you're going to I/O,
definitely check it out.

00:28:54.220 --> 00:29:02.460
And as a special
surprise, Chromebooks--

00:29:02.460 --> 00:29:05.160
so we have a bunch
of Chromebooks,

00:29:05.160 --> 00:29:07.971
and we're going to give one
to each company that is here

00:29:07.971 --> 00:29:08.470
today.

00:29:08.470 --> 00:29:11.400
So what we're going
to do is, please

00:29:11.400 --> 00:29:12.985
come find me during the mixer.

00:29:12.985 --> 00:29:15.360
I'm going to be sitting back
over there with those boxes.

00:29:15.360 --> 00:29:18.030
And one representative
from your company, we'll

00:29:18.030 --> 00:29:19.980
give you a Samsung
Chromebook Pro.

00:29:19.980 --> 00:29:21.780
So we hope that you
guys take that back.

00:29:21.780 --> 00:29:26.160
If you already have one,
take another one, test on it,

00:29:26.160 --> 00:29:27.370
please check it out.

00:29:27.370 --> 00:29:31.120
And we think that you'll be
surprised at how well it works.

00:29:31.120 --> 00:29:33.240
And hopefully, it
inspires all of you

00:29:33.240 --> 00:29:36.740
to optimize your
games for Chrome OS.

00:29:36.740 --> 00:29:37.470
So thank you.

00:29:37.470 --> 00:29:40.830
If there's any questions, I
don't know if we have any time,

00:29:40.830 --> 00:29:43.010
you can email me, or we'll
answer some right now.

00:29:43.010 --> 00:29:44.090
AUDIENCE: Thanks.

00:29:44.090 --> 00:29:46.100
So I'm always looking
for great Android TV

00:29:46.100 --> 00:29:47.150
games for [INAUDIBLE] TV.

00:29:47.150 --> 00:29:50.022
And it seems that with the
lack of touchscreen support,

00:29:50.022 --> 00:29:51.980
you can't obviously assume
touchscreen support,

00:29:51.980 --> 00:29:54.170
as you mentioned, and
with controller support,

00:29:54.170 --> 00:29:55.190
HIT support.

00:29:55.190 --> 00:29:58.100
How much overlap is there
between Android games

00:29:58.100 --> 00:30:01.880
for Chromebook and Android
games for Android TV?

00:30:01.880 --> 00:30:04.980
BEN GABLE: Android TV.

00:30:04.980 --> 00:30:06.860
So I'm not super
familiar with Android TV,

00:30:06.860 --> 00:30:07.700
what the overlap is.

00:30:07.700 --> 00:30:11.390
But I think, in general,
it's just another--

00:30:11.390 --> 00:30:14.944
it's another space where you're
not going to have a touchscreen

00:30:14.944 --> 00:30:17.360
or you're going to have to
think about these other methods

00:30:17.360 --> 00:30:21.739
of input that will just
make your game work if you

00:30:21.739 --> 00:30:22.780
don't have a touchscreen.

00:30:22.780 --> 00:30:23.860
I don't know if that
answers your question.

00:30:23.860 --> 00:30:26.110
Or like, what specifically
do you mean by the overlap?

00:30:26.110 --> 00:30:30.700
AUDIENCE: Well, for example,
Android TV, you're quite--

00:30:30.700 --> 00:30:33.541
for the recording, Android
TV doesn't have icons,

00:30:33.541 --> 00:30:35.540
it has banners, because
it's a different format.

00:30:35.540 --> 00:30:37.750
And the launcher is different,
the Leanback Launcher.

00:30:37.750 --> 00:30:40.960
How much of what you do
code-wise and design-wise

00:30:40.960 --> 00:30:45.040
for games on Chrome
OS can you then take

00:30:45.040 --> 00:30:48.172
to make a great
game for Android TV?

00:30:48.172 --> 00:30:48.880
BEN GABLE: I see.

00:30:48.880 --> 00:30:51.647
I think it's all work
that all plays together.

00:30:51.647 --> 00:30:53.230
So if you're optimizing
for Android TV

00:30:53.230 --> 00:30:55.146
and you're adding all
these keyboard and mouse

00:30:55.146 --> 00:30:57.730
input-- or keyboard
or computer inputs,

00:30:57.730 --> 00:31:01.260
it all kind of filters back
into Chromebooks as well.

00:31:01.260 --> 00:31:05.220
So thinking about
implementing in your game

00:31:05.220 --> 00:31:06.810
other methods of
input and other ways

00:31:06.810 --> 00:31:09.570
that users might be
interacting with your game,

00:31:09.570 --> 00:31:11.970
it all plays together
into making an app--

00:31:11.970 --> 00:31:15.360
a game that can run on
Android TV, on Chromebooks,

00:31:15.360 --> 00:31:18.577
on tablets, et cetera.

00:31:18.577 --> 00:31:19.410
AUDIENCE: Thank you.

00:31:19.410 --> 00:31:21.810
BEN GABLE: Yep.

00:31:21.810 --> 00:31:25.170
In the back.

00:31:25.170 --> 00:31:26.130
In the back.

00:31:29.970 --> 00:31:33.080
AUDIENCE: Are you guys
going to be putting together

00:31:33.080 --> 00:31:37.280
a highlight reel of Chrome
OS apps running on--

00:31:37.280 --> 00:31:39.110
or I'm sorry, Android
running on Chrome OS.

00:31:39.110 --> 00:31:40.774
Because that was
our other thing when

00:31:40.774 --> 00:31:42.440
we're trying to get
our developers to be

00:31:42.440 --> 00:31:45.020
excited about it, like
this is another platform,

00:31:45.020 --> 00:31:47.510
it's another chance for
you to reach more users.

00:31:47.510 --> 00:31:50.170
But they look at it, and they
say, well, that's more work.

00:31:50.170 --> 00:31:53.660
So we want to be able to
make sure it's something

00:31:53.660 --> 00:31:56.700
that we can highlight when
it's being put in well.

00:31:56.700 --> 00:31:59.390
And we can point
to other developers

00:31:59.390 --> 00:32:01.226
and say, that's what
we're looking for,

00:32:01.226 --> 00:32:02.600
that's the kind
of functionality,

00:32:02.600 --> 00:32:04.090
that's the sort of user--

00:32:04.090 --> 00:32:06.950
The "Galaxy of Heroes"
examples were incredible.

00:32:06.950 --> 00:32:08.984
That's the kind of stuff
that our devs need.

00:32:08.984 --> 00:32:09.650
BEN GABLE: Yeah.

00:32:09.650 --> 00:32:12.250
So there is-- this is a reel
that's happening at the I/O

00:32:12.250 --> 00:32:14.720
keynote that I believe will
be uploaded to YouTube as

00:32:14.720 --> 00:32:17.270
well, if you don't
have an I/O ticket.

00:32:17.270 --> 00:32:20.030
Also, when you get the
Chromebook, in the Google Play

00:32:20.030 --> 00:32:21.530
Store, we're
highlighting games that

00:32:21.530 --> 00:32:22.880
have been optimized very well.

00:32:22.880 --> 00:32:25.782
So it's an actual
featured banner in there.

00:32:25.782 --> 00:32:27.740
So you'd be able to
download apps and test them

00:32:27.740 --> 00:32:30.590
out and just kind of see what
other games might be doing

00:32:30.590 --> 00:32:32.840
and how you could potentially
take some of those ideas

00:32:32.840 --> 00:32:34.430
and filter it into your game.

00:32:34.430 --> 00:32:35.660
AUDIENCE: Fantastic, thanks.

00:32:39.027 --> 00:32:42.220
BEN GABLE: Any other questions?

00:32:42.220 --> 00:32:42.720
Cool.

00:32:42.720 --> 00:32:45.370
If there's more questions,
feel free to shoot me an email.

00:32:45.370 --> 00:32:46.703
I'll be around at the mixer too.

00:32:46.703 --> 00:32:48.510
So thanks a lot.

