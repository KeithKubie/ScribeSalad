WEBVTT
Kind: captions
Language: en

00:00:00.320 --> 00:00:04.680
In order to append a properly scaled circle on the X and

00:00:04.680 --> 00:00:08.480
Y position, we'll have to use the two scales we just defined.

00:00:08.480 --> 00:00:12.650
Before I actually append a circle to the SVG element,

00:00:12.650 --> 00:00:16.000
I just want to make sure the scales are somewhat sensible.

00:00:16.000 --> 00:00:20.630
For China, remember, the life expectancy on the y axis was 75,

00:00:20.630 --> 00:00:25.587
and the income per person on the x axis was 8,347.

00:00:25.587 --> 00:00:31.020
The consoled out log function in JavaScript simply prints its

00:00:31.020 --> 00:00:36.120
arguments to the console, in this case the Chrome developer console.

00:00:36.120 --> 00:00:45.554
As you can see here 75 mapped to 30, and 8,347 mapped to 146.4, approximately.

00:00:45.554 --> 00:00:50.070
These seem sensible, since on the Y axis.

00:00:50.070 --> 00:00:53.960
I have a range of 0 to 150 pixels.

00:00:53.960 --> 00:00:58.980
The lower the value actually corresponds to a higher pixel position.

00:00:58.980 --> 00:01:02.500
And in the x axis, we have a range from 0 to 250.

00:01:02.500 --> 00:01:07.126
Now that we've checked that our scales seem to be doing what we expect them,

00:01:07.126 --> 00:01:10.710
let's try to append a circle into our SVG element.

00:01:10.710 --> 00:01:15.580
Remember, we stored our SVG element in a variable, so we could access it later.

00:01:15.580 --> 00:01:17.810
Into this SVG element, we want to append.

00:01:17.810 --> 00:01:19.520
What do you we want to append?

00:01:19.520 --> 00:01:24.010
In this case an SVG circle element, and in order to make sure that

00:01:24.010 --> 00:01:27.560
that circle actually shows up, we have to give it some attributes.

00:01:27.560 --> 00:01:30.780
The first attribute I want to add is the constant radius of ten.

00:01:30.780 --> 00:01:35.690
The second attribute, and one of the easiest, is the fill color, and

00:01:35.690 --> 00:01:39.730
the last two attributes we have to add are the x and y position.

00:01:39.730 --> 00:01:44.030
As you can see here, again, D3's chainable syntax allows me to

00:01:44.030 --> 00:01:47.650
just pass the circle element from one method call to the next.

00:01:47.650 --> 00:01:51.700
And keep adding different attributes as it goes down the chain.

00:01:51.700 --> 00:01:54.850
The SVG circle element has cx and

00:01:54.850 --> 00:01:59.650
cy which correspond to the center x and center y.

00:01:59.650 --> 00:02:03.790
Running this code, we see that a red circle has spontaneously showed up on our

00:02:03.790 --> 00:02:06.420
page, which means that we've done something right.

00:02:06.420 --> 00:02:09.780
Unfortunately, out of the context of every other circle from

00:02:09.780 --> 00:02:13.800
the gap minder plot, we aren't too sure of how correct this is, but

00:02:13.800 --> 00:02:17.290
if we hover over our SVG to see the borders.

00:02:17.290 --> 00:02:19.750
And if we look at the gap minder visualization.

00:02:19.750 --> 00:02:23.420
We see that the red circle is in approximately the right place.

00:02:23.420 --> 00:02:24.920
That is all I wanted to show you for

00:02:24.920 --> 00:02:28.870
now, in the console playing around with the three, but hopefully I have

00:02:28.870 --> 00:02:32.720
shown you some methods that you can use to create visualizations of your own.

00:02:32.720 --> 00:02:35.700
Again, if anything I have showed you, you would like to know

00:02:35.700 --> 00:02:39.330
more about there is a few resources in the instructor notes.

00:02:39.330 --> 00:02:44.320
Or the D3 site itself and Mike Bostock's blog, the creator of D3,

00:02:44.320 --> 00:02:46.470
have some great examples to go off of.

