WEBVTT
Kind: captions
Language: en

00:00:02.150 --> 00:00:05.640
Pop quiz, hotshot-- you've got
48 milliseconds of work to do,

00:00:05.640 --> 00:00:08.550
but only 16 milliseconds
per frame to get it done.

00:00:08.550 --> 00:00:10.130
What do you do?

00:00:10.130 --> 00:00:11.219
My name is Colt McAnlis.

00:00:11.219 --> 00:00:13.760
And while threading on Android
can help cure your performance

00:00:13.760 --> 00:00:16.761
woes, it can also end up
creating some huge problems,

00:00:16.761 --> 00:00:19.260
if you don't understand how
it's all working under the hood.

00:00:19.260 --> 00:00:21.384
So let's take a few minutes
and make sure we're all

00:00:21.384 --> 00:00:23.230
on the same page.

00:00:23.230 --> 00:00:26.000
See, a thread, by default,
does three things.

00:00:26.000 --> 00:00:26.700
It starts.

00:00:26.700 --> 00:00:28.960
It does some works, and
this is that work is done,

00:00:28.960 --> 00:00:29.910
it terminates.

00:00:29.910 --> 00:00:32.272
Now, by itself,
that's not too useful.

00:00:32.272 --> 00:00:34.480
Instead, what you want is
a thread that sticks around

00:00:34.480 --> 00:00:37.380
for a while, so you can feed it
packets of work to operate on.

00:00:37.380 --> 00:00:40.400
But to do that, you need
a little more scaffolding.

00:00:40.400 --> 00:00:42.787
First, since threads die
when they run out of work,

00:00:42.787 --> 00:00:45.120
you need to have some sort
of loop running on the thread

00:00:45.120 --> 00:00:45.920
to keep it alive.

00:00:45.920 --> 00:00:47.669
Just make sure to put
in an exit condition

00:00:47.669 --> 00:00:49.619
so you can terminate
that loop later.

00:00:49.619 --> 00:00:51.410
In addition, you'll
need some sort of queue

00:00:51.410 --> 00:00:54.390
that the loop can pull blocks
of work from to execute on.

00:00:54.390 --> 00:00:56.590
And, of course, you'll
need some other thread

00:00:56.590 --> 00:00:58.450
that creates work
packets and pushes them

00:00:58.450 --> 00:01:00.600
into the queue for execution.

00:01:00.600 --> 00:01:02.920
Now, if you've ever tried
to write the setup yourself,

00:01:02.920 --> 00:01:04.459
you know gets a
little gnarly to get

00:01:04.459 --> 00:01:06.439
all of that machine
reworking incorrectly.

00:01:06.439 --> 00:01:07.980
Thankfully, though,
Android has a set

00:01:07.980 --> 00:01:10.360
of classes to do
all that for you.

00:01:10.360 --> 00:01:12.270
For example, the
Looper class will

00:01:12.270 --> 00:01:15.720
keep the thread alive and pop
work off a queue to execute on.

00:01:15.720 --> 00:01:19.020
And rather than always inserting
work at the end of that queue,

00:01:19.020 --> 00:01:20.890
the Handler class
gives you the control

00:01:20.890 --> 00:01:22.780
to push work at
the head, the tail,

00:01:22.780 --> 00:01:24.574
or set a time-based
delay that'll

00:01:24.574 --> 00:01:25.990
keep some work for
being processed

00:01:25.990 --> 00:01:27.980
until that time has passed.

00:01:27.980 --> 00:01:30.400
And don't forget the
units of work in Android

00:01:30.400 --> 00:01:33.510
are explicitly defined
as intents or runables

00:01:33.510 --> 00:01:36.110
or messages, depending
on who's issuing them

00:01:36.110 --> 00:01:37.627
and who's consuming them.

00:01:37.627 --> 00:01:39.460
And then the combination
of all these things

00:01:39.460 --> 00:01:42.410
together is called
a HandlerThread,

00:01:42.410 --> 00:01:45.150
which lets this look like this.

00:01:45.150 --> 00:01:45.910
[CHEERING]

00:01:45.910 --> 00:01:46.660
Pretty nifty, huh?

00:01:46.660 --> 00:01:49.550
So let's look at how you can
use this in your application.

00:01:49.550 --> 00:01:51.280
When the user launches
your app, Android

00:01:51.280 --> 00:01:53.210
creates its own Linux process.

00:01:53.210 --> 00:01:54.940
Alongside with this,
the system creates

00:01:54.940 --> 00:01:57.260
a thread of execution
for your application

00:01:57.260 --> 00:02:00.080
called the Main thread,
which, at its core,

00:02:00.080 --> 00:02:01.870
is just a Handler thread.

00:02:01.870 --> 00:02:03.930
This Main thread handles
processing of events

00:02:03.930 --> 00:02:06.630
from all over your
app, for example,

00:02:06.630 --> 00:02:09.570
callbacks associated with life
cycle information or callbacks

00:02:09.570 --> 00:02:11.420
from input events,
or even events

00:02:11.420 --> 00:02:13.540
that are coming from
other applications.

00:02:13.540 --> 00:02:16.180
And most important is that
these callbacks can trigger

00:02:16.180 --> 00:02:18.520
other work that
runs on the thread,

00:02:18.520 --> 00:02:20.700
too, like making
a change to the UI

00:02:20.700 --> 00:02:24.340
will create work packets that
allow the UI to be redrawn.

00:02:24.340 --> 00:02:26.930
Basically, this means that
any block of code to your app

00:02:26.930 --> 00:02:29.440
wants to run has to be
pushed into a work queue

00:02:29.440 --> 00:02:31.732
and then serviced
on the Main thread.

00:02:31.732 --> 00:02:33.940
The takeaway here is that
with so much work happening

00:02:33.940 --> 00:02:36.100
on the Main thread, it
makes a lot of sense

00:02:36.100 --> 00:02:38.570
to offload longer
work to other threads,

00:02:38.570 --> 00:02:42.230
as to not disturb the UI system
from its rendering duties.

00:02:42.230 --> 00:02:45.070
And this is how the entirety
of Android's threading model

00:02:45.070 --> 00:02:47.840
works, lots of packages of
work being passed around

00:02:47.840 --> 00:02:50.240
between threads and
worked on as needed.

00:02:50.240 --> 00:02:53.960
So with all this in mind, some
of Android's threading classes

00:02:53.960 --> 00:02:55.420
make a little bit more sense.

00:02:55.420 --> 00:02:57.710
See, each threaded
class is intended

00:02:57.710 --> 00:03:00.140
for a specific type
of threading work,

00:03:00.140 --> 00:03:03.390
so picking the right one for
your needs is really important.

00:03:03.390 --> 00:03:05.700
For example, the
AsyncTask class is

00:03:05.700 --> 00:03:08.280
ideal for helping you get
work on and off the UI

00:03:08.280 --> 00:03:09.610
thread in the right way.

00:03:09.610 --> 00:03:11.330
HandlerThreads
are great when you

00:03:11.330 --> 00:03:14.012
need a dedicated thread
for callbacks to land on.

00:03:14.012 --> 00:03:16.470
And ThreadPools work best when
you could break your work up

00:03:16.470 --> 00:03:18.950
into really small packets
and then toss them

00:03:18.950 --> 00:03:20.510
to a bunch of waiting threads.

00:03:20.510 --> 00:03:23.410
And IntentServices are really
ideal for background task

00:03:23.410 --> 00:03:26.370
or when you need to get
intent work off the UI thread.

00:03:26.370 --> 00:03:27.830
And like everything
else, there's

00:03:27.830 --> 00:03:29.220
not a silver bullet here.

00:03:29.220 --> 00:03:31.940
But knowing which primitive
is best for what situation,

00:03:31.940 --> 00:03:34.179
can save you a lot of headaches.

00:03:34.179 --> 00:03:36.470
Now, if you ever want more
insight into how your app is

00:03:36.470 --> 00:03:39.180
leveraging threading, make sure
you spend some time getting

00:03:39.180 --> 00:03:40.850
comfortable with Systrace.

00:03:40.850 --> 00:03:43.200
It's a fancy tool
that'll school you

00:03:43.200 --> 00:03:46.989
on how all that mumbo jumbo is
working underneath the hood.

00:03:46.989 --> 00:03:48.780
And if you're looking
to get schooled more,

00:03:48.780 --> 00:03:51.080
make sure you check out the
rest of the Android Performance

00:03:51.080 --> 00:03:51.810
Patterns videos.

00:03:51.810 --> 00:03:54.880
And don't forget to join our
Google+ community for more tips

00:03:54.880 --> 00:03:56.450
and tricks on threading.

00:03:56.450 --> 00:03:59.190
So keep calm, profile your
code, and always remember

00:03:59.190 --> 00:04:01.040
perf matters.

