WEBVTT
Kind: captions
Language: en

00:00:01.100 --> 00:00:03.170
&gt;&gt;Alex Komoroske: Let's get started.

00:00:03.170 --> 00:00:05.250
&gt;&gt;Dimitri Glazkov: Let's get started.

00:00:05.250 --> 00:00:09.750
So what the heck of Web components?

00:00:09.750 --> 00:00:15.850
&gt;&gt;Alex Komoroske: So When you guys saw that
word component, you probably thought what

00:00:15.850 --> 00:00:16.850
is that?

00:00:16.850 --> 00:00:24.440
Well, I submit that each and every one of
you know what a component is because

00:00:24.440 --> 00:00:28.570
you use them today.

00:00:28.570 --> 00:00:36.829
You use them in lots of different cases.

00:00:36.829 --> 00:00:43.870
So the first case is in embedded
widgets.

00:00:43.870 --> 00:00:58.399
So here if you have a Google+ button inside
your site or a like button or something

00:00:58.399 --> 00:01:06.450
like that --
&gt;&gt; Dimitri Glazkov: Or a Twitter button.

00:01:06.450 --> 00:01:17.810
&gt;&gt;Alex Komoroske: This is a third-party bit
of code that's running within your site.

00:01:17.810 --> 00:01:23.060
It's
something where you have trust issues, right?

00:01:23.060 --> 00:01:34.039
They don't want to allow you to mess with
all of their stuff or (indiscernible) privileged

00:01:34.039 --> 00:01:41.409
APIs, and they also don't want you to style
their stuff.

00:01:41.409 --> 00:01:46.430
So they talk a lot about discipline.

00:01:46.430 --> 00:01:57.920
Like, "Thou shalt not use anything under -- sell
anything under my little ID" and stuff like

00:01:57.920 --> 00:01:58.920
that.

00:01:58.920 --> 00:02:09.330
&gt;&gt;Dimitri Glazkov: Right, and of course we
as user of those widgets go, "Eh, it's more

00:02:09.330 --> 00:02:12.260
like an etiquette."

00:02:12.260 --> 00:02:36.830
Try not to do that stuff and we'll mess with
that the way we want to

00:02:36.830 --> 00:02:43.020
to make it look nice.

00:02:43.020 --> 00:03:03.040
&gt;&gt;Alex Komoroske: And so in fact, what everybody
does, they give up on these iframes, but that's

00:03:03.040 --> 00:03:07.350
not really ideal.

00:03:07.350 --> 00:03:24.300
So another use case is when you are writing
your own app, and say you want a tabstrip,

00:03:24.300 --> 00:03:36.350
well, you shouldn't have to create a tabstrip
because there are thousands of them that other

00:03:36.350 --> 00:03:39.100
people have created; you just want to use
those.

00:03:39.100 --> 00:03:48.090
So you just want to grab in a widget or a
component that someone else has written, and

00:03:48.090 --> 00:03:50.950
put it inside of your app.

00:03:50.950 --> 00:04:00.970
&gt;&gt;Dimitri Glazkov: And there are entire libraries
written nowadays, and some of them are quite

00:04:00.970 --> 00:04:06.850
complete, libraries, and widgets and all of
the different UI elements that you might want

00:04:06.850 --> 00:04:07.940
to put together.

00:04:07.940 --> 00:04:14.530
And of course, unfortunately, the problem
there is that all of these libraries espouse

00:04:14.530 --> 00:04:24.040
their own strategy on how to execute the UI
widget composition and how those things come

00:04:24.040 --> 00:04:25.040
together.

00:04:25.040 --> 00:04:33.200
And so like one of the top stock overflow
questions would be how do I use the widget

00:04:33.200 --> 00:04:35.930
from Framework Foo in Framework R, right?

00:04:35.930 --> 00:04:43.090
&gt;&gt;Alex Komoroske: Unfortunately, they follow
different conventions, so often the answer

00:04:43.090 --> 00:04:53.480
is you use a lot of duct tape, a lot of script,
jam them together as best you can.

00:04:53.480 --> 00:04:57.420
&gt;&gt;Dimitri Glazkov: Don't touch those parts.

00:04:57.420 --> 00:05:03.350
&gt;&gt;Alex Komoroske: And don't do this, whatever
you do.

00:05:03.350 --> 00:05:06.120
So the final one is custom-built widgets.

00:05:06.120 --> 00:05:08.030
Are you hungry?

00:05:08.030 --> 00:05:11.630
So bear with me for a second.

00:05:11.630 --> 00:05:14.690
You are all familiar with spaghetti code,
right?

00:05:14.690 --> 00:05:19.980
Where you have all of these crazy stuff to
do, really hacky.

00:05:19.980 --> 00:05:26.830
When you are writing
your own apps, you want to have this better

00:05:26.830 --> 00:05:29.770
fit of encapsulation, right?

00:05:29.770 --> 00:05:36.560
Because that's
how you build more complex things.

00:05:36.560 --> 00:05:46.720
But it's hard to do in the above platform,
so the best

00:05:46.720 --> 00:05:54.010
that you can kind of get is lasagne.

00:05:54.010 --> 00:05:58.720
You've got layers, but they're still kind
of messy,

00:05:58.720 --> 00:05:59.720
right?

00:05:59.720 --> 00:06:07.800
So even when you are building any kind of
app, you are building these custom elements

00:06:07.800 --> 00:06:09.150
for yourself.

00:06:09.150 --> 00:06:16.560
&gt;&gt;Dimitri Glazkov: The components is, you
know, one use of that.

00:06:16.560 --> 00:06:26.270
&gt;&gt;Alex Komoroske: So let's go dive into our
example we will be talking through today.

00:06:26.270 --> 00:06:35.820
We're going to build a poll app and show you
how we built this today.

00:06:35.820 --> 00:06:40.760
So here it is.

00:06:40.760 --> 00:06:43.920
It's a pretty app.

00:06:43.920 --> 00:06:55.740
It's got a cool HTML file logo, it's got a
title, a subtitle, different options.

00:06:55.740 --> 00:07:02.010
If you
aren't familiar with them, you can hover over

00:07:02.010 --> 00:07:05.460
them to see the information about them.

00:07:05.460 --> 00:07:07.440
You
can select them.

00:07:07.440 --> 00:07:08.919
I selected things.

00:07:08.919 --> 00:07:11.420
You can also see the results.

00:07:11.420 --> 00:07:14.940
See what other people
have voted for.

00:07:14.940 --> 00:07:21.900
But let's dive into how this stuff actually
works.

00:07:21.900 --> 00:07:29.199
So I'm going to open up Web inspector here,
I have got this way zoomed in, which is why

00:07:29.199 --> 00:07:31.711
it looks so funky.

00:07:31.711 --> 00:07:35.480
&gt;&gt;Dimitri Glazkov: And if you look at this
today, and this is a written -- you know,

00:07:35.480 --> 00:07:40.840
this is a pretty cutting edge technology even
by today's standard.

00:07:40.840 --> 00:07:44.740
Shout out for David who
wrote this code.

00:07:44.740 --> 00:07:50.570
It's using what you would call the modern
principles of Web design, and that is, you

00:07:50.570 --> 00:07:54.050
know, you do see your components right away.

00:07:54.050 --> 00:08:03.240
You see the poll is one component, which is
a backbone view; and then you see the choices

00:08:03.240 --> 00:08:09.310
view, results view, and all of those different
things that are put together into a widget

00:08:09.310 --> 00:08:11.430
hierarchy of some sort, right?

00:08:11.430 --> 00:08:16.800
Unfortunately, some of the things immediately
start jumping out at you and going what's

00:08:16.800 --> 00:08:17.889
going on here?

00:08:17.889 --> 00:08:19.340
See those strings there?

00:08:19.340 --> 00:08:21.880
Your HTML became just a string, right?

00:08:21.880 --> 00:08:22.880
It's not a markup anymore.

00:08:22.880 --> 00:08:24.180
It's just the cottage cheese in your Lasagne,
right?

00:08:24.180 --> 00:08:29.350
And so at this point you are starting to go
and say, "Well, I'm not really working in

00:08:29.350 --> 00:08:34.779
HTML anymore; I'm working in this parallel
world that the framework has designed for

00:08:34.779 --> 00:08:35.779
me.

00:08:35.779 --> 00:08:39.909
And then what happens is this framework will
do the right thing and project the actual

00:08:39.909 --> 00:08:42.180
HTML or DOM tree into the browser for user
to see.

00:08:42.180 --> 00:08:48.769
And, of course, when the user clicks
on something, the backward thing happens,

00:08:48.769 --> 00:08:49.769
you know.

00:08:49.769 --> 00:08:54.660
The framework traverses the events
back to your tree to your object hierarchy

00:08:54.660 --> 00:08:56.499
and tells you what happened.

00:08:56.499 --> 00:08:59.259
It's not just
the deal that was clicked; it's your poll

00:08:59.259 --> 00:09:00.259
that was selected.

00:09:00.259 --> 00:09:01.329
Ah-ha, I understand this now.

00:09:01.329 --> 00:09:07.440
So if you look at this markup right now, you
actually see

00:09:07.440 --> 00:09:08.440
this very clearly.

00:09:08.440 --> 00:09:11.660
It's that markup is not necessarily representative
of what the poll

00:09:11.660 --> 00:09:17.629
is; it's actually a lot of things in addition
to just what should be a very simple widget

00:09:17.629 --> 00:09:18.629
layout, right?

00:09:18.629 --> 00:09:21.699
You have poll and you have choices and that's
it.

00:09:21.699 --> 00:09:23.870
What else should be
going on here?

00:09:23.870 --> 00:09:30.779
But there is actually a lot of markup going
on.

00:09:30.779 --> 00:09:35.839
That's because the markup
is essentially a projection.

00:09:35.839 --> 00:09:39.649
And even worse, today, if you load this page,
it's just a

00:09:39.649 --> 00:09:40.970
DIV in markup.

00:09:40.970 --> 00:09:47.259
What happens is the framework then blows up
this DIV using the JavaScript and creates

00:09:47.259 --> 00:09:50.680
the actual framework out of it.

00:09:50.680 --> 00:09:53.610
So -- you think this is bad?

00:09:53.610 --> 00:09:54.610
&gt;&gt;Alex Komoroske: Right.

00:09:54.610 --> 00:09:58.149
So I actually have
something that haunts my nightmares, and it

00:09:58.149 --> 00:10:02.019
will haunt yours, too, after I show you.

00:10:02.019 --> 00:10:08.010
So if you open -- if you go to, say, just
Gmail which we all use, know and love, if

00:10:08.010 --> 00:10:14.100
you switch and look at the Web inspector in
here, you inspect some random elements -- what

00:10:14.100 --> 00:10:15.939
is going on?

00:10:15.939 --> 00:10:18.999
&gt;&gt;Dimitri Glazkov: Oh, my God!

00:10:18.999 --> 00:10:20.029
What is this?

00:10:20.029 --> 00:10:24.259
This should be a very simple widget tree,
right?

00:10:24.259 --> 00:10:30.120
There's like a list of things and then
there's -- oh, my God look at this!

00:10:30.120 --> 00:10:31.259
Stairway to hell.

00:10:31.259 --> 00:10:32.779
[Laughter]
&gt;&gt;Dimitri Glazkov: Right?

00:10:32.779 --> 00:10:34.300
What's going on there?

00:10:34.300 --> 00:10:37.119
&gt;&gt;Alex Komoroske: This doesn't make any sense.

00:10:37.119 --> 00:10:39.360
And so -- this is in this bizarro.

00:10:39.360 --> 00:10:44.850
You know,
I bet a lot of you watching this were saying,

00:10:44.850 --> 00:10:48.449
"Oh, well that's just how you do it, right?"

00:10:48.449 --> 00:10:54.160
Like, why are you talking about why this is
insane?

00:10:54.160 --> 00:10:58.480
This is just how you make it work.

00:10:58.480 --> 00:11:00.110
You know what, Dimitri?

00:11:00.110 --> 00:11:05.870
I submit that everyone in this room who said
that is insane.

00:11:05.870 --> 00:11:06.870
Right?

00:11:06.870 --> 00:11:07.870
[Laughter].

00:11:07.870 --> 00:11:09.850
&gt;&gt;Alex Komoroske: This is insane, this is
crazy.

00:11:09.850 --> 00:11:13.579
&gt;&gt;Dimitri Glazkov: We're insane, yay!

00:11:13.579 --> 00:11:15.069
All
right.

00:11:15.069 --> 00:11:26.019
But the thing is that -- it is true, we are
doing something to work around the issues

00:11:26.019 --> 00:11:27.230
in the browser.

00:11:27.230 --> 00:11:29.990
And we're writing a lot of
code.

00:11:29.990 --> 00:11:36.749
We're writing frameworks to help us do this
-- these bits of code.

00:11:36.749 --> 00:11:41.970
Then with more
code that we write, we have more opportunities

00:11:41.970 --> 00:11:49.670
for -- for losing test coverage, for example,
and not knowing exactly what's happening.

00:11:49.670 --> 00:12:01.319
And clearly more code you ship over the wire,
the slower your application will go, right?

00:12:01.319 --> 00:12:05.540
And the development time suffers, of course.

00:12:05.540 --> 00:12:09.839
Unless you stay in the confines of that specific
framework, right?

00:12:09.839 --> 00:12:16.990
&gt;&gt;Alex Komoroske: So that's sort of on a low
level why this is bad.

00:12:16.990 --> 00:12:21.079
On a high level, this
is bad, too.

00:12:21.079 --> 00:12:22.079
Right?

00:12:22.079 --> 00:12:27.720
If you looked at this DOM, this isn't very
symmetric at all.

00:12:27.720 --> 00:12:30.369
I had to look through it.

00:12:30.369 --> 00:12:34.980
I didn't really understand what those things
were doing.

00:12:34.980 --> 00:12:39.139
The Gmail example, of course, is way on one
end of the spectrum.

00:12:39.139 --> 00:12:42.000
But actually
if we look at our index, Google, we see the

00:12:42.000 --> 00:12:46.300
Web is getting less and less semantic as we
go.

00:12:46.300 --> 00:12:48.449
There's more DIVs and spans.

00:12:48.449 --> 00:12:51.470
It's harder to understand what's going on.

00:12:51.470 --> 00:12:56.209
&gt;&gt;Dimitri Glazkov: And more empty DIVs, like
I mentioned before, right?

00:12:56.209 --> 00:13:02.059
You try to index
a page, you go there, you say, oh, there's

00:13:02.059 --> 00:13:07.480
nothing there, no, no, that's actually an
NPR app but loads all kinds of images.

00:13:07.480 --> 00:13:10.619
You have to run script to understand that
it does

00:13:10.619 --> 00:13:12.629
that, right?

00:13:12.629 --> 00:13:25.269
&gt;&gt;Alex Komoroske: So running script means
that you have to -- to make any kind of complicated

00:13:25.269 --> 00:13:31.820
app, you have to run script.

00:13:31.820 --> 00:13:36.319
You can't be
a web author; you have to be a Web developer

00:13:36.319 --> 00:13:38.679
to make something work today.

00:13:38.679 --> 00:13:39.679
Okay.

00:13:39.679 --> 00:13:43.360
So I have
one bit of good news.

00:13:43.360 --> 00:13:48.579
You guys are all insane, but it's not your
fault.

00:13:48.579 --> 00:14:03.059
It's the fault of the platform right now and
that's why you have to do these things.

00:14:03.059 --> 00:14:04.709
&gt;&gt;Dimitri Glazkov: That's right.

00:14:04.709 --> 00:14:12.790
&gt;&gt;Alex Komoroske: So if you look at this,
the rare thing of it, is the Web platform

00:14:12.790 --> 00:14:19.329
has all of these amazing technologies that
do all kinds of really cool stuff.

00:14:19.329 --> 00:14:21.040
But there are a few little potholes.

00:14:21.040 --> 00:14:25.420
A few little tiny
things that don't work correctly or that are

00:14:25.420 --> 00:14:26.420
difficult.

00:14:26.420 --> 00:14:27.610
And you run into them.

00:14:27.610 --> 00:14:30.160
You're on
this information super highway, everything

00:14:30.160 --> 00:14:36.309
is working great, you run into a pothole,
and you say, "Ooop, I can't handle this."

00:14:36.309 --> 00:14:37.619
But that's okay.

00:14:37.619 --> 00:14:41.139
I have script, I have an escape hatch.

00:14:41.139 --> 00:14:43.300
I will do this in JavaScript.

00:14:43.300 --> 00:14:44.300
It will be okay.

00:14:44.300 --> 00:14:47.149
So
you go a little tiny bit off road.

00:14:47.149 --> 00:14:48.329
That's fine, right?

00:14:48.329 --> 00:14:49.739
Now you run into another pothole, a deeper
pothole offroad.

00:14:49.739 --> 00:14:51.170
This means you're offroad,
right?

00:14:51.170 --> 00:14:56.379
And it's a pothole that wouldn't have been
there had you been on the highway, had you

00:14:56.379 --> 00:14:59.079
been able to use these normal technologies,
but you're offroad.

00:14:59.079 --> 00:15:00.079
That's okay.

00:15:00.079 --> 00:15:02.949
You write a little bit more script, you go
a little

00:15:02.949 --> 00:15:03.949
bit more offroad.

00:15:03.949 --> 00:15:04.949
Things are wrong, right?

00:15:04.949 --> 00:15:05.949
Unfortunately, this
leads into a pit of despair, right?

00:15:05.949 --> 00:15:09.170
Like the more offroad you go, after a certain
point

00:15:09.170 --> 00:15:13.329
you are drawing your own cursor, you've completely
escaped the browser here.

00:15:13.329 --> 00:15:14.329
[Laughter].

00:15:14.329 --> 00:15:18.899
&gt;&gt;Alex Komoroske: You are sort of building
inside this escape hatch.

00:15:18.899 --> 00:15:20.899
JavaScript is an escape hatch.

00:15:20.899 --> 00:15:26.100
If the (indiscernible) doesn't
do what you need, you are now building everything

00:15:26.100 --> 00:15:28.100
inside of the escape hatch.

00:15:28.100 --> 00:15:29.100
That's crazy.

00:15:29.100 --> 00:15:37.350
Even if you don't think that you are doing
it, you think you are doing a very good job

00:15:37.350 --> 00:15:45.609
of being semantic and all of that stuff, well,
the framework they are using is doing it for

00:15:45.609 --> 00:15:46.609
you.

00:15:46.609 --> 00:15:49.559
They are going completely offroad to do this
kind of stuff.

00:15:49.559 --> 00:15:50.559
&gt;&gt;Dimitri Glazkov: Right.

00:15:50.559 --> 00:15:54.489
And a lot of this framework becomes so robust.

00:15:54.489 --> 00:15:58.430
And in order
to become robust, in order to offer the experience

00:15:58.430 --> 00:16:02.110
to you that makes sense, they build entire
rendering engines into the browser, so you

00:16:02.110 --> 00:16:04.059
have this turducken of the thing.

00:16:04.059 --> 00:16:07.019
The rendering
engine is just a rendering surface, and then

00:16:07.019 --> 00:16:11.429
there's another one that's being loaded to
the js file that actually does the stuff for

00:16:11.429 --> 00:16:12.429
you.

00:16:12.429 --> 00:16:13.429
And so it's pretty sad.

00:16:13.429 --> 00:16:17.209
&gt;&gt;Alex Komoroske: So, yeah, we've been talking
all doom and gloom so far.

00:16:17.209 --> 00:16:21.110
We're going to
turn the page here, and the good news is that

00:16:21.110 --> 00:16:26.389
although we look like normal people, Dimitri
and I actually come to you from the future.

00:16:26.389 --> 00:16:27.709
[Laughter]
&gt;&gt;Dimitri Glazkov: Yes.

00:16:27.709 --> 00:16:28.709
We did come from the future.

00:16:28.709 --> 00:16:32.040
You must know there are multiple versions
of the future, and there is one, for example,

00:16:32.040 --> 00:16:35.389
where the alien invasion begins in 15 minutes
and the Web platform essentially becomes irrelevant.

00:16:35.389 --> 00:16:37.049
&gt;&gt;Alex Komoroske: But there also good time
lines.

00:16:37.049 --> 00:16:41.079
The time line we're from is the one where
there's free beer and there's Web components,

00:16:41.079 --> 00:16:42.079
so it's not all bad.

00:16:42.079 --> 00:16:45.670
So what we want to do is we want to talk to
you about how Web components solves this problem.

00:16:45.670 --> 00:16:51.139
&gt;&gt;Dimitri Glazkov: So the Web components is
this new set of technologies that we looked

00:16:51.139 --> 00:16:58.249
at -- we created by looking at those potholes
and decided to fill them naturally as things

00:16:58.249 --> 00:17:06.470
that fit inside of the Web platform as a whole.

00:17:06.470 --> 00:17:13.640
Rather than building a whole new crazy thing
on the side, which we always have done before,

00:17:13.640 --> 00:17:19.370
we decided we're going to fill those holes
naturally into something that feels like just

00:17:19.370 --> 00:17:21.179
part of the Web platform.

00:17:21.179 --> 00:17:26.140
Just part of the standard things that you
normally do in the

00:17:26.140 --> 00:17:27.140
browser.

00:17:27.140 --> 00:17:30.940
Not a script and not some crazy invention
that is completely brand new.

00:17:30.940 --> 00:17:36.990
And so what we did is we kind of found out
that there's three pieces that are missing

00:17:36.990 --> 00:17:41.980
and these pieces are Shadow DOM, the custom
elements, and the templates.

00:17:41.980 --> 00:17:47.150
&gt;&gt;Alex Komoroske: So let me walk you through
what each of these ones means in practice.

00:17:47.150 --> 00:17:52.170
So again, all of these three things are what
come underneath the umbrella of Web components.

00:17:52.170 --> 00:17:54.139
So the first is Shadow DOM.

00:17:54.139 --> 00:17:56.341
Shadow DOM is what allows you to encapsulate
stuff in the

00:17:56.341 --> 00:18:00.090
DOM to hide away all of that crush that you
need to make it look correct.

00:18:00.090 --> 00:18:05.669
Custom elements is what allows you to define
your own tabs.

00:18:05.669 --> 00:18:10.940
When the HTML parser runs into
your widget, it can instantiate it immediately

00:18:10.940 --> 00:18:11.940
for you.

00:18:11.940 --> 00:18:15.510
Finally, templates allows you to define HTML
DOM snippets very easily.

00:18:15.510 --> 00:18:22.670
So today you are
doing this in long bits of strings and script,

00:18:22.670 --> 00:18:28.159
or you are doing script tags with some -- with
some templates there.

00:18:28.159 --> 00:18:33.460
This basically just allows you to define it
directly in your HTML,

00:18:33.460 --> 00:18:40.920
have it sort of frozen off to the side, so
you can swap it in when you need it.

00:18:40.920 --> 00:18:45.280
&gt;&gt;Dimitri Glazkov: It's kind of neat to decide
that developers are -- really like this master

00:18:45.280 --> 00:18:46.280
framework, right.

00:18:46.280 --> 00:18:49.070
There's problems with the Web platform, but
no matter what, developers

00:18:49.070 --> 00:18:51.980
force will work around them or flow around
those problems.

00:18:51.980 --> 00:18:53.899
&gt;&gt;Alex Komoroske: They will find a way.

00:18:53.899 --> 00:18:54.899
&gt;&gt;Dimitri Glazkov: Exactly.

00:18:54.899 --> 00:19:01.250
&gt;&gt;Alex Komoroske: So this is sort of like
the low level what the technologies do, but

00:19:01.250 --> 00:19:02.789
what does this actually mean in practice?

00:19:02.789 --> 00:19:05.970
&gt;&gt;Dimitri Glazkov: Well, in practice, what
you are really are looking for is something

00:19:05.970 --> 00:19:10.899
that allows you to tell -- allows you to tell
the browser exactly what you mean.

00:19:10.899 --> 00:19:15.799
This, for example, would be the markup that
you are actually are trying to communicate

00:19:15.799 --> 00:19:16.799
to the browser.

00:19:16.799 --> 00:19:23.340
I have a poll, I have choices,
and there's things that -- that are essentially

00:19:23.340 --> 00:19:25.730
data for my poll, right?

00:19:25.730 --> 00:19:28.590
Why should there
be anything else?

00:19:28.590 --> 00:19:30.029
Right, right, right?!!

00:19:30.029 --> 00:19:31.029
&gt;&gt;&gt; Right!

00:19:31.029 --> 00:19:32.419
&gt;&gt;Dimitri Glazkov: All right!

00:19:32.419 --> 00:19:36.929
So the three pieces fit very neatly into this
idea.

00:19:36.929 --> 00:19:40.679
First
Shadow DOM allows you to take the scaffolding

00:19:40.679 --> 00:19:48.010
all of the weird DIVs that are really irrelevant
to the semantic of the markup, and hide them

00:19:48.010 --> 00:19:50.299
into the Shadow DOM -- which we will talk
more about later.

00:19:50.299 --> 00:19:54.159
Then the custom elements allow you to define
new tags, right?

00:19:54.159 --> 00:19:55.940
New tags,
awesome?

00:19:55.940 --> 00:19:57.130
X-poll, right?

00:19:57.130 --> 00:20:02.380
And specify behavior and assign things on
top of them.

00:20:02.380 --> 00:20:09.340
Then, of course, the templates allow you to
stop treating markup as string, which is always

00:20:09.340 --> 00:20:10.340
nice.

00:20:10.340 --> 00:20:15.330
&gt;&gt;Alex Komoroske: So that's how they help
tactically, but they also, of course, are

00:20:15.330 --> 00:20:16.850
really important on the high level.

00:20:16.850 --> 00:20:19.789
So if
you have this world, this is all you need

00:20:19.789 --> 00:20:24.520
to pass down to the browser to have that rich
poll experience exist, that means that you

00:20:24.520 --> 00:20:25.910
don't need this bizarro script.

00:20:25.910 --> 00:20:27.580
DOM can be
your only hierarchy.

00:20:27.580 --> 00:20:29.130
You don't need to have this parallel bizarro
hierarchy on the side.

00:20:29.130 --> 00:20:33.809
&gt;&gt;Dimitri Glazkov: You no longer need to build
your widget hierarchy as just a, you know,

00:20:33.809 --> 00:20:35.779
an object tree somewhere off to the side.

00:20:35.779 --> 00:20:38.809
The one that projects the DOM is a kabuki
theater of some sort.

00:20:38.809 --> 00:20:42.710
&gt;&gt;Alex Komoroske: So DOM can become this lingua
franca of the Web.

00:20:42.710 --> 00:20:48.800
It also means that you would have real encapsulation,
so you wouldn't

00:20:48.800 --> 00:20:53.419
have to worry about people coming in and messing
with your innards and messing up how your

00:20:53.419 --> 00:20:55.690
component works, because they can't because
it would be a barrier.

00:20:55.690 --> 00:20:56.960
So it's not just etiquette or discipline.

00:20:56.960 --> 00:20:57.960
It's an actual encapsulation barrier.

00:20:57.960 --> 00:20:59.990
Also
if DOM is the composition mechanism, it already

00:20:59.990 --> 00:21:00.990
composes really nicely.

00:21:00.990 --> 00:21:04.570
You can put a span,
DIVs, all kinds of stuff, right?

00:21:04.570 --> 00:21:10.360
If you have that as the framework that you
use for composability, that means that you

00:21:10.360 --> 00:21:11.360
have compatible composability.

00:21:11.360 --> 00:21:16.510
So if you have
a widget from Framework A and Framework B,

00:21:16.510 --> 00:21:22.660
they can live together harmoniously without
having to figure out which widgets they have

00:21:22.660 --> 00:21:24.240
-- it's just DOM.

00:21:24.240 --> 00:21:25.830
&gt;&gt;Dimitri Glazkov: Right.

00:21:25.830 --> 00:21:28.250
And where that one widget begins and where
one widget ends.

00:21:28.250 --> 00:21:29.250
That's
another important thing.

00:21:29.250 --> 00:21:30.250
Let's be clear.

00:21:30.250 --> 00:21:32.070
Web components is not a set of those widgets.

00:21:32.070 --> 00:21:35.390
It's just a platform on which the future frameworks,
you know, the future where we're from?

00:21:35.390 --> 00:21:36.390
Can
build those new frameworks.

00:21:36.390 --> 00:21:37.550
&gt;&gt;Alex Komoroske: So it's a foundation for
this stuff.

00:21:37.550 --> 00:21:38.550
Okay.

00:21:38.550 --> 00:21:46.809
So this -- actually, Web components
as you may have guessed, makes all of this

00:21:46.809 --> 00:21:47.809
stuff real.

00:21:47.809 --> 00:21:49.720
So we're going to show you what
it looks like in practice.

00:21:49.720 --> 00:21:50.720
So let me switch.

00:21:50.720 --> 00:21:56.191
This is the demo that we showed; it's built
using the best practices of today.

00:21:56.191 --> 00:22:00.929
And this is what the -- what the one with
Web components looks like.

00:22:00.929 --> 00:22:01.929
Right?

00:22:01.929 --> 00:22:03.300
Looks exactly the same.

00:22:03.300 --> 00:22:04.980
&gt;&gt;Dimitri Glazkov: Yeah.

00:22:04.980 --> 00:22:05.980
Right.

00:22:05.980 --> 00:22:08.590
So in the future, all applications are going
to look

00:22:08.590 --> 00:22:10.170
exactly the same, right?

00:22:10.170 --> 00:22:12.750
This is the lesson that we are learning?

00:22:12.750 --> 00:22:13.750
Well, actually, no.

00:22:13.750 --> 00:22:17.970
What's interesting here, this is actually
a functional application, but instead of all

00:22:17.970 --> 00:22:21.780
of these weird spans and DIVs inside of it,
it has a very clear, very concise markup.

00:22:21.780 --> 00:22:28.009
This markup is exactly the same as the actual
DOM structure off this document, right?

00:22:28.009 --> 00:22:32.669
So whatever you ship over the wire is exactly
the same thing that is represented as DOM.

00:22:32.669 --> 00:22:36.480
You don't have to create this thing that the
frameworks -- the rendering decorate where

00:22:36.480 --> 00:22:43.620
you just first load the page and then you
go find those things that you want to upgrade

00:22:43.620 --> 00:22:49.150
and make them into the right stuff, you don't
have to do that anymore.

00:22:49.150 --> 00:22:50.559
All of this happens
magically?

00:22:50.559 --> 00:22:53.200
&gt;&gt;Alex Komoroske: Magically, that's actually
a good point.

00:22:53.200 --> 00:22:58.490
I was going to ask, clearly we saw all of
the extra stuff that's required

00:22:58.490 --> 00:23:00.710
to make this poll demo work.

00:23:00.710 --> 00:23:03.679
But it's not here, so what's going on?

00:23:03.679 --> 00:23:04.679
All right.

00:23:04.679 --> 00:23:05.679
Well,
let's look.

00:23:05.679 --> 00:23:11.890
&gt;&gt;Dimitri Glazkov: And kind of the way that
you look at this is in the Web platform, we

00:23:11.890 --> 00:23:14.480
never had this opportunity to -- to build
in layering.

00:23:14.480 --> 00:23:16.260
Layering is like a cool thing.

00:23:16.260 --> 00:23:18.929
It's not -- it's also related to the lasagne
thing.

00:23:18.929 --> 00:23:25.269
But all of the frameworks, if you look at
them together, all of the JavaScript frameworks

00:23:25.269 --> 00:23:33.419
that are built out today are nothing but attempts
to provide a layering in the browser.

00:23:33.419 --> 00:23:36.100
Because what they want to do is they want
to create

00:23:36.100 --> 00:23:39.580
an environment in which the users of this
framework don't have to think about the details.

00:23:39.580 --> 00:23:43.380
And then the developers of the new widgets,
the builders of the components, the ones who

00:23:43.380 --> 00:23:45.690
work inside of the framework, actually have
flexibility and power to, you know, provide

00:23:45.690 --> 00:23:46.690
those new services to the -- to the higher
level.

00:23:46.690 --> 00:23:51.330
&gt;&gt;Alex Komoroske: By having this built into
the browser, it means that there's no build

00:23:51.330 --> 00:23:55.639
step, there's no extra framework you can use,
you might be able to build the users of this

00:23:55.639 --> 00:24:06.220
components, which is what the vast majority
of the Web developers will be doing, it's

00:24:06.220 --> 00:24:11.200
super simple, you do an import, you use these
tags, it just works, however, if you really

00:24:11.200 --> 00:24:17.100
want to understand the magic going on behind
this, you need to go a little bit behind the

00:24:17.100 --> 00:24:22.240
scenes, you have to see these more powerful
concepts that are a little bit more confusing

00:24:22.240 --> 00:24:25.039
that have a lot more to learn about.

00:24:25.039 --> 00:24:30.629
&gt;&gt;Dimitri Glazkov: We have a choice here,
do you guys want to continue or should we

00:24:30.629 --> 00:24:33.080
just stop right here, behind the scenes!!??

00:24:33.080 --> 00:24:34.080
Yes.

00:24:34.080 --> 00:24:35.080
&gt;&gt;Alex Komoroske: Okay.

00:24:35.080 --> 00:24:37.250
So we're going to
go behind the scenes.

00:24:37.250 --> 00:24:43.019
If at this point you say what the heck is
going on, that's okay,

00:24:43.019 --> 00:24:47.090
you can just be a user of these components
and not have to worry about it.

00:24:47.090 --> 00:24:49.350
Dimitri, why
don't you take us behind the scenes?

00:24:49.350 --> 00:24:51.600
&gt;&gt;Dimitri Glazkov: First we're going to talk
about Shadow DOM.

00:24:51.600 --> 00:24:55.429
Believe it or not, Shadow DOM already exists
on the browsers, well and

00:24:55.429 --> 00:24:59.620
alive, and the one and good example would
be a video tag.

00:24:59.620 --> 00:25:03.789
Let's take a look at this
video tag right here embedded into this presentation,

00:25:03.789 --> 00:25:06.679
because, you know, our presentations are actually
HTML as well.

00:25:06.679 --> 00:25:07.679
Right?

00:25:07.679 --> 00:25:08.679
Okay.

00:25:08.679 --> 00:25:11.049
So as you can see you have really neat video
tag right there,

00:25:11.049 --> 00:25:12.049
right?

00:25:12.049 --> 00:25:15.269
Video/video, everything looks great, but there's
actually more stuff happening.

00:25:15.269 --> 00:25:18.890
There's slider there in the time line, and
all these things.

00:25:18.890 --> 00:25:20.750
How do browser developers
do this?

00:25:20.750 --> 00:25:21.750
Right?

00:25:21.750 --> 00:25:22.910
How do they draw those things?

00:25:22.910 --> 00:25:28.610
Well, they have a couple of choices: One of
them is build the whole thing from scratch

00:25:28.610 --> 00:25:34.530
to build their own, testing right into this
thing, and we're kind of actually lazy and

00:25:34.530 --> 00:25:35.530
we didn't do that.

00:25:35.530 --> 00:25:38.930
What we did instead is we invented a way where
we could stash away

00:25:38.930 --> 00:25:42.240
a DOM tree where we can build those things
out of just normal CSS and DOM, and operate

00:25:42.240 --> 00:25:47.580
on them just the normal way, and then we present
it to you as if this is a built-in functionality,

00:25:47.580 --> 00:25:48.880
and this DOM tree, we obviously called Shadow
DOM, right?

00:25:48.880 --> 00:25:49.880
It's in the shadows.

00:25:49.880 --> 00:25:52.490
&gt;&gt;Alex Komoroske: So how can we see what's
going on here?

00:25:52.490 --> 00:25:58.299
&gt;&gt;Dimitri Glazkov: So one of the interesting
things is in Chrome browser, today you can

00:25:58.299 --> 00:26:04.110
opt in to this experiment and you can say,
well, I want to be able to show Shadow DOM,

00:26:04.110 --> 00:26:09.380
and so if you're a load inspector, you will
see that, when you inspect the video, suddenly

00:26:09.380 --> 00:26:11.240
there's more stuff inside of it.

00:26:11.240 --> 00:26:13.100
It's that
thing called shadow root.

00:26:13.100 --> 00:26:15.470
That's that hidden DOM that you can't see.

00:26:15.470 --> 00:26:17.169
Let's go inside of
it.

00:26:17.169 --> 00:26:18.519
Oh, there's a DIV.

00:26:18.519 --> 00:26:20.220
Oh, interesting input type button.

00:26:20.220 --> 00:26:27.779
That's actually the play button,
and then the input type or this style, open

00:26:27.779 --> 00:26:30.730
that one right there, that will be a type
range.

00:26:30.730 --> 00:26:33.400
That's the slider, right?

00:26:33.400 --> 00:26:34.429
That's the thing.

00:26:34.429 --> 00:26:39.220
So what we did is we really,
really cheated in a pretty big way, right?

00:26:39.220 --> 00:26:43.679
We just -- instead of building all this stuff
in C++, you know, and all this stuff, it's

00:26:43.679 --> 00:26:44.679
just DOM.

00:26:44.679 --> 00:26:47.960
And, in fact, when you play this
video, and you know how the timeline goes

00:26:47.960 --> 00:26:51.750
away, that is just a CSS transition, right?

00:26:51.750 --> 00:26:53.350
It's nothing special.

00:26:53.350 --> 00:26:58.419
&gt;&gt;Alex Komoroske: So what you're saying is
that this stuff, this isn't new, Shadow DOM

00:26:58.419 --> 00:27:00.580
has existed in some browsers already.

00:27:00.580 --> 00:27:03.820
What
is new is exposing it to web developers.

00:27:03.820 --> 00:27:04.899
&gt;&gt;Dimitri Glazkov: Right.

00:27:04.899 --> 00:27:09.600
So what we did next,
we said, well, wouldn't it be cool if Web

00:27:09.600 --> 00:27:10.999
developers could have the same power, and
wouldn't you agree that would be cool?

00:27:10.999 --> 00:27:11.999
Would that be cool?

00:27:11.999 --> 00:27:12.999
All right.

00:27:12.999 --> 00:27:13.999
So that's what Shadow DOM is about.

00:27:13.999 --> 00:27:15.889
It's about encapsulation and providing you
with the ability to add these extra chunks

00:27:15.889 --> 00:27:19.169
on DOM tree and render them as if they're
part of the bigger rendering.

00:27:19.169 --> 00:27:20.370
&gt;&gt;Alex Komoroske: Okay.

00:27:20.370 --> 00:27:26.390
This is kind of complicated,
so let's go through this in a little bit more

00:27:26.390 --> 00:27:27.390
depth.

00:27:27.390 --> 00:27:28.399
&gt;&gt;Dimitri Glazkov: All right.

00:27:28.399 --> 00:27:29.399
Sounds good.

00:27:29.399 --> 00:27:33.970
So the next slide here that we see, we have
a nice diagram.

00:27:33.970 --> 00:27:37.380
As you can see it's peas and radishes, clearly.

00:27:37.380 --> 00:27:41.480
So the green notes, the
peas represent the document tree, that's the

00:27:41.480 --> 00:27:48.380
actual tree that you see when you go into
the inspector, and that's the one that is

00:27:48.380 --> 00:27:53.169
parsed, when the browser parses your markup,
and the pink stuff is the Shadow DOM tree,

00:27:53.169 --> 00:27:59.410
so the Shadow DOM allows you to associate
a special subtree with every DOM element,

00:27:59.410 --> 00:28:06.480
and then this subtree, you can build and create
DIVs and all kinds of things inside of it,

00:28:06.480 --> 00:28:11.700
but then when it's rendered, you actually
see the shadow subtree rendered instead of

00:28:11.700 --> 00:28:18.149
the contents of that node, the element that
you associate it with.

00:28:18.149 --> 00:28:19.320
&gt;&gt;Alex Komoroske: Okay.

00:28:19.320 --> 00:28:22.039
So let me go over
this one more time.

00:28:22.039 --> 00:28:26.750
So what we have here on the left, we have
these green nodes, or just

00:28:26.750 --> 00:28:35.029
the logical DOM that we're all familiar with,
and then off to the right we have a sort of

00:28:35.029 --> 00:28:36.940
parallel DOM hierarchy.

00:28:36.940 --> 00:28:39.490
&gt;&gt;Dimitri Glazkov: That's right.

00:28:39.490 --> 00:28:45.070
&gt;&gt;Alex Komoroske: And so it's sort of stashed
off to the side.

00:28:45.070 --> 00:28:49.960
But if the Shadow DOM is
defined, when we render, what we see, is as

00:28:49.960 --> 00:28:52.899
though the pink nodes were underneath the
green nodes.

00:28:52.899 --> 00:28:54.200
&gt;&gt;Dimitri Glazkov: That's right.

00:28:54.200 --> 00:28:57.459
&gt;&gt; Alex Komoroske: So magically the green
ones are still there.

00:28:57.459 --> 00:28:58.459
&gt;&gt; Dimitri Glazkov: Right.

00:28:58.459 --> 00:29:02.999
So this is a really, really cool concept right
here, it's a render

00:29:02.999 --> 00:29:04.240
time composition.

00:29:04.240 --> 00:29:08.269
You don't have to move those nodes around.

00:29:08.269 --> 00:29:11.750
They're still there -- if you
walk your, you know, first child, next child

00:29:11.750 --> 00:29:15.330
thing, next sibling, there's going to be only
the green tree inside of it, but at render

00:29:15.330 --> 00:29:18.799
time, the shadow DOM tree will be placed on
top and rendered as if it's there.

00:29:18.799 --> 00:29:23.580
&gt;&gt; Alex Komoroske: I had real stuff in that
-- in that real in the green DOM tree.

00:29:23.580 --> 00:29:24.960
I want to show that.

00:29:24.960 --> 00:29:27.700
It's kind of weird this is sort
of (indiscernible)

00:29:27.700 --> 00:29:28.700
&gt;&gt;Dimitri Glazkov: Right.

00:29:28.700 --> 00:29:29.700
Yeah, this use case
is pretty good for a video, but you suddenly

00:29:29.700 --> 00:29:35.200
lost that other green peas things that were
hanging off the element, so what do we do

00:29:35.200 --> 00:29:36.200
there?

00:29:36.200 --> 00:29:38.350
We have this really, really cool concept called
insertion point.

00:29:38.350 --> 00:29:42.470
Insertion points are special
elements that you can put into your Shadow

00:29:42.470 --> 00:29:48.389
DOM subtree to designate where the children
of the shadow root will poke through, and

00:29:48.389 --> 00:29:52.950
so as you can see there, I have two insertion
points and when it's rendering, again at render

00:29:52.950 --> 00:29:56.799
time only, those children will shine through
inside of the Shadow DOM tree, so in a way

00:29:56.799 --> 00:30:08.499
it allows you to have this way to compose
the Shadow DOM subtree around your documents

00:30:08.499 --> 00:30:09.499
node.

00:30:09.499 --> 00:30:11.460
&gt;&gt; Alex Komoroske: This is the same thing
that frameworks are doing today, right, because

00:30:11.460 --> 00:30:13.770
you have like your markup, then you call this
magic decorate method on it, then it swaps

00:30:13.770 --> 00:30:22.169
your DOM directly into the place it needs
to be to render.

00:30:22.169 --> 00:30:23.460
&gt;&gt;Dimitri Glazkov: That's right.

00:30:23.460 --> 00:30:28.830
&gt;&gt;Alex Komoroske: This leaves it in the same
place as before so you can still interact

00:30:28.830 --> 00:30:31.590
with it like you did before.

00:30:31.590 --> 00:30:38.370
&gt;&gt;Dimitri Glazkov: The cool thing here, exactly
right, is that this is entirely render time,

00:30:38.370 --> 00:30:45.640
so you don't have to touch the DOM, in fact
the DOM stays exactly the same.

00:30:45.640 --> 00:30:49.190
What happens
is this happens only at render time, so only

00:30:49.190 --> 00:30:55.900
when this stuff shows up on the page is things
appear in the right spot.

00:30:55.900 --> 00:30:57.150
&gt;&gt;Alex Komoroske: Okay.

00:30:57.150 --> 00:30:59.660
So this is all very
abstract.

00:30:59.660 --> 00:31:02.580
Let's go through a more concrete example.

00:31:02.580 --> 00:31:03.830
&gt;&gt;Dimitri Glazkov: Sure.

00:31:03.830 --> 00:31:06.210
For example, the &lt;x-choice&gt; element that we
have just seen

00:31:06.210 --> 00:31:14.330
in the markup example here is implemented
using Shadow DOM, so you can see there it's

00:31:14.330 --> 00:31:16.370
a very simple subtree.

00:31:16.370 --> 00:31:22.249
The Shadow DOM subtree has a DIV in it and
has a little mask which

00:31:22.249 --> 00:31:31.529
stands for the little icon there, but then
you have this really interesting thing called

00:31:31.529 --> 00:31:32.529
content.

00:31:32.529 --> 00:31:40.470
Content is a name of the insertion point;
it's the HTML element which represents

00:31:40.470 --> 00:31:44.210
the insertion point.

00:31:44.210 --> 00:31:47.320
And then you see it has a select attribute
in a value that looks very

00:31:47.320 --> 00:31:48.320
similar to something.

00:31:48.320 --> 00:31:50.059
What does it look like?

00:31:50.059 --> 00:31:51.570
People from the audience?

00:31:51.570 --> 00:31:53.460
Is that --
&gt;&gt;Alex Komoroske: CSS?

00:31:53.460 --> 00:31:56.019
&gt;&gt;Dimitri Glazkov: Right, so that's what you
use.

00:31:56.019 --> 00:32:04.650
You use CSS selectors to say which items
will show through in my insertion point?

00:32:04.650 --> 00:32:12.740
And so what we say here is the H3, first of
type, which is the first H3 we find as child,

00:32:12.740 --> 00:32:16.649
is going to show up right here instead of
this thing when rendering, and then we have

00:32:16.649 --> 00:32:21.120
a little aside item for our tool tip, and
then we say, eh, everything else, universal

00:32:21.120 --> 00:32:22.240
selector goes inside there.

00:32:22.240 --> 00:32:26.059
&gt;&gt;Alex Komoroske: So what we're doing basically
is we're using CSS to decide which elements

00:32:26.059 --> 00:32:28.789
to sort of funnel and tele-port where when
we render.

00:32:28.789 --> 00:32:30.169
&gt;&gt;Dimitri Glazkov: That's right.

00:32:30.169 --> 00:32:31.210
&gt;&gt;Alex Komoroske: Okay.

00:32:31.210 --> 00:32:35.690
So what we're actually
kind of doing here too is we're almost defining

00:32:35.690 --> 00:32:36.730
a declarative API.

00:32:36.730 --> 00:32:42.850
We say if you provide some
H3s, the first ones, what we'll use as the

00:32:42.850 --> 00:32:48.309
actual name for the thing and later ones we'll
just establish another --

00:32:48.309 --> 00:32:52.730
&gt;&gt;Dimitri Glazkov: So you have this not only
mechanism to stash things away into the subtree,

00:32:52.730 --> 00:32:55.179
you also have a mechanism to now declaratively
project some of the items.

00:32:55.179 --> 00:32:59.249
You don't have to write a bit of script to
do this.

00:32:59.249 --> 00:33:01.320
This
is all built in.

00:33:01.320 --> 00:33:03.399
This is standard stuff.

00:33:03.399 --> 00:33:04.399
Awesome?

00:33:04.399 --> 00:33:05.399
Awesome.

00:33:05.399 --> 00:33:06.399
All right.

00:33:06.399 --> 00:33:07.399
Okay.

00:33:07.399 --> 00:33:15.159
And so the next thing is we need to take these
Shadow DOM subtrees and build them into something

00:33:15.159 --> 00:33:17.749
useful, and that's where custom elements come
in.

00:33:17.749 --> 00:33:21.730
Custom elements allow you to define a
new element, and for that purpose we have

00:33:21.730 --> 00:33:25.580
the new HTML element -- that's a good name
for it -- which allows you to specify and

00:33:25.580 --> 00:33:27.179
say, well, there's my element, &lt;x-choice&gt;,
and inside of it, the template.

00:33:27.179 --> 00:33:28.179
Remember the template?

00:33:28.179 --> 00:33:30.049
That's where my Shadow DOM subtree
instance is.

00:33:30.049 --> 00:33:32.580
Every time I create a new &lt;x-choice&gt;, that
will be stamped out and create a new

00:33:32.580 --> 00:33:33.580
instance of the Shadow DOM subtree.

00:33:33.580 --> 00:33:34.909
And then you can run script inside of it to
do lots

00:33:34.909 --> 00:33:35.970
of cool things.

00:33:35.970 --> 00:33:39.950
For example, you can declare an imperative
API, and say, well, the &lt;x-choice&gt;

00:33:39.950 --> 00:33:42.769
method needs extra methods -- or &lt;x-choice&gt;
object needs extra methods or properties on

00:33:42.769 --> 00:33:43.990
it, and you can do this.

00:33:43.990 --> 00:33:47.740
And also you can define things like life cycle
hooks, like

00:33:47.740 --> 00:33:53.179
I want to run some scripts, register events
every time a new instance is created, right?

00:33:53.179 --> 00:33:54.690
That's useful stuff.

00:33:54.690 --> 00:34:01.619
&gt;&gt;Alex Komoroske: So that's how you define
it as a component author.

00:34:01.619 --> 00:34:05.340
For component users all you have to do, you
include this link

00:34:05.340 --> 00:34:24.929
to the components and point to the document
where this thing is defined, and then you

00:34:24.929 --> 00:34:30.410
can just use it like any other built-in tag
in your page.

00:34:30.410 --> 00:34:36.630
And also, so you talked about
those imperative APIs we defined here, was

00:34:36.630 --> 00:34:39.470
selected on this thing.

00:34:39.470 --> 00:34:49.080
If I go through and
grab this element out of the DOM using various

00:34:49.080 --> 00:34:54.390
lectures, say, I can just call that method
directly on that object, the DOM object.

00:34:54.390 --> 00:34:55.900
The DOM object is the object.

00:34:55.900 --> 00:34:56.900
&gt;&gt;Dimitri Glazkov: Right.

00:34:56.900 --> 00:34:58.220
And there's no faking there, right?

00:34:58.220 --> 00:35:02.270
There's no need to create separate
objects or view or things, your DOM objects

00:35:02.270 --> 00:35:04.870
are the actual things that you operate on.

00:35:04.870 --> 00:35:09.970
When you query the standard DOM APIs, use
them, whatever comes back to you is going

00:35:09.970 --> 00:35:12.760
to be those things that you define.

00:35:12.760 --> 00:35:17.200
&gt;&gt;Alex Komoroske: You don't have to know the
convention of the framework, how we stash

00:35:17.200 --> 00:35:21.040
things and how DOM are related.

00:35:21.040 --> 00:35:30.030
&gt;&gt;Dimitri Glazkov: And also the link rail,
the new rail components, gives you the opportunity

00:35:30.030 --> 00:35:35.800
to create the packaging mechanism to build
packaging right into the browser.

00:35:35.800 --> 00:35:40.930
You don't
have to have a build script that then compiles

00:35:40.930 --> 00:35:44.330
all this thing into one gob of code.

00:35:44.330 --> 00:35:47.730
You don't
have to have five script tags loaded into

00:35:47.730 --> 00:35:48.730
your page.

00:35:48.730 --> 00:35:54.570
One link rail, you can load other
link rails if you want, you will have more

00:35:54.570 --> 00:36:03.940
components that you want to reuse, and that's
all it takes.

00:36:03.940 --> 00:36:04.940
So it's packaging.

00:36:04.940 --> 00:36:05.940
It's reuse.

00:36:05.940 --> 00:36:10.030
And also the ability to have one DOM hierarchy
instead of multiple tree objects.

00:36:10.030 --> 00:36:18.510
&gt;&gt;Alex Komoroske: So one of the problems we
have today on the Web platform is styles sort

00:36:18.510 --> 00:36:21.240
of naturally go all over the place.

00:36:21.240 --> 00:36:23.640
And so
when you're designing a style for your component,

00:36:23.640 --> 00:36:27.150
it might go and mess up somebody else inadvertently.

00:36:27.150 --> 00:36:32.430
&gt;&gt;Dimitri Glazkov: That is a very common problem,
especially if your object tree is pretty complex.

00:36:32.430 --> 00:36:40.190
At some point you really start losing sight
of where -- which selector, and you know,

00:36:40.190 --> 00:36:48.130
how many of you guys have committed the Cardinal
sin of pound important?

00:36:48.130 --> 00:36:49.130
Okay.

00:36:49.130 --> 00:36:50.130
Be honest here
now.

00:36:50.130 --> 00:36:54.210
And so in Shadow DOM, there is some really
cool stuff here.

00:36:54.210 --> 00:36:58.490
In Shadow DOM the styles
are implicitly or explicitly scoped inside

00:36:58.490 --> 00:37:01.050
of the Shadow DOM subtree.

00:37:01.050 --> 00:37:07.200
So even if you
put a universal selector inside of the Shadow

00:37:07.200 --> 00:37:13.050
DOM subtree, it will only apply instead of
inside of the Shadow DOM subtree.

00:37:13.050 --> 00:37:16.590
So it will not go and bleed out into a document.

00:37:16.590 --> 00:37:18.960
Similarly,
styles that you apply in the document will

00:37:18.960 --> 00:37:21.420
not bleed into your Shadow DOM subtree.

00:37:21.420 --> 00:37:23.410
So
you have a very nice style separation boundary

00:37:23.410 --> 00:37:26.560
which really works extremely well for widget
case scenarios where you want to have the

00:37:26.560 --> 00:37:33.330
boundaries defined and you don't want people
to stomp on your styles, and you want to keep

00:37:33.330 --> 00:37:38.400
some sort of sanity inside of your application.

00:37:38.400 --> 00:37:40.310
&gt;&gt;Alex Komoroske: Okay.

00:37:40.310 --> 00:37:41.780
So that is sort of behind the scenes.

00:37:41.780 --> 00:37:43.110
Thank you for that, Dimitri.

00:37:43.110 --> 00:37:51.880
I actually just got a call from a designer,
he's watching on the live stream, and he says

00:37:51.880 --> 00:37:59.640
that we shouldn't have used accordion, we
should have used a tab strip in our demo.

00:37:59.640 --> 00:38:04.910
&gt;&gt;Dimitri Glazkov: I actually agree with the
designer, accordions are kind of weird anyway,

00:38:04.910 --> 00:38:09.540
right, a cross between a piano and a harmonica,
really?

00:38:09.540 --> 00:38:13.280
Oh, you're talking about a widget.

00:38:13.280 --> 00:38:14.530
I'm sorry.

00:38:14.530 --> 00:38:15.780
Okay, yes.

00:38:15.780 --> 00:38:18.680
So that is actually really easy,
because we're using just markup, we're just

00:38:18.680 --> 00:38:21.630
swapping tags, so the idea of swapping out
components now becomes just changing your

00:38:21.630 --> 00:38:22.630
markup, right?

00:38:22.630 --> 00:38:26.700
So now we have to just include
in your component and then change X accordion

00:38:26.700 --> 00:38:31.830
to be X tabs, and it's, you know, it's -- we'll
just see what happens, right?

00:38:31.830 --> 00:38:32.830
&gt;&gt;Alex Komoroske: Okay.

00:38:32.830 --> 00:38:36.950
So you say I have
to include the new component, which I actually

00:38:36.950 --> 00:38:40.650
already did when you were talking, and I needed
to change X-accordion to X-tabs, is that right?

00:38:40.650 --> 00:38:43.260
Save that, switch back to the demo and just
refresh.

00:38:43.260 --> 00:38:45.490
&gt;&gt;Dimitri Glazkov: And now we have tabs.

00:38:45.490 --> 00:38:46.490
Applause,
please.

00:38:46.490 --> 00:38:49.000
[ APPLAUSE ]
&gt;&gt;Dimitri Glazkov: No wing suit drop, no wing

00:38:49.000 --> 00:38:53.140
suits, but at least, you know, some cool tricks,
right, at some point.

00:38:53.140 --> 00:38:54.140
All right.

00:38:54.140 --> 00:38:55.750
So this looks really, really awesome and I'm
already kind

00:38:55.750 --> 00:38:57.290
of enamored with this.

00:38:57.290 --> 00:38:59.690
I don't know about you guys.

00:38:59.690 --> 00:39:05.800
But I really want this poll on my
website now.

00:39:05.800 --> 00:39:08.860
&gt;&gt;Alex Komoroske: On your site.

00:39:08.860 --> 00:39:11.910
&gt;&gt;Dimitri Glazkov: On my site.

00:39:11.910 --> 00:39:18.830
&gt;&gt;Alex Komoroske: just so guys know, I'll
show you what Dimitri's website looks like.

00:39:18.830 --> 00:39:19.830
It's beautiful.

00:39:19.830 --> 00:39:20.830
It's really special.

00:39:20.830 --> 00:39:21.830
It's
awesome.

00:39:21.830 --> 00:39:23.900
So, no offense, Dimitri.

00:39:23.900 --> 00:39:30.990
I definitely hear that you want to have this
poll on your

00:39:30.990 --> 00:39:31.990
site.

00:39:31.990 --> 00:39:38.160
I'm a little bit concerned that you might
mark with it a bit, but that's okay.

00:39:38.160 --> 00:39:43.600
I'm going to package this up for you so that
you can include it on your site without you

00:39:43.600 --> 00:39:46.610
worrying about how you're going to set this
up.

00:39:46.610 --> 00:39:52.650
First of all, I don't want you to be able
to change the text for the choices, that way

00:39:52.650 --> 00:39:54.070
you could stack the deck.

00:39:54.070 --> 00:39:56.640
&gt;&gt;Dimitri Glazkov: I could add my own choices,
right?

00:39:56.640 --> 00:39:57.640
CSS 3.

00:39:57.640 --> 00:39:58.920
Why not CSS 4 or 7?

00:39:58.920 --> 00:40:04.050
&gt;&gt;Alex Komoroske: So what I'm going to do
actually is I'm going to create a new element

00:40:04.050 --> 00:40:05.380
called awesome poll, obviously.

00:40:05.380 --> 00:40:08.530
&gt;&gt;Dimitri Glazkov: Has to be awesome, awesome
site, right.

00:40:08.530 --> 00:40:14.450
&gt;&gt;Alex Komoroske: And then to hide it from
people who are vetting it, I'm going to take

00:40:14.450 --> 00:40:18.590
and put in my Shadow DOM one of those polls
so you can't see it.

00:40:18.590 --> 00:40:19.590
&gt;&gt;Dimitri Glazkov: Okay.

00:40:19.590 --> 00:40:26.180
&gt;&gt;Alex Komoroske: Then what I'll do is I'll
allow yourself to define sort of where this

00:40:26.180 --> 00:40:32.950
configuration is, and I'll then create all
the stuff inside the X poll in my own little

00:40:32.950 --> 00:40:33.950
area.

00:40:33.950 --> 00:40:36.400
&gt;&gt;Dimitri Glazkov: Have you guys seen inception?

00:40:36.400 --> 00:40:37.730
And if you haven't, please leave the room
now.

00:40:37.730 --> 00:40:38.840
It's like we have to go one level deeper,
right?

00:40:38.840 --> 00:40:40.250
Shadow DOM inside of the Shadow DOM.

00:40:40.250 --> 00:40:42.020
You know, seriously cool stuff.

00:40:42.020 --> 00:40:43.090
&gt;&gt;Alex Komoroske: Okay.

00:40:43.090 --> 00:40:44.860
So what we'll do, so then you can just put
that right in your

00:40:44.860 --> 00:40:46.710
page and you will have the poll right there.

00:40:46.710 --> 00:40:47.710
Awesome.

00:40:47.710 --> 00:40:49.480
&gt;&gt;Dimitri Glazkov: Wow, this is -- well...

00:40:49.480 --> 00:40:50.680
&gt;&gt;Alex Komoroske: What?

00:40:50.680 --> 00:40:55.050
&gt;&gt;Dimitri Glazkov: It kind of looks not like
my site actually.

00:40:55.050 --> 00:40:58.380
The place my vote clearly
doesn't have enough exclamation points.

00:40:58.380 --> 00:40:59.380
I don't know.

00:40:59.380 --> 00:41:00.890
I kind of want to customize it
a little.

00:41:00.890 --> 00:41:01.890
&gt;&gt;Alex Komoroske: Okay.

00:41:01.890 --> 00:41:02.890
Okay.

00:41:02.890 --> 00:41:03.890
So you're right.

00:41:03.890 --> 00:41:05.270
This is actually technically just as good
as an iframe basically.

00:41:05.270 --> 00:41:07.700
Doesn't give you any
way to customize it.

00:41:07.700 --> 00:41:10.830
So you have such an interesting vocabulary
and way of speaking.

00:41:10.830 --> 00:41:12.010
&gt;&gt;Dimitri Glazkov: I do.

00:41:12.010 --> 00:41:13.500
I'm a very colorful person.

00:41:13.500 --> 00:41:18.000
&gt;&gt;Alex Komoroske: I don't want you to have
control over everything, but I guess -- I

00:41:18.000 --> 00:41:21.330
guess subtitle and the button will allow you
to override.

00:41:21.330 --> 00:41:26.980
So I'm going to define in my
poll, I'm going to allow you to have a declarative

00:41:26.980 --> 00:41:32.300
API, allow you to define your own aside for
that subtitle and your own label text.

00:41:32.300 --> 00:41:33.960
&gt;&gt;Dimitri Glazkov: That sounds good.

00:41:33.960 --> 00:41:37.810
&gt;&gt;Alex Komoroske: What we'll do is we'll switch
back to your site.

00:41:37.810 --> 00:41:38.810
Right here.

00:41:38.810 --> 00:41:41.120
I already wrote
in here where you had this customization,

00:41:41.120 --> 00:41:45.800
save that, switch back to my demo, refresh,
and vote for CSS 3 because it's awesome, and

00:41:45.800 --> 00:41:46.800
vote now.

00:41:46.800 --> 00:41:49.390
&gt;&gt;Dimitri Glazkov: Now I have plenty of exclamation
points, right, guys?

00:41:49.390 --> 00:41:50.390
Think about what just happened.

00:41:50.390 --> 00:41:51.390
Just stop for a second.

00:41:51.390 --> 00:41:52.390
I have customized a poll without
mucking it up, because Alex is a developer

00:41:52.390 --> 00:41:54.760
of this custom component, of this web component,
the awesome poll, only gave me the guardrails

00:41:54.760 --> 00:41:57.000
to step into this specific areas, and that's
all.

00:41:57.000 --> 00:42:00.030
And the way I do this is by markup.

00:42:00.030 --> 00:42:06.240
I don't have to go GS and do some weird muckety
muckety JSON stuff.

00:42:06.240 --> 00:42:12.230
Well, you know, the font kind of looks like
a clean and creepy.

00:42:12.230 --> 00:42:14.430
I want
something huggable and wonderful.

00:42:14.430 --> 00:42:17.360
What could be more wonderful than comic SANS?

00:42:17.360 --> 00:42:19.190
It's from
the perfection, right?

00:42:19.190 --> 00:42:26.940
So what we're going to do -- I want to say
that I'm not going to do this unless you let

00:42:26.940 --> 00:42:28.599
me customize the font.

00:42:28.599 --> 00:42:34.330
&gt;&gt;&gt; I admire design aesthetic, I think it's
very unique, but I don't want you to be able

00:42:34.330 --> 00:42:40.810
to run all over this stuff and break everything,
so I guess what I'm going to allow you to

00:42:40.810 --> 00:42:43.600
do is change a couple of things in here, before
I do that, I'm want to walk you through how

00:42:43.600 --> 00:42:45.110
I'm going to do this.

00:42:45.110 --> 00:42:48.070
So CSS variables is one new technology, the
spec is nearing completion.

00:42:48.070 --> 00:42:51.160
We actually have it implemented in Chrome
behind the flag.

00:42:51.160 --> 00:42:53.150
CSS variables --
&gt;&gt;Dimitri Glazkov: Wait, wait, wait, did you

00:42:53.150 --> 00:42:54.150
just say CSS variables?

00:42:54.150 --> 00:42:55.150
Guys, are you getting
this?

00:42:55.150 --> 00:42:56.470
Are you getting the CSS variables?

00:42:56.470 --> 00:42:59.310
&gt;&gt;Alex Komoroske: Yeah, it's kind of cool,
right, because today you have to have, define

00:42:59.310 --> 00:43:01.490
pound FFF, one, two, three, four, like 8,000
places in you're CSS.

00:43:01.490 --> 00:43:03.860
This allows you basically to define it once.

00:43:03.860 --> 00:43:05.950
So they're actually really,
really powerful.

00:43:05.950 --> 00:43:09.420
You can do all kinds of cool stuff with cascade
and referencing other variables.

00:43:09.420 --> 00:43:11.180
We don't need that today.

00:43:11.180 --> 00:43:13.660
I really encourage you guys to look more into
CSS variables and

00:43:13.660 --> 00:43:16.090
all the crazy, amazing stuff it can do, but
the cool thing about CSS variables is it allows

00:43:16.090 --> 00:43:19.240
a very natural place for me to allow you to
override what I want.

00:43:19.240 --> 00:43:21.010
So when I'm writing
my poll, I'll use CSS variables very deliberately

00:43:21.010 --> 00:43:23.690
in places that I want you to be able to hook
in and change my stuff.

00:43:23.690 --> 00:43:28.050
&gt;&gt;Dimitri Glazkov: So these are my styling
hooks.

00:43:28.050 --> 00:43:33.810
I can't go anywhere and mess with anything
else.

00:43:33.810 --> 00:43:36.800
&gt;&gt;Alex Komoroske: I'm only giving you -- allowing
you to change a few things.

00:43:36.800 --> 00:43:48.430
So in this case
I'll allow you to change maybe the font and

00:43:48.430 --> 00:43:51.620
also the color that we use as the primary
color.

00:43:51.620 --> 00:43:52.620
&gt;&gt;Dimitri Glazkov: Colors are important.

00:43:52.620 --> 00:43:54.760
&gt;&gt;Alex Komoroske: What you'll do on your sheet
is you'll just style -- direct some styles,

00:43:54.760 --> 00:43:56.600
these variables at my poll, and then it will
magically just work.

00:43:56.600 --> 00:43:58.250
&gt;&gt;Dimitri Glazkov: I want to see this.

00:43:58.250 --> 00:44:02.930
&gt;&gt;Alex Komoroske: I'm going to switch to CSS,
and I'm going to uncomment -- I've already

00:44:02.930 --> 00:44:05.420
written --
&gt;&gt;Dimitri Glazkov: You made the right choice.

00:44:05.420 --> 00:44:08.110
&gt;&gt;Alex Komoroske: Comic sans, I thought you
would like that.

00:44:08.110 --> 00:44:09.800
I'm going to switch back to my -- to your
site.

00:44:09.800 --> 00:44:10.800
Refresh.

00:44:10.800 --> 00:44:11.800
There you
go --

00:44:11.800 --> 00:44:12.800
&gt;&gt;Dimitri Glazkov: This is now awesome.

00:44:12.800 --> 00:44:14.180
I
can do this.

00:44:14.180 --> 00:44:15.860
[ APPLAUSE ]
But again take a second to think about this.

00:44:15.860 --> 00:44:17.780
Now you as the developer of the widget or
a component can give specific instructions

00:44:17.780 --> 00:44:18.780
to the browser on what to permit the user
of the component to do.

00:44:18.780 --> 00:44:19.780
Isn't that awesome?

00:44:19.780 --> 00:44:20.780
Isn't that styling APIs?

00:44:20.780 --> 00:44:21.780
Who wants this?

00:44:21.780 --> 00:44:22.780
Who wants this?

00:44:22.780 --> 00:44:23.780
[ Applause ]
&gt;&gt;Alex Komoroske: I want this.

00:44:23.780 --> 00:44:24.780
&gt;&gt;Dimitri Glazkov: All right!

00:44:24.780 --> 00:44:25.780
&gt;&gt;Alex Komoroske: Cool.

00:44:25.780 --> 00:44:26.780
So we've walked you through a couple of examples
of how to use

00:44:26.780 --> 00:44:28.270
this stuff and also some of the tactical uses
you can have with this.

00:44:28.270 --> 00:44:31.190
And actually is a bigger deal than just that.

00:44:31.190 --> 00:44:37.110
The way that I think of that actually -- I'm
actually a little bit dramatic, I guess sometimes,

00:44:37.110 --> 00:44:38.330
is the declarative Renaissance.

00:44:38.330 --> 00:44:50.800
So way long
time go, you just used HTML, you just wrote

00:44:50.800 --> 00:45:04.410
(indiscernible) code straightforward, and
then we started using JavaScript a lot for

00:45:04.410 --> 00:45:07.370
a lot of stuff, right?

00:45:07.370 --> 00:45:09.210
But now this allows
people to return back to writing things very

00:45:09.210 --> 00:45:10.210
declaratively in most cases.

00:45:10.210 --> 00:45:11.210
There's a lot
of stuff that allows that to happen.

00:45:11.210 --> 00:45:17.700
&gt;&gt;&gt; And like one of the most important things
that I think is -- the ability to actually

00:45:17.700 --> 00:45:19.440
talk via an API.

00:45:19.440 --> 00:45:22.780
Or tell the browser, specify
to -- to let the user know: These are the

00:45:22.780 --> 00:45:24.740
things that you can do and no more.

00:45:24.740 --> 00:45:26.970
And no
matter how much you hack about on this or

00:45:26.970 --> 00:45:27.970
do whatever this -- whatever, you can't mess
up my stuff.

00:45:27.970 --> 00:45:28.970
My stuff is safe.

00:45:28.970 --> 00:45:29.970
I gave you these hooks, that's all that you
can do.

00:45:29.970 --> 00:45:32.160
You
have CSS variables for the styling API and

00:45:32.160 --> 00:45:35.950
you have the components, the Shadow DOM technology,
to allow you to have the markup API.

00:45:35.950 --> 00:45:38.920
And then you, of course, can define -- define
the imperative

00:45:38.920 --> 00:45:40.090
API on custom elements.

00:45:40.090 --> 00:45:41.090
So the Web components give you those three
things.

00:45:41.090 --> 00:45:42.090
To essentially
explicitly define APIs on the components now.

00:45:42.090 --> 00:45:43.090
Awesome stuff.

00:45:43.090 --> 00:45:44.090
&gt;&gt;Alex Komoroske: So another one that's really
cool is we talked about before, if DOM is

00:45:44.090 --> 00:45:45.090
your composition mechanism, then components
from different libraries just work together.

00:45:45.090 --> 00:45:46.090
This is neat, I'm like oh, cool, you can get
whatever widget you want.

00:45:46.090 --> 00:45:47.090
But it also means
that today we have to spend all of this time

00:45:47.090 --> 00:45:49.640
recreating tabstrips and calendar controls
and everything in each and every framework.

00:45:49.640 --> 00:45:53.720
And, of course, each time you do it, you probably
aren't going to get 100% perfect, but 80%

00:45:53.720 --> 00:45:54.720
of the way there.

00:45:54.720 --> 00:45:55.720
But if everyone can use
any calendar component, then people will start

00:45:55.720 --> 00:46:07.390
using the better one, it will be more of an
incentive to build really, really awesome,

00:46:07.390 --> 00:46:11.640
accessible, beautiful, interactive components.

00:46:11.640 --> 00:46:14.984
You will see a lot better components as well.

00:46:14.984 --> 00:46:15.984
&gt;&gt;Dimitri Glazkov: Right.

00:46:15.984 --> 00:46:16.984
No longer you have
to pledge allegiance to a specific framework.

00:46:16.984 --> 00:46:17.984
That little mini browser that was built inside
of your browser, you can say well, no longer

00:46:17.984 --> 00:46:18.984
I am just specifically a backbone man.

00:46:18.984 --> 00:46:19.984
I can
just use markup and mix them around, because

00:46:19.984 --> 00:46:20.984
this is just markup.

00:46:20.984 --> 00:46:21.984
It's a common media.

00:46:21.984 --> 00:46:22.984
Just standard stuff is in the DOM, in your
browser.

00:46:22.984 --> 00:46:23.984
If you look at this, you can clearly see another
advantage.

00:46:23.984 --> 00:46:24.984
For a -- for a company or a team
of people working on the same Web applications,

00:46:24.984 --> 00:46:25.984
ability to encapsulate offers tremendous advantages,
right?

00:46:25.984 --> 00:46:26.984
Because now you can work on this stuff without
worrying about stepping on each other's

00:46:26.984 --> 00:46:27.984
toes, you can have a clean separation, you
can build work flows that actually make sense

00:46:27.984 --> 00:46:28.984
and not have this crazy schemes of discipline
built into this.

00:46:28.984 --> 00:46:29.984
Making that sure your selectors
have to start with #foo and all of that thing

00:46:29.984 --> 00:46:30.984
that you have to do today when you build complex
applications.

00:46:30.984 --> 00:46:31.984
&gt;&gt;Alex Komoroske: Cool.

00:46:31.984 --> 00:46:32.984
So the other case
is that again most cases are fully declarative.

00:46:32.984 --> 00:46:33.984
So these people who don't know script, they
don't have a CS degree, they can still be

00:46:33.984 --> 00:46:34.984
really productive.

00:46:34.984 --> 00:46:35.984
They can build really cool
stuff with these components.

00:46:35.984 --> 00:46:36.984
&gt;&gt;Dimitri Glazkov: Right.

00:46:36.984 --> 00:46:37.984
And one of the other
things here is because the browser is taking

00:46:37.984 --> 00:46:38.984
care of loading and understanding the packaging
obligations, the rendering of the things,

00:46:38.984 --> 00:46:39.984
it can go much faster because the browser
ultimately kind of knows more about rendering

00:46:39.984 --> 00:46:40.984
than any author or any JavaScript engineer
could do because we have a little more hooks

00:46:40.984 --> 00:46:41.984
than standard JavaScript application could.

00:46:41.984 --> 00:46:42.984
&gt;&gt;Alex Komoroske: The final one, and this
one is kind of crazy, so bear with me, is

00:46:42.984 --> 00:46:43.984
the rise of shared semantics.

00:46:43.984 --> 00:46:44.984
So today your semantics might only apply within
your site

00:46:44.984 --> 00:46:45.984
because there's no good way to share them.

00:46:45.984 --> 00:46:46.984
But if you allow people to define these tags
that are useful to Web developers, it's very

00:46:46.984 --> 00:46:47.984
obvious if we are -- for example, we will
see these x-polls, it's very obvious that

00:46:47.984 --> 00:46:48.984
people find that useful.

00:46:48.984 --> 00:46:49.984
And so this is a
great way for Web developers to experiment

00:46:49.984 --> 00:46:50.984
with new components and things.

00:46:50.984 --> 00:46:51.984
After a while,
maybe you will see that everyone is using

00:46:51.984 --> 00:46:52.984
tabstrips, they are using it in the same basic
way, well, we just roll that into the spec,

00:46:52.984 --> 00:46:53.984
roll that into the standard.

00:46:53.984 --> 00:46:54.984
&gt;&gt;Dimitri Glazkov: Directly into HTML.

00:46:54.984 --> 00:46:55.984
&gt;&gt;Alex Komoroske: Directly into the browser.

00:46:55.984 --> 00:46:56.984
Why do you have to define your own?

00:46:56.984 --> 00:46:57.984
This is a great place for Web developers to
experiment,

00:46:57.984 --> 00:46:58.984
show us the way as browser developers, about
what stuff we should be directly baking in.

00:46:58.984 --> 00:46:59.984
&gt;&gt;Dimitri Glazkov: Right.

00:46:59.984 --> 00:47:00.984
And if you look at it from another slightly
different perspective,

00:47:00.984 --> 00:47:01.984
is that today there is no path from local
semantics, the semantics of your framework,

00:47:01.984 --> 00:47:04.550
to the global semantics, the public semantics
of HTML.

00:47:04.550 --> 00:47:07.230
Once you've built that thing imperatively,
there is no existence of the actual tags,

00:47:07.230 --> 00:47:08.230
there is no path to the tags.

00:47:08.230 --> 00:47:13.010
You can just
study those things, and look at the patterns

00:47:13.010 --> 00:47:16.730
and wonder what is the right thing.

00:47:16.730 --> 00:47:17.730
But there
is no path.

00:47:17.730 --> 00:47:18.880
With the custom tags, you actually start having
this path because these are just

00:47:18.880 --> 00:47:19.880
tags.

00:47:19.880 --> 00:47:21.490
And now all that you have to do is run a really,
really large query, which Google can do actually,

00:47:21.490 --> 00:47:22.490
and figure out which elements are common.

00:47:22.490 --> 00:47:23.490
Then you can know precisely which tags are
winning, which tags deserve to become more

00:47:23.490 --> 00:47:24.490
public and at some point make it into the
-- into the HTML spec, for example.

00:47:24.490 --> 00:47:25.490
&gt;&gt;Alex Komoroske: It's really cool stuff.

00:47:25.490 --> 00:47:26.490
Again, Dimitri and I come from the future,
so that's why we can talk about all of this

00:47:26.490 --> 00:47:27.490
amazing stuff.

00:47:27.490 --> 00:47:28.490
The good news is actually that
the future isn't quite as far away as you

00:47:28.490 --> 00:47:29.490
might think.

00:47:29.490 --> 00:47:30.490
We aren't from, like, years in
the future; we're from, like, a few months

00:47:30.490 --> 00:47:31.490
in the future, basically.

00:47:31.490 --> 00:47:32.490
So shadow DOM and CSS variables are both implemented
in Chrome today.

00:47:32.490 --> 00:47:33.490
They are behind the 5.

00:47:33.490 --> 00:47:34.490
They
aren't released on the Web yet, but if you

00:47:34.490 --> 00:47:35.490
really want to you can go on and play with
them.

00:47:35.490 --> 00:47:36.490
There are lots of effective polyfills.

00:47:36.490 --> 00:47:37.490
Polyfills are basically shims that allow you
to use functionality before it's directly

00:47:37.490 --> 00:47:38.490
in the browser.

00:47:38.490 --> 00:47:39.490
We'll talk about those in
a second.

00:47:39.490 --> 00:47:40.490
And another thing is this is not a Chrome
thing.

00:47:40.490 --> 00:47:41.490
This is being done in standards,
we have a lot of other browser vendors are

00:47:41.490 --> 00:47:42.490
extremely excited about the number of folks
from those are in the audience today.

00:47:42.490 --> 00:47:43.490
We are really working, this is a collaborative
effort,

00:47:43.490 --> 00:47:44.490
a concerted effort with everybody to build
this.

00:47:44.490 --> 00:47:45.490
So this is something that you can actually
look forward to using relatively soon.

00:47:45.490 --> 00:47:46.490
&gt;&gt;Dimitri Glazkov: It's happening, guys, it's
coming, seriously.

00:47:46.490 --> 00:47:47.490
&gt;&gt;Alex Komoroske: So what can you guys do
that you are all jazzed up about this stuff?

00:47:47.490 --> 00:47:48.490
Well, you can help the future arrive faster.

00:47:48.490 --> 00:47:49.490
The one way -- there's lots of links and information
on this slide.

00:47:49.490 --> 00:47:50.490
What you should do right now
if you are already a member of the Web components

00:47:50.490 --> 00:47:51.490
plus page is follow us.

00:47:51.490 --> 00:47:52.490
We have a Google short
link right there for you.

00:47:52.490 --> 00:47:53.490
This is where we post interested updates about
the spec, the

00:47:53.490 --> 00:47:54.490
implementations, cool examples, blog posts.

00:47:54.490 --> 00:47:55.490
It's the one place that you can really learn
about all of this stuff going on.

00:47:55.490 --> 00:47:56.490
And right after this we're going to post all
of these

00:47:56.490 --> 00:47:57.490
links to that plus page.

00:47:57.490 --> 00:47:58.490
If you want to, you can read the introduction
to Web components.

00:47:58.490 --> 00:47:59.490
You probably learn that specs are really hard
to read and they often

00:47:59.490 --> 00:48:00.490
are, but actually Dimitri has done an amazing
job writing an explainer, that goes through

00:48:00.490 --> 00:48:01.490
all of these concepts, in quiet some depth
but in a very readable way.

00:48:01.490 --> 00:48:02.490
&gt;&gt;Dimitri Glazkov: I promise there's no comic
sans on that page.

00:48:02.490 --> 00:48:03.490
If you are scared.

00:48:03.490 --> 00:48:04.490
&gt;&gt;Alex Komoroske: You can also read the CSS
variable spec, understand more how that stuff

00:48:04.490 --> 00:48:05.490
works, all of the amazing stuff that you can
do with it.

00:48:05.490 --> 00:48:06.490
It's really more powerful than
it looks.

00:48:06.490 --> 00:48:07.490
&gt;&gt;Dimitri Glazkov: The other thing is that
there is actually a lot of really cool discussions

00:48:07.490 --> 00:48:08.490
happening right now in your present about
the Web components and working out all of

00:48:08.490 --> 00:48:09.490
the corner cases, working out the kinks of
how things should work precisely.

00:48:09.490 --> 00:48:10.490
I mean we're in the future, all of those things
are solved,

00:48:10.490 --> 00:48:11.490
we don't have to worry about them, but you
guys have to worry about it.

00:48:11.490 --> 00:48:12.490
Because getting
this stuff done just right and making sure

00:48:12.490 --> 00:48:13.490
this does not suck is really, really important.

00:48:13.490 --> 00:48:14.490
So, please, if you have any, you know, gumption
for bike shedding, or really, really endless

00:48:14.490 --> 00:48:15.490
discussions with no end, please join the standards
list and start listening in, start understanding

00:48:15.490 --> 00:48:16.490
what's going on, what's happening.

00:48:16.490 --> 00:48:17.490
&gt;&gt;Alex Komoroske: It's also possible to start
building with this stuff today.

00:48:17.490 --> 00:48:18.490
Dimitri has written a polyfill for Web components,
all

00:48:18.490 --> 00:48:19.490
it requires is Shadow DOM, so you would have
to turn it on in Chrome to play around with

00:48:19.490 --> 00:48:20.490
it.

00:48:20.490 --> 00:48:21.490
That's a really cool thing that actually makes
the polyfill for this entire thing,

00:48:21.490 --> 00:48:22.490
everything that we have shown you today is
how we actually did --

00:48:22.490 --> 00:48:23.490
&gt;&gt;Dimitri Glazkov: You know those self driving
cars?

00:48:23.490 --> 00:48:24.490
It's like that.

00:48:24.490 --> 00:48:25.490
It's like a very, very
early prototype that you can possibly drive.

00:48:25.490 --> 00:48:26.490
Bad things may happen, I can't guarantee--
&gt;&gt;Alex Komoroske: Don't use that one for anything

00:48:26.490 --> 00:48:27.490
in production today are written by Daniel
Buchner, who I believe is right there from

00:48:27.490 --> 00:48:28.490
Mozilla, he's built this really cool library
called x-tags.

00:48:28.490 --> 00:48:29.490
X-tags is basically a polyfill for the custom
elements part of what we showed

00:48:29.490 --> 00:48:30.490
you today.

00:48:30.490 --> 00:48:31.490
The cool thing about that is this actually
works in all major browsers.

00:48:31.490 --> 00:48:32.490
It uses a number of very clever hacks to do
it, but you actually

00:48:32.490 --> 00:48:33.490
can start building real apps on top of this
today if you want.

00:48:33.490 --> 00:48:34.490
&gt;&gt;Dimitri Glazkov: Daniel is actually actively
at work building a pretty, pretty solid toolkit

00:48:34.490 --> 00:48:35.490
on top of this, the UI widget library that
would potentially power some really, really

00:48:35.490 --> 00:48:36.490
cool applications in the future.

00:48:36.490 --> 00:48:37.490
&gt;&gt;Alex Komoroske: That's really cool, so check
that out once we post the link to that plus

00:48:37.490 --> 00:48:38.490
page.

00:48:38.490 --> 00:48:39.490
All right, great!

00:48:39.490 --> 00:48:40.490
So that's all that we have for you today,
we wanted to share a little

00:48:40.490 --> 00:48:41.490
bit more about Web components, it's a really
exciting thing for the future.

00:48:41.490 --> 00:48:42.490
Thanks so much
for coming out.

00:48:42.490 --> 00:48:43.490
[ Applause ]
&gt;&gt;Dimitri Glazkov: And -- and in the future

00:48:43.490 --> 00:48:44.490
-- the future bus leaves in 10 minutes, but
until then we can answer your questions if

00:48:44.490 --> 00:48:45.490
you would like.

00:48:45.490 --> 00:48:46.490
&gt;&gt;Alex Komoroske: Come up to one of these
microphones that we've got here in the aisles.

00:48:46.490 --> 00:48:47.490
&gt;&gt;&gt; What about events?

00:48:47.490 --> 00:48:48.490
&gt;&gt;Alex Komoroske: What about events is the
question we got from the audience.

00:48:48.490 --> 00:48:49.490
&gt;&gt;Dimitri Glazkov: The events are actually
also handled by the Shadow DOM specifications,

00:48:49.490 --> 00:48:50.490
and there's really neat things that we do
to make sure that the information in the event

00:48:50.490 --> 00:48:51.490
never escapes outside of the Shadow DOM subtree,
but the events are heard.

00:48:51.490 --> 00:48:52.490
It's called retargeting.

00:48:52.490 --> 00:48:53.490
What happens is that if something fires, like,
for example, if you click a play button in

00:48:53.490 --> 00:48:54.490
your video element, the event or the click
event propagates out, but it looks like it

00:48:54.490 --> 00:48:55.490
came from the video element.

00:48:55.490 --> 00:48:56.490
Does that make
sense?

00:48:56.490 --> 00:48:57.490
So it's actually a really complex part of
those things, and we fought extremely hard

00:48:57.490 --> 00:48:58.490
to make sure that Shadow DOM feels transparent
to the user and it doesn't look like it's

00:48:58.490 --> 00:48:59.490
affecting any actual normal operation of the
events.

00:48:59.490 --> 00:49:00.490
But the information from the inside
of the Shadow DOM subtree never leaks out

00:49:00.490 --> 00:49:01.490
on the outside.

00:49:01.490 --> 00:49:02.490
&gt;&gt;Alex Komoroske: We've got a question at
this mic.

00:49:02.490 --> 00:49:03.490
&gt;&gt;&gt; So it sounds like a lot of this is helping
you with bringing in dependencies and encapsulating

00:49:03.490 --> 00:49:04.490
code.

00:49:04.490 --> 00:49:05.490
Have you guys thought much in the spec about
dependency management, you know, I mean,

00:49:05.490 --> 00:49:06.490
obviously a lot of Java developers and a lot
of developers in general use Maven for that,

00:49:06.490 --> 00:49:07.490
so you don't get dependency explosion with
inside your app.

00:49:07.490 --> 00:49:08.490
There's that encapsulated
part but, you know, in a team you want to

00:49:08.490 --> 00:49:09.490
try and use consistent dependencies across.

00:49:09.490 --> 00:49:10.490
Has that been addressed in the spec at all?

00:49:10.490 --> 00:49:11.490
&gt;&gt;Dimitri Glazkov: At this point there is
just early discussions on how this actual

00:49:11.490 --> 00:49:12.490
linking of the custom elements, the packaging,
will happen, so this is actually a good time

00:49:12.490 --> 00:49:13.490
to start talking and start discussing this
type of thing.

00:49:13.490 --> 00:49:14.490
I mean you saw that in the future and you
saw it works but, you know,

00:49:14.490 --> 00:49:15.490
later on.

00:49:15.490 --> 00:49:16.490
&gt;&gt;&gt; What about like with media queries where
the widget, the component need to adapt based

00:49:16.490 --> 00:49:17.490
on certain break points, and usually those
break points are going to be different based

00:49:17.490 --> 00:49:18.490
on whatever context of the app they are used
in.

00:49:18.490 --> 00:49:19.490
Right.

00:49:19.490 --> 00:49:20.490
So one of the interesting things there is
that first of all we made sure that

00:49:20.490 --> 00:49:21.490
Shadow DOM actually operates within the confines
of CSS, we are not inventing anything abnormal,

00:49:21.490 --> 00:49:22.490
so all of the CSS machinery the way that you
operate on it will just work.

00:49:22.490 --> 00:49:23.490
It just feels,
it has the same -- it will feel like it's

00:49:23.490 --> 00:49:24.490
just part of the documents.

00:49:24.490 --> 00:49:25.490
So you will get
all of the same information about the size

00:49:25.490 --> 00:49:26.490
and media queries, things like that.

00:49:26.490 --> 00:49:27.490
&gt;&gt;&gt; (Inaudible).

00:49:27.490 --> 00:49:28.490
&gt;&gt;&gt; I'm an extension developer in the users
group aficionado, and there's lots of templated

00:49:28.490 --> 00:49:29.490
sites out there that don't use that yet, but
that would be great to extend.

00:49:29.490 --> 00:49:30.490
And are you thinking about how to integrate
this into

00:49:30.490 --> 00:49:31.490
the Chrome extension API so that we can add
components where there are none and change

00:49:31.490 --> 00:49:32.490
them?

00:49:32.490 --> 00:49:33.490
&gt;&gt;Dimitri Glazkov: Shadow DOM is actually
one of the really, really use cases for extensions,

00:49:33.490 --> 00:49:34.490
the ones that modify the page on the fly.

00:49:34.490 --> 00:49:35.490
Because what you can do is you can build a
Shadow DOM into an element and the document

00:49:35.490 --> 00:49:36.490
doesn't know that it's there.

00:49:36.490 --> 00:49:37.490
And so yes, it's a very common use case, yes,
it's coming.

00:49:37.490 --> 00:49:38.490
&gt;&gt;&gt; Thank you.

00:49:38.490 --> 00:49:39.490
&gt;&gt;&gt; I'm a (indiscernible) developer but I
was thinking could you invent the map API

00:49:39.490 --> 00:49:40.490
into the Shadow DOM so it would build a custom
tech for example a store locator and give

00:49:40.490 --> 00:49:41.490
that to a customer and say, hey, do this and
--

00:49:41.490 --> 00:49:42.490
&gt;&gt;Alex Komoroske: That's a phenomenal use
case, doing exactly that.

00:49:42.490 --> 00:49:43.490
In fact, one of the components of x-tag --
&gt;&gt;Dimitri Glazkov: Talk to this guy, he's

00:49:43.490 --> 00:49:44.490
already got one.

00:49:44.490 --> 00:49:45.490
&gt;&gt;Alex Komoroske: That's an awesome use case
for it.

00:49:45.490 --> 00:49:46.490
Yeah.

00:49:46.490 --> 00:49:47.490
&gt;&gt;Dimitri Glazkov: Come on, bring it on!

00:49:47.490 --> 00:49:48.490
&gt;&gt;Alex Komoroske: Anything else?

00:49:48.490 --> 00:49:49.490
&gt;&gt;&gt; What about the SCO, like there's potential
information like the SI tag that would be

00:49:49.490 --> 00:49:50.490
less important, would Google bot pick that
up because it's not potentially rendered on

00:49:50.490 --> 00:49:51.490
the page?

00:49:51.490 --> 00:49:52.490
&gt;&gt;&gt; We don't work on the search team so we
don't know the answer to that question.

00:49:52.490 --> 00:49:53.490
We can imagine there's going to be interesting
changes in the way that people --

00:49:53.490 --> 00:49:54.490
&gt;&gt;Dimitri Glazkov: It doesn't have to be on
the SI tag, it can be on H1 or poll, if you

00:49:54.490 --> 00:49:55.490
want it to.

00:49:55.490 --> 00:49:56.490
It's up to you to define it as
the author of the API.

00:49:56.490 --> 00:49:57.490
&gt;&gt;Alex Komoroske: If there are any other questions,
Dimitri and I will be hanging around for few

00:49:57.490 --> 00:49:58.490
minutes afterwards if you want to ask us any
other questions.

00:49:58.490 --> 00:49:59.490
Thanks so much.

00:49:59.490 --> 00:49:59.494
[ Applause ]
&gt;&gt;Dimitri Glazkov: Yay!

