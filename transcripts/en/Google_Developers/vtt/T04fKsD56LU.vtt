WEBVTT
Kind: captions
Language: en

00:00:00.801 --> 00:00:03.567
Gregorio: Hi, I'm Joe Gregorio.

00:00:03.567 --> 00:00:05.834
I work for Google
in developer relations.

00:00:05.834 --> 00:00:07.133
And today,
we're gonna be talking

00:00:07.133 --> 00:00:08.467
about the Atom
Publishing Protocol.

00:00:08.467 --> 00:00:10.234
So let's begin.

00:00:10.234 --> 00:00:12.734
This is an intro
to the Atom Publishing Protocol,

00:00:12.734 --> 00:00:14.267
and if you want
to know more details,

00:00:14.267 --> 00:00:16.868
you can go and read
RFC 5023,

00:00:16.868 --> 00:00:19.267
which you should do,
um, if you're interested,

00:00:19.267 --> 00:00:21.834
because I'm not gonna cover
all of the details in here.

00:00:21.834 --> 00:00:24.167
This is just an overview.

00:00:24.167 --> 00:00:29.133
So just as syndication started
with just weblogs,

00:00:29.133 --> 00:00:31.601
the Atom Publishing Protocol
was originally designed

00:00:31.601 --> 00:00:33.200
just for weblogs.

00:00:33.200 --> 00:00:35.901
And that's the motivating
example we're gonna use today.

00:00:35.901 --> 00:00:39.801
But just realize that it can
be applied to other areas.

00:00:39.801 --> 00:00:44.834
So let's go and look at a feed
in the Atom syndication format.

00:00:44.834 --> 00:00:48.267
A feed contains
one entry inside of it

00:00:48.267 --> 00:00:50.834
per weblog entry.

00:00:50.834 --> 00:00:52.367
And, because it's XML,

00:00:52.367 --> 00:00:54.734
it's in a machine-readable
format.

00:00:54.734 --> 00:00:56.834
And so
in the aggregation case,

00:00:56.834 --> 00:01:00.534
uh, newsreader's gonna go
and pull that feed,

00:01:00.534 --> 00:01:02.167
and look for new entries.

00:01:02.167 --> 00:01:05.400
And those new entries show up
at the beginning of the feed,

00:01:05.400 --> 00:01:07.868
and give you the--
really, the metadata

00:01:07.868 --> 00:01:10.501
about that updated entry.

00:01:10.501 --> 00:01:14.133
So if you're going
to design a protocol--

00:01:14.133 --> 00:01:16.767
and this is what we have with
the Atom Publishing Protocol--

00:01:16.767 --> 00:01:20.100
You really need
to do four things.

00:01:20.100 --> 00:01:22.767
You would want to be able
to create new entries

00:01:22.767 --> 00:01:24.567
on a weblog.

00:01:24.567 --> 00:01:28.033
You'd want to be able
to retrieve any new entries,

00:01:28.033 --> 00:01:30.334
or old entries.

00:01:30.334 --> 00:01:33.267
You would want to update entries
that already exist.

00:01:33.267 --> 00:01:35.000
And lastly,
you would want

00:01:35.000 --> 00:01:37.901
to delete entries out.

00:01:37.901 --> 00:01:42.400
So if you look
at syndication right now,

00:01:42.400 --> 00:01:44.334
as far
as building a protocol,

00:01:44.334 --> 00:01:46.701
really, we already
have retrieve done.

00:01:46.701 --> 00:01:49.734
Right, 'cause I can go to
the URI where that feed lives,

00:01:49.734 --> 00:01:52.467
do a get,
and get the latest things.

00:01:52.467 --> 00:01:55.968
Here's the fundamental idea
of the Atom Publishing Protocol,

00:01:55.968 --> 00:01:58.767
and that is any changes
you would make to a feed

00:01:58.767 --> 00:02:02.100
are gonna be reflected
in the weblog.

00:02:02.100 --> 00:02:06.167
Uh, for various reasons, though,
you probably don't want

00:02:06.167 --> 00:02:08.334
to use the same exact feed

00:02:08.334 --> 00:02:10.634
that you would put
into an aggregator

00:02:10.634 --> 00:02:12.501
as you would
for editing.

00:02:12.501 --> 00:02:14.067
You may have drafts
that you're working on,

00:02:14.067 --> 00:02:17.033
and you would want those drafts
to be available for you to edit,

00:02:17.033 --> 00:02:18.601
but you really don't want
those going out

00:02:18.601 --> 00:02:20.934
before they're allowed
to be seen in the public.

00:02:20.934 --> 00:02:22.767
So we're
gonna differentiate.

00:02:22.767 --> 00:02:25.300
There's going to be, uh,
the aggregation feed,

00:02:25.300 --> 00:02:26.734
and what we're gonna
be talking about today

00:02:26.734 --> 00:02:29.200
is the collection feed.

00:02:29.200 --> 00:02:30.567
We have retrieve.

00:02:30.567 --> 00:02:32.501
We're already basically
a quarter of the way done

00:02:32.501 --> 00:02:33.801
with the Atom Publishing
Protocol.

00:02:33.801 --> 00:02:36.234
We can retrieve.
How about creating?

00:02:36.234 --> 00:02:38.200
What--what would we do
to create?

00:02:38.200 --> 00:02:39.567
Well, in the Atom
Publishing Protocol,

00:02:39.567 --> 00:02:41.467
it's the simplest thing
you could possibly think of.

00:02:41.467 --> 00:02:43.501
We take an Atom entry,

00:02:43.501 --> 00:02:47.100
and we post it to the URI
of the collection feed.

00:02:47.100 --> 00:02:49.534
That's just an entry.

00:02:49.534 --> 00:02:52.701
There's no surrounding
feed element around it.

00:02:52.701 --> 00:02:54.901
So post that,

00:02:54.901 --> 00:02:58.400
and that gets added
to the feed.

00:02:58.400 --> 00:02:59.801
Like we said before,

00:02:59.801 --> 00:03:02.300
this change to the feed
will also get reflected

00:03:02.300 --> 00:03:05.934
in the weblog.

00:03:05.934 --> 00:03:07.601
All right, so we're,
in essence,

00:03:07.601 --> 00:03:09.734
halfway done with
the Atom Publishing Protocol.

00:03:09.734 --> 00:03:11.901
So we have
Create and Retrieve,

00:03:11.901 --> 00:03:15.033
and the other two parts
are Update and Delete.

00:03:15.033 --> 00:03:17.601
So let's go back and look
at that entry that was added

00:03:17.601 --> 00:03:19.567
to the collection feed.

00:03:19.567 --> 00:03:21.000
When you create
a new entry,

00:03:21.000 --> 00:03:23.901
the server will add
some other elements

00:03:23.901 --> 00:03:25.300
to that entry.

00:03:25.300 --> 00:03:26.934
In this case,
what you're seeing here

00:03:26.934 --> 00:03:28.801
is the edit URI,

00:03:28.801 --> 00:03:31.100
and every entry that
gets created will have it.

00:03:31.100 --> 00:03:35.534
and that's the URI
by which you're going to update,

00:03:35.534 --> 00:03:38.734
delete,
and retrieve that entry.

00:03:38.734 --> 00:03:40.868
So let's cover
the simplest case first,

00:03:40.868 --> 00:03:42.667
which is DELETE.

00:03:42.667 --> 00:03:44.100
This is actually just--

00:03:44.100 --> 00:03:48.100
You're going to send
a simple HTTP delete message

00:03:48.100 --> 00:03:50.467
to the URI
of that entry.

00:03:50.467 --> 00:03:51.767
And that's it.

00:03:51.767 --> 00:03:53.634
There's no body
that goes along in that request.

00:03:53.634 --> 00:03:54.801
Just a DELETE.

00:03:54.801 --> 00:03:56.634
Once that DELETE
gets received by the server,

00:03:56.634 --> 00:03:58.701
that entry gets removed
from the feed.

00:03:58.701 --> 00:03:59.934
And like we said before,

00:03:59.934 --> 00:04:01.234
That gets reflected
in the weblog.

00:04:01.234 --> 00:04:03.734
That weblog entry
goes away.

00:04:03.734 --> 00:04:06.000
Okay, so we've got
Create, Retrieve, and Delete.

00:04:06.000 --> 00:04:08.968
The last thing
we need is Update.

00:04:08.968 --> 00:04:11.467
So at that edit URI,

00:04:11.467 --> 00:04:13.033
you can actually
do a GET,

00:04:13.033 --> 00:04:15.067
and get
the full entry.

00:04:15.067 --> 00:04:18.334
And you will need to do that,
because according

00:04:18.334 --> 00:04:20.868
to the publishing protocol
specification,

00:04:20.868 --> 00:04:22.701
the entry that sits
in the collection

00:04:22.701 --> 00:04:24.834
may not be
the full entry.

00:04:24.834 --> 00:04:27.501
It might be abbreviated
in order to keep bandwidth down.

00:04:27.501 --> 00:04:30.167
So I can go
to that edit URI,

00:04:30.167 --> 00:04:32.901
do a GET,
and get the full representation.

00:04:32.901 --> 00:04:36.601
Now, if I wanted
to update what was going on,

00:04:36.601 --> 00:04:39.701
I could actually modify
that entry on my client,

00:04:39.701 --> 00:04:44.701
and then put it back
to that exact same URI.

00:04:44.701 --> 00:04:47.434
And so in this case,
I have updated the title.

00:04:47.434 --> 00:04:50.033
I do a PUT, and now
that entry will be updated.

00:04:50.033 --> 00:04:51.834
And that'll get reflected
in the feed,

00:04:51.834 --> 00:04:54.467
and on the weblog.

00:04:54.467 --> 00:04:55.634
So we're done.

00:04:55.634 --> 00:04:56.968
We've covered
all four parts

00:04:56.968 --> 00:04:58.300
of what you would want
out of a publishing protocol.

00:04:58.300 --> 00:05:02.834
Creating, retrieving,
updating and deleting entries.

00:05:02.834 --> 00:05:05.501
Well, we're at least done
as far as text is concerned.

00:05:05.501 --> 00:05:07.067
What about media?

00:05:07.067 --> 00:05:11.901
What if I wanted to add
an image or a sound or video?

00:05:11.901 --> 00:05:14.133
How do you do that
in the Atom Publishing Protocol?

00:05:14.133 --> 00:05:15.434
Really, it's the--

00:05:15.434 --> 00:05:18.400
Again, the simplest possible
thing you could imagine.

00:05:18.400 --> 00:05:19.534
We take your media,

00:05:19.534 --> 00:05:21.400
and you send that
in an HTTP post request,

00:05:21.400 --> 00:05:24.033
again, to the same exact
collection URI.

00:05:24.033 --> 00:05:27.167
That adds it to there.

00:05:27.167 --> 00:05:30.667
Media is slightly different,
in that when I post media,

00:05:30.667 --> 00:05:33.000
I actually create
two distinct resources.

00:05:33.000 --> 00:05:34.801
I'm gonna create
a resource with the URI

00:05:34.801 --> 00:05:36.334
that is the actual
media itself,

00:05:36.334 --> 00:05:38.234
like the image.

00:05:38.234 --> 00:05:39.501
And then,
there's going to be

00:05:39.501 --> 00:05:41.334
what's called
a "media link entry."

00:05:41.334 --> 00:05:43.934
That's the metadata
about the picture.

00:05:43.934 --> 00:05:46.901
The title,
the time it was posted, etc.

00:05:46.901 --> 00:05:49.000
We can see
those two resources

00:05:49.000 --> 00:05:50.200
when we look
at the media link entry

00:05:50.200 --> 00:05:52.467
that gets added
to the collection.

00:05:52.467 --> 00:05:55.200
The edit link points,
like I said,

00:05:55.200 --> 00:05:57.834
to the media link entry,

00:05:57.834 --> 00:05:59.067
and you can
manipulate that

00:05:59.067 --> 00:06:01.200
just like we did previously
with entries.

00:06:01.200 --> 00:06:03.701
I can do a GET on that,
to get the entry,

00:06:03.701 --> 00:06:05.434
I can to a PUT on it
to update it,

00:06:05.434 --> 00:06:07.901
and I can send it a DELETE
to remove it.

00:06:07.901 --> 00:06:10.300
And then there's
the edit media link.

00:06:10.300 --> 00:06:11.634
That supports
GET and PUT.

00:06:11.634 --> 00:06:13.834
So if I wanted
to update that image,

00:06:13.834 --> 00:06:17.033
I would change the image,
and put the image--

00:06:17.033 --> 00:06:19.267
and that's an HTTP PUT--

00:06:19.267 --> 00:06:22.300
to the edit media URI.

00:06:22.300 --> 00:06:25.434
If I wanted to update

00:06:25.434 --> 00:06:28.968
the title of that image,

00:06:28.968 --> 00:06:32.834
I would update--change
the media link entry,

00:06:32.834 --> 00:06:36.133
and put that entry--
HTTP PUT--

00:06:36.133 --> 00:06:39.167
to the edit URI.

00:06:39.167 --> 00:06:40.501
And, like I said before,

00:06:40.501 --> 00:06:43.534
if you wanted
to remove that media,

00:06:43.534 --> 00:06:45.067
you would send a DELETE.

00:06:45.067 --> 00:06:47.234
Again, no body,
just send a DELETE

00:06:47.234 --> 00:06:50.100
to the edit URI.

00:06:50.100 --> 00:06:52.667
Now, this is actually
a slight distinction.

00:06:52.667 --> 00:06:55.901
That's the way you end up
removing the metadata

00:06:55.901 --> 00:06:58.167
about the image,
and the image itself.

00:06:58.167 --> 00:06:59.868
You only need
to send one delete,

00:06:59.868 --> 00:07:02.133
and that'll
remove both of them.

00:07:02.133 --> 00:07:05.868
So in the examples
we've done so far,

00:07:05.868 --> 00:07:09.000
I've assumed that
there's just one collection,

00:07:09.000 --> 00:07:10.868
and we're adding
our entries

00:07:10.868 --> 00:07:14.200
and our media
to that same collection.

00:07:14.200 --> 00:07:16.100
That might not
actually be the case.

00:07:16.100 --> 00:07:19.234
That might actually be
a little difficult to organize.

00:07:19.234 --> 00:07:22.267
So we may actually
break it down

00:07:22.267 --> 00:07:24.434
into multiple collections.

00:07:24.434 --> 00:07:26.267
There may be
a collection for entries,

00:07:26.267 --> 00:07:27.467
and then there may
be a collection

00:07:27.467 --> 00:07:29.033
for all of your images.

00:07:29.033 --> 00:07:31.033
Or there may be
a link blog.

00:07:31.033 --> 00:07:33.434
You can break things down
that way.

00:07:33.434 --> 00:07:36.067
So how do you discover
which collections are available?

00:07:36.067 --> 00:07:40.167
That's where the service
document comes into play.

00:07:40.167 --> 00:07:43.133
That contains information
about all of the collections

00:07:43.133 --> 00:07:45.767
that a service supports.

00:07:45.767 --> 00:07:47.801
So if you look
at a service document,

00:07:47.801 --> 00:07:51.334
you'll see that there
are collections grouped together

00:07:51.334 --> 00:07:53.267
into workspaces.

00:07:53.267 --> 00:07:55.667
Um, and now here,

00:07:55.667 --> 00:07:58.868
we're looking
at a collection

00:07:58.868 --> 00:08:00.968
that just takes entries.

00:08:00.968 --> 00:08:03.234
And right there,
in that HREF,

00:08:03.234 --> 00:08:06.701
that is the URI
for our collection.

00:08:06.701 --> 00:08:07.834
Now we know
what to do with that.

00:08:07.834 --> 00:08:09.000
We could post to that

00:08:09.000 --> 00:08:10.567
to add new things
to that collection.

00:08:10.567 --> 00:08:13.601
There's actually two collections
in this service document,

00:08:13.601 --> 00:08:16.534
and the second one
is a media collection.

00:08:16.534 --> 00:08:18.567
And those accept elements

00:08:18.567 --> 00:08:21.267
tell you the types of media
that you are allowed

00:08:21.267 --> 00:08:23.200
to post
to that collection.

00:08:23.200 --> 00:08:28.834
In this case, it can accept
JPEGs, PNGs and GIFs.

00:08:28.834 --> 00:08:30.400
Okay, so that finishes
our overview

00:08:30.400 --> 00:08:32.067
of the Atom
Publishing Protocol.

00:08:32.067 --> 00:08:35.334
If you want to learn more,
you can always read RFC 4287,

00:08:35.334 --> 00:08:39.634
which is the internet standard
for the Atom Syndication Format.

00:08:39.634 --> 00:08:41.834
You can also read RFC 5023,

00:08:41.834 --> 00:08:45.234
which is the IETF standard for
the Atom Publishing Protocol.

00:08:45.234 --> 00:08:47.200
In addition, a good video
to follow this one

00:08:47.200 --> 00:08:49.567
is Jeff Fisher's
"Intro to Google Data,"

00:08:49.567 --> 00:08:51.501
which is available also
on YouTube.

00:08:51.501 --> 00:08:54.467
Uh, that covers
how Google has implemented

00:08:54.467 --> 00:08:56.167
some of these standards.

00:08:56.167 --> 00:09:01.601
And finally, you can always go
to code.google.com/apis/gdata,

00:09:01.601 --> 00:09:03.467
which covers
all of the documentation

00:09:03.467 --> 00:09:05.000
for Google's APIs.

00:09:05.000 --> 00:09:06.400
Thanks, and have fun.

