WEBVTT
Kind: captions
Language: en

00:00:10.109 --> 00:00:13.279
MICHAEL FINK: Hi, my name is
Michael Fink and I'm a Product

00:00:13.279 --> 00:00:16.109
Manager for the Google
Chart Tools Team.

00:00:16.109 --> 00:00:18.800
Amit and I flew over from
Israel, we're part of

00:00:18.800 --> 00:00:20.119
the Israeli office.

00:00:20.119 --> 00:00:23.679
And what I'd like to talk about
today is Google's unified

00:00:23.679 --> 00:00:28.330
approach for creating
dynamic charts on the web.

00:00:28.330 --> 00:00:32.189
Now if you want to follow this
talk what I strongly recommend

00:00:32.189 --> 00:00:35.960
is type in that tiny URL.

00:00:35.960 --> 00:00:36.950
That's 9-9-T-M-X-I.

00:00:38.690 --> 00:00:41.470
We'll try to make this talk as
interactive as possible, so if

00:00:41.470 --> 00:00:44.585
you have your laptops open just
type in that URL and what

00:00:44.585 --> 00:00:50.120
you should essentially
land on is this Wave.

00:00:50.120 --> 00:00:53.250
And what we have on this Wave
is the moderator page if you

00:00:53.250 --> 00:00:56.760
want to put up your questions
there and vote for them.

00:00:56.760 --> 00:00:59.470
I think that will be a
good time to do that.

00:00:59.470 --> 00:01:03.760
And I have here the link
for Chart Tools, which

00:01:03.760 --> 00:01:06.765
is our splash page.

00:01:06.765 --> 00:01:09.130
AUDIENCE: [UNINTELLIGIBLE].

00:01:09.130 --> 00:01:10.770
MICHAEL FINK: I think that's
their responsibility

00:01:10.770 --> 00:01:11.460
back there.

00:01:16.269 --> 00:01:17.697
Is this better now?

00:01:18.165 --> 00:01:18.633
Cool.

00:01:19.570 --> 00:01:22.580
So what you see on this Wave
is first our splash page.

00:01:22.580 --> 00:01:23.530
You're welcome to visit that.

00:01:23.760 --> 00:01:26.860
And then a list of demos that
we'll try to run through,

00:01:26.860 --> 00:01:29.570
through this talk.

00:01:29.570 --> 00:01:32.940
And in demo one you can
see that it says enter

00:01:32.940 --> 00:01:34.250
your hometown here.

00:01:34.460 --> 00:01:36.020
Some of you are welcome
to try that out.

00:01:38.350 --> 00:01:41.290
It's a very small form that
just requires you to put in

00:01:41.290 --> 00:01:44.540
your first name and your
hometown and we wanted to

00:01:44.540 --> 00:01:47.290
collect some live data that
we'll be able to show later on

00:01:47.290 --> 00:01:50.070
the charts and we wanted to
show you how data that's

00:01:50.070 --> 00:01:52.130
collected from your visitors
could be reflected

00:01:52.130 --> 00:01:52.680
on your website.

00:01:53.060 --> 00:01:55.770
So we thought this would
be a good opportunity to

00:01:55.770 --> 00:01:57.109
demonstrate that capability.

00:01:57.109 --> 00:01:59.670
So just go ahead,
fill out that form.

00:01:59.670 --> 00:02:01.810
It will take you just a second
and hopefully we'll be able

00:02:01.810 --> 00:02:04.740
to do something meaningful
with that data later on.

00:02:05.200 --> 00:02:07.909
Now I thought that the best
place to start would be

00:02:07.909 --> 00:02:13.139
by showing a very nice
visualization and that

00:02:13.139 --> 00:02:18.009
essentially shows Tweet
patterns across the week.

00:02:18.009 --> 00:02:21.099
This is a visualization
developed by one of the users

00:02:21.099 --> 00:02:22.169
of the Google Chart Tools.

00:02:23.169 --> 00:02:29.069
How many of you would actively
Tweet, like on a weekly basis?

00:02:29.069 --> 00:02:29.730
Hands up high.

00:02:29.730 --> 00:02:30.619
Great.

00:02:30.979 --> 00:02:34.279
How many actively Tweet,
like on a daily basis.

00:02:34.279 --> 00:02:35.999
Wow, that's a nice percentage.

00:02:35.999 --> 00:02:40.659
How many Tweet like
more than once a day?

00:02:40.659 --> 00:02:42.469
Do we have any volunteer
here that has a

00:02:42.469 --> 00:02:44.681
simple Tweet account?

00:02:46.188 --> 00:02:47.695
What's your name?

00:02:48.700 --> 00:02:52.719
AUDIENCE:
[UNINTELLIGIBLE PHRASE]

00:02:52.719 --> 00:02:53.469
MICHAEL FINK: OK, that's fine.

00:02:53.469 --> 00:02:54.937
What's your Twitter account?

00:02:56.343 --> 00:02:57.280
AUDIENCE: [UNINTELLIGIBLE]

00:02:57.280 --> 00:02:59.709
MICHAEL FINK: OK,
wait just a second.

00:02:59.709 --> 00:03:01.069
I'll get to that in one second.

00:03:01.069 --> 00:03:04.430
OK, so Pete will give us
his Twitter account.

00:03:04.430 --> 00:03:08.519
But before we do that I want to
show this very nice

00:03:08.519 --> 00:03:13.109
visualization that essentially
shows how many times you Tweet,

00:03:13.109 --> 00:03:16.489
how many times you got replies
for your Tweets, across

00:03:16.489 --> 00:03:18.429
different days of the week
and across different

00:03:18.429 --> 00:03:19.635
times of the day.

00:03:20.119 --> 00:03:22.889
And what we have here is the
Twitter account of someone

00:03:22.889 --> 00:03:26.319
who chose the name God
as a Twitter account.

00:03:26.319 --> 00:03:30.289
And what you can see is that
God has fairly regular hours.

00:03:30.289 --> 00:03:32.429
OK, so he sleeps
throughout the night.

00:03:33.259 --> 00:03:39.370
He has an intense Tweeting
pattern through working hours.

00:03:39.370 --> 00:03:42.690
Maybe towards the evening he
spends some time with the kids,

00:03:42.690 --> 00:03:46.249
probably Tweets a little bit
less and then towards the end

00:03:46.249 --> 00:03:49.199
of the day, a bit before
Midnight he Tweets a bit more.

00:03:49.199 --> 00:03:54.269
OK, so that's the Tweeting
pattern of a user named God.

00:03:54.269 --> 00:03:57.209
And what's interesting is that
all of this information is

00:03:57.209 --> 00:04:00.219
available in Twitter and you
could easily go through the

00:04:00.219 --> 00:04:03.939
logs and see when each Tweet
was created, but one

00:04:03.939 --> 00:04:08.859
visualization could give you
are very elegant summary of a

00:04:08.859 --> 00:04:11.540
certain pattern that is
hidden across all of

00:04:11.540 --> 00:04:14.899
the different records.

00:04:14.899 --> 00:04:17.979
That's the power of a
very nice visualization.

00:04:17.979 --> 00:04:24.240
And what we can contrast that
is with another Twitter user.

00:04:25.639 --> 00:04:27.090
Much less active, luckily.

00:04:27.090 --> 00:04:32.620
He only has 56 Tweets across
the last few years and what you

00:04:32.620 --> 00:04:37.310
could see is that Twitter
account is most active

00:04:37.310 --> 00:04:38.659
during the night.

00:04:38.659 --> 00:04:42.249
It has very little activity
throughout the day and

00:04:42.249 --> 00:04:44.419
luckily for us, gets
very little replies.

00:04:44.559 --> 00:04:49.555
So that's I would say the power
of a good visualization that

00:04:49.555 --> 00:04:51.710
could take data that is
publicly available, anyone

00:04:51.710 --> 00:04:54.804
could see it, but somehow
summarizes it and presents it

00:04:54.804 --> 00:04:56.874
in a very effective way.

00:04:57.969 --> 00:05:02.234
So I won't type in your Twitter
account because it's long and

00:05:02.234 --> 00:05:08.090
scary, but if anyone wants to
try this application out it's

00:05:08.090 --> 00:05:10.614
in our first or second
demo on the Wave.

00:05:11.729 --> 00:05:12.050
Cool.

00:05:12.050 --> 00:05:18.330
So noticing the power of the
good visualization is what

00:05:18.330 --> 00:05:24.110
motivated out team to create
this Chart Tools perspective

00:05:24.110 --> 00:05:26.599
where we try to develop charts.

00:05:26.599 --> 00:05:29.784
Both for internal use in
Google and then to make

00:05:29.784 --> 00:05:35.319
them freely accessible to
developers externally.

00:05:35.319 --> 00:05:38.219
And our mission essentially is
to make the world's structured

00:05:38.219 --> 00:05:41.360
data universally acceptable
and useful by providing

00:05:41.360 --> 00:05:42.629
enticing visualizations.

00:05:42.629 --> 00:05:45.090
So that's our teams mission.

00:05:45.090 --> 00:05:48.289
And what I'll be talking
about today is essentially

00:05:48.289 --> 00:05:49.410
four components.

00:05:49.410 --> 00:05:51.029
We'll have four
parts in this talk.

00:05:51.029 --> 00:05:53.339
The first I'll be talking
about image charts.

00:05:53.979 --> 00:05:57.759
It's a very basic, simple API.

00:05:57.759 --> 00:06:01.099
Where essentially you ping
a Google server with a

00:06:01.099 --> 00:06:05.449
get request, a simple URL
and you get a PNG back.

00:06:05.449 --> 00:06:08.090
OK, so that's the simplest
API that you could imagine

00:06:08.090 --> 00:06:10.370
for getting a chart
on your website.

00:06:12.339 --> 00:06:15.399
And the chart, as I said, is
rendered on Google servers.

00:06:15.399 --> 00:06:18.629
Then in the second part I'd
like to talk a bit about

00:06:18.629 --> 00:06:23.119
interactive charts that are
based on a JavaScript library

00:06:23.119 --> 00:06:27.050
and that provide a very rich,
client side interactive

00:06:27.050 --> 00:06:29.089
experience to your users.

00:06:29.289 --> 00:06:32.360
And then I'll switch over to
Amit, our tech lead and he'll

00:06:32.360 --> 00:06:35.699
give you an under the hood
perspective on how to do this

00:06:35.699 --> 00:06:37.810
with two or three simple steps.

00:06:37.810 --> 00:06:41.830
And in the final part Amit will
talk about combining the power

00:06:41.830 --> 00:06:47.790
of server side rendering with
client side interactivity.

00:06:47.790 --> 00:06:51.649
OK, so let's start with part
one, which is the image charts.

00:06:51.649 --> 00:06:55.109
And as I said this is probably
the easiest way-- if you

00:06:55.109 --> 00:06:57.099
want to have charts on your
website-- this is probably

00:06:57.099 --> 00:06:57.899
the easiest way to do it.

00:06:58.400 --> 00:07:02.900
Is just to ping a get
request and get a PNG

00:07:02.900 --> 00:07:04.519
back from our servers.

00:07:04.519 --> 00:07:06.689
And the way to do this
is fairly simple.

00:07:06.689 --> 00:07:11.770
Here's the server, a chart API
is Google.com/chart and what

00:07:11.770 --> 00:07:13.910
you see here is essentially
the parameters of the chart

00:07:13.910 --> 00:07:14.630
that you would like to get.

00:07:14.630 --> 00:07:17.430
I kind of magnified that
because it's kind of small to

00:07:17.430 --> 00:07:20.020
see, but essentially it's
very, very straightforward.

00:07:20.020 --> 00:07:22.960
So the chart size should
be 500 by 200 pixels.

00:07:22.960 --> 00:07:24.000
That's part of your request.

00:07:24.000 --> 00:07:27.970
The second part is the chart
type should be p3, which just

00:07:27.970 --> 00:07:30.319
indicates that it's
a 3D pie chart.

00:07:30.319 --> 00:07:36.530
The chart data should have a 60
for the hello label and then a

00:07:36.530 --> 00:07:41.689
40 slice for the world label.

00:07:41.689 --> 00:07:44.990
OK, so you see you can just
send this URL, get an image

00:07:44.990 --> 00:07:50.860
back and it's as simple
as you could imagine.

00:07:50.860 --> 00:07:54.539
So here's that very same URL
and notice I'll just click and

00:07:54.539 --> 00:07:58.460
enter and here's the chart and
you could put in an image tag

00:07:58.460 --> 00:08:03.509
and get the charts and you
could generate these charts

00:08:03.509 --> 00:08:05.360
dynamically and get
different charts.

00:08:05.360 --> 00:08:12.719
If I want to say decrease the
size of or increase the size of

00:08:12.719 --> 00:08:17.369
the worlds part I could just
change that percentage

00:08:17.369 --> 00:08:18.180
and it changes.

00:08:18.180 --> 00:08:20.860
So that's very, very simple.

00:08:20.860 --> 00:08:23.830
Very, very user-friendly.

00:08:23.830 --> 00:08:27.719
And what we started out with is
providing a gallery of the

00:08:27.719 --> 00:08:28.939
standard charts that
you would imagine.

00:08:28.939 --> 00:08:32.390
So we have the bar charts, the
line charts, combinations of

00:08:32.390 --> 00:08:34.260
bar charts and line charts.

00:08:34.260 --> 00:08:38.949
Then we progressed to provide
radar charts, maps, bubble

00:08:38.949 --> 00:08:43.400
charts, and a variety of other
charts that people asked for.

00:08:43.400 --> 00:08:47.470
And what's nice is that we are
continuously surprised, almost

00:08:47.470 --> 00:08:50.870
on a daily basis on that
creative use cases that our

00:08:50.870 --> 00:08:54.180
users make use of this API.

00:08:55.330 --> 00:08:57.635
So could anyone recognize
what's going on here?

00:08:59.495 --> 00:09:02.400
So, I think I heard the right
answer, but maybe that will

00:09:02.400 --> 00:09:04.193
give you a small hint.

00:09:04.193 --> 00:09:06.120
So, that's the great dipper.

00:09:06.120 --> 00:09:08.430
And what you could see, this is
essentially a bubble chart

00:09:08.430 --> 00:09:13.750
rendered by the chart API, the
image chart API and one of our

00:09:13.750 --> 00:09:17.610
users essentially built a
website that you enter your

00:09:17.610 --> 00:09:21.940
location on the planet and you
say here's the time of the day

00:09:21.940 --> 00:09:26.340
and it will give you a perfect
rendering of the night sky

00:09:26.340 --> 00:09:30.150
using the image chart API.

00:09:30.150 --> 00:09:33.740
And there are a lot of
creative use cases as I said.

00:09:33.740 --> 00:09:40.190
So the standard procedure with
working with the image charts

00:09:40.190 --> 00:09:45.860
is usually to play around
manually, finding the right

00:09:45.860 --> 00:09:47.180
chart that you would
like to render.

00:09:47.330 --> 00:09:50.350
Maybe playing around a bit with
its parameters and then once

00:09:50.350 --> 00:09:56.009
you're happy with that result,
usually go to generate that URL

00:09:56.009 --> 00:09:59.900
programmatically using some PHP
and JavaScript wrappers that

00:09:59.900 --> 00:10:01.800
are available out there.

00:10:01.800 --> 00:10:07.100
And in order to facilitate
this process what we've just

00:10:07.100 --> 00:10:12.750
yesterday launched is a very
straightforward chart editor,

00:10:12.750 --> 00:10:16.340
which gives you a variety of
different charts that you

00:10:16.340 --> 00:10:17.730
might want to choose out of.

00:10:17.730 --> 00:10:20.960
Say I take this radar chart and
I'm quite happy with this radar

00:10:20.960 --> 00:10:23.480
chart, but I want to play
around with maybe

00:10:23.480 --> 00:10:25.820
with the fill.

00:10:25.820 --> 00:10:29.670
I could change that maybe to a
blue fill, maintain some

00:10:29.670 --> 00:10:37.120
transparency and the output of
this editor is a URL that I

00:10:37.120 --> 00:10:42.980
could just plug into my
browser and you can

00:10:42.980 --> 00:10:44.970
see here's the image.

00:10:44.970 --> 00:10:46.779
That I just wanted to I could
play around with the data

00:10:46.779 --> 00:10:49.630
obviously and pretty much with
any of the parameters of the

00:10:49.630 --> 00:10:52.639
chart and that gives the manual
prototyping and then I could go

00:10:52.639 --> 00:10:55.259
to those PHP and JavaScript
wrappers that I mentioned

00:10:55.259 --> 00:10:58.664
earlier on and make sure that
live data could be reflected on

00:10:58.664 --> 00:11:05.580
my website using this API.

00:11:05.580 --> 00:11:09.200
So we started out, as I
said earlier on with

00:11:09.200 --> 00:11:10.820
focusing on charts.

00:11:10.820 --> 00:11:14.850
And what we've done in the
last year is we've gradually

00:11:14.850 --> 00:11:18.510
realized that there are a lot
of rendering needs that we

00:11:18.510 --> 00:11:22.600
could help out using te
essentially same servers

00:11:22.600 --> 00:11:25.240
and same interface.

00:11:25.240 --> 00:11:29.709
And this effort started
out with essentially

00:11:29.709 --> 00:11:31.149
pins for Google Maps.

00:11:32.420 --> 00:11:34.430
You might have
recognized these pins.

00:11:34.430 --> 00:11:38.970
So they usually have certain
letters or text in them that

00:11:38.970 --> 00:11:43.259
might vary and the color
might change and the

00:11:43.259 --> 00:11:44.780
shadow might change.

00:11:44.780 --> 00:11:49.660
So we essentially extended
the API to provide what

00:11:49.660 --> 00:11:50.550
we call dynamic icons.

00:11:51.550 --> 00:11:56.230
So very often as a developer
you might need small icons or

00:11:56.230 --> 00:11:59.200
small visual elements that you
want to plug in into your map

00:11:59.200 --> 00:12:03.620
in your site or onto any other
element and what we provide as

00:12:03.620 --> 00:12:08.860
part of the image chart API is
this ability to create

00:12:08.860 --> 00:12:10.010
dynamic icons.

00:12:10.010 --> 00:12:12.370
And we have a very
rich gallery.

00:12:12.370 --> 00:12:15.130
We recently added all of the
maps of the world and there are

00:12:15.130 --> 00:12:19.300
several hundreds of other
configurable icons that you

00:12:19.300 --> 00:12:20.500
could play around with.

00:12:20.960 --> 00:12:25.770
We also added a functionality
to provide QR codes.

00:12:25.770 --> 00:12:28.210
So if you want a service to
provide QR codes you're

00:12:28.210 --> 00:12:29.570
welcome to use the service.

00:12:29.570 --> 00:12:34.740
If you want to use a LaTeX
equation you just again, use

00:12:34.740 --> 00:12:37.320
the exact same APIs image
I mentioned earlier on.

00:12:37.320 --> 00:12:40.020
You type in a get request
and you could get a

00:12:40.020 --> 00:12:41.640
dynamic LaTeX equation.

00:12:42.370 --> 00:12:46.024
And you can see here some
other nice use cases

00:12:46.024 --> 00:12:47.446
for dynamic icons.

00:12:47.920 --> 00:12:52.180
So that pretty much sums up the
first part that talks about

00:12:52.180 --> 00:12:54.839
static images, which are nice.

00:12:54.839 --> 00:12:57.850
But what we are really excited
about is the interactive charts

00:12:57.850 --> 00:13:00.149
and interactive experiences
that we want to

00:13:00.149 --> 00:13:01.270
provide to our users.

00:13:01.270 --> 00:13:06.490
So what we have here is
essentially the second API.

00:13:07.630 --> 00:13:11.500
The interactive chart API
and it comes with a very

00:13:11.500 --> 00:13:15.550
rich gallery of charts.

00:13:15.670 --> 00:13:18.210
You could see in the top
the basic core charts

00:13:18.210 --> 00:13:18.890
that you would expect.

00:13:18.890 --> 00:13:21.960
The bar charts, the line
charts, the scatter plots.

00:13:21.960 --> 00:13:27.780
But then gradually we added
gauges, term clouds,

00:13:27.780 --> 00:13:28.940
organizational charts.

00:13:28.940 --> 00:13:31.030
Here in the third line you
could see charts that

00:13:31.030 --> 00:13:33.570
you might find familiar.

00:13:33.570 --> 00:13:38.780
So we have here an annotated
timeline chart that was

00:13:38.780 --> 00:13:40.740
originally developed
by Google Finance.

00:13:41.080 --> 00:13:44.750
We have here a geomap chart
that was developed by the

00:13:44.750 --> 00:13:48.080
Google Analytics team and
it's part of the Google

00:13:48.080 --> 00:13:49.349
Analytics reports.

00:13:49.709 --> 00:13:52.009
We have a motion chart
that was developed by

00:13:52.009 --> 00:13:53.189
the Gapminder guys.

00:13:53.189 --> 00:13:55.889
And we have the math charts.

00:13:56.360 --> 00:13:59.490
And essentially what we're
trying to do is we're trying to

00:13:59.490 --> 00:14:03.370
say each and every one of these
charts probably required

00:14:03.370 --> 00:14:07.089
several thousands of hours of
engineering work that has been

00:14:07.089 --> 00:14:10.530
done within Google and has been
done mostly for Google needs.

00:14:10.530 --> 00:14:14.150
Could we somehow wrap it in a
unified way and an elegant way

00:14:14.150 --> 00:14:18.039
and then give it back to the
community so any one of you

00:14:18.039 --> 00:14:22.030
could use his own data and
present it with these charts

00:14:22.030 --> 00:14:24.669
that are made available?

00:14:24.669 --> 00:14:27.610
And what we could see on the
bottom line is that this

00:14:27.610 --> 00:14:31.660
community effort is starting to
pay back in the sense that the

00:14:31.660 --> 00:14:34.930
protocol that defines the
data-- we have a specific data

00:14:34.930 --> 00:14:38.500
table protocol that we work
with-- has been adopted by many

00:14:38.500 --> 00:14:43.810
other external developers and
on a monthly basis we get

00:14:43.810 --> 00:14:47.240
contributions that extend our
gallery by external developers

00:14:47.240 --> 00:14:51.430
that say hey, I have
this new [? tree map ?]

00:14:51.430 --> 00:14:54.180
flash chart and I would like
to add it to your gallery,

00:14:54.180 --> 00:14:55.700
are you willing to add it?

00:14:55.700 --> 00:15:00.810
It complies with the same
format as the other charts and

00:15:00.810 --> 00:15:04.150
we just add it and we gradually
get more and more

00:15:04.150 --> 00:15:04.720
contributions.

00:15:04.720 --> 00:15:06.910
And what I'm trying to
emphasize here is that this is

00:15:06.910 --> 00:15:10.800
really a community effort in
trying to have the richest

00:15:10.800 --> 00:15:15.210
gallery of charts available in
a free manner for

00:15:15.210 --> 00:15:16.170
all developers.

00:15:16.650 --> 00:15:19.970
So in the last few months we
tried to take the core charts

00:15:19.970 --> 00:15:22.650
that were originally developed
probably two or three years

00:15:22.650 --> 00:15:29.700
ago and go into a major
rewrite of these charts.

00:15:30.060 --> 00:15:32.550
And the first thing that
we targeted is the color

00:15:32.550 --> 00:15:33.750
palette of the charts.

00:15:33.750 --> 00:15:40.470
And we really did a in-depth
research into optimizing the

00:15:40.470 --> 00:15:43.890
new colors of these
core charts.

00:15:44.210 --> 00:15:47.590
As you can see here
in this pie chart.

00:15:47.590 --> 00:15:52.150
And then the next thing that we
targeted is carefully designing

00:15:52.150 --> 00:15:53.370
the layout of the charts.

00:15:53.370 --> 00:15:58.550
So we went into this extensive
session of optimizing the white

00:15:58.550 --> 00:16:03.110
space versus the central
area of the chart.

00:16:03.110 --> 00:16:05.390
And I think we're very
happy with our new layout.

00:16:05.390 --> 00:16:07.989
This just been
launched yesterday.

00:16:07.989 --> 00:16:11.980
So if you look into our site
you could see that all of our

00:16:11.980 --> 00:16:14.630
new charts are available there
with some comparisons to how

00:16:14.630 --> 00:16:17.380
the charts used to look and how
they look right now and I think

00:16:17.380 --> 00:16:23.490
that you'll see that they've
gone through a major revision.

00:16:24.560 --> 00:16:27.660
Once last addition that we've
done is we're in the process

00:16:27.660 --> 00:16:30.110
of adding a lot of
new functionality.

00:16:30.690 --> 00:16:32.910
This will come out in
the next few weeks.

00:16:33.470 --> 00:16:38.650
What we could see here is the
option of combining line chart,

00:16:38.650 --> 00:16:44.790
bar charts, area charts
all into one thing.

00:16:44.790 --> 00:16:50.730
So, in order to demonstrate how
this rich gallery could work

00:16:50.730 --> 00:16:55.890
together and how it could be
presented and essentially do a

00:16:55.890 --> 00:17:00.960
major facelift to a website we
built a mock website called

00:17:00.960 --> 00:17:05.459
Backpaki and it will be
integrated into our

00:17:05.459 --> 00:17:07.530
documentation so you're able to
take snippets out

00:17:07.530 --> 00:17:09.890
of this website.

00:17:10.710 --> 00:17:13.720
And Backpaki is essentially a
wiki page for backpackers.

00:17:13.720 --> 00:17:16.170
OK, so if you're a backpacker,
you just came back from Mexico

00:17:16.170 --> 00:17:19.010
and you want to give some
stats about your trip.

00:17:19.010 --> 00:17:20.280
How much did it cost?

00:17:20.280 --> 00:17:22.260
Who were you traveling with?

00:17:22.640 --> 00:17:26.809
You could just go into this
wiki page and fill out the

00:17:26.809 --> 00:17:31.850
textual information and the
page looks right now just as

00:17:31.850 --> 00:17:36.590
a plane textual page and
it's not very exciting.

00:17:36.590 --> 00:17:38.830
And what I would like to show
you in the next few slides is

00:17:38.830 --> 00:17:43.660
how we could completely change
the experience using the

00:17:43.660 --> 00:17:45.880
appropriate visualizations.

00:17:45.880 --> 00:17:48.900
So the first thing that you
would obviously expect to do is

00:17:48.900 --> 00:17:52.700
to say, OK, why would I have a
textual table of all of the

00:17:52.700 --> 00:17:53.220
destinations in the world?

00:17:53.220 --> 00:17:56.780
What I would naturally expect
to have is a map that

00:17:56.780 --> 00:17:59.150
highlights, what are the hot
destinations right now.

00:17:59.150 --> 00:18:02.550
Again, I want to show you how
simple it is to add such a

00:18:02.550 --> 00:18:03.170
visualization to your site.

00:18:03.170 --> 00:18:06.360
So what we see here on the
left-hand side is our code

00:18:06.360 --> 00:18:09.940
playground, which is
available on Google Code.

00:18:09.940 --> 00:18:15.230
And what we would like to do is
to take this geomap that you

00:18:15.230 --> 00:18:17.390
see on the left-hand side and
just use it to replace

00:18:17.390 --> 00:18:20.809
that textual list that
is kind of boring.

00:18:20.809 --> 00:18:24.549
And notice that the color
palette of the Backpaki is this

00:18:24.549 --> 00:18:27.130
brownish, nice brownish colors.

00:18:27.910 --> 00:18:32.020
So here's our playground.

00:18:32.020 --> 00:18:39.130
And you could see that it has
a nice code snippet for each

00:18:39.130 --> 00:18:40.170
visualization that
you would like.

00:18:40.170 --> 00:18:41.250
So here's the geomap snippet.

00:18:41.250 --> 00:18:44.980
And what you could see down
here in the bottom is a live

00:18:44.980 --> 00:18:47.990
version of the visualization.

00:18:49.090 --> 00:18:54.539
And what's misfortunate is
that the geomap is right now

00:18:54.539 --> 00:18:57.050
color-coded with this green
color that is completely

00:18:57.050 --> 00:18:59.200
not suitable for Backpaki.

00:18:59.200 --> 00:19:05.600
So what I would do is I'll just
go to the HTML snippet and go

00:19:05.600 --> 00:19:10.140
down to the options part
that draws the geomap.

00:19:10.140 --> 00:19:14.880
And with a simple change,
adding the option, which

00:19:14.880 --> 00:19:17.900
naturally is called colors.

00:19:17.900 --> 00:19:27.650
I'll try to set the range of
colors to go from say white,

00:19:27.650 --> 00:19:33.380
all the way to a
brownish color.

00:19:33.380 --> 00:19:38.820
Let's see if that works.

00:19:38.820 --> 00:19:39.380
OK.

00:19:39.380 --> 00:19:42.440
So I just go into the code
snippet, modify anything that

00:19:42.440 --> 00:19:47.100
I need in order to get the
visualization to fit exactly

00:19:47.100 --> 00:19:51.830
into the scheme that my site
presents and then I'm just

00:19:51.830 --> 00:19:58.240
copying this snippet,
opening a new file here.

00:19:58.240 --> 00:20:00.090
OK, saving that.

00:20:00.090 --> 00:20:04.040
And essentially if I go to test
HTML, so I'm trying to open

00:20:04.040 --> 00:20:10.050
that site and here's my website
with a relevant visualization.

00:20:10.050 --> 00:20:13.930
So as you can see it's just as
simple as going into the

00:20:13.930 --> 00:20:18.140
playground, modifying a few
options and then pasting that

00:20:18.140 --> 00:20:19.290
snippet into your website.

00:20:19.290 --> 00:20:20.790
And voila, the
visualization is there.

00:20:27.160 --> 00:20:30.010
So what you're probably asking
right now is, OK, you

00:20:30.010 --> 00:20:32.200
configured the chart to look
the way you want it, but it's

00:20:32.200 --> 00:20:35.435
not connected to the actual
data that I have on my website.

00:20:35.435 --> 00:20:37.690
So what I want to show you
right now is that again

00:20:37.690 --> 00:20:41.679
could be done with two
very simple steps.

00:20:44.190 --> 00:20:46.480
How many of you actually
filled out the form?

00:20:46.480 --> 00:20:49.700
Quite a lot.

00:20:49.700 --> 00:20:51.429
OK, so here's the form.

00:20:51.429 --> 00:20:53.940
And here's the spreadsheet
that aggregates all the

00:20:53.940 --> 00:20:57.240
data that you guys filled.

00:20:57.240 --> 00:20:59.529
Is Roger from Menlo Park here?

00:20:59.999 --> 00:21:00.939
Hi, Roger.

00:21:01.409 --> 00:21:07.055
OK, so this is the data that
was just collected live and

00:21:07.055 --> 00:21:10.230
here's the version of Backpaki
that I mentioned earlier on.

00:21:10.230 --> 00:21:13.350
And I'll just go to the friends
on map tab and what I would

00:21:13.350 --> 00:21:18.160
like to do is to show whether
we could use in this

00:21:18.160 --> 00:21:22.820
visualization in order to help
Roger find a friend that lives

00:21:22.820 --> 00:21:26.060
close to Menlo Park and to make
sure that if you're a

00:21:26.060 --> 00:21:30.120
backpacker you could
look around and find

00:21:30.120 --> 00:21:31.850
backpackers in your area.

00:21:33.310 --> 00:21:36.160
So that's Michael.

00:21:36.160 --> 00:21:40.620
Let's zoom into here.

00:21:40.620 --> 00:21:47.700
So quite a lot, quite a few
are from the Bay area.

00:21:47.700 --> 00:21:49.207
Is Roger here?

00:21:49.207 --> 00:21:50.780
Roger, I think we
found you a date.

00:21:50.780 --> 00:21:58.440
So there's Julian, that's
in-- is Julian here?

00:21:58.440 --> 00:21:59.620
Julian, talk to Roger
later on if you want

00:21:59.620 --> 00:22:04.010
to go backpacking, OK?

00:22:04.010 --> 00:22:08.220
So you could see how live data
that was aggregated just a few

00:22:08.220 --> 00:22:11.960
minutes ago could be tied
together into a very compelling

00:22:11.960 --> 00:22:15.820
visualization that helps people
with the information that

00:22:15.820 --> 00:22:17.540
they're trying to find.

00:22:17.540 --> 00:22:23.570
Now what we did is we added to
Backpaki a few additional nice

00:22:23.570 --> 00:22:25.990
visualizations that we've
recently added to our gallery.

00:22:26.559 --> 00:22:30.190
What you could see here is
a tree map visualization.

00:22:30.190 --> 00:22:35.090
So a tree map to those who
don't know, a tree map is a

00:22:35.090 --> 00:22:39.510
visualization that essentially
is aimed at describing

00:22:39.510 --> 00:22:44.010
information that is in a
taxonomical structure.

00:22:44.010 --> 00:22:47.400
And essentially you could say,
what are the destinations that

00:22:47.400 --> 00:22:50.385
guys usually go to and they're
kind of color-coded here in

00:22:50.385 --> 00:22:53.250
blue and the size of the
rectangle says how many

00:22:53.250 --> 00:22:54.200
travelers actually
go to destination.

00:22:55.210 --> 00:22:56.280
And you could see that
there are countries

00:22:56.280 --> 00:22:57.690
that like Cypress.

00:22:57.950 --> 00:23:04.080
Very few people go to Cypress,
but say Malaysia is a much more

00:23:04.080 --> 00:23:07.910
prominent destination and you
have an additional color that

00:23:07.910 --> 00:23:10.110
you could kind of indicate
where gals are going and where

00:23:10.110 --> 00:23:13.809
guys are going and I think
this is a nice visualization.

00:23:13.809 --> 00:23:18.230
We also have here an
example with prices.

00:23:18.230 --> 00:23:23.510
And one more thing that we have
is in, so here's the same

00:23:23.510 --> 00:23:27.550
geomap that we've seen earlier
on and you could see that maybe

00:23:27.550 --> 00:23:32.580
this month Mexico is a
hot destination for

00:23:32.580 --> 00:23:35.230
people to travel in.

00:23:35.420 --> 00:23:38.760
What I did is I just clicked on
Mexico and I could drill down

00:23:38.760 --> 00:23:41.020
into the next level of
resolution, which are the

00:23:41.020 --> 00:23:42.320
regions within Mexico.

00:23:42.320 --> 00:23:46.559
I could see that Wachaca is a
very popular destination within

00:23:46.559 --> 00:23:50.600
the backpacker community
that's going to Mexico.

00:23:50.600 --> 00:23:52.970
And what I have here in the
bottom part is, as I

00:23:52.970 --> 00:23:57.710
mentioned earlier on, is an
annotated timeline.

00:23:57.710 --> 00:23:58.820
You might recognize it.

00:23:59.120 --> 00:24:02.300
It originated from the
Google Finance team.

00:24:02.300 --> 00:24:06.530
And I could just zoom into the
duration that I want to go to

00:24:06.530 --> 00:24:09.190
Mexico, which is sometime in
October and I could see that in

00:24:09.190 --> 00:24:13.779
October I could go to and catch
the Independence celebration

00:24:13.779 --> 00:24:16.769
and that there are two other
events that I could play around

00:24:16.769 --> 00:24:19.780
and visit while I'm in Mexico.

00:24:19.780 --> 00:24:21.990
OK, so this is how
visualizations could

00:24:21.990 --> 00:24:23.230
work together.

00:24:23.230 --> 00:24:26.510
And then I could drill down
into Wachaca and say hey, what

00:24:26.510 --> 00:24:28.610
are the actual treks that
people are going through.

00:24:28.610 --> 00:24:32.040
And I could drill down to the
level of actually seeing a map

00:24:32.040 --> 00:24:37.100
that has the relevant
trek information.

00:24:37.100 --> 00:24:40.389
And what I have here on the
bottom is an altitude map of

00:24:40.389 --> 00:24:41.589
saying that this is
a five-day trek.

00:24:41.589 --> 00:24:49.520
It starts at fairly low and you
reach a peak of 3,200 meters.

00:24:49.520 --> 00:24:52.300
And what's nice about this
is that these charts

00:24:52.300 --> 00:24:53.470
could work together.

00:24:53.590 --> 00:24:57.140
So you could just catch the
event of clicking on any one of

00:24:57.140 --> 00:25:03.170
these destinations and the map
up on top is centralized around

00:25:03.170 --> 00:25:05.690
that specific destination.

00:25:05.690 --> 00:25:08.640
And what I kind of plugged here
on the side, if you want to

00:25:08.640 --> 00:25:11.770
post on your backpackers motel
in the evening you know, here

00:25:11.770 --> 00:25:14.239
are the details of
tomorrow's tour.

00:25:14.239 --> 00:25:17.200
You could just plug it with
that same QR code that we saw

00:25:17.200 --> 00:25:21.280
earlier on generated by the
image chart API and get kind

00:25:21.280 --> 00:25:26.899
of a comprehensive summary
of tomorrows destinations.

00:25:26.899 --> 00:25:30.390
So I think I pretty much
covered all of the things I

00:25:30.390 --> 00:25:31.269
wanted to show in Backpaki.

00:25:34.270 --> 00:25:38.360
Now the only thing that I had
to do in order to connect the

00:25:38.360 --> 00:25:42.929
data into the spreadsheet that
aggregated your information was

00:25:42.929 --> 00:25:46.120
to take a snippet
from our site.

00:25:46.120 --> 00:25:47.279
Oops, sorry.

00:25:47.279 --> 00:25:50.300
Take a snippet from our site
and the only line I have to

00:25:50.300 --> 00:25:53.570
actually put in, in order to
hook up to my data is this

00:25:53.570 --> 00:25:57.919
line, which as you could
imagine it's just a query that

00:25:57.919 --> 00:26:00.289
goes into this specific
spreadsheet that's aggregating

00:26:00.289 --> 00:26:01.840
my specific data.

00:26:01.840 --> 00:26:05.080
OK, so that's essentially the
only change I have to do after

00:26:05.080 --> 00:26:09.040
I configured the look and feel
of the chart to the brownish

00:26:09.040 --> 00:26:12.960
colors that Backpaki has is to
change the data source to be

00:26:12.960 --> 00:26:14.830
the spreadsheet that I want.

00:26:14.830 --> 00:26:17.429
And it could be any other
data source as Amit will

00:26:17.429 --> 00:26:20.145
explain in a few minutes.

00:26:21.950 --> 00:26:24.370
So that's pretty much my
section of the talk.

00:26:24.960 --> 00:26:29.914
And I want to invite Amit, who
is our tech lead and he'll

00:26:29.914 --> 00:26:30.820
take over from here.

00:26:30.820 --> 00:26:37.570
AMIT WEINSTEIN: Thanks Michael.

00:26:37.570 --> 00:26:41.480
So let's go back to the
site for one moment.

00:26:48.650 --> 00:26:52.020
OK, what we saw here is the
demonstration of how we drill

00:26:52.020 --> 00:26:56.299
down in the geomap between
the two zoom levels.

00:26:56.299 --> 00:27:00.210
So we start in the world map in
order to see better the entire

00:27:00.210 --> 00:27:04.669
world all the relative volume
of travelers in each place.

00:27:04.669 --> 00:27:07.219
But you want to be able to
drill down into a specific

00:27:07.219 --> 00:27:09.160
zone and see more
information about it.

00:27:09.160 --> 00:27:12.050
So how would you like to
implement such a thing when

00:27:12.050 --> 00:27:13.490
you have a visualization?

00:27:14.810 --> 00:27:19.269
So basically what we want, we
have the data for each of the

00:27:19.269 --> 00:27:22.590
zoom levels and we want to
travel between the

00:27:22.590 --> 00:27:24.639
different regions.

00:27:24.639 --> 00:27:28.590
So we basically want to listen
to the click event of a user

00:27:28.590 --> 00:27:32.836
on a region and tell the
visualization, OK, the user has

00:27:32.836 --> 00:27:35.879
clicked in some region and you
want to step into a specific

00:27:35.879 --> 00:27:39.670
region to get more information.

00:27:39.670 --> 00:27:41.190
Let's look at the code.

00:27:41.190 --> 00:27:45.080
So basically this is part of
the real code that is available

00:27:45.080 --> 00:27:49.010
on the Backpaki mock site
that you can see later on.

00:27:49.010 --> 00:27:53.390
So we basically hold a stack of
the current state where we are,

00:27:53.390 --> 00:27:57.419
so we start in the global scope
and then as the user push on

00:27:57.419 --> 00:28:02.246
the region we simply step into
the stack and we

00:28:02.246 --> 00:28:02.679
add new regions.

00:28:02.679 --> 00:28:06.960
So when we listen to the region
click event we simply push a

00:28:06.960 --> 00:28:09.930
new region to the stack and
redraw the visualization.

00:28:11.170 --> 00:28:13.780
And of course we want to be
able to zoom out, so we listen

00:28:13.780 --> 00:28:17.870
to the zoom out event, which is
built in into the geomap

00:28:17.870 --> 00:28:21.669
visualization and we pop the
last region from the stack and

00:28:21.669 --> 00:28:22.419
redraw the visualization.

00:28:22.419 --> 00:28:27.399
So this is a demonstration how
you can really be interactive

00:28:27.399 --> 00:28:31.359
with the chart even though the
chart doesn't support the zoom

00:28:31.359 --> 00:28:33.979
capability as part of
the chart itself.

00:28:34.539 --> 00:28:39.749
So you can add new interactions
using the JavaScript code

00:28:39.749 --> 00:28:43.240
instead of the visualization.

00:28:43.240 --> 00:28:47.419
Let's have an overview of how
this API works in case you

00:28:47.419 --> 00:28:49.649
have different episodes,
like Michael showed.

00:28:50.379 --> 00:28:53.450
In our example we use
the Google Spreadsheet.

00:28:53.450 --> 00:28:55.849
So we have the browser
and we want to show

00:28:55.849 --> 00:28:56.279
some visualization.

00:28:57.190 --> 00:29:02.000
So the Google Chart Tools
define some data structure.

00:29:02.000 --> 00:29:07.640
Structured data, we call it
data table and the API is

00:29:07.640 --> 00:29:10.410
documented on our webpage
and it's publicly available

00:29:10.410 --> 00:29:13.519
so everyone can use it.

00:29:13.519 --> 00:29:17.830
And basically in the JavaScript
code we create some data table,

00:29:17.830 --> 00:29:20.270
populate it with the data and
send it to the visualization in

00:29:20.270 --> 00:29:21.910
order to show it
on the webpage.

00:29:23.210 --> 00:29:25.930
But the question is where's
the data come from?

00:29:25.930 --> 00:29:30.570
So we saw in the playground
example the data is simply

00:29:30.570 --> 00:29:33.690
hard-coded into the JavaScript
code and stored there.

00:29:33.809 --> 00:29:36.919
But this is not practical
for real data for the

00:29:36.919 --> 00:29:38.809
webpage that we have.

00:29:38.809 --> 00:29:41.159
So what we want to have,
we want to take the data

00:29:41.159 --> 00:29:42.850
from a remote source.

00:29:42.850 --> 00:29:46.094
We have the Chart Tools
protocol for query

00:29:46.094 --> 00:29:47.870
and response.

00:29:47.870 --> 00:29:51.699
And what we saw in the previous
slide, we simply had a Google

00:29:51.699 --> 00:29:57.080
Spreadsheet which has a
specific URL and we get the

00:29:57.080 --> 00:30:01.280
data directly to a browser.

00:30:01.280 --> 00:30:04.080
So the question is, where
do we manipulate the data?

00:30:04.169 --> 00:30:07.960
We don't want to have different
spreadsheets for each

00:30:07.960 --> 00:30:10.540
query that we want.

00:30:10.540 --> 00:30:12.900
And we want to be able
to extract part of

00:30:12.900 --> 00:30:14.030
the data to show.

00:30:14.030 --> 00:30:17.370
For example, in the GeoMap we
wanted to show only the regions

00:30:17.370 --> 00:30:22.270
of a zoomed in country
and not all the map.

00:30:22.270 --> 00:30:26.960
So for this end we have a query
language, which is SQL like and

00:30:26.960 --> 00:30:30.000
is also part of protocol
and Google Spreadsheets

00:30:30.000 --> 00:30:31.669
implement that language.

00:30:31.669 --> 00:30:36.370
So we can send the spreadsheet
query and ask for a specific

00:30:36.370 --> 00:30:41.100
part of the table and in order
for us not to get the entire

00:30:41.100 --> 00:30:43.980
spreadsheet so we can
visualize the data.

00:30:43.980 --> 00:30:45.940
But Google Spreadsheet is
only one data source.

00:30:46.220 --> 00:30:49.659
And obviously users want to
have different data sources.

00:30:49.659 --> 00:30:52.769
So for example, if you have a
SQL database or a CSV file that

00:30:52.769 --> 00:30:56.350
you store the information in
you might want to be able to

00:30:56.350 --> 00:30:58.990
create your own data source,
which wraps these databases.

00:31:00.260 --> 00:31:02.970
So to this end, we have two
open-source libraries.

00:31:03.309 --> 00:31:06.860
One in Java and one in Python
that allows you to wrap your

00:31:06.860 --> 00:31:10.700
data sources and create a
simple server that gets a

00:31:10.700 --> 00:31:13.830
request in our protocol and
process the request in

00:31:13.830 --> 00:31:18.060
restoring the data and the
library as I said, has some

00:31:18.060 --> 00:31:20.720
query language and the Java
library also supports

00:31:20.720 --> 00:31:21.170
Acorn management.

00:31:22.570 --> 00:31:24.860
And the question is, if you
have for example a SQL

00:31:24.860 --> 00:31:28.180
database, where do you
want the query to happen?

00:31:28.180 --> 00:31:32.750
So although our query has the
capability to perform select

00:31:32.750 --> 00:31:36.789
operation and field operation
it is much more efficient if

00:31:36.789 --> 00:31:39.909
the operation of the query
language happens inside the SQL

00:31:39.909 --> 00:31:43.370
database because this is very
efficient and the data doesn't

00:31:43.370 --> 00:31:47.809
have to be transferred from the
data to the data source server.

00:31:47.809 --> 00:31:53.980
So to this end the Java library
also enables to use that

00:31:53.980 --> 00:31:58.700
database native capabilities
in order to make the

00:31:58.700 --> 00:32:00.480
query more efficient.

00:32:00.700 --> 00:32:01.899
Let's look at some example.

00:32:01.989 --> 00:32:07.150
Let's say we have some
spreadsheet data as the thing

00:32:07.150 --> 00:32:10.464
below here and we want to have
our query select

00:32:10.464 --> 00:32:11.380
the department.

00:32:11.380 --> 00:32:14.750
But we want to only take it to
where our revenues are above

00:32:14.750 --> 00:32:18.150
$20,000 and we want to order it
by the revenue in

00:32:18.150 --> 00:32:18.460
descending order.

00:32:18.460 --> 00:32:22.159
So this question is sent from
the browser to the remote

00:32:22.159 --> 00:32:23.220
data source, to the
Google Spreadsheet.

00:32:24.960 --> 00:32:28.490
And we take only the subset of
the data and send the response

00:32:28.490 --> 00:32:29.890
back to the browser.

00:32:29.890 --> 00:32:36.179
If this were SQL database we
could either apply the query in

00:32:36.179 --> 00:32:41.153
the Java library or use the SQL
native capabilities in order

00:32:41.153 --> 00:32:44.420
to make it more efficient.

00:32:44.420 --> 00:32:48.320
OK, of course SQL and CSV and
Google Spreadsheet are strong

00:32:48.320 --> 00:32:52.550
databases, but obviously user
has some other custom databases

00:32:52.550 --> 00:32:58.260
and you can always use your
own database as the back end.

00:32:59.350 --> 00:33:02.240
Even using our library in Java
and Python you can use whatever

00:33:02.240 --> 00:33:05.879
database you have, but our
users also contribute

00:33:05.879 --> 00:33:09.140
some other languages
that you can use.

00:33:09.140 --> 00:33:10.340
For example, PHP
and Ruby on Rails.

00:33:11.169 --> 00:33:13.620
and you can use whatever
library that you want as the

00:33:13.620 --> 00:33:18.240
protocol is open sourced
and is freely used.

00:33:19.320 --> 00:33:22.469
So this was an overview of how
you can connect whatever data

00:33:22.469 --> 00:33:25.400
source that you have or
whatever database that you want

00:33:25.400 --> 00:33:29.255
in order to show it in the
browser for the final user.

00:33:32.768 --> 00:33:37.330
OK, as Michael said, this is a
community effort and we defined

00:33:37.330 --> 00:33:40.929
some API, which is a common
language to be shared for all

00:33:40.929 --> 00:33:45.210
the visualization in order
to reduce the number of

00:33:45.210 --> 00:33:48.109
adjustments that we need to do
in order to show visualization

00:33:48.109 --> 00:33:49.440
from different data sources.

00:33:49.440 --> 00:33:50.680
So we have the [? converting ?]

00:33:50.680 --> 00:33:53.679
from data sources to our
API and we want all the

00:33:53.679 --> 00:33:59.480
visualization to use our API
in order to get the input.

00:33:59.480 --> 00:34:01.250
So this is for example,
a nice visualization

00:34:01.250 --> 00:34:02.940
written by WordPress.

00:34:04.230 --> 00:34:07.930
A ball cloud, which the words
is different sizes according

00:34:07.930 --> 00:34:10.619
to the volume that
they define here.

00:34:10.619 --> 00:34:14.950
For example, it's probably
how common these words are.

00:34:14.950 --> 00:34:16.970
And this is a very nice
visualization, which is written

00:34:16.970 --> 00:34:21.510
in Flash and because it is
written in Flash it accepts it

00:34:21.510 --> 00:34:26.989
input in XML format to
the Flash objects.

00:34:26.989 --> 00:34:29.919
We want to use this
visualization inside

00:34:29.919 --> 00:34:31.639
our Backpaki site.

00:34:31.639 --> 00:34:34.749
So if I go here to the Backpaki
site we can add this

00:34:34.749 --> 00:34:38.549
visualization so it
demonstrates what are the most

00:34:38.549 --> 00:34:42.434
common places to travel in and
it is visualized in

00:34:42.434 --> 00:34:43.440
a very nice manner.

00:34:44.569 --> 00:34:47.739
So the question is, how can we
embed this visualization and

00:34:47.739 --> 00:34:50.410
make it simpler for all
the users to embed this

00:34:50.410 --> 00:34:51.580
visualization who uses our API?

00:34:54.299 --> 00:34:59.069
So instead of us converting the
data table format, which we

00:34:59.069 --> 00:35:04.969
have into the XML we can write
the code once and host it in

00:35:04.969 --> 00:35:08.420
a public place so that
everyone could use it.

00:35:08.420 --> 00:35:08.957
So I use [? rough, ?]

00:35:08.957 --> 00:35:12.609
the visualization,
decided to do it for us.

00:35:12.609 --> 00:35:14.219
And here is the code
that he wrote.

00:35:14.219 --> 00:35:17.930
You can see this code in
[? codegoogle.com/feed ?]

00:35:17.930 --> 00:35:19.200
that he uploaded there.

00:35:19.200 --> 00:35:25.129
So now everyone can use the
visualization if using our API.

00:35:26.069 --> 00:35:29.280
This code has two main parts.

00:35:29.280 --> 00:35:34.029
The first part is converting
our format of a data table

00:35:34.029 --> 00:35:35.340
into the XML variable.

00:35:36.600 --> 00:35:38.360
So we can see here it's
a very simple code.

00:35:38.360 --> 00:35:45.329
We go over the rows of the data
table and we simply take each

00:35:45.329 --> 00:35:49.469
row and create an
XML tag for it.

00:35:49.469 --> 00:35:54.639
And in the green part we simply
embed the visualization

00:35:54.639 --> 00:35:58.414
and parse the variable
that we just created.

00:35:59.479 --> 00:36:02.489
So using this code you can see
that this visualization is here

00:36:02.489 --> 00:36:05.519
and all we needed to do is
change the name of the

00:36:05.519 --> 00:36:08.499
visualization since the data
was already in our format, so

00:36:08.499 --> 00:36:11.950
the change was very simple.

00:36:11.950 --> 00:36:14.840
So this is an example of how we
can take from the community,

00:36:14.840 --> 00:36:18.950
our visualization which was
open sourced and can freely be

00:36:18.950 --> 00:36:22.839
used and we only need to add a
small part to make it

00:36:22.839 --> 00:36:33.929
accessible to all our
users who uses our API.

00:36:33.929 --> 00:36:36.920
So, the last part of the talk
is about server side rendering

00:36:36.920 --> 00:36:38.530
and the client side
interactivity.

00:36:38.530 --> 00:36:45.890
So we saw the server side the
charts API and also the

00:36:45.890 --> 00:36:48.460
interactive charts and we want
to compare the two

00:36:48.460 --> 00:36:49.809
APIs that we have.

00:36:51.489 --> 00:36:53.989
So obviously the image charts
are static images and they have

00:36:53.989 --> 00:36:56.990
no interactivity versus the
interactive charts, which can

00:36:56.990 --> 00:36:59.100
really enhance the user
experience by adding

00:36:59.100 --> 00:36:59.340
interactivity.

00:36:59.480 --> 00:37:03.119
So it's a nice experience
of exploring the

00:37:03.119 --> 00:37:04.349
data interactively.

00:37:06.630 --> 00:37:09.640
The API for the image
chart is the only URL.

00:37:09.640 --> 00:37:12.950
You just give a URL and get
the image which is very

00:37:12.950 --> 00:37:13.750
simple and portable.

00:37:13.750 --> 00:37:16.010
And the interactive charts you
have very basic JavaScript

00:37:16.010 --> 00:37:18.060
code as you saw.

00:37:18.060 --> 00:37:20.920
You take from the playground,
just copy, paste the code

00:37:20.920 --> 00:37:24.059
and embed it in your page.

00:37:24.460 --> 00:37:27.630
One of the advantages of the
server side image charts

00:37:27.630 --> 00:37:28.840
is it is very fast.

00:37:28.840 --> 00:37:31.220
This is very fast
because two advantages.

00:37:31.220 --> 00:37:34.329
One, this is run on the
Google servers in C

00:37:34.819 --> 00:37:38.180
code and it is also cached.

00:37:38.180 --> 00:37:41.850
So if two users request the
same image, the same chart

00:37:41.850 --> 00:37:45.369
we simply compute it once
and send the results back

00:37:45.369 --> 00:37:48.409
from the cached version.

00:37:48.549 --> 00:37:51.630
And in the interactive
charts the data remains

00:37:51.630 --> 00:37:52.694
on the client side.

00:37:52.694 --> 00:37:56.670
You don't have to send the data
and all the rendering is done

00:37:56.670 --> 00:37:59.180
locally and you can also
manipulate the data.

00:37:59.180 --> 00:38:02.629
You can sort and group and do
whatever you want with the

00:38:02.629 --> 00:38:07.849
data before visualizing
it and it is very simple.

00:38:07.849 --> 00:38:11.249
In the last year, we wanted to
combine the two efforts and to

00:38:11.249 --> 00:38:15.959
make it even better, to enhance
the user experience with server

00:38:15.959 --> 00:38:17.659
side rendering and client
side interactivity.

00:38:18.350 --> 00:38:19.430
And what do I mean by that?

00:38:19.430 --> 00:38:21.380
So the [UNINTELLIGIBLE]

00:38:21.380 --> 00:38:25.789
visualization, which are very
computational intense and

00:38:25.789 --> 00:38:29.799
that requires the server to
render the visualization.

00:38:30.829 --> 00:38:33.789
However, we don't want to lose
the interactivity only because

00:38:33.789 --> 00:38:36.919
the rendering is very
intensive computational wise.

00:38:38.429 --> 00:38:39.499
So how we can combine the two?

00:38:39.970 --> 00:38:43.360
We can make a JavaScript in the
client side visualization,

00:38:43.360 --> 00:38:46.960
which makes a request to the
server only to get the layout.

00:38:46.960 --> 00:38:49.600
To do the complex part
of the computation.

00:38:49.600 --> 00:38:53.820
And then in the JavaScript side
you visualize the data and

00:38:53.820 --> 00:38:55.479
add the interactivity.

00:38:55.479 --> 00:38:58.710
So one of these examples
is the GeoMap that we

00:38:58.710 --> 00:38:59.930
already saw before.

00:39:00.240 --> 00:39:05.180
So the GeoMap also has a very
deep down metro-level zoom

00:39:05.180 --> 00:39:06.010
of the United States.

00:39:06.010 --> 00:39:10.160
So this zoom has very large
amount of polygons and these

00:39:10.160 --> 00:39:13.650
polygons cannot be computed on
the client side and we even

00:39:13.650 --> 00:39:16.869
prefer not to store them on the
client side if we

00:39:16.869 --> 00:39:17.789
don't need them.

00:39:17.789 --> 00:39:21.389
So this is an example of such a
combination of a server side

00:39:21.389 --> 00:39:25.969
rendering and the client side
interactivity where the client

00:39:25.969 --> 00:39:30.260
side sends a request to
the server with which

00:39:30.260 --> 00:39:32.689
polygons it needs.

00:39:32.689 --> 00:39:35.279
And the server returns
back the polygon that the

00:39:35.279 --> 00:39:37.460
client side should draw.

00:39:38.229 --> 00:39:41.149
And this way we get the
benefits of the two worlds.

00:39:41.149 --> 00:39:43.849
We can do a heavy computation
and still get the interactivity

00:39:43.849 --> 00:39:47.929
on the client side to
enhance the user experience.

00:39:48.349 --> 00:39:52.709
Another example, which is
very new, is still a bit

00:39:52.709 --> 00:39:56.400
in experimental stages is
having a photograph is.

00:39:58.039 --> 00:40:00.519
So graph layouting problem is
a very difficult problem.

00:40:00.879 --> 00:40:03.324
Basically the problem
indicates that we give

00:40:03.324 --> 00:40:04.069
you some restrictions.

00:40:04.209 --> 00:40:08.650
For example, in the network or
a social graph and we say which

00:40:08.650 --> 00:40:12.700
two items are connected in an
edge and there is some

00:40:12.700 --> 00:40:15.969
restriction on the edge and we
want to know how to layout

00:40:15.969 --> 00:40:19.680
these nodes, these items in the
two-dimensional space so

00:40:19.680 --> 00:40:21.320
it would be optimized.

00:40:21.320 --> 00:40:26.400
Highly optimized spaces so
there would be as few edges

00:40:26.400 --> 00:40:30.270
as possible that cut one
another or even know that

00:40:30.270 --> 00:40:31.650
overlap one another.

00:40:32.869 --> 00:40:36.399
So this problem is very
difficult and it was

00:40:36.399 --> 00:40:37.570
researched for a long time.

00:40:37.570 --> 00:40:41.880
And there are very strong
libraries that do these

00:40:41.880 --> 00:40:43.470
computations for us.

00:40:43.470 --> 00:40:45.750
And they're also publicly
available and they're

00:40:45.750 --> 00:40:47.299
open sourced.

00:40:47.299 --> 00:40:50.680
So what we did, we simply
wrapped using the charts API.

00:40:51.640 --> 00:40:53.839
The rendering of this image.

00:40:54.460 --> 00:40:59.279
So you basically send the
server in some specific

00:40:59.279 --> 00:41:02.419
format the restrictions
that you have on the graph.

00:41:02.419 --> 00:41:04.346
And you get returned
two things.

00:41:04.346 --> 00:41:07.250
The first thing that you get
is an image of the chart

00:41:07.250 --> 00:41:08.569
as you can see here.

00:41:08.569 --> 00:41:11.630
Bu the second thing that you
get is the layout, so you

00:41:11.630 --> 00:41:14.950
know each node, where it
is located and what is

00:41:14.950 --> 00:41:16.509
the value of the node.

00:41:16.509 --> 00:41:19.339
Let's go back to
our Backpaki site.

00:41:19.339 --> 00:41:24.479
And if you want to see our
social graph here, so you see

00:41:24.479 --> 00:41:26.590
the image that we just saw in
the presentation that we

00:41:26.590 --> 00:41:28.300
take from the server.

00:41:28.300 --> 00:41:32.220
But when I hover over a node I
can also add some interactivity

00:41:32.220 --> 00:41:35.369
to it and show the
image of that person.

00:41:35.369 --> 00:41:39.929
So obviously this is not
exactly me, but you can see

00:41:39.929 --> 00:41:43.380
here pictures of people
from our office.

00:41:43.380 --> 00:41:49.409
So we combine the server side
power in order to sort of

00:41:49.409 --> 00:41:54.030
layout the problem of a graph
and we add the client side

00:41:54.030 --> 00:41:57.369
interactivity to enhance
the user experience.

00:41:57.589 --> 00:42:00.160
So this is one of the
approaches that we take in

00:42:00.160 --> 00:42:03.070
order to make the experience
better in the future

00:42:03.070 --> 00:42:05.319
development of the
Google Chart Tool.

00:42:05.319 --> 00:42:06.880
So let's summarize what we saw.

00:42:07.359 --> 00:42:10.674
We basically saw very rich
gallery of visualization both

00:42:10.674 --> 00:42:13.670
in the image charts API and
the interactive charts.

00:42:13.670 --> 00:42:15.659
They are free of charge.

00:42:15.659 --> 00:42:17.059
You can use them
wherever you want.

00:42:17.059 --> 00:42:18.809
Even in the
commercial software.

00:42:20.169 --> 00:42:21.920
They are highly
customizable as you saw.

00:42:22.430 --> 00:42:26.660
We can change the colors and
the size of the charts in order

00:42:26.660 --> 00:42:30.969
to embed them whenever we want
to make the experience of the

00:42:30.969 --> 00:42:33.429
site complete and don't
make the visualization

00:42:33.429 --> 00:42:36.639
alien in your site.

00:42:36.639 --> 00:42:40.269
We have both interactive
playground for the interactive

00:42:40.269 --> 00:42:43.630
visualization and the image
chart editor for the charts

00:42:43.630 --> 00:42:46.400
API, so you can customize and
play with the visualization

00:42:46.400 --> 00:42:51.119
before you embed it in your
site and to optimally choose

00:42:51.119 --> 00:42:53.660
which visualization
you want to use.

00:42:53.660 --> 00:42:55.859
We have an active developer
group that we answer e-mails

00:42:55.859 --> 00:43:00.189
on a daily basis, so you can
send your questions there.

00:43:00.189 --> 00:43:04.309
And we saw how to take the data
from whatever data source that

00:43:04.309 --> 00:43:07.809
you want in order to connect
the visualization to the

00:43:07.809 --> 00:43:09.719
real data that you have.

00:43:09.719 --> 00:43:14.259
The charts are very easy to
use and you can see the

00:43:14.259 --> 00:43:15.930
documentation that we have.

00:43:15.930 --> 00:43:18.319
In order to find the
documentation, you can simply

00:43:18.319 --> 00:43:24.729
search for Google Charts and
see our documentation.

00:43:24.729 --> 00:43:28.900
So you have here both the image
charts and the interactive

00:43:28.900 --> 00:43:31.640
charts and you have side by
side comparison to know which

00:43:31.640 --> 00:43:36.412
one of them you should choose
in order to embed in your site.

00:43:38.969 --> 00:43:42.879
And I just want to show
one more example.

00:43:45.249 --> 00:43:50.179
Just wanted to add that in the
tree map visualization you can

00:43:50.179 --> 00:43:55.029
also drill down into the area.

00:43:55.029 --> 00:44:04.163
So you can also-- nevermind.

00:44:05.209 --> 00:44:08.630
It's not complete, but this
entire site is with mock data,

00:44:08.630 --> 00:44:13.749
so not everything exactly
presents the real information,

00:44:13.749 --> 00:44:17.599
but only to demonstrate the
power of the visualization.

00:44:17.599 --> 00:44:20.469
So that's about it and if
you have questions we

00:44:20.469 --> 00:44:22.079
would be happy to answer.

00:44:35.079 --> 00:44:38.949
AUDIENCE: Hello, so can you
clarify the difference between

00:44:38.949 --> 00:44:42.359
the Google Charts API and the
Google Visualizations API?

00:44:42.359 --> 00:44:47.859
Is that just sort of rebranding
or what's the difference?

00:44:47.859 --> 00:44:50.969
AMIT WEINSTEIN: OK, so the
charts API is basically

00:44:50.969 --> 00:44:53.679
using our URL based charts.

00:44:53.679 --> 00:44:57.359
So you send the URL and
get an image back.

00:44:57.359 --> 00:45:01.729
And the visualization API is
what we discussed the

00:45:01.729 --> 00:45:03.069
connection between the
visualization, the browser

00:45:03.069 --> 00:45:05.310
and the remote data source.

00:45:05.880 --> 00:45:09.479
So this is basically
the difference.

00:45:09.579 --> 00:45:12.880
The visualization API is the
public protocol that allows

00:45:12.880 --> 00:45:19.289
you to send a request and get
a response with the data.

00:45:21.109 --> 00:45:24.880
AUDIENCE: OK, so my first
question is, I'm used the

00:45:24.880 --> 00:45:28.699
visualization API and one thing
I found frustrating was dealing

00:45:28.699 --> 00:45:32.620
with the data table object
because it's kind of like

00:45:32.620 --> 00:45:36.410
obtuse and if you want to go
ahead and do something like

00:45:36.410 --> 00:45:41.170
change the data at run time,
like say you have an annotated

00:45:41.170 --> 00:45:43.760
timeline and you want to say,
display a completely different

00:45:43.760 --> 00:45:46.669
set of annotations with the
same data that you already

00:45:46.669 --> 00:45:48.659
have, is there an
easy way to do that?

00:45:52.099 --> 00:45:54.275
AMIT WEINSTEIN: So the question
is, can we change the data in

00:45:54.275 --> 00:45:54.910
the data table dynamically?

00:45:56.400 --> 00:45:57.800
AUDIENCE: Yes, or is there
an easy way to do that?

00:45:57.800 --> 00:46:02.059
I found that I could do
that, but I don't know.

00:46:02.059 --> 00:46:03.829
Like the way that I ended up
doing it was just walking

00:46:03.829 --> 00:46:07.239
through all the data points and
then changing the annotation if

00:46:07.239 --> 00:46:10.509
I have a new one, you know?

00:46:10.509 --> 00:46:13.264
AMIT WEINSTEIN: OK, so the data
table itself is an object that

00:46:13.264 --> 00:46:16.640
you have inside your JavaScript
code and you can modify it

00:46:16.640 --> 00:46:20.599
either by going cell by cell
and changing it or you can

00:46:20.599 --> 00:46:23.329
also have something
called data view.

00:46:23.469 --> 00:46:27.469
so you apply a view on a data
table and ask for specific

00:46:27.469 --> 00:46:31.729
filters to happen so you set to
see only subset of the rows or

00:46:31.729 --> 00:46:35.820
subset of the column or you can
apply some function so you want

00:46:35.820 --> 00:46:39.680
to have a computed column that
is the result of applying a

00:46:39.680 --> 00:46:41.930
function on each of the rows.

00:46:41.930 --> 00:46:44.129
So I hope that answers
your question.

00:46:44.129 --> 00:46:45.549
AUDIENCE: I don't know.

00:46:45.549 --> 00:46:47.380
I won't waste too
much time with that.

00:46:47.380 --> 00:46:53.739
But the question I had by the
way was at my company I can't

00:46:53.739 --> 00:46:57.729
use the chart API because of
legal reasons about letting

00:46:57.729 --> 00:47:03.519
data out because we would be
putting the data into the URL

00:47:03.519 --> 00:47:04.779
that's private information.

00:47:05.329 --> 00:47:10.779
Is there any way to do user
rendering API for like static

00:47:10.779 --> 00:47:14.289
charts that don't use Flash,
but without posting data

00:47:14.289 --> 00:47:15.099
to a remote source?

00:47:16.439 --> 00:47:19.469
AMIT WEINSTEIN: So most of our
interactive visualization don't

00:47:19.469 --> 00:47:21.500
send the data back
to the servers.

00:47:21.500 --> 00:47:23.610
Obviously the visualizations
that use the charts API must

00:47:23.610 --> 00:47:28.909
send the data to the server
because it renders it.

00:47:28.909 --> 00:47:31.754
And every visualization that we
have in the documentation it

00:47:31.754 --> 00:47:35.499
says, explicitly, what is the
data for, [UNINTELLIGIBLE]

00:47:35.499 --> 00:47:37.059
and the information
is sent to a server.

00:47:37.059 --> 00:47:38.700
AUDIENCE: My question
is, is there one that

00:47:38.700 --> 00:47:40.340
doesn't use Flash?

00:47:41.689 --> 00:47:42.429
But also doesn't post data.

00:47:43.930 --> 00:47:45.380
AMIT WEINSTEIN: So the
interactive visualization, most

00:47:45.380 --> 00:47:49.410
of them are written in HTML 5
technology and [? namely SVG ?]

00:47:49.410 --> 00:47:51.980
for Internet Explorer, which
are not browsers which are

00:47:51.980 --> 00:47:54.109
not Internet Exploreer,
and the VML for IE.

00:47:55.459 --> 00:47:59.609
And most of the interactive
charts are of this form and

00:47:59.609 --> 00:48:02.399
they don't send the data
and are not in Flash.

00:48:02.399 --> 00:48:04.349
AUDIENCE: Do you know if the
annotated timelines one is

00:48:04.349 --> 00:48:05.119
available in HTML 5 yet?

00:48:05.119 --> 00:48:07.109
AMIT WEINSTEIN: So the
annotated timeline is currently

00:48:07.109 --> 00:48:10.679
in Flash, but we hope that in
the next few quarters we would

00:48:10.679 --> 00:48:13.179
be able to supply some
alternatives, which

00:48:13.179 --> 00:48:14.178
does not use Flash.

00:48:14.178 --> 00:48:15.156
AUDIENCE: Thank you.

00:48:19.069 --> 00:48:21.109
AUDIENCE: It's been
awhile-- whoops, OK.

00:48:21.109 --> 00:48:25.399
It's been awhile since I used
the charts API, but this

00:48:25.399 --> 00:48:26.679
has kind of inspired me.

00:48:26.679 --> 00:48:30.700
I have a complicated data
set and I'm familiar with

00:48:30.700 --> 00:48:33.880
communicating with the
API using get requests.

00:48:34.420 --> 00:48:35.709
That's easy enough.

00:48:35.709 --> 00:48:38.420
But if I have a complicated
data set I'm just ultimately

00:48:38.420 --> 00:48:42.349
going to overrun what I
can put in a get request.

00:48:42.349 --> 00:48:45.979
Is there some sort of way that
I can kind of say, go look at

00:48:45.979 --> 00:48:49.609
this spreadsheet or something
like that in my get request

00:48:49.609 --> 00:48:53.019
or am I going to have to
think of way to do this?

00:48:53.509 --> 00:48:55.119
AMIT WEINSTEIN: That's
a great question.

00:48:55.289 --> 00:49:00.199
So currently we don't have a
way to specify in the charts

00:49:00.199 --> 00:49:03.449
API to fetch the data
from a third location.

00:49:03.449 --> 00:49:08.670
However, we do allow you to do
a post request and we even

00:49:08.670 --> 00:49:11.769
wrap it for you in the
interactive chart.

00:49:12.229 --> 00:49:18.245
There is the wrapping for some
specific charts, like that bar

00:49:18.245 --> 00:49:21.609
chart where you have an image
emerging of the bar chart.

00:49:22.160 --> 00:49:26.249
We automatically send it using
post id the URL is long enough.

00:49:26.249 --> 00:49:30.130
And we have a generic image
chart visualization, which

00:49:30.130 --> 00:49:33.549
allows you to essentially do
whatever you like with the

00:49:33.549 --> 00:49:35.909
charts API and we wrap it
in the post request for

00:49:35.909 --> 00:49:38.029
you if it's too long.

00:49:38.029 --> 00:49:40.006
AUDIENCE: And so if I go
to the site I'll be able

00:49:40.006 --> 00:49:40.969
to see all of this?

00:49:40.969 --> 00:49:41.810
AMIT WEINSTEIN: Yeah,
search for Google Charts

00:49:41.810 --> 00:49:42.170
and you will see.

00:49:42.170 --> 00:49:42.499
AUDIENCE: Got you.

00:49:42.499 --> 00:49:42.994
Thanks.

00:49:42.994 --> 00:49:43.489
AMIT WEINSTEIN: No problem.

00:49:45.469 --> 00:49:48.300
AUDIENCE: OK, a little bit of
the same question that was

00:49:48.300 --> 00:49:52.689
asked a second ago, but a
little different spin.

00:49:52.689 --> 00:49:55.969
The APIs, they're all basically
you have to have anl internet

00:49:55.969 --> 00:50:00.739
connection to use them, is
there any plan in the future to

00:50:00.739 --> 00:50:02.139
maybe bundle these up in a SDK?

00:50:02.139 --> 00:50:04.629
Either the Android
SDK or the GWT SDK?

00:50:04.929 --> 00:50:08.619
MICHAEL FINK: No.

00:50:08.619 --> 00:50:11.069
AMIT WEINSTEIN: So currently
there is no plan to change the

00:50:11.069 --> 00:50:15.999
policy and we currently only
allow you to use it dynamically

00:50:15.999 --> 00:50:20.582
and load the current
version that we hold.

00:50:20.582 --> 00:50:24.669
MICHAEL FINK: Maybe I could
add a word about that.

00:50:25.309 --> 00:50:29.130
So I think our motivation
behind that policy is we really

00:50:29.130 --> 00:50:34.509
want to change the charts and
augment the gallery-- as I

00:50:34.509 --> 00:50:37.119
said earlier on-- like on a
weekly and monthly basis.

00:50:37.119 --> 00:50:41.799
So right now we were motivated
to have like one version of the

00:50:41.799 --> 00:50:46.150
library that we have a loader,
which is very fast and

00:50:46.150 --> 00:50:49.899
efficient and provides it if
you do have internet access.

00:50:49.899 --> 00:50:52.369
Once we will have to work with
many versions-- I mean, if we

00:50:52.369 --> 00:50:55.369
go to the offline scenario and
there are many live versions

00:50:55.369 --> 00:50:59.559
out there and there are many
bugs that were fixed, but that

00:50:59.559 --> 00:51:01.699
are being used by
older versions.

00:51:02.159 --> 00:51:05.419
It kind of bogs us down in our
capability to make rapid

00:51:05.419 --> 00:51:07.729
changes and to provide
new functionality.

00:51:07.729 --> 00:51:11.959
If however, that use case will
surface as a major use case for

00:51:11.959 --> 00:51:15.319
many people, whether it's on
the mobile community or any

00:51:15.319 --> 00:51:18.540
other community we'll obviously
reconsider that decision.

00:51:18.540 --> 00:51:20.419
But currently
that's our policy.

00:51:22.405 --> 00:51:28.121
AUDIENCE: Do you have a place
where we can see a roadmap?

00:51:29.089 --> 00:51:30.119
AMIT WEINSTEIN: Do we
have a place where you

00:51:30.119 --> 00:51:30.579
can see a roadmap?

00:51:30.579 --> 00:51:33.089
AUDIENCE: Yeah, do you have
plans to publish a roadmap?

00:51:34.599 --> 00:51:36.899
MICHAEL FINK: Obviously
internally we have a roadmap

00:51:36.899 --> 00:51:37.889
that we're working by.

00:51:38.859 --> 00:51:41.959
We usually are somewhat
hesitant about exposing

00:51:41.959 --> 00:51:47.980
this externally just
to an expectations.

00:51:47.980 --> 00:51:52.799
But what I could say as a
strategy is that we're

00:51:52.799 --> 00:51:57.569
committed to-- as Amit
mentioned earlier on-- to

00:51:57.569 --> 00:52:01.279
gradually migrate towards HTML
5 and make sure that a large

00:52:01.279 --> 00:52:03.249
percentage of our gallery
is available on purely

00:52:03.249 --> 00:52:06.359
HTML 5 visualizations.

00:52:07.399 --> 00:52:10.359
And I think that's kind
of one major strategy.

00:52:10.989 --> 00:52:16.710
Another one is to-- as Amit
said earlier on-- is to try to

00:52:16.710 --> 00:52:20.370
see where server side rendering
and sophisticated layout

00:52:20.370 --> 00:52:26.440
engines could provide clients
kind of a back end that is

00:52:26.440 --> 00:52:28.640
shifted over to the client and
then augmented with client

00:52:28.640 --> 00:52:29.890
side interactivity.

00:52:29.890 --> 00:52:35.170
So we saw a highly detailed
GeoMaps that do that already.

00:52:35.170 --> 00:52:39.189
We saw this new approach with
graphers that has the layout

00:52:39.189 --> 00:52:41.420
calculated in the back end and
then shipped to the client side

00:52:41.420 --> 00:52:43.740
and we will try to
do more of those.

00:52:43.740 --> 00:52:47.749
And I think that's where our
strength as Google that has

00:52:47.749 --> 00:52:55.100
both server side serving and
this JavaScript library could

00:52:55.100 --> 00:52:58.109
really come into play.

00:52:58.109 --> 00:53:03.849
AUDIENCE: And my last question
is, do you have any suggestions

00:53:03.849 --> 00:53:06.109
for dealing with
large data sets?

00:53:07.229 --> 00:53:10.069
Or is that just not
an option right now?

00:53:10.069 --> 00:53:11.769
AMIT WEINSTEIN: So
the question was--

00:53:11.769 --> 00:53:15.157
AUDIENCE: Too large to deal
with the process on the client.

00:53:15.157 --> 00:53:15.649
AMIT WEINSTEIN: What?

00:53:15.649 --> 00:53:17.754
AUDIENCE: Data set largely,
as I said, as in too large

00:53:17.754 --> 00:53:19.539
to process on the client.

00:53:19.539 --> 00:53:25.550
AMIT WEINSTEIN: So do we have
a strategy to maintain the

00:53:25.550 --> 00:53:29.311
data sets, whcih are larger
than the client can hold?

00:53:31.169 --> 00:53:36.809
I think that the visualization
cannot really represent

00:53:36.809 --> 00:53:39.849
something that a client
cannot hold in site.

00:53:39.849 --> 00:53:44.654
So if you choose the proper
visualization I think that you

00:53:44.654 --> 00:53:49.849
could be able to refine the
data for the visualization to

00:53:49.849 --> 00:53:52.760
really be small enough
in order to handle it

00:53:52.760 --> 00:53:54.639
in the client side.

00:53:54.639 --> 00:53:59.849
And I guess that my suggestion
is to make all the data

00:53:59.849 --> 00:54:02.650
manipulation either in the
remote data source or in the

00:54:02.650 --> 00:54:06.460
database itself in order to
really ship to the client

00:54:06.460 --> 00:54:10.090
the small essence of the
visualization that you want to

00:54:10.090 --> 00:54:12.278
eventually see in the browser.

00:54:15.689 --> 00:54:18.349
AUDIENCE: I guess you've
potentially answered this

00:54:18.349 --> 00:54:21.039
question already, are you
planning to add things like

00:54:21.039 --> 00:54:25.949
being able to scale maps and
regions of maps based on data?

00:54:25.949 --> 00:54:30.490
So that we can do areas that
have large populations show up

00:54:30.490 --> 00:54:34.369
large and areas that have small
populations are smaller even if

00:54:34.369 --> 00:54:37.199
they are geographically large,
is that something you're

00:54:37.199 --> 00:54:37.799
thinking of doing?

00:54:38.969 --> 00:54:41.909
MICHAEL FINK: That wasn't on
our immediate roadmap, but

00:54:41.909 --> 00:54:44.369
you're not the first to ask for
that, so we might reconsider

00:54:44.369 --> 00:54:48.079
and add that as you know, the
next visualization that will

00:54:48.079 --> 00:54:50.329
come out in the next
two or three months.

00:54:50.329 --> 00:54:53.609
AUDIENCE: And in a similar
vein, in the visual display

00:54:53.609 --> 00:54:56.859
of quantitative information
that Edward Tufte goes a bit

00:54:56.859 --> 00:54:58.559
further in removing pixels.

00:54:58.559 --> 00:55:02.049
Particularly from graph
axes and just showing

00:55:02.049 --> 00:55:04.699
the tics on data points.

00:55:04.699 --> 00:55:06.869
That's something I've always
wanted to see, but I've never

00:55:06.869 --> 00:55:08.939
found a graphing package
that will do it.

00:55:09.759 --> 00:55:12.009
Would you be interested
in considering that

00:55:12.009 --> 00:55:13.529
as an option as well?

00:55:13.529 --> 00:55:15.999
MICHAEL FINK: So there was
actually a blog post about two

00:55:15.999 --> 00:55:18.839
weeks ago that shows how
Tufte's recommendations could

00:55:18.839 --> 00:55:23.779
be fully implemented
using the chart API.

00:55:24.249 --> 00:55:27.819
Our new look and feel for the
interactive charts is very

00:55:27.819 --> 00:55:31.779
much inspired by Tufte's
recommendations.

00:55:31.779 --> 00:55:34.769
There are a few places where we
decided to do things

00:55:34.769 --> 00:55:38.729
differently, but we'll try to
add more and more a

00:55:38.729 --> 00:55:41.430
functionality that gives
options to kind of minimimalize

00:55:41.430 --> 00:55:44.370
the chart if you really want
to see only the crisp

00:55:44.370 --> 00:55:46.049
version of the data.

00:55:46.049 --> 00:55:46.539
AUDIENCE: Thank you.

00:55:46.539 --> 00:55:48.969
AMIT WEINSTEIN: I just want
to mention that we have an

00:55:48.969 --> 00:55:52.059
issue tracker and the
active is a group.

00:55:52.059 --> 00:55:54.869
So if you have requests it is
best to put them there so we

00:55:54.869 --> 00:55:57.760
have some documentation and we
can remember what the user

00:55:57.760 --> 00:55:59.590
really wants us to implement.

00:56:02.309 --> 00:56:05.359
AUDIENCE: Are there any
plans for a GWT library?

00:56:05.359 --> 00:56:05.889
AMIT WEINSTEIN: A what?

00:56:05.889 --> 00:56:06.109
AUDIENCE: GWT.

00:56:06.109 --> 00:56:06.459
MICHAEL FINK: G-W-T.

00:56:06.459 --> 00:56:07.529
AMIT WEINSTEIN: Oh, ok.

00:56:07.789 --> 00:56:13.549
So most of the charts are
already GWT integrated.

00:56:13.549 --> 00:56:18.079
And we also have in the
documentation some link

00:56:18.079 --> 00:56:19.990
saying which charts
are GWT integrated.

00:56:19.990 --> 00:56:26.079
And we try to extend the GWT
support that we have for

00:56:26.079 --> 00:56:28.079
new charts that we add.

00:56:28.079 --> 00:56:32.369
And please feel free to send
us requests if you have a

00:56:32.369 --> 00:56:33.989
visualization that you want
to use and they're

00:56:33.989 --> 00:56:34.890
not GWT enabled.

00:56:37.699 --> 00:56:38.329
MICHAEL FINK: Thank
you very, very much.

00:56:38.329 --> 00:56:43.329
AMIT WEINSTEIN: Thank you.

