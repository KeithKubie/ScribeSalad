WEBVTT
Kind: captions
Language: en

00:00:09.650 --> 00:00:13.160
all right thank you to everyone who got

00:00:13.160 --> 00:00:13.170
all right thank you to everyone who got
 

00:00:13.170 --> 00:00:15.530
all right thank you to everyone who got
up so early this beautiful Friday

00:00:15.530 --> 00:00:15.540
up so early this beautiful Friday
 

00:00:15.540 --> 00:00:17.570
up so early this beautiful Friday
morning after the fabulous party we had

00:00:17.570 --> 00:00:17.580
morning after the fabulous party we had
 

00:00:17.580 --> 00:00:19.910
morning after the fabulous party we had
last night and for everyone who is who

00:00:19.910 --> 00:00:19.920
last night and for everyone who is who
 

00:00:19.920 --> 00:00:21.890
last night and for everyone who is who
is attending virtually you know I'm

00:00:21.890 --> 00:00:21.900
is attending virtually you know I'm
 

00:00:21.900 --> 00:00:23.000
is attending virtually you know I'm
sorry you missed out out of it I'm sure

00:00:23.000 --> 00:00:23.010
sorry you missed out out of it I'm sure
 

00:00:23.010 --> 00:00:24.740
sorry you missed out out of it I'm sure
there's plenty of footage and video and

00:00:24.740 --> 00:00:24.750
there's plenty of footage and video and
 

00:00:24.750 --> 00:00:26.390
there's plenty of footage and video and
all this kind of stuff from that because

00:00:26.390 --> 00:00:26.400
all this kind of stuff from that because
 

00:00:26.400 --> 00:00:28.310
all this kind of stuff from that because
it was pretty fun and I'm sure people

00:00:28.310 --> 00:00:28.320
it was pretty fun and I'm sure people
 

00:00:28.320 --> 00:00:30.019
it was pretty fun and I'm sure people
are a little bleary-eyed so thank you to

00:00:30.019 --> 00:00:30.029
are a little bleary-eyed so thank you to
 

00:00:30.029 --> 00:00:32.690
are a little bleary-eyed so thank you to
the P to those so it's hardcore native

00:00:32.690 --> 00:00:32.700
the P to those so it's hardcore native
 

00:00:32.700 --> 00:00:37.310
the P to those so it's hardcore native
developers who came out here and let's

00:00:37.310 --> 00:00:37.320
developers who came out here and let's
 

00:00:37.320 --> 00:00:42.819
developers who came out here and let's
see this works I get lucky all right so

00:00:42.819 --> 00:00:42.829
see this works I get lucky all right so
 

00:00:42.829 --> 00:00:45.500
see this works I get lucky all right so
any capers in our world how many people

00:00:45.500 --> 00:00:45.510
any capers in our world how many people
 

00:00:45.510 --> 00:00:49.100
any capers in our world how many people
here are NDK developers all right this

00:00:49.100 --> 00:00:49.110
here are NDK developers all right this
 

00:00:49.110 --> 00:00:50.750
here are NDK developers all right this
is good this is good I'm excited to see

00:00:50.750 --> 00:00:50.760
is good this is good I'm excited to see
 

00:00:50.760 --> 00:00:52.729
is good this is good I'm excited to see
so many people out there who are doing

00:00:52.729 --> 00:00:52.739
so many people out there who are doing
 

00:00:52.739 --> 00:00:54.619
so many people out there who are doing
this this is a labor of love for me this

00:00:54.619 --> 00:00:54.629
this this is a labor of love for me this
 

00:00:54.629 --> 00:00:56.119
this this is a labor of love for me this
talk so I'm really glad you guys are

00:00:56.119 --> 00:00:56.129
talk so I'm really glad you guys are
 

00:00:56.129 --> 00:00:57.529
talk so I'm really glad you guys are
here and you know there's a lot of

00:00:57.529 --> 00:00:57.539
here and you know there's a lot of
 

00:00:57.539 --> 00:00:58.880
here and you know there's a lot of
Android development we get to just

00:00:58.880 --> 00:00:58.890
Android development we get to just
 

00:00:58.890 --> 00:01:01.369
Android development we get to just
blissfully ignore a lot of what's going

00:01:01.369 --> 00:01:01.379
blissfully ignore a lot of what's going
 

00:01:01.379 --> 00:01:02.840
blissfully ignore a lot of what's going
on in the operating system you know I

00:01:02.840 --> 00:01:02.850
on in the operating system you know I
 

00:01:02.850 --> 00:01:05.090
on in the operating system you know I
take the blue pill you don't really need

00:01:05.090 --> 00:01:05.100
take the blue pill you don't really need
 

00:01:05.100 --> 00:01:06.590
take the blue pill you don't really need
to know what's going on and how the

00:01:06.590 --> 00:01:06.600
to know what's going on and how the
 

00:01:06.600 --> 00:01:09.350
to know what's going on and how the
matrix is formed you just get to go and

00:01:09.350 --> 00:01:09.360
matrix is formed you just get to go and
 

00:01:09.360 --> 00:01:12.969
matrix is formed you just get to go and
code in a nice beautiful environment in

00:01:12.969 --> 00:01:12.979
code in a nice beautiful environment in
 

00:01:12.979 --> 00:01:15.350
code in a nice beautiful environment in
managed code but today we're actually

00:01:15.350 --> 00:01:15.360
managed code but today we're actually
 

00:01:15.360 --> 00:01:17.510
managed code but today we're actually
going to take the red pill we're gonna

00:01:17.510 --> 00:01:17.520
going to take the red pill we're gonna
 

00:01:17.520 --> 00:01:19.130
going to take the red pill we're gonna
get in a little bit inside to help

00:01:19.130 --> 00:01:19.140
get in a little bit inside to help
 

00:01:19.140 --> 00:01:21.920
get in a little bit inside to help
things work and I hope it's fun and and

00:01:21.920 --> 00:01:21.930
things work and I hope it's fun and and
 

00:01:21.930 --> 00:01:23.780
things work and I hope it's fun and and
it may whether or not it's useful or not

00:01:23.780 --> 00:01:23.790
it may whether or not it's useful or not
 

00:01:23.790 --> 00:01:25.640
it may whether or not it's useful or not
you can tell me but at least hopefully

00:01:25.640 --> 00:01:25.650
you can tell me but at least hopefully
 

00:01:25.650 --> 00:01:27.800
you can tell me but at least hopefully
we'll all learn something from this and

00:01:27.800 --> 00:01:27.810
we'll all learn something from this and
 

00:01:27.810 --> 00:01:29.270
we'll all learn something from this and
of course I'm talking about native code

00:01:29.270 --> 00:01:29.280
of course I'm talking about native code
 

00:01:29.280 --> 00:01:31.100
of course I'm talking about native code
I'm referred for furring and

00:01:31.100 --> 00:01:31.110
I'm referred for furring and
 

00:01:31.110 --> 00:01:32.510
I'm referred for furring and
specifically the unmanaged code does not

00:01:32.510 --> 00:01:32.520
specifically the unmanaged code does not
 

00:01:32.520 --> 00:01:34.520
specifically the unmanaged code does not
use the Android runtime and one of the

00:01:34.520 --> 00:01:34.530
use the Android runtime and one of the
 

00:01:34.530 --> 00:01:35.780
use the Android runtime and one of the
primary reasons that people end up

00:01:35.780 --> 00:01:35.790
primary reasons that people end up
 

00:01:35.790 --> 00:01:37.550
primary reasons that people end up
creating this code is if they already

00:01:37.550 --> 00:01:37.560
creating this code is if they already
 

00:01:37.560 --> 00:01:39.170
creating this code is if they already
have a bunch of working C code you know

00:01:39.170 --> 00:01:39.180
have a bunch of working C code you know
 

00:01:39.180 --> 00:01:40.760
have a bunch of working C code you know
when you have a lot of code that works

00:01:40.760 --> 00:01:40.770
when you have a lot of code that works
 

00:01:40.770 --> 00:01:42.859
when you have a lot of code that works
you create new code you just create bugs

00:01:42.859 --> 00:01:42.869
you create new code you just create bugs
 

00:01:42.869 --> 00:01:45.020
you create new code you just create bugs
no one wants to do that now of course

00:01:45.020 --> 00:01:45.030
no one wants to do that now of course
 

00:01:45.030 --> 00:01:47.749
no one wants to do that now of course
your legacy code might not include

00:01:47.749 --> 00:01:47.759
your legacy code might not include
 

00:01:47.759 --> 00:01:49.639
your legacy code might not include
support for really you know awesome

00:01:49.639 --> 00:01:49.649
support for really you know awesome
 

00:01:49.649 --> 00:01:52.340
support for really you know awesome
multi-processing or might have you know

00:01:52.340 --> 00:01:52.350
multi-processing or might have you know
 

00:01:52.350 --> 00:01:54.530
multi-processing or might have you know
not have support for neon intrinsic so

00:01:54.530 --> 00:01:54.540
not have support for neon intrinsic so
 

00:01:54.540 --> 00:01:55.670
not have support for neon intrinsic so
even though it's awesome that you have

00:01:55.670 --> 00:01:55.680
even though it's awesome that you have
 

00:01:55.680 --> 00:01:57.230
even though it's awesome that you have
this legacy code you're not always

00:01:57.230 --> 00:01:57.240
this legacy code you're not always
 

00:01:57.240 --> 00:01:58.490
this legacy code you're not always
guaranteed to get the best performance

00:01:58.490 --> 00:01:58.500
guaranteed to get the best performance
 

00:01:58.500 --> 00:02:01.999
guaranteed to get the best performance
with it that being said performance

00:02:01.999 --> 00:02:02.009
with it that being said performance
 

00:02:02.009 --> 00:02:03.830
with it that being said performance
there's a lot of people who write NDK

00:02:03.830 --> 00:02:03.840
there's a lot of people who write NDK
 

00:02:03.840 --> 00:02:05.030
there's a lot of people who write NDK
code for performance reasons how many

00:02:05.030 --> 00:02:05.040
code for performance reasons how many
 

00:02:05.040 --> 00:02:06.260
code for performance reasons how many
people are doing it for performance

00:02:06.260 --> 00:02:06.270
people are doing it for performance
 

00:02:06.270 --> 00:02:07.210
people are doing it for performance
reasons out there

00:02:07.210 --> 00:02:07.220
reasons out there
 

00:02:07.220 --> 00:02:08.980
reasons out there
how about how about cross-platform

00:02:08.980 --> 00:02:08.990
how about how about cross-platform
 

00:02:08.990 --> 00:02:10.690
how about how about cross-platform
compatibility Lemieux says to show of

00:02:10.690 --> 00:02:10.700
compatibility Lemieux says to show of
 

00:02:10.700 --> 00:02:12.970
compatibility Lemieux says to show of
hands okay so it's about about the same

00:02:12.970 --> 00:02:12.980
hands okay so it's about about the same
 

00:02:12.980 --> 00:02:15.640
hands okay so it's about about the same
and a lot of that means to get the best

00:02:15.640 --> 00:02:15.650
and a lot of that means to get the best
 

00:02:15.650 --> 00:02:16.660
and a lot of that means to get the best
performance though you need to know

00:02:16.660 --> 00:02:16.670
performance though you need to know
 

00:02:16.670 --> 00:02:18.040
performance though you need to know
about things like the number of types of

00:02:18.040 --> 00:02:18.050
about things like the number of types of
 

00:02:18.050 --> 00:02:19.990
about things like the number of types of
cores you know thermals

00:02:19.990 --> 00:02:20.000
cores you know thermals
 

00:02:20.000 --> 00:02:21.940
cores you know thermals
in the design like there's a lot of

00:02:21.940 --> 00:02:21.950
in the design like there's a lot of
 

00:02:21.950 --> 00:02:23.440
in the design like there's a lot of
different variables to actually making

00:02:23.440 --> 00:02:23.450
different variables to actually making
 

00:02:23.450 --> 00:02:24.970
different variables to actually making
sure you have you know the best

00:02:24.970 --> 00:02:24.980
sure you have you know the best
 

00:02:24.980 --> 00:02:27.220
sure you have you know the best
performance but oftentimes native code

00:02:27.220 --> 00:02:27.230
performance but oftentimes native code
 

00:02:27.230 --> 00:02:28.180
performance but oftentimes native code
is your only option

00:02:28.180 --> 00:02:28.190
is your only option
 

00:02:28.190 --> 00:02:29.710
is your only option
and of course reach you want to build

00:02:29.710 --> 00:02:29.720
and of course reach you want to build
 

00:02:29.720 --> 00:02:32.110
and of course reach you want to build
and hit multiple platforms and C++ is

00:02:32.110 --> 00:02:32.120
and hit multiple platforms and C++ is
 

00:02:32.120 --> 00:02:33.370
and hit multiple platforms and C++ is
just getting better and better at

00:02:33.370 --> 00:02:33.380
just getting better and better at
 

00:02:33.380 --> 00:02:35.350
just getting better and better at
isolating the operating system for you

00:02:35.350 --> 00:02:35.360
isolating the operating system for you
 

00:02:35.360 --> 00:02:36.220
isolating the operating system for you
which is awesome

00:02:36.220 --> 00:02:36.230
which is awesome
 

00:02:36.230 --> 00:02:40.570
which is awesome
and finally the NDK has a few

00:02:40.570 --> 00:02:40.580
and finally the NDK has a few
 

00:02:40.580 --> 00:02:42.430
and finally the NDK has a few
capabilities aren't yet available inside

00:02:42.430 --> 00:02:42.440
capabilities aren't yet available inside
 

00:02:42.440 --> 00:02:44.260
capabilities aren't yet available inside
of the runtime now what I'm excited

00:02:44.260 --> 00:02:44.270
of the runtime now what I'm excited
 

00:02:44.270 --> 00:02:45.850
of the runtime now what I'm excited
about is that actually if you look you

00:02:45.850 --> 00:02:45.860
about is that actually if you look you
 

00:02:45.860 --> 00:02:49.180
about is that actually if you look you
know up when I wrote this talk you had

00:02:49.180 --> 00:02:49.190
know up when I wrote this talk you had
 

00:02:49.190 --> 00:02:51.640
know up when I wrote this talk you had
to actually to get low latency audio you

00:02:51.640 --> 00:02:51.650
to actually to get low latency audio you
 

00:02:51.650 --> 00:02:53.830
to actually to get low latency audio you
had to use open SL and if you want to

00:02:53.830 --> 00:02:53.840
had to use open SL and if you want to
 

00:02:53.840 --> 00:02:55.630
had to use open SL and if you want to
get the absolute lowest latency audio

00:02:55.630 --> 00:02:55.640
get the absolute lowest latency audio
 

00:02:55.640 --> 00:02:57.430
get the absolute lowest latency audio
you still need to use that but I'm

00:02:57.430 --> 00:02:57.440
you still need to use that but I'm
 

00:02:57.440 --> 00:02:59.410
you still need to use that but I'm
really excited that and then in Android

00:02:59.410 --> 00:02:59.420
really excited that and then in Android
 

00:02:59.420 --> 00:03:00.940
really excited that and then in Android
n we actually are now allowing people to

00:03:00.940 --> 00:03:00.950
n we actually are now allowing people to
 

00:03:00.950 --> 00:03:03.790
n we actually are now allowing people to
use Java to get pretty darn good latency

00:03:03.790 --> 00:03:03.800
use Java to get pretty darn good latency
 

00:03:03.800 --> 00:03:05.740
use Java to get pretty darn good latency
on their devices and of course it's the

00:03:05.740 --> 00:03:05.750
on their devices and of course it's the
 

00:03:05.750 --> 00:03:07.930
on their devices and of course it's the
only way to access Vulcan the graphics

00:03:07.930 --> 00:03:07.940
only way to access Vulcan the graphics
 

00:03:07.940 --> 00:03:09.550
only way to access Vulcan the graphics
API right now and that just makes a lot

00:03:09.550 --> 00:03:09.560
API right now and that just makes a lot
 

00:03:09.560 --> 00:03:11.140
API right now and that just makes a lot
of sense and University however Vulcan

00:03:11.140 --> 00:03:11.150
of sense and University however Vulcan
 

00:03:11.150 --> 00:03:12.370
of sense and University however Vulcan
is you definitely don't want to be

00:03:12.370 --> 00:03:12.380
is you definitely don't want to be
 

00:03:12.380 --> 00:03:13.960
is you definitely don't want to be
making that many J&amp;I calls if you don't

00:03:13.960 --> 00:03:13.970
making that many J&amp;I calls if you don't
 

00:03:13.970 --> 00:03:18.460
making that many J&amp;I calls if you don't
have to not that it doesn't work so this

00:03:18.460 --> 00:03:18.470
have to not that it doesn't work so this
 

00:03:18.470 --> 00:03:20.080
have to not that it doesn't work so this
is probably review of you for you a lot

00:03:20.080 --> 00:03:20.090
is probably review of you for you a lot
 

00:03:20.090 --> 00:03:21.250
is probably review of you for you a lot
of you since you're all indicate people

00:03:21.250 --> 00:03:21.260
of you since you're all indicate people
 

00:03:21.260 --> 00:03:22.960
of you since you're all indicate people
what exactly is it you know it's a

00:03:22.960 --> 00:03:22.970
what exactly is it you know it's a
 

00:03:22.970 --> 00:03:24.610
what exactly is it you know it's a
combination of tools and headers that

00:03:24.610 --> 00:03:24.620
combination of tools and headers that
 

00:03:24.620 --> 00:03:26.710
combination of tools and headers that
allow and Android development you know

00:03:26.710 --> 00:03:26.720
allow and Android development you know
 

00:03:26.720 --> 00:03:28.780
allow and Android development you know
all applications are eventually tied to

00:03:28.780 --> 00:03:28.790
all applications are eventually tied to
 

00:03:28.790 --> 00:03:30.160
all applications are eventually tied to
manage code running in the Android

00:03:30.160 --> 00:03:30.170
manage code running in the Android
 

00:03:30.170 --> 00:03:32.140
manage code running in the Android
runtime and the android framework itself

00:03:32.140 --> 00:03:32.150
runtime and the android framework itself
 

00:03:32.150 --> 00:03:34.570
runtime and the android framework itself
is written largely in managed code your

00:03:34.570 --> 00:03:34.580
is written largely in managed code your
 

00:03:34.580 --> 00:03:36.699
is written largely in managed code your
live arrays are ultimately loaded into

00:03:36.699 --> 00:03:36.709
live arrays are ultimately loaded into
 

00:03:36.709 --> 00:03:38.590
live arrays are ultimately loaded into
this framework typically from within

00:03:38.590 --> 00:03:38.600
this framework typically from within
 

00:03:38.600 --> 00:03:40.570
this framework typically from within
Java code and they all get to talk to a

00:03:40.570 --> 00:03:40.580
Java code and they all get to talk to a
 

00:03:40.580 --> 00:03:42.300
Java code and they all get to talk to a
stable application binary interface

00:03:42.300 --> 00:03:42.310
stable application binary interface
 

00:03:42.310 --> 00:03:44.590
stable application binary interface
which then of course talks to the native

00:03:44.590 --> 00:03:44.600
which then of course talks to the native
 

00:03:44.600 --> 00:03:46.000
which then of course talks to the native
system libraries and this is important

00:03:46.000 --> 00:03:46.010
system libraries and this is important
 

00:03:46.010 --> 00:03:47.680
system libraries and this is important
there's a lot of people are like well

00:03:47.680 --> 00:03:47.690
there's a lot of people are like well
 

00:03:47.690 --> 00:03:49.060
there's a lot of people are like well
why can't I just use all those other

00:03:49.060 --> 00:03:49.070
why can't I just use all those other
 

00:03:49.070 --> 00:03:50.710
why can't I just use all those other
libraries that are there and people have

00:03:50.710 --> 00:03:50.720
libraries that are there and people have
 

00:03:50.720 --> 00:03:53.170
libraries that are there and people have
done this and and that's why

00:03:53.170 --> 00:03:53.180
done this and and that's why
 

00:03:53.180 --> 00:03:55.570
done this and and that's why
compatibility breaks and we're actually

00:03:55.570 --> 00:03:55.580
compatibility breaks and we're actually
 

00:03:55.580 --> 00:03:56.740
compatibility breaks and we're actually
one of the things that we've added to

00:03:56.740 --> 00:03:56.750
one of the things that we've added to
 

00:03:56.750 --> 00:03:59.770
one of the things that we've added to
end is if you actually try to use any of

00:03:59.770 --> 00:03:59.780
end is if you actually try to use any of
 

00:03:59.780 --> 00:04:01.509
end is if you actually try to use any of
those internal libraries they will not

00:04:01.509 --> 00:04:01.519
those internal libraries they will not
 

00:04:01.519 --> 00:04:02.949
those internal libraries they will not
work anymore we actually have separate

00:04:02.949 --> 00:04:02.959
work anymore we actually have separate
 

00:04:02.959 --> 00:04:04.750
work anymore we actually have separate
link spaces so there's good and bad news

00:04:04.750 --> 00:04:04.760
link spaces so there's good and bad news
 

00:04:04.760 --> 00:04:06.280
link spaces so there's good and bad news
to this the bad news is you're actually

00:04:06.280 --> 00:04:06.290
to this the bad news is you're actually
 

00:04:06.290 --> 00:04:08.710
to this the bad news is you're actually
to have to put things like Lib PNG into

00:04:08.710 --> 00:04:08.720
to have to put things like Lib PNG into
 

00:04:08.720 --> 00:04:10.900
to have to put things like Lib PNG into
your app the good news is when you put

00:04:10.900 --> 00:04:10.910
your app the good news is when you put
 

00:04:10.910 --> 00:04:13.120
your app the good news is when you put
them into your app you're guaranteed to

00:04:13.120 --> 00:04:13.130
them into your app you're guaranteed to
 

00:04:13.130 --> 00:04:15.760
them into your app you're guaranteed to
get your version of Lib PNG on Android

00:04:15.760 --> 00:04:15.770
get your version of Lib PNG on Android
 

00:04:15.770 --> 00:04:17.740
get your version of Lib PNG on Android
and above while on previous versions of

00:04:17.740 --> 00:04:17.750
and above while on previous versions of
 

00:04:17.750 --> 00:04:19.089
and above while on previous versions of
Android that was not always the case

00:04:19.089 --> 00:04:19.099
Android that was not always the case
 

00:04:19.099 --> 00:04:20.150
Android that was not always the case
so I think in a way

00:04:20.150 --> 00:04:20.160
so I think in a way
 

00:04:20.160 --> 00:04:25.220
so I think in a way
solves a lot of problems all right so

00:04:25.220 --> 00:04:25.230
solves a lot of problems all right so
 

00:04:25.230 --> 00:04:27.560
solves a lot of problems all right so
it's grown over the years and you know

00:04:27.560 --> 00:04:27.570
it's grown over the years and you know
 

00:04:27.570 --> 00:04:30.020
it's grown over the years and you know
it started off in cupcake and we added

00:04:30.020 --> 00:04:30.030
it started off in cupcake and we added
 

00:04:30.030 --> 00:04:32.000
it started off in cupcake and we added
you know media futures and gaming

00:04:32.000 --> 00:04:32.010
you know media futures and gaming
 

00:04:32.010 --> 00:04:34.700
you know media futures and gaming
features and the ability to do you know

00:04:34.700 --> 00:04:34.710
features and the ability to do you know
 

00:04:34.710 --> 00:04:36.620
features and the ability to do you know
fully native applications

00:04:36.620 --> 00:04:36.630
fully native applications
 

00:04:36.630 --> 00:04:37.910
fully native applications
you know it's lots of cool stuff

00:04:37.910 --> 00:04:37.920
you know it's lots of cool stuff
 

00:04:37.920 --> 00:04:40.310
you know it's lots of cool stuff
recently however we've actually you know

00:04:40.310 --> 00:04:40.320
recently however we've actually you know
 

00:04:40.320 --> 00:04:41.720
recently however we've actually you know
gone even further we've we've actually

00:04:41.720 --> 00:04:41.730
gone even further we've we've actually
 

00:04:41.730 --> 00:04:43.700
gone even further we've we've actually
put renderscript finally into the NDK so

00:04:43.700 --> 00:04:43.710
put renderscript finally into the NDK so
 

00:04:43.710 --> 00:04:45.350
put renderscript finally into the NDK so
they're bindings for that we've

00:04:45.350 --> 00:04:45.360
they're bindings for that we've
 

00:04:45.360 --> 00:04:47.750
they're bindings for that we've
continued to expand graphics with Vulcan

00:04:47.750 --> 00:04:47.760
continued to expand graphics with Vulcan
 

00:04:47.760 --> 00:04:49.070
continued to expand graphics with Vulcan
and we've hadded a couple of really

00:04:49.070 --> 00:04:49.080
and we've hadded a couple of really
 

00:04:49.080 --> 00:04:51.110
and we've hadded a couple of really
interesting ones in the latest versions

00:04:51.110 --> 00:04:51.120
interesting ones in the latest versions
 

00:04:51.120 --> 00:04:52.570
interesting ones in the latest versions
of the NDK we've added trace

00:04:52.570 --> 00:04:52.580
of the NDK we've added trace
 

00:04:52.580 --> 00:04:54.440
of the NDK we've added trace
choreographer and multi network and at

00:04:54.440 --> 00:04:54.450
choreographer and multi network and at
 

00:04:54.450 --> 00:04:55.490
choreographer and multi network and at
least I'm going to talk a little bit

00:04:55.490 --> 00:04:55.500
least I'm going to talk a little bit
 

00:04:55.500 --> 00:04:57.230
least I'm going to talk a little bit
about trace and choreographer in this

00:04:57.230 --> 00:04:57.240
about trace and choreographer in this
 

00:04:57.240 --> 00:05:00.560
about trace and choreographer in this
one so in addition the NDK toolchain

00:05:00.560 --> 00:05:00.570
one so in addition the NDK toolchain
 

00:05:00.570 --> 00:05:02.510
one so in addition the NDK toolchain
which is separate from platform releases

00:05:02.510 --> 00:05:02.520
which is separate from platform releases
 

00:05:02.520 --> 00:05:05.570
which is separate from platform releases
has its own set of 12 major releases and

00:05:05.570 --> 00:05:05.580
has its own set of 12 major releases and
 

00:05:05.580 --> 00:05:07.490
has its own set of 12 major releases and
many minor releases 12 just came out

00:05:07.490 --> 00:05:07.500
many minor releases 12 just came out
 

00:05:07.500 --> 00:05:08.840
many minor releases 12 just came out
this week if you haven't seen it and

00:05:08.840 --> 00:05:08.850
this week if you haven't seen it and
 

00:05:08.850 --> 00:05:10.580
this week if you haven't seen it and
here are some of the highlights we added

00:05:10.580 --> 00:05:10.590
here are some of the highlights we added
 

00:05:10.590 --> 00:05:12.920
here are some of the highlights we added
STL pretty early on and then we fixed it

00:05:12.920 --> 00:05:12.930
STL pretty early on and then we fixed it
 

00:05:12.930 --> 00:05:15.380
STL pretty early on and then we fixed it
yeah there we add more platforms like

00:05:15.380 --> 00:05:15.390
yeah there we add more platforms like
 

00:05:15.390 --> 00:05:18.110
yeah there we add more platforms like
x86 and MIPS we added the claim compiler

00:05:18.110 --> 00:05:18.120
x86 and MIPS we added the claim compiler
 

00:05:18.120 --> 00:05:21.860
x86 and MIPS we added the claim compiler
in 8c and the misunderstood arm 7fp and

00:05:21.860 --> 00:05:21.870
in 8c and the misunderstood arm 7fp and
 

00:05:21.870 --> 00:05:24.470
in 8c and the misunderstood arm 7fp and
90 which we are actually taking out of

00:05:24.470 --> 00:05:24.480
90 which we are actually taking out of
 

00:05:24.480 --> 00:05:26.180
90 which we are actually taking out of
NDK level 12

00:05:26.180 --> 00:05:26.190
NDK level 12
 

00:05:26.190 --> 00:05:30.440
NDK level 12
so 64-bit in 10 and 11 we finally

00:05:30.440 --> 00:05:30.450
so 64-bit in 10 and 11 we finally
 

00:05:30.450 --> 00:05:31.940
so 64-bit in 10 and 11 we finally
transitioned to clang as our primary

00:05:31.940 --> 00:05:31.950
transitioned to clang as our primary
 

00:05:31.950 --> 00:05:33.620
transitioned to clang as our primary
compiler we've actually deprecated the

00:05:33.620 --> 00:05:33.630
compiler we've actually deprecated the
 

00:05:33.630 --> 00:05:36.230
compiler we've actually deprecated the
use of GCC and a middle there we moved

00:05:36.230 --> 00:05:36.240
use of GCC and a middle there we moved
 

00:05:36.240 --> 00:05:38.720
use of GCC and a middle there we moved
to lldp as our primary debugger but

00:05:38.720 --> 00:05:38.730
to lldp as our primary debugger but
 

00:05:38.730 --> 00:05:40.490
to lldp as our primary debugger but
again this talk isn't just about the NDK

00:05:40.490 --> 00:05:40.500
again this talk isn't just about the NDK
 

00:05:40.500 --> 00:05:43.940
again this talk isn't just about the NDK
it's also about art so what I did was I

00:05:43.940 --> 00:05:43.950
it's also about art so what I did was I
 

00:05:43.950 --> 00:05:46.040
it's also about art so what I did was I
was really curious like art is a totally

00:05:46.040 --> 00:05:46.050
was really curious like art is a totally
 

00:05:46.050 --> 00:05:47.540
was really curious like art is a totally
different beast than our previous

00:05:47.540 --> 00:05:47.550
different beast than our previous
 

00:05:47.550 --> 00:05:50.960
different beast than our previous
runtime so how does it affect the NDK

00:05:50.960 --> 00:05:50.970
runtime so how does it affect the NDK
 

00:05:50.970 --> 00:05:53.930
runtime so how does it affect the NDK
and so what I did is I went through the

00:05:53.930 --> 00:05:53.940
and so what I did is I went through the
 

00:05:53.940 --> 00:05:55.520
and so what I did is I went through the
perf Jan I article I mean probably

00:05:55.520 --> 00:05:55.530
perf Jan I article I mean probably
 

00:05:55.530 --> 00:05:57.380
perf Jan I article I mean probably
everyone's read this perf j'ni article

00:05:57.380 --> 00:05:57.390
everyone's read this perf j'ni article
 

00:05:57.390 --> 00:05:59.210
everyone's read this perf j'ni article
right like yeah or if you haven't you

00:05:59.210 --> 00:05:59.220
right like yeah or if you haven't you
 

00:05:59.220 --> 00:06:01.670
right like yeah or if you haven't you
really should because the real question

00:06:01.670 --> 00:06:01.680
really should because the real question
 

00:06:01.680 --> 00:06:04.490
really should because the real question
I wanted to know was do these tips

00:06:04.490 --> 00:06:04.500
I wanted to know was do these tips
 

00:06:04.500 --> 00:06:07.420
I wanted to know was do these tips
actually make sense in an art world and

00:06:07.420 --> 00:06:07.430
actually make sense in an art world and
 

00:06:07.430 --> 00:06:09.980
actually make sense in an art world and
so we're gonna keep a scorecard for both

00:06:09.980 --> 00:06:09.990
so we're gonna keep a scorecard for both
 

00:06:09.990 --> 00:06:12.080
so we're gonna keep a scorecard for both
are involving for each one of these tips

00:06:12.080 --> 00:06:12.090
are involving for each one of these tips
 

00:06:12.090 --> 00:06:14.480
are involving for each one of these tips
and so we and so let's let's go through

00:06:14.480 --> 00:06:14.490
and so we and so let's let's go through
 

00:06:14.490 --> 00:06:16.670
and so we and so let's let's go through
them and and we're gonna benchmark these

00:06:16.670 --> 00:06:16.680
them and and we're gonna benchmark these
 

00:06:16.680 --> 00:06:17.990
them and and we're gonna benchmark these
I actually benchmark these with Google

00:06:17.990 --> 00:06:18.000
I actually benchmark these with Google
 

00:06:18.000 --> 00:06:19.280
I actually benchmark these with Google
caliper which is pretty cool it's

00:06:19.280 --> 00:06:19.290
caliper which is pretty cool it's
 

00:06:19.290 --> 00:06:21.260
caliper which is pretty cool it's
actually what we use inside of our CTS

00:06:21.260 --> 00:06:21.270
actually what we use inside of our CTS
 

00:06:21.270 --> 00:06:22.940
actually what we use inside of our CTS
tests for all of our benchmark marking

00:06:22.940 --> 00:06:22.950
tests for all of our benchmark marking
 

00:06:22.950 --> 00:06:24.740
tests for all of our benchmark marking
so it's about as good as you can get we

00:06:24.740 --> 00:06:24.750
so it's about as good as you can get we
 

00:06:24.750 --> 00:06:26.480
so it's about as good as you can get we
use it a lot internally of Google for

00:06:26.480 --> 00:06:26.490
use it a lot internally of Google for
 

00:06:26.490 --> 00:06:27.830
use it a lot internally of Google for
doing all sorts of benchmarking so if

00:06:27.830 --> 00:06:27.840
doing all sorts of benchmarking so if
 

00:06:27.840 --> 00:06:29.270
doing all sorts of benchmarking so if
you ever want to set it up it's actually

00:06:29.270 --> 00:06:29.280
you ever want to set it up it's actually
 

00:06:29.280 --> 00:06:30.710
you ever want to set it up it's actually
pretty cool you'll learn a little bit

00:06:30.710 --> 00:06:30.720
pretty cool you'll learn a little bit
 

00:06:30.720 --> 00:06:31.969
pretty cool you'll learn a little bit
about Android just setting this thing up

00:06:31.969 --> 00:06:31.979
about Android just setting this thing up
 

00:06:31.979 --> 00:06:33.320
about Android just setting this thing up
hopefully we'll make it more user

00:06:33.320 --> 00:06:33.330
hopefully we'll make it more user
 

00:06:33.330 --> 00:06:33.710
hopefully we'll make it more user
friendly

00:06:33.710 --> 00:06:33.720
friendly
 

00:06:33.720 --> 00:06:37.400
friendly
at some point in the future and to the

00:06:37.400 --> 00:06:37.410
at some point in the future and to the
 

00:06:37.410 --> 00:06:40.520
at some point in the future and to the
basics when you're using j'ni to

00:06:40.520 --> 00:06:40.530
basics when you're using j'ni to
 

00:06:40.530 --> 00:06:42.410
basics when you're using j'ni to
reference manage objects you're actually

00:06:42.410 --> 00:06:42.420
reference manage objects you're actually
 

00:06:42.420 --> 00:06:45.020
reference manage objects you're actually
taking advantage of reflection and named

00:06:45.020 --> 00:06:45.030
taking advantage of reflection and named
 

00:06:45.030 --> 00:06:46.700
taking advantage of reflection and named
of course because it allow it describes

00:06:46.700 --> 00:06:46.710
of course because it allow it describes
 

00:06:46.710 --> 00:06:48.470
of course because it allow it describes
the ability for code to inspect itself

00:06:48.470 --> 00:06:48.480
the ability for code to inspect itself
 

00:06:48.480 --> 00:06:50.720
the ability for code to inspect itself
at one time now to access a class field

00:06:50.720 --> 00:06:50.730
at one time now to access a class field
 

00:06:50.730 --> 00:06:52.490
at one time now to access a class field
we take the object reference for the

00:06:52.490 --> 00:06:52.500
we take the object reference for the
 

00:06:52.500 --> 00:06:53.990
we take the object reference for the
class and use reflection request the

00:06:53.990 --> 00:06:54.000
class and use reflection request the
 

00:06:54.000 --> 00:06:58.130
class and use reflection request the
field ID my name okay and from our

00:06:58.130 --> 00:06:58.140
field ID my name okay and from our
 

00:06:58.140 --> 00:06:59.600
field ID my name okay and from our
developer training here's what it says

00:06:59.600 --> 00:06:59.610
developer training here's what it says
 

00:06:59.610 --> 00:07:03.230
developer training here's what it says
it is important to class do cache class

00:07:03.230 --> 00:07:03.240
it is important to class do cache class
 

00:07:03.240 --> 00:07:05.030
it is important to class do cache class
references field IDs and method IDs

00:07:05.030 --> 00:07:05.040
references field IDs and method IDs
 

00:07:05.040 --> 00:07:06.560
references field IDs and method IDs
because they are guaranteed valid until

00:07:06.560 --> 00:07:06.570
because they are guaranteed valid until
 

00:07:06.570 --> 00:07:08.450
because they are guaranteed valid until
the class is unloaded and that really

00:07:08.450 --> 00:07:08.460
the class is unloaded and that really
 

00:07:08.460 --> 00:07:10.070
the class is unloaded and that really
happen rarely happens that it's really

00:07:10.070 --> 00:07:10.080
happen rarely happens that it's really
 

00:07:10.080 --> 00:07:12.350
happen rarely happens that it's really
easy to catch it it does so let's look

00:07:12.350 --> 00:07:12.360
easy to catch it it does so let's look
 

00:07:12.360 --> 00:07:15.020
easy to catch it it does so let's look
at our first performance suggestion and

00:07:15.020 --> 00:07:15.030
at our first performance suggestion and
 

00:07:15.030 --> 00:07:17.780
at our first performance suggestion and
how it holds up under art so a nice way

00:07:17.780 --> 00:07:17.790
how it holds up under art so a nice way
 

00:07:17.790 --> 00:07:19.760
how it holds up under art so a nice way
to catch these IDs which nicely solve

00:07:19.760 --> 00:07:19.770
to catch these IDs which nicely solve
 

00:07:19.770 --> 00:07:21.410
to catch these IDs which nicely solve
the unload problem is just to put it in

00:07:21.410 --> 00:07:21.420
the unload problem is just to put it in
 

00:07:21.420 --> 00:07:23.390
the unload problem is just to put it in
the static initializer so there you go

00:07:23.390 --> 00:07:23.400
the static initializer so there you go
 

00:07:23.400 --> 00:07:24.920
the static initializer so there you go
you know you go you called me like this

00:07:24.920 --> 00:07:24.930
you know you go you called me like this
 

00:07:24.930 --> 00:07:26.840
you know you go you called me like this
one needed the NIT inside of that you

00:07:26.840 --> 00:07:26.850
one needed the NIT inside of that you
 

00:07:26.850 --> 00:07:28.730
one needed the NIT inside of that you
get all of your field IDs so as you see

00:07:28.730 --> 00:07:28.740
get all of your field IDs so as you see
 

00:07:28.740 --> 00:07:30.350
get all of your field IDs so as you see
I'm making a native call inside of my

00:07:30.350 --> 00:07:30.360
I'm making a native call inside of my
 

00:07:30.360 --> 00:07:31.820
I'm making a native call inside of my
static initializer which is kind of

00:07:31.820 --> 00:07:31.830
static initializer which is kind of
 

00:07:31.830 --> 00:07:33.320
static initializer which is kind of
slick right after loading the library

00:07:33.320 --> 00:07:33.330
slick right after loading the library
 

00:07:33.330 --> 00:07:36.800
slick right after loading the library
and now those IDs are good forever so

00:07:36.800 --> 00:07:36.810
and now those IDs are good forever so
 

00:07:36.810 --> 00:07:38.300
and now those IDs are good forever so
it's really nice if the class gets and

00:07:38.300 --> 00:07:38.310
it's really nice if the class gets and
 

00:07:38.310 --> 00:07:40.190
it's really nice if the class gets and
loaded the static library initialize

00:07:40.190 --> 00:07:40.200
loaded the static library initialize
 

00:07:40.200 --> 00:07:43.070
loaded the static library initialize
it'll get calls again and here's how it

00:07:43.070 --> 00:07:43.080
it'll get calls again and here's how it
 

00:07:43.080 --> 00:07:45.530
it'll get calls again and here's how it
benchmarks and it turns out and these

00:07:45.530 --> 00:07:45.540
benchmarks and it turns out and these
 

00:07:45.540 --> 00:07:47.030
benchmarks and it turns out and these
now this is the Nexus 5 running KitKat

00:07:47.030 --> 00:07:47.040
now this is the Nexus 5 running KitKat
 

00:07:47.040 --> 00:07:48.980
now this is the Nexus 5 running KitKat
akin marshmallow but if we can see both

00:07:48.980 --> 00:07:48.990
akin marshmallow but if we can see both
 

00:07:48.990 --> 00:07:50.480
akin marshmallow but if we can see both
get field ID and get in field are

00:07:50.480 --> 00:07:50.490
get field ID and get in field are
 

00:07:50.490 --> 00:07:52.640
get field ID and get in field are
actually slower in art in other words

00:07:52.640 --> 00:07:52.650
actually slower in art in other words
 

00:07:52.650 --> 00:07:54.740
actually slower in art in other words
the advice to cache field and Method IDs

00:07:54.740 --> 00:07:54.750
the advice to cache field and Method IDs
 

00:07:54.750 --> 00:07:56.810
the advice to cache field and Method IDs
is actually more important in the world

00:07:56.810 --> 00:07:56.820
is actually more important in the world
 

00:07:56.820 --> 00:07:58.190
is actually more important in the world
of art than it was in the world of

00:07:58.190 --> 00:07:58.200
of art than it was in the world of
 

00:07:58.200 --> 00:08:00.230
of art than it was in the world of
Dobbin and we'll see we'll see a trend

00:08:00.230 --> 00:08:00.240
Dobbin and we'll see we'll see a trend
 

00:08:00.240 --> 00:08:02.390
Dobbin and we'll see we'll see a trend
here and the difference in the cost of

00:08:02.390 --> 00:08:02.400
here and the difference in the cost of
 

00:08:02.400 --> 00:08:04.909
here and the difference in the cost of
get it fuel is a little surprising both

00:08:04.909 --> 00:08:04.919
get it fuel is a little surprising both
 

00:08:04.919 --> 00:08:06.650
get it fuel is a little surprising both
one of the both runtimes actually

00:08:06.650 --> 00:08:06.660
one of the both runtimes actually
 

00:08:06.660 --> 00:08:08.360
one of the both runtimes actually
changed the state of the internal thread

00:08:08.360 --> 00:08:08.370
changed the state of the internal thread
 

00:08:08.370 --> 00:08:10.370
changed the state of the internal thread
and that's actually what costs costs

00:08:10.370 --> 00:08:10.380
and that's actually what costs costs
 

00:08:10.380 --> 00:08:11.930
and that's actually what costs costs
about it for a bit of performance here

00:08:11.930 --> 00:08:11.940
about it for a bit of performance here
 

00:08:11.940 --> 00:08:13.909
about it for a bit of performance here
although art actually clarifies what is

00:08:13.909 --> 00:08:13.919
although art actually clarifies what is
 

00:08:13.919 --> 00:08:16.100
although art actually clarifies what is
doing we scoped object access rather

00:08:16.100 --> 00:08:16.110
doing we scoped object access rather
 

00:08:16.110 --> 00:08:18.500
doing we scoped object access rather
than scope j'ni thread state and what

00:08:18.500 --> 00:08:18.510
than scope j'ni thread state and what
 

00:08:18.510 --> 00:08:19.880
than scope j'ni thread state and what
we're seeing is a couple of things one

00:08:19.880 --> 00:08:19.890
we're seeing is a couple of things one
 

00:08:19.890 --> 00:08:22.190
we're seeing is a couple of things one
is it art is pretty complicated by

00:08:22.190 --> 00:08:22.200
is it art is pretty complicated by
 

00:08:22.200 --> 00:08:24.680
is it art is pretty complicated by
comparison to doll Vic and it's got a

00:08:24.680 --> 00:08:24.690
comparison to doll Vic and it's got a
 

00:08:24.690 --> 00:08:26.300
comparison to doll Vic and it's got a
lot more going on the garbage collector

00:08:26.300 --> 00:08:26.310
lot more going on the garbage collector
 

00:08:26.310 --> 00:08:27.980
lot more going on the garbage collector
is much more sophisticated it's much

00:08:27.980 --> 00:08:27.990
is much more sophisticated it's much
 

00:08:27.990 --> 00:08:29.930
is much more sophisticated it's much
higher performance and the other thing

00:08:29.930 --> 00:08:29.940
higher performance and the other thing
 

00:08:29.940 --> 00:08:31.070
higher performance and the other thing
is it's just being really defensive

00:08:31.070 --> 00:08:31.080
is it's just being really defensive
 

00:08:31.080 --> 00:08:34.010
is it's just being really defensive
there were definitely times in dalvik

00:08:34.010 --> 00:08:34.020
there were definitely times in dalvik
 

00:08:34.020 --> 00:08:36.070
there were definitely times in dalvik
where you could cause it to deadlock and

00:08:36.070 --> 00:08:36.080
where you could cause it to deadlock and
 

00:08:36.080 --> 00:08:38.990
where you could cause it to deadlock and
it's very very difficult to make art do

00:08:38.990 --> 00:08:39.000
it's very very difficult to make art do
 

00:08:39.000 --> 00:08:40.640
it's very very difficult to make art do
that so that's that's the beautiful

00:08:40.640 --> 00:08:40.650
that so that's that's the beautiful
 

00:08:40.650 --> 00:08:41.810
that so that's that's the beautiful
thing about all this work they did but

00:08:41.810 --> 00:08:41.820
thing about all this work they did but
 

00:08:41.820 --> 00:08:43.640
thing about all this work they did but
it does cost us a little in actual

00:08:43.640 --> 00:08:43.650
it does cost us a little in actual
 

00:08:43.650 --> 00:08:45.140
it does cost us a little in actual
performance so this is something to know

00:08:45.140 --> 00:08:45.150
performance so this is something to know
 

00:08:45.150 --> 00:08:47.340
performance so this is something to know
also I love this use of the preprocessor

00:08:47.340 --> 00:08:47.350
also I love this use of the preprocessor
 

00:08:47.350 --> 00:08:50.130
also I love this use of the preprocessor
to prevent all this duplicated code okay

00:08:50.130 --> 00:08:50.140
to prevent all this duplicated code okay
 

00:08:50.140 --> 00:08:51.840
to prevent all this duplicated code okay
as far as cache from field method IDs

00:08:51.840 --> 00:08:51.850
as far as cache from field method IDs
 

00:08:51.850 --> 00:08:53.940
as far as cache from field method IDs
ago it's a big win on dalvik it's even a

00:08:53.940 --> 00:08:53.950
ago it's a big win on dalvik it's even a
 

00:08:53.950 --> 00:08:56.190
ago it's a big win on dalvik it's even a
bigger win on art so let's look at our

00:08:56.190 --> 00:08:56.200
bigger win on art so let's look at our
 

00:08:56.200 --> 00:08:57.750
bigger win on art so let's look at our
second performance suggestion and we'll

00:08:57.750 --> 00:08:57.760
second performance suggestion and we'll
 

00:08:57.760 --> 00:08:59.820
second performance suggestion and we'll
see how it holds up if possible that is

00:08:59.820 --> 00:08:59.830
see how it holds up if possible that is
 

00:08:59.830 --> 00:09:01.920
see how it holds up if possible that is
usually faster to operate with utf-16

00:09:01.920 --> 00:09:01.930
usually faster to operate with utf-16
 

00:09:01.930 --> 00:09:04.410
usually faster to operate with utf-16
strings Android is usually not require a

00:09:04.410 --> 00:09:04.420
strings Android is usually not require a
 

00:09:04.420 --> 00:09:06.180
strings Android is usually not require a
copy and get string cares whereas get

00:09:06.180 --> 00:09:06.190
copy and get string cares whereas get
 

00:09:06.190 --> 00:09:07.950
copy and get string cares whereas get
blah blah blah okay you heinel have to

00:09:07.950 --> 00:09:07.960
blah blah blah okay you heinel have to
 

00:09:07.960 --> 00:09:10.170
blah blah blah okay you heinel have to
read that to you basically it makes

00:09:10.170 --> 00:09:10.180
read that to you basically it makes
 

00:09:10.180 --> 00:09:11.730
read that to you basically it makes
sense if we don't have to copy strings

00:09:11.730 --> 00:09:11.740
sense if we don't have to copy strings
 

00:09:11.740 --> 00:09:14.610
sense if we don't have to copy strings
it's gonna be faster right so here are

00:09:14.610 --> 00:09:14.620
it's gonna be faster right so here are
 

00:09:14.620 --> 00:09:16.080
it's gonna be faster right so here are
the two calls that get a string you can

00:09:16.080 --> 00:09:16.090
the two calls that get a string you can
 

00:09:16.090 --> 00:09:18.090
the two calls that get a string you can
either get the ucs string which is a

00:09:18.090 --> 00:09:18.100
either get the ucs string which is a
 

00:09:18.100 --> 00:09:21.360
either get the ucs string which is a
16-bit you know standard format for the

00:09:21.360 --> 00:09:21.370
16-bit you know standard format for the
 

00:09:21.370 --> 00:09:24.060
16-bit you know standard format for the
manage side of things and UTF which is

00:09:24.060 --> 00:09:24.070
manage side of things and UTF which is
 

00:09:24.070 --> 00:09:26.790
manage side of things and UTF which is
of course what a lot of our native code

00:09:26.790 --> 00:09:26.800
of course what a lot of our native code
 

00:09:26.800 --> 00:09:28.800
of course what a lot of our native code
expects and we would expect them since

00:09:28.800 --> 00:09:28.810
expects and we would expect them since
 

00:09:28.810 --> 00:09:30.870
expects and we would expect them since
there's no conversion going on that

00:09:30.870 --> 00:09:30.880
there's no conversion going on that
 

00:09:30.880 --> 00:09:32.820
there's no conversion going on that
actually the UTF would outperform the

00:09:32.820 --> 00:09:32.830
actually the UTF would outperform the
 

00:09:32.830 --> 00:09:35.220
actually the UTF would outperform the
UCS okay so here's let's take a look at

00:09:35.220 --> 00:09:35.230
UCS okay so here's let's take a look at
 

00:09:35.230 --> 00:09:36.480
UCS okay so here's let's take a look at
how this actually benchmarks and this

00:09:36.480 --> 00:09:36.490
how this actually benchmarks and this
 

00:09:36.490 --> 00:09:38.490
how this actually benchmarks and this
was a little surprising to me because

00:09:38.490 --> 00:09:38.500
was a little surprising to me because
 

00:09:38.500 --> 00:09:41.220
was a little surprising to me because
this was a short 15 character string and

00:09:41.220 --> 00:09:41.230
this was a short 15 character string and
 

00:09:41.230 --> 00:09:44.190
this was a short 15 character string and
it turns out that it was actually faster

00:09:44.190 --> 00:09:44.200
it turns out that it was actually faster
 

00:09:44.200 --> 00:09:47.870
it turns out that it was actually faster
to send the 8-bit decoded string across

00:09:47.870 --> 00:09:47.880
to send the 8-bit decoded string across
 

00:09:47.880 --> 00:09:51.600
to send the 8-bit decoded string across
instead of the 16-bit string on art I

00:09:51.600 --> 00:09:51.610
instead of the 16-bit string on art I
 

00:09:51.610 --> 00:09:52.650
instead of the 16-bit string on art I
don't think you can see it actually

00:09:52.650 --> 00:09:52.660
don't think you can see it actually
 

00:09:52.660 --> 00:09:54.240
don't think you can see it actually
benches the way you designed it expect

00:09:54.240 --> 00:09:54.250
benches the way you designed it expect
 

00:09:54.250 --> 00:09:56.100
benches the way you designed it expect
it to but it's even then it's very very

00:09:56.100 --> 00:09:56.110
it to but it's even then it's very very
 

00:09:56.110 --> 00:09:57.990
it to but it's even then it's very very
close and it was a little bit of a

00:09:57.990 --> 00:09:58.000
close and it was a little bit of a
 

00:09:58.000 --> 00:10:00.000
close and it was a little bit of a
surprise and and the reason and so I was

00:10:00.000 --> 00:10:00.010
surprise and and the reason and so I was
 

00:10:00.010 --> 00:10:01.050
surprise and and the reason and so I was
like okay I've got to understand why

00:10:01.050 --> 00:10:01.060
like okay I've got to understand why
 

00:10:01.060 --> 00:10:04.290
like okay I've got to understand why
this is happening so basically I was

00:10:04.290 --> 00:10:04.300
this is happening so basically I was
 

00:10:04.300 --> 00:10:05.940
this is happening so basically I was
like let's try let's first of all try a

00:10:05.940 --> 00:10:05.950
like let's try let's first of all try a
 

00:10:05.950 --> 00:10:07.260
like let's try let's first of all try a
longer string and see if it actually

00:10:07.260 --> 00:10:07.270
longer string and see if it actually
 

00:10:07.270 --> 00:10:09.240
longer string and see if it actually
behaves correctly so the longer string

00:10:09.240 --> 00:10:09.250
behaves correctly so the longer string
 

00:10:09.250 --> 00:10:11.520
behaves correctly so the longer string
we actually see yes this actually dwarf

00:10:11.520 --> 00:10:11.530
we actually see yes this actually dwarf
 

00:10:11.530 --> 00:10:13.020
we actually see yes this actually dwarf
benches out the way we expect but it's

00:10:13.020 --> 00:10:13.030
benches out the way we expect but it's
 

00:10:13.030 --> 00:10:15.540
benches out the way we expect but it's
surprising so let's look at the code and

00:10:15.540 --> 00:10:15.550
surprising so let's look at the code and
 

00:10:15.550 --> 00:10:17.760
surprising so let's look at the code and
see what actually is going on so you can

00:10:17.760 --> 00:10:17.770
see what actually is going on so you can
 

00:10:17.770 --> 00:10:20.130
see what actually is going on so you can
see inside of art there's this line

00:10:20.130 --> 00:10:20.140
see inside of art there's this line
 

00:10:20.140 --> 00:10:23.400
see inside of art there's this line
called is movable object and it

00:10:23.400 --> 00:10:23.410
called is movable object and it
 

00:10:23.410 --> 00:10:25.080
called is movable object and it
sometimes gets to return a coffee and

00:10:25.080 --> 00:10:25.090
sometimes gets to return a coffee and
 

00:10:25.090 --> 00:10:26.550
sometimes gets to return a coffee and
sometimes returns the original string

00:10:26.550 --> 00:10:26.560
sometimes returns the original string
 

00:10:26.560 --> 00:10:28.590
sometimes returns the original string
and is movable object it's actually kind

00:10:28.590 --> 00:10:28.600
and is movable object it's actually kind
 

00:10:28.600 --> 00:10:30.600
and is movable object it's actually kind
of an expensive call so what ends up

00:10:30.600 --> 00:10:30.610
of an expensive call so what ends up
 

00:10:30.610 --> 00:10:32.100
of an expensive call so what ends up
happening is that this is actually it's

00:10:32.100 --> 00:10:32.110
happening is that this is actually it's
 

00:10:32.110 --> 00:10:34.650
happening is that this is actually it's
a for loop inside of here that goes

00:10:34.650 --> 00:10:34.660
a for loop inside of here that goes
 

00:10:34.660 --> 00:10:36.600
a for loop inside of here that goes
inside this fine continuous space or mob

00:10:36.600 --> 00:10:36.610
inside this fine continuous space or mob
 

00:10:36.610 --> 00:10:37.950
inside this fine continuous space or mob
Jek and that's actually what takes the

00:10:37.950 --> 00:10:37.960
Jek and that's actually what takes the
 

00:10:37.960 --> 00:10:41.940
Jek and that's actually what takes the
time so it really ultimately on on art

00:10:41.940 --> 00:10:41.950
time so it really ultimately on on art
 

00:10:41.950 --> 00:10:44.100
time so it really ultimately on on art
for a lot of normal string sizes you

00:10:44.100 --> 00:10:44.110
for a lot of normal string sizes you
 

00:10:44.110 --> 00:10:46.050
for a lot of normal string sizes you
might actually be better just sending in

00:10:46.050 --> 00:10:46.060
might actually be better just sending in
 

00:10:46.060 --> 00:10:48.450
might actually be better just sending in
the utf-8 today now of course this is

00:10:48.450 --> 00:10:48.460
the utf-8 today now of course this is
 

00:10:48.460 --> 00:10:49.860
the utf-8 today now of course this is
all subject to change and maybe they'll

00:10:49.860 --> 00:10:49.870
all subject to change and maybe they'll
 

00:10:49.870 --> 00:10:51.270
all subject to change and maybe they'll
watch this and be like oh god we've got

00:10:51.270 --> 00:10:51.280
watch this and be like oh god we've got
 

00:10:51.280 --> 00:10:53.790
watch this and be like oh god we've got
to fix that but at least today that it

00:10:53.790 --> 00:10:53.800
to fix that but at least today that it
 

00:10:53.800 --> 00:10:55.440
to fix that but at least today that it
doesn't matter all that much as it turns

00:10:55.440 --> 00:10:55.450
doesn't matter all that much as it turns
 

00:10:55.450 --> 00:10:57.880
doesn't matter all that much as it turns
out so that was a little bit surprising

00:10:57.880 --> 00:10:57.890
out so that was a little bit surprising
 

00:10:57.890 --> 00:11:00.280
out so that was a little bit surprising
and again this is a micro benchmark so

00:11:00.280 --> 00:11:00.290
and again this is a micro benchmark so
 

00:11:00.290 --> 00:11:01.540
and again this is a micro benchmark so
it certainly is gonna help prevent

00:11:01.540 --> 00:11:01.550
it certainly is gonna help prevent
 

00:11:01.550 --> 00:11:12.970
it certainly is gonna help prevent
garbage this is working you know right

00:11:12.970 --> 00:11:12.980
garbage this is working you know right
 

00:11:12.980 --> 00:11:14.320
garbage this is working you know right
fortunately for all you people on the

00:11:14.320 --> 00:11:14.330
fortunately for all you people on the
 

00:11:14.330 --> 00:11:17.170
fortunately for all you people on the
livestream I've got a microphone so on

00:11:17.170 --> 00:11:17.180
livestream I've got a microphone so on
 

00:11:17.180 --> 00:11:19.060
livestream I've got a microphone so on
our on our Jan I tip scorecard it's

00:11:19.060 --> 00:11:19.070
our on our Jan I tip scorecard it's
 

00:11:19.070 --> 00:11:20.560
our on our Jan I tip scorecard it's
probably a decent idea to do it on both

00:11:20.560 --> 00:11:20.570
probably a decent idea to do it on both
 

00:11:20.570 --> 00:11:24.580
probably a decent idea to do it on both
but it's definitely definitely better on

00:11:24.580 --> 00:11:24.590
but it's definitely definitely better on
 

00:11:24.590 --> 00:11:27.220
but it's definitely definitely better on
dalvik finally let's look let's look at

00:11:27.220 --> 00:11:27.230
dalvik finally let's look let's look at
 

00:11:27.230 --> 00:11:29.830
dalvik finally let's look let's look at
one more tip here and this is this is a

00:11:29.830 --> 00:11:29.840
one more tip here and this is this is a
 

00:11:29.840 --> 00:11:32.230
one more tip here and this is this is a
this is actually me paraphrasing because

00:11:32.230 --> 00:11:32.240
this is actually me paraphrasing because
 

00:11:32.240 --> 00:11:34.030
this is actually me paraphrasing because
I couldn't come up with a quote that was

00:11:34.030 --> 00:11:34.040
I couldn't come up with a quote that was
 

00:11:34.040 --> 00:11:36.100
I couldn't come up with a quote that was
even close to being good enough this is

00:11:36.100 --> 00:11:36.110
even close to being good enough this is
 

00:11:36.110 --> 00:11:37.810
even close to being good enough this is
this is actually a very very good thing

00:11:37.810 --> 00:11:37.820
this is actually a very very good thing
 

00:11:37.820 --> 00:11:39.550
this is actually a very very good thing
that actually paraphrase because this is

00:11:39.550 --> 00:11:39.560
that actually paraphrase because this is
 

00:11:39.560 --> 00:11:41.200
that actually paraphrase because this is
important because you want to reduce

00:11:41.200 --> 00:11:41.210
important because you want to reduce
 

00:11:41.210 --> 00:11:43.180
important because you want to reduce
j'ni overhead and actually using region

00:11:43.180 --> 00:11:43.190
j'ni overhead and actually using region
 

00:11:43.190 --> 00:11:45.190
j'ni overhead and actually using region
calls to copy data if you're going to

00:11:45.190 --> 00:11:45.200
calls to copy data if you're going to
 

00:11:45.200 --> 00:11:46.810
calls to copy data if you're going to
end up copying it in the end of you know

00:11:46.810 --> 00:11:46.820
end up copying it in the end of you know
 

00:11:46.820 --> 00:11:48.280
end up copying it in the end of you know
in the finality is actually saves you

00:11:48.280 --> 00:11:48.290
in the finality is actually saves you
 

00:11:48.290 --> 00:11:50.440
in the finality is actually saves you
quite a bit of performance so here are

00:11:50.440 --> 00:11:50.450
quite a bit of performance so here are
 

00:11:50.450 --> 00:11:51.850
quite a bit of performance so here are
the two native functions that copy data

00:11:51.850 --> 00:11:51.860
the two native functions that copy data
 

00:11:51.860 --> 00:11:53.290
the two native functions that copy data
from string into a buffer one of them

00:11:53.290 --> 00:11:53.300
from string into a buffer one of them
 

00:11:53.300 --> 00:11:54.610
from string into a buffer one of them
does it using kind of the old-school way

00:11:54.610 --> 00:11:54.620
does it using kind of the old-school way
 

00:11:54.620 --> 00:11:57.400
does it using kind of the old-school way
of doing of doing get copy and release

00:11:57.400 --> 00:11:57.410
of doing of doing get copy and release
 

00:11:57.410 --> 00:11:58.930
of doing of doing get copy and release
and the other one does it using

00:11:58.930 --> 00:11:58.940
and the other one does it using
 

00:11:58.940 --> 00:12:00.610
and the other one does it using
getstring region which is all done at

00:12:00.610 --> 00:12:00.620
getstring region which is all done at
 

00:12:00.620 --> 00:12:00.940
getstring region which is all done at
once

00:12:00.940 --> 00:12:00.950
once
 

00:12:00.950 --> 00:12:02.290
once
which is cool you're eliminating some

00:12:02.290 --> 00:12:02.300
which is cool you're eliminating some
 

00:12:02.300 --> 00:12:05.050
which is cool you're eliminating some
J&amp;I calls and as you would expect oh the

00:12:05.050 --> 00:12:05.060
J&amp;I calls and as you would expect oh the
 

00:12:05.060 --> 00:12:06.040
J&amp;I calls and as you would expect oh the
other thing I was going to point out

00:12:06.040 --> 00:12:06.050
other thing I was going to point out
 

00:12:06.050 --> 00:12:07.420
other thing I was going to point out
here is that I actually passed the

00:12:07.420 --> 00:12:07.430
here is that I actually passed the
 

00:12:07.430 --> 00:12:09.280
here is that I actually passed the
length of the string in as well now I

00:12:09.280 --> 00:12:09.290
length of the string in as well now I
 

00:12:09.290 --> 00:12:11.080
length of the string in as well now I
could of course just pass the object

00:12:11.080 --> 00:12:11.090
could of course just pass the object
 

00:12:11.090 --> 00:12:14.890
could of course just pass the object
from the runtime and query it but

00:12:14.890 --> 00:12:14.900
from the runtime and query it but
 

00:12:14.900 --> 00:12:16.120
from the runtime and query it but
obviously that would be another Jan I

00:12:16.120 --> 00:12:16.130
obviously that would be another Jan I
 

00:12:16.130 --> 00:12:17.770
obviously that would be another Jan I
call that'd be a huge waste of time and

00:12:17.770 --> 00:12:17.780
call that'd be a huge waste of time and
 

00:12:17.780 --> 00:12:19.450
call that'd be a huge waste of time and
it turns out that it's 20 to 30 times

00:12:19.450 --> 00:12:19.460
it turns out that it's 20 to 30 times
 

00:12:19.460 --> 00:12:21.040
it turns out that it's 20 to 30 times
faster just a passing additional

00:12:21.040 --> 00:12:21.050
faster just a passing additional
 

00:12:21.050 --> 00:12:22.750
faster just a passing additional
parameter rather than making another Jan

00:12:22.750 --> 00:12:22.760
parameter rather than making another Jan
 

00:12:22.760 --> 00:12:24.910
parameter rather than making another Jan
I call so as a general rule you're gonna

00:12:24.910 --> 00:12:24.920
I call so as a general rule you're gonna
 

00:12:24.920 --> 00:12:27.340
I call so as a general rule you're gonna
always want to have more parameters into

00:12:27.340 --> 00:12:27.350
always want to have more parameters into
 

00:12:27.350 --> 00:12:28.840
always want to have more parameters into
calling into your native functions if

00:12:28.840 --> 00:12:28.850
calling into your native functions if
 

00:12:28.850 --> 00:12:31.210
calling into your native functions if
you can if you can possibly avoid ever

00:12:31.210 --> 00:12:31.220
you can if you can possibly avoid ever
 

00:12:31.220 --> 00:12:35.070
you can if you can possibly avoid ever
making a call back into the runtime ok

00:12:35.070 --> 00:12:35.080
making a call back into the runtime ok
 

00:12:35.080 --> 00:12:37.900
making a call back into the runtime ok
so here's how to actually benchmarks for

00:12:37.900 --> 00:12:37.910
so here's how to actually benchmarks for
 

00:12:37.910 --> 00:12:40.660
so here's how to actually benchmarks for
copying string data and and you know

00:12:40.660 --> 00:12:40.670
copying string data and and you know
 

00:12:40.670 --> 00:12:42.910
copying string data and and you know
once again this is kind of what we would

00:12:42.910 --> 00:12:42.920
once again this is kind of what we would
 

00:12:42.920 --> 00:12:46.510
once again this is kind of what we would
expect you know that the the getstring

00:12:46.510 --> 00:12:46.520
expect you know that the the getstring
 

00:12:46.520 --> 00:12:48.250
expect you know that the the getstring
region is extremely close actually

00:12:48.250 --> 00:12:48.260
region is extremely close actually
 

00:12:48.260 --> 00:12:49.780
region is extremely close actually
between the two viens on the same

00:12:49.780 --> 00:12:49.790
between the two viens on the same
 

00:12:49.790 --> 00:12:52.810
between the two viens on the same
hardware and and getstring cares is is

00:12:52.810 --> 00:12:52.820
hardware and and getstring cares is is
 

00:12:52.820 --> 00:12:54.130
hardware and and getstring cares is is
definitely slower than both and so

00:12:54.130 --> 00:12:54.140
definitely slower than both and so
 

00:12:54.140 --> 00:12:55.690
definitely slower than both and so
region is definitely a good one we'll

00:12:55.690 --> 00:12:55.700
region is definitely a good one we'll
 

00:12:55.700 --> 00:12:58.690
region is definitely a good one we'll
put that on our scorecard so you know

00:12:58.690 --> 00:12:58.700
put that on our scorecard so you know
 

00:12:58.700 --> 00:13:00.430
put that on our scorecard so you know
sharing structured data between managed

00:13:00.430 --> 00:13:00.440
sharing structured data between managed
 

00:13:00.440 --> 00:13:01.930
sharing structured data between managed
and unmanaged code in the fastest

00:13:01.930 --> 00:13:01.940
and unmanaged code in the fastest
 

00:13:01.940 --> 00:13:03.640
and unmanaged code in the fastest
possible ways and as easy as sharing a

00:13:03.640 --> 00:13:03.650
possible ways and as easy as sharing a
 

00:13:03.650 --> 00:13:04.870
possible ways and as easy as sharing a
soft-drink you basically have two

00:13:04.870 --> 00:13:04.880
soft-drink you basically have two
 

00:13:04.880 --> 00:13:07.570
soft-drink you basically have two
options you either use arrays or direct

00:13:07.570 --> 00:13:07.580
options you either use arrays or direct
 

00:13:07.580 --> 00:13:08.640
options you either use arrays or direct
byte buffers

00:13:08.640 --> 00:13:08.650
byte buffers
 

00:13:08.650 --> 00:13:10.050
byte buffers
and it really comes down to your use

00:13:10.050 --> 00:13:10.060
and it really comes down to your use
 

00:13:10.060 --> 00:13:11.700
and it really comes down to your use
case you know if a razor useful if

00:13:11.700 --> 00:13:11.710
case you know if a razor useful if
 

00:13:11.710 --> 00:13:13.710
case you know if a razor useful if
you're primarily going to be accessing

00:13:13.710 --> 00:13:13.720
you're primarily going to be accessing
 

00:13:13.720 --> 00:13:16.260
you're primarily going to be accessing
the data from managed code but here's

00:13:16.260 --> 00:13:16.270
the data from managed code but here's
 

00:13:16.270 --> 00:13:17.820
the data from managed code but here's
what our tips say about direct byte

00:13:17.820 --> 00:13:17.830
what our tips say about direct byte
 

00:13:17.830 --> 00:13:22.830
what our tips say about direct byte
buffers okay this seems like a rather

00:13:22.830 --> 00:13:22.840
buffers okay this seems like a rather
 

00:13:22.840 --> 00:13:25.640
buffers okay this seems like a rather
uncommon

00:13:25.640 --> 00:13:25.650
 

00:13:25.650 --> 00:13:27.510
like you think we could do better than

00:13:27.510 --> 00:13:27.520
like you think we could do better than
 

00:13:27.520 --> 00:13:30.480
like you think we could do better than
this okay is it actually slow like on

00:13:30.480 --> 00:13:30.490
this okay is it actually slow like on
 

00:13:30.490 --> 00:13:32.880
this okay is it actually slow like on
our on our honor both of our runtimes on

00:13:32.880 --> 00:13:32.890
our on our honor both of our runtimes on
 

00:13:32.890 --> 00:13:34.710
our on our honor both of our runtimes on
a real device well this is why I was

00:13:34.710 --> 00:13:34.720
a real device well this is why I was
 

00:13:34.720 --> 00:13:36.060
a real device well this is why I was
like I've got a benchmark this one too

00:13:36.060 --> 00:13:36.070
like I've got a benchmark this one too
 

00:13:36.070 --> 00:13:38.670
like I've got a benchmark this one too
and as you and actually you know it's a

00:13:38.670 --> 00:13:38.680
and as you and actually you know it's a
 

00:13:38.680 --> 00:13:40.740
and as you and actually you know it's a
it's not terribly surprising but we see

00:13:40.740 --> 00:13:40.750
it's not terribly surprising but we see
 

00:13:40.750 --> 00:13:42.930
it's not terribly surprising but we see
about two times the Raj anti cost in

00:13:42.930 --> 00:13:42.940
about two times the Raj anti cost in
 

00:13:42.940 --> 00:13:45.300
about two times the Raj anti cost in
order to get the direct buffer address

00:13:45.300 --> 00:13:45.310
order to get the direct buffer address
 

00:13:45.310 --> 00:13:48.420
order to get the direct buffer address
access rather than just using a the

00:13:48.420 --> 00:13:48.430
access rather than just using a the
 

00:13:48.430 --> 00:13:49.800
access rather than just using a the
standard stuff that's built into the

00:13:49.800 --> 00:13:49.810
standard stuff that's built into the
 

00:13:49.810 --> 00:13:51.690
standard stuff that's built into the
runtime but you notice something really

00:13:51.690 --> 00:13:51.700
runtime but you notice something really
 

00:13:51.700 --> 00:13:55.200
runtime but you notice something really
interesting here and about this one and

00:13:55.200 --> 00:13:55.210
interesting here and about this one and
 

00:13:55.210 --> 00:13:58.140
interesting here and about this one and
that if we actually go to read back from

00:13:58.140 --> 00:13:58.150
that if we actually go to read back from
 

00:13:58.150 --> 00:14:00.510
that if we actually go to read back from
the byte buffer it's actually like three

00:14:00.510 --> 00:14:00.520
the byte buffer it's actually like three
 

00:14:00.520 --> 00:14:02.730
the byte buffer it's actually like three
times as expensive to read from dalvik

00:14:02.730 --> 00:14:02.740
times as expensive to read from dalvik
 

00:14:02.740 --> 00:14:06.840
times as expensive to read from dalvik
compared to using art and like like this

00:14:06.840 --> 00:14:06.850
compared to using art and like like this
 

00:14:06.850 --> 00:14:09.210
compared to using art and like like this
makes no sense like we've seen in every

00:14:09.210 --> 00:14:09.220
makes no sense like we've seen in every
 

00:14:09.220 --> 00:14:12.300
makes no sense like we've seen in every
other call we've seen that that that

00:14:12.300 --> 00:14:12.310
other call we've seen that that that
 

00:14:12.310 --> 00:14:15.270
other call we've seen that that that
dalvik does this much much faster than

00:14:15.270 --> 00:14:15.280
dalvik does this much much faster than
 

00:14:15.280 --> 00:14:17.370
dalvik does this much much faster than
art so what's going on here let's let's

00:14:17.370 --> 00:14:17.380
art so what's going on here let's let's
 

00:14:17.380 --> 00:14:18.660
art so what's going on here let's let's
let's take a look at what's going on

00:14:18.660 --> 00:14:18.670
let's take a look at what's going on
 

00:14:18.670 --> 00:14:20.850
let's take a look at what's going on
actually inside the code so basically

00:14:20.850 --> 00:14:20.860
actually inside the code so basically
 

00:14:20.860 --> 00:14:23.340
actually inside the code so basically
here's what this looks like as you'd

00:14:23.340 --> 00:14:23.350
here's what this looks like as you'd
 

00:14:23.350 --> 00:14:24.930
here's what this looks like as you'd
expect this is our this is our byte

00:14:24.930 --> 00:14:24.940
expect this is our this is our byte
 

00:14:24.940 --> 00:14:26.370
expect this is our this is our byte
buffer direct byte buffer we can see

00:14:26.370 --> 00:14:26.380
buffer direct byte buffer we can see
 

00:14:26.380 --> 00:14:27.960
buffer direct byte buffer we can see
that a regular byte buffer is actually

00:14:27.960 --> 00:14:27.970
that a regular byte buffer is actually
 

00:14:27.970 --> 00:14:30.240
that a regular byte buffer is actually
backed by a java array while the direct

00:14:30.240 --> 00:14:30.250
backed by a java array while the direct
 

00:14:30.250 --> 00:14:32.070
backed by a java array while the direct
buffer is backed by a memory block and

00:14:32.070 --> 00:14:32.080
buffer is backed by a memory block and
 

00:14:32.080 --> 00:14:34.940
buffer is backed by a memory block and
so far that's exactly what we'd expect

00:14:34.940 --> 00:14:34.950
so far that's exactly what we'd expect
 

00:14:34.950 --> 00:14:37.260
so far that's exactly what we'd expect
and here's how we start actually reading

00:14:37.260 --> 00:14:37.270
and here's how we start actually reading
 

00:14:37.270 --> 00:14:39.030
and here's how we start actually reading
an integer we can already see the direct

00:14:39.030 --> 00:14:39.040
an integer we can already see the direct
 

00:14:39.040 --> 00:14:40.350
an integer we can already see the direct
byte buffer as well and it has an

00:14:40.350 --> 00:14:40.360
byte buffer as well and it has an
 

00:14:40.360 --> 00:14:41.790
byte buffer as well and it has an
additional level of indirection and

00:14:41.790 --> 00:14:41.800
additional level of indirection and
 

00:14:41.800 --> 00:14:43.800
additional level of indirection and
based on the profiling I've done that

00:14:43.800 --> 00:14:43.810
based on the profiling I've done that
 

00:14:43.810 --> 00:14:45.870
based on the profiling I've done that
probably cost us about five nanoseconds

00:14:45.870 --> 00:14:45.880
probably cost us about five nanoseconds
 

00:14:45.880 --> 00:14:48.960
probably cost us about five nanoseconds
and now we're somewhere here's our byte

00:14:48.960 --> 00:14:48.970
and now we're somewhere here's our byte
 

00:14:48.970 --> 00:14:50.520
and now we're somewhere here's our byte
or implementation in our memory blocking

00:14:50.520 --> 00:14:50.530
or implementation in our memory blocking
 

00:14:50.530 --> 00:14:52.620
or implementation in our memory blocking
implementation both conveniently in the

00:14:52.620 --> 00:14:52.630
implementation both conveniently in the
 

00:14:52.630 --> 00:14:55.020
implementation both conveniently in the
same class and our memory block version

00:14:55.020 --> 00:14:55.030
same class and our memory block version
 

00:14:55.030 --> 00:14:58.320
same class and our memory block version
actually uses J and I so that explains

00:14:58.320 --> 00:14:58.330
actually uses J and I so that explains
 

00:14:58.330 --> 00:14:59.910
actually uses J and I so that explains
why direct is so much slower it's

00:14:59.910 --> 00:14:59.920
why direct is so much slower it's
 

00:14:59.920 --> 00:15:02.340
why direct is so much slower it's
actually doing a full jan i call just to

00:15:02.340 --> 00:15:02.350
actually doing a full jan i call just to
 

00:15:02.350 --> 00:15:04.620
actually doing a full jan i call just to
access this memory but why is our it so

00:15:04.620 --> 00:15:04.630
access this memory but why is our it so
 

00:15:04.630 --> 00:15:07.320
access this memory but why is our it so
much faster well here's what that native

00:15:07.320 --> 00:15:07.330
much faster well here's what that native
 

00:15:07.330 --> 00:15:08.850
much faster well here's what that native
code calls into but it still doesn't

00:15:08.850 --> 00:15:08.860
code calls into but it still doesn't
 

00:15:08.860 --> 00:15:11.190
code calls into but it still doesn't
tell us why art is faster the real magic

00:15:11.190 --> 00:15:11.200
tell us why art is faster the real magic
 

00:15:11.200 --> 00:15:13.140
tell us why art is faster the real magic
actually happens where the j'ni function

00:15:13.140 --> 00:15:13.150
actually happens where the j'ni function
 

00:15:13.150 --> 00:15:14.040
actually happens where the j'ni function
is declared

00:15:14.040 --> 00:15:14.050
is declared
 

00:15:14.050 --> 00:15:15.930
is declared
because jan i overhead is pretty high

00:15:15.930 --> 00:15:15.940
because jan i overhead is pretty high
 

00:15:15.940 --> 00:15:18.180
because jan i overhead is pretty high
the wrong time actually kind of

00:15:18.180 --> 00:15:18.190
the wrong time actually kind of
 

00:15:18.190 --> 00:15:20.430
the wrong time actually kind of
shortcuts it and into a fast mode in

00:15:20.430 --> 00:15:20.440
shortcuts it and into a fast mode in
 

00:15:20.440 --> 00:15:21.960
shortcuts it and into a fast mode in
certain cases

00:15:21.960 --> 00:15:21.970
certain cases
 

00:15:21.970 --> 00:15:24.119
certain cases
so inside of arts native code we declare

00:15:24.119 --> 00:15:24.129
so inside of arts native code we declare
 

00:15:24.129 --> 00:15:26.099
so inside of arts native code we declare
the je and I call with exclamation point

00:15:26.099 --> 00:15:26.109
the je and I call with exclamation point
 

00:15:26.109 --> 00:15:27.359
the je and I call with exclamation point
to make it clear that this is a

00:15:27.359 --> 00:15:27.369
to make it clear that this is a
 

00:15:27.369 --> 00:15:29.789
to make it clear that this is a
potentially dangerous function and now

00:15:29.789 --> 00:15:29.799
potentially dangerous function and now
 

00:15:29.799 --> 00:15:31.469
potentially dangerous function and now
the thread gets to stay in running mode

00:15:31.469 --> 00:15:31.479
the thread gets to stay in running mode
 

00:15:31.479 --> 00:15:33.960
the thread gets to stay in running mode
without having to switch to native so

00:15:33.960 --> 00:15:33.970
without having to switch to native so
 

00:15:33.970 --> 00:15:35.519
without having to switch to native so
looking back at our graph our direct

00:15:35.519 --> 00:15:35.529
looking back at our graph our direct
 

00:15:35.529 --> 00:15:37.199
looking back at our graph our direct
call is about half the speed of our byte

00:15:37.199 --> 00:15:37.209
call is about half the speed of our byte
 

00:15:37.209 --> 00:15:38.549
call is about half the speed of our byte
buffer call and this is partially

00:15:38.549 --> 00:15:38.559
buffer call and this is partially
 

00:15:38.559 --> 00:15:40.319
buffer call and this is partially
because the the runt the version in the

00:15:40.319 --> 00:15:40.329
because the the runt the version in the
 

00:15:40.329 --> 00:15:41.819
because the the runt the version in the
run time is actually using another trick

00:15:41.819 --> 00:15:41.829
run time is actually using another trick
 

00:15:41.829 --> 00:15:44.969
run time is actually using another trick
it's really an inline intrinsic so we're

00:15:44.969 --> 00:15:44.979
it's really an inline intrinsic so we're
 

00:15:44.979 --> 00:15:45.899
it's really an inline intrinsic so we're
never going to get the kind of

00:15:45.899 --> 00:15:45.909
never going to get the kind of
 

00:15:45.909 --> 00:15:47.429
never going to get the kind of
performance out of out of our native

00:15:47.429 --> 00:15:47.439
performance out of out of our native
 

00:15:47.439 --> 00:15:49.499
performance out of out of our native
call as we will even without most of the

00:15:49.499 --> 00:15:49.509
call as we will even without most of the
 

00:15:49.509 --> 00:15:50.879
call as we will even without most of the
overhead compared to what's going on

00:15:50.879 --> 00:15:50.889
overhead compared to what's going on
 

00:15:50.889 --> 00:15:53.789
overhead compared to what's going on
inside the runtime and partially because

00:15:53.789 --> 00:15:53.799
inside the runtime and partially because
 

00:15:53.799 --> 00:15:55.169
inside the runtime and partially because
we have a little bit of overhead even in

00:15:55.169 --> 00:15:55.179
we have a little bit of overhead even in
 

00:15:55.179 --> 00:15:56.819
we have a little bit of overhead even in
this kind of fast mode and this is about

00:15:56.819 --> 00:15:56.829
this kind of fast mode and this is about
 

00:15:56.829 --> 00:15:59.069
this kind of fast mode and this is about
60 nanoseconds of overhead on a nexus 5

00:15:59.069 --> 00:15:59.079
60 nanoseconds of overhead on a nexus 5
 

00:15:59.079 --> 00:16:01.079
60 nanoseconds of overhead on a nexus 5
so it's it's not huge I mean these are

00:16:01.079 --> 00:16:01.089
so it's it's not huge I mean these are
 

00:16:01.089 --> 00:16:02.759
so it's it's not huge I mean these are
tiny tiny amounts you have to remember

00:16:02.759 --> 00:16:02.769
tiny tiny amounts you have to remember
 

00:16:02.769 --> 00:16:05.129
tiny tiny amounts you have to remember
that almost every single call you make

00:16:05.129 --> 00:16:05.139
that almost every single call you make
 

00:16:05.139 --> 00:16:07.769
that almost every single call you make
in Android ends up going through one of

00:16:07.769 --> 00:16:07.779
in Android ends up going through one of
 

00:16:07.779 --> 00:16:10.859
in Android ends up going through one of
these eventually so the question is is

00:16:10.859 --> 00:16:10.869
these eventually so the question is is
 

00:16:10.869 --> 00:16:12.119
these eventually so the question is is
there anything we can do to avoid having

00:16:12.119 --> 00:16:12.129
there anything we can do to avoid having
 

00:16:12.129 --> 00:16:14.129
there anything we can do to avoid having
to make a call into J&amp;I for each end we

00:16:14.129 --> 00:16:14.139
to make a call into J&amp;I for each end we
 

00:16:14.139 --> 00:16:15.960
to make a call into J&amp;I for each end we
want to read and it turns out there is

00:16:15.960 --> 00:16:15.970
want to read and it turns out there is
 

00:16:15.970 --> 00:16:17.819
want to read and it turns out there is
we can copy the entire array at once and

00:16:17.819 --> 00:16:17.829
we can copy the entire array at once and
 

00:16:17.829 --> 00:16:21.419
we can copy the entire array at once and
then get the end individually and now

00:16:21.419 --> 00:16:21.429
then get the end individually and now
 

00:16:21.429 --> 00:16:22.710
then get the end individually and now
we're gonna do some pretty expensive

00:16:22.710 --> 00:16:22.720
we're gonna do some pretty expensive
 

00:16:22.720 --> 00:16:24.089
we're gonna do some pretty expensive
stuff here so it only makes sense if

00:16:24.089 --> 00:16:24.099
stuff here so it only makes sense if
 

00:16:24.099 --> 00:16:24.989
stuff here so it only makes sense if
you're going to be reading a lot of

00:16:24.989 --> 00:16:24.999
you're going to be reading a lot of
 

00:16:24.999 --> 00:16:26.579
you're going to be reading a lot of
structured data from the byte buffer as

00:16:26.579 --> 00:16:26.589
structured data from the byte buffer as
 

00:16:26.589 --> 00:16:28.289
structured data from the byte buffer as
always we want a profile just to make

00:16:28.289 --> 00:16:28.299
always we want a profile just to make
 

00:16:28.299 --> 00:16:30.509
always we want a profile just to make
sure but once again you can see that

00:16:30.509 --> 00:16:30.519
sure but once again you can see that
 

00:16:30.519 --> 00:16:32.759
sure but once again you can see that
that that this is pretty awesome

00:16:32.759 --> 00:16:32.769
that that this is pretty awesome
 

00:16:32.769 --> 00:16:36.529
that that this is pretty awesome
in terms of art alright so that was the

00:16:36.529 --> 00:16:36.539
in terms of art alright so that was the
 

00:16:36.539 --> 00:16:39.029
in terms of art alright so that was the
really really scientific part where I

00:16:39.029 --> 00:16:39.039
really really scientific part where I
 

00:16:39.039 --> 00:16:40.409
really really scientific part where I
did lots of benchmarking let's get into

00:16:40.409 --> 00:16:40.419
did lots of benchmarking let's get into
 

00:16:40.419 --> 00:16:41.789
did lots of benchmarking let's get into
actually doing some fun stuff if that's

00:16:41.789 --> 00:16:41.799
actually doing some fun stuff if that's
 

00:16:41.799 --> 00:16:44.999
actually doing some fun stuff if that's
maybe more practical so this this slide

00:16:44.999 --> 00:16:45.009
maybe more practical so this this slide
 

00:16:45.009 --> 00:16:46.919
maybe more practical so this this slide
mostly demonstrates why I'm not a design

00:16:46.919 --> 00:16:46.929
mostly demonstrates why I'm not a design
 

00:16:46.929 --> 00:16:49.109
mostly demonstrates why I'm not a design
advocate but there are lots of choices

00:16:49.109 --> 00:16:49.119
advocate but there are lots of choices
 

00:16:49.119 --> 00:16:51.029
advocate but there are lots of choices
to be making when using the NDK as well

00:16:51.029 --> 00:16:51.039
to be making when using the NDK as well
 

00:16:51.039 --> 00:16:56.869
to be making when using the NDK as well
as some updates I'd like to highlight so

00:16:56.869 --> 00:16:56.879
as some updates I'd like to highlight so
 

00:16:56.879 --> 00:16:59.369
as some updates I'd like to highlight so
we have a couple of samples here and I

00:16:59.369 --> 00:16:59.379
we have a couple of samples here and I
 

00:16:59.379 --> 00:17:00.569
we have a couple of samples here and I
wanted it I wanted to show you them

00:17:00.569 --> 00:17:00.579
wanted it I wanted to show you them
 

00:17:00.579 --> 00:17:04.110
wanted it I wanted to show you them
let's see on this on this on this phone

00:17:04.110 --> 00:17:04.120
let's see on this on this on this phone
 

00:17:04.120 --> 00:17:06.480
let's see on this on this on this phone
I have up here and this is this is

00:17:06.480 --> 00:17:06.490
I have up here and this is this is
 

00:17:06.490 --> 00:17:09.149
I have up here and this is this is
actually running the n Developer Preview

00:17:09.149 --> 00:17:09.159
actually running the n Developer Preview
 

00:17:09.159 --> 00:17:12.809
actually running the n Developer Preview
and there is a really cool NDK sample we

00:17:12.809 --> 00:17:12.819
and there is a really cool NDK sample we
 

00:17:12.819 --> 00:17:14.460
and there is a really cool NDK sample we
have up here called more teapots and you

00:17:14.460 --> 00:17:14.470
have up here called more teapots and you
 

00:17:14.470 --> 00:17:16.980
have up here called more teapots and you
can see a normal mode it runs at 60

00:17:16.980 --> 00:17:16.990
can see a normal mode it runs at 60
 

00:17:16.990 --> 00:17:18.360
can see a normal mode it runs at 60
frames per second this thing uses

00:17:18.360 --> 00:17:18.370
frames per second this thing uses
 

00:17:18.370 --> 00:17:19.860
frames per second this thing uses
geometry instancing

00:17:19.860 --> 00:17:19.870
geometry instancing
 

00:17:19.870 --> 00:17:21.240
geometry instancing
to get actually pretty decent

00:17:21.240 --> 00:17:21.250
to get actually pretty decent
 

00:17:21.250 --> 00:17:26.399
to get actually pretty decent
performance running even with you know

00:17:26.399 --> 00:17:26.409
performance running even with you know
 

00:17:26.409 --> 00:17:29.909
performance running even with you know
fairly fairly a lot of teapots flying

00:17:29.909 --> 00:17:29.919
fairly fairly a lot of teapots flying
 

00:17:29.919 --> 00:17:32.669
fairly fairly a lot of teapots flying
around basically and if we switch over

00:17:32.669 --> 00:17:32.679
around basically and if we switch over
 

00:17:32.679 --> 00:17:35.249
around basically and if we switch over
to this to the laptop you can say I've

00:17:35.249 --> 00:17:35.259
to this to the laptop you can say I've
 

00:17:35.259 --> 00:17:35.850
to this to the laptop you can say I've
actually take

00:17:35.850 --> 00:17:35.860
actually take
 

00:17:35.860 --> 00:17:38.120
actually take
this trace of this now how many people

00:17:38.120 --> 00:17:38.130
this trace of this now how many people
 

00:17:38.130 --> 00:17:40.860
this trace of this now how many people
here have actually used this trace I

00:17:40.860 --> 00:17:40.870
here have actually used this trace I
 

00:17:40.870 --> 00:17:42.510
here have actually used this trace I
want to see a show of hands because this

00:17:42.510 --> 00:17:42.520
want to see a show of hands because this
 

00:17:42.520 --> 00:17:43.919
want to see a show of hands because this
trace is like my favorite tool ever

00:17:43.919 --> 00:17:43.929
trace is like my favorite tool ever
 

00:17:43.929 --> 00:17:47.460
trace is like my favorite tool ever
almost it is it is pretty awesome and

00:17:47.460 --> 00:17:47.470
almost it is it is pretty awesome and
 

00:17:47.470 --> 00:17:49.560
almost it is it is pretty awesome and
it's kind of hard to understand

00:17:49.560 --> 00:17:49.570
it's kind of hard to understand
 

00:17:49.570 --> 00:17:50.880
it's kind of hard to understand
completely what's going on when you're

00:17:50.880 --> 00:17:50.890
completely what's going on when you're
 

00:17:50.890 --> 00:17:52.950
completely what's going on when you're
just looking at it here so so basically

00:17:52.950 --> 00:17:52.960
just looking at it here so so basically
 

00:17:52.960 --> 00:17:55.799
just looking at it here so so basically
you can see that there's this inside of

00:17:55.799 --> 00:17:55.809
you can see that there's this inside of
 

00:17:55.809 --> 00:17:57.570
you can see that there's this inside of
my more teapots application I've got

00:17:57.570 --> 00:17:57.580
my more teapots application I've got
 

00:17:57.580 --> 00:18:01.410
my more teapots application I've got
thread 94-91 and inside that I can see

00:18:01.410 --> 00:18:01.420
thread 94-91 and inside that I can see
 

00:18:01.420 --> 00:18:04.680
thread 94-91 and inside that I can see
egl swap buffers with damage khr and a

00:18:04.680 --> 00:18:04.690
egl swap buffers with damage khr and a
 

00:18:04.690 --> 00:18:06.990
egl swap buffers with damage khr and a
queue buffer and then if we look also

00:18:06.990 --> 00:18:07.000
queue buffer and then if we look also
 

00:18:07.000 --> 00:18:09.840
queue buffer and then if we look also
inside of our surface flinger we can

00:18:09.840 --> 00:18:09.850
inside of our surface flinger we can
 

00:18:09.850 --> 00:18:11.580
inside of our surface flinger we can
actually see that there's a business

00:18:11.580 --> 00:18:11.590
actually see that there's a business
 

00:18:11.590 --> 00:18:12.900
actually see that there's a business
there's a thread that's tied to that as

00:18:12.900 --> 00:18:12.910
there's a thread that's tied to that as
 

00:18:12.910 --> 00:18:14.520
there's a thread that's tied to that as
well that's that's responsible for

00:18:14.520 --> 00:18:14.530
well that's that's responsible for
 

00:18:14.530 --> 00:18:16.980
well that's that's responsible for
updating that surface but we can do a

00:18:16.980 --> 00:18:16.990
updating that surface but we can do a
 

00:18:16.990 --> 00:18:19.650
updating that surface but we can do a
lot better and let me show you a little

00:18:19.650 --> 00:18:19.660
lot better and let me show you a little
 

00:18:19.660 --> 00:18:21.720
lot better and let me show you a little
bit of what what can what we can do okay

00:18:21.720 --> 00:18:21.730
bit of what what can what we can do okay
 

00:18:21.730 --> 00:18:29.460
bit of what what can what we can do okay
back to the slides for a second so oh I

00:18:29.460 --> 00:18:29.470
back to the slides for a second so oh I
 

00:18:29.470 --> 00:18:30.840
back to the slides for a second so oh I
I didn't want to go over a few more

00:18:30.840 --> 00:18:30.850
I didn't want to go over a few more
 

00:18:30.850 --> 00:18:32.310
I didn't want to go over a few more
things here but I'll do that later okay

00:18:32.310 --> 00:18:32.320
things here but I'll do that later okay
 

00:18:32.320 --> 00:18:35.370
things here but I'll do that later okay
so what we can do start off is let's get

00:18:35.370 --> 00:18:35.380
so what we can do start off is let's get
 

00:18:35.380 --> 00:18:37.080
so what we can do start off is let's get
rid of that ugly name we can actually

00:18:37.080 --> 00:18:37.090
rid of that ugly name we can actually
 

00:18:37.090 --> 00:18:39.150
rid of that ugly name we can actually
name our threads in this case the code

00:18:39.150 --> 00:18:39.160
name our threads in this case the code
 

00:18:39.160 --> 00:18:41.970
name our threads in this case the code
is actually attaching to the VM to the

00:18:41.970 --> 00:18:41.980
is actually attaching to the VM to the
 

00:18:41.980 --> 00:18:44.820
is actually attaching to the VM to the
runtime and so you can see here that we

00:18:44.820 --> 00:18:44.830
runtime and so you can see here that we
 

00:18:44.830 --> 00:18:47.250
runtime and so you can see here that we
actually are using this attached current

00:18:47.250 --> 00:18:47.260
actually are using this attached current
 

00:18:47.260 --> 00:18:49.980
actually are using this attached current
thread with attach args and if we do

00:18:49.980 --> 00:18:49.990
thread with attach args and if we do
 

00:18:49.990 --> 00:18:53.220
thread with attach args and if we do
that and let's see if we can switch back

00:18:53.220 --> 00:18:53.230
that and let's see if we can switch back
 

00:18:53.230 --> 00:18:57.060
that and let's see if we can switch back
to let me see back to the laptop and

00:18:57.060 --> 00:18:57.070
to let me see back to the laptop and
 

00:18:57.070 --> 00:18:58.730
to let me see back to the laptop and
I'll show you kind of two things here

00:18:58.730 --> 00:18:58.740
I'll show you kind of two things here
 

00:18:58.740 --> 00:19:01.500
I'll show you kind of two things here
one is that I've actually added

00:19:01.500 --> 00:19:01.510
one is that I've actually added
 

00:19:01.510 --> 00:19:03.810
one is that I've actually added
something called too many teapots so

00:19:03.810 --> 00:19:03.820
something called too many teapots so
 

00:19:03.820 --> 00:19:05.760
something called too many teapots so
this is this is like instead of 512

00:19:05.760 --> 00:19:05.770
this is this is like instead of 512
 

00:19:05.770 --> 00:19:07.110
this is this is like instead of 512
which the regular demo has we're now

00:19:07.110 --> 00:19:07.120
which the regular demo has we're now
 

00:19:07.120 --> 00:19:10.350
which the regular demo has we're now
looking at one that's rendering 4096

00:19:10.350 --> 00:19:10.360
looking at one that's rendering 4096
 

00:19:10.360 --> 00:19:11.880
looking at one that's rendering 4096
teapots which is actually way too much

00:19:11.880 --> 00:19:11.890
teapots which is actually way too much
 

00:19:11.890 --> 00:19:17.070
teapots which is actually way too much
for this poor sad Nexus 6p to do and

00:19:17.070 --> 00:19:17.080
for this poor sad Nexus 6p to do and
 

00:19:17.080 --> 00:19:17.940
for this poor sad Nexus 6p to do and
you'll see a couple of things

00:19:17.940 --> 00:19:17.950
you'll see a couple of things
 

00:19:17.950 --> 00:19:19.560
you'll see a couple of things
interesting one is that we now see that

00:19:19.560 --> 00:19:19.570
interesting one is that we now see that
 

00:19:19.570 --> 00:19:22.289
interesting one is that we now see that
CPU for here is actually active and

00:19:22.289 --> 00:19:22.299
CPU for here is actually active and
 

00:19:22.299 --> 00:19:25.440
CPU for here is actually active and
that's really really bad because CPU for

00:19:25.440 --> 00:19:25.450
that's really really bad because CPU for
 

00:19:25.450 --> 00:19:26.730
that's really really bad because CPU for
it turns out is one of the high

00:19:26.730 --> 00:19:26.740
it turns out is one of the high
 

00:19:26.740 --> 00:19:28.770
it turns out is one of the high
performance CPUs that just absolutely

00:19:28.770 --> 00:19:28.780
performance CPUs that just absolutely
 

00:19:28.780 --> 00:19:30.750
performance CPUs that just absolutely
will cause the device to thermally

00:19:30.750 --> 00:19:30.760
will cause the device to thermally
 

00:19:30.760 --> 00:19:32.549
will cause the device to thermally
throttle relatively quickly especially

00:19:32.549 --> 00:19:32.559
throttle relatively quickly especially
 

00:19:32.559 --> 00:19:33.990
throttle relatively quickly especially
if someone has it inside a nice

00:19:33.990 --> 00:19:34.000
if someone has it inside a nice
 

00:19:34.000 --> 00:19:37.710
if someone has it inside a nice
insulating case which of course a lot of

00:19:37.710 --> 00:19:37.720
insulating case which of course a lot of
 

00:19:37.720 --> 00:19:40.320
insulating case which of course a lot of
people do in fact I did this with and

00:19:40.320 --> 00:19:40.330
people do in fact I did this with and
 

00:19:40.330 --> 00:19:42.180
people do in fact I did this with and
without cases and I got about 10% better

00:19:42.180 --> 00:19:42.190
without cases and I got about 10% better
 

00:19:42.190 --> 00:19:43.680
without cases and I got about 10% better
frame rates once I took it out of a case

00:19:43.680 --> 00:19:43.690
frame rates once I took it out of a case
 

00:19:43.690 --> 00:19:45.810
frame rates once I took it out of a case
there to give you an idea of how these

00:19:45.810 --> 00:19:45.820
there to give you an idea of how these
 

00:19:45.820 --> 00:19:47.680
there to give you an idea of how these
things actually matter

00:19:47.680 --> 00:19:47.690
things actually matter
 

00:19:47.690 --> 00:19:49.510
things actually matter
and but the really cool thing is as you

00:19:49.510 --> 00:19:49.520
and but the really cool thing is as you
 

00:19:49.520 --> 00:19:52.600
and but the really cool thing is as you
can see if we go down here should be

00:19:52.600 --> 00:19:52.610
can see if we go down here should be
 

00:19:52.610 --> 00:19:55.090
can see if we go down here should be
here maybe it's not in this one it'll be

00:19:55.090 --> 00:19:55.100
here maybe it's not in this one it'll be
 

00:19:55.100 --> 00:19:56.950
here maybe it's not in this one it'll be
in the next one this is supposed to have

00:19:56.950 --> 00:19:56.960
in the next one this is supposed to have
 

00:19:56.960 --> 00:20:01.060
in the next one this is supposed to have
a name threat Oh mmm this is this is

00:20:01.060 --> 00:20:01.070
a name threat Oh mmm this is this is
 

00:20:01.070 --> 00:20:02.800
a name threat Oh mmm this is this is
this is the the challenge with with

00:20:02.800 --> 00:20:02.810
this is the the challenge with with
 

00:20:02.810 --> 00:20:04.540
this is the the challenge with with
getting systrace and sometimes I miss

00:20:04.540 --> 00:20:04.550
getting systrace and sometimes I miss
 

00:20:04.550 --> 00:20:08.770
getting systrace and sometimes I miss
things but any case this will actually

00:20:08.770 --> 00:20:08.780
things but any case this will actually
 

00:20:08.780 --> 00:20:11.980
things but any case this will actually
show the threat name I swear okay let me

00:20:11.980 --> 00:20:11.990
show the threat name I swear okay let me
 

00:20:11.990 --> 00:20:13.210
show the threat name I swear okay let me
let me show you a couple of other things

00:20:13.210 --> 00:20:13.220
let me show you a couple of other things
 

00:20:13.220 --> 00:20:18.190
let me show you a couple of other things
on the on the actual device itself so so

00:20:18.190 --> 00:20:18.200
on the on the actual device itself so so
 

00:20:18.200 --> 00:20:19.750
on the on the actual device itself so so
what what is why this is the too many

00:20:19.750 --> 00:20:19.760
what what is why this is the too many
 

00:20:19.760 --> 00:20:21.670
what what is why this is the too many
teapots demo as you can see it's running

00:20:21.670 --> 00:20:21.680
teapots demo as you can see it's running
 

00:20:21.680 --> 00:20:24.490
teapots demo as you can see it's running
at about about twelve frames a second

00:20:24.490 --> 00:20:24.500
at about about twelve frames a second
 

00:20:24.500 --> 00:20:26.500
at about about twelve frames a second
which is really not very good but let's

00:20:26.500 --> 00:20:26.510
which is really not very good but let's
 

00:20:26.510 --> 00:20:30.070
which is really not very good but let's
say we absolutely wanted to put 4096

00:20:30.070 --> 00:20:30.080
say we absolutely wanted to put 4096
 

00:20:30.080 --> 00:20:32.710
say we absolutely wanted to put 4096
highly including teapots into our into

00:20:32.710 --> 00:20:32.720
highly including teapots into our into
 

00:20:32.720 --> 00:20:35.320
highly including teapots into our into
our game running at you know some

00:20:35.320 --> 00:20:35.330
our game running at you know some
 

00:20:35.330 --> 00:20:37.870
our game running at you know some
reasonable resolution okay how would we

00:20:37.870 --> 00:20:37.880
reasonable resolution okay how would we
 

00:20:37.880 --> 00:20:39.640
reasonable resolution okay how would we
actually use what's built into the NDK

00:20:39.640 --> 00:20:39.650
actually use what's built into the NDK
 

00:20:39.650 --> 00:20:41.230
actually use what's built into the NDK
to help us with that so we can switch

00:20:41.230 --> 00:20:41.240
to help us with that so we can switch
 

00:20:41.240 --> 00:20:42.400
to help us with that so we can switch
back to the slides I'll talk a little

00:20:42.400 --> 00:20:42.410
back to the slides I'll talk a little
 

00:20:42.410 --> 00:20:45.430
back to the slides I'll talk a little
bit about that and what we can do first

00:20:45.430 --> 00:20:45.440
bit about that and what we can do first
 

00:20:45.440 --> 00:20:46.660
bit about that and what we can do first
of all we want to know what's going on

00:20:46.660 --> 00:20:46.670
of all we want to know what's going on
 

00:20:46.670 --> 00:20:48.880
of all we want to know what's going on
with performance so one of the cool

00:20:48.880 --> 00:20:48.890
with performance so one of the cool
 

00:20:48.890 --> 00:20:51.100
with performance so one of the cool
things we've actually done is we've

00:20:51.100 --> 00:20:51.110
things we've actually done is we've
 

00:20:51.110 --> 00:20:54.400
things we've actually done is we've
actually created a native trace API and

00:20:54.400 --> 00:20:54.410
actually created a native trace API and
 

00:20:54.410 --> 00:20:56.140
actually created a native trace API and
this has actually been in the platform

00:20:56.140 --> 00:20:56.150
this has actually been in the platform
 

00:20:56.150 --> 00:20:58.480
this has actually been in the platform
ever since M so we've always had to

00:20:58.480 --> 00:20:58.490
ever since M so we've always had to
 

00:20:58.490 --> 00:21:00.070
ever since M so we've always had to
begin and end sector with it always

00:21:00.070 --> 00:21:00.080
begin and end sector with it always
 

00:21:00.080 --> 00:21:01.300
begin and end sector with it always
we've had beginning in section for

00:21:01.300 --> 00:21:01.310
we've had beginning in section for
 

00:21:01.310 --> 00:21:02.680
we've had beginning in section for
several version which allows you to

00:21:02.680 --> 00:21:02.690
several version which allows you to
 

00:21:02.690 --> 00:21:04.660
several version which allows you to
actually annotate these sis traces but

00:21:04.660 --> 00:21:04.670
actually annotate these sis traces but
 

00:21:04.670 --> 00:21:07.630
actually annotate these sis traces but
now we actually have a native API to do

00:21:07.630 --> 00:21:07.640
now we actually have a native API to do
 

00:21:07.640 --> 00:21:09.700
now we actually have a native API to do
it for you so we can actually see not

00:21:09.700 --> 00:21:09.710
it for you so we can actually see not
 

00:21:09.710 --> 00:21:12.160
it for you so we can actually see not
just like the khr swap buffers thing but

00:21:12.160 --> 00:21:12.170
just like the khr swap buffers thing but
 

00:21:12.170 --> 00:21:14.140
just like the khr swap buffers thing but
actually individual sections of what's

00:21:14.140 --> 00:21:14.150
actually individual sections of what's
 

00:21:14.150 --> 00:21:15.880
actually individual sections of what's
going on in our engine which is really

00:21:15.880 --> 00:21:15.890
going on in our engine which is really
 

00:21:15.890 --> 00:21:17.380
going on in our engine which is really
really awesome and you just do and a

00:21:17.380 --> 00:21:17.390
really awesome and you just do and a
 

00:21:17.390 --> 00:21:19.750
really awesome and you just do and a
trace begin section a trace end section

00:21:19.750 --> 00:21:19.760
trace begin section a trace end section
 

00:21:19.760 --> 00:21:21.250
trace begin section a trace end section
it's pretty lightweight it's a lot

00:21:21.250 --> 00:21:21.260
it's pretty lightweight it's a lot
 

00:21:21.260 --> 00:21:22.660
it's pretty lightweight it's a lot
lighter weight than doing a log-log

00:21:22.660 --> 00:21:22.670
lighter weight than doing a log-log
 

00:21:22.670 --> 00:21:26.590
lighter weight than doing a log-log
statement and you'll actually see all of

00:21:26.590 --> 00:21:26.600
statement and you'll actually see all of
 

00:21:26.600 --> 00:21:28.330
statement and you'll actually see all of
these things show up in the graph really

00:21:28.330 --> 00:21:28.340
these things show up in the graph really
 

00:21:28.340 --> 00:21:31.690
these things show up in the graph really
really nicely now one of the things we

00:21:31.690 --> 00:21:31.700
really nicely now one of the things we
 

00:21:31.700 --> 00:21:33.640
really nicely now one of the things we
can do really really easily is to reduce

00:21:33.640 --> 00:21:33.650
can do really really easily is to reduce
 

00:21:33.650 --> 00:21:36.190
can do really really easily is to reduce
the size of our render target now what's

00:21:36.190 --> 00:21:36.200
the size of our render target now what's
 

00:21:36.200 --> 00:21:37.870
the size of our render target now what's
cool is that actually using the asset

00:21:37.870 --> 00:21:37.880
cool is that actually using the asset
 

00:21:37.880 --> 00:21:39.400
cool is that actually using the asset
manager API is that are built into the

00:21:39.400 --> 00:21:39.410
manager API is that are built into the
 

00:21:39.410 --> 00:21:41.080
manager API is that are built into the
NDK we can actually get the density of

00:21:41.080 --> 00:21:41.090
NDK we can actually get the density of
 

00:21:41.090 --> 00:21:43.230
NDK we can actually get the density of
the screen and that's useful because

00:21:43.230 --> 00:21:43.240
the screen and that's useful because
 

00:21:43.240 --> 00:21:45.790
the screen and that's useful because
obviously we you know we might want to

00:21:45.790 --> 00:21:45.800
obviously we you know we might want to
 

00:21:45.800 --> 00:21:47.830
obviously we you know we might want to
say our application doesn't need to

00:21:47.830 --> 00:21:47.840
say our application doesn't need to
 

00:21:47.840 --> 00:21:50.350
say our application doesn't need to
render in anything higher density than

00:21:50.350 --> 00:21:50.360
render in anything higher density than
 

00:21:50.360 --> 00:21:52.570
render in anything higher density than
hdpi but that's nice because it still

00:21:52.570 --> 00:21:52.580
hdpi but that's nice because it still
 

00:21:52.580 --> 00:21:55.150
hdpi but that's nice because it still
actually preserves the screen size it

00:21:55.150 --> 00:21:55.160
actually preserves the screen size it
 

00:21:55.160 --> 00:21:57.340
actually preserves the screen size it
means that we're actually really truly

00:21:57.340 --> 00:21:57.350
means that we're actually really truly
 

00:21:57.350 --> 00:21:58.900
means that we're actually really truly
giving the giving the user a decent

00:21:58.900 --> 00:21:58.910
giving the giving the user a decent
 

00:21:58.910 --> 00:22:00.400
giving the giving the user a decent
experience by using density as our

00:22:00.400 --> 00:22:00.410
experience by using density as our
 

00:22:00.410 --> 00:22:03.130
experience by using density as our
target so let's let's let's switch back

00:22:03.130 --> 00:22:03.140
target so let's let's let's switch back
 

00:22:03.140 --> 00:22:06.040
target so let's let's let's switch back
to the the phone here and I can show off

00:22:06.040 --> 00:22:06.050
to the the phone here and I can show off
 

00:22:06.050 --> 00:22:08.020
to the the phone here and I can show off
the first thing we can do here so this

00:22:08.020 --> 00:22:08.030
the first thing we can do here so this
 

00:22:08.030 --> 00:22:09.670
the first thing we can do here so this
is just scaling the target obviously

00:22:09.670 --> 00:22:09.680
is just scaling the target obviously
 

00:22:09.680 --> 00:22:10.960
is just scaling the target obviously
that's not a very good user experience

00:22:10.960 --> 00:22:10.970
that's not a very good user experience
 

00:22:10.970 --> 00:22:13.750
that's not a very good user experience
here but that's actually scaling it

00:22:13.750 --> 00:22:13.760
here but that's actually scaling it
 

00:22:13.760 --> 00:22:15.130
here but that's actually scaling it
based on density so I'm now use I'm

00:22:15.130 --> 00:22:15.140
based on density so I'm now use I'm
 

00:22:15.140 --> 00:22:17.070
based on density so I'm now use I'm
actually now rendering the screen at

00:22:17.070 --> 00:22:17.080
actually now rendering the screen at
 

00:22:17.080 --> 00:22:21.940
actually now rendering the screen at
old-school hdpi just by using just by

00:22:21.940 --> 00:22:21.950
old-school hdpi just by using just by
 

00:22:21.950 --> 00:22:23.530
old-school hdpi just by using just by
using the density metric there to scale

00:22:23.530 --> 00:22:23.540
using the density metric there to scale
 

00:22:23.540 --> 00:22:25.180
using the density metric there to scale
but obviously that's not very good but

00:22:25.180 --> 00:22:25.190
but obviously that's not very good but
 

00:22:25.190 --> 00:22:29.260
but obviously that's not very good but
we can do something better and you see

00:22:29.260 --> 00:22:29.270
we can do something better and you see
 

00:22:29.270 --> 00:22:30.460
we can do something better and you see
we're getting a good performance game

00:22:30.460 --> 00:22:30.470
we're getting a good performance game
 

00:22:30.470 --> 00:22:32.200
we're getting a good performance game
we're about 25 frames a second here

00:22:32.200 --> 00:22:32.210
we're about 25 frames a second here
 

00:22:32.210 --> 00:22:34.510
we're about 25 frames a second here
however we can actually make it even

00:22:34.510 --> 00:22:34.520
however we can actually make it even
 

00:22:34.520 --> 00:22:36.070
however we can actually make it even
faster and actually make it a better

00:22:36.070 --> 00:22:36.080
faster and actually make it a better
 

00:22:36.080 --> 00:22:37.960
faster and actually make it a better
user experience all at the same time and

00:22:37.960 --> 00:22:37.970
user experience all at the same time and
 

00:22:37.970 --> 00:22:40.270
user experience all at the same time and
by taking advantage of the compositing

00:22:40.270 --> 00:22:40.280
by taking advantage of the compositing
 

00:22:40.280 --> 00:22:42.250
by taking advantage of the compositing
engine inside of surface flinger to do

00:22:42.250 --> 00:22:42.260
engine inside of surface flinger to do
 

00:22:42.260 --> 00:22:43.960
engine inside of surface flinger to do
some of the work for us and actually

00:22:43.960 --> 00:22:43.970
some of the work for us and actually
 

00:22:43.970 --> 00:22:45.250
some of the work for us and actually
save some memory bandwidth in the

00:22:45.250 --> 00:22:45.260
save some memory bandwidth in the
 

00:22:45.260 --> 00:22:50.020
save some memory bandwidth in the
process so we can we can actually let's

00:22:50.020 --> 00:22:50.030
process so we can we can actually let's
 

00:22:50.030 --> 00:22:54.760
process so we can we can actually let's
see did I yeah let me switch back to the

00:22:54.760 --> 00:22:54.770
see did I yeah let me switch back to the
 

00:22:54.770 --> 00:22:58.690
see did I yeah let me switch back to the
slide here for one moment okay so this

00:22:58.690 --> 00:22:58.700
slide here for one moment okay so this
 

00:22:58.700 --> 00:23:00.310
slide here for one moment okay so this
is what we actually do so in addition so

00:23:00.310 --> 00:23:00.320
is what we actually do so in addition so
 

00:23:00.320 --> 00:23:01.720
is what we actually do so in addition so
once we've gotten that we know you know

00:23:01.720 --> 00:23:01.730
once we've gotten that we know you know
 

00:23:01.730 --> 00:23:04.000
once we've gotten that we know you know
the ratio that we want all we have to do

00:23:04.000 --> 00:23:04.010
the ratio that we want all we have to do
 

00:23:04.010 --> 00:23:06.520
the ratio that we want all we have to do
is call a native window get out get the

00:23:06.520 --> 00:23:06.530
is call a native window get out get the
 

00:23:06.530 --> 00:23:07.930
is call a native window get out get the
right format so we don't want to change

00:23:07.930 --> 00:23:07.940
right format so we don't want to change
 

00:23:07.940 --> 00:23:09.430
right format so we don't want to change
the format of our native window when we

00:23:09.430 --> 00:23:09.440
the format of our native window when we
 

00:23:09.440 --> 00:23:11.260
the format of our native window when we
do this and then we can call set buffers

00:23:11.260 --> 00:23:11.270
do this and then we can call set buffers
 

00:23:11.270 --> 00:23:13.360
do this and then we can call set buffers
geometry and this is pretty cool because

00:23:13.360 --> 00:23:13.370
geometry and this is pretty cool because
 

00:23:13.370 --> 00:23:15.040
geometry and this is pretty cool because
what it'll actually do for us is it'll

00:23:15.040 --> 00:23:15.050
what it'll actually do for us is it'll
 

00:23:15.050 --> 00:23:16.840
what it'll actually do for us is it'll
automatically scale that render target

00:23:16.840 --> 00:23:16.850
automatically scale that render target
 

00:23:16.850 --> 00:23:20.470
automatically scale that render target
for us and make things a lot happier and

00:23:20.470 --> 00:23:20.480
for us and make things a lot happier and
 

00:23:20.480 --> 00:23:22.120
for us and make things a lot happier and
a lot more friendly and actually when

00:23:22.120 --> 00:23:22.130
a lot more friendly and actually when
 

00:23:22.130 --> 00:23:23.140
a lot more friendly and actually when
you're when you're looking at this on

00:23:23.140 --> 00:23:23.150
you're when you're looking at this on
 

00:23:23.150 --> 00:23:24.190
you're when you're looking at this on
the device unless you're looking

00:23:24.190 --> 00:23:24.200
the device unless you're looking
 

00:23:24.200 --> 00:23:26.410
the device unless you're looking
carefully it's really really difficult

00:23:26.410 --> 00:23:26.420
carefully it's really really difficult
 

00:23:26.420 --> 00:23:28.240
carefully it's really really difficult
to notice what's going on here so we can

00:23:28.240 --> 00:23:28.250
to notice what's going on here so we can
 

00:23:28.250 --> 00:23:30.610
to notice what's going on here so we can
switch back to the phone and you can see

00:23:30.610 --> 00:23:30.620
switch back to the phone and you can see
 

00:23:30.620 --> 00:23:32.650
switch back to the phone and you can see
what I'm talking about so now this is

00:23:32.650 --> 00:23:32.660
what I'm talking about so now this is
 

00:23:32.660 --> 00:23:35.670
what I'm talking about so now this is
once again this is using the internal

00:23:35.670 --> 00:23:35.680
once again this is using the internal
 

00:23:35.680 --> 00:23:37.510
once again this is using the internal
compositing engine to actually scale

00:23:37.510 --> 00:23:37.520
compositing engine to actually scale
 

00:23:37.520 --> 00:23:38.530
compositing engine to actually scale
things up and you see we're actually

00:23:38.530 --> 00:23:38.540
things up and you see we're actually
 

00:23:38.540 --> 00:23:40.570
things up and you see we're actually
doing better than we were even rendering

00:23:40.570 --> 00:23:40.580
doing better than we were even rendering
 

00:23:40.580 --> 00:23:41.920
doing better than we were even rendering
in just a little corner of the window

00:23:41.920 --> 00:23:41.930
in just a little corner of the window
 

00:23:41.930 --> 00:23:44.530
in just a little corner of the window
because it's actually using less fill

00:23:44.530 --> 00:23:44.540
because it's actually using less fill
 

00:23:44.540 --> 00:23:46.300
because it's actually using less fill
and the other thing that's really cool

00:23:46.300 --> 00:23:46.310
and the other thing that's really cool
 

00:23:46.310 --> 00:23:49.360
and the other thing that's really cool
about this is the the fps is actually

00:23:49.360 --> 00:23:49.370
about this is the the fps is actually
 

00:23:49.370 --> 00:23:51.130
about this is the the fps is actually
being rendered using a pop-up window and

00:23:51.130 --> 00:23:51.140
being rendered using a pop-up window and
 

00:23:51.140 --> 00:23:53.020
being rendered using a pop-up window and
that pop-up window is actually running

00:23:53.020 --> 00:23:53.030
that pop-up window is actually running
 

00:23:53.030 --> 00:23:55.180
that pop-up window is actually running
at the full device resolution so that

00:23:55.180 --> 00:23:55.190
at the full device resolution so that
 

00:23:55.190 --> 00:23:56.290
at the full device resolution so that
text that you're seeing there is

00:23:56.290 --> 00:23:56.300
text that you're seeing there is
 

00:23:56.300 --> 00:23:58.450
text that you're seeing there is
actually rendered at the super high DPI

00:23:58.450 --> 00:23:58.460
actually rendered at the super high DPI
 

00:23:58.460 --> 00:24:00.700
actually rendered at the super high DPI
stuff and only the background is

00:24:00.700 --> 00:24:00.710
stuff and only the background is
 

00:24:00.710 --> 00:24:02.560
stuff and only the background is
actually being rendered at our lower

00:24:02.560 --> 00:24:02.570
actually being rendered at our lower
 

00:24:02.570 --> 00:24:04.330
actually being rendered at our lower
resolution and the compositing engine on

00:24:04.330 --> 00:24:04.340
resolution and the compositing engine on
 

00:24:04.340 --> 00:24:06.400
resolution and the compositing engine on
a device like this can do enough windows

00:24:06.400 --> 00:24:06.410
a device like this can do enough windows
 

00:24:06.410 --> 00:24:07.930
a device like this can do enough windows
that we're actually getting the benefit

00:24:07.930 --> 00:24:07.940
that we're actually getting the benefit
 

00:24:07.940 --> 00:24:09.640
that we're actually getting the benefit
of that so we have a HUD running it

00:24:09.640 --> 00:24:09.650
of that so we have a HUD running it
 

00:24:09.650 --> 00:24:10.820
of that so we have a HUD running it
really high-res

00:24:10.820 --> 00:24:10.830
really high-res
 

00:24:10.830 --> 00:24:12.560
really high-res
background running at a lower res and

00:24:12.560 --> 00:24:12.570
background running at a lower res and
 

00:24:12.570 --> 00:24:14.980
background running at a lower res and
you can barely tell because our eyes

00:24:14.980 --> 00:24:14.990
you can barely tell because our eyes
 

00:24:14.990 --> 00:24:18.409
you can barely tell because our eyes
seeing characters with a bunch of

00:24:18.409 --> 00:24:18.419
seeing characters with a bunch of
 

00:24:18.419 --> 00:24:20.210
seeing characters with a bunch of
jaggies it's really noticeable to us but

00:24:20.210 --> 00:24:20.220
jaggies it's really noticeable to us but
 

00:24:20.220 --> 00:24:21.649
jaggies it's really noticeable to us but
seeing a background it's a little lower

00:24:21.649 --> 00:24:21.659
seeing a background it's a little lower
 

00:24:21.659 --> 00:24:23.870
seeing a background it's a little lower
resolution not so bad this is actually a

00:24:23.870 --> 00:24:23.880
resolution not so bad this is actually a
 

00:24:23.880 --> 00:24:25.070
resolution not so bad this is actually a
cool trick I don't think I've ever seen

00:24:25.070 --> 00:24:25.080
cool trick I don't think I've ever seen
 

00:24:25.080 --> 00:24:27.620
cool trick I don't think I've ever seen
anyone use this in a shipping app but it

00:24:27.620 --> 00:24:27.630
anyone use this in a shipping app but it
 

00:24:27.630 --> 00:24:29.360
anyone use this in a shipping app but it
can be done and it works pretty well

00:24:29.360 --> 00:24:29.370
can be done and it works pretty well
 

00:24:29.370 --> 00:24:31.519
can be done and it works pretty well
the one trick about this one is it

00:24:31.519 --> 00:24:31.529
the one trick about this one is it
 

00:24:31.529 --> 00:24:32.840
the one trick about this one is it
really helps to be an immersive mode

00:24:32.840 --> 00:24:32.850
really helps to be an immersive mode
 

00:24:32.850 --> 00:24:36.560
really helps to be an immersive mode
when you're doing this because every the

00:24:36.560 --> 00:24:36.570
when you're doing this because every the
 

00:24:36.570 --> 00:24:39.409
when you're doing this because every the
the pull downs for the notification and

00:24:39.409 --> 00:24:39.419
the pull downs for the notification and
 

00:24:39.419 --> 00:24:41.509
the pull downs for the notification and
for the the bottom of the system buttons

00:24:41.509 --> 00:24:41.519
for the the bottom of the system buttons
 

00:24:41.519 --> 00:24:42.980
for the the bottom of the system buttons
at the bottom actually also take Windows

00:24:42.980 --> 00:24:42.990
at the bottom actually also take Windows
 

00:24:42.990 --> 00:24:44.600
at the bottom actually also take Windows
so by going into immersive mode you

00:24:44.600 --> 00:24:44.610
so by going into immersive mode you
 

00:24:44.610 --> 00:24:46.519
so by going into immersive mode you
actually free the system up to have more

00:24:46.519 --> 00:24:46.529
actually free the system up to have more
 

00:24:46.529 --> 00:24:48.440
actually free the system up to have more
windows to use for your app in the

00:24:48.440 --> 00:24:48.450
windows to use for your app in the
 

00:24:48.450 --> 00:24:51.590
windows to use for your app in the
compositor okay so we can actually go

00:24:51.590 --> 00:24:51.600
compositor okay so we can actually go
 

00:24:51.600 --> 00:24:57.110
compositor okay so we can actually go
back to the slides now okay so another

00:24:57.110 --> 00:24:57.120
back to the slides now okay so another
 

00:24:57.120 --> 00:24:59.000
back to the slides now okay so another
thing we could do is actually say let's

00:24:59.000 --> 00:24:59.010
thing we could do is actually say let's
 

00:24:59.010 --> 00:25:01.430
thing we could do is actually say let's
try to cap the frame rate and we

00:25:01.430 --> 00:25:01.440
try to cap the frame rate and we
 

00:25:01.440 --> 00:25:02.960
try to cap the frame rate and we
actually added an API called

00:25:02.960 --> 00:25:02.970
actually added an API called
 

00:25:02.970 --> 00:25:04.700
actually added an API called
choreographer and choreographer is great

00:25:04.700 --> 00:25:04.710
choreographer and choreographer is great
 

00:25:04.710 --> 00:25:06.230
choreographer and choreographer is great
it actually gives you a callback

00:25:06.230 --> 00:25:06.240
it actually gives you a callback
 

00:25:06.240 --> 00:25:08.509
it actually gives you a callback
whenever there's vsync coming in and up

00:25:08.509 --> 00:25:08.519
whenever there's vsync coming in and up
 

00:25:08.519 --> 00:25:12.049
whenever there's vsync coming in and up
until then it was only available inside

00:25:12.049 --> 00:25:12.059
until then it was only available inside
 

00:25:12.059 --> 00:25:14.930
until then it was only available inside
of managed code but inside of N we're

00:25:14.930 --> 00:25:14.940
of managed code but inside of N we're
 

00:25:14.940 --> 00:25:18.200
of managed code but inside of N we're
now opening it up for use in all of your

00:25:18.200 --> 00:25:18.210
now opening it up for use in all of your
 

00:25:18.210 --> 00:25:19.850
now opening it up for use in all of your
code inside native code and there's a

00:25:19.850 --> 00:25:19.860
code inside native code and there's a
 

00:25:19.860 --> 00:25:22.190
code inside native code and there's a
great example of this actually but let's

00:25:22.190 --> 00:25:22.200
great example of this actually but let's
 

00:25:22.200 --> 00:25:23.330
great example of this actually but let's
let me let me actually show you what

00:25:23.330 --> 00:25:23.340
let me let me actually show you what
 

00:25:23.340 --> 00:25:24.769
let me let me actually show you what
that looks like well so we can switch

00:25:24.769 --> 00:25:24.779
that looks like well so we can switch
 

00:25:24.779 --> 00:25:28.700
that looks like well so we can switch
back to the device here where is this

00:25:28.700 --> 00:25:28.710
back to the device here where is this
 

00:25:28.710 --> 00:25:29.659
back to the device here where is this
one called

00:25:29.659 --> 00:25:29.669
one called
 

00:25:29.669 --> 00:25:31.549
one called
oh maybe I don't have it on this on that

00:25:31.549 --> 00:25:31.559
oh maybe I don't have it on this on that
 

00:25:31.559 --> 00:25:35.750
oh maybe I don't have it on this on that
screen yeah there we are and so now this

00:25:35.750 --> 00:25:35.760
screen yeah there we are and so now this
 

00:25:35.760 --> 00:25:37.490
screen yeah there we are and so now this
is actually using choreographer to lock

00:25:37.490 --> 00:25:37.500
is actually using choreographer to lock
 

00:25:37.500 --> 00:25:39.350
is actually using choreographer to lock
things as close to 30 frames a second as

00:25:39.350 --> 00:25:39.360
things as close to 30 frames a second as
 

00:25:39.360 --> 00:25:40.759
things as close to 30 frames a second as
possible and you can see there it's like

00:25:40.759 --> 00:25:40.769
possible and you can see there it's like
 

00:25:40.769 --> 00:25:43.250
possible and you can see there it's like
28 29 we're still getting some jank and

00:25:43.250 --> 00:25:43.260
28 29 we're still getting some jank and
 

00:25:43.260 --> 00:25:45.049
28 29 we're still getting some jank and
you can see that it's probably running

00:25:45.049 --> 00:25:45.059
you can see that it's probably running
 

00:25:45.059 --> 00:25:46.190
you can see that it's probably running
on the thread so we're overheating

00:25:46.190 --> 00:25:46.200
on the thread so we're overheating
 

00:25:46.200 --> 00:25:48.259
on the thread so we're overheating
pretty quickly there but that's another

00:25:48.259 --> 00:25:48.269
pretty quickly there but that's another
 

00:25:48.269 --> 00:25:49.519
pretty quickly there but that's another
great thing you can do what's awesome

00:25:49.519 --> 00:25:49.529
great thing you can do what's awesome
 

00:25:49.529 --> 00:25:51.110
great thing you can do what's awesome
about choreographers a lot of people are

00:25:51.110 --> 00:25:51.120
about choreographers a lot of people are
 

00:25:51.120 --> 00:25:53.240
about choreographers a lot of people are
like their their app or game doesn't

00:25:53.240 --> 00:25:53.250
like their their app or game doesn't
 

00:25:53.250 --> 00:25:54.830
like their their app or game doesn't
need to run at 60 frames per second and

00:25:54.830 --> 00:25:54.840
need to run at 60 frames per second and
 

00:25:54.840 --> 00:25:56.899
need to run at 60 frames per second and
they'd much rather save the user battery

00:25:56.899 --> 00:25:56.909
they'd much rather save the user battery
 

00:25:56.909 --> 00:25:59.149
they'd much rather save the user battery
life not have the phone overheat in

00:25:59.149 --> 00:25:59.159
life not have the phone overheat in
 

00:25:59.159 --> 00:26:00.909
life not have the phone overheat in
their hand you know users actually

00:26:00.909 --> 00:26:00.919
their hand you know users actually
 

00:26:00.919 --> 00:26:03.440
their hand you know users actually
respond on comments like alright I

00:26:03.440 --> 00:26:03.450
respond on comments like alright I
 

00:26:03.450 --> 00:26:05.090
respond on comments like alright I
played this game I played this game and

00:26:05.090 --> 00:26:05.100
played this game I played this game and
 

00:26:05.100 --> 00:26:08.419
played this game I played this game and
I was burning up and I had no battery

00:26:08.419 --> 00:26:08.429
I was burning up and I had no battery
 

00:26:08.429 --> 00:26:10.129
I was burning up and I had no battery
left an hour later and one easy thing to

00:26:10.129 --> 00:26:10.139
left an hour later and one easy thing to
 

00:26:10.139 --> 00:26:11.539
left an hour later and one easy thing to
do is say you can even make a slider

00:26:11.539 --> 00:26:11.549
do is say you can even make a slider
 

00:26:11.549 --> 00:26:12.830
do is say you can even make a slider
saying how many watch what are the

00:26:12.830 --> 00:26:12.840
saying how many watch what are the
 

00:26:12.840 --> 00:26:14.090
saying how many watch what are the
frames you want to limit the frames per

00:26:14.090 --> 00:26:14.100
frames you want to limit the frames per
 

00:26:14.100 --> 00:26:16.399
frames you want to limit the frames per
second of your game and for a lot of

00:26:16.399 --> 00:26:16.409
second of your game and for a lot of
 

00:26:16.409 --> 00:26:18.399
second of your game and for a lot of
games that actually is huge and

00:26:18.399 --> 00:26:18.409
games that actually is huge and
 

00:26:18.409 --> 00:26:20.029
games that actually is huge and
choreographer it allows you to do that

00:26:20.029 --> 00:26:20.039
choreographer it allows you to do that
 

00:26:20.039 --> 00:26:22.370
choreographer it allows you to do that
in an extremely extremely powerful

00:26:22.370 --> 00:26:22.380
in an extremely extremely powerful
 

00:26:22.380 --> 00:26:24.800
in an extremely extremely powerful
way I mean what we're actually doing in

00:26:24.800 --> 00:26:24.810
way I mean what we're actually doing in
 

00:26:24.810 --> 00:26:25.910
way I mean what we're actually doing in
the code we can switch back to the

00:26:25.910 --> 00:26:25.920
the code we can switch back to the
 

00:26:25.920 --> 00:26:31.940
the code we can switch back to the
slides here is is basically we're

00:26:31.940 --> 00:26:31.950
slides here is is basically we're
 

00:26:31.950 --> 00:26:34.370
slides here is is basically we're
getting a frame callback and then we're

00:26:34.370 --> 00:26:34.380
getting a frame callback and then we're
 

00:26:34.380 --> 00:26:36.770
getting a frame callback and then we're
simply every other frame callback worth

00:26:36.770 --> 00:26:36.780
simply every other frame callback worth
 

00:26:36.780 --> 00:26:38.030
simply every other frame callback worth
swapping so it's pretty straightforward

00:26:38.030 --> 00:26:38.040
swapping so it's pretty straightforward
 

00:26:38.040 --> 00:26:40.250
swapping so it's pretty straightforward
this is not the most intelligent way of

00:26:40.250 --> 00:26:40.260
this is not the most intelligent way of
 

00:26:40.260 --> 00:26:42.740
this is not the most intelligent way of
doing this because you will get jitter

00:26:42.740 --> 00:26:42.750
doing this because you will get jitter
 

00:26:42.750 --> 00:26:44.390
doing this because you will get jitter
if we're not actually able to render at

00:26:44.390 --> 00:26:44.400
if we're not actually able to render at
 

00:26:44.400 --> 00:26:45.710
if we're not actually able to render at
30 frames per second this is kind of

00:26:45.710 --> 00:26:45.720
30 frames per second this is kind of
 

00:26:45.720 --> 00:26:47.450
30 frames per second this is kind of
awful but as long as we're actually able

00:26:47.450 --> 00:26:47.460
awful but as long as we're actually able
 

00:26:47.460 --> 00:26:48.680
awful but as long as we're actually able
to do this this actually works pretty

00:26:48.680 --> 00:26:48.690
to do this this actually works pretty
 

00:26:48.690 --> 00:26:51.290
to do this this actually works pretty
well and and it's actually not that hard

00:26:51.290 --> 00:26:51.300
well and and it's actually not that hard
 

00:26:51.300 --> 00:26:53.000
well and and it's actually not that hard
to make it more complicated this is just

00:26:53.000 --> 00:26:53.010
to make it more complicated this is just
 

00:26:53.010 --> 00:26:54.050
to make it more complicated this is just
the sample that we ended up writing

00:26:54.050 --> 00:26:54.060
the sample that we ended up writing
 

00:26:54.060 --> 00:26:55.820
the sample that we ended up writing
what's cool is if you do go to that QR

00:26:55.820 --> 00:26:55.830
what's cool is if you do go to that QR
 

00:26:55.830 --> 00:26:57.830
what's cool is if you do go to that QR
code that sample is live today and it's

00:26:57.830 --> 00:26:57.840
code that sample is live today and it's
 

00:26:57.840 --> 00:26:59.510
code that sample is live today and it's
cool it actually uses choreographers

00:26:59.510 --> 00:26:59.520
cool it actually uses choreographers
 

00:26:59.520 --> 00:27:00.980
cool it actually uses choreographers
around the latest version of Android it

00:27:00.980 --> 00:27:00.990
around the latest version of Android it
 

00:27:00.990 --> 00:27:03.170
around the latest version of Android it
uses egl extensions for on a couple of

00:27:03.170 --> 00:27:03.180
uses egl extensions for on a couple of
 

00:27:03.180 --> 00:27:05.000
uses egl extensions for on a couple of
older versions it actually goes down to

00:27:05.000 --> 00:27:05.010
older versions it actually goes down to
 

00:27:05.010 --> 00:27:07.520
older versions it actually goes down to
the job of the java version of the api

00:27:07.520 --> 00:27:07.530
the job of the java version of the api
 

00:27:07.530 --> 00:27:09.560
the job of the java version of the api
on earlier versions so you actually can

00:27:09.560 --> 00:27:09.570
on earlier versions so you actually can
 

00:27:09.570 --> 00:27:11.420
on earlier versions so you actually can
see how to do it all the way back to I

00:27:11.420 --> 00:27:11.430
see how to do it all the way back to I
 

00:27:11.430 --> 00:27:13.250
see how to do it all the way back to I
think 16 or something like that

00:27:13.250 --> 00:27:13.260
think 16 or something like that
 

00:27:13.260 --> 00:27:15.470
think 16 or something like that
which is pretty nice so the sample is

00:27:15.470 --> 00:27:15.480
which is pretty nice so the sample is
 

00:27:15.480 --> 00:27:17.960
which is pretty nice so the sample is
cool it's a little complicated and it's

00:27:17.960 --> 00:27:17.970
cool it's a little complicated and it's
 

00:27:17.970 --> 00:27:19.250
cool it's a little complicated and it's
not using more teapots it's just a

00:27:19.250 --> 00:27:19.260
not using more teapots it's just a
 

00:27:19.260 --> 00:27:23.750
not using more teapots it's just a
single teapot alright so I showed you

00:27:23.750 --> 00:27:23.760
single teapot alright so I showed you
 

00:27:23.760 --> 00:27:26.480
single teapot alright so I showed you
that and there we are we got a little

00:27:26.480 --> 00:27:26.490
that and there we are we got a little
 

00:27:26.490 --> 00:27:28.160
that and there we are we got a little
bit of performance clawed back we're

00:27:28.160 --> 00:27:28.170
bit of performance clawed back we're
 

00:27:28.170 --> 00:27:29.570
bit of performance clawed back we're
getting around 30 frames per second now

00:27:29.570 --> 00:27:29.580
getting around 30 frames per second now
 

00:27:29.580 --> 00:27:31.070
getting around 30 frames per second now
and we're not overheating under the wolf

00:27:31.070 --> 00:27:31.080
and we're not overheating under the wolf
 

00:27:31.080 --> 00:27:33.650
and we're not overheating under the wolf
vision here and this is even better than

00:27:33.650 --> 00:27:33.660
vision here and this is even better than
 

00:27:33.660 --> 00:27:35.180
vision here and this is even better than
we did with reducing just reducing the

00:27:35.180 --> 00:27:35.190
we did with reducing just reducing the
 

00:27:35.190 --> 00:27:37.010
we did with reducing just reducing the
render target and we haven't added had

00:27:37.010 --> 00:27:37.020
render target and we haven't added had
 

00:27:37.020 --> 00:27:39.830
render target and we haven't added had
it had to add a single non-native call

00:27:39.830 --> 00:27:39.840
it had to add a single non-native call
 

00:27:39.840 --> 00:27:41.960
it had to add a single non-native call
to do any of this mind you every single

00:27:41.960 --> 00:27:41.970
to do any of this mind you every single
 

00:27:41.970 --> 00:27:43.670
to do any of this mind you every single
thing that you're watching here has been

00:27:43.670 --> 00:27:43.680
thing that you're watching here has been
 

00:27:43.680 --> 00:27:46.640
thing that you're watching here has been
entirely inside of the NDK which is

00:27:46.640 --> 00:27:46.650
entirely inside of the NDK which is
 

00:27:46.650 --> 00:27:49.250
entirely inside of the NDK which is
which which I'm very pleased about and

00:27:49.250 --> 00:27:49.260
which which I'm very pleased about and
 

00:27:49.260 --> 00:27:51.440
which which I'm very pleased about and
I'm sure that you know our developers

00:27:51.440 --> 00:27:51.450
I'm sure that you know our developers
 

00:27:51.450 --> 00:27:52.820
I'm sure that you know our developers
are too and let me show you one or the

00:27:52.820 --> 00:27:52.830
are too and let me show you one or the
 

00:27:52.830 --> 00:27:55.250
are too and let me show you one or the
little thing that we can do and that you

00:27:55.250 --> 00:27:55.260
little thing that we can do and that you
 

00:27:55.260 --> 00:27:57.170
little thing that we can do and that you
might you might want to do and why you

00:27:57.170 --> 00:27:57.180
might you might want to do and why you
 

00:27:57.180 --> 00:28:02.360
might you might want to do and why you
might not want to do that on n so I have

00:28:02.360 --> 00:28:02.370
might not want to do that on n so I have
 

00:28:02.370 --> 00:28:03.410
might not want to do that on n so I have
heard about what we've done with

00:28:03.410 --> 00:28:03.420
heard about what we've done with
 

00:28:03.420 --> 00:28:06.830
heard about what we've done with
sustained performance mode so sustained

00:28:06.830 --> 00:28:06.840
sustained performance mode so sustained
 

00:28:06.840 --> 00:28:08.450
sustained performance mode so sustained
performance mode as a feature mostly

00:28:08.450 --> 00:28:08.460
performance mode as a feature mostly
 

00:28:08.460 --> 00:28:11.480
performance mode as a feature mostly
intended for things like VR that were

00:28:11.480 --> 00:28:11.490
intended for things like VR that were
 

00:28:11.490 --> 00:28:13.010
intended for things like VR that were
could that really really require you

00:28:13.010 --> 00:28:13.020
could that really really require you
 

00:28:13.020 --> 00:28:14.390
could that really really require you
don't want to drop frames you don't want

00:28:14.390 --> 00:28:14.400
don't want to drop frames you don't want
 

00:28:14.400 --> 00:28:16.280
don't want to drop frames you don't want
the device to overheat and so basically

00:28:16.280 --> 00:28:16.290
the device to overheat and so basically
 

00:28:16.290 --> 00:28:17.990
the device to overheat and so basically
what they do is they actually try to put

00:28:17.990 --> 00:28:18.000
what they do is they actually try to put
 

00:28:18.000 --> 00:28:20.000
what they do is they actually try to put
the device in a mode where it's never

00:28:20.000 --> 00:28:20.010
the device in a mode where it's never
 

00:28:20.010 --> 00:28:20.960
the device in a mode where it's never
going to overheat

00:28:20.960 --> 00:28:20.970
going to overheat
 

00:28:20.970 --> 00:28:25.580
going to overheat
now the problem is that at that rate

00:28:25.580 --> 00:28:25.590
now the problem is that at that rate
 

00:28:25.590 --> 00:28:27.560
now the problem is that at that rate
under the conditions they test on you're

00:28:27.560 --> 00:28:27.570
under the conditions they test on you're
 

00:28:27.570 --> 00:28:29.570
under the conditions they test on you're
not gonna get the highest performance so

00:28:29.570 --> 00:28:29.580
not gonna get the highest performance so
 

00:28:29.580 --> 00:28:31.130
not gonna get the highest performance so
what I've done is I've actually done it

00:28:31.130 --> 00:28:31.140
what I've done is I've actually done it
 

00:28:31.140 --> 00:28:33.140
what I've done is I've actually done it
taken a version of the app that actually

00:28:33.140 --> 00:28:33.150
taken a version of the app that actually
 

00:28:33.150 --> 00:28:35.150
taken a version of the app that actually
uses that API this has got all the other

00:28:35.150 --> 00:28:35.160
uses that API this has got all the other
 

00:28:35.160 --> 00:28:35.900
uses that API this has got all the other
optimizations

00:28:35.900 --> 00:28:35.910
optimizations
 

00:28:35.910 --> 00:28:37.490
optimizations
I put in other than the choreographer

00:28:37.490 --> 00:28:37.500
I put in other than the choreographer
 

00:28:37.500 --> 00:28:38.990
I put in other than the choreographer
one because it just gets too horrible

00:28:38.990 --> 00:28:39.000
one because it just gets too horrible
 

00:28:39.000 --> 00:28:41.690
one because it just gets too horrible
and and you can see we're now getting

00:28:41.690 --> 00:28:41.700
and and you can see we're now getting
 

00:28:41.700 --> 00:28:43.130
and and you can see we're now getting
sustained performance it will never

00:28:43.130 --> 00:28:43.140
sustained performance it will never
 

00:28:43.140 --> 00:28:45.170
sustained performance it will never
overheat running this you can run this

00:28:45.170 --> 00:28:45.180
overheat running this you can run this
 

00:28:45.180 --> 00:28:47.000
overheat running this you can run this
for hours but we're about 15 frames a

00:28:47.000 --> 00:28:47.010
for hours but we're about 15 frames a
 

00:28:47.010 --> 00:28:50.180
for hours but we're about 15 frames a
second so you do give up a lot but if

00:28:50.180 --> 00:28:50.190
second so you do give up a lot but if
 

00:28:50.190 --> 00:28:52.310
second so you do give up a lot but if
you're if you absolutely need sustained

00:28:52.310 --> 00:28:52.320
you're if you absolutely need sustained
 

00:28:52.320 --> 00:28:53.810
you're if you absolutely need sustained
performance you can do that especially

00:28:53.810 --> 00:28:53.820
performance you can do that especially
 

00:28:53.820 --> 00:28:55.040
performance you can do that especially
you're doing because like Pro Audio

00:28:55.040 --> 00:28:55.050
you're doing because like Pro Audio
 

00:28:55.050 --> 00:28:56.360
you're doing because like Pro Audio
where you're really really worried about

00:28:56.360 --> 00:28:56.370
where you're really really worried about
 

00:28:56.370 --> 00:28:58.390
where you're really really worried about
glitching this actually does pretty well

00:28:58.390 --> 00:28:58.400
glitching this actually does pretty well
 

00:28:58.400 --> 00:29:01.460
glitching this actually does pretty well
so that's another option for you again

00:29:01.460 --> 00:29:01.470
so that's another option for you again
 

00:29:01.470 --> 00:29:02.690
so that's another option for you again
there's just it's just a new window

00:29:02.690 --> 00:29:02.700
there's just it's just a new window
 

00:29:02.700 --> 00:29:05.330
there's just it's just a new window
called this is the first actual call

00:29:05.330 --> 00:29:05.340
called this is the first actual call
 

00:29:05.340 --> 00:29:06.680
called this is the first actual call
through Jay and I that I've had to make

00:29:06.680 --> 00:29:06.690
through Jay and I that I've had to make
 

00:29:06.690 --> 00:29:09.950
through Jay and I that I've had to make
in all of this but as you can see yeah

00:29:09.950 --> 00:29:09.960
in all of this but as you can see yeah
 

00:29:09.960 --> 00:29:11.330
in all of this but as you can see yeah
you know you lose a lot of performance

00:29:11.330 --> 00:29:11.340
you know you lose a lot of performance
 

00:29:11.340 --> 00:29:12.230
you know you lose a lot of performance
so you have to you have to do you really

00:29:12.230 --> 00:29:12.240
so you have to you have to do you really
 

00:29:12.240 --> 00:29:14.720
so you have to you have to do you really
do have to make a call there okay we can

00:29:14.720 --> 00:29:14.730
do have to make a call there okay we can
 

00:29:14.730 --> 00:29:21.770
do have to make a call there okay we can
go back to the def now alright so there

00:29:21.770 --> 00:29:21.780
go back to the def now alright so there
 

00:29:21.780 --> 00:29:23.420
go back to the def now alright so there
are a lot of big choices to also make

00:29:23.420 --> 00:29:23.430
are a lot of big choices to also make
 

00:29:23.430 --> 00:29:25.910
are a lot of big choices to also make
when using the NDK do you use clang or

00:29:25.910 --> 00:29:25.920
when using the NDK do you use clang or
 

00:29:25.920 --> 00:29:29.480
when using the NDK do you use clang or
GCC do you use hard FP 64-bit you know

00:29:29.480 --> 00:29:29.490
GCC do you use hard FP 64-bit you know
 

00:29:29.490 --> 00:29:32.060
GCC do you use hard FP 64-bit you know
and I wasn't sure so I went and did more

00:29:32.060 --> 00:29:32.070
and I wasn't sure so I went and did more
 

00:29:32.070 --> 00:29:34.430
and I wasn't sure so I went and did more
benchmarking this was like a bear to

00:29:34.430 --> 00:29:34.440
benchmarking this was like a bear to
 

00:29:34.440 --> 00:29:36.620
benchmarking this was like a bear to
prepare for this thing um so let me

00:29:36.620 --> 00:29:36.630
prepare for this thing um so let me
 

00:29:36.630 --> 00:29:38.930
prepare for this thing um so let me
let's talk about performance if you look

00:29:38.930 --> 00:29:38.940
let's talk about performance if you look
 

00:29:38.940 --> 00:29:42.500
let's talk about performance if you look
at clang versus GCC in 32-bit mode it's

00:29:42.500 --> 00:29:42.510
at clang versus GCC in 32-bit mode it's
 

00:29:42.510 --> 00:29:45.290
at clang versus GCC in 32-bit mode it's
pretty much the same like it's it's

00:29:45.290 --> 00:29:45.300
pretty much the same like it's it's
 

00:29:45.300 --> 00:29:47.210
pretty much the same like it's it's
going to be at some times it's exactly

00:29:47.210 --> 00:29:47.220
going to be at some times it's exactly
 

00:29:47.220 --> 00:29:48.710
going to be at some times it's exactly
the same literally the Westone number is

00:29:48.710 --> 00:29:48.720
the same literally the Westone number is
 

00:29:48.720 --> 00:29:51.080
the same literally the Westone number is
identical between these two and they're

00:29:51.080 --> 00:29:51.090
identical between these two and they're
 

00:29:51.090 --> 00:29:53.600
identical between these two and they're
within a percent or so any and the other

00:29:53.600 --> 00:29:53.610
within a percent or so any and the other
 

00:29:53.610 --> 00:29:55.250
within a percent or so any and the other
two which is kind of what we expect and

00:29:55.250 --> 00:29:55.260
two which is kind of what we expect and
 

00:29:55.260 --> 00:29:57.290
two which is kind of what we expect and
if you actually run your code and run

00:29:57.290 --> 00:29:57.300
if you actually run your code and run
 

00:29:57.300 --> 00:29:58.460
if you actually run your code and run
benchmarks on and you see anything

00:29:58.460 --> 00:29:58.470
benchmarks on and you see anything
 

00:29:58.470 --> 00:30:00.110
benchmarks on and you see anything
different report it to our to our

00:30:00.110 --> 00:30:00.120
different report it to our to our
 

00:30:00.120 --> 00:30:01.670
different report it to our to our
compiler team there's actually a place

00:30:01.670 --> 00:30:01.680
compiler team there's actually a place
 

00:30:01.680 --> 00:30:04.040
compiler team there's actually a place
where you can file issues on our NDK

00:30:04.040 --> 00:30:04.050
where you can file issues on our NDK
 

00:30:04.050 --> 00:30:06.260
where you can file issues on our NDK
site let us know because our the team is

00:30:06.260 --> 00:30:06.270
site let us know because our the team is
 

00:30:06.270 --> 00:30:09.380
site let us know because our the team is
really really very very aggressive about

00:30:09.380 --> 00:30:09.390
really really very very aggressive about
 

00:30:09.390 --> 00:30:11.150
really really very very aggressive about
trying to make the compiler perform well

00:30:11.150 --> 00:30:11.160
trying to make the compiler perform well
 

00:30:11.160 --> 00:30:16.100
trying to make the compiler perform well
in 64-bit world it's actually also just

00:30:16.100 --> 00:30:16.110
in 64-bit world it's actually also just
 

00:30:16.110 --> 00:30:19.490
in 64-bit world it's actually also just
as close GCC sometimes outperforms

00:30:19.490 --> 00:30:19.500
as close GCC sometimes outperforms
 

00:30:19.500 --> 00:30:21.020
as close GCC sometimes outperforms
claying playing sometimes I'll performs

00:30:21.020 --> 00:30:21.030
claying playing sometimes I'll performs
 

00:30:21.030 --> 00:30:23.240
claying playing sometimes I'll performs
GCC but it is completely not noticeable

00:30:23.240 --> 00:30:23.250
GCC but it is completely not noticeable
 

00:30:23.250 --> 00:30:25.600
GCC but it is completely not noticeable
these are very competitive compilers

00:30:25.600 --> 00:30:25.610
these are very competitive compilers
 

00:30:25.610 --> 00:30:27.800
these are very competitive compilers
however we look at build times and this

00:30:27.800 --> 00:30:27.810
however we look at build times and this
 

00:30:27.810 --> 00:30:29.240
however we look at build times and this
is our zoo XI application and this is

00:30:29.240 --> 00:30:29.250
is our zoo XI application and this is
 

00:30:29.250 --> 00:30:31.940
is our zoo XI application and this is
kind of crazy cuz zoo she actually has

00:30:31.940 --> 00:30:31.950
kind of crazy cuz zoo she actually has
 

00:30:31.950 --> 00:30:34.430
kind of crazy cuz zoo she actually has
tons of assets that gets get built along

00:30:34.430 --> 00:30:34.440
tons of assets that gets get built along
 

00:30:34.440 --> 00:30:36.980
tons of assets that gets get built along
with it so and I didn't even pull them

00:30:36.980 --> 00:30:36.990
with it so and I didn't even pull them
 

00:30:36.990 --> 00:30:38.270
with it so and I didn't even pull them
out I simply just said alright I'm gonna

00:30:38.270 --> 00:30:38.280
out I simply just said alright I'm gonna
 

00:30:38.280 --> 00:30:39.470
out I simply just said alright I'm gonna
do this the dumb way I'm just gonna

00:30:39.470 --> 00:30:39.480
do this the dumb way I'm just gonna
 

00:30:39.480 --> 00:30:40.850
do this the dumb way I'm just gonna
build it from scratch have it build all

00:30:40.850 --> 00:30:40.860
build it from scratch have it build all
 

00:30:40.860 --> 00:30:41.960
build it from scratch have it build all
its assets go through all of its

00:30:41.960 --> 00:30:41.970
its assets go through all of its
 

00:30:41.970 --> 00:30:45.230
its assets go through all of its
resource stuff and it was 1.4 times the

00:30:45.230 --> 00:30:45.240
resource stuff and it was 1.4 times the
 

00:30:45.240 --> 00:30:49.640
resource stuff and it was 1.4 times the
speed of GCC and you can see why

00:30:49.640 --> 00:30:49.650
speed of GCC and you can see why
 

00:30:49.650 --> 00:30:52.250
speed of GCC and you can see why
internal Android team really wanted to

00:30:52.250 --> 00:30:52.260
internal Android team really wanted to
 

00:30:52.260 --> 00:30:54.230
internal Android team really wanted to
switch the clang because I don't know if

00:30:54.230 --> 00:30:54.240
switch the clang because I don't know if
 

00:30:54.240 --> 00:30:55.370
switch the clang because I don't know if
you have you've ever heard of the kind

00:30:55.370 --> 00:30:55.380
you have you've ever heard of the kind
 

00:30:55.380 --> 00:30:56.450
you have you've ever heard of the kind
of machines that it takes to actually

00:30:56.450 --> 00:30:56.460
of machines that it takes to actually
 

00:30:56.460 --> 00:30:58.220
of machines that it takes to actually
build Android the whole platform but

00:30:58.220 --> 00:30:58.230
build Android the whole platform but
 

00:30:58.230 --> 00:31:00.470
build Android the whole platform but
it's a lot of code so just if you can

00:31:00.470 --> 00:31:00.480
it's a lot of code so just if you can
 

00:31:00.480 --> 00:31:03.320
it's a lot of code so just if you can
improve your compile speed by 1.4 1.5

00:31:03.320 --> 00:31:03.330
improve your compile speed by 1.4 1.5
 

00:31:03.330 --> 00:31:05.990
improve your compile speed by 1.4 1.5
1.6 times that's a huge productivity

00:31:05.990 --> 00:31:06.000
1.6 times that's a huge productivity
 

00:31:06.000 --> 00:31:08.360
1.6 times that's a huge productivity
gain but also there's great sanitizers

00:31:08.360 --> 00:31:08.370
gain but also there's great sanitizers
 

00:31:08.370 --> 00:31:10.700
gain but also there's great sanitizers
that are built into into clang that the

00:31:10.700 --> 00:31:10.710
that are built into into clang that the
 

00:31:10.710 --> 00:31:11.750
that are built into into clang that the
team loves that actually the error

00:31:11.750 --> 00:31:11.760
team loves that actually the error
 

00:31:11.760 --> 00:31:12.980
team loves that actually the error
messages are kind of cool

00:31:12.980 --> 00:31:12.990
messages are kind of cool
 

00:31:12.990 --> 00:31:15.320
messages are kind of cool
although GCC is making massive massive

00:31:15.320 --> 00:31:15.330
although GCC is making massive massive
 

00:31:15.330 --> 00:31:16.670
although GCC is making massive massive
improvements there so I wouldn't want to

00:31:16.670 --> 00:31:16.680
improvements there so I wouldn't want to
 

00:31:16.680 --> 00:31:19.610
improvements there so I wouldn't want to
but this is still honestly is huge for

00:31:19.610 --> 00:31:19.620
but this is still honestly is huge for
 

00:31:19.620 --> 00:31:23.480
but this is still honestly is huge for
me now there's a big thing about hard f

00:31:23.480 --> 00:31:23.490
me now there's a big thing about hard f
 

00:31:23.490 --> 00:31:25.310
me now there's a big thing about hard f
p on arm7 how many people have actually

00:31:25.310 --> 00:31:25.320
p on arm7 how many people have actually
 

00:31:25.320 --> 00:31:27.200
p on arm7 how many people have actually
heard of this how many people actually

00:31:27.200 --> 00:31:27.210
heard of this how many people actually
 

00:31:27.210 --> 00:31:31.070
heard of this how many people actually
use it okay all I can say is every time

00:31:31.070 --> 00:31:31.080
use it okay all I can say is every time
 

00:31:31.080 --> 00:31:32.750
use it okay all I can say is every time
I've tried to use it I've run into bugs

00:31:32.750 --> 00:31:32.760
I've tried to use it I've run into bugs
 

00:31:32.760 --> 00:31:35.180
I've tried to use it I've run into bugs
it's made Mike I've run into things that

00:31:35.180 --> 00:31:35.190
it's made Mike I've run into things that
 

00:31:35.190 --> 00:31:37.160
it's made Mike I've run into things that
don't work it's a really really really

00:31:37.160 --> 00:31:37.170
don't work it's a really really really
 

00:31:37.170 --> 00:31:39.770
don't work it's a really really really
happy thing and are it's not used

00:31:39.770 --> 00:31:39.780
happy thing and are it's not used
 

00:31:39.780 --> 00:31:41.650
happy thing and are it's not used
internally by the platform at all and

00:31:41.650 --> 00:31:41.660
internally by the platform at all and
 

00:31:41.660 --> 00:31:44.000
internally by the platform at all and
because of that our tools team made the

00:31:44.000 --> 00:31:44.010
because of that our tools team made the
 

00:31:44.010 --> 00:31:46.820
because of that our tools team made the
decision to eliminate it so it is not an

00:31:46.820 --> 00:31:46.830
decision to eliminate it so it is not an
 

00:31:46.830 --> 00:31:51.620
decision to eliminate it so it is not an
NDK r12 basically if you're making a

00:31:51.620 --> 00:31:51.630
NDK r12 basically if you're making a
 

00:31:51.630 --> 00:31:53.780
NDK r12 basically if you're making a
whole bunch of calls to math libraries

00:31:53.780 --> 00:31:53.790
whole bunch of calls to math libraries
 

00:31:53.790 --> 00:31:55.910
whole bunch of calls to math libraries
you this is where you'll actually get

00:31:55.910 --> 00:31:55.920
you this is where you'll actually get
 

00:31:55.920 --> 00:31:57.740
you this is where you'll actually get
hit by this you could you know and

00:31:57.740 --> 00:31:57.750
hit by this you could you know and
 

00:31:57.750 --> 00:31:58.790
hit by this you could you know and
because what ends up what this is

00:31:58.790 --> 00:31:58.800
because what ends up what this is
 

00:31:58.800 --> 00:32:00.110
because what ends up what this is
actually doing it's not actually not

00:32:00.110 --> 00:32:00.120
actually doing it's not actually not
 

00:32:00.120 --> 00:32:01.490
actually doing it's not actually not
using hard with hardware floating-point

00:32:01.490 --> 00:32:01.500
using hard with hardware floating-point
 

00:32:01.500 --> 00:32:03.110
using hard with hardware floating-point
it simply has to do with the way

00:32:03.110 --> 00:32:03.120
it simply has to do with the way
 

00:32:03.120 --> 00:32:05.570
it simply has to do with the way
floating-point parameters are passed in

00:32:05.570 --> 00:32:05.580
floating-point parameters are passed in
 

00:32:05.580 --> 00:32:07.490
floating-point parameters are passed in
function calls so if you look at the

00:32:07.490 --> 00:32:07.500
function calls so if you look at the
 

00:32:07.500 --> 00:32:09.260
function calls so if you look at the
assembly that gets generated it's a

00:32:09.260 --> 00:32:09.270
assembly that gets generated it's a
 

00:32:09.270 --> 00:32:11.120
assembly that gets generated it's a
little it's a little more expensive but

00:32:11.120 --> 00:32:11.130
little it's a little more expensive but
 

00:32:11.130 --> 00:32:12.830
little it's a little more expensive but
the truth is if function call overhead

00:32:12.830 --> 00:32:12.840
the truth is if function call overhead
 

00:32:12.840 --> 00:32:15.590
the truth is if function call overhead
is your problem in your application in

00:32:15.590 --> 00:32:15.600
is your problem in your application in
 

00:32:15.600 --> 00:32:16.280
is your problem in your application in
your floating-point intensive

00:32:16.280 --> 00:32:16.290
your floating-point intensive
 

00:32:16.290 --> 00:32:17.600
your floating-point intensive
application you've probably done

00:32:17.600 --> 00:32:17.610
application you've probably done
 

00:32:17.610 --> 00:32:19.670
application you've probably done
something wrong you know like like

00:32:19.670 --> 00:32:19.680
something wrong you know like like
 

00:32:19.680 --> 00:32:21.650
something wrong you know like like
that's you know hopefully you aren't you

00:32:21.650 --> 00:32:21.660
that's you know hopefully you aren't you
 

00:32:21.660 --> 00:32:23.540
that's you know hopefully you aren't you
aren't actually making a call to do

00:32:23.540 --> 00:32:23.550
aren't actually making a call to do
 

00:32:23.550 --> 00:32:25.190
aren't actually making a call to do
something extremely extremely simple

00:32:25.190 --> 00:32:25.200
something extremely extremely simple
 

00:32:25.200 --> 00:32:26.960
something extremely extremely simple
that you could just inline and that's

00:32:26.960 --> 00:32:26.970
that you could just inline and that's
 

00:32:26.970 --> 00:32:28.490
that you could just inline and that's
and that's the hope and most of the

00:32:28.490 --> 00:32:28.500
and that's the hope and most of the
 

00:32:28.500 --> 00:32:30.170
and that's the hope and most of the
important math functions will get in

00:32:30.170 --> 00:32:30.180
important math functions will get in
 

00:32:30.180 --> 00:32:30.470
important math functions will get in
line

00:32:30.470 --> 00:32:30.480
line
 

00:32:30.480 --> 00:32:32.360
line
however we know there are some there is

00:32:32.360 --> 00:32:32.370
however we know there are some there is
 

00:32:32.370 --> 00:32:33.710
however we know there are some there is
some code is gonna lose performance

00:32:33.710 --> 00:32:33.720
some code is gonna lose performance
 

00:32:33.720 --> 00:32:35.870
some code is gonna lose performance
because of this but honestly once we

00:32:35.870 --> 00:32:35.880
because of this but honestly once we
 

00:32:35.880 --> 00:32:37.460
because of this but honestly once we
actually started looking at the problems

00:32:37.460 --> 00:32:37.470
actually started looking at the problems
 

00:32:37.470 --> 00:32:38.810
actually started looking at the problems
with bugs that people were having and

00:32:38.810 --> 00:32:38.820
with bugs that people were having and
 

00:32:38.820 --> 00:32:40.550
with bugs that people were having and
the fact that the platform team wasn't

00:32:40.550 --> 00:32:40.560
the fact that the platform team wasn't
 

00:32:40.560 --> 00:32:41.930
the fact that the platform team wasn't
using it and when the platform who

00:32:41.930 --> 00:32:41.940
using it and when the platform who
 

00:32:41.940 --> 00:32:43.130
using it and when the platform who
doesn't use something on Android

00:32:43.130 --> 00:32:43.140
doesn't use something on Android
 

00:32:43.140 --> 00:32:45.470
doesn't use something on Android
it generally doesn't get nearly as well

00:32:45.470 --> 00:32:45.480
it generally doesn't get nearly as well
 

00:32:45.480 --> 00:32:47.780
it generally doesn't get nearly as well
tested as it should be so it's really

00:32:47.780 --> 00:32:47.790
tested as it should be so it's really
 

00:32:47.790 --> 00:32:49.220
tested as it should be so it's really
really important for us to do that

00:32:49.220 --> 00:32:49.230
really important for us to do that
 

00:32:49.230 --> 00:32:50.360
really important for us to do that
that's what's so great about what we've

00:32:50.360 --> 00:32:50.370
that's what's so great about what we've
 

00:32:50.370 --> 00:32:52.220
that's what's so great about what we've
done with clang is it clang is actually

00:32:52.220 --> 00:32:52.230
done with clang is it clang is actually
 

00:32:52.230 --> 00:32:54.260
done with clang is it clang is actually
used you're getting the exact same tool

00:32:54.260 --> 00:32:54.270
used you're getting the exact same tool
 

00:32:54.270 --> 00:32:55.910
used you're getting the exact same tool
chain for almost the first time ever

00:32:55.910 --> 00:32:55.920
chain for almost the first time ever
 

00:32:55.920 --> 00:32:59.390
chain for almost the first time ever
that suggested the platform and and it's

00:32:59.390 --> 00:32:59.400
that suggested the platform and and it's
 

00:32:59.400 --> 00:33:00.680
that suggested the platform and and it's
being very very well maintained it's

00:33:00.680 --> 00:33:00.690
being very very well maintained it's
 

00:33:00.690 --> 00:33:02.240
being very very well maintained it's
also the same version of the tool chain

00:33:02.240 --> 00:33:02.250
also the same version of the tool chain
 

00:33:02.250 --> 00:33:03.010
also the same version of the tool chain
that we're using

00:33:03.010 --> 00:33:03.020
that we're using
 

00:33:03.020 --> 00:33:04.600
that we're using
like Google Data Centers if you know

00:33:04.600 --> 00:33:04.610
like Google Data Centers if you know
 

00:33:04.610 --> 00:33:05.950
like Google Data Centers if you know
what we had way we test stuff in data

00:33:05.950 --> 00:33:05.960
what we had way we test stuff in data
 

00:33:05.960 --> 00:33:08.170
what we had way we test stuff in data
centers as we roll it out to 10% of see

00:33:08.170 --> 00:33:08.180
centers as we roll it out to 10% of see
 

00:33:08.180 --> 00:33:10.000
centers as we roll it out to 10% of see
what's going on see if we hit any bugs

00:33:10.000 --> 00:33:10.010
what's going on see if we hit any bugs
 

00:33:10.010 --> 00:33:12.400
what's going on see if we hit any bugs
pull it back James you know do fixes and

00:33:12.400 --> 00:33:12.410
pull it back James you know do fixes and
 

00:33:12.410 --> 00:33:13.720
pull it back James you know do fixes and
so we actually get to take advantage of

00:33:13.720 --> 00:33:13.730
so we actually get to take advantage of
 

00:33:13.730 --> 00:33:15.760
so we actually get to take advantage of
all the stuff that they're doing to make

00:33:15.760 --> 00:33:15.770
all the stuff that they're doing to make
 

00:33:15.770 --> 00:33:17.590
all the stuff that they're doing to make
the data centers Rock so it's it's

00:33:17.590 --> 00:33:17.600
the data centers Rock so it's it's
 

00:33:17.600 --> 00:33:19.600
the data centers Rock so it's it's
actually really really good I think that

00:33:19.600 --> 00:33:19.610
actually really really good I think that
 

00:33:19.610 --> 00:33:21.670
actually really really good I think that
we're actually all kind of United around

00:33:21.670 --> 00:33:21.680
we're actually all kind of United around
 

00:33:21.680 --> 00:33:23.200
we're actually all kind of United around
making one compiler work really really

00:33:23.200 --> 00:33:23.210
making one compiler work really really
 

00:33:23.210 --> 00:33:26.140
making one compiler work really really
well and not that GTC is dropping away

00:33:26.140 --> 00:33:26.150
well and not that GTC is dropping away
 

00:33:26.150 --> 00:33:27.730
well and not that GTC is dropping away
if you do need it if your code doesn't

00:33:27.730 --> 00:33:27.740
if you do need it if your code doesn't
 

00:33:27.740 --> 00:33:29.680
if you do need it if your code doesn't
compile first of all let us know if you

00:33:29.680 --> 00:33:29.690
compile first of all let us know if you
 

00:33:29.690 --> 00:33:30.940
compile first of all let us know if you
if you have a problem compiling with

00:33:30.940 --> 00:33:30.950
if you have a problem compiling with
 

00:33:30.950 --> 00:33:33.370
if you have a problem compiling with
clang and we'll try to fix it and second

00:33:33.370 --> 00:33:33.380
clang and we'll try to fix it and second
 

00:33:33.380 --> 00:33:39.160
clang and we'll try to fix it and second
of all if if you are you know we are

00:33:39.160 --> 00:33:39.170
of all if if you are you know we are
 

00:33:39.170 --> 00:33:41.500
of all if if you are you know we are
going to keep GCC around for a while so

00:33:41.500 --> 00:33:41.510
going to keep GCC around for a while so
 

00:33:41.510 --> 00:33:42.730
going to keep GCC around for a while so
it's not going away we're just not

00:33:42.730 --> 00:33:42.740
it's not going away we're just not
 

00:33:42.740 --> 00:33:43.960
it's not going away we're just not
updating to new versions if you're

00:33:43.960 --> 00:33:43.970
updating to new versions if you're
 

00:33:43.970 --> 00:33:46.210
updating to new versions if you're
expecting to get GCC 5 you know four-pot

00:33:46.210 --> 00:33:46.220
expecting to get GCC 5 you know four-pot
 

00:33:46.220 --> 00:33:50.560
expecting to get GCC 5 you know four-pot
4.9 is pretty much it so one final thing

00:33:50.560 --> 00:33:50.570
4.9 is pretty much it so one final thing
 

00:33:50.570 --> 00:33:52.410
4.9 is pretty much it so one final thing
is if you really want high-performance

00:33:52.410 --> 00:33:52.420
is if you really want high-performance
 

00:33:52.420 --> 00:33:56.800
is if you really want high-performance
definitely look at doing a 64-bit ABI it

00:33:56.800 --> 00:33:56.810
definitely look at doing a 64-bit ABI it
 

00:33:56.810 --> 00:33:58.780
definitely look at doing a 64-bit ABI it
and and really you know I was actually

00:33:58.780 --> 00:33:58.790
and and really you know I was actually
 

00:33:58.790 --> 00:34:00.730
and and really you know I was actually
not a hundred percent sold on this

00:34:00.730 --> 00:34:00.740
not a hundred percent sold on this
 

00:34:00.740 --> 00:34:02.860
not a hundred percent sold on this
because you do end up using a little

00:34:02.860 --> 00:34:02.870
because you do end up using a little
 

00:34:02.870 --> 00:34:05.860
because you do end up using a little
more memory and that does of course mean

00:34:05.860 --> 00:34:05.870
more memory and that does of course mean
 

00:34:05.870 --> 00:34:06.790
more memory and that does of course mean
you're using a little more memory

00:34:06.790 --> 00:34:06.800
you're using a little more memory
 

00:34:06.800 --> 00:34:08.500
you're using a little more memory
bandwidth but the extra registers that

00:34:08.500 --> 00:34:08.510
bandwidth but the extra registers that
 

00:34:08.510 --> 00:34:10.870
bandwidth but the extra registers that
you get that the compiler can optimize

00:34:10.870 --> 00:34:10.880
you get that the compiler can optimize
 

00:34:10.880 --> 00:34:14.080
you get that the compiler can optimize
around for 64 bit completely makes up

00:34:14.080 --> 00:34:14.090
around for 64 bit completely makes up
 

00:34:14.090 --> 00:34:16.300
around for 64 bit completely makes up
for any memory inefficiencies it has

00:34:16.300 --> 00:34:16.310
for any memory inefficiencies it has
 

00:34:16.310 --> 00:34:18.820
for any memory inefficiencies it has
almost all of the time and we ran the we

00:34:18.820 --> 00:34:18.830
almost all of the time and we ran the we
 

00:34:18.830 --> 00:34:20.139
almost all of the time and we ran the we
ran these benchmarks a lot we print a

00:34:20.139 --> 00:34:20.149
ran these benchmarks a lot we print a
 

00:34:20.149 --> 00:34:21.340
ran these benchmarks a lot we print a
whole bunch of other benchmarks in

00:34:21.340 --> 00:34:21.350
whole bunch of other benchmarks in
 

00:34:21.350 --> 00:34:22.750
whole bunch of other benchmarks in
general if you have something that's

00:34:22.750 --> 00:34:22.760
general if you have something that's
 

00:34:22.760 --> 00:34:24.190
general if you have something that's
really really performance sensitive

00:34:24.190 --> 00:34:24.200
really really performance sensitive
 

00:34:24.200 --> 00:34:27.250
really really performance sensitive
consider doing a 64 it a bit ABI

00:34:27.250 --> 00:34:27.260
consider doing a 64 it a bit ABI
 

00:34:27.260 --> 00:34:29.020
consider doing a 64 it a bit ABI
consider at if it's not too big just

00:34:29.020 --> 00:34:29.030
consider at if it's not too big just
 

00:34:29.030 --> 00:34:30.880
consider at if it's not too big just
include it of course you can include

00:34:30.880 --> 00:34:30.890
include it of course you can include
 

00:34:30.890 --> 00:34:31.810
include it of course you can include
multiple abis

00:34:31.810 --> 00:34:31.820
multiple abis
 

00:34:31.820 --> 00:34:34.480
multiple abis
into multiple libraries into any android

00:34:34.480 --> 00:34:34.490
into multiple libraries into any android
 

00:34:34.490 --> 00:34:36.580
into multiple libraries into any android
apk or you can use multi apk to

00:34:36.580 --> 00:34:36.590
apk or you can use multi apk to
 

00:34:36.590 --> 00:34:38.110
apk or you can use multi apk to
distribute multiple different versions

00:34:38.110 --> 00:34:38.120
distribute multiple different versions
 

00:34:38.120 --> 00:34:42.760
distribute multiple different versions
of your app and and again it it just it

00:34:42.760 --> 00:34:42.770
of your app and and again it it just it
 

00:34:42.770 --> 00:34:44.260
of your app and and again it it just it
just works better and the best thing

00:34:44.260 --> 00:34:44.270
just works better and the best thing
 

00:34:44.270 --> 00:34:46.180
just works better and the best thing
about it is you all already get hard

00:34:46.180 --> 00:34:46.190
about it is you all already get hard
 

00:34:46.190 --> 00:34:47.530
about it is you all already get hard
floating-point when you're running in

00:34:47.530 --> 00:34:47.540
floating-point when you're running in
 

00:34:47.540 --> 00:34:52.860
floating-point when you're running in
our v8 finally x86 native the x86

00:34:52.860 --> 00:34:52.870
our v8 finally x86 native the x86
 

00:34:52.870 --> 00:34:55.180
our v8 finally x86 native the x86
emulation that is in a bunch of Android

00:34:55.180 --> 00:34:55.190
emulation that is in a bunch of Android
 

00:34:55.190 --> 00:34:56.980
emulation that is in a bunch of Android
devices that allow them to run hard arm

00:34:56.980 --> 00:34:56.990
devices that allow them to run hard arm
 

00:34:56.990 --> 00:35:00.310
devices that allow them to run hard arm
code is awesome the fact that it

00:35:00.310 --> 00:35:00.320
code is awesome the fact that it
 

00:35:00.320 --> 00:35:02.860
code is awesome the fact that it
performs this well on on admittedly

00:35:02.860 --> 00:35:02.870
performs this well on on admittedly
 

00:35:02.870 --> 00:35:05.800
performs this well on on admittedly
meaningless benchmarks is pretty good

00:35:05.800 --> 00:35:05.810
meaningless benchmarks is pretty good
 

00:35:05.810 --> 00:35:07.540
meaningless benchmarks is pretty good
but you can see like with whetstone you

00:35:07.540 --> 00:35:07.550
but you can see like with whetstone you
 

00:35:07.550 --> 00:35:09.310
but you can see like with whetstone you
know you can be giving up easily two

00:35:09.310 --> 00:35:09.320
know you can be giving up easily two
 

00:35:09.320 --> 00:35:11.230
know you can be giving up easily two
thirds of your performance by not having

00:35:11.230 --> 00:35:11.240
thirds of your performance by not having
 

00:35:11.240 --> 00:35:13.510
thirds of your performance by not having
an x86 build and so if you want to

00:35:13.510 --> 00:35:13.520
an x86 build and so if you want to
 

00:35:13.520 --> 00:35:15.310
an x86 build and so if you want to
target devices like the Nexus player and

00:35:15.310 --> 00:35:15.320
target devices like the Nexus player and
 

00:35:15.320 --> 00:35:16.510
target devices like the Nexus player and
like the zenfone

00:35:16.510 --> 00:35:16.520
like the zenfone
 

00:35:16.520 --> 00:35:18.190
like the zenfone
which are which are both pretty awesome

00:35:18.190 --> 00:35:18.200
which are which are both pretty awesome
 

00:35:18.200 --> 00:35:20.230
which are which are both pretty awesome
devices you know definitely consider

00:35:20.230 --> 00:35:20.240
devices you know definitely consider
 

00:35:20.240 --> 00:35:22.270
devices you know definitely consider
actually doing a native x86 version at

00:35:22.270 --> 00:35:22.280
actually doing a native x86 version at
 

00:35:22.280 --> 00:35:25.060
actually doing a native x86 version at
least test it because it really makes a

00:35:25.060 --> 00:35:25.070
least test it because it really makes a
 

00:35:25.070 --> 00:35:28.050
least test it because it really makes a
huge difference in terms of battery life

00:35:28.050 --> 00:35:28.060
huge difference in terms of battery life
 

00:35:28.060 --> 00:35:33.280
huge difference in terms of battery life
okay so the Android runtimes a lot of

00:35:33.280 --> 00:35:33.290
okay so the Android runtimes a lot of
 

00:35:33.290 --> 00:35:35.410
okay so the Android runtimes a lot of
things to make everything run fast on

00:35:35.410 --> 00:35:35.420
things to make everything run fast on
 

00:35:35.420 --> 00:35:37.330
things to make everything run fast on
Android LNM it uses actually ahead of

00:35:37.330 --> 00:35:37.340
Android LNM it uses actually ahead of
 

00:35:37.340 --> 00:35:38.680
Android LNM it uses actually ahead of
time compilation to bring the

00:35:38.680 --> 00:35:38.690
time compilation to bring the
 

00:35:38.690 --> 00:35:40.330
time compilation to bring the
performance of bytecode much closer to

00:35:40.330 --> 00:35:40.340
performance of bytecode much closer to
 

00:35:40.340 --> 00:35:42.310
performance of bytecode much closer to
native performance and on end of course

00:35:42.310 --> 00:35:42.320
native performance and on end of course
 

00:35:42.320 --> 00:35:44.050
native performance and on end of course
it uses a blend of Just In Time and

00:35:44.050 --> 00:35:44.060
it uses a blend of Just In Time and
 

00:35:44.060 --> 00:35:47.140
it uses a blend of Just In Time and
ahead of time compilation and and once

00:35:47.140 --> 00:35:47.150
ahead of time compilation and and once
 

00:35:47.150 --> 00:35:47.650
ahead of time compilation and and once
again

00:35:47.650 --> 00:35:47.660
again
 

00:35:47.660 --> 00:35:49.480
again
it deals much much better with garbage

00:35:49.480 --> 00:35:49.490
it deals much much better with garbage
 

00:35:49.490 --> 00:35:52.210
it deals much much better with garbage
and what we're seeing with art is that a

00:35:52.210 --> 00:35:52.220
and what we're seeing with art is that a
 

00:35:52.220 --> 00:35:54.220
and what we're seeing with art is that a
lot of times you don't actually need to

00:35:54.220 --> 00:35:54.230
lot of times you don't actually need to
 

00:35:54.230 --> 00:35:56.080
lot of times you don't actually need to
even go into native or into native land

00:35:56.080 --> 00:35:56.090
even go into native or into native land
 

00:35:56.090 --> 00:35:57.370
even go into native or into native land
again if you want if all you're

00:35:57.370 --> 00:35:57.380
again if you want if all you're
 

00:35:57.380 --> 00:35:59.080
again if you want if all you're
concerned about is performance art is

00:35:59.080 --> 00:35:59.090
concerned about is performance art is
 

00:35:59.090 --> 00:36:01.030
concerned about is performance art is
actually doing amazing amazing stuff and

00:36:01.030 --> 00:36:01.040
actually doing amazing amazing stuff and
 

00:36:01.040 --> 00:36:02.170
actually doing amazing amazing stuff and
you don't have to worry about all of

00:36:02.170 --> 00:36:02.180
you don't have to worry about all of
 

00:36:02.180 --> 00:36:05.440
you don't have to worry about all of
this kinds of thing so it's complicated

00:36:05.440 --> 00:36:05.450
this kinds of thing so it's complicated
 

00:36:05.450 --> 00:36:07.390
this kinds of thing so it's complicated
as I said before that means that it's a

00:36:07.390 --> 00:36:07.400
as I said before that means that it's a
 

00:36:07.400 --> 00:36:08.890
as I said before that means that it's a
little more expensive to actually do a J

00:36:08.890 --> 00:36:08.900
little more expensive to actually do a J
 

00:36:08.900 --> 00:36:10.660
little more expensive to actually do a J
and I call and ok and we have to do

00:36:10.660 --> 00:36:10.670
and I call and ok and we have to do
 

00:36:10.670 --> 00:36:12.250
and I call and ok and we have to do
synchronization and that's what's

00:36:12.250 --> 00:36:12.260
synchronization and that's what's
 

00:36:12.260 --> 00:36:14.130
synchronization and that's what's
causing us to actually have these delays

00:36:14.130 --> 00:36:14.140
causing us to actually have these delays
 

00:36:14.140 --> 00:36:17.620
causing us to actually have these delays
so what's next

00:36:17.620 --> 00:36:17.630
so what's next
 

00:36:17.630 --> 00:36:20.080
so what's next
basically here here are two links you

00:36:20.080 --> 00:36:20.090
basically here here are two links you
 

00:36:20.090 --> 00:36:22.480
basically here here are two links you
can go to one of them of course takes us

00:36:22.480 --> 00:36:22.490
can go to one of them of course takes us
 

00:36:22.490 --> 00:36:25.540
can go to one of them of course takes us
into our NDK page we actually have NDK

00:36:25.540 --> 00:36:25.550
into our NDK page we actually have NDK
 

00:36:25.550 --> 00:36:28.120
into our NDK page we actually have NDK
docks online which is amazing and we're

00:36:28.120 --> 00:36:28.130
docks online which is amazing and we're
 

00:36:28.130 --> 00:36:29.380
docks online which is amazing and we're
updating them we have people who are

00:36:29.380 --> 00:36:29.390
updating them we have people who are
 

00:36:29.390 --> 00:36:30.910
updating them we have people who are
actually assigned to this project to

00:36:30.910 --> 00:36:30.920
actually assigned to this project to
 

00:36:30.920 --> 00:36:33.310
actually assigned to this project to
make it awesome secondly we have great

00:36:33.310 --> 00:36:33.320
make it awesome secondly we have great
 

00:36:33.320 --> 00:36:34.900
make it awesome secondly we have great
in any case samples and we're putting

00:36:34.900 --> 00:36:34.910
in any case samples and we're putting
 

00:36:34.910 --> 00:36:36.430
in any case samples and we're putting
more online all the time so there's

00:36:36.430 --> 00:36:36.440
more online all the time so there's
 

00:36:36.440 --> 00:36:37.900
more online all the time so there's
anything you want that we don't have a

00:36:37.900 --> 00:36:37.910
anything you want that we don't have a
 

00:36:37.910 --> 00:36:40.359
anything you want that we don't have a
sample for an API that's not covered let

00:36:40.359 --> 00:36:40.369
sample for an API that's not covered let
 

00:36:40.369 --> 00:36:43.990
sample for an API that's not covered let
us know we'll build samples

