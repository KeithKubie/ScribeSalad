WEBVTT
Kind: captions
Language: en

00:00:00.400 --> 00:00:02.600
Your goal is to create a similar data frame to

00:00:02.600 --> 00:00:05.930
the fc_by_age one. This time though, we wanted it to have

00:00:05.930 --> 00:00:09.640
friend counts by age months instead of age years. Here's one

00:00:09.640 --> 00:00:12.592
solution that you might have done, by chaining the operations of

00:00:12.592 --> 00:00:15.340
dplyr together. So first, I want to make sure that

00:00:15.340 --> 00:00:18.060
the library is loaded and then I'm going to create my data

00:00:18.060 --> 00:00:23.480
frame, pf.fc_by_age_months. So, I'm going to take my original data frame and

00:00:23.480 --> 00:00:26.403
apply a bunch of functions to it, from the dplyr package.

00:00:26.403 --> 00:00:29.570
First, I'll group by age with months, then I'll chain on

00:00:29.570 --> 00:00:33.080
a new command called summarize, and here I want to summarize by

00:00:33.080 --> 00:00:36.200
friend count mean, and friend count median, and the number of

00:00:36.200 --> 00:00:39.610
users in my group. And finally, I'll chain on one more command

00:00:39.610 --> 00:00:42.990
that will arrange my data frame by age with months. Running

00:00:42.990 --> 00:00:45.500
this command, I can see that I have my new data frame.

00:00:45.500 --> 00:00:48.250
Notice too, that I have a lot more observations. And that

00:00:48.250 --> 00:00:51.970
should make sense, because I went from age years to age months.

00:00:51.970 --> 00:00:54.020
And just to be sure, I'll print out a couple

00:00:54.020 --> 00:00:57.110
rows on my data frame to examine it. There's my age

00:00:57.110 --> 00:00:59.190
measured in months, my friend count mean, my friend count

00:01:00.540 --> 00:01:04.200
median, and n, the number of users in each group. Now,

00:01:04.200 --> 00:01:07.020
there was another way to get the same data frame.

00:01:07.020 --> 00:01:09.380
Let's see how we can do that. Instead of chaining the

00:01:09.380 --> 00:01:12.400
commands together, I can use the data frame and then

00:01:12.400 --> 00:01:17.020
apply commands to it. So first, I'll create age_with_months.groups. I'll use

00:01:17.020 --> 00:01:19.570
that using the group.by command. I'll pass it my data

00:01:19.570 --> 00:01:23.720
frame, and then I want to group, by age_with_months. That's the variable.

00:01:23.720 --> 00:01:26.340
Now that I have my groups, I want to summarize them

00:01:26.340 --> 00:01:30.140
using mean friend count, median friend count, and in, which is

00:01:30.140 --> 00:01:32.420
the number of users in each group. So here I'll

00:01:32.420 --> 00:01:36.700
summarize age-with-months, and I'll save it into this new variable. Now

00:01:36.700 --> 00:01:38.940
that I have my groups, I want to summarize them using

00:01:38.940 --> 00:01:40.930
the Summarize command. I'll create

00:01:40.930 --> 00:01:45.430
a new data frame called, pf.fc_by_age_months2.

00:01:45.430 --> 00:01:47.820
I want to summarize this data frame, since it's already in

00:01:47.820 --> 00:01:52.640
groups. So I'll pass it here. Age_with_month groups. Now I just need

00:01:52.640 --> 00:01:54.942
to add the variables that I want to summarize. I want the

00:01:54.942 --> 00:01:57.710
mean of friend count, so I'll save that to a variable, I

00:01:57.710 --> 00:02:00.250
want the median friend count so I'll also save that to

00:02:00.250 --> 00:02:03.430
a variable. And finally I want the number of users in each

00:02:03.430 --> 00:02:06.480
age group. Now I just want to take this data frame and

00:02:06.480 --> 00:02:10.520
arrange it by age_with_months. So I'll pass this data frame into the

00:02:10.520 --> 00:02:12.750
arrange function, and then I'll tell it to

00:02:12.750 --> 00:02:16.220
arrange by age_with_months. Notice, too, that I'm saving

00:02:16.220 --> 00:02:18.410
this new data frame into our old data

00:02:18.410 --> 00:02:21.170
frame, so I'm just writing it over. Running

00:02:21.170 --> 00:02:24.910
all this code, we can see that we get our new data frame, and we can

00:02:24.910 --> 00:02:26.450
also check it just by using our head

00:02:26.450 --> 00:02:30.150
function. Sure enough, the same exact data frame.

