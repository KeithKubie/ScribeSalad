WEBVTT
Kind: captions
Language: en

00:00:04.319 --> 00:00:05.360
MALE SPEAKER: Hey, Jarek.

00:00:05.360 --> 00:00:06.902
What's happening?

00:00:06.902 --> 00:00:08.360
JAREK WILKIEWICZ:
I'm coding this--

00:00:08.360 --> 00:00:09.651
MALE SPEAKER: Oh, that's great.

00:00:09.651 --> 00:00:12.490
Say listen, I've been
talking to folks upstairs,

00:00:12.490 --> 00:00:16.146
and we think we need to make
our apps a little more freemium.

00:00:16.146 --> 00:00:17.645
Do you think you
can do that for us?

00:00:17.645 --> 00:00:20.710
Maybe add a little
freemiumification to our apps?

00:00:20.710 --> 00:00:23.120
JAREK WILKIEWICZ: Do you even
know what freemium means?

00:00:23.120 --> 00:00:24.203
MALE SPEAKER: Jarek, look.

00:00:24.203 --> 00:00:26.670
I'm more of what you might
want to call a big picture

00:00:26.670 --> 00:00:27.330
kind of guy.

00:00:27.330 --> 00:00:29.480
I don't like to get
bogged down in details

00:00:29.480 --> 00:00:32.780
like, what is freemium, and
what does that even mean.

00:00:32.780 --> 00:00:34.574
I like to leave that
people like you.

00:00:34.574 --> 00:00:35.365
So what do you say?

00:00:35.365 --> 00:00:38.140
Can you get this done for me?

00:00:38.140 --> 00:00:41.276
JAREK WILKIEWICZ: Well, we could
reshuffle the schedule and--

00:00:41.276 --> 00:00:42.400
MALE SPEAKER: That's great.

00:00:42.400 --> 00:00:43.600
Hey, listen.

00:00:43.600 --> 00:00:45.500
I kind of told the folks
in upper management

00:00:45.500 --> 00:00:47.450
we'd have something
for them on Mondays.

00:00:47.450 --> 00:00:50.460
So I'm going to have to ask
you to come in over the weekend

00:00:50.460 --> 00:00:53.380
and get this done for me, OK?

00:00:53.380 --> 00:00:54.290
Thanks a lot, Jarek.

00:00:54.290 --> 00:00:55.498
You're a team player.

00:00:55.498 --> 00:00:56.706
JAREK WILKIEWICZ: It's Jarek.

00:00:56.706 --> 00:00:58.206
MALE SPEAKER: Keep
up the good work.

00:01:07.849 --> 00:01:09.640
JAREK WILKIEWICZ: Hi,
I'm Jarek Wilkiewicz.

00:01:09.640 --> 00:01:11.098
In this series,
I'm covering things

00:01:11.098 --> 00:01:12.660
every developer
needs to understand

00:01:12.660 --> 00:01:15.220
to be successful-- user
acquisition, engagement,

00:01:15.220 --> 00:01:16.320
and earning money.

00:01:16.320 --> 00:01:19.990
In this video, we'll focus on
the money part and freemium.

00:01:19.990 --> 00:01:22.000
Freemium is a product
pricing strategy

00:01:22.000 --> 00:01:24.600
where, instead of charging
the user for app download,

00:01:24.600 --> 00:01:26.220
you make money on
in-app purchases,

00:01:26.220 --> 00:01:29.040
or even up sell the
user to a subscription.

00:01:29.040 --> 00:01:30.840
In-app purchases
and subscriptions

00:01:30.840 --> 00:01:33.280
have already proven very
lucrative for games.

00:01:33.280 --> 00:01:35.690
And according to
App Annie, they're

00:01:35.690 --> 00:01:38.150
growing fast for
non-games as well.

00:01:38.150 --> 00:01:41.160
To illustrate how this works,
let's look at a small example

00:01:41.160 --> 00:01:44.800
called Trivial Drive, which
you can clone from GitHub.

00:01:44.800 --> 00:01:46.690
The sample app is a
driving simulator,

00:01:46.690 --> 00:01:48.620
except that you can't
actually do the driving.

00:01:48.620 --> 00:01:51.060
But anyway, Trivial Drive
implements three types

00:01:51.060 --> 00:01:52.340
of in-app purchases.

00:01:52.340 --> 00:01:54.760
You can buy more gas,
upgrade your car,

00:01:54.760 --> 00:01:57.760
and subscribe to the
unlimited gas service.

00:01:57.760 --> 00:01:59.780
After your first
free tank of gas,

00:01:59.780 --> 00:02:02.880
you have to purchase more by
hitting the Buy Gas button.

00:02:02.880 --> 00:02:05.260
A nice dialogue pops up
which guides the user

00:02:05.260 --> 00:02:08.080
through a frictionless
purchase flow.

00:02:08.080 --> 00:02:10.490
The gas is what's called
a consumable item.

00:02:10.490 --> 00:02:14.050
The car consumes the fuel, and
the user needs to buy more.

00:02:14.050 --> 00:02:16.950
You can upgrade the car
to a fancier red one.

00:02:16.950 --> 00:02:20.000
This is an example of purchasing
a non-consumable item.

00:02:20.000 --> 00:02:22.350
The car upgrade is
a one-time purchase.

00:02:22.350 --> 00:02:24.710
Let's now look at how
that's implemented.

00:02:24.710 --> 00:02:27.760
Before you can sell something,
you need to have inventory.

00:02:27.760 --> 00:02:29.810
The in-app digital products
offered by your app

00:02:29.810 --> 00:02:32.470
are configured in the Google
Play Developer Console.

00:02:32.470 --> 00:02:35.410
As you can see, I have
set up gas as a Stock

00:02:35.410 --> 00:02:38.950
Keeping Unit, or a
SKU, with a price of $1

00:02:38.950 --> 00:02:41.150
and the ID of a value of gas.

00:02:41.150 --> 00:02:44.420
The ID is what the mobile app
uses to look up the product

00:02:44.420 --> 00:02:46.850
and initiate the purchase flow.

00:02:46.850 --> 00:02:48.970
To initiate gas
purchase, Trivial Drive

00:02:48.970 --> 00:02:52.080
constructs a byte pendingIntent,
starts it, and then

00:02:52.080 --> 00:02:56.020
processes the response in the
handle activity result method.

00:02:56.020 --> 00:02:59.180
As you can see, Google Play
handles the purchasing flow.

00:02:59.180 --> 00:03:02.000
At this point, the user is in
the possession of extra gas,

00:03:02.000 --> 00:03:04.750
so the app updates the
fuel gauge display.

00:03:04.750 --> 00:03:07.770
Because gas is a consumable
product, following

00:03:07.770 --> 00:03:09.710
the successful
gas purchase flow,

00:03:09.710 --> 00:03:12.920
Trivial Drive also calls
the consumePurchase method.

00:03:12.920 --> 00:03:15.740
ConsumePurchase tells
the Google Play back end

00:03:15.740 --> 00:03:18.880
that the user took
inventory of the product.

00:03:18.880 --> 00:03:20.630
The call to consume
purchase is necessary

00:03:20.630 --> 00:03:22.338
because the Google
Play back end does not

00:03:22.338 --> 00:03:24.550
make a distinction
between a consumable item,

00:03:24.550 --> 00:03:27.560
such as gas, or a
non-consumable item,

00:03:27.560 --> 00:03:29.060
for example, an
item representing

00:03:29.060 --> 00:03:31.400
an upgrade to a fancy red car.

00:03:31.400 --> 00:03:33.250
While Google Play
tracks the purchases,

00:03:33.250 --> 00:03:35.740
so you don't have to,
managing the user's inventory

00:03:35.740 --> 00:03:36.900
is your job.

00:03:36.900 --> 00:03:37.580
All right.

00:03:37.580 --> 00:03:39.730
So far I've showed you how
to handle in-app product

00:03:39.730 --> 00:03:43.020
purchases-- for example, getting
more gas, or a premium car

00:03:43.020 --> 00:03:43.900
upgrade.

00:03:43.900 --> 00:03:46.600
Now let's talk
about subscriptions.

00:03:46.600 --> 00:03:49.122
Let's suppose I want my
car to go on forever,

00:03:49.122 --> 00:03:50.580
without having to
worry about fuel.

00:03:50.580 --> 00:03:52.642
For a small fee,
Trivial Drive lets

00:03:52.642 --> 00:03:54.410
me purchase recurring
subscription

00:03:54.410 --> 00:03:56.080
so that my tank is always full.

00:03:56.080 --> 00:03:57.890
To implement
subscriptions, you need

00:03:57.890 --> 00:04:00.570
to first configure a new product
in the Google Play Developer

00:04:00.570 --> 00:04:01.440
Console.

00:04:01.440 --> 00:04:04.830
Configure the name and the
ID, the price, billing period,

00:04:04.830 --> 00:04:06.760
and even offer a free trial.

00:04:06.760 --> 00:04:08.760
Then, in the app, you
kick off the purchase flow

00:04:08.760 --> 00:04:10.350
like in the gas example.

00:04:10.350 --> 00:04:13.810
This time, the SKU
ID is infinite gas.

00:04:13.810 --> 00:04:15.870
Trivial Drive constructs
a byte pendingIntent,

00:04:15.870 --> 00:04:17.820
starts it, and then
processes the response

00:04:17.820 --> 00:04:20.029
in the handle activity
result method.

00:04:20.029 --> 00:04:22.590
And voila, we done
with subscriptions.

00:04:22.590 --> 00:04:25.070
Finally, I wanted to cover
one more aspect of using

00:04:25.070 --> 00:04:26.660
the in-app billing API.

00:04:26.660 --> 00:04:29.290
What if the app is restarted,
or uninstalled, and installed

00:04:29.290 --> 00:04:29.850
again?

00:04:29.850 --> 00:04:33.000
Or what happens if the phone
runs out of battery right

00:04:33.000 --> 00:04:35.200
after the user
completes the purchase?

00:04:35.200 --> 00:04:38.180
The Google Play in-app billing
API keeps track of purchases

00:04:38.180 --> 00:04:39.340
so you don't have to.

00:04:39.340 --> 00:04:42.600
Your app can retrieve products
owned by the user at any time.

00:04:42.600 --> 00:04:44.610
It is a good practice
to always do that

00:04:44.610 --> 00:04:46.010
upon application start-up.

00:04:46.010 --> 00:04:48.470
This way, you don't have to
maintain purchases in the app.

00:04:48.470 --> 00:04:51.170
And since the API utilizes
a persistent cache,

00:04:51.170 --> 00:04:52.950
the response time is good.

00:04:52.950 --> 00:04:54.740
Restoring purchases
upon start-up

00:04:54.740 --> 00:04:57.300
also conveniently
handles the corner case

00:04:57.300 --> 00:05:00.395
when the app crashes right after
the user completes a purchase.

00:05:00.395 --> 00:05:02.020
There's a lot more
to the purchase flow

00:05:02.020 --> 00:05:03.980
that we did not
cover-- for example,

00:05:03.980 --> 00:05:06.800
handling refunds and managing
your digital products

00:05:06.800 --> 00:05:09.930
programmatically using the
Google Play Developer API.

00:05:09.930 --> 00:05:12.840
What's even more important
is securing transactions.

00:05:12.840 --> 00:05:15.420
You can use several techniques
enabled by the Google Play

00:05:15.420 --> 00:05:17.910
in-app billing API
to prevent bad actors

00:05:17.910 --> 00:05:19.740
from spoofing in-app purchases.

00:05:19.740 --> 00:05:22.850
Check out this Google I/O
talk by Bruno Oliveira.

00:05:22.850 --> 00:05:25.580
To learn more about Google
Play in-app billing API,

00:05:25.580 --> 00:05:29.170
visit our documentation, or
better yet, run the sample

00:05:29.170 --> 00:05:31.920
Trivial Drive application, which
comes with several convenience

00:05:31.920 --> 00:05:34.350
classes you can reuse
in your own app.

00:05:34.350 --> 00:05:36.980
Note that you need to publish
the app to the alpha channel

00:05:36.980 --> 00:05:38.730
before you can try it out.

00:05:38.730 --> 00:05:41.600
Last, but not least, remember
that the Google Play in-app

00:05:41.600 --> 00:05:44.560
billing API is designed
for digital products only.

00:05:44.560 --> 00:05:47.080
If you would like to sell
physical products in your app,

00:05:47.080 --> 00:05:49.460
check out our Android Pay API.

00:05:49.460 --> 00:05:52.050
On behalf of your boss and
the in-app billing API,

00:05:52.050 --> 00:05:55.150
I would like to say,
thank you for watching.

