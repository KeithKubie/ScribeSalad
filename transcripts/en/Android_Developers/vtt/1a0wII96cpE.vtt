WEBVTT
Kind: captions
Language: en

00:00:00.936 --> 00:00:04.285
[MUSIC PLAYING]

00:00:04.285 --> 00:00:05.660
BRIAN DUFF: My
name's Brian Duff,

00:00:05.660 --> 00:00:08.447
and I lead the Android
Context Team at Google.

00:00:08.447 --> 00:00:10.530
And I'm really thrilled
that you're all here today

00:00:10.530 --> 00:00:13.280
and interested to learn more
about how you can use Awareness

00:00:13.280 --> 00:00:18.585
and Nearby to make your
applications more contextual.

00:00:18.585 --> 00:00:20.860
So all of us experience
the world around us

00:00:20.860 --> 00:00:22.790
with our five senses.

00:00:22.790 --> 00:00:27.190
We see, we smell, we hear,
we touch, and we taste.

00:00:27.190 --> 00:00:29.200
And we react to our
world based on what we

00:00:29.200 --> 00:00:31.450
experience with those senses.

00:00:31.450 --> 00:00:34.750
And as we go about our life,
we encounter many devices

00:00:34.750 --> 00:00:37.870
in our home, at our place
of work, on the bus,

00:00:37.870 --> 00:00:38.590
and on the train.

00:00:41.360 --> 00:00:44.420
These devices that we
have are really amazing.

00:00:44.420 --> 00:00:48.050
They have a huge array of
sensors and capabilities.

00:00:48.050 --> 00:00:52.070
And just like us, they can sense
many things about their world.

00:00:52.070 --> 00:00:54.770
They have a high resolution
camera so they can see.

00:00:54.770 --> 00:00:58.530
They have an audio system so
they can hear and make sound.

00:00:58.530 --> 00:01:01.760
They have GPS so they can
know where they are anywhere

00:01:01.760 --> 00:01:03.210
on the planet.

00:01:03.210 --> 00:01:06.134
They have a gyroscope, an
accelerometer, and a compass

00:01:06.134 --> 00:01:08.550
so they can know how they're
oriented and moving in space.

00:01:11.990 --> 00:01:15.740
All of these capabilities are
what make this a smartphone.

00:01:15.740 --> 00:01:18.000
And these capabilities can
also make our applications

00:01:18.000 --> 00:01:19.930
much smarter about
what the user is

00:01:19.930 --> 00:01:23.310
trying to achieve and
accomplish in our applications.

00:01:23.310 --> 00:01:25.750
However, as an
application developer,

00:01:25.750 --> 00:01:28.170
sometimes making sense
of all of these signals

00:01:28.170 --> 00:01:30.480
is harder than it
should be, especially

00:01:30.480 --> 00:01:34.340
trying to get a more deeper and
nuanced understanding of what

00:01:34.340 --> 00:01:37.430
the user is doing.

00:01:37.430 --> 00:01:39.720
So our mission on
the Context Team

00:01:39.720 --> 00:01:43.850
is to try to take away as much
of this complexity as we can

00:01:43.850 --> 00:01:47.510
and to make it as easy for
you as possible to understand

00:01:47.510 --> 00:01:51.440
the context of the user, and
also to detect and communicate

00:01:51.440 --> 00:01:52.940
between devices
that are around you.

00:01:55.930 --> 00:01:59.820
Last year at Google I/O, we
announced the Awareness API.

00:01:59.820 --> 00:02:04.180
So Awareness provides two
powerful but simple concepts.

00:02:04.180 --> 00:02:09.490
The Snapshot API lets you query
and poll contextual information

00:02:09.490 --> 00:02:11.880
around devices at any time.

00:02:11.880 --> 00:02:14.530
And the Fence API lets
you set up the conditions

00:02:14.530 --> 00:02:16.960
that your application is really
interested in and trigger

00:02:16.960 --> 00:02:18.660
behavior, even when
your application is

00:02:18.660 --> 00:02:21.529
running in the background.

00:02:21.529 --> 00:02:23.320
There are many APIs in
Android that you can

00:02:23.320 --> 00:02:24.790
use to get this information.

00:02:24.790 --> 00:02:27.600
But the real power
of the Awareness API

00:02:27.600 --> 00:02:29.930
lies in how you can combine
various different signals

00:02:29.930 --> 00:02:32.360
together to get a really
nuanced understanding of what

00:02:32.360 --> 00:02:33.110
the user is doing.

00:02:35.710 --> 00:02:37.799
For example, maybe
it's not enough just

00:02:37.799 --> 00:02:39.340
to know that I'm at
a specific place,

00:02:39.340 --> 00:02:40.507
that I'm at the coffee shop.

00:02:40.507 --> 00:02:42.340
But knowing what it is
that I'm doing there,

00:02:42.340 --> 00:02:43.920
that I'm standing
in line, can be

00:02:43.920 --> 00:02:47.520
really useful in providing a
better experience for my users.

00:02:47.520 --> 00:02:49.320
Maybe by knowing that
I'm standing in line,

00:02:49.320 --> 00:02:52.380
my app can tell me, hey,
instead of waiting to be served,

00:02:52.380 --> 00:02:55.330
you can just order your
coffee directly from the app.

00:02:55.330 --> 00:02:59.080
And then I can go sit down, hack
some code in in Android Studio,

00:02:59.080 --> 00:03:01.400
and wait for my
coffee to be made.

00:03:01.400 --> 00:03:03.710
So you can see that sort
of combining these signals

00:03:03.710 --> 00:03:05.460
together can provide
richer, suggestive,

00:03:05.460 --> 00:03:08.934
and predictive
experiences for users.

00:03:08.934 --> 00:03:10.350
One thing that's
hard when you try

00:03:10.350 --> 00:03:11.915
to build this kind of
experience is doing it

00:03:11.915 --> 00:03:14.395
in a way that's as cognizant
of the user's battery power

00:03:14.395 --> 00:03:15.890
and resources as possible.

00:03:15.890 --> 00:03:18.080
So another great strength
of the Awareness API

00:03:18.080 --> 00:03:19.910
lies in optimizing
system resources

00:03:19.910 --> 00:03:22.150
as best as we can to achieve
these kinds of things.

00:03:24.900 --> 00:03:28.170
Several years ago, we
started the Nearby project.

00:03:28.170 --> 00:03:30.800
We had a really
simple aim in mind

00:03:30.800 --> 00:03:34.610
with Nearby, which was to allow
you to walk up and use devices

00:03:34.610 --> 00:03:36.590
in your life just the
same way that you walk up

00:03:36.590 --> 00:03:38.786
and interact with
people in your life.

00:03:38.786 --> 00:03:41.040
We were hoping that by
building this technology,

00:03:41.040 --> 00:03:43.340
and by building
simple APIs around it,

00:03:43.340 --> 00:03:44.940
we would enable a
whole new generation

00:03:44.940 --> 00:03:46.660
of proximity-enabled
applications.

00:03:49.449 --> 00:03:50.740
So I've got to admit something.

00:03:50.740 --> 00:03:52.820
When we first built
this technology,

00:03:52.820 --> 00:03:55.670
it was actually really,
really annoying.

00:03:55.670 --> 00:03:58.550
So we tried to use sounds to
detect the devices that are

00:03:58.550 --> 00:03:59.940
in the same room as each other.

00:03:59.940 --> 00:04:02.560
And the early prototypes we
built made this incredibly

00:04:02.560 --> 00:04:04.900
noisy, screechy
sound that totally

00:04:04.900 --> 00:04:07.710
irritated all the teams
that were sitting around us.

00:04:07.710 --> 00:04:09.960
So we took a step back,
and we worked really hard

00:04:09.960 --> 00:04:12.800
on perfecting this technology,
and we added radio technology

00:04:12.800 --> 00:04:13.610
as well.

00:04:13.610 --> 00:04:16.820
And we encapsulated all of this
in a really straightforward API

00:04:16.820 --> 00:04:18.630
called Nearby Messages.

00:04:18.630 --> 00:04:20.620
Nearby Messages
allows you to publish

00:04:20.620 --> 00:04:23.710
small amounts of information
to the devices around you

00:04:23.710 --> 00:04:27.690
and transfer that
information via the cloud.

00:04:27.690 --> 00:04:32.380
But Nearby and Awareness
have one basic limitation.

00:04:32.380 --> 00:04:35.810
In order to use them, your
application must be installed.

00:04:35.810 --> 00:04:39.460
Now that doesn't really meet the
goal of having people walk up

00:04:39.460 --> 00:04:41.320
to things and just use them.

00:04:41.320 --> 00:04:43.670
Sometimes the best
possible experience

00:04:43.670 --> 00:04:47.320
that we can provide to users
is in a site or an application

00:04:47.320 --> 00:04:50.307
that they don't even know
about, let alone have installed.

00:04:52.792 --> 00:04:55.250
While you're here in Mountain
View, if you still have time,

00:04:55.250 --> 00:04:57.500
I really recommend going to
visit the Computer History

00:04:57.500 --> 00:04:58.840
Museum on Shoreline.

00:04:58.840 --> 00:05:01.580
They have a wide variety of
exhibits from the early days

00:05:01.580 --> 00:05:02.670
of computer science.

00:05:02.670 --> 00:05:04.400
And whenever I go
there, and I stand

00:05:04.400 --> 00:05:05.816
in front of one
of those exhibits,

00:05:05.816 --> 00:05:07.670
I really want to
know more about it.

00:05:07.670 --> 00:05:09.750
And of course I could read the
little sign that's on there,

00:05:09.750 --> 00:05:11.291
or I could scan a
QR code, or I could

00:05:11.291 --> 00:05:14.650
do an image search, or type
a short URL into my phone.

00:05:14.650 --> 00:05:16.500
But it turns out
the Computer History

00:05:16.500 --> 00:05:18.550
Museum have a really great app.

00:05:18.550 --> 00:05:20.680
And in that app, there's
a wealth of information

00:05:20.680 --> 00:05:21.666
about each exhibit.

00:05:21.666 --> 00:05:23.040
There's even an
audio tour that I

00:05:23.040 --> 00:05:26.380
can use to learn more from
the experts about each item.

00:05:26.380 --> 00:05:28.670
So I didn't know about this
app until fairly recently.

00:05:28.670 --> 00:05:30.460
But I really think
it's a great experience

00:05:30.460 --> 00:05:31.860
if you can go to the
Computer History Museum

00:05:31.860 --> 00:05:34.200
and just stand in front
of one of those exhibits,

00:05:34.200 --> 00:05:36.900
and your phone can tell you,
hey, there's an app available,

00:05:36.900 --> 00:05:39.060
help you to install it,
and take you directly

00:05:39.060 --> 00:05:41.560
to the place in the app that's
relevant for the thing you're

00:05:41.560 --> 00:05:42.730
standing next to.

00:05:42.730 --> 00:05:45.220
Last year at Google
I/O, we introduced

00:05:45.220 --> 00:05:47.750
Nearby Notifications,
which is a technology that

00:05:47.750 --> 00:05:52.440
allows you to attach sites
and applications to real world

00:05:52.440 --> 00:05:57.250
physical objects using
Bluetooth Low Energy beacons.

00:05:57.250 --> 00:05:58.840
So I'm thrilled
that you're all here

00:05:58.840 --> 00:06:01.310
and that you want to make
applications more contextual.

00:06:01.310 --> 00:06:03.860
And I have three senior
engineers from the team here

00:06:03.860 --> 00:06:07.100
who are going to talk about best
practices for using these APIs.

00:06:07.100 --> 00:06:10.580
And we're really happy to
announce some new features here

00:06:10.580 --> 00:06:11.750
at Google I/O.

00:06:11.750 --> 00:06:13.640
So to get started,
I'd like to introduce

00:06:13.640 --> 00:06:15.150
Ryan Bavetta, who
is going to talk

00:06:15.150 --> 00:06:17.684
about Nearby Notifications.

00:06:17.684 --> 00:06:18.620
[APPLAUSE]

00:06:18.620 --> 00:06:19.495
RYAN BAVETTA: Thanks.

00:06:22.790 --> 00:06:24.330
Hey, my name's Ryan Bavetta.

00:06:24.330 --> 00:06:27.820
I'm a member of the
Nearby Notifications Team.

00:06:27.820 --> 00:06:30.330
Like Brian said, we introduced
Nearby Notifications at I/O

00:06:30.330 --> 00:06:32.830
last year, and it's been a
lot of fun seeing what you

00:06:32.830 --> 00:06:35.130
guys have been making with it.

00:06:35.130 --> 00:06:36.840
Today I'm going
to do an overview

00:06:36.840 --> 00:06:38.660
of Nearby Notifications.

00:06:38.660 --> 00:06:40.340
We'll talk about
some of the features

00:06:40.340 --> 00:06:43.070
we've announced
within the past year.

00:06:43.070 --> 00:06:47.094
And then we'll show you how
you can make your own messages.

00:06:47.094 --> 00:06:48.510
Brian talked about
how we can make

00:06:48.510 --> 00:06:51.180
these really compelling
experiences that are based

00:06:51.180 --> 00:06:53.190
on contextual information.

00:06:53.190 --> 00:06:54.720
But one of the
challenges we have

00:06:54.720 --> 00:06:57.750
is how do we start
this experience.

00:06:57.750 --> 00:07:00.770
Like you said, if the user
can skip the line for coffee

00:07:00.770 --> 00:07:05.310
by using your app, how do
we suggest this app to users

00:07:05.310 --> 00:07:09.090
without them having to type
the query into the search box?

00:07:09.090 --> 00:07:12.410
Nearby Notifications provides
a link for Android users

00:07:12.410 --> 00:07:15.010
to jump start this
interaction and jump straight

00:07:15.010 --> 00:07:18.260
to the relevant page within your
app, instant app, or website.

00:07:20.930 --> 00:07:24.260
Depending on your message's
relevance and performance,

00:07:24.260 --> 00:07:28.230
we may, for example, light up
the Nearby Quick Settings tile,

00:07:28.230 --> 00:07:30.410
display the
notification, display

00:07:30.410 --> 00:07:32.760
the message in the
Nearby list view,

00:07:32.760 --> 00:07:37.340
or raise a min or low
priority silent notification.

00:07:37.340 --> 00:07:39.834
So let's see what
this might look like.

00:07:39.834 --> 00:07:41.500
The other day, I was
at the Conservatory

00:07:41.500 --> 00:07:42.830
of Flowers in San Francisco.

00:07:42.830 --> 00:07:44.750
They have all these
interesting plants,

00:07:44.750 --> 00:07:48.464
tons of flowers from
all over the world.

00:07:48.464 --> 00:07:50.380
They have these great
signs next to the plants

00:07:50.380 --> 00:07:54.290
that say the species name
and to find more information,

00:07:54.290 --> 00:07:55.344
visit this website.

00:07:55.344 --> 00:07:56.760
Now you could take
out your phone,

00:07:56.760 --> 00:08:00.440
type in the URL
www.conservatoryofflowers.com,

00:08:00.440 --> 00:08:02.310
dot org--

00:08:02.310 --> 00:08:03.790
dot com goes somewhere else--

00:08:03.790 --> 00:08:05.850
slash lowland.

00:08:05.850 --> 00:08:08.410
But wouldn't it be
great if instead you

00:08:08.410 --> 00:08:12.102
got this link to jump straight
to the content you want?

00:08:12.102 --> 00:08:14.060
This provides more
information about the plants

00:08:14.060 --> 00:08:15.990
in that gallery.

00:08:15.990 --> 00:08:19.400
What could be better than this,
if it provided information

00:08:19.400 --> 00:08:22.160
about the particular plant
you're standing in front of?

00:08:22.160 --> 00:08:26.430
Now this kind of installation
is ambitious, but it's possible.

00:08:26.430 --> 00:08:29.380
The finer the context,
the richer the experience

00:08:29.380 --> 00:08:31.360
we can provide.

00:08:31.360 --> 00:08:33.830
Now looking a little later
into this tree's life cycle,

00:08:33.830 --> 00:08:36.100
if you're at the lumber
department of your local home

00:08:36.100 --> 00:08:38.190
improvement store,
and you're trying

00:08:38.190 --> 00:08:44.235
to decide between a 1x6, or a
2x6, or a cedar plank, pine--

00:08:44.235 --> 00:08:45.610
it would be really
great if there

00:08:45.610 --> 00:08:48.440
were an associate nearby--

00:08:48.440 --> 00:08:51.590
we can provide a link
to page an associate

00:08:51.590 --> 00:08:54.860
for that particular department.

00:08:54.860 --> 00:08:56.170
That would be cool.

00:08:56.170 --> 00:09:01.530
Another interesting use case
we found is with Device Setup.

00:09:01.530 --> 00:09:04.350
Right now, when you buy a
Chromecast and plug it in,

00:09:04.350 --> 00:09:06.590
we provide this
notification to allow

00:09:06.590 --> 00:09:10.840
you to jump straight into
the app to set up the device.

00:09:10.840 --> 00:09:12.917
If you don't have the
app, the Google Home app,

00:09:12.917 --> 00:09:14.500
it brings you to the
Play Store, where

00:09:14.500 --> 00:09:17.390
you're offered the
opportunity to install the app

00:09:17.390 --> 00:09:19.640
and then continue right into
the right part of the app

00:09:19.640 --> 00:09:21.080
to continue the setup.

00:09:24.000 --> 00:09:26.350
Another interesting use
case is with instant apps.

00:09:26.350 --> 00:09:29.800
There's a demo today in Dome
C at the Instant App booth--

00:09:29.800 --> 00:09:31.412
so check that out later--

00:09:31.412 --> 00:09:32.870
where they have a
little birdhouse.

00:09:32.870 --> 00:09:36.790
The birdhouse is a stand-in
for an actual home for sale,

00:09:36.790 --> 00:09:40.220
and it's advertising
a link to the detail

00:09:40.220 --> 00:09:43.380
page of the instant app.

00:09:43.380 --> 00:09:45.890
This is an amazing way
to get people access

00:09:45.890 --> 00:09:49.470
to the rich content that
is deep inside your app

00:09:49.470 --> 00:09:54.320
without the user having to
actually install the app.

00:09:54.320 --> 00:09:57.340
So how do all these
scenarios work?

00:09:57.340 --> 00:10:00.600
These use cases rely on the
phone detecting a Bluetooth Low

00:10:00.600 --> 00:10:02.730
Energy beacon nearby.

00:10:02.730 --> 00:10:05.330
Beacons are typically
small battery powered units

00:10:05.330 --> 00:10:07.600
like this, but
they could also be

00:10:07.600 --> 00:10:10.800
devices acting as beacons,
such as the Chromecast we

00:10:10.800 --> 00:10:12.470
talked about.

00:10:12.470 --> 00:10:14.420
What we do is join
the code broadcast

00:10:14.420 --> 00:10:17.970
from the beacon to the text
that you'd like to be displayed.

00:10:20.574 --> 00:10:21.990
But we don't want
to show messages

00:10:21.990 --> 00:10:23.840
to uninterested parties.

00:10:23.840 --> 00:10:26.370
So targeting is
really important.

00:10:26.370 --> 00:10:28.790
Over the past year, we've
introduced several ways

00:10:28.790 --> 00:10:30.790
so that you can
target and fine tune

00:10:30.790 --> 00:10:33.690
the context of your
message to only show it

00:10:33.690 --> 00:10:35.860
to these interested people.

00:10:35.860 --> 00:10:38.947
We've introduced targeting
for time of day, day of week,

00:10:38.947 --> 00:10:41.280
app install state-- that's
whether your app is installed

00:10:41.280 --> 00:10:42.320
or not--

00:10:42.320 --> 00:10:44.770
and we're announcing today
distance targeting, which

00:10:44.770 --> 00:10:47.660
is the distance to the beacon.

00:10:47.660 --> 00:10:50.030
This, alongside good
placement of your beacons,

00:10:50.030 --> 00:10:53.300
helps make sure you're
targeting the right devices.

00:10:53.300 --> 00:10:57.670
Bad interactions, like messages
that go ignored or muted,

00:10:57.670 --> 00:11:00.420
may be reasons that
we may not show

00:11:00.420 --> 00:11:04.260
your messages a notification.

00:11:04.260 --> 00:11:05.890
Targeting the right
users can sometimes

00:11:05.890 --> 00:11:07.570
involve stopping the broadcast.

00:11:07.570 --> 00:11:11.010
For example, device
setup messages are great,

00:11:11.010 --> 00:11:14.170
but if your device hasn't been
set up within about 15 minutes,

00:11:14.170 --> 00:11:17.130
the user probably isn't going to
be setting it up anytime soon.

00:11:17.130 --> 00:11:20.210
So you should stop
the broadcast.

00:11:20.210 --> 00:11:22.410
Let's talk about the
text of your message.

00:11:22.410 --> 00:11:24.820
When deciding how to
phrase your message,

00:11:24.820 --> 00:11:27.320
it's really important
to be concise.

00:11:27.320 --> 00:11:29.280
You don't have a lot of
characters available.

00:11:29.280 --> 00:11:32.210
We found that about 40
is the maximum where

00:11:32.210 --> 00:11:36.380
you can ensure that your
message is displayed entirely.

00:11:36.380 --> 00:11:37.910
You should use strong context.

00:11:37.910 --> 00:11:40.440
In this case, we're
looking for users that

00:11:40.440 --> 00:11:42.609
are waiting in line to order.

00:11:42.609 --> 00:11:44.650
And we should make it
clear what will happen when

00:11:44.650 --> 00:11:46.630
the user taps on the message.

00:11:46.630 --> 00:11:52.510
In this case, the user will
view a menu or place an order.

00:11:52.510 --> 00:11:54.260
Contrast this with
a message like

00:11:54.260 --> 00:11:57.500
come inside our store
or sale going on now.

00:11:57.500 --> 00:12:02.011
These messages are likely
targeted to uninterested users,

00:12:02.011 --> 00:12:03.760
and the user doesn't
know what will happen

00:12:03.760 --> 00:12:04.968
when they tap on the message.

00:12:07.860 --> 00:12:09.600
If you want to
test an attachment,

00:12:09.600 --> 00:12:12.510
make sure to create the
message in debug mode.

00:12:12.510 --> 00:12:15.901
Debug mode messages only
show on debug mode devices.

00:12:15.901 --> 00:12:21.580
[CROWD CHEERING] Oh, we're not--

00:12:21.580 --> 00:12:24.270
is that for me?

00:12:24.270 --> 00:12:26.080
Turning on debug
mode on your device

00:12:26.080 --> 00:12:28.350
also enables
detailed bug reports,

00:12:28.350 --> 00:12:30.890
which are really
helpful when debugging.

00:12:30.890 --> 00:12:33.200
Now how to add
messages to beacons.

00:12:33.200 --> 00:12:34.970
There are two ways.

00:12:34.970 --> 00:12:38.682
The first way, the beacon can
broadcast the URL directly

00:12:38.682 --> 00:12:41.910
and will automatically pick
up the title and the fave icon

00:12:41.910 --> 00:12:44.760
from the destination web page.

00:12:44.760 --> 00:12:47.800
This is the easiest
way to get started.

00:12:47.800 --> 00:12:50.730
But you won't be able to set
targeting for your message,

00:12:50.730 --> 00:12:53.900
like time of day or distance.

00:12:53.900 --> 00:12:58.150
To do that, you can have
your beacon broadcast an ID

00:12:58.150 --> 00:13:01.220
and then tie that ID to the
message using the Beacon Tools

00:13:01.220 --> 00:13:04.520
app in the Beacon Dashboard.

00:13:04.520 --> 00:13:07.790
This message also allows
you to specify an app intent

00:13:07.790 --> 00:13:09.940
to be launched.

00:13:09.940 --> 00:13:12.890
Both of these methods allow
you to specify a URL that

00:13:12.890 --> 00:13:13.950
launches an instant app.

00:13:16.460 --> 00:13:20.390
For details of the setup
process, check out our website.

00:13:20.390 --> 00:13:22.950
Again, there's a demo
today in the Dome C.

00:13:22.950 --> 00:13:24.710
So be sure to check that out.

00:13:24.710 --> 00:13:27.332
Now back to Brian.

00:13:27.332 --> 00:13:31.349
[APPLAUSE]

00:13:31.349 --> 00:13:32.390
BRIAN DUFF: Thanks, Ryan.

00:13:32.390 --> 00:13:34.540
So we've seen with
Nearby Notifications

00:13:34.540 --> 00:13:37.030
that you can enable
contextual experiences,

00:13:37.030 --> 00:13:39.497
even if your application
is not installed.

00:13:39.497 --> 00:13:40.955
Once your application
is installed,

00:13:40.955 --> 00:13:44.515
there are a wide variety
of contextual signals

00:13:44.515 --> 00:13:47.100
that your application
can trigger behavior on.

00:13:47.100 --> 00:13:50.460
And to talk about this, Payam
Pakzad from the Awareness Team

00:13:50.460 --> 00:13:53.356
is going to go into more
detail about Awareness.

00:13:53.356 --> 00:13:55.310
[APPLAUSE]

00:13:55.310 --> 00:13:56.950
PAYAM PAKZAD: Thanks, Brian.

00:13:56.950 --> 00:13:59.370
My name is Payam, and
I'm the technical lead

00:13:59.370 --> 00:14:01.050
for Awareness API.

00:14:01.050 --> 00:14:04.230
So as you all know, Google
offers a rich collection

00:14:04.230 --> 00:14:07.470
of contextual signals
via various APIs.

00:14:07.470 --> 00:14:11.750
These include things like
fused location provider,

00:14:11.750 --> 00:14:15.940
activity recognition, place
detection, geofencing,

00:14:15.940 --> 00:14:19.050
Nearby Messages, as well as
a lot of information signals

00:14:19.050 --> 00:14:22.690
about the state of the device,
whether screen is on or off,

00:14:22.690 --> 00:14:24.860
Wi-Fi scans, and so on.

00:14:24.860 --> 00:14:27.160
So while on the surface
these signals all

00:14:27.160 --> 00:14:30.400
look quite different in the
way that they are produced,

00:14:30.400 --> 00:14:34.710
they actually-- each one of
them tells you a different piece

00:14:34.710 --> 00:14:39.100
of the common story about the
context of the user, where

00:14:39.100 --> 00:14:42.350
they're at, what they're doing,
what's around them, and so on.

00:14:42.350 --> 00:14:45.270
So this common theme is
rather lost in the way

00:14:45.270 --> 00:14:48.320
that developers today,
without Awareness,

00:14:48.320 --> 00:14:53.130
would have to collect these
separate pieces of information

00:14:53.130 --> 00:14:55.390
from various APIs
and put them together

00:14:55.390 --> 00:14:58.750
to get the full
contextual picture.

00:14:58.750 --> 00:15:01.700
So last year, we
introduced Awareness API,

00:15:01.700 --> 00:15:05.350
which offers a common
and simple to use

00:15:05.350 --> 00:15:09.020
interface to access all
these contextual signals

00:15:09.020 --> 00:15:12.220
and to seamlessly combine
them in a way that gives you

00:15:12.220 --> 00:15:15.410
a more powerful experience.

00:15:15.410 --> 00:15:17.220
What's more, actually
Awareness does

00:15:17.220 --> 00:15:20.730
this in a manner
that's power optimized,

00:15:20.730 --> 00:15:27.010
and it manages its own impact
on battery life and data usage.

00:15:27.010 --> 00:15:30.120
So in a sentence for
us, Awareness API

00:15:30.120 --> 00:15:33.090
is a unified sensing
platform, enabling apps

00:15:33.090 --> 00:15:36.540
to be aware of all aspects of
a user's context, while still

00:15:36.540 --> 00:15:40.420
managing system health for you.

00:15:40.420 --> 00:15:45.060
Well, we currently offer the
following contextual signals

00:15:45.060 --> 00:15:48.160
covering different aspects
of a user's context,

00:15:48.160 --> 00:15:51.190
including things like where
they are with location

00:15:51.190 --> 00:15:53.230
and semantic places,
what's around them

00:15:53.230 --> 00:15:59.090
with nearby beacons, temporal
context with semantic times,

00:15:59.090 --> 00:16:02.770
things like whether it's a
weekend or afternoon, what

00:16:02.770 --> 00:16:07.020
they're doing with activities,
and interesting device

00:16:07.020 --> 00:16:09.380
states like whether
headphone is on or not,

00:16:09.380 --> 00:16:11.940
as well as interesting
information

00:16:11.940 --> 00:16:17.620
about the ambient conditions,
weather in particular.

00:16:17.620 --> 00:16:20.120
As Brian mentioned,
Awareness offers access

00:16:20.120 --> 00:16:22.390
to these signals in two ways.

00:16:22.390 --> 00:16:25.810
Our Fence API gives a
callback style access,

00:16:25.810 --> 00:16:31.840
while our Snapshot API gives a
unified polling style access.

00:16:31.840 --> 00:16:34.210
As far as Awareness
Fences go, you

00:16:34.210 --> 00:16:38.840
can think of them as a
generalization of geofences.

00:16:38.840 --> 00:16:42.770
You actually get a callback
when a specific condition

00:16:42.770 --> 00:16:47.560
on a user's overall
contextual state is met.

00:16:47.560 --> 00:16:50.180
This is especially powerful,
because now you can easily

00:16:50.180 --> 00:16:53.330
combine these various
and disparate signals

00:16:53.330 --> 00:16:56.790
into a single custom made
and semantically meaningful

00:16:56.790 --> 00:17:01.380
condition that's actually custom
made for your app and your use

00:17:01.380 --> 00:17:02.155
case.

00:17:02.155 --> 00:17:05.670
I'll show the power
of this in an example

00:17:05.670 --> 00:17:07.819
in the following few slides.

00:17:07.819 --> 00:17:10.310
So suppose you are
writing an app that's

00:17:10.310 --> 00:17:12.880
interested in the
event that the user is

00:17:12.880 --> 00:17:16.500
close to a particular place
of interest on a sunny weekend

00:17:16.500 --> 00:17:18.730
or holiday morning.

00:17:18.730 --> 00:17:21.680
So just think for a
minute about all the steps

00:17:21.680 --> 00:17:24.310
that you would have to take
to make something like this

00:17:24.310 --> 00:17:25.670
to happen.

00:17:25.670 --> 00:17:30.740
And here it is, how easy it
is to do this with Awareness.

00:17:30.740 --> 00:17:33.310
You can first set up
an Awareness time fence

00:17:33.310 --> 00:17:36.080
for the event that it
is weekend, similarly

00:17:36.080 --> 00:17:39.870
one for event that is holiday,
and another for event that

00:17:39.870 --> 00:17:40.770
is morning.

00:17:40.770 --> 00:17:43.000
All of these, by the
way, are localized

00:17:43.000 --> 00:17:45.260
to your current location.

00:17:45.260 --> 00:17:47.750
You set up another
Awareness location fence

00:17:47.750 --> 00:17:50.280
which is around the
place of interest

00:17:50.280 --> 00:17:51.690
that you're interested in.

00:17:51.690 --> 00:17:54.330
Once you have these
fence objects,

00:17:54.330 --> 00:17:59.090
you can combine them via
Awareness fence language

00:17:59.090 --> 00:18:00.310
in a very natural way.

00:18:00.310 --> 00:18:04.190
You can almost read the sentence
as this is the event that it's

00:18:04.190 --> 00:18:06.700
weekend, or holiday,
and it's morning,

00:18:06.700 --> 00:18:10.340
and you're near that
particular place of API.

00:18:10.340 --> 00:18:13.230
If you're interested in
more than a single place

00:18:13.230 --> 00:18:15.870
of interest, you
can just as easily

00:18:15.870 --> 00:18:21.090
extend this API by passing in
a collection of location fences

00:18:21.090 --> 00:18:26.090
and use AwarenessFence.or
of all these things.

00:18:26.090 --> 00:18:29.580
Once you have your
fences set up,

00:18:29.580 --> 00:18:31.250
you have to register
it with Awareness.

00:18:31.250 --> 00:18:33.185
And the way you do
it is you create

00:18:33.185 --> 00:18:35.590
a fence update request object.

00:18:35.590 --> 00:18:39.770
You need to pass in a fence key
that identifies the fence you

00:18:39.770 --> 00:18:42.390
are interested in and a
pending intent on which you're

00:18:42.390 --> 00:18:43.990
listening for the
trigger events.

00:18:43.990 --> 00:18:46.470
And you finally register
it in the system.

00:18:46.470 --> 00:18:50.460
At this point, you are ready
to receive trigger events.

00:18:50.460 --> 00:18:52.870
Your receiver may look
something like this.

00:18:52.870 --> 00:18:55.170
Notice that multiple
fences can be

00:18:55.170 --> 00:18:57.080
registered against the
same pending intent.

00:18:57.080 --> 00:19:00.390
So you'll have to check that the
fence key that you're receiving

00:19:00.390 --> 00:19:02.620
trigger event on is the one
that you're interested in

00:19:02.620 --> 00:19:07.130
and the current state is the
one that you're reacting to.

00:19:07.130 --> 00:19:08.730
In my example, I
mention weather.

00:19:08.730 --> 00:19:12.930
So you can access that just as
easily with our Snapshot API

00:19:12.930 --> 00:19:14.390
with a single line.

00:19:14.390 --> 00:19:15.976
So this gives you
the current weather

00:19:15.976 --> 00:19:17.600
at the current location
that you're in.

00:19:20.200 --> 00:19:24.410
Now I want to emphasize that
Awareness not only makes

00:19:24.410 --> 00:19:27.390
doing all this very
simple, it actually

00:19:27.390 --> 00:19:30.550
does it in a way that's power
and resources efficient.

00:19:30.550 --> 00:19:33.380
So for example, in this
scenario that I just mentioned,

00:19:33.380 --> 00:19:35.840
Awareness will cache
and store information

00:19:35.840 --> 00:19:38.490
about the local weather
conditions, as well as

00:19:38.490 --> 00:19:40.690
weekend and holiday models.

00:19:40.690 --> 00:19:43.510
And you'll share it across
all the apps on your device

00:19:43.510 --> 00:19:44.510
that they're interested.

00:19:44.510 --> 00:19:49.800
So this will save on using
unnecessary network calls.

00:19:49.800 --> 00:19:51.680
Another facet of this
is that Awareness

00:19:51.680 --> 00:19:55.510
uses a smart evaluation
algorithm on the combined

00:19:55.510 --> 00:19:59.640
fences, so that contexts
that are costlier to produce

00:19:59.640 --> 00:20:04.334
are not produced until
they are actually needed.

00:20:04.334 --> 00:20:05.750
So since last year,
we've actually

00:20:05.750 --> 00:20:08.700
added some great new context
to make the Awareness

00:20:08.700 --> 00:20:10.610
API even more powerful.

00:20:10.610 --> 00:20:15.110
In particular, we've added
some semantic time context

00:20:15.110 --> 00:20:17.380
conditions to our time fence.

00:20:17.380 --> 00:20:20.380
Some of these I already
talked about in the example.

00:20:20.380 --> 00:20:23.130
In addition to things
like parts of day,

00:20:23.130 --> 00:20:24.980
and weekends, and
holidays, you can actually

00:20:24.980 --> 00:20:30.350
now create conditions, fences,
around the solar times, that

00:20:30.350 --> 00:20:32.050
is sunrise and sunset.

00:20:32.050 --> 00:20:34.710
And I want to emphasize
again that these are set up

00:20:34.710 --> 00:20:36.280
at the location that you're in.

00:20:36.280 --> 00:20:40.540
So Awareness takes care of
updating the actual values

00:20:40.540 --> 00:20:44.660
as the device moves to
different locations.

00:20:44.660 --> 00:20:47.590
Our Snapshot API is
just as easy to use.

00:20:47.590 --> 00:20:52.100
It gives you very quick
access to a fresh sample

00:20:52.100 --> 00:20:54.040
of all the signals
that you're offering,

00:20:54.040 --> 00:21:00.230
like places, weather,
beacon states, and so on.

00:21:00.230 --> 00:21:04.670
So since last year that we
launched our API to public,

00:21:04.670 --> 00:21:06.430
many of you have
started using Awareness

00:21:06.430 --> 00:21:07.460
in very creative ways.

00:21:07.460 --> 00:21:10.130
And I wanted to spend
a couple of minutes

00:21:10.130 --> 00:21:13.670
to showcase a couple of
interesting use cases

00:21:13.670 --> 00:21:16.100
by our partners.

00:21:16.100 --> 00:21:18.195
The first example is
Stocard card assistant,

00:21:18.195 --> 00:21:20.320
that I think in the last
session you actually heard

00:21:20.320 --> 00:21:22.300
a little bit about as well.

00:21:22.300 --> 00:21:26.350
So this is an app that lets the
users digitalize their loyalty

00:21:26.350 --> 00:21:29.540
and rewards cards and stores
them in a digital wallet

00:21:29.540 --> 00:21:30.590
format.

00:21:30.590 --> 00:21:33.540
So what they found was
that users often actually

00:21:33.540 --> 00:21:38.750
forget to use their loyalty
cards at the shopping

00:21:38.750 --> 00:21:41.810
point at the moment
that they need to do it.

00:21:41.810 --> 00:21:45.390
So they've used the combination
of Awareness fences, Awareness

00:21:45.390 --> 00:21:49.610
context, to come up with a way
to estimate the exact moment

00:21:49.610 --> 00:21:53.470
that users need to be
accessing these things,

00:21:53.470 --> 00:21:56.170
and remind them with
a single click access

00:21:56.170 --> 00:21:58.910
to pull up this thing.

00:21:58.910 --> 00:22:02.130
Another great example is
QuickBooks Self-Employed.

00:22:02.130 --> 00:22:06.120
And this is an app that helps
users track business expenses

00:22:06.120 --> 00:22:08.420
for tax deduction purposes.

00:22:08.420 --> 00:22:10.780
And they use a combination
of Awareness context

00:22:10.780 --> 00:22:14.020
to accurately estimate the
business related mileages.

00:22:14.020 --> 00:22:16.330
And as you can imagine,
this is a hard problem.

00:22:16.330 --> 00:22:18.630
And you can only
get a good picture

00:22:18.630 --> 00:22:23.760
by combining a different set
of contexts at the same time.

00:22:23.760 --> 00:22:26.650
In the area of
digital fashion, this

00:22:26.650 --> 00:22:31.580
is an app called Coded Couture
by Ivyrevel, which actually

00:22:31.580 --> 00:22:34.310
creates a unique and
personalized design based

00:22:34.310 --> 00:22:36.390
on a user's daily life.

00:22:36.390 --> 00:22:40.230
So what they do is that they use
Awareness signals like places,

00:22:40.230 --> 00:22:44.050
weather, and activity,
and translate them

00:22:44.050 --> 00:22:47.060
in a creative way to fashion
designs for personalized

00:22:47.060 --> 00:22:49.540
dresses.

00:22:49.540 --> 00:22:51.540
So with that, I'd like
to hand it back to Brian.

00:22:51.540 --> 00:22:53.140
You can find a lot
more information

00:22:53.140 --> 00:22:57.380
and examples about our APIs
at our developers site.

00:22:57.380 --> 00:23:00.140
And please come talk to
us about how we can make

00:23:00.140 --> 00:23:01.737
Awareness work better for you.

00:23:01.737 --> 00:23:03.168
Thanks.

00:23:03.168 --> 00:23:06.987
[APPLAUSE]

00:23:06.987 --> 00:23:08.070
BRIAN DUFF: Thanks, Payam.

00:23:08.070 --> 00:23:09.960
So with Awareness,
you can really

00:23:09.960 --> 00:23:11.680
trigger contextual
experiences that

00:23:11.680 --> 00:23:13.950
take advantage of a bunch
of different signals,

00:23:13.950 --> 00:23:18.870
combine them together in a way
that preserves battery power.

00:23:18.870 --> 00:23:23.100
One example of context that
we think is really important

00:23:23.100 --> 00:23:25.620
is proximity to other devices.

00:23:25.620 --> 00:23:29.000
Since we announced the Nearby
Messages API a couple of years

00:23:29.000 --> 00:23:31.290
ago, we've been really
impressed by the things

00:23:31.290 --> 00:23:32.740
that people have built with it.

00:23:32.740 --> 00:23:34.330
We've seen
applications that allow

00:23:34.330 --> 00:23:36.012
you to explore your world.

00:23:36.012 --> 00:23:37.470
We've seen applications
which allow

00:23:37.470 --> 00:23:39.345
you to connect with the
people closest to you

00:23:39.345 --> 00:23:41.060
in your life and share
things with them.

00:23:41.060 --> 00:23:44.240
And we've also seen examples
of second screen experiences

00:23:44.240 --> 00:23:45.950
and games taking
advantage of this API

00:23:45.950 --> 00:23:48.320
to do really cool things.

00:23:48.320 --> 00:23:50.704
We've also had a lot of
feedback from developers

00:23:50.704 --> 00:23:52.120
about the kinds
of things that you

00:23:52.120 --> 00:23:55.490
would like to see in the future
versions of the Nearby API.

00:23:55.490 --> 00:23:57.150
And we've been
working really hard,

00:23:57.150 --> 00:23:58.900
especially over the
last year, on bringing

00:23:58.900 --> 00:24:00.690
some of these things to life.

00:24:00.690 --> 00:24:02.830
And so I'm really, really
excited to introduce

00:24:02.830 --> 00:24:04.390
Varun Kapoor, who
is going to talk

00:24:04.390 --> 00:24:07.830
about how we're taking the next
generation of Nearby's APIs

00:24:07.830 --> 00:24:09.871
offline.

00:24:09.871 --> 00:24:15.230
[APPLAUSE]

00:24:15.230 --> 00:24:18.040
VARUN KAPOOR: Why?

00:24:18.040 --> 00:24:20.460
Why does it take me
more than one click

00:24:20.460 --> 00:24:23.190
to share an article I'm reading
with my coworker who is seated

00:24:23.190 --> 00:24:26.350
two feet away from me?

00:24:26.350 --> 00:24:28.330
Why does it take more
than one click for me

00:24:28.330 --> 00:24:32.180
to share the image search
results of poker hand rankings

00:24:32.180 --> 00:24:36.880
with my poker group
every Friday night?

00:24:36.880 --> 00:24:39.490
Well, let's raise
the stakes, ha, ha,

00:24:39.490 --> 00:24:42.150
and set a slightly
more elaborate theme.

00:24:42.150 --> 00:24:46.360
I'm in downtown SF, where
finding parking on the street

00:24:46.360 --> 00:24:48.410
is rough even on a good day.

00:24:48.410 --> 00:24:51.560
And then I see this.

00:24:51.560 --> 00:24:56.180
It's after 5:00 PM, but it's
the 31st user of the year.

00:24:56.180 --> 00:24:58.020
But it's a leap year.

00:24:58.020 --> 00:25:00.400
But the stock market
was down today.

00:25:00.400 --> 00:25:02.310
Do I park it or not?

00:25:02.310 --> 00:25:04.160
Ah, I don't know.

00:25:04.160 --> 00:25:06.670
I look across the street,
and I see five driveways

00:25:06.670 --> 00:25:10.540
sitting empty, waiting
to be parked in.

00:25:10.540 --> 00:25:14.030
I also remember that I
have an app on my phone

00:25:14.030 --> 00:25:18.000
that lets people rent
out their driveways.

00:25:18.000 --> 00:25:20.590
As luck would have it,
I'm in an area of SF

00:25:20.590 --> 00:25:22.770
where I have a weak cell signal.

00:25:22.770 --> 00:25:26.750
So as I wait for the long
round trips to the suburbs,

00:25:26.750 --> 00:25:34.440
back and forth, back and forth,
I sense a darkness in the force

00:25:34.440 --> 00:25:38.180
as I feel the sound of
the last chocolate eclair

00:25:38.180 --> 00:25:41.040
at my favorite bakery
getting sold out.

00:25:41.040 --> 00:25:43.180
It's too late.

00:25:43.180 --> 00:25:47.390
Why, why could these houses not
just advertise the availability

00:25:47.390 --> 00:25:52.250
and rates of their driveways,
so my phone could scan for them,

00:25:52.250 --> 00:25:54.420
and query all of
them, and book the one

00:25:54.420 --> 00:25:58.026
that makes more sense for me in
a completely offline fashion?

00:25:58.026 --> 00:26:01.830
Taking it one step further,
if I'm late getting back,

00:26:01.830 --> 00:26:03.380
why can't these
houses then query

00:26:03.380 --> 00:26:05.310
my car, which will
tell them that I'm just

00:26:05.310 --> 00:26:10.142
a block away, so I can avoid
being penalized or towed?

00:26:10.142 --> 00:26:13.610
I'll tell you why.

00:26:13.610 --> 00:26:16.190
Because implementing
these features entails

00:26:16.190 --> 00:26:19.450
dealing with the vagaries
of Bluetooth and Wi-Fi

00:26:19.450 --> 00:26:23.330
across the cross product
of A, the range of Android

00:26:23.330 --> 00:26:27.180
OS versions out there, and
B, the variety of hardware

00:26:27.180 --> 00:26:29.500
out there.

00:26:29.500 --> 00:26:33.750
What these apps back then needed
was a reliable performance

00:26:33.750 --> 00:26:36.230
proximity platform
that abstracts away

00:26:36.230 --> 00:26:39.880
all this complexity
and leaves them free

00:26:39.880 --> 00:26:42.240
so they can focus on
just adding the features

00:26:42.240 --> 00:26:45.505
that matter to their users.

00:26:45.505 --> 00:26:47.880
Now at this point, I think we
all know where I'm heading.

00:26:47.880 --> 00:26:49.255
And there can be
only one thought

00:26:49.255 --> 00:26:51.210
racing through all your minds.

00:26:51.210 --> 00:26:54.590
This guy has got one rocking do.

00:26:54.590 --> 00:26:57.750
Well, that is kind of you
to say and relatively true.

00:26:57.750 --> 00:27:00.330
Allow me to be a
cautionary tale.

00:27:00.330 --> 00:27:02.690
This, boys and girls,
is what happens

00:27:02.690 --> 00:27:05.010
when you spend a year
working on building

00:27:05.010 --> 00:27:07.930
exactly this kind of platform.

00:27:07.930 --> 00:27:10.440
The radios have
commanded their sacrifice

00:27:10.440 --> 00:27:13.635
in the form of my
hair and my tears.

00:27:13.635 --> 00:27:15.180
Oh, so many tears.

00:27:18.390 --> 00:27:22.060
OK, now that we have established
the big bat of our story,

00:27:22.060 --> 00:27:24.560
it's time for our heroine to
come riding in to save the day.

00:27:27.570 --> 00:27:29.740
Nearby Connections
is the next step

00:27:29.740 --> 00:27:32.720
in the evolution of
Google's Nearby API,

00:27:32.720 --> 00:27:35.250
an API that started
with Nearby Messages

00:27:35.250 --> 00:27:38.530
as its vivant offering, but
which also quickly limited

00:27:38.530 --> 00:27:43.100
its own reach by A, requiring
a connection to the internet,

00:27:43.100 --> 00:27:46.380
and B, providing a
programming model that

00:27:46.380 --> 00:27:48.520
has proven to be clunky
in all but the most

00:27:48.520 --> 00:27:51.980
simple of cross
device interactions.

00:27:51.980 --> 00:27:55.380
Unix doesn't provide a pub/sub
API as its lowest level

00:27:55.380 --> 00:27:56.760
abstraction over the network.

00:27:56.760 --> 00:27:58.330
It provides sockets.

00:27:58.330 --> 00:27:59.800
And now so does Nearby.

00:28:03.060 --> 00:28:07.180
In a nutshell,
Nearby Connections

00:28:07.180 --> 00:28:11.010
enables the advertising and
discovery of nearby devices,

00:28:11.010 --> 00:28:15.430
as well as high-bandwidth
low-latency encrypted data

00:28:15.430 --> 00:28:20.970
transfers between these devices
in a fully-offline P2P manner.

00:28:20.970 --> 00:28:23.020
It achieves this by
using a combination

00:28:23.020 --> 00:28:27.710
of classic Bluetooth,
BLE, and Wi-Fi hotspots.

00:28:27.710 --> 00:28:30.640
And it leverages the strengths
of each while supplementing

00:28:30.640 --> 00:28:32.330
their respective weaknesses.

00:28:32.330 --> 00:28:35.760
For instance, Bluetooth
has low connection latency,

00:28:35.760 --> 00:28:37.900
but also provides low bandwidth.

00:28:37.900 --> 00:28:42.110
Wi-Fi hotspots have slightly
higher connection latency,

00:28:42.110 --> 00:28:44.460
but also provide much
higher bandwidth.

00:28:44.460 --> 00:28:47.090
So what we do is we
connect over Bluetooth

00:28:47.090 --> 00:28:49.300
and start transferring
data instantly.

00:28:49.300 --> 00:28:52.350
But in the background, we
also bring up a Wi-Fi hotspot.

00:28:52.350 --> 00:28:54.245
And when that's
ready, we seamlessly

00:28:54.245 --> 00:28:55.870
transfer your connection
from Bluetooth

00:28:55.870 --> 00:29:01.860
to Wi-Fi with absolutely no work
required by the app developer.

00:29:01.860 --> 00:29:04.400
With that, let's look at the
flow of the key parameters

00:29:04.400 --> 00:29:07.380
of the API.

00:29:07.380 --> 00:29:09.986
An advertiser calls
startAdvertising,

00:29:09.986 --> 00:29:11.360
and some time
later, a discoverer

00:29:11.360 --> 00:29:13.460
calls startDiscovery.

00:29:13.460 --> 00:29:16.120
Soon enough, the
discoverer is alerted

00:29:16.120 --> 00:29:18.720
to the advertiser's
presence by means

00:29:18.720 --> 00:29:21.120
of the onEndpointFound callback.

00:29:21.120 --> 00:29:22.760
If the discoverer
is interested, they

00:29:22.760 --> 00:29:25.100
can call requestConnection.

00:29:25.100 --> 00:29:27.700
This is the end of the
asymmetric part of the API.

00:29:27.700 --> 00:29:30.900
And from here on, everything
is completely symmetric.

00:29:30.900 --> 00:29:33.890
Both sides get an
onConnectionInitiated callback

00:29:33.890 --> 00:29:35.580
that gives them
an authentication

00:29:35.580 --> 00:29:38.280
token they can use to
verify that they are indeed

00:29:38.280 --> 00:29:40.700
talking to each other.

00:29:40.700 --> 00:29:43.230
Upon out-of-band
verification, they

00:29:43.230 --> 00:29:46.530
can both either call accept
or reject connection.

00:29:46.530 --> 00:29:48.990
And when each side gets
the other's response,

00:29:48.990 --> 00:29:51.830
we invoke the
onConnectionResult callback.

00:29:51.830 --> 00:29:55.850
At this point, the connection is
either established or it's not.

00:29:55.850 --> 00:29:57.910
From here, either
side can send payload

00:29:57.910 --> 00:30:00.190
by calling the
sendPayload method.

00:30:00.190 --> 00:30:01.930
This leads to the
other side getting

00:30:01.930 --> 00:30:05.980
the onPayloadReceived callback,
followed by both sides getting

00:30:05.980 --> 00:30:08.120
a series of
onPayloadTransferUpdate

00:30:08.120 --> 00:30:11.030
callbacks up until the transfer
reaches the final state

00:30:11.030 --> 00:30:13.140
of success or failure.

00:30:13.140 --> 00:30:15.770
Finally, either side can
disconnect at any time,

00:30:15.770 --> 00:30:17.760
and that leads to the
other side getting

00:30:17.760 --> 00:30:20.290
the onDisconnected callback.

00:30:20.290 --> 00:30:21.665
Aside from that,
there's a couple

00:30:21.665 --> 00:30:27.740
of more concepts in the API.

00:30:27.740 --> 00:30:31.520
We support three
kinds of payloads.

00:30:31.520 --> 00:30:36.617
Bytes, these are byte
arrays of up to 32k,

00:30:36.617 --> 00:30:38.950
and they are typically used
for sending metadata control

00:30:38.950 --> 00:30:40.970
messages.

00:30:40.970 --> 00:30:44.860
Files, these represent files
of the device's storage,

00:30:44.860 --> 00:30:48.360
and we make sure
that we transfer

00:30:48.360 --> 00:30:51.220
from the application to
the network interface

00:30:51.220 --> 00:30:54.960
with a minimal amount of copying
across process boundaries.

00:30:54.960 --> 00:30:58.710
And streams, this is good for
when you need to generate data

00:30:58.710 --> 00:31:00.790
on the fly, and you
don't know the final size

00:31:00.790 --> 00:31:03.520
up front, as is the case
with recorded audio or video.

00:31:06.112 --> 00:31:10.620
As I mentioned earlier, we
use multiple radio techniques

00:31:10.620 --> 00:31:14.710
to advertise, discover,
and establish connections.

00:31:14.710 --> 00:31:16.480
And the combinations
of interactions

00:31:16.480 --> 00:31:20.390
of these techniques are
qualified in our strategies.

00:31:20.390 --> 00:31:23.470
Strategies are named for how
far they'll cause their net

00:31:23.470 --> 00:31:26.800
to try and find a nearby device
and what kind of connection

00:31:26.800 --> 00:31:27.900
topology they will enable.

00:31:27.900 --> 00:31:30.630
And right now, we have two
of them, P2P_Star b star

00:31:30.630 --> 00:31:32.885
and P2P_Cluster.

00:31:32.885 --> 00:31:35.710
As the names might
suggest, P2P Star

00:31:35.710 --> 00:31:38.840
makes sense for when you
want to enforce a star

00:31:38.840 --> 00:31:42.440
network with a one-to-end
connection topology.

00:31:42.440 --> 00:31:43.940
And P2P Cluster
makes sense when you

00:31:43.940 --> 00:31:46.850
want to allow for slightly
looser end-to-end connection

00:31:46.850 --> 00:31:48.500
topologies.

00:31:48.500 --> 00:31:51.887
For example, a classroom
app where the teacher

00:31:51.887 --> 00:31:54.470
wants to host a quiz for all the
students, that would probably

00:31:54.470 --> 00:31:57.840
be best mounted over P2P Star,
with the teacher as the one

00:31:57.840 --> 00:32:01.730
advertiser and the students
as the end discoverers.

00:32:01.730 --> 00:32:03.350
And the same classroom
app could have

00:32:03.350 --> 00:32:05.700
a mode that allows
students to break out

00:32:05.700 --> 00:32:08.850
into ephemeral project groups.

00:32:08.850 --> 00:32:11.270
This mode, where
students want to drift

00:32:11.270 --> 00:32:13.772
in and out of multiple
groups, would be best served

00:32:13.772 --> 00:32:14.480
with P2P Cluster.

00:32:17.690 --> 00:32:21.120
Now let's see how all
this can be put together

00:32:21.120 --> 00:32:26.120
in an undoubtedly
harmless mock application.

00:32:26.120 --> 00:32:30.130
In a world where the machines
have not yet taken over,

00:32:30.130 --> 00:32:32.160
and you feel compelled
to write a fun

00:32:32.160 --> 00:32:35.030
little app to make a collection
of drones self-assimilate.

00:32:35.030 --> 00:32:37.010
"But Varun," I hear
a voice ring out

00:32:37.010 --> 00:32:40.310
in concern, "Why would
I want to do that?"

00:32:40.310 --> 00:32:42.480
That's for the machines
to know and for humanity

00:32:42.480 --> 00:32:44.390
to eventually find out.

00:32:44.390 --> 00:32:48.660
For now, let's
just let this fly.

00:32:48.660 --> 00:32:51.850
So as I was saying,
in that world,

00:32:51.850 --> 00:32:56.250
since we want every drone to
see every other drone nearby,

00:32:56.250 --> 00:32:59.650
we'll make every drone advertise
and discover at the same time.

00:33:02.210 --> 00:33:05.900
Because we want them to exchange
some small control information

00:33:05.900 --> 00:33:08.920
before making any larger
decisions, like what

00:33:08.920 --> 00:33:11.300
to do with these
puny humans, we'll

00:33:11.300 --> 00:33:16.030
make them instantly connect upon
discovery, often of advertiser.

00:33:16.030 --> 00:33:19.080
And we'll have both sides auto
accept the connection, like so.

00:33:21.940 --> 00:33:24.940
Once they are connected,
that short control message

00:33:24.940 --> 00:33:28.680
we spoke about could be
modeled as a bytes payload.

00:33:28.680 --> 00:33:33.130
In our case, we'll, let's say,
perform a quick leader election

00:33:33.130 --> 00:33:38.020
algorithm, words we
will surely live to rue.

00:33:38.020 --> 00:33:41.250
And finally, the leader can
send a stream payload back

00:33:41.250 --> 00:33:44.510
to the follower that
allows sending constantly

00:33:44.510 --> 00:33:47.160
changing updates about
discovering location

00:33:47.160 --> 00:33:51.320
so they can move in lock
step with military precision.

00:33:51.320 --> 00:33:52.730
What could possibly go wrong?

00:33:55.370 --> 00:34:00.240
Now that was the simple
base case of two drones.

00:34:00.240 --> 00:34:02.790
Applying mathematical induction
and generalizing to end

00:34:02.790 --> 00:34:05.140
is left as an exercise
for the reader.

00:34:05.140 --> 00:34:07.270
But by and large,
your end result

00:34:07.270 --> 00:34:10.125
should look something like this.

00:34:13.409 --> 00:34:15.730
At this point,
Brian has insisted

00:34:15.730 --> 00:34:18.576
that I assure all of you
that I absolutely do not

00:34:18.576 --> 00:34:20.409
have an army of
preprogrammed drones sitting

00:34:20.409 --> 00:34:23.760
in my garage, armed and ready
to take flight at my slightest

00:34:23.760 --> 00:34:24.570
whim.

00:34:24.570 --> 00:34:26.260
So move along folks.

00:34:26.260 --> 00:34:27.110
Nothing to see here.

00:34:31.820 --> 00:34:34.800
While we wait for the day that
our benevolent robots will

00:34:34.800 --> 00:34:37.739
grace us with their
cold, metallic probes,

00:34:37.739 --> 00:34:39.750
we have some slightly
less bone-chilling uses

00:34:39.750 --> 00:34:43.412
of Nearby Connections
spotted in the wild.

00:34:43.412 --> 00:34:45.370
The Weather Channel is
using Nearby Connections

00:34:45.370 --> 00:34:47.429
to build a pretty
darn cool offline

00:34:47.429 --> 00:34:49.960
mesh to help spread
urgent weather updates

00:34:49.960 --> 00:34:55.150
and warnings, especially in
the wake of natural disasters.

00:34:55.150 --> 00:34:57.520
Sendanywhere is a
South Korean app

00:34:57.520 --> 00:34:59.307
that allows sharing
files intelligently

00:34:59.307 --> 00:35:00.890
in the most efficient
manner possible,

00:35:00.890 --> 00:35:02.880
regardless of whether
you're online or not.

00:35:02.880 --> 00:35:04.380
And they're using
Nearby Connections

00:35:04.380 --> 00:35:07.900
for their offline modality.

00:35:07.900 --> 00:35:11.094
Pocket Casts have been a great
partner for Nearby Messages.

00:35:11.094 --> 00:35:12.510
And they now want
to enable people

00:35:12.510 --> 00:35:16.130
sharing and discovering podcasts
in a completely offline manner.

00:35:16.130 --> 00:35:18.032
For example, when you're
stuck in an aircraft

00:35:18.032 --> 00:35:19.490
and are looking to
cloud, so what's

00:35:19.490 --> 00:35:23.210
your options for entertainment?

00:35:23.210 --> 00:35:25.140
GameInsight is a
leading game developer,

00:35:25.140 --> 00:35:26.640
and they're using
Nearby Connections

00:35:26.640 --> 00:35:29.210
to not only find nearby
players, but also to run

00:35:29.210 --> 00:35:31.330
their games completely offline.

00:35:31.330 --> 00:35:34.010
Again, being stuck in the inside
of an aircraft comes to mind.

00:35:36.790 --> 00:35:40.030
Hotstar is India's fastest
growing streaming network.

00:35:40.030 --> 00:35:41.670
And they're using
Nearby Connections

00:35:41.670 --> 00:35:45.340
to allow offline sharing of
downloaded movies and TV shows.

00:35:45.340 --> 00:35:47.620
So you don't need to have
access to the internet.

00:35:47.620 --> 00:35:51.150
You only need access
to a friend who does.

00:35:53.760 --> 00:35:57.200
And finally, Android TV is about
to launch a new remote control

00:35:57.200 --> 00:36:00.650
app where they use Nearby
Connections to not only set up

00:36:00.650 --> 00:36:02.890
your new Android
TV and configure

00:36:02.890 --> 00:36:06.616
it to be on your Wi-Fi
network, but also to serve

00:36:06.616 --> 00:36:08.990
interactive second stream
content in a streaming fashion.

00:36:14.620 --> 00:36:18.780
Oh, and before I go,
there is one more thing.

00:36:18.780 --> 00:36:23.180
That AP&amp;P, Pay &amp; Park, idea
I spoke about back there--

00:36:23.180 --> 00:36:25.590
whichever one of you out
here makes your billions

00:36:25.590 --> 00:36:28.430
by bringing that to life,
please at least send me a

00:36:28.430 --> 00:36:30.180
postcard from your
private island

00:36:30.180 --> 00:36:33.010
so I'll know that
this was not in vain,

00:36:33.010 --> 00:36:34.810
and this happened
for a good cause.

00:36:34.810 --> 00:36:36.188
Thank you.

00:36:36.188 --> 00:36:41.707
[APPLAUSE]

00:36:41.707 --> 00:36:42.790
BRIAN DUFF: Thanks, Varun.

00:36:42.790 --> 00:36:44.665
I'm really nervous about
these killer robots.

00:36:44.665 --> 00:36:46.900
But I'm sure it's
all going to be OK.

00:36:46.900 --> 00:36:50.270
So the Nearby Connections API is
going to be available, really,

00:36:50.270 --> 00:36:52.530
in a couple of weeks in a
new version of Google Play

00:36:52.530 --> 00:36:55.160
services, and we're really
excited to see what you're all

00:36:55.160 --> 00:36:56.567
going to build with that.

00:36:56.567 --> 00:36:59.150
Please keep giving us feedback
about the kinds of things you'd

00:36:59.150 --> 00:37:00.661
like us to do with Nearby.

00:37:00.661 --> 00:37:02.410
We're really excited
about your use cases,

00:37:02.410 --> 00:37:04.380
and we want to make
the API better.

00:37:04.380 --> 00:37:06.380
There's a wealth of
information on our developer

00:37:06.380 --> 00:37:08.490
site about all of our
APIs, Awareness and Nearby.

00:37:08.490 --> 00:37:11.170
There's a bunch of examples,
sample apps, reference

00:37:11.170 --> 00:37:12.620
informantation.

00:37:12.620 --> 00:37:14.210
And please join
our mailing list.

00:37:14.210 --> 00:37:16.914
We'll send you updates when
the APIs are available.

00:37:16.914 --> 00:37:19.080
And I just want to say a
big Thank You to all of you

00:37:19.080 --> 00:37:20.030
for coming here.

00:37:20.030 --> 00:37:22.710
I think we can build
really great apps together.

00:37:22.710 --> 00:37:24.100
And thanks very much.

00:37:24.100 --> 00:37:26.850
[MUSIC PLAYING]

