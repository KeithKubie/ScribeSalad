WEBVTT
Kind: captions
Language: en

00:00:00.570 --> 00:00:03.100
So data store is a great way to store

00:00:03.100 --> 00:00:06.270
and retrieve massive amounts of data. So therefore, it is

00:00:06.270 --> 00:00:09.300
very scalable. But it would still be faster if the

00:00:09.300 --> 00:00:12.220
data was served from memory. As we know, we want

00:00:12.220 --> 00:00:15.420
our application to have as small latency as possible.

00:00:15.420 --> 00:00:19.060
So whatever we can do to reduce this, the better.

00:00:19.060 --> 00:00:22.340
This is exactly where Memcache comes in handy. As the

00:00:22.340 --> 00:00:25.770
name suggests, Memcache is a memory cache which sits next

00:00:25.770 --> 00:00:28.610
to your app engine instances. Any data you store

00:00:28.610 --> 00:00:31.810
here can be immediately retrieved without having to read from

00:00:31.810 --> 00:00:34.960
data store. So when you store data in data store,

00:00:34.960 --> 00:00:37.680
you can also store a copy of Memcache. That means

00:00:37.680 --> 00:00:40.660
you can retrieve it from Memcache later, and therefore deliver

00:00:40.660 --> 00:00:43.950
response really, really fast. This is great, since you don't

00:00:43.950 --> 00:00:47.630
want your users to wait. Both Datastore and Memcache are

00:00:47.630 --> 00:00:50.960
shared across any number of instances of your application that

00:00:50.960 --> 00:00:53.730
app NU starts. This means that they can all

00:00:53.730 --> 00:00:56.970
access the same data provided that your application updates

00:00:56.970 --> 00:01:00.990
Memcache when it updates Datastore. The difference between Memcache

00:01:00.990 --> 00:01:04.550
and Datastore however, is that Memcache is a cache.

00:01:04.550 --> 00:01:07.200
This means that the app engine platform can decide

00:01:07.200 --> 00:01:09.720
to free memory at any time, in which case

00:01:09.720 --> 00:01:13.600
the retrieve operation will fail. So your application code

00:01:13.600 --> 00:01:16.080
needs to be prepared if this happens, and in that

00:01:16.080 --> 00:01:19.000
case retrieve the data from Datastore. Let's look at

00:01:19.000 --> 00:01:22.360
a summary of Memcache. Memcache is of course, not limited

00:01:22.360 --> 00:01:25.730
to cache Datastore information. You can put any data you

00:01:25.730 --> 00:01:29.130
want in Memcache. Since the data is retrieved directly from

00:01:29.130 --> 00:01:32.310
memory, the latency is very low. This help it build

00:01:32.310 --> 00:01:35.590
applications that can scale to extreme levels. But since it's

00:01:35.590 --> 00:01:38.100
a memory cache, it also means that the memory could

00:01:38.100 --> 00:01:41.470
be freed and the data be evicted from the cache.

00:01:41.470 --> 00:01:44.170
So your code can not rely on it always

00:01:44.170 --> 00:01:47.220
residing in the memcache. All right, that's the overview

00:01:47.220 --> 00:01:49.550
of Memcache, it's now time for you to hack

00:01:49.550 --> 00:01:52.720
in by adding Memcache functionality to the comfort central app.

