WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
So one of the topics we're covering in this course

00:00:02.000 --> 00:00:05.000
is Memoization or caching,

00:00:05.000 --> 00:00:08.000
writing down values that we've already computed

00:00:08.000 --> 00:00:11.000
so that we can be lazy and not have to recompute them later.

00:00:11.000 --> 00:00:14.000
We've used this as one implementation of parsing

00:00:14.000 --> 00:00:17.000
but in the Real World, it might come up in many other places.

00:00:17.000 --> 00:00:19.000
Brendan, have you had a chance to use it at Mozilla

00:00:19.000 --> 00:00:21.000
or in your other projects?

00:00:21.000 --> 00:00:24.000
Not so much in parsing because we are in a tight competitive regime

00:00:24.000 --> 00:00:30.000
with other browsers, and you have to parse very efficiently and lex very efficiently.

00:00:30.000 --> 00:00:36.000
But in building a browser, you end up memoizing or caching a lot.

00:00:36.000 --> 00:00:38.000
You end up trying to remember decisions you made

00:00:38.000 --> 00:00:47.000
that were expensive, that can be preserved under some rules and reused.

00:00:47.000 --> 00:00:51.000
We also have a memory management system that's quite complex.

00:00:51.000 --> 00:00:53.000
We have a garbage collector for JavaScript,

00:00:53.000 --> 00:00:57.000
we have a reference counting system for our C++ code.

00:00:57.000 --> 00:01:00.000
The two have to meet, and it's possible to form cycles,

00:01:00.000 --> 00:01:02.000
which then have to be collected.

00:01:02.000 --> 00:01:05.000
We use an old David Bacon data programming trick.

00:01:05.000 --> 00:01:07.000
It's Bacon and Rajan PLDI 2001, I think.

00:01:07.000 --> 00:01:10.000
It's a cycle collector for reference code objects,

00:01:10.000 --> 00:01:13.000
and it buffers pointers that it suspects of forming cycles.

00:01:13.000 --> 00:01:17.000
And a pointer, in a reference kind of graph, can form a cycle.

00:01:17.000 --> 00:01:22.000
Every reference count is going down, from above 2 to 1 or above

00:01:22.000 --> 00:01:27.000
so that you may still have a stuck reference there, due to a circle.

00:01:27.000 --> 00:01:30.000
And so we use these techniques.

00:01:30.000 --> 00:01:32.000
We constrain a little bit in using C++

00:01:32.000 --> 00:01:36.000
that has to run on Windows, Mac, and Linux.

00:01:36.000 --> 00:01:40.000
But in Python and JavaScript, people memoize all the time.

00:01:40.000 --> 00:01:47.000
And there's a craze now for PEGs--

00:01:47.000 --> 00:01:49.000
Parser Expression Grammars?

00:01:49.000 --> 00:01:51.000
I think that's the acronym; I always mix it up with something else.

00:01:51.000 --> 00:01:56.000
But it's a parsing technique that can use memoization

00:01:56.000 --> 00:01:59.000
when it's backtracking

00:01:59.000 --> 00:02:02.000
and accord it Choice, so

00:02:02.000 --> 00:02:05.000
we're familiar with this, and we try to use memoization to a good effect.

00:02:05.000 --> 09:59:59.000
At Mozilla we have less use in parsing--more runtime, I'd say.

