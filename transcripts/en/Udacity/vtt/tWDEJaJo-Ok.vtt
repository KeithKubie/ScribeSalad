WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:03.940
In the following quizzes we'll really be
putting our new knowledge of while-loops,

00:00:03.940 --> 00:00:07.780
functions, string slicing, and
if-else statements to the test.

00:00:07.780 --> 00:00:10.550
At the end of this work session
you'll be asked to write code for

00:00:10.550 --> 00:00:14.220
a function called process_madlib
which takes in a string mad_lib and

00:00:14.220 --> 00:00:18.430
returns a new string processed for
all instances of NOUN and VERB,

00:00:18.430 --> 00:00:20.370
are replaced with random nouns and
verbs.

00:00:21.510 --> 00:00:23.590
This might seem like
a pretty daunting task, and

00:00:23.590 --> 00:00:27.040
it's totally normal to have that
feeling of where do I begin?

00:00:27.040 --> 00:00:31.110
But the important thing to do before we
start writing any code is to make a plan

00:00:31.110 --> 00:00:32.800
to solve this problem.

00:00:32.800 --> 00:00:35.310
Now, there are many ways that
we can write this function and

00:00:35.310 --> 00:00:37.810
I encourage you to try and
implement your own way, but

00:00:37.810 --> 00:00:39.710
I'll show you the way that
I approach this problem.

00:00:39.710 --> 00:00:42.190
How about we start with an example?

00:00:42.190 --> 00:00:45.350
Let's have this string sentence
was passed into our 

00:00:45.350 --> 00:00:46.880
process_madlib function.

00:00:46.880 --> 00:00:48.770
Let's remember the goal
of our final function.

00:00:48.770 --> 00:00:52.720
We're supposed to return a new string
processed where each instance of NOUN or

00:00:52.720 --> 00:00:55.300
VERB is replaced with a random noun or
verb.

00:00:55.300 --> 00:00:58.690
So let's write our currently empty
string processed right underneath.

00:00:58.690 --> 00:01:02.150
Now, the most intuitive approach for me
was to look at each word in the string

00:01:02.150 --> 00:01:05.420
past in, check if the word
is equal to NOUN or VERB.

00:01:05.420 --> 00:01:09.370
And if it is, we'll add a random noun or
verb to the string processed.

00:01:09.370 --> 00:01:13.180
If not, we'll add the word we're
looking at to processed instead.

00:01:13.180 --> 00:01:16.040
Although this way of building a Mad Libs
generator seems straightforward,

00:01:16.040 --> 00:01:18.530
things can change quite
a bit once you start coding.

00:01:18.530 --> 00:01:21.670
For example, when I try putting these
steps into Python, it wasn't so

00:01:21.670 --> 00:01:22.270
easy to do.

00:01:22.270 --> 00:01:24.640
My code started to become pretty messy.

00:01:24.640 --> 00:01:27.940
And as I found,
messy code means buggy code.

00:01:27.940 --> 00:01:30.420
Something that I wish I had learned
when I first started programming,

00:01:30.420 --> 00:01:33.680
was that if a solution you're working
on just doesn't seem to be working or

00:01:33.680 --> 00:01:34.875
is getting too complicated.

00:01:34.875 --> 00:01:38.210
Then it can be a good idea
to try a different approach.

00:01:38.210 --> 00:01:40.380
It's all right to say all right
this didn't work out too well,

00:01:40.380 --> 00:01:42.400
how about we try something different.

00:01:42.400 --> 00:01:44.440
So that's what I did,
I stepped back, thought for

00:01:44.440 --> 00:01:46.380
a bit,
played a game of ping pong or two,

00:01:46.380 --> 00:01:50.050
talked about ways to solve this problem
with some friends, and soon afterwards I

00:01:50.050 --> 00:01:53.650
thought of another solution to this
problem that I was excited to try out.

00:01:53.650 --> 00:01:55.110
Here's my new approach to the problem.

00:01:56.120 --> 00:02:00.150
How about instead of going through
the string passed in word by word,

00:02:00.150 --> 00:02:01.880
you go through it
character by character.

00:02:03.190 --> 00:02:06.290
Now, imagine if you have a box
that's four characters long.

00:02:06.290 --> 00:02:08.870
Once that we place it on top
of the string parsing, so

00:02:08.870 --> 00:02:11.100
in this case, sentence.

00:02:11.100 --> 00:02:15.830
You then check whatever is inside
this box is equal to NOUN or VERB.

00:02:15.830 --> 00:02:20.200
And if it is, we add a random noun or
verb to a processed string, and

00:02:20.200 --> 00:02:22.960
move the box over by four characters.

00:02:22.960 --> 00:02:26.880
If whatever's inside isn't equal to NOUN
or VERB, we'll just simply add the first

00:02:26.880 --> 00:02:31.460
character to our string processed, and
move the box over by one character.

00:02:31.460 --> 00:02:37.050
So in this example, everything in
the box is equal to I single space am.

00:02:37.050 --> 00:02:42.310
So we ask the question, is the contents
of this box equal to NOUN or VERB?

00:02:42.310 --> 00:02:45.580
It's not, so add the first character,
which in this case,

00:02:45.580 --> 00:02:49.000
is I, to our processed string,
and move the box over by one.

00:02:49.000 --> 00:02:53.610
Now the box is equal to single
space am and single space.

00:02:53.610 --> 00:02:58.560
So we ask the same question,
is the box equal to NOUN or VERB?

00:02:58.560 --> 00:03:01.760
It's not, so we'll just add the first
character, which is the single space

00:03:01.760 --> 00:03:04.930
character to our string processed
and move the box over by one.

00:03:06.160 --> 00:03:09.220
Now the box is equal
to am single space a.

00:03:09.220 --> 00:03:14.570
So, we ask the same question is box
equal to NOUN or VERB, it's not.

00:03:14.570 --> 00:03:16.010
So we'll add the first character,

00:03:16.010 --> 00:03:18.830
which in this case is a,
to our processed string.

00:03:18.830 --> 00:03:19.870
And move the box over by one.

00:03:19.870 --> 00:03:22.430
Let's see if we can
continue this process and

00:03:22.430 --> 00:03:24.070
we're almost at the end of our string.

00:03:24.070 --> 00:03:26.500
And box is now equal to space NOU.

00:03:26.500 --> 00:03:31.230
We ask the same question, is
the box equal to NOUN or VERB?

00:03:31.230 --> 00:03:33.350
Well almost but not quite.

00:03:33.350 --> 00:03:37.000
So we'll add the first character of
our box, which is a single space,

00:03:37.000 --> 00:03:40.710
to our processed string and
move the box over by one character.

00:03:40.710 --> 00:03:42.650
Now our box is equal to NOUN.

00:03:42.650 --> 00:03:47.640
So we add a random noun to our processed
string and move our box over by four.

00:03:47.640 --> 00:03:49.880
And now,
our box is at the end of this sentence.

00:03:49.880 --> 00:03:51.500
So we have nothing else to do.

00:03:51.500 --> 00:03:55.010
After testing the box idea on
a few other strings with success,

00:03:55.010 --> 00:03:58.970
I figure that this was a solid approach
to building a Mab Libs generator.

00:03:58.970 --> 00:04:02.150
Since the solution was straightforward,
I transferred over the code pretty well.

00:04:02.150 --> 00:04:04.740
Now that we have a good
visual idea of how

00:04:04.740 --> 00:04:06.640
the final function is suppose to work.

00:04:06.640 --> 00:04:08.130
It's your job to put this in code.

