WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
[Narrator] Any procedure that we could write recursively,

00:00:04.000 --> 00:00:07.000
we can also write without using a recursive definition,

00:00:07.000 --> 00:00:11.000
and I want to show you another way that we might have defined is palindrome.

00:00:11.000 --> 00:00:13.000
Here we're doing this with a for loop,

00:00:13.000 --> 00:00:19.000
and we're looping using the variable I and the range from 0 to the length of S divided by 2.

00:00:19.000 --> 00:00:24.000
That's going through halfway of S, and inside the loop,

00:00:24.000 --> 00:00:32.000
we have an if test that checks if the character at position I is different from the character at position -I + 1.

00:00:32.000 --> 00:00:36.000
That's going to be counting from the back of the string I's position away.

00:00:36.000 --> 00:00:40.000
If those are different, then we found a mismatch and we return false.

00:00:40.000 --> 00:00:43.000
If they're not different, we're going to keep going through the loop.

00:00:43.000 --> 00:00:46.000
Once we get to the end of the loop without finding any differences,

00:00:46.000 --> 00:00:48.000
we know it's a palindrome and we return true.

00:00:48.000 --> 00:00:51.000
This is also another way we could define is palindrome.

00:00:51.000 --> 00:00:55.000
I think this is more complicated to understand and harder to get right.

00:00:55.000 --> 00:00:58.000
It took me 3 tries before this could work correctly,

00:00:58.000 --> 00:01:02.000
whereas the recursive definition I could get right the first time.

00:01:02.000 --> 00:01:06.000
If we wanted to test very long palindromes this would be much more efficient

00:01:06.000 --> 00:01:09.000
than the code that we had with the recursive definition,

00:01:09.000 --> 00:01:11.000
and there are a couple reasons for that.

00:01:11.000 --> 00:01:14.000
One is that the recursive definition keeps making new strings.

00:01:14.000 --> 00:01:19.000
Every time we do the recursive call we have to create a new string and that's pretty expensive.

00:01:19.000 --> 00:01:23.000
Another reason is that the recursive calls themselves are fairly expensive,

00:01:23.000 --> 00:01:26.000
and there are languages that make recursive calls fairly cheap.

00:01:26.000 --> 00:01:28.000
Python is not one of them.

00:01:28.000 --> 00:01:31.000
In Python, it's fairly expensive to do a recursive call.

00:01:31.000 --> 00:01:34.000
For most procedures, the recursive way is often the most elegant

00:01:34.000 --> 00:01:36.000
and the easiest way to get correct.

00:01:36.000 --> 00:01:40.000
If we're really worried about performance and we need procedures to work on really large inputs,

00:01:40.000 --> 99:59:59.000
we're often better off trying to find a non-recursive way of defining that procedure.

