WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.808
[MUSIC PLAYING]

00:00:06.090 --> 00:00:06.950
Hi.

00:00:06.950 --> 00:00:12.630
My name is Femi Taiwo and I
am the CTO for INITS Limited.

00:00:12.630 --> 00:00:17.830
Today, I'll be talking about how
we build apps that scale, more

00:00:17.830 --> 00:00:22.800
like the things we do to ensure
that our applications are

00:00:22.800 --> 00:00:26.870
able to handle a large
amount of traffic.

00:00:26.870 --> 00:00:30.670
So imagine you're
designing a system that

00:00:30.670 --> 00:00:33.240
will need to send
out notifications

00:00:33.240 --> 00:00:39.810
to users, 100,000 users,
for example, via SMS, email,

00:00:39.810 --> 00:00:44.490
and push notifications
for mobile phones.

00:00:44.490 --> 00:00:47.422
If there are just 10
users or 20 users,

00:00:47.422 --> 00:00:49.600
it would be
relatively easy and it

00:00:49.600 --> 00:00:51.785
would be executed within
a few milliseconds

00:00:51.785 --> 00:00:54.285
or a second or two.

00:00:54.285 --> 00:00:58.210
When you're talking about large
amounts of people, 100,000,

00:00:58.210 --> 00:01:05.010
for example, these processes
can take a very long time.

00:01:05.010 --> 00:01:07.760
A queue mechanism
would simply take

00:01:07.760 --> 00:01:11.380
the data you've provided
to it and process it

00:01:11.380 --> 00:01:16.880
in the background, and then
provide feedback afterwards

00:01:16.880 --> 00:01:21.330
to the admin about the
status of the messages

00:01:21.330 --> 00:01:24.360
that the admin has created.

00:01:24.360 --> 00:01:28.110
This is an app which requires
users to verify their accounts

00:01:28.110 --> 00:01:31.290
by entering the code sent
to their phone number

00:01:31.290 --> 00:01:33.040
after signing up.

00:01:33.040 --> 00:01:35.540
I have written
this code hopefully

00:01:35.540 --> 00:01:38.010
in a way that makes it
extremely easy to follow

00:01:38.010 --> 00:01:41.230
with as few lines as possible.

00:01:41.230 --> 00:01:45.650
It's not meant for
production at all.

00:01:45.650 --> 00:01:48.870
And I'm going to just fill
out the form now and put

00:01:48.870 --> 00:01:53.120
the mobile number and submit.

00:01:53.120 --> 00:01:57.800
Waiting, waiting, waiting.

00:01:57.800 --> 00:01:58.410
It's back.

00:01:58.410 --> 00:02:00.061
Great.

00:02:00.061 --> 00:02:01.810
Now, let's take a look
at the code behind.

00:02:05.170 --> 00:02:08.970
Here is the form with
all the elements inside.

00:02:08.970 --> 00:02:12.090
This is the part where it
saves the information that

00:02:12.090 --> 00:02:15.037
has been submitted by the user.

00:02:15.037 --> 00:02:16.495
Let's take a look
at that function.

00:02:19.080 --> 00:02:24.160
Now, I'm using Memcache just
for ease of demonstration.

00:02:24.160 --> 00:02:28.300
This is not what I
should use, really,

00:02:28.300 --> 00:02:31.740
but I'm using it just to ease
up the process of demonstrating

00:02:31.740 --> 00:02:37.890
saving to a database and
retrieving information from it.

00:02:37.890 --> 00:02:41.700
What you see here is
I'm generating an ID,

00:02:41.700 --> 00:02:45.990
generating a code as well,
and saving to my database.

00:02:48.550 --> 00:02:53.310
Lastly, I have a method called
Send Welcome Message, which

00:02:53.310 --> 00:02:59.510
essentially lets me [INAUDIBLE],
which essentially creates

00:02:59.510 --> 00:03:03.530
parameters for sending an SMS to
the client or recipient, which

00:03:03.530 --> 00:03:06.680
is my phone number in this case.

00:03:06.680 --> 00:03:09.302
Now, to simulate a
network or service delay,

00:03:09.302 --> 00:03:10.760
I have this sleep
for three seconds

00:03:10.760 --> 00:03:15.230
here, which is why you
notice that when I submitted

00:03:15.230 --> 00:03:18.490
the form earlier, it took a
few seconds before it responded

00:03:18.490 --> 00:03:21.200
to me.

00:03:21.200 --> 00:03:23.760
Now, a problem
with this design is

00:03:23.760 --> 00:03:28.290
that it means the user who just
submitted the form would have

00:03:28.290 --> 00:03:31.600
to wait for the entire
interaction between my server

00:03:31.600 --> 00:03:35.530
and the SMS provider to be
completed before the next page

00:03:35.530 --> 00:03:41.790
loads, and any number of things
can go wrong at this point.

00:03:41.790 --> 00:03:45.330
What if, for example, your
third party provider at the SMS

00:03:45.330 --> 00:03:47.780
gateway is not reachable?

00:03:47.780 --> 00:03:50.480
What if the service is
temporarily unavailable?

00:03:50.480 --> 00:03:53.240
What happens?

00:03:53.240 --> 00:03:58.060
A better design is to
simply send it to a queue.

00:03:58.060 --> 00:04:01.470
Here's what I should
be doing instead.

00:04:01.470 --> 00:04:03.950
When the user fills
out this form,

00:04:03.950 --> 00:04:05.990
now I'm not going to
submit this form now.

00:04:05.990 --> 00:04:09.020
I'm just going to
fill it out for now.

00:04:09.020 --> 00:04:10.900
What should have
happened is that in place

00:04:10.900 --> 00:04:14.000
of trying to connect to the
API at this point in time,

00:04:14.000 --> 00:04:16.790
I should just add it to a queue.

00:04:16.790 --> 00:04:19.720
I already have a method called
Queue of Welcome Message, which

00:04:19.720 --> 00:04:23.140
helps me add it to a queue.

00:04:23.140 --> 00:04:25.720
Let's visit that function.

00:04:25.720 --> 00:04:28.800
Now, I'm using Google App
Engine for this demonstration.

00:04:28.800 --> 00:04:32.360
And Google App Engine has an
awesome in-built queuing system

00:04:32.360 --> 00:04:36.020
that requires zero set up.

00:04:36.020 --> 00:04:39.350
What I just need to do is to
create an instance of this push

00:04:39.350 --> 00:04:43.200
queue class, tell it
what URL it needs to call

00:04:43.200 --> 00:04:45.912
and parameters I
should pass to it.

00:04:45.912 --> 00:04:50.320
Then I can add that
particular task to the queue.

00:04:50.320 --> 00:04:52.150
Now that I've done
this, I'm just

00:04:52.150 --> 00:04:55.820
going to go ahead
and submit this form.

00:04:55.820 --> 00:04:58.935
You notice that it
will return very fast.

00:04:58.935 --> 00:05:00.310
Now, what has
happened is that it

00:05:00.310 --> 00:05:06.240
has transferred to that task
and the tasks in the background.

00:05:06.240 --> 00:05:07.820
And there you go.

00:05:07.820 --> 00:05:10.170
SMS now is on my
phone so I didn't

00:05:10.170 --> 00:05:12.839
have to keep the
user waiting at all.

00:05:12.839 --> 00:05:15.130
Here are three more reasons
why queues are very useful.

00:05:19.510 --> 00:05:23.790
In summary, if you want to
scale, you should use a queue.

00:05:23.790 --> 00:05:27.140
[MUSIC PLAYING]

