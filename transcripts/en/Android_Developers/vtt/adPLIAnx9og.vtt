WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.960
[MUSIC PLAYING]

00:00:01.960 --> 00:00:02.460
Listen.

00:00:02.460 --> 00:00:04.800
We know that you love threading.

00:00:04.800 --> 00:00:07.360
And we know that for 99%
of your threading needs,

00:00:07.360 --> 00:00:08.980
AsyncTask is the right solution.

00:00:08.980 --> 00:00:11.390
But for the other work, you
might need a different kind

00:00:11.390 --> 00:00:12.420
of threading primitive.

00:00:12.420 --> 00:00:13.420
My name is Colt McAnlis.

00:00:13.420 --> 00:00:16.430
And for the types of work that
might not deal with UI updates,

00:00:16.430 --> 00:00:18.709
HandlerThreads are
a nifty solution.

00:00:18.709 --> 00:00:20.250
See, when it comes
to threading work,

00:00:20.250 --> 00:00:22.540
most devs have a
round trip model.

00:00:22.540 --> 00:00:23.760
Now, you've got some work.

00:00:23.760 --> 00:00:25.980
You want it tossed from the UI
thread to some other thread.

00:00:25.980 --> 00:00:28.500
And then, when the work needs
to come back to the UI thread,

00:00:28.500 --> 00:00:31.630
you've got to update some visual
thingamajigger or whatever.

00:00:31.630 --> 00:00:35.290
For these types of situations,
AsyncTask is obviously

00:00:35.290 --> 00:00:36.680
the easiest solution for you.

00:00:36.680 --> 00:00:38.560
I mean, it wraps
up all the overhead

00:00:38.560 --> 00:00:40.820
of pushing work from the UI
thread to a worker thread

00:00:40.820 --> 00:00:43.370
and then getting the results
back to the UI thread.

00:00:43.370 --> 00:00:45.310
But AsyncTask isn't
the right threading

00:00:45.310 --> 00:00:47.570
primitive for every situation.

00:00:47.570 --> 00:00:49.980
Consider the challenge
of getting preview frames

00:00:49.980 --> 00:00:51.221
from your camera.

00:00:51.221 --> 00:00:52.720
These previews are
given back to you

00:00:52.720 --> 00:00:55.040
via the onPreviewFrame
callback, which

00:00:55.040 --> 00:00:57.630
is invoked on the same
thread that the camera dot

00:00:57.630 --> 00:00:59.640
open function was called on.

00:00:59.640 --> 00:01:02.420
So if this callback were
invoked on the UI thread,

00:01:02.420 --> 00:01:04.790
then the task of dealing
with those huge pixel arrays

00:01:04.790 --> 00:01:07.160
would be interfering with
rendering and event processing

00:01:07.160 --> 00:01:07.660
work.

00:01:07.660 --> 00:01:10.170
And same thing
goes for AsyncTask.

00:01:10.170 --> 00:01:13.190
Remember that by default,
these execute serially

00:01:13.190 --> 00:01:15.500
on another thread, which
means that dealing with an 8

00:01:15.500 --> 00:01:19.460
megapixels block of data
might stall other AsyncTask

00:01:19.460 --> 00:01:22.130
packets that the UI
thread is waiting on.

00:01:22.130 --> 00:01:25.970
So really, what you want is a
non-UI, non-AsyncTask thread

00:01:25.970 --> 00:01:28.290
that can receive these
callbacks and potentially spend

00:01:28.290 --> 00:01:30.210
a long time
processing that work.

00:01:30.210 --> 00:01:33.470
And this is exactly what
HandlerThread is for.

00:01:33.470 --> 00:01:35.090
See, a HandlerThread
is effectively

00:01:35.090 --> 00:01:38.380
a long-running thread that
grabs work from a queue

00:01:38.380 --> 00:01:39.490
and operates on it.

00:01:39.490 --> 00:01:41.930
It's a combination of a few
other Android [INAUDIBLE],

00:01:41.930 --> 00:01:45.420
namely a Looper, which keeps the
thread live and holds a message

00:01:45.420 --> 00:01:47.720
queue and a Handler
object, which

00:01:47.720 --> 00:01:51.800
manages how work is inserted
into that message queue.

00:01:51.800 --> 00:01:54.047
Anyhow, getting back
to our camera example.

00:01:54.047 --> 00:01:55.630
Once you've created
the HandlerThread,

00:01:55.630 --> 00:01:58.360
you can delegate the camera
dot open command to it

00:01:58.360 --> 00:02:00.780
and know that the
onPreviewFrame callback will

00:02:00.780 --> 00:02:04.270
land on the HandlerThread
rather than the UI or AsyncTask

00:02:04.270 --> 00:02:04.780
threads.

00:02:04.780 --> 00:02:07.320
So if you're going to be doing
a long-running block of work

00:02:07.320 --> 00:02:10.180
on those pixels, this
is ideal for you.

00:02:10.180 --> 00:02:12.370
And to be clear, getting
the results of that work

00:02:12.370 --> 00:02:14.840
back to the UI thread is
pretty straightforward.

00:02:14.840 --> 00:02:18.440
Just pass it along with
the runOnUiThread command.

00:02:18.440 --> 00:02:21.460
So HandlerThreads are obviously
helpful for other Android APIs

00:02:21.460 --> 00:02:22.710
that follow a similar pattern.

00:02:22.710 --> 00:02:26.300
But they can also be useful
for longer running, non-UI work

00:02:26.300 --> 00:02:28.830
like compressing a
batch of user metrics

00:02:28.830 --> 00:02:30.550
before uploading
it to your server.

00:02:30.550 --> 00:02:34.500
If you've got other UI-specific
tasks happening on AsyncTask,

00:02:34.500 --> 00:02:36.950
then you might not want this
longer running operation

00:02:36.950 --> 00:02:38.190
to stall that work.

00:02:38.190 --> 00:02:41.010
So HandlerThreads are
a good place for it.

00:02:41.010 --> 00:02:44.010
Oh by the way, when you create
a HandlerThread, don't forget

00:02:44.010 --> 00:02:46.800
to set its thread priority based
on the type of work it's doing.

00:02:46.800 --> 00:02:49.970
I mean, remember, CPUs can
only handle a small number

00:02:49.970 --> 00:02:51.160
of threads in parallel.

00:02:51.160 --> 00:02:53.340
So setting the priority
helps the system

00:02:53.340 --> 00:02:55.760
know the right ways to
schedule this work when

00:02:55.760 --> 00:02:57.960
the other threads are
fighting for attention.

00:02:57.960 --> 00:03:01.187
And that's the whole thing when
it comes to performance coding.

00:03:01.187 --> 00:03:03.270
You have to understand
enough about the primitives

00:03:03.270 --> 00:03:06.280
to know how they help you
and how they might hurt you.

00:03:06.280 --> 00:03:09.280
And if it's not working, move
on to a better pattern, which

00:03:09.280 --> 00:03:11.140
is why you should check out the
rest of the Android Performance

00:03:11.140 --> 00:03:11.900
Patterns videos.

00:03:11.900 --> 00:03:14.930
And don't forget to ask the
hard threading questions

00:03:14.930 --> 00:03:16.870
on the Google+
community, as well.

00:03:16.870 --> 00:03:18.140
So keep calm.

00:03:18.140 --> 00:03:19.270
Profile your code.

00:03:19.270 --> 00:03:20.730
And always remember,
perf matters.

00:03:20.730 --> 00:03:25.280
[MUSIC PLAYING]

