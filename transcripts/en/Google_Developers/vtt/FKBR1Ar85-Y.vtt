WEBVTT
Kind: captions
Language: en

00:00:08.450 --> 00:00:09.190
ANDREW WALES: Hi everyone.

00:00:09.190 --> 00:00:12.090
Welcome to this week's edition
of Behind the Code.

00:00:12.090 --> 00:00:15.520
This week we're talking all
about the new Google Analytics

00:00:15.520 --> 00:00:17.450
v3 mobile SDKs.

00:00:17.450 --> 00:00:20.520
My name's Andrew Wales, I'm on
the Developer Relations team

00:00:20.520 --> 00:00:21.950
for Google Analytics.

00:00:21.950 --> 00:00:24.420
And with me in studio
is Jim Cotugno.

00:00:24.420 --> 00:00:27.750
He's a software engineer who
works on our mobile app SDKs.

00:00:27.750 --> 00:00:30.910
And he's been around since the
beginning, more or less.

00:00:30.910 --> 00:00:31.460
JIM COTUGNO: Well not quite the

00:00:31.460 --> 00:00:32.540
beginning, but pretty close.

00:00:32.540 --> 00:00:33.620
ANDREW WALES: Pretty
close, true.

00:00:33.620 --> 00:00:36.530
So he's a veteran who worked on
these SDKs for a long time.

00:00:36.530 --> 00:00:40.180
And he's been behind a lot of
the changes that are in v3.

00:00:40.180 --> 00:00:41.280
So we're lucky to
have him here.

00:00:41.280 --> 00:00:44.330
And we'll walk through what's
new, give you some pointers

00:00:44.330 --> 00:00:47.620
about migrating, and what
to look for as well.

00:00:47.620 --> 00:00:49.580
So if you go ahead and take a
look at the agenda for the

00:00:49.580 --> 00:00:53.460
show, I'll give you a quick
overview on what's new.

00:00:53.460 --> 00:00:56.050
Then we'll talk a little bit
about get, set, and send,

00:00:56.050 --> 00:00:58.110
which are really at
the core of the v3

00:00:58.110 --> 00:01:00.970
SDK, these three methods.

00:01:00.970 --> 00:01:03.280
We'll talk a little bit about
session management how that

00:01:03.280 --> 00:01:05.650
works in v3, what's
changed, and also

00:01:05.650 --> 00:01:08.260
what's staying the same.

00:01:08.260 --> 00:01:10.120
And then we'll take just a
quick look at Ecommerce,

00:01:10.120 --> 00:01:12.090
because the model's changed a
little bit so we want to give

00:01:12.090 --> 00:01:16.160
you just a quick heads up
about what's new in v3.

00:01:16.160 --> 00:01:19.020
Then also at the end we'll make
time for Q&amp;A. A lot of

00:01:19.020 --> 00:01:20.635
you posted some really
great questions to

00:01:20.635 --> 00:01:21.550
our Moderator page.

00:01:21.550 --> 00:01:24.620
So we'll try to get through as
many of those as we can.

00:01:24.620 --> 00:01:27.630
So let's jump right in.

00:01:27.630 --> 00:01:29.080
So what's new in v3?

00:01:29.080 --> 00:01:32.490
So there's really four main
things that are new here.

00:01:32.490 --> 00:01:35.310
The first and probably the most
noticeable thing is that

00:01:35.310 --> 00:01:37.760
the APIs are now more
aligned across all

00:01:37.760 --> 00:01:39.410
the different platforms.

00:01:39.410 --> 00:01:45.620
So you'll notice that Android
iOS and also Analytics.js, our

00:01:45.620 --> 00:01:49.340
library for JavaScript, they're
all very much similar

00:01:49.340 --> 00:01:53.000
in how you use or how you
get, set, and send data.

00:01:53.000 --> 00:01:56.330
And we'll go into that a little
bit further I think.

00:01:56.330 --> 00:01:58.050
The second point, second big
thing that's new, is that

00:01:58.050 --> 00:02:01.090
there's more flexibility in
setting and sending data.

00:02:01.090 --> 00:02:05.000
And we'll go through that as
well later on in the show.

00:02:05.000 --> 00:02:07.470
There's now forward
compatibility with new hit

00:02:07.470 --> 00:02:09.370
types and parameters.

00:02:09.370 --> 00:02:12.510
And we'll show you some examples
of how you can send

00:02:12.510 --> 00:02:14.910
any kind of parameter
in the [INAUDIBLE]

00:02:14.910 --> 00:02:18.170
SDKs to the GA endpoint.

00:02:18.170 --> 00:02:19.880
And then the fourth thing is
that there are some new

00:02:19.880 --> 00:02:21.640
debugging features.

00:02:21.640 --> 00:02:24.600
Notably, we've added a dryRun
flag so that you can enable

00:02:24.600 --> 00:02:27.170
this during testing so that you
don't send test data into

00:02:27.170 --> 00:02:29.320
your production reports.

00:02:29.320 --> 00:02:31.640
And then we've also replace
the debug flag with this

00:02:31.640 --> 00:02:33.110
Logger class, which
is actually a

00:02:33.110 --> 00:02:34.840
little bit more flexible.

00:02:34.840 --> 00:02:36.730
If you want to learn more about
the debugging features

00:02:36.730 --> 00:02:40.020
on this, go ahead and check out
the migration guide on the

00:02:40.020 --> 00:02:43.410
developer site, which is
developers.google.com/analytics.

00:02:43.410 --> 00:02:45.580
We're not going to cover them
in today's presentation but

00:02:45.580 --> 00:02:47.580
there's a lot of documentation
there, so go check it out.

00:02:50.300 --> 00:02:53.050
So let's take a closer look
at the first point.

00:02:53.050 --> 00:02:55.930
API is now aligned across web
and mobile, across all these

00:02:55.930 --> 00:02:58.400
different platforms.

00:02:58.400 --> 00:03:01.450
Jim, can you give us kind of
an overview of what the

00:03:01.450 --> 00:03:04.090
impetus was for going back and
refactoring to make things

00:03:04.090 --> 00:03:06.020
more aligned across these
different platforms?

00:03:06.020 --> 00:03:08.860
JIM COTUGNO: What we wanted to
do with this was to kind of

00:03:08.860 --> 00:03:13.680
unify the way you do your
tracking calls across GA,

00:03:13.680 --> 00:03:18.270
whether you use Android or iOS
platforms for mobile apps, or

00:03:18.270 --> 00:03:19.370
whether you do websites.

00:03:19.370 --> 00:03:22.520
So we didn't want you to have
to learn a new way of doing

00:03:22.520 --> 00:03:26.150
things with each platform.

00:03:26.150 --> 00:03:30.430
So we kind of follow the
Analytics.js route with

00:03:30.430 --> 00:03:32.660
basically three methods for
your tracking needs--

00:03:32.660 --> 00:03:33.720
get set, and send.

00:03:33.720 --> 00:03:36.320
That's what you see here.

00:03:36.320 --> 00:03:36.431
ANDREW WALES: Cool.

00:03:36.431 --> 00:03:38.930
And I think we'll see a bunch
of examples of this later as

00:03:38.930 --> 00:03:43.700
we walk through some of
the later slides.

00:03:43.700 --> 00:03:45.840
And also, really quickly, I
wanted to touch on the forward

00:03:45.840 --> 00:03:48.310
compatibility with
new hit types.

00:03:48.310 --> 00:03:51.150
So how does the v3 SDK actually
enable this kind of

00:03:51.150 --> 00:03:53.070
forward compatibility?

00:03:53.070 --> 00:03:55.820
JIM COTUGNO: So the way it
enables it is it basically

00:03:55.820 --> 00:03:59.510
lets you pass in any parameter
name and any parameter value

00:03:59.510 --> 00:04:03.150
through the set or
send methods.

00:04:03.150 --> 00:04:07.070
And so previously in the
v2 SDK, we had kind of

00:04:07.070 --> 00:04:12.870
pre-defined all the parameters
that were enabled for the SDK

00:04:12.870 --> 00:04:15.650
to report analytics
data through

00:04:15.650 --> 00:04:17.230
the measurement protocol.

00:04:17.230 --> 00:04:20.920
So we stripped all that out so
that you could set anything

00:04:20.920 --> 00:04:23.750
you want, any time you want.

00:04:23.750 --> 00:04:26.970
And this will enable you to add
new parameters, new hit

00:04:26.970 --> 00:04:29.490
types, as they become
available in

00:04:29.490 --> 00:04:30.900
Analytics in general.

00:04:30.900 --> 00:04:31.760
ANDREW WALES: Cool.

00:04:31.760 --> 00:04:34.620
So would this also let you,
for example, could you now

00:04:34.620 --> 00:04:39.210
send web page views
from the app SDK?

00:04:39.210 --> 00:04:40.220
JIM COTUGNO: You could,
you could.

00:04:40.220 --> 00:04:40.600
ANDREW WALES: Because
you have the

00:04:40.600 --> 00:04:41.940
flexibility to do that now.

00:04:41.940 --> 00:04:43.350
JIM COTUGNO: Yes, absolutely.

00:04:43.350 --> 00:04:44.760
ANDREW WALES: So that's cool.

00:04:44.760 --> 00:04:46.010
OK.

00:04:47.970 --> 00:04:48.050
Great.

00:04:48.050 --> 00:04:50.030
And actually, here's
just some--

00:04:50.030 --> 00:04:51.400
here's an iOS code
snippet as well.

00:04:51.400 --> 00:04:53.560
You can just see that--

00:04:53.560 --> 00:04:56.860
we'll talk a little bit more
about the dictionary builder

00:04:56.860 --> 00:04:59.380
and the Map Builder classes
later in the show-- but just

00:04:59.380 --> 00:05:04.833
so you can see a quick example
of how you might set or how

00:05:04.833 --> 00:05:11.400
you might send an arbitrary
parameter in v3, and also how

00:05:11.400 --> 00:05:14.420
that shows up in the hit that's
generated from it.

00:05:14.420 --> 00:05:14.570
Cool.

00:05:14.570 --> 00:05:17.870
So now that we've gone through
an overview of what's new,

00:05:17.870 --> 00:05:21.120
let's kind of get more
into the meat of v3.

00:05:21.120 --> 00:05:24.330
A lot of that is going to be
around using these get, set,

00:05:24.330 --> 00:05:27.890
and send methods and
understanding how those work.

00:05:27.890 --> 00:05:31.130
So let's start with just
a quick overview.

00:05:31.130 --> 00:05:33.630
Jim, can you give us kind of an
understanding of what the

00:05:33.630 --> 00:05:34.730
changes from v2?

00:05:34.730 --> 00:05:37.570
Because I know in v2 we
had a lot [INAUDIBLE].

00:05:37.570 --> 00:05:38.150
JIM COTUGNO: Right, right.

00:05:38.150 --> 00:05:44.380
So v2, we originally started
with method calls that started

00:05:44.380 --> 00:05:46.510
with track actually,
not just send.

00:05:46.510 --> 00:05:50.620
So you had a track view, track
event, track exception.

00:05:50.620 --> 00:05:54.260
And then we changed those to
send to be more in line with

00:05:54.260 --> 00:05:56.540
what we were doing.

00:05:56.540 --> 00:06:02.210
But for v3, as I said before,
to try and align with the

00:06:02.210 --> 00:06:03.170
other platforms--

00:06:03.170 --> 00:06:04.760
the other client platforms--

00:06:04.760 --> 00:06:07.180
we got rid of all those special
purpose send methods

00:06:07.180 --> 00:06:09.330
and replaced them with send.

00:06:09.330 --> 00:06:11.250
So instead of sendView
we have send.

00:06:11.250 --> 00:06:14.440
And you would pass in the map of
parameters or dictionary in

00:06:14.440 --> 00:06:18.610
the iOS case that represented
your app you had.

00:06:18.610 --> 00:06:20.850
And then same with the
event transaction,

00:06:20.850 --> 00:06:23.210
exception, et cetera.

00:06:23.210 --> 00:06:24.020
And then set.

00:06:24.020 --> 00:06:27.580
We had very specific set
methods for things like

00:06:27.580 --> 00:06:31.220
setting campaign, custom
dimensions, custom metrics.

00:06:31.220 --> 00:06:34.750
And those all are replaced by
general set method, which will

00:06:34.750 --> 00:06:36.820
take the field name
and the value.

00:06:36.820 --> 00:06:39.480
And then, forget--

00:06:39.480 --> 00:06:42.410
this is a little bit new to
the SDKs in that you could

00:06:42.410 --> 00:06:46.640
actually query the values of
the tracker objects that

00:06:46.640 --> 00:06:53.440
you've previously set or will be
set for us on your behalf.

00:06:53.440 --> 00:06:56.320
ANDREW WALES: So pretty much
any field can be set or

00:06:56.320 --> 00:06:57.714
retrieved from the
tracker, right?

00:06:57.714 --> 00:06:58.198
JIM COTUGNO: That's correct.

00:06:58.198 --> 00:06:58.682
Yes.

00:06:58.682 --> 00:06:59.650
ANDREW WALES: OK.

00:06:59.650 --> 00:07:01.520
So let's talk, I guess, we'll
start with send, because

00:07:01.520 --> 00:07:03.470
that's probably the command
most are going to be using

00:07:03.470 --> 00:07:04.720
most often.

00:07:07.220 --> 00:07:08.740
How does it work, basically?

00:07:08.740 --> 00:07:11.140
JIM COTUGNO: So, send is
very straightforward.

00:07:11.140 --> 00:07:15.880
It takes a map for the Android
SDK-- in the iOS SDK it would

00:07:15.880 --> 00:07:17.180
be a dictionary--

00:07:17.180 --> 00:07:17.940
of parameters.

00:07:17.940 --> 00:07:22.070
Parameters have a name and
a value, and they're both

00:07:22.070 --> 00:07:23.010
treated as strings.

00:07:23.010 --> 00:07:27.230
So we no longer deal with
various object types, like

00:07:27.230 --> 00:07:29.140
integers, or floats, or logs.

00:07:29.140 --> 00:07:33.950
Everything is a string for the
send parameter-- or the send

00:07:33.950 --> 00:07:35.200
method, sorry.

00:07:39.040 --> 00:07:43.730
So when you call send, what
happens is the value stored in

00:07:43.730 --> 00:07:45.440
the tracker are merged
with the values

00:07:45.440 --> 00:07:48.110
provided in that map.

00:07:48.110 --> 00:07:50.710
The values in the map will take
precedence over what has

00:07:50.710 --> 00:07:52.720
previously set in the tracker.

00:07:52.720 --> 00:07:56.490
And then the hit will be
queued for dispatch.

00:07:56.490 --> 00:07:58.320
And then you don't have
to worry about it

00:07:58.320 --> 00:08:00.740
at that point anymore.

00:08:00.740 --> 00:08:03.715
ANDREW WALES: One of the cool
things in v3 that I definitely

00:08:03.715 --> 00:08:06.860
wanted to highlight for people
was that it's actually pretty

00:08:06.860 --> 00:08:10.750
easy to build these maps of
parameter value pairs, right?

00:08:10.750 --> 00:08:13.020
We have these Map Builder
convenience classes.

00:08:13.020 --> 00:08:14.250
Could you talk a little
bit about that?

00:08:14.250 --> 00:08:14.550
JIM COTUGNO: Yes.

00:08:14.550 --> 00:08:17.610
So because we took away the
convenience method calls on

00:08:17.610 --> 00:08:22.880
the tracker send event, send
exception, we felt it would be

00:08:22.880 --> 00:08:25.730
very useful to provide some
way to conveniently build

00:08:25.730 --> 00:08:28.100
various hit types so that you
didn't have to remember which

00:08:28.100 --> 00:08:31.660
parameters needed to be filled
in for each type of hit.

00:08:31.660 --> 00:08:36.330
And so the Map Builder class was
created for that purpose.

00:08:36.330 --> 00:08:39.340
So the Map Builder has create
methods for each of

00:08:39.340 --> 00:08:40.730
the common hit types.

00:08:40.730 --> 00:08:42.809
And that create method basically
takes all the

00:08:42.809 --> 00:08:46.780
parameters that you would
normally set up for that hit.

00:08:46.780 --> 00:08:49.160
So for event, for example,
you have category,

00:08:49.160 --> 00:08:51.045
action, label, and value.

00:08:53.930 --> 00:08:56.450
ANDREW WALES: So as an example,
we have, if we were

00:08:56.450 --> 00:08:59.450
sending an event that somebody
touches a button to play a

00:08:59.450 --> 00:09:02.200
video, for example, this might
be an example of that.

00:09:02.200 --> 00:09:02.470
JIM COTUGNO: Right.

00:09:02.470 --> 00:09:04.280
So here's a perfect example
of an event.

00:09:04.280 --> 00:09:07.210
There's a couple things to point
out in this example.

00:09:07.210 --> 00:09:09.940
One, first off, the Map Builder
actually follows the

00:09:09.940 --> 00:09:10.830
Builder pattern.

00:09:10.830 --> 00:09:13.600
So those of you familiar with
that pattern will probably

00:09:13.600 --> 00:09:14.880
recognize this.

00:09:14.880 --> 00:09:19.100
So you create the Map Builder
class using one

00:09:19.100 --> 00:09:20.030
of the create methods.

00:09:20.030 --> 00:09:24.250
And then you can optionally
set a new additional

00:09:24.250 --> 00:09:24.730
parameters.

00:09:24.730 --> 00:09:28.186
So here, for example, we're
going to set custom dimension

00:09:28.186 --> 00:09:31.400
to a value of watch the video.

00:09:31.400 --> 00:09:34.820
And then when you're finally
done with it you can get your

00:09:34.820 --> 00:09:37.820
map by calling build.

00:09:37.820 --> 00:09:40.430
And then you're all set and
just pass that to send and

00:09:40.430 --> 00:09:41.100
you're done.

00:09:41.100 --> 00:09:41.540
ANDREW WALES: Cool.

00:09:41.540 --> 00:09:42.440
So you can set--

00:09:42.440 --> 00:09:44.580
I mean, it's not just this
example's custom dimensions--

00:09:44.580 --> 00:09:47.210
but you could set anything else
you need to before you're

00:09:47.210 --> 00:09:48.280
ready to build.

00:09:48.280 --> 00:09:48.730
JIM COTUGNO: That's correct.

00:09:48.730 --> 00:09:49.740
ANDREW WALES: And send
it all in one go.

00:09:49.740 --> 00:09:50.320
JIM COTUGNO: That's correct.

00:09:50.320 --> 00:09:50.690
Yes.

00:09:50.690 --> 00:09:52.960
ANDREW WALES: Cool.

00:09:52.960 --> 00:09:55.330
Oh and then here's a--

00:09:55.330 --> 00:09:57.080
so it's the same
for iOS, right?

00:09:57.080 --> 00:09:57.340
JIM COTUGNO: Yes.

00:09:57.340 --> 00:09:59.340
ANDREW WALES: You're building
dictionaries in the class's

00:09:59.340 --> 00:10:01.080
GAI dictionary builder.

00:10:01.080 --> 00:10:01.340
JIM COTUGNO: Yeah.

00:10:01.340 --> 00:10:03.870
So we used to build
a pattern here.

00:10:03.870 --> 00:10:06.530
With iOS you don't have maps but
you have dictionaries are

00:10:06.530 --> 00:10:09.300
very much the same,
or very similar.

00:10:09.300 --> 00:10:10.830
So, yes, same thing.

00:10:10.830 --> 00:10:13.790
ANDREW WALES: Cool.

00:10:13.790 --> 00:10:17.430
Let's talk about
the set method.

00:10:17.430 --> 00:10:18.150
How does that work?

00:10:18.150 --> 00:10:21.330
JIM COTUGNO: So when you set,
the step method will make a

00:10:21.330 --> 00:10:23.560
permanent adjustment to
your tracker model.

00:10:23.560 --> 00:10:27.810
So the tracker keeps track of
all the parameters and their

00:10:27.810 --> 00:10:30.105
values that you've set.

00:10:33.620 --> 00:10:39.250
It's persistent and it'll stay
in the tracker until you get

00:10:39.250 --> 00:10:40.390
rid of it, really.

00:10:40.390 --> 00:10:44.430
So that way, if you have certain
fields that you don't

00:10:44.430 --> 00:10:49.380
want to set, that you want to
be set on every hit, but you

00:10:49.380 --> 00:10:52.890
don't want to set in the Map
Builder every time, you can

00:10:52.890 --> 00:10:54.510
simply just call set.

00:10:54.510 --> 00:10:59.080
Examples, the value is going
to be persistent.

00:10:59.080 --> 00:11:02.610
Tracker, it will show up on hit
unless the map you pass

00:11:02.610 --> 00:11:05.120
into your send call overrides
the value.

00:11:05.120 --> 00:11:05.550
ANDREW WALES: Right.

00:11:05.550 --> 00:11:06.870
Because it'll take
precedence over

00:11:06.870 --> 00:11:07.400
what's set in the tracker.

00:11:07.400 --> 00:11:09.090
JIM COTUGNO: And if you don't
want to set that value

00:11:09.090 --> 00:11:12.270
anymore, what you can
do is pass null--

00:11:12.270 --> 00:11:16.120
or nil in the iOS case-- as the
value in that field will

00:11:16.120 --> 00:11:17.530
get cleared out, effectively.

00:11:17.530 --> 00:11:19.090
ANDREW WALES: OK, cool.

00:11:19.090 --> 00:11:22.000
I think it's an important thing
to point out that when

00:11:22.000 --> 00:11:24.060
you set something on the tracker
it's going to-- that

00:11:24.060 --> 00:11:27.680
value is going to persist sort
of indefinitely until you

00:11:27.680 --> 00:11:30.250
destroy that tracker or until
you override that value.

00:11:30.250 --> 00:11:30.720
JIM COTUGNO: That's right.

00:11:30.720 --> 00:11:31.520
That's right.

00:11:31.520 --> 00:11:32.850
ANDREW WALES: So I think, I
know we were talking about

00:11:32.850 --> 00:11:33.520
before this.

00:11:33.520 --> 00:11:36.910
There are definitely some good
places where you'd want to set

00:11:36.910 --> 00:11:39.550
certain values directly on the
tracker that are going to be

00:11:39.550 --> 00:11:41.390
applied to a lot of hits.

00:11:41.390 --> 00:11:45.980
So one of the examples that I
know we talked about was, for

00:11:45.980 --> 00:11:48.990
example, here.

00:11:48.990 --> 00:11:53.670
Whenever a viewer screen gets
loaded, it's convenient to set

00:11:53.670 --> 00:11:56.730
the screen name first, and then
you can send all your

00:11:56.730 --> 00:11:57.810
hits after that.

00:11:57.810 --> 00:12:02.490
So in this example, we set the
screen name field to home

00:12:02.490 --> 00:12:04.890
screen when the view loads.

00:12:04.890 --> 00:12:07.440
And then we're going to send in
app view and we're going to

00:12:07.440 --> 00:12:08.670
send an event.

00:12:08.670 --> 00:12:11.070
And both of those hits are going
to contain that screen.

00:12:11.070 --> 00:12:12.530
And I only had to set it once.

00:12:12.530 --> 00:12:13.210
JIM COTUGNO: That's right.

00:12:13.210 --> 00:12:15.470
And this is very important.

00:12:15.470 --> 00:12:18.410
Just like in the web case, if
you want your events to be

00:12:18.410 --> 00:12:21.700
tied to a particular screen,
this is how you have to do it.

00:12:21.700 --> 00:12:24.000
Otherwise your events will not
be attributed to that screen.

00:12:24.000 --> 00:12:27.580
ANDREW WALES: To a particular
screen, right?

00:12:27.580 --> 00:12:30.970
Or I know some other good
examples we're setting

00:12:30.970 --> 00:12:35.290
settings like anonymize IP, or
setting a sample rate, because

00:12:35.290 --> 00:12:37.160
those are tracker level
settings, right?

00:12:37.160 --> 00:12:37.530
JIM COTUGNO: Right.

00:12:37.530 --> 00:12:40.170
So when you set those you
probably want them to stay set

00:12:40.170 --> 00:12:42.020
for the duration of
your tracker.

00:12:42.020 --> 00:12:42.540
ANDREW WALES: Right.

00:12:42.540 --> 00:12:44.590
JIM COTUGNO: And so that those
are good candidates for a set

00:12:44.590 --> 00:12:47.640
call, a call in the tracker.

00:12:47.640 --> 00:12:50.910
ANDREW WALES: And then there
are some bad places to use

00:12:50.910 --> 00:12:51.690
this, right?

00:12:51.690 --> 00:12:52.980
Places--

00:12:52.980 --> 00:12:56.000
basically when you use this to
set fields that you really are

00:12:56.000 --> 00:12:59.130
only going to send once, I think
that's probably when

00:12:59.130 --> 00:13:00.510
most people will run
into trouble.

00:13:00.510 --> 00:13:01.770
JIM COTUGNO: Yeah,
that's correct.

00:13:01.770 --> 00:13:04.690
ANDREW WALES: So I know the
example we talked about was an

00:13:04.690 --> 00:13:05.700
event action.

00:13:05.700 --> 00:13:11.590
So if you have some kind of
handler and you happen to set

00:13:11.590 --> 00:13:15.990
an action, or any these event
fields, those are really only

00:13:15.990 --> 00:13:17.690
going to be applied--
those should only be

00:13:17.690 --> 00:13:19.530
applied to that one event.

00:13:19.530 --> 00:13:22.950
But if you set them right and
then send other events, if you

00:13:22.950 --> 00:13:25.970
don't provide values--

00:13:25.970 --> 00:13:27.710
well, basically you're going to
end up setting those event

00:13:27.710 --> 00:13:30.230
fields with every hit, which is
probably not what you want.

00:13:30.230 --> 00:13:30.600
JIM COTUGNO: Right.

00:13:30.600 --> 00:13:31.280
Yeah.

00:13:31.280 --> 00:13:35.200
So this is a bad example of what
you would use the tracker

00:13:35.200 --> 00:13:36.000
set method for.

00:13:36.000 --> 00:13:36.910
ANDREW WALES: Right.

00:13:36.910 --> 00:13:40.325
And then another mistake I know
I made once, you pointed

00:13:40.325 --> 00:13:41.700
it out earlier, was--

00:13:41.700 --> 00:13:44.640
and we'll talk about the session
control field a little

00:13:44.640 --> 00:13:45.670
bit later--

00:13:45.670 --> 00:13:46.470
but that would be one.

00:13:46.470 --> 00:13:49.940
You have this ability to start
or stop a session by setting

00:13:49.940 --> 00:13:50.580
this field.

00:13:50.580 --> 00:13:53.270
And if you set that field
directly on the tracker,

00:13:53.270 --> 00:13:55.120
you're going to be starting a
new session with every hit.

00:13:55.120 --> 00:13:56.230
JIM COTUGNO: Yeah, which
you do not want.

00:13:56.230 --> 00:13:57.040
ANDREW WALES: A disaster.

00:13:57.040 --> 00:13:58.930
And I made that mistake
so please

00:13:58.930 --> 00:14:02.195
don't make that mistake.

00:14:02.195 --> 00:14:02.640
Cool.

00:14:02.640 --> 00:14:04.990
OK, so the last thing we talked
about, send, set, and

00:14:04.990 --> 00:14:07.420
then the last one's get.

00:14:07.420 --> 00:14:10.490
JIM COTUGNO: So the tracker is
a model and you could use it

00:14:10.490 --> 00:14:13.710
to retain values of the various
parameters that you

00:14:13.710 --> 00:14:15.480
want to send to Google
Analytics.

00:14:15.480 --> 00:14:19.150
So the get method lets you query
those values that you've

00:14:19.150 --> 00:14:20.890
set previously.

00:14:20.890 --> 00:14:23.470
So I guess the other point
to bring up here

00:14:23.470 --> 00:14:25.430
is that if you haven't--

00:14:25.430 --> 00:14:29.910
the tracker has this concept of
what we call default values

00:14:29.910 --> 00:14:30.670
for certain fields.

00:14:30.670 --> 00:14:34.010
So there's some fields that you
really want to always set

00:14:34.010 --> 00:14:36.480
in the application world, things
like the application

00:14:36.480 --> 00:14:39.780
name, application version,
the client ID is

00:14:39.780 --> 00:14:41.750
another good example.

00:14:41.750 --> 00:14:45.860
So we'll fill those in for you
if you don't set them using

00:14:45.860 --> 00:14:48.510
the set method, or pass
them through the

00:14:48.510 --> 00:14:50.930
map in the send call.

00:14:50.930 --> 00:14:55.760
And so if you call get on those
particular fields we'll

00:14:55.760 --> 00:14:58.260
give you the value we
will provide if you

00:14:58.260 --> 00:15:00.530
haven't set the values.

00:15:00.530 --> 00:15:01.130
ANDREW WALES: Right.

00:15:01.130 --> 00:15:02.640
JIM COTUGNO: So, for example,
if you want to--

00:15:02.640 --> 00:15:04.840
if you're curious to know what
application name we're going

00:15:04.840 --> 00:15:08.560
to send with each hit, call get
on the application name

00:15:08.560 --> 00:15:10.720
field and you'll see it.

00:15:10.720 --> 00:15:11.890
ANDREW WALES: So what about
a field that doesn't

00:15:11.890 --> 00:15:14.700
automatically get set, like
if you called get on like

00:15:14.700 --> 00:15:15.980
campaign source?

00:15:15.980 --> 00:15:17.090
Is it an empty string?

00:15:17.090 --> 00:15:17.460
JIM COTUGNO: Yeah.

00:15:17.460 --> 00:15:18.970
It'll be, I believe, null.

00:15:18.970 --> 00:15:21.160
ANDREW WALES: Null, OK.

00:15:21.160 --> 00:15:22.440
JIM COTUGNO: Or nil
in the iOS case.

00:15:22.440 --> 00:15:23.500
Correct.

00:15:23.500 --> 00:15:26.240
ANDREW WALES: And we should
definitely get a list of those

00:15:26.240 --> 00:15:27.810
default values.

00:15:27.810 --> 00:15:29.310
We'll make sure to get that
onto dev [INAUDIBLE].

00:15:29.310 --> 00:15:31.750
I think right now it's not
there, but we'd like to see

00:15:31.750 --> 00:15:34.380
that get posted.

00:15:34.380 --> 00:15:36.780
JIM COTUGNO: The final note here
is a client I know set

00:15:36.780 --> 00:15:41.410
several folks using the SDK have
asked for us to expose

00:15:41.410 --> 00:15:43.170
the client ID that we send.

00:15:43.170 --> 00:15:45.550
And we've done that
with the v3 SDK.

00:15:45.550 --> 00:15:48.970
There's one very important
caveat here, is all these

00:15:48.970 --> 00:15:52.730
calls are non-blocking calls,
except for when you call get

00:15:52.730 --> 00:15:55.280
to get the client ID,
you may block.

00:15:55.280 --> 00:16:00.300
So especially early in the life
cycle of the application,

00:16:00.300 --> 00:16:03.390
you won't want to make this call
in your initialization

00:16:03.390 --> 00:16:05.210
code on the main UI thread.

00:16:05.210 --> 00:16:06.070
ANDREW WALES: Is that going
to block because

00:16:06.070 --> 00:16:07.560
it's reading from--

00:16:07.560 --> 00:16:09.410
JIM COTUGNO: Yes, because it's
reading-- the client ID is

00:16:09.410 --> 00:16:12.780
persisted on the persistence
store on the device.

00:16:12.780 --> 00:16:14.704
And that takes a little
time to read up.

00:16:18.500 --> 00:16:21.590
ANDREW WALES: And then lastly,
so, I think throughout as you

00:16:21.590 --> 00:16:23.660
call these different methods,
you're going to be providing

00:16:23.660 --> 00:16:25.525
fields pretty much
with every call.

00:16:25.525 --> 00:16:30.220
So I thought it deserved maybe
just aside to talk about what

00:16:30.220 --> 00:16:32.320
these-- like how you access
these fields?

00:16:34.970 --> 00:16:35.500
JIM COTUGNO: So yeah.

00:16:35.500 --> 00:16:36.400
ANDREW WALES: Go ahead.

00:16:36.400 --> 00:16:36.800
JIM COTUGNO: OK.

00:16:36.800 --> 00:16:42.200
So we provided some classes that
defined constants for all

00:16:42.200 --> 00:16:44.710
the fields that you would
commonly use in the

00:16:44.710 --> 00:16:48.540
application tracking world.

00:16:48.540 --> 00:16:50.830
And they're in the fields,
that Java class.

00:16:50.830 --> 00:16:53.990
There are some examples
there on the slide.

00:16:53.990 --> 00:16:59.130
In the iOS, it's the GAI
fields header file.

00:16:59.130 --> 00:17:02.010
We've also provided convenience
methods for

00:17:02.010 --> 00:17:04.829
creating parameter field
names for custom

00:17:04.829 --> 00:17:05.869
dimensions and metrics.

00:17:05.869 --> 00:17:09.670
As you know, those are
repeated fields.

00:17:09.670 --> 00:17:10.599
They're like indexed.

00:17:10.599 --> 00:17:13.660
So you have custom dimension
one, custom dimension two, et

00:17:13.660 --> 00:17:14.814
cetera, et cetera.

00:17:14.814 --> 00:17:16.869
And so we have some convenience
methods that will

00:17:16.869 --> 00:17:19.460
build the parameter name for
you so you don't have to

00:17:19.460 --> 00:17:22.210
figure it out for yourself.

00:17:22.210 --> 00:17:23.490
ANDREW WALES: And then the last
one is sort of what we

00:17:23.490 --> 00:17:26.829
talked about earlier where you
can use this like ampersand

00:17:26.829 --> 00:17:31.000
syntax to get, set, or send
any parameters, right?

00:17:31.000 --> 00:17:31.440
JIM COTUGNO: Yeah.

00:17:31.440 --> 00:17:35.780
So the tracker understands
ampersand syntax.

00:17:35.780 --> 00:17:39.360
And so, basically, if you look
at your measurement protocol,

00:17:39.360 --> 00:17:47.430
all the parameters there can
be set using the ampersand.

00:17:47.430 --> 00:17:49.820
Ampersand t, for example,
would be the hit type.

00:17:49.820 --> 00:17:50.690
ANDREW WALES: For a
hit type, right.

00:17:50.690 --> 00:17:52.720
So this would be an example
for a new hit type that we

00:17:52.720 --> 00:17:53.820
release in the future.

00:17:53.820 --> 00:17:55.910
But you could send, as you
said, any measurement

00:17:55.910 --> 00:18:00.900
protocol, parameter, this way.

00:18:00.900 --> 00:18:05.060
Let's talk about what's new in
session management in v3, and

00:18:05.060 --> 00:18:05.930
also what's the same.

00:18:05.930 --> 00:18:07.840
Because some things I know have
changed, and some things

00:18:07.840 --> 00:18:09.050
are the same.

00:18:09.050 --> 00:18:12.585
So, Jim, why don't you walk us
through everything we need to

00:18:12.585 --> 00:18:15.380
know, really, about session
management in v3?

00:18:15.380 --> 00:18:16.915
JIM COTUGNO: I don't know if
it's going to be everything,

00:18:16.915 --> 00:18:18.430
but hopefully we'll
clear the air a

00:18:18.430 --> 00:18:19.590
little bit about sessions.

00:18:19.590 --> 00:18:20.490
ANDREW WALES: Sure.

00:18:20.490 --> 00:18:20.970
JIM COTUGNO: OK.

00:18:20.970 --> 00:18:25.510
So, in Universal Analytics
there was a change.

00:18:25.510 --> 00:18:29.770
This is like outside the realm
of the app SDKs, but session

00:18:29.770 --> 00:18:33.350
management moved from the
clients to the back end.

00:18:33.350 --> 00:18:36.230
So the back end for Universal
Analytics, which includes the

00:18:36.230 --> 00:18:39.730
v2 SDK and the v3 SDK, the
session management's handled

00:18:39.730 --> 00:18:40.300
by the back end.

00:18:40.300 --> 00:18:44.210
And the way it does that is it
looks for a gap in time from

00:18:44.210 --> 00:18:45.855
one hit to the next.

00:18:45.855 --> 00:18:48.600
And when that gap is large
enough, it will declare the

00:18:48.600 --> 00:18:51.730
end of session and start
a new session.

00:18:51.730 --> 00:18:55.240
So the default value is
30 minutes initially.

00:18:55.240 --> 00:18:57.640
And that default value is now
configurable through the

00:18:57.640 --> 00:19:01.590
management UI on the Google
Analytics website.

00:19:01.590 --> 00:19:06.030
And if you look at the slide,
you'll see a screenshot of

00:19:06.030 --> 00:19:08.660
what the page looks
like that lets you

00:19:08.660 --> 00:19:10.010
control the session timeout.

00:19:10.010 --> 00:19:11.640
Session timeout's kind
of on the upper right

00:19:11.640 --> 00:19:13.370
of the picture there.

00:19:13.370 --> 00:19:13.990
ANDREW WALES: And then campaign

00:19:13.990 --> 00:19:14.990
timeout is there as well.

00:19:14.990 --> 00:19:15.250
JIM COTUGNO: Yeah.

00:19:15.250 --> 00:19:16.500
Campaign timeout is
there as well.

00:19:16.500 --> 00:19:19.000
That's correct.

00:19:19.000 --> 00:19:25.470
So in the v2 SDK, in order to
get around that 30 minute

00:19:25.470 --> 00:19:28.740
window which was the only window
that the back end would

00:19:28.740 --> 00:19:33.540
support initially, we decided to
add support in the SDKs for

00:19:33.540 --> 00:19:35.220
controlling sessions.

00:19:35.220 --> 00:19:42.250
And we did that through
basically a property or a flag

00:19:42.250 --> 00:19:43.110
of session control.

00:19:43.110 --> 00:19:47.940
Behind the scenes, what that
flag did was send a parameter

00:19:47.940 --> 00:19:53.620
called session control--or
ampersand SC is the name--

00:19:53.620 --> 00:19:56.180
and it would send a start
when it felt a new

00:19:56.180 --> 00:19:58.350
session should begin.

00:19:58.350 --> 00:20:00.240
And what it did is it--

00:20:00.240 --> 00:20:03.310
the way we did in v2 is we just
decided that if the app

00:20:03.310 --> 00:20:06.930
was sitting in the background
for a certain length of time,

00:20:06.930 --> 00:20:11.490
I think the default was 30
seconds, we would set that

00:20:11.490 --> 00:20:14.490
parameter up and say, hey,
we need a new session.

00:20:14.490 --> 00:20:18.070
We implemented that in
EasyTracker on Android and in

00:20:18.070 --> 00:20:22.960
the GAI tracker class that was
returned to you when you ask

00:20:22.960 --> 00:20:26.190
for one on iOS.

00:20:26.190 --> 00:20:28.280
The other thing to note here is
that when the trackers were

00:20:28.280 --> 00:20:33.620
first created in both iOS and
Android, we would also set

00:20:33.620 --> 00:20:36.480
that session control parameter
to start and send it

00:20:36.480 --> 00:20:37.640
with the first hit.

00:20:37.640 --> 00:20:41.120
So that's how it worked in v2
and this was all to give you a

00:20:41.120 --> 00:20:44.890
finer control than that 30
minute window, which is what

00:20:44.890 --> 00:20:47.290
initially was the only
way you could break

00:20:47.290 --> 00:20:49.290
sessions in the back end.

00:20:49.290 --> 00:20:52.340
So given now that you
can parameterize--

00:20:52.340 --> 00:20:58.220
you can control that window to
a great degree with the UI,

00:20:58.220 --> 00:21:01.060
management UI, in the
application, the Analytics

00:21:01.060 --> 00:21:02.760
application--

00:21:02.760 --> 00:21:05.510
we decided to kind of step
back from it in v3 and

00:21:05.510 --> 00:21:06.720
clean things up.

00:21:06.720 --> 00:21:09.650
If you want to flip over
to the next slide.

00:21:09.650 --> 00:21:13.990
So in Android, in V3 for
Android, the tracker class is

00:21:13.990 --> 00:21:16.460
no longer going to set the
session control parameter to

00:21:16.460 --> 00:21:18.365
start, ever, for you.

00:21:18.365 --> 00:21:21.540
You could do it yourself, it's
just another parameter.

00:21:21.540 --> 00:21:22.390
You can--

00:21:22.390 --> 00:21:23.590
again, don't use the
set command.

00:21:23.590 --> 00:21:25.190
But you can set it
through the send

00:21:25.190 --> 00:21:28.000
command in the Map Builder.

00:21:28.000 --> 00:21:29.370
EasyTracker--

00:21:29.370 --> 00:21:30.320
kind of a side point-- but the

00:21:30.320 --> 00:21:32.600
EasyTracker now extends tracker.

00:21:32.600 --> 00:21:35.016
So you can treat EasyTracker
just like you tracker you call

00:21:35.016 --> 00:21:36.440
in get, set, and send.

00:21:36.440 --> 00:21:38.990
And the EasyTracker for Android
will continue to

00:21:38.990 --> 00:21:41.830
manage sessions as
it did in v2.

00:21:41.830 --> 00:21:46.670
So there's still a parameter
that you can control that will

00:21:46.670 --> 00:21:50.480
determine how long the app sits
in the background before

00:21:50.480 --> 00:21:53.150
a session control flag start.

00:21:53.150 --> 00:21:53.530
Go ahead.

00:21:53.530 --> 00:21:55.240
ANDREW WALES: Yeah, I was going
to say so for people who

00:21:55.240 --> 00:21:59.540
are using EasyTracker on Android
and v2 right now, to

00:21:59.540 --> 00:22:02.730
handle session management, for
them there's probably no

00:22:02.730 --> 00:22:04.180
noticeable change
in v3, right?

00:22:04.180 --> 00:22:05.800
JIM COTUGNO: So the one
noticeable change is when they

00:22:05.800 --> 00:22:06.850
first start--

00:22:06.850 --> 00:22:07.670
no, I guess you're right.

00:22:07.670 --> 00:22:11.200
So when the EasyTracker first
starts it will assume a new

00:22:11.200 --> 00:22:15.700
session because whatever time
period you put in there will

00:22:15.700 --> 00:22:16.670
have expired basically.

00:22:16.670 --> 00:22:18.460
ANDREW WALES: I see.

00:22:18.460 --> 00:22:22.440
But for those people who are not
using EasyTracker in v3,

00:22:22.440 --> 00:22:24.600
they should know-- especially
this top point-- that the

00:22:24.600 --> 00:22:29.910
tracker class will no longer
set session control flag to

00:22:29.910 --> 00:22:31.280
start when the tracker
is created.

00:22:31.280 --> 00:22:32.970
JIM COTUGNO: That's correct
and very important point.

00:22:32.970 --> 00:22:37.120
And if you're not aware of that
you might be a little bit

00:22:37.120 --> 00:22:40.770
concerned because your session
numbers won't quite look the

00:22:40.770 --> 00:22:45.250
same as between v3 and v2.

00:22:45.250 --> 00:22:49.350
For iOS, again, as part of this
alignment we wanted to

00:22:49.350 --> 00:22:51.360
make all SDKs behave the same.

00:22:51.360 --> 00:22:54.810
And so we removed the session
management code which was in

00:22:54.810 --> 00:22:59.720
the GAI tracker class
from iOS.

00:22:59.720 --> 00:23:03.220
Again, like in Android, we no
longer set the session control

00:23:03.220 --> 00:23:05.235
parameter to start when the
tracker is first created.

00:23:08.800 --> 00:23:11.610
If you need to do this manually,
which might be a

00:23:11.610 --> 00:23:15.340
good idea, you can look
at hooking up to the

00:23:15.340 --> 00:23:16.060
notifications.

00:23:16.060 --> 00:23:19.520
UI application did
become active.

00:23:19.520 --> 00:23:21.010
And we'll resign active.

00:23:21.010 --> 00:23:23.790
And what you would do there
is, to become active, you

00:23:23.790 --> 00:23:27.650
would look to see if a certain
length of time had passed,

00:23:27.650 --> 00:23:30.230
which you would set up using
the will resign active

00:23:30.230 --> 00:23:32.150
notification or call back.

00:23:32.150 --> 00:23:36.230
And then you can decide to set
session, the session control

00:23:36.230 --> 00:23:39.990
parameter, to start or not on
the next hit based on the

00:23:39.990 --> 00:23:41.970
values you have there.

00:23:41.970 --> 00:23:44.150
ANDREW WALES: For Android
users who are not using

00:23:44.150 --> 00:23:48.910
EasyTracker but they do want the
session control, flag to

00:23:48.910 --> 00:23:52.800
get set to start when the
app launches, for

00:23:52.800 --> 00:23:56.080
example, is the way--

00:23:56.080 --> 00:23:58.750
would one way to do that be the
subclass application in

00:23:58.750 --> 00:24:00.180
Android and do it in
the [INAUDIBLE]?

00:24:00.180 --> 00:24:02.230
JIM COTUGNO: Well remember, you
don't want to call set on

00:24:02.230 --> 00:24:02.850
the tracker.

00:24:02.850 --> 00:24:03.120
ANDREW WALES: Right.

00:24:03.120 --> 00:24:04.440
Sorry.

00:24:04.440 --> 00:24:05.780
Don't set it on the tracker.

00:24:05.780 --> 00:24:09.600
But you might want to
set it on a screen

00:24:09.600 --> 00:24:11.090
view map, for example.

00:24:11.090 --> 00:24:11.440
JIM COTUGNO: Right.

00:24:11.440 --> 00:24:12.130
So, yeah.

00:24:12.130 --> 00:24:16.580
So your map that you passed in
would have it set or not.

00:24:16.580 --> 00:24:19.380
ANDREW WALES: So let's take a
quick look at what's new with

00:24:19.380 --> 00:24:21.980
Ecommerce in version
3 of the SDKs.

00:24:24.660 --> 00:24:27.560
It's actually a pretty
small change.

00:24:27.560 --> 00:24:29.050
Basically you need to--

00:24:29.050 --> 00:24:32.110
whereas before you would
basically send your

00:24:32.110 --> 00:24:36.280
transaction object in one hit,
you would kind of create this

00:24:36.280 --> 00:24:38.630
transaction object and then add
items and then send it all

00:24:38.630 --> 00:24:39.420
in one hit.

00:24:39.420 --> 00:24:42.690
In v3 you need to make separate
send calls for each

00:24:42.690 --> 00:24:44.030
transaction and item.

00:24:44.030 --> 00:24:48.470
So the syntax is very much the
same as sending app views or

00:24:48.470 --> 00:24:49.500
events in v3.

00:24:49.500 --> 00:24:53.060
So the easiest way to do it is
to use Map Builder and then

00:24:53.060 --> 00:24:56.530
you'd call create transaction,
add everything, all the

00:24:56.530 --> 00:24:58.710
details there.

00:24:58.710 --> 00:24:59.180
Build it.

00:24:59.180 --> 00:24:59.840
Send it.

00:24:59.840 --> 00:25:02.680
And then do the same thing for
your items, all of them.

00:25:02.680 --> 00:25:05.660
One thing that, as always, make
sure that the transaction

00:25:05.660 --> 00:25:09.590
ID in each item matches up to
the transaction ID that you

00:25:09.590 --> 00:25:12.460
used in the transaction hit.

00:25:12.460 --> 00:25:14.180
But other than that, all the
fields are the same.

00:25:14.180 --> 00:25:16.320
It's just that you need to make
sure that you're calling

00:25:16.320 --> 00:25:19.060
send for the transaction
and then also call send

00:25:19.060 --> 00:25:21.660
individually for each item.

00:25:21.660 --> 00:25:22.060
OK, cool.

00:25:22.060 --> 00:25:26.080
So let's take some of
your questions.

00:25:26.080 --> 00:25:29.760
So the first one, Jim, can
you please explain the

00:25:29.760 --> 00:25:34.560
relationship between sessions,
session duration, and how

00:25:34.560 --> 00:25:36.860
active users are determined?

00:25:36.860 --> 00:25:37.730
JIM COTUGNO: That's kind
of a big question.

00:25:37.730 --> 00:25:38.830
ANDREW WALES: It is
a loaded question.

00:25:38.830 --> 00:25:41.870
JIM COTUGNO: It's a Universal
Analytics question, but I

00:25:41.870 --> 00:25:47.770
guess I'll take a stab at kind
of explaining a little bit and

00:25:47.770 --> 00:25:52.890
hopefully maybe we can get some
updates on the website

00:25:52.890 --> 00:25:55.620
that really kind of goes
in this in depth.

00:25:55.620 --> 00:26:00.450
But so, session is basically a
set of interactions a user has

00:26:00.450 --> 00:26:03.160
with your application.

00:26:03.160 --> 00:26:05.620
They can be considered like
a single visit to the

00:26:05.620 --> 00:26:11.180
application and those sessions
will be made up of one or

00:26:11.180 --> 00:26:15.230
more, what we call, hits or
beacons in Analytics.

00:26:15.230 --> 00:26:18.650
The session duration is measured
more or less from the

00:26:18.650 --> 00:26:22.240
time that passes between the
first hit is sent or is

00:26:22.240 --> 00:26:25.170
generated and the last
hit is generated.

00:26:25.170 --> 00:26:27.920
And then active users are
basically the number of users

00:26:27.920 --> 00:26:31.480
that send one or more sessions
during the particular

00:26:31.480 --> 00:26:33.600
reporting period in question.

00:26:33.600 --> 00:26:37.190
So that's kind of the
simple answer.

00:26:37.190 --> 00:26:38.970
ANDREW WALES: If session
duration is--

00:26:38.970 --> 00:26:41.380
what would happen in
a session with one?

00:26:41.380 --> 00:26:43.920
So you said that to get the
duration we look at the first

00:26:43.920 --> 00:26:46.320
hit and the last hit to
get the duration.

00:26:46.320 --> 00:26:48.340
But what happens if there's
only one in the session?

00:26:48.340 --> 00:26:49.680
JIM COTUGNO: Well then the
duration is going to be zero.

00:26:49.680 --> 00:26:50.520
ANDREW WALES: It's
set to zero.

00:26:50.520 --> 00:26:52.210
OK.

00:26:52.210 --> 00:26:54.300
JIM COTUGNO: So if you have
a lot of sessions that are

00:26:54.300 --> 00:26:56.520
looking like they're zero
seconds in length--

00:26:56.520 --> 00:26:57.040
ANDREW WALES: That's
what it is.

00:26:57.040 --> 00:26:58.630
JIM COTUGNO: That might
be what's going on.

00:26:58.630 --> 00:26:59.490
ANDREW WALES: OK.

00:26:59.490 --> 00:27:01.960
Cool.

00:27:01.960 --> 00:27:03.620
So next question.

00:27:03.620 --> 00:27:07.550
Could calls, especially event
calls, be batched at dispatch

00:27:07.550 --> 00:27:09.630
time in one single request?

00:27:09.630 --> 00:27:10.600
JIM COTUGNO: We're
looking at doing

00:27:10.600 --> 00:27:12.330
something like that, yes.

00:27:12.330 --> 00:27:14.890
So I can't give you any sort
of commitment as to when or

00:27:14.890 --> 00:27:17.900
how, but it's been on our
mind for a while.

00:27:17.900 --> 00:27:18.660
Yeah.

00:27:18.660 --> 00:27:19.990
ANDREW WALES: So maybe
coming soon.

00:27:23.120 --> 00:27:23.940
Next question.

00:27:23.940 --> 00:27:25.920
Is there a way to keep Real-Time
Analytics while

00:27:25.920 --> 00:27:28.080
using a sample rate
of less than 100%?

00:27:30.660 --> 00:27:32.870
JIM COTUGNO: Well, so Real-Time
Analytics takes the

00:27:32.870 --> 00:27:37.130
same data that you'd send to the
websites for the reports

00:27:37.130 --> 00:27:40.370
and just gives it to you a lot
more quickly than you would

00:27:40.370 --> 00:27:41.840
get it otherwise.

00:27:41.840 --> 00:27:46.360
So, your Real-Time Analytics
data should be very much the

00:27:46.360 --> 00:27:47.890
same as your report data.

00:27:47.890 --> 00:27:52.590
So as long as you have a large
enough sample, if your sample

00:27:52.590 --> 00:27:56.570
rate's less than 100%, I think
Real-Time can still be useful.

00:27:56.570 --> 00:27:59.780
All right, obviously, you're
going to have to scale the

00:27:59.780 --> 00:28:03.170
numbers in your head, or
whatever, so we report the raw

00:28:03.170 --> 00:28:05.440
numbers, we don't report
the sample numbers.

00:28:05.440 --> 00:28:09.290
So, for example, if you see 10
and your sample rate is 10,

00:28:09.290 --> 00:28:12.840
you could reasonably infer that
you have 100 users there

00:28:12.840 --> 00:28:14.440
at that time.

00:28:14.440 --> 00:28:15.590
ANDREW WALES: So basically, the
sample rate is going to

00:28:15.590 --> 00:28:18.390
just limit the number of hits
that get sent from the client,

00:28:18.390 --> 00:28:22.210
but the real time reporting
isn't going to--

00:28:22.210 --> 00:28:24.410
it'll show all the hits that
make it but if your sample

00:28:24.410 --> 00:28:27.700
rate is 50%, you're only going
to see one hit in real time

00:28:27.700 --> 00:28:28.330
instead of two.

00:28:28.330 --> 00:28:29.880
JIM COTUGNO: I guess the other
important thing to point out

00:28:29.880 --> 00:28:33.010
here is that the sample
rate is actually

00:28:33.010 --> 00:28:34.260
based on the visitor.

00:28:34.260 --> 00:28:38.080
So a particular user or visitor
to your app will

00:28:38.080 --> 00:28:41.910
either report all their
interactions or none of them.

00:28:41.910 --> 00:28:45.750
So it's not like you'll see half
the events this user's

00:28:45.750 --> 00:28:50.190
generated, you'll see them all
if the user's going to report

00:28:50.190 --> 00:28:52.750
based on the sample rate.

00:28:52.750 --> 00:28:54.400
ANDREW WALES: So, I have another
question here about

00:28:54.400 --> 00:28:59.190
the new combined Google
Analytics Services SDK.

00:28:59.190 --> 00:29:04.430
So with v3 we're sort of giving
you Analytics but also

00:29:04.430 --> 00:29:06.500
Google Tag Manager together.

00:29:06.500 --> 00:29:09.890
So the question here is, will
there also be an SDK version

00:29:09.890 --> 00:29:11.900
without Google Tag Manager?

00:29:11.900 --> 00:29:15.210
And they're concerned about the
size of that combined SDK.

00:29:15.210 --> 00:29:18.480
JIM COTUGNO: So Google Tag
Manager and Google Analytics

00:29:18.480 --> 00:29:20.690
are like one product, or
just two different

00:29:20.690 --> 00:29:23.540
ways of doing things.

00:29:23.540 --> 00:29:27.210
So we're not going to have a
separate SDK at this point.

00:29:27.210 --> 00:29:28.450
So there will always--

00:29:28.450 --> 00:29:30.990
the SDK going forward will
always include both Google Tag

00:29:30.990 --> 00:29:33.050
Manager and Google Analytics.

00:29:33.050 --> 00:29:35.790
I wouldn't worry too much
about the size.

00:29:35.790 --> 00:29:40.260
If you're doing development in
iOS, for example, the Xcode

00:29:40.260 --> 00:29:43.560
will strip out all the code
that you don't use.

00:29:43.560 --> 00:29:47.440
So your actual final binary
will be smaller

00:29:47.440 --> 00:29:48.220
than you would expect.

00:29:48.220 --> 00:29:50.380
And if you're using something at
ProGuard in Android you'll

00:29:50.380 --> 00:29:51.850
get the same benefit.

00:29:51.850 --> 00:29:56.940
So even though the SDKs are
larger, your app code

00:29:56.940 --> 00:29:58.850
shouldn't get larger
as a result.

00:29:58.850 --> 00:30:01.000
It should be based-- as a matter
of fact, the iOS SDK,

00:30:01.000 --> 00:30:05.050
for example, the v3 version is
actually smaller than the v2

00:30:05.050 --> 00:30:08.940
version, even with the Google
Tag Manager merge.

00:30:08.940 --> 00:30:11.590
So the end result's actually
better for you.

00:30:11.590 --> 00:30:11.850
ANDREW WALES: Cool.

00:30:11.850 --> 00:30:13.100
All right.

00:30:15.630 --> 00:30:18.570
Jim, any idea on when real-time
events will be added

00:30:18.570 --> 00:30:20.370
to app properties?

00:30:20.370 --> 00:30:21.590
JIM COTUGNO: That's another
one I'd say, yes,

00:30:21.590 --> 00:30:22.360
we want to do that.

00:30:22.360 --> 00:30:22.930
We're working on it.

00:30:22.930 --> 00:30:25.990
I cannot give you any sort
of commitment as to time.

00:30:25.990 --> 00:30:27.320
ANDREW WALES: So maybe
this will come soon.

00:30:27.320 --> 00:30:29.160
Maybe.

00:30:29.160 --> 00:30:32.740
I think we've got time
for maybe one more.

00:30:32.740 --> 00:30:35.170
And this is a good one.

00:30:35.170 --> 00:30:36.620
Jim, this is a plea to you.

00:30:36.620 --> 00:30:38.840
Can you stop changing function
names every two months?

00:30:38.840 --> 00:30:40.020
JIM COTUGNO: We'll
try our best.

00:30:40.020 --> 00:30:40.540
Yes.

00:30:40.540 --> 00:30:44.680
I do apologize for the
fast-paced changes that we've

00:30:44.680 --> 00:30:46.220
gone through in the last year.

00:30:46.220 --> 00:30:47.210
But I'm hopeful--

00:30:47.210 --> 00:30:48.370
cross our fingers here--

00:30:48.370 --> 00:30:51.350
I'm hopeful this is the last
time we change names, method

00:30:51.350 --> 00:30:52.830
names, like this.

00:30:52.830 --> 00:30:55.450
ANDREW WALES: And now at least
when you're moving from one

00:30:55.450 --> 00:30:57.100
library to another, for example,
if you got from

00:30:57.100 --> 00:30:59.890
Android to the web, you should
see more consistency.

00:30:59.890 --> 00:31:01.170
JIM COTUGNO: Yes.

00:31:01.170 --> 00:31:04.680
And even Android to iOS, they're
more consistent now

00:31:04.680 --> 00:31:05.590
than they were before.

00:31:05.590 --> 00:31:07.010
ANDREW WALES: Cool.

00:31:07.010 --> 00:31:07.700
Awesome.

00:31:07.700 --> 00:31:07.900
Cool.

00:31:07.900 --> 00:31:10.130
So that brings us to the
end of this edition

00:31:10.130 --> 00:31:11.890
of Behind the Code.

00:31:11.890 --> 00:31:13.520
I wanted to pass on
some resources

00:31:13.520 --> 00:31:15.220
to everybody watching.

00:31:15.220 --> 00:31:19.460
So we have Getting Started
Guides for the v3 SDKs for

00:31:19.460 --> 00:31:21.400
both Android and iOS.

00:31:21.400 --> 00:31:22.050
There's a link there.

00:31:22.050 --> 00:31:25.600
It's basically
developers.google.com/analytics.

00:31:25.600 --> 00:31:28.900
We also have Migration Guides,
and these guides cover

00:31:28.900 --> 00:31:33.160
migrating from v2 to v3,
or even v1 to v3, so

00:31:33.160 --> 00:31:35.000
go check that out.

00:31:35.000 --> 00:31:37.410
We have a Mobile App
Analytics Forum.

00:31:37.410 --> 00:31:38.510
There's a link here.

00:31:38.510 --> 00:31:39.780
There's a lot of good questions

00:31:39.780 --> 00:31:41.020
and answers on there.

00:31:41.020 --> 00:31:44.130
I know Jim is an active
participant in that forum from

00:31:44.130 --> 00:31:45.270
time to time.

00:31:45.270 --> 00:31:48.070
So there's a lot of good
insight there.

00:31:48.070 --> 00:31:52.580
And there is also, if you're
willing to send measurement

00:31:52.580 --> 00:31:57.240
protocol parameters in these
SDKs, so we showed you how to

00:31:57.240 --> 00:31:59.550
do that using that
ampersand syntax.

00:31:59.550 --> 00:32:02.510
We do have a whole parameter
reference that shows you all

00:32:02.510 --> 00:32:04.620
the different protocol
parameters.

00:32:04.620 --> 00:32:08.340
So you can go check
that out as well.

00:32:08.340 --> 00:32:10.000
And with that, thank you
so much for joining us.

00:32:10.000 --> 00:32:12.540
That brings us to the
end of the show.

00:32:12.540 --> 00:32:16.503
Feel free to reach out to
us on Google+ and we'll

00:32:16.503 --> 00:32:17.753
catch you next time.

