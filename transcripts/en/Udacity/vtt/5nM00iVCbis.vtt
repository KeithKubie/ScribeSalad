WEBVTT
Kind: captions
Language: en

00:00:00.220 --> 00:00:02.160
So now that we have learned how to do this,

00:00:02.160 --> 00:00:06.800
let's start applying it to doing filtering on averaging for images.

00:00:06.800 --> 00:00:12.011
I'm going to show this simple example using the classic image of peppers

00:00:12.011 --> 00:00:18.070
showing a black and white image, 5 by 12, 512 by 512 image resolution.

00:00:18.070 --> 00:00:21.130
I'm going to apply a average filter.

00:00:21.130 --> 00:00:24.356
Now this time around I'm not going to apply a 3 by 3 but

00:00:24.356 --> 00:00:28.360
a 21 by 21 neighborhood kernel, okay?

00:00:28.360 --> 00:00:29.410
So that's important to note.

00:00:29.410 --> 00:00:33.440
That we've been playing around with just 3 by 3's but these can be quite big.

00:00:33.440 --> 00:00:34.529
And that's one of the things I want to show you here.

00:00:34.529 --> 00:00:37.532
This is a 5 by 12, 512 by 512 image and

00:00:37.532 --> 00:00:41.250
I'm going to apply a kernel that's 21 by 21.

00:00:41.250 --> 00:00:44.130
This is the output of that process.

00:00:44.130 --> 00:00:48.820
basically, if you notice, the whole image is quite blurry.

00:00:48.820 --> 00:00:50.800
What has happened really is, at each and

00:00:50.800 --> 00:00:55.520
every point we've basically replaced the value by the average of

00:00:55.520 --> 00:00:57.730
the neighborhood in a 12 by 12, 21 by 21 neighborhood.

00:00:57.730 --> 00:01:01.630
Now all of a sudden, if you notice, all the sharp edges are gone.

00:01:01.630 --> 00:01:05.459
Remember when we looked at images in the histograms and stuff like that?

00:01:05.459 --> 00:01:08.680
There are lots of peaks and valleys in these types of images.

00:01:08.680 --> 00:01:10.940
Well by blurring it, using a filter,

00:01:10.940 --> 00:01:15.350
we've gotten rid of a whole lot of really sharp peaks next to each other.

00:01:15.350 --> 00:01:17.590
Therefore, this image now looks a little blurred.

00:01:17.590 --> 00:01:18.990
Also notice the edges.

00:01:18.990 --> 00:01:21.880
This is what I was referring to earlier because what we're doing is

00:01:21.880 --> 00:01:23.180
we're adding information.

00:01:23.180 --> 00:01:27.030
Some of the information will be lost, and in this case to do a 21 by 21,

00:01:27.030 --> 00:01:31.710
but 10 pixels were added on all three sides, and

00:01:31.710 --> 00:01:35.640
of course the average of this does degrade information at the edges.

00:01:35.640 --> 00:01:39.000
Just to showcase this, the box filter basically if you were to look at it

00:01:39.000 --> 00:01:41.500
in the same height map configuration we've looked at,

00:01:41.500 --> 00:01:46.160
would just be a flat box like this and it'd have a shape and again in the image

00:01:46.160 --> 00:01:51.390
form of the same values across the whole sub-image that we have.

00:01:51.390 --> 00:01:52.660
Again this is a 21 by 21.

00:01:52.660 --> 00:01:56.180
The intensity is the same for each and every one of them.

00:01:56.180 --> 00:02:01.160
In this case I would assume would be, you know, 1 over 1 over 21,

00:02:01.160 --> 00:02:05.520
and this would be my kind of the kernel, what it would look like.

