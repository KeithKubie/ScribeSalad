WEBVTT
Kind: captions
Language: en

00:00:00.230 --> 00:00:01.605
IAN LAKE: I don't
know about you,

00:00:01.605 --> 00:00:05.250
but I like writing less code,
particularly boilerplate code.

00:00:05.250 --> 00:00:07.970
Alongside API 24,
we've included support

00:00:07.970 --> 00:00:10.740
for a number of Java
8 language features

00:00:10.740 --> 00:00:13.796
with the help of
the Jack toolchain.

00:00:13.796 --> 00:00:15.170
To use any of
these new features,

00:00:15.170 --> 00:00:17.450
you'll need to enable
the Jack toolchain.

00:00:17.450 --> 00:00:19.490
All it takes is just
a few lines of code

00:00:19.490 --> 00:00:22.310
in your build.gradle
file, and you're all set.

00:00:22.310 --> 00:00:24.760
Now to cut that
boilerplate code.

00:00:24.760 --> 00:00:27.590
Firstly, you'll be able
to use lambda expressions,

00:00:27.590 --> 00:00:31.400
a simplified way of expressing
functional interfaces,

00:00:31.400 --> 00:00:34.000
interfaces with just
a single method.

00:00:34.000 --> 00:00:37.630
This allows us to rewrite our
onClick listeners from all this

00:00:37.630 --> 00:00:40.630
down to something a
little easier to look at.

00:00:40.630 --> 00:00:43.230
You'll note that parameter
types are optional.

00:00:43.230 --> 00:00:44.880
Here we're using
braces to allow you

00:00:44.880 --> 00:00:47.912
to have multiple statements,
just like a normal method.

00:00:47.912 --> 00:00:49.620
But if you only have
a single expression,

00:00:49.620 --> 00:00:51.810
you can leave them out.

00:00:51.810 --> 00:00:54.400
A sister feature to
lambda expressions,

00:00:54.400 --> 00:00:57.690
method references allow
you to use existing methods

00:00:57.690 --> 00:01:00.800
as lambda expressions,
making those one line lambda

00:01:00.800 --> 00:01:03.560
expressions even shorter.

00:01:03.560 --> 00:01:05.510
The best part about
these features,

00:01:05.510 --> 00:01:08.370
they're backward compatible
down to Gingerbread.

00:01:08.370 --> 00:01:10.900
So whether you're building for
the latest version of Android

00:01:10.900 --> 00:01:15.020
or not, you'll be able to shave
off some boilerplate code.

00:01:15.020 --> 00:01:16.950
This works because
the Jack toolchain

00:01:16.950 --> 00:01:19.810
is able to implement
these new features using

00:01:19.810 --> 00:01:22.180
anonymous classes,
just as if you

00:01:22.180 --> 00:01:25.460
had written the old version
of the code yourself.

00:01:25.460 --> 00:01:28.150
That also means you shouldn't
go overboard with using them

00:01:28.150 --> 00:01:29.780
in tight loops or anything.

00:01:29.780 --> 00:01:32.870
They're still
relatively expensive.

00:01:32.870 --> 00:01:36.460
However, if you are
minSdkVersion 24,

00:01:36.460 --> 00:01:38.390
you've entered a
magical land where

00:01:38.390 --> 00:01:42.200
you can take advantage of a
number of additional features.

00:01:42.200 --> 00:01:44.940
For example, lambda
expressions go perfectly

00:01:44.940 --> 00:01:48.510
with the stream APIs which
allow you to chain together

00:01:48.510 --> 00:01:51.770
multiple operations, such
as filtering, mapping,

00:01:51.770 --> 00:01:53.580
or converting into
different types

00:01:53.580 --> 00:01:55.940
before applying a
terminating method,

00:01:55.940 --> 00:01:59.310
such as sum for a stream
of ints or for each

00:01:59.310 --> 00:02:02.950
for applying a lambda expression
to every remaining item.

00:02:02.950 --> 00:02:07.200
Oh, and it supports running in
parallel out of the box-- crazy

00:02:07.200 --> 00:02:08.289
powerful stuff.

00:02:08.289 --> 00:02:09.789
And I'd encourage
you to check out

00:02:09.789 --> 00:02:13.930
the docs for all the details,
as there's a lot of them.

00:02:13.930 --> 00:02:16.290
Interfaces also got an
upgrade with the ability

00:02:16.290 --> 00:02:18.950
to add default method
implementations

00:02:18.950 --> 00:02:20.550
and static methods.

00:02:20.550 --> 00:02:23.740
This makes it easy to add
new methods to an interface

00:02:23.740 --> 00:02:28.050
without having to update every
implementation of the interface

00:02:28.050 --> 00:02:30.900
and allows you to play
static helper methods related

00:02:30.900 --> 00:02:34.450
to an interface in
the interface itself.

00:02:34.450 --> 00:02:36.450
And if you're a
fan of annotations,

00:02:36.450 --> 00:02:38.330
and I know some
of you are, you'll

00:02:38.330 --> 00:02:40.850
be able to take advantage
of repeating annotations

00:02:40.850 --> 00:02:43.780
to add the same
annotation more than once.

00:02:43.780 --> 00:02:46.690
Particularly useful if you
have an annotation that accepts

00:02:46.690 --> 00:02:49.150
different type elements.

00:02:49.150 --> 00:02:51.590
So lots of great
new features, both

00:02:51.590 --> 00:02:54.740
in the backward compatible and
non-backward compatible nature.

00:02:54.740 --> 00:02:58.360
New tools to help you
build better apps.

