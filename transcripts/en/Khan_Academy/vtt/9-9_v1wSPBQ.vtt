WEBVTT
Kind: captions
Language: en

00:00:00.532 --> 00:00:02.524
Voiceover: At its core,
bitcoin is just basically

00:00:02.524 --> 00:00:05.440
a chain of digital signatures
that really reflect

00:00:05.440 --> 00:00:09.526
the coin's path through
the bitcoin ecosystem.

00:00:09.526 --> 00:00:10.772
And, you know what? I think it's actually

00:00:10.772 --> 00:00:13.572
conceptually easier to think of bitcoins

00:00:13.572 --> 00:00:17.360
as collective entries into a ledger

00:00:17.360 --> 00:00:19.420
rather than as a physical coin

00:00:19.420 --> 00:00:21.696
because if you think
about it, in a ledger,

00:00:21.696 --> 00:00:23.958
you have a record of
transaction histories,

00:00:23.958 --> 00:00:25.858
which is what happens in bitcoin,

00:00:25.858 --> 00:00:28.630
whereas with the physical coin,

00:00:28.630 --> 00:00:30.162
it's more, like, memory-less.

00:00:30.162 --> 00:00:31.757
There's no history in a physical coin

00:00:31.757 --> 00:00:34.630
of where that coin has
really been in the past.

00:00:34.630 --> 00:00:37.360
In this context, you can
think of a transaction

00:00:37.360 --> 00:00:42.136
as just a digitally-signed
declaration by one party

00:00:42.136 --> 00:00:45.136
of its intent to transfer some bitcoins

00:00:45.136 --> 00:00:47.902
that they possess to
another set of parties.

00:00:47.902 --> 00:00:49.472
And when I say one party possesses

00:00:49.472 --> 00:00:50.469
a certain number of bitcoins,

00:00:50.469 --> 00:00:52.201
I really just mean here that

00:00:52.201 --> 00:00:54.564
there are some previous
transactions on record

00:00:54.564 --> 00:00:55.859
that everybody's agreed to

00:00:55.859 --> 00:00:58.759
in which the party now
transferring the bitcoins

00:00:58.759 --> 00:01:02.857
was itself the recipient
of a previous transfer

00:01:02.857 --> 00:01:05.292
of those bitcoins, all right?

00:01:05.292 --> 00:01:06.966
Now, I realize it's a bit convoluted,

00:01:06.966 --> 00:01:10.170
so maybe to help better
understand the mechanics

00:01:10.170 --> 00:01:10.964
of a transaction,

00:01:10.964 --> 00:01:12.992
I can do an example of what would happen

00:01:12.992 --> 00:01:16.802
in the context of an
actual bitcoin transaction.

00:01:16.802 --> 00:01:17.791
Let's say we have a party,

00:01:17.791 --> 00:01:19.398
and let's call her Alice,

00:01:19.398 --> 00:01:22.462
which is the common
name we use for parties

00:01:22.462 --> 00:01:24.188
in cryptographic schemes,

00:01:24.188 --> 00:01:26.314
and let's say she wants to transfer

00:01:26.314 --> 00:01:27.607
some bitcoins to Bob,

00:01:27.607 --> 00:01:30.089
and let's say she would like,

00:01:30.089 --> 00:01:32.540
has an intention of wanting to transfer

00:01:32.540 --> 00:01:37.272
50 bitcoins to Bob.

00:01:37.766 --> 00:01:40.635
Now, remember that anybody who transacts

00:01:40.635 --> 00:01:43.959
in the bitcoin ecosystem
is actually not transacting

00:01:43.959 --> 00:01:46.771
under their real name,
or their actual name,

00:01:46.771 --> 00:01:50.542
but rather they are known
by a very specific identity,

00:01:50.542 --> 00:01:53.207
a pseudonym within the bitcoin ecosystem,

00:01:53.207 --> 00:01:55.384
and that identity, that
pseudonym is actually

00:01:55.384 --> 00:01:58.381
that actually corresponds
to a public verification key

00:01:58.381 --> 00:01:59.635
for a digital signature scheme.

00:01:59.635 --> 00:02:02.217
So, in this case, let's
say Alice's identity

00:02:02.217 --> 00:02:05.381
in the system is really some
public verification key,

00:02:05.381 --> 00:02:08.493
which we'll call VK of A,

00:02:08.493 --> 00:02:10.502
so Alice's verification key,

00:02:10.502 --> 00:02:12.068
and in the context of Bob,

00:02:12.068 --> 00:02:17.136
let's say his public
verification key is VK sub B.

00:02:17.136 --> 00:02:18.659
So, these are keys that are used

00:02:18.659 --> 00:02:20.770
within digital signature schemes,

00:02:20.770 --> 00:02:22.331
and so we can assume
that Alice has generated

00:02:22.331 --> 00:02:25.052
this key at some point, and
that she made it public,

00:02:25.052 --> 00:02:26.582
and that Bob did the same thing,

00:02:26.582 --> 00:02:28.385
and so now they both have identities

00:02:28.385 --> 00:02:28.964
within the system,

00:02:28.964 --> 00:02:31.463
and these identities are
just sequences of numbers

00:02:31.463 --> 00:02:35.557
that correspond to public
keys for verification

00:02:35.557 --> 00:02:38.228
in the context of a
cryptographic digital signature.

00:02:38.228 --> 00:02:39.134
All right?

00:02:39.134 --> 00:02:41.216
Now, remember, that these values

00:02:41.216 --> 00:02:43.382
also correspond to private values,

00:02:43.382 --> 00:02:45.380
so each person who's got a public key

00:02:45.380 --> 00:02:47.938
will have a corresponding private key,

00:02:47.938 --> 00:02:49.457
associated with that public key,

00:02:49.457 --> 00:02:51.719
and in this case, we'll
call the private key,

00:02:51.719 --> 00:02:53.463
or the secret key, which is, in fact,

00:02:53.463 --> 00:02:56.503
a signing key in this
context, SK of Alice,

00:02:56.503 --> 00:03:01.890
and we'll say that Bob's
signing key is SK of Bob.

00:03:01.890 --> 00:03:02.837
Okay?

00:03:02.837 --> 00:03:03.688
And they're going to basically

00:03:03.688 --> 00:03:05.206
keep these keys private.

00:03:05.206 --> 00:03:07.640
Now let's say that Alice
herself had received

00:03:07.640 --> 00:03:08.440
in the past,

00:03:08.440 --> 00:03:10.992
three transactions of
bitcoins from other parties.

00:03:10.992 --> 00:03:15.876
Let's say she got 25 bitcoins from Carol,

00:03:15.876 --> 00:03:18.993
and we'll call Carol VK
of C to associate that

00:03:18.993 --> 00:03:19.677
with her key,

00:03:19.677 --> 00:03:23.731
let's say she got 20 public,

00:03:23.731 --> 00:03:28.204
or 20 bitcoins, rather, from David,

00:03:28.204 --> 00:03:33.333
and let's say she got 20
more bitcoins from Ted.

00:03:33.333 --> 00:03:33.714
Okay?

00:03:33.714 --> 00:03:35.033
So these are,

00:03:35.033 --> 00:03:37.393
these bitcoins correspond
to different people

00:03:37.393 --> 00:03:40.046
that provided Alice with
bitcoins in the past,

00:03:40.046 --> 00:03:40.938
and so as you can see,

00:03:40.938 --> 00:03:43.117
Alice now has an aggregate of 65,

00:03:43.117 --> 00:03:46.492
which is 20 plus 20 plus 25 bitcoins,

00:03:46.492 --> 00:03:47.737
and so as a result,

00:03:47.737 --> 00:03:50.744
she has a sufficient number to be able to

00:03:50.744 --> 00:03:53.999
transfer 50 of those
bitcoins to Bob, okay?

00:03:53.999 --> 00:03:56.508
So to start off with, a
transaction from Alice to Bob

00:03:56.508 --> 00:03:59.714
for 50 bitcoins will
contain information about

00:03:59.714 --> 00:04:00.807
these previous transactions,

00:04:00.807 --> 00:04:02.845
so each of these previous transactions

00:04:02.845 --> 00:04:05.796
where Alice received some bitcoins,

00:04:05.796 --> 00:04:07.025
these will have been recorded

00:04:07.025 --> 00:04:08.320
in the bitcoin ecosystem,

00:04:08.320 --> 00:04:09.666
so they're going to be made public,

00:04:09.666 --> 00:04:11.367
just like every other transaction,

00:04:11.367 --> 00:04:12.715
and so what Alice can actually do

00:04:12.715 --> 00:04:14.983
is she can take some representation

00:04:14.983 --> 00:04:17.149
of these transactions and include them

00:04:17.149 --> 00:04:19.652
as part of the new transaction with Bob,

00:04:19.652 --> 00:04:21.799
basically as an anchor point to say,

00:04:21.799 --> 00:04:23.917
"Hey, I received these previous bitcoins,

00:04:23.917 --> 00:04:24.595
"and now I'm going to transfer

00:04:24.595 --> 00:04:27.941
"some portion of these
bitcoins to you, Bob."

00:04:27.941 --> 00:04:28.945
Okay?

00:04:28.945 --> 00:04:30.996
So, in this context, actually,

00:04:30.996 --> 00:04:33.536
she does not need to include the full

00:04:33.536 --> 00:04:36.719
transaction details in the
actual transaction record

00:04:36.719 --> 00:04:37.649
to Bob.

00:04:37.649 --> 00:04:38.795
What she can instead do

00:04:38.795 --> 00:04:41.054
is take the transaction details and apply

00:04:41.054 --> 00:04:44.722
a cryptographic hash function to them

00:04:44.722 --> 00:04:47.696
to get a series of digests
for each transaction.

00:04:47.696 --> 00:04:50.202
So in this case, let's
say she has a digest

00:04:50.202 --> 00:04:52.502
that corresponds to the
transaction of Carol,

00:04:52.502 --> 00:04:53.991
she'll have a digest that corresponds

00:04:53.991 --> 00:04:56.645
to the transaction from David,

00:04:56.645 --> 00:04:58.607
and she'll have a digest that corresponds

00:04:58.607 --> 00:05:00.480
to the transaction from Ted, okay?

00:05:00.480 --> 00:05:03.566
And she'll basically include
each of these digests

00:05:03.566 --> 00:05:06.505
into the transaction record,

00:05:06.505 --> 00:05:08.434
and what these [trackers] allow you to do,

00:05:08.434 --> 00:05:10.387
or really allow anyone
to do, for that matter,

00:05:10.387 --> 00:05:12.842
is they can verify the chain of ownership

00:05:12.842 --> 00:05:14.066
of these bitcoins,

00:05:14.066 --> 00:05:15.652
because they can simply take

00:05:15.652 --> 00:05:17.152
all the previous transaction records,

00:05:17.152 --> 00:05:18.800
which, again, are made public.

00:05:18.800 --> 00:05:20.730
They can apply
cryptographic hash functions

00:05:20.730 --> 00:05:23.814
to these different transaction records,

00:05:23.814 --> 00:05:26.096
and they can verify that
these cryptographic hashes,

00:05:26.096 --> 00:05:27.963
when applied to those transaction records

00:05:27.963 --> 00:05:30.806
provide you back with the
values D sub C, D sub D,

00:05:30.806 --> 00:05:31.768
and D sub T,

00:05:31.768 --> 00:05:33.210
and that, in turn, provides you with

00:05:33.210 --> 00:05:35.794
some type of a cryptographic guarantee

00:05:35.794 --> 00:05:37.192
because we're using
cryptographic hash functions,

00:05:37.192 --> 00:05:39.070
we have a cryptographic guarantee that,

00:05:39.070 --> 00:05:41.719
that Alice was the ultimate recipient of

00:05:41.719 --> 00:05:43.437
these transactions from
these different parties.

00:05:43.437 --> 00:05:46.144
We have this nice history
that we can record,

00:05:46.144 --> 00:05:49.109
and that we can essentially
ascertain in this fashion.

00:05:49.109 --> 00:05:49.850
All right?

00:05:49.850 --> 00:05:51.680
Because we're using
cryptographic hash functions,

00:05:51.680 --> 00:05:53.900
we now have some assurance that Alice

00:05:53.900 --> 00:05:55.826
couldn't have so easily
cheated the system,

00:05:55.826 --> 00:05:56.726
all right?

00:05:56.726 --> 00:05:58.498
So, at this point in the transaction,

00:05:58.498 --> 00:06:00.646
and maybe I'll kind of draw a line

00:06:00.646 --> 00:06:01.691
so you can kind of see

00:06:01.691 --> 00:06:04.029
where the transaction
details are recorded.

00:06:04.029 --> 00:06:05.384
So at this point of the transaction,

00:06:05.384 --> 00:06:07.669
we have details about Alice's ownership

00:06:07.669 --> 00:06:09.809
of these 65 bitcoins,

00:06:09.809 --> 00:06:11.778
and she has enough information
in that transaction

00:06:11.778 --> 00:06:13.661
so that anybody can verify

00:06:13.661 --> 00:06:15.825
that she possessed these coins.

00:06:15.825 --> 00:06:18.346
You can think of this part
of the transaction, really,

00:06:18.346 --> 00:06:20.829
as representing the input,

00:06:20.829 --> 00:06:22.538
the input to the transaction.

00:06:22.538 --> 00:06:24.054
Now, in addition to the input portion

00:06:24.054 --> 00:06:24.696
of the transaction,

00:06:24.696 --> 00:06:27.190
there's typically also an output portion.

00:06:27.190 --> 00:06:29.246
I'm going to put that
output portion up here,

00:06:29.246 --> 00:06:31.071
but let me label it,

00:06:31.071 --> 00:06:32.674
and so for starters,
in the output portion,

00:06:32.674 --> 00:06:33.869
she has to include,

00:06:33.869 --> 00:06:36.204
or Alice has to include
a list of recipients

00:06:36.204 --> 00:06:37.376
for her bitcoins,

00:06:37.376 --> 00:06:38.623
and since Alice wants to,

00:06:38.623 --> 00:06:40.694
let's say, transfer these bitcoins to Bob,

00:06:40.694 --> 00:06:43.828
she has to specify Bob's
identity in the system,

00:06:43.828 --> 00:06:45.304
which, in fact, as you mentioned earlier

00:06:45.304 --> 00:06:47.091
was Bob's public key,

00:06:47.091 --> 00:06:52.687
so we'll say that she'll
mention V sub K of B,

00:06:52.687 --> 00:06:55.770
and she also has to record
and mention at this stage

00:06:55.770 --> 00:06:57.922
how many coins she
wants to transfer to Bob

00:06:57.922 --> 00:06:59.711
and as we said earlier,
we were going to assume

00:06:59.711 --> 00:07:02.584
that Alice wanted to transfer exactly 50

00:07:02.584 --> 00:07:05.369
of her bitcoins to Bob, okay?

00:07:05.369 --> 00:07:06.607
So she's going to
specify the number of 50.

00:07:06.607 --> 00:07:09.002
Actually, in reality, she'll
specify another number,

00:07:09.002 --> 00:07:13.189
but it's going to represent
50 bitcoins for Bob, okay?

00:07:13.189 --> 00:07:15.593
Now, in order for Alice to get back change

00:07:15.593 --> 00:07:18.133
because she has 65
bitcoins kind of coming in,

00:07:18.133 --> 00:07:20.734
and she is only giving 50 back to Bob,

00:07:20.734 --> 00:07:22.031
what she might then do is decide that

00:07:22.031 --> 00:07:24.997
she's going to specify
14 of those bitcoins

00:07:24.997 --> 00:07:26.850
to be returned back to her

00:07:26.850 --> 00:07:29.307
in the form of change,

00:07:29.307 --> 00:07:33.091
so 14 of those bitcoins
are going to be reassigned

00:07:33.091 --> 00:07:36.687
back to Alice's public key, all right?

00:07:36.687 --> 00:07:38.661
And what Alice will then
do is she's going to take

00:07:38.661 --> 00:07:41.178
all of this data, this transaction data,

00:07:41.178 --> 00:07:42.800
this input and this output,

00:07:42.800 --> 00:07:45.189
and she's going to
digitally sign that data,

00:07:45.189 --> 00:07:48.109
and she's going to use her signing key,

00:07:48.109 --> 00:07:49.661
her signing key,

00:07:49.661 --> 00:07:51.193
to digitally sign all this data,

00:07:51.193 --> 00:07:53.060
like you would with a digital signature,

00:07:53.060 --> 00:07:56.120
and she's going to append that signature

00:07:56.750 --> 00:08:01.025
to the actual contents of
the transaction record,

00:08:01.025 --> 00:08:04.127
and that'll effectively
bind Alice's identity

00:08:04.480 --> 00:08:06.711
with the transaction record itself.

00:08:06.711 --> 00:08:07.862
And the reason it's going to bind it is

00:08:07.862 --> 00:08:09.749
we're using a digital signature scheme,

00:08:09.749 --> 00:08:13.317
and so anybody who possesses
Alice's public key,

00:08:13.317 --> 00:08:14.554
which, again, is made public,

00:08:14.554 --> 00:08:17.859
can validate that only
Alice could have created

00:08:17.859 --> 00:08:19.752
this block because only Alice, in theory,

00:08:19.752 --> 00:08:21.614
can come up with the signature

00:08:21.614 --> 00:08:23.025
that corresponds to her public key

00:08:23.025 --> 00:08:24.867
because she's the only
person who, in theory,

00:08:24.867 --> 00:08:27.712
should possess the private signing key

00:08:27.712 --> 00:08:30.565
corresponding to her
public key, all right?

00:08:30.565 --> 00:08:34.136
Then all of this data will
actually be broadcast out,

00:08:34.136 --> 00:08:36.809
so this transaction data
will then get broadcast out

00:08:36.809 --> 00:08:39.346
to all the different peers and the nodes

00:08:39.346 --> 00:08:41.368
in the bitcoin network.

00:08:41.368 --> 00:08:42.849
Everybody in the bitcoin network

00:08:42.849 --> 00:08:45.679
will basically know now that

00:08:45.956 --> 00:08:51.136
VK sub A is trying to send
50 bitcoins to VK sub B.

00:08:51.136 --> 00:08:51.735
Now, at this point,

00:08:51.735 --> 00:08:54.146
you may have noticed a
slight discrepancy here

00:08:54.146 --> 00:08:57.664
that Alice started off with 65 coins,

00:08:57.664 --> 00:08:59.204
kind of on the input side,

00:08:59.204 --> 00:09:01.888
but on the output side,
she only has 50 plus 14,

00:09:01.888 --> 00:09:05.277
or 64 coins that are being accounted for.

00:09:05.277 --> 00:09:07.599
So there's this issue,
what happens with this one,

00:09:07.599 --> 00:09:09.470
one last remaining coin?

00:09:09.470 --> 00:09:11.701
There's kind of this one
implicit coin hanging around

00:09:11.701 --> 00:09:13.351
that has not been accounted for,

00:09:13.351 --> 00:09:16.100
and what we're going to do with that coin

00:09:16.100 --> 00:09:17.689
is that coin is actually going to be used

00:09:17.689 --> 00:09:18.905
as a transaction fee.

00:09:18.905 --> 00:09:22.970
Alice is basically saying
that this one leftover coin

00:09:22.970 --> 00:09:25.741
should be provided as transaction fee

00:09:25.741 --> 00:09:30.676
to what's known as a bitcoin miner.

00:09:30.676 --> 00:09:33.170
A bitcoin miner, as I
mentioned in a previous video,

00:09:33.170 --> 00:09:35.787
is basically an entity
in the bitcoin system.

00:09:35.787 --> 00:09:37.938
Anybody can be a bitcoin miner, actually,

00:09:37.938 --> 00:09:39.573
but it's a node in the bitcoin network

00:09:39.573 --> 00:09:41.583
who engages, really, in the effort

00:09:41.583 --> 00:09:46.105
to help with the broader
validation of this transaction.

00:09:46.105 --> 00:09:48.170
So what do I mean by broader validation?

00:09:48.170 --> 00:09:49.392
Well, if you think about it,

00:09:49.392 --> 00:09:51.112
at this point, we've just used

00:09:51.112 --> 00:09:54.039
cryptographic hashing and
digital signing to validate

00:09:54.039 --> 00:09:56.422
that Alice at some point possessed

00:09:56.422 --> 00:09:58.696
the requisite bitcoins in the system,

00:09:58.696 --> 00:10:01.005
and that she not only publically announced

00:10:01.005 --> 00:10:03.619
her intention to transfer
some of the bitcoins to Bob,

00:10:03.619 --> 00:10:06.381
but she digitally signed
that public pronouncement,

00:10:06.381 --> 00:10:08.220
if you will, as a result of which,

00:10:08.220 --> 00:10:09.719
her public verification key,

00:10:09.719 --> 00:10:11.610
which is her identity
in the bitcoin system,

00:10:11.610 --> 00:10:13.705
is now bound to that transaction.

00:10:13.705 --> 00:10:15.506
But, what Bob doesn't know yet,

00:10:15.506 --> 00:10:16.838
even though he knows all of these things

00:10:16.838 --> 00:10:17.748
and he can validate them,

00:10:17.748 --> 00:10:18.971
what Bob doesn't know yet

00:10:18.971 --> 00:10:21.909
is whether Alice tried to,
let's say, previously sign,

00:10:21.909 --> 00:10:24.093
or sign those exact same
coins to somebody else.

00:10:24.093 --> 00:10:25.513
Maybe there's another party.

00:10:25.851 --> 00:10:29.060
Let's say Alice has a friend named Eve.

00:10:29.060 --> 00:10:31.512
Maybe Alice decided she's going to send

00:10:31.512 --> 00:10:32.983
these bitcoins not only to Bob,

00:10:32.983 --> 00:10:34.139
but also she's going to try to send

00:10:34.139 --> 00:10:35.901
these same bitcoins to Eve,

00:10:35.901 --> 00:10:38.079
and Bob at this point may
not have the assurance

00:10:38.079 --> 00:10:40.545
that Alice has not tried to engage

00:10:40.545 --> 00:10:43.282
in these types of shenanigans, all right?

00:10:43.282 --> 00:10:44.637
And so the tricky part here is that

00:10:44.637 --> 00:10:47.337
even though all the
transactions we've talked about

00:10:47.337 --> 00:10:49.077
have been made public

00:10:49.077 --> 00:10:50.606
because the bitcoin
requires all transactions

00:10:50.606 --> 00:10:51.634
to be made public,

00:10:51.634 --> 00:10:52.950
we still need a mechanism,

00:10:52.950 --> 00:10:55.133
and this has to be a
decentralized mechanism

00:10:55.133 --> 00:11:00.158
that does not require a
trusted third party, per se.

00:11:00.158 --> 00:11:02.441
We need a decentralized
mechanism for agreeing,

00:11:02.441 --> 00:11:04.749
really, on the order in which transactions

00:11:04.749 --> 00:11:06.149
actually took place,

00:11:06.149 --> 00:11:07.816
so that we can resolve any disputes

00:11:07.816 --> 00:11:12.526
about someone trying to
double spend their coins.

00:11:13.095 --> 00:11:16.221
It's that requirement, that timestamp,

00:11:16.221 --> 00:11:18.297
that decentralized time
stamp, if you will,

00:11:18.297 --> 00:11:20.570
which is where bitcoin miners play

00:11:20.570 --> 00:11:23.378
a very important role in
the bitcoin ecosystem,

00:11:23.378 --> 00:11:25.306
and I'll talk about how that works

00:11:25.306 --> 00:11:28.957
and how we deal with
transaction time stamping

00:11:28.957 --> 23:59:59.999
in subsequent videos.

