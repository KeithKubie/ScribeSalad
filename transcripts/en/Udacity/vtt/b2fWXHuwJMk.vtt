WEBVTT
Kind: captions
Language: en

00:00:02.990 --> 00:00:03.570
We're live.

00:00:03.570 --> 00:00:06.840
Welcome Iran, this is iCandy Webcast.

00:00:06.840 --> 00:00:07.935
I'm Anthony.

00:00:07.935 --> 00:00:10.475
&gt;&gt; [COUGH] Coach Audacity.

00:00:10.475 --> 00:00:12.447
I'm also Coach Audacity.

00:00:12.447 --> 00:00:16.834
So today we're going to be talking
about structure in your code and

00:00:16.834 --> 00:00:22.289
planning out basically priming out your
code before you start on a new project.

00:00:22.289 --> 00:00:26.090
We have a question submitted
before the webcast started.

00:00:26.090 --> 00:00:28.960
How do you tackle a new project, and

00:00:28.960 --> 00:00:31.900
basically that's what this
whole webcast will be about so

00:00:31.900 --> 00:00:35.910
hopefully it will be able to answer
that question moving forward.

00:00:37.250 --> 00:00:39.590
So I guess we can start.

00:00:39.590 --> 00:00:43.160
Jonah, what do you do when
you have a new project, and

00:00:43.160 --> 00:00:46.230
you're trying to scope
out what you want to do?

00:00:46.230 --> 00:00:49.170
&gt;&gt; Yeah, I mean that's exactly
what I want to do, scope it out.

00:00:49.170 --> 00:00:54.220
So you don't want to just dive in and
start with a blank screen,

00:00:54.220 --> 00:00:55.350
start typing code.

00:00:56.440 --> 00:01:01.100
That's It's hard first and then it's
also frustrating because you'll type

00:01:01.100 --> 00:01:03.130
a little bit and then you'll
wonder what should I do next?

00:01:04.470 --> 00:01:08.960
Whereas it's best to sort of approach
it with a structural concept so

00:01:08.960 --> 00:01:12.470
you'll sort of map out what
you want your code to do,

00:01:13.670 --> 00:01:16.510
master the inputs, the outputs and then,

00:01:16.510 --> 00:01:19.910
sort of think about what it's going to
look like even before you write it.

00:01:19.910 --> 00:01:21.070
&gt;&gt; For sure.

00:01:21.070 --> 00:01:21.690
&gt;&gt; That's a blessing.

00:01:21.690 --> 00:01:25.530
&gt;&gt; It's almost like writing a paper,
writing an essay.

00:01:25.530 --> 00:01:30.000
You want to start out with an outline,
some idea, some direction.

00:01:30.000 --> 00:01:34.750
And the biggest danger as we'll
see today is that when you

00:01:34.750 --> 00:01:39.120
dive into code without an idea
of structure beforehand

00:01:39.120 --> 00:01:43.230
you may not get into a big situation
immediately, but you might find that

00:01:43.230 --> 00:01:48.040
the code you write becomes difficult
to maintain, difficult to follow.

00:01:48.040 --> 00:01:51.792
And we'll see some examples of
some well-structured code and

00:01:51.792 --> 00:01:54.780
some-not-so well-structured code.

00:01:54.780 --> 00:02:00.190
So really closely tied
to the idea of structure

00:02:00.190 --> 00:02:05.480
is this term that gets thrown
around called spaghetti code,

00:02:05.480 --> 00:02:07.825
and what it refers to, it is delicious.

00:02:07.825 --> 00:02:08.919
&gt;&gt; [LAUGH]
&gt;&gt; But not

00:02:08.919 --> 00:02:10.400
only as a code is it delicious.

00:02:11.840 --> 00:02:16.305
But I think it kind of refers
to code that's overlapping and

00:02:16.305 --> 00:02:19.110
kind of getting tangled.

00:02:19.110 --> 00:02:21.824
And the original definition of it,

00:02:21.824 --> 00:02:27.257
I have some code on my computer that
I'm going to share with everybody.

00:02:27.257 --> 00:02:31.949
[BLANK_AUDIO]

00:02:31.949 --> 00:02:36.610
So this is some code,
I'll make it a little bit larger.

00:02:36.610 --> 00:02:39.730
So you may not recognize
this programming language.

00:02:41.560 --> 00:02:44.810
But this is a programming
language called Basic.

00:02:44.810 --> 00:02:49.510
And Basic Six in its index.

00:02:49.510 --> 00:02:55.200
You may be able to just look at this and
be able to know what it does.

00:02:56.412 --> 00:02:57.758
So Jonah, can you look at this and

00:02:57.758 --> 00:03:00.300
do you have any idea of
what it might be doing?

00:03:00.300 --> 00:03:01.140
&gt;&gt; Yeah sure.

00:03:01.140 --> 00:03:07.450
It kind of looks like you're
defining i as the integer zero and

00:03:07.450 --> 00:03:11.460
then you're defining it again and
as itself plus one.

00:03:11.460 --> 00:03:12.950
So i equals 1 now.

00:03:12.950 --> 00:03:16.942
So you print i which is 1 and

00:03:16.942 --> 00:03:24.435
then you have it print
out 1^2 = i times itself.

00:03:24.435 --> 00:03:30.010
And then if i is created
in 10 then you go to 16 but

00:03:30.010 --> 00:03:34.880
it's not so go to the next and we go
to the next line and it says go to 20.

00:03:34.880 --> 00:03:38.642
So go back up and
we'll add one to i, print it,

00:03:38.642 --> 00:03:41.730
make it squared and then print that and

00:03:41.730 --> 00:03:46.990
just keep doing it over and
over until i is greater than ten.

00:03:46.990 --> 00:03:48.960
&gt;&gt; But basically.

00:03:48.960 --> 00:03:52.060
So this is kind of
a weird way to do this.

00:03:52.060 --> 00:03:55.170
You might already be
thinking that there's

00:03:55.170 --> 00:03:58.520
a better way of doing this with
what you already know about Python.

00:03:58.520 --> 00:04:02.400
&gt;&gt; Yeah, it took me a little
while to get through that.

00:04:02.400 --> 00:04:03.890
Like I get it, but it took a while.

00:04:03.890 --> 00:04:05.740
&gt;&gt; Right, exactly.
And that's the big problem here.

00:04:05.740 --> 00:04:11.000
So this, to show you that it
does do exactly what Jonah does,

00:04:11.000 --> 00:04:15.640
there's a little website I
found here called Run Basic and

00:04:15.640 --> 00:04:21.350
Run Basic let's you run
code written in Basic.

00:04:21.350 --> 00:04:26.940
So let's paste in our Basic code and
when we hit run we'll see it does,

00:04:26.940 --> 00:04:31.040
it prints out all
the squares from one to ten.

00:04:31.040 --> 00:04:33.020
So you may be looking at this and

00:04:33.020 --> 00:04:36.300
you're wondering what the hell
is this GOTO statement here?

00:04:37.510 --> 00:04:38.240
&gt;&gt; Yeah.

00:04:38.240 --> 00:04:43.520
&gt;&gt; So this used to be a really, really
common thing with programming languages.

00:04:44.850 --> 00:04:50.160
And in a way you're still using it when
you write Python, you just don't see it.

00:04:50.160 --> 00:04:55.040
So what's going on here you might also
see these numbers on the side, and

00:04:55.040 --> 00:04:59.570
basically one thing we can do is we
can assign lines like an identifier

00:05:00.990 --> 00:05:03.440
okay, so in this case we're just
calling each line like 10, 20, 30, 40,

00:05:03.440 --> 00:05:07.350
sort of like the line
numbers on Sublime here, but

00:05:07.350 --> 00:05:10.760
here these have actual
meanings with the computer.

00:05:13.240 --> 00:05:20.010
So like you said, we start out i = 0,
we change it to the value 1.

00:05:20.010 --> 00:05:25.206
We print out 1^2 = 1 * 1 is 1.

00:05:25.206 --> 00:05:31.600
We say if 1 ≥ 10, well it's not, so we
go to the next line that says GOTO 20.

00:05:31.600 --> 00:05:36.426
And so
what GOTO 20 says is go to Line 20 and

00:05:36.426 --> 00:05:42.649
it comes back up here and
now 1 = 1 + 1, well now its 2,

00:05:42.649 --> 00:05:47.872
choose where it equals 2 x 2 = 4,
and we go on.

00:05:47.872 --> 00:05:54.059
Then at some point we'll say when
i is 10 we'll say if 10 ≥ 10,

00:05:54.059 --> 00:05:57.899
well that is true, then we'll go to 60,

00:05:57.899 --> 00:06:02.293
and 60 is this line Program Completed,
okay.

00:06:02.293 --> 00:06:06.928
And then this end statement
is just something for

00:06:06.928 --> 00:06:10.910
Basic, to terminate the code.

00:06:10.910 --> 00:06:12.220
So, what does that almost sound like?

00:06:13.240 --> 00:06:17.788
Given I think about that idea
in terms of like Python?

00:06:17.788 --> 00:06:24.170
It seems like you could do just pretty
similarly using a like a while,

00:06:24.170 --> 00:06:30.010
while statement like a while i is less
than ten and you loop through something.

00:06:30.010 --> 00:06:35.270
&gt;&gt; Right, totally
&gt;&gt; Or like a for statement.

00:06:35.270 --> 00:06:35.870
Could do that too.

00:06:36.920 --> 00:06:40.070
I'm not sure exactly how
that would pan out but

00:06:40.070 --> 00:06:42.200
some sort of some sort
of conditional loop.

00:06:42.200 --> 00:06:45.680
&gt;&gt; Right, so basically right,
you're saying the key word there.

00:06:45.680 --> 00:06:46.880
It's a loop.

00:06:46.880 --> 00:06:47.970
&gt;&gt; Yeah.

00:06:47.970 --> 00:06:51.950
&gt;&gt; We're essentially just almost
like artificially creating our own

00:06:51.950 --> 00:06:53.765
loop by saying go to this line and

00:06:53.765 --> 00:06:55.720
then keep going back to that line
&gt;&gt; Yeah.

00:06:55.720 --> 00:06:57.190
&gt;&gt; until a certain point.

00:06:57.190 --> 00:07:01.390
So in Python and
tons of other programming languages now,

00:07:01.390 --> 00:07:03.910
we have really useful things like for
loops and while loops.

00:07:03.910 --> 00:07:08.250
So this is a code that does
the exact same thing in Python.

00:07:08.250 --> 00:07:12.450
You see it's only three lines now and
this uses a for loop.

00:07:12.450 --> 00:07:17.210
So we're just saying for
i in range(1,10) meaning for

00:07:17.210 --> 00:07:22.480
all the number between one and
ten, print out i and its square.

00:07:22.480 --> 00:07:25.520
And then at the end
print program completed.

00:07:25.520 --> 00:07:27.060
&gt;&gt; That sounds pretty familiar, yeah.

00:07:27.060 --> 00:07:30.050
&gt;&gt; Yeah, so I built this.

00:07:30.050 --> 00:07:35.105
We see we get the same result
we got with Run Basic.

00:07:35.105 --> 00:07:36.270
&gt;&gt; Yeah.

00:07:37.480 --> 00:07:42.416
So in a way I'm like the lowest
level because basically what

00:07:42.416 --> 00:07:46.167
happens when you write
code in the computer,

00:07:46.167 --> 00:07:50.922
the computer doesn't actually
know how to read Python.

00:07:50.922 --> 00:07:55.762
And that might be something that a lot
of beginner students don't necessarily

00:07:55.762 --> 00:07:56.431
realize.

00:07:56.431 --> 00:07:56.953
&gt;&gt; Right.

00:07:56.953 --> 00:08:01.888
&gt;&gt; But what's happening is this
Python code is being translated into

00:08:01.888 --> 00:08:04.805
something that the computer can read.

00:08:04.805 --> 00:08:09.871
And the way that's happening is there
is a goto underneath this for loop.

00:08:09.871 --> 00:08:14.824
And what that goto is saying is
that at the end of one iteration of

00:08:14.824 --> 00:08:18.010
the loop goto the beginning of the loop.

00:08:18.010 --> 00:08:19.880
So it's sort of like it's built in.

00:08:22.010 --> 00:08:27.429
Now, why is this is one referred
to as poorly structured spaghetti

00:08:27.429 --> 00:08:32.480
code versus this one is considered
nice and well structured?

00:08:32.480 --> 00:08:36.534
I don't know if you guys have any
ideas about why that might be.

00:08:36.534 --> 00:08:40.328
&gt;&gt; I mean, I guess it's just
a matter of being easier reading.

00:08:40.328 --> 00:08:45.051
I found that with the Python one I can
read it basically in plain English,

00:08:45.051 --> 00:08:47.545
and I can understand it.

00:08:47.545 --> 00:08:51.510
Whereas the other one is, it took
me a minute to read through it and

00:08:51.510 --> 00:08:54.290
understand it and
follow the lines to the end.

00:08:54.290 --> 00:08:57.380
I have to basically run it in my head,
whereas this,

00:08:57.380 --> 00:08:59.160
I can just see it and understand it.

00:08:59.160 --> 00:09:00.502
&gt;&gt; Right, exactly.

00:09:00.502 --> 00:09:05.586
And that's exactly why we're not
using the goto statement anymore.

00:09:05.586 --> 00:09:06.899
This is a cleaner syntax.

00:09:06.899 --> 00:09:08.490
It's more easy to read.

00:09:10.430 --> 00:09:14.040
I don't see the return
to the loop immediately.

00:09:14.040 --> 00:09:18.373
It also is quite frankly really
nice that we don't have goto any

00:09:18.373 --> 00:09:22.239
more because it's very easy
to abuse that, all right.

00:09:22.239 --> 00:09:26.333
Goto gives you a lot of power,
it enables you to send your code to

00:09:26.333 --> 00:09:31.529
wherever you want within your program
but it's very easy to misuse that power.

00:09:31.529 --> 00:09:36.113
And so basically there's almost
no way to do it now with a modern

00:09:36.113 --> 00:09:41.047
programming language, although
there is a joke module called goto

00:09:41.047 --> 00:09:44.786
that somebody developed
as an April Fool's joke.

00:09:44.786 --> 00:09:47.494
And so this is what it
would look like in Python,

00:09:47.494 --> 00:09:50.283
but we won't waste our
time with that right now.

00:09:50.283 --> 00:09:51.723
&gt;&gt; Okay.

00:09:51.723 --> 00:09:54.364
&gt;&gt; So
you may be wondering if goto is not

00:09:54.364 --> 00:09:59.297
a problem anymore in Computer science
because we have for loops and

00:09:59.297 --> 00:10:04.152
while loops, I can say that it's
just a whole lot better things.

00:10:04.152 --> 00:10:05.685
&gt;&gt; Why have to worry.

00:10:05.685 --> 00:10:07.148
&gt;&gt; Right, exactly, why I have to worry.

00:10:07.148 --> 00:10:09.552
Why do I have to take
care about structure.

00:10:09.552 --> 00:10:13.127
Certain important parts of my code
are structured for me, right.

00:10:13.127 --> 00:10:16.204
Is there even such a thing
as spaghetti code anymore.

00:10:16.204 --> 00:10:16.830
&gt;&gt; Right.

00:10:16.830 --> 00:10:21.625
&gt;&gt; And I guess in the strictest
definition, there isn't.

00:10:21.625 --> 00:10:23.611
&gt;&gt; Okay.

00:10:23.611 --> 00:10:29.183
&gt;&gt; But spaghetti code now may refer
more probably to just bad structure.

00:10:29.183 --> 00:10:32.412
So I have some examples
of some poor structure.

00:10:32.412 --> 00:10:33.955
But before we jump into that,

00:10:33.955 --> 00:10:36.928
we'll actually talk about
the problem more generally.

00:10:36.928 --> 00:10:40.448
So I don't know if you know this, but

00:10:40.448 --> 00:10:44.898
Jonah just opened up a store for
this problem.

00:10:44.898 --> 00:10:49.650
And he ships items to places
all over the world, and

00:10:49.650 --> 00:10:51.930
he has all sorts of different customers.

00:10:51.930 --> 00:10:57.798
And since it's a pretty small store,
they don't offer free shipping yet.

00:10:57.798 --> 00:11:00.591
But if you purchase the item and

00:11:00.591 --> 00:11:06.079
you live in the continental US,
your shipping cost is $5.

00:11:06.079 --> 00:11:11.670
If you live abroad, if you live in any
other country your shipping cost is $10.

00:11:11.670 --> 00:11:14.720
And the same is true for
people in Alaska and

00:11:14.720 --> 00:11:19.911
Hawaii since that's really far away
from the rest of the United States.

00:11:19.911 --> 00:11:24.183
So we want to help Jonah write
a code that tells him what

00:11:24.183 --> 00:11:27.882
the shipping cost will be for
his customers.

00:11:27.882 --> 00:11:33.651
So the way I'm going to start out
doing this is add this drawing here,

00:11:33.651 --> 00:11:34.999
this diagram.

00:11:34.999 --> 00:11:41.818
And this kind of gives an idea
of what we want to do.

00:11:41.818 --> 00:11:47.170
So we want to say if
the country is the US and

00:11:47.170 --> 00:11:51.200
there's a big black box, and you'll
see what's under there in a second.

00:11:51.200 --> 00:11:51.960
We'll say,

00:11:51.960 --> 00:11:56.820
well just to start out we'll say if it's
in the US then the shipping cost is $5.

00:11:56.820 --> 00:11:59.992
And if it's not,
then the shipping cost is $10.

00:11:59.992 --> 00:12:01.966
That looks easy enough to do, right?

00:12:01.966 --> 00:12:02.744
&gt;&gt; Sure.

00:12:02.744 --> 00:12:07.132
&gt;&gt; It's simple if statements
practically written right there for us.

00:12:07.132 --> 00:12:12.204
So let's add in,
make sure that it's on the continental

00:12:12.204 --> 00:12:16.124
US before you set
the shipping cost of $5.

00:12:16.124 --> 00:12:20.580
So, Jonah what do you
think we should do to,

00:12:22.310 --> 00:12:25.690
what do we do if it's
not continental US?

00:12:25.690 --> 00:12:28.505
&gt;&gt; Well it's going to be the same
as if it wasn't in the US, right?

00:12:28.505 --> 00:12:29.005
So-
&gt;&gt; Right.

00:12:29.005 --> 00:12:30.390
&gt;&gt; Cost would mean the shipping cost

00:12:30.390 --> 00:12:31.663
is $10?
&gt;&gt; Right.

00:12:31.663 --> 00:12:34.801
So I mean it seems pretty simple, right?

00:12:34.801 --> 00:12:36.630
And you might be tempted to say well

00:12:36.630 --> 00:12:41.250
we've got shipping cost is $10
up here and well, that just

00:12:41.250 --> 00:12:44.830
wants to go to the same place, so let's
just have it point right back there.

00:12:44.830 --> 00:12:46.090
&gt;&gt; Yeah, that makes sense.

00:12:46.090 --> 00:12:48.000
&gt;&gt; Seems to make sense, this diagram.

00:12:48.000 --> 00:12:49.815
I can read this if it makes
a lot of sense to me.

00:12:49.815 --> 00:12:50.592
&gt;&gt; Right.

00:12:50.592 --> 00:12:54.913
&gt;&gt; What we'll actually find is
that implementing it in this way,

00:12:54.913 --> 00:12:59.152
where you have essentially two branches,
this falls here and

00:12:59.152 --> 00:13:02.590
this falls up here,
pointing to the same place?

00:13:02.590 --> 00:13:03.720
&gt;&gt; Right.

00:13:03.720 --> 00:13:05.310
&gt;&gt; That's going to cause
a little bit of a problem.

00:13:05.310 --> 00:13:07.960
And we'll exactly what's going on there.

00:13:07.960 --> 00:13:10.830
So, here's some code I wrote to do this.

00:13:10.830 --> 00:13:12.290
There's actually two examples.

00:13:13.340 --> 00:13:19.770
So this is define shipping cost it
takes in a country and the state.

00:13:21.400 --> 00:13:26.080
Or just to make things easy,
we're saying that if a country is

00:13:26.080 --> 00:13:30.040
anything other than the US,
then its state is none.

00:13:31.780 --> 00:13:37.060
So this if statement right
here is a little convoluted.

00:13:39.550 --> 00:13:43.938
You kind of, do you have an idea of
maybe what this is trying to say?

00:13:43.938 --> 00:13:49.740
&gt;&gt; Yeah, I guess,
if the country's USA and

00:13:49.740 --> 00:13:55.610
the state is not Hawaii and not Alaska?

00:13:59.260 --> 00:14:07.800
So any state that's not Hawaii or
Alaska then less the cost equals 5?

00:14:07.800 --> 00:14:08.740
&gt;&gt; Right, exactly.

00:14:08.740 --> 00:14:13.860
So this very long kind of
difficult to read statement

00:14:13.860 --> 00:14:16.790
basically says it's the Continental US.

00:14:16.790 --> 00:14:17.480
&gt;&gt; Yes.

00:14:17.480 --> 00:14:20.305
&gt;&gt; Then we'll set
the cost equal to 5 and

00:14:20.305 --> 00:14:23.670
otherwise we'll set
the cost equal to 10.

00:14:23.670 --> 00:14:24.320
&gt;&gt; Okay.

00:14:24.320 --> 00:14:25.930
&gt;&gt; It seems to make sense, right?

00:14:25.930 --> 00:14:29.949
&gt;&gt; Yeah.
&gt;&gt; Took a little effort to bring it back

00:14:29.949 --> 00:14:31.010
for sure.

00:14:31.010 --> 00:14:35.250
If we run it,I got some test cases
here so I'll see what it is for

00:14:35.250 --> 00:14:39.890
California Alaska, and Germany,
and we'll get 5, 10, 10.

00:14:39.890 --> 00:14:42.454
So exactly what we expected,
the code works.

00:14:42.454 --> 00:14:45.688
&gt;&gt; It's cool.
But maybe we could do a little better,

00:14:45.688 --> 00:14:48.052
make it a little easier to read.

00:14:48.052 --> 00:14:48.876
&gt;&gt; Sure.

00:14:48.876 --> 00:14:55.813
So going back to our diagram, generally
you're going to get into issues if

00:14:55.813 --> 00:15:00.830
you have branches pointing
to kind of the same spot.

00:15:00.830 --> 00:15:04.020
And that's exactly what we saw here.

00:15:04.020 --> 00:15:07.747
And you can think of it in this way,
right.

00:15:07.747 --> 00:15:10.196
So we basically have
three different cases.

00:15:10.196 --> 00:15:11.419
&gt;&gt; Right.
&gt;&gt; Right,

00:15:11.419 --> 00:15:15.933
we have the case where
it's the continental US.

00:15:15.933 --> 00:15:19.370
We have the case where it's in the US,
but it's Alaska.

00:15:19.370 --> 00:15:22.750
And we have the case where
it's any other country.

00:15:22.750 --> 00:15:26.255
But we only have two end results.

00:15:26.255 --> 00:15:29.471
So these don't exactly match up,
that makes the code harder to read.

00:15:29.471 --> 00:15:30.736
&gt;&gt; Interesting.

00:15:30.736 --> 00:15:34.638
&gt;&gt; So a better way to do
this might actually be,

00:15:34.638 --> 00:15:38.121
we'll straighten up the branch here.

00:15:38.121 --> 00:15:39.815
Move our, I'll stay on with it.

00:15:39.815 --> 00:15:48.040
And we'll make a third box and
put it here.

00:15:48.040 --> 00:15:52.603
So you can see the sort of how
parallel the diagram looks now, right.

00:15:52.603 --> 00:15:56.481
The diagram itself is
a little easier to read.

00:15:56.481 --> 00:16:02.790
It's easier to digest for people who
maybe aren't familiar with the problem.

00:16:02.790 --> 00:16:06.110
They can look at this and
follow the diagram.

00:16:06.110 --> 00:16:08.920
And you'll see that they'll be
able to follow the code better.

00:16:08.920 --> 00:16:14.140
But it is, again, important to think
about how you're structuring things.

00:16:14.140 --> 00:16:18.620
So there's actually another bad example
of doing exactly this that I have here.

00:16:21.410 --> 00:16:22.920
Well it's not exactly a bad example,

00:16:22.920 --> 00:16:26.150
it's better than the last one but
we could do even better than this.

00:16:26.150 --> 00:16:31.160
So this one we're saying, so
if the country is the US.

00:16:31.160 --> 00:16:33.870
And then we check if the state
is not Hawaii and not Alaska.

00:16:35.180 --> 00:16:36.175
The cost is five.

00:16:36.175 --> 00:16:37.210
Right.

00:16:37.210 --> 00:16:39.190
&gt;&gt; Otherwise the cost is ten.

00:16:39.190 --> 00:16:47.580
So what you think is kind of confusing
about this one on first looking at it?

00:16:47.580 --> 00:16:52.488
&gt;&gt; I guess I just don't
really know where the else.

00:16:52.488 --> 00:16:57.150
Well, I guess I know
where else comes in.

00:16:57.150 --> 00:17:02.912
This gets a little bit
complex near like line 19,

00:17:02.912 --> 00:17:07.736
like if stay is not Hawaii and
not Alaska and

00:17:07.736 --> 00:17:14.900
it's by within the else's like
if it is Hawaii or Alaska?

00:17:14.900 --> 00:17:15.684
&gt;&gt; Right.

00:17:15.684 --> 00:17:20.348
&gt;&gt; So I guess it's just
a lot of counter positive or

00:17:20.348 --> 00:17:25.609
something, very strange
conditional statements.

00:17:25.609 --> 00:17:29.956
I mean, I get it because you
explained everything to me.

00:17:29.956 --> 00:17:34.772
But on first glance, on first glance
it is a little bit harder, yeah and

00:17:34.772 --> 00:17:38.948
probably the hardest thing about
is that you have these like,

00:17:38.948 --> 00:17:42.470
this if statement,
within an if statement.

00:17:42.470 --> 00:17:44.353
&gt;&gt; Yeah, not only that but

00:17:44.353 --> 00:17:49.450
both it statements contain L
clauses that are identical right?

00:17:49.450 --> 00:17:53.750
But also you have first of all two
else clauses that are identical right.

00:17:53.750 --> 00:17:57.920
But serving different purposes,
and they're also incredibly vague.

00:17:57.920 --> 00:17:58.680
Right.

00:17:58.680 --> 00:17:59.567
&gt;&gt; Right.
&gt;&gt; You know,

00:17:59.567 --> 00:18:03.284
if you could spend some time with this
code you could figure it out and,

00:18:03.284 --> 00:18:06.938
granted this is a very small case,
so it might only take you a minute,

00:18:06.938 --> 00:18:09.335
two minutes to read and
digest if [CROSSTALK].

00:18:09.335 --> 00:18:11.646
You can think of this on
a grander scale then.

00:18:11.646 --> 00:18:14.754
&gt;&gt; Yeah, if we had like
a huge shipping network, and

00:18:14.754 --> 00:18:17.126
had to calculate like postage taxes.

00:18:17.126 --> 00:18:22.195
&gt;&gt; Exactly, it would be terrible.

00:18:22.195 --> 00:18:22.860
[INAUDIBLE].

00:18:22.860 --> 00:18:27.289
So this is also well it
satisfies our nice new diagram.

00:18:27.289 --> 00:18:32.284
It's not the best and if I run it,
we see it works again like you

00:18:32.284 --> 00:18:36.140
said as your company grows
as your store grows.

00:18:36.140 --> 00:18:39.710
You're starting to you know maybe
decrease shipping costs and maybe

00:18:39.710 --> 00:18:45.020
they're different in different countries
this can get out of hand pretty quickly.

00:18:45.020 --> 00:18:47.220
&gt;&gt; Right.
&gt;&gt; So there's a better way.

00:18:47.220 --> 00:18:50.260
And basically,
this is what I came up with.

00:18:50.260 --> 00:18:52.105
There's probably a lot
of different approaches.

00:18:52.105 --> 00:18:54.100
&gt;&gt; Mm-hm.

00:18:54.100 --> 00:18:58.180
&gt;&gt; But looking at this, do you think you
can kind of explain to the students what

00:18:58.180 --> 00:18:59.360
you think is going on here?

00:18:59.360 --> 00:19:01.620
&gt;&gt; Yeah, I mean,
it looks pretty straightforward.

00:19:01.620 --> 00:19:04.510
You go through a bunch
of these if statements.

00:19:04.510 --> 00:19:09.560
So, if the country is not USA,
then it's going to 10, and then check if

00:19:09.560 --> 00:19:14.990
it's Hawaii or Alaska, because if
the states are Hawaii or Alaska,

00:19:14.990 --> 00:19:17.760
then it's going to be 10, and otherwise
&gt;&gt; It will be five.

00:19:17.760 --> 00:19:21.746
So basically you're kind of narrowing
them down from like the largest down to

00:19:21.746 --> 00:19:23.110
like the smallest.

00:19:23.110 --> 00:19:27.110
&gt;&gt; Right exactly and
that's that's the way that

00:19:28.170 --> 00:19:32.010
it seems almost counter
intuitive right so

00:19:32.010 --> 00:19:34.970
I think a lot of people when they
first think about this problem.

00:19:34.970 --> 00:19:39.470
They want to make this first if
statement, if equal to USA right?

00:19:39.470 --> 00:19:43.496
But the most you kind of
want to start most generally,

00:19:43.496 --> 00:19:45.876
like build down from there, so

00:19:45.876 --> 00:19:51.916
like most general shipping costs applies
to those who don't live in the U.S.

00:19:51.916 --> 00:19:56.051
Right that's like the biggest
group of cases right.

00:19:56.051 --> 00:19:58.470
So, essentially right.

00:19:58.470 --> 00:20:02.190
You're like breaking down
the cases into smaller and

00:20:02.190 --> 00:20:04.950
smaller bits as you go along.

00:20:04.950 --> 00:20:06.630
And you can see in
the structure of the code,

00:20:06.630 --> 00:20:10.530
it looks actually quite similar
to our diagram here, right?

00:20:10.530 --> 00:20:14.600
So you have like very
parallel statements here.

00:20:15.680 --> 00:20:18.960
You don't have if statements
nested inside each other.

00:20:18.960 --> 00:20:22.820
You don't have these confusing,
vague else statements.

00:20:22.820 --> 00:20:25.640
You just have this one at the end,
here, which,

00:20:26.650 --> 00:20:32.130
maybe there's something we can do
to make this a little more clear.

00:20:32.130 --> 00:20:34.830
Maybe we can just put in a comment,
or maybe

00:20:34.830 --> 00:20:39.450
we can write it a little differently but
this is a much better structure.

00:20:39.450 --> 00:20:40.457
We can run it and

00:20:40.457 --> 00:20:44.430
see does the exact same thing as
the last two examples did too.

00:20:48.300 --> 00:20:50.680
Yeah.
There's one other type of

00:20:50.680 --> 00:20:53.780
spaghetti code that also
comes up a lot too.

00:20:53.780 --> 00:20:59.577
And this one's been even more common in
recent years than the ones we've been

00:20:59.577 --> 00:21:05.286
looking at here and that's as it relates
to object oriented programming and

00:21:05.286 --> 00:21:10.836
you know if you've gone through
stageyou've dealt with some OP before.

00:21:10.836 --> 00:21:16.291
It can get a little messy if you're
not there if you're not thinking

00:21:16.291 --> 00:21:22.913
about what you're doing as you're going
through if you're not planning ahead.

00:21:22.913 --> 00:21:26.892
So for this problem I'll
be the subject of this.

00:21:26.892 --> 00:21:28.040
&gt;&gt; Okay.

00:21:28.040 --> 00:21:34.960
&gt;&gt; And what's going on here is
I have a car and I drive a car.

00:21:34.960 --> 00:21:36.240
My car is driven by me.

00:21:36.240 --> 00:21:41.130
I want to make certain code that
shows that relationship, right.

00:21:41.130 --> 00:21:46.570
So basically I have two classes here.

00:21:46.570 --> 00:21:49.460
One for cars and one for drivers.

00:21:50.710 --> 00:21:54.570
And in order to initialize a car you

00:21:54.570 --> 00:22:00.000
need to know the model of the car,
you need to know who the driver is.

00:22:00.000 --> 00:22:02.630
We just initialize like we always do.

00:22:02.630 --> 00:22:04.795
Then we add a little function here.

00:22:04.795 --> 00:22:10.000
That if you call this function,
then what it will do

00:22:10.000 --> 00:22:15.140
is it will return you the name
of the driver of the car.

00:22:15.140 --> 00:22:15.955
&gt;&gt; Okay, that makes sense.

00:22:15.955 --> 00:22:18.900
&gt;&gt; So in parallel we'll have a class for
the drivers as well.

00:22:20.310 --> 00:22:24.800
Drivers all have names and they all
have cars otherwise they're not drivers.

00:22:26.310 --> 00:22:30.964
Initialize like normally and then we
have a function called Drives that tells

00:22:30.964 --> 00:22:32.980
you what car that driver drives.

00:22:34.130 --> 00:22:39.570
And so down here I've got
some Initializing cases, and

00:22:39.570 --> 00:22:41.210
my car is a Kia Optima.

00:22:42.340 --> 00:22:43.510
&gt;&gt; Okay.

00:22:43.510 --> 00:22:46.620
&gt;&gt; So initially,
there is no driver, right?

00:22:46.620 --> 00:22:50.290
A car is built, it doesn't have a driver
until someone purchases the car.

00:22:50.290 --> 00:22:50.910
&gt;&gt; Okay.

00:22:50.910 --> 00:22:53.250
&gt;&gt; So
that's how we're going to initialize it.

00:22:54.420 --> 00:23:00.320
Part of that is because if we were to
try to put something in here well there

00:23:00.320 --> 00:23:06.010
don't exist any instances of the class
driver yet so we have to just say that.

00:23:06.010 --> 00:23:09.920
But we can think of it as like
when a car is manufactured and

00:23:09.920 --> 00:23:11.750
it doesn't have a driver yet.

00:23:11.750 --> 00:23:13.630
Then we have a variable for me.

00:23:14.700 --> 00:23:15.850
I have a name, Anthony.

00:23:15.850 --> 00:23:19.690
I just bought the Optima.

00:23:19.690 --> 00:23:21.280
So now I am tied.

00:23:21.280 --> 00:23:25.020
The car is listed on my class as mine.

00:23:25.020 --> 00:23:31.139
And now we'll just update the driver
attribute of the Optima to be me.

00:23:33.480 --> 00:23:34.130
And then at the end,

00:23:34.130 --> 00:23:36.950
we'll have some print statements
that use the functions we have.

00:23:36.950 --> 00:23:42.335
So if this is working as we want it to,
we want to say Anthony drives an Optima.

00:23:42.335 --> 00:23:42.950
&gt;&gt; Mm-hm.

00:23:42.950 --> 00:23:45.670
&gt;&gt; And the Optima is driven by Anthony.

00:23:47.330 --> 00:23:50.620
&gt;&gt; Yeah, so we'll build it and
that's exactly what we get.

00:23:50.620 --> 00:23:54.580
So I have another little graph here.

00:23:54.580 --> 00:23:58.970
So this is essentially
what is going on here.

00:23:58.970 --> 00:24:02.348
&gt;&gt; Right.
&gt;&gt; You have driver drives is dependent

00:24:02.348 --> 00:24:04.353
upon car, and car got.

00:24:04.353 --> 00:24:08.334
Is driven by, is dependent upon driver.

00:24:08.334 --> 00:24:15.220
And in a lot of ways when you look at
this code it seems to make sense, right?

00:24:15.220 --> 00:24:17.020
&gt;&gt; Yeah.
&gt;&gt; Cars have drivers,

00:24:17.020 --> 00:24:18.600
and drivers have cars.

00:24:18.600 --> 00:24:21.870
It seems to make sense that we
build this relationship, right?

00:24:21.870 --> 00:24:22.590
&gt;&gt; Right.

00:24:22.590 --> 00:24:25.340
Just thought we had a question
real quick to make sure that

00:24:26.490 --> 00:24:30.170
we can see the code because it
was in the Google logo before.

00:24:31.580 --> 00:24:35.560
Maybe make it a little bit bigger?

00:24:35.560 --> 00:24:36.140
&gt;&gt; That works.

00:24:36.140 --> 00:24:38.260
&gt;&gt; Maybe I can get out of full screen.

00:24:38.260 --> 00:24:40.390
Is that a little bit better?

00:24:41.770 --> 00:24:43.480
Sorry about that.

00:24:43.480 --> 00:24:47.660
All right, so then only love like
this seems to make waffles and

00:24:47.660 --> 00:24:49.410
lot of ways it does.

00:24:50.680 --> 00:24:55.420
Generally, you want to avoid this
type of circular dependency and

00:24:55.420 --> 00:25:00.357
that's what that's what we
call this circular dependency.

00:25:00.357 --> 00:25:03.660
Can you think of any reason
why this might not be a great,

00:25:05.210 --> 00:25:08.740
maybe if you decide to
change one of them.

00:25:08.740 --> 00:25:14.780
If you want to get a new car you
would have to create a new object

00:25:15.830 --> 00:25:19.690
but then you would also
have to change the driver.

00:25:21.220 --> 00:25:24.380
Yeah, totally confusing about what would
happen if you wanted to change one of

00:25:24.380 --> 00:25:25.400
those objects.

00:25:25.400 --> 00:25:29.790
&gt;&gt; Exactly, so there's two things
that people always say about circular

00:25:29.790 --> 00:25:33.780
dependencies, and
that is that they're hard to test.

00:25:33.780 --> 00:25:38.990
Because in order for
me to test anything about the car,

00:25:38.990 --> 00:25:42.310
it's tied very closely to driver,
so I can't test.

00:25:42.310 --> 00:25:44.140
These classes independently
of each other.

00:25:44.140 --> 00:25:45.310
&gt;&gt; Got you.

00:25:45.310 --> 00:25:47.260
&gt;&gt; It's also hard to maintain,
all right?

00:25:47.260 --> 00:25:50.150
That kind of goes into what you said.

00:25:50.150 --> 00:25:53.380
If I want to change even
something about a car,

00:25:53.380 --> 00:25:57.630
it will probably involve
a change driver also.

00:25:57.630 --> 00:26:03.060
Now this can get really bad when you're
working on a very large project,

00:26:03.060 --> 00:26:05.580
because large projects often involve

00:26:05.580 --> 00:26:08.690
multiple different files
containing many different classes.

00:26:09.900 --> 00:26:15.040
And if you accidentally build
in a circular dependency there,

00:26:15.040 --> 00:26:20.220
then you could be having to do lots of
changes in lots of different places.

00:26:20.220 --> 00:26:21.570
&gt;&gt; Okay.
&gt;&gt; And you're just going to make a huge

00:26:21.570 --> 00:26:22.670
headache for yourself.

00:26:22.670 --> 00:26:26.220
&gt;&gt; So does that mean you can't make
objects that contain other objects?

00:26:27.450 --> 00:26:28.630
No, not at all.

00:26:28.630 --> 00:26:35.330
In fact, often times it make sense, and
in this case it sort of makes sense.

00:26:35.330 --> 00:26:40.810
What you want to do is focus, instead
try to avoid circular dependencies and

00:26:40.810 --> 00:26:42.310
focus on one way dependencies.

00:26:44.810 --> 00:26:50.290
So I have a little bit of a read
back there, this initial idea,

00:26:50.290 --> 00:26:54.450
and in this case, you'll see there's
no is driven by function here.

00:26:54.450 --> 00:27:00.960
We just drives function, and
I could do this any way I want.

00:27:00.960 --> 00:27:04.770
Well, I'll talk through code first,
and then we can kind of analyze it,

00:27:04.770 --> 00:27:08.380
but We'll have an instance,
the class car,

00:27:08.380 --> 00:27:11.250
all it takes in now is
the model of the car.

00:27:11.250 --> 00:27:15.250
Whereas, the driver still
takes in a name and a car and

00:27:15.250 --> 00:27:21.000
it still contains this drives function
that tells you what car the driver got.

00:27:21.000 --> 00:27:21.680
&gt;&gt; Right.
&gt;&gt; So now,

00:27:21.680 --> 00:27:26.140
you can initialize optima with just
&gt;&gt; The model of that car

00:27:26.140 --> 00:27:30.080
which is a lot simpler than the last
time we tried to initialize it.

00:27:30.080 --> 00:27:34.210
And now we can initialize me with
my name and the car that I drive.

00:27:34.210 --> 00:27:39.650
So when I run that I see
Anthony drives an Optima.

00:27:39.650 --> 00:27:40.270
&gt;&gt; Nice.
&gt;&gt; And you may

00:27:40.270 --> 00:27:43.910
be wondering why we don't have
the isDrivenBy function anymore.

00:27:43.910 --> 00:27:47.610
And that's true we have
lost that capability.

00:27:47.610 --> 00:27:48.360
&gt;&gt; Right.

00:27:48.360 --> 00:27:50.960
&gt;&gt; But ultimately, this is easier
to maintain, easier to test,

00:27:50.960 --> 00:27:52.020
easier to work with.

00:27:52.020 --> 00:27:54.980
&gt;&gt; Okay.
&gt;&gt; So that trade off is worthwhile

00:27:54.980 --> 00:27:55.819
for us.

00:27:55.819 --> 00:27:58.423
&gt;&gt; Got you.
[BLANK_AUDIO]

00:27:58.423 --> 00:28:01.805
&gt;&gt; So
what do you think is kind of better or

00:28:01.805 --> 00:28:04.780
even like worse about this code.

00:28:06.710 --> 00:28:08.230
Your initial observations.

00:28:08.230 --> 00:28:15.950
&gt;&gt; It seems a lot sleeker like car just
has one variable associated with it.

00:28:17.210 --> 00:28:22.570
That's the model driver
as you know one method,

00:28:22.570 --> 00:28:27.540
and then two variables
associated with it so

00:28:27.540 --> 00:28:31.710
in terms of like the object
itself it's a lot simpler.

00:28:31.710 --> 00:28:33.860
It's a lot easier to understand.

00:28:33.860 --> 00:28:36.520
It also seems like you can you'll

00:28:36.520 --> 00:28:39.480
be able to like one driver
will multiple cars.

00:28:39.480 --> 00:28:39.980
&gt;&gt; Right.

00:28:41.380 --> 00:28:43.890
Which I guess you could
have done before, but

00:28:43.890 --> 00:28:47.890
I feel like it would have gotten
pretty complex pretty quickly.

00:28:47.890 --> 00:28:51.850
&gt;&gt; Right.
&gt;&gt; It might take some work to give this.

00:28:51.850 --> 00:28:54.350
I don't think it has the ability yet
to take multiple cars.

00:28:54.350 --> 00:28:56.320
I'm not sure exactly.

00:28:56.320 --> 00:28:59.920
But definitely it's easier
at least to give this

00:29:01.950 --> 00:29:04.510
code the ability to
take in multiple cars.

00:29:06.030 --> 00:29:10.570
You'd have to work this out so car
could be a list which might screw with

00:29:10.570 --> 00:29:15.287
the function, but
still relatively small change compared

00:29:15.287 --> 00:29:19.380
to what we had to do in the last one.

00:29:19.380 --> 00:29:22.476
And you know it's dependency here.

00:29:22.476 --> 00:29:29.530
We have driver depending on car in this
case, I could have very easily done it

00:29:29.530 --> 00:29:33.920
the other way around and that's the kind
of thing about circular dependencies.

00:29:33.920 --> 00:29:37.870
It's usually you have a choice of which
direction you want the dependency to go.

00:29:39.050 --> 00:29:41.280
In this case,
I chose this because I felt that

00:29:42.920 --> 00:29:46.530
drivers are only drivers with a car.

00:29:46.530 --> 00:29:52.060
If you have a driver without a car
then that person [INAUDIBLE].

00:29:52.060 --> 00:29:56.160
But a car can exist without a driver.

00:29:56.160 --> 00:29:56.980
&gt;&gt; That's true.

00:29:56.980 --> 00:29:58.400
&gt;&gt; So that's always possible.

00:29:58.400 --> 00:30:00.989
I'm sure there's an argument for
someone, self driving cars.

00:30:03.210 --> 00:30:04.760
I'm sure there's an argument for

00:30:04.760 --> 00:30:08.340
the other way around, but
cars need to exist with drivers.

00:30:10.280 --> 00:30:14.630
But basically, you can build into the
dependency the way that makes the most

00:30:14.630 --> 00:30:19.080
sense for your problem, the way
that makes the most sense to you.

00:30:19.080 --> 00:30:20.770
&gt;&gt; Yeah.
&gt;&gt; Just try really hard to

00:30:20.770 --> 00:30:22.260
avoid those circular dependencies.

00:30:22.260 --> 00:30:26.680
And that's where kind of charting out
and thinking about your problem, and

00:30:26.680 --> 00:30:30.970
saying, what is it I'm
trying to figure out?

00:30:32.140 --> 00:30:37.800
In a way, the question is driven
by drives are the same questions.

00:30:37.800 --> 00:30:41.190
It's just reversed,
so let's cut out some

00:30:42.380 --> 00:30:45.650
of the necessary verbage and
just simplify it.

00:30:51.560 --> 00:30:53.520
So yeah, those are the examples I had.

00:30:53.520 --> 00:31:00.650
Do you have any other thoughts on code
structure and the importance of it?

00:31:00.650 --> 00:31:01.540
&gt;&gt; Not really.

00:31:01.540 --> 00:31:04.250
It seems like Most of it.

00:31:04.250 --> 00:31:09.910
If's cool how it's sort of
like a creative aspect to it,

00:31:09.910 --> 00:31:13.730
where we have to think about and
not just in terms of like their coding,

00:31:13.730 --> 00:31:16.420
the way they work, but
the way they work in real life.

00:31:16.420 --> 00:31:19.140
&gt;&gt; Right.
&gt;&gt; And I think that objects are kind of

00:31:19.140 --> 00:31:21.630
a cool way of thinking
about things in real life.

00:31:21.630 --> 00:31:24.030
It's like When you do decide to

00:31:25.220 --> 00:31:29.400
try to like make a database of all
the trees in the world or something.

00:31:29.400 --> 00:31:33.954
You want to think about things
in terms of how to organize

00:31:33.954 --> 00:31:38.222
in the real world [CROSSTALK]
translates into code.

00:31:38.222 --> 00:31:39.250
&gt;&gt; For sure.

00:31:39.250 --> 00:31:42.920
That's one of the things that I think
a lot of people including myself really

00:31:42.920 --> 00:31:49.240
love about coding is that there's
a huge creativity aspect to it.

00:31:49.240 --> 00:31:53.690
And it's almost like
an intersection between an art and

00:31:53.690 --> 00:31:57.890
a science, depending on what stage
you're at and what you're doing, right?

00:31:59.360 --> 00:32:02.920
In a way the initial things
we were talking about with

00:32:02.920 --> 00:32:05.460
goto being the basis of the for
loop, right?

00:32:05.460 --> 00:32:09.360
That's sort of the science
of how your for loop works.

00:32:09.360 --> 00:32:12.780
But then when we go into why is a for

00:32:12.780 --> 00:32:15.210
loop preferred to a goto statement,
that's more art.

00:32:17.050 --> 00:32:20.860
effectively they do the same thing, they
might even do the same thing in the same

00:32:20.860 --> 00:32:24.680
amount of time, but
we like before loop, we call it.

00:32:24.680 --> 00:32:28.950
Often like the word computer
scientist love to use is elegant.

00:32:28.950 --> 00:32:32.100
And it's elegant code, it's simple,

00:32:32.100 --> 00:32:36.386
it's concise and
that's sort of like one of the.

00:32:36.386 --> 00:32:39.710
Beauty parts of it.

00:32:39.710 --> 00:32:42.310
It's like trying to
determine that structure and

00:32:42.310 --> 00:32:45.100
trying to make it as
elegant as possible.

00:32:46.810 --> 00:32:52.410
And one piece of advice that I heard,
somebody wrote this online,

00:32:52.410 --> 00:32:57.430
that as I was researching this, is
never adapt a language to your design.

00:32:57.430 --> 00:32:58.770
Adapt your design to fit a language.

00:33:01.280 --> 00:33:02.950
I think that was pretty good advice.

00:33:04.080 --> 00:33:09.200
You know, sometimes you might find, and
this happens a lot when I'm programming,

00:33:09.200 --> 00:33:14.830
is that you'll start on some code and
it's structured a certain way and then.

00:33:14.830 --> 00:33:17.920
Some point in you're like
this isn't really that good.

00:33:17.920 --> 00:33:21.300
Maybe I should have done
things differently.

00:33:21.300 --> 00:33:24.570
Screw it I'm already half way
in I'm just going to keep going.

00:33:24.570 --> 00:33:28.560
There's a real importance in
becoming a programmer where it's

00:33:30.030 --> 00:33:33.475
I make everybody think about things.

00:33:33.475 --> 00:33:38.650
Sometimes you might
have great in life and

00:33:38.650 --> 00:33:44.630
have it like the code and realize he
said it structured a little differently.

00:33:44.630 --> 00:33:49.880
And ultimately is as we've seen as we
have discussed in the last example.

00:33:49.880 --> 00:33:53.970
The earlier you catch bad structure and
the earlier you go to correct it,

00:33:53.970 --> 00:33:58.430
the easier it will be to maintain,
and the easier it will be to test,

00:33:58.430 --> 00:34:02.060
and it'll make your life a lot
easier to go that route.

00:34:03.260 --> 00:34:07.320
That's sort of the thing that
planning helps with that.

00:34:07.320 --> 00:34:09.820
Another thing that helps with that is
just being stuck in that situation.

00:34:09.820 --> 00:34:14.000
And just saying, it's one of those
things that Anthony talked about.

00:34:14.000 --> 00:34:15.630
&gt;&gt; A new experience,
struggle through it.

00:34:15.630 --> 00:34:17.850
&gt;&gt; Yeah.
&gt;&gt; All right.

00:34:17.850 --> 00:34:19.770
&gt;&gt; All right, cool.

00:34:19.770 --> 00:34:21.870
Well, thanks for joining us.

00:34:21.870 --> 00:34:23.790
Yep.
We hope to see you next time.

00:34:23.790 --> 00:34:24.350
&gt;&gt; Yeah, definitely.

00:34:24.350 --> 00:34:25.120
&gt;&gt; All right.

00:34:25.120 --> 00:34:25.790
&gt;&gt; Have a good day everyone.

00:34:25.790 --> 00:34:30.730
&gt;&gt; Bye, guys.
[BLANK_AUDIO]

