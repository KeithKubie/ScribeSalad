WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:03.290
In this video, we'll take a look at the website for Backbones JS.

00:00:03.290 --> 00:00:07.260
Now everything I do in this lesson you can do on your own.

00:00:07.260 --> 00:00:11.080
So if you're feeling especially brave, pause the video right now and

00:00:11.080 --> 00:00:13.020
explore the site on your own.

00:00:13.020 --> 00:00:16.690
And remember that we're just looking for a high level picture of backbone.

00:00:16.690 --> 00:00:18.970
We're not trying to get into the nitty gritty.

00:00:18.970 --> 00:00:23.728
This page here, Backbonejs.org is actually the documentation for backbone.

00:00:23.728 --> 00:00:27.430
Now we're going to look through this page and get an idea of what exactly

00:00:27.430 --> 00:00:31.570
backbone is, and roughly how we can use it from a high level perspective.

00:00:31.570 --> 00:00:36.420
The first paragraph bolds a couple words, models, collections, and views.

00:00:36.420 --> 00:00:37.730
So we can infer that,

00:00:37.730 --> 00:00:43.560
the models are our data and collections are collections of models.

00:00:43.560 --> 00:00:47.050
In our original model view octopus paradigm.

00:00:47.050 --> 00:00:48.790
We just had normal arrays.

00:00:48.790 --> 00:00:53.770
In our model view, view model paradigm with knockout, we had observable arrays.

00:00:53.770 --> 00:00:56.270
In Backbone, they're called collections.

00:00:56.270 --> 00:00:59.580
And we also have views with declarative event handling.

00:00:59.580 --> 00:01:02.130
We'll get an idea of what that is, in just a moment.

00:01:02.130 --> 00:01:05.459
Let's scroll down a little bit and just skim through the introduction section.

00:01:05.459 --> 00:01:08.380
The first paragraph says when working on a web application that involves a lot

00:01:08.380 --> 00:01:11.850
of JavaScript, one of the first things you can do is to stop tying your

00:01:11.850 --> 00:01:12.820
data to the DOM.

00:01:12.820 --> 00:01:15.780
It's all too easy to create JavaScript applications that end up as

00:01:15.780 --> 00:01:20.250
tangled piles of jQuery selectors and callbacks, all trying frantically to keep

00:01:20.250 --> 00:01:25.740
data in sync between the HTML, UI, your JavaScript logic, and in some cases,

00:01:25.740 --> 00:01:27.880
not our case, the database on the server.

00:01:27.880 --> 00:01:29.770
So this sounds very familiar.

00:01:29.770 --> 00:01:31.700
This is what lesson one was about.

00:01:31.700 --> 00:01:33.500
Writing a spaghetti code application and

00:01:33.500 --> 00:01:36.210
figuring out, you know maybe it's not good enough.

00:01:36.210 --> 00:01:40.720
The second paragraph says, with backbone you represent your data as models.

00:01:40.720 --> 00:01:42.990
Which can be created, validated, destroyed, and

00:01:42.990 --> 00:01:45.120
saved to the server, if you have a server.

00:01:45.120 --> 00:01:46.390
Now here's the fun part.

00:01:46.390 --> 00:01:50.550
Whenever a UI action causes an attribute of a model to change,

00:01:50.550 --> 00:01:53.520
the model triggers a change event.

00:01:53.520 --> 00:01:55.990
All of the views that display the model state,

00:01:55.990 --> 00:02:00.335
can be notified of that change, so they're able to respond accordingly,

00:02:00.335 --> 00:02:02.890
re-rendering themselves to this new information.

00:02:02.890 --> 00:02:04.720
This also sounds familiar.

00:02:04.720 --> 00:02:07.960
This sounds exactly like what Knock Out was doing.

00:02:07.960 --> 00:02:11.130
Keeping track of the way things are connected, so that way it can

00:02:11.130 --> 00:02:16.030
selectively re-render certain parts of the view when the model changes.

00:02:16.030 --> 00:02:19.170
In a finished Backbone app you don't have to write the glue code or

00:02:19.170 --> 00:02:23.070
the octopus code or at least a lot of it, that looks into the DOM to

00:02:23.070 --> 00:02:28.000
find the element with a specific ID and update the HTML manually.

00:02:28.000 --> 00:02:32.680
Instead, when a model changes, the views update themselves on their own.

00:02:32.680 --> 00:02:34.080
Now, I'm going to stop here.

00:02:34.080 --> 00:02:38.500
At a very high level, it's basically the exact same thing as we've done before,

00:02:38.500 --> 00:02:41.570
keeping our concerns generally separated from each other.

00:02:41.570 --> 00:02:42.680
Now, if you look around on the web,

00:02:42.680 --> 00:02:46.780
you'll find all kinds of shaky statements about what Backbone is.

00:02:46.780 --> 00:02:50.000
It's not Modelview Controller, MVC.

00:02:50.000 --> 00:02:54.600
If we look on Wikipedia, we'll find that Backbone.js it says, is based on

00:02:54.600 --> 00:02:59.490
the model-view-presenter and the Actor model application design paradigm.

00:02:59.490 --> 00:03:01.390
So we're not going to talk about this second part.

00:03:01.390 --> 00:03:03.960
But if you read the rest of the Wikipedia article,

00:03:03.960 --> 00:03:06.960
at least as of now when I'm recording this lesson.

00:03:06.960 --> 00:03:08.940
It doesn't mention MVP ever again.

00:03:08.940 --> 00:03:13.250
Now, this guy named Addy Osmani, who's a developer who really understands this

00:03:13.250 --> 00:03:17.540
stuff and who wrote the code we're going to be modifying, wrote a blog post

00:03:17.540 --> 00:03:23.500
about this, Understanding MVC and MVP For JavaScript and Backbone Developers.

00:03:23.500 --> 00:03:26.300
This sounds like a wonderful article for us.

00:03:26.300 --> 00:03:29.070
Unfortunately, it's really, really long so

00:03:29.070 --> 00:03:31.210
I'm not going to go over it right now with you.

00:03:31.210 --> 00:03:34.440
But I would like to point out one particular area of it.

00:03:34.440 --> 00:03:37.800
About halfway down, he says, in this respect contrary,

00:03:37.800 --> 00:03:42.100
to what might be mentioned in the official documentation or in blog posts,

00:03:42.100 --> 00:03:49.750
Backbone is neither a truly MVC/MVP nor MVVM Framework.

00:03:49.750 --> 00:03:53.450
It's in fact better to consider it a member of the MV* family,

00:03:53.450 --> 00:03:55.200
which approaches architecture in its own way.

00:03:56.230 --> 00:03:57.400
There's nothing wrong with this, but

00:03:57.400 --> 00:04:02.210
it's important to distinguish between classical MVC and MV*, should you be

00:04:02.210 --> 00:04:07.530
relying on advice on classical literature on the former to help with the latter.

00:04:07.530 --> 00:04:09.960
In other words, what he's really saying is,

00:04:09.960 --> 00:04:15.080
Backbone doesn't exactly follow, the MVC model view controller, or

00:04:15.080 --> 00:04:18.570
model view presenter, or model view, view model parallax.

00:04:18.570 --> 00:04:21.310
Backbone kind of does things a little bit differently.

00:04:21.310 --> 00:04:22.990
So now we know a couple things.

00:04:22.990 --> 00:04:26.300
Definition like MVC and MVP and MVVM.

00:04:26.300 --> 00:04:28.210
Are not the be all end all.

00:04:28.210 --> 00:04:30.360
We also know that MV asterisk,

00:04:30.360 --> 00:04:34.720
means patterns that do it differently form our traditional patterns.

00:04:34.720 --> 00:04:38.470
And to make things stranger if you read a little bit more between the lines,

00:04:38.470 --> 00:04:41.230
you'll find that Backbone is pretty agnostic about how

00:04:41.230 --> 00:04:45.200
you organize the communication between the different parts of your application.

00:04:45.200 --> 00:04:46.490
So what we're going to do,

00:04:46.490 --> 00:04:49.490
is we're going to rely on the code that we're editing.

00:04:49.490 --> 00:04:50.880
To dictate how things are done.

00:04:50.880 --> 00:04:53.990
And we're going to check the documentation when we need help or

00:04:53.990 --> 00:04:55.450
when things don't work.

00:04:55.450 --> 00:04:59.560
So, it may seem strange to say, but in order to make a few changes to

00:04:59.560 --> 00:05:03.850
a particular project, sometimes we don't have to understand it fully.

00:05:03.850 --> 00:05:06.390
Its important that we remember, we're looking for

00:05:06.390 --> 00:05:08.880
a general organizational picture here.

00:05:08.880 --> 00:05:10.710
Not a super detailed one.

00:05:10.710 --> 00:05:14.720
We aren't going to learn backbone.js really really well.

00:05:14.720 --> 00:05:16.860
All of this documentation is here to help us,

00:05:16.860 --> 00:05:20.180
we're not going to understand what every single piece does.

00:05:20.180 --> 00:05:24.560
If we had to learn a library 100% before we could make any changes,

00:05:24.560 --> 00:05:27.380
that would be impractical and unsustainable.

00:05:27.380 --> 00:05:28.960
Let's take a step back from all of this and,

00:05:28.960 --> 00:05:31.460
talk to Jacques, one of our Front End Developers.

00:05:31.460 --> 00:05:35.850
About strategies that we can use, to start adding to a project,

00:05:35.850 --> 00:05:38.880
without the code that we add, sticking out like a sore thumb.

