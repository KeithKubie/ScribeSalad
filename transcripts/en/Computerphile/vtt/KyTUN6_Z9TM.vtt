WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.840
Today we're going to talk about object
oriented programming, it's one of the most

00:00:02.840 --> 00:00:05.650
common ways that software is written
these days certainly for things like

00:00:05.650 --> 00:00:10.400
applications on desktops and mobile
devices. The problem with object oriented programming

00:00:10.400 --> 00:00:13.880
though is that it can be quite difficult
to get your head around at first 'cause it

00:00:13.880 --> 00:00:19.260
uses so many different terms, you talk about objects sending messages to other objects, objects doing

00:00:19.260 --> 00:00:23.150
things and you think "Well they're just bits of code, how are they doing anything?" and so on

00:00:23.150 --> 00:00:26.150
so it can be difficult to get your head around it.

00:00:28.200 --> 00:00:32.140
For Nicholas Wirth, who invented Pascal, once
described programs as being algorithms

00:00:32.140 --> 00:00:36.050
plus data structures.  Now the data structures we can think of as the sort of the data that

00:00:36.050 --> 00:00:38.720
our program's manipulating, whatever that might be.

00:00:38.720 --> 00:00:42.640
And the algorithm - that's basically the
code they we're running to manipulate

00:00:42.640 --> 00:00:47.420
that data.  One way we can think about this is thinking about something like a simple pong game,

00:00:47.420 --> 00:00:50.800
sort of the very early computer games
you got back in the seventies.  Pong was

00:00:50.800 --> 00:00:55.950
a very simple game that you played on
your TV.  It had - so that's your TV screen - you had

00:00:55.950 --> 00:01:01.830
a little bat on this side which one
person controlled; you had another bat on

00:01:01.830 --> 00:01:06.310
this side that another person controlled and then you had a ball which was a square

00:01:06.310 --> 00:01:10.610
block.  These literally were square blocks that were filled in on the screen.

00:01:10.610 --> 00:01:13.860
So one player could control this and move it up and down, and the other player could control this

00:01:13.860 --> 00:01:18.619
to move it up and down, and the ball would bounce between effectively trying to be a sort

00:01:18.619 --> 00:01:23.210
of tennis game.  The graphics were state of the art for the time, and you can still

00:01:23.210 --> 00:01:26.810
find Pongs lying around mainly
museums.  There's one at the Computer History

00:01:26.810 --> 00:01:30.450
Museum down in Cambridge if you were to go and play with it.  So the Pong game's very,

00:01:30.450 --> 00:01:34.649
very simple but we can use it to sort of
think about how the probe would work and

00:01:34.649 --> 00:01:39.789
so on and things.  So you've got two bats and a
ball.  So the data for this would be

00:01:39.789 --> 00:01:43.390
relatively simple.  This paddle or
bat over here - you'd need to know where

00:01:43.390 --> 00:01:48.789
it is, so you need its position; and we'll call that its y position.  And you'd probably keep track

00:01:48.789 --> 00:01:52.160
of its x position as well just to make
it easier to draw things.  And you'd need

00:01:52.160 --> 00:01:58.760
the same for this one over here and
again for the ball you'd need the ball's x pos.,

00:01:58.760 --> 00:02:01.920
and the ball's y position.  So that's
the data that our program would

00:02:01.929 --> 00:02:06.350
represent.  It doesn't need anything more than that really.  You'd perhaps have some representation

00:02:06.350 --> 00:02:09.390
of screen but that'd be handled by the
computer, so we'll ignore that for now.

00:02:09.390 --> 00:02:13.880
And we'd be able to write programs
which would use this data, manipulate it to run

00:02:13.880 --> 00:02:18.860
the game.  So if a key was pressed, we would change the y position to make the bat go up;

00:02:18.860 --> 00:02:21.880
or if a different key was pressed, we'd change this one's y position to make the

00:02:21.890 --> 00:02:26.170
bat go down.  And we can change this to make
the ball sort of bounce off the edge of

00:02:26.170 --> 00:02:29.790
the screen, so it looks like the ball's
moving around.  So we've got to write some code very

00:02:29.790 --> 00:02:32.270
simply to do this.  So we could say something like,

00:02:32.270 --> 00:02:43.120
if he - alright, so we've got to use Q to go up - is pressed then paddle 1 y pos equals paddle 1 y pos plus 1.

00:02:43.120 --> 00:02:47.100
And we could do something similar for the going down for the same paddles -

00:02:47.100 --> 00:02:51.300
we could write a basic program code that manipulate the variables to move the paddles around.

00:02:51.310 --> 00:02:54.560
Then we can redraw the screen; and so we redraw the screen.  It looks like the

00:02:54.560 --> 00:02:58.500
things are moving.  Actually all we've
done is change the variables' data and

00:02:58.500 --> 00:03:02.790
then redraw the screen.  This is OK, and
for a simple program like this, this approach

00:03:02.790 --> 00:03:06.540
would work and anything else would
perhaps be over the top.  But often you

00:03:06.540 --> 00:03:10.650
would find that you'd have lots of data
that you'd want to group together.  So for

00:03:10.650 --> 00:03:15.860
example with our pong game, we've got a variable to hold the x position; a variable to

00:03:15.860 --> 00:03:19.720
hold the y position; a variable to
hold the ball's x position; a variable to

00:03:19.720 --> 00:03:21.590
hold the ball's y position; and so on.

00:03:21.590 --> 00:03:24.810
And we might actually say we're talking a lot of the
time about points on things.

00:03:24.810 --> 00:03:30.700
So we actually want to group them together.  So we can
use in various programs that have the

00:03:30.710 --> 00:03:35.650
facility to group things together as what we call a data structure.   And we can then refer to this

00:03:35.650 --> 00:03:40.090
position either as a whole, so you can
set the position to be the same as

00:03:40.090 --> 00:03:44.620
another position; or we can refer to the
individual things inside it.  So we can

00:03:44.620 --> 00:03:49.260
pass it into a function, say, to draw the paddle, just passing the whole position in there;

00:03:49.260 --> 00:03:53.720
but if you want to update one of the
values, we can just update that specific

00:03:53.720 --> 00:03:58.970
value about the y position that we want to manipulate.  But there's still a slight issue with

00:03:58.970 --> 00:04:01.840
this sort of approach.  It makes it easy to
refer to things and we could have lots of

00:04:01.840 --> 00:04:04.950
these data structures referring to different things.  Rather than having separate

00:04:04.950 --> 00:04:10.080
variables here, we could have a position
for paddle 1; and a position for paddle 2.

00:04:10.080 --> 00:04:14.880
So we can refer to them and have lots of them.  We can have one data structure which we can then have

00:04:14.880 --> 00:04:19.350
many different things for.  So we can actually group the data together, which is quite useful.

00:04:19.350 --> 00:04:23.990
But the problem with all of this is that
the date is completely open and we can

00:04:23.990 --> 00:04:27.630
write code anywhere in our program that
can manipulate it.  For a simple program like

00:04:27.630 --> 00:04:31.810
Pong, having the data open is not a
problem.  Your program is probably not

00:04:31.810 --> 00:04:36.000
gonna be more than a few hundred lines
long.  As the program grows, you're writing

00:04:36.000 --> 00:04:40.550
something bigger, then you have lots of
files accessing the data and you might change some

00:04:40.550 --> 00:04:43.210
things and forget to update part of the program.

00:04:43.210 --> 00:04:47.360
So for example, you might update one
part of the program to only allow ten

00:04:47.360 --> 00:04:50.860
entries rather the hundred and something, but the other part of the problem still

00:04:50.860 --> 00:04:55.560
expects a hundred, and so it writes over the end, walks all over memory that's used for something else.

00:04:55.560 --> 00:05:00.760
That's how you get a crash; your program won't work.  So, with object oriented programming we turn things on

00:05:00.770 --> 00:05:04.970
their heads slightly.  Rather than thinking of the program in terms of the code we write and

00:05:04.970 --> 00:05:12.370
how it modifies the data, we think rather
in terms of objects.  So, what would an

00:05:12.370 --> 00:05:14.530
object be?  Well, using our Pong

00:05:14.530 --> 00:05:18.530
example - the objects in this game would
be - well we've got two paddles in here; so we'd

00:05:18.530 --> 00:05:22.860
have objects that would represent the
paddles; and we've got another object

00:05:22.860 --> 00:05:27.009
here, which is the ball.  So we can sort of see what might be an object in a program.  But

00:05:27.009 --> 00:05:28.650
the other thing we need to think about,

00:05:28.650 --> 00:05:32.460
rather think about writing code that
manipulates the data, we need to think

00:05:32.460 --> 00:05:37.040
about what these objects can do.  What
operations can we perform on them?

00:05:37.040 --> 00:05:42.340
So for example, on our paddle, we might have operations which make it move up.  We might

00:05:42.340 --> 00:05:45.930
have an operation that make it move down.
And that would be the same for

00:05:45.930 --> 00:05:51.550
both paddles.  And we could ask the object to
perform that operation based on input from

00:05:51.550 --> 00:05:56.130
the keyboard.  So the ball object would be
similar.  Rather having operations to

00:05:56.130 --> 00:06:00.430
move it up to move it down, we just have
an operation says update your position.

00:06:00.430 --> 00:06:04.780
We let the ball itself work out how
its going to move around the

00:06:04.780 --> 00:06:09.080
screen.  The other thing we might have is
an operation to detect whether the ball

00:06:09.080 --> 00:06:14.750
has collided with a paddle.  In this case,
we'd say to the ball, Have you collided with

00:06:14.750 --> 00:06:18.389
this other object?  So we'd have the two
objects working together to work out

00:06:18.389 --> 00:06:23.169
whether they've collided.  Now I've described
that and I've talked about objects

00:06:23.169 --> 00:06:27.570
working with each other; objects having
operations.  How does this all fit down to

00:06:27.570 --> 00:06:31.320
the way it works with a computer?  Well, to do that, we need to think about what an

00:06:31.320 --> 00:06:36.669
object is.  And actually, an object is made up of three things. So let's look at the paddle

00:06:36.669 --> 00:06:40.009
as an example to start with, and we'll think about the ball in a minute.  It's got some

00:06:40.009 --> 00:06:44.500
state.  And that's things like its
x position and its y position.  But you

00:06:44.500 --> 00:06:49.020
might also if you - taking this further - you might
have to be like the speed associated

00:06:49.020 --> 00:06:53.040
with it as well.  And they'll just be
numerical values, perhaps integers,

00:06:53.040 --> 00:06:55.680
floating point numbers, depending on the system

00:06:55.680 --> 00:07:00.360
they're using.  There could also be other
objects, or we could build an object out of

00:07:00.360 --> 00:07:04.140
other objects, but that's gonna be
advanced.  We'll look at that later on.

00:07:04.140 --> 00:07:08.160
So what we've got here is no different from the
data structures we talked about earlier.

00:07:08.160 --> 00:07:12.160
We've got some data and we've encapsulated
it together, and we can refer to it as a

00:07:12.160 --> 00:07:15.289
whole.  The other thing that makes it
different is that we also have the

00:07:15.289 --> 00:07:19.570
operations, and these are the things that
the object can do.  So if you think about our

00:07:19.570 --> 00:07:25.350
paddle, we said it would be able to move up, and we said it would be able to move down.

00:07:25.350 --> 00:07:28.660
We also said that you might be able to
draw it on the screen so we'd have a

00:07:28.660 --> 00:07:33.340
draw operation as well.  We might have other operations that we need to make the program work,

00:07:33.340 --> 00:07:35.980
but these aren't things that we're necessarily going to want do to the object like making it move up

00:07:35.990 --> 00:07:41.080
or down.  So we might have to have operations in ours to get its position.  So we might have

00:07:41.080 --> 00:07:45.320
a get position operation.  And that might be used, say, by the ball object we can

00:07:45.320 --> 00:07:51.199
detect whether it's collided with it or not.  And it's having these operations which

00:07:51.199 --> 00:07:55.580
makes a difference between a simple data structure and an object.  We think about

00:07:55.580 --> 00:08:01.120
the state as being the center of the
object.  So we've got that state.  That's

00:08:01.120 --> 00:08:05.590
our x position and our y position.  We'll keep it simple for now for the paddle.  When we think

00:08:05.590 --> 00:08:10.050
about things in an object oriented way,
we say, No, there's a defined interface that can

00:08:10.050 --> 00:08:15.740
manipulate this data.  And so you have
this sort of ring fence around the data.

00:08:15.740 --> 00:08:23.380
So you've got this sort of move up operation, the move down, the draw operation and the

00:08:23.380 --> 00:08:28.800
get position operation.  And the only way
this data here can be accessed or

00:08:28.800 --> 00:08:33.450
manipulated by calling these operations.  And these create what we call the

00:08:33.450 --> 00:08:37.089
interface to the object.  You can get its
position, which will give you an xy

00:08:37.089 --> 00:08:41.760
coordinate.  We'll have more to have it return that.  You can draw it, and you'd perhaps have to give it

00:08:41.760 --> 00:08:45.630
the screen you'd want it to be drawn on. You can get it to move down, and you can get it to move up.

00:08:45.630 --> 00:08:48.709
and so we now write our programs

00:08:48.709 --> 00:08:53.440
not in terms of manipulating the data,
but in terms of telling this object to

00:08:53.440 --> 00:08:58.230
move up or to move down.  What actually
happens is that when the move up operation is

00:08:58.230 --> 00:09:02.959
performed, there's a bit of code that we
specify here which updates the y

00:09:02.959 --> 00:09:07.919
variable and then it returns back to
whatever called it to continue working.

00:09:07.920 --> 00:09:08.600
So it's actually

00:09:08.610 --> 00:09:12.010
a way of thinking about, and a way of
structuring, the program.

00:09:12.010 --> 00:09:14.760
[Offscreen] Would it be fair to say that's a small program in its own right?

00:09:14.779 --> 00:09:18.660
Yes; I mean, that's one way you could think about it.  The object is a small self-contained program

00:09:18.660 --> 00:09:23.060
that's in its own right.  So it's got a
move up, and a move down, it can be drawn

00:09:23.060 --> 00:09:26.470
and you get its position.  And then you write another self-contained program for the

00:09:26.470 --> 00:09:30.570
ball, and that would perhaps have a similar state, but it would have different operations

00:09:30.570 --> 00:09:35.980
associated with it.  So an object is actually made up of three things.  We've seen the state; we've

00:09:35.980 --> 00:09:39.930
seen the operations; but the third thing
we have is actually not part of the

00:09:39.930 --> 00:09:44.320
object as such.  But we also have identity.  And this is simply saying that we can

00:09:44.320 --> 00:09:51.760
have many objects of the same type.  So we can have one paddle, like this; but we

00:09:51.760 --> 00:09:54.899
can also - and I'll draw a smaller one for speed - we can also have another one with

00:09:54.899 --> 00:09:59.040
its state and the operations around it.  And this can represent the other paddle.  So we've got

00:09:59.040 --> 00:10:03.140
two objects with the identical interfaces:
one to represent the paddle on the left;

00:10:03.140 --> 00:10:06.660
one to represent the paddle on the right.
So the only thing that can

00:10:06.660 --> 00:10:12.180
alter the data is the operation on the object of a particular identity.  So if we wanted to access it,

00:10:12.180 --> 00:10:15.440
we say to an object with this identity, perform this

00:10:15.459 --> 00:10:20.479
operation; and that would then go and
modify the state of that object.

00:10:20.480 --> 00:10:25.339
As I'm sure you've guessed we'd have
another type of object to represent the

00:10:25.339 --> 00:10:31.199
ball, which should also have an x and a y position.  And it would have a different set of

00:10:31.199 --> 00:10:35.360
operations around it.  So, some of them
might be similar.  Things like, we might have

00:10:35.360 --> 00:10:41.120
a draw operation.  But we might have a collide operation instead, and then this time

00:10:41.120 --> 00:10:46.380
update positions - that's really got an increase speed operation as well -

00:10:46.380 --> 00:10:50.560
let's have a speed value in there.  The two objects that represent the paddle of the

00:10:50.570 --> 00:10:55.310
same type.  They have the same state
associated with them, the same operations

00:10:55.310 --> 00:10:59.930
associated with them.  But this one is of
a different type.  It's got different state -

00:10:59.930 --> 00:11:05.110
it's got an xy position and speed, and it
also has a different set of operations

00:11:05.110 --> 00:11:09.970
associated with it.  And of course it has its own identity, and if we wanted to, we could have two balls

00:11:09.970 --> 00:11:13.560
in the game.  And generally, in most object oriented languages, when we write these things,

00:11:13.570 --> 00:11:17.160
we define what we call a class, which is
basically the blueprint for building

00:11:17.160 --> 00:11:21.000
objects that it specifies, what operations they have; and provides the

00:11:21.010 --> 00:11:25.640
code for those operations.   Even though it acts on each individual object, it also

00:11:25.640 --> 00:11:30.000
specifies how the data is stored and so on.  And then when we create an object, we

00:11:30.000 --> 00:11:33.900
create a new one with its own identity,
with its own state, and then the operations

00:11:33.900 --> 00:11:36.600
can perform on that individual object.

00:11:36.600 --> 00:11:41.280
[Offscreen] If we come to update our program, you talked about how that can be a problem with structures.

00:11:41.280 --> 00:11:42.800
[Offscreen] How's it easier here, then?

00:11:42.800 --> 00:11:45.860
Because we've got this
defined interface for the object, the

00:11:45.870 --> 00:11:48.840
rest of the program doesn't know
anything about how that object is

00:11:48.840 --> 00:11:52.960
implemented.  So it doesn't need to know there's a y coordinate or an x coordinate in there.

00:11:52.960 --> 00:11:58.950
All it needs to know is, to make it move up, it invokes the move-up operation on the object; or

00:11:58.950 --> 00:12:02.830
invokes the move down to make it move down.  The beauty of this is you have lots of

00:12:02.830 --> 00:12:06.120
different classes of objects that
implement this interface, and then you

00:12:06.120 --> 00:12:09.280
can drop in whichever one you want.  So you could have a paddle which is wider, which

00:12:09.280 --> 00:12:13.010
would just be different class of object,
and drop that in.  We could have perhaps a

00:12:13.010 --> 00:12:18.340
specialist paddle which was two paddles that moved up and down in sync with each other.

00:12:18.340 --> 00:12:23.690
And that'd just be a different class of object which you'd drop in inside.  And this is part of what we call

00:12:23.690 --> 00:12:26.410
inheritance in object oriented
programming is one of the things which

00:12:26.410 --> 00:12:29.410
can make it really powerful, which we'll look at in another video.

00:12:32.520 --> 00:12:38.330
Over a long enough time scale, I think that human level artificial intelligence

00:12:38.330 --> 00:12:40.150
is completely inevitable.

00:12:41.100 --> 00:12:48.040
Um, if your auntie hangs around for long enough and continues to progress in what it can do...

