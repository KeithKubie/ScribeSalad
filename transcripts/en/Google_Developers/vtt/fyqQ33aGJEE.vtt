WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.180
&gt;&gt; Today, I want to talk about Google Wave
Robots and in particular, the new Robots API

00:00:07.180 --> 00:00:14.110
version 2 and some of the features that it
has for robots to take advantage of. So, to

00:00:14.110 --> 00:00:21.180
start with, robots are basically superhuman
participants in a Wave, that it can sit on

00:00:21.180 --> 00:00:26.880
a Wave and listen to everything that's happening
in that Wave and they can respond by doing

00:00:26.880 --> 00:00:32.430
anything on that Wave like editing a text,
or adding replies. And they can even do stuff

00:00:32.430 --> 00:00:39.260
like creating new Waves just like a human
can. However, robots are programmatic and

00:00:39.260 --> 00:00:43.290
so as a developer, you need to understand
how to actually program these robots in order

00:00:43.290 --> 00:00:47.671
to listen to the events that you want them
to hear in order to respond the way that you

00:00:47.671 --> 00:00:56.030
want them to respond. All right, so, to start
off, let's actually look at an example robot,

00:00:56.030 --> 00:01:01.329
and we'll start by looking at what it looks
like to the user of the robot, all right.

00:01:01.329 --> 00:01:07.270
So, in this example, we are writing a little
diary entry about an incredibly emotional

00:01:07.270 --> 00:01:14.490
day with ups and downs, and we've got some
little ASCII codes for smiley phrases and

00:01:14.490 --> 00:01:21.690
frowns, and the whole that. So, we write this
up and then we add the skimmy robot onto the

00:01:21.690 --> 00:01:28.170
Wave. So, the skimmy robot is basically an
emoticon robot. It goes to the Wave and finds

00:01:28.170 --> 00:01:36.229
places that it can replace with emoticons.
So, after we add skimmy, then we see that

00:01:36.229 --> 00:01:42.540
our smiley face has become a smiley, our frowny
face is becoming incredibly sad and our heart

00:01:42.540 --> 00:01:49.060
is a beating red heart. So, this is what it
looks like to the user, now, I want to look

00:01:49.060 --> 00:01:55.979
and see what it looks like behind the scenes.
So, we go back to the one when we create this

00:01:55.979 --> 00:02:05.110
Wave, and we add the robot. Then the Wave
server sees that a robot has been onto the

00:02:05.110 --> 00:02:10.169
Wave and the Wave server says, oh, well, I
need to let this robot know that it's been

00:02:10.169 --> 00:02:16.109
added and I need to give it some information
about this event. So the Wave server actually

00:02:16.109 --> 00:02:23.220
constructs a JSON which describes the events
and the context that it happened in. So in

00:02:23.220 --> 00:02:30.340
this case, the event is a wavelet self added
and the context is the wavelet that it happened

00:02:30.340 --> 00:02:36.739
in, so the context will describe the title
and the text in that that blip and information

00:02:36.739 --> 00:02:43.669
like the participants, right? So it constructs
this JSON and then it sends the JSON to the

00:02:43.669 --> 00:02:51.110
robot. Now, every robot currently runs on
App Engine and every robot has a particular

00:02:51.110 --> 00:02:58.480
endpoint that the Wave communicates with,
so it's _waves/robot/jsonrpc. So the Wave

00:02:58.480 --> 00:03:05.409
server will send the JSON to that endpoint
and then the robot will process the JSON and

00:03:05.409 --> 00:03:10.480
it will respond with its own JSON, and its
own JSON would describe operations that it

00:03:10.480 --> 00:03:17.900
wants to perform on the Wave. So, in this
example, the operations are replacements,

00:03:17.900 --> 00:03:22.981
or it's going to replace the smiley faces
with images and the frowns with images and

00:03:22.981 --> 00:03:29.900
all of that. So it sends the JSON of operations
to the Wave server, and the Wave server sends

00:03:29.900 --> 00:03:35.870
those operations to the Wave client. And now
the Wave Client shows our lovely animated

00:03:35.870 --> 00:03:46.549
GIFs, so this is basically how a robot works.
It's an application that accepts JSON-RPCs

00:03:46.549 --> 00:03:52.620
and sends them back out in itself in order
to communicate with Wave. Now, you, as a developer,

00:03:52.620 --> 00:03:55.859
probably don't want to spend your time, you
know, de-serializing JSON and serializing

00:03:55.859 --> 00:04:03.699
JSON, right? So what we do is that we provide
APIs in the two main App Engine images like

00:04:03.699 --> 00:04:10.459
on a Java, and we let you use those APIs in
order to process events and to respond to

00:04:10.459 --> 00:04:17.720
events. All right. So, here's the example
code for the skimmy robot that I've showed

00:04:17.720 --> 00:04:24.360
and this is in the Python API. So we start
off by constructing the robot and passing

00:04:24.360 --> 00:04:30.100
in some profile information for the robot
and by registering a few event handlers. So,

00:04:30.100 --> 00:04:37.699
here, we're registering for the blips submitted
and the wavelet self added event handlers.

00:04:37.699 --> 00:04:41.919
Then, we define a function that responds to
these events and that function receives the

00:04:41.919 --> 00:04:47.930
event information and the wavelet contacts
and it can use that information. So, in this

00:04:47.930 --> 00:04:56.539
case, it iterates through the blip to see
if there's any possible emoticons in it, and

00:04:56.539 --> 00:05:04.439
if it finds then, it construction operation
to replace the text in an image. So it's basically

00:05:04.439 --> 00:05:10.639
just constructing a replaced operation on
the blip. And, basically, this code is in

00:05:10.639 --> 00:05:17.599
fact de-serializing JSON, turn it into Python
objects and then taking the Python operations

00:05:17.599 --> 00:05:23.169
and serializing those into JSON operations.
It's just a much nicer way of creating this

00:05:23.169 --> 00:05:32.090
JSON-RPC communication with the Wave server.
So that is basically a robot. It's a very

00:05:32.090 --> 00:05:39.550
typical robot and we showed it in Python but
in Java, it would be similar. And as you can

00:05:39.550 --> 00:05:45.770
see, robots are pretty much all about events
in operations. So now I want to focus on various

00:05:45.770 --> 00:05:54.509
features of the events and operations aspects.
So, starting with events, the whole point

00:05:54.509 --> 00:06:01.919
of events is to let developers subscribe to
only in the events that they care about and

00:06:01.919 --> 00:06:08.689
not have to worry about events that they don't
care about, right? And, this is because your

00:06:08.689 --> 00:06:15.729
robot is actually a webapp, and you don't
want your webapp to be hit if it's not necessary,

00:06:15.729 --> 00:06:20.129
right, if there's nothing for it to process.
You only want your webapp to be contacted

00:06:20.129 --> 00:06:24.870
if there's actually something that your webapp
wants to process, right. So what we're trying

00:06:24.870 --> 00:06:31.080
to do is provide enough events so that you
can, you can subscribe to the ones you care

00:06:31.080 --> 00:06:36.590
about and ignore the ones you don't care about.
So here's a list of the events that we have

00:06:36.590 --> 00:06:43.600
currently. There's stuff like title changed,
participants changed, blip created, form button

00:06:43.600 --> 00:06:48.789
clicked, gadget changed, et cetera. There
is--our most frequency, high frequency event

00:06:48.789 --> 00:06:52.380
called document changed which is something
like, you know, every four characters that

00:06:52.380 --> 00:06:59.729
they type, you'll get an event, so this really
range in their frequency. But, these are the

00:06:59.729 --> 00:07:04.340
events we offer now and we may offer more
events in the future as developers express

00:07:04.340 --> 00:07:09.711
that there is something else, some level of
granularity that they need, but you can do

00:07:09.711 --> 00:07:17.139
an awful lot of the current events here. All
right, now, we said earlier that when a robot

00:07:17.139 --> 00:07:21.389
sends events or receives event information,
it also receives context information and the

00:07:21.389 --> 00:07:30.410
context describes the wavelet that that event
occurred in. Now, in the API, we have this

00:07:30.410 --> 00:07:36.510
notion of you being able to specify your own
context and for there being a default context.

00:07:36.510 --> 00:07:43.551
So the reason for this is because some waves
can be really, really big and there are some

00:07:43.551 --> 00:07:48.660
developers that want to know about that entire
wave and all of that information. And there

00:07:48.660 --> 00:07:52.440
are other developers that really only care
about one blip in that wave. So we want to

00:07:52.440 --> 00:07:57.400
make sure that if you're a developer that
cares about the entire wavelet, you can get

00:07:57.400 --> 00:08:01.570
all of that. But if you're a developer that
only cares about a little bit, then you're

00:08:01.570 --> 00:08:05.259
not going to worry that your robot is going
to get hit up with this, you know, a massive

00:08:05.259 --> 00:08:09.729
amount of information every time there's an
event. So, we have a default context and then

00:08:09.729 --> 00:08:16.479
we let you override that default context depending
on your particular needs. So, for example,

00:08:16.479 --> 00:08:20.719
looking at this wave here, there is a blip
in the middle that we're editing, that's the

00:08:20.719 --> 00:08:26.400
one left in green, and then there's several
blips around there and then there's a parent

00:08:26.400 --> 00:08:32.979
blip; so the default context is root, self,
parent and children. So in this case, it would

00:08:32.979 --> 00:08:38.769
be the selective blip, it would be the root
blip--the one with the title--and there would

00:08:38.769 --> 00:08:43.089
be a parent--the one right above it--and there
will be no children. So the default context

00:08:43.089 --> 00:08:51.250
here would give you a JSON describing three
blips of information. Now, you can override

00:08:51.250 --> 00:08:57.980
that context to specify anyone of these context
options or any combination of them, all right.

00:08:57.980 --> 00:09:02.630
So, if you're a robot that only cares about
the current blip, you might override it to

00:09:02.630 --> 00:09:07.740
say, you only want self. If you're the one
that cares about the entire blip like your

00:09:07.740 --> 00:09:12.940
robot that exports a blip to PDF, then you
would specify all so you'll get all of the

00:09:12.940 --> 00:09:17.540
information. And the way to do that is simply
when you register an event handler, you specify

00:09:17.540 --> 00:09:23.620
the context as one of this constant or a combination
of the constant, and then the Wave server

00:09:23.620 --> 00:09:33.690
will know to only sense the specified amount
of context to your robot. Okay, so, we also

00:09:33.690 --> 00:09:42.410
have a notion of event filters. Now, there
are a lot of robots that like to actually

00:09:42.410 --> 00:09:48.320
respond to particular things inside a Wave,
right, and process those things that it finds.

00:09:48.320 --> 00:09:55.170
They're basically looking for matches and
processing those matches. So, ideally, those

00:09:55.170 --> 00:10:00.320
robots would respond in real time, meaning,
those robots would be listening to the document

00:10:00.320 --> 00:10:06.600
change event, and as soon as they saw something
that they match, they would go ahead and process

00:10:06.600 --> 00:10:12.440
that match. Now, if the robots are listening
to document changed then they are potentially

00:10:12.440 --> 00:10:18.750
getting a whole lot of events and it's possible
that they're going to get a lot of events

00:10:18.750 --> 00:10:26.649
that have nothing for them to process, all
right. So what we let you do is actually set

00:10:26.649 --> 00:10:32.360
a filter on the event to say that you only
care about the event if the event text actually

00:10:32.360 --> 00:10:40.589
matches a certain regular expression. So,
looking at this example here, this is intended

00:10:40.589 --> 00:10:46.029
for a robot that converts rapid text into
Wikipedia links, right. So the robot wants

00:10:46.029 --> 00:10:51.800
to respond immediately on document changed
and convert those immediately. But it only

00:10:51.800 --> 00:10:56.970
wants to be notified of the document changed
events if there's actually rapid text for

00:10:56.970 --> 00:11:03.050
it to respond to. So, all you have to do here
is when you register an event handler, we

00:11:03.050 --> 00:11:08.440
will also specify a filter and the filter
is just a standard rejects that says what

00:11:08.440 --> 00:11:13.389
the text should match for your robot to actually
care about it. And then your robot will only

00:11:13.389 --> 00:11:20.399
get that event when the filter matches, and
then presto, it can do all of its replacements

00:11:20.399 --> 00:11:25.850
in real time. So the event filter is a nice
way of having a robot that responds in real

00:11:25.850 --> 00:11:32.350
time but isn't constantly notified to events
that it doesn't care about. Right now, you

00:11:32.350 --> 00:11:38.600
can mostly use the event filter on the document
changed event and a few other events like

00:11:38.600 --> 00:11:43.209
gadget changed and allocation changed, and
we'll probably continue to add the filter

00:11:43.209 --> 00:11:52.381
to other events as it becomes desired. Okay.
So now, we have operations, and it's basically

00:11:52.381 --> 00:11:59.449
the robot doing stuff. So, the goal of operations
is to let your robot do as much as a human

00:11:59.449 --> 00:12:05.540
can, right, so basically do everything inside
a Wave. So here's a list of current operations

00:12:05.540 --> 00:12:14.730
that we support. There is stuff like replying,
adding and removing tags, adding participants,

00:12:14.730 --> 00:12:21.730
inserting inline blips, appending html; these
are all, you know, really useful for modifying

00:12:21.730 --> 00:12:28.279
an existing wave. We also have an operation
Create Wavelet which will create a new Wave

00:12:28.279 --> 00:12:36.079
and Fetch Wave which will fetch a wave that
the robot is on. Let's do the operations that

00:12:36.079 --> 00:12:42.310
we added in the recent API. Now when you're
doing the document modify operations, there

00:12:42.310 --> 00:12:47.680
is a lot of elements that you can insert into
a Wave and here is the list of the elements.

00:12:47.680 --> 00:12:52.540
There's a lot of form elements you can insert.
You can also insert lines which lets you get

00:12:52.540 --> 00:12:58.320
bullets and headings. And also insert gadgets
and so as images. There's a lot you can do

00:12:58.320 --> 00:13:10.029
with gadget robot interaction, so that's pretty,
that's pretty crucial to look into to. Okay.

00:13:10.029 --> 00:13:14.490
Now, this is probably the most exciting part
of our new API and that's what we call the

00:13:14.490 --> 00:13:21.540
active API. So, in the past, in the old API,
robots could only do operations in response

00:13:21.540 --> 00:13:27.360
to events and this is kind of the way I've
also presented robot so far. But in fact in

00:13:27.360 --> 00:13:33.910
the new API, robots can do operations at any
time, so this means that you can do stuff

00:13:33.910 --> 00:13:40.329
like have your robot create Waves from another
webpage and do stuff like have your robots

00:13:40.329 --> 00:13:46.259
perform operations from a Chrome job which
really opens up a whole new range of robots

00:13:46.259 --> 00:13:51.339
that can be created. And also it makes it
much easier to integrate with third party

00:13:51.339 --> 00:13:56.110
systems because you can have your robot respond
to events on the third party system or have

00:13:56.110 --> 00:14:02.190
your robot respond to actually, you know,
Web forms on that third party app. So the

00:14:02.190 --> 00:14:11.800
way we do this is we just have that you register
your robot and we basically give it a OAK

00:14:11.800 --> 00:14:16.970
consumer key and consumer secret and you put
that key in secret into your code, and once

00:14:16.970 --> 00:14:22.260
you've done that that means that you're now
able to do operations at any time and we authenticate

00:14:22.260 --> 00:14:27.440
you every time you do those operations to
make sure that you're all validated. So this

00:14:27.440 --> 00:14:33.050
means doing stuff like creating a new wave
from a form and means stuff like fetching

00:14:33.050 --> 00:14:39.009
a Wave at any time and doing operations to
it. There's a lot of possibilities once you

00:14:39.009 --> 00:14:46.819
start making active robots and this is one
of the really exciting things in the new API.

00:14:46.819 --> 00:14:52.529
And, along with that, we've introduced the
notion of Proxying-For. So this is another

00:14:52.529 --> 00:14:57.769
thing that's really crucial for integration
with their price systems because the thing

00:14:57.769 --> 00:15:04.190
is that third party systems usually have their
own notion of users and you often want to

00:15:04.190 --> 00:15:10.360
represent contributions from users on the
third-party systems inside of Wave, right,

00:15:10.360 --> 00:15:15.129
and represent it visually so that it make
sense. For example, we might have a Twitter

00:15:15.129 --> 00:15:22.300
robot. The Twitter robot updates the Wave
with replies that represent tweets from Twitter

00:15:22.300 --> 00:15:29.069
users, all right. So, here is tweets from
Douwe's Twitter account, all right. And as

00:15:29.069 --> 00:15:35.850
you can see the Avatar and the name, that's
all actually the Avatar that Douwe uses on

00:15:35.850 --> 00:15:40.320
Twitter. This is all pulled from the Twitter
system and this is nice because somebody who's

00:15:40.320 --> 00:15:45.350
used to seeing their tweets on Twitter and
now sees them in Wave, sees them looking very

00:15:45.350 --> 00:15:50.160
much the same. So they think, oh, yes, this
is the same user, I know who this user is.

00:15:50.160 --> 00:15:56.340
Even though Douwe and Twitter isn't really
a Wave user; he's a Twitter user. And, what's

00:15:56.340 --> 00:16:00.550
actually happening is that these operations
are all done by the robot. They're just done

00:16:00.550 --> 00:16:07.579
by the robot on behalf of a user and this
is done using a plus syntax in the robot address

00:16:07.579 --> 00:16:12.709
that represents that user and then there's
a profile that's pulled for whatever is after

00:16:12.709 --> 00:16:17.890
the plus. So it's good because it means that
you can make Waves look like they're contributed

00:16:17.890 --> 00:16:22.800
from those users, but you can always prove
that they came from the robot, so that's good

00:16:22.800 --> 00:16:29.310
for having some credibility. Now the way to
do this in the code is for every operation

00:16:29.310 --> 00:16:36.329
you can simply propend the Proxying-For method
and that tells the API that you want to do

00:16:36.329 --> 00:16:42.730
an operation on behalf of a user, so here
we're going to do reply on behalf of Douwe.

00:16:42.730 --> 00:16:49.019
Now, in order to let them know what profile
information to serve for operations from that

00:16:49.019 --> 00:16:56.009
user, you just create a profile handler and
that profile handler gets passed a username,

00:16:56.009 --> 00:17:01.529
and for each username, you respond with their
profile information; their name, their image,

00:17:01.529 --> 00:17:07.730
their profile hereon. So it's really probably
simple but, with that combination and stuff,

00:17:07.730 --> 00:17:15.080
you can really represent users from third-party
systems much better. All right, so, that is

00:17:15.080 --> 00:17:24.600
basically the new Wave Robots API version
2, and hopefully, you check it out and make

00:17:24.600 --> 00:17:27.420
your own robot and let us know how it goes
in the forum.

