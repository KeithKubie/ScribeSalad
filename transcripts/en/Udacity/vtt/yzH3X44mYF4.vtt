WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:05.250
There are two orthogonal problems that lead to a system crash. One is

00:00:05.250 --> 00:00:09.250
power failure. The second is software failure,

00:00:09.250 --> 00:00:11.450
or in other words, the application crashes

00:00:11.450 --> 00:00:17.170
for some unknown reason, obviously a bug in the application. So Rio Vista poses

00:00:17.170 --> 00:00:21.730
a very interesting rhetorical question. Suppose we

00:00:21.730 --> 00:00:25.280
postulate that the only source of system

00:00:25.280 --> 00:00:28.460
crash is software failure. There are bugs in

00:00:28.460 --> 00:00:31.430
the software, and not power failure. How does

00:00:31.430 --> 00:00:35.170
that change the design and implementation of failure

00:00:35.170 --> 00:00:37.690
recovery? Now the question is how can we eliminate

00:00:37.690 --> 00:00:40.410
power failure. Well, we can throw some hardware

00:00:40.410 --> 00:00:43.620
at the problem and make power failure go away.

00:00:43.620 --> 00:00:50.290
For example, we can get a UPS power supply and connect it to the portion of the

00:00:50.290 --> 00:00:55.870
system that I want to be up even if the power fails. So the idea in

00:00:55.870 --> 00:01:01.450
Rio Vista is, if we can take the memory and take a portion

00:01:01.450 --> 00:01:04.629
of that main memory. And make that

00:01:04.629 --> 00:01:09.340
persistent to power failures by adding a battery

00:01:09.340 --> 00:01:11.890
backup. Then even if there's a power

00:01:11.890 --> 00:01:15.360
failure, this portion of the memory, whatever changes,

00:01:15.360 --> 00:01:18.020
you record it here. It's going to survive

00:01:18.020 --> 00:01:20.610
that power failure because it has battery backed up.

00:01:20.610 --> 00:01:23.050
That's the idea, if we can throw some

00:01:23.050 --> 00:01:26.520
hardware at the problem and make the problem disappear.

00:01:26.520 --> 00:01:29.411
So that we can then focus on how

00:01:29.411 --> 00:01:33.020
to recover from failure, assuming that the only source

00:01:33.020 --> 00:01:35.570
of failure is software crash. So with this

00:01:35.570 --> 00:01:40.660
amendment. Will this make the implementation of transactions as

00:01:40.660 --> 00:01:44.590
defined in LRVM cheap, so that designers will

00:01:44.590 --> 00:01:47.290
actually use them? Let's see how this can help.

