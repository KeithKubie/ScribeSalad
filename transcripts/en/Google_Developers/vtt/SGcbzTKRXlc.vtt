WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.020
SAM DUTTON: We're live.

00:00:01.020 --> 00:00:01.480
Great.

00:00:01.480 --> 00:00:05.720
Well, welcome everyone to
the WebRTC hangout.

00:00:05.720 --> 00:00:07.390
So we're looking forward
to some really

00:00:07.390 --> 00:00:08.220
good questions today.

00:00:08.220 --> 00:00:11.260
We've already had some good
stuff on Moderator.

00:00:11.260 --> 00:00:14.430
We're going to talk a bit about
the basics of WebRTC.

00:00:14.430 --> 00:00:18.830
You know, what it is, what it
can do for you, and how you

00:00:18.830 --> 00:00:21.740
can use it now-- how you
can get started.

00:00:21.740 --> 00:00:25.650
And so first I'd like
to introduce you

00:00:25.650 --> 00:00:26.650
to the people here.

00:00:26.650 --> 00:00:26.780
Yeah.

00:00:26.780 --> 00:00:28.040
My name is Sam Dutton.

00:00:28.040 --> 00:00:30.830
I'm a developer advocate
for Chrome--

00:00:30.830 --> 00:00:33.310
for Google, based in London--

00:00:33.310 --> 00:00:36.440
and yeah-- just learning
about WebRTC.

00:00:36.440 --> 00:00:38.180
It's a fantastic technology.

00:00:38.180 --> 00:00:40.970
So I've been talking to these
guys from the team.

00:00:40.970 --> 00:00:43.890
So over to Mountain View.

00:00:43.890 --> 00:00:48.472
If you could introduce
yourselves, starting with Ray.

00:00:48.472 --> 00:00:50.970
PUNYABRATA RAY: Hi my name's
Punyabrata Ray , and I'm a

00:00:50.970 --> 00:00:54.480
technical solutions engineer
on the WebRTC Chrome team.

00:00:54.480 --> 00:00:55.830
And--

00:00:55.830 --> 00:00:57.625
pass it over to Ronghua.

00:00:57.625 --> 00:00:59.800
RONGHUA WU: Hey, this
is Ronghua Wu.

00:00:59.800 --> 00:01:05.532
I'm also a software engineer
in WebRTC Chrome team.

00:01:05.532 --> 00:01:07.425
ERIC BIDELMAN: And hi,
I'm Eric Bidelman.

00:01:07.425 --> 00:01:09.970
I work on our Chrome developer
relations team.

00:01:09.970 --> 00:01:12.180
I specialize in HTML5--

00:01:12.180 --> 00:01:14.205
kind of help developers
learn all the cool

00:01:14.205 --> 00:01:16.340
new stuff in HTML5--

00:01:16.340 --> 00:01:17.630
of course, there's
plenty of that--

00:01:17.630 --> 00:01:22.065
and also contribute a lot to
html5rocks.com, which is our--

00:01:22.065 --> 00:01:25.046
one of our developer's sites
geared toward HTML5

00:01:25.046 --> 00:01:26.444
development.

00:01:26.444 --> 00:01:28.990
SAM DUTTON: A great site.

00:01:28.990 --> 00:01:32.130
And I'll just put
a URL for that.

00:01:32.130 --> 00:01:35.480
Eric, while you're there, I was
just wondering if we could

00:01:35.480 --> 00:01:40.290
look at the demo that you
produced earlier with Pete, to

00:01:40.290 --> 00:01:43.040
show off some of the features
of WebRTC, and just maybe

00:01:43.040 --> 00:01:44.630
could talk us through
that a little bit.

00:01:44.630 --> 00:01:46.530
ERIC BIDELMAN: So for those
that aren't familiar with,

00:01:46.530 --> 00:01:48.750
sort of, what WebRTC is, we--

00:01:48.750 --> 00:01:50.430
Pete and I shot an
entertaining--

00:01:50.430 --> 00:01:51.430
to say the least--

00:01:51.430 --> 00:01:54.910
screen shot yesterday for you
guys just to sort of show off

00:01:54.910 --> 00:01:58.340
what WebRTC is in a fun kind
of interesting way.

00:01:58.340 --> 00:02:01.770
So I think he's working on
dialing it up right now.

00:02:01.770 --> 00:02:03.290
SAM DUTTON: Yeah,
I can see it.

00:02:03.290 --> 00:02:06.395
ERIC BIDELMAN: Cool.

00:02:06.395 --> 00:02:07.070
PUNYABRATA RAY: Right.

00:02:07.070 --> 00:02:09.100
And just in case people
are not aware--

00:02:23.636 --> 00:02:25.070
MALE SPEAKER: Hey, Eric.

00:02:25.070 --> 00:02:25.982
What's up?

00:02:25.982 --> 00:02:26.966
ERIC BIDELMAN: [INAUDIBLE]

00:02:26.966 --> 00:02:28.030
MALE SPEAKER: Hey.

00:02:28.030 --> 00:02:29.674
This WebRTC stuff?

00:02:29.674 --> 00:02:31.108
It seems pretty cool, right?

00:02:31.108 --> 00:02:32.852
ERIC BIDELMAN: Yeah, it is.

00:02:32.852 --> 00:02:33.730
I'm kind of thirsty down here.

00:02:33.730 --> 00:02:34.215
Can you help me out?

00:02:34.215 --> 00:02:37.125
MALE SPEAKER: You know,
I think I can.

00:02:37.125 --> 00:02:38.375
I'll be right there.

00:02:45.380 --> 00:02:47.555
[LAUGHTER]

00:02:47.555 --> 00:02:49.260
SAM DUTTON: Magic--

00:02:49.260 --> 00:02:50.380
the magic of WebRTC.

00:02:50.380 --> 00:02:51.000
That's great.

00:02:51.000 --> 00:02:54.970
Thank you very much,
Pete and Eric.

00:02:54.970 --> 00:02:57.200
ERIC BIDELMAN: So in the
directions out there-- there's

00:02:57.200 --> 00:03:00.340
a demo that we'll talk a little
bit about maybe in a

00:03:00.340 --> 00:03:07.840
bit, but apprtc.appspot.com is a
sample app that you can test

00:03:07.840 --> 00:03:10.930
out that is exactly what we
just showed you, which is

00:03:10.930 --> 00:03:12.920
establishing a connection
with someone else.

00:03:12.920 --> 00:03:17.690
You saw Pete and I do a
real-time video chat in the

00:03:17.690 --> 00:03:17.990
Googleplex.

00:03:17.990 --> 00:03:20.210
So obviously, you know,
Googleplex has some

00:03:20.210 --> 00:03:22.850
interesting things like slides,
so we decided to ham

00:03:22.850 --> 00:03:25.490
it up a bit, if you will.

00:03:25.490 --> 00:03:27.190
Pete got me a water in
an interesting way.

00:03:27.190 --> 00:03:28.950
But that just goes to show
you, it's all in

00:03:28.950 --> 00:03:29.690
the browser, right?

00:03:29.690 --> 00:03:32.660
We were just hitting a URL
without any plug-ins or

00:03:32.660 --> 00:03:36.720
anything-- doing real-time live
video chat and audio.

00:03:36.720 --> 00:03:38.292
Very cool stuff.

00:03:38.292 --> 00:03:40.090
SAM DUTTON: Yeah, that's
really great.

00:03:40.090 --> 00:03:42.990
And it looks good and
the quality of

00:03:42.990 --> 00:03:45.290
the video is fantastic.

00:03:45.290 --> 00:03:50.480
So I guess I wanted to
start, if I could, by

00:03:50.480 --> 00:03:52.260
asking Ray and Ronghua.

00:03:52.260 --> 00:03:55.580
That's kind of a big question
about-- you know, what are we

00:03:55.580 --> 00:03:56.910
doing with WebRTC?

00:03:56.910 --> 00:04:00.755
What are the big aims
for WebRTC here?

00:04:00.755 --> 00:04:02.970
PUNYABRATA RAY: So I'll
start that out.

00:04:02.970 --> 00:04:08.160
Essentially, one of the main
components to push Chrome as a

00:04:08.160 --> 00:04:10.880
platform is real-time
communications.

00:04:10.880 --> 00:04:14.460
And to be able to do that
natively in the browser and

00:04:14.460 --> 00:04:16.910
not just Chrome-- any
browsers out there--

00:04:16.910 --> 00:04:19.019
so bringing this functionality,
transcending

00:04:19.019 --> 00:04:21.839
operating systems, and being
able to set up a call between

00:04:21.839 --> 00:04:24.600
two browsers natively.

00:04:24.600 --> 00:04:27.880
And developers essentially don't
have to worry about the

00:04:27.880 --> 00:04:30.570
nitty-gritty and the underlying
signaling

00:04:30.570 --> 00:04:34.720
processing blocks or how to
traverse firewalls and such.

00:04:34.720 --> 00:04:39.066
You can just write your own
web page and make a call.

00:04:39.066 --> 00:04:42.060
SAM DUTTON: That's brilliant.

00:04:42.060 --> 00:04:42.310
OK.

00:04:42.310 --> 00:04:46.340
So at the moment, we're doing
stuff with real-time

00:04:46.340 --> 00:04:49.500
conferencing with the kind of
video applications that we

00:04:49.500 --> 00:04:50.540
just saw a moment ago.

00:04:50.540 --> 00:04:51.950
Have you got any--

00:04:51.950 --> 00:04:55.370
Ronghua, have you got any other
ideas for the kind of

00:04:55.370 --> 00:04:58.260
apps that we might be seeing in
the future that use WebRTC.

00:05:03.145 --> 00:05:06.920
RONGHUA WU: There's
a lot of potential

00:05:06.920 --> 00:05:08.170
apps to help you there.

00:05:10.980 --> 00:05:14.750
One of them may be, like
for customer service.

00:05:14.750 --> 00:05:18.270
For example, if you go to a
website, you just click on

00:05:18.270 --> 00:05:23.150
that, you can read your customer
[? percentage. ?]

00:05:23.150 --> 00:05:29.130
Another basic one's like,
peer-to-peer calls.

00:05:29.130 --> 00:05:34.770
You can set up a website that
with a button, you can talk to

00:05:34.770 --> 00:05:37.345
someone else without any
plug-in involved.

00:05:40.420 --> 00:05:41.075
SAM DUTTON: Yeah, fantastic.

00:05:41.075 --> 00:05:45.250
RONGHUA WU: You can also do
some, like, screen sharing or

00:05:45.250 --> 00:05:51.820
streaming your local files
using these technologies.

00:05:51.820 --> 00:05:53.800
ERIC BIDELMAN: What we're
starting to see, too, is like

00:05:53.800 --> 00:05:57.450
the ability for HTML5 APIs
like web sockets, for

00:05:57.450 --> 00:06:02.040
instance, support sending binary
data in these different

00:06:02.040 --> 00:06:02.605
file formats.

00:06:02.605 --> 00:06:05.510
And so you can combine that in
really interesting ways now

00:06:05.510 --> 00:06:07.860
with other stuff in
the platform.

00:06:07.860 --> 00:06:10.820
So what I did with that is kind
of compelling to me is to

00:06:10.820 --> 00:06:15.030
build a robot that sort
of drives itself.

00:06:15.030 --> 00:06:17.010
You know, I don't know-- put a
laptop on some kind of car or

00:06:17.010 --> 00:06:18.175
something and it does--

00:06:18.175 --> 00:06:18.500
SAM DUTTON: Cool, yeah.

00:06:18.500 --> 00:06:20.960
ERIC BIDELMAN: --some action as
it drives around using the

00:06:20.960 --> 00:06:23.380
input it gets from the video
and sort of does--

00:06:23.380 --> 00:06:25.870
in real-time using a web
worker or something--

00:06:25.870 --> 00:06:27.970
the video processing on it.

00:06:27.970 --> 00:06:31.540
So maybe still futuristic,
but definitely doable,

00:06:31.540 --> 00:06:32.625
prototypable.

00:06:32.625 --> 00:06:35.850
SAM DUTTON: Yeah, I can imagine
a lot of really good

00:06:35.850 --> 00:06:38.090
education applications
with this, as well.

00:06:38.090 --> 00:06:40.860
You know, being able
to communicate--

00:06:40.860 --> 00:06:44.950
teachers and students
communicating remotely and

00:06:44.950 --> 00:06:46.170
taking advantage of that.

00:06:46.170 --> 00:06:46.870
And even--

00:06:46.870 --> 00:06:48.230
like Rana's suggesting--

00:06:48.230 --> 00:06:50.110
you know, just working
with customers--

00:06:50.110 --> 00:06:54.220
talking customers through
technical support and really

00:06:54.220 --> 00:06:55.095
any kind of stuff.

00:06:55.095 --> 00:06:57.540
Yeah, it's really exciting.

00:06:57.540 --> 00:07:00.220
The possibilities are there.

00:07:00.220 --> 00:07:04.280
I just wanted to quickly go--
just to show another little

00:07:04.280 --> 00:07:06.620
demo just to kick off.

00:07:06.620 --> 00:07:09.770
One of the really important
components of what people are

00:07:09.770 --> 00:07:16.460
doing with WebRTC is the
get-user media API.

00:07:16.460 --> 00:07:20.510
This is a way of getting
streaming media from your

00:07:20.510 --> 00:07:22.862
computer and then working
with the data.

00:07:22.862 --> 00:07:24.330
Here's a really simple
example.

00:07:24.330 --> 00:07:27.280
I'll just try and pop this
up on-screen and

00:07:27.280 --> 00:07:30.090
share it with you.

00:07:30.090 --> 00:07:33.850
If we can do a little screen
share here, I'll see if I can

00:07:33.850 --> 00:07:38.470
get this on the hangout.

00:07:38.470 --> 00:07:42.780
So I'm sharing a window now
which we can move to.

00:07:48.330 --> 00:07:51.560
So can you see me?

00:07:51.560 --> 00:07:52.880
Does it look a bit weird?

00:07:52.880 --> 00:07:53.310
[INTERPOSING VOICES]

00:07:53.310 --> 00:07:54.480
ERIC BIDELMAN: You look great.

00:07:54.480 --> 00:07:58.330
SAM DUTTON: As you can see,
we're getting in real-time, a

00:07:58.330 --> 00:08:00.620
creepy, hairy ball.

00:08:00.620 --> 00:08:05.560
So we're getting video data
directly from the camera on my

00:08:05.560 --> 00:08:09.310
machine here and doing
processing

00:08:09.310 --> 00:08:11.240
of the data in real-time.

00:08:11.240 --> 00:08:19.480
And then displaying that
rendering content immediately.

00:08:19.480 --> 00:08:21.740
And as you can see, it's a
kind of fun application.

00:08:21.740 --> 00:08:29.270
But you can imagine, there's
a lot of potential useful

00:08:29.270 --> 00:08:31.630
implementations that you can get
with this kind of stuff.

00:08:31.630 --> 00:08:36.010
So real-time processing of
video using the data from

00:08:36.010 --> 00:08:36.980
get-user media.

00:08:36.980 --> 00:08:38.909
ERIC BIDELMAN: That's using
WebGEO, right Sam?

00:08:38.909 --> 00:08:39.530
Is that right?

00:08:39.530 --> 00:08:42.080
Like, WebGEO filter
effects for that?

00:08:42.080 --> 00:08:43.559
SAM DUTTON: Yeah,
that's right.

00:08:43.559 --> 00:08:48.050
And I don't know if
you can see this.

00:08:48.050 --> 00:08:49.470
Does this work for you?

00:08:49.470 --> 00:08:50.860
ERIC BIDELMAN: Yeah,
we can see it.

00:08:50.860 --> 00:08:51.660
SAM DUTTON: Cool.

00:08:51.660 --> 00:08:54.616
And there, you can see, what
we're outputing to is a canvas

00:08:54.616 --> 00:08:55.410
element there.

00:08:55.410 --> 00:08:58.800
So right there we're seeing
the output rendered on a

00:08:58.800 --> 00:09:00.630
canvas element.

00:09:00.630 --> 00:09:07.190
I'll put up a link to that so
anyone can go to that right

00:09:07.190 --> 00:09:08.225
now from the hangout.

00:09:08.225 --> 00:09:09.590
There we go.

00:09:09.590 --> 00:09:10.370
OK.

00:09:10.370 --> 00:09:13.240
And there we go.

00:09:13.240 --> 00:09:15.510
I'll turn off screen sharing now
so you don't have to see

00:09:15.510 --> 00:09:17.710
this psychedelic image of me.

00:09:17.710 --> 00:09:24.850
Why don't we take a question
from the Moderator stuff that

00:09:24.850 --> 00:09:26.990
we've had today.

00:09:26.990 --> 00:09:32.730
So, yes, starting up right from
the most popular question

00:09:32.730 --> 00:09:35.680
we've had so far on Moderator.

00:09:35.680 --> 00:09:36.955
The question is--

00:09:36.955 --> 00:09:40.510
I'll just put the link so that
people can go to this page if

00:09:40.510 --> 00:09:43.934
they want to have a look and
want to add questions.

00:09:43.934 --> 00:09:45.890
There we go.

00:09:45.890 --> 00:09:50.470
So the first question here is,
can you share a timeline for

00:09:50.470 --> 00:09:53.440
recording APIs to become
available.

00:09:53.440 --> 00:09:55.920
And they have a link for
the Google group's

00:09:55.920 --> 00:09:57.880
question about that.

00:09:57.880 --> 00:10:02.860
So yeah, I was wondering, Ray
and Ronghua , could you

00:10:02.860 --> 00:10:04.250
enlighten us about this?

00:10:04.250 --> 00:10:06.830
What's the estimate for
this at this stage?

00:10:06.830 --> 00:10:10.716
Is this something that we
can see on the road map?

00:10:10.716 --> 00:10:12.210
PUNYABRATA RAY: Yeah,
definitely.

00:10:12.210 --> 00:10:15.800
I think this is definitely
on our road map.

00:10:15.800 --> 00:10:19.340
From what I heard, we were
shooting for most probably

00:10:19.340 --> 00:10:20.480
second quarter.

00:10:20.480 --> 00:10:23.860
Perhaps it might sneak into
the third quarter.

00:10:23.860 --> 00:10:27.010
We're just totally focused right
now on just making sure

00:10:27.010 --> 00:10:29.535
that everything works in a
peer-to-peer call, and then

00:10:29.535 --> 00:10:33.460
move to the next feature sets of
being able to record and do

00:10:33.460 --> 00:10:34.660
other things.

00:10:34.660 --> 00:10:39.330
So hopefully Q2, if not Q3 of
this year, we should have

00:10:39.330 --> 00:10:42.766
these recording APIs
up and running.

00:10:42.766 --> 00:10:44.350
SAM DUTTON: That's
great to hear.

00:10:44.350 --> 00:10:48.910
It seems like it's well-defined
and ready to go.

00:10:48.910 --> 00:10:51.120
That's great news.

00:10:51.120 --> 00:10:54.250
Just taking another question
from Moderator.

00:10:54.250 --> 00:10:58.740
They're asking about
experimental servers.

00:10:58.740 --> 00:11:01.045
Could you run an experimental
server?

00:11:01.045 --> 00:11:04.510
Thus it would be easier for
people to try the technology?

00:11:04.510 --> 00:11:10.110
It would be temporary and
unguaranteed, obviously.

00:11:10.110 --> 00:11:13.050
And yeah, I believe we have
that in place, yeah?

00:11:13.050 --> 00:11:15.940
Is that correct?

00:11:15.940 --> 00:11:17.260
RONGHUA WU: Yeah.

00:11:17.260 --> 00:11:20.390
In order to run the experiment,
essentially, you

00:11:20.390 --> 00:11:22.880
need two servers.

00:11:22.880 --> 00:11:27.980
One is the server for the
net [UNINTELLIGIBLE].

00:11:27.980 --> 00:11:30.380
We have scanned at google.com.

00:11:30.380 --> 00:11:31.420
That is already there.

00:11:31.420 --> 00:11:35.450
You can configure up your
connection to use that.

00:11:35.450 --> 00:11:35.850
[UNINTELLIGIBLE]

00:11:35.850 --> 00:11:38.470
you will need a signaling
server.

00:11:38.470 --> 00:11:40.970
So we do have an open source--

00:11:40.970 --> 00:11:47.890
very simple one- signaling
server sample in our website.

00:11:47.890 --> 00:11:49.800
You can see that and
view it yourself.

00:11:49.800 --> 00:11:51.575
PUNYABRATA RAY: It's a peer
connection server.

00:11:51.575 --> 00:11:54.520
RONGHUA WU: That's a
very simple one.

00:11:54.520 --> 00:11:58.200
You can use that to test
the [UNINTELLIGIBLE]

00:11:58.200 --> 00:11:59.060
[? net-- ?]

00:11:59.060 --> 00:12:02.512
the server behind
the app RTC--

00:12:02.512 --> 00:12:04.870
the demo we just saw.

00:12:04.870 --> 00:12:10.676
That one, we plan to open
source it very soon.

00:12:10.676 --> 00:12:13.140
SAM DUTTON: That's
great to hear.

00:12:13.140 --> 00:12:15.660
One thing I failed to
mention so far--

00:12:15.660 --> 00:12:21.320
a really great source of
information about WebRTC is

00:12:21.320 --> 00:12:24.010
the WebRTC site itself.

00:12:24.010 --> 00:12:25.400
I'll just add a link to that.

00:12:25.400 --> 00:12:28.836
That's WebRTC.org.

00:12:28.836 --> 00:12:30.470
I'm just putting that up now.

00:12:30.470 --> 00:12:32.280
So there's a lot of great
information there--

00:12:32.280 --> 00:12:36.840
documentation, and some demos,
and links to further

00:12:36.840 --> 00:12:41.800
information, and blog posts,
and a lot of stuff that you

00:12:41.800 --> 00:12:44.740
can listen out to that gives
updates pretty regular.

00:12:44.740 --> 00:12:47.640
There's a really active
community around WebRTC.

00:12:47.640 --> 00:12:50.940
And we're seeing a lot of new
information coming through

00:12:50.940 --> 00:12:53.040
daily, so have a look at that.

00:12:53.040 --> 00:12:57.220
And it's a great place
to get started.

00:12:57.220 --> 00:13:02.000
Just looking through the other
questions on Moderator here--

00:13:05.620 --> 00:13:07.670
So I guess this harks back
to the last question.

00:13:07.670 --> 00:13:13.310
What server implementations are
now available to build a

00:13:13.310 --> 00:13:16.850
video chat service
using WebRTC?

00:13:16.850 --> 00:13:21.770
So I believe that one thing
that's on the way is some kind

00:13:21.770 --> 00:13:24.990
of open source server.

00:13:24.990 --> 00:13:26.390
Is that correct?

00:13:26.390 --> 00:13:27.490
Is that something we're
going to see?

00:13:27.490 --> 00:13:28.890
RONGHUA WU: Yeah,
that's correct.

00:13:28.890 --> 00:13:32.050
That's the server I mentioned
at behind the

00:13:32.050 --> 00:13:37.050
apprtc.appspot.com, that
demo app we just saw.

00:13:37.050 --> 00:13:40.070
The signaling server behind
that, we plan to

00:13:40.070 --> 00:13:42.376
open source it soon.

00:13:42.376 --> 00:13:45.132
SAM DUTTON: That's really
good to hear.

00:13:45.132 --> 00:13:46.320
I couldn't resist-- sorry--

00:13:46.320 --> 00:13:48.205
I'm going to show another
one of these--

00:13:48.205 --> 00:13:49.360
PUNYABRATA RAY: Do you know
if there's any other ones

00:13:49.360 --> 00:13:51.080
available that people
have built?

00:13:51.080 --> 00:13:53.180
Or is it just too
soon, maybe, to

00:13:53.180 --> 00:13:55.480
RONGHUA WU: Yeah,
it's too soon.

00:13:55.480 --> 00:13:58.870
But we do have a very simple
one-- that's what I

00:13:58.870 --> 00:13:59.920
mentioned--

00:13:59.920 --> 00:14:04.430
this peer connection server
in the [? code name. ?]

00:14:04.430 --> 00:14:06.775
So we have it on our website--

00:14:06.775 --> 00:14:07.800
open source.

00:14:07.800 --> 00:14:10.360
ERIC BIDELMAN: That's in the
project page for WebRTC?

00:14:10.360 --> 00:14:12.520
Google the project page, yeah.

00:14:12.520 --> 00:14:15.580
So Sam, you want to throw that
one up, too, which is I think

00:14:15.580 --> 00:14:17.155
is probably going to be
off the WebRTC.org.

00:14:17.155 --> 00:14:19.130
PUNYABRATA RAY: Right.

00:14:19.130 --> 00:14:22.880
That's one thing that I think
people as, at least, newcomers

00:14:22.880 --> 00:14:25.460
to this project definitely
need to understand-- that

00:14:25.460 --> 00:14:28.380
there's obviously the client
side things that we're

00:14:28.380 --> 00:14:32.300
providing that will take care
of capturing your microphone

00:14:32.300 --> 00:14:35.810
samples and video frames from
your camera, encoding that,

00:14:35.810 --> 00:14:36.910
sending it out.

00:14:36.910 --> 00:14:39.660
And then there is a server
component that--

00:14:39.660 --> 00:14:42.450
you might have two clients who
can't see each other because

00:14:42.450 --> 00:14:45.120
they're sitting behind
firewalls and such.

00:14:45.120 --> 00:14:48.850
So there's this server component
also that we are

00:14:48.850 --> 00:14:53.180
providing, but people also need
to understand that as, if

00:14:53.180 --> 00:14:57.090
they want to scale this out,
they do need to perhaps spend

00:14:57.090 --> 00:14:59.850
a little bit more time thinking
about how they would

00:14:59.850 --> 00:15:03.360
want to handle 1,000 calls
and things like that.

00:15:03.360 --> 00:15:06.090
But this is a good
start, I think.

00:15:06.090 --> 00:15:07.630
We have sample applications--

00:15:07.630 --> 00:15:10.940
both, obviously on the client
side and the server side.

00:15:10.940 --> 00:15:14.210
And we're going to open up a
real server that we're using.

00:15:14.210 --> 00:15:17.710
So hopefully, these will be good
building steps for people

00:15:17.710 --> 00:15:20.115
to start building their
applications soon.

00:15:20.115 --> 00:15:21.370
SAM DUTTON: Yeah, sure.

00:15:21.370 --> 00:15:23.820
ERIC BIDELMAN: Sam, I wonder if
it makes sense at this time

00:15:23.820 --> 00:15:26.530
to bring up that slide deck and
show that diagram of sort

00:15:26.530 --> 00:15:28.216
of the architecture?

00:15:28.216 --> 00:15:29.140
SAM DUTTON: Yeah.

00:15:29.140 --> 00:15:31.250
Let me just get that.

00:15:31.250 --> 00:15:34.470
Hold on a moment.

00:15:34.470 --> 00:15:35.720
And get that stuff.

00:15:35.720 --> 00:15:37.760
ERIC BIDELMAN: How much stuff
is actually going into the

00:15:37.760 --> 00:15:38.420
project, right?

00:15:38.420 --> 00:15:42.210
There's sort of the browser
implementation, right, which

00:15:42.210 --> 00:15:45.100
is all open source as I
understand it, right?

00:15:45.100 --> 00:15:45.540
PUNYABRATA RAY: Right.

00:15:45.540 --> 00:15:48.200
ERIC BIDELMAN: The browser's
implementation that the

00:15:48.200 --> 00:15:49.490
browser's implementing--

00:15:49.490 --> 00:15:51.780
but there's also all the
JavaScript APIs, which is the

00:15:51.780 --> 00:15:55.190
part where the web developers
come in and play with the

00:15:55.190 --> 00:15:59.680
portion of the WebRTC that you
can actually use from an app.

00:15:59.680 --> 00:16:01.560
And so, Sam I think, is trying
to bring up this really nice,

00:16:01.560 --> 00:16:03.170
sort of diagram showing
all this.

00:16:03.170 --> 00:16:06.145
And what I usually
show people is--

00:16:06.145 --> 00:16:09.300
as soon as he gets it up--
there's a lot under the hood.

00:16:09.300 --> 00:16:11.893
There's a ton of stuff going
on-- and this is what you

00:16:11.893 --> 00:16:12.540
spoke to earlier--

00:16:12.540 --> 00:16:14.720
is that there's a lot of
fine-tuning going on.

00:16:14.720 --> 00:16:16.990
There's a lot of implementation
details.

00:16:16.990 --> 00:16:19.950
And so over time, we're going
to start to work on other

00:16:19.950 --> 00:16:24.120
stuff, as well, like recording,
for instance.

00:16:24.120 --> 00:16:27.520
SAM DUTTON: While I'm getting
this up on-screen, I was

00:16:27.520 --> 00:16:27.960
wondering--

00:16:27.960 --> 00:16:32.940
one thing that I would love
to hear is you WebRTC guys

00:16:32.940 --> 00:16:36.380
talking through the process of
that really basic demo we saw

00:16:36.380 --> 00:16:37.555
right at the start there.

00:16:37.555 --> 00:16:39.460
You know, what's going on?

00:16:39.460 --> 00:16:44.820
Could you talk us through the
process of actually making the

00:16:44.820 --> 00:16:47.760
connection and getting
the video from A to

00:16:47.760 --> 00:16:50.361
B and B to A again.

00:16:50.361 --> 00:16:51.611
PUNYABRATA RAY: Sure.

00:16:53.650 --> 00:16:54.490
I don't know--

00:16:54.490 --> 00:16:56.620
should we start at the lowest
level first, or should we

00:16:56.620 --> 00:16:58.380
start at the highest level,
working down?

00:16:58.380 --> 00:17:01.545
RONGHUA WU: Maybe you can start
with, open up a camera

00:17:01.545 --> 00:17:02.780
and [UNINTELLIGIBLE].

00:17:02.780 --> 00:17:03.690
PUNYABRATA RAY: Right.

00:17:03.690 --> 00:17:03.990
OK.

00:17:03.990 --> 00:17:07.380
So there's two parts.

00:17:07.380 --> 00:17:10.140
From the web developer's
perspective, which is not what

00:17:10.140 --> 00:17:11.020
I'm going to start with.

00:17:11.020 --> 00:17:13.550
You know, they're working with
JavaScript APIs and they're

00:17:13.550 --> 00:17:14.710
going to set up a call.

00:17:14.710 --> 00:17:20.240
But going down to the very low
level, we have what we call

00:17:20.240 --> 00:17:24.460
the voice and video engines
aspect of the WebRTC.

00:17:24.460 --> 00:17:27.690
And these are the engines--
starting from one end, where

00:17:27.690 --> 00:17:31.210
we start grabbing microphone
samples and the video frames

00:17:31.210 --> 00:17:35.460
from the camera, encode them,
and packetize them and send

00:17:35.460 --> 00:17:37.080
them out into the network.

00:17:37.080 --> 00:17:38.880
And on the reverse end,
when we receive

00:17:38.880 --> 00:17:40.470
packets from the network--

00:17:40.470 --> 00:17:45.300
decode them, and then display
and render the decoded video

00:17:45.300 --> 00:17:50.640
frames, and play out the sound
samples to your speakers.

00:17:50.640 --> 00:17:54.820
That's in a nutshell what
the media engines do.

00:17:54.820 --> 00:17:56.340
There's different components.

00:17:56.340 --> 00:17:58.860
For example, there's an acoustic
echo cancellation

00:17:58.860 --> 00:18:02.480
block and a noise suppression
block on the voice engine side

00:18:02.480 --> 00:18:04.620
to provide you really
good quality.

00:18:04.620 --> 00:18:06.960
This is not just about
making video calls.

00:18:06.960 --> 00:18:09.920
This is about providing really,
really good voice and

00:18:09.920 --> 00:18:11.850
video quality.

00:18:11.850 --> 00:18:14.780
And then, in addition to that,
there's the codecs-- the audio

00:18:14.780 --> 00:18:15.690
and video codecs--

00:18:15.690 --> 00:18:18.910
that encode your raw microphone
samples and raw

00:18:18.910 --> 00:18:24.110
video frames so that they're
sent out in a reasonable bit

00:18:24.110 --> 00:18:25.940
rate out to the network.

00:18:25.940 --> 00:18:29.430
And then setting a bit in
conjunction with the video and

00:18:29.430 --> 00:18:32.950
audio codecs are bandwidth
estimation, and traffic

00:18:32.950 --> 00:18:36.450
shaping, and how to adjust
your bit rates based on

00:18:36.450 --> 00:18:37.690
network conditions.

00:18:37.690 --> 00:18:40.880
So that's all on the
media layer side.

00:18:40.880 --> 00:18:44.400
And then on top of that, we want
to encapsulate this so

00:18:44.400 --> 00:18:47.850
that web developers don't need
to worry about this.

00:18:47.850 --> 00:18:51.360
And it will work on any
platforms. Then on top of

00:18:51.360 --> 00:18:56.030
that, sits some of how this
talks to the browsers and on

00:18:56.030 --> 00:18:58.360
top of that, the JavaScript
layers.

00:18:58.360 --> 00:19:01.220
And maybe, Ronghua you can speak
a little about that--

00:19:01.220 --> 00:19:02.870
about the peer connection
APIs.

00:19:02.870 --> 00:19:04.495
RONGHUA WU: Yeah, I guess
you covered it well.

00:19:07.040 --> 00:19:12.460
Another thing is, if you have
two browsers behind the

00:19:12.460 --> 00:19:15.930
firewall, we need to find
out a way for them to

00:19:15.930 --> 00:19:16.910
talk to each other.

00:19:16.910 --> 00:19:20.110
That is when your net
[UNINTELLIGIBLE]

00:19:20.110 --> 00:19:20.510
.

00:19:20.510 --> 00:19:26.560
Kick in So there is some
technique inside libjingle.

00:19:26.560 --> 00:19:35.290
So basically, you need to talk
to a server with a public IP.

00:19:35.290 --> 00:19:36.370
We call it a [? scan ?]

00:19:36.370 --> 00:19:37.490
server.

00:19:37.490 --> 00:19:41.160
You talk to that server, then
that server will figure out

00:19:41.160 --> 00:19:44.120
which part is reachable
to you.

00:19:44.120 --> 00:19:46.870
And then in that phase
we call it candidates

00:19:46.870 --> 00:19:50.640
So when you collect all the
candidates , you exchange the

00:19:50.640 --> 00:19:53.070
candidates with the
remote peer.

00:19:53.070 --> 00:19:56.220
That remote peer knows
how to reach you.

00:20:00.130 --> 00:20:05.070
After that we can send the media
stream we produced by

00:20:05.070 --> 00:20:06.320
the media engine.

00:20:08.900 --> 00:20:11.870
So that's how a call--

00:20:11.870 --> 00:20:13.865
we set up.

00:20:13.865 --> 00:20:17.760
PUNYABRATA RAY: And so from the
web developer perspective,

00:20:17.760 --> 00:20:21.670
you would just call these peer
connection APIs, which you

00:20:21.670 --> 00:20:24.630
might see the layer that Ronghua
just spoke about.

00:20:24.630 --> 00:20:28.050
And then once the media's
established, that media is

00:20:28.050 --> 00:20:31.343
passed to the media engine
layer underneath WebRTC.

00:20:31.343 --> 00:20:32.230
SAM DUTTON: That's it.

00:20:32.230 --> 00:20:32.670
Right.

00:20:32.670 --> 00:20:34.033
I've just posted--

00:20:34.033 --> 00:20:35.740
ERIC BIDELMAN: It is complex.

00:20:35.740 --> 00:20:37.300
SAM DUTTON: Yeah, it's
pretty complex.

00:20:37.300 --> 00:20:39.970
But I've just posted a link
if you can see that the

00:20:39.970 --> 00:20:43.760
apprtc.appspot.com link there.

00:20:43.760 --> 00:20:46.440
That's to the really
simple demo.

00:20:46.440 --> 00:20:49.480
So if you want to take a look
at the code there, that's a

00:20:49.480 --> 00:20:52.020
really good place
to get started.

00:20:52.020 --> 00:20:54.580
I've also put up a link you
can see above that to

00:20:54.580 --> 00:21:00.130
demo.appspot.com To the
architecture diagram that Eric

00:21:00.130 --> 00:21:02.150
was talking about.

00:21:02.150 --> 00:21:04.400
I think if I can get that
up on-screen now--

00:21:07.100 --> 00:21:11.150
I'll try and do a screen
share of that one.

00:21:11.150 --> 00:21:11.810
OK.

00:21:11.810 --> 00:21:14.525
So I'm showing that stuff now.

00:21:14.525 --> 00:21:16.875
ERIC BIDELMAN: Can you zoom
in on the slides?

00:21:16.875 --> 00:21:17.640
SAM DUTTON: Yeah.

00:21:17.640 --> 00:21:21.050
Let's try and improve
that a bit.

00:21:21.050 --> 00:21:21.560
How's that?

00:21:21.560 --> 00:21:23.196
That's pretty good, yeah?

00:21:23.196 --> 00:21:24.380
ERIC BIDELMAN: A little
bit more, maybe.

00:21:24.380 --> 00:21:25.630
Yeah.

00:21:28.060 --> 00:21:29.190
Yeah, that's great.

00:21:29.190 --> 00:21:30.225
SAM DUTTON: How we doing?

00:21:30.225 --> 00:21:32.650
I could even go a little
bit further, maybe.

00:21:32.650 --> 00:21:35.400
Maybe that was one step
over the line.

00:21:38.630 --> 00:21:41.260
Ray and Ronghua , could you--

00:21:41.260 --> 00:21:43.600
just to repeat everything
you've just told me--

00:21:46.740 --> 00:21:48.580
can you talk us through this--

00:21:48.580 --> 00:21:53.880
what looks in some ways a
rather complex diagram?

00:21:53.880 --> 00:21:57.280
It would be great to hear from
you, from kind of top to

00:21:57.280 --> 00:21:59.470
bottom, what's going
on in this diagram.

00:21:59.470 --> 00:22:01.860
PUNYABRATA RAY: Sure,
absolutely.

00:22:01.860 --> 00:22:03.680
I'll start, Ronghua.

00:22:03.680 --> 00:22:08.860
So the one thing when someone
looks at this diagram is--

00:22:08.860 --> 00:22:13.000
definitely look at the different
colors and what as a

00:22:13.000 --> 00:22:16.940
web developer, as opposed to a
browser implementer, what they

00:22:16.940 --> 00:22:19.830
really need to worry about.

00:22:19.830 --> 00:22:25.260
So essentially, I'm assuming
most of the people who look at

00:22:25.260 --> 00:22:27.190
this hangout will be
web developers.

00:22:27.190 --> 00:22:32.140
And what they first need to
think about is, essentially,

00:22:32.140 --> 00:22:36.580
the top level-- where you have
yellow arrows in this diagram.

00:22:36.580 --> 00:22:39.560
Your web application and what
they're going to essentially

00:22:39.560 --> 00:22:41.680
design-- a website
or a web app.

00:22:41.680 --> 00:22:46.110
And that will essentially then
talk to these web APIs, which

00:22:46.110 --> 00:22:49.690
are the peer connection APIs
that are currently being

00:22:49.690 --> 00:22:54.020
discussed and ratified
in the W3W.

00:22:54.020 --> 00:22:54.660
RONGHUA WU: W3C.

00:22:54.660 --> 00:22:56.060
PUNYABRATA RAY: W3C, sorry--

00:22:56.060 --> 00:22:58.570
World Wide Consortium.

00:22:58.570 --> 00:23:00.870
And those are the peer
connection APIs.

00:23:00.870 --> 00:23:05.420
The layer that Ronghua earlier
talked about, where these will

00:23:05.420 --> 00:23:08.690
essentially set up the call and
once the call is set up,

00:23:08.690 --> 00:23:11.890
pass the media blocks into
the media engines.

00:23:11.890 --> 00:23:14.850
So then as you move down--

00:23:14.850 --> 00:23:18.580
that purple arrow going into
the WebRTC C API peer

00:23:18.580 --> 00:23:19.770
connection--

00:23:19.770 --> 00:23:24.810
this section is how the
different browser vendors have

00:23:24.810 --> 00:23:30.770
to worry about, from Chrome
to Mozilla, to Opera.

00:23:30.770 --> 00:23:35.300
This will somewhat be different
between the

00:23:35.300 --> 00:23:36.690
different--

00:23:36.690 --> 00:23:39.140
how they choose to implement
the peer connection APIs

00:23:39.140 --> 00:23:40.195
within their browser.

00:23:40.195 --> 00:23:42.890
And correct me if I'm
wrong, Ronghua. .

00:23:42.890 --> 00:23:44.730
So the web developers
don't really have

00:23:44.730 --> 00:23:45.500
to worry about that.

00:23:45.500 --> 00:23:47.940
Again, we're now getting to the
layer which-- this will be

00:23:47.940 --> 00:23:50.460
encapsulated within the
browsers itself.

00:23:50.460 --> 00:23:54.460
And then the layers
beneath that are--

00:23:54.460 --> 00:23:58.260
what I mentioned about the
physical media engines, where

00:23:58.260 --> 00:24:00.920
we handle the actual media
processing of the voice and

00:24:00.920 --> 00:24:03.100
video packets--

00:24:03.100 --> 00:24:06.410
the different codecs used to
encode and decode, the traffic

00:24:06.410 --> 00:24:09.460
shaping, the acoustic echo
cancellation blocks.

00:24:09.460 --> 00:24:13.210
So those are the lower
level purple blocks.

00:24:13.210 --> 00:24:15.820
And Ronghua , I'm not sure--
the session management

00:24:15.820 --> 00:24:17.980
abstract signaling layer.

00:24:17.980 --> 00:24:21.630
I don't know how that quite fits
in, or if we need to go

00:24:21.630 --> 00:24:24.710
into that in this part, or
that's encapsulated by the

00:24:24.710 --> 00:24:26.454
peer connection.

00:24:26.454 --> 00:24:30.945
RONGHUA WU: Yeah, in this
diagram, this is the

00:24:30.945 --> 00:24:38.070
signaling, and session is part
of this WebRTC C API.

00:24:38.070 --> 00:24:41.840
So the discussion going on
that might be moved up a

00:24:41.840 --> 00:24:45.340
little bit so that the
application developers have

00:24:45.340 --> 00:24:50.010
the flexability to choose
whatever signaling protocol

00:24:50.010 --> 00:24:54.270
they want to use in
their application.

00:24:57.454 --> 00:25:00.370
Yeah.

00:25:00.370 --> 00:25:02.650
ERIC BIDELMAN: So I'm glad
Sam is showing this.

00:25:02.650 --> 00:25:06.360
Because it's illustrative of
what the platform is doing

00:25:06.360 --> 00:25:06.950
these days, right?

00:25:06.950 --> 00:25:09.300
There's a lot of guts to it.

00:25:09.300 --> 00:25:11.460
There's a lot of core
implementations that the

00:25:11.460 --> 00:25:14.070
browser is taking care for you
as you look at this diagram.

00:25:14.070 --> 00:25:15.940
Everything below that--

00:25:15.940 --> 00:25:18.360
in that lighter gray box--
everything below those arrows

00:25:18.360 --> 00:25:20.400
is totally a black box.

00:25:20.400 --> 00:25:21.730
You don't have to
worry about it.

00:25:21.730 --> 00:25:22.700
PUNYABRATA RAY: That's
a good point.

00:25:22.700 --> 00:25:24.890
ERIC BIDELMAN: Another thing
is the JavaScript APIs that

00:25:24.890 --> 00:25:26.300
you built on top of.

00:25:26.300 --> 00:25:26.910
But they're--

00:25:26.910 --> 00:25:28.850
just keep in mind-- it's
important to know that there's

00:25:28.850 --> 00:25:30.690
a lot of stuff built into these

00:25:30.690 --> 00:25:32.900
different HTML5 APIs now.

00:25:32.900 --> 00:25:34.430
Another example is
WebGL, right?

00:25:34.430 --> 00:25:37.740
You can access the GPU and the
graphics card with a couple

00:25:37.740 --> 00:25:39.670
lines of JavaScript.

00:25:39.670 --> 00:25:40.740
It's ridiculous.

00:25:40.740 --> 00:25:42.860
It's ridiculously cool
is what it is.

00:25:42.860 --> 00:25:47.510
So kudos to Google and the
engineers at Google for

00:25:47.510 --> 00:25:51.186
implementing all this crazy,
awesome stuff for us.

00:25:51.186 --> 00:25:52.790
SAM DUTTON: That's
good to hear.

00:25:52.790 --> 00:25:54.260
Look, I can't resist--

00:25:54.260 --> 00:25:54.960
sorry--

00:25:54.960 --> 00:25:58.280
just to break from the
technicalities for a moment.

00:25:58.280 --> 00:26:04.005
I just wanted to go to another
demo of get user media that I

00:26:04.005 --> 00:26:05.740
really like.

00:26:05.740 --> 00:26:10.350
If I can just share that.

00:26:10.350 --> 00:26:14.738
In a few seconds, I'll
just move the video.

00:26:14.738 --> 00:26:18.300
And I just wanted to show this
because, again, we're doing

00:26:18.300 --> 00:26:23.435
stuff with live video data.

00:26:23.435 --> 00:26:27.230
I don't know if anyone remembers
the exploding video

00:26:27.230 --> 00:26:30.310
experiment that Sean
Christman did.

00:26:30.310 --> 00:26:32.760
So here you can see, me
on the video there.

00:26:32.760 --> 00:26:36.130
I'll try and increase
the size a bit.

00:26:36.130 --> 00:26:39.940
And you can see that
if I click on

00:26:39.940 --> 00:26:42.800
the picture, it explodes.

00:26:42.800 --> 00:26:44.850
And what's cool is that you
could see that all those

00:26:44.850 --> 00:26:47.990
individual pieces are still
rendering the video.

00:26:50.530 --> 00:26:53.300
If you can see, the little
squares are still showing

00:26:53.300 --> 00:26:56.530
live, the stuff as
I move around.

00:26:56.530 --> 00:26:58.330
That makes it a little
clearer.

00:26:58.330 --> 00:26:59.940
So I just love that
there is so much

00:26:59.940 --> 00:27:02.280
potential for this stuff--

00:27:02.280 --> 00:27:06.100
some useful stuff, and obviously
some fun stuff like

00:27:06.100 --> 00:27:07.580
that, as well.

00:27:07.580 --> 00:27:11.750
Just going back to the Moderator
questions, another

00:27:11.750 --> 00:27:16.400
one we've heard a lot of is
asking if the API is going to

00:27:16.400 --> 00:27:19.510
become available on
mobile devices.

00:27:19.510 --> 00:27:23.800
And particularly, what obstacles
do we need to

00:27:23.800 --> 00:27:26.300
overcome before we can
get to that point?

00:27:26.300 --> 00:27:29.736
So could I turn over to
Ray and Ronghua again?

00:27:29.736 --> 00:27:30.570
PUNYABRATA RAY: Yeah.

00:27:30.570 --> 00:27:34.340
No, definitely, I think that's
also one of our high

00:27:34.340 --> 00:27:36.710
priorities in the future.

00:27:36.710 --> 00:27:40.590
Once we know that this is
stabilized on the desktop

00:27:40.590 --> 00:27:45.230
platforms, we would love to
move this to the mobile

00:27:45.230 --> 00:27:48.800
devices, both Android and iOS.

00:27:48.800 --> 00:27:52.700
Unfortunately, I don't know what
our exact timelines are.

00:27:52.700 --> 00:27:55.530
But I know that this is
something we would be very,

00:27:55.530 --> 00:27:57.930
very focused on in moving.

00:27:57.930 --> 00:28:01.420
So the obstacles essentially
right now is time.

00:28:01.420 --> 00:28:04.170
There are so many engineers and
we just need to focus on

00:28:04.170 --> 00:28:08.110
getting this working perfectly
on a certain platform--

00:28:08.110 --> 00:28:09.350
the desktop platforms--

00:28:09.350 --> 00:28:14.906
and then move ahead to
the mobile platforms.

00:28:14.906 --> 00:28:16.400
SAM DUTTON: That's
great to hear.

00:28:20.646 --> 00:28:21.900
PUNYABRATA RAY: Oh, Sam?

00:28:21.900 --> 00:28:24.708
I think we lost your audio.

00:28:24.708 --> 00:28:26.070
SAM DUTTON: Oh, sorry.

00:28:26.070 --> 00:28:26.700
Is that better?

00:28:26.700 --> 00:28:27.540
Yes.

00:28:27.540 --> 00:28:29.020
I think I'm back.

00:28:29.020 --> 00:28:29.360
OK, good.

00:28:29.360 --> 00:28:30.840
I have a mic.

00:28:30.840 --> 00:28:34.630
Just moving down the
questions, I

00:28:34.630 --> 00:28:36.390
have another one here.

00:28:36.390 --> 00:28:41.190
Someone is asking if we could
give more details about

00:28:41.190 --> 00:28:42.350
multi-peer issues.

00:28:42.350 --> 00:28:45.980
Could you explain a little about
that, and tell us what

00:28:45.980 --> 00:28:48.642
the situation is?

00:28:48.642 --> 00:28:50.260
PUNYABRATA RAY: Sure.

00:28:50.260 --> 00:28:53.040
Let me actually just understand
the question a bit.

00:28:53.040 --> 00:28:56.900
Could you give more details
about multi-peer issues.

00:28:56.900 --> 00:29:01.540
So I'm going to interpret this
question as the user wants to

00:29:01.540 --> 00:29:06.810
know essentially how to set up
like, a video conference

00:29:06.810 --> 00:29:08.350
apparently using--

00:29:08.350 --> 00:29:15.800
So what we allow today is the
ability to make peer-to-peer

00:29:15.800 --> 00:29:21.090
calls and the media is
essentially relayed through

00:29:21.090 --> 00:29:22.340
different servers.

00:29:24.750 --> 00:29:27.360
I don't know if it is possible
today, but it should be

00:29:27.360 --> 00:29:30.150
possible in the future to
be able to render--

00:29:30.150 --> 00:29:33.270
if you have multiple video
streams coming in--

00:29:33.270 --> 00:29:35.630
to render the multiple images.

00:29:35.630 --> 00:29:36.670
That's true.

00:29:36.670 --> 00:29:38.130
Right, Ronghua?

00:29:38.130 --> 00:29:42.970
RONGHUA WU: Yeah, that
sounds right.

00:29:42.970 --> 00:29:45.430
I'm reading this question.

00:29:45.430 --> 00:29:51.440
I'm thinking maybe he was
asking how to maybe have

00:29:51.440 --> 00:29:54.350
multiple peer connections
in one place.

00:29:54.350 --> 00:29:54.900
PUNYABRATA RAY: Browser?

00:29:54.900 --> 00:29:58.910
RONGHUA WU: Because this is
one issue I know of--

00:29:58.910 --> 00:30:01.560
not issue-- but, not
implemented yet.

00:30:01.560 --> 00:30:05.580
We only support one peer
connection in one

00:30:05.580 --> 00:30:08.453
page at this moment.

00:30:08.453 --> 00:30:10.890
PUNYABRATA RAY: But that's
definitely something that's

00:30:10.890 --> 00:30:12.300
going to be changed
and we're going to

00:30:12.300 --> 00:30:15.490
support that in the future.

00:30:15.490 --> 00:30:17.020
ERIC BIDELMAN: Is this something
that the current

00:30:17.020 --> 00:30:20.470
specification talks about at
all, or is it just talking

00:30:20.470 --> 00:30:23.625
about one-to-one and
peer-to-peer?

00:30:23.625 --> 00:30:24.570
PUNYABRATA RAY: That's
a good question.

00:30:24.570 --> 00:30:25.860
I don't know.

00:30:29.374 --> 00:30:32.682
[LAUGHTER]

00:30:32.682 --> 00:30:33.190
SAM DUTTON: OK.

00:30:33.190 --> 00:30:37.450
So another question we had
earlier on on Moderator from

00:30:37.450 --> 00:30:42.160
Clive Bolton, asking if the
standard behind the API is

00:30:42.160 --> 00:30:46.660
designed more for asynchronous
or synchronous communication.

00:30:46.660 --> 00:30:47.160
[UNINTELLIGIBLE]

00:30:47.160 --> 00:30:52.140
in either case is a concept of
time bounding, making latency

00:30:52.140 --> 00:30:53.390
predictable.

00:30:56.276 --> 00:30:58.710
PUNYABRATA RAY: This question,
given that there are so many

00:30:58.710 --> 00:31:00.330
layers in WebRTC--

00:31:00.330 --> 00:31:03.200
there's the media layer,
and the voice and

00:31:03.200 --> 00:31:06.120
video engine packets.

00:31:06.120 --> 00:31:08.230
The way it's been designed, the
voice and video streams

00:31:08.230 --> 00:31:10.990
take different routes through
the networks, and are

00:31:10.990 --> 00:31:14.140
subjected to different
latencies and paths.

00:31:14.140 --> 00:31:18.240
And our engines have been
designed to overcome that.

00:31:18.240 --> 00:31:20.430
They will work irrespective
of that.

00:31:20.430 --> 00:31:25.540
However, I'm not sure exactly
which aspect of WebRTC this

00:31:25.540 --> 00:31:26.640
question is designed to.

00:31:26.640 --> 00:31:29.500
If he's actually talking about
the media layer or if he's

00:31:29.500 --> 00:31:32.960
talking about the
JavaScript APIs.

00:31:32.960 --> 00:31:34.910
So I'm not sure exactly
how to answer that.

00:31:34.910 --> 00:31:36.970
I don't know what your take
on that is, Ronghua.

00:31:36.970 --> 00:31:41.820
RONGHUA WU: I don't have a good
answer for that, either.

00:31:41.820 --> 00:31:43.200
PUNYABRATA RAY: Right.

00:31:43.200 --> 00:31:45.340
SAM DUTTON: One thing I was
going to say that--

00:31:45.340 --> 00:31:47.400
I'll put up the link
in a moment.

00:31:47.400 --> 00:31:52.790
But if people have comments on
the answers that we've had to

00:31:52.790 --> 00:31:58.200
questions, if they can add
comments to the Google page,

00:31:58.200 --> 00:32:00.530
that would be great.

00:32:00.530 --> 00:32:03.456
And I'll put up a link
to that in a moment.

00:32:03.456 --> 00:32:06.110
ERIC BIDELMAN: Just to speak
to that question-- if he is

00:32:06.110 --> 00:32:12.290
talking about the JavaScript
application APIs--

00:32:12.290 --> 00:32:14.210
it is an asynchronous API.

00:32:14.210 --> 00:32:15.420
You're sort of adding
messages, you're

00:32:15.420 --> 00:32:16.610
doing message passing.

00:32:16.610 --> 00:32:21.460
And that's good because like a
lot of offline APIs, Indexed

00:32:21.460 --> 00:32:25.330
DB, the file system APIs, some
of these other APIs that are

00:32:25.330 --> 00:32:27.880
coming online, they're always
synchronous because there's a

00:32:27.880 --> 00:32:29.970
lot of stuff going on when
you're making these calls.

00:32:29.970 --> 00:32:33.350
And the last thing you want to
do is sort of freeze up your

00:32:33.350 --> 00:32:35.490
JavaScript main UI thread.

00:32:35.490 --> 00:32:38.200
So I think in the future, you're
going to see a ton of

00:32:38.200 --> 00:32:39.590
asynchronous JavaScript APIs.

00:32:39.590 --> 00:32:41.670
It's sort of the way
things are going.

00:32:41.670 --> 00:32:44.350
Unfortunately, JavaScript's a
single threaded environment,

00:32:44.350 --> 00:32:47.280
so you have to do that in order
to make applications

00:32:47.280 --> 00:32:50.770
that people don't tear their
hair out for because it's so

00:32:50.770 --> 00:32:53.260
slow and obnoxious.

00:32:53.260 --> 00:32:54.900
SAM DUTTON: Sure.

00:32:54.900 --> 00:32:55.490
Yeah.

00:32:55.490 --> 00:32:58.080
A question from a
guy called Pete.

00:32:58.080 --> 00:32:59.210
He's in Mountain View.

00:32:59.210 --> 00:33:01.630
I think that that's
in California.

00:33:01.630 --> 00:33:05.610
He's asking what codec is
Google's implementation of

00:33:05.610 --> 00:33:08.990
WebRTC encoding the
video stream with.

00:33:08.990 --> 00:33:12.450
And what do the other browser
vendors think?

00:33:12.450 --> 00:33:14.910
He says that he reckons Opera's

00:33:14.910 --> 00:33:16.920
working on this, as well.

00:33:16.920 --> 00:33:18.165
What's the story?

00:33:18.165 --> 00:33:24.191
Are we working with VP8, and
what's the future there?

00:33:24.191 --> 00:33:29.280
PUNYABRATA RAY: Yes, we are
using VP8, which was part of a

00:33:29.280 --> 00:33:32.820
company called On2 that Google
acquired a few years back.

00:33:32.820 --> 00:33:35.850
And Google has open sourced
this video codec.

00:33:35.850 --> 00:33:37.130
It's completely out there.

00:33:37.130 --> 00:33:39.130
It's part of the WebM Project.

00:33:39.130 --> 00:33:43.770
And given that the whole
objective of WebRTC is to be

00:33:43.770 --> 00:33:48.490
open, we decided to go with VP8
and not have any loyalty

00:33:48.490 --> 00:33:51.960
encumbered codecs to use with
an open source project.

00:33:51.960 --> 00:33:56.285
So we are using VP8 today
as a video codec.

00:33:58.860 --> 00:34:05.690
As far as what the other
browsers vendors think, I

00:34:05.690 --> 00:34:07.000
can't really comment on that.

00:34:07.000 --> 00:34:12.139
But again, given the fact that
VP8 is open source, I think

00:34:12.139 --> 00:34:13.560
they're pretty much on board.

00:34:13.560 --> 00:34:16.989
But again, that's just
my personal--

00:34:16.989 --> 00:34:20.670
I'm sure the big question is
interoperability and what's

00:34:20.670 --> 00:34:23.159
going to happen with H264.

00:34:23.159 --> 00:34:27.760
That's something that comes up a
lot in our discussion lists.

00:34:27.760 --> 00:34:31.699
And it's just that that's
big on our minds, too.

00:34:31.699 --> 00:34:35.380
But again, we want to stay
with an open source

00:34:35.380 --> 00:34:38.150
royalty-free codec so that
anyone can use this and not

00:34:38.150 --> 00:34:41.699
have to worry about royalties.

00:34:41.699 --> 00:34:43.739
ERIC BIDELMAN: This kind of
segues nicely into a question

00:34:43.739 --> 00:34:46.909
I'm seeing later on from Neo
in New York City-- is about

00:34:46.909 --> 00:34:48.340
sort of other browser
vendors--

00:34:48.340 --> 00:34:49.020
Firefox--

00:34:49.020 --> 00:34:52.440
i.e., Safari-- working on WebRTC
and implementing it in

00:34:52.440 --> 00:34:53.300
their browsers.

00:34:53.300 --> 00:34:57.180
Could we talk a little bit about
sort of what's going on

00:34:57.180 --> 00:34:58.215
with the community?

00:34:58.215 --> 00:34:59.150
PUNYABRATA RAY: Sure.

00:34:59.150 --> 00:35:02.620
And Ronghua, cut me in or
because you might know more.

00:35:02.620 --> 00:35:05.132
RONGHUA WU: No, you have
more information.

00:35:05.132 --> 00:35:07.780
PUNYABRATA RAY: So I
know that we are--

00:35:07.780 --> 00:35:10.090
so the peer connection
APIs, for example.

00:35:10.090 --> 00:35:13.000
This is being ratified in
the standard at Mozilla.

00:35:13.000 --> 00:35:14.460
It's part of that.

00:35:14.460 --> 00:35:19.330
So this is just not solely
a Google initiative.

00:35:19.330 --> 00:35:23.380
We start this, but we would like
other browser vendors to

00:35:23.380 --> 00:35:26.670
obviously, use WebRTC.

00:35:26.670 --> 00:35:29.280
So we're working with Mozilla,
and we're also

00:35:29.280 --> 00:35:32.070
working with Opera.

00:35:32.070 --> 00:35:34.410
IE and Safari right now--

00:35:34.410 --> 00:35:36.380
I don't know what the
engagement level is,

00:35:36.380 --> 00:35:39.560
especially with IE
at this point.

00:35:39.560 --> 00:35:42.310
So essentially I don't know,
and I can't make

00:35:42.310 --> 00:35:44.050
much comments on it.

00:35:44.050 --> 00:35:46.010
Same thing with Apple, Safari.

00:35:46.010 --> 00:35:49.450
I believe they're
also actually--

00:35:49.450 --> 00:35:52.320
people from Apple-- are
part of the standards.

00:35:52.320 --> 00:35:56.330
I don't know if they're going to
go with WebRTC and Safari.

00:35:56.330 --> 00:35:57.030
But--

00:35:57.030 --> 00:35:57.480
think--

00:35:57.480 --> 00:36:00.380
I believe they're working
on the standards, also.

00:36:00.380 --> 00:36:04.430
So essentially, to wrap that
up, Mozilla and Opera are

00:36:04.430 --> 00:36:06.280
definitely currently on board.

00:36:06.280 --> 00:36:09.450
Apple, I believe is working
on the standards and I'm

00:36:09.450 --> 00:36:11.096
not sure about IE.

00:36:11.096 --> 00:36:12.230
SAM DUTTON: Cool.

00:36:12.230 --> 00:36:15.000
While we're on the subject of
browsers, a question a lot of

00:36:15.000 --> 00:36:19.370
people ask me pretty regularly
is, when might we see this in

00:36:19.370 --> 00:36:21.830
Chrome's stable?

00:36:21.830 --> 00:36:24.110
Do we have any sense of when
that might happen?

00:36:24.110 --> 00:36:24.670
PUNYABRATA RAY: Yeah.

00:36:24.670 --> 00:36:26.390
No, that's a really
good question.

00:36:26.390 --> 00:36:29.070
So right now it sits
behind a flag.

00:36:29.070 --> 00:36:33.390
There's essentially two main
things before we can

00:36:33.390 --> 00:36:36.840
completely open this up, and
it's not behind a flag.

00:36:36.840 --> 00:36:40.330
One is the fact that the peer
connection APIs are still

00:36:40.330 --> 00:36:41.820
somewhat in a state of flux.

00:36:41.820 --> 00:36:44.310
It's still being ratified.

00:36:44.310 --> 00:36:49.370
So once that is in a state,
maybe in the next few months--

00:36:49.370 --> 00:36:51.760
my guess-- but I might
be completely wrong.

00:36:51.760 --> 00:36:54.510
So the next few-- so I think
we're currently on any team

00:36:54.510 --> 00:36:55.280
that's been open.

00:36:55.280 --> 00:37:00.670
Maybe by M20, M21, they should
be not sitting behind a flag.

00:37:00.670 --> 00:37:02.630
That's just my guess.

00:37:02.630 --> 00:37:06.020
And the second aspect of
this is, also we need

00:37:06.020 --> 00:37:06.990
people to try it out.

00:37:06.990 --> 00:37:09.420
If there's any major issues out
there, we would like to

00:37:09.420 --> 00:37:12.680
fix those before opening
this up by default .

00:37:12.680 --> 00:37:14.250
ERIC BIDELMAN: And this
is my plea to you

00:37:14.250 --> 00:37:15.270
developers out there.

00:37:15.270 --> 00:37:18.940
The reason a lot of these APIs
exist behind about [? dot ?]

00:37:18.940 --> 00:37:21.330
flags or behind a flag
in general is for

00:37:21.330 --> 00:37:22.190
you to try them out.

00:37:22.190 --> 00:37:25.000
They're still being actively
worked on.

00:37:25.000 --> 00:37:29.650
And so this is my pitch to
install Chrome Canary, right?

00:37:29.650 --> 00:37:31.910
This is our nightly
build of Chrome.

00:37:31.910 --> 00:37:34.340
You saw the Dev channel
build of Chrome.

00:37:34.340 --> 00:37:37.670
We actually rely on you guys
very heavily to submit bugs,

00:37:37.670 --> 00:37:40.920
to tell us what's wrong with
these APIs, to test them in

00:37:40.920 --> 00:37:44.460
the field, so to speak, even
if it's just a prototype.

00:37:44.460 --> 00:37:45.910
It's really useful
information.

00:37:45.910 --> 00:37:47.850
And of course, you can
always file bugs.

00:37:47.850 --> 00:37:50.260
Chrome is an open source
project and we very

00:37:50.260 --> 00:37:51.900
much look at those.

00:37:51.900 --> 00:37:54.310
I look at Issue-Tracker
every day of my life.

00:37:58.310 --> 00:37:59.740
SAM DUTTON: That's
good to hear.

00:38:02.880 --> 00:38:05.520
I know the feeling.

00:38:05.520 --> 00:38:07.310
We had another question here.

00:38:07.310 --> 00:38:11.460
Let's just look down at the
list of stuff here.

00:38:11.460 --> 00:38:15.030
Someone asking about
web socket API to

00:38:15.030 --> 00:38:17.510
transfer audio and video.

00:38:17.510 --> 00:38:22.850
From what I believe, this has
been possible in Chrome.

00:38:22.850 --> 00:38:25.430
I think since Chrome 16.

00:38:25.430 --> 00:38:29.920
And on the service side, there
are some libraries that

00:38:29.920 --> 00:38:32.160
support that.

00:38:32.160 --> 00:38:37.620
So there are going to be, I
believe, some demos at some

00:38:37.620 --> 00:38:38.420
stage about this.

00:38:38.420 --> 00:38:41.455
So maybe, Eric, can you
enlighten us on this?

00:38:41.455 --> 00:38:43.130
ERIC BIDELMAN: I can.

00:38:43.130 --> 00:38:44.950
So this is something I've
actually been interested in

00:38:44.950 --> 00:38:47.385
for a long time, is
to be able to--

00:38:47.385 --> 00:38:50.590
there's not really a good
solution for streaming audio.

00:38:50.590 --> 00:38:55.240
So I wanted to see if it was
possible, just as a prototype,

00:38:55.240 --> 00:38:58.890
to build something that used
the web socket API.

00:38:58.890 --> 00:39:01.190
So web sockets now support
sending binary data.

00:39:01.190 --> 00:39:05.040
You can send a file or a blog,
which is exactly what you need

00:39:05.040 --> 00:39:10.420
for low latency transfer of sort
of an audio-type file.

00:39:10.420 --> 00:39:14.030
So using a web socket-- a binary
web socket-- with the

00:39:14.030 --> 00:39:17.790
web audio API that's
in Chrome--

00:39:17.790 --> 00:39:21.120
what that allows you to do is
basically send small chunks of

00:39:21.120 --> 00:39:23.670
an audio file across
a web socket.

00:39:23.670 --> 00:39:26.040
It's sort of a poor man's
streaming, as I

00:39:26.040 --> 00:39:27.080
like to call it.

00:39:27.080 --> 00:39:28.590
And then on the other side--

00:39:28.590 --> 00:39:31.750
on the receiver side-- you can
use the web audio API to

00:39:31.750 --> 00:39:35.520
schedule precisely when each
chunk should play.

00:39:35.520 --> 00:39:39.240
So as the receiver starts to get
these chunks, you start to

00:39:39.240 --> 00:39:42.670
append them on, and schedule
them at precise times when

00:39:42.670 --> 00:39:44.350
they were supposed to play
in the initial song.

00:39:44.350 --> 00:39:47.945
And so it pretty much just
sounds like the song is

00:39:47.945 --> 00:39:49.410
playing straight through.

00:39:49.410 --> 00:39:50.980
So it's very much
[? a perfect ?] concept, and I

00:39:50.980 --> 00:39:53.880
plan to write an article
on it for html5rocks.

00:39:53.880 --> 00:39:55.580
So stay tuned for that.

00:39:55.580 --> 00:39:59.550
But combining web socket API
with the web audio API, you

00:39:59.550 --> 00:40:03.150
can definitely do audio
and video streaming.

00:40:03.150 --> 00:40:06.520
There's also another API that's
in Chrome and being

00:40:06.520 --> 00:40:07.140
speced out.

00:40:07.140 --> 00:40:09.440
It's called the MediaSource
API.

00:40:09.440 --> 00:40:13.686
And essentially, what that
allows you to do is sort of

00:40:13.686 --> 00:40:16.330
something similar-- use a video
tag or an audio tag and

00:40:16.330 --> 00:40:23.180
sort of use XMLHttpRequest to
pull down chunks of audio or

00:40:23.180 --> 00:40:26.000
video, and then append
those to a video tag.

00:40:26.000 --> 00:40:28.610
So that's also kind of a poor
man's streaming, if you will.

00:40:28.610 --> 00:40:31.640
But it does do the job,
and it allows you to--

00:40:31.640 --> 00:40:33.940
I think what the question is
sort of getting at is to do

00:40:33.940 --> 00:40:35.380
some [UNINTELLIGIBLE]
streaming--

00:40:35.380 --> 00:40:36.475
audio and video.

00:40:36.475 --> 00:40:39.640
SAM DUTTON: Yeah, I've seen some
great demos of that stuff

00:40:39.640 --> 00:40:41.260
and lots of possibilities.

00:40:41.260 --> 00:40:42.290
It kind of--

00:40:42.290 --> 00:40:44.160
I don't know if that's the
word-- but it kind of

00:40:44.160 --> 00:40:46.680
[? fake ?] almost
[? seductive ?] streaming

00:40:46.680 --> 00:40:51.070
model for that giving different
media depending on

00:40:51.070 --> 00:40:51.515
the situation.

00:40:51.515 --> 00:40:53.020
ERIC BIDELMAN: There's a couple
APIs that play now that

00:40:53.020 --> 00:40:55.270
allow you to do similar things,
but different use

00:40:55.270 --> 00:40:55.970
cases, right?

00:40:55.970 --> 00:40:59.450
There's WebRTC for certain use
cases and direct peer-to-peer

00:40:59.450 --> 00:41:00.400
connections.

00:41:00.400 --> 00:41:02.730
Web sockets do similar
things to that, but

00:41:02.730 --> 00:41:03.620
different use cases.

00:41:03.620 --> 00:41:05.107
And then there's these
other APIs that are

00:41:05.107 --> 00:41:06.020
sort of at play, too.

00:41:06.020 --> 00:41:09.950
So it's kind of choose your own
battle, and use the right

00:41:09.950 --> 00:41:12.995
technology or API for the job
that you're trying to do.

00:41:12.995 --> 00:41:13.720
SAM DUTTON: Yeah.

00:41:13.720 --> 00:41:16.420
We've got another question
coming from California, which

00:41:16.420 --> 00:41:18.440
is interesting to
me, actually.

00:41:18.440 --> 00:41:23.210
So we have a stack of new APIs,
and what this guy's

00:41:23.210 --> 00:41:27.400
wondering is, are these going to
be useful for other stuff?

00:41:27.400 --> 00:41:30.220
Is there some other stuff that
we can do with all this, other

00:41:30.220 --> 00:41:31.050
than video?

00:41:31.050 --> 00:41:32.970
So I suspect there is.

00:41:32.970 --> 00:41:38.550
So if we could get some ideas
about that, that'd be great.

00:41:38.550 --> 00:41:39.780
I'm going to disappear
because--

00:41:39.780 --> 00:41:41.455
I'm going to be five seconds--

00:41:41.455 --> 00:41:45.986
I need to get my power cable.

00:41:45.986 --> 00:41:46.720
PUNYABRATA RAY: Yeah.

00:41:46.720 --> 00:41:51.790
So this started out as a
project of real-time

00:41:51.790 --> 00:41:52.630
communication--

00:41:52.630 --> 00:41:56.920
voice and video chatting
between two browsers.

00:41:56.920 --> 00:42:02.150
But I'm sure there's other
applications, like streaming.

00:42:02.150 --> 00:42:04.440
And I'm not sure exactly
if anyone--

00:42:04.440 --> 00:42:04.660
I don't know.

00:42:04.660 --> 00:42:06.910
You might know if anyone
in our engineering is

00:42:06.910 --> 00:42:10.970
specifically working on
streaming audio and video,

00:42:10.970 --> 00:42:12.020
also in addition.

00:42:12.020 --> 00:42:17.610
But the tricky part about
two-way communication is there

00:42:17.610 --> 00:42:18.710
can be no delay.

00:42:18.710 --> 00:42:21.300
With streaming, you can perhaps
wait a bit, let it

00:42:21.300 --> 00:42:23.470
buffer up, and then let it go.

00:42:23.470 --> 00:42:26.370
But it's a little trickier
when you want to have a

00:42:26.370 --> 00:42:28.630
two-way call, but you can't
have any delay.

00:42:28.630 --> 00:42:32.350
Because if not, people will be
stepping over each other.

00:42:37.910 --> 00:42:42.280
RONGHUA WU: If you look at the
specs of the stream API, they

00:42:42.280 --> 00:42:45.580
also mention that you can use
the camera as the source.

00:42:45.580 --> 00:42:48.100
You can also use a local
file as a source.

00:42:48.100 --> 00:42:52.860
So with that, you might be
able to do like a screen

00:42:52.860 --> 00:42:56.140
sharing presentation--

00:42:56.140 --> 00:42:59.145
those kind of stuff,
besides the video.

00:42:59.145 --> 00:43:01.880
PUNYABRATA RAY: And even
to localized it.

00:43:01.880 --> 00:43:05.190
For example, allowing the fact
we can capture video frames

00:43:05.190 --> 00:43:07.580
from a person's laptop.

00:43:07.580 --> 00:43:10.540
There could be so many other
applications as, perhaps,

00:43:10.540 --> 00:43:13.810
camera resolution's increase,
you could do some face

00:43:13.810 --> 00:43:18.540
recognition, you could do
some eyeball tracking.

00:43:18.540 --> 00:43:22.960
All these other cool, neat
effects that you could add to

00:43:22.960 --> 00:43:24.545
your applications.

00:43:24.545 --> 00:43:26.620
SAM DUTTON: That would be
great-- that stuff.

00:43:26.620 --> 00:43:30.010
Stuff that in the past has
been really expensive and

00:43:30.010 --> 00:43:31.385
really not widely accessible.

00:43:35.740 --> 00:43:39.180
So here's a question that I knew
we would get, again from

00:43:39.180 --> 00:43:40.690
California.

00:43:40.690 --> 00:43:43.360
Someone asking if Google
hangouts--

00:43:43.360 --> 00:43:45.735
what we're doing now-- is
going to use WebRTC.

00:43:45.735 --> 00:43:48.450
Is that happen going to happen
in the next six months?

00:43:48.450 --> 00:43:50.720
They're saying, I don't want
to use a plug-in anymore.

00:43:50.720 --> 00:43:52.790
WebRTC will be awesome!

00:43:52.790 --> 00:43:53.670
PUNYABRATA RAY: Yeah.

00:43:53.670 --> 00:43:58.150
That's the whole purpose
of this project.

00:43:58.150 --> 00:44:01.230
People open up their browsers
and make a voice and video

00:44:01.230 --> 00:44:04.600
call without having to download
an extra plug-in.

00:44:04.600 --> 00:44:08.370
With respect to internally
what hangouts is doing, I

00:44:08.370 --> 00:44:09.560
actually don't know.

00:44:09.560 --> 00:44:12.620
We're completely separate
projects.

00:44:12.620 --> 00:44:17.980
I'm sure at some point,
there will be overlap.

00:44:17.980 --> 00:44:21.820
But at this point, I don't know
what the plan of hangouts

00:44:21.820 --> 00:44:24.740
is and what I don't
know if you--

00:44:27.380 --> 00:44:29.190
I'm sure there's people
already talking

00:44:29.190 --> 00:44:30.070
about that at Google.

00:44:30.070 --> 00:44:31.880
You know, one day,
hopefully, we can

00:44:31.880 --> 00:44:35.230
move to a native client.

00:44:35.230 --> 00:44:36.790
SAM DUTTON: So these
are separate

00:44:36.790 --> 00:44:38.240
projects at the moment.

00:44:38.240 --> 00:44:38.805
Is that right?

00:44:38.805 --> 00:44:39.640
PUNYABRATA RAY: Correct.

00:44:39.640 --> 00:44:42.060
SAM DUTTON: OK.

00:44:42.060 --> 00:44:44.280
So more questions
from Moderator.

00:44:44.280 --> 00:44:46.290
First, I would really
like to show us

00:44:46.290 --> 00:44:49.630
another slightly foolish--

00:44:49.630 --> 00:44:50.700
well, I shouldn't
say foolish--

00:44:50.700 --> 00:44:51.877
entertaining.

00:44:51.877 --> 00:44:52.344
Hang on.

00:44:52.344 --> 00:44:55.355
If I can get another
get user media.

00:44:58.730 --> 00:44:59.480
Hold on a minute.

00:44:59.480 --> 00:45:01.160
Let's have a look.

00:45:01.160 --> 00:45:02.370
There's something nice here.

00:45:02.370 --> 00:45:02.760
OK.

00:45:02.760 --> 00:45:06.470
So I'll just screen
share this again.

00:45:06.470 --> 00:45:14.690
And so here we have a kind of
Photo Booth-like application.

00:45:14.690 --> 00:45:17.552
Can you guys see that over
in Mountain View?

00:45:17.552 --> 00:45:18.686
PUNYABRATA RAY: Yes.

00:45:18.686 --> 00:45:21.535
SAM DUTTON: So if I click
this to begin--

00:45:41.820 --> 00:45:43.060
PUNYABRATA RAY: Oh, cool.

00:45:43.060 --> 00:45:44.870
SAM DUTTON: Yeah, I
just love that.

00:45:44.870 --> 00:45:46.480
It's a really fun little app.

00:45:46.480 --> 00:45:49.780
And just beautifully
implemented.

00:45:49.780 --> 00:45:55.930
Again, doing lovely stuff
to get content

00:45:55.930 --> 00:45:59.120
from your own camera.

00:45:59.120 --> 00:46:01.940
So there's some really
imaginative

00:46:01.940 --> 00:46:04.310
material coming out.

00:46:04.310 --> 00:46:07.290
Just to go down the questions.

00:46:07.290 --> 00:46:12.380
One of the things I have heard
a lot is people asking about

00:46:12.380 --> 00:46:16.420
security with Luke
[UNINTELLIGIBLE]

00:46:16.420 --> 00:46:18.520
I think you pronounce--

00:46:18.520 --> 00:46:21.310
and he's saying, what about
the security and the flux

00:46:21.310 --> 00:46:22.370
encryption.

00:46:22.370 --> 00:46:24.160
Could we have a comment
on that.

00:46:27.052 --> 00:46:28.180
PUNYABRATA RAY: I heard
the first part--

00:46:28.180 --> 00:46:28.880
what about security.

00:46:28.880 --> 00:46:31.030
What was the second part?

00:46:31.030 --> 00:46:32.300
ERIC BIDELMAN: Flux
encryption?

00:46:32.300 --> 00:46:34.490
PUNYABRATA RAY: I actually
don't know what flux

00:46:34.490 --> 00:46:36.700
encryption is.

00:46:36.700 --> 00:46:39.372
But the one thing that--

00:46:39.372 --> 00:46:41.430
SAM DUTTON: I just like
to spring impossible

00:46:41.430 --> 00:46:42.765
questions on you.

00:46:42.765 --> 00:46:43.655
[LAUGHTER]

00:46:43.655 --> 00:46:45.710
PUNYABRATA RAY: I would
Google it right now.

00:46:45.710 --> 00:46:47.325
[LAUGHTER]

00:46:47.325 --> 00:46:51.220
PUNYABRATA RAY: But one thing
about the voice and video

00:46:51.220 --> 00:46:56.250
streams by default today, I
believe we're using secure RTP

00:46:56.250 --> 00:47:00.050
protocols, which has been
enabled by default.

00:47:00.050 --> 00:47:03.780
So that's in terms of security
of the RTP stream.

00:47:03.780 --> 00:47:06.542
So that is encrypted today.

00:47:06.542 --> 00:47:08.400
ERIC BIDELMAN: One thing that's
not there today-- and

00:47:08.400 --> 00:47:12.560
I'm actually not sure if even a
specification says anything

00:47:12.560 --> 00:47:13.150
about this.

00:47:13.150 --> 00:47:16.200
But being able to access the
camera, sort of just by making

00:47:16.200 --> 00:47:18.630
a JavaScript call, right.

00:47:18.630 --> 00:47:21.130
Currently there's no sort of
permission dialog that comes

00:47:21.130 --> 00:47:24.190
down that says to the user, do
you want to give this app

00:47:24.190 --> 00:47:27.950
access to your camera
or deny that access.

00:47:27.950 --> 00:47:29.730
And of course, that happens
with a lot of

00:47:29.730 --> 00:47:30.910
the APIs now, right?

00:47:30.910 --> 00:47:32.960
There's some kind of
permission level.

00:47:32.960 --> 00:47:35.140
There's sort of on the drive-by
web-- that the user

00:47:35.140 --> 00:47:38.630
has to buy into to allow an
application to use one of

00:47:38.630 --> 00:47:39.720
these APIs.

00:47:39.720 --> 00:47:40.680
So that's not there today.

00:47:40.680 --> 00:47:44.410
I don't know if that's being
worked out, but I'm almost

00:47:44.410 --> 00:47:47.380
certain the spec doesn't
really mention that.

00:47:47.380 --> 00:47:49.450
Possibly in the future
that could come--

00:47:49.450 --> 00:47:51.715
where the user has to
manually sort of--

00:47:51.715 --> 00:47:54.030
RONGHUA WU: Actually, I believe
there's a team working

00:47:54.030 --> 00:47:57.030
on that for Chrome.

00:47:57.030 --> 00:47:58.990
It's called Camera UI.

00:47:58.990 --> 00:48:05.840
Basically, allow you to grant
the access to the camera.

00:48:05.840 --> 00:48:08.280
ERIC BIDELMAN: Oh that's cool.

00:48:08.280 --> 00:48:11.120
Right now, it's worth mentioning
that if you have, I

00:48:11.120 --> 00:48:14.640
guess, multiple cameras attached
to a laptop or you're

00:48:14.640 --> 00:48:17.410
set up, then it picks
the first--

00:48:17.410 --> 00:48:18.840
RONGHUA WU: It picks
a default one.

00:48:18.840 --> 00:48:19.700
ERIC BIDELMAN: OK.

00:48:19.700 --> 00:48:21.630
RONGHUA WU: But I know there's
a team work on that, but I

00:48:21.630 --> 00:48:23.250
don't know the detail--

00:48:23.250 --> 00:48:24.225
when, or--

00:48:24.225 --> 00:48:25.200
ERIC BIDELMAN: Yeah.

00:48:25.200 --> 00:48:26.660
We'll look forward
to that sometime.

00:48:26.660 --> 00:48:27.400
SAM DUTTON: Yeah.

00:48:27.400 --> 00:48:30.770
I think-- am I right in saying
that-- using the input

00:48:30.770 --> 00:48:34.050
element, we have an
implementation on Chrome for

00:48:34.050 --> 00:48:35.000
Android now.

00:48:35.000 --> 00:48:38.300
So that's really cool to be
able to use a camera.

00:48:38.300 --> 00:48:39.590
Is that correct, Eric?

00:48:39.590 --> 00:48:41.720
ERIC BIDELMAN: That's true.

00:48:41.720 --> 00:48:45.640
I believe Android Honeycomb,
and then now Chrome for

00:48:45.640 --> 00:48:49.940
Android, has the ability to use
a file input, essentially.

00:48:49.940 --> 00:48:53.030
And you can specify a certain
accept-type attribute on that

00:48:53.030 --> 00:48:57.320
to say you want access the
camera or record a video.

00:48:57.320 --> 00:49:00.260
It's essentially just uploading
or taking a snapshot

00:49:00.260 --> 00:49:03.890
in time and being able to upload
that to the server.

00:49:03.890 --> 00:49:05.540
Whatever you want
to do with it.

00:49:05.540 --> 00:49:07.690
Where this is different-- where
WebRTC is different,

00:49:07.690 --> 00:49:09.450
where get-user media is
different-- is that you can

00:49:09.450 --> 00:49:11.780
capture in real-time
and then do

00:49:11.780 --> 00:49:13.110
real-time effects on something.

00:49:13.110 --> 00:49:15.560
So that's cool.

00:49:15.560 --> 00:49:19.090
Hopefully, one day, Chrome for
Android could have this

00:49:19.090 --> 00:49:21.080
ability as well-- to do
the get-user media.

00:49:21.080 --> 00:49:24.402
But we talked a little bit
about that earlier.

00:49:24.402 --> 00:49:25.330
SAM DUTTON: OK, cool.

00:49:25.330 --> 00:49:31.590
We mentioned earlier some
progress with web sockets,

00:49:31.590 --> 00:49:34.450
Another question from
Jeff in Toronto.

00:49:34.450 --> 00:49:37.470
Video conferencing is cool and
all, but what's the status of

00:49:37.470 --> 00:49:38.720
the data stream API?

00:49:41.240 --> 00:49:43.760
Web sockets would be awesome.

00:49:43.760 --> 00:49:46.660
Do we have a comment
about that?

00:49:46.660 --> 00:49:48.360
Or do you think we've
covered that in the

00:49:48.360 --> 00:49:51.720
earlier web socket stuff?

00:49:51.720 --> 00:49:57.020
RONGHUA WU: As I know, the data
stream maybe hasn't been

00:49:57.020 --> 00:50:01.140
well-defined by the spec yet.

00:50:01.140 --> 00:50:04.210
So before that probably.

00:50:07.070 --> 00:50:10.296
That's what I know
from the spec.

00:50:10.296 --> 00:50:11.160
SAM DUTTON: OK.

00:50:11.160 --> 00:50:13.690
So we'll see.

00:50:13.690 --> 00:50:13.990
OK.

00:50:13.990 --> 00:50:15.100
Moving down the list here.

00:50:15.100 --> 00:50:15.950
Yeah.

00:50:15.950 --> 00:50:20.010
There's another question from
Luke [UNINTELLIGIBLE]

00:50:20.010 --> 00:50:23.970
asking when the server code
from apprtc.appspot.com is

00:50:23.970 --> 00:50:24.760
going to be released.

00:50:24.760 --> 00:50:28.590
We did mention that the code's
going to be open source.

00:50:28.590 --> 00:50:31.516
And that's kind of
imminent, yeah.

00:50:31.516 --> 00:50:32.945
PUNYABRATA RAY: Yes.

00:50:32.945 --> 00:50:34.690
SAM DUTTON: Cool.

00:50:34.690 --> 00:50:35.400
Quickly, moving on.

00:50:35.400 --> 00:50:38.000
We've got about five
minutes left.

00:50:38.000 --> 00:50:43.990
So we had another question from
Clive Bolton in Seattle.

00:50:43.990 --> 00:50:48.410
He's asking, if WebRTC nudging
the browser to incubate

00:50:48.410 --> 00:50:50.796
server-ready JavaScript
engines.

00:50:53.380 --> 00:50:58.460
Is this something that's part of
the WebRTC work at Google,

00:50:58.460 --> 00:51:01.690
or is this kind of really
something different?

00:51:04.552 --> 00:51:09.620
PUNYABRATA RAY: You know,
WebRTC is firewall

00:51:09.620 --> 00:51:11.110
traversable for media.

00:51:11.110 --> 00:51:13.790
And that normally requires
some sort of known

00:51:13.790 --> 00:51:15.040
server on a public IP.

00:51:17.640 --> 00:51:21.890
So not knowing much about
node.js, I think that would be

00:51:21.890 --> 00:51:22.660
very challenging.

00:51:22.660 --> 00:51:25.620
But again, I'm not an expert.

00:51:28.460 --> 00:51:34.470
Yeah, so I don't think we
would be nudging anyone.

00:51:34.470 --> 00:51:37.740
Again, the server
implementation, it's--

00:51:37.740 --> 00:51:41.340
if you look at our peer
connection server example,

00:51:41.340 --> 00:51:43.630
it's at a high level.

00:51:43.630 --> 00:51:46.530
It should be totally
up to the user.

00:51:46.530 --> 00:51:48.690
It's not like there has to
be one way to do this.

00:51:48.690 --> 00:51:49.620
SAM DUTTON: Yeah.

00:51:49.620 --> 00:51:50.420
Yeah, sure.

00:51:50.420 --> 00:51:51.780
Sure.

00:51:51.780 --> 00:51:55.220
OK, quickly moving down the
questions here, something that

00:51:55.220 --> 00:51:56.700
occurred to me, actually.

00:51:56.700 --> 00:52:00.350
How do you stop the stream
without killing the tab?

00:52:00.350 --> 00:52:03.890
I can imagine moving from a page
where you're getting a

00:52:03.890 --> 00:52:06.140
video input and then doing some
browsing, and of course,

00:52:06.140 --> 00:52:08.240
the video's still on.

00:52:08.240 --> 00:52:11.530
What's the story with that?

00:52:11.530 --> 00:52:11.950
PUNYABRATA RAY: I'm
not exactly--

00:52:11.950 --> 00:52:13.690
I think you should still be
able to remember the video

00:52:13.690 --> 00:52:15.131
tab, but I haven't--

00:52:17.840 --> 00:52:19.220
SAM DUTTON: I mean, I guess this
is something we could do

00:52:19.220 --> 00:52:19.940
with get-user media.

00:52:19.940 --> 00:52:24.630
It's in a sense, it's
the way you use it.

00:52:24.630 --> 00:52:28.200
It's not essentially
part of WebRTC.

00:52:28.200 --> 00:52:32.250
It's how you implement the use
of get-user media and working

00:52:32.250 --> 00:52:33.360
with the page visibility--

00:52:33.360 --> 00:52:36.000
[INTERPOSING VOICES]

00:52:36.000 --> 00:52:37.210
SAM DUTTON: As we speak.

00:52:37.210 --> 00:52:38.810
ERIC BIDELMAN: Did
you do your part?

00:52:38.810 --> 00:52:39.970
I've experienced
the same thing.

00:52:39.970 --> 00:52:44.600
I think you can call
stop on the stream.

00:52:44.600 --> 00:52:46.630
I don't know if it actually does
anything in Chrome today,

00:52:46.630 --> 00:52:52.710
but it's probably just a bug to
be honest. I kill my tabs.

00:52:52.710 --> 00:52:55.265
You should file it
[UNINTELLIGIBLE].

00:52:55.265 --> 00:52:56.030
SAM DUTTON: Cool.

00:52:56.030 --> 00:52:57.460
I will.

00:52:57.460 --> 00:52:58.350
Yeah, we that's my problem.

00:52:58.350 --> 00:52:59.640
It was my fault.

00:52:59.640 --> 00:53:01.350
I should have shut up.

00:53:01.350 --> 00:53:04.850
Which syncs nicely into the next
question, again from this

00:53:04.850 --> 00:53:06.920
guy Pete in Mountain View.

00:53:06.920 --> 00:53:07.940
He's wondering--

00:53:07.940 --> 00:53:09.970
a really good question--

00:53:09.970 --> 00:53:11.690
if people find bugs,
what do they do?

00:53:11.690 --> 00:53:14.380
Where do they file bugs
in relation to the

00:53:14.380 --> 00:53:17.090
components of WebRTC?

00:53:17.090 --> 00:53:19.260
PUNYABRATA RAY: So we
do have a website.

00:53:19.260 --> 00:53:21.950
The first one being
WebRTC.org.

00:53:21.950 --> 00:53:24.700
There's a link to there where
you can actually go and it

00:53:24.700 --> 00:53:26.190
will help you.

00:53:26.190 --> 00:53:27.580
It's a ways forward.

00:53:27.580 --> 00:53:29.930
But if you directly want to
go to the code base, its

00:53:29.930 --> 00:53:32.560
WebRTC.googlecode.com.

00:53:32.560 --> 00:53:35.330
And you will see an issues
list, and you can

00:53:35.330 --> 00:53:38.025
file the bug there.

00:53:38.025 --> 00:53:40.440
We should probably put
that up somewhere.

00:53:40.440 --> 00:53:43.100
If it's not already up there,
but the best way is

00:53:43.100 --> 00:53:44.210
WebRTC.org.

00:53:44.210 --> 00:53:47.945
RONGHUA WU: But if this is a
Chrome bug, probably just file

00:53:47.945 --> 00:53:48.670
bug in Chrome.

00:53:48.670 --> 00:53:49.952
PUNYABRATA RAY: Right.

00:53:49.952 --> 00:53:52.205
SAM DUTTON: Yeah.

00:53:52.205 --> 00:53:56.366
For those who haven't seen
it, crbug.com is great.

00:53:56.366 --> 00:53:59.540
ERIC BIDELMAN: Really nice short
URL, easy to remember.

00:53:59.540 --> 00:54:02.940
And if you do file that in the
Chrome issue tracker, and it

00:54:02.940 --> 00:54:05.810
needs to go someplace else,
people do triage those

00:54:05.810 --> 00:54:10.805
regularly, so we can put that
where it needs to go.

00:54:10.805 --> 00:54:11.900
SAM DUTTON: Cool.

00:54:11.900 --> 00:54:12.420
OK.

00:54:12.420 --> 00:54:14.020
I think that we're going
to wrap up soon.

00:54:14.020 --> 00:54:16.070
A couple of things--

00:54:16.070 --> 00:54:20.790
if people are watching this
stream, could they 1 the post

00:54:20.790 --> 00:54:23.490
so we get an idea of how many
people are out there?

00:54:23.490 --> 00:54:26.290
That would be really helpful for
us so that we can work on

00:54:26.290 --> 00:54:30.340
these hangouts, and find out
who's watching, and get an

00:54:30.340 --> 00:54:31.320
idea of that.

00:54:31.320 --> 00:54:34.690
And also another thing-- if
you could do for us--

00:54:34.690 --> 00:54:39.820
is to add Chrome developers
to your circles.

00:54:39.820 --> 00:54:42.150
That would be a great
way for us to

00:54:42.150 --> 00:54:44.160
communicate events like this.

00:54:44.160 --> 00:54:50.170
So we're planning on more
hangouts on various APIs and

00:54:50.170 --> 00:54:52.940
web-related subjects.

00:54:52.940 --> 00:54:59.710
So yeah, just moving back to the
last stuff we've got here.

00:54:59.710 --> 00:55:03.350
I think I'll just check
what else we've got.

00:55:03.350 --> 00:55:06.650
Eric, and Ray and Ronghua ,
have you got anything else

00:55:06.650 --> 00:55:10.832
you'd particularly like to add
before we wrap up today?

00:55:10.832 --> 00:55:13.270
PUNYABRATA RAY: No.

00:55:13.270 --> 00:55:16.930
Again, if you have any issues or
bugs that you want to file,

00:55:16.930 --> 00:55:21.410
please definitely go to either
Chrome bugs or WebRTC.org We'd

00:55:21.410 --> 00:55:23.890
love to love to hear from you.

00:55:23.890 --> 00:55:26.360
And let us know how--

00:55:26.360 --> 00:55:28.460
from a developer perspective--

00:55:28.460 --> 00:55:30.402
what you guys think about it.

00:55:30.402 --> 00:55:32.160
ERIC BIDELMAN: And what Sam just
mentioned, the great way

00:55:32.160 --> 00:55:34.960
to get in contact with us, too,
is through our page, if

00:55:34.960 --> 00:55:37.541
you want to sort of open a
channel and communicate back

00:55:37.541 --> 00:55:40.510
and forth about some
of this stuff.

00:55:40.510 --> 00:55:42.120
Sam, I wonder if it's--

00:55:42.120 --> 00:55:44.290
for people that missed the demo
at the beginning of the

00:55:44.290 --> 00:55:45.590
WebRTC video--

00:55:45.590 --> 00:55:49.352
if it's worth playing again
as we start to wrap up.

00:55:49.352 --> 00:55:50.500
SAM DUTTON: That
would be great.

00:55:50.500 --> 00:55:51.530
That's a really good idea.

00:55:51.530 --> 00:55:54.640
ERIC BIDELMAN: We talked a lot
about WebRTC, and it's

00:55:54.640 --> 00:55:56.972
actually good to see
it in practice.

00:55:56.972 --> 00:55:59.600
SAM DUTTON: That would be really
nice to see that, just

00:55:59.600 --> 00:56:04.760
to finish up on what looks
to me like Willy Wonka's

00:56:04.760 --> 00:56:06.500
Chocolate Factory.

00:56:06.500 --> 00:56:08.090
ERIC BIDELMAN: That was a
hard day at work, man.

00:56:08.090 --> 00:56:10.176
I don't know what you're
talking about.

00:56:10.176 --> 00:56:12.295
SAM DUTTON: Jeez, that looks
scary coming down the tube.

00:56:15.552 --> 00:56:16.802
[INAUDIBLE]

00:56:29.965 --> 00:56:30.959
MALE SPEAKER: Hey, Eric.

00:56:30.959 --> 00:56:31.750
What's up?

00:56:31.750 --> 00:56:33.060
ERIC BIDELMAN: [INAUDIBLE]

00:56:33.060 --> 00:56:34.060
MALE SPEAKER: Hey.

00:56:34.060 --> 00:56:35.560
This WebRTC stuff?

00:56:35.560 --> 00:56:37.060
It seems pretty cool, right?

00:56:37.060 --> 00:56:38.050
Yeah, it is.

00:56:38.050 --> 00:56:39.427
ERIC BIDELMAN: I'm kinda
thirsty though, man.

00:56:39.427 --> 00:56:39.886
Can you help me out?

00:56:39.886 --> 00:56:41.263
MALE SPEAKER: You know?

00:56:41.263 --> 00:56:42.181
I think I can.

00:56:42.181 --> 00:56:43.500
I'll be right there.

00:56:51.164 --> 00:56:52.500
SAM DUTTON: Oh my God.

00:56:52.500 --> 00:56:54.460
[LAUGHTER]

00:56:54.460 --> 00:56:56.416
[CLAPPING]

00:56:56.416 --> 00:56:57.770
SAM DUTTON: Beautiful.

00:56:57.770 --> 00:57:00.650
That's really nice.

00:57:00.650 --> 00:57:01.860
OK.

00:57:01.860 --> 00:57:07.120
Well, thank you so much to Ray
and Ronghua for coming today

00:57:07.120 --> 00:57:10.080
and talking about
WebRTC with us.

00:57:10.080 --> 00:57:13.730
And please add your comments
to the post or get in touch

00:57:13.730 --> 00:57:16.090
with us and file bugs
as you hit them.

00:57:16.090 --> 00:57:18.620
And we're really looking
forward to--

00:57:18.620 --> 00:57:21.410
it's going to be some great
imaginative stuff, as we've

00:57:21.410 --> 00:57:22.850
already seen--

00:57:22.850 --> 00:57:26.420
people doing really good
things with WebRTC.

00:57:26.420 --> 00:57:26.890
So thanks a lot.

00:57:26.890 --> 00:57:28.335
PUNYABRATA RAY: Thank
you, guys.

00:57:28.335 --> 00:57:28.800
ERIC BIDELMAN: Thanks,
everyone.

00:57:28.800 --> 00:57:30.450
SAM DUTTON: And thanks, Eric.

00:57:30.450 --> 00:57:33.570
And thanks to the invisible
man in the page.

00:57:33.570 --> 00:57:36.760
He's hard to see.

00:57:36.760 --> 00:57:37.700
ERIC BIDELMAN: See you
guys next time.

00:57:37.700 --> 00:57:38.950
[INTERPOSING VOICES]

