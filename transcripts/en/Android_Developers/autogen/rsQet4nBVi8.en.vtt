WEBVTT
Kind: captions
Language: en

00:00:05.450 --> 00:00:08.299
hi I'm Chet Haase an engineer in the

00:00:08.299 --> 00:00:08.309
hi I'm Chet Haase an engineer in the
 

00:00:08.309 --> 00:00:10.100
hi I'm Chet Haase an engineer in the
Android team at Google

00:00:10.100 --> 00:00:10.110
Android team at Google
 

00:00:10.110 --> 00:00:12.230
Android team at Google
I work on graphics and animation stuff

00:00:12.230 --> 00:00:12.240
I work on graphics and animation stuff
 

00:00:12.240 --> 00:00:13.580
I work on graphics and animation stuff
and today I wanted to talk about the

00:00:13.580 --> 00:00:13.590
and today I wanted to talk about the
 

00:00:13.590 --> 00:00:16.849
and today I wanted to talk about the
topic of bitmaps in particular I want to

00:00:16.849 --> 00:00:16.859
topic of bitmaps in particular I want to
 

00:00:16.859 --> 00:00:19.849
topic of bitmaps in particular I want to
talk about bitmaps and garbage first a

00:00:19.849 --> 00:00:19.859
talk about bitmaps and garbage first a
 

00:00:19.859 --> 00:00:23.029
talk about bitmaps and garbage first a
history lesson might help prior to the

00:00:23.029 --> 00:00:23.039
history lesson might help prior to the
 

00:00:23.039 --> 00:00:26.450
history lesson might help prior to the
3.0 release we managed bitmap memory at

00:00:26.450 --> 00:00:26.460
3.0 release we managed bitmap memory at
 

00:00:26.460 --> 00:00:28.700
3.0 release we managed bitmap memory at
the Native level the VM knew about it

00:00:28.700 --> 00:00:28.710
the Native level the VM knew about it
 

00:00:28.710 --> 00:00:30.140
the Native level the VM knew about it
but it really didn't manage it and you

00:00:30.140 --> 00:00:30.150
but it really didn't manage it and you
 

00:00:30.150 --> 00:00:32.179
but it really didn't manage it and you
in your application were responsible for

00:00:32.179 --> 00:00:32.189
in your application were responsible for
 

00:00:32.189 --> 00:00:34.639
in your application were responsible for
calling recycle to very actively manage

00:00:34.639 --> 00:00:34.649
calling recycle to very actively manage
 

00:00:34.649 --> 00:00:36.020
calling recycle to very actively manage
that when you're done with bitmap you

00:00:36.020 --> 00:00:36.030
that when you're done with bitmap you
 

00:00:36.030 --> 00:00:37.760
that when you're done with bitmap you
call recycle that gets rid of the memory

00:00:37.760 --> 00:00:37.770
call recycle that gets rid of the memory
 

00:00:37.770 --> 00:00:40.520
call recycle that gets rid of the memory
otherwise you may run out of enough

00:00:40.520 --> 00:00:40.530
otherwise you may run out of enough
 

00:00:40.530 --> 00:00:42.970
otherwise you may run out of enough
memory enough native memory to allocate

00:00:42.970 --> 00:00:42.980
memory enough native memory to allocate
 

00:00:42.980 --> 00:00:46.160
memory enough native memory to allocate
another bitmap so this is a very careful

00:00:46.160 --> 00:00:46.170
another bitmap so this is a very careful
 

00:00:46.170 --> 00:00:48.590
another bitmap so this is a very careful
things that think that applications

00:00:48.590 --> 00:00:48.600
things that think that applications
 

00:00:48.600 --> 00:00:51.709
things that think that applications
needed to manage very tightly we decided

00:00:51.709 --> 00:00:51.719
needed to manage very tightly we decided
 

00:00:51.719 --> 00:00:53.119
needed to manage very tightly we decided
that it would be a little bit better for

00:00:53.119 --> 00:00:53.129
that it would be a little bit better for
 

00:00:53.129 --> 00:00:55.340
that it would be a little bit better for
everyone if we actually manage that for

00:00:55.340 --> 00:00:55.350
everyone if we actually manage that for
 

00:00:55.350 --> 00:00:56.720
everyone if we actually manage that for
you and we brought the bitmap memory

00:00:56.720 --> 00:00:56.730
you and we brought the bitmap memory
 

00:00:56.730 --> 00:00:59.420
you and we brought the bitmap memory
back into the VM along with the rest of

00:00:59.420 --> 00:00:59.430
back into the VM along with the rest of
 

00:00:59.430 --> 00:01:00.680
back into the VM along with the rest of
the memory that the garbage collector

00:01:00.680 --> 00:01:00.690
the memory that the garbage collector
 

00:01:00.690 --> 00:01:02.689
the memory that the garbage collector
manages so now when you allocate memory

00:01:02.689 --> 00:01:02.699
manages so now when you allocate memory
 

00:01:02.699 --> 00:01:04.939
manages so now when you allocate memory
for a bitmap we allocate it on the

00:01:04.939 --> 00:01:04.949
for a bitmap we allocate it on the
 

00:01:04.949 --> 00:01:07.580
for a bitmap we allocate it on the
virtual machine heap and then we know

00:01:07.580 --> 00:01:07.590
virtual machine heap and then we know
 

00:01:07.590 --> 00:01:09.620
virtual machine heap and then we know
when references to that memory are gone

00:01:09.620 --> 00:01:09.630
when references to that memory are gone
 

00:01:09.630 --> 00:01:11.120
when references to that memory are gone
so that we can collect it appropriately

00:01:11.120 --> 00:01:11.130
so that we can collect it appropriately
 

00:01:11.130 --> 00:01:13.700
so that we can collect it appropriately
in particular when a reference to a

00:01:13.700 --> 00:01:13.710
in particular when a reference to a
 

00:01:13.710 --> 00:01:16.160
in particular when a reference to a
large bitmap goes away and you want to

00:01:16.160 --> 00:01:16.170
large bitmap goes away and you want to
 

00:01:16.170 --> 00:01:18.380
large bitmap goes away and you want to
allocate another bitmap then we can see

00:01:18.380 --> 00:01:18.390
allocate another bitmap then we can see
 

00:01:18.390 --> 00:01:19.760
allocate another bitmap then we can see
that while there's no reference to this

00:01:19.760 --> 00:01:19.770
that while there's no reference to this
 

00:01:19.770 --> 00:01:21.440
that while there's no reference to this
other one there we can collect it in

00:01:21.440 --> 00:01:21.450
other one there we can collect it in
 

00:01:21.450 --> 00:01:23.149
other one there we can collect it in
order to make room for the new one that

00:01:23.149 --> 00:01:23.159
order to make room for the new one that
 

00:01:23.159 --> 00:01:25.429
order to make room for the new one that
needs to come into the heap at that time

00:01:25.429 --> 00:01:25.439
needs to come into the heap at that time
 

00:01:25.439 --> 00:01:28.160
needs to come into the heap at that time
so all of this is great except that it

00:01:28.160 --> 00:01:28.170
so all of this is great except that it
 

00:01:28.170 --> 00:01:30.260
so all of this is great except that it
gets into situations where maybe the GC

00:01:30.260 --> 00:01:30.270
gets into situations where maybe the GC
 

00:01:30.270 --> 00:01:32.749
gets into situations where maybe the GC
is going to be triggered more than it

00:01:32.749 --> 00:01:32.759
is going to be triggered more than it
 

00:01:32.759 --> 00:01:34.609
is going to be triggered more than it
was before because you're not managing

00:01:34.609 --> 00:01:34.619
was before because you're not managing
 

00:01:34.619 --> 00:01:36.350
was before because you're not managing
your own memory manually instead we are

00:01:36.350 --> 00:01:36.360
your own memory manually instead we are
 

00:01:36.360 --> 00:01:38.630
your own memory manually instead we are
managing that memory for you and we

00:01:38.630 --> 00:01:38.640
managing that memory for you and we
 

00:01:38.640 --> 00:01:40.429
managing that memory for you and we
manage memory by having the garbage

00:01:40.429 --> 00:01:40.439
manage memory by having the garbage
 

00:01:40.439 --> 00:01:42.050
manage memory by having the garbage
collector kick in and collect things

00:01:42.050 --> 00:01:42.060
collector kick in and collect things
 

00:01:42.060 --> 00:01:44.270
collector kick in and collect things
when it needs to if there's not a memory

00:01:44.270 --> 00:01:44.280
when it needs to if there's not a memory
 

00:01:44.280 --> 00:01:46.010
when it needs to if there's not a memory
in the heap we'll collect stuff that

00:01:46.010 --> 00:01:46.020
in the heap we'll collect stuff that
 

00:01:46.020 --> 00:01:47.600
in the heap we'll collect stuff that
needs to be collected including large

00:01:47.600 --> 00:01:47.610
needs to be collected including large
 

00:01:47.610 --> 00:01:50.359
needs to be collected including large
bitmaps now the trick to this is that

00:01:50.359 --> 00:01:50.369
bitmaps now the trick to this is that
 

00:01:50.369 --> 00:01:52.580
bitmaps now the trick to this is that
large amounts of memory can be more

00:01:52.580 --> 00:01:52.590
large amounts of memory can be more
 

00:01:52.590 --> 00:01:54.319
large amounts of memory can be more
expensive to collect and large heaps are

00:01:54.319 --> 00:01:54.329
expensive to collect and large heaps are
 

00:01:54.329 --> 00:01:56.929
expensive to collect and large heaps are
more expensive to collect so if there's

00:01:56.929 --> 00:01:56.939
more expensive to collect so if there's
 

00:01:56.939 --> 00:01:59.209
more expensive to collect so if there's
large pieces of memory due to bitmaps

00:01:59.209 --> 00:01:59.219
large pieces of memory due to bitmaps
 

00:01:59.219 --> 00:02:01.700
large pieces of memory due to bitmaps
constantly churning through the system

00:02:01.700 --> 00:02:01.710
constantly churning through the system
 

00:02:01.710 --> 00:02:03.920
constantly churning through the system
then you're we're going to be collecting

00:02:03.920 --> 00:02:03.930
then you're we're going to be collecting
 

00:02:03.930 --> 00:02:05.840
then you're we're going to be collecting
memory for them a lot right if you're

00:02:05.840 --> 00:02:05.850
memory for them a lot right if you're
 

00:02:05.850 --> 00:02:08.210
memory for them a lot right if you're
constantly like on every frame I saw an

00:02:08.210 --> 00:02:08.220
constantly like on every frame I saw an
 

00:02:08.220 --> 00:02:10.699
constantly like on every frame I saw an
application like this recently where on

00:02:10.699 --> 00:02:10.709
application like this recently where on
 

00:02:10.709 --> 00:02:12.920
application like this recently where on
every frame of every animation

00:02:12.920 --> 00:02:12.930
every frame of every animation
 

00:02:12.930 --> 00:02:15.080
every frame of every animation
they were loading a new bitmap and

00:02:15.080 --> 00:02:15.090
they were loading a new bitmap and
 

00:02:15.090 --> 00:02:17.119
they were loading a new bitmap and
getting rid of the old one and in the

00:02:17.119 --> 00:02:17.129
getting rid of the old one and in the
 

00:02:17.129 --> 00:02:18.679
getting rid of the old one and in the
old system they would actively manage

00:02:18.679 --> 00:02:18.689
old system they would actively manage
 

00:02:18.689 --> 00:02:20.240
old system they would actively manage
this and call recycle and the other one

00:02:20.240 --> 00:02:20.250
this and call recycle and the other one
 

00:02:20.250 --> 00:02:22.220
this and call recycle and the other one
would be loaded in place and and life

00:02:22.220 --> 00:02:22.230
would be loaded in place and and life
 

00:02:22.230 --> 00:02:24.589
would be loaded in place and and life
was good but as of 3.0 that meant that

00:02:24.589 --> 00:02:24.599
was good but as of 3.0 that meant that
 

00:02:24.599 --> 00:02:26.720
was good but as of 3.0 that meant that
the old one was on the heap the new one

00:02:26.720 --> 00:02:26.730
the old one was on the heap the new one
 

00:02:26.730 --> 00:02:28.039
the old one was on the heap the new one
wanted to be on the heap there wasn't

00:02:28.039 --> 00:02:28.049
wanted to be on the heap there wasn't
 

00:02:28.049 --> 00:02:30.500
wanted to be on the heap there wasn't
enough room for the both of them and so

00:02:30.500 --> 00:02:30.510
enough room for the both of them and so
 

00:02:30.510 --> 00:02:32.059
enough room for the both of them and so
it needed to collect from the first one

00:02:32.059 --> 00:02:32.069
it needed to collect from the first one
 

00:02:32.069 --> 00:02:34.539
it needed to collect from the first one
relatively expensive garbage collection

00:02:34.539 --> 00:02:34.549
relatively expensive garbage collection
 

00:02:34.549 --> 00:02:36.830
relatively expensive garbage collection
to then load in the second one next

00:02:36.830 --> 00:02:36.840
to then load in the second one next
 

00:02:36.840 --> 00:02:38.750
to then load in the second one next
frame around same thing needs to collect

00:02:38.750 --> 00:02:38.760
frame around same thing needs to collect
 

00:02:38.760 --> 00:02:40.490
frame around same thing needs to collect
the old one to make enough room for the

00:02:40.490 --> 00:02:40.500
the old one to make enough room for the
 

00:02:40.500 --> 00:02:41.449
the old one to make enough room for the
new one

00:02:41.449 --> 00:02:41.459
new one
 

00:02:41.459 --> 00:02:44.300
new one
now that's a reality of dealing with

00:02:44.300 --> 00:02:44.310
now that's a reality of dealing with
 

00:02:44.310 --> 00:02:46.610
now that's a reality of dealing with
memory management garbage collectors and

00:02:46.610 --> 00:02:46.620
memory management garbage collectors and
 

00:02:46.620 --> 00:02:48.050
memory management garbage collectors and
it's it's decent enough but there's

00:02:48.050 --> 00:02:48.060
it's it's decent enough but there's
 

00:02:48.060 --> 00:02:49.460
it's it's decent enough but there's
actually a really good way that you can

00:02:49.460 --> 00:02:49.470
actually a really good way that you can
 

00:02:49.470 --> 00:02:51.589
actually a really good way that you can
work around that problem and in

00:02:51.589 --> 00:02:51.599
work around that problem and in
 

00:02:51.599 --> 00:02:52.670
work around that problem and in
particular if you're working with

00:02:52.670 --> 00:02:52.680
particular if you're working with
 

00:02:52.680 --> 00:02:54.440
particular if you're working with
bitmaps that are exactly the same size

00:02:54.440 --> 00:02:54.450
bitmaps that are exactly the same size
 

00:02:54.450 --> 00:02:56.629
bitmaps that are exactly the same size
which this particular application was

00:02:56.629 --> 00:02:56.639
which this particular application was
 

00:02:56.639 --> 00:02:59.300
which this particular application was
then you can actually reuse bitmaps so

00:02:59.300 --> 00:02:59.310
then you can actually reuse bitmaps so
 

00:02:59.310 --> 00:03:01.339
then you can actually reuse bitmaps so
you can have one bitmap that everything

00:03:01.339 --> 00:03:01.349
you can have one bitmap that everything
 

00:03:01.349 --> 00:03:04.369
you can have one bitmap that everything
gets loaded into along the way and save

00:03:04.369 --> 00:03:04.379
gets loaded into along the way and save
 

00:03:04.379 --> 00:03:06.409
gets loaded into along the way and save
yourself some serious garbage collection

00:03:06.409 --> 00:03:06.419
yourself some serious garbage collection
 

00:03:06.419 --> 00:03:09.890
yourself some serious garbage collection
and performance along the way so let's

00:03:09.890 --> 00:03:09.900
and performance along the way so let's
 

00:03:09.900 --> 00:03:12.080
and performance along the way so let's
take a look at a quick demo I call this

00:03:12.080 --> 00:03:12.090
take a look at a quick demo I call this
 

00:03:12.090 --> 00:03:14.599
take a look at a quick demo I call this
demo bitmap allocation and it's a

00:03:14.599 --> 00:03:14.609
demo bitmap allocation and it's a
 

00:03:14.609 --> 00:03:16.490
demo bitmap allocation and it's a
picture viewer I have some pictures that

00:03:16.490 --> 00:03:16.500
picture viewer I have some pictures that
 

00:03:16.500 --> 00:03:18.830
picture viewer I have some pictures that
I've loaded up in the background and we

00:03:18.830 --> 00:03:18.840
I've loaded up in the background and we
 

00:03:18.840 --> 00:03:20.300
I've loaded up in the background and we
can click through these and see these

00:03:20.300 --> 00:03:20.310
can click through these and see these
 

00:03:20.310 --> 00:03:22.460
can click through these and see these
other images and each one of these

00:03:22.460 --> 00:03:22.470
other images and each one of these
 

00:03:22.470 --> 00:03:24.920
other images and each one of these
images is getting loaded on the fly as

00:03:24.920 --> 00:03:24.930
images is getting loaded on the fly as
 

00:03:24.930 --> 00:03:26.390
images is getting loaded on the fly as
we go through that just for the purposes

00:03:26.390 --> 00:03:26.400
we go through that just for the purposes
 

00:03:26.400 --> 00:03:28.309
we go through that just for the purposes
of this demo and then I print out the

00:03:28.309 --> 00:03:28.319
of this demo and then I print out the
 

00:03:28.319 --> 00:03:29.809
of this demo and then I print out the
number of milliseconds that it took to

00:03:29.809 --> 00:03:29.819
number of milliseconds that it took to
 

00:03:29.819 --> 00:03:31.219
number of milliseconds that it took to
load each of these images up at the top

00:03:31.219 --> 00:03:31.229
load each of these images up at the top
 

00:03:31.229 --> 00:03:35.929
load each of these images up at the top
so these loads took 290 326 304 340 320

00:03:35.929 --> 00:03:35.939
so these loads took 290 326 304 340 320
 

00:03:35.939 --> 00:03:38.689
so these loads took 290 326 304 340 320
so a little non-deterministic based on

00:03:38.689 --> 00:03:38.699
so a little non-deterministic based on
 

00:03:38.699 --> 00:03:39.949
so a little non-deterministic based on
you know what else is going on in the

00:03:39.949 --> 00:03:39.959
you know what else is going on in the
 

00:03:39.959 --> 00:03:43.429
you know what else is going on in the
system and how long GC is took and stuff

00:03:43.429 --> 00:03:43.439
system and how long GC is took and stuff
 

00:03:43.439 --> 00:03:43.909
system and how long GC is took and stuff
like that

00:03:43.909 --> 00:03:43.919
like that
 

00:03:43.919 --> 00:03:47.270
like that
now if we reuse the bitmap then again

00:03:47.270 --> 00:03:47.280
now if we reuse the bitmap then again
 

00:03:47.280 --> 00:03:48.589
now if we reuse the bitmap then again
this is a little bit hard to see because

00:03:48.589 --> 00:03:48.599
this is a little bit hard to see because
 

00:03:48.599 --> 00:03:49.939
this is a little bit hard to see because
the numbers can be a little bit erratic

00:03:49.939 --> 00:03:49.949
the numbers can be a little bit erratic
 

00:03:49.949 --> 00:03:52.460
the numbers can be a little bit erratic
but what I see in runs that I've done at

00:03:52.460 --> 00:03:52.470
but what I see in runs that I've done at
 

00:03:52.470 --> 00:03:54.319
but what I see in runs that I've done at
least on other devices is a savings of

00:03:54.319 --> 00:03:54.329
least on other devices is a savings of
 

00:03:54.329 --> 00:03:56.839
least on other devices is a savings of
in general about 10 to 20 percent which

00:03:56.839 --> 00:03:56.849
in general about 10 to 20 percent which
 

00:03:56.849 --> 00:03:59.539
in general about 10 to 20 percent which
is not bad if you're talking about 300

00:03:59.539 --> 00:03:59.549
is not bad if you're talking about 300
 

00:03:59.549 --> 00:04:01.189
is not bad if you're talking about 300
milliseconds interframe saving 30

00:04:01.189 --> 00:04:01.199
milliseconds interframe saving 30
 

00:04:01.199 --> 00:04:03.830
milliseconds interframe saving 30
milliseconds is a big deal now ideally

00:04:03.830 --> 00:04:03.840
milliseconds is a big deal now ideally
 

00:04:03.840 --> 00:04:05.449
milliseconds is a big deal now ideally
you'd actually find a better way to load

00:04:05.449 --> 00:04:05.459
you'd actually find a better way to load
 

00:04:05.459 --> 00:04:07.339
you'd actually find a better way to load
these images than loading them on the

00:04:07.339 --> 00:04:07.349
these images than loading them on the
 

00:04:07.349 --> 00:04:08.800
these images than loading them on the
fly when you're ready to draw them

00:04:08.800 --> 00:04:08.810
fly when you're ready to draw them
 

00:04:08.810 --> 00:04:10.969
fly when you're ready to draw them
that's not the best way to go about it

00:04:10.969 --> 00:04:10.979
that's not the best way to go about it
 

00:04:10.979 --> 00:04:12.619
that's not the best way to go about it
but the the point of this demo is more

00:04:12.619 --> 00:04:12.629
but the the point of this demo is more
 

00:04:12.629 --> 00:04:14.780
but the the point of this demo is more
to show the raw amount of time that it

00:04:14.780 --> 00:04:14.790
to show the raw amount of time that it
 

00:04:14.790 --> 00:04:16.819
to show the raw amount of time that it
might take to load these things and a

00:04:16.819 --> 00:04:16.829
might take to load these things and a
 

00:04:16.829 --> 00:04:18.920
might take to load these things and a
lot of that is the garbage collection so

00:04:18.920 --> 00:04:18.930
lot of that is the garbage collection so
 

00:04:18.930 --> 00:04:20.810
lot of that is the garbage collection so
let's take a quick look before we look

00:04:20.810 --> 00:04:20.820
let's take a quick look before we look
 

00:04:20.820 --> 00:04:23.240
let's take a quick look before we look
at the code we can take a look at a log

00:04:23.240 --> 00:04:23.250
at the code we can take a look at a log
 

00:04:23.250 --> 00:04:26.850
at the code we can take a look at a log
that I ran right before this where I was

00:04:26.850 --> 00:04:26.860
that I ran right before this where I was
 

00:04:26.860 --> 00:04:29.220
that I ran right before this where I was
what happened before and after I checked

00:04:29.220 --> 00:04:29.230
what happened before and after I checked
 

00:04:29.230 --> 00:04:30.780
what happened before and after I checked
that little box that said we use the bid

00:04:30.780 --> 00:04:30.790
that little box that said we use the bid
 

00:04:30.790 --> 00:04:33.390
that little box that said we use the bid
map and here's what we get let's see

00:04:33.390 --> 00:04:33.400
map and here's what we get let's see
 

00:04:33.400 --> 00:04:35.340
map and here's what we get let's see
here's what we got before I check the

00:04:35.340 --> 00:04:35.350
here's what we got before I check the
 

00:04:35.350 --> 00:04:38.700
here's what we got before I check the
box is nothing right this this was the

00:04:38.700 --> 00:04:38.710
box is nothing right this this was the
 

00:04:38.710 --> 00:04:40.860
box is nothing right this this was the
output not the GC output above but this

00:04:40.860 --> 00:04:40.870
output not the GC output above but this
 

00:04:40.870 --> 00:04:44.490
output not the GC output above but this
output here is what we saw when we reuse

00:04:44.490 --> 00:04:44.500
output here is what we saw when we reuse
 

00:04:44.500 --> 00:04:46.140
output here is what we saw when we reuse
the bitmap but when we're not reusing

00:04:46.140 --> 00:04:46.150
the bitmap but when we're not reusing
 

00:04:46.150 --> 00:04:48.480
the bitmap but when we're not reusing
the bitmap this is what we see right on

00:04:48.480 --> 00:04:48.490
the bitmap this is what we see right on
 

00:04:48.490 --> 00:04:52.110
the bitmap this is what we see right on
every frame we're incurring potentially

00:04:52.110 --> 00:04:52.120
every frame we're incurring potentially
 

00:04:52.120 --> 00:04:53.790
every frame we're incurring potentially
very expensive garbage collections some

00:04:53.790 --> 00:04:53.800
very expensive garbage collections some
 

00:04:53.800 --> 00:04:56.100
very expensive garbage collections some
of that runs in parallel but we still

00:04:56.100 --> 00:04:56.110
of that runs in parallel but we still
 

00:04:56.110 --> 00:05:00.000
of that runs in parallel but we still
have pauses of 21 milliseconds for Alex

00:05:00.000 --> 00:05:00.010
have pauses of 21 milliseconds for Alex
 

00:05:00.010 --> 00:05:02.160
have pauses of 21 milliseconds for Alex
3 milliseconds here 12 milliseconds

00:05:02.160 --> 00:05:02.170
3 milliseconds here 12 milliseconds
 

00:05:02.170 --> 00:05:04.320
3 milliseconds here 12 milliseconds
there if you imagine that a 60 frame per

00:05:04.320 --> 00:05:04.330
there if you imagine that a 60 frame per
 

00:05:04.330 --> 00:05:07.050
there if you imagine that a 60 frame per
second application only has 16

00:05:07.050 --> 00:05:07.060
second application only has 16
 

00:05:07.060 --> 00:05:08.940
second application only has 16
milliseconds in order to draw each frame

00:05:08.940 --> 00:05:08.950
milliseconds in order to draw each frame
 

00:05:08.950 --> 00:05:11.370
milliseconds in order to draw each frame
these numbers are huge you really want

00:05:11.370 --> 00:05:11.380
these numbers are huge you really want
 

00:05:11.380 --> 00:05:13.560
these numbers are huge you really want
to avoid them if you can so how do we do

00:05:13.560 --> 00:05:13.570
to avoid them if you can so how do we do
 

00:05:13.570 --> 00:05:14.060
to avoid them if you can so how do we do
that

00:05:14.060 --> 00:05:14.070
that
 

00:05:14.070 --> 00:05:17.670
that
we use bitmap factory options so let's

00:05:17.670 --> 00:05:17.680
we use bitmap factory options so let's
 

00:05:17.680 --> 00:05:18.900
we use bitmap factory options so let's
go in here take a look at the code this

00:05:18.900 --> 00:05:18.910
go in here take a look at the code this
 

00:05:18.910 --> 00:05:22.410
go in here take a look at the code this
is the bitmap application code and here

00:05:22.410 --> 00:05:22.420
is the bitmap application code and here
 

00:05:22.420 --> 00:05:24.090
is the bitmap application code and here
we have the checkbox that determines

00:05:24.090 --> 00:05:24.100
we have the checkbox that determines
 

00:05:24.100 --> 00:05:25.680
we have the checkbox that determines
whether we're actually going to do reuse

00:05:25.680 --> 00:05:25.690
whether we're actually going to do reuse
 

00:05:25.690 --> 00:05:30.000
whether we're actually going to do reuse
or not and in here we're going to create

00:05:30.000 --> 00:05:30.010
or not and in here we're going to create
 

00:05:30.010 --> 00:05:33.450
or not and in here we're going to create
our bitmap that gets reused on the fly

00:05:33.450 --> 00:05:33.460
our bitmap that gets reused on the fly
 

00:05:33.460 --> 00:05:36.380
our bitmap that gets reused on the fly
so first of all we're going to decode

00:05:36.380 --> 00:05:36.390
so first of all we're going to decode
 

00:05:36.390 --> 00:05:38.970
so first of all we're going to decode
the initial image that we start with

00:05:38.970 --> 00:05:38.980
the initial image that we start with
 

00:05:38.980 --> 00:05:40.770
the initial image that we start with
this application does assume that all

00:05:40.770 --> 00:05:40.780
this application does assume that all
 

00:05:40.780 --> 00:05:42.480
this application does assume that all
the bitmaps are the same size and this

00:05:42.480 --> 00:05:42.490
the bitmaps are the same size and this
 

00:05:42.490 --> 00:05:45.450
the bitmaps are the same size and this
is a restriction with reusing the

00:05:45.450 --> 00:05:45.460
is a restriction with reusing the
 

00:05:45.460 --> 00:05:47.730
is a restriction with reusing the
bitmaps with this API is that it will

00:05:47.730 --> 00:05:47.740
bitmaps with this API is that it will
 

00:05:47.740 --> 00:05:49.530
bitmaps with this API is that it will
only work for bitmaps of the same size

00:05:49.530 --> 00:05:49.540
only work for bitmaps of the same size
 

00:05:49.540 --> 00:05:51.780
only work for bitmaps of the same size
so we get the size of the initial bitmap

00:05:51.780 --> 00:05:51.790
so we get the size of the initial bitmap
 

00:05:51.790 --> 00:05:54.240
so we get the size of the initial bitmap
and we get only the size we don't force

00:05:54.240 --> 00:05:54.250
and we get only the size we don't force
 

00:05:54.250 --> 00:05:56.070
and we get only the size we don't force
it to actually load that bitmap yet by

00:05:56.070 --> 00:05:56.080
it to actually load that bitmap yet by
 

00:05:56.080 --> 00:05:58.740
it to actually load that bitmap yet by
using the in just decode Bowden options

00:05:58.740 --> 00:05:58.750
using the in just decode Bowden options
 

00:05:58.750 --> 00:06:00.480
using the in just decode Bowden options
and that will return the width and the

00:06:00.480 --> 00:06:00.490
and that will return the width and the
 

00:06:00.490 --> 00:06:02.390
and that will return the width and the
height that we can then use in our

00:06:02.390 --> 00:06:02.400
height that we can then use in our
 

00:06:02.400 --> 00:06:05.490
height that we can then use in our
create bitmap call so we use the the

00:06:05.490 --> 00:06:05.500
create bitmap call so we use the the
 

00:06:05.500 --> 00:06:06.720
create bitmap call so we use the the
width and the height that we need to

00:06:06.720 --> 00:06:06.730
width and the height that we need to
 

00:06:06.730 --> 00:06:08.430
width and the height that we need to
sort of get this sandbox we're going to

00:06:08.430 --> 00:06:08.440
sort of get this sandbox we're going to
 

00:06:08.440 --> 00:06:11.160
sort of get this sandbox we're going to
load all these things into then we reset

00:06:11.160 --> 00:06:11.170
load all these things into then we reset
 

00:06:11.170 --> 00:06:15.500
load all these things into then we reset
that flag and we set the in bitmap flag

00:06:15.500 --> 00:06:15.510
that flag and we set the in bitmap flag
 

00:06:15.510 --> 00:06:19.440
that flag and we set the in bitmap flag
and that is the new API that was

00:06:19.440 --> 00:06:19.450
and that is the new API that was
 

00:06:19.450 --> 00:06:21.750
and that is the new API that was
introduced in 3.0 at the same time as

00:06:21.750 --> 00:06:21.760
introduced in 3.0 at the same time as
 

00:06:21.760 --> 00:06:23.310
introduced in 3.0 at the same time as
the other change to the memory

00:06:23.310 --> 00:06:23.320
the other change to the memory
 

00:06:23.320 --> 00:06:25.440
the other change to the memory
management of bitmaps and we set that

00:06:25.440 --> 00:06:25.450
management of bitmaps and we set that
 

00:06:25.450 --> 00:06:28.320
management of bitmaps and we set that
equal to this sandbox bitmap that we've

00:06:28.320 --> 00:06:28.330
equal to this sandbox bitmap that we've
 

00:06:28.330 --> 00:06:30.420
equal to this sandbox bitmap that we've
just created and then we set the in

00:06:30.420 --> 00:06:30.430
just created and then we set the in
 

00:06:30.430 --> 00:06:32.880
just created and then we set the in
sample size to 1 and this is unnecessary

00:06:32.880 --> 00:06:32.890
sample size to 1 and this is unnecessary
 

00:06:32.890 --> 00:06:35.790
sample size to 1 and this is unnecessary
an unfortunate bug that got fixed in a

00:06:35.790 --> 00:06:35.800
an unfortunate bug that got fixed in a
 

00:06:35.800 --> 00:06:37.290
an unfortunate bug that got fixed in a
recent release where if you didn't set

00:06:37.290 --> 00:06:37.300
recent release where if you didn't set
 

00:06:37.300 --> 00:06:38.910
recent release where if you didn't set
the sample size it wouldn't do the right

00:06:38.910 --> 00:06:38.920
the sample size it wouldn't do the right
 

00:06:38.920 --> 00:06:39.410
the sample size it wouldn't do the right
thing so

00:06:39.410 --> 00:06:39.420
thing so
 

00:06:39.420 --> 00:06:41.210
thing so
do need to set it to what would be the

00:06:41.210 --> 00:06:41.220
do need to set it to what would be the
 

00:06:41.220 --> 00:06:43.640
do need to set it to what would be the
default option in sample size of one and

00:06:43.640 --> 00:06:43.650
default option in sample size of one and
 

00:06:43.650 --> 00:06:46.370
default option in sample size of one and
then we decode the resource and away we

00:06:46.370 --> 00:06:46.380
then we decode the resource and away we
 

00:06:46.380 --> 00:06:48.770
then we decode the resource and away we
go so now we're in our click listener

00:06:48.770 --> 00:06:48.780
go so now we're in our click listener
 

00:06:48.780 --> 00:06:50.030
go so now we're in our click listener
every time you click on the image we're

00:06:50.030 --> 00:06:50.040
every time you click on the image we're
 

00:06:50.040 --> 00:06:51.680
every time you click on the image we're
going to load in the next image and

00:06:51.680 --> 00:06:51.690
going to load in the next image and
 

00:06:51.690 --> 00:06:54.020
going to load in the next image and
we're either going to reuse that bitmap

00:06:54.020 --> 00:06:54.030
we're either going to reuse that bitmap
 

00:06:54.030 --> 00:06:56.330
we're either going to reuse that bitmap
or we're not so if the checkbox is

00:06:56.330 --> 00:06:56.340
or we're not so if the checkbox is
 

00:06:56.340 --> 00:06:58.910
or we're not so if the checkbox is
checked we're going to reuse the bitmap

00:06:58.910 --> 00:06:58.920
checked we're going to reuse the bitmap
 

00:06:58.920 --> 00:07:00.380
checked we're going to reuse the bitmap
and we're going to do that by saying the

00:07:00.380 --> 00:07:00.390
and we're going to do that by saying the
 

00:07:00.390 --> 00:07:02.660
and we're going to do that by saying the
bitmap options equals these options that

00:07:02.660 --> 00:07:02.670
bitmap options equals these options that
 

00:07:02.670 --> 00:07:04.400
bitmap options equals these options that
we've created above which has this in

00:07:04.400 --> 00:07:04.410
we've created above which has this in
 

00:07:04.410 --> 00:07:06.830
we've created above which has this in
bitmap parameter set in it which tells

00:07:06.830 --> 00:07:06.840
bitmap parameter set in it which tells
 

00:07:06.840 --> 00:07:09.500
bitmap parameter set in it which tells
it's a trigger to the code to say okay

00:07:09.500 --> 00:07:09.510
it's a trigger to the code to say okay
 

00:07:09.510 --> 00:07:11.540
it's a trigger to the code to say okay
this is the sandbox where I'm going to

00:07:11.540 --> 00:07:11.550
this is the sandbox where I'm going to
 

00:07:11.550 --> 00:07:15.700
this is the sandbox where I'm going to
actually load this new bitmap into and

00:07:15.700 --> 00:07:15.710
actually load this new bitmap into and
 

00:07:15.710 --> 00:07:18.530
actually load this new bitmap into and
so we set the in bitmap flag there and

00:07:18.530 --> 00:07:18.540
so we set the in bitmap flag there and
 

00:07:18.540 --> 00:07:20.450
so we set the in bitmap flag there and
then I was just issuing some timing

00:07:20.450 --> 00:07:20.460
then I was just issuing some timing
 

00:07:20.460 --> 00:07:22.370
then I was just issuing some timing
because this is how I produce the the

00:07:22.370 --> 00:07:22.380
because this is how I produce the the
 

00:07:22.380 --> 00:07:24.080
because this is how I produce the the
times that are spit out in the UI so we

00:07:24.080 --> 00:07:24.090
times that are spit out in the UI so we
 

00:07:24.090 --> 00:07:25.820
times that are spit out in the UI so we
can see how long these things take

00:07:25.820 --> 00:07:25.830
can see how long these things take
 

00:07:25.830 --> 00:07:27.410
can see how long these things take
we then decode the resource and that

00:07:27.410 --> 00:07:27.420
we then decode the resource and that
 

00:07:27.420 --> 00:07:29.180
we then decode the resource and that
will either reuse the bitmap or not

00:07:29.180 --> 00:07:29.190
will either reuse the bitmap or not
 

00:07:29.190 --> 00:07:30.590
will either reuse the bitmap or not
depending on whether we set the in

00:07:30.590 --> 00:07:30.600
depending on whether we set the in
 

00:07:30.600 --> 00:07:33.620
depending on whether we set the in
bitmap parameter above and then we set

00:07:33.620 --> 00:07:33.630
bitmap parameter above and then we set
 

00:07:33.630 --> 00:07:36.190
bitmap parameter above and then we set
the new image bitmap in the image view

00:07:36.190 --> 00:07:36.200
the new image bitmap in the image view
 

00:07:36.200 --> 00:07:39.290
the new image bitmap in the image view
finally we get the final time that it

00:07:39.290 --> 00:07:39.300
finally we get the final time that it
 

00:07:39.300 --> 00:07:40.940
finally we get the final time that it
took and display that in the UI and

00:07:40.940 --> 00:07:40.950
took and display that in the UI and
 

00:07:40.950 --> 00:07:43.520
took and display that in the UI and
that's it not very hard to use but

00:07:43.520 --> 00:07:43.530
that's it not very hard to use but
 

00:07:43.530 --> 00:07:45.320
that's it not very hard to use but
definitely worth using especially if

00:07:45.320 --> 00:07:45.330
definitely worth using especially if
 

00:07:45.330 --> 00:07:46.280
definitely worth using especially if
you're in the case where you're

00:07:46.280 --> 00:07:46.290
you're in the case where you're
 

00:07:46.290 --> 00:07:48.500
you're in the case where you're
constantly loading in new bitmaps and

00:07:48.500 --> 00:07:48.510
constantly loading in new bitmaps and
 

00:07:48.510 --> 00:07:50.420
constantly loading in new bitmaps and
those bitmaps are the same size as other

00:07:50.420 --> 00:07:50.430
those bitmaps are the same size as other
 

00:07:50.430 --> 00:07:52.520
those bitmaps are the same size as other
bitmaps that you're now done with this

00:07:52.520 --> 00:07:52.530
bitmaps that you're now done with this
 

00:07:52.530 --> 00:07:54.470
bitmaps that you're now done with this
basically allows a garbage collector to

00:07:54.470 --> 00:07:54.480
basically allows a garbage collector to
 

00:07:54.480 --> 00:07:56.150
basically allows a garbage collector to
get out of the way because there's

00:07:56.150 --> 00:07:56.160
get out of the way because there's
 

00:07:56.160 --> 00:07:57.860
get out of the way because there's
nothing to collect if you're loading the

00:07:57.860 --> 00:07:57.870
nothing to collect if you're loading the
 

00:07:57.870 --> 00:07:59.930
nothing to collect if you're loading the
new bitmap into the place of the old one

00:07:59.930 --> 00:07:59.940
new bitmap into the place of the old one
 

00:07:59.940 --> 00:08:02.270
new bitmap into the place of the old one
so check out bitmap options in

00:08:02.270 --> 00:08:02.280
so check out bitmap options in
 

00:08:02.280 --> 00:08:05.150
so check out bitmap options in
particular in bitmap and save some grief

00:08:05.150 --> 00:08:05.160
particular in bitmap and save some grief
 

00:08:05.160 --> 00:08:09.200
particular in bitmap and save some grief
over garbage collection times thanks

