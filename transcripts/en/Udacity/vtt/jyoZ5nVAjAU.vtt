WEBVTT
Kind: captions
Language: en

00:00:00.370 --> 00:00:04.530
So for programmers the most natural
type of consistency is called sequential

00:00:04.530 --> 00:00:09.580
consistency, and it says that
the result of any execution should be

00:00:09.580 --> 00:00:15.140
as if accesses executed by each
processor were executed in order and

00:00:15.140 --> 00:00:20.040
accesses among different processors
were arbitrarily interleaved.

00:00:20.040 --> 00:00:25.580
So we are allowed to let processors
take turns in terms of accessing,

00:00:25.580 --> 00:00:28.800
or let one access several times
before another one does, and so on.

00:00:28.800 --> 00:00:32.840
So we can do anything we want to
interleave the accesses from different

00:00:32.840 --> 00:00:34.210
processors.

00:00:34.210 --> 00:00:38.510
But what comes from each of
the processors needs to be exactly

00:00:38.510 --> 00:00:39.950
In program order.

00:00:39.950 --> 00:00:43.960
So, the simplest implementation
of sequential consistency

00:00:43.960 --> 00:00:47.600
is one where we remove
the should be as if.

00:00:47.600 --> 00:00:48.920
So, pretty much,

00:00:48.920 --> 00:00:54.540
any execution proceeds by executing
accesses from each processor in order.

00:00:54.540 --> 00:00:58.876
So, a core performs the next
memory access only when all

00:00:58.876 --> 00:01:02.200
previous accesses are complete.

00:01:02.200 --> 00:01:06.882
So in the code it waits for a flag
to be set and then prints the data.

00:01:06.882 --> 00:01:11.800
We cannot read the data until
the read of the flag has completed.

00:01:11.800 --> 00:01:18.240
Remember that the problem in previous
examples was that we branch predict this

00:01:18.240 --> 00:01:23.590
and leave and read the data then read
the flag and confirm our prediction.

00:01:23.590 --> 00:01:27.570
Now, we can still predict, but when we
get to reading the data we have to delay

00:01:27.570 --> 00:01:30.670
that until the flag has been read.

00:01:30.670 --> 00:01:36.080
At which point, if we read 1 here,
by that time the writes to the flag and

00:01:36.080 --> 00:01:38.500
data complete and
we will read the correct data here.

00:01:38.500 --> 00:01:42.160
Or if we read 0 here then we would
correct the miss prediction and

00:01:42.160 --> 00:01:43.800
go back to waiting here.

00:01:43.800 --> 00:01:44.640
So either way,

00:01:44.640 --> 00:01:49.770
you cannot print wrong data anymore
under sequential consistency here.

00:01:49.770 --> 00:01:55.370
So this works pretty well except that
it's really, really bad for performance.

