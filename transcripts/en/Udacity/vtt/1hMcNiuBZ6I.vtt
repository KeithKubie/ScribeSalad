WEBVTT
Kind: captions
Language: en

00:00:00.440 --> 00:00:03.410
So let's see if we can use
load links to our conditional

00:00:03.410 --> 00:00:06.320
to implement a lock function.

00:00:06.320 --> 00:00:10.480
The lock function takes
a reference to variable lockvar,

00:00:11.600 --> 00:00:16.239
and then, in assembler, and
then it will do something like this.

00:00:16.239 --> 00:00:21.648
Put 1 in R1, load the current value
of lockvar into R2 using a load link,

00:00:21.648 --> 00:00:27.910
then store R1 into lockvar using
store conditional, so the idea

00:00:27.910 --> 00:00:32.340
is that we load the current value of
the lock and then we store a 1 there.

00:00:33.350 --> 00:00:37.260
The question for you is what do we put
here to complete this lock function

00:00:37.260 --> 00:00:39.210
in a way that works correctly?

00:00:39.210 --> 00:00:44.110
That is, if we leave this function we
know that we have acquired the lock and

00:00:44.110 --> 00:00:46.730
we are the only ones that did so.

00:00:46.730 --> 00:00:50.120
The first option for
where the question mark is,

00:00:50.120 --> 00:00:55.460
is simply to do a branch on
branch on equals 0, R1, trylock.

00:00:55.460 --> 00:01:00.450
The second choice here is branch
on equals 0, R2, trylock.

00:01:01.560 --> 00:01:07.180
The third choice is to do branch
on not equal 0, R2, trylock.

00:01:07.180 --> 00:01:11.550
And then branch on equals 0,
link, trylock.

00:01:11.550 --> 00:01:14.611
The fourth option is
branch on not equal 0,

00:01:14.611 --> 00:01:19.640
R2, trylock, and
then branch on equals 0, R1, trylock.

00:01:19.640 --> 00:01:25.055
And the fifth, final option is to do
branch on not equal 0 in R2 to trylock.

00:01:25.055 --> 00:01:28.915
Followed by branch on not equal 0,
link, trylock.

00:01:28.915 --> 00:01:32.615
Select which one of these five is
the correct thing to put here.

