WEBVTT
Kind: captions
Language: en

00:00:00.260 --> 00:00:01.830
So let's try a few examples.

00:00:01.830 --> 00:00:02.920
So I'll create a dictionary.

00:00:02.920 --> 00:00:04.300
We're using the squiggly brackets.

00:00:05.880 --> 00:00:09.080
And some keyboards that's the shift
on the square bracket key.

00:00:09.080 --> 00:00:11.680
It may be somewhere
else on your keyboard.

00:00:11.680 --> 00:00:13.390
And we're going to use
the squiggly bracket,

00:00:13.390 --> 00:00:14.940
list our elements in the dictionary.

00:00:14.940 --> 00:00:17.660
So each element of the dictionary
is a key value pair.

00:00:17.660 --> 00:00:21.610
And the entries in the dictionary
will be the elements and their atomic

00:00:21.610 --> 00:00:25.680
numbers, so we have the string
hydrogen with its atomic number 1.

00:00:25.680 --> 00:00:27.810
And we have carbon with number 6.

00:00:27.810 --> 00:00:29.190
So we've created the dictionary,

00:00:29.190 --> 00:00:34.770
and what we see when we print it out
is the elements of the dictionary.

00:00:34.770 --> 00:00:36.260
Now one thing you might notice is,

00:00:36.260 --> 00:00:39.060
they're not in the same order
that we put them there.

00:00:39.060 --> 00:00:43.040
If you think about what we did with
hash tables, this isn't so surprising.

00:00:43.040 --> 00:00:45.990
When we put elements in hash tables,
well where they end

00:00:45.990 --> 00:00:48.880
in the hash table depends on the key and
the hash function.

00:00:48.880 --> 00:00:51.210
It's not necessarily in
the order that we put them in.

00:00:51.210 --> 00:00:53.630
And with the dictionary, because
it's implemented like a hash table,

00:00:53.630 --> 00:00:54.890
we see the same thing.

00:00:54.890 --> 00:00:55.770
Unlike a list,

00:00:55.770 --> 00:00:58.980
where the elements are ordered, with a
dictionary there's no order to elements.

00:00:58.980 --> 00:01:00.390
So when we print it out,

00:01:00.390 --> 00:01:03.000
they might appear in a different order
from the order that we put them in.

00:01:04.000 --> 00:01:06.670
We can use the indexing to
lookup one of the elements.

00:01:06.670 --> 00:01:10.780
So now when we lookup the value
associated with hydrogen, we get one.

00:01:10.780 --> 00:01:15.580
And if we lookup the value
associated with carbon, we get six.

00:01:15.580 --> 00:01:18.430
What do you think's going to happen
if we look up a value that's not in

00:01:18.430 --> 00:01:19.250
the dictionary?

00:01:19.250 --> 00:01:22.190
So now we're looking up the value
associated with lithium.

00:01:22.190 --> 00:01:23.980
And what we get is an error.

00:01:23.980 --> 00:01:25.220
It's called the KeyError.

00:01:25.220 --> 00:01:28.340
KeyError, it says that element
is not in the dictionary.

00:01:28.340 --> 00:01:31.330
This is different from how we define
lookup for our hash table, right?

00:01:31.330 --> 00:01:35.200
We defined our lookup to return none,
when the element is not there.

00:01:35.200 --> 00:01:36.900
The way the built in
dictionary type works,

00:01:36.900 --> 00:01:39.170
is it gives us an error
when it's not there.

00:01:39.170 --> 00:01:40.930
If we don't want to
get errors like that,

00:01:40.930 --> 00:01:44.560
we can use the in, to see if
an element's in the dictionary.

00:01:44.560 --> 00:01:48.640
So the in,
behaves similarly to in did for lists.

00:01:48.640 --> 00:01:51.220
We can say lithium in elements.

00:01:52.650 --> 00:01:57.210
That will evaluate to true, if the key
is in the dictionary, false otherwise.

00:01:57.210 --> 00:01:59.550
So now, hit a value it's to false.

00:01:59.550 --> 00:02:03.820
So I said that dictionaries were
mutable, so we can add new elements.

00:02:03.820 --> 00:02:06.880
And the way to add an element,
is just to use an assignment.

00:02:06.880 --> 00:02:09.690
So we'll add lithium, giving it value 3.

00:02:09.690 --> 00:02:15.450
Note that it was an error, when we
used an element like this as a lookup.

00:02:15.450 --> 00:02:18.940
When it's on the left side of
an assignment, well that's an update.

00:02:18.940 --> 00:02:21.400
So that corresponds to
the hash table update.

00:02:21.400 --> 00:02:24.110
Where lithium is the key and
3 is the value.

00:02:24.110 --> 00:02:26.210
We can add another element.

00:02:26.210 --> 00:02:27.130
Let's add another element.

00:02:27.130 --> 00:02:29.120
We'll add nitrogen.

00:02:29.120 --> 00:02:34.170
And now when we look up nitrogen, we get
the value that we assigned to nitrogen,

00:02:34.170 --> 00:02:35.100
which is 8.

00:02:35.100 --> 00:02:38.100
Turns out that 8 is not
actually the correct value.

00:02:38.100 --> 00:02:40.820
That the atomic number for
nitrogen should be seven.

00:02:40.820 --> 00:02:45.530
So we can modify that value,
using another assignment.

00:02:45.530 --> 00:02:48.470
That's again the same as
our hash table update.

00:02:48.470 --> 00:02:52.050
It won't create a new key value because
the key nitrogen is already there.

00:02:52.050 --> 00:02:53.410
But it will update the value, so

00:02:53.410 --> 00:02:57.350
now the value associated
with nitrogen will be 7.

00:02:57.350 --> 00:03:01.330
So we can see the first print,
the value is 8.

00:03:01.330 --> 00:03:03.444
The second print, the value is now 7.

