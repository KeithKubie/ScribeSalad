WEBVTT
Kind: captions
Language: en

00:00:04.033 --> 00:00:05.968
BRAD: Hi, I'm Brad Chen,
and I'm gonna be

00:00:05.968 --> 00:00:07.667
giving a talk
at Google I/O

00:00:07.667 --> 00:00:09.567
about a system called
Native Client.

00:00:09.567 --> 00:00:12.434
It's a new technology
that Google has developed

00:00:12.434 --> 00:00:16.167
for using native code as a part
of web applications.

00:00:16.167 --> 00:00:19.100
Now, uh, uh,
people often ask me,

00:00:19.100 --> 00:00:21.067
"Well, why native code
in web applications?

00:00:21.067 --> 00:00:22.734
"I mean, uh,
what's new about that?

00:00:22.734 --> 00:00:25.067
Active X has been there
for such a long time."

00:00:25.067 --> 00:00:27.934
That may be true,
but, uh,

00:00:27.934 --> 00:00:29.834
uh, it's one thing to use
native code,

00:00:29.834 --> 00:00:32.000
and it's another thing
to use native code safely.

00:00:32.000 --> 00:00:34.167
Our goal
is to make native code--

00:00:34.167 --> 00:00:37.167
that is, compiled C
or C++ applications--

00:00:37.167 --> 00:00:40.801
as safe as the Java script
in HTML

00:00:40.801 --> 00:00:44.267
that people use and take
for granted today on the Web.

00:00:44.267 --> 00:00:47.367
One example that I'll
be talking about at Google I/O

00:00:47.367 --> 00:00:51.300
is, uh, is a Linux
video processing system

00:00:51.300 --> 00:00:54.133
that we ported recently
to Native Client.

00:00:54.133 --> 00:00:56.267
Now, the original program

00:00:56.267 --> 00:01:01.000
would take a video
encoded in H264 format

00:01:01.000 --> 00:01:05.434
and convert it into a file
containing raw images on disc.

00:01:05.434 --> 00:01:07.167
And, uh, this example,

00:01:07.167 --> 00:01:09.133
the nice thing
that it shows is,

00:01:09.133 --> 00:01:12.634
with only about ten lines
of source code changes,

00:01:12.634 --> 00:01:15.701
we were able to take
that simple Linux application

00:01:15.701 --> 00:01:17.667
and make a video player
for Native Client.

00:01:17.667 --> 00:01:19.434
This first page
actually shows

00:01:19.434 --> 00:01:21.434
the first
substantial modification.

00:01:21.434 --> 00:01:22.834
And it's really
quite simple.

00:01:22.834 --> 00:01:25.234
We start up
by initializing

00:01:25.234 --> 00:01:27.534
the Native Client
multimedia system.

00:01:27.534 --> 00:01:30.334
Uh, and then four lines
of error checking.

00:01:30.334 --> 00:01:32.834
Uh, then we initialize
the video subsystem

00:01:32.834 --> 00:01:34.968
in the multimedia system.

00:01:34.968 --> 00:01:37.334
Uh, and then making sure
that the application

00:01:37.334 --> 00:01:40.267
knows we're not gonna be
writing that image to a--

00:01:40.267 --> 00:01:42.734
to a file, as the original
application did.

00:01:42.734 --> 00:01:44.534
And then on the next line,
we can see the code

00:01:44.534 --> 00:01:46.534
that actually does
the displaying of video frames.

00:01:46.534 --> 00:01:49.200
And, again,
it's really simple.

00:01:49.200 --> 00:01:51.033
We call this routine,

00:01:51.033 --> 00:01:52.367
which had already been
implemented

00:01:52.367 --> 00:01:54.400
as a part
of the video library,

00:01:54.400 --> 00:01:57.267
to take the YV12 representation
of the video

00:01:57.267 --> 00:02:00.767
and convert it into a 24-bit
RGB representation.

00:02:00.767 --> 00:02:05.167
Then we simply call
nacl_video_update.

00:02:05.167 --> 00:02:08.133
That's gonna cause the flame--
the frame--

00:02:08.133 --> 00:02:11.467
to be transferred
into the video memory.

00:02:11.467 --> 00:02:13.334
And then the system, uh,

00:02:13.334 --> 00:02:15.567
uh, takes care of, uh,

00:02:15.567 --> 00:02:17.634
the updating
of the frames itself.

00:02:17.634 --> 00:02:18.934
And that was it.

00:02:18.934 --> 00:02:21.334
With those changes,
we got a video player

00:02:21.334 --> 00:02:23.367
that would display video
in Native Client.

00:02:23.367 --> 00:02:25.033
And I'm looking forward
to showing that to you

00:02:25.033 --> 00:02:27.300
at the demo
at Google I/O.

