WEBVTT
Kind: captions
Language: en

00:00:02.880 --> 00:00:06.130
 
[Music]

00:00:06.130 --> 00:00:06.140
[Music]
 

00:00:06.140 --> 00:00:08.960
[Music]
good afternoon I'm Jeffrey phango I'm a

00:00:08.960 --> 00:00:08.970
good afternoon I'm Jeffrey phango I'm a
 

00:00:08.970 --> 00:00:10.490
good afternoon I'm Jeffrey phango I'm a
technique manager on the Android studio

00:00:10.490 --> 00:00:10.500
technique manager on the Android studio
 

00:00:10.500 --> 00:00:12.799
technique manager on the Android studio
team where I'm in charge of the D 8 r8

00:00:12.799 --> 00:00:12.809
team where I'm in charge of the D 8 r8
 

00:00:12.809 --> 00:00:16.460
team where I'm in charge of the D 8 r8
compiler project so last year a lot

00:00:16.460 --> 00:00:16.470
compiler project so last year a lot
 

00:00:16.470 --> 00:00:19.400
compiler project so last year a lot
happens in compiler space we added

00:00:19.400 --> 00:00:19.410
happens in compiler space we added
 

00:00:19.410 --> 00:00:21.080
happens in compiler space we added
incremental dexing which makes your

00:00:21.080 --> 00:00:21.090
incremental dexing which makes your
 

00:00:21.090 --> 00:00:23.660
incremental dexing which makes your
debugger built faster we added these

00:00:23.660 --> 00:00:23.670
debugger built faster we added these
 

00:00:23.670 --> 00:00:25.340
debugger built faster we added these
sugaring of Java 8 language features so

00:00:25.340 --> 00:00:25.350
sugaring of Java 8 language features so
 

00:00:25.350 --> 00:00:27.439
sugaring of Java 8 language features so
you can now use Java 8 features like

00:00:27.439 --> 00:00:27.449
you can now use Java 8 features like
 

00:00:27.449 --> 00:00:29.650
you can now use Java 8 features like
lambdas in all the versions of Android

00:00:29.650 --> 00:00:29.660
lambdas in all the versions of Android
 

00:00:29.660 --> 00:00:32.900
lambdas in all the versions of Android
we added a new deck sir which compiles

00:00:32.900 --> 00:00:32.910
we added a new deck sir which compiles
 

00:00:32.910 --> 00:00:34.639
we added a new deck sir which compiles
your Java bytecode to Delphic byte code

00:00:34.639 --> 00:00:34.649
your Java bytecode to Delphic byte code
 

00:00:34.649 --> 00:00:38.090
your Java bytecode to Delphic byte code
that runs from the art runtime we added

00:00:38.090 --> 00:00:38.100
that runs from the art runtime we added
 

00:00:38.100 --> 00:00:41.750
that runs from the art runtime we added
a new shrink and optimizer called r8 and

00:00:41.750 --> 00:00:41.760
a new shrink and optimizer called r8 and
 

00:00:41.760 --> 00:00:43.549
a new shrink and optimizer called r8 and
we added : specific optimizations

00:00:43.549 --> 00:00:43.559
we added : specific optimizations
 

00:00:43.559 --> 00:00:46.670
we added : specific optimizations
Internet as well and then today we also

00:00:46.670 --> 00:00:46.680
Internet as well and then today we also
 

00:00:46.680 --> 00:00:48.319
Internet as well and then today we also
have the Android app bundle and so I

00:00:48.319 --> 00:00:48.329
have the Android app bundle and so I
 

00:00:48.329 --> 00:00:50.750
have the Android app bundle and so I
want to talk to you about all of these

00:00:50.750 --> 00:00:50.760
want to talk to you about all of these
 

00:00:50.760 --> 00:00:53.990
want to talk to you about all of these
show how it works inside Gradle and give

00:00:53.990 --> 00:00:54.000
show how it works inside Gradle and give
 

00:00:54.000 --> 00:00:55.520
show how it works inside Gradle and give
you some tips of things you need to know

00:00:55.520 --> 00:00:55.530
you some tips of things you need to know
 

00:00:55.530 --> 00:00:59.540
you some tips of things you need to know
when you start using these new tools so

00:00:59.540 --> 00:00:59.550
when you start using these new tools so
 

00:00:59.550 --> 00:01:01.250
when you start using these new tools so
let's first start looking at incremental

00:01:01.250 --> 00:01:01.260
let's first start looking at incremental
 

00:01:01.260 --> 00:01:06.080
let's first start looking at incremental
dexing so here you have a very very

00:01:06.080 --> 00:01:06.090
dexing so here you have a very very
 

00:01:06.090 --> 00:01:08.120
dexing so here you have a very very
simplified version of what happens in

00:01:08.120 --> 00:01:08.130
simplified version of what happens in
 

00:01:08.130 --> 00:01:11.990
simplified version of what happens in
Gradle when the compiler runs so first

00:01:11.990 --> 00:01:12.000
Gradle when the compiler runs so first
 

00:01:12.000 --> 00:01:14.690
Gradle when the compiler runs so first
we run either Java C or Kotlin C to take

00:01:14.690 --> 00:01:14.700
we run either Java C or Kotlin C to take
 

00:01:14.700 --> 00:01:16.520
we run either Java C or Kotlin C to take
your Java or Copeland source code and

00:01:16.520 --> 00:01:16.530
your Java or Copeland source code and
 

00:01:16.530 --> 00:01:19.820
your Java or Copeland source code and
generate Java bytecode and then we run

00:01:19.820 --> 00:01:19.830
generate Java bytecode and then we run
 

00:01:19.830 --> 00:01:22.910
generate Java bytecode and then we run
DX that takes the Java bytecode and

00:01:22.910 --> 00:01:22.920
DX that takes the Java bytecode and
 

00:01:22.920 --> 00:01:27.260
DX that takes the Java bytecode and
produces Delphic bytecode now nice thing

00:01:27.260 --> 00:01:27.270
produces Delphic bytecode now nice thing
 

00:01:27.270 --> 00:01:29.660
produces Delphic bytecode now nice thing
that in Gradle because of Gradle and

00:01:29.660 --> 00:01:29.670
that in Gradle because of Gradle and
 

00:01:29.670 --> 00:01:32.600
that in Gradle because of Gradle and
JetBrains work Java C and Colton see are

00:01:32.600 --> 00:01:32.610
JetBrains work Java C and Colton see are
 

00:01:32.610 --> 00:01:35.179
JetBrains work Java C and Colton see are
actually incremental and that means that

00:01:35.179 --> 00:01:35.189
actually incremental and that means that
 

00:01:35.189 --> 00:01:37.880
actually incremental and that means that
if you change one source file it only

00:01:37.880 --> 00:01:37.890
if you change one source file it only
 

00:01:37.890 --> 00:01:39.410
if you change one source file it only
compiles that one source file and

00:01:39.410 --> 00:01:39.420
compiles that one source file and
 

00:01:39.420 --> 00:01:42.109
compiles that one source file and
potentially any sources that have

00:01:42.109 --> 00:01:42.119
potentially any sources that have
 

00:01:42.119 --> 00:01:43.810
potentially any sources that have
different semantics based on that change

00:01:43.810 --> 00:01:43.820
different semantics based on that change
 

00:01:43.820 --> 00:01:47.120
different semantics based on that change
now unfortunately in Android studio and

00:01:47.120 --> 00:01:47.130
now unfortunately in Android studio and
 

00:01:47.130 --> 00:01:51.319
now unfortunately in Android studio and
Gradle before 3.0 DX didn't do any

00:01:51.319 --> 00:01:51.329
Gradle before 3.0 DX didn't do any
 

00:01:51.329 --> 00:01:53.330
Gradle before 3.0 DX didn't do any
incremental work so it still took all

00:01:53.330 --> 00:01:53.340
incremental work so it still took all
 

00:01:53.340 --> 00:01:56.450
incremental work so it still took all
your Java class files and compiled each

00:01:56.450 --> 00:01:56.460
your Java class files and compiled each
 

00:01:56.460 --> 00:01:58.639
your Java class files and compiled each
one of them two dalvik bytecode even if

00:01:58.639 --> 00:01:58.649
one of them two dalvik bytecode even if
 

00:01:58.649 --> 00:02:02.359
one of them two dalvik bytecode even if
those class files hadn't changed so in

00:02:02.359 --> 00:02:02.369
those class files hadn't changed so in
 

00:02:02.369 --> 00:02:05.389
those class files hadn't changed so in
Android studio 3.0 and above we actually

00:02:05.389 --> 00:02:05.399
Android studio 3.0 and above we actually
 

00:02:05.399 --> 00:02:07.690
Android studio 3.0 and above we actually
changed it so that we can be incremental

00:02:07.690 --> 00:02:07.700
changed it so that we can be incremental
 

00:02:07.700 --> 00:02:12.020
changed it so that we can be incremental
so we'd split DX into two steps one that

00:02:12.020 --> 00:02:12.030
so we'd split DX into two steps one that
 

00:02:12.030 --> 00:02:12.309
so we'd split DX into two steps one that
take

00:02:12.309 --> 00:02:12.319
take
 

00:02:12.319 --> 00:02:14.709
take
the Java bytecode and compiles it to the

00:02:14.709 --> 00:02:14.719
the Java bytecode and compiles it to the
 

00:02:14.719 --> 00:02:16.000
the Java bytecode and compiles it to the
Delphic bytecode and we do that per

00:02:16.000 --> 00:02:16.010
Delphic bytecode and we do that per
 

00:02:16.010 --> 00:02:18.309
Delphic bytecode and we do that per
class file so we actually generate now

00:02:18.309 --> 00:02:18.319
class file so we actually generate now
 

00:02:18.319 --> 00:02:21.509
class file so we actually generate now
one dex file per class file and that way

00:02:21.509 --> 00:02:21.519
one dex file per class file and that way
 

00:02:21.519 --> 00:02:25.089
one dex file per class file and that way
that step can be incremental and then

00:02:25.089 --> 00:02:25.099
that step can be incremental and then
 

00:02:25.099 --> 00:02:28.390
that step can be incremental and then
after that we take all those codex files

00:02:28.390 --> 00:02:28.400
after that we take all those codex files
 

00:02:28.400 --> 00:02:30.940
after that we take all those codex files
and merge them into a single or multiple

00:02:30.940 --> 00:02:30.950
and merge them into a single or multiple
 

00:02:30.950 --> 00:02:33.940
and merge them into a single or multiple
Dex files if needed and the reason this

00:02:33.940 --> 00:02:33.950
Dex files if needed and the reason this
 

00:02:33.950 --> 00:02:36.940
Dex files if needed and the reason this
works is that most of the time spent

00:02:36.940 --> 00:02:36.950
works is that most of the time spent
 

00:02:36.950 --> 00:02:39.069
works is that most of the time spent
indexing is actually in the compilation

00:02:39.069 --> 00:02:39.079
indexing is actually in the compilation
 

00:02:39.079 --> 00:02:41.860
indexing is actually in the compilation
space where we take the Java bytecode

00:02:41.860 --> 00:02:41.870
space where we take the Java bytecode
 

00:02:41.870 --> 00:02:44.679
space where we take the Java bytecode
which is a stack based machine to

00:02:44.679 --> 00:02:44.689
which is a stack based machine to
 

00:02:44.689 --> 00:02:46.509
which is a stack based machine to
Delphic bytecode which is register base

00:02:46.509 --> 00:02:46.519
Delphic bytecode which is register base
 

00:02:46.519 --> 00:02:49.390
Delphic bytecode which is register base
and then the Dex merging is more or less

00:02:49.390 --> 00:02:49.400
and then the Dex merging is more or less
 

00:02:49.400 --> 00:02:52.209
and then the Dex merging is more or less
like a fancy concat and so that's a lot

00:02:52.209 --> 00:02:52.219
like a fancy concat and so that's a lot
 

00:02:52.219 --> 00:02:55.869
like a fancy concat and so that's a lot
faster and so we enabled this by default

00:02:55.869 --> 00:02:55.879
faster and so we enabled this by default
 

00:02:55.879 --> 00:02:58.929
faster and so we enabled this by default
in your debug built in release builds we

00:02:58.929 --> 00:02:58.939
in your debug built in release builds we
 

00:02:58.939 --> 00:03:02.110
in your debug built in release builds we
don't do that and so you pay a little

00:03:02.110 --> 00:03:02.120
don't do that and so you pay a little
 

00:03:02.120 --> 00:03:04.089
don't do that and so you pay a little
bit extra for the initial build because

00:03:04.089 --> 00:03:04.099
bit extra for the initial build because
 

00:03:04.099 --> 00:03:06.729
bit extra for the initial build because
we need to generate more files but then

00:03:06.729 --> 00:03:06.739
we need to generate more files but then
 

00:03:06.739 --> 00:03:08.229
we need to generate more files but then
each incremental build that you do

00:03:08.229 --> 00:03:08.239
each incremental build that you do
 

00:03:08.239 --> 00:03:10.559
each incremental build that you do
afterwards it's a lot faster just

00:03:10.559 --> 00:03:10.569
afterwards it's a lot faster just
 

00:03:10.569 --> 00:03:13.599
afterwards it's a lot faster just
because we have to do less work there

00:03:13.599 --> 00:03:13.609
because we have to do less work there
 

00:03:13.609 --> 00:03:14.740
because we have to do less work there
are some things you need to be aware of

00:03:14.740 --> 00:03:14.750
are some things you need to be aware of
 

00:03:14.750 --> 00:03:19.179
are some things you need to be aware of
though so Java C and cotton C are only

00:03:19.179 --> 00:03:19.189
though so Java C and cotton C are only
 

00:03:19.189 --> 00:03:21.249
though so Java C and cotton C are only
incremental when you are not using

00:03:21.249 --> 00:03:21.259
incremental when you are not using
 

00:03:21.259 --> 00:03:24.219
incremental when you are not using
annotation processors anytime you enable

00:03:24.219 --> 00:03:24.229
annotation processors anytime you enable
 

00:03:24.229 --> 00:03:26.649
annotation processors anytime you enable
annotation processors these annotation

00:03:26.649 --> 00:03:26.659
annotation processors these annotation
 

00:03:26.659 --> 00:03:28.689
annotation processors these annotation
processors can reach into any part of

00:03:28.689 --> 00:03:28.699
processors can reach into any part of
 

00:03:28.699 --> 00:03:31.839
processors can reach into any part of
your source and so we cannot make that

00:03:31.839 --> 00:03:31.849
your source and so we cannot make that
 

00:03:31.849 --> 00:03:34.659
your source and so we cannot make that
incremental now Gradle is working hard

00:03:34.659 --> 00:03:34.669
incremental now Gradle is working hard
 

00:03:34.669 --> 00:03:37.210
incremental now Gradle is working hard
to make that support it and so in Gradle

00:03:37.210 --> 00:03:37.220
to make that support it and so in Gradle
 

00:03:37.220 --> 00:03:40.089
to make that support it and so in Gradle
4.7 they introduced a preliminary

00:03:40.089 --> 00:03:40.099
4.7 they introduced a preliminary
 

00:03:40.099 --> 00:03:42.249
4.7 they introduced a preliminary
support for incremental annotation

00:03:42.249 --> 00:03:42.259
support for incremental annotation
 

00:03:42.259 --> 00:03:46.210
support for incremental annotation
processors this requires some work by

00:03:46.210 --> 00:03:46.220
processors this requires some work by
 

00:03:46.220 --> 00:03:48.099
processors this requires some work by
the annotation processor to support that

00:03:48.099 --> 00:03:48.109
the annotation processor to support that
 

00:03:48.109 --> 00:03:49.839
the annotation processor to support that
because annotation processor needs to

00:03:49.839 --> 00:03:49.849
because annotation processor needs to
 

00:03:49.849 --> 00:03:52.780
because annotation processor needs to
tell Gradle how incremental it can be

00:03:52.780 --> 00:03:52.790
tell Gradle how incremental it can be
 

00:03:52.790 --> 00:03:55.749
tell Gradle how incremental it can be
and so what I'd like to ask you all is

00:03:55.749 --> 00:03:55.759
and so what I'd like to ask you all is
 

00:03:55.759 --> 00:03:57.399
and so what I'd like to ask you all is
if you are an annotation processor

00:03:57.399 --> 00:03:57.409
if you are an annotation processor
 

00:03:57.409 --> 00:03:59.920
if you are an annotation processor
writer look at the stuff that Gradle is

00:03:59.920 --> 00:03:59.930
writer look at the stuff that Gradle is
 

00:03:59.930 --> 00:04:01.749
writer look at the stuff that Gradle is
doing and see if you can support that

00:04:01.749 --> 00:04:01.759
doing and see if you can support that
 

00:04:01.759 --> 00:04:03.670
doing and see if you can support that
and if you're using annotation

00:04:03.670 --> 00:04:03.680
and if you're using annotation
 

00:04:03.680 --> 00:04:05.679
and if you're using annotation
processors please read out to the

00:04:05.679 --> 00:04:05.689
processors please read out to the
 

00:04:05.689 --> 00:04:07.030
processors please read out to the
developers of those that they should

00:04:07.030 --> 00:04:07.040
developers of those that they should
 

00:04:07.040 --> 00:04:08.770
developers of those that they should
look at this because it will really

00:04:08.770 --> 00:04:08.780
look at this because it will really
 

00:04:08.780 --> 00:04:14.439
look at this because it will really
really speed up your builds ok so let's

00:04:14.439 --> 00:04:14.449
really speed up your builds ok so let's
 

00:04:14.449 --> 00:04:18.819
really speed up your builds ok so let's
go on to the sugaring what is the sugar

00:04:18.819 --> 00:04:18.829
go on to the sugaring what is the sugar
 

00:04:18.829 --> 00:04:19.750
go on to the sugaring what is the sugar
ring

00:04:19.750 --> 00:04:19.760
ring
 

00:04:19.760 --> 00:04:21.880
ring
we hear from all people they have it

00:04:21.880 --> 00:04:21.890
we hear from all people they have it
 

00:04:21.890 --> 00:04:23.860
we hear from all people they have it
many times that they want to use modern

00:04:23.860 --> 00:04:23.870
many times that they want to use modern
 

00:04:23.870 --> 00:04:26.820
many times that they want to use modern
Java features and Java aid like lambdas

00:04:26.820 --> 00:04:26.830
Java features and Java aid like lambdas
 

00:04:26.830 --> 00:04:30.100
Java features and Java aid like lambdas
default methods in interfaces try with

00:04:30.100 --> 00:04:30.110
default methods in interfaces try with
 

00:04:30.110 --> 00:04:33.430
default methods in interfaces try with
resources etc unfortunately a lot of

00:04:33.430 --> 00:04:33.440
resources etc unfortunately a lot of
 

00:04:33.440 --> 00:04:35.800
resources etc unfortunately a lot of
these features require a new bytecode

00:04:35.800 --> 00:04:35.810
these features require a new bytecode
 

00:04:35.810 --> 00:04:38.740
these features require a new bytecode
and language API to support them and of

00:04:38.740 --> 00:04:38.750
and language API to support them and of
 

00:04:38.750 --> 00:04:40.990
and language API to support them and of
course a lot of Android device out there

00:04:40.990 --> 00:04:41.000
course a lot of Android device out there
 

00:04:41.000 --> 00:04:44.110
course a lot of Android device out there
run all the versions of the dalvik VM

00:04:44.110 --> 00:04:44.120
run all the versions of the dalvik VM
 

00:04:44.120 --> 00:04:47.680
run all the versions of the dalvik VM
that doesn't yet support these and but

00:04:47.680 --> 00:04:47.690
that doesn't yet support these and but
 

00:04:47.690 --> 00:04:48.700
that doesn't yet support these and but
developers really want to use these

00:04:48.700 --> 00:04:48.710
developers really want to use these
 

00:04:48.710 --> 00:04:50.320
developers really want to use these
features especially as you start using

00:04:50.320 --> 00:04:50.330
features especially as you start using
 

00:04:50.330 --> 00:04:52.840
features especially as you start using
new frameworks like reactive extensions

00:04:52.840 --> 00:04:52.850
new frameworks like reactive extensions
 

00:04:52.850 --> 00:04:54.850
new frameworks like reactive extensions
now I'm not sure exactly what these

00:04:54.850 --> 00:04:54.860
now I'm not sure exactly what these
 

00:04:54.860 --> 00:04:56.110
now I'm not sure exactly what these
libraries do but they use a lot of

00:04:56.110 --> 00:04:56.120
libraries do but they use a lot of
 

00:04:56.120 --> 00:04:58.810
libraries do but they use a lot of
callbacks and would be much nicer if you

00:04:58.810 --> 00:04:58.820
callbacks and would be much nicer if you
 

00:04:58.820 --> 00:05:02.950
callbacks and would be much nicer if you
can use lambdas there and so what we do

00:05:02.950 --> 00:05:02.960
can use lambdas there and so what we do
 

00:05:02.960 --> 00:05:05.440
can use lambdas there and so what we do
with the sugar is we take the bytecode

00:05:05.440 --> 00:05:05.450
with the sugar is we take the bytecode
 

00:05:05.450 --> 00:05:07.810
with the sugar is we take the bytecode
and calls that are generated by these

00:05:07.810 --> 00:05:07.820
and calls that are generated by these
 

00:05:07.820 --> 00:05:10.750
and calls that are generated by these
new features in the Java compiler and we

00:05:10.750 --> 00:05:10.760
new features in the Java compiler and we
 

00:05:10.760 --> 00:05:12.130
new features in the Java compiler and we
convert them to something that is

00:05:12.130 --> 00:05:12.140
convert them to something that is
 

00:05:12.140 --> 00:05:14.500
convert them to something that is
supported in the old system so for

00:05:14.500 --> 00:05:14.510
supported in the old system so for
 

00:05:14.510 --> 00:05:16.620
supported in the old system so for
instance if you use a lambda and Java 8

00:05:16.620 --> 00:05:16.630
instance if you use a lambda and Java 8
 

00:05:16.630 --> 00:05:20.530
instance if you use a lambda and Java 8
we can take that and replace it with a

00:05:20.530 --> 00:05:20.540
we can take that and replace it with a
 

00:05:20.540 --> 00:05:22.960
we can take that and replace it with a
class as if you her to handwrite it so

00:05:22.960 --> 00:05:22.970
class as if you her to handwrite it so
 

00:05:22.970 --> 00:05:24.340
class as if you her to handwrite it so
that you don't have to handwrite it and

00:05:24.340 --> 00:05:24.350
that you don't have to handwrite it and
 

00:05:24.350 --> 00:05:27.340
that you don't have to handwrite it and
we do it for you

00:05:27.340 --> 00:05:27.350
 
 

00:05:27.350 --> 00:05:28.870
 
so let's take a look at how that works

00:05:28.870 --> 00:05:28.880
so let's take a look at how that works
 

00:05:28.880 --> 00:05:32.520
so let's take a look at how that works
in practice and so let's switch the demo

00:05:32.520 --> 00:05:32.530
in practice and so let's switch the demo
 

00:05:32.530 --> 00:05:34.810
in practice and so let's switch the demo
ok so here I have an Android studio

00:05:34.810 --> 00:05:34.820
ok so here I have an Android studio
 

00:05:34.820 --> 00:05:37.840
ok so here I have an Android studio
project that is just created by

00:05:37.840 --> 00:05:37.850
project that is just created by
 

00:05:37.850 --> 00:05:40.120
project that is just created by
following the wizards and selecting a

00:05:40.120 --> 00:05:40.130
following the wizards and selecting a
 

00:05:40.130 --> 00:05:44.760
following the wizards and selecting a
basic activity and so if you go to the

00:05:44.760 --> 00:05:44.770
basic activity and so if you go to the
 

00:05:44.770 --> 00:05:48.220
basic activity and so if you go to the
module in the module settings you see

00:05:48.220 --> 00:05:48.230
module in the module settings you see
 

00:05:48.230 --> 00:05:49.900
module in the module settings you see
that I have set the source language to

00:05:49.900 --> 00:05:49.910
that I have set the source language to
 

00:05:49.910 --> 00:05:54.190
that I have set the source language to
1.8 and now it will allow me to write

00:05:54.190 --> 00:05:54.200
1.8 and now it will allow me to write
 

00:05:54.200 --> 00:05:56.680
1.8 and now it will allow me to write
Java 8 language features and if you do

00:05:56.680 --> 00:05:56.690
Java 8 language features and if you do
 

00:05:56.690 --> 00:05:58.720
Java 8 language features and if you do
this Gradle automatically figures out

00:05:58.720 --> 00:05:58.730
this Gradle automatically figures out
 

00:05:58.730 --> 00:06:00.340
this Gradle automatically figures out
that it needs to run this sugar for you

00:06:00.340 --> 00:06:00.350
that it needs to run this sugar for you
 

00:06:00.350 --> 00:06:03.520
that it needs to run this sugar for you
and so here I have some code I have a

00:06:03.520 --> 00:06:03.530
and so here I have some code I have a
 

00:06:03.530 --> 00:06:05.110
and so here I have some code I have a
floating action button that I want to

00:06:05.110 --> 00:06:05.120
floating action button that I want to
 

00:06:05.120 --> 00:06:06.700
floating action button that I want to
hook up some code to but when you click

00:06:06.700 --> 00:06:06.710
hook up some code to but when you click
 

00:06:06.710 --> 00:06:09.940
hook up some code to but when you click
it and now because I use Java 8 I don't

00:06:09.940 --> 00:06:09.950
it and now because I use Java 8 I don't
 

00:06:09.950 --> 00:06:12.250
it and now because I use Java 8 I don't
have to write new onclicklistener and

00:06:12.250 --> 00:06:12.260
have to write new onclicklistener and
 

00:06:12.260 --> 00:06:14.800
have to write new onclicklistener and
implement the whole interface instead I

00:06:14.800 --> 00:06:14.810
implement the whole interface instead I
 

00:06:14.810 --> 00:06:17.860
implement the whole interface instead I
can just write a lambda and have it in

00:06:17.860 --> 00:06:17.870
can just write a lambda and have it in
 

00:06:17.870 --> 00:06:22.030
can just write a lambda and have it in
be invoked so if I go and look at the

00:06:22.030 --> 00:06:22.040
be invoked so if I go and look at the
 

00:06:22.040 --> 00:06:26.249
be invoked so if I go and look at the
output of the Java C compiler there's a

00:06:26.249 --> 00:06:26.259
output of the Java C compiler there's a
 

00:06:26.259 --> 00:06:28.480
output of the Java C compiler there's a
mainactivity look glass and I can copy

00:06:28.480 --> 00:06:28.490
mainactivity look glass and I can copy
 

00:06:28.490 --> 00:06:31.950
mainactivity look glass and I can copy
that path there is a tool in a Java JDK

00:06:31.950 --> 00:06:31.960
that path there is a tool in a Java JDK
 

00:06:31.960 --> 00:06:35.080
that path there is a tool in a Java JDK
called Java P which allows you to take a

00:06:35.080 --> 00:06:35.090
called Java P which allows you to take a
 

00:06:35.090 --> 00:06:37.360
called Java P which allows you to take a
class file and look at the byte code

00:06:37.360 --> 00:06:37.370
class file and look at the byte code
 

00:06:37.370 --> 00:06:40.809
class file and look at the byte code
that's in there and so I'll run that and

00:06:40.809 --> 00:06:40.819
that's in there and so I'll run that and
 

00:06:40.819 --> 00:06:42.100
that's in there and so I'll run that and
because it generates a lot of output

00:06:42.100 --> 00:06:42.110
because it generates a lot of output
 

00:06:42.110 --> 00:06:44.260
because it generates a lot of output
I'll pipe it to a file and then I'm

00:06:44.260 --> 00:06:44.270
I'll pipe it to a file and then I'm
 

00:06:44.270 --> 00:06:46.869
I'll pipe it to a file and then I'm
opening it in my favorite IDE Android

00:06:46.869 --> 00:06:46.879
opening it in my favorite IDE Android
 

00:06:46.879 --> 00:06:50.559
opening it in my favorite IDE Android
studio and so if you haven't looked at

00:06:50.559 --> 00:06:50.569
studio and so if you haven't looked at
 

00:06:50.569 --> 00:06:53.200
studio and so if you haven't looked at
Java bytecode don't be afraid it's still

00:06:53.200 --> 00:06:53.210
Java bytecode don't be afraid it's still
 

00:06:53.210 --> 00:06:55.629
Java bytecode don't be afraid it's still
pretty high level it's kind of readable

00:06:55.629 --> 00:06:55.639
pretty high level it's kind of readable
 

00:06:55.639 --> 00:06:57.730
pretty high level it's kind of readable
the only thing that's not there is for

00:06:57.730 --> 00:06:57.740
the only thing that's not there is for
 

00:06:57.740 --> 00:07:00.249
the only thing that's not there is for
loops if statements and so on but like

00:07:00.249 --> 00:07:00.259
loops if statements and so on but like
 

00:07:00.259 --> 00:07:01.959
loops if statements and so on but like
if you read through it is still pretty

00:07:01.959 --> 00:07:01.969
if you read through it is still pretty
 

00:07:01.969 --> 00:07:03.369
if you read through it is still pretty
understandable so there's a lot of

00:07:03.369 --> 00:07:03.379
understandable so there's a lot of
 

00:07:03.379 --> 00:07:04.629
understandable so there's a lot of
constants that we're just gonna skip

00:07:04.629 --> 00:07:04.639
constants that we're just gonna skip
 

00:07:04.639 --> 00:07:07.149
constants that we're just gonna skip
over and then here we have the oncreate

00:07:07.149 --> 00:07:07.159
over and then here we have the oncreate
 

00:07:07.159 --> 00:07:09.760
over and then here we have the oncreate
method that we were looking at and in

00:07:09.760 --> 00:07:09.770
method that we were looking at and in
 

00:07:09.770 --> 00:07:12.249
method that we were looking at and in
first school here you see that there's a

00:07:12.249 --> 00:07:12.259
first school here you see that there's a
 

00:07:12.259 --> 00:07:15.399
first school here you see that there's a
virtual call to the set onclicklistener

00:07:15.399 --> 00:07:15.409
virtual call to the set onclicklistener
 

00:07:15.409 --> 00:07:17.829
virtual call to the set onclicklistener
that's the thing where we passed our

00:07:17.829 --> 00:07:17.839
that's the thing where we passed our
 

00:07:17.839 --> 00:07:20.200
that's the thing where we passed our
lambda two and then see that the

00:07:20.200 --> 00:07:20.210
lambda two and then see that the
 

00:07:20.210 --> 00:07:21.909
lambda two and then see that the
argument before that is this

00:07:21.909 --> 00:07:21.919
argument before that is this
 

00:07:21.919 --> 00:07:25.989
argument before that is this
invokedynamic instruction and it tells

00:07:25.989 --> 00:07:25.999
invokedynamic instruction and it tells
 

00:07:25.999 --> 00:07:27.399
invokedynamic instruction and it tells
us that it's gonna pass this

00:07:27.399 --> 00:07:27.409
us that it's gonna pass this
 

00:07:27.409 --> 00:07:30.459
us that it's gonna pass this
onclicklistener so what is invoke

00:07:30.459 --> 00:07:30.469
onclicklistener so what is invoke
 

00:07:30.469 --> 00:07:33.550
onclicklistener so what is invoke
dynamic it's a nice feature in the java

00:07:33.550 --> 00:07:33.560
dynamic it's a nice feature in the java
 

00:07:33.560 --> 00:07:38.019
dynamic it's a nice feature in the java
vm that is kind of reflective so instead

00:07:38.019 --> 00:07:38.029
vm that is kind of reflective so instead
 

00:07:38.029 --> 00:07:40.329
vm that is kind of reflective so instead
of the vm immediately invoking your

00:07:40.329 --> 00:07:40.339
of the vm immediately invoking your
 

00:07:40.339 --> 00:07:43.389
of the vm immediately invoking your
method it allows the application to

00:07:43.389 --> 00:07:43.399
method it allows the application to
 

00:07:43.399 --> 00:07:46.450
method it allows the application to
provide a hook in there and dispatch the

00:07:46.450 --> 00:07:46.460
provide a hook in there and dispatch the
 

00:07:46.460 --> 00:07:50.200
provide a hook in there and dispatch the
method any way you want and so and in

00:07:50.200 --> 00:07:50.210
method any way you want and so and in
 

00:07:50.210 --> 00:07:53.050
method any way you want and so and in
Java they have these things called meta

00:07:53.050 --> 00:07:53.060
Java they have these things called meta
 

00:07:53.060 --> 00:07:54.730
Java they have these things called meta
factories that they use to implement

00:07:54.730 --> 00:07:54.740
factories that they use to implement
 

00:07:54.740 --> 00:07:57.309
factories that they use to implement
these features and so there is this

00:07:57.309 --> 00:07:57.319
these features and so there is this
 

00:07:57.319 --> 00:08:00.189
these features and so there is this
specific lambda meta Factory and you see

00:08:00.189 --> 00:08:00.199
specific lambda meta Factory and you see
 

00:08:00.199 --> 00:08:03.339
specific lambda meta Factory and you see
that here in the bottom of the file that

00:08:03.339 --> 00:08:03.349
that here in the bottom of the file that
 

00:08:03.349 --> 00:08:05.920
that here in the bottom of the file that
scatters argument the view and then it

00:08:05.920 --> 00:08:05.930
scatters argument the view and then it
 

00:08:05.930 --> 00:08:08.550
scatters argument the view and then it
passes to this lambda oncreate method

00:08:08.550 --> 00:08:08.560
passes to this lambda oncreate method
 

00:08:08.560 --> 00:08:12.850
passes to this lambda oncreate method
which we can see here as well and if you

00:08:12.850 --> 00:08:12.860
which we can see here as well and if you
 

00:08:12.860 --> 00:08:15.730
which we can see here as well and if you
look carefully you see that it actually

00:08:15.730 --> 00:08:15.740
look carefully you see that it actually
 

00:08:15.740 --> 00:08:18.070
look carefully you see that it actually
has the the snack bar codes that we had

00:08:18.070 --> 00:08:18.080
has the the snack bar codes that we had
 

00:08:18.080 --> 00:08:20.829
has the the snack bar codes that we had
in the body of our lambda so what's

00:08:20.829 --> 00:08:20.839
in the body of our lambda so what's
 

00:08:20.839 --> 00:08:22.809
in the body of our lambda so what's
going on here is that the first time the

00:08:22.809 --> 00:08:22.819
going on here is that the first time the
 

00:08:22.819 --> 00:08:26.409
going on here is that the first time the
app is run on the JVM it knows that it

00:08:26.409 --> 00:08:26.419
app is run on the JVM it knows that it
 

00:08:26.419 --> 00:08:27.969
app is run on the JVM it knows that it
needs to call this lambda meta Factory

00:08:27.969 --> 00:08:27.979
needs to call this lambda meta Factory
 

00:08:27.979 --> 00:08:29.920
needs to call this lambda meta Factory
and that thing will actually generate

00:08:29.920 --> 00:08:29.930
and that thing will actually generate
 

00:08:29.930 --> 00:08:32.319
and that thing will actually generate
the class that implements the interface

00:08:32.319 --> 00:08:32.329
the class that implements the interface
 

00:08:32.329 --> 00:08:35.949
the class that implements the interface
on the fly and then it will call that

00:08:35.949 --> 00:08:35.959
on the fly and then it will call that
 

00:08:35.959 --> 00:08:37.920
on the fly and then it will call that
for the rest of the program

00:08:37.920 --> 00:08:37.930
for the rest of the program
 

00:08:37.930 --> 00:08:41.430
for the rest of the program
now the parameters that that takes time

00:08:41.430 --> 00:08:41.440
now the parameters that that takes time
 

00:08:41.440 --> 00:08:43.890
now the parameters that that takes time
at run time adds more memory at runtime

00:08:43.890 --> 00:08:43.900
at run time adds more memory at runtime
 

00:08:43.900 --> 00:08:48.000
at run time adds more memory at runtime
so we don't do that on Android even a

00:08:48.000 --> 00:08:48.010
so we don't do that on Android even a
 

00:08:48.010 --> 00:08:50.430
so we don't do that on Android even a
newer version of Android and of course

00:08:50.430 --> 00:08:50.440
newer version of Android and of course
 

00:08:50.440 --> 00:08:52.230
newer version of Android and of course
an old version of Android they don't

00:08:52.230 --> 00:08:52.240
an old version of Android they don't
 

00:08:52.240 --> 00:08:53.340
an old version of Android they don't
know about this invoke dynamic

00:08:53.340 --> 00:08:53.350
know about this invoke dynamic
 

00:08:53.350 --> 00:08:57.390
know about this invoke dynamic
instruction or the meta Factory so

00:08:57.390 --> 00:08:57.400
instruction or the meta Factory so
 

00:08:57.400 --> 00:08:59.250
instruction or the meta Factory so
instead the sugar will take care of this

00:08:59.250 --> 00:08:59.260
instead the sugar will take care of this
 

00:08:59.260 --> 00:09:02.280
instead the sugar will take care of this
so let's take a look at what happened in

00:09:02.280 --> 00:09:02.290
so let's take a look at what happened in
 

00:09:02.290 --> 00:09:05.910
so let's take a look at what happened in
this project when we built it using the

00:09:05.910 --> 00:09:05.920
this project when we built it using the
 

00:09:05.920 --> 00:09:08.810
this project when we built it using the
sugar so I'm going to open the apk

00:09:08.810 --> 00:09:08.820
sugar so I'm going to open the apk
 

00:09:08.820 --> 00:09:11.100
sugar so I'm going to open the apk
there's this tool since in Android

00:09:11.100 --> 00:09:11.110
there's this tool since in Android
 

00:09:11.110 --> 00:09:13.470
there's this tool since in Android
studio 3.0 above called the apk analyzer

00:09:13.470 --> 00:09:13.480
studio 3.0 above called the apk analyzer
 

00:09:13.480 --> 00:09:16.430
studio 3.0 above called the apk analyzer
and it allows you to look inside the apk

00:09:16.430 --> 00:09:16.440
and it allows you to look inside the apk
 

00:09:16.440 --> 00:09:20.340
and it allows you to look inside the apk
both for file size of your resources but

00:09:20.340 --> 00:09:20.350
both for file size of your resources but
 

00:09:20.350 --> 00:09:22.980
both for file size of your resources but
also to see what's inside the the Dex

00:09:22.980 --> 00:09:22.990
also to see what's inside the the Dex
 

00:09:22.990 --> 00:09:25.520
also to see what's inside the the Dex
code that's going to run on the device

00:09:25.520 --> 00:09:25.530
code that's going to run on the device
 

00:09:25.530 --> 00:09:29.520
code that's going to run on the device
so here I see all the packages in the

00:09:29.520 --> 00:09:29.530
so here I see all the packages in the
 

00:09:29.530 --> 00:09:31.170
so here I see all the packages in the
Dex codes and I'm going to navigate to

00:09:31.170 --> 00:09:31.180
Dex codes and I'm going to navigate to
 

00:09:31.180 --> 00:09:35.610
Dex codes and I'm going to navigate to
my main activity and then on create

00:09:35.610 --> 00:09:35.620
my main activity and then on create
 

00:09:35.620 --> 00:09:38.000
my main activity and then on create
method and I'm gonna say show byte code

00:09:38.000 --> 00:09:38.010
method and I'm gonna say show byte code
 

00:09:38.010 --> 00:09:40.920
method and I'm gonna say show byte code
so you see byte code that is kind of

00:09:40.920 --> 00:09:40.930
so you see byte code that is kind of
 

00:09:40.930 --> 00:09:43.650
so you see byte code that is kind of
similar to Java byte code there's a

00:09:43.650 --> 00:09:43.660
similar to Java byte code there's a
 

00:09:43.660 --> 00:09:45.870
similar to Java byte code there's a
couple differences instead of using

00:09:45.870 --> 00:09:45.880
couple differences instead of using
 

00:09:45.880 --> 00:09:48.150
couple differences instead of using
stack based machines we have registers

00:09:48.150 --> 00:09:48.160
stack based machines we have registers
 

00:09:48.160 --> 00:09:50.130
stack based machines we have registers
but if you don't are not familiar with

00:09:50.130 --> 00:09:50.140
but if you don't are not familiar with
 

00:09:50.140 --> 00:09:52.920
but if you don't are not familiar with
that don't worry about that so at the

00:09:52.920 --> 00:09:52.930
that don't worry about that so at the
 

00:09:52.930 --> 00:09:54.720
that don't worry about that so at the
end of the method we see the same call

00:09:54.720 --> 00:09:54.730
end of the method we see the same call
 

00:09:54.730 --> 00:09:58.110
end of the method we see the same call
to the set onclicklistener but the big

00:09:58.110 --> 00:09:58.120
to the set onclicklistener but the big
 

00:09:58.120 --> 00:10:00.570
to the set onclicklistener but the big
difference is that one line above it

00:10:00.570 --> 00:10:00.580
difference is that one line above it
 

00:10:00.580 --> 00:10:02.280
difference is that one line above it
doesn't show invoke dynamic or invoke

00:10:02.280 --> 00:10:02.290
doesn't show invoke dynamic or invoke
 

00:10:02.290 --> 00:10:03.840
doesn't show invoke dynamic or invoke
custom as it would be on Android

00:10:03.840 --> 00:10:03.850
custom as it would be on Android
 

00:10:03.850 --> 00:10:07.530
custom as it would be on Android
instead it calls this magic class - -

00:10:07.530 --> 00:10:07.540
instead it calls this magic class - -
 

00:10:07.540 --> 00:10:09.660
instead it calls this magic class - -
dollar lambda and then it gets the

00:10:09.660 --> 00:10:09.670
dollar lambda and then it gets the
 

00:10:09.670 --> 00:10:12.390
dollar lambda and then it gets the
interface field of that so let's take a

00:10:12.390 --> 00:10:12.400
interface field of that so let's take a
 

00:10:12.400 --> 00:10:18.420
interface field of that so let's take a
look at that class so you see that the

00:10:18.420 --> 00:10:18.430
look at that class so you see that the
 

00:10:18.430 --> 00:10:21.870
look at that class so you see that the
class is right along there and so what

00:10:21.870 --> 00:10:21.880
class is right along there and so what
 

00:10:21.880 --> 00:10:23.220
class is right along there and so what
we see in the class is that it

00:10:23.220 --> 00:10:23.230
we see in the class is that it
 

00:10:23.230 --> 00:10:24.930
we see in the class is that it
implements the own click listener

00:10:24.930 --> 00:10:24.940
implements the own click listener
 

00:10:24.940 --> 00:10:28.670
implements the own click listener
interface it has a static field instance

00:10:28.670 --> 00:10:28.680
interface it has a static field instance
 

00:10:28.680 --> 00:10:32.760
interface it has a static field instance
and then it has the onclick method for

00:10:32.760 --> 00:10:32.770
and then it has the onclick method for
 

00:10:32.770 --> 00:10:35.880
and then it has the onclick method for
the onclick listener interface and all

00:10:35.880 --> 00:10:35.890
the onclick listener interface and all
 

00:10:35.890 --> 00:10:38.400
the onclick listener interface and all
it does it's called the generated method

00:10:38.400 --> 00:10:38.410
it does it's called the generated method
 

00:10:38.410 --> 00:10:40.710
it does it's called the generated method
that contains method body of our lambda

00:10:40.710 --> 00:10:40.720
that contains method body of our lambda
 

00:10:40.720 --> 00:10:45.120
that contains method body of our lambda
and so now there's no Java 8 features no

00:10:45.120 --> 00:10:45.130
and so now there's no Java 8 features no
 

00:10:45.130 --> 00:10:46.759
and so now there's no Java 8 features no
Java 8 byte code in

00:10:46.759 --> 00:10:46.769
Java 8 byte code in
 

00:10:46.769 --> 00:10:49.210
Java 8 byte code in
code and we can execute it on any

00:10:49.210 --> 00:10:49.220
code and we can execute it on any
 

00:10:49.220 --> 00:10:51.859
code and we can execute it on any
Android version even as low as Ice Cream

00:10:51.859 --> 00:10:51.869
Android version even as low as Ice Cream
 

00:10:51.869 --> 00:10:52.479
Android version even as low as Ice Cream
Sandwich

00:10:52.479 --> 00:10:52.489
Sandwich
 

00:10:52.489 --> 00:10:56.499
Sandwich
okay so let's switch back to the slides

00:10:56.499 --> 00:10:56.509
okay so let's switch back to the slides
 

00:10:56.509 --> 00:11:00.049
okay so let's switch back to the slides
so this is how that is integrated into

00:11:00.049 --> 00:11:00.059
so this is how that is integrated into
 

00:11:00.059 --> 00:11:02.809
so this is how that is integrated into
the Gradle build system after the Java C

00:11:02.809 --> 00:11:02.819
the Gradle build system after the Java C
 

00:11:02.819 --> 00:11:05.539
the Gradle build system after the Java C
compiler runs we run the separate

00:11:05.539 --> 00:11:05.549
compiler runs we run the separate
 

00:11:05.549 --> 00:11:07.819
compiler runs we run the separate
process called D sugar all right what it

00:11:07.819 --> 00:11:07.829
process called D sugar all right what it
 

00:11:07.829 --> 00:11:09.289
process called D sugar all right what it
does it reads the Java bytecode

00:11:09.289 --> 00:11:09.299
does it reads the Java bytecode
 

00:11:09.299 --> 00:11:11.600
does it reads the Java bytecode
it takes out all these functions that

00:11:11.600 --> 00:11:11.610
it takes out all these functions that
 

00:11:11.610 --> 00:11:13.699
it takes out all these functions that
are not supported emits new byte codes

00:11:13.699 --> 00:11:13.709
are not supported emits new byte codes
 

00:11:13.709 --> 00:11:16.729
are not supported emits new byte codes
and then we pass it on to DX and so the

00:11:16.729 --> 00:11:16.739
and then we pass it on to DX and so the
 

00:11:16.739 --> 00:11:18.619
and then we pass it on to DX and so the
rest of the pipeline doesn't have to

00:11:18.619 --> 00:11:18.629
rest of the pipeline doesn't have to
 

00:11:18.629 --> 00:11:22.129
rest of the pipeline doesn't have to
know anything about the sugaring so this

00:11:22.129 --> 00:11:22.139
know anything about the sugaring so this
 

00:11:22.139 --> 00:11:23.650
know anything about the sugaring so this
is nice you can use new Java 8 features

00:11:23.650 --> 00:11:23.660
is nice you can use new Java 8 features
 

00:11:23.660 --> 00:11:25.519
is nice you can use new Java 8 features
there's a couple things you need to be

00:11:25.519 --> 00:11:25.529
there's a couple things you need to be
 

00:11:25.529 --> 00:11:27.619
there's a couple things you need to be
aware of if you do your own bytecode

00:11:27.619 --> 00:11:27.629
aware of if you do your own bytecode
 

00:11:27.629 --> 00:11:29.780
aware of if you do your own bytecode
transformations so there's people who do

00:11:29.780 --> 00:11:29.790
transformations so there's people who do
 

00:11:29.790 --> 00:11:32.239
transformations so there's people who do
their own bytecode transformations for

00:11:32.239 --> 00:11:32.249
their own bytecode transformations for
 

00:11:32.249 --> 00:11:35.410
their own bytecode transformations for
code injection crash reporting etc

00:11:35.410 --> 00:11:35.420
code injection crash reporting etc
 

00:11:35.420 --> 00:11:38.689
code injection crash reporting etc
because we run the sugar we run your

00:11:38.689 --> 00:11:38.699
because we run the sugar we run your
 

00:11:38.699 --> 00:11:40.759
because we run the sugar we run your
bytecode transformations after the sugar

00:11:40.759 --> 00:11:40.769
bytecode transformations after the sugar
 

00:11:40.769 --> 00:11:44.059
bytecode transformations after the sugar
which means that you see all our crazy

00:11:44.059 --> 00:11:44.069
which means that you see all our crazy
 

00:11:44.069 --> 00:11:46.160
which means that you see all our crazy
patterns like the the dollar lambda code

00:11:46.160 --> 00:11:46.170
patterns like the the dollar lambda code
 

00:11:46.170 --> 00:11:49.009
patterns like the the dollar lambda code
when you're doing your own processing so

00:11:49.009 --> 00:11:49.019
when you're doing your own processing so
 

00:11:49.019 --> 00:11:50.299
when you're doing your own processing so
be aware of that if you're doing your

00:11:50.299 --> 00:11:50.309
be aware of that if you're doing your
 

00:11:50.309 --> 00:11:55.100
be aware of that if you're doing your
own bytecode transformations ok so let's

00:11:55.100 --> 00:11:55.110
own bytecode transformations ok so let's
 

00:11:55.110 --> 00:12:00.079
own bytecode transformations ok so let's
move on to da da it is our new texture

00:12:00.079 --> 00:12:00.089
move on to da da it is our new texture
 

00:12:00.089 --> 00:12:03.319
move on to da da it is our new texture
as I said Android it runs just a dell

00:12:03.319 --> 00:12:03.329
as I said Android it runs just a dell
 

00:12:03.329 --> 00:12:05.150
as I said Android it runs just a dell
'fuck bytecode not Java bytecode and

00:12:05.150 --> 00:12:05.160
'fuck bytecode not Java bytecode and
 

00:12:05.160 --> 00:12:07.340
'fuck bytecode not Java bytecode and
Dextre is the tool that takes java

00:12:07.340 --> 00:12:07.350
Dextre is the tool that takes java
 

00:12:07.350 --> 00:12:08.059
Dextre is the tool that takes java
bytecodes

00:12:08.059 --> 00:12:08.069
bytecodes
 

00:12:08.069 --> 00:12:10.009
bytecodes
from the stack based machine and

00:12:10.009 --> 00:12:10.019
from the stack based machine and
 

00:12:10.019 --> 00:12:12.590
from the stack based machine and
converts it into dalvik bytecode which

00:12:12.590 --> 00:12:12.600
converts it into dalvik bytecode which
 

00:12:12.600 --> 00:12:15.230
converts it into dalvik bytecode which
is register base we had this tool before

00:12:15.230 --> 00:12:15.240
is register base we had this tool before
 

00:12:15.240 --> 00:12:19.720
is register base we had this tool before
called DX but it's been was pretty old

00:12:19.720 --> 00:12:19.730
called DX but it's been was pretty old
 

00:12:19.730 --> 00:12:22.309
called DX but it's been was pretty old
people had problems with it and so we

00:12:22.309 --> 00:12:22.319
people had problems with it and so we
 

00:12:22.319 --> 00:12:25.179
people had problems with it and so we
decided to build a new version called d8

00:12:25.179 --> 00:12:25.189
decided to build a new version called d8
 

00:12:25.189 --> 00:12:28.609
decided to build a new version called d8
and so the reason we build it is we want

00:12:28.609 --> 00:12:28.619
and so the reason we build it is we want
 

00:12:28.619 --> 00:12:30.499
and so the reason we build it is we want
to have faster compilation because

00:12:30.499 --> 00:12:30.509
to have faster compilation because
 

00:12:30.509 --> 00:12:33.439
to have faster compilation because
everybody always wants faster builds we

00:12:33.439 --> 00:12:33.449
everybody always wants faster builds we
 

00:12:33.449 --> 00:12:36.079
everybody always wants faster builds we
wanted to generate smaller code and give

00:12:36.079 --> 00:12:36.089
wanted to generate smaller code and give
 

00:12:36.089 --> 00:12:38.449
wanted to generate smaller code and give
people better Diagnostics by better

00:12:38.449 --> 00:12:38.459
people better Diagnostics by better
 

00:12:38.459 --> 00:12:41.720
people better Diagnostics by better
Diagnostics I mean both the error

00:12:41.720 --> 00:12:41.730
Diagnostics I mean both the error
 

00:12:41.730 --> 00:12:43.129
Diagnostics I mean both the error
messages that you get when you're

00:12:43.129 --> 00:12:43.139
messages that you get when you're
 

00:12:43.139 --> 00:12:45.369
messages that you get when you're
running the compiler as well as better

00:12:45.369 --> 00:12:45.379
running the compiler as well as better
 

00:12:45.379 --> 00:12:47.720
running the compiler as well as better
debug information that when you're

00:12:47.720 --> 00:12:47.730
debug information that when you're
 

00:12:47.730 --> 00:12:50.299
debug information that when you're
running your app in the debugger that

00:12:50.299 --> 00:12:50.309
running your app in the debugger that
 

00:12:50.309 --> 00:12:51.619
running your app in the debugger that
you have a better understanding of what

00:12:51.619 --> 00:12:51.629
you have a better understanding of what
 

00:12:51.629 --> 00:12:56.239
you have a better understanding of what
is going on ok so how is d8 integrated

00:12:56.239 --> 00:12:56.249
is going on ok so how is d8 integrated
 

00:12:56.249 --> 00:12:58.090
is going on ok so how is d8 integrated
into the Gradle build system

00:12:58.090 --> 00:12:58.100
into the Gradle build system
 

00:12:58.100 --> 00:13:00.400
into the Gradle build system
it's actually quite similar to what DX

00:13:00.400 --> 00:13:00.410
it's actually quite similar to what DX
 

00:13:00.410 --> 00:13:04.180
it's actually quite similar to what DX
is we just swap out the x-48 the

00:13:04.180 --> 00:13:04.190
is we just swap out the x-48 the
 

00:13:04.190 --> 00:13:05.590
is we just swap out the x-48 the
interesting thing there is that in

00:13:05.590 --> 00:13:05.600
interesting thing there is that in
 

00:13:05.600 --> 00:13:09.579
interesting thing there is that in
Android Co 3.2 we also integrate the D

00:13:09.579 --> 00:13:09.589
Android Co 3.2 we also integrate the D
 

00:13:09.589 --> 00:13:14.769
Android Co 3.2 we also integrate the D
sugaring step into D 8 so that's saves

00:13:14.769 --> 00:13:14.779
sugaring step into D 8 so that's saves
 

00:13:14.779 --> 00:13:16.690
sugaring step into D 8 so that's saves
us a round trip between write the

00:13:16.690 --> 00:13:16.700
us a round trip between write the
 

00:13:16.700 --> 00:13:18.430
us a round trip between write the
reading and writing the class files and

00:13:18.430 --> 00:13:18.440
reading and writing the class files and
 

00:13:18.440 --> 00:13:20.949
reading and writing the class files and
so it will provide provides more speed

00:13:20.949 --> 00:13:20.959
so it will provide provides more speed
 

00:13:20.959 --> 00:13:23.530
so it will provide provides more speed
up the side-effect of death though is

00:13:23.530 --> 00:13:23.540
up the side-effect of death though is
 

00:13:23.540 --> 00:13:24.940
up the side-effect of death though is
that if you're writing your own byte

00:13:24.940 --> 00:13:24.950
that if you're writing your own byte
 

00:13:24.950 --> 00:13:28.389
that if you're writing your own byte
code rewriters we now run them before d8

00:13:28.389 --> 00:13:28.399
code rewriters we now run them before d8
 

00:13:28.399 --> 00:13:30.160
code rewriters we now run them before d8
which means that your byte code

00:13:30.160 --> 00:13:30.170
which means that your byte code
 

00:13:30.170 --> 00:13:32.230
which means that your byte code
rewriters have to support the Java 8

00:13:32.230 --> 00:13:32.240
rewriters have to support the Java 8
 

00:13:32.240 --> 00:13:37.269
rewriters have to support the Java 8
language okay so let's look at a demo of

00:13:37.269 --> 00:13:37.279
language okay so let's look at a demo of
 

00:13:37.279 --> 00:13:43.970
language okay so let's look at a demo of
D 8 in action

00:13:43.970 --> 00:13:43.980
 
 

00:13:43.980 --> 00:13:47.700
 
okay so here have another project that I

00:13:47.700 --> 00:13:47.710
okay so here have another project that I
 

00:13:47.710 --> 00:13:50.300
okay so here have another project that I
just created using the project Wizards

00:13:50.300 --> 00:13:50.310
just created using the project Wizards
 

00:13:50.310 --> 00:13:53.690
just created using the project Wizards
and because I'm using Android studio 3.2

00:13:53.690 --> 00:13:53.700
and because I'm using Android studio 3.2
 

00:13:53.700 --> 00:13:56.250
and because I'm using Android studio 3.2
d8 is already enabled by default

00:13:56.250 --> 00:13:56.260
d8 is already enabled by default
 

00:13:56.260 --> 00:13:58.260
d8 is already enabled by default
so I ever went into the Gradle property

00:13:58.260 --> 00:13:58.270
so I ever went into the Gradle property
 

00:13:58.270 --> 00:14:00.570
so I ever went into the Gradle property
files and I explicitly disable d8

00:14:00.570 --> 00:14:00.580
files and I explicitly disable d8
 

00:14:00.580 --> 00:14:03.450
files and I explicitly disable d8
because I want to show you behavior of

00:14:03.450 --> 00:14:03.460
because I want to show you behavior of
 

00:14:03.460 --> 00:14:08.010
because I want to show you behavior of
DX before we use da so in my main

00:14:08.010 --> 00:14:08.020
DX before we use da so in my main
 

00:14:08.020 --> 00:14:08.910
DX before we use da so in my main
application

00:14:08.910 --> 00:14:08.920
application
 

00:14:08.920 --> 00:14:11.070
application
I added some code to my own click

00:14:11.070 --> 00:14:11.080
I added some code to my own click
 

00:14:11.080 --> 00:14:14.280
I added some code to my own click
listener to have the snack bar print a

00:14:14.280 --> 00:14:14.290
listener to have the snack bar print a
 

00:14:14.290 --> 00:14:16.820
listener to have the snack bar print a
custom message and then I have a method

00:14:16.820 --> 00:14:16.830
custom message and then I have a method
 

00:14:16.830 --> 00:14:20.310
custom message and then I have a method
get message and I set a breakpoint and

00:14:20.310 --> 00:14:20.320
get message and I set a breakpoint and
 

00:14:20.320 --> 00:14:22.080
get message and I set a breakpoint and
so let's look at that when I run it in

00:14:22.080 --> 00:14:22.090
so let's look at that when I run it in
 

00:14:22.090 --> 00:14:28.570
so let's look at that when I run it in
the emulator on the debugger

00:14:28.570 --> 00:14:28.580
 
 

00:14:28.580 --> 00:14:31.509
 
okay so the app is running I'm gonna hit

00:14:31.509 --> 00:14:31.519
okay so the app is running I'm gonna hit
 

00:14:31.519 --> 00:14:35.500
okay so the app is running I'm gonna hit
the button so that I get hit the

00:14:35.500 --> 00:14:35.510
the button so that I get hit the
 

00:14:35.510 --> 00:14:39.310
the button so that I get hit the
breakpoint so I initialize X to be the

00:14:39.310 --> 00:14:39.320
breakpoint so I initialize X to be the
 

00:14:39.320 --> 00:14:40.630
breakpoint so I initialize X to be the
length of the empty string so that

00:14:40.630 --> 00:14:40.640
length of the empty string so that
 

00:14:40.640 --> 00:14:42.910
length of the empty string so that
should be zero and so in the if

00:14:42.910 --> 00:14:42.920
should be zero and so in the if
 

00:14:42.920 --> 00:14:45.639
should be zero and so in the if
statement I expect to step through the

00:14:45.639 --> 00:14:45.649
statement I expect to step through the
 

00:14:45.649 --> 00:14:48.819
statement I expect to step through the
true case and of course that's what

00:14:48.819 --> 00:14:48.829
true case and of course that's what
 

00:14:48.829 --> 00:14:52.569
true case and of course that's what
happens and I'm gonna step further this

00:14:52.569 --> 00:14:52.579
happens and I'm gonna step further this
 

00:14:52.579 --> 00:14:55.630
happens and I'm gonna step further this
is bizarre right like I don't expect my

00:14:55.630 --> 00:14:55.640
is bizarre right like I don't expect my
 

00:14:55.640 --> 00:14:57.610
is bizarre right like I don't expect my
code to evaluate both the true and false

00:14:57.610 --> 00:14:57.620
code to evaluate both the true and false
 

00:14:57.620 --> 00:15:02.860
code to evaluate both the true and false
case so that's kind of weird so let's

00:15:02.860 --> 00:15:02.870
case so that's kind of weird so let's
 

00:15:02.870 --> 00:15:04.569
case so that's kind of weird so let's
see what happens if I run and see what

00:15:04.569 --> 00:15:04.579
see what happens if I run and see what
 

00:15:04.579 --> 00:15:07.750
see what happens if I run and see what
the output is so luckily the output on

00:15:07.750 --> 00:15:07.760
the output is so luckily the output on
 

00:15:07.760 --> 00:15:09.940
the output is so luckily the output on
the screen is hello there what I

00:15:09.940 --> 00:15:09.950
the screen is hello there what I
 

00:15:09.950 --> 00:15:12.490
the screen is hello there what I
expected but there was something weird

00:15:12.490 --> 00:15:12.500
expected but there was something weird
 

00:15:12.500 --> 00:15:13.960
expected but there was something weird
going on what what was going on

00:15:13.960 --> 00:15:13.970
going on what what was going on
 

00:15:13.970 --> 00:15:19.630
going on what what was going on
okay so let's remove this and sinker

00:15:19.630 --> 00:15:19.640
okay so let's remove this and sinker
 

00:15:19.640 --> 00:15:21.310
okay so let's remove this and sinker
Gradle build so that we're switching to

00:15:21.310 --> 00:15:21.320
Gradle build so that we're switching to
 

00:15:21.320 --> 00:15:27.360
Gradle build so that we're switching to
d8 and let's stop that and redeploy it

00:15:27.360 --> 00:15:27.370
d8 and let's stop that and redeploy it
 

00:15:27.370 --> 00:15:31.720
d8 and let's stop that and redeploy it
so while this is going on so in DX we

00:15:31.720 --> 00:15:31.730
so while this is going on so in DX we
 

00:15:31.730 --> 00:15:32.949
so while this is going on so in DX we
had this issue and it was actually a

00:15:32.949 --> 00:15:32.959
had this issue and it was actually a
 

00:15:32.959 --> 00:15:37.480
had this issue and it was actually a
very high start bug report and the

00:15:37.480 --> 00:15:37.490
very high start bug report and the
 

00:15:37.490 --> 00:15:39.730
very high start bug report and the
reason it was happening is that not only

00:15:39.730 --> 00:15:39.740
reason it was happening is that not only
 

00:15:39.740 --> 00:15:42.069
reason it was happening is that not only
is the the VM very different between

00:15:42.069 --> 00:15:42.079
is the the VM very different between
 

00:15:42.079 --> 00:15:45.220
is the the VM very different between
stack and register the way that debug

00:15:45.220 --> 00:15:45.230
stack and register the way that debug
 

00:15:45.230 --> 00:15:48.130
stack and register the way that debug
information is stored in Java the class

00:15:48.130 --> 00:15:48.140
information is stored in Java the class
 

00:15:48.140 --> 00:15:50.500
information is stored in Java the class
files in dalvik is very different and in

00:15:50.500 --> 00:15:50.510
files in dalvik is very different and in
 

00:15:50.510 --> 00:15:52.900
files in dalvik is very different and in
Java it starts with the instructions and

00:15:52.900 --> 00:15:52.910
Java it starts with the instructions and
 

00:15:52.910 --> 00:15:55.420
Java it starts with the instructions and
in dalvik it's a state machine and so we

00:15:55.420 --> 00:15:55.430
in dalvik it's a state machine and so we
 

00:15:55.430 --> 00:15:57.610
in dalvik it's a state machine and so we
had to translate bolts from register

00:15:57.610 --> 00:15:57.620
had to translate bolts from register
 

00:15:57.620 --> 00:15:59.170
had to translate bolts from register
stack to register and the debug

00:15:59.170 --> 00:15:59.180
stack to register and the debug
 

00:15:59.180 --> 00:16:01.840
stack to register and the debug
information and so sometimes information

00:16:01.840 --> 00:16:01.850
information and so sometimes information
 

00:16:01.850 --> 00:16:04.990
information and so sometimes information
got lost so like it might end up with a

00:16:04.990 --> 00:16:05.000
got lost so like it might end up with a
 

00:16:05.000 --> 00:16:07.449
got lost so like it might end up with a
single return statements in the Delphic

00:16:07.449 --> 00:16:07.459
single return statements in the Delphic
 

00:16:07.459 --> 00:16:09.040
single return statements in the Delphic
bytecode and then we couldn't map that

00:16:09.040 --> 00:16:09.050
bytecode and then we couldn't map that
 

00:16:09.050 --> 00:16:13.449
bytecode and then we couldn't map that
in the debug information in d8 we track

00:16:13.449 --> 00:16:13.459
in the debug information in d8 we track
 

00:16:13.459 --> 00:16:15.010
in the debug information in d8 we track
all the debug information carefully and

00:16:15.010 --> 00:16:15.020
all the debug information carefully and
 

00:16:15.020 --> 00:16:16.750
all the debug information carefully and
we have a whole system of assertions to

00:16:16.750 --> 00:16:16.760
we have a whole system of assertions to
 

00:16:16.760 --> 00:16:18.130
we have a whole system of assertions to
make sure that we don't lose debug

00:16:18.130 --> 00:16:18.140
make sure that we don't lose debug
 

00:16:18.140 --> 00:16:21.880
make sure that we don't lose debug
information so let's hit the button here

00:16:21.880 --> 00:16:21.890
information so let's hit the button here
 

00:16:21.890 --> 00:16:24.730
information so let's hit the button here
we're hitting the breakpoint again we

00:16:24.730 --> 00:16:24.740
we're hitting the breakpoint again we
 

00:16:24.740 --> 00:16:26.590
we're hitting the breakpoint again we
step through we get into the truth

00:16:26.590 --> 00:16:26.600
step through we get into the truth
 

00:16:26.600 --> 00:16:31.860
step through we get into the truth
branch and we jump out of it

00:16:31.860 --> 00:16:31.870
 
 

00:16:31.870 --> 00:16:33.269
 
thank you

00:16:33.269 --> 00:16:33.279
thank you
 

00:16:33.279 --> 00:16:35.769
thank you
okay so let's switch back to the slides

00:16:35.769 --> 00:16:35.779
okay so let's switch back to the slides
 

00:16:35.779 --> 00:16:43.060
okay so let's switch back to the slides
so we have done a lot of work on d8 it

00:16:43.060 --> 00:16:43.070
so we have done a lot of work on d8 it
 

00:16:43.070 --> 00:16:45.250
so we have done a lot of work on d8 it
has better debug information but it's

00:16:45.250 --> 00:16:45.260
has better debug information but it's
 

00:16:45.260 --> 00:16:49.019
has better debug information but it's
also faster so here is some data around

00:16:49.019 --> 00:16:49.029
also faster so here is some data around
 

00:16:49.029 --> 00:16:53.050
also faster so here is some data around
build time on the Google nest app so we

00:16:53.050 --> 00:16:53.060
build time on the Google nest app so we
 

00:16:53.060 --> 00:16:56.340
build time on the Google nest app so we
ship d8 as a preview in under studio 3.1

00:16:56.340 --> 00:16:56.350
ship d8 as a preview in under studio 3.1
 

00:16:56.350 --> 00:16:59.650
ship d8 as a preview in under studio 3.1
there were not always faster but we had

00:16:59.650 --> 00:16:59.660
there were not always faster but we had
 

00:16:59.660 --> 00:17:03.130
there were not always faster but we had
a lot more work since 3.1 and so in 3.2

00:17:03.130 --> 00:17:03.140
a lot more work since 3.1 and so in 3.2
 

00:17:03.140 --> 00:17:05.679
a lot more work since 3.1 and so in 3.2
on average were about 16 percent faster

00:17:05.679 --> 00:17:05.689
on average were about 16 percent faster
 

00:17:05.689 --> 00:17:08.110
on average were about 16 percent faster
in clean builds and of course

00:17:08.110 --> 00:17:08.120
in clean builds and of course
 

00:17:08.120 --> 00:17:09.910
in clean builds and of course
incremental builds like the Delta is

00:17:09.910 --> 00:17:09.920
incremental builds like the Delta is
 

00:17:09.920 --> 00:17:11.230
incremental builds like the Delta is
smaller because there's less code to

00:17:11.230 --> 00:17:11.240
smaller because there's less code to
 

00:17:11.240 --> 00:17:14.679
smaller because there's less code to
compile so still 16 percent this is

00:17:14.679 --> 00:17:14.689
compile so still 16 percent this is
 

00:17:14.689 --> 00:17:20.020
compile so still 16 percent this is
pretty nice so d8 is already widely used

00:17:20.020 --> 00:17:20.030
pretty nice so d8 is already widely used
 

00:17:20.030 --> 00:17:22.750
pretty nice so d8 is already widely used
if you're using Android P beta that was

00:17:22.750 --> 00:17:22.760
if you're using Android P beta that was
 

00:17:22.760 --> 00:17:26.559
if you're using Android P beta that was
released yesterday Android T is

00:17:26.559 --> 00:17:26.569
released yesterday Android T is
 

00:17:26.569 --> 00:17:30.100
released yesterday Android T is
completely built with d8 the Google Docs

00:17:30.100 --> 00:17:30.110
completely built with d8 the Google Docs
 

00:17:30.110 --> 00:17:32.200
completely built with d8 the Google Docs
app is already built with the AIDS and

00:17:32.200 --> 00:17:32.210
app is already built with the AIDS and
 

00:17:32.210 --> 00:17:33.790
app is already built with the AIDS and
then Google Photos is right now in

00:17:33.790 --> 00:17:33.800
then Google Photos is right now in
 

00:17:33.800 --> 00:17:36.640
then Google Photos is right now in
canary using d8 and many more Google

00:17:36.640 --> 00:17:36.650
canary using d8 and many more Google
 

00:17:36.650 --> 00:17:42.100
canary using d8 and many more Google
Apps will follow soon okay so let's move

00:17:42.100 --> 00:17:42.110
Apps will follow soon okay so let's move
 

00:17:42.110 --> 00:17:44.970
Apps will follow soon okay so let's move
over to RA

00:17:44.970 --> 00:17:44.980
 
 

00:17:44.980 --> 00:17:49.030
 
all right is our new shrinker so why you

00:17:49.030 --> 00:17:49.040
all right is our new shrinker so why you
 

00:17:49.040 --> 00:17:52.510
all right is our new shrinker so why you
want to shrink ur so most people who

00:17:52.510 --> 00:17:52.520
want to shrink ur so most people who
 

00:17:52.520 --> 00:17:53.740
want to shrink ur so most people who
build apps they use a lot of libraries

00:17:53.740 --> 00:17:53.750
build apps they use a lot of libraries
 

00:17:53.750 --> 00:17:57.400
build apps they use a lot of libraries
like Google guava Apache Commons Arak

00:17:57.400 --> 00:17:57.410
like Google guava Apache Commons Arak
 

00:17:57.410 --> 00:18:00.070
like Google guava Apache Commons Arak
Java and you usually don't use that full

00:18:00.070 --> 00:18:00.080
Java and you usually don't use that full
 

00:18:00.080 --> 00:18:01.960
Java and you usually don't use that full
library you might use maybe 10 15

00:18:01.960 --> 00:18:01.970
library you might use maybe 10 15
 

00:18:01.970 --> 00:18:04.630
library you might use maybe 10 15
percent of the library yet if you ship

00:18:04.630 --> 00:18:04.640
percent of the library yet if you ship
 

00:18:04.640 --> 00:18:06.250
percent of the library yet if you ship
it as is you would be shipping all that

00:18:06.250 --> 00:18:06.260
it as is you would be shipping all that
 

00:18:06.260 --> 00:18:09.100
it as is you would be shipping all that
code that you don't use and application

00:18:09.100 --> 00:18:09.110
code that you don't use and application
 

00:18:09.110 --> 00:18:11.560
code that you don't use and application
size is important right people don't

00:18:11.560 --> 00:18:11.570
size is important right people don't
 

00:18:11.570 --> 00:18:13.870
size is important right people don't
want to pay for it in their bandwidth it

00:18:13.870 --> 00:18:13.880
want to pay for it in their bandwidth it
 

00:18:13.880 --> 00:18:17.080
want to pay for it in their bandwidth it
uses disk space on the device and so the

00:18:17.080 --> 00:18:17.090
uses disk space on the device and so the
 

00:18:17.090 --> 00:18:19.300
uses disk space on the device and so the
smaller app the better and there was a

00:18:19.300 --> 00:18:19.310
smaller app the better and there was a
 

00:18:19.310 --> 00:18:21.400
smaller app the better and there was a
previous solution to this the ProGuard

00:18:21.400 --> 00:18:21.410
previous solution to this the ProGuard
 

00:18:21.410 --> 00:18:24.220
previous solution to this the ProGuard
tool but we heard some people that they

00:18:24.220 --> 00:18:24.230
tool but we heard some people that they
 

00:18:24.230 --> 00:18:25.990
tool but we heard some people that they
had issues with it it was taking a long

00:18:25.990 --> 00:18:26.000
had issues with it it was taking a long
 

00:18:26.000 --> 00:18:28.090
had issues with it it was taking a long
time the code wasn't as small as they

00:18:28.090 --> 00:18:28.100
time the code wasn't as small as they
 

00:18:28.100 --> 00:18:30.030
time the code wasn't as small as they
wish it didn't really understand Android

00:18:30.030 --> 00:18:30.040
wish it didn't really understand Android
 

00:18:30.040 --> 00:18:32.440
wish it didn't really understand Android
and so we invested in building a new

00:18:32.440 --> 00:18:32.450
and so we invested in building a new
 

00:18:32.450 --> 00:18:35.800
and so we invested in building a new
shrinker we also made the error messages

00:18:35.800 --> 00:18:35.810
shrinker we also made the error messages
 

00:18:35.810 --> 00:18:38.470
shrinker we also made the error messages
clearer and of course we understood that

00:18:38.470 --> 00:18:38.480
clearer and of course we understood that
 

00:18:38.480 --> 00:18:41.080
clearer and of course we understood that
people are already using ProGuard and so

00:18:41.080 --> 00:18:41.090
people are already using ProGuard and so
 

00:18:41.090 --> 00:18:42.630
people are already using ProGuard and so
we decided that we wanted to be

00:18:42.630 --> 00:18:42.640
we decided that we wanted to be
 

00:18:42.640 --> 00:18:44.700
we decided that we wanted to be
are compatible and so we understand all

00:18:44.700 --> 00:18:44.710
are compatible and so we understand all
 

00:18:44.710 --> 00:18:49.740
are compatible and so we understand all
of programs keep rules so how does

00:18:49.740 --> 00:18:49.750
of programs keep rules so how does
 

00:18:49.750 --> 00:18:52.440
of programs keep rules so how does
ProGuard work so before so whoever ate

00:18:52.440 --> 00:18:52.450
ProGuard work so before so whoever ate
 

00:18:52.450 --> 00:18:55.140
ProGuard work so before so whoever ate
works so before in Gradle we would run

00:18:55.140 --> 00:18:55.150
works so before in Gradle we would run
 

00:18:55.150 --> 00:18:58.020
works so before in Gradle we would run
ProGuard between your java compilation

00:18:58.020 --> 00:18:58.030
ProGuard between your java compilation
 

00:18:58.030 --> 00:19:00.060
ProGuard between your java compilation
and the next generation and the reason

00:19:00.060 --> 00:19:00.070
and the next generation and the reason
 

00:19:00.070 --> 00:19:02.970
and the next generation and the reason
for that is that ProGuard is a java to

00:19:02.970 --> 00:19:02.980
for that is that ProGuard is a java to
 

00:19:02.980 --> 00:19:06.900
for that is that ProGuard is a java to
java compilation and so this added more

00:19:06.900 --> 00:19:06.910
java compilation and so this added more
 

00:19:06.910 --> 00:19:10.920
java compilation and so this added more
time to your build in Android studio 3.2

00:19:10.920 --> 00:19:10.930
time to your build in Android studio 3.2
 

00:19:10.930 --> 00:19:13.950
time to your build in Android studio 3.2
you can enable our eight it's still

00:19:13.950 --> 00:19:13.960
you can enable our eight it's still
 

00:19:13.960 --> 00:19:16.140
you can enable our eight it's still
experimental you can enable it using

00:19:16.140 --> 00:19:16.150
experimental you can enable it using
 

00:19:16.150 --> 00:19:18.450
experimental you can enable it using
this setting and what will happen is it

00:19:18.450 --> 00:19:18.460
this setting and what will happen is it
 

00:19:18.460 --> 00:19:22.350
this setting and what will happen is it
will replace ProGuard G sugar d8 with

00:19:22.350 --> 00:19:22.360
will replace ProGuard G sugar d8 with
 

00:19:22.360 --> 00:19:25.080
will replace ProGuard G sugar d8 with
one single process r8 that does all of

00:19:25.080 --> 00:19:25.090
one single process r8 that does all of
 

00:19:25.090 --> 00:19:32.460
one single process r8 that does all of
those steps in one go so we ran r8 on

00:19:32.460 --> 00:19:32.470
those steps in one go so we ran r8 on
 

00:19:32.470 --> 00:19:35.250
those steps in one go so we ran r8 on
several taps internally this is the nest

00:19:35.250 --> 00:19:35.260
several taps internally this is the nest
 

00:19:35.260 --> 00:19:37.800
several taps internally this is the nest
app data so by just swapping ProGuard

00:19:37.800 --> 00:19:37.810
app data so by just swapping ProGuard
 

00:19:37.810 --> 00:19:41.790
app data so by just swapping ProGuard
for RA we're able to save 100k on the

00:19:41.790 --> 00:19:41.800
for RA we're able to save 100k on the
 

00:19:41.800 --> 00:19:46.020
for RA we're able to save 100k on the
Dex file size and save our 25% in

00:19:46.020 --> 00:19:46.030
Dex file size and save our 25% in
 

00:19:46.030 --> 00:19:48.750
Dex file size and save our 25% in
compilation time now the nest app is

00:19:48.750 --> 00:19:48.760
compilation time now the nest app is
 

00:19:48.760 --> 00:19:51.480
compilation time now the nest app is
highly optimized it has very specific

00:19:51.480 --> 00:19:51.490
highly optimized it has very specific
 

00:19:51.490 --> 00:19:53.520
highly optimized it has very specific
program keep rules and still we're able

00:19:53.520 --> 00:19:53.530
program keep rules and still we're able
 

00:19:53.530 --> 00:19:56.520
program keep rules and still we're able
to save quite a bit of space we also run

00:19:56.520 --> 00:19:56.530
to save quite a bit of space we also run
 

00:19:56.530 --> 00:19:58.410
to save quite a bit of space we also run
this on some of the system apps that are

00:19:58.410 --> 00:19:58.420
this on some of the system apps that are
 

00:19:58.420 --> 00:20:00.960
this on some of the system apps that are
shipping with the Android OS and on

00:20:00.960 --> 00:20:00.970
shipping with the Android OS and on
 

00:20:00.970 --> 00:20:04.650
shipping with the Android OS and on
average were able to save 25% of the Dex

00:20:04.650 --> 00:20:04.660
average were able to save 25% of the Dex
 

00:20:04.660 --> 00:20:06.840
average were able to save 25% of the Dex
file size by just swapping ProGuard with

00:20:06.840 --> 00:20:06.850
file size by just swapping ProGuard with
 

00:20:06.850 --> 00:20:13.650
file size by just swapping ProGuard with
r8 so of course last year we announced

00:20:13.650 --> 00:20:13.660
r8 so of course last year we announced
 

00:20:13.660 --> 00:20:15.810
r8 so of course last year we announced
that Coplin is now a support language on

00:20:15.810 --> 00:20:15.820
that Coplin is now a support language on
 

00:20:15.820 --> 00:20:18.000
that Coplin is now a support language on
Android and so we figured we need to do

00:20:18.000 --> 00:20:18.010
Android and so we figured we need to do
 

00:20:18.010 --> 00:20:20.790
Android and so we figured we need to do
something for Koplin as well Copelan is

00:20:20.790 --> 00:20:20.800
something for Koplin as well Copelan is
 

00:20:20.800 --> 00:20:22.740
something for Koplin as well Copelan is
an amazing language it allows you to

00:20:22.740 --> 00:20:22.750
an amazing language it allows you to
 

00:20:22.750 --> 00:20:26.820
an amazing language it allows you to
write very succinctly in code and it's

00:20:26.820 --> 00:20:26.830
write very succinctly in code and it's
 

00:20:26.830 --> 00:20:28.500
write very succinctly in code and it's
so powerful it needs to generate a lot

00:20:28.500 --> 00:20:28.510
so powerful it needs to generate a lot
 

00:20:28.510 --> 00:20:31.920
so powerful it needs to generate a lot
of bytecode and so we looked into places

00:20:31.920 --> 00:20:31.930
of bytecode and so we looked into places
 

00:20:31.930 --> 00:20:34.890
of bytecode and so we looked into places
with we could shrink that further than

00:20:34.890 --> 00:20:34.900
with we could shrink that further than
 

00:20:34.900 --> 00:20:38.310
with we could shrink that further than
the standard and analysis and so we

00:20:38.310 --> 00:20:38.320
the standard and analysis and so we
 

00:20:38.320 --> 00:20:40.940
the standard and analysis and so we
found a couple places where we could do

00:20:40.940 --> 00:20:40.950
found a couple places where we could do
 

00:20:40.950 --> 00:20:43.890
found a couple places where we could do
things like class merging especially

00:20:43.890 --> 00:20:43.900
things like class merging especially
 

00:20:43.900 --> 00:20:46.830
things like class merging especially
around lambdas we do more enormous

00:20:46.830 --> 00:20:46.840
around lambdas we do more enormous
 

00:20:46.840 --> 00:20:49.740
around lambdas we do more enormous
analysis etc and so let's take a look at

00:20:49.740 --> 00:20:49.750
analysis etc and so let's take a look at
 

00:20:49.750 --> 00:20:53.700
analysis etc and so let's take a look at
that in a demo

00:20:53.700 --> 00:20:53.710
 
 

00:20:53.710 --> 00:20:59.410
 
okay so here I have a Copeland

00:20:59.410 --> 00:20:59.420
okay so here I have a Copeland
 

00:20:59.420 --> 00:21:02.950
okay so here I have a Copeland
application for those of you haven't

00:21:02.950 --> 00:21:02.960
application for those of you haven't
 

00:21:02.960 --> 00:21:05.160
application for those of you haven't
programmed Copeland this is a data class

00:21:05.160 --> 00:21:05.170
programmed Copeland this is a data class
 

00:21:05.170 --> 00:21:08.500
programmed Copeland this is a data class
which is a class that it generates a lot

00:21:08.500 --> 00:21:08.510
which is a class that it generates a lot
 

00:21:08.510 --> 00:21:11.290
which is a class that it generates a lot
of code for you so you have a couple

00:21:11.290 --> 00:21:11.300
of code for you so you have a couple
 

00:21:11.300 --> 00:21:13.720
of code for you so you have a couple
fields here that are really properties

00:21:13.720 --> 00:21:13.730
fields here that are really properties
 

00:21:13.730 --> 00:21:15.750
fields here that are really properties
so it generates getters and setters

00:21:15.750 --> 00:21:15.760
so it generates getters and setters
 

00:21:15.760 --> 00:21:19.600
so it generates getters and setters
equals get hash code etc and then here I

00:21:19.600 --> 00:21:19.610
equals get hash code etc and then here I
 

00:21:19.610 --> 00:21:21.490
equals get hash code etc and then here I
have an extension method that tells it

00:21:21.490 --> 00:21:21.500
have an extension method that tells it
 

00:21:21.500 --> 00:21:24.580
have an extension method that tells it
that if I see a collection of that's

00:21:24.580 --> 00:21:24.590
that if I see a collection of that's
 

00:21:24.590 --> 00:21:27.520
that if I see a collection of that's
instantiated to the type class car add

00:21:27.520 --> 00:21:27.530
instantiated to the type class car add
 

00:21:27.530 --> 00:21:29.620
instantiated to the type class car add
this extra method that allows me to

00:21:29.620 --> 00:21:29.630
this extra method that allows me to
 

00:21:29.630 --> 00:21:32.500
this extra method that allows me to
search for make and model and so in the

00:21:32.500 --> 00:21:32.510
search for make and model and so in the
 

00:21:32.510 --> 00:21:35.560
search for make and model and so in the
class I'm using like the sequence

00:21:35.560 --> 00:21:35.570
class I'm using like the sequence
 

00:21:35.570 --> 00:21:38.110
class I'm using like the sequence
operators of Copeland to do a couple

00:21:38.110 --> 00:21:38.120
operators of Copeland to do a couple
 

00:21:38.120 --> 00:21:40.570
operators of Copeland to do a couple
filters and group eyes now normally you

00:21:40.570 --> 00:21:40.580
filters and group eyes now normally you
 

00:21:40.580 --> 00:21:42.940
filters and group eyes now normally you
wouldn't write these many filters in a

00:21:42.940 --> 00:21:42.950
wouldn't write these many filters in a
 

00:21:42.950 --> 00:21:44.800
wouldn't write these many filters in a
row you would for you just put all the

00:21:44.800 --> 00:21:44.810
row you would for you just put all the
 

00:21:44.810 --> 00:21:47.200
row you would for you just put all the
boolean logic in one filter but I wanted

00:21:47.200 --> 00:21:47.210
boolean logic in one filter but I wanted
 

00:21:47.210 --> 00:21:49.210
boolean logic in one filter but I wanted
to show you what happens with multiple

00:21:49.210 --> 00:21:49.220
to show you what happens with multiple
 

00:21:49.220 --> 00:21:51.250
to show you what happens with multiple
filters so normally Copeland will

00:21:51.250 --> 00:21:51.260
filters so normally Copeland will
 

00:21:51.260 --> 00:21:53.980
filters so normally Copeland will
compile each of these lambdas into its

00:21:53.980 --> 00:21:53.990
compile each of these lambdas into its
 

00:21:53.990 --> 00:21:57.010
compile each of these lambdas into its
own class and so each Lam that you use

00:21:57.010 --> 00:21:57.020
own class and so each Lam that you use
 

00:21:57.020 --> 00:22:00.310
own class and so each Lam that you use
at a new class and that's not really

00:22:00.310 --> 00:22:00.320
at a new class and that's not really
 

00:22:00.320 --> 00:22:02.590
at a new class and that's not really
what you want in a dex file because you

00:22:02.590 --> 00:22:02.600
what you want in a dex file because you
 

00:22:02.600 --> 00:22:03.610
what you want in a dex file because you
always want to keep the methods

00:22:03.610 --> 00:22:03.620
always want to keep the methods
 

00:22:03.620 --> 00:22:07.090
always want to keep the methods
reference count low so let's take a look

00:22:07.090 --> 00:22:07.100
reference count low so let's take a look
 

00:22:07.100 --> 00:22:09.700
reference count low so let's take a look
at what happens when we do with our

00:22:09.700 --> 00:22:09.710
at what happens when we do with our
 

00:22:09.710 --> 00:22:12.310
at what happens when we do with our
eight so in this project enabled our

00:22:12.310 --> 00:22:12.320
eight so in this project enabled our
 

00:22:12.320 --> 00:22:15.090
eight so in this project enabled our
eight we're setting this property and

00:22:15.090 --> 00:22:15.100
eight we're setting this property and
 

00:22:15.100 --> 00:22:17.200
eight we're setting this property and
let's take a look what happens in the

00:22:17.200 --> 00:22:17.210
let's take a look what happens in the
 

00:22:17.210 --> 00:22:21.160
let's take a look what happens in the
output apk so here Mike classes.dex

00:22:21.160 --> 00:22:21.170
output apk so here Mike classes.dex
 

00:22:21.170 --> 00:22:26.560
output apk so here Mike classes.dex
again the main activity and I I added a

00:22:26.560 --> 00:22:26.570
again the main activity and I I added a
 

00:22:26.570 --> 00:22:28.660
again the main activity and I I added a
call to that method in the oncreate

00:22:28.660 --> 00:22:28.670
call to that method in the oncreate
 

00:22:28.670 --> 00:22:32.290
call to that method in the oncreate
method and so here in the oncreate

00:22:32.290 --> 00:22:32.300
method and so here in the oncreate
 

00:22:32.300 --> 00:22:35.170
method and so here in the oncreate
method you see that there is this new

00:22:35.170 --> 00:22:35.180
method you see that there is this new
 

00:22:35.180 --> 00:22:37.950
method you see that there is this new
instance to this lambda group class and

00:22:37.950 --> 00:22:37.960
instance to this lambda group class and
 

00:22:37.960 --> 00:22:40.180
instance to this lambda group class and
the interesting is that that lambda

00:22:40.180 --> 00:22:40.190
the interesting is that that lambda
 

00:22:40.190 --> 00:22:42.610
the interesting is that that lambda
group class is not defined in a package

00:22:42.610 --> 00:22:42.620
group class is not defined in a package
 

00:22:42.620 --> 00:22:46.720
group class is not defined in a package
it's defined at the top level so let's

00:22:46.720 --> 00:22:46.730
it's defined at the top level so let's
 

00:22:46.730 --> 00:22:49.990
it's defined at the top level so let's
take a look at that here in the apx file

00:22:49.990 --> 00:22:50.000
take a look at that here in the apx file
 

00:22:50.000 --> 00:22:53.790
take a look at that here in the apx file
there is this todo lambda file a class

00:22:53.790 --> 00:22:53.800
there is this todo lambda file a class
 

00:22:53.800 --> 00:22:56.500
there is this todo lambda file a class
and you see it implements the Copeland

00:22:56.500 --> 00:22:56.510
and you see it implements the Copeland
 

00:22:56.510 --> 00:22:59.680
and you see it implements the Copeland
function one interface and it has two

00:22:59.680 --> 00:22:59.690
function one interface and it has two
 

00:22:59.690 --> 00:23:02.650
function one interface and it has two
instance fields one which is of type

00:23:02.650 --> 00:23:02.660
instance fields one which is of type
 

00:23:02.660 --> 00:23:05.090
instance fields one which is of type
object is named capture

00:23:05.090 --> 00:23:05.100
object is named capture
 

00:23:05.100 --> 00:23:08.480
object is named capture
and the other one is ID and then the

00:23:08.480 --> 00:23:08.490
and the other one is ID and then the
 

00:23:08.490 --> 00:23:11.780
and the other one is ID and then the
constructor takes both the ID and the

00:23:11.780 --> 00:23:11.790
constructor takes both the ID and the
 

00:23:11.790 --> 00:23:15.400
constructor takes both the ID and the
objects and sets the variables and then

00:23:15.400 --> 00:23:15.410
objects and sets the variables and then
 

00:23:15.410 --> 00:23:20.150
objects and sets the variables and then
here in the invoke method we see that it

00:23:20.150 --> 00:23:20.160
here in the invoke method we see that it
 

00:23:20.160 --> 00:23:23.210
here in the invoke method we see that it
has this packed switch and so what we're

00:23:23.210 --> 00:23:23.220
has this packed switch and so what we're
 

00:23:23.220 --> 00:23:25.310
has this packed switch and so what we're
doing is we were generating basically

00:23:25.310 --> 00:23:25.320
doing is we were generating basically
 

00:23:25.320 --> 00:23:27.350
doing is we were generating basically
the byte code equivalent of a switch

00:23:27.350 --> 00:23:27.360
the byte code equivalent of a switch
 

00:23:27.360 --> 00:23:30.200
the byte code equivalent of a switch
statement we switch over the ID that was

00:23:30.200 --> 00:23:30.210
statement we switch over the ID that was
 

00:23:30.210 --> 00:23:32.510
statement we switch over the ID that was
passed into the constructor to figure

00:23:32.510 --> 00:23:32.520
passed into the constructor to figure
 

00:23:32.520 --> 00:23:34.610
passed into the constructor to figure
out which piece of code to call and so

00:23:34.610 --> 00:23:34.620
out which piece of code to call and so
 

00:23:34.620 --> 00:23:35.930
out which piece of code to call and so
if you scroll through here you'll see

00:23:35.930 --> 00:23:35.940
if you scroll through here you'll see
 

00:23:35.940 --> 00:23:40.430
if you scroll through here you'll see
that the call to get here the the

00:23:40.430 --> 00:23:40.440
that the call to get here the the
 

00:23:40.440 --> 00:23:43.460
that the call to get here the the
property read it model are all in this

00:23:43.460 --> 00:23:43.470
property read it model are all in this
 

00:23:43.470 --> 00:23:45.620
property read it model are all in this
piece of code and then you see here that

00:23:45.620 --> 00:23:45.630
piece of code and then you see here that
 

00:23:45.630 --> 00:23:48.320
piece of code and then you see here that
we have the switch and so what's going

00:23:48.320 --> 00:23:48.330
we have the switch and so what's going
 

00:23:48.330 --> 00:23:52.790
we have the switch and so what's going
on is we find that we have lambdas that

00:23:52.790 --> 00:23:52.800
on is we find that we have lambdas that
 

00:23:52.800 --> 00:23:54.980
on is we find that we have lambdas that
are of the same signature basically they

00:23:54.980 --> 00:23:54.990
are of the same signature basically they
 

00:23:54.990 --> 00:23:57.710
are of the same signature basically they
implement the same interface and they

00:23:57.710 --> 00:23:57.720
implement the same interface and they
 

00:23:57.720 --> 00:24:00.980
implement the same interface and they
have the same capture variables and so

00:24:00.980 --> 00:24:00.990
have the same capture variables and so
 

00:24:00.990 --> 00:24:03.110
have the same capture variables and so
we can take all the different lambdas

00:24:03.110 --> 00:24:03.120
we can take all the different lambdas
 

00:24:03.120 --> 00:24:05.630
we can take all the different lambdas
and merge them into one class which

00:24:05.630 --> 00:24:05.640
and merge them into one class which
 

00:24:05.640 --> 00:24:07.760
and merge them into one class which
allows you to have less metadata and

00:24:07.760 --> 00:24:07.770
allows you to have less metadata and
 

00:24:07.770 --> 00:24:09.020
allows you to have less metadata and
less method references

00:24:09.020 --> 00:24:09.030
less method references
 

00:24:09.030 --> 00:24:13.930
less method references
okay so let's switch back to the slides

00:24:13.930 --> 00:24:13.940
 
 

00:24:13.940 --> 00:24:19.750
 
so yeah Kotlin is let's go back one so

00:24:19.750 --> 00:24:19.760
so yeah Kotlin is let's go back one so
 

00:24:19.760 --> 00:24:22.370
so yeah Kotlin is let's go back one so
Koplin is something we were very

00:24:22.370 --> 00:24:22.380
Koplin is something we were very
 

00:24:22.380 --> 00:24:24.410
Koplin is something we were very
important insight about and it's

00:24:24.410 --> 00:24:24.420
important insight about and it's
 

00:24:24.420 --> 00:24:26.120
important insight about and it's
becoming more and more important and so

00:24:26.120 --> 00:24:26.130
becoming more and more important and so
 

00:24:26.130 --> 00:24:28.190
becoming more and more important and so
with our rate we're going to keep adding

00:24:28.190 --> 00:24:28.200
with our rate we're going to keep adding
 

00:24:28.200 --> 00:24:30.680
with our rate we're going to keep adding
new optimizations for Copland we're

00:24:30.680 --> 00:24:30.690
new optimizations for Copland we're
 

00:24:30.690 --> 00:24:34.250
new optimizations for Copland we're
doing said the lambda merging no

00:24:34.250 --> 00:24:34.260
doing said the lambda merging no
 

00:24:34.260 --> 00:24:36.890
doing said the lambda merging no
reference no analysis and we're adding

00:24:36.890 --> 00:24:36.900
reference no analysis and we're adding
 

00:24:36.900 --> 00:24:40.010
reference no analysis and we're adding
many more and so hopefully our rate will

00:24:40.010 --> 00:24:40.020
many more and so hopefully our rate will
 

00:24:40.020 --> 00:24:41.360
many more and so hopefully our rate will
really help you get your cotton code

00:24:41.360 --> 00:24:41.370
really help you get your cotton code
 

00:24:41.370 --> 00:24:47.420
really help you get your cotton code
even smaller actually we announced

00:24:47.420 --> 00:24:47.430
even smaller actually we announced
 

00:24:47.430 --> 00:24:51.080
even smaller actually we announced
Android app bundle yesterday one of the

00:24:51.080 --> 00:24:51.090
Android app bundle yesterday one of the
 

00:24:51.090 --> 00:24:52.340
Android app bundle yesterday one of the
things that comes with Android app

00:24:52.340 --> 00:24:52.350
things that comes with Android app
 

00:24:52.350 --> 00:24:57.590
things that comes with Android app
bundle is dynamic features and so you

00:24:57.590 --> 00:24:57.600
bundle is dynamic features and so you
 

00:24:57.600 --> 00:25:00.470
bundle is dynamic features and so you
cannot only split your apk by resources

00:25:00.470 --> 00:25:00.480
cannot only split your apk by resources
 

00:25:00.480 --> 00:25:03.920
cannot only split your apk by resources
languages etc you can now also split

00:25:03.920 --> 00:25:03.930
languages etc you can now also split
 

00:25:03.930 --> 00:25:08.750
languages etc you can now also split
your features into multiple apks and

00:25:08.750 --> 00:25:08.760
your features into multiple apks and
 

00:25:08.760 --> 00:25:09.860
your features into multiple apks and
that's of course great because not

00:25:09.860 --> 00:25:09.870
that's of course great because not
 

00:25:09.870 --> 00:25:11.780
that's of course great because not
everybody uses every feature of your app

00:25:11.780 --> 00:25:11.790
everybody uses every feature of your app
 

00:25:11.790 --> 00:25:14.510
everybody uses every feature of your app
and not a downside and we heard this

00:25:14.510 --> 00:25:14.520
and not a downside and we heard this
 

00:25:14.520 --> 00:25:16.400
and not a downside and we heard this
already with instant apps last year

00:25:16.400 --> 00:25:16.410
already with instant apps last year
 

00:25:16.410 --> 00:25:18.500
already with instant apps last year
instead it makes it harder to

00:25:18.500 --> 00:25:18.510
instead it makes it harder to
 

00:25:18.510 --> 00:25:22.340
instead it makes it harder to
run ProGuard or r8 over your app because

00:25:22.340 --> 00:25:22.350
run ProGuard or r8 over your app because
 

00:25:22.350 --> 00:25:23.960
run ProGuard or r8 over your app because
these tools they are based on doing

00:25:23.960 --> 00:25:23.970
these tools they are based on doing
 

00:25:23.970 --> 00:25:26.690
these tools they are based on doing
whole program analysis and now you don't

00:25:26.690 --> 00:25:26.700
whole program analysis and now you don't
 

00:25:26.700 --> 00:25:29.150
whole program analysis and now you don't
have a single program anymore and so

00:25:29.150 --> 00:25:29.160
have a single program anymore and so
 

00:25:29.160 --> 00:25:31.010
have a single program anymore and so
what we came up with is a way to take

00:25:31.010 --> 00:25:31.020
what we came up with is a way to take
 

00:25:31.020 --> 00:25:34.909
what we came up with is a way to take
all your different features add them and

00:25:34.909 --> 00:25:34.919
all your different features add them and
 

00:25:34.919 --> 00:25:36.799
all your different features add them and
pass them as one command line into

00:25:36.799 --> 00:25:36.809
pass them as one command line into
 

00:25:36.809 --> 00:25:39.470
pass them as one command line into
ProGuard or r8 so that it is effectively

00:25:39.470 --> 00:25:39.480
ProGuard or r8 so that it is effectively
 

00:25:39.480 --> 00:25:42.710
ProGuard or r8 so that it is effectively
a whole program and then progitarr a it

00:25:42.710 --> 00:25:42.720
a whole program and then progitarr a it
 

00:25:42.720 --> 00:25:46.480
a whole program and then progitarr a it
will spit out a single jar or dex file

00:25:46.480 --> 00:25:46.490
will spit out a single jar or dex file
 

00:25:46.490 --> 00:25:49.700
will spit out a single jar or dex file
and then we can take that information

00:25:49.700 --> 00:25:49.710
and then we can take that information
 

00:25:49.710 --> 00:25:52.909
and then we can take that information
the ProGuard mapping file and the

00:25:52.909 --> 00:25:52.919
the ProGuard mapping file and the
 

00:25:52.919 --> 00:25:55.280
the ProGuard mapping file and the
original feature jars and bit that

00:25:55.280 --> 00:25:55.290
original feature jars and bit that
 

00:25:55.290 --> 00:25:57.110
original feature jars and bit that
information you have enough data to

00:25:57.110 --> 00:25:57.120
information you have enough data to
 

00:25:57.120 --> 00:26:00.320
information you have enough data to
reconstitute the different Dex files and

00:26:00.320 --> 00:26:00.330
reconstitute the different Dex files and
 

00:26:00.330 --> 00:26:01.850
reconstitute the different Dex files and
so we have this new deck splitter which

00:26:01.850 --> 00:26:01.860
so we have this new deck splitter which
 

00:26:01.860 --> 00:26:05.060
so we have this new deck splitter which
is based on the da gate code base and it

00:26:05.060 --> 00:26:05.070
is based on the da gate code base and it
 

00:26:05.070 --> 00:26:06.890
is based on the da gate code base and it
will spit out that whole program again

00:26:06.890 --> 00:26:06.900
will spit out that whole program again
 

00:26:06.900 --> 00:26:09.530
will spit out that whole program again
into different modules and now you can

00:26:09.530 --> 00:26:09.540
into different modules and now you can
 

00:26:09.540 --> 00:26:12.130
into different modules and now you can
apply shrinking and optimizations to

00:26:12.130 --> 00:26:12.140
apply shrinking and optimizations to
 

00:26:12.140 --> 00:26:16.130
apply shrinking and optimizations to
your features as well so this is coming

00:26:16.130 --> 00:26:16.140
your features as well so this is coming
 

00:26:16.140 --> 00:26:18.590
your features as well so this is coming
soon it will be in Androids you have 3.2

00:26:18.590 --> 00:26:18.600
soon it will be in Androids you have 3.2
 

00:26:18.600 --> 00:26:25.700
soon it will be in Androids you have 3.2
by the time it reaches stable so we

00:26:25.700 --> 00:26:25.710
by the time it reaches stable so we
 

00:26:25.710 --> 00:26:26.830
by the time it reaches stable so we
looked at a whole bunch of different

00:26:26.830 --> 00:26:26.840
looked at a whole bunch of different
 

00:26:26.840 --> 00:26:29.030
looked at a whole bunch of different
compiler work that we've done over the

00:26:29.030 --> 00:26:29.040
compiler work that we've done over the
 

00:26:29.040 --> 00:26:32.320
compiler work that we've done over the
last year some of it is already stable

00:26:32.320 --> 00:26:32.330
last year some of it is already stable
 

00:26:32.330 --> 00:26:34.789
last year some of it is already stable
incremental dexing it was introduced

00:26:34.789 --> 00:26:34.799
incremental dexing it was introduced
 

00:26:34.799 --> 00:26:37.669
incremental dexing it was introduced
Android 3.0 the sugar stand alone was

00:26:37.669 --> 00:26:37.679
Android 3.0 the sugar stand alone was
 

00:26:37.679 --> 00:26:40.430
Android 3.0 the sugar stand alone was
introduced in 3.0 in Android studio at

00:26:40.430 --> 00:26:40.440
introduced in 3.0 in Android studio at
 

00:26:40.440 --> 00:26:45.320
introduced in 3.0 in Android studio at
3.2 we're enabling d8 and D sugaring as

00:26:45.320 --> 00:26:45.330
3.2 we're enabling d8 and D sugaring as
 

00:26:45.330 --> 00:26:47.360
3.2 we're enabling d8 and D sugaring as
part of that and then in hundred series

00:26:47.360 --> 00:26:47.370
part of that and then in hundred series
 

00:26:47.370 --> 00:26:49.580
part of that and then in hundred series
3.2 we're introducing r8 as an

00:26:49.580 --> 00:26:49.590
3.2 we're introducing r8 as an
 

00:26:49.590 --> 00:26:53.840
3.2 we're introducing r8 as an
experimental feature please use it we

00:26:53.840 --> 00:26:53.850
experimental feature please use it we
 

00:26:53.850 --> 00:26:56.270
experimental feature please use it we
announced that DX will be deprecated as

00:26:56.270 --> 00:26:56.280
announced that DX will be deprecated as
 

00:26:56.280 --> 00:26:58.490
announced that DX will be deprecated as
soon as we find no more major issues in

00:26:58.490 --> 00:26:58.500
soon as we find no more major issues in
 

00:26:58.500 --> 00:27:03.650
soon as we find no more major issues in
NDA so for you in a year or so DX will

00:27:03.650 --> 00:27:03.660
NDA so for you in a year or so DX will
 

00:27:03.660 --> 00:27:09.159
NDA so for you in a year or so DX will
be gone so we'd like you to try it out

00:27:09.159 --> 00:27:09.169
 
 

00:27:09.169 --> 00:27:12.260
 
file box so if you go in Android studio

00:27:12.260 --> 00:27:12.270
file box so if you go in Android studio
 

00:27:12.270 --> 00:27:14.270
file box so if you go in Android studio
to the help menu there is a submit

00:27:14.270 --> 00:27:14.280
to the help menu there is a submit
 

00:27:14.280 --> 00:27:16.580
to the help menu there is a submit
feedback option which will immediately

00:27:16.580 --> 00:27:16.590
feedback option which will immediately
 

00:27:16.590 --> 00:27:19.039
feedback option which will immediately
jump you dump you into the issue tracker

00:27:19.039 --> 00:27:19.049
jump you dump you into the issue tracker
 

00:27:19.049 --> 00:27:21.560
jump you dump you into the issue tracker
and then you can easily file bug our

00:27:21.560 --> 00:27:21.570
and then you can easily file bug our
 

00:27:21.570 --> 00:27:24.100
and then you can easily file bug our
team is very responsive to these bugs

00:27:24.100 --> 00:27:24.110
team is very responsive to these bugs
 

00:27:24.110 --> 00:27:26.270
team is very responsive to these bugs
there is another session tomorrow

00:27:26.270 --> 00:27:26.280
there is another session tomorrow
 

00:27:26.280 --> 00:27:28.370
there is another session tomorrow
that's called effective program keep

00:27:28.370 --> 00:27:28.380
that's called effective program keep
 

00:27:28.380 --> 00:27:30.380
that's called effective program keep
rules for smaller applications

00:27:30.380 --> 00:27:30.390
rules for smaller applications
 

00:27:30.390 --> 00:27:32.930
rules for smaller applications
and it's basically how to on how to

00:27:32.930 --> 00:27:32.940
and it's basically how to on how to
 

00:27:32.940 --> 00:27:36.830
and it's basically how to on how to
start using ProGuard or RA by one of the

00:27:36.830 --> 00:27:36.840
start using ProGuard or RA by one of the
 

00:27:36.840 --> 00:27:38.950
start using ProGuard or RA by one of the
developers of the are on the Irate team

00:27:38.950 --> 00:27:38.960
developers of the are on the Irate team
 

00:27:38.960 --> 00:27:41.570
developers of the are on the Irate team
please fill out the survey on google

00:27:41.570 --> 00:27:41.580
please fill out the survey on google
 

00:27:41.580 --> 00:27:43.280
please fill out the survey on google
chrome IO scheduled about this talk as

00:27:43.280 --> 00:27:43.290
chrome IO scheduled about this talk as
 

00:27:43.290 --> 00:27:45.870
chrome IO scheduled about this talk as
well thanks everybody

00:27:45.870 --> 00:27:45.880
well thanks everybody
 

00:27:45.880 --> 00:28:07.099
well thanks everybody
[Music]

