WEBVTT
Kind: captions
Language: en

00:00:01.620 --> 00:00:04.040
ROBERT: So welcome to "Up Close
and Personal," with NFC

00:00:04.040 --> 00:00:06.930
and Android Beam.

00:00:06.930 --> 00:00:08.690
This is Martin, and
I'm Robert.

00:00:08.690 --> 00:00:12.950
We both work on the NFC and
Beam team on Android.

00:00:12.950 --> 00:00:14.550
And we're going to tell you
about NFC and Beam.

00:00:14.550 --> 00:00:16.670
Everyone is in the right
session, yeah?

00:00:16.670 --> 00:00:18.190
This is a good time to leave
if you don't want to get

00:00:18.190 --> 00:00:21.750
really excited about NFC.

00:00:21.750 --> 00:00:22.280
Cool.

00:00:22.280 --> 00:00:23.290
Martin, take it away.

00:00:23.290 --> 00:00:24.490
MARTIN: Let's get started.

00:00:24.490 --> 00:00:26.590
All right, so a show of hands,
how many of you guys actually

00:00:26.590 --> 00:00:27.840
know what NFC is?

00:00:30.730 --> 00:00:33.000
Wow, that's almost all of you.

00:00:33.000 --> 00:00:35.180
Just for the few of you who
don't, we're actually going to

00:00:35.180 --> 00:00:37.230
go through a few slides to
explain what exactly the

00:00:37.230 --> 00:00:38.690
technology is, and what
it does, what's

00:00:38.690 --> 00:00:39.940
so great about it.

00:00:42.520 --> 00:00:44.562
So NFC stands for Near
Field Communication.

00:00:44.562 --> 00:00:47.050
And basically, it's a wireless
technology very much like

00:00:47.050 --> 00:00:48.500
Bluetooth or Wi-Fi.

00:00:48.500 --> 00:00:51.010
However, there are a few key
differences to NFC from these

00:00:51.010 --> 00:00:52.290
technologies.

00:00:52.290 --> 00:00:54.240
So one of the main differences
is that NFC

00:00:54.240 --> 00:00:56.080
is very short range.

00:00:56.080 --> 00:00:58.450
So it just works over a distance
of a few centimeters

00:00:58.450 --> 00:00:59.820
instead of the meters
that you're used to

00:00:59.820 --> 00:01:02.240
from Wi-Fi or Bluetooth.

00:01:02.240 --> 00:01:04.500
We actually think short range is
a great feature of NFC, and

00:01:04.500 --> 00:01:06.700
we'll show you more
in a moment.

00:01:06.700 --> 00:01:08.490
Another difference between NFC
and the other wireless

00:01:08.490 --> 00:01:11.030
technologies is that it has
a fairly low data rate.

00:01:11.030 --> 00:01:13.380
So the typical data rates for
NFC are a few hundred kilobits

00:01:13.380 --> 00:01:15.150
per second, not more.

00:01:15.150 --> 00:01:16.560
So you don't want to be
sending too much data

00:01:16.560 --> 00:01:17.505
over NFC at a time.

00:01:17.505 --> 00:01:20.240
A few kilobytes is
a good maximum.

00:01:20.240 --> 00:01:22.655
And a final thing about NFC
that's different from the

00:01:22.655 --> 00:01:24.010
other wireless technologies
is that it's

00:01:24.010 --> 00:01:26.220
really no setup at all.

00:01:26.220 --> 00:01:28.660
So over the Bluetooth, when you
want to do something, you

00:01:28.660 --> 00:01:30.450
always have to enter a PIN,
you have to do pairing.

00:01:30.450 --> 00:01:33.820
It's really annoying to
get stuff set up.

00:01:33.820 --> 00:01:35.610
The great thing with NFC is that
when you bring devices

00:01:35.610 --> 00:01:38.150
into range, immediately, they
set up a connection, and they

00:01:38.150 --> 00:01:39.280
can start talking
to each other.

00:01:39.280 --> 00:01:41.970
So you don't need to do any
pairing, no PIN setup, it just

00:01:41.970 --> 00:01:44.230
immediately works.

00:01:44.230 --> 00:01:46.060
So when you have NFC on your
device, what can you actually

00:01:46.060 --> 00:01:48.430
do with it?

00:01:48.430 --> 00:01:50.980
So I think there's two main
use cases of NFC.

00:01:50.980 --> 00:01:52.780
And the first one you see on
the left, which is what we

00:01:52.780 --> 00:01:54.560
call passive tags.

00:01:54.560 --> 00:01:57.000
Passive tags are small
form factor devices.

00:01:57.000 --> 00:01:58.440
They come in lots of form
factors, but they are

00:01:58.440 --> 00:02:01.460
typically the size of a credit
card, sometimes a bit smaller.

00:02:01.460 --> 00:02:05.050
And they're often stickers, so
you can put them onto stuff.

00:02:05.050 --> 00:02:06.610
And their main function
is really to store a

00:02:06.610 --> 00:02:08.690
small amount of data.

00:02:08.690 --> 00:02:11.940
Most tags can store a few
kilobytes of data.

00:02:11.940 --> 00:02:14.570
So what you can typically put
into a tag is a simple set of

00:02:14.570 --> 00:02:18.150
data like a URL to a website,
a link to a YouTube video, a

00:02:18.150 --> 00:02:20.962
vCard for a contact that
you know about.

00:02:20.962 --> 00:02:23.380
Now what makes these tags really
special is that they

00:02:23.380 --> 00:02:24.530
don't require any power.

00:02:24.530 --> 00:02:28.020
And that is where the passive
comes from, in the name.

00:02:28.020 --> 00:02:29.640
So you don't need to put
any battery in these.

00:02:29.640 --> 00:02:31.520
Whenever you put an NFC-powered
device on top of

00:02:31.520 --> 00:02:34.780
this tag, the NFC field in your
phone will power the tag,

00:02:34.780 --> 00:02:38.390
power it on, and allow it to
read the data from the tag.

00:02:38.390 --> 00:02:40.240
The other thing about tags is
that you can often reprogram

00:02:40.240 --> 00:02:42.890
them as well, so they'll
write many times.

00:02:42.890 --> 00:02:44.610
So you can write it once, and
if you decide you want store

00:02:44.610 --> 00:02:46.850
something else on it, you can
just overwrite it and put

00:02:46.850 --> 00:02:48.402
whatever you want on it.

00:02:48.402 --> 00:02:49.973
And the second thing
about them is that

00:02:49.973 --> 00:02:50.730
they're also lockable.

00:02:50.730 --> 00:02:52.892
So in case you do really want to
finalize the data that you

00:02:52.892 --> 00:02:55.050
have on the tag, you can lock
them to make sure that nobody

00:02:55.050 --> 00:02:56.990
can overwrite your tags,
which is great for

00:02:56.990 --> 00:02:59.476
a lot of use cases.

00:02:59.476 --> 00:03:02.430
Now the second way to interact
you see on the right.

00:03:02.430 --> 00:03:05.070
So you typically have, like,
two powered NFC devices.

00:03:05.070 --> 00:03:07.900
So an example is if you have two
phones, or a phone and a

00:03:07.900 --> 00:03:11.370
tablet, that both have NFC,
when you bring these two

00:03:11.370 --> 00:03:12.920
devices together, they
can immediately start

00:03:12.920 --> 00:03:14.395
communicating to each other.

00:03:14.395 --> 00:03:16.760
Now the main difference between
this and tags is that

00:03:16.760 --> 00:03:19.310
with tags, you typically store
a set of data on it, and it's

00:03:19.310 --> 00:03:20.730
a static amount of data.

00:03:20.730 --> 00:03:23.370
Whereas when you put two active
devices together, you

00:03:23.370 --> 00:03:24.840
can change the data dynamically
from the

00:03:24.840 --> 00:03:25.930
application that you want.

00:03:25.930 --> 00:03:27.695
And that's one of the main use
cases of Android Beam that

00:03:27.695 --> 00:03:29.740
we'll show you later.

00:03:29.740 --> 00:03:31.890
Another use case that you
probably all have seen here at

00:03:31.890 --> 00:03:33.940
the conference is Google Wallet,
where you put your

00:03:33.940 --> 00:03:36.140
phone up to a payment reader,
and you can do payment.

00:03:39.310 --> 00:03:41.310
So I do really want to go into
the 5 centimeters thing

00:03:41.310 --> 00:03:43.700
because that's something that
I really hear a lot.

00:03:43.700 --> 00:03:46.000
People think this is a
limitation of NFC.

00:03:46.000 --> 00:03:47.990
I think this is the greatest
feature of NFC and what makes

00:03:47.990 --> 00:03:49.380
it really great.

00:03:49.380 --> 00:03:51.940
So imagine you're in a room
full of smart devices.

00:03:51.940 --> 00:03:54.340
Like you have a room with
a Nexus Q and a Nexus 7.

00:03:54.340 --> 00:03:56.975
And you maybe have a Smart TV
in there, even a bottle of

00:03:56.975 --> 00:03:58.890
wine which has an
NFC tag on it.

00:03:58.890 --> 00:04:01.320
How do you determine which
device you're going to

00:04:01.320 --> 00:04:02.520
interact with?

00:04:02.520 --> 00:04:05.110
Well, the easy answer is
just by touching it.

00:04:05.110 --> 00:04:07.770
So if you want to interact with
the Nexus Q, tap your

00:04:07.770 --> 00:04:09.940
Nexus Q. If you want to interact
or get data from the

00:04:09.940 --> 00:04:11.370
bottle of wine, tap the
bottle of wine.

00:04:11.370 --> 00:04:14.000
And it may show you the
manufacturing info about it.

00:04:14.000 --> 00:04:15.960
So this allows you to be really
specific about the way

00:04:15.960 --> 00:04:17.959
you interact with stuff.

00:04:17.959 --> 00:04:20.850
So this is one of the main use
cases, you know, touching

00:04:20.850 --> 00:04:23.450
physical objects for digital
interaction.

00:04:23.450 --> 00:04:25.420
And the other use case comes
from actually having two

00:04:25.420 --> 00:04:26.360
active devices.

00:04:26.360 --> 00:04:29.220
So if you have two phones, you
can have a virtual object on

00:04:29.220 --> 00:04:30.160
one of these phones.

00:04:30.160 --> 00:04:32.790
A virtual object can be like
a URL or a business card.

00:04:32.790 --> 00:04:34.100
You can just beam it across.

00:04:34.100 --> 00:04:35.860
And you can be really
selective about

00:04:35.860 --> 00:04:37.170
where you send it to.

00:04:37.170 --> 00:04:39.510
And this is really great about
short range-- it allows you to

00:04:39.510 --> 00:04:41.510
be selective about
how you interact

00:04:41.510 --> 00:04:43.170
with different devices.

00:04:43.170 --> 00:04:44.930
I'll hand it over to Robert
to talk a bit more about

00:04:44.930 --> 00:04:46.640
different NFC use cases.

00:04:46.640 --> 00:04:47.040
ROBERT: Thanks.

00:04:47.040 --> 00:04:49.990
So what can you do with NFC?

00:04:49.990 --> 00:04:52.550
Well, we've got a list here on
the slide which I won't read

00:04:52.550 --> 00:04:53.320
because you can all see it.

00:04:53.320 --> 00:04:55.250
But these are really just
the usual suspects.

00:04:55.250 --> 00:04:58.360
Whenever you read a report about
the future of NFC, all

00:04:58.360 --> 00:05:00.220
of these use cases come up.

00:05:00.220 --> 00:05:01.650
But there's going to be
lots of new things.

00:05:01.650 --> 00:05:04.690
Martin introduced the idea of
peer to peer, two active NFC

00:05:04.690 --> 00:05:06.950
devices communicating
with each other.

00:05:06.950 --> 00:05:10.190
And as many new phones come
equipped with that capability,

00:05:10.190 --> 00:05:14.610
we're going to see lots and
lots of new NFC use cases.

00:05:14.610 --> 00:05:17.730
Also, applications which use
NFC to share are going to

00:05:17.730 --> 00:05:20.880
drive this, and it's all going
to get much more interesting.

00:05:20.880 --> 00:05:23.930
We really think of NFC as
being very, very simple.

00:05:23.930 --> 00:05:25.240
It is a very simple
technology.

00:05:25.240 --> 00:05:27.400
It doesn't actually
do a whole lot.

00:05:27.400 --> 00:05:30.210
When you think about it, HTTP
doesn't do a whole lot,

00:05:30.210 --> 00:05:33.180
either, but HTTP enabled the
web and all of the amazing

00:05:33.180 --> 00:05:34.390
things you can do
with the web.

00:05:34.390 --> 00:05:36.620
So don't be fooled by the
simplicity of NFC.

00:05:36.620 --> 00:05:39.150
We think that's actually where
its raw power comes from.

00:05:39.150 --> 00:05:40.480
We want to keep it simple.

00:05:40.480 --> 00:05:43.810
It's a very basic technology,
but when you start to use it,

00:05:43.810 --> 00:05:47.650
then you can start to harness
the power, and you can really

00:05:47.650 --> 00:05:48.690
get imaginative.

00:05:48.690 --> 00:05:51.270
And we really do think the
limits of NFC are just the

00:05:51.270 --> 00:05:53.150
limits of your imagination.

00:05:53.150 --> 00:05:55.220
The other question people often
have is, well, when is

00:05:55.220 --> 00:05:57.010
NFC going to happen?

00:05:57.010 --> 00:05:58.420
We think it's already here.

00:05:58.420 --> 00:06:00.270
Don't wait too long, you really
should get started.

00:06:00.270 --> 00:06:02.720
And it's great to see so many
of you here today interested

00:06:02.720 --> 00:06:05.120
in NFC and wanting
to learn more.

00:06:05.120 --> 00:06:07.930
If you were in the keynote
yesterday, does anybody

00:06:07.930 --> 00:06:10.850
remember what the number was
for the number of Android

00:06:10.850 --> 00:06:15.790
devices activated with
NFC every week?

00:06:15.790 --> 00:06:17.640
No, no one remembers,
thank you.

00:06:17.640 --> 00:06:19.120
OK, a million, thank you.

00:06:19.120 --> 00:06:22.360
Yes, it is a million new Android
devices, every week,

00:06:22.360 --> 00:06:26.030
activated with NFC that have
all of these capabilities.

00:06:26.030 --> 00:06:31.150
And it's moving into low- and
mid-end, low-range and

00:06:31.150 --> 00:06:32.125
mid-range devices.

00:06:32.125 --> 00:06:36.890
It isn't just the high-end
phones that have NFC now.

00:06:36.890 --> 00:06:40.090
So let's take a closer look
because this is going to come,

00:06:40.090 --> 00:06:42.410
now, not just in phones and
other devices but in

00:06:42.410 --> 00:06:43.110
accessories.

00:06:43.110 --> 00:06:44.640
And we're going to show
you that later on.

00:06:44.640 --> 00:06:47.380
Lots and lots of smart objects,
maybe not quite the

00:06:47.380 --> 00:06:49.840
bottle of wine that Martin
mentioned earlier.

00:06:49.840 --> 00:06:52.970
But let's take a closer look at
what you can do on Android.

00:06:52.970 --> 00:06:56.230
Android provides a framework for
NFC so that you can create

00:06:56.230 --> 00:06:58.560
whatever your application
and your users need.

00:06:58.560 --> 00:07:00.910
And as it says on the slide,
we support all the common

00:07:00.910 --> 00:07:04.180
passive tag types, we have APIs,
and you can even launch

00:07:04.180 --> 00:07:07.260
an application using NFC, more
of which in a little while.

00:07:07.260 --> 00:07:09.810
But we think tags are
just the start.

00:07:09.810 --> 00:07:13.630
NFC, as it becomes more
widespread, is going to bring

00:07:13.630 --> 00:07:15.190
magic to this platform.

00:07:15.190 --> 00:07:18.190
Let's take a look
at Android Beam.

00:07:18.190 --> 00:07:20.280
Android Beam enables
magic sharing.

00:07:20.280 --> 00:07:22.230
It makes it really, really
easy for you to give your

00:07:22.230 --> 00:07:24.220
users a magical experience.

00:07:24.220 --> 00:07:28.060
It's deliberately very, very
simple, with almost no UI.

00:07:28.060 --> 00:07:28.910
There's nothing to it.

00:07:28.910 --> 00:07:31.210
And again, we'll show
you more about that.

00:07:31.210 --> 00:07:33.700
All you have to do is bring the
two devices together with

00:07:33.700 --> 00:07:34.930
their screens unlocked.

00:07:34.930 --> 00:07:37.750
That's important, we want users
to stay in control here.

00:07:37.750 --> 00:07:40.400
This is a personal device, the
screen has to be unlocked, the

00:07:40.400 --> 00:07:44.060
phone has to be on for NFC and
for Android Beam to work.

00:07:44.060 --> 00:07:47.310
Whoever wants to share just taps
on the screen to confirm

00:07:47.310 --> 00:07:49.830
that they're happy for the
information to be sent.

00:07:49.830 --> 00:07:52.370
And the context from their
application, normally what's

00:07:52.370 --> 00:07:54.260
shown on the screen,
gets beamed across

00:07:54.260 --> 00:07:54.980
to the other device.

00:07:54.980 --> 00:07:56.130
It really is that simple.

00:07:56.130 --> 00:07:58.700
There are no menus, there
are no dialogue boxes.

00:07:58.700 --> 00:08:00.600
There's nothing to
get in the way.

00:08:00.600 --> 00:08:02.560
And that's why we have that
"Touch to Beam," just to make

00:08:02.560 --> 00:08:03.720
it very, very easy.

00:08:03.720 --> 00:08:05.420
So let's take a look
at some of this in

00:08:05.420 --> 00:08:07.340
action with some demos.

00:08:07.340 --> 00:08:11.380
So we'll switch over so we
can see our devices here.

00:08:11.380 --> 00:08:13.970
So as we've said, it's really,
really easy to share content.

00:08:13.970 --> 00:08:18.450
On my phone here, I've got an
interesting article, which I

00:08:18.450 --> 00:08:20.740
probably should share with you
because it contains some

00:08:20.740 --> 00:08:21.850
fascinating news.

00:08:21.850 --> 00:08:25.700
This is from People magazine,
one of my favorite websites.

00:08:25.700 --> 00:08:29.600
And, as the Wi-Fi loads, you'll
see it's an article,

00:08:29.600 --> 00:08:32.459
there we go, about Prince
William and

00:08:32.459 --> 00:08:35.970
his $16 million fortune.

00:08:35.970 --> 00:08:38.299
Not sure about his
dress sense, but

00:08:38.299 --> 00:08:38.700
we'll leave that aside.

00:08:38.700 --> 00:08:40.330
No wonder Kate's laughing
in the background.

00:08:40.330 --> 00:08:43.190
But if I wanted to read this
on my tablet, got a Nexus 7

00:08:43.190 --> 00:08:44.070
here, it's very easy.

00:08:44.070 --> 00:08:49.640
All I would do, put the phone
down, Touch to Beam, and, in

00:08:49.640 --> 00:08:53.350
just a second or two, it's
already open on the tablet.

00:08:53.350 --> 00:08:55.250
And once again, as you know, the
Wi-Fi's a little bit slow

00:08:55.250 --> 00:08:57.020
here, but it's going to bring
in the article in People

00:08:57.020 --> 00:08:58.890
magazine very, very quickly.

00:08:58.890 --> 00:09:01.760
I can do exactly the
same-- come on.

00:09:01.760 --> 00:09:03.200
You can see the URL's
gone across.

00:09:03.200 --> 00:09:05.350
It works.

00:09:05.350 --> 00:09:07.650
We're now waiting for Wi-Fi,
but that's Beam.

00:09:07.650 --> 00:09:09.390
It is very, very simple.

00:09:09.390 --> 00:09:12.180
This doesn't bode well for the
YouTube demo, if we cannot get

00:09:12.180 --> 00:09:12.905
a web page to load.

00:09:12.905 --> 00:09:15.770
But let's give it
a shot anyway.

00:09:15.770 --> 00:09:18.950
So I've got YouTube running on
this phone, and I was going to

00:09:18.950 --> 00:09:24.130
show video from the Android
keynotes last year.

00:09:24.130 --> 00:09:25.120
But let's keep on rolling.

00:09:25.120 --> 00:09:28.040
What YouTube does is it actually
starts the video

00:09:28.040 --> 00:09:31.370
playing at exactly the same spot
on the receiving device.

00:09:31.370 --> 00:09:33.080
So if you're halfway through
a movie or halfway through

00:09:33.080 --> 00:09:34.660
something, it'll
take you there.

00:09:34.660 --> 00:09:37.040
It's very easy for you to skip
back to the start if that's

00:09:37.040 --> 00:09:39.340
what you wanted, rather than
fiddling around to try to find

00:09:39.340 --> 00:09:39.820
the playhead.

00:09:39.820 --> 00:09:42.630
So again, we're transferring
the context of the app from

00:09:42.630 --> 00:09:44.540
one device to the other.

00:09:44.540 --> 00:09:46.860
So his demo that doesn't
rely on Wi-FI

00:09:46.860 --> 00:09:48.960
because we're not stupid--

00:09:48.960 --> 00:09:52.410
it is the Moscone Center, and
Wi-Fi's always tough here.

00:09:52.410 --> 00:09:55.200
So I've got a great app on my
Android device called Paper

00:09:55.200 --> 00:09:58.410
Camera, which lets me take
nice, creative photos.

00:09:58.410 --> 00:10:02.340
So I'm going to grab a picture
of you guys looking awesome.

00:10:02.340 --> 00:10:02.760
Here we go.

00:10:02.760 --> 00:10:04.610
And I'm going to change-- we're
going to make it look

00:10:04.610 --> 00:10:09.770
like you're drawn
in aqua pastels.

00:10:09.770 --> 00:10:11.520
So that's how I roll.

00:10:11.520 --> 00:10:12.900
So I've got my aqua
pastel photo.

00:10:12.900 --> 00:10:14.800
Martin, oh, you haven't
got Paper Camera.

00:10:14.800 --> 00:10:16.050
MARTIN: No, it looks pretty
cool, though.

00:10:16.050 --> 00:10:16.760
ROBERT: It is pretty cool.

00:10:16.760 --> 00:10:19.490
Let's see what happens when I
beam an app from this device

00:10:19.490 --> 00:10:23.300
to a device that doesn't
have the app installed.

00:10:23.300 --> 00:10:27.460
So I just Tap to Beam, and when
Martin flips over, you

00:10:27.460 --> 00:10:30.231
see it's gone to
the Play store.

00:10:30.231 --> 00:10:35.100
[APPLAUSE]

00:10:35.100 --> 00:10:36.970
ROBERT: Thank you, so Beam
is a distribution

00:10:36.970 --> 00:10:38.320
mechanism for your apps.

00:10:38.320 --> 00:10:39.360
And that's automatic.

00:10:39.360 --> 00:10:41.120
You don't have to
write any code.

00:10:41.120 --> 00:10:43.730
Every Android app will do that
when two Beam-compatible

00:10:43.730 --> 00:10:45.070
phones come together.

00:10:45.070 --> 00:10:47.040
So what's happening now--
once again, relying

00:10:47.040 --> 00:10:48.860
on the Wi-Fi which--

00:10:48.860 --> 00:10:49.650
so we'll move on.

00:10:49.650 --> 00:10:51.400
A bit like a cookery show, we've
got one in the oven we

00:10:51.400 --> 00:10:53.310
made earlier.

00:10:53.310 --> 00:10:56.400
And so we've now got
Paper Camera

00:10:56.400 --> 00:10:58.000
installed on another device.

00:10:58.000 --> 00:10:59.130
MARTIN: Yep, let's
try this one.

00:10:59.130 --> 00:11:02.010
ROBERT: And I'm going to snap
another photo, but aqua-tint

00:11:02.010 --> 00:11:03.020
didn't really work for me.

00:11:03.020 --> 00:11:05.510
So I'm going to switch to my
favorite, which is Andy Pop.

00:11:05.510 --> 00:11:07.332
Now, Paper Camera's
a great app, and

00:11:07.332 --> 00:11:09.420
it's got lots of settings.

00:11:09.420 --> 00:11:11.360
So I can grab this photo,
which I've now

00:11:11.360 --> 00:11:12.690
played around with.

00:11:12.690 --> 00:11:15.500
Let's see what happens when I
beam-- so Martin, let's get

00:11:15.500 --> 00:11:17.880
your Paper Camera.

00:11:17.880 --> 00:11:18.500
Let's just have a look.

00:11:18.500 --> 00:11:19.660
Your, so--

00:11:19.660 --> 00:11:20.650
MARTIN: I haven't launched
it yet, but it'll launch

00:11:20.650 --> 00:11:21.340
automatically.

00:11:21.340 --> 00:11:21.780
ROBERT: You haven't
launched it yet.

00:11:21.780 --> 00:11:23.630
OK, so there's my settings.

00:11:23.630 --> 00:11:24.980
I've got Andy Pop running.

00:11:24.980 --> 00:11:27.995
So I'm going to beam
that across.

00:11:27.995 --> 00:11:29.320
Put my phone the right
way up, sorry.

00:11:32.340 --> 00:11:34.230
And what's going to happen
now, because the app is

00:11:34.230 --> 00:11:37.550
installed, you see Paper Camera
has opened in Andy Pop.

00:11:37.550 --> 00:11:40.970
So the exact context from this
device, the setting-- so if

00:11:40.970 --> 00:11:43.810
Martin thinks, "Wow, how do
you get that cool effect,"

00:11:43.810 --> 00:11:45.740
we've passed the information
across, so it makes it really,

00:11:45.740 --> 00:11:47.020
really easy.

00:11:47.020 --> 00:11:49.420
A lot of games developers
are using that to

00:11:49.420 --> 00:11:50.780
start two-player games.

00:11:50.780 --> 00:11:52.890
So if I'm at the start of a game
on my device and want to

00:11:52.890 --> 00:11:54.940
play head-to-head against
someone else-- just tap the

00:11:54.940 --> 00:11:57.960
phones, start a head-to-head
connection.

00:11:57.960 --> 00:12:02.540
So pretty cool uses of Android
Beam for peer-to-peer sharing.

00:12:02.540 --> 00:12:05.150
Martin's going to show us,
now, some tag behaviors.

00:12:05.150 --> 00:12:07.060
MARTIN: Yeah, some really cool
stuff you can do with tags is

00:12:07.060 --> 00:12:08.610
you can just stick them
in all kinds of weird

00:12:08.610 --> 00:12:10.020
places that you like.

00:12:10.020 --> 00:12:12.190
A really cool use case, if you
want to show off something

00:12:12.190 --> 00:12:14.050
like, for example, you're
holding a representation at a

00:12:14.050 --> 00:12:16.170
cool conference like Google
I/O. You want to tell

00:12:16.170 --> 00:12:16.680
people about it.

00:12:16.680 --> 00:12:18.850
So what you can do is you can
hang posters all around the

00:12:18.850 --> 00:12:22.170
buildings for your presentation,
for example, a

00:12:22.170 --> 00:12:25.340
poster that looks like this
one for our presentation.

00:12:25.340 --> 00:12:27.070
And you can put all kinds
of data in there.

00:12:27.070 --> 00:12:29.250
So in this case, I put a data
in there that links along to

00:12:29.250 --> 00:12:30.410
the Google I/O application.

00:12:30.410 --> 00:12:34.090
So that whenever somebody taps
this tag, it will actually

00:12:34.090 --> 00:12:36.160
take you to the Google I/O
application and immediately

00:12:36.160 --> 00:12:38.365
show you the session that
we're having right here.

00:12:38.365 --> 00:12:39.570
It shows you more information.

00:12:39.570 --> 00:12:41.895
You can interact with it,
add it to your agenda.

00:12:41.895 --> 00:12:43.220
ROBERT: And again, what would
have happened there if you

00:12:43.220 --> 00:12:44.280
didn't have the app installed?

00:12:44.280 --> 00:12:45.510
MARTIN: So if I didn't have the
app installed, it would've

00:12:45.510 --> 00:12:47.770
taken me to Market first, to
install the application.

00:12:47.770 --> 00:12:48.850
ROBERT: Cool.

00:12:48.850 --> 00:12:50.580
MARTIN: Awesome.

00:12:50.580 --> 00:12:52.690
So I'm sure you all saw the
really cool keynote yesterday

00:12:52.690 --> 00:12:55.940
where they showed off the new
Google+ events use case.

00:12:55.940 --> 00:12:58.610
I think it was really cool, and
it showed different kinds

00:12:58.610 --> 00:13:01.980
of events and what you can
do with Android Beam.

00:13:01.980 --> 00:13:03.460
So let's say we're having a
beach barbecue that we're

00:13:03.460 --> 00:13:04.080
organizing.

00:13:04.080 --> 00:13:06.030
If you go to Google+ events, you
probably know the people

00:13:06.030 --> 00:13:06.970
you want to invite.

00:13:06.970 --> 00:13:08.800
Well, let's say you want to
have a surprise party.

00:13:08.800 --> 00:13:10.730
For example, I'm not sure if you
guys saw the movie Project

00:13:10.730 --> 00:13:12.230
X, but it was like--

00:13:12.230 --> 00:13:14.220
it really got out of hand
because a lot of people showed

00:13:14.220 --> 00:13:15.870
up that weren't supposed
to show up.

00:13:15.870 --> 00:13:18.540
Let's say you put a poster here
for a beach barbecue,

00:13:18.540 --> 00:13:20.640
somewhere in your dorm room or
in a building somewhere.

00:13:20.640 --> 00:13:24.200
People can actually tag this
poster with their phone.

00:13:24.200 --> 00:13:26.350
And wha it does is it just
brings you to Google Maps to

00:13:26.350 --> 00:13:27.890
show you the actual location
of where the

00:13:27.890 --> 00:13:28.980
party is going to happen.

00:13:28.980 --> 00:13:30.460
Now if the Wi-Fi was
actually-- oh,

00:13:30.460 --> 00:13:31.350
it's pretty good now.

00:13:31.350 --> 00:13:33.300
It's showing it's at Sunside
Beach, so this is where you're

00:13:33.300 --> 00:13:34.235
going to have the party.

00:13:34.235 --> 00:13:35.920
You chose a pretty
good location.

00:13:35.920 --> 00:13:37.925
ROBERT: Yeah, so we've got the
exact location, so we can make

00:13:37.925 --> 00:13:39.717
sure the skydivers
arrive on time.

00:13:39.717 --> 00:13:40.880
[LAUGHTER]

00:13:40.880 --> 00:13:41.990
ROBERT: The bar has
been raised.

00:13:41.990 --> 00:13:43.470
It's not a party without
skydivers, guys.

00:13:46.890 --> 00:13:49.340
MARTIN: So a really cool final
use case about tags that I

00:13:49.340 --> 00:13:51.700
want to share with you is,
actually, that you can couple

00:13:51.700 --> 00:13:54.920
tags to do actions on your
device, so for example, on

00:13:54.920 --> 00:13:56.200
your phone or your tablet.

00:13:56.200 --> 00:13:59.490
Now, for example, you can
associate a sticker that you

00:13:59.490 --> 00:14:03.770
put on your bedstand with muting
the volume or launching

00:14:03.770 --> 00:14:04.700
a different application.

00:14:04.700 --> 00:14:07.220
Or you can have a sticker in
your office that disconnects

00:14:07.220 --> 00:14:10.010
the Wi-Fi and does different
kinds of settings.

00:14:10.010 --> 00:14:12.350
Now there are a few cool
applications in Android Market

00:14:12.350 --> 00:14:14.850
already that allow you to
configure a tag to execute

00:14:14.850 --> 00:14:16.730
certain operations
on your phone.

00:14:16.730 --> 00:14:19.230
And one of the applications I'm
going to show you is NFC

00:14:19.230 --> 00:14:24.305
Task Launcher, which allows
you to do just that.

00:14:24.305 --> 00:14:27.610
So in this application,
you define a new tag.

00:14:27.610 --> 00:14:29.770
And for each tag you can define
a number of tasks that

00:14:29.770 --> 00:14:32.930
you want to be executed whenever
you touch this tag.

00:14:32.930 --> 00:14:36.170
So let's say I want to create a
task for when I go to Google

00:14:36.170 --> 00:14:38.200
I/O. I think one of the things
I want to do when I get here

00:14:38.200 --> 00:14:40.460
is, you know, launch the Google
I/O application to see

00:14:40.460 --> 00:14:42.310
what sessions I'm going
to go to today.

00:14:42.310 --> 00:14:44.440
I probably want to mute the
volume to make sure that,

00:14:44.440 --> 00:14:46.675
during the sessions, I don't
interrupt anything.

00:14:46.675 --> 00:14:48.700
Now, so let's add an action.

00:14:48.700 --> 00:14:52.020
I can add an action to launch
an application.

00:14:52.020 --> 00:14:54.330
And for the application,
I'm going to select

00:14:54.330 --> 00:14:56.870
the Google I/O app.

00:14:56.870 --> 00:14:59.730
OK, I can add as many
actions as I like.

00:14:59.730 --> 00:15:02.175
So I can add another action
related to the volume.

00:15:02.175 --> 00:15:04.140
I can say the ring
tone volume.

00:15:04.140 --> 00:15:05.600
I can configure it.

00:15:05.600 --> 00:15:08.850
In this case, I'll just set
it to mute, all right.

00:15:08.850 --> 00:15:10.520
So now I have two actions.

00:15:10.520 --> 00:15:11.940
I can press finish.

00:15:11.940 --> 00:15:14.210
And the next thing I have to do
is I just need to have an

00:15:14.210 --> 00:15:15.800
empty tag, like this one.

00:15:15.800 --> 00:15:19.550
I can put it under my phone,
touch the phone, and it writes

00:15:19.550 --> 00:15:20.900
the data to the tag.

00:15:20.900 --> 00:15:22.770
So what's going to happen now is
that, whenever I touch this

00:15:22.770 --> 00:15:25.280
tag, it's going to execute
these actions.

00:15:25.280 --> 00:15:27.580
So we just to find a good
place for this tag.

00:15:27.580 --> 00:15:28.305
Why don't we use your badge?

00:15:28.305 --> 00:15:30.400
ROBERT: Yeah, sure, so I've got
my badge, which has one of

00:15:30.400 --> 00:15:32.140
those old-fashioned
QR codes on.

00:15:32.140 --> 00:15:32.435
[LAUGHTER]

00:15:32.435 --> 00:15:35.140
MARTIN: Yeah, it doesn't
really work very well.

00:15:35.140 --> 00:15:36.390
Let's do it like this.

00:15:38.760 --> 00:15:41.110
So now, whenever you touch
this tag with any of your

00:15:41.110 --> 00:15:43.550
phones, what it's going to do,
it's going to launch the

00:15:43.550 --> 00:15:45.120
Google I/O application,
and it's going to set

00:15:45.120 --> 00:15:46.340
the volume to mute.

00:15:46.340 --> 00:15:48.690
So you can have all kinds of
cool actions associated with

00:15:48.690 --> 00:15:49.490
each of these tags.

00:15:49.490 --> 00:15:50.610
You just stick them on all the
places that you like--

00:15:50.610 --> 00:15:51.860
ROBERT: But you programmed
that--

00:15:51.860 --> 00:15:52.680
that could be a trick.

00:15:52.680 --> 00:15:54.475
Because you programmed that.

00:15:54.475 --> 00:15:55.740
MARTIN: Oh sure, want to
try a real device?

00:15:55.740 --> 00:15:59.360
ROBERT: Does it only
work on your phone?

00:15:59.360 --> 00:15:59.610
There we go.

00:15:59.610 --> 00:16:04.310
So I can go in there, and is
it going to set my volume?

00:16:04.310 --> 00:16:05.400
MARTIN: Let's do it
with this phone.

00:16:05.400 --> 00:16:07.850
This'll work.

00:16:07.850 --> 00:16:08.410
It does the same.

00:16:08.410 --> 00:16:09.450
ROBERT: Awesome.

00:16:09.450 --> 00:16:10.120
MARTIN: Cool.

00:16:10.120 --> 00:16:12.290
ROBERT: And it auto-launches
the app, cool.

00:16:12.290 --> 00:16:15.230
Now, actually, all of the things
we've shown you are

00:16:15.230 --> 00:16:17.640
possible today with Ice
Cream Sandwich.

00:16:17.640 --> 00:16:20.540
But we announced Jelly Bean
yesterday, and we've got some

00:16:20.540 --> 00:16:22.280
new, exciting NFC features.

00:16:22.280 --> 00:16:25.820
We've added new features to J,
which we'll be able to tell

00:16:25.820 --> 00:16:29.350
you a little bit about today,
which we think will be very

00:16:29.350 --> 00:16:33.725
exciting for users and for
accessory manufacturers, all

00:16:33.725 --> 00:16:36.150
of the people who make
accessories to work with

00:16:36.150 --> 00:16:37.190
phones and devices.

00:16:37.190 --> 00:16:40.345
One of the great things about
all of these devices is-- you

00:16:40.345 --> 00:16:42.500
know, they're wireless, they can
connect over Bluetooth--

00:16:42.500 --> 00:16:45.290
but every time on Bluetooth, you
need a PIN, you've got to

00:16:45.290 --> 00:16:49.280
have 1234, you've got to have
0000, and it's a pain.

00:16:49.280 --> 00:16:51.130
With NFC you can just
tap to pair.

00:16:51.130 --> 00:16:55.020
So Martin's got his headphones
on ready, and I've got my

00:16:55.020 --> 00:16:55.590
phone here.

00:16:55.590 --> 00:16:58.160
So I've got some
music on here.

00:16:58.160 --> 00:17:03.123
So let's see what happens when
I tap my phone up here.

00:17:03.123 --> 00:17:08.200
And it says it's connecting
to the headphones.

00:17:08.200 --> 00:17:10.420
And music should start
any second.

00:17:10.420 --> 00:17:13.990
So Martin's rocking out,
but hang on, hang on,

00:17:13.990 --> 00:17:15.240
let's bring him back.

00:17:17.880 --> 00:17:21.435
And disconnecting,
simple as that.

00:17:21.435 --> 00:17:22.020
You're a tough--

00:17:22.020 --> 00:17:22.490
[APPLAUSE]

00:17:22.490 --> 00:17:23.740
ROBERT: Yeah, thank you, yeah.

00:17:27.390 --> 00:17:28.640
Tough crowd.

00:17:31.240 --> 00:17:33.330
Actually, that is a bit of a
cheap demo because Martin is

00:17:33.330 --> 00:17:35.750
perfectly capable of pretending
to dance.

00:17:35.750 --> 00:17:37.860
So we got these speakers,
which are just the same,

00:17:37.860 --> 00:17:39.080
NFC-powered.

00:17:39.080 --> 00:17:41.540
And, you know, after a busy day
at Google I/O, I've been

00:17:41.540 --> 00:17:43.800
partying, want to come, keep
the party rocking.

00:17:43.800 --> 00:17:45.050
I just take my phone--

00:17:47.500 --> 00:17:48.750
[MUSIC PLAYING - KRISS
KROSS, "JUMP"]

00:17:52.680 --> 00:17:56.130
ROBERT: All right, really,
really easy, and--

00:17:56.130 --> 00:17:56.910
[MUSIC STOPS]

00:17:56.910 --> 00:17:59.290
ROBERT: --when we've had enough
Kriss Kross, easy to

00:17:59.290 --> 00:18:02.030
get rid of them.

00:18:02.030 --> 00:18:04.890
So once again, NFC making
pairing by Bluetooth, that was

00:18:04.890 --> 00:18:06.650
creating a Bluetooth connection,
completely

00:18:06.650 --> 00:18:08.400
transparent to the user.

00:18:08.400 --> 00:18:11.510
Taking advantage of that 5
centimeters just so that you

00:18:11.510 --> 00:18:13.830
can come and tap and
make things happen,

00:18:13.830 --> 00:18:14.590
really, really easy.

00:18:14.590 --> 00:18:17.720
So we got rid of those horrible
PINs that used to

00:18:17.720 --> 00:18:18.760
slow you down.

00:18:18.760 --> 00:18:20.610
So let's have a look at another
area that could be

00:18:20.610 --> 00:18:22.380
improved by getting
rid of PINs.

00:18:22.380 --> 00:18:25.970
Let's talk about the future of
file-sharing between devices.

00:18:25.970 --> 00:18:28.820
So, quick question, how many of
you have transferred a file

00:18:28.820 --> 00:18:33.820
between two devices using
Bluetooth in the last year?

00:18:33.820 --> 00:18:36.620
So about, maybe, I think that's
about a fifth, a fifth

00:18:36.620 --> 00:18:37.280
of the hands.

00:18:37.280 --> 00:18:39.340
In the last month?

00:18:39.340 --> 00:18:42.230
Yeah, a few hardcore
masochists.

00:18:42.230 --> 00:18:45.280
And in the last week?

00:18:45.280 --> 00:18:45.810
So kind of no one.

00:18:45.810 --> 00:18:48.220
You've been having way too much
fun here to be messing

00:18:48.220 --> 00:18:49.910
around with Bluetooth
file transfer.

00:18:49.910 --> 00:18:53.030
And if you look all the steps
that it takes to achieve

00:18:53.030 --> 00:18:56.380
Bluetooth file transfer, it's
not really surprising.

00:18:56.380 --> 00:18:58.470
So let's have a look at
the future of sharing.

00:18:58.470 --> 00:19:00.980
So I'm going to take a
quick picture of you.

00:19:00.980 --> 00:19:02.680
I'll do this side,
just to be fair.

00:19:02.680 --> 00:19:05.540
I don't want you feeling
left out.

00:19:05.540 --> 00:19:05.990
So there we go.

00:19:05.990 --> 00:19:09.530
So I've got a picture of you,
which is on my phone now.

00:19:09.530 --> 00:19:11.050
So let's see what happens.

00:19:11.050 --> 00:19:11.620
MARTIN: Switch them
on for you?

00:19:11.620 --> 00:19:12.950
ROBERT: Yeah, thank
you Martin.

00:19:12.950 --> 00:19:16.700
So, sorry, you need to be able
to see what we're doing.

00:19:16.700 --> 00:19:19.860
So I've got that picture here.

00:19:19.860 --> 00:19:25.250
And when I tap to beam it
over, let's see what's

00:19:25.250 --> 00:19:27.030
happening on Martin's
phone now.

00:19:27.030 --> 00:19:31.330
So he has a notification that
there's an incoming beam.

00:19:31.330 --> 00:19:34.650
And even though that file is a
few hundred k, and the phones

00:19:34.650 --> 00:19:36.530
aren't now within NFC
range, you can see

00:19:36.530 --> 00:19:38.030
it's doing the transfer.

00:19:38.030 --> 00:19:40.790
So this is much, much easier.

00:19:40.790 --> 00:19:44.120
So as that completes, it may
take a few more seconds

00:19:44.120 --> 00:19:46.850
because it's quite a big file
from a Galaxy Nexus camera.

00:19:46.850 --> 00:19:47.740
MARTIN: Yeah, several megabytes
from the camera.

00:19:47.740 --> 00:19:48.530
ROBERT: Yes, several megs.

00:19:48.530 --> 00:19:49.860
So how did that happen?

00:19:49.860 --> 00:19:53.510
Well, the good news is, as you
saw there, it's absolutely

00:19:53.510 --> 00:19:54.560
transparent to the user.

00:19:54.560 --> 00:19:57.030
There's no steps, there's no
confirmation, just the usual

00:19:57.030 --> 00:19:58.190
Beam behavior.

00:19:58.190 --> 00:20:01.790
This supports photos
and videos.

00:20:01.790 --> 00:20:05.670
What we're actually doing is
initiating, using NFC, the

00:20:05.670 --> 00:20:06.660
Bluetooth file transfer.

00:20:06.660 --> 00:20:08.980
So we automatically pair the
devices in the background.

00:20:08.980 --> 00:20:11.650
We don't need the user to
confirm because they've used

00:20:11.650 --> 00:20:13.210
Beam to confirm.

00:20:13.210 --> 00:20:16.740
And automatically, there
we go, it's completed.

00:20:16.740 --> 00:20:18.450
So Martin can show
that now just to

00:20:18.450 --> 00:20:21.140
show we're not cheating.

00:20:21.140 --> 00:20:22.390
MARTIN: It's saying
"Beam complete."

00:20:22.390 --> 00:20:24.150
Just have to tap it.

00:20:24.150 --> 00:20:25.110
ROBERT: And there's a photo.

00:20:25.110 --> 00:20:26.270
So how easy was that.

00:20:26.270 --> 00:20:26.730
And that will work--

00:20:26.730 --> 00:20:27.010
[APPLAUSE]

00:20:27.010 --> 00:20:28.260
ROBERT: Thank you.

00:20:31.780 --> 00:20:34.440
So that's a new public
API for you to use.

00:20:34.440 --> 00:20:35.690
And it can be any payload.

00:20:35.690 --> 00:20:37.320
These are just the payloads
that are built in.

00:20:37.320 --> 00:20:39.450
So your apps can take advantage
of this too.

00:20:39.450 --> 00:20:40.690
So we've show you
some cool demos.

00:20:40.690 --> 00:20:43.900
Let's go on to talk about how we
think you might want to use

00:20:43.900 --> 00:20:44.920
NFC in your applications.

00:20:44.920 --> 00:20:48.040
And we're excited that many of
you are already doing that.

00:20:48.040 --> 00:20:50.610
Here are some reasons why
it can be useful to

00:20:50.610 --> 00:20:52.620
add NFC to your app.

00:20:52.620 --> 00:20:55.000
Well, users love NFC.

00:20:55.000 --> 00:20:57.880
It's so easy and natural, you
just tap things together and

00:20:57.880 --> 00:20:58.970
stuff starts to happen.

00:20:58.970 --> 00:21:01.810
It really feels magical, it's
like being in a movie.

00:21:01.810 --> 00:21:04.490
You can just walk up to things
and make stuff happen.

00:21:04.490 --> 00:21:05.540
It really does give
you that kind of

00:21:05.540 --> 00:21:08.040
Minority Report feeling.

00:21:08.040 --> 00:21:10.620
The good news is, you can make
users feel good like that in

00:21:10.620 --> 00:21:11.990
just a few lines of code.

00:21:11.990 --> 00:21:13.640
This isn't a big effort
for you guys.

00:21:13.640 --> 00:21:16.150
It's really simple to add it.

00:21:16.150 --> 00:21:18.750
We're very lucky that we have
so many thousands of great

00:21:18.750 --> 00:21:21.190
developers like you guys
building for Android.

00:21:21.190 --> 00:21:23.860
But we know it can be hard to
make your app stand out.

00:21:23.860 --> 00:21:27.480
Taking advantage of these new
features makes life easy for

00:21:27.480 --> 00:21:30.060
your users and it can help your
app to do well and to

00:21:30.060 --> 00:21:31.750
perform and to get
users excited.

00:21:31.750 --> 00:21:33.950
Let's take a quick look
at the opportunities.

00:21:33.950 --> 00:21:37.320
We think there's kind of two
ways to look at NFC.

00:21:37.320 --> 00:21:39.630
When you're doing things with
tags, the kind of stuff Martin

00:21:39.630 --> 00:21:43.160
showed, you know, putting a
poster up, putting a sticker

00:21:43.160 --> 00:21:45.810
up by the light switch in your
home to change your behaviors,

00:21:45.810 --> 00:21:48.310
maybe, of your phone, you're
probably thinking about new

00:21:48.310 --> 00:21:50.580
applications and new use cases,
things that you didn't

00:21:50.580 --> 00:21:52.020
necessarily do before.

00:21:52.020 --> 00:21:53.660
And there's lots of
documentation on the web about

00:21:53.660 --> 00:21:54.490
how to do that.

00:21:54.490 --> 00:21:57.470
And people think about, you
know, games in the real world,

00:21:57.470 --> 00:21:59.140
where you have to go around
collecting tags to prove

00:21:59.140 --> 00:22:01.380
you've been in a place,
and things like that.

00:22:01.380 --> 00:22:04.590
If you already have a successful
app on Android in

00:22:04.590 --> 00:22:08.830
the Play store, what we think
you should try to think about

00:22:08.830 --> 00:22:11.990
is, where in the app do your
users have something they

00:22:11.990 --> 00:22:13.290
might want to share?

00:22:13.290 --> 00:22:15.800
Where might they want to share
the context or the content

00:22:15.800 --> 00:22:17.370
between two devices?

00:22:17.370 --> 00:22:18.910
Because Beam is a great
way to do that.

00:22:18.910 --> 00:22:21.190
Beam isn't really about
new use cases.

00:22:21.190 --> 00:22:23.930
We were talking to a developer
yesterday, and he said, well,

00:22:23.930 --> 00:22:26.970
all it does is share content
from one device to another.

00:22:26.970 --> 00:22:28.350
Well, yeah.

00:22:28.350 --> 00:22:30.350
We thought that was
pretty good.

00:22:30.350 --> 00:22:32.710
It doesn't have to
make the tea.

00:22:32.710 --> 00:22:34.900
It just share content from
one device to another.

00:22:34.900 --> 00:22:37.260
And that, kind of, is
the point about it.

00:22:37.260 --> 00:22:39.270
So for the rest of the
presentation, we're going to

00:22:39.270 --> 00:22:41.710
focus on Beam and how
to share content and

00:22:41.710 --> 00:22:43.590
context between devices.

00:22:43.590 --> 00:22:46.490
And at first, you may not
think that your app has

00:22:46.490 --> 00:22:47.160
anything to share.

00:22:47.160 --> 00:22:50.050
Maybe you don't take photos
or create new content.

00:22:50.050 --> 00:22:52.940
But just like we showed with
Paper Camera, almost every app

00:22:52.940 --> 00:22:55.850
has some state that might be
complex to set up, you know,

00:22:55.850 --> 00:22:57.100
there's many settings.

00:22:59.080 --> 00:23:01.040
Think about what's useful
to move from

00:23:01.040 --> 00:23:02.540
one person to another.

00:23:02.540 --> 00:23:05.630
But also, just think about the
fact that many people have

00:23:05.630 --> 00:23:07.450
more than one NFC-enabled
device.

00:23:07.450 --> 00:23:08.880
All of you now have several.

00:23:08.880 --> 00:23:11.160
You might be looking at
something on your phone, you

00:23:11.160 --> 00:23:13.530
want to look at it on a tablet,
you want to make play

00:23:13.530 --> 00:23:16.800
on a Nexus Q, for example.

00:23:16.800 --> 00:23:18.420
It's very, very natural
to beam from

00:23:18.420 --> 00:23:19.130
one device to another.

00:23:19.130 --> 00:23:21.050
So it isn't always about
one person to another.

00:23:21.050 --> 00:23:23.900
It could just be the same person
who's come into the

00:23:23.900 --> 00:23:27.900
room, or changed context, or
picked up another device.

00:23:27.900 --> 00:23:30.470
So before I hand over to Martin
to show you how to make

00:23:30.470 --> 00:23:33.320
this magic and add it to your
applications, I want to point

00:23:33.320 --> 00:23:35.720
out a couple of pitfalls
with Android Beam.

00:23:35.720 --> 00:23:39.220
We tried to make it really
magical, and in a few cases,

00:23:39.220 --> 00:23:41.390
we've seen some apps that make
us a little bit sad.

00:23:41.390 --> 00:23:44.200
Because they've, somehow,
managed to break Beam.

00:23:44.200 --> 00:23:46.930
And when you break Beam,
a kitten dies.

00:23:46.930 --> 00:23:48.210
It really is that simple.

00:23:48.210 --> 00:23:50.230
So please don't break Beam.

00:23:50.230 --> 00:23:51.740
Well, how do you break Beam?

00:23:51.740 --> 00:23:53.700
Usually by adding
something to it.

00:23:53.700 --> 00:23:55.620
And we're not going to name
names today, because we

00:23:55.620 --> 00:23:57.970
wouldn't do that, because we
love all of our developers.

00:23:57.970 --> 00:24:00.350
But here are some of the
things we've seen done.

00:24:00.350 --> 00:24:03.140
We've seen somebody put
Beam on a menu.

00:24:03.140 --> 00:24:06.110
So over on the right-hand side
there, you see, on the slide,

00:24:06.110 --> 00:24:08.010
it's like, oh I want
to share now.

00:24:08.010 --> 00:24:11.340
The user tells your app they
want to share using Beam by

00:24:11.340 --> 00:24:13.000
putting it next to
another device.

00:24:13.000 --> 00:24:14.420
They don't go and choose
from a menu.

00:24:14.420 --> 00:24:15.610
They shouldn't have
to do that.

00:24:15.610 --> 00:24:18.410
That proximity is your
cue to share.

00:24:18.410 --> 00:24:21.380
And when Martin comes on to talk
about it the APIs, you'll

00:24:21.380 --> 00:24:24.730
see how you can even be very
late-binding and only declare

00:24:24.730 --> 00:24:28.020
your payload at the time when
you're in close proximity with

00:24:28.020 --> 00:24:29.050
another device.

00:24:29.050 --> 00:24:30.720
So please don't put
it on a menu.

00:24:30.720 --> 00:24:32.150
Please don't add other
dialogues.

00:24:32.150 --> 00:24:34.790
In the middle there, you've got
a pop-up that we've seen

00:24:34.790 --> 00:24:37.020
in apps that says "Are you
sure you want to share?"

00:24:37.020 --> 00:24:40.310
Again, how often do you put
your phone within 5

00:24:40.310 --> 00:24:41.710
centimeters of someone
else's phone?

00:24:41.710 --> 00:24:43.060
It's a very deliberate act.

00:24:43.060 --> 00:24:45.780
You do not need to click and
say, "yes, I'm absolutely

00:24:45.780 --> 00:24:46.460
sure."

00:24:46.460 --> 00:24:48.590
So those are all ways,
we think, you can

00:24:48.590 --> 00:24:49.550
chase the magic away.

00:24:49.550 --> 00:24:51.560
So please don't do that.

00:24:51.560 --> 00:24:53.750
And please just leave Beam be.

00:24:53.750 --> 00:24:54.920
It's not perfect.

00:24:54.920 --> 00:24:56.700
We're always going to add new
things, and we're going to

00:24:56.700 --> 00:25:00.420
talk at the end about a few
ideas about where we might go.

00:25:00.420 --> 00:25:04.490
But for now, just try
and keep it simple.

00:25:04.490 --> 00:25:07.230
So I don't want to dwell anymore
on how to do it wrong.

00:25:07.230 --> 00:25:09.550
I'm going to hand it over to
Martin to show you how you can

00:25:09.550 --> 00:25:13.640
add the magic of Beam sharing
into your apps.

00:25:13.640 --> 00:25:14.160
MARTIN: Cool.

00:25:14.160 --> 00:25:15.580
So let's take a look
at how our Beam

00:25:15.580 --> 00:25:17.080
share works in detail.

00:25:17.080 --> 00:25:19.260
So let's say you have two
devices, device A and device

00:25:19.260 --> 00:25:21.340
B, and you want to send
something across from device A

00:25:21.340 --> 00:25:24.160
to device B. Now let's say that
your application is the

00:25:24.160 --> 00:25:25.630
one that's running
on device A.

00:25:25.630 --> 00:25:27.740
As you know, Android
applications basically consist

00:25:27.740 --> 00:25:29.310
of a number of activities.

00:25:29.310 --> 00:25:33.010
What you developers have to
decide is, for each activity,

00:25:33.010 --> 00:25:34.460
does it make sense to
share anything over

00:25:34.460 --> 00:25:35.620
Beam for this activity?

00:25:35.620 --> 00:25:37.620
And if so, what is that?

00:25:37.620 --> 00:25:39.390
And once you've determined that,
you have to use a few

00:25:39.390 --> 00:25:42.500
set of simple APIs to tell the
Android operating system about

00:25:42.500 --> 00:25:44.940
the data that you want to share
from this activity.

00:25:44.940 --> 00:25:47.280
So what happens next is that
whenever you bring the two

00:25:47.280 --> 00:25:49.890
devices in range, the Android
operating system is going to

00:25:49.890 --> 00:25:52.490
check which activity is running
in the foreground now.

00:25:52.490 --> 00:25:54.450
Once it has determined that,
it'll see that for the

00:25:54.450 --> 00:25:56.460
application in the foreground,
is there anything registered

00:25:56.460 --> 00:25:58.270
that they want to
send over Beam?

00:25:58.270 --> 00:26:00.930
And in case there is, once you
touch the button to send,

00:26:00.930 --> 00:26:04.080
it'll automatically send
the payload across.

00:26:04.080 --> 00:26:06.610
So on the receiving side, you
get the data over NFC.

00:26:06.610 --> 00:26:09.030
And, basically, what we do with
any incoming NFC data is

00:26:09.030 --> 00:26:11.970
we try to start an activity
to deal with the data.

00:26:11.970 --> 00:26:14.690
So we somehow have to resolve
the NFC data that's incoming

00:26:14.690 --> 00:26:15.870
to an activity.

00:26:15.870 --> 00:26:18.430
And we'll go into more detail on
each of these steps later.

00:26:18.430 --> 00:26:20.750
So first, I want to share more
about the data format that you

00:26:20.750 --> 00:26:22.420
use for sharing over NFC.

00:26:22.420 --> 00:26:24.590
And the data format
is called NDEF.

00:26:24.590 --> 00:26:26.170
So let's first go a bit
more into detail about

00:26:26.170 --> 00:26:27.420
NDEF and how it works.

00:26:29.890 --> 00:26:32.460
So NDEF stands for the NFC
Data Exchange Format.

00:26:32.460 --> 00:26:34.500
And it's basically a simple
message format that was

00:26:34.500 --> 00:26:36.790
defined by the NFC forum,
which is like the NFC

00:26:36.790 --> 00:26:37.990
standards organization.

00:26:37.990 --> 00:26:41.390
And it's backed by all the
major industry players.

00:26:41.390 --> 00:26:43.080
And NDEF has, really,
two basic types.

00:26:43.080 --> 00:26:45.945
One type is the NDEF message,
and the other entity type is

00:26:45.945 --> 00:26:47.320
an NDEF record.

00:26:47.320 --> 00:26:48.760
Now an NDEF message
is really simple.

00:26:48.760 --> 00:26:51.330
It's nothing more or less than
one or more NDEF records.

00:26:51.330 --> 00:26:54.150
So it's just an encapsulation
of multiple NDEF records.

00:26:54.150 --> 00:26:55.370
And what is an NDEF record?

00:26:55.370 --> 00:26:57.020
An NDEF record consists,
basically, of a

00:26:57.020 --> 00:26:58.040
single set of data.

00:26:58.040 --> 00:27:01.800
So a single NDEF record can
be something like a URI.

00:27:01.800 --> 00:27:04.080
It can be a vCard, it
can be a link to a

00:27:04.080 --> 00:27:05.690
place on Google Maps.

00:27:05.690 --> 00:27:08.450
You can have multiple of these
records in a message.

00:27:08.450 --> 00:27:10.330
Now once you go inside a record,
let's see what fields

00:27:10.330 --> 00:27:11.340
it's composed of.

00:27:11.340 --> 00:27:13.970
Now the first field in an NDEF
record is called the Type Name

00:27:13.970 --> 00:27:15.930
Format or the TNF field.

00:27:15.930 --> 00:27:19.300
And all the Type Name Format
field does is tell the

00:27:19.300 --> 00:27:21.220
interpreter how to interpret
the second field in the

00:27:21.220 --> 00:27:22.710
message, the Type field.

00:27:22.710 --> 00:27:25.130
So there are a few distinct
values that you can use in the

00:27:25.130 --> 00:27:27.490
TNF field, and each of those
changes the way that the type

00:27:27.490 --> 00:27:29.380
field is interpreted.

00:27:29.380 --> 00:27:31.265
You can see some examples
on the right.

00:27:31.265 --> 00:27:34.040
If you use a Type Name Format
value of 1, which stands for

00:27:34.040 --> 00:27:37.110
the WELL_KNOWN type, and for the
Type, you can actually use

00:27:37.110 --> 00:27:38.730
a few short byte values.

00:27:38.730 --> 00:27:42.520
For example, if you specify the
Type as 55 hex, that means

00:27:42.520 --> 00:27:43.210
it's a URI.

00:27:43.210 --> 00:27:45.780
And the reason why this is good
is that you only use two

00:27:45.780 --> 00:27:47.630
bytes in the process of
specifying which type of

00:27:47.630 --> 00:27:48.310
record this is.

00:27:48.310 --> 00:27:50.900
So this is a lot easier than
actually spelling out the MIME

00:27:50.900 --> 00:27:52.350
type in text, right?

00:27:52.350 --> 00:27:54.110
Remember, NFC is low data rate,
so you don't want to

00:27:54.110 --> 00:27:55.510
waste too many bytes.

00:27:55.510 --> 00:27:57.420
So WELL_KNOWN is what you use
to have a few well-known

00:27:57.420 --> 00:28:01.360
record types and be able to
encode it in one or two bytes.

00:28:01.360 --> 00:28:03.050
Now a different Type Name
Format is, for example,

00:28:03.050 --> 00:28:04.140
MIME_MEDIA.

00:28:04.140 --> 00:28:06.750
When you specify Type Name
Format as MIME_MEDIA, value 2

00:28:06.750 --> 00:28:09.520
in the TNF field, that means
that the Type field will be

00:28:09.520 --> 00:28:12.030
interpreted as the
MIME type of the

00:28:12.030 --> 00:28:13.300
packet that you're sending.

00:28:13.300 --> 00:28:15.480
So then in the Type field, you
can put a string, for example,

00:28:15.480 --> 00:28:20.540
saying text/plain, which is a
MIME type for your record.

00:28:20.540 --> 00:28:22.600
Next, there's an optional
identifier.

00:28:22.600 --> 00:28:24.300
Most people actually don't
use the identifier.

00:28:24.300 --> 00:28:26.450
You can put any bytes in
there that you want.

00:28:26.450 --> 00:28:28.310
But the Android operating system
doesn't actually do

00:28:28.310 --> 00:28:30.425
anything with it, so it's
purely optional.

00:28:30.425 --> 00:28:31.850
And the final part
is the important

00:28:31.850 --> 00:28:32.850
part, that's the payload.

00:28:32.850 --> 00:28:34.310
So in the payload, you
put the actual data

00:28:34.310 --> 00:28:35.940
that you want to share.

00:28:35.940 --> 00:28:38.100
So in case you want to share an
URI, in the payload would

00:28:38.100 --> 00:28:41.410
be the actual data of
the URI itself.

00:28:41.410 --> 00:28:43.610
So how do you create such a
message for the Android APIs

00:28:43.610 --> 00:28:46.690
that we have?

00:28:46.690 --> 00:28:48.380
Well, there's a few
ways to do it.

00:28:48.380 --> 00:28:50.260
And the first way is
we do the hard way.

00:28:50.260 --> 00:28:52.740
So we have the constructor on
the NdefRecord, for which you

00:28:52.740 --> 00:28:55.740
can specify all for the fields
of the NdefRecord.

00:28:55.740 --> 00:28:57.710
So the first field is the
TNF field, in this case

00:28:57.710 --> 00:29:01.320
WELL-KNOWN, the second
one is URI, Type URI.

00:29:01.320 --> 00:29:03.370
You can specify an ID and
get the bytes of it.

00:29:03.370 --> 00:29:05.480
And finally, you can get the
actual payload in it and put

00:29:05.480 --> 00:29:06.795
the bytes in there.

00:29:06.795 --> 00:29:08.810
Now, because a lot of people
just want to have some

00:29:08.810 --> 00:29:11.230
standard records like URIs, we
actually created some helper

00:29:11.230 --> 00:29:13.290
methods on the NdefRecord
clause.

00:29:13.290 --> 00:29:15.480
So instead of using this complex
constructor, you can

00:29:15.480 --> 00:29:16.790
use a lot easier way.

00:29:16.790 --> 00:29:19.540
Simply call
NdefRecord.createURI.

00:29:19.540 --> 00:29:21.270
And as the only argument,
you have to specify the

00:29:21.270 --> 00:29:22.330
URI that you want.

00:29:22.330 --> 00:29:24.150
And it will automatically
create a record for you.

00:29:24.150 --> 00:29:28.250
So the second statement is
equivalent to the first one.

00:29:28.250 --> 00:29:30.280
Now another helper that we have
is if you want to create

00:29:30.280 --> 00:29:31.880
your own custom MIME type.

00:29:31.880 --> 00:29:34.560
So NdefRecord.createMime allows
you to specify, as a

00:29:34.560 --> 00:29:37.060
first argument, the MIME type
of your record, and as a

00:29:37.060 --> 00:29:38.800
second argument, the payload
that you have.

00:29:38.800 --> 00:29:40.850
So this way, again, you don't
need to use a constructor.

00:29:40.850 --> 00:29:44.590
You just have to pass in these
two values, and you're done.

00:29:44.590 --> 00:29:46.280
Now once you've put in the
NdefRecords that you want and

00:29:46.280 --> 00:29:48.720
put in the message, all you
have to do is call the

00:29:48.720 --> 00:29:50.490
NdefMessage constructor, and
as an argument, you can

00:29:50.490 --> 00:29:52.360
specify one or more
NdefRecords.

00:29:52.360 --> 00:29:55.055
In this case, I just created a
message with a single record,

00:29:55.055 --> 00:29:57.030
which is the URI record that
I created earlier.

00:30:01.390 --> 00:30:03.440
So one of the things you might
ask when you see these slides

00:30:03.440 --> 00:30:06.405
is, well, how do I know which
type I should use?

00:30:06.405 --> 00:30:08.560
And I think one of the
guidelines is that if you use

00:30:08.560 --> 00:30:11.510
an existing type, for example,
if you were to use text/plain,

00:30:11.510 --> 00:30:14.200
which indicates text type, then
any applications on the

00:30:14.200 --> 00:30:17.260
receiving device that already
have or handle this MIME type

00:30:17.260 --> 00:30:19.310
will be able to handle
this payload as well.

00:30:19.310 --> 00:30:21.990
So this allows you to reuse
implications that can deal

00:30:21.990 --> 00:30:23.580
with your payload.

00:30:23.580 --> 00:30:24.680
On the other hand,
you may have some

00:30:24.680 --> 00:30:25.850
very specific payloads.

00:30:25.850 --> 00:30:27.480
For example, there's
something that only

00:30:27.480 --> 00:30:28.275
your app can interpret.

00:30:28.275 --> 00:30:30.860
In that case, you may want to
have to, like, a MIME type

00:30:30.860 --> 00:30:32.110
that's specific for
your application.

00:30:35.040 --> 00:30:36.620
And in some cases, you
know, it's a hybrid.

00:30:36.620 --> 00:30:38.770
Maybe in some cases, you have
an image that you want to

00:30:38.770 --> 00:30:42.050
share, or even a text file,
but you still want a very

00:30:42.050 --> 00:30:44.040
specific applications
to handle it.

00:30:44.040 --> 00:30:45.770
And we don't think you should
be going and hacking around

00:30:45.770 --> 00:30:46.240
MIME types.

00:30:46.240 --> 00:30:49.200
In that case, we created a
special NDEF record for

00:30:49.200 --> 00:30:50.880
specifically that use case.

00:30:50.880 --> 00:30:54.530
And that record is called the
Android Application Record.

00:30:54.530 --> 00:30:56.360
So what the Android Application
Record does is if

00:30:56.360 --> 00:30:59.360
you put in a message, it will
guarantee delivery of the

00:30:59.360 --> 00:31:01.890
message to the package
that you specify.

00:31:01.890 --> 00:31:04.550
So you can create an Android
Application Record which

00:31:04.550 --> 00:31:07.020
specifies package com dot
Google dot whatever, and

00:31:07.020 --> 00:31:09.870
whenever this message is
received on the other side,

00:31:09.870 --> 00:31:12.300
the operating system will make
sure that that's the package

00:31:12.300 --> 00:31:14.140
that handles the message.

00:31:14.140 --> 00:31:18.200
Now you can even put multiple
records that represent

00:31:18.200 --> 00:31:20.170
multiple packages in
an NDEF message.

00:31:20.170 --> 00:31:21.970
So you can say, well, as a
first preference, I want

00:31:21.970 --> 00:31:24.460
application A to handle this
payload, but if it's not

00:31:24.460 --> 00:31:28.286
available, then please do
it by application B.

00:31:28.286 --> 00:31:31.085
And the other final thing to
understand is that even if in

00:31:31.085 --> 00:31:33.470
the application that you
specify, it doesn't even do

00:31:33.470 --> 00:31:36.100
anything with NFC, it doesn't
handle NFC intents, it will

00:31:36.100 --> 00:31:37.320
still be launched.

00:31:37.320 --> 00:31:39.380
So it's still, if you create
an NDEF message with an

00:31:39.380 --> 00:31:41.950
Android Application Record, it's
also an easy way for you

00:31:41.950 --> 00:31:44.250
to launch an application on a
remote device, even if that

00:31:44.250 --> 00:31:46.780
application does not
support NFC at all.

00:31:46.780 --> 00:31:49.080
And the final thing to know
about Android Application

00:31:49.080 --> 00:31:51.640
Records is that if the receiving
device is not have

00:31:51.640 --> 00:31:53.970
the application installed at
all, it'll take you to the

00:31:53.970 --> 00:31:55.870
Play store, where you can
actually install the

00:31:55.870 --> 00:32:00.430
application immediately, which
is what we saw before.

00:32:00.430 --> 00:32:02.980
So just to show you how to build
an Android Application

00:32:02.980 --> 00:32:05.180
Record, we also have a helper
method for that as well.

00:32:05.180 --> 00:32:07.740
So all you have to do is, you
create a URI record like we

00:32:07.740 --> 00:32:08.860
did before.

00:32:08.860 --> 00:32:10.960
And initially, you create an
Android Application Record by

00:32:10.960 --> 00:32:12.540
calling createApplicationRecord.

00:32:12.540 --> 00:32:15.600
And the only argument have to
give is the package name of

00:32:15.600 --> 00:32:18.080
the package that you want to
handle the payload on the

00:32:18.080 --> 00:32:19.000
receiving side.

00:32:19.000 --> 00:32:21.760
And now you simply compose an
NDEF message by specifying

00:32:21.760 --> 00:32:22.350
these two records.

00:32:22.350 --> 00:32:24.630
So the first record is
uriRecord, and the second

00:32:24.630 --> 00:32:26.360
record this the Android
Application Record.

00:32:26.360 --> 00:32:29.120
And this'll make sure that the
URI payload goes to the

00:32:29.120 --> 00:32:33.540
application that you specified,
pretty easy.

00:32:33.540 --> 00:32:36.170
So once you've built the NDEF
message, how, now, do you tell

00:32:36.170 --> 00:32:38.600
the Android operating system for
which activity you want to

00:32:38.600 --> 00:32:40.140
pass this message?

00:32:40.140 --> 00:32:42.160
Well, there's two really simple
APIs that you can use.

00:32:42.160 --> 00:32:44.250
So the one that you see
on the top is the

00:32:44.250 --> 00:32:45.930
setNdefPushMessage API.

00:32:45.930 --> 00:32:48.350
It's a really simple API where
you can just pass in any

00:32:48.350 --> 00:32:50.470
activity, and as a second
argument, you

00:32:50.470 --> 00:32:51.460
can pass in the message.

00:32:51.460 --> 00:32:53.200
Actually, it's the
other way around.

00:32:53.200 --> 00:32:54.870
And what this does, basically,
is tell the Android operating

00:32:54.870 --> 00:32:56.950
system for this activity,
share this message.

00:32:56.950 --> 00:32:59.390
And this is really great if you
have static content for

00:32:59.390 --> 00:33:00.010
your activity.

00:33:00.010 --> 00:33:02.580
Like your activity is always
sharing the same type of data.

00:33:02.580 --> 00:33:05.112
So that's when you want
to use this API.

00:33:05.112 --> 00:33:08.530
Now there's a different set of
use cases where the data that

00:33:08.530 --> 00:33:10.780
you want your activity to
share actually changes

00:33:10.780 --> 00:33:13.200
dynamically during whatever
you're interacting with in the

00:33:13.200 --> 00:33:14.420
application.

00:33:14.420 --> 00:33:15.760
So in that case, we
actually have a

00:33:15.760 --> 00:33:17.600
callback variant as well.

00:33:17.600 --> 00:33:20.880
So what you do instead is you
call the setNdefPushMessage

00:33:20.880 --> 00:33:22.630
callback method.

00:33:22.630 --> 00:33:24.365
You register a callback
with the NFC service.

00:33:24.365 --> 00:33:27.710
And whenever somebody brings the
two NFC devices in range,

00:33:27.710 --> 00:33:28.750
this callback is called.

00:33:28.750 --> 00:33:31.480
You can form the NDEF message
that you want to share, return

00:33:31.480 --> 00:33:33.690
it, and it gets sent across
to the other side.

00:33:33.690 --> 00:33:37.350
So the second use case is
really easy for dynamic

00:33:37.350 --> 00:33:39.320
applications, for example,
Gallery, where the activity

00:33:39.320 --> 00:33:41.940
stays the same but the actual
content changes if you swipe

00:33:41.940 --> 00:33:44.490
your finger across the screen.

00:33:44.490 --> 00:33:46.330
The important thing to know
about the activities that

00:33:46.330 --> 00:33:50.210
you're passing into this API is
that you can basically call

00:33:50.210 --> 00:33:53.040
this in any activity state as
long as it hasn't been through

00:33:53.040 --> 00:33:54.420
the onDestroy call.

00:33:54.420 --> 00:33:57.010
So from whenever the moment
you're in onCreate, you can

00:33:57.010 --> 00:33:59.780
use this API, until the moment
it's been through onDestroy,

00:33:59.780 --> 00:34:01.760
and then it won't
work anymore.

00:34:01.760 --> 00:34:05.090
And even though the APIs allow
you to specify multiple

00:34:05.090 --> 00:34:08.190
activities, we recommend you
don't do that simply because

00:34:08.190 --> 00:34:10.370
for an activity that's not
currently running, you don't

00:34:10.370 --> 00:34:12.260
know if it's already been
through onDestroy.

00:34:12.260 --> 00:34:14.510
So it's the easiest, in your
applications, to just specify

00:34:14.510 --> 00:34:15.760
one activity.

00:34:18.940 --> 00:34:20.370
So let's see an actual
implementation.

00:34:20.370 --> 00:34:22.050
I have my activity, X,
for which I want to

00:34:22.050 --> 00:34:23.610
share an NDEF message.

00:34:23.610 --> 00:34:25.800
So in my onCreate, I simply have
to get a reference to the

00:34:25.800 --> 00:34:28.750
NFC adapter by calling
a default adapter.

00:34:28.750 --> 00:34:30.900
And all I have to do is call
the setNdefPushMessage

00:34:30.900 --> 00:34:33.040
callback API, which
I just specified.

00:34:33.040 --> 00:34:35.449
The first argument is the
callback, which is actually

00:34:35.449 --> 00:34:37.820
also an interface which is
implemented by This clause.

00:34:37.820 --> 00:34:41.080
And the second argument is the
activity, which is also This,

00:34:41.080 --> 00:34:42.940
in this case.

00:34:42.940 --> 00:34:45.949
And then you just need to
implement the / so the

00:34:45.949 --> 00:34:47.280
callback is called
createNdefMessage.

00:34:47.280 --> 00:34:50.609
And all you need to do in this
callback is create the NDEF

00:34:50.609 --> 00:34:52.159
message that you want to be
shared at this moment.

00:34:52.159 --> 00:34:54.480
So whenever you bring the
devices together this method

00:34:54.480 --> 00:34:55.100
will be called.

00:34:55.100 --> 00:34:56.620
You create the NDEF message
that you want to share.

00:34:56.620 --> 00:34:57.370
You return it.

00:34:57.370 --> 00:34:58.880
And it will be sent
across as soon as

00:34:58.880 --> 00:35:00.980
somebody touches the screen.

00:35:00.980 --> 00:35:03.820
One thing to note about this
callback is that because it is

00:35:03.820 --> 00:35:07.060
called whenever the NFC link
comes up, you don't want to

00:35:07.060 --> 00:35:09.130
wait too long or block too
long on this method.

00:35:09.130 --> 00:35:11.960
You just want to get the data
ready because the user is

00:35:11.960 --> 00:35:14.940
waiting at one point in
time to to touch and

00:35:14.940 --> 00:35:16.190
send the data across.

00:35:18.670 --> 00:35:20.590
So that's all you have to do for
the sending side, really.

00:35:20.590 --> 00:35:23.240
Just specify the data that you
want and tell the Android

00:35:23.240 --> 00:35:24.820
operating system, for this
activity, I want

00:35:24.820 --> 00:35:26.250
to share this data.

00:35:26.250 --> 00:35:27.460
So what happens on the
receiving side?

00:35:27.460 --> 00:35:29.590
Well, the receiving side gets an
NDEF message as well in the

00:35:29.590 --> 00:35:30.530
NFC service.

00:35:30.530 --> 00:35:33.230
And the NFC service somehow has
to translate this message

00:35:33.230 --> 00:35:34.750
to an activity that
can handle it.

00:35:34.750 --> 00:35:36.000
So how does that work?

00:35:38.390 --> 00:35:40.920
This slide shows a bit of code
that's inside the NFC service.

00:35:40.920 --> 00:35:42.933
So it's not code that you need
to write yourself, but it's

00:35:42.933 --> 00:35:46.010
just there to illustrate how
the NFC service does this.

00:35:46.010 --> 00:35:49.800
So when I receive the NDEF
message, it takes a look at

00:35:49.800 --> 00:35:51.340
the first record
of the message.

00:35:51.340 --> 00:35:53.540
Specifically, it takes look at
the Type Name Format and the

00:35:53.540 --> 00:35:54.860
Type fields.

00:35:54.860 --> 00:35:58.240
And basically, from these two
fields, it creates a Type that

00:35:58.240 --> 00:35:59.130
it sets on intent.

00:35:59.130 --> 00:36:01.650
So the first thing it does is
creates a new intent, and the

00:36:01.650 --> 00:36:04.100
action on that intent is
ACTION_NDEF_DISCOVERED, to

00:36:04.100 --> 00:36:06.660
indicate that it's found
a new NDEF record.

00:36:06.660 --> 00:36:08.690
And the second thing it does is
set the Type, based on the

00:36:08.690 --> 00:36:10.600
Type Name Format and the Type.

00:36:10.600 --> 00:36:12.200
And finally, it puts,
as an extra, the

00:36:12.200 --> 00:36:13.740
entire message in it.

00:36:13.740 --> 00:36:16.730
So whatever activity is going to
handle the message, it can

00:36:16.730 --> 00:36:19.360
actually get the full message
by getting the

00:36:19.360 --> 00:36:21.560
extra from the intent.

00:36:21.560 --> 00:36:24.160
And then the NFC server simply
calls start activity, and the

00:36:24.160 --> 00:36:26.330
normal Android operating system
kicks in to find an

00:36:26.330 --> 00:36:28.920
activity that actually matches
these constraints.

00:36:28.920 --> 00:36:31.370
So let's take a look at how the
Type Name Format and Type

00:36:31.370 --> 00:36:34.140
fields actually are converted
into a Type field in the

00:36:34.140 --> 00:36:39.010
intent So we have a few
different records here.

00:36:39.010 --> 00:36:42.970
The first is a URI record
of Type WELL_KNOWN.

00:36:42.970 --> 00:36:44.620
It shows all of the
NDEF fields.

00:36:44.620 --> 00:36:47.600
So the first is TNF, which is
WELL_KNOWN, the second is the

00:36:47.600 --> 00:36:49.450
Type, which is the URI type,
the X value that

00:36:49.450 --> 00:36:50.540
I showed you earlier.

00:36:50.540 --> 00:36:52.160
And the third is the Payload.

00:36:52.160 --> 00:36:54.740
So this is going to be
translated to a data field on

00:36:54.740 --> 00:36:55.390
the intent.

00:36:55.390 --> 00:37:02.420
And the data will be a URI,
http://www.google.com.

00:37:02.420 --> 00:37:05.570
Another example is
a text data.

00:37:05.570 --> 00:37:09.530
You can also specify text data
by using a TNF of WELL_KNOWN.

00:37:09.530 --> 00:37:12.410
Use RTD_TEXT to indicate
that it's a text type.

00:37:12.410 --> 00:37:14.260
You can put some text
in the payload.

00:37:14.260 --> 00:37:16.120
So this is going to be
translated to an intent type

00:37:16.120 --> 00:37:17.830
of text/plain.

00:37:17.830 --> 00:37:19.480
And there are a few different
examples on there.

00:37:19.480 --> 00:37:21.430
You can also use a
custom MIME type.

00:37:21.430 --> 00:37:23.400
And, in this case, your
custom MIME type,

00:37:23.400 --> 00:37:26.845
application/vnw.mine, will
end up on the intent.

00:37:26.845 --> 00:37:29.060
So it is really a straight
mapping from the Type Name

00:37:29.060 --> 00:37:32.060
Format and the Type fields, to
the Type fields, or the Data

00:37:32.060 --> 00:37:35.310
field that's in the intent.

00:37:35.310 --> 00:37:36.520
So I told you before,
also, about

00:37:36.520 --> 00:37:37.660
Android Application Records.

00:37:37.660 --> 00:37:40.020
How do they tie into
this picture?

00:37:40.020 --> 00:37:42.190
So basically, the code in the
NFC service looks the same for

00:37:42.190 --> 00:37:43.060
the first part.

00:37:43.060 --> 00:37:45.150
So you will still look
at the first record.

00:37:45.150 --> 00:37:47.250
You will determine the Type from
the Type Name Format and

00:37:47.250 --> 00:37:49.040
the Type fields.

00:37:49.040 --> 00:37:51.900
You'll put the extra, which
has the full NDEF message.

00:37:51.900 --> 00:37:53.840
But for each application record
that you find in a

00:37:53.840 --> 00:37:55.500
message, you're going
to call the

00:37:55.500 --> 00:37:57.430
setPackage API on the intent.

00:37:57.430 --> 00:37:59.310
And basically, this tells
Android operating system to

00:37:59.310 --> 00:38:02.320
deliver this intent to that
package specifically.

00:38:02.320 --> 00:38:04.430
So for each package that's
in there, we first

00:38:04.430 --> 00:38:04.830
try to start it.

00:38:04.830 --> 00:38:08.140
If it doesn't work, we try the
next one, and so on and so on.

00:38:08.140 --> 00:38:11.100
Finally, like I said before, if
you don't find any activity

00:38:11.100 --> 00:38:13.880
you either launch the first
application that's in the AAR,

00:38:13.880 --> 00:38:16.620
or even if it's not installed,
it takes you to the Play store

00:38:16.620 --> 00:38:17.870
to install the application.

00:38:21.970 --> 00:38:23.230
Now let's say that you're
interested in

00:38:23.230 --> 00:38:24.630
receiving such an intent.

00:38:24.630 --> 00:38:25.385
What do you need to do?

00:38:25.385 --> 00:38:26.580
Well, it's actually
really simple.

00:38:26.580 --> 00:38:28.320
I showed you how the intents
were formed, right?

00:38:28.320 --> 00:38:29.540
It's an action with
NDEF_DISCOVERED.

00:38:29.540 --> 00:38:30.670
It has a certain Type.

00:38:30.670 --> 00:38:32.820
All you need to do is write
an intent filter for your

00:38:32.820 --> 00:38:36.500
activity that actually will
filter for this intent and

00:38:36.500 --> 00:38:38.010
deal with it.

00:38:38.010 --> 00:38:40.460
So in this case, let's say you
have and activity Y, for which

00:38:40.460 --> 00:38:42.880
I want to receive a specific
amount of NDEF data, a certain

00:38:42.880 --> 00:38:44.670
amount of NDEF data.

00:38:44.670 --> 00:38:46.070
Let's look how it works.

00:38:46.070 --> 00:38:49.510
Just in the Android manifest,
for the activity Y, I can

00:38:49.510 --> 00:38:51.500
specify a few intent filters.

00:38:51.500 --> 00:38:54.550
So the first one, for example,
is an intent filter for the

00:38:54.550 --> 00:38:57.560
MIME type application/vnw.mine

00:38:57.560 --> 00:38:59.680
So the action is the action
NDEF_DISCOVERED, which is what

00:38:59.680 --> 00:39:01.160
the NFC service used.

00:39:01.160 --> 00:39:03.606
The category is default, as
usual, and you just need to

00:39:03.606 --> 00:39:06.280
put in the MIME type that
you want to filter for.

00:39:06.280 --> 00:39:08.220
Well, the second example
is on there as well.

00:39:08.220 --> 00:39:12.140
If you want to have a URI, for
example, google.com/nfc, you

00:39:12.140 --> 00:39:13.390
can put an intent filter.

00:39:13.390 --> 00:39:17.330
The action is NDEF_DISCOVERED,
but the data is the scheme you

00:39:17.330 --> 00:39:20.340
set, HTTP, and you can put in
the host and the paths to

00:39:20.340 --> 00:39:21.600
match exactly what you want.

00:39:21.600 --> 00:39:24.780
You can also use wild cards in
there to match different kinds

00:39:24.780 --> 00:39:26.030
of patterns.

00:39:29.390 --> 00:39:31.150
So once you've done that in the
manifest, all you need to

00:39:31.150 --> 00:39:34.040
do is, in your activity that's
handling it, in activity Y, in

00:39:34.040 --> 00:39:35.930
this case, you need to get
the actual data and do

00:39:35.930 --> 00:39:37.130
something with it.

00:39:37.130 --> 00:39:39.860
So in this example, I show you
the onCreate method for your

00:39:39.860 --> 00:39:43.300
activity Y. This will get called
by the NFC service.

00:39:43.300 --> 00:39:44.450
And basically, what
you do is you just

00:39:44.450 --> 00:39:45.580
need to get the intent.

00:39:45.580 --> 00:39:47.610
You need to check the action
on the intent to make sure

00:39:47.610 --> 00:39:50.220
it's an NDEF_DISCOVERED intent
and not a different one.

00:39:50.220 --> 00:39:52.760
Once you know it's that, you can
actually get the payload,

00:39:52.760 --> 00:39:56.346
the NDEF message, from it by
just getting the extra out of

00:39:56.346 --> 00:39:56.900
the intent.

00:39:56.900 --> 00:39:59.550
So you can use the intent dot
getParcelableArrayExtra to get

00:39:59.550 --> 00:40:00.775
the extra out.

00:40:00.775 --> 00:40:02.255
And then you have the
actual message.

00:40:02.255 --> 00:40:04.560
And once you have the message,
you can get the first record.

00:40:04.560 --> 00:40:06.820
And from the record, you can
get the actual payload.

00:40:06.820 --> 00:40:08.930
So now you actually have the
same payload that the other

00:40:08.930 --> 00:40:11.500
side put in into the NDEF
record, and you can start

00:40:11.500 --> 00:40:13.810
processing it or do with
it whatever you like.

00:40:13.810 --> 00:40:15.420
If it's some big data, you
probably want to do it on a

00:40:15.420 --> 00:40:16.670
different thread.

00:40:20.290 --> 00:40:23.160
So one of the important things
about receiving, and this is

00:40:23.160 --> 00:40:26.430
really, really important to
understand, is that a design

00:40:26.430 --> 00:40:29.060
decision we made is that every
NFC interaction that you have

00:40:29.060 --> 00:40:33.010
with your device, be it touching
a tag or doing an

00:40:33.010 --> 00:40:35.150
Android Beam, it will
launch the activity

00:40:35.150 --> 00:40:36.200
in a new task stack.

00:40:36.200 --> 00:40:38.070
And the reason for it is that,
you know, we don't really

00:40:38.070 --> 00:40:40.750
know, when you tap a tag, was it
really part of the previous

00:40:40.750 --> 00:40:42.220
activity that you were doing?

00:40:42.220 --> 00:40:44.580
Or is it something
new altogether?

00:40:44.580 --> 00:40:46.410
So this is the default behavior
of Android when

00:40:46.410 --> 00:40:48.170
launching NFC activities.

00:40:48.170 --> 00:40:50.880
It'll just start a
new task stack.

00:40:50.880 --> 00:40:52.770
Now for some applications,
that may not make sense.

00:40:52.770 --> 00:40:55.150
It may be that your application
always has a

00:40:55.150 --> 00:40:57.970
single activity, and you want
it to be launched always in

00:40:57.970 --> 00:40:59.420
the same existing task stack.

00:41:02.750 --> 00:41:03.790
So let's show you
how it works.

00:41:03.790 --> 00:41:06.160
In that case, you can actually
specify for this activity that

00:41:06.160 --> 00:41:07.850
the launch mode is
single task.

00:41:07.850 --> 00:41:09.730
So what this does is this tells
the Android operating

00:41:09.730 --> 00:41:12.880
systems do not create a new
task for this specific NFC

00:41:12.880 --> 00:41:15.690
intent but instead to deliver it
to the existing task that's

00:41:15.690 --> 00:41:17.860
already running in a separate
task stack.

00:41:17.860 --> 00:41:19.610
And the main difference here
is that instead of calling

00:41:19.610 --> 00:41:22.270
onCreate and giving you a new
activity, this will actually

00:41:22.270 --> 00:41:25.810
call the onNewIntent method,
which allows you to deal with

00:41:25.810 --> 00:41:30.180
the NFC data in the activity
while it's already running.

00:41:34.671 --> 00:41:36.990
Now there is a final use case
that's important that is if

00:41:36.990 --> 00:41:38.930
you have multiple NFC
interactions with multiple

00:41:38.930 --> 00:41:39.960
activities.

00:41:39.960 --> 00:41:42.100
So the previous slide, that just
showed you one activity,

00:41:42.100 --> 00:41:44.036
and you can have multiple NFC
interactions with that, and

00:41:44.036 --> 00:41:46.160
for each interaction, you get
a call to onNewIntent.

00:41:46.160 --> 00:41:49.670
Well, what if you have
multiple activities?

00:41:49.670 --> 00:41:52.130
Well, basically, if multiple
activities have the same

00:41:52.130 --> 00:41:54.620
intent filter, that will pop up
the intent or the Activity

00:41:54.620 --> 00:41:55.390
Chooser, right?

00:41:55.390 --> 00:41:57.630
You've seen that before, if
you open a URL, you choose

00:41:57.630 --> 00:41:59.010
between browser and Chrome.

00:41:59.010 --> 00:42:01.500
This will also happen for
NFC interactions.

00:42:01.500 --> 00:42:03.355
So in this case, what you would
typically do is, you

00:42:03.355 --> 00:42:05.310
would typically have an entry
task, where you want to start

00:42:05.310 --> 00:42:08.990
interacting with your NFC tag,
or maybe with Android Beam.

00:42:08.990 --> 00:42:10.880
And this entry task you would
typically give launch mode

00:42:10.880 --> 00:42:13.290
single task, so you make sure
that it routes to an existing

00:42:13.290 --> 00:42:14.670
task stack.

00:42:14.670 --> 00:42:16.440
Now for all of these subsequent
activities you can

00:42:16.440 --> 00:42:18.690
use different a different launch
mode called Single Top,

00:42:18.690 --> 00:42:20.650
which means that if that
activity is currently running

00:42:20.650 --> 00:42:25.410
on top, your NFC intent will be
delivered to that activity.

00:42:25.410 --> 00:42:26.720
And you can combine it
with a feature we

00:42:26.720 --> 00:42:28.260
call Foreground Dispatch.

00:42:28.260 --> 00:42:30.990
I won't go into too much detail
about it here, but

00:42:30.990 --> 00:42:33.490
Foreground Dispatch allows you
to bypass the activity chooser

00:42:33.490 --> 00:42:34.410
altogether.

00:42:34.410 --> 00:42:37.210
You can say to the Android
operating system, hey, I want

00:42:37.210 --> 00:42:40.400
to deal these kinds of intents
or intent filters right now,

00:42:40.400 --> 00:42:42.590
and I don't want any other
applications to be

00:42:42.590 --> 00:42:44.751
able to handle it.

00:42:44.751 --> 00:42:47.560
All right, so let's talk about
some new stuff in J. I'm

00:42:47.560 --> 00:42:50.510
really excited about this API
because it brings together a

00:42:50.510 --> 00:42:52.565
lot of cool features
and technologies.

00:42:55.450 --> 00:42:58.170
So as we've seen before, it's
really hard to get a file from

00:42:58.170 --> 00:42:59.460
one device onto another,
right?

00:42:59.460 --> 00:43:01.410
As we showed with Bluetooth,
there's lots of screens and

00:43:01.410 --> 00:43:03.030
confirmations involved.

00:43:03.030 --> 00:43:04.890
So let's take a look at how you
would do this with the new

00:43:04.890 --> 00:43:08.400
NFC API in J, which allows you
to share pictures and all

00:43:08.400 --> 00:43:11.750
kinds of large data.

00:43:11.750 --> 00:43:14.230
So all we have to do is, let's
say I have an activity here.

00:43:14.230 --> 00:43:15.820
And in this activity,
I want to share,

00:43:15.820 --> 00:43:17.690
like, a URI to a file.

00:43:17.690 --> 00:43:20.230
Or I want to share a URI
to a content provider.

00:43:20.230 --> 00:43:22.330
I can get a reference
to these URIs.

00:43:22.330 --> 00:43:24.720
And all I have to do is call
a single method on the NFC

00:43:24.720 --> 00:43:27.380
adapter calling setBeamPushUris.

00:43:27.380 --> 00:43:29.940
And in this API call, I
basically specify the URIs

00:43:29.940 --> 00:43:32.740
that I want to be sent across
to the other device.

00:43:32.740 --> 00:43:34.890
There's also a callback
function in this case.

00:43:34.890 --> 00:43:36.600
And this is really all
you need to do.

00:43:36.600 --> 00:43:39.090
So once you do this, whenever
you bring the devices into

00:43:39.090 --> 00:43:42.000
range, and you tap it, Android
will actually get the data,

00:43:42.000 --> 00:43:44.410
send it across to the other side
over Bluetooth, which is

00:43:44.410 --> 00:43:46.920
really fast, and it'll deal with
it on the other side and

00:43:46.920 --> 00:43:49.040
launch an activity
to handle it.

00:43:49.040 --> 00:43:52.090
This is all you need to do.

00:43:52.090 --> 00:43:54.080
It's quite amazing, I mean, five
lines of code-- it's so

00:43:54.080 --> 00:43:55.770
hard to get a file onto
another device.

00:43:55.770 --> 00:43:58.870
You just have to write this,
and all you get is just

00:43:58.870 --> 00:44:01.100
instant transfer without any
confirmations or whatever.

00:44:01.100 --> 00:44:03.010
It's just like the
Gallery demo that

00:44:03.010 --> 00:44:05.622
we showed you before.

00:44:05.622 --> 00:44:08.120
So how does it work?

00:44:08.120 --> 00:44:08.860
It's pretty simple.

00:44:08.860 --> 00:44:10.760
In the flow that we had before,
you have device A and

00:44:10.760 --> 00:44:13.490
device B. So on device A, you
just call this API, the

00:44:13.490 --> 00:44:15.470
setBeamPushUris API.

00:44:15.470 --> 00:44:18.260
And whenever you bring the
devices in range, the NFC

00:44:18.260 --> 00:44:20.260
service is going to transfer the
MAC address of the other

00:44:20.260 --> 00:44:23.770
device, device B, to device A.
And this allows device A to

00:44:23.770 --> 00:44:27.600
set up a background Bluetooth
connection, which allows you

00:44:27.600 --> 00:44:28.870
to transfer the data.

00:44:28.870 --> 00:44:30.440
So once that's done,
the data is

00:44:30.440 --> 00:44:32.190
actually sent over Bluetooth.

00:44:32.190 --> 00:44:34.940
The receiving device stores
the data in a file then.

00:44:34.940 --> 00:44:37.360
And it launches an ACTION_VIEW
intent to actually deal with

00:44:37.360 --> 00:44:39.010
the data on the remote device.

00:44:39.010 --> 00:44:39.850
So I want to call this out.

00:44:39.850 --> 00:44:42.570
This is different from action
NDEF_DISCOVERED because action

00:44:42.570 --> 00:44:45.480
NDEF_DISCOVERED only works on
NDEF data and is specific

00:44:45.480 --> 00:44:46.700
specifically to NDEF.

00:44:46.700 --> 00:44:48.620
However, there are already a lot
of applications that deal

00:44:48.620 --> 00:44:51.630
with the ACTION_VIEW intent
because it's the main intent

00:44:51.630 --> 00:44:53.470
that you use for viewing
information.

00:44:53.470 --> 00:44:56.030
So that means that whenever you
write some code that does

00:44:56.030 --> 00:44:58.740
this, if the receiving side
already has an application

00:44:58.740 --> 00:45:01.410
that handles your data, it
will automatically be

00:45:01.410 --> 00:45:02.990
launched, which is
really great.

00:45:06.320 --> 00:45:08.330
So the great thing about this
API is that you get all the UI

00:45:08.330 --> 00:45:09.640
and Bluetooth handling
for free.

00:45:09.640 --> 00:45:11.510
So you don't need to write
any Bluetooth code or any

00:45:11.510 --> 00:45:12.680
confirmations or whatever.

00:45:12.680 --> 00:45:14.560
You just really need to
write a few lines of

00:45:14.560 --> 00:45:16.170
code to make it happen.

00:45:16.170 --> 00:45:17.880
And the other thing that's
important about it is that you

00:45:17.880 --> 00:45:20.220
can use it in combination with
the NDEF APIs that I showed

00:45:20.220 --> 00:45:21.590
you before.

00:45:21.590 --> 00:45:24.130
So the new API will actually
only work on devices

00:45:24.130 --> 00:45:25.060
that have J or late.

00:45:25.060 --> 00:45:26.550
So this is important, right?

00:45:26.550 --> 00:45:28.410
You want to have a fallback
method in case the device that

00:45:28.410 --> 00:45:30.660
you're sending data to doesn't
have the newest implementation

00:45:30.660 --> 00:45:33.230
that allows you to
share large data.

00:45:33.230 --> 00:45:36.380
So what you can do is you
can use both APIs.

00:45:36.380 --> 00:45:38.940
Android will first try to use
the new J way of doing things,

00:45:38.940 --> 00:45:41.220
which is sending stuff over
Bluetooth really fast.

00:45:41.220 --> 00:45:43.290
If it finds out the other device
doesn't have Bluetooth

00:45:43.290 --> 00:45:45.120
or doesn't have the
capability, it'll

00:45:45.120 --> 00:45:46.100
fall back to the URI.

00:45:46.100 --> 00:45:48.190
So you can still have a fallback
mechanism in case

00:45:48.190 --> 00:45:49.850
things don't work.

00:45:49.850 --> 00:45:51.100
All right.

00:45:53.310 --> 00:45:56.135
Let's wrap up.

00:45:56.135 --> 00:45:58.450
I want to share some things
we're thinking

00:45:58.450 --> 00:46:00.290
about with you guys.

00:46:00.290 --> 00:46:02.880
So what we hear a lot on the
developer forums is that Beam

00:46:02.880 --> 00:46:04.060
is really only one-way, right?

00:46:04.060 --> 00:46:07.110
You bring the two devices
together, and one of the two

00:46:07.110 --> 00:46:10.040
taps, and then data gets sent
across to the other device.

00:46:10.040 --> 00:46:11.760
In fact, I think, if you're
really careful with timing,

00:46:11.760 --> 00:46:13.430
and you touch right at the
same time, you can get it

00:46:13.430 --> 00:46:16.130
going two-way, but that's not
really the way to do it.

00:46:16.130 --> 00:46:17.780
So we're really thinking about
supporting two-way

00:46:17.780 --> 00:46:20.280
communication in Android Beam
and making sure that once you

00:46:20.280 --> 00:46:22.330
bring the devices together, you
can actually ping multiple

00:46:22.330 --> 00:46:24.380
messages back and forth
and enable, you know,

00:46:24.380 --> 00:46:25.420
much cooler use cases.

00:46:25.420 --> 00:46:28.700
You can have all kinds of
protocols going, then.

00:46:28.700 --> 00:46:30.190
The other thing we hear a lot
is customizing the Android

00:46:30.190 --> 00:46:31.120
Beam animation.

00:46:31.120 --> 00:46:33.290
So right now, you see that
whenever you bring the devices

00:46:33.290 --> 00:46:34.960
together, the screenshot
scales down.

00:46:34.960 --> 00:46:37.395
There's some nice star
field behind it.

00:46:37.395 --> 00:46:40.340
Maybe we want to give you some
APIs to actually specify the

00:46:40.340 --> 00:46:42.370
screen shot that's shown, that's
being scaled down.

00:46:42.370 --> 00:46:44.250
Or maybe you even want to
do your own cool custom

00:46:44.250 --> 00:46:44.570
animations.

00:46:44.570 --> 00:46:46.955
So that's something we're
definitely looking into.

00:46:46.955 --> 00:46:49.580
And the final thing we want to
do is, you know, we have this

00:46:49.580 --> 00:46:53.030
great API which allows you to
easily send across large files

00:46:53.030 --> 00:46:53.450
over Bluetooth.

00:46:53.450 --> 00:46:56.430
And we want to extend it
to use Wi-Fi Direct.

00:46:56.430 --> 00:46:58.310
The main reason we haven't done
so now is that this is

00:46:58.310 --> 00:46:59.610
not a standard yet.

00:46:59.610 --> 00:47:01.520
So we want to make sure that
when we implement it, we want

00:47:01.520 --> 00:47:03.470
to implement a standard, so that
it actually works across

00:47:03.470 --> 00:47:04.480
all of the devices.

00:47:04.480 --> 00:47:06.510
So we want to make sure, you
know, you don't have to worry

00:47:06.510 --> 00:47:08.515
about this, it should
just work.

00:47:08.515 --> 00:47:11.020
And if we do implement Wi-Fi
Direct, we'll just hide it

00:47:11.020 --> 00:47:11.990
behind the same API.

00:47:11.990 --> 00:47:13.710
So to you guys, it will
just be transparent.

00:47:13.710 --> 00:47:14.960
It'll just work.

00:47:17.550 --> 00:47:20.490
Something else really important,
which I hear a lot,

00:47:20.490 --> 00:47:21.530
NFC uses a lot of power.

00:47:21.530 --> 00:47:22.680
You see this on a lot
of forums, or

00:47:22.680 --> 00:47:24.400
people say that it does.

00:47:24.400 --> 00:47:26.686
So first of all, when you phone
is off or when your

00:47:26.686 --> 00:47:28.270
phone is locked, the NFC

00:47:28.270 --> 00:47:29.670
controller is not even enabled.

00:47:29.670 --> 00:47:31.240
So at that point, it's
not really consuming

00:47:31.240 --> 00:47:32.340
any power at all.

00:47:32.340 --> 00:47:35.200
Even when your phone is
unlocked, and so we enable the

00:47:35.200 --> 00:47:37.510
NFC controller, still, only,
power is minimal.

00:47:37.510 --> 00:47:39.690
It's like, compared to all the
rest, it's, like, 0.5% of

00:47:39.690 --> 00:47:41.050
battery usage.

00:47:41.050 --> 00:47:42.980
So it doesn't really
amount to anything.

00:47:42.980 --> 00:47:44.420
You can safely leave it on.

00:47:44.420 --> 00:47:46.290
Because if you turn it off,
it really breaks the magic

00:47:46.290 --> 00:47:48.040
because then you will have to
go into the menu settings

00:47:48.040 --> 00:47:50.850
again and enable NFC to
make stuff happen.

00:47:50.850 --> 00:47:52.290
It's much easier to
just leave it on.

00:47:52.290 --> 00:47:55.330
You really won't notice
in your battery usage.

00:47:55.330 --> 00:47:57.600
Also, NFC controllers in the
future will use less power, so

00:47:57.600 --> 00:48:00.710
I think it's getting
better and better.

00:48:00.710 --> 00:48:02.440
So summarizing what we
talked about today.

00:48:02.440 --> 00:48:03.770
The first thing is
really important,

00:48:03.770 --> 00:48:04.730
NFC is here to stay.

00:48:04.730 --> 00:48:08.340
A lot of people discussed this
also, when are the NFC devices

00:48:08.340 --> 00:48:09.170
coming out.

00:48:09.170 --> 00:48:10.060
It's happening right now.

00:48:10.060 --> 00:48:13.080
We see one million NFC devices
activated every week, which is

00:48:13.080 --> 00:48:14.090
a huge number.

00:48:14.090 --> 00:48:16.570
There is a lot of growth
in that number as well.

00:48:16.570 --> 00:48:18.810
The second thing we wanted to
share with you is that adding

00:48:18.810 --> 00:48:21.280
NFC to your applications
is very easy.

00:48:21.280 --> 00:48:24.130
You just add a few lines of
code, and automatically, the

00:48:24.130 --> 00:48:26.600
operating system will take care
of the rest, sharing it,

00:48:26.600 --> 00:48:28.250
sending it across NFC,
and dealing with it

00:48:28.250 --> 00:48:29.380
on the other side.

00:48:29.380 --> 00:48:31.570
It's so easy, and it really adds
value to your application

00:48:31.570 --> 00:48:33.470
to do stuff like this.

00:48:33.470 --> 00:48:36.070
And finally, the new J API
is really awesome.

00:48:36.070 --> 00:48:38.900
I mean, you just have to write
a few lines of code, and you

00:48:38.900 --> 00:48:41.960
can automatically send across
any file on the file system or

00:48:41.960 --> 00:48:44.450
any data from a content provider
to the other side,

00:48:44.450 --> 00:48:47.150
not having to worry about any
pairing or setup or--

00:48:47.150 --> 00:48:49.060
just bring the devices together,
tap, and the file

00:48:49.060 --> 00:48:50.550
automatically gets
sent across.

00:48:50.550 --> 00:48:52.560
It's awesome.

00:48:52.560 --> 00:48:54.390
All right, I'm going to hand off
to Robert, who's going to

00:48:54.390 --> 00:48:56.060
talk to you about a Beam file.

00:48:56.060 --> 00:48:59.150
ROBERT: Yeah so I guess I should
add just a quick legal

00:48:59.150 --> 00:49:01.420
disclaimer, this is not
available if you're watching

00:49:01.420 --> 00:49:03.600
the repeat on YouTube.

00:49:03.600 --> 00:49:06.930
But for those in the room, who's
got the Google I/O app?

00:49:06.930 --> 00:49:08.080
Most of you, I hope.

00:49:08.080 --> 00:49:10.050
We actually put a little Easter
egg-- thank you we've

00:49:10.050 --> 00:49:11.110
already got a winner
down there--

00:49:11.110 --> 00:49:14.710
we put a little Easter egg
for you in the app.

00:49:14.710 --> 00:49:20.842
So if you grab your app, and
you beam, you will add an

00:49:20.842 --> 00:49:24.930
item, sorry, there, you will see
an extra new item in your

00:49:24.930 --> 00:49:27.930
menu which says, show Android
Beam Easter egg.

00:49:27.930 --> 00:49:30.590
Which looks kind of like that.

00:49:30.590 --> 00:49:34.690
And if you come up and see us
afterwards, we'll give you a

00:49:34.690 --> 00:49:37.940
limited-edition Beam pin.

00:49:37.940 --> 00:49:40.020
We have just about enough for
everyone, but they are only

00:49:40.020 --> 00:49:42.660
available here today, so
do come and grab them.

00:49:42.660 --> 00:49:44.370
We just wanted to make sure that
everyone had tried Beam

00:49:44.370 --> 00:49:45.110
and everyone had used it.

00:49:45.110 --> 00:49:47.060
So it was just a bit of
fun for today, so

00:49:47.060 --> 00:49:48.640
sorry YouTube viewers.

00:49:48.640 --> 00:49:51.200
Come and find me at my
desk, and maybe I'll

00:49:51.200 --> 00:49:52.960
have some pins left.

00:49:52.960 --> 00:49:54.460
So yeah, that wraps it up.

00:49:54.460 --> 00:50:01.120
We want to move on to Q&amp;A. So
there we go, there's just a

00:50:01.120 --> 00:50:03.010
reminder so that you
can see that.

00:50:03.010 --> 00:50:08.170
And yeah, let's take any
questions about Beam or NFC.

00:50:08.170 --> 00:50:10.126
And thanks very much for
listening, for those of you

00:50:10.126 --> 00:50:10.940
that don't have questions.

00:50:10.940 --> 00:50:11.630
There are microphones.

00:50:11.630 --> 00:50:14.440
It's probably easier if you
come and grab a mic.

00:50:14.440 --> 00:50:18.130
And we'll do we can to answer.

00:50:18.130 --> 00:50:18.460
Thank you.

00:50:18.460 --> 00:50:19.260
AUDIENCE: I have a question
about the--

00:50:19.260 --> 00:50:21.760
[APPLAUSE]

00:50:21.760 --> 00:50:23.010
ROBERT: Thanks.

00:50:25.760 --> 00:50:27.760
Oh, very orderly queue-forming,
thank you.

00:50:27.760 --> 00:50:29.380
OK, first question.

00:50:29.380 --> 00:50:31.530
AUDIENCE: Do the Bluetooth
radios have to be on for the

00:50:31.530 --> 00:50:32.630
Beam APIs to work?

00:50:32.630 --> 00:50:33.390
MARTIN: That's a
great question.

00:50:33.390 --> 00:50:34.985
Actually, we do turn it on
for you automatically.

00:50:34.985 --> 00:50:37.350
ROBERT: Could you repeat it to
make sure everybody can hear?

00:50:37.350 --> 00:50:37.930
MARTIN: Yeah.

00:50:37.930 --> 00:50:39.825
So the question was, does
Bluetooth already need to be

00:50:39.825 --> 00:50:42.180
on for the APIs to work?

00:50:42.180 --> 00:50:43.210
That's actually not required.

00:50:43.210 --> 00:50:45.230
So if Bluetooth is off at the
moment of the transfer, we

00:50:45.230 --> 00:50:46.800
automatically enable
it for you.

00:50:46.800 --> 00:50:48.300
When the transfer is done
we turn it off again.

00:50:48.300 --> 00:50:51.640
So you don't have to worry about
turning Bluetooth on

00:50:51.640 --> 00:50:52.360
before the transfer.

00:50:52.360 --> 00:50:53.400
It just works.

00:50:53.400 --> 00:50:54.860
ROBERT: We take care of it.

00:50:54.860 --> 00:50:55.440
Next one, hi.

00:50:55.440 --> 00:50:57.970
AUDIENCE: Is there any way to
have Bluetooth as a backup if

00:50:57.970 --> 00:50:59.220
there is not NFC?

00:51:01.670 --> 00:51:03.790
ROBERT: So is there any way to
have Bluetooth as a backup if

00:51:03.790 --> 00:51:05.200
there isn't NFC?

00:51:05.200 --> 00:51:07.940
ROBERT: Or use some of the same
APIs without having to

00:51:07.940 --> 00:51:10.360
recode it for a separate
Bluetooth.

00:51:10.360 --> 00:51:11.040
MARTIN: Not right now.

00:51:11.040 --> 00:51:12.750
I think in case of that, you
would have to use the normal

00:51:12.750 --> 00:51:14.915
actions and the APIs to
get the data across.

00:51:17.505 --> 00:51:19.260
ROBERT: Hi, next one.

00:51:19.260 --> 00:51:19.540
AUDIENCE: Hi.

00:51:19.540 --> 00:51:23.950
Underlying that, are you using
the 2.1 insecure pair in the

00:51:23.950 --> 00:51:24.470
background?

00:51:24.470 --> 00:51:29.040
Or is there some sort of PIN
happening in the background?

00:51:29.040 --> 00:51:30.220
MARTIN: This is the
implementation of the

00:51:30.220 --> 00:51:34.710
Bluetooth Secure Simple
Pairing setup.

00:51:34.710 --> 00:51:35.040
ROBERT: Thanks.

00:51:35.040 --> 00:51:37.180
MARTIN: Thank you.

00:51:37.180 --> 00:51:38.950
AUDIENCE: The Bluetooth
pairing is fantastic.

00:51:38.950 --> 00:51:42.960
Is it possible to establish a
serial-style connection, and

00:51:42.960 --> 00:51:44.650
do you guys provide any
example code for

00:51:44.650 --> 00:51:46.350
that in the new SDK?

00:51:46.350 --> 00:51:47.940
MARTIN: Not with the
current API.

00:51:47.940 --> 00:51:50.560
So right now we just allow you
to automatically set up OBEX

00:51:50.560 --> 00:51:51.570
push for file transfer.

00:51:51.570 --> 00:51:53.530
But it doesn't allow any
other sockets yet.

00:51:53.530 --> 00:51:57.110
But it's something we may
look into in the future.

00:51:57.110 --> 00:51:57.560
AUDIENCE: Thank you.

00:51:57.560 --> 00:51:58.200
AUDIENCE: Hi.

00:51:58.200 --> 00:52:00.900
We already added NFC
in our application.

00:52:00.900 --> 00:52:03.130
You can test on Beautiful
Widgets and Plume.

00:52:03.130 --> 00:52:09.100
But we have to add the intent
action, NFC_DISCOVERED.

00:52:09.100 --> 00:52:15.080
Is there a way to share a normal
ACTION_VIEW intent?

00:52:15.080 --> 00:52:17.780
MARTIN: So for NDEF, there isn't
because NDEF is a very

00:52:17.780 --> 00:52:20.170
specific payload format.

00:52:20.170 --> 00:52:21.940
So this just works for the
new Bluetooth APIs.

00:52:21.940 --> 00:52:23.190
ROBERT: Bless you.

00:52:25.790 --> 00:52:27.040
We have rules.

00:52:30.460 --> 00:52:32.020
MARTIN: Should we move the
Q&amp;A somewhere else?

00:52:32.020 --> 00:52:34.757
ROBERT: Yeah keep going with the
Q&amp;A. And if you kind of go

00:52:34.757 --> 00:52:37.920
this way to do pins because we
want to do Q&amp;A. Because this

00:52:37.920 --> 00:52:39.940
is important, and we can
do pins outside.

00:52:39.940 --> 00:52:41.160
So please keep the
questions going.

00:52:41.160 --> 00:52:43.370
And try and stay quiet
down in front, so the

00:52:43.370 --> 00:52:44.640
Q&amp;A guys get their--

00:52:44.640 --> 00:52:48.790
AUDIENCE: Sure, my question's
about Beam and compatibility

00:52:48.790 --> 00:52:50.840
with non-Android devices.

00:52:50.840 --> 00:52:54.360
Is that possible?

00:52:54.360 --> 00:52:57.110
Are those just NDEF messages
standard, NDEF messages coming

00:52:57.110 --> 00:52:59.310
across to establish the
Beam connection?

00:52:59.310 --> 00:53:00.670
MARTIN: That's a
good question.

00:53:00.670 --> 00:53:03.110
So we implemented all of the NFC
Forum standards for each

00:53:03.110 --> 00:53:03.670
of these things.

00:53:03.670 --> 00:53:05.790
So NDEF is one of these
standards, but also, for doing

00:53:05.790 --> 00:53:08.620
the actual data transfer,
there's a protocol called

00:53:08.620 --> 00:53:11.480
SNEP, which is Simple NDEF
Exchange Protocol, which

00:53:11.480 --> 00:53:12.885
allows you to send across
NDEF messages.

00:53:12.885 --> 00:53:15.480
And this is a standardized
protocol as well.

00:53:15.480 --> 00:53:17.350
So all of these devices that
implement this protocol, it's

00:53:17.350 --> 00:53:19.410
an open protocol, will be
able to receive beams.

00:53:19.410 --> 00:53:22.190
In effect, we've seen Beam
already interplay well with,

00:53:22.190 --> 00:53:24.060
for example, RIM devices.

00:53:24.060 --> 00:53:25.480
And the same goes for the
Bluetooth pairing.

00:53:25.480 --> 00:53:28.860
There is a standard for that by
NFC Forum as well, so, for

00:53:28.860 --> 00:53:30.540
example, passing on
a Mac address.

00:53:30.540 --> 00:53:33.150
So everybody who implements the
standard should be able to

00:53:33.150 --> 00:53:35.900
get this Bluetooth connection
going and send data across.

00:53:35.900 --> 00:53:38.020
So it's all based
on standards.

00:53:38.020 --> 00:53:41.560
AUDIENCE: So a follow-up
question to that is, you talk

00:53:41.560 --> 00:53:44.650
about the seamless experience
of doing a

00:53:44.650 --> 00:53:47.100
beam between two devices.

00:53:47.100 --> 00:53:51.310
And it's my feeling that tapping
the screen is really

00:53:51.310 --> 00:53:54.680
an extra piece of friction
that's not necessary, from

00:53:54.680 --> 00:53:57.280
being that you wouldn't
necessarily put two devices

00:53:57.280 --> 00:54:00.010
that close in proximity to
each other if you didn't

00:54:00.010 --> 00:54:03.310
intend to exchange data.

00:54:03.310 --> 00:54:06.600
And I'm just wondering if that's
something that could be

00:54:06.600 --> 00:54:11.200
removed or is being considered
to be configurable, at least.

00:54:11.200 --> 00:54:12.470
MARTIN: Yeah, I think
the short-range

00:54:12.470 --> 00:54:13.260
stage is a bit there.

00:54:13.260 --> 00:54:15.610
If you play with a Nexus 7 and a
different phone, you'll find

00:54:15.610 --> 00:54:18.110
that you actually need to be
careful with the positioning

00:54:18.110 --> 00:54:19.260
to make Beam work.

00:54:19.260 --> 00:54:21.160
So in most cases, if you put
something on top, you actually

00:54:21.160 --> 00:54:22.130
won't see any beam.

00:54:22.130 --> 00:54:24.526
You just need to put it
in the right spot.

00:54:24.526 --> 00:54:26.560
But we could think of more
advanced stuff, like if we

00:54:26.560 --> 00:54:28.430
detect that there's an NFC
connection, we could, for

00:54:28.430 --> 00:54:30.380
example, disable the touch
screen so it doesn't react

00:54:30.380 --> 00:54:32.010
anymore to any input events.

00:54:32.010 --> 00:54:34.295
So that's something that we
may consider in that case.

00:54:34.295 --> 00:54:35.545
But that's not currently done.

00:54:38.840 --> 00:54:42.000
AUDIENCE: In one of your demos,
you showed, basically,

00:54:42.000 --> 00:54:45.790
Beam or NFC muting one
of your test devices.

00:54:45.790 --> 00:54:49.110
So you had a tag that muted
the phones' notifications.

00:54:49.110 --> 00:54:54.580
I'm wondering if there's any
need security considerations

00:54:54.580 --> 00:54:55.220
going into that.

00:54:55.220 --> 00:54:58.810
Like, maybe somebody put a tag
somewhere that mutes phones,

00:54:58.810 --> 00:55:00.160
and you didn't really
want that to happen.

00:55:00.160 --> 00:55:03.215
Is there going to be an API at
some point that says, you

00:55:03.215 --> 00:55:05.350
know, do you really
want to do this?

00:55:05.350 --> 00:55:07.580
MARTIN: I should point out that
these tag actions only

00:55:07.580 --> 00:55:09.130
work if you have the application
installed

00:55:09.130 --> 00:55:09.780
to deal with them.

00:55:09.780 --> 00:55:11.400
So that's already a bit.

00:55:11.400 --> 00:55:12.960
And for this specific
application, I know they

00:55:12.960 --> 00:55:14.560
actually pop up a notification
saying that

00:55:14.560 --> 00:55:16.160
they activated something.

00:55:16.160 --> 00:55:18.415
So you do have a clue that
something is ongoing.

00:55:18.415 --> 00:55:20.180
So I think it's a careful
trade-off, right.

00:55:20.180 --> 00:55:23.750
Maybe you don't want to ruin the
magic by allowing people

00:55:23.750 --> 00:55:24.350
to confirm.

00:55:24.350 --> 00:55:27.190
So I think, in most use cases,
the trade-off is right.

00:55:27.190 --> 00:55:28.380
You'll see something
is going on.

00:55:28.380 --> 00:55:30.710
And if it's wrong, I think
you'll catch wind of it.

00:55:30.710 --> 00:55:32.230
ROBERT: How's the Q&amp;A
going, Martin?

00:55:32.230 --> 00:55:33.220
I'm a bit tied up here.

00:55:33.220 --> 00:55:33.720
MARTIN: Pretty good.

00:55:33.720 --> 00:55:34.240
ROBERT: Cool.

00:55:34.240 --> 00:55:35.800
MARTIN: Lots of queuing here.

00:55:35.800 --> 00:55:39.440
ROBERT: So guys, I'm going
to change tacks slightly.

00:55:39.440 --> 00:55:42.700
I'm assuming I can trust
all of you, right?

00:55:42.700 --> 00:55:44.690
Don't take a handful of pins.

00:55:44.690 --> 00:55:45.770
Just take one.

00:55:45.770 --> 00:55:48.060
And, please, if you do an take
more than one, because you

00:55:48.060 --> 00:55:52.640
can't be trusted, you must beam
someone else who hasn't

00:55:52.640 --> 00:55:53.980
beamed and give them
one of the pins.

00:55:53.980 --> 00:55:55.300
How does that sound
for a deal?

00:55:55.300 --> 00:55:56.280
Is that fair?

00:55:56.280 --> 00:55:57.880
So if you take two, make sure
you give one to someone

00:55:57.880 --> 00:56:00.130
tonight, spread the love,
and let's do Q&amp;A.

00:56:00.130 --> 00:56:01.960
So I'm going to put
the pins here.

00:56:01.960 --> 00:56:04.480
It will be a free-for-all.

00:56:04.480 --> 00:56:06.690
Please don't crush each other,
we value every one of our

00:56:06.690 --> 00:56:08.440
developers, we can't
afford to lose you.

00:56:08.440 --> 00:56:09.690
MARTIN: There's enough
for everybody.

00:56:11.952 --> 00:56:14.300
AUDIENCE: Hi, I've got a
very related question.

00:56:14.300 --> 00:56:17.040
We're working on secure payments
and was wondering if

00:56:17.040 --> 00:56:20.040
you have any security
requirements for NFC

00:56:20.040 --> 00:56:20.930
specifically.

00:56:20.930 --> 00:56:22.160
MARTIN: Sorry, could you
repeat the question?

00:56:22.160 --> 00:56:25.380
AUDIENCE: We're working on
secure payments and was

00:56:25.380 --> 00:56:28.900
wondering if Google has
security requirements

00:56:28.900 --> 00:56:30.670
pertaining to NFC side.

00:56:30.670 --> 00:56:33.400
MARTIN: So I think what we'd
have you do is, it depends on

00:56:33.400 --> 00:56:35.040
how you implement
the payments.

00:56:35.040 --> 00:56:37.370
If you wanted to implement
it over peer-to-peer, for

00:56:37.370 --> 00:56:39.350
example, the Android Beam
protocol that we have, you

00:56:39.350 --> 00:56:40.860
need to do some encryption
of yourself.

00:56:40.860 --> 00:56:44.950
Because by default the channel
is unencrypted, right?

00:56:44.950 --> 00:56:46.520
So if it's your own application,
I mean, Google

00:56:46.520 --> 00:56:47.750
doesn't set any requirements.

00:56:47.750 --> 00:56:49.620
But I think it would be wise
to actually encrypt your

00:56:49.620 --> 00:56:52.360
traffic yourself and do some
form of identification to make

00:56:52.360 --> 00:56:55.060
sure that nobody can actually
eavesdrop it.

00:56:55.060 --> 00:56:56.990
I mean, it's really hard because
of the close range,

00:56:56.990 --> 00:56:59.440
but still I think it's a good
idea to put some kind of

00:56:59.440 --> 00:57:03.535
encryption and authentication
in these sensitive cases.

00:57:03.535 --> 00:57:03.940
AUDIENCE: OK.

00:57:03.940 --> 00:57:06.106
MARTIN: Does that answer
your question, or--

00:57:06.106 --> 00:57:06.520
AUDIENCE: Yep.

00:57:06.520 --> 00:57:08.030
MARTIN: OK.

00:57:08.030 --> 00:57:10.220
AUDIENCE: Hi, you showed in
one of the demos where you

00:57:10.220 --> 00:57:14.150
were able to write multiple
actions onto a passive tag.

00:57:14.150 --> 00:57:18.070
Does that work with passive tags
from any manufacturer and

00:57:18.070 --> 00:57:20.830
of any type, or is there a
specific manufacturer that

00:57:20.830 --> 00:57:22.230
supports this?

00:57:22.230 --> 00:57:25.150
MARTIN: So the question was, if
the task launch demo that I

00:57:25.150 --> 00:57:27.520
showed that has multiple
actions, if it works will all

00:57:27.520 --> 00:57:28.750
of the tags.

00:57:28.750 --> 00:57:31.420
So Android supports all of the
standard NFC forum tag types,

00:57:31.420 --> 00:57:34.380
which is tag type 1 to 4,
if you're familiar.

00:57:34.380 --> 00:57:36.370
So if you buy any of
these tags, it

00:57:36.370 --> 00:57:37.050
should work with that.

00:57:37.050 --> 00:57:39.120
So they come in different sizes,
but most of the popular

00:57:39.120 --> 00:57:40.470
tag types are supported.

00:57:40.470 --> 00:57:42.950
AUDIENCE: OK, you can write
multiple actions to any of the

00:57:42.950 --> 00:57:43.740
standards supported.

00:57:43.740 --> 00:57:47.790
MARTIN: Any of the standard
tags will work.

00:57:47.790 --> 00:57:51.650
AUDIENCE: Hi, the Bluetooth
pairing, the connection

00:57:51.650 --> 00:57:54.710
handover that you just showed,
is it NFC Forum

00:57:54.710 --> 00:57:55.590
standard-based?

00:57:55.590 --> 00:57:57.490
Does it follow the NFC
Forum standard?

00:57:57.490 --> 00:57:59.190
MARTIN: Yeah so it's based on
the NFC Forum connection

00:57:59.190 --> 00:58:02.250
handover specification, which
standardizes the way the MAC

00:58:02.250 --> 00:58:04.340
address and the PIN
is exchanged.

00:58:04.340 --> 00:58:06.890
ROBERT: We really hope that
other platforms will pick up

00:58:06.890 --> 00:58:09.110
and do exactly the same thing
because that's just going to

00:58:09.110 --> 00:58:10.500
make it easy for users.

00:58:10.500 --> 00:58:11.820
AUDIENCE: OK, great.

00:58:11.820 --> 00:58:16.010
And when are you going to open
card emulation to developers,

00:58:16.010 --> 00:58:17.460
at any point?

00:58:17.460 --> 00:58:20.120
MARTIN: Yeah, it's a popular
question still.

00:58:20.120 --> 00:58:22.725
We just haven't found the
right way to expose card

00:58:22.725 --> 00:58:24.340
emulation and APIs
to our users.

00:58:24.340 --> 00:58:26.960
I think, when we do, we want
to have a consistent set of

00:58:26.960 --> 00:58:28.270
APIs and experiences.

00:58:28.270 --> 00:58:31.040
So one of the issues with card
emulation is that not even all

00:58:31.040 --> 00:58:32.790
devices have the secure
elements.

00:58:32.790 --> 00:58:34.580
Which, I think, makes
it harder.

00:58:34.580 --> 00:58:37.200
And also, it has a limited
amount of storage.

00:58:37.200 --> 00:58:39.200
So that means, for example, if
your storage is full, and you

00:58:39.200 --> 00:58:41.050
want to do some exchange, you
actually need to remove

00:58:41.050 --> 00:58:43.030
something and stuff something
new in there.

00:58:43.030 --> 00:58:45.500
And it basically destroys
the entire interaction.

00:58:45.500 --> 00:58:47.900
So I think, for the current
use cases that we have,

00:58:47.900 --> 00:58:49.960
Android Beam is actually a
really promising direction.

00:58:49.960 --> 00:58:52.840
And card emulation I see more as
something to interact with

00:58:52.840 --> 00:58:55.340
the legacy reader infrastructure
that we have in

00:58:55.340 --> 00:58:55.880
place, right?

00:58:55.880 --> 00:58:58.230
That's really what
it's good for.

00:58:58.230 --> 00:59:01.055
But right now, because the
experience you have with card

00:59:01.055 --> 00:59:03.630
emulation is very fragmented,
it's hard to get it to work,

00:59:03.630 --> 00:59:06.260
we don't want to offer any APIs
because that would just

00:59:06.260 --> 00:59:08.040
get users frustrated that it
doesn't work sometimes,

00:59:08.040 --> 00:59:09.060
sometimes it does.

00:59:09.060 --> 00:59:10.892
It's hard to get it right.

00:59:10.892 --> 00:59:12.142
AUDIENCE: All right,
thank you.

00:59:14.660 --> 00:59:15.380
AUDIENCE: Hi.

00:59:15.380 --> 00:59:18.220
We work for a ticketing company,
and integrating the

00:59:18.220 --> 00:59:20.150
NFC check-in is really
something we

00:59:20.150 --> 00:59:21.840
are interested in.

00:59:21.840 --> 00:59:24.710
The thing is, the Beam checking
and this star field

00:59:24.710 --> 00:59:27.780
effect is kind of something
that is

00:59:27.780 --> 00:59:29.270
slowing down the check-in.

00:59:29.270 --> 00:59:33.160
So are you guys considering
giving us the ability to just

00:59:33.160 --> 00:59:36.830
get rid of it, or what are
the plans on that?

00:59:36.830 --> 00:59:38.040
MARTIN: Good question, it's
definitely something we're

00:59:38.040 --> 00:59:38.640
looking into.

00:59:38.640 --> 00:59:41.390
So the question was, if we can
speed up the beam process for

00:59:41.390 --> 00:59:43.730
ticketing, or you really just
want to tap something and walk

00:59:43.730 --> 00:59:46.840
on without having
to tap anything.

00:59:46.840 --> 00:59:48.760
Yeah, we will definitely
look into this

00:59:48.760 --> 00:59:49.450
for the next release.

00:59:49.450 --> 00:59:51.150
As far as I'm concerned, it's
part of the two-way

00:59:51.150 --> 00:59:54.180
communication protocol
and customizing Beam.

00:59:54.180 --> 00:59:56.200
So there may be a use case
where, actually, you just tap,

00:59:56.200 --> 00:59:58.020
and immediately the data link
is established, and your

00:59:58.020 --> 00:59:59.770
application can deal with it.

00:59:59.770 --> 01:00:01.480
So we know it's an important use
case, and we'll definitely

01:00:01.480 --> 01:00:03.700
look into future APIs
to do just that.

01:00:03.700 --> 01:00:04.950
AUDIENCE: Awesome, thanks.

01:00:09.020 --> 01:00:10.880
AUDIENCE: Again, sort of
a security question.

01:00:10.880 --> 01:00:13.310
The 5 centimeters, is that
reliable, or are there ways,

01:00:13.310 --> 01:00:15.780
you know, the Pringles can, to
get around that and read it

01:00:15.780 --> 01:00:18.160
more remotely?

01:00:18.160 --> 01:00:19.250
AUDIENCE: It's really hard
to get around it.

01:00:19.250 --> 01:00:21.490
I guess if you have a really
sensitive directional antenna,

01:00:21.490 --> 01:00:24.020
and you would be able to aim it
right at it, then it could

01:00:24.020 --> 01:00:24.620
be possible.

01:00:24.620 --> 01:00:27.640
But I think it's, in practice,
really hard.

01:00:27.640 --> 01:00:29.530
And also, most of the use cases,
you just have your

01:00:29.530 --> 01:00:31.340
phone in your pocket, right?

01:00:31.340 --> 01:00:32.930
So at that point NFC
is not enabled.

01:00:32.930 --> 01:00:35.020
So it's really hard to
get the data from it.

01:00:35.020 --> 01:00:37.600
So I think, in practice, you
could get a larger range if

01:00:37.600 --> 01:00:39.250
you have really expensive
equipment, but it's not

01:00:39.250 --> 01:00:41.120
something to worry
about in general.

01:00:41.120 --> 01:00:43.560
AUDIENCE: OK, and then sort
of a second question.

01:00:43.560 --> 01:00:47.750
Bluetooth low energy,
do Android phones

01:00:47.750 --> 01:00:48.760
also support that?

01:00:48.760 --> 01:00:53.540
And maybe the Nordic 2.4
gigahertz protocol

01:00:53.540 --> 01:00:55.840
that's used by Fitbit?

01:00:55.840 --> 01:00:56.580
MARTIN: I'm not sure
about what our

01:00:56.580 --> 01:00:58.580
plans are for low energy.

01:00:58.580 --> 01:01:01.100
I think it's different, compared
to NFC, in the sense

01:01:01.100 --> 01:01:03.950
that Bluetooth low energy
still has a large range.

01:01:03.950 --> 01:01:05.930
So you still pick up multiple
devices, or you still have to

01:01:05.930 --> 01:01:08.050
select the device that you want
to interact with, right?

01:01:08.050 --> 01:01:11.040
And the great thing about NFC
is you can tap something to

01:01:11.040 --> 01:01:12.380
determine that you want
to interact with it.

01:01:12.380 --> 01:01:14.650
So I think that's the main
difference between Bluetooth

01:01:14.650 --> 01:01:16.200
LE and NFC at this point.

01:01:16.200 --> 01:01:18.400
ROBERT: All of those radio
technologies can combine

01:01:18.400 --> 01:01:19.790
together to do really
interesting stuff.

01:01:19.790 --> 01:01:22.300
And I think that's one of the
great things about having an

01:01:22.300 --> 01:01:25.490
open platform is can weave use
cases, and create new things

01:01:25.490 --> 01:01:27.250
that no one's ever thought
of by using

01:01:27.250 --> 01:01:27.970
those things together.

01:01:27.970 --> 01:01:31.450
So we don't see one of those
technologies prevalent over

01:01:31.450 --> 01:01:31.970
the others.

01:01:31.970 --> 01:01:33.660
We want them all available
to you guys.

01:01:33.660 --> 01:01:36.720
We've got an API so that
you can make magic.

01:01:36.720 --> 01:01:40.996
AUDIENCE: Does or will Chromebug
support NFC?

01:01:40.996 --> 01:01:41.960
MARTIN: I don't think they do.

01:01:41.960 --> 01:01:44.430
ROBERT: I don't think Chromebugs
do support--

01:01:44.430 --> 01:01:46.570
I don't think there are any that
have been announced to

01:01:46.570 --> 01:01:49.520
date that support NFC.

01:01:49.520 --> 01:01:53.420
But it's great to put a tag on
your laptop, and then you can

01:01:53.420 --> 01:01:56.265
do all sorts of things you
can use that, so it's a

01:01:56.265 --> 01:01:57.984
good use for a tag.

01:01:57.984 --> 01:01:58.940
Hi.

01:01:58.940 --> 01:01:59.970
AUDIENCE: Hi.

01:01:59.970 --> 01:02:04.440
For devices to support the
Bluetooth pairing via NFC, do

01:02:04.440 --> 01:02:08.380
Bluetooth device driver
need to be updated?

01:02:08.380 --> 01:02:10.450
MARTIN: So what we depend on,
basically, is the existing

01:02:10.450 --> 01:02:12.810
protocol stack in Android, the
OPP protocol stack for

01:02:12.810 --> 01:02:16.680
Bluetooth, because it uses
the OPP protocol.

01:02:16.680 --> 01:02:18.990
I think, actually, most
OEMS take the

01:02:18.990 --> 01:02:20.230
stack as is from Android.

01:02:20.230 --> 01:02:23.920
I don't think they have, like,
a custom OPP stack in there.

01:02:23.920 --> 01:02:26.675
But OEM vendors that do replace
the NFC stack, they

01:02:26.675 --> 01:02:28.590
will actually need to
write some code that

01:02:28.590 --> 01:02:29.550
allows them to do this.

01:02:29.550 --> 01:02:32.320
The main thing is basically
about bypassing the UI because

01:02:32.320 --> 01:02:34.220
normally, when you do Bluetooth
OPP file transfer,

01:02:34.220 --> 01:02:36.060
you get a lot of confirmations,
a lot of

01:02:36.060 --> 01:02:38.640
changes that you
need to make--

01:02:38.640 --> 01:02:40.450
I mean, a lot of confirmations
you need to do.

01:02:40.450 --> 01:02:42.630
So the main thing, really, that
we changed in OPP is that

01:02:42.630 --> 01:02:45.110
to determine if the transfer
came from NFC and if it was

01:02:45.110 --> 01:02:47.890
NFC-initiated, don't do all of
this confirmation, but just

01:02:47.890 --> 01:02:49.400
make the magic happen.

01:02:49.400 --> 01:02:51.560
So those are in there--

01:02:51.560 --> 01:02:52.600
ROBERT: Sorry, we're actually
out of time.

01:02:52.600 --> 01:02:54.990
So we'll take the rest of the
questions up here, so we'll

01:02:54.990 --> 01:02:56.110
take them offline.

01:02:56.110 --> 01:02:57.100
Thanks very much.

01:02:57.100 --> 01:02:58.790
MARTIN: We'll also be in office
hours, by the way.

01:02:58.790 --> 01:02:59.090
ROBERT: Sorry?

01:02:59.090 --> 01:03:00.040
MARTIN: We'll be in
office hours.

01:03:00.040 --> 01:03:02.290
ROBERT: We will be in office
hours, yeah and in bars all

01:03:02.290 --> 01:03:04.040
over San Francisco.

01:03:04.040 --> 01:03:06.200
But yeah, thanks for coming to
the "Up Close and Personal"

01:03:06.200 --> 01:03:07.280
with Android NFC.

01:03:07.280 --> 01:03:08.872
And go make magic with
Android Beam.

01:03:08.872 --> 01:03:10.122
Thanks, guys.

