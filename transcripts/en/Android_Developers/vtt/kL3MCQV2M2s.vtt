WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.355
[MUSIC PLAYING]

00:00:06.600 --> 00:00:08.720
Writing good tests
can be a challenge.

00:00:08.720 --> 00:00:11.580
And writing reliable UI
tests, it's substantially more

00:00:11.580 --> 00:00:14.560
difficult. User interfaces
are asynchronous,

00:00:14.560 --> 00:00:16.640
driven by events,
transitions, and data

00:00:16.640 --> 00:00:18.660
loaded from background threads.

00:00:18.660 --> 00:00:21.310
Coding around that without
any help from a UI testing

00:00:21.310 --> 00:00:24.460
framework would require a lot
of boilerplate and handling

00:00:24.460 --> 00:00:25.950
of edge cases.

00:00:25.950 --> 00:00:29.472
On the other hand, say I give
you a phone with a sample app

00:00:29.472 --> 00:00:31.180
and tell you to test
a feature of the app

00:00:31.180 --> 00:00:32.570
that I just implemented.

00:00:32.570 --> 00:00:35.270
For example, please make
sure that saving a new note

00:00:35.270 --> 00:00:37.250
in my note-taking app works.

00:00:37.250 --> 00:00:38.140
What would you do?

00:00:38.140 --> 00:00:41.100
Well, I'm pretty sure that you
would look for a Save button.

00:00:41.100 --> 00:00:43.070
Once you've found
it, you'd tap on it

00:00:43.070 --> 00:00:45.190
and then check if the note
is present in the list

00:00:45.190 --> 00:00:46.440
of saved notes.

00:00:46.440 --> 00:00:49.200
That's actually a pretty
good scenario for a UI test,

00:00:49.200 --> 00:00:51.610
and it's simple to
understand for a person.

00:00:51.610 --> 00:00:54.780
But how would we go about
expressing it in code?

00:00:54.780 --> 00:00:57.080
The Espresso framework
was created specifically

00:00:57.080 --> 00:00:59.120
for this purpose--
to enable developers

00:00:59.120 --> 00:01:02.070
to write UI tests that are
concise, reliable, and using

00:01:02.070 --> 00:01:03.530
a fluent API.

00:01:03.530 --> 00:01:06.750
And most importantly, Espresso
takes care of synchronization

00:01:06.750 --> 00:01:09.740
with any UI events so
that, in most cases,

00:01:09.740 --> 00:01:12.310
you don't have to worry about
any view state transitions

00:01:12.310 --> 00:01:14.580
and implementation details.

00:01:14.580 --> 00:01:17.560
Looking back at the simple
UI test we just defined,

00:01:17.560 --> 00:01:19.660
we can see that the basic
flow when using Espresso

00:01:19.660 --> 00:01:22.940
is exactly the same as in
our real-life scenario.

00:01:22.940 --> 00:01:25.610
First, find a view using
some matching rules.

00:01:25.610 --> 00:01:27.390
Then perform an action on it.

00:01:27.390 --> 00:01:30.440
And finally, verify
the resulting state.

00:01:30.440 --> 00:01:34.050
Before I go any further and
start writing actual test code,

00:01:34.050 --> 00:01:35.660
let's make sure that
the Android test

00:01:35.660 --> 00:01:39.610
runner and Espresso dependencies
are configured in build.gradle.

00:01:39.610 --> 00:01:44.230
I'll add the dependencies
and set up the runner here.

00:01:44.230 --> 00:01:46.230
If you're using a version
of Android Studio that

00:01:46.230 --> 00:01:48.110
lets you select
the test artifact,

00:01:48.110 --> 00:01:50.230
remember to switch to
Android instrumentation

00:01:50.230 --> 00:01:52.160
test under Build Variants.

00:01:52.160 --> 00:01:54.060
I'm using Android
Studio 2.0, which

00:01:54.060 --> 00:01:56.670
has a combined view for both
local and instrumentation

00:01:56.670 --> 00:01:57.360
tests.

00:01:57.360 --> 00:02:00.390
So I can already see
both in my project view.

00:02:00.390 --> 00:02:03.870
Instrumentation tests go under
the Android test source set.

00:02:03.870 --> 00:02:06.094
So I'll create a
sample test class here

00:02:06.094 --> 00:02:07.260
and name it NotesScreenTest.

00:02:11.540 --> 00:02:14.590
I have to add an annotation
on the test class to specify

00:02:14.590 --> 00:02:16.670
that I'll be writing
Junit 4 tests

00:02:16.670 --> 00:02:20.470
and running them with the
Android Junit 4 runner.

00:02:20.470 --> 00:02:22.630
The note screen in
our app is contained

00:02:22.630 --> 00:02:24.340
in the notes activity.

00:02:24.340 --> 00:02:26.540
By adding an activity
test rule, I'm

00:02:26.540 --> 00:02:29.690
telling the runner to launch
the activity before any test

00:02:29.690 --> 00:02:32.040
and turn it down
after they finish.

00:02:32.040 --> 00:02:35.890
All of this is taken
care of with this line.

00:02:35.890 --> 00:02:38.060
Now I'll add a new
method with a descriptive

00:02:38.060 --> 00:02:41.150
name for the actual test and
start with the basic structure

00:02:41.150 --> 00:02:42.640
I explained before.

00:02:42.640 --> 00:02:46.440
Notice that onView is actually
a method on the Espresso class.

00:02:46.440 --> 00:02:49.450
But across my testing code,
I will use static imports

00:02:49.450 --> 00:02:53.681
to be able to express the
tests in a more concise way.

00:02:53.681 --> 00:02:54.180
All right.

00:02:54.180 --> 00:02:56.190
Let's go through
the arguments next.

00:02:56.190 --> 00:02:59.430
We need a matcher in order to
find a view in the current view

00:02:59.430 --> 00:03:00.560
hierarchy.

00:03:00.560 --> 00:03:02.930
Espresso comes with a
set of built-in matchers

00:03:02.930 --> 00:03:05.980
for common view properties
like With ID, With Text,

00:03:05.980 --> 00:03:07.850
Is Checked, and many others.

00:03:07.850 --> 00:03:10.080
We provide a simple
cheat sheet so you

00:03:10.080 --> 00:03:14.260
don't have to go digging through
the documentation every time.

00:03:14.260 --> 00:03:17.920
In my case, I want to locate the
floating action button, which

00:03:17.920 --> 00:03:20.946
fortunately is the only item
on the screen with the ID

00:03:20.946 --> 00:03:22.600
fab_add_notes.

00:03:22.600 --> 00:03:26.180
Now that I've isolated the view
that I need using matchers,

00:03:26.180 --> 00:03:27.900
it's time to apply
a view action,

00:03:27.900 --> 00:03:29.960
or in other words,
a user interaction

00:03:29.960 --> 00:03:32.660
that will be
simulated by Espresso.

00:03:32.660 --> 00:03:34.260
I just want to click the FAB.

00:03:34.260 --> 00:03:37.340
But again, there are many more
built-in actions, like typing

00:03:37.340 --> 00:03:41.480
and even finger swipes, that I
can use to interact with views.

00:03:41.480 --> 00:03:44.450
And finally, I verify
the outcome of my actions

00:03:44.450 --> 00:03:46.390
by using a view assertion.

00:03:46.390 --> 00:03:48.770
Since I want to check if
an input field is shown

00:03:48.770 --> 00:03:50.780
on screen after
pressing the fab,

00:03:50.780 --> 00:03:52.970
I'll move this
block of code here.

00:03:52.970 --> 00:03:56.910
And I use the matches assertion
that accepts a view matcher.

00:03:56.910 --> 00:03:59.320
So to summarize
what we have so far,

00:03:59.320 --> 00:04:01.930
the first statement matches
a floating action button

00:04:01.930 --> 00:04:05.480
and clicks it, which should
bring up the Add Note screen.

00:04:05.480 --> 00:04:07.770
The second statement
finds the edit text

00:04:07.770 --> 00:04:09.980
that lets a user
enter a note title

00:04:09.980 --> 00:04:12.010
and verifies that it
is displayed using

00:04:12.010 --> 00:04:14.100
the matches view assertion.

00:04:14.100 --> 00:04:16.779
Notice that I didn't have
to write any code in between

00:04:16.779 --> 00:04:19.670
to wait for previous events
to finish, as Espresso

00:04:19.670 --> 00:04:22.920
already takes care
of that for me.

00:04:22.920 --> 00:04:25.450
To run the test, I
right-click on the test class

00:04:25.450 --> 00:04:27.020
and select Run.

00:04:27.020 --> 00:04:29.050
Because it's an
instrumentation test,

00:04:29.050 --> 00:04:32.450
it requires an emulator
or physical device.

00:04:32.450 --> 00:04:34.745
I can see the actions on
the screen as they execute.

00:04:37.860 --> 00:04:39.440
Here's a slightly
longer test that

00:04:39.440 --> 00:04:42.840
includes typing into the add
note screen and saving a note,

00:04:42.840 --> 00:04:44.520
all using Espresso.

00:04:44.520 --> 00:04:46.570
Unless you're writing
end-to-end tests,

00:04:46.570 --> 00:04:49.180
you should keep your tests
small and scoped, which

00:04:49.180 --> 00:04:51.140
will make them more reliable.

00:04:51.140 --> 00:04:52.890
If you want to practice
adding and running

00:04:52.890 --> 00:04:55.550
UI tests on your own,
I suggest you check out

00:04:55.550 --> 00:04:59.270
our Android Testing Codelab,
which I based this video on.

00:04:59.270 --> 00:05:01.070
It contains a
downloadable project

00:05:01.070 --> 00:05:04.490
and step-by-step instructions
to get you started.

00:05:04.490 --> 00:05:06.730
Join me for the next
episode of Android Testing

00:05:06.730 --> 00:05:10.410
Patterns to learn how to handle
adapter views in your tests.

00:05:10.410 --> 00:05:12.610
Good luck, and happy testing.

00:05:12.610 --> 00:05:15.660
[MUSIC PLAYING]

