WEBVTT
Kind: captions
Language: en

00:00:00.610 --> 00:00:02.680
SPEAKER: So, yeah I was
going to talk about test,

00:00:02.680 --> 00:00:06.760
but I decided that that
was kind of boring.

00:00:06.760 --> 00:00:09.290
I'm happy to talk your ear
off about it in person.

00:00:09.290 --> 00:00:11.170
But I think a better
lightning talk

00:00:11.170 --> 00:00:13.150
would be the work
that I've been doing

00:00:13.150 --> 00:00:17.090
on Pub's versions solver, which
I think is really, really cool.

00:00:17.090 --> 00:00:20.340
So I don't know how many of
you have used Pub before.

00:00:20.340 --> 00:00:24.280
It Dart's package manager.

00:00:24.280 --> 00:00:29.170
Way back in the day, Bob and
I worked on a version solver

00:00:29.170 --> 00:00:32.800
for it, which is the
chunk of code that

00:00:32.800 --> 00:00:37.300
takes your set of dependencies
declared in your Pub spec

00:00:37.300 --> 00:00:40.210
and looks up all
of those packages,

00:00:40.210 --> 00:00:42.010
looks up all of
their dependencies,

00:00:42.010 --> 00:00:45.700
and figures out a
group of packages

00:00:45.700 --> 00:00:51.820
that satisfies every dependency
in every transitive package,

00:00:51.820 --> 00:00:55.840
while also ensuring that all of
the root packages' dependencies

00:00:55.840 --> 00:00:57.250
are satisfied.

00:00:57.250 --> 00:01:00.610
It turns out that this
is a really hard problem.

00:01:00.610 --> 00:01:05.560
Those of you familiar
with complexity theory

00:01:05.560 --> 00:01:08.440
might know it as MP hard.

00:01:08.440 --> 00:01:13.390
Those of you who are not, trust
me it's really, really hard.

00:01:13.390 --> 00:01:15.820
We got a pretty decent
solution working

00:01:15.820 --> 00:01:19.030
that's sort of based on what a
lot of other package managers

00:01:19.030 --> 00:01:19.780
do.

00:01:19.780 --> 00:01:23.260
But one problem that many of
you have probably run into

00:01:23.260 --> 00:01:26.170
is that the errors it
reports are not very good.

00:01:26.170 --> 00:01:28.450
Kevin brought this up
in his talk earlier.

00:01:28.450 --> 00:01:32.140
So my new algorithm is
designed to solve that.

00:01:32.140 --> 00:01:35.240
And I think it does it
in a pretty clever way.

00:01:35.240 --> 00:01:38.290
So instead of sort
of thinking about it

00:01:38.290 --> 00:01:41.620
as just a list of
package versions to try

00:01:41.620 --> 00:01:46.240
and thinking about hopping back
to old versions that failed

00:01:46.240 --> 00:01:48.386
and trying different
versions of those

00:01:48.386 --> 00:01:51.010
and trying different versions of
all the other packages in case

00:01:51.010 --> 00:01:53.380
that changed something,
the way it works now,

00:01:53.380 --> 00:01:56.800
is it thinks about it in
terms of facts about the world

00:01:56.800 --> 00:01:58.610
that it knows are true.

00:01:58.610 --> 00:02:02.350
So these are facts like, if
you depend on package foo,

00:02:02.350 --> 00:02:04.960
then you must also
depend on this version

00:02:04.960 --> 00:02:06.790
range of package bar.

00:02:06.790 --> 00:02:10.600
Or facts like
package [? kwuks ?]

00:02:10.600 --> 00:02:13.690
is incompatible
with package quack.

00:02:13.690 --> 00:02:20.260
So you can take these facts
about the world, which

00:02:20.260 --> 00:02:23.560
you can start off by
generating from the Pub spec,

00:02:23.560 --> 00:02:25.960
and use a pretty
straightforward process

00:02:25.960 --> 00:02:29.860
of taking decisions
you've already

00:02:29.860 --> 00:02:32.020
made about which
packages to select,

00:02:32.020 --> 00:02:35.920
figuring out which packages
are forced by that.

00:02:35.920 --> 00:02:38.920
Like, if you have
package foo selected,

00:02:38.920 --> 00:02:42.520
that means that you definitely
need at least this range

00:02:42.520 --> 00:02:44.440
of package bar.

00:02:44.440 --> 00:02:46.600
Eventually, you might
run into a conflict,

00:02:46.600 --> 00:02:49.060
because sometimes you're
making decisions arbitrarily

00:02:49.060 --> 00:02:52.960
based on which package
ranges are unsatisfied.

00:02:52.960 --> 00:02:55.090
The really clever thing
about this new algorithm

00:02:55.090 --> 00:02:57.100
is when it encounters
a conflict,

00:02:57.100 --> 00:03:00.010
it doesn't just go back to
where the conflict happened

00:03:00.010 --> 00:03:01.480
and make a different decision.

00:03:01.480 --> 00:03:03.490
It actually looks
at the facts that

00:03:03.490 --> 00:03:07.270
caused this conflict
to happen and combines

00:03:07.270 --> 00:03:13.990
them using sophisticated
logic programming to come up

00:03:13.990 --> 00:03:17.080
with a new fact
about the world that

00:03:17.080 --> 00:03:20.590
is sort of heuristically
representing the root

00:03:20.590 --> 00:03:22.430
cause of that conflict.

00:03:22.430 --> 00:03:25.750
So for example, if you
have package foo that

00:03:25.750 --> 00:03:28.360
depends on package bar
and package bar depends

00:03:28.360 --> 00:03:33.580
on package baz, and package baz
doesn't match your current SDK

00:03:33.580 --> 00:03:38.380
constraints, it will actually
be able to figure out, well, OK,

00:03:38.380 --> 00:03:40.210
package baz can't be selected.

00:03:40.210 --> 00:03:42.790
The reason we selected
package baz was because bar

00:03:42.790 --> 00:03:43.690
depended on it.

00:03:43.690 --> 00:03:46.270
So bar can't be selected.

00:03:46.270 --> 00:03:49.510
The reason we have selected bar
was because foo depended on it.

00:03:49.510 --> 00:03:51.370
So foo can't be selected.

00:03:51.370 --> 00:03:54.970
And then it'll remember that
this range of versions of foo

00:03:54.970 --> 00:03:58.000
can't be selected
ever, and it won't ever

00:03:58.000 --> 00:04:00.070
try to select them again.

00:04:00.070 --> 00:04:01.540
The really cool
thing about this,

00:04:01.540 --> 00:04:04.540
in addition to just making
the version solving faster,

00:04:04.540 --> 00:04:09.730
is it takes these
facts, and if it

00:04:09.730 --> 00:04:12.610
runs into a conflict that can't
be solved, where there are

00:04:12.610 --> 00:04:16.779
no more versions of packages
left to try, it can actually

00:04:16.779 --> 00:04:22.000
figure out, OK, why did this
fact that says there are

00:04:22.000 --> 00:04:24.310
no possible versions
that could ever

00:04:24.310 --> 00:04:27.790
solve this package [? graph, ?]
why was this fact generated?

00:04:27.790 --> 00:04:31.720
What two previous
facts did we combine,

00:04:31.720 --> 00:04:34.510
using sophisticated
logic programming,

00:04:34.510 --> 00:04:36.790
to create this new fact?

00:04:36.790 --> 00:04:38.740
Why did those facts exist?

00:04:38.740 --> 00:04:40.240
Why did those facts exist?

00:04:40.240 --> 00:04:44.200
And eventually it'll get
back to the dependencies that

00:04:44.200 --> 00:04:45.840
are declared in your Pub spec.

00:04:45.840 --> 00:04:50.560
And it will be able to report
that to you as just plain text

00:04:50.560 --> 00:04:53.110
and say, these are
exactly the reasons

00:04:53.110 --> 00:04:55.090
why we couldn't find anything.

00:04:55.090 --> 00:04:58.660
So I'm hoping to release this
in Pub sometime this quarter.

00:04:58.660 --> 00:05:00.010
So keep an eye out.

00:05:00.010 --> 00:05:02.460
[APPLAUSE]

