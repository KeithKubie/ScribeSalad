WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
When we're going to implement the most simple controller I may think of? A p-type controller.

00:00:05.000 --> 00:00:07.000
P stands for proportional.

00:00:07.000 --> 00:00:14.000
It's simply going to multiply the error by some number to produce the input for the brake.

00:00:14.000 --> 00:00:21.000
To be more concrete, let's multiply the error with 100,000 m/s².

00:00:21.000 --> 00:00:25.000
When doing so, we can, of course, get huge positive and negative numbers

00:00:25.000 --> 00:00:29.000
that don't make any sense to control the brake so we have to clamp the output.

00:00:29.000 --> 00:00:34.000
Whenever the result of that multiplication is negative, we return 0 instead.

00:00:34.000 --> 00:00:42.000
Whenever the result of that multiplication is larger than 200 m/s², we return 200 m/s².

00:00:42.000 --> 00:00:44.000
Why could that possibly work?

00:00:44.000 --> 00:00:51.000
Assume that when we're fitting this controlled value of 130 m/s² into the brake,

00:00:51.000 --> 00:00:55.000
we're actually ending up with the wheel slip of 0.1987.

00:00:55.000 --> 00:01:02.000
And the difference between the optimum value and the actual value is 0.00130.

00:01:02.000 --> 00:01:07.000
The controller is going to return the same number again, 130 m/s².

00:01:07.000 --> 00:01:10.000
So this foot constitutes an equilibrium.

00:01:10.000 --> 00:01:14.000
One thing to know about this naive version of the p-type controller is

00:01:14.000 --> 00:01:19.000
that the value of the equilibrium is always slightly less than the optimum.

00:01:19.000 --> 00:01:24.000
If anything changes concerning the dynamics of the car or the vault conditions,

00:01:24.000 --> 00:01:26.000
this actual value may change.

00:01:26.000 --> 00:01:31.000
When the actual wheel slip goes up a little, the difference is going to decrease.

00:01:31.000 --> 00:01:38.000
We're subtracting the actual wheel slip. This is going to become 0.00129.

00:01:38.000 --> 00:01:48.000
The error gets a little smaller. We're multiplying this error by 100,000 m/s², which results in 129 m/s².

00:01:48.000 --> 00:01:55.000
We're braking less, at least we're braking less hopefully. The slip is going to decrease again.

00:01:55.000 --> 00:01:58.000
So this looks like a stable equilibrium at least from the one side,

00:01:58.000 --> 00:02:04.000
but obviously, this also works when the actual wheel slip is a little too low.

00:02:04.000 --> 00:02:10.000
Now implement this in Python. Your first job is to implement the p control as a function.

00:02:10.000 --> 00:02:16.000
The function receives the actual value and the target value, 0.2 that is,

00:02:16.000 --> 00:02:20.000
and returns the output of the p control, which eventually controls the brake.

00:02:20.000 --> 09:59:59.000
Your second job is to call that function to control the brake.

