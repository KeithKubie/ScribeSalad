WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:01:29.108
[PULSATING MUSIC PLAYING]

00:01:29.108 --> 00:01:32.594
[WHOOSH]

00:01:32.594 --> 00:01:34.586
[WHOOSH]

00:01:37.160 --> 00:01:37.940
STEVE BAZYL: Hi, everyone.

00:01:37.940 --> 00:01:38.850
I'm Steve Bazyl.

00:01:38.850 --> 00:01:40.860
Thanks for watching today.

00:01:40.860 --> 00:01:43.930
For today, I want to talk about
something that's been

00:01:43.930 --> 00:01:45.850
personally bothering me
with some of the app

00:01:45.850 --> 00:01:47.280
integrations I've seen.

00:01:47.280 --> 00:01:50.780
And this is apps that are
implementing their own file

00:01:50.780 --> 00:01:53.950
pickers on top of
the Drive API.

00:01:53.950 --> 00:01:55.640
And first, what do I mean
by a file picker?

00:01:55.640 --> 00:01:57.700
This is really something
that most of you

00:01:57.700 --> 00:01:58.610
should be familiar with.

00:01:58.610 --> 00:02:01.990
It's an interface for selecting
files from a file

00:02:01.990 --> 00:02:06.100
system, very much like what you
would see if you were to,

00:02:06.100 --> 00:02:08.259
say, do a native file upload
from your file system.

00:02:08.259 --> 00:02:11.630
People are building similar
interfaces for selecting files

00:02:11.630 --> 00:02:14.710
from cloud services like Drive
as well as other services like

00:02:14.710 --> 00:02:18.058
Dropbox, Evernote, and so on.

00:02:18.058 --> 00:02:21.180
And the overwhelming reason for
why I've heard of people

00:02:21.180 --> 00:02:26.090
wanting to do this really comes
down to UX consistency.

00:02:26.090 --> 00:02:27.760
They basically want the
interface to feel like it's

00:02:27.760 --> 00:02:31.300
part of the way their
app looks and feels.

00:02:31.300 --> 00:02:35.430
And I'm going to go into that
just a little bit more.

00:02:35.430 --> 00:02:38.080
The other two reasons
that this comes up--

00:02:38.080 --> 00:02:42.230
and these are a little bit
more technical reasons--

00:02:42.230 --> 00:02:45.890
one is having to do with missing
features with some of

00:02:45.890 --> 00:02:51.460
the alternative solutions or for
mobile applications where

00:02:51.460 --> 00:02:54.500
a native file picker for
that cloud service

00:02:54.500 --> 00:02:57.750
may or may not exist.

00:02:57.750 --> 00:03:01.230
And I'll show you a couple
screenshots.

00:03:01.230 --> 00:03:03.360
We can switch over to
my screen here.

00:03:03.360 --> 00:03:04.790
I just want you to show
two quick ones.

00:03:04.790 --> 00:03:07.690
These are from apps that I've
seen, just to give you a sense

00:03:07.690 --> 00:03:08.910
of what people are building.

00:03:08.910 --> 00:03:10.530
I'm not going to say which
apps these are.

00:03:10.530 --> 00:03:13.752
But some of you may have seen
these interfaces before.

00:03:13.752 --> 00:03:17.650
But here's one for picking from
Drive and another one

00:03:17.650 --> 00:03:23.150
here which very much shows what
some of these issues are.

00:03:23.150 --> 00:03:27.070
So there's four reasons why the
approaches that some of

00:03:27.070 --> 00:03:31.630
these developers have taken
are problematic.

00:03:31.630 --> 00:03:34.700
Number one is pretty
straightforward.

00:03:34.700 --> 00:03:37.010
It has to do with security.

00:03:37.010 --> 00:03:41.540
Since we launched the Drive API
about a year ago, we have

00:03:41.540 --> 00:03:44.710
been pushing this notion of
file-based permissions.

00:03:44.710 --> 00:03:48.540
So we have this drive.file
scope, which limits your

00:03:48.540 --> 00:03:51.480
application's access to only
those files that the user

00:03:51.480 --> 00:03:53.980
chooses to share with
your application.

00:03:53.980 --> 00:03:59.110
For this to work, though, it
requires that we know which

00:03:59.110 --> 00:04:00.880
files the user chooses
to share.

00:04:00.880 --> 00:04:03.300
And that's only possible
if they do some

00:04:03.300 --> 00:04:04.910
action via our UI.

00:04:04.910 --> 00:04:07.330
And that happens automatically
when they open a file

00:04:07.330 --> 00:04:09.380
from the Drive UI.

00:04:09.380 --> 00:04:12.210
It also works if you use our
pre-built Picker Widget.

00:04:12.210 --> 00:04:16.550
And I'll show you some demos of
that in just a few minutes.

00:04:16.550 --> 00:04:18.720
And we think this is actually
very important.

00:04:18.720 --> 00:04:21.980
In order to implement your own
file picker, you need elevated

00:04:21.980 --> 00:04:22.590
permissions.

00:04:22.590 --> 00:04:25.480
At a minimum, you would
need read-only

00:04:25.480 --> 00:04:29.050
access to the file metadata.

00:04:29.050 --> 00:04:32.310
If you actually need to read the
contents of those files,

00:04:32.310 --> 00:04:39.560
you would also need, at
a minimum, just full

00:04:39.560 --> 00:04:40.910
read access to Drive.

00:04:40.910 --> 00:04:43.040
If you were to save files back,
then you would need

00:04:43.040 --> 00:04:45.100
write access as well.

00:04:45.100 --> 00:04:47.440
But the point is that you need
a lot of permissions in order

00:04:47.440 --> 00:04:50.510
to actually build something
like this interface.

00:04:50.510 --> 00:04:52.780
And the more permissions you
have, the more access you have

00:04:52.780 --> 00:04:57.520
to drive, the more the
user is exposed.

00:04:57.520 --> 00:05:00.460
We certainly trust that most
developers out there take

00:05:00.460 --> 00:05:01.520
security seriously.

00:05:01.520 --> 00:05:05.080
But every time there's an
application that has elevated

00:05:05.080 --> 00:05:07.620
access, that is one additional
point of risk.

00:05:07.620 --> 00:05:11.800
So we strongly encourage
applications not to ask for

00:05:11.800 --> 00:05:13.910
more permissions
than they need.

00:05:13.910 --> 00:05:17.230
And one of the best ways to do
that is to use pre-built

00:05:17.230 --> 00:05:20.780
picker widgets like ours in
order to minimize the level of

00:05:20.780 --> 00:05:23.310
access that you have.

00:05:23.310 --> 00:05:27.470
The second reason why these
tend to be problematic--

00:05:27.470 --> 00:05:30.080
and you can actually see here in
this particular screen shot

00:05:30.080 --> 00:05:31.560
that I showed--

00:05:31.560 --> 00:05:34.270
is a lot of developers
don't design and

00:05:34.270 --> 00:05:37.440
test with large corpora.

00:05:37.440 --> 00:05:40.040
Most of the time, people will
set up a test account.

00:05:40.040 --> 00:05:43.460
And they'll put in a couple
dozen files and folders and

00:05:43.460 --> 00:05:46.555
make sure that, yeah, they can
navigate and show files and

00:05:46.555 --> 00:05:50.020
show folders and navigate
the hierarchy.

00:05:50.020 --> 00:05:53.010
But then you get somebody who
is a Google Apps user--

00:05:53.010 --> 00:05:55.820
maybe they're a part of a large
organization, or they're

00:05:55.820 --> 00:05:59.610
really heavy Drive users, like
those of us here at Google--

00:05:59.610 --> 00:06:02.880
and these interfaces
fall over.

00:06:02.880 --> 00:06:08.340
Personally, for example, just
for my google.com account, I

00:06:08.340 --> 00:06:10.840
certainly have thousands or
even tens of thousands of

00:06:10.840 --> 00:06:14.500
files and folders, plus all the
files that are shared with

00:06:14.500 --> 00:06:18.060
me, which is just an incredibly

00:06:18.060 --> 00:06:19.890
large number of files.

00:06:19.890 --> 00:06:22.470
And there's been a few
applications that I've tested

00:06:22.470 --> 00:06:27.360
out in the past few weeks where
I would go and try to

00:06:27.360 --> 00:06:29.280
upload a file, and their picker

00:06:29.280 --> 00:06:30.340
interface would time out.

00:06:30.340 --> 00:06:32.090
It would give me an error.

00:06:32.090 --> 00:06:36.000
In this particular case, they
didn't anticipate somebody

00:06:36.000 --> 00:06:39.960
having more than 100 folders in
their top-level directory.

00:06:39.960 --> 00:06:47.280
So you really have to plan ahead
for not just simple test

00:06:47.280 --> 00:06:50.730
users or casual users but really
the business users, the

00:06:50.730 --> 00:06:54.760
people who are the power users
and heavily use Drive and have

00:06:54.760 --> 00:06:58.350
thousands, tens of thousands,
even hundreds of thousands of

00:06:58.350 --> 00:07:00.196
files within their database.

00:07:02.700 --> 00:07:07.580
The other area where the size
of the corpus matters is on

00:07:07.580 --> 00:07:10.060
the response time for queries.

00:07:10.060 --> 00:07:15.690
For example, our google.com
corpus is so large that some

00:07:15.690 --> 00:07:19.780
of the queries, just the default
page size that we use

00:07:19.780 --> 00:07:22.520
for the Drive API
is too large.

00:07:22.520 --> 00:07:26.330
And just in my own testing, in
order to reliably get results

00:07:26.330 --> 00:07:31.030
back quickly from the Drive API
for a files.list call, I

00:07:31.030 --> 00:07:34.550
really had to scale the page
size down to about 50.

00:07:34.550 --> 00:07:40.280
And default is somewhere
around 1,000 or so.

00:07:40.280 --> 00:07:44.384
And so you can see how once
you're dealing with these

00:07:44.384 --> 00:07:47.530
larger sets of files, especially
if you have to

00:07:47.530 --> 00:07:53.400
really restrict yourself down
to about 50 files per call,

00:07:53.400 --> 00:07:55.610
that's a much more effective
pattern for me.

00:07:55.610 --> 00:08:00.470
And so it's frustrating to go
to an application where the

00:08:00.470 --> 00:08:04.030
file that I want to upload is
not something that I created.

00:08:04.030 --> 00:08:05.110
It was something that
was shared with me.

00:08:05.110 --> 00:08:07.790
And I haven't bothered to take
the time to organize it into

00:08:07.790 --> 00:08:09.650
my own folder structure.

00:08:09.650 --> 00:08:12.490
And then I'm presented with an
interface that makes it very

00:08:12.490 --> 00:08:16.280
difficult for me to
get that content.

00:08:16.280 --> 00:08:20.530
And again, implementing
alternatives, such as Search,

00:08:20.530 --> 00:08:22.160
or at least something
complementary to a file

00:08:22.160 --> 00:08:27.320
picker, such as Search,
is really important.

00:08:27.320 --> 00:08:30.640
And lastly, I do want to talk
to this issue of UX

00:08:30.640 --> 00:08:33.460
consistency.

00:08:33.460 --> 00:08:37.049
So again, the main reason why
people have chosen to do their

00:08:37.049 --> 00:08:39.720
own pickers has really been
because they want this

00:08:39.720 --> 00:08:43.320
interface to look like the rest
of their application.

00:08:43.320 --> 00:08:45.480
And this is really a
debatable point.

00:08:45.480 --> 00:08:50.510
And I think there's a strong
argument to be made that for

00:08:50.510 --> 00:08:55.140
Drive users, it's equally as
consistent to give them an

00:08:55.140 --> 00:08:59.660
interface that is the same as
what they normally see on a

00:08:59.660 --> 00:09:00.940
day-to-day basis with Drive.

00:09:00.940 --> 00:09:04.630
And the file picker that we give
to you as a third-party

00:09:04.630 --> 00:09:07.120
developer is actually the same
picker that we use within our

00:09:07.120 --> 00:09:07.740
own properties.

00:09:07.740 --> 00:09:11.900
So it appears within Google
Drive, within the editors.

00:09:11.900 --> 00:09:12.830
It appears in some of the other

00:09:12.830 --> 00:09:15.810
properties such as Google+.

00:09:15.810 --> 00:09:18.250
So it's for Google users, people
who are going to be

00:09:18.250 --> 00:09:19.930
using this particular
functionality.

00:09:19.930 --> 00:09:22.330
It's an interface that they're
already comfortable using.

00:09:22.330 --> 00:09:24.370
And so you have to weigh that
level of consistency and

00:09:24.370 --> 00:09:28.680
comfort against wanting to have
that balance with your

00:09:28.680 --> 00:09:31.500
own application.

00:09:31.500 --> 00:09:35.150
So that said, what are the
preferred approaches?

00:09:35.150 --> 00:09:37.710
And really the simplest one,
if you're building a web

00:09:37.710 --> 00:09:40.710
application, is to use
our Picker Widget.

00:09:40.710 --> 00:09:45.560
I'm going to switch over to just
a quick little demo here,

00:09:45.560 --> 00:09:47.050
just to share some of
the customizations

00:09:47.050 --> 00:09:50.260
that you can do.

00:09:50.260 --> 00:09:52.970
But this is our Picker
Widget, assuming--

00:09:52.970 --> 00:09:54.260
OK, here we go.

00:09:54.260 --> 00:09:55.580
It's going to load.

00:09:55.580 --> 00:09:57.620
I'm not doing this on my
corporate account.

00:09:57.620 --> 00:09:59.460
So this is actually a fairly
small purpose.

00:09:59.460 --> 00:10:02.820
But trust me when I say that
this actually works equally as

00:10:02.820 --> 00:10:07.880
fast, actually even faster,
on my google.com account.

00:10:07.880 --> 00:10:10.475
It's pretty straightforward.

00:10:10.475 --> 00:10:12.495
You can actually do some
customizations here.

00:10:12.495 --> 00:10:17.290
Say I want to separate out my
files versus things that are

00:10:17.290 --> 00:10:18.770
shared with me and
allow upload.

00:10:18.770 --> 00:10:21.220
We actually have a nice
little drag-and-drop.

00:10:21.220 --> 00:10:25.230
Or we can do upload from our
native file system that

00:10:25.230 --> 00:10:28.110
actually uploads into Drive and
then shares that file out

00:10:28.110 --> 00:10:30.940
to your application.

00:10:30.940 --> 00:10:33.725
There's some really cool stuff
you can do with the views.

00:10:33.725 --> 00:10:34.820
So I'm actually going here.

00:10:34.820 --> 00:10:37.470
Right now you can see we
have these controls.

00:10:37.470 --> 00:10:41.660
I can toggle over here and get
a nice thumbnail view.

00:10:41.660 --> 00:10:43.200
Some of these actually don't
have thumbnails.

00:10:43.200 --> 00:10:46.970
But you can scroll down, and
we start to see those

00:10:46.970 --> 00:10:49.580
thumbnails load.

00:10:49.580 --> 00:10:51.390
It's a little slower than
it should be today.

00:10:51.390 --> 00:10:54.230
But we can also pin that
view into something.

00:10:54.230 --> 00:10:58.170
So if you just want to force it
into a thumbnail view, we

00:10:58.170 --> 00:11:01.430
can do that as well.

00:11:01.430 --> 00:11:06.660
You could also do things like
filter by MIME type, go back

00:11:06.660 --> 00:11:10.630
to List, and then anything
that's not that MIME type will

00:11:10.630 --> 00:11:11.950
actually get filtered out.

00:11:11.950 --> 00:11:14.670
Of course, you can always
navigate into folders.

00:11:14.670 --> 00:11:17.330
And that is good, really
straightforward.

00:11:17.330 --> 00:11:19.230
The cool thing with the Picker,
though, is it's not

00:11:19.230 --> 00:11:22.310
limited to just Google Drive.

00:11:22.310 --> 00:11:27.410
So if you want to allow people
to pick from YouTube, from

00:11:27.410 --> 00:11:30.080
Google Image Search, there's
a whole bunch of other

00:11:30.080 --> 00:11:34.760
properties that it actually
integrates into YouTube.

00:11:34.760 --> 00:11:35.660
Really powerful.

00:11:35.660 --> 00:11:41.060
And you can go over to
developers.google.com/picker

00:11:41.060 --> 00:11:44.140
to learn more about that
and how it works.

00:11:44.140 --> 00:11:45.740
But it's a really powerful
interface.

00:11:48.460 --> 00:11:49.860
So that would be the
preferred approach.

00:11:49.860 --> 00:11:51.560
There are a couple limitations,
of course.

00:11:51.560 --> 00:11:54.980
The two are currently
you cannot select

00:11:54.980 --> 00:11:57.400
folders as the target.

00:11:57.400 --> 00:11:59.810
So you can pick files
from Drive.

00:11:59.810 --> 00:12:03.670
But there are cases where
developers may

00:12:03.670 --> 00:12:04.910
need to select a folder.

00:12:04.910 --> 00:12:09.540
And so you can think of this
as cases of, say, selecting

00:12:09.540 --> 00:12:11.550
the target for dropping files.

00:12:11.550 --> 00:12:15.420
So you're doing online faxing or
e-signatures, and you want

00:12:15.420 --> 00:12:17.770
the equivalent of a Dropbox
folder so you can dump in

00:12:17.770 --> 00:12:19.190
incoming files.

00:12:19.190 --> 00:12:23.570
If you're a scanner, where
to save things

00:12:23.570 --> 00:12:26.320
that they've scanned.

00:12:26.320 --> 00:12:28.280
And also as a location where
you might want to

00:12:28.280 --> 00:12:29.160
be consuming files.

00:12:29.160 --> 00:12:34.150
So we see this with applications
like IFT and a

00:12:34.150 --> 00:12:36.830
few others that do these file
automations, and they just

00:12:36.830 --> 00:12:39.380
watch a folder for changes.

00:12:39.380 --> 00:12:41.770
So there are cases where you're
not interested in one

00:12:41.770 --> 00:12:44.250
particular file, but you just
want to find a destination

00:12:44.250 --> 00:12:46.600
that you can then do something
interesting with.

00:12:46.600 --> 00:12:49.610
In that case, the Picker
just doesn't work.

00:12:49.610 --> 00:12:52.250
That's more of a bug on our end
and something that we hope

00:12:52.250 --> 00:12:54.910
to fix fairly soon.

00:12:54.910 --> 00:12:56.840
But the other case, which is
a little bit harder to deal

00:12:56.840 --> 00:12:58.540
with, is mobile.

00:12:58.540 --> 00:13:00.400
And right now the Picker
is web-only.

00:13:00.400 --> 00:13:03.750
We don't have a native picker
for any of the mobile

00:13:03.750 --> 00:13:05.210
platforms right now.

00:13:05.210 --> 00:13:07.770
And unfortunately, the Web
Picker doesn't really respond

00:13:07.770 --> 00:13:10.490
well to being viewed
on a mobile device.

00:13:10.490 --> 00:13:14.040
It's not quite designed
to be responsive.

00:13:14.040 --> 00:13:16.440
And so, developers, if you're
building a mobile application

00:13:16.440 --> 00:13:19.450
and you do need to select files
or folders for Drive,

00:13:19.450 --> 00:13:24.140
you are pretty much left
with building your own.

00:13:24.140 --> 00:13:26.820
There are some alternatives
to our Picker.

00:13:26.820 --> 00:13:30.770
One that I think is kind of
cool is Filepicker.io.

00:13:30.770 --> 00:13:33.430
This is a really interesting
developer product.

00:13:33.430 --> 00:13:37.600
They basically built a layer
on top of Drive and all the

00:13:37.600 --> 00:13:39.700
other cloud storage
providers--

00:13:39.700 --> 00:13:44.190
Dropbox, Box, SkyDrive,
Evernote, you name it--

00:13:44.190 --> 00:13:47.590
and they give you a set of
pre-built components.

00:13:47.590 --> 00:13:50.760
And you can see here all their
different services.

00:13:50.760 --> 00:13:55.010
And I can click in Drive and
just navigate through

00:13:55.010 --> 00:13:56.260
everything just as well.

00:13:58.900 --> 00:14:01.390
And they have mobile
pickers as well.

00:14:01.390 --> 00:14:04.580
They do have some of the same
restrictions in terms of I'm

00:14:04.580 --> 00:14:06.580
not entirely sure if they
support folder selection.

00:14:09.190 --> 00:14:14.090
There are some issues if you are
trying to do an app that

00:14:14.090 --> 00:14:19.820
supports both open from Drive as
well as using their picker.

00:14:19.820 --> 00:14:24.080
Within their app, they do mask
the underlying file IDs.

00:14:24.080 --> 00:14:27.080
This is done for security
reasons.

00:14:27.080 --> 00:14:30.540
That does make it a little bit
difficult to implement both

00:14:30.540 --> 00:14:31.520
use cases--

00:14:31.520 --> 00:14:34.160
open from Drive and then pick a
file from within your app--

00:14:34.160 --> 00:14:39.620
because you end up having to do
our Drive API for that one

00:14:39.620 --> 00:14:43.490
use case and then their API
for a separate use case.

00:14:43.490 --> 00:14:45.920
If your application doesn't
need to be launched from

00:14:45.920 --> 00:14:48.640
within the Drive UI,
Filepicker.io is actually a

00:14:48.640 --> 00:14:49.640
really nice solution.

00:14:49.640 --> 00:14:53.950
And it has the benefit that it
gets you basically support for

00:14:53.950 --> 00:14:58.180
all of the cloud-storage
solutions with one

00:14:58.180 --> 00:15:00.220
integration.

00:15:00.220 --> 00:15:02.710
But again, it doesn't solve
every use case.

00:15:02.710 --> 00:15:05.630
But it is something that I
would certainly encourage

00:15:05.630 --> 00:15:08.730
people to look for if that is
the use case that they're

00:15:08.730 --> 00:15:09.980
trying to implement.

00:15:12.980 --> 00:15:13.900
Another option--

00:15:13.900 --> 00:15:16.610
and this speaks more towards
the folder case--

00:15:16.610 --> 00:15:21.160
which is if you're trying to set
a destination for where to

00:15:21.160 --> 00:15:24.230
put files, rather than
giving users a

00:15:24.230 --> 00:15:26.430
choice, just pick a default.

00:15:26.430 --> 00:15:28.590
And you actually see this a
lot with applications like

00:15:28.590 --> 00:15:34.670
HelloFax and HelloSign, a few
others that are just creating

00:15:34.670 --> 00:15:37.270
destination folders
for their content.

00:15:37.270 --> 00:15:39.550
They don't even present
a choice to the users.

00:15:39.550 --> 00:15:44.020
And the nice thing is since
Drive is based off of opaque

00:15:44.020 --> 00:15:47.020
IDs, so we have unique
identifier for files, it

00:15:47.020 --> 00:15:50.040
doesn't matter if the user then
goes and renames that

00:15:50.040 --> 00:15:53.560
folder or moves it, reorganizes
it, once you

00:15:53.560 --> 00:15:56.550
create that folder and you have
that ID, the user can do

00:15:56.550 --> 00:15:57.940
whatever they want to it.

00:15:57.940 --> 00:16:00.990
And you'll still be able to do
writes to that folder no

00:16:00.990 --> 00:16:03.340
matter where it goes,
if they share it,

00:16:03.340 --> 00:16:05.640
they rename it, whatever.

00:16:05.640 --> 00:16:07.620
So the easiest thing
is just don't even

00:16:07.620 --> 00:16:08.700
bother with a picker.

00:16:08.700 --> 00:16:11.270
Just create what you need,
and you're good to go.

00:16:14.580 --> 00:16:19.720
So for those cases where you
don't really have a choice--

00:16:19.720 --> 00:16:23.940
you're building a mobile
application, you need to be

00:16:23.940 --> 00:16:27.520
able to let users select from
existing folders, and you

00:16:27.520 --> 00:16:30.520
can't create a new one just
for your application--

00:16:30.520 --> 00:16:33.310
just a few things to watch out
for based on some of the

00:16:33.310 --> 00:16:35.460
earlier problems.

00:16:35.460 --> 00:16:38.790
One is certainly try to minimize
the level of access

00:16:38.790 --> 00:16:40.720
that you need.

00:16:40.720 --> 00:16:43.580
If you are only reading
the content--

00:16:43.580 --> 00:16:45.600
Actually, better yet, we'll
start with the most

00:16:45.600 --> 00:16:49.000
restrictive, which is if
you just need to pick a

00:16:49.000 --> 00:16:53.340
destination folder, you can
actually pick a fairly narrow

00:16:53.340 --> 00:16:55.190
scope to build your picker.

00:16:55.190 --> 00:16:58.470
So what you would do is you can
combine drive.file with

00:16:58.470 --> 00:17:01.090
drive.readonly.metadata.

00:17:01.090 --> 00:17:03.250
What that would do is you would
have full read/write

00:17:03.250 --> 00:17:05.560
access to the files
you create.

00:17:05.560 --> 00:17:08.079
But for the purposes of the
picker, you would only have

00:17:08.079 --> 00:17:10.140
read access to the file
metadata, which would be

00:17:10.140 --> 00:17:13.109
enough for you to show
the navigation

00:17:13.109 --> 00:17:14.760
structure for those folders.

00:17:14.760 --> 00:17:16.440
But you would not be able
to read the contents.

00:17:16.440 --> 00:17:19.359
You would not be able to write
to any of those files.

00:17:19.359 --> 00:17:23.069
And that would be a pretty
reasonable way to narrow down

00:17:23.069 --> 00:17:25.460
the permissions for that case.

00:17:25.460 --> 00:17:27.780
If you do actually need to read
the file that you just

00:17:27.780 --> 00:17:32.580
selected, then instead of doing
drive.readonly.metada,

00:17:32.580 --> 00:17:35.050
you would use drive.readonly,
which would then let you read

00:17:35.050 --> 00:17:36.680
that content.

00:17:36.680 --> 00:17:39.440
If you actually need to read
and write, then you have to

00:17:39.440 --> 00:17:42.680
use the full Drive scope.

00:17:42.680 --> 00:17:45.740
The other thing is if you are
building your own picker

00:17:45.740 --> 00:17:48.700
interface, consider adding
a search option.

00:17:48.700 --> 00:17:51.930
This is really important for
users that are parts of large

00:17:51.930 --> 00:17:52.800
organizations.

00:17:52.800 --> 00:17:58.190
They have far, far, far more
files than your typical user.

00:17:58.190 --> 00:18:02.410
Many of those are files that are
shared from coworkers and

00:18:02.410 --> 00:18:07.350
may not be organized in a way
that a file-oriented or

00:18:07.350 --> 00:18:08.900
folder-oriented navigation
structure is

00:18:08.900 --> 00:18:11.050
really great for them.

00:18:11.050 --> 00:18:13.630
Adding a search option
is really easy.

00:18:13.630 --> 00:18:17.040
Just add a text field that
API supports Search.

00:18:17.040 --> 00:18:18.915
It's pretty easy to do that
as an alternative.

00:18:18.915 --> 00:18:21.090
It's probably easier to do
Search than it is to actually

00:18:21.090 --> 00:18:23.320
build a file picker.

00:18:23.320 --> 00:18:28.436
And it's just way more useful
for users to have that.

00:18:28.436 --> 00:18:30.785
And actually, I ran into
a case recently--

00:18:33.700 --> 00:18:36.540
not one that I showed-- an
application that had their own

00:18:36.540 --> 00:18:38.240
Drive file picker, but they
also had some YouTube

00:18:38.240 --> 00:18:39.580
integration.

00:18:39.580 --> 00:18:45.060
And the way they required users
to say which YouTube

00:18:45.060 --> 00:18:49.130
video they wanted to attach was
they had to go to YouTube,

00:18:49.130 --> 00:18:54.200
find the video, extract the
video ID from the URL, and

00:18:54.200 --> 00:18:55.800
then copy that back
into their field.

00:18:55.800 --> 00:18:59.110
And it's just horribly, horribly
painful for users to

00:18:59.110 --> 00:19:03.080
do that when the YouTube API
has a search capability.

00:19:03.080 --> 00:19:06.600
They could have just as well
have embedded YouTube Search

00:19:06.600 --> 00:19:08.750
right in there and then
extracted out the relevant

00:19:08.750 --> 00:19:10.690
information themselves.

00:19:10.690 --> 00:19:18.540
So really, please don't
underappreciate the power that

00:19:18.540 --> 00:19:19.790
Search has for these
use cases.

00:19:22.280 --> 00:19:27.370
And lastly, is just to make
sure that you test with a

00:19:27.370 --> 00:19:29.220
large corpus.

00:19:29.220 --> 00:19:32.930
You don't have to have
gigabytes of data.

00:19:32.930 --> 00:19:36.370
The actual file size is
somewhat irrelevant.

00:19:36.370 --> 00:19:38.410
But when you do create your test
accounts, make sure that

00:19:38.410 --> 00:19:42.960
you are creating a significant
number of folders at the root

00:19:42.960 --> 00:19:47.010
level, as nested folders, and
also to make sure that there

00:19:47.010 --> 00:19:53.020
are regular files in there as
well, just so that the number

00:19:53.020 --> 00:19:56.230
of files that you need to fetch
is some significant

00:19:56.230 --> 00:19:59.070
multiple of the page size.

00:19:59.070 --> 00:20:01.580
So like, set your
page size to 50.

00:20:01.580 --> 00:20:04.340
And then make sure you have
1,000 or so folders in there.

00:20:04.340 --> 00:20:07.560
That way, you can see how your
picker is responding when you

00:20:07.560 --> 00:20:13.030
have to make 5 or 6 or 10
requests in order to populate

00:20:13.030 --> 00:20:14.680
the results.

00:20:14.680 --> 00:20:16.520
And I think once you do that,
you're going to start to find

00:20:16.520 --> 00:20:19.800
out where these seams are,
figure out ways to

00:20:19.800 --> 00:20:23.380
incrementally show those
results, and just make that

00:20:23.380 --> 00:20:27.230
interface much, much more
responsive for users that are

00:20:27.230 --> 00:20:32.000
heavy Drive users or parts of
large organizations that have

00:20:32.000 --> 00:20:34.060
these tens or hundreds
of thousands, or even

00:20:34.060 --> 00:20:35.310
millions, of files.

00:20:37.460 --> 00:20:41.870
If we're dealing with RESTful
APIs, I would certainly

00:20:41.870 --> 00:20:45.560
strongly encourage everyone
to use the Picker API.

00:20:45.560 --> 00:20:46.525
So that's it for today.

00:20:46.525 --> 00:20:51.150
Again, I hope this was useful
and motivates people to do the

00:20:51.150 --> 00:20:53.390
right thing for their users.

00:20:53.390 --> 00:20:54.940
We'll be back next week.

00:20:54.940 --> 00:20:56.090
I'm not sure if we
have a topic yet.

00:20:56.090 --> 00:20:58.250
But we'll let everyone know
as soon as we can.

00:20:58.250 --> 00:21:00.950
Thanks.

00:21:00.950 --> 00:21:02.450
[WHOOSH]

00:21:02.450 --> 00:21:05.450
[WHOOSH]

00:21:05.450 --> 00:21:44.567
[PULSATING MUSIC PLAYING]

