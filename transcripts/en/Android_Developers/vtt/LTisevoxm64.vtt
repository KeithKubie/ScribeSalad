WEBVTT
Kind: captions
Language: en

00:00:08.430 --> 00:00:10.850
PETER BRINKMANN: Hi, I'm Peter
Brinkmann, an engineer on the

00:00:10.850 --> 00:00:12.970
speech infrastructure
team in New York.

00:00:12.970 --> 00:00:16.079
And today I'd like to tell you
about 20% project, the

00:00:16.079 --> 00:00:18.670
Patchfield Audio Architecture
for Android.

00:00:18.670 --> 00:00:21.690
In a nutshell, the idea is to
allow you to implement audio

00:00:21.690 --> 00:00:24.970
functionality, such as
synthesizers and effects, with

00:00:24.970 --> 00:00:29.440
minimum fuss and to patch them
together in a Patchfield as

00:00:29.440 --> 00:00:31.600
you would in a recording
studio.

00:00:31.600 --> 00:00:34.320
The core of Patchfield is a
service that manages the

00:00:34.320 --> 00:00:35.850
signal processing graph.

00:00:35.850 --> 00:00:38.380
And it also acts as a central
hub for audio.

00:00:38.380 --> 00:00:41.900
So the service manages all
your units, such as

00:00:41.900 --> 00:00:44.220
synthesizers or effects.

00:00:44.220 --> 00:00:47.600
And it provides all kinds
of functionality

00:00:47.600 --> 00:00:49.300
for connecting them.

00:00:49.300 --> 00:00:51.120
Now you can run the
service locally

00:00:51.120 --> 00:00:54.200
in your app or remotely.

00:00:54.200 --> 00:00:56.880
When it's running locally, then
essentially it gives you

00:00:56.880 --> 00:00:59.990
a powerful way of organizing
audio within your app.

00:00:59.990 --> 00:01:03.390
And it gives you also a couple
of other nice features, such

00:01:03.390 --> 00:01:07.250
as support for formatted
processors.

00:01:07.250 --> 00:01:09.980
When it's running remotely,
you get an added feature.

00:01:09.980 --> 00:01:13.510
Namely, you get support for
interactive audio routing,

00:01:13.510 --> 00:01:16.620
meaning that, say, you might
have one that just acts as a

00:01:16.620 --> 00:01:17.800
synthesizer.

00:01:17.800 --> 00:01:20.340
You may have another app
that acts as an effects

00:01:20.340 --> 00:01:20.620
[INAUDIBLE].

00:01:20.620 --> 00:01:24.250
You can connect them, and then
audio signals will flow from

00:01:24.250 --> 00:01:28.180
one app to another, and
you get a lot of

00:01:28.180 --> 00:01:30.100
flexibility that way.

00:01:30.100 --> 00:01:33.090
Now in terms of APIs,
there are two APIs

00:01:33.090 --> 00:01:35.550
for you to work with.

00:01:35.550 --> 00:01:37.430
There's a client API in Java.

00:01:37.430 --> 00:01:41.960
And the purpose of that Java
API is to let you query and

00:01:41.960 --> 00:01:43.930
manipulate the signal
processing graph.

00:01:43.930 --> 00:01:47.450
So you can get a list of the
audio modules that are

00:01:47.450 --> 00:01:48.720
currently available.

00:01:48.720 --> 00:01:50.620
You can connect audio modules.

00:01:50.620 --> 00:01:51.880
You can disconnect them.

00:01:51.880 --> 00:01:54.240
You can enable or
disable them.

00:01:54.240 --> 00:01:59.060
And you can do a number of
other things as well.

00:01:59.060 --> 00:02:03.210
And the second API is the
audio module API itself.

00:02:03.210 --> 00:02:07.080
That one works with Java as well
as C. And that's what you

00:02:07.080 --> 00:02:10.479
use for implementing new audio
functionality, such as, well,

00:02:10.479 --> 00:02:13.520
synthesizers and effects.

00:02:13.520 --> 00:02:15.480
All right, let's bring up
a little control app for

00:02:15.480 --> 00:02:17.090
Patchfield.

00:02:17.090 --> 00:02:20.680
So right now you see we have an
on/off button for enabling

00:02:20.680 --> 00:02:22.800
or disabling audio processing.

00:02:22.800 --> 00:02:25.610
And right off the bat, we
get two audio modules.

00:02:25.610 --> 00:02:31.790
We get one for the microphones
of the device, so we see one

00:02:31.790 --> 00:02:35.080
audio module that has two
outputs, one for each of the

00:02:35.080 --> 00:02:36.650
built-in microphones.

00:02:36.650 --> 00:02:39.890
And we see another audio
module with two inputs.

00:02:39.890 --> 00:02:43.480
And those are the inputs for the
left speaker and for the

00:02:43.480 --> 00:02:44.570
right speaker.

00:02:44.570 --> 00:02:49.290
And for example, I might say
connect one of the microphones

00:02:49.290 --> 00:02:51.030
to one of the speakers.

00:02:51.030 --> 00:02:54.190
And if I were to turn audio
processing on right now, we

00:02:54.190 --> 00:02:55.400
would get horrible feedback.

00:02:55.400 --> 00:02:57.190
So let's do that.

00:02:57.190 --> 00:03:01.430
Instead, let's launch
another app.

00:03:01.430 --> 00:03:05.460
So this one is a very simple
app that just loads a wave

00:03:05.460 --> 00:03:07.240
file and gets ready
to play it.

00:03:07.240 --> 00:03:12.800
And when we go back to our
control app, we see that a new

00:03:12.800 --> 00:03:14.200
audio module has appeared.

00:03:14.200 --> 00:03:18.810
So now we have an audio module
for our wave file.

00:03:18.810 --> 00:03:22.090
And let's bring up yet
another little app.

00:03:22.090 --> 00:03:27.380
So here this app provides
a low pass filter.

00:03:27.380 --> 00:03:33.130
And once again, if I go back to
the control app, there's as

00:03:33.130 --> 00:03:34.900
a new module right here
that represents

00:03:34.900 --> 00:03:36.570
our low pass filter.

00:03:36.570 --> 00:03:39.060
And now we can connect them.

00:03:39.060 --> 00:03:44.150
I send the audio from the wave
file into the low pass filter.

00:03:44.150 --> 00:03:46.220
And I send the output
of the low pass

00:03:46.220 --> 00:03:48.380
filter to the speakers.

00:03:48.380 --> 00:03:52.920
And now if I turn on audio
processing, we

00:03:52.920 --> 00:03:54.170
hear the wave file.

00:03:57.630 --> 00:04:00.890
Now we can go to our
low pass filter.

00:04:00.890 --> 00:04:05.440
And if we play with the cut off
frequency, you can tell

00:04:05.440 --> 00:04:07.730
that the higher frequencies
go away.

00:04:07.730 --> 00:04:10.090
So the low pass filter
acts as expected.

00:04:18.290 --> 00:04:20.564
So that was the core
functionality of Patchfield in

00:04:20.564 --> 00:04:23.080
a nutshell.

00:04:23.080 --> 00:04:24.890
All right, let's take
a look at the code.

00:04:24.890 --> 00:04:28.710
The Patchfield service
implements an interface called

00:04:28.710 --> 00:04:30.780
iPatchfield Patchfield
service.

00:04:30.780 --> 00:04:34.130
And this interface consists
of three types of methods.

00:04:34.130 --> 00:04:37.440
You have methods for
manipulating the state of the

00:04:37.440 --> 00:04:39.130
Patchfield service.

00:04:39.130 --> 00:04:43.010
You have methods for querying
the state of the service.

00:04:43.010 --> 00:04:46.810
And you have methods
for internal use.

00:04:46.810 --> 00:04:50.310
So when you're manipulating the
state of the service, for

00:04:50.310 --> 00:04:54.570
instance, you can turn on
or off audio processing.

00:04:54.570 --> 00:04:58.280
That's what the on/off button
in the control app was for

00:04:58.280 --> 00:05:01.070
that we saw a minute ago.

00:05:01.070 --> 00:05:05.460
You can activate and
deactivate modules.

00:05:05.460 --> 00:05:08.220
You can connect ports of
molecules or you can

00:05:08.220 --> 00:05:09.640
disconnect ports.

00:05:09.640 --> 00:05:12.130
So essentially, you can
make the changes

00:05:12.130 --> 00:05:13.550
that you would expect.

00:05:13.550 --> 00:05:18.390
And then you have matching
methods that tell you, for

00:05:18.390 --> 00:05:21.950
instance, whether two
ports are connected.

00:05:21.950 --> 00:05:24.400
You can get a list of the
audio modules that are

00:05:24.400 --> 00:05:25.750
currently installed.

00:05:25.750 --> 00:05:30.350
And you have a number of
other methods as well.

00:05:30.350 --> 00:05:34.590
Now if you're implementing a
Patchfield client and you

00:05:34.590 --> 00:05:38.880
would like to keep up to date on
changes in the state of the

00:05:38.880 --> 00:05:41.870
Patchfield service, then
you can implement this

00:05:41.870 --> 00:05:45.470
IPatchfieldClient interface.

00:05:45.470 --> 00:05:48.910
Now if you register yourself
with the Patchfield service,

00:05:48.910 --> 00:05:51.450
you will get call backs whenever
something happens.

00:05:51.450 --> 00:05:53.970
So you might get a call back
when a module is created or

00:05:53.970 --> 00:05:57.350
when a module is to deleted,
when ports are connected or

00:05:57.350 --> 00:06:01.640
disconnected, and so on.

00:06:01.640 --> 00:06:03.330
So this was essentially
bookkeeping.

00:06:03.330 --> 00:06:06.720
The interesting part really is
the audio module API, because

00:06:06.720 --> 00:06:10.290
that's where you implement
audio functionality.

00:06:10.290 --> 00:06:16.820
So the foundation of it is a
class called audio molecule.

00:06:16.820 --> 00:06:20.680
And it's an abstract task that
has four methods that you will

00:06:20.680 --> 00:06:22.350
need to implement.

00:06:22.350 --> 00:06:24.140
The most important
off those methods

00:06:24.140 --> 00:06:27.160
is one called configure.

00:06:27.160 --> 00:06:27.760
Where is it?

00:06:27.760 --> 00:06:30.230
Here.

00:06:30.230 --> 00:06:34.750
And the purpose of the configure
method is to connect

00:06:34.750 --> 00:06:37.610
your audio module object to
the corresponding data

00:06:37.610 --> 00:06:40.210
structures in the Patchfield
service.

00:06:40.210 --> 00:06:43.590
And let's see how this
works in practice.

00:06:43.590 --> 00:06:47.130
So let's look at the low pass
module that we saw in action

00:06:47.130 --> 00:06:48.930
in our little demo.

00:06:48.930 --> 00:06:51.950
So here's a module called
low pass module.

00:06:51.950 --> 00:06:57.230
And it extends the audio module
class that we just saw.

00:06:57.230 --> 00:07:01.840
And sure enough, it implements
the configure method that I

00:07:01.840 --> 00:07:03.120
just mentioned.

00:07:03.120 --> 00:07:08.930
So now this configure method
internally just takes the

00:07:08.930 --> 00:07:14.320
handle that it received before
and the number of channels

00:07:14.320 --> 00:07:20.950
that it wants and sends it
to a native method called

00:07:20.950 --> 00:07:22.870
configure native components.

00:07:22.870 --> 00:07:24.270
So let's look at the
implementation

00:07:24.270 --> 00:07:25.920
of that native method.

00:07:25.920 --> 00:07:27.400
That's in a file called
lowpass.c.

00:07:30.220 --> 00:07:32.400
It's right here.

00:07:32.400 --> 00:07:38.350
And this method allocates space
for a data structure

00:07:38.350 --> 00:07:40.970
that will hold all the
information that characterizes

00:07:40.970 --> 00:07:43.020
our low pass filter,
such as optic

00:07:43.020 --> 00:07:45.620
coefficients and filter values.

00:07:45.620 --> 00:07:46.910
And then it goes ahead and

00:07:46.910 --> 00:07:49.390
initializes the data structure.

00:07:49.390 --> 00:07:53.470
And now from the point of view
of the API, the most important

00:07:53.470 --> 00:07:54.850
call is this one right here.

00:07:54.850 --> 00:07:57.990
There's as a function
called am_configure.

00:07:57.990 --> 00:08:01.260
And so that's one establishes
the connection between your

00:08:01.260 --> 00:08:04.250
audio module and the
Patchfield service.

00:08:04.250 --> 00:08:06.950
So this configure method
takes the handle that

00:08:06.950 --> 00:08:09.170
you received early.

00:08:09.170 --> 00:08:12.180
So you receive the handle
in the configure method.

00:08:12.180 --> 00:08:15.890
And you just hand it over to
this function call right here.

00:08:15.890 --> 00:08:20.940
Then it takes a process function
that you implement

00:08:20.940 --> 00:08:22.930
and that provides the
audio processing

00:08:22.930 --> 00:08:24.570
capability that you want.

00:08:24.570 --> 00:08:27.470
And then you give it
the data structure

00:08:27.470 --> 00:08:30.160
that we just created.

00:08:30.160 --> 00:08:33.040
Let's take a look at our audio
processing function.

00:08:33.040 --> 00:08:34.290
It's right here.

00:08:38.179 --> 00:08:41.630
So this one initially just
retrieves the data structure

00:08:41.630 --> 00:08:43.539
that we located earlier.

00:08:43.539 --> 00:08:50.340
And then it extracts the filter
update coefficient from

00:08:50.340 --> 00:08:51.980
this data structure.

00:08:51.980 --> 00:08:54.050
And there's one crucial
point in here.

00:08:54.050 --> 00:08:59.350
When it retrieves this update
coefficient using a GCC

00:08:59.350 --> 00:09:02.520
built-in called
sink_fetch_and_or.

00:09:02.520 --> 00:09:07.520
And the point here is to access
this coefficient in an

00:09:07.520 --> 00:09:09.110
atomic way.

00:09:09.110 --> 00:09:11.510
Because we need to worry about
threat safety here.

00:09:11.510 --> 00:09:15.440
This coefficient may be changed
by a different threat.

00:09:15.440 --> 00:09:19.070
When you move the slider in
the UI, then the UI thread

00:09:19.070 --> 00:09:20.960
will change this coefficient.

00:09:20.960 --> 00:09:23.710
But we're in the audio
thread here.

00:09:23.710 --> 00:09:26.150
We need to make sure we're
properly synchronized, and

00:09:26.150 --> 00:09:31.060
this GCC built-in takes
care of that.

00:09:31.060 --> 00:09:33.500
So now once we've retrieved our
third [INAUDIBLE] update

00:09:33.500 --> 00:09:36.620
coefficient in a threat-safe
fashion, we can do the actual

00:09:36.620 --> 00:09:38.160
signal processing.

00:09:38.160 --> 00:09:40.150
And that's happening
right here.

00:09:40.150 --> 00:09:42.990
So we iterate over
our buffers.

00:09:42.990 --> 00:09:45.110
We read our input samples.

00:09:45.110 --> 00:09:47.780
We perform our signal
processing magic.

00:09:47.780 --> 00:09:51.200
And we write our
output buffers.

00:09:51.200 --> 00:09:54.360
So in particular, if you've
studied signal processing,

00:09:54.360 --> 00:09:57.100
then you will recognize
this line right here.

00:09:57.100 --> 00:10:00.480
This is just the update formula
although of a simple

00:10:00.480 --> 00:10:02.550
RC low pass filter.

00:10:02.550 --> 00:10:05.620
And that's it as far as
the code is concerned.

00:10:05.620 --> 00:10:07.000
All right, so that's
it for now.

00:10:07.000 --> 00:10:09.270
You can find the source
code at GitHub.

00:10:09.270 --> 00:10:14.320
And there's a forum at Google
Groups and don't hesitate to

00:10:14.320 --> 00:10:16.660
get in touch if you have any
questions or comments.

00:10:16.660 --> 00:10:17.910
Happy hacking.

