WEBVTT
Kind: captions
Language: en

00:00:05.868 --> 00:00:06.560
CHET HAASE: Hi.

00:00:06.560 --> 00:00:10.640
I'm Chet Haase, an engineer in
the Android Team at Google.

00:00:10.640 --> 00:00:12.380
I work on graphics and
animation stuff.

00:00:12.380 --> 00:00:15.940
And today I wanted to talk about
the topics of bitmaps.

00:00:15.940 --> 00:00:19.400
In particular, I want to talk
about bitmaps and garbage.

00:00:19.400 --> 00:00:22.100
First, a history lesson
might help.

00:00:22.100 --> 00:00:26.650
Prior to the 3.0 release, we
managed bitmap memory at the

00:00:26.650 --> 00:00:27.570
native level.

00:00:27.570 --> 00:00:30.020
The VM knew about it, but it
really didn't manage it, and

00:00:30.020 --> 00:00:32.520
you, in your application, were
responsible for calling a

00:00:32.520 --> 00:00:34.910
recycle to very actively
manage that.

00:00:34.910 --> 00:00:36.830
When you're done with bitmap,
you call recycle.

00:00:36.830 --> 00:00:38.510
That gets rid of the memory.

00:00:38.510 --> 00:00:42.540
Otherwise, you may run out of
enough native memory to

00:00:42.540 --> 00:00:44.520
allocate another bitmap.

00:00:44.520 --> 00:00:49.040
So this was a very careful thing
that applications needed

00:00:49.040 --> 00:00:51.010
to manage very tightly.

00:00:51.010 --> 00:00:53.830
We decided that it would be a
little bit better for everyone

00:00:53.830 --> 00:00:55.930
if we actually managed
that for you.

00:00:55.930 --> 00:00:58.970
And we brought the bitmap memory
back into the VM along

00:00:58.970 --> 00:01:00.040
with the rest of the
memory that the

00:01:00.040 --> 00:01:01.150
garbage collector manages.

00:01:01.150 --> 00:01:04.060
So now when you allocate
memory for a bitmap, we

00:01:04.060 --> 00:01:06.890
allocate it on the virtual
machine heap.

00:01:06.890 --> 00:01:09.510
And then we know when references
to that memory are

00:01:09.510 --> 00:01:11.500
gone so that we can collect
it appropriately.

00:01:11.500 --> 00:01:14.650
In particular, when a reference
to a large bitmap

00:01:14.650 --> 00:01:17.900
goes away and you want to
allocate another bitmap, then

00:01:17.900 --> 00:01:19.690
we can see that, well, there's
no reference to

00:01:19.690 --> 00:01:20.370
this other one there.

00:01:20.370 --> 00:01:23.260
We can collect it in order to
make room for the new one that

00:01:23.260 --> 00:01:26.150
needs to come into the
heap at that time.

00:01:26.150 --> 00:01:27.640
So all of this is great.

00:01:27.640 --> 00:01:30.380
Except that it gets into
situations where maybe the GC

00:01:30.380 --> 00:01:33.770
is going to be triggered more
than it was before, because

00:01:33.770 --> 00:01:35.850
you're not managing your
own memory manually.

00:01:35.850 --> 00:01:38.350
Instead we're managing
that memory for you.

00:01:38.350 --> 00:01:41.400
And we manage memory by having
the garbage collector kick in

00:01:41.400 --> 00:01:43.310
and collect things
when it needs to.

00:01:43.310 --> 00:01:46.060
If there's not a memory in the
heap, we'll collect stuff that

00:01:46.060 --> 00:01:48.760
needs to be collected, including
large bitmaps.

00:01:48.760 --> 00:01:52.410
Now the trick to this is that
large amounts of memory can be

00:01:52.410 --> 00:01:53.590
more expensive to collect.

00:01:53.590 --> 00:01:56.230
And large heaps are more
expensive to collect.

00:01:56.230 --> 00:01:59.450
So if there's large pieces
of memory due to bitmaps

00:01:59.450 --> 00:02:03.260
constantly churning through the
system, then we're going

00:02:03.260 --> 00:02:05.600
to be collecting memory
for them a lot, right?

00:02:05.600 --> 00:02:07.900
If you're constantly, like
on every frame--

00:02:07.900 --> 00:02:11.790
I saw an application like this
recently, where on every frame

00:02:11.790 --> 00:02:15.630
of every animation they were
loading a new bitmap and

00:02:15.630 --> 00:02:16.790
getting rid of the old one.

00:02:16.790 --> 00:02:19.050
And in the old system, they
would actively manage this and

00:02:19.050 --> 00:02:21.930
call recycle, and the other one
would be loaded in place.

00:02:21.930 --> 00:02:22.760
And life was good.

00:02:22.760 --> 00:02:26.400
But as of 3.0, that meant that
the old one was on the heap.

00:02:26.400 --> 00:02:27.800
The new one wanted to
be on the heap.

00:02:27.800 --> 00:02:30.210
There wasn't enough room
for the both of them.

00:02:30.210 --> 00:02:32.550
And so it needed to collect
from the first one.

00:02:32.550 --> 00:02:36.310
Relatively expensive garbage
collection to then load in the

00:02:36.310 --> 00:02:36.760
second one.

00:02:36.760 --> 00:02:38.280
Next frame around, same thing.

00:02:38.280 --> 00:02:39.970
Needs to collect the old
one to make enough

00:02:39.970 --> 00:02:41.790
room for the new one.

00:02:41.790 --> 00:02:45.325
Now that's a reality of dealing
with memory management

00:02:45.325 --> 00:02:46.530
and garbage collectors.

00:02:46.530 --> 00:02:47.830
And it's decent enough.

00:02:47.830 --> 00:02:49.830
But there's actually a really
good way that you can work

00:02:49.830 --> 00:02:51.080
around that problem.

00:02:51.080 --> 00:02:53.470
And in particular, if you're
working with bitmaps that are

00:02:53.470 --> 00:02:56.470
exactly the same size, which
this particular application

00:02:56.470 --> 00:02:59.020
was, then you can actually
reuse bitmaps.

00:02:59.020 --> 00:03:02.310
So you can have one bitmap that
everything gets loaded

00:03:02.310 --> 00:03:06.000
into along the way and save
yourself some serious garbage

00:03:06.000 --> 00:03:09.190
collection and performance
along the way.

00:03:09.190 --> 00:03:11.660
So let's take a look
at a quick demo.

00:03:11.660 --> 00:03:13.940
I call this demo Bitmap
Allocation.

00:03:13.940 --> 00:03:15.290
And it's a picture viewer.

00:03:15.290 --> 00:03:18.620
I have some pictures that I've
loaded up in the background.

00:03:18.620 --> 00:03:21.470
And we can click through these
and see these other images.

00:03:21.470 --> 00:03:24.860
And each one of these images is
getting loaded on the fly

00:03:24.860 --> 00:03:27.400
as we go through that just for
the purposes of this demo.

00:03:27.400 --> 00:03:29.550
And then I print out the number
of milliseconds that it

00:03:29.550 --> 00:03:31.430
took to load each of these
images up at the top.

00:03:31.430 --> 00:03:36.700
So these loads took 290,
326, 304, 340, 320.

00:03:36.700 --> 00:03:39.835
So a little non-deterministic
based on what else is going on

00:03:39.835 --> 00:03:41.330
in the system.

00:03:41.330 --> 00:03:44.190
And how long GCs took
and stuff like that.

00:03:44.190 --> 00:03:47.780
Now if we reuse the bitmap,
then, again, this is a little

00:03:47.780 --> 00:03:49.380
bit hard to see, because
the numbers can be

00:03:49.380 --> 00:03:50.050
a little bit erratic.

00:03:50.050 --> 00:03:53.010
But what I see in runs that I've
done, at least on other

00:03:53.010 --> 00:03:56.770
devices, is a savings of, in
general, about 10% to 20%,

00:03:56.770 --> 00:03:57.630
which is not bad.

00:03:57.630 --> 00:04:00.570
If you're talking about 300
milliseconds in a frame,

00:04:00.570 --> 00:04:03.300
saving 30 milliseconds
is a big deal.

00:04:03.300 --> 00:04:05.510
Now ideally you'd actually
find a better way to load

00:04:05.510 --> 00:04:08.280
these images than loading them
on the fly when you're ready

00:04:08.280 --> 00:04:09.680
to draw them.

00:04:09.680 --> 00:04:11.140
That's not the best way
to go about it.

00:04:11.140 --> 00:04:14.380
But the point of this demo is
more to show the raw amount of

00:04:14.380 --> 00:04:16.630
time that it might take
to load these things.

00:04:16.630 --> 00:04:18.829
And a lot of that is the
garbage collection.

00:04:18.829 --> 00:04:20.110
So let's take a quick look.

00:04:20.110 --> 00:04:23.620
Before we look at the code we
can take a look at a log that

00:04:23.620 --> 00:04:27.540
I ran right before this where
I was seeing what happened

00:04:27.540 --> 00:04:30.200
before and after I checked
that little box that said

00:04:30.200 --> 00:04:31.360
Reuse the Bitmap.

00:04:31.360 --> 00:04:32.610
And here's what we get.

00:04:32.610 --> 00:04:33.740
Oh, let's see.

00:04:33.740 --> 00:04:36.180
Here's what we got before
I checked the box.

00:04:36.180 --> 00:04:38.270
Is nothing.

00:04:38.270 --> 00:04:39.190
This was the output.

00:04:39.190 --> 00:04:42.450
Not the GC output above, but
this output here is what we

00:04:42.450 --> 00:04:45.120
saw when we reused the bitmap.

00:04:45.120 --> 00:04:48.580
But when we're not reusing the
bitmap, this is what we see.

00:04:48.580 --> 00:04:52.900
On every frame we're incurring
potentially very expensive

00:04:52.900 --> 00:04:53.640
garbage collection.

00:04:53.640 --> 00:04:55.650
Some of that runs in parallel.

00:04:55.650 --> 00:05:00.520
But we still have pauses of 21
milliseconds for Alex, 3

00:05:00.520 --> 00:05:02.780
milliseconds here, 12
milliseconds there.

00:05:02.780 --> 00:05:06.390
If you imagine that a 60-frame
per second application only

00:05:06.390 --> 00:05:09.810
has 16 milliseconds in order
to draw each frame, these

00:05:09.810 --> 00:05:10.860
numbers are huge.

00:05:10.860 --> 00:05:12.780
You really want to avoid
them if you can.

00:05:12.780 --> 00:05:14.830
So how do we do that?

00:05:14.830 --> 00:05:17.250
We use Bitmap Factory Options.

00:05:17.250 --> 00:05:18.170
So let's go in here.

00:05:18.170 --> 00:05:18.860
Take a look at the code.

00:05:18.860 --> 00:05:21.960
This is the bitmap
application code.

00:05:21.960 --> 00:05:24.670
And here we have the check box
that determines whether we are

00:05:24.670 --> 00:05:26.710
actually going to
do reuse or not.

00:05:26.710 --> 00:05:31.630
And in here we're going to
create our bitmap that gets

00:05:31.630 --> 00:05:33.900
reused on the fly.

00:05:33.900 --> 00:05:38.520
So first of all we're going to
decode the initial image that

00:05:38.520 --> 00:05:39.390
we start with.

00:05:39.390 --> 00:05:41.380
This application does assume
that all the bitmaps

00:05:41.380 --> 00:05:42.320
are the same size.

00:05:42.320 --> 00:05:46.260
And this is a restriction with
reusing the bitmaps with this

00:05:46.260 --> 00:05:49.950
API, is that it will only work
for bitmaps of the same size.

00:05:49.950 --> 00:05:52.550
So we get the size of
the initial bitmap.

00:05:52.550 --> 00:05:53.820
And we get only the size.

00:05:53.820 --> 00:05:56.590
We don't force it to actually
load that bitmap yet by using

00:05:56.590 --> 00:05:59.220
the inJust Decode
Bounds Options.

00:05:59.220 --> 00:06:01.160
And that will return the width
and the height that we can

00:06:01.160 --> 00:06:04.440
then use in our Create
Bitmap Call.

00:06:04.440 --> 00:06:07.060
So we use the width and the
height that we need to sort of

00:06:07.060 --> 00:06:10.350
get this sandbox we're going to
load all these things into.

00:06:10.350 --> 00:06:12.230
Then we reset that flag.

00:06:12.230 --> 00:06:16.450
And we set the inBitmap Flag.

00:06:16.450 --> 00:06:21.120
And that is the new API that was
introduced in 3.0 at the

00:06:21.120 --> 00:06:23.370
same time as the other
change to the memory

00:06:23.370 --> 00:06:24.990
management of bitmaps.

00:06:24.990 --> 00:06:28.110
We set that equal to
this sandbox bitmap

00:06:28.110 --> 00:06:29.760
that we've just created.

00:06:29.760 --> 00:06:31.520
And then we set the inSample
Size to 1.

00:06:31.520 --> 00:06:35.720
And this is a necessary and
unfortunate bug that got fixed

00:06:35.720 --> 00:06:37.780
in a recent release where if
you didn't set the sample

00:06:37.780 --> 00:06:39.210
size, it wouldn't do
the right thing.

00:06:39.210 --> 00:06:41.820
So you do need to set it to
what would be the default

00:06:41.820 --> 00:06:43.840
option, inSample Size of 1.

00:06:43.840 --> 00:06:45.840
And then we decode
the resource.

00:06:45.840 --> 00:06:47.320
And away we go.

00:06:47.320 --> 00:06:48.870
So now we're in our
Click Listener.

00:06:48.870 --> 00:06:50.730
Every time you click on the
image, we're going to load in

00:06:50.730 --> 00:06:51.930
the next image.

00:06:51.930 --> 00:06:54.060
And we're either going
to reuse that

00:06:54.060 --> 00:06:55.240
bitmap or we're not.

00:06:55.240 --> 00:06:58.590
So if the check box is checked,
we're going to reuse

00:06:58.590 --> 00:06:59.060
the bitmap.

00:06:59.060 --> 00:07:01.190
And we're going to do that by
saying the bitmap options

00:07:01.190 --> 00:07:04.090
equals these options that we've
created above, which has

00:07:04.090 --> 00:07:07.320
this inBitmap Parameter set
in it, which tells--

00:07:07.320 --> 00:07:11.060
it's a trigger to the code to
say, OK, this is the sandbox

00:07:11.060 --> 00:07:14.200
where I'm going to actually
load this new bitmap into.

00:07:14.200 --> 00:07:18.460
And so we set the inBitmap
Flag there.

00:07:18.460 --> 00:07:21.290
And then I was just issuing some
timing, because this is

00:07:21.290 --> 00:07:24.130
how I produce the times that are
spit out in the UI so we

00:07:24.130 --> 00:07:25.860
can see how long these
things take.

00:07:25.860 --> 00:07:28.420
We then decode the resource, and
that will either reuse the

00:07:28.420 --> 00:07:31.800
bitmap or not, depending on
whether we set the bitmap

00:07:31.800 --> 00:07:32.980
parameter above.

00:07:32.980 --> 00:07:36.880
And then we set the new image
bitmap in the image view.

00:07:36.880 --> 00:07:39.830
Finally, we get the final
time that it took and

00:07:39.830 --> 00:07:41.280
display that in the UI.

00:07:41.280 --> 00:07:42.270
And that's it.

00:07:42.270 --> 00:07:44.710
Not very hard to use, but
definitely worth using.

00:07:44.710 --> 00:07:47.210
Especially if you're in the case
where you're constantly

00:07:47.210 --> 00:07:49.830
loading in new bitmaps and those
bitmaps are the same

00:07:49.830 --> 00:07:52.480
size as other bitmaps that
you're now done with.

00:07:52.480 --> 00:07:54.930
This basically allows a garbage
collector get out of

00:07:54.930 --> 00:07:57.420
the way, because there's nothing
to collect if you're

00:07:57.420 --> 00:08:00.300
loading the new bitmap into
the place of the old one.

00:08:00.300 --> 00:08:03.550
So check out bitmap options,
in particular inBitmap.

00:08:03.550 --> 00:08:07.000
And save some grief over garbage
collection times.

00:08:07.000 --> 00:08:08.250
Thanks.

