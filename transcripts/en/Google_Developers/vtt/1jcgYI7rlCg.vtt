WEBVTT
Kind: captions
Language: en

00:00:07.950 --> 00:00:09.450
CHRIS RAMSDALE:
Hello, and thank you

00:00:09.450 --> 00:00:12.940
for coming out to this
year's Google I/O conference.

00:00:12.940 --> 00:00:14.310
I'm Chris Ramsdale.

00:00:14.310 --> 00:00:17.030
KATE VOLKOVA: I'm Kate Volkova,
software engineer on App Engine

00:00:17.030 --> 00:00:17.617
team.

00:00:17.617 --> 00:00:18.450
CHRIS RAMSDALE: Yes.

00:00:18.450 --> 00:00:20.160
And today, if you
didn't get a chance

00:00:20.160 --> 00:00:21.710
to attend the keynote
session, there

00:00:21.710 --> 00:00:22.970
was a lot of great
technologies that

00:00:22.970 --> 00:00:24.303
were announced and talked about.

00:00:24.303 --> 00:00:27.280
Android had a slew of amazing
technology that's coming out,

00:00:27.280 --> 00:00:29.102
for both the consumer
and the developer.

00:00:29.102 --> 00:00:30.560
Chrome had some
great advancements.

00:00:30.560 --> 00:00:32.476
The Cloud Platform has
some great technologies

00:00:32.476 --> 00:00:33.730
that were coming out.

00:00:33.730 --> 00:00:36.280
And I'm happy to talk
about a few of those

00:00:36.280 --> 00:00:38.500
as we go through
the session today.

00:00:38.500 --> 00:00:40.000
So if you did get
to attend, you saw

00:00:40.000 --> 00:00:42.416
that our director of product
management, Greg DeMichillie,

00:00:42.416 --> 00:00:45.480
was using a demo application
called WalkShare, which

00:00:45.480 --> 00:00:47.230
was an Android client
that was hooked up

00:00:47.230 --> 00:00:49.313
to back-end services that
are running on our Cloud

00:00:49.313 --> 00:00:52.180
Platform-- namely managed VMs
that were running on top of App

00:00:52.180 --> 00:00:53.950
Engine and a Redis
Cluster that was

00:00:53.950 --> 00:00:55.440
running on top of
Compute Engine--

00:00:55.440 --> 00:00:57.280
and using the Datastore
to store data.

00:00:57.280 --> 00:00:59.404
That allowed you to save
walks, and then share them

00:00:59.404 --> 00:01:02.560
with your friends, and then have
your friends comment on them.

00:01:02.560 --> 00:01:05.117
Well, today in this session,
Zero to Hero with Google Cloud

00:01:05.117 --> 00:01:07.450
Platform, we're going to take
a look at that application

00:01:07.450 --> 00:01:09.540
and do a deeper dive
into how we built it,

00:01:09.540 --> 00:01:13.159
using our unified tool
chain, our managed platform.

00:01:13.159 --> 00:01:15.700
Kate's going to talk a bit about
how we run Google production

00:01:15.700 --> 00:01:18.470
services on your laptop so you
can be an efficient developer.

00:01:18.470 --> 00:01:19.840
And then finally, we'll
look at some advancements

00:01:19.840 --> 00:01:22.210
we're making in the DevOp
space so that you can actually

00:01:22.210 --> 00:01:23.810
debug your application
in production

00:01:23.810 --> 00:01:27.510
and feel confident
about what's running.

00:01:27.510 --> 00:01:29.020
So to get started,
we need to start

00:01:29.020 --> 00:01:32.010
with the foundation, a
cloud platform project.

00:01:32.010 --> 00:01:33.370
And that's super simple to do.

00:01:33.370 --> 00:01:36.080
All we need to do is bump out
to our developer console here.

00:01:36.080 --> 00:01:37.210
We do Create Project.

00:01:37.210 --> 00:01:40.467
We'll give it a sample
name, demo name.

00:01:40.467 --> 00:01:41.550
We'll call it walkshare10.

00:01:44.255 --> 00:01:46.969
And we'll go ahead
and create that.

00:01:46.969 --> 00:01:49.010
Now, that's going to take
about 10 to 15 seconds.

00:01:49.010 --> 00:01:51.420
And while that
does happen, let's

00:01:51.420 --> 00:01:53.290
take a look at
some of the changes

00:01:53.290 --> 00:01:56.390
that we've made in our Developer
Console since our Cloud event

00:01:56.390 --> 00:01:57.710
back in March.

00:01:57.710 --> 00:01:59.960
So the focus has been on
taking the user experience

00:01:59.960 --> 00:02:02.130
and really consolidating
it down to the core pieces

00:02:02.130 --> 00:02:03.450
of your application.

00:02:03.450 --> 00:02:06.120
So as you can see on
the left-hand side,

00:02:06.120 --> 00:02:09.750
we have APIs and Auth so that
your application connect back

00:02:09.750 --> 00:02:12.136
to Google Cloud services
and other Google services,

00:02:12.136 --> 00:02:14.260
as well as third party
applications connecting back

00:02:14.260 --> 00:02:16.520
into your application, as
well, via the endpoints

00:02:16.520 --> 00:02:18.020
that you might
surface through Cloud

00:02:18.020 --> 00:02:20.570
Endpoints or any RESTful style.

00:02:20.570 --> 00:02:21.920
We have Monitoring, right?

00:02:21.920 --> 00:02:24.089
So a consolidated
view into the metrics

00:02:24.089 --> 00:02:26.380
that are coming from your
application-- the performance

00:02:26.380 --> 00:02:28.810
of that application as well
as centralized logging,

00:02:28.810 --> 00:02:30.810
coming from Compute Engine
and App Engine, which

00:02:30.810 --> 00:02:32.227
I'll touch on
throughout the talk.

00:02:32.227 --> 00:02:34.476
Source Code for storing your
source code in the cloud,

00:02:34.476 --> 00:02:36.420
as well as doing your
builds in the cloud.

00:02:36.420 --> 00:02:38.920
Compute, a consolidated home
for both App Engine and Compute

00:02:38.920 --> 00:02:39.619
Engine.

00:02:39.619 --> 00:02:41.410
And finally, Storage
for all things storage

00:02:41.410 --> 00:02:44.280
related, whether it be
non-relational, relational,

00:02:44.280 --> 00:02:45.970
or blob data.

00:02:45.970 --> 00:02:49.000
And then Big Data for
our analytics tools,

00:02:49.000 --> 00:02:50.880
such as BigQuery
and Cloud Dataflow,

00:02:50.880 --> 00:02:52.900
that we announced today.

00:02:52.900 --> 00:02:55.710
So now we'll see
that our application

00:02:55.710 --> 00:02:57.260
has been successfully built.

00:02:57.260 --> 00:02:59.250
So simple enough?

00:02:59.250 --> 00:03:02.172
Well, actually,
through that process,

00:03:02.172 --> 00:03:03.630
within that 10 to
15 seconds, we've

00:03:03.630 --> 00:03:05.171
created quite a bit
of infrastructure

00:03:05.171 --> 00:03:07.030
for you and on your behalf.

00:03:07.030 --> 00:03:10.890
We've created namespaces so that
your application can connect

00:03:10.890 --> 00:03:13.190
back to our multi-tenant
services, our cloud services,

00:03:13.190 --> 00:03:17.180
via Memcache, Datastore for
storing NoSQL type data, task

00:03:17.180 --> 00:03:19.480
queues for communicating
within your application.

00:03:19.480 --> 00:03:21.063
We've created those
namespaces for you

00:03:21.063 --> 00:03:23.255
so you can securely hook
into those services.

00:03:23.255 --> 00:03:25.130
We've given you a
centralized logs repository

00:03:25.130 --> 00:03:27.602
so you can funnel all of your
data from your compute back

00:03:27.602 --> 00:03:29.560
to one spot, where you
can view it and interact

00:03:29.560 --> 00:03:32.564
with it via the Logs API or
through our Developer Console.

00:03:32.564 --> 00:03:34.730
We've given you a Git
repository so you can actually

00:03:34.730 --> 00:03:36.744
store all your source
code into the cloud,

00:03:36.744 --> 00:03:38.160
enable things like
Cloud Debugger,

00:03:38.160 --> 00:03:40.260
like you saw today from Greg.

00:03:40.260 --> 00:03:42.260
And then we also
give you agents that

00:03:42.260 --> 00:03:45.097
are running on top of these
VMs that are hooking back

00:03:45.097 --> 00:03:46.430
into all of our monitoring data.

00:03:46.430 --> 00:03:48.700
So they're monitoring the
applications that are running,

00:03:48.700 --> 00:03:50.533
they're monitoring your
compute, and they're

00:03:50.533 --> 00:03:55.540
funneling all of that data
back into the dashboards

00:03:55.540 --> 00:03:56.920
that we have.

00:03:56.920 --> 00:03:57.500
OK, great.

00:03:57.500 --> 00:03:59.250
So now that we've got
this up and running,

00:03:59.250 --> 00:04:01.125
we've got our project
created, let's actually

00:04:01.125 --> 00:04:03.030
add some source code to it.

00:04:03.030 --> 00:04:06.005
And I want to do that
with our Google Cloud SDK.

00:04:06.005 --> 00:04:08.060
It's our unified tool
chain that brings together

00:04:08.060 --> 00:04:09.920
all the services
within Cloud, be it

00:04:09.920 --> 00:04:13.080
App Engine, Compute Engine,
Cloud Storage, Cloud Datastore,

00:04:13.080 --> 00:04:14.630
pulls it all into
one unified tool

00:04:14.630 --> 00:04:17.589
chain so you have those services
available at your fingertips.

00:04:17.589 --> 00:04:19.790
So see that if we bump
out to our terminal

00:04:19.790 --> 00:04:22.980
here, I have some local source.

00:04:22.980 --> 00:04:25.390
And what I want to do is I
want to take that local source

00:04:25.390 --> 00:04:27.660
and push it into the cloud,
and then actually have it built

00:04:27.660 --> 00:04:29.201
and be deployed,
and we can check out

00:04:29.201 --> 00:04:30.520
our application running.

00:04:30.520 --> 00:04:31.976
So this is pretty
straightforward.

00:04:31.976 --> 00:04:34.350
I'm going to use our G Cloud
application, or Google Cloud

00:04:34.350 --> 00:04:35.680
SDK.

00:04:35.680 --> 00:04:38.110
And since I'm terrible about
remembering command line

00:04:38.110 --> 00:04:39.500
options, command
line parameters,

00:04:39.500 --> 00:04:41.541
I'm happy that they actually
have code completion

00:04:41.541 --> 00:04:43.420
and command completion
built into the SDK.

00:04:43.420 --> 00:04:45.097
So if I just do a
double tap, I'll

00:04:45.097 --> 00:04:46.430
get the commands that I can run.

00:04:46.430 --> 00:04:47.770
You know, sometimes
in life, it's

00:04:47.770 --> 00:04:50.145
just the little things that
actually make your life much,

00:04:50.145 --> 00:04:50.650
much better.

00:04:50.650 --> 00:04:52.870
So I do gcloud init, and we'll
use that same application

00:04:52.870 --> 00:04:54.620
that we-- same project
that we just built.

00:04:58.171 --> 00:04:59.920
All right, and that's
going to go through,

00:04:59.920 --> 00:05:02.211
and it's going to create some
local directories for me,

00:05:02.211 --> 00:05:05.700
in which lies some metadata
about the Git repository.

00:05:05.700 --> 00:05:08.221
All right, let's clear
that for ease of use.

00:05:08.221 --> 00:05:10.595
Now, what we'll do is we'll
navigate into that directory,

00:05:10.595 --> 00:05:11.803
and we'll copy in our source.

00:05:16.221 --> 00:05:17.890
OK, so we get a
Java application,

00:05:17.890 --> 00:05:20.260
represented by a pom.xml
file and some source.

00:05:20.260 --> 00:05:22.510
What we'll do is we're going
to go ahead and add that.

00:05:26.280 --> 00:05:26.920
And commit.

00:05:30.848 --> 00:05:34.537
Let's see, initial
commit for the comment.

00:05:34.537 --> 00:05:35.620
All right, all looks good.

00:05:35.620 --> 00:05:37.460
And then finally, if
we just do a Git push,

00:05:37.460 --> 00:05:39.035
it'll push that
up into our Repo.

00:05:45.120 --> 00:05:46.260
OK, there we go.

00:05:46.260 --> 00:05:48.801
So it's taking my local source
and pushing it into the cloud.

00:05:50.910 --> 00:05:52.910
And the idea there
is that we want

00:05:52.910 --> 00:05:54.660
you to be a productive
developer and allow

00:05:54.660 --> 00:05:57.000
you to use the tools that
you're used to, in this case,

00:05:57.000 --> 00:06:01.880
Git, to develop locally
and then finally, run.

00:06:01.880 --> 00:06:04.620
And I mean run, I mean in
Google production data centers.

00:06:04.620 --> 00:06:07.620
So as this Git push is going
from source into the cloud,

00:06:07.620 --> 00:06:09.290
into that Git
repository, we're going

00:06:09.290 --> 00:06:10.160
to see that there
are services that

00:06:10.160 --> 00:06:12.120
are picking it up and
actually building it.

00:06:12.120 --> 00:06:15.790
So let's funnel back over
to our developer console.

00:06:15.790 --> 00:06:18.897
And if we go to
our project, we do

00:06:18.897 --> 00:06:20.230
a refresh on the Git repository.

00:06:24.420 --> 00:06:26.790
OK, so we see my source
code now, up in the cloud.

00:06:26.790 --> 00:06:29.600
And you see my last comment,
which was just initial commit.

00:06:29.600 --> 00:06:31.410
And then since this
is a Java application,

00:06:31.410 --> 00:06:32.960
we need to build it somewhere.

00:06:32.960 --> 00:06:35.460
What we'll see is if we click
down into the Releases section

00:06:35.460 --> 00:06:38.549
here, we should see a build
that has been kicked off.

00:06:38.549 --> 00:06:39.465
Give it just a second.

00:06:43.691 --> 00:06:44.190
OK.

00:06:44.190 --> 00:06:44.720
There we go.

00:06:44.720 --> 00:06:46.428
And actually, by this
time, it's actually

00:06:46.428 --> 00:06:47.870
build, tested, and deployed.

00:06:47.870 --> 00:06:49.477
So where is it
actually building?

00:06:49.477 --> 00:06:51.685
So we saw that we have a
Git repository in the cloud.

00:06:51.685 --> 00:06:53.250
I pushed everything up there.

00:06:53.250 --> 00:06:54.690
Something had to kick in.

00:06:54.690 --> 00:06:56.807
What we're doing
is, on your behalf,

00:06:56.807 --> 00:06:58.890
we're spinning up a Compute
Engine virtual machine

00:06:58.890 --> 00:07:00.100
that's running Jenkins.

00:07:00.100 --> 00:07:02.095
So to do continuous
integration for you,

00:07:02.095 --> 00:07:04.470
it's picking up that push,
because there's hooks into it,

00:07:04.470 --> 00:07:06.660
it's building on the VM,
it's running my tests.

00:07:06.660 --> 00:07:09.240
And if all my tests pass, it
actually does a deploy out

00:07:09.240 --> 00:07:10.589
to App Engine.

00:07:10.589 --> 00:07:11.880
And we can see that right here.

00:07:11.880 --> 00:07:12.860
And if we drill
in, we can see the

00:07:12.860 --> 00:07:15.200
build logs and the diff
and everything like that.

00:07:15.200 --> 00:07:16.807
So if everything is
working correctly,

00:07:16.807 --> 00:07:18.640
we should have a new
version up and running.

00:07:18.640 --> 00:07:27.620
And if I go to
walkshare10.appspot.com, voila.

00:07:27.620 --> 00:07:29.980
So there's our
application running.

00:07:29.980 --> 00:07:51.350
If I click here-- so we'll
post a silly comment.

00:07:51.350 --> 00:07:51.850
Good.

00:07:51.850 --> 00:07:53.670
Everything is saved.

00:07:53.670 --> 00:07:55.650
So now we've pushed
everything into the cloud,

00:07:55.650 --> 00:07:57.840
and it's running.

00:07:57.840 --> 00:08:00.780
Now, once this is
running at scale,

00:08:00.780 --> 00:08:03.030
let's say that we wanted to
do some sentiment analysis

00:08:03.030 --> 00:08:05.070
or something on
this application.

00:08:05.070 --> 00:08:08.219
So I've got hundreds
of thousands

00:08:08.219 --> 00:08:10.510
of comments that are running
in, that are being stored.

00:08:10.510 --> 00:08:12.660
And I want to take and do
some sentiment analysis

00:08:12.660 --> 00:08:15.020
on those comments
that are coming in.

00:08:15.020 --> 00:08:16.630
Now, to do that, I
know that I'm going

00:08:16.630 --> 00:08:18.690
to need a bigger,
beefier machine.

00:08:18.690 --> 00:08:21.202
I'll need more CPU and
more memory, right?

00:08:21.202 --> 00:08:23.160
And furthermore, I'll
need some kind of library

00:08:23.160 --> 00:08:24.900
that will allow
me to do analysis

00:08:24.900 --> 00:08:26.499
on the streams
that are coming in.

00:08:26.499 --> 00:08:28.290
Something like OpenCL,
which is a fantastic

00:08:28.290 --> 00:08:29.757
library for doing this.

00:08:29.757 --> 00:08:31.840
Now, the problem is that,
historically, App Engine

00:08:31.840 --> 00:08:34.090
hasn't supported this.

00:08:34.090 --> 00:08:35.950
For security and
scalability reasons,

00:08:35.950 --> 00:08:39.590
you're not able to run native
code, so C or C++ code,

00:08:39.590 --> 00:08:43.010
or access things like the file
system or the network stack.

00:08:43.010 --> 00:08:45.620
It also doesn't have the memory
configurations and the CPU

00:08:45.620 --> 00:08:47.310
configurations, the
footprints, that I

00:08:47.310 --> 00:08:50.056
need to run sentiment analysis.

00:08:50.056 --> 00:08:51.430
At the same time,
though, I don't

00:08:51.430 --> 00:08:53.888
want to jump all the way over
into unmanaged infrastructure

00:08:53.888 --> 00:08:55.860
as a service and run
all those VMs myself.

00:08:59.510 --> 00:09:02.970
So lucky for me that back
in March of this year,

00:09:02.970 --> 00:09:04.540
at our Cloud
Platform Live event,

00:09:04.540 --> 00:09:07.060
we launched into limited
preview a new feature

00:09:07.060 --> 00:09:10.620
called Managed VMs, which
takes the management platform

00:09:10.620 --> 00:09:12.820
capabilities of App
Engine and merges those

00:09:12.820 --> 00:09:15.630
with the power, the control,
and the flexibility of Compute

00:09:15.630 --> 00:09:18.160
Engine, thus providing you
the best of both worlds.

00:09:20.930 --> 00:09:23.544
And in the spirit of making
developers highly efficient,

00:09:23.544 --> 00:09:25.460
we've made this super
simple for you to get up

00:09:25.460 --> 00:09:29.560
and running, to move from
App Engine into Managed VMs.

00:09:29.560 --> 00:09:31.820
All you have to do is change
your configuration files.

00:09:31.820 --> 00:09:34.610
So here, we're looking at
a Java configuration file.

00:09:34.610 --> 00:09:36.410
You set the VM property to true.

00:09:36.410 --> 00:09:37.580
Easy enough.

00:09:37.580 --> 00:09:39.545
You specify which machine
type you would want.

00:09:39.545 --> 00:09:41.430
In this case, we
want an n1-standard,

00:09:41.430 --> 00:09:43.680
but actually there's a little
typo in this [? deck. ?]

00:09:43.680 --> 00:09:45.431
You actually want a
high CPU machine here.

00:09:45.431 --> 00:09:47.346
But the nice thing is
that with this property,

00:09:47.346 --> 00:09:49.590
you can specify any Compute
Engine machine type,

00:09:49.590 --> 00:09:51.049
both that we have
now and the ones

00:09:51.049 --> 00:09:53.090
that we're investing in
in the days in the future

00:09:53.090 --> 00:09:54.926
and in the months to come.

00:09:54.926 --> 00:09:57.050
And then we need to specify
the number of instances

00:09:57.050 --> 00:09:57.591
that we want.

00:09:57.591 --> 00:09:59.470
In this case, I just
say that I want five.

00:09:59.470 --> 00:10:00.880
You can put whatever
you want to in here.

00:10:00.880 --> 00:10:02.170
And furthermore, you
can programmatically

00:10:02.170 --> 00:10:03.290
change the number
of instances when

00:10:03.290 --> 00:10:04.770
you're running in production.

00:10:04.770 --> 00:10:05.880
And then, in the
coming months, we'll

00:10:05.880 --> 00:10:07.990
have auto scaling that
will apply to this as well.

00:10:07.990 --> 00:10:09.990
So we'll really build out
the complete offering.

00:10:12.700 --> 00:10:15.350
At that point in time, you'd
be running in production,

00:10:15.350 --> 00:10:17.308
and you'd have access to
those native resources

00:10:17.308 --> 00:10:18.420
that I talked about.

00:10:18.420 --> 00:10:19.780
You'd have that flexibility
of Compute Engine.

00:10:19.780 --> 00:10:21.863
So you could get at the
lower level network stack,

00:10:21.863 --> 00:10:25.870
or the file system, you could
run the OpenCL or C or C++

00:10:25.870 --> 00:10:30.810
binary that you wanted to
run, and you'd be able to do

00:10:30.810 --> 00:10:33.082
the sentiment analysis
that we were looking at.

00:10:33.082 --> 00:10:35.100
Now, furthermore, it's
not just about being

00:10:35.100 --> 00:10:36.839
able to run these
native libraries

00:10:36.839 --> 00:10:38.380
and have access to
the network stack.

00:10:38.380 --> 00:10:43.266
This also brings to the front
a new hosting environment,

00:10:43.266 --> 00:10:45.640
where we can build new run
times, both internal to Google

00:10:45.640 --> 00:10:47.271
and external.

00:10:47.271 --> 00:10:49.645
So we won't be constrained to
just having Java and Python

00:10:49.645 --> 00:10:51.035
and PHP.

00:10:51.035 --> 00:10:53.366
We could look at having Scala
or Haskell or [? Node. ?]

00:10:53.366 --> 00:10:54.740
And to prove this
out, we've been

00:10:54.740 --> 00:10:56.656
working with internal
teams-- both the Go team

00:10:56.656 --> 00:10:59.340
and the Dart team-- that are
both done in the Cloud sandbox,

00:10:59.340 --> 00:11:01.530
or down in the sandbox
today, as we speak.

00:11:01.530 --> 00:11:03.940
We've worked with them over
the months to build this out

00:11:03.940 --> 00:11:05.762
and to actually
have them vet out

00:11:05.762 --> 00:11:07.220
this new hosting
environment, where

00:11:07.220 --> 00:11:08.514
they can run these run times.

00:11:08.514 --> 00:11:10.430
And we're looking to
partner with other people

00:11:10.430 --> 00:11:13.110
within the community and
other open source providers

00:11:13.110 --> 00:11:14.790
to make this happen.

00:11:14.790 --> 00:11:17.290
And so at the end of it, once
you've made your configuration

00:11:17.290 --> 00:11:20.510
changes, all you need
to do is save your file,

00:11:20.510 --> 00:11:22.850
do another Git commit,
do another Git push,

00:11:22.850 --> 00:11:25.866
and you're running
into production.

00:11:25.866 --> 00:11:27.490
And when you do that
push, what's nice,

00:11:27.490 --> 00:11:30.380
and what is in the spirit
of making developers highly

00:11:30.380 --> 00:11:32.830
productive, is that
that actual push, those

00:11:32.830 --> 00:11:35.050
I think it was one,
two, three, four, five

00:11:35.050 --> 00:11:38.440
lines of configuration,
get pushed out,

00:11:38.440 --> 00:11:41.576
and you have managed VMs
running in production.

00:11:41.576 --> 00:11:43.200
And what that means
is that we give you

00:11:43.200 --> 00:11:44.201
the hosting environment.

00:11:44.201 --> 00:11:46.575
So Compute Engine VMs, we make
sure that they're healthy,

00:11:46.575 --> 00:11:49.210
and we make sure they put health
checking on them and healing.

00:11:49.210 --> 00:11:50.650
We give you a web server,
because after all, you're

00:11:50.650 --> 00:11:51.920
serving web traffic.

00:11:51.920 --> 00:11:54.720
We give you an application
server to run your application.

00:11:54.720 --> 00:11:57.880
We give you a Java Runtime
Environment to run Java.

00:11:57.880 --> 00:12:00.630
And then we run all your
third party code as well.

00:12:00.630 --> 00:12:03.400
Then we take and install a load
balancer, and wire it all up,

00:12:03.400 --> 00:12:04.500
and hook it into
your web servers.

00:12:04.500 --> 00:12:06.420
And we configure that all
for you, on your behalf.

00:12:06.420 --> 00:12:08.003
You don't have to
specify any of that.

00:12:11.610 --> 00:12:13.660
And furthermore, in
this model, what you do

00:12:13.660 --> 00:12:16.447
is you get us providing
operating system updates

00:12:16.447 --> 00:12:18.530
and security patches for
that hosting environment,

00:12:18.530 --> 00:12:20.860
similar to how we do
on App Engine today.

00:12:20.860 --> 00:12:22.950
We do colocation and
locality optimizations.

00:12:22.950 --> 00:12:25.020
What that means is that
we take all the pieces

00:12:25.020 --> 00:12:26.395
of your application
and make sure

00:12:26.395 --> 00:12:29.120
that they're running together
in a very highly available way

00:12:29.120 --> 00:12:31.230
so that we're minimizing
network latency

00:12:31.230 --> 00:12:33.190
and latency within
your application

00:12:33.190 --> 00:12:35.720
and giving you very,
very high SLAs.

00:12:35.720 --> 00:12:38.000
And then finally, you
get Google as your SRE.

00:12:38.000 --> 00:12:39.830
And what does that
last point mean?

00:12:39.830 --> 00:12:41.320
That's a great question.

00:12:41.320 --> 00:12:43.540
At Google, there's a set
of software engineers

00:12:43.540 --> 00:12:48.260
that are tasked with making
sure that services like Search,

00:12:48.260 --> 00:12:51.090
and Gmail, and Geo-- they're
ensuring that they have

00:12:51.090 --> 00:12:54.720
high uptime and they're running
in a very efficient manner.

00:12:54.720 --> 00:12:57.720
And what they do is, with
those SREs, with Managed VMs,

00:12:57.720 --> 00:13:00.770
you're getting the same--
they're watching over

00:13:00.770 --> 00:13:03.350
your production deployments in
the same manner that they're

00:13:03.350 --> 00:13:06.270
watching over Search and then
applying the same monitoring

00:13:06.270 --> 00:13:08.817
that they have for App Engine
for years and years and years.

00:13:08.817 --> 00:13:10.650
So what that means for
you as a developer is

00:13:10.650 --> 00:13:14.290
you focus on your code and
what you want to build.

00:13:14.290 --> 00:13:16.210
And when you deploy it
into Google production,

00:13:16.210 --> 00:13:18.520
the SREs are watching over
that-- the SREs and a lot

00:13:18.520 --> 00:13:21.070
of our services-- to ensure
that you have high uptime

00:13:21.070 --> 00:13:22.100
and performance.

00:13:22.100 --> 00:13:24.770
So if there's something like
network degradation in a data

00:13:24.770 --> 00:13:26.670
center, you don't want
to worry about that.

00:13:26.670 --> 00:13:28.240
We got that covered.

00:13:28.240 --> 00:13:30.260
If there's some link
between two data centers

00:13:30.260 --> 00:13:32.305
that has degraded
performance, you

00:13:32.305 --> 00:13:34.180
don't need to worry
about that either, right?

00:13:34.180 --> 00:13:36.179
If there's some external
event that are actually

00:13:36.179 --> 00:13:38.330
impacting the running
of your applications,

00:13:38.330 --> 00:13:39.210
we've got that covered as well.

00:13:39.210 --> 00:13:41.251
We've got monitoring
services built into the data

00:13:41.251 --> 00:13:43.620
centers that funnel
back into our SREs,

00:13:43.620 --> 00:13:45.919
and into our graphs
and our dashboards,

00:13:45.919 --> 00:13:48.460
to make sure that everything is
running performantly for you.

00:13:51.450 --> 00:13:53.740
Now, with Managed
VMs, one other point

00:13:53.740 --> 00:13:55.789
is we're running all of
that inside of containers

00:13:55.789 --> 00:13:56.830
on top of Compute Engine.

00:13:56.830 --> 00:13:59.130
And we happen to be using
Docker as our technology.

00:13:59.130 --> 00:14:00.405
Now, why are we using Docker?

00:14:00.405 --> 00:14:01.600
It's pretty cool, right?

00:14:01.600 --> 00:14:03.870
Who's heard of Docker
in the crowd today?

00:14:03.870 --> 00:14:05.250
Yeah, that's what I thought.

00:14:05.250 --> 00:14:06.666
So it's a great
technology, and it

00:14:06.666 --> 00:14:08.640
does a lot of amazing things.

00:14:08.640 --> 00:14:10.120
But more specifically,
what it does

00:14:10.120 --> 00:14:12.305
is it's a tool chain that
gives us static binaries

00:14:12.305 --> 00:14:14.540
that our services can
scale up and scale down.

00:14:14.540 --> 00:14:15.560
It's like a template
that you can just

00:14:15.560 --> 00:14:16.950
go punch out new ones, right?

00:14:16.950 --> 00:14:18.350
Give me one more of these,
give me one more these,

00:14:18.350 --> 00:14:19.480
give me one more of these.

00:14:19.480 --> 00:14:20.610
And since it's
static, we don't have

00:14:20.610 --> 00:14:22.485
to do any initialization
when we spin it up.

00:14:22.485 --> 00:14:24.410
It's very good for scaling.

00:14:24.410 --> 00:14:27.130
Finally, also it
provides portability.

00:14:27.130 --> 00:14:30.140
So that which you are building
on your local environment,

00:14:30.140 --> 00:14:33.800
we can easily run in production,
and it just moves with you.

00:14:33.800 --> 00:14:36.740
And finally, it provides a
container host environment

00:14:36.740 --> 00:14:38.722
that allows us to manage
the host environment,

00:14:38.722 --> 00:14:40.680
providing those OS updates
and security patches

00:14:40.680 --> 00:14:42.839
that I had talked about
before, without impacting

00:14:42.839 --> 00:14:44.630
that which is running
inside the container,

00:14:44.630 --> 00:14:45.838
concretely, your application.

00:14:49.680 --> 00:14:52.880
And for more about how we're
using containers within Google,

00:14:52.880 --> 00:14:55.380
be sure to check out these
two sessions on containers

00:14:55.380 --> 00:14:58.370
in Google Cloud and
containers in App Engine

00:14:58.370 --> 00:15:01.561
over the course of
today and tomorrow.

00:15:01.561 --> 00:15:04.060
OK, so just to check in, we've
gone through quite a bit here

00:15:04.060 --> 00:15:07.087
in a matter of about
15, 20 minutes.

00:15:07.087 --> 00:15:08.920
We've clearly moved
away from the zero stage

00:15:08.920 --> 00:15:10.544
and closer to the
hero stage, right?

00:15:10.544 --> 00:15:11.960
We've gone through
getting started

00:15:11.960 --> 00:15:13.260
and getting something
up and running.

00:15:13.260 --> 00:15:14.930
We've gone through
getting some code,

00:15:14.930 --> 00:15:17.674
hooking that code up to our
Git repository in the cloud.

00:15:17.674 --> 00:15:19.090
We've pushed, we've
seen it build,

00:15:19.090 --> 00:15:21.460
and we've deployed
out to production.

00:15:21.460 --> 00:15:26.294
We've utilized a new feature
set within Managed VMs.

00:15:26.294 --> 00:15:27.710
So I definitely
think we're making

00:15:27.710 --> 00:15:29.440
a fair amount of progress here.

00:15:29.440 --> 00:15:31.940
But I did mention that we are
going to talk about some code,

00:15:31.940 --> 00:15:33.550
and Kate's going
to dive into how

00:15:33.550 --> 00:15:36.390
we're doing production of
Google services on your laptop.

00:15:36.390 --> 00:15:40.680
So without further ado, I'm
going to hand it over to Kate.

00:15:40.680 --> 00:15:45.126
[LIGHT APPLAUSE]

00:15:45.126 --> 00:15:46.114
Clap for her, come on.

00:15:46.114 --> 00:15:47.596
Kate, Kate, Kate.

00:15:47.596 --> 00:15:51.550
[APPLAUSE]

00:15:51.550 --> 00:15:53.410
KATE VOLKOVA: So
here, on my laptop,

00:15:53.410 --> 00:15:57.400
I've already got the code
for our WalkShare demo.

00:15:57.400 --> 00:16:01.427
And it's in the diagram
of the project already,

00:16:01.427 --> 00:16:02.760
maybe even more than once today.

00:16:02.760 --> 00:16:04.610
So I'm not showing it again.

00:16:04.610 --> 00:16:06.930
But just as a quick
reminder, we've

00:16:06.930 --> 00:16:09.710
got an Android
mobile application,

00:16:09.710 --> 00:16:13.460
and then we've got the
whole bunch of modules

00:16:13.460 --> 00:16:16.980
running on App Engine
servers, or on Compute Engine

00:16:16.980 --> 00:16:21.340
instances, that prices,
comments, or displays

00:16:21.340 --> 00:16:23.590
any other stats for us.

00:16:23.590 --> 00:16:28.810
So let's see what we
are going to concentrate

00:16:28.810 --> 00:16:31.140
on today, which is
App Engine modules,

00:16:31.140 --> 00:16:33.800
and in particular,
your workflow when

00:16:33.800 --> 00:16:36.050
developing on our platform.

00:16:36.050 --> 00:16:39.320
So you see here, I've
got three modules.

00:16:39.320 --> 00:16:43.880
One is a web front-end, written
in Python and JavaScript.

00:16:43.880 --> 00:16:44.750
This.

00:16:44.750 --> 00:16:48.680
And the second one is the
common server, written in Java,

00:16:48.680 --> 00:16:50.870
that runs on Managed VMs.

00:16:50.870 --> 00:16:53.640
And the third module
is a server talking

00:16:53.640 --> 00:16:57.040
to the [INAUDIBLE]
storage, written in Go.

00:16:57.040 --> 00:17:01.630
So to allow you to iterate
more quickly when developing

00:17:01.630 --> 00:17:05.420
on our platform, our SDK
provides a set of tools

00:17:05.420 --> 00:17:08.470
to emulate App Engine
production environment locally

00:17:08.470 --> 00:17:10.230
on your machine.

00:17:10.230 --> 00:17:14.920
And as all the other Google
Cloud Platform command line

00:17:14.920 --> 00:17:18.660
tools, it is now
bundled under Cloud SDK

00:17:18.660 --> 00:17:21.550
and available under
gcloud command.

00:17:21.550 --> 00:17:24.770
So let's try to
run that command.

00:17:24.770 --> 00:17:29.250
So here, what I passed through
it is just the output level

00:17:29.250 --> 00:17:30.680
that I want to see.

00:17:30.680 --> 00:17:34.120
Then App preview, seeing that
we're in preview right now.

00:17:34.120 --> 00:17:37.920
Then app, that's saying that
it's App Engine component.

00:17:37.920 --> 00:17:40.780
Run the command that
I actually want to do.

00:17:40.780 --> 00:17:44.610
And then the list of
modules, and they just patch

00:17:44.610 --> 00:17:53.670
that tells App
Engine which request

00:17:53.670 --> 00:17:55.480
to route to which module.

00:17:58.100 --> 00:18:00.280
It's actually already
started, but I

00:18:00.280 --> 00:18:02.100
thought it could take
a couple minutes.

00:18:02.100 --> 00:18:04.740
So here is the
diagram to explain

00:18:04.740 --> 00:18:06.620
what was going to happen.

00:18:06.620 --> 00:18:10.480
So when you run gcloud
command, app run command,

00:18:10.480 --> 00:18:13.330
we start the development
server for you,

00:18:13.330 --> 00:18:14.500
locally, on your machine.

00:18:14.500 --> 00:18:18.800
And that development
server is just

00:18:18.800 --> 00:18:22.000
a web server that simulates
running App Engine production

00:18:22.000 --> 00:18:23.880
environment locally
on your machine.

00:18:23.880 --> 00:18:29.420
And by simulating here, I mean
first is enforcing some sandbox

00:18:29.420 --> 00:18:30.980
restrictions that
you would have,

00:18:30.980 --> 00:18:35.600
running App Engine application
in production, like now

00:18:35.600 --> 00:18:37.450
restricted access
to the file system.

00:18:37.450 --> 00:18:43.860
Or in second but more--
that seems more important to

00:18:43.860 --> 00:18:47.290
me is emulating
all of our services

00:18:47.290 --> 00:18:51.180
again, locally, on your machine,
like Datastore or Memcache.

00:18:51.180 --> 00:18:55.340
And on top of that, you also
get the local implementation

00:18:55.340 --> 00:19:00.110
of admin console that, again,
helps you debugging the app.

00:19:00.110 --> 00:19:02.040
So nothing really new yet.

00:19:02.040 --> 00:19:04.780
But if you remember,
one of our modules

00:19:04.780 --> 00:19:09.870
is a module, running on Managed
VMs and has this magic VM

00:19:09.870 --> 00:19:12.150
equals true setting
in App Engine

00:19:12.150 --> 00:19:15.370
configuration file, App
Engine [INAUDIBLE] XML.

00:19:15.370 --> 00:19:19.030
So how we're going to
emulate that-- I mean,

00:19:19.030 --> 00:19:23.200
starting and restarting
several virtual machines,

00:19:23.200 --> 00:19:26.600
one for each instance,
on your laptop

00:19:26.600 --> 00:19:28.670
would significantly
slow things down, if not

00:19:28.670 --> 00:19:29.860
completely kill it.

00:19:29.860 --> 00:19:33.520
So here, the technology that is
gaining more and more momentum

00:19:33.520 --> 00:19:36.670
lately, called containers,
comes to the rescue.

00:19:36.670 --> 00:19:39.910
And we use Docker
containers to provide you

00:19:39.910 --> 00:19:44.510
with a local experience when
developing for Managed VMs.

00:19:44.510 --> 00:19:47.810
So when you have VM equals
true in your App Engine

00:19:47.810 --> 00:19:51.030
configuration file,
development server

00:19:51.030 --> 00:19:56.190
will trigger the Docker build
command and build the image

00:19:56.190 --> 00:19:58.740
with your code,
or your binaries.

00:19:58.740 --> 00:20:01.230
And then it will
run that command

00:20:01.230 --> 00:20:06.640
and start the container for
you and start routing requests

00:20:06.640 --> 00:20:10.240
from development server
to your container

00:20:10.240 --> 00:20:14.650
and to your app running
inside of that container.

00:20:14.650 --> 00:20:17.750
And to make this scheme
work on all the platforms

00:20:17.750 --> 00:20:20.810
that we support, be that
Linux, Mac, or Windows,

00:20:20.810 --> 00:20:25.060
we still have a virtual
machine with that Docker demand

00:20:25.060 --> 00:20:27.540
preconfigured out
and running on it.

00:20:27.540 --> 00:20:30.020
But just one.

00:20:30.020 --> 00:20:34.420
So now that we know what's
supposed to be happening, let's

00:20:34.420 --> 00:20:37.980
flip back to the logs
and quickly go over what

00:20:37.980 --> 00:20:39.420
I've just talked for you.

00:20:39.420 --> 00:20:42.260
So first we see
starting API server,

00:20:42.260 --> 00:20:46.710
so we'll get our local Datastore
and Memcache implementation.

00:20:46.710 --> 00:20:49.360
Then we are starting
a dispatcher module

00:20:49.360 --> 00:20:51.880
and all the other modules.

00:20:51.880 --> 00:20:54.480
And here, we are connecting
to the Docker daemon

00:20:54.480 --> 00:20:56.540
and starting the
Managed VM module.

00:20:56.540 --> 00:20:58.900
So we are building the
image, we are tagging it

00:20:58.900 --> 00:21:04.320
as application ID, module
name, and the version.

00:21:04.320 --> 00:21:06.620
Then we build that image,
we create a container

00:21:06.620 --> 00:21:09.740
from that image, and
we start running it.

00:21:09.740 --> 00:21:14.350
We also sent the start
signal to that instance

00:21:14.350 --> 00:21:17.730
exactly the same way as
it works in production.

00:21:17.730 --> 00:21:20.310
And this time, it even
[? rates ?] 2,200,

00:21:20.310 --> 00:21:21.570
which is cool.

00:21:21.570 --> 00:21:26.460
So one more thing to note here
that we'll get to a little bit

00:21:26.460 --> 00:21:30.030
later is this line,
that we can also

00:21:30.030 --> 00:21:34.000
debug, attach the
debugger to our container,

00:21:34.000 --> 00:21:37.870
and do some debugging.

00:21:37.870 --> 00:21:43.880
So one more thing to see
here is the docker ps command

00:21:43.880 --> 00:21:46.890
that just lists all
the containers running

00:21:46.890 --> 00:21:47.910
on my machine.

00:21:47.910 --> 00:21:51.230
And so I have these containers
running for three minutes.

00:21:51.230 --> 00:21:54.610
That's about time
I've been talking.

00:21:54.610 --> 00:21:58.700
And we can even get some
logs from that container,

00:21:58.700 --> 00:22:02.530
seeing that we are starting
the instance in debug mode,

00:22:02.530 --> 00:22:05.140
and forwarded the log somewhere.

00:22:08.030 --> 00:22:09.110
Again.

00:22:09.110 --> 00:22:12.350
So now we have everything
up and running.

00:22:12.350 --> 00:22:17.345
So let's see how it looks like.

00:22:17.345 --> 00:22:18.980
Hmm.

00:22:18.980 --> 00:22:22.080
Pretty similar to what Chris
just shown in production,

00:22:22.080 --> 00:22:24.830
even though it's
locally on my machine.

00:22:30.600 --> 00:22:33.760
And again, what I
was talking about

00:22:33.760 --> 00:22:36.820
is the local version
of admin console

00:22:36.820 --> 00:22:39.400
that lists all of our modules.

00:22:39.400 --> 00:22:41.600
We can click on these instances.

00:22:41.600 --> 00:22:45.480
This is just a testing
servlet printing out

00:22:45.480 --> 00:22:48.140
the Java version of
the comments module.

00:22:48.140 --> 00:22:50.920
So we have the standard Java 7.

00:22:50.920 --> 00:22:54.240
And then we can do
some more stuff here.

00:22:54.240 --> 00:22:57.000
We can see the
indices, for example.

00:22:57.000 --> 00:23:04.540
We can change something in
the Datastore, like unknown.

00:23:04.540 --> 00:23:07.920
Maybe after this talk
I will be better known,

00:23:07.920 --> 00:23:11.300
so let's update this one.

00:23:14.700 --> 00:23:18.070
So sometimes little
things like that help us

00:23:18.070 --> 00:23:21.650
with debugging when we develop
the application locally.

00:23:21.650 --> 00:23:25.965
So let's try to
post a comment now.

00:23:25.965 --> 00:23:26.465
Hmm.

00:23:31.310 --> 00:23:34.090
Something is definitely wrong.

00:23:34.090 --> 00:23:37.670
Chris, I told you not to
touch my code before the demo.

00:23:37.670 --> 00:23:39.782
CHRIS RAMSDALE: I sent
you a code review.

00:23:39.782 --> 00:23:40.490
KATE VOLKOVA: OK.

00:23:40.490 --> 00:23:41.615
CHRIS RAMSDALE: [INAUDIBLE]

00:23:43.900 --> 00:23:45.000
KATE VOLKOVA: Well, well.

00:23:45.000 --> 00:23:49.900
So I mean-- in normal
life, if something

00:23:49.900 --> 00:23:53.280
like that happens in production,
the first thing I would do

00:23:53.280 --> 00:23:56.000
is probably go
check the Datastore

00:23:56.000 --> 00:23:57.420
if the data is corrupted.

00:23:57.420 --> 00:24:00.250
But again, Chris
asked me to show you

00:24:00.250 --> 00:24:06.540
how easy the local debugging of
your App Engine module running

00:24:06.540 --> 00:24:08.210
inside of the Docker
container can be.

00:24:08.210 --> 00:24:10.600
So let's try to do that.

00:24:10.600 --> 00:24:12.730
So here I have
the Android Studio

00:24:12.730 --> 00:24:16.970
and my project open in here.

00:24:16.970 --> 00:24:21.830
And I guess part of that
application is Android.

00:24:21.830 --> 00:24:23.320
So we're just
using the same tool

00:24:23.320 --> 00:24:24.840
for developing all
of the modules.

00:24:28.140 --> 00:24:35.840
And here, let's try to attach
the debugger to our container.

00:24:35.840 --> 00:24:39.080
So if you can see that log,
we're attached to the container

00:24:39.080 --> 00:24:44.000
right now, and let's try
to post another comment.

00:24:44.000 --> 00:24:46.290
That will be boring
comment because it probably

00:24:46.290 --> 00:24:47.000
won't work again.

00:24:49.890 --> 00:24:51.660
OK, so we've got
some stack trays.

00:24:51.660 --> 00:24:55.760
We've got something-- let's
just follow through the methods

00:24:55.760 --> 00:24:58.820
and see what we're
trying to add.

00:24:58.820 --> 00:25:00.540
OK, we're gonna do some checks.

00:25:00.540 --> 00:25:06.050
We're extracting the
parameters of the request.

00:25:06.050 --> 00:25:08.104
OK.

00:25:08.104 --> 00:25:09.028
Uh-huh.

00:25:09.028 --> 00:25:12.180
This line tells me something.

00:25:12.180 --> 00:25:18.700
I guess he wants it to rename
the methods and the properties

00:25:18.700 --> 00:25:20.865
and didn't rename all of them.

00:25:20.865 --> 00:25:25.880
Oh well, let's just
deattach again,

00:25:25.880 --> 00:25:31.550
fix it back, and
rebuild the project

00:25:31.550 --> 00:25:34.400
and try to post
the comment again.

00:25:38.540 --> 00:25:41.630
So let's see if it still
compiles now that I touched it.

00:25:45.180 --> 00:25:46.560
OK, success.

00:25:46.560 --> 00:25:47.950
Good.

00:25:47.950 --> 00:25:52.450
And while we are
restarting that module,

00:25:52.450 --> 00:25:58.360
let's all do what I was talking
about, actually looking in

00:25:58.360 --> 00:26:05.750
to Datastore and see our
entry with the wrong property.

00:26:05.750 --> 00:26:12.872
And let's just click Delete,
and like it never happened.

00:26:12.872 --> 00:26:13.830
So back to the console.

00:26:18.660 --> 00:26:22.580
The cool thing about
development server

00:26:22.580 --> 00:26:28.040
is that it watches for the file
changes or for, in this case,

00:26:28.040 --> 00:26:29.230
Java class changes.

00:26:29.230 --> 00:26:37.170
And now it is that
something changed.

00:26:37.170 --> 00:26:40.830
And we just sent the stop
signal to all the instances

00:26:40.830 --> 00:26:44.760
that we had, and then
rebuilt the new image

00:26:44.760 --> 00:26:47.440
and created the new
container from it,

00:26:47.440 --> 00:26:53.010
and started to forward
requests again.

00:26:53.010 --> 00:26:57.550
And apparently, that
didn't quite work.

00:26:57.550 --> 00:27:00.550
Let's just rebuild once again.

00:27:29.466 --> 00:27:31.340
CHRIS RAMSDALE: So your
VM's up, but it's not

00:27:31.340 --> 00:27:32.130
restarting the instances?

00:27:32.130 --> 00:27:32.650
Is that it?

00:27:32.650 --> 00:27:33.566
KATE VOLKOVA: Ah, yep.

00:27:33.566 --> 00:27:36.070
The image got rebuilt,
but it does not

00:27:36.070 --> 00:27:38.530
want to restart the
instance right now.

00:27:42.734 --> 00:27:44.150
CHRIS RAMSDALE: I
think my bug was

00:27:44.150 --> 00:27:46.190
more systemic than you thought.

00:27:46.190 --> 00:27:49.020
KATE VOLKOVA: Yeah, I thought
it was so unimportant.

00:27:49.020 --> 00:27:52.907
Let me just quickly
go over it again.

00:28:00.320 --> 00:28:02.330
Let me just try to
restart everything.

00:28:12.179 --> 00:28:13.970
CHRIS RAMSDALE: Well,
better to be doing it

00:28:13.970 --> 00:28:16.480
locally than in
production, right?

00:28:16.480 --> 00:28:18.440
KATE VOLKOVA: Oh well.

00:28:18.440 --> 00:28:22.084
You need to have a
backup plan sometimes.

00:28:22.084 --> 00:28:23.625
CHRIS RAMSDALE: It's
the demo demons.

00:28:44.223 --> 00:28:46.306
KATE VOLKOVA: No, that
would complete [INAUDIBLE].

00:29:05.767 --> 00:29:07.850
CHRIS RAMSDALE: You're
going to try one more time?

00:29:07.850 --> 00:29:08.830
KATE VOLKOVA: Ah, yep.

00:29:21.632 --> 00:29:23.090
CHRIS RAMSDALE: So
while she debugs

00:29:23.090 --> 00:29:25.580
that, gives it one
more shot, I think

00:29:25.580 --> 00:29:27.850
one of the interesting
things here is that when

00:29:27.850 --> 00:29:30.320
you think about container
technologies like Docker, one

00:29:30.320 --> 00:29:32.403
of the things that they
promote, much like I said,

00:29:32.403 --> 00:29:34.820
was the ability to port your
application back and forth.

00:29:34.820 --> 00:29:36.500
Well, what's
interesting is if you

00:29:36.500 --> 00:29:40.050
use cloud-based services--
so hosted services,

00:29:40.050 --> 00:29:42.560
be it our services,
Amazon's services,

00:29:42.560 --> 00:29:44.130
whatever they may
be-- if there's

00:29:44.130 --> 00:29:47.390
no local story for that, the
portability kind of starts

00:29:47.390 --> 00:29:49.620
to break down, right?

00:29:49.620 --> 00:29:52.450
So if we just had Datastore in
the cloud and that was it, then

00:29:52.450 --> 00:29:54.300
when you say, well, it's great,
I can port my application

00:29:54.300 --> 00:29:56.760
from my local environment to
my production environment,

00:29:56.760 --> 00:29:58.540
the fact of the matter is that
in your local environment,

00:29:58.540 --> 00:30:00.970
if you don't have Datastore
or task queues or Memcache,

00:30:00.970 --> 00:30:03.095
you can't actually build
there because you can only

00:30:03.095 --> 00:30:04.250
get half the story, right?

00:30:04.250 --> 00:30:06.820
So by taking this and making
these production services

00:30:06.820 --> 00:30:08.670
available on your laptop
or wherever you're

00:30:08.670 --> 00:30:12.110
doing development, really,
it completes the story.

00:30:12.110 --> 00:30:13.580
So you really do
have portability.

00:30:13.580 --> 00:30:15.360
And it's kind of
crazy, because even

00:30:15.360 --> 00:30:17.689
in the Datastore side
of things, I'll never

00:30:17.689 --> 00:30:18.730
forget about a year ago--

00:30:18.730 --> 00:30:26.685
KATE VOLKOVA: Yeah, I guess
that that will happen right

00:30:26.685 --> 00:30:27.820
during the demo.

00:30:27.820 --> 00:30:29.980
I need to clean up
some space on my disk.

00:30:29.980 --> 00:30:30.660
That's terrible.

00:30:30.660 --> 00:30:33.130
CHRIS RAMSDALE: [LAUGHS]

00:30:36.525 --> 00:30:38.900
KATE VOLKOVA: While I'm doing
that, you can keep talking.

00:30:38.900 --> 00:30:39.691
CHRIS RAMSDALE: OK.

00:30:39.691 --> 00:30:41.900
[LAUGHTER]

00:30:41.900 --> 00:30:45.650
Just bat me away
when you're ready.

00:30:45.650 --> 00:30:48.890
So the anecdote here was
that about a year ago, I

00:30:48.890 --> 00:30:50.940
worked closely with the
Datastore team as well.

00:30:50.940 --> 00:30:53.800
And I'll never forget the
tech lead, Alfred Fuller,

00:30:53.800 --> 00:30:55.860
came to me, and
he's like, so we're

00:30:55.860 --> 00:30:58.010
going to put eventual
consistency-- hold on,

00:30:58.010 --> 00:31:00.630
does everybody know what
eventual consistency is?

00:31:00.630 --> 00:31:01.130
No?

00:31:01.130 --> 00:31:03.255
OK, so it's the idea that
when you run horizontally

00:31:03.255 --> 00:31:06.385
scalable services, that
sometimes to get that scale,

00:31:06.385 --> 00:31:07.760
the data might
not be consistent.

00:31:07.760 --> 00:31:10.093
So you might do a write, and
if you come to another data

00:31:10.093 --> 00:31:11.890
center, it might not
have replicated yet.

00:31:11.890 --> 00:31:13.265
And that gives
you scale, but you

00:31:13.265 --> 00:31:15.098
have to build your
applications around them.

00:31:15.098 --> 00:31:16.610
Because if you
expect consistency,

00:31:16.610 --> 00:31:19.490
you expect I do a write, and
then I do a read immediately.

00:31:19.490 --> 00:31:21.365
And if that's not the
case, then weird things

00:31:21.365 --> 00:31:23.096
happen in your application.

00:31:23.096 --> 00:31:26.659
I still think it's a pretty
complex concept to grasp.

00:31:26.659 --> 00:31:29.200
And so do some of our customers,
because what they were doing

00:31:29.200 --> 00:31:31.230
is they were building in
our local environment,

00:31:31.230 --> 00:31:34.420
like Kate's trying to demo here.

00:31:34.420 --> 00:31:35.280
We didn't have that.

00:31:35.280 --> 00:31:36.210
It was strongly inconsistent.

00:31:36.210 --> 00:31:37.380
Because after all,
it's on your laptop.

00:31:37.380 --> 00:31:39.546
There's no replication of
other data centers, right?

00:31:39.546 --> 00:31:41.180
And this kept
impacting customers

00:31:41.180 --> 00:31:42.471
when they moved into the cloud.

00:31:42.471 --> 00:31:45.210
So that porting from
local to production

00:31:45.210 --> 00:31:47.020
was causing discrepancies.

00:31:47.020 --> 00:31:48.540
And so Alfred
comes and says, I'm

00:31:48.540 --> 00:31:51.092
going to build eventual
consistency into our SDK.

00:31:51.092 --> 00:31:52.800
And I was like, you
are out of your mind.

00:31:52.800 --> 00:31:53.400
He's like, no, no no.

00:31:53.400 --> 00:31:54.608
We're totally going to do it.

00:31:54.608 --> 00:31:56.650
And within two
weeks, they basically

00:31:56.650 --> 00:32:04.278
mimicked, down to
that level-- anyways.

00:32:04.278 --> 00:32:10.380
[APPLAUSE]

00:32:10.380 --> 00:32:12.060
KATE VOLKOVA: I
think we really added

00:32:12.060 --> 00:32:14.620
a little bit of
excitement into our demo,

00:32:14.620 --> 00:32:18.840
and proving that it's all
real and happening right now,

00:32:18.840 --> 00:32:20.825
locally, on my machine.

00:32:20.825 --> 00:32:21.930
Was not planned.

00:32:21.930 --> 00:32:25.640
I got quite a sweat.

00:32:25.640 --> 00:32:32.050
OK, so we can develop
locally, debug locally.

00:32:32.050 --> 00:32:35.970
So let's try something
a bit cooler now.

00:32:35.970 --> 00:32:40.510
As you know, using Managed
VMs, together with App Engine,

00:32:40.510 --> 00:32:45.140
allows you any level of
customization that you want.

00:32:45.140 --> 00:32:49.190
And you can run any
third party libraries

00:32:49.190 --> 00:32:53.490
or call any binaries,
which was not quite allowed

00:32:53.490 --> 00:32:55.350
with a classic App Engine.

00:32:55.350 --> 00:33:01.360
So let's try something here.

00:33:01.360 --> 00:33:08.140
So for those of you who like
the functional style of Java 8

00:33:08.140 --> 00:33:19.190
as much as I do, let's try
to insert [INAUDIBLE] here.

00:33:19.190 --> 00:33:21.025
Search for COOL STUFF.

00:33:27.240 --> 00:33:30.610
And just remove
that old iteration.

00:33:30.610 --> 00:33:33.518
Ah, don't break anything again.

00:33:44.760 --> 00:33:50.670
OK, so now we've got some Java
8 kind of style code in here.

00:33:53.770 --> 00:33:57.210
Here, Chris was
supposed to ask me that,

00:33:57.210 --> 00:34:01.450
but App Engine only
supports Java 7.

00:34:01.450 --> 00:34:04.330
And my answer to
this would be let's

00:34:04.330 --> 00:34:07.247
add a little bit
customization to here.

00:34:07.247 --> 00:34:09.080
CHRIS RAMSDALE: So this
was in the same vein

00:34:09.080 --> 00:34:12.010
of us saying that how we're
enabled in Go and Dart

00:34:12.010 --> 00:34:14.570
and how we could enable
Node and Scala and Haskell.

00:34:14.570 --> 00:34:16.610
Kate's just doing this
in terms of App Engine,

00:34:16.610 --> 00:34:17.780
or in terms of Java.

00:34:17.780 --> 00:34:20.542
So going from Java 7 to
Java 8 is a pretty big move,

00:34:20.542 --> 00:34:22.125
but with a few lines
of configuration,

00:34:22.125 --> 00:34:26.030
she now has the semantics and
language aspects of Java 8

00:34:26.030 --> 00:34:29.250
inside of her application.

00:34:29.250 --> 00:34:32.389
KATE VOLKOVA: Yeah, but
more than two lines.

00:34:32.389 --> 00:34:37.639
And what I did here is just a
little bit more customization.

00:34:37.639 --> 00:34:43.420
And to use instead of our
AppEngine-based Docker

00:34:43.420 --> 00:34:46.100
image, the Docker
image that I've just

00:34:46.100 --> 00:34:52.099
built before the demo--
oh no, again that

00:34:52.099 --> 00:34:53.704
was based on the device.

00:35:37.100 --> 00:35:41.640
OK, and hopefully that now
there will be [INAUDIBLE].

00:35:44.660 --> 00:35:45.550
It's terrible.

00:36:00.790 --> 00:36:03.270
So I was just trying to
remove some containers,

00:36:03.270 --> 00:36:06.368
but [INAUDIBLE].

00:36:06.368 --> 00:36:08.400
I've removed some images.

00:36:08.400 --> 00:36:10.470
Hopefully none of
them are important.

00:36:24.222 --> 00:36:25.930
CHRIS RAMSDALE: So
you know when somebody

00:36:25.930 --> 00:36:28.789
says they're demoing things
that are hot off the press,

00:36:28.789 --> 00:36:30.580
and you guys say this
is hot off the press.

00:36:33.430 --> 00:36:36.360
We have early dog fooders that
are trying this out right now.

00:36:36.360 --> 00:36:40.546
So I think it takes a lot
of courage to get on stage

00:36:40.546 --> 00:36:41.170
and try it out.

00:37:06.806 --> 00:37:08.320
Should we call this one?

00:37:08.320 --> 00:37:14.900
KATE VOLKOVA: Yeah, I'll try
to fix it and show the rest,

00:37:14.900 --> 00:37:18.450
but while you keep
talking a bit more.

00:37:18.450 --> 00:37:20.530
CHRIS RAMSDALE: Fantastic.

00:37:20.530 --> 00:37:22.070
Cool.

00:37:22.070 --> 00:37:24.890
So minus the demo demons--
I thought actually

00:37:24.890 --> 00:37:28.300
that was some really cool
technology, of taking

00:37:28.300 --> 00:37:30.550
Google production services,
moving them into a laptop,

00:37:30.550 --> 00:37:32.130
and then taking
technologies like Docker

00:37:32.130 --> 00:37:33.530
to enable them so
that you can be

00:37:33.530 --> 00:37:35.534
highly efficient as a developer.

00:37:35.534 --> 00:37:36.950
And what it hopefully
will show is

00:37:36.950 --> 00:37:39.400
how we can take that technology
and allow you to further expand

00:37:39.400 --> 00:37:41.970
the languages and run times that
you're using on our platform

00:37:41.970 --> 00:37:44.060
as a service
offering App Engine.

00:37:44.060 --> 00:37:46.080
And then furthermore,
bringing it all down

00:37:46.080 --> 00:37:47.580
into one centralized IDE.

00:37:47.580 --> 00:37:51.140
So you notice Kate, if she had
been doing Android development,

00:37:51.140 --> 00:37:53.790
she'd do it right there,
inside Android Studio.

00:37:53.790 --> 00:37:55.510
So you can build
your mobile client

00:37:55.510 --> 00:37:57.150
and build your
back end services,

00:37:57.150 --> 00:37:59.850
all within one centralized tool.

00:37:59.850 --> 00:38:02.614
And mobile and cloud
working together

00:38:02.614 --> 00:38:04.530
is something we're
extremely passionate about.

00:38:04.530 --> 00:38:05.840
It's near and dear to our heart.

00:38:05.840 --> 00:38:07.900
So you definitely want to
check out these sessions,

00:38:07.900 --> 00:38:10.210
if you're interested, over the
course of today and tomorrow.

00:38:10.210 --> 00:38:12.780
And by the way, don't worry,
these are all in your schedule.

00:38:12.780 --> 00:38:18.490
But they'll also be put up when
we get done with the session.

00:38:18.490 --> 00:38:20.710
So I want to talk a bit
about integrated DevOps.

00:38:20.710 --> 00:38:25.340
So when you actually move from
your laptop into production,

00:38:25.340 --> 00:38:27.890
you do that deployment, your
DevOps don't need to leave you.

00:38:27.890 --> 00:38:29.520
They shouldn't
leave you, actually.

00:38:29.520 --> 00:38:31.269
In fact, one would say
that it's even more

00:38:31.269 --> 00:38:33.534
important to have that
introspection into applications

00:38:33.534 --> 00:38:35.200
that are actually
running in production.

00:38:35.200 --> 00:38:37.085
Because after all,
it's no longer

00:38:37.085 --> 00:38:39.460
a bug that's impacting you
and your other developers that

00:38:39.460 --> 00:38:40.600
are building out
the application,

00:38:40.600 --> 00:38:42.891
you're talking about bugs
that actually impact your end

00:38:42.891 --> 00:38:44.910
users, and then
sometimes your business.

00:38:44.910 --> 00:38:46.380
So like in the
case of Search, you

00:38:46.380 --> 00:38:48.750
add another hundred
milliseconds of latency,

00:38:48.750 --> 00:38:52.197
and it could cost you millions
of dollars in terms of revenue.

00:38:52.197 --> 00:38:53.780
So with that, let's
take a look at how

00:38:53.780 --> 00:38:56.460
we're doing things within
the Google Cloud Platform,

00:38:56.460 --> 00:38:57.460
in terms of DevOps.

00:38:57.460 --> 00:38:57.960
Whoops.

00:39:00.882 --> 00:39:01.940
Sorry about that.

00:39:01.940 --> 00:39:04.380
So I'm going to bump back
down to the console here.

00:39:10.789 --> 00:39:22.530
And here.

00:39:25.010 --> 00:39:26.510
So the first thing
we'll do is we'll

00:39:26.510 --> 00:39:29.830
take a look at our-- yeah,
looking for monitoring data.

00:39:29.830 --> 00:39:30.930
Sorry about that.

00:39:30.930 --> 00:39:33.540
So first of all, what we
have is integrated monitoring

00:39:33.540 --> 00:39:35.877
and metrics for your Managed
VMs and for your compute.

00:39:35.877 --> 00:39:38.210
And since we're bringing
together App Engine and Compute

00:39:38.210 --> 00:39:39.920
Engine, we're also
bringing together the data

00:39:39.920 --> 00:39:42.360
and the monitoring that you
actually need to see as well.

00:39:42.360 --> 00:39:43.860
So here I'm looking
at one instance,

00:39:43.860 --> 00:39:45.690
and I can see a summary
of overall traffic,

00:39:45.690 --> 00:39:48.320
and I can easily
bump back and forth

00:39:48.320 --> 00:39:51.260
between the actual
underlying VMs.

00:39:51.260 --> 00:39:53.030
So here, I'm seeing
compute statistics,

00:39:53.030 --> 00:39:56.149
like CPU utilization
and memory utilization.

00:39:56.149 --> 00:39:58.690
But I can also see a summary of
the requests and the response

00:39:58.690 --> 00:39:59.070
latency.

00:39:59.070 --> 00:40:00.820
So those are things
that you would get out

00:40:00.820 --> 00:40:02.104
of your app heuristics.

00:40:02.104 --> 00:40:03.520
When you're just
running a raw VM,

00:40:03.520 --> 00:40:08.204
all you really see is disk,
network, CPU, and memory.

00:40:08.204 --> 00:40:09.870
But when you're running
a full on stack,

00:40:09.870 --> 00:40:12.036
the full on stack that I
had mentioned when you move

00:40:12.036 --> 00:40:13.826
a Managed VM into
production, you

00:40:13.826 --> 00:40:15.700
get that web server,
that application server,

00:40:15.700 --> 00:40:18.260
that web serving stack
that you want to see

00:40:18.260 --> 00:40:19.900
and have introspection into.

00:40:19.900 --> 00:40:21.920
And so we're doing that.

00:40:21.920 --> 00:40:24.520
Now, with Managed
VMs, what we're doing

00:40:24.520 --> 00:40:28.310
is we're moving and creating
a homogeneous fleet of compute

00:40:28.310 --> 00:40:28.999
for you.

00:40:28.999 --> 00:40:30.540
And that homogeneous
fleet of compute

00:40:30.540 --> 00:40:32.470
is managed by our
services and by our SREs,

00:40:32.470 --> 00:40:35.110
as I kind of mentioned
going through here.

00:40:35.110 --> 00:40:38.241
Now, for those services
and those teams to do that,

00:40:38.241 --> 00:40:41.320
that fleet of compute needs
to be hermetically sealed.

00:40:41.320 --> 00:40:42.820
Meaning we can't
just let-- we don't

00:40:42.820 --> 00:40:45.352
allow developers to willy-nilly
go into the machines

00:40:45.352 --> 00:40:47.560
and create what we call a
kind of special snowflakes.

00:40:47.560 --> 00:40:49.430
Because if you
have, for example,

00:40:49.430 --> 00:40:52.369
a hundred VMs running,
and VM 45 and 46

00:40:52.369 --> 00:40:53.910
are slightly different
than the rest,

00:40:53.910 --> 00:40:55.743
and you go try to manage
all those together,

00:40:55.743 --> 00:40:57.674
it becomes highly,
highly complicated.

00:40:57.674 --> 00:41:00.090
And you can imagine, as you
scale up to tens of thousands,

00:41:00.090 --> 00:41:01.540
it gets even worse.

00:41:01.540 --> 00:41:03.446
Now, given that, that
those are locked down

00:41:03.446 --> 00:41:05.990
and you don't have root
access into those VMs,

00:41:05.990 --> 00:41:08.390
one might say, well,
hmm, that kind of poses

00:41:08.390 --> 00:41:11.770
a non-trivial problem of how
do I get data off of those VMs,

00:41:11.770 --> 00:41:13.410
right?

00:41:13.410 --> 00:41:13.920
Like logs.

00:41:13.920 --> 00:41:16.690
So how do I get request logs
or application logs or system

00:41:16.690 --> 00:41:19.630
logs, or even third party
logs, off those VMs?

00:41:19.630 --> 00:41:22.887
Well, the logs are on
the VMs, and the VMs

00:41:22.887 --> 00:41:25.220
are funneling all of that
traffic and all those log data

00:41:25.220 --> 00:41:27.820
back to a centralized logging
repository that I mentioned

00:41:27.820 --> 00:41:29.450
in one of the earlier slides.

00:41:29.450 --> 00:41:31.700
And what that means for
you is, as a developer,

00:41:31.700 --> 00:41:34.505
you come back to
our console here,

00:41:34.505 --> 00:41:36.960
and you'll see that we have
integrated logs access.

00:41:36.960 --> 00:41:39.860
So it will allow you to
do things like filter logs

00:41:39.860 --> 00:41:43.400
by log source, by
log request type.

00:41:43.400 --> 00:41:47.850
You can filter by
errors-- in a second.

00:41:47.850 --> 00:41:52.457
You can actually do debugging
of the request logs--

00:41:52.457 --> 00:41:54.540
the application logging--
in terms of the request.

00:41:54.540 --> 00:41:55.998
So you can see what
the application

00:41:55.998 --> 00:41:58.690
is doing based on what
the user is requesting.

00:41:58.690 --> 00:42:01.250
And finally, you can see those
third party logs as well.

00:42:01.250 --> 00:42:07.817
So let's say if we bump
into-- let me actually

00:42:07.817 --> 00:42:08.900
pick a different one here.

00:42:25.610 --> 00:42:26.130
There we go.

00:42:26.130 --> 00:42:26.660
Sorry.

00:42:26.660 --> 00:42:27.930
Just was a little bit delayed.

00:42:27.930 --> 00:42:30.780
So here what we can see is
we see the App Engine logs.

00:42:30.780 --> 00:42:33.230
And if I filter through
these, I can probably find one

00:42:33.230 --> 00:42:38.263
that's-- Info.

00:42:38.263 --> 00:42:39.220
Yeah.

00:42:39.220 --> 00:42:41.620
If I click on the Info one.

00:42:41.620 --> 00:42:44.790
So here, what I'm seeing is that
this is a request back to the--

00:42:44.790 --> 00:42:46.750
that's not necessarily
that interesting.

00:42:46.750 --> 00:42:50.850
Well, you can see it's a request
back to the _ah/remote_api

00:42:50.850 --> 00:42:51.540
path.

00:42:51.540 --> 00:42:52.420
That's the request that came in.

00:42:52.420 --> 00:42:54.169
And what you see
highlighted in the yellow

00:42:54.169 --> 00:42:57.920
there is actually what the
application was logging.

00:42:57.920 --> 00:43:01.012
I could actually sort by status.

00:43:01.012 --> 00:43:03.930
[INAUDIBLE] Don't
see any errors.

00:43:03.930 --> 00:43:08.870
Look at that, I actually have
no bugs in my code over here.

00:43:08.870 --> 00:43:11.520
And then, if I come
down to Compute Engine.

00:43:11.520 --> 00:43:13.842
I had mentioned that a
portion of the WalkShare demo

00:43:13.842 --> 00:43:15.550
was actually running
a Redis cluster that

00:43:15.550 --> 00:43:18.709
allows you to do streaming,
with some indexing in there.

00:43:18.709 --> 00:43:21.000
And so we're doing is actually
running-- I can show you

00:43:21.000 --> 00:43:21.890
the Redis logs here.

00:43:21.890 --> 00:43:25.930
So I pull that off and filter
by something as simple as Redis.

00:43:28.732 --> 00:43:29.334
Yeah, OK.

00:43:29.334 --> 00:43:31.000
So there you can see
all the Redis logs.

00:43:31.000 --> 00:43:32.583
The idea is we've
consolidated it down

00:43:32.583 --> 00:43:34.270
into one unified logs viewer.

00:43:34.270 --> 00:43:39.620
And we're pulling those
logs off of the machines.

00:43:39.620 --> 00:43:42.940
Then finally, in
the topic of-- so

00:43:42.940 --> 00:43:45.790
I mentioned that these VMs
are locked down by default.

00:43:45.790 --> 00:43:46.982
No root access is available.

00:43:46.982 --> 00:43:48.440
We realized that
there's times when

00:43:48.440 --> 00:43:50.340
you need to get to
the underlying VM.

00:43:50.340 --> 00:43:51.750
You might have a CPU spike.

00:43:51.750 --> 00:43:54.531
You might have an out of memory
error-- who knows, right?

00:43:54.531 --> 00:43:56.780
And after many years of being
a developer and building

00:43:56.780 --> 00:43:58.550
developer tools, I know
there's one thing that you do,

00:43:58.550 --> 00:43:59.820
is that you have to
know when to get out

00:43:59.820 --> 00:44:01.278
of the way of the
developer and let

00:44:01.278 --> 00:44:02.607
them do what they need to do.

00:44:02.607 --> 00:44:04.690
So in the spirit of that,
we've made it super easy

00:44:04.690 --> 00:44:07.550
to get to the underlying
VM-- to break glass and get

00:44:07.550 --> 00:44:09.420
to the Compute Engine VM.

00:44:09.420 --> 00:44:13.130
So if I come into-- I think I
had this lined up over here.

00:44:13.130 --> 00:44:20.780
If I come into our
versions-- there we go.

00:44:20.780 --> 00:44:22.837
So here we have a Managed
VM that's running.

00:44:22.837 --> 00:44:23.420
Click on that.

00:44:26.580 --> 00:44:28.640
OK, so what I'm doing
is I'm looking, again,

00:44:28.640 --> 00:44:31.290
at the monitoring of metrics
for this particular Managed

00:44:31.290 --> 00:44:33.130
VM, which I'm only
running one of.

00:44:33.130 --> 00:44:35.920
It could be 5 or 10, depending
on how I change my properties.

00:44:35.920 --> 00:44:39.640
But what you see over
here is this SSH tab.

00:44:39.640 --> 00:44:41.800
And I'll come back to
what's in this dialogue,

00:44:41.800 --> 00:44:43.633
but I'm going to work
through this dialogue.

00:44:43.633 --> 00:44:45.620
And it's going to
open up root access

00:44:45.620 --> 00:44:48.310
and SSH connectivity
back into the VM.

00:44:48.310 --> 00:44:51.600
And furthermore, the developer
console makes it super easy,

00:44:51.600 --> 00:44:54.920
because we now support SSH
in a tab in your browser.

00:44:54.920 --> 00:44:57.440
And what you see here
is that obviously we're

00:44:57.440 --> 00:45:00.600
enabling root access, but
we're starting the SSH service.

00:45:00.600 --> 00:45:03.450
And we're enabling access.

00:45:03.450 --> 00:45:07.780
And so now I'm actually
in the VM-- I really

00:45:07.780 --> 00:45:12.680
apologize for how small this is.

00:45:12.680 --> 00:45:13.520
OK, bear with me.

00:45:13.520 --> 00:45:14.560
Sorry, it's super small.

00:45:14.560 --> 00:45:16.090
But I'm actually
in the VM, and I

00:45:16.090 --> 00:45:19.140
can do simple things
like run netstat.

00:45:19.140 --> 00:45:21.870
I can run PS.

00:45:21.870 --> 00:45:24.650
I can run top if I want to.

00:45:24.650 --> 00:45:27.110
All the commands that are
available to you in a VM.

00:45:27.110 --> 00:45:30.155
And finally, I can exit,
and I'm good to go.

00:45:30.155 --> 00:45:32.030
And all you need to do
to get that thing back

00:45:32.030 --> 00:45:33.750
into being managed
is switch from user

00:45:33.750 --> 00:45:36.190
managed to Google managed.

00:45:36.190 --> 00:45:38.130
Now, real quickly,
what does that do?

00:45:38.130 --> 00:45:41.090
So when we switch it from
Google managed to user managed

00:45:41.090 --> 00:45:43.280
and we enable root access,
we're giving you access

00:45:43.280 --> 00:45:45.810
to the VM, in which case
you can SSH in and make

00:45:45.810 --> 00:45:47.350
any changes you want to.

00:45:47.350 --> 00:45:48.880
After all, it's your VM.

00:45:48.880 --> 00:45:51.790
But by giving you root access
and letting you make changes,

00:45:51.790 --> 00:45:53.652
we want to remove our
management processes

00:45:53.652 --> 00:45:55.360
because it will conflict
with each other.

00:45:55.360 --> 00:45:55.877
They could, right?

00:45:55.877 --> 00:45:58.450
You can make all kinds of
kernel changes, who knows what.

00:45:58.450 --> 00:45:59.742
So we move it out of that pool.

00:45:59.742 --> 00:46:02.200
And furthermore, we take it
out of the health checking pool

00:46:02.200 --> 00:46:02.750
as well.

00:46:02.750 --> 00:46:03.630
Because the last
thing we want to have

00:46:03.630 --> 00:46:06.570
happen is our health checker
to our health checking service

00:46:06.570 --> 00:46:08.400
to think that the VM
is actually unhealthy,

00:46:08.400 --> 00:46:09.680
because you're debugging
it or something,

00:46:09.680 --> 00:46:11.760
and shoot it and terminate
it, in which case

00:46:11.760 --> 00:46:13.720
that's a terrible developer
experience for you.

00:46:13.720 --> 00:46:14.510
So we make it super simple.

00:46:14.510 --> 00:46:16.640
You move back and forth
between user managed

00:46:16.640 --> 00:46:19.436
and Google managed.

00:46:19.436 --> 00:46:20.210
So great.

00:46:23.050 --> 00:46:24.750
If you want to
see more on DevOps

00:46:24.750 --> 00:46:26.901
and how we're working on
monitoring and our work

00:46:26.901 --> 00:46:28.900
with Stackdriver, check
out these sessions today

00:46:28.900 --> 00:46:29.441
and tomorrow.

00:46:31.850 --> 00:46:33.890
OK, so to recap,
I definitely think

00:46:33.890 --> 00:46:35.652
that we've gone from
the zero to the--

00:46:35.652 --> 00:46:37.110
we're now to the
hero stage, right?

00:46:37.110 --> 00:46:38.800
We've gone through
getting started,

00:46:38.800 --> 00:46:42.000
creating an application
in our cloud platform.

00:46:42.000 --> 00:46:43.410
We've deployed some code.

00:46:43.410 --> 00:46:45.660
We've done a build in the cloud.

00:46:45.660 --> 00:46:47.930
We've walked through how
to build an Android client.

00:46:47.930 --> 00:46:49.724
We've talked about
how to do integrated

00:46:49.724 --> 00:46:51.640
DevOps and centralized
logging and monitoring,

00:46:51.640 --> 00:46:53.300
and get access to
the underlying VM,

00:46:53.300 --> 00:46:55.300
and to see all of the
metrics and the monitoring

00:46:55.300 --> 00:46:59.235
that's coming from our VMs.

00:46:59.235 --> 00:47:01.610
So yeah, I definitely think
we've reached the hero stage.

00:47:01.610 --> 00:47:04.590
There were some bumps along
the way, but we got there.

00:47:04.590 --> 00:47:06.170
And I see that
we're short on time,

00:47:06.170 --> 00:47:07.950
so I'm going to wrap it up here.

00:47:07.950 --> 00:47:09.410
Did you--

00:47:09.410 --> 00:47:13.810
KATE VOLKOVA: Unless we want to
talk through the development--

00:47:13.810 --> 00:47:17.747
through the deployment
step for Managed VMs.

00:47:17.747 --> 00:47:19.830
CHRIS RAMSDALE: I think
we're kind of out of time.

00:47:19.830 --> 00:47:23.070
KATE VOLKOVA: Then forget.

00:47:23.070 --> 00:47:25.380
CHRIS RAMSDALE: I'm sorry.

00:47:25.380 --> 00:47:27.581
So just a real quick recap.

00:47:27.581 --> 00:47:29.330
If it wasn't clear,
developer productivity

00:47:29.330 --> 00:47:30.210
is near and dear to our hearts.

00:47:30.210 --> 00:47:32.260
It's something we're very,
very passionate about.

00:47:32.260 --> 00:47:34.130
And the way we view
that is making getting

00:47:34.130 --> 00:47:36.830
started super easy to do
so that you get progress

00:47:36.830 --> 00:47:40.224
in the order of minutes
and not necessarily hours.

00:47:40.224 --> 00:47:41.640
We believe in a
unified tool chain

00:47:41.640 --> 00:47:43.130
so that you have access
to all of our services

00:47:43.130 --> 00:47:45.330
at your fingertips, and
they're easy to use.

00:47:45.330 --> 00:47:47.150
We want to move Google
production services

00:47:47.150 --> 00:47:48.774
and make them available
on your laptops

00:47:48.774 --> 00:47:51.270
so that it's easy to debug
and to iterate and be agile.

00:47:51.270 --> 00:47:53.690
And then finally, we want
integrated DevOps to follow you

00:47:53.690 --> 00:47:55.440
into the cloud so
that production

00:47:55.440 --> 00:47:56.649
is no longer a black box.

00:47:56.649 --> 00:47:58.690
And you can have the
monitoring and introspection

00:47:58.690 --> 00:48:01.023
you need so that you can make
change and actually impact

00:48:01.023 --> 00:48:02.109
your application.

00:48:02.109 --> 00:48:04.150
So again, thanks for
spending time with us today.

00:48:04.150 --> 00:48:05.885
We appreciate it.

00:48:05.885 --> 00:48:07.260
And if you're
interested, there's

00:48:07.260 --> 00:48:09.343
going to be some other
sessions talking about some

00:48:09.343 --> 00:48:12.690
of the things we covered today
in our Zero to Hero talk.

00:48:12.690 --> 00:48:13.700
So thanks a lot.

00:48:13.700 --> 00:48:15.189
[APPLAUSE]

