WEBVTT
Kind: captions
Language: en

00:00:00.282 --> 00:00:01.740
When I want to
learn something new,

00:00:01.740 --> 00:00:04.500
I'll dive right in and start
hacking something together

00:00:04.500 --> 00:00:07.790
using my intuition
and Stack Overflow.

00:00:07.790 --> 00:00:10.310
I want to invest a couple of
hours getting a feel for how

00:00:10.310 --> 00:00:13.100
things work without worrying
too much about the right way

00:00:13.100 --> 00:00:14.240
to do it.

00:00:14.240 --> 00:00:16.639
So if all I want to do is
build an Android app that

00:00:16.639 --> 00:00:18.930
will automatically turn on
my internet connected lights

00:00:18.930 --> 00:00:21.520
when I get close to
my house, do I really

00:00:21.520 --> 00:00:25.300
need to use Fragments,
Services, and Intent Receivers?

00:00:25.300 --> 00:00:27.040
For me, step one is
getting something

00:00:27.040 --> 00:00:29.740
to work, a proof of concept
that what I want to do

00:00:29.740 --> 00:00:31.500
is even possible.

00:00:31.500 --> 00:00:34.770
It's throwaway code that
generally no one will ever see,

00:00:34.770 --> 00:00:37.070
but it'll get me excited
enough to sit down and invest

00:00:37.070 --> 00:00:39.890
the time required to
build something real.

00:00:39.890 --> 00:00:42.490
Developing real apps for
mobile is complicated.

00:00:42.490 --> 00:00:44.350
So as a developer
advocate, I worry

00:00:44.350 --> 00:00:46.740
that we spend so much
time encouraging beginners

00:00:46.740 --> 00:00:49.230
to develop the right
way that folks like

00:00:49.230 --> 00:00:51.960
me will get frustrated
before they experience

00:00:51.960 --> 00:00:54.560
the thrill of getting
something cool to work.

00:00:54.560 --> 00:00:58.490
So before looking at why we
can't simply do everything

00:00:58.490 --> 00:01:01.620
within a single Activity, let's
go ahead and build a prototype

00:01:01.620 --> 00:01:05.104
that does exactly that.

00:01:05.104 --> 00:01:06.270
So we got the main Activity.

00:01:06.270 --> 00:01:07.340
This is going to
be our main form.

00:01:07.340 --> 00:01:09.006
We've got nothing in
here at the moment.

00:01:09.006 --> 00:01:12.090
So this is our base layout.

00:01:12.090 --> 00:01:14.900
We have text, hello world.

00:01:14.900 --> 00:01:19.320
So we can keep this
TextView, because this

00:01:19.320 --> 00:01:22.070
is where we're going to stick
our location results so we

00:01:22.070 --> 00:01:24.590
can see what happens as we're
getting location updates.

00:01:24.590 --> 00:01:26.040
We want to give an ID.

00:01:26.040 --> 00:01:30.920
So we're going to call
this location text.

00:01:30.920 --> 00:01:33.350
So now we're able
to get access to it.

00:01:33.350 --> 00:01:35.720
And we can change the text.

00:01:35.720 --> 00:01:38.200
We don't want that
to be hello world.

00:01:38.200 --> 00:01:40.470
We want this to show allocation.

00:01:40.470 --> 00:01:45.960
So I'm just going to set
this to none received.

00:01:45.960 --> 00:01:50.320
So let's find a button.

00:01:50.320 --> 00:01:51.790
Drag that on here.

00:01:51.790 --> 00:01:55.670
I'm going to put it underneath.

00:01:55.670 --> 00:02:04.380
And I'm going to change the
text here to location on.

00:02:04.380 --> 00:02:06.540
And I'm going to
grab another button.

00:02:09.509 --> 00:02:11.890
Put it next to the first button.

00:02:16.950 --> 00:02:21.657
And I'm going to call
this one location off.

00:02:21.657 --> 00:02:22.990
I'm going to drop it underneath.

00:02:29.914 --> 00:02:31.330
Now I have a really
simple layout,

00:02:31.330 --> 00:02:34.190
which is going to let us turn
the LocationManager on and off.

00:02:34.190 --> 00:02:36.564
So we're going to need to make
sure both of these buttons

00:02:36.564 --> 00:02:39.770
have IDs as well so we
can get access to them.

00:02:39.770 --> 00:02:43.280
And ID is button on.

00:02:43.280 --> 00:02:46.780
And this one is going
to be button off.

00:02:50.160 --> 00:02:54.000
And we're going to change our
text ID as well so that it's

00:02:54.000 --> 00:02:55.530
consistent with the others.

00:02:55.530 --> 00:03:01.647
And this will be
text edit location.

00:03:01.647 --> 00:03:03.730
Now we're going to flip
back to the main Activity.

00:03:18.910 --> 00:03:29.610
Now we know that we
have an off button,

00:03:29.610 --> 00:03:30.610
now we have an EditText.

00:03:39.030 --> 00:03:42.130
And we're also going to want
a LocationManager, which

00:03:42.130 --> 00:03:44.040
is what I'm going to
use to get location

00:03:44.040 --> 00:03:46.145
updates-- LocationManager.

00:03:49.420 --> 00:03:55.130
And then we're going to want
to use the on button to enable

00:03:55.130 --> 00:03:56.020
our location updates.

00:03:58.550 --> 00:04:04.480
So we'll assign a
new onClickListener,

00:04:04.480 --> 00:04:06.482
and request location
updates from there

00:04:06.482 --> 00:04:07.565
using the LocationManager.

00:04:20.980 --> 00:04:23.980
And then we will have
something to turn off

00:04:23.980 --> 00:04:25.110
the LocationListener.

00:04:25.110 --> 00:04:27.925
So we'll do the same
thing for the off button.

00:04:32.500 --> 00:04:35.940
Well fist, we know this is
a TextView, not an EditText.

00:04:40.830 --> 00:04:45.990
Let's go ahead and create
these values in the meantime.

00:04:45.990 --> 00:04:49.310
It's going to be 10 seconds.

00:04:49.310 --> 00:04:51.570
Our distance, one meter.

00:04:51.570 --> 00:04:54.930
Now for our
provider, we're going

00:04:54.930 --> 00:04:56.920
to use the
LocationManager again.

00:04:56.920 --> 00:05:03.240
Get best provider
criteria, which is enabled.

00:05:03.240 --> 00:05:07.580
And in fact we're going to go
ahead and move that in here.

00:05:24.804 --> 00:05:26.220
Really the only
thing that matters

00:05:26.220 --> 00:05:28.490
here is whether it's coarse
or fine, where coarse

00:05:28.490 --> 00:05:32.330
is going to give you
a better battery life,

00:05:32.330 --> 00:05:34.430
and finger is going to
give you higher accuracy.

00:05:34.430 --> 00:05:36.550
Really you're just choosing
between using the GPS

00:05:36.550 --> 00:05:37.440
or using the Wi-Fi.

00:05:37.440 --> 00:05:39.785
All right, so now all
we need is a listener.

00:05:39.785 --> 00:05:41.160
We could do that
in line as well,

00:05:41.160 --> 00:05:42.660
but we're going to
do that out here.

00:05:46.230 --> 00:05:46.940
So that's right.

00:05:46.940 --> 00:05:50.235
We're going to need to have
our TextView have a scope

00:05:50.235 --> 00:05:52.810
that we can actually
access here.

00:05:52.810 --> 00:05:58.030
So let's bring it
outside of our onCreate.

00:05:58.030 --> 00:06:04.134
And onLocationChanged, we're
going to set our location text.

00:06:04.134 --> 00:06:06.050
Eventually we're going
to want to update this.

00:06:06.050 --> 00:06:09.280
For now, we just want to see
it updating as the application

00:06:09.280 --> 00:06:11.850
changes come in.

00:06:11.850 --> 00:06:13.690
If our LocationProvider
is disabled,

00:06:13.690 --> 00:06:17.177
we want to update the
text to say as much.

00:06:17.177 --> 00:06:19.760
In the real world, you're going
to want to do something there,

00:06:19.760 --> 00:06:22.550
which is most likely find a
different LocationProvider

00:06:22.550 --> 00:06:23.050
to use.

00:06:23.050 --> 00:06:25.970
This is usually the GPS got
turned off for some reason

00:06:25.970 --> 00:06:27.670
but again for our
purposes, we just

00:06:27.670 --> 00:06:31.572
want to be able to
see what is happening.

00:06:31.572 --> 00:06:33.030
So if we come down
here, we can see

00:06:33.030 --> 00:06:34.680
something is underlined in red.

00:06:34.680 --> 00:06:36.300
So what's going on here?

00:06:36.300 --> 00:06:38.300
And we need to get the
right access permissions

00:06:38.300 --> 00:06:41.040
to be able to get fine location.

00:06:41.040 --> 00:06:42.190
So let's do that.

00:06:42.190 --> 00:06:45.770
Add permissions
for fine location.

00:06:45.770 --> 00:06:49.450
All right, so what
we're seeing here

00:06:49.450 --> 00:06:52.660
is actually the new
permission model for M,

00:06:52.660 --> 00:06:55.100
where we need to ask
for that fine location

00:06:55.100 --> 00:06:57.120
at the time at which
it's requested.

00:06:57.120 --> 00:06:59.255
Let's make this a little
bit more readable.

00:06:59.255 --> 00:07:01.296
All right, so this is
going to check to make sure

00:07:01.296 --> 00:07:03.960
we have permission, whether
it be fine or coarse,

00:07:03.960 --> 00:07:07.280
depending on what kind
of activity provider

00:07:07.280 --> 00:07:08.190
we are requesting.

00:07:08.190 --> 00:07:10.012
In this case it's
going to be fine.

00:07:10.012 --> 00:07:10.970
But we may change that.

00:07:10.970 --> 00:07:13.170
And so this is going to
handle both of those cases.

00:07:13.170 --> 00:07:14.880
And what it's
suggesting we do here

00:07:14.880 --> 00:07:19.650
is if that isn't the case, that
we call request permissions.

00:07:19.650 --> 00:07:22.010
And that will then
pop up a dialog

00:07:22.010 --> 00:07:25.404
asking the user if they are
going to allow us to use it.

00:07:25.404 --> 00:07:26.820
So we're going to
need to override

00:07:26.820 --> 00:07:30.510
this method if the user
does allow us the permission

00:07:30.510 --> 00:07:31.455
to use a location.

00:07:57.334 --> 00:08:02.640
Now here we're going to want to
enable our location updates--

00:08:02.640 --> 00:08:03.140
updates.

00:08:07.380 --> 00:08:10.340
Which of course doesn't
yet exist, so let's

00:08:10.340 --> 00:08:13.620
put that in here as
well, which means we're

00:08:13.620 --> 00:08:18.615
going to want to call it here.

00:08:18.615 --> 00:08:22.270
And of course that means we
need to move our LocationManager

00:08:22.270 --> 00:08:23.230
to a different scope.

00:08:28.210 --> 00:08:30.070
Let's put him up here as well.

00:08:43.084 --> 00:08:44.250
And we'll take their advice.

00:08:44.250 --> 00:08:48.060
And we're going to call
request permission here.

00:09:01.760 --> 00:09:05.970
And we're going to move
this down here as well.

00:09:05.970 --> 00:09:09.380
minTime, minDistance
needs to get moved also.

00:09:16.380 --> 00:09:17.890
This gets us far
enough that we're

00:09:17.890 --> 00:09:21.960
able to see whether or not
our location call works.

00:09:21.960 --> 00:09:24.905
So let me fire up the emulator
and see what that looks like.

00:09:38.060 --> 00:09:40.100
Let's start by
turning location on.

00:09:43.130 --> 00:09:44.440
So this is the permission.

00:09:44.440 --> 00:09:48.210
Let's me say allow.

00:09:48.210 --> 00:09:51.870
So let's go with location.

00:09:51.870 --> 00:09:54.410
And let's send it.

00:09:54.410 --> 00:09:56.620
So you can see the updates
coming through there.

00:09:56.620 --> 00:09:59.180
We turn location off.

00:09:59.180 --> 00:10:00.374
And nothing happens.

00:10:00.374 --> 00:10:02.040
Now of course for our
testing, we really

00:10:02.040 --> 00:10:06.460
like to see all of
these instantly.

00:10:06.460 --> 00:10:09.960
So why don't we go
back into our code

00:10:09.960 --> 00:10:11.680
and change the update rates.

00:10:11.680 --> 00:10:15.314
So this should get us
all updates all the time.

00:10:15.314 --> 00:10:16.980
So now I'm going to
tidy up a little bit

00:10:16.980 --> 00:10:18.380
and move a few things around.

00:10:22.390 --> 00:10:25.520
My real goal here is just to
separate all the boilerplate

00:10:25.520 --> 00:10:28.880
code like listeners, click
handlers, and permission checks

00:10:28.880 --> 00:10:30.330
from my app and business logic.

00:10:34.160 --> 00:10:36.610
This separation is also going
to make it easier for me

00:10:36.610 --> 00:10:39.960
later when I need to move and
refactor it and pull it out

00:10:39.960 --> 00:10:43.055
of this monolithic Activity
into the appropriate services

00:10:43.055 --> 00:10:43.930
and intent receivers.

00:10:48.240 --> 00:10:50.600
Ideally I want to be
able see all the code

00:10:50.600 --> 00:10:52.690
I'm going to be adjusting
and changing regularly

00:10:52.690 --> 00:10:55.910
on the same screen.

00:10:55.910 --> 00:10:57.490
Now we know the
next thing which we

00:10:57.490 --> 00:10:59.365
need to do, because we
know that we are going

00:10:59.365 --> 00:11:01.430
to want to react to
the location changing,

00:11:01.430 --> 00:11:03.070
because the ultimate
goal here is,

00:11:03.070 --> 00:11:06.140
once we get within a certain
distance of our house,

00:11:06.140 --> 00:11:07.961
is to turn on the lights.

00:11:07.961 --> 00:11:10.210
So we're going to need at
least one more method, which

00:11:10.210 --> 00:11:13.400
is going to turn on the lights.

00:11:13.400 --> 00:11:15.253
And we're going
to call that here.

00:11:29.570 --> 00:11:31.250
OK, so we need to
find out whether we

00:11:31.250 --> 00:11:33.020
are within a set distance.

00:11:33.020 --> 00:11:36.760
So we'll probably want to have
ways to set all that in our UI.

00:11:36.760 --> 00:11:40.730
But for now, let's just
go and make some statics.

00:11:40.730 --> 00:11:43.810
So we're going to need to know
how far our current location is

00:11:43.810 --> 00:11:45.310
from our home location.

00:11:50.920 --> 00:11:53.150
So we can do that by
saying location.distanceTo.

00:11:56.120 --> 00:11:59.760
And we can say here
our home location,

00:11:59.760 --> 00:12:04.730
which means we're going to
need to have a home location.

00:12:04.730 --> 00:12:06.990
So let's do that.

00:12:06.990 --> 00:12:08.420
Let's cheat, do that manually.

00:12:08.420 --> 00:12:11.890
Explicitly set the
latitude and longitude.

00:12:11.890 --> 00:12:13.780
So neither of these exist.

00:12:13.780 --> 00:12:16.130
Oops, neither of these exist.

00:12:16.130 --> 00:12:18.970
I'm going to interrupt myself
here to point something else.

00:12:18.970 --> 00:12:21.470
You may have noticed that I'm
setting the longitude twice

00:12:21.470 --> 00:12:23.670
and never sitting the latitude.

00:12:23.670 --> 00:12:25.780
That's something I didn't
notice at the time,

00:12:25.780 --> 00:12:28.990
and it's going to cause
me problems later.

00:12:28.990 --> 00:12:33.333
I'm going to go with
Google's home location, which

00:12:33.333 --> 00:12:34.740
I will grab.

00:12:44.850 --> 00:12:46.700
So we have a distance,
which is the distance

00:12:46.700 --> 00:12:48.700
from your current location
to the home location.

00:12:48.700 --> 00:12:50.270
If it's less than
a turn on distance,

00:12:50.270 --> 00:12:52.220
which we've sent
to 10 meters, then

00:12:52.220 --> 00:12:56.590
toggle the lights on, which
is happening down here.

00:12:56.590 --> 00:12:59.070
So we know that we're going
to want to turn the lights on

00:12:59.070 --> 00:13:00.569
and off and that
this is going to be

00:13:00.569 --> 00:13:02.740
a command over the interwebs.

00:13:02.740 --> 00:13:04.500
We can't actually--
we're not allowed

00:13:04.500 --> 00:13:07.930
to access the internet
on the main thread.

00:13:07.930 --> 00:13:11.140
So we're going to have to move
it into a background thread.

00:13:11.140 --> 00:13:14.660
So we're going to do that by
creating an AsyncTask, which

00:13:14.660 --> 00:13:16.340
creates some simple
handlers for us

00:13:16.340 --> 00:13:18.340
to make this life a
little bit easier.

00:13:18.340 --> 00:13:21.210
Again, like I said, not
the right approach to this.

00:13:21.210 --> 00:13:22.670
Much better ways using Services.

00:13:22.670 --> 00:13:24.990
But this is an easy way
for us to get started,

00:13:24.990 --> 00:13:27.880
AsyncTask lets you move a
task into the background,

00:13:27.880 --> 00:13:31.030
optionally reporting progress
while it's being executed,

00:13:31.030 --> 00:13:32.830
and then synchronizing
the UI thread

00:13:32.830 --> 00:13:34.970
when that task is complete.

00:13:34.970 --> 00:13:37.800
We can choose to pass parameters
and optionally return a value

00:13:37.800 --> 00:13:39.480
from the background task.

00:13:39.480 --> 00:13:41.564
Here we're going to
use void to specify

00:13:41.564 --> 00:13:43.230
that we don't want
to use any parameters

00:13:43.230 --> 00:13:45.880
or return any values.

00:13:45.880 --> 00:13:48.780
I'm going to have an API or
OS call to make that happen.

00:13:48.780 --> 00:13:50.030
But let's have a look.

00:13:50.030 --> 00:13:52.450
We want to be able to have a
way of finding out that this

00:13:52.450 --> 00:13:54.850
is actually happening.

00:13:54.850 --> 00:13:58.600
Why don't we return a Boolean.

00:13:58.600 --> 00:14:01.450
So now we're going to get a
return from the background

00:14:01.450 --> 00:14:04.600
task telling us whether we've
turned the lights on or off.

00:14:04.600 --> 00:14:08.081
And we're going to want
to override onPostExecute,

00:14:08.081 --> 00:14:10.330
which is what gets called
once the background task has

00:14:10.330 --> 00:14:11.920
finished.

00:14:11.920 --> 00:14:18.240
And here we get the
Boolean returned to us.

00:14:18.240 --> 00:14:21.010
And we'll use a Toast
here, because this is now

00:14:21.010 --> 00:14:22.460
synchronized to the UI thread.

00:14:22.460 --> 00:14:25.770
So the onPostExecute is
synchronized to your UI thread.

00:14:25.770 --> 00:14:27.210
So we can do things like this.

00:14:32.752 --> 00:14:34.460
All right, let's have
a look at what that

00:14:34.460 --> 00:14:37.380
looks like in the emulator.

00:14:37.380 --> 00:14:42.250
So why don't we just go ahead
and paste in the specific lat

00:14:42.250 --> 00:14:43.380
and long for home.

00:14:43.380 --> 00:14:45.680
Now what we're expecting
to happen is I hit send.

00:14:45.680 --> 00:14:48.437
And we should get a Toast
that tells us that we

00:14:48.437 --> 00:14:49.520
have turned the lights on.

00:14:52.260 --> 00:14:54.460
That blank look
corresponds to something

00:14:54.460 --> 00:14:59.340
on the inside that
looks a lot like this.

00:14:59.340 --> 00:15:01.210
Notice the lat-long
value has changed.

00:15:01.210 --> 00:15:04.300
But I was expecting a
Toast, and there isn't one.

00:15:04.300 --> 00:15:06.700
You and I know that's because
I set the home location

00:15:06.700 --> 00:15:10.277
longitude to its latitude,
and it's latitude to zero.

00:15:10.277 --> 00:15:12.110
At the time I didn't
know if the problem was

00:15:12.110 --> 00:15:14.190
my asynchronous code,
the Toast, or something

00:15:14.190 --> 00:15:16.980
related to the distance
from home calculation.

00:15:16.980 --> 00:15:18.780
I knew the lat-long
coming in was correct,

00:15:18.780 --> 00:15:21.680
so I decided to update the UI
to show my current distance

00:15:21.680 --> 00:15:23.256
from home instead.

00:15:23.256 --> 00:15:24.630
That will be useful
for debugging

00:15:24.630 --> 00:15:27.940
and give me a clue as
to what was going wrong.

00:15:27.940 --> 00:15:29.930
So now that we have
all of this, rather

00:15:29.930 --> 00:15:32.324
than displaying the
latitude-longitude,

00:15:32.324 --> 00:15:33.990
which doesn't really
make mean anything.

00:15:33.990 --> 00:15:36.106
We know what that does now.

00:15:36.106 --> 00:15:37.480
So what we're
going to do instead

00:15:37.480 --> 00:15:41.261
is update our text string
to show the distance

00:15:41.261 --> 00:15:43.760
so we can see as we're getting
closer, because that's really

00:15:43.760 --> 00:15:46.647
the critical part that
we want to have now.

00:15:46.647 --> 00:15:47.980
So we're getting a distance now.

00:15:47.980 --> 00:15:49.360
Perfect.

00:15:49.360 --> 00:15:51.920
Eventually I try plugging in
the values for my home location

00:15:51.920 --> 00:15:52.820
at the Googleplex.

00:15:52.820 --> 00:15:56.140
And the distance result
is not what I expected.

00:15:56.140 --> 00:15:59.040
So now I know the problem
is the distance calculation.

00:15:59.040 --> 00:16:01.640
I spent several minutes
going down some blind alleys.

00:16:01.640 --> 00:16:04.450
I'm pretty convinced I'm
transposing lats and longs

00:16:04.450 --> 00:16:04.950
somewhere.

00:16:04.950 --> 00:16:09.847
But eventually I see what's
right in front of me.

00:16:09.847 --> 00:16:12.430
All right, so you can see I've
set both latitude and longitude

00:16:12.430 --> 00:16:13.655
to the same value.

00:16:18.130 --> 00:16:21.730
Now we are much closer-- much
closer to our house-- in fact,

00:16:21.730 --> 00:16:23.250
less than a meter
away, which you'd

00:16:23.250 --> 00:16:25.450
hope given that it's
the right value.

00:16:29.810 --> 00:16:32.730
But wait, it's that face again.

00:16:32.730 --> 00:16:35.690
I know my distance is right,
but there's still no Toast.

00:16:35.690 --> 00:16:38.516
Now I'm annoyed.

00:16:38.516 --> 00:16:41.410
What the [BLEEP]?

00:16:41.410 --> 00:16:43.810
I set some break points
and stepped through this

00:16:43.810 --> 00:16:44.834
a couple of times.

00:16:44.834 --> 00:16:47.250
Looks like I'm getting the
right values at the right time.

00:16:47.250 --> 00:16:51.520
The right code is getting
executed, but still no Toast.

00:16:51.520 --> 00:16:54.210
Maybe I can't call a Toast
from within AsyncTask.

00:16:54.210 --> 00:16:57.130
Maybe I'm sending in the
wrong context to the Toast.

00:16:57.130 --> 00:16:58.940
Eventually I decide
to take a look

00:16:58.940 --> 00:17:02.852
at why the little red light
bulb is highlighting my code.

00:17:02.852 --> 00:17:07.064
And of course you're going
to want to show your Toast.

00:17:19.760 --> 00:17:21.369
All right, so there you go.

00:17:21.369 --> 00:17:25.480
That all works as you
would expect it to.

00:17:25.480 --> 00:17:27.690
So we've got an app that's
a pretty reasonable proof

00:17:27.690 --> 00:17:30.810
of concept that it's at least
possible to do what we want,

00:17:30.810 --> 00:17:32.960
automatically turn on our
internet connected lights

00:17:32.960 --> 00:17:34.730
when we get close to home.

00:17:34.730 --> 00:17:38.500
This screencast represents about
two hours of real time coding.

00:17:38.500 --> 00:17:41.420
Most of what's being trimmed
is me thinking or going down

00:17:41.420 --> 00:17:44.050
wrong alleys when debugging,
waiting for emulators

00:17:44.050 --> 00:17:46.020
to spin up, or trying
to remember which

00:17:46.020 --> 00:17:48.062
API calls I should be making.

00:17:48.062 --> 00:17:50.020
Now if you're an experienced
Android developer,

00:17:50.020 --> 00:17:51.970
you're probably getting
ready to throw something

00:17:51.970 --> 00:17:53.505
through your screen
right about now.

00:17:53.505 --> 00:17:55.880
And if you've done even a
little Android training,

00:17:55.880 --> 00:17:59.310
you're either angry or
confused, and rightly so.

00:17:59.310 --> 00:18:01.790
While this code will
technically work,

00:18:01.790 --> 00:18:03.590
it does a lot more
wrong than it does

00:18:03.590 --> 00:18:06.170
right, which is why you
typically don't show people

00:18:06.170 --> 00:18:08.450
your throw away prototype.

00:18:08.450 --> 00:18:10.170
As you can see from
these red circles,

00:18:10.170 --> 00:18:11.680
each representing
code that either

00:18:11.680 --> 00:18:13.840
doesn't belong in an
Activity or has been replaced

00:18:13.840 --> 00:18:16.740
with a new and
better API, or both,

00:18:16.740 --> 00:18:19.430
not much of what we've
written is going to be kept.

00:18:19.430 --> 00:18:21.090
And that's ignoring
even basic things

00:18:21.090 --> 00:18:23.210
like how to handle
Activity life cycle events

00:18:23.210 --> 00:18:25.990
and potentially leaking memory
through our LocationListener

00:18:25.990 --> 00:18:28.270
and AsyncTask implementations.

00:18:28.270 --> 00:18:30.280
Now turning this
into a real app is

00:18:30.280 --> 00:18:32.160
where the complexity comes in.

00:18:32.160 --> 00:18:33.840
Later videos in the
"Pivotal" series

00:18:33.840 --> 00:18:35.940
will dive into each of
these issues in detail.

00:18:35.940 --> 00:18:39.060
But let's take a quick look at
what a better structure might

00:18:39.060 --> 00:18:40.120
look like.

00:18:40.120 --> 00:18:42.730
For starters, in a lot of
other platform paradigms,

00:18:42.730 --> 00:18:46.320
that main form is synonymous
with the app itself.

00:18:46.320 --> 00:18:48.520
And that's not the
case in Android.

00:18:48.520 --> 00:18:51.700
The only thing that should
be in the Activity is the UI.

00:18:51.700 --> 00:18:54.620
Anything else, like requesting
and receiving location updates,

00:18:54.620 --> 00:18:58.550
or making internet API calls,
needs to be moved elsewhere.

00:18:58.550 --> 00:19:00.560
So a better
architecture is to have

00:19:00.560 --> 00:19:03.770
an Activity for the UI combined
with Services to provide

00:19:03.770 --> 00:19:07.000
tasks when the UI is invisible,
and an Intent receiver

00:19:07.000 --> 00:19:11.090
to react to context changes
even if the app isn't running.

00:19:11.090 --> 00:19:14.570
Ideally this app would be
almost entirely autonomous.

00:19:14.570 --> 00:19:18.100
You do need a UI to turn it
on, to set a home location.

00:19:18.100 --> 00:19:20.410
And the rest will
then be automatic.

00:19:20.410 --> 00:19:22.210
You don't need to
use Fragments here,

00:19:22.210 --> 00:19:25.330
but encapsulating that
UI logic into Fragments

00:19:25.330 --> 00:19:28.080
will make it easier to build
out more complex UI navigation

00:19:28.080 --> 00:19:29.820
patterns later.

00:19:29.820 --> 00:19:32.480
Apps without visible activities
get killed by the runtime,

00:19:32.480 --> 00:19:35.240
so if we want to get continuous
location updates when another

00:19:35.240 --> 00:19:37.000
is in the foreground,
you'll need

00:19:37.000 --> 00:19:38.926
a Service to keep it alive.

00:19:38.926 --> 00:19:40.300
Within that Service
we can either

00:19:40.300 --> 00:19:41.970
trigger the constant
location updates

00:19:41.970 --> 00:19:44.960
as we do in that prototype,
or we can be more efficient

00:19:44.960 --> 00:19:47.540
and use the geofencing APIs
available from Google Play

00:19:47.540 --> 00:19:49.900
services rather than
constantly calculating

00:19:49.900 --> 00:19:51.440
the distance from home.

00:19:51.440 --> 00:19:55.310
Using that API, we may not
even need this Service.

00:19:55.310 --> 00:19:57.630
The light control
API calls absolutely

00:19:57.630 --> 00:19:58.860
need to be in a Service.

00:19:58.860 --> 00:20:01.520
All internet lookups need to
be moved out of Activities,

00:20:01.520 --> 00:20:03.660
and using a service will
ensure it can complete

00:20:03.660 --> 00:20:05.390
before the app is killed.

00:20:05.390 --> 00:20:08.200
Finally, we want to move
our LocationListener out

00:20:08.200 --> 00:20:11.250
of the Activity and listen
for location change Intents

00:20:11.250 --> 00:20:14.170
from within its own Intent
receiver class, which

00:20:14.170 --> 00:20:16.160
we'll register in the manifest.

00:20:16.160 --> 00:20:17.830
We do this so that
even if the app is

00:20:17.830 --> 00:20:19.680
being killed by the
runtime, we will still

00:20:19.680 --> 00:20:21.510
receive location updates.

00:20:21.510 --> 00:20:23.800
The app will actually
be started specifically

00:20:23.800 --> 00:20:26.855
so that it can receive these
location change Intents.

00:20:26.855 --> 00:20:28.730
And then they can start
the lighting service,

00:20:28.730 --> 00:20:30.380
if that's necessary.

00:20:30.380 --> 00:20:33.510
So after a couple of hours,
we have a working prototype

00:20:33.510 --> 00:20:36.450
and the first pass of a
more robust architecture,

00:20:36.450 --> 00:20:39.502
a good starting point to
start hacking away in earnest.

00:20:39.502 --> 00:20:41.877
It's important to understand
the right way to build apps,

00:20:41.877 --> 00:20:43.710
but that shouldn't get
in the way of hacking

00:20:43.710 --> 00:20:45.510
and slashing your way
to a proof of concept

00:20:45.510 --> 00:20:47.391
before you begin in earnest.

00:20:47.391 --> 00:20:49.140
If you found this
interesting, keep an eye

00:20:49.140 --> 00:20:50.930
out for my new show,
"Pivotal," where

00:20:50.930 --> 00:20:52.805
I'll be screencasting
the process of creating

00:20:52.805 --> 00:20:56.020
and upgrading a full location
and context based app

00:20:56.020 --> 00:20:57.660
using the best
practices and patterns

00:20:57.660 --> 00:20:59.040
that I started describing here.

00:20:59.040 --> 00:21:02.390
[MUSIC PLAYING]

