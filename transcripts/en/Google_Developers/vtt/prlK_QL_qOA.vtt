WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.490
[MUSIC PLAYING]

00:00:07.470 --> 00:00:08.459
[APPLAUSE]

00:00:08.459 --> 00:00:10.000
DAVID DEREMER: How's
everybody doing?

00:00:10.000 --> 00:00:10.625
SETH LADD: Hello.

00:00:10.625 --> 00:00:10.930
DAVID DEREMER: Good.

00:00:10.930 --> 00:00:11.950
All right.

00:00:11.950 --> 00:00:12.600
All right.

00:00:12.600 --> 00:00:13.916
We made it work.

00:00:13.916 --> 00:00:15.290
That's right.

00:00:15.290 --> 00:00:16.370
I'm David.

00:00:16.370 --> 00:00:19.440
I am a partner at a New York
City-based digital agency

00:00:19.440 --> 00:00:20.506
called Posse.

00:00:20.506 --> 00:00:22.380
We work with large brands
and large companies

00:00:22.380 --> 00:00:23.740
to launch mobile apps.

00:00:23.740 --> 00:00:24.740
SETH LADD: Hi, everyone.

00:00:24.740 --> 00:00:25.650
My name is Seth Ladd.

00:00:25.650 --> 00:00:28.955
I'm a product manager at
Google and I work on Flutter.

00:00:28.955 --> 00:00:31.080
DAVID DEREMER: So we're
really excited about today.

00:00:31.080 --> 00:00:32.759
We're here to tell
you about how we've

00:00:32.759 --> 00:00:35.640
used some of Google's latest
developer technologies

00:00:35.640 --> 00:00:37.860
to launch a successful
app in the United States

00:00:37.860 --> 00:00:39.840
in record time.

00:00:39.840 --> 00:00:41.910
As an agency, at
Posse, we always

00:00:41.910 --> 00:00:43.926
face incredibly tight deadlines.

00:00:43.926 --> 00:00:45.300
Our clients are
always pushing us

00:00:45.300 --> 00:00:48.030
to do more, faster and cheaper.

00:00:48.030 --> 00:00:51.330
So we're always looking for
cross-platform technologies,

00:00:51.330 --> 00:00:53.654
special architectures-- like
server-less architectures,

00:00:53.654 --> 00:00:55.320
like you've been
seeing a lot of today--

00:00:55.320 --> 00:00:57.600
to help us do things quicker.

00:00:57.600 --> 00:01:00.270
Our clients want us
to deliver value, not

00:01:00.270 --> 00:01:01.680
lines of code or overhead.

00:01:01.680 --> 00:01:03.626
They don't want us to
reinvent the wheel.

00:01:03.626 --> 00:01:05.459
So we've been looking
at these technologies,

00:01:05.459 --> 00:01:07.674
but we always had a
bit of skepticism,

00:01:07.674 --> 00:01:09.090
a little bit of
lack of confidence

00:01:09.090 --> 00:01:11.040
in these solutions relative
to the alternatives--

00:01:11.040 --> 00:01:12.665
until recently, when
we started working

00:01:12.665 --> 00:01:15.300
with Flutter and Firebase.

00:01:15.300 --> 00:01:17.580
SETH LADD: And we're very
glad you found Flutter.

00:01:17.580 --> 00:01:20.670
At Flutter, our mission
is to help teams build

00:01:20.670 --> 00:01:23.970
quality apps faster and easier.

00:01:23.970 --> 00:01:25.950
That's what we're all about.

00:01:25.950 --> 00:01:28.080
In fact, at Google
for a while now,

00:01:28.080 --> 00:01:30.480
we've been helping teams
build successful and

00:01:30.480 --> 00:01:32.770
business-critical apps.

00:01:32.770 --> 00:01:34.860
So then the question
we asked ourselves is,

00:01:34.860 --> 00:01:38.700
could we replicate the success
of Flutter outside of Google?

00:01:38.700 --> 00:01:41.670
So to help us answer that, we
started working with the Google

00:01:41.670 --> 00:01:46.020
Developer Agency Program, which
is how we met David and Posse.

00:01:46.020 --> 00:01:49.380
We thought Flutter was a
great fit for agencies,

00:01:49.380 --> 00:01:51.990
and any team that
wanted to move fast

00:01:51.990 --> 00:01:55.860
without sacrificing quality,
and needing to reach

00:01:55.860 --> 00:01:59.264
all users across all of mobile.

00:01:59.264 --> 00:02:00.930
DAVID DEREMER: When
we dug into Flutter,

00:02:00.930 --> 00:02:03.780
we finally found a platform we
thought we could really use--

00:02:03.780 --> 00:02:06.600
a cross-platform framework that
worked for both iOS and Android

00:02:06.600 --> 00:02:09.210
to create apps that
felt indistinguishable

00:02:09.210 --> 00:02:12.390
from native apps, a reactive
coding style that felt really

00:02:12.390 --> 00:02:15.262
modern and highly productive,
a strongly typed language,

00:02:15.262 --> 00:02:17.220
which was very important
to our developer team,

00:02:17.220 --> 00:02:20.072
and a hot reload feature
that, once we saw it,

00:02:20.072 --> 00:02:21.780
and once we started
using it, drastically

00:02:21.780 --> 00:02:23.790
increased the efficiency
of our developer team.

00:02:23.790 --> 00:02:25.750
We were ready to dive
into this technology.

00:02:25.750 --> 00:02:29.010
But, as an agency, we needed
a client as excited about it

00:02:29.010 --> 00:02:30.300
as we were.

00:02:30.300 --> 00:02:31.290
And then it happened--

00:02:31.290 --> 00:02:34.770
"Hamilton," the hit Broadway
musical based in New York City,

00:02:34.770 --> 00:02:36.119
called us up to do an app.

00:02:36.119 --> 00:02:38.160
And when we told them
about Firebase and Flutter,

00:02:38.160 --> 00:02:40.220
they were as excited
about this as we were.

00:02:40.220 --> 00:02:42.720
SETH LADD: Now, for those of
you who don't know, "Hamilton--

00:02:42.720 --> 00:02:45.900
The Musical," is a
huge deal in the US.

00:02:45.900 --> 00:02:49.260
They have a very large and
very passionate fan base.

00:02:49.260 --> 00:02:52.140
The musical is
constantly sold out.

00:02:52.140 --> 00:02:55.180
It's nearly impossible to
get tickets to across the US.

00:02:55.180 --> 00:03:01.565
It's won 11 Grammys, a Pulitzer
Prize, an Emmy, and more.

00:03:01.565 --> 00:03:03.690
DAVID DEREMER: When the
"Hamilton" team came to us,

00:03:03.690 --> 00:03:06.030
all they cared about was
creating great experiences

00:03:06.030 --> 00:03:06.840
for their fans.

00:03:06.840 --> 00:03:09.970
They just wanted to give the
fans as much as they could.

00:03:09.970 --> 00:03:11.460
And they had no
internal tech team.

00:03:11.460 --> 00:03:12.990
So when we talked
to them about how

00:03:12.990 --> 00:03:15.960
we could do it, the idea of
maintaining two separate code

00:03:15.960 --> 00:03:18.180
bases for iOS and
Android, or maintaining

00:03:18.180 --> 00:03:19.150
a fleet of servers--

00:03:19.150 --> 00:03:20.820
even on Google
Cloud or something

00:03:20.820 --> 00:03:23.460
easy like cloud infrastructure--
was really daunting to them.

00:03:23.460 --> 00:03:25.560
This is a lot of
technology for, basically,

00:03:25.560 --> 00:03:27.720
a bunch of theater people,
who have no technology

00:03:27.720 --> 00:03:30.180
experience, to own.

00:03:30.180 --> 00:03:33.900
So the promise of
cross-platform frameworks

00:03:33.900 --> 00:03:36.600
and server-less architectures
was really interesting to them.

00:03:36.600 --> 00:03:38.970
And, most importantly, they had
an incredibly tight deadline.

00:03:38.970 --> 00:03:40.500
For all the features
they wanted to do,

00:03:40.500 --> 00:03:41.580
we only had three months.

00:03:41.580 --> 00:03:44.674
And this deadline
could not be moved.

00:03:44.674 --> 00:03:46.590
SETH LADD: So, at that
point, the Flutter team

00:03:46.590 --> 00:03:49.650
was very excited, and,
honestly, a little nervous.

00:03:49.650 --> 00:03:52.560
Remember, at that time, it
was still early for Flutter.

00:03:52.560 --> 00:03:54.780
And it hadn't yet
been used for such

00:03:54.780 --> 00:03:57.960
a prominent, five-star,
consumer-facing app.

00:03:57.960 --> 00:03:59.910
The "Hamilton" team
had a long list

00:03:59.910 --> 00:04:02.970
of really important features
and an immovable deadline.

00:04:02.970 --> 00:04:04.682
So could it work?

00:04:04.682 --> 00:04:07.140
DAVID DEREMER: And, as if that
pressure wasn't high enough,

00:04:07.140 --> 00:04:09.960
we got a phone call from the
CEO of "Hamilton," who said,

00:04:09.960 --> 00:04:11.010
"Hamilton" is really big.

00:04:11.010 --> 00:04:12.000
The fans love it.

00:04:12.000 --> 00:04:13.350
We've never failed at anything.

00:04:13.350 --> 00:04:16.204
And this app will not
be the first time.

00:04:16.204 --> 00:04:18.329
SETH LADD: So this is
exactly the kind of challenge

00:04:18.329 --> 00:04:19.537
that our team is looking for.

00:04:19.537 --> 00:04:21.930
So, of course, we
said, yes, let's do it.

00:04:21.930 --> 00:04:25.080
The Posse team, the "Hamilton"
team, and the Flutter team

00:04:25.080 --> 00:04:26.850
devised a plan to execute.

00:04:26.850 --> 00:04:30.030
Posse would build the
app and design the app

00:04:30.030 --> 00:04:32.550
to the specifications
requirements of "Hamilton."

00:04:32.550 --> 00:04:34.650
And the Flutter team
would fix critical bugs

00:04:34.650 --> 00:04:37.110
and add crucial features
to meet all the use

00:04:37.110 --> 00:04:40.382
cases and requirements
for the app.

00:04:40.382 --> 00:04:42.840
DAVID DEREMER: So to give you
an idea of what's in this app

00:04:42.840 --> 00:04:45.060
and how complicated
it was, there's

00:04:45.060 --> 00:04:46.540
a whole lot of
features in here--

00:04:46.540 --> 00:04:48.690
and, again, three short months.

00:04:48.690 --> 00:04:50.472
And so there's a lottery.

00:04:50.472 --> 00:04:51.930
The tickets are
really hard to get.

00:04:51.930 --> 00:04:53.936
You have to buy them a
year out and after-market

00:04:53.936 --> 00:04:55.060
they're like $1,000 apiece.

00:04:55.060 --> 00:04:56.518
So they have this
lottery where you

00:04:56.518 --> 00:04:58.769
can enter to win $10 tickets.

00:04:58.769 --> 00:05:00.810
Tens of thousands of people
enter these lotteries

00:05:00.810 --> 00:05:02.020
every single day.

00:05:02.020 --> 00:05:04.050
It was the most important
feature of the app.

00:05:04.050 --> 00:05:07.007
We also built a fully fleshed
out e-commerce experience

00:05:07.007 --> 00:05:08.590
for you to buy
"Hamilton" merchandise.

00:05:08.590 --> 00:05:09.820
And, of course, for
that, you need something

00:05:09.820 --> 00:05:12.640
like an integration with Magento
and some Stripe integrations

00:05:12.640 --> 00:05:13.960
for process payment--

00:05:13.960 --> 00:05:16.390
all done on Firebase
and Cloud Functions.

00:05:16.390 --> 00:05:19.270
We had a news feed and even
this fun Ham Cam feature,

00:05:19.270 --> 00:05:21.725
which is basically a custom
camera with overlays, even

00:05:21.725 --> 00:05:23.350
location-based overlays
that you unlock

00:05:23.350 --> 00:05:24.910
at the theaters
and other places.

00:05:24.910 --> 00:05:26.440
A ton of features--

00:05:26.440 --> 00:05:28.510
and that's just the
tip of the iceberg.

00:05:28.510 --> 00:05:30.680
And, again, we had almost
no time to do this.

00:05:30.680 --> 00:05:33.430
So being able to do this really
quickly and really effectively

00:05:33.430 --> 00:05:36.220
and beautifully, via
custom-branded design

00:05:36.220 --> 00:05:38.350
was absolutely essential.

00:05:38.350 --> 00:05:39.910
But the real question
for this was,

00:05:39.910 --> 00:05:42.910
could we build an app with
Flutter and with Firebase

00:05:42.910 --> 00:05:44.770
on this timeline with
all of these features,

00:05:44.770 --> 00:05:46.420
in a way that the
fans would love it

00:05:46.420 --> 00:05:48.461
and they would feel that
it was indistinguishable

00:05:48.461 --> 00:05:50.030
from a native app?

00:05:50.030 --> 00:05:52.030
SETH LADD: And, yes,
the fans loved it.

00:05:52.030 --> 00:05:53.410
The media loved it.

00:05:53.410 --> 00:05:55.570
And both the App Store
and the Play Store

00:05:55.570 --> 00:05:58.090
both featured the app.

00:05:58.090 --> 00:06:00.550
DAVID DEREMER: And its uptake
surprised even the "Hamilton"

00:06:00.550 --> 00:06:01.270
team.

00:06:01.270 --> 00:06:03.910
Since we launched, we've had
almost a million installs,

00:06:03.910 --> 00:06:05.650
nearly half a
million active users.

00:06:05.650 --> 00:06:07.810
We've already taken two
million lottery entries.

00:06:07.810 --> 00:06:09.760
And we are already one
of the fastest-growing

00:06:09.760 --> 00:06:11.920
apps on the Google
Cloud Function platform.

00:06:11.920 --> 00:06:14.710
And we show this to you
say Flutter and Firebase

00:06:14.710 --> 00:06:16.990
and a lot of these tools
you're seeing here today,

00:06:16.990 --> 00:06:18.200
they're not just toys.

00:06:18.200 --> 00:06:20.246
These are real things
that work in production

00:06:20.246 --> 00:06:21.370
at tremendously high scale.

00:06:24.225 --> 00:06:26.680
So Flutter and Firebase
are a huge reason

00:06:26.680 --> 00:06:29.950
that we got this app to
so many fans so quickly.

00:06:29.950 --> 00:06:32.170
The speed of development
and the features

00:06:32.170 --> 00:06:33.850
that are given to us
by these tools just

00:06:33.850 --> 00:06:35.180
really couldn't be
matched for our timeline.

00:06:35.180 --> 00:06:36.910
So what we want to
do now is, we're

00:06:36.910 --> 00:06:39.910
going to share some patterns
and some code to show you

00:06:39.910 --> 00:06:41.890
that you, too, can
use these tools,

00:06:41.890 --> 00:06:43.870
that you can
accelerate your process

00:06:43.870 --> 00:06:45.880
and benefit from them
just like we did.

00:06:45.880 --> 00:06:49.402
And we're going to start
first with Firebase.

00:06:49.402 --> 00:06:51.926
So Firebase offers
a ton of tools.

00:06:51.926 --> 00:06:53.800
You may have been to
some talks already today

00:06:53.800 --> 00:06:55.000
where they're talking
about all the cool ways

00:06:55.000 --> 00:06:56.242
that you can use Firebase.

00:06:56.242 --> 00:06:57.700
The really fun
thing about Firebase

00:06:57.700 --> 00:06:59.890
is that you can use as many
of these things or as few

00:06:59.890 --> 00:07:00.800
of these things as you want.

00:07:00.800 --> 00:07:02.920
If you just when you use
Google Analytics, no problem.

00:07:02.920 --> 00:07:03.628
It's really easy.

00:07:03.628 --> 00:07:06.571
Just add the SDK, add some
events, you've got analytics.

00:07:06.571 --> 00:07:07.570
We leaned on it heavily.

00:07:07.570 --> 00:07:09.575
We used Firebase for
basically everything.

00:07:09.575 --> 00:07:10.450
So this is new to us.

00:07:10.450 --> 00:07:13.090
Typically, we built web servers
and complicated web APIs.

00:07:13.090 --> 00:07:16.080
We only used Firebase
in this application.

00:07:16.080 --> 00:07:18.250
The authentication product
was one that saved us

00:07:18.250 --> 00:07:19.510
a tremendous amount of time.

00:07:19.510 --> 00:07:20.616
You add the SDK.

00:07:20.616 --> 00:07:22.990
Your authentication strategy's
already pre-baked for you,

00:07:22.990 --> 00:07:25.600
pretty much-- want to
do email, phone number,

00:07:25.600 --> 00:07:28.870
Google log-in, anything you
want to do-- it's right there.

00:07:28.870 --> 00:07:31.480
It's interoperability with
other Google Cloud Services,

00:07:31.480 --> 00:07:34.151
like Google Cloud
Storage, or Pub/Sub,

00:07:34.151 --> 00:07:35.650
or all of these
other tools that you

00:07:35.650 --> 00:07:38.140
have access to with Google
Cloud is really seamless.

00:07:38.140 --> 00:07:39.634
And it's really
easy to use them.

00:07:39.634 --> 00:07:41.800
So getting images served
out of Google Cloud Storage

00:07:41.800 --> 00:07:44.020
was almost trivial
with Firebase.

00:07:44.020 --> 00:07:45.730
And then there's the
real-time database.

00:07:45.730 --> 00:07:47.521
You know, it's a
different type of database

00:07:47.521 --> 00:07:49.960
than probably a lot
of you are used to.

00:07:49.960 --> 00:07:51.920
But it's real time.

00:07:51.920 --> 00:07:54.029
And that's something that
our team hadn't really

00:07:54.029 --> 00:07:54.820
experienced before.

00:07:54.820 --> 00:07:56.740
We were used to apps
where you make a request,

00:07:56.740 --> 00:07:58.390
you get a response.

00:07:58.390 --> 00:08:01.492
The real-time database-- once
you add the Firebase SDK--

00:08:01.492 --> 00:08:02.200
it's right there.

00:08:02.200 --> 00:08:04.155
Your data is live.

00:08:04.155 --> 00:08:06.280
We're really proud of the
fact that our application

00:08:06.280 --> 00:08:08.230
doesn't have a single
pull-to-refresh anywhere

00:08:08.230 --> 00:08:08.890
in the app.

00:08:08.890 --> 00:08:11.410
What you see is what you
get, live, in real time.

00:08:11.410 --> 00:08:13.120
But, for us, the real
star of this story

00:08:13.120 --> 00:08:16.180
was Cloud Functions,
which is relatively new.

00:08:16.180 --> 00:08:20.570
Before this, we used
Firebase for other pieces,

00:08:20.570 --> 00:08:22.680
but not really as a
full, complete server.

00:08:22.680 --> 00:08:24.220
Cloud Functions
gives us the tools

00:08:24.220 --> 00:08:26.440
we need for this to be
a first-class backend

00:08:26.440 --> 00:08:28.060
for an app as big as this one.

00:08:28.060 --> 00:08:30.230
We used it to integrate
with Magento and Stripe

00:08:30.230 --> 00:08:32.350
APIs and all kinds of
third-party services.

00:08:32.350 --> 00:08:34.809
We used it to fan out
our data across Firebase.

00:08:34.809 --> 00:08:38.539
We used it as an API, which
I'll show you in a second.

00:08:38.539 --> 00:08:40.412
So we have all these
tools with Firebase--

00:08:40.412 --> 00:08:42.370
we had the real-time
database, Cloud Functions.

00:08:42.370 --> 00:08:43.960
And one of the things, when
we were getting started,

00:08:43.960 --> 00:08:45.460
was, we had to
figure out, how do we

00:08:45.460 --> 00:08:47.620
make an API out of these tools?

00:08:47.620 --> 00:08:49.240
We're used to
building out express

00:08:49.240 --> 00:08:51.580
or rail servers, where
the app makes a request,

00:08:51.580 --> 00:08:53.720
does some work, you
get your response.

00:08:53.720 --> 00:08:56.771
You probably all have built APIs
like that before for your apps.

00:08:56.771 --> 00:08:58.520
We were struggling
with how do we do this.

00:08:58.520 --> 00:09:00.440
You know, we didn't want
to build a web server,

00:09:00.440 --> 00:09:01.898
because, you know,
what's the point

00:09:01.898 --> 00:09:04.649
of a server-less architecture
if you're maintaining servers.

00:09:04.649 --> 00:09:05.440
And then it hit us.

00:09:05.440 --> 00:09:08.980
We have this connection already
to our real-time database,

00:09:08.980 --> 00:09:10.810
the ability to
read and write data

00:09:10.810 --> 00:09:13.360
in like incredibly fast speeds.

00:09:13.360 --> 00:09:14.890
And we have Cloud Functions.

00:09:14.890 --> 00:09:17.350
So we devised this
asynchronous approach,

00:09:17.350 --> 00:09:20.200
where we use the database
as a connectivity mechanism

00:09:20.200 --> 00:09:22.060
and Cloud Functions
as our logic,

00:09:22.060 --> 00:09:23.800
to do the same work
that we'd typically

00:09:23.800 --> 00:09:25.910
do with a web service.

00:09:25.910 --> 00:09:27.970
So, as an example,
let's say the app

00:09:27.970 --> 00:09:31.130
wants to do something, for
instance, enter the lottery.

00:09:31.130 --> 00:09:32.620
What we do is we
drop a request--

00:09:32.620 --> 00:09:33.610
we write a request--

00:09:33.610 --> 00:09:36.310
to the Firebase
real-time database.

00:09:36.310 --> 00:09:38.890
We triggered a cloud
function based on that write.

00:09:38.890 --> 00:09:41.140
The cloud function does what
we need to do, you know--

00:09:41.140 --> 00:09:43.598
checks the user-- we'll show
you some of this in a minute--

00:09:43.598 --> 00:09:47.040
but does the work that we
don't want the client to do.

00:09:47.040 --> 00:09:49.810
We want it to be controlled
and protected on our server.

00:09:49.810 --> 00:09:52.180
When it's done, it
writes a response back

00:09:52.180 --> 00:09:53.800
to the real-time database.

00:09:53.800 --> 00:09:55.922
The database is-- or
the app is listening

00:09:55.922 --> 00:09:57.130
to this node on the database.

00:09:57.130 --> 00:10:00.550
And since it's real time, as
soon as we make that response,

00:10:00.550 --> 00:10:03.580
the app gets it, just
as if your web API

00:10:03.580 --> 00:10:05.186
responded with some JSON.

00:10:05.186 --> 00:10:06.060
And there we have it.

00:10:06.060 --> 00:10:08.720
We have an API.

00:10:08.720 --> 00:10:10.340
It was incredibly
powerful for us.

00:10:10.340 --> 00:10:13.640
Once we saw this pattern, not
only was it high-performance,

00:10:13.640 --> 00:10:15.290
it saved us a ton of time.

00:10:15.290 --> 00:10:17.240
This app has zero
networking code.

00:10:17.240 --> 00:10:20.210
We hit zero HTTPS
web APIs at all.

00:10:20.210 --> 00:10:22.112
Everything is done
through the database.

00:10:22.112 --> 00:10:23.570
So this was like
mind-blowing to us

00:10:23.570 --> 00:10:25.310
and saved us a tremendous
amount of time.

00:10:25.310 --> 00:10:26.684
So to show you
that this is real,

00:10:26.684 --> 00:10:30.260
and to show you how easy
it is to build an API using

00:10:30.260 --> 00:10:32.060
the real-time database
and Cloud Functions,

00:10:32.060 --> 00:10:34.200
we're going to
demo this pattern.

00:10:34.200 --> 00:10:36.200
This pattern is basically
the same exact pattern

00:10:36.200 --> 00:10:39.219
we're using in this app, that
tens of thousands and upwards--

00:10:39.219 --> 00:10:41.510
we're getting into the hundreds
of thousands-- of users

00:10:41.510 --> 00:10:44.900
are using every single day.

00:10:44.900 --> 00:10:47.660
The first thing I wanted to show
you was our package of JSON.

00:10:47.660 --> 00:10:50.151
The reason I wanted to show
you this is that, on my team,

00:10:50.151 --> 00:10:52.400
we're always looking to
eliminate as many dependencies

00:10:52.400 --> 00:10:53.690
as we can.

00:10:53.690 --> 00:10:56.260
We really only need two
to get this started.

00:10:56.260 --> 00:10:58.220
We need the Firebase
admin module

00:10:58.220 --> 00:10:59.780
to talk to the
real-time database--

00:10:59.780 --> 00:11:01.340
and do other things--
but pretty much

00:11:01.340 --> 00:11:03.880
to read and write to
Firebase from our server.

00:11:03.880 --> 00:11:05.630
And we need our Firebase
functions library

00:11:05.630 --> 00:11:08.330
to register our functions
and to find our triggers.

00:11:08.330 --> 00:11:10.610
You may notice that we
actually are doing a few things

00:11:10.610 --> 00:11:11.818
in our dev dependencies here.

00:11:11.818 --> 00:11:14.365
We're using TypeScript, which
you'll see, and Webpack.

00:11:14.365 --> 00:11:15.990
This was a personal
choice of our team,

00:11:15.990 --> 00:11:19.440
but one that really improved our
efficiency during the process.

00:11:19.440 --> 00:11:21.470
So how do we create a function?

00:11:21.470 --> 00:11:22.820
It's incredibly easy.

00:11:22.820 --> 00:11:25.430
This is just JavaScript-- well,
in this case, it's TypeScript.

00:11:25.430 --> 00:11:26.840
But, you know, at
the end of the day,

00:11:26.840 --> 00:11:29.298
you write it just like you
would write any other JavaScript

00:11:29.298 --> 00:11:29.849
function.

00:11:29.849 --> 00:11:31.640
You'll notice, again,
there's no node here.

00:11:31.640 --> 00:11:32.690
There's no express.

00:11:32.690 --> 00:11:33.680
There's no middleware.

00:11:33.680 --> 00:11:36.080
There's no body parsers,
nothing like that.

00:11:36.080 --> 00:11:38.210
All we do is we define
a trigger path--

00:11:38.210 --> 00:11:40.100
how we want our
function to be invoked.

00:11:40.100 --> 00:11:41.600
In this particular
case, since we're

00:11:41.600 --> 00:11:46.730
doing our request-response
API, we want to on create.

00:11:46.730 --> 00:11:49.940
When someone adds new
data to our database,

00:11:49.940 --> 00:11:52.610
at a particular path
that we've defined--

00:11:52.610 --> 00:11:56.360
in this case, requests lottery
entry, user ID, push key.

00:11:56.360 --> 00:11:58.970
When new data is written to
that path in the database,

00:11:58.970 --> 00:12:00.440
it's going to wake
up our function

00:12:00.440 --> 00:12:02.134
and do the work
we need it to do.

00:12:02.134 --> 00:12:04.550
So we've defined this here in
this enter lottery function.

00:12:07.640 --> 00:12:10.140
So the key thing here is,
why are we doing this?

00:12:10.140 --> 00:12:11.111
Why do we care?

00:12:11.111 --> 00:12:13.610
Historically, you might put a
lot of this work in the client

00:12:13.610 --> 00:12:14.110
side.

00:12:14.110 --> 00:12:16.730
Or Firebase gives you
direct read-write access

00:12:16.730 --> 00:12:18.060
from your app into Firebase.

00:12:18.060 --> 00:12:21.320
But we don't want people to
just be able to drop a lottery

00:12:21.320 --> 00:12:22.400
entry into the database.

00:12:22.400 --> 00:12:24.290
That's something
that could be abused.

00:12:24.290 --> 00:12:28.130
So we want this to be
protected behind our API.

00:12:28.130 --> 00:12:31.440
When the event fires
and is triggered,

00:12:31.440 --> 00:12:33.320
it passes this event
into our function.

00:12:33.320 --> 00:12:35.600
The event has a bunch
of params and data

00:12:35.600 --> 00:12:38.070
that we can access
from that event.

00:12:38.070 --> 00:12:40.100
So this is where we can
get from our database

00:12:40.100 --> 00:12:41.930
path-- we can get
the user ID, we

00:12:41.930 --> 00:12:43.790
can get the actual
data that the app

00:12:43.790 --> 00:12:48.110
passes to us in the request when
it saves it in the database.

00:12:48.110 --> 00:12:50.210
So it behaves kind
of like a web API.

00:12:50.210 --> 00:12:52.250
But it's just a database write.

00:12:52.250 --> 00:12:54.800
The next thing we do is we do
some sensitive business logic.

00:12:54.800 --> 00:12:56.000
These are just
kind of stubbed out

00:12:56.000 --> 00:12:57.299
for the purposes of the demo.

00:12:57.299 --> 00:12:59.840
But, you know, maybe we want to
check if the user's eligible,

00:12:59.840 --> 00:13:01.280
or make sure the
lottery is still open,

00:13:01.280 --> 00:13:03.363
or do something else that's
private, that we don't

00:13:03.363 --> 00:13:04.580
want the world to know about.

00:13:04.580 --> 00:13:06.080
We can do those all here.

00:13:06.080 --> 00:13:07.700
They're just normal JavaScript.

00:13:07.700 --> 00:13:10.255
They can be calls
to third party APIs,

00:13:10.255 --> 00:13:13.220
they can be asynchronous things,
we can send push notifications,

00:13:13.220 --> 00:13:15.230
save files, whatever
we want to do.

00:13:15.230 --> 00:13:17.000
But, assuming
everything's OK, we

00:13:17.000 --> 00:13:19.070
define our entry data object.

00:13:19.070 --> 00:13:21.700
And then we can save
it out to the database.

00:13:21.700 --> 00:13:23.630
Now this particular
area of the database--

00:13:23.630 --> 00:13:25.880
like our lottery
entries right here--

00:13:25.880 --> 00:13:28.250
this is something that is
protected by database rules.

00:13:28.250 --> 00:13:29.800
Nobody can read
or write to this.

00:13:29.800 --> 00:13:31.487
It's read-write false.

00:13:31.487 --> 00:13:33.320
And this is really
important because we only

00:13:33.320 --> 00:13:35.810
want our systems to be
able to allow people

00:13:35.810 --> 00:13:37.896
to create a lottery entry.

00:13:37.896 --> 00:13:39.770
By doing it in this
pattern, we can make sure

00:13:39.770 --> 00:13:42.320
that our API's safe.

00:13:42.320 --> 00:13:44.750
Once we're done with that,
and the user has successfully

00:13:44.750 --> 00:13:47.030
saved their lottery
entry, now we just

00:13:47.030 --> 00:13:49.640
need to write the response
back to our response node

00:13:49.640 --> 00:13:50.390
in the database.

00:13:50.390 --> 00:13:52.660
We have a little helper
function here called respond.

00:13:52.660 --> 00:13:53.840
We'll, maybe, post
some of this code

00:13:53.840 --> 00:13:55.298
afterwards, if
anyone's interested.

00:13:55.298 --> 00:13:57.590
But this just basically
writes our response object

00:13:57.590 --> 00:13:59.800
with some data-- like
here's your chance ID that

00:13:59.800 --> 00:14:01.760
was generated through
this, and maybe a message

00:14:01.760 --> 00:14:03.334
like, hooray, you
won the lottery.

00:14:03.334 --> 00:14:05.000
We write that back
to the response node.

00:14:05.000 --> 00:14:07.280
And since the app, after
it made the request,

00:14:07.280 --> 00:14:09.500
has an active listener
on the response node--

00:14:09.500 --> 00:14:11.420
as soon as we make
that write, the app

00:14:11.420 --> 00:14:14.360
gets the update and the
spinner stops spinning

00:14:14.360 --> 00:14:15.350
and the app is done.

00:14:15.350 --> 00:14:16.490
You've entered the lottery.

00:14:16.490 --> 00:14:19.740
But there's a key point
we want to make here.

00:14:19.740 --> 00:14:22.134
Unlike a normal web request,
where the connection's open,

00:14:22.134 --> 00:14:24.050
and until you close that
connection, it's just

00:14:24.050 --> 00:14:25.508
kind of-- you're
hanging out there,

00:14:25.508 --> 00:14:28.070
you're waiting for the
response to finish.

00:14:28.070 --> 00:14:29.360
This is asynchronous.

00:14:29.360 --> 00:14:31.310
Once we make that
request to the database,

00:14:31.310 --> 00:14:33.268
the Cloud Function's
running in the background.

00:14:33.268 --> 00:14:35.100
It's almost totally
detached from the app.

00:14:35.100 --> 00:14:37.330
So even though we respond
to the app here and we say,

00:14:37.330 --> 00:14:38.930
hey, you know, hey, you're done.

00:14:38.930 --> 00:14:40.190
Congrats.

00:14:40.190 --> 00:14:41.030
We can keep going.

00:14:41.030 --> 00:14:43.560
Our Cloud Function doesn't
have to stop there.

00:14:43.560 --> 00:14:45.170
We can do some other
background tasks.

00:14:45.170 --> 00:14:46.640
Maybe we want to
fan out the data

00:14:46.640 --> 00:14:49.640
to other areas of the database,
or send a push notification,

00:14:49.640 --> 00:14:50.690
or do something else.

00:14:50.690 --> 00:14:53.510
And when we're finally done,
we just return and tell

00:14:53.510 --> 00:14:55.550
our function we're done.

00:14:55.550 --> 00:14:56.910
So it's really cool.

00:14:56.910 --> 00:14:59.150
Again, it saved us a
tremendous amount of time.

00:14:59.150 --> 00:15:01.670
And there's a few key points
I wanted to highlight here.

00:15:01.670 --> 00:15:05.080
We called this asynchronous,
database-driven API--

00:15:05.080 --> 00:15:06.860
no networking code at all.

00:15:06.860 --> 00:15:09.110
On our team, we always
end up spending more time

00:15:09.110 --> 00:15:11.990
than we expect writing
code to interface

00:15:11.990 --> 00:15:13.240
with some sort of web server--

00:15:13.240 --> 00:15:15.656
networking code-- that we don't
like writing, that we have

00:15:15.656 --> 00:15:18.280
to rewrite all the time, and
it takes a lot of extra time,

00:15:18.280 --> 00:15:20.380
and our clients
don't care about it.

00:15:20.380 --> 00:15:21.500
No networking.

00:15:21.500 --> 00:15:24.200
It was all handled by the
Firebase SDK the second

00:15:24.200 --> 00:15:26.060
we were able to interact
with our database.

00:15:26.060 --> 00:15:29.190
The other thing is that there's
no authentication or error

00:15:29.190 --> 00:15:29.690
handling.

00:15:29.690 --> 00:15:32.130
Again, all baked in
to the Firebase SDK.

00:15:34.650 --> 00:15:36.510
It's incredibly
high-scale as well.

00:15:36.510 --> 00:15:38.450
The Firebase database
scales really nicely.

00:15:38.450 --> 00:15:41.150
And it has this amazing
real-time performance

00:15:41.150 --> 00:15:43.070
that we were worried
about, how's this

00:15:43.070 --> 00:15:44.361
going to work performance-wise?

00:15:44.361 --> 00:15:46.550
But because it's such a
blazing fast database,

00:15:46.550 --> 00:15:49.110
the performance has been
really, really amazing.

00:15:49.110 --> 00:15:52.070
And, perhaps, most importantly
for our client and for us,

00:15:52.070 --> 00:15:53.510
no servers to maintain.

00:15:53.510 --> 00:15:56.600
We didn't have to worry about
the type of web server we're

00:15:56.600 --> 00:15:58.670
using, who's going to
patch the libraries,

00:15:58.670 --> 00:16:01.280
and all of the operating systems
that our servers are running,

00:16:01.280 --> 00:16:02.420
and how we're going
to provision this,

00:16:02.420 --> 00:16:03.740
how are we going to
handle the scale,

00:16:03.740 --> 00:16:05.330
and how are we
going to auto-scale

00:16:05.330 --> 00:16:06.640
whenever a lottery opens.

00:16:06.640 --> 00:16:11.180
Cloud Functions and Firebase
just did it all for us.

00:16:11.180 --> 00:16:14.210
So Firebase really
worked for us.

00:16:14.210 --> 00:16:16.250
It was a tremendous
win for the project.

00:16:16.250 --> 00:16:17.790
But it was only half the story.

00:16:17.790 --> 00:16:22.100
We also had to craft a
beautiful, custom design

00:16:22.100 --> 00:16:25.340
for "Hamilton," to really
showcase their brand in an app.

00:16:25.340 --> 00:16:26.840
And for that, we
turned to Flutter.

00:16:26.840 --> 00:16:27.950
And I'm going to turn
it over to Seth now,

00:16:27.950 --> 00:16:28.910
who's going to tell
you a little bit more

00:16:28.910 --> 00:16:30.602
about how Flutter helped us out.

00:16:30.602 --> 00:16:31.310
SETH LADD: Great.

00:16:31.310 --> 00:16:33.470
Thanks, David.

00:16:33.470 --> 00:16:35.150
So, as we heard
in the beginning,

00:16:35.150 --> 00:16:39.140
Flutter is a new mobile app SDK
that makes it easier and faster

00:16:39.140 --> 00:16:41.960
to deliver high-quality apps.

00:16:41.960 --> 00:16:45.230
At its technical core,
Flutter is a portable renderer

00:16:45.230 --> 00:16:46.790
and UI toolkit.

00:16:46.790 --> 00:16:48.650
Now all of these
layers you see here

00:16:48.650 --> 00:16:52.700
are compiled to native
ARM code for fast startup

00:16:52.700 --> 00:16:55.260
and predictable performance.

00:16:55.260 --> 00:16:58.250
But, even more importantly,
this portable renderer

00:16:58.250 --> 00:17:00.560
is shipped inside of your app.

00:17:00.560 --> 00:17:03.740
When you deploy your
app via APKs or IPAs,

00:17:03.740 --> 00:17:05.599
the renderer,
toolkit, and your code

00:17:05.599 --> 00:17:08.250
are all bundled together
and shipped out.

00:17:08.250 --> 00:17:11.400
This means that the beautiful
pixels your designers worked

00:17:11.400 --> 00:17:16.200
so hard on, and the beautiful
UI that your developers built,

00:17:16.200 --> 00:17:19.650
is the same beautiful experience
your users will get, no matter

00:17:19.650 --> 00:17:24.359
what OEM version or OS version
they happen to be running.

00:17:24.359 --> 00:17:26.490
Now, of course, I could
keep telling you about it,

00:17:26.490 --> 00:17:29.130
but it's much cooler to
show you about Flutter.

00:17:29.130 --> 00:17:30.900
So let's go to the
demo setup here.

00:17:34.640 --> 00:17:35.530
OK.

00:17:35.530 --> 00:17:38.710
We're going to show three
important parts of Flutter,

00:17:38.710 --> 00:17:40.880
which David and Posse
took advantage of when

00:17:40.880 --> 00:17:42.130
they built the "Hamilton" app.

00:17:42.130 --> 00:17:45.950
The first is our
reactive widget library.

00:17:45.950 --> 00:17:47.770
The second is hot reload.

00:17:47.770 --> 00:17:50.197
And the third is Flutter Fire.

00:17:50.197 --> 00:17:52.030
Let's start by looking
at the lottery screen

00:17:52.030 --> 00:17:53.560
here on these phones.

00:17:53.560 --> 00:17:54.640
This is an iOS phone.

00:17:54.640 --> 00:17:56.690
And this is an Android phone.

00:17:56.690 --> 00:17:59.260
You can see that it's a
beautiful brand-first design.

00:17:59.260 --> 00:18:02.440
And the colors look
similar down here.

00:18:02.440 --> 00:18:05.470
So they could deliver a
consistent UI experience

00:18:05.470 --> 00:18:07.660
across all their users,
across all of mobile.

00:18:07.660 --> 00:18:09.640
But just because
these look identical

00:18:09.640 --> 00:18:12.190
doesn't mean that they
have to act identical.

00:18:12.190 --> 00:18:15.340
Flutter and Posse
know that users on iOS

00:18:15.340 --> 00:18:18.020
have a particular muscle
memory when they scroll

00:18:18.020 --> 00:18:20.320
and a particular scrolling
friction on Android

00:18:20.320 --> 00:18:22.030
that people are used to.

00:18:22.030 --> 00:18:23.530
And so let's look
at a demo of that.

00:18:23.530 --> 00:18:25.930
On iOS-- I'm sorry, on Android--

00:18:25.930 --> 00:18:28.180
you can see the
over-scroll glow.

00:18:28.180 --> 00:18:30.610
And on iOS, you get the bounce.

00:18:30.610 --> 00:18:32.320
So the "Hamilton"
app is beautiful

00:18:32.320 --> 00:18:34.160
and a consistent
brand experience

00:18:34.160 --> 00:18:38.600
and still feels very natural
to users on both platforms.

00:18:38.600 --> 00:18:39.100
OK.

00:18:39.100 --> 00:18:43.060
So let's pick a piece of this UI
and show you how we built this.

00:18:43.060 --> 00:18:45.400
We're going to pick the
little blue badge here,

00:18:45.400 --> 00:18:48.740
the active badge here, to play
with and show you how it works.

00:18:48.740 --> 00:18:50.710
So let's go to the code here.

00:18:50.710 --> 00:18:53.244
This is the code for
that active badge.

00:18:53.244 --> 00:18:54.910
And the first thing
I want you to notice

00:18:54.910 --> 00:18:56.960
is that it's all code.

00:18:56.960 --> 00:18:58.824
There's no markup,
there's no XML,

00:18:58.824 --> 00:19:01.240
there's no other language you
have to learn or build tools

00:19:01.240 --> 00:19:02.110
for.

00:19:02.110 --> 00:19:04.540
It's a single language and
a single set of libraries

00:19:04.540 --> 00:19:07.480
for you to build your
UI, manipulate your UI,

00:19:07.480 --> 00:19:09.430
and build your business logic.

00:19:09.430 --> 00:19:12.490
This means you get the power
of code and the power of IDEs

00:19:12.490 --> 00:19:14.380
like refactoring,
jump to definition,

00:19:14.380 --> 00:19:18.525
et cetera, when you build all
aspects of that front end.

00:19:18.525 --> 00:19:19.900
The other thing
I want you to see

00:19:19.900 --> 00:19:22.930
is that this Lottery State
badge, this active blue box

00:19:22.930 --> 00:19:25.630
right here, is itself a widget.

00:19:25.630 --> 00:19:28.600
Widgets and Flutter are the
core basic building blocks

00:19:28.600 --> 00:19:29.860
of all UI.

00:19:29.860 --> 00:19:33.580
In fact, widgets themselves
are made out of more widgets.

00:19:33.580 --> 00:19:37.390
This composition mental model,
this composition architecture,

00:19:37.390 --> 00:19:38.570
is very powerful.

00:19:38.570 --> 00:19:40.322
You can recompose
the core widgets

00:19:40.322 --> 00:19:41.530
that we ship in our toolkit--

00:19:41.530 --> 00:19:43.660
things like padding,
things like text--

00:19:43.660 --> 00:19:46.000
into more beautiful,
higher-level widgets,

00:19:46.000 --> 00:19:47.920
which themselves
can be composed.

00:19:47.920 --> 00:19:50.500
So it's a really good model.

00:19:50.500 --> 00:19:53.740
Now let's look at what it's
like to actually code this UI.

00:19:53.740 --> 00:19:56.262
Let's say that we did some
user studies and this blue

00:19:56.262 --> 00:19:58.720
here may be not working and
maybe the badge is a little too

00:19:58.720 --> 00:19:59.220
small.

00:19:59.220 --> 00:20:01.261
So we sit down next to
our designer and they say,

00:20:01.261 --> 00:20:02.345
what other colors you got?

00:20:02.345 --> 00:20:04.344
Well, of course-- well,
we have all the colors--

00:20:04.344 --> 00:20:06.041
but, of course, we
have code completion,

00:20:06.041 --> 00:20:07.540
so you can see what
the options are.

00:20:07.540 --> 00:20:09.110
And let's say we
want to try green.

00:20:09.110 --> 00:20:10.837
So I'm going to save
it here in the code

00:20:10.837 --> 00:20:13.420
and jump over to a console here
that's driving these two apps.

00:20:13.420 --> 00:20:16.270
I'm going to hit r.

00:20:16.270 --> 00:20:19.060
And-- as it's initializing
the system here.

00:20:19.060 --> 00:20:20.470
OK, great.

00:20:20.470 --> 00:20:24.250
It has changed live,
hot reloaded, these UIs

00:20:24.250 --> 00:20:25.701
to change from blue to green.

00:20:25.701 --> 00:20:26.200
[APPLAUSE]

00:20:26.200 --> 00:20:26.700
Thank you.

00:20:26.700 --> 00:20:27.994
[APPLAUSE]

00:20:30.750 --> 00:20:33.600
This hot reload system really
enabled Posse and others

00:20:33.600 --> 00:20:36.360
to iterate very quickly in
their development cycle.

00:20:36.360 --> 00:20:38.500
But we can do more than
just change colors.

00:20:38.500 --> 00:20:40.230
Let's change some math here.

00:20:40.230 --> 00:20:43.800
Let's say we want to change the
size of this button here live.

00:20:43.800 --> 00:20:46.680
So we're going to go
over and reload here.

00:20:46.680 --> 00:20:47.860
And-- oh-- oh, no.

00:20:47.860 --> 00:20:49.890
So what just happened?

00:20:49.890 --> 00:20:52.990
Well, most of the UI
rendered just fine.

00:20:52.990 --> 00:20:55.290
But the widget here--
this active widget--

00:20:55.290 --> 00:20:56.880
had a syntax error.

00:20:56.880 --> 00:20:58.440
And, luckily, the
framework said,

00:20:58.440 --> 00:21:00.970
I can render everything except
that one widget that you had.

00:21:00.970 --> 00:21:02.845
And I'm going to show
you what that error is.

00:21:02.845 --> 00:21:05.580
And it even tells me what
the syntax error is, here

00:21:05.580 --> 00:21:07.230
in the red little box.

00:21:07.230 --> 00:21:08.370
So, yep, sure enough.

00:21:08.370 --> 00:21:10.740
It's a syntax error--
forgot to finish.

00:21:10.740 --> 00:21:12.570
So let's go back here, type r.

00:21:12.570 --> 00:21:14.640
And in the time it
takes me look back here,

00:21:14.640 --> 00:21:17.570
we have not only recovered
from a syntax error

00:21:17.570 --> 00:21:20.550
live, without restarting
the app, but we fixed it,

00:21:20.550 --> 00:21:22.470
and now it's a lot
bigger for you to see.

00:21:22.470 --> 00:21:25.690
So, again, this hot reload
dev cycle is really fast.

00:21:25.690 --> 00:21:28.320
But there's one more aspect
of it that I want to show.

00:21:28.320 --> 00:21:30.430
Let's tap on this button
a couple of times.

00:21:30.430 --> 00:21:32.700
And let's add some
state to our app.

00:21:32.700 --> 00:21:33.360
OK.

00:21:33.360 --> 00:21:35.860
Hopefully, you can see, I've
tapped each button seven times.

00:21:35.860 --> 00:21:38.192
State in your app is
like, is a user logged in?

00:21:38.192 --> 00:21:39.650
Or do I have any
items in the cart?

00:21:39.650 --> 00:21:42.009
In this case, how many times
have I tapped the button?

00:21:42.009 --> 00:21:43.800
So we're going to make
another change here.

00:21:43.800 --> 00:21:45.480
Let's say active--

00:21:45.480 --> 00:21:49.230
OK, save-- go back to the
console, hit r for reload.

00:21:49.230 --> 00:21:51.240
And, boom, right
there-- not only

00:21:51.240 --> 00:21:54.090
will you get that about a
second hot reload experience,

00:21:54.090 --> 00:21:57.420
but the state of my
app remained live.

00:21:57.420 --> 00:21:59.389
So it's a stateful hot reload.

00:21:59.389 --> 00:22:00.930
This is really
powerful when you want

00:22:00.930 --> 00:22:02.710
to work in that
one esoteric screen

00:22:02.710 --> 00:22:05.031
seven levels down in
your app after you log in

00:22:05.031 --> 00:22:06.780
and add two items to
your cart, et cetera.

00:22:06.780 --> 00:22:08.696
And you're all the way
down here in your app--

00:22:08.696 --> 00:22:10.230
now you can paint
your app to life.

00:22:10.230 --> 00:22:12.330
You don't have to restart
that flow every time

00:22:12.330 --> 00:22:13.650
you want to make these changes.

00:22:13.650 --> 00:22:15.439
Stateful hot reload.

00:22:15.439 --> 00:22:16.980
Now the next thing
I want to show you

00:22:16.980 --> 00:22:18.840
is, right now we're
just adding numbers

00:22:18.840 --> 00:22:20.370
here when I tap the button.

00:22:20.370 --> 00:22:21.420
But let's make it real.

00:22:21.420 --> 00:22:23.670
Let's make it connect to
Firebase and those cool Cloud

00:22:23.670 --> 00:22:26.520
Functions that David
showed us earlier.

00:22:26.520 --> 00:22:30.915
So Flutter has an
awesome package manager,

00:22:30.915 --> 00:22:32.790
where you can just
declare your dependencies,

00:22:32.790 --> 00:22:34.950
get your plug-ins, get
your third-party libraries.

00:22:34.950 --> 00:22:38.220
And, of course, Firebase
through the Flutter Fire package

00:22:38.220 --> 00:22:40.390
is a first-class citizen
here in this ecosystem.

00:22:40.390 --> 00:22:43.450
So it's very easy to
declare this dependency.

00:22:43.450 --> 00:22:46.080
Now let's go over to the code
that handles this button press.

00:22:46.080 --> 00:22:49.170
And instead of just
incrementing a counter,

00:22:49.170 --> 00:22:51.474
we're going to
enter the lottery.

00:22:51.474 --> 00:22:53.640
Now let's look at the code
for entering the lottery.

00:22:53.640 --> 00:22:55.265
There's two things
I want to point out.

00:22:55.265 --> 00:22:57.510
One is these calls to set state.

00:22:57.510 --> 00:23:01.710
This is a framework feature of
Flutter, where you can easily

00:23:01.710 --> 00:23:04.240
identify where the state of
your application is changed.

00:23:04.240 --> 00:23:06.531
It makes it very easy to look
around your code and say,

00:23:06.531 --> 00:23:09.270
this is where we update the
state or your domain model.

00:23:09.270 --> 00:23:12.751
Second, it tells Flutter
Framework, rebuild your UI.

00:23:12.751 --> 00:23:15.000
So this is that reactive
part of the Flutter framework

00:23:15.000 --> 00:23:16.720
that we're talking about.

00:23:16.720 --> 00:23:19.620
The second thing I want to show
is post-action, a very cool

00:23:19.620 --> 00:23:21.480
function that Dave
and his team wrote

00:23:21.480 --> 00:23:24.372
to encapsulate that async
request-response pattern

00:23:24.372 --> 00:23:25.830
that we saw earlier,
which triggers

00:23:25.830 --> 00:23:27.190
Cloud Functions, et cetera.

00:23:27.190 --> 00:23:30.456
Let's just jump in
here real quick.

00:23:30.456 --> 00:23:31.830
I just want to
show here a couple

00:23:31.830 --> 00:23:33.960
of lines of Firebase code.

00:23:33.960 --> 00:23:35.680
This is normal Firebase code.

00:23:35.680 --> 00:23:38.060
If you're used to
Firebase, these APIs

00:23:38.060 --> 00:23:39.970
are going to feel very familiar.

00:23:39.970 --> 00:23:43.530
It's all brought up into
Flutter for you to access.

00:23:43.530 --> 00:23:44.460
All right.

00:23:44.460 --> 00:23:47.250
So we've made a significant
change to our application here.

00:23:47.250 --> 00:23:49.950
We've added a huge swath
of business logic and code

00:23:49.950 --> 00:23:51.220
to our app.

00:23:51.220 --> 00:23:53.850
Now let's do a final hot reload.

00:23:53.850 --> 00:23:56.190
In about one second,
again, our app is updated.

00:23:56.190 --> 00:23:59.060
And when I tap this button,
we're now really talking

00:23:59.060 --> 00:24:01.860
to real-time database, which
really listens for Cloud

00:24:01.860 --> 00:24:04.890
Functions and really
waits for a response--

00:24:04.890 --> 00:24:07.350
all hot-reloaded
and live for you.

00:24:07.350 --> 00:24:09.840
Come on-- I was-- yes, OK.

00:24:09.840 --> 00:24:11.310
OK, good.

00:24:11.310 --> 00:24:14.020
So there's obviously a
lot more cool features

00:24:14.020 --> 00:24:15.180
to Flutter and Firebase.

00:24:15.180 --> 00:24:17.890
But, hopefully, you've got
a sense of how fast, fun,

00:24:17.890 --> 00:24:19.620
and easy it is to
build beautiful UIs

00:24:19.620 --> 00:24:21.840
and connect it to Firebase.

00:24:21.840 --> 00:24:24.770
So the question is-- if we
can go back to the slides--

00:24:24.770 --> 00:24:27.450
is how did this actually
work for David and his team?

00:24:31.819 --> 00:24:34.110
DAVID DEREMER: So Flutter
was really, really important.

00:24:34.110 --> 00:24:35.540
Again, we had a
really tight timeline.

00:24:35.540 --> 00:24:37.430
And we had a client with
really high demands,

00:24:37.430 --> 00:24:39.430
both in terms of the
features and the experience

00:24:39.430 --> 00:24:40.910
we had to deliver.

00:24:40.910 --> 00:24:44.240
And we wanted to deliver this
beautiful, branded experience

00:24:44.240 --> 00:24:46.130
across both platforms--

00:24:46.130 --> 00:24:47.361
iOS and Android.

00:24:47.361 --> 00:24:48.860
And we didn't have
time to make sure

00:24:48.860 --> 00:24:51.109
that every little pixel was
perfect on both platforms.

00:24:51.109 --> 00:24:53.610
So Flutter really
helped us there--

00:24:53.610 --> 00:24:56.240
coding once, seeing the designs,
live on both-- but yet still

00:24:56.240 --> 00:24:58.604
feeling very natural
and feeling very native.

00:24:58.604 --> 00:25:00.770
The other thing is that it
allowed us to move really

00:25:00.770 --> 00:25:02.570
fast and experiment.

00:25:02.570 --> 00:25:04.930
Our designers were
constantly tweaking things.

00:25:04.930 --> 00:25:07.457
The client always had new input,
or once they'd get a build,

00:25:07.457 --> 00:25:08.790
they'd want to change something.

00:25:08.790 --> 00:25:11.690
So the ability to move
fast and use tools like hot

00:25:11.690 --> 00:25:14.810
reload to modify that
design in real time saved us

00:25:14.810 --> 00:25:18.050
a ton of time.

00:25:18.050 --> 00:25:22.220
Also, in the long run, Flutter
provides an amazing ability

00:25:22.220 --> 00:25:25.042
to reduce our maintenance costs
and, also, decrease the cost

00:25:25.042 --> 00:25:26.000
of adding new features.

00:25:26.000 --> 00:25:27.916
Because every single
time we need to fix a bug

00:25:27.916 --> 00:25:29.900
or change a design
or add a new feature,

00:25:29.900 --> 00:25:31.790
we just have to do it one place.

00:25:31.790 --> 00:25:34.850
And our developers say that
laying out UI with Flutter

00:25:34.850 --> 00:25:38.540
is significantly faster
than on iOS or Android.

00:25:38.540 --> 00:25:39.950
And the hot reload, you know--

00:25:39.950 --> 00:25:42.680
if you are all mobile developers
here, or if any of you are--

00:25:42.680 --> 00:25:45.839
waiting for your application
to recompile and navigate down

00:25:45.839 --> 00:25:46.880
to where you need to go--

00:25:46.880 --> 00:25:48.834
I mean, this is real
money, this is real time.

00:25:48.834 --> 00:25:51.000
Our clients are paying for
us to develop these apps.

00:25:51.000 --> 00:25:54.170
So every second our developers
are not waiting for X-code

00:25:54.170 --> 00:25:56.660
to reload the application,
that's more time

00:25:56.660 --> 00:25:58.902
we're working on features.

00:25:58.902 --> 00:26:01.360
And also, because of things
like Flutter Fire and Flutter's

00:26:01.360 --> 00:26:04.280
plug-in system, and
using tools like Firebase

00:26:04.280 --> 00:26:07.610
and all of the great resources
we have at our disposal,

00:26:07.610 --> 00:26:09.736
we spent less time
building plumbing

00:26:09.736 --> 00:26:12.110
in the technical overhead in
order to make this app work,

00:26:12.110 --> 00:26:15.240
and more time
working on features.

00:26:15.240 --> 00:26:17.120
So I'm wondering,
you know, has anyone

00:26:17.120 --> 00:26:18.950
here faced an incredibly
tough deadline

00:26:18.950 --> 00:26:21.350
in the work that you do?

00:26:21.350 --> 00:26:24.020
Have you ever felt
pressure from your bosses

00:26:24.020 --> 00:26:28.100
or your senior leaders to
ship more features faster?

00:26:28.100 --> 00:26:31.040
Have you ever had a design team
that wants you to react faster,

00:26:31.040 --> 00:26:32.240
iterate a design quicker--

00:26:32.240 --> 00:26:35.450
I have a new design, can I see
what it looks like on screen?

00:26:35.450 --> 00:26:37.700
Or perhaps you have
stakeholders in your business

00:26:37.700 --> 00:26:40.850
that don't want to hear it
about your cool infrastructure

00:26:40.850 --> 00:26:42.470
solution, or about
the code you've

00:26:42.470 --> 00:26:44.825
written to optimize this,
that, or the other thing--

00:26:44.825 --> 00:26:46.700
they just want to see
new features, you know.

00:26:46.700 --> 00:26:47.780
What have you done
for me lately?

00:26:47.780 --> 00:26:49.821
What kind of value are
you adding to our business

00:26:49.821 --> 00:26:52.220
and to our application?

00:26:52.220 --> 00:26:56.870
So Flutter and Firebase, for
us, was a tremendous toolkit

00:26:56.870 --> 00:26:59.420
to deliver on those
needs-- you know,

00:26:59.420 --> 00:27:03.650
tough time line, branded
design, beautiful experience,

00:27:03.650 --> 00:27:06.980
complicated features,
protected operations

00:27:06.980 --> 00:27:08.600
and logic in the back end.

00:27:08.600 --> 00:27:10.751
And it's really
easy to get started.

00:27:10.751 --> 00:27:11.750
SETH LADD: That's right.

00:27:11.750 --> 00:27:14.600
It's less than a minute to
create a Firebase project.

00:27:14.600 --> 00:27:16.380
And Flutter is open source.

00:27:16.380 --> 00:27:17.870
You just get Clone or Repo.

00:27:17.870 --> 00:27:19.370
And we even include a command--

00:27:19.370 --> 00:27:23.120
Flutter create-- to
bootstrap your first project.

00:27:23.120 --> 00:27:25.370
We encourage you to
visit our office hours up

00:27:25.370 --> 00:27:26.750
on the third floor.

00:27:26.750 --> 00:27:29.420
And we have instructor-led
trainings for both Firebase

00:27:29.420 --> 00:27:32.752
and Flutter today and tomorrow.

00:27:32.752 --> 00:27:35.210
DAVID DEREMER: And we hope that
our talk today inspires you

00:27:35.210 --> 00:27:35.930
all--

00:27:35.930 --> 00:27:38.450
that these aren't just
cool technologies.

00:27:38.450 --> 00:27:41.630
Real businesses at real scale
are using these out there

00:27:41.630 --> 00:27:44.390
today to run production code.

00:27:44.390 --> 00:27:45.890
So we hope that you
can embrace some

00:27:45.890 --> 00:27:47.306
of the learning
you had here today

00:27:47.306 --> 00:27:49.697
and go out and try
something amazing.

00:27:49.697 --> 00:27:50.530
Thank you very much.

00:27:50.530 --> 00:27:51.080
SETH LADD: Thank you so much.

00:27:51.080 --> 00:27:51.980
[APPLAUSE]

00:27:51.980 --> 00:27:55.330
[MUSIC PLAYING]

