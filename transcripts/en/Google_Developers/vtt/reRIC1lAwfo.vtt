WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.280
CHASE HANSEL: Hi.

00:00:04.280 --> 00:00:05.150
I'm Chase.

00:00:05.150 --> 00:00:08.070
I'm a product manager
for Google News

00:00:08.070 --> 00:00:09.790
and Google One Pass.

00:00:09.790 --> 00:00:13.800
Today I will be describing One
Pass, and then Omi , the tech

00:00:13.800 --> 00:00:16.210
lead for One Pass, will be
explaining how to implement

00:00:16.210 --> 00:00:17.460
the product.

00:00:19.950 --> 00:00:22.210
What is One Pass?

00:00:22.210 --> 00:00:25.240
One Pass is an easy
to use, API for

00:00:25.240 --> 00:00:28.050
authentication and payments.

00:00:28.050 --> 00:00:30.360
It's a complement to Google
check out for provisioning

00:00:30.360 --> 00:00:32.910
access to content from
Google accounts.

00:00:32.910 --> 00:00:36.330
And it's an authentication
platform for user rights.

00:00:36.330 --> 00:00:38.360
Here's an example of a website
using One Pass.

00:00:38.360 --> 00:00:41.625
And the basic scheme is that
you can go to a website.

00:00:41.625 --> 00:00:46.030
We can check if someone has
access to a piece of content.

00:00:46.030 --> 00:00:48.980
User doesn't have access, so
they see an option to pay.

00:00:48.980 --> 00:00:51.130
They then go and pay
using check out.

00:00:51.130 --> 00:00:54.250
And afterwards, that Google
account has access to the

00:00:54.250 --> 00:00:58.101
content, and so they see
the full version.

00:00:58.101 --> 00:01:03.890
We'll give a couple examples
of One Pass in the wild.

00:01:03.890 --> 00:01:11.800
So this is a German website,
Tomorrow Focus, which is the

00:01:11.800 --> 00:01:12.730
example I just showed.

00:01:12.730 --> 00:01:15.960
But here's my basic scheme,
where I showed up, I don't

00:01:15.960 --> 00:01:17.210
have access to content.

00:01:19.300 --> 00:01:21.750
Note the Google page is in
English, because my browser

00:01:21.750 --> 00:01:23.930
setting is for English, so this
is the default translated

00:01:23.930 --> 00:01:26.100
for all the markets
that we're in.

00:01:26.100 --> 00:01:27.970
I'm just going to sign in using
my personal account.

00:01:33.570 --> 00:01:38.730
I have bought this content about
18 times at this point.

00:01:38.730 --> 00:01:39.980
Wrong password.

00:01:47.040 --> 00:01:47.560
OK.

00:01:47.560 --> 00:01:49.840
So we just did a check saying
that I didn't have access to

00:01:49.840 --> 00:01:51.550
the content, and now it's
asking me to purchase

00:01:51.550 --> 00:01:54.826
this for EUR 0.10.

00:01:54.826 --> 00:01:57.370
So I purchase the content.

00:01:57.370 --> 00:01:58.590
And now I'm back on the page.

00:01:58.590 --> 00:01:59.890
And I have access.

00:01:59.890 --> 00:02:03.640
So if I then refresh this page,
came back, it wouldn't

00:02:03.640 --> 00:02:07.920
prompt me for check out,
I just have access.

00:02:07.920 --> 00:02:10.789
So here's another example,
a US website

00:02:10.789 --> 00:02:11.750
called Courier News.

00:02:11.750 --> 00:02:14.230
It's a small publication
in Missouri.

00:02:14.230 --> 00:02:16.080
So this is actually implementing
something called

00:02:16.080 --> 00:02:17.300
metered access.

00:02:17.300 --> 00:02:20.250
So as you're going to see,
I'll be able to get a few

00:02:20.250 --> 00:02:21.950
articles before I'm
prompted to pay.

00:02:21.950 --> 00:02:25.580
So there's one for free.

00:02:25.580 --> 00:02:27.870
Someone's obituary.

00:02:27.870 --> 00:02:29.120
Two for free.

00:02:33.140 --> 00:02:33.920
Three.

00:02:33.920 --> 00:02:35.120
And here's the prompt.

00:02:35.120 --> 00:02:38.620
So this prompt is asking
if you want to sign up.

00:02:38.620 --> 00:02:40.100
In this case, I do.

00:02:40.100 --> 00:02:45.660
So this is asking you if you
already own a print edition.

00:02:45.660 --> 00:02:47.020
So I'll show you the
different options.

00:02:47.020 --> 00:02:49.420
I said yes, and now it's giving
me an option to have a

00:02:49.420 --> 00:02:51.190
discounted price.

00:02:51.190 --> 00:02:53.290
If I said no, it'll
give me those.

00:02:53.290 --> 00:02:56.060
So here I'm actually going to
buy the print one, just so I

00:02:56.060 --> 00:02:57.340
don't charge myself more.

00:02:57.340 --> 00:02:59.900
Because it's going to
my personal account.

00:03:06.760 --> 00:03:09.480
And here we are.

00:03:09.480 --> 00:03:13.340
So now I just purchased access,
and now I have access

00:03:13.340 --> 00:03:15.070
to all the content.

00:03:15.070 --> 00:03:19.664
And I won't ever be hassled
again unless I have to log in.

00:03:22.450 --> 00:03:23.700
OK.

00:03:28.320 --> 00:03:29.380
So what can One Pass be used?

00:03:29.380 --> 00:03:31.180
It's a web API for content.

00:03:31.180 --> 00:03:34.080
So that means it can be used on
the phone, can be used on

00:03:34.080 --> 00:03:36.270
mobile web, can be
used in app.

00:03:36.270 --> 00:03:39.230
It can be used for newspapers.

00:03:39.230 --> 00:03:41.440
It could be used for
magazine content.

00:03:41.440 --> 00:03:44.210
We have one customer who's
thinking about you doing TV

00:03:44.210 --> 00:03:47.200
streams. It's really
kind of up to you.

00:03:47.200 --> 00:03:49.160
This is a web API, and it's
designed to be flexible.

00:03:52.530 --> 00:03:54.030
The business model that
One Pass supports.

00:03:54.030 --> 00:03:57.730
So One Pass is designed to be
super easy and flexible,

00:03:57.730 --> 00:03:59.440
handling a wide variety
of different cases.

00:03:59.440 --> 00:04:02.060
It supports subscriptions,
as you just saw.

00:04:02.060 --> 00:04:05.810
It supports paper article,
rentals for a period of time,

00:04:05.810 --> 00:04:06.830
things like free trial.

00:04:06.830 --> 00:04:10.190
So you can do a month free
trial, and then you got access

00:04:10.190 --> 00:04:13.210
to recurred billing
for subscription.

00:04:13.210 --> 00:04:14.910
Metered access as you saw.

00:04:14.910 --> 00:04:17.160
Access for non digital
subscribers.

00:04:17.160 --> 00:04:20.250
So that was one example that
you just saw with Courier

00:04:20.250 --> 00:04:22.260
News, where they actually
integrated their print

00:04:22.260 --> 00:04:24.220
subscribers.

00:04:24.220 --> 00:04:26.070
There are other ways to do that
as well, but we support

00:04:26.070 --> 00:04:27.020
it pretty readily.

00:04:27.020 --> 00:04:28.890
And finally, discount coupons.

00:04:28.890 --> 00:04:31.690
So in case, you have a phone
version, and you want to get a

00:04:31.690 --> 00:04:34.900
tablet version of a magazine,
we offer that kind of

00:04:34.900 --> 00:04:36.870
functionality.

00:04:36.870 --> 00:04:39.600
So the cool thing about this
is that you actually set up

00:04:39.600 --> 00:04:41.300
the technology, and then
the business model

00:04:41.300 --> 00:04:42.110
is agnostic to that.

00:04:42.110 --> 00:04:45.100
So all the business model
for configuration is

00:04:45.100 --> 00:04:46.810
done using a UI.

00:04:46.810 --> 00:04:50.210
This is a UI that's coming
out, I think, this week.

00:04:50.210 --> 00:04:52.830
And basically, this allows
you to set up things like

00:04:52.830 --> 00:04:57.280
subscriptions, paper article,
you name it, in 30 seconds.

00:04:57.280 --> 00:05:00.090
You basically save the part of
your website or your [? L ?]

00:05:00.090 --> 00:05:02.510
structure that you want to block
off for content, and

00:05:02.510 --> 00:05:06.090
then configure a business
logic, and you're done.

00:05:06.090 --> 00:05:08.030
And the changes are
made instantly.

00:05:08.030 --> 00:05:09.530
So one of the cool things about
this is it allows you to

00:05:09.530 --> 00:05:11.030
do dynamic pricing per day.

00:05:11.030 --> 00:05:14.460
So say you could charge
something at $5 the first day,

00:05:14.460 --> 00:05:16.140
and the next day, go in and
change it, and it's $3.

00:05:16.140 --> 00:05:17.330
You name it.

00:05:17.330 --> 00:05:20.220
It's designed to be flexible.

00:05:20.220 --> 00:05:24.930
So One Pass is a payment
is designed to enable

00:05:24.930 --> 00:05:26.670
transactions on third
party websites.

00:05:26.670 --> 00:05:28.160
What that means is that
the publisher is

00:05:28.160 --> 00:05:29.450
the merchant of record.

00:05:29.450 --> 00:05:32.130
So we're not a marketplace.

00:05:32.130 --> 00:05:36.180
We provide the publisher with
all the user data required to

00:05:36.180 --> 00:05:39.400
complete a transaction for
fulfilment and marketing, if

00:05:39.400 --> 00:05:41.480
the user chooses to continue a

00:05:41.480 --> 00:05:43.770
relationship with the publisher.

00:05:43.770 --> 00:05:45.810
So you would want to contrast
that with something like

00:05:45.810 --> 00:05:48.690
Android Market or
the Apple Store.

00:05:48.690 --> 00:05:51.290
This is the publisher
hosting content.

00:05:51.290 --> 00:05:52.520
This is the publisher.

00:05:52.520 --> 00:05:54.480
And this is not a
market place.

00:05:54.480 --> 00:05:57.680
It's just enabling
transaction.

00:05:57.680 --> 00:05:59.330
So what are our requirements?

00:05:59.330 --> 00:06:01.220
Has to be easy.

00:06:01.220 --> 00:06:02.750
We have to support all
common browsers,

00:06:02.750 --> 00:06:05.030
desktop, mobile, in-app.

00:06:05.030 --> 00:06:07.300
Minimal upright configuration
and set up.

00:06:07.300 --> 00:06:08.540
Minimal back end requirements.

00:06:08.540 --> 00:06:09.270
Ideally none.

00:06:09.270 --> 00:06:10.260
There's no database.

00:06:10.260 --> 00:06:13.100
There's no user depository.

00:06:13.100 --> 00:06:15.550
Our goal was to have nothing
on the back end.

00:06:15.550 --> 00:06:18.290
We ended up with one server
side call, as Omi will

00:06:18.290 --> 00:06:20.360
describe, it's for
security reasons.

00:06:20.360 --> 00:06:22.930
This is an extremely secure
system, and it's surprisingly

00:06:22.930 --> 00:06:25.640
simple, given how
secure it is.

00:06:25.640 --> 00:06:28.110
All or most integration should
be on the client.

00:06:28.110 --> 00:06:30.060
We're talking about drop-in
Java script, and

00:06:30.060 --> 00:06:33.200
one server side call.

00:06:33.200 --> 00:06:35.090
With that, I'm going to
introduce Omi, the tech lead

00:06:35.090 --> 00:06:36.420
on the project, and he'll
explain how to

00:06:36.420 --> 00:06:39.300
implement One Pass.

00:06:39.300 --> 00:06:40.550
OMI CHANDIRAMANI:
Thanks, Chase.

00:06:44.800 --> 00:06:47.035
So I'm going to talk about what
it takes to integrate

00:06:47.035 --> 00:06:48.740
with One Pass.

00:06:48.740 --> 00:06:51.080
And we're certainly going to
look at some code and so on.

00:06:51.080 --> 00:06:54.570
But before we dive into that,
I'm going to take a high level

00:06:54.570 --> 00:06:58.360
look at what the user flows
are that you would need to

00:06:58.360 --> 00:07:00.660
implement in order to integrate
with One Pass.

00:07:00.660 --> 00:07:04.060
And this kind of breaks down
the demo that Chase showed

00:07:04.060 --> 00:07:07.900
you, where you first access
the site, you don't have

00:07:07.900 --> 00:07:11.020
access to the content, you go
through the flow of paying for

00:07:11.020 --> 00:07:14.910
the content, and then finally,
there's a flow where you have

00:07:14.910 --> 00:07:15.940
access to the content.

00:07:15.940 --> 00:07:17.150
And we're going to break
that down and see

00:07:17.150 --> 00:07:18.750
how all of that works.

00:07:18.750 --> 00:07:21.030
You're going to see a lot of
boxes and nanos, but later on

00:07:21.030 --> 00:07:23.900
you'll see that how a lot of
this boils down to just a few

00:07:23.900 --> 00:07:25.000
lines of code on your part.

00:07:25.000 --> 00:07:28.100
So don't be intimidated by
the number of steps.

00:07:28.100 --> 00:07:31.880
The power of the system is that
we've abstracted a lot of

00:07:31.880 --> 00:07:36.840
these steps behind a very
simple and clean API.

00:07:36.840 --> 00:07:40.960
So the first flow we're going
to start with is the

00:07:40.960 --> 00:07:44.890
interaction between the user,
your site, and One Pass, when

00:07:44.890 --> 00:07:49.770
the user hasn't bought access
to the content yet.

00:07:49.770 --> 00:07:55.460
So it starts with the user
accessing the content.

00:07:55.460 --> 00:07:57.880
The first thing that happens
is that your site will

00:07:57.880 --> 00:08:02.610
redirect the user to a One
Pass URL, are which is

00:08:02.610 --> 00:08:05.530
checking to see if the
user has access to

00:08:05.530 --> 00:08:06.780
the content or not.

00:08:09.520 --> 00:08:13.210
At that point, if the user's
not logged in, they're

00:08:13.210 --> 00:08:17.710
presented with a standard Google
log in page, where they

00:08:17.710 --> 00:08:20.520
can enter their Google
credentials.

00:08:20.520 --> 00:08:23.840
After they've logged in at that
point, One Pass knows who

00:08:23.840 --> 00:08:26.590
the user is, and what they're
trying to access.

00:08:26.590 --> 00:08:28.360
So now it has all the data
that it needs to

00:08:28.360 --> 00:08:30.400
figure stuff out.

00:08:30.400 --> 00:08:34.200
And what it does is it checks to
see that user has purchased

00:08:34.200 --> 00:08:38.710
an offer which would give them
access to that content.

00:08:38.710 --> 00:08:41.140
So in this scenario, we're
going to say that no

00:08:41.140 --> 00:08:43.620
purchase was found.

00:08:43.620 --> 00:08:48.180
What One Pass then does is
redirect the user back to the

00:08:48.180 --> 00:08:51.090
original content that there
was looking at.

00:08:51.090 --> 00:08:55.480
Except this time, we pass an
additional URL parameter.

00:08:55.480 --> 00:08:57.280
You're going to see this
in a lot of the code.

00:08:57.280 --> 00:09:00.540
It's just a simple access
check response.

00:09:00.540 --> 00:09:03.530
Values are yes or no.

00:09:03.530 --> 00:09:05.760
In this case the user doesn't
have access, so

00:09:05.760 --> 00:09:07.980
the value is no.

00:09:07.980 --> 00:09:12.960
And in entering that page now,
the publisher site can see

00:09:12.960 --> 00:09:18.940
that URL parameter in the URL,
can deduce, that OK, the user

00:09:18.940 --> 00:09:21.090
doesn't have access
to this content.

00:09:21.090 --> 00:09:22.560
And now the publisher
knows what to do.

00:09:22.560 --> 00:09:27.340
It needs to present the user
with a way to buy the content.

00:09:27.340 --> 00:09:32.560
So some kind of a UI, which
presents the price.

00:09:32.560 --> 00:09:35.540
Maybe there are different
options, you can buy monthly

00:09:35.540 --> 00:09:37.700
or a single article purchase.

00:09:37.700 --> 00:09:42.940
So UI to present to the user,
so that they can start the

00:09:42.940 --> 00:09:45.630
purchase flow.

00:09:45.630 --> 00:09:50.390
So let's take a look at what the
purchase flow looks like.

00:09:50.390 --> 00:09:51.925
This still starts at where
we left off before.

00:09:51.925 --> 00:09:55.740
The user is now looking at these
various offers that they

00:09:55.740 --> 00:10:01.030
can choose from to buy access
to this content.

00:10:01.030 --> 00:10:06.280
They pick one, and then the
publisher website will

00:10:06.280 --> 00:10:10.560
redirect the user to a One Pass
Checkout page, passing

00:10:10.560 --> 00:10:15.150
the ID of the offer that the
user chose, so that we know

00:10:15.150 --> 00:10:16.400
what to charge the user for.

00:10:19.490 --> 00:10:21.640
One Pass then takes care
of a lot of stuff.

00:10:21.640 --> 00:10:24.320
You'll see that this redirect
is a single line code.

00:10:24.320 --> 00:10:26.580
And a lot of things happen.

00:10:26.580 --> 00:10:31.100
If the user hasn't used Google
Checkout before, they're put

00:10:31.100 --> 00:10:34.020
through the sign up wizard for
setting up a Checkout account.

00:10:34.020 --> 00:10:35.490
They can add credit cards.

00:10:35.490 --> 00:10:38.340
If they're existing Checkout
users, they can manage their

00:10:38.340 --> 00:10:39.340
credit cards and so on.

00:10:39.340 --> 00:10:44.020
It's a very rich UI into
Google Checkout.

00:10:44.020 --> 00:10:47.510
But at the same time, if this
is a logged in user with an

00:10:47.510 --> 00:10:50.040
existing Checkout account,
credit card's already in

00:10:50.040 --> 00:10:53.620
there, like you saw in Chase's
example, all you get is this

00:10:53.620 --> 00:10:55.150
one page and the buy button.

00:10:55.150 --> 00:10:57.740
And as soon as the user
clicks on buy, the

00:10:57.740 --> 00:11:00.200
transaction is processed.

00:11:00.200 --> 00:11:01.610
And it's pretty straight--

00:11:01.610 --> 00:11:05.870
It's a one screen, click on
one button, you're done.

00:11:05.870 --> 00:11:10.370
So once you click on that buy
button, completed transaction,

00:11:10.370 --> 00:11:15.380
the user gets to redirected back
to the original article

00:11:15.380 --> 00:11:17.530
that they were looking at.

00:11:17.530 --> 00:11:20.240
Again, there's that access check
parameter that I was

00:11:20.240 --> 00:11:21.680
talking about earlier.

00:11:21.680 --> 00:11:23.680
It's added to the
URL this time.

00:11:23.680 --> 00:11:26.460
Response equals yes.

00:11:26.460 --> 00:11:28.030
But that's not good enough.

00:11:28.030 --> 00:11:34.620
We add an access token to that
URL, which the publisher can

00:11:34.620 --> 00:11:38.080
use to confirm that the user
does indeed does have access.

00:11:38.080 --> 00:11:40.545
And I'll get into that into a
little detail in a moment.

00:11:43.600 --> 00:11:47.313
But basically, once the
publisher has--

00:11:50.520 --> 00:11:53.030
I'm sorry, I'm getting
ahead of myself here.

00:11:53.030 --> 00:11:57.580
So with this access token and
the response parameter in the

00:11:57.580 --> 00:11:59.880
URL, the user once again
tries to access

00:11:59.880 --> 00:12:02.350
that purchased content.

00:12:02.350 --> 00:12:05.370
Which takes us into the next
flow, which is where the

00:12:05.370 --> 00:12:07.810
user's now paid for the
content, and is now

00:12:07.810 --> 00:12:09.520
trying to access it.

00:12:09.520 --> 00:12:12.750
So this looks very much
like the first flow,

00:12:12.750 --> 00:12:14.080
user accessing content.

00:12:14.080 --> 00:12:18.710
They get redirected back to One
Pass for an access check.

00:12:18.710 --> 00:12:22.370
This time, when we check for a
purchase, One Pass finds one.

00:12:25.360 --> 00:12:28.240
The user's redirected back
with the response URL

00:12:28.240 --> 00:12:31.430
parameter and the
access token.

00:12:31.430 --> 00:12:35.760
This is where the publisher
calls a simple API on the One

00:12:35.760 --> 00:12:38.410
Pass side to validate
that token.

00:12:38.410 --> 00:12:41.320
If that token is valid, you can
be assured that the user

00:12:41.320 --> 00:12:44.850
does indeed have access to
this protected content.

00:12:44.850 --> 00:12:47.590
And the publisher can send that
content to the browser

00:12:47.590 --> 00:12:50.470
for the user to look at.

00:12:50.470 --> 00:12:53.490
So let's talk briefly about
this access token.

00:12:53.490 --> 00:12:57.150
It's kind of the cornerstone
of what makes One Pass a

00:12:57.150 --> 00:12:58.280
secure solution.

00:12:58.280 --> 00:12:59.710
So what is it?

00:12:59.710 --> 00:13:00.480
It's a piece of data.

00:13:00.480 --> 00:13:01.470
And it looks like a string.

00:13:01.470 --> 00:13:03.030
Garbled string.

00:13:03.030 --> 00:13:05.655
Numbers, letters, uppercase,
lower case, all that

00:13:05.655 --> 00:13:07.440
stuff, in the URL.

00:13:07.440 --> 00:13:12.590
And what it is is it
encapsulates the user, and the

00:13:12.590 --> 00:13:15.800
offer that they bought
in this context.

00:13:15.800 --> 00:13:18.910
And now, given those two bits
of information, once you try

00:13:18.910 --> 00:13:22.270
and validate that token and
pass it back to One Pass,

00:13:22.270 --> 00:13:25.280
given the user and the offer
that they bought, and the

00:13:25.280 --> 00:13:29.280
article that they're trying to
access, it's a quick check to

00:13:29.280 --> 00:13:32.550
see that the user does have
access to the content.

00:13:32.550 --> 00:13:36.390
And once again, we respond back
to the publisher, saying,

00:13:36.390 --> 00:13:37.400
just say yes or no.

00:13:37.400 --> 00:13:39.910
If it's valid, we send yes.

00:13:39.910 --> 00:13:43.900
And the publisher can rest easy
that they're not giving

00:13:43.900 --> 00:13:46.070
access to content that
shouldn't be given.

00:13:48.990 --> 00:13:51.830
The tokens are signed
and encrypted.

00:13:51.830 --> 00:13:53.440
They can't be manufactured.

00:13:53.440 --> 00:13:58.430
Nobody can make one or make
sense of one, except a One

00:13:58.430 --> 00:14:00.640
Pass server.

00:14:00.640 --> 00:14:01.890
Bulletproof.

00:14:04.040 --> 00:14:06.700
So what does it take to
integrate with One Pass?

00:14:06.700 --> 00:14:10.530
Let's get into some
of the code.

00:14:10.530 --> 00:14:13.510
It's just a few simple steps.

00:14:13.510 --> 00:14:16.040
The first thing you do is you
set up offers, using that

00:14:16.040 --> 00:14:19.010
offer UI that we're releasing
this week in

00:14:19.010 --> 00:14:21.200
the \publishers center.

00:14:21.200 --> 00:14:24.040
You add access checking
code to your content.

00:14:24.040 --> 00:14:28.430
And then code to respond to
where the access is denied, in

00:14:28.430 --> 00:14:32.440
which case you show offers to
the user, and code to respond

00:14:32.440 --> 00:14:33.570
to if access is granted.

00:14:33.570 --> 00:14:39.460
You validate that the access is
indeed valid, and send that

00:14:39.460 --> 00:14:41.800
content back to the user.

00:14:41.800 --> 00:14:44.010
Pretty straightforward.

00:14:44.010 --> 00:14:46.330
So let's start with a
piece of content.

00:14:46.330 --> 00:14:47.580
Finally, some code.

00:14:51.330 --> 00:14:54.170
Very simple, HTML file that
you may be hosting on your

00:14:54.170 --> 00:14:58.830
site that now you've decided
you want to charge for.

00:14:58.830 --> 00:15:01.300
You don't want it to
be free anymore.

00:15:01.300 --> 00:15:02.540
So with [UNINTELLIGIBLE]

00:15:02.540 --> 00:15:06.940
a simple example, I'm going to
be using JavaScript and jQuery

00:15:06.940 --> 00:15:10.280
in these slides, just because
it's compact.

00:15:10.280 --> 00:15:13.700
And a lot of people are familiar
with jQuery, but you

00:15:13.700 --> 00:15:18.010
see that nothing I'm really
doing is complicated.

00:15:18.010 --> 00:15:20.870
It can be done in your favorite
JavaScript library.

00:15:20.870 --> 00:15:24.240
Or really, if you want do the
whole thing on the server

00:15:24.240 --> 00:15:26.010
side, no magic going on here.

00:15:26.010 --> 00:15:27.120
Very simple stuff.

00:15:27.120 --> 00:15:32.060
Everything that's complicated,
we've hidden behind our APIs.

00:15:32.060 --> 00:15:35.140
So let's get started.

00:15:35.140 --> 00:15:38.030
First thing to do, let's remove
the content that you

00:15:38.030 --> 00:15:40.920
want to now start
charging for.

00:15:40.920 --> 00:15:44.530
And maybe you replace that with
a snippet of the original

00:15:44.530 --> 00:15:49.050
article, something to convince
the user that they really want

00:15:49.050 --> 00:15:52.100
to buy this.

00:15:52.100 --> 00:15:55.920
So while we're here, I've also
started building this form.

00:15:55.920 --> 00:16:02.870
This will be where we show the
user what offers they can buy.

00:16:02.870 --> 00:16:05.230
There's a million ways
of doing this.

00:16:05.230 --> 00:16:07.150
I'm just doing a very simple
form, just for

00:16:07.150 --> 00:16:09.460
simplicity's sake.

00:16:09.460 --> 00:16:12.700
You guys, I'm sure, will come
up with pretty clever ideas.

00:16:12.700 --> 00:16:17.990
But for simplicity, I'm going
to use just a simple form.

00:16:17.990 --> 00:16:19.830
The next thing we really
need to do is the

00:16:19.830 --> 00:16:22.860
access check itself.

00:16:22.860 --> 00:16:28.250
So you'll notice I'm escaping
the URL that the user is

00:16:28.250 --> 00:16:33.040
currently looking at, and you'll
see why in a moment.

00:16:33.040 --> 00:16:37.060
So remember in the flow where
the user was accessing content

00:16:37.060 --> 00:16:41.170
for the first time, and the
publisher website at that

00:16:41.170 --> 00:16:43.970
point doesn't know does user
have access or not.

00:16:43.970 --> 00:16:49.540
And does it redirect to One Pass
for the access checking?

00:16:49.540 --> 00:16:55.310
So if the URL doesn't have
that response parameter,

00:16:55.310 --> 00:16:58.610
basically an access check
hasn't happened yet.

00:16:58.610 --> 00:17:01.340
So we look for that parameter
in the URL.

00:17:01.340 --> 00:17:07.000
If it doesn't exist, we redirect
the user to the One

00:17:07.000 --> 00:17:10.530
Pass access check URL.

00:17:10.530 --> 00:17:15.010
We pass the escaped URL as a
parameter in this redirect.

00:17:17.730 --> 00:17:19.119
That parameter is
pretty important

00:17:19.119 --> 00:17:20.410
for a couple of things.

00:17:20.410 --> 00:17:23.859
Of course, this is how One
Pass knows what to check

00:17:23.859 --> 00:17:24.839
access for.

00:17:24.839 --> 00:17:26.930
You're trying to access
this URL.

00:17:26.930 --> 00:17:30.200
Is this an offer you've bought
that gives you access to it?

00:17:30.200 --> 00:17:31.400
That's straightforward.

00:17:31.400 --> 00:17:35.160
The second reason One Pass needs
this URL is that this is

00:17:35.160 --> 00:17:38.410
where the user will send the
user back to, after the access

00:17:38.410 --> 00:17:40.820
check is done.

00:17:40.820 --> 00:17:45.140
OK, so the next thing we add
here is handling the case

00:17:45.140 --> 00:17:51.880
where the response parameter
is in the URL, but the user

00:17:51.880 --> 00:17:55.420
doesn't have access to
this content yet.

00:17:55.420 --> 00:17:58.920
So the show offers method, what
it does is present the

00:17:58.920 --> 00:18:02.260
user with choices as to how
they can buy access.

00:18:02.260 --> 00:18:04.000
So let's a look at what
that show offers

00:18:04.000 --> 00:18:05.250
method might look like.

00:18:08.520 --> 00:18:13.270
So here we're basically making
an API call to the One Pass

00:18:13.270 --> 00:18:15.670
pricing API.

00:18:15.670 --> 00:18:19.280
It returns a list of offers,
any of which will give the

00:18:19.280 --> 00:18:21.460
user access to the content
that they're

00:18:21.460 --> 00:18:23.380
trying to look at.

00:18:23.380 --> 00:18:29.060
This create offers method gets
passed to JSON object, which

00:18:29.060 --> 00:18:31.820
includes metainformation about
all the offers that

00:18:31.820 --> 00:18:34.110
the users could buy.

00:18:34.110 --> 00:18:36.520
And then that method
is up to you.

00:18:36.520 --> 00:18:42.030
You present that JSON data in
whatever way you see fit.

00:18:42.030 --> 00:18:45.150
Again, you're in control
of this UI.

00:18:45.150 --> 00:18:47.340
So it's very easy for you
to make a very seamless

00:18:47.340 --> 00:18:51.820
experience for the user when
they're on your site.

00:18:51.820 --> 00:18:55.510
But by the time show offers is
done executing, we're in the

00:18:55.510 --> 00:18:59.100
state where the user's looking
at offers to choose from.

00:18:59.100 --> 00:19:02.950
Let take a closer look at that
JSON data that gets passed to

00:19:02.950 --> 00:19:04.020
the create offers call.

00:19:04.020 --> 00:19:05.270
Very straightforward.

00:19:07.840 --> 00:19:10.750
As we mentioned before, a
single URL could match

00:19:10.750 --> 00:19:12.560
multiple different offers.

00:19:12.560 --> 00:19:15.870
You can play with different
ideas, where you want to see

00:19:15.870 --> 00:19:19.180
if people will buy single
article access.

00:19:19.180 --> 00:19:22.610
Will they purchase a single
article at a time, or will

00:19:22.610 --> 00:19:24.290
they go for monthly
subscriptions?

00:19:24.290 --> 00:19:29.420
In this case we've said give the
user choices to do either.

00:19:29.420 --> 00:19:34.710
So in this case, the first junk
of JSON says, for $0.50

00:19:34.710 --> 00:19:38.260
you get access to the single
article forever.

00:19:38.260 --> 00:19:41.960
And the second one, is for $10
you get a monthly subscription

00:19:41.960 --> 00:19:44.390
maybe to the whole site,
or whatever the news

00:19:44.390 --> 00:19:47.330
section, all up to you.

00:19:47.330 --> 00:19:49.450
Again, this is a small,
minimalist data set.

00:19:49.450 --> 00:19:52.700
The point is that we don't
need to expose all the

00:19:52.700 --> 00:19:55.830
metainformation that defines
the offer here.

00:19:55.830 --> 00:19:58.240
We just need to send to the
browser just enough

00:19:58.240 --> 00:20:02.610
information so that you can bill
that UI to present offers

00:20:02.610 --> 00:20:03.860
to the user.

00:20:06.110 --> 00:20:08.790
It's also entirely possible, by
the way, you just have one

00:20:08.790 --> 00:20:10.950
URL will have just
a single offer.

00:20:10.950 --> 00:20:13.070
Maybe you only have monthly
subscriptions.

00:20:13.070 --> 00:20:13.850
That's cool.

00:20:13.850 --> 00:20:14.370
That's fine.

00:20:14.370 --> 00:20:15.190
It works.

00:20:15.190 --> 00:20:19.130
And your offers UI that I've
been saying is just a buy

00:20:19.130 --> 00:20:20.200
button or a link.

00:20:20.200 --> 00:20:23.920
And it could be as
simple as that.

00:20:23.920 --> 00:20:26.350
Doesn't need to be very
fancy at all.

00:20:26.350 --> 00:20:28.280
This whole process is
entirely up to you.

00:20:30.920 --> 00:20:36.700
OK, so I've just shown what the
offers UI might look like,

00:20:36.700 --> 00:20:38.595
based on the JSON that
I showed you in

00:20:38.595 --> 00:20:40.650
the previous slide.

00:20:40.650 --> 00:20:44.060
In this case, each offer just
becomes a radio button for the

00:20:44.060 --> 00:20:45.600
user to choose from.

00:20:45.600 --> 00:20:48.090
This is very basic.

00:20:48.090 --> 00:20:51.930
You guys will make something
much prettier, I'm sure.

00:20:51.930 --> 00:20:58.020
But the key point about this
slide is that the user's

00:20:58.020 --> 00:20:59.520
presented with a buy button.

00:20:59.520 --> 00:21:02.440
When they click on the buy
button, they're sent to that

00:21:02.440 --> 00:21:04.810
One Pass Checkout URL.

00:21:04.810 --> 00:21:08.350
They're sent there, and
that's where the

00:21:08.350 --> 00:21:10.420
transaction's processed.

00:21:10.420 --> 00:21:12.360
It's a one click process
if you're an

00:21:12.360 --> 00:21:13.610
existing Checkout user.

00:21:16.360 --> 00:21:20.910
And then once that transaction
is complete, the One Pass then

00:21:20.910 --> 00:21:24.440
redirects the user back to this
original URL with the

00:21:24.440 --> 00:21:27.520
response parameter
and the token.

00:21:27.520 --> 00:21:29.130
So this is the last step.

00:21:29.130 --> 00:21:32.670
Let's see how we handle a
request in the case when

00:21:32.670 --> 00:21:34.310
access should be granted.

00:21:34.310 --> 00:21:36.360
So response will be yes, and
there's a token in there.

00:21:43.000 --> 00:21:47.200
OK, so in this case when access
should be granted, you

00:21:47.200 --> 00:21:48.880
notice it wasn't in
the JavaScript.

00:21:48.880 --> 00:21:51.210
We just had a-- is there
a response parameter?

00:21:51.210 --> 00:21:54.620
If there's one, does
it equal no?

00:21:54.620 --> 00:21:56.580
The case when access should be
granted when the response

00:21:56.580 --> 00:21:59.460
equals yes, that really
needs to be handled

00:21:59.460 --> 00:22:01.530
on the server side.

00:22:01.530 --> 00:22:03.640
Any kind of decision
making logic in

00:22:03.640 --> 00:22:05.160
JavaScript, on the client--

00:22:05.160 --> 00:22:06.810
you could do this
on the client.

00:22:06.810 --> 00:22:08.150
You can see there's nothing
special here.

00:22:10.670 --> 00:22:13.000
Any decision that's made
on the client can be

00:22:13.000 --> 00:22:13.950
instrumented.

00:22:13.950 --> 00:22:17.970
It takes a few seconds to write
a little JaveScript to

00:22:17.970 --> 00:22:20.340
do whatever your JavaScript
was going to do

00:22:20.340 --> 00:22:21.690
if access was granted.

00:22:21.690 --> 00:22:26.260
So it's really crucial that that
decision not be made on

00:22:26.260 --> 00:22:29.470
the client for a secure
solution.

00:22:29.470 --> 00:22:34.370
So in my example, I'm using
a Java back end.

00:22:34.370 --> 00:22:37.100
This is a standard
Java servlet.

00:22:37.100 --> 00:22:40.210
Any Java developers
in the house?

00:22:40.210 --> 00:22:41.240
Great.

00:22:41.240 --> 00:22:43.040
You'll recognize a
lot of this code.

00:22:43.040 --> 00:22:45.620
It's pretty boilerplate stuff.

00:22:45.620 --> 00:22:51.380
I'm extracting URL parameters
from the request. If the

00:22:51.380 --> 00:22:55.280
request had a URL parameter
response and it equaled yes,

00:22:55.280 --> 00:22:58.750
and it had a token, which was
valid, I send the full article

00:22:58.750 --> 00:22:59.910
to the client.

00:22:59.910 --> 00:23:02.880
This is a valid request
for protected content.

00:23:05.490 --> 00:23:09.030
And in this full article, you
wouldn't need to send all the

00:23:09.030 --> 00:23:12.100
access checking logic and the
offers UI logic, all that has

00:23:12.100 --> 00:23:16.840
already happened by now if the
user has reached this point.

00:23:16.840 --> 00:23:19.670
And then the L statement
here is, if the

00:23:19.670 --> 00:23:20.720
user didn't have access.

00:23:20.720 --> 00:23:23.930
And this is when you'd send the
short form of the article,

00:23:23.930 --> 00:23:27.560
or the snippet, however you're
doing it, and the code to

00:23:27.560 --> 00:23:28.980
build the offers UI.

00:23:35.080 --> 00:23:37.700
And I need to remember this
highlight these chunks of code

00:23:37.700 --> 00:23:39.500
as I talk about them.

00:23:39.500 --> 00:23:42.730
OK, so we kind of glossed over
that valid token step.

00:23:42.730 --> 00:23:44.260
Let me show you what
that looks like.

00:23:44.260 --> 00:23:48.200
Java developers, you're going
to see that I've copied and

00:23:48.200 --> 00:23:51.270
pasted 90% of this, just like
I'm sure you all have done

00:23:51.270 --> 00:23:52.870
many times before.

00:23:52.870 --> 00:23:54.580
This is just what it takes
to read the contents

00:23:54.580 --> 00:23:56.850
of the URL in Java.

00:23:56.850 --> 00:24:00.180
The only bits that weren't
copied and pasted are what's

00:24:00.180 --> 00:24:02.760
highlighted here.

00:24:02.760 --> 00:24:06.950
The first highlighted bit
is the API to One Pass.

00:24:06.950 --> 00:24:08.290
That would be, of course,
specific to this

00:24:08.290 --> 00:24:09.720
implementation.

00:24:09.720 --> 00:24:11.820
And we're passing the
token in there.

00:24:11.820 --> 00:24:14.770
And the next interesting bit is
the last line, the return

00:24:14.770 --> 00:24:19.790
statement where we see if the
API request to validate the

00:24:19.790 --> 00:24:22.070
token, did that reply
with a yes or no?

00:24:22.070 --> 00:24:23.890
Very straightforward.

00:24:23.890 --> 00:24:26.960
No need for XML parsing, JSON.

00:24:26.960 --> 00:24:28.470
It's a yes or no.

00:24:28.470 --> 00:24:29.880
We just send that back.

00:24:29.880 --> 00:24:32.530
Very straightforward.

00:24:32.530 --> 00:24:37.390
And that's all the
code we need.

00:24:37.390 --> 00:24:39.130
Just a couple of things
to point out.

00:24:39.130 --> 00:24:43.010
I've shown you a lot of
inline JavaScript.

00:24:43.010 --> 00:24:47.160
Just for brevity, all of that
JavaScript could very easily

00:24:47.160 --> 00:24:50.760
just be put in a JavaScript
library of some kind.

00:24:50.760 --> 00:24:53.080
Included in your standard
template,

00:24:53.080 --> 00:24:54.860
header, footer, whatever.

00:24:54.860 --> 00:24:59.160
And you've now got a very easy
way to add access checking to

00:24:59.160 --> 00:25:00.740
whatever part of your side
you want on the whole

00:25:00.740 --> 00:25:03.720
site, if you wanted.

00:25:03.720 --> 00:25:06.910
The second more powerful point
I'm going to make is that no

00:25:06.910 --> 00:25:11.700
where in the code, did we say,
is this a subscription?

00:25:11.700 --> 00:25:13.760
Is this a single article
purchase?

00:25:13.760 --> 00:25:18.090
Do we need to do something if
tax is included or not?

00:25:18.090 --> 00:25:19.110
Is there a free trial?

00:25:19.110 --> 00:25:21.410
There was no cool that
did any of that.

00:25:21.410 --> 00:25:24.400
And that's the power of
One Pass, actually.

00:25:24.400 --> 00:25:28.150
All of that is configuration
to us.

00:25:28.150 --> 00:25:31.630
So if you change the price of
something, you price it too

00:25:31.630 --> 00:25:34.000
high, and you realize you need
to experiment with a lower

00:25:34.000 --> 00:25:36.220
price, that's just a
configuration change.

00:25:36.220 --> 00:25:39.660
You want to go from a monthly
model to a biweekly model,

00:25:39.660 --> 00:25:40.730
configuration change.

00:25:40.730 --> 00:25:43.340
Code doesn't change at all.

00:25:43.340 --> 00:25:45.300
We've taken care of all
of that when we

00:25:45.300 --> 00:25:48.560
do the access checking.

00:25:48.560 --> 00:25:53.780
So if you change the structure
of the website, again nothing

00:25:53.780 --> 00:25:55.060
needs to change as far as this

00:25:55.060 --> 00:25:57.260
implementation code is concerned.

00:25:57.260 --> 00:25:59.680
I think that's pretty
powerful.

00:25:59.680 --> 00:26:03.440
So let's just summarize
to wrap up here.

00:26:03.440 --> 00:26:04.210
What do we have to do?

00:26:04.210 --> 00:26:07.990
You wrote a few dozen lines of
JavaScript code on the client.

00:26:07.990 --> 00:26:10.630
Less than that on the server
side, if you use some

00:26:10.630 --> 00:26:12.360
JavaScript libraries.

00:26:12.360 --> 00:26:15.250
You didn't have to have a
user management system.

00:26:15.250 --> 00:26:19.760
You didn't have to set up
a database of any kind.

00:26:19.760 --> 00:26:23.970
No messy integration with card
software and daemon processing

00:26:23.970 --> 00:26:29.090
and merchant, not merchant, and
credit card verification,

00:26:29.090 --> 00:26:30.440
error codes.

00:26:30.440 --> 00:26:32.380
We've taken care of all
of that for you.

00:26:32.380 --> 00:26:36.220
And what you get is a lot.

00:26:36.220 --> 00:26:38.440
Support from us with
payment models.

00:26:38.440 --> 00:26:41.510
All major browsers and platforms
are supported.

00:26:41.510 --> 00:26:43.400
International currencies,
locales, all

00:26:43.400 --> 00:26:45.830
taken care for you.

00:26:45.830 --> 00:26:48.490
And you get the same security
and authentication that's

00:26:48.490 --> 00:26:53.800
behind everything single Google
account on your site.

00:26:53.800 --> 00:26:57.170
I think that's pretty cool.

00:26:57.170 --> 00:27:03.970
So for more details, please
visit www.google.com/onepass.

00:27:03.970 --> 00:27:06.720
You can sign up there as well.

00:27:06.720 --> 00:27:10.740
And with that, we are going
to open up for Q and A.

00:27:10.740 --> 00:27:14.060
Just a request, if you have a
question, please come up to

00:27:14.060 --> 00:27:16.650
the mic, so that everybody
here can hear you.

00:27:16.650 --> 00:27:19.890
And the video recording
captures you as well.

00:27:25.690 --> 00:27:26.940
[INAUDIBLE]

00:27:46.100 --> 00:27:48.700
OMI CHANDIRAMANI: Right, so
again that's all kind of taken

00:27:48.700 --> 00:27:49.580
care of for you.

00:27:49.580 --> 00:27:53.950
The billing address of the user
is what determines which

00:27:53.950 --> 00:27:55.290
tax rate should be applied.

00:27:55.290 --> 00:27:58.470
And that's Google Checkout
functionality.

00:27:58.470 --> 00:28:01.120
So you don't have to worry about
which state is he from?

00:28:01.120 --> 00:28:03.400
And again, there was no
code that did that.

00:28:03.400 --> 00:28:06.240
All of that has been taken
care of for you.

00:28:06.240 --> 00:28:09.790
I'm not sure the
mic is working?

00:28:09.790 --> 00:28:13.050
But that previous question was
about sales taxes and how

00:28:13.050 --> 00:28:14.300
they're applied.

00:28:16.830 --> 00:28:18.610
Hi, so I had a question
about--

00:28:18.610 --> 00:28:21.570
so I understand you have
different offers, like monthly

00:28:21.570 --> 00:28:23.660
plans, subscriptions,
on so on.

00:28:23.660 --> 00:28:25.690
So how do you categorize--

00:28:25.690 --> 00:28:28.130
like if different parts
of my site are parts

00:28:28.130 --> 00:28:29.030
of different offers--

00:28:29.030 --> 00:28:34.080
Like do I have to upload
my inventory of

00:28:34.080 --> 00:28:36.910
URLs or content sections?

00:28:36.910 --> 00:28:38.920
How does that work?

00:28:38.920 --> 00:28:41.100
OMI CHANDIRAMANI: Yeah,
I can take that.

00:28:41.100 --> 00:28:46.050
When you set up an offer, you
do have to provide us with

00:28:46.050 --> 00:28:47.970
some knowledge of the structure
of your site.

00:28:47.970 --> 00:28:49.550
So if you have a--

00:28:49.550 --> 00:28:55.700
it's example.com/news/star is
sold for a certain amount.

00:28:55.700 --> 00:28:58.270
Then you create an offer and
you specify, OK, for this

00:28:58.270 --> 00:29:02.620
offer, we include the content
under the /news/star.

00:29:02.620 --> 00:29:06.060
Maybe another offer
has /sports/star.

00:29:06.060 --> 00:29:07.740
Another offer could
have both of them.

00:29:07.740 --> 00:29:10.030
So you can play with this.

00:29:10.030 --> 00:29:13.890
$5 for news, $5 dollars for
sports, but $8 for both of

00:29:13.890 --> 00:29:14.580
them together.

00:29:14.580 --> 00:29:15.770
You can play with all of that.

00:29:15.770 --> 00:29:18.420
So I can use Regexes or
something that define

00:29:18.420 --> 00:29:20.420
different areas of my content.

00:29:20.420 --> 00:29:22.590
OMI CHANDIRAMANI: That's right,
we allow Regexes and

00:29:22.590 --> 00:29:23.700
they can get complicated.

00:29:23.700 --> 00:29:26.850
Doesn't have to only begin with,
or end with, it can also

00:29:26.850 --> 00:29:28.690
like contain.

00:29:28.690 --> 00:29:29.930
It's Regex.

00:29:29.930 --> 00:29:33.083
The power of Regex.

00:29:33.083 --> 00:29:37.011
I had a question about--

00:29:37.011 --> 00:29:41.921
You said giving access to
nondigital customers.

00:29:41.921 --> 00:29:46.340
Or your print subscribers.

00:29:46.340 --> 00:29:49.286
A lot of customers that I
integrate, they will have

00:29:49.286 --> 00:29:51.741
their existing database of
users, and they want to check

00:29:51.741 --> 00:29:54.687
and make sure they have a print
subscription before they

00:29:54.687 --> 00:29:55.669
continue on.

00:29:55.669 --> 00:29:57.180
Do you have a--

00:29:57.180 --> 00:29:59.790
CHASE HANSEL: Yeah, so basically
if you want to do

00:29:59.790 --> 00:30:02.760
authentication for some
existing print

00:30:02.760 --> 00:30:05.270
subscriber or newspaper.

00:30:05.270 --> 00:30:08.970
On that person's website, they
would set up a form, which

00:30:08.970 --> 00:30:10.680
says, I think, what's the
standard these days?

00:30:10.680 --> 00:30:13.180
Your phone number and
your address or

00:30:13.180 --> 00:30:14.150
something like that.

00:30:14.150 --> 00:30:16.290
So you type in that info, and
then basically, they would do

00:30:16.290 --> 00:30:18.740
a check to their database.

00:30:18.740 --> 00:30:20.950
And if the answer was yes, and
where they would essentially

00:30:20.950 --> 00:30:22.820
use is one of those
discount coupons.

00:30:22.820 --> 00:30:25.860
So then they would put a
discount coupon in the URL,

00:30:25.860 --> 00:30:29.540
and they would get a new set of
offers, say free, or $1, or

00:30:29.540 --> 00:30:30.300
you name it.

00:30:30.300 --> 00:30:32.810
But basically it's a pretty
seamless system to the

00:30:32.810 --> 00:30:35.030
consumer, where if they do
fulfilment and on the

00:30:35.030 --> 00:30:36.840
publisher's website,
just get access.

00:30:43.742 --> 00:30:46.207
This seems to be
very URL-based.

00:30:46.207 --> 00:30:48.179
What happens if the URL of
the content changes?

00:30:48.179 --> 00:30:53.602
Is there anything that helps
users pay for something and

00:30:53.602 --> 00:30:56.560
it's at one location that
identifies the content,

00:30:56.560 --> 00:30:59.025
independent of where it's
actually published?

00:30:59.025 --> 00:31:00.750
So if it's moved around
the website, they

00:31:00.750 --> 00:31:01.490
just don't get it?

00:31:01.490 --> 00:31:04.448
Or is it tied to that particular
URL where they

00:31:04.448 --> 00:31:05.927
originally accessed it?

00:31:09.610 --> 00:31:11.140
OMI CHANDIRAMANI: Yeah,
you're right.

00:31:11.140 --> 00:31:14.990
This is designed for sites to be
able to sell their content.

00:31:14.990 --> 00:31:17.590
And the content is identified
by URL.

00:31:17.590 --> 00:31:21.835
I do want to clarify
that, we take the

00:31:21.835 --> 00:31:23.140
entire URL into account.

00:31:23.140 --> 00:31:28.500
So if you have just one URL,
slash, article, dot CGI,

00:31:28.500 --> 00:31:32.460
whatever, and the way you show
different content is by

00:31:32.460 --> 00:31:36.220
passing different IDs
to that one URL.

00:31:36.220 --> 00:31:38.260
We take that entire URL
into account with the

00:31:38.260 --> 00:31:39.510
parameters as well.

00:31:41.790 --> 00:31:43.350
So is that addressing
is your question?

00:31:43.350 --> 00:31:44.336
Kind of.

00:31:44.336 --> 00:31:47.294
I'm thinking of, let's say,
I'm covering something and

00:31:47.294 --> 00:31:49.759
it's on the front page
of my site, and so

00:31:49.759 --> 00:31:51.731
it's a content section.

00:31:51.731 --> 00:31:54.853
But later, for whatever reason,
I decide to move it to

00:31:54.853 --> 00:31:55.182
the archives.

00:31:55.182 --> 00:31:58.633
I changed my publishing system
format, so the URL base

00:31:58.633 --> 00:32:01.591
changes, I still old content
that's now being served

00:32:01.591 --> 00:32:05.110
through the old system, but
it has a different URL.

00:32:05.110 --> 00:32:06.560
OMI CHANDIRAMANI: Right.

00:32:06.560 --> 00:32:08.840
So they're some tricks here.

00:32:08.840 --> 00:32:11.750
You're right, if content moves
from one section of your site

00:32:11.750 --> 00:32:15.810
to another, and the way you've
set up offers is based on

00:32:15.810 --> 00:32:17.570
those sections, then
you're right.

00:32:17.570 --> 00:32:21.280
Something that somebody had
bought in one offer is now in

00:32:21.280 --> 00:32:22.170
another offer.

00:32:22.170 --> 00:32:23.080
And there's some confusion
there.

00:32:23.080 --> 00:32:27.120
But the power of this is in
how you define what the

00:32:27.120 --> 00:32:27.840
content is.

00:32:27.840 --> 00:32:31.650
So again, it comes back to
that regular expression

00:32:31.650 --> 00:32:35.360
question, where if you can build
regular expressions to

00:32:35.360 --> 00:32:40.570
consistently identify which
offer applies to what content,

00:32:40.570 --> 00:32:41.340
then you're fine.

00:32:41.340 --> 00:32:45.580
And really that's the only
way this can be done.

00:32:45.580 --> 00:32:47.350
It's hard to track.

00:32:47.350 --> 00:32:50.670
If you moved an article, and
there's no way even for you to

00:32:50.670 --> 00:32:56.130
identify which offer it should
qualify for, then the system

00:32:56.130 --> 00:32:56.980
can't either.

00:32:56.980 --> 00:32:58.860
CHASE HANSEL: So more
concretely, you could have a

00:32:58.860 --> 00:33:02.040
flash news and you could add
that your offer, and you could

00:33:02.040 --> 00:33:06.210
also have /archive/news, and
they could both apply.

00:33:06.210 --> 00:33:09.560
And if /archive/news had nothing
at the first point, it

00:33:09.560 --> 00:33:10.530
doesn't really matter, right?

00:33:10.530 --> 00:33:11.290
No one's going there.

00:33:11.290 --> 00:33:14.260
That URL doesn't exist. But if
you can anticipate the fact

00:33:14.260 --> 00:33:17.670
that it's going to move from
/news/ to /archive/news, then

00:33:17.670 --> 00:33:19.790
you can just give the
user access to both.

00:33:19.790 --> 00:33:21.400
And it just gets handled
behind the curtains.

00:33:24.560 --> 00:33:26.040
Hi, there.

00:33:26.040 --> 00:33:27.480
Saw your offer page.

00:33:27.480 --> 00:33:30.010
Saw you said coupons, but I
didn't see anything in there

00:33:30.010 --> 00:33:30.500
about metering.

00:33:30.500 --> 00:33:32.580
And you had mentioned
on metering.

00:33:32.580 --> 00:33:33.410
Could you expand on that?

00:33:33.410 --> 00:33:35.300
CHASE HANSEL: So metering
works on the client.

00:33:35.300 --> 00:33:38.930
So basically the way that we're
supporting metering is

00:33:38.930 --> 00:33:39.980
no barrier to entry.

00:33:39.980 --> 00:33:42.760
And the only real way to do
that is basically not have

00:33:42.760 --> 00:33:44.020
anyone log in before they start

00:33:44.020 --> 00:33:46.290
metering, but to use cookie.

00:33:46.290 --> 00:33:48.520
So what you would expect is you
have a cookie that says

00:33:48.520 --> 00:33:51.430
user has come once, user has
come twice, user has come

00:33:51.430 --> 00:33:53.400
three times, great, showing
off our page.

00:33:53.400 --> 00:33:55.080
And that's all client
side JavaScript.

00:33:55.080 --> 00:33:58.180
So actually metering is
something that publishers are

00:33:58.180 --> 00:34:00.950
doing with One Pass, but there's
actually no additional

00:34:00.950 --> 00:34:02.080
set up on our end.

00:34:02.080 --> 00:34:03.330
It's all client side
JavaScript.

00:34:07.100 --> 00:34:12.489
So I've noticed that we passed
the encoded URL when the API

00:34:12.489 --> 00:34:13.860
calls, and we're doing
the redirection

00:34:13.860 --> 00:34:14.830
to everything else.

00:34:14.830 --> 00:34:17.199
Do I have to give you the
same URL that the

00:34:17.199 --> 00:34:18.139
page is actually on?

00:34:18.139 --> 00:34:21.819
Or can I give you one that
means something to me?

00:34:21.819 --> 00:34:24.000
OMI CHANDIRAMANI: You don't have
to give us the same URL,

00:34:24.000 --> 00:34:26.449
just as long as you understand
what's going on.

00:34:26.449 --> 00:34:29.920
That URL is where we're sending
the user back to.

00:34:29.920 --> 00:34:31.810
And if that's where you
want the user to

00:34:31.810 --> 00:34:34.330
end up, number one.

00:34:34.330 --> 00:34:39.489
The other use of the URL was, if
that's the URL you want One

00:34:39.489 --> 00:34:43.383
Pass to use to try and figure
out which offer to charge the

00:34:43.383 --> 00:34:45.010
user for, that's fine.

00:34:45.010 --> 00:34:47.540
We're not reading
the URL content.

00:34:47.540 --> 00:34:50.540
It's just used to look up offers
and where to send the

00:34:50.540 --> 00:34:51.120
user back to.

00:34:51.120 --> 00:34:53.290
So it's both the regular
expression match and the

00:34:53.290 --> 00:34:56.409
redirect that you're sending
the user back to.

00:34:56.409 --> 00:34:58.900
OMI CHANDIRAMANI: OK, so the URL
that's in the param that

00:34:58.900 --> 00:35:01.920
was passed in URL parameters,
the thing we escaped.

00:35:01.920 --> 00:35:03.330
That's not the regular
expression URL, that's the

00:35:03.330 --> 00:35:03.590
actual URL.

00:35:03.590 --> 00:35:05.890
No, I know but it's used to
match against the regular

00:35:05.890 --> 00:35:07.840
expressions that you
reconfigured.

00:35:07.840 --> 00:35:09.880
As well as so you'd be
redirecting the user back.

00:35:09.880 --> 00:35:12.010
And you're OK if I put in
something different there, so

00:35:12.010 --> 00:35:13.410
long as I understand
what's going on.

00:35:13.410 --> 00:35:14.800
OMI CHANDIRAMANI: Yeah,
it's your site.

00:35:14.800 --> 00:35:17.290
And you own the user experience
if that's what

00:35:17.290 --> 00:35:20.290
makes sense in your context.

00:35:20.290 --> 00:35:23.110
Perfect, thank you.

00:35:23.110 --> 00:35:24.170
A couple of questions,
actually.

00:35:24.170 --> 00:35:27.970
A lot the questions have been
centered around publishers for

00:35:27.970 --> 00:35:29.680
magazines or something.

00:35:29.680 --> 00:35:31.110
Is that a restriction
right now?

00:35:31.110 --> 00:35:31.880
Policy restriction?

00:35:31.880 --> 00:35:34.670
Or can it be like a service
or log into some--

00:35:34.670 --> 00:35:36.080
OMI CHANDIRAMANI: Content
publisher.

00:35:36.080 --> 00:35:39.330
We use that term very broadly.

00:35:39.330 --> 00:35:41.100
We're not trying to restrict
it to anybody.

00:35:41.100 --> 00:35:43.040
That's just the best word that
we could come up with that

00:35:43.040 --> 00:35:47.080
captures anybody that puts
content on the web.

00:35:47.080 --> 00:35:47.920
This actually is--

00:35:47.920 --> 00:35:50.280
the other question I had is
this actually has a lot of

00:35:50.280 --> 00:35:53.790
implications as far as non-web
based stuff as well.

00:35:53.790 --> 00:35:59.550
Like I want to create trial
software, I guess it was asked

00:35:59.550 --> 00:36:02.000
previously already, but
it's still tied to the

00:36:02.000 --> 00:36:03.250
concept of a URL?

00:36:05.730 --> 00:36:08.400
CHASE HANSEL: Yes, it's tied
to the concept of URL.

00:36:08.400 --> 00:36:11.570
OMI CHANDIRAMANI: Yes, it is.

00:36:11.570 --> 00:36:13.300
Hi, I'm from Hong Kong.

00:36:13.300 --> 00:36:16.160
I'm working for a magazine
publishing company.

00:36:16.160 --> 00:36:18.400
And we are considering
making Android

00:36:18.400 --> 00:36:21.300
magazine in coming months.

00:36:21.300 --> 00:36:25.420
We are excited about One Pass,
but we have a question.

00:36:25.420 --> 00:36:27.340
When will it come to Asia?

00:36:27.340 --> 00:36:30.590
CHASE HANSEL: So One Pass is
currently available in the US,

00:36:30.590 --> 00:36:35.720
Canada, France, Italy, Spain,
Germany, and the UK.

00:36:35.720 --> 00:36:41.660
We are, ideally by the end of
the month, going to be able to

00:36:41.660 --> 00:36:46.730
support merchants in all
Checkout merchants countries,

00:36:46.730 --> 00:36:48.540
which includes Hong Kong.

00:36:48.540 --> 00:36:50.100
Which should be end of May.

00:36:50.100 --> 00:36:52.040
I don't know.

00:36:52.040 --> 00:36:53.020
These things tend to slip.

00:36:53.020 --> 00:36:56.690
So I would say probably
realistically, June.

00:36:56.690 --> 00:36:58.530
But it's something we're
actively working on.

00:36:58.530 --> 00:37:01.460
Great, thanks.

00:37:01.460 --> 00:37:03.390
I have a question.

00:37:03.390 --> 00:37:05.635
Is the token visible
to the consumer?

00:37:05.635 --> 00:37:07.710
And is that open?

00:37:07.710 --> 00:37:11.570
Like if they share that URL with
a token, what protects

00:37:11.570 --> 00:37:13.630
that URL from other
people taking

00:37:13.630 --> 00:37:14.970
advantage of the content?

00:37:14.970 --> 00:37:15.630
OMI CHANDIRAMANI: Right.

00:37:15.630 --> 00:37:19.160
So one of the qualities of the
token that I didn't mention in

00:37:19.160 --> 00:37:22.560
my slide, is that it expires
very quickly.

00:37:22.560 --> 00:37:23.610
Within minutes, actually.

00:37:23.610 --> 00:37:28.600
So you can't buy something, send
the URL to somebody else,

00:37:28.600 --> 00:37:32.510
and have them be able to
access the content.

00:37:32.510 --> 00:37:37.400
Think of it as a cached version
of the access check

00:37:37.400 --> 00:37:40.690
that expires in two minutes.

00:37:40.690 --> 00:37:41.940
That's the action number.

00:37:44.330 --> 00:37:45.760
Two questions.

00:37:45.760 --> 00:37:48.350
What are the fees for
this, first of all?

00:37:48.350 --> 00:37:49.870
CHASE HANSEL: 10%.

00:37:49.870 --> 00:37:51.660
Google takes 10%.

00:37:51.660 --> 00:37:53.660
OK, and do you process

00:37:53.660 --> 00:37:55.400
microtransactions, like even sub-cent?

00:37:55.400 --> 00:37:56.610
CHASE HANSEL: There's
no minimum.

00:37:56.610 --> 00:37:59.780
So you can take sub-cent
things like--

00:37:59.780 --> 00:38:02.790
CHASE HANSEL: I do believe
it's a cent.

00:38:02.790 --> 00:38:07.280
I would have to check with
the Checkout folks.

00:38:07.280 --> 00:38:09.330
Do you take 10% of a cent?

00:38:09.330 --> 00:38:11.350
CHASE HANSEL: For example,
that example I

00:38:11.350 --> 00:38:15.520
gave was EUR 0.10.

00:38:15.520 --> 00:38:16.770
[INAUDIBLE]

00:38:22.000 --> 00:38:27.030
CHASE HANSEL: Yeah,
so this is 10%.

00:38:27.030 --> 00:38:31.500
No minimums, credit card.

00:38:31.500 --> 00:38:32.750
[INAUDIBLE]

00:38:37.770 --> 00:38:41.880
CHASE HANSEL: So the use of this
is up to the policy of

00:38:41.880 --> 00:38:43.966
the device.

00:38:49.210 --> 00:38:50.610
Technically, yes.

00:38:50.610 --> 00:38:54.829
You would have to run it by
the policy of each market.

00:38:54.829 --> 00:38:56.079
[INAUDIBLE]

00:39:02.660 --> 00:39:04.580
CHASE HANSEL: How would you
do it with web use?

00:39:04.580 --> 00:39:06.490
Yes.

00:39:06.490 --> 00:39:10.780
OMI CHANDIRAMANI: If you have a
browser environment that can

00:39:10.780 --> 00:39:12.900
support your implementation,
then it would work.

00:39:12.900 --> 00:39:15.860
There's nothing here that was
specific to any environment,

00:39:15.860 --> 00:39:18.370
even the JavaScript that
we showed you.

00:39:18.370 --> 00:39:20.470
All of that logic could be
on the server side if

00:39:20.470 --> 00:39:21.250
that's what you want.

00:39:21.250 --> 00:39:24.210
So it's a pretty flexible
system.

00:39:24.210 --> 00:39:26.640
You can do a lot with it in
multiple environments.

00:39:32.920 --> 00:39:36.580
All right Thanks for
coming, guys.

