WEBVTT
Kind: captions
Language: en

00:00:00.926 --> 00:00:03.090
MALE SPEAKER: Shanghai
GDG is a very

00:00:03.090 --> 00:00:04.885
interesting developer community.

00:00:04.885 --> 00:00:06.010
FEMALE SPEAKER: I'm
glad somebody

00:00:06.010 --> 00:00:07.040
has asked this question.

00:00:07.040 --> 00:00:08.376
MALE SPEAKER: This is where
the magic happens.

00:00:08.376 --> 00:00:09.740
FEMALE SPEAKER: This is
primarily a question and

00:00:09.740 --> 00:00:12.310
answer show, so if any of you
out there would like to ask

00:00:12.310 --> 00:00:13.560
questions--

00:00:17.362 --> 00:00:22.090
DANNY HERMES: Hi, everyone I'm
Danny Hermes with the commerce

00:00:22.090 --> 00:00:24.190
team here in Google Developer
Relations.

00:00:24.190 --> 00:00:26.980
I'm a developer programs
engineer.

00:00:26.980 --> 00:00:30.420
I'm missing my teammate Amanda
this week, but I wanted to

00:00:30.420 --> 00:00:34.860
talk to you guys about a new
feature we just launched

00:00:34.860 --> 00:00:38.200
called Clicks Data
for Paid Clicks.

00:00:38.200 --> 00:00:43.920
So as you can see on my screen
here, in the documentation for

00:00:43.920 --> 00:00:47.640
accessing product data, we have
in the performance block

00:00:47.640 --> 00:00:51.050
a list of data points,
sc:datapoint attributes.

00:00:51.050 --> 00:00:54.920
And in these attributes you
actually get back a date and

00:00:54.920 --> 00:00:57.410
clicks, and that's something
that you had already gotten,

00:00:57.410 --> 00:01:00.200
but in addition you also get
paid underscore clicks.

00:01:00.200 --> 00:01:05.050
So the datapoint attribute has
three XML attributes, date

00:01:05.050 --> 00:01:08.410
clicks, and paid clicks that
actually tells you on that

00:01:08.410 --> 00:01:10.800
given date the number of nonpaid
and the number of paid

00:01:10.800 --> 00:01:11.840
clicks you had.

00:01:11.840 --> 00:01:14.880
And to request this, you
can see the URI--

00:01:14.880 --> 00:01:20.320
content dot googleapis dot com
slash content slash V1, then

00:01:20.320 --> 00:01:23.320
your Merchant Center ID,
then slash item slash

00:01:23.320 --> 00:01:25.510
product slash schema.

00:01:25.510 --> 00:01:27.910
And then from there, you
can append the query

00:01:27.910 --> 00:01:28.760
parameters you like.

00:01:28.760 --> 00:01:31.650
So performance dot start is the
query parameter that tells

00:01:31.650 --> 00:01:34.660
you the first date for
performance data, and

00:01:34.660 --> 00:01:37.810
performance dot end is telling
you the second date.

00:01:37.810 --> 00:01:42.150
Now we'll see in a bit how to
actually use the PHP client

00:01:42.150 --> 00:01:44.160
library to get this data.

00:01:44.160 --> 00:01:47.330
We talked about Python and .NET
the last time we met, so

00:01:47.330 --> 00:01:48.920
I figured we'd change
it up a bit.

00:01:48.920 --> 00:01:51.270
We're actually going to
run the PHP in the PHP

00:01:51.270 --> 00:01:54.990
Interpreter, which should
be nice to see.

00:01:54.990 --> 00:01:57.300
But before we do that, let's
actually head over to the

00:01:57.300 --> 00:02:00.830
interactive demo tool to have
that just abstract away

00:02:00.830 --> 00:02:03.350
everything for us and we can
just go ahead and click.

00:02:03.350 --> 00:02:06.940
So let me increase the
size a little bit.

00:02:06.940 --> 00:02:09.820
So I'm already signed in here
with my account, and I have my

00:02:09.820 --> 00:02:11.400
merchant ID here--

00:02:11.400 --> 00:02:15.860
10962361.

00:02:15.860 --> 00:02:19.500
And so in order to perform the
request I want, I'm simply

00:02:19.500 --> 00:02:23.680
going to go to the Get panel
within the Items panel--

00:02:23.680 --> 00:02:25.660
the Get subpanel, that
is-- and I'll check

00:02:25.660 --> 00:02:27.090
the Performance box.

00:02:27.090 --> 00:02:32.010
And by doing that, it's going
to include 2012 dash 08 dash

00:02:32.010 --> 00:02:36.910
9, or August 9 of this year,
as the start date, and 2012

00:02:36.910 --> 00:02:39.690
dash 08 dash 16 as
the end date.

00:02:39.690 --> 00:02:43.120
So what I'm going to be doing is
asking for all my products.

00:02:43.120 --> 00:02:46.370
As far as I know, I have two
products in this account, and

00:02:46.370 --> 00:02:50.330
I'm asking for the performance
data in this given range.

00:02:50.330 --> 00:02:53.060
Now I'll tell you, you'll
be a bit disappointed.

00:02:53.060 --> 00:03:00.180
I have no clicks as far as I
know, so we'll see though, but

00:03:00.180 --> 00:03:02.730
we're really just looking to
see how the attributes are

00:03:02.730 --> 00:03:05.380
used and how they are returning
the request.

00:03:05.380 --> 00:03:09.510
So before I submit Execute
Notice, the URI is again

00:03:09.510 --> 00:03:13.480
constructed in the exact same
fashion as we saw, with a

00:03:13.480 --> 00:03:16.680
little bit of a line spill over
there to the second half.

00:03:16.680 --> 00:03:19.420
OK, so let's execute it.

00:03:19.420 --> 00:03:23.050
So the request gets sent, and
now it has come back.

00:03:23.050 --> 00:03:26.680
So the response is a 200.

00:03:26.680 --> 00:03:30.050
We see here there were 25 items
per page and the actual

00:03:30.050 --> 00:03:32.540
number returned is just
going to be two.

00:03:32.540 --> 00:03:37.470
In this first item, SKU124,
I do indeed have this

00:03:37.470 --> 00:03:41.180
performance block here, and in
it I have eight data points

00:03:41.180 --> 00:03:44.360
and that is the data points
for the days from

00:03:44.360 --> 00:03:46.450
August 9 to August 16.

00:03:46.450 --> 00:03:49.040
And you see here, each datapoint
has clicks equals

00:03:49.040 --> 00:03:51.490
zero and paid clicks
equals zero.

00:03:51.490 --> 00:03:54.070
Now before I move
on to PHP, I'll

00:03:54.070 --> 00:03:55.780
submit one other request--

00:03:55.780 --> 00:03:58.540
and this is to give some context
for something I'll be

00:03:58.540 --> 00:04:00.880
talking about a bit later--

00:04:00.880 --> 00:04:04.430
but you can also submit the same
request using the same

00:04:04.430 --> 00:04:07.070
query parameters but for
a specific item.

00:04:07.070 --> 00:04:10.390
So rather than just querying
your entire inventory asking

00:04:10.390 --> 00:04:13.480
for performance and getting
back performance for--

00:04:13.480 --> 00:04:19.300
we sell one item but there's
actually a second item in this

00:04:19.300 --> 00:04:20.350
response as well--

00:04:20.350 --> 00:04:24.180
but you can target performance
for specific items.

00:04:24.180 --> 00:04:29.140
So here I've actually hard coded
in the SKU, the actual

00:04:29.140 --> 00:04:30.800
product ID online--

00:04:30.800 --> 00:04:37.140
:EN for English, :US for the
country, and then :SKU123 for

00:04:37.140 --> 00:04:38.380
the SKU of the product.

00:04:38.380 --> 00:04:40.970
And I can execute this request,
and rather than

00:04:40.970 --> 00:04:44.100
getting a feed of products back
with this performance

00:04:44.100 --> 00:04:47.660
data, I will get an individual
product.

00:04:47.660 --> 00:04:49.770
So entry equals--

00:04:49.770 --> 00:04:53.850
and again, I have this
performance block with the

00:04:53.850 --> 00:04:56.930
eight datapoints in it for
that particular item.

00:04:56.930 --> 00:05:00.110
So let's actually write some
code to access this data.

00:05:00.110 --> 00:05:02.770
How can we do it?

00:05:02.770 --> 00:05:06.210
So let me switch to Terminal,
and let's go

00:05:06.210 --> 00:05:07.460
full screen on this.

00:05:11.970 --> 00:05:16.580
I'm not sure what the
adjustment is.

00:05:16.580 --> 00:05:18.400
OK, there we go.

00:05:18.400 --> 00:05:19.200
Sorry about that.

00:05:19.200 --> 00:05:23.220
So for security reasons I've
already loaded a token in.

00:05:23.220 --> 00:05:28.370
I didn't want to actually go
through the whole process of

00:05:28.370 --> 00:05:32.530
putting in my password,
et cetera.

00:05:32.530 --> 00:05:34.900
But once we already
have the token--

00:05:34.900 --> 00:05:37.870
the variable token--

00:05:37.870 --> 00:05:39.930
we're going to actually
import the library.

00:05:39.930 --> 00:05:44.340
So I'm in a folder that has the
PHP library in it, and the

00:05:44.340 --> 00:05:49.820
PHP library is just called
GShoppingContent.php, so we

00:05:49.820 --> 00:05:51.760
require that one.

00:05:51.760 --> 00:05:57.610
Now using that, the GSC_Client
class is defined, so we're

00:05:57.610 --> 00:06:01.800
going to get our own client for
making requests from an

00:06:01.800 --> 00:06:03.380
instance of this class.

00:06:03.380 --> 00:06:08.600
So we'll just say client equals
new GSC_Client, because

00:06:08.600 --> 00:06:11.130
we're instantiating a new
object, and we instantiate it

00:06:11.130 --> 00:06:13.826
with the ID for my account--

00:06:13.826 --> 00:06:20.490
10962361, as we saw.

00:06:20.490 --> 00:06:23.390
Now, again, since I already
have a token, rather than

00:06:23.390 --> 00:06:26.310
going through Auth, I'm just
going to explicitly set the

00:06:26.310 --> 00:06:31.690
token on the client using
the set token method.

00:06:31.690 --> 00:06:35.930
So now we have a client that is
authenticated and ready to

00:06:35.930 --> 00:06:41.380
make requests, so we want to
actually do a get request for

00:06:41.380 --> 00:06:43.090
the items in my account.

00:06:43.090 --> 00:06:48.190
So we need a few attributes to
make this request, so first we

00:06:48.190 --> 00:06:49.880
need maxResults.

00:06:49.880 --> 00:06:51.160
Now, maxResults--

00:06:51.160 --> 00:06:52.840
we know we have two items,
so we'll just say

00:06:52.840 --> 00:06:54.720
maxResults equals 2.

00:06:54.720 --> 00:06:57.690
In addition, we actually
need a startToken.

00:06:57.690 --> 00:07:00.550
Since we're not going to use any
particular startToken, we

00:07:00.550 --> 00:07:01.800
just need it null.

00:07:01.800 --> 00:07:05.480
But as we'll see, the signature
for the get products

00:07:05.480 --> 00:07:11.630
method on the client object
actually needs a startToken

00:07:11.630 --> 00:07:14.900
argument into the function
signature.

00:07:14.900 --> 00:07:17.670
And this is sort of an artifact
of trying to keep

00:07:17.670 --> 00:07:20.080
libraries in sync between
Python and PHP.

00:07:20.080 --> 00:07:23.890
Python has this concept of
keyword arguments but PHP

00:07:23.890 --> 00:07:28.040
doesn't, so we have to have a
null argument kind of in the

00:07:28.040 --> 00:07:29.720
middle, but that's
life, right?

00:07:29.720 --> 00:07:34.530
So of course after we have
maxResults and startToken,

00:07:34.530 --> 00:07:39.590
we'll have our performance
start, which was 2012 dash 08

00:07:39.590 --> 00:07:44.830
dash 09, August 9, and
our performance end--

00:07:44.830 --> 00:07:46.110
virtually the same
thing, but--

00:07:46.110 --> 00:07:48.620
2012 dash 08 dash 16.

00:07:48.620 --> 00:07:50.340
These are both strings.

00:07:50.340 --> 00:07:54.150
So now to get a feed of products
back as we saw in the

00:07:54.150 --> 00:07:59.940
actual demo tool, I'm going to
get the variable product feed,

00:07:59.940 --> 00:08:04.030
and I'll just call the
getProducts method on the

00:08:04.030 --> 00:08:08.830
client, and I'm going to pass in
the four variables that we

00:08:08.830 --> 00:08:09.490
just defined.

00:08:09.490 --> 00:08:14.850
So first, maxResults, and
then startToken, then

00:08:14.850 --> 00:08:17.870
performanceStart, then
performanceEnd.

00:08:20.370 --> 00:08:23.360
So this is actually making a
request, sending it off to the

00:08:23.360 --> 00:08:26.730
API, and giving us back the
results in the product feed.

00:08:26.730 --> 00:08:27.900
OK, great.

00:08:27.900 --> 00:08:31.490
So now we actually want to
examine the products and get

00:08:31.490 --> 00:08:35.059
back the specific attributes,
particularly the datapoints,

00:08:35.059 --> 00:08:39.429
within that object so we can
actually use them and inspect

00:08:39.429 --> 00:08:43.190
them and maybe change some
campaigns, change the product

00:08:43.190 --> 00:08:46.770
description, et cetera-- just
react based on the actual

00:08:46.770 --> 00:08:49.030
traffic that the product
is getting based on the

00:08:49.030 --> 00:08:50.590
performance data.

00:08:50.590 --> 00:08:54.290
So I'm just going to
grab the first guy.

00:08:54.290 --> 00:08:58.540
So from the product feed, I'll
call the method getProducts.

00:08:58.540 --> 00:09:02.190
Now, this is a method on the
feed itself that actually will

00:09:02.190 --> 00:09:04.590
return an object--

00:09:04.590 --> 00:09:07.110
excuse me, a list of the
products contained in the

00:09:07.110 --> 00:09:09.460
feed, so it's an array object.

00:09:09.460 --> 00:09:13.270
And I'm just going to get the
first element in that list at

00:09:13.270 --> 00:09:15.920
the zero index.

00:09:15.920 --> 00:09:18.230
Sorry about that.

00:09:18.230 --> 00:09:19.480
I'm not sure--

00:09:22.160 --> 00:09:26.760
productFeed, getProducts.

00:09:26.760 --> 00:09:29.400
There's a syntax error
somewhere, though I'm not sure

00:09:29.400 --> 00:09:30.732
where it is.

00:09:33.970 --> 00:09:37.180
I'm not sure where that syntax
error was, but it's gone away.

00:09:37.180 --> 00:09:39.510
Cool.

00:09:39.510 --> 00:09:40.250
Sorry about that.

00:09:40.250 --> 00:09:45.450
So now I have the product from
the feed, from the very first

00:09:45.450 --> 00:09:47.340
product contained in the list.

00:09:47.340 --> 00:09:51.410
So to see which product that is
let's echo the title of the

00:09:51.410 --> 00:09:52.810
product back to the terminal.

00:09:52.810 --> 00:09:58.850
So on the product I'm going to
call the getTitle method, and

00:09:58.850 --> 00:10:01.450
I'll echo that along with a
new line so we don't have

00:10:01.450 --> 00:10:02.220
spill over.

00:10:02.220 --> 00:10:06.290
So this product is called Beep,
and I had two products,

00:10:06.290 --> 00:10:07.690
as you may have seen
in the drop down.

00:10:07.690 --> 00:10:11.330
One was a widget and the other
one was called Beep.

00:10:11.330 --> 00:10:14.350
So on Beep, we actually want
to get the datapoints.

00:10:14.350 --> 00:10:20.070
So in the variable datapoints,
we'll call the datapoints

00:10:20.070 --> 00:10:24.310
getter from the product
object--

00:10:24.310 --> 00:10:27.950
so, getDatapoints will return
a list, hopefully, of the

00:10:27.950 --> 00:10:31.590
eight data points that we
are expecting to get.

00:10:31.590 --> 00:10:33.100
And it's a special
kind of list--

00:10:33.100 --> 00:10:37.400
it's a DOMNode list, and this is
a native PHP data type, so

00:10:37.400 --> 00:10:40.080
the way we're retrieving them
is actually a bit different

00:10:40.080 --> 00:10:43.670
than just using square brackets
in the index.

00:10:43.670 --> 00:10:48.150
We're actually going to have to
use the item getter on the

00:10:48.150 --> 00:10:49.300
DOMNode list.

00:10:49.300 --> 00:10:52.600
So now we have datapoints
[INAUDIBLE]

00:10:52.600 --> 00:10:54.810
what datapoints is
a DOMNode list.

00:10:54.810 --> 00:10:55.600
I'm going to print it.

00:10:55.600 --> 00:10:56.360
There you see--

00:10:56.360 --> 00:10:58.440
DOMNode list object.

00:10:58.440 --> 00:11:02.140
So how many datapoints do we
have before we actually get in

00:11:02.140 --> 00:11:03.270
and inspect some of them?

00:11:03.270 --> 00:11:08.510
So datapoints length will tell
us the number of datapoints

00:11:08.510 --> 00:11:11.310
that we've received, and we
expect to have received eight.

00:11:11.310 --> 00:11:12.560
So there you have
it-- datapoints

00:11:12.560 --> 00:11:14.400
length has eight items.

00:11:14.400 --> 00:11:17.430
So let's get the
first one, OK?

00:11:17.430 --> 00:11:22.670
So set the variable datapoint
equal to the datapoint at

00:11:22.670 --> 00:11:23.910
index zero.

00:11:23.910 --> 00:11:26.720
So to retrieve that, we just
say datapoint equals

00:11:26.720 --> 00:11:29.640
datapoints, and then we call the
item method on datapoints

00:11:29.640 --> 00:11:31.920
and pass in the index we want--
in this case, like I

00:11:31.920 --> 00:11:33.410
said, zero.

00:11:33.410 --> 00:11:39.230
So this datapoint is now a
separate kind of DOM element,

00:11:39.230 --> 00:11:44.110
and this is an element that we
can pass to our product, and

00:11:44.110 --> 00:11:46.660
our product has some
special getters--

00:11:46.660 --> 00:11:49.590
getDatapointClicks,
getDatapointPaidClicks, and

00:11:49.590 --> 00:11:51.080
getDatapointDate--

00:11:51.080 --> 00:11:54.740
that we can actually use to
inspect the datapoint itself,

00:11:54.740 --> 00:11:56.730
this datapoint relative
to that product.

00:11:56.730 --> 00:11:59.190
Remember, we actually
retrieve datapoints

00:11:59.190 --> 00:12:00.820
from the product itself.

00:12:00.820 --> 00:12:08.210
So to find the actual date of
this datapoint, let's call

00:12:08.210 --> 00:12:16.060
product getDatapointDate, and
we'll pass in the datapoint,

00:12:16.060 --> 00:12:18.590
and hopefully it'll
echo back the date

00:12:18.590 --> 00:12:19.940
for that first datapoint.

00:12:19.940 --> 00:12:22.790
So the first datapoint is
the first date that we

00:12:22.790 --> 00:12:24.740
expect, August 9.

00:12:24.740 --> 00:12:26.850
Now to get the clicks
back-- not the

00:12:26.850 --> 00:12:28.110
paid clicks but clicks--

00:12:28.110 --> 00:12:31.720
we change the date in that
method called getDatapointDate

00:12:31.720 --> 00:12:32.860
to just clicks.

00:12:32.860 --> 00:12:36.700
So again, we're going to echo
product, getDatapointClicks,

00:12:36.700 --> 00:12:39.230
and we're going to pass
in the datapoint.

00:12:39.230 --> 00:12:42.400
Sorry, it's boring-- my product
has zero clicks.

00:12:42.400 --> 00:12:44.260
Nobody clicked on
that product.

00:12:44.260 --> 00:12:48.540
And similarly instead of clicks,
we will add in the

00:12:48.540 --> 00:12:51.540
keyword paid in that method
and call the product

00:12:51.540 --> 00:12:55.970
getDatapointPaidClicks method,
and we'll again see zero.

00:12:55.970 --> 00:12:57.970
So this is pretty simple.

00:12:57.970 --> 00:13:02.600
We already have support for this
in Python, .NET, and, of

00:13:02.600 --> 00:13:04.680
course, PHP, as you just saw.

00:13:04.680 --> 00:13:07.100
If you'd like to use this data
within your production

00:13:07.100 --> 00:13:10.540
systems, it's ready
to go right now.

00:13:10.540 --> 00:13:17.910
So with that, I'm going to
return to the moderator queue.

00:13:17.910 --> 00:13:21.890
Let me pull this up for
everyone to see.

00:13:21.890 --> 00:13:23.670
Actually, I don't know
the link to it off

00:13:23.670 --> 00:13:26.460
the top of my head.

00:13:26.460 --> 00:13:32.220
So the first question on the
moderator queue is--

00:13:32.220 --> 00:13:34.100
let me get these pulled up.

00:13:34.100 --> 00:13:35.350
Sorry, one second.

00:13:41.950 --> 00:13:42.550
OK.

00:13:42.550 --> 00:13:46.350
So from Andrew in Sunnyvale--

00:13:46.350 --> 00:13:49.140
it appears that we can get
performance data on individual

00:13:49.140 --> 00:13:52.150
products and also on the
account as a whole.

00:13:52.150 --> 00:13:54.940
Is there a way to get data on
many products at once without

00:13:54.940 --> 00:13:56.980
sending many individual
requests?

00:13:56.980 --> 00:14:02.630
Now, this question is sort of
interpreted in a few different

00:14:02.630 --> 00:14:08.190
ways, so I'll answer the many
different interpretations.

00:14:08.190 --> 00:14:10.890
So the first interpretation that
I initially thought this

00:14:10.890 --> 00:14:15.770
was asking was, can we get more
than 250 items with just

00:14:15.770 --> 00:14:17.220
performance data and
nothing else?

00:14:17.220 --> 00:14:18.390
So, currently no--

00:14:18.390 --> 00:14:20.130
the only way to get performance
data is with the

00:14:20.130 --> 00:14:23.550
entire payload of the
products themselves.

00:14:23.550 --> 00:14:26.990
And this is something we're
thinking about changing or

00:14:26.990 --> 00:14:29.650
implementing as a feature, so
if people are interested in

00:14:29.650 --> 00:14:31.630
getting just performance data
without the rest of the

00:14:31.630 --> 00:14:33.180
payload, please let us know.

00:14:33.180 --> 00:14:35.540
Vote it up on our shopping
API's issue list.

00:14:35.540 --> 00:14:38.460
We're happy to take that into
consideration when we're

00:14:38.460 --> 00:14:39.930
developing new features.

00:14:39.930 --> 00:14:43.510
The second meaning of this,
which is probably more

00:14:43.510 --> 00:14:46.340
accurate to what he was asking,
is rather than just

00:14:46.340 --> 00:14:50.370
doing a blind get and saying
give me 250 results, can we

00:14:50.370 --> 00:14:52.550
specify which products
we're looking for

00:14:52.550 --> 00:14:54.450
performance data for?

00:14:54.450 --> 00:14:56.770
And the answer to that is,
yes-- luckily, this is

00:14:56.770 --> 00:14:58.520
implemented already.

00:14:58.520 --> 00:15:01.180
As I found when I was reviewing
this moderator

00:15:01.180 --> 00:15:03.680
queue, this isn't really
documented very well and I'm

00:15:03.680 --> 00:15:05.100
going to work to fix that.

00:15:05.100 --> 00:15:09.570
But the Gdata protocol, the
underlying protocol that makes

00:15:09.570 --> 00:15:12.860
this API work, actually
has a way to submit

00:15:12.860 --> 00:15:14.260
queries within batches.

00:15:14.260 --> 00:15:16.770
So we're just used to submitting
inserts, updates,

00:15:16.770 --> 00:15:19.070
and deletes within our batches,
but we can also

00:15:19.070 --> 00:15:20.330
submit queries.

00:15:20.330 --> 00:15:24.530
And to submit a query, just like
a delete, you just have

00:15:24.530 --> 00:15:28.460
an entry with an ID and then
the batch operation, and

00:15:28.460 --> 00:15:30.270
that's it when you
submit a delete.

00:15:30.270 --> 00:15:33.510
By the same token, if you want
to submit a query, all you

00:15:33.510 --> 00:15:34.910
need is the ID of the
product-- so,

00:15:34.910 --> 00:15:40.030
content.googleapis et cetera
slash v1 slash your merchant

00:15:40.030 --> 00:15:42.310
ID and ending in
the product ID.

00:15:42.310 --> 00:15:44.320
That's the only ID
you would need--

00:15:44.320 --> 00:15:46.730
it's equivalent to the rel
equals edit link when you're

00:15:46.730 --> 00:15:48.440
normally dealing
with products.

00:15:48.440 --> 00:15:54.900
And then you just submit batch
operation type equals query--

00:15:54.900 --> 00:15:57.520
so it's just like that, but
rather than type equals delete

00:15:57.520 --> 00:15:59.650
for delete, it's type
equals query.

00:15:59.650 --> 00:16:03.060
And in order to get the
performance data, the batch

00:16:03.060 --> 00:16:07.820
API URI actually will take the
same performance dot start,

00:16:07.820 --> 00:16:10.220
and performance dot end
query parameters.

00:16:10.220 --> 00:16:14.890
So you're actually able to, with
those query parameters,

00:16:14.890 --> 00:16:18.680
get the same data you'd get via
the get request that you

00:16:18.680 --> 00:16:23.060
can get through the batch URI.

00:16:23.060 --> 00:16:30.990
So the next question, also from
Andrew in Sunnyvale, says

00:16:30.990 --> 00:16:34.730
are there plans to expose views
or paid views attribute?

00:16:34.730 --> 00:16:36.700
And Andrew goes on to say,
it would be helpful in

00:16:36.700 --> 00:16:40.340
distinguishing between good
products with bad metadata and

00:16:40.340 --> 00:16:42.900
bad products with good metadata
that have the same

00:16:42.900 --> 00:16:44.040
number of clicks.

00:16:44.040 --> 00:16:46.090
Now this is something--

00:16:46.090 --> 00:16:47.150
views or impressions--

00:16:47.150 --> 00:16:49.260
is something that we've had
requested a lot, and it's

00:16:49.260 --> 00:16:51.890
something we're constantly
trying to figure out the best

00:16:51.890 --> 00:16:53.490
way to service them.

00:16:53.490 --> 00:16:56.890
So right now I have nothing to
announce and nothing to say

00:16:56.890 --> 00:17:00.940
definitively whether yes or no
they will be exposed, but it's

00:17:00.940 --> 00:17:02.330
something we're always
considering.

00:17:02.330 --> 00:17:05.319
So thanks for bringing it up,
Andrew, and again, if people

00:17:05.319 --> 00:17:07.990
really are wanting this, please
go to our shopping

00:17:07.990 --> 00:17:11.230
issues list and vote this up or
come to the forum and give

00:17:11.230 --> 00:17:11.910
us your opinions.

00:17:11.910 --> 00:17:13.710
We'd love to hear them.

00:17:13.710 --> 00:17:18.750
And the final question is from
[? StrackJS ?], John

00:17:18.750 --> 00:17:19.940
[? Strackton, ?]

00:17:19.940 --> 00:17:23.910
near London, and it asks is
there a batch option for

00:17:23.910 --> 00:17:24.700
performance data?

00:17:24.700 --> 00:17:28.870
Now, I've just answered this
question inadvertently by

00:17:28.870 --> 00:17:30.090
answering Andrew's question.

00:17:30.090 --> 00:17:33.020
So if you want to get
performance data in batch, you

00:17:33.020 --> 00:17:35.145
could just use the same query
parameters, like I mentioned,

00:17:35.145 --> 00:17:37.540
and I'll work on documenting
this.

00:17:37.540 --> 00:17:40.170
And once I do have the
documentation for it complete,

00:17:40.170 --> 00:17:44.260
I'll point everyone to where
it's been documented and I'll

00:17:44.260 --> 00:17:46.650
make a post about
it on our forum.

00:17:46.650 --> 00:17:49.490
So if we have no more questions
in our moderator

00:17:49.490 --> 00:17:51.440
queue, I'm going to end.

00:17:51.440 --> 00:17:56.210
So I'll see everybody in two
weeks from today, August 30,

00:17:56.210 --> 00:18:00.310
and thanks for submitting your
questions and I hope the new

00:18:00.310 --> 00:18:02.640
PaidClicks attribute
is helpful to you.

00:18:02.640 --> 00:18:03.410
Have a nice day.

00:18:03.410 --> 00:18:23.833
[MUSIC PLAYING]

