WEBVTT
Kind: captions
Language: en

00:00:04.680 --> 00:00:06.570
Hello, my name is
Kathryn Hurley.

00:00:06.570 --> 00:00:08.280
I'm a developer programs
engineer at

00:00:08.280 --> 00:00:10.040
Google for Compute Engine.

00:00:10.040 --> 00:00:12.420
In this session, I'm going to
show you some tips and tricks

00:00:12.420 --> 00:00:15.950
for working with Compute
Engine's metadata server.

00:00:15.950 --> 00:00:18.290
But first, what is metadata?

00:00:18.290 --> 00:00:20.620
Every Compute Engine instance
has metadata

00:00:20.620 --> 00:00:22.150
associated with it.

00:00:22.150 --> 00:00:26.240
Metadata is essentially a key
with an associated value.

00:00:26.240 --> 00:00:29.260
Instances have a set of default
metadata values,

00:00:29.260 --> 00:00:32.549
custom metadata assigned by
the user, and metadata

00:00:32.549 --> 00:00:35.150
inherited from the containing
project.

00:00:35.150 --> 00:00:38.780
Using metadata, an instance
can programmatically get

00:00:38.780 --> 00:00:42.810
information about itself, such
as its zone, machine type, or

00:00:42.810 --> 00:00:46.330
host name, information about
the owning project, such as

00:00:46.330 --> 00:00:49.170
the project ID, or custom data

00:00:49.170 --> 00:00:51.290
provided by you, the developer.

00:00:51.290 --> 00:00:54.460
For example, if you're working
with a Hadoop-like cluster,

00:00:54.460 --> 00:00:57.680
you can use custom metadata to
specify which node is the

00:00:57.680 --> 00:01:02.030
master and which nodes
are the workers.

00:01:02.030 --> 00:01:03.870
Metadata is divided
into default and

00:01:03.870 --> 00:01:05.890
custom metadata values.

00:01:05.890 --> 00:01:08.100
Default metadata is
defined and set by

00:01:08.100 --> 00:01:09.800
the metadata server.

00:01:09.800 --> 00:01:12.990
You cannot change the default
metadata values.

00:01:12.990 --> 00:01:16.920
Examples include the project ID,
the instance zone, and the

00:01:16.920 --> 00:01:18.520
instance host name.

00:01:18.520 --> 00:01:21.720
On the other hand, custom
metadata allows you to define

00:01:21.720 --> 00:01:24.280
arbitrary string key
value pairs for

00:01:24.280 --> 00:01:26.250
your instance or project.

00:01:26.250 --> 00:01:30.070
We'll take a look at how to do
this later in this video.

00:01:30.070 --> 00:01:31.890
All metadata is stored
on the Compute

00:01:31.890 --> 00:01:33.990
Engine metadata server.

00:01:33.990 --> 00:01:36.260
The metadata server is
only available from

00:01:36.260 --> 00:01:38.710
Compute Engine instances.

00:01:38.710 --> 00:01:42.163
The route URL of the metadata
server is http://metadata/

00:01:42.163 --> 00:01:43.413
computemetadata/v1beta1/.

00:01:51.070 --> 00:01:53.480
Metadata entries are available
as subpaths

00:01:53.480 --> 00:01:55.680
under this root URL.

00:01:55.680 --> 00:01:59.320
Instances have access to these
entries by making an HTTP

00:01:59.320 --> 00:02:02.720
request to the metadata
server.

00:02:02.720 --> 00:02:05.220
Metadata entries are divided
into directories

00:02:05.220 --> 00:02:08.120
and keys, AKA endpoints.

00:02:08.120 --> 00:02:11.500
Directories contain other
metadata entries, while a key

00:02:11.500 --> 00:02:13.780
maps to a specific value.

00:02:13.780 --> 00:02:16.580
You can distinguish between the
two by the trailing slash

00:02:16.580 --> 00:02:19.610
in the name, which indicates
a directory.

00:02:19.610 --> 00:02:22.680
Metadata entries provide
information about both the

00:02:22.680 --> 00:02:26.490
project and the instance.

00:02:26.490 --> 00:02:29.320
All project metadata entries
are relative to the path

00:02:29.320 --> 00:02:29.616
http://metadata/
computemetadata/

00:02:29.616 --> 00:02:30.866
v1beta1/project/.

00:02:39.440 --> 00:02:44.340
Examples include
numeric-project-ID, which is a

00:02:44.340 --> 00:02:47.380
key providing the numeric
project ID of the project

00:02:47.380 --> 00:02:51.220
owning the instance, and
attributes/, which is a

00:02:51.220 --> 00:02:54.160
directory containing a list
of custom metadata values

00:02:54.160 --> 00:02:56.110
assigned to the project.

00:02:56.110 --> 00:02:59.650
To see a full list of project
metadata entries, see the

00:02:59.650 --> 00:03:00.900
documentation here.

00:03:05.100 --> 00:03:06.910
The metadata server
also provides

00:03:06.910 --> 00:03:08.920
information about the instance.

00:03:08.920 --> 00:03:11.890
All instance metadata entries
are relative to the path

00:03:11.890 --> 00:03:12.216
http://metadata/
computemetadata/

00:03:12.216 --> 00:03:13.466
v1beta1/instance/.

00:03:22.260 --> 00:03:26.740
Examples include machine-type,
which is a key providing the

00:03:26.740 --> 00:03:31.000
machine type of the instance,
zone, which is a key providing

00:03:31.000 --> 00:03:35.130
the zone of the instance, and
attribute/, a directory

00:03:35.130 --> 00:03:38.360
containing a list of custom
metadata values assigned to

00:03:38.360 --> 00:03:39.580
the instance.

00:03:39.580 --> 00:03:43.000
To see a full list of instance
metadata entries, see the

00:03:43.000 --> 00:03:44.250
documentation here.

00:03:46.920 --> 00:03:49.090
Now that you have an
understanding of the metadata

00:03:49.090 --> 00:03:52.250
server, let's take a look
at how to use it.

00:03:52.250 --> 00:03:54.410
Throughout the remainder of this
video, I will show you

00:03:54.410 --> 00:03:57.960
how to retrieve default instance
metadata, including

00:03:57.960 --> 00:04:01.340
the machine type in zone, return
all metadata from a

00:04:01.340 --> 00:04:05.580
directory, set custom metadata
using gcutil when creating an

00:04:05.580 --> 00:04:09.890
instance, use custom metadata
in a startup script, and

00:04:09.890 --> 00:04:12.115
update metadata on a
running instance.

00:04:14.850 --> 00:04:17.290
Let's take a look at how to get
default metadata from the

00:04:17.290 --> 00:04:19.000
metadata server.

00:04:19.000 --> 00:04:22.380
I'm going to first start up
an instance using gcutil.

00:04:22.380 --> 00:04:25.040
gcutil is a command line tool
that allows you to manage your

00:04:25.040 --> 00:04:27.080
Compute Engine resources.

00:04:27.080 --> 00:04:30.920
In order to use gcutil, I'll
switch to my terminal window.

00:04:30.920 --> 00:04:35.320
To start up an instance, I
run gcutil addinstance

00:04:35.320 --> 00:04:37.210
metadata-demo.

00:04:37.210 --> 00:04:42.100
I select a zone, machine
type, and image.

00:04:42.100 --> 00:04:45.170
Keep note of the zone and
machine type I'm selecting--

00:04:45.170 --> 00:04:49.150
us-central1-b and
n1-standard-1.

00:04:49.150 --> 00:04:51.250
At this point, gcutil
waits until the

00:04:51.250 --> 00:04:52.500
instance is up and running.

00:04:55.650 --> 00:04:58.650
When the instance is running,
I can ssh into the instance

00:04:58.650 --> 00:05:01.150
using gcutil ssh command.

00:05:10.190 --> 00:05:11.980
Let's get the instance
machine type from the

00:05:11.980 --> 00:05:13.750
metadata server now.

00:05:13.750 --> 00:05:17.920
I run curl using the roots
metadata URL, plus the

00:05:17.920 --> 00:05:21.160
instance directory, plus the
machine type key to get the

00:05:21.160 --> 00:05:24.070
value of the machine type.

00:05:24.070 --> 00:05:26.970
You can see the machine type
in the output here.

00:05:26.970 --> 00:05:30.040
Now, let's get the
instance zone.

00:05:30.040 --> 00:05:31.805
You can see the zone
in the output here.

00:05:35.960 --> 00:05:39.000
Let's take a look at how to get
all the contents within a

00:05:39.000 --> 00:05:41.010
metadata directory.

00:05:41.010 --> 00:05:44.080
We can retrieve all the metadata
within a directory by

00:05:44.080 --> 00:05:46.470
adding the recursive parameter
to the end of

00:05:46.470 --> 00:05:48.330
the directory's URL.

00:05:48.330 --> 00:05:52.240
For example, let's take a look
at the instance metadata by

00:05:52.240 --> 00:05:54.930
making a curl request to the
instance directory with the

00:05:54.930 --> 00:05:57.960
recursive parameter
set to true.

00:05:57.960 --> 00:06:01.680
This recursive parameter can be
added to any directory URL

00:06:01.680 --> 00:06:06.580
to retrieve all the metadata
content within that directory.

00:06:06.580 --> 00:06:09.420
You can also set your
own custom metadata.

00:06:09.420 --> 00:06:12.760
Custom metadata allows you to
define arbitrary key value

00:06:12.760 --> 00:06:15.350
pairs for your instance
or project.

00:06:15.350 --> 00:06:19.000
Custom metadata can be achieved
similarly to how the

00:06:19.000 --> 00:06:23.890
default metadata is retrieved,
by making an HTTP request to

00:06:23.890 --> 00:06:26.150
the metadata server.

00:06:26.150 --> 00:06:28.240
As an example, let's
say you want to

00:06:28.240 --> 00:06:30.010
start a Hadoop cluster.

00:06:30.010 --> 00:06:33.490
To specify whether a node is
a master or worker, you can

00:06:33.490 --> 00:06:36.780
create a metadata key named
role, where the values are

00:06:36.780 --> 00:06:41.040
either set to master
or worker.

00:06:41.040 --> 00:06:44.800
To do so, I can use the
following gcutil commands.

00:06:44.800 --> 00:06:48.090
Notice an important flag here,
the metadata flag.

00:06:48.090 --> 00:06:50.430
This flag allows you
to set a custom

00:06:50.430 --> 00:06:52.690
metadata key value pair.

00:06:52.690 --> 00:06:57.050
In this case, I'm setting the
key role to the value master.

00:06:57.050 --> 00:07:01.070
I could instead set this key to
worker if I was starting a

00:07:01.070 --> 00:07:02.960
worker node.

00:07:02.960 --> 00:07:06.080
You can provide the metadata
flag as many times as you like

00:07:06.080 --> 00:07:09.245
to set multiple metadata
key value pairs.

00:07:14.440 --> 00:07:17.025
Once the instance has started,
I can ssh into the machine.

00:07:23.830 --> 00:07:26.850
And let's take a look at the
custom metadata value of the

00:07:26.850 --> 00:07:30.280
role key using curl.

00:07:30.280 --> 00:07:33.410
You can see the value
is master.

00:07:33.410 --> 00:07:36.370
Now that you know how to set
custom metadata, we'll take a

00:07:36.370 --> 00:07:39.320
look at how you can use this
metadata to introduce some

00:07:39.320 --> 00:07:43.140
logic when the instance starts
up to determine how the

00:07:43.140 --> 00:07:44.580
instance behaves.

00:07:44.580 --> 00:07:48.070
We can do this using something
called a startup script.

00:07:48.070 --> 00:07:49.960
What is a startup script?

00:07:49.960 --> 00:07:52.900
A startup script is a batch
script that runs when the

00:07:52.900 --> 00:07:55.100
instance boots or restarts.

00:07:55.100 --> 00:07:57.700
You specify the startup script
for the instance when the

00:07:57.700 --> 00:08:02.600
instance is created via
the API or gcutil.

00:08:02.600 --> 00:08:05.490
I have a startup script stored
locally in a file called

00:08:05.490 --> 00:08:07.410
startup.sh.

00:08:07.410 --> 00:08:10.240
Here's what the script
looks like.

00:08:10.240 --> 00:08:14.180
The second line makes an HTTP
request to the metadata server

00:08:14.180 --> 00:08:17.730
to retrieve the value of the
role key and assigns it to the

00:08:17.730 --> 00:08:19.720
variable role.

00:08:19.720 --> 00:08:22.260
The script then uses a
conditional statement to test

00:08:22.260 --> 00:08:24.020
the value of role.

00:08:24.020 --> 00:08:27.590
If it's equal to master, then
I am the master is printed.

00:08:27.590 --> 00:08:30.905
And functionality specific to
the master node is run.

00:08:30.905 --> 00:08:34.130
Note, for simplicity,
this is not shown.

00:08:34.130 --> 00:08:37.860
If role is equal to worker, then
just a worker is printed.

00:08:37.860 --> 00:08:40.289
And the worker code is run.

00:08:40.289 --> 00:08:45.950
If role is some other value, an
error message is printed.

00:08:45.950 --> 00:08:48.980
To start an instance with my
startup script, I run the

00:08:48.980 --> 00:08:51.980
gcutil addinstance command.

00:08:51.980 --> 00:08:54.980
Notice the flag, metadata
from file.

00:08:54.980 --> 00:08:58.120
This flag allows me to specify
the startup script.

00:08:58.120 --> 00:09:03.670
I set the startup-script
metadata key to startup.sh, my

00:09:03.670 --> 00:09:05.630
local startup script.

00:09:05.630 --> 00:09:08.730
I can also store my startup
script on cloud storage.

00:09:08.730 --> 00:09:12.250
In this case, I changed the flag
to just metadata and used

00:09:12.250 --> 00:09:16.400
the key startup script URL, and
specified the URL of the

00:09:16.400 --> 00:09:19.970
file on cloud storage
as the key value.

00:09:19.970 --> 00:09:22.380
You might be interested to know
that the startup script

00:09:22.380 --> 00:09:25.430
is itself metadata and
can be retrieved via

00:09:25.430 --> 00:09:26.680
the metadata server.

00:09:29.980 --> 00:09:32.870
Once the instance has started,
I ssh into the machine.

00:09:40.790 --> 00:09:44.110
Let's look at the value of
the role key using curl.

00:09:44.110 --> 00:09:47.250
You can see that the
value is master.

00:09:47.250 --> 00:09:50.180
Now let's check the output
from our startup script.

00:09:50.180 --> 00:09:53.610
To do so, I look at the
log file found at

00:09:53.610 --> 00:09:54.860
bar/log/google.log.

00:09:58.220 --> 00:10:01.430
At the end of the log, you can
see that, I am the master was

00:10:01.430 --> 00:10:03.220
printed successfully.

00:10:03.220 --> 00:10:05.850
I'll skip going through the
steps of starting the workers

00:10:05.850 --> 00:10:08.710
in the interest of time, since
they are essentially started

00:10:08.710 --> 00:10:12.100
in the same manner
as the master.

00:10:12.100 --> 00:10:15.040
Now we'll switch gears and see
how to change metadata values

00:10:15.040 --> 00:10:17.430
on an instance that's
already running.

00:10:17.430 --> 00:10:20.530
As a token example, let's change
the value of the role

00:10:20.530 --> 00:10:24.430
key from master to worker.

00:10:24.430 --> 00:10:28.340
I can use the gcutil set
instance metadata command to

00:10:28.340 --> 00:10:31.090
update my instance's
custom metadata.

00:10:31.090 --> 00:10:33.750
Here's the syntax
for the command.

00:10:33.750 --> 00:10:36.000
Note the flag fingerprints.

00:10:36.000 --> 00:10:38.200
This is a hash of
the metadata.

00:10:38.200 --> 00:10:41.340
It must equal the current
fingerprints on the instance

00:10:41.340 --> 00:10:43.460
before the update
can occur, as it

00:10:43.460 --> 00:10:45.730
performs optimistic locking.

00:10:45.730 --> 00:10:48.090
To get the current fingerprint,
I run gcutil

00:10:48.090 --> 00:10:49.340
getinstance.

00:10:51.100 --> 00:10:54.100
The output displays the current
metadata fingerprints.

00:10:54.100 --> 00:10:56.310
I'll copy this value
to use in the set

00:10:56.310 --> 00:10:57.740
instance metadata command.

00:11:01.210 --> 00:11:04.680
Now I can run gcutil set
instance metadata to update my

00:11:04.680 --> 00:11:07.135
role value to worker.

00:11:20.240 --> 00:11:24.100
To confirm that this worked,
I use gcutil getinstance to

00:11:24.100 --> 00:11:26.570
retrieve the metadata.

00:11:26.570 --> 00:11:29.160
You can see here that the
role metadata key is

00:11:29.160 --> 00:11:32.850
now equal to worker.

00:11:32.850 --> 00:11:36.090
In this video, I showed you just
some of the cool things

00:11:36.090 --> 00:11:39.080
you can do with the metadata
server, including how to

00:11:39.080 --> 00:11:42.060
retrieve default instance
metadata, including the

00:11:42.060 --> 00:11:46.210
machine type and zone, return
all metadata from a directory,

00:11:46.210 --> 00:11:50.150
set custom metadata using
gcutil, use custom metadata in

00:11:50.150 --> 00:11:52.520
a startup script, and
update metadata

00:11:52.520 --> 00:11:54.470
on a running instance.

00:11:54.470 --> 00:11:57.500
There are many more neat
features of the metadata

00:11:57.500 --> 00:12:01.610
server, including the wait for
change metadata URL parameter

00:12:01.610 --> 00:12:04.570
and custom metadata at
the project level.

00:12:04.570 --> 00:12:06.400
Check out the documentation
for more information.

