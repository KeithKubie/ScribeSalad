WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:00.575
PAUL IRISH: Hi.

00:00:00.575 --> 00:00:03.640
I want to share with you guys
a few JavaScript APIs you

00:00:03.640 --> 00:00:05.366
might not be too
familiar with.

00:00:05.366 --> 00:00:07.970
I'm going to list them right
here in this page.

00:00:07.970 --> 00:00:10.800
I'm just going to
chuck them in.

00:00:10.800 --> 00:00:14.370
Add content editable to this
h1, paste them in.

00:00:14.370 --> 00:00:15.720
This works for now.

00:00:15.720 --> 00:00:19.050
The first one is classList.
After that we're going to talk

00:00:19.050 --> 00:00:21.980
about dataset, matchMedia,
textContent, matchesSelector.

00:00:21.980 --> 00:00:23.540
We'll get right into it.

00:00:23.540 --> 00:00:26.190
ClassList is a better API for
dealing with the class name of

00:00:26.190 --> 00:00:26.930
an element.

00:00:26.930 --> 00:00:28.660
Normally we do a lot of stream
manipulation, and

00:00:28.660 --> 00:00:29.330
it's not so much fun.

00:00:29.330 --> 00:00:33.035
But classList gives us an API
that we really deserve.

00:00:33.035 --> 00:00:37.930
So I'm going to go over here
to this panel over here.

00:00:37.930 --> 00:00:41.400
You can see that this li has
a class of Selected on it.

00:00:41.400 --> 00:00:43.350
And it gives us this light
blue background.

00:00:43.350 --> 00:00:46.000
Now, I want to add that
class to another one.

00:00:46.000 --> 00:00:49.970
So I'm going to bring up the
console by hitting Escape, and

00:00:49.970 --> 00:00:52.510
I'm going to be using a
shortcut, $ 0, just refers to

00:00:52.510 --> 00:00:56.190
whatever element I have
selected right here.

00:00:56.190 --> 00:01:03.850
So $0.classList.add('selected'),

00:01:03.850 --> 00:01:04.680
now, there it is.

00:01:04.680 --> 00:01:07.170
It just adds the class
of Selected.

00:01:07.170 --> 00:01:11.680
I could also add,
let's say, OK.

00:01:11.680 --> 00:01:17.330
Now, as you can imagine,
a remove also works.

00:01:17.330 --> 00:01:20.860
So I can remove my selected
class back.

00:01:20.860 --> 00:01:26.280
And of course, a toggle, so I
can toggle that on and off.

00:01:26.280 --> 00:01:31.210
As you can see, the class is
being toggled, as is the nice

00:01:31.210 --> 00:01:32.970
blue background.

00:01:32.970 --> 00:01:34.790
So that's about it.

00:01:34.790 --> 00:01:36.570
Next is elem.dataset.

00:01:36.570 --> 00:01:38.770
I'm going to go over to
this page right here.

00:01:38.770 --> 00:01:42.080
This is a page of talks that
my team has done lately.

00:01:42.080 --> 00:01:47.670
And each of the talks in the
markup that we're using here,

00:01:47.670 --> 00:01:50.000
we're using a bunch of
article elements.

00:01:50.000 --> 00:01:52.560
And on each of the article
elements we use

00:01:52.560 --> 00:01:54.370
an HTML5 data attribute.

00:01:54.370 --> 00:01:58.120
And it says data event, and it
lists out the event name.

00:01:58.120 --> 00:02:01.330
I like that for CSS selectors
and giving a

00:02:01.330 --> 00:02:02.800
nice styling hook.

00:02:02.800 --> 00:02:04.270
So let's see.

00:02:04.270 --> 00:02:06.686
I'm going to reference
this element again.

00:02:06.686 --> 00:02:09.680
And the old way of getting
at this is Get Attribute.

00:02:09.680 --> 00:02:12.751
And I could get my attribute
with data.event.

00:02:16.360 --> 00:02:17.560
That works.

00:02:17.560 --> 00:02:20.230
But we also now have dataset.

00:02:20.230 --> 00:02:23.440
So I can say dataset and go
straight to event, and that

00:02:23.440 --> 00:02:24.980
returns back that string.

00:02:24.980 --> 00:02:26.630
I'm going to add in
one more here.

00:02:26.630 --> 00:02:28.050
So we're going to add
in data.place-name.

00:02:30.852 --> 00:02:34.895
Oh, probably need to
give it a value.

00:02:34.895 --> 00:02:36.145
I'll say Brazil.

00:02:38.550 --> 00:02:42.540
Now, one thing you should be
aware of is that, if you are

00:02:42.540 --> 00:02:46.040
using an extra hyphen, it'll be
camelCased over in dataset.

00:02:46.040 --> 00:02:47.880
So just be aware of that.

00:02:47.880 --> 00:02:50.190
But the cool thing about dataset
is that you ask for

00:02:50.190 --> 00:02:52.580
just it, and you get back this
DOM string map which is

00:02:52.580 --> 00:02:55.300
essentially an object which
just has all the data

00:02:55.300 --> 00:02:55.565
attributes.

00:02:55.565 --> 00:02:57.580
So it kind of collects them,
rounds them up, and gives it

00:02:57.580 --> 00:02:58.900
back to you as an object.

00:02:58.900 --> 00:03:01.300
It's really nice.

00:03:01.300 --> 00:03:04.650
The next is window.matchMedia.

00:03:04.650 --> 00:03:06.760
Now this is kind of a fun one.

00:03:06.760 --> 00:03:09.010
So I'm going to type in
window.matchMedia.

00:03:09.010 --> 00:03:12.300
So this basically is a
JavaScript API for testing to

00:03:12.300 --> 00:03:16.130
see if a certain media query,
a media query that we use in

00:03:16.130 --> 00:03:18.380
CSS, if that's going to pass.

00:03:18.380 --> 00:03:19.940
But now you can see
it in JavaScript.

00:03:19.940 --> 00:03:22.570
So I'm going to type out
only screen, and max

00:03:22.570 --> 00:03:26.456
width is 700 pixels.

00:03:26.456 --> 00:03:28.410
I think that's about right.

00:03:28.410 --> 00:03:31.045
It returns back this media query
list object, which is a

00:03:31.045 --> 00:03:34.140
little funky, but the thing that
we're most interested in

00:03:34.140 --> 00:03:36.800
is the matches attributes.

00:03:36.800 --> 00:03:40.770
So currently, this media query,
if I had this in my

00:03:40.770 --> 00:03:43.220
style sheet, this would
not be passing.

00:03:43.220 --> 00:03:46.580
Let me try resizing my
window a little bit.

00:03:46.580 --> 00:03:49.130
No, we're not passing yet.

00:03:49.130 --> 00:03:53.060
OK, so we've now reduced the
window to less than 700

00:03:53.060 --> 00:03:54.950
pixels, so that's
going to pass.

00:03:54.950 --> 00:03:56.380
So, anyways, there's
matchMedia.

00:03:56.380 --> 00:03:59.630
Test out your media queries.

00:03:59.630 --> 00:04:01.320
Next is textContent.

00:04:01.320 --> 00:04:03.650
And textContent's been around
for a little while, but I just

00:04:03.650 --> 00:04:05.400
want to cover it real quick.

00:04:05.400 --> 00:04:10.440
TextContent is an API for just
seeing, what is the text value

00:04:10.440 --> 00:04:12.290
of a DOM subtree?

00:04:12.290 --> 00:04:15.180
So I'm going to ask for
the textContent of

00:04:15.180 --> 00:04:17.100
this photo down here.

00:04:17.100 --> 00:04:21.269
And here we get back
just the text that

00:04:21.269 --> 00:04:23.500
your users are seeing.

00:04:23.500 --> 00:04:30.060
This is somewhat similar to the
innerText attribute that

00:04:30.060 --> 00:04:32.590
is also on DOM elements.

00:04:32.590 --> 00:04:34.920
But there is a small
difference.

00:04:34.920 --> 00:04:37.760
Where inner text is cognizant
of the styles that you're

00:04:37.760 --> 00:04:40.860
applying, and let's say an
element in here was display

00:04:40.860 --> 00:04:44.170
none, innerText would not return
that in its result,

00:04:44.170 --> 00:04:46.620
whereas text content would.

00:04:46.620 --> 00:04:47.990
So there's a slight difference,
but most of the

00:04:47.990 --> 00:04:49.370
time it doesn't matter
too much.

00:04:49.370 --> 00:04:51.250
TextContent is supported
in IE9 and

00:04:51.250 --> 00:04:53.010
absolutely every other browser.

00:04:53.010 --> 00:04:54.900
So you're good to use it.

00:04:54.900 --> 00:04:57.740
The last one I want to show
is matchesSelector.

00:04:57.740 --> 00:04:59.220
This is a really fun one.

00:04:59.220 --> 00:05:00.030
So I'm going to go down here.

00:05:00.030 --> 00:05:02.480
And these links, this little
table contents, I'm going to

00:05:02.480 --> 00:05:04.340
select one of these.

00:05:04.340 --> 00:05:07.860
So this link--

00:05:07.860 --> 00:05:08.400
the element--

00:05:08.400 --> 00:05:11.540
And I call matchesSelector
on it.

00:05:11.540 --> 00:05:14.810
Currently, this is prefixed, so
it's webkitMatchesSelector,

00:05:14.810 --> 00:05:17.900
or in Firefox it's
mozMatchesSelector.

00:05:17.900 --> 00:05:23.130
And so I'm going to ask, hey,
does this element--

00:05:23.130 --> 00:05:25.890
would it match against
the selector like, A?

00:05:25.890 --> 00:05:27.100
And it would.

00:05:27.100 --> 00:05:29.150
Because it's an A tag.

00:05:29.150 --> 00:05:31.960
Whereas it's not an li,
so this is false.

00:05:31.960 --> 00:05:40.470
It is an A inside of an li,
and it's also ol.toc li A

00:05:40.470 --> 00:05:42.270
should be true, because--

00:05:42.270 --> 00:05:43.910
here we go.

00:05:43.910 --> 00:05:44.870
So that's pretty cool.

00:05:44.870 --> 00:05:47.340
Where this comes in really
handy is over in event

00:05:47.340 --> 00:05:48.870
delegation.

00:05:48.870 --> 00:05:51.200
So I'm going to bring up a
little bit of code right here.

00:05:51.200 --> 00:05:53.750
So what we have here
is a little bit of

00:05:53.750 --> 00:05:54.850
event delegation code.

00:05:54.850 --> 00:05:57.730
We're going to bind a click
handler to the document.

00:05:57.730 --> 00:06:01.100
And what we want to do here
is, if I click on of these

00:06:01.100 --> 00:06:05.240
links, I want to do a smooth
scroll down the page, down to

00:06:05.240 --> 00:06:08.168
wherever this content is.

00:06:08.168 --> 00:06:10.740
But here's the tricky part.

00:06:10.740 --> 00:06:14.660
We need to figure out, wherever
we click, what is

00:06:14.660 --> 00:06:17.230
that element, and does that
element match the thing that

00:06:17.230 --> 00:06:18.310
we're targeting?

00:06:18.310 --> 00:06:22.070
So I'm going to write this out,
but I'm going to kind of

00:06:22.070 --> 00:06:23.270
cheat a little bit.

00:06:23.270 --> 00:06:25.190
I'm just going to steal this
code right here, this

00:06:25.190 --> 00:06:26.265
matchesSelector.

00:06:26.265 --> 00:06:29.280
But we need an element here
to base that off of.

00:06:29.280 --> 00:06:32.300
What we're going to do is we're
just going to grab this

00:06:32.300 --> 00:06:35.530
event object that was passed
into the listener.

00:06:35.530 --> 00:06:38.630
And I'm going to grab the
target off of that.

00:06:38.630 --> 00:06:42.440
And that refers to whatever
element initially received

00:06:42.440 --> 00:06:43.720
that click.

00:06:43.720 --> 00:06:47.100
And so event.target, we want
to see if that matches a

00:06:47.100 --> 00:06:50.000
selector, which indicates that
it is indeed one of these.

00:06:50.000 --> 00:06:51.540
And if it is then we're
going to do a

00:06:51.540 --> 00:06:55.020
smooth scroll for alert.

00:06:55.020 --> 00:06:57.200
Otherwise, do nothing.

00:06:57.200 --> 00:07:00.450
So I'm just going
to try that out.

00:07:00.450 --> 00:07:02.730
OK, that seemed to work.

00:07:02.730 --> 00:07:05.180
And I click other places,
nothing is happening.

00:07:05.180 --> 00:07:09.100
I click on these
guys, and yes.

00:07:09.100 --> 00:07:10.620
OK, that's it.

00:07:10.620 --> 00:07:13.850
So anyways, five APIs, hope
you're a little bit more

00:07:13.850 --> 00:07:14.640
familiar with them now.

00:07:14.640 --> 00:07:16.730
And I hope to see
you using them.

00:07:16.730 --> 00:07:17.980
Thanks.

