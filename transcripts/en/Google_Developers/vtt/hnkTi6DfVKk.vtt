WEBVTT
Kind: captions
Language: en

00:00:00.499 --> 00:00:04.300
Hi, I'm Jen Kovnats, product
manager on the Google Maps API.

00:00:04.300 --> 00:00:06.130
There are a million
websites out there

00:00:06.130 --> 00:00:07.590
that have a Google map on them.

00:00:07.590 --> 00:00:10.155
These have been built using
the JavaScripts Maps API.

00:00:10.155 --> 00:00:12.530
They're helping people figure
out where to go for dinner,

00:00:12.530 --> 00:00:13.984
show off their
marathon training,

00:00:13.984 --> 00:00:15.400
or keep up to date
with the latest

00:00:15.400 --> 00:00:17.400
news on natural disasters.

00:00:17.400 --> 00:00:20.290
A map is a great tool to
help your users visualize

00:00:20.290 --> 00:00:21.570
the world around them.

00:00:21.570 --> 00:00:23.300
And the Google
Maps JavaScript API

00:00:23.300 --> 00:00:25.230
lets you craft and
mold these maps,

00:00:25.230 --> 00:00:28.700
presenting your own data in
beautiful and compelling ways.

00:00:28.700 --> 00:00:32.210
Maps can be used just to plot a
single feature or a whole host

00:00:32.210 --> 00:00:33.320
of data.

00:00:33.320 --> 00:00:35.230
If you plan to include
a map on your website

00:00:35.230 --> 00:00:37.235
to display more than a
single feature at a time,

00:00:37.235 --> 00:00:39.360
then you might be very
interested in using the Data

00:00:39.360 --> 00:00:42.390
Layer in the
JavaScript Maps API.

00:00:42.390 --> 00:00:44.870
The Data Layer gives you a
way to structure and visualize

00:00:44.870 --> 00:00:46.480
your geographic
data sets and has

00:00:46.480 --> 00:00:48.644
built in support for GeoJSON.

00:00:48.644 --> 00:00:51.060
Now, let's dive into some demos
that show just how easy it

00:00:51.060 --> 00:00:53.720
is to map and work with data
sets using the Data Layer,

00:00:53.720 --> 00:00:56.800
as an example of what
you can do yourself.

00:00:56.800 --> 00:00:59.180
Say we wanted to build a
map to show how earthquakes

00:00:59.180 --> 00:01:01.250
are distributed
across the globe.

00:01:01.250 --> 00:01:03.760
We would go over to the United
States Geological Survey's

00:01:03.760 --> 00:01:06.430
website and grab a GeoJSON
file containing information

00:01:06.430 --> 00:01:09.197
on every earthquake in the
world over the last 24 hours.

00:01:09.197 --> 00:01:11.280
It would contain useful
context, like the location

00:01:11.280 --> 00:01:13.744
and the magnitude
of each earthquake.

00:01:13.744 --> 00:01:15.160
Now, with a data
set of this size,

00:01:15.160 --> 00:01:17.392
I'd usually have to
parse the GeoJSON myself,

00:01:17.392 --> 00:01:19.100
instantiate a marker
for each earthquake,

00:01:19.100 --> 00:01:21.110
and then plot them all
on the map individually.

00:01:21.110 --> 00:01:23.900
But using the Data Layer,
I can load and visualize

00:01:23.900 --> 00:01:26.160
the data on the map in
just one line of code.

00:01:26.160 --> 00:01:27.494
Ta-da!

00:01:27.494 --> 00:01:29.660
The beauty of the Data Layer
is that it provides you

00:01:29.660 --> 00:01:32.667
the structure to let you handle
your set of data like a set.

00:01:32.667 --> 00:01:35.000
You don't have to go through
the hassle of hand-crafting

00:01:35.000 --> 00:01:37.920
a version of collections over
and over again just to handle

00:01:37.920 --> 00:01:40.620
simple things like
instantiation, iteration,

00:01:40.620 --> 00:01:43.110
and the ongoing manipulation
of data-- hence,

00:01:43.110 --> 00:01:45.540
the single line of code.

00:01:45.540 --> 00:01:48.040
The other thing that it's doing
is loading data onto the map

00:01:48.040 --> 00:01:50.941
directly from GeoJSON
at full fidelity.

00:01:50.941 --> 00:01:52.440
Let's take a look
at another example

00:01:52.440 --> 00:01:54.837
that takes full
advantage of this.

00:01:54.837 --> 00:01:56.670
So the next thing I
wanted to do is not just

00:01:56.670 --> 00:01:58.830
see where the earthquakes
were but also get

00:01:58.830 --> 00:02:00.880
a sense of their size.

00:02:00.880 --> 00:02:04.340
This was really easy to do by
setting a simple styling rule.

00:02:04.340 --> 00:02:06.720
It basically goes,
hey, Data Layer,

00:02:06.720 --> 00:02:09.139
make each point into a
circle where the radius

00:02:09.139 --> 00:02:11.330
scales with the
magnitude of each quake.

00:02:11.330 --> 00:02:12.256
And it just did it.

00:02:12.256 --> 00:02:14.630
I didn't have to iterate
through all the features myself.

00:02:14.630 --> 00:02:17.760
Instead, I was able to set
the style declaratively.

00:02:17.760 --> 00:02:20.359
This makes my code really clean.

00:02:20.359 --> 00:02:21.900
The other thing
that's happening here

00:02:21.900 --> 00:02:24.090
is that the Data Layer still
contains the properties

00:02:24.090 --> 00:02:26.790
that the original
GeoJSON file came with.

00:02:26.790 --> 00:02:28.300
Prior to the Data
Layer, the minute

00:02:28.300 --> 00:02:29.720
you would load
data onto a map, it

00:02:29.720 --> 00:02:31.720
was reduced to just
what you could see.

00:02:31.720 --> 00:02:34.700
You'd have features, their
icons, styles, the location,

00:02:34.700 --> 00:02:37.250
maybe some content
for the Info window.

00:02:37.250 --> 00:02:38.750
But things in the
real world usually

00:02:38.750 --> 00:02:40.390
have so many other properties.

00:02:40.390 --> 00:02:42.080
This is really valuable
pieces of data,

00:02:42.080 --> 00:02:43.830
and you might want to
use them in creating

00:02:43.830 --> 00:02:47.140
how your map looks and feels.

00:02:47.140 --> 00:02:51.330
Let's take a moment to jump into
the wonderful world of GeoJSON.

00:02:51.330 --> 00:02:54.040
GeoJSON is great to work with.

00:02:54.040 --> 00:02:56.430
There are a lot of formats
out there for geographic data.

00:02:56.430 --> 00:02:59.670
Some of the biggies are
KML, Shapefiles, GeoRSS,

00:02:59.670 --> 00:03:01.320
and GeoJSON.

00:03:01.320 --> 00:03:03.120
Personally, I like
working with GeoJSON

00:03:03.120 --> 00:03:06.380
because it's so easy to read and
edit and just mentally parse.

00:03:06.380 --> 00:03:07.880
It's an open standard
that's emerged

00:03:07.880 --> 00:03:09.671
as a favorite for
sharing and collaborating

00:03:09.671 --> 00:03:11.610
on geographic data online.

00:03:11.610 --> 00:03:13.890
Now, if you're
familiar with GeoJSON,

00:03:13.890 --> 00:03:17.180
then the structure of GeoJSON
should be pretty easy to grok.

00:03:17.180 --> 00:03:19.830
Notice that you have a set
of features, each of which

00:03:19.830 --> 00:03:22.790
is a geometry-- this can be
points, lines, and polygons--

00:03:22.790 --> 00:03:25.070
and an arbitrary
set of properties.

00:03:25.070 --> 00:03:27.530
For me, it's really
in these properties

00:03:27.530 --> 00:03:29.840
that make the combination of
GeoJSON and the Data Layer

00:03:29.840 --> 00:03:31.400
super powerful.

00:03:31.400 --> 00:03:33.390
When we first loaded
the earthquakes' GeoJSON

00:03:33.390 --> 00:03:35.770
file on the map, these
properties were preserved.

00:03:35.770 --> 00:03:38.030
So in the last example,
that magnitude information

00:03:38.030 --> 00:03:40.430
for each earthquake was
actually loaded and used

00:03:40.430 --> 00:03:43.550
in the map to size
the circle icons.

00:03:43.550 --> 00:03:45.630
It wasn't just thrown away.

00:03:45.630 --> 00:03:47.380
So jumping back to the
demo, another thing

00:03:47.380 --> 00:03:49.260
I wanted to point out is that
the beauty of the declarative

00:03:49.260 --> 00:03:51.160
styling approach
is it's really easy

00:03:51.160 --> 00:03:52.800
to set a number of
style rules at once.

00:03:52.800 --> 00:03:55.660
All you have to do
is add another rule.

00:03:55.660 --> 00:03:58.340
Again, in this case, we're
setting the size in addition

00:03:58.340 --> 00:03:59.700
to the color.

00:03:59.700 --> 00:04:02.190
My code is really clean.

00:04:02.190 --> 00:04:03.900
The Data Layer also
makes combining data

00:04:03.900 --> 00:04:05.880
from a few different
sources really easy

00:04:05.880 --> 00:04:07.840
and can be used for
any kind of geometry.

00:04:07.840 --> 00:04:10.650
Let's look at another
demo to show this off.

00:04:10.650 --> 00:04:13.342
So in this map, we wanted to do
a visual analysis of education

00:04:13.342 --> 00:04:15.730
levels across the United States.

00:04:15.730 --> 00:04:17.620
So first, we loaded
the geometries

00:04:17.620 --> 00:04:20.459
for each state in the US from
Google Maps Engine via its API,

00:04:20.459 --> 00:04:22.150
and it returns GeoJSON.

00:04:22.150 --> 00:04:25.470
Using the Data Layer, we could
draw these polygons on the map.

00:04:25.470 --> 00:04:28.010
Then we loaded the
US Census Bureau data

00:04:28.010 --> 00:04:30.510
on high school education
levels by state.

00:04:30.510 --> 00:04:32.600
By mixing these two
sources of information,

00:04:32.600 --> 00:04:34.560
we were able to color
our states based

00:04:34.560 --> 00:04:37.047
on their levels of
high school education.

00:04:37.047 --> 00:04:39.630
And what's really nice is that
because the Data Layer is drawn

00:04:39.630 --> 00:04:41.171
in the client, we
can make it dynamic

00:04:41.171 --> 00:04:44.210
and interactive by adding
lovely hover effects.

00:04:44.210 --> 00:04:46.830
You should try this yourself.

00:04:46.830 --> 00:04:49.450
It's worth pointing out too that
while GeoJSON is really cool,

00:04:49.450 --> 00:04:51.740
you can also create Data
Layers manually and add data

00:04:51.740 --> 00:04:53.990
to them programmatically,
regardless of what format

00:04:53.990 --> 00:04:55.245
the data started in.

00:04:55.245 --> 00:04:57.870
You might want this if you like
the sound of handling your data

00:04:57.870 --> 00:04:59.411
sets as objects and
if you want to do

00:04:59.411 --> 00:05:01.560
declarative styling on them.

00:05:01.560 --> 00:05:03.770
The Data Layer is
a developer's tool.

00:05:03.770 --> 00:05:07.690
It's designed to make your code
cleaner and your life easier.

00:05:07.690 --> 00:05:09.800
So if you're creating a
map to show a data set,

00:05:09.800 --> 00:05:11.299
the magic of the
Data Layer is going

00:05:11.299 --> 00:05:14.160
to give you consistent structure
and hooks for your data,

00:05:14.160 --> 00:05:16.960
unlocking things like
declarative styling, semantics

00:05:16.960 --> 00:05:19.921
of the data load right in the
map, by way of properties,

00:05:19.921 --> 00:05:21.920
enabling you to use this
information in crafting

00:05:21.920 --> 00:05:24.190
the map, and native
GeoJSON support,

00:05:24.190 --> 00:05:28.940
which makes loading a data set
ridiculously fast and easy.

00:05:28.940 --> 00:05:31.600
Take a look at the Data Layer
documentation link to here

00:05:31.600 --> 00:05:33.060
to get started.

00:05:33.060 --> 00:05:35.030
One of our teammates
wrote a great walk-through

00:05:35.030 --> 00:05:36.890
of the US Census demo.

00:05:36.890 --> 00:05:39.660
The code for all the rest of
the demos can be found here.

00:05:39.660 --> 00:05:42.294
And do take a look at
GeoJSON.io, a website that

00:05:42.294 --> 00:05:44.210
lets you generate GeoJSON
on the fly with just

00:05:44.210 --> 00:05:46.860
a couple simple drawing tools.

00:05:46.860 --> 00:05:47.874
Thanks for listening.

00:05:47.874 --> 00:05:50.290
Check us out on Google+, or
Tweet at us if you have a cool

00:05:50.290 --> 00:05:51.664
project that uses
the Data Layer.

00:05:51.664 --> 00:05:52.990
We would love to see it.

00:05:52.990 --> 00:05:54.540
Cheers.

