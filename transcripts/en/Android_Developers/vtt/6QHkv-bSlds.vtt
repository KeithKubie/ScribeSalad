WEBVTT
Kind: captions
Language: en

00:00:07.632 --> 00:00:10.090
ROMAN NURIK: Hello and welcome
to Android Design in Action.

00:00:10.090 --> 00:00:11.140
I'm your host, Roman Nurik.

00:00:11.140 --> 00:00:12.015
ADAM KOCH: Hey, guys.

00:00:12.015 --> 00:00:13.780
My name's Adam Koch.

00:00:13.780 --> 00:00:15.480
NICK BUTCHER: And,
hi, I'm Nick Butcher.

00:00:15.480 --> 00:00:17.390
ROMAN NURIK: And today, in
our special episode of Android

00:00:17.390 --> 00:00:20.130
Design in Action-- I feel like I
say special episode every week,

00:00:20.130 --> 00:00:20.630
but--

00:00:20.630 --> 00:00:22.550
ADAM KOCH: That's because it is
a special episode every week.

00:00:22.550 --> 00:00:23.758
ROMAN NURIK: --yeah, I guess.

00:00:23.758 --> 00:00:26.360
But this week, it's actually
a very special episode.

00:00:26.360 --> 00:00:27.943
We're going to be
talking about what's

00:00:27.943 --> 00:00:32.049
new in Android 4.4 KitKat, which
was just recently announced.

00:00:32.049 --> 00:00:34.770
We're going to talk through
a couple of specific changes,

00:00:34.770 --> 00:00:37.520
a couple of new design
guidelines, updates

00:00:37.520 --> 00:00:40.130
that all designers
should be aware of when

00:00:40.130 --> 00:00:43.350
planning for Android 4.4 KitKat.

00:00:43.350 --> 00:00:47.620
So, without further ado,
let's jump into the content.

00:00:47.620 --> 00:00:50.890
So the very first thing we
should probably talk about

00:00:50.890 --> 00:00:54.050
is the new Nexus 5.

00:00:54.050 --> 00:00:57.350
As with every platform
release for Android,

00:00:57.350 --> 00:01:00.830
there's usually a lead device,
as we call it, I guess,

00:01:00.830 --> 00:01:01.540
that comes out.

00:01:01.540 --> 00:01:04.319
And it's kind of the showcase
device for that platform

00:01:04.319 --> 00:01:05.489
release.

00:01:05.489 --> 00:01:08.900
I think for Android 4.2,
it was the-- what was it,

00:01:08.900 --> 00:01:11.890
the Nexus 4 or the Nexus
10-- I forget already.

00:01:11.890 --> 00:01:16.820
And then for Android 4.3, it
was the Nexus 7, 2013 edition.

00:01:16.820 --> 00:01:21.057
But anyway, so for Android
4.4, it's the Nexus 5.

00:01:21.057 --> 00:01:22.640
And the Nexus 5, as
you might imagine,

00:01:22.640 --> 00:01:24.280
is about a five inch device.

00:01:24.280 --> 00:01:28.247
I think it's like something
like 4.95 inches diagonally.

00:01:28.247 --> 00:01:30.330
But here's some of the
interesting characteristics

00:01:30.330 --> 00:01:33.904
that you don't really get from
the spec sheet, if you will.

00:01:33.904 --> 00:01:35.320
These are
characteristics that are

00:01:35.320 --> 00:01:37.130
very important for designers.

00:01:37.130 --> 00:01:40.610
So the first is that it's
5 inches, so it's a phone.

00:01:40.610 --> 00:01:44.330
It's very obviously a phone,
not really a tablet at all.

00:01:44.330 --> 00:01:47.290
But next, I think is a
very important point here,

00:01:47.290 --> 00:01:50.700
is the screen resolution in
density-independent pixels.

00:01:50.700 --> 00:01:53.597
So, as most of you know,
anytime you're designing layouts

00:01:53.597 --> 00:01:55.180
or things like that,
you should really

00:01:55.180 --> 00:01:57.790
be thinking in terms of
density-independent pixels,

00:01:57.790 --> 00:02:00.030
rather than just
regular pixel units,

00:02:00.030 --> 00:02:01.900
because that more
accurately represents

00:02:01.900 --> 00:02:04.220
the size of the device,
which is very important,

00:02:04.220 --> 00:02:06.590
obviously, for layout purposes.

00:02:06.590 --> 00:02:11.810
So the screen size of the
Nexus 5 is 640 by 360 dp.

00:02:11.810 --> 00:02:14.510
And that's actually
the same exact screen

00:02:14.510 --> 00:02:16.780
size in dp as the Galaxy Nexus.

00:02:16.780 --> 00:02:19.562
It's a little more
narrow than the Nexus 4,

00:02:19.562 --> 00:02:21.270
but that's kind of
the screen size there.

00:02:21.270 --> 00:02:23.150
And then the last
bit of information

00:02:23.150 --> 00:02:26.400
here is the logical
density of the device.

00:02:26.400 --> 00:02:30.560
Now the screen itself is
about 440 points per inch,

00:02:30.560 --> 00:02:31.590
or dots per inch.

00:02:31.590 --> 00:02:35.450
But the logical density,
as you guys probably know,

00:02:35.450 --> 00:02:37.910
we actually use density buckets.

00:02:37.910 --> 00:02:44.540
The logical density of the
device is XXHDPI, or 480 dpi.

00:02:44.540 --> 00:02:46.630
So, if you're
creating assets now,

00:02:46.630 --> 00:02:50.750
if you're creating
assets for your apps,

00:02:50.750 --> 00:02:52.680
you should definitely
start thinking about--

00:02:52.680 --> 00:02:55.138
and actually, if you haven't
already been thinking about it

00:02:55.138 --> 00:02:57.950
because of other devices like
the Galaxy S4, or the HTC One,

00:02:57.950 --> 00:03:00.420
you should definitely start
thinking about XXHDPI,

00:03:00.420 --> 00:03:04.010
as the highest density assets.

00:03:04.010 --> 00:03:05.920
So before we move on,
anything else you guys

00:03:05.920 --> 00:03:08.854
want to say about the Nexus 5?

00:03:08.854 --> 00:03:10.020
ADAM KOCH: Nope, not really.

00:03:10.020 --> 00:03:10.930
It's a great device.

00:03:10.930 --> 00:03:11.929
ROMAN NURIK: Yeah, and--

00:03:11.929 --> 00:03:14.110
NICK BUTCHER: Yeah, the
screen is incredibly crisp.

00:03:14.110 --> 00:03:16.110
ROMAN NURIK: Yeah,
it's pretty amazing.

00:03:16.110 --> 00:03:18.580
Reading text on
the screen is just

00:03:18.580 --> 00:03:20.230
a really, really
great experience.

00:03:20.230 --> 00:03:21.720
It's beautiful.

00:03:21.720 --> 00:03:22.540
Here's the Nexus.

00:03:22.540 --> 00:03:24.500
We have a couple of Nexus
5's, but here it is.

00:03:24.500 --> 00:03:27.080
I'm sure you guys will see in
stores and all that, whatever.

00:03:27.080 --> 00:03:30.612
Anyway, let's move
on to branding.

00:03:30.612 --> 00:03:32.320
Nick, do you want to
talk about branding?

00:03:35.089 --> 00:03:36.380
NICK BUTCHER: Yeah, absolutely.

00:03:36.380 --> 00:03:39.530
So one of the
changes in KitKat is

00:03:39.530 --> 00:03:41.880
we've really tried
to move the system

00:03:41.880 --> 00:03:45.220
UI into a more kind
of neutral tone.

00:03:45.220 --> 00:03:48.640
So what I mean by that is in
prior releases of Android,

00:03:48.640 --> 00:03:52.523
we often used a very kind of
strong blue accent color, which

00:03:52.523 --> 00:03:56.200
you might have seen
in the status bar

00:03:56.200 --> 00:03:58.650
where the notification
icons go-- so the signal

00:03:58.650 --> 00:04:00.720
strength, and battery,
and so forth--

00:04:00.720 --> 00:04:03.680
as well as the default kind
of pressed state color.

00:04:03.680 --> 00:04:06.640
Whenever you touch on any
item, or radio button,

00:04:06.640 --> 00:04:08.630
check boxes, and so
forth, they would

00:04:08.630 --> 00:04:12.780
have this very
high contrast blue.

00:04:12.780 --> 00:04:16.480
So the problem with that
was that it could very well

00:04:16.480 --> 00:04:18.820
clash with the branding
and the coloring

00:04:18.820 --> 00:04:23.130
which you were trying to bring
to your app's personality.

00:04:23.130 --> 00:04:29.350
So in Android 4.4, we've really
toned back this color palette

00:04:29.350 --> 00:04:33.500
that the OS uses in order to
let the applications stand out

00:04:33.500 --> 00:04:35.460
and show their
own personalities.

00:04:35.460 --> 00:04:37.760
So the OS really
does get out the way

00:04:37.760 --> 00:04:39.950
and doesn't impose
its own personality

00:04:39.950 --> 00:04:41.470
within your application.

00:04:41.470 --> 00:04:44.460
And so you'll see this
throughout the application

00:04:44.460 --> 00:04:47.410
in the notification
icon scheme, changing

00:04:47.410 --> 00:04:52.390
to this muted gray and
white color, as well as

00:04:52.390 --> 00:04:56.650
the change in the default
touch highlight states.

00:04:56.650 --> 00:05:00.680
So, as before, the
idea of this is really

00:05:00.680 --> 00:05:02.930
to allow you to bring your
own personality to the app.

00:05:02.930 --> 00:05:04.650
So as we've called
out here on the slide,

00:05:04.650 --> 00:05:06.140
there's some tools
out there, such

00:05:06.140 --> 00:05:09.640
as android.holo-colors.com,
which will help you to marry

00:05:09.640 --> 00:05:13.630
the Holo digital theme, the
look and feel of the buttons

00:05:13.630 --> 00:05:16.462
and check boxes and so forth,
with your own brand accent

00:05:16.462 --> 00:05:17.747
colors.

00:05:17.747 --> 00:05:20.080
ROMAN NURIK: I'm having trouble
zooming for some reason.

00:05:20.080 --> 00:05:22.288
But one of the things that
we should probably mention

00:05:22.288 --> 00:05:25.700
is that there's a new section
in the design guide called

00:05:25.700 --> 00:05:27.050
the Your Branding section.

00:05:27.050 --> 00:05:30.600
I think it's under
/design/style.

00:05:30.600 --> 00:05:32.100
And it calls out
specifically things

00:05:32.100 --> 00:05:33.490
that you should keep in mind.

00:05:33.490 --> 00:05:36.300
For example, using your
brand accent colors

00:05:36.300 --> 00:05:39.080
rather than using
the default Holo blue

00:05:39.080 --> 00:05:41.850
everywhere-- use your
brand accent colors.

00:05:41.850 --> 00:05:44.120
One thing, I guess, that
is important to note here

00:05:44.120 --> 00:05:47.220
is that this has been
around for awhile.

00:05:47.220 --> 00:05:49.330
The guidance has
always been to try

00:05:49.330 --> 00:05:52.690
to customize, to try to kind of
find the right balance visually

00:05:52.690 --> 00:05:54.680
between your brand and Holo.

00:05:54.680 --> 00:05:57.120
And color is one of the best
ways to introduce your brand.

00:05:57.120 --> 00:05:59.210
So now we're just
formalizing that

00:05:59.210 --> 00:06:02.460
in the design guide in
this Your Branding section.

00:06:02.460 --> 00:06:04.690
So there's two examples
here, I think, in the guide.

00:06:04.690 --> 00:06:08.510
The first is Google Wallet,
using the Google blue,

00:06:08.510 --> 00:06:12.230
red, yellow, and green
colors throughout the UI

00:06:12.230 --> 00:06:15.340
to add some flourishes, as
well as the Google Play Music

00:06:15.340 --> 00:06:18.360
example, which was a very
good example of branding,

00:06:18.360 --> 00:06:21.450
where you see orange
basically everywhere replacing

00:06:21.450 --> 00:06:24.610
stock blue.

00:06:24.610 --> 00:06:27.670
So as part of this new
Your Branding section,

00:06:27.670 --> 00:06:31.390
at the very bottom, you'll also
notice the section on icons.

00:06:31.390 --> 00:06:34.430
And specifically, it talks
about the distinction

00:06:34.430 --> 00:06:38.480
between visual styling
and iconography,

00:06:38.480 --> 00:06:41.730
I guess the actual glyphs,
or the meanings of the icons.

00:06:41.730 --> 00:06:44.310
So basically, just to
summarize this point-- here

00:06:44.310 --> 00:06:46.020
at the bottom, it
basically says when

00:06:46.020 --> 00:06:48.120
you're coming from
other platforms,

00:06:48.120 --> 00:06:52.380
or when you have an existing
visual style for your icons,

00:06:52.380 --> 00:06:55.430
make sure that if there's
something in the Android icon

00:06:55.430 --> 00:06:59.670
pallet that is universal--
for example, Sharing,

00:06:59.670 --> 00:07:03.940
or Refresh, or things like
that-- make sure that you apply

00:07:03.940 --> 00:07:07.350
your visual style to
Android's iconography.

00:07:07.350 --> 00:07:12.850
So use the object or the actual
icon from Android's palette,

00:07:12.850 --> 00:07:14.100
but apply your visual styling.

00:07:14.100 --> 00:07:15.430
So here's an example.

00:07:15.430 --> 00:07:19.210
So let's say you have
these three icons,

00:07:19.210 --> 00:07:23.510
and you have Upload,
View on Web, and Share.

00:07:23.510 --> 00:07:28.670
So iOS7 recently introduced
this new visual styling

00:07:28.670 --> 00:07:31.340
for that platform
where they basically

00:07:31.340 --> 00:07:35.010
have outlines as
the primary motif,

00:07:35.010 --> 00:07:36.920
right, throughout--
each icon, everything

00:07:36.920 --> 00:07:38.350
is basically just an outline.

00:07:38.350 --> 00:07:42.070
So here are some of the icons
you may build for, say, iOS7.

00:07:42.070 --> 00:07:44.340
And they have a new Share icon.

00:07:44.340 --> 00:07:45.760
It looks like this.

00:07:45.760 --> 00:07:48.430
But when you're taking
this to Android,

00:07:48.430 --> 00:07:52.700
make sure that you don't just
blindly copy those same icons.

00:07:52.700 --> 00:07:56.860
That you apply-- whatever visual
styling you deem necessary

00:07:56.860 --> 00:07:59.100
for your app, or you
deem fit for your app,

00:07:59.100 --> 00:08:03.090
let's say in this case again,
outlines, but still use

00:08:03.090 --> 00:08:05.140
Android's actual icons.

00:08:05.140 --> 00:08:07.815
So here's the
Android Share icon.

00:08:07.815 --> 00:08:09.690
This is just the example
of the Android Share

00:08:09.690 --> 00:08:12.340
icon with the outline
motif applied.

00:08:12.340 --> 00:08:16.810
So this section of the Your
Branding Design Guide pattern,

00:08:16.810 --> 00:08:20.880
or Style section, really
just formalizes that.

00:08:20.880 --> 00:08:22.690
Just make sure that
you are applying this,

00:08:22.690 --> 00:08:26.470
you're not just blindly
copying the exact PNG assets

00:08:26.470 --> 00:08:27.670
across platforms.

00:08:27.670 --> 00:08:30.493
And if your styling, if your
visual style is not outlines,

00:08:30.493 --> 00:08:32.159
if it's something
else-- if it involves,

00:08:32.159 --> 00:08:36.470
you know, 3D effects or
whatever, if that's your thing,

00:08:36.470 --> 00:08:42.430
then that's fine as long as you
maintain Android's iconography.

00:08:42.430 --> 00:08:44.260
All right, so let's move on.

00:08:44.260 --> 00:08:47.660
Actually, real quick, just
to drive the point home--

00:08:47.660 --> 00:08:49.710
so you wouldn't use
something like the top right

00:08:49.710 --> 00:08:52.000
here on Android
for sharing, you'd

00:08:52.000 --> 00:08:55.180
use something like
the bottom right here.

00:08:55.180 --> 00:08:57.830
Moving on, touch feedback--

00:08:57.830 --> 00:09:00.000
ADAM KOCH: So in
Android 4.4 KitKat,

00:09:00.000 --> 00:09:03.290
I think as Nick mentioned
before, touch feedback has more

00:09:03.290 --> 00:09:08.250
of a neutral color
applied to it.

00:09:08.250 --> 00:09:10.550
So when you look at
the system UI widgets,

00:09:10.550 --> 00:09:13.760
you'll notice now that there's
this much more neutral color,

00:09:13.760 --> 00:09:17.020
as opposed to this Holo blue
that you've become used to.

00:09:17.020 --> 00:09:19.210
So in this particular
case, we see a button,

00:09:19.210 --> 00:09:22.340
the standard Android
widget for a button.

00:09:22.340 --> 00:09:26.830
And there's a 10% opaque black
overlay applied accordingly.

00:09:26.830 --> 00:09:28.830
And when it comes to
implementing your own touch

00:09:28.830 --> 00:09:31.460
feedback, you should
follow a similar guideline,

00:09:31.460 --> 00:09:36.470
so you should have a more
subtle and neutral color tone.

00:09:36.470 --> 00:09:39.170
And, of course, if you're
adapting for your brand,

00:09:39.170 --> 00:09:42.650
and you have a color
that matches your brand,

00:09:42.650 --> 00:09:46.190
you could also apply that when
creating your touch feedback.

00:09:46.190 --> 00:09:49.050
We talked about touch feedback
on images the other week,

00:09:49.050 --> 00:09:50.770
and the same kind
of applies there.

00:09:50.770 --> 00:09:55.130
You can also go with the
more neutral, 10% opaque

00:09:55.130 --> 00:09:58.944
black overlay, or you can apply
your brand colors accordingly.

00:09:58.944 --> 00:10:00.360
ROMAN NURIK: So
basically, anytime

00:10:00.360 --> 00:10:01.859
you have touch
feedback in your app,

00:10:01.859 --> 00:10:05.080
try avoid the
stock default blue.

00:10:05.080 --> 00:10:08.300
And actually, the default
blue, for developers out there,

00:10:08.300 --> 00:10:10.600
if you just use selectable
item background,

00:10:10.600 --> 00:10:11.690
that is no longer blue.

00:10:11.690 --> 00:10:15.500
It's actually kind of like a
light grey at about 10% or 20%

00:10:15.500 --> 00:10:16.234
opacity.

00:10:16.234 --> 00:10:18.150
But the idea is that it
should be more subtle.

00:10:18.150 --> 00:10:20.191
And anytime you have touch
feedback, or basically

00:10:20.191 --> 00:10:22.220
any widget in your
app, make sure

00:10:22.220 --> 00:10:24.570
that it's not using
the stock blue,

00:10:24.570 --> 00:10:26.850
unless blue is your
brand accent color.

00:10:26.850 --> 00:10:29.390
Make sure that it's either
something very neutral,

00:10:29.390 --> 00:10:32.110
like a gray scale tone
or something like that,

00:10:32.110 --> 00:10:36.420
or your brand accent setting
and stuff, main thing there.

00:10:36.420 --> 00:10:40.930
Moving on to full
screen-- so this

00:10:40.930 --> 00:10:42.860
is actually a new guideline.

00:10:42.860 --> 00:10:46.630
It's under
 developer.android.com/design/patterns,

00:10:46.630 --> 00:10:50.450
and this guideline talks about
when and how you should present

00:10:50.450 --> 00:10:53.550
full screen UIs to your users.

00:10:53.550 --> 00:10:56.260
So there's two
modes, two, I guess,

00:10:56.260 --> 00:10:58.750
approaches that they
talk about, and they're

00:10:58.750 --> 00:11:01.120
called Lean Back and Immersive.

00:11:01.120 --> 00:11:03.540
So Lean Back, you guys
have already seen before.

00:11:03.540 --> 00:11:06.570
If you open up YouTube and
you start playing a video,

00:11:06.570 --> 00:11:10.570
the system UI-- the navigation
bar, the thing with Back, Home,

00:11:10.570 --> 00:11:13.340
and Recent-- and the status
bar, the thing with your status

00:11:13.340 --> 00:11:15.950
icons, and your clock, and
all that, those fade away.

00:11:15.950 --> 00:11:19.510
And the full screen
is left for the video.

00:11:19.510 --> 00:11:23.240
It's a truly immersive
video playback UI.

00:11:23.240 --> 00:11:25.800
Now, as soon as you
touch the screen,

00:11:25.800 --> 00:11:28.630
the navigation bar-- the thing
with Back, Home, and Recent--

00:11:28.630 --> 00:11:30.430
and the status bar fade in.

00:11:30.430 --> 00:11:33.945
Now this is called Lean
Back because, generally,

00:11:33.945 --> 00:11:35.820
if you're watching a
video, you're not really

00:11:35.820 --> 00:11:37.350
interacting with
the screen, right.

00:11:37.350 --> 00:11:39.790
You're not doing stuff in
the middle of the screen.

00:11:39.790 --> 00:11:41.880
You're just sitting back
and watching the video.

00:11:41.880 --> 00:11:47.140
And so as soon as you touch
the screen, the bars appear.

00:11:47.140 --> 00:11:50.970
That basically prevents the
app from doing anything else

00:11:50.970 --> 00:11:52.600
with the screen.

00:11:52.600 --> 00:11:55.955
Now, I guess using the or--

00:11:55.955 --> 00:11:57.580
ADAM KOCH: Interacting
with the screen.

00:11:57.580 --> 00:11:59.810
ROMAN NURIK: --yes, exactly.

00:11:59.810 --> 00:12:01.830
With Immersive mode--
this is something

00:12:01.830 --> 00:12:03.820
that's new in
Android 4.4 KitKat.

00:12:03.820 --> 00:12:07.170
And Immersive mode basically,
again, hides the bars,

00:12:07.170 --> 00:12:09.880
but it also allows
the user to interact

00:12:09.880 --> 00:12:11.160
with the middle of the screen.

00:12:11.160 --> 00:12:13.400
And Immersive mode is more
suitable for things like games,

00:12:13.400 --> 00:12:15.566
where you actually need to
interact with the screen,

00:12:15.566 --> 00:12:18.840
or book readers, where you're
kind of flipping between pages.

00:12:18.840 --> 00:12:23.210
Now the reason that
the Lean Back mode--

00:12:23.210 --> 00:12:24.660
as soon as you
touch the screen it

00:12:24.660 --> 00:12:26.380
shows the bars--
the reason for that

00:12:26.380 --> 00:12:29.635
is really because those
bars are critical.

00:12:29.635 --> 00:12:31.820
You know, not having
access, or losing access

00:12:31.820 --> 00:12:35.050
to Back, Home, or Recent,
it can fundamentally

00:12:35.050 --> 00:12:38.120
break your experience or
your usage of the device.

00:12:38.120 --> 00:12:40.882
And so that's why it
consumes that first touch

00:12:40.882 --> 00:12:42.090
and shows them automatically.

00:12:42.090 --> 00:12:46.880
In Immersive mode, the way in
which a user can show the bars

00:12:46.880 --> 00:12:49.397
is by swiping down from
the top of the screen,

00:12:49.397 --> 00:12:51.230
or swiping up from the
bottom of the screen.

00:12:51.230 --> 00:12:53.780
And every time--
actually, I guess

00:12:53.780 --> 00:12:57.040
we'll look at this in a
second-- anytime you hide

00:12:57.040 --> 00:13:01.110
the bars in Immersive mode,
you basically see this.

00:13:01.110 --> 00:13:03.950
Actually no, not any time--
the first time in a single,

00:13:03.950 --> 00:13:06.090
in a specific app,
that you hide the bars,

00:13:06.090 --> 00:13:08.730
they'll see this pop-up
overlay type thing.

00:13:08.730 --> 00:13:10.580
And it'll basically
say swipe down

00:13:10.580 --> 00:13:14.370
from the top of the screen to
show access to your Back, Home,

00:13:14.370 --> 00:13:16.010
and Recents, and
stuff like that.

00:13:16.010 --> 00:13:18.020
So as soon as you
swipe down, you'll

00:13:18.020 --> 00:13:20.750
actually see your bars again.

00:13:20.750 --> 00:13:25.920
But the idea is that now,
in this Immersive mode,

00:13:25.920 --> 00:13:28.900
you can use touch events
and everything, all

00:13:28.900 --> 00:13:31.570
in the middle of the screen,
without showing the Back, Home,

00:13:31.570 --> 00:13:32.780
and Recent.

00:13:32.780 --> 00:13:35.940
And it's really, really ideal
for things like book readers

00:13:35.940 --> 00:13:38.400
and games and things like that.

00:13:38.400 --> 00:13:41.970
So we have a full-- we're not
going to talk in too much more

00:13:41.970 --> 00:13:43.664
detail on this--

00:13:43.664 --> 00:13:44.990
NICK BUTCHER: We could demo it.

00:13:44.990 --> 00:13:46.502
ROMAN NURIK: Yeah, I
guess we could demo it.

00:13:46.502 --> 00:13:46.900
So--

00:13:46.900 --> 00:13:47.825
NICK BUTCHER: Sign us out.

00:13:47.825 --> 00:13:48.830
ROMAN NURIK: --we could swipe.

00:13:48.830 --> 00:13:50.205
That's not actually
going to work

00:13:50.205 --> 00:13:52.770
because I think we're in a
special mode in our Nexus 10.

00:13:52.770 --> 00:13:57.815
But the point here is that we
have-- so this is a new mode.

00:13:57.815 --> 00:13:58.940
It's called Immersive mode.

00:13:58.940 --> 00:14:01.990
We're going to have a DevByte
released on this very shortly.

00:14:01.990 --> 00:14:03.406
And the DevByte
is basically going

00:14:03.406 --> 00:14:06.330
to explain how you
actually use these APIs.

00:14:06.330 --> 00:14:07.730
It's actually very, very simple.

00:14:07.730 --> 00:14:10.142
It's not a very
complicated API to use,

00:14:10.142 --> 00:14:11.350
but it's very, very powerful.

00:14:11.350 --> 00:14:14.029
So, long story short, if you're
building a game, or a book

00:14:14.029 --> 00:14:16.070
reader, or a magazine
reader, anything like that,

00:14:16.070 --> 00:14:18.155
make sure to check out
Immersive mode in KitKat.

00:14:18.155 --> 00:14:19.780
NICK BUTCHER: And
you have full control

00:14:19.780 --> 00:14:21.550
of exiting Immersive
mode as well.

00:14:21.550 --> 00:14:23.800
While the system provides
those gestures, the swipe up

00:14:23.800 --> 00:14:25.930
from the bottom or
down from the top,

00:14:25.930 --> 00:14:27.180
but you can also control that.

00:14:27.180 --> 00:14:30.990
So, for example, Play Books
takes over every single pixel,

00:14:30.990 --> 00:14:33.640
so when you're reading, you
get this fully immersive mode.

00:14:33.640 --> 00:14:36.980
But if you tap a gesture
which they always

00:14:36.980 --> 00:14:39.450
use to show the system Chrome,
so the action bar comes back

00:14:39.450 --> 00:14:41.200
and the text controls come back.

00:14:41.200 --> 00:14:42.760
But they've also
listened to that's

00:14:42.760 --> 00:14:45.480
happened and restored
the system UI as well.

00:14:45.480 --> 00:14:47.100
So you have full
control over this.

00:14:47.100 --> 00:14:48.615
ROMAN NURIK: Exactly.

00:14:48.615 --> 00:14:51.380
All right, let's move on.

00:14:51.380 --> 00:14:53.080
Translucent bars-- is that Nick?

00:14:53.080 --> 00:14:54.350
Nick, you want to talk
about translucent bars?

00:14:54.350 --> 00:14:55.141
NICK BUTCHER: Sure.

00:14:55.141 --> 00:14:59.220
So a slight variation upon
this theme is translucent bars.

00:14:59.220 --> 00:15:02.440
So this is still showing
the system Chromes

00:15:02.440 --> 00:15:06.560
as showing the status bar
and the navigation bar

00:15:06.560 --> 00:15:08.990
at the bottom, but
allowing your application

00:15:08.990 --> 00:15:12.330
to draw to that same real
estate with minimal background

00:15:12.330 --> 00:15:15.090
protection applied over the top.

00:15:15.090 --> 00:15:18.610
So this is used to great
effect by the new home screen,

00:15:18.610 --> 00:15:20.950
the new launcher
application on the Nexus 5,

00:15:20.950 --> 00:15:23.570
which allows you to
show the wallpaper,

00:15:23.570 --> 00:15:26.530
like from edge to edge at the
screen, while still preserving

00:15:26.530 --> 00:15:28.760
those system functions.

00:15:28.760 --> 00:15:31.750
And your application
can do the same thing.

00:15:31.750 --> 00:15:34.750
So if we go on to the next
slide to take a look at a sample

00:15:34.750 --> 00:15:37.590
application of the kind
of thing you could build.

00:15:37.590 --> 00:15:39.220
So here's an
application which is

00:15:39.220 --> 00:15:42.400
using Maps as the
main UI element.

00:15:42.400 --> 00:15:45.440
And here you can see that
we're extending the content

00:15:45.440 --> 00:15:48.449
all the way behind
the system bars.

00:15:48.449 --> 00:15:50.240
So it really gives you
this immersive feel,

00:15:50.240 --> 00:15:53.060
that the map is the entirety of
the canvas you're drawing to,

00:15:53.060 --> 00:15:57.290
and you just have this minimal
background protection applied.

00:15:57.290 --> 00:16:00.777
And you can control what is
drawn behind the system bars.

00:16:00.777 --> 00:16:03.110
ROMAN NURIK: So two points I
wanted to make [INAUDIBLE],

00:16:03.110 --> 00:16:06.010
go ahead.

00:16:06.010 --> 00:16:08.530
NICK BUTCHER: I was going to
say, as a slight-- not new

00:16:08.530 --> 00:16:13.520
in Android 4.4, but in a very
recent update to the Google

00:16:13.520 --> 00:16:16.530
Play Services Library,
you now have the ability

00:16:16.530 --> 00:16:19.180
to do more with Maps, have
a little bit more control

00:16:19.180 --> 00:16:21.854
over the stock UI Maps Chrome.

00:16:21.854 --> 00:16:23.270
So that's things
like here, we can

00:16:23.270 --> 00:16:27.060
see the Locate Me, and the
Zoom In and Out button, as well

00:16:27.060 --> 00:16:30.570
as the orientation
compass point.

00:16:30.570 --> 00:16:32.880
You can now set padding
on those controls

00:16:32.880 --> 00:16:36.470
so that if you do have system
UIs, such as the action

00:16:36.470 --> 00:16:38.531
bar at the top, and the
system bar, and buttons

00:16:38.531 --> 00:16:41.030
at the bottom, or even your own
controls overlaying the map,

00:16:41.030 --> 00:16:43.740
you can now pad them in, so
they will remain visible.

00:16:43.740 --> 00:16:47.300
And despite your other Chrome
on top of the map canvas.

00:16:47.300 --> 00:16:49.610
ROMAN NURIK: So I guess my
two points turned into one

00:16:49.610 --> 00:16:51.340
point I want to make, because
that was one of the points

00:16:51.340 --> 00:16:51.910
I wanted to make.

00:16:51.910 --> 00:16:53.326
One of the points
I wanted to make

00:16:53.326 --> 00:16:55.740
was the background, there
will always be, like you said,

00:16:55.740 --> 00:16:58.230
there is always some
background protection.

00:16:58.230 --> 00:17:02.610
I think in this first iteration,
I guess there'll be a gradient.

00:17:02.610 --> 00:17:06.359
So regardless of what's
shown-- I guess, regardless

00:17:06.359 --> 00:17:08.530
of what your app UI
is, there will always

00:17:08.530 --> 00:17:12.480
be a gradient, a subtle kind of
black to transparent gradient

00:17:12.480 --> 00:17:15.472
behind both the status bar
and the navigation bar.

00:17:15.472 --> 00:17:16.930
So just keep that
in mind if you're

00:17:16.930 --> 00:17:18.725
designing screens like this.

00:17:21.339 --> 00:17:23.619
And also, another thing
I wanted to mention

00:17:23.619 --> 00:17:25.890
is we don't really have
guidance on exactly how you

00:17:25.890 --> 00:17:26.839
should use this yet.

00:17:26.839 --> 00:17:30.150
So this is still, I'd say,
in an exploratory phase.

00:17:30.150 --> 00:17:32.920
One of the things that I know
one of the engineers mentioned

00:17:32.920 --> 00:17:36.960
was that you should try to avoid
using action bars in this case.

00:17:36.960 --> 00:17:41.450
I think that this
translucent bars type of UI

00:17:41.450 --> 00:17:45.010
is really designed more for like
wallpapers or kind of wallpaper

00:17:45.010 --> 00:17:49.580
type apps, apps that really go
full bleed with the content.

00:17:49.580 --> 00:17:52.910
So it's not really
quite clear exactly how

00:17:52.910 --> 00:17:55.210
you should use this yet
with other UI Chrome.

00:17:55.210 --> 00:17:59.130
But definitely, this is just
one of our early explorations.

00:17:59.130 --> 00:18:03.290
All right, let's move
on to launcher icons.

00:18:03.290 --> 00:18:05.500
ADAM KOCH: All right,
so, for launcher icons,

00:18:05.500 --> 00:18:07.125
hopefully you're
already aware, they're

00:18:07.125 --> 00:18:11.000
normally shown at 48
dp, a square of 48 dp.

00:18:11.000 --> 00:18:14.000
Now on Nexus 5, due
to the new launcher,

00:18:14.000 --> 00:18:18.320
they're actually shown larger,
actually about 25% larger,

00:18:18.320 --> 00:18:20.180
or 60 dp.

00:18:20.180 --> 00:18:24.500
And then because Nexus
5 is an XXHDPI device,

00:18:24.500 --> 00:18:26.860
essentially, in
order for the icons

00:18:26.860 --> 00:18:28.710
to show at their
crispest, you really

00:18:28.710 --> 00:18:34.760
need to include an
XXXHDPI, or 640dpi icon.

00:18:34.760 --> 00:18:36.960
Yes, we really just said that.

00:18:36.960 --> 00:18:38.650
[LAUGHTER]

00:18:38.650 --> 00:18:41.940
ADAM KOCH: So the actual
pixel size of that icon

00:18:41.940 --> 00:18:44.190
is 192 pixels.

00:18:44.190 --> 00:18:48.170
And this is somewhat similar to
how tablets behaved previously

00:18:48.170 --> 00:18:49.320
with their launcher.

00:18:49.320 --> 00:18:51.850
They would actually show
the icon slightly larger,

00:18:51.850 --> 00:18:55.160
and so it needed to dip into
the density bucket that's

00:18:55.160 --> 00:18:59.400
one larger than the density
of the actual device.

00:18:59.400 --> 00:19:02.640
And so I guess our
guidance here is

00:19:02.640 --> 00:19:04.250
the icon is just so important.

00:19:04.250 --> 00:19:06.460
It's such an important
part of your application.

00:19:06.460 --> 00:19:08.740
You should really be
including an asset that

00:19:08.740 --> 00:19:12.660
makes it look its best on all
devices and all screen sizes.

00:19:12.660 --> 00:19:14.160
And so that means,
in this case, you

00:19:14.160 --> 00:19:18.569
need to provide XXXHDPI
icon for the launcher icon.

00:19:18.569 --> 00:19:20.860
ROMAN NURIK: And so right
now, this applies to Nexus 5,

00:19:20.860 --> 00:19:23.460
since Nexus 5 has this
new kind of launcher.

00:19:23.460 --> 00:19:25.390
Be to imagine that other
devices in the future

00:19:25.390 --> 00:19:27.960
would potentially do
something like this.

00:19:27.960 --> 00:19:30.260
So basically, just
get ahead of the game.

00:19:30.260 --> 00:19:34.430
Start including
the 640dpi icons.

00:19:34.430 --> 00:19:37.620
And also, I mean, just
to kind of, I guess,

00:19:37.620 --> 00:19:40.810
talk about how this works
with tablets, right.

00:19:40.810 --> 00:19:43.912
If there was an
XXHDPI tablet, then

00:19:43.912 --> 00:19:45.120
you'd have to do this anyway.

00:19:45.120 --> 00:19:48.610
It just happens to be that
there's an XXHDPI phone that's

00:19:48.610 --> 00:19:54.780
now using this tablet scaling
behavior for launcher icons.

00:19:54.780 --> 00:19:57.660
Let's move on to new gestures.

00:19:57.660 --> 00:20:00.660
So these aren't exactly,
I guess, new gestures,

00:20:00.660 --> 00:20:04.860
but we're formalizing two
new gestures in our design

00:20:04.860 --> 00:20:05.580
guidelines.

00:20:05.580 --> 00:20:08.290
So if you go to
developer.android.com/design,

00:20:08.290 --> 00:20:11.740
I think it's under Patterns,
Gestures, I forgot.

00:20:11.740 --> 00:20:13.820
But you'll see two new gestures.

00:20:13.820 --> 00:20:16.770
The first is an expansion
of double touch.

00:20:16.770 --> 00:20:19.780
And the second is, I guess,
double touch to drag.

00:20:19.780 --> 00:20:21.530
So the expansion on
double touch basically

00:20:21.530 --> 00:20:23.930
says, if you're looking
at a photo, right, I mean,

00:20:23.930 --> 00:20:26.595
or something that's just
zoom-able, double touch

00:20:26.595 --> 00:20:27.530
to zoom it in.

00:20:27.530 --> 00:20:29.560
If you're in something
like Google Chrome,

00:20:29.560 --> 00:20:32.570
like that, right, exactly-- if
you're in something like Google

00:20:32.570 --> 00:20:35.330
Chrome, or something
else that has

00:20:35.330 --> 00:20:38.049
bits and pieces of
information laid out,

00:20:38.049 --> 00:20:40.090
and you want to double
touch on one of those bits

00:20:40.090 --> 00:20:42.670
and pieces of information,
basically what this is saying

00:20:42.670 --> 00:20:46.270
is that you should zoom
in to that content.

00:20:46.270 --> 00:20:49.100
So if you're in Chrome
and you double touch

00:20:49.100 --> 00:20:51.500
on a column of
text on a web page,

00:20:51.500 --> 00:20:56.150
it'll actually zoom to
fit that column of text.

00:20:56.150 --> 00:20:58.400
So this basically says if
you have any other types of,

00:20:58.400 --> 00:20:59.774
or if you're
building an app that

00:20:59.774 --> 00:21:02.070
is similar in terms of
what content it presents

00:21:02.070 --> 00:21:04.810
and the layout in which it
presents that content, this

00:21:04.810 --> 00:21:06.230
is something that you should do.

00:21:06.230 --> 00:21:08.530
So this may apply to things
like magazines, or books,

00:21:08.530 --> 00:21:10.040
or things like that.

00:21:10.040 --> 00:21:12.930
The second, and this is
a little more universally

00:21:12.930 --> 00:21:17.750
applicable I'd say, is anytime
you have double touch to zoom,

00:21:17.750 --> 00:21:21.720
if you double touch and
then drag up or down

00:21:21.720 --> 00:21:24.570
with that same finger--
so it's like touch,

00:21:24.570 --> 00:21:28.250
touch, drag up and down,
that should basically also

00:21:28.250 --> 00:21:29.400
be a zoom.

00:21:29.400 --> 00:21:33.470
So rather than zooming in by a
fixed amount, say, 50, or 2x,

00:21:33.470 --> 00:21:36.460
or whatever it is, double
touch and drag up and down

00:21:36.460 --> 00:21:38.420
is kind of like a dynamic zoom.

00:21:38.420 --> 00:21:41.325
So I think if you drag--
I forgot if it's drag up,

00:21:41.325 --> 00:21:44.390
it's zoom in or zoom out--
but an example of this

00:21:44.390 --> 00:21:45.292
is Google Maps.

00:21:45.292 --> 00:21:47.000
So if you open up
Google Maps right now--

00:21:47.000 --> 00:21:49.669
and this has been around
for quite some time--

00:21:49.669 --> 00:21:51.210
if you open up Google
Maps right now,

00:21:51.210 --> 00:21:54.560
double touch, drag up and
down, I think up will zoom in,

00:21:54.560 --> 00:21:55.649
down will zoom out.

00:21:55.649 --> 00:21:57.190
NICK BUTCHER: It's
in Chrome as well,

00:21:57.190 --> 00:21:58.950
and it's a great way
because you can do,

00:21:58.950 --> 00:22:02.260
similar to a pinching gesture,
but you can do it one-handed.

00:22:02.260 --> 00:22:03.680
So it's great.

00:22:03.680 --> 00:22:06.180
ROMAN NURIK: Yeah, that's
actually how I discovered it.

00:22:06.180 --> 00:22:08.785
I was using Maps with one
hand, and I was double

00:22:08.785 --> 00:22:11.160
touching a lot, and then I
accidentally stumbled upon it.

00:22:11.160 --> 00:22:13.380
I was like, oh my god, this
is the best thing ever.

00:22:13.380 --> 00:22:15.171
But if you're building
something like this,

00:22:15.171 --> 00:22:17.210
then definitely use this.

00:22:17.210 --> 00:22:19.800
I will say that we don't have
sample code available just yet,

00:22:19.800 --> 00:22:24.000
but I'll probably do an update
to our Gestures training

00:22:24.000 --> 00:22:25.560
class for this at some point.

00:22:25.560 --> 00:22:27.770
NICK BUTCHER: No, the gesture
detector in the Support

00:22:27.770 --> 00:22:29.310
Library's being updated
to support this.

00:22:29.310 --> 00:22:30.330
ROMAN NURIK:
Excellent, even better.

00:22:30.330 --> 00:22:31.120
There you go.

00:22:31.120 --> 00:22:32.700
NICK BUTCHER: We've
written the code for you.

00:22:32.700 --> 00:22:35.033
ROMAN NURIK: Awesome, so my
change to the training class

00:22:35.033 --> 00:22:37.390
will be one line of code
or something like that.

00:22:37.390 --> 00:22:42.900
Awesome, let's move on
to screen recording.

00:22:42.900 --> 00:22:45.776
NICK BUTCHER: So this
is nothing to change

00:22:45.776 --> 00:22:47.650
the way you have to
design your applications,

00:22:47.650 --> 00:22:49.730
but we've made it a lot
easier to capture video

00:22:49.730 --> 00:22:50.700
from the device.

00:22:50.700 --> 00:22:53.080
So I think in
previous shows we've

00:22:53.080 --> 00:22:55.360
talked about having
specialized hardware,

00:22:55.360 --> 00:22:58.460
or certain devices which
let you record the screen

00:22:58.460 --> 00:23:02.490
output in order to create really
high quality product videos.

00:23:02.490 --> 00:23:05.390
But a new system
feature in Android 4.4

00:23:05.390 --> 00:23:08.430
called Screen Recording
will let you do this

00:23:08.430 --> 00:23:10.870
by a simple command.

00:23:10.870 --> 00:23:13.220
So there's no on device UI
that's actually doing this.

00:23:13.220 --> 00:23:16.150
This is like a developer
feature for producing

00:23:16.150 --> 00:23:18.800
these videos ahead of time,
rather than a run-time user

00:23:18.800 --> 00:23:20.350
feature, as it were.

00:23:20.350 --> 00:23:23.780
And so you simply execute this
command written on screen,

00:23:23.780 --> 00:23:28.760
and this will record up
to 15 seconds of video

00:23:28.760 --> 00:23:32.930
in full high definition, the
full kind of screen resolution.

00:23:32.930 --> 00:23:36.910
And then you can just use the
adb pull commands in order

00:23:36.910 --> 00:23:39.475
to get that video
file off of the device

00:23:39.475 --> 00:23:40.920
and onto your computer.

00:23:40.920 --> 00:23:44.880
So a really easy way to
record product videos.

00:23:44.880 --> 00:23:48.510
And as a little pro tip-- if you
go into the Settings, and then

00:23:48.510 --> 00:23:51.490
Developer Settings
section, and enable Show

00:23:51.490 --> 00:23:53.690
Touches, as we have
on this tablet here,

00:23:53.690 --> 00:23:57.602
you get these white circles,
which goes really well with it.

00:23:57.602 --> 00:23:58.810
I'm doing a screen recording.

00:23:58.810 --> 00:24:00.760
So you can produce high
quality product videos

00:24:00.760 --> 00:24:03.164
without having fingers
in the way, and so forth.

00:24:03.164 --> 00:24:05.830
ROMAN NURIK: I will say, I think
we updated it to three minutes.

00:24:05.830 --> 00:24:07.200
Or is it still 15 seconds?

00:24:07.200 --> 00:24:09.269
I think at some point
we made a change

00:24:09.269 --> 00:24:10.310
to make it three minutes.

00:24:10.310 --> 00:24:13.115
But it's either three
minutes or 15 seconds.

00:24:13.115 --> 00:24:14.240
One other thing we should--

00:24:14.240 --> 00:24:15.080
NICK BUTCHER: Has that changed?

00:24:15.080 --> 00:24:15.920
[LAUGHTER]

00:24:15.920 --> 00:24:18.160
ROMAN NURIK: One other
thing we should mention

00:24:18.160 --> 00:24:21.170
is that what we're doing right
here with our own setup here--

00:24:21.170 --> 00:24:22.420
we're not using screen record.

00:24:22.420 --> 00:24:25.770
Again, screen record is not
meant for live screencasting.

00:24:25.770 --> 00:24:30.027
It's really for recording
video, and then post-processing,

00:24:30.027 --> 00:24:30.860
or things like that.

00:24:30.860 --> 00:24:33.276
So it's really good for things
like your promotional video

00:24:33.276 --> 00:24:33.950
on Google Play.

00:24:33.950 --> 00:24:37.630
If you want to show a
video of your app in use,

00:24:37.630 --> 00:24:41.496
this will make it
tons, tons easier.

00:24:41.496 --> 00:24:43.979
All right, last but not
least, scenes and transitions.

00:24:43.979 --> 00:24:45.770
ADAM KOCH: Yes, so
scenes and transitions--

00:24:45.770 --> 00:24:49.340
so the animation
framework in Android

00:24:49.340 --> 00:24:53.100
gets some fantastic new
additions in Android 4.4.

00:24:53.100 --> 00:24:55.690
And we're calling them
scenes and transitions.

00:24:55.690 --> 00:24:57.740
So there are two parts to this.

00:24:57.740 --> 00:24:59.940
The first is where
you can essentially

00:24:59.940 --> 00:25:03.630
define scenes within your UI.

00:25:03.630 --> 00:25:07.815
This is sort of two different UI
states for a particular screen.

00:25:07.815 --> 00:25:09.940
And then you can have the
system actually calculate

00:25:09.940 --> 00:25:12.200
the animation to get
from the first scene

00:25:12.200 --> 00:25:13.710
to the second scene.

00:25:13.710 --> 00:25:17.160
So this is, it's a
really neat addition.

00:25:17.160 --> 00:25:21.180
And the second part to this is
you can actually go and modify

00:25:21.180 --> 00:25:22.380
a particular view group.

00:25:22.380 --> 00:25:25.450
So this is talking more
on the developer side.

00:25:25.450 --> 00:25:27.290
A view group is a
collection of views

00:25:27.290 --> 00:25:30.780
within a particular screen,
and make changes to those,

00:25:30.780 --> 00:25:33.980
and have the system animate
those changes as well.

00:25:33.980 --> 00:25:35.480
So it's definitely
something to look

00:25:35.480 --> 00:25:40.110
into if you want to get more
involved inside the animation

00:25:40.110 --> 00:25:41.185
side of Android.

00:25:41.185 --> 00:25:43.435
For developers, there's the
android.transition.trans--

00:25:46.650 --> 00:25:47.700
[LAUGHTER]

00:25:47.700 --> 00:25:48.480
ROMAN NURIK: Transition manager?

00:25:48.480 --> 00:25:50.896
ADAM KOCH: --transitionmanager,
that you should go look at

00:25:50.896 --> 00:25:52.970
to get more
information about this.

00:25:52.970 --> 00:25:55.830
And if you're familiar
with Keynote's "Magic Move"

00:25:55.830 --> 00:25:59.870
animation, which let's you
morph an object from one

00:25:59.870 --> 00:26:01.470
portion of the
screen into another,

00:26:01.470 --> 00:26:02.950
it's very similar to that.

00:26:02.950 --> 00:26:06.500
So just to give you an idea of
how it works or how it looks.

00:26:06.500 --> 00:26:08.750
ROMAN NURIK: Yeah, and I
think that the big thing here

00:26:08.750 --> 00:26:11.834
for designers is if you're
talking to a developer

00:26:11.834 --> 00:26:13.750
and you're like, hey, I
want these animations,

00:26:13.750 --> 00:26:15.730
these transitions to
happen, and they're like,

00:26:15.730 --> 00:26:17.640
oh, you know, I just
can't do that, it's

00:26:17.640 --> 00:26:21.870
going to take too long-- for
earlier versions of Android,

00:26:21.870 --> 00:26:23.310
it does require a bit of work.

00:26:23.310 --> 00:26:25.050
It's definitely still doable.

00:26:25.050 --> 00:26:27.640
But if you're running
Android 4.4 or later,

00:26:27.640 --> 00:26:30.570
I don't think there's an excuse
anymore to not use this API.

00:26:30.570 --> 00:26:33.070
The great thing about this
API is that it's so simple.

00:26:33.070 --> 00:26:35.765
I mean, the easiest form of
this is one line of code.

00:26:35.765 --> 00:26:37.140
It's basically
just, I think it's

00:26:37.140 --> 00:26:39.540
begin-delayed-transition
or something like that.

00:26:39.540 --> 00:26:44.300
And it basically says anytime
you show, or hide, or resize,

00:26:44.300 --> 00:26:48.310
or move things, automatically
adjust their bounds,

00:26:48.310 --> 00:26:50.930
or animate their bounds, or
fade them in, or fade them out--

00:26:50.930 --> 00:26:52.520
it's really awesome.

00:26:52.520 --> 00:26:54.090
So I think that,
for designers, make

00:26:54.090 --> 00:26:56.730
sure that you press
your developers to use

00:26:56.730 --> 00:26:59.169
this new API if they
have any sort of concerns

00:26:59.169 --> 00:27:00.710
over the amount of
time it would take

00:27:00.710 --> 00:27:02.084
to implement
certain transitions.

00:27:02.084 --> 00:27:04.980
ADAM KOCH: And lastly, for
developers, look for a DevByte

00:27:04.980 --> 00:27:07.740
from our animation
expert, Chet Haase,

00:27:07.740 --> 00:27:10.115
which we live very
shortly as well.

00:27:13.000 --> 00:27:15.110
ROMAN NURIK: So
that's it for what's

00:27:15.110 --> 00:27:19.080
new in Android 4.4 KitKat
from a design standpoint.

00:27:19.080 --> 00:27:21.930
Watch out for all those
DevBytes that we talked about

00:27:21.930 --> 00:27:23.350
for developers.

00:27:23.350 --> 00:27:26.390
And we're looking to create
a whole bunch of design bites

00:27:26.390 --> 00:27:29.670
on these topics as well,
over the coming weeks

00:27:29.670 --> 00:27:32.260
or months-- hopefully weeks.

00:27:32.260 --> 00:27:34.440
So, yes, stay
tuned for all that.

00:27:34.440 --> 00:27:38.300
Anyway, so, see you next week,
or the week after, or whatever.

00:27:38.300 --> 00:27:39.719
As always, I'm Roman Nurik.

00:27:39.719 --> 00:27:41.010
ADAM KOCH: See you later, guys.

00:27:41.010 --> 00:27:42.440
Adam Koch here.

00:27:42.440 --> 00:27:44.890
NICK BUTCHER: Bye
from Nick Butcher.

