WEBVTT
Kind: captions
Language: en

00:00:00.010 --> 00:00:01.260
ADAM CARPENTER: Hi, everybody.

00:00:01.260 --> 00:00:03.230
My name is Adam Carpenter.

00:00:03.230 --> 00:00:04.790
As you just heard
Audie talk about,

00:00:04.790 --> 00:00:06.290
there's a lot of
ways developers are

00:00:06.290 --> 00:00:08.330
considering diversifying
their revenue, be it

00:00:08.330 --> 00:00:11.630
ads, IAP, subscriptions.

00:00:11.630 --> 00:00:13.730
For those of you who are
already firmly invested

00:00:13.730 --> 00:00:15.900
in the IAP space,
I'm going to try

00:00:15.900 --> 00:00:18.560
to go a little bit deeper
and talk about some

00:00:18.560 --> 00:00:20.210
of the signs and the
patterns that you

00:00:20.210 --> 00:00:22.940
can see in your own data,
which can potentially

00:00:22.940 --> 00:00:24.830
help you identify if
there's opportunities

00:00:24.830 --> 00:00:27.000
to grow your business.

00:00:27.000 --> 00:00:29.690
So one of the ways that I
always like to look and think

00:00:29.690 --> 00:00:32.240
about the whole
notion of revenue

00:00:32.240 --> 00:00:34.430
and how it all
interrelates is something

00:00:34.430 --> 00:00:36.560
that we call the revenue
tree, or some people

00:00:36.560 --> 00:00:38.450
call the revenue funnel.

00:00:38.450 --> 00:00:40.550
This is kind of a
very important view,

00:00:40.550 --> 00:00:44.000
because it shows how all
the core components fit

00:00:44.000 --> 00:00:47.840
together and feed upwards to
generate the revenue that we

00:00:47.840 --> 00:00:50.420
see on a daily basis.

00:00:50.420 --> 00:00:52.490
And if you're not
familiar with this graph,

00:00:52.490 --> 00:00:54.770
to get the top-level
metric, you'd

00:00:54.770 --> 00:00:57.470
multiply the two below
it, except in the case

00:00:57.470 --> 00:01:01.485
the dotted-line boxes, where
you'd add them together.

00:01:01.485 --> 00:01:03.860
And now when I think about a
lot of the core monetization

00:01:03.860 --> 00:01:06.920
metrics, generally speaking,
I like to divide them

00:01:06.920 --> 00:01:08.910
into two different categories.

00:01:08.910 --> 00:01:11.810
The first-- the daily
buyer percentage--

00:01:11.810 --> 00:01:14.300
I always like to think of that
as the primary monetization

00:01:14.300 --> 00:01:17.090
metric, since for thinking
about the effectiveness

00:01:17.090 --> 00:01:19.970
and your ability to
monetize your users,

00:01:19.970 --> 00:01:22.340
it's almost always
better to go for breadth.

00:01:22.340 --> 00:01:24.830
It's significantly
safer to try and get $1

00:01:24.830 --> 00:01:29.390
out of everybody versus being
overly reliant on your whales.

00:01:29.390 --> 00:01:32.660
In contrast, I like to think
of average revenue per paying

00:01:32.660 --> 00:01:37.540
user, average transaction value,
and transactions per buyer

00:01:37.540 --> 00:01:39.620
as secondary
monetization metrics,

00:01:39.620 --> 00:01:42.290
because while they're critically
important, what they really

00:01:42.290 --> 00:01:45.320
measure is your ability to
extract value from users

00:01:45.320 --> 00:01:48.050
who have already chosen to pay.

00:01:48.050 --> 00:01:49.970
And one of the jokes I
used to kind of make,

00:01:49.970 --> 00:01:51.387
when I was on the
developer side--

00:01:51.387 --> 00:01:53.420
and I still kind of
make it at Google Play--

00:01:53.420 --> 00:01:56.040
give me virtually any game.

00:01:56.040 --> 00:01:58.490
Tell me to double average
revenue per paying user.

00:01:58.490 --> 00:02:01.340
I can easily do that and tank
the business at the same time,

00:02:01.340 --> 00:02:04.040
because it's always so easy
to squeeze players and squeeze

00:02:04.040 --> 00:02:06.290
players, and you're lifting
up your average revenue

00:02:06.290 --> 00:02:10.590
per paying user, but your
buyer conversion is plummeting.

00:02:10.590 --> 00:02:13.380
And so in terms of
topics today, I'm

00:02:13.380 --> 00:02:15.770
going to kind of walk
through the revenue tree.

00:02:15.770 --> 00:02:17.540
And the first thing
I want to do is

00:02:17.540 --> 00:02:19.910
take a look at
topline revenue health

00:02:19.910 --> 00:02:21.500
and show you some
of the ways that I

00:02:21.500 --> 00:02:24.230
like to monitor revenue
performance that help me

00:02:24.230 --> 00:02:26.413
understand how a game is doing.

00:02:26.413 --> 00:02:27.830
And then next,
we're going to take

00:02:27.830 --> 00:02:30.950
a look at buyer percentage,
and in particular, talk

00:02:30.950 --> 00:02:33.440
about some ways to think
about increasing the returning

00:02:33.440 --> 00:02:36.140
buyers, and especially the
frequency at which users

00:02:36.140 --> 00:02:38.430
are paying within a month.

00:02:38.430 --> 00:02:42.890
And finally, we move on to talk
about the secondary metrics.

00:02:42.890 --> 00:02:45.710
And they're-- I'm going to
primarily try to give you some

00:02:45.710 --> 00:02:49.340
food for thought about some ways
that you can potentially change

00:02:49.340 --> 00:02:52.460
your games that could help
improve the metrics in that

00:02:52.460 --> 00:02:54.330
space.

00:02:54.330 --> 00:02:57.325
So to kick off with
topline revenue.

00:02:57.325 --> 00:02:59.450
One of the major ways that
we're always driving it,

00:02:59.450 --> 00:03:01.520
and one of the major ways
that we're maximizing

00:03:01.520 --> 00:03:04.970
our performance, LiveOps.

00:03:04.970 --> 00:03:07.140
Most of you are already
probably doing it.

00:03:07.140 --> 00:03:09.430
If not, you're probably
considering it.

00:03:09.430 --> 00:03:12.680
It is such an integral part
of driving our businesses,

00:03:12.680 --> 00:03:15.830
of stimulating demand,
but LiveOps isn't this one

00:03:15.830 --> 00:03:17.300
monolithic thing.

00:03:17.300 --> 00:03:18.920
And the way that I
like to think of it

00:03:18.920 --> 00:03:22.400
is breaking it out into supply
side sales or demand side

00:03:22.400 --> 00:03:23.630
events.

00:03:23.630 --> 00:03:25.010
And I like this
notion because it

00:03:25.010 --> 00:03:27.950
helps to think about the
balance between the two.

00:03:27.950 --> 00:03:31.730
So supply side sales, that's the
injection of discounted assets

00:03:31.730 --> 00:03:34.340
into the economy, the ways
that you can give users

00:03:34.340 --> 00:03:38.720
additional value for each of
the dollars that they're paying.

00:03:38.720 --> 00:03:41.467
In contrast, demand
side events, this

00:03:41.467 --> 00:03:43.550
is when we're running the
tournaments, the weekend

00:03:43.550 --> 00:03:46.820
challenges, the competitive
engagements-- all the ways

00:03:46.820 --> 00:03:49.610
that we get players to
engage more significantly,

00:03:49.610 --> 00:03:52.520
ideally draining down
their asset balance

00:03:52.520 --> 00:03:54.920
and creating the greater
potential for those users

00:03:54.920 --> 00:03:56.048
to pay.

00:03:56.048 --> 00:03:57.590
And the interrelation
between the two

00:03:57.590 --> 00:03:59.870
is critically important
in order to ensure

00:03:59.870 --> 00:04:02.780
that you have a very balanced
and healthy game economy

00:04:02.780 --> 00:04:05.940
and that your revenue
is ultimately stronger.

00:04:05.940 --> 00:04:08.360
Here's a couple examples
of vastly different ways

00:04:08.360 --> 00:04:11.540
that developers like
to run their LiveOps.

00:04:11.540 --> 00:04:13.070
In the case of the blue line--

00:04:13.070 --> 00:04:14.790
the one on the left--

00:04:14.790 --> 00:04:16.880
this is a perfect example
of a developer who

00:04:16.880 --> 00:04:19.310
likes to run the
occasional, roughly

00:04:19.310 --> 00:04:21.450
once-per-month massive sale.

00:04:21.450 --> 00:04:24.620
And what you can see is they
generate a significant amount

00:04:24.620 --> 00:04:26.580
of revenue during that period.

00:04:26.580 --> 00:04:29.240
But then on a normal
week-by-week basis,

00:04:29.240 --> 00:04:30.110
you're seeing--

00:04:30.110 --> 00:04:31.760
this is the start of a LiveOps--

00:04:31.760 --> 00:04:33.980
revenue spikes, trends down--

00:04:33.980 --> 00:04:36.230
that's the off day of the
week when it's not running--

00:04:36.230 --> 00:04:37.388
and then it starts again.

00:04:37.388 --> 00:04:39.680
And so you kind of have this
constant pattern on a week

00:04:39.680 --> 00:04:41.960
by week basis.

00:04:41.960 --> 00:04:43.910
The green one,
this is an example

00:04:43.910 --> 00:04:46.190
of a developer who's
trying to run LiveOps

00:04:46.190 --> 00:04:48.800
virtually every day.

00:04:48.800 --> 00:04:51.758
They're balancing the supply
side and the demand side,

00:04:51.758 --> 00:04:54.050
and what they're doing is
creating a much tighter band.

00:04:54.050 --> 00:04:56.150
And it's a very
interesting perspective

00:04:56.150 --> 00:04:59.060
and an interesting approach,
because what the developer is

00:04:59.060 --> 00:05:04.760
fundamentally trying to ensure
is that every day is appealing.

00:05:04.760 --> 00:05:07.160
Every single day
some of their users

00:05:07.160 --> 00:05:09.170
are perceiving good
value in the game

00:05:09.170 --> 00:05:13.140
in being willing to opening
up their wallets and paying.

00:05:13.140 --> 00:05:16.430
And so a great way to
think about this is,

00:05:16.430 --> 00:05:17.990
what's the right strategy?

00:05:17.990 --> 00:05:19.970
What's the best strategy?

00:05:19.970 --> 00:05:21.560
Unfortunately, I
can't really tell you

00:05:21.560 --> 00:05:24.210
that one is inherently
better than the other.

00:05:24.210 --> 00:05:26.060
It depends on your
development team--

00:05:26.060 --> 00:05:30.283
what your skill sets
are, what your game is--

00:05:30.283 --> 00:05:31.700
but one of the
strategies that you

00:05:31.700 --> 00:05:35.000
can use to understand how
your LiveOps is performing

00:05:35.000 --> 00:05:38.310
is a monitoring technique we
call the revenue heartbeat.

00:05:38.310 --> 00:05:40.910
And what the revenue
heartbeat does,

00:05:40.910 --> 00:05:43.550
in any given calendar
month, calculate

00:05:43.550 --> 00:05:47.000
the minimum revenue day,
the maximum revenue day,

00:05:47.000 --> 00:05:49.230
and the average
revenue for the month.

00:05:49.230 --> 00:05:51.440
And then if you
plot it over time,

00:05:51.440 --> 00:05:54.290
you get a visualization
like what you see here.

00:05:54.290 --> 00:05:56.990
And ideally with the revenue
heartbeat, what we're really

00:05:56.990 --> 00:05:59.900
trying to see is that
the min and the max,

00:05:59.900 --> 00:06:02.150
they form a tight band
around the average,

00:06:02.150 --> 00:06:04.340
that you don't see any
wild variations on a month

00:06:04.340 --> 00:06:05.210
by month basis--

00:06:05.210 --> 00:06:07.010
you don't see any
divergence-- and

00:06:07.010 --> 00:06:09.213
that as your average
revenue is growing,

00:06:09.213 --> 00:06:10.880
you're seeing that
the bands themselves,

00:06:10.880 --> 00:06:13.580
they're not inherently
widening because this ensures

00:06:13.580 --> 00:06:16.160
that you're stimulating the
right kind of demand on a day

00:06:16.160 --> 00:06:19.080
by day basis, and that your
players are engaging heavily

00:06:19.080 --> 00:06:22.010
and engaging consistently.

00:06:22.010 --> 00:06:24.620
Some of the more negative
patterns that you would see,

00:06:24.620 --> 00:06:26.660
these are shown here.

00:06:26.660 --> 00:06:29.720
And I really like point A
as an example, because this

00:06:29.720 --> 00:06:34.400
is a wonderful case of a game,
which in the month of March,

00:06:34.400 --> 00:06:36.930
they actually ran
a massive sale,

00:06:36.930 --> 00:06:39.590
but what that sale
resulted in was

00:06:39.590 --> 00:06:41.720
a pretty significant hangover.

00:06:41.720 --> 00:06:44.660
And so you can see the spike,
but then the min fell off,

00:06:44.660 --> 00:06:47.300
and it actually resulted
in a drop in the average.

00:06:47.300 --> 00:06:49.430
So while sales are
inherently good,

00:06:49.430 --> 00:06:51.830
if you can't randomize
the amount of hangover--

00:06:51.830 --> 00:06:53.000
the duration of it--

00:06:53.000 --> 00:06:55.505
you can run into results like
this, where your revenue ends

00:06:55.505 --> 00:06:57.810
up being net negative for
the month, when you compare

00:06:57.810 --> 00:06:59.840
to the month before.

00:06:59.840 --> 00:07:04.050
In contrast to that,
point B in June--

00:07:04.050 --> 00:07:06.080
this is actually a great
example of a developer

00:07:06.080 --> 00:07:08.030
who began tightening
up their economy

00:07:08.030 --> 00:07:09.440
during that particular month.

00:07:09.440 --> 00:07:11.450
They didn't run as
many sales, but they

00:07:11.450 --> 00:07:13.370
were stimulated into demand.

00:07:13.370 --> 00:07:15.740
And what that was very
effective at doing

00:07:15.740 --> 00:07:18.390
was getting users to drain
their asset balance down,

00:07:18.390 --> 00:07:20.570
so there was more
of the need to pay.

00:07:20.570 --> 00:07:22.690
Because as we all
know, for IAP games,

00:07:22.690 --> 00:07:24.990
if a user's asset
balance is high,

00:07:24.990 --> 00:07:27.285
what's the point of
spending any money?

00:07:27.285 --> 00:07:28.910
But then you always
run into situations

00:07:28.910 --> 00:07:30.980
like you see with point C here.

00:07:30.980 --> 00:07:33.410
Massive Black Friday
sale, not enough

00:07:33.410 --> 00:07:37.040
demand afterwards, so
you see a big spike,

00:07:37.040 --> 00:07:39.420
but the min fell off again.

00:07:39.420 --> 00:07:41.690
So this revenue heartbeat,
it's a really wonderful way

00:07:41.690 --> 00:07:43.523
that you can actually
monitor and understand

00:07:43.523 --> 00:07:45.290
the performance of
your game, and get

00:07:45.290 --> 00:07:47.240
a good sense of the
effectiveness of the sales

00:07:47.240 --> 00:07:49.698
that you're running, and whether
you're running potentially

00:07:49.698 --> 00:07:51.350
too frequently.

00:07:51.350 --> 00:07:52.850
There's also some
more advanced ways

00:07:52.850 --> 00:07:54.797
that you can take a
look at your revenue.

00:07:54.797 --> 00:07:56.630
And one of the ones
that I particularly like

00:07:56.630 --> 00:07:59.180
is calculating the
coefficient of variation

00:07:59.180 --> 00:08:02.780
for your daily revenue
across a month.

00:08:02.780 --> 00:08:05.690
For those of you who aren't
familiar with this calculation,

00:08:05.690 --> 00:08:09.890
what it is is take all the
daily revenue within a month,

00:08:09.890 --> 00:08:11.930
calculate the standard
deviation of it,

00:08:11.930 --> 00:08:14.010
and divide it by the mean.

00:08:14.010 --> 00:08:15.620
What that will give
you is a measure

00:08:15.620 --> 00:08:18.140
of the variability,
or volatility,

00:08:18.140 --> 00:08:19.910
of your revenue in the month.

00:08:19.910 --> 00:08:23.090
You can effectively think
of it as a percentage score.

00:08:23.090 --> 00:08:25.010
And so it's really
useful for quantifying

00:08:25.010 --> 00:08:27.080
LiveOps performance.

00:08:27.080 --> 00:08:29.060
And additionally,
what we've actually

00:08:29.060 --> 00:08:32.330
found is that
coefficient of variation,

00:08:32.330 --> 00:08:35.450
it actually correlates
to revenue growth.

00:08:35.450 --> 00:08:37.340
And so what I'm going
to talk you through now

00:08:37.340 --> 00:08:40.730
is how you can actually use
this to understand the potential

00:08:40.730 --> 00:08:42.990
for your games to
grow month over month,

00:08:42.990 --> 00:08:45.200
and the kind of
optimizations and the values

00:08:45.200 --> 00:08:48.370
that you should be looking for.

00:08:48.370 --> 00:08:50.530
This particular graph--
and I'll explain it--

00:08:50.530 --> 00:08:53.890
this is looking
at the top 250 IAP

00:08:53.890 --> 00:08:58.615
games between January
2017 and January 2018.

00:08:58.615 --> 00:09:01.240
And what we've done is looked at
their coefficient of variation

00:09:01.240 --> 00:09:04.240
by month, and we've put
them all into buckets.

00:09:04.240 --> 00:09:08.050
And so what you can largely see
is that a majority of the games

00:09:08.050 --> 00:09:10.940
had a coefficient of
variation below 39%.

00:09:10.940 --> 00:09:12.740
So there was some volatility.

00:09:12.740 --> 00:09:15.630
But there wasn't
an extreme amount.

00:09:15.630 --> 00:09:17.230
Where it gets really
interesting is

00:09:17.230 --> 00:09:18.940
we take coefficient
of variation,

00:09:18.940 --> 00:09:20.440
and we look at
which of these games

00:09:20.440 --> 00:09:23.900
had month over month growth.

00:09:23.900 --> 00:09:25.660
That's what we see here.

00:09:25.660 --> 00:09:28.920
The games with the lowest
coefficient of variations

00:09:28.920 --> 00:09:32.370
were much more likely to see
month over month growth--

00:09:32.370 --> 00:09:36.080
games with a coefficient of
variation between 10% and 19%.

00:09:36.080 --> 00:09:40.900
So a month over month growth
about 56% of the time.

00:09:40.900 --> 00:09:45.190
In contrast, games with
a very high volatility,

00:09:45.190 --> 00:09:48.962
they saw month over month growth
less than half of the time.

00:09:48.962 --> 00:09:50.920
So it's kind of an
important thing to consider.

00:09:50.920 --> 00:09:53.440
How volatile is the
revenue in your game?

00:09:53.440 --> 00:09:56.050
How volatile are the sales?

00:09:56.050 --> 00:09:58.610
And is it actually going
to be healthy for you?

00:09:58.610 --> 00:10:01.900
And is there an opportunity to
try and optimize your LiveOps

00:10:01.900 --> 00:10:04.960
cadence, balance the demand
and supply side events,

00:10:04.960 --> 00:10:07.660
and decrease that volatility.

00:10:07.660 --> 00:10:11.020
Because at the end of
the day, volatility

00:10:11.020 --> 00:10:14.860
is not the ideal scenario
that we're looking for.

00:10:14.860 --> 00:10:18.790
Consider a game where you're
running regular weekly sales

00:10:18.790 --> 00:10:21.640
and events, or you're running
a major tentpole of sales

00:10:21.640 --> 00:10:23.900
at the beginning of the month.

00:10:23.900 --> 00:10:26.080
How easy is it for your
users to figure out

00:10:26.080 --> 00:10:29.883
what their pattern is,
and then figure out that,

00:10:29.883 --> 00:10:31.300
well, they always
run a major sale

00:10:31.300 --> 00:10:32.920
at the beginning of the month.

00:10:32.920 --> 00:10:36.470
Why should I ever spend
money any other time?

00:10:36.470 --> 00:10:37.960
And as soon as you
start to create

00:10:37.960 --> 00:10:42.580
that habit, the expectation,
the anticipation of your users

00:10:42.580 --> 00:10:45.130
about when the sales and the
events are going to occur,

00:10:45.130 --> 00:10:47.380
this is when you can start
getting into asset hoarding

00:10:47.380 --> 00:10:50.410
situations, because users
know when the sale is.

00:10:50.410 --> 00:10:52.240
They spend as much
money as they possibly

00:10:52.240 --> 00:10:55.060
can afford during that sale, and
then they ride those discounted

00:10:55.060 --> 00:10:57.490
assets for as long as possible.

00:10:57.490 --> 00:11:00.110
This results in things
like spend cannibalization,

00:11:00.110 --> 00:11:02.590
because users aren't going to
spend right before the sale,

00:11:02.590 --> 00:11:04.360
because they know it's coming.

00:11:04.360 --> 00:11:06.340
And all of these
combined, this is

00:11:06.340 --> 00:11:09.610
what gives us the revenue
hangovers, that once players

00:11:09.610 --> 00:11:13.630
have figured out the pattern,
you're actually losing money

00:11:13.630 --> 00:11:16.300
when you've run your
sale and the hangover

00:11:16.300 --> 00:11:18.370
you see afterwards.

00:11:18.370 --> 00:11:21.730
So one of the ideas we
always like to talk about--

00:11:21.730 --> 00:11:24.230
and I'd really encourage you
guys to think about this--

00:11:24.230 --> 00:11:28.320
it's what I call predictable
unpredictability.

00:11:28.320 --> 00:11:30.310
And what I mean
by that is can you

00:11:30.310 --> 00:11:33.550
create scenarios and
situations in your game

00:11:33.550 --> 00:11:37.300
where users log in expecting
something good to happen,

00:11:37.300 --> 00:11:40.760
but they have no idea
what that good thing is?

00:11:40.760 --> 00:11:43.855
Can you get your users to
anticipate a good thing,

00:11:43.855 --> 00:11:45.730
but they're not going
to fundamentally change

00:11:45.730 --> 00:11:48.992
their behavior before
it actually occurs?

00:11:48.992 --> 00:11:50.950
It's a pattern you used
to use very effectively

00:11:50.950 --> 00:11:54.010
on the developer side, and I'd
encourage you to think about

00:11:54.010 --> 00:11:57.550
how predictable is your
game in terms of the events,

00:11:57.550 --> 00:12:01.810
and is there an opportunity
to spice that up, and make it

00:12:01.810 --> 00:12:03.580
so that players are
not fundamentally

00:12:03.580 --> 00:12:09.140
changing their behavior because
they know what you're doing?

00:12:09.140 --> 00:12:11.530
So moving on from that,
I want talk a little bit

00:12:11.530 --> 00:12:14.550
about increasing your
returning buyers,

00:12:14.550 --> 00:12:19.630
and I want to talk a lot
about the 80-20 rule.

00:12:19.630 --> 00:12:22.540
How many of you guys are
familiar with this in games?

00:12:22.540 --> 00:12:23.040
OK.

00:12:23.040 --> 00:12:24.670
A few of you.

00:12:24.670 --> 00:12:27.190
What the rule-- it's almost
like an industry meme-- says

00:12:27.190 --> 00:12:30.310
is in a calendar month,
the top 20% of payers

00:12:30.310 --> 00:12:33.740
contribute 80% of the revenue.

00:12:33.740 --> 00:12:35.470
And when we look at
the Google Play data,

00:12:35.470 --> 00:12:37.330
it's actually largely
true when you look

00:12:37.330 --> 00:12:38.980
across the entire ecosystem.

00:12:38.980 --> 00:12:42.940
The top 20% of payers pretty
much contribute about 80%

00:12:42.940 --> 00:12:46.040
of the revenue, when you look
across each and every game.

00:12:46.040 --> 00:12:48.040
But I've always kind of
thought like, it doesn't

00:12:48.040 --> 00:12:49.540
seem inherently healthy.

00:12:49.540 --> 00:12:52.103
It doesn't seem like it's
long term sustainable,

00:12:52.103 --> 00:12:54.520
and it probably doesn't seem
like what the best performing

00:12:54.520 --> 00:12:57.590
games out there are doing.

00:12:57.590 --> 00:13:00.430
And in fact, they're
actually not.

00:13:00.430 --> 00:13:04.210
This is the top 25 games on
Google Play during the month

00:13:04.210 --> 00:13:08.110
of April, and what
we can actually see,

00:13:08.110 --> 00:13:11.920
only six of these guys got
more than 80% of their revenue

00:13:11.920 --> 00:13:14.560
from the top 20% of payers.

00:13:14.560 --> 00:13:17.980
The majority of them,
they're in the low 70s.

00:13:17.980 --> 00:13:19.780
Three of them were in the 60s.

00:13:19.780 --> 00:13:23.940
Two of the games in the top 25
they were actually in the 50s,

00:13:23.940 --> 00:13:26.170
so that the top 20%
of their players

00:13:26.170 --> 00:13:29.860
only contributed about
53, 55% of their revenue.

00:13:29.860 --> 00:13:32.680
These top games
are getting money

00:13:32.680 --> 00:13:35.850
from a much more diverse
range of players.

00:13:35.850 --> 00:13:38.320
And I really want to kind of
drive that home, because what

00:13:38.320 --> 00:13:39.940
we're looking at here--

00:13:39.940 --> 00:13:43.210
this is the top 100 games
in the month of April--

00:13:43.210 --> 00:13:46.940
and what you can actually
see, as it rises,

00:13:46.940 --> 00:13:49.670
the further down the
top chart you go,

00:13:49.670 --> 00:13:55.670
the more reliant these games
are on their top 20% of payers.

00:13:55.670 --> 00:13:57.490
It's kind of important
to think about.

00:13:57.490 --> 00:14:00.310
And think about where does your
game fall into the top charts,

00:14:00.310 --> 00:14:03.100
and how reliant are you
on your top payers, and is

00:14:03.100 --> 00:14:07.940
there an opportunity to
actually broaden your base?

00:14:07.940 --> 00:14:10.610
Because I really think
this is a key concept--

00:14:10.610 --> 00:14:12.710
that the leading games on Play--

00:14:12.710 --> 00:14:14.930
they've got the most
distributed revenue.

00:14:14.930 --> 00:14:17.420
And so how can you take
that as inspiration

00:14:17.420 --> 00:14:19.850
and figure out opportunities
for improving and optimizing

00:14:19.850 --> 00:14:22.280
your games?

00:14:22.280 --> 00:14:24.860
One of the ways that I
actually like to look at it

00:14:24.860 --> 00:14:29.360
is taking monthly ARPPU,
average revenue per paying user,

00:14:29.360 --> 00:14:32.750
and the number of unique days
users are paying in a month.

00:14:32.750 --> 00:14:35.540
And what I like to do
is slice into deciles,

00:14:35.540 --> 00:14:38.300
and for anybody who's not
familiar with what a decile is,

00:14:38.300 --> 00:14:40.460
effectively, we take all
the payers in a month,

00:14:40.460 --> 00:14:41.930
we put them into 10 buckets.

00:14:41.930 --> 00:14:44.070
People who paid the most
go in the first bucket,

00:14:44.070 --> 00:14:46.403
people who paid the second
most go in the second bucket,

00:14:46.403 --> 00:14:47.275
and so on.

00:14:47.275 --> 00:14:49.400
And what I'm going to talk
through in these slides,

00:14:49.400 --> 00:14:53.940
this is an example of a
fairly typical action RPG.

00:14:53.940 --> 00:14:57.830
And what you can see
is the top decile--

00:14:57.830 --> 00:14:59.990
the people who paid the most--

00:14:59.990 --> 00:15:02.720
$579 on average in a month.

00:15:02.720 --> 00:15:04.510
It's a pretty good amount.

00:15:04.510 --> 00:15:06.140
And the second best decile?

00:15:06.140 --> 00:15:08.222
$120 a month.

00:15:08.222 --> 00:15:10.430
And so this is kind of
falling into that 80-20 rule--

00:15:10.430 --> 00:15:11.870
this example game.

00:15:11.870 --> 00:15:15.260
Most of their revenue is coming
from the highest-paying users.

00:15:15.260 --> 00:15:17.360
But what about
all of these guys?

00:15:17.360 --> 00:15:21.620
50% of the monthly buyers
in this example game--

00:15:21.620 --> 00:15:23.120
and this isn't a
contrived example--

00:15:23.120 --> 00:15:25.290
this is a real example--

00:15:25.290 --> 00:15:26.255
paid less than $10.

00:15:28.770 --> 00:15:30.450
Is that an opportunity
for growth,

00:15:30.450 --> 00:15:32.367
or is that just something
we don't care about,

00:15:32.367 --> 00:15:34.670
because we only care about
the highest value users?

00:15:34.670 --> 00:15:37.880
To me, because I'm like the
ultimate growth mindset person,

00:15:37.880 --> 00:15:42.170
I think it's a real
opportunity, and in particular,

00:15:42.170 --> 00:15:45.290
if we actually take a look
at the number of unique days

00:15:45.290 --> 00:15:48.860
all of these monthly
buyers paid, half of them

00:15:48.860 --> 00:15:52.110
only paid on one single day.

00:15:52.110 --> 00:15:57.240
How easy would it be to get
these guys and gals to pay just

00:15:57.240 --> 00:15:59.085
one extra day out of the month?

00:15:59.085 --> 00:16:01.320
It doesn't seem like
it'd be that hard to me

00:16:01.320 --> 00:16:03.330
to provide them with the
right compelling value

00:16:03.330 --> 00:16:05.610
proposition which
incentivizes them to open up

00:16:05.610 --> 00:16:07.980
their wallets a second day.

00:16:07.980 --> 00:16:10.470
And actually what we've seen
when we look across virtually

00:16:10.470 --> 00:16:13.050
every game-- and I'd really
encourage you guys to check

00:16:13.050 --> 00:16:14.850
this yourselves--

00:16:14.850 --> 00:16:16.980
for most of the games--
most of the IAP games,

00:16:16.980 --> 00:16:19.980
somewhere between 40% and
60% of your monthly buyers

00:16:19.980 --> 00:16:23.350
are only going to
pay on one day.

00:16:23.350 --> 00:16:25.980
And so what's kind of the
real opportunity here?

00:16:25.980 --> 00:16:28.790
What should we be focusing
on, and where can we extract

00:16:28.790 --> 00:16:32.120
potentially the most value?

00:16:32.120 --> 00:16:35.360
In my mind, it's
taking a really focus

00:16:35.360 --> 00:16:38.900
on those users who are
only paying on one day--

00:16:38.900 --> 00:16:40.460
and again, with
this example game,

00:16:40.460 --> 00:16:42.950
what we see is 80%
of these buyers who

00:16:42.950 --> 00:16:45.160
only paid on one day--

00:16:45.160 --> 00:16:47.630
they paid less than $10.

00:16:47.630 --> 00:16:49.850
So this, to me, is
just this huge upside

00:16:49.850 --> 00:16:52.400
and this huge opportunity
to go after these users

00:16:52.400 --> 00:16:55.670
with very targeted offers,
very targeted sales,

00:16:55.670 --> 00:16:58.520
an exceptional, compelling
value proposition,

00:16:58.520 --> 00:17:01.140
and get them to open
up their wallets,

00:17:01.140 --> 00:17:05.329
because if your game had 50%
of the buyers who only paid

00:17:05.329 --> 00:17:09.740
on one day, and 80% of
them paid less than $10,

00:17:09.740 --> 00:17:12.710
think about if you can convert
half of them to paying another

00:17:12.710 --> 00:17:16.010
$5, another $2, another $10.

00:17:16.010 --> 00:17:17.704
That seems like a
huge upside to me.

00:17:17.704 --> 00:17:19.579
And it's one of the
great things because it's

00:17:19.579 --> 00:17:22.319
really, really sustainable.

00:17:22.319 --> 00:17:23.819
And so what I'd
really encourage you

00:17:23.819 --> 00:17:26.160
to do in terms of
improving performances,

00:17:26.160 --> 00:17:28.680
think about that
value proposition.

00:17:28.680 --> 00:17:30.900
Think about how you're
communicating the value

00:17:30.900 --> 00:17:32.430
for money to your users.

00:17:32.430 --> 00:17:34.590
How compelling is
it, how easy is

00:17:34.590 --> 00:17:39.210
it for your users to understand
what they're actually getting?

00:17:39.210 --> 00:17:42.230
I'd also encourage you to think
about your sales segmentation,

00:17:42.230 --> 00:17:45.788
and especially how you're
presenting it to users.

00:17:45.788 --> 00:17:47.580
One of the things I've
often seen in games,

00:17:47.580 --> 00:17:49.955
and I've often wondered about
this from a user psychology

00:17:49.955 --> 00:17:53.820
perspective, if I'm a low-value
user who occasionally spends

00:17:53.820 --> 00:17:56.850
$5, and a game
runs a major sale,

00:17:56.850 --> 00:17:59.700
and I see a $100
skew in the game,

00:17:59.700 --> 00:18:02.820
am I going to be excited about
the $5 offer you're giving me,

00:18:02.820 --> 00:18:06.390
or am I going to be upset seeing
the major value proposition

00:18:06.390 --> 00:18:08.093
given to high spenders?

00:18:08.093 --> 00:18:09.510
And I'm not even
going to spend my

00:18:09.510 --> 00:18:11.880
five, because I know
that my five won't

00:18:11.880 --> 00:18:14.520
let me compete with the guys
who are spending a hundred.

00:18:14.520 --> 00:18:16.680
So think about how you're
segmenting your users,

00:18:16.680 --> 00:18:18.540
and how you're
presenting those offers,

00:18:18.540 --> 00:18:19.950
and try to give
users offers that

00:18:19.950 --> 00:18:22.370
are targeted to their
personal spending habits

00:18:22.370 --> 00:18:25.090
and strongly appeal to them.

00:18:25.090 --> 00:18:29.070
Another one I want to get you
to think about his daily deals.

00:18:29.070 --> 00:18:31.108
And these are becoming
a lot more popular.

00:18:31.108 --> 00:18:33.150
But if you think about
some of the top games that

00:18:33.150 --> 00:18:36.900
are doing them, are they really
communicating value well?

00:18:36.900 --> 00:18:39.720
Are they communicating the
concept of scarcity well?

00:18:39.720 --> 00:18:41.490
And are they really
communicating

00:18:41.490 --> 00:18:44.223
almost like aspirational goals
for making that purchase?

00:18:44.223 --> 00:18:46.140
Because I think that the
notion of daily deals

00:18:46.140 --> 00:18:48.360
is extremely effective,
but I'd encourage

00:18:48.360 --> 00:18:50.570
you guys to try and up-level it.

00:18:50.570 --> 00:18:52.990
And the last one I'd
encourage you to think about

00:18:52.990 --> 00:18:55.560
is this notion of a
repeat buyer's bonus.

00:18:55.560 --> 00:18:59.280
What can you effectively
create which motivates users

00:18:59.280 --> 00:19:01.590
to spend every single week?

00:19:01.590 --> 00:19:05.480
And I'll throw out one that
I've been rolling around.

00:19:05.480 --> 00:19:07.220
What if your game--

00:19:07.220 --> 00:19:10.250
assuming, let's say you have
a game that has XP in it.

00:19:10.250 --> 00:19:14.570
What if you created, let's say,
a 10% XP bonus for anyone who

00:19:14.570 --> 00:19:16.130
purchases during the week?

00:19:16.130 --> 00:19:18.110
So if you purchase
any amount of money--

00:19:18.110 --> 00:19:22.062
$1 even-- you get a 10% bonus
for the next seven days.

00:19:22.062 --> 00:19:24.020
Is that really going to
hurt your game economy,

00:19:24.020 --> 00:19:26.540
or is that going to create a
compelling reason for users

00:19:26.540 --> 00:19:30.110
to purchase at any price
point every single week?

00:19:30.110 --> 00:19:31.700
I think it's the
latter, because I

00:19:31.700 --> 00:19:35.000
think that's an extremely
appealing benefit that users

00:19:35.000 --> 00:19:39.797
would get, plus, of course, the
IAP that they'd be purchasing.

00:19:39.797 --> 00:19:41.630
And now, the last thing
I want to talk about

00:19:41.630 --> 00:19:45.980
is optimizing secondary
metrics in here.

00:19:45.980 --> 00:19:48.140
I'm not going to have
any strong advice.

00:19:48.140 --> 00:19:50.150
This is more of a
food-for-thought thing,

00:19:50.150 --> 00:19:52.775
because I do think there's some
opportunities for us to improve

00:19:52.775 --> 00:19:55.420
our secondary metrics.

00:19:55.420 --> 00:19:59.000
And where I want to start off is
kind of looking at core metrics

00:19:59.000 --> 00:20:00.390
for--

00:20:00.390 --> 00:20:02.840
like kind of the percentiles
for the secondary metrics

00:20:02.840 --> 00:20:04.580
across Google Play.

00:20:04.580 --> 00:20:06.440
And if we look at
transactions per buyer--

00:20:06.440 --> 00:20:09.380
and this is across the
top 250 IAP games--

00:20:09.380 --> 00:20:12.260
we see that on any given day,
a user who purchases makes

00:20:12.260 --> 00:20:16.160
somewhere between 1.5
and 1.9 transactions,

00:20:16.160 --> 00:20:20.540
and they're doing so at a
price point of $8.50 to $25.

00:20:20.540 --> 00:20:23.960
And ultimately what this results
in is an average revenue per

00:20:23.960 --> 00:20:25.850
paying user,
depending on the game,

00:20:25.850 --> 00:20:30.950
of somewhere between
$13.70 and $44.50.

00:20:30.950 --> 00:20:34.170
That's a pretty
significant amount.

00:20:34.170 --> 00:20:37.805
But oftentimes it's coming
from a very small set of users.

00:20:37.805 --> 00:20:39.930
And so I think it's something
important to consider

00:20:39.930 --> 00:20:43.900
is, what's the relationship
between all of these metrics,

00:20:43.900 --> 00:20:47.020
and is there opportunities
for improvement?

00:20:47.020 --> 00:20:49.130
When we take a look at
how average transaction

00:20:49.130 --> 00:20:53.210
value on the x-axis compares to
average revenue per paying user

00:20:53.210 --> 00:20:55.970
on the y-axis, it's positive.

00:20:55.970 --> 00:20:57.470
It's linear.

00:20:57.470 --> 00:21:00.300
If you can get users to purchase
at a higher price point,

00:21:00.300 --> 00:21:02.810
you're going to get more
revenue out of them--

00:21:02.810 --> 00:21:05.095
obviously, that one.

00:21:05.095 --> 00:21:06.470
But I think the
key thing here is

00:21:06.470 --> 00:21:10.220
that given that the transactions
per buyer on a daily basis

00:21:10.220 --> 00:21:12.560
were only 1.5 to 1.9.

00:21:12.560 --> 00:21:15.980
The primary driver for average
revenue per paying user,

00:21:15.980 --> 00:21:19.280
it's coming from that
average transaction value.

00:21:19.280 --> 00:21:21.950
In contrast, when
we plot transactions

00:21:21.950 --> 00:21:24.530
per buyer on the x-axis,
an average revenue

00:21:24.530 --> 00:21:29.305
per paying user on the
y-axis is kind of just noise.

00:21:29.305 --> 00:21:30.680
We actually spent
a decent amount

00:21:30.680 --> 00:21:32.930
of time looking at cluster
analysis, curve fitting,

00:21:32.930 --> 00:21:35.681
and other options like that.

00:21:35.681 --> 00:21:38.890
We could not figure out
any reliable pattern

00:21:38.890 --> 00:21:41.195
to predict what
was going on here.

00:21:41.195 --> 00:21:42.820
And so this is one
of these areas where

00:21:42.820 --> 00:21:46.510
I think it's actually more tied
to a game's design and a game's

00:21:46.510 --> 00:21:47.800
core economy.

00:21:47.800 --> 00:21:50.258
And then with one of the things
I'm starting to think about

00:21:50.258 --> 00:21:52.660
is, how can we actually
leverage game design

00:21:52.660 --> 00:21:58.430
to bring more order to the
chaos that is this relationship?

00:21:58.430 --> 00:22:00.480
Game design has always
been one of my big things.

00:22:00.480 --> 00:22:02.063
And if you go way
back, I was actually

00:22:02.063 --> 00:22:03.740
a systems designer for years.

00:22:03.740 --> 00:22:06.350
And game economies are
one of my other loves.

00:22:06.350 --> 00:22:08.120
And it's always
figuring out, how

00:22:08.120 --> 00:22:10.140
do you create the right
appeal in your players?

00:22:10.140 --> 00:22:12.560
How do you incentivize the
right kind of sink rates?

00:22:12.560 --> 00:22:16.180
And what are the improvement
things that we can do?

00:22:16.180 --> 00:22:18.890
Because if you think about
that transactions per buyer--

00:22:18.890 --> 00:22:21.390
and I encourage you to think
about this from the perspective

00:22:21.390 --> 00:22:22.900
of your own game.

00:22:22.900 --> 00:22:25.420
Where do you fall
in this spectrum?

00:22:25.420 --> 00:22:28.180
Are you below the
25th percentile,

00:22:28.180 --> 00:22:31.690
and if you are below
the 25th percentile,

00:22:31.690 --> 00:22:34.000
how many assets are you
selling in your game?

00:22:34.000 --> 00:22:36.460
Do you only sell gems,
or only sell coins,

00:22:36.460 --> 00:22:38.360
or only sell credits?

00:22:38.360 --> 00:22:40.870
And if you do, what
kind of price points

00:22:40.870 --> 00:22:43.582
are you actually selling it at?

00:22:43.582 --> 00:22:45.040
Because what I want
you to consider

00:22:45.040 --> 00:22:48.760
is that if you have a low number
of transactions per buyer,

00:22:48.760 --> 00:22:51.640
and you're seeing a lot of them
being sold at very high price

00:22:51.640 --> 00:22:55.040
points, what's going to be
that velocity per money,

00:22:55.040 --> 00:22:58.000
or have you effectively created
a scenario where users are

00:22:58.000 --> 00:23:01.240
incentivized to buy the
largest pack possible because

00:23:01.240 --> 00:23:03.250
of the bonuses that
are on top of them,

00:23:03.250 --> 00:23:06.610
and then they ride those
assets for as long as possible?

00:23:06.610 --> 00:23:09.700
Because users know that they're
going to spend them eventually,

00:23:09.700 --> 00:23:13.660
so there's no urgency to
buy on multiple times.

00:23:13.660 --> 00:23:17.020
In contrast, if you're
above the 75th percentile,

00:23:17.020 --> 00:23:19.510
I think the first question
to ask is, how many assets

00:23:19.510 --> 00:23:21.220
are you selling?

00:23:21.220 --> 00:23:24.320
If you're selling two or more,
I think it's perfectly fine.

00:23:24.320 --> 00:23:26.230
I think you're in a
really healthy range.

00:23:26.230 --> 00:23:29.230
If you're only selling
one kind of asset,

00:23:29.230 --> 00:23:32.630
what impulse-buying
decision making

00:23:32.630 --> 00:23:34.990
are you actually
creating in your game?

00:23:34.990 --> 00:23:38.050
Have you created a scenario
where users are incentivized

00:23:38.050 --> 00:23:41.800
to make a small number
or a large number of very

00:23:41.800 --> 00:23:43.690
small transactions each day--

00:23:43.690 --> 00:23:46.390
$2, $2, $2.

00:23:46.390 --> 00:23:48.580
If you are, I think
there's a risk that you're

00:23:48.580 --> 00:23:51.760
leaving some money on the
table, because every time a user

00:23:51.760 --> 00:23:54.220
has to make a decision
about making a purchase,

00:23:54.220 --> 00:23:56.080
there's a chance
that they'll stop.

00:23:56.080 --> 00:23:57.580
And so if you do
have a case where

00:23:57.580 --> 00:24:00.590
a large number of transactions
are at very small price points,

00:24:00.590 --> 00:24:02.340
think about whether
there's an opportunity

00:24:02.340 --> 00:24:04.090
to upsell your users.

00:24:04.090 --> 00:24:06.730
Instead of showing them
$2 for x number of gems,

00:24:06.730 --> 00:24:09.550
give them a $2 offer and
give them a $5 offer.

00:24:09.550 --> 00:24:14.080
Present them with two choices,
and see if you can upsell them.

00:24:14.080 --> 00:24:15.910
Because at the end
of the day, I really

00:24:15.910 --> 00:24:17.577
do think that there's
some opportunities

00:24:17.577 --> 00:24:19.212
to optimize and
improve this area,

00:24:19.212 --> 00:24:20.920
but it's fundamentally
going to come down

00:24:20.920 --> 00:24:23.650
to you guys, the developers,
because each set of games

00:24:23.650 --> 00:24:25.023
is different.

00:24:25.023 --> 00:24:26.440
And so what I ask
you to encourage

00:24:26.440 --> 00:24:30.040
you to do is go back to
your development teams

00:24:30.040 --> 00:24:34.330
and ask questions like,
what's your velocity of money?

00:24:34.330 --> 00:24:36.100
How many impulse
purchases are players

00:24:36.100 --> 00:24:38.500
making on each and every day?

00:24:38.500 --> 00:24:41.370
Does your end game
incentivize asset hoarding?

00:24:41.370 --> 00:24:45.310
And in particular, how's
your game economy designed?

00:24:45.310 --> 00:24:47.980
Is it a capex economy,
where users are primarily

00:24:47.980 --> 00:24:49.150
purchasing assets--

00:24:49.150 --> 00:24:50.800
purchasing, let's say, gems--

00:24:50.800 --> 00:24:53.380
and spending them to
get permanent upgrades?

00:24:53.380 --> 00:24:55.720
Or is it more a case that
users are purchasing some sort

00:24:55.720 --> 00:24:58.480
of a consumable asset--
coins, credits--

00:24:58.480 --> 00:25:00.730
and they're spending them
as part of their daily play?

00:25:03.970 --> 00:25:06.100
And now, this is
kind of like one

00:25:06.100 --> 00:25:07.840
of my views in terms
of growth, in terms

00:25:07.840 --> 00:25:10.870
of how we build our business
and talk through all three

00:25:10.870 --> 00:25:13.292
of these areas.

00:25:13.292 --> 00:25:14.750
So just in the last
couple minutes,

00:25:14.750 --> 00:25:17.420
I want to give you what I
see as the key takeaways I'm

00:25:17.420 --> 00:25:19.820
hoping you'll take with you.

00:25:19.820 --> 00:25:22.490
Minimize volatility,
because that's

00:25:22.490 --> 00:25:24.830
going to be the biggest
driver for revenue growth.

00:25:24.830 --> 00:25:27.350
Figure out how your
LiveOps is performing,

00:25:27.350 --> 00:25:31.490
how you're balancing your
supply and demand side events,

00:25:31.490 --> 00:25:34.670
and see if you can actually
close that volatility,

00:25:34.670 --> 00:25:38.870
because what we've seen
from the top games on Play,

00:25:38.870 --> 00:25:43.040
the lower the daily volatility,
the more likely games

00:25:43.040 --> 00:25:45.940
are to see month
over month growth.

00:25:45.940 --> 00:25:49.100
I also want you to consider
what's the 80-20 rule

00:25:49.100 --> 00:25:50.270
look like in your game?

00:25:50.270 --> 00:25:54.560
How much revenue are the top
20% of your payers contributing,

00:25:54.560 --> 00:25:57.470
and is there an opportunity
to diversify and broaden

00:25:57.470 --> 00:26:01.460
your base to get users who
are only spending once per day

00:26:01.460 --> 00:26:04.880
or once per month to spend
a second time per month?

00:26:04.880 --> 00:26:07.670
Because what we've seen from
the top 25 games on Play,

00:26:07.670 --> 00:26:10.490
they're significantly less
reliant on their whales

00:26:10.490 --> 00:26:13.760
than other games that are
further down the top charts.

00:26:13.760 --> 00:26:17.780
And finally, just think
about your secondary metrics,

00:26:17.780 --> 00:26:20.540
because we see that average
transaction value and average

00:26:20.540 --> 00:26:21.980
revenue per paying user--

00:26:21.980 --> 00:26:24.470
there's a strong correlation,
but there's not much

00:26:24.470 --> 00:26:27.140
of a correlation-- no
correlation at all--

00:26:27.140 --> 00:26:29.170
between transactions per buyer.

00:26:29.170 --> 00:26:31.363
And I don't have a
solution for this one,

00:26:31.363 --> 00:26:33.530
but I think with all the
creative minds that are out

00:26:33.530 --> 00:26:37.130
in the audience in all
of your creative teams,

00:26:37.130 --> 00:26:39.260
I think one of you guys,
or many of you guys,

00:26:39.260 --> 00:26:41.870
can figure out a way to actually
improve this and optimize it

00:26:41.870 --> 00:26:44.490
to better grow your business.

00:26:44.490 --> 00:26:47.030
So, I hope you guys got some
benefit out of this today.

00:26:47.030 --> 00:26:48.590
I really appreciate
your time here.

00:26:48.590 --> 00:26:51.940
[APPLAUSE]

