WEBVTT
Kind: captions
Language: en

00:38:22.314 --> 00:38:24.314
Aye a software engineer that 
works 

00:38:26.591 --> 00:38:28.591
&gt;&gt; And I'm Will.

00:38:34.142 --> 00:38:36.142
working with  Flutter is 
expressive, 

00:38:37.223 --> 00:38:39.223
user experience.

00:38:40.528 --> 00:38:42.528
Flutter.

00:38:45.813 --> 00:38:47.813
Native mobile apps.

00:38:50.506 --> 00:38:52.539
and flexible, build high quality
experiences and iterate quickly.

00:38:54.596 --> 00:38:57.093
You can use Flutter today.being 
used by developers and 

00:38:58.102 --> 00:39:00.102
organizations around the world.

00:39:04.198 --> 00:39:06.198
library of widgets such as 
containers, 

00:39:07.456 --> 00:39:10.093
list views that are efficient, 
scrolling, gestures and more.

00:39:16.840 --> 00:39:18.840
adaptable design system backed 
by open 

00:39:20.667 --> 00:39:22.706
designers and developers make 
beautiful, usable products 

00:39:22.707 --> 00:39:24.707
faster.

00:39:27.401 --> 00:39:29.401
in millions of appings and sites
all around the world.

00:39:31.247 --> 00:39:35.106
What's new this year is material
seeming.Material seeming helps 

00:39:35.107 --> 00:39:37.408
you systematically apply brand 
throughoutior designs.

00:39:42.711 --> 00:39:44.711
flexible than ever, the shape, 

00:39:45.773 --> 00:39:49.259
topography, the animation curves
are brand.  You can even choose 

00:39:49.260 --> 00:39:51.913
material pal letters from our 
online color generator 

00:39:55.824 --> 00:39:57.870
for you and topo glovey themes. 
You -- topography themes.

00:40:04.245 --> 00:40:06.245
theme of their own.

00:40:09.610 --> 00:40:11.610
shape.

00:40:17.021 --> 00:40:19.021
that Flutter is a first class in
material design.

00:40:23.759 --> 00:40:23.953
From today forward, you will 
find documentation out for 

00:40:23.954 --> 00:40:25.954
material 

00:40:29.462 --> 00:40:31.462
suite and the material 
guidelines.

00:40:33.759 --> 00:40:35.759
embraced each other.

00:40:37.672 --> 00:40:39.672
them?

00:40:43.817 --> 00:40:46.885
You can do everything we're 
about to do at home today.retail

00:40:46.886 --> 00:40:50.568
app.  I love the clothes.  I 
love the home goods, but 

00:40:59.329 --> 00:41:01.972
&gt;&gt; Mary:  Who else has seen an 
app like this.  Yeah.  Google 

00:41:01.973 --> 00:41:04.005
Docs.similar.

00:41:08.137 --> 00:41:10.137
Many apps faintfuly follow the 
material guidelines.

00:41:14.056 --> 00:41:16.056
Google's brand.

00:41:17.713 --> 00:41:19.713
We want your apps to look like 
your brand.

00:41:30.408 --> 00:41:32.408
theming to shrine and show how 
it is 

00:41:35.306 --> 00:41:37.306
customizable widgets, layouts 
and themes.

00:41:38.770 --> 00:41:43.262
fields and back drop.  And 
delightful.  Offering tools and 

00:41:43.263 --> 00:41:45.263
easier sensibility of 
components.

00:41:50.586 --> 00:41:52.586
In flutter, a budget is pretty 
much everything.

00:41:54.650 --> 00:41:57.538
your cards, yourtectfields, all 
your views are widgets.

00:42:01.229 --> 00:42:04.505
ones and we'll show you how to 
do that today too.  Material 

00:42:04.506 --> 00:42:06.506
components is a library of 

00:42:07.547 --> 00:42:09.547
are expressive, enhanced and 
delightful to work with.

00:42:11.641 --> 00:42:13.904
this app.  We have already built
it.

00:42:18.840 --> 00:42:20.840
enhance it now.

00:42:22.498 --> 00:42:24.498
our designer gave us.

00:42:31.659 --> 00:42:33.659
Great.

00:42:35.117 --> 00:42:37.117
&gt;&gt; Will:  Will you code?

00:42:39.599 --> 00:42:41.599
I will stand here and talk 
because I 

00:42:42.854 --> 00:42:44.854
have created the tension.

00:42:46.327 --> 00:42:48.327
imported the material Flutter 
package in 

00:42:50.793 --> 00:42:52.793
all of our apps files.

00:42:54.039 --> 00:42:56.089
Here is Shrine's log in page.
here's its home page.

00:42:59.145 --> 00:43:01.195
Both of those pages are routed 
to the screen by the shrine app 

00:43:01.196 --> 00:43:03.196
widget.

00:43:05.102 --> 00:43:07.102
is what gets passed into the 
main 

00:43:09.778 --> 00:43:11.778
function, which is run when we 
start our app.

00:43:14.048 --> 00:43:16.484
material app budget in its built
function.  Let's take a look at 

00:43:16.485 --> 00:43:18.485
that widget.

00:43:21.775 --> 00:43:25.038
set to a home page widget which 
we built just for shrine.  

00:43:25.039 --> 00:43:27.039
There's also a theme property 
and you 

00:43:29.551 --> 00:43:31.804
passe theme dat in the apps 
constructor, all the decendents 

00:43:31.805 --> 00:43:34.849
in the app will have to them.  
Let's have the color theme our 

00:43:35.873 --> 00:43:37.873
designer gave us.

00:43:40.536 --> 00:43:42.569
you need in that like primary 
and secondary colors, background

00:43:42.570 --> 00:43:44.609
and a modules.

00:43:48.061 --> 00:43:50.290
It also has the colors you need 
that are drawn on the primary, 

00:43:50.291 --> 00:43:54.411
secondary surface colors.  There
is a primary varyiant for any 

00:43:56.459 --> 00:43:58.459
time the primary color is 
against 

00:44:00.334 --> 00:44:02.334
and that combination is 
inaccessible.

00:44:05.065 --> 00:44:07.542
We've already copied the shrine 
color copies.little swatches of 

00:44:07.543 --> 00:44:09.543
the colors on the left side next
to the line number.

00:44:13.033 --> 00:44:15.278
will also appear in this way.  
The material package already has

00:44:19.789 --> 00:44:21.789
red, but shrine's designer is 
using 

00:44:23.098 --> 00:44:25.330
custom branded colors like 
millennial Mary started a theme 

00:44:25.331 --> 00:44:27.376
already.  She will add those 
colors to it.

00:44:31.086 --> 00:44:33.561
global level.  She's changing 
some of the values.

00:44:37.242 --> 00:44:39.242
She's adding a primary texting 
from a she built herself.

00:44:42.144 --> 00:44:44.417
It's going to use as a base the 
existing primary text theme and 

00:44:44.418 --> 00:44:46.418
then 

00:44:48.509 --> 00:44:50.509
to change one of the values to 
be brown.

00:44:55.492 --> 00:44:57.492
Now she's adding an icon theme.

00:44:58.747 --> 00:45:00.981
start with the base theme and 
then change the values that she 

00:45:00.982 --> 00:45:02.982
wants to be different.

00:45:06.003 --> 00:45:08.003
23, way is a common method T.

00:45:11.044 --> 00:45:16.148
allows to you copy in an 
instance and you put inside.  

00:45:16.149 --> 00:45:18.149
Now she will set the button 
color for 

00:45:19.387 --> 00:45:21.439
raised or contained  buttons.  
Reload.

00:45:27.005 --> 00:45:29.005
&gt;&gt; Mary.  What do you think?

00:45:35.986 --> 00:45:37.986
Let's work on the fond of those 
titles, please.

00:45:40.649 --> 00:45:43.504
font for large type like titles 
and headlines.  I always thought

00:45:43.505 --> 00:45:45.505
that font family sounded so 
wholesome.

00:45:48.457 --> 00:45:53.544
matches our logo now.  It's not 
default Roboto for larger Now to

00:45:53.545 --> 00:45:55.545
the log in screen.

00:45:58.867 --> 00:46:01.313
it has a build method.  In it, 
you construct your UI.

00:46:04.981 --> 00:46:07.980
build function has a safe area 
which can account

00:46:11.340 --> 00:46:16.220
for the top notch for the logo 
phone.has it in a list view.  We

00:46:16.221 --> 00:46:18.221
could have used a column widget,

00:46:22.943 --> 00:46:24.943
screens and when the keyboard 
appears.

00:46:26.401 --> 00:46:30.483
Note that the buildtectfield 
function returns a widget.  This

00:46:30.484 --> 00:46:33.147
is called in our build function.
We can even pass in our own 

00:46:33.148 --> 00:46:38.883
parameters this function.  It is
not a static layout.  Right now,

00:46:38.884 --> 00:46:40.884
the text field is 

00:46:43.582 --> 00:46:46.230
global color themes primary 
color as its active color.  You 

00:46:46.231 --> 00:46:48.231
can see when she's typing, the 

00:46:49.677 --> 00:46:50.283
place holder and underline 
decoration is not very 

00:46:50.284 --> 00:46:52.284
accessible.

00:46:54.382 --> 00:46:56.382
primary color or just change the
primary 

00:46:58.050 --> 00:47:00.050
color of our textfield to the 
primary variant.

00:47:02.719 --> 00:47:04.719
ride the ancestors theme by 
wrapping it in a new theme.

00:47:08.173 --> 00:47:10.173
If we press

00:47:12.516 --> 00:47:14.516
the copy of the theme that has 
the 

00:47:15.976 --> 00:47:17.976
primary variant as its primary 
color.

00:47:19.056 --> 00:47:22.932
you're doing.  Our material 
theme has a shape story that's 

00:47:22.933 --> 00:47:24.933
angled based on our logo.

00:47:26.192 --> 00:47:28.192
the shape of the next button to 
the beveled border widget.

00:47:31.482 --> 00:47:33.482
provides out of the box.

00:47:36.308 --> 00:47:38.308
It takes the size you want the 
cuts to be.

00:47:42.054 --> 00:47:46.158
eight sided F. you're working 
without a designer or you're a 

00:47:46.159 --> 00:47:48.159
designer yourself, we now have 

00:47:52.703 --> 00:47:54.703
a fool tool that can help you 
generate pallets.

00:47:55.783 --> 00:47:57.222
We had one we were using 
consistently to use more 

00:47:57.223 --> 00:48:00.089
consistently.  You can go to 
this website material.

00:48:07.056 --> 00:48:09.056
to go with that color.

00:48:12.992 --> 00:48:14.992
shrine would look if it were 
built from charcoal.

00:48:16.440 --> 00:48:18.672
colors earlier in our file.  
Mary is changing to an alternate

00:48:18.673 --> 00:48:20.673
theme 

00:48:21.740 --> 00:48:26.415
colors.  See?  Very different 
alternative theme.  Very  

00:48:26.416 --> 00:48:28.416
easily.

00:48:35.576 --> 00:48:37.576
can express your brand, but what
about layout?

00:48:39.706 --> 00:48:41.706
has read new guidelines and 
decided to 

00:48:43.161 --> 00:48:45.161
make an asymmetric layout part 
of our material name.

00:48:47.021 --> 00:48:49.021
moment, our product are displayd
in a 

00:48:50.100 --> 00:48:52.100
simple grid of card with images.

00:48:56.001 --> 00:48:58.888
up into 3s with asymmetric 
alignment, aspect ratios 

00:48:58.889 --> 00:49:02.146
inspired by the angles in our 
logo.custom designed just for 

00:49:02.147 --> 00:49:04.147
our app.

00:49:05.199 --> 00:49:10.086
We will use a completely custom 
widget made earlier.  It is 

00:49:10.087 --> 00:49:12.087
based on view components.

00:49:13.582 --> 00:49:16.034
By the way, you can find the 
source everything we are doing 

00:49:16.035 --> 00:49:18.035
in the material code labs.

00:49:19.323 --> 00:49:21.762
Mary removed the widget we had 
and asymmetric view.

00:49:25.021 --> 00:49:27.036
It is built on top of a Flutter 
list view, they're recycled as 

00:49:27.037 --> 00:49:29.037
we scroll.

00:49:30.280 --> 00:49:32.522
list views let you specify the 
direction and we set it to 

00:49:32.523 --> 00:49:34.523
horizontal.

00:49:35.994 --> 00:49:40.045
100 lines.  It is a very 
expensive looking component 

00:49:40.046 --> 00:49:42.732
that's -- Oh.  What's going on?

00:49:48.649 --> 00:49:50.649
that scarf.

00:49:54.172 --> 00:49:56.172
Thank you, Mary.

00:49:57.680 --> 00:49:59.680
Anyway, so  Flutter let's you 
develop 

00:50:02.375 --> 00:50:04.375
deployed in Android and I/O S.

00:50:07.057 --> 00:50:09.057
I want to see how it looks on 
iOS.

00:50:14.629 --> 00:50:16.629
We will show how easy it is to 
switch.

00:50:18.914 --> 00:50:21.570
simulator.  Okay.  Great.

00:50:24.827 --> 00:50:26.827
Will has showed us how you can 
express your brand.

00:50:30.703 --> 00:50:32.524
about enhancements to material 
can help make it easy for you to

00:50:32.525 --> 00:50:34.525
use existing 

00:50:35.787 --> 00:50:37.787
and use guidance to build the 
components 

00:50:38.834 --> 00:50:40.834
that, well, you know, also 
express your brand.

00:50:43.539 --> 00:50:50.502
border.  Our text fields just 
have a line on is a text field. 

00:50:50.503 --> 00:50:52.503
The outline wraps the whole text
field 

00:50:53.780 --> 00:50:55.621
with a border, making it obvious
that something that uses can 

00:50:55.622 --> 00:50:58.461
fill in.  Now you might be 
wondering how do we 

00:51:02.125 --> 00:51:03.948
better design system or that 
material design is a great 

00:51:03.949 --> 00:51:05.987
design system.research.

00:51:09.242 --> 00:51:11.242
And it turns out that the types 
of 

00:51:13.519 --> 00:51:16.193
textfields are much more 
performance and likely to use 

00:51:16.194 --> 00:51:19.479
them.  They know it's a call to 
action.  That's why we're using 

00:51:19.480 --> 00:51:24.199
it here.also watch the talk  
measuring material to learn more

00:51:24.200 --> 00:51:26.200
about material research.

00:51:28.109 --> 00:51:30.109
that looks great, but it doesn't
look as 

00:51:31.169 --> 00:51:33.169
edgy as the shrine brand really 
S.

00:51:36.877 --> 00:51:38.877
with material design unless you 
are using a cut cons border T.

00:51:41.589 --> 00:51:46.525
field outline.  So that it can 
match the buton and it can match

00:51:46.526 --> 00:51:49.570
our shrine logo.  There.great.

00:51:53.427 --> 00:51:55.427
Well, we can see our password.

00:52:00.752 --> 00:52:02.752
know that my password is 
YAZresearch.

00:52:06.914 --> 00:52:08.914
own password so that we can hide
our password.

00:52:11.190 --> 00:52:13.432
built our textfields using our 
own function and it returns a 

00:52:13.433 --> 00:52:15.433
widget.

00:52:16.688 --> 00:52:19.962
build function.  Great.  Now 
that we spruced up our log in 

00:52:24.480 --> 00:52:26.480
home page.

00:52:28.424 --> 00:52:34.543
Our home page currently is one 
page with a menu bar.drop.  A 

00:52:34.544 --> 00:52:36.544
back drop allows you to have two
layers in your app.

00:52:40.008 --> 00:52:42.451
the menu and some  content 
rather than having a menu pop in

00:52:42.452 --> 00:52:44.452
from the side.

00:52:46.978 --> 00:52:48.978
remove the app bar from our 
current 

00:52:51.686 --> 00:52:53.686
version because the back drop 
comes with an app bar.

00:52:56.590 --> 00:52:58.590
from guidance from material by 
design.

00:53:01.702 --> 00:53:04.373
You can do layouts and 
navigation can  exist.he's done,

00:53:04.374 --> 00:53:07.263
that he's going to remove the 
home page from our home property

00:53:07.264 --> 00:53:09.264
in our 

00:53:10.933 --> 00:53:12.933
replace that with the back drop.
It is essentially just a stack.

00:53:15.697 --> 00:53:18.134
layering various components on 
top of each other.  For example,

00:53:18.135 --> 00:53:20.135
a footer.

00:53:22.033 --> 00:53:24.033
front panel and back panel.

00:53:25.310 --> 00:53:28.161
The front panel is the home page
and our back panel will be a 

00:53:28.162 --> 00:53:30.162
menu page.

00:53:31.420 --> 00:53:33.420
It has a shrine edge.  We added 
that as well.

00:53:36.563 --> 00:53:39.614
icon and seeing whether or not 
it goes up and down.  No because

00:53:39.615 --> 00:53:42.480
we have not implementd that yet.
Okay.  So let's do that now.

00:53:46.144 --> 00:53:50.846
And to do this, we need to use a
transition or animation.a 

00:53:50.847 --> 00:53:52.899
positioned transition.  
Essentially, this is just a way 

00:53:52.900 --> 00:53:54.900
for 

00:53:59.856 --> 00:54:01.291
you're -- my child widget, you 
start off at this size and 

00:54:01.292 --> 00:54:05.169
location and you will and 
location.  For this case, we 

00:54:05.170 --> 00:54:07.224
want to animate from closed, 
which is the bottom to open, 

00:54:10.059 --> 00:54:12.059
with the whole home screen open.
So let's start with the panel 

00:54:12.507 --> 00:54:14.507
animation.

00:54:19.060 --> 00:54:21.060
This is the way you tell your 

00:54:22.940 --> 00:54:24.989
to start off with certain 
location and size and where it 

00:54:24.990 --> 00:54:26.990
should end.

00:54:29.476 --> 00:54:31.698
and a controller.  So Will is 
typing that out now.

00:54:34.977 --> 00:54:36.977
We have predefined what the 
panel 

00:54:41.131 --> 00:54:43.178
the height of the app bar should
be and also we need a pass and a

00:54:43.179 --> 00:54:45.179
controller.

00:54:46.636 --> 00:54:50.086
responsible for orchestrating 
the actual animation.  Every 

00:54:50.087 --> 00:54:52.333
frame that is drawn is 
determined by it.

00:54:55.980 --> 00:54:58.052
We now pass the panel animation 
into a position transition 

00:54:58.053 --> 00:55:02.995
widget.different transitions.  
For example, fading, rotation, 

00:55:02.996 --> 00:55:04.996
scaling and much  more.

00:55:08.727 --> 00:55:10.727
of the box so all you have to do
is use them.

00:55:11.996 --> 00:55:14.659
It takes in a rectangle 
property, animation and it takes

00:55:14.660 --> 00:55:17.098
in the child, which is the child
we want to animate up and down.

00:55:20.145 --> 00:55:22.590
try animating.  There we go.

00:55:29.137 --> 00:55:31.137
controller.

00:55:32.986 --> 00:55:35.877
for drawing the new frames.  
Well, let's take a look at it.

00:55:40.158 --> 00:55:43.223
and this is the code that is 
used.  It is open source.can see

00:55:43.224 --> 00:55:45.263
that it animates from the value 
0 and 1.

00:55:48.509 --> 00:55:50.509
You know how I said that Nutter 
comes 

00:55:53.777 --> 00:55:58.318
of --  NutFlutter comes with a 
lot of animation, well, they 

00:55:58.319 --> 00:56:04.437
animate.  Okay.material 
guidelines also suggest that for

00:56:04.438 --> 00:56:09.537
a back drop users would like to 
tap on the top.switch to the 

00:56:09.538 --> 00:56:13.807
Android phone.button.  I'm 
sorry.  It's live.

00:56:17.476 --> 00:56:19.476
simulator.

00:56:21.972 --> 00:56:23.972
There we go.

00:56:26.456 --> 00:56:28.456
Back to the back drop version.

00:56:29.945 --> 00:56:32.803
the material guidelines say that
you want to tap on the top of 

00:56:32.804 --> 00:56:34.804
your back drop 

00:56:36.274 --> 00:56:38.726
and down as well as tapping on 
the app bar itself.  Currently 

00:56:38.727 --> 00:56:40.727
tapping on the top doesn't do 
anything.

00:56:46.854 --> 00:56:49.801
Flutter comes with a lot of 
gesture detectors.be extensible.

00:56:51.225 --> 00:56:53.878
They take in a function.  
Functions are first class 

00:56:53.879 --> 00:56:55.879
objects in 

00:56:58.178 --> 00:57:00.245
that we can pass in any function
and have your tap and gesture do

00:57:00.246 --> 00:57:02.246
anything you want.

00:57:04.293 --> 00:57:06.293
change a variable, other things 
like that.

00:57:09.337 --> 00:57:11.337
So Will is now setting that up.

00:57:12.787 --> 00:57:15.458
There we go.  Now when you tap 
on the back drop of, 

00:57:20.566 --> 00:57:22.566
&gt;&gt; Will:  Mary, I did it wrong.

00:57:23.821 --> 00:57:25.821
Classic Will.

00:57:27.038 --> 00:57:29.584
Mary   &gt;&gt; Mary:  That's okay.

00:57:33.315 --> 00:57:39.021
&gt;&gt; Will:  Oh.  There we go.  
Cool.  We're all set.

00:57:43.954 --> 00:57:45.578
Well, now you have seen how all 
the enhanced new things for 

00:57:45.579 --> 00:57:47.579
material have 

00:57:49.476 --> 00:57:51.476
an app that is much more 
enhanced and, 

00:57:54.182 --> 00:57:56.182
well, kind of cool and much more
unique.

00:57:57.209 --> 00:57:57.638
Now we're going to talk about 
how delightful the experience 

00:57:57.639 --> 00:57:59.639
is.

00:58:02.548 --> 00:58:04.548
you want to make changes to that
code.

00:58:06.623 --> 00:58:09.459
now our image and our text are 
very close together.  We want to

00:58:09.460 --> 00:58:11.460
put some space between the two.

00:58:13.565 --> 00:58:15.394
you know, you can look at the 
image and admire the goods and 

00:58:15.395 --> 00:58:18.501
then look down and see the price
tag.How do we do that?

00:58:22.231 --> 00:58:24.231
Well, we can use the Flutter and
inspenaltior.

00:58:27.345 --> 00:58:31.480
exact line of code where that 
widget was being created.  Now 

00:58:31.481 --> 00:58:34.391
Will is going to demo the 
inspector.Yougist tap on the 

00:58:34.392 --> 00:58:37.032
inspect button.  If you tap 
anywhere on your app, it 

00:58:42.550 --> 00:58:44.776
box will take to you the exact 
widget for that app.

00:58:53.422 --> 00:58:55.879
it shows  that -- well, I think 
your inspentor is running  for 

00:58:55.880 --> 00:58:57.880
-- inspector 

00:59:03.023 --> 00:59:05.023
&gt;&gt; Will:  We have the widgetry.

00:59:06.730 --> 00:59:08.730
thing that is being drawn.

00:59:11.028 --> 00:59:13.513
widgets you have drawn.  Not 
only yours, but widgets that are

00:59:14.735 --> 00:59:16.735
being drawn by part of the 
system.

00:59:18.557 --> 00:59:20.557
They are drawn in bold color.

00:59:23.357 --> 00:59:25.357
Well, here we'll know this 
actually 

00:59:30.112 --> 00:59:32.345
which is responsible for drawing
the card with the image and 

00:59:32.346 --> 00:59:34.346
text.

00:59:35.405 --> 00:59:39.282
widget.  Remember this is given 
to us and we didn't build it.

00:59:42.337 --> 00:59:45.178
it.  All right.  Inside the 
product card, there are two 

00:59:46.196 --> 00:59:51.753
functions.  Build image andtect.
arranged in a column.  We want a

00:59:51.754 --> 00:59:53.754
space between the two.

00:59:55.468 --> 00:59:56.680
We look at our column and note 
that it cross alignment and 

00:59:56.681 --> 00:59:59.329
center.  There is no main access
alignment.

01:00:05.875 --> 01:00:08.329
through reading -- trying stuff 
out, usually even checking in 

01:00:08.330 --> 01:00:11.189
the inspector properties that 
are being  defined, you 

01:00:15.278 --> 01:00:19.374
will find our main access 
alignment is start.  What does 

01:00:19.375 --> 01:00:21.375
that mean?

01:00:23.703 --> 01:00:25.754
the direction you want things to
begin in the scroll direction.

01:00:32.074 --> 01:00:34.074
start at the top.

01:00:36.796 --> 01:00:39.647
that inside the space allotted 
to our product card, maybe our 

01:00:39.648 --> 01:00:41.648
text will center 

01:00:43.315 --> 01:00:45.315
align itself to the beginning.

01:00:49.452 --> 01:00:51.909
There.  There's a little bit of 
space.  But that's not enough.

01:00:53.944 --> 01:00:56.819
Let's change that to end.  We 
want more space.

01:01:03.166 --> 01:01:05.166
There.  That looks much better.

01:01:10.180 --> 01:01:13.041
between.  Let's also change your
image aspect ratio.

01:01:16.291 --> 01:01:18.291
images have an image ratio.  I 
want it to be one.

01:01:20.571 --> 01:01:22.571
I want them to be square.

01:01:27.523 --> 01:01:29.589
Okay.great.

01:01:32.650 --> 01:01:36.768
But who here has had a cat walk 
across their key board?  There's

01:01:36.769 --> 01:01:39.408
more than that I'm sure.Well, 
cats are the number 1 cause of 

01:01:40.055 --> 01:01:42.055
typos in code.  It's a proven 
fact.

01:01:44.936 --> 01:01:47.371
I never actually made a mistake 
in code even today.  It was a 

01:01:47.372 --> 01:01:49.372
cat.

01:01:52.460 --> 01:01:54.460
your cat's name?

01:02:00.616 --> 01:02:02.616
He's my cat Nate.  You loved it.

01:02:06.973 --> 01:02:11.651
negated the aspect ratio and so 
now it is negative 1.happens?  

01:02:11.652 --> 01:02:14.114
Your aploop is going to crash, 
right?  It is negative 1 and the

01:02:14.115 --> 01:02:16.343
compiler because it is still 
Afloat.

01:02:19.453 --> 01:02:21.453
Only the part that the widget 
like has a negative 1.

01:02:25.302 --> 01:02:27.724
widget crashes.  Everything else
still works and your app still 

01:02:27.725 --> 01:02:33.689
scrolls.menu.  Let's change that
back and reload and see what 

01:02:33.690 --> 01:02:35.690
happens.

01:02:38.413 --> 01:02:43.308
There.  All right.  All fixed.
this is one the cool things 

01:02:43.309 --> 01:02:45.554
about Flutter.  We have been 
making changes and they 

01:02:50.251 --> 01:02:52.251
Only the widgets being changed 
are being redrawn.

01:02:57.006 --> 01:03:00.128
you sought colors that would 
show up immediately.  Asymmetric

01:03:00.129 --> 01:03:02.129
layout.

01:03:04.808 --> 01:03:06.226
rebuild UI and try things out.  
If it doesn't work out, that's 

01:03:06.227 --> 01:03:08.227
okay.

01:03:09.699 --> 01:03:11.699
You don't waste that much time.

01:03:14.264 --> 01:03:16.264
preserved during hot reload.

01:03:21.499 --> 01:03:25.780
We have been reformatting our 
code.labels do the code.  They 

01:03:25.781 --> 01:03:28.674
tell you which wing it has just 
finished.  Let's see what it 

01:03:28.675 --> 01:03:30.675
looks like.There.  See?

01:03:34.784 --> 01:03:37.245
Now you know you have a text.  
You can tell what the braces 

01:03:37.246 --> 01:03:39.330
mean.  Great.

01:03:42.830 --> 01:03:46.298
Will, I think that looks pretty 
good.  What do you think?  I 

01:03:46.299 --> 01:03:48.299
think that looks lovely.

01:03:50.206 --> 01:03:52.206
It doesn't look like anything 
like the 

01:03:53.916 --> 01:03:55.916
generic blue aprope when we 
started.

01:04:01.438 --> 01:04:03.438
Flutter.

01:04:05.750 --> 01:04:07.750
our app can be.

01:04:10.720 --> 01:04:12.365
enhancements to material 
components you can use today in 

01:04:12.366 --> 01:04:14.366
Nutter.

01:04:16.022 --> 01:04:18.058
&gt;&gt; Will:  All the Flutter 
tooling made it a delightful 

01:04:18.059 --> 01:04:20.112
experience for all of us.

01:04:25.847 --> 01:04:27.847
but there's going to take too 
much time.

01:04:29.712 --> 01:04:31.712
components, your designs and 
code live in the same world.

01:04:36.872 --> 01:04:39.511
material  theming, it is no big 
deal if says let's change 

01:04:39.512 --> 01:04:43.394
everything that's light blue to 
dark blue.designer anymore.

01:04:46.876 --> 01:04:48.111
We want to you spend less time 
on boiler plate and more time 

01:04:48.112 --> 01:04:50.112
building the that make your apps
special.

01:04:54.042 --> 01:04:56.042
Flutter material package today.

01:04:57.102 --> 01:04:59.102
where you can code everything we
talked about in this  talk.

01:05:02.430 --> 01:05:04.430
the code lab in I/O.

01:05:11.278 --> 01:05:13.278
reactive mobile apps with Flut 
are.

01:05:18.423 --> 01:05:20.461
for you to ask  questions and in
the Sandbox today.

01:05:23.735 --> 01:05:25.735
&gt;&gt; Will:  Everything else you 
need is 

01:05:27.814 --> 01:05:29.814
on Flutter Flutter.

01:05:33.118 --> 01:05:35.983
IO and material.IO.

01:05:41.753 --> 01:05:43.753
.  Thank you!

01:29:18.948 --> 01:29:20.394
Analyze your audience and 
benchmark met ridges to grow on 

01:29:20.395 --> 01:29:22.395
Google Play.

01:29:25.277 --> 01:29:27.277
amazing data into metrics urine 
sights 

01:29:28.290 --> 01:29:30.290
and

01:29:54.817 --> 01:29:56.847
This is is a really big job.  I 
will give you a good idea about 

01:29:56.848 --> 01:29:59.092
that.There are loads and loads 
about highway 

01:30:02.538 --> 01:30:04.804
you can go about that and I'm 
sure all companies think about 

01:30:04.805 --> 01:30:07.674
this kind of challenge every 
day.  You'll have your unique 

01:30:07.675 --> 01:30:09.675
ways to do it.

01:30:10.749 --> 01:30:13.629
the way the times Dario and I 
think about it is around mental 

01:30:13.630 --> 01:30:15.630
model of a 

01:30:16.916 --> 01:30:19.758
probably quite familiar to a few
of you.  Now the user life cycle

01:30:19.759 --> 01:30:21.759
starts with acquisition.

01:30:23.847 --> 01:30:25.847
The first phase of building a 
business 

01:30:28.781 --> 01:30:30.611
and getting a  user to your 
Apple game.Discovery and 

01:30:30.612 --> 01:30:32.856
acquisitions is about getting if
front of the user, persuading 

01:30:36.143 --> 01:30:37.362
interesting game or app that you
have a really interesting 

01:30:37.363 --> 01:30:39.363
product that you want 

01:30:40.816 --> 01:30:42.816
eventually persuading them to 
tap on 

01:30:43.898 --> 01:30:45.898
that button and installing it.

01:30:48.162 --> 01:30:53.087
where the fun begins.  After the
install, you get engagement and 

01:30:53.088 --> 01:30:55.088
monittization.

01:30:57.370 --> 01:30:59.370
they get them, open them and 
love all 

01:31:00.414 --> 01:31:04.321
the work you and your teams are 
doing and paying you as well.It 

01:31:04.322 --> 01:31:06.322
will be great if this were the 
end of 

01:31:08.217 --> 01:31:09.462
the story if everybody you 
acquired just again and again 

01:31:09.463 --> 01:31:11.463
and again.

01:31:13.183 --> 01:31:17.900
But unfortunately it's not.  At 
some pint, there's also the The 

01:31:17.901 --> 01:31:19.549
point where someone for whatever
reason decides to remove you 

01:31:19.550 --> 01:31:21.550
from their 

01:31:23.086 --> 01:31:25.521
then they become a lost user.  
It would be really sad if this 

01:31:25.522 --> 01:31:27.522
was the end of the story as 
well.

01:31:30.014 --> 01:31:32.074
But increasingly, the  user life
cycle ends like this with 

01:31:32.075 --> 01:31:34.075
persuading people to come back 
again.

01:31:39.767 --> 01:31:41.767
chance and telling you about the

01:31:49.795 --> 01:31:51.795
This is a sketch is how our 
teams 

01:31:56.984 --> 01:32:01.050
the information you need to be 
able to optimize each part of 

01:31:56.984 --> 01:31:58.984
this.

01:32:03.025 --> 01:32:05.283
come across to you, who doesn't 
find you.  And for every person 

01:32:05.284 --> 01:32:07.284
who finds and you 

01:32:08.787 --> 01:32:09.824
there's another for who whatever
reason doesn't choose to 

01:32:09.825 --> 01:32:11.825
install.

01:32:14.127 --> 01:32:15.996
person that becomes engaged, 
there's another that installs 

01:32:15.997 --> 01:32:19.690
and you doesn't use you all the 
time.someone who does or doesn't

01:32:19.691 --> 01:32:21.691
monetize.

01:32:24.990 --> 01:32:26.990
And then lastly, for everybody 
who you 

01:32:28.648 --> 01:32:30.648
come back, there's another one 
not 

01:32:33.352 --> 01:32:35.352
convinced to come back and give 
you a second chance.

01:32:40.078 --> 01:32:44.376
minimize all of the bad parts 
and parts.  And that's what our 

01:32:44.377 --> 01:32:46.377
teams do.

01:32:47.877 --> 01:32:49.877
We build tools and insights to 
help 

01:32:51.382 --> 01:32:53.629
maximize the good parts and 
minimize the bad parts.  Now the

01:32:53.630 --> 01:32:56.063
reason the three of us are 
excited to be here today and to 

01:32:56.064 --> 01:32:58.915
talk to all of you is because 
over the last year 

01:33:04.263 --> 01:33:07.131
teams have been building 
successively more tools, more 

01:33:07.132 --> 01:33:09.132
insights and more 

01:33:10.591 --> 01:33:12.433
successful businesses on play 
and on Android and that's what 

01:33:12.434 --> 01:33:15.498
we will talk to you today.
exciting launches we have made 

01:33:15.499 --> 01:33:17.499
recently that we made this week 
and that is 

01:33:21.438 --> 01:33:23.438
optimize your user life  cycles.

01:33:26.632 --> 01:33:28.632
start at the beginning of the 
user life cycle.

01:33:32.063 --> 01:33:34.063
with user acquisition and I am 
happy to welcome Tamzin.

01:33:39.153 --> 01:33:44.982
My name is Tamzin Taylor.  
Sorry, guys.think I am the 

01:33:44.983 --> 01:33:48.656
luckiest person here because I 
get paid to work with every day.

01:33:50.881 --> 01:33:53.154
I get to help them understand 
their businesses better, help 

01:33:53.155 --> 01:33:55.155
them identify and improve their 
business.

01:34:00.963 --> 01:34:01.991
In a way, I am living 
vicariously through their 

01:34:01.992 --> 01:34:08.735
success.that comes up with these
partners is the same question.  

01:34:08.736 --> 01:34:10.993
Hue can I improve my 
discoverability?can I get in 

01:34:10.994 --> 01:34:13.694
front of more  users?  How can I
stand out from the crowd?

01:34:17.573 --> 01:34:19.573
I get more installs?  Does this 
sound like something you're 

01:34:20.239 --> 01:34:24.128
interested in?  Excellent.
nodding of heads.  You're in the

01:34:24.129 --> 01:34:26.129
right spot.

01:34:27.797 --> 01:34:28.811
In the next 15 minutes, I'm 
going to things that we're doing

01:34:28.812 --> 01:34:30.812
to make or 

01:34:32.214 --> 01:34:34.214
maximize your opportunities to 
be found 

01:34:36.544 --> 01:34:38.544
er to help you understand how 
your 

01:34:39.613 --> 01:34:41.613
different acquisitions channels 
are 

01:34:48.732 --> 01:34:50.732
Per  Per

01:34:55.549 --> 01:34:57.549
Android  users who downloaded a 
game So what.

01:35:03.051 --> 01:35:05.051
What does this mean for you?  
There's a huge demand.

01:35:08.416 --> 01:35:10.619
did you get in front of those 
users?  So we've been working 

01:35:10.620 --> 01:35:12.620
really hard to 

01:35:15.295 --> 01:35:18.180
discoverable and access age.  
Now, when we think about 

01:35:18.181 --> 01:35:20.181
installs, you 

01:35:22.045 --> 01:35:23.681
app into the Play Store once 
it's in production and hoping 

01:35:23.682 --> 01:35:25.682
for the best.

01:35:29.842 --> 01:35:32.090
could download your app or game 
while you were still building 

01:35:32.091 --> 01:35:34.091
it?

01:35:37.372 --> 01:35:39.372
that they really wanted to 
download your 

01:35:41.045 --> 01:35:43.045
app or game that didn't 
currently exist Store?

01:35:44.929 --> 01:35:46.929
We're working on a couple of 
tools to answer these questions.

01:35:47.194 --> 01:35:50.088
The first is early access.So 
early access is a collection in 

01:35:50.089 --> 01:35:54.813
the Play Store of brand new 
Android titles running open 

01:35:54.814 --> 01:35:56.814
data.

01:35:59.943 --> 01:36:02.594
Those billions ofiz users I 
spoke about earlier can download

01:36:02.595 --> 01:36:05.020
games in this collection.can 
give private and actionable 

01:36:05.021 --> 01:36:07.021
feedback to the developer before
you go live.

01:36:11.133 --> 01:36:12.968
tweak and optimize your app to 
really maximize your chance of 

01:36:12.969 --> 01:36:15.211
success when you do go live.

01:36:22.780 --> 01:36:24.780
With peeragestration, you can 
put your 

01:36:27.304 --> 01:36:29.304
It has a preregistration button.
Now, this is fantastic that.

01:36:34.713 --> 01:36:36.359
you tell them about your game or
app is ready and goes into 

01:36:36.360 --> 01:36:38.360
production.

01:36:41.921 --> 01:36:43.921
and help you support start 
marketing before you go live.

01:36:45.805 --> 01:36:47.805
And it's been instrumental for 
top 

01:36:51.115 --> 01:36:53.967
like Ravio who help their fans 
get really excited about an 

01:36:53.968 --> 01:36:55.968
upcoming release.

01:36:59.989 --> 01:37:01.989
year, we launched instant apps.

01:37:05.911 --> 01:37:08.171
helpp in front of -- app in 
front of more people, quickly 

01:37:08.172 --> 01:37:10.172
and with less friction.

01:37:13.241 --> 01:37:15.241
developer contreens, we

01:37:16.523 --> 01:37:18.523
conference, we launched Google 
Play instant.

01:37:21.255 --> 01:37:23.255
instant app whether the try now 
on the 

01:37:24.732 --> 01:37:27.427
Play Store through browsing, 
searching or -- Oh.  Thanks, 

01:37:27.428 --> 01:37:29.428
Tom.

01:37:33.127 --> 01:37:35.127
With Google Play instant, you 
can tap 

01:37:36.587 --> 01:37:38.587
to install the entire package.

01:37:39.861 --> 01:37:41.861
Whether you are  looking to 
storm a 

01:37:45.184 --> 01:37:47.184
master, it is just a really 
great way to 

01:37:48.882 --> 01:37:50.529
help users try your  Apple game 
without commitment of  

01:37:50.530 --> 01:37:52.530
downloading it.

01:37:54.199 --> 01:37:56.199
So in this way, we try to help 
your discoverability.

01:38:05.790 --> 01:38:07.821
And it really worked for hothead
games.  We saw a 19%

01:38:15.891 --> 01:38:17.891
So you can see we're really 
trying to 

01:38:21.280 --> 01:38:23.280
That's all well and good.right 
room and we might be biased but 

01:38:25.406 --> 01:38:27.406
you can manage what you measure,
which 

01:38:28.697 --> 01:38:31.587
Google Play instant and to help 
you understand the contribution 

01:38:31.588 --> 01:38:33.837
that this happening to you 
bottom line.

01:38:36.923 --> 01:38:38.923
We're proud to announce brand 
new 

01:38:42.630 --> 01:38:44.876
success of your constant app.  
Feedback from developers is 

01:38:44.877 --> 01:38:46.877
being 

01:38:50.595 --> 01:38:52.595
that we want things more 
discoverable.

01:38:56.123 --> 01:38:58.123
Woo put them front and answer on
the console.

01:39:00.218 --> 01:39:02.218
center on

01:39:06.399 --> 01:39:08.399
-- front and center on the 
console.

01:39:10.950 --> 01:39:12.950
And will because the stats are 
in the 

01:39:14.423 --> 01:39:16.301
console, if you love playing 
with this, it means you can 

01:39:16.302 --> 01:39:18.302
slice and dice.

01:39:20.026 --> 01:39:23.383
other key metrics like  installs
and revenue.  So it's pretty 

01:39:23.384 --> 01:39:25.384
exciting.

01:39:27.646 --> 01:39:29.700
track the success of your 
instant app on your overall 

01:39:29.701 --> 01:39:31.701
growth.

01:39:34.427 --> 01:39:36.427
to announce brand new 
capabilities in this reporting.

01:39:38.496 --> 01:39:41.415
You can now track which products
browse ares, search and Play 

01:39:41.416 --> 01:39:43.416
Store are 

01:39:45.717 --> 01:39:47.717
driving most of your instant app
success.

01:39:51.015 --> 01:39:53.015
you have the fantastic 
reporting.  Go ahead and use it.

01:39:54.955 --> 01:39:57.479
there is so much more you can do
to increase your discoverability

01:39:57.480 --> 01:39:59.480
on 

01:40:01.530 --> 01:40:03.530
and say if you want to learn 
more, 

01:40:06.260 --> 01:40:08.260
there's an ad  ad word session 
right after this.

01:40:12.022 --> 01:40:14.022
all acquired users are the same.

01:40:16.373 --> 01:40:18.478
acquire the right user for your 
business.  The one that's going 

01:40:18.479 --> 01:40:20.479
to stick around 

01:40:21.531 --> 01:40:23.531
the one who is going to spend a 
lot of 

01:40:24.996 --> 01:40:26.996
time in the app and maybe the 
one who is 

01:40:28.451 --> 01:40:31.315
your app with lots of friends 
and spend money.  So it's really

01:40:31.316 --> 01:40:33.974
important to capture for your 
business.

01:40:37.839 --> 01:40:39.695
But how do you know whether 
you're attracting the right 

01:40:39.696 --> 01:40:41.696
users?

01:40:42.978 --> 01:40:45.019
whether you're spending your 
time, money and resources in the

01:40:45.020 --> 01:40:49.920
right places to attract those 
users?And once you've got the 

01:40:49.921 --> 01:40:52.361
users, how do you know that 
you're actually doing a good 

01:40:52.362 --> 01:40:57.049
job?know you're delivering them 
value and where can you improve?

01:40:58.930 --> 01:41:00.930
Are these questions sounding 
familiar?

01:41:04.245 --> 01:41:06.245
have some updates, the welcome 

01:41:07.484 --> 01:41:09.484
help answer these questions that
will 

01:41:10.542 --> 01:41:12.542
help you interrogate, understand
and 

01:41:14.057 --> 01:41:15.771
acquisition strategies to help 
you bottom line.  So let's take 

01:41:15.772 --> 01:41:17.772
a look.

01:41:22.482 --> 01:41:24.482
updates to the acquisition 
reports, 

01:41:26.809 --> 01:41:28.625
core questions that both myself,
Tom and Dario hear from 

01:41:28.626 --> 01:41:31.685
developers every day.you have 
asked me these questions quite a

01:41:31.686 --> 01:41:34.158
lot.  So the first one is:  How 
do people 

01:41:38.471 --> 01:41:40.471
game on the Play Store?

01:41:41.536 --> 01:41:43.536
How valuable are the users that 
are 

01:41:44.612 --> 01:41:48.695
channels?  And how am I doing?  
Can I improve?  So let's tackle 

01:41:48.696 --> 01:41:50.696
the first one.

01:41:52.389 --> 01:41:54.389
my app or game in the Play 
Store?

01:41:58.693 --> 01:42:00.693
worked with.  One of the  
questions I get about this 

01:42:08.293 --> 01:42:11.770
you hear that line that says 
organic traffic, what is that?  

01:42:11.771 --> 01:42:15.682
Who are these users?coming from?
People who come to your store 

01:42:15.683 --> 01:42:18.346
listing page not through deep 
links, but they 

01:42:21.825 --> 01:42:23.825
browsing the Play Store, 
checking out  

01:42:25.280 --> 01:42:27.280
collections, seeing new games 
and apps 

01:42:28.319 --> 01:42:30.767
might be looking for specific 
use case.  Tom might be  looking

01:42:30.768 --> 01:42:33.219
for apps with museum guides.

01:42:36.259 --> 01:42:37.900
we understand that this is is a 
really important channel for and

01:42:37.901 --> 01:42:39.901
you for the 

01:42:41.800 --> 01:42:43.228
makes up the line share of 
visitors to your store listing 

01:42:43.229 --> 01:42:45.229
page.

01:42:48.559 --> 01:42:50.818
store optimization is really 
important.  But developers like 

01:42:50.819 --> 01:42:53.085
you haven't been this 
information to date.

01:42:57.263 --> 01:42:59.263
It's nice to see.  We don't 
really know where they're 

01:43:00.622 --> 01:43:02.622
can't really optimize for it 
until now.

01:43:04.279 --> 01:43:06.279
So in response to all your 
requests, I 

01:43:07.735 --> 01:43:09.568
announce the launch of organic 
breakdowns in the user 

01:43:09.569 --> 01:43:12.485
acquisition report in the play 
console.

01:43:16.687 --> 01:43:18.687
Well done.

01:43:20.357 --> 01:43:22.357
So now you can see for users who
never 

01:43:25.604 --> 01:43:28.077
installed your app before, which
can ask ones are coming from 

01:43:28.078 --> 01:43:30.078
browsing the store and 
searching.

01:43:33.591 --> 01:43:35.591
can leverage this data to better
present 

01:43:36.631 --> 01:43:38.631
your app or game.

01:43:44.052 --> 01:43:46.734
meet age to focus on acquisition
areas that mattered.  What does 

01:43:46.735 --> 01:43:50.004
that mean?example.  Let's say 
you all after this open your 

01:43:52.044 --> 01:43:54.334
laptops, not now, I'm  speaking.
the user acquisition report and 

01:43:54.335 --> 01:43:57.016
you click on this breakdown and 
you say oh, my God.

01:44:00.711 --> 01:44:02.711
organic traffic is coming from 
browse.  What should I be doing?

01:44:06.058 --> 01:44:07.732
some of these people who are 
coming from browsing might not 

01:44:07.733 --> 01:44:09.733
be familiar with your 

01:44:11.629 --> 01:44:12.646
value proposition or what makes 
you different from your 

01:44:12.647 --> 01:44:14.647
competition.

01:44:16.020 --> 01:44:18.020
opportunity there once you then 
to optimize your store listing.

01:44:19.935 --> 01:44:25.035
second.  The other great news 
with this data is that we've 

01:44:25.036 --> 01:44:27.898
extended it so you can tract 
across the whole funnel, across 

01:44:31.168 --> 01:44:33.168
subscriptions, buyers and 
retained  installers.

01:44:34.620 --> 01:44:36.255
gives you more insights into how
those two channels are driving 

01:44:36.256 --> 01:44:38.256
traffic and they are.

01:44:41.991 --> 01:44:44.902
And it gets even better.  And 
know if you're a marketing 

01:44:44.903 --> 01:44:46.903
person 

01:44:48.987 --> 01:44:50.612
will be super excited about 
this.  Click through and see 

01:44:50.613 --> 01:44:52.613
which search 

01:44:56.603 --> 01:44:58.603
visitors to your store listing 
and which  convert best.

01:45:04.838 --> 01:45:06.838
So, that is super exciting.

01:45:08.309 --> 01:45:10.930
It's a view into the Play Store 
which share before and it is 

01:45:10.931 --> 01:45:15.626
something you asked us for at 
least 3 and a half years with 

01:45:15.627 --> 01:45:17.627
this team.  Thank you to the 
guys who built it and 

01:45:23.812 --> 01:45:26.456
certainly our other pilot 
partners have.  What we try to 

01:45:26.457 --> 01:45:30.551
do is make it insights that help
you make better decisions as Tom

01:45:30.552 --> 01:45:32.552
mentionedertish.

01:45:34.726 --> 01:45:37.171
feedback from fun games for free
about the relevance of the long 

01:45:37.172 --> 01:45:39.172
tail searches 

01:45:40.667 --> 01:45:42.667
hear from everyone is how they 
found data really actionable.

01:45:46.236 --> 01:45:49.110
going to help you make better 
decisions to grow your business 

01:45:49.111 --> 01:45:51.111
on play.   Play.

01:45:53.594 --> 01:45:56.222
they loved this new feature.  
And because we tested it with 

01:45:56.223 --> 01:45:58.223
quite a 

01:46:00.125 --> 01:46:02.162
that you're here today and maybe
able to come along, I share with

01:46:02.163 --> 01:46:07.064
you some of the going to use 
this information for in case it 

01:46:07.065 --> 01:46:09.986
sparks some ideas in your head.
developers we tested with said 

01:46:09.987 --> 01:46:12.431
they would use this data to 
evaluate the user 

01:46:16.282 --> 01:46:18.282
A lot of them said we use them 
to optimize the store listing.

01:46:23.438 --> 01:46:25.438
screen shots and some even said 
they 

01:46:26.960 --> 01:46:28.960
would redesign their onboarding 
flow.

01:46:32.285 --> 01:46:34.285
and whatever else people are 
searching 

01:46:36.363 --> 01:46:38.363
for reflected in that first time
user 

01:46:39.445 --> 01:46:40.896
even more relevant for that 
person when they install the 

01:46:40.897 --> 01:46:45.852
app.  So we are really pleased 
our  found it useful and I hope 

01:46:45.853 --> 01:46:47.853
you have as 

01:46:51.772 --> 01:46:53.772
well and I hope that answers 
your question.

01:46:59.100 --> 01:47:03.412
have found that to be super 
exciting.my favorite.  If you 

01:47:03.413 --> 01:47:05.454
care go paying people on time, 
if you care about running a good

01:47:08.962 --> 01:47:11.404
you're a CFO or Product Manager,
you probably care about 

01:47:11.405 --> 01:47:13.405
acquiring valuable 

01:47:14.863 --> 01:47:17.714
tackle the next question.  How 
valuable are the users that are 

01:47:21.019 --> 01:47:23.019
channels?

01:47:26.058 --> 01:47:28.058
Now, a lot of the developers 
love the report.

01:47:30.796 --> 01:47:32.796
part of the story.  I am sure 
you agree.

01:47:34.783 --> 01:47:36.990
They tell meare leading critical
indicators of that 

01:47:40.073 --> 01:47:42.073
one metric you will care about. 
Revenue.

01:47:46.375 --> 01:47:51.258
launching a brand new item in 
the buyer acquisition report.  

01:47:51.259 --> 01:47:53.259
Average, revenue per user.

01:47:55.563 --> 01:47:57.563
can see exactly how much average
revenue 

01:47:58.637 --> 01:48:00.637
per user you're getting from 
different channels.

01:48:05.393 --> 01:48:07.429
And that includes organic 
traffic  breakdown, Google 

01:48:07.430 --> 01:48:09.430
search and third party traffic.

01:48:13.162 --> 01:48:15.162
user acquisition strategies in 
your 

01:48:16.301 --> 01:48:18.153
responsible for making sure you 
have a profitable company, this 

01:48:18.154 --> 01:48:22.840
information we right decisions. 
So no matter whether you are 

01:48:22.841 --> 01:48:24.841
running 

01:48:26.906 --> 01:48:28.906
classical CPM model, costco in 
store 

01:48:30.860 --> 01:48:33.703
or  driving down the funnel, we 
really think this information 

01:48:33.704 --> 01:48:37.248
will help you  strategies and 
make better decision moving 

01:48:37.249 --> 01:48:39.249
forward.

01:48:42.561 --> 01:48:44.561
there's a few is of you in the 
room who 

01:48:47.250 --> 01:48:49.702
Tamzin, how am I performing 
against my competition?  How can

01:48:49.703 --> 01:48:51.703
I do better?  How can I improve?

01:48:54.822 --> 01:48:56.265
benchmarks are really important 
and we totally understand 

01:48:56.266 --> 01:48:58.266
they're really 

01:49:00.792 --> 01:49:02.842
identify where the room for 
opportunity is versus the market

01:49:02.843 --> 01:49:07.971
and where you are out of the 
park and doing a great job.  In 

01:49:07.972 --> 01:49:09.972
other words, benchmarks are 
great 

01:49:11.487 --> 01:49:14.481
focus your investment on the 
items which will give you the 

01:49:14.482 --> 01:49:16.482
best return.

01:49:19.011 --> 01:49:21.668
were really happy a month ago to
launch the retained installers 

01:49:21.669 --> 01:49:24.155
benchmarks in funnel.

01:49:27.212 --> 01:49:29.881
So now for all organic traffic, 
you can easily see throughout 

01:49:29.882 --> 01:49:33.985
the easer install conversion all
the way to 30-day retention 

01:49:33.986 --> 01:49:35.986
exactly where the 

01:49:38.893 --> 01:49:40.954
improve or where the efforts you
have had have really paid off.

01:49:46.080 --> 01:49:48.080
who have tested this with us 
including 

01:49:52.803 --> 01:49:54.803
Intuit and Intuit and Topler.

01:49:57.913 --> 01:49:59.961
they put in have really paid 
off.  One thing I mentioned 

01:49:59.962 --> 01:50:01.962
earlier that I 

01:50:04.899 --> 01:50:06.732
all these acquisition reports is
that they're not just here to 

01:50:06.733 --> 01:50:09.608
tell you where you're going 
wrong.They're here to give you a

01:50:09.609 --> 01:50:11.609
reference point and give you 
confidence in your 

01:50:18.338 --> 01:50:20.284
which is why I was really happy 
to see they love is the extra 

01:50:20.285 --> 01:50:22.846
validation and their own 
decision making.

01:50:28.705 --> 01:50:30.705
So the new tools that Q3 
launched help

01:50:33.285 --> 01:50:37.782
get discovered.  And if you talk
to us, we'll say the most 

01:50:37.783 --> 01:50:39.783
important about this is we 
launched 

01:50:41.259 --> 01:50:43.259
reporting to help you optimize 
for it.

01:50:44.399 --> 01:50:46.399
Updates the acquisition reports 
give 

01:50:49.709 --> 01:50:51.138
had before to help you make much
better decisions around 

01:50:51.139 --> 01:50:53.139
optimization, 

01:50:55.017 --> 01:50:57.942
help you drive and acquire more 
valuable  users.  Right.

01:51:03.706 --> 01:51:05.706
But how are you going to keep 
them engaged?

01:51:07.265 --> 01:51:09.265
going to monetize them?  Lfor 
this exciting part of the talk, 

01:51:12.547 --> 01:51:14.547
colleague Dario.

01:51:19.282 --> 01:51:21.282
It's great to be here.

01:51:23.588 --> 01:51:25.588
So new tools help you get 
discovered 

01:51:28.507 --> 01:51:30.507
find and acquire more and more 
valuable users.

01:51:31.976 --> 01:51:34.817
But what about helping you in 
the next stage of the user life 

01:51:34.818 --> 01:51:37.054
cycle journey like engagement 
and monetization?

01:51:40.942 --> 01:51:43.410
more and earn more money from 
them.  I am glad to say we have 

01:51:43.411 --> 01:51:45.411
some new tools to help with 
that.

01:51:48.533 --> 01:51:50.533
first off, earlier this year, we
launched the events timeline.

01:51:53.688 --> 01:51:56.549
The events timeline gives you  
information close to charts and 

01:51:58.813 --> 01:52:00.813
statistics page in the Android 
dashboard 

01:52:03.120 --> 01:52:05.120
and other chart surfaces on the 
play console.

01:52:07.047 --> 01:52:09.684
Showing you key  events that 
might (inaudible).  For example,

01:52:09.685 --> 01:52:11.685
the rolling on the of a new 
release.

01:52:14.621 --> 01:52:16.621
correlations between changes in 
metrics and such events.

01:52:20.607 --> 01:52:22.239
there are changing average 
rating correlates with the 

01:52:22.240 --> 01:52:24.240
rollout of a new 

01:52:25.892 --> 01:52:27.728
change is affecting and hue it's
affecting the other revenue user

01:52:27.729 --> 01:52:33.422
or if you use this on top.is 
such as mobile hold back is  

01:52:33.423 --> 01:52:35.423
affects 

01:52:36.707 --> 01:52:38.707
your sessions positively or 
negatively.

01:52:46.247 --> 01:52:48.247
One told us they were able to 
quickly 

01:52:49.303 --> 01:52:52.169
spiked in a certain country.  So
the advanced  timeline helps you

01:52:56.284 --> 01:52:58.284
without having to dig in to 
order 

01:53:01.583 --> 01:53:03.583
dashboard or other data -- other
dashboard or other data.

01:53:05.659 --> 01:53:07.659
might want to check how user 
engaging 

01:53:08.868 --> 01:53:10.868
with your app.

01:53:14.222 --> 01:53:16.222
Firebase helps with this 
purpose.

01:53:18.960 --> 01:53:20.844
enabled just by linking the 
analytics to your app and 

01:53:20.845 --> 01:53:22.845
signing up to the service.

01:53:24.922 --> 01:53:25.977
box, it will give you already 
meaningful metrics about 

01:53:25.978 --> 01:53:30.846
engagement and retention of the 
users.is also interesting is you

01:53:30.847 --> 01:53:33.309
can instrument your ap, 
instrument your code 

01:53:38.800 --> 01:53:40.800
matter the most to your app.

01:53:42.071 --> 01:53:43.925
Another really cool feature they
launchederter is Firebase 

01:53:43.926 --> 01:53:45.926
predictions.

01:53:49.670 --> 01:53:51.670
our knowledge and tools to give 
you 

01:53:53.756 --> 01:53:56.425
the  user -- your users are 
going to behave in your app.

01:54:03.266 --> 01:54:05.266
out of the box, you will get 

01:54:07.327 --> 01:54:11.311
these predictions.  You can also
instrument your app to get more 

01:54:11.312 --> 01:54:13.312
personalized prediction you 

01:54:15.312 --> 01:54:17.567
If you want to learn more about 
Google Analytics from Firebase, 

01:54:17.568 --> 01:54:19.568
you can check session later on 
stage 6.

01:54:25.766 --> 01:54:28.088
So our friend Steve, (inaudible)
and Russ will be  there.

01:54:31.987 --> 01:54:34.218
will be a truck for Firebase 
tools.  In particular, for 

01:54:34.219 --> 01:54:36.219
Firebase, there 

01:54:37.306 --> 01:54:39.306
in came you missed that are 
available on 

01:54:42.397 --> 01:54:44.397
YouTube -- in case you missed 
that are YouTube.

01:54:46.926 --> 01:54:48.926
There are events and let you 
correlate with the metrics.

01:54:53.839 --> 01:54:55.839
They give you insight

01:54:57.744 --> 01:54:59.618
It is probably the most critical
phase because it is where you 

01:54:59.619 --> 01:55:03.681
earn the money your business 
starts succeeding.  We have done

01:55:03.682 --> 01:55:08.841
a lot of work recently 
especially on subscriptions.So I

01:55:08.842 --> 01:55:10.842
will present the latest things 
that 

01:55:12.119 --> 01:55:14.119
we launchedd their.

01:55:15.792 --> 01:55:17.792
subscription  dashboard.

01:55:19.079 --> 01:55:20.522
Loads of developers use the 
subscription dashboard on a 

01:55:20.523 --> 01:55:22.523
regular basis.

01:55:25.866 --> 01:55:28.551
earning subscription businesses 
actually on a regular basis too.

01:55:30.184 --> 01:55:32.184
But we heard that you wanted 
more.

01:55:37.455 --> 01:55:39.812
additional features in their 
there.

01:55:43.118 --> 01:55:45.118
Let's take a quick look.

01:55:48.417 --> 01:55:50.417
decided to make it super easy to
compare 

01:55:51.888 --> 01:55:53.888
codes, evaluate features like 
free 

01:55:55.558 --> 01:55:57.558
data that are important to you 
lycra 

01:55:58.596 --> 01:56:00.596
newals

01:56:02.855 --> 01:56:04.855
like renewals.

01:56:09.893 --> 01:56:11.893
group of cyber and analyze their
performance.

01:56:13.601 --> 01:56:15.601
For example, you can pick SKU 
with a 

01:56:19.921 --> 01:56:21.921
compare it with an  SKU 
inteproductry price.

01:56:23.228 --> 01:56:25.843
You can also focus on last year 
big and compare it with this 

01:56:25.844 --> 01:56:28.499
year's and see which one 
performed better for you.

01:56:32.782 --> 01:56:35.650
comparison to explore all of 
this kind of intricacies.  

01:56:35.651 --> 01:56:37.651
That's not all though.

01:56:39.179 --> 01:56:41.436
data that we know you're 
interested in to make it easier 

01:56:41.437 --> 01:56:43.437
than ever to take a 

01:56:45.367 --> 01:56:47.367
is what matters to you.  So 
success rate and are the 

01:56:48.825 --> 01:56:50.825
information about performance 
are 

01:56:53.362 --> 01:56:55.362
right there on the subscription 
dashboard.

01:56:57.127 --> 01:56:59.127
And because the subscription 

01:57:00.167 --> 01:57:02.434
repeated payments, we tell you 
for each code you selected which

01:57:02.435 --> 01:57:04.466
building periods they reach.

01:57:11.222 --> 01:57:13.222
We also made major updates there
to 

01:57:15.154 --> 01:57:22.936
subscription turn.  So users can
cancel for many reasons out.  

01:57:22.937 --> 01:57:24.937
But as we announced yesterday, 
we now 

01:57:26.210 --> 01:57:28.890
show the users survey when they 
cancel explain why they're 

01:57:28.891 --> 01:57:33.173
cancelling.  And there's also 
this survey available on the 

01:57:33.174 --> 01:57:35.174
subscription dashboard.

01:57:37.725 --> 01:57:39.725
sights directly from the users 
about why 

01:57:41.838 --> 01:57:43.838
subscription with your service.

01:57:48.601 --> 01:57:50.601
back features like account hold 
and grace would.

01:57:53.738 --> 01:57:54.929
check out if you haven't already
because we heard from developers

01:57:54.930 --> 01:57:56.930
it really 

01:57:58.858 --> 01:58:01.144
retention of the subscribers.  
So this major updates help you 

01:58:04.805 --> 01:58:06.805
some of you here in the oughted 
with 

01:58:09.459 --> 01:58:11.459
reference to better understand 
and

01:58:15.494 --> 01:58:17.520
in the audience.was a discussion
yesterday about new 

01:58:20.584 --> 01:58:23.447
advanced feature about -- the 
new for subscription 

01:58:23.448 --> 01:58:25.448
specifically.  If you are 
interested, you might want 

01:58:29.573 --> 01:58:31.573
YouTube.

01:58:36.348 --> 01:58:38.776
beginning the last two phases 
are uninstall and winback.

01:58:42.688 --> 01:58:44.688
provides you with reports about 
installs.

01:58:47.220 --> 01:58:49.220
For example, daily install 
metrics or 

01:58:50.860 --> 01:58:52.860
or installers acquisition report
in 

01:58:55.384 --> 01:58:57.384
which you can check how long 
users keep before uninstalling.

01:58:59.047 --> 01:59:01.736
We heard you want more and we 
understand because it is such a 

01:59:01.737 --> 01:59:05.453
critical phase business grows.  
We don't have enough information

01:59:05.454 --> 01:59:10.769
for you at the moment for 
winback.hard on this aspect ask 

01:59:10.770 --> 01:59:12.770
we will 

01:59:13.833 --> 01:59:15.833
introduce later this year some 
more 

01:59:17.503 --> 01:59:19.798
for the steps of the user life 
cycle journey.  For example, you

01:59:19.799 --> 01:59:21.799
will be able to 

01:59:24.873 --> 01:59:26.873
unique users are  uninstalling 
your app 

01:59:28.616 --> 01:59:30.616
over selected period and how 
many users 

01:59:32.954 --> 01:59:34.168
your app again after having 
uninstalled at point in the 

01:59:34.169 --> 01:59:36.169
past.

01:59:38.415 --> 01:59:40.415
So stay fine for more up 
updates.

01:59:43.228 --> 01:59:45.263
Thank you very much for your 
attention and now back to Tom.

01:59:53.260 --> 01:59:55.260
Hello again.

01:59:56.418 --> 01:59:58.418
As Dario and Tamzin shared, the 
teams 

02:00:00.803 --> 02:00:03.397
really hard to build more tools 
and metrics to help you run 

02:00:03.398 --> 02:00:05.398
better 

02:00:08.551 --> 02:00:10.789
have a higher and larger number 
of gamers.  It is fair to say we

02:00:10.790 --> 02:00:15.684
are extremely who delivered it. 
But all of this work also in 

02:00:15.685 --> 02:00:17.793
some  ways causes a problem.

02:00:21.089 --> 02:00:23.330
that all of you are really busy.
You have so many tools both 

02:00:23.331 --> 02:00:25.331
provided by us and others.

02:00:28.681 --> 02:00:30.299
let's of different places you 
can go and loads and loads of 

02:00:30.300 --> 02:00:35.087
cause on your time.you're busy 
and we understand that you need 

02:00:35.088 --> 02:00:37.088
it to be easy to see what the 

02:00:38.336 --> 02:00:41.390
and what's important and what 
can be passed over.  We 

02:00:41.391 --> 02:00:43.391
understand this problem.

02:00:44.874 --> 02:00:46.874
really happy to say that 
yesterday we 

02:00:48.344 --> 02:00:51.457
launched the new apps dashboard 
in the Google Play Console.Let's

02:00:51.458 --> 02:00:53.458
take a really quick look at what
it's like.

02:00:54.992 --> 02:00:56.866
The apps  dashboard is the 
landing page.sign in to the 

02:00:56.867 --> 02:00:58.867
console.

02:01:00.207 --> 02:01:05.268
You land here if you select an 
app.your key data.  Previously, 

02:01:05.269 --> 02:01:09.833
there wasn't quite enough data. 
We heard from all of you.wasn't 

02:01:09.834 --> 02:01:11.834
really well organized and we 
changed all of that.

02:01:16.233 --> 02:01:18.233
really easy to see trending 
information.

02:01:22.211 --> 02:01:24.462
if your installs are moving in 
the right direction, it is super

02:01:24.463 --> 02:01:26.463
easy to see that.

02:01:28.124 --> 02:01:30.124
see your crashes are reducing, 
you can see that easily as well.

02:01:31.377 --> 02:01:36.466
So trends first thing.to glance 
at.  Secondly, we understand and

02:01:36.467 --> 02:01:38.467
we heard 

02:01:41.642 --> 02:01:44.133
and uninstalls should be 
displayed together.  You aught 

02:01:44.134 --> 02:01:46.134
to take a look at your 

02:01:49.824 --> 02:01:52.082
We sectionalized the dashboard. 
We have a lot more information 

02:01:52.083 --> 02:01:54.083
and put it into context.

02:01:56.167 --> 02:01:58.206
any of the questions on the left
side of the screens feel 

02:01:58.207 --> 02:02:00.207
familiar, the questions 

02:02:02.100 --> 02:02:04.983
specifically asks and 
specifically answers.  Now, I'm 

02:02:04.984 --> 02:02:07.212
sure that many of you reading  
you know what, that one is 

02:02:07.213 --> 02:02:09.213
really important to me.  I don't
know.

02:02:13.207 --> 02:02:15.207
want to understand what people 
think of 

02:02:16.343 --> 02:02:20.914
my app through reviews and how 
my going.  Maybe you choir 

02:02:20.915 --> 02:02:23.783
slightly less about how your  
pre-registration campaign is 

02:02:24.184 --> 02:02:28.494
going.understand that having all
of this on the dashboard is 

02:02:28.495 --> 02:02:30.495
sometimes overwhelming 

02:02:31.973 --> 02:02:33.973
not all of it is relevant to all
of you.

02:02:35.816 --> 02:02:38.573
That's why the new dashboard is 
also customizable.section you 

02:02:38.574 --> 02:02:40.574
see on the dashboard can now 

02:02:43.268 --> 02:02:45.268
be expanded or  collapsed.

02:02:47.278 --> 02:02:49.278
interested in your revenue, you 
can have 

02:02:50.318 --> 02:02:51.944
If you are less interested in 
preregistration, you can have 

02:02:51.945 --> 02:02:57.310
that section collapsed.Remember 
your preferences so it stays 

02:02:59.552 --> 02:03:01.552
exactly as you leave it.

02:03:04.692 --> 02:03:07.591
each and every one of you 
personally.everything.

02:03:10.671 --> 02:03:12.972
And a lot of the developers who 
we're with are happy with the 

02:03:12.973 --> 02:03:14.973
changes.

02:03:16.699 --> 02:03:18.699
If I'm honest as a PM, I am not 
sure how to take this quote.

02:03:21.582 --> 02:03:23.030
the lead engineer from Blue 
Apron was really, really happy 

02:03:23.031 --> 02:03:25.031
there was a simple 

02:03:27.769 --> 02:03:30.273
Product Manager so they could 
see the questions they always 

02:03:30.274 --> 02:03:32.274
ask really easily 

02:03:35.238 --> 02:03:37.238
And similarly, doc you why sign,
very 

02:03:39.094 --> 02:03:43.216
busy people were very happy with
the they give.  It doesn't mean 

02:03:43.217 --> 02:03:48.121
that garbboard is focused for 
what you need right now.short 

02:03:48.122 --> 02:03:50.122
overview of all of the changes 
you made to the app dash.

02:03:53.420 --> 02:03:55.665
you see the new board, you will 
be able to see all of that and 

02:03:55.666 --> 02:04:00.161
how it helps you lives.  And 
frankly, how it helps you see 

02:04:00.162 --> 02:04:03.636
the metrics and insights your 
console has to really help you.

02:04:13.102 --> 02:04:15.102
Dario, Tamzin and myself think 
about 

02:04:18.660 --> 02:04:20.660
tools we can build to help you 
optimize.

02:04:24.645 --> 02:04:26.645
The new events and timeline and 
even 

02:04:28.127 --> 02:04:29.953
are more information coming 
soon.  We think that all of this

02:04:29.954 --> 02:04:31.954
taken 

02:04:34.626 --> 02:04:36.626
your success and ultimately your
success is what we work towards.

02:04:38.110 --> 02:04:40.957
That's what we're here to help.
And all of this and other things

02:04:40.958 --> 02:04:43.004
like technical performance are 
wrapped 

02:04:46.046 --> 02:04:48.046
dashboard as well.

02:04:49.357 --> 02:04:51.813
So we're almost at the end of 
our time things to say.

02:04:57.741 --> 02:04:59.741
If you liked this session or 
even if 

02:05:02.446 --> 02:05:04.916
to the URL and tell us what you 
think.  It really helps us make 

02:05:04.917 --> 02:05:09.020
the sessions after year.  And 
lastly, thank you so much for 

02:05:09.428 --> 02:05:11.428
listening.

02:05:12.694 --> 02:05:14.694
It is great to see many of you 
here thank you very much.

02:05:37.394 --> 02:05:40.274
right after this session and in 
the Sandbox.  Thank you.

02:05:52.392 --> 02:05:54.392
sand Sandbox.

02:06:26.475 --> 02:06:28.475
10:30-11:15 a.m.

02:06:41.644 --> 02:06:43.644
Make your word

02:06:46.140 --> 02:06:48.140
Word

02:06:50.908 --> 02:06:52.908
Press site progressive.

02:06:57.153 --> 02:06:59.153
Word press

02:27:51.908 --> 02:27:54.590
Super cool to be here.  I am -- 
I bet that you have heard 

02:27:56.025 --> 02:28:00.090
progressive.  Today we're going 
to be talking about how to make 

02:28:00.091 --> 02:28:02.533
progressive more precise and 
have heard the term progressive 

02:28:02.534 --> 02:28:04.534
probably 

02:28:06.645 --> 02:28:08.645
in the context of progressive 
web apps 

02:28:10.814 --> 02:28:12.814
that have been developed using 
mobile 

02:28:14.313 --> 02:28:16.313
web capabilities or in the 
context of 

02:28:19.260 --> 02:28:21.748
capabilities into your sites in 
a step by step way inch stead of

02:28:21.749 --> 02:28:23.749
all at once.

02:28:25.883 --> 02:28:27.883
the term progressive to capture 
the 

02:28:29.342 --> 02:28:32.227
notion of progressive web  
development, development of user

02:28:32.228 --> 02:28:34.272
first web experiences using 
modern web 

02:28:37.355 --> 02:28:39.355
performance best practices.

02:28:40.842 --> 02:28:42.842
And the key here is the word 
user 

02:28:46.807 --> 02:28:48.627
of progressive web development 
is user experience.  So let's 

02:28:48.628 --> 02:28:50.664
start at the core.experience?

02:28:54.551 --> 02:28:56.410
User experience refers to a 
person emotion when they are 

02:28:56.411 --> 02:28:58.411
using a product.

02:29:00.910 --> 02:29:02.910
case, that product is our 
website, our WordPress site.

02:29:04.881 --> 02:29:06.708
So it's all about how users feel
when are engaging with the 

02:29:06.709 --> 02:29:09.396
content that we create and that 
we publish.

02:29:15.345 --> 02:29:16.968
in a nut shell what I want my 
user to have that expression on 

02:29:16.969 --> 02:29:19.435
their faces site a little bit.

02:29:22.482 --> 02:29:24.764
But what are the qualities in 
web experiences that actually 

02:29:24.765 --> 02:29:26.765
bring joy to users?

02:29:30.291 --> 02:29:32.291
There are commonly present in 
what we 

02:29:33.804 --> 02:29:36.971
UX experiences.  Users love 
applications that are fast and 

02:29:36.972 --> 02:29:38.972
reliable.

02:29:42.672 --> 02:29:44.672
and they behave well once they 
are running.

02:29:51.496 --> 02:29:53.496
They want to feel safe when they
are 

02:29:55.400 --> 02:29:57.796
and the transaction to the  
apps.  Users love applications 

02:29:57.797 --> 02:29:59.797
integrated 

02:30:02.962 --> 02:30:05.705
they can take advantage of what 
the device has to offer and they

02:30:05.706 --> 02:30:10.449
are using engaging.  They love 
that kick of wanting to go back 

02:30:10.450 --> 02:30:12.450
to the application and the 

02:30:14.342 --> 02:30:16.594
its very easy to come back to 
them.  For a long time, building

02:30:16.595 --> 02:30:18.595
applications 

02:30:22.297 --> 02:30:24.180
satisfies the four pillars of 
delightful U.S. was not easy or 

02:30:24.181 --> 02:30:26.181
not possible at all.

02:30:27.456 --> 02:30:30.201
reason was that for a long time,
the main power of the web was 

02:30:30.202 --> 02:30:32.202
the URL, the capabilities.

02:30:37.419 --> 02:30:39.419
As you compare it to platform on
the 

02:30:41.071 --> 02:30:43.316
behind in terms of the  things 
that you can do with it; 

02:30:43.317 --> 02:30:45.317
however, the good news 

02:30:49.049 --> 02:30:52.529
has been evolving quickly in 
receipt years.  Now it is fully 

02:30:52.530 --> 02:30:54.530
possible to build 

02:30:55.585 --> 02:30:57.585
experiences only using web 
capabilities.

02:31:00.476 --> 02:31:02.723
This here is a subset of the web
APIs available in the web 

02:31:02.724 --> 02:31:04.792
platform today.  You can do a 
lot of things with them.

02:31:08.309 --> 02:31:10.309
features like the vibration, the
gyroscope.

02:31:13.427 --> 02:31:15.474
You can implement like features 
like and so on.

02:31:20.358 --> 02:31:22.358
Even augmenting reality is a 
thing today on the web.

02:31:25.487 --> 02:31:28.135
development workflows, a lot of 
tooling and powerful Java screen

02:31:28.136 --> 02:31:30.136
frameworks that 

02:31:32.413 --> 02:31:34.462
ledgers that allows us to build 
very, very complex and awesome 

02:31:34.463 --> 02:31:36.463
experiences O.

02:31:40.013 --> 02:31:42.898
have yourself, the web developer
eager to harness the power of 

02:31:42.899 --> 02:31:44.899
capabilities.

02:31:47.604 --> 02:31:49.665
is the complexity is such that 
truly taking advantage of what 

02:31:49.666 --> 02:31:52.121
the web has to difficult.

02:31:58.521 --> 02:32:00.521
system has increased, we have 
also seen 

02:32:02.411 --> 02:32:04.107
call the capabilities to use 
such gap which simply is the 

02:32:04.108 --> 02:32:06.108
difference between 

02:32:07.794 --> 02:32:09.794
and what is actually done.

02:32:12.112 --> 02:32:14.112
For example, if we go back to 
let's 

02:32:17.257 --> 02:32:19.290
not developing a web at the 
time, but the gap was not big at

02:32:19.291 --> 02:32:21.985
that time.we could do on the 
web.

02:32:25.478 --> 02:32:28.327
There was HTML, CSS and there 
was only develop.

02:32:31.588 --> 02:32:34.237
Now today, the complexity has 
grown so much.  There are so 

02:32:34.238 --> 02:32:39.156
many tools, so many and so many 
things and we have to develop 

02:32:39.157 --> 02:32:41.157
applications that have to run 

02:32:44.968 --> 02:32:47.828
infinite number of form factors.
The problem with this gap is if 

02:32:47.829 --> 02:32:49.829
we 

02:32:50.913 --> 02:32:53.211
the web has to offer, it's very 
difficult to build applications 

02:32:53.212 --> 02:32:55.212
that 

02:32:56.886 --> 02:32:58.886
delightful UX.

02:33:00.575 --> 02:33:02.575
We see evidence of this a lot in
the wild.

02:33:04.020 --> 02:33:07.717
prevalence of the applications 
that run very slow.  They 

02:33:07.718 --> 02:33:09.718
exhibit very poor load time 
performance.

02:33:11.466 --> 02:33:13.466
For example, 19 seconds long 
time on 3G on mobile.

02:33:15.753 --> 02:33:17.753
75% of mobile takes 10 second or
more to load.

02:33:19.462 --> 02:33:22.377
And also, there are a lot of 
load applications, too many, 

02:33:22.378 --> 02:33:24.378
that exhibit poor run time 
performance.

02:33:27.273 --> 02:33:29.121
Things like unresponsive pages 
or  content (inaudible) in front

02:33:29.122 --> 02:33:32.810
of your  with it.  And the bad 
things is users hate this.

02:33:37.239 --> 02:33:39.381
And we see evidence of that as 
well.

02:33:42.674 --> 02:33:44.674
these have on the revenue.

02:33:45.928 --> 02:33:48.384
More than half the users are 
going to 3 seconds to load.

02:33:53.286 --> 02:33:55.286
75% takes more than 10 seconds, 
then you figure it out.

02:33:57.435 --> 02:33:59.480
between load time and 
conversions.  There is an 

02:33:59.481 --> 02:34:01.481
inverse correlation 

02:34:02.527 --> 02:34:04.527
between revenue and load time.

02:34:06.041 --> 02:34:07.655
But for me, the worst collateral
effect of not being able to take

02:34:07.656 --> 02:34:09.656
advantage of 

02:34:12.777 --> 02:34:14.777
known in

02:34:16.490 --> 02:34:18.542
sociology of the accumulated 
advantage.  It gets reached.

02:34:22.888 --> 02:34:24.888
given the complexity of the web 
platform 

02:34:25.993 --> 02:34:27.993
it seems that only super start 

02:34:33.185 --> 02:34:34.195
that have capability to afford 
high large quality are the ones 

02:34:34.196 --> 02:34:36.196
that have a to take advantage of
the web.

02:34:38.926 --> 02:34:40.926
That is not what the web is ail 
about.

02:34:44.664 --> 02:34:46.508
experience they just described, 
even super stars have time to do

02:34:46.509 --> 02:34:48.509
it.

02:34:51.062 --> 02:34:53.062
drive to close the capabilities 
usage gap.

02:34:54.376 --> 02:34:57.280
And there are mainly two ways 
that we can go about it.One is 

02:34:57.281 --> 02:35:02.241
on us.  Given that the web 
capabilities are there for us to

02:35:02.242 --> 02:35:07.783
use them, if we all do thing, 
things should be okay.  Right?  

02:35:07.784 --> 02:35:11.862
We should not see those 
experiences; said than done.  

02:35:11.863 --> 02:35:14.770
The reality looks more like 
this.  You have to matter so 

02:35:14.771 --> 02:35:16.771
many things to 

02:35:17.889 --> 02:35:19.889
applications that are delightful
that is very challenging.

02:35:23.383 --> 02:35:28.311
with the critical rendering 
impact.  Load resources.  Do 

02:35:28.312 --> 02:35:33.662
code splitting, et cetera.
caching, so many things.  The 

02:35:33.663 --> 02:35:37.944
landscape is so complex that it 
is thing the first time.  

02:35:37.945 --> 02:35:39.945
Imagine doing the right thing 
all the 

02:35:42.856 --> 02:35:45.322
application in all circumstances
all the time.  It's very hard.

02:35:51.027 --> 02:35:53.027
think about a progressive web 
Eco system.

02:35:54.136 --> 02:35:56.995
It's a platform, a web Eco 
system when thing is easy.  

02:35:56.996 --> 02:36:01.295
Right?  And it involves several 
factors.  The first one is an 

02:36:01.296 --> 02:36:03.296
evolving web platform.

02:36:07.632 --> 02:36:09.632
added, probably existing APIs 
are improved.

02:36:12.745 --> 02:36:14.745
tools that have developers 
automate complex tasks.

02:36:17.290 --> 02:36:19.290
We have frameworks that add 
layers to 

02:36:20.608 --> 02:36:22.448
applications and a key point in 
a progressive web  Eco system 

02:36:22.449 --> 02:36:25.296
that we take  and that we get 
from using the tooling 

02:36:28.800 --> 02:36:31.457
and the frameworks and we see 
what works back into the web 

02:36:31.458 --> 02:36:34.369
platform.  So this is a better 
option.  We want to pursue this.

02:36:38.046 --> 02:36:40.545
focus our efforts to achieve 
this?  In order to answer that 

02:36:40.546 --> 02:36:42.546
question is 

02:36:45.027 --> 02:36:47.027
about the web in terms of a 
very, very 

02:36:49.325 --> 02:36:51.325
simple model that has three 
layers.

02:36:54.662 --> 02:36:56.761
inconsistent we have every day. 
Then there is a second layer 

02:36:56.762 --> 02:37:00.442
conformed management systems.  
There are basically software 

02:37:00.443 --> 02:37:02.443
platform 

02:37:04.339 --> 02:37:07.890
content.  Okay?  And on top of 
that, the bottom ledger 

02:37:12.185 --> 02:37:14.185
In is nothing else.

02:37:15.384 --> 02:37:17.384
That implementation or the power
of the web 

02:37:20.863 --> 02:37:23.309
the implementation of the web by
APIs.  You can see the content 

02:37:23.310 --> 02:37:29.639
inconsistent divided in two.  
That's very important.  Now a 

02:37:29.640 --> 02:37:31.640
days, about 50% of sites on the 

02:37:34.368 --> 02:37:36.639
some sort of font management 
system.  And the of the ones by 

02:37:36.640 --> 02:37:38.640
some 

02:37:41.630 --> 02:37:43.630
titles and frameworks and so on.

02:37:46.966 --> 02:37:48.966
closing the capabilities usage 
gap 

02:37:51.362 --> 02:37:53.362
pursuing significant across the 
web Eco system.

02:37:57.277 --> 02:37:59.950
focusing on closing the usage 
gap in the area of content 

02:37:59.951 --> 02:38:02.813
management systems.all systems 
are very important.

02:38:06.068 --> 02:38:08.068
We want to help to make them all
progressive platforms.

02:38:10.650 --> 02:38:12.650
work, we are  focusing 
specifically in word press.

02:38:16.613 --> 02:38:18.613
WordPress will cause an impact 
not only 

02:38:21.950 --> 02:38:23.950
for the word press platform but 
as the web as a whole.

02:38:26.268 --> 02:38:27.508
First, historically, WordPress 
has been seen as a blogging 

02:38:27.509 --> 02:38:29.509
platform.

02:38:33.277 --> 02:38:35.277
evolving steadily

02:38:37.462 --> 02:38:39.462
since it started back in 2003.  
You name it.

02:38:41.618 --> 02:38:43.618
shopping, et cetera.

02:38:44.722 --> 02:38:46.722
If we close the capabilities 
usage gap 

02:38:48.897 --> 02:38:52.607
the experience for users.  
That's very important.  The 

02:38:52.608 --> 02:38:54.608
second one WordPress is 
certainly 

02:38:56.544 --> 02:38:58.544
pleasure in the content system.

02:39:00.651 --> 02:39:02.651
59% of open source CMS market 
share 

02:39:07.007 --> 02:39:09.007
for me staggering, nowa days, 
WordPress powers 30% of the web.

02:39:12.505 --> 02:39:14.505
When I think about word press

02:39:19.001 --> 02:39:21.056
like all of them to be able to 
get a delightful user 

02:39:21.057 --> 02:39:26.198
experience.consuming it.  So 
going back toes definition of 

02:39:29.285 --> 02:39:31.285
progressive web development, 
when I say 

02:39:32.383 --> 02:39:34.383
WordPress, what I mean is a 
WordPress 

02:39:37.637 --> 02:39:39.637
platform where modern  workflows
coat

02:39:41.567 --> 02:39:43.567
workflows coding and performance
web practices is common place.

02:39:47.482 --> 02:39:49.950
How in the world given the size 
and scope of word press, how can

02:39:49.951 --> 02:39:51.951
we make progress quickly?

02:39:56.347 --> 02:40:00.005
to have a progressive WordPress 
size.  But fear not.  I am sure 

02:40:00.006 --> 02:40:02.006
you have heard about the 

02:40:03.150 --> 02:40:05.387
paging or amp for short.  It is 
open source library that makes 

02:40:16.027 --> 02:40:18.027
are very compelling and load 
instanttaineously.

02:40:19.518 --> 02:40:22.430
In a nut shell what amp does, it
is to of the box a set of 

02:40:22.431 --> 02:40:24.431
powerful 

02:40:26.103 --> 02:40:28.103
capabilities and performance 
that address three things.

02:40:31.876 --> 02:40:34.150
performance, run time 
performance.  I don't want 

02:40:34.151 --> 02:40:36.490
content in front of my and 
usability.

02:40:39.983 --> 02:40:42.245
I want a smooth transition 
between the action when I 

02:40:42.246 --> 02:40:44.246
engage.

02:40:46.958 --> 02:40:49.010
integrate amp, with the word 
that's platform as a choice, we 

02:40:49.011 --> 02:40:51.011
would be 

02:40:54.569 --> 02:40:56.410
all WordPress developers, the 
cape ability of what amp has to 

02:40:56.411 --> 02:40:58.411
offer to 

02:40:59.885 --> 02:41:01.885
compelling under very easy.

02:41:05.623 --> 02:41:08.683
a nut shell and we will see the 
integration in action.  Sorry.

02:41:16.931 --> 02:41:18.931
So amp -- developing amp pages 
entails three components.

02:41:20.172 --> 02:41:22.172
amp  HTML.

02:41:24.460 --> 02:41:26.460
You can think of it as both as a
set of HTML.

02:41:31.042 --> 02:41:32.674
satisfy reliable performance, 
you have to impose certain 

02:41:32.675 --> 02:41:34.675
constraints.

02:41:36.809 --> 02:41:39.051
(inaudible) because amp is 
essentially a web components 

02:41:39.052 --> 02:41:41.052
library that provides a 

02:41:42.138 --> 02:41:44.802
functionality that you can have 
on your finger tips in the form 

02:41:44.803 --> 02:41:47.875
of constant elemental task.
second component ises amp run 

02:41:47.876 --> 02:41:50.560
time system that is a piece of 
JavaScript 

02:41:54.897 --> 02:41:57.753
and has, you know, logic to 
control custom elements, a lot 

02:41:57.754 --> 02:41:59.754
of performance 

02:42:02.232 --> 02:42:04.232
scheduling and so on.

02:42:06.781 --> 02:42:08.781
And then we have the  amp cache.

02:42:12.330 --> 02:42:15.229
develop web pages, but it is 
like content distribution 

02:42:15.230 --> 02:42:17.230
network that serve 

02:42:20.356 --> 02:42:22.811
I'm pages available and used by 
everyone.  I say that it is not 

02:42:22.812 --> 02:42:24.812
necessary, but it 

02:42:28.502 --> 02:42:30.502
of optimization with the run 
time on amp 

02:42:31.581 --> 02:42:33.581
that provide that snappy load 
time that users love.

02:42:35.468 --> 02:42:37.120
finally the use of amp in the 
web Eco system that encompasses 

02:42:37.121 --> 02:42:39.121
the 

02:42:42.045 --> 02:42:44.045
across a variety of platforms 
that are 

02:42:45.310 --> 02:42:47.367
seeking the same that we are 
seeking, experience of those 

02:42:47.368 --> 02:42:49.368
platforms get.

02:42:52.078 --> 02:42:54.336
Things like, for example, the 
top news those product features.

02:42:57.806 --> 02:42:59.806
We use the linking and our 
WordPress 

02:43:02.129 --> 02:43:04.129
what amp has to offer.

02:43:08.084 --> 02:43:10.084
in one or three places.

02:43:13.837 --> 02:43:15.837
Things that have to do with the 
look 

02:43:19.361 --> 02:43:20.634
ta have to do with the 
functionality that the platform 

02:43:20.635 --> 02:43:22.635
has to offer.

02:43:27.390 --> 02:43:29.390
we are referring to an amp plug 
in that 

02:43:31.674 --> 02:43:33.674
is integrated on the web 
platform and 

02:43:35.334 --> 02:43:37.576
WordPress site.  All the plug 
ins that may be installed.

02:43:42.504 --> 02:43:44.504
WordPress.

02:43:45.785 --> 02:43:47.218
Now, the plug in for WordPress 
was bioneared by an open source 

02:43:47.219 --> 02:43:49.219
project 

02:43:51.107 --> 02:43:53.107
It was started at the very, very
early ages of amp.

02:43:56.547 --> 02:44:01.420
They were one of the earliest
adopters of the word frame.  

02:44:01.421 --> 02:44:02.229
They were affected by the 
mechanism called the 

02:44:02.230 --> 02:44:04.230
(inaudible).

02:44:08.356 --> 02:44:10.743
piece of content in a pose, 
there was a (inaudible) for word

02:44:10.744 --> 02:44:12.744
amp.

02:44:16.064 --> 02:44:18.512
of content, you have two 
versions.  Half one main 

02:44:18.513 --> 02:44:20.513
limitation that it was 

02:44:22.785 --> 02:44:24.785
enough engineering capabilities 
to work 

02:44:25.842 --> 02:44:27.842
on the result, you usually got a
lot of 

02:44:28.907 --> 02:44:31.773
visual disparity between the 
original content and the amp 

02:44:31.774 --> 02:44:33.774
version.

02:44:36.498 --> 02:44:38.498
So after the version plugging 0.

02:44:40.400 --> 02:44:42.400
of the plug in, we join forces 
with  XWP.

02:44:44.924 --> 02:44:46.924
And basically we set our eyes or
site 

02:44:48.819 --> 02:44:53.364
what we call Native experiences 
in WordPress.  A world where 

02:44:53.365 --> 02:44:56.027
there is no need have the same 
content because there is not 

02:45:01.404 --> 02:45:03.404
visual disparity, you can have 
only the 

02:45:04.905 --> 02:45:06.721
all the benefits without 
sacrificing the flexibility of 

02:45:06.722 --> 02:45:08.722
the WordPress platform.  That 
was our goal.

02:45:15.715 --> 02:45:17.715
version and it indeed, enabled 
many experiences.

02:45:21.419 --> 02:45:24.275
good; however, it is still 
Orientd to power users.  It is 

02:45:24.276 --> 02:45:26.276
not as easy as we would like to 
order to make it mainstream.

02:45:29.682 --> 02:45:31.682
We are here at I/O and we will 

02:45:33.149 --> 02:45:35.409
we have in the area of tooling 
and also in the editorial 

02:45:35.410 --> 02:45:39.092
workflow of configuration in 
WordPress N.second, we will talk

02:45:39.093 --> 02:45:41.093
about that.  After this, after 
1.

02:45:44.185 --> 02:45:47.028
0 plug in, we have it on the 
Alpha then comes a lot of word 

02:45:47.029 --> 02:45:49.488
that we want to mention in the 
end that has to do with content.

02:45:55.757 --> 02:45:57.757
we do that, I would like to call

02:46:08.707 --> 02:46:10.707
Thierry Muller on progressive  
WordPress.

02:46:13.417 --> 02:46:18.301
The latest work on the plug is 
ways.  The first one is by 

02:46:18.302 --> 02:46:20.962
providing a framework to empower
developers to 

02:46:25.433 --> 02:46:27.724
WordPress Eco system.  The 
second one is by providing tools

02:46:34.257 --> 02:46:36.901
components in the brand new 
workflow in WordPress.  To put 

02:46:36.902 --> 02:46:39.783
this in  context and better how 
we're closing the capability 

02:46:39.784 --> 02:46:41.784
usage 

02:46:43.061 --> 02:46:45.061
gap, we will look at some real 
world example.

02:46:49.270 --> 02:46:52.308
2015 theme which  comes by 
default bundled in WordPress.  

02:46:52.309 --> 02:46:55.385
It is active on half a million  
today.  But what would it really

02:46:55.386 --> 02:46:57.386
take to 

02:46:58.844 --> 02:47:00.844
actually convert this theme to 
be 

02:47:04.127 --> 02:47:06.585
specifically provide a  AMP 
experience.  Let's look at the 

02:47:06.586 --> 02:47:08.586
theme first and 

02:47:09.860 --> 02:47:12.115
The 2015 theme is all about 
content.  It is designed for 

02:47:12.116 --> 02:47:14.116
clarity.

02:47:16.196 --> 02:47:18.196
with a MobileFirst approach.

02:47:19.254 --> 02:47:21.254
One thing we want to pay 
specific 

02:47:24.586 --> 02:47:26.586
which it is JavaScript, custom 
Java script.

02:47:28.724 --> 02:47:30.724
On the other side, if we look 
closer 

02:47:35.489 --> 02:47:37.489
widget, it is allowed in line 
JavaScript.

02:47:38.544 --> 02:47:40.544
Or allowed in AMP at least.

02:47:42.070 --> 02:47:44.558
If we look closer, it chooses an
image tag and not an AMP image 

02:47:44.559 --> 02:47:46.559
tag.

02:47:49.879 --> 02:47:55.609
On the (inaudible) side, it 
loads threestyle  sheets.

02:48:03.992 --> 02:48:06.060
If you look at the Java script, 
there is multiple JavaScripts 

02:48:06.061 --> 02:48:11.396
loading.If you take a closer 
look at the function, it 

02:48:11.397 --> 02:48:13.397
includes or contains the 

02:48:15.957 --> 02:48:17.957
and widget area we saw early on 
in mobile.

02:48:22.470 --> 02:48:24.470
challenges, custom JavaScript, 
too much 

02:48:28.393 --> 02:48:33.103
of AMP in HTML.  Let's see how 
we can convert this.  It comes 

02:48:33.104 --> 02:48:35.104
with a set of amazing 

02:48:36.556 --> 02:48:38.556
can really help us overcome 
these challenges.

02:48:39.843 --> 02:48:43.122
It will do most of the heavy 
lifting for us.first thing we 

02:48:43.123 --> 02:48:45.123
would need to do is to 

02:48:46.453 --> 02:48:48.453
declare the so-called  AMP theme
support.

02:48:50.767 --> 02:48:52.187
All it takes is to add the code 
snippet you see on the screen 

02:48:52.188 --> 02:48:54.188
right now 

02:48:56.313 --> 02:48:58.313
in or in the trial name.

02:49:00.208 --> 02:49:02.450
Once the AMP theme is declared, 
the  AMP will consider the 

02:49:02.451 --> 02:49:04.451
active theme.

02:49:08.183 --> 02:49:10.183
vamp citizen and apply really 
nifty features.

02:49:14.549 --> 02:49:16.378
the AMP plug in is capable of 
converting the WordPress built 

02:49:16.379 --> 02:49:18.379
in components and incomparable.

02:49:21.895 --> 02:49:23.737
By that, we mean widgets and 
(inaudible), literally 

02:49:23.738 --> 02:49:26.192
everything WordPress components.

02:49:31.292 --> 02:49:33.292
the archives widgets.

02:49:38.702 --> 02:49:40.702
AMP conversion, we have this in 
line allowed line in Java M.

02:49:48.317 --> 02:49:50.022
plug ins that changed that to 
function.  It is part of the 

02:49:50.023 --> 02:49:52.023
library and that 

02:49:53.501 --> 02:49:55.501
that will pass validation.

02:49:59.021 --> 02:50:04.379
So if we look at the invalid 
AMP, what same results.  That's 

02:50:04.380 --> 02:50:07.096
what we see on the screens.  On 
the right-hand side, we can see 

02:50:07.097 --> 02:50:09.097
it 

02:50:11.387 --> 02:50:13.387
AMP validation.

02:50:15.725 --> 02:50:17.725
Only 50 kilobytes are allowed to
enter maximum page speed.

02:50:19.636 --> 02:50:24.983
WordPress.  A lot of themes 
contain a lot more than that.  

02:50:24.984 --> 02:50:26.984
To address this issue and make 
it 

02:50:29.865 --> 02:50:31.865
the AMP plug in includes a tree 
shaking 

02:50:33.351 --> 02:50:35.351
mechanism which has the ability 
to only 

02:50:38.697 --> 02:50:40.735
on any given page and remove all
the unnecessary CSS.

02:50:44.204 --> 02:50:46.204
If we look once again at the 
stripped 

02:50:48.286 --> 02:50:50.286
version of the 2015 theme code, 
they are two style sheets.

02:50:58.456 --> 02:51:00.456
that  CSS alone is 96 
kilobytesst

02:51:04.269 --> 02:51:08.739
.  It is printed in line using 
the prescribed by AMP.  That 

02:51:08.740 --> 02:51:11.584
will apply validation.  If we 
look once again at the invalid 

02:51:16.715 --> 02:51:18.976
we can see that we achieve what 
we are after, which is exactly 

02:51:18.977 --> 02:51:20.977
the same result.

02:51:26.596 --> 02:51:28.596
from 114 kilo bytes of  CSS down
to 9 kilo bytes.

02:51:34.997 --> 02:51:36.997
This is ten times smaller.

02:51:38.268 --> 02:51:40.268
Predicting what thousand of plug
ins 

02:51:41.937 --> 02:51:45.613
render on the page is extremely 
difficult.  And to address that,

02:51:45.614 --> 02:51:47.614
the plug in 

02:51:50.944 --> 02:51:52.944
which is capable of validatingd 
page 

02:51:55.662 --> 02:51:57.662
outputs and entering income 
pattibility wherever possible.

02:52:00.365 --> 02:52:02.365
may come across some 
functionalities 

02:52:03.833 --> 02:52:05.833
Efollow when JavaScript is 
involved.

02:52:08.537 --> 02:52:10.537
little bit in more detail.

02:52:12.050 --> 02:52:16.342
If we look at the  HTML before 
the there's an image.  If we 

02:52:16.343 --> 02:52:18.343
look at the bottom snippet, it 

02:52:19.628 --> 02:52:21.628
is able to convert this image 
using the image deck.

02:52:24.796 --> 02:52:26.796
That is considered as a safe 
change.

02:52:28.449 --> 02:52:30.449
The functions that (inaudible) 
in 

02:52:31.517 --> 02:52:33.517
and validation, it would have to
be removed.

02:52:34.582 --> 02:52:36.582
And the plug in is capable of 
doing that.

02:52:38.549 --> 02:52:40.549
look at the invalid AMP version,
the 

02:52:42.446 --> 02:52:44.446
invalid works the menu toggle, 
but on 

02:52:45.482 --> 02:52:48.154
the menu doesn't work anymore.  
And then we have a problem.  

02:52:48.155 --> 02:52:50.155
Right?

02:52:54.281 --> 02:52:56.948
make AMP integration as easy as 
possible and to improve the user

02:52:56.949 --> 02:52:59.186
experience but any mean.

02:53:04.281 --> 02:53:06.733
That's why we still need a 
validation workflow which allows

02:53:06.734 --> 02:53:11.636
developers to all the features 
the plug in includes, but also 

02:53:11.637 --> 02:53:13.694
have control and be able to 
manage it.

02:53:16.971 --> 02:53:19.631
the plug in will convert and 
apply all the conversions which 

02:53:19.632 --> 02:53:21.632
are considered as safe.

02:53:25.189 --> 02:53:27.055
the AMP HTML conversion and with
changes that we could introduce 

02:53:27.056 --> 02:53:29.056
regression.

02:53:30.206 --> 02:53:32.206
through a validation workflow, 
which looks like this.

02:53:35.133 --> 02:53:37.985
For example, for the  CSS tree 
the developer can go ahead and 

02:53:37.986 --> 02:53:41.886
view the front and as if the 
plug in was to apply this 

02:53:41.887 --> 02:53:43.887
feature.

02:53:44.936 --> 02:53:47.381
we can see and we saw early on, 
it works perfectly fine.  At 

02:53:47.382 --> 02:53:49.382
that point, we can go ahead and 

02:53:51.265 --> 02:53:53.265
the plug in please enable it so 
that it passes and validation.

02:53:57.653 --> 02:54:00.105
early on that it actually breaks
the menu.  And the plug in will 

02:54:00.106 --> 02:54:02.106
not apply this 

02:54:03.416 --> 02:54:05.676
not to introduce regression.  
That will give developers a 

02:54:05.677 --> 02:54:07.677
chance too 

02:54:08.705 --> 02:54:10.705
go

02:54:13.018 --> 02:54:15.018
Use the state function to toggle
the 

02:54:16.018 --> 02:54:18.018
Dallas class.

02:54:23.243 --> 02:54:25.243
team by  overriding the head of 
the PHP.

02:54:27.321 --> 02:54:29.791
Once it is proven to be working,
the go ahead and tell the plug 

02:54:29.792 --> 02:54:32.024
in now that we fixed it, you can
remove the 

02:54:36.913 --> 02:54:38.913
pass the AMP  AMP validation.

02:54:45.347 --> 02:54:47.347
the 2015, which is a popular 
name, we 

02:54:49.248 --> 02:54:51.248
AMP team support.

02:54:53.780 --> 02:54:55.780
We had to apply a fix by using 
the AMP buying components.

02:54:57.697 --> 02:54:59.745
validation workflow and told 
them to apply the  conversion 

02:54:59.746 --> 02:55:04.660
after reviewing them.end result.
What we're looking at right now 

02:55:04.661 --> 02:55:06.661
is a 

02:55:08.346 --> 02:55:10.346
Native M version of the 2015 
theme.

02:55:11.446 --> 02:55:13.698
great as the non-AMP version.  
Of course, if we look at it on 

02:55:13.699 --> 02:55:15.699
mobile, it looks similar as 
well.

02:55:19.067 --> 02:55:21.067
we can see just now, because we 
applied 

02:55:22.813 --> 02:55:24.813
the M bind, the menu is still 
working.

02:55:26.905 --> 02:55:29.784
to look at the console, we can 
see it passed  successfully.

02:55:33.882 --> 02:55:38.959
side.  Let's draw the lighthouse
audit without the M plug in.

02:55:42.350 --> 02:55:44.350
We get a score of 66 with a 4.

02:55:45.833 --> 02:55:48.762
meaning for prints.  If we run 
the same lighthouse test 

02:55:55.472 --> 02:55:57.749
the  AMP conversion, we get an 
88 with the first meaningful 

02:55:57.750 --> 02:55:59.750
paint of 2.8 second.

02:56:08.415 --> 02:56:10.415
We see how the latest 
development work 

02:56:11.508 --> 02:56:13.508
done on the plug in is helping 

02:56:19.100 --> 02:56:21.161
product, existing sometimes and 
plug ins used by people.

02:56:26.862 --> 02:56:28.862
content creation side.

02:56:34.068 --> 02:56:36.068
content creation spans in 
WordPress.

02:56:37.754 --> 02:56:39.754
It replaces half a dozen 
inconsistent 

02:56:42.654 --> 02:56:44.654
WordPress bringing it with the 
modern standards.

02:56:47.151 --> 02:56:49.151
And aligning with web 
initiatives.

02:56:50.188 --> 02:56:52.883
the gap between the back end and
the front end  offering an 

02:56:52.884 --> 02:56:54.884
amazing visual 

02:57:02.104 --> 02:57:04.315
So Gutenberg has the concept of 
blocks and on the other side AMP

02:57:04.316 --> 02:57:06.316
has the 

02:57:07.384 --> 02:57:10.068
components, micro libraries to 
build pages.  But what about 

02:57:10.069 --> 02:57:12.069
combining the power of 

02:57:13.717 --> 02:57:16.162
Gutenberg AMP blocks?  This is 
exactly what we did and it 

02:57:22.310 --> 02:57:24.596
We worked hard and pushing the 
boundaries to take the Native  

02:57:24.597 --> 02:57:26.597
AMP 

02:57:28.451 --> 02:57:30.910
further leveraging all the 
latest work done on the plug in 

02:57:30.911 --> 02:57:32.911
as well as a range 

02:57:34.451 --> 02:57:38.328
and blocks.  This is what it 
looks like.  What we're looking 

02:57:38.329 --> 02:57:43.839
at right now is a Gutenberg 
powered theme.  It's  inspired 

02:57:43.840 --> 02:57:46.288
from the AMP start 
functionalities that we see on 

02:57:46.289 --> 02:57:48.289
the page 

02:57:50.593 --> 02:57:52.593
is powered by WordPress and 
Gutenberg.

02:57:54.411 --> 02:57:58.572
If we look atsingle adventure, 
we leveraging some of the AMP 

02:57:58.573 --> 02:58:00.573
components.

02:58:02.017 --> 02:58:04.017
It sliced through

02:58:05.336 --> 02:58:07.336
through the images.

02:58:08.813 --> 02:58:10.813
We are also using some of the 

02:58:12.895 --> 02:58:14.895
comments to actually allow users
to 

02:58:15.963 --> 02:58:17.963
submit reviews.

02:58:19.642 --> 02:58:21.642
Or the WordPress search to 
actually 

02:58:23.126 --> 02:58:25.186
We can really see how the 
content management system shines

02:58:25.187 --> 02:58:27.187
to manage the here.

02:58:30.057 --> 02:58:31.958
On mobile, it is the same 
version of this theme and it 

02:58:31.959 --> 02:58:33.959
looks just as great out of the 
box.

02:58:35.686 --> 02:58:37.731
What we're looking sat Native 
AMP, but it is seamlessly 

02:58:37.732 --> 02:58:39.732
integrated.

02:58:43.423 --> 02:58:46.087
adventures are categorized.  We 
can see that it is pretty well 

02:58:46.298 --> 02:58:48.298
organized.

02:58:50.819 --> 02:58:52.819
adventure, we see other AMP 
components 

02:58:55.308 --> 02:58:57.308
to make the user experience 
better.

02:59:00.639 --> 02:59:02.639
It is secure and seamlessly 

02:59:05.066 --> 02:59:07.066
integrating and it is pretty I

02:59:10.021 --> 02:59:12.277
perfectly aligned with a 
delightful user experience.  

02:59:12.278 --> 02:59:14.941
What about the content creation 
side of it?What about the 

02:59:14.942 --> 02:59:16.996
content creation experience that
we spoke about early on?

02:59:21.537 --> 02:59:23.537
Gutenberg can be used to rebuild
a 

02:59:24.838 --> 02:59:26.838
different version of the home  
page.

02:59:28.521 --> 02:59:30.521
page a title.

02:59:31.815 --> 02:59:33.869
And then we'll have access to a 
set of blocks.  For instance, 

02:59:33.870 --> 02:59:36.337
custom blocks.clicking on the 
little plus button, it 

02:59:39.385 --> 02:59:41.385
will open a drop down.

02:59:44.718 --> 02:59:46.718
home page is just click on the 
hero block.

02:59:48.183 --> 02:59:50.183
As we can see, what we see 
immediately 

02:59:51.270 --> 02:59:53.310
resembled the front end and we 
have access to really cool 

02:59:53.311 --> 02:59:55.752
things like in text.

03:00:00.649 --> 03:00:02.711
This is new in WordPress and it 
is pretty amazing.

03:00:06.997 --> 03:00:09.435
from the three suggested block, 
which is the most used.

03:00:12.493 --> 03:00:14.493
Right there we have a second 
block on 

03:00:15.559 --> 03:00:17.559
page and we can continue editing
our 

03:00:19.015 --> 03:00:21.258
page, for example, by changing 
the sub-title.more third block.

03:00:25.366 --> 03:00:27.366
The featured destination block.

03:00:31.430 --> 03:00:33.430
Once again as we can see, it 
pieced

03:00:34.534 --> 03:00:37.201
the content automatically.  
Click on the little icon on the 

03:00:37.202 --> 03:00:39.202
land side and boom.

03:00:42.121 --> 03:00:44.560
up and is now under the heyward 
block.  This is a pretty amazing

03:00:44.561 --> 03:00:46.561
editing 

03:00:48.060 --> 03:00:50.060
perspective at least.

03:00:53.556 --> 03:00:56.178
Let's preview what we just 
(inaudible) in 30 seconds.  A 

03:00:56.179 --> 03:00:58.179
different version of the home 
page.

03:01:00.694 --> 03:01:03.140
Native AMP was accessed of the 
amazing  AMP components and 

03:01:03.141 --> 03:01:05.141
amazing content 

03:01:06.614 --> 03:01:10.104
experience powered by Gutenberg.
So where are we at today?  0.

03:01:15.020 --> 03:01:18.503
released last week.  And 0.7 is 
really the first step towards 

03:01:19.529 --> 03:01:21.529
Native AMP.

03:01:25.435 --> 03:01:27.469
toward power themes built from 
scratch.  We have the  AMP plug 

03:01:27.470 --> 03:01:32.834
in 1.progress.  That will 
include validation workflow we 

03:01:32.835 --> 03:01:34.835
have today.

03:01:43.320 --> 03:01:44.819
Gutenberg blocks and a range of 
custom Gutenberg blocks which 

03:01:44.820 --> 03:01:50.566
integrates the AMP components  
But the future is also very, 

03:01:50.567 --> 03:01:52.567
very 

03:01:54.423 --> 03:01:56.470
invite Alberto back on stage to 
tell you more about it.  Thank 

03:01:56.471 --> 03:01:58.471
you.

03:02:01.011 --> 03:02:04.667
&gt;&gt; ALBERTO MEDINA:  Thank you, 
Thierry.  Oh, my God.  That's so

03:02:04.668 --> 03:02:10.400
exciting.saw it before, but 
that's awesome.  We have 

03:02:10.401 --> 03:02:12.401
certainly come a long way on 

03:02:14.506 --> 03:02:17.565
progressive WordPress, but we 
are not where we want to be.  

03:02:17.566 --> 03:02:19.566
There is quite a bit of work we 
have do.

03:02:21.848 --> 03:02:23.848
We are pursuing significant 
efforts in three main areas.

03:02:25.736 --> 03:02:30.664
WordPress.  You may have heard 
of it as the app shell 

03:02:30.665 --> 03:02:32.665
architecture, which is a pattern

03:02:35.192 --> 03:02:37.266
s in a way that is tactics and 
sections that do not change 

03:02:37.267 --> 03:02:39.267
across navigation.

03:02:40.773 --> 03:02:42.819
easily so that when you navigate
the page, they can be loaded 

03:02:42.820 --> 03:02:44.820
very  quickly 

03:02:46.071 --> 03:02:48.710
nice onward experience for the 
user.  Part of the pages that 

03:02:48.711 --> 03:02:50.711
are changing 

03:02:54.197 --> 03:02:56.197
rendered on the client or on the
server.

03:02:57.668 --> 03:02:59.668
What I exactly (inaudible) about
this 

03:03:01.534 --> 03:03:03.368
corporation or the service 
workers  API into the word press

03:03:03.369 --> 03:03:05.405
core platform.this particular 
area.

03:03:09.350 --> 03:03:11.013
Another area has to do with 
remembering progressive web 

03:03:11.014 --> 03:03:15.750
development mods.need tooling to
help user developers to do  

03:03:15.751 --> 03:03:17.751
complex things in an easy way.

03:03:19.214 --> 03:03:21.214
is tooling to facilitate the 
development of WordPress themes.

03:03:25.252 --> 03:03:30.735
this in a second.  The last 
part, which is like an Uberarea 

03:03:30.736 --> 03:03:32.736
has to do with Eco system 
adoption.

03:03:35.449 --> 03:03:37.449
saw WordPress has a consistent 
area of 

03:03:38.948 --> 03:03:40.948
thousands of plug ins and 
thousands of themes.

03:03:43.248 --> 03:03:44.477
with the community to push 
WordPress towards the 

03:03:44.478 --> 03:03:46.478
progressive load.

03:03:48.335 --> 03:03:50.335
here and stay tune for them.

03:03:52.263 --> 03:03:54.263
Now, our friends have been 
working 

03:03:57.391 --> 03:04:00.031
progressive theme boilerbait.  
Essentially it is a theme 

03:04:00.032 --> 03:04:02.032
development 

03:04:04.794 --> 03:04:07.246
or makes it easier for WordPress
to go from zero to a full 

03:04:07.247 --> 03:04:09.247
progressive theme very quickly.

03:04:12.757 --> 03:04:14.791
boilerplate comes with modern 
development workflow, it uses  

03:04:14.792 --> 03:04:16.792
tools 

03:04:17.849 --> 03:04:19.849
browser sync.

03:04:21.492 --> 03:04:23.132
It  comes with a range of coding
and performance practices baked 

03:04:23.133 --> 03:04:25.133
in.

03:04:29.896 --> 03:04:31.896
example, synchronized loading 
resourcing.

03:04:33.651 --> 03:04:35.651
Lazy loading of images and it 
has an immigration.

03:04:40.156 --> 03:04:42.156
So the theme

03:04:43.416 --> 03:04:47.517
integration.get go.  So the main
developer of this 

03:04:50.943 --> 03:04:52.943
project, which is

03:04:56.168 --> 03:04:58.852
preparing an awesome course that
will teach you everything about 

03:04:58.853 --> 03:05:03.331
how to use this boiler plate.
That is going to be free.  Okay?

03:05:05.579 --> 03:05:07.817
Another thing is if you can take
three the following.

03:05:11.295 --> 03:05:13.295
Success in the web is all about 
user experiences.

03:05:14.602 --> 03:05:20.287
experiences.  To do that, we 
need to start to close the 

03:05:20.288 --> 03:05:22.743
capabilities usage gaps T.do the
right thing in the web.

03:05:27.042 --> 03:05:29.042
And the topic of today, it is 
possible 

03:05:32.519 --> 03:05:34.519
to get experiences without 
sacrificing 

03:05:35.981 --> 03:05:38.425
the Fidelity of their site, the 
content of the WordPress 

03:05:38.426 --> 03:05:40.426
platform.

03:05:42.139 --> 03:05:44.139
Remember those three things.

03:05:46.824 --> 03:05:48.824
you-like to code and you are 
passionate 

03:05:51.140 --> 03:05:52.993
WordPress  Eco system better, 
you may consider working with us

03:05:52.994 --> 03:05:55.028
exactly on doing that.

03:05:59.092 --> 03:06:01.092
There are useful resources here 
and I 

03:06:02.820 --> 03:06:04.880
thanks for the whole team and 
automatic for all the awesome 

03:06:04.881 --> 03:06:07.192
contribution to this really 
looking forward to what we're 

03:06:09.251 --> 03:06:11.690
going to achieve in the coming 
months.  Thank you very much.

03:07:16.444 --> 03:07:18.444
What's new in web accessibility

03:30:15.769 --> 03:30:21.162
Thank you for coming.  I am a 
product manager on the next at 

03:30:21.163 --> 03:30:23.401
Google.  We want to use this 
session to tell 

03:30:32.428 --> 03:30:34.428
&gt;&gt; , Indonesia and places around
the world.

03:30:38.169 --> 03:30:41.628
in from India for I/O?  Awesome.
Okay.very late right now for you

03:30:41.629 --> 03:30:46.898
all.  So we'll try to keep you 
up.  Anybody from Indonesia who 

03:30:46.899 --> 03:30:53.412
is here?Okay.  Couple.  Cool.  
Brazil?  Great.  Okay.  I'm sure

03:30:53.413 --> 03:30:56.056
there's a lot of other too.  
Thank you all for coming.

03:31:01.367 --> 03:31:03.367
interview some of the folks on 
stage is 

03:31:05.494 --> 03:31:07.494
how this initiative and focus 
area for Google got started.

03:31:12.476 --> 03:31:15.322
been interested in building 
products for everyone.  Looking 

03:31:15.323 --> 03:31:18.028
around the world is literally 
new people come online for the 

03:31:18.029 --> 03:31:20.029
first time that.

03:31:22.257 --> 03:31:24.257
Changes how we think about

03:31:25.337 --> 03:31:28.604
ways we think about.  Some of 
the things we got right and some

03:31:28.605 --> 03:31:30.605
of the things we got wrong.

03:31:32.470 --> 03:31:34.470
think about exist product.

03:31:41.838 --> 03:31:44.687
or Maps or some of the other, we
have a few others.  Today in 

03:31:44.688 --> 03:31:46.688
*EUPBD Jack, 28% of the 

03:31:48.830 --> 03:31:50.830
see are Voice searches, which is
amazing.

03:31:52.306 --> 03:31:54.795
It's growing --  Voice is 
growing    Brings up interesting

03:31:54.796 --> 03:31:57.842
questions of how you interact 
with computing devices,  and 

03:31:57.843 --> 03:31:59.843
others.

03:32:02.977 --> 03:32:04.625
We have also seen in Google 
Maps, our new two Wheeler code 

03:32:04.626 --> 03:32:06.626
feature.

03:32:08.257 --> 03:32:10.257
Really popular

03:32:12.184 --> 03:32:14.225
.  That's a little bit about how
we started thinking about our 

03:32:14.226 --> 03:32:16.226
existing 

03:32:18.981 --> 03:32:21.444
Smartphone prices drop around 
the world, Connectivity becomes 

03:32:21.445 --> 03:32:23.445
more  affordable, 

03:32:26.141 --> 03:32:28.141
come online and it opens up more
use cases.

03:32:29.609 --> 03:32:34.334
That's what our three pannists 
have panelists have been doing. 

03:32:34.335 --> 03:32:36.335
We will talk to you about 
product we 

03:32:39.066 --> 03:32:41.500
months and a lot of what has 
gone into them from the 

03:32:41.501 --> 03:32:44.577
engineering and design and 
research side.what I will do is 

03:32:44.578 --> 03:32:46.578
introduce them briefly 

03:32:47.886 --> 03:32:52.201
and then we'll get into some of 
the questions.mics in the room. 

03:32:52.202 --> 03:32:54.202
If people want to come up, you 
can come up and ask questions.

03:33:01.380 --> 03:33:03.380
I want to introduce PANKASH.

03:33:06.380 --> 03:33:08.380
There's a whole lot of stories 
here can share.

03:33:15.986 --> 03:33:18.636
have DIVESH leads our Files Go 
team.  It let's user free up 

03:33:18.637 --> 03:33:20.637
space and find 

03:33:22.699 --> 03:33:24.699
also share files offline when 
you're nearby people.

03:33:27.336 --> 03:33:31.890
So it is very interestthat went 
into that.  And next we have 

03:33:31.891 --> 03:33:37.219
NITHIA.  She has worked on every
product at fashion.  She will 

03:33:37.220 --> 03:33:38.860
share a lot of lessons doing 
research in the field, but also 

03:33:38.861 --> 03:33:40.861
we have 

03:33:41.950 --> 03:33:43.993
local teams based around the 
world that build a lot of these 

03:33:43.994 --> 03:33:45.994
products for us.

03:33:49.284 --> 03:33:51.519
next billion users group really 
thinks about how do we staff 

03:33:51.520 --> 03:33:53.520
people in the 

03:33:54.811 --> 03:33:56.811
as they're emerging and give a 
lot of 

03:33:58.075 --> 03:34:01.942
the small teams a lot of 
latitude to go problems.  We're 

03:34:01.943 --> 03:34:03.365
an experimental group and the 
three of them will talk about 

03:34:03.366 --> 03:34:05.366
some of have launched.

03:34:08.938 --> 03:34:10.938
Let's start with  PANKASH.

03:34:12.616 --> 03:34:14.616
Give us an overview of what this
is.

03:34:21.376 --> 03:34:26.470
means fast in India and some 
other region languages.into bank

03:34:26.471 --> 03:34:28.471
protocol that was introduced 

03:34:29.936 --> 03:34:33.223
in India called  UPI, universal 
payments interface.almost all 

03:34:33.224 --> 03:34:35.224
Indian banks have implemented 
this.

03:34:37.278 --> 03:34:41.999
It is 24 by 7 instant bank to 
bank protocol T. puts a brand 

03:34:42.000 --> 03:34:47.093
new very fresh user experience 
on a variety of payment use this

03:34:47.094 --> 03:34:49.543
protocol.  So a taze user links 
their bank 

03:34:53.015 --> 03:34:55.912
account with their Google 
account and them payment 

03:34:55.913 --> 03:34:58.828
address, which is called a 
virtual payment address.

03:35:04.860 --> 03:35:08.862
So any service or product that 
is using that has to share this 

03:35:08.863 --> 03:35:11.295
mechanism.the neat thing is any 
payments that are 

03:35:14.345 --> 03:35:16.345
done from this address or into 
this 

03:35:21.288 --> 03:35:23.288
address are  done are done from 
the bank account directly.

03:35:25.594 --> 03:35:28.030
You don't have to to load up a 
digital first and then transact 

03:35:28.031 --> 03:35:30.031
from that wallet.

03:35:33.732 --> 03:35:36.394
The of the neat thing is that 
the and made the transactions 

03:35:36.395 --> 03:35:38.395
free of cost.

03:35:40.288 --> 03:35:42.288
There's a big push by the 
government 

03:35:43.337 --> 03:35:45.337
digitization.

03:35:46.409 --> 03:35:48.409
What you have is instant 24 by 7
free 

03:35:51.934 --> 03:35:54.790
your finger tips on your 
Smartphone.  So why don't I show

03:35:54.791 --> 03:35:57.457
a demo of some of these 
features.

03:36:01.107 --> 03:36:03.107
We were having some Wi-Fi issues

03:36:05.615 --> 03:36:07.615
earlier as they usually do with 
the demo.phones here.

03:36:11.524 --> 03:36:13.524
If I could get the wolf vision. 
Okay.

03:36:16.630 --> 03:36:18.630
So this wolf vision one is my 
phone.

03:36:20.917 --> 03:36:24.594
going to get into Taze.  It uses
the OS lock.  So we will get 

03:36:24.595 --> 03:36:26.595
here.

03:36:30.874 --> 03:36:34.874
about the orientation.  We will 
do this also on the phone on the

03:36:34.875 --> 03:36:36.875
left here.

03:36:38.288 --> 03:36:40.288
app.

03:36:41.354 --> 03:36:43.354
Again use the OS lock to open 
it.

03:36:47.485 --> 03:36:50.744
And now we have what you see 
right button.  Let me explain 

03:36:50.745 --> 03:36:52.780
this.  We call these cache mode 
payments.

03:37:01.744 --> 03:37:03.584
phone and they walk into a shop 
and there is a (inaudible) in 

03:37:03.585 --> 03:37:05.585
the shop.

03:37:07.741 --> 03:37:09.741
phones nearby and one of my 
phones is 

03:37:10.830 --> 03:37:12.662
working on end to end 
international roaming.  I hope 

03:37:12.663 --> 03:37:14.663
it works.

03:37:18.388 --> 03:37:20.388
Ah, let's put this into the 
receive 

03:37:26.090 --> 03:37:28.090
and see if the phone discovers 
the other phone.

03:37:31.051 --> 03:37:33.898
So what should happen, if Wi-Fi 
was one phone would be 

03:37:33.899 --> 03:37:37.999
discovered by the other phone.  
Let's see.

03:37:44.371 --> 03:37:46.371
Boom.

03:37:49.705 --> 03:37:52.570
on the left has discovered the 
phone on the right, which is my 

03:37:52.571 --> 03:37:54.571
phone.

03:38:28.988 --> 03:38:31.234
payments work.  What you can 
also see now just  

03:38:37.335 --> 03:38:39.335
focusing on the Chrome cast,

03:38:40.613 --> 03:38:42.613
phone on the left, you see these
chat heads.

03:38:44.218 --> 03:38:46.218
These are profile pictures of 
the 

03:38:47.518 --> 03:38:51.846
I.  I can tap on  someone, say 
this person.  It will give me 

03:38:51.847 --> 03:38:54.285
the entire history of payment 
transactions that have happened 

03:38:55.315 --> 03:38:59.777
between me and this person.  So 
that's really convenient.Now if 

03:38:59.778 --> 03:39:01.778
you go down further, you see 
this section called businesses.

03:39:08.157 --> 03:39:10.157
phone provider, nie internet 
provider 

03:39:11.214 --> 03:39:13.214
and we recently integrated build
payments.

03:39:16.108 --> 03:39:18.376
due and I tap it and it's done 
in an instant.  Likewise, you 

03:39:18.377 --> 03:39:21.235
can check balance and as well.  
So that's kind of like a quick 

03:39:23.946 --> 03:39:27.649
overview of the app.   &gt;&gt; nice. 
You can tell a little bit more 

03:39:27.650 --> 03:39:31.975
about the cash mode and how you 
guys built back story there.

03:39:37.262 --> 03:39:39.262
Is it started with user insights
and 

03:39:44.064 --> 03:39:45.913
fact that paying by cash is 
still quite widespread in India 

03:39:45.914 --> 03:39:47.914
and other markets.

03:39:49.995 --> 03:39:51.995
it, paying by cash has its 
benefits.

03:39:53.680 --> 03:39:55.680
So let's like pseudoprivate, 
anonymous 

03:39:57.791 --> 03:39:59.791
we wanted to do a digital mode 
of 

03:40:03.332 --> 03:40:06.390
which is kind of like cash in 
many senses.  And so that's why 

03:40:06.391 --> 03:40:08.391
we call cash mode.

03:40:12.077 --> 03:40:12.901
actually there are various ways 
to make the nearby proximity 

03:40:12.902 --> 03:40:14.902
payments work.  Like in the U.S.

03:40:18.192 --> 03:40:20.192
various parts of the world, 
generally 

03:40:21.857 --> 03:40:23.857
NFC has been the way to go.

03:40:24.912 --> 03:40:30.013
don't have NFC.  Certainly 
you're trying to make two phones

03:40:30.014 --> 03:40:32.014
who have never seen other, ever,

03:40:34.536 --> 03:40:34.934
want to exchange expolice it 
wily some addressing 

03:40:34.935 --> 03:40:36.935
information.

03:40:41.744 --> 03:40:43.744
information for pairing on 
audio.

03:40:46.858 --> 03:40:48.858
Actually using ultrasound.

03:40:54.269 --> 03:40:55.508
sends a shot ID at broadcast a 
shot  ID identifying itself 

03:40:55.509 --> 03:40:57.509
saying this is me.  This is  me.

03:41:03.544 --> 03:41:05.544
And this ID is broadcast using 
direct 

03:41:07.419 --> 03:41:09.419
sequence spectrum and it's a 
spectrum technique.

03:41:12.508 --> 03:41:14.757
doing is multiplying the data 
signal by pseudorandom noise 

03:41:14.758 --> 03:41:16.758
signal.

03:41:21.728 --> 03:41:23.728
on an inaudible frequency, 
nobody can 

03:41:24.808 --> 03:41:26.808
hear it, what's being transfered
is 

03:41:29.496 --> 03:41:31.328
important for security because 
then a snooper can get access to

03:41:31.329 --> 03:41:38.021
the signal, of T. however, the 
receiver can use the same and 

03:41:38.022 --> 03:41:40.679
multiply it with the signal that
it same pseudorandom noise, 

03:41:40.680 --> 03:41:44.386
code, and recover the signal.  
So the receiver recovers the ID,

03:41:49.491 --> 03:41:51.491
the ID and does a look out to 
see who 

03:41:52.959 --> 03:41:54.959
does this  ID belong to.

03:41:56.033 --> 03:41:58.668
information to the receiver 
phone just like the other phone 

03:41:58.669 --> 03:42:03.590
got you're paying tap.  That's 
the user confirmation.  That's 

03:42:03.591 --> 03:42:05.591
how it works.

03:42:06.860 --> 03:42:08.860
I think it's been great for us.

03:42:10.367 --> 03:42:12.200
can imagine, there's lots of 
challenges in making this work 

03:42:12.201 --> 03:42:14.243
in terms of tuning and 
configurations.

03:42:19.788 --> 03:42:21.788
broadcast or configuration, 
various 

03:42:25.120 --> 03:42:26.960
statistics about this when we 
launched and Taze launched in 

03:42:26.961 --> 03:42:28.961
September last year.

03:42:31.857 --> 03:42:33.857
devices and hand tuned them in a
lab and 

03:42:35.369 --> 03:42:37.369
since then, we have evolved this
process 

03:42:39.285 --> 03:42:41.312
it's a control system like 
feedback loop in which we just 

03:42:41.313 --> 03:42:43.313
adjust automatically 

03:42:45.823 --> 03:42:47.823
in the field and observe how 
that goes.

03:42:49.485 --> 03:42:51.485
Today we have nearly 6,000 
unique 

03:42:54.840 --> 03:42:56.840
successful cache mode 
transaction.

03:42:57.921 --> 03:42:59.921
So, you know, I think it was 
extremely 

03:43:01.606 --> 03:43:03.606
get the coverage that we 
eventually 

03:43:05.138 --> 03:43:08.397
ended up getting and that's why 
we chose    &gt;&gt; Interesting.  

03:43:08.398 --> 03:43:10.398
Nice.  Maybe one last question 
for you.

03:43:13.699 --> 03:43:15.699
about what you learned working 
with a 

03:43:17.990 --> 03:43:19.990
new app, a new protocol in UPI, 
a lot of 

03:43:22.725 --> 03:43:24.725
I think there's a war story 
here.

03:43:33.257 --> 03:43:35.257
banks in India as our partner.

03:43:39.671 --> 03:43:41.671
You are building any distributed

03:43:44.392 --> 03:43:46.392
components and you have to build
some 

03:43:48.061 --> 03:43:50.061
help monitoring and other high 
availability things.

03:43:51.770 --> 03:43:53.770
we do is a couple of things just
to give it a quick example each.

03:43:58.095 --> 03:43:59.732
when this grass has been created
-- address has been created, 

03:43:59.733 --> 03:44:02.180
when the bank the other bang.

03:44:06.488 --> 03:44:08.488
bank.

03:44:09.983 --> 03:44:11.983
At payment time, what's 
important is 

03:44:13.891 --> 03:44:19.597
stock state.  We build ML 
predictd models to figure out 

03:44:19.598 --> 03:44:21.598
whether any of the banks are 
five a transaction.

03:44:23.709 --> 03:44:26.144
The way the protocol define its 
and any of them is almost down, 

03:44:26.145 --> 03:44:28.428
then we bring it up and say 
please try again 

03:44:31.444 --> 03:44:33.444
rather than having the risk of 
the 

03:44:35.340 --> 03:44:37.568
little bit of a stuck state 
where nobody knows where the 

03:44:37.569 --> 03:44:41.230
money has gone.   &gt;&gt; PRESENTER: 
Nice.  Great.  I want to shift 

03:44:41.231 --> 03:44:44.502
gears a little bit and talk 
about files go.you can tell us 

03:44:44.503 --> 03:44:46.503
just briefly what it is.

03:44:53.218 --> 03:44:55.218
&gt;&gt; 

03:44:58.057 --> 03:45:00.486
It is in India markets and it 
haven'ts peer to peer sharing 

03:45:00.487 --> 03:45:05.204
using technology.use internet.  
So the way it all started was we

03:45:07.229 --> 03:45:09.229
started looking at what the 
users in 

03:45:10.897 --> 03:45:12.897
needed and we realized first 
that mobile 

03:45:14.180 --> 03:45:16.180
data in the  markets were very 
expensive.

03:45:18.465 --> 03:45:20.701
that meant was users in the 
markets were not able to consume

03:45:20.702 --> 03:45:22.702
content on their 

03:45:25.447 --> 03:45:26.259
primary only device for them 
most of the time because of the 

03:45:26.260 --> 03:45:28.260
expense.

03:45:29.329 --> 03:45:32.180
nearby sharing was born.  Then 
as we were researching more, we 

03:45:35.287 --> 03:45:37.287
access to more content, they 
could get from their friends.

03:45:42.234 --> 03:45:46.957
storage.  They started running 
out of storage when they started

03:45:46.958 --> 03:45:50.228
getting  content from friends.  
The other problem that we saw 

03:45:50.229 --> 03:45:52.229
was 

03:45:53.484 --> 03:45:56.140
users are not able to find a 
content on really because most 

03:45:56.141 --> 03:45:58.141
of the existing file 

03:46:00.223 --> 03:46:02.223
managers out there show off all 
the 

03:46:04.949 --> 03:46:06.174
which is complicated for new 
users who are coming to the 

03:46:06.175 --> 03:46:10.661
mobile first time and laptop and
(inaudible) computer before.  So

03:46:10.662 --> 03:46:12.662
we decided to build something 
that 

03:46:14.170 --> 03:46:15.787
them to use and would allow them
to keep their  phones clean and 

03:46:15.788 --> 03:46:21.099
allow them to their friends.  
You want to show it?

03:46:29.181 --> 03:46:31.181
pulling up the demo, when this 
feel

03:46:33.141 --> 03:46:35.810
field research, we found a stat 
that was shocking.  One out of 

03:46:35.811 --> 03:46:37.811
three Smartphone users in 

03:46:39.876 --> 03:46:42.351
out of storage or see a low 
storage warning every day.  If 

03:46:42.352 --> 03:46:44.382
you think about that, something 
million people are  constantly 

03:46:44.383 --> 03:46:47.251
up against the boundaryf running
out of storage.

03:46:51.316 --> 03:46:53.345
switch over to the Wolf Vision 
and you can show them how it 

03:46:53.346 --> 03:46:55.346
works.

03:47:00.494 --> 03:47:02.735
&gt;&gt; first right on top, we show 
the storage available on the 

03:47:02.736 --> 03:47:04.736
phone and what's the total 
storage.

03:47:07.210 --> 03:47:09.467
The casheds that you see here 
are personalized for the users 

03:47:09.468 --> 03:47:11.705
on what they storage.

03:47:15.168 --> 03:47:17.428
Let's go and take a look at the 
last.  These are the large files

03:47:17.429 --> 03:47:19.429
on the phone.

03:47:23.170 --> 03:47:24.841
these are videos that users 
shoot of the content they get 

03:47:24.842 --> 03:47:26.842
from their friends.

03:47:28.522 --> 03:47:30.522
a one click, you can just get it
off 

03:47:32.583 --> 03:47:34.576
this user back to (inaudible) 
data.  Let's take a look at 

03:47:34.577 --> 03:47:36.577
files.

03:47:40.184 --> 03:47:42.840
a tough time  trying to find the
content on their phone.We came 

03:47:42.841 --> 03:47:44.872
up with the scheme of 
categorizing the content based 

03:47:44.873 --> 03:47:46.873
on how we 

03:47:48.978 --> 03:47:50.978
associated in users mind.

03:47:52.444 --> 03:47:54.670
For example, images.  We don't 
show a  filedder view.

03:47:58.180 --> 03:48:00.420
that here and then the other tab
show what the users think where 

03:48:00.421 --> 03:48:02.421
the images came from.

03:48:06.717 --> 03:48:09.450
for videos, again, it's 
categorizing across and they can

03:48:09.451 --> 03:48:11.451
identify with.

03:48:14.127 --> 03:48:15.135
Right down here, you sigh see 
two buttons for send and 

03:48:15.136 --> 03:48:17.406
receive.  This is the nearby 
sharing mode to 

03:48:22.507 --> 03:48:24.507
to or from their friends.

03:48:27.260 --> 03:48:29.260
Interesting thing is doing a 
nearby 

03:48:30.315 --> 03:48:32.349
simplistic enough, but there's a
bunch of stuff involved there 

03:48:32.350 --> 03:48:34.799
because there of phones out 
there on the market.

03:48:38.702 --> 03:48:40.702
We use a combination of 
Bluetooth, 

03:48:44.413 --> 03:48:46.662
hotspot type of technologies.  
Based on the phones, we are able

03:48:46.663 --> 03:48:48.663
to 

03:48:50.748 --> 03:48:52.748
negotiate their capabilities and
create 

03:48:53.980 --> 03:48:55.980
the fat fastest connection 
possible.

03:48:58.264 --> 03:49:00.264
Connect on (inaudible) network 
which 

03:49:02.938 --> 03:49:04.981
identifies transfer data, GB, 
which is very impressive.

03:49:07.434 --> 03:49:10.075
shouldn't have happened if we 
just go on the path of the 

03:49:10.076 --> 03:49:12.076
Wi-Fi, which is the default 
path.

03:49:18.068 --> 03:49:20.068
The other thing I wanted to talk
about was media names.

03:49:22.416 --> 03:49:24.416
So one thing that we noticed in 
our 

03:49:26.073 --> 03:49:27.908
research again was that users in
markets use chat apps quite a 

03:49:27.909 --> 03:49:30.795
bit. from their friends.

03:49:34.298 --> 03:49:36.572
Most of which is good morning 
messages, means jokes, which 

03:49:36.573 --> 03:49:40.397
they don't keep because it fills
up their phone.  At the same 

03:49:40.398 --> 03:49:42.398
time, they receive content 

03:49:44.262 --> 03:49:47.120
which might be pictures of each 
other they took on a trip 

03:49:47.121 --> 03:49:49.121
together.

03:49:53.330 --> 03:49:55.330
through all these chat messages 
and 

03:49:56.481 --> 03:49:58.481
deleting stuff manually by 
figuring all 

03:49:59.973 --> 03:50:01.973
useful and what was not.

03:50:03.452 --> 03:50:05.452
We came up with this (inaudible)
that 

03:50:09.143 --> 03:50:11.143
library to base detection and 

03:50:12.398 --> 03:50:14.398
(inaudible) to detect means or 
images 

03:50:18.074 --> 03:50:20.323
And these are some of the things
that get detectd.

03:50:24.848 --> 03:50:26.848
These -- the user can delete it 
and 

03:50:28.334 --> 03:50:30.334
keep the rest of their useful 
messages 

03:50:33.219 --> 03:50:35.219
in tact without strong go 
through them manually.

03:50:37.036 --> 03:50:39.036
Present

03:50:41.455 --> 03:50:44.298
is the average user, the first 
time they freeing up over a gig 

03:50:44.299 --> 03:50:48.593
of storage.  So that little 
bubble boy is dancing a freeing 

03:50:48.594 --> 03:50:53.522
up.  So it's become a really 
interesting kind of sort of 

03:50:53.523 --> 03:50:56.206
daily and weekly habit gotten 
into.  Maybe one last question 

03:50:56.207 --> 03:50:58.207
for you.

03:50:59.675 --> 03:51:01.910
Before we move on to NITHIA.you 
learned so far?

03:51:05.396 --> 03:51:07.396
This app has only been out four 
months T.

03:51:09.101 --> 03:51:11.101
launched at the end of last 
year.

03:51:13.791 --> 03:51:15.791
the fact that this app is 
getting used a whole lot in U.S.

03:51:17.891 --> 03:51:19.927
Europe, which we did not expect 
when we launched it.

03:51:27.879 --> 03:51:29.879
The product talks about building

03:51:33.750 --> 03:51:35.750
which you can bring back using 
other

03:51:37.255 --> 03:51:39.255
markets which you did not build 
the product for.

03:51:40.783 --> 03:51:45.849
fulfilling.  Nice.  Nightia, you
can take us home with the last 

03:51:45.850 --> 03:51:48.299
set of questions.to us a little 
bit about some of the 

03:51:51.350 --> 03:51:53.350
work you have done around 
connectivity 

03:51:54.833 --> 03:51:56.833
sort of research and design 
experience.

03:52:00.938 --> 03:52:02.938
mission of  bringing the 
internet to 

03:52:04.618 --> 03:52:07.299
main products.  Google station 
which provides high 

03:52:10.965 --> 03:52:16.262
Wi-Fi.  And deitaly is a mobile 
application which helps  users 

03:52:16.263 --> 03:52:19.510
get more value out of their 
data.So we'll talk about station

03:52:19.511 --> 03:52:21.511
first.

03:52:23.390 --> 03:52:25.390
Station was launched in 2016 and
is 

03:52:28.687 --> 03:52:30.687
and Mexico in helps of hotspots 
like 

03:52:32.191 --> 03:52:34.191
train stations, parks, malls and
public venues.

03:52:36.674 --> 03:52:38.674
users people come online for the
first 

03:52:40.138 --> 03:52:42.138
time on the station network.

03:52:45.643 --> 03:52:47.643
constraint internet more 
manageable and accessible.

03:52:56.022 --> 03:52:58.022
useers can understand where the 
MBs and GZs are going.

03:53:01.810 --> 03:53:03.844
which helps users get more 
value, extend their data packs.

03:53:10.817 --> 03:53:12.817
Users can be online more  often.

03:53:19.309 --> 03:53:22.213
And the underlying insight for 
Detaly,money because it is 

03:53:22.214 --> 03:53:25.289
expensive, slow and limited.  As
a results users resort to 

03:53:25.290 --> 03:53:27.941
practices  off mobile data when 
they're not using 

03:53:31.271 --> 03:53:33.271
it to cut costs or hesitate to 
get new 

03:53:34.779 --> 03:53:37.007
fields in existing applications.
So that limits their 

03:53:37.008 --> 03:53:39.008
participation online.

03:53:42.327 --> 03:53:43.744
functionality to help users ease
into their experience of getting

03:53:43.745 --> 03:53:46.399
more value from the internet.

03:53:51.102 --> 03:53:53.102
Can you talk about these 
products and 

03:53:58.281 --> 03:54:00.281
&gt;&gt; NITHIA.

03:54:02.014 --> 03:54:04.014
To simplify things, the people, 
context and devices.

03:54:08.782 --> 03:54:10.782
internet access is growing all 
over the 

03:54:11.886 --> 03:54:13.886
world, technology is touching 
new societies.

03:54:15.953 --> 03:54:17.953
the people that are coming 
online are increasingly diverse.

03:54:25.224 --> 03:54:27.224
languages, income levels pro, 
feagueses, 

03:54:28.279 --> 03:54:30.279
geographic spread -- 
professions, 

03:54:32.765 --> 03:54:34.765
first billion users need 
rethinking.

03:54:36.640 --> 03:54:38.640
It may not hold true that users 
are 

03:54:41.111 --> 03:54:44.173
relatively wealthy or English 
speaking even.  Many people 

03:54:44.174 --> 03:54:46.174
around the next billion 

03:54:47.837 --> 03:54:49.837
necessarily English speaking 
primarily.

03:54:51.329 --> 03:54:53.329
But may prefer to use phone UIs 
in 

03:54:55.407 --> 03:54:57.407
is seen as a language of  upward
mobility and aspiration.

03:55:03.541 --> 03:55:05.541
design interfaces that help  
users with 

03:55:06.826 --> 03:55:10.499
the use of simplified English 
and more interfaces.  With 

03:55:10.500 --> 03:55:12.500
regards to context, like I 

03:55:14.424 --> 03:55:16.424
mentioned, internet is often I.

03:55:18.316 --> 03:55:20.316
mittent and constraint.

03:55:24.430 --> 03:55:26.430
(inaudible).  How do we think 
about designing for 

03:55:32.590 --> 03:55:34.615
networks and treating offline is
not an return, but as a 

03:55:34.616 --> 03:55:36.616
Enumative use case.

03:55:38.679 --> 03:55:40.679
about economic factors like 
purchasing 

03:55:45.466 --> 03:55:48.097
power and the prevalence of cash
and factorings and the role of 

03:55:48.098 --> 03:55:50.098
religion in using technology.

03:55:54.661 --> 03:55:56.661
you can buy an Android phone 
from $30 to $40.

03:55:57.961 --> 03:56:02.806
It is very likely to have a 
small low processing power.  But

03:56:02.807 --> 03:56:04.882
it is the first computing device
that many people have access to.

03:56:07.596 --> 03:56:09.596
many of these devices don't get 
replaced 

03:56:10.678 --> 03:56:12.678
as often as they might here in 
the west 

03:56:16.110 --> 03:56:19.010
of  frugality and gift giving.  
How might we think about 

03:56:19.011 --> 03:56:21.011
hardware and 

03:56:23.585 --> 03:56:25.585
low end costs.

03:56:30.422 --> 03:56:33.365
your UX hat, if you had to pass 
along learned along the way over

03:56:33.366 --> 03:56:35.366
the last few years, what would 
you share with everyone?

03:56:40.242 --> 03:56:43.094
collection of research and 
design methods on design.

03:56:46.611 --> 03:56:49.509
You can find it as part of the 
Google design website and we 

03:56:49.510 --> 03:56:51.510
regularly share 

03:56:52.596 --> 03:56:55.261
methods as well as product 
stories.  Behind the scenes 

03:56:55.262 --> 03:56:57.262
look.

03:57:00.490 --> 03:57:02.180
innovations, I'll talk about it 
through the lense of a product 

03:57:02.181 --> 03:57:05.964
life cycle.building a product 
and understand the problem space

03:57:05.965 --> 03:57:07.965
and we want to create a 

03:57:09.316 --> 03:57:13.947
we really.  A foundation of rich
insights.  And understanding of 

03:57:13.948 --> 03:57:15.948
people and the technology and 
the unmet needs.

03:57:21.046 --> 03:57:23.046
So here we have introduced 
techniques 

03:57:25.114 --> 03:57:27.114
graphic areas.

03:57:28.138 --> 03:57:30.639
People are done in the various 
context such as way they live, 

03:57:30.640 --> 03:57:32.640
the way they 

03:57:33.758 --> 03:57:36.018
where they work, where they have
fun.  And by doing several of 

03:57:36.019 --> 03:57:38.019
these, we 

03:57:41.617 --> 03:57:43.617
of people in their context and 
they use the technology.

03:57:51.775 --> 03:57:53.884
Wi-Fi station in India, we spend
a lot of time talking to 

03:57:53.885 --> 03:57:55.885
passengers, talking 

03:57:57.264 --> 03:57:59.170
riding trains ourselves to 
understand what the experience 

03:57:59.171 --> 03:58:01.171
was like and 

03:58:02.306 --> 03:58:04.193
were embarking on these 
journeys.  And really what we 

03:58:04.194 --> 03:58:06.739
wanted to understand was who is 
in the station?

03:58:10.769 --> 03:58:12.769
What is the content of using the
Wi-Fi?

03:58:13.964 --> 03:58:15.964
Wi-Fi?  And these understanding 
led to 

03:58:19.046 --> 03:58:21.046
principles such as the service, 
the 

03:58:24.911 --> 03:58:28.584
to the network has to be 
efficient and quick.  The 

03:58:28.585 --> 03:58:30.585
service has to be trust worthy 
and secure.

03:58:32.360 --> 03:58:33.821
saw in our research that women 
were hesitant to give out phone 

03:58:33.822 --> 03:58:35.822
numbers to log on to a Wi-Fi 
network.

03:58:42.109 --> 03:58:44.109
And that because of the hetero 

03:58:46.015 --> 03:58:48.473
train station, this is really 
the cross-section of the entire 

03:58:48.474 --> 03:58:50.474
country, the 

03:58:51.923 --> 03:58:53.923
service was browser based.

03:58:57.309 --> 03:58:59.309
any mobile application.

03:59:02.518 --> 03:59:05.175
design techniques later on in 
product development is when the 

03:59:05.176 --> 03:59:07.176
product is nearing launch.

03:59:10.034 --> 03:59:12.720
created a technique called 
trusted studies.  These are 

03:59:12.721 --> 03:59:14.721
large panels of 

03:59:18.804 --> 03:59:20.804
recruitd to make use of the 

03:59:22.357 --> 03:59:24.357
representation and provide 
feedbacks.

03:59:29.927 --> 03:59:31.927
studies for Detaly where we had 
Mondays 

03:59:34.922 --> 03:59:38.234
of payment ants using Detaly for
three to four months.had 

03:59:38.235 --> 03:59:39.673
understanding of what are the 
core use cases and the value 

03:59:39.674 --> 03:59:41.674
proposition.

03:59:42.784 --> 03:59:44.784
we're running into that we need 
to fix 

03:59:46.110 --> 03:59:48.110
before we launched the product.

03:59:50.894 --> 03:59:52.894
We have about five minutes left.

03:59:54.164 --> 03:59:56.222
here is talk to you about a few 
different projects and what 

03:59:56.223 --> 03:59:58.223
we've been learning along the 
way.

04:00:01.144 --> 04:00:03.144
if you got any questions about 
Taze, 

04:00:04.630 --> 04:00:06.630
Google station,  Detaly, 
research, UX, 

04:00:08.039 --> 04:00:10.039
then everyone can hear.  Yes.  
Go ahead.

04:00:16.693 --> 04:00:18.803
I'm sure that a lot of regions 
and network connection.

04:00:26.684 --> 04:00:28.684
I wonder how Taze tackles that.

04:00:32.688 --> 04:00:34.688
&gt;&gt; Right now it requires both 
sides 

04:00:35.991 --> 04:00:37.991
to have network Connectivity, 
but we are 

04:00:39.589 --> 04:00:44.739
one side could use the other 
sides network Connectivity.  But

04:00:44.740 --> 04:00:47.433
right now, there is that 
limitation.The good thing is 

04:00:47.434 --> 04:00:49.434
that we are continuously 
optimizing the amount of 

04:00:53.679 --> 04:00:59.150
device and the server.  It's a 
very good point.  Thank you.  

04:00:59.151 --> 04:01:01.151
Audience question.

04:01:04.925 --> 04:01:07.220
since it came out.  One of the 
challenges for me is how do 

04:01:13.546 --> 04:01:15.546
manage my downloaded music?

04:01:18.985 --> 04:01:20.985
Spotify and (inaudible) to 
understand 

04:01:22.497 --> 04:01:24.497
to and be able to remove that 
without 

04:01:25.859 --> 04:01:27.859
having the fear of like hey, I'm

04:01:31.689 --> 04:01:33.828
playlist, but there might 
somebody songs on there that I 

04:01:33.829 --> 04:01:35.829
really like from that 

04:01:37.339 --> 04:01:38.989
something that I would like to 
see on files go and wondering if

04:01:38.990 --> 04:01:42.143
that's been working with.  I 
think that would be something 

04:01:42.144 --> 04:01:44.242
that Spotify and Google music 
would have to 

04:01:48.401 --> 04:01:50.401
involved with.

04:02:00.808 --> 04:02:03.692
The primary focus for us early 
on was in terms of the consumer 

04:02:03.693 --> 04:02:05.963
media.  We started looking at 
music more 

04:02:11.786 --> 04:02:13.651
manage -- sometimes we report 
some large files for users that 

04:02:13.652 --> 04:02:18.402
they want to keep.that model.  
So we're trying to work down the

04:02:18.403 --> 04:02:20.403
path 

04:02:23.542 --> 04:02:25.542
(inaudible) based on that.

04:02:26.997 --> 04:02:28.997
So hopefully should hear 
something in future.  Thank you.

04:02:33.120 --> 04:02:35.958
Go ahead.  Awesome job on trying
to solve a lot 

04:02:40.672 --> 04:02:42.721
tackling from payments, from 
storage point of view, from 

04:02:42.722 --> 04:02:44.722
(inaudible) point of view.

04:02:48.455 --> 04:02:49.264
I am curious if there's an over 
arching (inaudible) that Google 

04:02:49.265 --> 04:02:52.745
is trying to solve for the next 
billion users.   &gt;&gt; PRESENTER:  

04:02:52.746 --> 04:02:54.746
Great question.

04:02:56.005 --> 04:02:58.056
We as the company think about it
in a few different layers.

04:03:01.135 --> 04:03:04.017
Fundamentally there is access 
primitive.  Millia talked a 

04:03:04.018 --> 04:03:08.503
little bit about that talked a 
little bit about that.  They 

04:03:08.504 --> 04:03:11.548
want to make it useful and 
accessible to people.Access 

04:03:11.549 --> 04:03:13.549
comes in.

04:03:14.810 --> 04:03:16.810
The second part is platforms.

04:03:20.577 --> 04:03:22.577
You can think of something like 
Taze  showing.

04:03:24.693 --> 04:03:26.950
He showed how business is and 
other entities can start to 

04:03:26.951 --> 04:03:29.621
integrate into that.something we
think about from a platform 

04:03:29.838 --> 04:03:32.080
side.  There's apps which are 
very targetd 

04:03:35.561 --> 04:03:37.606
to focus --  I mentioned at the 
very beginning big repeating 

04:03:37.607 --> 04:03:42.899
problems that we millions of 
users have in the world.  That's

04:03:42.900 --> 04:03:44.900
where something like  files go 

04:03:46.348 --> 04:03:48.591
phone is filling up every two 
days or so like you said.  Those

04:03:48.592 --> 04:03:51.886
are really what we try to do 
apps.  If you think about access

04:03:51.887 --> 04:03:54.325
platforms and apps, that's kind 
of a rough 

04:03:57.597 --> 04:04:00.677
think about what  bets to take 
and what to experiment with.  

04:04:00.678 --> 04:04:02.678
Great question.

04:04:03.731 --> 04:04:05.731
All right.

04:04:07.421 --> 04:04:09.495
&gt;&gt; Them is for your point for a 
lot of people  using the post 

04:04:09.496 --> 04:04:11.496
computing device they're using.

04:04:14.817 --> 04:04:18.484
(inaudible) that you see do not 
work for this audience?are 

04:04:18.485 --> 04:04:20.485
complicated.

04:04:22.142 --> 04:04:24.142
(inaudible) space I struggle 
with the 

04:04:26.209 --> 04:04:28.454
other  people, that might be 
other things we take for grantd 

04:04:28.455 --> 04:04:30.455
that they don't understand.

04:04:35.645 --> 04:04:37.645
Assumptions around having the 

04:04:40.739 --> 04:04:42.526
through desktop the mobile phone
fail because mobile is now the 

04:04:42.527 --> 04:04:45.417
gate way to  of people now.

04:04:49.540 --> 04:04:51.379
So that leads us to think about 
various  factors such as some of

04:04:51.380 --> 04:04:53.380
the 

04:04:54.406 --> 04:04:56.406
may be lower literate.

04:04:58.304 --> 04:04:59.727
So then how do we think about 
more browsable interfaces, 

04:04:59.728 --> 04:05:01.728
visually reach 

04:05:04.412 --> 04:05:06.412
Google has made a lot of 
innovation with bilingual.

04:05:10.432 --> 04:05:12.432
hesitant to go to their phone 
settings 

04:05:13.648 --> 04:05:15.648
and switch origins languages.

04:05:20.247 --> 04:05:23.498
cultures and local notions of 
aesthetics and imagery?  We have

04:05:23.499 --> 04:05:25.946
done a lot of work by working 
local artists and commission 

04:05:25.947 --> 04:05:27.947
stickers and education material 
and collateral.

04:05:33.941 --> 04:05:35.941
around the world in their local 

04:05:37.198 --> 04:05:39.198
language, whatever that might be
visually.

04:05:40.265 --> 04:05:43.230
Connectivity, we can't ignore 
the infrastructure that's 

04:05:43.231 --> 04:05:45.231
underneath it all 

04:05:48.358 --> 04:05:49.162
showing progress  indicators and
state transitions as we go 

04:05:49.163 --> 04:05:55.324
across switch networks.  All 
right.  Yes, sir.

04:05:59.587 --> 04:06:02.053
I am from the Facebook fault 
team.guys.

04:06:05.523 --> 04:06:07.757
One thing that we learn is that 
design  expectations change from

04:06:07.758 --> 04:06:12.633
country to country.am very 
curious about material design.  

04:06:12.634 --> 04:06:14.634
How do you find it working in 
India 

04:06:18.383 --> 04:06:20.383
in developing world?

04:06:21.852 --> 04:06:23.852
add some stuff.

04:06:29.811 --> 04:06:33.531
understand how material is being
used.work.  Today I would 

04:06:33.532 --> 04:06:35.532
encourage to you stop 

04:06:37.005 --> 04:06:39.005
bite next  billion users user 
experience 

04:06:40.072 --> 04:06:42.710
I believe it's at 2:30 in the 
dorm.  And there are also 

04:06:42.711 --> 04:06:44.711
several Sandbox 

04:06:45.986 --> 04:06:48.021
talk about latest innovations 
for accessibility as well as 

04:06:48.022 --> 04:06:50.684
gender equity for global 
context.

04:06:55.361 --> 04:06:57.361
design team that's there.  You 
can ask them.

04:07:01.312 --> 04:07:03.138
is building off an earlier point
that these are users especially 

04:07:03.139 --> 04:07:05.139
for the first 

04:07:07.412 --> 04:07:09.341
really learning about all of 
these components in  UI elements

04:07:09.342 --> 04:07:12.664
really from scratch.the parts 
and material design that have 

04:07:14.895 --> 04:07:16.895
done really well in our testing 
have 

04:07:18.361 --> 04:07:20.361
much more explicit.

04:07:21.468 --> 04:07:23.468
Have a real world tangible 
aspects and 

04:07:24.713 --> 04:07:27.551
abstract users struggle with.  
We are working with the design 

04:07:27.552 --> 04:07:29.552
team.

04:07:31.413 --> 04:07:33.412
You can have more chats in 
detail.  Maybe one last 

04:07:33.413 --> 04:07:37.835
question.  We slip it in.  I am 
also from India.  I have one 

04:07:37.836 --> 04:07:39.836
question.

04:07:42.560 --> 04:07:44.427
things like thinking developers 
and solving the next  billion 

04:07:44.428 --> 04:07:46.428
users problem.

04:07:48.292 --> 04:07:49.910
the internet providers role in 
geo changing everything in India

04:07:49.911 --> 04:07:51.911
right now.

04:07:53.985 --> 04:07:56.480
applications like the 
(inaudible) to grow and maybe 

04:07:56.481 --> 04:07:58.481
target the next billion users 
easily.

04:08:04.487 --> 04:08:07.714
you want to talk to anyone else,
they will be offstage.Along side

04:08:07.715 --> 04:08:09.715
with you guys, we're adapting to
the geo effect.

04:08:13.274 --> 04:08:16.755
as it is broadening access to 
large parts of India.  

04:08:16.756 --> 04:08:19.204
Previously couldn't afford it or
as much of the data that's 

04:08:19.205 --> 04:08:23.443
provided.  So we're still 
learning a lot with Taze and 

04:08:23.444 --> 04:08:25.444
others.

04:08:26.515 --> 04:08:27.525
stage or on the side and we can 
tell you more.   Cool.  That's 

04:08:27.526 --> 04:08:29.526
it.  Thank you all.

04:08:35.426 --> 04:08:37.426
Plause

05:16:38.068 --> 05:16:42.201
This text, document, or file is 
based on live transcription.  

05:16:38.068 --> 05:16:42.201
Communication Access Realtime 
Translation (CART), captioning, 

05:16:38.068 --> 05:16:40.126
and/or live transcription are 
provided in order to facilitate 

05:16:40.127 --> 05:16:40.325
communication accessibility and 
may not be a totally verbatim 

05:16:40.326 --> 05:16:44.526
record of the proceedings.  This
text, document, or file is not 

05:16:40.326 --> 05:16:44.526
to be distributed or used in any
way that may violate copyright 

05:16:40.326 --> 05:16:41.326
law.
***

05:16:40.326 --> 05:16:44.126
We're going to start the 
presentation shortly.  Well, as 

05:16:40.326 --> 05:16:40.929
soon as we have everyone 
settled.  Good morning.  My name

05:16:40.930 --> 05:16:41.132
is Brooke Thomas.  I am a member
of the DCVLN.  I EEM a 

05:16:41.133 --> 05:16:41.336
compliance consul TANT with 
Lockheed Martin.  We are very 

05:16:41.337 --> 05:16:42.149
happy to have everyone here 
today for this presentation.  

05:16:42.150 --> 05:16:46.150
Our presentation is focused on 
really getting our corporate 

05:16:42.150 --> 05:16:42.359
employees and members together 
and also community leaders to 

05:16:42.360 --> 05:16:42.562
talk about how we can expand our
disability efforts in the 

05:16:42.563 --> 05:16:43.201
workplace.  So we want to get 
information from everyone, your 

05:16:43.202 --> 05:16:43.401
feedback, best practices, some 
of the challenges that you're 

05:16:43.402 --> 05:16:43.604
facing from your standpoint, and
how can we improve.  We hope 

05:16:43.605 --> 05:16:44.021
that today you make connections 
that will last beyond 1:30, that

05:16:44.022 --> 05:16:44.213
you will exchange information so
that we can build from this day 

05:16:44.214 --> 05:16:44.416
forward.  
    To start out, we will have 

05:16:44.417 --> 05:16:45.656
some Representatives, Sue Weber 
will be here on behalf of DCBLN 

05:16:45.657 --> 05:16:45.855
to give opening remarks.  We 
will have Rikki Epstein and 

05:16:45.856 --> 05:16:46.077
Deborah Warren.  She's also the 
executive director of Arlington 

05:16:46.078 --> 05:16:46.485
community services board.  Thank
you.  And I'll have these 

05:16:46.486 --> 05:16:46.895
wonderful ladies come up.  
   &gt;&gt; SUE: Good morning.  I want

05:16:46.896 --> 05:16:47.509
to welcome you.  How many of you
are familiar with the DCBLN? For

05:16:47.510 --> 05:16:47.904
those of you who are not, just 
quickly, the DC metro BLN is an 

05:16:47.905 --> 05:16:48.309
affiliate of the U.S. business 
leadership network, or the 

05:16:48.310 --> 05:16:52.376
USBLN.  And that organization, 
we are one of the affiliates, 

05:16:48.310 --> 05:16:49.338
and actually the affiliate of 
the year in 2017.  

05:16:49.339 --> 05:16:51.939
[ Applause ]
so we're very excited that 

05:16:49.339 --> 05:16:50.163
you're here.  Our mission is 
basically to get people with 

05:16:50.164 --> 05:16:50.575
disabilities employed and valued
and promoted and thrive in the 

05:16:50.576 --> 05:16:50.979
workplace and that companies can
benefit from the diversity they 

05:16:50.980 --> 05:16:51.382
bring to the table.  Without 
further ado, I want to invite 

05:16:51.383 --> 05:16:51.582
Rikki to the podium.  
[ Applause ]

05:16:51.583 --> 05:16:53.516
.  
   &gt;&gt; RIKKI EPSTEIN: Good 

05:16:51.583 --> 05:16:51.992
morning, everyone.  I'm the 
executive director of The Arc of

05:16:51.993 --> 05:16:52.599
northern Virginia.  For those 
who may not be familiar with our

05:16:52.600 --> 05:16:56.200
organization, we are a 
56-year-old nonprofit.  We are 

05:16:52.600 --> 05:16:53.026
also part of an affiliate 
network from The Arc of the 

05:16:53.027 --> 05:16:53.435
United States is a national 
organization with 650 chapters 

05:16:53.436 --> 05:16:54.848
around the country, and we're 
the chapter for northern 

05:16:54.849 --> 05:16:55.253
Virginia.  We provide direct 
services, education, and 

05:16:55.254 --> 05:16:55.467
advocacy supporting people with 
intellectual and developmental 

05:16:55.468 --> 05:16:56.685
disabilities.  And one of the 
areas of focus that we have 

05:16:56.686 --> 05:16:56.883
spent a lot of time supporting 
people with disabilities and 

05:16:56.884 --> 05:16:58.884
their 

05:17:00.105 --> 05:17:02.105
families throughout their entire
life

05:17:09.990 --> 05:17:10.396
span.have been really thrilled 
that for the   And employment is

05:17:10.397 --> 05:17:11.040
a key focus, and we past four or
five years, we've been 

05:17:11.041 --> 05:17:11.457
partnering each May with the DC 
metro business leadership 

05:17:11.458 --> 05:17:12.065
network, bringing together 
employers, HR professionals, EEO

05:17:12.066 --> 05:17:12.269
professionals with nonprofit 
employment provider 

05:17:12.270 --> 05:17:12.693
organizations that provide 
support to help onboard and 

05:17:12.694 --> 05:17:13.288
maintain employment of people 
with intellectual or 

05:17:13.289 --> 05:17:13.504
developmental disabilities.  
We're really pleased to be here 

05:17:13.505 --> 05:17:15.505
today, 

05:17:16.510 --> 05:17:18.510
partnering with a number of

05:19:20.334 --> 05:19:22.667
***
This text, document, or file is 

05:19:20.334 --> 05:19:24.334
based on live transcription.  
Communication Access Realtime 

05:19:20.334 --> 05:19:24.467
Translation (CART), captioning, 
and/or live transcription are 

05:19:20.334 --> 05:19:24.600
provided in order to facilitate 
communication accessibility and 

05:19:20.334 --> 05:19:20.974
may not be a totally verbatim 
record of the proceedings.  This

05:19:20.975 --> 05:19:25.175
text, document, or file is not 
to be distributed or used in any

05:19:20.975 --> 05:19:21.393
way that may violate copyright 
law.

05:19:21.394 --> 05:19:21.999
***

05:28:00.352 --> 05:28:03.833
&gt;&gt; GLEN SHIRES: Hello and thank 
you for joining us today.  I 

05:28:03.834 --> 05:28:06.924
hope you had a great morning and
a good lunch.  Hopefully no 

05:28:06.925 --> 05:28:08.925
one's in a food coma.  

05:28:12.163 --> 05:28:14.163
&gt;&gt; CHRIS RAMSDALE: I'm

05:28:16.092 --> 05:28:18.727
Chris Ramsdale. 
   &gt;&gt; GLEN SHIRES: And I'm Glen 

05:28:18.728 --> 05:28:20.350
Shires. 
   &gt;&gt; CHRIS RAMSDALE: Today 

05:28:20.351 --> 05:28:22.401
we're going to talk to you about
a couple of things.

05:28:27.128 --> 05:28:29.568
We're going to talk about our 
software development kit, and 

05:28:29.569 --> 05:28:31.569
how to use the SDK 

05:28:33.063 --> 05:28:35.063
to extend the assistant to work 
with your devices.  

05:28:35.492 --> 05:28:37.492
So just to calibrate a little 
bit, 

05:28:42.355 --> 05:28:44.355
last year at Google

05:28:48.161 --> 05:28:50.161
IO, allows you to embed into 
whatever 

05:28:54.013 --> 05:28:55.899
you're building this is the 
technology you use to get the 

05:28:55.900 --> 05:29:00.987
features and functionality into 
your hardware. -to frame the 

05:29:00.988 --> 05:29:02.988
conversation a little bit, 
because it's an eco-system, and 

05:29:05.068 --> 05:29:07.068
there's a platform and things 
involved, 

05:29:08.726 --> 05:29:10.335
so let's talk a little bit 
before we go deeper into how 

05:29:10.336 --> 05:29:12.336
this relates to the other pieces
of technology that we're 

05:29:12.345 --> 05:29:14.345
building.

05:29:15.878 --> 05:29:17.878
So at the core is the assistant 
service.

05:29:20.823 --> 05:29:23.690
This is the artificial, AI, and 
MO that's powering the virtual 

05:29:23.691 --> 05:29:30.920
assistant into your home.  
That's at the core.  That we 

05:29:30.921 --> 05:29:32.921
have been FILDing for years 

05:29:35.344 --> 05:29:37.344
and years and years.

05:29:38.372 --> 05:29:40.421
Then we talk about ways of 
extending them.  One way of 

05:29:40.422 --> 05:29:43.099
extending is bringing in third 
party cloud services to the 

05:29:46.100 --> 05:29:48.100
assistant

05:29:52.642 --> 05:29:56.908
building for years and years and
years.  Then we talk about ways 

05:29:52.642 --> 05:29:56.775
of extending them.  One way of 
extending is bringing in third 

05:29:52.642 --> 05:29:56.642
party cloud services to the 
assistant.  So you can do things

05:29:52.642 --> 05:29:57.095
like order a pizza, book a ride,
and extend to things that we're 

05:29:57.096 --> 05:29:59.096
not necessarily doing.

05:30:02.781 --> 05:30:04.781
We might provide calendar and G

05:30:06.723 --> 05:30:08.723
geoand others may do ordering a 
pizza 

05:30:10.120 --> 05:30:12.425
or a ride and others may do 
ordering a pizza or a ride.  

05:30:12.426 --> 05:30:15.098
    We're going to talk about 
the Google 

05:30:18.099 --> 05:30:22.441
Assistant SDK for devices.  
Let's talk about what people are

05:30:22.442 --> 05:30:24.442
using the SDK for.

05:30:28.826 --> 05:30:31.666
We'll talk first about 
commercial OEMs.  Recently in 

05:30:31.667 --> 05:30:36.160
January, we announced 
integration with the LG TV.  We 

05:30:36.161 --> 05:30:38.161
brought the assistant to the 
experience inside the TV.

05:30:41.839 --> 05:30:44.723
You're talking to the push 
button on Tthe remote, and it 

05:30:44.724 --> 05:30:46.724
helps you with what 

05:30:47.772 --> 05:30:49.772
does my day look like and what's
on TV.

05:30:55.501 --> 05:30:57.501
As we go deeper into what the 
SDK is, 

05:30:59.174 --> 05:31:01.174
LG wrote a thin client on top of
web OS, 

05:31:03.074 --> 05:31:05.074
and they were able to do an over
the 

05:31:06.936 --> 05:31:08.550
air, OTA update to reach 
millions of subscribers of their

05:31:08.551 --> 05:31:13.242
TVs.  It gave them the ability 
to take new technology, the 

05:31:13.243 --> 05:31:15.273
Google Assistant, and work with 
evidence-market devices that 

05:31:16.091 --> 05:31:18.091
they already had.  

05:31:19.779 --> 05:31:21.779
Then we announced back in 
February, 

05:31:24.238 --> 05:31:27.508
integration with the Nest 
camera, Nest Cam IQ.  We were 

05:31:27.509 --> 05:31:30.183
finding that households that 
have bought a camera end up 

05:31:30.184 --> 05:31:34.277
buying multiple cameras.  What 
that does is give you this 

05:31:35.908 --> 05:31:37.334
ubiquitous experience in your 
house where you're walking 

05:31:37.335 --> 05:31:39.335
through, you ask 

05:31:40.380 --> 05:31:42.380
for help, and your virtual 
assistant 

05:31:44.586 --> 05:31:46.586
helps you out out where you are.

05:31:49.958 --> 05:31:51.958
Going from my living room has a 
Google 

05:31:54.037 --> 05:31:55.863
home to a JBL speaker, to I have
the assistant streaming 

05:31:55.864 --> 05:31:57.864
throughout my house.  

05:31:58.903 --> 05:32:01.754
So those were commercial OEMs.  
We have had fun experiments with

05:32:01.755 --> 05:32:05.854
our friends over at deep local. 
This is an agency out of 

05:32:05.855 --> 05:32:10.968
Pittsburgh that we have worked 
with over the past year and a 

05:32:10.969 --> 05:32:12.969
half to build really cool 
experiments.

05:32:15.617 --> 05:32:17.617
If you were out at

05:32:22.019 --> 05:32:24.057
Google I/O last year, they built
a pop-up donut shop, which is 

05:32:24.058 --> 05:32:27.745
really cool.  You could walk up 
to it and engage with the 

05:32:27.746 --> 05:32:29.746
assistant.

05:32:30.986 --> 05:32:32.986
It would give you donuts, and at

05:32:37.452 --> 05:32:39.452
random, it would give you a 
Google mini

05:32:41.167 --> 05:32:43.167
.  At the consumer electronics 
show in 

05:32:45.043 --> 05:32:47.043
January, they did a giant gum 
ball machine.

05:32:49.509 --> 05:32:51.756
And then over in the developer 
sand box, we have a poster maker

05:32:51.757 --> 05:32:55.683
that you can go and interact 
with the assistant and generate 

05:32:55.684 --> 05:32:57.684
a unique poster that you can 
then take home with you.

05:32:59.971 --> 05:33:01.971
Not commercial devices, but 
still a 

05:33:03.015 --> 05:33:05.685
lot of fun and it's fun to 
innovate with that theme and fun

05:33:05.686 --> 05:33:07.971
to innovate with the larger 
maker community, which has been 

05:33:08.323 --> 05:33:10.563
awesome.  
    This has been a long tail of

05:33:13.429 --> 05:33:15.680
developers taking our software 
development kit and using it in 

05:33:15.681 --> 05:33:17.681
ways that we would have never 
thought of.

05:33:20.966 --> 05:33:22.966
I want to insert the YouTube 
links if 

05:33:25.117 --> 05:33:27.117
you want to check them out.

05:33:28.171 --> 05:33:30.171
We have had a candy dispenser 
and a ton of robots.

05:33:32.237 --> 05:33:34.237
And then we had one maker embed 
the 

05:33:36.106 --> 05:33:38.728
assistant inside of Mac OS to 
bring it to the actual laptop 

05:33:38.729 --> 05:33:40.729
experience.  So a lot of fun 
there.  

05:33:42.806 --> 05:33:44.806
&gt;&gt; GLEN SHIRES: That's a bit of 
an 

05:33:46.695 --> 05:33:48.695
overview and framing,

05:33:51.074 --> 05:33:53.100
there.  
   &gt;&gt; GLEN SHIRES: As Chris was 

05:33:53.101 --> 05:33:55.101
saying, 

05:33:56.363 --> 05:33:59.334
you can build the Google 
Assistant into all sorts of 

05:33:59.335 --> 05:34:03.354
types of devices, and there's 
starter kits that you can get.  

05:34:03.355 --> 05:34:05.355
For example, the IMNX7 is for 
Android things, and 

05:34:08.998 --> 05:34:11.873
we have the AIY voice kit 
available at several retailers.

05:34:14.923 --> 05:34:16.923
You'll see the URL to get that 
at.

05:34:17.990 --> 05:34:20.666
What that is is this card board 
box.  If you look closely, you 

05:34:20.667 --> 05:34:24.994
can see two microphones as well 
as, of course, a speaker.  So 

05:34:24.995 --> 05:34:27.030
we've got the microphones up 
here on top.  And we've got the 

05:34:27.031 --> 05:34:30.707
speaker here.  I've got a big 
battery here.  You can plug it 

05:34:30.708 --> 05:34:32.708
into the wall or whatever you 
would like to do.

05:34:34.963 --> 05:34:36.963
Inside this card board, the 
whole 

05:34:38.981 --> 05:34:41.735
thing comes in the kit.  Inside 
is a small little computer 

05:34:47.803 --> 05:34:49.803
called the raspberry Py

05:34:53.582 --> 05:34:55.582
.  How long is the golden state 
bridge. 

05:34:56.269 --> 05:34:58.742
&gt;&gt; 8,981 feet. 
   &gt;&gt; It's doing better than I 

05:34:58.743 --> 05:35:03.040
am in terms of speaking, I 
presume.  How long is that in 

05:35:03.041 --> 05:35:05.068
meters? 

05:35:09.151 --> 05:35:12.440
&gt;&gt; 1 foot equals 0.035 meter. 
   &gt;&gt; So you've got the Google 

05:35:12.441 --> 05:35:16.333
Assistant inside an embedded 
device.  Turn on hot word.  

05:35:18.172 --> 05:35:20.834
&gt;&gt; Accepting hot word. 
   &gt;&gt; So now I don't have to 

05:35:20.835 --> 05:35:22.835
trigger it.

05:35:24.099 --> 05:35:26.940
I can simply say hey Google, 
pick a random number from one to

05:35:26.941 --> 05:35:28.941
100.  
   &gt;&gt; Okay.  

05:35:32.271 --> 05:35:34.271
[ Beeping and electronic sounds 
]. 

05:35:34.708 --> 05:35:36.708
73.  
   &gt;&gt; Hey Google.

05:35:42.026 --> 05:35:44.026
How tall is mount kill monojar 
row. 

05:35:45.446 --> 05:35:47.446
&gt;&gt; 19341 feet tall

05:35:49.588 --> 05:35:51.416
.  
   &gt;&gt; Turn off hot word. 

05:35:51.417 --> 05:35:54.088
&gt;&gt; Sorry.  I'm not sure how to 
do that.  

05:35:57.305 --> 05:35:59.305
[ Applause ] 

05:36:12.512 --> 05:36:13.728
This box is an AIY do it 
yourself kit with everything you

05:36:13.729 --> 05:36:18.842
need.  The kit connects to the 
Google service via Wi-Fi.  

05:36:18.843 --> 05:36:21.505
There's two different types of 
software you can run this.

05:36:24.778 --> 05:36:26.778
The SDK supports two ways, one 
is a 

05:36:27.844 --> 05:36:29.477
way to run it on almost any 
platform, any operating system, 

05:36:29.478 --> 05:36:32.331
any programming language.  You 
run all of your code directly on

05:36:34.576 --> 05:36:37.424
here, and we have sample code 
that does exactly that.  In this

05:36:37.425 --> 05:36:40.277
case, I'm actually running some 
python sample code on the box 

05:36:40.278 --> 05:36:45.350
that implements the entire 
client in that Python code, so 

05:36:45.351 --> 05:36:47.351
you've got the entire sample.  

05:36:49.046 --> 05:36:51.046
The other way is when you say 
hey 

05:36:52.503 --> 05:36:54.503
Google, turn off hot word... 

05:36:57.027 --> 05:36:59.266
I'm pressing my luck, I guess.  
The other way, when it's running

05:36:59.267 --> 05:37:01.301
that way is using a library that
runs 

05:37:06.394 --> 05:37:08.394
directly on the assistant -- I'm
sorry.

05:37:12.466 --> 05:37:14.466
Runs directly on the client

05:37:21.980 --> 05:37:23.980
.  That runs on either Linux or 
Android Things.  Okay? 

05:37:24.872 --> 05:37:26.872
&gt;&gt; CHRIS RAMSDALE: I think you 
had some coding to do? 

05:37:26.892 --> 05:37:30.355
&gt;&gt; GLEN SHIRES: Yeah.  Let me 
show you a little bit about when

05:37:30.356 --> 05:37:32.356
you're running the library.  
It's quite simple to use.

05:37:35.284 --> 05:37:37.140
You can see there are simple 
functions you can call to start 

05:37:37.141 --> 05:37:40.595
it, to turn the microphone on 
mute.  You can also, rather than

05:37:40.596 --> 05:37:42.596
starting it 

05:37:44.082 --> 05:37:46.082
with the hot word, you can start
the 

05:37:47.091 --> 05:37:49.091
interaction

05:37:51.786 --> 05:37:53.786
program mat

05:37:55.428 --> 05:38:01.533
aticallyatically.  You can see a
lot of events that you code can 

05:38:01.534 --> 05:38:03.572
handle, or there's no need to.  
    Another thing I mentioned, 

05:38:03.573 --> 05:38:06.816
there are two microphones.  And 
you may notice that also on 

05:38:06.817 --> 05:38:08.817
Google 

05:38:10.540 --> 05:38:12.784
home, there's only two 
microphones on Google home, yet 

05:38:12.785 --> 05:38:14.817
it does a wonderful job in 
background noise, with people 

05:38:16.852 --> 05:38:18.852
speaking to it from a good 
distance away.

05:38:20.333 --> 05:38:23.005
And the way that we do that is a
technique we call neural beam 

05:38:23.006 --> 05:38:27.279
forming.  What it does is it's 
very similar to the way people 

05:38:27.280 --> 05:38:29.280
have two ears, and 

05:38:30.773 --> 05:38:34.649
they're very good at picking out
speech out of noise.  We've used

05:38:34.650 --> 05:38:36.650
machine learning and run 

05:38:39.527 --> 05:38:41.393
this on the server to get a very
robust, noise robust far field 

05:38:41.394 --> 05:38:46.086
experience.  What that means is 
the client side has minimal 

05:38:46.087 --> 05:38:48.179
processing power, so we can 
really keep the clients low 

05:38:48.180 --> 05:38:50.180
cost.  Back to you, Chris.  
   &gt;&gt; CHRIS RAMSDALE: Cool.

05:38:53.288 --> 05:38:56.142
So building on what Glen was 
talking about, let's go deeper 

05:38:56.143 --> 05:38:58.143
into what the SDK actually 
provides.

05:39:00.225 --> 05:39:02.225
At the highest level, there's a 

05:39:04.495 --> 05:39:06.495
cloud-based API that's built on 
a GRPC protocall.

05:39:08.413 --> 05:39:09.840
It uses HTTP2 to go back and 
forth to give you streaming 

05:39:09.841 --> 05:39:14.322
support, which is important with
audio because you want it to be 

05:39:14.323 --> 05:39:17.786
fast and low latency.  The API 
is available from just about any

05:39:17.787 --> 05:39:19.787
platform.

05:39:20.828 --> 05:39:22.828
Just like the LG TV example that
I 

05:39:25.400 --> 05:39:27.068
gave, they have Web OS and a 
number of partners are actually 

05:39:27.069 --> 05:39:31.442
coming with their own platforms 
already out in the market, and 

05:39:31.443 --> 05:39:33.079
they want to know how to bring 
those platforms to the 

05:39:33.080 --> 05:39:37.175
assistant.  We can create a very
thin client that communicates 

05:39:37.176 --> 05:39:39.176
with the cloud API.

05:39:40.673 --> 05:39:42.496
And out of the box we provide 
GRPC bindings, those are the 

05:39:42.497 --> 05:39:44.497
thin clients 

05:39:47.451 --> 05:39:49.451
that are built on Python, Node.

05:39:51.116 --> 05:39:53.116
js, or any of the other things 
you actually have.

05:39:55.581 --> 05:39:58.631
That API is really good for 
push-to-talk support.  So when 

05:39:58.632 --> 05:40:01.498
Glen was with the box and he 
pushed the button, that's 

05:40:01.499 --> 05:40:05.384
invoking a think client that's 
talking to our API.  If you want

05:40:05.385 --> 05:40:08.276
to have an experience more like 
the Nest Cam where it's 

05:40:08.277 --> 05:40:12.524
hands-off, because the cameras 
are typically mounted above you 

05:40:12.525 --> 05:40:14.525
like in your ceilings 

05:40:16.602 --> 05:40:19.476
and whatnot, we call them 
farfield or hands-free 

05:40:19.477 --> 05:40:21.477
experiences and they use 

05:40:22.937 --> 05:40:25.169
technology like wake word or hot
word, the whole okay Google 

05:40:25.170 --> 05:40:27.614
built.  We have client libraries
built for 

05:40:31.117 --> 05:40:33.117
Linux, specifically Linux 3.18 
and above.  

05:40:36.029 --> 05:40:38.465
And because it's a SDK, 
obviously there's going to be 

05:40:38.466 --> 05:40:40.466
docs and samples and 

05:40:41.748 --> 05:40:44.391
tools that will allow you to 
embed the assistant, debug the 

05:40:44.392 --> 05:40:47.250
assistant, and test it as well. 
We have hardware kits.

05:40:50.917 --> 05:40:52.917
Glen mentioned the AIY kit other
here, 

05:40:55.869 --> 05:40:56.672
that's a twist on DIY, so 
artificial intelligence done by 

05:40:56.673 --> 05:41:01.360
you.  Is that the IMX? 
   &gt;&gt; GLEN SHIRES: IMX7 kit.  

05:41:01.361 --> 05:41:05.242
   &gt;&gt; CHRIS RAMSDALE: So kits 
that allow you to start 

05:41:05.243 --> 05:41:07.243
building, and we will expand 
over time to bring more and more

05:41:10.787 --> 05:41:13.006
software on chips to the market 
for developers to get up and 

05:41:13.007 --> 05:41:18.769
running with the assistant.  
    So with all of that, framing

05:41:18.770 --> 05:41:20.770
this is 

05:41:21.814 --> 05:41:22.428
our goal is to bring the 
ubiquitous experience to 

05:41:22.429 --> 05:41:26.931
everybody.  We're not going to 
build all the hardware out 

05:41:26.932 --> 05:41:30.839
there, nor are we going to build
all the experiences.  We have 

05:41:30.840 --> 05:41:34.308
done a fairly good job with 
speakers and whatnot.  There are

05:41:34.309 --> 05:41:36.309
appliances, auto, things in 

05:41:37.387 --> 05:41:39.435
your bathroom, so we are trying,
why Glen and I get up in the 

05:41:39.436 --> 05:41:41.436
morn something 

05:41:43.300 --> 05:41:46.150
to come and figure out KWHA what
are the user experiences we want

05:41:46.151 --> 05:41:50.654
to bring to market with partners
and what technology do we 

05:41:50.655 --> 05:41:52.889
actually have to build to make 
that happen? 

05:41:55.717 --> 05:41:57.775
When we think about it, one way 
to categorize it is to think 

05:41:57.776 --> 05:41:59.776
about your day.

05:42:00.820 --> 05:42:03.266
And this is a little bit 
trivial, but it gives you the 

05:42:03.267 --> 05:42:05.267
idea that we're trying 

05:42:06.567 --> 05:42:08.191
to give you the holistic 
experience from streamlining 

05:42:08.192 --> 05:42:10.192
your morning when you want 

05:42:12.336 --> 05:42:14.418
to have your coffee made or 
stream NPR news to know what's 

05:42:14.419 --> 05:42:16.873
going on -- or maybe you don't 
want to stream the news.  And 

05:42:16.874 --> 05:42:19.540
when you have moved from your 
house to on the go, I forgot to 

05:42:19.541 --> 05:42:24.643
set the security camera or I 
left the garage open.  Or you're

05:42:24.644 --> 05:42:26.644
coming home from the grocery 

05:42:29.113 --> 05:42:31.443
store, and you want to preheat 
the oven on the way home.  To 

05:42:31.444 --> 05:42:33.444
helping you relax.

05:42:34.729 --> 05:42:37.398
To hey, I have kids, so no more 
screen time for kids so turn off

05:42:37.399 --> 05:42:42.744
the Wi-Fi in the kids' rooms or 
in the house, or dim the lights 

05:42:42.745 --> 05:42:46.811
because we want to watch a movie
or TV.  Trying to figure out 

05:42:46.812 --> 05:42:51.106
what the user experiences are 
that add value to you and extend

05:42:51.107 --> 05:42:53.107
figuring out the technology 
behind it.  

05:42:55.193 --> 05:42:57.439
When it comes to integration 
paths for doing this, if you're 

05:42:57.440 --> 05:43:00.729
building hardware, there's two 
paths that we have coming into 

05:43:00.730 --> 05:43:05.424
the assistant.  And it's a 
little bit of marketing speak, 

05:43:05.425 --> 05:43:07.425
we call works with assistant and
assistant built in.

05:43:10.765 --> 05:43:12.765
Works with assistant is if 
anyone has 

05:43:16.102 --> 05:43:18.551
a Phillips Hue light, they can 
be controlled by any other 

05:43:18.552 --> 05:43:22.247
device that has assistant 
embedded inside of it.  If you 

05:43:22.248 --> 05:43:24.248
want more information on that, 

05:43:25.349 --> 05:43:27.777
tomorrow at 11:30 on stage five,
they will be talking a bit more 

05:43:27.778 --> 05:43:29.778
about how you 

05:43:31.371 --> 05:43:33.423
can integrate with Works With.  
Glen and I are talking about 

05:43:33.424 --> 05:43:35.424
built in.

05:43:36.477 --> 05:43:39.124
So it's kind of a controller 
versus controlee.  You're 

05:43:39.125 --> 05:43:40.959
building a controller, a device 
that can control other devices 

05:43:40.960 --> 05:43:45.661
as well and interact with the 
assistant service for knowledge 

05:43:45.662 --> 05:43:48.556
queries and things like that.  
    So let's talk a little about

05:43:52.047 --> 05:43:54.105
developer benefits of the 
assistant and assistant SDK.

05:43:57.374 --> 05:44:00.017
First of all, minimum hardware 
requirements.  If you're doing 

05:44:00.018 --> 05:44:02.018
push to talk scenarios and you 
want to integrate with our cloud

05:44:03.889 --> 05:44:05.719
API, there's very little needed 
on the client side.  It's all up

05:44:05.720 --> 05:44:08.779
to you.  Whatever you're running
on your client, you can keep 

05:44:08.780 --> 05:44:10.780
running it.

05:44:14.081 --> 05:44:17.572
It's the effect of making a 
simple REST call.  Beyond that, 

05:44:17.573 --> 05:44:20.400
if you want to integrate and 
have hot word detection so you 

05:44:20.401 --> 05:44:25.120
can have a hands-free 
experience, we have minimum 

05:44:25.121 --> 05:44:27.121
hardware requirements.

05:44:29.018 --> 05:44:31.018
Two mics and you're good to go, 
and we 

05:44:32.667 --> 05:44:34.301
can use neural beamforming to 
figure out what you're trying to

05:44:34.302 --> 05:44:36.302
say.

05:44:40.621 --> 05:44:42.621
From a RAM perspective, it's 
only 

05:44:45.103 --> 05:44:47.103
256mg of ram to get up and 
running.

05:44:49.207 --> 05:44:51.207
OEMP time, we'll start looking 
at 

05:44:52.854 --> 05:44:54.854
microcontrolers as we move into 
the 

05:44:56.484 --> 05:44:58.377
appliance spacever time, we'll 
start looking at microcontrolers

05:44:58.378 --> 05:45:00.378
as we move into the appliance 
space.  

05:45:01.020 --> 05:45:04.887
We have hot word support.  
You're off to the races.  You've

05:45:04.888 --> 05:45:07.974
got okay Google, and everything 
will pick up.  We'll take care 

05:45:07.975 --> 05:45:09.975
of the rest, the library will 
take care of bringing in 

05:45:13.104 --> 05:45:14.527
the audio, transmitting it to us
in realtime and streaming back 

05:45:14.528 --> 05:45:16.528
down the 

05:45:17.543 --> 05:45:21.453
response.  
    Google is a global company, 

05:45:21.454 --> 05:45:26.136
and we know that we need to 
continue to flesh out our 

05:45:26.137 --> 05:45:28.791
languages and local story.  
We've done a great job since 

05:45:28.792 --> 05:45:30.792
last year 

05:45:32.086 --> 05:45:34.331
moving into 14 languages and 
locals.  But we want to see over

05:45:34.332 --> 05:45:38.208
time to expand this map to get 
into other countries.  We know 

05:45:38.209 --> 05:45:40.645
that people who are building, 
whether you're a prototype or 

05:45:40.646 --> 05:45:42.646
maker or 

05:45:44.116 --> 05:45:45.967
commercial OEM, you need to meet
your customers where they 

05:45:45.968 --> 05:45:47.968
actually are, where your end 
users actually are.

05:45:50.637 --> 05:45:52.637
So we will continue the momentum
behind this.  

05:45:53.338 --> 05:45:55.338
In terms of actually, when 
you're a 

05:45:58.166 --> 05:46:00.166
commercial OEM, as we've LESH

05:46:01.886 --> 05:46:03.714
learned how to go from prototype
to commercialization, if you're 

05:46:03.715 --> 05:46:05.715
in that 

05:46:06.760 --> 05:46:07.979
space, I wanted to give you 
insight into how that's working 

05:46:07.980 --> 05:46:10.667
right now.
We're still early stages working

05:46:10.668 --> 05:46:13.558
with a few commercial OEMs, our 
goal is to be 

05:46:19.120 --> 05:46:21.120
more immersive and go deep with 
them so 

05:46:22.253 --> 05:46:24.095
we can build the foundation on 
which we can start building more

05:46:24.096 --> 05:46:26.096
voice technology 

05:46:27.569 --> 05:46:29.569
on top of.

05:46:33.071 --> 05:46:34.275
You start prototyping using 
assistant SDK to build an idea, 

05:46:34.276 --> 05:46:39.393
build a concept, and you submit 
that to us for a review, and 

05:46:39.394 --> 05:46:41.394
we'll iterate on the device 
itself, 

05:46:44.296 --> 05:46:47.149
how it fits into the larger 
eco-system, what are you trying 

05:46:47.150 --> 05:46:49.150
to bring to market?

05:46:50.225 --> 05:46:52.242
We will assign an account 
manager to you, and beyond that,

05:46:52.243 --> 05:46:56.315
you go into certification both 
in terms of is the voice 

05:46:56.316 --> 05:46:59.390
recognition actually working on 
the device? Does the marketing 

05:46:59.391 --> 05:47:02.846
-- does it meet our marketing 
guidelines? Is the branding 

05:47:02.847 --> 05:47:05.929
correct? And step five, launch, 
have a party, and be good to go.

05:47:07.743 --> 05:47:09.743
That's the path that we're 
taking 

05:47:11.158 --> 05:47:13.158
right now

05:47:15.533 --> 05:47:17.533
.  We will work on really 
scaling that 

05:47:19.171 --> 05:47:21.171
up in 2019

05:47:23.093 --> 05:47:25.338
.  
    Since last year, we have 

05:47:25.339 --> 05:47:29.601
been hard at work and we've 
added a couple of things.  We 

05:47:29.602 --> 05:47:32.453
added visualization support to 
the SDK, so you now can enable 

05:47:32.454 --> 05:47:34.454
your device 

05:47:35.597 --> 05:47:39.248
and say it's capable of -- it's 
a display enabled device.  You 

05:47:39.249 --> 05:47:41.707
can get things back like 
knowledge queries, sports and 

05:47:41.708 --> 05:47:43.708
scores, weather, 

05:47:45.330 --> 05:47:47.330
personal photos

05:47:59.938 --> 05:48:02.229
.  
   &gt;&gt; GLEN SHIRES: Rather than 

05:48:02.230 --> 05:48:06.127
using an embedded device, you 
can use your lab top with Chrome

05:48:06.128 --> 05:48:10.209
to test out the SDK and get your
application running and test out

05:48:10.210 --> 05:48:13.101
different parameters.  For 
example, we support, as Chris 

05:48:13.102 --> 05:48:17.187
was mentioning, several 
different languages, and you can

05:48:17.188 --> 05:48:19.188
set the parameters and just test
it out.

05:48:21.670 --> 05:48:23.670
I can

05:48:27.800 --> 05:48:29.800
say what's thewet

05:48:33.123 --> 05:48:35.123
the weather in SFRAN San 
Francisco.  

05:48:36.926 --> 05:48:38.926
&gt;&gt; Today it will be cloudy with 
a 

05:48:41.232 --> 05:48:43.232
forecasted high of 62 and low of
53. 

05:48:43.465 --> 05:48:45.952
&gt;&gt; GLEN SHIRES: This is input 
and output.  I could say those 

05:48:45.953 --> 05:48:50.457
if I wanted to.  Or if I want to
click on it, I could find out 

05:48:50.458 --> 05:48:53.491
the weather for this weekend.  
   &gt;&gt; In San Francisco, Friday, 

05:48:53.492 --> 05:48:58.791
it will be mostly sunny with a 
high of 70 and a low of 59 

05:48:58.792 --> 05:49:01.020
degrees Fahrenheit.  Saturday 
and Sunday, it will be cloudy 

05:49:02.665 --> 05:49:05.510
with lows in the mid 50s.  Highs
will be in the low 70s Saturday 

05:49:07.969 --> 05:49:11.842
and mid 60s on Sunday. 
   &gt;&gt; GLEN SHIRES: There we go. 

05:49:11.843 --> 05:49:13.685
Of course, this can do things 
Google home can do, such as 

05:49:13.686 --> 05:49:15.686
search.

05:49:18.009 --> 05:49:20.009
I can say, "who is Larry Page?" 

05:49:21.871 --> 05:49:23.871
&gt;&gt; According to Wikipedia, he is
an 

05:49:24.950 --> 05:49:26.950
American computer scientist and 
internet 

05:49:30.307 --> 05:49:31.943
entrepreneur who co-founded 
Google. 

05:49:31.944 --> 05:49:33.944
&gt;&gt; GLEN SHIRES: And I can also 
look 

05:49:36.810 --> 05:49:41.570
at the requests I made this is a
JSON request.  And I can see the

05:49:41.571 --> 05:49:43.571
responses that I got back from 
the server.

05:49:47.072 --> 05:49:48.897
You can see the transcript as it
was forming, as I was speaking, 

05:49:48.898 --> 05:49:50.898
it's showing the transcript.

05:49:53.064 --> 05:49:55.295
Later on it's showing the HTML 
coming out, and the audio is 

05:49:55.296 --> 05:49:57.296
being streamed back as well.  

05:49:59.761 --> 05:50:01.761
Beyond search results, I can 
also do personal results.

05:50:04.038 --> 05:50:07.301
For example, show me my photos. 
   &gt;&gt; This is what I found in 

05:50:07.302 --> 05:50:11.584
your Google photos.  
   &gt;&gt; GLEN SHIRES: Sorry, I 

05:50:11.585 --> 05:50:13.585
wasn't on 

05:50:15.035 --> 05:50:17.035
the right screen when I did 
that.  

05:50:17.943 --> 05:50:19.169
&gt;&gt; Here's what I found in your 
Google photos. 

05:50:19.170 --> 05:50:20.807
&gt;&gt; GLEN SHIRES: So there we go. 
And I can scroll through and see

05:50:20.808 --> 05:50:22.808
the 

05:50:23.882 --> 05:50:25.312
different photos of a white 
water rafting trip we did 

05:50:25.313 --> 05:50:27.313
recently.

05:50:28.965 --> 05:50:31.424
And zoom in full screen.  So 
that shows what we can do with 

05:50:31.425 --> 05:50:33.425
this 

05:50:37.213 --> 05:50:39.243
developer tool as well as the 
visual output.  Let me show you 

05:50:39.244 --> 05:50:41.244
how that works.  

05:50:42.938 --> 05:50:44.967
What we've done here, let me put
up the slide to show you how 

05:50:44.968 --> 05:50:51.777
this is working.  What this is 
doing is using the service API. 

05:50:51.778 --> 05:50:54.673
We can run on any code, any 
platform.  So this is running in

05:50:54.674 --> 05:50:57.150
JavaScript, and it's using the 
Chrome browser as a client.

05:51:00.232 --> 05:51:02.891
The service is generating the 
audio response in addition to 

05:51:02.892 --> 05:51:04.892
HTML5, and of 

05:51:05.999 --> 05:51:11.906
course the browser is displaying
the HTML5.  

05:51:13.530 --> 05:51:15.372
&gt;&gt; CHRIS RAMSDALE: In terms of 
new features, one of the things 

05:51:15.373 --> 05:51:20.055
that's very important for us, 
especially when thinking about 

05:51:20.056 --> 05:51:24.335
third parties building hardware 
devices is to get parity so that

05:51:24.336 --> 05:51:26.211
they can build devices that 
actually work just as well if 

05:51:26.212 --> 05:51:28.240
not better than some of the 
devices that Google is building.

05:51:30.287 --> 05:51:32.937
So one of the things we lacked 
for a long time in the SDK was 

05:51:32.938 --> 05:51:38.230
the ability to do notifications,
so to really have the assistant 

05:51:38.231 --> 05:51:40.903
service push out updates to 
devices.  So in this case, I 

05:51:40.904 --> 05:51:45.181
have a trivial example of hey 
Google, ring the dinner bell, 

05:51:45.182 --> 05:51:47.182
which will wring all of your 
devices.

05:51:48.490 --> 05:51:50.490
This helps us with things like 
OTA 

05:51:51.739 --> 05:51:53.739
updates, so over-the-air updates
when we 

05:51:55.629 --> 05:51:57.629
want to update a language 
package on a device.

05:52:00.516 --> 05:52:02.516
Now we're happy to add this to 
the SDK.  

05:52:04.581 --> 05:52:06.194
We're also making an endeavor 
into music.  So we're starting 

05:52:06.195 --> 05:52:11.696
with news and podcast support, 
so now you can actually access 

05:52:11.697 --> 05:52:13.697
those news feeds, so NPR news, 

05:52:15.375 --> 05:52:17.375
for example, or your favorite 
podcast.

05:52:22.691 --> 05:52:25.345
I happen to be a "This American 
Life" fan.  Glen will show that 

05:52:25.346 --> 05:52:27.384
to us.  
   &gt;&gt; GLEN SHIRES: Let me demo 

05:52:27.385 --> 05:52:29.385
that for you.

05:52:30.864 --> 05:52:32.864
I will be using the AIY 
cardboard box.

05:52:33.916 --> 05:52:35.916
I will simply say, "Play the 
news." 

05:52:36.775 --> 05:52:38.837
&gt;&gt; Here's the latest news.  
   &gt;&gt; GLEN SHIRES: And it brings

05:52:38.838 --> 05:52:41.075
down the file, and -- 

05:52:45.143 --> 05:52:46.362
&gt;&gt; Live from NPR news in 
Washington, President Trump's --

05:52:49.989 --> 05:52:51.926
&gt;&gt; Stop news.  
   &gt;&gt; GLEN SHIRES: And the other

05:52:51.927 --> 05:52:53.927
thing we wanted to show is 
notifications.

05:52:57.844 --> 05:52:59.908
One thing that you can do with 
Google home and other embedded 

05:52:59.909 --> 05:53:04.019
devices is have one device talk 
to other devices.  So for 

05:53:04.020 --> 05:53:06.020
example, you could broadcast 

05:53:07.883 --> 05:53:10.331
things or you can say something 
like, "Ring the dinner bell." 

05:53:10.332 --> 05:53:13.821
   &gt;&gt; Okay.  Broadcasting now. 
   &gt;&gt; GLEN SHIRES: So it's 

05:53:13.822 --> 05:53:16.721
broadcasting from one device to 
the other device.  

05:53:20.214 --> 05:53:22.214
[ Dinner bell ringing ]. 
   &gt;&gt; It's dinner time. 

05:53:23.480 --> 05:53:25.743
&gt;&gt; GLEN SHIRES: If you want to 
call your kids to dinner, all 

05:53:25.744 --> 05:53:27.744
the devices in 

05:53:28.843 --> 05:53:30.843
your house can say it's time to 
come down. 

05:53:30.884 --> 05:53:32.884
&gt;&gt; CHRIS RAMSDALE: And it can be
any device.  

05:53:33.118 --> 05:53:37.424
&gt;&gt; GLEN SHIRES: Exactly.  Let's 
show you how that works.  That 

05:53:37.425 --> 05:53:40.092
notifications doesn't 
necessarily have to be between 

05:53:40.093 --> 05:53:44.174
two cardboard boxes or embedded 
devices.  It can be between two 

05:53:44.175 --> 05:53:48.449
Google assistants logged into 
the same account.  I can 

05:53:48.450 --> 05:53:50.491
actually use my phone to ring 
the dinner bell on an embedded 

05:53:50.492 --> 05:53:53.347
device.
And so, that's how notifications

05:53:53.348 --> 05:53:55.348
work and how this works.  

05:53:57.654 --> 05:54:00.294
&gt;&gt; CHRIS RAMSDALE: All right.  
To round out things here, one of

05:54:00.295 --> 05:54:03.966
the features I have been excited
about is what we're calling 

05:54:03.967 --> 05:54:05.967
device actions.

05:54:09.139 --> 05:54:11.139
When we initially launched the 
Google 

05:54:12.850 --> 05:54:14.850
assistant SDK, the feedback was 
this is great.

05:54:16.119 --> 05:54:18.569
I can build a Google home clone 
now.  How do I make it do custom

05:54:18.570 --> 05:54:22.243
things? That part of the 
community got it and understood 

05:54:22.244 --> 05:54:25.102
where we were going and where we
should take it.  This was one of

05:54:25.103 --> 05:54:29.987
our answers to that question, 
which is like okay, cool.  Let's

05:54:29.988 --> 05:54:32.226
let you embed the assistant and 
let you extend it to control 

05:54:32.227 --> 05:54:35.481
that device.  And so, this 
breaks down into two ways of 

05:54:35.482 --> 05:54:39.764
possibly doing this.  We call 
them built-in device actions and

05:54:39.765 --> 05:54:42.272
custom device actions.  Bear 
with me for a second and I'll go

05:54:43.909 --> 05:54:47.198
a little deeper into these.  
    So they are built on top of 

05:54:47.199 --> 05:54:49.199
grammars 

05:54:50.338 --> 05:54:51.347
and things you can say to a 
device, where Google curates 

05:54:51.348 --> 05:54:53.348
those.  So a lot of the home 
automation, if 

05:54:59.545 --> 05:55:02.390
you have a Nest device or 
Phillips Hue, turn on, turn off,

05:55:02.391 --> 05:55:05.870
make it hotter.  These are 
things you can say to a device 

05:55:05.871 --> 05:55:07.871
that we curate.

05:55:09.144 --> 05:55:11.373
They're not static, they are 
dynamic.  We can change them 

05:55:11.374 --> 05:55:13.374
over time and internationalize 
them on your behalf.

05:55:16.074 --> 05:55:17.939
You can leverage our built-in 
actions and know that the 

05:55:17.940 --> 05:55:19.940
grammars that we have there will
continue to grow.

05:55:22.870 --> 05:55:25.733
An anecdote that I like to tell 
folks is we're going good with 

05:55:25.734 --> 05:55:29.235
home automation and we rolled 
out to the UK.  We didn't see 

05:55:29.236 --> 05:55:32.084
nearly the traction that we saw 
in the U.S. when it comes to 

05:55:32.085 --> 05:55:35.152
lighting, and we didn't know 
why.  A lot of people would pop 

05:55:35.153 --> 05:55:38.598
on and pop off the lights.  Not 
everybody.  But there's a 

05:55:38.599 --> 05:55:42.682
segment of the population that 
would pop on and pop off was not

05:55:42.683 --> 05:55:44.954
something that we had known 
about.  So we were able to do 

05:55:44.955 --> 05:55:50.117
our due diligence, research, and
then change it.  We changed it 

05:55:50.118 --> 05:55:52.561
on the back end and none of our 
lighting partners had to do 

05:55:52.764 --> 05:55:55.826
anything.  It just started 
working for the UK customers.

05:55:58.878 --> 05:56:00.715
Should we have figured that out 
first-hand? Maybe.  That's 

05:56:00.716 --> 05:56:04.585
debatable.  That's some of the 
benefits of going with the 

05:56:04.586 --> 05:56:08.056
built-in route.  All the devices
and grammars and traits will 

05:56:08.057 --> 05:56:11.929
evolve over time.  We're not 
going to build every device and 

05:56:11.930 --> 05:56:13.374
not going to understand 
everything you want to do on 

05:56:13.375 --> 05:56:17.691
that device.  For that we offer 
custom actions where you as the 

05:56:17.692 --> 05:56:19.692
developer or device manufacturer
can provide the grammars 

05:56:24.779 --> 05:56:26.779
and the commands mapping to us

05:56:35.909 --> 05:56:38.353
.  These are the things that can
be said and this is what should 

05:56:38.354 --> 05:56:40.354
be done, do a 

05:56:42.173 --> 05:56:44.173
dance, do the

05:56:46.281 --> 05:56:48.281
Macerana, or whatever your 
device does.

05:56:50.552 --> 05:56:52.552
Keeping with our theme, I will 
kick it to Glen.  

05:56:54.001 --> 05:56:56.001
&gt;&gt; GLEN SHIRES: I would love to 
give 

05:56:57.450 --> 05:56:59.450
a demo of a toy robot 
specifically built 

05:57:00.518 --> 05:57:02.989
for prototyping, and it operates
By Bluetooth.

05:57:07.413 --> 05:57:09.413
Let me turn on this robot

05:57:16.040 --> 05:57:18.040
.  I will ask my favorite AIY 
device, connect to robot. 

05:57:18.700 --> 05:57:20.759
&gt;&gt; Sorry, I can't help with that
yet.  But I'm always learning.  

05:57:24.797 --> 05:57:26.797
&gt;&gt; GLEN SHIRES: Let me try this.
Connect to robot. 

05:57:29.945 --> 05:57:31.840
&gt;&gt; Sorry.  
   &gt;&gt; GLEN SHIRES: Okay.  Let me

05:57:31.841 --> 05:57:33.841
try this one.  Sorry.  

05:57:40.424 --> 05:57:42.448
[ Multiple assistant voices 
overlapping... ] 

05:57:44.294 --> 05:57:46.762
&gt;&gt; GLEN SHIRES: Let me show you 
how this works, and then I'll 

05:57:46.763 --> 05:57:48.763
give that a shot in just a 
second.

05:57:51.485 --> 05:57:53.485
What this is doing is we can 
switch to 

05:57:55.107 --> 05:57:59.635
the slide, thank you.  This is 
using the Google service, but we

05:57:59.636 --> 05:58:01.475
are implementing a custom device
action, so I can say things like

05:58:01.476 --> 05:58:03.476
connect 

05:58:05.086 --> 05:58:07.086
to robot,

05:58:08.400 --> 05:58:11.117
and what happens is the Google 
service will understand my 

05:58:11.118 --> 05:58:13.561
speech and send back a command 
to the AIY box, and the box 

05:58:16.393 --> 05:58:18.393
will, at that point, send a 
Bluetooth command.

05:58:19.650 --> 05:58:21.650
It receives JSON that it can 
parse, 

05:58:23.129 --> 05:58:25.230
and if it wants to connect to 
robot, it sends a Bluetooth 

05:58:25.231 --> 05:58:27.231
command to connect to the robot.

05:58:29.462 --> 05:58:32.163
We're using the same library 
that we've used in the past.

05:58:35.820 --> 05:58:37.820
We added a little bit of code to

05:58:39.039 --> 05:58:43.595
implement the custom actions.  
    Connect to robot. 

05:58:44.192 --> 05:58:46.192
&gt;&gt; Sorry.

05:58:47.701 --> 05:58:48.936
I'm not sure how to help with 
that.  

05:58:48.937 --> 05:58:50.812
&gt;&gt; GLEN SHIRES: Geez.  
   &gt;&gt; CHRIS RAMSDALE: I can just

05:58:50.813 --> 05:58:52.444
keep talking. 
   &gt;&gt; GLEN SHIRES: I'll try it 

05:58:52.445 --> 05:58:56.710
one more time, okay? Connect to 
robot.  

05:58:58.143 --> 05:59:00.378
&gt;&gt; Connecting robot.  
   &gt;&gt; GLEN SHIRES: There we go. 

05:59:00.379 --> 05:59:02.379
   &gt;&gt; CHRIS RAMSDALE: Nice.  

05:59:04.444 --> 05:59:08.380
[ Applause ] 
it gets better.  Trust me.  

05:59:10.225 --> 05:59:13.940
&gt;&gt; GLEN SHIRES: The light did 
turn green.  Set color red.  

05:59:13.941 --> 05:59:18.680
   &gt;&gt; Setting robot LED to red. 
   &gt;&gt; GLEN SHIRES: So it sent a 

05:59:21.132 --> 05:59:23.615
Bluetooth command to do that.  
Robot, get up.  

05:59:25.449 --> 05:59:27.700
&gt;&gt; Robot getting up.  
   &gt;&gt; GLEN SHIRES: So it's a 

05:59:31.111 --> 05:59:33.111
self-balancing robot

05:59:36.078 --> 05:59:38.315
.  Go forward. 
   &gt;&gt; Robot moving forward. 

05:59:39.330 --> 05:59:42.170
&gt;&gt; GLEN SHIRES: Turn left. 
   &gt;&gt; Robot turning left. 

05:59:45.233 --> 05:59:46.891
&gt;&gt; CHRIS RAMSDALE: Don't fall 
off the table. 

05:59:46.892 --> 05:59:48.892
&gt;&gt; GLEN SHIRES: Turn right. 
   &gt;&gt; Robot turning right. 

05:59:50.560 --> 05:59:54.015
&gt;&gt; GLEN SHIRES: And there you 
go.  We can control a robot.  

05:59:54.016 --> 05:59:55.848
The point of custom actions is 
you can build an appliance or 

05:59:55.849 --> 06:00:00.373
anything where you can actually 
set your own grammar and then 

06:00:00.374 --> 06:00:02.400
parse the commands and have them
do whatever you would like them 

06:00:02.401 --> 06:00:04.241
to do.  
   &gt;&gt; CHRIS RAMSDALE: Awesome.  

06:00:04.242 --> 06:00:06.242
Good job.  

06:00:07.655 --> 06:00:09.655
[ Applause ] 

06:00:24.717 --> 06:00:28.332
   &gt;&gt; GLEN SHIRES: You can 
define these using a lot of the 

06:00:28.333 --> 06:00:33.228
tools that you may have used for
regular assistant actions such 

06:00:33.229 --> 06:00:35.229
as the actions on Google tools 
and dialogue flow.

06:00:37.312 --> 06:00:39.785
What those will generate are, in
this case, a JSON file that you 

06:00:39.786 --> 06:00:41.786
can install 

06:00:43.827 --> 06:00:45.827
into your device,

06:00:49.949 --> 06:00:52.180
and when your device is talking 
to the assistant, it's not like 

06:00:52.181 --> 06:00:54.181
you have to say 

06:00:55.854 --> 06:00:57.949
open my robot app and tell it to
turn right.  You can simply say 

06:00:57.950 --> 06:00:59.950
turn right.

06:01:02.080 --> 06:01:04.080
The first thing to define is the
grammar.

06:01:06.160 --> 06:01:08.190
When I said set color red, here 
is the intent that would allow 

06:01:08.191 --> 06:01:10.191
me to say set 

06:01:12.678 --> 06:01:15.387
color red, to red, robot set 
color red.  There's a variety of

06:01:15.388 --> 06:01:19.250
ways to say things.  On the next
slide you will see what the 

06:01:19.251 --> 06:01:22.173
response is, the fulfillment.  
First of all, I can define the 

06:01:22.570 --> 06:01:24.570
text-to-speech.

06:01:26.017 --> 06:01:31.174
In this case, it's setting robot
LED to red.  And then the 

06:01:31.175 --> 06:01:33.175
execution where I can parse 
these parameters and I can see 

06:01:37.876 --> 06:01:39.876
that I'm setting a color to red

06:02:06.401 --> 06:02:08.401
.  

06:02:10.485 --> 06:02:12.516
&gt;&gt; CHRIS RAMSDALE: Our goal, 
glen and I and the team that is 

06:02:12.517 --> 06:02:14.517
helping us out is 

06:02:15.615 --> 06:02:16.849
to provide the software 
development kit, the tools and 

06:02:16.850 --> 06:02:18.850
technologies to help you 

06:02:20.511 --> 06:02:22.511
build and embed the assistant 
into 

06:02:24.004 --> 06:02:26.853
hardware devices that you're 
building.  If this works, you 

06:02:26.854 --> 06:02:28.854
might have one more demo trick 
up your sleeve? 

06:02:31.961 --> 06:02:34.231
&gt;&gt; GLEN SHIRES: Yes, we do.  Do 
a dance. 

06:02:36.688 --> 06:02:38.688
&gt;&gt; Robot is getting down on the 
dance 

06:02:39.695 --> 06:02:41.695
floor

06:02:57.612 --> 06:02:59.244
.  
   &gt;&gt; GLEN SHIRES: Very good.  

06:02:59.245 --> 06:03:02.096
Thank you very much.  
   &gt;&gt; CHRIS RAMSDALE: Thanks.  

06:03:02.097 --> 06:03:06.799
   &gt;&gt; GLEN SHIRES: And we will 
be in the assistant sand box if 

06:03:06.800 --> 06:03:09.051
you have questions. 
   &gt;&gt; CHRIS RAMSDALE: Awesome.  

06:03:09.052 --> 06:03:11.052
Thanks again.

06:03:13.115 --> 06:03:15.115
Enjoy clam

06:03:20.264 --> 06:03:22.833
! 

06:03:29.600 --> 06:03:31.600
Realtime captioning will appear 
on 

06:03:32.605 --> 06:03:34.757
these this screen. 

06:28:28.166 --> 06:28:32.673
    [ Video ] 
   &gt;&gt; I'll tell people I work at

06:28:32.674 --> 06:28:38.153
Google, and they're like what do
you work on? I design search.  

06:28:38.154 --> 06:28:40.808
And they pause and they are 
like, what is there to design? 

06:28:46.533 --> 06:28:48.533
[ Dial-up modem sounds ]. 

06:28:56.090 --> 06:28:58.090
[ Upbeat music ]

06:29:01.260 --> 06:29:03.260
. 

06:29:34.448 --> 06:29:37.151
   &gt;&gt; Oh I know.  It's cat.  

06:29:43.052 --> 06:29:45.052
[ Music continues ]. 

06:29:51.606 --> 06:29:55.753
   &gt;&gt; Hi.  How can I help? 

06:30:13.674 --> 06:30:15.674
P

06:31:12.415 --> 06:31:14.415
[ Applause ] 

06:31:31.923 --> 06:31:33.923
&gt;&gt; BRENDA FOGG: Hello, everyone.

06:31:35.803 --> 06:31:37.803
I work in Google with other 
teams 

06:31:40.031 --> 06:31:42.299
across the company on product or
technology experiments and 

06:31:42.300 --> 06:31:43.108
sometimes finding new ways to 
talk about some of the 

06:31:43.109 --> 06:31:46.205
innovative work that's going on 
inside of Google.  And at some 

06:31:46.206 --> 06:31:48.206
point over the years, I've 

06:31:50.068 --> 06:31:52.511
worked with each of our 
panelists on some of those 

06:31:52.512 --> 06:31:54.940
projects that you probably saw 
in the video just now.  So we're

06:31:54.941 --> 06:31:56.941
going to talk a little bit 

06:32:00.637 --> 06:32:04.703
about some things that you may 
have seen, a little bit about 

06:32:00.637 --> 06:32:02.637
design at Google and what that 
means as a 

06:32:08.359 --> 06:32:10.359
fundamental framework

06:32:11.879 --> 06:32:13.709
and connective tissue between 
the things that Google makes and

06:32:13.710 --> 06:32:16.415
making them as useful and 
accessible to as many people as 

06:32:16.416 --> 06:32:18.476
possible.  
    So let's start with some 

06:32:18.695 --> 06:32:20.695
introductions.

06:32:21.972 --> 06:32:24.620
We have Doug Eck right here to 
my left, who leads a project 

06:32:24.621 --> 06:32:28.098
called Magenta, which is all 
about exploring machine learning

06:32:28.099 --> 06:32:30.099
and creativity.

06:32:31.301 --> 06:32:33.301
We have

06:32:34.629 --> 06:32:36.629
Isabelle who is responsible for 
the 

06:32:38.330 --> 06:32:40.330
design of Google home and 
worable.

06:32:44.272 --> 06:32:46.922
Over there is Ryan Germick, who 
is also known as the doodle guy.

06:32:49.151 --> 06:32:53.022
He is generally in the business 
of delighting users everywhere. 

06:32:53.023 --> 06:32:55.128
Let's start by letting everybody
talk a little about what you do 

06:32:55.129 --> 06:32:58.213
at Google.  We'll start with 
Doug, because you're sitting 

06:32:58.214 --> 06:33:03.905
next to me.  You head up a 
project called Magenta.  For 

06:33:03.906 --> 06:33:05.327
anybody who doesn't know exactly
what that is, maybe you can talk

06:33:05.328 --> 06:33:07.328
about that.

06:33:10.437 --> 06:33:12.437
And maybe touch on what inspired
the 

06:33:13.492 --> 06:33:15.492
group and the focus of the team.
   &gt;&gt; DOUGLAS ECK: Okay.  Sure.

06:33:19.050 --> 06:33:21.892
I lead a project called Ma 
general da.  The MAG stands for 

06:33:21.893 --> 06:33:23.929
music and art generation.  We 
started by trying to understand 

06:33:23.930 --> 06:33:28.854
the capacity to use AI, 
specifically machine learning to

06:33:28.855 --> 06:33:33.568
generate music and art.  And it 
took us about a month to realize

06:33:33.569 --> 06:33:35.569
that that's asking the wrong 

06:33:37.010 --> 06:33:41.176
question, because if all you're 
doing is trying to generate 

06:33:41.177 --> 06:33:43.005
music and art and you keep 
pushing a button and the machine

06:33:43.006 --> 06:33:45.006
keeps 

06:33:46.247 --> 06:33:48.247
making music and art for you, it
gets boring.

06:33:49.912 --> 06:33:52.550
So we pivoted to have machine 
learning to enable artists and 

06:33:52.551 --> 06:33:54.551
musicians to make something new 
and different.

06:33:57.226 --> 06:33:59.226
It's sitting on the same idea of

06:34:00.701 --> 06:34:05.218
technology and art interacting 
with one another.  So, yeah.

06:34:09.088 --> 06:34:10.920
I'm all about AI and art and 
music.  

06:34:10.921 --> 06:34:13.829
&gt;&gt; BRENDA FOGG: So you're not 
necessarily trying to replace or

06:34:15.666 --> 06:34:17.666
duplicate creativity, but more 
providing 

06:34:20.406 --> 06:34:22.254
the tools to enable people to do
that? 

06:34:22.255 --> 06:34:24.080
&gt;&gt; DOUGLAS ECK: I think it's not
just because that's what we 

06:34:24.081 --> 06:34:26.081
choose to focus 

06:34:29.213 --> 06:34:32.108
on, but creativity is 
fundamentally human.  If we take

06:34:32.109 --> 06:34:37.056
communication out.  A computer 
generating new things, but what 

06:34:37.057 --> 06:34:38.707
makes creativity work is how we 
respond to it and how we feed 

06:34:38.708 --> 06:34:40.708
back into that process.

06:34:44.155 --> 06:34:45.879
So I think it's very much a 
societal communicative act.  

06:34:45.880 --> 06:34:50.189
   &gt;&gt; BRENDA FOGG: And that idea
of creating new things, maybe 

06:34:50.190 --> 06:34:53.455
some things that were not 
necessarily possible before, 

06:34:53.456 --> 06:34:57.338
that were not humanly possible 
to create.  There's an -- I 

06:34:57.339 --> 06:34:59.339
don't know if you want to talk 
about this, but this example 

06:35:01.219 --> 06:35:03.219
that was shown in the lead-up 
into the 

06:35:05.327 --> 06:35:08.193
keynote yesterday, the project 
which is one of those things 

06:35:08.194 --> 06:35:10.194
that's sort of 

06:35:12.315 --> 06:35:14.315
augment what human creativity 
can do.

06:35:15.770 --> 06:35:17.770
Do you want to touch on that? 
   &gt;&gt; DOUGLAS ECK: So.

06:35:20.422 --> 06:35:23.957
So for Nsynth was played on 
stage before the keynote and 

06:35:23.958 --> 06:35:28.427
discussed there.  The main idea 
there is can we use machine 

06:35:28.428 --> 06:35:31.076
learning to allow us to generate
new sounds and sounds that are 

06:35:31.077 --> 06:35:33.948
musically meaningful to us.  And
one thing to point out is we 

06:35:35.368 --> 06:35:37.198
already have ways to do that.  
There's a bunch of great 

06:35:37.199 --> 06:35:41.490
software.  I have a piano at my 
house, and there are lots of 

06:35:41.491 --> 06:35:46.449
ways to make sounds.  What we 
hope we can get is some kind of 

06:35:46.450 --> 06:35:48.450
expressive edge with AI, 
something we 

06:35:50.781 --> 06:35:52.781
can do with these models, an 

06:35:54.555 --> 06:35:57.865
intuitiveness, a new mobility by
having a new tool.  I don't want

06:35:57.866 --> 06:35:59.111
to take up too much time, 
because there are a lot of other

06:35:59.112 --> 06:36:02.385
great people on stage, but I 
like to think about the film 

06:36:02.386 --> 06:36:04.386
camera.

06:36:06.919 --> 06:36:08.553
The film camera was not treated 
as an artistic device, but as 

06:36:08.554 --> 06:36:10.554
something to 

06:36:11.642 --> 06:36:13.642
capture reality, and it was 
transformed 

06:36:19.266 --> 06:36:20.887
into artistic medium by artists.
   &gt;&gt; BRENDA FOGG: So turning 

06:36:20.888 --> 06:36:22.888
something 

06:36:25.917 --> 06:36:27.917
into creative,

06:36:29.088 --> 06:36:31.295
Isabelle, you're trying to 
create something that appeals to

06:36:31.296 --> 06:36:33.813
everyone through its design, but
everybody's different, right?

06:36:38.084 --> 06:36:40.326
So there's -- these are physical
products that share physical 

06:36:40.327 --> 06:36:43.183
space with people that use them,
and sometimes you have to 

06:36:43.184 --> 06:36:45.184
cohabitate.  So talk a little 
about how you 

06:36:48.465 --> 06:36:51.049
approach that problem.  
   &gt;&gt; ISABELLE OLSSON: I have 

06:36:51.050 --> 06:36:53.723
the utmost respect for people's 
homes, and they're all 

06:36:53.724 --> 06:36:56.368
different.  I think next to your
body, your home 

06:36:59.466 --> 06:37:01.296
is your most intimate space and 
the place you share with your 

06:37:01.297 --> 06:37:04.352
loved ones and your family.  So 
to enter that space with our 

06:37:07.212 --> 06:37:09.212
products, we have to be super 
thoughtful 

06:37:11.443 --> 06:37:13.443
about what we do there

06:37:15.833 --> 06:37:17.833
.  For us, the most important 
thing is 

06:37:20.323 --> 06:37:23.589
to be inspired by the context in
which our products live in.  

06:37:23.590 --> 06:37:25.590
When we were designing Google 
home 

06:37:26.674 --> 06:37:30.572
mini, the goal was to design an 
assistant for every room.  That 

06:37:30.573 --> 06:37:33.021
means your bedside table.  And 
that's where you put devices 

06:37:33.022 --> 06:37:36.121
that help you see better or a 
book that helps you dream.

06:37:41.411 --> 06:37:43.720
So that space is just so 
special.  We wanted to create 

06:37:43.721 --> 06:37:45.721
something that was 

06:37:46.981 --> 06:37:49.848
beautiful, that fit into the 
home, and didn't take up too 

06:37:49.849 --> 06:37:52.109
much attention and kind of faded
a little bit into the 

06:37:53.929 --> 06:37:55.354
background.  
   &gt;&gt; BRENDA FOGG: And you're 

06:37:55.355 --> 06:37:58.028
also responsible for CMF at 
Google, which is 

06:38:02.334 --> 06:38:04.334
colorColor Material Finish, 
right? 

06:38:04.388 --> 06:38:05.603
&gt;&gt; ISABELLE OLSSON: Right. 
   &gt;&gt; BRENDA FOGG: I have heard 

06:38:05.604 --> 06:38:07.604
the 

06:38:09.478 --> 06:38:12.113
story about testing 150 
different versions, color 

06:38:12.114 --> 06:38:14.114
palates for the mini.  Is that 
right? 

06:38:14.363 --> 06:38:16.405
&gt;&gt; ISABELLE OLSSON: Yeah.  I 
think for us, the developing the

06:38:19.453 --> 06:38:21.453
color palate for the Google 
family of 

06:38:23.309 --> 06:38:24.947
products and individual products
is a combination of art and 

06:38:24.948 --> 06:38:26.948
science, I would say.

06:38:28.196 --> 06:38:30.514
And we start, usually two to 
three years before the products 

06:38:30.515 --> 06:38:32.515
come out, so 

06:38:34.193 --> 06:38:36.474
we have to do a lot of 
anticipation of where societies 

06:38:36.475 --> 06:38:38.475
and trends are going and 

06:38:39.517 --> 06:38:42.425
take all of those inputs into 
account to make sure that when 

06:38:42.426 --> 06:38:46.343
we release a product, it makes 
sense to people.  In addition to

06:38:46.344 --> 06:38:50.234
that, of course when you design 
for the home, you have to think 

06:38:50.235 --> 06:38:51.859
about the fact that, you know, 
there's going to be light 

06:38:51.860 --> 06:38:53.860
hitting the product.

06:38:57.318 --> 06:39:00.021
How does it stand the test of 
time? We want to make sure the 

06:39:00.022 --> 06:39:03.896
products are beautiful for a 
long time, so we have to go 

06:39:03.897 --> 06:39:05.897
through a lot of iteration to 
get it right.

06:39:07.368 --> 06:39:09.368
And then also, especially as 
we're 

06:39:10.672 --> 06:39:12.507
developing fabrics, for example,
depending on where you put it, 

06:39:12.508 --> 06:39:15.349
it takes -- it looks different 
in different lighting 

06:39:15.350 --> 06:39:17.350
conditions.

06:39:19.253 --> 06:39:21.490
So, when we -- when we designed 
mini, we went through, I think 

06:39:21.491 --> 06:39:23.491
150 iterations 

06:39:24.804 --> 06:39:26.804
of just the grey color.

06:39:27.863 --> 06:39:30.301
So, it was a lot of fun.  And it
was about finding that right 

06:39:32.135 --> 06:39:36.214
balance with what is too light? 
What's too dark? And the other 

06:39:36.215 --> 06:39:38.706
day I got this lovely e-mail by 
someone on the team who had 

06:39:41.614 --> 06:39:43.614
picked out his couch to match 
Google home Max.

06:39:47.282 --> 06:39:49.282
So I took that as giant 
complement

06:39:51.462 --> 06:39:52.909
compliment, because we were 
trying to do it the other way 

06:39:52.910 --> 06:39:54.910
around.  
   &gt;&gt; BRENDA FOGG: What is the 

06:39:58.038 --> 06:40:00.065
intersection of intuition you 
use as a designer as you 

06:40:00.066 --> 06:40:02.357
approach these kinds of problems
with the iterative testing and 

06:40:06.501 --> 06:40:08.373
the scientific materials 
examination? 

06:40:08.374 --> 06:40:09.992
&gt;&gt; ISABELLE OLSSON: It's a 
hodgepodge, and the process is 

06:40:09.993 --> 06:40:13.467
not linear.  It's pretty messy, 
usually.  But we have fun with 

06:40:13.468 --> 06:40:15.468
it.

06:40:16.718 --> 06:40:19.209
I think the key is gather as 
much input as possible, and then

06:40:19.210 --> 06:40:22.105
digest it and then come up with 
prototypes and 

06:40:26.159 --> 06:40:28.159
ways of relating to how this 
will fit 

06:40:29.235 --> 06:40:31.235
into people's homes.

06:40:32.693 --> 06:40:34.924
Right next to my desk, I have a 
big bookshelf that we place 

06:40:34.925 --> 06:40:39.436
random objects from all over the
world for inspiration, to put 

06:40:39.437 --> 06:40:42.496
our stuff there quickly to see 
how does it feel? And how does 

06:40:42.497 --> 06:40:46.596
it feel over time? It's not only
about creating something that 

06:40:46.597 --> 06:40:48.422
you are first attracted to, but 
it has to be things that you can

06:40:48.423 --> 06:40:50.423
live with 

06:40:52.868 --> 06:40:56.237
for a long time.  
   &gt;&gt; BRENDA FOGG: So Ryan, you 

06:40:56.238 --> 06:41:00.331
lead the Google doodles team, 
and this team is unique in a lot

06:41:00.332 --> 06:41:02.332
of ways, namely one of 

06:41:05.477 --> 06:41:07.477
them is that you regularly and 
willfully 

06:41:10.315 --> 06:41:12.315
break the brand rules --

06:41:18.331 --> 06:41:21.794
it's unusual.  It's the core of 
the brand.  And that's something

06:41:21.795 --> 06:41:24.058
that seems to keep working and 
working and working over the 

06:41:24.059 --> 06:41:26.059
years.

06:41:27.141 --> 06:41:29.210
So talk about why that's -- why 
you think it's important to have

06:41:29.211 --> 06:41:31.211
the ability 

06:41:32.496 --> 06:41:35.158
to just mess with it.  
   &gt;&gt; RYAN GERMICK: Google's 

06:41:35.159 --> 06:41:39.439
mission is to organize the 
world's information and make it 

06:41:39.440 --> 06:41:41.463
universally accessible and 
useful.  I believe in that 

06:41:41.464 --> 06:41:43.564
mission and I think it's a 
powerful and good thing to do 

06:41:43.565 --> 06:41:48.267
for the world.  We hone in on 
the idea of making things 

06:41:48.268 --> 06:41:50.268
accessible by creating an 
emotional connection with users.

06:41:53.198 --> 06:41:55.863
And sometimes mucking up the 
standards is collateral damage 

06:41:55.864 --> 06:41:58.152
for people getting a positive 
charge or learning something 

06:42:00.007 --> 06:42:02.037
new, then we think it's 
worthwhile.  And yeah, on a 

06:42:02.038 --> 06:42:04.038
human level, there's 

06:42:05.129 --> 06:42:10.277
things that are more important 
than consistency.  For us, it's 

06:42:10.278 --> 06:42:12.278
more about using our 

06:42:13.886 --> 06:42:17.438
creativity and craft and make 
people feel welcome in the space

06:42:17.439 --> 06:42:18.891
of technology.  
   &gt;&gt; BRENDA FOGG: So making 

06:42:18.892 --> 06:42:20.892
people feel 

06:42:22.925 --> 06:42:24.925
welcome in the space of 
decknology

06:42:27.357 --> 06:42:30.417
technology, you lead the team 
for the Google assistant.  How 

06:42:30.418 --> 06:42:32.418
do you create a personality?

06:42:34.288 --> 06:42:37.147
There's the transactional things
that have to happen when a user 

06:42:37.148 --> 06:42:39.990
is interacting can a digital 
assistant that they will be 

06:42:39.991 --> 06:42:43.074
delivered the information that 
they asked for.  And you felt 

06:42:43.075 --> 06:42:45.075
like it needed to go farther 
than that transactional 

06:42:45.542 --> 06:42:47.774
relationship.  But people have, 
you know, a little 

06:42:51.686 --> 06:42:53.326
bit the way we were talking with
Isabelle, and everyone has 

06:42:53.327 --> 06:42:57.591
different things that they like 
to interact with.  And some 

06:42:57.592 --> 06:43:01.073
people like small talk and some 
people don't.  And some people 

06:43:01.074 --> 06:43:03.160
think things are funny that 
others think are totally not 

06:43:03.161 --> 06:43:05.161
funny at all.

06:43:08.109 --> 06:43:10.109
How did you -- will you talk 
about that? 

06:43:10.554 --> 06:43:12.554
&gt;&gt; RYAN GERMICK: Technology that

06:43:13.786 --> 06:43:15.786
comes in a smart speaker or 
smart 

06:43:17.870 --> 06:43:20.326
display or on your phone is 
really personal.  We have a 

06:43:20.327 --> 06:43:22.327
different set of design 

06:43:25.209 --> 06:43:27.969
challenges than if it's 
objective.  When you invite this

06:43:27.970 --> 06:43:31.462
technology into your life, we're
using this conversational 

06:43:31.463 --> 06:43:33.736
interface as a metaphor.  You 
can talk to it, and it can 

06:43:33.737 --> 06:43:35.795
respond to it.  And as soon as 
you hear the human 

06:43:38.865 --> 06:43:41.129
voice, it not only opens up an 
opportunity to have a character,

06:43:41.130 --> 06:43:46.018
but it's an obligation for 
designing a character.  If you 

06:43:46.019 --> 06:43:47.887
don't design for it, people 
assume that you don't have much 

06:43:47.888 --> 06:43:49.951
of a character, but there's 
implicit character.

06:43:54.043 --> 06:43:56.501
So we took the learnings we had 
from doodles and it being an 

06:43:56.502 --> 06:43:58.502
implicit character for Google.

06:44:00.391 --> 06:44:02.486
We get creative and nerdy and 
excited, and we try to transfer 

06:44:02.487 --> 06:44:04.487
that over to the Google 
assistant where it's a character

06:44:07.412 --> 06:44:10.081
that you want to spend time 
with, because it has things that

06:44:10.082 --> 06:44:14.173
you get excited about or it 
really wants to help you.  Not 

06:44:14.174 --> 06:44:16.174
just be something that you want 
to 

06:44:17.431 --> 06:44:19.431
use, but something that you want
to spend time with.

06:44:21.292 --> 06:44:24.216
A surprising number of 
principles for doodles were 

06:44:24.217 --> 06:44:26.217
applicable for the Google 
assistant.

06:44:30.213 --> 06:44:32.812
There's a lot of pieces of the 
buzzle puzzle.  

06:44:34.667 --> 06:44:36.667
&gt;&gt; BRENDA FOGG: So each of you 
talked 

06:44:37.937 --> 06:44:39.937
a little about how technology 
interacts 

06:44:40.994 --> 06:44:42.890
can humans and vice versa and 
how those two things have to 

06:44:42.891 --> 06:44:44.891
co-exist.

06:44:48.237 --> 06:44:51.098
So good design and thoughtful 
design is a means to make 

06:44:51.099 --> 06:44:53.341
technology, in this case, more 
approachable and useful and 

06:44:57.047 --> 06:44:59.529
usable and friendly and to make 
people comfortable with that.

06:45:03.210 --> 06:45:05.699
You all approach your work and 
problem solving in this way from

06:45:05.700 --> 06:45:07.700
a very human perspective, right?

06:45:09.380 --> 06:45:12.239
A very -- you inject empathy.  
We're going get real and talk 

06:45:12.240 --> 06:45:14.508
humanity and empathy, right?

06:45:21.849 --> 06:45:23.849
Injecting inging inging empathy 
into your process.

06:45:25.967 --> 06:45:28.012
Doug, can the work you do with 
machine learning allow a machine

06:45:28.013 --> 06:45:30.013
to express art 

06:45:32.041 --> 06:45:34.041
in a human way? Let's start 
there.  

06:45:36.080 --> 06:45:38.080
&gt;&gt; DOUGLAS ECK: Yes.

06:45:39.140 --> 06:45:41.140
With some constraints on how 
this all 

06:45:43.607 --> 06:45:46.158
works, I think what we realized 
early was that we need at least 

06:45:46.159 --> 06:45:48.159
two players in 

06:45:50.200 --> 06:45:52.200
this game, so to speak

06:45:54.338 --> 06:45:56.338
.  Part of the work is building 
new technology.

06:45:58.475 --> 06:46:00.475
We're taking on a role that one 
might 

06:46:01.971 --> 06:46:04.011
take on by building a guitar or 
a tech might take on in building

06:46:04.012 --> 06:46:06.464
a new electronic instrument.  I 
think there's a thought process 

06:46:06.465 --> 06:46:10.347
that goes with building 
something like that that is very

06:46:10.348 --> 06:46:12.998
creative, but I think you're 
also in some very real way 

06:46:15.468 --> 06:46:17.099
constrained by the act of 
building the thing to understand

06:46:17.100 --> 06:46:20.997
it in a certain way.  Like it's 
your baby.  You built it, so you

06:46:20.998 --> 06:46:23.642
wrote the operating manual, so 
you know what this thing is 

06:46:23.643 --> 06:46:25.643
supposed to do.

06:46:26.894 --> 06:46:28.894
And in most cases, what we see 
is that 

06:46:30.174 --> 06:46:32.174
for something to become a truly 

06:46:33.465 --> 06:46:36.105
expressive artistic device, it 
has to in some very real way be 

06:46:36.106 --> 06:46:38.576
broken by someone else.  And I 
think it's almost impossible for

06:46:41.252 --> 06:46:42.872
us as the builders of that 
device to also be the ones that 

06:46:42.873 --> 06:46:44.873
break it.

06:46:46.980 --> 06:46:49.025
And so our dream at magenta is 
to connect with artists and 

06:46:49.026 --> 06:46:54.219
musicians and people! People 
that don't know how to code.  

06:46:54.220 --> 06:46:56.282
People that don't necessarily 
care much about computation and 

06:46:56.283 --> 06:46:59.957
draw them into this 
conversation.  And so, what we 

06:46:59.958 --> 06:47:01.958
found is that, you 

06:47:03.626 --> 06:47:06.262
know, we started by releasing 
machine learning models in open 

06:47:06.263 --> 06:47:08.263
source on GitHub 

06:47:09.895 --> 06:47:11.895
as part of tensor

06:47:14.484 --> 06:47:16.484
TensorFlow with instructions 
like 

06:47:19.572 --> 06:47:22.251
please run this 15-line long 
Python command, and you will get

06:47:22.252 --> 06:47:25.131
100Midi files in a temp 
directory in your machine, 

06:47:25.358 --> 06:47:28.027
right? And that's now how people
make music.

06:47:31.104 --> 06:47:33.104
So part of our work, even on the

06:47:36.085 --> 06:47:38.085
technologist side, even as 
guitar 

06:47:39.166 --> 06:47:42.038
makers, LOOUTiers, part of our 
job is to make good design oto 

06:47:42.039 --> 06:47:44.039
build interfaces 

06:47:46.456 --> 06:47:48.456
that people can use

06:47:52.026 --> 06:47:54.098
.  Getting there requires moving
parts, a large component of 

06:47:54.099 --> 06:47:56.733
which is good design.  
   &gt;&gt; BRENDA FOGG: I like the 

06:47:56.734 --> 06:47:58.734
notion of 

06:48:00.151 --> 06:48:02.151
breaking things

06:48:06.387 --> 06:48:09.040
.  You talked about an electric 
guitar and it's similar with the

06:48:09.041 --> 06:48:11.756
dissonance that people create 
with electric guitars? 

06:48:13.177 --> 06:48:15.177
&gt;&gt; DOUGLAS ECK: That's right.

06:48:18.423 --> 06:48:20.423
I tell the same stories like 
grandpa

06:48:39.569 --> 06:48:41.569
.  The electric guitar was 
designed

06:48:43.959 --> 06:48:45.959
to be a loud acoustic guitar and
they 

06:48:47.032 --> 06:48:49.032
tried so hard to keep the 
distortion at bay.

06:48:50.712 --> 06:48:54.439
Imagine a world where electric 
guitars have no distortion.  

06:48:54.440 --> 06:48:57.938
   &gt;&gt; BRENDA FOGG: One of the 
things that I find so 

06:48:57.939 --> 06:48:59.975
interesting about your work is 
that it's just as important or 

06:49:02.459 --> 06:49:04.459
maybe more important how people 
feel 

06:49:05.743 --> 06:49:09.396
about these things rather than 
just what their utility is.  How

06:49:09.397 --> 06:49:12.056
do you -- what kind of 
considerations do you make for 

06:49:12.057 --> 06:49:14.732
-- we're starting to sound like 
hippies now, but 

06:49:17.808 --> 06:49:19.425
people's feelings and empathies 
and the way they co-exist in the

06:49:19.426 --> 06:49:22.298
space with these things? 
   &gt;&gt; ISABELLE OLSSON: I think a

06:49:22.299 --> 06:49:27.022
good tool that I use a lot is I 
put stuff in front of people and

06:49:27.023 --> 06:49:31.284
ask them what they think it 
looks like.  It's a fun game.  

06:49:31.285 --> 06:49:33.525
You don't always get back what 
you want to hear, but it's a 

06:49:33.526 --> 06:49:38.841
really good way of testing what 
the object you have created, 

06:49:38.842 --> 06:49:40.072
does it have positive 
connotations or negative 

06:49:40.073 --> 06:49:42.073
connotations?

06:49:49.110 --> 06:49:51.110
The first time I showed a 
prototype of 

06:49:52.385 --> 06:49:56.049
Mimi to a French person and it 
is like a macaroon! And I love 

06:49:56.050 --> 06:49:58.050
macaroon.

06:50:03.164 --> 06:50:05.164
And I think something con con

06:50:06.915 --> 06:50:08.915
otating something sweet and 
delicious, 

06:50:10.411 --> 06:50:12.244
and we surround ourself with 
food, and I knew we were on to 

06:50:12.245 --> 06:50:15.149
something there.  And food is 
generally universally appealing.

06:50:18.396 --> 06:50:20.396
So that's one exercise out of 
many.

06:50:21.486 --> 06:50:23.486
I think the key is just to 
really make 

06:50:25.349 --> 06:50:27.593
the thing real really quickly, 
to translate the big idea into 

06:50:27.594 --> 06:50:29.594
something 

06:50:31.258 --> 06:50:33.258
tangible and then ourselves 
living with it for a while, too.

06:50:36.941 --> 06:50:42.548
S and then also think about not 
only the food analogies but the 

06:50:42.549 --> 06:50:43.954
objects we design are 
understandable.  We understand 

06:50:43.955 --> 06:50:48.660
what it is.  With mini, we want 
it to look a little like a 

06:50:48.661 --> 06:50:50.661
speaker, a little like a 

06:50:51.927 --> 06:50:54.219
microphone, but not too much 
like either, but be honest with 

06:50:54.220 --> 06:50:56.220
that 

06:50:57.623 --> 06:50:59.623
function, and THN

06:51:01.946 --> 06:51:05.024
and then conotate that it goes 
into the home.  

06:51:06.237 --> 06:51:08.052
&gt;&gt; BRENDA FOGG: And it has to 
have the human touch to it.  

06:51:08.053 --> 06:51:11.122
   &gt;&gt; ISABELLE OLSSON: Yeah.  
And the beauty of it is when you

06:51:11.123 --> 06:51:14.788
find these solutions, a lot of 
the times they enhance the 

06:51:14.789 --> 06:51:17.446
function or help with the 
function.  Fabric is this 

06:51:17.447 --> 06:51:19.447
excellent material that 

06:51:20.945 --> 06:51:23.217
is, you know, most of the time 
is audio transparent.  You can 

06:51:23.218 --> 06:51:25.218
have lights through it.

06:51:27.480 --> 06:51:29.480
You can create this calmness

06:51:31.378 --> 06:51:33.844
in the object itself.  And I'm 
really passionate about trying 

06:51:36.143 --> 06:51:37.986
to design pieces of technology 
which hopefully people think 

06:51:37.987 --> 06:51:41.912
about their stuff.  And not as 
technology.  But that can live 

06:51:41.913 --> 06:51:46.646
out in the open.  There is just 
way too many pieces of furniture

06:51:46.647 --> 06:51:50.107
that are purely designed to hide
technology.  So my goal in life 

06:51:50.108 --> 06:51:52.137
is if we can get rid of those 
things.  

06:51:55.643 --> 06:51:57.643
&gt;&gt; BRENDA FOGG: And Ryan, the --
that 

06:51:59.128 --> 06:52:00.606
sort of human touch is pretty 
evident in most everything that 

06:52:00.607 --> 06:52:02.607
you do.

06:52:04.820 --> 06:52:06.820
So we can talk about

06:52:07.932 --> 06:52:09.932
the

06:52:12.936 --> 06:52:14.936
Google assistant.

06:52:16.600 --> 06:52:18.600
It was a fundamental human 
interface.

06:52:19.686 --> 06:52:22.549
And through the force of the 
work on creating a personality, 

06:52:22.550 --> 06:52:25.063
talk about how you found and 
stared through the land 

06:52:28.753 --> 06:52:30.186
mines of what kinds of -- aside 
from the transactional things, 

06:52:30.187 --> 06:52:33.887
what kinds of things are people 
going to want to talk about with

06:52:33.888 --> 06:52:35.512
their assistant? 
   &gt;&gt; RYAN GERMICK: Yeah, I 

06:52:35.513 --> 06:52:37.513
think this 

06:52:41.567 --> 06:52:43.567
may be a bit cliche, but it's 
still early days.

06:52:47.059 --> 06:52:49.700
For us, a guiding principle is 
is it a feeling thing? Does it 

06:52:49.701 --> 06:52:51.936
feel like a character that you 
want to spend time with, like I 

06:52:52.753 --> 06:52:54.753
mentioned earlier?

06:52:56.831 --> 06:52:58.831
As far as like, um, finding 
things that 

06:53:00.128 --> 06:53:01.129
we wanted to steer clear of, it 
was really interesting to look 

06:53:01.130 --> 06:53:06.509
at the different queries that 
people ask Google search, and we

06:53:06.510 --> 06:53:08.764
ask Google assistant.  At 
Google, there's a lot of people 

06:53:10.427 --> 06:53:12.427
with a background in information

06:53:14.186 --> 06:53:16.017
retrieval and data ranking and 
things -- search ranking and 

06:53:16.018 --> 06:53:18.123
things like that.  And it turns 
things on their head when 

06:53:21.788 --> 06:53:23.788
people are asking questions 
like, 

06:53:24.879 --> 06:53:26.879
"What's your favorite flavor of 
ice cream?

06:53:28.575 --> 06:53:30.575
" And "did you far?

06:53:33.506 --> 06:53:35.778
" Those are more common than you
think.  A sizable number of the 

06:53:35.779 --> 06:53:37.779
queries we get 

06:53:38.858 --> 06:53:39.878
are first date queries like do 
you have any brothers or 

06:53:39.879 --> 06:53:41.879
sisters?

06:53:43.986 --> 06:53:45.623
It's really sweet.  
   &gt;&gt; DOUGLAS ECK: What is her 

06:53:45.624 --> 06:53:47.624
favorite flavor of ice cream?

06:53:50.326 --> 06:53:52.326
I'm sure that everybody wants to
know.  

06:53:52.815 --> 06:53:54.815
&gt;&gt; RYAN GERMICK: That's an 
illuminating question, Doug.

06:53:57.048 --> 06:54:02.833
Thank you for asking.  We 
basically set up principles.  We

06:54:02.834 --> 06:54:05.302
have one principle where we want
to talk like a human and take 

06:54:05.303 --> 06:54:09.185
advantage of the human voice, 
but we don't want to pretend to 

06:54:09.186 --> 06:54:11.186
be one.

06:54:13.108 --> 06:54:15.795
If you would ask what's your 
favor flavor of ice cream, we 

06:54:15.796 --> 06:54:18.233
would do what we call an artful 
dodge.

06:54:22.755 --> 06:54:26.021
We don't want to deny the user 
of, "I do not eat ice cream.  I 

06:54:26.022 --> 06:54:31.354
do not have a mouth." If you're 
exploring new technology, that's

06:54:31.355 --> 06:54:33.615
a shut down to the new 
technology.  We don't want to 

06:54:33.616 --> 06:54:38.142
lie and be like salted caramel, 
obviously, which is a position 

06:54:38.143 --> 06:54:42.014
that is disingenuous, because it
does not eat ice cream.  So we 

06:54:42.015 --> 06:54:44.015
would say something like you 

06:54:45.878 --> 06:54:47.304
can't go wrong with neopolitan. 
There's something in it for 

06:54:47.305 --> 06:54:51.156
everyone.  We would take that 
question and understand the sub 

06:54:51.157 --> 06:54:53.415
text that I'm getting to know 
what you are and what your 

06:54:53.828 --> 06:54:55.828
capabilities are.

06:54:56.932 --> 06:54:58.568
And we would yes and, and 
continue to play the game and 

06:54:58.569 --> 06:55:00.569
use it as an opportunity to make
a value statement 

06:55:03.540 --> 06:55:05.576
that we're inclusive, and we 
want to reflect an ice cream 

06:55:05.577 --> 06:55:07.577
that is good for everyone is 
good.  

06:55:08.259 --> 06:55:10.259
&gt;&gt; BRENDA FOGG: How much 
dialogue 

06:55:11.951 --> 06:55:13.579
goes on when you're -- within 
your team when you're trying to,

06:55:13.580 --> 06:55:15.580
you know, when you're talking 
about okay, what if 

06:55:19.962 --> 06:55:21.962
someone asks the Google 
Assistant, do 

06:55:24.064 --> 06:55:26.153
you fart? 
   &gt;&gt; RYAN GERMICK: I knew that 

06:55:26.154 --> 06:55:28.154
we 

06:55:29.211 --> 06:55:30.426
already one when we found out 
that that question was going to 

06:55:30.427 --> 06:55:34.687
be answered.  There was a school
of thought that you would say I 

06:55:34.688 --> 06:55:37.141
don't fart.  I don't have a 
body, end of story.

06:55:40.407 --> 06:55:42.643
And that seems like true, but 
not in line with, you know, 

06:55:42.644 --> 06:55:44.644
keeping the game going.

06:55:46.847 --> 06:55:48.847
So we would have a lot of back 
and forth.

06:55:50.832 --> 06:55:51.886
And we would then, like, take 
that answer and say at least you

06:55:51.887 --> 06:55:54.797
could say I don't have a butt.  
At least you would be a little 

06:55:54.798 --> 06:55:58.668
more specific.  
   &gt;&gt; BRENDA FOGG: Start there. 

06:55:58.669 --> 06:56:00.314
A butt.  
   &gt;&gt; RYAN GERMICK: But we ended

06:56:00.315 --> 06:56:04.626
up with something more playful 
and addressing the sub text 

06:56:04.627 --> 06:56:06.627
which is of the school of 

06:56:08.074 --> 06:56:10.074
whoever smelt it dealt it, which
is you can blame me if you want.

06:56:10.905 --> 06:56:14.624
I don't mind.  If the user is 
asking about that let's take it 

06:56:14.625 --> 06:56:16.625
a step further and put them on 
the spot.  

06:56:17.076 --> 06:56:19.082
&gt;&gt; BRENDA FOGG: Are you all 
going to ask your Google 

06:56:19.083 --> 06:56:21.984
assistant now? 
   &gt;&gt; RYAN GERMICK: I think 

06:56:21.985 --> 06:56:25.266
there are 25 different answers. 
   &gt;&gt; BRENDA FOGG: Keep asking. 

06:56:25.267 --> 06:56:27.267
Keep asking.

06:56:28.599 --> 06:56:31.455
Let's talk a little about how 
this humanity plays out in the 

06:56:31.456 --> 06:56:33.456
context of a brand like Google.

06:56:38.197 --> 06:56:40.826
So Isabelle, the home Minineeded
to be a speaker and a microphone

06:56:40.827 --> 06:56:42.827
as well as an 

06:56:45.954 --> 06:56:48.950
assistant and behave like an 
assistant. 

06:56:54.165 --> 06:56:57.765
needed to be a speaker and a 
microphone as well as an 

06:56:54.165 --> 06:56:56.165
assistant and behave like an 
assistant.

06:56:57.224 --> 06:56:59.224
How do you from there to the 
idea of personality and a brand.

06:57:00.681 --> 06:57:02.704
In Ryan's work, his work talks, 
and the personality comes 

06:57:02.705 --> 06:57:05.815
through that way.  In your work,
it comes through the materials 

06:57:05.816 --> 06:57:11.118
and the things.  How do you 
consider the personality of the 

06:57:11.119 --> 06:57:12.762
Google brand in the work that 
you do? 

06:57:12.763 --> 06:57:14.763
&gt;&gt; ISABELLE OLSSON: It's a huge 

06:57:16.455 --> 06:57:18.283
responsibility and we're only a 
few years into making hardware 

06:57:18.284 --> 06:57:20.284
that people 

06:57:22.125 --> 06:57:24.125
actually put down money for

06:57:27.044 --> 06:57:29.314
.  The brand is really 
incredible.  We're trying to 

06:57:29.315 --> 06:57:31.362
figure out what's core to 
Google, and how do we translate 

06:57:31.363 --> 06:57:33.363
that into physical form?

06:57:36.458 --> 06:57:39.099
And sometimes it's not about a 
direct translation, because most

06:57:39.100 --> 06:57:41.100
people don't 

06:57:42.206 --> 06:57:44.059
want to pay more fun something 
quirky, maybe, so taking that 

06:57:44.060 --> 06:57:46.572
principle and that idea and 
thinking about what it means for

06:57:46.573 --> 06:57:48.573
hardware.

06:57:50.616 --> 06:57:52.616
So in this case, for example

06:57:55.413 --> 06:57:56.259
, it's optimism and an 
optimistic outlook on the 

06:57:56.260 --> 06:58:00.034
future.  So if I can do things 
that remind people of that or 

06:58:00.035 --> 06:58:02.035
that makes people 

06:58:03.288 --> 06:58:05.288
smile, I think that naturally 
feels like 

06:58:06.514 --> 06:58:08.514
a Google product

06:58:11.037 --> 06:58:13.037
.  One simple example is if you 
turn 

06:58:15.092 --> 06:58:17.967
Mini upside down, there's a pop 
of color on it.  It has Google 

06:58:17.968 --> 06:58:20.045
on the inside.  
   &gt;&gt; BRENDA FOGG: Let's go back

06:58:20.046 --> 06:58:22.501
to Ryan, then.  Over the years, 
over the seven or 

06:58:26.981 --> 06:58:28.981
eight years or however many 
years you've been -- 

06:58:30.245 --> 06:58:33.726
&gt;&gt; RYAN GERMICK: 12. 
   &gt;&gt; BRENDA FOGG: 12 years! 

06:58:33.727 --> 06:58:36.166
You've had a lot of 
opportunities to craft the 

06:58:36.167 --> 06:58:39.012
moments of delight and user 
experiences that are like 

06:58:39.013 --> 06:58:41.013
turning over 

06:58:44.511 --> 06:58:46.747
the mini and finding a little 
surprise.  You're responsible 

06:58:46.748 --> 06:58:51.480
for the peg man, which is the 
character you drop into Google 

06:58:51.481 --> 06:58:53.481
maps when you go into street 
view.

06:58:54.754 --> 06:58:57.020
And we talked about the 
personality of the Google 

06:58:57.021 --> 06:58:59.674
Assistant a little bit.  And the
doodles taking over the home 

06:59:00.282 --> 06:59:05.816
page.  Over the 12 years that 
you have been working in that 

06:59:05.817 --> 06:59:07.817
territory, as the Google 

06:59:08.923 --> 06:59:10.761
arena grows and evolves, how has
the growth of the brand impacted

06:59:10.762 --> 06:59:14.226
the work that you do? 
   &gt;&gt; RYAN GERMICK: I think the 

06:59:14.227 --> 06:59:16.227
core of 

06:59:17.349 --> 06:59:20.388
what I try to do, I almost 
discovered it by accident.  Like

06:59:20.389 --> 06:59:22.389
the street view peg man is maybe
a story for another day.

06:59:24.920 --> 06:59:26.768
I was just glad that I worked in
a place that had free 

06:59:26.769 --> 06:59:32.465
strawberries when I got here.  
That was very exciting to me.  

06:59:32.466 --> 06:59:34.466
And the fact that they paid me 
to draw 

06:59:37.148 --> 06:59:39.148
and be creative was beyond my 
wildest dreams.

06:59:40.631 --> 06:59:43.483
I was so happy to be here and 
still am.  I was like how can I 

06:59:43.484 --> 06:59:45.484
use my position of privilege to 
bring other people up 

06:59:49.623 --> 06:59:51.623
and give them a sense of 
belonging.

06:59:52.682 --> 06:59:54.102
And that's stayed consistent.  
Whether it's trying to make sure

06:59:54.103 --> 06:59:56.103
we 

06:59:57.795 --> 07:00:00.247
have inclusive doodles, or 
creating an opportunity for a 

07:00:00.248 --> 07:00:02.334
mannequin that can be dressed up
for holidays for street view.

07:00:05.591 --> 07:00:08.240
It's -- you know, there's been a
through line.  Maybe in the 

07:00:08.241 --> 07:00:10.895
beginning Google was more of an 
underdog, it was a very 

07:00:10.896 --> 07:00:12.896
important part of people's 
lives.

07:00:16.938 --> 07:00:18.938
I don't think you can say it's a
small

07:00:25.998 --> 07:00:27.998
organization.  

07:00:30.205 --> 07:00:32.205
&gt;&gt; BRENDA FOGG: I want to make

07:00:34.380 --> 07:00:36.014
sure we leave time for 
questions.  Now let's talk about

07:00:36.015 --> 07:00:38.015
the future.

07:00:39.078 --> 07:00:41.520
If we're sitting here a year 
from now or a few years from 

07:00:41.521 --> 07:00:46.664
now, Doug, what do you expect --
what do you expect that machine 

07:00:46.665 --> 07:00:49.340
learning might do for art in the
future, whether it's, you know, 

07:00:49.341 --> 07:00:54.446
your aspirations for the next 12
or 18 months or maybe five years

07:00:54.447 --> 07:00:57.054
from now? 
   &gt;&gt; DOUGLAS ECK: So I think 

07:00:57.055 --> 07:01:02.052
the really interesting way to 
think about this is consider 

07:01:02.053 --> 07:01:04.530
generative models as a family of
machine learning models, models 

07:01:04.531 --> 07:01:06.531
that 

07:01:07.572 --> 07:01:09.572
generate new instances of the 
data upon which they're trained.

07:01:11.055 --> 07:01:13.931
Where I see us going is actually
very heavily integrating the 

07:01:13.932 --> 07:01:15.932
design process 

07:01:18.427 --> 07:01:20.873
of products with generative 
models, so that we're seeing 

07:01:20.874 --> 07:01:24.546
machine learning generating part
of what we're trying to do.  I 

07:01:24.547 --> 07:01:26.396
think that will touch our lives 
in the arts and music and 

07:01:26.397 --> 07:01:28.397
communication in a number of 
ways.

07:01:31.719 --> 07:01:34.386
To those of you in the room who 
are developers, which is easy.  

07:01:34.387 --> 07:01:36.633
We're at a developer conference.
We'll have an opportunity as 

07:01:36.634 --> 07:01:38.634
machine learning experts to 
understand a little 

07:01:41.303 --> 07:01:43.303
about design, and I think we're 
going to 

07:01:44.366 --> 07:01:46.206
see much more of a need for 
end-to-end integration.  For me,

07:01:46.207 --> 07:01:48.207
the future started happening 
already in a sense.

07:01:50.681 --> 07:01:52.681
I have teen aged kids and I 
watched 

07:01:53.754 --> 07:01:55.371
how they use snap chat to 
communicate and they built their

07:01:55.372 --> 07:02:00.281
own grammar around it, and it's 
a very simple product.  Now 

07:02:00.282 --> 07:02:03.582
imagine ten years of advances in
assistive writing.  So you ear 

07:02:03.583 --> 07:02:06.224
using Google docs and you're 
writing and you have some 

07:02:06.225 --> 07:02:10.920
machine learning algorithm 
helping you communicate, right? 

07:02:10.921 --> 07:02:13.374
We're going to get very good at 
this very fast.  And I expect 

07:02:13.375 --> 07:02:15.375
when my kids were 

07:02:17.865 --> 07:02:20.403
younger, the teachers were all 
worried that they used Wikipedia

07:02:20.404 --> 07:02:26.153
to use their peep papers.  And 
now it will be how much did you 

07:02:28.609 --> 07:02:32.285
write and how much did your 
assistant write? There are very 

07:02:32.286 --> 07:02:36.386
difficult issues here, but it's 
also wonderful, I think.  As 

07:02:36.387 --> 07:02:38.387
lock as we use this to 
communicate 

07:02:40.258 --> 07:02:42.133
more effectively, it's very 
exciting to think about how 

07:02:42.134 --> 07:02:44.587
machine learning could become 
really more deeply integrated in

07:02:46.005 --> 07:02:48.005
the process of communicating.

07:02:49.072 --> 07:02:51.102
And again, that's what I see the
arts as being about and music 

07:02:51.103 --> 07:02:53.760
being about.  It's about 
communicating, sharing our 

07:02:55.811 --> 07:02:59.097
thoughts, feelings, and beliefs 
with each other.  I'm seeing in 

07:02:59.098 --> 07:03:03.412
my career that happening with 
machine learning as well.  

07:03:03.413 --> 07:03:05.045
That's my future vision.  
   &gt;&gt; BRENDA FOGG: I love your 

07:03:05.046 --> 07:03:08.910
vision.  What do you want to see
in hardware in the next year or 

07:03:08.911 --> 07:03:10.542
two? 
   &gt;&gt; ISABELLE OLSSON: Number 

07:03:10.543 --> 07:03:14.638
one, I hope people find out 
about it.  We just did a small 

07:03:14.639 --> 07:03:19.992
exhibition in Milan a couple 
weeks ago, and part of the 

07:03:19.993 --> 07:03:24.088
exhibition was the portfolio 
that we launched last year.  And

07:03:24.089 --> 07:03:25.757
a lot of people come up to me 
and say these concepts are 

07:03:25.758 --> 07:03:28.225
great.  And I'm like they're not
concepts.

07:03:31.497 --> 07:03:35.390
They're actual products.  
There's a little bit of that.  

07:03:35.391 --> 07:03:37.391
And I hope we just continue to 
design 

07:03:38.652 --> 07:03:40.685
for everyone in everyday life.  
   &gt;&gt; BRENDA FOGG: And Ryan, 

07:03:40.686 --> 07:03:43.565
what would you say? What would 
you like people to take away 

07:03:44.826 --> 07:03:46.051
today? 
   &gt;&gt; RYAN GERMICK: I think 

07:03:46.052 --> 07:03:50.611
remember that technology is for 
people, first and foremost.  

07:03:50.612 --> 07:03:53.093
Always keep that question in the
back of your mind how is what 

07:03:53.094 --> 07:03:58.468
I'm doing helping people? 
   &gt;&gt; BRENDA FOGG: Okay.  Do we 

07:03:58.469 --> 07:04:03.347
have questions? Here we go.  
   &gt;&gt; I have a question about 

07:04:03.348 --> 07:04:09.118
Google Home.  Sometimes I insult
Google Home, and I was wondering

07:04:09.119 --> 07:04:11.119
how do you deal with it?

07:04:13.802 --> 07:04:15.802
Is it common for people to ask 
Google 

07:04:17.083 --> 07:04:18.918
to shut up or call it an idiot? 
   &gt;&gt; RYAN GERMICK: I saw a good

07:04:18.919 --> 07:04:20.919
tweet 

07:04:22.574 --> 07:04:24.824
today actually that said in 
"Star Wars" you could tell who 

07:04:24.825 --> 07:04:28.345
the villains are, because 
they're mean to the Droids.  I'm

07:04:28.346 --> 07:04:30.346
not making a judgment on your 
character, but...

07:04:33.046 --> 07:04:35.096
the empire is.
No.

07:04:38.591 --> 07:04:40.695
But, you know, trolls are a part
of -- and discovering boundaries

07:04:40.696 --> 07:04:43.144
is like a natural part of 
interfacing with a new 

07:04:46.137 --> 07:04:48.137
technology

07:04:49.514 --> 07:04:51.514
.  Our general policy is to not 
feed the 

07:04:52.772 --> 07:04:54.772
trolls and to play dumb and not 
engage 

07:04:57.912 --> 07:05:00.998
and leave bread crumbs of reward
for bad behavior.  There's more 

07:05:00.999 --> 07:05:03.045
important and urgent work to 
help people than that particular

07:05:04.072 --> 07:05:06.072
boundary area.

07:05:08.125 --> 07:05:12.049
Thanks for the question.  
   &gt;&gt; I have another question 

07:05:12.050 --> 07:05:14.050
for Ryan.

07:05:16.384 --> 07:05:18.384
How do you prioritize what 
questions 

07:05:19.876 --> 07:05:21.876
have an artful dodge.  
   &gt;&gt; RYAN GERMICK: There's a 

07:05:25.389 --> 07:05:27.458
relationship between farts and 
ice cream depending on your 

07:05:27.459 --> 07:05:30.117
lactose tolerance.  There's one 
through line.  It's a good 

07:05:30.118 --> 07:05:32.118
question.

07:05:33.351 --> 07:05:35.351
We look at frequency and query 
logs.

07:05:36.390 --> 07:05:39.233
There's boring analysis of 
things people ask.  And we have 

07:05:39.234 --> 07:05:41.514
an awesome team that comes from 
backgrounds and people who did 

07:05:41.515 --> 07:05:43.515
film 

07:05:44.776 --> 07:05:47.402
and animation and all kind of 
great improve comedies, and we 

07:05:47.403 --> 07:05:51.410
try to define the character and 
little moments that maybe matter

07:05:51.411 --> 07:05:55.154
and create a constellation that 
you can't fill in every detail. 

07:05:55.155 --> 07:05:57.641
And we're just getting started. 
So some things had to be a bit 

07:05:57.642 --> 07:06:01.317
of a wild guess.  Thanks for the
question.  

07:06:03.166 --> 07:06:04.406
&gt;&gt; Number three for Ryan, but 
interested in everyone's 

07:06:04.407 --> 07:06:09.370
opinions.  Very cool yesterday 
to see AI schedule a haircut or 

07:06:09.371 --> 07:06:11.371
a dinner.

07:06:12.447 --> 07:06:14.720
You're really good at the artful
dodge because you just did it to

07:06:14.721 --> 07:06:17.394
the last two questions.  But I'm
curious, we know when we're 

07:06:20.286 --> 07:06:22.141
talking to our Google Home or 
Assistant, but that person on 

07:06:22.142 --> 07:06:24.142
the other end of the phone 
doesn't necessarily know.

07:06:26.973 --> 07:06:28.973
Do you think there is the need 
for AI 

07:06:30.224 --> 07:06:35.137
to identify itself as such? 
   &gt;&gt; RYAN GERMICK: The demo is 

07:06:35.138 --> 07:06:39.423
an impressive research demo.  
But I take to heart that it's 

07:06:39.424 --> 07:06:43.218
just getting started and we're 
trying to figure out how to get 

07:06:43.219 --> 07:06:45.219
it right.

07:06:47.126 --> 07:06:49.004
These are hot off the presses 
kind of possibilities, and I 

07:06:49.005 --> 07:06:51.005
think there's going 

07:06:55.112 --> 07:06:57.112
to be a lot of ethical 
complications

07:07:01.352 --> 07:07:03.352
.  
   &gt;&gt; So I have a question about

07:07:05.900 --> 07:07:08.952
emotional intelligence and 
emotional understanding.  

07:07:08.953 --> 07:07:10.953
Clearly you have to project 
emotion 

07:07:14.270 --> 07:07:17.141
like a calming, personable feel.
What do you need to project from

07:07:17.142 --> 07:07:19.142
an 

07:07:20.154 --> 07:07:24.401
audio 6 input side? 
   &gt;&gt; BRENDA FOGG: We're all 

07:07:24.402 --> 07:07:26.438
looking at Doug.  
   &gt;&gt; DOUGLAS ECK: There's been 

07:07:26.439 --> 07:07:28.439
some work done in this area.

07:07:30.973 --> 07:07:33.009
We won't get better at this, 
like a chicken or egg problem.

07:07:37.074 --> 07:07:40.983
We start launching products, so 
we get connections with users.  

07:07:40.984 --> 07:07:42.832
I do think it's the way to train
models is to understand how the 

07:07:42.833 --> 07:07:46.939
work that we're doing is 
affecting our users and actually

07:07:46.940 --> 07:07:48.940
respond positively.

07:07:50.074 --> 07:07:52.144
There's a hot area of usage 
called effective computation 

07:07:52.145 --> 07:07:56.287
where we're trying to understand
how to connect in the right way 

07:07:56.288 --> 07:07:58.325
with and for our users in terms 
of lowering stress and issues 

07:07:58.326 --> 07:08:00.326
like that.

07:08:02.196 --> 07:08:04.700
What I can say is that it's also
in its infancy, and there are no

07:08:04.701 --> 07:08:09.093
easy answers.  
   &gt;&gt; RYAN GERMICK: One thing 

07:08:09.094 --> 07:08:13.175
that's exciting about being part
of the Google world, and all of 

07:08:13.176 --> 07:08:15.403
you in the eco-system as well, 
if there is an interesting 

07:08:17.442 --> 07:08:19.442
question, you can be sure that 
someone 

07:08:22.094 --> 07:08:24.094
is pursuing it somewhere at 
Google

07:08:25.833 --> 07:08:29.432
.  There is definitely 
interesting things happening to 

07:08:29.433 --> 07:08:31.433
answer questions, I have a 
wearable.

07:08:32.541 --> 07:08:34.559
Can it detect my pulse rate and 
does that affect how it 

07:08:34.560 --> 07:08:36.560
interacts with me?

07:08:37.618 --> 07:08:38.859
And when I'm speaking loudly or 
softly.  There's work to be 

07:08:38.860 --> 07:08:41.322
done.  But it's an interesting 
problem.  

07:08:42.964 --> 07:08:44.964
&gt;&gt; BRENDA FOGG: I think we're 
out of time.

07:08:46.368 --> 07:08:49.571
I'm SORP sorry we didn't get to 
everybody.  But thanks for 

07:08:49.572 --> 07:08:50.979
coming.  
   &gt;&gt; Thank you for joining this

07:08:50.980 --> 07:08:56.110
session.  Brand ambassadors will
assist with directing you 

07:08:56.111 --> 07:08:58.766
through the designated exits.  
We'll be making room for those 

07:08:58.767 --> 07:09:01.646
who registered for the next 
session.  If you've registered 

07:09:01.647 --> 07:09:06.166
for the next session in this 
room, we ask that you please 

07:09:06.167 --> 07:09:09.668
clear the room and return via 
the registration line outside.  

07:09:09.669 --> 07:09:10.860
Thank you.  

07:09:20.002 --> 07:09:21.036
Live captioning will appear on 
these screens... 

07:28:10.304 --> 07:28:12.304
[ Applause ] 

07:28:16.985 --> 07:28:20.662
   &gt;&gt; MONICA DINCULESCU: Hello 
hello hello.  How is everyone 

07:28:20.663 --> 07:28:22.663
doing?

07:28:24.898 --> 07:28:29.258
Hi, everyone, I'm Monica.  I 
work on the polymer team.  If 

07:28:29.259 --> 07:28:31.317
you ever heard about polymer or 
the polymer team, we're always 

07:28:31.318 --> 07:28:33.318
excited about 

07:28:36.057 --> 07:28:37.294
the web, excited about DOM APIs.
I don't know if you have heard 

07:28:37.295 --> 07:28:41.573
this, but the web is pretty 
great.  It's portable, it's 

07:28:41.574 --> 07:28:43.574
fast, it's in 

07:28:44.582 --> 07:28:46.582
everybody's pockets all the 
time.

07:28:53.100 --> 07:28:55.100
You get to write apps in HTML, 
CSS and 

07:28:56.560 --> 07:28:59.221
JavaScript, and they are called 
PWAs.  They feel like native 

07:28:59.222 --> 07:29:04.754
apps, but they work on the web 
this year is a really exciting 

07:29:04.755 --> 07:29:06.755
year for PWAs, because they're 

07:29:08.040 --> 07:29:10.676
on four -- six out of six and a 
half browsers.  They work on 

07:29:10.677 --> 07:29:12.677
Chrome and safari and 

07:29:15.371 --> 07:29:17.371
Firefox and edge and Opera, and 
Samsung 

07:29:19.423 --> 07:29:21.075
internet, and they sort of work 
on IE11, but nothing everything 

07:29:21.076 --> 07:29:23.800
does, so we won't hold that 
against them.  They also work in

07:29:23.801 --> 07:29:28.478
app stores.  Microsoft recently 
announced that along with native

07:29:28.479 --> 07:29:31.147
windows apps, you can find PWAs 
in the store, and you can 

07:29:31.353 --> 07:29:33.353
install them.

07:29:35.446 --> 07:29:39.778
They have a native-y feel to 
them.  They are on desktops.  

07:29:39.779 --> 07:29:41.779
Chrome announced that you can 
install 

07:29:42.871 --> 07:29:44.871
a PWA on your native desktop 
machine, 

07:29:46.785 --> 07:29:48.785
and you can have a shortcut and 
double 

07:29:50.299 --> 07:29:52.562
click the shortcut, but it's 
been a web app all along.  

07:29:55.200 --> 07:29:57.254
Progress web apps are 
everywhere.  If you're going to 

07:29:57.255 --> 07:30:01.935
build something soon, you might 
think I should build a PWA that 

07:30:01.936 --> 07:30:03.936
works everywhere.  But often 
when you start building 

07:30:06.023 --> 07:30:08.023
something, especially a new 
project on 

07:30:09.691 --> 07:30:11.691
the web, it often feels like 
this.

07:30:12.991 --> 07:30:14.991
That poor soul in the middle is 
you, 

07:30:16.414 --> 07:30:18.414
and all the the upper

07:30:22.039 --> 07:30:24.709
tupper ware falling is falling 
on you.  It has to work 

07:30:24.710 --> 07:30:27.600
everywhere and it has to be 
shiny and oh my God, there are 

07:30:27.601 --> 07:30:31.883
so many things.  And it feels 
awful and not great.  If you 

07:30:31.884 --> 07:30:34.138
think about this graph of effort
versus results, you have to do a

07:30:35.960 --> 07:30:37.960
lot of effort to get to like a 
point 

07:30:39.662 --> 07:30:43.524
where you can even call it an 
app.  It's soul-crushing.  It 

07:30:43.525 --> 07:30:45.525
sucks to work hard and not 
accomplish a lot.

07:30:47.437 --> 07:30:49.662
And where we want you to be in 
this graph isn't here, it's all 

07:30:49.663 --> 07:30:52.560
the way at the beginning.  We 
want you to do very little 

07:30:52.561 --> 07:30:54.593
effort and get awesome results 
off the bat.

07:30:57.868 --> 07:30:59.868
The hard stuff you're working on
is not your stuff.

07:31:02.006 --> 07:31:04.006
It's not boring boilerplate that
you 

07:31:05.278 --> 07:31:07.278
have to implement just to call 
it an app.

07:31:08.570 --> 07:31:10.384
You have to reuse somebody 
else's components and elements 

07:31:10.385 --> 07:31:12.385
and a regular kit.

07:31:14.074 --> 07:31:16.074
Everybody on my team has a 
staying, 

07:31:17.327 --> 07:31:19.327
Steve says do less, be lazy.  
Kevin says hard things are hard.

07:31:21.430 --> 07:31:23.430
And I started saying always be 

07:31:26.311 --> 07:31:29.001
component-izing.  I mean this in
the real world.

07:31:33.235 --> 07:31:35.235
When you buy an I-

07:31:36.997 --> 07:31:38.997
IKEA table, you have legs, a 
slab of wood and screws.

07:31:42.145 --> 07:31:44.145
You don't go to the forest and 
cut 

07:31:45.386 --> 07:31:47.062
down a tree and mine other to 
make screws.  You get components

07:31:47.063 --> 07:31:49.320
and put them together and that's
how you get a table 

07:31:54.407 --> 07:31:56.407
together in an hour, versus a 
year after.  

07:31:59.730 --> 07:32:01.730
In an app, you do the exact same
thing.  You big a router.

07:32:04.783 --> 07:32:10.339
You pick local storage.  You 
don't write the libraries every 

07:32:12.799 --> 07:32:15.243
time you need them in your 
application.  That's banana 

07:32:15.244 --> 07:32:17.244
pants.

07:32:18.281 --> 07:32:20.281
You use web components.

07:32:22.175 --> 07:32:23.800
Web Components are encapsulated 
and they have styles inside and 

07:32:23.801 --> 07:32:25.801
you get to 

07:32:27.332 --> 07:32:30.211
use them everywhere and it's 
super easy.  Web Components, if 

07:32:30.212 --> 07:32:32.212
you saw the polymer 

07:32:33.288 --> 07:32:34.309
talk earlier, they're 
first-class citizens on the web 

07:32:34.310 --> 07:32:38.606
now.  That's really awesome and 
powerful.  These are the 

07:32:38.607 --> 07:32:41.465
components that you could use.  
You could use somebody's bar 

07:32:41.466 --> 07:32:43.466
chart.

07:32:45.610 --> 07:32:47.239
You can stop reinventing your 
date picker in every 

07:32:47.240 --> 07:32:52.740
application.  I'm happy to tell 
you, we have this kit.  PW 

07:32:52.741 --> 07:32:54.971
starter kit is a thing that the 
polymer team has been working 

07:32:54.972 --> 07:32:58.680
on, and it's basically a 
template that lets you build 

07:32:58.681 --> 07:33:02.742
PWAs.  It has components 
prechosen for you and you can 

07:33:02.743 --> 07:33:04.743
mix and match them.  We're 
announcing it today.

07:33:08.918 --> 07:33:10.918
We shipped version 0.2 this 
morning.

07:33:13.814 --> 07:33:15.814
We want you to demo it and play 
with it before we go 1.

07:33:18.470 --> 07:33:20.470
0 and we can't take back any of 
the 

07:33:21.478 --> 07:33:23.442
features chosen for you and you 
can mix and match them.  We're 

07:33:23.443 --> 07:33:27.576
announcing it today.  We shipped
version 0.2 this morning.  We 

07:33:23.443 --> 07:33:27.509
want you to demo it and play 
with it before we go 1.0 and we 

07:33:23.443 --> 07:33:25.110
can't take back any of the 
features.  

07:33:25.111 --> 07:33:27.370
In order to not bore with you 
words the entire time, I built a

07:33:27.371 --> 07:33:29.371
game.

07:33:31.491 --> 07:33:33.491
Super PWA adventure, the awesome

07:33:34.940 --> 07:33:36.940
one-player game to build PWAs.

07:33:38.848 --> 07:33:41.715
For any lawyers in the audience,
I have been playing hundreds and

07:33:41.716 --> 07:33:45.828
hundreds of hours of breath of 
the wild.  Every good game has a

07:33:45.829 --> 07:33:51.016
map.  We are that little lady 
with a wrench, because I built 

07:33:51.017 --> 07:33:54.079
the game, I have the wrench.  We
will build a PWA that lives in 

07:33:54.080 --> 07:33:58.623
the castle.  The princess does 
not live in the castle, your 

07:33:58.624 --> 07:34:02.687
users do.  That's where your 
users belong.  Every good game 

07:34:02.688 --> 07:34:07.075
has levels.  Our first level is 
the tutorial.  It's where you 

07:34:07.076 --> 07:34:09.076
figure out how to get 

07:34:14.361 --> 07:34:17.215
by on the game, what dad baddies
we're going to get.  And then 

07:34:17.216 --> 07:34:20.118
you get building blocks, like 
easy puzzles just to get 

07:34:20.119 --> 07:34:22.763
introduced to the game.  And 
then you figure out slightly 

07:34:24.385 --> 07:34:26.385
harder patterns in the game.

07:34:28.466 --> 07:34:30.466
In Zelda, you need to chop all 
the grass and stuff like that.

07:34:32.993 --> 07:34:35.233
And eventually you realize that 
not all peasants are the same, 

07:34:35.234 --> 07:34:37.234
so you have 

07:34:38.295 --> 07:34:40.295
to figure out combo moves to get
through the super hard levels.

07:34:44.025 --> 07:34:46.025
And finally the boss level is 
where we 

07:34:47.322 --> 07:34:49.322
have to ship and deploy the app.

07:34:51.632 --> 07:34:54.520
When we kill the final boss we 
get fame and go on a vacation to

07:34:54.521 --> 07:34:56.536
the Bahamas, and that's where 
you want to be.  

07:35:06.405 --> 07:35:07.345
So let's play PWA adventures.  
Every good game starts with your

07:35:07.346 --> 07:35:09.346
basic 

07:35:14.445 --> 07:35:16.445
We start with it and then

07:35:18.348 --> 07:35:22.614
set of armor and your shield and
weapons.  Our shield and weapon 

07:35:18.348 --> 07:35:20.348
in this game is the PWA starter 
kit.

07:35:22.344 --> 07:35:24.344
we figure out how to use it.

07:35:27.387 --> 07:35:31.653
So, are you ready for the first 
level? That's right.  DOOT DOOT 

07:35:27.387 --> 07:35:28.435
DOOT DOOT DOOT DOOT pew pew pew.
We have to get started in 

07:35:28.436 --> 07:35:30.436
seconds.  Nobody likes tutorials
that last 

07:35:32.379 --> 07:35:33.386
forever and you have go through 
them.  So the goal of PWA 

07:35:33.387 --> 07:35:35.387
starter kit is to let you get 
started in seconds without 

07:35:36.723 --> 07:35:39.579
having to mess around for too 
long.  If you go to the Wiki, 

07:35:39.580 --> 07:35:43.287
the first thing you see is the 
things that PWA gives you and 

07:35:43.288 --> 07:35:46.210
how to get set up.  Once you do 
that, you can go into the 

07:35:46.819 --> 07:35:51.870
advanced levels.  The way you 
get set up is you clone the

07:35:55.434 --> 07:35:57.434
repo, run, and run start to see 
it go.

07:35:58.728 --> 07:36:00.783
If that worked well, you can run
MPM test to see how we do 

07:36:00.784 --> 07:36:02.784
testing and see 

07:36:04.085 --> 07:36:05.937
THAT is passing its tests, and 
then you can run build and serve

07:36:05.938 --> 07:36:10.647
so you can minify your build and
build it for production and test

07:36:10.648 --> 07:36:12.648
the production build.  So when 
you actually start your 

07:36:15.841 --> 07:36:18.102
application, this is what it 
looks like.  It's a small 

07:36:18.103 --> 07:36:20.103
application that has three 
pages.

07:36:22.335 --> 07:36:24.335
One is a stat

07:36:27.724 --> 07:36:29.724
ic template, and the others are 
there so you can get inspired.

07:36:32.221 --> 07:36:34.221
One is a full-blown shopping 
cart 

07:36:35.500 --> 07:36:37.943
where you can buy cheeses from 
San Francisco.  And of course it

07:36:37.944 --> 07:36:42.479
has responsive layouts, because 
all apps need to work on mobile 

07:36:42.480 --> 07:36:44.734
and desktop, and a template that
doesn't have that wouldn't make 

07:36:45.133 --> 07:36:47.612
sense.  Cool.  
    DOOT DOOT DOOT boop boop 

07:36:47.613 --> 07:36:51.502
boop.  That was the tutorial.  
It went super well.

07:36:54.912 --> 07:36:59.306
Now we're confident that this 
starter kit will be a good 

07:36:59.307 --> 07:37:02.588
weapon in our game.  What's 
next? Next are the building 

07:37:02.589 --> 07:37:06.889
blocks.  DOOT DOOT DOOT pew pew 
pew.  Fun fact about noises.

07:37:10.417 --> 07:37:12.905
Jake tried to use noises from a 
video game once, and you're not 

07:37:12.906 --> 07:37:14.906
allowed to.

07:37:17.186 --> 07:37:20.664
So he had to make Street Fighter
noises by mouth.  It gets you 

07:37:20.665 --> 07:37:22.915
everywhere, mouth sounds.  
    The thing that we're testing

07:37:22.916 --> 07:37:24.916
is not the PWA that we want.

07:37:29.434 --> 07:37:31.434
Not everyone is going to have 
the

07:37:33.144 --> 07:37:35.144
lorem ipsum app.

07:37:36.213 --> 07:37:38.254
We want to add our views and 
elements, not the ones that the 

07:37:38.255 --> 07:37:42.153
template comes with.  This is 
our first real level.  If you 

07:37:42.154 --> 07:37:44.649
think about a view, it looks 
like this.  It has components 

07:37:44.650 --> 07:37:47.728
and elements and all of this 
stuff in it.  And all of these 

07:37:47.729 --> 07:37:49.729
components and elements are 
separate.

07:37:52.653 --> 07:37:54.100
We're using components that we 
believe are important for our 

07:37:54.101 --> 07:37:57.364
apps.  They have to be 
lightweight and fast and 

07:37:57.365 --> 07:38:01.508
expressive.  If one element is 
super heavy, the whole page is 

07:38:01.509 --> 07:38:03.509
heavy.

07:38:06.014 --> 07:38:08.645
All of your bandwidth will then 
be going to that element.  It 

07:38:08.646 --> 07:38:10.646
has to be fast.

07:38:13.151 --> 07:38:15.224
Nobody is going to want to hang 
out on your page.  And they have

07:38:15.225 --> 07:38:19.104
to be expressive.  It has to let
you build any view in any 

07:38:19.105 --> 07:38:20.937
element that you want, because 
otherwise it's not going to be 

07:38:20.938 --> 07:38:23.179
really fun to use.  So in order 
to build these elements, 

07:38:26.481 --> 07:38:29.114
we picked a new base class 
called lit element.  This lets 

07:38:29.115 --> 07:38:31.964
you do basically everything, and
it's super small and fast, and 

07:38:31.965 --> 07:38:36.495
it takes advantage of all of the
new features that have arrived 

07:38:36.496 --> 07:38:38.496
in browsers recently.

07:38:42.047 --> 07:38:44.047
You can MPM install it and it's 
built 

07:38:46.761 --> 07:38:49.644
on top of LIT-HTML, a very small
library, like 2 or 3K in total.

07:38:52.738 --> 07:38:57.217
It lets you write as JavaScript 
template literals.  So you can 

07:38:57.218 --> 07:38:59.218
do all of the same things 

07:39:00.311 --> 07:39:03.790
to express any dynamic content 
your element might want.  And it

07:39:03.791 --> 07:39:05.635
does so really, really fast, 
because it knows exactly what 

07:39:05.636 --> 07:39:07.636
you need 

07:39:08.682 --> 07:39:11.154
to render, and it only 
re-updates it when you need to. 

07:39:11.155 --> 07:39:13.155
So it does it this way.

07:39:17.488 --> 07:39:20.158
First, every element reacts to 
changes.  Properties are things 

07:39:20.159 --> 07:39:23.021
that the element cares to 
render.  A value, a click, 

07:39:23.022 --> 07:39:25.510
something like that.  And 
whenever any of these properties

07:39:27.414 --> 07:39:29.466
changes, the render function is 
called.  In this render function

07:39:29.467 --> 07:39:33.383
is the template that your 
element looks like.  So two 

07:39:33.384 --> 07:39:36.232
things might happen when you 
look at this code.

07:39:41.961 --> 07:39:43.595
I have seen that in re-Act.  
You're familiar with this, so 

07:39:43.596 --> 07:39:45.596
you 

07:39:48.291 --> 07:39:52.386
don't have a weird jank when you
do this.  It's a simple way to 

07:39:52.387 --> 07:39:54.387
think about what 

07:39:55.448 --> 07:39:57.298
your state is with and what your
element likes like.  You can 

07:39:57.299 --> 07:39:59.798
write declaratively.  You don't 
have to write listeners on 

07:40:01.851 --> 07:40:04.532
buttons imperatively.  You can 
do everything declaratively 

07:40:04.940 --> 07:40:09.845
here.  What kind of things can 
we do in this render function? 

07:40:09.846 --> 07:40:11.846
You can obviously have static 
content, 

07:40:13.790 --> 07:40:15.790
but you can also have dynamic 
content.

07:40:18.121 --> 07:40:22.442
But all of this is just a 
JavaScript template literal.  

07:40:22.443 --> 07:40:24.443
That means I can write advanced 
expressions in here so I can 

07:40:25.526 --> 07:40:27.526
conditionally render different 
things.

07:40:29.599 --> 07:40:31.644
I can have buttons that have 
in-line event listeners, and all

07:40:31.645 --> 07:40:33.912
of this just works.  
    The important thing here is 

07:40:33.913 --> 07:40:36.771
all of these things only update 
when there is an update.

07:40:40.522 --> 07:40:42.522
When my message updates here, 
only 

07:40:46.983 --> 07:40:48.983
that div re-renders.  It's 
magical.

07:40:51.850 --> 07:40:53.078
When you make it into an 
element, it looks like this.  

07:40:53.079 --> 07:40:57.160
You import it from a module.  
They're not new.  We have a 

07:40:57.161 --> 07:41:01.677
class.  We register it at the 
bottom, define it with a tag, 

07:41:01.678 --> 07:41:03.968
and we do our properties and 
render it with everything else 

07:41:03.969 --> 07:41:08.049
there.  This is the whole base 
of LIT element.  And it works 

07:41:08.050 --> 07:41:13.398
nicely.  You can of course have 
encapsulated styles in there.  

07:41:13.399 --> 07:41:16.061
One of the awesome properties is
you can encapsulate CSS inside 

07:41:16.062 --> 07:41:21.198
of them, and we do this by 
letting you export a style from 

07:41:21.199 --> 07:41:24.061
a module and importing it and 
using the squiggles to import 

07:41:24.062 --> 07:41:26.062
instead of your element.  This 
is native shadow.

07:41:29.236 --> 07:41:32.077
This is not CSS in JS or weird 
things that need 

07:41:32.078 --> 07:41:36.407
transformations.  This is what 
shadow looks like natively and 

07:41:36.408 --> 07:41:38.408
awesomely.

07:41:40.100 --> 07:41:43.386
We have that few, but this is 
not how you build an app.  You 

07:41:43.387 --> 07:41:46.055
need to glue them together and 
put the logic that responds to 

07:41:46.056 --> 07:41:49.557
route changes and stuff like 
that.  When my team was building

07:41:49.558 --> 07:41:56.101
apps, because that's what my 
team does, we build apps.  We 

07:41:56.102 --> 07:41:58.569
were writing the same 
boilerplate code over and over 

07:41:58.570 --> 07:42:01.418
and over again to glue the views
together.  Any time three people

07:42:01.419 --> 07:42:05.933
have to write the same thing and
they're like oh my God, I'm 

07:42:05.934 --> 07:42:07.934
doing this again, that's not a 
good place to be in.

07:42:10.231 --> 07:42:12.490
We created a helper for that 
called PW helper, and it's a 

07:42:12.491 --> 07:42:16.386
bunch of tiny snippets and 
helpers that you can add to your

07:42:16.387 --> 07:42:18.387
app.  You can add them anywhere.

07:42:21.297 --> 07:42:23.350
They're like croutons, delicious
things to SPRINGle in your soup 

07:42:23.351 --> 07:42:25.351
or salad to make it better.

07:42:30.022 --> 07:42:32.022
They live on GitHub and also MPM

07:42:39.425 --> 07:42:43.625
sprinkle in your soup or salad 
to make it better.  They live on

07:42:39.425 --> 07:42:41.425
GitHub and also MPM.  

07:42:43.112 --> 07:42:45.366
You install it and it gives you 
a call back.  That's all the 

07:42:45.367 --> 07:42:47.829
things you have to do.  There is
a network listener that 

07:42:49.877 --> 07:42:52.329
basically gives you a call back 
when you go from online to 

07:42:52.330 --> 07:42:56.243
offline so you can conditionally
render your offline UI only when

07:42:56.244 --> 07:43:00.592
you need it.  There's a bunch of
one-liners like this that you 

07:43:00.593 --> 07:43:02.657
only install with one line.  
There's something that lets you 

07:43:04.906 --> 07:43:06.906
observe media queries, updates 
your 

07:43:10.452 --> 07:43:12.452
Twitter cards, lets you connect 
to Redux.

07:43:14.714 --> 07:43:16.714
They are tiny helpers there to 
make your apps better.  

07:43:19.029 --> 07:43:23.504
DOOT DOOT DOOT DOOT DOOT pew pew
pew! We've assembled our apps.  

07:43:23.505 --> 07:43:25.505
We have these views and elements
and 

07:43:26.566 --> 07:43:28.566
they're glued together with LIT 
elements 

07:43:31.120 --> 07:43:34.151
and PW helpers, so now we're off
to make our own views.  The next

07:43:34.152 --> 07:43:37.437
level is figuring out patterns. 
DOOT DOOT DOOT pew pew pew!

07:43:40.911 --> 07:43:42.138
And this is the time where 
things get a little hard.  We 

07:43:42.139 --> 07:43:45.833
have to level up.  In every game
there's a point where you have 

07:43:45.834 --> 07:43:47.834
to learn a specific pattern.

07:43:48.937 --> 07:43:50.564
In Mario you figure out that you
have to take the shells and 

07:43:50.565 --> 07:43:52.565
throw them at everybody and 
that's how you win.

07:43:56.051 --> 07:43:58.283
And in Zelda, you figure out any
time you see a crate, you have 

07:43:58.284 --> 07:44:03.894
to bop it because there's 
definitely something in there.  

07:44:03.895 --> 07:44:05.895
And also a wall that has cracks.

07:44:07.344 --> 07:44:10.020
In super PW adventures, we learn
about patterns that we can use. 

07:44:10.021 --> 07:44:12.275
Patterns save you time.  Games 
would suck if every single level

07:44:14.287 --> 07:44:17.150
was completely different than 
any other level and you had to 

07:44:17.151 --> 07:44:20.669
re-learn the entire world every 
episode.  That's not how we play

07:44:20.670 --> 07:44:22.670
games.

07:44:23.952 --> 07:44:25.782
Clear patterns help team members
figure out an application 

07:44:25.783 --> 07:44:28.028
quickly because they have seen 
the codes and patterns before.

07:44:31.314 --> 07:44:34.056
The base view class that we 
have, LIT element is present in 

07:44:34.057 --> 07:44:38.155
every single element, which 
means that you can look at every

07:44:38.156 --> 07:44:41.422
one and be like I know this.  
I've seen it before.  It looks 

07:44:41.423 --> 07:44:43.860
like the other ones.  And using 
a pattern is scalable.

07:44:47.316 --> 07:44:49.575
Goal of patterns is to make sure
your code isn't a mess, your 

07:44:49.576 --> 07:44:51.576
structure is there.

07:44:53.647 --> 07:44:55.915
There are patterns that ensure 
your applications are super per 

07:44:55.916 --> 07:44:57.916
forMANT, even 

07:44:59.722 --> 07:45:02.063
though you have 50 3 pages and 
everybody is adding new 

07:45:05.881 --> 07:45:07.881
views because they can

07:45:17.432 --> 07:45:21.698
formant, even though you have 50
3 pages and everybody is adding 

07:45:17.432 --> 07:45:19.880
new views because they can.  
    Redux has an awesome 

07:45:19.881 --> 07:45:23.761
developer community, which means
that every time you have a 

07:45:23.762 --> 07:45:25.604
problem, there's probably a 
solution for it there, and we 

07:45:25.605 --> 07:45:28.039
don't have to find it.  And the 
whole point of a kit is that 

07:45:31.288 --> 07:45:32.516
it's flexible and lets you, 
like, plug in all of your 

07:45:32.517 --> 07:45:36.414
solutions.  So if you don't like
Redux, you can take it out and 

07:45:36.415 --> 07:45:39.922
plug in your own activation 
solution in it.  But just in 

07:45:39.923 --> 07:45:42.594
case you want ours and you don't
know what Redux is, Redux is a 

07:45:44.024 --> 07:45:46.024
small state container.

07:45:47.493 --> 07:45:49.493
It basically is a glorified key 
value 

07:45:51.366 --> 07:45:53.889
player, and that's how it stores
your data.  It's 2K, so it 

07:45:53.890 --> 07:45:58.004
doesn't add anything to the size
of your application.  In 

07:45:58.005 --> 07:46:00.659
particular, Redux is view 
agnostic, which means it works 

07:46:00.660 --> 07:46:02.660
the same in any application you 
use it.

07:46:05.817 --> 07:46:07.817
You can use it in a React app or
view app.

07:46:09.276 --> 07:46:11.913
Redux works the same way behind 
the scenes this makes it really 

07:46:11.914 --> 07:46:14.393
widely used, because it's 
reassuring that all of us 

07:46:16.410 --> 07:46:18.460
building applications in the 
frameworks out there have the 

07:46:18.461 --> 07:46:20.461
same problems all the time, so 
the solutions are really clear 

07:46:20.898 --> 07:46:22.898
and well documented.  

07:46:24.814 --> 07:46:27.666
And in particular, Redux lets 
you time travel.  And if you 

07:46:27.667 --> 07:46:29.667
don't want to take whatever 

07:46:30.736 --> 07:46:33.416
tool lets you time travel on 
principle, then I don't think we

07:46:33.417 --> 07:46:35.875
can ever be friends.  This 
debugging technique where you 

07:46:38.125 --> 07:46:40.224
have your application and you 
install your developer tool, and

07:46:40.225 --> 07:46:42.297
this is the one we use and it's 
documented on the wiki.

07:46:45.766 --> 07:46:47.766
As you're navigating, it records
all 

07:46:49.247 --> 07:46:50.895
of the interactions and states, 
which means you can also rewind 

07:46:50.896 --> 07:46:55.450
time.  If you find a problem in 
your app, it can rewind time to 

07:46:55.451 --> 07:46:57.915
right before it happened and 
check what the state was and 

07:46:57.916 --> 07:47:00.560
what happened to it.  This is 
awesome, because when you have 

07:47:04.301 --> 07:47:07.145
bugs, you don't have to restart 
the dev server, do all the 

07:47:07.146 --> 07:47:11.465
clicks -- oh no.  Start over.  
And so on.  Time travel is 

07:47:11.466 --> 07:47:14.110
amazing for debugging.  The 
premise of Redux is very simple.

07:47:16.768 --> 07:47:19.628
You have your UI, and any data 
that needs to flow through that 

07:47:19.629 --> 07:47:24.316
UI lives in a store, and that 
store is the guardian of that 

07:47:24.317 --> 07:47:26.317
state and no one else can touch 
it.

07:47:27.395 --> 07:47:29.869
If the UI needs bits of that 
state, it can ask for them, but 

07:47:29.870 --> 07:47:32.928
it gets an immutable object.  
It's not the data that actually 

07:47:32.929 --> 07:47:34.929
lives 

07:47:36.395 --> 07:47:38.395
in the store, just the immutable
version of it.

07:47:45.628 --> 07:47:47.628
But if you just had this, you 
would 

07:47:49.348 --> 07:47:54.115
have a lot of code in the store.
What do I say? ABC, always be 

07:47:54.116 --> 07:47:58.671
componentizing.  So Redux has 
the idea of reducers, which are 

07:47:58.672 --> 07:48:00.497
smaller functions that update 
the data for you and put it in 

07:48:00.498 --> 07:48:03.345
the store.  And these functions 
look like this.

07:48:06.792 --> 07:48:07.608
They deal with a small chunk of 
the data, take the previous 

07:48:07.609 --> 07:48:11.945
value, do something to it, and 
return the next value.  This is 

07:48:11.946 --> 07:48:13.946
a counter that updates a 

07:48:16.842 --> 07:48:19.042
value, whether it gets an 
increment or decrement action.  

07:48:19.043 --> 07:48:23.354
That's all.  You can have 
reducers across your application

07:48:23.355 --> 07:48:25.355
depending on your data.

07:48:27.094 --> 07:48:28.921
And then the UI needs to talk to
the reducer, so it dispatches 

07:48:28.922 --> 07:48:30.922
actions.

07:48:32.406 --> 07:48:34.406
This is what I pretend it looks 
like, not Redux.

07:48:36.291 --> 07:48:38.317
If you think about your UI and 
your reducers, the actions that 

07:48:38.318 --> 07:48:41.607
you take on the view layer are 
not necessarily the same actions

07:48:41.608 --> 07:48:44.262
that happen at the store.  If 
you think about logging out of 

07:48:44.263 --> 07:48:50.580
an application, you will press a
button that says log out.  The 

07:48:50.581 --> 07:48:52.581
UI only knows one action, which 
is log-out.

07:48:55.636 --> 07:48:57.636
What happens behind the scenes 
is complicated.

07:49:00.081 --> 07:49:02.555
So the dispatch function is 
there to convert your UI actions

07:49:02.556 --> 07:49:04.622
into what I call data actions.  
I don't know.  I call them.  

07:49:04.623 --> 07:49:10.339
    The top part of the top is 
Redux classic.  There is nothing

07:49:10.340 --> 07:49:12.581
that we have invented here.  
This is Redux straight out of 

07:49:12.582 --> 07:49:15.667
the box.  You can go to the 
Redux site and read all about 

07:49:15.668 --> 07:49:19.795
it.  The bottom part is what is 
interesting to us.  How you 

07:49:19.796 --> 07:49:21.867
connect to your web components 
is kind of interesting and not a

07:49:21.868 --> 07:49:26.348
lot of people have been doing 
it.  Let's talk about that one. 

07:49:26.349 --> 07:49:29.845
You have your element that we've
had before.  We've seen this.  

07:49:29.846 --> 07:49:31.846
This is a lit element, and we 
connect 

07:49:33.342 --> 07:49:36.622
it with a mix in, another one of
the little helpers.  And it 

07:49:36.623 --> 07:49:39.467
basically, when the element 
attaches, it subscribes to the 

07:49:39.468 --> 07:49:41.468
store and 

07:49:43.003 --> 07:49:45.700
when it detaches, it 
unsubscribes from the store.  

07:49:45.701 --> 07:49:47.701
And then you get this call back 
called state change.

07:49:49.791 --> 07:49:51.855
You could write all of this by 
hand, but why write it yourself 

07:49:51.856 --> 07:49:56.351
when you don't have to? You can 
just use a helper.  What happens

07:49:56.352 --> 07:49:58.352
is you update your 

07:49:59.977 --> 07:50:01.494
properties, and this is a 
pattern that we have seen 

07:50:01.495 --> 07:50:05.188
before.  Our element has a 
property.  We take that value 

07:50:05.189 --> 07:50:07.844
and we put in our property.  And
of course, every time we update 

07:50:07.845 --> 07:50:12.327
a property, rendering gets 
called.  So we will re-render 

07:50:12.328 --> 07:50:14.964
the value of this property.  
Pretty cool.  Works pretty well.

07:50:16.816 --> 07:50:18.650
But of course I need to update 
the value in the store somehow, 

07:50:18.651 --> 07:50:22.332
because that's the whole point 
of something that I clicked.  So

07:50:22.333 --> 07:50:24.333
we do that with actions.

07:50:29.853 --> 07:50:31.853
Again, when you click a buttston

07:50:34.455 --> 07:50:36.976
on, it dispatches -- this is 
where lit HTML and lit element 

07:50:36.977 --> 07:50:38.977
are powerful.

07:50:41.099 --> 07:50:43.133
We're not worried if we get into
many updates to the store or we 

07:50:43.134 --> 07:50:45.134
update the 

07:50:46.245 --> 07:50:48.089
value too often, it will be too 
slow, because everything else 

07:50:48.090 --> 07:50:53.221
does not need to be affected by 
the re-rendering.  That's Redux,

07:50:53.222 --> 07:50:55.222
and it scales up really well, 
and a lot of people are using it

07:50:56.282 --> 07:50:58.511
in their applications.  
    So the next one is 

07:50:58.512 --> 07:51:00.512
performance.

07:51:01.569 --> 07:51:05.158
For performance, we have a 
pattern called purple.  It 

07:51:05.159 --> 07:51:07.159
stands for pushing your critical

07:51:08.221 --> 07:51:10.221
resources for the initial route,

07:51:13.305 --> 07:51:15.305
rendering the route, 
pre-caching, lazy 

07:51:16.418 --> 07:51:19.502
loading, and creating if needed.
Purple.  The happy thing is you,

07:51:19.503 --> 07:51:21.559
your browser, and you're 
requesting a view from the 

07:51:23.792 --> 07:51:26.668
server, and the server looks 
like a stack of pancakes because

07:51:26.669 --> 07:51:31.393
if anybody has a better icon, I 
will take it.  Pancakes are 

07:51:31.394 --> 07:51:34.055
delicious, but I don't think 
that's what a server looks like.

07:51:36.091 --> 07:51:38.091
So it will give you view one 
back.

07:51:39.140 --> 07:51:42.248
But also going to figure out 
that you need other resources.  

07:51:42.249 --> 07:51:45.104
Didn't update the slide in time.
So it's going to push to you 

07:51:45.105 --> 07:51:49.832
other resources that it knows it
needs.  It does this on the push

07:51:49.833 --> 07:51:52.550
manifest.  It will look at me 
and be like I need this view.

07:51:55.652 --> 07:51:57.465
And you will ask for the other 
two JavaScript files, and it 

07:51:57.466 --> 07:52:03.031
will give them to you.  So you 
don't have to do a round trip to

07:52:03.032 --> 07:52:05.275
the pancake stack when you need 
them.  The browser is happy and 

07:52:05.276 --> 07:52:10.178
it will render that view and 
install a service worker.  The 

07:52:10.179 --> 07:52:12.033
service worker is going to cache
all of the views that you might 

07:52:12.034 --> 07:52:15.330
need later just in case you do. 
So that when you do actually 

07:52:15.331 --> 07:52:19.655
request one of these views, 
they're already locally in the 

07:52:19.656 --> 07:52:24.147
service worker.  You don't have 
to go back to the stack of 

07:52:24.148 --> 07:52:26.148
pancakes, which is always slow 

07:52:27.215 --> 07:52:30.904
because you need to get the 
Nutella and maple syrup.  So 

07:52:30.905 --> 07:52:34.400
then in your code you get to 
lazy load that code.  Don't do 

07:52:34.401 --> 07:52:37.262
things unless your user asks for
them.  Always lazy load 

07:52:37.263 --> 07:52:41.962
everything, always lazy load it 
from a cache is even better.  In

07:52:41.963 --> 07:52:43.963
your code, that looks like a 
dynamic import.

07:52:46.044 --> 07:52:48.481
That's how we dynamically import
these modules.  So this is the 

07:52:48.482 --> 07:52:50.482
action creator for a 

07:52:52.750 --> 07:52:55.009
view, and a view is what the 
router calls back and it will be

07:52:55.010 --> 07:52:58.331
like oh, you need this new piece
of code? I'm going to 

07:52:58.332 --> 07:53:00.332
dynamically import it.

07:53:02.560 --> 07:53:05.931
Because the modules are loaded 
magically, it will get it from 

07:53:05.932 --> 07:53:09.613
your local module cache.  That's
awesome.  That view might have 

07:53:09.614 --> 07:53:12.716
reducers in it, because it might
touch a piece of data that you 

07:53:12.717 --> 07:53:15.560
haven't seen before.  We've 
loaded a way to load the 

07:53:16.403 --> 07:53:20.379
reducers lazily.  This is not 
Redux standard, but comes from 

07:53:20.380 --> 07:53:22.615
one of the helpers.  You can add
magic to your Redux store 

07:53:28.136 --> 07:53:29.392
so you can lazily add reducers 
and thus the PRPL pattern is 

07:53:29.393 --> 07:53:31.393
complete.

07:53:32.685 --> 07:53:35.727
That's how we deal with 
application status performance. 

07:53:35.728 --> 07:53:37.728
If they work for two views, they
work 

07:53:38.995 --> 07:53:40.820
for all 530 views because you 
reapply the same pattern over 

07:53:40.821 --> 07:53:42.821
and over and over again.

07:53:44.100 --> 07:53:47.763
All of your views are lazy 
loaded, so it doesn't matter.  

07:53:47.764 --> 07:53:49.188
These are only two that we have 
in PW starter kit.  There's more

07:53:49.189 --> 07:53:53.905
of them.  And you can add more 
patterns and plug and play them 

07:53:53.906 --> 07:53:55.906
as your application needs them 
and scales up.  

07:53:57.154 --> 07:54:00.256
DOOT DOOT DOOT DOOT DOOT.  We 
save time.  I don't know what my

07:54:00.257 --> 07:54:02.294
winning sound is, and I was 
thinking about it, and I don't 

07:54:04.335 --> 07:54:06.380
think I'm allowed to play one.  
Every time we have a problem, we

07:54:06.381 --> 07:54:11.479
have a solution for most of 
them, so that's awesome.  We're 

07:54:11.480 --> 07:54:15.363
so close to getting to the 
castle.  DOOT DOOT DOOT DOOT 

07:54:15.364 --> 07:54:17.364
DOOT DOOT pew pew pew.  

07:54:19.421 --> 07:54:22.285
The next part is learning the 
combo moves.  Most games you 

07:54:22.286 --> 07:54:25.184
have many bosses.  You have 
puzzles that are just a little 

07:54:25.185 --> 07:54:27.185
bit harder.

07:54:28.237 --> 07:54:30.505
In Zelda you had the water 
temple that were all of the 

07:54:30.506 --> 07:54:33.795
things that you had seen before 
and harder with new things.  And

07:54:33.796 --> 07:54:37.098
the same thing happens when you 
build an app.  The things that 

07:54:37.099 --> 07:54:41.162
you know from PW starter kit are
that we have a base class, lit 

07:54:41.163 --> 07:54:46.080
element.  We have a responsive 
UI, because they come with app 

07:54:46.081 --> 07:54:48.081
elements that build a 

07:54:49.152 --> 07:54:50.599
responsive UI for you, we have 
PW helpers that glue things 

07:54:50.600 --> 07:54:53.446
together and make our 
application easier to use.

07:54:57.329 --> 07:54:59.158
We have Redux and PRPL, but 
we're going to figure out that 

07:54:59.159 --> 07:55:02.060
not all apps are the same.  At 
some point you're going to have 

07:55:02.061 --> 07:55:05.974
a problem that the PW starter 
kit template is not going to 

07:55:05.975 --> 07:55:08.864
solve.  I promise you this one. 
So it's important for a kit to 

07:55:08.865 --> 07:55:15.060
give you the flexibility to 
deviate from these decisions.  

07:55:15.061 --> 07:55:16.662
Even though we're comfortable 
with our decisions, you may not 

07:55:16.663 --> 07:55:19.155
necessarily agree with them.  So
we have other templates that you

07:55:19.570 --> 07:55:24.688
can start with.  Templates like 
the Redux one is one you have 

07:55:24.689 --> 07:55:26.157
seen, but there's a template 
that looks identical and has the

07:55:26.158 --> 07:55:31.255
same amount of classes, but 
doesn't use Redux.  It just uses

07:55:31.256 --> 07:55:33.315
unidirectional data flow.  Maybe
that's what you have learned and

07:55:34.541 --> 07:55:36.541
you're comfortable with.  We 
also have a template that looks 

07:55:38.863 --> 07:55:40.863
slightly different rather than 

07:55:42.318 --> 07:55:44.318
converting the links from a line
to a responsive UI.

07:55:46.627 --> 07:55:48.270
We have a consistent drawer that
stays there when your screen is 

07:55:48.271 --> 07:55:53.195
wide.  We have a template that 
has no fancy UI whatsoever, 

07:55:53.196 --> 07:55:55.196
because you may already 

07:55:57.681 --> 07:55:59.718
have an idea of what your UI 
looks like and it's probably not

07:55:59.719 --> 07:56:05.235
pink underlines.  So you can 
start from that one.  These are 

07:56:05.236 --> 07:56:07.480
all documented in the wiki, and 
they're in great detail and you 

07:56:07.481 --> 07:56:09.481
can pick and choose from them.

07:56:12.859 --> 07:56:15.801
There's anned a VANGS advanced 
page.

07:56:18.917 --> 07:56:22.403
We have code into the wiki that 
you can pick and choose.  Things

07:56:22.404 --> 07:56:24.404
like what do I do about a CO 

07:56:25.901 --> 07:56:27.901
and how do I beam my 
application?

07:56:29.166 --> 07:56:31.166
But that's still not enough.

07:56:32.866 --> 07:56:34.866
So, our team has been building 

07:56:35.923 --> 07:56:37.342
applications with PWA starter 
kit, and we built three new 

07:56:37.343 --> 07:56:39.343
ones.  The reason we built these
is we could 

07:56:42.255 --> 07:56:44.255
have added all of these features
to PWA 

07:56:45.944 --> 07:56:47.989
starter kit, but it would have 
been horrifyingly full of 

07:56:47.990 --> 07:56:49.990
features.

07:56:53.330 --> 07:56:55.330
I recently started playing sky 
rimSky Rim.

07:57:01.882 --> 07:57:05.229
You can't hoard all of the cut 
kettles. -shop is an application

07:57:05.230 --> 07:57:07.888
you may have seen before.  It's 
your standard e commerce site 

07:57:11.347 --> 07:57:13.347
where you can buy things, add 
things to 

07:57:16.439 --> 07:57:18.439
a cart, I will do some crypto 
mining and it will be very cool.

07:57:21.171 --> 07:57:23.171
We have these apps that we have 
been building.

07:57:26.433 --> 07:57:28.433
We have an app that's you read 
hacker names.

07:57:31.623 --> 07:57:33.662
We let you search the 
Googlebooks APIs, and we have 

07:57:33.663 --> 07:57:35.499
one that will let you teach 
yourself any language that you 

07:57:35.500 --> 07:57:38.189
want.  We think of these apps as
shells of 

07:57:41.277 --> 07:57:43.277
armor that you can pick and 
choose features from.

07:57:48.110 --> 07:57:50.110
If you played Zelda, you have 
layers of armor.

07:57:54.666 --> 07:57:56.288
You don't use the armors for 
swimming when you're running 

07:57:56.289 --> 07:58:00.148
around.  You pick the one 
feature that you want and you 

07:58:00.149 --> 07:58:02.149
add it to your application.  

07:58:04.845 --> 07:58:05.911
The flash cards app teaches you 
about theming.  It looks 

07:58:05.912 --> 07:58:07.912
completely different.

07:58:10.117 --> 07:58:11.543
It has speech synthesis, and it 
uses local storage to save your 

07:58:11.544 --> 07:58:16.081
local state.  And that's because
it's a game.  You have to start 

07:58:16.082 --> 07:58:18.082
from where you left off every 
time you refresh it.  

07:58:20.975 --> 07:58:23.210
The books app teaches you about 
authentication using the Google 

07:58:23.211 --> 07:58:26.079
sign-in API.  It uses speech 
recognition, because 

07:58:32.374 --> 07:58:32.759
you can read the words out loud 
into the books app.  It has 

07:58:32.760 --> 07:58:34.760
fancy loading UI.

07:58:36.410 --> 07:58:37.432
These are the cards where we 
pretend the content is there so 

07:58:37.433 --> 07:58:39.433
it gives you an 

07:58:42.576 --> 07:58:44.576
indicator of what the layout 
might look 

07:58:46.342 --> 07:58:48.342
like.  

07:58:52.073 --> 07:58:54.073
You can get a giant piece of 
JSON.

07:58:55.942 --> 07:58:57.942
It uses favorites and index DB 
to save them.

07:59:00.069 --> 07:59:01.509
Any of the features -- if these 
are any of the features that you

07:59:01.510 --> 07:59:03.510
need, you 

07:59:05.385 --> 07:59:07.815
can look at these apps, you can 
look at PWA, and you will feel 

07:59:07.816 --> 07:59:12.148
right at home.  They have the 
same structure and naming scheme

07:59:12.149 --> 07:59:13.980
and patterns across all of the 
apps.  And they're all 

07:59:13.981 --> 07:59:15.981
documented here, and 

07:59:17.032 --> 07:59:19.032
there's links to all of the 
repos and demos.

07:59:21.929 --> 07:59:23.929
They're all open-sourced on the 
wiki, 

07:59:26.418 --> 07:59:29.718
and you can use them when ever 
you need to.  DOOT DOOT DOOT 

07:59:29.719 --> 07:59:33.030
DOOT DOOT pew pew pew.  We got a
power up.  The only thing that's

07:59:33.031 --> 07:59:35.031
left is the final level.

07:59:37.946 --> 07:59:39.994
DOOT DOOT DOOT boo boo boo.  
    We have to actually give our

07:59:39.995 --> 07:59:42.836
app to people.  It's great that 
you built an awesome 

07:59:45.855 --> 07:59:50.143
app app that runs locally.  We 
started with a template.  That 

07:59:50.144 --> 07:59:53.671
was our first level.  We 
customize it.  We understood how

07:59:53.672 --> 07:59:55.672
it worked.

07:59:59.779 --> 08:00:02.493
We used things like Redux and 
PRPL and machine learning, but 

08:00:02.494 --> 08:00:07.389
we got ship it.  That is our 
final level.  We have got defeat

08:00:07.390 --> 08:00:11.282
the final boss.  That is 
deploying.  In order for you to 

08:00:11.283 --> 08:00:13.303
do this, you need confidence, 
and you need confidence the 

08:00:15.569 --> 08:00:17.810
first time you deploy it and 
every time you redeploy it over 

08:00:17.811 --> 08:00:22.087
and over again.  If my app works
today and I do an update and it 

08:00:22.088 --> 08:00:24.088
doesn't work again, I 

08:00:25.154 --> 08:00:27.186
promise you your users will be 
pretty horrified.  And testing 

08:00:27.187 --> 08:00:29.451
is the only thing that will give
you the confidence that every 

08:00:32.723 --> 08:00:35.570
one of your redeploys are going 
to be successful.  Testing is 

08:00:35.571 --> 08:00:38.438
like the shields to protect you 
from the monsters in the game, 

08:00:38.439 --> 08:00:40.439
and 

08:00:42.263 --> 08:00:44.263
the MONSer s

08:00:47.996 --> 08:00:49.239
monsters are the rage of your 
users when you break their 

08:00:49.240 --> 08:00:51.240
calendar.  

08:00:53.118 --> 08:00:55.191
We tell you where to put the 
tests.  We have unit tests and 

08:00:55.192 --> 08:01:00.148
integration tests, and they both
serve very different purposes.  

08:01:00.149 --> 08:01:02.991
Unit tests make sure that 
functional elements in your 

08:01:02.992 --> 08:01:06.281
application stay correct between
commits.  A button is clickable 

08:01:06.282 --> 08:01:08.730
and brings up this dialogue all 
the time on all of the browsers.

08:01:10.771 --> 08:01:12.195
Integration tests, on the other 
hand, makes sure that from the 

08:01:12.196 --> 08:01:15.733
beginning to the end, your 
application looks the same as it

08:01:15.734 --> 08:01:17.734
used to be.  You don't 
necessarily click all of the 

08:01:17.984 --> 08:01:19.984
buttons.

08:01:21.883 --> 08:01:23.883
It's a double sanity check that 
everything looks okay.

08:01:27.874 --> 08:01:29.874
For unit testing, we use mocha 
MWCT, 

08:01:30.951 --> 08:01:33.430
and you can run it locally and 
on Travis, but in particular, 

08:01:33.431 --> 08:01:35.720
we've added accessibility 
testing to unit testing.

08:01:39.540 --> 08:01:41.540
You do this via

08:01:47.067 --> 08:01:49.067
AXE-CORE, an awesome library 
written

08:01:52.178 --> 08:01:54.178
by the DeQueue team

08:01:59.414 --> 08:02:01.463
.  This element can be a button 
or an entire view.  In this 

08:02:01.464 --> 08:02:03.710
case, I have a button that 
doesn't have a title and I get 

08:02:03.711 --> 08:02:05.338
all of its violations.  
Accessibility is a feature that 

08:02:05.339 --> 08:02:07.339
you don't really want to break.

08:02:13.441 --> 08:02:15.961
For integration testing, we use 
PUPT puppeteer.

08:02:21.416 --> 08:02:23.416
It lets you spin up a hidless 
version

08:02:24.976 --> 08:02:27.032
headless version of Chrome, and 
we use it for screen shot 

08:02:27.033 --> 08:02:30.926
testing.  We look at what all of
the pages look like and we 

08:02:30.927 --> 08:02:32.576
compare it to what we think the 
pages should look like 

08:02:32.577 --> 08:02:34.577
correctly, 

08:02:37.267 --> 08:02:39.353
and if they do, you're A-okay.  
And of course they run on 

08:02:39.354 --> 08:02:41.589
Travis.  You can use circle CI 
or whatever you 

08:02:45.435 --> 08:02:47.268
want, but you can add your tests
to continuous integration, so 

08:02:47.269 --> 08:02:50.342
you're always confident that 
none of your commits broke your 

08:02:50.343 --> 08:02:53.003
application.  
    Now that this part was easy 

08:02:53.004 --> 08:02:55.004
and 

08:02:56.260 --> 08:02:58.340
we're confident and fired up to 
fight the boss, we have to 

08:02:58.341 --> 08:03:00.973
actually do the fighting.  You 
have to actually deploy it.

08:03:05.286 --> 08:03:07.286
PW starter kit took care of 
this, too.

08:03:08.761 --> 08:03:11.421
We have npm build which builds 
and minifies, and then you have 

08:03:11.422 --> 08:03:13.422
NPM run 

08:03:14.730 --> 08:03:16.730
serve which lets you test 
locally.

08:03:18.454 --> 08:03:20.876
And npm run build looks simple, 
but it does a lot of things 

08:03:20.877 --> 08:03:22.877
behind the scenes.

08:03:24.987 --> 08:03:26.987
It minifies, builds the service 

08:03:28.230 --> 08:03:30.279
workers so you can pre-cache, 
and then there's two kinds of 

08:03:30.280 --> 08:03:32.322
builds you can generate.  You 
can build static builds so you 

08:03:32.323 --> 08:03:34.323
can 

08:03:36.424 --> 08:03:38.424
upload them to things like 
Firebase 

08:03:42.382 --> 08:03:45.058
hosting, or you can run dynamic 
builds with prpl-server.  It's a

08:03:45.059 --> 08:03:47.316
production optimized server, a 
node server that you can install

08:03:47.317 --> 08:03:49.800
on your hosting if you have 
access to it.

08:03:53.273 --> 08:03:54.488
It serves the optimal bundles to
the browsers that request them. 

08:03:54.489 --> 08:03:56.489
So that means that you can have 
multiple bundles.

08:04:00.019 --> 08:04:01.042
This is the bundle for IE11.  
And this is the bundle for 

08:04:01.043 --> 08:04:03.043
browsers 

08:04:04.508 --> 08:04:06.508
can dynamic imports, and this is
for 

08:04:08.682 --> 08:04:10.729
things like Firefox, and prpl 
server will look at the browser 

08:04:10.730 --> 08:04:12.730
and be like oh, 

08:04:13.814 --> 08:04:14.226
I see, these are the things you 
need.  Here is the bundle that 

08:04:14.227 --> 08:04:16.227
works for you.

08:04:17.478 --> 08:04:19.478
The reason why this is awesome 
is it 

08:04:23.466 --> 08:04:25.466
means you don't have to deploy 
any S5 and serve it to Chrome.

08:04:27.378 --> 08:04:28.995
We can just give the correct 
bundle to every browser as they 

08:04:28.996 --> 08:04:30.996
need it.

08:04:32.066 --> 08:04:34.066
This is awesome and powerful and
improves your performance.  

08:04:36.817 --> 08:04:39.439
And once you do this, once you 
run npm run build, you will 

08:04:39.440 --> 08:04:42.769
notice amazing lighthouse 
scores, because all of the heavy

08:04:42.770 --> 08:04:44.770
lifting and performance work was

08:04:46.670 --> 08:04:48.670
already taken care of by the 
starter kit patterns.

08:04:49.730 --> 08:04:52.410
There was really good armor, so 
the deploying monster couldn't 

08:04:52.411 --> 08:04:54.411
attack you.

08:04:56.492 --> 08:04:58.563
And you improve 97 to 100 by 
adding more lazy loading.  But 

08:04:58.564 --> 08:05:01.407
if you put it into a template, 
it will be too heavy for 

08:05:01.408 --> 08:05:03.408
everyday use.  We beat our final
boss.

08:05:11.226 --> 08:05:13.226
DOOT DOOT DOOT pew pew pew whoo 
weeeee.

08:05:14.504 --> 08:05:16.962
We managed to deploy an entire 
app from start to finish in 38 

08:05:16.963 --> 08:05:21.278
minutes.  We have finished our 
thing.  We can go to the final 

08:05:21.279 --> 08:05:26.153
castle where we're showered with
candy and cake and sugar.  This 

08:05:26.154 --> 08:05:28.154
has been my game.  I hope you 
liked it.

08:05:30.293 --> 08:05:32.494
I hope you try PWA starter kit 
and I hope you tell us when you 

08:05:32.495 --> 08:05:38.482
build something with us.  Thank 
you so much for watching this.  

08:05:42.292 --> 08:05:44.292
[ Applause ] 

08:24:59.169 --> 08:25:01.869
Realtime captions will appear on
these screens... 

08:28:23.129 --> 08:28:27.279
   &gt;&gt; Hello, everyone, I lead 
developer relations for the 

08:28:27.280 --> 08:28:29.280
angular team.

08:28:32.604 --> 08:28:36.296
I'm excited to be back here at 
Google I/O.  I'm excited to talk

08:28:36.297 --> 08:28:38.297
about some of the 

08:28:45.361 --> 08:28:47.361
new things in angular

08:28:51.859 --> 08:28:52.846
.  We're going to talk about the
momentum we have been building 

08:28:52.847 --> 08:28:54.847
over the 

08:28:58.858 --> 08:29:00.861
last year, what it's like to be 
an angular developer today, and 

08:29:00.862 --> 08:29:04.928
we will give you a sneak peek 
into some of the future things 

08:29:00.862 --> 08:29:02.915
we're working on to make angular
better.  Let's get started 

08:29:02.916 --> 08:29:04.916
talking about 

08:29:06.894 --> 08:29:08.884
momentum.  The angular team 
talks about three values in 

08:29:08.885 --> 08:29:11.134
particular.  We talk about apps 
that users love to use.

08:29:14.454 --> 08:29:17.115
At the end of the day that's why
we're building software.  We're 

08:29:17.116 --> 08:29:18.951
trying to build great user 
experiences for every person 

08:29:18.952 --> 08:29:20.952
that comes to one of our 
applications trying to do 

08:29:21.191 --> 08:29:26.100
something.  We also care about 
developers and making sure that 

08:29:26.101 --> 08:29:28.392
we have apps that developers 
love to build.  Developer 

08:29:28.393 --> 08:29:30.659
experience is so critical when 
it comes to productivity and 

08:29:30.660 --> 08:29:34.559
when it comes to maximizing the 
outcomes that developers are 

08:29:34.560 --> 08:29:36.560
able to deliver.  Lastly, but 
not least, we talk about a 

08:29:38.661 --> 08:29:41.292
community where everyone feels 
welcome.  This is really 

08:29:41.293 --> 08:29:43.293
critical to the Angular team, 
because over the last few years,

08:29:45.172 --> 08:29:47.172
we've only been successful 
because we 

08:29:48.251 --> 08:29:50.251
have a huge community and 
eco-system and 

08:29:51.335 --> 08:29:52.986
it's been building around 
angular, not just the efforts 

08:29:52.987 --> 08:29:55.231
that we're creating.  So let's 
reflect a little bit on the 

08:29:57.079 --> 08:29:59.511
growth of that community over 
the last few months.  If you 

08:29:59.512 --> 08:30:02.136
look back at the end of last 
year, you can see some really 

08:30:05.598 --> 08:30:07.598
interesting numbers

08:30:16.471 --> 08:30:18.471
.  We estimate that 90% are 
built behind 

08:30:19.551 --> 08:30:21.551
the firewall.

08:30:25.448 --> 08:30:27.448
So the best stand-in is docs 
traffic

08:30:35.302 --> 08:30:37.942
.  We're also very excited that 
starting this year, we just 

08:30:37.943 --> 08:30:39.943
recently hit 1.

08:30:42.038 --> 08:30:44.276
25 million 30-day actives on our
doc site.  This is a huge amount

08:30:44.277 --> 08:30:49.205
of growth, and we're very, very 
thankful for the new developers 

08:30:49.206 --> 08:30:51.206
that are picking up Angular and 
getting started with it.  

08:30:53.127 --> 08:30:55.127
There's a lot of great 
applications built with Angular.

08:30:57.277 --> 08:30:59.277
And I want to reflect on a few 
of them.

08:31:01.985 --> 08:31:06.271
GrubHub is an awesome app about 
driving great user experiences. 

08:31:06.272 --> 08:31:08.272
They use Angular today, and they
are 

08:31:11.356 --> 08:31:12.982
looking at server side rendering
and progressive web 

08:31:12.983 --> 08:31:14.983
applications.  

08:31:17.426 --> 08:31:19.426
If you look at

08:31:25.619 --> 08:31:27.619
the Allianz fund universe, 
Angular is a 

08:31:30.461 --> 08:31:32.461
great choice for things like 
this

08:31:35.397 --> 08:31:37.397
.  And so, having a good, rich 

08:31:40.055 --> 08:31:42.055
maintainable user experience is 
critical

08:31:46.690 --> 08:31:48.690
.  When you visit the article 
page.

08:31:50.370 --> 08:31:52.445
You're actually visiting an 
angular application.  Not only 

08:31:52.446 --> 08:31:54.465
do they do this on the client 
side of the application, but 

08:31:54.466 --> 08:31:58.616
they also do server side 
rendering.  One of the reasons 

08:31:58.617 --> 08:32:00.673
we love to highlight Forbes is 
they participated 

08:32:03.767 --> 08:32:05.767
and collaborated with us to 
build out 

08:32:07.841 --> 08:32:09.490
angular universal, which is our 
answer to server side rendering.

08:32:12.567 --> 08:32:14.567
We also can't forget about 
Google.

08:32:15.641 --> 08:32:17.509
There are over 600 applications 
and projects within Google that 

08:32:17.510 --> 08:32:19.510
use angular.

08:32:21.567 --> 08:32:24.242
Among them, applications like 
Google shopping express, and 

08:32:24.243 --> 08:32:28.775
more.  One of the reasons we 
talk about Google using Angular 

08:32:28.776 --> 08:32:30.776
is it's part of our validation 
strategy.

08:32:32.826 --> 08:32:36.566
While Angular is developed 
completely open source, every 

08:32:36.567 --> 08:32:39.444
line of code goes through GitHub
and gets merged into Angular, we

08:32:42.474 --> 08:32:45.396
also do a level of validation.  
So every commit before it gets 

08:32:45.397 --> 08:32:48.349
merged into master is actually 
validated against all 600 plus 

08:32:48.350 --> 08:32:50.999
applications within Google to 
ensure that it's going to 

08:32:51.000 --> 08:32:53.242
continue working.  And actually 
on the Angular team, we 

08:32:56.254 --> 08:32:57.523
have an interesting challenge.  
Every time we want to make a 

08:32:57.524 --> 08:33:00.580
change to Angular, we're 
responsible if we break any of 

08:33:00.581 --> 08:33:03.389
those applications.  So we're 
very cognizant of when we 

08:33:06.533 --> 08:33:07.754
need to make a change to 
Angular, the impact that has on 

08:33:07.755 --> 08:33:09.755
other developers and 

08:33:11.253 --> 08:33:13.291
the work that it is going to 
cause those developers to stay 

08:33:13.292 --> 08:33:15.292
Up to date.

08:33:17.158 --> 08:33:18.797
We're thankful for the huge 
amount of meet-ups and groups 

08:33:18.798 --> 08:33:23.139
sharing passion and knowledge 
about Angular.  There are over 

08:33:23.140 --> 08:33:25.140
700 groups according to medium.

08:33:26.153 --> 08:33:28.153
com

08:33:29.510 --> 08:33:31.510
.  One of the ways to get 
connected is through Angular.

08:33:32.771 --> 08:33:34.771
meetup.com.  No matter where you
are in the world, 

08:33:37.717 --> 08:33:39.774
you can probably take advantage 
of an Angular community nearby. 

08:33:43.461 --> 08:33:45.461
We also look to a lot of 
different 

08:33:46.964 --> 08:33:47.579
conferences to coast the Angular
team.  One of the things that 

08:33:47.580 --> 08:33:49.580
not a lot of people know is 
those conferences are not 

08:33:52.289 --> 08:33:54.289
put on by the team, they are put
on by 

08:33:55.784 --> 08:33:57.784
awesome community members who 
get invites to participate.

08:34:01.391 --> 08:34:04.434
One of the conferences we liked 
was NG Atlanta.  One of the 

08:34:04.435 --> 08:34:06.863
things they focused on as part 
of their speaker line-up was 

08:34:09.339 --> 08:34:12.008
including underrepresented 
groups and speakers.  Their 

08:34:12.009 --> 08:34:14.009
focus on making sure they had 

08:34:15.309 --> 08:34:17.377
the top-notch talent that 
reflected the communities that 

08:34:17.378 --> 08:34:22.076
they serve was really amazing, 
and we would love for this to be

08:34:22.077 --> 08:34:24.077
a model that other communities 
and 

08:34:25.093 --> 08:34:27.093
organizations adopt

08:34:32.698 --> 08:34:33.719
.  This is an organization to 
training developers and making 

08:34:33.720 --> 08:34:38.272
it easier to get entrance into 
this amazing technology industry

08:34:38.273 --> 08:34:40.273
using technologies like angular.

08:34:42.430 --> 08:34:42.831
They are having a meet-up this 
Friday.  Unfortunately it's 

08:34:42.832 --> 08:34:44.832
full.  If you're interested in 
having one of 

08:34:47.609 --> 08:34:49.438
-- or co-organized one of these 
events if you're interested in 

08:34:49.439 --> 08:34:54.349
getting involved, go to NG 
girls.org and try to get 

08:34:54.350 --> 08:34:56.383
involved.  This is a great cause
and we love to support it.  

08:34:59.875 --> 08:35:01.875
We also talk about how the 
Angular 

08:35:03.590 --> 08:35:03.992
team has deep partnerships with 
a lot of communities across the 

08:35:03.993 --> 08:35:06.849
eco-system.  On one end of the 
world, we've got 

08:35:10.059 --> 08:35:15.032
things like webpack.  We worked 
to make sure we were getting the

08:35:15.033 --> 08:35:17.033
capabilities we need and making 
sure 

08:35:20.308 --> 08:35:23.253
that Angular was able to take 
advantage of the latest webpack.

08:35:25.292 --> 08:35:27.292
We have dependencies on projects
like RxJS.

08:35:30.346 --> 08:35:32.346
We really want that to stay as 
an 

08:35:34.540 --> 08:35:35.569
independent project and support 
it and collaborate with it to 

08:35:35.570 --> 08:35:37.570
make sure we're helping to push 
the web forward.  

08:35:40.546 --> 08:35:42.546
Has anyone seen STAX stack 
blitz?

08:35:43.572 --> 08:35:45.572
If you haven't seen it, it's a 

08:35:49.273 --> 08:35:51.273
web-based IDE that handles 
anything from

08:35:55.025 --> 08:35:56.473
npm downloads to -- one of the 
greatest features is that you 

08:35:56.474 --> 08:35:58.474
can point it at an 

08:36:00.130 --> 08:36:02.130
existing GitHub

08:36:04.469 --> 08:36:06.469
repository that has ANG angular

08:36:11.076 --> 08:36:12.524
has an angular CLI dependencies.
    We're working closely with 

08:36:12.525 --> 08:36:14.525
teams 

08:36:17.427 --> 08:36:20.079
like NativeScript, building 
applications justing JavaScript 

08:36:20.080 --> 08:36:25.432
and TypeScript, and rendering 
out to native widgets on iOS and

08:36:25.433 --> 08:36:27.433
Android.

08:36:28.786 --> 08:36:31.649
We're working closely with the 
NativeScript team.  We see a 

08:36:31.650 --> 08:36:34.103
future where the native script 
tooling can be embedded directly

08:36:35.313 --> 08:36:37.313
into our CLI to make a single 
experience 

08:36:38.930 --> 08:36:40.849
that allows developers to take 
their applications further.  

08:36:40.850 --> 08:36:42.913
    So we talked about the 
momentum of angular, and now I 

08:36:42.914 --> 08:36:46.596
want to talk about some of the 
reasons why developers really 

08:36:46.597 --> 08:36:48.434
like the things that we're 
doing.  And one of the things 

08:36:48.435 --> 08:36:52.151
that we hear most is that they 
really like our opinionated 

08:36:52.152 --> 08:36:54.461
integrated set of tools.  I'm 
going to go through a few of 

08:36:54.462 --> 08:36:59.432
these tools that developers 
really like using.  The first 

08:36:59.433 --> 08:37:01.433
one that most people are 

08:37:02.739 --> 08:37:05.413
going to touch is the Angular 
CLI.  It's built to take care of

08:37:05.414 --> 08:37:07.414
common 

08:37:09.447 --> 08:37:11.393
tasks and making things you want
to do, allowing you to do them 

08:37:11.394 --> 08:37:13.394
faster.

08:37:16.111 --> 08:37:16.747
There are things like NG new, 
including things like tests, 

08:37:16.748 --> 08:37:21.678
ensuring that your application 
as you continue to scale it out 

08:37:21.679 --> 08:37:23.679
is justable and maintainable.

08:37:24.727 --> 08:37:26.727
We have commands like ng 
generate.

08:37:28.392 --> 08:37:30.392
It takes your application and we
can 

08:37:31.451 --> 08:37:32.067
add things to it like a 
component.  We have ng serve 

08:37:32.068 --> 08:37:34.068
where we will give 

08:37:36.771 --> 08:37:39.474
you a live dev server built on 
top of webpack that will allow 

08:37:39.475 --> 08:37:42.536
you to see your changes as soon 
as you hit file save.  And we 

08:37:42.537 --> 08:37:44.799
have ng build which takes our 
knowledge, takes your 

08:37:44.800 --> 08:37:48.263
application and builds it in a 
way that is redistributable and 

08:37:48.264 --> 08:37:52.148
usable.  One of the things under
the hood of the CLI that we're 

08:37:52.149 --> 08:37:57.260
seeing a huge amount of adoption
of is called schematics.  They 

08:37:57.261 --> 08:37:59.261
are what we use under the hood 
to 

08:38:00.531 --> 08:38:01.973
make the changes when you use 
something like NG new or 

08:38:01.974 --> 08:38:05.241
generate.  It's a really 
powerful because it can run any 

08:38:05.242 --> 08:38:07.242
code that you want, basically.

08:38:08.579 --> 08:38:10.579
When I run ng generate component
my 

08:38:16.020 --> 08:38:16.428
component, we're usie inging 
schematics under the hood to do 

08:38:16.429 --> 08:38:19.066
that.  We're also updating some 
of the files in your 

08:38:19.067 --> 08:38:21.067
application.

08:38:22.172 --> 08:38:24.861
So when I generate a new 
component, I'm going to get all 

08:38:24.862 --> 08:38:26.862
the files, the CSS, the HTML, 
the TypeScript for that 

08:38:29.398 --> 08:38:31.219
component, but I will also get 
my module updates so there's 

08:38:31.220 --> 08:38:34.271
correct references to the 
application.  We don't do this 

08:38:34.272 --> 08:38:39.091
with regular expression, but AST
parsing.  So we look at the 

08:38:39.092 --> 08:38:41.183
syntax tree of your application 
and make safe changes with it.

08:38:45.506 --> 08:38:47.506
We do the same thing with ng 
new.

08:38:48.776 --> 08:38:50.776
And there's other examples of 
schematics, too.

08:38:53.280 --> 08:38:55.280
Using a schematic, you can 
create an 

08:38:59.849 --> 08:39:02.274
ng generate command, create a 
local API and encorporate a 

08:39:02.275 --> 08:39:06.172
service.  We think schematics is
an open platform that anyone can

08:39:06.173 --> 08:39:08.173
use, and we 

08:39:09.242 --> 08:39:11.242
will take it much further in V6.

08:39:12.923 --> 08:39:14.558
Angular helps developers with a 
lot of the common tasks that 

08:39:14.559 --> 08:39:16.559
they have.  So we have a router,
so solving the 

08:39:19.265 --> 08:39:21.290
common problem of a state that 
exists in a URL bar of your 

08:39:21.291 --> 08:39:25.902
application, understanding what 
route the user wants, what the 

08:39:25.903 --> 08:39:27.903
intent is, and mapping that into
the local application state, 

08:39:28.368 --> 08:39:30.368
showing the right components and
views.

08:39:32.436 --> 08:39:34.436
We have an HTP client that is 
able to 

08:39:35.723 --> 08:39:37.172
give you back JSON, typed JSON 
if that's what you're asking 

08:39:37.173 --> 08:39:39.173
for.  It's easy to mock out, 
easy to include 

08:39:42.278 --> 08:39:43.903
in this integrated environment. 
Forms are really important part 

08:39:43.904 --> 08:39:46.755
of building applications.  
Because every time we build an 

08:39:48.400 --> 08:39:50.445
application, it's a conversation
with a user.  We want to be 

08:39:50.446 --> 08:39:53.338
collecting information from the 
user, but at the same time, we 

08:39:56.830 --> 08:39:58.830
want to give feedback about the 
validity 

08:40:01.516 --> 08:40:03.182
state of an application, and 
Angular Forms helps with that.  

08:40:06.252 --> 08:40:08.252
Animations are key parts of 
building great applications.

08:40:09.706 --> 08:40:11.568
A lot of people think about the 
style side and brand side of 

08:40:11.569 --> 08:40:13.569
things when they think about 
animations.

08:40:15.665 --> 08:40:16.489
When I think about animations, I
really think about building 

08:40:16.490 --> 08:40:18.552
better user experiences by 
giving the user subtle hints.

08:40:23.313 --> 08:40:25.313
If you animate the rough 
transitions 

08:40:27.539 --> 08:40:29.431
as the user is navigating across
a hierarchy, you're going to 

08:40:29.432 --> 08:40:30.862
give them a more intuitive 
understanding of what's going on

08:40:30.863 --> 08:40:33.120
in your application and how the 
application is reacting to every

08:40:33.121 --> 08:40:36.175
change that they make this is 
helpful and drives better user 

08:40:36.176 --> 08:40:38.013
experiences.  
    We also care about 

08:40:38.014 --> 08:40:40.014
internationalization.

08:40:43.851 --> 08:40:45.851
A lot of applications are 
building for 

08:40:47.069 --> 08:40:49.069
a global world now, and so we 
have

08:40:53.518 --> 08:40:56.169
the i18n that you can add and 
give you an industry standard 

08:40:56.170 --> 08:40:58.170
tooling that you 

08:41:02.357 --> 08:41:03.441
can translate or pass to a 
translation house, and then 

08:41:03.442 --> 08:41:05.595
build that back into your 
Angular application at 

08:41:05.596 --> 08:41:08.285
performance build time.  We also
want to help you write better 

08:41:08.503 --> 08:41:11.788
code.  For a lot of developers, 
this means writing good tests.

08:41:16.324 --> 08:41:17.555
We focused a lot on tools like 
protractor and karma making sure

08:41:17.556 --> 08:41:21.262
that it's easy to do end-to-end 
testing across a number of 

08:41:21.263 --> 08:41:23.263
different browsers, 

08:41:27.181 --> 08:41:29.181
and being able to do unit 
testing

08:41:35.419 --> 08:41:38.389
.  
    Another piece of helping 

08:41:38.390 --> 08:41:42.871
developers write code is our 
language service.  It's the 

08:41:42.872 --> 08:41:44.098
thing that helps the IDE 
actually understand what's going

08:41:44.099 --> 08:41:48.898
on in your application, and the 
most noticeable part of this is 

08:41:48.899 --> 08:41:51.591
in your templates.  We can 
actually pull in the variables 

08:41:53.647 --> 08:41:55.647
and the properties from your 
component 

08:41:56.887 --> 08:41:58.887
so if you make a typo or a 
mistake, we 

08:42:00.179 --> 08:42:01.625
can give you those red squiggly 
lines that tell you to go fix 

08:42:01.626 --> 08:42:03.626
that mistake.  

08:42:05.923 --> 08:42:07.923
One of the additional tools we 
have 

08:42:09.543 --> 08:42:12.294
is Angular universal.  Server 
side rendering is really 

08:42:16.118 --> 08:42:19.784
important if you're delivering 
some of your content to 

08:42:16.118 --> 08:42:18.118
machines.

08:42:19.166 --> 08:42:21.231
That could be a web crawler for 
search engines, or that could be

08:42:21.232 --> 08:42:24.694
a social crawler for something 
like a social share where I want

08:42:24.695 --> 08:42:28.168
to have a share button on my 
application.  A lot of the 

08:42:28.169 --> 08:42:30.169
machines are not capable 

08:42:32.856 --> 08:42:35.287
of running server side 
JavaScript.  So that gives you 

08:42:35.288 --> 08:42:40.407
not only machine readability, 
but benefits in terms of the 

08:42:40.408 --> 08:42:42.887
perceived load of your 
application where it looks and 

08:42:42.888 --> 08:42:47.026
feels more interactive faster 
than it is when the application 

08:42:47.027 --> 08:42:50.087
is boot strapping in the 
background.  This can really 

08:42:50.088 --> 08:42:53.338
help things like conversions.  
    The last tool I want to talk

08:42:53.339 --> 08:42:55.339
about 

08:42:56.424 --> 08:42:58.872
is -- you have heard a lot about
Google I/O this year about 

08:42:58.873 --> 08:43:01.718
material design, so this is 
really designed to take material

08:43:04.157 --> 08:43:06.400
design aesthetic and manifest 
that as a set of Angular 

08:43:06.401 --> 08:43:09.071
components that are easy to use.
While we were building out 

08:43:09.072 --> 08:43:13.599
material design, we started 
seeing the same sorts of 

08:43:13.600 --> 08:43:15.600
patterns and problems happen 
over and 

08:43:16.715 --> 08:43:18.715
over where you had to solve 
things like 

08:43:21.035 --> 08:43:22.087
bidirectional input or 
accessibility or creating 

08:43:22.088 --> 08:43:27.426
overlays.  As we talk to other 
component library authors, we 

08:43:27.427 --> 08:43:30.468
baked all of the capabilities 
into our component DevKit so you

08:43:30.469 --> 08:43:33.134
can apply them one by one.  If 
anyone is building a component 

08:43:35.991 --> 08:43:37.991
library out there, which 
basically every 

08:43:42.492 --> 08:43:44.492
company does, we recommend it in
the CDK.  

08:43:47.627 --> 08:43:49.919
If you look across this huge set
of tools, you will see that 

08:43:49.920 --> 08:43:53.403
we're definitely opinionated.  
We want to be a really good 

08:43:53.404 --> 08:43:56.236
default.  But at the same time, 
we're not taking away your 

08:43:56.237 --> 08:44:01.424
freedom.  For any of these 
tools, if you want to use 

08:44:01.425 --> 08:44:03.425
another third-party library, you
absolutely can do that.

08:44:05.305 --> 08:44:10.655
So, in the last week, we 
actually launched 6.0.0 of 

08:44:10.656 --> 08:44:15.133
Angular.  We're trying to make 
updates really easy.  Some day 

08:44:15.134 --> 08:44:17.211
we want this version to 
disappear so that we just talk 

08:44:17.212 --> 08:44:20.726
about new features and everyone 
automatically gets them.  One of

08:44:20.727 --> 08:44:23.187
the ways that we see that vision
coming true is by making the 

08:44:24.405 --> 08:44:26.859
update process easier.  As part 
of this latest version is we 

08:44:28.909 --> 08:44:31.365
have focused less on the 
framework side of things and 

08:44:31.366 --> 08:44:34.013
more on the tooling side of 
things, focusing on the 

08:44:34.014 --> 08:44:37.266
end-to-end user experience.  So 
we want to give developers a 

08:44:39.102 --> 08:44:41.163
balance between stability where 
you can continue writing angular

08:44:41.164 --> 08:44:44.648
applications day after day, but 
we want to bring to you all of 

08:44:44.649 --> 08:44:46.649
the innovation that comes 

08:44:49.550 --> 08:44:51.550
from the vibrant and exciting 
JFS 

08:44:52.584 --> 08:44:54.584
eco-system

08:45:01.314 --> 08:45:03.314
avaScript eco-system.  

08:45:04.346 --> 08:45:06.346
It will also keep your project 
up-to-date.

08:45:09.472 --> 08:45:11.301
We're already using this in 
RxJS, Angular Material, and 

08:45:11.302 --> 08:45:13.302
more.

08:45:18.295 --> 08:45:20.998
If I run a command like ng 
update@angular/core, we're going

08:45:20.999 --> 08:45:23.834
to do a few things.

08:45:28.140 --> 08:45:29.168
If you look in the package JSON,
you will see a pack Angular 

08:45:29.169 --> 08:45:33.274
group.  When you update one of 
the packages within Angular, 

08:45:33.275 --> 08:45:35.275
you're going to get all of the 
associated packages that should 

08:45:35.341 --> 08:45:39.630
be locked in place.  They're all
going to be updated together.  

08:45:39.631 --> 08:45:42.119
So this is something that we 
would love the package managers 

08:45:42.120 --> 08:45:45.627
to do and we use the package 
managers under the hood to 

08:45:45.628 --> 08:45:48.452
manage these things.  But this 
is not where we want it to be 

08:45:50.351 --> 08:45:53.220
yet, so we have taken care of 
this problem for developers.  

08:45:53.221 --> 08:45:55.499
We're going to give you all of 
the latest framework packages as

08:45:55.500 --> 08:46:00.843
well as all of the dependencies 
that are required by that.  When

08:46:00.844 --> 08:46:02.494
you install the update using 
this command, you're going to 

08:46:02.495 --> 08:46:04.495
get that, the 

08:46:06.633 --> 08:46:09.235
latest version of zones and the 
correct version of TypeScript as

08:46:09.236 --> 08:46:12.721
well as RxJS.  The other thing 
that will happen is for each of 

08:46:12.722 --> 08:46:14.722
the packages, we will look 

08:46:16.213 --> 08:46:18.660
in the packages and see if there
are schematics that we can run 

08:46:18.661 --> 08:46:20.661
to update and migrate to the 
latest version.

08:46:23.766 --> 08:46:25.766
We saw this with RxJS.

08:46:30.510 --> 08:46:32.510
We wouldn't just update RxJS in 
your 

08:46:34.630 --> 08:46:37.068
package JSON, we will install 
compat to insure it was a smooth

08:46:37.069 --> 08:46:39.069
process and give 

08:46:40.118 --> 08:46:43.058
developers more time to update 
their applications and use some 

08:46:43.059 --> 08:46:45.059
of the automated tooling that 
we're working on.  

08:46:48.491 --> 08:46:51.378
Another CLI command is ng add.  
We will call ng autopackage, and

08:46:51.379 --> 08:46:53.379
it 

08:46:55.262 --> 08:46:57.262
will download from npm, and then
it's 

08:47:03.446 --> 08:47:05.446
going to look for run an ng ad 
package.

08:47:07.451 --> 08:47:09.938
This will work in a brand-new 
scaffold application that I 

08:47:09.939 --> 08:47:11.939
create with ng new, 

08:47:16.396 --> 08:47:18.396
but also within existing 
applications

08:47:21.601 --> 08:47:26.720
.  It will also set up an 
application manifest for you.  

08:47:26.721 --> 08:47:28.721
Another thing that we've been 
asked a 

08:47:30.551 --> 08:47:32.452
lot about recently, one of our 
Angular labs projects is Angular

08:47:32.453 --> 08:47:37.147
elements.  We actually landed 
the first version of angular 

08:47:37.148 --> 08:47:39.148
elements, because it allows 

08:47:41.465 --> 08:47:43.683
you TA take angular components 
and ship them and boot strap 

08:47:43.684 --> 08:47:47.962
them using the custom elements 
in the browser.  If you look on 

08:47:47.963 --> 08:47:49.963
Angular.

08:47:54.241 --> 08:47:56.241
io, we are using Angular 
elements today

08:47:57.592 --> 08:48:01.658
to take angular components and 
ship them and boot strap them 

08:47:57.592 --> 08:48:01.392
using the custom elements in the
browser.  If you look on 

08:47:57.592 --> 08:48:00.435
Angular.io, we are using Angular
elements today.  Historically, 

08:48:00.436 --> 08:48:02.436
if you wanted to embed rich 
functionality in some of your 

08:48:04.752 --> 08:48:06.399
content, you would have to boot 
strap that functionality into 

08:48:06.400 --> 08:48:08.400
your app.

08:48:10.109 --> 08:48:12.109
With Angular elements now, we 
can ship 

08:48:13.188 --> 08:48:14.656
code example as a custom element
in our application so that 

08:48:14.657 --> 08:48:19.741
instead of waiting for Angular 
or the developer to boot strap 

08:48:19.742 --> 08:48:22.795
that component, we're actually 
relying on the browser.  So the 

08:48:22.796 --> 08:48:24.796
moment that we load this 

08:48:27.713 --> 08:48:30.162
content into the DOM, we're 
going see this rich experience 

08:48:30.163 --> 08:48:33.644
for code examples where we get 
code coloring and the ability to

08:48:33.645 --> 08:48:35.645
copy and paste that component.  

08:48:36.939 --> 08:48:38.939
It's really, really easy to do 
as a developer.

08:48:40.953 --> 08:48:42.953
If I take

08:48:44.706 --> 08:48:46.995
a component that I built in 
angular, pass it to the 

08:48:46.996 --> 08:48:48.996
injector, that is a custom 
element that is ready to be 

08:48:51.480 --> 08:48:52.517
defined by the browser's custom 
elements.  These are easy to get

08:48:52.518 --> 08:48:54.748
started with.  They're available
as part of 6.

08:48:59.493 --> 08:49:03.420
0 within Angular applications 
where you have an injector.  

08:49:03.421 --> 08:49:05.253
We're looking at a world where 
it's easier to distribute these 

08:49:05.254 --> 08:49:07.254
things.

08:49:08.734 --> 08:49:10.734
You can distribute it to other 

08:49:11.741 --> 08:49:14.453
developers who maybe don't want 
to apply Angular to their 

08:49:14.454 --> 08:49:17.319
project.  
    We've also included updates 

08:49:17.320 --> 08:49:19.320
to RxJS.

08:49:21.599 --> 08:49:24.284
I talked about how they're 
automatically applying a 

08:49:24.285 --> 08:49:26.285
capability layer.  We've updated
the application so that 

08:49:30.838 --> 08:49:33.482
it's faster and more tree 
shakeable, and we have updated 

08:49:33.483 --> 08:49:35.483
webpack so it's more tree 
shakeable as well.  

08:49:35.526 --> 08:49:37.562
CLI, you will see the CLI format
will change a little bit, and 

08:49:37.563 --> 08:49:39.563
now we 

08:49:41.451 --> 08:49:43.451
have work spaces, projects, 
targets, and configs.

08:49:46.371 --> 08:49:48.371
We're able to represent more, 
but by 

08:49:51.233 --> 08:49:53.233
default, it will all look the 
same

08:50:00.587 --> 08:50:02.587
.  This work is built on top of 
the work ng packager.

08:50:08.532 --> 08:50:08.951
So, we talked a little about the
momentum of angular and the 

08:50:08.952 --> 08:50:10.597
state of angular today and a lot
of the reasons why people are 

08:50:10.598 --> 08:50:12.598
using it.

08:50:13.655 --> 08:50:15.684
I want to invite to the stage, 
Kara, one of the engineers 

08:50:15.685 --> 08:50:17.685
leading the future of Angular.  

08:50:21.351 --> 08:50:26.559
[ Applause ] 
   &gt;&gt; KARA ERICKSON: Hi.  I'm 

08:50:26.560 --> 08:50:28.560
one of the engineers working on 
this new project.

08:50:31.642 --> 08:50:33.642
I'm here to talk about the 
future of 

08:50:35.310 --> 08:50:36.560
Angular, so this project is 
still in its early stages of 

08:50:36.561 --> 08:50:40.391
development.  But we were really
excited about everything that 

08:50:40.392 --> 08:50:42.392
we're seeing, so we wanted to 
give you a sneak preview.

08:50:45.235 --> 08:50:47.235
So what is

08:50:51.220 --> 08:50:54.067
Ivy? We're rewriting the code 
that translates your Angular 

08:50:54.068 --> 08:50:58.977
templates into whatever you see 
rendered in the browser.  So why

08:50:58.978 --> 08:51:02.442
are we taking the time to do 
this? So this was a project that

08:51:02.443 --> 08:51:04.443
was conceived specifically to 
tackle some of 

08:51:06.789 --> 08:51:10.670
the problems that we know that 
Angular developers face.  We 

08:51:10.671 --> 08:51:12.931
have been hearing the same 
things over and over from our 

08:51:12.932 --> 08:51:14.932
developer 

08:51:16.260 --> 08:51:18.502
community, and we've been 
hearing that developers want 

08:51:18.503 --> 08:51:20.503
smaller bundle sizes so 

08:51:22.016 --> 08:51:23.238
they're only paying for the 
Angular code that they're 

08:51:23.239 --> 08:51:26.100
actually using.  They want great
start-up performance 

08:51:30.208 --> 08:51:32.208
so their apps will load quickly,
even on slow mobile connections.

08:51:33.077 --> 08:51:33.694
And they want apps that are 
fundamentally simple to 

08:51:33.695 --> 08:51:37.428
understand and debug, even as 
their applications grow larger 

08:51:37.429 --> 08:51:42.332
over time.  That's what project 
ivy is all about.  We want to 

08:51:42.333 --> 08:51:44.333
make your apps smaller, faster, 
and simpler.

08:51:51.386 --> 08:51:54.043
r, all while requiring no 
upgrade effort from you.  It was

08:51:54.044 --> 08:51:56.892
important to us to make this 
change without requiring changes

08:51:56.893 --> 08:52:01.583
from existing applications, 
because we want everyone to be 

08:52:01.584 --> 08:52:03.649
able to leverage the benefits 
without having to do a bunch of 

08:52:03.650 --> 08:52:09.476
things.  
    This might sound ambitious, 

08:52:09.477 --> 08:52:11.930
and it is.  But we have actually
done this before.

08:52:17.669 --> 08:52:19.669
In Angular 4, we completely 
rewrote 

08:52:23.432 --> 08:52:25.863
the code and did so with zero 
breaking changes.  The way we 

08:52:25.864 --> 08:52:27.864
were able to achieve this 

08:52:29.546 --> 08:52:31.417
is through an extensive vetting 
process.  We will use the same 

08:52:31.418 --> 08:52:33.418
vetting process when we upgrade 
everyone to ivy.

08:52:36.758 --> 08:52:37.591
So we have over 600 projects 
inside Google that are already 

08:52:37.592 --> 08:52:40.437
using angular.  So we first turn
on the flooding for 

08:52:45.163 --> 08:52:45.969
all of these 600 plus projects 
to insure that we don't see any 

08:52:45.970 --> 08:52:47.970
breaking changes.

08:52:49.979 --> 08:52:51.979
These are real world 
applications like 

08:52:54.619 --> 08:52:56.619
Firebase and

08:52:57.969 --> 08:52:59.601
Google Analytics, and apps that 
cannot break and has a lot of 

08:52:59.602 --> 08:53:01.602
real world use cases.

08:53:03.895 --> 08:53:06.343
Once we are satisfied, we can 
render the default for everyone.

08:53:10.240 --> 08:53:11.666
So, as I have hammered in by 
now, all of these changes are to

08:53:11.667 --> 08:53:13.667
angular internals.

08:53:15.057 --> 08:53:16.889
As an Angular developer, you 
actually don't need to know how 

08:53:16.890 --> 08:53:18.924
everything works under the hood,
but I will take the time 

08:53:22.925 --> 08:53:26.053
to explain the new design, 
because it's really cool.  And 

08:53:26.054 --> 08:53:28.054
also because I really want you 
to 

08:53:29.136 --> 08:53:30.155
understand why you're going to 
get better results with ivy than

08:53:30.156 --> 08:53:33.835
you would with angular today.  
So when we were redesigning the 

08:53:37.313 --> 08:53:38.964
rendering pipeline, we knew 
there were a few characteristics

08:53:38.965 --> 08:53:40.965
that we wanted to have.  We 
wanted to design it to be tree 

08:53:43.072 --> 08:53:45.534
shakeable, so you're only paying
for the Angular code that you're

08:53:45.535 --> 08:53:49.856
actually using.  And we wanted 
it to be local in its effects so

08:53:49.857 --> 08:53:51.927
that as a developer as you are 
developing your apps, you only 

08:53:51.928 --> 08:53:53.928
have 

08:53:56.645 --> 08:53:58.282
to recompile the components 
you're actually changing.  Let's

08:53:58.283 --> 08:54:00.283
start with tree shaking.  

08:54:01.790 --> 08:54:03.214
So what do I mean when I say 
designed with tree shaking in 

08:54:03.215 --> 08:54:05.215
mind?

08:54:07.519 --> 08:54:09.519
It's essentially a build 
optimization 

08:54:10.619 --> 08:54:13.102
step that ensures that code that
you're not using doesn't end up 

08:54:13.103 --> 08:54:15.328
in the final bundle that ships 
to the browser.

08:54:18.403 --> 08:54:19.227
There are a lot of tools.  
There's roll up to ensure that 

08:54:19.228 --> 08:54:22.281
code you're not using is never 
added to your bundle.

08:54:27.185 --> 08:54:29.185
There are other tools like 
uglified 

08:54:30.272 --> 08:54:32.272
and tries to intelligently 
delete dead code from it.

08:54:34.785 --> 08:54:37.887
Their efficacy depends on how 
you're writing your code.  This 

08:54:37.888 --> 08:54:40.758
is because tree shaking tools 
typically use static analysis of

08:54:42.607 --> 08:54:44.607
references to figure out what 
code you 

08:54:45.688 --> 08:54:48.328
need and you don't need in your 
bundles.  And static analysis by

08:54:48.329 --> 08:54:51.607
definition is something that 
tries to figure out what's going

08:54:51.608 --> 08:54:53.608
on in a piece of code without 
actually running the code.

08:54:56.642 --> 08:54:59.503
So there's some limitations to 
that.  And sometimes it will 

08:54:59.504 --> 08:55:01.528
have to kind of assume the worst
case in your code to 

08:55:04.586 --> 08:55:06.586
ensure the resulting program is 
correct.

08:55:09.533 --> 08:55:10.146
So what does it mean to write 
code that's friendly to 

08:55:10.147 --> 08:55:12.147
tree-shakers?

08:55:14.070 --> 08:55:15.500
I'll give you a few examples.  
Let's say you have this code in 

08:55:15.501 --> 08:55:17.755
your application and you're 
importing a few 

08:55:21.243 --> 08:55:23.243
functions from a third party 
library.

08:55:26.338 --> 08:55:27.366
You're not calling an unused 
function anywhere, so tree 

08:55:27.367 --> 08:55:29.367
shaking tools would do a pretty 
good job of analyzing this.

08:55:32.303 --> 08:55:34.757
It would see that some function 
is being referenced in main and 

08:55:34.758 --> 08:55:39.028
would stay in the bundle.  And 
unused function isn't referenced

08:55:41.300 --> 08:55:43.332
anywhere, so the tooling would 
know it could safely remove it 

08:55:43.333 --> 08:55:46.008
from the bundle.  
    But let's take a slightly 

08:55:46.009 --> 08:55:49.532
more complicated case.  Let's 
say you wanted unused function 

08:55:51.979 --> 08:55:53.632
to be called, but only if some 
arbitrary conditional check 

08:55:53.633 --> 08:55:57.094
passed.  Tree shaking tools 
would have a little bit more of 

08:55:57.095 --> 08:55:59.755
a problem with this set-up.  And
that's because, remember, 

08:55:59.756 --> 08:56:04.287
they're relying on static 
analysis of references.  Here 

08:56:04.288 --> 08:56:05.928
they would see that unused 
function is being referenced in 

08:56:05.929 --> 08:56:08.192
main, but they don't necessarily
know whether 

08:56:12.262 --> 08:56:15.720
that code path is going to be 
used at run time.  To be 

08:56:15.721 --> 08:56:17.721
conservative, this is going 
stick around in your bundle.

08:56:19.644 --> 08:56:23.170
These are the types of patterns 
that we want to try to avoid.  

08:56:23.171 --> 08:56:25.847
We want to try to avoid code 
paths that you're not using in 

08:56:25.848 --> 08:56:28.701
conditionals being in your 
bundle even when you're not 

08:56:28.702 --> 08:56:33.203
using them.  You might wonder 
how to avoid conditionals.  

08:56:33.204 --> 08:56:35.204
They're part of programming.  
And you would be right.

08:56:36.888 --> 08:56:38.888
But we can restructure our code 
to 

08:56:41.324 --> 08:56:43.324
make sure they're not quite as 
necessary

08:56:46.592 --> 08:56:48.592
.  I'm going to show you how our

08:56:49.682 --> 08:56:50.292
rendering pipeline works today 
so you have context for the 

08:56:50.293 --> 08:56:52.293
change that we've made.

08:56:55.998 --> 08:56:57.998
Say you've written the

08:56:59.793 --> 08:57:01.793
this standard hello world inside
of a div.

08:57:06.238 --> 08:57:07.496
The Angular compiler would parse
and generate JavaScript that 

08:57:07.497 --> 08:57:11.209
represents the structure of your
template.  You can see an 

08:57:11.210 --> 08:57:13.210
example of the generated code 
here.

08:57:18.165 --> 08:57:20.434
We have an element def, and a 
text def that creates another 

08:57:20.435 --> 08:57:23.283
data structure based on your 
text node.  This is a parsed 

08:57:23.284 --> 08:57:26.151
version of your template.  
    At run time, this data 

08:57:26.152 --> 08:57:28.152
structure is 

08:57:29.426 --> 08:57:31.426
then passed into the Angular 
interpreter.

08:57:32.933 --> 08:57:35.175
And the Angular interpreter 
tries to figure out which 

08:57:35.176 --> 08:57:37.176
operations it needs to 

08:57:38.696 --> 08:57:40.722
run to generate the correct run,
and hopefully it renders the 

08:57:40.723 --> 08:57:42.723
correct thing.

08:57:44.631 --> 08:57:45.434
But let's take a step back and 
look at this angular interpreter

08:57:45.435 --> 08:57:49.373
step.  You might have noticed 
that this pattern looks slightly

08:57:49.374 --> 08:57:52.899
familiar.  You have all of the 
conditional checks.  And the 

08:57:52.900 --> 08:57:54.953
problem here is that all angular
templates are going through the 

08:57:57.217 --> 08:58:00.100
same shared code path.  So the 
Angular compiler doesn't know 

08:58:02.960 --> 08:58:04.960
ahead of time what kinds of 
templates it's going to see.

08:58:08.889 --> 08:58:10.904
So it has to check, you know, 
based on the data structure 

08:58:10.905 --> 08:58:11.857
which operations it needs to 
run.  So some of these 

08:58:11.858 --> 08:58:15.741
conditional checks will be false
at run time, but it doesn't 

08:58:15.742 --> 08:58:19.236
matter.  Because tree shaking 
tools will see that they are 

08:58:19.237 --> 08:58:22.121
referenced in this function, and
all of the symbols will stay in 

08:58:22.122 --> 08:58:24.122
your bundle.  

08:58:29.748 --> 08:58:32.390
This was the problem with trying
to solve.

08:58:36.103 --> 08:58:37.534
Instead of parsing the template 
and creating the data structure 

08:58:37.535 --> 08:58:42.012
and passing that structure to an
interpreter that needed to know 

08:58:42.013 --> 08:58:44.655
how to do everything, why don't 
we just skip a step and just 

08:58:46.745 --> 08:58:48.631
generate the instructions 
directly that come naturally 

08:58:48.632 --> 08:58:50.632
from a certain template.

08:58:52.640 --> 08:58:54.640
So that way DWOENT need

08:58:56.648 --> 08:58:58.891
don't need an interpreter at all
with the crazy checks in it.  

08:59:02.198 --> 08:59:04.037
We still pass through the 
angular compiler, but instead of

08:59:04.038 --> 08:59:06.038
generating a 

08:59:08.940 --> 08:59:11.821
set of data structures, so we 
have elements and it's creating 

08:59:11.822 --> 08:59:16.593
a Div, we have text which 
generates a text node, and if 

08:59:16.594 --> 08:59:18.638
you look at the implementation 
of element start, it's doing the

08:59:18.639 --> 08:59:20.639
work of 

08:59:23.134 --> 08:59:24.590
creating the DOM, it's creating 
a div.  We don't have those 

08:59:24.591 --> 08:59:26.591
conditionals 

08:59:27.606 --> 08:59:29.606
anymore

08:59:35.294 --> 08:59:37.755
.  
    That code won't be generated

08:59:37.756 --> 08:59:42.490
from the template that you've 
given the compiler, so there 

08:59:42.491 --> 08:59:44.491
won't be references, 

08:59:46.012 --> 08:59:47.689
and if there are not RECHBSs, 
then tree shaking tools can 

08:59:47.690 --> 08:59:49.690
effectively remove 

08:59:51.514 --> 08:59:53.514
that code from your bundle

08:59:58.349 --> 09:00:02.282
references, then tree shaking 
tools can effectively remove 

08:59:58.349 --> 09:00:00.793
that code from your bundle.  
    If you're not using queries 

09:00:00.794 --> 09:00:02.794
or life 

09:00:04.352 --> 09:00:06.763
cycle hooks or whatever, you 
don't have to pay for that code 

09:00:06.764 --> 09:00:08.764
in your bundle.  This also has 
implications for code splitting.

09:00:09.427 --> 09:00:12.291
So if you haven't heard of code 
splitting, it's a process by 

09:00:12.292 --> 09:00:14.788
which you split your application
code up into 

09:00:19.240 --> 09:00:21.024
smaller chunks and you can lazy 
load them on command, typically 

09:00:21.025 --> 09:00:23.025
by routes.

09:00:25.716 --> 09:00:26.725
Like tree-shaking tools, code 
splitting tools figure out which

09:00:26.726 --> 09:00:29.185
code ends up in which chunk.  So
it will have the same set of 

09:00:29.800 --> 09:00:32.084
problems.  So with Angular 
today, you would end 

09:00:35.695 --> 09:00:38.291
up with most of the Angular 
features inside every route.  

09:00:38.292 --> 09:00:40.931
With this restructuring, it's 
much easier to split the angular

09:00:40.932 --> 09:00:42.932
code apart, 

09:00:46.247 --> 09:00:47.673
so each route will only be 
loading the code that you're 

09:00:47.674 --> 09:00:49.300
using in that route.  So a good 
way to think about it might be 

09:00:49.301 --> 09:00:51.998
that tree shaking tools will 
remove code that you're not 

09:00:51.999 --> 09:00:53.999
using anywhere in 

09:00:55.317 --> 09:00:57.320
your application and code 
splitting tools will remove code

09:00:57.321 --> 09:00:59.321
that you're not 

09:01:01.872 --> 09:01:04.584
using right now in this route.  
Obviously this is great for 

09:01:04.585 --> 09:01:07.457
large applications.  You're 
paying for fewer features per 

09:01:07.458 --> 09:01:09.458
CHURNG.  

09:01:11.755 --> 09:01:13.755
chunk.  

09:01:15.301 --> 09:01:18.167
We also wanted to make Angular 
developers more efficient.  Our 

09:01:18.168 --> 09:01:20.168
strategy was by adhering to a 

09:01:22.606 --> 09:01:24.606
principle that we like to call 
locality

09:01:34.649 --> 09:01:37.292
.  So if you know that you can 
generate the correct template 

09:01:37.293 --> 09:01:39.293
instructions for 

09:01:41.378 --> 09:01:42.395
each component using only its 
own information as an input, 

09:01:42.396 --> 09:01:47.466
then you know you can compile 
each component completely 

09:01:47.467 --> 09:01:50.122
independently of other 
components.  This has great 

09:01:50.123 --> 09:01:52.808
implications for the speed of 
your build process.  If you take

09:01:52.809 --> 09:01:55.472
an example one more time.  Let's
say you have an app and you have

09:01:57.095 --> 09:01:59.095
a header and a footer.

09:02:00.164 --> 09:02:02.218
So you run that through the 
angular compiler, and it would 

09:02:02.219 --> 09:02:04.219
generate some 

09:02:05.275 --> 09:02:07.275
code for each of your 
components, right?

09:02:08.776 --> 09:02:09.597
So later, if you made a change 
in the header, since you know 

09:02:09.598 --> 09:02:11.598
that each 

09:02:13.239 --> 09:02:16.964
component is compiled only using
the information for that 

09:02:16.965 --> 09:02:19.815
component, you know the app 
cannot be affected by any change

09:02:19.816 --> 09:02:21.816
that you made 

09:02:23.546 --> 09:02:25.011
in the header, so you can 
confidently regenerate the 

09:02:25.012 --> 09:02:27.012
header by itself.

09:02:30.744 --> 09:02:32.591
It has the potential to increase
the incrementality of your 

09:02:32.592 --> 09:02:36.674
builds.  Your build time should 
be proportional to the size of 

09:02:36.675 --> 09:02:38.758
the change that you're making, 
not to the size of your whole 

09:02:39.784 --> 09:02:44.268
application.  If you have 1,000 
TypeScript files, you should 

09:02:44.269 --> 09:02:46.747
only be regenerating the file 
that you changed, not your 

09:02:46.748 --> 09:02:50.618
entire project.  Structuring it 
this way leads to faster 

09:02:50.619 --> 09:02:52.870
rebuilds.  
    So this is not actually how 

09:02:52.871 --> 09:02:58.394
Angular is configured today.  We
have a different strategy.  So 

09:02:58.395 --> 09:03:00.395
once again, I'll explain how 

09:03:02.071 --> 09:03:04.073
Angular works today for context 
for how we're making the change.

09:03:04.289 --> 09:03:07.004
So again we'll go back to this 
example where we have an app 

09:03:07.005 --> 09:03:09.255
with a header and a footer.  And
this is the template, once 

09:03:09.256 --> 09:03:11.256
again.

09:03:12.900 --> 09:03:15.241
Header and footer.  This is the 
code that we might 

09:03:18.492 --> 09:03:20.770
generate, a simplified version. 
Our strategy today is to try to 

09:03:20.771 --> 09:03:23.021
do as much processing at compile
time as 

09:03:26.080 --> 09:03:28.080
possible so we can avoid doing 
the same processing at run time.

09:03:29.353 --> 09:03:30.565
One of the strategies we used to
speed up the processing of the 

09:03:30.566 --> 09:03:32.566
component is to in line some 
information about that 

09:03:35.596 --> 09:03:38.068
component's dependencies in its 
generated code.  Here you can 

09:03:38.069 --> 09:03:40.559
see for the app component, we 
have some information about the 

09:03:40.560 --> 09:03:44.013
header.  First of all, we have 
the information that it's a 

09:03:44.014 --> 09:03:46.680
directive at all, because we've 
already done the directive 

09:03:50.703 --> 09:03:52.703
matching at compile time

09:03:54.682 --> 09:03:56.682
.  We also have information 
about the header specifically.

09:03:58.154 --> 09:04:00.994
This is essentially represents a
bunch of different flags about 

09:04:00.995 --> 09:04:03.882
the directive and the node 
THAT's on.  Because there is a 

09:04:03.883 --> 09:04:07.761
life cycle hook, there is a bit 
flipped and we get this number. 

09:04:07.762 --> 09:04:09.762
The point they want you to 
remember is 

09:04:13.432 --> 09:04:15.432
there is implement

09:04:18.031 --> 09:04:20.476
implementation details.  
    It doesn't have to look into

09:04:22.507 --> 09:04:24.372
dependencies at run time and try
to figure out all of its 

09:04:24.373 --> 09:04:26.373
characteristics.

09:04:27.668 --> 09:04:28.881
But it's also leaking 
implementation details of a 

09:04:28.882 --> 09:04:31.154
component into its parent.  What
that means functionally is once 

09:04:34.499 --> 09:04:36.499
again if you make a change to 
the 

09:04:38.239 --> 09:04:38.450
header, then we not only have to
recompile the header but also 

09:04:38.451 --> 09:04:40.090
the app component because it has
its own copy of the same 

09:04:40.091 --> 09:04:42.091
information.  

09:04:45.035 --> 09:04:47.050
So with Ivy, this is slightly 
different.  So as you can see on

09:04:47.051 --> 09:04:49.938
the right, with the same 
template, we just have an 

09:04:52.228 --> 09:04:54.274
element start for the header and
an element start for the footer.

09:04:55.289 --> 09:04:59.378
We don't have information about 
either of these components.  All

09:04:59.379 --> 09:05:01.224
of their details are completely 
encapsulated inside their own 

09:05:01.225 --> 09:05:04.720
generated code.  So what this 
means is we have a situation 

09:05:04.721 --> 09:05:06.721
that we want.

09:05:10.790 --> 09:05:12.922
You only need to recompile the 
HDheader.  There are other side 

09:05:12.923 --> 09:05:14.923
effects that come out.

09:05:16.185 --> 09:05:18.270
One is if you can compile all of
your components independently, 

09:05:18.271 --> 09:05:20.271
you can ship a 

09:05:22.432 --> 09:05:24.432
third-party code that is already

09:05:25.454 --> 09:05:27.454
precompiled

09:05:30.607 --> 09:05:32.607
.  Once again, third party 
libraries can 

09:05:33.703 --> 09:05:35.703
ship generated code, so they 
don't need 

09:05:37.361 --> 09:05:39.695
to ship any other information to
help us.  We're doing a little 

09:05:39.696 --> 09:05:44.410
more run time, so we could 
possibly do things like create 

09:05:44.411 --> 09:05:48.294
directives on the fly.  So it's 
pretty cool.  So we've talked a 

09:05:48.295 --> 09:05:50.295
lot about the design.

09:05:52.015 --> 09:05:53.456
You might be wondering, did id 
work? 

09:05:53.457 --> 09:05:56.354
So I have some early results and
remember, it's just early 

09:05:56.355 --> 09:06:00.359
stages.  So the first goal is 
that we wanted to make your 

09:06:00.360 --> 09:06:02.883
bundled sizes smaller.  So our 
benchmark was a hello world 

09:06:03.294 --> 09:06:05.294
application.

09:06:07.188 --> 09:06:09.188
With Angular today, that would 
be 36KB compressed.

09:06:10.444 --> 09:06:14.576
With Ivy, we're able to get this
down to 2.7Kb.  That's a huge 

09:06:14.577 --> 09:06:17.574
jump.  
[ Applause ] 

09:06:25.597 --> 09:06:27.597
we also wanted to make your apps
faster.

09:06:34.115 --> 09:06:39.337
So we ran our hello world 
through this.  And that was 1.5 

09:06:39.338 --> 09:06:44.321
seconds.  Current angular was 4 
seconds.  And ivy was just 2.2 

09:06:44.322 --> 09:06:46.322
seconds.  So we're making huge 
strides.

09:06:51.031 --> 09:06:53.031
We're already 45

09:06:58.711 --> 09:07:00.354
% with your builds being more 
incremental, you save time in 

09:07:00.355 --> 09:07:02.355
the development cycle as well.  

09:07:05.852 --> 09:07:06.676
Our last goal was to make 
angular simpler.  If we go back 

09:07:06.677 --> 09:07:09.118
to this slide from before, you 
can see there's a whole lot less

09:07:09.119 --> 09:07:14.213
noise.  You can see the header 
and footer.  There isn't, you 

09:07:14.214 --> 09:07:16.214
know, numbers and nodes and 
stuff.

09:07:17.950 --> 09:07:20.913
It's a lot easier to road.  This
really helps when you're trying 

09:07:21.534 --> 09:07:26.449
to debug apps.  I had a quick 
demo prepared.  I don't know -- 

09:07:26.450 --> 09:07:28.450
we do not have time to show it.

09:07:31.516 --> 09:07:33.516
We'll be in the web sand

09:07:34.696 --> 09:07:36.696
box after this, so anyone who 
wants to 

09:07:37.795 --> 09:07:40.685
see it, we're still writing the 
road map and compiler.  We will 

09:07:40.686 --> 09:07:42.686
give you time to try it out and 
give us feedback.

09:07:45.002 --> 09:07:47.002
Once the verification process is
done, 

09:07:48.304 --> 09:07:49.934
we can do the render of the 
default.  

09:07:49.935 --> 09:07:52.387
We're so happy with the growth 
and adoption.  Thank you for 

09:07:52.388 --> 09:07:54.388
being a part of our community.

09:07:56.284 --> 09:07:58.331
V6 is exciting.  It just came 
out.  Hopefully you can give it 

09:07:58.332 --> 09:08:00.810
a try.  And we're so excited 
about Ivy.

09:08:04.114 --> 09:08:07.007
So hopefully you are too.  We 
will be in the web sandbox, so 

09:08:08.439 --> 09:08:10.439
please come talk to us.  Thank 
you very much.  

09:08:12.507 --> 09:08:16.281
[ Applause ] 

09:28:14.129 --> 09:28:15.352
. 
   &gt;&gt; ERIC BIDELMAN: Are you 

09:28:15.353 --> 09:28:19.059
ready to talk about headless 
Chrome? You're tired, I'm tired.

09:28:20.502 --> 09:28:23.156
Hopefully by the end of the 
presentation, you'll be inspired

09:28:23.157 --> 09:28:25.157
to use headless Chrome, and 
we'll talk about 

09:28:29.335 --> 09:28:32.197
the puppeteer.  I am a web 
developer, but basically 

09:28:35.288 --> 09:28:37.288
I'm an engineer that works on 
the Chrome 

09:28:40.531 --> 09:28:42.531
team and on developer relations

09:28:46.547 --> 09:28:48.623
.  W I think it's a really 
exciting space.  The fact that 

09:28:48.624 --> 09:28:50.624
we have headless Chrome 

09:28:54.881 --> 09:28:56.881
now, puppeteer

09:29:01.491 --> 09:29:03.491
.  This talk is not about 
testing.

09:29:05.353 --> 09:29:07.353
You should test your apps.  You 
can use headless Chrome to do 

09:29:08.803 --> 09:29:11.086
smoke tests, UI tests, whatever.
I want to stick to the 

09:29:11.087 --> 09:29:13.087
automation side of things.

09:29:15.160 --> 09:29:17.160
So this is something that I 
realized a couple of weeks ago.

09:29:18.879 --> 09:29:20.879
Headless Chrome can be a front 
end for 

09:29:23.376 --> 09:29:26.246
your web app frontend.  Once I 
started to bake headless Chrome 

09:29:29.287 --> 09:29:32.414
into my work flow, it makes my 
life easier.  I can automate 

09:29:32.415 --> 09:29:34.415
things and put headless 

09:29:35.587 --> 09:29:38.432
Chrome on a server.  Some cool 
and powerful things you can do 

09:29:38.433 --> 09:29:40.433
with headless Chrome.  We're 
going to talk about what 

09:29:43.187 --> 09:29:45.187
headless Chrome is, get that 
nomenclature out of the way.

09:29:49.973 --> 09:29:51.973
We'll introduce puppeteer, and 
along 

09:29:53.659 --> 09:29:55.659
the way we'll see ten 
interesting use 

09:29:56.713 --> 09:29:59.163
cases that I want to share with 
you and we'll talk about 

09:29:59.164 --> 09:30:01.433
puppeteer's use case.  
    This is something I'm going 

09:30:01.434 --> 09:30:04.331
to refer to a couple of times 
throughout today's presentation.

09:30:09.333 --> 09:30:12.192
This is the pyramid of 
puppeteer.  At the bottom is 

09:30:12.193 --> 09:30:15.500
headless Chrome, just the 
browser.  Normally when you 

09:30:15.501 --> 09:30:17.501
click on Chrome, there's a 
window that launches.

09:30:19.565 --> 09:30:21.565
The

09:30:24.163 --> 09:30:26.163
user can input a url, you can 
click 

09:30:28.244 --> 09:30:29.479
around, open dev tools, tweak 
styles and modify the page as 

09:30:29.480 --> 09:30:34.576
you go.  The dev tools has many,
many more features.  With 

09:30:34.577 --> 09:30:37.642
headless Chrome there's none of 
that.  Chrome is running.  You 

09:30:37.643 --> 09:30:42.528
can see knit the task bar there,
but there's literally no UI.  

09:30:42.529 --> 09:30:45.184
Headless Chrome is Chrome 
without Chrome, so to speak.  

09:30:45.185 --> 09:30:47.223
It's Chrome without UI.  So if 
there's nothing to interact 

09:30:49.680 --> 09:30:54.402
with, how is this thing useful 
to us? We'll talk about that.  

09:30:54.403 --> 09:30:56.403
If you want to launch Chrome in 

09:31:00.717 --> 09:31:03.647
headless mode, it's a one-line 
command line.  By itself.  It is

09:31:03.648 --> 09:31:05.648
not too useful.

09:31:06.923 --> 09:31:09.570
We need to combine it with 
something else, which is the 

09:31:09.571 --> 09:31:11.571
remote debugging port flag.

09:31:14.502 --> 09:31:17.159
Once you combine these, it will 
open a remote debugging port, 

09:31:17.160 --> 09:31:19.160
and then we can 

09:31:21.275 --> 09:31:24.145
tap into the dev tools using 
this remote debugging port.  

09:31:24.146 --> 09:31:25.826
That's where things get awesome.
What does headless Chrome unlock

09:31:25.827 --> 09:31:28.077
for SNUS one of the most 
exciting things is 

09:31:32.586 --> 09:31:35.221
the ability to test platform 
features like ES6 modules and 

09:31:35.222 --> 09:31:38.688
service workers and modules and 
streams.  We can finally write 

09:31:38.689 --> 09:31:40.689
apps and test the 

09:31:45.847 --> 09:31:47.847
apps because we have the 
up-to-date 

09:31:49.041 --> 09:31:51.041
rendering sen engine.

09:31:52.209 --> 09:31:54.209
Things like network TLOTenning 
and 

09:31:55.212 --> 09:31:57.212
code coverage

09:31:58.341 --> 09:32:00.341
code throttling and more.  

09:32:07.125 --> 09:32:09.995
    This article is about a year
old at 

09:32:13.404 --> 09:32:17.555
this point, but it is still 
relevant.  You can do 

09:32:17.556 --> 09:32:20.396
interesting things with headless
Chrome without ever having to 

09:32:23.681 --> 09:32:25.681
write code.

09:32:28.576 --> 09:32:30.646
You can print to a PDF and do 
some other interesting things.  

09:32:30.647 --> 09:32:32.486
Do check that out if you want to
know more about headless Chrome.

09:32:32.487 --> 09:32:34.487
Maybe I've sold you.  It's a 
thing.

09:32:36.511 --> 09:32:38.679
Headless browsers are things.  
What can you actually do with 

09:32:38.680 --> 09:32:43.958
this stuff? Let's go back to the
pyramid of puppeteer.  We've got

09:32:43.959 --> 09:32:45.959
the browser at the lowest 

09:32:46.976 --> 09:32:52.347
level.  On top of that is the 
Chrome dev tools protocol.  

09:32:52.348 --> 09:32:55.086
There's a huge layer here that 
the Chrome dev tools itself uses

09:32:55.087 --> 09:32:57.087
to communicate with your page 
and change 

09:32:59.603 --> 09:33:01.603
the page, a whole API surface 
that we can tap into.

09:33:07.306 --> 09:33:09.306
These are the yin and yang

09:33:14.957 --> 09:33:16.957
.  Headless Chrome and dev tools
are an awesome duo.

09:33:20.410 --> 09:33:21.729
The dev tools is 
straightforward.  There's a lot 

09:33:21.730 --> 09:33:23.730
you can do with it.

09:33:25.630 --> 09:33:27.630
It's a JSON-based web socket 
API.

09:33:29.367 --> 09:33:31.241
I opened to local host 9222, 
which is the remote debugging 

09:33:31.242 --> 09:33:36.316
port, and then you can just do 
message passing.  In this case, 

09:33:36.317 --> 09:33:38.771
in this example here, I'm 
getting the page's title.

09:33:43.277 --> 09:33:45.277
I'm evaluating the document 
title 

09:33:48.438 --> 09:33:50.438
expression, using the evaluate 
dev tools method.

09:33:52.877 --> 09:33:53.398
And you can see this traffic.  
So dev tools itself uses this 

09:33:53.399 --> 09:33:55.399
protocol.

09:33:57.398 --> 09:33:58.895
So if you open the propertytocol
monitor panel in the dev tools, 

09:33:58.896 --> 09:33:59.637
you can see these requests and 
responses fly by.  So like any 

09:33:59.638 --> 09:34:02.404
time you tweak a style or do 
something in the dev tools 

09:34:02.405 --> 09:34:04.405
you'll see the traffic for it.

09:34:07.361 --> 09:34:09.361
So you can learn the API as you 
see this stuff happen.

09:34:11.672 --> 09:34:13.504
So back to the pyramid of 
puppeteer, all this cool stuff 

09:34:13.505 --> 09:34:15.505
we're going to tap 

09:34:17.633 --> 09:34:19.672
into, and on top is where 
puppeteer comes in.  Puppeteer 

09:34:19.673 --> 09:34:21.673
is a library that we 

09:34:23.542 --> 09:34:23.958
launched last year right around 
the time that headless Chrome 

09:34:23.959 --> 09:34:28.706
came out.  You can get it off of
npm.  There was not a lot of 

09:34:28.707 --> 09:34:32.626
good options for working with 
headless Chrome at that point in

09:34:32.627 --> 09:34:35.075
time, and we wanted to highlight
the dev tools protocol, make 

09:34:36.496 --> 09:34:38.944
sure people know how to use the 
protocol, make it high level API

09:34:38.945 --> 09:34:40.951
for some of the powerful things 
you can do.

09:34:44.740 --> 09:34:46.740
So we used a lot of modern 
features.

09:34:50.436 --> 09:34:52.296
And that's because of this async
feature and node talking to 

09:34:52.297 --> 09:34:55.157
Chrome.  Promises lend 
themselves very nicely to this.

09:34:59.994 --> 09:35:02.544
But you can use node 6.  You 
don't have to transpile or 

09:35:03.777 --> 09:35:05.777
anything like that.

09:35:08.439 --> 09:35:10.337
We wanted to create a zero 
configuration set-up for you.  

09:35:10.338 --> 09:35:12.575
When you pull down puppeteer, we
download chromium with 

09:35:12.576 --> 09:35:14.576
puppeteer.

09:35:16.291 --> 09:35:18.291
It's hard to find Chrome, 
install it 

09:35:19.300 --> 09:35:24.516
and launch it.  So we wanted to 
make it easy.  Just bundle a 

09:35:24.517 --> 09:35:24.715
version of Chrome that's 
guaranteed to work with the 

09:35:24.716 --> 09:35:26.545
version of puppeteer that you 
guys install.  High level of 

09:35:26.546 --> 09:35:28.546
APIs.

09:35:30.013 --> 09:35:31.856
We'll see a bunch of examples of
that.  And so that's why we 

09:35:31.857 --> 09:35:35.737
create puppeteer.  So let's look
at a little bit of code, a 

09:35:35.738 --> 09:35:38.219
little bit of puppeteer code.  
One of the most common things 

09:35:38.220 --> 09:35:40.676
people do is take a screen shot 
of a web page.

09:35:45.176 --> 09:35:45.570
In order to do that, we'll call 
puppeteer launch, a promise that

09:35:45.571 --> 09:35:47.571
will 

09:35:49.085 --> 09:35:51.085
return a browser instance that 
we can 

09:35:52.545 --> 09:35:54.545
interact with headless Chrome.

09:35:56.842 --> 09:35:57.237
This is going to open a new tab 
in Chrome.  It's opening about 

09:35:57.238 --> 09:35:59.238
blank.

09:36:01.512 --> 09:36:04.194
And once that promise resolves, 
we can navigate to the URL that 

09:36:04.195 --> 09:36:07.477
we want to take a screen shot 
of.  That's going to wait for 

09:36:07.478 --> 09:36:12.180
the page's load event to fire, 
and then we can use puppeteer's 

09:36:12.181 --> 09:36:14.181
API to take a screen shot.

09:36:15.232 --> 09:36:17.879
This has a bunch of options, a 
full page screen shot, a portion

09:36:17.880 --> 09:36:21.957
of the page, or a DOM element.  
It's easy.  It's very high 

09:36:21.958 --> 09:36:23.958
level.

09:36:25.250 --> 09:36:27.701
You don't need to deal with 
buffers or responses.  You just 

09:36:27.702 --> 09:36:29.702
pass the file you want to 

09:36:30.979 --> 09:36:32.979
create and you get a png file.

09:36:36.024 --> 09:36:38.024
And lastly, you close the 
browser out

09:36:41.209 --> 09:36:43.209
.  It's like four or five lines 
of code.

09:36:44.490 --> 09:36:46.928
Open a new page, navigate to a 
page, wait for its load event, 

09:36:46.929 --> 09:36:50.194
take a screen shot, close the 
browser.  This is what I mean by

09:36:50.195 --> 09:36:52.195
the high level 

09:36:53.196 --> 09:36:55.196
API

09:36:56.503 --> 09:36:58.503
.  

09:36:59.806 --> 09:37:01.806
There's headless Chrome, and 
this is 

09:37:05.336 --> 09:37:07.794
what we use by default with 
puppeteer launch.  This is just 

09:37:07.795 --> 09:37:12.297
normal Chrome.  If you include 
this headless false flag, this 

09:37:12.298 --> 09:37:14.570
will actually launch Chrome, you
will see it, and this is handy 

09:37:14.571 --> 09:37:17.622
if you're debugging scripts and 
you have no idea what's going 

09:37:17.623 --> 09:37:22.525
on.  Throw this on and you can 
see puppeteer click around, 

09:37:22.526 --> 09:37:25.370
navigate pages and it's cool to 
see this stuff in realtime.

09:37:28.375 --> 09:37:30.375
Approximate 6 

09:37:32.194 --> 09:37:34.194
We've got Chrome dev tools 
protocol, 

09:37:36.364 --> 09:37:39.194
puppeteer, and of course at the 
top is where our automation 

09:37:39.195 --> 09:37:41.233
scripts come in.  So we're 
already standing on the 

09:37:42.274 --> 09:37:46.574
shoulders of giants.  All the 
stuff below us has been iterated

09:37:46.575 --> 09:37:50.032
on for many years.  Let's see 
what you can do with headless 

09:37:50.033 --> 09:37:53.350
Chrome.  Ten awesome things you 
can do with headless Chrome.  

09:37:53.351 --> 09:37:55.351
The first is kind of neat.

09:37:56.593 --> 09:37:59.254
You can pre-render JavaScript 
applications.  If you don't have

09:37:59.255 --> 09:38:02.524
a good server side render story,
you can use headless Chrome to 

09:38:02.525 --> 09:38:07.283
do this for you.  So I wanted to
actually put my words where my 

09:38:07.284 --> 09:38:08.914
mouth is and build an app and 
see if this is a viable 

09:38:08.915 --> 09:38:10.915
solution.

09:38:16.199 --> 09:38:18.199
So I built this dev web fire 
host

09:38:23.447 --> 09:38:25.447
.  It's a clientside app, fire 
store and 

09:38:29.214 --> 09:38:31.472
Firebase, a JSON API so you can 
query the data.  The backend is 

09:38:31.473 --> 09:38:33.473
written in node.

09:38:35.336 --> 09:38:37.336
It runs puppeteer and headless 
Chrome 

09:38:39.669 --> 09:38:43.325
to get a good first meaningful 
ping.  This is the app.  You can

09:38:43.326 --> 09:38:45.793
dive into the index page, the 
main page of the app, and it's a

09:38:45.794 --> 09:38:47.794
basic 

09:38:50.025 --> 09:38:52.025
client-side app

09:38:59.710 --> 09:39:01.710
.  It renders the post into the 
container.

09:39:03.785 --> 09:39:06.682
It creates a template string, 
and it literally enters HTML as 

09:39:06.683 --> 09:39:08.683
the content.

09:39:12.365 --> 09:39:14.365
So that's basically what this 
app does.

09:39:15.365 --> 09:39:15.567
So the goal is to take an 
important page when the page 

09:39:15.568 --> 09:39:19.476
loads and turn it into a static 
version.  That's essentially 

09:39:19.477 --> 09:39:21.747
what prerendering a JavaScript 
app does.  That's the goal.

09:39:25.395 --> 09:39:27.395
We can do this with puppeteer

09:39:36.893 --> 09:39:39.896
.  It will take a URL, launch 
headless Chrome, navigate to the

09:39:39.897 --> 09:39:44.089
URL.  Page content.  It is 
basically getting the new 

09:39:47.093 --> 09:39:49.093
snapshot of the page

09:39:51.275 --> 09:39:53.275
.  It's going to get the mark-up
in the 

09:39:55.009 --> 09:39:59.349
DOM and we grab that.  That's 
the thing that we return in this

09:39:59.350 --> 09:40:01.350
method.  The updated version of 
the page.

09:40:04.264 --> 09:40:06.264
We can put this on a web server 
and render this client side app.

09:40:09.184 --> 09:40:11.418
So somebody will visit our app, 
what headless Chrome is going do

09:40:11.419 --> 09:40:15.094
is fetch the same page.  It will
go off, run the page through 

09:40:15.491 --> 09:40:17.491
Chrome in the cloud.

09:40:20.008 --> 09:40:22.476
I will see the page as written, 
render all of that JavaScript 

09:40:22.477 --> 09:40:24.477
and stuff.  The thing we 
actually return is the 

09:40:27.119 --> 09:40:29.119
final result

09:40:33.563 --> 09:40:35.563
.  

09:40:37.892 --> 09:40:39.892
I'm going to reuse the server 
side 

09:40:41.311 --> 09:40:43.311
method I just called

09:40:47.971 --> 09:40:48.995
.  So any time somebody comes to
visit my home page, I basically 

09:40:48.996 --> 09:40:53.304
just call that server side 
render method.  Just load up the

09:40:53.305 --> 09:40:59.084
index.html file, the client-side
app.  Its will go through 

09:40:59.085 --> 09:41:01.085
headless Chrome.  Run by the 
browser.

09:41:06.212 --> 09:41:06.613
And send the HTML final response
to the user and that's the 

09:41:06.614 --> 09:41:08.614
server side rendering using 
headless Chrome.

09:41:11.708 --> 09:41:14.174
You're probably wondering is 
this fast or a viable solution? 

09:41:14.175 --> 09:41:15.192
I did do a little bit of 
measuring of this, because I was

09:41:15.193 --> 09:41:20.528
curious.  If you slow your 
connection down to be like a 

09:41:20.529 --> 09:41:22.621
mobile device, slow the CPU down
and network, you can see the 

09:41:22.622 --> 09:41:26.628
comparison between the server 
side rendered version on the 

09:41:26.629 --> 09:41:28.629
right and client side on the 
left.

09:41:30.525 --> 09:41:32.589
So server-side-rendered version,
immediately you see the page, 

09:41:32.590 --> 09:41:34.590
the mark-up is in the page.  
It's right there.

09:41:37.459 --> 09:41:38.695
The client side version takes 
longer.  It's got to churn 

09:41:38.696 --> 09:41:41.769
through the JavaScript, render 
the post, and things are slower.

09:41:46.870 --> 09:41:46.936
So you see a performance win on 
slow mobile devices.  And the 

09:41:46.937 --> 09:41:49.078
numbers actually speak for 
themselves.

09:41:53.147 --> 09:41:55.217
You go from 11 second down to 
like a 2.3 second first content.

09:41:58.914 --> 09:42:00.957
And that's how fast those posts 
actually render in the DOM.

09:42:04.423 --> 09:42:06.456
Not only do we make our app 
faster by adding on headless 

09:42:06.457 --> 09:42:08.457
Chrome, but we also make it 
available to search crawlers and

09:42:11.397 --> 09:42:11.711
engines that don't understand 
JavaScript.  So we have two 

09:42:11.712 --> 09:42:14.343
benefits.  
    Now in order to get to those

09:42:16.981 --> 09:42:17.995
numbers, I did make a few more 
optimizations that I want to go 

09:42:17.996 --> 09:42:23.101
through because I think they 
highlight puppeteer's really 

09:42:23.102 --> 09:42:25.313
awesome APIs.  You don't have to
wait for the entire page to 

09:42:25.314 --> 09:42:27.314
load.

09:42:28.486 --> 09:42:30.561
The only thing we care about is 
this list of posts, right? We 

09:42:30.562 --> 09:42:35.065
only care about that mark-up as 
headless Chrome renders it.  If 

09:42:35.066 --> 09:42:36.910
we go back to the server-side 
method, we're waiting for all 

09:42:36.911 --> 09:42:38.952
network requests to be done.

09:42:42.415 --> 09:42:44.415
We DREENLTly care about our 
analytics library to load.

09:42:45.867 --> 09:42:49.602
We don't care about images to 
load or other wasteful things.  

09:42:49.603 --> 09:42:51.603
We care about when is that 
mark-up 

09:42:52.626 --> 09:42:54.626
available

09:43:00.647 --> 09:43:04.313
directly care about our 
analytics library to load.  We 

09:43:00.647 --> 09:43:04.780
don't care about images to load 
or other wasteful things.  We 

09:43:00.647 --> 09:43:02.882
care about when is that mark-up 
available.  What this is going 

09:43:02.883 --> 09:43:05.117
to do is wait for this element 
to be in the dom and visible.

09:43:08.604 --> 09:43:10.604
We're catering now this 
server-side 

09:43:13.421 --> 09:43:15.421
rendering method and catering to
the app

09:43:16.549 --> 09:43:18.549
.  That's not waiting for the 
entire page to load.  

09:43:20.424 --> 09:43:22.517
This is kind of an obvious one 
and it speeds up things quite a 

09:43:22.518 --> 09:43:26.573
bit.  Same method as before, but
we will wrap it in cache.

09:43:30.414 --> 09:43:32.483
Any time somebody comes in in 
for the first time, we will do 

09:43:32.484 --> 09:43:34.732
the pre-rendering and store 
results in the cache and 

09:43:37.174 --> 09:43:38.850
subsequent requests gets served 
from that cache.  It's in 

09:43:38.851 --> 09:43:43.619
memory.  This just goes to show 
you that it's very easy.  You 

09:43:43.620 --> 09:43:45.620
only pay the penalty once for 
the pre-render.  

09:43:47.271 --> 09:43:49.530
Number three is to prevent 
rehydration.  What the heck is 

09:43:49.531 --> 09:43:52.211
rehydration? If you go back to 
our main page, you 

09:43:55.528 --> 09:43:58.625
have the container that gets 
populated by the JSON posts.  

09:43:58.626 --> 09:44:00.326
And if you think about what's 
happening here, the user is 

09:44:00.327 --> 09:44:04.398
going to visit this page in the 
browser, Chrome is going render 

09:44:04.399 --> 09:44:06.448
this in the client, but headless
Chrome is also doing it on the 

09:44:06.869 --> 09:44:08.869
server.

09:44:13.269 --> 09:44:17.297
It's wasteful that we're doing 
this twice.  I check and see if 

09:44:17.298 --> 09:44:19.298
that post container 

09:44:21.888 --> 09:44:24.117
gets added to thedom, and if 
DOM, and I know it's there.

09:44:28.643 --> 09:44:30.643
So that's not optimization that 
you 

09:44:31.840 --> 09:44:33.840
can do

09:44:38.488 --> 09:44:40.769
.  If you think about it, we 
only care about this mark-up, 

09:44:40.770 --> 09:44:42.770
and certain things don't build 
the page.

09:44:45.922 --> 09:44:48.573
So JavaScript can build a page 
with DOM APIs and image tags and

09:44:48.574 --> 09:44:50.574
CSS, they 

09:44:54.052 --> 09:44:56.052
don't actually construct mark-up

09:45:03.564 --> 09:45:05.564
.  What this is going to do is 
give us 

09:45:07.621 --> 09:45:09.621
the ability to intercept all 
network 

09:45:11.548 --> 09:45:14.036
requests before Chrome makes 
them.  If you're one of these 

09:45:14.037 --> 09:45:19.153
requests or scripts or fetch 
events that can generate 

09:45:19.154 --> 09:45:20.786
mark-up, it will allow you to go
through and continue the 

09:45:20.787 --> 09:45:24.371
request.  If you don't.  If 
you're a style sheet, we'll just

09:45:25.389 --> 09:45:27.838
abort the request.  This is 
another cool way that we're 

09:45:32.670 --> 09:45:34.670
speeding up the prerendering 
process

09:45:36.632 --> 09:45:38.632
.  There is a an article that I 
wrote a couple weeks back.

09:45:40.481 --> 09:45:43.156
It's got more optimizations.  
Please give me your feedback.

09:45:51.429 --> 09:45:52.932
I didn't have to change any code
on Tthe app.  I'm curious to 

09:45:52.933 --> 09:45:54.933
know you guys's thoughts.  

09:45:58.509 --> 09:46:00.509
Number two awesome thing you can
do 

09:46:02.205 --> 09:46:04.205
with headless Chrome is verify 
that lazy loading is paying off.

09:46:05.514 --> 09:46:08.229
Sometimes I'll put a bunch of 
effort into my apps and I wonder

09:46:08.230 --> 09:46:11.561
if all of this work is paying 
off.  So you can verify this now

09:46:11.562 --> 09:46:16.493
using puppeteer.  So we have a 
code coverage API that gives you

09:46:16.494 --> 09:46:20.415
the break down of the CSS and 
JavaScript that your app uses.  

09:46:20.416 --> 09:46:22.261
You can start code coverage, do 
a bunch of stuff on the page, 

09:46:22.262 --> 09:46:26.574
navigate around, and then stop 
code coverage.  Dev tools has a 

09:46:26.575 --> 09:46:28.575
panel for this.  You can check 
that out.

09:46:31.045 --> 09:46:33.045
But I wanted to go one step 
further 

09:46:35.894 --> 09:46:37.894
and analyze the page

09:46:39.416 --> 09:46:41.481
.  Over the course of page load,
and eventually when the entire 

09:46:41.482 --> 09:46:44.386
page is loaded, it will give us 
the print out of everything 

09:46:44.387 --> 09:46:46.387
that's going on.

09:46:48.259 --> 09:46:50.259
So you can see the URL itself, 
I'm 

09:46:52.345 --> 09:46:53.967
using about 37% of my JavaScript
and CSS resources at that point 

09:46:53.968 --> 09:46:58.252
in time.  As the page 
progresses, I'm using more and 

09:46:58.253 --> 09:47:02.531
more of the files as you would 
probably expect.  This 

09:47:02.532 --> 09:47:05.167
highlights that I'm lazy loading
things.  The second resource, 

09:47:05.168 --> 09:47:07.168
the second set of 

09:47:10.233 --> 09:47:15.582
bars, you can see it's not 
uselize utilized at all. 

09:47:36.549 --> 09:47:38.190
If you're familiar with 
Istanbul, it gets puppeteer's 

09:47:38.191 --> 09:47:40.191
coverage and run this 

09:47:42.759 --> 09:47:44.809
thing and get the exact Istanbul
HTML output, which is nice.  So 

09:47:44.810 --> 09:47:46.810
check that out.  Number three is
A/B testing.

09:47:51.892 --> 09:47:53.892
There's that word testing again

09:47:56.049 --> 09:47:58.049
.  So I want to measure if it's 
faster 

09:48:00.772 --> 09:48:02.772
to inline styles versus just 
having my 

09:48:05.252 --> 09:48:07.252
style sheets be linked style 
sheets

09:48:11.421 --> 09:48:13.421
.  Normally you would ship two 
versions and measure that.

09:48:17.156 --> 09:48:19.156
But with puppeteer, you don't 
have to 

09:48:20.618 --> 09:48:22.618
do it that way

09:48:25.462 --> 09:48:27.316
.  For any style sheet response 
I get, when I check the resource

09:48:27.317 --> 09:48:29.317
type, I will 

09:48:30.403 --> 09:48:32.403
stash the CSS text, the content 
of the 

09:48:35.039 --> 09:48:37.039
files inside of a map, the layer

09:48:38.607 --> 09:48:40.607
.  Navigate to the URL, and 
we're using 

09:48:47.565 --> 09:48:49.565
a new method, double dollar sign

09:48:54.203 --> 09:48:56.872
.  By call back is going to to 
get injected into the page.

09:48:59.947 --> 09:49:01.947
In here you can run anything the

09:49:03.753 --> 09:49:05.753
browser supports

09:49:13.391 --> 09:49:15.004
.  It replaces all link tags 
with a style tag.  So I'm 

09:49:15.005 --> 09:49:16.635
replacing the style sheets with 
the equivalent style tag on the 

09:49:16.636 --> 09:49:22.021
fly.  And that's actually what 
gets served up.  You can run 

09:49:22.022 --> 09:49:24.022
this on a server, do a 

09:49:25.731 --> 09:49:27.570
script to do a side-by-side 
comparison.  And we have not 

09:49:27.571 --> 09:49:29.571
changed the page, we just use 
puppeteer to live modify the 

09:49:30.033 --> 09:49:32.033
request that I made.  That's 
doing A/B testing.  

09:49:35.362 --> 09:49:37.194
Number four is to catch 
potential issues with the Google

09:49:37.195 --> 09:49:39.195
crawler.

09:49:40.471 --> 09:49:42.518
A couple weeks back, I built 
this fire host app and I 

09:49:42.519 --> 09:49:44.519
realized after I pushed 

09:49:46.201 --> 09:49:48.201
it to production and I hit the 
render as 

09:49:49.447 --> 09:49:51.484
Google button that my app 
doesn't render correctly in 

09:49:51.485 --> 09:49:53.485
Google BOT because it runs 

09:49:56.149 --> 09:49:58.149
a super old version of Chrome

09:49:59.249 --> 09:50:01.249
.  I was kind of hosed.  What do
I do?

09:50:04.372 --> 09:50:06.207
I said hey, could we use 
puppeteer to catch this or have 

09:50:06.208 --> 09:50:08.208
an early warning signal before 
shipping your app?

09:50:12.067 --> 09:50:14.067
The answer is yes

09:50:23.409 --> 09:50:25.409
.  So I can start a trace and 
stop a trace when ever I want.

09:50:28.743 --> 09:50:30.743
And basically you get this huge 
JSON 

09:50:32.447 --> 09:50:33.667
file that you can take action 
on.  You can pull out all of the

09:50:33.668 --> 09:50:35.668
features 

09:50:37.884 --> 09:50:39.884
used by a page

09:50:42.065 --> 09:50:46.342
.  Then you can correlate that 
with can I use data.  So that's 

09:50:46.343 --> 09:50:49.005
what this script does.  It will 
tell you the features that 

09:50:51.641 --> 09:50:53.641
you're using that are not 
available on Chrome 41.

09:51:01.948 --> 09:51:03.948
None of that stuff is available 
in the Google search box.

09:51:06.273 --> 09:51:08.273
So this is a cool early warning 
signal 

09:51:09.357 --> 09:51:11.357
if your app might not render 
correctly 

09:51:12.562 --> 09:51:15.260
in Google search.  

09:51:19.146 --> 09:51:21.146
Number five, create custom PDFs.

09:51:23.442 --> 09:51:25.442
A lot of people like to create 
PDFs of their web pages.

09:51:29.047 --> 09:51:29.449
I don't understand it, but a lot
of people do.  We have an API 

09:51:29.450 --> 09:51:31.450
for it.  You can go up to the 
big lighthouse, 

09:51:36.401 --> 09:51:39.046
input a URL and puppeteer spawns
up three different tools.  It 

09:51:39.047 --> 09:51:40.066
runs web page test, lighthouse, 
and page speed insight all at 

09:51:40.067 --> 09:51:42.067
once.

09:51:45.421 --> 09:51:48.095
Eventually what happens is you 
get this overall report of the 

09:51:48.096 --> 09:51:50.096
PDFs of each 

09:51:51.512 --> 09:51:53.512
one of the tools

09:51:59.352 --> 09:52:01.352
.  We create a new page.

09:52:03.232 --> 09:52:05.232
We're building an HTML page by 
giving it a string.

09:52:07.498 --> 09:52:09.498
We'll set a view port because we
want the page to be big.

09:52:12.834 --> 09:52:14.496
We'll use the view port and 
emulation APIs to create a big 

09:52:14.497 --> 09:52:16.497
page.

09:52:18.165 --> 09:52:20.165
And last but not least, similar 
to 

09:52:24.640 --> 09:52:27.374
screen shots, create a PDF of 
THAthat page that you're 

09:52:27.375 --> 09:52:29.375
visiting.

09:52:32.404 --> 09:52:34.404
You

09:52:36.424 --> 09:52:36.634
can give a header, footer, 
stylize the page, you can do it 

09:52:36.635 --> 09:52:39.723
in puppeteer.  You don't need a 
JavaScript library to create 

09:52:39.724 --> 09:52:42.366
PDFs anymore, just use the tool 
on your system, which is the 

09:52:42.367 --> 09:52:46.454
browser.  

09:52:49.563 --> 09:52:51.802
Number six is make your browser 
talk.  It will read a text file 

09:52:51.803 --> 09:52:53.803
in node and 

09:52:55.336 --> 09:52:57.336
it will open a page that uses 
the web 

09:53:00.418 --> 09:53:02.418
synthesis tool

09:53:04.323 --> 09:53:06.982
.  
   &gt;&gt; Hi there, my name is 

09:53:06.983 --> 09:53:10.685
puppeteer.  I clicked the speak 
button on this page to start 

09:53:10.686 --> 09:53:12.686
talking to you.

09:53:17.690 --> 09:53:19.799
I'm able to speak using the -- 
TLDR, the rise of the machines 

09:53:19.800 --> 09:53:23.445
has begun.  Bye for now.  
   &gt;&gt; We're not quite there, but

09:53:23.446 --> 09:53:25.446
ITS kind of a cool example.

09:53:36.160 --> 09:53:38.834
it's kind of a cool example.  
I'm also using executable path.

09:53:43.349 --> 09:53:45.193
I'm opening Chrome canary, and 
not the bundled version that 

09:53:45.194 --> 09:53:47.194
gets shipped with puppeteer.

09:53:49.070 --> 09:53:50.301
The web speech synthesis API in 
the open sourced version of 

09:53:50.302 --> 09:53:52.773
Chrome doesn't have that cool 
British accent.

09:54:04.364 --> 09:54:09.097
    We'll use a new API called 
evaluate on document.  It will 

09:54:09.098 --> 09:54:12.346
run this before any of the other
pages' JavaScript runs.  This 

09:54:12.347 --> 09:54:14.430
gets injected in the page.  I'm 
being silly and setting a global

09:54:16.664 --> 09:54:19.404
variable and creating a global 
variable in the page called text

09:54:19.405 --> 09:54:22.372
to speech and sending it to the 
content of the file they read.

09:54:25.875 --> 09:54:27.883
That's how the message gets into
the page.  What I do is I read 

09:54:27.884 --> 09:54:29.884
the page, just the 

09:54:30.890 --> 09:54:31.978
HTML file, and instead of 
starting a web server, I 

09:54:31.979 --> 09:54:34.908
navigate to the data URL version
of it.  I'm kind of on the fly 

09:54:34.909 --> 09:54:36.909
opening the page.  And then the 
last thing that I do is I 

09:54:40.499 --> 09:54:42.499
click that speak button using 
page.

09:54:49.073 --> 09:54:51.073
$ and that's what kicks off this
reading of the text.  

09:54:52.375 --> 09:54:54.016
Number seven, awesome thing you 
can do is test Chrome 

09:54:54.017 --> 09:54:57.085
extensions.  I don't know how 
people tested or test their 

09:54:57.086 --> 09:55:01.594
Chrome extensions.  But you 
could certainly test your Chrome

09:55:01.595 --> 09:55:03.840
extensions using puppeteer.  I'm
going to show you guys a real 

09:55:04.255 --> 09:55:08.950
example.  I'm going to run the 
lighthouse Chrome extension's 

09:55:08.951 --> 09:55:13.641
real unit test.  They decided to
use puppeteer because they would

09:55:13.642 --> 09:55:16.499
ship code and their extension 
would break.  We wanted to fix 

09:55:16.500 --> 09:55:18.500
that so we wrote a test.

09:55:20.220 --> 09:55:22.220
This will use puppeteer to 
launch a 

09:55:23.224 --> 09:55:28.022
tab.  You can see it in a 
corner.  It's actually been 

09:55:28.023 --> 09:55:30.023
started and inside 

09:55:34.184 --> 09:55:36.015
of the bars at the top, it is 
being debugged and Chrome is 

09:55:36.016 --> 09:55:40.558
automated by puppeteer.  
Lighthouse is just running.  It 

09:55:40.559 --> 09:55:42.591
reloads the page and gives you a
report, and eventually all the 

09:55:42.592 --> 09:55:45.867
tests pass, which is really 
cool.  I know that was a lot and

09:55:45.868 --> 09:55:49.520
very fast.  How did we do that? 
How are they testing their 

09:55:49.521 --> 09:55:51.521
extension?

09:55:54.413 --> 09:55:57.283
The important bit is we have to 
use headful Chrome because 

09:55:57.284 --> 09:55:59.284
headless does not support full 
extensions.

09:56:01.402 --> 09:56:03.827
And we can use these arguments 
to pass in our extension 

09:56:03.828 --> 09:56:05.828
directory to load Chrome with.

09:56:12.388 --> 09:56:14.445
The lighthouse team grabbed the 
background page and they will 

09:56:14.446 --> 09:56:16.446
run one of 

09:56:20.763 --> 09:56:22.763
the background page's JavaScript
methods

09:56:26.134 --> 09:56:28.177
.  That's actually what ticks 
off actually running lighthouse 

09:56:28.178 --> 09:56:31.637
inside the Chrome extension.  So
that's how they're able to test 

09:56:32.658 --> 09:56:35.106
their Chrome extension.  
    Number eight awesome thing 

09:56:35.107 --> 09:56:40.039
you can do, you can crawl single
page application.  Maybe you 

09:56:40.040 --> 09:56:42.040
want to visualize your app.

09:56:43.138 --> 09:56:45.138
Maybe you don't note all of your
URLs.

09:56:51.666 --> 09:56:53.666
Maybe you want a suite 
vizsualization

09:56:57.033 --> 09:56:59.294
.  So to do this, you can 
discover all the page on your 

09:56:59.295 --> 09:57:04.012
page.  Grab all the anchors on 
the page.  This is going to get 

09:57:04.013 --> 09:57:08.285
run inside of the page and we 
look for all the anchors.  Are 

09:57:08.286 --> 09:57:11.990
they the same origin as the 
page? Are they part of our app? 

09:57:11.991 --> 09:57:14.657
And are they not the app we're 
actually viewing? We don't want 

09:57:14.658 --> 09:57:16.658
to render ourselves.

09:57:18.551 --> 09:57:20.383
So we return the unique set, run
this recursively, and that's the

09:57:20.384 --> 09:57:22.384
way I created the D3 
visualization.

09:57:28.322 --> 09:57:30.322
You can do not just a list of 
links

09:57:32.244 --> 09:57:34.244
.  You can take a screen shot or

09:57:36.365 --> 09:57:38.815
generate a PF or what have you. 
    Number nine is one of my 

09:57:38.816 --> 09:57:42.092
favorites.  Verify service 
workers are actually caching all

09:57:42.093 --> 09:57:46.216
of your app.  Every time I use 
service worker, I always leave 

09:57:46.217 --> 09:57:50.712
something out.  I always forget 
to cache something in the cache,

09:57:50.713 --> 09:57:52.713
which means somebody comes 

09:57:53.804 --> 09:57:56.066
back to my page and my app 
doesn't work offline and they 

09:57:56.067 --> 09:57:59.643
get a 404 that the image is 
broke or something.  We can 

09:57:59.644 --> 09:58:01.644
verify that is not the case 

09:58:04.494 --> 09:58:06.494
using some of puppeteer's APIs

09:58:11.587 --> 09:58:13.587
.  

09:58:14.859 --> 09:58:17.517
Next thing we do is we look for 
all network requests.  Any 

09:58:17.518 --> 09:58:19.518
request that happens on the 
page, 

09:58:22.220 --> 09:58:24.220
we'll use a network interception
and 

09:58:25.505 --> 09:58:27.374
take a list of URLs that the 
network gets.  After that, we 

09:58:27.375 --> 09:58:29.375
reload the page.  We want to 
know what's coming from the 

09:58:31.676 --> 09:58:33.676
network and what gets served 
from the service worker cache.

09:58:35.357 --> 09:58:38.480
At this point, service worker 
has been installed.  It's cached

09:58:38.481 --> 09:58:41.770
its resources, and we can check 
and see where things come from. 

09:58:41.771 --> 09:58:43.771
That's where the last line comes
from.

09:58:45.634 --> 09:58:47.084
It loops through the requests 
that get made on the page.  It 

09:58:47.085 --> 09:58:49.305
checks the responses and 
determines if they come from the

09:58:49.306 --> 09:58:52.407
service worker or if they come 
from the network.  Here's an 

09:58:52.408 --> 09:58:54.408
example of the script.

09:58:55.456 --> 09:58:57.698
You can basically see on Chrome 
status, everything is cached, 

09:58:57.699 --> 09:58:59.699
which is great.

09:59:02.606 --> 09:59:04.606
So you get a green check

09:59:11.138 --> 09:59:12.795
.  That was a choice to not 
cache analytics requests, but 

09:59:12.796 --> 09:59:14.796
everything else gets cached 
offline.  

09:59:16.472 --> 09:59:18.714
So the last cool thing, and 
there's many more things you can

09:59:18.715 --> 09:59:21.568
do, but the last thing I have 
time for is to procrastinate.

09:59:25.037 --> 09:59:27.037
I didn't have a demo of the 
keyboard 

09:59:28.361 --> 09:59:31.026
API and touch emulation, but 
what this is going to do is 

09:59:31.027 --> 09:59:33.027
basically open the 

09:59:34.511 --> 09:59:38.577
Google pac-man doodle from a 
couple years ago and play it in 

09:59:34.511 --> 09:59:36.511
node.

09:59:39.460 --> 09:59:42.344
So I'm going to get keyboard 
events and eventually the game 

09:59:42.345 --> 09:59:46.440
will fire up, I'm forwarding the
key presses to the page, and the

09:59:46.441 --> 09:59:48.903
page has JavaScript that knows 
how to handle key presses so I'm

09:59:53.129 --> 09:59:57.522
able to play pac-man in node.  
Somebody likes it.  

09:59:59.757 --> 10:00:01.757
[ Applause ] 

10:00:03.144 --> 10:00:05.394
Before we wrap up, there is a 
number of useful things that I 

10:00:05.395 --> 10:00:07.395
want to draw your attention to. 
Sites and tools.

10:00:09.883 --> 10:00:11.883
The first one is puppeteer as a 
service.

10:00:13.183 --> 10:00:14.795
The notion that you can run 
headless Chrome, the browser as 

10:00:14.796 --> 10:00:17.454
a web service.  We actually put 
on handlers in the cloud.

10:00:22.829 --> 10:00:23.222
So this first one here, you 
know, you pass to the URL and it

10:00:23.223 --> 10:00:25.223
takes a screen 

10:00:26.519 --> 10:00:27.531
shot and does all of that stuff 
in the background.  But you can 

10:00:27.532 --> 10:00:29.532
think about baking 

10:00:31.962 --> 10:00:33.962
headless Chrome into your web 
service

10:00:39.872 --> 10:00:41.504
.  We have an awesome GitHub 
repository.  A lot of useful 

10:00:41.505 --> 10:00:43.505
stuff there.

10:00:44.771 --> 10:00:46.771
If you want to see anything else

10:00:50.829 --> 10:00:52.829
implemented, I will show you a 
demo

10:00:58.320 --> 10:01:00.338
.  Play with the code, run 
demos, see the results, and you 

10:01:00.339 --> 10:01:02.339
don't have to install anything 
to work with puppeteer.  

10:01:03.221 --> 10:01:05.221
So that was a lot of stuff.

10:01:06.684 --> 10:01:08.684
We covered a lot of things 
headless Chrome can do.

10:01:11.202 --> 10:01:13.202
Things like server-side 
rendering, 

10:01:14.520 --> 10:01:16.520
pre-rendering your apps, A/B 
testing, 

10:01:17.578 --> 10:01:20.635
making the Google search BOT 
happy, creating PDFs.  Hopefully

10:01:20.636 --> 10:01:22.636
you realize that automation is a
thing.

10:01:24.307 --> 10:01:26.389
It's not just about testing but 
about making your app more 

10:01:26.390 --> 10:01:30.464
productive and yourself as a 
developer more productive.  So 

10:01:30.465 --> 10:01:32.742
headless Chrome is a front end 
for your front end.

10:01:36.227 --> 10:01:37.246
You can find me online if you 
want to converse with me after 

10:01:37.247 --> 10:01:39.470
the show.  I will leave this one
up here which 

10:01:42.746 --> 10:01:45.353
has a great list of things that 
you can take a screen shot of.  

10:01:45.354 --> 10:01:46.181
Thank you for sticking around.  
I really appreciate you coming. 

10:01:49.196 --> 10:01:51.196
[ Applause ] 

10:19:15.623 --> 10:19:18.613
 Clara Bayarri

10:19:24.834 --> 10:19:26.834
Florina Muntensescu

10:19:32.346 --> 10:19:34.346
Siyamed Sinir Kara Erickson

10:28:12.660 --> 10:28:14.660
. 

10:28:16.788 --> 10:28:18.788
&gt;&gt; CLARA BAYARRI: Hello.

10:28:19.903 --> 10:28:21.903
   &gt;&gt; FLORINA MUNTENSESCU: 
Hello. 

10:28:25.693 --> 10:28:27.945
&gt;&gt; SIYAMED SINIR: And hi.  
   &gt;&gt; CLARA BAYARRI: Text is a 

10:28:27.946 --> 10:28:31.673
major part of your app.  I's 
part of who you are and the 

10:28:31.674 --> 10:28:35.748
major thing that your users will
be consuming.  It is the first 

10:28:35.749 --> 10:28:38.429
thing that your users will read 
and the thing that will mostly 

10:28:40.704 --> 10:28:42.704
affect usability, accessibility,
all of that.

10:28:44.394 --> 10:28:46.435
On top of that, the Android text
app is responsible for emoji, 

10:28:46.436 --> 10:28:48.436
which we all love.

10:28:50.553 --> 10:28:52.438
All of this obviously comes at a
cost.  There's a bunch of 

10:28:52.439 --> 10:28:55.385
performance implications related
to text that we want you to be 

10:28:55.386 --> 10:28:57.386
aware of.

10:28:59.415 --> 10:28:59.594
Today we're going to go through 
best practices and things you 

10:28:59.595 --> 10:29:01.595
should know.  Let's talk about 
the architecture.

10:29:04.529 --> 10:29:06.593
We want to explain how the tech 
stack is fitted within Android 

10:29:06.594 --> 10:29:07.822
so you can better understand 
what we're going to talk about 

10:29:07.823 --> 10:29:09.823
later.

10:29:15.209 --> 10:29:17.209
It is split into two parts, java
code 

10:29:18.216 --> 10:29:20.975
and native C++ code.

10:29:24.683 --> 10:29:26.192
Text view and edit text provide 
text functionality out of the 

10:29:26.193 --> 10:29:29.650
box and do everything for you.  
If you have custom views or 

10:29:29.651 --> 10:29:32.314
don't want to use our widget, 
then you are probably 

10:29:36.337 --> 10:29:38.337
using the second layer

10:29:40.401 --> 10:29:42.401
.  

10:29:44.505 --> 10:29:46.578
Once get into the native is the 
very first layer we call 

10:29:46.579 --> 10:29:48.579
Minikin.

10:29:50.693 --> 10:29:53.741
It is a our first point of 
contact with C++.  Below that, 

10:29:53.742 --> 10:29:56.210
there's a bunch of libraries we 
use to help us.

10:30:02.697 --> 10:30:04.697
ICU, HarfBuzz

10:30:07.339 --> 10:30:09.339
, FreeType, and finally Skia.

10:30:13.850 --> 10:30:15.850
Today we will focus on the top 
three

10:30:18.457 --> 10:30:20.725
.  
   &gt;&gt; SIYAMED SINIR: It's main 

10:30:22.345 --> 10:30:24.409
responsibilities are text 
layout, measurement and line 

10:30:24.410 --> 10:30:26.410
breaking.

10:30:30.917 --> 10:30:32.917
It is emptyimportant to 
understand

10:30:34.790 --> 10:30:36.790
--

10:30:42.361 --> 10:30:44.361
if you provide a string like 
this to

10:30:46.750 --> 10:30:49.617
Minikin, it has to identify the 
glifs, and you can think of it 

10:30:49.618 --> 10:30:51.618
as an image to 

10:30:52.639 --> 10:30:54.639
be drawn

10:31:04.606 --> 10:31:06.606
.  Glyph is

10:31:08.769 --> 10:31:10.798
s can be found in different 
fonts.  At this point, 

10:31:10.799 --> 10:31:12.799
positioning is not 

10:31:14.743 --> 10:31:17.598
always putting the glyph side by
side, which is the case with the

10:31:17.599 --> 10:31:19.599
letter e here.

10:31:22.388 --> 10:31:24.237
If you provide a longer string, 
Minikin can divide it into 

10:31:24.238 --> 10:31:29.138
words.  The result of this 
measurement is put into a cache 

10:31:29.139 --> 10:31:31.139
so that if the system comes 

10:31:32.605 --> 10:31:34.605
across the same word again, it 
can call the computed value.

10:31:37.504 --> 10:31:39.504
This has a fixed size of 5,000. 

10:31:42.704 --> 10:31:44.123
When a string is wider than the 
other, there has to be a line 

10:31:44.124 --> 10:31:48.894
break.  In the simplest case 
this is putting the boxes side 

10:31:48.895 --> 10:31:50.924
by side until the boundary is 
reached and then moving to 

10:31:54.149 --> 10:31:56.149
the next slide

10:31:59.341 --> 10:32:03.179
.  Minikin will distribute the 
words to have better text 

10:32:03.180 --> 10:32:05.180
alignment.

10:32:06.234 --> 10:32:08.234
The default is high quality, 
which is 

10:32:09.903 --> 10:32:11.903
similar to balance, except a few
subtle 

10:32:14.539 --> 10:32:16.539
DIRVESs, one of them being 
hyphenation

10:32:19.206 --> 10:32:20.423
.  Hyphenation improves the 
alignment of thestring and use 

10:32:20.424 --> 10:32:25.381
of white space.  It comes with a
cost.  The cost arises because 

10:32:25.382 --> 10:32:27.450
now the system has to measure 
more words, and it has to 

10:32:29.696 --> 10:32:32.371
compare more configurations for 
an optimum solution.

10:32:39.775 --> 10:32:42.683
After Android P, enabling 
hyphenation is two and a half 

10:32:42.684 --> 10:32:45.349
times more expensive than the 
disabled case.  

10:32:47.788 --> 10:32:49.788
Another thing that affects 

10:32:53.057 --> 10:32:56.834
hyphenation is the lowcale.  We 
have a device in the English and

10:32:59.361 --> 10:33:01.365
two example strings.  One of 
them is not hyphenated 

10:33:03.389 --> 10:33:05.389
correctly, and the other did not
choose 

10:33:07.439 --> 10:33:10.693
the right character for the 
Japanese text.  It happens 

10:33:10.694 --> 10:33:12.694
because the system is not 

10:33:13.742 --> 10:33:15.742
aware of the languages of those 
strings.

10:33:18.431 --> 10:33:19.680
To fix this, we have to tell the
system about the language using 

10:33:19.681 --> 10:33:21.681
the set 

10:33:23.294 --> 10:33:26.249
text locale function.  You can 
use it to mark different parts 

10:33:26.464 --> 10:33:28.464
of the string.

10:33:29.932 --> 10:33:31.973
However, keep in mind that the 
number of locale spots affects 

10:33:31.974 --> 10:33:33.974
the performance 

10:33:35.808 --> 10:33:37.808
of the text layout.  

10:33:40.627 --> 10:33:42.037
&gt;&gt; FLORINA MUNTENSESCU: We 
usually start working with the 

10:33:42.038 --> 10:33:44.038
text attributes 

10:33:45.859 --> 10:33:47.937
and set the text size, color, 
and font.  We call this a single

10:33:47.938 --> 10:33:53.126
style because all of these 
attributes affect the entire 

10:33:53.127 --> 10:33:55.127
text from the text view.

10:33:59.394 --> 10:34:01.394
But for designers, this is not 
enough.

10:34:02.529 --> 10:34:04.541
What they want is to apply 
multiple style to the same text 

10:34:04.542 --> 10:34:06.542
block.

10:34:07.809 --> 10:34:09.809
So in order to achieve this in 

10:34:11.830 --> 10:34:13.830
Android, we work with spoon

10:34:15.431 --> 10:34:17.431
spans.

10:34:18.940 --> 10:34:21.201
They can affect character and 
paragraph spans, depending on 

10:34:21.202 --> 10:34:23.454
whether they apply to a few 
characters or entire paragraphs.

10:34:25.507 --> 10:34:27.597
And then character spans can be 
split into appearance and metric

10:34:27.598 --> 10:34:32.360
affecting.  And the difference 
between them lies in the method 

10:34:32.361 --> 10:34:34.361
that needs to be called on 

10:34:36.276 --> 10:34:38.276
the text view in order to render
the size.

10:34:39.543 --> 10:34:41.543
Appearance affecting spans 
require a redraw to be called.

10:34:43.852 --> 10:34:47.145
Metric affecting spans require 
both a remeasure and a redraw.  

10:34:47.146 --> 10:34:49.146
Let's see an example.

10:34:52.478 --> 10:34:54.588
So let's say we need to style a 
code block.  First we would 

10:34:54.589 --> 10:34:57.253
change the background color.  
For this we would use a 

10:34:57.254 --> 10:34:59.498
background color span.  This 
doesn't change the metric of the

10:35:00.147 --> 10:35:07.124
text.  So this means this is an 
appearance aFEKTSing span.  But 

10:35:07.125 --> 10:35:09.125
we also needed to change the 
font.

10:35:11.454 --> 10:35:13.454
So for this, we would use a type
face 

10:35:14.476 --> 10:35:16.476
span

10:35:27.501 --> 10:35:31.434
ffecting span.  But we also 
needed to change the font.  So 

10:35:27.501 --> 10:35:29.501
for this, we would use a type 
face span.  

10:35:29.530 --> 10:35:31.582
Paragraph spans like the bullet 
span have to be attached from 

10:35:31.583 --> 10:35:34.239
the beginning of the paragraph 
and affect the entire text of 

10:35:34.240 --> 10:35:38.122
the paragraph.  The thing is 
that if you don't attach it from

10:35:38.123 --> 10:35:40.373
the beginning of the paragraph, 
chances are you'll lose the 

10:35:40.374 --> 10:35:42.374
styling completely.

10:35:44.685 --> 10:35:47.152
So, in the framework, we define 
a series of interfaces and 

10:35:47.153 --> 10:35:51.662
abstract classes.  And under the
hood, the framework checks for 

10:35:51.663 --> 10:35:53.923
instances of these classes and 
triggers different actions 

10:35:53.924 --> 10:35:55.924
depending 

10:35:57.132 --> 10:36:01.535
on them.  But what makes spans 
so powerful is the fact that 

10:36:01.536 --> 10:36:03.536
they give you access to 

10:36:06.076 --> 10:36:08.330
the things like TextPaint and 
Canvas.  You can pretty much 

10:36:08.331 --> 10:36:10.331
handle everything you need in 
terms of text.  

10:36:12.508 --> 10:36:14.380
So first of all, whenever you 
need a span, check the ones that

10:36:14.381 --> 10:36:19.301
are available in the framework, 
because they cover most of the 

10:36:19.302 --> 10:36:22.768
common use cases.  
    Okay.  But if you go back to

10:36:22.769 --> 10:36:24.769
our example, we 

10:36:27.464 --> 10:36:29.464
see the type face span only gets
a types 

10:36:33.675 --> 10:36:35.675
a type face starting with 
Android P.

10:36:38.212 --> 10:36:39.868
To create a custom span, we 
would do a metric affecting 

10:36:39.869 --> 10:36:45.391
span.  To update measure state, 
which is called when text view 

10:36:45.392 --> 10:36:49.866
on measure is called, and on the
draw state, which is called when

10:36:49.867 --> 10:36:51.867
the text on draw method is 
called.

10:36:53.327 --> 10:36:55.327
And both of these methods give 
us access to the text span.

10:36:58.169 --> 10:37:00.169
Here all we need to do is change
the type face.

10:37:01.687 --> 10:37:04.343
But if we have the text span, it
means that we can also set the 

10:37:04.344 --> 10:37:06.344
background color.

10:37:08.671 --> 10:37:11.109
It means that we can create one 
code block span to file our code

10:37:11.110 --> 10:37:13.566
block.  
    So now we have two different

10:37:13.567 --> 10:37:15.567
ways of styling our code block.

10:37:18.722 --> 10:37:20.990
One with composing multiple 
spans, one from the framework, 

10:37:20.991 --> 10:37:25.496
and another one where we're 
using a custom span.  So which 

10:37:25.497 --> 10:37:27.497
one should you use?

10:37:32.296 --> 10:37:34.296
To help you decide, remember 
only 

10:37:37.423 --> 10:37:39.423
framework spans can be 
parcelled.

10:37:41.373 --> 10:37:43.210
First when we're passing text 
via intents or when we're 

10:37:43.211 --> 10:37:48.338
copying text.  If we're copying 
from a text view to an edit in 

10:37:48.339 --> 10:37:50.988
the same activity or whether 
we're copying from one 

10:37:50.989 --> 10:37:53.645
application to another, the text
gets to be parcelled 

10:37:57.530 --> 10:38:00.193
and unparcelled via the 
clipboard service.  If we're 

10:38:00.194 --> 10:38:03.094
passing with one framework span 
and one custom span, just our 

10:38:06.597 --> 10:38:09.255
framework spans are tossed.  But
if we're passing a text with one

10:38:11.549 --> 10:38:13.549
custom span, it means that no 
styling will be kept.

10:38:16.293 --> 10:38:18.122
So in general, when you're 
implementing spans and the text 

10:38:18.123 --> 10:38:22.813
gets parcelled, consider the 
behavior you want.  Should the 

10:38:22.814 --> 10:38:24.814
style be partially kept or 

10:38:25.831 --> 10:38:29.404
not? 
   &gt;&gt; CLARA BAYARRI: So how do 

10:38:29.405 --> 10:38:31.405
we use spans in text?

10:38:33.859 --> 10:38:35.859
The first one

10:38:42.869 --> 10:38:44.869
is is spans.  It gets you query 
spans but not modify them.

10:38:49.458 --> 10:38:51.458
If you want to modify, you get 
spanable.

10:38:54.171 --> 10:38:56.649
Then we have three concrete 
implementations of these 

10:38:56.650 --> 10:38:58.650
interfaces.  The first is 
spannedString and has 

10:39:01.801 --> 10:39:03.801
immutable text and immutable 
markup.

10:39:06.134 --> 10:39:08.134
Spanable string has immutable 
text but 

10:39:09.599 --> 10:39:11.599
mutable markup, and finally we 
have 

10:39:14.271 --> 10:39:16.271
Stanable string build

10:39:19.021 --> 10:39:21.263
spanable string builder.  
Spanable string holds an array 

10:39:21.264 --> 10:39:23.264
of 

10:39:25.130 --> 10:39:27.130
spans, whereas spanable string 
builder holds a tree of spans.

10:39:29.463 --> 10:39:31.105
So as a team, we were wondering,
well, is the tree more 

10:39:31.106 --> 10:39:35.594
efficient? Maybe there's a case 
where we want to recommend 

10:39:35.595 --> 10:39:37.017
people to only use spanable 
string builder all the time 

10:39:37.018 --> 10:39:41.349
because it's more efficient, so 
we ran tests.  Up to 250 spans, 

10:39:41.350 --> 10:39:44.231
they're the same.  They 
basically perform equally, so we

10:39:46.476 --> 10:39:48.554
recommend you do what makes the 
most sense, which is use 

10:39:48.555 --> 10:39:50.555
spanable string for 

10:39:51.848 --> 10:39:53.848
immutable text, spanable string 
builder 

10:39:54.860 --> 10:40:02.306
for mutable text.  But after 250
strings, we recommend you use 

10:40:02.307 --> 10:40:04.307
spanable string builder for all.

10:40:06.222 --> 10:40:07.665
We ran the tests to the limits. 
When you have thousands of 

10:40:07.666 --> 10:40:11.744
spans, they really diverge, but 
we really hope this is not a 

10:40:11.745 --> 10:40:13.745
common use case for anyone.  

10:40:14.856 --> 10:40:17.344
Another common thing we see with
spans is people trying to check 

10:40:17.345 --> 10:40:19.345
if one span is present within a 
spanable.

10:40:21.474 --> 10:40:23.944
And the solution we have seen 
online uses spanned.getSpans.

10:40:28.567 --> 10:40:30.567
You query, get an array

10:40:32.910 --> 10:40:34.931
back and check if the array is 
empty.  This is inefficient.  

10:40:34.932 --> 10:40:36.977
You're going through an entire 
span, collecting them all into 

10:40:36.978 --> 10:40:38.978
an array, and checking if that 
array is empty.

10:40:42.541 --> 10:40:44.541
There's a better way to do this,
which is next span transition.

10:40:47.671 --> 10:40:49.671
When you ask for the first 
boundary of 

10:40:50.878 --> 10:40:52.878
a certain span

10:40:55.495 --> 10:40:56.918
, it will just have to do the 
work, and then it can stop and 

10:40:56.919 --> 10:40:58.919
it won't collect spans into an 
array.  

10:41:00.198 --> 10:41:02.198
&gt;&gt; FLORINA MUNTENSESCU: A 
frequent 

10:41:05.959 --> 10:41:06.596
task is styling international 
text.  Usually in your 

10:41:06.597 --> 10:41:07.634
resources, you will define the 
same string in multiple 

10:41:07.635 --> 10:41:12.544
languages.  But then you need to
highlight one specific word.

10:41:15.596 --> 10:41:17.036
Here we want the word "text" to 
be bold.  The word and where it 

10:41:17.037 --> 10:41:19.037
appears is different in every 
language.

10:41:24.653 --> 10:41:26.921
One easy solution would be to 
just use HTML tags.  But the 

10:41:26.922 --> 10:41:29.578
problem with this is they have 
limited functionality.  If, for 

10:41:29.579 --> 10:41:31.828
example, we want to change the 
font, well, this is not 

10:41:31.829 --> 10:41:34.691
something that HTML can provide.
The solution for this is to use 

10:41:35.750 --> 10:41:37.750
annotation tags.

10:41:39.436 --> 10:41:41.681
So, the annotation tag allows us
to set key and value pairs and 

10:41:41.682 --> 10:41:44.988
define whatever we need.  So 
here, for example, I'm defining 

10:41:44.989 --> 10:41:50.157
the key font and the value to be
the font name.  And this is how 

10:41:50.158 --> 10:41:52.158
we would use it in code.

10:41:53.234 --> 10:41:55.234
So we would get the text from 
the 

10:41:57.265 --> 10:41:59.265
resources as a span string

10:42:05.593 --> 10:42:05.782
.  We would get the annotations,
get the key we're interested in,

10:42:05.783 --> 10:42:07.783
and then the value, and then set
the span based on 

10:42:11.505 --> 10:42:15.526
the indexes.  
   &gt;&gt; SIYAMED SINIR: We will now

10:42:15.527 --> 10:42:17.527
look at how text is laid out in 
the view.

10:42:21.089 --> 10:42:23.177
Let's assume you have a text 
view with some paddings added.

10:42:26.233 --> 10:42:28.674
When you set the drawable top 
attribute, it will position the 

10:42:28.675 --> 10:42:31.948
drawable to the top of the view.
It will transition from top to 

10:42:31.949 --> 10:42:38.123
bottom of the image.  This will 
add extra spacing between the 

10:42:38.124 --> 10:42:42.637
image and the area that the text
will be drawn in.  And now it 

10:42:42.638 --> 10:42:46.957
will point to the new location. 
Text view will create a layout.

10:42:51.408 --> 10:42:55.840
It is responsible for boundering
text.  Here the boundary is 

10:42:55.841 --> 10:42:59.788
highlighted in orange.  The 
layout object provides the 

10:42:59.789 --> 10:43:02.443
various text metrics such as the
baseline, line 

10:43:05.709 --> 10:43:08.613
top or line bottom.  Boring 
layout is for single style and 

10:43:10.860 --> 10:43:12.860
simple text which does not 
contain next 

10:43:15.361 --> 10:43:17.361
line, tab, or right or Bidi 
characters.

10:43:18.866 --> 10:43:20.866
Dine NAMic layout is for 
editable and selectable text.

10:43:23.211 --> 10:43:25.211
And for other cases, text view 
creates 

10:43:29.111 --> 10:43:31.272
a static layout.  

10:43:35.194 --> 10:43:37.058
Include font padding will add 
extra spacing to the top and 

10:43:37.059 --> 10:43:40.128
bottom of the layout, and the 
height of this spacing is 

10:43:40.129 --> 10:43:42.129
calculated using the values in 
the font.

10:43:45.008 --> 10:43:47.155
The effect is more visible when 
you use a tall script.

10:43:50.496 --> 10:43:54.374
When it's set to false, the text
is clipped.  Since it only 

10:43:54.375 --> 10:43:57.293
applies spicing at the top and 
bottom of text, on Android, we 

10:44:00.194 --> 10:44:02.194
would see that lines would 
overlap.

10:44:03.286 --> 10:44:05.286
On Android P, we fixed this 
issue.

10:44:08.427 --> 10:44:10.964
If the system detects that the 
lines will overlap, it will put 

10:44:10.965 --> 10:44:13.648
extra spacing between the lines 
and apply the attribute to the 

10:44:13.649 --> 10:44:15.649
whole paragraph.  

10:44:20.191 --> 10:44:22.191
We added an attribute named 
fallbackLineSpacing which is, by

10:44:23.359 --> 10:44:25.359
default, turned on.

10:44:26.635 --> 10:44:28.635
A similar attribute is the 
elegant text height attribute.

10:44:31.353 --> 10:44:33.353
However, even though it changes 
the 

10:44:40.800 --> 10:44:42.800
height, unlike the other at RU 
BUTDs, at

10:44:46.092 --> 10:44:48.565
tributes, but it will not change
spacing.  It will make the 

10:44:48.566 --> 10:44:50.566
system choose the 

10:44:52.277 --> 10:44:53.090
elegant version of the same 
script if that font exists.  

10:44:53.091 --> 10:44:55.951
    Speaking of line height, it 
is an 

10:45:02.293 --> 10:45:04.293
important at RU butte for 
readability of 

10:45:05.309 --> 10:45:07.309
the text, and you

10:45:10.124 --> 10:45:12.992
tribute for readability of the 
text, and you can -- the 

10:45:12.993 --> 10:45:14.993
designers would mostly 

10:45:16.480 --> 10:45:18.480
provide line height as it is.

10:45:20.207 --> 10:45:22.207
On Android P, we added the line 
height 

10:45:23.227 --> 10:45:25.227
attribute.  

10:45:29.048 --> 10:45:31.048
Two other attributes to bridge 
the 

10:45:33.577 --> 10:45:36.228
gab between design and 
application are -- the first we 

10:45:36.229 --> 10:45:38.270
let you control the distance 
from the top to the baseline of 

10:45:38.683 --> 10:45:40.924
the first line.  And the second 
one, similarly, we let 

10:45:44.306 --> 10:45:46.354
you control the distance between
bottom of the wheel and the 

10:45:46.355 --> 10:45:48.355
baseline of the last line.  

10:45:50.269 --> 10:45:52.319
Finally when you set text 
alignment, the text will be 

10:45:52.320 --> 10:45:55.186
positioned in the layout.  Get 
right and left functions of the 

10:45:58.465 --> 10:46:03.407
layout function will give you 
information of the layout.  Now 

10:46:03.408 --> 10:46:05.870
that you know about layout and 
some important functions, we can

10:46:05.871 --> 10:46:07.914
answer a frequently asked 
question on the 

10:46:11.381 --> 10:46:13.404
internet, which is how do you 
implement a rounded background 

10:46:13.405 --> 10:46:19.344
span? We can draw it ourselves 
using the layout functions.  To 

10:46:19.345 --> 10:46:21.345
do that, first we need to mark 
our 

10:46:23.257 --> 10:46:27.373
words that we need to draw the 
background for.  Annotation is a

10:46:27.374 --> 10:46:29.374
good option for such a use case.

10:46:32.901 --> 10:46:35.140
Then we will define our 
drawables.  One for the words 

10:46:35.141 --> 10:46:38.674
that start and end on a single 
line and another for different 

10:46:38.675 --> 10:46:42.571
lines.  We will look at our 
annotations to find what we 

10:46:42.572 --> 10:46:44.572
need.

10:46:48.339 --> 10:46:50.339
And for each annotation, we want
to 

10:46:53.242 --> 10:46:55.242
learn the line number, so we can

10:46:56.247 --> 10:46:58.088
look for the line number and 
convert.  For the words that 

10:46:58.089 --> 10:47:02.581
start and end on the same line, 
we also want to learn about the 

10:47:02.582 --> 10:47:04.582
vertical coordinates of the 
line.

10:47:06.277 --> 10:47:10.009
We can use get line top and get 
line bottom functions for this. 

10:47:10.010 --> 10:47:12.863
And finally we want to learn 
about the horizontal coordinates

10:47:12.864 --> 10:47:14.864
of the words.

10:47:16.354 --> 10:47:18.891
And get primary horizontal 
function will get the horizontal

10:47:18.892 --> 10:47:23.157
coordinate relative to the 
layout bundles.  Now that we 

10:47:23.158 --> 10:47:25.626
know the rectangle that we want 
to draw in, we can draw our 

10:47:25.827 --> 10:47:29.322
drawable.  The other case where 
we would start and end on a 

10:47:29.323 --> 10:47:32.185
different line would have almost
exactly the same code, except 

10:47:32.186 --> 10:47:34.186
now 

10:47:35.716 --> 10:47:37.716
it has to identify more 
rectangles for 

10:47:39.120 --> 10:47:42.317
the drawing.  
   &gt;&gt; CLARA BAYARRI: Text view 

10:47:42.318 --> 10:47:46.001
goes through measure, layout, 
and draw.  Measure is the most 

10:47:46.002 --> 10:47:48.002
expensive.

10:47:49.269 --> 10:47:51.308
Here is where we create the 
layouts or recreate them and 

10:47:51.309 --> 10:47:53.309
where we decide on the 

10:47:54.428 --> 10:47:56.428
width and height of the view.

10:47:58.104 --> 10:48:00.104
This is really expensive work.

10:48:03.630 --> 10:48:05.711
And finally in on_draw we issue 
the drawing commands.  Measure 

10:48:05.712 --> 10:48:07.779
is very expensive.  It's 
important to distinguish what 

10:48:12.729 --> 10:48:14.161
causes an on_measure versus an 
on_draw.  Anything that causes 

10:48:14.162 --> 10:48:19.712
the text to change in size or 
how it needs to be laid out, 

10:48:19.713 --> 10:48:21.713
like the letter spacing, text 

10:48:23.021 --> 10:48:24.694
size, that will trigger an 
on_measure.  If you change 

10:48:24.695 --> 10:48:27.359
something that just changes the 
appearance but not how we 

10:48:30.639 --> 10:48:32.639
place the text on the screen 
that only 

10:48:34.122 --> 10:48:36.122
needs to trigger an on_draw, 
which is 

10:48:37.194 --> 10:48:39.194
much cheaper than doing an 
on_measure as well.  

10:48:39.285 --> 10:48:41.285
Let's look at these separately.

10:48:46.638 --> 10:48:49.087
Say I use spans to style some of
the words in it.  I have changed

10:48:49.088 --> 10:48:51.540
the text size and colors.  The 
first option to measure your 

10:48:51.541 --> 10:48:53.541
text 

10:48:54.612 --> 10:48:57.706
is there is a method in paint 
called measure text.  A dead 

10:48:57.707 --> 10:49:01.015
give away is it takes a string, 
not a spanable.  So what this 

10:49:01.016 --> 10:49:03.016
will do, paint just doesn't 
understand spans, so it will 

10:49:04.693 --> 10:49:07.617
take the text you've given it.  
It doesn't understand line 

10:49:07.618 --> 10:49:09.618
breaking either.

10:49:11.144 --> 10:49:13.620
It will take the text as one 
long line, ignore the span and 

10:49:13.621 --> 10:49:19.388
give you one long line of text. 
The next is get text bounds.  It

10:49:19.389 --> 10:49:23.416
takes a string, so it will do 
exactly the same.  No line 

10:49:23.417 --> 10:49:25.417
breaking, no spans.  It will 
place it all together and give 

10:49:27.509 --> 10:49:29.782
you the bounding box of all of 
your glyphs, which is a weight 

10:49:29.783 --> 10:49:34.317
and a height.  These return 
slightly different values, so 

10:49:34.318 --> 10:49:36.318
text paint.

10:49:37.982 --> 10:49:41.498
measure text will give you the 
next advanced glyph.  This is 

10:49:41.499 --> 10:49:43.499
where you would put the next 

10:49:45.754 --> 10:49:48.465
one if you were to place another
.  These come from different 

10:49:48.466 --> 10:49:50.493
values of the font, so they may 
be very different.

10:49:56.876 --> 10:49:58.876
If you want to improve on this, 
we use layouts.

10:50:01.400 --> 10:50:03.434
This takes the text you give it 
-- taking into account all of 

10:50:03.435 --> 10:50:08.165
the styling, it measures each of
the lines and then returns the 

10:50:08.166 --> 10:50:11.251
width of the longest line that 
it has.  This is useful to know 

10:50:11.252 --> 10:50:13.252
how much your 

10:50:14.329 --> 10:50:17.011
text wants to be before you can 
restrict it.  If you know the 

10:50:17.012 --> 10:50:19.507
width of your view, well then 
you actually create a layout 

10:50:19.712 --> 10:50:22.806
object.  In this case we've 
created a static layout.

10:50:26.680 --> 10:50:28.743
By having a constraint, layouts 
can calculate how to reflow the 

10:50:28.744 --> 10:50:33.443
text and how to make it fit and 
give you a height in return.  By

10:50:33.444 --> 10:50:35.444
giving it a width we can 
actually calculate the height.

10:50:37.727 --> 10:50:39.758
On top of that, you will get a 
lot more information out of your

10:50:39.759 --> 10:50:41.759
layout object.  It will give you
things like the 

10:50:45.643 --> 10:50:47.643
baseline,

10:50:49.597 --> 10:50:51.597
line boundaries and everything. 

10:50:55.969 --> 10:50:58.453
Measure text is the cheapest.  
They are cheap to run.  They are

10:50:58.454 --> 10:51:00.454
similar.

10:51:01.774 --> 10:51:04.063
But once you get into creating a
static layout, that gets more 

10:51:04.064 --> 10:51:06.511
and more expensive.  Now that 
you know what each of these 

10:51:09.147 --> 10:51:10.989
methods do, make sure you do the
one that makes sense for you use

10:51:10.990 --> 10:51:13.874
case.  
    We've talked before about 

10:51:13.875 --> 10:51:16.542
the word measure cache and we 
MESH words once and 

10:51:21.213 --> 10:51:23.213
place them in a cache 

10:51:25.359 --> 10:51:27.403
.
Once we have a hit in the cache,

10:51:27.404 --> 10:51:31.381
it's only 3% of the work.  If we
measure this in text view, there

10:51:36.539 --> 10:51:37.766
you go, on_measure takes about 
16 to 11% of the work that it 

10:51:37.767 --> 10:51:39.767
did.  So using that cache is 
really 

10:51:42.618 --> 10:51:44.618
important for us

10:51:46.549 --> 10:51:49.549
measure words once and place 
them in a cache.

10:51:46.549 --> 10:51:50.815
Once we have a hit in the cache,
it's only 3% of the work.  If we

10:51:46.549 --> 10:51:50.749
measure this in text view, there
you go, on_measure takes about 

10:51:46.549 --> 10:51:50.482
16 to 11% of the work that it 
did.  So using that cache is 

10:51:46.549 --> 10:51:49.383
really important for us.  In P 
we have come up with a new 

10:51:51.234 --> 10:51:53.234
feature called pre-measured 
text.

10:51:55.133 --> 10:51:57.133
We know that in on_measure, we 
need to 

10:51:58.621 --> 10:52:01.292
take the glyphs, find them in 
the font and place them next to 

10:52:01.293 --> 10:52:03.938
each other and measure them in 
the cache.  It takes care of 

10:52:03.939 --> 10:52:06.196
this space for you, and you can 
run this in any thread so 

10:52:09.700 --> 10:52:11.761
that once you have that 
pre-calculation, setting it on 

10:52:11.762 --> 10:52:13.762
the text view only takes 

10:52:15.028 --> 10:52:17.277
about 10% of the work you had to
do initially.  The way this 

10:52:17.278 --> 10:52:19.962
looks in code is we need a bunch
of attributes to know how to 

10:52:20.366 --> 10:52:23.247
measure the text.  Things like 
the font you're going to use, 

10:52:23.248 --> 10:52:25.248
the text size.

10:52:26.969 --> 10:52:28.969
We have a convenience method of 
text 

10:52:33.049 --> 10:52:35.049
view is get text metrics prams

10:52:37.904 --> 10:52:41.813
.  On a background threat, pre 
computed text.create.  It 

10:52:41.814 --> 10:52:43.432
measures each of the words, 
places them in the cache, and it

10:52:43.433 --> 10:52:46.500
stores all of those values.  
This is also useful if you're 

10:52:46.501 --> 10:52:48.743
going to measure more than 5,000
words as this 

10:52:51.771 --> 10:52:53.771
all actually stores all of the 
values.

10:52:56.368 --> 10:52:57.603
Then you can go back to the UI 
thread and set it on your text 

10:52:57.604 --> 10:53:01.071
view.  All of this only makes 
sense if you know your text 

10:53:01.072 --> 10:53:05.582
beforehand.  If you just know 
your text as you're going to 

10:53:05.583 --> 10:53:09.281
render it, do what you've always
done.  But if you do know 

10:53:09.282 --> 10:53:11.321
beforehand, say you're lowing it
from the internet or 

10:53:14.413 --> 10:53:16.891
you have an internet scroll, you
can preload before it needs to 

10:53:16.892 --> 10:53:19.599
be shown on screen, and 90% of 
the work will be done 

10:53:23.271 --> 10:53:25.271
on the background thread, which 
is amazing.  

10:53:25.735 --> 10:53:28.840
In support library, we do have a
solution.  Between L and P, we 

10:53:28.841 --> 10:53:33.750
can actually not do exactly the 
computations that we've done, 

10:53:33.751 --> 10:53:37.254
but we can warm up that cache 
for you, so that's what we do.  

10:53:37.255 --> 10:53:39.950
And before L, you can't do 
anything.  But we do have a 

10:53:39.951 --> 10:53:41.951
solution in the support 
libraries.  

10:53:43.415 --> 10:53:45.031
And another common thing we see 
related to all of this is very 

10:53:45.032 --> 10:53:49.168
long text.  People tend to say 
I've got this text.  I'll just 

10:53:49.169 --> 10:53:51.169
set it all on the text view.

10:53:53.663 --> 10:53:55.288
When you set text on text view 
it measures all of the words and

10:53:55.289 --> 10:53:57.289
lays out 

10:53:58.409 --> 10:54:00.435
the entire text you've given it,
even if you have given an entire

10:54:00.436 --> 10:54:02.706
book.  This can be a huge 
performance hit if 

10:54:06.576 --> 10:54:08.034
you're send long text that maybe
you're not even showing on 

10:54:08.035 --> 10:54:10.035
screen.

10:54:11.111 --> 10:54:13.111
A solution is to split your text
into 

10:54:14.620 --> 10:54:17.064
separate pieces, like paragraphs
and put them into a recite 

10:54:17.065 --> 10:54:19.065
review.

10:54:20.955 --> 10:54:24.624
As the user scrolls, we will 
start loading the next bits.  

10:54:24.625 --> 10:54:26.700
You can link this to 
pre-measured text, which I just 

10:54:26.701 --> 10:54:28.745
talked about, and pre-measure 
all of the background 

10:54:30.424 --> 10:54:32.662
measurements and then you will 
have all of that information 

10:54:32.663 --> 10:54:35.548
really efficiently.  
    So we've talked abmeasure.  

10:54:35.549 --> 10:54:39.075
What about draw? It is much 
cheaper.  You have several 

10:54:39.076 --> 10:54:42.557
options if you're going to draw 
yourself.  An easy one that 

10:54:42.558 --> 10:54:47.865
people say why don't you canvas.
drawtext.  Canvas does not 

10:54:47.866 --> 10:54:49.874
understand spans or line 
breaking or any of the things we

10:54:52.038 --> 10:54:53.478
have been talking about.  So 
similar to the things we have 

10:54:53.479 --> 10:54:56.770
been talking about before, it 
will draw the text you give it 

10:54:56.771 --> 10:54:59.251
with no styling as one run.  If 
you have styling or if you want 

10:54:59.252 --> 10:55:04.372
to use line breaking, use the 
layout classes.  You can see the

10:55:04.373 --> 10:55:08.910
recurring theme.  They all have 
a draw method that will draw on 

10:55:08.911 --> 10:55:12.176
the canvas for you.  
   &gt;&gt; FLORINA MUNTENSESCU: I 

10:55:12.177 --> 10:55:14.177
think it's time to set the text.

10:55:17.481 --> 10:55:19.126
So set text is the most commonly
used method and great for views 

10:55:19.127 --> 10:55:21.998
that don't change.  So when both
the text and the mark-up 

10:55:25.020 --> 10:55:28.961
attached to it are immutable.  
So under the head, there is a 

10:55:28.962 --> 10:55:30.962
span string.

10:55:32.447 --> 10:55:34.447
So if you are changing the 
original 

10:55:35.934 --> 10:55:38.906
reference, the textview doesn't 
update.  What if we want to 

10:55:38.907 --> 10:55:40.957
mutate the spans later?

10:55:44.846 --> 10:55:46.846
We would send the text using 
buffer 

10:55:48.156 --> 10:55:52.257
type spanable.  While the text 
is immutable, the spans are 

10:55:52.258 --> 10:55:54.258
mutable.

10:55:57.424 --> 10:55:59.675
So then what we can do here is 
we can get the text as a 

10:55:59.676 --> 10:56:01.676
spanable, and then we 

10:56:02.791 --> 10:56:04.663
can add or remove spans to it.  
You will be tempted to call a 

10:56:04.664 --> 10:56:06.712
send text again, but you don't 
need to do 

10:56:09.807 --> 10:56:11.833
this anymore, because text few 
has an all span change listener,

10:56:11.834 --> 10:56:15.732
and it automatically knows when 
something was added or removed 

10:56:15.733 --> 10:56:17.733
and the text will just be 
displayed.  

10:56:19.031 --> 10:56:23.894
What if you want to change an 
internal property of the span? 

10:56:23.895 --> 10:56:25.357
In our case we want to change 
that type face in our custom 

10:56:25.358 --> 10:56:27.358
type face.

10:56:29.475 --> 10:56:31.523
In this case, the textview 
doesn't know what changed and it

10:56:31.524 --> 10:56:33.973
doesn't know that it needs to do
something, so we need to tell 

10:56:33.974 --> 10:56:36.445
it.  We would do this with 
either request 

10:56:40.485 --> 10:56:42.485
layout or invalidate

10:56:44.273 --> 10:56:46.273
.  If you changed the measure 
affecting 

10:56:49.168 --> 10:56:51.168
attribute and it needs to 
re-measure and 

10:56:52.268 --> 10:56:54.268
redraw, you would call request 
layout.

10:56:57.433 --> 10:56:59.275
If you just change appearance, 
invalidate and call redraw.  

10:56:59.276 --> 10:57:01.308
    If we look at the code, we 
see that 

10:57:04.362 --> 10:57:06.362
under the hood, there is a 
spanable factory.

10:57:08.240 --> 10:57:10.930
So it has a default spanable 
factory implementation.  But we 

10:57:10.931 --> 10:57:13.221
can implement our own and then 
instead of creating a copy of 

10:57:13.222 --> 10:57:17.307
it, we will just return the same
reference to the object in case 

10:57:17.308 --> 10:57:19.308
the object is a 

10:57:20.321 --> 10:57:22.321
spanable

10:57:24.057 --> 10:57:25.714
.  
    This is specifically 

10:57:25.715 --> 10:57:27.715
important if 

10:57:28.762 --> 10:57:30.762
you're using styled text inside 
a recycler view.

10:57:32.250 --> 10:57:34.250
Like this, you avoid creating 
copies 

10:57:35.734 --> 10:57:38.984
inside the recycler view, saving
CPU time and memory allocation. 

10:57:38.985 --> 10:57:41.635
This is how you would use it.  
In the view holder, you would 

10:57:41.636 --> 10:57:43.636
set the 

10:57:47.330 --> 10:57:49.330
spanable factory you just 
created and in

10:57:51.204 --> 10:57:53.204
the on bind view holder, make 
sure 

10:57:55.939 --> 10:57:57.396
you're setting the buffer as 
spanable.  

10:57:57.397 --> 10:57:59.269
&gt;&gt; CLARA BAYARRI: You might be 
familiar with taking a text view

10:57:59.270 --> 10:58:02.176
and setting auto link to say web
to be able 

10:58:05.448 --> 10:58:07.082
to detect URLs within your text 
and have them automatically 

10:58:07.083 --> 10:58:10.773
linked.  What happens under the 
hood? When you set a text on 

10:58:10.774 --> 10:58:15.369
that text view, we will create a
copy and then we run a metric 

10:58:15.370 --> 10:58:17.370
for regular expression on your 

10:58:18.841 --> 10:58:20.841
text, and for each match where 
we find a 

10:58:22.388 --> 10:58:24.388
URL, we will create a URL span 
and add that to your text.

10:58:27.110 --> 10:58:28.741
If you do this inside on bind 
view holder, you are running 

10:58:28.742 --> 10:58:30.742
that every time 

10:58:32.140 --> 10:58:34.140
you show text

10:58:35.938 --> 10:58:37.419
, you're going to be 
recalculating that to each and 

10:58:37.420 --> 10:58:41.346
over item.  Don't use auto link 
in your XML, because that 

10:58:41.347 --> 10:58:46.282
triggers the process.  Instead, 
first of all, create a spanable 

10:58:46.283 --> 10:58:48.283
copy of your string and run 

10:58:49.290 --> 10:58:51.290
either

10:58:53.294 --> 10:58:55.294
linkify so you precalculate all 
of it.

10:58:57.605 --> 10:58:59.605
And on bind view holder, you 
simply set the text.

10:59:03.636 --> 10:59:05.937
And then you can use Florina's 
trick to avoid the extra 

10:59:05.938 --> 10:59:10.072
computation.  We want to 
discourage everyone from using 

10:59:10.073 --> 10:59:14.220
auto link map.  All of the other
options use regular expressions 

10:59:14.221 --> 10:59:16.221
and are easy to run.

10:59:17.340 --> 10:59:19.807
Map actually spins up an 
instance of a web view to find 

10:59:19.808 --> 10:59:22.083
addresses, which is a huge 
performance hit for your app, so

10:59:22.084 --> 10:59:25.164
we want to discourage everyone 
from using map.

10:59:28.899 --> 10:59:30.755
And you may say I need this and 
you're taking it away? What do I

10:59:30.756 --> 10:59:32.756
do?

10:59:37.509 --> 10:59:39.509
Coming to the rescue is smart 
linkify

10:59:41.593 --> 10:59:43.455
.  This year we've taken the 
same machine learning models 

10:59:43.456 --> 10:59:48.981
that detect entities and apply 
them to Linkify.  We can do a 

10:59:48.982 --> 10:59:50.982
better job at detecting all of 
the entities and we can detect 

10:59:52.270 --> 10:59:54.270
new typesment.

10:59:55.368 --> 10:59:57.368
On top of phone numbers, URLs 
and 

10:59:58.924 --> 11:00:00.924
phone numbers, we can do more 

11:00:03.786 --> 11:00:05.786
sophisticated things like flight
codes

11:00:07.527 --> 11:00:11.593
.  On top of phone numbers, URLs
and phone numbers, we can do 

11:00:07.527 --> 11:00:09.846
more sophisticated things like 
flight codes.  It's very 

11:00:09.847 --> 11:00:11.847
important that you do this 

11:00:13.347 --> 11:00:16.039
on a background thread, as this 
is loading a machine model from 

11:00:16.040 --> 11:00:20.997
disk.  Don't do it on the UI 
thread.  Then you can apply the 

11:00:20.998 --> 11:00:22.998
links to the text.

11:00:25.350 --> 11:00:27.350
There's change between the old 
Linkify and this.

11:00:29.253 --> 11:00:31.128
It used to generate a span that 
when you click it would go 

11:00:31.129 --> 11:00:33.129
through the link.

11:00:34.229 --> 11:00:35.448
The URL spans that are added pop
up a floating tool bar with 

11:00:35.449 --> 11:00:37.449
smart actions that you can take.

11:00:39.757 --> 11:00:41.757
For an address, we might suggest
apps.  

11:00:41.802 --> 11:00:44.675
Finally when you have all of 
your text ready, you can go back

11:00:44.676 --> 11:00:49.749
to the UI thread and set that 
text on the view thread.  Notice

11:00:49.750 --> 11:00:51.750
the big difference and the old 

11:00:52.862 --> 11:00:54.528
one was synchronous and this is 
asynchronous.  We understand 

11:00:54.529 --> 11:00:59.287
this is a huge difference, but 
it is a way to use machine 

11:00:59.288 --> 11:01:01.583
learning to enhance how we 
detect entities, and it is 

11:01:01.584 --> 11:01:04.482
really much better.  
    And since I'm talking about 

11:01:04.483 --> 11:01:09.206
new features, let me introduce 
magnifier.  A lot of people tell

11:01:09.207 --> 11:01:15.051
us that selecting text is hard 
and placing the cursor where you

11:01:15.052 --> 11:01:17.052
want is a really hard task.

11:01:18.343 --> 11:01:20.343
So magnifier helps you place the
cursor in the correct position.

11:01:23.521 --> 11:01:25.165
We have implemented this by 
default, so you don't have to do

11:01:25.166 --> 11:01:30.324
any work if you're using the 
default widgets.  If you're 

11:01:30.325 --> 11:01:32.325
doing your own custom widgets 
and you want to implement this 

11:01:35.574 --> 11:01:37.574
yourself, there's an easy to use
API there.

11:01:39.274 --> 11:01:42.167
Take your on touch event and 
when the finger goes down, show 

11:01:42.168 --> 11:01:44.229
the magnifier and up dismiss the
magnifier.

11:01:49.391 --> 11:01:52.662
This has the magnifier follow 
your finger around the screen.  

11:01:52.663 --> 11:01:55.174
We will publish guidelines on 
the final UX we come up with, 

11:01:55.175 --> 11:01:58.274
but it is very easy to use.  
    So I hope today we've 

11:01:58.275 --> 11:02:00.275
presented a bunch of tips and 
tricks.

11:02:03.274 --> 11:02:05.274
We've shown you what text is 
under the 

11:02:08.666 --> 11:02:10.898
hood the hood at Android so you 
can take this back to your apps 

11:02:10.899 --> 11:02:15.448
and build beautiful, more 
performant apps.  Please file 

11:02:15.449 --> 11:02:17.449
feedback and thank you very 
much.  You can find us -- 

11:02:20.305 --> 11:02:22.305
[ Applause ] 

11:02:28.796 --> 11:02:32.073
I know we're late into I/O, but 
you can find us at sandbox C.  

11:02:32.074 --> 11:02:36.818
Please find us.  It's behind the
food area.  We will be there.  

11:02:36.819 --> 11:02:38.846
So please come ask questions.  
   &gt;&gt; FLORINA MUNTENSESCU: Thank

11:02:38.847 --> 11:02:42.485
you.  
[ Applause ] 

11:03:00.554 --> 11:03:04.861
   &gt;&gt; Thank you for joining this
session.  Brand ambassadors will

11:03:04.862 --> 11:03:08.893
assist with directing you 
through the designated exits.  

