WEBVTT
Kind: captions
Language: en

00:00:08.910 --> 00:00:09.290
RETO MEIER: Hi.

00:00:09.290 --> 00:00:11.450
My name is Reto Meier, and I'm
the tech lead for Google's

00:00:11.450 --> 00:00:13.730
Android Developer
Relations Team.

00:00:13.730 --> 00:00:16.270
This efficient data transfer's
DevByte is going to look at

00:00:16.270 --> 00:00:18.620
techniques that you can use to
reduce the battery drain of

00:00:18.620 --> 00:00:21.260
your app without affecting the
freshness of your data by

00:00:21.260 --> 00:00:25.180
adapting the frequency of your
updates based on context.

00:00:25.180 --> 00:00:27.340
In other DevBytes, I've explored
ways to analyze your

00:00:27.340 --> 00:00:30.030
app's transfer profile and
optimize it using techniques

00:00:30.030 --> 00:00:32.740
like prefetching, bundling,
and SyncAdapters in Google

00:00:32.740 --> 00:00:34.070
Cloud Messaging.

00:00:34.070 --> 00:00:37.120
The goal is to ensure that you
never initiate a transfer that

00:00:37.120 --> 00:00:39.990
isn't related to require
data sync.

00:00:39.990 --> 00:00:42.620
But if you have server data that
changes rapidly, such as

00:00:42.620 --> 00:00:45.400
breaking news, weather, or
sports scores, treating an

00:00:45.400 --> 00:00:47.990
update every time there's an
update on the server is still

00:00:47.990 --> 00:00:51.090
been tax your servers and drain
your user's battery,

00:00:51.090 --> 00:00:53.610
particularly when your app
is in the background.

00:00:53.610 --> 00:00:55.820
Now, the aim of this DevByte
is to get beyond limiting

00:00:55.820 --> 00:00:58.250
transfers to when they're valid
and start considering

00:00:58.250 --> 00:01:00.820
device state, user behavior,
and impact on the user

00:01:00.820 --> 00:01:02.980
experience to minimize the
number of updates that we

00:01:02.980 --> 00:01:04.720
actually perform.

00:01:04.720 --> 00:01:07.030
In my DevByte on Google Cloud
Messaging, you learned that

00:01:07.030 --> 00:01:09.380
you can set your server messages
to be delayed when

00:01:09.380 --> 00:01:10.850
the device is idle.

00:01:10.850 --> 00:01:13.000
As a result, your messages will
be queued, and that queue

00:01:13.000 --> 00:01:16.330
is collapsed, so that when your
app only receives one

00:01:16.330 --> 00:01:19.220
message when the device
becomes active.

00:01:19.220 --> 00:01:21.500
Now, that's a useful start, as
it prevents multiple updates

00:01:21.500 --> 00:01:22.930
from happening when
the user isn't

00:01:22.930 --> 00:01:24.970
actually using the device.

00:01:24.970 --> 00:01:29.410
In other DevBytes on using the
SyncAdapter, you saw how to

00:01:29.410 --> 00:01:31.520
group all of your app's transfer
methods within your

00:01:31.520 --> 00:01:34.180
SyncAdapters on Perform
Sync method.

00:01:34.180 --> 00:01:36.740
A SyncAdapter can be triggered
a number of ways, including

00:01:36.740 --> 00:01:40.290
GCM [? TCLs, ?] client-side
changes, scheduled updates, or

00:01:40.290 --> 00:01:42.970
user actions, like selecting
a new song, or browsing an

00:01:42.970 --> 00:01:45.100
article that hasn't
been prefetched.

00:01:45.100 --> 00:01:47.580
Within our perform sync handle,
we need to determine

00:01:47.580 --> 00:01:49.930
which of these triggers are
sufficient to initiate a new

00:01:49.930 --> 00:01:53.920
transfer, starting with
scheduled updates.

00:01:53.920 --> 00:01:56.720
Periodic updates are a great way
to ensure your app never

00:01:56.720 --> 00:01:59.580
seems stale, and that users
aren't left waiting for

00:01:59.580 --> 00:02:01.860
significant amounts of data
to be synced every time

00:02:01.860 --> 00:02:03.930
you open the app.

00:02:03.930 --> 00:02:06.810
Of course, stale is relative,
not only to the type of data

00:02:06.810 --> 00:02:09.690
that your app displays, but
also how frequently a user

00:02:09.690 --> 00:02:10.600
opens your app.

00:02:10.600 --> 00:02:13.310
Periodic updates work well for
apps like news readers, where

00:02:13.310 --> 00:02:16.780
the frequency of news articles
makes sending a GCM message to

00:02:16.780 --> 00:02:19.140
every app whenever new articles
are available.

00:02:19.140 --> 00:02:20.470
Massive overkill.

00:02:20.470 --> 00:02:22.950
And the freshness isn't critical
unless the user

00:02:22.950 --> 00:02:25.390
happens to be actively
browsing it.

00:02:25.390 --> 00:02:27.950
In this case, performing a
background refresh every hour

00:02:27.950 --> 00:02:30.730
might be a reasonable approach
for users who open the app

00:02:30.730 --> 00:02:33.390
several times a day, as it
ensures that they see fresh

00:02:33.390 --> 00:02:36.930
headlines every time the app,
even if the device hasn't been

00:02:36.930 --> 00:02:38.370
online for a while.

00:02:38.370 --> 00:02:40.660
But it's wasteful for a user
who only reads the news

00:02:40.660 --> 00:02:42.690
headlines once each morning.

00:02:42.690 --> 00:02:45.240
Now you can mitigate this by
reducing the background update

00:02:45.240 --> 00:02:48.380
frequency based on the
recency of app usage.

00:02:48.380 --> 00:02:51.400
In this snippet, we check to see
if the app has been opened

00:02:51.400 --> 00:02:53.360
since the last time we
performed a refresh.

00:02:53.360 --> 00:02:56.670
If not, we double the period
between refreshes.

00:02:56.670 --> 00:02:59.070
Now each time the app is opened,
we reset that counter.

00:02:59.070 --> 00:03:03.020
So as a result, your app fresher
data for regular uses,

00:03:03.020 --> 00:03:06.830
where those who open the app
only once a day or once a week

00:03:06.830 --> 00:03:09.650
are saved the resulting
battery drain.

00:03:09.650 --> 00:03:11.710
Now, if you're reducing the
frequency of updates to reduce

00:03:11.710 --> 00:03:15.030
the battery-hungry use of the
cell radio, we might be able

00:03:15.030 --> 00:03:17.290
to mitigate some of these
choices based on the current

00:03:17.290 --> 00:03:20.710
battery level, charging state,
and connectivity time.

00:03:20.710 --> 00:03:23.350
It's generally good practice to
minimize background updates

00:03:23.350 --> 00:03:25.080
when they don't result
in notifications.

00:03:25.080 --> 00:03:27.780
But the impact of performing
updates while the device is

00:03:27.780 --> 00:03:30.930
charging over the AC
is negligible.

00:03:30.930 --> 00:03:32.980
So you can reconsider some of
those assumptions when the

00:03:32.980 --> 00:03:35.270
device is connected
to a charger.

00:03:35.270 --> 00:03:37.690
Conversely, you can listen for
a broadcast telling you that

00:03:37.690 --> 00:03:40.700
the devices is low on juice,
and reduce or eliminate

00:03:40.700 --> 00:03:44.580
background updates completely
until the device is charging.

00:03:44.580 --> 00:03:46.960
Of course, just because you're
connected to power doesn't

00:03:46.960 --> 00:03:47.890
make your downloads free.

00:03:47.890 --> 00:03:50.310
Even if you're not concerned
with the power drain

00:03:50.310 --> 00:03:53.340
associated with 3G radio, you
should still be conscious of

00:03:53.340 --> 00:03:55.620
the amount of data that
your'e transferring.

00:03:55.620 --> 00:03:58.040
You can also monitor the current
internet connection to

00:03:58.040 --> 00:03:59.790
help mitigate against that.

00:03:59.790 --> 00:04:02.660
If we're connected over Wi-Fi,
bandwidth use isn't an issue,

00:04:02.660 --> 00:04:05.390
and power use is significantly
lower than when compared to a

00:04:05.390 --> 00:04:06.430
cell radio.

00:04:06.430 --> 00:04:09.410
That means you can more
aggressively react to sender

00:04:09.410 --> 00:04:12.440
synced messages when
client-side, or client-side

00:04:12.440 --> 00:04:15.180
content provider changes when
you're in the foreground, and

00:04:15.180 --> 00:04:17.560
potentially, even in the
background, especially when

00:04:17.560 --> 00:04:19.990
we're also connected to power.

00:04:19.990 --> 00:04:21.630
A good example of this
scenario is when

00:04:21.630 --> 00:04:23.860
the device is docked.

00:04:23.860 --> 00:04:26.340
Monitoring for the device to be
in a docked state can be a

00:04:26.340 --> 00:04:29.130
useful shortcut, letting you
know how to check for

00:04:29.130 --> 00:04:31.120
connectivity and charging
status, and potentially

00:04:31.120 --> 00:04:34.670
modifying the frequency at
which you perform syncs.

00:04:34.670 --> 00:04:36.720
You can check the current device
state each time you

00:04:36.720 --> 00:04:39.990
receive a GCM TCL or a local
content provider changes to

00:04:39.990 --> 00:04:42.900
determine if should actually
perform the update.

00:04:42.900 --> 00:04:46.520
Or you can monitor changes in
the device state to alter your

00:04:46.520 --> 00:04:48.520
SyncAdapter settings
to stop or start

00:04:48.520 --> 00:04:50.030
listening for changes.

00:04:50.030 --> 00:04:52.850
Likewise, you can send a message
to server altering the

00:04:52.850 --> 00:04:54.420
frequency at which you
want to receive

00:04:54.420 --> 00:04:56.150
this into sync messages.

00:04:56.150 --> 00:04:58.530
For example, you may want to
receive a TCL after there are

00:04:58.530 --> 00:05:02.030
10 new headlines, or only when
there is a breaking news story

00:05:02.030 --> 00:05:04.320
in your area, or not more
frequently than

00:05:04.320 --> 00:05:06.300
once every 10 minutes.

00:05:06.300 --> 00:05:08.210
You might also want to consider
the context of the

00:05:08.210 --> 00:05:10.340
user themselves.

00:05:10.340 --> 00:05:12.690
Using the new activity
recognition APIs, you can

00:05:12.690 --> 00:05:15.490
choose to alter the foreground
update frequency based on what

00:05:15.490 --> 00:05:16.890
the user is doing.

00:05:16.890 --> 00:05:19.880
In this example, we might
artificially limit the update

00:05:19.880 --> 00:05:21.630
rate when they're doing anything
other than standing

00:05:21.630 --> 00:05:24.810
still, on the basis that users
are less likely to be looking

00:05:24.810 --> 00:05:26.790
at the screen and browsing.

00:05:26.790 --> 00:05:29.600
Now, we can use a similar
technique as an alternative to

00:05:29.600 --> 00:05:31.010
periodic updates.

00:05:31.010 --> 00:05:33.760
Rather than update the app once
every 24 hours to ensure

00:05:33.760 --> 00:05:36.690
it's fresh in the morning, you
might check for the tilting

00:05:36.690 --> 00:05:39.870
activity after a prolonged
period of being stationary as

00:05:39.870 --> 00:05:42.130
an indication that the user had
been asleep and has now

00:05:42.130 --> 00:05:43.750
gotten up in the morning,
so it's worth

00:05:43.750 --> 00:05:45.620
refreshing their data.

00:05:45.620 --> 00:05:48.270
Now having introduced a number
of possible ways to skip or

00:05:48.270 --> 00:05:51.080
delay transfers, it's important
to check the cause

00:05:51.080 --> 00:05:53.100
of the sync to ensure that
you're not delaying transfers

00:05:53.100 --> 00:05:55.990
that will affect the user
experience directly.

00:05:55.990 --> 00:05:57.810
Any manually initiated
transfer--

00:05:57.810 --> 00:06:01.200
so, anything that's necessary
for the user to continue using

00:06:01.200 --> 00:06:02.820
the app, or browsing--

00:06:02.820 --> 00:06:05.220
needs to happen straightaway.

00:06:05.220 --> 00:06:06.950
When using SyncAdapters,
you can determine

00:06:06.950 --> 00:06:08.780
this, as shown here.

00:06:08.780 --> 00:06:11.380
Now in any case, while it can
be useful to alter the

00:06:11.380 --> 00:06:14.650
frequency at which we execute as
sync, fundamentally, we're

00:06:14.650 --> 00:06:16.840
still depending on techniques
like SyncAdapters and and

00:06:16.840 --> 00:06:19.720
Google Cloud Messaging, as
described in other DevBytes in

00:06:19.720 --> 00:06:22.765
this series, to ensure that we
only ever consider performing

00:06:22.765 --> 00:06:24.980
a sync when data changed,
either on the

00:06:24.980 --> 00:06:27.030
client or on the server.

00:06:27.030 --> 00:06:29.420
Even then, we want to avoid
performing a sync thing that

00:06:29.420 --> 00:06:31.640
could be delayed without
impacting the user.

00:06:31.640 --> 00:06:34.150
In most cases, that means being
very conservative with

00:06:34.150 --> 00:06:36.830
background updates, and anything
that doesn't result

00:06:36.830 --> 00:06:38.360
in a notification
being displayed.

