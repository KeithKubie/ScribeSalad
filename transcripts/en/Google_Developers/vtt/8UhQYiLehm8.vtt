WEBVTT
Kind: captions
Language: en

00:00:01.390 --> 00:00:03.880
SPEAKER: OK, quiet.

00:00:03.880 --> 00:00:05.020
I'll try and wake you up.

00:00:05.020 --> 00:00:05.760
No, I won't.

00:00:08.530 --> 00:00:17.800
I'm back to do a talk and sort
of demo of some of the tools

00:00:17.800 --> 00:00:21.190
that we use for
building progressive web

00:00:21.190 --> 00:00:24.670
apps, some things that you
can use to understand how

00:00:24.670 --> 00:00:28.110
your apps work, and how
you can make your web

00:00:28.110 --> 00:00:29.566
experiences better.

00:00:33.700 --> 00:00:37.290
One thing I will say about
this demo before I go on,

00:00:37.290 --> 00:00:43.510
I am gonna cheat a little bit
today and I will apologize.

00:00:43.510 --> 00:00:46.480
I'm not going to do that
live because the internet

00:00:46.480 --> 00:00:48.600
connection here is
a little bit slow

00:00:48.600 --> 00:00:52.810
and for me to do this live,
it just wouldn't work.

00:00:52.810 --> 00:00:56.080
So I took screenshots
and video last night,

00:00:56.080 --> 00:00:59.780
so I'll show you
essentially what I would do.

00:00:59.780 --> 00:01:02.650
But I want to take
you on a journey.

00:01:02.650 --> 00:01:08.980
I want to take you through how
you can use some of these tools

00:01:08.980 --> 00:01:13.900
to make your experience,
your site better.

00:01:13.900 --> 00:01:16.960
As developers, it's
important for us

00:01:16.960 --> 00:01:20.980
to have insight into
areas that we can improve

00:01:20.980 --> 00:01:25.870
and areas that we can
make things work better

00:01:25.870 --> 00:01:29.720
and make things more
awesome for our users.

00:01:29.720 --> 00:01:35.530
So in that spirit, let's take
a little journey on a website

00:01:35.530 --> 00:01:39.940
and transform an
existing single-page app,

00:01:39.940 --> 00:01:43.750
from just a pretty
meh single-page app

00:01:43.750 --> 00:01:47.320
to a progressive web app.

00:01:47.320 --> 00:01:51.190
Our starting point
is this app here

00:01:51.190 --> 00:01:56.420
that you'll see on the right.

00:01:56.420 --> 00:02:00.600
And it uses the iFixit API.

00:02:00.600 --> 00:02:05.720
iFixit is-- how many people
are familiar with iFixit?

00:02:05.720 --> 00:02:07.170
OK, so a few.

00:02:07.170 --> 00:02:11.680
iFixit is a site that they do
teardowns and take products

00:02:11.680 --> 00:02:14.800
apart and show you how
to fix it yourself.

00:02:14.800 --> 00:02:18.010
So it's a pretty neat site
in terms of some of the stuff

00:02:18.010 --> 00:02:21.070
that they have, but
they also have an API so

00:02:21.070 --> 00:02:25.270
that you can write
your own frontend.

00:02:25.270 --> 00:02:27.445
This site in its
current implementation,

00:02:27.445 --> 00:02:30.760
and what I'm going to
show you in one second,

00:02:30.760 --> 00:02:33.580
uses client-side rendering.

00:02:33.580 --> 00:02:38.890
So it goes, gets the data,
and renders on the client.

00:02:38.890 --> 00:02:43.510
And it uses React to do this.

00:02:43.510 --> 00:02:46.960
The concepts that I'm
going to talk about today,

00:02:46.960 --> 00:02:49.330
you can use any framework.

00:02:49.330 --> 00:02:55.110
In fact, I'm using React because
it was just an experiment.

00:02:55.110 --> 00:02:57.700
I don't really
know React at all.

00:02:57.700 --> 00:03:00.520
We're going to have people come
in and talk about it Angular.

00:03:00.520 --> 00:03:05.230
These tests that I'm
gonna show you how to do,

00:03:05.230 --> 00:03:07.420
the work that I'm
gonna show, applies

00:03:07.420 --> 00:03:10.810
exactly the same, no matter
what browser you're using

00:03:10.810 --> 00:03:14.050
or what library you're using.

00:03:14.050 --> 00:03:17.130
I'm going to open it up and have
a look at what the experience

00:03:17.130 --> 00:03:19.900
looks like in Chrome.

00:03:19.900 --> 00:03:21.900
So, I'll open it up.

00:03:21.900 --> 00:03:25.570
It looks like a
standard web app, right?

00:03:25.570 --> 00:03:27.220
It's got a nice
little address bar

00:03:27.220 --> 00:03:29.770
across the top, some
images, and I can

00:03:29.770 --> 00:03:32.320
click on any of these things.

00:03:32.320 --> 00:03:36.160
All right, Chrome looks great.

00:03:36.160 --> 00:03:40.270
And Firefox, because it's
always important for us

00:03:40.270 --> 00:03:43.750
to be testing our apps in
all of the different browsers

00:03:43.750 --> 00:03:45.710
that our users are using.

00:03:45.710 --> 00:03:51.310
So look at your analytics, what
browsers are users coming in on

00:03:51.310 --> 00:03:55.760
and making sure that you're
testing on those browsers.

00:03:55.760 --> 00:04:01.360
So Firefox, yep, looks great,
awesome, yay, really happy.

00:04:01.360 --> 00:04:05.770
But Safari, I've made a
little bit of a change,

00:04:05.770 --> 00:04:09.520
because I think it's
always important to test

00:04:09.520 --> 00:04:15.580
in one browser where you've
turned off JavaScript.

00:04:15.580 --> 00:04:21.279
And wah-wah, right?

00:04:21.279 --> 00:04:22.230
That's bad.

00:04:22.230 --> 00:04:24.190
It's not that Safari is bad.

00:04:24.190 --> 00:04:28.040
We have turned off JavaScript
and we're client-side

00:04:28.040 --> 00:04:29.790
rendering.

00:04:29.790 --> 00:04:35.830
Client-side rendering plus
no JavaScript means no page.

00:04:35.830 --> 00:04:41.160
So in this particular
instance, this sucks.

00:04:41.160 --> 00:04:47.300
Our users who don't have
JavaScript are kind of stuck.

00:04:47.300 --> 00:04:51.430
So now that we have a
feel for what the app does

00:04:51.430 --> 00:04:53.660
and what it looks like,
let's try and figure

00:04:53.660 --> 00:04:56.860
out how we can improve
this implementation

00:04:56.860 --> 00:05:00.190
and we're going to use a
tool called Lighthouse.

00:05:00.190 --> 00:05:03.920
Lighthouse is a tool that is
built by a number of engineers

00:05:03.920 --> 00:05:09.800
in Google, and automates a
whole suite of diagnostic tests

00:05:09.800 --> 00:05:15.290
that cover areas important
to progressive web apps.

00:05:15.290 --> 00:05:17.130
It's available as
a Chrome extension,

00:05:17.130 --> 00:05:21.320
so you can get it as
a Chrome extension.

00:05:21.320 --> 00:05:23.700
And it's available as
a couple other things.

00:05:23.700 --> 00:05:29.360
But first, let's use Lighthouse
to establish a baseline,

00:05:29.360 --> 00:05:33.500
to see how it's going to work.

00:05:33.500 --> 00:05:38.570
I meant to mention this earlier,
it also works as a Node module,

00:05:38.570 --> 00:05:41.120
so you can test your
app as you're running.

00:05:41.120 --> 00:05:44.630
You don't always have to use
it as a Chrome extension.

00:05:44.630 --> 00:05:47.300
You can put this into
maybe your build process

00:05:47.300 --> 00:05:50.360
to understand, hey,
how are things working?

00:05:50.360 --> 00:05:52.280
And get your score there.

00:05:55.460 --> 00:05:58.370
Before we jump in and see what
our Lighthouse score looks

00:05:58.370 --> 00:06:03.150
like on this test,
Lighthouse is a process.

00:06:03.150 --> 00:06:05.870
It is not a destination.

00:06:05.870 --> 00:06:11.480
It's to help us identify
areas that we can improve,

00:06:11.480 --> 00:06:14.360
but it's not the thing
that we're going to say,

00:06:14.360 --> 00:06:16.990
I want to get a 100 out of 100.

00:06:16.990 --> 00:06:19.920
It's kind of nice, but
that's not the point.

00:06:19.920 --> 00:06:23.720
The point is for us to take
our step up from wherever

00:06:23.720 --> 00:06:26.270
we are and build it better.

00:06:26.270 --> 00:06:30.320
Ultimately the experience
that your web app provides

00:06:30.320 --> 00:06:32.990
is for your entire
user community,

00:06:32.990 --> 00:06:37.820
and that's what matters most,
is building a great experience.

00:06:37.820 --> 00:06:42.080
In addition to testing across
all devices, like I said,

00:06:42.080 --> 00:06:45.950
it's important to test across
different browsers and OSs.

00:06:45.950 --> 00:06:49.610
You can't just use Lighthouse
and be like, woohoo!

00:06:49.610 --> 00:06:50.756
Done.

00:06:50.756 --> 00:06:51.970
Don't do that.

00:06:51.970 --> 00:06:53.540
That's bad.

00:06:53.540 --> 00:06:56.200
Test across all
devices and browsers,

00:06:56.200 --> 00:07:00.170
and use different tools
to help you understand.

00:07:00.170 --> 00:07:06.080
So with that, let's take
a look and see how we do.

00:07:06.080 --> 00:07:07.240
Whoa.

00:07:07.240 --> 00:07:09.980
20 out of 100.

00:07:09.980 --> 00:07:17.090
Now, I said that getting 100
was not your goal, but 20 sucks.

00:07:17.090 --> 00:07:20.270
We want a better number than 20.

00:07:20.270 --> 00:07:24.720
So let's take a look at
why we have a score of 20.

00:07:24.720 --> 00:07:27.830
First thing you'll
notice is it's

00:07:27.830 --> 00:07:30.980
checking to see if there's
an offline experience,

00:07:30.980 --> 00:07:34.990
so app can load in an
offline or flaky connections.

00:07:34.990 --> 00:07:37.540
It's looking for
a service worker.

00:07:37.540 --> 00:07:40.540
It's looking to see
that when it's offline,

00:07:40.540 --> 00:07:43.183
that there's a 200 response.

00:07:46.730 --> 00:07:49.430
There's two things that
we know we can fix today,

00:07:49.430 --> 00:07:51.170
we've learned how to do that.

00:07:51.170 --> 00:07:53.990
We can implement the service
worker and we can fix that one.

00:07:53.990 --> 00:07:54.740
OK.

00:07:54.740 --> 00:07:56.730
Good.

00:07:56.730 --> 00:07:58.790
Performance is fast.

00:07:58.790 --> 00:08:02.700
First meaningful paint, it
took almost four seconds

00:08:02.700 --> 00:08:05.960
until the first meaningful
paint today, or for me

00:08:05.960 --> 00:08:07.520
to run this last night.

00:08:07.520 --> 00:08:10.220
That's a lot of time.

00:08:10.220 --> 00:08:14.300
So we had to download
not only the HTML,

00:08:14.300 --> 00:08:17.450
but then we had to
download the JavaScript, we

00:08:17.450 --> 00:08:21.470
had to parse the JavaScript, we
had to execute the JavaScript,

00:08:21.470 --> 00:08:25.700
and then we went, oh, right,
I guess I need some data.

00:08:25.700 --> 00:08:29.480
So we went and got the data,
we downloaded the data,

00:08:29.480 --> 00:08:31.910
and then we could
render something.

00:08:31.910 --> 00:08:34.400
That's client-side rendering.

00:08:34.400 --> 00:08:37.880
If we switch to
server-side rendering,

00:08:37.880 --> 00:08:39.980
where we just make the
request and it's like, hey,

00:08:39.980 --> 00:08:43.039
here's everything, that
number's going to come down.

00:08:46.910 --> 00:08:49.940
Perceptual speed index,
OK, that's kind of high.

00:08:49.940 --> 00:08:54.110
Time to interact, it was
almost just over seven seconds.

00:08:54.110 --> 00:08:55.390
That's slow.

00:08:55.390 --> 00:08:57.590
So I think we can
do a bunch of things

00:08:57.590 --> 00:09:00.620
to improve our performance.

00:09:00.620 --> 00:09:02.300
The next thing it's
going to look at

00:09:02.300 --> 00:09:05.030
is the site is
progressively enhanced.

00:09:05.030 --> 00:09:09.110
So there's one
key test for this.

00:09:09.110 --> 00:09:13.410
Page contains some content
when scripts are not available.

00:09:13.410 --> 00:09:14.060
We saw that.

00:09:14.060 --> 00:09:16.190
Wah-wah, right?

00:09:16.190 --> 00:09:19.640
That's another easy one
for us to fix by adding

00:09:19.640 --> 00:09:22.040
some server-side rendering.

00:09:22.040 --> 00:09:27.110
So no content when
JavaScript is unavailable.

00:09:27.110 --> 00:09:30.080
Your network connection
is not secure,

00:09:30.080 --> 00:09:32.780
or your network
connection is secure.

00:09:32.780 --> 00:09:37.130
Remember, we talked earlier,
service workers require HTTPS.

00:09:37.130 --> 00:09:39.710
Now, I'm running this
on my local machine,

00:09:39.710 --> 00:09:42.466
so I don't really
need that right now,

00:09:42.466 --> 00:09:44.090
so we're just going
to ignore that one.

00:09:44.090 --> 00:09:49.610
That one's OK to fail when
you're doing local development.

00:09:49.610 --> 00:09:52.490
Then the next thing its asks
is, the user can be prompted

00:09:52.490 --> 00:09:53.655
to add to the home screen.

00:09:53.655 --> 00:09:57.420
So it looks for a service
worker, a manifest,

00:09:57.420 --> 00:09:59.650
the manifest contains
the start URL,

00:09:59.650 --> 00:10:03.910
an icon is listed in the
manifest, and a short name.

00:10:03.910 --> 00:10:06.440
So it looks for the things
that Chrome needs prompt.

00:10:08.980 --> 00:10:12.820
Finally, installed web
app can be launched

00:10:12.820 --> 00:10:14.140
from the splash screen.

00:10:14.140 --> 00:10:16.560
So it's checking for a
bunch of things here.

00:10:16.560 --> 00:10:19.420
This is another easy
one for us to fix.

00:10:19.420 --> 00:10:22.080
Sam showed us earlier how
we can go add that manifest,

00:10:22.080 --> 00:10:25.810
and we're gonna go
add a manifest today.

00:10:25.810 --> 00:10:29.610
And then address bar
matches brand colors.

00:10:29.610 --> 00:10:32.380
The design is mobile friendly,
well, it is mobile friendly.

00:10:32.380 --> 00:10:36.520
So at least we got
that one going for us.

00:10:36.520 --> 00:10:38.920
It checks for a number
of best practices,

00:10:38.920 --> 00:10:41.950
looking for things
like offline futures,

00:10:41.950 --> 00:10:45.120
looking for performance
with HTTP/2,

00:10:45.120 --> 00:10:48.680
it looks for accessibility and
a number of things like that,

00:10:48.680 --> 00:10:50.940
and finally the
performance metrics.

00:10:50.940 --> 00:10:53.890
So it gives us a
lot of data for us

00:10:53.890 --> 00:10:57.310
to be able to go, huh,
how's our site doing?

00:10:57.310 --> 00:10:58.143
Is it any good?

00:11:00.910 --> 00:11:02.650
The first thing
that I want to do

00:11:02.650 --> 00:11:06.640
is go and add server-side
rendering to my app.

00:11:06.640 --> 00:11:09.630
I want to take this app
that we've built already

00:11:09.630 --> 00:11:12.730
and is doing all
client-side, and remember,

00:11:12.730 --> 00:11:16.540
this is client-side with React.

00:11:16.540 --> 00:11:20.190
So that means the browser
gets a fully populated page

00:11:20.190 --> 00:11:23.800
in the initial HTTP response
when I do server-side rather

00:11:23.800 --> 00:11:25.690
than relying on
multiple requests

00:11:25.690 --> 00:11:28.330
to get content on the screen.

00:11:28.330 --> 00:11:32.710
Equally important, it
means that our web app

00:11:32.710 --> 00:11:34.690
will work in browsers
where JavaScript

00:11:34.690 --> 00:11:36.940
is disabled, in
that Safari example

00:11:36.940 --> 00:11:38.720
that I talked about earlier.

00:11:38.720 --> 00:11:43.990
Now, not every web app will be
able to run with full fidelity

00:11:43.990 --> 00:11:48.149
with JavaScript disabled,
but in our case that's OK.

00:11:48.149 --> 00:11:49.690
Users are going to
click on something

00:11:49.690 --> 00:11:51.820
and see something else.

00:11:51.820 --> 00:11:53.920
It works.

00:11:53.920 --> 00:11:58.890
So it's fairly straightforward
to add in server-side rendering

00:11:58.890 --> 00:12:05.050
to our React app using
universal JavaScript

00:12:05.050 --> 00:12:09.680
that we can share between
our client and our server.

00:12:09.680 --> 00:12:14.440
So we're going to use Express
in Node as our web server,

00:12:14.440 --> 00:12:18.150
because it plays nicely
with the React router.

00:12:18.150 --> 00:12:21.460
While we're talking about
React, like I said earlier,

00:12:21.460 --> 00:12:24.160
other frameworks,
like Angular, Ember,

00:12:24.160 --> 00:12:27.290
have their own solutions
for server-side rendering.

00:12:27.290 --> 00:12:29.830
So this works for them as well.

00:12:29.830 --> 00:12:33.100
I'm just using this as the
specific example today.

00:12:33.100 --> 00:12:36.880
So you can see here
I've added to a--

00:12:36.880 --> 00:12:39.850
I've got a gulpfile as
part of my build process,

00:12:39.850 --> 00:12:43.700
and I've added a
new gulp serve task,

00:12:43.700 --> 00:12:46.090
which is going to
serve my app, it's

00:12:46.090 --> 00:12:49.390
going to spin up
my Node web server.

00:12:49.390 --> 00:12:53.930
And I've added a web
server to my build,

00:12:53.930 --> 00:12:55.870
so this is where
we're actually going

00:12:55.870 --> 00:13:01.360
to build the server rendered
version of the page.

00:13:01.360 --> 00:13:04.354
And down here I've got
this really important bit.

00:13:04.354 --> 00:13:05.770
This is where we're
actually going

00:13:05.770 --> 00:13:12.090
to use React to render
the page on the server.

00:13:12.090 --> 00:13:15.280
So now when I make a request
for that initial page,

00:13:15.280 --> 00:13:18.700
I get the content
already rendered.

00:13:18.700 --> 00:13:21.880
I need to make one
other change to my page.

00:13:21.880 --> 00:13:26.410
I need to change my index.html
because I need to actually make

00:13:26.410 --> 00:13:29.980
it templated so that I can
start to render the content

00:13:29.980 --> 00:13:31.360
server-side.

00:13:31.360 --> 00:13:36.460
And all I do is have this
fairly simple HTML body

00:13:36.460 --> 00:13:40.110
and I've got React HTML
as my template in there.

00:13:40.110 --> 00:13:44.650
So I'm just going to
shove everything in.

00:13:44.650 --> 00:13:48.490
So now that we've got
server-side templating set up,

00:13:48.490 --> 00:13:52.980
let's run the Lighthouse tests
again and confirm that it

00:13:52.980 --> 00:13:55.870
worked, so see how it did.

00:13:55.870 --> 00:13:58.660
And let's also have a
look at it in Safari

00:13:58.660 --> 00:14:03.760
and see if it works there,
because it should work now.

00:14:03.760 --> 00:14:06.670
So Chrome.

00:14:06.670 --> 00:14:07.450
Starts loading.

00:14:10.160 --> 00:14:13.010
Spin, spin, spin.

00:14:13.010 --> 00:14:15.530
It's taking a
little bit of time.

00:14:15.530 --> 00:14:17.930
There it works.

00:14:17.930 --> 00:14:22.650
Notice how this time one of the
big differences was that images

00:14:22.650 --> 00:14:26.780
started populating
in almost right away,

00:14:26.780 --> 00:14:32.660
whereas last time all of
a sudden we saw the boxes

00:14:32.660 --> 00:14:35.300
and then a few seconds
later we got the images.

00:14:35.300 --> 00:14:40.130
So the perceived performance of
this was actually much faster.

00:14:40.130 --> 00:14:42.560
It took a little bit of extra
time at the very beginning

00:14:42.560 --> 00:14:45.380
to get that content
down, but as a user

00:14:45.380 --> 00:14:49.090
I feel like it rendered faster.

00:14:49.090 --> 00:14:49.790
Safari.

00:14:49.790 --> 00:14:51.950
Let's see how this one goes.

00:14:51.950 --> 00:14:55.570
Remember, this didn't
work at all last time.

00:14:55.570 --> 00:14:56.740
And there we go.

00:14:56.740 --> 00:15:00.860
So in Safari, now we
get all of our images.

00:15:00.860 --> 00:15:01.670
It works.

00:15:01.670 --> 00:15:06.740
It behaves as we would
expect it to work in Safari.

00:15:06.740 --> 00:15:07.730
That's awesome.

00:15:07.730 --> 00:15:12.620
We've got a little
bit of a step forward.

00:15:12.620 --> 00:15:14.720
Let's run Lighthouse.

00:15:14.720 --> 00:15:17.160
This is what Lighthouse
looks like when you run it.

00:15:17.160 --> 00:15:19.160
I've got it up as the
Chrome extension up there,

00:15:19.160 --> 00:15:21.410
so I just went and I
hit the button that

00:15:21.410 --> 00:15:23.300
says, OK, it's going to go run.

00:15:23.300 --> 00:15:25.360
And it does a bunch
of different things,

00:15:25.360 --> 00:15:28.000
it requests the page
in debugging mode,

00:15:28.000 --> 00:15:32.120
it requests the page in
different screen sizes,

00:15:32.120 --> 00:15:35.180
it goes and runs and
requests Web SQL data,

00:15:35.180 --> 00:15:38.036
it does all kinds
of crazy things.

00:15:38.036 --> 00:15:43.070
Then it comes back and
it gives us this result.

00:15:43.070 --> 00:15:46.798
We went from 22 to 37.

00:15:46.798 --> 00:15:48.001
OK.

00:15:48.001 --> 00:15:48.500
All right.

00:15:48.500 --> 00:15:49.400
I'll take that.

00:15:49.400 --> 00:15:53.900
Still not a passing
grade, but we've gone up.

00:15:53.900 --> 00:15:56.390
Now there's a couple of
things that have happened

00:15:56.390 --> 00:15:57.866
to make our experience better.

00:16:02.740 --> 00:16:05.860
App can load in flaky-- we
didn't do anything around that.

00:16:05.860 --> 00:16:07.700
But let's look at
our performance.

00:16:07.700 --> 00:16:11.390
Remember before our performance
was kind of embarrassing?

00:16:11.390 --> 00:16:16.680
So now our first meaningful
paint happens at 1.4 seconds.

00:16:16.680 --> 00:16:19.800
We were six or seven
seconds last time.

00:16:19.800 --> 00:16:23.110
Timed interactive went
from seven seconds,

00:16:23.110 --> 00:16:28.850
it was like 7,065 milliseconds,
to 2,100 milliseconds.

00:16:28.850 --> 00:16:32.730
Our performance significantly
we increased here.

00:16:32.730 --> 00:16:38.500
So that's a big part of why
we got that number bump.

00:16:38.500 --> 00:16:42.420
The other one is the site
is progressively enhanced.

00:16:42.420 --> 00:16:45.750
The page now has
content if I don't

00:16:45.750 --> 00:16:47.130
have JavaScript installed.

00:16:47.130 --> 00:16:50.220
So I've got a good piece there.

00:16:50.220 --> 00:16:53.280
The rest of these things
haven't really changed.

00:16:53.280 --> 00:16:55.470
We haven't made any
big changes here,

00:16:55.470 --> 00:17:00.000
so I wouldn't expect
any of these to change.

00:17:00.000 --> 00:17:03.060
Design is still mobile
friendly, woohoo.

00:17:03.060 --> 00:17:07.099
Our performance, we're in
a better place overall.

00:17:07.099 --> 00:17:12.329
Now, we could still do better
and we're going to do better.

00:17:12.329 --> 00:17:14.430
Next let's add a service worker.

00:17:14.430 --> 00:17:17.010
You heard me talk
today earlier about how

00:17:17.010 --> 00:17:23.190
you can build your own service
worker, but let's do it.

00:17:23.190 --> 00:17:25.530
One thing to remember,
service workers

00:17:25.530 --> 00:17:29.480
are a progressive enhancement.

00:17:29.480 --> 00:17:32.310
Not all browsers are
going to support that.

00:17:32.310 --> 00:17:36.471
But that's OK, because for
browsers that don't support it,

00:17:36.471 --> 00:17:38.220
they're not going to
get that little boost

00:17:38.220 --> 00:17:40.980
but for browsers
that do, they will.

00:17:40.980 --> 00:17:46.110
So even on browsers that
do support service workers,

00:17:46.110 --> 00:17:47.850
that service worker
experience isn't

00:17:47.850 --> 00:17:50.040
going to do anything
for the first load.

00:17:50.040 --> 00:17:53.700
So it's just that one
little bit to remember.

00:17:53.700 --> 00:17:56.670
Our app is built using
an app shell model.

00:17:56.670 --> 00:17:59.910
And the app shell model,
think of an app shell model

00:17:59.910 --> 00:18:02.705
in a similar way as
a native app would

00:18:02.705 --> 00:18:07.260
work where you're going to store
all of the key resources needed

00:18:07.260 --> 00:18:09.180
for your app that
aren't going to change.

00:18:09.180 --> 00:18:13.720
Everything but the
data on the device.

00:18:13.720 --> 00:18:16.862
And then you'll go get
the data from the network.

00:18:16.862 --> 00:18:18.820
That way you don't have
to transfer everything.

00:18:18.820 --> 00:18:23.430
You only have to transfer
a little bit each time.

00:18:23.430 --> 00:18:26.700
That means that we can
cache the app shell locally

00:18:26.700 --> 00:18:30.780
and we can use runtime caching
strategies for our data

00:18:30.780 --> 00:18:33.450
so that we can make requests
for dynamic content.

00:18:37.170 --> 00:18:40.410
One of the most important
things to understand

00:18:40.410 --> 00:18:43.020
when you're building
any kind of web app,

00:18:43.020 --> 00:18:44.640
and want to use
a service worker,

00:18:44.640 --> 00:18:46.590
and want to start
to make it better,

00:18:46.590 --> 00:18:50.340
is understanding what network
requests get made and how

00:18:50.340 --> 00:18:53.040
and what you need
to do with those.

00:18:53.040 --> 00:18:55.650
And then DevTools are a
really important place

00:18:55.650 --> 00:18:57.490
to have a look at that.

00:18:57.490 --> 00:18:59.340
So we need to
configure-- we're going

00:18:59.340 --> 00:19:03.130
to use sw-precache
and sw-toolbox,

00:19:03.130 --> 00:19:06.180
those are two libraries I
talked about earlier today,

00:19:06.180 --> 00:19:09.420
we need to go and use
those to have a look

00:19:09.420 --> 00:19:11.225
and see what's going on.

00:19:16.236 --> 00:19:20.470
Let's have a look at how
I went from step two,

00:19:20.470 --> 00:19:23.960
where we added server-side
rendering to go and add

00:19:23.960 --> 00:19:25.490
our service worker.

00:19:25.490 --> 00:19:29.540
The first thing I did
was I added to my gulp

00:19:29.540 --> 00:19:32.215
build task sw-precache.

00:19:32.215 --> 00:19:34.550
And sw-precache is
that thing that's

00:19:34.550 --> 00:19:39.500
going to help us
precache our key pieces.

00:19:39.500 --> 00:19:46.490
Then I've added a gulp task
called Generate Service Worker.

00:19:46.490 --> 00:19:49.280
Really creative name, I know.

00:19:49.280 --> 00:19:52.070
So Generate Service Worker
is going to go and build

00:19:52.070 --> 00:19:53.900
our service worker
for us, and there's

00:19:53.900 --> 00:19:55.430
a couple of things it does.

00:19:55.430 --> 00:20:00.470
It does ARC static files,
it does some dynamic files,

00:20:00.470 --> 00:20:07.500
and it does some other various
runtime caching strategies.

00:20:07.500 --> 00:20:09.330
So the key thing
here is we said,

00:20:09.330 --> 00:20:12.840
hey, I want to cache my app
shell, I want to cache my data,

00:20:12.840 --> 00:20:14.990
and we're going
to go from there.

00:20:14.990 --> 00:20:21.470
Then we need to make one minor
change to our index.html,

00:20:21.470 --> 00:20:23.630
we need to register
our service worker.

00:20:23.630 --> 00:20:26.360
So if service
worker in navigator,

00:20:26.360 --> 00:20:29.990
register service worker.

00:20:29.990 --> 00:20:33.290
So now that we have our
service worker in place,

00:20:33.290 --> 00:20:36.900
let's run the Lighthouse tests
again and see how this works

00:20:36.900 --> 00:20:38.670
and see how it goes.

00:20:38.670 --> 00:20:41.730
So it goes, it loads the
page, renders the trace,

00:20:41.730 --> 00:20:47.610
loading page again,
rendering, loading, rendering.

00:20:51.830 --> 00:20:57.850
So 20, 37, 52.

00:20:57.850 --> 00:21:00.330
So just by adding
a service worker,

00:21:00.330 --> 00:21:03.810
we've taken that number and
we've bumped it up a bit.

00:21:03.810 --> 00:21:08.570
So there's a couple of key
things that have changed here.

00:21:08.570 --> 00:21:10.880
First, here's this big one.

00:21:14.720 --> 00:21:16.840
As the service
worker, app can load

00:21:16.840 --> 00:21:20.390
in flaky and
offline connections.

00:21:20.390 --> 00:21:22.430
That's kind of awesome.

00:21:22.430 --> 00:21:26.300
Now performance, first
meaningful paint, awesome.

00:21:26.300 --> 00:21:28.670
Time to interact,
those are all great.

00:21:28.670 --> 00:21:32.120
Now it's important
to actually make sure

00:21:32.120 --> 00:21:37.550
that we are serving our app
from the service worker.

00:21:37.550 --> 00:21:40.000
You can use the
DevTools to do that.

00:21:40.000 --> 00:21:44.200
And the way that I did that
is I opened up the DevTools

00:21:44.200 --> 00:21:49.720
and I went over to the network
and I refreshed the page.

00:21:49.720 --> 00:21:54.297
So when I refresh the
page, I get the information

00:21:54.297 --> 00:21:56.800
in the network panel.

00:21:56.800 --> 00:21:59.770
Here's the file
that was requested.

00:21:59.770 --> 00:22:03.682
The HTTP response goes
to 200, awesome, OK.

00:22:03.682 --> 00:22:05.140
Actually, I guess
it's not awesome.

00:22:05.140 --> 00:22:07.690
It's just OK.

00:22:07.690 --> 00:22:13.300
What kind of file it was,
who made the request.

00:22:13.300 --> 00:22:17.600
And then here, the
size of the file.

00:22:17.600 --> 00:22:21.160
Now look at all these
nice, beautiful brackets

00:22:21.160 --> 00:22:23.830
that say from service worker.

00:22:23.830 --> 00:22:27.730
That's telling us that that
network request didn't go over

00:22:27.730 --> 00:22:30.880
the network, we just pulled
it off our local device.

00:22:30.880 --> 00:22:35.320
So almost everything came
from our service worker.

00:22:35.320 --> 00:22:39.250
That's exactly what we want.

00:22:39.250 --> 00:22:43.180
When you're testing your
site and understanding

00:22:43.180 --> 00:22:46.510
where are things coming from,
is this going to work offline,

00:22:46.510 --> 00:22:50.890
is this going to work if I
don't have anything, open up

00:22:50.890 --> 00:22:52.845
your DevTools and have a look.

00:22:52.845 --> 00:22:55.210
Where is everything
being served from?

00:22:55.210 --> 00:22:58.596
And at the same time,
also, one thing to notice,

00:22:58.596 --> 00:23:01.320
look at these response times.

00:23:01.320 --> 00:23:04.620
zero milliseconds, one
millisecond, zero, one, one.

00:23:04.620 --> 00:23:07.390
Our worst one is
like 17 milliseconds,

00:23:07.390 --> 00:23:09.610
that's kind of awesome.

00:23:09.610 --> 00:23:11.680
When you think
about performance,

00:23:11.680 --> 00:23:13.516
to be able to get
something that fast,

00:23:13.516 --> 00:23:14.890
there's no way
you could get that

00:23:14.890 --> 00:23:18.200
across the network in anywhere
near that amount of time.

00:23:21.550 --> 00:23:23.350
While we're in the
DevTools, I also

00:23:23.350 --> 00:23:27.320
want to point out this
application panel.

00:23:27.320 --> 00:23:30.160
This is the one that I talked
about a little bit earlier

00:23:30.160 --> 00:23:34.090
and said is probably going to
be one of your best friends.

00:23:34.090 --> 00:23:36.730
The application panel
is the central place

00:23:36.730 --> 00:23:40.060
for debugging everything
to do with service workers

00:23:40.060 --> 00:23:41.920
or progressive web apps.

00:23:41.920 --> 00:23:45.160
All the stuff that you need
to deal with is in here.

00:23:45.160 --> 00:23:50.050
We can confirm our new
service worker is running.

00:23:50.050 --> 00:23:56.010
So service-worker.js is there,
and it tells us when it was

00:23:56.010 --> 00:23:56.610
received.

00:23:56.610 --> 00:23:59.480
This is an older screenshot.

00:23:59.480 --> 00:24:02.940
But it tells us-- here's this
really big one, service worker

00:24:02.940 --> 00:24:06.270
status, 0, activated
and is running

00:24:06.270 --> 00:24:07.950
and there are no errors.

00:24:07.950 --> 00:24:10.560
That's a good sign.

00:24:10.560 --> 00:24:14.247
There's another really good one
to keep an eye on when you're

00:24:14.247 --> 00:24:16.830
in the service worker panel, if
you're looking at your service

00:24:16.830 --> 00:24:17.580
workers.

00:24:17.580 --> 00:24:22.860
If you refresh the page, and
I'll show this in one sec,

00:24:22.860 --> 00:24:27.000
if you want to see if the
service worker has updated,

00:24:27.000 --> 00:24:29.730
look at this number here.

00:24:29.730 --> 00:24:34.590
That number tells you what the
idea of the service worker is.

00:24:34.590 --> 00:24:38.340
So if I reload
the page right now

00:24:38.340 --> 00:24:40.890
and the service
worker hasn't changed,

00:24:40.890 --> 00:24:43.290
that number will stay the same.

00:24:43.290 --> 00:24:47.480
If I reload the page and
I get a new service worker

00:24:47.480 --> 00:24:51.480
and it takes control right away,
that number will get bumped up.

00:24:51.480 --> 00:24:54.270
So you can always
tell, oh, hey, hang on.

00:24:54.270 --> 00:24:57.930
I updated my service
worker, but the old one

00:24:57.930 --> 00:25:02.380
is still running because
the number hasn't changed.

00:25:02.380 --> 00:25:06.720
That's just one of those
really helpful little bits

00:25:06.720 --> 00:25:07.980
that I like.

00:25:07.980 --> 00:25:11.270
There's a couple of other
things that you can do in here.

00:25:11.270 --> 00:25:13.322
You can go and you can say--

00:25:13.322 --> 00:25:15.670
if you check that
check box, Chrome

00:25:15.670 --> 00:25:18.290
will put the browser
into offline mode

00:25:18.290 --> 00:25:21.180
and won't send any
requests to the network.

00:25:21.180 --> 00:25:23.610
Quick, easy way to test offline.

00:25:23.610 --> 00:25:26.240
You don't have to shut down your
server or anything like that.

00:25:26.240 --> 00:25:30.270
You can just say, hey, offline.

00:25:30.270 --> 00:25:34.050
Update on reload is
another helpful one.

00:25:34.050 --> 00:25:37.530
And I recommend
checking this check box

00:25:37.530 --> 00:25:40.920
when you're doing your
development, because it always

00:25:40.920 --> 00:25:43.770
says, hey, go check for a
new service worker always,

00:25:43.770 --> 00:25:46.000
and if there is a
new one, just reload.

00:25:46.000 --> 00:25:50.250
Just start using
this right away.

00:25:50.250 --> 00:25:53.901
And it always puts
the code into--

00:25:53.901 --> 00:25:56.670
puts the service worker
in control right away.

00:25:56.670 --> 00:25:59.220
So I use that one a lot.

00:25:59.220 --> 00:26:02.680
Finally, bypass for network.

00:26:02.680 --> 00:26:07.515
This allows us to skip the
service worker's fetch handler

00:26:07.515 --> 00:26:08.806
and go straight to the network.

00:26:12.180 --> 00:26:15.570
Skip the service worker
fetch, doesn't that kind of

00:26:15.570 --> 00:26:19.230
defeat the purpose of
the service worker?

00:26:19.230 --> 00:26:20.590
Yes, it does.

00:26:20.590 --> 00:26:22.620
But the good thing here is--

00:26:22.620 --> 00:26:25.500
say, for example,
you're testing a page

00:26:25.500 --> 00:26:29.820
and you change the color,
you change something in CSS

00:26:29.820 --> 00:26:31.860
and the color's not changing.

00:26:31.860 --> 00:26:34.713
And you can't figure out
why it's not changing.

00:26:34.713 --> 00:26:38.170
You're like, I can't--

00:26:38.170 --> 00:26:40.120
just banging your
head against the desk.

00:26:40.120 --> 00:26:43.980
Go check that bypass for
network and try refreshing.

00:26:43.980 --> 00:26:47.400
If the color changes, it
means that your service worker

00:26:47.400 --> 00:26:48.840
isn't updated.

00:26:48.840 --> 00:26:52.620
It means that you're still
serving stuff from the cache.

00:26:52.620 --> 00:26:56.350
So bypass for network just
skips the service worker cache.

00:26:58.930 --> 00:27:04.540
Now let's take a look at a
couple of other little things

00:27:04.540 --> 00:27:07.900
that we can do to bump that
number up a little bit more.

00:27:07.900 --> 00:27:11.710
Sam talked earlier about
using the manifest to tell

00:27:11.710 --> 00:27:15.820
the browser how we want to be
shown on the user's home screen

00:27:15.820 --> 00:27:17.890
and add ourselves
to the home screen.

00:27:17.890 --> 00:27:22.740
So let's go add the
appropriate metadata.

00:27:22.740 --> 00:27:26.440
We're going to use the manifest
because that works for Chrome,

00:27:26.440 --> 00:27:30.680
that works for Firefox,
it works for Opera,

00:27:30.680 --> 00:27:36.370
it will work for Edge, I believe
soon if it doesn't already.

00:27:36.370 --> 00:27:39.920
But it doesn't work
for one other browser

00:27:39.920 --> 00:27:42.500
that I bet a bunch of
you have on your phones.

00:27:45.670 --> 00:27:49.010
If you use Safari,
Safari doesn't recognize

00:27:49.010 --> 00:27:51.310
or doesn't read the manifest.

00:27:51.310 --> 00:27:56.530
So for that we need to
add a bunch of meta tags.

00:27:56.530 --> 00:28:00.460
Let's have a look at what
we need to do for that.

00:28:00.460 --> 00:28:02.770
You saw this with Sam earlier.

00:28:02.770 --> 00:28:04.360
This is the manifest.

00:28:04.360 --> 00:28:06.338
This is one for the
Washington Post.

00:28:08.890 --> 00:28:11.110
We're going to add
something very similar,

00:28:11.110 --> 00:28:14.230
and we're going to do this.

00:28:14.230 --> 00:28:17.860
I have added an image.

00:28:17.860 --> 00:28:21.516
The image that I've
added, I've picked the 144

00:28:21.516 --> 00:28:24.280
by 144 pixel icon.

00:28:24.280 --> 00:28:27.370
If you're only going
to do one icon,

00:28:27.370 --> 00:28:32.620
I would recommend that
one or something bigger.

00:28:32.620 --> 00:28:37.480
If you're like me,
you don't start

00:28:37.480 --> 00:28:42.880
twitching when you see icons
that have been rescaled

00:28:42.880 --> 00:28:45.250
and are not pixel perfect.

00:28:45.250 --> 00:28:48.970
Some people who are
very designer smart,

00:28:48.970 --> 00:28:51.685
and they all look really
fashionable, and really cool,

00:28:51.685 --> 00:28:53.980
and wear turtlenecks
and that kind of thing,

00:28:53.980 --> 00:28:56.830
will supply lots of
different icon sizes

00:28:56.830 --> 00:28:59.440
and they will hand
tweak each one.

00:28:59.440 --> 00:29:00.250
Awesome.

00:29:00.250 --> 00:29:01.360
Go for it.

00:29:01.360 --> 00:29:03.370
I'm too lazy.

00:29:03.370 --> 00:29:07.900
So one icon at 144.

00:29:07.900 --> 00:29:09.640
I've added a manifest.

00:29:09.640 --> 00:29:11.920
So it's got the
name, the short name,

00:29:11.920 --> 00:29:15.870
it's got that one
icon, the start URL,

00:29:15.870 --> 00:29:19.510
it says, display stand
alone so that the app always

00:29:19.510 --> 00:29:23.110
starts without the address
bar, we set the background

00:29:23.110 --> 00:29:26.650
color and a theme color.

00:29:26.650 --> 00:29:29.020
Now we've got our manifest.

00:29:29.020 --> 00:29:31.870
There's one other thing
that we need to do.

00:29:31.870 --> 00:29:35.910
We need to update
our index.html file.

00:29:35.910 --> 00:29:39.670
And we need to add
the Apple meta tags.

00:29:39.670 --> 00:29:43.690
So we need to do the icon,
the Apple touch icon,

00:29:43.690 --> 00:29:47.845
we need to do the Apple
mobile web app capable.

00:29:47.845 --> 00:29:52.330
I always hate typing that one
in, it's so long and annoying.

00:29:52.330 --> 00:29:56.860
But Apple mobile web
app capable, yes.

00:29:56.860 --> 00:29:59.190
And then we need
to tell the browser

00:29:59.190 --> 00:30:01.040
about our manifest file.

00:30:01.040 --> 00:30:06.360
So that's the one right
there in the middle.

00:30:06.360 --> 00:30:11.200
Link rel manifest and
point to our manifest.

00:30:11.200 --> 00:30:16.460
So we've added her meta
tags, let's give it a shot.

00:30:16.460 --> 00:30:18.850
Let's see how it works.

00:30:18.850 --> 00:30:23.245
So go load it in Lighthouse.

00:30:23.245 --> 00:30:27.040
It goes and does its thing.

00:30:27.040 --> 00:30:29.710
Waiting for page, waiting
for the onload event,

00:30:29.710 --> 00:30:33.275
checking HTTPS, and viewport,
theme color, and manifest,

00:30:33.275 --> 00:30:34.800
and all that kind of fun stuff.

00:30:37.820 --> 00:30:41.180
Normally if you're doing
this on a good, fast network

00:30:41.180 --> 00:30:45.850
connection, it will only
take about 15 seconds to run.

00:30:45.850 --> 00:30:48.860
If you are doing it like me
at the hotel I'm staying at,

00:30:48.860 --> 00:30:53.570
which has not very fast wireless
or a very fast internet,

00:30:53.570 --> 00:30:56.187
it takes 30, 45 seconds.

00:30:58.730 --> 00:31:00.550
We're almost done here.

00:31:00.550 --> 00:31:04.850
Retrieving web SQL, well,
there's really nothing.

00:31:04.850 --> 00:31:06.140
78.

00:31:06.140 --> 00:31:08.390
That's not bad.

00:31:08.390 --> 00:31:14.959
We took our number from
somewhere in the 20s,

00:31:14.959 --> 00:31:17.000
to somewhere in the 30s,
to somewhere in the 50s,

00:31:17.000 --> 00:31:18.740
to somewhere in the 70s.

00:31:18.740 --> 00:31:20.600
That's a little bit better.

00:31:20.600 --> 00:31:24.230
We took that number up
pretty significantly

00:31:24.230 --> 00:31:26.990
by just adding four things.

00:31:26.990 --> 00:31:29.600
The key thing that
we've added here

00:31:29.600 --> 00:31:31.850
is we now have that
registered service worker.

00:31:31.850 --> 00:31:36.890
So we've got that one bit so
our URL responds with a service

00:31:36.890 --> 00:31:41.980
worker and we get a 200 OK
when the app isn't working.

00:31:41.980 --> 00:31:44.710
Then there's one other
panel that I like

00:31:44.710 --> 00:31:47.750
within the application panel.

00:31:47.750 --> 00:31:50.780
And that's a couple
other things.

00:31:50.780 --> 00:31:53.420
Looking at this manifest
tab, we can actually

00:31:53.420 --> 00:31:55.210
see what's going on
in our manifests.

00:31:55.210 --> 00:31:58.450
So we can understand, oh,
hey, we've got these things.

00:31:58.450 --> 00:32:01.084
You can see the name
and the short name,

00:32:01.084 --> 00:32:02.750
so we can make sure
that the manifest is

00:32:02.750 --> 00:32:04.290
being loaded properly.

00:32:04.290 --> 00:32:07.100
We can see the start URL, the
theme color, the background

00:32:07.100 --> 00:32:11.390
color, the orientation
display, and all of the icons.

00:32:11.390 --> 00:32:15.080
One of the things I've
caught, some mistakes

00:32:15.080 --> 00:32:17.480
that I've seen in
some of my own apps,

00:32:17.480 --> 00:32:20.840
I'll always scroll down
and look at all the icons

00:32:20.840 --> 00:32:23.720
because sometimes I've
had a typo in my icon list

00:32:23.720 --> 00:32:26.120
and I'll get a broken image.

00:32:26.120 --> 00:32:28.090
So just making sure
that all the icons get

00:32:28.090 --> 00:32:31.274
loaded, making sure that
you've got everything there.

00:32:31.274 --> 00:32:32.690
One of the other
things you can do

00:32:32.690 --> 00:32:35.900
is hit that Add to Home
Screen, and that will simulate

00:32:35.900 --> 00:32:37.790
adding it to the home screen.

00:32:37.790 --> 00:32:39.580
So you can see how
that process will

00:32:39.580 --> 00:32:41.880
work because there's a
couple APIs you can throw in

00:32:41.880 --> 00:32:43.580
for there.

00:32:43.580 --> 00:32:45.240
I can see the
service worker stuff.

00:32:45.240 --> 00:32:45.740
Great.

00:32:45.740 --> 00:32:46.670
Awesome.

00:32:46.670 --> 00:32:49.890
We can see that I took
this at 9:34 last night,

00:32:49.890 --> 00:32:51.770
I was working on this.

00:32:51.770 --> 00:32:54.860
You can see that
number is up to 12.

00:32:54.860 --> 00:32:57.830
I can dig in to the cache.

00:32:57.830 --> 00:33:01.540
I can see what's going on
and what's been cached.

00:33:01.540 --> 00:33:03.200
In this particular
case, remember

00:33:03.200 --> 00:33:04.880
I talked about cache names?

00:33:04.880 --> 00:33:07.340
I've got three different
cache names going,

00:33:07.340 --> 00:33:10.820
three different cachers,
sw-precache v2 at something,

00:33:10.820 --> 00:33:16.010
$$$toolboxcache cache
something, and image cache http.

00:33:16.010 --> 00:33:18.530
So you can see all of the
stuff that's in my cache,

00:33:18.530 --> 00:33:21.940
I can go, yep, all
those are looking good.

00:33:21.940 --> 00:33:23.990
Sweet.

00:33:23.990 --> 00:33:30.160
So those tools are really
useful in order to do this.

00:33:30.160 --> 00:33:33.080
Now, I am gonna cheat.

00:33:33.080 --> 00:33:34.830
I said I wasn't going
to do anything live.

00:33:34.830 --> 00:33:37.340
And I'm not really going
to do anything live,

00:33:37.340 --> 00:33:40.700
but I'm going to do
something a little live.

00:33:40.700 --> 00:33:42.096
I want my screen back, please.

00:33:51.220 --> 00:33:54.680
I want to point out one
thing, network is totally off.

00:33:54.680 --> 00:33:57.843
There's nothing plugged in here.

00:33:57.843 --> 00:33:59.910
You can see all the
fun places I've gone.

00:33:59.910 --> 00:34:06.731
Local, host, 8084, which
is where I had my site.

00:34:10.330 --> 00:34:12.280
It helps if I'm doing
it in the right browser

00:34:12.280 --> 00:34:14.060
and the right person.

00:34:14.060 --> 00:34:17.045
There we go, person one.

00:34:17.045 --> 00:34:20.449
Let's try this.

00:34:20.449 --> 00:34:21.380
8084.

00:34:21.380 --> 00:34:22.770
So no network connection.

00:34:22.770 --> 00:34:24.389
Everything is there in cache.

00:34:24.389 --> 00:34:30.659
And in fact, I can even go in
and see some of these things

00:34:30.659 --> 00:34:31.920
that I clicked on earlier.

00:34:31.920 --> 00:34:34.250
So I've got that full
experience that works

00:34:34.250 --> 00:34:40.280
offline, nice and fast, nice
and easy, works really well.

00:34:40.280 --> 00:34:42.325
Let me hop back to my slides.

00:34:45.510 --> 00:34:47.790
As you think about
what you're building

00:34:47.790 --> 00:34:51.090
and how you're going
through all of your products

00:34:51.090 --> 00:34:56.340
and building user
experiences, think about how

00:34:56.340 --> 00:34:58.960
you can take tools
like this to say,

00:34:58.960 --> 00:35:00.690
how do I make my app better?

00:35:00.690 --> 00:35:02.910
What are some easy
things that I can

00:35:02.910 --> 00:35:06.780
do to take my app
to the next step?

00:35:06.780 --> 00:35:09.330
You don't always have to
start from the beginning.

00:35:09.330 --> 00:35:12.420
You don't always have
to do anything crazy.

00:35:12.420 --> 00:35:17.730
Just taking little steps is
a really important process.

00:35:17.730 --> 00:35:19.920
So I hope I've inspired
you a little bit

00:35:19.920 --> 00:35:23.340
to follow our lead to
take some of these things

00:35:23.340 --> 00:35:27.360
back to your team, how you
can use Lighthouse as a way

00:35:27.360 --> 00:35:32.160
to really understand what's
going on, to build experiences

00:35:32.160 --> 00:35:34.360
that delight your users.

00:35:34.360 --> 00:35:39.960
But don't forget, progressive,
fast, delightful UX

00:35:39.960 --> 00:35:41.340
is your goal.

00:35:41.340 --> 00:35:45.440
Building progressive web
apps that are reliable, fast,

00:35:45.440 --> 00:35:53.010
and engaging is fun, I
think, and helps us make

00:35:53.010 --> 00:35:55.950
the web a little bit better.

00:35:55.950 --> 00:35:59.150
Before we go, I'll point
out a couple of links.

00:35:59.150 --> 00:36:04.590
The sample code that I showed
you is there at this link,

00:36:04.590 --> 00:36:05.850
it's up on GitHub.

00:36:05.850 --> 00:36:07.770
You can download
that, you can actually

00:36:07.770 --> 00:36:13.270
walk through all the steps,
you can get Lighthouse.

00:36:13.270 --> 00:36:15.690
Lighthouse is up
on GitHub as well.

00:36:15.690 --> 00:36:17.640
You can either
download the source

00:36:17.640 --> 00:36:19.620
and go and compile
it yourself and do

00:36:19.620 --> 00:36:21.450
some of the fun,
crazy stuff, look

00:36:21.450 --> 00:36:24.920
at how some of the tools
or the tests are written.

00:36:27.630 --> 00:36:30.400
You can take a look at a
couple of other things.

00:36:30.400 --> 00:36:32.560
But the other one that
we have, and I really

00:36:32.560 --> 00:36:34.560
would recommend you
go check this out,

00:36:34.560 --> 00:36:38.392
is the code labs that we have on
building progressive web apps.

00:36:38.392 --> 00:36:40.350
There's a couple of them,
there's three of them

00:36:40.350 --> 00:36:42.115
that I think are
really fantastic.

00:36:42.115 --> 00:36:47.940
They're up on developers.googl
e.cn/web/fundamentals/

00:36:47.940 --> 00:36:52.555
something, something,
codelabs/, go from there.

00:36:52.555 --> 00:36:53.430
Just click that link.

00:36:53.430 --> 00:36:55.170
Well, don't click that
link because that's not

00:36:55.170 --> 00:36:56.190
going to do anything.

00:36:56.190 --> 00:36:59.400
But type that link
into your browser.

00:36:59.400 --> 00:37:01.570
The three that are there,
building progressive web

00:37:01.570 --> 00:37:05.490
apps from the ground up,
debugging service workers,

00:37:05.490 --> 00:37:09.310
which will walk you through
all of that panel really well.

00:37:09.310 --> 00:37:12.420
And the third one is
adding push messages

00:37:12.420 --> 00:37:13.680
to your progressive web app.

00:37:13.680 --> 00:37:16.500
So you can see how that works.

00:37:16.500 --> 00:37:19.590
With that, I want to
say, thank you very much.

00:37:19.590 --> 00:37:20.980
I've had a great time today.

00:37:20.980 --> 00:37:23.100
I hope that you've
learned something as well.

00:37:23.100 --> 00:37:25.144
I will open it up
to questions now.

00:37:35.780 --> 00:37:41.530
You had questions all day and
now you have no questions?

00:37:41.530 --> 00:37:44.000
I'm going to go
sulk in the corner.

00:37:44.000 --> 00:37:45.076
Oh, yes!

00:37:47.664 --> 00:37:48.330
AUDIENCE: Hello.

00:37:48.330 --> 00:37:52.650
I want to ask if
for many websites

00:37:52.650 --> 00:37:58.160
they use service workers.

00:37:58.160 --> 00:38:08.780
So in the browser, the service
workers were stored many,

00:38:08.780 --> 00:38:12.440
I want to ask, is
there cache limitation?

00:38:12.440 --> 00:38:15.110
So when their cache
is full, so how

00:38:15.110 --> 00:38:18.260
do the browser to [INAUDIBLE]?

00:38:18.260 --> 00:38:19.400
SPEAKER: Awesome.

00:38:19.400 --> 00:38:20.850
Great question.

00:38:20.850 --> 00:38:23.190
Are there many sites using
service workers today?

00:38:23.190 --> 00:38:28.960
And then, at some point, as more
sites start using the cache,

00:38:28.960 --> 00:38:31.920
the cache is going to
get more and more full.

00:38:31.920 --> 00:38:35.750
And at some point, your
phone, your laptop,

00:38:35.750 --> 00:38:37.180
might run out of space.

00:38:37.180 --> 00:38:40.550
And that could be
a challenge, right?

00:38:40.550 --> 00:38:45.410
So there is one place that
I would recommend you go

00:38:45.410 --> 00:38:48.840
if you've got Chrome installed.

00:38:48.840 --> 00:38:51.140
In the address bar, type
chrome://serviceworker

00:38:51.140 --> 00:38:52.130
internals.

00:38:58.200 --> 00:39:01.760
That will actually show you
all of the service workers

00:39:01.760 --> 00:39:07.140
that are installed on your
device, on your computer.

00:39:07.140 --> 00:39:10.080
I'm not sure I'm
going to be brave.

00:39:10.080 --> 00:39:11.050
I'm going to try.

00:39:11.050 --> 00:39:15.060
Let me just see what
it looks like on--

00:39:15.060 --> 00:39:17.660
can we switch to
my laptop again?

00:39:22.710 --> 00:39:26.490
Please don't make fun of the
websites that I visit, OK?

00:39:26.490 --> 00:39:27.470
That's all I ask.

00:39:27.470 --> 00:39:30.000
This is my personal computer.

00:39:30.000 --> 00:39:32.270
Well, this is my
personal profile.

00:39:32.270 --> 00:39:41.450
Us

00:39:41.450 --> 00:39:43.700
You can actually
see all the sites

00:39:43.700 --> 00:39:48.950
that I've been to that
have service workers.

00:39:48.950 --> 00:39:51.170
I haven't been to many pages.

00:39:51.170 --> 00:39:53.600
On my real computer
that I have at home

00:39:53.600 --> 00:39:58.080
this goes much, much longer.

00:39:58.080 --> 00:40:00.110
So the question about getting--

00:40:00.110 --> 00:40:02.300
at some point, you
might start filling out.

00:40:02.300 --> 00:40:04.580
There are two things
that are going to happen.

00:40:04.580 --> 00:40:08.810
One, there is a new API
called Persistent Storage that

00:40:08.810 --> 00:40:12.440
lets you as the web
app developer say,

00:40:12.440 --> 00:40:14.510
I want persistent
storage, I want

00:40:14.510 --> 00:40:16.850
to be able to keep this
on the user's device

00:40:16.850 --> 00:40:20.000
no matter what for
all time, until

00:40:20.000 --> 00:40:25.260
the user makes the explicit
decision to blow it away.

00:40:25.260 --> 00:40:26.720
That's common.

00:40:26.720 --> 00:40:28.490
Actually, that's already
landed in Chrome.

00:40:28.490 --> 00:40:30.710
It's coming to other browsers.

00:40:30.710 --> 00:40:33.470
For other things,
what's going to happen

00:40:33.470 --> 00:40:36.530
is that the browser is
going to blow it away

00:40:36.530 --> 00:40:40.580
as it starts to need more
space using a least recently

00:40:40.580 --> 00:40:42.830
used algorithm.

00:40:42.830 --> 00:40:45.500
So it's going to look
at that one website

00:40:45.500 --> 00:40:49.116
that you went to 12 months ago
and haven't been back to since,

00:40:49.116 --> 00:40:50.615
and they're taking
out 10 megabytes,

00:40:50.615 --> 00:40:55.010
and you haven't been there, so
you're probably not going back.

00:40:55.010 --> 00:40:57.680
So it's going to work
through things that way.

00:40:57.680 --> 00:41:00.650
It's also not going to go
take up all your hard drive.

00:41:00.650 --> 00:41:04.970
Chrome is going to take care
of being a responsible citizen.

00:41:04.970 --> 00:41:07.820
As developers, I would
ask you, until we

00:41:07.820 --> 00:41:10.160
get more of the
persistence storage stuff,

00:41:10.160 --> 00:41:12.320
to be responsible developers.

00:41:12.320 --> 00:41:15.050
Don't necessarily download
your entire website

00:41:15.050 --> 00:41:18.620
or gigabytes worth of
stuff, because, one, it

00:41:18.620 --> 00:41:21.050
will take forever
to install, and two,

00:41:21.050 --> 00:41:22.450
the user's not gonna use it.

00:41:22.450 --> 00:41:26.204
Don't pull it down.

00:41:26.204 --> 00:41:27.192
Next question?

00:41:31.640 --> 00:41:33.096
I can sing.

00:41:33.096 --> 00:41:34.680
I can't sing.

00:41:34.680 --> 00:41:35.687
It's not worth it.

00:41:35.687 --> 00:41:37.520
Ask questions or I'm
going to start singing.

00:41:41.890 --> 00:41:42.450
OK.

00:41:42.450 --> 00:41:45.240
Well then I'm just going to go
to the corner and sulk then.

00:41:45.240 --> 00:41:46.867
Thank you all very much.

00:41:46.867 --> 00:41:47.700
It's been wonderful.

00:41:47.700 --> 00:41:48.880
I hope you enjoyed this.

00:41:48.880 --> 00:41:49.620
Thank you.

00:41:49.620 --> 00:41:52.370
[APPLAUSE]

