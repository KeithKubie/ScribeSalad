WEBVTT
Kind: captions
Language: en

00:00:00.320 --> 00:00:00.570
ALEXIS MOUSSINE POUCHKINE:
Hi everyone, we're

00:00:00.570 --> 00:00:02.310
here at Devoxx 2014.

00:00:02.310 --> 00:00:03.791
I'm here with Martin.

00:00:03.791 --> 00:00:05.040
MARTIN GORNER: Hello everyone.

00:00:05.040 --> 00:00:05.630
ALEXIS MOUSSINE
POUCHKINE: Hi Martin.

00:00:05.630 --> 00:00:07.320
And we're here to
talk about Polymer.

00:00:07.320 --> 00:00:13.190
Because you have been very busy
at this conference advocating

00:00:13.190 --> 00:00:14.522
Polymer.

00:00:14.522 --> 00:00:16.855
MARTIN GORNER: And a lot of
people were there to see it.

00:00:16.855 --> 00:00:19.570
There is a lot of interest
around Polymer today.

00:00:19.570 --> 00:00:19.825
ALEXIS MOUSSINE
POUCHKINE: I think

00:00:19.825 --> 00:00:21.596
indeed there was
a lot of interest.

00:00:21.596 --> 00:00:23.470
So what are people
interested, and why do you

00:00:23.470 --> 00:00:24.330
think they're interested?

00:00:24.330 --> 00:00:25.900
What is Polymer,
and how does it fit

00:00:25.900 --> 00:00:29.140
in the-- we're talking
about web here, and taking

00:00:29.140 --> 00:00:30.330
the web forward.

00:00:30.330 --> 00:00:34.650
MARTIN GORNER: So taking
just a little step back,

00:00:34.650 --> 00:00:37.760
the important thing
here is web components.

00:00:37.760 --> 00:00:40.270
That's the standard evolving.

00:00:40.270 --> 00:00:45.900
And allowing you to use
and create components

00:00:45.900 --> 00:00:48.580
that you'll be able to
import into your page,

00:00:48.580 --> 00:00:51.620
and that are self-contained,
encapsulated,

00:00:51.620 --> 00:00:53.513
have a proper interface.

00:00:53.513 --> 00:00:57.240
Well, everything you have been
used to in high-level languages

00:00:57.240 --> 00:01:00.190
for years, but this
did not exist in HTML5.

00:01:00.190 --> 00:01:04.599
Finally the standard is
evolving to bring this back.

00:01:04.599 --> 00:01:07.980
You will be able to have
libraries of components

00:01:07.980 --> 00:01:09.900
built using various
technologies.

00:01:09.900 --> 00:01:10.910
You don't care.

00:01:10.910 --> 00:01:12.030
It just works.

00:01:12.030 --> 00:01:13.440
It doesn't break your page.

00:01:13.440 --> 00:01:14.635
You put them in, boom.

00:01:14.635 --> 00:01:16.260
ALEXIS MOUSSINE-POUCHKINE:
And so we're

00:01:16.260 --> 00:01:18.700
talking about
in-source code using

00:01:18.700 --> 00:01:21.920
tags, which are
the implementation.

00:01:21.920 --> 00:01:25.480
So as a user of those
components, it's very easy.

00:01:25.480 --> 00:01:27.589
It's tags attributes
and you're done.

00:01:27.589 --> 00:01:29.130
MARTIN GORNER: It's
easier than that.

00:01:29.130 --> 00:01:30.890
It's one tag.

00:01:30.890 --> 00:01:33.330
A web component is one tag.

00:01:33.330 --> 00:01:36.320
So you have a special button
that someone created for you

00:01:36.320 --> 00:01:39.620
with beautiful animations,
and your company colors,

00:01:39.620 --> 00:01:40.600
and whatever.

00:01:40.600 --> 00:01:42.750
To use it in your
page, you just use

00:01:42.750 --> 00:01:45.160
one tag, which is
My Custom Button.

00:01:45.160 --> 00:01:46.410
ALEXIS MOUSSINE-POUCHKINE: OK.

00:01:46.410 --> 00:01:50.159
So web components is actually
multiple specs, am I right?

00:01:50.159 --> 00:01:51.700
And that is
specification by the way,

00:01:51.700 --> 00:01:52.824
this is not a Google thing.

00:01:52.824 --> 00:01:54.340
This is we're
talking something--

00:01:54.340 --> 00:01:55.298
MARTIN GORNER: Exactly.

00:01:55.298 --> 00:01:57.890
It's four specifications--
Shoadow DOM, Template, Custom

00:01:57.890 --> 00:01:59.880
Element, and-- I
always forget one.

00:02:04.350 --> 00:02:04.870
Template.

00:02:04.870 --> 00:02:05.070
ALEXIS MOUSSINE
POUCHKINE: Template.

00:02:05.070 --> 00:02:05.860
Thank you.

00:02:05.860 --> 00:02:09.259
So these are something
that is agreed

00:02:09.259 --> 00:02:13.610
upon among a number
of vendors, and that

00:02:13.610 --> 00:02:15.300
makes up the web components.

00:02:15.300 --> 00:02:16.690
And then at Google,
obviously, we

00:02:16.690 --> 00:02:18.752
talk a lot about
material design.

00:02:18.752 --> 00:02:20.710
And obviously, there's
probably an intersection

00:02:20.710 --> 00:02:23.950
here between material design,
building things for the web

00:02:23.950 --> 00:02:30.380
and having this unified
way of building and UI, UX.

00:02:30.380 --> 00:02:32.930
MARTIN GORNER: So material
design is a design philosophy.

00:02:32.930 --> 00:02:37.600
I encourage everyone to go and
check out google.com/design.

00:02:37.600 --> 00:02:38.490
It's all there.

00:02:38.490 --> 00:02:41.985
And frankly, I find
it a fascinating read.

00:02:41.985 --> 00:02:43.040
It reads like a novel.

00:02:43.040 --> 00:02:45.769
It's all the philosophy
of material design.

00:02:45.769 --> 00:02:47.310
ALEXIS MOUSSINE-POUCHKINE:
And you're

00:02:47.310 --> 00:02:48.930
more of a developer
than a designer,

00:02:48.930 --> 00:02:52.179
it's probably worth mentioning
that it is good for developers

00:02:52.179 --> 00:02:52.720
to read this.

00:02:52.720 --> 00:02:53.510
MARTIN GORNER: Exactly.

00:02:53.510 --> 00:02:53.830
It is.

00:02:53.830 --> 00:02:54.430
It is.

00:02:54.430 --> 00:02:56.450
All developers should
be design-minded,

00:02:56.450 --> 00:02:59.040
and it's a great
resource for developers

00:02:59.040 --> 00:03:01.410
who want to become
design minded.

00:03:01.410 --> 00:03:03.350
And it just happens
that Polymer,

00:03:03.350 --> 00:03:08.240
which allows the building
of reusable components,

00:03:08.240 --> 00:03:10.600
comes with a library
of paper components

00:03:10.600 --> 00:03:13.640
which are based on the
principles of material design.

00:03:17.290 --> 00:03:19.740
So yeah, it's there.

00:03:19.740 --> 00:03:20.760
Try them out.

00:03:20.760 --> 00:03:22.551
ALEXIS MOUSSINE-POUCHKINE:
Yeah, so Polymer

00:03:22.551 --> 00:03:25.230
is the web implementation
of what Android Lollipop is

00:03:25.230 --> 00:03:26.690
bringing in terms
of implementation

00:03:26.690 --> 00:03:28.130
of material design.

00:03:28.130 --> 00:03:29.200
MARTIN GORNER: Exactly.

00:03:29.200 --> 00:03:30.870
Polymer is actually two things.

00:03:30.870 --> 00:03:35.130
Polymer, at its core,
is a set of polyfills.

00:03:35.130 --> 00:03:38.090
Because the web standards
we were talking about,

00:03:38.090 --> 00:03:39.910
they are not yet
supported everywhere.

00:03:39.910 --> 00:03:45.011
So the Polymer polyfill brings
all browsers to the same level.

00:03:45.011 --> 00:03:46.260
ALEXIS MOUSSINE-POUCHKINE: OK.

00:03:46.260 --> 00:03:49.290
MARTIN GORNER: This hopefully
will go away one day.

00:03:49.290 --> 00:03:51.200
And on top of that,
there is the value

00:03:51.200 --> 00:03:55.250
added of Polymer, which is
basically syntactic sugar.

00:03:55.250 --> 00:03:59.900
To make the building
and using of components

00:03:59.900 --> 00:04:01.817
a more enjoyable experience
for the developer.

00:04:01.817 --> 00:04:03.066
ALEXIS MOUSSINE-POUCHKINE: OK.

00:04:03.066 --> 00:04:05.040
Tell us more about that
enjoyable experience

00:04:05.040 --> 00:04:07.870
of building the
component itself.

00:04:07.870 --> 00:04:10.780
MARTIN GORNER: So one
way to see it is, first,

00:04:10.780 --> 00:04:14.590
if you hear about those
four specifications--

00:04:14.590 --> 00:04:17.430
Imports, Templates, Shadow
DOM and the fourth one

00:04:17.430 --> 00:04:22.680
which I keep
forgetting-- actually

00:04:22.680 --> 00:04:28.670
creating your own custom
element using the new low level

00:04:28.670 --> 00:04:32.160
JavaScript requires--
it's not so complicated,

00:04:32.160 --> 00:04:35.540
but it does require quite
a few lines of JavaScript.

00:04:35.540 --> 00:04:37.940
It's not so simple.

00:04:37.940 --> 00:04:43.600
So what Polymer brings
is a syntax, using tags,

00:04:43.600 --> 00:04:47.620
that allows you to define
your own component.

00:04:47.620 --> 00:04:52.310
And that is a lot more usable
than the low level JavaScript.

00:04:52.310 --> 00:04:53.470
It's too much work.

00:04:53.470 --> 00:04:55.250
It's nothing fancy,
but it's too much

00:04:55.250 --> 00:04:56.760
work using the
low-level JavaScript.

00:04:56.760 --> 00:04:58.010
ALEXIS MOUSSINE-POUCHKINE: OK.

00:04:58.010 --> 00:05:01.830
So take the boilerplate
out of the way.

00:05:01.830 --> 00:05:04.360
So once I have those
components, am I

00:05:04.360 --> 00:05:06.830
forcing anybody who wants
to use one of my components

00:05:06.830 --> 00:05:09.240
to use a Polymer?

00:05:09.240 --> 00:05:11.710
You know, I'm using all
sorts of JavaScript libraries

00:05:11.710 --> 00:05:12.920
and frameworks and all that.

00:05:12.920 --> 00:05:15.156
Does it play well
with all those things?

00:05:15.156 --> 00:05:16.780
MARTIN GORNER: Well,
that's the beauty.

00:05:16.780 --> 00:05:20.180
Those web components,
you can build

00:05:20.180 --> 00:05:24.710
them using whatever technology,
whatever framework is there,

00:05:24.710 --> 00:05:28.830
that produces web components.

00:05:28.830 --> 00:05:34.650
When a user will import this
component into his page,

00:05:34.650 --> 00:05:38.750
once the JavaScript that
handles all the syntactic sugar

00:05:38.750 --> 00:05:41.230
is executed, at
the end of the day,

00:05:41.230 --> 00:05:46.180
that component ends up in
the dump as a web component

00:05:46.180 --> 00:05:49.200
that the browser
understands natively.

00:05:49.200 --> 00:05:51.390
So this means that you will
be able to mix and match

00:05:51.390 --> 00:05:58.600
components built using various
frameworks, and they will work.

00:05:58.600 --> 00:06:02.000
And the fact that there
are proper components

00:06:02.000 --> 00:06:06.656
encapsulated-- their
HTML is encapsulated,

00:06:06.656 --> 00:06:10.540
their CSS is encapsulated,
the JavaScript

00:06:10.540 --> 00:06:13.380
that defines their
behavior is encapsulated.

00:06:13.380 --> 00:06:14.860
They will not break your page.

00:06:14.860 --> 00:06:16.610
They should not interfere
with each other,

00:06:16.610 --> 00:06:19.180
they should not interfere
with the other libraries

00:06:19.180 --> 00:06:19.960
you're using.

00:06:19.960 --> 00:06:21.590
ALEXIS MOUSSINE-POUCHKINE:
So encapsulation is great,

00:06:21.590 --> 00:06:23.715
but at some point you need
to interact with and not

00:06:23.715 --> 00:06:24.640
just use it.

00:06:24.640 --> 00:06:26.840
Are there ways to
customize this and expose

00:06:26.840 --> 00:06:28.710
parts of the implementation?

00:06:28.710 --> 00:06:29.920
MARTIN GORNER: Exactly.

00:06:29.920 --> 00:06:32.800
They have a
customizable surface,

00:06:32.800 --> 00:06:35.140
but one that you define.

00:06:35.140 --> 00:06:39.570
So the simplest way is to
define custom attributes.

00:06:39.570 --> 00:06:42.220
And you specify what
these attributes

00:06:42.220 --> 00:06:44.340
are going to do
in your component.

00:06:44.340 --> 00:06:47.280
For instance, you can
have a heading attribute

00:06:47.280 --> 00:06:48.220
in a component.

00:06:48.220 --> 00:06:51.760
And the definition
of the component

00:06:51.760 --> 00:06:53.990
will display that
heading somewhere

00:06:53.990 --> 00:06:58.389
as the CSS and the HTML of
this component defines it.

00:06:58.389 --> 00:07:00.680
ALEXIS MOUSSINE-POUCHKINE:
So from what you're saying--

00:07:00.680 --> 00:07:01.730
I mean this is the web.

00:07:01.730 --> 00:07:06.600
In terms of, use any tool you
want, any framework you want.

00:07:06.600 --> 00:07:11.050
We're not forcing people with
Polymer to use a new framework,

00:07:11.050 --> 00:07:14.570
have this dependency, or use
this set of tools, or tool

00:07:14.570 --> 00:07:15.330
chain.

00:07:15.330 --> 00:07:18.200
You really still are using
whatever framework you want.

00:07:18.200 --> 00:07:21.530
And at the end of the day,
this is all web pages.

00:07:21.530 --> 00:07:23.500
MARTIN GORNER: Yes,
and I do believe

00:07:23.500 --> 00:07:26.220
that in a couple of
years, there will

00:07:26.220 --> 00:07:30.190
be multiple frameworks for
generating web components.

00:07:30.190 --> 00:07:33.020
Polymer is one.

00:07:33.020 --> 00:07:38.230
Mozilla is creating one actually
based on the same polyfills.

00:07:38.230 --> 00:07:43.580
Which means that, even now,
before web components are fully

00:07:43.580 --> 00:07:47.220
implemented in browsers, since
they use the same polyfills,

00:07:47.220 --> 00:07:50.180
those elements will be
compatible, even now.

00:07:50.180 --> 00:07:52.410
ALEXIS MOUSSINE
POUCHKINE: That's great.

00:07:52.410 --> 00:07:54.050
So how mature is
this whole thing?

00:07:54.050 --> 00:07:58.320
You know, web components, we're
using these polyfills now.

00:07:58.320 --> 00:08:01.010
But that's certainly
a very viable thing.

00:08:01.010 --> 00:08:04.640
MARTIN GORNER: So it's very
bleeding edge right now.

00:08:04.640 --> 00:08:09.280
You can look at the support for
the four specs on [INAUDIBLE].

00:08:09.280 --> 00:08:14.400
The short version is that those
specs are implemented fully

00:08:14.400 --> 00:08:17.870
on Chrome only, and they
are under various stages

00:08:17.870 --> 00:08:20.580
of implementation
on other browsers.

00:08:20.580 --> 00:08:22.650
So that's totally
bleeding edge. it

00:08:22.650 --> 00:08:25.550
doesn't work today in a
cross browser environment.

00:08:25.550 --> 00:08:28.250
The polyfills themselves,
in Polymer-- so Polymer

00:08:28.250 --> 00:08:31.560
itself is in version
0.4, which means

00:08:31.560 --> 00:08:35.039
that the polyfills and
their cross browser support

00:08:35.039 --> 00:08:38.860
is in the same kind of state.

00:08:38.860 --> 00:08:43.020
I would not put it into
production today, of course.

00:08:43.020 --> 00:08:48.100
You should wait for a 1.0 to
put anything into production.

00:08:48.100 --> 00:08:49.200
But the promise is that--

00:08:49.200 --> 00:08:50.490
ALEXIS MOUSSINE POUCHKINE:
There are breaking changes.

00:08:50.490 --> 00:08:52.865
MARTIN GORNER: Exactly, there
are still breaking changes.

00:08:52.865 --> 00:08:55.730
But the promise is, once
Polymer reaches 1.0,

00:08:55.730 --> 00:08:58.300
those polyfills
should be stable.

00:08:58.300 --> 00:09:00.720
The libraries of elements
that come with Polymer

00:09:00.720 --> 00:09:01.970
should be stable.

00:09:01.970 --> 00:09:05.900
And you will be able to
deploy web components cross

00:09:05.900 --> 00:09:09.087
browser thanks to the polyfills.

00:09:09.087 --> 00:09:11.420
ALEXIS MOUSSINE-POUCHKINE:
That sounds pretty promising.

00:09:11.420 --> 00:09:14.602
So in the meantime, you were
running a code lab here,

00:09:14.602 --> 00:09:16.060
which I believe is
available online

00:09:16.060 --> 00:09:18.690
which people can follow
at their own pace.

00:09:18.690 --> 00:09:24.739
So we'll have links in
the show notes to that,

00:09:24.739 --> 00:09:26.280
and I think that's
probably something

00:09:26.280 --> 00:09:28.310
that people should
check out and--

00:09:28.310 --> 00:09:29.685
MARTIN GORNER:
Please try it out.

00:09:29.685 --> 00:09:31.050
It's a very simple application.

00:09:31.050 --> 00:09:33.320
And in it, you can
see how fast you

00:09:33.320 --> 00:09:35.450
can build something
that looks great.

00:09:35.450 --> 00:09:39.750
Because it uses the paper
elements with material

00:09:39.750 --> 00:09:40.715
design behind it.

00:09:40.715 --> 00:09:42.090
ALEXIS MOUSSINE
POUCHKINE: Great.

00:09:42.090 --> 00:09:45.770
So I hope you try this, you
follow Polymer as it evolves.

00:09:45.770 --> 00:09:48.270
And start using
it as soon as you

00:09:48.270 --> 00:09:51.310
find it mature enough
for your needs.

00:09:51.310 --> 00:09:52.290
Thank you, Martin.

00:09:52.290 --> 00:09:53.664
MARTIN GORNER:
Thank you, Alexis.

00:09:53.664 --> 00:09:55.780
And we'll be seeing you online.

00:09:55.780 --> 00:09:57.330
Cheers.

