WEBVTT
Kind: captions
Language: en

00:00:21.780 --> 00:01:16.360
MALE SPEAKER: [SPEAKING KOREAN]

00:01:16.360 --> 00:03:06.968
SANG KIM: [SPEAKING KOREAN]

00:03:06.968 --> 00:03:08.670
-EA Sports.

00:03:08.670 --> 00:03:09.920
It's in the game.

00:03:12.760 --> 00:03:15.142
JAREK WILKIEWICZ: So
this is FIFA 13.

00:03:15.142 --> 00:03:17.770
And I'm not a really
good player.

00:03:17.770 --> 00:03:20.720
But I'm going to show you
what it looks like.

00:03:23.830 --> 00:03:26.400
So let's get started.

00:03:26.400 --> 00:03:30.750
As Sang said, it just came
out, end of September.

00:03:30.750 --> 00:03:33.846
So let me play a quick match.

00:03:33.846 --> 00:03:35.096
Kickoff.

00:03:37.269 --> 00:03:38.736
Pick a team.

00:03:38.736 --> 00:03:44.604
Sounds about right, Manchester
United versus Liverpool.

00:03:44.604 --> 00:03:46.071
All right.

00:03:46.071 --> 00:03:49.510
I can pick jerseys.

00:03:49.510 --> 00:03:51.180
This sounds good.

00:03:51.180 --> 00:03:52.140
So let's get started.

00:03:52.140 --> 00:03:54.492
So first, this is a little bit
of a tutorial that shows you

00:03:54.492 --> 00:03:55.655
how to play the game.

00:03:55.655 --> 00:03:59.375
We can skip that.

00:03:59.375 --> 00:04:01.064
Let's get rolling.

00:04:01.064 --> 00:04:06.992
[VIDEO GAME AUDIO PLAYING]

00:04:06.992 --> 00:04:09.462
-Let's get this one started
[INAUDIBLE].

00:04:09.462 --> 00:04:10.944
-I've heard this [INAUDIBLE]

00:04:10.944 --> 00:04:12.930
described as an exhibition
match.

00:04:12.930 --> 00:04:14.370
There are no league
points this day.

00:04:14.370 --> 00:04:16.825
But there isn't a single player
out there who doesn't

00:04:16.825 --> 00:04:18.075
want to win.

00:04:20.753 --> 00:04:22.003
JAREK WILKIEWICZ: All right.

00:04:26.154 --> 00:04:29.591
-Now for a throw.

00:04:29.591 --> 00:04:31.064
JAREK WILKIEWICZ: I'm
really bad at this.

00:04:31.064 --> 00:04:32.046
SANG KIM: [INAUDIBLE].

00:04:32.046 --> 00:04:33.296
JAREK WILKIEWICZ: Yes.

00:04:36.510 --> 00:04:38.050
I get pretty aggressive
in this game.

00:04:38.050 --> 00:04:40.014
So let me try to attack.

00:04:42.960 --> 00:04:44.924
Yeah.

00:04:44.924 --> 00:04:46.174
Ah.

00:04:51.798 --> 00:04:52.780
-[INAUDIBLE]

00:04:52.780 --> 00:04:54.744
with a tackle, and
he's got it.

00:04:54.744 --> 00:04:55.726
It's a red card.

00:04:55.726 --> 00:04:57.199
JAREK WILKIEWICZ:
Ooh, red card.

00:04:57.199 --> 00:04:58.672
Pretty bad.

00:04:58.672 --> 00:05:00.170
OK.

00:05:00.170 --> 00:05:02.570
So what I can do now is--

00:05:02.570 --> 00:05:03.920
let's see.

00:05:03.920 --> 00:05:09.210
Let me go ahead and go
through this one.

00:05:09.210 --> 00:05:10.680
-The keeper's first
on the ball.

00:05:10.680 --> 00:05:11.930
JAREK WILKIEWICZ: All right.

00:05:15.580 --> 00:05:16.560
I kick the ball.

00:05:16.560 --> 00:05:18.030
-Goalkeeper clears his lines.

00:05:23.910 --> 00:05:25.890
JAREK WILKIEWICZ:
Let me pause it.

00:05:25.890 --> 00:05:31.080
So I can hit Instant Replay
to see what happens.

00:05:31.080 --> 00:05:33.710
So you see there is a
Play button here.

00:05:33.710 --> 00:05:38.530
If I hit that, it shows
me this pass I

00:05:38.530 --> 00:05:40.360
didn't do very well.

00:05:40.360 --> 00:05:42.160
I can also change the
camera angle.

00:05:42.160 --> 00:05:44.810
So I can actually change the
perspective that I want to see

00:05:44.810 --> 00:05:46.790
it from, like maybe
from above.

00:05:46.790 --> 00:05:48.040
Hit Play.

00:05:52.700 --> 00:05:55.740
And then, if I'm happy with
it, I can hit the YouTube

00:05:55.740 --> 00:05:58.350
button right there
in the corner.

00:05:58.350 --> 00:06:03.462
And it asks me to confirm that
I agree that this content is

00:06:03.462 --> 00:06:04.845
going to be syndicated
to YouTube.

00:06:04.845 --> 00:06:06.461
And I'm fine with that.

00:06:06.461 --> 00:06:08.820
I hit Agree.

00:06:08.820 --> 00:06:11.270
So what happens next
is actually--

00:06:11.270 --> 00:06:15.240
the game is going encode the
game play frame by frame.

00:06:15.240 --> 00:06:17.220
So it's a kind of time
consuming process.

00:06:17.220 --> 00:06:20.460
And then once it's encoded, it
uploads it to YouTube using

00:06:20.460 --> 00:06:21.600
the YouTube APIs.

00:06:21.600 --> 00:06:24.392
Let me show you what an example
game play looks like.

00:06:27.368 --> 00:06:45.008
SANG KIM: [SPEAKING KOREAN]

00:06:48.944 --> 00:07:55.140
SANG KIM: [SPEAKING KOREAN]

00:08:02.090 --> 00:12:15.850
SANG KIM: [SPEAKING KOREAN]

00:12:20.250 --> 00:12:20.730
[VIDEO PLAYBACK]

00:12:20.730 --> 00:12:26.850
-We got the new Tiger Woods
'08, best game ever.

00:12:26.850 --> 00:12:30.510
Got the new feature, you
can stand on the water.

00:12:30.510 --> 00:12:31.760
You'll see.

00:13:46.376 --> 00:13:46.873
[END VIDEO PLAYBACK]

00:13:46.873 --> 00:17:28.046
SANG KIM: [SPEAKING KOREAN]

00:17:55.934 --> 00:18:42.205
SANG KIM: [SPEAKING KOREAN]

00:18:50.425 --> 00:18:55.160
SANG KIM: [SPEAKING KOREAN]

00:19:01.110 --> 00:19:34.710
SANG KIM: [SPEAKING KOREAN]

00:19:39.720 --> 00:21:41.360
SANG KIM: [SPEAKING KOREAN]

00:21:41.360 --> 00:21:52.150
[TECHNO MUSIC]

00:21:52.150 --> 00:23:29.630
SANG KIM: [SPEAKING KOREAN]

00:23:33.700 --> 00:23:35.950
SANG KIM: [SPEAKING KOREAN]

00:23:47.350 --> 00:25:17.650
SANG KIM: [SPEAKING KOREAN]

00:25:17.650 --> 00:25:18.480
[VIDEO PLAYBACK]

00:25:18.480 --> 00:25:20.900
-This group of Texas A&amp;M
students have become a

00:25:20.900 --> 00:25:22.700
national sensation
with their--

00:25:22.700 --> 00:25:23.480
-Jaw dropping.

00:25:23.480 --> 00:25:24.360
-Unbelievable.

00:25:24.360 --> 00:25:25.060
-Pretty good, right?

00:25:25.060 --> 00:25:25.760
-It's fun to watch.

00:25:25.760 --> 00:25:26.480
-Mind blowing.

00:25:26.480 --> 00:25:27.050
-Very impressive.

00:25:27.050 --> 00:25:30.910
-Amazing, incredible basketball
trick shots.

00:25:30.910 --> 00:25:32.160
-Take a look.

00:25:34.355 --> 00:25:35.450
-Welcome to Aggieland.

00:25:35.450 --> 00:25:36.920
This is the world's longest
basketball shot.

00:25:42.230 --> 00:25:43.721
Yes!

00:25:43.721 --> 00:25:44.715
What?

00:25:44.715 --> 00:25:45.965
Oh, my god.

00:26:04.098 --> 00:26:05.348
-Yeah!

00:26:33.570 --> 00:26:35.246
-This is the Cowboy
Stadium shot.

00:26:41.886 --> 00:26:43.136
-Yeah!

00:26:46.710 --> 00:26:48.380
Cowboy Stadium!

00:26:48.380 --> 00:26:49.960
-We found these guys
on YouTube.

00:26:49.960 --> 00:26:52.710
-They call themselves
Dude Perfect.

00:26:52.710 --> 00:26:53.350
-Dude Perfect.

00:26:53.350 --> 00:26:53.960
-Dude perfect.

00:26:53.960 --> 00:26:54.515
-Dude Perfect.

00:26:54.515 --> 00:26:56.150
-These are our buddies
from Dude Perfect.

00:26:56.150 --> 00:26:57.130
-Dude Perfect.

00:26:57.130 --> 00:26:59.410
-And their videos are tearing
up the internet.

00:26:59.410 --> 00:27:00.460
-Burning up the internet.

00:27:00.460 --> 00:27:03.980
-There's talk of a video
game based on this.

00:27:03.980 --> 00:27:06.680
Those deals are all
still long shot.

00:27:06.680 --> 00:27:09.940
But of course, they've
made those before.

00:27:09.940 --> 00:27:12.265
-Dude Perfect.

00:27:12.265 --> 00:27:15.520
[END VIDEO PLAYBACK]

00:27:15.520 --> 00:29:32.900
SANG KIM: [SPEAKING KOREAN]

00:29:38.037 --> 00:29:39.440
JAREK WILKIEWICZ:
Thanks, Sang.

00:29:39.440 --> 00:29:42.310
So I will talk a little bit
about YouTube APIs.

00:29:42.310 --> 00:29:46.010
Has anyone in the audience
used the APIs yet?

00:29:46.010 --> 00:29:46.750
If not--

00:29:46.750 --> 00:29:47.110
all right.

00:29:47.110 --> 00:29:51.690
So this is going to be very
introductory material for you.

00:29:51.690 --> 00:29:56.120
So we have two sets of APIs,
data APIs and player APIs.

00:29:56.120 --> 00:30:00.160
The use cases that Sang
demonstrated actually

00:30:00.160 --> 00:30:01.290
use the data APIs.

00:30:01.290 --> 00:30:04.510
So in order to upload a video to
YouTube directly from your

00:30:04.510 --> 00:30:06.620
game, you can use
the data APIs.

00:30:06.620 --> 00:30:09.470
And then player APIs are
used to customize

00:30:09.470 --> 00:30:10.490
the playback behavior.

00:30:10.490 --> 00:30:13.400
So not only you can upload to
YouTube, but you can also

00:30:13.400 --> 00:30:16.310
integrate video playback
into your game.

00:30:16.310 --> 00:30:19.300
So for example, if you have
Talking Tom, you may notice

00:30:19.300 --> 00:30:22.080
that they actually have a
gallery where they're showing

00:30:22.080 --> 00:30:25.050
a bunch of videos that
were uploaded from

00:30:25.050 --> 00:30:26.490
the game in the game.

00:30:26.490 --> 00:30:28.900
So let's talk a little
bit about how

00:30:28.900 --> 00:30:30.680
you actually do that.

00:30:30.680 --> 00:30:38.350
SANG KIM: [SPEAKING KOREAN]

00:30:38.350 --> 00:30:42.090
JAREK WILKIEWICZ: So data
APIs are RESTful.

00:30:42.090 --> 00:30:44.470
And by that, I mean they're
based on HTTP.

00:30:44.470 --> 00:30:46.930
They are very easy to use.

00:30:46.930 --> 00:30:49.440
What you can do with them is
pretty much most of the things

00:30:49.440 --> 00:30:50.860
you can do on youtube.com.

00:30:50.860 --> 00:30:54.190
So most of the functionality you
see on YouTube is actually

00:30:54.190 --> 00:30:55.740
exposed through the APIs.

00:30:55.740 --> 00:30:59.290
In fact, if you use the
mobile YouTube app--

00:30:59.290 --> 00:31:01.100
and I know a lot of people
in Korea do.

00:31:01.100 --> 00:31:04.620
In fact, in Korea, more than
half of YouTube views come

00:31:04.620 --> 00:31:05.940
from mobile devices.

00:31:05.940 --> 00:31:08.145
If you use the mobile YouTube
app, you're actually using the

00:31:08.145 --> 00:31:09.380
YouTube APIs already.

00:31:09.380 --> 00:31:12.630
Because internally, our
application is built on top of

00:31:12.630 --> 00:31:14.070
YouTube APIs.

00:31:14.070 --> 00:31:19.590
And the way they work is
most of the entities

00:31:19.590 --> 00:31:21.140
are exposed as feeds.

00:31:21.140 --> 00:31:23.810
This is with API version two.

00:31:23.810 --> 00:31:27.660
And we just launched API version
three, which makes

00:31:27.660 --> 00:31:28.910
some modifications to it.

00:31:28.910 --> 00:31:31.155
But the basic idea
is very similar.

00:31:31.155 --> 00:31:34.410
Now, the player APIs allow you
to incorporate video playback

00:31:34.410 --> 00:31:34.820
in your app.

00:31:34.820 --> 00:31:38.860
So if you have embedded a
YouTube video into your blog

00:31:38.860 --> 00:31:41.240
or in a web page, you
probably already

00:31:41.240 --> 00:31:43.370
used the YouTube embed.

00:31:43.370 --> 00:31:45.060
Now that can actually
be scripted

00:31:45.060 --> 00:31:47.140
through an iframe API.

00:31:47.140 --> 00:31:50.290
So in the web domain,
you can actually

00:31:50.290 --> 00:31:52.490
customize the video playback.

00:31:52.490 --> 00:31:57.230
And in the mobile domain, we
actually also allow this

00:31:57.230 --> 00:32:00.180
either through the use
of HTML5 video--

00:32:00.180 --> 00:32:06.200
so for example, if you use
iframe embed on iOS, you'll

00:32:06.200 --> 00:32:08.820
notice that the video plays just
fine even though there is

00:32:08.820 --> 00:32:12.250
no flash because we use HTML5
video on that platform.

00:32:12.250 --> 00:32:16.670
And then for Android, we're
actually launching a new API

00:32:16.670 --> 00:32:19.440
which allows you to integrate
the video playback directly

00:32:19.440 --> 00:32:21.320
into your Android application.

00:32:21.320 --> 00:32:22.500
It's Java based.

00:32:22.500 --> 00:32:23.800
It's very easy to use.

00:32:23.800 --> 00:32:25.750
So let me give you a couple
of examples of what

00:32:25.750 --> 00:32:28.000
these things look like.

00:32:28.000 --> 00:32:30.370
So for Apple specifically, as I

00:32:30.370 --> 00:32:32.830
mentioned, the API is RESTful.

00:32:32.830 --> 00:32:37.500
So this is an example upload
request, where I'm actually

00:32:37.500 --> 00:32:41.780
issuing a post request with
some information about the

00:32:41.780 --> 00:32:44.490
user obtained through OAuth.

00:32:44.490 --> 00:32:48.160
So an access token is required
in order to do that.

00:32:48.160 --> 00:32:50.470
And then I'm actually uploading
a WebM file.

00:32:50.470 --> 00:32:52.880
And I will chat a little
bit about what WebM

00:32:52.880 --> 00:32:55.100
is in the next slide.

00:32:55.100 --> 00:32:59.560
And then I'm specifying the
metadata for the upload.

00:32:59.560 --> 00:33:04.470
So as you see, I can add
a title, description

00:33:04.470 --> 00:33:05.370
tags, and so forth.

00:33:05.370 --> 00:33:07.820
So this is how the upload
is performed.

00:33:07.820 --> 00:33:10.120
So again, this is something that
you can directly do from

00:33:10.120 --> 00:33:11.200
your application.

00:33:11.200 --> 00:33:14.780
You can either build the
request yourself, or we

00:33:14.780 --> 00:33:16.210
actually have client
libraries.

00:33:16.210 --> 00:33:19.790
So with version three of the
API, we have client libraries

00:33:19.790 --> 00:33:22.520
for nine different programming
languages, including Java.

00:33:22.520 --> 00:33:25.870
So if you're building a Java
application on Android, you

00:33:25.870 --> 00:33:26.910
can use the client library.

00:33:26.910 --> 00:33:28.930
We have an Objective-C client
library as well.

00:33:28.930 --> 00:33:31.880
So if you're building an iOS
app, and you would like to do

00:33:31.880 --> 00:33:36.100
video uploads directly from the
iOS app, you can use the

00:33:36.100 --> 00:33:40.880
data API client library
to do that.

00:33:40.880 --> 00:33:44.840
Now on the playback side,
here's an example of--

00:33:44.840 --> 00:33:47.960
you might have seen the iframe
embeds that allow you

00:33:47.960 --> 00:33:48.740
to embed the video.

00:33:48.740 --> 00:33:51.060
But people don't know
that you can

00:33:51.060 --> 00:33:52.280
actually script the playback.

00:33:52.280 --> 00:33:54.760
So this is another way of
embedding a YouTube video,

00:33:54.760 --> 00:33:58.510
where you instantiate an
instance of YT.Player, which

00:33:58.510 --> 00:34:00.210
is a JavaScript object.

00:34:00.210 --> 00:34:02.840
And then specify the video
that you want to play.

00:34:02.840 --> 00:34:04.300
And in this code snippet,
I'm actually

00:34:04.300 --> 00:34:05.490
registering event handler.

00:34:05.490 --> 00:34:09.679
So when the player is ready,
I actually register an

00:34:09.679 --> 00:34:11.350
onPlayerReady callback.

00:34:11.350 --> 00:34:14.750
And then when player state
changes, I register

00:34:14.750 --> 00:34:16.219
onPlayerStateChange callbacks.

00:34:16.219 --> 00:34:19.940
So the way the API works is all
the state changes that are

00:34:19.940 --> 00:34:23.889
actually happening while the
video playback is taking place

00:34:23.889 --> 00:34:25.550
are actually propagated
to your application.

00:34:25.550 --> 00:34:27.290
And you can register to them.

00:34:27.290 --> 00:34:28.230
And you can react to them.

00:34:28.230 --> 00:34:31.320
So in this very example,
actually I'm registering a

00:34:31.320 --> 00:34:34.540
state change handler which will
automatically start video

00:34:34.540 --> 00:34:39.449
playback as soon as this
player is initialized.

00:34:39.449 --> 00:34:41.900
And then it registers a
timer which actually

00:34:41.900 --> 00:34:43.500
fires after 10 seconds.

00:34:43.500 --> 00:34:45.960
Once that timer fires,
I actually

00:34:45.960 --> 00:34:46.880
stop the video playback.

00:34:46.880 --> 00:34:48.630
So you can do things
like that.

00:34:48.630 --> 00:34:54.310
And on Android, it's actually
much easier.

00:34:54.310 --> 00:34:58.340
So I mentioned that we have
actually pre-announced the new

00:34:58.340 --> 00:34:59.810
API at Google I/O--

00:34:59.810 --> 00:35:01.910
and this is something that will
be launching soon-- where

00:35:01.910 --> 00:35:06.230
all you need to do is include
a couple of packages in your

00:35:06.230 --> 00:35:10.540
application, and then you can
programmatically load a video

00:35:10.540 --> 00:35:11.810
and then play the video.

00:35:11.810 --> 00:35:13.490
So all that is actually
available to your application.

00:35:16.240 --> 00:35:21.070
Now this is the API that allows
you to actually upload

00:35:21.070 --> 00:35:24.550
the video and then play the
video in your application.

00:35:24.550 --> 00:35:27.080
How about the actual process
of video capture?

00:35:27.080 --> 00:35:30.110
And this is where things get
a little more tricky.

00:35:30.110 --> 00:35:32.170
In the examples that
Sang gave you-- for

00:35:32.170 --> 00:35:33.460
example, Call of Duty--

00:35:33.460 --> 00:35:36.090
they implemented the video
capture directly on the

00:35:36.090 --> 00:35:39.880
console, same for the live
streaming example that Sang

00:35:39.880 --> 00:35:41.500
was showing you a
little earlier.

00:35:41.500 --> 00:35:43.660
The stream is actually captured
and encoded right on

00:35:43.660 --> 00:35:45.530
the console.

00:35:45.530 --> 00:35:48.910
In the example of a mobile
application,

00:35:48.910 --> 00:35:51.020
here's a typical flow.

00:35:51.020 --> 00:35:53.500
And I'll show you an example
of what this

00:35:53.500 --> 00:35:54.940
looks like in a second.

00:35:54.940 --> 00:36:01.120
But for example, if you're
building on top of Unity, you

00:36:01.120 --> 00:36:04.610
can actually from Unity obtain
the audio and video frames, so

00:36:04.610 --> 00:36:05.780
the raw frames.

00:36:05.780 --> 00:36:09.890
And then you can encode the
frame using VP8 codec.

00:36:09.890 --> 00:36:12.470
So this is technology that
we actually provide.

00:36:12.470 --> 00:36:13.830
It's free and open source.

00:36:13.830 --> 00:36:17.150
So Google acquired a company
called On2 Technologies a

00:36:17.150 --> 00:36:18.010
while back.

00:36:18.010 --> 00:36:23.990
And we actually accept WebM
uploads on youtube.com.

00:36:23.990 --> 00:36:26.970
So if you want to use that
technology, you're

00:36:26.970 --> 00:36:28.190
welcome to do that.

00:36:28.190 --> 00:36:31.980
And so when video frames are
actually generated, you can

00:36:31.980 --> 00:36:34.880
encode them using VP8.

00:36:34.880 --> 00:36:37.160
For audio, we recommend
Vorbis.

00:36:37.160 --> 00:36:40.360
Again, this is a free and
open source codec.

00:36:40.360 --> 00:36:42.330
And you can do the same.

00:36:42.330 --> 00:36:48.930
Once you have the encoded VP8
and Vorbis streams, you can

00:36:48.930 --> 00:36:51.470
actually wrap them inside
of a container.

00:36:51.470 --> 00:36:55.990
So WebM is the container that
actually is used to combine

00:36:55.990 --> 00:37:00.060
the audio and video.

00:37:00.060 --> 00:37:02.560
After that, you'll
have a WebM file.

00:37:02.560 --> 00:37:05.550
Once that file is generated,
the rest is straightforward

00:37:05.550 --> 00:37:07.950
because you can actually
use the data API

00:37:07.950 --> 00:37:09.340
to upload to YouTube.

00:37:09.340 --> 00:37:11.830
The requests look very similar
to what I showed you on the

00:37:11.830 --> 00:37:12.490
previous slide.

00:37:12.490 --> 00:37:15.230
So from then on, it's basically
a RESTful API where

00:37:15.230 --> 00:37:19.020
you can push directly
to YouTube.

00:37:19.020 --> 00:37:22.360
So this is the flow.

00:37:22.360 --> 00:37:26.119
Let me switch to
an example app.

00:39:05.600 --> 00:39:09.460
AUDIENCE: So in your slide,
you mentioned Unity.

00:39:09.460 --> 00:39:10.220
JAREK WILKIEWICZ: Yeah.

00:39:10.220 --> 00:39:11.770
AUDIENCE: So Unity's one
of the examples?

00:39:11.770 --> 00:39:13.664
Or Unity's the only one?

00:39:13.664 --> 00:39:14.132
JAREK WILKIEWICZ: No.

00:39:14.132 --> 00:39:19.970
So this is an example that
we implemented just to

00:39:19.970 --> 00:39:21.810
demonstrate how you would
do it with Unity.

00:39:21.810 --> 00:39:24.915
But I mean, you can implement
that on other engines.

00:39:28.710 --> 00:39:30.330
I don't know about Korea.

00:39:30.330 --> 00:39:33.550
But in the US, a lot of mobile
game developers use Unity.

00:39:33.550 --> 00:39:35.760
So we find that this is
a good example to use.

00:39:35.760 --> 00:39:39.200
The flow that actually this
application implements is

00:39:39.200 --> 00:39:41.490
exactly this.

00:39:41.490 --> 00:39:44.350
So this is something that we
were hoping to make available

00:39:44.350 --> 00:39:46.030
to you soon as an open
source project.

00:39:46.030 --> 00:39:49.010
So you can just play
around with it.

00:39:49.010 --> 00:39:52.015
And we actually prototyped
this for Dude Perfect.

00:39:56.150 --> 00:39:57.400
-You're good.

00:39:59.520 --> 00:40:01.590
JAREK WILKIEWICZ: So you can
make your own trick shots

00:40:01.590 --> 00:40:03.730
using the game and then share it
with your friends, who will

00:40:03.730 --> 00:40:06.750
see the game play and then
hopefully download the game

00:40:06.750 --> 00:40:09.040
and really spread the word.

00:40:09.040 --> 00:40:12.980
Now, if you don't want to
implement this yourself, you

00:40:12.980 --> 00:40:13.540
don't have to.

00:40:13.540 --> 00:40:17.100
So there's a couple of companies
that are still

00:40:17.100 --> 00:40:17.840
relatively new.

00:40:17.840 --> 00:40:22.740
But they actually are trying to
make it much easier for you

00:40:22.740 --> 00:40:26.220
to integrate the video
capture and upload to

00:40:26.220 --> 00:40:27.220
YouTube in your game.

00:40:27.220 --> 00:40:29.730
So you can either implement
the flow yourself--

00:40:29.730 --> 00:40:32.560
and this is what I was showing
you, where you capture the

00:40:32.560 --> 00:40:33.770
frames frame by frame.

00:40:33.770 --> 00:40:34.680
You encode them.

00:40:34.680 --> 00:40:35.920
You wrap them in
the container.

00:40:35.920 --> 00:40:37.530
And then you upload
them to YouTube.

00:40:37.530 --> 00:40:39.520
If you don't want to spend the
time doing that, there's

00:40:39.520 --> 00:40:42.880
actually commercial,
off-the-shelf solutions to

00:40:42.880 --> 00:40:46.690
that from the two companies,
Kamcord and Everyplay.

00:40:46.690 --> 00:40:49.920
And what they do is they
actually provide you a set of

00:40:49.920 --> 00:40:52.280
libraries that you can link
with that actually

00:40:52.280 --> 00:40:54.270
take care of this.

00:40:54.270 --> 00:40:57.190
They also have some advantages
in terms of performance.

00:40:57.190 --> 00:41:01.280
So you might have noticed the
actual encoding process for

00:41:01.280 --> 00:41:03.940
FIFA 13 is somewhat time
consuming because actually the

00:41:03.940 --> 00:41:06.090
replay happens frame by frame.

00:41:06.090 --> 00:41:08.400
They figured out a way
to do it much faster.

00:41:08.400 --> 00:41:15.370
And here's a sample playback
done for Flip the Bird game

00:41:15.370 --> 00:41:16.620
using Kamcord.

00:41:27.140 --> 00:41:28.940
So you get the idea.

00:41:28.940 --> 00:41:31.525
So now I'll let Sang talk
about best practices.

00:41:36.136 --> 00:44:13.980
SANG KIM: [SPEAKING KOREAN]

00:44:37.344 --> 00:45:23.075
SANG KIM: [SPEAKING KOREAN]

00:45:27.090 --> 00:46:04.710
AUDIENCE: [SPEAKING KOREAN]

00:46:04.710 --> 00:46:05.900
JAREK WILKIEWICZ: Do you
want to repeat it?

00:46:05.900 --> 00:46:33.950
SANG KIM: [SPEAKING KOREAN]

00:46:33.950 --> 00:46:38.230
AUDIENCE: [SPEAKING KOREAN]

00:46:38.230 --> 00:47:16.080
SANG KIM: [SPEAKING KOREAN]

00:47:20.490 --> 00:47:32.270
AUDIENCE: [SPEAKING KOREAN]

00:47:32.270 --> 00:47:40.120
SANG KIM: [SPEAKING KOREAN]

00:47:40.120 --> 00:47:42.000
AUDIENCE: I think the discussion
is, do they have to

00:47:42.000 --> 00:47:44.350
develop their own encoding
to capture the screen?

00:47:44.350 --> 00:47:47.780
JAREK WILKIEWICZ: So the actual
encoding is something

00:47:47.780 --> 00:47:51.030
that we offer open source
software for.

00:47:51.030 --> 00:47:53.490
So that's WebM VP8.

00:47:53.490 --> 00:47:57.840
So for audio encoding and video
encoding, you don't have

00:47:57.840 --> 00:47:59.140
to write that software.

00:47:59.140 --> 00:48:02.590
What you do need to write is
the ability to capture the

00:48:02.590 --> 00:48:06.610
frames, so the raw video,
raw audio frames.

00:48:06.610 --> 00:48:09.020
Once you have that, you can pass
that into the encoder.

00:48:09.020 --> 00:48:14.990
So on top of that, for
interesting titles, developers

00:48:14.990 --> 00:48:18.370
typically like to build a replay
mode or theater mode,

00:48:18.370 --> 00:48:20.950
much like what I showed you with
EA, where you change the

00:48:20.950 --> 00:48:23.585
camera angles to slow
motion, like in the

00:48:23.585 --> 00:48:24.720
Call of Duty example.

00:48:24.720 --> 00:48:27.360
But really, the only thing that
the developer needs to

00:48:27.360 --> 00:48:31.490
write is the ability to actually
capture the frames.

00:48:31.490 --> 00:48:34.900
So whether you have your own
game engine, you can do that.

00:48:34.900 --> 00:48:38.920
Or if you build on top of a
third party, some of them

00:48:38.920 --> 00:48:39.960
provide that capability.

00:48:39.960 --> 00:48:42.870
So for example, Unity
does this.

00:48:42.870 --> 00:48:44.970
So it's reasonably
straightforward

00:48:44.970 --> 00:48:45.910
to get these frames.

00:48:45.910 --> 00:48:50.750
Now, the only challenge is
encoding is time consuming.

00:48:50.750 --> 00:48:54.300
So then can you do that in a
way that is much faster?

00:48:54.300 --> 00:48:56.910
This is where we see innovation
happening.

00:48:56.910 --> 00:48:59.660
And the companies like Kamcord
or Everyplay, they're trying

00:48:59.660 --> 00:49:02.490
to solve this problem so that
your game is not going to slow

00:49:02.490 --> 00:49:03.930
down while you're trying
to capture.

00:49:03.930 --> 00:49:06.440
So this is something they're
trying to do.

00:49:06.440 --> 00:49:09.880
But if you don't want to deal
with any third party software,

00:49:09.880 --> 00:49:13.490
you can take the open source
encoders and integrate it with

00:49:13.490 --> 00:49:14.590
your application.

00:49:14.590 --> 00:49:16.370
And then our API is free.

00:49:16.370 --> 00:49:18.730
So you can just upload it
using the RESTful API.

00:49:23.801 --> 00:49:28.510
SANG KIM: [SPEAKING KOREAN]

00:49:28.510 --> 00:49:39.780
AUDIENCE: [SPEAKING KOREAN]

00:49:39.780 --> 00:49:48.390
SANG KIM: [SPEAKING KOREAN]

00:49:48.390 --> 00:49:52.546
I think he's asking, what were
some of the case studies that

00:49:52.546 --> 00:49:56.703
we've done outside
the game genre?

00:49:56.703 --> 00:49:59.637
Lifestyle, television.

00:49:59.637 --> 00:50:01.593
JAREK WILKIEWICZ: As it
relates to uploads?

00:50:01.593 --> 00:50:02.082
SANG KIM: Yeah.

00:50:02.082 --> 00:50:03.560
Uploads.

00:50:03.560 --> 00:50:04.010
JAREK WILKIEWICZ: Yeah.

00:50:04.010 --> 00:50:10.010
So one very interesting example
that we worked on is

00:50:10.010 --> 00:50:15.470
in the news industry, so user
generated content for news.

00:50:15.470 --> 00:50:18.640
And for that, we actually have
an open source project called

00:50:18.640 --> 00:50:20.090
YouTube direct.

00:50:20.090 --> 00:50:23.070
And that project comes with a
service side component that

00:50:23.070 --> 00:50:25.320
runs on Google App
Engine and then

00:50:25.320 --> 00:50:27.820
clients for iOS and Android.

00:50:27.820 --> 00:50:29.610
They're open source.

00:50:29.610 --> 00:50:33.430
And what they allow you to do
is to integrate video upload

00:50:33.430 --> 00:50:35.380
directly into your
application.

00:50:35.380 --> 00:50:38.960
So for example, a lot of
organizations, media

00:50:38.960 --> 00:50:42.940
organizations, deploy it to
solicit user generated content

00:50:42.940 --> 00:50:45.190
from their audience.

00:50:45.190 --> 00:50:49.970
So then they can integrate it
into their own app or build a

00:50:49.970 --> 00:50:51.100
standalone app.

00:50:51.100 --> 00:50:54.810
And then videos actually are
captured using the camera,

00:50:54.810 --> 00:50:56.750
uploaded to YouTube.

00:50:56.750 --> 00:50:59.980
The server side component has
a moderation capability.

00:50:59.980 --> 00:51:02.950
So the news organization can
decide which videos are

00:51:02.950 --> 00:51:03.860
interesting.

00:51:03.860 --> 00:51:06.400
The ones they approve end
up in the playlist.

00:51:06.400 --> 00:51:09.030
And then they feature that
playlist on their website by

00:51:09.030 --> 00:51:11.050
simply embedding the playlist.

00:51:11.050 --> 00:51:12.900
So far as--

00:51:12.900 --> 00:51:15.750
Another interesting use case for
user generated content--

00:51:15.750 --> 00:51:17.190
news is really big.

00:51:17.190 --> 00:51:19.940
I mean, a lot of news
organizations use that.

00:51:19.940 --> 00:51:22.550
And videos nowadays break
a lot of news.

00:51:22.550 --> 00:51:25.775
So a lot of stories are actually
started by a video

00:51:25.775 --> 00:51:27.830
that goes viral.

00:51:27.830 --> 00:51:31.940
Sometimes it's revolutions
that get started as well.

00:51:31.940 --> 00:52:33.410
SANG KIM: [SPEAKING KOREAN]

00:52:33.410 --> 00:52:51.700
AUDIENCE: [SPEAKING KOREAN]

00:52:51.700 --> 00:53:46.610
SANG KIM: [SPEAKING KOREAN]

00:53:50.012 --> 00:53:54.872
AUDIENCE: [SPEAKING KOREAN]

00:53:54.872 --> 00:53:59.246
SANG KIM: Is there a limit to
how much video [INAUDIBLE]?

00:53:59.246 --> 00:54:05.510
[SPEAKING KOREAN]

00:54:05.510 --> 00:54:09.340
JAREK WILKIEWICZ: So there are
some practical limits.

00:54:09.340 --> 00:54:13.860
But we have been actually
extending the length of the

00:54:13.860 --> 00:54:15.130
video that can be uploaded.

00:54:15.130 --> 00:54:17.950
So in the past, it was
five, 10 minutes.

00:54:17.950 --> 00:54:19.060
Then we went to 15 minutes.

00:54:19.060 --> 00:54:22.250
And now, if your account is in
good standing, we basically

00:54:22.250 --> 00:54:24.280
have unlimited uploads.

00:54:24.280 --> 00:54:26.720
And then there is a practical
limit for how large

00:54:26.720 --> 00:54:28.210
the file can be.

00:54:28.210 --> 00:54:30.300
I think last time I checked,
it was several gigabytes.

00:54:30.300 --> 00:54:35.740
So I haven't actually seen a
case yet where somebody would

00:54:35.740 --> 00:54:37.670
hit this problem.

00:54:37.670 --> 00:54:42.300
What we do see is--

00:54:42.300 --> 00:54:45.920
the best practice for this
type of integration is to

00:54:45.920 --> 00:54:49.150
allow people to upload into
their own accounts.

00:54:49.150 --> 00:54:52.790
So this is one constraint that
we do have in place.

00:54:52.790 --> 00:54:54.080
And we actually recommended
it.

00:54:54.080 --> 00:54:57.720
So rather than uploading it
into a single account, we

00:54:57.720 --> 00:55:01.050
recommend the developers allow
the users to upload into their

00:55:01.050 --> 00:55:02.260
own accounts.

00:55:02.260 --> 00:55:04.120
And you can do that
using OAuth.

00:55:04.120 --> 00:55:05.640
So you go through
the OAuth flow.

00:55:05.640 --> 00:55:07.490
You authorize the application
for uploads.

00:55:07.490 --> 00:55:11.470
And then when I play the game,
or when I perform the upload,

00:55:11.470 --> 00:55:14.210
it actually ends up
in my own account.

00:55:14.210 --> 00:55:17.980
And there's benefits to that
because actually we found that

00:55:17.980 --> 00:55:19.620
content that is uploaded

00:55:19.620 --> 00:55:21.240
directly into users' accounts--

00:55:21.240 --> 00:55:22.580
it gets more views.

00:55:22.580 --> 00:55:24.780
And it makes a lot of sense
because I want to share with

00:55:24.780 --> 00:55:25.440
my friends.

00:55:25.440 --> 00:55:28.129
AUDIENCE: But in that
case, users have to

00:55:28.129 --> 00:55:32.290
have a YouTube account?

00:55:32.290 --> 00:55:32.830
JAREK WILKIEWICZ:
Good question.

00:55:32.830 --> 00:55:37.920
So the question is, if users
upload to their accounts, do

00:55:37.920 --> 00:55:39.360
they need to have a
YouTube account?

00:55:39.360 --> 00:55:40.400
The answer is yes.

00:55:40.400 --> 00:55:44.270
But it's actually sufficient
to have a Google account.

00:55:44.270 --> 00:55:47.910
So if you have a Gmail address,
if you use Google

00:55:47.910 --> 00:55:49.940
Docs, that's actually
sufficient.

00:55:49.940 --> 00:55:54.260
Because we do have an API which
allows you to detect

00:55:54.260 --> 00:55:56.270
whether they have a
YouTube channel.

00:55:56.270 --> 00:55:59.430
And if not, you can create
one programmatically.

00:55:59.430 --> 00:56:01.840
So really, the only thing they
need to have is they need to

00:56:01.840 --> 00:56:03.100
have a Google account.

00:56:03.100 --> 00:56:05.890
If they're on Android,
then they logged in.

00:56:05.890 --> 00:56:07.280
So they already have one.

00:56:07.280 --> 00:56:10.080
And then you can track using
the API, do they have a

00:56:10.080 --> 00:56:10.770
YouTube channel?

00:56:10.770 --> 00:56:12.540
Is not, you can create
one programmatically.

00:56:12.540 --> 00:56:14.620
We also have a channel
suggestion API.

00:56:14.620 --> 00:56:17.590
So you can show them the names
that are available.

00:56:17.590 --> 00:56:23.370
For iOS, you would have to
basically go through OAuth

00:56:23.370 --> 00:56:26.110
flow and have them log in
with a Google account.

00:56:26.110 --> 00:56:30.300
To make that easier on iOS, we
have an open source project

00:56:30.300 --> 00:56:31.830
called GTM.

00:56:31.830 --> 00:56:36.010
And that implements a web
view based OAuth flow.

00:56:36.010 --> 00:56:39.440
So you just include it into
your application.

00:56:39.440 --> 00:56:42.610
And the entire authorization
flow is basically handled by

00:56:42.610 --> 00:56:43.930
this component.

00:56:43.930 --> 00:56:45.420
So that's something that
we have in place.

00:56:45.420 --> 00:56:47.380
But fundamentally,
you're right.

00:56:47.380 --> 00:56:49.230
You do have to have
a YouTube account.

00:56:49.230 --> 00:56:51.700
But we've made it easier for
people that have Google

00:56:51.700 --> 00:56:54.770
accounts to upload to YouTube
by introducing these

00:56:54.770 --> 00:56:57.056
additional APIs.

00:56:57.056 --> 00:56:59.320
SANG KIM: [SPEAKING KOREAN]

00:56:59.320 --> 00:57:01.433
AUDIENCE: In addition to that
question, so once the user

00:57:01.433 --> 00:57:04.228
uploads the video to their
own account, is

00:57:04.228 --> 00:57:05.398
it public by default?

00:57:05.398 --> 00:57:06.470
Or do they choose it?

00:57:06.470 --> 00:57:06.780
JAREK WILKIEWICZ: Yes.

00:57:06.780 --> 00:57:10.630
So the question is, once the
user uploads the video to

00:57:10.630 --> 00:57:12.660
their account, is it
public by default?

00:57:12.660 --> 00:57:15.630
It's actually up to you,
the developer.

00:57:15.630 --> 00:57:19.300
So you can specify in the
metadata what should be the

00:57:19.300 --> 00:57:21.510
visibility of the video.

00:57:21.510 --> 00:57:22.860
By default, it will be public.

00:57:22.860 --> 00:57:24.290
But you can change it.

00:57:24.290 --> 00:57:26.160
And there's actually three
modes, public,

00:57:26.160 --> 00:57:28.190
private, and unlisted.

00:57:28.190 --> 00:57:31.860
So public videos are available
in our search index.

00:57:31.860 --> 00:57:33.430
So you can look them up.

00:57:33.430 --> 00:57:34.550
Private videos are not.

00:57:34.550 --> 00:57:37.760
And only people that you
authorize can view them.

00:57:37.760 --> 00:57:43.270
Unlisted videos are interesting
because you can

00:57:43.270 --> 00:57:44.950
upload it as unlisted.

00:57:44.950 --> 00:57:48.220
And no one can find it using
the search index.

00:57:48.220 --> 00:57:49.380
But you can share the link.

00:57:49.380 --> 00:57:52.820
So you don't need to log
in in order to view it.

00:57:52.820 --> 00:57:57.280
So in fact, when I share family
videos with my family

00:57:57.280 --> 00:58:00.280
who lives abroad-- my mother
lives in Poland.

00:58:00.280 --> 00:58:02.820
And I send her videos
of my family.

00:58:02.820 --> 00:58:04.290
I typically just send them--

00:58:04.290 --> 00:58:06.530
I upload them as unlisted
because I don't want the whole

00:58:06.530 --> 00:58:09.070
world to see my family videos.

00:58:09.070 --> 00:58:10.150
And I just send her the link.

00:58:10.150 --> 00:58:12.220
So there's actually three
different choices.

00:58:12.220 --> 00:58:15.370
AUDIENCE: So but how do
the games do it now?

00:58:15.370 --> 00:58:18.250
JAREK WILKIEWICZ: Typically,
as a developer, you want it

00:58:18.250 --> 00:58:21.640
public because that gives you
greatest reach, right?

00:58:21.640 --> 00:58:23.550
Ultimately, we're doing
it because we want the

00:58:23.550 --> 00:58:24.500
distribution.

00:58:24.500 --> 00:58:29.210
And if your friends don't see
the video, they won't be able

00:58:29.210 --> 00:58:31.700
to click on the metadata
to download your game.

00:58:31.700 --> 00:58:34.600
But the user has
total control.

00:58:34.600 --> 00:58:37.400
So even if your game uploads it
as public, the user can go

00:58:37.400 --> 00:58:38.800
back and change it.

00:58:38.800 --> 00:58:42.080
So this is another reason why
we recommend uploading into

00:58:42.080 --> 00:58:42.940
the users' channels.

00:58:42.940 --> 00:58:46.270
Because for example, if I spent
the night playing a

00:58:46.270 --> 00:58:49.060
video game, and I'll spend the
night all night long, my wife

00:58:49.060 --> 00:58:51.970
can catch me that I was playing
it because I uploaded

00:58:51.970 --> 00:58:52.360
it to YouTube.

00:58:52.360 --> 00:58:52.680
Right?

00:58:52.680 --> 00:58:55.090
So I can actually go back and
delete these videos before

00:58:55.090 --> 00:58:55.800
it's too late.

00:58:55.800 --> 00:58:57.900
Or I can make them private.

00:58:57.900 --> 00:58:59.910
So that's something
that we recommend

00:58:59.910 --> 00:59:01.580
is give user control.

00:59:01.580 --> 00:59:04.710
So they don't feel like you're
doing something for them

00:59:04.710 --> 00:59:06.770
without them having
any recourse.

00:59:06.770 --> 00:59:10.320
But by default, set it up the
way it makes for your

00:59:10.320 --> 00:59:11.310
application.

00:59:11.310 --> 00:59:13.340
And then they can go to
youtube.com and very easily

00:59:13.340 --> 00:59:15.970
change the visibility of those
videos if they are not proud

00:59:15.970 --> 00:59:18.230
of it or they're trying to hide
it from their spouse.

00:59:23.950 --> 00:59:28.332
SANG KIM: [SPEAKING KOREAN]

00:59:28.332 --> 00:59:29.310
JAREK WILKIEWICZ: That's it?

00:59:29.310 --> 00:59:31.270
All right.

00:59:31.270 --> 00:59:44.220
SANG KIM: [SPEAKING KOREAN]

