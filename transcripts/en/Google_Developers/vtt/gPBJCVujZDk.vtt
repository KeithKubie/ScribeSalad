WEBVTT
Kind: captions
Language: en

00:00:00.670 --> 00:00:02.460
MARC COHEN: I'm giving some
folks a little time to join,

00:00:02.460 --> 00:00:06.160
so can you tell us what
you've been doing with

00:00:06.160 --> 00:00:09.930
Compute Engine so far?

00:00:09.930 --> 00:00:13.610
JOHN: Well it came in handy a
couple of weeks ago or late

00:00:13.610 --> 00:00:15.830
last month.

00:00:15.830 --> 00:00:20.980
I was running some onload
[INAUDIBLE] processes on my

00:00:20.980 --> 00:00:24.550
local workstation in my office,
and I was going to be

00:00:24.550 --> 00:00:26.530
traveling for a couple weeks.

00:00:26.530 --> 00:00:30.270
And so I needed to be able to
access that [INAUDIBLE]

00:00:30.270 --> 00:00:34.150
process and do it while
being mobile.

00:00:34.150 --> 00:00:40.310
So I moved that process to
Compute Engine, so I could

00:00:40.310 --> 00:00:46.440
bring it up on my laptop when
I was traveling and do some

00:00:46.440 --> 00:00:48.790
heavy duty computing that
I wouldn't be able

00:00:48.790 --> 00:00:51.850
to run on my laptop.

00:00:51.850 --> 00:00:54.530
That was really where
I knuckled down and

00:00:54.530 --> 00:00:55.780
started to learn it.

00:00:58.230 --> 00:00:59.860
MARC COHEN: Any speed
bumps along the way?

00:01:06.400 --> 00:01:07.455
JOHN: Not really.

00:01:07.455 --> 00:01:11.240
I had a few questions come up.

00:01:11.240 --> 00:01:17.050
This past week, I've been
starting to use it for

00:01:17.050 --> 00:01:21.330
clusters, setting up
a Hadoop cluster.

00:01:21.330 --> 00:01:25.910
So I could just, with one script
and a command on my--

00:01:25.910 --> 00:01:28.730
keep running a shell script that
would launch eight nodes

00:01:28.730 --> 00:01:32.130
and configure all of
them and launch the

00:01:32.130 --> 00:01:35.450
processes in a few minutes.

00:01:35.450 --> 00:01:37.760
And it's nice using a
combination of the metadata

00:01:37.760 --> 00:01:44.420
system to configure each
specific nodes on some things

00:01:44.420 --> 00:01:47.200
like the master nodes.

00:01:47.200 --> 00:01:53.590
MARC COHEN: Yeah, we should
probably consolidate those and

00:01:53.590 --> 00:01:56.660
produce a best practice shell
script for that kind of thing

00:01:56.660 --> 00:01:59.070
because I think that
shell script's been

00:01:59.070 --> 00:01:59.990
written many times.

00:01:59.990 --> 00:02:01.480
I've written that myself.

00:02:01.480 --> 00:02:06.630
And it's a great training
exercise, but I also think it

00:02:06.630 --> 00:02:12.110
would be cool to have a really
good version that had kind of

00:02:12.110 --> 00:02:15.040
a composite of all the best
functionality and best style

00:02:15.040 --> 00:02:17.800
and all that stuff.

00:02:17.800 --> 00:02:19.720
JOE BEDA: One of the things that
I snuck in right before

00:02:19.720 --> 00:02:26.030
Google I/O was the ability in
gcutil to provide multiple

00:02:26.030 --> 00:02:27.660
arguments to add instance.

00:02:27.660 --> 00:02:29.840
So you can actually add multiple
instances there.

00:02:29.840 --> 00:02:32.460
So if you want to bring up
five instances with one

00:02:32.460 --> 00:02:34.036
command in gcutil,
you can do that.

00:02:34.036 --> 00:02:35.412
I don't think we've documented
that well.

00:02:35.412 --> 00:02:36.176
It's kind of a little--

00:02:36.176 --> 00:02:37.860
JOHN: No, I haven't seen that.

00:02:37.860 --> 00:02:42.240
My shell just does
it one at a time.

00:02:42.240 --> 00:02:43.300
MARC COHEN: Yeah,
that'd be cool.

00:02:43.300 --> 00:02:48.355
So we have 10 or so people live
streaming the event, and

00:02:48.355 --> 00:02:50.570
I'm not seeing any additional
folks join.

00:02:50.570 --> 00:02:51.460
Why don't we get started.

00:02:51.460 --> 00:02:56.330
We're about five minutes past
the official start time.

00:02:56.330 --> 00:03:01.000
So I will share a screen here.

00:03:01.000 --> 00:03:04.300
Oh, just got Benjamin
joining us.

00:03:04.300 --> 00:03:05.390
Welcome, Benjamin.

00:03:05.390 --> 00:03:05.590
BENJAMIN: Thank you.

00:03:05.590 --> 00:03:07.340
Hello.

00:03:07.340 --> 00:03:09.160
MARC COHEN: We're just
about to get started.

00:03:09.160 --> 00:03:10.820
I'm going to share
a screen here.

00:03:15.850 --> 00:03:18.734
You guys seeing my slide?

00:03:18.734 --> 00:03:20.090
BENJAMIN: Yes.

00:03:20.090 --> 00:03:21.380
MARC COHEN: OK.

00:03:21.380 --> 00:03:24.230
So the agenda for this--

00:03:24.230 --> 00:03:26.730
I'd like to keep this pretty
informal-- the agenda is

00:03:26.730 --> 00:03:28.740
basically a short kind
of tech talk.

00:03:28.740 --> 00:03:32.260
And the topic for today that I
chose was to talk a little bit

00:03:32.260 --> 00:03:34.710
about authentication and
service accounts.

00:03:34.710 --> 00:03:36.740
And then we'll leave the
remainder of the time for

00:03:36.740 --> 00:03:38.400
question and answer.

00:03:38.400 --> 00:03:40.960
And we have a moderator queue
with a few questions we've

00:03:40.960 --> 00:03:44.825
already gotten, but we'll
combine the live questions and

00:03:44.825 --> 00:03:46.075
the recorded questions.

00:03:48.410 --> 00:03:52.320
It's a small enough group that
if anybody wants to jump in at

00:03:52.320 --> 00:03:56.210
any time, just yell and stop
me with a question.

00:03:56.210 --> 00:03:59.590
So I wanted to talk about
service accounts today,

00:03:59.590 --> 00:04:02.590
because I think Compute Engine
has done some really

00:04:02.590 --> 00:04:04.730
interesting work
in that space.

00:04:08.330 --> 00:04:10.210
Somebody's joining, so let
me pause for a second.

00:04:14.920 --> 00:04:16.170
Ryan, welcome.

00:04:18.819 --> 00:04:20.290
RYAN: Hi.

00:04:20.290 --> 00:04:21.779
MARC COHEN: So we're
just talking

00:04:21.779 --> 00:04:23.190
about service accounts.

00:04:23.190 --> 00:04:26.450
And in order to kind of say
what I want to say about

00:04:26.450 --> 00:04:29.950
service accounts, I need to talk
a little bit about OAuth,

00:04:29.950 --> 00:04:33.770
because service accounts are
kind of built on top of the

00:04:33.770 --> 00:04:35.370
OAuth mechanism.

00:04:35.370 --> 00:04:37.730
And so I just wanted
to explain a little

00:04:37.730 --> 00:04:38.800
bit about OAuth 2.

00:04:38.800 --> 00:04:41.520
I'm going to do something which
is probably reckless.

00:04:41.520 --> 00:04:45.010
I'm going to try to
explain OAuth 2 in

00:04:45.010 --> 00:04:47.760
two or three slides.

00:04:47.760 --> 00:04:50.510
People can spend hours
on this subject.

00:04:50.510 --> 00:04:54.280
So anyway, the basic idea--

00:04:54.280 --> 00:04:57.200
before I kind of explain what
it is, I wanted to just

00:04:57.200 --> 00:04:58.830
discuss some terminology
really quickly.

00:04:58.830 --> 00:05:01.100
So authentication versus
authorization, what's the

00:05:01.100 --> 00:05:01.410
difference?

00:05:01.410 --> 00:05:07.030
Authentication is assessing
who you are, or validating

00:05:07.030 --> 00:05:09.990
that you are who you
assert you are.

00:05:09.990 --> 00:05:13.830
Whereas, authorization is more,
OK now that we know or

00:05:13.830 --> 00:05:16.660
we at least have a strong
probability that you are who

00:05:16.660 --> 00:05:19.140
you say you are, what
can you do?

00:05:19.140 --> 00:05:21.210
What sorts of resources are
you allowed to have

00:05:21.210 --> 00:05:23.620
access to and how?

00:05:23.620 --> 00:05:25.310
What method, what
modes of access?

00:05:25.310 --> 00:05:29.440
And so the primary focus of
OAuth is authorization.

00:05:29.440 --> 00:05:32.500
And so that's what I'll
kind of focus on.

00:05:32.500 --> 00:05:34.980
Although, there has been some
recent work in the OAuth area

00:05:34.980 --> 00:05:38.980
to include authentication
as well.

00:05:38.980 --> 00:05:41.440
And there was a really good talk
given at Google I/O by

00:05:41.440 --> 00:05:44.035
Ryan Boyd this year--

00:05:44.035 --> 00:05:46.330
I think I have a link to it at
the end of these slides--

00:05:46.330 --> 00:05:50.000
which talks about both sides
of the coin, how OAuth is

00:05:50.000 --> 00:05:53.050
pulling in authentication as
well as authorization.

00:05:53.050 --> 00:05:54.990
OAuth is an open standard for

00:05:54.990 --> 00:05:56.940
delegating access to resources.

00:05:56.940 --> 00:05:59.790
So it's not just
a Google thing.

00:05:59.790 --> 00:06:04.050
It's an industry-wide thing, but
it is used extensively by

00:06:04.050 --> 00:06:05.470
many Google APIs.

00:06:05.470 --> 00:06:08.080
The last official count
I saw was over 35.

00:06:08.080 --> 00:06:10.600
I think it's a bigger
number than that.

00:06:10.600 --> 00:06:16.340
That's the number of Google APIs
that are using OAuth for

00:06:16.340 --> 00:06:17.630
authorization.

00:06:17.630 --> 00:06:21.780
And there are many
more external

00:06:21.780 --> 00:06:23.030
APIs using it as well.

00:06:26.900 --> 00:06:30.130
The model behind OAuth
is a delegation

00:06:30.130 --> 00:06:33.750
model, meaning that--

00:06:33.750 --> 00:06:35.990
there are these entities,
clients, servers,

00:06:35.990 --> 00:06:36.740
and resource owners.

00:06:36.740 --> 00:06:39.150
So you're a resource owner if
you own something that's

00:06:39.150 --> 00:06:40.750
served up by a server.

00:06:40.750 --> 00:06:43.210
And in the OAuth model the
client is kind of the

00:06:43.210 --> 00:06:43.655
intermediary.

00:06:43.655 --> 00:06:46.480
And I'll have a diagram that I
think will illustrate this a

00:06:46.480 --> 00:06:47.460
little bit better.

00:06:47.460 --> 00:06:50.800
But the idea is that you
authenticate yourself to the

00:06:50.800 --> 00:06:54.350
server, and then the server
interacts with

00:06:54.350 --> 00:06:57.042
the resource owner--

00:06:57.042 --> 00:06:57.510
sorry.

00:06:57.510 --> 00:06:59.960
You authenticate yourself to
the client, and the client

00:06:59.960 --> 00:07:02.360
interacts with the server
on your behalf.

00:07:02.360 --> 00:07:05.520
And you essentially delegate
access to your resources.

00:07:05.520 --> 00:07:09.870
So the key idea here is if you
go to a website and it wants

00:07:09.870 --> 00:07:14.750
to get access to your resources,
without OAuth 2.0,

00:07:14.750 --> 00:07:17.410
the probably most natural way to
do that would be to ask you

00:07:17.410 --> 00:07:18.140
for your password.

00:07:18.140 --> 00:07:20.600
Like, let's imagine an app that
wants to do something

00:07:20.600 --> 00:07:22.630
with your calendar entries.

00:07:22.630 --> 00:07:25.230
The natural way might be to
ask you for your calendar

00:07:25.230 --> 00:07:26.810
login and password.

00:07:26.810 --> 00:07:28.870
That's bad for many reasons.

00:07:28.870 --> 00:07:30.730
It's bad for you, and it's
bad for the app.

00:07:30.730 --> 00:07:33.770
The application developers
don't want to be in the

00:07:33.770 --> 00:07:37.240
business of storing passwords
and databases.

00:07:37.240 --> 00:07:43.070
So the idea behind OAuth 2 is
it's a way for you to tell the

00:07:43.070 --> 00:07:47.690
application, I'm willing to give
you access to my calendar

00:07:47.690 --> 00:07:50.760
resources and only my
calendar resources.

00:07:50.760 --> 00:07:53.340
And you don't have to provide
any password.

00:07:53.340 --> 00:07:55.820
And it all just kind
of works correctly.

00:07:55.820 --> 00:07:58.340
And it's safe and secure
and so on.

00:07:58.340 --> 00:08:00.410
So it's really a delegation
mechanism.

00:08:03.730 --> 00:08:08.600
The valet key is the
prototypical way people like

00:08:08.600 --> 00:08:10.970
to describe OAuth, because when
you leave your car with a

00:08:10.970 --> 00:08:14.050
valet, you can give him
or her a separate key.

00:08:14.050 --> 00:08:16.460
And it limits what access
they have, what things

00:08:16.460 --> 00:08:18.090
they have access to.

00:08:18.090 --> 00:08:21.340
So apps register as OAuth
clients by the Google

00:08:21.340 --> 00:08:22.440
Developer Console.

00:08:22.440 --> 00:08:24.350
And I'll show you that
in a little bit,

00:08:24.350 --> 00:08:25.560
what that looks like.

00:08:25.560 --> 00:08:27.470
So if you're creating
an app, you'll go to

00:08:27.470 --> 00:08:28.660
the Developer Console.

00:08:28.660 --> 00:08:31.770
And you'll step through some
pages that let you define

00:08:31.770 --> 00:08:36.360
aspects of your application and
get sort of credentials,

00:08:36.360 --> 00:08:39.360
like the client ID and the
client secret, that let you

00:08:39.360 --> 00:08:43.100
get started using
the OAuth flows.

00:08:43.100 --> 00:08:45.320
And one of the things you'll
have to say is what type of

00:08:45.320 --> 00:08:46.670
application it is.

00:08:46.670 --> 00:08:48.640
So there are multiple
scenarios.

00:08:48.640 --> 00:08:51.710
You can create a web
server model.

00:08:51.710 --> 00:08:54.110
That's probably the most common
and widely used one.

00:08:54.110 --> 00:08:56.010
But you can also create
a web client.

00:08:56.010 --> 00:08:57.940
That's where you're kind of
building a JavaScript

00:08:57.940 --> 00:09:01.140
application that wants
to directly do OAuth

00:09:01.140 --> 00:09:04.860
authorization without having
to go through a server

00:09:04.860 --> 00:09:06.080
intermediary.

00:09:06.080 --> 00:09:08.610
Of course mobile apps
are very popular.

00:09:08.610 --> 00:09:11.770
You can do command line access,
and we also have

00:09:11.770 --> 00:09:13.500
something called service
accounts, which we'll talk

00:09:13.500 --> 00:09:15.060
about a little bit
more shortly.

00:09:17.840 --> 00:09:22.240
This is what we affectionately
refer to as the OAuth dance.

00:09:22.240 --> 00:09:27.390
And so hopefully everybody has
lived this experience.

00:09:27.390 --> 00:09:31.450
But this kind of tries to
schematically summarize what's

00:09:31.450 --> 00:09:34.140
going on when you're actually
using OAuth.

00:09:34.140 --> 00:09:37.260
So you're the happy resource
owner, and you're happy

00:09:37.260 --> 00:09:39.960
because you don't have to tell
anybody your password.

00:09:39.960 --> 00:09:42.370
You're interacting with a web
server, which at the same time

00:09:42.370 --> 00:09:44.140
is an OAuth client.

00:09:44.140 --> 00:09:47.960
And through the details of the
protocol-- and I don't have

00:09:47.960 --> 00:09:50.760
time to go through
step by step the

00:09:50.760 --> 00:09:52.430
different legs of the protocol.

00:09:52.430 --> 00:09:56.370
But through the interactions
between the web server and the

00:09:56.370 --> 00:10:07.240
OAuth server, you effectively
are redirected to a dialogue--

00:10:07.240 --> 00:10:09.830
and there's a screenshot of
the dialogue right here--

00:10:09.830 --> 00:10:13.190
where it basically asks you
explicitly whether you want to

00:10:13.190 --> 00:10:17.200
allow the permission that the
application is requesting.

00:10:17.200 --> 00:10:18.950
And you can either
allow or deny.

00:10:18.950 --> 00:10:22.700
And if you allow, the flow is
redirected back to your web

00:10:22.700 --> 00:10:25.630
server with some information
that the web server can

00:10:25.630 --> 00:10:28.080
extract from the
redirect path.

00:10:28.080 --> 00:10:32.560
And it can use the OAuth
protocol to turn that data

00:10:32.560 --> 00:10:36.050
into time limited
access tokens.

00:10:36.050 --> 00:10:39.780
So the access tokens are kind
of like the final ticket to

00:10:39.780 --> 00:10:42.410
actually get access
to the resources.

00:10:42.410 --> 00:10:44.630
And they're both time limited
and scope limited.

00:10:44.630 --> 00:10:48.440
So you can specify a scope,
which is manifested in this

00:10:48.440 --> 00:10:51.500
dialogue by the fact that it's
asking to manage your

00:10:51.500 --> 00:10:53.790
calendars and your documents.

00:10:53.790 --> 00:10:56.820
Scope in OAuth can be both
operational, like manage

00:10:56.820 --> 00:11:02.010
versus read only, and it can
be application oriented as

00:11:02.010 --> 00:11:03.650
well-- or data oriented
as well-- like

00:11:03.650 --> 00:11:05.960
calendars versus documents.

00:11:05.960 --> 00:11:10.100
So it can be both scope limited
and time limited.

00:11:10.100 --> 00:11:12.570
The time limitation comes in
the fact that access tokens

00:11:12.570 --> 00:11:15.450
typically live for on the
order of an hour.

00:11:15.450 --> 00:11:19.170
And there's a mechanism where
applications can refresh those

00:11:19.170 --> 00:11:24.260
tokens, the access tokens,
either interactively with you

00:11:24.260 --> 00:11:27.580
while you're involved in the
transaction, or in an offline

00:11:27.580 --> 00:11:28.840
mode when you're not
even around.

00:11:28.840 --> 00:11:33.855
And that's a function of how the
whole transaction is done.

00:11:37.110 --> 00:11:39.870
So hopefully you've seen that
before, it makes sense.

00:11:39.870 --> 00:11:46.000
But there's some problems with
this model when you start to

00:11:46.000 --> 00:11:49.850
try to do things in more of a
server or service-to-service

00:11:49.850 --> 00:11:50.730
oriented fashion.

00:11:50.730 --> 00:11:54.170
So specifically, imagine that
you're using Google Compute

00:11:54.170 --> 00:11:57.400
Engine, and you have 1,000
virtual machines.

00:11:57.400 --> 00:12:00.700
And now you have to actually
iterate over those machines to

00:12:00.700 --> 00:12:06.190
do something to effect this
OAuth dance 1,000 times.

00:12:06.190 --> 00:12:09.970
You're really not going
to want to do that.

00:12:09.970 --> 00:12:14.030
One of the important innovations
in Google Compute

00:12:14.030 --> 00:12:17.400
Engine is that when you create
a virtual machine, you get an

00:12:17.400 --> 00:12:20.730
identity associated
with your project.

00:12:20.730 --> 00:12:26.050
And that identity is set up in
such a way that the "OAuth

00:12:26.050 --> 00:12:30.510
dance," quote unquote, can be
done for you automatically.

00:12:30.510 --> 00:12:33.650
So you don't have to go visit
1,000 machines and do that,

00:12:33.650 --> 00:12:37.180
that click-through business
1,000 times.

00:12:37.180 --> 00:12:39.330
The other thing that's important
is your application

00:12:39.330 --> 00:12:40.290
is not you.

00:12:40.290 --> 00:12:46.250
And so with traditional uses of
OAuth, you would register

00:12:46.250 --> 00:12:51.070
your account, your personal
account or maybe some account

00:12:51.070 --> 00:12:54.280
associated with your business,
to this application you're

00:12:54.280 --> 00:12:57.430
working on that's kind of
moderating all this delegation

00:12:57.430 --> 00:12:58.650
of authority.

00:12:58.650 --> 00:13:04.450
And the scope of that account
may not be perfectly

00:13:04.450 --> 00:13:07.510
overlapping with the scope of
the data that the application

00:13:07.510 --> 00:13:09.980
wants to manage.

00:13:09.980 --> 00:13:18.280
So it really makes sense in this
world to have an account

00:13:18.280 --> 00:13:21.920
that embodies the application
and is scope limited to the

00:13:21.920 --> 00:13:24.510
data that the application
operates on.

00:13:24.510 --> 00:13:26.460
And that's what you get
with service accounts.

00:13:26.460 --> 00:13:29.910
That's kind of one of the main
ideas behind service accounts.

00:13:29.910 --> 00:13:33.720
So really what you want is an
application with an identity

00:13:33.720 --> 00:13:39.360
of its own and the ability to
automatically authenticate

00:13:39.360 --> 00:13:41.070
programmatically with that
identity, without having a

00:13:41.070 --> 00:13:43.980
human being present
to be clicking

00:13:43.980 --> 00:13:46.190
on interactive dialogues.

00:13:46.190 --> 00:13:47.810
And that's what service
accounts give you.

00:13:47.810 --> 00:13:49.770
So you get a--

00:13:49.770 --> 00:13:52.590
first of all, a service
account is

00:13:52.590 --> 00:13:54.640
just a Gmail account.

00:13:54.640 --> 00:13:58.360
It's a Google account like any
other Google account, except

00:13:58.360 --> 00:14:02.160
that it's typically associated
with a project or an

00:14:02.160 --> 00:14:05.150
application rather than
a human being.

00:14:05.150 --> 00:14:07.700
And the two key benefits you get
from using these service

00:14:07.700 --> 00:14:10.600
accounts, or what I've just
mentioned, which are that it's

00:14:10.600 --> 00:14:13.350
automatic, there's no need
to do the OAuth dance.

00:14:13.350 --> 00:14:15.360
And I guess I didn't mention
the second point, which is

00:14:15.360 --> 00:14:18.510
that it gives you transparent
access with Google Compute

00:14:18.510 --> 00:14:21.630
Engine, because we've done
things to make that so.

00:14:21.630 --> 00:14:24.918
So service accounts are kind of
built right in, baked right

00:14:24.918 --> 00:14:28.800
in to Google Compute Engine and
quite nicely integrated

00:14:28.800 --> 00:14:30.300
with your VMs.

00:14:30.300 --> 00:14:32.980
And I'll show a quick demo
of that shortly.

00:14:32.980 --> 00:14:38.460
A couple other points are that
the service account is created

00:14:38.460 --> 00:14:42.030
when you create your Compute
Engine project.

00:14:42.030 --> 00:14:46.050
So it comes into existence
automatically and it has

00:14:46.050 --> 00:14:49.000
access by default to
your project data.

00:14:49.000 --> 00:14:53.420
Users on your project team
can act as this account.

00:14:53.420 --> 00:14:57.070
And you can also have finer
grained control, like you can

00:14:57.070 --> 00:15:01.890
use ACLs to limit access to--
set up resources independently

00:15:01.890 --> 00:15:06.460
of your service account.

00:15:06.460 --> 00:15:09.900
And service accounts have a
broader applicability than

00:15:09.900 --> 00:15:10.970
just Compute Engine.

00:15:10.970 --> 00:15:15.160
They can be used in other Google
APIs, and they can be

00:15:15.160 --> 00:15:19.350
used even outside of APIs
using JSON web tokens.

00:15:19.350 --> 00:15:23.220
There's a whole larger area
that you can learn about,

00:15:23.220 --> 00:15:25.030
regarding service accounts
in general.

00:15:25.030 --> 00:15:28.920
But really the focus for today
is service accounts inside

00:15:28.920 --> 00:15:30.370
Compute Engine.

00:15:30.370 --> 00:15:30.920
Any questions?

00:15:30.920 --> 00:15:32.010
I've been talking for a while.

00:15:32.010 --> 00:15:33.260
Any questions up until now?

00:15:35.940 --> 00:15:38.910
For people who are not attending
live, who are

00:15:38.910 --> 00:15:46.370
streaming this, feel free to--
the original invitation has a

00:15:46.370 --> 00:15:48.890
moderator page where you
can add your questions.

00:15:48.890 --> 00:15:51.440
So feel free to add your
thoughts or comments or

00:15:51.440 --> 00:15:52.690
feedback there.

00:15:55.239 --> 00:15:58.460
OK, so back to the slides.

00:15:58.460 --> 00:16:03.400
How do service accounts work
inside Google Compute Engine?

00:16:03.400 --> 00:16:05.580
So it's built right in.

00:16:05.580 --> 00:16:08.620
Like I mentioned earlier,
the account itself gets

00:16:08.620 --> 00:16:11.010
auto-created with
your project.

00:16:11.010 --> 00:16:16.740
The virtual machine instances
are automatically told about

00:16:16.740 --> 00:16:19.270
your service account and kind
of wired up to use your

00:16:19.270 --> 00:16:23.370
service account when you create
the instance with a

00:16:23.370 --> 00:16:27.040
special option called minus,
minus service account scopes.

00:16:27.040 --> 00:16:29.690
And that's really kind
of doing two things.

00:16:29.690 --> 00:16:33.110
One, it's telling it to use the
service account, and it's

00:16:33.110 --> 00:16:38.080
also giving it the specific
scope to assign to the tokens

00:16:38.080 --> 00:16:40.350
that it obtains for that
service account.

00:16:40.350 --> 00:16:42.080
In the example here, it
shows a shorthand.

00:16:42.080 --> 00:16:44.610
In an earlier version,
we used full URLs.

00:16:44.610 --> 00:16:47.270
But the latest version
of gcutil supports

00:16:47.270 --> 00:16:48.060
these shorter names.

00:16:48.060 --> 00:16:51.810
So this is giving read/write
access for Compute Engine and

00:16:51.810 --> 00:16:54.900
read/write access for Google
Cloud Storage.

00:16:54.900 --> 00:16:59.730
And when you create the VM
like this, the gcutil and

00:16:59.730 --> 00:17:01.580
gsutil commands just work.

00:17:01.580 --> 00:17:04.310
We call that frictionless
because, as I'll show in a

00:17:04.310 --> 00:17:10.339
second, the software internally
knows how to obtain

00:17:10.339 --> 00:17:13.710
the access tokens for the
service account and then be

00:17:13.710 --> 00:17:16.060
able to do everything it needs
to do without having to do any

00:17:16.060 --> 00:17:17.690
OAuth dance.

00:17:17.690 --> 00:17:20.349
It's also easy to use with
other Google APIs.

00:17:20.349 --> 00:17:22.829
There are ways that you can
programmatically access the

00:17:22.829 --> 00:17:26.119
service accounts, access
tokens, through

00:17:26.119 --> 00:17:27.630
our metadata server.

00:17:27.630 --> 00:17:31.520
So even if you don't have a
command like gcutil or gsutil

00:17:31.520 --> 00:17:34.870
that kind of is wired right up
to do the right thing here,

00:17:34.870 --> 00:17:37.570
there are ways that if you're
building a service that wants

00:17:37.570 --> 00:17:41.780
to use some other Google API,
for example, it can do the

00:17:41.780 --> 00:17:45.860
same technique and get access
very easily to access tokens

00:17:45.860 --> 00:17:47.140
through the metadata server.

00:17:50.460 --> 00:17:55.240
So let's switch gears here
and do some live stuff.

00:17:55.240 --> 00:17:59.620
What I'm showing here is
the Developer Console.

00:17:59.620 --> 00:18:05.300
And this is a project
I just created.

00:18:05.300 --> 00:18:10.200
And it doesn't yet have any
clients, any OAuth 2 clients.

00:18:10.200 --> 00:18:13.660
So there's an overview page,
where you can see various

00:18:13.660 --> 00:18:14.760
things about the project.

00:18:14.760 --> 00:18:18.520
But when you do want to do
something with OAuth, you go

00:18:18.520 --> 00:18:23.120
to the API access page, and you
create an OAuth client.

00:18:23.120 --> 00:18:25.540
You give it a name.

00:18:25.540 --> 00:18:27.970
You can give it a logo,
if you want.

00:18:27.970 --> 00:18:30.210
You can tell something about
what type of application.

00:18:30.210 --> 00:18:32.040
So this gets into that whole
business about all those

00:18:32.040 --> 00:18:34.950
different flows and so on.

00:18:34.950 --> 00:18:36.430
And then you create
the client ID.

00:18:36.430 --> 00:18:38.785
And then you get some
information back, which give

00:18:38.785 --> 00:18:41.070
you credentials for
that client.

00:18:41.070 --> 00:18:44.490
And then those are useful for
actually transacting the

00:18:44.490 --> 00:18:46.276
different flows.

00:18:46.276 --> 00:18:49.560
JOHN: Marc, can you go back one
page for a second, please?

00:18:49.560 --> 00:18:51.370
MARC COHEN: Sure.

00:18:51.370 --> 00:18:53.000
JOHN: OK.

00:18:53.000 --> 00:18:53.960
OK, I see what I'm looking for.

00:18:53.960 --> 00:18:54.830
Thank you.

00:18:54.830 --> 00:18:55.660
MARC COHEN: OK.

00:18:55.660 --> 00:19:00.610
So that's not really related
to service accounts, but I

00:19:00.610 --> 00:19:02.890
just wanted to share that with
you so you know what that

00:19:02.890 --> 00:19:04.360
looks like if you're trying
to do something

00:19:04.360 --> 00:19:06.790
with OAuth in general.

00:19:06.790 --> 00:19:09.765
So to talk a little bit more
about service accounts, I'm

00:19:09.765 --> 00:19:16.370
going to switch the screen share
from my browser to the

00:19:16.370 --> 00:19:18.830
shell window.

00:19:18.830 --> 00:19:20.480
Is everybody seeing
my shell window?

00:19:23.940 --> 00:19:27.360
Are you seeing the
screen fully?

00:19:27.360 --> 00:19:28.610
Seeing the bottom
of the screen?

00:19:31.890 --> 00:19:34.590
So I'm on my laptop here.

00:19:34.590 --> 00:19:39.420
And I'm going to do gsutil.

00:19:39.420 --> 00:19:42.690
And I'm going to basically
create an instance with a

00:19:42.690 --> 00:19:44.390
service account.

00:19:44.390 --> 00:19:49.250
I have an environment variable
that I have set with the scope

00:19:49.250 --> 00:19:49.900
that I want.

00:19:49.900 --> 00:19:53.800
And as you can see, I'm giving
two scopes to the OAuth

00:19:53.800 --> 00:19:55.210
requirement.

00:19:55.210 --> 00:19:58.790
So I'll say, gcutil
addinstance.

00:19:58.790 --> 00:20:00.870
We'll call this foo.

00:20:00.870 --> 00:20:07.230
And I'll give it the service
account scope

00:20:07.230 --> 00:20:09.370
equals dollar scopes.

00:20:09.370 --> 00:20:10.750
JOHN: I have a question.

00:20:10.750 --> 00:20:11.690
MARC COHEN: Yup?

00:20:11.690 --> 00:20:17.066
JOHN: The compute read/write,
what does that allow?

00:20:17.066 --> 00:20:20.410
I know that storage full for
reading and writing from the

00:20:20.410 --> 00:20:22.660
Google Storage, but--

00:20:22.660 --> 00:20:25.390
MARC COHEN: Right, so storage
full actually gives me

00:20:25.390 --> 00:20:30.150
reading, writing, and
almost everything.

00:20:30.150 --> 00:20:33.790
Like, I can modify ACLs
and stuff like that.

00:20:33.790 --> 00:20:37.880
Compute read/write means that
I have pretty much read and

00:20:37.880 --> 00:20:38.650
write ability.

00:20:38.650 --> 00:20:40.960
I can create instances.

00:20:40.960 --> 00:20:43.610
I can delete things.

00:20:43.610 --> 00:20:44.580
I guess read--

00:20:44.580 --> 00:20:47.500
I'm kind of educated guessing,
I should defer to Joe on

00:20:47.500 --> 00:20:50.030
this-- but I'm kind of assuming
that read means I can

00:20:50.030 --> 00:20:52.090
access stuff without
changing it.

00:20:52.090 --> 00:20:53.432
But Joe can give a
better answer.

00:20:53.432 --> 00:20:55.920
JOE BEDA: Yeah, I mean pretty
much there's only two scopes

00:20:55.920 --> 00:20:58.870
for Compute Engine, read
only and read/write.

00:20:58.870 --> 00:21:00.310
And so they do what you think.

00:21:00.310 --> 00:21:04.220
If you're going to impact or
mutate anything, you need

00:21:04.220 --> 00:21:05.520
read/write scope.

00:21:05.520 --> 00:21:08.530
We're going to be looking at
providing more fine grained

00:21:08.530 --> 00:21:10.615
controls and policies.

00:21:10.615 --> 00:21:12.620
We're trying right now
to figure out the

00:21:12.620 --> 00:21:14.110
right way to do that.

00:21:14.110 --> 00:21:18.460
JOHN: So this is if you want
one instance to be able to

00:21:18.460 --> 00:21:20.590
control other instances?

00:21:20.590 --> 00:21:22.680
JOE BEDA: Exactly, exactly.

00:21:22.680 --> 00:21:24.506
So if you were going to have
an instance that it was

00:21:24.506 --> 00:21:27.310
getting from say an auto-scaling
algorithm to spin

00:21:27.310 --> 00:21:30.950
up and spin down instances as
appropriate, then that scope

00:21:30.950 --> 00:21:33.800
would be [INAUDIBLE] that.

00:21:33.800 --> 00:21:35.770
MARC COHEN: And I think it's
more than an instance.

00:21:35.770 --> 00:21:38.330
I think it's like I want the
service account that's created

00:21:38.330 --> 00:21:44.050
to have this access, so that any
VM I create or anything I

00:21:44.050 --> 00:21:49.750
do within VMs that are
associated with that service

00:21:49.750 --> 00:21:51.560
account will have that
[INAUDIBLE].

00:21:51.560 --> 00:21:52.320
JOE BEDA: It's actually
kind of on an

00:21:52.320 --> 00:21:54.110
instance by instance basis.

00:21:54.110 --> 00:21:56.980
So you can have one instance
using a service account and

00:21:56.980 --> 00:21:58.790
whitelist a certain set of
scopes, and you can have

00:21:58.790 --> 00:22:01.675
another instance using that
same service account and

00:22:01.675 --> 00:22:03.334
whitelisting a different
set of scopes.

00:22:03.334 --> 00:22:04.250
MARC COHEN: OK.

00:22:04.250 --> 00:22:07.160
I guess that raises another
question, but I'll get to that

00:22:07.160 --> 00:22:09.570
when I log into the machine.

00:22:09.570 --> 00:22:13.600
So I just did a getinstance,
gcutil getinstance, on the

00:22:13.600 --> 00:22:15.330
newly created instance.

00:22:15.330 --> 00:22:17.780
And it's got status running,
which is great.

00:22:17.780 --> 00:22:19.580
That means it should be
available, so I'll

00:22:19.580 --> 00:22:22.090
use gcutil ssh foo.

00:22:22.090 --> 00:22:24.880
And I'm kind of glossing over
the fact that gcutil is doing

00:22:24.880 --> 00:22:32.130
some nice things for me in the
space of SSH public/private

00:22:32.130 --> 00:22:36.580
key management, where it's
pushing the right public key

00:22:36.580 --> 00:22:40.370
in the right place on the
created VM, so that I didn't

00:22:40.370 --> 00:22:41.410
have to use a password.

00:22:41.410 --> 00:22:42.620
And it's not because
that's wide open.

00:22:42.620 --> 00:22:46.730
It's because SSH did the right
thing, cryptographically.

00:22:46.730 --> 00:22:51.580
And the gcutil ssh command did
all the right arguments on SSH

00:22:51.580 --> 00:22:54.510
to make sure that it specified
the right keys and so on.

00:22:54.510 --> 00:22:59.820
So here I am logged in
to my foo, my new VM.

00:22:59.820 --> 00:23:03.030
And because of the fact that I
gave it that scope, I now have

00:23:03.030 --> 00:23:05.120
full access to gcutil
and gsutil.

00:23:05.120 --> 00:23:13.560
So I can say gsutil mb,
make a bucket, gs

00:23:13.560 --> 00:23:17.180
colon Marc dash new.

00:23:20.490 --> 00:23:28.950
No surprise, that already
exists, so reallynew.

00:23:28.950 --> 00:23:29.820
And there it is.

00:23:29.820 --> 00:23:33.925
And I can do things
like echo hello.

00:23:33.925 --> 00:23:37.760
I can go gsutil copy
minus to a new gs.

00:23:41.050 --> 00:23:42.410
And it'll put stuff up.

00:23:42.410 --> 00:23:48.270
So I'm basically using Google
Cloud Storage, using the

00:23:48.270 --> 00:23:51.520
service account, without having
to have done anything

00:23:51.520 --> 00:23:52.620
magical to set it up.

00:23:52.620 --> 00:23:57.860
And if I again created 1,000
VMs, they would all be gsutil

00:23:57.860 --> 00:24:00.260
ready, Google Cloud
Storage ready.

00:24:00.260 --> 00:24:01.130
So it's not just gsutil.

00:24:01.130 --> 00:24:03.950
I can use APIs and
things as well.

00:24:03.950 --> 00:24:09.260
And things just kind of work
naturally, the way you'd like

00:24:09.260 --> 00:24:10.540
them to, which I think
is really nice.

00:24:10.540 --> 00:24:13.800
And it also shows good
integration.

00:24:13.800 --> 00:24:15.950
It makes it really easy to
use Google Cloud Storage

00:24:15.950 --> 00:24:18.620
from VM and so on.

00:24:18.620 --> 00:24:20.700
I can also use gcutil
in the same way.

00:24:20.700 --> 00:24:25.350
I can say, gcutil
addinstance bar.

00:24:25.350 --> 00:24:27.980
And now I'm in a VM, creating
another VM.

00:24:27.980 --> 00:24:31.810
And I have full access to--

00:24:31.810 --> 00:24:34.160
I shouldn't have done that.

00:24:34.160 --> 00:24:37.420
I have my security friend
sitting here next to me, who

00:24:37.420 --> 00:24:41.270
probably just frowned at me for
not entering a passphrase.

00:24:41.270 --> 00:24:43.320
In the instance of
mistyping it--

00:24:43.320 --> 00:24:45.910
[? BENJAMIN: He's ?]
busily hacking it.

00:24:45.910 --> 00:24:48.010
MARC COHEN: He's hacking into
my system as we speak.

00:24:48.010 --> 00:24:52.371
So if you do what I just did,
please set up a passphrase.

00:24:52.371 --> 00:24:54.620
Do as I say, not as I do.

00:24:54.620 --> 00:24:59.730
Anyway, I'm able to use gcutil
to create images for instances

00:24:59.730 --> 00:25:02.400
rather than from a VM
just as easily.

00:25:02.400 --> 00:25:04.580
I didn't have to do a
configuration step because of

00:25:04.580 --> 00:25:06.680
the joys of service accounts.

00:25:06.680 --> 00:25:09.340
And the question I was going to
ask you earlier, Joe, was,

00:25:09.340 --> 00:25:12.790
when I'm in a VM that was
created with a service account

00:25:12.790 --> 00:25:15.560
scope, and then I create another
VM, does it sort of

00:25:15.560 --> 00:25:16.600
inherit that scope?

00:25:16.600 --> 00:25:19.880
Or do I need to specify minus,
minus service account scope

00:25:19.880 --> 00:25:21.920
again to make sure
that propagates?

00:25:21.920 --> 00:25:25.080
JOE BEDA: You've asked a very,
very good question.

00:25:25.080 --> 00:25:27.570
So every time you start an
instance, you have to specify

00:25:27.570 --> 00:25:30.260
which scopes and which service
accounts you want to make

00:25:30.260 --> 00:25:33.660
available to that particular
instance.

00:25:33.660 --> 00:25:38.940
And currently we don't pass
through any of those scopes.

00:25:38.940 --> 00:25:43.630
And so if you give a VM access
to the compute scope, it can

00:25:43.630 --> 00:25:49.780
launch other instances
with expanded scope.

00:25:49.780 --> 00:25:51.270
And so--

00:25:51.270 --> 00:25:52.460
something to be aware of.

00:25:52.460 --> 00:25:54.840
MARC COHEN: OK.

00:25:54.840 --> 00:25:57.860
So that's almost taken us to
halfway through the session.

00:25:57.860 --> 00:26:00.860
And that pretty much covers
what I wanted to show you

00:26:00.860 --> 00:26:02.650
interactively.

00:26:02.650 --> 00:26:04.720
Let me undo the--

00:26:04.720 --> 00:26:07.540
actually, let me switch the
screen share back to the

00:26:07.540 --> 00:26:09.815
slides because there's one more
slide I wanted to show.

00:26:18.330 --> 00:26:22.260
So back to this.

00:26:22.260 --> 00:26:24.500
There's a resources slide I just
wanted to share with you.

00:26:24.500 --> 00:26:26.720
And this has pretty much
everything I could find that I

00:26:26.720 --> 00:26:30.930
thought would be really helpful
in the space of OAuth,

00:26:30.930 --> 00:26:32.700
the Developers Console
link, and

00:26:32.700 --> 00:26:35.550
specifically service accounts.

00:26:35.550 --> 00:26:39.640
One thing I didn't include was
a link to that YouTube video,

00:26:39.640 --> 00:26:41.180
but I'd strongly--

00:26:41.180 --> 00:26:44.370
if you're interested in a great
kind of overview of all

00:26:44.370 --> 00:26:48.120
things OAuth and a little bit
on service accounts as well,

00:26:48.120 --> 00:26:50.550
and also how OAuth is working
its way into the

00:26:50.550 --> 00:26:54.170
authentication space,
try googling

00:26:54.170 --> 00:26:57.860
Google I/O 2012 OAuth.

00:26:57.860 --> 00:27:00.020
And you'll find a really good
talk by Ryan Boyd, as I

00:27:00.020 --> 00:27:01.280
mentioned earlier.

00:27:01.280 --> 00:27:05.080
This OAuth 2.0 playground is
worth visiting as well if

00:27:05.080 --> 00:27:06.770
you're interested
in this stuff.

00:27:06.770 --> 00:27:09.810
It's a really cool site,
interactive site, that lets

00:27:09.810 --> 00:27:20.340
you interactively transact
OAuth requests.

00:27:20.340 --> 00:27:24.010
So you'd say, this is the
scope I'm interested in.

00:27:24.010 --> 00:27:26.050
And then you can authorize
the API.

00:27:26.050 --> 00:27:28.400
And it kind of actually
takes you through the

00:27:28.400 --> 00:27:29.670
dialogue like that.

00:27:29.670 --> 00:27:35.320
And then you can say, exchange
that for a refresh token.

00:27:35.320 --> 00:27:37.980
Now I have an access and a
refresh token, and I can

00:27:37.980 --> 00:27:39.080
refresh and so on.

00:27:39.080 --> 00:27:41.105
And I get the requests
and the response over

00:27:41.105 --> 00:27:41.910
on the right tabs.

00:27:41.910 --> 00:27:45.310
So it's a really nice site for
kind of seeing how this all

00:27:45.310 --> 00:27:49.060
works and getting a better
sense of OAuth.

00:27:49.060 --> 00:27:54.580
And you can also try debugging
things, if you're having

00:27:54.580 --> 00:27:55.870
trouble getting something
to work.

00:27:58.586 --> 00:28:01.870
I think that's it
from my slides.

00:28:01.870 --> 00:28:08.150
And the next section I wanted to
move to was Q&amp;A. We're open

00:28:08.150 --> 00:28:11.330
ended here, so anything you want
to talk about in Compute

00:28:11.330 --> 00:28:12.360
Engine is fair game.

00:28:12.360 --> 00:28:17.000
Don't necessarily limit to OAuth
or service accounts.

00:28:17.000 --> 00:28:19.180
And I'm also really interested
in your feedback based on

00:28:19.180 --> 00:28:21.630
actual experience you've had
with the product so far.

00:28:21.630 --> 00:28:24.310
So it's not just questions
but also any comments,

00:28:24.310 --> 00:28:26.030
we'd love to hear.

00:28:26.030 --> 00:28:32.230
So I'm going to switch off my
screen share, and I'll open

00:28:32.230 --> 00:28:33.480
the floor now.

00:28:35.730 --> 00:28:37.550
Don't all rush at once.

00:28:37.550 --> 00:28:40.250
BENJAMIN: So based on the
discussion this morning on the

00:28:40.250 --> 00:28:44.480
mailing list, can you talk
a little bit about V6?

00:28:44.480 --> 00:28:47.470
JOE BEDA: Let me just expound
on that a little bit.

00:28:47.470 --> 00:28:50.120
It's a matter of Google
continuing to build its V6

00:28:50.120 --> 00:28:52.370
infrastructure, and
us building the

00:28:52.370 --> 00:28:54.350
support into the product.

00:28:54.350 --> 00:28:57.260
And so we can't give timelines
on stuff like this just

00:28:57.260 --> 00:28:59.430
because we don't want to make
promises that we're not 100%

00:28:59.430 --> 00:29:00.800
sure we can keep.

00:29:00.800 --> 00:29:04.285
And software development
is a messy business.

00:29:08.710 --> 00:29:10.875
I know there is disappointment
within the company that we're

00:29:10.875 --> 00:29:12.040
not V6 enabled already.

00:29:12.040 --> 00:29:15.370
So if you're disappointed
outside of Google, there's

00:29:15.370 --> 00:29:17.560
disappointment inside
of Google also.

00:29:17.560 --> 00:29:20.980
And so it's something that--

00:29:20.980 --> 00:29:22.660
people's hearts are behind it.

00:29:22.660 --> 00:29:25.850
And we're going to work
to get there.

00:29:25.850 --> 00:29:27.320
MARC COHEN: OK, thanks guys.

00:29:27.320 --> 00:29:29.950
I'm going to jump to
the moderator.

00:29:29.950 --> 00:29:37.370
The top rated question so far
is, "What other versions of

00:29:37.370 --> 00:29:38.440
operating systems--

00:29:38.440 --> 00:29:43.310
SUSE, Red Hat, Windows, et
cetera-- are in the pipeline?"

00:29:43.310 --> 00:29:46.980
And that may be also in that
similar category of not

00:29:46.980 --> 00:29:51.270
allowed to say much about what
we're planning to do.

00:29:51.270 --> 00:29:52.310
JOE BEDA: I can say one thing.

00:29:52.310 --> 00:29:54.880
It's that as long as it's Linux,
and you're happy with

00:29:54.880 --> 00:29:58.190
the kernel that we have,
you can run any user

00:29:58.190 --> 00:30:00.410
mode that you like.

00:30:00.410 --> 00:30:07.350
Rolling your own user mode is
kind of an advanced scenario.

00:30:07.350 --> 00:30:10.800
But you can upload a raw disk
file, make it 10 gigabytes

00:30:10.800 --> 00:30:15.480
with one partition, and we'll
boot the kernel and point it

00:30:15.480 --> 00:30:18.720
at that file system.

00:30:18.720 --> 00:30:23.970
Beyond Linux, it gets a
little bit trickier.

00:30:23.970 --> 00:30:28.930
And we don't have anything to
really talk about right now

00:30:28.930 --> 00:30:30.080
about that.

00:30:30.080 --> 00:30:32.460
MARC COHEN: One thing we can
say, though, is if you have a

00:30:32.460 --> 00:30:35.850
specific need for an operating
system that we're not

00:30:35.850 --> 00:30:38.370
supporting, we'd love
to hear from you.

00:30:38.370 --> 00:30:47.480
So send mail to
gcteam@google.com, or the

00:30:47.480 --> 00:30:48.380
discussion group.

00:30:48.380 --> 00:30:50.500
And let us know what
your needs are.

00:30:50.500 --> 00:30:53.880
And that helps us calibrate what
sort of things we should

00:30:53.880 --> 00:30:59.310
be trying to support
down the road.

00:30:59.310 --> 00:31:00.260
How about a live question?

00:31:00.260 --> 00:31:04.270
Anybody in the Hangout have
another question?

00:31:04.270 --> 00:31:06.410
JOHN: Yeah, I have just
a quick question.

00:31:06.410 --> 00:31:11.330
The service accounts, when
I launch a Compute Engine

00:31:11.330 --> 00:31:17.810
instance, I specify the storage
account scope and I

00:31:17.810 --> 00:31:23.430
don't specify the storage
service account, am I doing

00:31:23.430 --> 00:31:25.710
something wrong there?

00:31:25.710 --> 00:31:29.190
I remember setting up one
service account earlier on,

00:31:29.190 --> 00:31:33.640
but I haven't really paid
attention to it since then.

00:31:33.640 --> 00:31:36.320
JOE BEDA: There's a little bit
of confusion here, I think.

00:31:36.320 --> 00:31:38.900
Currently there's two types
of service accounts.

00:31:38.900 --> 00:31:43.290
There's service accounts that
can be used outside of Compute

00:31:43.290 --> 00:31:47.040
Engine, using the JWT flow.

00:31:47.040 --> 00:31:49.290
And you get a certificate
for those guys.

00:31:49.290 --> 00:31:56.150
And you'll see those listed
in the API console.

00:31:56.150 --> 00:32:00.320
There's also currently one--
but we built the APIs with

00:32:00.320 --> 00:32:02.050
room for expanding it--

00:32:02.050 --> 00:32:06.110
there's one service account
available too, within the

00:32:06.110 --> 00:32:07.530
Compute Engine world.

00:32:07.530 --> 00:32:10.960
And because there's only one
right now, we default to that.

00:32:10.960 --> 00:32:14.060
It's called default so it kind
of defaults all around.

00:32:17.760 --> 00:32:20.230
And so we're going to be looking
to be able to have

00:32:20.230 --> 00:32:23.580
multiple service accounts
at some point hopefully.

00:32:23.580 --> 00:32:28.510
And you can specify what
permissions each of those

00:32:28.510 --> 00:32:33.010
service accounts have and
scope those things down.

00:32:33.010 --> 00:32:34.260
MARC COHEN: Thanks, Joe.

00:32:37.190 --> 00:32:39.720
Let's see.

00:32:39.720 --> 00:32:43.490
"When adding persistent disk to
instance, if it's already

00:32:43.490 --> 00:32:47.010
mounted, it will not mount read
only as the documentation

00:32:47.010 --> 00:32:49.140
appears to state.

00:32:49.140 --> 00:32:53.380
Minus, minus disk equals disk ID
comma mode equals read only

00:32:53.380 --> 00:32:57.300
generates resourcing
use error."

00:32:57.300 --> 00:33:01.040
JOE BEDA: So a disk can be
mounted read only across

00:33:01.040 --> 00:33:03.020
multiple instances or

00:33:03.020 --> 00:33:04.590
read/write to only one instance.

00:33:04.590 --> 00:33:09.460
And so without looking at the
specific case here, my guess

00:33:09.460 --> 00:33:12.650
is that it's mounted read/write
to one instance and

00:33:12.650 --> 00:33:14.920
you're trying to mount it read
only to a different instance.

00:33:14.920 --> 00:33:19.960
So we don't support hotplug
of persistent disks yet.

00:33:19.960 --> 00:33:25.280
And so what you'll have to do is
shut down the instance that

00:33:25.280 --> 00:33:27.560
has the disk mounted read/write,
and then you can

00:33:27.560 --> 00:33:31.050
bring up a plethora of
instances that mount

00:33:31.050 --> 00:33:32.300
the disk read only.

00:33:34.250 --> 00:33:35.560
MARC COHEN: OK.

00:33:35.560 --> 00:33:36.850
Live questions?

00:33:36.850 --> 00:33:42.820
BENJAMIN: What are the plans
for DNS services?

00:33:42.820 --> 00:33:45.000
JOE BEDA: Oh, DNS.

00:33:45.000 --> 00:33:46.000
Yeah.

00:33:46.000 --> 00:33:50.620
There are a whole host of sort
of supporting services that we

00:33:50.620 --> 00:33:51.850
want to build.

00:33:51.850 --> 00:33:56.110
DNS is definitely
on our radar.

00:33:56.110 --> 00:33:59.200
Again, I wish I could
give more detail in

00:33:59.200 --> 00:34:00.120
terms of the when.

00:34:00.120 --> 00:34:04.580
But we think that it definitely
should be part of

00:34:04.580 --> 00:34:06.540
the offering.

00:34:06.540 --> 00:34:08.900
One of the things that I think
people like about App Engine,

00:34:08.900 --> 00:34:12.500
for example, is that, based on
your app ID, you actually get

00:34:12.500 --> 00:34:14.449
a bunch of automatic names.

00:34:14.449 --> 00:34:17.260
And so there's sort of automatic
registration of

00:34:17.260 --> 00:34:17.929
external DNS.

00:34:17.929 --> 00:34:22.550
And so as we look towards
doing DNS stuff--

00:34:22.550 --> 00:34:23.230
no promises.

00:34:23.230 --> 00:34:25.320
But that's the type of thing
that inspired us in terms of

00:34:25.320 --> 00:34:28.270
making some of this stuff easy
by default, but then letting

00:34:28.270 --> 00:34:30.830
you do more advanced
things also.

00:34:30.830 --> 00:34:33.310
BENJAMIN: Other than sort of
guess at what all of the

00:34:33.310 --> 00:34:36.600
different pieces might be and
how you say that you can't

00:34:36.600 --> 00:34:43.330
talk about when, can you tell
us what sorts of things are

00:34:43.330 --> 00:34:46.559
coming up in say the next 12
months, without giving any

00:34:46.559 --> 00:34:47.389
kind of dates?

00:34:47.389 --> 00:34:50.030
Like that DNS is interesting.

00:34:50.030 --> 00:34:51.260
CDN is interesting.

00:34:51.260 --> 00:34:52.290
V6 is interesting.

00:34:52.290 --> 00:34:53.710
Non-Linux VM is interesting.

00:34:53.710 --> 00:34:54.770
Right, so all this stuff,
you're going to

00:34:54.770 --> 00:34:56.260
give the same answer.

00:34:56.260 --> 00:34:59.880
So let's just talk about what's
actually on the list.

00:34:59.880 --> 00:35:04.130
JOE BEDA: Well, one thing that
we have talked about,

00:35:04.130 --> 00:35:05.620
specifically--

00:35:05.620 --> 00:35:07.672
and we talked about it in I/O.
And I saw that there was

00:35:07.672 --> 00:35:11.970
another question on
the question page.

00:35:11.970 --> 00:35:14.710
I don't have that link
handy, though.

00:35:14.710 --> 00:35:17.520
We are working actively
on disk snapshots.

00:35:17.520 --> 00:35:18.370
We think that's a really

00:35:18.370 --> 00:35:20.190
important part of the platform.

00:35:20.190 --> 00:35:23.550
And so that's something that
we're really looking at.

00:35:23.550 --> 00:35:27.630
Beyond that, you're putting
me in a tough

00:35:27.630 --> 00:35:28.880
position here, dude.

00:35:32.510 --> 00:35:35.290
I mean, one of the things is
that Google is investing

00:35:35.290 --> 00:35:37.610
heavily in the cloud platform
as a whole.

00:35:37.610 --> 00:35:40.340
And so there's a lot of stuff
starting up, and we're putting

00:35:40.340 --> 00:35:42.370
a lot of effort into
this stuff.

00:35:42.370 --> 00:35:44.580
Predicting the timelines of
how this stuff is going to

00:35:44.580 --> 00:35:46.950
come together is really,
really difficult.

00:35:46.950 --> 00:35:50.460
And it's a matter of sort of
how fast can we grow and

00:35:50.460 --> 00:35:52.900
sustainably grow
our footprint.

00:35:52.900 --> 00:35:55.520
So there's a certain amount of
integrating under the curve in

00:35:55.520 --> 00:35:59.150
terms of growth and how much
work we can get done that's

00:35:59.150 --> 00:36:00.670
really difficult to predict.

00:36:00.670 --> 00:36:01.500
And especially--

00:36:01.500 --> 00:36:03.140
BENJAMIN: I'm not meaning
to give you a hard time.

00:36:03.140 --> 00:36:07.250
I'm a big fan of GCE, and I
understand that there are all

00:36:07.250 --> 00:36:09.770
sorts of variables that
go into this.

00:36:09.770 --> 00:36:11.930
But I'm looking at this
as not a marketing

00:36:11.930 --> 00:36:12.840
sort of call, right?

00:36:12.840 --> 00:36:15.440
We've got people on here
who build things.

00:36:15.440 --> 00:36:19.370
And I'm not trying to get anyone
to commit to any sort

00:36:19.370 --> 00:36:20.445
of timeline at all.

00:36:20.445 --> 00:36:22.340
I mean you can leave
dates out entirely.

00:36:22.340 --> 00:36:25.730
I'm interested in the list of
things that you guys think are

00:36:25.730 --> 00:36:28.100
most important to get done.

00:36:28.100 --> 00:36:29.750
Regardless of dates,
what are the most

00:36:29.750 --> 00:36:32.210
important things to you?

00:36:32.210 --> 00:36:33.855
JOE BEDA: Let me circle around
with our product management

00:36:33.855 --> 00:36:37.060
team and see if we can
put it together.

00:36:37.060 --> 00:36:39.000
I think it's a good point.

00:36:39.000 --> 00:36:40.790
It's a good point.

00:36:40.790 --> 00:36:43.810
I think I would probably catch
some flack if I listed sort of

00:36:43.810 --> 00:36:45.740
the list of things that we're
working on right now.

00:36:45.740 --> 00:36:47.980
Just because some of those are
going to bear fruit, and

00:36:47.980 --> 00:36:49.080
there's going to be some
change of directions

00:36:49.080 --> 00:36:50.260
and stuff like that.

00:36:50.260 --> 00:36:53.930
But I would love to be able to
share some of those details

00:36:53.930 --> 00:36:54.570
externally.

00:36:54.570 --> 00:36:57.670
So let me get together with the
product management team

00:36:57.670 --> 00:37:02.310
and see what we can do in terms
of getting together not

00:37:02.310 --> 00:37:06.230
a timeline but at least a sort
of a rough sketch of where

00:37:06.230 --> 00:37:07.410
we're taking things.

00:37:07.410 --> 00:37:09.233
BENJAMIN: I'm interested
in your priorities.

00:37:09.233 --> 00:37:10.770
What matters most to you?

00:37:13.860 --> 00:37:15.723
JOE BEDA: I'm getting an IM
suggestion that we just talk

00:37:15.723 --> 00:37:19.150
about the space laser
integration.

00:37:19.150 --> 00:37:21.610
MARC COHEN: Actually, I wanted
to interject something.

00:37:21.610 --> 00:37:26.110
And this may seem like I'm doing
sleight of hand, but I

00:37:26.110 --> 00:37:28.830
actually feel very sincere
about this.

00:37:28.830 --> 00:37:33.400
What we do and what we
prioritize is a function of

00:37:33.400 --> 00:37:35.420
what our customers ask for.

00:37:35.420 --> 00:37:36.740
And so I'm going to
turn your question

00:37:36.740 --> 00:37:37.580
around on you, Benjamin.

00:37:37.580 --> 00:37:41.190
And I'm going to ask
you, what are the--

00:37:41.190 --> 00:37:43.450
three or five or however
many you want to name--

00:37:43.450 --> 00:37:46.560
most important things you think
we should be focusing on

00:37:46.560 --> 00:37:52.020
over the next six to 12
months for your needs?

00:37:52.020 --> 00:37:53.840
BENJAMIN: Essentially, the list
that I'm asking is the

00:37:53.840 --> 00:37:55.190
list that is most
important to me.

00:37:55.190 --> 00:37:56.220
So it's DNS.

00:37:56.220 --> 00:37:58.320
It's CDN.

00:37:58.320 --> 00:38:01.820
It's much more sophisticated
networking.

00:38:01.820 --> 00:38:04.640
The networking underneath what
you're providing is far more

00:38:04.640 --> 00:38:07.970
interesting than what's going
to make [INAUDIBLE].

00:38:07.970 --> 00:38:09.480
MARC COHEN: Can you say
more about that?

00:38:09.480 --> 00:38:12.305
When you say more sophisticated
networking, what

00:38:12.305 --> 00:38:13.030
do you mean?

00:38:13.030 --> 00:38:16.640
BENJAMIN: I mean a variety
of things.

00:38:16.640 --> 00:38:19.850
I want to be able to define
multiple different subnets and

00:38:19.850 --> 00:38:21.990
[INAUDIBLE] policies for moving
between them and then

00:38:21.990 --> 00:38:25.370
just put things in them and
not worry about say access

00:38:25.370 --> 00:38:28.690
lists, which are very crude.

00:38:28.690 --> 00:38:33.650
I want to be able to connect
my own infrastructure with

00:38:33.650 --> 00:38:37.110
yours over that, without having
a lot of constraints on

00:38:37.110 --> 00:38:38.163
what that means.

00:38:38.163 --> 00:38:41.560
MARC COHEN: Like an Enterprise
VPN type configuration?

00:38:41.560 --> 00:38:42.810
MALE SPEAKER: Exactly.

00:38:44.610 --> 00:38:49.770
BENJAMIN: And I'm very
interested in both Windows and

00:38:49.770 --> 00:38:57.610
Solaris, in many ways more than
Linux but at least as

00:38:57.610 --> 00:38:59.278
much as Linux.

00:38:59.278 --> 00:39:04.420
MARC COHEN: How about other
people on the call?

00:39:04.420 --> 00:39:07.300
Ryan or John?

00:39:07.300 --> 00:39:08.500
Yuri?

00:39:08.500 --> 00:39:11.670
What would you guys say would
be the three most important

00:39:11.670 --> 00:39:13.310
things you think we
could add to the

00:39:13.310 --> 00:39:15.090
product in the near term?

00:39:18.212 --> 00:39:19.462
I'm putting you on the spot.

00:39:22.590 --> 00:39:24.420
BENJAMIN: Let me throw in one
more before they start, which

00:39:24.420 --> 00:39:25.670
is monitoring.

00:39:27.680 --> 00:39:30.440
Your internal infrastructure
for monitoring is

00:39:30.440 --> 00:39:31.220
unbelievable.

00:39:31.220 --> 00:39:35.170
And I think a lot of people
would benefit from at least

00:39:35.170 --> 00:39:36.740
the thinking if not the
tools themselves.

00:39:40.970 --> 00:39:43.520
JOE BEDA: Our internal
infrastructure for monitoring

00:39:43.520 --> 00:39:45.300
is awesome.

00:39:45.300 --> 00:39:47.985
It's also probably one of the
most difficult things to

00:39:47.985 --> 00:39:51.690
actually configure and use
at Google internally.

00:39:51.690 --> 00:39:53.830
I don't think I'm giving
too much away by

00:39:53.830 --> 00:39:56.530
talking about that.

00:39:56.530 --> 00:40:00.810
And so finding a way to make the
easy things easy and the

00:40:00.810 --> 00:40:04.040
hard things possible applies
doubly, I think, on the

00:40:04.040 --> 00:40:05.260
monitoring side of things.

00:40:05.260 --> 00:40:08.610
So it's something that I've
been thinking about.

00:40:08.610 --> 00:40:12.040
I can't make any promises, but
it's definitely something that

00:40:12.040 --> 00:40:15.124
we've been thinking about
and talking about.

00:40:15.124 --> 00:40:16.980
MARC COHEN: Other input
from anybody?

00:40:21.020 --> 00:40:25.540
JOHN: It's not really top on
my list, but having another

00:40:25.540 --> 00:40:31.480
Windows servers instances
available could be beneficial.

00:40:34.150 --> 00:40:36.800
I don't prefer to use them,
but there's some cases--

00:40:36.800 --> 00:40:37.480
MARC COHEN: Where
you need them?

00:40:37.480 --> 00:40:40.470
JOHN: --where I fire them up.

00:40:40.470 --> 00:40:43.420
MARC COHEN: Does anybody have
any experience with

00:40:43.420 --> 00:40:45.930
frustrations--

00:40:45.930 --> 00:40:48.980
not something that we haven't
implemented per se but

00:40:48.980 --> 00:40:50.760
something that we have
implemented, and you either

00:40:50.760 --> 00:40:53.000
think it's wrong, it's not
working the way you want, or

00:40:53.000 --> 00:40:54.650
it's hard to understand
how to use it?

00:40:54.650 --> 00:40:56.080
Anything along those lines?

00:40:56.080 --> 00:40:58.315
Pain points.

00:40:58.315 --> 00:41:02.670
MALE SPEAKER: The limit of
16 drives per instance is

00:41:02.670 --> 00:41:04.090
[INAUDIBLE].

00:41:04.090 --> 00:41:06.870
MARC COHEN: 16 drive per
instance limitation?

00:41:06.870 --> 00:41:08.000
MALE SPEAKER: Yes.

00:41:08.000 --> 00:41:10.170
MARC COHEN: How many
would you like?

00:41:10.170 --> 00:41:12.080
I know unlimited is
a great answer.

00:41:14.910 --> 00:41:15.870
MALE SPEAKER: Quadruple them.

00:41:15.870 --> 00:41:17.450
64.

00:41:17.450 --> 00:41:18.480
MARC COHEN: OK.

00:41:18.480 --> 00:41:20.550
JOE BEDA: Let me talk about
the disk stuff real quick.

00:41:23.140 --> 00:41:27.310
So one of the things that we
definitely want to be adding

00:41:27.310 --> 00:41:29.420
and we know is missing
in the product--

00:41:29.420 --> 00:41:32.190
there's a lot of places where
things that should be dynamic

00:41:32.190 --> 00:41:32.860
aren't dynamic.

00:41:32.860 --> 00:41:36.030
And those are some of the rough
edges that we're going

00:41:36.030 --> 00:41:37.990
to be working hard to fix.

00:41:37.990 --> 00:41:42.835
So an example is mounting and
unmounting disks dynamically,

00:41:42.835 --> 00:41:43.980
sort of hotplug of disks.

00:41:43.980 --> 00:41:49.300
And as part of that, we are
planning on switching the disk

00:41:49.300 --> 00:41:52.310
implementation, the driver
model, for the virtual machine

00:41:52.310 --> 00:41:56.790
from virtio block to
virtio [INAUDIBLE].

00:41:56.790 --> 00:41:59.430
And that lets us utilize a whole
bunch of the hotplug

00:41:59.430 --> 00:42:02.050
infrastructure that's built
into the Linux kernel and

00:42:02.050 --> 00:42:06.800
everything else to actually be
able to sort of remove locked

00:42:06.800 --> 00:42:08.960
devices dynamically.

00:42:08.960 --> 00:42:11.780
And so it takes a while to build
some of that stuff out.

00:42:15.910 --> 00:42:18.030
I think that might be one of
the other things that's

00:42:18.030 --> 00:42:22.700
preventing us from mounting
more than 16 disks.

00:42:22.700 --> 00:42:26.000
It's good to know that it's a
good future request to be able

00:42:26.000 --> 00:42:28.460
to mount more than the 16.

00:42:28.460 --> 00:42:33.410
We're also working to make the
hard limit on the amount of

00:42:33.410 --> 00:42:36.110
persistent disks that
you can attach be

00:42:36.110 --> 00:42:38.940
more of a soft limit.

00:42:38.940 --> 00:42:42.060
There is a certain amount of
memory overhead associated

00:42:42.060 --> 00:42:44.740
with our disk implementation
that caps the amount

00:42:44.740 --> 00:42:47.280
that you can mount.

00:42:47.280 --> 00:42:49.160
So that's why that
limit is there.

00:42:49.160 --> 00:42:55.590
And making it so that if your
hot section of the disk is

00:42:55.590 --> 00:42:58.120
within a certain size, to see
the best performance for

00:42:58.120 --> 00:43:01.660
things actually scaled out past
that is another thing

00:43:01.660 --> 00:43:04.740
that we know we need
to be attacking.

00:43:04.740 --> 00:43:07.200
There's a couple of more near
term, concrete things.

00:43:07.200 --> 00:43:09.870
Not big features, not big extra
services, but for the

00:43:09.870 --> 00:43:15.397
rough edges that we know we
have to keep working on.

00:43:15.397 --> 00:43:16.647
MARC COHEN: Any other
pain points?

00:43:19.410 --> 00:43:21.262
It's your opportunity to--

00:43:21.262 --> 00:43:23.667
JOHN: I have a question.

00:43:23.667 --> 00:43:27.570
For doing something like
parallel SSHing, if I ever

00:43:27.570 --> 00:43:33.820
wanted to send a command to a
whole bunch of instances, is

00:43:33.820 --> 00:43:36.480
there a way to do that
with gcutil ssh?

00:43:39.810 --> 00:43:43.980
Right now I just iterate it
through them on a shell script

00:43:43.980 --> 00:43:46.938
and [? bin ?] it to send
something to them.

00:43:46.938 --> 00:43:47.886
Is there any--

00:43:47.886 --> 00:43:50.710
MARC COHEN: You're doing
a command rather than

00:43:50.710 --> 00:43:51.770
interactive log in.

00:43:51.770 --> 00:43:53.460
You could throw your--

00:43:53.460 --> 00:43:56.320
I suppose you could throw your
SSHs into the background,

00:43:56.320 --> 00:43:58.060
although I haven't actually
tried that.

00:43:58.060 --> 00:44:00.850
And you might run into
a limit if you do too

00:44:00.850 --> 00:44:02.820
many at the same time.

00:44:02.820 --> 00:44:07.160
I'm not aware of any built in
parallelism in gcutil for

00:44:07.160 --> 00:44:08.140
SSHing commands.

00:44:08.140 --> 00:44:09.820
Do you know of anything
in that space,

00:44:09.820 --> 00:44:11.550
Joe, or anybody else?

00:44:11.550 --> 00:44:12.770
JOE BEDA: I think, no--

00:44:12.770 --> 00:44:14.580
I mean that's not supported
in gcutil.

00:44:14.580 --> 00:44:18.210
I think that there's a
temptation to keep adding

00:44:18.210 --> 00:44:23.600
features onto gcutil to take
on more and more of what I

00:44:23.600 --> 00:44:26.080
call orchestration, keeping
track of lots of VMs, what

00:44:26.080 --> 00:44:30.350
they're doing, and what's
going on inside them.

00:44:30.350 --> 00:44:35.230
And one of the philosophies
behind Compute Engine and

00:44:35.230 --> 00:44:38.460
really Google's infrastructure
as a whole is that we want to

00:44:38.460 --> 00:44:40.650
leverage what's existing
out there.

00:44:40.650 --> 00:44:43.550
And we don't want to be the
end-all, be-all solution for

00:44:43.550 --> 00:44:44.430
everything.

00:44:44.430 --> 00:44:47.970
And so we don't want to build
a poor man's version of

00:44:47.970 --> 00:44:51.250
something like Chef or Puppet
or Fabric or Capistrano, or

00:44:51.250 --> 00:44:53.830
all these other systems that
people built and used

00:44:53.830 --> 00:44:55.170
and get used to.

00:44:55.170 --> 00:45:01.000
And so I think that we'd be
much more interested in

00:45:01.000 --> 00:45:04.820
getting the core libraries out
there, across a bunch of

00:45:04.820 --> 00:45:07.270
languages, so that these
systems can be built to

00:45:07.270 --> 00:45:09.760
integrate with Compute Engine.

00:45:09.760 --> 00:45:12.460
And then instead of using
gcutil, we say, hey go use

00:45:12.460 --> 00:45:14.660
this other great thing that's
actually out there in the open

00:45:14.660 --> 00:45:19.290
source world and has a
community behind it.

00:45:19.290 --> 00:45:24.760
And so I think I could
probably name like 30

00:45:24.760 --> 00:45:27.450
different features that I would
add to gcutil, and this

00:45:27.450 --> 00:45:28.806
would be one of them.

00:45:28.806 --> 00:45:32.650
But we're trying to be careful
not to take on too much there

00:45:32.650 --> 00:45:36.380
and sort of confuse the space,
and find the right way to slip

00:45:36.380 --> 00:45:38.720
the clutch into something that's
really more feature

00:45:38.720 --> 00:45:41.600
full than anything that
a simple command line

00:45:41.600 --> 00:45:42.580
utility would be.

00:45:42.580 --> 00:45:45.870
As part of that, though, we are
working very, very hard on

00:45:45.870 --> 00:45:48.480
improving the quality and easy
use of the libraries.

00:45:48.480 --> 00:45:51.520
And so a bunch of that work
you can see early on with

00:45:51.520 --> 00:45:57.790
gcutil, which was an engineer
here in Seattle working to

00:45:57.790 --> 00:46:01.810
build a much better Python
library for interacting with

00:46:01.810 --> 00:46:04.310
the Compute Engine API.

00:46:04.310 --> 00:46:06.820
And we're taking a lot of those
ideas, in terms of what

00:46:06.820 --> 00:46:11.860
he did to make that thing be
a lot more usable than the

00:46:11.860 --> 00:46:17.250
lowest common denominator API
libraries that we have, and

00:46:17.250 --> 00:46:19.880
extend those ideas both across
languages and across other

00:46:19.880 --> 00:46:20.820
APIs at Google.

00:46:20.820 --> 00:46:25.050
And so that hopefully will
enable not necessarily gcutil

00:46:25.050 --> 00:46:29.060
to do stuff like parallel SSH,
but enable other tools in the

00:46:29.060 --> 00:46:34.021
community to start driving
gcutil directly.

00:46:34.021 --> 00:46:35.890
MARC COHEN: OK.

00:46:35.890 --> 00:46:37.160
Thanks, Joe.

00:46:37.160 --> 00:46:41.050
I'm just looking to see if we
have any other questions on

00:46:41.050 --> 00:46:43.340
the moderator.

00:46:43.340 --> 00:46:45.520
Someone asked, "Are
different MySQL

00:46:45.520 --> 00:46:48.100
engines actually supported?

00:46:48.100 --> 00:46:54.890
Which ones?" And my answer to
that would be you have a

00:46:54.890 --> 00:46:57.400
completely open ended
virtual machine.

00:46:57.400 --> 00:47:02.510
And you're free to install and
run any database management

00:47:02.510 --> 00:47:08.350
system you like that's supported
for that particular

00:47:08.350 --> 00:47:09.660
operating system.

00:47:09.660 --> 00:47:10.840
JOE BEDA: I think this
person might be

00:47:10.840 --> 00:47:12.410
asking about Cloud SQL.

00:47:12.410 --> 00:47:15.240
MARC COHEN: Yeah, I was
wondering that too because for

00:47:15.240 --> 00:47:18.800
some reason there are a couple
Cloud SQL questions.

00:47:18.800 --> 00:47:19.751
Is a free [INAUDIBLE]

00:47:19.751 --> 00:47:20.693
Cloud SQL--

00:47:20.693 --> 00:47:24.810
AMY UNRUH: We did have a Cloud
SQL Hangout on Monday.

00:47:24.810 --> 00:47:28.991
And I'm wondering if that isn't
carry over from that.

00:47:28.991 --> 00:47:32.570
Those topics might have been
covered in that Hangout, which

00:47:32.570 --> 00:47:37.320
should be posted online, in case
the question askers are

00:47:37.320 --> 00:47:39.690
watching this broadcast.

00:47:39.690 --> 00:47:40.240
MARC COHEN: OK.

00:47:40.240 --> 00:47:42.745
So that's probably a question
for a different session.

00:47:45.700 --> 00:47:48.930
Just scanning these, I think
we've covered most of them.

00:47:48.930 --> 00:47:53.170
There's a Google
Drive question.

00:47:53.170 --> 00:47:54.120
And let's see.

00:47:54.120 --> 00:47:57.950
There is one more here that's
relevant, but I think it's in

00:47:57.950 --> 00:47:59.890
the same category that we've
been talking about.

00:47:59.890 --> 00:48:04.350
It's asking when snapshots will
be available, time frame

00:48:04.350 --> 00:48:07.120
for disk snapshot functionality,
something we've

00:48:07.120 --> 00:48:10.440
heard from other customers.

00:48:10.440 --> 00:48:13.780
And we can't say anything about
a specific time frame

00:48:13.780 --> 00:48:17.400
for it, but we hear the
need loud and clear.

00:48:17.400 --> 00:48:19.940
JOE BEDA: And that one's a
little bit special because

00:48:19.940 --> 00:48:21.530
it's actually in our
API right now.

00:48:21.530 --> 00:48:24.630
And so if you look at the API, I
think you'll see some of the

00:48:24.630 --> 00:48:26.620
support for snapshots there.

00:48:26.620 --> 00:48:29.310
So you need to know the
shape of what it's

00:48:29.310 --> 00:48:31.050
going to look like.

00:48:31.050 --> 00:48:33.660
And then the sooner we
can get that out

00:48:33.660 --> 00:48:35.170
there, the better obviously.

00:48:35.170 --> 00:48:36.420
That's how I feel about
all these things.

00:48:39.940 --> 00:48:40.950
MARC COHEN: Other questions?

00:48:40.950 --> 00:48:43.000
I think we've gotten through
the moderator stuff.

00:48:43.000 --> 00:48:44.250
Other live questions?

00:48:47.340 --> 00:48:48.400
Going once.

00:48:48.400 --> 00:48:52.330
JOHN: I had something, but I
can't remember what it was.

00:48:52.330 --> 00:48:55.670
MARC COHEN: Other points
of feedback?

00:48:55.670 --> 00:48:57.710
Things you'd like
us to be doing?

00:48:57.710 --> 00:49:00.150
Things you'd like us
to stop doing?

00:49:00.150 --> 00:49:03.500
KATHRYN HURLEY: Things
that we just like.

00:49:03.500 --> 00:49:06.020
MARC COHEN: I am planning to
distribute a little survey to

00:49:06.020 --> 00:49:09.060
the mailing list, so you'll
have another opportunity.

00:49:09.060 --> 00:49:11.410
I know it's hard sometimes
when you have to

00:49:11.410 --> 00:49:12.090
think on your feet.

00:49:12.090 --> 00:49:14.430
But we've already gotten a lot
of good feedback from you

00:49:14.430 --> 00:49:15.780
guys, so I really
appreciate that.

00:49:15.780 --> 00:49:20.340
And we'll be sending out a
survey, as I said, to give you

00:49:20.340 --> 00:49:22.750
a chance to give additional
thoughts.

00:49:22.750 --> 00:49:26.700
The other thing I wanted to
mention is that we'd like to

00:49:26.700 --> 00:49:28.910
kind of do this somewhat
regularly.

00:49:28.910 --> 00:49:32.520
I'm not sure exactly what the
interval will be, maybe every

00:49:32.520 --> 00:49:34.320
two weeks or something
on that order.

00:49:34.320 --> 00:49:38.500
But I think this sort of--

00:49:38.500 --> 00:49:39.500
to me, at least--

00:49:39.500 --> 00:49:43.320
seems to work well, where we do
a little tech topic for 20

00:49:43.320 --> 00:49:45.700
minutes or 30 minutes
at the most, and

00:49:45.700 --> 00:49:46.790
then we have a dialogue.

00:49:46.790 --> 00:49:50.690
And so if you have ideas
specifically about things

00:49:50.690 --> 00:49:53.210
you'd like to know more about,
or things you'd like to drill

00:49:53.210 --> 00:49:56.290
down into, please
send us mail.

00:49:56.290 --> 00:50:00.610
Either gcteam@google.com or gc
discussion, or you can also

00:50:00.610 --> 00:50:02.100
hit my email address directly.

00:50:02.100 --> 00:50:06.810
It's marccohen, with no space or
anything, M-A-R-C-C-O-H-E-N

00:50:06.810 --> 00:50:08.170
at google dot com.

00:50:08.170 --> 00:50:11.880
And give us your ideas, and
we'll come up with some topics

00:50:11.880 --> 00:50:14.910
to cover in future Hangouts.

00:50:14.910 --> 00:50:17.880
Any other questions or comments
that anybody wants to

00:50:17.880 --> 00:50:19.130
raise before we finish up?

00:50:19.130 --> 00:50:22.180
We have a few minutes
left if you do.

00:50:22.180 --> 00:50:24.500
JOHN: Something we were talking
about before the call

00:50:24.500 --> 00:50:34.270
is to have recipes of the
start-up scripts, have a

00:50:34.270 --> 00:50:35.210
little deposit.

00:50:35.210 --> 00:50:39.460
You said, oh I've done that
thing a million times, as far

00:50:39.460 --> 00:50:43.440
as using the metadata
to fill in parts of

00:50:43.440 --> 00:50:45.552
your start-up scripts.

00:50:45.552 --> 00:50:47.430
MARC COHEN: Yeah, that's
a great idea.

00:50:47.430 --> 00:50:52.920
And I think that's an
area where we can

00:50:52.920 --> 00:50:54.870
collaborate with you guys.

00:50:54.870 --> 00:50:58.460
We can have a repository where
we open it up to let--

00:50:58.460 --> 00:51:01.340
the users, the customers,
the developers--

00:51:01.340 --> 00:51:06.440
everybody involved can
contribute things to make a

00:51:06.440 --> 00:51:07.770
better product for everybody.

00:51:07.770 --> 00:51:12.000
And so we do have a repository
we've started internally for

00:51:12.000 --> 00:51:14.440
capturing mostly sample
applications.

00:51:14.440 --> 00:51:16.340
But I think we can probably
expand that.

00:51:16.340 --> 00:51:18.300
I haven't completely thought
this through, but we could

00:51:18.300 --> 00:51:22.890
probably expand the scope of
that to include tools and

00:51:22.890 --> 00:51:25.110
utilities that people
find useful.

00:51:25.110 --> 00:51:28.730
And the sample repo that I'm
referring to is already open

00:51:28.730 --> 00:51:31.630
source, so it's something we
can share freely with the

00:51:31.630 --> 00:51:32.270
outside world.

00:51:32.270 --> 00:51:35.850
And so we'll try to do something
in that space, and

00:51:35.850 --> 00:51:39.630
let you guys know through the
mailing list when we have

00:51:39.630 --> 00:51:42.260
something in that area.

00:51:42.260 --> 00:51:44.250
JOE BEDA: And John, I know
that you specifically

00:51:44.250 --> 00:51:46.620
mentioned Hadoop as one of
the things that you are

00:51:46.620 --> 00:51:47.870
[INAUDIBLE] about.

00:51:47.870 --> 00:51:51.745
Hopefully very soon, as soon
as we can get one last sign

00:51:51.745 --> 00:51:55.640
off, we can share the code
behind the Hadoop sample that

00:51:55.640 --> 00:51:57.555
I showed at my Google
I/O talk.

00:51:57.555 --> 00:52:01.320
That was written by
an intern that's--

00:52:01.320 --> 00:52:03.370
this week's his last week.

00:52:03.370 --> 00:52:05.410
I was really hoping to get it
out before he took off.

00:52:05.410 --> 00:52:07.670
But if not, soon afterwards,
and we can

00:52:07.670 --> 00:52:09.510
share that with you.

00:52:09.510 --> 00:52:14.020
So that'll be a more full
fledged sample application of

00:52:14.020 --> 00:52:17.280
driving the API dynamically to
do something like [? run off a

00:52:17.280 --> 00:52:18.720
Hadoop platform. ?]

00:52:18.720 --> 00:52:18.800
JOHN: Great.

00:52:18.800 --> 00:52:21.780
That would be awesome.

00:52:21.780 --> 00:52:23.030
MARC COHEN: Any other questions
or comments?

00:52:27.460 --> 00:52:30.740
Well thank you all very much for
participating, and we'll

00:52:30.740 --> 00:52:33.090
try to do this again
sometime soon.

00:52:33.090 --> 00:52:35.280
JOE BEDA: Thank you.

00:52:35.280 --> 00:52:36.050
JOHN: Thank you.

00:52:36.050 --> 00:52:37.300
MALE SPEAKER: Many,
many thanks.

