WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.768
[MUSIC PLAYING]

00:00:02.894 --> 00:00:04.310
MALE SPEAKER: Oven
mitts for sale.

00:00:04.310 --> 00:00:05.680
Oven mitts.

00:00:05.680 --> 00:00:07.430
Oven mitts for sale.

00:00:07.430 --> 00:00:07.930
Oven mitts.

00:00:07.930 --> 00:00:08.340
TODD KERPELMAN: Oh.

00:00:08.340 --> 00:00:09.420
Why, hello there, sir.

00:00:09.420 --> 00:00:10.510
I could use an oven mitt.

00:00:10.510 --> 00:00:12.399
In fact, I'll take two.

00:00:12.399 --> 00:00:13.690
MALE SPEAKER: Here you go, kid.

00:00:13.690 --> 00:00:14.370
Enjoy.

00:00:14.370 --> 00:00:15.230
TODD KERPELMAN: All right.

00:00:15.230 --> 00:00:15.730
Thank you.

00:00:15.730 --> 00:00:16.870
This is just what I needed.

00:00:16.870 --> 00:00:18.842
This is-- huh.

00:00:18.842 --> 00:00:21.002
Hey, what's up with this?

00:00:21.002 --> 00:00:21.710
MALE SPEAKER: Oh.

00:00:21.710 --> 00:00:23.520
That's my invention, see.

00:00:23.520 --> 00:00:26.270
Classic oven mitts,
they're big and clumsy.

00:00:26.270 --> 00:00:28.284
So I cut out windows
in the mitts.

00:00:28.284 --> 00:00:29.700
That way, you can
use your fingers

00:00:29.700 --> 00:00:31.230
while you're still
using the mitts.

00:00:31.230 --> 00:00:33.140
Great idea, huh?

00:00:33.140 --> 00:00:33.980
TODD KERPELMAN: Wow.

00:00:33.980 --> 00:00:37.330
This seems incredibly dangerous.

00:00:37.330 --> 00:00:38.710
Have you tried this yourself?

00:00:38.710 --> 00:00:39.668
MALE SPEAKER: Well, no.

00:00:39.668 --> 00:00:40.760
I'm not much of a cook.

00:00:40.760 --> 00:00:43.100
I'm more of what you call
an oven mitt builder.

00:00:43.100 --> 00:00:45.340
Anyway, enjoy the oven mitts.

00:00:45.340 --> 00:00:47.020
Oven mitts for sale.

00:00:47.020 --> 00:00:48.210
Oven mitts.

00:00:48.210 --> 00:00:49.830
Oven mitts for sale.

00:00:49.830 --> 00:00:50.850
Oven mitts.

00:00:50.850 --> 00:00:52.987
Oven mitts for sale.

00:00:52.987 --> 00:00:53.820
TODD KERPELMAN: Huh.

00:00:53.820 --> 00:00:55.820
So maybe there's a lesson here.

00:00:55.820 --> 00:00:57.930
If you spend all your
time building tools

00:00:57.930 --> 00:00:59.920
and don't actually use
them once in awhile,

00:00:59.920 --> 00:01:02.140
you can't really be
sure they're any good.

00:01:02.140 --> 00:01:04.086
I'm just going to put
these down over here.

00:01:04.086 --> 00:01:06.460
See, we at Google don't want
to end up like our oven mitt

00:01:06.460 --> 00:01:08.960
selling friend, and that,
in a roundabout way,

00:01:08.960 --> 00:01:11.340
explains why we released
a game about pie throwing

00:01:11.340 --> 00:01:12.625
to the Google Play Store.

00:01:12.625 --> 00:01:14.250
Now, if you haven't
checked it out yet,

00:01:14.250 --> 00:01:16.192
"Pie Noon" is a fast
paced action game

00:01:16.192 --> 00:01:18.650
where you square off against
your friends in a pie throwing

00:01:18.650 --> 00:01:19.620
showdown.

00:01:19.620 --> 00:01:21.750
It's built by our Fund
Propulsion Lab's team,

00:01:21.750 --> 00:01:24.390
the same folks behind such
hits as the LiquidFun physics

00:01:24.390 --> 00:01:25.140
engine.

00:01:25.140 --> 00:01:26.980
But it does raise some
important questions,

00:01:26.980 --> 00:01:28.910
like why is Google making games?

00:01:28.910 --> 00:01:30.490
Are we starting a game studio?

00:01:30.490 --> 00:01:31.580
What's up with that?

00:01:31.580 --> 00:01:32.200
Well, no.

00:01:32.200 --> 00:01:34.384
For starters, the monetization
model is terrible.

00:01:34.384 --> 00:01:35.050
I mean, come on.

00:01:35.050 --> 00:01:36.880
Where are the micro
transactions folks?

00:01:36.880 --> 00:01:37.380
No.

00:01:37.380 --> 00:01:39.713
We really made "Pie Noon"
because we've been making some

00:01:39.713 --> 00:01:41.692
great new tools for
C++ game developers,

00:01:41.692 --> 00:01:43.900
but we figured maybe it's
time we put our money where

00:01:43.900 --> 00:01:46.000
our mouth is-- when
it's not full of pie--

00:01:46.000 --> 00:01:48.390
and demonstrate using some of
these tools in a full blown

00:01:48.390 --> 00:01:49.062
game.

00:01:49.062 --> 00:01:50.520
Then we can open
source the project

00:01:50.520 --> 00:01:52.210
and let you see how
we did everything.

00:01:52.210 --> 00:01:55.940
So let's go over some of this
tech we used one at a time.

00:01:55.940 --> 00:01:57.546
First up, WebP.

00:01:57.546 --> 00:01:59.170
WebP is a new graphical
format designed

00:01:59.170 --> 00:02:02.170
to keep your image file sizes
tiny without sacrificing

00:02:02.170 --> 00:02:02.960
quality.

00:02:02.960 --> 00:02:05.260
Now, some people mistakenly
think that WebP is just

00:02:05.260 --> 00:02:06.710
for web pages.

00:02:06.710 --> 00:02:08.979
Maybe it's the word web
right there in the name.

00:02:08.979 --> 00:02:09.789
But it's not.

00:02:09.789 --> 00:02:11.880
You can use it in
mobile apps as well.

00:02:11.880 --> 00:02:15.080
WebP supports lossy and
lossless compression

00:02:15.080 --> 00:02:17.720
with lossless alpha channel
support in both cases,

00:02:17.720 --> 00:02:19.880
and it will give you
considerable size improvements

00:02:19.880 --> 00:02:22.680
over both JPEG and PNG files.

00:02:22.680 --> 00:02:24.310
Remember, graphic
assets can often

00:02:24.310 --> 00:02:26.930
be the single largest
component of your game,

00:02:26.930 --> 00:02:29.860
and not everybody is downloading
your game over 4G networks

00:02:29.860 --> 00:02:31.750
onto 32 gig devices.

00:02:31.750 --> 00:02:33.860
For many people,
bandwidth and file sizes

00:02:33.860 --> 00:02:37.310
are still real concerns, and the
smaller you can make your game,

00:02:37.310 --> 00:02:39.930
the more likely people
are to install and keep it

00:02:39.930 --> 00:02:41.449
on their device.

00:02:41.449 --> 00:02:43.490
For "Pie Noon," our
engineers started with target

00:02:43.490 --> 00:02:46.040
files, converted
those to PNG assets,

00:02:46.040 --> 00:02:48.430
and then converted
those to WebP format.

00:02:48.430 --> 00:02:49.930
It was these
converted files that

00:02:49.930 --> 00:02:52.620
got used as the final
assets in the game.

00:02:52.620 --> 00:02:53.770
And how'd it turn out?

00:02:53.770 --> 00:02:59.240
What started as, woo, 42 meg
of [? TGAs ?] became 10.7 meg

00:02:59.240 --> 00:03:04.377
of PNGs and ended up as a
nice, slim 1.4 meg of WebPs.

00:03:04.377 --> 00:03:06.460
In case you're curious,
we went for lossy textures

00:03:06.460 --> 00:03:08.360
with a quality
rating of 90, which

00:03:08.360 --> 00:03:10.695
gave us a good balance
between size and quality.

00:03:10.695 --> 00:03:12.570
You can judge the visual
quality for yourself

00:03:12.570 --> 00:03:14.980
in the game or just experiment
with our conversion tool

00:03:14.980 --> 00:03:17.650
and see what option
looks best for you.

00:03:17.650 --> 00:03:19.780
Now granted, you can still
take this a step further

00:03:19.780 --> 00:03:22.910
and export everything using
GPU optimize textures, which

00:03:22.910 --> 00:03:24.780
we still highly recommend.

00:03:24.780 --> 00:03:26.359
But I know some
developers don't want

00:03:26.359 --> 00:03:28.900
to deal with multiple texture
formats for different chipsets,

00:03:28.900 --> 00:03:32.170
and for those people, WebP
is a great alternative.

00:03:32.170 --> 00:03:33.960
Next, up let's
talk about MathFu.

00:03:33.960 --> 00:03:37.520
MathFu is a cross platform C++
library designed to quickly

00:03:37.520 --> 00:03:40.240
and easily perform common
mathematical tasks that game

00:03:40.240 --> 00:03:41.330
developers encounter.

00:03:41.330 --> 00:03:43.330
So if you've got matrices
that need multiplying,

00:03:43.330 --> 00:03:45.890
or quaternions that need
slurping, or just need

00:03:45.890 --> 00:03:49.400
a randomly generated vector,
MathFu could help you out.

00:03:49.400 --> 00:03:52.440
Now granted, there are many math
libraries out there like this.

00:03:52.440 --> 00:03:54.890
But what differentiates MathFu
from any of these others

00:03:54.890 --> 00:03:56.600
is twofold.

00:03:56.600 --> 00:03:58.780
First, it's optimized
for SIMD chips,

00:03:58.780 --> 00:04:01.400
like the one that is probably
in your phone right now.

00:04:01.400 --> 00:04:02.780
And this is pretty significant.

00:04:02.780 --> 00:04:05.920
On a Nexus 5, you're looking
at about a 5x speedup

00:04:05.920 --> 00:04:08.190
just by using the
SIMD optimization.

00:04:08.190 --> 00:04:10.910
On a desktop machine,
it's more like 20x.

00:04:10.910 --> 00:04:12.950
Second, MathFu was
designed from the outset

00:04:12.950 --> 00:04:14.550
to be simple and streamlined.

00:04:14.550 --> 00:04:16.980
The developers did not throw
in the kitchen sink here.

00:04:16.980 --> 00:04:19.399
They kept it focused
just on performing tasks

00:04:19.399 --> 00:04:20.996
that game developers need.

00:04:20.996 --> 00:04:22.620
So if you're looking
for a math library

00:04:22.620 --> 00:04:25.020
to help you fold
proteins or something,

00:04:25.020 --> 00:04:26.330
you should not use MathFu.

00:04:26.330 --> 00:04:28.220
There are better libraries
out there for you.

00:04:28.220 --> 00:04:30.240
But if you're looking
to make a game,

00:04:30.240 --> 00:04:32.180
this will cover
all of your needs.

00:04:32.180 --> 00:04:34.710
And again, this was something
the "Pie Noon" team set out

00:04:34.710 --> 00:04:35.249
to prove.

00:04:35.249 --> 00:04:36.790
The developers used
it for everything

00:04:36.790 --> 00:04:38.990
from the particle system,
to the camera positioning,

00:04:38.990 --> 00:04:42.950
to the parabolic pie paths,
and it worked great for that.

00:04:42.950 --> 00:04:44.990
Finally, do you have
level data, animation

00:04:44.990 --> 00:04:47.020
files, or saved game
data in your game

00:04:47.020 --> 00:04:49.640
that you are defining as
a giant block of JSON?

00:04:49.640 --> 00:04:51.570
Well, if you do, stop it.

00:04:51.570 --> 00:04:52.070
Seriously.

00:04:52.070 --> 00:04:52.750
Stop it.

00:04:52.750 --> 00:04:53.620
Stop right now.

00:04:53.620 --> 00:04:55.400
Step away from the text editor.

00:04:55.400 --> 00:04:58.540
Look, JSON is great for
producing human readable data.

00:04:58.540 --> 00:05:00.420
But in order to make
things human readable,

00:05:00.420 --> 00:05:02.753
you end up having to use a
lot more space than you would

00:05:02.753 --> 00:05:04.820
use otherwise, and
in many languages,

00:05:04.820 --> 00:05:06.740
your JSON to native
code decoder is

00:05:06.740 --> 00:05:09.570
going to be slow thanks to all
the string parsing and type

00:05:09.570 --> 00:05:11.720
guessing work your
decoder needs to do.

00:05:11.720 --> 00:05:13.890
Not only that, but the
deserialization process

00:05:13.890 --> 00:05:15.931
is probably going to wreak
havoc with your memory

00:05:15.931 --> 00:05:19.200
as a lot of temporary objects
are allocated and deallocated.

00:05:19.200 --> 00:05:22.080
So to fix this problem, Google
created a serialization library

00:05:22.080 --> 00:05:23.207
called FlatBuffers.

00:05:23.207 --> 00:05:25.540
This is an open source tool
where you write out a schema

00:05:25.540 --> 00:05:28.690
describing your data, and the
flap buffers library generates

00:05:28.690 --> 00:05:33.010
a C++ file that can convert a
byte array to a native object

00:05:33.010 --> 00:05:35.810
and back without even
having to unpack it,

00:05:35.810 --> 00:05:38.230
meaning that zero superfluous
objects are allocated

00:05:38.230 --> 00:05:39.020
to memory.

00:05:39.020 --> 00:05:42.040
It's fast, way faster than
reading in JSON files.

00:05:42.040 --> 00:05:43.990
It works cross platform,
it's [? strongly ?]

00:05:43.990 --> 00:05:45.646
typed to avoid
careless mistakes,

00:05:45.646 --> 00:05:47.020
and even has some
nice versioning

00:05:47.020 --> 00:05:49.510
support when you need to
change your data format.

00:05:49.510 --> 00:05:51.171
So the "Pie Noon"
team use FlatBuffers

00:05:51.171 --> 00:05:53.670
to define everything from the
location of their UI elements,

00:05:53.670 --> 00:05:55.140
to their particle
effects, to storing

00:05:55.140 --> 00:05:56.431
all of their gameplay settings.

00:05:56.431 --> 00:05:58.600
But are you ready
for the big twist?

00:05:58.600 --> 00:06:00.750
They authored these
values using JSON files.

00:06:00.750 --> 00:06:03.240
So OK giant circle with
the slash through it.

00:06:03.240 --> 00:06:04.111
You can go away now.

00:06:04.111 --> 00:06:04.611
Here you go.

00:06:04.611 --> 00:06:05.900
Look at that.

00:06:05.900 --> 00:06:08.580
You see, an intermediary step
in the build process takes

00:06:08.580 --> 00:06:11.660
a FlatBuffer schema and
a corresponding JSON file

00:06:11.660 --> 00:06:13.960
and converts the entire
thing into a byte array,

00:06:13.960 --> 00:06:16.170
which can quickly be read
in as a native object

00:06:16.170 --> 00:06:19.510
by the generated C++ file
when the game starts.

00:06:19.510 --> 00:06:21.880
So you can check out the
CMakeLists file on the project

00:06:21.880 --> 00:06:24.200
if you're interested in
viewing all the dirty details.

00:06:24.200 --> 00:06:25.960
But I think the point
to take away here

00:06:25.960 --> 00:06:28.160
is that the team got the
convenience of still being

00:06:28.160 --> 00:06:30.130
able to author in a
human readable format,

00:06:30.130 --> 00:06:34.234
but the speed of nearly native
code by using FlatBuffers.

00:06:34.234 --> 00:06:36.650
Now, this speed boost was huge
from a relative standpoint.

00:06:36.650 --> 00:06:39.660
FlatBuffers are like 400
times faster than JSON.

00:06:39.660 --> 00:06:42.000
But in absolute numbers,
it was actually modest

00:06:42.000 --> 00:06:44.650
just because this game didn't
have a lot of data to load.

00:06:44.650 --> 00:06:46.590
So this whole speedup
was pretty minor

00:06:46.590 --> 00:06:49.180
compared to everything else
the game had to do at start up.

00:06:49.180 --> 00:06:52.050
But if your game happens to
have large amounts of game data

00:06:52.050 --> 00:06:56.190
or save files, this can save
you a ton of loading time.

00:06:56.190 --> 00:06:57.940
So there is some other
tech the team used,

00:06:57.940 --> 00:07:00.100
like the build all Android
script, which ended up

00:07:00.100 --> 00:07:02.450
being really useful to
quickly iterate on a build,

00:07:02.450 --> 00:07:04.900
and a CPU profiler,
which frankly ended up

00:07:04.900 --> 00:07:07.510
being not so useful because the
game was actually GPU bound.

00:07:07.510 --> 00:07:09.651
But that's a whole
other episode.

00:07:09.651 --> 00:07:11.650
Anyway, if you're interested
in finding out more

00:07:11.650 --> 00:07:13.250
about any of these
technologies, we

00:07:13.250 --> 00:07:14.666
have a whole list
of links for you

00:07:14.666 --> 00:07:16.125
to follow in the
description below.

00:07:16.125 --> 00:07:18.457
But more importantly, we have
a link to the full project

00:07:18.457 --> 00:07:19.990
so you can try it
out for yourself,

00:07:19.990 --> 00:07:21.489
fool around with
the code, and build

00:07:21.489 --> 00:07:23.970
your own version of "Pie Noon."

00:07:23.970 --> 00:07:25.920
So you give it a try and enjoy.

00:07:25.920 --> 00:07:29.350
As for me, I'm going to enjoy
this delicious fresh baked pie.

00:07:29.350 --> 00:07:31.500
Holy mother of God, that's hot.

00:07:31.500 --> 00:07:33.010
Oh.

00:07:33.010 --> 00:07:34.640
Oh.

00:07:34.640 --> 00:07:37.250
Like I said, you can spend
your days building tools,

00:07:37.250 --> 00:07:39.950
but unless you use them
yourselves once in awhile,

00:07:39.950 --> 00:07:44.030
you might get burned, literally.

00:07:44.030 --> 00:07:47.072
I'm Todd Kerpelman,
and I'll see you soon.

00:07:47.072 --> 00:07:49.530
MALE SPEAKER: You know what I
love about working at Google?

00:07:49.530 --> 00:07:51.760
It's that no day is
exactly the same.

00:07:51.760 --> 00:07:54.730
Every day brings its own unique
challenges and surprises.

00:07:58.610 --> 00:08:00.322
For example--

00:08:00.322 --> 00:08:02.780
MALE SPEAKER: You guys put your
phones on silent and then--

00:08:02.780 --> 00:08:04.404
TODD KERPELMAN: No
one calls me anyway.

00:08:04.404 --> 00:08:05.540
MALE SPEAKER: Sure they do.

00:08:05.540 --> 00:08:07.301
TODD KERPELMAN: Wrong numbers.

00:08:07.301 --> 00:08:08.480
I ask them to talk to me.

00:08:12.350 --> 00:08:13.350
MALE SPEAKER: Hey, Todd.

00:08:13.350 --> 00:08:14.099
I'm just checking.

00:08:14.099 --> 00:08:14.986
Does that smell OK?

00:08:14.986 --> 00:08:15.860
TODD KERPELMAN: What?

00:08:15.860 --> 00:08:16.640
I think it smells fine.

00:08:16.640 --> 00:08:17.139
Why?

00:08:20.186 --> 00:08:22.520
I hate you Jeff.

