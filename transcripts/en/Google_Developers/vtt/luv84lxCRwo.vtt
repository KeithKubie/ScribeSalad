WEBVTT
Kind: captions
Language: en

00:00:06.000 --> 00:00:07.734
Alami: Hello, everybody,
and welcome

00:00:07.734 --> 00:00:11.167
to "Secrets and Surprises
of the Google Geo APIs".

00:00:11.167 --> 00:00:14.200
My name is Ossama Alami.
I'm a developer advocate

00:00:14.200 --> 00:00:16.601
on our Geo Developer
Relations team,

00:00:16.601 --> 00:00:18.934
and I'm here today
presenting with Aaron Jacobs,

00:00:18.934 --> 00:00:22.334
who is a software engineer
on the Maps API team.

00:00:22.334 --> 00:00:24.267
So what do I mean
when I say

00:00:24.267 --> 00:00:27.467
"Secrets and Surprises
of the Google Geo APIs"?

00:00:27.467 --> 00:00:29.000
Well, what I want to do--

00:00:29.000 --> 00:00:32.067
what we want to do in
today's session is give you,

00:00:32.067 --> 00:00:35.667
firstly, an overview
of your options as a developer

00:00:35.667 --> 00:00:38.133
when you think about
Geo, Spatial,

00:00:38.133 --> 00:00:40.567
and Geospatial APIs
at Google,

00:00:40.567 --> 00:00:44.400
and then go into some specific
features of the Maps API,

00:00:44.400 --> 00:00:48.767
the Earth API, Fusion Tables,
our web services,

00:00:48.767 --> 00:00:53.300
and the Static Maps API,
to highlight some features

00:00:53.300 --> 00:00:55.067
that you may not know about,
some features

00:00:55.067 --> 00:00:57.934
that you may have seen
but don't know how to use,

00:00:57.934 --> 00:01:00.100
and give you an idea
of what's new,

00:01:00.100 --> 00:01:03.767
and some exciting features.

00:01:03.767 --> 00:01:05.767
So we'll start
with the overview.

00:01:05.767 --> 00:01:09.834
When you think of Geo at Google,
people typically think of

00:01:09.834 --> 00:01:13.100
the Maps API Version 3,
or the Maps API,

00:01:13.100 --> 00:01:14.834
the JavaScript
Maps API.

00:01:14.834 --> 00:01:20.534
Our JavaScript Maps APIs are now
active on over 600,000 sites,

00:01:20.534 --> 00:01:23.467
and it is our primary
mapping API,

00:01:23.467 --> 00:01:26.734
and what you typically think of
when you think of Maps at Google

00:01:26.734 --> 00:01:28.033
as a developer.

00:01:28.033 --> 00:01:29.701
But we have more
than just these,

00:01:29.701 --> 00:01:33.100
what I'll call user-facing APIs,
these mapping APIs.

00:01:33.100 --> 00:01:36.734
There's the Earth API,
which we'll talk about today.

00:01:36.734 --> 00:01:40.267
This lets you embed Google Earth
and a web page

00:01:40.267 --> 00:01:42.801
and has a JavaScript API
you can work with.

00:01:42.801 --> 00:01:45.200
There's a Maps API for Flash,

00:01:45.200 --> 00:01:48.901
for any action script developers
in the audience.

00:01:48.901 --> 00:01:52.667
We have a Static Maps API, which
we'll also talk about today.

00:01:52.667 --> 00:01:55.767
And then for Android
and IOS devices,

00:01:55.767 --> 00:01:58.901
we have a native SDK,
that you can use for mapping

00:01:58.901 --> 00:02:02.200
if you're building
a native application.

00:02:02.200 --> 00:02:04.968
But there's more than just
these user-facing APIs.

00:02:04.968 --> 00:02:08.133
There's a suite of
developer tools,

00:02:08.133 --> 00:02:13.901
supporting APIs within
Geospatial at Google,

00:02:13.901 --> 00:02:17.334
that support you as a developer
in building these applications.

00:02:17.334 --> 00:02:19.567
There's our web services,
Fusion Tables,

00:02:19.567 --> 00:02:23.000
both of which we'll talk about,
KML, which is an open standard

00:02:23.000 --> 00:02:25.834
for representing
geospatial data,

00:02:25.834 --> 00:02:28.133
SketchUp, which is a tool
for 3D modeling,

00:02:28.133 --> 00:02:29.200
and you can then
take those models

00:02:29.200 --> 00:02:31.033
and put it on Google Earth,

00:02:31.033 --> 00:02:32.567
and then Earth and Earth Pro
themselves,

00:02:32.567 --> 00:02:34.934
which are client applications
that you can use

00:02:34.934 --> 00:02:36.133
to visualize your data

00:02:36.133 --> 00:02:39.634
as well as work with
certain data formats.

00:02:39.634 --> 00:02:41.100
But there's more to it.

00:02:41.100 --> 00:02:45.067
Google has over 100 different
APIs and developer products,

00:02:45.067 --> 00:02:47.767
and lots of them that you may
not immediately think of

00:02:47.767 --> 00:02:49.834
actually have
a notion of place,

00:02:49.834 --> 00:02:54.801
a notion of location or some
geospatial aspect to them.

00:02:54.801 --> 00:02:57.934
You can get a user's location
using the Latitude API,

00:02:57.934 --> 00:03:02.400
geotag imagery using
Panoramio and Picasa,

00:03:02.400 --> 00:03:05.834
or geotag videos
with YouTube API,

00:03:05.834 --> 00:03:08.567
updates using the Buzz API,

00:03:08.567 --> 00:03:11.167
and then there's some
developer tools,

00:03:11.167 --> 00:03:14.200
if you are an organization
or a developer

00:03:14.200 --> 00:03:17.033
that has lots of geospatial
data, you know,

00:03:17.033 --> 00:03:20.167
satellite images yourself,
you can use Earth Builder

00:03:20.167 --> 00:03:24.200
and Earth Enterprise to work
with and visualize that data,

00:03:24.200 --> 00:03:26.334
and then tools like
Refine and BigQuery,

00:03:26.334 --> 00:03:33.400
that don't necessarily have a
specific geospatial application,

00:03:33.400 --> 00:03:35.601
sorry, a specific
geospatial feature--

00:03:35.601 --> 00:03:37.434
but they are tools
that you can use to work

00:03:37.434 --> 00:03:40.534
with geospatial data sets,
and then query them,

00:03:40.534 --> 00:03:43.467
or refine that.

00:03:43.467 --> 00:03:46.968
So that's sort of a very quick,
broad overview

00:03:46.968 --> 00:03:49.667
of what is available
to you as a developer

00:03:49.667 --> 00:03:52.400
when you think of
Geospatial at Google.

00:03:52.400 --> 00:03:54.801
And we'll go right now into
some really exciting features

00:03:54.801 --> 00:03:56.667
of Maps API Version 3--

00:03:56.667 --> 00:03:58.367
again, some features
you may not know about

00:03:58.367 --> 00:04:00.133
and some features
that are brand-new.

00:04:00.133 --> 00:04:05.167
First, I'll start with
an overview of the Maps API.

00:04:05.167 --> 00:04:10.300
We released Maps API Version 3
at last year's I/O, out of labs.

00:04:10.300 --> 00:04:13.634
Now if you're--
and we deprecated Version 2.

00:04:13.634 --> 00:04:16.133
Now if you have
an active Version 2 site,

00:04:16.133 --> 00:04:17.133
I don't want you to worry.

00:04:17.133 --> 00:04:19.701
We have a 3-year
deprecation policy.

00:04:19.701 --> 00:04:22.467
But I hope some of the things
you see today encourages you

00:04:22.467 --> 00:04:24.033
to switch to Version 3,

00:04:24.033 --> 00:04:25.868
because that's where
our active development is,

00:04:25.868 --> 00:04:29.300
and that's where all of our
new features are built upon.

00:04:29.300 --> 00:04:31.534
The advantage of Version 3
is also that it was built

00:04:31.534 --> 00:04:34.133
from the ground up to be
both a desktop

00:04:34.133 --> 00:04:37.501
and a mobile web-mapping API.

00:04:37.501 --> 00:04:41.100
So in addition to support
and the mobile browsers

00:04:41.100 --> 00:04:46.200
for Android and Safari, we also
support Blackberry 6 devices,

00:04:46.200 --> 00:04:49.367
and the Samsung Bada browser,

00:04:49.367 --> 00:04:52.801
and then the standard desktop
browser support as well.

00:04:52.801 --> 00:04:54.901
You'll notice IE 6
isn't listed here.

00:04:54.901 --> 00:05:00.300
While we--while the maps--
thank you.

00:05:00.300 --> 00:05:04.234
While the Maps API will work
in IE 6 and will not break,

00:05:04.234 --> 00:05:07.434
there are certain features
that will--

00:05:07.434 --> 00:05:11.434
they'll degrade well, but they
won't be available to IE 6.

00:05:11.434 --> 00:05:13.767
But you can rest assured that
your map will continue to work

00:05:13.767 --> 00:05:16.968
and function with
Internet Explorer 6.

00:05:16.968 --> 00:05:19.334
I said "loads of features".
Here are just some of them.

00:05:19.334 --> 00:05:21.634
The things in blue
are some of the things

00:05:21.634 --> 00:05:23.734
that we're going
to talk about today.

00:05:23.734 --> 00:05:27.501
As you can see, there's more to
it than just a map and markers.

00:05:27.501 --> 00:05:30.234
You can do so much more
with the Maps API.

00:05:30.234 --> 00:05:31.367
And the first thing
I want to talk about

00:05:31.367 --> 00:05:34.100
is 45-degree imagery.

00:05:34.100 --> 00:05:36.868
So this 45-degree imagery,
you'll notice

00:05:36.868 --> 00:05:38.901
I'm looking at an angle,
an oblique angle.

00:05:38.901 --> 00:05:40.734
If I zoom out--
this, by the way,

00:05:40.734 --> 00:05:43.200
is Google's headquarters
in Mountain View, California,

00:05:43.200 --> 00:05:45.801
which is about 40 miles
south of us here--

00:05:45.801 --> 00:05:49.300
if I zoom out, I have the
standard satellite imagery.

00:05:49.300 --> 00:05:51.501
Now, I have the smooth
transition as a user

00:05:51.501 --> 00:05:56.100
when I zoom in to switch
to a 45-degree imagery,

00:05:56.100 --> 00:05:58.634
and right now I'm looking north,
which we'll call 40--

00:05:58.634 --> 00:06:01.167
which we'll call, sorry,
zero degrees.

00:06:01.167 --> 00:06:08.267
I can look east at 90 degrees,
180, 270, and back to zero.

00:06:08.267 --> 00:06:11.000
And this is really
high-resolution imagery,

00:06:11.000 --> 00:06:13.968
so you can see as I zoom in,
you get a lot--

00:06:13.968 --> 00:06:15.701
a lot of detail, more than
what you would get

00:06:15.701 --> 00:06:17.567
with just satellite maps.

00:06:17.567 --> 00:06:20.267
And as a user, I can turn off
45-degree imagery,

00:06:20.267 --> 00:06:22.367
or go back and add labels.

00:06:22.367 --> 00:06:24.300
We have an ever-increasing
list of cities

00:06:24.300 --> 00:06:26.133
that's available worldwide.

00:06:26.133 --> 00:06:28.334
So I was gonna show you
Santa Cruz,

00:06:28.334 --> 00:06:31.267
which is just further south
of us here,

00:06:31.267 --> 00:06:33.400
and we also have
Venice, Italy,

00:06:33.400 --> 00:06:37.868
as well as a large,
ever-increasing amount of cities

00:06:37.868 --> 00:06:39.000
available globally.

00:06:39.000 --> 00:06:40.300
And so what's the code
look like

00:06:40.300 --> 00:06:42.801
to enable this 45-degree
imagery?

00:06:42.801 --> 00:06:47.200
It's not enabled by default
for the Maps API,

00:06:47.200 --> 00:06:49.734
but it's really, really simple,
and this will be a common theme

00:06:49.734 --> 00:06:50.734
in this presentation.

00:06:50.734 --> 00:06:52.367
The code to enable
these features

00:06:52.367 --> 00:06:55.200
is actually really, really
simple, really easy.

00:06:55.200 --> 00:06:57.501
Only a couple lines of code,
and you can have a world

00:06:57.501 --> 00:07:00.834
of new possibilities and
features in the Maps API.

00:07:00.834 --> 00:07:04.767
So I simply set the map to--
set, on the map,

00:07:04.767 --> 00:07:08.634
call "set tilt," pass in "45"
for 45 degrees,

00:07:08.634 --> 00:07:10.434
and this enables
45-degree imagery,

00:07:10.434 --> 00:07:12.968
so when a user zooms in
at an appropriate zoom level,

00:07:12.968 --> 00:07:15.934
it'll naturally switch
to that 45-degree imagery.

00:07:15.934 --> 00:07:17.334
And then to reset it,

00:07:17.334 --> 00:07:19.267
if I want to disable
satellite imagery,

00:07:19.267 --> 00:07:22.434
I just call
"map.set tilt to 0."

00:07:22.434 --> 00:07:23.701
And if I want
to programmatically

00:07:23.701 --> 00:07:25.100
set the heading,

00:07:25.100 --> 00:07:27.767
I just call "map.set heading,"
and pass in one of those--

00:07:27.767 --> 00:07:30.167
one of those degrees.

00:07:30.167 --> 00:07:34.634
Another feature that is
unrelated to 45-degree imagery,

00:07:34.634 --> 00:07:38.934
but I do like to demo
with 45-degree imagery,

00:07:38.934 --> 00:07:42.968
because it really gives you
an idea of the surrounding area,

00:07:42.968 --> 00:07:44.901
is this overview map control.

00:07:44.901 --> 00:07:49.000
So this, I can move the box
either in here,

00:07:49.000 --> 00:07:54.434
or as I pan, the overview map
control will update,

00:07:54.434 --> 00:07:57.000
and if I go back to map,
it'll switch to map.

00:07:57.000 --> 00:07:59.734
This gives me
a higher perspective,

00:07:59.734 --> 00:08:02.300
a zoomed out perspective
of where I am looking at,

00:08:02.300 --> 00:08:05.100
so the user can really
understand the location,

00:08:05.100 --> 00:08:10.000
and this will collapse
or expand.

00:08:10.000 --> 00:08:12.534
So the code to this is, again,
very, very simple.

00:08:12.534 --> 00:08:14.801
When I create a map,
I pass in "map options."

00:08:14.801 --> 00:08:16.868
If I want the overview map
control,

00:08:16.868 --> 00:08:20.167
I just pass in
"overview map control true,"

00:08:20.167 --> 00:08:21.601
and if I want it open
by default,

00:08:21.601 --> 00:08:23.901
I pass in an overview
map control option,

00:08:23.901 --> 00:08:27.167
and I say "opened equals true."

00:08:27.167 --> 00:08:30.033
A new feature in the Maps API
which I really like

00:08:30.033 --> 00:08:32.334
is marker animations.

00:08:32.334 --> 00:08:34.968
We have two animations
that we support.

00:08:34.968 --> 00:08:37.033
You can see those markers
dropping.

00:08:37.033 --> 00:08:41.000
There's the drop animation,
and there's--

00:08:41.000 --> 00:08:44.300
as I move this marker, we have
draggable markers as well.

00:08:44.300 --> 00:08:47.467
You can see the marker drops
and animates.

00:08:47.467 --> 00:08:49.701
This makes it a little bit more
of an interactive experience

00:08:49.701 --> 00:08:52.501
for the user, feel like they're
actually performing an action,

00:08:52.501 --> 00:08:54.968
and confirmation
that it worked,

00:08:54.968 --> 00:08:56.667
because they see
the animation.

00:08:56.667 --> 00:08:57.834
And then we also
have the ability

00:08:57.834 --> 00:09:00.367
to make all the markers
bounce.

00:09:00.367 --> 00:09:02.901
I really urge you to use
this feature with caution,

00:09:02.901 --> 00:09:05.067
because a little bit
is fun.

00:09:05.067 --> 00:09:10.200
Too much is a little
annoying.

00:09:10.200 --> 00:09:13.133
We'll leave
those bouncing.

00:09:13.133 --> 00:09:16.100
When I create a marker, if I
want to pass in an animation,

00:09:16.100 --> 00:09:19.400
or if I want to animate it,
during creation of the marker,

00:09:19.400 --> 00:09:21.934
I just pass in the animation
option here

00:09:21.934 --> 00:09:24.334
and I set the animation
that I want.

00:09:24.334 --> 00:09:25.901
In this case, "drop."

00:09:25.901 --> 00:09:28.267
The other animation we support
is "bounce."

00:09:28.267 --> 00:09:31.067
If I've already created a marker
and I want to set an animation,

00:09:31.067 --> 00:09:32.267
I just call marker--

00:09:32.267 --> 00:09:34.100
on the marker I call
"set animation"

00:09:34.100 --> 00:09:35.834
and I pass in the animation
that I want.

00:09:35.834 --> 00:09:37.400
And then if I want to clear
the animation,

00:09:37.400 --> 00:09:40.100
just call "set null"--
sorry, "set animation,"

00:09:40.100 --> 00:09:42.367
"pass," and "null."

00:09:42.367 --> 00:09:44.634
So there's been lots and lots
of improvements to markers

00:09:44.634 --> 00:09:48.167
in Version 3 of the Maps API
very recently,

00:09:48.167 --> 00:09:50.067
including many speed
improvements.

00:09:50.067 --> 00:09:51.801
If you want to learn more
about this stuff,

00:09:51.801 --> 00:09:54.601
you should go to the session
entitled "Speedy Maps"

00:09:54.601 --> 00:09:59.100
which is 10:45 A.M. tomorrow.

00:09:59.100 --> 00:10:01.100
Layers is another feature
of the Maps API

00:10:01.100 --> 00:10:02.400
that you may not know about.

00:10:02.400 --> 00:10:05.000
This enables you to very easily
add additional data

00:10:05.000 --> 00:10:06.534
on top of the map.

00:10:06.534 --> 00:10:08.801
We support various types
of layers.

00:10:08.801 --> 00:10:12.100
The first UM I'm going to demo--
Geo RSS--

00:10:12.100 --> 00:10:16.934
let's you consume a Geo RSS file
or a service

00:10:16.934 --> 00:10:19.701
and then easily display
that on the map.

00:10:19.701 --> 00:10:22.767
In this case, we're hitting
the Flickr API

00:10:22.767 --> 00:10:27.100
to get geotagged imagery
of our tech writer's dog

00:10:27.100 --> 00:10:31.300
across North America.

00:10:31.300 --> 00:10:33.334
And then the other way
that you can get your data

00:10:33.334 --> 00:10:35.801
on top of it,
on top of the map very easily

00:10:35.801 --> 00:10:37.434
is to use KML.

00:10:37.434 --> 00:10:38.834
And in this example,

00:10:38.834 --> 00:10:44.133
I'm just loading KML
for transit lines in Chicago.

00:10:44.133 --> 00:10:48.200
So the other examples here
are more using Google's data

00:10:48.200 --> 00:10:49.667
and showing that
on top of the map.

00:10:49.667 --> 00:10:52.667
In this case, I'm showing
traffic in Chicago.

00:10:52.667 --> 00:10:54.734
Every time I practice this,

00:10:54.734 --> 00:10:57.968
this highway
has always been red,

00:10:57.968 --> 00:11:03.100
so I don't know
what's going on there.

00:11:03.100 --> 00:11:07.200
And then, bicycling--
this changes the view of the map

00:11:07.200 --> 00:11:10.868
and then highlights
bicycling routes,

00:11:10.868 --> 00:11:13.267
roads that are known
to be good for biking,

00:11:13.267 --> 00:11:14.868
and roads with bike paths.

00:11:14.868 --> 00:11:17.734
You can see, as a bicyclist,
I can get a really good idea

00:11:17.734 --> 00:11:22.067
of what's easy to bike through
in Chicago.

00:11:22.067 --> 00:11:23.634
And then, Panoramio--

00:11:23.634 --> 00:11:26.067
I talked about Panoramio
briefly earlier.

00:11:26.067 --> 00:11:28.801
Panoramio
is an image-hosting site

00:11:28.801 --> 00:11:31.868
that has exclusively
geotagged imagery,

00:11:31.868 --> 00:11:35.100
and we've added
a Panoramio layer,

00:11:35.100 --> 00:11:37.634
and it's more than just
pulling in imagery.

00:11:37.634 --> 00:11:39.834
You can see here,
I get a good idea

00:11:39.834 --> 00:11:42.767
of user-contributed images
of Chicago,

00:11:42.767 --> 00:11:45.567
but I can also filter
by either a specific user--

00:11:45.567 --> 00:11:47.200
so if you have
a Panoramio account

00:11:47.200 --> 00:11:49.133
and only want to show
your photos on the map,

00:11:49.133 --> 00:11:53.601
that's very easy to do--
or I can filter by a tag.

00:11:53.601 --> 00:11:56.701
So here I'll search for
Wrigley, and you see,

00:11:56.701 --> 00:12:02.000
the stadium shows up here
and there are various images

00:12:02.000 --> 00:12:03.567
that I can pull up.

00:12:03.567 --> 00:12:05.033
And then down south,

00:12:05.033 --> 00:12:07.334
there's actually a Wrigley
Building in Chicago as well,

00:12:07.334 --> 00:12:11.734
and that's coming up.

00:12:11.734 --> 00:12:15.100
So all these layers work
pretty similarly.

00:12:15.100 --> 00:12:16.667
It's very easy
to instantiate them

00:12:16.667 --> 00:12:18.501
for both KML and RSS.

00:12:18.501 --> 00:12:21.234
I use the google.maps
KML layer.

00:12:21.234 --> 00:12:23.167
It understands both formats,

00:12:23.167 --> 00:12:25.834
and I pass in the path
to that file or that service

00:12:25.834 --> 00:12:29.167
that's returning either
KML or Geo RSS.

00:12:29.167 --> 00:12:31.467
Traffic layer and bike layer
and Panoramio layer,

00:12:31.467 --> 00:12:33.200
I just instantiate it.

00:12:33.200 --> 00:12:34.534
And then,
for the Panoramio layer,

00:12:34.534 --> 00:12:39.100
if I want to filter by user
or by tag,

00:12:39.100 --> 00:12:42.467
I just call
"Panoramio layer.set tag"

00:12:42.467 --> 00:12:46.734
or ".set user ID"
to filter by those.

00:12:46.734 --> 00:12:48.801
And then in all cases,
to add it to the map,

00:12:48.801 --> 00:12:51.334
I just call the set map
property of the layer,

00:12:51.334 --> 00:12:54.033
and I pass in the map
that I want it to appear on.

00:12:54.033 --> 00:12:55.634
If I want to remove it
from the map,

00:12:55.634 --> 00:13:00.200
I just call "set map, null."
I talked briefly about KML.

00:13:00.200 --> 00:13:03.934
If you want to learn how
to create highly performant KML

00:13:03.934 --> 00:13:07.400
for both consumption
in the Google Maps API

00:13:07.400 --> 00:13:09.567
and Google Earth,
you should go to the session

00:13:09.567 --> 00:13:12.167
titled "High Performance KML
for Maps and Earth"

00:13:12.167 --> 00:13:16.534
which is this afternoon
at 3:45.

00:13:16.534 --> 00:13:18.968
Draggable directions
is one of my favorite features.

00:13:18.968 --> 00:13:21.634
It was a highly requested
feature for the Maps API,

00:13:21.634 --> 00:13:24.601
because people saw this
on maps.google.com.

00:13:24.601 --> 00:13:26.534
They saw that they could
drag directions,

00:13:26.534 --> 00:13:27.901
and now whenever
they see directions,

00:13:27.901 --> 00:13:29.567
they want to drag it, right?

00:13:29.567 --> 00:13:32.467
The user sometimes
knows a better path

00:13:32.467 --> 00:13:34.067
to get to a location.

00:13:34.067 --> 00:13:37.133
Here, I'm mapping from Moscone
to our headquarters

00:13:37.133 --> 00:13:41.567
in Mountain View, and you know,
maybe I know that 101

00:13:41.567 --> 00:13:43.400
is really terrible
this time of day,

00:13:43.400 --> 00:13:44.934
and I'd rather take 280.

00:13:44.934 --> 00:13:47.868
I can very quickly click
and drag that over,

00:13:47.868 --> 00:13:49.868
and it'll update
the textual directions

00:13:49.868 --> 00:13:54.901
on the right automatically.

00:13:54.901 --> 00:13:57.968
Another feature that
you may not know about is

00:13:57.968 --> 00:14:01.033
these text directions actually
link up directly to the map,

00:14:01.033 --> 00:14:08.734
so as I click, a user
can see that individual turn.

00:14:08.734 --> 00:14:12.501
Draggable directions, again
very easy to add to a map.

00:14:12.501 --> 00:14:16.267
This example shows you how to
add directions to a map.

00:14:16.267 --> 00:14:19.334
The things I want
to highlight are the top,

00:14:19.334 --> 00:14:20.901
these renderer options.

00:14:20.901 --> 00:14:23.501
I'm setting draggable to true,
and I'm passing this

00:14:23.501 --> 00:14:25.300
into a directions
renderer.

00:14:25.300 --> 00:14:27.334
Directions renderer
is the object

00:14:27.334 --> 00:14:30.434
that manages rendering
the directions,

00:14:30.434 --> 00:14:33.434
both in textual format
and on top of the map.

00:14:33.434 --> 00:14:38.033
Now, since the user has
an ability to drag directions,

00:14:38.033 --> 00:14:39.601
you as a developer
may want to know

00:14:39.601 --> 00:14:41.434
when they've interacted
with that

00:14:41.434 --> 00:14:43.100
and when the directions
have changed.

00:14:43.100 --> 00:14:46.467
You just need to listen
to directions changed event,

00:14:46.467 --> 00:14:48.033
which we now expose.

00:14:48.033 --> 00:14:51.300
And then you can perform
some action.

00:14:51.300 --> 00:14:54.033
Street View is another
very, very popular feature.

00:14:54.033 --> 00:14:57.234
We have a huge Street View
coverage around the globe,

00:14:57.234 --> 00:15:01.601
and when we implemented
Version 3 of the Maps API,

00:15:01.601 --> 00:15:03.934
we wanted to implement it
in such a way

00:15:03.934 --> 00:15:07.667
that it was usable
on all mobile devices.

00:15:07.667 --> 00:15:10.968
So we can't rely on Flash
being installed, for example.

00:15:10.968 --> 00:15:13.100
So Street View in V3
of the Maps API

00:15:13.100 --> 00:15:16.467
is implemented purely in HTML
and JavaScript,

00:15:16.467 --> 00:15:20.300
and this gives us the ability
to support you as the developer

00:15:20.300 --> 00:15:22.400
adding overlays on top of
the Street View,

00:15:22.400 --> 00:15:24.334
so markers and info windows,

00:15:24.334 --> 00:15:27.000
as well as completely
custom Street View,

00:15:27.000 --> 00:15:29.367
which is a really exciting
feature that I'll demo.

00:15:29.367 --> 00:15:32.133
And then, we've also exposed
the Street View service,

00:15:32.133 --> 00:15:34.501
the data service,
which lets you query us

00:15:34.501 --> 00:15:37.200
to find out where Street View
imagery is available

00:15:37.200 --> 00:15:40.834
and some other data about
that Street View imagery.

00:15:40.834 --> 00:15:42.300
Here's an example
of overlays.

00:15:42.300 --> 00:15:45.300
In this case, these overlays
are just markers.

00:15:45.300 --> 00:15:49.367
I have just a cafe,
and a bank,

00:15:49.367 --> 00:15:51.367
and here I'm programmatically
going to switch to Street View

00:15:51.367 --> 00:15:52.801
using this button.

00:15:52.801 --> 00:15:55.200
And you can see,
the marker shows up here,

00:15:55.200 --> 00:15:58.234
and so does the info window
on top of the Street View.

00:15:58.234 --> 00:16:01.934
Meanwhile, I'm panning,
and everything updates.

00:16:01.934 --> 00:16:03.200
As I move down the street,

00:16:03.200 --> 00:16:04.601
you can see
there's another marker here

00:16:04.601 --> 00:16:08.067
that gets larger
as I get closer.

00:16:08.067 --> 00:16:11.234
Naturally, it's a Starbucks.

00:16:11.234 --> 00:16:16.100
And that works fine as well.

00:16:16.100 --> 00:16:18.434
So this gives you more options
when you're working

00:16:18.434 --> 00:16:21.667
with Street View in displaying
data on top of it.

00:16:21.667 --> 00:16:24.767
Another feature I'm going
to demo is custom Street View.

00:16:24.767 --> 00:16:26.734
Here we have Street View
imagery--

00:16:26.734 --> 00:16:30.834
our Google Street View imagery--
outside of our Sydney office.

00:16:30.834 --> 00:16:32.634
There's a bunch of buses
parked in front

00:16:32.634 --> 00:16:36.067
because it's across the street
from a casino.

00:16:36.067 --> 00:16:38.667
As I move down the street,
you can see this is

00:16:38.667 --> 00:16:40.734
the standard
Street View imagery.

00:16:40.734 --> 00:16:43.400
If I move up the street,
I've added a link,

00:16:43.400 --> 00:16:46.267
for this demo,
to the Google Sydney office.

00:16:46.267 --> 00:16:49.000
This is not part
of our Street View imagery

00:16:49.000 --> 00:16:50.200
that we provide to you,

00:16:50.200 --> 00:16:52.100
but something that you can do
as a developer.

00:16:52.100 --> 00:16:55.434
And here, I've taken a panoramic
image of the interior

00:16:55.434 --> 00:17:00.133
of the Sydney office, the lobby,
and I can view this,

00:17:00.133 --> 00:17:03.234
and then, again, link back
out into the street.

00:17:03.234 --> 00:17:05.734
It's a great way to do
indoor mapping,

00:17:05.734 --> 00:17:09.367
and so that the imagery
for Street View doesn't end

00:17:09.367 --> 00:17:13.167
on the street, but rather
takes you into a building.

00:17:13.167 --> 00:17:15.667
If you want to learn how to
do this, you should go to

00:17:15.667 --> 00:17:17.834
the "Map Your Business
Inside and Out" session,

00:17:17.834 --> 00:17:24.767
which is at 1:45 P.M.
tomorrow.

00:17:24.767 --> 00:17:27.367
So I said V3,
we optimized it for mobile.

00:17:27.367 --> 00:17:31.567
We are also very concerned
about keeping speed up

00:17:31.567 --> 00:17:33.334
and latency down.

00:17:33.334 --> 00:17:36.234
So when we wanted to add
features to the Maps API,

00:17:36.234 --> 00:17:40.300
we didn't want to bulk up
the JavaScript that the user

00:17:40.300 --> 00:17:43.601
has to download and then
the browser has to parse,

00:17:43.601 --> 00:17:46.634
but we wanted to add some new
and exciting features

00:17:46.634 --> 00:17:48.267
and keep the load time down.

00:17:48.267 --> 00:17:51.067
So we've introduced this concept
called libraries.

00:17:51.067 --> 00:17:52.534
And using a library
is very simple.

00:17:52.534 --> 00:17:55.167
When you load the Maps API,
there's just a script tag

00:17:55.167 --> 00:17:57.100
to load the Maps API.

00:17:57.100 --> 00:17:59.434
I specify a libraries
parameter.

00:17:59.434 --> 00:18:03.601
I pass in a comma-separated
list of libraries.

00:18:03.601 --> 00:18:05.501
In this example,
you see Panoramio,

00:18:05.501 --> 00:18:08.033
which I demoed earlier,
is actually a library

00:18:08.033 --> 00:18:10.267
that I loaded for that demo.

00:18:10.267 --> 00:18:13.467
And here I have Geometry,
AdSense and Places,

00:18:13.467 --> 00:18:15.400
which I'll demo right now.

00:18:15.400 --> 00:18:20.501
Geometry is a library
that lets you compute angles,

00:18:20.501 --> 00:18:23.167
distances, and areas
from latitudes and longitudes.

00:18:23.167 --> 00:18:25.901
So if you want to do
some spherical geometry queries,

00:18:25.901 --> 00:18:29.267
you can use it--
load this library and use it.

00:18:29.267 --> 00:18:32.100
And it also comes
with an encoding library

00:18:32.100 --> 00:18:33.801
that lets you encode a path,

00:18:33.801 --> 00:18:36.634
so encode an array
of latitudes and longitudes

00:18:36.634 --> 00:18:39.400
into a string representation
of that,

00:18:39.400 --> 00:18:44.834
as well as decode that back
into latitudes and longitudes.

00:18:44.834 --> 00:18:47.167
AdSense.

00:18:47.167 --> 00:18:50.400
I imagine most of you
are familiar with AdSense, yeah?

00:18:50.400 --> 00:18:51.834
Okay.

00:18:51.834 --> 00:18:55.534
AdSense is a way for you,
as a developer or a publisher,

00:18:55.534 --> 00:19:02.801
to monetize your site by placing
relevant ads on your site,

00:19:02.801 --> 00:19:05.968
and then there's
a revenue-sharing model.

00:19:05.968 --> 00:19:10.400
What we found was that a lot
of web pages have just a map,

00:19:10.400 --> 00:19:12.300
or a map is the core component
of it.

00:19:12.300 --> 00:19:14.400
That's what the user
is interacting with.

00:19:14.400 --> 00:19:16.667
And AdSense only displays
relevant ads

00:19:16.667 --> 00:19:21.834
based on the context, the
textual content of your website.

00:19:21.834 --> 00:19:24.334
So it wasn't getting
the relevancy

00:19:24.334 --> 00:19:28.834
of where the user was looking at
to display relevant ads.

00:19:28.834 --> 00:19:31.601
Well, we fixed that
with the AdSense library

00:19:31.601 --> 00:19:33.567
for the Maps API Version 3.

00:19:33.567 --> 00:19:36.267
This is a library that
you can use to monetize, now,

00:19:36.267 --> 00:19:38.033
your mapping application.

00:19:38.033 --> 00:19:40.434
And it takes what the user
is looking at

00:19:40.434 --> 00:19:42.701
and serves relevant ads
for that.

00:19:42.701 --> 00:19:45.767
So if a user is looking
in wine country,

00:19:45.767 --> 00:19:49.133
north of us in San Francisco,
they'll likely see ads

00:19:49.133 --> 00:19:52.968
about hotels, or winery tours,
or things like that.

00:19:52.968 --> 00:19:54.801
So it becomes much more
relevant ads

00:19:54.801 --> 00:19:57.133
that a user is likely
to click on.

00:19:57.133 --> 00:19:59.400
It's very easy to add this
to your map as well.

00:19:59.400 --> 00:20:05.033
All you do is create arbitrary
div for the Ad Sense ad

00:20:05.033 --> 00:20:09.601
to live in, pass in the format
of the ad,

00:20:09.601 --> 00:20:12.334
which is a standard AdSense
format,

00:20:12.334 --> 00:20:15.000
and then if you want the ad
to live on top of the map,

00:20:15.000 --> 00:20:18.667
you can pass in a control
position for the ad,

00:20:18.667 --> 00:20:20.801
but the ad can also
live off the map

00:20:20.801 --> 00:20:24.000
and still be tied to
the context of the map--

00:20:24.000 --> 00:20:27.567
your publisher ID, so we know
where to send the checks,

00:20:27.567 --> 00:20:29.734
the map that it's tied to,

00:20:29.734 --> 00:20:32.200
and then whether
it's visible by default.

00:20:32.200 --> 00:20:36.467
And then I just create the ad
unit "new google.maps.adsense,"

00:20:36.467 --> 00:20:38.834
add unit, pass in the div
that it's living on,

00:20:38.834 --> 00:20:41.868
and the ad unit options
that I just described.

00:20:41.868 --> 00:20:43.334
And this is what
it looks like.

00:20:43.334 --> 00:20:47.934
This is an example of an ad
showing up on top of the map.

00:20:47.934 --> 00:20:50.734
Here you can see,
I'm looking in Monterey,

00:20:50.734 --> 00:20:54.100
which is south of us,
another tourist destination,

00:20:54.100 --> 00:20:59.067
has a famous golf course nearby,
so I'm seeing ads for hotels

00:20:59.067 --> 00:21:01.400
and a golf course.

00:21:01.400 --> 00:21:09.300
Oh, man.

00:21:09.300 --> 00:21:12.133
Okay.

00:21:12.133 --> 00:21:13.901
So you can see,
I'm moving.

00:21:13.901 --> 00:21:19.167
This moves to the bottom left.

00:21:19.167 --> 00:21:21.100
Let's see if this works.

00:21:21.100 --> 00:21:24.467
Sorry about this, guys.
This moves to the right.

00:21:24.467 --> 00:21:26.767
Apparently if I use
a drop-down box three times,

00:21:26.767 --> 00:21:29.801
it'll fix itself.

00:21:29.801 --> 00:21:31.968
[indistinct chatter]

00:21:31.968 --> 00:21:34.567
[laughs]

00:21:34.567 --> 00:21:38.267
So very, very easy to--
so that sort of shows you

00:21:38.267 --> 00:21:41.801
where it can live on the map
and then the format will change,

00:21:41.801 --> 00:21:43.501
the actual format of the ad--

00:21:43.501 --> 00:21:46.200
I'm not going to click
on that right now--

00:21:46.200 --> 00:21:48.701
to either--any of the standard
AdSense formats.

00:21:48.701 --> 00:21:50.434
So you know, one
of them is a long bar,

00:21:50.434 --> 00:21:51.801
one of them
is a bigger box,

00:21:51.801 --> 00:21:54.601
one of them
is a smaller box, et cetera.

00:21:54.601 --> 00:21:57.767
And then Places--
Places we announced

00:21:57.767 --> 00:22:00.601
that we launched
out of developer preview

00:22:00.601 --> 00:22:02.634
in the session
earlier today.

00:22:02.634 --> 00:22:04.901
There's also a Places library
that you can load

00:22:04.901 --> 00:22:07.133
for the Maps API Version 3.

00:22:07.133 --> 00:22:09.834
It supports two services:
auto-complete,

00:22:09.834 --> 00:22:12.167
which, if you're familiar
with maps.google.com,

00:22:12.167 --> 00:22:17.601
when you start typing, you see
a list of possible results,

00:22:17.601 --> 00:22:19.400
auto-completion of addresses

00:22:19.400 --> 00:22:23.801
or auto-completion of
business locations.

00:22:23.801 --> 00:22:26.901
We're giving you the ability
to have that same feature

00:22:26.901 --> 00:22:28.167
on your sites,

00:22:28.167 --> 00:22:31.100
using the auto-complete
functionality and Places.

00:22:31.100 --> 00:22:33.567
And then we have
a Places search service,

00:22:33.567 --> 00:22:39.067
which given a bounting box
or a latitude and longitude

00:22:39.067 --> 00:22:40.601
and a radius,

00:22:40.601 --> 00:22:42.968
will let you search for
local business listings

00:22:42.968 --> 00:22:44.567
and points of interest.

00:22:44.567 --> 00:22:47.167
If you want to learn more
about how to use Places,

00:22:47.167 --> 00:22:49.968
including the web services
we're launching with Places,

00:22:49.968 --> 00:22:52.367
you should go to the
"Location-Based Development

00:22:52.367 --> 00:22:56.267
Using Google APIs" session,

00:22:56.267 --> 00:22:59.601
3:00 P.M. tomorrow.

00:22:59.601 --> 00:23:00.968
And so I talked
about libraries,

00:23:00.968 --> 00:23:04.200
but what we also make available
are utility libraries.

00:23:04.200 --> 00:23:08.434
These aren't loaded through the
libraries tag in the Maps API,

00:23:08.434 --> 00:23:12.801
but are instead open-source
utilities that you can download,

00:23:12.801 --> 00:23:15.801
modify, and then use
in conjunction with your map.

00:23:15.801 --> 00:23:18.834
They are developed
by the Maps API team,

00:23:18.834 --> 00:23:22.601
and we do actively develop them
and support them.

00:23:22.601 --> 00:23:26.133
You'll find utilities
that do clustering,

00:23:26.133 --> 00:23:28.934
that do custom markers
and info windows,

00:23:28.934 --> 00:23:32.901
that do root boxing, and then a
very highly requested feature,

00:23:32.901 --> 00:23:34.300
Google Earth integration,

00:23:34.300 --> 00:23:37.267
we recently released as
an open source library.

00:23:37.267 --> 00:23:38.901
So you can download
this library

00:23:38.901 --> 00:23:41.767
and get the Earth button
on Maps.

00:23:41.767 --> 00:23:44.467
You know, it's Map,
Satellites, Earth,

00:23:44.467 --> 00:23:47.868
and it'll transfer all the items
that you have on your map

00:23:47.868 --> 00:23:50.434
to the Earth instance
and sync the two.

00:23:50.434 --> 00:23:54.634
So a user can now view the map--
view your content

00:23:54.634 --> 00:23:58.334
using Earth as well--

00:23:58.334 --> 00:24:01.801
which leads me into discussion
about the Earth API.

00:24:01.801 --> 00:24:05.601
Again, the Earth API is a way
for you to embed Earth

00:24:05.601 --> 00:24:08.667
in a web page, and it has
a JavaScript API around it,

00:24:08.667 --> 00:24:10.701
so that you can define
the user experience

00:24:10.701 --> 00:24:13.334
and what content
is displayed on top of it.

00:24:13.334 --> 00:24:16.434
It does require a browser
plug-in, the Earth plug-in,

00:24:16.434 --> 00:24:20.834
which has support on
both Windows and Mac.

00:24:20.834 --> 00:24:24.033
And what does this
look like?

00:24:24.033 --> 00:24:28.167
There we go.
So here's Google Earth.

00:24:28.167 --> 00:24:30.000
I can turn on borders.

00:24:30.000 --> 00:24:32.167
There are various options
for what I can do.

00:24:32.167 --> 00:24:33.567
I programmatically
set a button

00:24:33.567 --> 00:24:36.100
that just jumps to
San Francisco.

00:24:36.100 --> 00:24:40.234
I can pan down here
and turn on or off terrain.

00:24:40.234 --> 00:24:43.667
One of my favorite features
is the buildings layer.

00:24:43.667 --> 00:24:45.868
This gives you
a really good idea

00:24:45.868 --> 00:24:48.200
of what a city looks like
in 3D

00:24:48.200 --> 00:24:50.367
as opposed to a top-down view
of a map.

00:24:50.367 --> 00:24:51.701
Excuse me.

00:24:51.701 --> 00:24:54.567
And as this loads,

00:24:54.567 --> 00:24:56.534
you'll see more and more detail
will come in,

00:24:56.534 --> 00:25:02.467
in San Francisco
and the Bay Bridge.

00:25:02.467 --> 00:25:06.334
And then, we recently
added trees to Google Earth.

00:25:06.334 --> 00:25:08.801
We have over 80 million
trees mapped.

00:25:08.801 --> 00:25:11.501
We get this data from
a variety of sources.

00:25:11.501 --> 00:25:14.634
A lot of it is actually
from satellite imagery now,

00:25:14.634 --> 00:25:17.901
so it's where we pick up trees

00:25:17.901 --> 00:25:20.734
and add the specific type
of tree to that location.

00:25:20.734 --> 00:25:22.133
Let's see.

00:25:22.133 --> 00:25:24.901
Here we have trees,
and if you don't believe me,

00:25:24.901 --> 00:25:28.434
we have also enabled
Street View.

00:25:28.434 --> 00:25:32.534
If I click and drag this here,

00:25:32.534 --> 00:25:37.200
there are all the trees.

00:25:37.200 --> 00:25:39.234
Another thing I'll show you
in Street View--

00:25:39.234 --> 00:25:43.734
we'll jump to Moscone here--

00:25:43.734 --> 00:25:45.234
is, as opposed to Street View

00:25:45.234 --> 00:25:48.734
on Google Maps
and the Maps API,

00:25:48.734 --> 00:25:51.567
Street View in Earth
is actually continuous.

00:25:51.567 --> 00:25:56.000
It does interpolation of
the imagery, between panoramas,

00:25:56.000 --> 00:25:58.934
and so it's a much more
fluid experience

00:25:58.934 --> 00:26:03.934
going up and down
the streets.

00:26:03.934 --> 00:26:07.601
So that's a very cool feature,
only available in Google Earth.

00:26:07.601 --> 00:26:09.734
I must say though, my favorite
feature in Google Earth

00:26:09.734 --> 00:26:12.167
is historical imagery.

00:26:12.167 --> 00:26:16.734
This gives you access
to Google's historical imagery,

00:26:16.734 --> 00:26:18.868
satellite imagery.

00:26:18.868 --> 00:26:21.300
Google is a relatively
young company.

00:26:21.300 --> 00:26:23.234
We've been around
for about a decade,

00:26:23.234 --> 00:26:25.767
and Keyhole, the company
that was acquired,

00:26:25.767 --> 00:26:31.267
that then built Google Earth,
is even younger than that,

00:26:31.267 --> 00:26:34.601
but we've been actively
acquiring historical imagery

00:26:34.601 --> 00:26:36.601
and adding it to Google Earth,

00:26:36.601 --> 00:26:38.367
which you can access
through the API.

00:26:38.367 --> 00:26:41.868
This enables you to build
really new types of applications

00:26:41.868 --> 00:26:44.734
that deal with history
and the context of a place.

00:26:44.734 --> 00:26:45.901
Here I'll show you.

00:26:45.901 --> 00:26:47.167
I'll enable
historical imagery.

00:26:47.167 --> 00:26:49.267
I've got a slider--
which as a developer,

00:26:49.267 --> 00:26:51.634
you can show or not show.

00:26:51.634 --> 00:26:55.100
And then, I can disable it,
re-enable it,

00:26:55.100 --> 00:26:57.868
and I'll jump to
San Francisco in 1988

00:26:57.868 --> 00:27:00.367
to show you a cool demo
that I like to show.

00:27:00.367 --> 00:27:04.601
So there was an earthquake
in San Francisco in 1989

00:27:04.601 --> 00:27:08.734
that collapsed
this freeway here

00:27:08.734 --> 00:27:11.467
that led sort of through
the heart of the city.

00:27:11.467 --> 00:27:14.767
I'll show you.
This is the city.

00:27:14.767 --> 00:27:15.767
So we can actually
see that.

00:27:15.767 --> 00:27:17.834
This is prior
to the earthquake,

00:27:17.834 --> 00:27:21.434
and if I move the historical
imagery forward to 1993,

00:27:21.434 --> 00:27:23.868
you can see
that the earthquake--

00:27:23.868 --> 00:27:26.968
or, sorry, the highway
collapsed,

00:27:26.968 --> 00:27:32.601
and then
they took down the freeway.

00:27:32.601 --> 00:27:39.701
But there's still a freeway
here, and as I move forward,

00:27:39.701 --> 00:27:42.634
you can see that they actually
tore down that entire freeway

00:27:42.634 --> 00:27:47.234
and built
this ground-level promenade.

00:27:47.234 --> 00:27:49.367
And then,
jumping to the current time,

00:27:49.367 --> 00:27:51.767
you can see
that they've added trees

00:27:51.767 --> 00:27:53.634
and it actually looks
quite pretty.

00:27:53.634 --> 00:27:56.067
But what I love to show
about this demo

00:27:56.067 --> 00:27:58.968
is that, even 20 years later,
there is a scar

00:27:58.968 --> 00:28:00.601
that runs through the city.

00:28:00.601 --> 00:28:04.701
Where the freeway used to be
is now all parking lots.

00:28:04.701 --> 00:28:07.634
In fact, this is the only new
building that's been developed,

00:28:07.634 --> 00:28:09.934
and if I jump back to 2008,

00:28:09.934 --> 00:28:12.033
you can see it's a parking lot
as well.

00:28:12.033 --> 00:28:15.200
So 20 years later,
after the earthquake,

00:28:15.200 --> 00:28:17.434
there is still a visible scar
that you can see

00:28:17.434 --> 00:28:21.701
through the city,
that you can now--

00:28:21.701 --> 00:28:23.033
you can tell these stories

00:28:23.033 --> 00:28:28.634
using our historical imagery
in the Earth API.

00:28:28.634 --> 00:28:31.133
And then I want to talk
about Fusion Tables.

00:28:31.133 --> 00:28:34.467
Fusion Tables is basically
a tool for storing,

00:28:34.467 --> 00:28:39.467
collaborating, and sharing
large amounts of data.

00:28:39.467 --> 00:28:41.901
You can think of it
as a cloud-based database,

00:28:41.901 --> 00:28:44.467
with tight integration
with the Maps API,

00:28:44.467 --> 00:28:46.234
spatial query support,

00:28:46.234 --> 00:28:50.767
and a sequel-like
query syntax and API.

00:28:50.767 --> 00:28:52.100
The best way to show
you Fusion Tables

00:28:52.100 --> 00:28:55.567
is to actually do
a quick demo.

00:28:55.567 --> 00:28:57.467
So here I have Fusion Tables.

00:28:57.467 --> 00:28:59.334
I have a list of tables
that I own,

00:28:59.334 --> 00:29:01.834
and I'm going to show you
two examples.

00:29:01.834 --> 00:29:07.968
First is this table of roughly
2,000 Brazilian beaches.

00:29:07.968 --> 00:29:10.868
I have the name of the beach,
latitude, and longitude.

00:29:10.868 --> 00:29:14.033
One of the most difficult--
one of the most common questions

00:29:14.033 --> 00:29:17.300
I get is, you know,
"I have 10,000 points

00:29:17.300 --> 00:29:18.667
"that I want to show
on the map.

00:29:18.667 --> 00:29:20.300
What's an easy way
to do this?"

00:29:20.300 --> 00:29:26.167
Well, creating an individual
marker for those points

00:29:26.167 --> 00:29:28.767
gets quite cumbersome
and very slow,

00:29:28.767 --> 00:29:32.501
can be very slow
in a browser.

00:29:32.501 --> 00:29:35.234
So Fusion Tables supports
a very easy way

00:29:35.234 --> 00:29:37.033
to visualize this data.

00:29:37.033 --> 00:29:39.167
I can just click
"visualize map," and you see,

00:29:39.167 --> 00:29:42.667
it's rendered out
all these 2,000 markers

00:29:42.667 --> 00:29:47.367
on top of 256-pixel
square tiles,

00:29:47.367 --> 00:29:50.367
which is the same tiling scheme
that the Maps API uses,

00:29:50.367 --> 00:29:53.167
so it's a transparent tile
with just the markers,

00:29:53.167 --> 00:29:55.901
and then through JavaScript,
it does the hit testing

00:29:55.901 --> 00:30:01.033
to determine where a marker is
and then pull that data through.

00:30:01.033 --> 00:30:03.400
So this is a very quick map.

00:30:03.400 --> 00:30:04.667
There is no lag.

00:30:04.667 --> 00:30:07.000
I very quickly added
these 2,000 points.

00:30:07.000 --> 00:30:09.267
And then if I want to display
a heat map,

00:30:09.267 --> 00:30:11.834
I just click a check box.

00:30:11.834 --> 00:30:14.367
Now, it's very easy
to display a heat map.

00:30:14.367 --> 00:30:17.033
A heat map is,
in case you don't know,

00:30:17.033 --> 00:30:19.234
not a map of temperature.

00:30:19.234 --> 00:30:21.634
It is a map of density.

00:30:21.634 --> 00:30:27.567
So there is a high density
of beaches located down here,

00:30:27.567 --> 00:30:33.534
and it's not quite as dense
with beaches over here.

00:30:33.534 --> 00:30:38.000
And then the other demo
I'll show you is this.

00:30:38.000 --> 00:30:43.868
So I downloaded a CSV from
the American Community Survey,

00:30:43.868 --> 00:30:45.901
which is this government
organization

00:30:45.901 --> 00:30:49.434
that puts out demographic data
every year.

00:30:49.434 --> 00:30:52.868
So it's broken down by
congressional districts,

00:30:52.868 --> 00:30:54.934
and it has some
demographic data,

00:30:54.934 --> 00:30:59.133
like what's the median age
of this congressional district.

00:30:59.133 --> 00:31:03.801
And then, using Fusion Tables,
I merged this CSV.

00:31:03.801 --> 00:31:06.200
I uploaded the CSV
to a fusion table,

00:31:06.200 --> 00:31:08.267
and then I merged
that fusion table

00:31:08.267 --> 00:31:12.100
with a fusion table of all the
U.S. Congressional districts,

00:31:12.100 --> 00:31:15.200
the shapes of the U.S.
congressional districts,

00:31:15.200 --> 00:31:17.167
which I found on
Fusion Tables.

00:31:17.167 --> 00:31:20.701
We have a set of public tables
that you can download from,

00:31:20.701 --> 00:31:23.901
and you can make your data
public as well.

00:31:23.901 --> 00:31:27.868
So you can see, you know,
here is a shape of--

00:31:27.868 --> 00:31:33.968
or various shapes of the first
Alaskan Congressional district.

00:31:33.968 --> 00:31:36.868
Maybe there's only one.

00:31:36.868 --> 00:31:40.767
There's only one.

00:31:40.767 --> 00:31:42.968
And I can visualize this
on a map,

00:31:42.968 --> 00:31:45.434
so it supports
more than just points.

00:31:45.434 --> 00:31:47.501
It supports polylines
and polygons.

00:31:47.501 --> 00:31:49.667
This is not a particularly
interesting map, because,

00:31:49.667 --> 00:31:51.901
you know, I can click on this
and I get all the data,

00:31:51.901 --> 00:31:54.434
but it doesn't really tell me
anything.

00:31:54.434 --> 00:31:56.868
I can very quickly click
on configure styles.

00:31:56.868 --> 00:32:02.300
Let's say I want to color
this map

00:32:02.300 --> 00:32:07.701
based on the median age
of the population--

00:32:07.701 --> 00:32:13.467
let's say from green to red

00:32:13.467 --> 00:32:21.234
and 25-50.

00:32:21.234 --> 00:32:24.434
And you see now
I get a thematic map,

00:32:24.434 --> 00:32:26.634
a map that I can
very quickly look at

00:32:26.634 --> 00:32:30.234
and see which Congressional
districts trend older

00:32:30.234 --> 00:32:36.734
and which Congressional
districts trend younger.

00:32:36.734 --> 00:32:39.367
And then if you're done,
if this is all you want to show,

00:32:39.367 --> 00:32:42.000
I can actually just get
an embeddable link here,

00:32:42.000 --> 00:32:45.667
copy and paste into my web page,
and I get a map.

00:32:45.667 --> 00:32:47.901
But there's more.

00:32:47.901 --> 00:32:50.934
I mentioned tight integration
with Fusion Tables

00:32:50.934 --> 00:32:52.968
in the Maps API Version 3.

00:32:52.968 --> 00:32:55.234
Well, that's exposed through
another layer

00:32:55.234 --> 00:32:57.400
called the Fusion Tables
layer.

00:32:57.400 --> 00:33:00.467
You can see
this is a Maps API site,

00:33:00.467 --> 00:33:04.133
not an embedded I-frame
from Fusion Tables.

00:33:04.133 --> 00:33:05.434
It is in fact styled,

00:33:05.434 --> 00:33:09.567
which is a feature Aaron
will talk about in a little bit,

00:33:09.567 --> 00:33:12.000
and here I'm displaying
the Brazilian beaches

00:33:12.000 --> 00:33:14.400
on top of my Maps API site,

00:33:14.400 --> 00:33:18.634
so I can just define
the experience however I want.

00:33:18.634 --> 00:33:23.434
And I can enable heat map
through the Maps API.

00:33:23.434 --> 00:33:32.267
Maybe I need to click this
two more times.

00:33:32.267 --> 00:33:36.033
Yay, that worked.

00:33:36.033 --> 00:33:37.868
And so I'm also
going to show you

00:33:37.868 --> 00:33:40.567
the Congressional districts maps
that I just made.

00:33:40.567 --> 00:33:43.534
And it supports arbitrary
queries, so here,

00:33:43.534 --> 00:33:45.734
I'm selecting the shape of
the congressional district

00:33:45.734 --> 00:33:48.133
from my table ID,
where the median age

00:33:48.133 --> 00:33:50.167
of the total population
is over 30,

00:33:50.167 --> 00:33:55.601
but I can very quickly
switch this to 40,

00:33:55.601 --> 00:33:59.133
and very quickly
I get dynamic results back,

00:33:59.133 --> 00:34:00.801
so you can build really

00:34:00.801 --> 00:34:07.434
lots of exciting applications
this way.

00:34:07.434 --> 00:34:11.367
Okay.

00:34:11.367 --> 00:34:16.067
There we go.

00:34:16.067 --> 00:34:18.601
Fusion Tables layer
works like the other layers.

00:34:18.601 --> 00:34:20.801
You just create
a new Fusion Tables layer.

00:34:20.801 --> 00:34:22.801
In this case,
I pass in a query.

00:34:22.801 --> 00:34:25.367
If all I want to show
is my fusion table

00:34:25.367 --> 00:34:27.968
without refining or filtering
the query at all,

00:34:27.968 --> 00:34:31.501
I can just provide
the table ID.

00:34:31.501 --> 00:34:34.734
Otherwise,
the sequel-like syntax,

00:34:34.734 --> 00:34:37.367
where you can say average age
is above 40, and then

00:34:37.367 --> 00:34:38.834
if I want it to be
a heat map or not,

00:34:38.834 --> 00:34:41.200
I just set heat map
to true or false.

00:34:41.200 --> 00:34:43.934
If I want to set it,
it's the same as other layers.

00:34:43.934 --> 00:34:46.567
Just call "set map,"
or call "set map," "pass,"

00:34:46.567 --> 00:34:48.200
and "null" to clear it.

00:34:48.200 --> 00:34:54.100
So that's just a tiny bit of
the features of Fusion Tables.

00:34:54.100 --> 00:34:55.400
If you want to learn more
about Fusion Tables,

00:34:55.400 --> 00:34:57.334
how it integrates
with the Maps API,

00:34:57.334 --> 00:34:59.033
and some new features
we're launching,

00:34:59.033 --> 00:35:01.133
you should go to the
"Managing and Visualizing

00:35:01.133 --> 00:35:03.534
Your Geospatial Data
with Fusion Tables" session,

00:35:03.534 --> 00:35:06.734
which is today at 1:15.

00:35:06.734 --> 00:35:13.501
With that,
I'll bring up Aaron.

00:35:13.501 --> 00:35:14.534
There you go.

00:35:14.534 --> 00:35:15.534
Jacobs:
Thanks, Ossama.

00:35:15.534 --> 00:35:16.567
Is this on?
Yes.

00:35:16.567 --> 00:35:19.934
Thanks, Ossama.
And, hi, everybody.

00:35:19.934 --> 00:35:22.434
I'm here to talk about
Maps API web services

00:35:22.434 --> 00:35:24.868
and the Static Maps API.

00:35:24.868 --> 00:35:27.601
What is the Maps API
web service?

00:35:27.601 --> 00:35:30.033
Well, in contrast
to the user-facing APIs

00:35:30.033 --> 00:35:32.567
that Ossama discussed--
the JavaScript, Flash,

00:35:32.567 --> 00:35:38.033
Static Maps API and so on--
this is a database service

00:35:38.033 --> 00:35:42.200
for you to call from your
native code or backend server

00:35:42.200 --> 00:35:45.767
and to consume information
in JSON or XML.

00:35:45.767 --> 00:35:48.434
It lets you benefit
from Google's expertise

00:35:48.434 --> 00:35:51.701
in geospatial data, so you can
do geocoding to find out

00:35:51.701 --> 00:35:53.300
where a street address
is on Earth,

00:35:53.300 --> 00:35:56.868
in latitude/longitude, and
other information about it.

00:35:56.868 --> 00:35:58.767
You can do directions queries
and more,

00:35:58.767 --> 00:36:01.868
which I'm going
to talk about here.

00:36:01.868 --> 00:36:04.300
I do remember that we have
a terms of service

00:36:04.300 --> 00:36:07.100
that requires you to eventually
do something with this data

00:36:07.100 --> 00:36:09.834
on a Google map,
through the JavaScript,

00:36:09.834 --> 00:36:13.501
Flash, Static Maps API,
Earth API, so the idea here

00:36:13.501 --> 00:36:15.634
is you can do further
computation with your server

00:36:15.634 --> 00:36:18.567
or your application
and eventually display a map

00:36:18.567 --> 00:36:21.133
to a user
doing something intelligent

00:36:21.133 --> 00:36:25.367
based on the results
of that computation.

00:36:25.367 --> 00:36:28.000
Oh, also, I should mention,
most of the services

00:36:28.000 --> 00:36:29.868
I'm going to talk about here
are also available

00:36:29.868 --> 00:36:32.734
in the JavaScript API,
so look at the documentation

00:36:32.734 --> 00:36:35.534
for that to see that you can
also use it from the client

00:36:35.534 --> 00:36:37.734
if that's appropriate
for your app.

00:36:37.734 --> 00:36:39.300
So the first one
I'm going to talk about

00:36:39.300 --> 00:36:41.934
that you may have missed
is the Elevation API.

00:36:41.934 --> 00:36:43.634
Now this is exactly
what it sounds like.

00:36:43.634 --> 00:36:47.000
It allows you to give us a line
or a set of points

00:36:47.000 --> 00:36:51.234
and to find out the elevation
of those points on earth.

00:36:51.234 --> 00:36:53.167
That's both elevation
above sea level

00:36:53.167 --> 00:36:56.334
and below sea level
for points that are underwater

00:36:56.334 --> 00:36:58.434
in oceans and lakes.

00:36:58.434 --> 00:37:00.667
This uses our cool bathymetry
data that we have

00:37:00.667 --> 00:37:03.734
that you can see on
Google Earth, previously.

00:37:03.734 --> 00:37:06.701
Now you could use this
to visualize elevation profiles

00:37:06.701 --> 00:37:10.534
or do intelligent things
for bikers or walkers

00:37:10.534 --> 00:37:12.434
and other stuff
that I haven't thought of.

00:37:12.434 --> 00:37:14.467
You guys are the creative ones.

00:37:14.467 --> 00:37:16.033
It's really easy to use.

00:37:16.033 --> 00:37:20.200
For example, here I have sort of
a trivial request that says,

00:37:20.200 --> 00:37:23.567
"Given a path from lat. long.
0-0 to 0-10--"

00:37:23.567 --> 00:37:27.067
this is from the Atlantic Ocean
to the shore of Africa--

00:37:27.067 --> 00:37:28.167
"sample this path three times."

00:37:28.167 --> 00:37:29.467
You could use
a much larger number.

00:37:29.467 --> 00:37:30.868
This is for my example.

00:37:30.868 --> 00:37:34.133
"And tell me the elevations
of the points along that path."

00:37:34.133 --> 00:37:36.067
So you get back
a JSON or XML response

00:37:36.067 --> 00:37:37.701
that looks something like this.

00:37:37.701 --> 00:37:41.667
You see we sampled it at 3.00010
and one in the middle,

00:37:41.667 --> 00:37:43.701
and you can see that you go
from approximately

00:37:43.701 --> 00:37:47.033
5 kilometers under the ocean
to a little bit shallower,

00:37:47.033 --> 00:37:50.434
to about sea level as you hit
the coast of Africa.

00:37:50.434 --> 00:37:52.300
It's that easy to use.

00:37:52.300 --> 00:37:53.367
Check out the documentation.

00:37:53.367 --> 00:37:55.934
It has a couple other
clever features,

00:37:55.934 --> 00:37:57.634
like you can specify points
as addresses

00:37:57.634 --> 00:38:01.133
if that's helpful for you.

00:38:01.133 --> 00:38:02.701
Another service
I'd like to talk about

00:38:02.701 --> 00:38:06.901
that we launched last week is
called the Distance Matrix API.

00:38:06.901 --> 00:38:09.934
This is where you have a set
of origins and destinations,

00:38:09.934 --> 00:38:13.467
and you want to find out for
each pair of origin/destination

00:38:13.467 --> 00:38:15.400
how far they are
from each other.

00:38:15.400 --> 00:38:18.267
Now, this is in terms of
drive time and drive distance

00:38:18.267 --> 00:38:21.434
or walk time and walk distance,
not as the crow flies,

00:38:21.434 --> 00:38:23.167
so this can be pretty useful
to you.

00:38:23.167 --> 00:38:26.934
It uses our Directions
API data.

00:38:26.934 --> 00:38:29.000
So for example, if you want
to find out how far it is

00:38:29.000 --> 00:38:31.501
from L.A. to San Diego and--

00:38:31.501 --> 00:38:34.968
sorry, from L.A. or San Diego
to San Francisco or Sacramento,

00:38:34.968 --> 00:38:36.467
you would make a request
that looks like this--

00:38:36.467 --> 00:38:39.968
you see it's very easy--
and get back this information.

00:38:39.968 --> 00:38:42.234
Now what's this good for?
You could, for example,

00:38:42.234 --> 00:38:44.701
use this to make
an advance store finder app,

00:38:44.701 --> 00:38:47.067
which given a set of
your stores or locations

00:38:47.067 --> 00:38:49.934
or whatever it is that
you are displaying,

00:38:49.934 --> 00:38:52.167
and the user's location,
or a couple of users' locations,

00:38:52.167 --> 00:38:53.400
home and work,

00:38:53.400 --> 00:38:56.634
you can do intelligent things
based on this,

00:38:56.634 --> 00:38:59.634
much smarter than getting the
closest store as the crow flies,

00:38:59.634 --> 00:39:01.801
which might involve
a heavily trafficked road

00:39:01.801 --> 00:39:04.334
or something like that.

00:39:04.334 --> 00:39:05.734
Yes.

00:39:05.734 --> 00:39:09.267
Another directions related
service is route optimization.

00:39:09.267 --> 00:39:10.901
Now, if you've used
the Directions API,

00:39:10.901 --> 00:39:13.167
you know that you can give
an origin and a destination.

00:39:13.167 --> 00:39:16.901
Say the user wants to go
from A to D, via B and C,

00:39:16.901 --> 00:39:20.100
so that means you need to hit
points B and C in the middle.

00:39:20.100 --> 00:39:23.634
Previously, if you tell us this,
we'll just naively follow

00:39:23.634 --> 00:39:26.167
the set of points
that you specify,

00:39:26.167 --> 00:39:28.100
but this may not be optimum.

00:39:28.100 --> 00:39:30.434
What we allow you to do is,
in your way point list,

00:39:30.434 --> 00:39:33.968
you can say "optimize true,"
and what we'll do is

00:39:33.968 --> 00:39:36.033
we'll reorder those
intermediate way points for you

00:39:36.033 --> 00:39:38.834
so that the user,
or whoever's traveling,

00:39:38.834 --> 00:39:41.100
has the most efficient route
through all these points.

00:39:41.100 --> 00:39:43.100
This is known as the
traveling salesman problem,

00:39:43.100 --> 00:39:47.567
for those who are familiar
from computer science.

00:39:47.567 --> 00:39:49.234
As with all of the things
I've mentioned so far,

00:39:49.234 --> 00:39:51.767
it's very easy to use.
You just say "optimize, true."

00:39:51.767 --> 00:39:53.868
We hold the origin
and destination fixed

00:39:53.868 --> 00:39:55.567
because we assume that's
where the user wants to start

00:39:55.567 --> 00:39:59.033
and wind up,
and we do the magic for you.

00:39:59.033 --> 00:40:00.834
We'll give back
the right directions

00:40:00.834 --> 00:40:03.000
based on the optimum order,
and if your application

00:40:03.000 --> 00:40:05.100
needs to know how they were
reordered for some reason,

00:40:05.100 --> 00:40:07.100
we return the field
called "way point order"

00:40:07.100 --> 00:40:08.234
that tells you that.

00:40:08.234 --> 00:40:10.734
So for example,
with this query here,

00:40:10.734 --> 00:40:13.534
I've generated a few maps
using aesthetic Maps API--

00:40:13.534 --> 00:40:16.067
or one map actually--
so this is from L.A. to New York

00:40:16.067 --> 00:40:18.534
via these intermediate cities.

00:40:18.534 --> 00:40:20.767
The red path is what you'll get
if you do it in the naive order,

00:40:20.767 --> 00:40:21.734
and you can see
that it crisscrosses

00:40:21.734 --> 00:40:23.167
all over the country.

00:40:23.167 --> 00:40:25.701
It's very inefficient
and probably takes a few days.

00:40:25.701 --> 00:40:28.367
Whereas the green path,
you see it's been reordered

00:40:28.367 --> 00:40:31.400
to do this in an efficient way.

00:40:31.400 --> 00:40:34.868
So yeah, it's exactly
what it sounds like.

00:40:34.868 --> 00:40:36.701
Another directions-related
feature

00:40:36.701 --> 00:40:38.501
is bicycling directions.

00:40:38.501 --> 00:40:39.767
So previously
in the Directions API,

00:40:39.767 --> 00:40:41.901
we only supported
driving and walking,

00:40:41.901 --> 00:40:44.234
and you guys are probably
familiar with these

00:40:44.234 --> 00:40:46.067
from maps.google.com,

00:40:46.067 --> 00:40:48.934
which allows you to get
directions, as you know.

00:40:48.934 --> 00:40:51.567
We've added support
for bicycling directions,

00:40:51.567 --> 00:40:53.868
and all you do is say
"mode equals bicycling,"

00:40:53.868 --> 00:40:57.400
and we'll use what we know
about bike paths and local roads

00:40:57.400 --> 00:40:59.667
and that sort of thing
to find routes

00:40:59.667 --> 00:41:01.567
that are suitable for biking.

00:41:01.567 --> 00:41:03.501
So for example,

00:41:03.501 --> 00:41:05.601
here's a trip from--sorry,

00:41:05.601 --> 00:41:07.901
from Santa Monica
to Hollywood in L.A.,

00:41:07.901 --> 00:41:09.834
and if you're familiar with
L.A., you see this red path,

00:41:09.834 --> 00:41:12.534
which is the driving path--
takes a couple of freeways

00:41:12.534 --> 00:41:14.434
that you really don't
want to take on a bike.

00:41:14.434 --> 00:41:17.267
But the green path takes
bike paths and local roads,

00:41:17.267 --> 00:41:19.767
and it's probably
quite a bit more pleasant.

00:41:19.767 --> 00:41:23.100
We also of course adjust all
of the drive--sorry, ride times

00:41:23.100 --> 00:41:28.767
and that sort of thing
according to biking speed.

00:41:28.767 --> 00:41:31.234
Moving on, another announcement
that we're making--

00:41:31.234 --> 00:41:33.367
or have made recently,
excuse me--

00:41:33.367 --> 00:41:37.133
is that now everybody is allowed
to use SSL for our web services

00:41:37.133 --> 00:41:39.434
and JavaScript requests.

00:41:39.434 --> 00:41:41.167
If you're not familiar with SSL,
this is a way

00:41:41.167 --> 00:41:43.200
to encrypt the data
that the browser

00:41:43.200 --> 00:41:46.234
or your code sends to Google
so that nobody in between

00:41:46.234 --> 00:41:47.667
can snoop on it.

00:41:47.667 --> 00:41:50.267
You can use this if you have
sensitive user application data

00:41:50.267 --> 00:41:52.467
that you don't want anybody
in the middle to see.

00:41:52.467 --> 00:41:55.434
And it's just kind of
a good idea for the Internet,

00:41:55.434 --> 00:41:57.868
for users' data.

00:41:57.868 --> 00:42:00.501
Previously this was a feature
that was only available

00:42:00.501 --> 00:42:04.901
to Maps API Premier customers,
but now you can all use it.

00:42:04.901 --> 00:42:06.501
Everybody can use it.

00:42:06.501 --> 00:42:07.834
It's very easy.

00:42:07.834 --> 00:42:09.567
All you do is make sure
you're sending your request

00:42:09.567 --> 00:42:13.000
to maps.googleapis.com,
and change your URLs

00:42:13.000 --> 00:42:15.167
to use HTTPs,
and it's that simple.

00:42:15.167 --> 00:42:19.501
You don't need to make
any other changes.

00:42:19.501 --> 00:42:22.501
Right, so moving on to
the Static Maps API.

00:42:22.501 --> 00:42:25.133
The Static Maps API is an
alternative to the JavaScript

00:42:25.133 --> 00:42:28.901
and Flash and Earth APIs,
which are for interactive maps

00:42:28.901 --> 00:42:31.968
that are sort of immersive
for the user.

00:42:31.968 --> 00:42:32.968
They can drag them around
and zoom in and out

00:42:32.968 --> 00:42:34.534
and do what they like.

00:42:34.534 --> 00:42:36.334
If you're in an environment
where you don't have JavaScript

00:42:36.334 --> 00:42:39.767
or Flash available, or where
latency is absolutely critical,

00:42:39.767 --> 00:42:42.033
what the Static Maps API
allows you to do

00:42:42.033 --> 00:42:44.434
is create an appropriate URL

00:42:44.434 --> 00:42:47.934
that will return a map image
that can contain markers

00:42:47.934 --> 00:42:49.868
and polylines
and custom icons,

00:42:49.868 --> 00:42:51.934
but is not otherwise
interactive.

00:42:51.934 --> 00:42:53.934
And you simply stick
that in an image tag,

00:42:53.934 --> 00:42:57.767
and now you have a map on your
site, or in your mobile app,

00:42:57.767 --> 00:43:00.100
or whatever environment
you're in.

00:43:00.100 --> 00:43:01.567
I should mention,
there is a requirement

00:43:01.567 --> 00:43:03.901
that if you're in a mobile app
or anything like that,

00:43:03.901 --> 00:43:08.634
you need to link back to
maps.google.com in some manner.

00:43:08.634 --> 00:43:10.667
But it's very easy to use.

00:43:10.667 --> 00:43:13.534
You simply give a size,
and you can say--for example,

00:43:13.534 --> 00:43:14.834
if you want to show
a map of Australia

00:43:14.834 --> 00:43:18.000
with these cities
highlighted with markers,

00:43:18.000 --> 00:43:20.133
all you do is
make a URL like this.

00:43:20.133 --> 00:43:22.968
You get back a map like this.
Isn't that beautiful?

00:43:22.968 --> 00:43:28.267
I have a couple Static Maps
API features to discuss.

00:43:28.267 --> 00:43:30.467
The first one is
high-resolution static maps.

00:43:30.467 --> 00:43:32.667
So for example, if you are
on a mobile device

00:43:32.667 --> 00:43:36.968
with a high DPI screen or you
need a map for printing purposes

00:43:36.968 --> 00:43:39.801
or anything like that,
what you can do is tell us

00:43:39.801 --> 00:43:43.634
to upscale the map
by 2x or 4x.

00:43:43.634 --> 00:43:45.367
And what we'll do is
we'll give you a map back

00:43:45.367 --> 00:43:48.300
that has twice or four times as
many pixels in each dimension,

00:43:48.300 --> 00:43:49.801
and more rendering detail.

00:43:49.801 --> 00:43:51.801
So when you show that map
at the same physical size

00:43:51.801 --> 00:43:54.934
on the mobile screen or printed,
it will look better.

00:43:54.934 --> 00:43:56.901
It will look less fuzzy.

00:43:56.901 --> 00:43:58.601
It's pretty easy to use.

00:43:58.601 --> 00:44:01.300
You just say "scale equals two,"
"scale equals four."

00:44:01.300 --> 00:44:02.901
If you have custom icons
for your markers,

00:44:02.901 --> 00:44:05.000
there's a way to specify
that these are

00:44:05.000 --> 00:44:08.300
the appropriate resolution, and
we will render them correctly.

00:44:08.300 --> 00:44:12.200
So for example, here's a map
of Sydney at our usual scale,

00:44:12.200 --> 00:44:14.667
and I will show you one
at 2x scale which--

00:44:14.667 --> 00:44:16.300
imagine it has gotten
twice as large

00:44:16.300 --> 00:44:18.200
and is now outside
the bounds of the slide.

00:44:18.200 --> 00:44:20.367
It's kind of hard to show
on a projector,

00:44:20.367 --> 00:44:23.100
but you see that all of
the labels have gotten larger,

00:44:23.100 --> 00:44:25.167
the road detail
has gotten larger,

00:44:25.167 --> 00:44:26.634
there's more rendering detail
there.

00:44:26.634 --> 00:44:28.834
So now if you shrunk this back
down to the same physical size,

00:44:28.834 --> 00:44:31.133
it would look better
for your user.

00:44:31.133 --> 00:44:35.834
See the documentation for more
explanation of how this works.

00:44:35.834 --> 00:44:39.434
Finally, one other feature
is custom static map styles.

00:44:39.434 --> 00:44:43.200
Now, this is also available in
the JavaScript and Flash APIs.

00:44:43.200 --> 00:44:44.701
But it's this
really nifty feature

00:44:44.701 --> 00:44:47.834
that allows you to change the
default styling of Google Maps

00:44:47.834 --> 00:44:51.067
to fit the branding
of your application or product,

00:44:51.067 --> 00:44:56.033
or to emphasize particular data
by de-emphasizing other data,

00:44:56.033 --> 00:44:59.634
or coloring it
or however you like.

00:44:59.634 --> 00:45:02.868
It's based on a set
of style parameters

00:45:02.868 --> 00:45:04.300
in the Static Maps API,

00:45:04.300 --> 00:45:06.300
where you give
a list of features

00:45:06.300 --> 00:45:08.534
that you'd like to restyle--
for example, roads or water

00:45:08.534 --> 00:45:09.534
or anything like that--

00:45:09.534 --> 00:45:10.868
elements
you'd like to restyle,

00:45:10.868 --> 00:45:13.267
like their labels
or their geometry or both,

00:45:13.267 --> 00:45:14.701
and then
a way to restyle them--

00:45:14.701 --> 00:45:15.901
for example,
changing their color

00:45:15.901 --> 00:45:19.367
to something
that's bluish here.

00:45:19.367 --> 00:45:20.934
Let me give you an example.

00:45:20.934 --> 00:45:23.634
This is a map of the area
around the Moscone Center

00:45:23.634 --> 00:45:25.267
where we currently are.

00:45:25.267 --> 00:45:27.267
You can see
it's in the Google style

00:45:27.267 --> 00:45:30.067
that we all know and love,
hopefully.

00:45:30.067 --> 00:45:31.334
And if you change it,

00:45:31.334 --> 00:45:33.167
you can change it
relatively significantly.

00:45:33.167 --> 00:45:35.234
I've re-colored the roads
to be blue,

00:45:35.234 --> 00:45:36.968
done some desaturation.

00:45:36.968 --> 00:45:38.601
I've turned off some labels,

00:45:38.601 --> 00:45:41.100
for example the P and the--
I can't read it from here,

00:45:41.100 --> 00:45:43.100
but these labels.

00:45:43.100 --> 00:45:44.634
And you see it's all gone.

00:45:44.634 --> 00:45:47.734
You've significantly changed
the look and feel of the map.

00:45:47.734 --> 00:45:51.868
Now we have a--if you Google
for "styled map wizard,"

00:45:51.868 --> 00:45:55.300
we have this nifty tool
that will let you interactively

00:45:55.300 --> 00:45:56.834
create these styles.

00:45:56.834 --> 00:45:58.334
And you can see
that it's pretty powerful.

00:45:58.334 --> 00:46:00.534
So for example,
here's a map of San Francisco.

00:46:00.534 --> 00:46:04.934
I can easily change the water
to red, say add style,

00:46:04.934 --> 00:46:08.033
and for example, change
the roads to green,

00:46:08.033 --> 00:46:10.133
and now I have a map that seems
quite a bit different.

00:46:10.133 --> 00:46:12.634
It's also very ugly.
Please be careful with this,

00:46:12.634 --> 00:46:14.534
but it's up to you to make
things that look nice

00:46:14.534 --> 00:46:17.200
and emphasize what you want
to emphasize.

00:46:17.200 --> 00:46:21.734
Excuse me, I need to go
back to my slides.

00:46:21.734 --> 00:46:24.601
So in summary,
Geo APIs at Google.

00:46:24.601 --> 00:46:25.767
There are a lot of them.

00:46:25.767 --> 00:46:27.234
It's not just
the JavaScript Maps API.

00:46:27.234 --> 00:46:28.667
We have Flash,
we have Earth,

00:46:28.667 --> 00:46:30.000
we have all of
the other products

00:46:30.000 --> 00:46:33.801
that have geo-integration
that Ossama mentioned.

00:46:33.801 --> 00:46:35.968
The Maps API itself
has a ton of features.

00:46:35.968 --> 00:46:38.767
You often just see maps
that are a base map

00:46:38.767 --> 00:46:40.501
and markers and that's it.
Go beyond that.

00:46:40.501 --> 00:46:43.067
You can make great
user experiences.

00:46:43.067 --> 00:46:45.634
Fusion Tables is a powerful
platform for storing your data

00:46:45.634 --> 00:46:49.300
and visualizing it
in even more advanced ways.

00:46:49.300 --> 00:46:50.634
We have the Earth API

00:46:50.634 --> 00:46:53.934
for all these interactive
awesomeness and trees.

00:46:53.934 --> 00:46:55.901
And we have secure web services
that you can talk to

00:46:55.901 --> 00:46:57.300
from your back end,

00:46:57.300 --> 00:47:00.667
make sure user data doesn't go
out from the browser,

00:47:00.667 --> 00:47:02.801
optimize for latency,
whatever you need.

00:47:02.801 --> 00:47:04.133
And we have the static map.

00:47:04.133 --> 00:47:05.434
The Static Maps API,

00:47:05.434 --> 00:47:07.200
when JavaScript and Flash
aren't an option,

00:47:07.200 --> 00:47:11.000
or you need to optimize
for latency again, as I said.

00:47:11.000 --> 00:47:14.501
With that, I'm going to say
thank you.

00:47:14.501 --> 00:47:16.200
I'm going to invite Ossama up
for Q&amp;A,

00:47:16.200 --> 00:47:17.601
and I'm going to mention,

00:47:17.601 --> 00:47:19.167
if you'd like to give us
some feedback on this talk,

00:47:19.167 --> 00:47:20.367
please do.

00:47:20.367 --> 00:47:23.133
Here's a short link
that you can visit

00:47:23.133 --> 00:47:25.801
to give us feedback.
Thank you.

00:47:25.801 --> 00:47:31.968
Alami:
Thanks very much.

00:47:31.968 --> 00:47:34.133
Jacobs: Does anybody
have any questions?

00:47:34.133 --> 00:47:35.767
Alami:
Go ahead at the mic.

00:47:35.767 --> 00:47:36.767
man: So a couple
quick questions

00:47:36.767 --> 00:47:38.934
in relation to Fusion Tables.

00:47:38.934 --> 00:47:41.133
For one, how large
of a fusion table

00:47:41.133 --> 00:47:46.934
do you guys support, and like,
could I upload a million points?

00:47:46.934 --> 00:47:49.767
Alami: I believe we support
up to 150 megs.

00:47:49.767 --> 00:47:50.968
man:
Okay.

00:47:50.968 --> 00:47:53.767
Alami: But you can purchase
larger amounts.

00:47:53.767 --> 00:47:55.200
man:
Okay.

00:47:55.200 --> 00:47:58.868
And then the second question is,
I know they come back as images.

00:47:58.868 --> 00:48:03.133
Is there a special on-click
event where I can hook in

00:48:03.133 --> 00:48:05.801
and have first priority
on getting the data

00:48:05.801 --> 00:48:07.067
of where the point is?

00:48:07.067 --> 00:48:09.834
And I'll give you
my specific use case.

00:48:09.834 --> 00:48:12.033
Really nice to have
all those as an image

00:48:12.033 --> 00:48:13.534
because it's less--
Alami: Right.

00:48:13.534 --> 00:48:15.000
man: It's more performant,
there's no DOM elements.

00:48:15.000 --> 00:48:16.901
But if I have a user
that hits a mouse down

00:48:16.901 --> 00:48:18.467
and clicks
on the actual point,

00:48:18.467 --> 00:48:20.033
I'd like to be able to
inflate it

00:48:20.033 --> 00:48:21.734
as a regular DOM element.

00:48:21.734 --> 00:48:22.968
Is that something
I can hook into

00:48:22.968 --> 00:48:24.200
through an event

00:48:24.200 --> 00:48:27.167
and get back the dimensions
of the place?

00:48:27.167 --> 00:48:28.934
Alami: Yes.
man: Okay.

00:48:28.934 --> 00:48:32.300
Alami: So we do expose events
based on clicks,

00:48:32.300 --> 00:48:37.133
and you could also query
Fusion Tables API separately,

00:48:37.133 --> 00:48:39.434
but we do expose that through
the Fusion Tables layer.

00:48:39.434 --> 00:48:40.968
man: Okay, so I just take that
and I can drop it

00:48:40.968 --> 00:48:43.901
into a new mount marker,
sort of, its own parameters

00:48:43.901 --> 00:48:46.200
and it'll just create one
at that point?

00:48:46.200 --> 00:48:47.901
Alami: That's right.
man: Cool.

00:48:47.901 --> 00:48:49.467
Alami:
We'll take the front.

00:48:49.467 --> 00:48:53.434
man: So last I checked the--
sorry, the Maps API for GWT

00:48:53.434 --> 00:48:55.934
is stuck on Version 2.
Is that still the case,

00:48:55.934 --> 00:48:58.601
and do you have plans
to update that?

00:48:58.601 --> 00:49:00.200
Alami: I don't know
the answer to that.

00:49:00.200 --> 00:49:01.501
I know there are--
sorry.

00:49:01.501 --> 00:49:04.300
The question was,
the Maps API for GWT

00:49:04.300 --> 00:49:08.200
is currently on Version 2.

00:49:08.200 --> 00:49:12.033
I know there are a couple
of open-source Version 3

00:49:12.033 --> 00:49:14.901
implementations
of the Maps API.

00:49:14.901 --> 00:49:18.000
I don't know what the current
plan is for Version 2,

00:49:18.000 --> 00:49:23.901
the GWT implementation.

00:49:23.901 --> 00:49:25.334
We'll--back mic.

00:49:25.334 --> 00:49:27.033
man: I've got two
quick questions.

00:49:27.033 --> 00:49:31.767
One is, I saw you color-code
various states on the USA map.

00:49:31.767 --> 00:49:35.501
Do you actually ship political
boundaries that we could use,

00:49:35.501 --> 00:49:38.267
or do we have to get it
ourselves?

00:49:38.267 --> 00:49:41.467
Alami: So the question was,
on the U.S. map

00:49:41.467 --> 00:49:42.801
for the Fusion Tables example,

00:49:42.801 --> 00:49:45.634
I showed U.S. Congressional
district boundaries.

00:49:45.634 --> 00:49:48.067
Where did I get that data?

00:49:48.067 --> 00:49:50.100
I actually pulled that data
from Fusion Tables.

00:49:50.100 --> 00:49:53.067
We have a large set
of public tables

00:49:53.067 --> 00:49:55.934
that we've made available
as well as users

00:49:55.934 --> 00:49:59.334
who have contributed data and
made that available publicly.

00:49:59.334 --> 00:50:02.634
So in Fusion Tables,
all you have to do--

00:50:02.634 --> 00:50:06.434
all I searched for, in fact, was
U.S. Congressional districts,

00:50:06.434 --> 00:50:07.934
and it's the first table
I found.

00:50:07.934 --> 00:50:08.934
man:
I see, I see.

00:50:08.934 --> 00:50:10.234
I have two more
quick questions.

00:50:10.234 --> 00:50:13.400
One is, in a typical map,
is there an upper limit

00:50:13.400 --> 00:50:15.267
to how many markers
I can display--

00:50:15.267 --> 00:50:19.100
like, can I display
20,000 markers?

00:50:19.100 --> 00:50:21.767
Alami: Yes, so there
is an upper limit.

00:50:21.767 --> 00:50:26.133
The question was--

00:50:26.133 --> 00:50:28.701
Jacobs: How many markers
can you show on a map?

00:50:28.701 --> 00:50:30.901
We do pretty well these days
with lots of them,

00:50:30.901 --> 00:50:32.334
with thousands even,

00:50:32.334 --> 00:50:34.767
but if you have, like,
a truly ridiculous number,

00:50:34.767 --> 00:50:36.467
you can use something like
Fusion Tables

00:50:36.467 --> 00:50:40.067
or a KML layer or two
to offload some of that work

00:50:40.067 --> 00:50:42.234
to the server side and save
the browser from doing it,

00:50:42.234 --> 00:50:44.200
and it's even more performant.
Alami: Yeah.

00:50:44.200 --> 00:50:46.634
Specifically,
there is no hard limit.

00:50:46.634 --> 00:50:49.534
You can continue to add
as many markers as you like.

00:50:49.534 --> 00:50:51.400
Your browser performance
will suffer.

00:50:51.400 --> 00:50:52.767
man: I see.
Alami: Yeah.

00:50:52.767 --> 00:50:54.767
man: And the last question is,
say I have a database

00:50:54.767 --> 00:50:59.133
that has like 1 million
addresses, customer addresses.

00:50:59.133 --> 00:51:00.667
Is there a tool
Google offers

00:51:00.667 --> 00:51:04.434
to convert them
into lats and longitude?

00:51:04.434 --> 00:51:08.467
Alami: So the question was,
if you have a database

00:51:08.467 --> 00:51:11.567
full of addresses,
and you wanted to geocode

00:51:11.567 --> 00:51:13.834
all those addresses--
so if you upload them

00:51:13.834 --> 00:51:15.100
to Fusion Tables,

00:51:15.100 --> 00:51:17.501
Fusion Tables will take care
of the geocoding.

00:51:17.501 --> 00:51:19.934
Jacobs: There also
is the opportunity

00:51:19.934 --> 00:51:21.601
to use the geocoding
web service,

00:51:21.601 --> 00:51:23.167
which is one of those
web services I mentioned.

00:51:23.167 --> 00:51:24.701
You do need to make sure
that you're within

00:51:24.701 --> 00:51:27.334
the terms of service, using
this with a map eventually.

00:51:27.334 --> 00:51:29.767
I'm not sure of the details.
Sorry, I'm not a lawyer.

00:51:29.767 --> 00:51:33.601
But you can use either
of these methods.

00:51:33.601 --> 00:51:35.934
man: Thank you.
Great presentation.

00:51:35.934 --> 00:51:37.367
Jacobs:
Thank you.

00:51:37.367 --> 00:51:39.400
man: I had a small question
regarding the Sun Cells input.

00:51:39.400 --> 00:51:41.767
Is there anything for,
for example, compass,

00:51:41.767 --> 00:51:44.334
gyroscope, or any
accelerational movement?

00:51:44.334 --> 00:51:47.667
So basically, in the API,
if the compass moves around,

00:51:47.667 --> 00:51:50.767
do you have any simple input
or do you need to use a 0,

00:51:50.767 --> 00:51:53.801
90, and 180 and so on?

00:51:53.801 --> 00:51:56.033
Alami: So the question
was if there's any tie-in

00:51:56.033 --> 00:52:00.234
to sensors on the phone,
for instance, gyroscope.

00:52:00.234 --> 00:52:03.367
There isn't anything specific
in the Maps API.

00:52:03.367 --> 00:52:05.367
You'd have to code
that yourself.

00:52:05.367 --> 00:52:07.701
Jacobs: You can of course
get it from the HTML5,

00:52:07.701 --> 00:52:11.067
support for it, or I think
there are other technologies--

00:52:11.067 --> 00:52:14.200
I'm not too familiar with this--
but no, we don't have

00:52:14.200 --> 00:52:15.667
anything canned for you,
sorry.

00:52:15.667 --> 00:52:17.901
man:
Okay. Thanks.

00:52:17.901 --> 00:52:20.100
Alami: I will do
the back mic.

00:52:20.100 --> 00:52:23.234
man: Yes. Is it possible to
work in offline mode?

00:52:23.234 --> 00:52:25.234
No Internet?

00:52:25.234 --> 00:52:27.634
Alami: The question was, will
the maps work in offline mode?

00:52:27.634 --> 00:52:30.067
The answer is no.
Jacobs: Yeah.

00:52:30.067 --> 00:52:33.467
Alami: We load map tiles
from our servers,

00:52:33.467 --> 00:52:36.033
as well as if you use
services like geocoding,

00:52:36.033 --> 00:52:37.601
or you rely on any of those.

00:52:37.601 --> 00:52:41.300
It requires an Internet
connection to make that work.

00:52:41.300 --> 00:52:44.000
man: What if we have
Enterprise database?

00:52:44.000 --> 00:52:47.467
Alami: It would still require
Internet connection

00:52:47.467 --> 00:52:48.834
to make that work.

00:52:48.834 --> 00:52:52.234
The one--sorry,
the follow-up question,

00:52:52.234 --> 00:52:55.601
I've been told by everybody
to repeat the questions.

00:52:55.601 --> 00:52:57.300
The follow-up question was
what if you have

00:52:57.300 --> 00:53:00.400
an Enterprise database
or something.

00:53:00.400 --> 00:53:03.767
There is a product called
Google Earth Enterprise,

00:53:03.767 --> 00:53:05.334
which will let you--

00:53:05.334 --> 00:53:06.467
man: That's what
I was talking about.

00:53:06.467 --> 00:53:07.968
Alami:
Yeah.

00:53:07.968 --> 00:53:10.868
So I actually don't know
the specifics about that,

00:53:10.868 --> 00:53:14.267
but if you visit us
in office hours,

00:53:14.267 --> 00:53:16.634
or in the sandbox,
I can find somebody

00:53:16.634 --> 00:53:18.834
to answer that question
for you.

00:53:18.834 --> 00:53:22.968
Jacobs:
Maybe at the front here?

00:53:22.968 --> 00:53:27.501
man: Do you have any integration
with Google Latitude?

00:53:27.501 --> 00:53:28.934
Alami:
The question was,

00:53:28.934 --> 00:53:31.434
are there any integration
options with Google Latitude?

00:53:31.434 --> 00:53:34.968
There are no canned
implementations.

00:53:34.968 --> 00:53:37.501
There is
no canned integration,

00:53:37.501 --> 00:53:39.367
so you would have to write
that on your own.

00:53:39.367 --> 00:53:40.400
man:
Okay, great, thank you.

00:53:40.400 --> 00:53:42.100
Alami:
Sure.

00:53:42.100 --> 00:53:43.868
Jacobs:
In the back?

00:53:43.868 --> 00:53:45.200
man: The Fusion Tables--
you mentioned there was

00:53:45.200 --> 00:53:48.534
a 150 data point limit
on that.

00:53:48.534 --> 00:53:50.968
Is there a way to
layer multiple ones of those?

00:53:50.968 --> 00:53:52.868
Jacobs: It's actually
150 megs, I think.

00:53:52.868 --> 00:53:54.067
man:
Oh, 150 megs?

00:53:54.067 --> 00:53:55.601
Jacobs: So you can put
a lot of data in there.

00:53:55.601 --> 00:53:57.067
man: Okay, I've got
more than that easily.

00:53:57.067 --> 00:54:00.634
Is there a way that you can
layer multiple layers

00:54:00.634 --> 00:54:02.868
on top of each other--
to, let's say,

00:54:02.868 --> 00:54:04.734
do a northwest region
or southwest region--

00:54:04.734 --> 00:54:06.000
and then put those layers

00:54:06.000 --> 00:54:08.267
and generate heat maps
based on that?

00:54:08.267 --> 00:54:09.834
Alami: Yeah.
The question was,

00:54:09.834 --> 00:54:12.934
can I layer multiple Fusion
Tables layers on top of the map,

00:54:12.934 --> 00:54:14.701
and the answer is yes.

00:54:14.701 --> 00:54:15.834
man:
Excellent.

00:54:15.834 --> 00:54:17.200
Alami: I believe
you can do up to five?

00:54:17.200 --> 00:54:18.601
Jacobs: You might need to be
clever about what to do

00:54:18.601 --> 00:54:19.701
with the boundaries,

00:54:19.701 --> 00:54:21.300
especially if you're
doing heat maps,

00:54:21.300 --> 00:54:23.167
but I'll leave that
up to you.

00:54:23.167 --> 00:54:26.701
man: Great.
Thank you very much.

00:54:26.701 --> 00:54:29.868
man: My question is on metadata
and coverage information.

00:54:29.868 --> 00:54:34.234
For example, when you set the
tilt to the 45 degrees, to 45,

00:54:34.234 --> 00:54:36.667
what happens if the data
is not available for the area?

00:54:36.667 --> 00:54:38.501
And in general, I want to ask

00:54:38.501 --> 00:54:39.801
about coverage
information, like,

00:54:39.801 --> 00:54:41.300
given the latitude and longitude
of a city,

00:54:41.300 --> 00:54:44.567
do we have historical data
the area--for the area?

00:54:44.567 --> 00:54:49.200
I wish you can create
like a Google Maps API

00:54:49.200 --> 00:54:53.234
database offline, manual UI
base, to give that information.

00:54:53.234 --> 00:54:55.968
That would be very valuable.

00:54:55.968 --> 00:54:58.300
Alami:
So a couple of questions.

00:54:58.300 --> 00:55:00.334
The first was what happens
if you call "set tilt"

00:55:00.334 --> 00:55:01.767
on 45-degree imagery

00:55:01.767 --> 00:55:04.234
and we don't have
that imagery available.

00:55:04.234 --> 00:55:09.267
It'll simply just show
the satellite mode and--

00:55:09.267 --> 00:55:11.200
Jacobs: More generally,
do we have information available

00:55:11.200 --> 00:55:13.634
about where we have
various types of imagery,

00:55:13.634 --> 00:55:15.901
and I don't know the answer.

00:55:15.901 --> 00:55:20.400
Alami: You can query for imagery
within the Earth API,

00:55:20.400 --> 00:55:23.567
but we do not have
a web service

00:55:23.567 --> 00:55:26.133
that you can hit,
or something within the Maps API

00:55:26.133 --> 00:55:27.901
that you can query
for historical imagery.

00:55:27.901 --> 00:55:30.534
man: Okay.

00:55:30.534 --> 00:55:32.400
man: A few questions
on other layers you might have.

00:55:32.400 --> 00:55:35.934
Do you have U.S. ZIP codes?

00:55:35.934 --> 00:55:38.868
Alami: The question
was on additional layers.

00:55:38.868 --> 00:55:40.534
You can just search
Fusion Tables.

00:55:40.534 --> 00:55:42.033
I don't know
off the top of my head

00:55:42.033 --> 00:55:43.667
what we have loaded in there,
and in fact,

00:55:43.667 --> 00:55:45.167
people have made
layers available

00:55:45.167 --> 00:55:46.868
that I don't know about,

00:55:46.868 --> 00:55:50.801
so simply go to
google.com/Fusion Tables

00:55:50.801 --> 00:55:52.367
and search for
whatever you want,

00:55:52.367 --> 00:55:55.167
or you can browse
public layers.

00:55:55.167 --> 00:55:57.667
man: And so
this is relatively new, and--

00:55:57.667 --> 00:56:01.234
Are you expecting a lot
of user-contributed data?

00:56:01.234 --> 00:56:02.567
Jacobs:
Please contribute, yes.

00:56:02.567 --> 00:56:03.667
Alami:
Yeah.

00:56:03.667 --> 00:56:07.267
Fusion Tables--
when did we--

00:56:07.267 --> 00:56:10.467
so Fusion Tables came out of lab
several quarters ago.

00:56:10.467 --> 00:56:13.901
It is now not only--

00:56:13.901 --> 00:56:15.501
man:
Formally part of the API?

00:56:15.501 --> 00:56:17.000
Alami:
It is--

00:56:17.000 --> 00:56:19.267
Jacobs: It's sort of
an independent product,

00:56:19.267 --> 00:56:22.200
but we have a little bit of,
you know, nice integration here

00:56:22.200 --> 00:56:24.734
in the Fusion Tables layer
that Ossama described.

00:56:24.734 --> 00:56:25.767
man: Okay.
Alami: Yeah.

00:56:25.767 --> 00:56:27.434
And we are,
to answer your question,

00:56:27.434 --> 00:56:29.634
yes, we are seeing quite a bit
of usage of Fusion Tables

00:56:29.634 --> 00:56:31.667
since we launched.

00:56:31.667 --> 00:56:32.834
man: Thanks.
Jacobs: Up front.

00:56:32.834 --> 00:56:34.534
woman: Do you provide
any documentation

00:56:34.534 --> 00:56:36.901
on the heuristic that you use
for the optimization,

00:56:36.901 --> 00:56:40.367
for the routing?
Jacobs: No, we don't.

00:56:40.367 --> 00:56:43.601
And I personally don't know,
but I could speculate with you

00:56:43.601 --> 00:56:44.634
if you grab me later.

00:56:44.634 --> 00:56:47.367
woman:
Okay.

00:56:47.367 --> 00:56:49.234
man: So we all have
these Android tablets

00:56:49.234 --> 00:56:52.267
with beautiful
Vector Google maps.

00:56:52.267 --> 00:56:54.734
Are you planning on bringing
that to the browser

00:56:54.734 --> 00:56:57.467
and opening the Vector Maps API
to developers

00:56:57.467 --> 00:56:59.367
on browser and mobile?

00:56:59.367 --> 00:57:04.133
Alami: The question was about
vector maps on the browser,

00:57:04.133 --> 00:57:07.968
and the answer is,
we typically don't comment

00:57:07.968 --> 00:57:09.367
on our future product plans.

00:57:09.367 --> 00:57:11.267
man:
Okay.

00:57:11.267 --> 00:57:12.934
Jacobs: Agreed that it would
be sweet though.

00:57:12.934 --> 00:57:17.133
man: Right.
Jacobs: Yeah.

00:57:17.133 --> 00:57:22.334
man: Hi. The Maps API that
returns the JSON objects--

00:57:22.334 --> 00:57:24.968
I've tried that
with Google App Engine,

00:57:24.968 --> 00:57:27.667
and I've, like, been immediately
confronted with--

00:57:27.667 --> 00:57:30.200
I guess it's like a 403 or
something, you know, forbidden.

00:57:30.200 --> 00:57:31.801
I've exceeded my quota.

00:57:31.801 --> 00:57:34.234
And I assume it's just because
someone else on that node

00:57:34.234 --> 00:57:35.701
exceeded it.

00:57:35.701 --> 00:57:37.901
I was wondering if there's
a way to use a key for that.

00:57:37.901 --> 00:57:39.200
Jacobs: So yes,
so this is a difficulty

00:57:39.200 --> 00:57:41.968
that we run into in shared
hosting environments.

00:57:41.968 --> 00:57:44.601
Sorry, the question was,
I'm on App Engine

00:57:44.601 --> 00:57:47.834
or something with a shared IP,
and I get lots of quota denials

00:57:47.834 --> 00:57:51.100
in the web services,
geocoding or whatever.

00:57:51.100 --> 00:57:53.367
This is a problem that we run
into because of shared IPs.

00:57:53.367 --> 00:57:56.067
It's hard to tell who's a user,
who's not.

00:57:56.067 --> 00:57:58.167
There is of course
Maps API Premier

00:57:58.167 --> 00:58:00.400
that you could sign up for
and get a key,

00:58:00.400 --> 00:58:02.834
if you have, like,
a big project.

00:58:02.834 --> 00:58:06.100
Otherwise, maybe you can try
to do it on the client

00:58:06.100 --> 00:58:08.968
where we have a more clever
strategy for telling

00:58:08.968 --> 00:58:11.267
who's an independent user,
that sort of thing.

00:58:11.267 --> 00:58:12.634
I don't have a good answer
for you right now,

00:58:12.634 --> 00:58:14.200
but grab me afterward.

00:58:14.200 --> 00:58:17.434
Twenty seconds, if that's
a quick question back there.

00:58:17.434 --> 00:58:18.701
man: I'll try to make it quick.
Jacobs: Yeah.

00:58:18.701 --> 00:58:20.133
man: So let's say
that I wanted to generate

00:58:20.133 --> 00:58:21.334
a heat map off of
private data,

00:58:21.334 --> 00:58:23.501
say the last seven days
of sales,

00:58:23.501 --> 00:58:24.934
and it's rapidly changing.

00:58:24.934 --> 00:58:27.434
I wouldn't want to upload that
into Fusion Tables

00:58:27.434 --> 00:58:30.234
before I make the render
request, right?

00:58:30.234 --> 00:58:32.968
So how would I integrate
that kind of live feed

00:58:32.968 --> 00:58:35.767
for my own private
book of record, basically,

00:58:35.767 --> 00:58:38.534
and generate a heat map
on top of this stuff?

00:58:38.534 --> 00:58:41.100
Alami: The question was about
generating heat maps

00:58:41.100 --> 00:58:43.501
using a live data feed.

00:58:43.501 --> 00:58:46.133
Ultimately you do have to upload
this into Fusion Tables.

00:58:46.133 --> 00:58:47.868
You can keep the table
private,

00:58:47.868 --> 00:58:50.834
so you're not required to make
this data public.

00:58:50.834 --> 00:58:53.767
Jacobs: Unfortunately, it's
a relatively computationally

00:58:53.767 --> 00:58:55.234
expensive process in general,

00:58:55.234 --> 00:58:58.934
so we're reliant on that
at the moment anyway.

00:58:58.934 --> 00:59:00.534
man: Right.
If I could do a quick one.

00:59:00.534 --> 00:59:02.067
Alami:
Yeah.

00:59:02.067 --> 00:59:04.400
man: So one thing that we talked
with some of your guys about--

00:59:04.400 --> 00:59:05.534
Alami:
Sorry.

00:59:05.534 --> 00:59:06.801
I'm getting a signal
from the back,

00:59:06.801 --> 00:59:09.133
but if you do have
a follow-up question,

00:59:09.133 --> 00:59:11.734
we'll meet you afterwards.
Jacobs: Grab us outside. Sure.

00:59:11.734 --> 00:59:12.901
Alami:
Thank you.

00:59:12.901 --> 00:59:14.234
Jacobs:
Thank you. Thanks for coming.

