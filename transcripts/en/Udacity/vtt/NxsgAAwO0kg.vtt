WEBVTT
Kind: captions
Language: en

00:00:00.480 --> 00:00:03.370
Now let's look at the interface that's available for

00:00:03.370 --> 00:00:05.670
the stub that is on the client side and the

00:00:05.670 --> 00:00:09.590
server side through the subcontract mechanism. The first interface, of

00:00:09.590 --> 00:00:12.820
course, is for marshaling and unmarshaling. So the client side

00:00:12.820 --> 00:00:16.630
stub has to marshal the arguments form the client

00:00:16.630 --> 00:00:19.960
and in order to do that, it has calls that

00:00:19.960 --> 00:00:22.680
it can make on the subcontract saying that marshal these

00:00:22.680 --> 00:00:25.220
arguments for me. The subcontract will do that for you.

00:00:25.220 --> 00:00:28.530
Depending on whether this invocation is going to

00:00:28.530 --> 00:00:31.100
go to a server that is on the network

00:00:31.100 --> 00:00:34.410
or is it on the same machine. Or, is

00:00:34.410 --> 00:00:38.390
it on different processor on the same machine? All

00:00:38.390 --> 00:00:40.917
of those details are buried in the subcontract. And

00:00:40.917 --> 00:00:43.721
therefore, when the client stub wants to marshal the

00:00:43.721 --> 00:00:46.785
arguments for a particular invocation, it just calls the

00:00:46.785 --> 00:00:50.150
subcontract and says please marshal these arguments for me,

00:00:50.150 --> 00:00:53.180
and the subcontract knows the way in which this

00:00:53.180 --> 00:00:56.680
particular invocation is going to be handled, and so it

00:00:56.680 --> 00:00:59.500
can then do the appropriate thing for marshaling the

00:00:59.500 --> 00:01:03.330
arguments based on where the location of the server is.

00:01:03.330 --> 00:01:06.350
That's the beauty of the subcontract mechanism, and this

00:01:06.350 --> 00:01:08.860
is true on the server side as well as on

00:01:08.860 --> 00:01:12.080
the client side. And once the marshaling has been

00:01:12.080 --> 00:01:15.640
done, the client side can make the invocation. And when

00:01:15.640 --> 00:01:18.610
it makes the invocation, once again the subcontract says

00:01:18.610 --> 00:01:21.150
I know exactly where this particular invocation is going to

00:01:21.150 --> 00:01:24.100
go to. So it takes care of that. So

00:01:24.100 --> 00:01:27.950
the subcontract on the client side has this invocation mechanism

00:01:27.950 --> 00:01:30.070
obviously because the client is the guy that is

00:01:30.070 --> 00:01:33.100
going to make the invocation. On the service side the

00:01:33.100 --> 00:01:36.730
subcontract gives a different set of mechanisms. It allows the

00:01:36.730 --> 00:01:41.240
server to revoke a service, or it allows a server

00:01:41.240 --> 00:01:43.520
to tell the subcontract that yes, I'm open

00:01:43.520 --> 00:01:46.800
for business by saying I'm ready to process invocation

00:01:46.800 --> 00:01:50.570
requests. So what you see is that the

00:01:50.570 --> 00:01:54.110
client side and the server side, the boundary is

00:01:54.110 --> 00:01:57.015
right here. The client stub and the server

00:01:57.015 --> 00:02:01.370
stub don't have to do anything differently, whether the

00:02:01.370 --> 00:02:03.700
client and the server are in the same machine

00:02:03.700 --> 00:02:06.515
or in a different machine. Replicas of the machine,

00:02:06.515 --> 00:02:08.550
cache copies of the machine, none of those things

00:02:08.550 --> 00:02:11.210
make a difference in terms of what the client,

00:02:11.210 --> 00:02:14.310
when I say client I mean the client application

00:02:14.310 --> 00:02:17.490
plus the client stub, and similarly, the server plus

00:02:17.490 --> 00:02:19.990
the server stub, they don't have to do anything

00:02:19.990 --> 00:02:23.800
different. All of the magic happens down below in

00:02:23.800 --> 00:02:27.940
the subcontract mechanism. So to recap, the innovations in

00:02:27.940 --> 00:02:32.020
the spring system. It uses object technology as a structuring

00:02:32.020 --> 00:02:35.340
mechanism in building a network operating system

00:02:35.340 --> 00:02:39.130
and it ensures through the object technology

00:02:39.130 --> 00:02:44.670
that it is providing strong interfaces, it is open, it is flexible, and it is

00:02:44.670 --> 00:02:51.130
also extensible because it is not a monolithic kernel. It has a microkernel, and

00:02:51.130 --> 00:02:53.640
all the services are provided through these

00:02:53.640 --> 00:02:57.520
object mechanism living on top of the kernel.

00:02:57.520 --> 00:03:01.970
And the other nice property is that the clients and the servers don't have to

00:03:01.970 --> 00:03:04.200
know whether they are colocated on the same

00:03:04.200 --> 00:03:08.110
node or they exist on different nodes of

00:03:08.110 --> 00:03:11.590
the local area network. And object invocations

00:03:11.590 --> 00:03:13.970
across the network are handled through the network

00:03:13.970 --> 00:03:18.910
proxies. And the subcontract mechanism allows the client

00:03:18.910 --> 00:03:23.120
and the servers to dynamically change the relationship

00:03:23.120 --> 00:03:28.323
in terms of who they are talking to. You can get new instances of

00:03:28.323 --> 00:03:33.660
servers instantiated and advertise that through the subcontract

00:03:33.660 --> 00:03:38.680
mechanism so that the clients can dynamically bind to

00:03:38.680 --> 00:03:40.210
new instances of servers that have been

00:03:40.210 --> 00:03:43.080
created without changing anything in the client side

00:03:43.080 --> 00:03:45.500
application or the client side stub. So those

00:03:45.500 --> 00:03:48.200
are all the powers that exist when you

00:03:48.200 --> 00:03:51.310
decide how to innovate under the covers, which

00:03:51.310 --> 00:03:54.070
is exactly what Sun did with the spring system.

