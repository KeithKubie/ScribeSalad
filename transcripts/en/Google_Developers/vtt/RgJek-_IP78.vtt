WEBVTT
Kind: captions
Language: en

00:00:00.140 --> 00:00:02.390
NIKOLAI: Only the sky's the
limit in the virtual world

00:00:02.390 --> 00:00:03.450
as we build.

00:00:03.450 --> 00:00:06.040
But when you start moving
around in the physical world

00:00:06.040 --> 00:00:08.450
at the same time, you
first have to think

00:00:08.450 --> 00:00:12.250
about how to make the
virtual and physical coexist.

00:00:12.250 --> 00:00:15.470
In the Designing for
Physical Boundaries episode

00:00:15.470 --> 00:00:18.860
we saw how physical limits can
impact the augmented reality

00:00:18.860 --> 00:00:22.170
you are in, and how they can
prevent you from going places

00:00:22.170 --> 00:00:24.720
in the virtual experience.

00:00:24.720 --> 00:00:27.970
My name is Nikolai,
and in this episode

00:00:27.970 --> 00:00:30.210
I'm going to show you
how to deal with size

00:00:30.210 --> 00:00:33.130
limits in the virtual world.

00:00:33.130 --> 00:00:35.890
When you are building augmented
reality experiences that

00:00:35.890 --> 00:00:38.690
allow the users to
move around, you also

00:00:38.690 --> 00:00:41.720
have to think about the size of
the virtual experience you're

00:00:41.720 --> 00:00:43.480
building.

00:00:43.480 --> 00:00:46.310
If your world is
very small, the user

00:00:46.310 --> 00:00:49.310
may accidentally walk out of it.

00:00:49.310 --> 00:00:51.330
As a developer, when
the virtual world

00:00:51.330 --> 00:00:53.440
is smaller than
the physical world,

00:00:53.440 --> 00:00:54.910
you've got a
challenge to make sure

00:00:54.910 --> 00:00:57.260
that the users stay within it.

00:00:57.260 --> 00:01:01.400
That is you need to handle
the virtual boundaries.

00:01:01.400 --> 00:01:04.459
For example, if you
create an icy world

00:01:04.459 --> 00:01:08.010
with a single and small ice
flow for your uses penguin,

00:01:08.010 --> 00:01:10.780
an immediate issue is that
it's tempting for the user

00:01:10.780 --> 00:01:12.790
to jump off of it.

00:01:12.790 --> 00:01:14.450
Since the virtual
world is smaller

00:01:14.450 --> 00:01:16.430
than their physical
room, what do you

00:01:16.430 --> 00:01:20.840
want to happen when they cross
the limit of the virtual world?

00:01:20.840 --> 00:01:25.570
There is a simple technique that
keeps the user on the ice flow.

00:01:25.570 --> 00:01:28.470
Let the ice follow the user.

00:01:28.470 --> 00:01:31.810
You can accomplish this by
putting an invisible wall

00:01:31.810 --> 00:01:33.490
around the virtual world.

00:01:33.490 --> 00:01:37.480
When the user runs into that
bounding box and keeps going,

00:01:37.480 --> 00:01:42.440
they move the wall and the
whole world ahead of them.

00:01:42.440 --> 00:01:45.270
It is also possible to
make virtual objects appear

00:01:45.270 --> 00:01:49.380
solid to the user by adding
colliders around them.

00:01:49.380 --> 00:01:53.550
Pushing against the collider
will also move the whole world.

00:01:53.550 --> 00:01:57.040
However, if the collider
is placed poorly,

00:01:57.040 --> 00:02:01.460
it can make parts of the virtual
world become inaccessible.

00:02:01.460 --> 00:02:04.570
If the user walks into
a solid rock on the ice,

00:02:04.570 --> 00:02:08.139
they will effectively
push it in front of them.

00:02:08.139 --> 00:02:12.410
While a solid object can cause
places to become inaccessible,

00:02:12.410 --> 00:02:15.420
it does prevent the user from
walking straight through it,

00:02:15.420 --> 00:02:18.730
which is neither natural
nor great if the object is

00:02:18.730 --> 00:02:20.470
large and hollow.

00:02:20.470 --> 00:02:22.750
The user may then
get lost inside it,

00:02:22.750 --> 00:02:25.620
and you must make sure that they
can find their way out of it

00:02:25.620 --> 00:02:27.200
again.

00:02:27.200 --> 00:02:30.940
If they continue to walk, they
may eventually push the rock

00:02:30.940 --> 00:02:33.210
through a solid
physical obstacle,

00:02:33.210 --> 00:02:36.310
such as a wall or a door.

00:02:36.310 --> 00:02:38.960
If you are not careful about
aligning the virtual world

00:02:38.960 --> 00:02:41.220
with the physical
world, your users

00:02:41.220 --> 00:02:43.980
could be at risk of
inadvertently walking out

00:02:43.980 --> 00:02:47.400
of the room or into
obstacles like walls.

00:02:47.400 --> 00:02:51.210
So you should design
to minimize that.

00:02:51.210 --> 00:02:53.820
Since the rock is not
pushed onto the other side

00:02:53.820 --> 00:02:57.240
of the physical obstacle, it is
going to be hard for the users

00:02:57.240 --> 00:02:59.165
to get to it in the future.

00:02:59.165 --> 00:03:02.640
There are workarounds for this
situation such as the clutch

00:03:02.640 --> 00:03:04.490
and teleportation modes.

00:03:04.490 --> 00:03:07.000
We discuss these in the
Designing for Physical

00:03:07.000 --> 00:03:09.620
Boundaries episode.

00:03:09.620 --> 00:03:12.090
As an alternative
solution, you could instead

00:03:12.090 --> 00:03:14.260
allow the user to
jump off the ice,

00:03:14.260 --> 00:03:19.000
and gradually let them know that
they're exiting the experience.

00:03:19.000 --> 00:03:22.300
In this example, we let the
physical world bleed through

00:03:22.300 --> 00:03:26.350
as the user approaches the
boundary of the virtual.

00:03:26.350 --> 00:03:27.930
It quite literally
informs the user

00:03:27.930 --> 00:03:29.930
that they are leaving
the virtual space,

00:03:29.930 --> 00:03:32.680
and entering reality again.

00:03:32.680 --> 00:03:35.480
It also makes it really easy
for them to go back again.

00:03:35.480 --> 00:03:37.670
They can simply turn
around and walk back

00:03:37.670 --> 00:03:42.360
where they came from to return
to the virtual experience.

00:03:42.360 --> 00:03:46.180
Finally, you could completely
eliminate all these issues

00:03:46.180 --> 00:03:49.600
by procedurally extending
the size of the virtual world

00:03:49.600 --> 00:03:54.310
to fit the physical surroundings
by using the depth sensor.

00:03:54.310 --> 00:03:56.940
As a developer this
does entail more work,

00:03:56.940 --> 00:04:00.850
but makes an experience
that works in more places.

00:04:00.850 --> 00:04:02.880
In this example we
are adding blocks

00:04:02.880 --> 00:04:04.810
as the user moves
beyond the limits

00:04:04.810 --> 00:04:07.330
of the current populated zone.

00:04:07.330 --> 00:04:09.720
In the penguin
game this same idea

00:04:09.720 --> 00:04:12.550
could be used to automate
the generation of ice.

00:04:12.550 --> 00:04:14.500
The user would then
never run out of places

00:04:14.500 --> 00:04:19.490
to move to as their icy
world will be boundless.

00:04:19.490 --> 00:04:23.040
It's not only the physical
world that constrains us.

00:04:23.040 --> 00:04:25.840
The virtual world
can do that too.

00:04:25.840 --> 00:04:28.700
You can put a fence
around the virtual world,

00:04:28.700 --> 00:04:32.770
let the world follow the
user, or procedurally extend

00:04:32.770 --> 00:04:35.830
the world as the
user moves around.

00:04:35.830 --> 00:04:38.700
Somewhat easier to
implement, but harder to use.

00:04:38.700 --> 00:04:42.610
And you have to consider
what's best for your situation.

00:04:42.610 --> 00:04:45.540
There may also be other ways
to handle these edge cases,

00:04:45.540 --> 00:04:48.320
and we'd love to hear
what you've come up with.

00:04:48.320 --> 00:04:52.130
So visit our Google+ community,
and join us in our journey.

00:04:52.130 --> 00:04:56.380
We are excited to see what you
will build with Project Tango.

