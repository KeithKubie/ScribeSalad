WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.122
[MUSIC PLAYING]

00:00:03.810 --> 00:00:06.230
WESLEY CHUN: Hi, this is Wesley
Chun, engineer at Google.

00:00:06.230 --> 00:00:07.604
As you can guess,
today's episode

00:00:07.604 --> 00:00:09.980
focuses on Google Slides
with a cameo appearance

00:00:09.980 --> 00:00:11.032
by Google Sheets.

00:00:11.032 --> 00:00:13.490
That's right, you can leverage
multiple Google technologies

00:00:13.490 --> 00:00:15.221
to help enhance your app.

00:00:15.221 --> 00:00:16.970
I don't need to remind
you that many of us

00:00:16.970 --> 00:00:18.940
use spreadsheets
for their utility.

00:00:18.940 --> 00:00:22.130
They're part organizer, part
database, part data analyzer,

00:00:22.130 --> 00:00:23.600
and part visualizer.

00:00:23.600 --> 00:00:26.150
A virtual Swiss army knife
in the business world.

00:00:26.150 --> 00:00:28.580
They help turn data
into information.

00:00:28.580 --> 00:00:31.250
While presentations aren't
able to manipulate the data

00:00:31.250 --> 00:00:33.124
in the same way a
spreadsheet can,

00:00:33.124 --> 00:00:34.790
they certainly take
information and make

00:00:34.790 --> 00:00:37.400
it more visually appealing
and more easily understood

00:00:37.400 --> 00:00:38.960
by human beings.

00:00:38.960 --> 00:00:41.180
Let us show you how to use
both tools to demonstrate

00:00:41.180 --> 00:00:44.785
the flow of spreadsheet data
into a more presentable format.

00:00:44.785 --> 00:00:46.910
To get this show on the
road, create a Google Sheet

00:00:46.910 --> 00:00:48.080
with some data.

00:00:48.080 --> 00:00:50.730
You can make up anything you
want that fits your use case.

00:00:50.730 --> 00:00:52.700
The example we're using
features toy orders

00:00:52.700 --> 00:00:54.200
and customer information.

00:00:54.200 --> 00:00:55.722
Actually, this data
wasn't made up.

00:00:55.722 --> 00:00:57.180
It comes from a
relational database

00:00:57.180 --> 00:00:59.374
that's part of the Google
Sheets API code lab.

00:00:59.374 --> 00:01:01.040
if you know JavaScript
and want to build

00:01:01.040 --> 00:01:03.331
a node app that uses Sheets
as a custom reporting tool,

00:01:03.331 --> 00:01:04.349
give it a try.

00:01:04.349 --> 00:01:05.660
It's totally optional, though.

00:01:05.660 --> 00:01:07.640
One of the coolest
features in Google Sheets

00:01:07.640 --> 00:01:09.200
is the Explore
button, where you can

00:01:09.200 --> 00:01:11.960
select from a number of
pre-generated visualizations

00:01:11.960 --> 00:01:13.640
of your spreadsheet data.

00:01:13.640 --> 00:01:17.330
Using the Explore feature
for our toy orders sheet,

00:01:17.330 --> 00:01:19.160
we've selected
the cool pie chart

00:01:19.160 --> 00:01:21.200
you see here representing
the number of toys

00:01:21.200 --> 00:01:22.660
ordered by customers.

00:01:22.660 --> 00:01:24.770
Doesn't this data look
like it's begging to be

00:01:24.770 --> 00:01:26.870
put in a slide presentation?

00:01:26.870 --> 00:01:28.100
Yes, I thought so, too.

00:01:28.100 --> 00:01:29.940
So that's what
we're going to do.

00:01:29.940 --> 00:01:31.400
We'll demo a short
Python script,

00:01:31.400 --> 00:01:33.740
but you can write the same
app in any language supported

00:01:33.740 --> 00:01:35.840
by the Google API'S
client libraries

00:01:35.840 --> 00:01:38.584
and use today's script
as just pseudo-code.

00:01:38.584 --> 00:01:40.250
Be sure to have the
latest Python client

00:01:40.250 --> 00:01:41.690
library installed.

00:01:41.690 --> 00:01:44.180
Also be sure to have a
Google API project in the dev

00:01:44.180 --> 00:01:47.340
console with both the Sheets
and Slides APIs enabled.

00:01:47.340 --> 00:01:49.340
If you're new to the
Sheets API and the code lab

00:01:49.340 --> 00:01:51.140
we referred to earlier
is a bit too hard

00:01:51.140 --> 00:01:52.970
core, check out
this dev byte video,

00:01:52.970 --> 00:01:56.540
which just creates a Sheet
based on the toy orders data.

00:01:56.540 --> 00:01:57.980
You have to use
Explore in Sheets

00:01:57.980 --> 00:02:00.320
to add the pie chart
on your own, however.

00:02:00.320 --> 00:02:02.810
Once your Sheet is ready to
go, let's move to the computer

00:02:02.810 --> 00:02:04.310
and show you how
to generate slides

00:02:04.310 --> 00:02:06.745
based on that information.

00:02:06.745 --> 00:02:08.870
Let's start by taking a
quick look at the toy order

00:02:08.870 --> 00:02:11.630
Sheet created in an earlier
video, plus the pie chart

00:02:11.630 --> 00:02:13.990
added from the Explore
feature in Sheets.

00:02:13.990 --> 00:02:16.280
We'll create Slides based
on both the spreadsheet

00:02:16.280 --> 00:02:18.630
cells and the pie chart data.

00:02:18.630 --> 00:02:19.940
Now let's look at the code.

00:02:19.940 --> 00:02:23.090
We'll start on lines 1 through
18, which are basically

00:02:23.090 --> 00:02:25.880
your standard imports and
authorization boilerplate,

00:02:25.880 --> 00:02:29.360
except for what we need in this
app, meaning the pair of scopes

00:02:29.360 --> 00:02:31.080
you see line 7 through 10.

00:02:31.080 --> 00:02:32.870
Since we're only
reading from Sheets,

00:02:32.870 --> 00:02:34.790
we only need the
read-only scope.

00:02:34.790 --> 00:02:36.490
But since we're
creating Slides, we

00:02:36.490 --> 00:02:38.690
need the slides
read-write scope,

00:02:38.690 --> 00:02:41.060
and lines 16 through
18, where we're

00:02:41.060 --> 00:02:43.760
creating a pair of service
end points to both APIs

00:02:43.760 --> 00:02:46.370
using the same side HTTP client.

00:02:46.370 --> 00:02:49.400
Now the real action
starts on 20 to 23.

00:02:49.400 --> 00:02:51.560
This is where we fetch
all cells from the Sheet

00:02:51.560 --> 00:02:54.460
with a call to
spreadsheets.values.get.

00:02:54.460 --> 00:02:56.210
Now, you can't use
my toy order Sheet,

00:02:56.210 --> 00:02:58.430
so you must use
your own on line 21.

00:02:58.430 --> 00:03:01.310
You can also tweak the script
to get it from the command line,

00:03:01.310 --> 00:03:03.830
prompt the user for it,
or get it from a database.

00:03:03.830 --> 00:03:05.300
There's many choices here.

00:03:05.300 --> 00:03:09.050
Lines 25 through 28 is where
you use spreadsheets.get to get

00:03:09.050 --> 00:03:10.250
the chart ID.

00:03:10.250 --> 00:03:12.926
What's returned is an
array of all the Sheets,

00:03:12.926 --> 00:03:14.300
but since there's
only one Sheet,

00:03:14.300 --> 00:03:17.300
we access it at
index 0 on line 27.

00:03:17.300 --> 00:03:19.160
And since that Sheet
only has one chart,

00:03:19.160 --> 00:03:22.040
use index 0 to get
that on line 28.

00:03:22.040 --> 00:03:23.600
And that's all we
need from Sheets.

00:03:23.600 --> 00:03:26.410
It's all Slides
from here on out.

00:03:26.410 --> 00:03:29.900
Lines 30 to 36 create
a brand-new slide deck.

00:03:29.900 --> 00:03:32.870
From the API response,
grab the presentation ID,

00:03:32.870 --> 00:03:36.260
along with the IDs for the
title and the subtitle text

00:03:36.260 --> 00:03:38.000
boxes on the first page.

00:03:38.000 --> 00:03:40.820
Lines 38 to 44 is
where we're creating

00:03:40.820 --> 00:03:44.750
two new slides for Sheets data--
a title-only Slide for the cell

00:03:44.750 --> 00:03:47.440
table and a blank one
for the pie chart.

00:03:47.440 --> 00:03:50.690
And also add the title and
subtitle on the title page.

00:03:50.690 --> 00:03:54.290
45 through 48 is what we send
all four of these requests

00:03:54.290 --> 00:03:57.140
to the Slides API, saving
the IDs of the Slides that

00:03:57.140 --> 00:03:58.320
were just created.

00:03:58.320 --> 00:04:00.530
Note replies come
back in the same order

00:04:00.530 --> 00:04:04.310
as the commands sent to the
API, so the table Slide ID

00:04:04.310 --> 00:04:07.070
comes first, followed
by the chart Slide ID.

00:04:07.070 --> 00:04:11.240
On lines 50 to 53 we fetch the
elements on the table Slide.

00:04:11.240 --> 00:04:13.310
Remember, it's a
title-only Slide,

00:04:13.310 --> 00:04:16.550
so the only object we get back
in the array of page elements

00:04:16.550 --> 00:04:18.149
is the title text box.

00:04:18.149 --> 00:04:20.000
So we get it at index 0.

00:04:20.000 --> 00:04:22.310
We'll use it down below on 62.

00:04:22.310 --> 00:04:25.640
55 to 66 is where
we create the table,

00:04:25.640 --> 00:04:27.830
telling the API what
slide to put it on,

00:04:27.830 --> 00:04:29.870
and how many rows
and columns it has.

00:04:29.870 --> 00:04:31.670
Also give that Slide a title.

00:04:31.670 --> 00:04:33.860
When the API call
returns, we grab

00:04:33.860 --> 00:04:37.130
the ID of the newly
created table on 66.

00:04:37.130 --> 00:04:40.520
68 to 74 is where we copy
all cells from the Sheet

00:04:40.520 --> 00:04:42.320
into the Slide's table.

00:04:42.320 --> 00:04:46.700
Remember back on 22 when we use
spreadsheets.values.get to get

00:04:46.700 --> 00:04:48.810
all of the rows of the Sheet?

00:04:48.810 --> 00:04:51.566
Well, that's how we fill in
all the cells in the table.

00:04:51.566 --> 00:04:52.940
Python developers
will note we're

00:04:52.940 --> 00:04:56.120
using a double for loop
list comprehension to loop

00:04:56.120 --> 00:04:58.880
through all the rows-- that's
the I loop-- while the J

00:04:58.880 --> 00:05:00.650
loop hits each column.

00:05:00.650 --> 00:05:04.280
The next big chunk
of code from 76 to 94

00:05:04.280 --> 00:05:06.020
is where we build
the request to import

00:05:06.020 --> 00:05:07.910
the chart into its own Slide.

00:05:07.910 --> 00:05:11.520
Now regarding the linking mode,
linked allows for updates,

00:05:11.520 --> 00:05:13.160
meaning if you update
the Sheets data,

00:05:13.160 --> 00:05:15.470
you can request a
refresh of the chart.

00:05:15.470 --> 00:05:19.610
Not linked image, as you can
guess, is just a [INAUDIBLE].

00:05:19.610 --> 00:05:22.250
Now, if you look roughly
between 82 and 92,

00:05:22.250 --> 00:05:25.490
the size and the transform may
seem arbitrary, but it's not.

00:05:25.490 --> 00:05:28.880
I basically drew a giant
rectangle on a blank slide

00:05:28.880 --> 00:05:32.210
and borrowed those values so
that the created chart would

00:05:32.210 --> 00:05:35.000
fit into a rectangle
of the same dimensions.

00:05:35.000 --> 00:05:37.130
This is not an uncommon
practice if you

00:05:37.130 --> 00:05:39.770
don't want to have to do the
math to figure out the size

00:05:39.770 --> 00:05:41.522
and transform on your own.

00:05:41.522 --> 00:05:43.730
And then the last few lines,
send the table and chart

00:05:43.730 --> 00:05:45.110
request to the API.

00:05:45.110 --> 00:05:47.600
And when it's done, we'll
let the user know and exit.

00:05:47.600 --> 00:05:48.952
Now, you ready to run this?

00:05:48.952 --> 00:05:50.660
All right, let's give
it a shot, assuming

00:05:50.660 --> 00:05:55.070
that we've assigned a proper
sheet ID earlier on line 21

00:05:55.070 --> 00:05:58.430
and we've already accepted
the OAuth 2.0 prompt

00:05:58.430 --> 00:06:01.280
granting the two scopes
we requested to this app.

00:06:01.280 --> 00:06:03.200
Now I'm going to run
this with Python 3,

00:06:03.200 --> 00:06:06.300
but this code will run on
Python 2 without modification.

00:06:06.300 --> 00:06:07.850
And you can see each
print statement.

00:06:07.850 --> 00:06:10.490
I'll put one that request
has been executed.

00:06:10.490 --> 00:06:12.080
And when everything
is done, we should

00:06:12.080 --> 00:06:14.780
be able to go to our Drive,
see the demo presentation has

00:06:14.780 --> 00:06:17.540
been created, and open it up.

00:06:17.540 --> 00:06:20.480
Here's our title page with
a title and a subtitle,

00:06:20.480 --> 00:06:23.150
the table Slide with the
title, and the cell data

00:06:23.150 --> 00:06:25.850
that we got from our
spreadsheet-- exact match,

00:06:25.850 --> 00:06:26.570
awesome.

00:06:26.570 --> 00:06:31.136
And finally, the chart
is now on its own slide.

00:06:31.136 --> 00:06:32.510
Now you know how
to create Slides

00:06:32.510 --> 00:06:33.920
based on spreadsheet data.

00:06:33.920 --> 00:06:36.440
Cool.

00:06:36.440 --> 00:06:37.296
So that's it.

00:06:37.296 --> 00:06:39.170
The code is a bit longer
than we're generally

00:06:39.170 --> 00:06:41.480
used to, clocking in at
about 100 lines of code.

00:06:41.480 --> 00:06:43.030
But keep in mind
that most of it is

00:06:43.030 --> 00:06:46.160
in creating the command payloads
to send to the API, rather

00:06:46.160 --> 00:06:47.580
than actual logic.

00:06:47.580 --> 00:06:49.580
In total, there are two
calls for the Sheets API

00:06:49.580 --> 00:06:51.590
and five to the Slides API.

00:06:51.590 --> 00:06:53.210
Now you know how to
import Sheets data

00:06:53.210 --> 00:06:55.280
into Slides using its API.

00:06:55.280 --> 00:06:57.830
Check out the blog post for
a closer look at the code.

00:06:57.830 --> 00:07:00.020
To learn more about what
you can do with tables,

00:07:00.020 --> 00:07:01.820
check out the first link.

00:07:01.820 --> 00:07:03.440
The next one is
for those who want

00:07:03.440 --> 00:07:05.840
to continue looking at
importing charts from Sheets

00:07:05.840 --> 00:07:07.670
into Slides presentations.

00:07:07.670 --> 00:07:10.010
If you're new to the
Slides API, the final link

00:07:10.010 --> 00:07:11.540
points to an
introductory overview

00:07:11.540 --> 00:07:13.234
where you can learn
basic concepts.

00:07:13.234 --> 00:07:15.650
Now that you have the ability
to leverage your spreadsheet

00:07:15.650 --> 00:07:17.870
data into Slide decks
programmatically, go out

00:07:17.870 --> 00:07:19.457
and build the next great app.

00:07:19.457 --> 00:07:21.290
Be sure to subscribe
to our channel and tune

00:07:21.290 --> 00:07:22.027
again next time.

00:07:22.027 --> 00:07:24.485
This is Wesley Chun from Google,
and we'll see you upstairs

00:07:24.485 --> 00:07:25.465
in the G Suite.

00:07:25.465 --> 00:07:28.414
[MUSIC PLAYING]

00:07:29.737 --> 00:07:30.850
Hey, everyone.

00:07:30.850 --> 00:07:31.701
Thanks for watching.

00:07:31.701 --> 00:07:34.200
Check out these related videos,
and we'll see you next time.

00:07:34.200 --> 00:07:37.550
[MUSIC PLAYING]

