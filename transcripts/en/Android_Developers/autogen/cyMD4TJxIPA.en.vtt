WEBVTT
Kind: captions
Language: en

00:00:00.540 --> 00:00:04.749 align:start position:0%
 
[Music]

00:00:04.749 --> 00:00:04.759 align:start position:0%
 
 

00:00:04.759 --> 00:00:07.220 align:start position:0%
 
in<00:00:05.759><c> the</c><00:00:05.940><c> previous</c><00:00:06.299><c> videos</c><00:00:06.600><c> we've</c><00:00:06.899><c> seen</c><00:00:07.080><c> how</c>

00:00:07.220 --> 00:00:07.230 align:start position:0%
in the previous videos we've seen how
 

00:00:07.230 --> 00:00:09.110 align:start position:0%
in the previous videos we've seen how
the<00:00:07.290><c> oboe</c><00:00:07.649><c> library</c><00:00:08.010><c> makes</c><00:00:08.309><c> it</c><00:00:08.429><c> easy</c><00:00:08.670><c> to</c><00:00:08.910><c> play</c>

00:00:09.110 --> 00:00:09.120 align:start position:0%
the oboe library makes it easy to play
 

00:00:09.120 --> 00:00:11.270 align:start position:0%
the oboe library makes it easy to play
low<00:00:09.420><c> latency</c><00:00:09.840><c> audio</c><00:00:09.960><c> but</c><00:00:10.650><c> what</c><00:00:10.860><c> if</c><00:00:11.010><c> you</c><00:00:11.130><c> need</c>

00:00:11.270 --> 00:00:11.280 align:start position:0%
low latency audio but what if you need
 

00:00:11.280 --> 00:00:13.850 align:start position:0%
low latency audio but what if you need
to<00:00:11.400><c> record</c><00:00:11.820><c> audio</c><00:00:12.030><c> in</c><00:00:12.420><c> this</c><00:00:13.049><c> video</c><00:00:13.230><c> I'll</c><00:00:13.590><c> show</c>

00:00:13.850 --> 00:00:13.860 align:start position:0%
to record audio in this video I'll show
 

00:00:13.860 --> 00:00:15.860 align:start position:0%
to record audio in this video I'll show
you<00:00:13.950><c> how</c><00:00:14.099><c> to</c><00:00:14.160><c> setup</c><00:00:14.460><c> low</c><00:00:14.880><c> latency</c><00:00:15.299><c> streams</c><00:00:15.599><c> for</c>

00:00:15.860 --> 00:00:15.870 align:start position:0%
you how to setup low latency streams for
 

00:00:15.870 --> 00:00:18.560 align:start position:0%
you how to setup low latency streams for
recording<00:00:16.760><c> recording</c><00:00:17.760><c> audio</c><00:00:17.880><c> is</c><00:00:18.270><c> done</c><00:00:18.449><c> in</c>

00:00:18.560 --> 00:00:18.570 align:start position:0%
recording recording audio is done in
 

00:00:18.570 --> 00:00:21.260 align:start position:0%
recording recording audio is done in
much<00:00:18.840><c> the</c><00:00:18.869><c> same</c><00:00:19.080><c> way</c><00:00:19.260><c> as</c><00:00:19.619><c> playing</c><00:00:20.039><c> audio</c><00:00:20.400><c> the</c>

00:00:21.260 --> 00:00:21.270 align:start position:0%
much the same way as playing audio the
 

00:00:21.270 --> 00:00:23.269 align:start position:0%
much the same way as playing audio the
main<00:00:21.480><c> difference</c><00:00:21.930><c> is</c><00:00:22.109><c> that</c><00:00:22.199><c> our</c><00:00:22.529><c> audio</c><00:00:22.949><c> stream</c>

00:00:23.269 --> 00:00:23.279 align:start position:0%
main difference is that our audio stream
 

00:00:23.279 --> 00:00:26.330 align:start position:0%
main difference is that our audio stream
moves<00:00:23.760><c> data</c><00:00:23.970><c> from</c><00:00:24.720><c> an</c><00:00:24.930><c> audio</c><00:00:25.230><c> device</c><00:00:25.410><c> for</c>

00:00:26.330 --> 00:00:26.340 align:start position:0%
moves data from an audio device for
 

00:00:26.340 --> 00:00:28.429 align:start position:0%
moves data from an audio device for
example<00:00:26.430><c> the</c><00:00:26.880><c> built-in</c><00:00:27.240><c> microphone</c><00:00:27.449><c> rather</c>

00:00:28.429 --> 00:00:28.439 align:start position:0%
example the built-in microphone rather
 

00:00:28.439 --> 00:00:30.950 align:start position:0%
example the built-in microphone rather
than<00:00:28.710><c> sending</c><00:00:29.039><c> data</c><00:00:29.220><c> to</c><00:00:29.369><c> it</c><00:00:29.670><c> before</c><00:00:30.660><c> creating</c>

00:00:30.950 --> 00:00:30.960 align:start position:0%
than sending data to it before creating
 

00:00:30.960 --> 00:00:32.810 align:start position:0%
than sending data to it before creating
an<00:00:31.199><c> input</c><00:00:31.500><c> audio</c><00:00:31.769><c> stream</c><00:00:32.099><c> you'll</c><00:00:32.460><c> need</c><00:00:32.669><c> to</c>

00:00:32.810 --> 00:00:32.820 align:start position:0%
an input audio stream you'll need to
 

00:00:32.820 --> 00:00:34.700 align:start position:0%
an input audio stream you'll need to
make<00:00:33.090><c> sure</c><00:00:33.120><c> that</c><00:00:33.510><c> your</c><00:00:33.690><c> app</c><00:00:33.840><c> has</c><00:00:34.170><c> acquired</c><00:00:34.500><c> the</c>

00:00:34.700 --> 00:00:34.710 align:start position:0%
make sure that your app has acquired the
 

00:00:34.710 --> 00:00:38.240 align:start position:0%
make sure that your app has acquired the
record<00:00:35.130><c> audio</c><00:00:35.399><c> permission</c><00:00:36.890><c> to</c><00:00:37.890><c> create</c><00:00:38.070><c> the</c>

00:00:38.240 --> 00:00:38.250 align:start position:0%
record audio permission to create the
 

00:00:38.250 --> 00:00:39.889 align:start position:0%
record audio permission to create the
input<00:00:38.430><c> audio</c><00:00:38.850><c> stream</c><00:00:39.180><c> we</c><00:00:39.390><c> use</c><00:00:39.600><c> an</c><00:00:39.719><c> audio</c>

00:00:39.889 --> 00:00:39.899 align:start position:0%
input audio stream we use an audio
 

00:00:39.899 --> 00:00:42.799 align:start position:0%
input audio stream we use an audio
stream<00:00:40.260><c> builder</c><00:00:41.120><c> settings</c><00:00:42.120><c> stream</c><00:00:42.360><c> direction</c>

00:00:42.799 --> 00:00:42.809 align:start position:0%
stream builder settings stream direction
 

00:00:42.809 --> 00:00:44.959 align:start position:0%
stream builder settings stream direction
to<00:00:42.899><c> input</c><00:00:43.260><c> and</c><00:00:43.440><c> the</c><00:00:43.920><c> performance</c><00:00:44.370><c> mode</c><00:00:44.579><c> to</c><00:00:44.789><c> low</c>

00:00:44.959 --> 00:00:44.969 align:start position:0%
to input and the performance mode to low
 

00:00:44.969 --> 00:00:47.750 align:start position:0%
to input and the performance mode to low
latency<00:00:45.480><c> now</c><00:00:46.320><c> we</c><00:00:46.379><c> can</c><00:00:46.710><c> open</c><00:00:46.890><c> the</c><00:00:47.100><c> stream</c><00:00:47.370><c> by</c>

00:00:47.750 --> 00:00:47.760 align:start position:0%
latency now we can open the stream by
 

00:00:47.760 --> 00:00:49.400 align:start position:0%
latency now we can open the stream by
passing<00:00:48.210><c> a</c><00:00:48.270><c> reference</c><00:00:48.629><c> to</c><00:00:48.780><c> an</c><00:00:48.870><c> audio</c><00:00:49.170><c> stream</c>

00:00:49.400 --> 00:00:49.410 align:start position:0%
passing a reference to an audio stream
 

00:00:49.410 --> 00:00:52.459 align:start position:0%
passing a reference to an audio stream
pointer<00:00:50.600><c> after</c><00:00:51.600><c> checking</c><00:00:51.809><c> that</c><00:00:51.960><c> it</c><00:00:52.170><c> opened</c>

00:00:52.459 --> 00:00:52.469 align:start position:0%
pointer after checking that it opened
 

00:00:52.469 --> 00:00:54.110 align:start position:0%
pointer after checking that it opened
successfully<00:00:53.039><c> you</c><00:00:53.280><c> can</c><00:00:53.309><c> start</c><00:00:53.699><c> the</c><00:00:53.879><c> stream</c>

00:00:54.110 --> 00:00:54.120 align:start position:0%
successfully you can start the stream
 

00:00:54.120 --> 00:00:56.569 align:start position:0%
successfully you can start the stream
data<00:00:55.079><c> from</c><00:00:55.440><c> the</c><00:00:55.530><c> default</c><00:00:55.860><c> recording</c><00:00:56.340><c> device</c>

00:00:56.569 --> 00:00:56.579 align:start position:0%
data from the default recording device
 

00:00:56.579 --> 00:01:01.310 align:start position:0%
data from the default recording device
will<00:00:56.940><c> start</c><00:00:57.270><c> moving</c><00:00:57.480><c> into</c><00:00:58.020><c> the</c><00:00:58.140><c> stream</c><00:01:00.320><c> there</c>

00:01:01.310 --> 00:01:01.320 align:start position:0%
will start moving into the stream there
 

00:01:01.320 --> 00:01:02.840 align:start position:0%
will start moving into the stream there
are<00:01:01.440><c> two</c><00:01:01.649><c> ways</c><00:01:01.890><c> we</c><00:01:01.920><c> can</c><00:01:02.280><c> read</c><00:01:02.489><c> this</c><00:01:02.609><c> data</c>

00:01:02.840 --> 00:01:02.850 align:start position:0%
are two ways we can read this data
 

00:01:02.850 --> 00:01:05.840 align:start position:0%
are two ways we can read this data
either<00:01:03.329><c> directly</c><00:01:04.019><c> or</c><00:01:04.260><c> using</c><00:01:04.559><c> a</c><00:01:04.739><c> callback</c><00:01:04.979><c> it's</c>

00:01:05.840 --> 00:01:05.850 align:start position:0%
either directly or using a callback it's
 

00:01:05.850 --> 00:01:07.550 align:start position:0%
either directly or using a callback it's
possible<00:01:06.330><c> to</c><00:01:06.510><c> obtain</c><00:01:06.840><c> the</c><00:01:06.990><c> lowest</c><00:01:07.229><c> latency</c>

00:01:07.550 --> 00:01:07.560 align:start position:0%
possible to obtain the lowest latency
 

00:01:07.560 --> 00:01:09.980 align:start position:0%
possible to obtain the lowest latency
using<00:01:08.189><c> both</c><00:01:08.400><c> approaches</c><00:01:09.000><c> I'll</c><00:01:09.540><c> demonstrate</c>

00:01:09.980 --> 00:01:09.990 align:start position:0%
using both approaches I'll demonstrate
 

00:01:09.990 --> 00:01:11.660 align:start position:0%
using both approaches I'll demonstrate
how<00:01:10.380><c> to</c><00:01:10.409><c> read</c><00:01:10.710><c> directly</c><00:01:11.100><c> from</c><00:01:11.250><c> the</c><00:01:11.430><c> stream</c>

00:01:11.660 --> 00:01:11.670 align:start position:0%
how to read directly from the stream
 

00:01:11.670 --> 00:01:13.520 align:start position:0%
how to read directly from the stream
since<00:01:12.119><c> the</c><00:01:12.270><c> callback</c><00:01:12.570><c> method</c><00:01:12.900><c> was</c><00:01:13.080><c> covered</c><00:01:13.409><c> in</c>

00:01:13.520 --> 00:01:13.530 align:start position:0%
since the callback method was covered in
 

00:01:13.530 --> 00:01:16.580 align:start position:0%
since the callback method was covered in
the<00:01:13.680><c> previous</c><00:01:13.860><c> video</c><00:01:14.750><c> the</c><00:01:15.750><c> method</c><00:01:16.080><c> we</c><00:01:16.200><c> need</c><00:01:16.380><c> is</c>

00:01:16.580 --> 00:01:16.590 align:start position:0%
the previous video the method we need is
 

00:01:16.590 --> 00:01:19.100 align:start position:0%
the previous video the method we need is
unsurprisingly<00:01:17.430><c> called</c><00:01:17.790><c> read</c><00:01:18.180><c> it</c><00:01:18.780><c> takes</c>

00:01:19.100 --> 00:01:19.110 align:start position:0%
unsurprisingly called read it takes
 

00:01:19.110 --> 00:01:22.219 align:start position:0%
unsurprisingly called read it takes
three<00:01:19.470><c> parameters</c><00:01:20.299><c> buffer</c><00:01:21.299><c> is</c><00:01:21.479><c> an</c><00:01:21.659><c> array</c><00:01:21.930><c> into</c>

00:01:22.219 --> 00:01:22.229 align:start position:0%
three parameters buffer is an array into
 

00:01:22.229 --> 00:01:24.950 align:start position:0%
three parameters buffer is an array into
which<00:01:22.500><c> the</c><00:01:22.710><c> audio</c><00:01:23.009><c> data</c><00:01:23.250><c> will</c><00:01:23.549><c> be</c><00:01:23.670><c> read</c><00:01:23.960><c> num</c>

00:01:24.950 --> 00:01:24.960 align:start position:0%
which the audio data will be read num
 

00:01:24.960 --> 00:01:27.140 align:start position:0%
which the audio data will be read num
frames<00:01:25.350><c> is</c><00:01:25.680><c> the</c><00:01:25.979><c> number</c><00:01:26.220><c> of</c><00:01:26.310><c> audio</c><00:01:26.610><c> frames</c><00:01:26.939><c> to</c>

00:01:27.140 --> 00:01:27.150 align:start position:0%
frames is the number of audio frames to
 

00:01:27.150 --> 00:01:29.600 align:start position:0%
frames is the number of audio frames to
read<00:01:27.360><c> and</c><00:01:27.659><c> timeout</c><00:01:28.590><c> nanoseconds</c><00:01:29.340><c> is</c><00:01:29.460><c> the</c>

00:01:29.600 --> 00:01:29.610 align:start position:0%
read and timeout nanoseconds is the
 

00:01:29.610 --> 00:01:31.460 align:start position:0%
read and timeout nanoseconds is the
maximum<00:01:30.060><c> number</c><00:01:30.360><c> of</c><00:01:30.390><c> nanoseconds</c><00:01:31.140><c> which</c><00:01:31.259><c> the</c>

00:01:31.460 --> 00:01:31.470 align:start position:0%
maximum number of nanoseconds which the
 

00:01:31.470 --> 00:01:34.520 align:start position:0%
maximum number of nanoseconds which the
method<00:01:31.770><c> will</c><00:01:31.920><c> block</c><00:01:32.159><c> for</c><00:01:32.509><c> if</c><00:01:33.509><c> you</c><00:01:33.630><c> specify</c><00:01:33.900><c> 0</c>

00:01:34.520 --> 00:01:34.530 align:start position:0%
method will block for if you specify 0
 

00:01:34.530 --> 00:01:36.440 align:start position:0%
method will block for if you specify 0
here<00:01:34.860><c> the</c><00:01:35.100><c> method</c><00:01:35.310><c> will</c><00:01:35.610><c> return</c><00:01:35.970><c> immediately</c>

00:01:36.440 --> 00:01:36.450 align:start position:0%
here the method will return immediately
 

00:01:36.450 --> 00:01:39.020 align:start position:0%
here the method will return immediately
copying<00:01:37.409><c> only</c><00:01:37.770><c> the</c><00:01:37.890><c> data</c><00:01:38.100><c> that</c><00:01:38.549><c> was</c><00:01:38.700><c> currently</c>

00:01:39.020 --> 00:01:39.030 align:start position:0%
copying only the data that was currently
 

00:01:39.030 --> 00:01:41.390 align:start position:0%
copying only the data that was currently
available<00:01:39.270><c> in</c><00:01:39.689><c> the</c><00:01:39.869><c> streams</c><00:01:40.140><c> buffer</c><00:01:40.560><c> this</c><00:01:41.220><c> is</c>

00:01:41.390 --> 00:01:41.400 align:start position:0%
available in the streams buffer this is
 

00:01:41.400 --> 00:01:42.980 align:start position:0%
available in the streams buffer this is
useful<00:01:41.610><c> if</c><00:01:41.939><c> you</c><00:01:42.090><c> don't</c><00:01:42.329><c> want</c><00:01:42.509><c> to</c><00:01:42.600><c> block</c><00:01:42.840><c> the</c>

00:01:42.980 --> 00:01:42.990 align:start position:0%
useful if you don't want to block the
 

00:01:42.990 --> 00:01:46.340 align:start position:0%
useful if you don't want to block the
current<00:01:43.290><c> thread</c><00:01:43.939><c> so</c><00:01:44.939><c> let's</c><00:01:45.659><c> say</c><00:01:45.810><c> we</c><00:01:45.930><c> wanted</c><00:01:46.229><c> to</c>

00:01:46.340 --> 00:01:46.350 align:start position:0%
current thread so let's say we wanted to
 

00:01:46.350 --> 00:01:48.679 align:start position:0%
current thread so let's say we wanted to
read<00:01:46.530><c> 2</c><00:01:46.860><c> milliseconds</c><00:01:47.159><c> of</c><00:01:47.579><c> audio</c><00:01:47.880><c> data</c><00:01:48.090><c> from</c><00:01:48.600><c> a</c>

00:01:48.679 --> 00:01:48.689 align:start position:0%
read 2 milliseconds of audio data from a
 

00:01:48.689 --> 00:01:52.280 align:start position:0%
read 2 milliseconds of audio data from a
16-bit<00:01:49.350><c> mono</c><00:01:49.950><c> audio</c><00:01:50.310><c> stream</c><00:01:51.000><c> we</c><00:01:51.840><c> can</c><00:01:51.990><c> do</c><00:01:52.140><c> this</c>

00:01:52.280 --> 00:01:52.290 align:start position:0%
16-bit mono audio stream we can do this
 

00:01:52.290 --> 00:01:55.490 align:start position:0%
16-bit mono audio stream we can do this
using<00:01:52.590><c> a</c><00:01:52.770><c> blocking</c><00:01:53.280><c> read</c><00:01:53.960><c> start</c><00:01:54.960><c> by</c><00:01:55.229><c> creating</c>

00:01:55.490 --> 00:01:55.500 align:start position:0%
using a blocking read start by creating
 

00:01:55.500 --> 00:01:57.350 align:start position:0%
using a blocking read start by creating
an<00:01:55.799><c> array</c><00:01:56.040><c> to</c><00:01:56.250><c> store</c><00:01:56.340><c> the</c><00:01:56.549><c> frames</c><00:01:56.880><c> of</c><00:01:57.060><c> audio</c>

00:01:57.350 --> 00:01:57.360 align:start position:0%
an array to store the frames of audio
 

00:01:57.360 --> 00:02:00.289 align:start position:0%
an array to store the frames of audio
the<00:01:57.920><c> amount</c><00:01:58.920><c> of</c><00:01:59.009><c> data</c><00:01:59.219><c> we</c><00:01:59.460><c> need</c><00:01:59.640><c> to</c><00:01:59.670><c> store</c><00:02:00.060><c> will</c>

00:02:00.289 --> 00:02:00.299 align:start position:0%
the amount of data we need to store will
 

00:02:00.299 --> 00:02:02.630 align:start position:0%
the amount of data we need to store will
depend<00:02:00.689><c> on</c><00:02:00.840><c> the</c><00:02:00.930><c> stream</c><00:02:01.140><c> sample</c><00:02:01.649><c> rate</c><00:02:01.799><c> the</c>

00:02:02.630 --> 00:02:02.640 align:start position:0%
depend on the stream sample rate the
 

00:02:02.640 --> 00:02:04.700 align:start position:0%
depend on the stream sample rate the
timeout<00:02:03.030><c> should</c><00:02:03.240><c> be</c><00:02:03.329><c> longer</c><00:02:03.750><c> than</c><00:02:04.290><c> the</c><00:02:04.409><c> amount</c>

00:02:04.700 --> 00:02:04.710 align:start position:0%
timeout should be longer than the amount
 

00:02:04.710 --> 00:02:07.340 align:start position:0%
timeout should be longer than the amount
of<00:02:04.799><c> audio</c><00:02:05.100><c> we</c><00:02:05.520><c> want</c><00:02:05.729><c> to</c><00:02:05.850><c> read</c><00:02:06.060><c> in</c><00:02:06.990><c> this</c><00:02:07.110><c> case</c>

00:02:07.340 --> 00:02:07.350 align:start position:0%
of audio we want to read in this case
 

00:02:07.350 --> 00:02:09.589 align:start position:0%
of audio we want to read in this case
we'll<00:02:07.560><c> use</c><00:02:07.710><c> 3</c><00:02:08.099><c> milliseconds</c><00:02:08.340><c> and</c><00:02:08.819><c> convert</c><00:02:09.450><c> it</c>

00:02:09.589 --> 00:02:09.599 align:start position:0%
we'll use 3 milliseconds and convert it
 

00:02:09.599 --> 00:02:10.690 align:start position:0%
we'll use 3 milliseconds and convert it
to<00:02:09.629><c> nanoseconds</c>

00:02:10.690 --> 00:02:10.700 align:start position:0%
to nanoseconds
 

00:02:10.700 --> 00:02:13.370 align:start position:0%
to nanoseconds
incidentally<00:02:11.700><c> ogo</c><00:02:12.239><c> provides</c><00:02:12.599><c> a</c><00:02:12.750><c> number</c><00:02:12.930><c> of</c>

00:02:13.370 --> 00:02:13.380 align:start position:0%
incidentally ogo provides a number of
 

00:02:13.380 --> 00:02:15.140 align:start position:0%
incidentally ogo provides a number of
for<00:02:13.650><c> constants</c><00:02:14.220><c> for</c><00:02:14.430><c> working</c><00:02:14.790><c> with</c><00:02:14.940><c> different</c>

00:02:15.140 --> 00:02:15.150 align:start position:0%
for constants for working with different
 

00:02:15.150 --> 00:02:18.050 align:start position:0%
for constants for working with different
time<00:02:15.540><c> units</c><00:02:16.280><c> before</c><00:02:17.280><c> we</c><00:02:17.370><c> can</c><00:02:17.520><c> read</c><00:02:17.730><c> from</c><00:02:17.760><c> our</c>

00:02:18.050 --> 00:02:18.060 align:start position:0%
time units before we can read from our
 

00:02:18.060 --> 00:02:19.970 align:start position:0%
time units before we can read from our
stream<00:02:18.330><c> we</c><00:02:18.630><c> need</c><00:02:18.840><c> to</c><00:02:18.930><c> clear</c><00:02:19.170><c> out</c><00:02:19.200><c> any</c><00:02:19.530><c> stale</c>

00:02:19.970 --> 00:02:19.980 align:start position:0%
stream we need to clear out any stale
 

00:02:19.980 --> 00:02:21.500 align:start position:0%
stream we need to clear out any stale
data<00:02:20.280><c> which</c><00:02:20.640><c> might</c><00:02:20.850><c> already</c><00:02:21.030><c> be</c><00:02:21.270><c> in</c><00:02:21.480><c> the</c>

00:02:21.500 --> 00:02:21.510 align:start position:0%
data which might already be in the
 

00:02:21.510 --> 00:02:24.170 align:start position:0%
data which might already be in the
streams<00:02:21.870><c> buffer</c><00:02:22.290><c> to</c><00:02:23.280><c> do</c><00:02:23.400><c> this</c><00:02:23.580><c> we</c><00:02:23.940><c> just</c>

00:02:24.170 --> 00:02:24.180 align:start position:0%
streams buffer to do this we just
 

00:02:24.180 --> 00:02:26.180 align:start position:0%
streams buffer to do this we just
perform<00:02:24.510><c> non-blocking</c><00:02:25.140><c> reads</c><00:02:25.530><c> of</c><00:02:25.800><c> the</c><00:02:25.950><c> whole</c>

00:02:26.180 --> 00:02:26.190 align:start position:0%
perform non-blocking reads of the whole
 

00:02:26.190 --> 00:02:29.060 align:start position:0%
perform non-blocking reads of the whole
buffer<00:02:26.580><c> until</c><00:02:26.820><c> it's</c><00:02:27.240><c> empty</c><00:02:27.510><c> now</c><00:02:28.350><c> when</c><00:02:28.950><c> we've</c>

00:02:29.060 --> 00:02:29.070 align:start position:0%
buffer until it's empty now when we've
 

00:02:29.070 --> 00:02:30.530 align:start position:0%
buffer until it's empty now when we've
read<00:02:29.310><c> from</c><00:02:29.460><c> the</c><00:02:29.580><c> stream</c><00:02:29.820><c> we</c><00:02:30.030><c> know</c><00:02:30.300><c> we're</c>

00:02:30.530 --> 00:02:30.540 align:start position:0%
read from the stream we know we're
 

00:02:30.540 --> 00:02:32.830 align:start position:0%
read from the stream we know we're
reading<00:02:30.840><c> the</c><00:02:31.050><c> most</c><00:02:31.230><c> current</c><00:02:31.590><c> audio</c><00:02:31.920><c> data</c>

00:02:32.830 --> 00:02:32.840 align:start position:0%
reading the most current audio data
 

00:02:32.840 --> 00:02:35.480 align:start position:0%
reading the most current audio data
after<00:02:33.840><c> Reed</c><00:02:34.020><c> is</c><00:02:34.170><c> completed</c><00:02:34.650><c> we</c><00:02:35.010><c> need</c><00:02:35.190><c> to</c><00:02:35.310><c> check</c>

00:02:35.480 --> 00:02:35.490 align:start position:0%
after Reed is completed we need to check
 

00:02:35.490 --> 00:02:38.420 align:start position:0%
after Reed is completed we need to check
the<00:02:35.610><c> result</c><00:02:35.940><c> if</c><00:02:36.300><c> it</c><00:02:37.020><c> was</c><00:02:37.140><c> okay</c><00:02:37.530><c> then</c><00:02:38.070><c> result</c>

00:02:38.420 --> 00:02:38.430 align:start position:0%
the result if it was okay then result
 

00:02:38.430 --> 00:02:40.040 align:start position:0%
the result if it was okay then result
that<00:02:38.610><c> value</c><00:02:38.970><c> will</c><00:02:39.210><c> contain</c><00:02:39.510><c> the</c><00:02:39.660><c> number</c><00:02:39.810><c> of</c>

00:02:40.040 --> 00:02:40.050 align:start position:0%
that value will contain the number of
 

00:02:40.050 --> 00:02:42.010 align:start position:0%
that value will contain the number of
frames<00:02:40.260><c> which</c><00:02:40.770><c> were</c><00:02:40.890><c> copied</c><00:02:41.250><c> into</c><00:02:41.520><c> our</c><00:02:41.640><c> buffer</c>

00:02:42.010 --> 00:02:42.020 align:start position:0%
frames which were copied into our buffer
 

00:02:42.020 --> 00:02:44.930 align:start position:0%
frames which were copied into our buffer
to<00:02:43.020><c> read</c><00:02:43.170><c> more</c><00:02:43.500><c> data</c><00:02:43.770><c> surround</c><00:02:44.430><c> this</c><00:02:44.580><c> block</c><00:02:44.790><c> in</c>

00:02:44.930 --> 00:02:44.940 align:start position:0%
to read more data surround this block in
 

00:02:44.940 --> 00:02:47.510 align:start position:0%
to read more data surround this block in
a<00:02:45.000><c> while</c><00:02:45.240><c> loop</c><00:02:45.510><c> this</c><00:02:46.470><c> approach</c><00:02:46.830><c> allows</c><00:02:47.220><c> us</c><00:02:47.400><c> to</c>

00:02:47.510 --> 00:02:47.520 align:start position:0%
a while loop this approach allows us to
 

00:02:47.520 --> 00:02:49.430 align:start position:0%
a while loop this approach allows us to
process<00:02:47.760><c> small</c><00:02:48.330><c> buffers</c><00:02:48.720><c> of</c><00:02:48.900><c> up-to-date</c>

00:02:49.430 --> 00:02:49.440 align:start position:0%
process small buffers of up-to-date
 

00:02:49.440 --> 00:02:51.710 align:start position:0%
process small buffers of up-to-date
audio<00:02:49.920><c> data</c><00:02:50.160><c> for</c><00:02:50.760><c> processing</c><00:02:51.240><c> and</c><00:02:51.420><c> moving</c>

00:02:51.710 --> 00:02:51.720 align:start position:0%
audio data for processing and moving
 

00:02:51.720 --> 00:02:54.500 align:start position:0%
audio data for processing and moving
elsewhere<00:02:52.310><c> after</c><00:02:53.310><c> we're</c><00:02:53.700><c> done</c><00:02:53.880><c> we</c><00:02:54.120><c> must</c><00:02:54.270><c> close</c>

00:02:54.500 --> 00:02:54.510 align:start position:0%
elsewhere after we're done we must close
 

00:02:54.510 --> 00:02:56.120 align:start position:0%
elsewhere after we're done we must close
the<00:02:54.720><c> stream</c><00:02:54.960><c> and</c><00:02:55.290><c> after</c><00:02:55.620><c> a</c><00:02:55.650><c> stream</c><00:02:55.950><c> has</c><00:02:56.100><c> been</c>

00:02:56.120 --> 00:02:56.130 align:start position:0%
the stream and after a stream has been
 

00:02:56.130 --> 00:02:59.390 align:start position:0%
the stream and after a stream has been
closed<00:02:56.550><c> it</c><00:02:56.850><c> can</c><00:02:56.910><c> no</c><00:02:57.300><c> longer</c><00:02:57.330><c> be</c><00:02:57.630><c> accessed</c><00:02:58.400><c> this</c>

00:02:59.390 --> 00:02:59.400 align:start position:0%
closed it can no longer be accessed this
 

00:02:59.400 --> 00:03:01.520 align:start position:0%
closed it can no longer be accessed this
is<00:02:59.640><c> a</c><00:02:59.700><c> very</c><00:03:00.150><c> simple</c><00:03:00.600><c> example</c><00:03:00.720><c> of</c><00:03:01.140><c> how</c><00:03:01.230><c> to</c>

00:03:01.520 --> 00:03:01.530 align:start position:0%
is a very simple example of how to
 

00:03:01.530 --> 00:03:04.730 align:start position:0%
is a very simple example of how to
record<00:03:01.980><c> audio</c><00:03:02.570><c> for</c><00:03:03.570><c> more</c><00:03:03.720><c> complex</c><00:03:04.200><c> examples</c>

00:03:04.730 --> 00:03:04.740 align:start position:0%
record audio for more complex examples
 

00:03:04.740 --> 00:03:06.620 align:start position:0%
record audio for more complex examples
including<00:03:05.460><c> how</c><00:03:05.580><c> to</c><00:03:05.610><c> implement</c><00:03:05.970><c> synchronous</c>

00:03:06.620 --> 00:03:06.630 align:start position:0%
including how to implement synchronous
 

00:03:06.630 --> 00:03:08.450 align:start position:0%
including how to implement synchronous
recording<00:03:07.110><c> and</c><00:03:07.200><c> playback</c><00:03:07.380><c> check</c><00:03:08.220><c> out</c><00:03:08.340><c> the</c>

00:03:08.450 --> 00:03:08.460 align:start position:0%
recording and playback check out the
 

00:03:08.460 --> 00:03:11.210 align:start position:0%
recording and playback check out the
live<00:03:08.760><c> effects</c><00:03:09.210><c> sample</c><00:03:09.540><c> on</c><00:03:09.690><c> get</c><00:03:09.930><c> up</c><00:03:10.080><c> you</c><00:03:10.290><c> can</c>

00:03:11.210 --> 00:03:11.220 align:start position:0%
live effects sample on get up you can
 

00:03:11.220 --> 00:03:12.920 align:start position:0%
live effects sample on get up you can
also<00:03:11.370><c> check</c><00:03:11.640><c> out</c><00:03:11.820><c> the</c><00:03:12.030><c> other</c><00:03:12.210><c> videos</c><00:03:12.630><c> in</c><00:03:12.660><c> this</c>

00:03:12.920 --> 00:03:12.930 align:start position:0%
also check out the other videos in this
 

00:03:12.930 --> 00:03:15.080 align:start position:0%
also check out the other videos in this
series<00:03:13.190><c> the</c><00:03:14.190><c> first</c><00:03:14.370><c> video</c><00:03:14.700><c> is</c><00:03:14.970><c> an</c>

00:03:15.080 --> 00:03:15.090 align:start position:0%
series the first video is an
 

00:03:15.090 --> 00:03:16.970 align:start position:0%
series the first video is an
introduction<00:03:15.480><c> to</c><00:03:15.750><c> oboe</c><00:03:16.050><c> shows</c><00:03:16.500><c> by</c><00:03:16.710><c> low</c>

00:03:16.970 --> 00:03:16.980 align:start position:0%
introduction to oboe shows by low
 

00:03:16.980 --> 00:03:19.100 align:start position:0%
introduction to oboe shows by low
latency<00:03:17.370><c> audio</c><00:03:17.490><c> is</c><00:03:17.820><c> important</c><00:03:18.270><c> and</c><00:03:18.420><c> the</c>

00:03:19.100 --> 00:03:19.110 align:start position:0%
latency audio is important and the
 

00:03:19.110 --> 00:03:21.110 align:start position:0%
latency audio is important and the
second<00:03:19.470><c> video</c><00:03:19.650><c> shows</c><00:03:20.010><c> you</c><00:03:20.040><c> how</c><00:03:20.190><c> to</c><00:03:20.310><c> create</c><00:03:20.460><c> low</c>

00:03:21.110 --> 00:03:21.120 align:start position:0%
second video shows you how to create low
 

00:03:21.120 --> 00:03:23.210 align:start position:0%
second video shows you how to create low
latency<00:03:21.600><c> audio</c><00:03:21.750><c> streams</c><00:03:22.200><c> for</c><00:03:22.680><c> playing</c><00:03:22.920><c> sound</c>

00:03:23.210 --> 00:03:23.220 align:start position:0%
latency audio streams for playing sound
 

00:03:23.220 --> 00:03:25.250 align:start position:0%
latency audio streams for playing sound
that's<00:03:24.090><c> all</c><00:03:24.240><c> for</c><00:03:24.390><c> now</c><00:03:24.420><c> if</c><00:03:24.720><c> you</c><00:03:24.900><c> have</c><00:03:25.110><c> any</c>

00:03:25.250 --> 00:03:25.260 align:start position:0%
that's all for now if you have any
 

00:03:25.260 --> 00:03:27.410 align:start position:0%
that's all for now if you have any
questions<00:03:25.710><c> issues</c><00:03:26.340><c> or</c><00:03:26.520><c> feature</c><00:03:26.880><c> requests</c>

00:03:27.410 --> 00:03:27.420 align:start position:0%
questions issues or feature requests
 

00:03:27.420 --> 00:03:29.720 align:start position:0%
questions issues or feature requests
please<00:03:28.050><c> post</c><00:03:28.440><c> them</c><00:03:28.590><c> in</c><00:03:28.710><c> the</c><00:03:28.800><c> issue</c><00:03:29.040><c> section</c><00:03:29.460><c> of</c>

00:03:29.720 --> 00:03:29.730 align:start position:0%
please post them in the issue section of
 

00:03:29.730 --> 00:03:32.000 align:start position:0%
please post them in the issue section of
the<00:03:30.060><c> oboe</c><00:03:30.360><c> github</c><00:03:30.720><c> site</c><00:03:30.930><c> we'd</c><00:03:31.530><c> really</c><00:03:31.830><c> love</c><00:03:31.950><c> to</c>

00:03:32.000 --> 00:03:32.010 align:start position:0%
the oboe github site we'd really love to
 

00:03:32.010 --> 00:03:34.310 align:start position:0%
the oboe github site we'd really love to
hear<00:03:32.220><c> from</c><00:03:32.310><c> you</c><00:03:32.520><c> good</c><00:03:33.000><c> luck</c><00:03:33.180><c> and</c><00:03:33.450><c> go</c><00:03:33.990><c> make</c><00:03:34.170><c> some</c>

00:03:34.310 --> 00:03:34.320 align:start position:0%
hear from you good luck and go make some
 

00:03:34.320 --> 00:03:37.560 align:start position:0%
hear from you good luck and go make some
noise

00:03:37.560 --> 00:03:37.570 align:start position:0%
 
 

00:03:37.570 --> 00:03:39.830 align:start position:0%
 
[Music]

00:03:39.830 --> 00:03:39.840 align:start position:0%
[Music]
 

00:03:39.840 --> 00:03:41.900 align:start position:0%
[Music]
you

