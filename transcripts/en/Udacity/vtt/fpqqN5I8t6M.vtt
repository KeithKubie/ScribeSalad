WEBVTT
Kind: captions
Language: en

00:00:00.310 --> 00:00:02.210
Let's check out
the fundamentals of Groovy so

00:00:02.210 --> 00:00:05.200
we can better understand what's
going on in Gradle build scripts.

00:00:05.200 --> 00:00:09.110
Before we get started looking at code,
a pet peeve of mine in online courses

00:00:09.110 --> 00:00:12.270
is when you have to constantly
pause the video to copy down code.

00:00:12.270 --> 00:00:14.280
You don't have to do
that in this course.

00:00:14.280 --> 00:00:17.630
All the code we'll demo is included
in the course GitHub repository.

00:00:17.630 --> 00:00:19.170
Groovy exists to fill a hole for

00:00:19.170 --> 00:00:21.220
Java developers who need
a scripting language.

00:00:21.220 --> 00:00:24.890
It's terse, expressive and
it operates extremely well with Java and

00:00:24.890 --> 00:00:28.120
has some special features that make
it ideally suited to creating domain

00:00:28.120 --> 00:00:30.080
specific languages.

00:00:30.080 --> 00:00:32.159
Gradle even provides it's
own Groovy distribution so

00:00:32.159 --> 00:00:34.230
we don't even need to install Groovy.

00:00:34.230 --> 00:00:37.600
We can just put our Groovy code
in a build doc Gradle file and

00:00:37.600 --> 00:00:40.460
ask Gradle to do any
task that uses the file.

00:00:40.460 --> 00:00:43.980
To start off with, we'll declare a task
called Groovy that doesn't do anything.

00:00:43.980 --> 00:00:45.530
We'll be talking about
this syntax in a minute.

00:00:45.530 --> 00:00:46.920
Don't worry about it for now.

00:00:46.920 --> 00:00:51.070
All this is doing is just telling
Gradle to go ahead and load this file.

00:00:51.070 --> 00:00:54.910
If we go ahead and run that task by
running gradle groovy, what we see is

00:00:54.910 --> 00:00:57.680
that Gradle runs the Groovy task but
doesn't really do anything.

00:00:57.680 --> 00:00:58.990
That's what we expected.

00:00:58.990 --> 00:01:02.350
All right, let's dig into Groovy, and
you know where we have to start, right?

00:01:02.350 --> 00:01:05.220
Of course we gotta
start with hello world.

00:01:05.220 --> 00:01:08.000
Let's try running this build
script again and see what happens.

00:01:08.000 --> 00:01:11.490
All right, we see our message,
we've successfully reached hello world.

00:01:11.490 --> 00:01:13.130
Let's do something more interesting.

00:01:13.130 --> 00:01:15.740
Most Java is also valid Groovy.

00:01:15.740 --> 00:01:19.240
Let's test that out by creating
a very simple JavaGreeter class,

00:01:19.240 --> 00:01:21.240
just as one method to say hello.

00:01:21.240 --> 00:01:23.100
And prints hello Java to standard out.

00:01:24.450 --> 00:01:26.410
If we create an instance
of that class and

00:01:26.410 --> 00:01:28.620
then tell it to say hello
let's see what happens.

00:01:28.620 --> 00:01:31.230
Remember this is Groovy not Java.

00:01:31.230 --> 00:01:34.770
Let's run our gradle groovy
task again and there we go.

00:01:34.770 --> 00:01:35.270
Hello Java.

00:01:36.700 --> 00:01:39.200
Gradle is an optionally typed language.

00:01:39.200 --> 00:01:43.590
That means that you can give all of your
variables types if you want to, but if

00:01:43.590 --> 00:01:46.890
you don't feel like it you can declare
variables just using the def keyword.

00:01:46.890 --> 00:01:50.690
In this case, we're just declaring
a variable called foo with value 6.5.

00:01:50.690 --> 00:01:54.560
We can also execute simple
groovy code inside a string,

00:01:54.560 --> 00:01:59.120
by creating a block of curly
braces preceded by a dollar sign.

00:01:59.120 --> 00:02:00.950
While dynamic typing is really nice,

00:02:00.950 --> 00:02:03.740
sometimes it is good to know
the class of a variable.

00:02:03.740 --> 00:02:07.090
We can do that simply by calling
dot class on any variable.

00:02:07.090 --> 00:02:09.930
Finally, dynamic typing
also allows us to reassign

00:02:09.930 --> 00:02:11.770
a variable to a different type.

00:02:11.770 --> 00:02:14.700
This isn't very good practice but
it's good to show off.

00:02:14.700 --> 00:02:19.762
All right, let's give this code a try,
awesome it looks like foo has value 6.5,

00:02:19.762 --> 00:02:22.580
yep that's what we expect
down at this line.

00:02:22.580 --> 00:02:24.810
Looks like five plus six
does indeed equal 11.

00:02:24.810 --> 00:02:28.580
Looks like Groovy was nice
enough to do this math for us.

00:02:28.580 --> 00:02:32.680
And then finally it looks like foo is
of class Java math big decimal when it

00:02:32.680 --> 00:02:34.540
has a value of 6.5.

00:02:34.540 --> 00:02:37.390
But then when we reassign
foo to a string it

00:02:37.390 --> 00:02:40.030
looks like foo now has
the class java.lang.string.

00:02:40.030 --> 00:02:42.010
Let's have a look at how to
declare functions in Groovy.

00:02:42.010 --> 00:02:46.550
It looks somewhat java-like but note the
def out front instead of a return type.

00:02:46.550 --> 00:02:48.530
Also we don't need a return statement.

00:02:48.530 --> 00:02:51.570
The last expression in the function
block is what's returned.

00:02:51.570 --> 00:02:54.100
So this function takes its input and
doubles it.

00:02:54.100 --> 00:02:58.730
We can call it with a number, however,
since plus is overloaded in Groovy,

00:02:58.730 --> 00:03:00.650
we can also call it with a string.

00:03:00.650 --> 00:03:03.432
Let's check out the output of
these invocations of doubleIt.

00:03:03.432 --> 00:03:07.330
All right, looks like doubleIt,
with the argument five gives us ten and

00:03:07.330 --> 00:03:11.230
doubleIt with the argument the string
foobar, gives us foobarfoobar.

00:03:11.230 --> 00:03:12.330
Fantastic.

00:03:12.330 --> 00:03:15.360
There's one more super cool
feature of Groovy, and

00:03:15.360 --> 00:03:18.790
that is whenever a function is called
with at least one argument and

00:03:18.790 --> 00:03:22.410
it's unambiguous, you can usually
leave off the parentheses.

00:03:22.410 --> 00:03:23.250
Let's give that a try.

00:03:23.250 --> 00:03:26.800
I've set us up with three functions
here, one of which no args,

00:03:26.800 --> 00:03:28.200
one with one arg, and one with two args.

00:03:28.200 --> 00:03:30.360
Let's see what we can do.

00:03:30.360 --> 00:03:33.620
If we go ahead and call our one arg
function with some argument and

00:03:33.620 --> 00:03:37.270
we don't put any parentheses around it,
well, let's see what happens.

00:03:37.270 --> 00:03:39.080
Hey, we successfully
called the function.

00:03:39.080 --> 00:03:40.090
All right.

00:03:40.090 --> 00:03:42.360
Now let's give the two
argument function a try.

00:03:42.360 --> 00:03:44.650
Note, we still have to separate
the arguments with a comma.

00:03:44.650 --> 00:03:47.430
All right, let's see how it goes.

00:03:47.430 --> 00:03:51.070
Beautiful, no parentheses,
still getting a function call.

00:03:51.070 --> 00:03:54.550
Let's see if we can pull the same
trick with the no argument function.

00:03:54.550 --> 00:03:55.500
Looks like something exploded.

00:03:55.500 --> 00:03:58.560
It turns out,
you can't use no parentheses when you're

00:03:58.560 --> 00:04:01.030
invoking a function that
doesn't have any arguments.

00:04:01.030 --> 00:04:03.160
Otherwise Groovy is confused
about what's going on.

00:04:03.160 --> 00:04:04.170
All right.

00:04:04.170 --> 00:04:06.230
Let's try something real hard now.

00:04:06.230 --> 00:04:08.120
We're doing a nested function call.

00:04:08.120 --> 00:04:09.600
So we've got two args.

00:04:09.600 --> 00:04:13.860
And then the first arg,
22 args is one arg past 500.

00:04:13.860 --> 00:04:17.250
And then 200 is going to be
the second arg, for two args.

00:04:17.250 --> 00:04:18.610
You think this is going to work?

00:04:18.610 --> 00:04:21.310
Let's give it a try.

00:04:21.310 --> 00:04:22.370
Hm.
Looks like something broke.

00:04:22.370 --> 00:04:25.130
Looks like there's something
weird going on in here.

00:04:25.130 --> 00:04:27.580
Turns out this is actually ambiguous.

00:04:27.580 --> 00:04:31.340
It's not clear to Groovy whether you
want to pass two arguments to one arg or

00:04:31.340 --> 00:04:32.490
what's going on here.

00:04:32.490 --> 00:04:34.440
Fortunately, we can make
this unambiguous with

00:04:34.440 --> 00:04:35.890
just a couple of parentheses around 500.

00:04:35.890 --> 00:04:39.715
Now that we've added those parentheses,
let's see if it works now.

00:04:39.715 --> 00:04:40.634
[SOUND] Beautiful,

00:04:40.634 --> 00:04:43.742
we're getting the nested function
call exactly how we want it.

00:04:43.742 --> 00:04:46.893
First the one arg function is being
called then the two arg function is

00:04:46.893 --> 00:04:47.610
being called.

