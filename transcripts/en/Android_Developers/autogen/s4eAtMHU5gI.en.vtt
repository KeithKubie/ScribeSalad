WEBVTT
Kind: captions
Language: en

00:00:01.490 --> 00:00:04.190
 
what do we do with threaded work when

00:00:04.190 --> 00:00:04.200
what do we do with threaded work when
 

00:00:04.200 --> 00:00:05.720
what do we do with threaded work when
the activity that kicked it off is no

00:00:05.720 --> 00:00:05.730
the activity that kicked it off is no
 

00:00:05.730 --> 00:00:06.559
the activity that kicked it off is no
longer alive

00:00:06.559 --> 00:00:06.569
longer alive
 

00:00:06.569 --> 00:00:08.810
longer alive
I'm Doug Stevenson and this is the exact

00:00:08.810 --> 00:00:08.820
I'm Doug Stevenson and this is the exact
 

00:00:08.820 --> 00:00:11.780
I'm Doug Stevenson and this is the exact
issue solved by loaders by now you've

00:00:11.780 --> 00:00:11.790
issue solved by loaders by now you've
 

00:00:11.790 --> 00:00:13.430
issue solved by loaders by now you've
seen that activities in your application

00:00:13.430 --> 00:00:13.440
seen that activities in your application
 

00:00:13.440 --> 00:00:15.499
seen that activities in your application
can be created and destroyed at any time

00:00:15.499 --> 00:00:15.509
can be created and destroyed at any time
 

00:00:15.509 --> 00:00:17.300
can be created and destroyed at any time
either in response to the user or

00:00:17.300 --> 00:00:17.310
either in response to the user or
 

00:00:17.310 --> 00:00:18.830
either in response to the user or
because Android needed the resources

00:00:18.830 --> 00:00:18.840
because Android needed the resources
 

00:00:18.840 --> 00:00:20.960
because Android needed the resources
this poses a problem for your threaded

00:00:20.960 --> 00:00:20.970
this poses a problem for your threaded
 

00:00:20.970 --> 00:00:22.880
this poses a problem for your threaded
work since the work may extend beyond

00:00:22.880 --> 00:00:22.890
work since the work may extend beyond
 

00:00:22.890 --> 00:00:25.460
work since the work may extend beyond
the lifetime of the activity say you

00:00:25.460 --> 00:00:25.470
the lifetime of the activity say you
 

00:00:25.470 --> 00:00:26.990
the lifetime of the activity say you
have a thread chugging away at some work

00:00:26.990 --> 00:00:27.000
have a thread chugging away at some work
 

00:00:27.000 --> 00:00:28.580
have a thread chugging away at some work
and that thread holds references to

00:00:28.580 --> 00:00:28.590
and that thread holds references to
 

00:00:28.590 --> 00:00:30.200
and that thread holds references to
views that will update upon completion

00:00:30.200 --> 00:00:30.210
views that will update upon completion
 

00:00:30.210 --> 00:00:32.720
views that will update upon completion
if the activity ends before the work is

00:00:32.720 --> 00:00:32.730
if the activity ends before the work is
 

00:00:32.730 --> 00:00:35.150
if the activity ends before the work is
complete a few things will happen first

00:00:35.150 --> 00:00:35.160
complete a few things will happen first
 

00:00:35.160 --> 00:00:37.220
complete a few things will happen first
because the strong references to the

00:00:37.220 --> 00:00:37.230
because the strong references to the
 

00:00:37.230 --> 00:00:38.990
because the strong references to the
views the activity object will be kept

00:00:38.990 --> 00:00:39.000
views the activity object will be kept
 

00:00:39.000 --> 00:00:40.580
views the activity object will be kept
in memory until the work finally

00:00:40.580 --> 00:00:40.590
in memory until the work finally
 

00:00:40.590 --> 00:00:42.830
in memory until the work finally
finishes this is a memory leak and we

00:00:42.830 --> 00:00:42.840
finishes this is a memory leak and we
 

00:00:42.840 --> 00:00:44.840
finishes this is a memory leak and we
don't have to tell you this is bad since

00:00:44.840 --> 00:00:44.850
don't have to tell you this is bad since
 

00:00:44.850 --> 00:00:46.160
don't have to tell you this is bad since
it can cause your app to run out of

00:00:46.160 --> 00:00:46.170
it can cause your app to run out of
 

00:00:46.170 --> 00:00:49.010
it can cause your app to run out of
memory and eventually crash second the

00:00:49.010 --> 00:00:49.020
memory and eventually crash second the
 

00:00:49.020 --> 00:00:51.139
memory and eventually crash second the
late updates these views are wasted

00:00:51.139 --> 00:00:51.149
late updates these views are wasted
 

00:00:51.149 --> 00:00:52.459
late updates these views are wasted
because they're no longer visible and

00:00:52.459 --> 00:00:52.469
because they're no longer visible and
 

00:00:52.469 --> 00:00:55.040
because they're no longer visible and
third you might have to repeat the work

00:00:55.040 --> 00:00:55.050
third you might have to repeat the work
 

00:00:55.050 --> 00:00:57.830
third you might have to repeat the work
for a whole new set of views to get your

00:00:57.830 --> 00:00:57.840
for a whole new set of views to get your
 

00:00:57.840 --> 00:00:59.299
for a whole new set of views to get your
threaded work to correctly cope with the

00:00:59.299 --> 00:00:59.309
threaded work to correctly cope with the
 

00:00:59.309 --> 00:01:00.799
threaded work to correctly cope with the
activity lifecycle and avoid these

00:01:00.799 --> 00:01:00.809
activity lifecycle and avoid these
 

00:01:00.809 --> 00:01:03.410
activity lifecycle and avoid these
problems you should use loaders loaders

00:01:03.410 --> 00:01:03.420
problems you should use loaders loaders
 

00:01:03.420 --> 00:01:05.000
problems you should use loaders loaders
are wise to the inner workings of the

00:01:05.000 --> 00:01:05.010
are wise to the inner workings of the
 

00:01:05.010 --> 00:01:06.620
are wise to the inner workings of the
activity life cycle so you can you can

00:01:06.620 --> 00:01:06.630
activity life cycle so you can you can
 

00:01:06.630 --> 00:01:08.480
activity life cycle so you can you can
ensure your work ends in the right place

00:01:08.480 --> 00:01:08.490
ensure your work ends in the right place
 

00:01:08.490 --> 00:01:10.820
ensure your work ends in the right place
every time a properly implemented loader

00:01:10.820 --> 00:01:10.830
every time a properly implemented loader
 

00:01:10.830 --> 00:01:13.100
every time a properly implemented loader
is resistant to activity leaks always

00:01:13.100 --> 00:01:13.110
is resistant to activity leaks always
 

00:01:13.110 --> 00:01:14.929
is resistant to activity leaks always
updates the correct views and is never

00:01:14.929 --> 00:01:14.939
updates the correct views and is never
 

00:01:14.939 --> 00:01:18.020
updates the correct views and is never
repeated unnecessarily let's take a look

00:01:18.020 --> 00:01:18.030
repeated unnecessarily let's take a look
 

00:01:18.030 --> 00:01:18.770
repeated unnecessarily let's take a look
at how this works

00:01:18.770 --> 00:01:18.780
at how this works
 

00:01:18.780 --> 00:01:20.719
at how this works
instead of kicking off your work in an

00:01:20.719 --> 00:01:20.729
instead of kicking off your work in an
 

00:01:20.729 --> 00:01:22.249
instead of kicking off your work in an
async task or some other thread you

00:01:22.249 --> 00:01:22.259
async task or some other thread you
 

00:01:22.259 --> 00:01:24.109
async task or some other thread you
control you ask the activity for an

00:01:24.109 --> 00:01:24.119
control you ask the activity for an
 

00:01:24.119 --> 00:01:26.480
control you ask the activity for an
instance of a loader manager send the

00:01:26.480 --> 00:01:26.490
instance of a loader manager send the
 

00:01:26.490 --> 00:01:28.039
instance of a loader manager send the
work to the loader manager and it will

00:01:28.039 --> 00:01:28.049
work to the loader manager and it will
 

00:01:28.049 --> 00:01:29.660
work to the loader manager and it will
make sure that your work may be handled

00:01:29.660 --> 00:01:29.670
make sure that your work may be handled
 

00:01:29.670 --> 00:01:31.850
make sure that your work may be handled
properly in the face of configuration

00:01:31.850 --> 00:01:31.860
properly in the face of configuration
 

00:01:31.860 --> 00:01:33.679
properly in the face of configuration
changes for the activity the loader

00:01:33.679 --> 00:01:33.689
changes for the activity the loader
 

00:01:33.689 --> 00:01:35.690
changes for the activity the loader
manager also caches the work result so

00:01:35.690 --> 00:01:35.700
manager also caches the work result so
 

00:01:35.700 --> 00:01:37.190
manager also caches the work result so
that it won't be repeated with future

00:01:37.190 --> 00:01:37.200
that it won't be repeated with future
 

00:01:37.200 --> 00:01:40.100
that it won't be repeated with future
changes now what if an activity with an

00:01:40.100 --> 00:01:40.110
changes now what if an activity with an
 

00:01:40.110 --> 00:01:41.600
changes now what if an activity with an
active loader is being popped off the

00:01:41.600 --> 00:01:41.610
active loader is being popped off the
 

00:01:41.610 --> 00:01:43.670
active loader is being popped off the
stack never to return what happens is

00:01:43.670 --> 00:01:43.680
stack never to return what happens is
 

00:01:43.680 --> 00:01:45.889
stack never to return what happens is
this in-flight work in this case the

00:01:45.889 --> 00:01:45.899
this in-flight work in this case the
 

00:01:45.899 --> 00:01:47.270
this in-flight work in this case the
loader manager makes a call back into

00:01:47.270 --> 00:01:47.280
loader manager makes a call back into
 

00:01:47.280 --> 00:01:49.219
loader manager makes a call back into
your code saying that its results will

00:01:49.219 --> 00:01:49.229
your code saying that its results will
 

00:01:49.229 --> 00:01:51.139
your code saying that its results will
never be used you can use this callback

00:01:51.139 --> 00:01:51.149
never be used you can use this callback
 

00:01:51.149 --> 00:01:53.630
never be used you can use this callback
to abort the work clean up and move on

00:01:53.630 --> 00:01:53.640
to abort the work clean up and move on
 

00:01:53.640 --> 00:01:56.060
to abort the work clean up and move on
without wasting any more resources now

00:01:56.060 --> 00:01:56.070
without wasting any more resources now
 

00:01:56.070 --> 00:01:57.950
without wasting any more resources now
it's worth noting that loaders are

00:01:57.950 --> 00:01:57.960
it's worth noting that loaders are
 

00:01:57.960 --> 00:02:00.289
it's worth noting that loaders are
specific to activities and as such give

00:02:00.289 --> 00:02:00.299
specific to activities and as such give
 

00:02:00.299 --> 00:02:01.880
specific to activities and as such give
you a solid framework for separating

00:02:01.880 --> 00:02:01.890
you a solid framework for separating
 

00:02:01.890 --> 00:02:03.889
you a solid framework for separating
your views from your worker threads and

00:02:03.889 --> 00:02:03.899
your views from your worker threads and
 

00:02:03.899 --> 00:02:05.510
your views from your worker threads and
minimize the amount of work you would

00:02:05.510 --> 00:02:05.520
minimize the amount of work you would
 

00:02:05.520 --> 00:02:06.950
minimize the amount of work you would
otherwise have to repeat with the

00:02:06.950 --> 00:02:06.960
otherwise have to repeat with the
 

00:02:06.960 --> 00:02:09.350
otherwise have to repeat with the
activity life cycle the downside of

00:02:09.350 --> 00:02:09.360
activity life cycle the downside of
 

00:02:09.360 --> 00:02:10.910
activity life cycle the downside of
loaders is that can be quite a bit of

00:02:10.910 --> 00:02:10.920
loaders is that can be quite a bit of
 

00:02:10.920 --> 00:02:12.470
loaders is that can be quite a bit of
extra code to get them correctly

00:02:12.470 --> 00:02:12.480
extra code to get them correctly
 

00:02:12.480 --> 00:02:13.650
extra code to get them correctly
integrated into your app

00:02:13.650 --> 00:02:13.660
integrated into your app
 

00:02:13.660 --> 00:02:15.120
integrated into your app
so to help you get started we've

00:02:15.120 --> 00:02:15.130
so to help you get started we've
 

00:02:15.130 --> 00:02:17.010
so to help you get started we've
provided some sample code illustrating

00:02:17.010 --> 00:02:17.020
provided some sample code illustrating
 

00:02:17.020 --> 00:02:19.440
provided some sample code illustrating
some common use cases and for more

00:02:19.440 --> 00:02:19.450
some common use cases and for more
 

00:02:19.450 --> 00:02:21.000
some common use cases and for more
information on improving your

00:02:21.000 --> 00:02:21.010
information on improving your
 

00:02:21.010 --> 00:02:22.830
information on improving your
application performance keep watching

00:02:22.830 --> 00:02:22.840
application performance keep watching
 

00:02:22.840 --> 00:02:24.300
application performance keep watching
the Android performance patterns videos

00:02:24.300 --> 00:02:24.310
the Android performance patterns videos
 

00:02:24.310 --> 00:02:26.490
the Android performance patterns videos
and don't forget to join the G+

00:02:26.490 --> 00:02:26.500
and don't forget to join the G+
 

00:02:26.500 --> 00:02:28.110
and don't forget to join the G+
community for advice from other great

00:02:28.110 --> 00:02:28.120
community for advice from other great
 

00:02:28.120 --> 00:02:31.320
community for advice from other great
engineers so keep calm profile your code

00:02:31.320 --> 00:02:31.330
engineers so keep calm profile your code
 

00:02:31.330 --> 00:02:35.310
engineers so keep calm profile your code
and always remember perf matters

