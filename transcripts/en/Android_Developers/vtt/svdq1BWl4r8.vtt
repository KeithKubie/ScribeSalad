WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.988
[MUSIC PLAYING]

00:00:06.776 --> 00:00:07.900
ANDREW LEWIS: Hi, everyone.

00:00:07.900 --> 00:00:09.540
Thank you very much
for coming along.

00:00:09.540 --> 00:00:10.260
I'm Andrew.

00:00:10.260 --> 00:00:12.700
I'm a Software Engineer
on the ExoPlayer team.

00:00:12.700 --> 00:00:13.908
MARC BACHINGER: And I'm Marc.

00:00:13.908 --> 00:00:15.660
I'm Developer Advocate
for Android Media.

00:00:15.660 --> 00:00:17.160
ANDREW LEWIS: So
in today's session,

00:00:17.160 --> 00:00:20.560
we're hoping to demonstrate
how you can build really,

00:00:20.560 --> 00:00:23.010
really fully-featured media
playback functionality

00:00:23.010 --> 00:00:27.074
into apps using quite
little code using ExoPlayer.

00:00:27.074 --> 00:00:28.740
And to do that, we're
going to guide you

00:00:28.740 --> 00:00:32.040
through the process of
building two applications.

00:00:32.040 --> 00:00:34.775
We're going to start by
focusing on the video use case.

00:00:34.775 --> 00:00:36.900
We're going to build a
simple video player app that

00:00:36.900 --> 00:00:38.750
will play an MP4 stream.

00:00:38.750 --> 00:00:40.740
Then we're going to show
you how to insert ads

00:00:40.740 --> 00:00:42.890
alongside that video content.

00:00:42.890 --> 00:00:44.892
Then we're going to
shift our focus to audio.

00:00:44.892 --> 00:00:46.600
We're going to show
you how to play audio

00:00:46.600 --> 00:00:47.984
in a background service.

00:00:47.984 --> 00:00:49.650
We're going to show
you how to integrate

00:00:49.650 --> 00:00:51.356
with Android MediaSessions.

00:00:51.356 --> 00:00:52.980
And finally, we're
going to take a look

00:00:52.980 --> 00:00:55.230
at some new functionality
we've recently

00:00:55.230 --> 00:01:00.030
released for downloading
media for offline playback.

00:01:00.030 --> 00:01:01.710
So like last year,
we're hoping to have

00:01:01.710 --> 00:01:03.690
a mixture of some
introductory content

00:01:03.690 --> 00:01:06.300
and also some coverage of
slightly more tricky use cases,

00:01:06.300 --> 00:01:08.462
so hopefully there's
something for everyone.

00:01:08.462 --> 00:01:10.170
And with that in mind,
I'm going to start

00:01:10.170 --> 00:01:13.110
by saying a bit about what
ExoPlayer is for anyone who

00:01:13.110 --> 00:01:16.286
hasn't used the library before.

00:01:16.286 --> 00:01:18.610
OK.

00:01:18.610 --> 00:01:20.220
Clicker doesn't
seem to be working.

00:01:20.220 --> 00:01:21.560
Next slide.

00:01:21.560 --> 00:01:22.700
Great.

00:01:22.700 --> 00:01:25.880
So ExoPlayer is an
application-level media player.

00:01:25.880 --> 00:01:28.190
That means that you choose
which version of ExoPlayer

00:01:28.190 --> 00:01:30.320
you'd like to use, and
then you bundle the player

00:01:30.320 --> 00:01:33.650
implementation into your
application as a dependency,

00:01:33.650 --> 00:01:35.450
and what that gives
you is consistent

00:01:35.450 --> 00:01:38.720
playback functionality across
all different Android versions

00:01:38.720 --> 00:01:41.270
and across all
different devices.

00:01:41.270 --> 00:01:43.640
ExoPlayer works from API 16--

00:01:43.640 --> 00:01:45.530
that's Android
Jelly Bean upwards,

00:01:45.530 --> 00:01:49.790
so with that you can reach more
than 99% of active devices.

00:01:49.790 --> 00:01:52.610
The project is open source,
is hosted on GitHub,

00:01:52.610 --> 00:01:54.530
and we have an active
community there,

00:01:54.530 --> 00:01:58.020
and you can file issues
with feature requests, bugs,

00:01:58.020 --> 00:02:01.230
and you can even send
us pull requests.

00:02:01.230 --> 00:02:03.670
ExoPlayer is also
quite widely used

00:02:03.670 --> 00:02:06.070
both within Google Applications
like the YouTube app

00:02:06.070 --> 00:02:09.759
for Android, and also
in Google Play Movies.

00:02:09.759 --> 00:02:13.990
It's also quite widely used in
the wider Android community.

00:02:13.990 --> 00:02:16.990
And there are actually
over 200,000 applications

00:02:16.990 --> 00:02:20.909
on the Play Store that
are using ExoPlayer.

00:02:20.909 --> 00:02:22.450
And the team is
always really excited

00:02:22.450 --> 00:02:23.824
to see the kind
of great products

00:02:23.824 --> 00:02:26.970
that you're all building
using ExoPlayer.

00:02:26.970 --> 00:02:28.440
Since last year's
talk, we've been

00:02:28.440 --> 00:02:31.410
working hard on both
stability and performance

00:02:31.410 --> 00:02:34.560
improvements behind the scenes,
but also on some brand-new

00:02:34.560 --> 00:02:35.840
features.

00:02:35.840 --> 00:02:38.400
And in doing that,
ExoPlayer is gradually

00:02:38.400 --> 00:02:40.650
evolving into quite a
fully-featured solution

00:02:40.650 --> 00:02:43.690
for media playback.

00:02:43.690 --> 00:02:46.390
So here's some of the
highlights of the features

00:02:46.390 --> 00:02:48.740
that we've added
over the past year.

00:02:48.740 --> 00:02:50.967
There's much too much to
go into detail on here,

00:02:50.967 --> 00:02:53.050
but I would encourage you
to check out the release

00:02:53.050 --> 00:02:56.260
notes and the root directory
of our GitHub project,

00:02:56.260 --> 00:02:59.110
where you can find full details
of all of the changes included

00:02:59.110 --> 00:03:02.670
in each new release
of the player.

00:03:02.670 --> 00:03:04.050
In today's talk,
we're just going

00:03:04.050 --> 00:03:06.510
to cover a few highlights,
including support

00:03:06.510 --> 00:03:08.670
for downloading
media as I mentioned,

00:03:08.670 --> 00:03:11.510
and also support for
player notifications.

00:03:11.510 --> 00:03:14.380
OK, I think that's
enough on the slides.

00:03:14.380 --> 00:03:16.170
Let's get on with
some live coding,

00:03:16.170 --> 00:03:18.960
and for each of these two apps,
our video app and audio app,

00:03:18.960 --> 00:03:21.987
our starting point will
be a mostly empty project,

00:03:21.987 --> 00:03:24.570
because we want to show you as
much of the interesting code as

00:03:24.570 --> 00:03:25.640
possible.

00:03:25.640 --> 00:03:28.570
But we're going to provide a
link to a branch on our GitHub

00:03:28.570 --> 00:03:30.990
project where you can check
out the code afterwards

00:03:30.990 --> 00:03:33.490
if you want to look at
things in a bit more detail.

00:03:33.490 --> 00:03:35.580
OK, Marc, are you ready
to do some furious typing?

00:03:35.580 --> 00:03:36.430
MARC BACHINGER: Yes, I am.

00:03:36.430 --> 00:03:37.263
ANDREW LEWIS: Great.

00:03:37.263 --> 00:03:39.910
OK, if you could switch
to the laptop, please.

00:03:39.910 --> 00:03:43.520
Our starting point is a mostly
empty project, as I mentioned,

00:03:43.520 --> 00:03:45.624
and we're going to make
a video player app where

00:03:45.624 --> 00:03:47.790
we start playing the stream
as soon as the app comes

00:03:47.790 --> 00:03:49.440
into the foreground,
and then we stop

00:03:49.440 --> 00:03:51.700
playing the stream when
we go into the background.

00:03:51.700 --> 00:03:53.190
And to do that,
the first step is

00:03:53.190 --> 00:03:56.687
going to be to add a dependency
on the ExoPlayer core library,

00:03:56.687 --> 00:03:58.770
and this provides the main
interface to the player

00:03:58.770 --> 00:04:01.950
that you can use to control
playback from within code.

00:04:01.950 --> 00:04:03.900
As you can see, Marc's
added a dependency

00:04:03.900 --> 00:04:06.720
on the core library
with a version 2.8.0,

00:04:06.720 --> 00:04:09.640
which is the new release
that we have done this week.

00:04:09.640 --> 00:04:14.550
He's also added a dependency
on the optional UI module.

00:04:14.550 --> 00:04:17.670
This provides some customizable
high-level UI components

00:04:17.670 --> 00:04:20.160
which you can put into your
applications for things

00:04:20.160 --> 00:04:22.440
like showing a video
player interview-- that's

00:04:22.440 --> 00:04:25.290
Player View, which we're
going to use today.

00:04:25.290 --> 00:04:27.117
And it also provides
Playback Control View

00:04:27.117 --> 00:04:28.950
and some other components,
and these are all

00:04:28.950 --> 00:04:31.140
very customizable,
so you can change

00:04:31.140 --> 00:04:33.840
which icons you are using,
you can customize the layouts,

00:04:33.840 --> 00:04:35.440
and so on.

00:04:35.440 --> 00:04:37.800
So you can see that Marc has
added a Player View, which

00:04:37.800 --> 00:04:39.840
is going to fill the activity.

00:04:39.840 --> 00:04:42.020
And he's given it an
identifier, player_view,

00:04:42.020 --> 00:04:44.670
so we'll be able to
access it from code.

00:04:44.670 --> 00:04:47.550
Now, if we switch over
to our main activity,

00:04:47.550 --> 00:04:49.770
we can see in our
onCreate methods,

00:04:49.770 --> 00:04:54.400
we can get access to that
view using Find View by ID.

00:04:54.400 --> 00:04:55.927
And once we got
access to that view,

00:04:55.927 --> 00:04:57.510
then the next step
we're going to take

00:04:57.510 --> 00:05:00.570
is to actually
initialize the player.

00:05:00.570 --> 00:05:04.230
OK, so once we've got our
Player View in the fields,

00:05:04.230 --> 00:05:07.950
let's override the
OnStart method.

00:05:07.950 --> 00:05:11.299
And in OnStart, we're going
to initialize the player.

00:05:11.299 --> 00:05:12.840
To initialize the
player, we're going

00:05:12.840 --> 00:05:15.870
to use a static method on
the ExoPlayer factory called

00:05:15.870 --> 00:05:17.660
NewSimpleInstance.

00:05:17.660 --> 00:05:20.130
This is going to give us a
SimpleExoPlayer instance.

00:05:20.130 --> 00:05:22.170
Now it might sound like
SimpleExoPlayer is only

00:05:22.170 --> 00:05:24.850
for really basic stuff, but
actually SimpleExoPlayer

00:05:24.850 --> 00:05:27.000
is our recommended way of
integrating at the moment

00:05:27.000 --> 00:05:29.340
because it provides-- it
does lots of things for you.

00:05:29.340 --> 00:05:32.010
For example, handling the
life cycle of the surface

00:05:32.010 --> 00:05:34.150
holder for video output.

00:05:34.150 --> 00:05:35.770
You can see also
that were parsing

00:05:35.770 --> 00:05:39.160
in as well as a context, a
TrackSelector implementation.

00:05:39.160 --> 00:05:41.830
In this example, we are going
to use a default TrackSelector,

00:05:41.830 --> 00:05:43.579
but this is an example
of a parse in which

00:05:43.579 --> 00:05:45.620
is very common in
ExoPlayer's API

00:05:45.620 --> 00:05:49.060
where you parse in a
dependency of a component.

00:05:49.060 --> 00:05:52.000
In this case, we're parsing
in a default TrackSelector,

00:05:52.000 --> 00:05:54.711
but you could parse in your own
TrackSelector implementation

00:05:54.711 --> 00:05:56.710
if you wanted to have
much more control over how

00:05:56.710 --> 00:05:58.870
track selection is working.

00:05:58.870 --> 00:06:01.270
So Marc's already going ahead
and he's bound the player

00:06:01.270 --> 00:06:03.640
to the player view so that
the player's output is

00:06:03.640 --> 00:06:06.100
going to appear in
that particular view.

00:06:06.100 --> 00:06:09.520
OK, so the next step
is to tell ExoPlayer

00:06:09.520 --> 00:06:10.840
what we want it to play.

00:06:10.840 --> 00:06:13.010
And for that, there
are really two parts.

00:06:13.010 --> 00:06:16.450
The first one is to provide
a factory for DataSources.

00:06:16.450 --> 00:06:19.990
DataSources tell ExoPlayer
how to load data, for example,

00:06:19.990 --> 00:06:22.930
using a particular HTTP
stack or loading files

00:06:22.930 --> 00:06:24.660
from the local device.

00:06:24.660 --> 00:06:27.340
In this example, we're using
a default DataSource which

00:06:27.340 --> 00:06:28.990
is suitable for many use cases.

00:06:28.990 --> 00:06:33.070
It provides loading
for HTTP URLs, follows

00:06:33.070 --> 00:06:36.910
from the local disk assets and
resources bundled into your ADK

00:06:36.910 --> 00:06:37.984
and so on.

00:06:37.984 --> 00:06:39.400
But if you wanted
to, for example,

00:06:39.400 --> 00:06:41.110
use the chromium
network stack here,

00:06:41.110 --> 00:06:44.460
then you could use a
Cronet DataSourceFactory.

00:06:44.460 --> 00:06:47.550
OK, so that's the first part of
telling ExoPlayer what to load.

00:06:47.550 --> 00:06:50.220
The next part is
specifying a MediaSource.

00:06:50.220 --> 00:06:51.870
Your choice of
MediaSource is going

00:06:51.870 --> 00:06:54.750
to depend on the type of
media you're trying to play.

00:06:54.750 --> 00:06:57.150
In this example, we're
going to be playing an MP4,

00:06:57.150 --> 00:06:59.460
so we're going to use an
ExtractorMediaSource which

00:06:59.460 --> 00:07:03.780
supports formats like MP4,
MP3, Matroska, and so on.

00:07:03.780 --> 00:07:07.170
If you wanted to play Dash
or HLS or smooth streaming

00:07:07.170 --> 00:07:10.020
streams, then you would use
the corresponding MediaSources

00:07:10.020 --> 00:07:12.670
for those different formats.

00:07:12.670 --> 00:07:14.630
And you can see that
Marc's parsing in the URI

00:07:14.630 --> 00:07:18.747
to our MP4 when he's
creating the MediaSource.

00:07:18.747 --> 00:07:20.330
Once we've got our
MediaSource, now we

00:07:20.330 --> 00:07:23.090
just need to prepare the
player to start buffering data,

00:07:23.090 --> 00:07:25.710
so we'll parse that
to the prepare method.

00:07:25.710 --> 00:07:27.950
That we're going to
call SetPlayWhenReady

00:07:27.950 --> 00:07:30.140
to tell the player that
as soon as it transitions

00:07:30.140 --> 00:07:32.380
from the buffering state
to the ready state,

00:07:32.380 --> 00:07:35.054
then playback should
begin automatically.

00:07:35.054 --> 00:07:36.470
Having done that,
all that remains

00:07:36.470 --> 00:07:39.980
is to clean up when the activity
goes into the background,

00:07:39.980 --> 00:07:46.380
so we'll overwrite
onStop, and in that, we're

00:07:46.380 --> 00:07:49.709
going to clear the player
reference on the Player View,

00:07:49.709 --> 00:07:51.500
and then we're going
to release the player.

00:07:54.970 --> 00:07:57.330
And this is kind of the
minimal code you need just

00:07:57.330 --> 00:07:58.990
to play a video stream.

00:07:58.990 --> 00:08:02.060
Let's go ahead and deploy
that to the device now.

00:08:02.060 --> 00:08:04.960
And if we could switch
to the phone, please.

00:08:04.960 --> 00:08:08.200
Hopefully you haven't
missed out anything.

00:08:08.200 --> 00:08:11.910
So when the application's
been installed on the device,

00:08:11.910 --> 00:08:14.800
you should see the video
starts to play automatically,

00:08:14.800 --> 00:08:15.780
[VIDEO PLAYING]

00:08:15.780 --> 00:08:19.080
And you can see that if
you tap on the video,

00:08:19.080 --> 00:08:22.410
you get some simple
playback controls--

00:08:22.410 --> 00:08:24.660
pretty much what you'd expect
from a video player app,

00:08:24.660 --> 00:08:27.710
so you can pause and resume,
you can seek around, and so on.

00:08:32.200 --> 00:08:36.659
Let's now switch back
to the laptop, please.

00:08:36.659 --> 00:08:39.593
So let's imagine we have
launched our video app.

00:08:39.593 --> 00:08:41.690
If we could switch to
the laptop, please.

00:08:41.690 --> 00:08:43.440
We've launched our
video app, and now we'd

00:08:43.440 --> 00:08:45.870
like to think about how
we're going to monetize

00:08:45.870 --> 00:08:48.090
our content by showing ads.

00:08:48.090 --> 00:08:50.610
This is extremely easy
to do with ExoPlayer.

00:08:50.610 --> 00:08:53.890
We've recently added
an IMA extension,

00:08:53.890 --> 00:08:55.500
which makes this very easy.

00:08:55.500 --> 00:08:57.840
So ExoPlayer
extensions are wrappers

00:08:57.840 --> 00:08:59.790
around external
functionality that

00:08:59.790 --> 00:09:02.070
make it very easy to
use with ExoPlayer.

00:09:02.070 --> 00:09:05.460
In this case, the IMA
extension is a wrapper

00:09:05.460 --> 00:09:09.060
around the interactive media
ads SDK, which provides support

00:09:09.060 --> 00:09:11.970
for loading XML ad
texts in VAST and VMAP

00:09:11.970 --> 00:09:14.610
formats, which is a standard
format for information

00:09:14.610 --> 00:09:16.407
about ads.

00:09:16.407 --> 00:09:18.240
So we're going to be
using that to load ads,

00:09:18.240 --> 00:09:19.614
and then we're
going to insert it

00:09:19.614 --> 00:09:22.570
within the content
in our player.

00:09:22.570 --> 00:09:25.989
So Marc's going to create
a ads loader, which is a--

00:09:25.989 --> 00:09:27.780
we're going to use an
IMA ads loader, which

00:09:27.780 --> 00:09:31.260
is the object that's provided
by the IMA extension.

00:09:31.260 --> 00:09:34.530
This is going to take the
context and an ad tag URI,

00:09:34.530 --> 00:09:36.950
which is the URI of an
XML document specifying

00:09:36.950 --> 00:09:39.610
what ads to play
where in the content.

00:09:39.610 --> 00:09:41.780
So we're going to create
the ads later in onCreate,

00:09:41.780 --> 00:09:44.220
and then we're going to
release it in onDestroy.

00:09:44.220 --> 00:09:46.710
The reason we're using
onCreate and onDestroy

00:09:46.710 --> 00:09:49.950
is that that ads loader contains
information about which ads

00:09:49.950 --> 00:09:51.462
have already been
played, so we want

00:09:51.462 --> 00:09:53.670
to make sure that if the
app goes into the background

00:09:53.670 --> 00:09:54.940
and comes back into
the foreground,

00:09:54.940 --> 00:09:56.690
we don't show the same
ads multiple times.

00:09:59.190 --> 00:10:00.990
As I mentioned before,
media sources are

00:10:00.990 --> 00:10:04.020
how we tell ExoPlayer what to
play, and in order to play ads,

00:10:04.020 --> 00:10:07.530
we use the predictably
named AdsMediaSource.

00:10:07.530 --> 00:10:09.450
So we're going to create
an AdsMediaSource.

00:10:09.450 --> 00:10:11.070
We'll parse in the
contentMediaSource

00:10:11.070 --> 00:10:12.180
that we want to play.

00:10:12.180 --> 00:10:13.740
We'll parse in a
DataSourceFactory

00:10:13.740 --> 00:10:16.880
which is going to be used to
load data for playing the ads.

00:10:16.880 --> 00:10:19.050
We'll parse in the Ads
Loader, and finally we'll

00:10:19.050 --> 00:10:21.927
parse in a View Group
that's on top of the player,

00:10:21.927 --> 00:10:23.760
and that's going to be
used to show any user

00:10:23.760 --> 00:10:26.110
interface associated with
ads, like for example,

00:10:26.110 --> 00:10:28.062
the Skip button.

00:10:28.062 --> 00:10:30.400
And building an
AdsMediaSource out

00:10:30.400 --> 00:10:32.110
of a contentMediaSource
like this

00:10:32.110 --> 00:10:34.570
is an example of
MediaSource composition,

00:10:34.570 --> 00:10:36.850
and this is something that
you can do with ExoPlayer.

00:10:36.850 --> 00:10:38.280
We'll see some
more examples of it

00:10:38.280 --> 00:10:41.050
later when we look at playlists.

00:10:41.050 --> 00:10:44.150
OK, so we prepare the player
with the AdsMediaSource,

00:10:44.150 --> 00:10:47.540
and then we should
be good to go.

00:10:47.540 --> 00:10:48.839
So you can see, we--

00:10:48.839 --> 00:10:49.880
hopefully this will work.

00:10:49.880 --> 00:10:53.180
If we can switch to the phone?

00:10:53.180 --> 00:10:55.520
We were able to add
support for playing ads

00:10:55.520 --> 00:10:57.990
with maybe 10 or
so lines of code,

00:10:57.990 --> 00:11:01.880
and actually this way of
integrating the IMA SDK

00:11:01.880 --> 00:11:03.380
gives a really good
user experience,

00:11:03.380 --> 00:11:07.520
because ExoPlayer knows
about which ads are coming up

00:11:07.520 --> 00:11:09.710
in the future, and
that means that it's

00:11:09.710 --> 00:11:12.000
going to be able to buffer
the content in advance.

00:11:12.000 --> 00:11:13.970
It can buffer the ads
in advance to give you

00:11:13.970 --> 00:11:17.610
seamless transitions
between ads and content.

00:11:17.610 --> 00:11:19.880
So as you saw, we had a
pre-roll ad at the beginning,

00:11:19.880 --> 00:11:22.970
and now the time bar has
little yellow markers,

00:11:22.970 --> 00:11:24.890
which are showing us
the positions of ads

00:11:24.890 --> 00:11:26.300
within the content.

00:11:26.300 --> 00:11:27.980
And ExoPlayer is
taking care of all

00:11:27.980 --> 00:11:30.440
of the difficulty
of loading the ads

00:11:30.440 --> 00:11:33.900
and buffering everything
behind the scenes for us.

00:11:33.900 --> 00:11:36.550
OK, so that's ad play
back, and now over to Marc

00:11:36.550 --> 00:11:37.830
to talk a bit about audio.

00:11:37.830 --> 00:11:38.705
MARC BACHINGER: Yeah.

00:11:38.705 --> 00:11:39.900
Thank you, Andrew.

00:11:39.900 --> 00:11:42.390
So far, we focused
on video only,

00:11:42.390 --> 00:11:44.220
so let's switch to
another application

00:11:44.220 --> 00:11:46.890
and look a little bit
into audio playback.

00:11:46.890 --> 00:11:49.440
Audio playback is a little
bit more challenging

00:11:49.440 --> 00:11:51.230
because we want
to enable the user

00:11:51.230 --> 00:11:53.400
to put our application
into the background

00:11:53.400 --> 00:11:56.280
and use another application,
and audio should still

00:11:56.280 --> 00:11:58.470
keep playing in the background.

00:11:58.470 --> 00:12:02.070
For this, we are going to use a
so-called "foreground service."

00:12:02.070 --> 00:12:04.050
It's called a foreground
service because we

00:12:04.050 --> 00:12:06.870
need to attach a
notification to this service,

00:12:06.870 --> 00:12:09.170
and this notification
is in the foreground.

00:12:09.170 --> 00:12:10.830
It's visible to the
user, so the user

00:12:10.830 --> 00:12:14.870
is always aware we are doing
some work in the background.

00:12:14.870 --> 00:12:17.550
Since [INAUDIBLE] such
a foreground service

00:12:17.550 --> 00:12:19.020
is a mandatory requirement.

00:12:19.020 --> 00:12:21.630
If we don't put our service
into the foreground,

00:12:21.630 --> 00:12:25.620
the system will kill our service
and the application crashes.

00:12:25.620 --> 00:12:27.720
So let's have a
look at the starting

00:12:27.720 --> 00:12:31.050
point of our foreground
service, and let's switch back

00:12:31.050 --> 00:12:32.820
to the laptop, please.

00:12:32.820 --> 00:12:36.480
Yes, we see here we have
this AudioPlayerService which

00:12:36.480 --> 00:12:39.660
extends from the service,
because we have already

00:12:39.660 --> 00:12:41.560
overwritten the
onCreate method where

00:12:41.560 --> 00:12:44.190
we put the code from
our video sample,

00:12:44.190 --> 00:12:47.520
where we initialize and prepare
the player with a single media

00:12:47.520 --> 00:12:48.310
item.

00:12:48.310 --> 00:12:51.010
In onDestroy, we'll
release our resources.

00:12:51.010 --> 00:12:55.470
And finally in onStart
command, we return StartSticky,

00:12:55.470 --> 00:12:57.660
so the service is not
immediately destroyed

00:12:57.660 --> 00:13:02.380
and we can explicitly terminate
our service when we are ready--

00:13:02.380 --> 00:13:05.360
when we are finished
with audio playback.

00:13:05.360 --> 00:13:08.400
The service also already
reaches in the manifest.

00:13:08.400 --> 00:13:10.800
We have this simple
service element

00:13:10.800 --> 00:13:14.520
which just points to our
AudioPlayerService clause.

00:13:14.520 --> 00:13:18.540
And finally, we need to have
a way to start our service.

00:13:18.540 --> 00:13:20.220
We do this in the
main activity--

00:13:20.220 --> 00:13:23.330
in the onCreate method
of the main activity.

00:13:23.330 --> 00:13:25.470
Here we create an
intent pointing

00:13:25.470 --> 00:13:27.930
to our AudioPlayerService,
and then we

00:13:27.930 --> 00:13:31.260
use a static method of the
ExoPlayer library, which

00:13:31.260 --> 00:13:37.330
starts the service in foreground
according to the API level.

00:13:37.330 --> 00:13:41.250
So now let's go back into
the AudioPlayerService

00:13:41.250 --> 00:13:42.990
again, and let's
change this code

00:13:42.990 --> 00:13:46.350
a little bit of where we
initialize our player,

00:13:46.350 --> 00:13:49.530
because for audio, we
don't want to only support

00:13:49.530 --> 00:13:51.210
playing a single media item.

00:13:51.210 --> 00:13:55.560
We want to support playlists so
the user can move to the next

00:13:55.560 --> 00:13:59.100
or to the previous item, or can
just let the player display one

00:13:59.100 --> 00:14:01.440
item after the other.

00:14:01.440 --> 00:14:04.980
With ExoPlayer, we are using
a concatenatingMediaSource

00:14:04.980 --> 00:14:07.440
to implement playlists.

00:14:07.440 --> 00:14:10.710
This concatenatingMediaSource
just joins together

00:14:10.710 --> 00:14:14.070
a number of MediaSources
and place them gaplessly

00:14:14.070 --> 00:14:15.870
and without
rebuffering in between,

00:14:15.870 --> 00:14:22.218
so we achieve a pretty nice user
experience for audio playback.

00:14:22.218 --> 00:14:24.180
The concatenatingMediaSource
also

00:14:24.180 --> 00:14:26.730
allows us to dynamically
change the playlists,

00:14:26.730 --> 00:14:29.490
so we can add and
remove MediaSources

00:14:29.490 --> 00:14:32.430
while the player is
playing, or we can even

00:14:32.430 --> 00:14:35.494
move the currently playing
item in our playlist

00:14:35.494 --> 00:14:36.660
while the player is playing.

00:14:36.660 --> 00:14:38.160
That's pretty neat.

00:14:38.160 --> 00:14:41.690
So Andrew already started to
iterate over our samples area,

00:14:41.690 --> 00:14:44.160
and for each sample,
we get a URI.

00:14:44.160 --> 00:14:47.370
We again are going to create
an extractorMediaSource,

00:14:47.370 --> 00:14:49.800
but then we add this
extractorMediaSource

00:14:49.800 --> 00:14:51.990
to our concatenatingMediaSource.

00:14:51.990 --> 00:14:54.150
In the end, we
prepare our player

00:14:54.150 --> 00:14:56.310
with this
concatenatingMediaSource

00:14:56.310 --> 00:14:57.540
and we are already done.

00:14:57.540 --> 00:15:01.260
We are now supporting playlists
with gapless play, gapless

00:15:01.260 --> 00:15:05.710
reach, play gaplessly,
and without rebuffering.

00:15:05.710 --> 00:15:08.710
So-- but now let's have
a look at our service

00:15:08.710 --> 00:15:11.790
again and make it a
proper foreground service.

00:15:11.790 --> 00:15:14.970
We've already said we need
to attach a notification

00:15:14.970 --> 00:15:17.760
to our foreground
service, and for this, we

00:15:17.760 --> 00:15:22.320
are going to use the Player
Notification Service Manager.

00:15:22.320 --> 00:15:25.560
The Player Notification
Manager will not only

00:15:25.560 --> 00:15:29.280
create the notification, but
it will keep it nicely in sync

00:15:29.280 --> 00:15:31.680
with the state of the
player, so each time

00:15:31.680 --> 00:15:33.960
the player stage
changed, the Manager

00:15:33.960 --> 00:15:38.080
will update an application and
post it to our drawer again.

00:15:38.080 --> 00:15:40.995
We use a static method to
create this Player Notification

00:15:40.995 --> 00:15:44.120
Manager, and we need to
parse a couple of arguments

00:15:44.120 --> 00:15:44.760
[INAUDIBLE].

00:15:44.760 --> 00:15:47.040
First, we need to
parse the context.

00:15:47.040 --> 00:15:49.050
Then, we need to
parse the channel

00:15:49.050 --> 00:15:51.630
ID, which identifies
our channel to which

00:15:51.630 --> 00:15:53.910
we post our notification.

00:15:53.910 --> 00:15:56.600
The next parameter is
a string identifier,

00:15:56.600 --> 00:16:00.000
which gives us a localized
name for our channel.

00:16:00.000 --> 00:16:02.700
This is the name which shows
up in the settings dialog

00:16:02.700 --> 00:16:07.080
where our user maybe want to
mute our notification channel.

00:16:07.080 --> 00:16:10.290
And then next parameter
is a notification ID

00:16:10.290 --> 00:16:14.720
to identify our
notification, and finally, we

00:16:14.720 --> 00:16:19.350
need to parse a so-called
Media Description Adapter.

00:16:19.350 --> 00:16:22.440
The Manager will use our
adapter to get information

00:16:22.440 --> 00:16:24.580
about the currently
playing item,

00:16:24.580 --> 00:16:27.090
so each time the
notification is rebuilt,

00:16:27.090 --> 00:16:30.630
the adapter is called
to get this information.

00:16:30.630 --> 00:16:33.720
So we see that for each
of those callbacks,

00:16:33.720 --> 00:16:35.920
the player instance is
parsed to the method,

00:16:35.920 --> 00:16:40.950
so we can use this player to
get the current window index.

00:16:40.950 --> 00:16:43.560
The current window
index give us the index

00:16:43.560 --> 00:16:47.550
to pick our sample out of
our samples area, which

00:16:47.550 --> 00:16:48.810
is kind of the playlists.

00:16:48.810 --> 00:16:51.720
We return the title to
get the content title,

00:16:51.720 --> 00:16:53.830
then we have a pretty
similar method where we just

00:16:53.830 --> 00:16:56.760
return the description,
which is a longer text which

00:16:56.760 --> 00:16:59.670
is displayed in the
context notification.

00:16:59.670 --> 00:17:02.220
And finally, we also
provide a bitmap

00:17:02.220 --> 00:17:05.859
to make our notification
a little bit nicer.

00:17:05.859 --> 00:17:09.150
We just use a convenient
method for our samples

00:17:09.150 --> 00:17:13.020
to get such a bitmap
for each of our samples.

00:17:13.020 --> 00:17:16.060
Finally, we also need to
provide a pending intent.

00:17:16.060 --> 00:17:18.020
This pending intent
is fired when

00:17:18.020 --> 00:17:19.920
the user taps on
the notification,

00:17:19.920 --> 00:17:23.310
and we want to get the user
back to our application

00:17:23.310 --> 00:17:26.859
in our example to
the main activity.

00:17:26.859 --> 00:17:30.330
So we create an intent
pointing to our main activity,

00:17:30.330 --> 00:17:33.540
and then we wrap this
intent into a pending intent

00:17:33.540 --> 00:17:35.645
which we are using
with the static method

00:17:35.645 --> 00:17:38.400
get activities on
the pending intent.

00:17:38.400 --> 00:17:39.960
Here again, a
couple of arguments.

00:17:39.960 --> 00:17:42.050
The context-- that's
the first argument.

00:17:42.050 --> 00:17:44.420
Then a request code,
which is 0 in our case.

00:17:44.420 --> 00:17:46.980
We are not going to
use it in our sample.

00:17:46.980 --> 00:17:50.760
Then the intent pointing to
our main activity, and finally,

00:17:50.760 --> 00:17:54.100
a flag to tell the system
to update any pending

00:17:54.100 --> 00:17:57.390
intent already in the queue.

00:17:57.390 --> 00:18:00.150
So now we have this Player
Notification Manager.

00:18:00.150 --> 00:18:04.080
We now also need to [INAUDIBLE]
a notification listener.

00:18:04.080 --> 00:18:07.320
This listener makes our
service aware of the life

00:18:07.320 --> 00:18:09.870
cycle of our notification.

00:18:09.870 --> 00:18:14.240
It has two methods, so we
register this notification

00:18:14.240 --> 00:18:18.270
[INAUDIBLE] listener,
which is an anonymous class

00:18:18.270 --> 00:18:18.850
in this case.

00:18:18.850 --> 00:18:21.540
The first method or
notification started

00:18:21.540 --> 00:18:25.170
is called when the notification
is initially created.

00:18:25.170 --> 00:18:29.670
Here, we now parse those
two arguments to the start

00:18:29.670 --> 00:18:31.590
foreground service,
and this is now

00:18:31.590 --> 00:18:34.390
the moment where our
service is officially

00:18:34.390 --> 00:18:35.580
at foreground service.

00:18:35.580 --> 00:18:36.630
We are now safe.

00:18:36.630 --> 00:18:41.210
The system is not going to
kill our service anymore.

00:18:41.210 --> 00:18:43.430
The next method
then is called when

00:18:43.430 --> 00:18:44.900
the notification is canceled.

00:18:44.900 --> 00:18:47.330
Here it just stops
self our service

00:18:47.330 --> 00:18:50.750
because we want to
terminate the service.

00:18:50.750 --> 00:18:52.390
Finally, we also
need to [INAUDIBLE]

00:18:52.390 --> 00:18:55.580
that the player resets the
player with the set player

00:18:55.580 --> 00:18:58.130
method on the
Notification Manager,

00:18:58.130 --> 00:19:01.280
so the Notification Manager
can sync the player state

00:19:01.280 --> 00:19:03.260
to the notification.

00:19:03.260 --> 00:19:04.550
So that's about it.

00:19:04.550 --> 00:19:07.230
We also need to clean up
in the onDestroy method.

00:19:07.230 --> 00:19:10.310
Here we just null the
set-- the player instance

00:19:10.310 --> 00:19:13.760
again so we don't leak
a player reference when

00:19:13.760 --> 00:19:16.350
the service is being destroyed.

00:19:16.350 --> 00:19:19.170
So now please change
back to the phone,

00:19:19.170 --> 00:19:21.530
and if we've done
everything right,

00:19:21.530 --> 00:19:25.670
we should now be able to
hear the playlist playing

00:19:25.670 --> 00:19:26.405
in our service.

00:19:29.239 --> 00:19:30.280
The application comes up.

00:19:30.280 --> 00:19:32.690
We see the notification
in the drawer with the--

00:19:32.690 --> 00:19:33.790
[MUSIC PLAYING]

00:19:34.672 --> 00:19:35.420
It's playing.

00:19:35.420 --> 00:19:38.060
Then let's have a look at the
notification in the drawer.

00:19:38.060 --> 00:19:42.180
We see here the information
which comes from our adapter.

00:19:42.180 --> 00:19:45.850
We can use the playback
controls to control playback.

00:19:45.850 --> 00:19:48.230
We can pause or start again.

00:19:48.230 --> 00:19:51.440
We can skip to the
next item, and if we

00:19:51.440 --> 00:19:57.480
tap on the notification, it
gets us back to the application.

00:19:57.480 --> 00:19:58.790
So fine.

00:19:58.790 --> 00:20:01.160
So as the next step,
when we have seen now

00:20:01.160 --> 00:20:04.040
that this notification
contains information

00:20:04.040 --> 00:20:06.950
about the current item
and about the state,

00:20:06.950 --> 00:20:10.640
and it lets the user
control the media playback.

00:20:10.640 --> 00:20:13.640
What if we want to
expose this functionality

00:20:13.640 --> 00:20:17.610
to external application?

00:20:17.610 --> 00:20:20.580
Let's go to the [INAUDIBLE]
Can we go back to the slides,

00:20:20.580 --> 00:20:23.010
please?

00:20:23.010 --> 00:20:23.770
Thank you.

00:20:26.820 --> 00:20:29.910
Google Assistant, for
example, may want to--

00:20:29.910 --> 00:20:30.660
yeah, here we are.

00:20:30.660 --> 00:20:31.770
Here we go.

00:20:31.770 --> 00:20:33.660
Google Assistant,
for example, wants

00:20:33.660 --> 00:20:37.690
to allow the user to use voice
commands to control media

00:20:37.690 --> 00:20:38.580
playback.

00:20:38.580 --> 00:20:44.080
Android Auto or Wear OS
lets the user remote control

00:20:44.080 --> 00:20:46.740
a media application
and browse in a media

00:20:46.740 --> 00:20:49.590
catalog of our application.

00:20:49.590 --> 00:20:51.900
The Android framework
has a solution for this,

00:20:51.900 --> 00:20:54.930
because we essentially need
to provide three things

00:20:54.930 --> 00:20:58.800
to let external application
participate in media playback.

00:20:58.800 --> 00:21:02.110
First, we need to expose
the playback state.

00:21:02.110 --> 00:21:03.840
This is the things
like the player state

00:21:03.840 --> 00:21:07.530
itself, the current media item,
or the playlist with which

00:21:07.530 --> 00:21:09.420
we prepared our player.

00:21:09.420 --> 00:21:12.900
Second, we need to be able
to retrieve playback commands

00:21:12.900 --> 00:21:17.490
from external application so
we can execute those commands

00:21:17.490 --> 00:21:19.350
on our player instance.

00:21:19.350 --> 00:21:21.570
And third, we need
to provide ways

00:21:21.570 --> 00:21:24.300
to browse in our media catalog.

00:21:24.300 --> 00:21:26.910
The Android framework
provides a solution for this.

00:21:26.910 --> 00:21:30.690
It provides the MediaSession
and the MediaBrowserService.

00:21:30.690 --> 00:21:33.420
We are not going into the detail
of the MediaBrowserService,

00:21:33.420 --> 00:21:35.280
because we don't
have time for this,

00:21:35.280 --> 00:21:38.040
but we look at the
MediaSession, which

00:21:38.040 --> 00:21:40.470
allows us to expose
the playback state

00:21:40.470 --> 00:21:44.400
and retrieve playback commands.

00:21:44.400 --> 00:21:46.560
In our code sample,
we are going to use

00:21:46.560 --> 00:21:48.600
the MediaSessionConnector,
which is

00:21:48.600 --> 00:21:51.570
part of the MediaSession
extension of the ExoPlayer

00:21:51.570 --> 00:21:52.770
library.

00:21:52.770 --> 00:21:56.370
This MediaSessionConnector
synchronizes the player state

00:21:56.370 --> 00:21:57.960
with the state of
the MediaSession

00:21:57.960 --> 00:22:01.590
and retrieves commands
from the MediaSession.

00:22:01.590 --> 00:22:04.320
So let's change again
back to the laptop,

00:22:04.320 --> 00:22:09.270
please, so we can see how
we can do this in code.

00:22:09.270 --> 00:22:14.220
We are again the onCreate method
of our AudioPlayerService,

00:22:14.220 --> 00:22:18.130
and we are now going to create
an instance of a MediaSession

00:22:18.130 --> 00:22:19.470
compart.

00:22:19.470 --> 00:22:23.610
We assign it to a field, we
just call MediaSession Compart

00:22:23.610 --> 00:22:27.150
Constructor with a
context and an identifier

00:22:27.150 --> 00:22:29.610
which is just the string.

00:22:29.610 --> 00:22:33.380
Then we immediately set
our MediaSession to active

00:22:33.380 --> 00:22:37.770
by parsing through to
the SetActiveMethod.

00:22:37.770 --> 00:22:40.800
Now as a first step, we want
to make the Player Notification

00:22:40.800 --> 00:22:44.070
Manager aware of our session,
and we parse the token

00:22:44.070 --> 00:22:45.810
to the Player
Notification Manager

00:22:45.810 --> 00:22:48.900
so we can enhance the
media style notification

00:22:48.900 --> 00:22:54.400
and provide an artwork for
our lock screen of our device.

00:22:54.400 --> 00:22:58.690
But now we are going to create
such a MediaSessionConnector.

00:22:58.690 --> 00:23:02.790
We call the Constructor and
we just parse the MediaSession

00:23:02.790 --> 00:23:07.080
to the Connector so it
has access to the session.

00:23:07.080 --> 00:23:10.660
We said we want to
synchronize our playlist

00:23:10.660 --> 00:23:12.650
with the queue of
the MediaSession

00:23:12.650 --> 00:23:15.590
so external application
know what items

00:23:15.590 --> 00:23:17.450
we are having in our playlists.

00:23:17.450 --> 00:23:21.830
For this, we are going to
use a TimelineQueueNavigator.

00:23:21.830 --> 00:23:25.190
The Timeline is the internal
representation of the playlist

00:23:25.190 --> 00:23:27.470
after the player
has been prepared,

00:23:27.470 --> 00:23:30.710
so there are as many
windows in our Timeline

00:23:30.710 --> 00:23:34.100
as we have items
in our playlists.

00:23:34.100 --> 00:23:36.950
So with this, we can use
the window index, which

00:23:36.950 --> 00:23:40.760
is the parameter which is parsed
to our method we are going

00:23:40.760 --> 00:23:44.450
to override to create to
get the samples again out

00:23:44.450 --> 00:23:46.910
of our samples area,
and we then are

00:23:46.910 --> 00:23:50.120
going to create a
MediaDescription for such

00:23:50.120 --> 00:23:51.180
a sample.

00:23:51.180 --> 00:23:54.530
Let's have a look in this
getMediaDescription method

00:23:54.530 --> 00:23:57.020
to see that there is not
much magic behind it.

00:23:57.020 --> 00:24:00.980
We see we are just using
a MediaDescription compart

00:24:00.980 --> 00:24:03.890
builder, and then we
populate this data

00:24:03.890 --> 00:24:06.830
with the data from our
samples, and then we

00:24:06.830 --> 00:24:09.770
build such a MediaDescription
compart, which

00:24:09.770 --> 00:24:12.920
we return to our connector.

00:24:12.920 --> 00:24:16.925
So now we have already
this MediaSessionConnector.

00:24:16.925 --> 00:24:19.790
As a next step, again, we
need to parse the player

00:24:19.790 --> 00:24:22.220
to the connector so
we can sync the player

00:24:22.220 --> 00:24:23.390
with the MediaSession.

00:24:23.390 --> 00:24:26.060
Here we again use
the SetPlayerMethod.

00:24:26.060 --> 00:24:28.980
The first parameter
is the player itself.

00:24:28.980 --> 00:24:31.460
The second parameter
is a playback prepare.

00:24:31.460 --> 00:24:33.080
We are not going to
use it because we

00:24:33.080 --> 00:24:36.590
don't want to allow external
application to initiate

00:24:36.590 --> 00:24:39.600
playback in our sample.

00:24:39.600 --> 00:24:40.550
So that's kind of it.

00:24:40.550 --> 00:24:43.410
Again, in onDestroy,
we need to clean up.

00:24:43.410 --> 00:24:46.760
First we just release
the MediaSession,

00:24:46.760 --> 00:24:49.960
and the second step, we
again set the player instance

00:24:49.960 --> 00:24:51.710
to null, this time
in the connector

00:24:51.710 --> 00:24:56.670
to avoid leaking an
instance of the player.

00:24:56.670 --> 00:24:58.170
So now that's kind of it.

00:24:58.170 --> 00:25:00.540
If everything is
correct, we should

00:25:00.540 --> 00:25:02.490
be able to deploy the
application again.

00:25:02.490 --> 00:25:04.800
Please switch to
the phone again,

00:25:04.800 --> 00:25:09.570
and Andrew should now be able
to use Google Assistant to skip

00:25:09.570 --> 00:25:10.590
to the next item.

00:25:10.590 --> 00:25:11.640
Let's see if this works.

00:25:11.640 --> 00:25:12.975
[MUSIC PLAYING]

00:25:15.331 --> 00:25:16.580
ANDREW LEWIS: Play next track.

00:25:19.250 --> 00:25:20.350
[NEW SONG PLAYING]

00:25:20.350 --> 00:25:21.840
MARC BACHINGER: Oi, fine.

00:25:21.840 --> 00:25:22.880
Well done.

00:25:22.880 --> 00:25:23.380
[APPLAUSE]

00:25:23.380 --> 00:25:24.980
Thank you.

00:25:24.980 --> 00:25:30.937
And now over to Andrew again
for downloading and offline

00:25:30.937 --> 00:25:31.520
functionality.

00:25:31.520 --> 00:25:33.190
ANDREW LEWIS: Thank you, Marc.

00:25:33.190 --> 00:25:35.570
And if we could switch
back to the slides, please?

00:25:38.140 --> 00:25:39.980
OK.

00:25:39.980 --> 00:25:42.020
So another feature of
media apps that I'm

00:25:42.020 --> 00:25:44.810
sure you're all familiar with
is support for downloading

00:25:44.810 --> 00:25:46.460
media for offline playback.

00:25:46.460 --> 00:25:48.230
This is really
important if your users

00:25:48.230 --> 00:25:50.030
are going to be in
a situation where

00:25:50.030 --> 00:25:54.380
they have no connectivity or
intermittent connectivity.

00:25:54.380 --> 00:25:56.732
This has been a much-requested
feature for a while now,

00:25:56.732 --> 00:25:58.190
and we're really
pleased that we've

00:25:58.190 --> 00:26:02.760
been able to launch this in
our 2.8.0 release this week.

00:26:02.760 --> 00:26:05.540
In ExoPlayer, our
support for downloading

00:26:05.540 --> 00:26:08.030
is built on top of our
support for caching,

00:26:08.030 --> 00:26:10.220
so I'm going to say a
little bit about how

00:26:10.220 --> 00:26:12.837
caching fits into the
picture of the player set up,

00:26:12.837 --> 00:26:14.420
and then we'll look
at how downloading

00:26:14.420 --> 00:26:17.630
builds on top of that.

00:26:17.630 --> 00:26:19.940
So this diagram is intended
to show you that data

00:26:19.940 --> 00:26:23.180
flow when playing one MP3 file.

00:26:23.180 --> 00:26:25.520
We have a song which is
in the cloud somewhere,

00:26:25.520 --> 00:26:28.350
we have a data source which
is requesting that over HTTP--

00:26:28.350 --> 00:26:29.774
that's loading the data--

00:26:29.774 --> 00:26:31.190
and then we had a
MediaSource that

00:26:31.190 --> 00:26:32.900
was getting the
information from there

00:26:32.900 --> 00:26:35.780
and providing it to the player.

00:26:35.780 --> 00:26:37.330
Let's see how caching
fits into this.

00:26:37.330 --> 00:26:38.330
Well, it's quite simple.

00:26:38.330 --> 00:26:40.540
We just add a CacheDataSource.

00:26:40.540 --> 00:26:42.640
That sits in between
the DataSource

00:26:42.640 --> 00:26:45.220
we're using for loading from
the network and the MediaSource

00:26:45.220 --> 00:26:47.480
that's providing
data to the player.

00:26:47.480 --> 00:26:50.440
And it's going to be responsible
for dealing with a cache

00:26:50.440 --> 00:26:50.994
instance.

00:26:50.994 --> 00:26:52.660
In this case, we're
using a simple cache

00:26:52.660 --> 00:26:56.020
which is provided by
ExoPlayer's core library.

00:26:56.020 --> 00:26:57.920
The way this works
is as follows.

00:26:57.920 --> 00:26:59.890
When the MediaSource
requests some data,

00:26:59.890 --> 00:27:02.220
it's going to ask the
CacheDataSource to provide

00:27:02.220 --> 00:27:03.160
that information.

00:27:03.160 --> 00:27:05.630
The CacheDataSource is
going to look in the cache.

00:27:05.630 --> 00:27:07.450
If it is present there,
then that's great.

00:27:07.450 --> 00:27:09.150
We can get the data
from local storage.

00:27:09.150 --> 00:27:10.900
That goes to the
MediaSource, and we never

00:27:10.900 --> 00:27:12.920
had to go to the network.

00:27:12.920 --> 00:27:15.840
On the other hand, if the data
is not present in the cache,

00:27:15.840 --> 00:27:18.620
so we've got a cache miss,
than the CacheDataSource needs

00:27:18.620 --> 00:27:20.720
to go to the DataSource
that's being used

00:27:20.720 --> 00:27:22.280
to load from the
network, and it's

00:27:22.280 --> 00:27:23.999
going to request
the data from there,

00:27:23.999 --> 00:27:26.540
and then it's going to store it
in the cache when it arrives.

00:27:26.540 --> 00:27:28.039
And in this way,
the cache gradually

00:27:28.039 --> 00:27:32.946
gets populated with the data
that's loaded during playback.

00:27:32.946 --> 00:27:34.320
You can see also
on this diagram,

00:27:34.320 --> 00:27:35.946
we've got a CacheEvictor.

00:27:35.946 --> 00:27:38.210
This component is
responsible for making sure

00:27:38.210 --> 00:27:40.250
that our cache doesn't
grow indefinitely

00:27:40.250 --> 00:27:44.560
as we play more and more
different media items.

00:27:44.560 --> 00:27:47.460
OK, now let's move on to
think about downloading.

00:27:47.460 --> 00:27:49.330
So downloading is a
separate operation

00:27:49.330 --> 00:27:51.413
which you might want to
perform in the background,

00:27:51.413 --> 00:27:53.180
so it might need a service.

00:27:53.180 --> 00:27:56.490
And this downloading operation--
what's going on internally

00:27:56.490 --> 00:27:58.980
is it's going to read
through the entire stream,

00:27:58.980 --> 00:28:01.810
and as it does that, it'll
be populating the same cache

00:28:01.810 --> 00:28:04.600
instance that you're
using for playback.

00:28:04.600 --> 00:28:07.180
And as you can probably guess,
when you do this operation,

00:28:07.180 --> 00:28:09.940
if you've populated the
cache with all of the data,

00:28:09.940 --> 00:28:11.909
then when it comes to
playback, your player

00:28:11.909 --> 00:28:13.450
is going to be able
to get everything

00:28:13.450 --> 00:28:15.640
from the cache from
the CacheDataSource.

00:28:15.640 --> 00:28:19.120
There's never a need to go
to the network in this case.

00:28:19.120 --> 00:28:20.980
One very important
thing to note is

00:28:20.980 --> 00:28:22.987
that we've got a
[INAUDIBLE] CacheEvictor,

00:28:22.987 --> 00:28:24.820
so this is an implementation
of CacheEvictor

00:28:24.820 --> 00:28:26.350
which does nothing.

00:28:26.350 --> 00:28:28.834
It's never going to evict
data from the cache.

00:28:28.834 --> 00:28:30.250
The reason we have
that is that we

00:28:30.250 --> 00:28:32.770
don't want to have a situation
whereby we're downloading

00:28:32.770 --> 00:28:34.720
the stream, and then
when we've downloaded up

00:28:34.720 --> 00:28:37.570
to a certain amount of data,
we start getting rid of data

00:28:37.570 --> 00:28:38.860
at the beginning of the
stream, because that would

00:28:38.860 --> 00:28:40.010
be very annoying for users.

00:28:42.850 --> 00:28:43.810
So that's the theory.

00:28:43.810 --> 00:28:45.970
Let's see how this
works in practice.

00:28:45.970 --> 00:28:49.360
If we could switch back
to the laptop, please.

00:28:49.360 --> 00:28:51.317
So we're going to do
this in three steps.

00:28:51.317 --> 00:28:53.150
The first step is we're
going to add support

00:28:53.150 --> 00:28:56.300
for caching to our player.

00:28:56.300 --> 00:28:58.929
Then we're going to implement
an audio download service which

00:28:58.929 --> 00:29:00.470
is going to actually
run the download

00:29:00.470 --> 00:29:03.240
operation in the background.

00:29:03.240 --> 00:29:05.900
Then finally, we're going to
add a very minimal piece of UI

00:29:05.900 --> 00:29:08.090
to our activity in
order to let us trigger

00:29:08.090 --> 00:29:11.860
the downloads to take place.

00:29:11.860 --> 00:29:15.292
So we'll go ahead and create
a CacheDataSourceFactory,

00:29:15.292 --> 00:29:16.750
and as we saw on
the slide, this is

00:29:16.750 --> 00:29:18.760
going to sit between
our DataSourceFactory

00:29:18.760 --> 00:29:21.220
for loading from the network
and the MediaSource, which

00:29:21.220 --> 00:29:24.730
is actually going to be
extracting the media.

00:29:24.730 --> 00:29:26.740
So you can see we're
using a utility

00:29:26.740 --> 00:29:28.540
method to get our cache.

00:29:28.540 --> 00:29:31.500
Let's jump into that and
see what's going on there.

00:29:31.500 --> 00:29:34.490
So as I mentioned, we're sharing
the same cache for playback

00:29:34.490 --> 00:29:36.800
and downloading, and
that means it's important

00:29:36.800 --> 00:29:40.130
that we just have a singleton
for our whole process.

00:29:40.130 --> 00:29:41.780
Inside getCache,
what we're doing is

00:29:41.780 --> 00:29:43.370
we check if we've
got one already.

00:29:43.370 --> 00:29:44.810
If we don't have
one, we're going

00:29:44.810 --> 00:29:47.930
to create a file which is
pointing to a directory

00:29:47.930 --> 00:29:50.390
where we're going to
store the downloads.

00:29:50.390 --> 00:29:52.910
Then we're going to instantiate
a simple cache, parsing

00:29:52.910 --> 00:29:55.930
in that directory, and also a
[INAUDIBLE] CacheEvictor, which

00:29:55.930 --> 00:29:58.430
is very important, because we
don't want to be removing data

00:29:58.430 --> 00:30:01.300
from the cache.

00:30:01.300 --> 00:30:04.150
So that's how we
make a simple cache.

00:30:04.150 --> 00:30:06.700
We also need to provide
the CacheDataSourceFactory

00:30:06.700 --> 00:30:08.680
with the upstream
DataSourceFactory

00:30:08.680 --> 00:30:11.450
for loading data
from the network.

00:30:11.450 --> 00:30:13.210
OK, and that's what
we need to instantiate

00:30:13.210 --> 00:30:15.100
a CacheDataSourceFactory.

00:30:15.100 --> 00:30:17.700
Let's introduce a local
variable for that,

00:30:17.700 --> 00:30:20.500
and then we're going to use that
CacheDataSourceFactory in place

00:30:20.500 --> 00:30:22.592
of the DataSourceFactory
we were using before

00:30:22.592 --> 00:30:23.800
for loading from the network.

00:30:26.580 --> 00:30:28.580
So hopefully that makes
sense for adding support

00:30:28.580 --> 00:30:30.350
for caching to our player.

00:30:30.350 --> 00:30:31.850
Now we're going to
move on and we're

00:30:31.850 --> 00:30:34.130
going to add an audio
DownloadService, which

00:30:34.130 --> 00:30:38.250
is actually going to run
the downloading operation.

00:30:38.250 --> 00:30:43.217
So we provide a super plus
called DownloadService

00:30:43.217 --> 00:30:44.800
for your download
services that you'll

00:30:44.800 --> 00:30:46.260
be putting in your
application, so we'll

00:30:46.260 --> 00:30:47.468
be inheriting from that here.

00:30:51.850 --> 00:30:54.110
So there's a few steps
we need to do now.

00:30:54.110 --> 00:30:55.340
The most important one--

00:30:55.340 --> 00:30:56.990
important not to
forget is to add

00:30:56.990 --> 00:31:00.030
a declaration for the
service to your manifest.

00:31:00.030 --> 00:31:03.152
So we're going to add our
audio DownloadService here.

00:31:03.152 --> 00:31:04.610
Now we can switch
back, and we have

00:31:04.610 --> 00:31:07.880
to implement a constructor
and three methods.

00:31:07.880 --> 00:31:09.710
So let's start doing that.

00:31:09.710 --> 00:31:12.167
We'll create a constructor
with no arguments,

00:31:12.167 --> 00:31:14.250
but then we're going to
call the super constructor

00:31:14.250 --> 00:31:16.310
and parse in some information
about the download

00:31:16.310 --> 00:31:17.780
notifications.

00:31:17.780 --> 00:31:19.700
So we'll need a
notification ID which

00:31:19.700 --> 00:31:21.380
must be different
from the notification

00:31:21.380 --> 00:31:23.870
ID we used for audio playback.

00:31:23.870 --> 00:31:26.340
We'll also parse in
an interval at which

00:31:26.340 --> 00:31:28.550
to update with the
notification, and we'll just

00:31:28.550 --> 00:31:29.550
use the default here.

00:31:29.550 --> 00:31:34.190
We'll parse in a channel ID
for our download notification

00:31:34.190 --> 00:31:37.364
channel, and
finally, we also need

00:31:37.364 --> 00:31:38.780
to provide a string
resource which

00:31:38.780 --> 00:31:40.810
describes the
notification channel,

00:31:40.810 --> 00:31:42.530
and that works just
the same as the one

00:31:42.530 --> 00:31:46.010
we did for audio playback that
had the notification channel as

00:31:46.010 --> 00:31:48.120
well.

00:31:48.120 --> 00:31:52.110
Now we need to
override some methods,

00:31:52.110 --> 00:31:54.060
so let's have a look at those.

00:31:54.060 --> 00:31:56.420
The first one is we need to
provide a Download Manager,

00:31:56.420 --> 00:31:58.461
and we have a utility
method for this which we'll

00:31:58.461 --> 00:32:00.320
have a look at in a second.

00:32:00.320 --> 00:32:02.000
That's just taking a context.

00:32:02.000 --> 00:32:03.620
Let's jump in there.

00:32:03.620 --> 00:32:05.960
So again, we're using
a singleton instance

00:32:05.960 --> 00:32:08.660
of a Download Manager
for our whole process.

00:32:08.660 --> 00:32:10.370
This is also creating
a file, because it

00:32:10.370 --> 00:32:12.500
needs to persist some
information about downloads

00:32:12.500 --> 00:32:13.921
that are in progress.

00:32:13.921 --> 00:32:15.920
And then we're instantiating
a Download Manager,

00:32:15.920 --> 00:32:18.500
parsing in the same
cache instance as the one

00:32:18.500 --> 00:32:22.246
that we're using for the
cache during playback.

00:32:22.246 --> 00:32:24.620
You can see also there is a
DataSourceFactory for loading

00:32:24.620 --> 00:32:26.840
data to populate
the cache, and we've

00:32:26.840 --> 00:32:29.957
also got a de-serializer for
progressive download actions,

00:32:29.957 --> 00:32:31.790
because we're downloading
progressive media.

00:32:34.790 --> 00:32:37.570
For getScheduler, for the
purposes of our simple demo

00:32:37.570 --> 00:32:39.710
app, we're just going to
leave this returning null,

00:32:39.710 --> 00:32:41.240
but in a real
application, you would

00:32:41.240 --> 00:32:43.550
want to provide some
kind of JobScheduler

00:32:43.550 --> 00:32:45.980
so that the system can start
your download service when

00:32:45.980 --> 00:32:49.187
your process isn't running,
in order to resume downloads.

00:32:49.187 --> 00:32:51.770
You can have a look at our full
demo app for an example of how

00:32:51.770 --> 00:32:53.280
to do that.

00:32:53.280 --> 00:32:56.630
Finally, we're going to provide
a progress notification,

00:32:56.630 --> 00:32:59.930
and we've got our handy utility
method to build one here.

00:32:59.930 --> 00:33:01.820
This is going to
take a context--

00:33:01.820 --> 00:33:03.350
an icon which is
going to be shown

00:33:03.350 --> 00:33:05.690
in the notification associated
with the download that's

00:33:05.690 --> 00:33:07.700
in progress--

00:33:07.700 --> 00:33:10.827
and we'll just use our
playback icon for that.

00:33:10.827 --> 00:33:12.410
Then we'd provide
the download channel

00:33:12.410 --> 00:33:15.100
ID, which is the same
one that we used earlier.

00:33:17.349 --> 00:33:19.265
This one is actually a
string, not a resource.

00:33:21.810 --> 00:33:24.080
One parameter [INAUDIBLE].

00:33:24.080 --> 00:33:28.340
OK, so we get our
download channel ID.

00:33:28.340 --> 00:33:30.840
We actually need an intent next,
which we'll just parse null

00:33:30.840 --> 00:33:35.500
for, then we've got a bit mixed
up with the parameters here.

00:33:35.500 --> 00:33:38.600
So if you remove
download channel name--

00:33:38.600 --> 00:33:39.747
MARC BACHINGER: Oh.

00:33:39.747 --> 00:33:40.830
ANDREW LEWIS: Easily done.

00:33:40.830 --> 00:33:44.490
There's lots of parameters.

00:33:44.490 --> 00:33:47.760
Then the message is null,
content intent is null,

00:33:47.760 --> 00:33:49.290
the message is
null, and we'll just

00:33:49.290 --> 00:33:52.071
parse our task states,
which has information

00:33:52.071 --> 00:33:53.820
about the downloads
that are in progress--

00:33:53.820 --> 00:33:57.110
what their status is.

00:33:57.110 --> 00:33:57.610
Whew.

00:33:57.610 --> 00:33:58.734
That's a lot of parameters.

00:33:58.734 --> 00:34:01.920
OK, so that looks pretty good.

00:34:01.920 --> 00:34:04.030
That's implementing
our download service.

00:34:04.030 --> 00:34:05.740
The final step, I
promise, is just

00:34:05.740 --> 00:34:09.139
providing a way to trigger these
downloads from our activity.

00:34:09.139 --> 00:34:11.790
So as you can see, we've
got an empty list view here.

00:34:11.790 --> 00:34:14.020
We're going to replace that
with a list of samples,

00:34:14.020 --> 00:34:17.360
so we've just got three
items and a playlist.

00:34:17.360 --> 00:34:19.130
When the user taps
one of those, we're

00:34:19.130 --> 00:34:22.130
going to trigger the
download to start, and to do

00:34:22.130 --> 00:34:26.107
that, we'll be creating a
progressive download action.

00:34:26.107 --> 00:34:28.190
If you are downloading a
different type of content

00:34:28.190 --> 00:34:29.780
like a Dash stream,
than you would not

00:34:29.780 --> 00:34:30.920
use progressive download action.

00:34:30.920 --> 00:34:32.711
You'd use the corresponding
download action

00:34:32.711 --> 00:34:35.520
for the type of stream
you're downloading.

00:34:35.520 --> 00:34:36.924
That's going to take a URI.

00:34:36.924 --> 00:34:39.340
It's going to take a flag to
say whether we're [INAUDIBLE]

00:34:39.340 --> 00:34:39.839
or not.

00:34:39.839 --> 00:34:43.210
We want to add it to the
cache, so we'll parse in false.

00:34:43.210 --> 00:34:45.030
We don't want to
associate any custom data,

00:34:45.030 --> 00:34:47.500
so we'll parse null for the
data and the custom cache key.

00:34:50.060 --> 00:34:52.190
Once we've created our
progressive download action,

00:34:52.190 --> 00:34:56.250
all that remains is to call a
method on the download service.

00:34:56.250 --> 00:34:59.900
There's a static method to start
the service with that action,

00:34:59.900 --> 00:35:02.540
and that takes a context,
which is main activity

00:35:02.540 --> 00:35:05.900
dot this, not the item
click-- listener this.

00:35:09.474 --> 00:35:10.890
It takes the class
of the download

00:35:10.890 --> 00:35:13.909
service, which is audio
download service dot class.

00:35:13.909 --> 00:35:16.200
It takes the download action
which we've just created--

00:35:16.200 --> 00:35:18.777
progressive download
action-- and finally, we

00:35:18.777 --> 00:35:21.360
can parse false for foreground
because our activity is already

00:35:21.360 --> 00:35:23.980
in the foreground.

00:35:23.980 --> 00:35:25.730
That's quite a few
bits to remember there,

00:35:25.730 --> 00:35:27.350
but hopefully we've
got everything.

00:35:27.350 --> 00:35:30.290
Let's give that a try
and see if it works.

00:35:30.290 --> 00:35:33.155
Now, we had plans to show you
putting the device into flight

00:35:33.155 --> 00:35:35.030
mode and playing back
the downloaded content,

00:35:35.030 --> 00:35:37.900
but unfortunately we're having
to use Cast to play the stream,

00:35:37.900 --> 00:35:40.667
so we won't actually be
able to show you the putting

00:35:40.667 --> 00:35:41.750
the device in flight mode.

00:35:41.750 --> 00:35:43.010
You'll need to use
your imagination.

00:35:43.010 --> 00:35:43.840
[MUSIC PLAYING]

00:35:43.840 --> 00:35:45.560
As you can see when
we type the items,

00:35:45.560 --> 00:35:48.620
you get a little play icon which
is our download notification,

00:35:48.620 --> 00:35:52.910
and that's going to progress
as the download progresses,

00:35:52.910 --> 00:35:56.780
and that's populating the
cache in the background.

00:35:56.780 --> 00:36:00.535
OK, so that's pretty
much it for downloading.

00:36:00.535 --> 00:36:02.160
I'm now going to hand
back over to Marc

00:36:02.160 --> 00:36:03.645
to say a few words about Cast.

00:36:03.645 --> 00:36:04.520
MARC BACHINGER: Yeah.

00:36:04.520 --> 00:36:05.820
Thank you, Andrew.

00:36:05.820 --> 00:36:08.550
So there is a last
important integration

00:36:08.550 --> 00:36:11.780
we did not cover in code, and
we will not cover in code.

00:36:11.780 --> 00:36:14.130
It's the integration
with Google Cast.

00:36:14.130 --> 00:36:18.090
Google Cast is almost
expected by our users

00:36:18.090 --> 00:36:21.540
to be supported by media apps.

00:36:21.540 --> 00:36:24.250
We've recently added
a Cast extension,

00:36:24.250 --> 00:36:26.610
which makes integration
with Cast for ExoPlayer

00:36:26.610 --> 00:36:29.070
application pretty easier.

00:36:29.070 --> 00:36:33.405
Let's switch to the
slides again, please.

00:36:33.405 --> 00:36:35.440
Thank you.

00:36:35.440 --> 00:36:37.140
The Cast extension
takes advantage

00:36:37.140 --> 00:36:40.560
of the player interface
of the ExoPlayer library.

00:36:40.560 --> 00:36:43.380
All the UI components
and other components

00:36:43.380 --> 00:36:45.390
like the
PlayerNotification manager,

00:36:45.390 --> 00:36:48.030
the MediaSession Connector
which we've seen in action,

00:36:48.030 --> 00:36:49.890
take advantage of
this player interface,

00:36:49.890 --> 00:36:53.490
and only rely on this
player interface.

00:36:53.490 --> 00:36:55.410
The most prominent
implementation

00:36:55.410 --> 00:36:58.110
of this player interface
is the SimpleExoPlayer.

00:36:58.110 --> 00:37:00.520
Almost all ExoPlayer
applications

00:37:00.520 --> 00:37:04.020
use the SimpleExoPlayer a
player for local playback.

00:37:04.020 --> 00:37:06.840
The Cast extension now
adds another implementation

00:37:06.840 --> 00:37:09.900
of this player interface
which is the CastPlayer.

00:37:09.900 --> 00:37:14.700
The CastPlayer wraps the remote
media client of the Cast SDK

00:37:14.700 --> 00:37:18.660
so it gets pretty easy to
swap local playback down

00:37:18.660 --> 00:37:21.440
with the SimpleExoPlayer
with remote playback

00:37:21.440 --> 00:37:22.960
of the CastPlayer.

00:37:22.960 --> 00:37:26.580
So because all those components
of the ExoPlayer library

00:37:26.580 --> 00:37:29.250
and hopefully also
your application only

00:37:29.250 --> 00:37:31.380
rely on the player
interface, you

00:37:31.380 --> 00:37:35.460
can exchange this local
playback with remote playback

00:37:35.460 --> 00:37:37.270
quite easily.

00:37:37.270 --> 00:37:40.380
You can also have a look at
the Cast demo application which

00:37:40.380 --> 00:37:43.950
we add to our GitHub
repository, and we have also

00:37:43.950 --> 00:37:47.880
a blog post on Medium
which shows you

00:37:47.880 --> 00:37:53.060
how to set up the Cast
parts for your application.

00:37:53.060 --> 00:37:54.060
ANDREW LEWIS: OK, great.

00:37:54.060 --> 00:37:55.680
Thank you, Marc.

00:37:55.680 --> 00:37:59.700
So all that remains really
is to provide you with a link

00:37:59.700 --> 00:38:03.360
to the branch which has the
code that we've written today,

00:38:03.360 --> 00:38:05.510
or at least it will be
very similar to the code we

00:38:05.510 --> 00:38:07.110
have written today.

00:38:07.110 --> 00:38:09.510
Please go and check
that out and try it out.

00:38:09.510 --> 00:38:12.019
You will actually be able to
try the download functionality

00:38:12.019 --> 00:38:14.310
by putting your device into
flight mode and making sure

00:38:14.310 --> 00:38:17.366
that it plays it back,
which we can't do now.

00:38:17.366 --> 00:38:19.440
So please check that out.

00:38:19.440 --> 00:38:22.470
We have an office hours
session today at 3:30.

00:38:22.470 --> 00:38:24.390
Please come along if
you've got questions.

00:38:24.390 --> 00:38:26.140
Lots of members of the
team will be there,

00:38:26.140 --> 00:38:28.117
and we'd be delighted
to meet you and find out

00:38:28.117 --> 00:38:29.700
about what you're
doing with ExoPlayer

00:38:29.700 --> 00:38:31.770
and how we can
help you with that.

00:38:31.770 --> 00:38:34.410
This is a link to
our GitHub project.

00:38:34.410 --> 00:38:37.994
If you haven't seen that before,
we have a developer guide which

00:38:37.994 --> 00:38:39.660
takes you through the
process of getting

00:38:39.660 --> 00:38:42.120
started with ExoPlayer at
a slightly slower pace,

00:38:42.120 --> 00:38:45.550
and it helps to explain
some of the background.

00:38:45.550 --> 00:38:48.150
And finally, as Marc
alluded to, we also

00:38:48.150 --> 00:38:51.450
have a blog on Medium where
members of the ExoPlayer team

00:38:51.450 --> 00:38:53.670
are writing blog posts
about new functionality

00:38:53.670 --> 00:38:54.730
that we're working on.

00:38:54.730 --> 00:38:58.080
So please do check
that out and subscribe.

00:38:58.080 --> 00:39:00.062
And with that,
thank you very much.

00:39:00.062 --> 00:39:03.240
[MUSIC PLAYING]

