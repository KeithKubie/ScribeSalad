WEBVTT
Kind: captions
Language: en

00:00:08.177 --> 00:00:09.150
PETE FRISELLA: Hi, everybody.

00:00:09.150 --> 00:00:10.280
My name's Pete Frisella.

00:00:10.280 --> 00:00:12.490
I'm a developer advocate on
the Google Analytics team.

00:00:12.490 --> 00:00:14.640
Today I'm going to talk to you
a little bit about Content

00:00:14.640 --> 00:00:17.590
Experiments and more so advanced
implementations and

00:00:17.590 --> 00:00:20.430
some high level information
for you so that you can

00:00:20.430 --> 00:00:23.250
implement Content Experiments
and really take advantage of

00:00:23.250 --> 00:00:26.520
the platform and the flexibility
it offers.

00:00:26.520 --> 00:00:28.640
So to get started, I'm just
going to go just quickly

00:00:28.640 --> 00:00:31.500
around what are experiments,
why are they important.

00:00:31.500 --> 00:00:34.000
We'll look at some basics of
implementations, and then

00:00:34.000 --> 00:00:36.720
we'll go into some details of
examples and apprise you a

00:00:36.720 --> 00:00:40.050
little bit of tips at the end.

00:00:40.050 --> 00:00:41.580
So let's start with
experiments.

00:00:41.580 --> 00:00:42.790
What is an experiment?

00:00:42.790 --> 00:00:45.490
So when you think about Google
Analytics and the kind of user

00:00:45.490 --> 00:00:48.620
action model, typically you have
users that are arriving

00:00:48.620 --> 00:00:50.830
on a property or a site.

00:00:50.830 --> 00:00:52.920
You want them to do something,
and then ultimately, you want

00:00:52.920 --> 00:00:54.380
them to reach some
kind of goal.

00:00:54.380 --> 00:00:56.950
So if that's the objective,
experiments are a really great

00:00:56.950 --> 00:01:00.030
way to test changes to make sure
that those changes are

00:01:00.030 --> 00:01:02.860
actually providing better
performance for your site.

00:01:02.860 --> 00:01:06.220
So for example, increasing
revenue or maybe time on site,

00:01:06.220 --> 00:01:07.610
these might be some objectives
you have for

00:01:07.610 --> 00:01:10.160
your website or property.

00:01:10.160 --> 00:01:12.580
And Content Experiments allows
you to test any changes you're

00:01:12.580 --> 00:01:15.180
making to make sure you're
really making the right choice

00:01:15.180 --> 00:01:19.450
and implementing the
right variation.

00:01:19.450 --> 00:01:22.690
So why Google Analytics for
Content Experiments?

00:01:22.690 --> 00:01:23.710
There's a couple reasons why.

00:01:23.710 --> 00:01:27.200
I think the greatest benefit
right off the bat is that you

00:01:27.200 --> 00:01:29.900
have all this user interaction
data already, and you can add

00:01:29.900 --> 00:01:30.540
experiments now.

00:01:30.540 --> 00:01:31.750
So you have it all
in one place.

00:01:31.750 --> 00:01:34.280
You get a great set of reports,
and you can segment

00:01:34.280 --> 00:01:36.680
based on experiment visits
and things like that.

00:01:36.680 --> 00:01:39.740
So it's just really having it
all in one spot and having one

00:01:39.740 --> 00:01:42.560
kind of platform to
do everything.

00:01:42.560 --> 00:01:44.370
The other thing is we've
introduced this multi-armed

00:01:44.370 --> 00:01:45.660
bandit experiments.

00:01:45.660 --> 00:01:47.980
There's a lot of resource
information on exactly what

00:01:47.980 --> 00:01:51.030
this means, but just from a high
level why this might be

00:01:51.030 --> 00:01:54.310
of interest to you, why you'd
want to use this, typically

00:01:54.310 --> 00:01:57.080
it's a little bit more efficient
than A-B testing,

00:01:57.080 --> 00:02:00.180
but at the same time, it's just
as statistically valid.

00:02:00.180 --> 00:02:03.310
And then in many circumstances,
the answer will

00:02:03.310 --> 00:02:05.390
come to you a little
bit quicker.

00:02:05.390 --> 00:02:08.090
So the whole point here is that
you're reducing the time

00:02:08.090 --> 00:02:10.759
for the experiment to run, but
to come out with an objective

00:02:10.759 --> 00:02:12.110
that's actually performing
better.

00:02:12.110 --> 00:02:14.330
So you're reducing the cost
to run experiment.

00:02:14.330 --> 00:02:16.150
Or you can imagine, if you have
a variation, you might

00:02:16.150 --> 00:02:19.710
implement one or two different
variations, and you actually

00:02:19.710 --> 00:02:21.390
might have one that doesn't
perform that well.

00:02:21.390 --> 00:02:24.470
You really want to minimize
that particular variation.

00:02:24.470 --> 00:02:26.570
You don't want to be sending
visitors to a variation that's

00:02:26.570 --> 00:02:27.620
not doing well.

00:02:27.620 --> 00:02:29.870
You want to reduce that cost,
and multi-armed bandit is

00:02:29.870 --> 00:02:32.130
really great for that.

00:02:32.130 --> 00:02:34.580
And then finally, our platform
is very flexible

00:02:34.580 --> 00:02:36.410
because we have APIs.

00:02:36.410 --> 00:02:40.600
It allows you to implement
it many different ways.

00:02:40.600 --> 00:02:42.290
So you can do things like
server-side experiments.

00:02:42.290 --> 00:02:44.950
You can also do experiments
in non-web environments.

00:02:44.950 --> 00:02:47.370
So this is pretty unique, and
it's really powerful and gives

00:02:47.370 --> 00:02:49.940
you the flexibility to match
up what your business

00:02:49.940 --> 00:02:52.530
requirements are with what
your objectives are.

00:02:55.580 --> 00:02:57.590
So to get started with
Experiments, there are a few

00:02:57.590 --> 00:02:59.300
things that you need
to have in place.

00:02:59.300 --> 00:03:01.910
The first thing is you really
need to have, obviously,

00:03:01.910 --> 00:03:04.110
Google Analytics implemented
onto your property.

00:03:04.110 --> 00:03:06.480
Once you have that up running,
that's kind of

00:03:06.480 --> 00:03:07.820
the first basic step.

00:03:07.820 --> 00:03:09.390
But you need to make sure you
have some kind of goal or

00:03:09.390 --> 00:03:11.090
objective for your property.

00:03:11.090 --> 00:03:12.720
That could be a user-defined
goal.

00:03:12.720 --> 00:03:15.510
So you might set something up
yourself using the admin or

00:03:15.510 --> 00:03:17.320
management configuration.

00:03:17.320 --> 00:03:20.490
You can also use pre-defined
goals that we have set up for

00:03:20.490 --> 00:03:20.970
Experiments.

00:03:20.970 --> 00:03:24.050
So for example, we have things
like you can optimize for

00:03:24.050 --> 00:03:27.070
minimizing bounce rates or
increasing page views or time

00:03:27.070 --> 00:03:28.960
on site, things like this
that are already

00:03:28.960 --> 00:03:32.460
predefined for you.

00:03:32.460 --> 00:03:34.810
And then actually you want to
know what the variations are,

00:03:34.810 --> 00:03:37.270
what the changes you're going to
make that you want to test.

00:03:37.270 --> 00:03:40.410
So this is pretty fundamental
to the whole Experiments

00:03:40.410 --> 00:03:43.420
processes that you need to
know-- we're going to increase

00:03:43.420 --> 00:03:46.280
this font size or change this
button color or maybe

00:03:46.280 --> 00:03:47.850
introduce a new algorithm.

00:03:47.850 --> 00:03:50.180
So it's all different variations
of things that you

00:03:50.180 --> 00:03:51.430
might want to test.

00:03:54.880 --> 00:03:56.930
So let's get a little bit more
into the implementation

00:03:56.930 --> 00:03:59.520
basics, and this will kind of
set it up for the examples

00:03:59.520 --> 00:04:03.370
that we have later on.

00:04:03.370 --> 00:04:06.420
When you look at how to run an
experiment, there's typically

00:04:06.420 --> 00:04:09.020
five steps you're going to go
through, regardless of the

00:04:09.020 --> 00:04:12.970
platform or regardless of what
the actual objective might be.

00:04:12.970 --> 00:04:15.010
The first thing, as I mentioned
earlier, is that you

00:04:15.010 --> 00:04:16.170
have to define those
variations.

00:04:16.170 --> 00:04:17.920
So what are you going to test?

00:04:17.920 --> 00:04:20.110
It could be a whole bunch
of different things.

00:04:20.110 --> 00:04:21.899
It depends on your environment,
what's important

00:04:21.899 --> 00:04:23.860
to you, and what your
objectives are.

00:04:23.860 --> 00:04:26.150
Once you've defined those
variations and you've decided,

00:04:26.150 --> 00:04:28.950
OK, we're going to change this
landing page to look like

00:04:28.950 --> 00:04:31.110
this, and we're doing to have
four different variations,

00:04:31.110 --> 00:04:33.155
then you want to go into Google
Analytics and configure

00:04:33.155 --> 00:04:34.400
the Experiment.

00:04:34.400 --> 00:04:36.700
So where step one is kind of
outside of Google Analytics,

00:04:36.700 --> 00:04:39.490
something that you have to do
on your own using whatever

00:04:39.490 --> 00:04:41.830
system that you have, whether
it's a content management

00:04:41.830 --> 00:04:45.020
system or maybe you're just
coding it yourself, number two

00:04:45.020 --> 00:04:46.520
is where you actually go
to Google Analytics

00:04:46.520 --> 00:04:47.560
and configure it.

00:04:47.560 --> 00:04:50.970
And that means setting up the
URLs or variation names that

00:04:50.970 --> 00:04:52.810
you're going to use,
the kind of traffic

00:04:52.810 --> 00:04:54.520
coverage, things like this.

00:04:54.520 --> 00:04:58.970
This is all configured within
Google Analytics.

00:04:58.970 --> 00:05:00.370
And then once that's set up,
you actually run the

00:05:00.370 --> 00:05:01.245
experiment.

00:05:01.245 --> 00:05:03.200
The next thing that happens is
when a user comes to the

00:05:03.200 --> 00:05:06.620
property and is exposed to the
experiment, then you need to

00:05:06.620 --> 00:05:08.160
choose the variation.

00:05:08.160 --> 00:05:10.450
So for this particular user, if
we're going to include them

00:05:10.450 --> 00:05:13.430
in the experiment, what
variation should we show them?

00:05:13.430 --> 00:05:15.780
And there's a couple ways
to handle this.

00:05:15.780 --> 00:05:17.630
Google Analytics, the standard
implementation, takes care of

00:05:17.630 --> 00:05:18.820
this for you.

00:05:18.820 --> 00:05:20.434
And then for more advanced
implementations, it's up to

00:05:20.434 --> 00:05:22.280
you to make these decisions.

00:05:22.280 --> 00:05:24.780
But we provide the APIs
and the tools to

00:05:24.780 --> 00:05:29.550
really help this step.

00:05:29.550 --> 00:05:30.900
And then of course, it's
important, are these new or

00:05:30.900 --> 00:05:32.300
returning visitors?

00:05:32.300 --> 00:05:33.635
And that's going to affect
your variation choice.

00:05:36.180 --> 00:05:38.490
Once you've decided which
variation to show them, and

00:05:38.490 --> 00:05:40.680
you've actually showed them the
variation, then you need

00:05:40.680 --> 00:05:43.920
to send data back to Google
Analytics to indicate this.

00:05:43.920 --> 00:05:46.050
So what experiment are we
talking about, and what

00:05:46.050 --> 00:05:48.600
variation did you
show that user?

00:05:48.600 --> 00:05:52.060
And this gets sent back and is
actually part of the pipeline

00:05:52.060 --> 00:05:55.780
for processing and will end
up affecting your reports.

00:05:55.780 --> 00:05:58.490
And we'll get a little bit
into that later on.

00:05:58.490 --> 00:06:00.720
And then finally, the fifth step
to kind of any experiment

00:06:00.720 --> 00:06:03.180
is the outcomes and the reports
that you actually can

00:06:03.180 --> 00:06:06.410
view to see how it's performing
while it's running,

00:06:06.410 --> 00:06:08.620
and then ultimately what the
outcome of this experiment

00:06:08.620 --> 00:06:12.510
was, which variation won, was
there a winning variation, and

00:06:12.510 --> 00:06:13.710
how did the other
runs perform.

00:06:13.710 --> 00:06:16.410
So this is really obviously
the kind of objective or

00:06:16.410 --> 00:06:17.720
outcome you're trying
to get here.

00:06:17.720 --> 00:06:18.680
And then from there,
you actually do the

00:06:18.680 --> 00:06:20.180
implementation.

00:06:20.180 --> 00:06:23.750
If there is a variation that's
won and is better than the

00:06:23.750 --> 00:06:24.670
other ones, then you
can implement

00:06:24.670 --> 00:06:25.920
that one at this point.

00:06:28.990 --> 00:06:31.340
I thought it would be good just
to go over the platform

00:06:31.340 --> 00:06:34.550
today and then see how Content
Experiments fits into the

00:06:34.550 --> 00:06:37.230
current platform that most
people maybe have seen or are

00:06:37.230 --> 00:06:38.400
familiar with.

00:06:38.400 --> 00:06:40.960
So when you look at Google
Analytics, the way it works,

00:06:40.960 --> 00:06:43.030
the way the platform is
organized, we kind of have

00:06:43.030 --> 00:06:43.770
these big areas.

00:06:43.770 --> 00:06:45.900
We have Collection, so that's
kind of the measurement of

00:06:45.900 --> 00:06:47.290
user actions.

00:06:47.290 --> 00:06:49.900
That gets logged, and then
we do some processing.

00:06:49.900 --> 00:06:52.410
And the processing is affected
by the configuration that you

00:06:52.410 --> 00:06:53.570
have set up.

00:06:53.570 --> 00:06:55.740
So if you have goals or filters,
that's done in

00:06:55.740 --> 00:06:59.220
configuration and will
ultimately affect what your

00:06:59.220 --> 00:07:00.660
reports look like.

00:07:00.660 --> 00:07:02.480
So you have this
nice pipeline.

00:07:02.480 --> 00:07:03.950
And let's see, where
does Content

00:07:03.950 --> 00:07:06.130
Experiments fit in this.

00:07:06.130 --> 00:07:08.230
So it's somewhere around here.

00:07:08.230 --> 00:07:11.330
It's kind of its own statistical
engine that sits

00:07:11.330 --> 00:07:15.120
but interacts with all these
different components.

00:07:15.120 --> 00:07:17.180
So when you think about the
steps that we talked about

00:07:17.180 --> 00:07:19.840
earlier, the first step, where
you define your variations, is

00:07:19.840 --> 00:07:21.460
outside of GA.

00:07:21.460 --> 00:07:24.060
But the second step, where you
configure your experiments, is

00:07:24.060 --> 00:07:26.080
now interacting with
this platform.

00:07:26.080 --> 00:07:28.240
So there's really two main ways
to configure the Content

00:07:28.240 --> 00:07:29.440
Experiments.

00:07:29.440 --> 00:07:31.270
One is through the web
interface, and the other one

00:07:31.270 --> 00:07:32.630
is through the management API.

00:07:37.490 --> 00:07:39.390
The third thing is we want
to choose the variation.

00:07:39.390 --> 00:07:42.540
So this particular
step involves--

00:07:42.540 --> 00:07:44.270
and depending on what
environment you're working in,

00:07:44.270 --> 00:07:46.940
if you're doing web, we
provided a library.

00:07:46.940 --> 00:07:50.100
It's called the Content
Experiments JavaScript API.

00:07:50.100 --> 00:07:53.490
And this library interacts
directly with the Content

00:07:53.490 --> 00:07:58.210
Experiments interface and allows
you to use all these

00:07:58.210 --> 00:07:59.970
tools through JavaScript.

00:07:59.970 --> 00:08:03.080
And it makes it really easy to
interact with the service.

00:08:03.080 --> 00:08:06.460
If you're doing non-web
environments, you can still

00:08:06.460 --> 00:08:08.680
choose the variation, but it
requires you to go through the

00:08:08.680 --> 00:08:10.530
management API.

00:08:10.530 --> 00:08:14.620
And the management API allows
you access to all the

00:08:14.620 --> 00:08:16.570
different experiments that
you're currently running, and

00:08:16.570 --> 00:08:18.420
it provides you the information
you need to make

00:08:18.420 --> 00:08:19.010
this decision.

00:08:19.010 --> 00:08:21.700
So for example, what variations
do I have for an

00:08:21.700 --> 00:08:22.540
experiment?

00:08:22.540 --> 00:08:23.840
Which ones are active?

00:08:23.840 --> 00:08:27.010
And what are the weights for
those particular variations?

00:08:27.010 --> 00:08:28.450
All that information can
be obtained through the

00:08:28.450 --> 00:08:29.800
management API.

00:08:29.800 --> 00:08:31.160
And that's the information
you need to make

00:08:31.160 --> 00:08:33.780
this variation choice.

00:08:33.780 --> 00:08:35.929
Whereas on the web, with the
library, you basically just

00:08:35.929 --> 00:08:38.880
say, using the JavaScript
library, what's the current

00:08:38.880 --> 00:08:41.460
variation that I should use
for this particular user.

00:08:41.460 --> 00:08:44.560
So it's a little bit more simple
on the JavaScript side.

00:08:44.560 --> 00:08:47.730
But equally, you can do the same
thing from the non-web or

00:08:47.730 --> 00:08:49.810
server side through the
management API.

00:08:52.540 --> 00:08:54.810
The fourth step was that we
wanted to send experiment data

00:08:54.810 --> 00:08:56.330
to Google Analytics.

00:08:56.330 --> 00:08:58.170
So once you've chosen a
variation and you've shown the

00:08:58.170 --> 00:09:00.850
variation, we need to make sure
that that data gets sent

00:09:00.850 --> 00:09:02.730
back to Google Analytics.

00:09:02.730 --> 00:09:05.350
If you're doing web-based
experiments through the

00:09:05.350 --> 00:09:09.690
browser and you're using
JavaScript, you can use the--

00:09:09.690 --> 00:09:12.650
currently, we have analytics.js
and ga.js, the

00:09:12.650 --> 00:09:15.530
two libraries for tracking
or measurement.

00:09:15.530 --> 00:09:18.020
And you can send data through
those interfaces.

00:09:18.020 --> 00:09:21.130
And the way it works is you've
set the variation that you've

00:09:21.130 --> 00:09:23.800
chosen, or you're using a
JavaScript library, which will

00:09:23.800 --> 00:09:25.180
take care of this for you.

00:09:25.180 --> 00:09:28.230
And then that data gets sent
along with hits that you're

00:09:28.230 --> 00:09:31.130
sending through ga.js
or analytics.js.

00:09:31.130 --> 00:09:34.140
So they're kind of attached
to those particular hits.

00:09:34.140 --> 00:09:36.860
If you're doing non-web or
server side, then you want to

00:09:36.860 --> 00:09:37.990
use the measurement protocol.

00:09:37.990 --> 00:09:39.690
And this allows you to interact
directly with the

00:09:39.690 --> 00:09:42.230
Google Analytics service
through HTTP requests.

00:09:42.230 --> 00:09:44.630
And that allows you
to send hits

00:09:44.630 --> 00:09:45.880
from pretty much anywhere.

00:09:49.040 --> 00:09:51.540
And then finally, we have the
outcomes or reporting.

00:09:51.540 --> 00:09:54.250
So when you look at the platform
in this model, that

00:09:54.250 --> 00:09:55.880
fits in on the reporting end.

00:09:55.880 --> 00:09:58.375
And again, you can pull out
data through the Core

00:09:58.375 --> 00:09:59.110
Reporting API.

00:09:59.110 --> 00:10:01.580
We have some dimensions and
metrics exposed through the

00:10:01.580 --> 00:10:03.000
Core Reporting API.

00:10:03.000 --> 00:10:04.420
And then also, you could
obviously use the web

00:10:04.420 --> 00:10:06.760
interface to look at reports.

00:10:06.760 --> 00:10:08.580
And then from an outcome
perspective, if you want to

00:10:08.580 --> 00:10:11.550
know which variations have
won and the status of an

00:10:11.550 --> 00:10:13.450
experiment, that's also
available through obviously

00:10:13.450 --> 00:10:15.580
the web interface, but you can
also create that stuff through

00:10:15.580 --> 00:10:17.460
the Management API.

00:10:17.460 --> 00:10:20.380
And this allows you, when you
look at the Management API and

00:10:20.380 --> 00:10:23.760
what it enables, you can bring
all of the functionality of

00:10:23.760 --> 00:10:25.490
experiments to different
environments.

00:10:25.490 --> 00:10:28.470
And that means creating them,
monitoring them to see where

00:10:28.470 --> 00:10:30.990
they're at, and all these
different steps.

00:10:30.990 --> 00:10:33.770
And even your reporting can be
all basically done outside of

00:10:33.770 --> 00:10:35.710
the interface, if that's what
you're trying to do.

00:10:38.780 --> 00:10:42.360
OK, so we have an idea of how
it all fits together.

00:10:42.360 --> 00:10:44.880
Some of the important things
you want to consider when

00:10:44.880 --> 00:10:48.170
you're running an experiment,
there's different attributes

00:10:48.170 --> 00:10:51.100
that are going to affect what
libraries you should use,

00:10:51.100 --> 00:10:54.500
whether you should use
API, Management API.

00:10:54.500 --> 00:10:56.700
So the first thing I typically
look at is, OK, if you're

00:10:56.700 --> 00:10:58.230
going to run an experiment, are
you going to be doing this

00:10:58.230 --> 00:11:01.350
in the web, on the web, like in
a browser, or is this going

00:11:01.350 --> 00:11:03.480
to be a non-web environment?

00:11:03.480 --> 00:11:05.920
If you're doing web, then
again, use the Content

00:11:05.920 --> 00:11:08.590
Experiments JavaScript API, the
library that we provide.

00:11:08.590 --> 00:11:10.730
It really simplifies
things for you.

00:11:10.730 --> 00:11:12.890
If you're doing non-web
environment, then definitely

00:11:12.890 --> 00:11:13.890
use the Management API.

00:11:13.890 --> 00:11:16.210
It gives you access to all the
information you need to make

00:11:16.210 --> 00:11:19.760
these decisions and
run an experiment.

00:11:19.760 --> 00:11:22.610
The second thing is storage.

00:11:22.610 --> 00:11:24.580
So when you think about how an
experiment works, when the

00:11:24.580 --> 00:11:27.220
user is exposed to an
experiment, at that time, we

00:11:27.220 --> 00:11:29.110
need to determine, OK, have
they already seen this

00:11:29.110 --> 00:11:30.500
experiment?

00:11:30.500 --> 00:11:32.660
If they have, then let's just
show them the variation that

00:11:32.660 --> 00:11:34.390
we previously showed them.

00:11:34.390 --> 00:11:36.370
And to do that, that means you
have to store some kind of

00:11:36.370 --> 00:11:39.840
state somewhere in terms of this
particular user looked at

00:11:39.840 --> 00:11:40.850
this variation.

00:11:40.850 --> 00:11:42.850
On the browser side, it's
fairly straightforward.

00:11:42.850 --> 00:11:45.540
We provide the library, and it
takes care of all that for

00:11:45.540 --> 00:11:46.960
you, and it uses--

00:11:46.960 --> 00:11:51.750
so for Google ga.js, it uses
cookies to do this.

00:11:51.750 --> 00:11:54.900
If you're doing a server-side
implementation, then you may

00:11:54.900 --> 00:11:57.350
be able to store stuff on the
server for every particular

00:11:57.350 --> 00:11:59.320
user, or you can also use
cookies yourself if you're

00:11:59.320 --> 00:12:02.280
doing a web to server, client
server type integration.

00:12:02.280 --> 00:12:04.070
But it's something to think
about, like will you be able

00:12:04.070 --> 00:12:06.870
to store this information on
the client side, or will I

00:12:06.870 --> 00:12:08.510
have to manage this all
on the server side.

00:12:08.510 --> 00:12:10.410
And obviously, the server side
one's a little bit more

00:12:10.410 --> 00:12:13.810
complex because then you need
to maintain for every user

00:12:13.810 --> 00:12:17.440
which variation they've been
shown for an experiment.

00:12:17.440 --> 00:12:19.200
And then you also need to store
the details about the

00:12:19.200 --> 00:12:21.150
experiment on the server side.

00:12:21.150 --> 00:12:22.570
So we'll get a little bit
into that later on.

00:12:25.390 --> 00:12:28.370
The other thing is
configuration.

00:12:28.370 --> 00:12:31.310
So are you going to use the
web interface, which is a

00:12:31.310 --> 00:12:34.990
little bit easier to set up
because it's visual and you

00:12:34.990 --> 00:12:36.660
can go through the flow?

00:12:36.660 --> 00:12:39.800
But we also have the API,
so if you want to do an

00:12:39.800 --> 00:12:43.770
integration where the experiment
is created outside

00:12:43.770 --> 00:12:46.410
of GA, then you would
want to use the API.

00:12:46.410 --> 00:12:49.290
If you're going to use your own
statistical engine, then

00:12:49.290 --> 00:12:51.320
you would actually need to
use the API to create the

00:12:51.320 --> 00:12:51.880
experiment.

00:12:51.880 --> 00:12:55.920
So these are decisions that the
choice you make is going

00:12:55.920 --> 00:12:58.610
to depend on what you're
trying to do.

00:12:58.610 --> 00:13:03.120
So if you are using your own
statistical engine, then

00:13:03.120 --> 00:13:04.030
definitely API.

00:13:04.030 --> 00:13:06.140
Otherwise, you can use
the web or the API.

00:13:06.140 --> 00:13:07.390
It's up to you.

00:13:10.890 --> 00:13:13.300
And then yeah, optimization
engine.

00:13:13.300 --> 00:13:15.540
You can choose your own, if
you want to do your own

00:13:15.540 --> 00:13:19.370
optimization, flip a coin,
whatever it is.

00:13:19.370 --> 00:13:22.460
You actually have the ability to
do that with this platform.

00:13:22.460 --> 00:13:24.760
Otherwise, you can use and take
advantage of the Google

00:13:24.760 --> 00:13:28.170
Analytics multi-armed bandit,
that approach.

00:13:28.170 --> 00:13:31.460
And you can definitely try both,
and whatever you prefer

00:13:31.460 --> 00:13:34.310
to do, we provide the APIs and
the information to do that.

00:13:39.020 --> 00:13:40.560
And then lastly is
the variation

00:13:40.560 --> 00:13:42.840
choice that you're making.

00:13:42.840 --> 00:13:45.740
If you're doing client-side,
definitely I would recommend,

00:13:45.740 --> 00:13:48.730
again, for browser, use the
JavaScript library.

00:13:48.730 --> 00:13:50.970
Otherwise, you're going to be
making choices on the server

00:13:50.970 --> 00:13:54.160
side, then you need to use the
Management API to get all the

00:13:54.160 --> 00:13:55.400
experiment data.

00:13:55.400 --> 00:13:58.330
And at that point, you need to
do things like determine

00:13:58.330 --> 00:14:00.870
whether the user should be
included in the experiment,

00:14:00.870 --> 00:14:02.620
also determine what the current

00:14:02.620 --> 00:14:04.410
active experiments are.

00:14:04.410 --> 00:14:06.360
So this is all done on
the server side.

00:14:06.360 --> 00:14:09.170
And we have detailed guides
on how to do this on the

00:14:09.170 --> 00:14:09.670
developer site.

00:14:09.670 --> 00:14:10.990
So I'll get into that
a little bit later.

00:14:15.120 --> 00:14:18.900
So let's look at some high level
implementation examples.

00:14:18.900 --> 00:14:21.870
And the whole point of this
session here is really to talk

00:14:21.870 --> 00:14:25.400
more about high level steps that
you need to consider when

00:14:25.400 --> 00:14:26.880
you're implementing some
of these more advanced

00:14:26.880 --> 00:14:29.450
implementations for
experiments.

00:14:29.450 --> 00:14:32.410
We do have two solution guides
that were published recently.

00:14:32.410 --> 00:14:34.820
One is on Content Experiments
without redirects, and the

00:14:34.820 --> 00:14:37.330
other one is running a
server-side experiment.

00:14:37.330 --> 00:14:39.180
So this video really complements
these two

00:14:39.180 --> 00:14:41.480
documents, so I recommend
that you read--

00:14:41.480 --> 00:14:44.430
check out these two
solution guides.

00:14:44.430 --> 00:14:46.080
They really go into the details
on how to do this

00:14:46.080 --> 00:14:47.870
stuff, and they provide
some code snippets.

00:14:47.870 --> 00:14:49.840
And they really explain all the
steps that need to happen

00:14:49.840 --> 00:14:52.870
to do most of the experiments.

00:14:52.870 --> 00:14:56.770
There's just a few things from
an implementation perspective

00:14:56.770 --> 00:14:59.340
that I'm going to talk about
now that really doesn't go

00:14:59.340 --> 00:15:02.270
into details, but if you read
these docs combined with what

00:15:02.270 --> 00:15:05.040
I'm talking about today, you
should be able to basically

00:15:05.040 --> 00:15:08.650
implement pretty much anything
that you'd like to do

00:15:08.650 --> 00:15:11.360
regarding Content Experiments.

00:15:11.360 --> 00:15:12.570
So definitely check these
two documents out.

00:15:12.570 --> 00:15:13.910
We'll provide links
later on for you.

00:15:16.820 --> 00:15:21.990
So there is three
implementations that people

00:15:21.990 --> 00:15:24.950
have asked me about that aren't
necessarily covered in

00:15:24.950 --> 00:15:27.580
specific details in
the documentation.

00:15:27.580 --> 00:15:29.280
There's a few little things that
you need to do to make

00:15:29.280 --> 00:15:31.070
all these work.

00:15:31.070 --> 00:15:31.870
So let's go through them.

00:15:31.870 --> 00:15:33.270
One of them is CMS
integration.

00:15:33.270 --> 00:15:36.170
So if you have a Content
Management System, it'd be

00:15:36.170 --> 00:15:38.420
great to actually integrate
those experiments right into

00:15:38.420 --> 00:15:39.290
that system.

00:15:39.290 --> 00:15:42.070
So how would you automate
this process, right?

00:15:42.070 --> 00:15:44.840
If you think about Content
Management Systems today,

00:15:44.840 --> 00:15:48.530
typically someone's sitting
there, writing some new

00:15:48.530 --> 00:15:52.050
content or making a
change to a page.

00:15:52.050 --> 00:15:53.800
Now, when you make a change to
the page, if you have Google

00:15:53.800 --> 00:15:56.350
Analytics set up and you have
objectives, it would be great

00:15:56.350 --> 00:15:59.730
at that point to then offer that
person the option at that

00:15:59.730 --> 00:16:01.120
point to test this
change before it

00:16:01.120 --> 00:16:02.410
actually gets published.

00:16:02.410 --> 00:16:04.030
So it doesn't work for every
change that you're doing, but

00:16:04.030 --> 00:16:08.380
certain things that are
significant that you're making

00:16:08.380 --> 00:16:10.690
significant alterations to your
site, and you really want

00:16:10.690 --> 00:16:13.600
to see is this good change, or
is this going to be effective

00:16:13.600 --> 00:16:16.220
in terms of improving
our goals.

00:16:16.220 --> 00:16:18.040
So it would be great to have
this kind of flow where the

00:16:18.040 --> 00:16:21.880
user edits the page, CMS offers
the option to test the

00:16:21.880 --> 00:16:24.340
change, and then the
experiment runs.

00:16:24.340 --> 00:16:26.440
And then you actually don't
publish anything until you've

00:16:26.440 --> 00:16:27.490
concluded the experiment.

00:16:27.490 --> 00:16:29.530
And if there's a
clear winner--

00:16:29.530 --> 00:16:31.840
and you can test multiple
variations of this change--

00:16:31.840 --> 00:16:34.720
then you can actually publish
and finalize that change after

00:16:34.720 --> 00:16:37.310
you've already determined that
it's going to improve the

00:16:37.310 --> 00:16:39.920
objective or maximize or
minimize what you're trying to

00:16:39.920 --> 00:16:41.250
accomplish on your site.

00:16:41.250 --> 00:16:46.150
So this would be a great flow
for any CMS vendor, or if you

00:16:46.150 --> 00:16:48.420
have an in-house one that
you want to provide this

00:16:48.420 --> 00:16:52.100
functionality to your users with
in-house, definitely this

00:16:52.100 --> 00:16:53.210
can be done.

00:16:53.210 --> 00:16:56.260
And I'll go through now what the
steps would be to get this

00:16:56.260 --> 00:16:57.640
accomplished.

00:16:57.640 --> 00:16:59.430
So if we think about those five
steps that we have to go

00:16:59.430 --> 00:17:01.930
through for kind of an
experiment, the first one is

00:17:01.930 --> 00:17:04.089
defining the variations.

00:17:04.089 --> 00:17:04.980
So this is--

00:17:04.980 --> 00:17:06.210
I mean for CMS, this is great.

00:17:06.210 --> 00:17:08.089
CMS is really good at
defining variations.

00:17:08.089 --> 00:17:10.810
You can just add new pages
and new content.

00:17:10.810 --> 00:17:13.200
And that's pretty much taken
care of through this interface

00:17:13.200 --> 00:17:16.000
of the CMS system.

00:17:16.000 --> 00:17:18.010
And then you need to configure
the experiment.

00:17:18.010 --> 00:17:19.740
So this can be all done
through the API.

00:17:19.740 --> 00:17:22.829
So you can imagine, you would
create the variations in the

00:17:22.829 --> 00:17:25.119
interface of the Content
Management System.

00:17:25.119 --> 00:17:27.349
At that time, it would ask
you if you want to run an

00:17:27.349 --> 00:17:28.880
experiment.

00:17:28.880 --> 00:17:31.130
And then you would use the
Management API to create that

00:17:31.130 --> 00:17:33.230
experiment in Google
Analytics.

00:17:33.230 --> 00:17:35.690
There's a few things that you
want to do here, and this is

00:17:35.690 --> 00:17:37.870
what people don't always--

00:17:37.870 --> 00:17:41.660
or usually ask me, what I let
them know is that when you

00:17:41.660 --> 00:17:44.450
create the experiment using the
Management API, there's a

00:17:44.450 --> 00:17:46.850
property, an argument
they can set that's

00:17:46.850 --> 00:17:49.430
called editable in GAUI.

00:17:49.430 --> 00:17:52.540
And if you set this to false, it
will prevent the user from

00:17:52.540 --> 00:17:55.230
going into GA and changing that
configuration for that

00:17:55.230 --> 00:17:56.180
experiment.

00:17:56.180 --> 00:17:57.650
And you might want this because
you're going to manage

00:17:57.650 --> 00:17:59.510
it all through the CMS system.

00:17:59.510 --> 00:18:02.760
And you want to disable that
specific functionality so that

00:18:02.760 --> 00:18:05.050
they don't go in and stop the
experiment early or make

00:18:05.050 --> 00:18:08.970
changes because you've set
this up through the API.

00:18:08.970 --> 00:18:13.110
And that prevents any changes
in the UI from happening.

00:18:13.110 --> 00:18:15.050
Another thing you want to make
a decision around is the

00:18:15.050 --> 00:18:16.740
servingFramework.

00:18:16.740 --> 00:18:20.570
And I'll get into this in a
sec, but redirect or API.

00:18:20.570 --> 00:18:22.390
So what does this actually mean
when we talk about the

00:18:22.390 --> 00:18:23.590
servingFramework, right?

00:18:23.590 --> 00:18:25.230
And when you create it through
the API, this is something

00:18:25.230 --> 00:18:26.650
that you have to set.

00:18:26.650 --> 00:18:30.070
By default, it'll be redirect
if you don't set it.

00:18:30.070 --> 00:18:33.110
So what does this
actually mean?

00:18:33.110 --> 00:18:36.570
Setting the servingFramework to
redirect is basically what

00:18:36.570 --> 00:18:38.390
you would get if you created
an experiment

00:18:38.390 --> 00:18:39.750
through the web interface.

00:18:39.750 --> 00:18:42.000
This is kind of the standard
implementation.

00:18:42.000 --> 00:18:45.955
And this is where you have this
JavaScript snippet, and

00:18:45.955 --> 00:18:47.700
you place it on your
original page.

00:18:47.700 --> 00:18:49.940
And what happens is when the
user visits that page, it

00:18:49.940 --> 00:18:52.260
redirects them to the URL that's
been chosen for them,

00:18:52.260 --> 00:18:55.620
or the page that's been chosen
for them, the variation.

00:18:55.620 --> 00:18:59.890
So when you look at through the
API, when you create an

00:18:59.890 --> 00:19:03.170
experiment through the API,
if you look in the list

00:19:03.170 --> 00:19:07.180
experiment, you'll see there's
a JS snippet property of that

00:19:07.180 --> 00:19:07.970
experiment.

00:19:07.970 --> 00:19:10.280
So this is kind of like
a helper property.

00:19:10.280 --> 00:19:12.470
It gives you this JavaScript
code that you would want to

00:19:12.470 --> 00:19:14.570
use for this particular
servingFramework, and it

00:19:14.570 --> 00:19:17.430
provides it, and it fills in the
ID for you automatically.

00:19:17.430 --> 00:19:18.940
So if you looked at the response
from the management

00:19:18.940 --> 00:19:22.860
API for a servingFramework
that's set to redirect, you

00:19:22.860 --> 00:19:24.650
would basically get the
JavaScript code that you would

00:19:24.650 --> 00:19:27.150
have seen in the
web interface.

00:19:27.150 --> 00:19:29.730
So it's that same JavaScript
snippet.

00:19:29.730 --> 00:19:33.520
If you set it to API, the
servingFramework, then you end

00:19:33.520 --> 00:19:39.090
up with a JavaScript snippet
that's more intended to use

00:19:39.090 --> 00:19:40.230
when you're creating
the experiments

00:19:40.230 --> 00:19:42.570
outside of the web interface.

00:19:42.570 --> 00:19:45.660
And it provides you with this
helper JavaScript snippet that

00:19:45.660 --> 00:19:50.290
you'd want to use as part of
your implementation for the

00:19:50.290 --> 00:19:52.020
Content Experiment.

00:19:52.020 --> 00:19:53.610
So those are the kind
of two differences.

00:19:53.610 --> 00:19:56.370
You could actually set
redirect and use the

00:19:56.370 --> 00:19:58.380
JavaScript snippet
from the API one.

00:19:58.380 --> 00:19:59.110
It wouldn't make a difference.

00:19:59.110 --> 00:20:01.010
It doesn't actually affect
anything else.

00:20:01.010 --> 00:20:02.990
It really just changes that
snippet for you to really just

00:20:02.990 --> 00:20:04.920
give you-- it's just
a helper for you.

00:20:09.140 --> 00:20:11.620
So once you've decided on that,
the next thing you want

00:20:11.620 --> 00:20:13.530
to do is you have to actually
choose the variation for the

00:20:13.530 --> 00:20:16.790
user when they visit the
experiment page.

00:20:16.790 --> 00:20:19.600
So if you're doing redirects,
so the CMS isn't going to

00:20:19.600 --> 00:20:21.930
actually just use the
redirect method.

00:20:21.930 --> 00:20:23.850
And they would just provide--

00:20:23.850 --> 00:20:26.400
so you'd want to just add the
snippet to the page when you

00:20:26.400 --> 00:20:27.580
render to the user.

00:20:27.580 --> 00:20:29.590
And it would take care of the
client-side redirect for you.

00:20:29.590 --> 00:20:32.380
It would basically act the same
way as it would for the

00:20:32.380 --> 00:20:35.120
web interface implementation.

00:20:35.120 --> 00:20:37.055
If you're doing an API
implementation for Content

00:20:37.055 --> 00:20:39.100
Management Systems, so now
you're handling everything

00:20:39.100 --> 00:20:42.260
yourself, there's a couple
things you would need to do.

00:20:42.260 --> 00:20:44.650
One is you're going to be making
the choice server side.

00:20:44.650 --> 00:20:46.980
So that means you need to query
the management API,

00:20:46.980 --> 00:20:49.090
understand what variations are
active for this particular

00:20:49.090 --> 00:20:51.930
experiment, and then you'd have
to serve that variation

00:20:51.930 --> 00:20:53.720
to the user based on the weights
that you have for that

00:20:53.720 --> 00:20:56.370
variation and whether they
should be included or not in

00:20:56.370 --> 00:20:57.345
that experiment.

00:20:57.345 --> 00:21:01.460
And this can be all done through
the Management API.

00:21:01.460 --> 00:21:02.680
And then you actually want to
show them the variation that

00:21:02.680 --> 00:21:04.910
you chose for them.

00:21:04.910 --> 00:21:08.430
And then you need to just store
on the client side.

00:21:08.430 --> 00:21:10.325
The way I would do it is you'd
store it on the client side in

00:21:10.325 --> 00:21:13.530
a cookie what variation
was shown to the user.

00:21:13.530 --> 00:21:15.690
At that time, when you render
the page to them, you would

00:21:15.690 --> 00:21:18.090
include the JavaScript snippet
on the page so that you would

00:21:18.090 --> 00:21:19.340
set the chosen variation.

00:21:24.820 --> 00:21:28.820
And then finally, you want to
send the experiment data.

00:21:28.820 --> 00:21:31.050
And again, if you're using the
redirect method, the JS

00:21:31.050 --> 00:21:32.380
snippet will take care of
everything for you.

00:21:32.380 --> 00:21:34.380
It's the same as the
web interface.

00:21:34.380 --> 00:21:36.730
If you're doing the API, then
you want to use that

00:21:36.730 --> 00:21:39.800
JavaScript snippet, and you
want to specify the chosen

00:21:39.800 --> 00:21:42.630
variation for this particular
user and this particular

00:21:42.630 --> 00:21:43.770
experiment.

00:21:43.770 --> 00:21:45.270
And the way you do that
is you use the set

00:21:45.270 --> 00:21:47.030
chosen variation method.

00:21:47.030 --> 00:21:50.430
And this is all documented in
our solution guides and the

00:21:50.430 --> 00:21:52.860
actual code that you would
need to do this.

00:21:52.860 --> 00:21:56.550
So definitely take
a look at that.

00:21:56.550 --> 00:21:58.770
And then finally, we
want to monitor the

00:21:58.770 --> 00:22:00.040
experiment as it's running.

00:22:00.040 --> 00:22:02.810
So in the CMS, you can imagine
you'd have an admin panel.

00:22:02.810 --> 00:22:05.340
The user would visit the
administration panel, look at

00:22:05.340 --> 00:22:07.870
experiments that are currently
running for their site, and

00:22:07.870 --> 00:22:09.120
see if there's any outcomes.

00:22:09.120 --> 00:22:11.675
And when there is an outcome, if
there's a winner, then you

00:22:11.675 --> 00:22:13.330
would want to give them the
option at the time to publish

00:22:13.330 --> 00:22:16.810
that particular experiment.

00:22:16.810 --> 00:22:19.620
And this can all be managed
outside of GA in the CMS

00:22:19.620 --> 00:22:24.090
itself as a plug-in, maybe for
Wordpress or things like this

00:22:24.090 --> 00:22:26.960
that you can actually create a
plug-in that would handle all

00:22:26.960 --> 00:22:28.210
this stuff.

00:22:30.580 --> 00:22:32.670
OK, so another thing people
ask me about is the

00:22:32.670 --> 00:22:35.230
statistical engine, if they
want to use their own.

00:22:35.230 --> 00:22:37.220
So we do touch on this in the
solution guide a little bit,

00:22:37.220 --> 00:22:39.550
but I thought it would be good
to cover it again because

00:22:39.550 --> 00:22:41.370
there's a few things that maybe
aren't clear in the

00:22:41.370 --> 00:22:43.890
solution guides since
they cover a little

00:22:43.890 --> 00:22:44.760
bit different scenarios.

00:22:44.760 --> 00:22:48.600
So let's talk about this
statistical engine.

00:22:48.600 --> 00:22:50.750
So again, if you're doing a
statistical engine on your

00:22:50.750 --> 00:22:53.770
own, defining variations
is still the same.

00:22:53.770 --> 00:22:55.740
You're going to use--

00:22:55.740 --> 00:22:58.740
maybe you're using a third party
optimization platform.

00:22:58.740 --> 00:23:01.350
Maybe you're using a CMS system,
or you're doing the

00:23:01.350 --> 00:23:02.970
variations yourself.

00:23:02.970 --> 00:23:05.090
But ultimately, you create
different variations, and you

00:23:05.090 --> 00:23:07.890
want to run an experiment.

00:23:07.890 --> 00:23:09.830
So you would configure the
experiment using the

00:23:09.830 --> 00:23:10.840
Management API.

00:23:10.840 --> 00:23:12.495
And in this case, it's actually
required that you use

00:23:12.495 --> 00:23:15.350
the Management API to create
this experiment.

00:23:15.350 --> 00:23:17.430
And that's because you need to
set the servingFramework,

00:23:17.430 --> 00:23:20.620
which we mentioned earlier,
to external.

00:23:20.620 --> 00:23:22.400
And when you set it to external,
it will actually

00:23:22.400 --> 00:23:24.550
disable the multi-armed
bandit.

00:23:24.550 --> 00:23:26.150
And then you can run your own
experiments, and it won't

00:23:26.150 --> 00:23:31.370
actually affect anything in the
reports related to what

00:23:31.370 --> 00:23:33.430
multi-armed bandit would
have normally done.

00:23:33.430 --> 00:23:38.030
And again, I think you want to
set the editable in GA to

00:23:38.030 --> 00:23:39.750
false because I don't think
you want the user to go in

00:23:39.750 --> 00:23:41.340
there and change settings, but
again, this is up to you,

00:23:41.340 --> 00:23:43.270
depending on your scenario.

00:23:43.270 --> 00:23:44.800
Because you're going to be
handling this all yourself

00:23:44.800 --> 00:23:50.080
externally, you might want
to disable the GA UI.

00:23:50.080 --> 00:23:52.460
So setting it to external, what
actually happens then is

00:23:52.460 --> 00:23:55.790
it disables the engine for
multi-armed bandit.

00:23:55.790 --> 00:23:57.400
When you look at the experiment
itself, the

00:23:57.400 --> 00:23:59.610
variation weights that are
listed as part of the

00:23:59.610 --> 00:24:00.860
experiment will still
be there, but

00:24:00.860 --> 00:24:01.950
they'll always be zero.

00:24:01.950 --> 00:24:04.090
And they won't get updated
because typically what happens

00:24:04.090 --> 00:24:06.930
is twice a day, the multi-armed
bandit, that that

00:24:06.930 --> 00:24:09.450
engine will update weights for
variations to determine

00:24:09.450 --> 00:24:12.770
whether or not they should be
active and also determine what

00:24:12.770 --> 00:24:15.250
percentage of visits should
go to those particular

00:24:15.250 --> 00:24:15.740
variations.

00:24:15.740 --> 00:24:19.130
So that's disabled completely
when you do external.

00:24:19.130 --> 00:24:21.520
Also when you create the
experiment, the objective or

00:24:21.520 --> 00:24:23.810
goal is not required.

00:24:23.810 --> 00:24:27.260
So you can set it to leave it
empty, and it won't complain.

00:24:27.260 --> 00:24:29.720
Whereas if you set it
to API redirect, the

00:24:29.720 --> 00:24:31.780
servingFramework, and you try
to create without a goal,

00:24:31.780 --> 00:24:33.710
it'll give you an error.

00:24:33.710 --> 00:24:35.910
And then the snippet, again,
the JavaScript snippet that

00:24:35.910 --> 00:24:38.480
changes depending on the
servingFramework, again

00:24:38.480 --> 00:24:40.440
provides this helper
script that you can

00:24:40.440 --> 00:24:42.210
use if you'd like.

00:24:42.210 --> 00:24:43.330
And it just loads this Content

00:24:43.330 --> 00:24:44.560
Experiments JavaScript library.

00:24:44.560 --> 00:24:47.780
So if you are doing a web
implementation still, you're

00:24:47.780 --> 00:24:51.430
going to want to load this
JavaScript to send us the

00:24:51.430 --> 00:24:52.680
experiment data.

00:24:54.930 --> 00:24:57.300
So again, if you're doing this
then choosing the variation,

00:24:57.300 --> 00:24:57.940
you're in charge.

00:24:57.940 --> 00:24:59.570
So it's up to you how
you want to do this.

00:24:59.570 --> 00:25:02.340
Whether you flip a coin or
whatever, it's up to you.

00:25:02.340 --> 00:25:04.816
But now you're managing this
yourself in terms of what

00:25:04.816 --> 00:25:08.520
variations should be shown.

00:25:08.520 --> 00:25:10.100
But you still need to send
this experiment data.

00:25:10.100 --> 00:25:13.170
So we need to know to get the
reports populated properly.

00:25:13.170 --> 00:25:14.740
And when you think back to the
platform, we still need to

00:25:14.740 --> 00:25:17.800
know what experiment was the
user exposed to and what

00:25:17.800 --> 00:25:19.680
variation did you show us.

00:25:19.680 --> 00:25:21.800
Now, you might have your own
variation IDs if you're

00:25:21.800 --> 00:25:24.600
doing-- so for example, if
you're another third party

00:25:24.600 --> 00:25:26.470
optimization platform.

00:25:26.470 --> 00:25:28.170
The user might have set up some
variations, and you have

00:25:28.170 --> 00:25:29.250
your own IDs.

00:25:29.250 --> 00:25:31.970
And then in Google Analytics,
when you create an experiment,

00:25:31.970 --> 00:25:34.700
because you want to replicate
it in Google Analytics, each

00:25:34.700 --> 00:25:37.550
variation's going to have its
own ID, which is just kind of

00:25:37.550 --> 00:25:41.490
a zero index based
array or list.

00:25:41.490 --> 00:25:44.910
So typically, zero is the
original, and then you have

00:25:44.910 --> 00:25:46.560
one, two, three, going on.

00:25:46.560 --> 00:25:49.450
You can think of those as
IDs for the variations.

00:25:49.450 --> 00:25:52.360
So when you send us experiment
data to indicate the

00:25:52.360 --> 00:25:54.140
experiment and the variation
chosen, you just need to make

00:25:54.140 --> 00:25:57.450
sure that the ID that we have
in our system is the correct

00:25:57.450 --> 00:25:59.390
one for the variation that
you've shown because you might

00:25:59.390 --> 00:26:00.670
have a different ID
in your system.

00:26:00.670 --> 00:26:04.560
So as long as those two match
up, you just send us the

00:26:04.560 --> 00:26:08.840
variation data by using the set
chosen variation method of

00:26:08.840 --> 00:26:11.630
their JavaScript library.

00:26:11.630 --> 00:26:14.410
And that'll ensure that all of
our reports get populated with

00:26:14.410 --> 00:26:15.810
the experiment data.

00:26:15.810 --> 00:26:17.870
And if you're doing non-web,
then you don't need to worry

00:26:17.870 --> 00:26:18.960
about the JavaScript snippet.

00:26:18.960 --> 00:26:20.120
You can use the measurement
protocol.

00:26:20.120 --> 00:26:23.860
And you can send data directly
to us using the HTTP get

00:26:23.860 --> 00:26:26.460
request or post, depending on
what you're trying to do.

00:26:30.030 --> 00:26:31.840
And then you're going to
conclude the experiment

00:26:31.840 --> 00:26:34.040
because you're going to
decide when it ends or

00:26:34.040 --> 00:26:35.880
who the winner is.

00:26:35.880 --> 00:26:39.260
And once you've done
that, you won't be

00:26:39.260 --> 00:26:40.260
sending us data anymore.

00:26:40.260 --> 00:26:43.550
And you can actually review the
reports in GA, though, and

00:26:43.550 --> 00:26:45.720
you can have all that data in
there and do segmentation with

00:26:45.720 --> 00:26:48.170
user interaction data related
to the experiment.

00:26:48.170 --> 00:26:52.090
So it works really well for--

00:26:52.090 --> 00:26:54.480
so we did integration with
Visual Website Optimizer, and

00:26:54.480 --> 00:26:55.510
they're actually using this.

00:26:55.510 --> 00:26:58.070
And they're able to replicate
experiments that they're

00:26:58.070 --> 00:26:59.460
running in their system in GA.

00:26:59.460 --> 00:27:01.180
So you get this nice
integration.

00:27:01.180 --> 00:27:04.970
And you get these really great
reports that are specifically

00:27:04.970 --> 00:27:07.040
tailored for Google Analytics
users, and it's great.

00:27:11.260 --> 00:27:13.890
Finally, we have non-web
environments.

00:27:13.890 --> 00:27:15.110
So this is an interesting one.

00:27:15.110 --> 00:27:18.310
You can do things, kind of
examples like maybe a kiosk,

00:27:18.310 --> 00:27:21.470
which isn't web-based--

00:27:21.470 --> 00:27:23.500
it could be web-based, but maybe
some other environment

00:27:23.500 --> 00:27:27.540
where you don't have the
traditional kind of web model

00:27:27.540 --> 00:27:28.740
that we normally see.

00:27:28.740 --> 00:27:32.880
So again, you're still
doing the same thing.

00:27:32.880 --> 00:27:34.190
The five steps still apply.

00:27:34.190 --> 00:27:35.440
You're defining your
variations.

00:27:35.440 --> 00:27:37.910
You might go into custom
development to do that.

00:27:37.910 --> 00:27:39.520
But whatever you're doing, make
sure you've implemented

00:27:39.520 --> 00:27:41.180
Google Analytics properly.

00:27:41.180 --> 00:27:43.390
So if it's non-web, that means
most likely you're going to be

00:27:43.390 --> 00:27:46.440
using the measurement protocol
to send hits to GA.

00:27:46.440 --> 00:27:48.030
And then also, you still
need to have a goal and

00:27:48.030 --> 00:27:48.690
objective set up.

00:27:48.690 --> 00:27:50.360
So what are we trying
to improve?

00:27:50.360 --> 00:27:51.870
What is the actual goal that
we're trying to either

00:27:51.870 --> 00:27:53.690
maximize or minimize?

00:27:53.690 --> 00:27:55.140
So that still stays
kind of the same.

00:27:58.190 --> 00:28:00.460
So you can use, in this case,
you can use the web or the

00:28:00.460 --> 00:28:03.000
Management API to set up your
experiment, whatever is easier

00:28:03.000 --> 00:28:05.970
for you, depending on how
you want to set it up.

00:28:05.970 --> 00:28:08.710
When you do things like this
where you don't have in the

00:28:08.710 --> 00:28:11.110
web interface where you create
variations that don't really

00:28:11.110 --> 00:28:13.720
have a URL, you have to
provide one still.

00:28:13.720 --> 00:28:14.490
And it's fine.

00:28:14.490 --> 00:28:16.970
It won't validate properly, but
it's fine because you're

00:28:16.970 --> 00:28:19.380
just basically setting up the
structure of the experiment in

00:28:19.380 --> 00:28:20.730
Google Analytics.

00:28:20.730 --> 00:28:22.060
And the URLs don't
really matter.

00:28:22.060 --> 00:28:23.880
It's fine.

00:28:23.880 --> 00:28:25.570
And then you can still choose
now, at this point, whether

00:28:25.570 --> 00:28:26.700
you want to use the statistical

00:28:26.700 --> 00:28:28.440
engine from GA or not.

00:28:28.440 --> 00:28:29.540
So if you don't,
you can set the

00:28:29.540 --> 00:28:32.160
servingFramework to external.

00:28:32.160 --> 00:28:35.275
So when you look at this, the
non-web is kind of like the--

00:28:35.275 --> 00:28:37.330
depending on what you're trying
to do, it gives you all

00:28:37.330 --> 00:28:40.230
the different options you can
use and whether you want to

00:28:40.230 --> 00:28:43.250
use this engine or not,
whether you're using

00:28:43.250 --> 00:28:45.550
JavaScript or measurement
protocol, you have the

00:28:45.550 --> 00:28:47.830
flexibility here.

00:28:47.830 --> 00:28:48.840
But you kind of have--

00:28:48.840 --> 00:28:50.350
web might be easier for
you, Management API

00:28:50.350 --> 00:28:52.070
may make more sense.

00:28:52.070 --> 00:28:53.320
It depends on your setup.

00:28:55.850 --> 00:28:58.010
What's important to really
consider on the non-web

00:28:58.010 --> 00:29:00.960
environment is how you're going
to store information

00:29:00.960 --> 00:29:05.930
around particular users and what
experiments they've seen.

00:29:05.930 --> 00:29:07.380
So when you think about
the client side, a

00:29:07.380 --> 00:29:10.430
user visits a website.

00:29:10.430 --> 00:29:12.390
Google Analytics has
a client ID.

00:29:12.390 --> 00:29:14.830
We know the visitor has been
exposed to an experiment.

00:29:14.830 --> 00:29:16.490
We can store that
into a cookie.

00:29:16.490 --> 00:29:18.530
So when they come back again, we
know to show them the same

00:29:18.530 --> 00:29:20.610
variation that they were
originally exposed to.

00:29:20.610 --> 00:29:22.960
In non-web environments,
this might not be easy.

00:29:22.960 --> 00:29:25.570
There might not be a way to
store in the client side, so

00:29:25.570 --> 00:29:27.910
you might have to manage this
on the server side.

00:29:27.910 --> 00:29:30.920
So this is really important for
you to determine early on

00:29:30.920 --> 00:29:33.260
so you can set up your
experiment properly.

00:29:33.260 --> 00:29:34.660
And then is it even
applicable?

00:29:34.660 --> 00:29:36.410
You may have a kiosk, for
example, where the start to

00:29:36.410 --> 00:29:38.970
finish is one user, and you
never expect that user to

00:29:38.970 --> 00:29:39.820
return to do something.

00:29:39.820 --> 00:29:41.620
So the experiment really
just runs in a

00:29:41.620 --> 00:29:43.450
single kind of session.

00:29:43.450 --> 00:29:46.350
In that case, maybe storage
isn't important for that

00:29:46.350 --> 00:29:48.200
particular user.

00:29:48.200 --> 00:29:51.040
And then also, if you're doing
this on non-web environment,

00:29:51.040 --> 00:29:53.920
you're going to need to make
variation choices on the

00:29:53.920 --> 00:29:55.010
server side.

00:29:55.010 --> 00:29:59.770
And that means you're going to
be using management API to

00:29:59.770 --> 00:30:01.740
query for experiment
information.

00:30:01.740 --> 00:30:03.890
And you need to store that
on the server side.

00:30:03.890 --> 00:30:06.940
And you probably want to do
that at least twice daily.

00:30:06.940 --> 00:30:08.560
The multi-armed bandit, if
you're using the multi-armed

00:30:08.560 --> 00:30:12.480
bandit, it updates these
values twice per day.

00:30:12.480 --> 00:30:13.110
So you want to make
sure you have the

00:30:13.110 --> 00:30:15.050
latest experiment data.

00:30:15.050 --> 00:30:17.440
You would store that on your
side, and then based on the

00:30:17.440 --> 00:30:19.910
variation weights in which
experiments are active, you

00:30:19.910 --> 00:30:21.580
would make the choice
on the server side.

00:30:21.580 --> 00:30:24.060
And this is explained in our
developer docs and how to

00:30:24.060 --> 00:30:25.310
actually make these choices.

00:30:29.870 --> 00:30:31.430
So for non-web environment,
we still need to

00:30:31.430 --> 00:30:32.190
send experiment data.

00:30:32.190 --> 00:30:33.310
You always have to send
this experiment

00:30:33.310 --> 00:30:35.100
data to Google Analytics.

00:30:35.100 --> 00:30:37.320
So once you've shown the
variation to the user, then

00:30:37.320 --> 00:30:39.910
you would send the data with
the measurement protocol.

00:30:39.910 --> 00:30:43.810
So this will get the reports
populated with the proper data

00:30:43.810 --> 00:30:46.460
for your non-web environment.

00:30:46.460 --> 00:30:48.100
So very similar, all very
similar in terms of what

00:30:48.100 --> 00:30:48.760
you're doing.

00:30:48.760 --> 00:30:51.020
Just little tweaks here and
there on what action needs to

00:30:51.020 --> 00:30:52.350
be done from the implementation
standpoint.

00:30:55.280 --> 00:30:56.770
And then again, it's the same.

00:30:56.770 --> 00:30:59.320
Once you've got the experiment
running, you want to monitor

00:30:59.320 --> 00:31:02.990
the experiment and then
implement the actual winner on

00:31:02.990 --> 00:31:05.350
the kiosk or whatever it is from
the non-web environment.

00:31:05.350 --> 00:31:07.535
Again, same as the
other examples.

00:31:10.260 --> 00:31:11.670
Nothing changes there.

00:31:11.670 --> 00:31:16.020
So just a few tips, additional
questions that people ask a

00:31:16.020 --> 00:31:19.050
lot around experiments
and search.

00:31:19.050 --> 00:31:21.900
So I've had this
come up before.

00:31:21.900 --> 00:31:24.190
So the big one thing people
think off the bat is if you're

00:31:24.190 --> 00:31:27.940
doing client-side changes, that
this might be negative,

00:31:27.940 --> 00:31:30.420
maybe this SEO and something
might actually affect it.

00:31:30.420 --> 00:31:33.050
So there's actually a
great post by the

00:31:33.050 --> 00:31:35.300
Google Webmaster Central.

00:31:35.300 --> 00:31:36.630
They have a nice post
that explains

00:31:36.630 --> 00:31:38.240
these different things.

00:31:38.240 --> 00:31:40.810
So I'm just basically using
that information.

00:31:40.810 --> 00:31:42.190
But there are a couple things.

00:31:42.190 --> 00:31:45.240
So cloaking, when you're doing
changes in the client side and

00:31:45.240 --> 00:31:47.790
changing the DOM and
manipulating it, this won't be

00:31:47.790 --> 00:31:48.460
considered cloaking.

00:31:48.460 --> 00:31:52.000
So cloaking is when you're
actually changing content just

00:31:52.000 --> 00:31:53.700
because you've seen Googlebot
come by, and you're going to

00:31:53.700 --> 00:31:56.230
change the content because you
know it's a search engine

00:31:56.230 --> 00:31:57.140
looking at it.

00:31:57.140 --> 00:31:59.180
That's cloaking, so you
should never do that.

00:31:59.180 --> 00:32:02.660
But when you change the DOM and
manipulate a page on the

00:32:02.660 --> 00:32:07.050
fly when a user visits it, it's
not considered cloaking

00:32:07.050 --> 00:32:09.160
because it's not targeted
at a search engine.

00:32:09.160 --> 00:32:09.820
So this is fine.

00:32:09.820 --> 00:32:14.340
You can do this on client-side
implementations.

00:32:14.340 --> 00:32:17.950
Also, if you do have multiple
URLs, you probably want to use

00:32:17.950 --> 00:32:19.780
the canonical--

00:32:19.780 --> 00:32:21.440
you want to make sure you
indicate which one's the

00:32:21.440 --> 00:32:23.050
canonical URL.

00:32:23.050 --> 00:32:26.050
And this will help for
search and indexing.

00:32:26.050 --> 00:32:28.420
And then finally, if you are
doing redirects, make sure

00:32:28.420 --> 00:32:31.750
that they're temporary directs
so the search engine knows

00:32:31.750 --> 00:32:35.960
that this isn't permanent, and
it will index appropriately.

00:32:35.960 --> 00:32:38.390
And then finally, to reiterate
the point of the

00:32:38.390 --> 00:32:42.810
servingFramework, just make sure
if you're using external,

00:32:42.810 --> 00:32:45.820
and you want to use your own
statistical method, you have

00:32:45.820 --> 00:32:48.940
to create the experiment
through the API.

00:32:48.940 --> 00:32:53.220
There is no way right now to
set servingFramework to

00:32:53.220 --> 00:32:54.820
external and disable multi-armed
bandit if you're

00:32:54.820 --> 00:32:57.140
creating it through
the web interface.

00:32:57.140 --> 00:32:59.840
So that's key to understand
how to use your own

00:32:59.840 --> 00:33:01.460
statistical method.

00:33:01.460 --> 00:33:05.120
And then for servingFramework,
if you're using API redirect,

00:33:05.120 --> 00:33:07.520
it doesn't actually affect
the experiment at all.

00:33:07.520 --> 00:33:09.360
It will just change the
JavaScript snippet that's

00:33:09.360 --> 00:33:11.560
provided for you in
the API response.

00:33:11.560 --> 00:33:14.580
So whether you use API
redirects, it's up to you.

00:33:14.580 --> 00:33:17.235
If you're going to do a full
complete integration, like a

00:33:17.235 --> 00:33:19.200
Content Management System
integration, I just recommend,

00:33:19.200 --> 00:33:21.610
if you're not doing redirects
and just use [INAUDIBLE]

00:33:21.610 --> 00:33:23.120
API, and then you'll
get the correct

00:33:23.120 --> 00:33:26.880
JavaScript snippet for you.

00:33:26.880 --> 00:33:30.980
So one other note is that the
Universal Analytics and

00:33:30.980 --> 00:33:34.770
Experience, so analytics.js and
measurement protocol don't

00:33:34.770 --> 00:33:38.270
currently support experiments,
but it's coming very soon.

00:33:38.270 --> 00:33:41.500
So a lot of the documentation
will be updated.

00:33:41.500 --> 00:33:44.690
And so once you see that
updated, you'll know that it's

00:33:44.690 --> 00:33:47.210
available now.

00:33:47.210 --> 00:33:49.900
But all the steps and processes
that we just talked

00:33:49.900 --> 00:33:52.450
about are applicable to
whichever one you're using.

00:33:52.450 --> 00:33:55.740
But just so you guys know.

00:33:55.740 --> 00:33:57.080
And then a few resources.

00:33:57.080 --> 00:33:58.450
Again, there is the developers'

00:33:58.450 --> 00:34:00.690
site for Google Analytics.

00:34:00.690 --> 00:34:02.090
We'll provide these links
for you guys.

00:34:02.090 --> 00:34:03.175
There's a good experiments
overview.

00:34:03.175 --> 00:34:05.850
And I think that's a good
place to start.

00:34:05.850 --> 00:34:08.679
It provides all the links that
we have available and all the

00:34:08.679 --> 00:34:11.469
documentation we have available
for experiments.

00:34:11.469 --> 00:34:14.580
And then this video will
complement the existing

00:34:14.580 --> 00:34:17.949
solution guides that we have
for redirects on the client

00:34:17.949 --> 00:34:19.949
side, [INAUDIBLE]

00:34:19.949 --> 00:34:21.770
client-side redirects, and
also running server-side

00:34:21.770 --> 00:34:22.310
experiments.

00:34:22.310 --> 00:34:25.100
So this video combined with that
will really provide you

00:34:25.100 --> 00:34:28.460
with a good overview of how to
run advanced implementations

00:34:28.460 --> 00:34:29.750
for experiments.

00:34:29.750 --> 00:34:32.050
And if you're interested more
about the multi-armed bandit,

00:34:32.050 --> 00:34:34.969
there's a great article
that's provided.

00:34:34.969 --> 00:34:37.370
I would go through the Help
Center, and they really give

00:34:37.370 --> 00:34:40.630
you the details of how it works,
why it's better, or why

00:34:40.630 --> 00:34:43.223
it's better maybe for certain
situations, and really gives

00:34:43.223 --> 00:34:45.699
you some good detail on whether
you might want to use

00:34:45.699 --> 00:34:46.270
that or not.

00:34:46.270 --> 00:34:49.679
So I think it's a
great resource.

00:34:49.679 --> 00:34:51.060
That's all for today.

00:34:51.060 --> 00:34:53.750
So I'd like to thank everybody
for joining me.

00:34:53.750 --> 00:34:55.350
If you have questions,
feel free to

00:34:55.350 --> 00:34:57.360
post them in the moderator.

00:34:57.360 --> 00:34:59.140
And I will definitely take
a look and answer those

00:34:59.140 --> 00:35:01.410
questions online for you.

00:35:01.410 --> 00:35:04.220
So thanks again, and join us for
our next Analytics Live,

00:35:04.220 --> 00:35:06.750
which we'll post on
Developers Live.

00:35:06.750 --> 00:35:07.220
Thank you very much.

00:35:07.220 --> 00:35:08.470
Have a good day.

