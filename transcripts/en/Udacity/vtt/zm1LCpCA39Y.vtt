WEBVTT
Kind: captions
Language: en

00:00:00.310 --> 00:00:02.930
So we've been working in this playground method, I called

00:00:02.930 --> 00:00:07.580
mine FilterPlayground where weve been creating queries and adding filters so

00:00:07.580 --> 00:00:10.290
that we can learn how to build up queries. Now

00:00:10.290 --> 00:00:13.550
this method has very hard wide values in it. So for

00:00:13.550 --> 00:00:16.540
example City equals Tokyo and in general you want to

00:00:16.540 --> 00:00:19.120
have a bit more flexibility. We want to allow users to

00:00:19.120 --> 00:00:22.480
specify the property values that they want to search on.

00:00:22.480 --> 00:00:25.610
That's okay though because we've only been using this method for

00:00:25.610 --> 00:00:28.680
our own purposes for learning. The real method that

00:00:28.680 --> 00:00:32.200
gets invoked by the show conferences page is query conferences.

00:00:33.400 --> 00:00:36.480
So, we already defined one implementation for query conferences,

00:00:36.480 --> 00:00:39.420
it's very simple. All it does is get all the

00:00:39.420 --> 00:00:42.040
conferences. So if we go over to the Show

00:00:42.040 --> 00:00:45.180
conferences page, we see all of the conferences that have

00:00:45.180 --> 00:00:47.380
been created. We could add a filter here in

00:00:47.380 --> 00:00:51.560
the page for example, search for city is Chicago. And

00:00:51.560 --> 00:00:55.150
then search but actually, our filter's going to be ignored, even though

00:00:55.150 --> 00:00:58.040
up here it tells us that it used the filters, because

00:00:58.040 --> 00:01:01.840
on the back end it's calling query Conferences. And the implementation

00:01:01.840 --> 00:01:04.709
of query Conferences gets all the conferences and doesn't care about

00:01:04.709 --> 00:01:07.610
filters. So what you're going to be doing next is updating

00:01:07.610 --> 00:01:11.390
query conferences so that it does respond to the filters. So

00:01:11.390 --> 00:01:13.360
there's a few things that you're going to need to do.

00:01:13.360 --> 00:01:18.320
One is that you need to copy in the conferencequery.java file.

00:01:18.320 --> 00:01:22.230
And put it in the form package. And then you're going to need to change

00:01:22.230 --> 00:01:25.210
the signature of query conferences, so that

00:01:25.210 --> 00:01:27.860
it takes the conference query form. You're also

00:01:27.860 --> 00:01:29.840
going to have to import the conference query

00:01:29.840 --> 00:01:32.640
form. Then you need to update the implementation

00:01:32.640 --> 00:01:39.130
of query conferences to return the result of ConferenceQueryForm.getQuery.

00:01:39.130 --> 00:01:43.460
So you return conferenceQueryForm.getQuery.list. This will

00:01:43.460 --> 00:01:46.140
actually work. There's actually a fair amount of

00:01:46.140 --> 00:01:49.650
code going on behind the scenes in ConferenceQueryForm, but

00:01:49.650 --> 00:01:51.820
if you make these changes, your filters will start

00:01:51.820 --> 00:01:56.090
to work. But let's take a look at ConferenceQueryForm.getQuery

00:01:56.090 --> 00:01:58.590
so you understand what's going on there. After

00:01:58.590 --> 00:02:01.990
you copy conferenceQueryform over, you may find you need

00:02:01.990 --> 00:02:05.170
to refresh your project before it actually shows up.

00:02:05.170 --> 00:02:08.530
Oh there it is. Good. So, conferenceQueryform has already

00:02:08.530 --> 00:02:11.420
been implemented in full. You don't need to implement

00:02:11.420 --> 00:02:14.120
anything, but I really encourage you to read through

00:02:14.120 --> 00:02:16.820
it and understand what it does. It checks for

00:02:16.820 --> 00:02:20.330
inequality filters. Make sure that there's only one inequality

00:02:20.330 --> 00:02:23.160
filter in it. It also checks if you have

00:02:23.160 --> 00:02:26.450
an inequality filter to make sure that the sort

00:02:26.450 --> 00:02:29.380
order's in the right order. And add each filter

00:02:29.380 --> 00:02:34.440
in turn. Constructs the query and returns the query.

00:02:34.440 --> 00:02:36.210
Another thing I want to bring to your attention

00:02:36.210 --> 00:02:40.150
is the enum here that defines the operators. You see

00:02:40.150 --> 00:02:43.190
EQ is defined to be equal to equals and

00:02:43.190 --> 00:02:45.810
we're going to see how that is used in the API's

00:02:45.810 --> 00:02:48.630
explorer. So, here we are in the API's explorer.

00:02:48.630 --> 00:02:51.370
We'll go to query conferences, now you see we have

00:02:51.370 --> 00:02:55.740
the request body where we can add a property and

00:02:55.740 --> 00:02:59.610
the property is filters. And then we add a filter,

00:02:59.610 --> 00:03:01.860
you keep clicking and adding these things, so

00:03:01.860 --> 00:03:06.030
let's add a property filter on field. But

00:03:06.030 --> 00:03:09.070
now, we want to filter on city, equals

00:03:09.070 --> 00:03:13.660
something. So we need to specify the operator. Remember

00:03:13.660 --> 00:03:17.160
the enum listing operators, where eq was set

00:03:17.160 --> 00:03:20.380
to equals? And now we add the value that

00:03:20.380 --> 00:03:22.900
we want to check against. I will do

00:03:22.900 --> 00:03:25.270
London just cause we know I have some conferences

00:03:25.270 --> 00:03:27.580
in London. So this is how you specify the

00:03:27.580 --> 00:03:32.930
filters here, unless executed and save its going to work. Oops!

00:03:32.930 --> 00:03:34.880
City is not right, I think may be its supposed

00:03:34.880 --> 00:03:37.610
to be capital C at this point. So this is

00:03:37.610 --> 00:03:39.940
to find in the conference query forms taking a

00:03:39.940 --> 00:03:43.690
quick look. Actually I should have entered all capitals for

00:03:43.690 --> 00:03:46.190
the city so I'll go back and do that again.

00:03:46.190 --> 00:03:51.170
City with a capital, the operator defined as EQ and

00:03:51.170 --> 00:03:55.080
the value London. This time we find all the conferences

00:03:55.080 --> 00:03:57.750
whose city is London. There isn't that much code that

00:03:57.750 --> 00:04:00.950
you need to change to get the show conferences page

00:04:00.950 --> 00:04:03.980
to respect the filters. But there is actually quite a lot

00:04:03.980 --> 00:04:07.550
of code going on in the conference query form class

00:04:07.550 --> 00:04:09.040
that it would be good for you to read through

00:04:09.040 --> 00:04:13.210
and understand. Now let's take a look at what happens

00:04:13.210 --> 00:04:16.220
in the show conferences page after we deploy the app to

00:04:16.220 --> 00:04:20.608
app spot. So here I went to the all tab and we see all the conferences.

00:04:21.630 --> 00:04:25.970
Now I'm going to add a filter. And I want to filter on max

00:04:25.970 --> 00:04:31.124
attendees, greater than 100. Add

00:04:31.124 --> 00:04:36.188
another filter, I just want to get the conferences

00:04:36.188 --> 00:04:41.320
in February. The search, let me run this query. I failed to get

00:04:41.320 --> 00:04:44.140
the conferences. Now if we run the same

00:04:44.140 --> 00:04:48.580
query in the API's explorer and it's max [INAUDIBLE]

00:04:48.580 --> 00:04:52.276
greater than 100, start month is two. It's cold

00:04:52.276 --> 00:04:53.896
and dark in February so want to find a

00:04:53.896 --> 00:04:57.540
nice conference to go to. Then we execute.

00:04:57.540 --> 00:05:00.300
And again we've got an error. You see again,

00:05:00.300 --> 00:05:02.870
it's the back end error. And this is because

00:05:02.870 --> 00:05:06.550
we actually don't have a composite index to satisfy

00:05:06.550 --> 00:05:09.680
this query. So this is one danger of giving the

00:05:09.680 --> 00:05:12.050
users a free hand in adding filters in any way

00:05:12.050 --> 00:05:14.400
they want. You need to be really careful to make

00:05:14.400 --> 00:05:18.390
sure that all the necessary composite indexes have been created. So

00:05:18.390 --> 00:05:22.000
now the query conferences method can handle multiple filters. But

00:05:22.000 --> 00:05:24.730
there's still an optimization that you could make to it. See

00:05:24.730 --> 00:05:28.660
here that the query results shows the organizer's display name.

00:05:28.660 --> 00:05:32.450
Well the display name must be dynamically calculated for each conference.

00:05:32.450 --> 00:05:35.100
Because the organizer's display name is not something we

00:05:35.100 --> 00:05:39.140
store in the conference, we dynamically calculate it. So

00:05:39.140 --> 00:05:42.440
let's look again at the query conferences method. So,

00:05:42.440 --> 00:05:44.540
now I've changed it a bit. So that I get

00:05:44.540 --> 00:05:47.290
the, a call conference query form dot get query,

00:05:47.290 --> 00:05:50.640
which returns me a list of the conferences, and

00:05:50.640 --> 00:05:53.100
then what I'm going to do is iterate over reach

00:05:53.100 --> 00:05:57.490
of the conferences, figure out the organizer for that conference,

00:05:57.490 --> 00:05:59.610
and then I'm going to preload all the

00:05:59.610 --> 00:06:02.760
organizers. And this is going to avoid separate

00:06:02.760 --> 00:06:05.720
data store gets for each conference. Because for

00:06:05.720 --> 00:06:08.330
each conference, we have to get the profile of

00:06:08.330 --> 00:06:10.330
the organizer and then get the display name

00:06:10.330 --> 00:06:12.640
after the profile. So this is what the

00:06:12.640 --> 00:06:15.930
final implementation of queryConferences would look like. And

00:06:15.930 --> 00:06:18.010
you can find this in the Lesson Four folder.

