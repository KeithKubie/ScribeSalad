WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.360
MALE SPEAKER: Startup times for
App Engine Java are pretty

00:00:04.360 --> 00:00:07.550
high for my application,
around 30 seconds.

00:00:07.550 --> 00:00:09.390
That is actually pretty high.

00:00:09.390 --> 00:00:14.640
And Java Apps, in general, even
with reserved instances

00:00:14.640 --> 00:00:16.410
that we feel are underutilized,
we're still

00:00:16.410 --> 00:00:18.030
getting warm up requests.

00:00:18.030 --> 00:00:18.760
Any advice?

00:00:18.760 --> 00:00:21.270
FEMALE SPEAKER: Yeah, so I
think, again, this is going to

00:00:21.270 --> 00:00:22.845
be something that is going to
be covered quite extensively

00:00:22.845 --> 00:00:25.890
in Google I/O. We have a talk,
Matt Stephenson actually is

00:00:25.890 --> 00:00:28.620
going to be giving a talk
on autoscalling Java.

00:00:28.620 --> 00:00:30.770
So that talk is likely to
cover much of that.

00:00:30.770 --> 00:00:34.310
And Matt Stephenson also, with
one of our other guys from

00:00:34.310 --> 00:00:38.520
Cloud Solution, Wally Yau, he
wrote an article that was

00:00:38.520 --> 00:00:42.580
published on, again, the
App Engine's Developers

00:00:42.580 --> 00:00:47.740
Documentation site for managing
optimization of

00:00:47.740 --> 00:00:49.665
starting up spring
applications.

00:00:49.665 --> 00:00:52.540
And often we find that the
spring applications really

00:00:52.540 --> 00:00:54.250
take a longer time to start.

00:00:54.250 --> 00:00:55.480
There's a lot of libraries
involved.

00:00:55.480 --> 00:00:57.638
There is a lot of scanning of
classes and such that goes on

00:00:57.638 --> 00:01:00.230
automatically with spring
when it starts up.

00:01:00.230 --> 00:01:04.790
And that can lead to quite
long load times.

00:01:04.790 --> 00:01:07.866
I think, as I suspect, this
is probably likely

00:01:07.866 --> 00:01:10.050
to be a spring issue.

00:01:10.050 --> 00:01:13.327
At the same time I mean it's
also the possibility that

00:01:13.327 --> 00:01:15.940
you're loading libraries that
you may not need immediately.

00:01:15.940 --> 00:01:17.830
And you may want to actually
look at lazy loading those.

00:01:17.830 --> 00:01:20.570
Loading them in the background
as opposed to actually loading

00:01:20.570 --> 00:01:22.200
them as your instance starts.

00:01:22.200 --> 00:01:24.170
Anything you can do to minimize
the amount of time it

00:01:24.170 --> 00:01:26.960
takes to start the applications
is good.

00:01:26.960 --> 00:01:30.760
And really, I think that's the
key to handling things like

00:01:30.760 --> 00:01:33.440
start up requests, things
that will cause new

00:01:33.440 --> 00:01:34.080
instances of starts.

00:01:34.080 --> 00:01:37.760
It's basically just to minimize
the time it takes to

00:01:37.760 --> 00:01:38.910
load your application
initially.

00:01:38.910 --> 00:01:42.032
Only load what you need, lazy
load and everything.

00:01:42.032 --> 00:01:44.215
Don't load things you
don't need to load.

00:01:44.215 --> 00:01:46.210
And also make sure if you're
using spring that you follow

00:01:46.210 --> 00:01:49.050
the advice in the Google
[INAUDIBLE]

00:01:49.050 --> 00:01:52.346
and in that particular document
on the website.

00:01:52.346 --> 00:01:55.620
That will minimize your start up
times, and you won't be so

00:01:55.620 --> 00:01:58.750
worried about start up requests
then when things

00:01:58.750 --> 00:02:00.083
actually load a new instance,
because it won't

00:02:00.083 --> 00:02:00.760
take so long to do.

00:02:00.760 --> 00:02:02.280
MALE SPEAKER: Yep.

00:02:02.280 --> 00:02:03.340
All very good advice.

00:02:03.340 --> 00:02:07.590
So definitely check out
the Google I/O talk.

00:02:07.590 --> 00:02:10.000
All the talks at I/O are
going to be recorded.

00:02:10.000 --> 00:02:11.830
So we can check those out.

00:02:11.830 --> 00:02:13.330
Talk is happening next week.

00:02:13.330 --> 00:02:14.310
So that's a great resource.

00:02:14.310 --> 00:02:15.940
FEMALE SPEAKER: That's on
Wednesday, by the way.

00:02:15.940 --> 00:02:17.360
Are they live streamed?

00:02:17.360 --> 00:02:18.500
MALE SPEAKER: Some
of the talks are.

00:02:18.500 --> 00:02:19.910
FEMALE SPEAKER: Some of the
talks are live streamed.

00:02:19.910 --> 00:02:21.700
MALE SPEAKER: I'm not sure if
Matt's talk is live streamed.

00:02:21.700 --> 00:02:24.510
You'll be able to catch
it pretty soon.

00:02:24.510 --> 00:02:26.320
Maybe something just say a
little bit more in general

00:02:26.320 --> 00:02:30.220
about App Engine Java especially
these spring apps

00:02:30.220 --> 00:02:34.410
or applications that have these
big frameworks and long

00:02:34.410 --> 00:02:36.300
loading times.

00:02:36.300 --> 00:02:38.930
So one way to think about this
is the way that we've been

00:02:38.930 --> 00:02:44.070
building application servers for
many years has been in an

00:02:44.070 --> 00:02:47.700
environment where you would spin
up, say, five application

00:02:47.700 --> 00:02:50.950
servers, and these would be big
servers that would sit on

00:02:50.950 --> 00:02:52.450
a rack somewhere.

00:02:52.450 --> 00:02:54.920
And they would take several
minutes to kind of boot up, do

00:02:54.920 --> 00:02:56.430
all the memory checks, right?

00:02:56.430 --> 00:02:57.760
Machine would load up.

00:02:57.760 --> 00:02:59.850
It would load the application
server software.

00:02:59.850 --> 00:03:02.890
Then it would load the specific
applications.

00:03:02.890 --> 00:03:06.640
And that whole process could
take 10, 20 minutes sometimes.

00:03:06.640 --> 00:03:09.800
But then those servers, they
would run for weeks or months

00:03:09.800 --> 00:03:12.160
or however long they
needed to run.

00:03:12.160 --> 00:03:16.020
And in that environment what
you actually want to do is

00:03:16.020 --> 00:03:18.430
kind of do all the expensive
work up front when you're

00:03:18.430 --> 00:03:20.660
loading the application, because
you know you're only

00:03:20.660 --> 00:03:23.060
going to do that one time, and
then you're going to have long

00:03:23.060 --> 00:03:24.530
lived servers,

00:03:24.530 --> 00:03:27.810
App Engine tries to really kind
of fundamentally deal

00:03:27.810 --> 00:03:30.910
with applications in
a different way.

00:03:30.910 --> 00:03:34.310
When we want to scale up very
quickly to handle an increase

00:03:34.310 --> 00:03:37.740
in traffic to your website, or
when we want to scale down

00:03:37.740 --> 00:03:41.020
because there's a little bit
less traffic coming in, we

00:03:41.020 --> 00:03:43.510
really need the ability to
quickly spin up new instances

00:03:43.510 --> 00:03:44.630
of your application.

00:03:44.630 --> 00:03:49.010
And then spin them back down
kind of at a moment's notice.

00:03:49.010 --> 00:03:53.670
And so App Engine's kind of
optimized around apps that

00:03:53.670 --> 00:03:55.790
have a very short
start up time.

00:03:55.790 --> 00:03:58.060
Ideally, it's hundreds
of milliseconds.

00:03:58.060 --> 00:04:00.740
Maybe it's a few seconds
on the outset.

00:04:00.740 --> 00:04:04.260
When you start getting into like
30 second time frames,

00:04:04.260 --> 00:04:08.790
that's really a whole
different ball park.

00:04:08.790 --> 00:04:11.140
Now, if that's something you
want to do, and you want to

00:04:11.140 --> 00:04:13.260
run spring applications, and
you say, I get a lot of

00:04:13.260 --> 00:04:14.260
benefit out of that.

00:04:14.260 --> 00:04:16.390
And why can't I just
run an App Engine?

00:04:16.390 --> 00:04:17.170
You can.

00:04:17.170 --> 00:04:20.759
We actually, I think a year ago
or so, we introduced some

00:04:20.759 --> 00:04:22.380
extra knobs on the
admin console

00:04:22.380 --> 00:04:25.110
specifically for these users.

00:04:25.110 --> 00:04:27.285
What you'll need to do is go
into the admin console.

00:04:27.285 --> 00:04:30.490
Make sure you enable billing,
because that exposes all the

00:04:30.490 --> 00:04:31.520
knobs that we have.

00:04:31.520 --> 00:04:33.470
And then go into your
application settings.

00:04:33.470 --> 00:04:36.460
And there's a couple of settings
around min max idle

00:04:36.460 --> 00:04:40.740
instances, min max pending
requests latency.

00:04:40.740 --> 00:04:45.780
And those allow you to kind of
tune the cost performance of

00:04:45.780 --> 00:04:47.260
your application.

00:04:47.260 --> 00:04:51.110
So if you know you have long
loading requests, and you just

00:04:51.110 --> 00:04:54.750
need to keep in a few extra
instances around to make sure

00:04:54.750 --> 00:04:56.920
you can handle those spikes,
even though you have long

00:04:56.920 --> 00:04:59.020
instances, you can
actually crank up

00:04:59.020 --> 00:05:01.310
the min idle instances.

00:05:01.310 --> 00:05:04.310
On the other hand, if you're a
fast starting app, and you're

00:05:04.310 --> 00:05:06.860
very cost sensitive, there's
ways to turn

00:05:06.860 --> 00:05:08.700
it the other direction.

00:05:08.700 --> 00:05:10.900
We recommend everyone
start out with

00:05:10.900 --> 00:05:12.760
the automatic settings.

00:05:12.760 --> 00:05:15.250
But we do have some special
knobs for that.

00:05:15.250 --> 00:05:18.280
And I'm sure Matt, in his talk,
will go into a lot more

00:05:18.280 --> 00:05:20.130
detail than we did right here.

00:05:20.130 --> 00:05:21.120
FEMALE SPEAKER: Yeah,
definitely.

00:05:21.120 --> 00:05:22.100
MALE SPEAKER: Specifically
around Java applications.

00:05:22.100 --> 00:05:24.220
So that's definitely something
we care about.

00:05:24.220 --> 00:05:25.710
And we'll have some
advice for you.

00:05:25.710 --> 00:05:26.960
FEMALE SPEAKER: Yeah,
that's great.

