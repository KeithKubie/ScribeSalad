WEBVTT
Kind: captions
Language: en

00:00:00.859 --> 00:00:05.100
&gt;&gt; Susannah Raub: Okay, I'd like to, welcome
you to the Maps API &amp; Mobile talk today. I'm

00:00:05.100 --> 00:00:13.339
Susannah Raub; I work at Google on the Maps
API team in Sydney. And, we would like you

00:00:13.339 --> 00:00:19.740
to, not forget to provide feedback on my presentation
by going to this website, haveasec.com/io,

00:00:19.740 --> 00:00:26.670
we'll incorporate your feedback for next year.
Alright, welcome. So, Google Maps API. What

00:00:26.670 --> 00:00:32.860
are the options on mobile devices? For lowest
common denominator phones, we offer the Static

00:00:32.860 --> 00:00:42.030
Maps API. This requires no JavaScript and,
works on both browser, phones without JavaScript

00:00:42.030 --> 00:00:48.160
enables browsers, and also when you're trying
to load just a simple map very quickly, and

00:00:48.160 --> 00:00:57.739
don't need the full interactivity of the full
JavaScript API. We also have a number of native

00:00:57.739 --> 00:01:04.210
APIs, or one for android, one for iPhone called
map view and map kit. These are developed

00:01:04.210 --> 00:01:11.680
in Java and objective C for the iPhone. These
give you a real native experience the way

00:01:11.680 --> 00:01:16.840
that the native app does on these phones.
But then we have the JavaScript API. And the

00:01:16.840 --> 00:01:25.060
JavaScript API will work on iPhone fully supported,
Android to some extent, and then in the future,

00:01:25.060 --> 00:01:38.450
Nokia and Palm. We haven't tested these browsers
yet with our APIs. But, we believe they should

00:01:38.450 --> 00:01:48.420
work. So as Vic said at the keynote yesterday,
developing in the browser allows us to write

00:01:48.420 --> 00:01:53.100
one application that works on many different
platforms. It would let us solve the cross

00:01:53.100 --> 00:01:57.590
device issues instead of worrying about writing
your application, one through the iPhone,

00:01:57.590 --> 00:02:01.840
one through Android, one through Nokia, one
through Palms new device announced yesterday.

00:02:01.840 --> 00:02:05.420
And who knows what's coming tomorrow, and
where you're gonna have to write your application

00:02:05.420 --> 00:02:10.840
one more time. This way, your mashup is also
available not just across different mobile

00:02:10.840 --> 00:02:17.310
devices, but on the desktop as well. And,
this goes both ways. If you write a mobile

00:02:17.310 --> 00:02:22.180
app, a desktop user can still access your
content. And if you've written a desktop app,

00:02:22.180 --> 00:02:27.430
as long as it looks okay on the mobile, a
mobile user can use it too. Of course download

00:02:27.430 --> 00:02:33.780
is a great barrier to entry. So, by writing
a, an application in the browser, you require

00:02:33.780 --> 00:02:40.629
no download, same usage model that people
are used to for accessing things like Gmail

00:02:40.629 --> 00:02:47.000
and other great applications in the browser.
Also, we can release features and bug fixers

00:02:47.000 --> 00:02:52.010
much faster in the browser, than a downloaded
application can. You've got to worry about

00:02:52.010 --> 00:02:58.730
supporting your old client applications that
are already on phones and the difficulty in

00:02:58.730 --> 00:03:03.610
upgrading everybody to your new system. That
goes for both your application being able

00:03:03.610 --> 00:03:09.190
to iterate faster, but also the API. That,
there will be in whatever API you're using

00:03:09.190 --> 00:03:14.590
at some point, and we can get those fixed
for you right away whereas the application

00:03:14.590 --> 00:03:24.629
will rely on you re-downloading with the client
API. But, this comes with a few problems.

00:03:24.629 --> 00:03:29.550
So, what makes developing in a mobile browser
tricky? Some of these apply to mobile in general.

00:03:29.550 --> 00:03:34.209
But, we've got this issue here that we, we
would like to develop applications that work

00:03:34.209 --> 00:03:40.680
both on mobile browsers and on desktop. So
we've got issues around screen size. We need

00:03:40.680 --> 00:03:44.750
to think about what you do in this limited
amount of space. And I forgot to introduce,

00:03:44.750 --> 00:03:51.190
but I'll comment now. We've got Ken from Lonely
Planet back here. He's going to talk later

00:03:51.190 --> 00:03:56.209
and he, he's working on an application for
Lonely Planet that does just this. Is taking

00:03:56.209 --> 00:04:02.239
into consideration what you can present to
a user in a small space on this different

00:04:02.239 --> 00:04:07.650
model, than we are used to on the desktop.
So we've got to the, we have issues around

00:04:07.650 --> 00:04:14.040
screen size. We also have issues around how
the user interacts with the map. That we have

00:04:14.040 --> 00:04:19.279
great new technology with being able to touch,
and to pinch, and things like this. But it

00:04:19.279 --> 00:04:24.129
also means we need to figure out how to best
write our applications, so we take advantage

00:04:24.129 --> 00:04:32.080
of these great features. Then the big one
is speed. Mobile devices are slower. They're

00:04:32.080 --> 00:04:38.919
slower from the, the CPU side of things. They're
also on slower networks often with the 3G

00:04:38.919 --> 00:04:45.379
or even not 2G networks. So, we need to deal
with issues of reduced bandwidth, but also

00:04:45.379 --> 00:04:50.650
reduce performance speed actually running
on the device. Then the last one is the one

00:04:50.650 --> 00:04:55.849
that you guys have to tackle. And this is
the use cases. How can we write applications

00:04:55.849 --> 00:05:02.610
that make use of the mobile usage? That makes
use of the fact that people are out around

00:05:02.610 --> 00:05:07.949
town, not sitting at their computers at home.
So that's where you have to come up with great

00:05:07.949 --> 00:05:15.229
new ideas. So let's talk about speed, â€˜because
this is really, I would say the biggest thing

00:05:15.229 --> 00:05:20.539
with, with the biggest difficulty in developing
on a mobile device, and particularly in a

00:05:20.539 --> 00:05:24.860
mobile browser. We have issues in a mobile
browser that don't affect the native app.

00:05:24.860 --> 00:05:30.569
One of these is that, iPhone Safari is approximately
10 times slower to Parse JavaScript than desktop

00:05:30.569 --> 00:05:38.969
browsers. This is a huge hit. And this isn't
even talking about wireless versus 2G or 3G

00:05:38.969 --> 00:05:42.899
network. This is not the time to download.
This is purely what happens when the JavaScript

00:05:42.899 --> 00:05:48.539
arrives on your computer or on your mobile
device. Also, caching is limited compared

00:05:48.539 --> 00:05:54.249
to desktop browsers. Where you can depend
on your large JavaScript files, your images

00:05:54.249 --> 00:06:00.669
been cached in a desktop browser, so it's
a one time upfront hit for the developer or

00:06:00.669 --> 00:06:07.009
for the user. On a mobile device, the cache
is small. It would only hold small items.

00:06:07.009 --> 00:06:12.360
As you change windows on the iPhone, each
time you go back to a window, it refreshes

00:06:12.360 --> 00:06:18.110
the whole page. It has to re download everything.
The cache is not preserved across pages. This

00:06:18.110 --> 00:06:25.779
certainly for a monthly API was a big, a big
deal. And then, every millisecond matters.

00:06:25.779 --> 00:06:31.399
I think we've said this in a few talks before.
We mentioned this yesterday in the performance

00:06:31.399 --> 00:06:37.990
tips for geo APIs. I believe Vic said it in
the keynote yesterday. We found a Google that

00:06:37.990 --> 00:06:44.409
every millisecond that it takes to load a
page is fewer users. Users will give up, particularly

00:06:44.409 --> 00:06:49.599
on this mobile devices where, who's seen the
iPhone just sitting and spin and spin and

00:06:49.599 --> 00:06:54.449
spin and eventually you have to give up, â€˜because
you have no confidence it's ever going to

00:06:54.449 --> 00:07:01.349
load. So let's talk about what causes these
speed problems, and these causes of latency.

00:07:01.349 --> 00:07:05.759
Serving Data: A Google of our servers are
pretty fast where we're pretty confident in

00:07:05.759 --> 00:07:10.610
their ability to serve our data quickly. The
time that we're seeing here is negligible

00:07:10.610 --> 00:07:15.379
compared to the time it takes. These other
issues, the downloading time, the JavaScript

00:07:15.379 --> 00:07:20.919
parsing time, the performance actually on
the device. Now that said, leaving and working

00:07:20.919 --> 00:07:25.099
in Australia, I wanna say that if you believe
your users are spread around the world, do

00:07:25.099 --> 00:07:30.059
look into, you know, caching solutions and
other places to get your data closer to users.

00:07:30.059 --> 00:07:34.009
Distance matters, it takes a long time to
cross the Pacific. It's my little plug for

00:07:34.009 --> 00:07:38.389
improve your apps for Australia.

00:07:38.389 --> 00:07:43.749
Then download time: So here we need to look
at both bandwidth and latency. Mobile devices

00:07:43.749 --> 00:07:48.969
have access to wireless networks, and 3G is
actually fairly high bandwidth. But they're

00:07:48.969 --> 00:07:55.369
also high latency. This means that loading,
small and big files, take a surprisingly similar

00:07:55.369 --> 00:08:01.949
amount of time. You don't gain a lot by downloading
small files. In fact, you're going to be hurt

00:08:01.949 --> 00:08:08.659
by downloading lots and lots of small files.
As opposed to, perhaps one medium or big files.

00:08:08.659 --> 00:08:13.739
Then there is the JavaScript parsing time.
And as I've already mentioned, this is about,

00:08:13.739 --> 00:08:20.809
we've seen it to be about ten times slower
on the iPhone than on a desktop browser. This

00:08:20.809 --> 00:08:24.969
is CPU Bound, and we're expected to improve
over time, which is the good news. That is

00:08:24.969 --> 00:08:30.239
the hardware improves, we're seeing improvement,
also as the software improves. The JavaScript

00:08:30.239 --> 00:08:35.680
parsing libraries are getting better as well.
So this may not be a problem forever, but

00:08:35.680 --> 00:08:41.750
it's certainly a problem now. I want to back
up a moment, and I'm using this term latency,

00:08:41.750 --> 00:08:46.319
but what is it? And I want you to think about
it in 2 ways. One is that it's the page load

00:08:46.319 --> 00:08:51.370
time. It's the time it takes until absolutely
everything on your page is visible, loaded,

00:08:51.370 --> 00:08:59.370
visible and usable. But then, maybe more importantly,
arguable, maybe not, is user perceived latency,

00:08:59.370 --> 00:09:03.699
and this is the time until the page appears
to have loaded. So, this is the time when

00:09:03.699 --> 00:09:08.569
a user says okay, my page is here and I can
start doing something with it. And even if

00:09:08.569 --> 00:09:13.490
things are still loading in the back ground,
on non-visible parts of the page, or things

00:09:13.490 --> 00:09:17.579
that you're not gonna have to interact with
right away. This really improves the user

00:09:17.579 --> 00:09:22.319
experience. This is one of the, we've measured
both of these, and this is another point I

00:09:22.319 --> 00:09:27.959
want to make, measure these things. Measure
how long your, pages is taking to load, and

00:09:27.959 --> 00:09:33.139
how long, define what it is until the user
is able to use your page, and measure that

00:09:33.139 --> 00:09:38.629
as well. And work to reduce both of them.

00:09:38.629 --> 00:09:45.519
So how can we reduce latency on mobiles?
We can reduce the size of JavaScript, and

00:09:45.519 --> 00:09:50.190
recommend compiling or obfuscating your code.
Compiling it can help you catch errors, but

00:09:50.190 --> 00:09:55.680
more importantly, by obfuscating that you
can take all of your long variable names that

00:09:55.680 --> 00:10:00.110
make your code nice and readable. It takes
your variable names, your function names,

00:10:00.110 --> 00:10:05.600
your class names; it makes them into short
1, 2, 3 character variables functions and

00:10:05.600 --> 00:10:12.009
class names. You may have noticed that the
Google Maps API is obfuscated, this may make

00:10:12.009 --> 00:10:17.920
it a pain sometimes to, to debug, but it's
not just there so you can't read our source

00:10:17.920 --> 00:10:25.620
code. It is also there so that we can load
this API as quickly as possible for you. We,

00:10:25.620 --> 00:10:33.579
you can reduce the size probably; I guess
it's about, 10 times, 100 times. It's remarkably

00:10:33.579 --> 00:10:39.480
slower. And the compilers out there, obfuscators,
they do lots of optimizations around strings,

00:10:39.480 --> 00:10:45.319
and, and other, all kinds of optimizations
to help reduce this even further, It's not

00:10:45.319 --> 00:10:50.139
just simple renaming. The other thing is to
combine your image fetchers by using spreads.

00:10:50.139 --> 00:10:59.120
You may have heard this one before. Each download
on the iPhone takes, has significant overhead.

00:10:59.120 --> 00:11:04.199
And there're limited numbers of open connections
on the iPhone, like any browser. And so, by

00:11:04.199 --> 00:11:08.860
combining your images that are all going to
be used at the same time, into one and then

00:11:08.860 --> 00:11:15.730
spreading them, putting them in separate disc,
will help you out a lot. So what happens when

00:11:15.730 --> 00:11:20.800
you either don't have JavaScript, available
on the phone, or you really need something

00:11:20.800 --> 00:11:27.970
super super fast? We have the Static Maps
API for you. This, we have some people who

00:11:27.970 --> 00:11:32.019
are using this where it loads the Static Map
and then converts it to a dynamic map after

00:11:32.019 --> 00:11:37.600
the rest of the page is loaded. This is a
great way to reduce user perceived latency,

00:11:37.600 --> 00:11:42.730
or, sometimes on a page you may want a map
showing, you don't need to load that whole

00:11:42.730 --> 00:11:46.470
map unless you really think the user is going
to interact with it. And so you can delay

00:11:46.470 --> 00:11:51.999
low the actual JavaScript at that point as
well. So, we see that there are a number of

00:11:51.999 --> 00:11:57.370
parameters that you pass it; fairly simply,
there is a center, a zoom, a size. The map

00:11:57.370 --> 00:12:02.910
tapes available are, train, road map, satellite
and hybrid. And then you can even put markers

00:12:02.910 --> 00:12:08.660
on, and polylines it requires an API key,
and then you need to specify whether or not

00:12:08.660 --> 00:12:12.850
you're using this on a GPS enabled application
by specifying the sensor parameter. That's

00:12:12.850 --> 00:12:21.499
all there's to it. Let's say you need to Geocode
with it. Well, instead of downloading the

00:12:21.499 --> 00:12:28.180
whole API in order to, in order to do your
Geocoding with the G-Client GEO-CODER, you

00:12:28.180 --> 00:12:35.069
can use http Geocoding service. Reverse Geocoding
is also available. Unlike the static maps

00:12:35.069 --> 00:12:40.980
API, it's just passing a few parameters. So
you give it the query, your output, which

00:12:40.980 --> 00:12:51.350
could be JSON, KML, CSV, and X-Mail, and your
encoding also requires an API key and the

00:12:51.350 --> 00:12:58.209
sensor parameter. So now, you can build a
full map with Geocoding without having to

00:12:58.209 --> 00:13:01.800
download a bit of our JavaScript.
Well, let's go back to the JavaScript API.

00:13:01.800 --> 00:13:06.180
How well does V2 work on mobile browsers?
Ken, how well does this work?

00:13:06.180 --> 00:13:09.399
&gt;&gt; Ken: Not very.
&gt;&gt; Susannah Raub: Not very, he says. So, the

00:13:09.399 --> 00:13:15.629
initial download back when it was released
in 2006 was 60 kilobytes. It's now about 190

00:13:15.629 --> 00:13:19.920
kilobytes, that's â€˜because we brought
you so many great features. The time to load

00:13:19.920 --> 00:13:26.060
tiles also really affects how our API does,
but because we are loading these tiles we

00:13:26.060 --> 00:13:33.779
give them some patting. It can take a long
time to get these tiles to you. We have synchronous

00:13:33.779 --> 00:13:40.649
access to a lot of state, and this has limited
our ability to delay-load code. So because

00:13:40.649 --> 00:13:47.740
we give you for every single feature we release,
all these different gathers after you've manipulated

00:13:47.740 --> 00:13:53.180
the map in some way, means that we have to
actually upfront. Synchronously, we have to

00:13:53.180 --> 00:13:59.279
have computed all those values. This code
base was not designed with mobile in mind.

00:13:59.279 --> 00:14:06.160
It is a great API, and it works very nicely
on desktops, but it wasn't, it didn't need

00:14:06.160 --> 00:14:12.040
to fit the needs of these browsers back when
it was written a few years ago. So, here I'm

00:14:12.040 --> 00:14:17.519
gonna introduce to you today, a new version
of the API (God, I like this), [laughter].

00:14:17.519 --> 00:14:27.809
So, [clapping] we released this API yesterday,
and it's right now a limited feature set of

00:14:27.809 --> 00:14:32.339
the V2 API, but we wanted to get it out to
you. Let you start writing your simple applications

00:14:32.339 --> 00:14:37.120
on it, and using our, I'll talk of more of
our architecture, but using our behind the

00:14:37.120 --> 00:14:41.209
scenes architecture to write some really rich
applications on it. We wanted you to get this,

00:14:41.209 --> 00:14:47.350
do this fast right away so that we can start
adding the features, the more complex features

00:14:47.350 --> 00:14:54.480
later. So how does V3 address the issues that
I've brought up previously?First, the initial

00:14:54.480 --> 00:14:59.949
download size is significantly reduced. It's
35kilobytes. So we're just about half of what

00:14:59.949 --> 00:15:06.819
the, the first API was three years ago. This
significantly reduces the loading time, and

00:15:06.819 --> 00:15:11.889
I will show you this in a moment. We incorporate
the static map for you by loading that first

00:15:11.889 --> 00:15:17.850
before tiles load. We even make it draggable,
and this is to reduce the user perceived latency.

00:15:17.850 --> 00:15:22.550
So you shouldn't even notice that we've loaded
the static mapping first. We're designing

00:15:22.550 --> 00:15:29.589
with mobile devices in mind, so we've tried
to get it to feel like those native APIs,

00:15:29.589 --> 00:15:36.369
what's available if you run it natively instead
of in the browser. And, we're seeing that

00:15:36.369 --> 00:15:42.360
as hardware improves. So as hardware improves
also on OS3, we're seeing that this is really

00:15:42.360 --> 00:15:50.660
starting to feel good.So let me show you,
V2 versus V3. I'm gonna load them both. Now,

00:15:50.660 --> 00:15:54.949
the network as you may have noticed is sometimes
little hard to connect to. So last night whiles

00:15:54.949 --> 00:16:03.329
everybody was partying this worked beautifully.
We'll hope its still, [pauses] [laughs]. So

00:16:03.329 --> 00:16:10.490
you can see they look the same, right? Wait,
I'm on the wrong thing. Now, you can see they

00:16:10.490 --> 00:16:18.730
look the same. It's good. So I'm gonna go
here. I'm gonna click on a little. So we got

00:16:18.730 --> 00:16:24.809
here, I'm gonna press GO at the same time,
and, the one on the left is V2. The one on

00:16:24.809 --> 00:16:30.740
the right is V3. To emphasize this, the V2
one is running on our brand new shiny iPod

00:16:30.740 --> 00:16:42.129
Touch running on OS3 and our V3 one is running
on the slightly older iPhone with OS2. Alright,

00:16:42.129 --> 00:16:54.149
we're having some network connection problems
on the I Phone. [Laughter]. Okay, we'll try

00:16:54.149 --> 00:17:08.640
again. [Laughter]. So, OS3 is the one running
V2, which shows us V2 over in the southern

00:17:08.640 --> 00:17:29.370
ocean. Okay, I'll try again and then we'll,
[pauses]. Well, the cache had cleared itself

00:17:29.370 --> 00:17:51.880
[Laughter]. Okay, it worked so beautifully
last night. It's too bad on OS3. I can't get

00:17:51.880 --> 00:18:15.500
my finger to drive over. Okay. There we go.
Yeah, that's right. It's the network. Now,

00:18:15.500 --> 00:18:23.710
neither of them wants to connect. Alright,
no, they're both on WI-FI. It says that HTTP

00:18:23.710 --> 00:18:28.880
Data Roaming is off. It's actually we don't
have 3G access because they are for Australia.

00:18:28.880 --> 00:18:40.850
Okay. So okay my race isn't working today,
but you can believe me that it is faster [laughter].

00:18:40.850 --> 00:18:48.600
So here we go, here are some numbers for you.
We found in general, what's that? Oh, I need

00:18:48.600 --> 00:18:56.350
to switch. Thanks. So in general, we found
that it takes about nine seconds in V2 to

00:18:56.350 --> 00:19:01.500
download that first JavaScript download which
we call Main.js. It takes about two seconds

00:19:01.500 --> 00:19:10.120
to download that, on, over, this is over,
we believe over 3G for both numbers. But,

00:19:10.120 --> 00:19:17.429
so about two seconds on V3. Now, V3 numbers
are purely in our test lab. We don't, it's

00:19:17.429 --> 00:19:21.399
not been used by enough people to have really
good numbers the way we might have for what's

00:19:21.399 --> 00:19:28.440
out there Live. But, this is a pretty good
estimate of how long things take. And then,

00:19:28.440 --> 00:19:34.260
the time to load tiles which I'm actually
defining as, the time to load a map that can

00:19:34.260 --> 00:19:42.570
be dragged, is about 18 seconds on V2 and
about 7 seconds on V3, and we see great improvements

00:19:42.570 --> 00:19:49.520
on that on Wireless over 3G for that tile
downloading. So you can see it wasn't, oh

00:19:49.520 --> 00:19:55.809
wait. You weren't watching. I was watching.
This one was really still very slow, because

00:19:55.809 --> 00:20:03.450
I think it's the iPhone versus the, It's just
not connecting well. So it wasn't V2 and V3

00:20:03.450 --> 00:20:11.149
[laughs]. So how did we accomplish this improvement?
As I mentioned, we're using the static map

00:20:11.149 --> 00:20:14.990
under the hood to render the map faster, and
this will happen whenever you change zoom

00:20:14.990 --> 00:20:19.750
levels and when you load a map. So we should
be getting you the fastest map possible when

00:20:19.750 --> 00:20:26.750
there is a big map change. Now, the other
improvements were made mostly because we use

00:20:26.750 --> 00:20:33.220
this MVC Architecture, MVC being Model View
Controller. So what we do is we load our state

00:20:33.220 --> 00:20:38.840
storing models initially. This way, you can
have, you have access or everything you access

00:20:38.840 --> 00:20:44.549
is a model, and you have access to set and
get the properties of that model, and when

00:20:44.549 --> 00:20:49.840
you create something like a map, we then,
asynchronously download the code necessary

00:20:49.840 --> 00:20:54.860
to render that which is completely separate
from the actual model that's storing the state

00:20:54.860 --> 00:21:01.260
where your zoom and your center and your map
type are. So, when we download the views to,

00:21:01.260 --> 00:21:08.779
for the map and marker, we get all of the
complicated DIVs and CSS and Interaction and

00:21:08.779 --> 00:21:16.630
event handling, but when that's downloaded
and the user can begin interacting with the

00:21:16.630 --> 00:21:21.240
map. They, the events that are, that happen
there affect the model. So, for example, when

00:21:21.240 --> 00:21:26.179
the user double clicks we change both the
zoom property and the center property. These

00:21:26.179 --> 00:21:31.120
properties then are changed back on the model
because we've used these binding where they

00:21:31.120 --> 00:21:36.870
really share the value. The model can decide
at that point whether it wants to take that

00:21:36.870 --> 00:21:44.039
value or whether it needs to edit it. For
example on zoom, the models says, wait a second,

00:21:44.039 --> 00:21:49.730
the zoom level you've given me is invalid.
Because we've gone one level too far or one

00:21:49.730 --> 00:21:53.960
level, one level too far in either direction.
And the model says, nope. I'm not gonna accept

00:21:53.960 --> 00:21:58.950
that change. It doesn't update that state.
So nothing gets notified of a change, but

00:21:58.950 --> 00:22:02.580
if it does update that state then everything
that's bound to that property throughout the

00:22:02.580 --> 00:22:08.610
entire system updates that change. So I'm
gonna show you an example of how to use this.

00:22:08.610 --> 00:22:14.289
But before that, I'll explain. You can do
something where you have a DIV that's displaying

00:22:14.289 --> 00:22:22.370
the zoom level, and if you bind that product
to the zoom change property, you will at anytime

00:22:22.370 --> 00:22:28.679
be able to just get the zoom level from it.
I'll show you more lately. Because we are

00:22:28.679 --> 00:22:34.640
only loading a small state storing model for
each feature that we have, we expect that

00:22:34.640 --> 00:22:39.750
our size increase for new features will be
minimal. You hopefully will not notice any

00:22:39.750 --> 00:22:44.740
impact of new features on the size of the
download. This has also helped us to untangle

00:22:44.740 --> 00:22:52.100
code, and should help us to add new features
and fix bugs faster.

00:22:52.100 --> 00:22:56.110
So what does V3 look like?
It's somewhat similar to V2. It's a totally

00:22:56.110 --> 00:23:00.390
new interface, so you will have to rewrite
your applications from scratch. There's absolutely

00:23:00.390 --> 00:23:07.980
no backwards compatibility. Though, we have
tried to maintain the same features. Well,

00:23:07.980 --> 00:23:13.549
feature is not quite because we're started
with a small set. They'll plan to add features,

00:23:13.549 --> 00:23:18.169
but if a, value return, if a method returns
some value in V2, we're trying to return that

00:23:18.169 --> 00:23:24.710
same value so that it's a poet, not a full
rewrite. So you can see that you create a

00:23:24.710 --> 00:23:31.340
map, which is all stored in a Google. Maps
name space, and pass it to DIV just like before.

00:23:31.340 --> 00:23:36.830
And then, you can pass, right now; it's an
options object here, the center, the zoom,

00:23:36.830 --> 00:23:41.970
and the map type ID. Not a map type object,
but a map type ID. You pass these in, and

00:23:41.970 --> 00:23:46.190
this will create a map right away. If you
want a wait, and set the center and zoom and

00:23:46.190 --> 00:23:51.399
map type ID later, and I'll show you an example
why you might want to do that. We also have

00:23:51.399 --> 00:23:57.169
methods that you can call, call set center,
set zoom, set map type ID. Then, we can create

00:23:57.169 --> 00:24:01.970
a marker to go on this map, and we give it
a position, and we give it a map. And this

00:24:01.970 --> 00:24:08.279
will right away render it on a map. You can,
here also we have functions, methods available

00:24:08.279 --> 00:24:12.419
for you to set these properties individually.
So if you wanted to move your marker at some

00:24:12.419 --> 00:24:21.120
point, you can just say marker.set_position
and give it a new LatLing. So, let me find

00:24:21.120 --> 00:24:28.080
a demo here. I'm gonna find it, and then I'll
show it to you. Oh wait, this one's aren't

00:24:28.080 --> 00:24:39.159
here. So here is a demo using this MVC Architecture,
using on V3. So we have a big map and you'll

00:24:39.159 --> 00:24:44.529
notice on the right hand corner that there's
this little overlay map. Now in V2, there

00:24:44.529 --> 00:24:51.909
is an overlay map option, and this takes probably
hundreds lines of code in, our, in that Main.js

00:24:51.909 --> 00:24:58.090
file that you're downloading. Hundreds of
lines of codes are needed in order for you

00:24:58.090 --> 00:25:02.320
to be able to display this overlay map. But
I'll show you how you can implement one of

00:25:02.320 --> 00:25:08.510
these yourself using MVC and V3. Here is the
code. Can you see that okay? I did my own

00:25:08.510 --> 00:25:15.769
syntax highlighting, so I hope you can see
it well. So what we're gonna do is, we're

00:25:15.769 --> 00:25:20.080
gonna initialize two maps. One is full size,
and that's defined by the DIVs that you've

00:25:20.080 --> 00:25:25.559
created down below in the page. And one is
a small DIV in the corner of the large map,

00:25:25.559 --> 00:25:30.659
calling this map an Overlay Map. So I've initialized
a map, but I have not given it any properties

00:25:30.659 --> 00:25:36.230
to begin with. Then in the Overlay Map, I'm
gonna specify that it's got a road map type.

00:25:36.230 --> 00:25:41.139
It's not gonna change. It's always gonna be
a road map and I'm gonna disable the default

00:25:41.139 --> 00:25:45.960
UI. Disabling the default UI means that we
won't show you the zoom control, the map type

00:25:45.960 --> 00:25:50.929
control, or any other controls that we decide
to put on it someday in the future. Then,

00:25:50.929 --> 00:25:55.919
I'm gonna setup these two event listeners.
Where I'm listening to the zoom change events

00:25:55.919 --> 00:26:01.130
because what I want is the Overlay Map to
show the same exact map as the big one, but

00:26:01.130 --> 00:26:08.529
four zoom levels out. So the map, oh, and
I want the map. If you click on the, if you

00:26:08.529 --> 00:26:13.659
zoom in on the Overlay Map I want the map
to reflect that change as well. So I'm gonna

00:26:13.659 --> 00:26:18.490
have the map listen to the event, or I'm gonna
listen to these zoom changed event on the

00:26:18.490 --> 00:26:23.710
map. And when it changes, I will calculate
the new zoom level which is four zoom levels

00:26:23.710 --> 00:26:33.490
higher than the, or zoomed out than the map,
and set that to be the zoom level of the Overlay

00:26:33.490 --> 00:26:39.870
Map. I'm going to check that it hasn't changed
to avoid some infinite recursion here. Because,

00:26:39.870 --> 00:26:44.970
then, I'm also going to listen to the zoom
changed event on the Overlay Map which will

00:26:44.970 --> 00:26:50.029
be triggered anytime the zoom level changes
there, either through set zoom or the user

00:26:50.029 --> 00:26:56.700
double clicking on the map. And when the Overlay
Map zoom level changes, I'm going to reset

00:26:56.700 --> 00:27:05.490
the zoom level of the map. Then, because I
want their centers to stay in line, I bind,

00:27:05.490 --> 00:27:11.470
I use this method called Bind To, and I bind
the Overlay Map center to the map center.

00:27:11.470 --> 00:27:16.830
This means every time the map center changes,
the overlay map is notified of a center change,

00:27:16.830 --> 00:27:23.169
but also, it center just is the same. Every
time, if you called Overlay Map.getcenter.

00:27:23.169 --> 00:27:30.429
You will get the actual same object that Map.getcenter
would return. So not just the same value,

00:27:30.429 --> 00:27:39.389
but the same exact object. Then, I'm gonna
set the properties on the map. I didn't, the

00:27:39.389 --> 00:27:43.950
zoom is the important one here. I didn't set
the zoom initially because if I set the zoom

00:27:43.950 --> 00:27:48.269
initially, then the Overlay Map would not
have been notified yet of the zoom changed

00:27:48.269 --> 00:27:54.220
event. The zoom changed event happens as soon
as set zoom is called. So now I set the zoom,

00:27:54.220 --> 00:27:57.620
and just because I was setting the zoom down
here, I decided to set the center and the

00:27:57.620 --> 00:28:05.240
map type ID. Unlike these event listeners,
Bind to will notify of the initial setting

00:28:05.240 --> 00:28:09.679
of this property when you call Bind To. So
in the case, if I set the center above, then,

00:28:09.679 --> 00:28:16.559
I could have set Overlay Map Bind to Map Center,
and it would have gotten center changed event.

00:28:16.559 --> 00:28:21.539
Now, this may sound fairly complicated. You
don't actually need to use this to write a

00:28:21.539 --> 00:28:27.669
simple map application. We can hide most of
this from you, but I wanted to show you rich

00:28:27.669 --> 00:28:34.630
it can be, and emphasize that these, that
each of these MVC properties, zoom, center,

00:28:34.630 --> 00:28:39.350
map type ID. These are the bindable properties.
These are represented with the set underscore

00:28:39.350 --> 00:28:45.899
and get underscore notation. This is because
it's how it's implemented on the back end,

00:28:45.899 --> 00:28:50.899
but it makes it clear which are MBC properties
and which ones are not. There's also, you'll

00:28:50.899 --> 00:28:57.110
notice on this [pauses]. Where is my demo?
On the demo, there is this blue rectangle

00:28:57.110 --> 00:29:02.220
in the corner. I've highlighted the code for
it, but this is, the blue rectangle is being

00:29:02.220 --> 00:29:07.320
shown because the map has a bounds property
and it is binding to the bounds changed events

00:29:07.320 --> 00:29:12.509
where I think I should implement a method
called Bounds Changed, which is another way

00:29:12.509 --> 00:29:19.779
of doing this and we'll have more documentation
on it. But it pays attention to the bounds,

00:29:19.779 --> 00:29:29.299
and it renders its blue rectangle as the bounds
with the map change. And I will give you time

00:29:29.299 --> 00:29:33.970
to ask some questions, but something else
that we're making sure that we do in this

00:29:33.970 --> 00:29:39.490
case, in V3 is to adjust for screen size.
So, though V2 did some of this as well, we're

00:29:39.490 --> 00:29:44.639
really taking it seriously in V3 making sure
that your info windows don't appear larger

00:29:44.639 --> 00:29:50.490
than your map, making sure that your controls
are the right size. Not even on the iPhone,

00:29:50.490 --> 00:29:56.029
we won't even show you the zoom control by
default because you can pinch.

00:29:56.029 --> 00:30:03.059
What else is new in V3?
Chrome is supported, iPhone Safari is supported,

00:30:03.059 --> 00:30:08.240
Android works pretty well, but we've still
got some bugs that we're working out. So though

00:30:08.240 --> 00:30:13.940
you can use it, we're not officially supporting
it. Big news is no keys are required. You

00:30:13.940 --> 00:30:23.399
can now run your application on any domain.
You don't have to register for different keys,

00:30:23.399 --> 00:30:30.850
none of this. So, [pauses], you're welcome
[clapping]. We also, the default UI is also

00:30:30.850 --> 00:30:36.799
enabled by default. So this means that if
we introduce new UI elements to Maps.google.com,

00:30:36.799 --> 00:30:42.600
you will see them on your API site unless
you disable the default UI. So you can disable

00:30:42.600 --> 00:30:46.750
the default UI and you can control all of
the controls yourself, but you don't need

00:30:46.750 --> 00:30:51.350
to. If you just want to follow along and get
our updates as we add new things to it. Included

00:30:51.350 --> 00:30:56.730
in this is keyboard handling when we influence
scroll wheel zooms, scroll wheel zoom is part

00:30:56.730 --> 00:31:00.600
of default UI. Another big thing that we do
is, we adjust your controls for the size of

00:31:00.600 --> 00:31:06.169
your map. So if you want a large zoom control
on a big map and a small one on a small map,

00:31:06.169 --> 00:31:11.970
and none on the iPhone, and the Android style
on the Android, we'll take care of that for

00:31:11.970 --> 00:31:20.330
you. Just leave default UI enabled. We also
have a new Geocoding API. So we took into

00:31:20.330 --> 00:31:24.370
consideration all the things that you've been
telling us for the last few years and have

00:31:24.370 --> 00:31:29.659
a new API. The old one is not available on
V3, but we think you'll like the new one better.

00:31:29.659 --> 00:31:34.549
And as I have mentioned, we have unlimited
features now. We have a map marker, info-window,

00:31:34.549 --> 00:31:41.269
custom overlays which can be implemented using
something called the Overlay View, Geocoding,

00:31:41.269 --> 00:31:48.610
probably some more that I'm forgetting. But,
these are your features today. And, I'm going

00:31:48.610 --> 00:32:04.830
to demo, hopefully. One of our trusted testers
is Tapster, and they have an application that

00:32:04.830 --> 00:32:11.750
is running that shows you live traffic based
on GPS devices. And so, here it is in the

00:32:11.750 --> 00:32:15.549
iPhone, and I loaded it before. So hopefully
it will still be working, but you can see

00:32:15.549 --> 00:32:21.570
you can click on any of these little markers,
and it shows you the speed and the date and

00:32:21.570 --> 00:32:29.350
time of what's happening there. They've implemented
their own zoom control here. And, you can

00:32:29.350 --> 00:32:47.909
see that though tiles have taken a while to
load on here, but it's working pretty well.

00:32:47.909 --> 00:33:07.009
Oh, the port network. Okay. Well, we're not
loading tiles right now. Okay, let's, I'm

00:33:07.009 --> 00:33:18.299
gonna go back to V3 and show you some of our,
my demo page and show you some of our panning

00:33:18.299 --> 00:33:30.919
and zooming. Hopefully, it will finish loading.
If you're using your phone right now, you

00:33:30.919 --> 00:33:33.470
know, maybe you could stop [Laughter]. I encourage
you to try this outside of this building.

00:33:33.470 --> 00:33:42.710
You may have witnessed already that our connection
is difficult on the mobile devices. Okay,

00:33:42.710 --> 00:33:50.730
well, it's not loading right now. So, I think
I'm gonna hand it over to Ken. Well, here

00:33:50.730 --> 00:34:04.929
we go. So here's, so he asks about the version
3 tiles server. We're using all the same tiles.

00:34:04.929 --> 00:34:10.550
We're using all the same images, everything,
all that backend infrastructure is the same.

00:34:10.550 --> 00:34:18.220
So you can see that I zoomed in there using
pinch to zoom, and once the tiles are loaded

00:34:18.220 --> 00:34:27.380
in there it works pretty nicely. Alright,
so now, to hear from a developer using the

00:34:27.380 --> 00:34:31.800
map's API. I hand it over to Ken, and I'll
be back up for questions.

00:34:31.800 --> 00:34:45.500
&gt;&gt; Ken Hoetmer: Okay, thank you Susannah.
So, I should switch. I'm Ken, I'm from Lonely

00:34:45.500 --> 00:34:52.920
Planet. If you haven't used Lonely Planet,
I'll just give a brief introduction. We are

00:34:52.920 --> 00:34:57.120
a guide book company primarily. If you go
to a book store, you go to the travel section.

00:34:57.120 --> 00:35:02.870
You'll find all sorts of guide books there
that we produce, country guides, like this

00:35:02.870 --> 00:35:07.460
one is in Nepal, city guides, New Orleans.
We have new series called California, well,

00:35:07.460 --> 00:35:13.940
called US Trips. California Trips is one of
them, guide books for how to travel very cheaply.

00:35:13.940 --> 00:35:20.500
It's, some people don't realize that you can
travel on $10 a day if you go to the right

00:35:20.500 --> 00:35:25.290
place. Activity guides, language guides, if
you need to learn Burmese to speak to a monk

00:35:25.290 --> 00:35:31.170
when you get there, and sort of pictorial
coffee table type books. This last one is

00:35:31.170 --> 00:35:36.810
my favorite. It's the Lonely Planet Guide
to the Middle of Nowhere. We also have a digital

00:35:36.810 --> 00:35:41.750
site of our business. We have a website â€“
Lonelyplanet.com. A mobile site for the iPhone

00:35:41.750 --> 00:35:46.500
Touch â€“ Touch.lonelyplanet.com, which
is what I will be talking about really here.

00:35:46.500 --> 00:35:52.500
Mobile sites for other devices â€“ m.lonleyplanet.com,
native guide book APPs for the iPhone, Native

00:35:52.500 --> 00:35:58.190
Phrasebook Apps for iPhone, Android, and Blackberry,
and then a couple new applications that are

00:35:58.190 --> 00:36:05.520
coming soon for Android. So, thinking about
maps on mobile devices from a traveler perspective.

00:36:05.520 --> 00:36:09.450
This is really rough. I've said three main
features and obviously we can debate this,

00:36:09.450 --> 00:36:14.640
we can have a whole session on what we really
want maps to do on mobile device. But these

00:36:14.640 --> 00:36:19.530
are the three really basic things, like where
is it, meaning there is a pizza place, or

00:36:19.530 --> 00:36:24.530
there is the bay bridge, or there is whatever
it is that I'm interested in. I wanna know

00:36:24.530 --> 00:36:30.010
where it is, what's around it that might be
interesting to see while I'm there, and to

00:36:30.010 --> 00:36:35.140
get me there to navigate me to that place.
Now, that could be simply by looking at the

00:36:35.140 --> 00:36:38.770
map and following it by looking at street
signs, or perhaps there's GPS integration

00:36:38.770 --> 00:36:43.620
or driving directions or something like that.
And if we can locate the device, then you

00:36:43.620 --> 00:36:47.800
can start asking couple more interesting things
like, where am I right now and what's around

00:36:47.800 --> 00:36:54.430
me right now at this moment. So how do we
deal with that in all of our mobile products?

00:36:54.430 --> 00:36:59.230
For iPhone City Guide App, we have a tile
server. We actually cache tiles on the devices

00:36:59.230 --> 00:37:05.080
and we use route-me library. Not some set
of all five requirements that I just sketched

00:37:05.080 --> 00:37:12.070
for mobile, but it's not cross-platform obviously
its native App in the iPhone. For m.lonleyplanet.com,

00:37:12.070 --> 00:37:18.530
we use a static maps API. Susannah mentioned
later, so we can display points of interest

00:37:18.530 --> 00:37:22.300
and things around them by generating a static
map with markers on it. And then, we have

00:37:22.300 --> 00:37:27.240
simulated map navigation by using Mercator
Projection Class in the backend which can

00:37:27.240 --> 00:37:35.960
decide what the URL of a static map that would
seem to have been the place you will go by

00:37:35.960 --> 00:37:41.140
navigating north, south, east or west. Does
that make sense? So we have links that go

00:37:41.140 --> 00:37:45.800
up, down, left, right that will move the map
that will actually take you to a new page

00:37:45.800 --> 00:37:51.080
that has another static map that has just
shifted. And that's sort of adequate for where

00:37:51.080 --> 00:37:56.540
is it, what's around it when I see point of
interest on our mobile site, but you know,

00:37:56.540 --> 00:38:01.570
to get me there, part of it to where I am,
what's around me, obviously is not very well

00:38:01.570 --> 00:38:10.860
supported. And, on our iPhone site, what we
did is, we created a KML link to the iPhone's

00:38:10.860 --> 00:38:14.900
native maps App, because what we had available
to us in the browser just wasn't sufficient.

00:38:14.900 --> 00:38:20.570
And it was actually a debate internally about
how we can do that. Should we use static maps

00:38:20.570 --> 00:38:25.490
API on the iPhone site, or should we link
to the native App? And we decided we should

00:38:25.490 --> 00:38:29.660
just link to Native App even though that meant
people will be leaving our site and maybe

00:38:29.660 --> 00:38:33.960
never coming back. Well, hopefully they come
back, but not coming back potentially because

00:38:33.960 --> 00:38:38.040
whether in the Native App they start doing
searches there. They do directions look ups,

00:38:38.040 --> 00:38:43.480
they use the GPS, and the iPhone users really
are expecting that of rich functionality on

00:38:43.480 --> 00:38:49.740
the iPhone. And it's pretty hard to give a
static map on our website. I don't know, iPhone

00:38:49.740 --> 00:38:55.330
don't expect people to be satisfied with that.
So, the alternative, when Google sort of approached

00:38:55.330 --> 00:39:02.330
us and said they're building this new JavaScript
Maps API that was targeted on mobile was perfect

00:39:02.330 --> 00:39:10.530
for us in the context of our browser based
iPhone website â€“ Touch.lonelyplanet.com.

00:39:10.530 --> 00:39:14.480
This is great for the, where it was, and what's
around it, kind of thing. If you're looking

00:39:14.480 --> 00:39:22.890
at point of interest in OS 3.0, the Geo Location
API will be supported, so we can start to

00:39:22.890 --> 00:39:27.400
get the users' location into the browser.
It keeps user on our site instead of having

00:39:27.400 --> 00:39:34.110
to go to the map's application on the iPhone,
and we can still open the Natives Map Apps

00:39:34.110 --> 00:39:40.520
for directions or just give the user that
option should they desire. So just do a demo

00:39:40.520 --> 00:39:49.500
and this live? If you go to Touch.lonelyplanet.com
on your iPhone, and I will also not tell you

00:39:49.500 --> 00:39:56.160
that if you go there on the Android phone
that you were given, it will not work, and

00:39:56.160 --> 00:40:03.730
that's because we don't support it, if that
makes sense [laughs]. It works on Android,

00:40:03.730 --> 00:40:07.670
but we don't support it and there are a few
bugs that the Google APIs still has, but you

00:40:07.670 --> 00:40:13.990
can go try Touch.lonleyplanet.com on your
Android phone, and see an implementation of

00:40:13.990 --> 00:40:26.840
the new maps API. Oh, I should switch this.
Okay. So that's front page of Touch.lonelyplanet.com.

00:40:26.840 --> 00:40:34.660
I'm going to find the destinations, and it
remembers one of my previous locations so

00:40:34.660 --> 00:40:47.880
I'm not gonna bother typing. I'll just pick
San Francisco. Come on, network. Great! So

00:40:47.880 --> 00:40:51.830
there's all sort of things about San Francisco.
Things, weather, health and safety, that sort

00:40:51.830 --> 00:41:26.580
of thing, and I go to things to see and do,
press it again. Should have taken dance lessons

00:41:26.580 --> 00:41:43.690
from Lars this morning [laughs]. You got up
on yours? [Laughter] Why not? This is what

00:41:43.690 --> 00:41:56.690
you'll get [laughter] [clapping]. Mine is
still not there. Sights, I'm gonna see what's

00:41:56.690 --> 00:42:12.350
around See. I'm there on this phone now, so
might have to just [laughter], fantastic.

00:42:12.350 --> 00:42:15.010
So there are also some places that I can see
around San Francisco. I'm going to pick, oh

00:42:15.010 --> 00:42:38.360
I don't know, Bob Kaufman Alley. Check that
out. Is there anyone else having another iPhone

00:42:38.360 --> 00:43:02.380
that's managed to get ahead of me [laughter]?
Yep. Oh, it's up, it's up. Okay. Well, here's

00:43:02.380 --> 00:43:07.330
the other part that I was hoping to get to
quickly and then spend a little bit time on

00:43:07.330 --> 00:43:13.570
and as if I could show that. Cross your fingers.
Well, previously, this will link out to the

00:43:13.570 --> 00:43:38.780
iPhone's Native App once this loads [laughter].
I should mention that we're based in Australia,

00:43:38.780 --> 00:43:43.400
so that's why we don't have 3G on our phones
either. We got Australian phones. You'd get

00:43:43.400 --> 00:43:55.810
something like this [clapping], and as you
can see, we've created our own, well, not

00:43:55.810 --> 00:44:02.220
our own, we've copied an info window from
another place you may have seen before. That's

00:44:02.220 --> 00:44:07.140
the custom info window that says crossroads
there, that is implemented using the overlay

00:44:07.140 --> 00:44:12.820
view class in the Maps API version 3. We've
used custom icons that we had. What we've

00:44:12.820 --> 00:44:18.440
done is, we've made an AJAX call to our content
servers to load in all of the, in this case,

00:44:18.440 --> 00:44:24.060
it's the shocks in San Francisco onto the
map. And then, few other features of what

00:44:24.060 --> 00:44:33.390
we've done. If you scroll the map, we're listening
to the bounds changed event, and it will populate

00:44:33.390 --> 00:44:37.970
other things that are outside of the map bounds.
And that helps keep it zippy on the iPhone

00:44:37.970 --> 00:44:43.570
browser which isn't a very high powered browser
for JavaScript. So, then, I can just click

00:44:43.570 --> 00:44:53.650
on one of these. I can click on the info window
and go to that, go to that point of interest;

00:44:53.650 --> 00:45:17.120
I can ask what's nearby that one. To get a
list, I can show that list on a map. There

00:45:17.120 --> 00:45:31.480
we go. I can switch between places to shop
and places to see, and you get the idea. We

00:45:31.480 --> 00:45:37.720
haven't all of the pinch events and the swipes
and all of those things are included by defaults

00:45:37.720 --> 00:45:41.810
in version three. We haven't done anything
differently on the interface side of things

00:45:41.810 --> 00:45:47.030
and actually if you go to this page and start
using our site on your Android phone, you'll

00:45:47.030 --> 00:45:52.590
see that there are actually zoom buttons that
will appear on your page because the API recognizes

00:45:52.590 --> 00:45:57.460
that you are on Android and not on iPhone.
And if you go to Touch.lonelyplanet.com on

00:45:57.460 --> 00:46:02.080
your desktop browser and load it up, obviously
the experience isn't designed for that, but

00:46:02.080 --> 00:46:08.590
you will see the default UI for the desktop
browser show up. And, I think that's all from

00:46:08.590 --> 00:46:12.480
me. We'll move into questions now. You can
ask Susannah whatever questions you want,

00:46:12.480 --> 00:46:16.860
or ask me anything about implementing this
that we run into.

00:46:16.860 --> 00:46:22.870
&gt;&gt; Susannah Raub: â€“ Can you come up
to the mic? Maybe that will happen. Do come

00:46:22.870 --> 00:46:49.690
up to the mic, so that helps everybody hear
your questions. So we encourage you to do

00:46:49.690 --> 00:46:51.740
that [Clapping]. Alright, here we go.
&gt;&gt; Are you planning, hello, can you hear me,

00:46:51.740 --> 00:46:56.090
yeah? Are you planning to do a, sort of the
map view also, eventually? I mean, it's nice

00:46:56.090 --> 00:47:04.330
that you guys kind of recreated that, the
view. So I'm just wondering if that's something

00:47:04.330 --> 00:47:07.780
thatâ€¦
&gt;&gt; Susannah Raub: Do the map view, whatâ€¦

00:47:07.780 --> 00:47:13.350
&gt;&gt; Sorry, so that, I mean, it looks like the
native iPhone sort of maps control.

00:47:13.350 --> 00:47:19.780
&gt;&gt; Ken Hoetmer: Oh, that's a question for
me. That's a custom info window that we created,

00:47:19.780 --> 00:47:24.820
which are source isn't obfuscated you can
just go look at it and check out and, you

00:47:24.820 --> 00:47:29.370
know, and go use it yourself. We did that
to give the feeling that people have, when

00:47:29.370 --> 00:47:36.230
they're on the Native App. So it gives a feeling
of the iPhone experience, yeah.

00:47:36.230 --> 00:47:43.100
&gt;&gt; okay.
&gt;&gt; So, when you show me a bunch of restaurants,

00:47:43.100 --> 00:47:46.800
that doesn't mean much to me. I'm not interested
in just going to any restaurant that happens

00:47:46.800 --> 00:47:53.970
to be nearby, right? So, are you gonna add
more depths to what you find, in terms of

00:47:53.970 --> 00:47:58.180
maybe personal preferences I might have stored
in my contact information? Or something that

00:47:58.180 --> 00:48:04.110
gives me a little more intelligent, search
for things that you show up on Lonely Planet?

00:48:04.110 --> 00:48:12.570
&gt;&gt; Ken Hoetmer: You're asking a tough Lonely
Planet product question. How about we talk

00:48:12.570 --> 00:48:15.650
about that offline [laughter]? That's all
I can say, that's all I can say.

00:48:15.650 --> 00:48:18.190
&gt;&gt; Susannah Raub: Yes.
&gt;&gt; Hey, I know this discussion has been in

00:48:18.190 --> 00:48:24.080
the context of mobile, but I'm wondering if
any of these V3, any of the V3 API will be

00:48:24.080 --> 00:48:29.490
available from within the Google map's flash
API? Is that anotherâ€¦?

00:48:29.490 --> 00:48:33.220
&gt;&gt; Susannah Raub: So, this is purely JavaScript
now that the flash API is completely separate.

00:48:33.220 --> 00:48:38.560
Are you asking if like the, the MVC stuff
would be available in flash orâ€¦?

00:48:38.560 --> 00:48:42.470
&gt;&gt; Well, more just kind of the optimizations
that you've made in terms of the static image

00:48:42.470 --> 00:48:59.090
loading and things like that.
&gt;&gt; Susannah Raub: I can't, maybe â€¦..

00:48:59.090 --> 00:49:06.270
We have found that on desktop. Loading the
static map first doesn't make such a big difference.

00:49:06.270 --> 00:49:09.560
It definitely makes a difference, but it's
not as critical as it is on the slower mobile

00:49:09.560 --> 00:49:11.790
devices.
&gt;&gt; Are you sure?

00:49:11.790 --> 00:49:14.330
&gt;&gt; Susannah Raub: Yes.
&gt;&gt; Cool.

00:49:14.330 --> 00:49:16.240
&gt;&gt; Susannah Raub: Thanks.

00:49:16.240 --> 00:49:21.590
&gt;&gt; So, in version two, there was a quick-mode
so you can get it to work with other device

00:49:21.590 --> 00:49:27.190
types like Net Front Browsers, and you know,
alternative browsers. In version three, you're

00:49:27.190 --> 00:49:35.910
focused on mobile, right? So, is it centered
around web kit? So, if I'm using like, a Net

00:49:35.910 --> 00:49:41.520
Front, you know which is an access browser
or Limo which is an open source browser. Is

00:49:41.520 --> 00:49:45.960
it going to render that way as well?
&gt;&gt; Susannah Raub: So it should be the same

00:49:45.960 --> 00:49:54.320
across browsers for now. We are, we do test
on web kit browsers, but we haven't done anything

00:49:54.320 --> 00:50:01.660
special for web kit browsers versus other
browsers. Not yet.

00:50:01.660 --> 00:50:03.610
&gt;&gt; Okay.
&gt;&gt; Susannah Raub: Before everybody leaves,

00:50:03.610 --> 00:50:05.290
I would like to come in to, we have a fire
side chat for Geo at 12:00, in the fire side

00:50:05.290 --> 00:50:09.520
chat room. So if you have question that go
beyond just this API, come join us there,

00:50:09.520 --> 00:50:13.300
and you should also give feedback on this
presentation at haveasec.com/io. Now, move

00:50:13.300 --> 00:50:20.030
on with questions, yes.
&gt;&gt; Can I ask questions on static map? â€˜Cause

00:50:20.030 --> 00:50:27.350
I used static map for the first load, would
be nice to support polygons if you're requesting

00:50:27.350 --> 00:50:33.220
it for you'reâ€¦
&gt;&gt; Susannah Raub: It would be nice to support

00:50:33.220 --> 00:50:38.180
polygons. Yes, you're right.
&gt;&gt; We'll be supporting it [fades]

00:50:38.180 --> 00:50:52.750
&gt;&gt; Susannah Raub: We'll work on it. We know
it would be nice.

00:50:52.750 --> 00:50:53.600
&gt;&gt; â€¦ instead of users, look at white
space if you load that first.

00:50:53.600 --> 00:50:57.280
&gt;&gt; Alright. Are you gonna roll the App Cache
stuff into the V3 API?

00:50:57.280 --> 00:51:00.050
&gt;&gt; Susannah Raub: So that's the APP Cache
that's the H â€“ Channel 5, the database

00:51:00.050 --> 00:51:03.590
stuff orâ€¦?
&gt;&gt; Yeah.

00:51:03.590 --> 00:51:10.350
&gt;&gt; Susannah Raub: Yeah. So, we, we've looked
into some of the stuff. I believe it's difficult

00:51:10.350 --> 00:51:15.510
to do cross domain and so I think it's something
you can put on your site and take advantage

00:51:15.510 --> 00:51:19.380
of, but we may not be able to build in ourselves.
&gt;&gt; Okay. Thanks.

00:51:19.380 --> 00:51:23.700
&gt;&gt; I just have a question about the draggable
pin. Is that possible also in the browser

00:51:23.700 --> 00:51:25.890
with this new version?
&gt;&gt; Susannah Raub: The draggableâ€¦

00:51:25.890 --> 00:51:28.970
&gt;&gt; Pin that you can do in the native maps
application on the iPhone.

00:51:28.970 --> 00:51:31.200
&gt;&gt; Susannah Raub: That you can drag the marker?
&gt;&gt; Yeah.

00:51:31.200 --> 00:51:33.780
&gt;&gt; Susannah Raub: Not currently, but like
these are some of the features that we have

00:51:33.780 --> 00:51:37.970
in V2 that we would like to have and once
we support draggable markers, they will work

00:51:37.970 --> 00:51:50.380
in the iPhone as well, but right now they
are just clickable. Any more questions? Thanks

00:51:50.380 --> 00:51:52.920
for joining us, and good luck in writing your
V3 applications [clapping].

