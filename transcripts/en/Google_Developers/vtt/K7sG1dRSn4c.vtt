WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:45.270
[MUSIC PLAYING]

00:00:45.270 --> 00:00:48.170
MALE SPEAKER 1: Shanghai GDG
is a very interesting

00:00:48.170 --> 00:00:49.140
developer community.

00:00:49.140 --> 00:00:49.970
FEMALE SPEAKER 1: I'm
glad somebody

00:00:49.970 --> 00:00:51.250
has asked this question.

00:00:51.250 --> 00:00:52.390
MALE SPEAKER 2: This is where
the magic happens.

00:00:52.390 --> 00:00:53.710
FEMALE SPEAKER 2: This is
primarily a question and

00:00:53.710 --> 00:00:54.250
answer show.

00:00:54.250 --> 00:00:56.585
So if any of you out there would
like to ask questions--

00:01:03.770 --> 00:01:04.310
PETE LEPAGE: All right.

00:01:04.310 --> 00:01:05.940
Welcome, everybody.

00:01:05.940 --> 00:01:06.850
My name is Pete LePage.

00:01:06.850 --> 00:01:10.110
I'm a developer advocate
with the Google Chrome

00:01:10.110 --> 00:01:11.330
team here at Google.

00:01:11.330 --> 00:01:12.870
I guess I said Google
a few times.

00:01:12.870 --> 00:01:14.730
I have Google on
the mind today.

00:01:14.730 --> 00:01:20.375
And with me today joining from
London, we have Paul Lewis.

00:01:20.375 --> 00:01:20.715
PAUL LEWIS: Paul Lewis.

00:01:20.715 --> 00:01:20.800
Yes.

00:01:20.800 --> 00:01:22.320
PETE LEPAGE: Mr. Lewis, how
are you doing today?

00:01:22.320 --> 00:01:24.560
PAUL LEWIS: I'm very
good, thank you.

00:01:24.560 --> 00:01:25.865
As you said, live from London.

00:01:25.865 --> 00:01:27.270
So yeah all good.

00:01:27.270 --> 00:01:28.360
PETE LEPAGE: Excellent.

00:01:28.360 --> 00:01:32.730
Well, so last week, we had a
hackathon back in Mountain

00:01:32.730 --> 00:01:36.940
View that we were both there
for, and we got to play with

00:01:36.940 --> 00:01:37.890
some interesting hardware.

00:01:37.890 --> 00:01:39.250
We did some kind
of neat things.

00:01:39.250 --> 00:01:42.080
I sort of alluded to it in
our Hangout last week.

00:01:42.080 --> 00:01:47.060
But one of the big things that
I think you and Paul Kinlan

00:01:47.060 --> 00:01:52.710
did a couple days before was to
sit down and start doing a

00:01:52.710 --> 00:01:54.280
little bit of hacking
on one of the

00:01:54.280 --> 00:01:56.156
Parrot AR.Drones, right?

00:01:56.156 --> 00:01:57.285
PAUL LEWIS: Absolutely, yeah.

00:01:57.285 --> 00:02:04.750
So Chrome has the sockets API,
and we knew that this drone

00:02:04.750 --> 00:02:05.990
communicated over UDP.

00:02:05.990 --> 00:02:10.509
So what we wanted to do is find
out how difficult or how

00:02:10.509 --> 00:02:13.420
easy it would be to actually
get Chrome through a Chrome

00:02:13.420 --> 00:02:14.940
app talking to the drone.

00:02:14.940 --> 00:02:16.250
So that is exactly right.

00:02:16.250 --> 00:02:17.820
A couple of days before the
hackathon, as you said, Paul

00:02:17.820 --> 00:02:22.230
Kinlan and I sat down with the
documentation and started

00:02:22.230 --> 00:02:23.030
hacking away.

00:02:23.030 --> 00:02:23.480
PETE LEPAGE: All right.

00:02:23.480 --> 00:02:27.560
Well, so, we recorded some video
of us playing with this

00:02:27.560 --> 00:02:29.960
thing a couple days before
the Hangout.

00:02:29.960 --> 00:02:33.150
Let's take a quick look at
that video right now.

00:02:33.150 --> 00:02:34.400
All right.

00:02:39.180 --> 00:02:41.420
So we didn't put any audio into
the video, but you can

00:02:41.420 --> 00:02:42.950
see that drone flying around.

00:02:42.950 --> 00:02:46.750
Now, you hooked it up via a
gamepad, so the gamepad is

00:02:46.750 --> 00:02:48.700
actually controlling
the drone.

00:02:48.700 --> 00:02:53.400
The gamepad is hooked into
Chrome, and then Chrome's

00:02:53.400 --> 00:02:56.690
connected via Wi-Fi to the
drone, and the drone goes

00:02:56.690 --> 00:02:57.440
flying around.

00:02:57.440 --> 00:02:58.780
Isn't that--

00:02:58.780 --> 00:03:00.010
PAUL LEWIS: That's
pretty much it.

00:03:00.010 --> 00:03:02.030
And what we're going to do is
we'll step through and talk

00:03:02.030 --> 00:03:03.625
through each of those
bits today.

00:03:03.625 --> 00:03:04.040
PETE LEPAGE: All right.

00:03:04.040 --> 00:03:05.190
So we'll take--

00:03:05.190 --> 00:03:08.340
I think the video has just
a little bit more to it.

00:03:08.340 --> 00:03:10.910
We'll take one more quick sec.

00:03:10.910 --> 00:03:12.230
We kind of had a lot of fun.

00:03:12.230 --> 00:03:14.060
We kind of crashed the drone--

00:03:14.060 --> 00:03:14.720
I don't know--

00:03:14.720 --> 00:03:17.780
300 or 400 times.

00:03:17.780 --> 00:03:20.680
We ended up having people
run away from it.

00:03:20.680 --> 00:03:21.890
It was kind of fun.

00:03:21.890 --> 00:03:24.520
And in fact, I think, we hit
each other with it a few times

00:03:24.520 --> 00:03:25.520
accidentally.

00:03:25.520 --> 00:03:30.180
It's pretty easy to fly once
you sort of get the hang of

00:03:30.180 --> 00:03:34.120
it, but it took us a little
bit to get the hang of it.

00:03:34.120 --> 00:03:35.860
So the video is done.

00:03:35.860 --> 00:03:40.270
So let's sort of jump in and
take a look at some of the

00:03:40.270 --> 00:03:41.290
things that went on.

00:03:41.290 --> 00:03:45.510
So do you want to start just
explaining how you started and

00:03:45.510 --> 00:03:47.760
what you were thinking about as
you were working on this?

00:03:47.760 --> 00:03:49.030
PAUL LEWIS: Absolutely.

00:03:49.030 --> 00:03:54.240
So if you still have me on
camera, this is the drone.

00:03:54.240 --> 00:03:55.680
PETE LEPAGE: Yep.

00:03:55.680 --> 00:03:58.930
PAUL LEWIS: This thing is
absolutely brilliant.

00:03:58.930 --> 00:04:01.310
And we had one of those.

00:04:01.310 --> 00:04:04.270
We have a standard gamepad.

00:04:04.270 --> 00:04:08.960
And as we said in the intro,
the gamepad API is what we

00:04:08.960 --> 00:04:11.220
used to get input.

00:04:11.220 --> 00:04:12.860
But actually, we didn't
start with that.

00:04:12.860 --> 00:04:16.970
What we started with was the
SDK and the documentation.

00:04:16.970 --> 00:04:22.550
And the team at Parrot actually
have a PDF and a

00:04:22.550 --> 00:04:26.130
fully-fledged C library that
you can go and look at that

00:04:26.130 --> 00:04:30.500
will explain to you exactly what
you need to communicate

00:04:30.500 --> 00:04:33.310
and how and all the rest
of it to the drone.

00:04:33.310 --> 00:04:35.360
So that's what we
started with.

00:04:35.360 --> 00:04:38.420
So if you want to bring
up my screen.

00:04:38.420 --> 00:04:39.560
PETE LEPAGE: I can do that.

00:04:39.560 --> 00:04:42.430
All right, so we have
your screen up.

00:04:42.430 --> 00:04:43.630
PAUL LEWIS: OK.

00:04:43.630 --> 00:04:47.090
So the first thing we
knew about was the

00:04:47.090 --> 00:04:47.675
fact that there are--

00:04:47.675 --> 00:04:49.150
I have them listed here.

00:04:49.150 --> 00:04:52.500
There are four socket
connections that you can make

00:04:52.500 --> 00:04:52.980
to a drone.

00:04:52.980 --> 00:04:53.980
One is on port 554--

00:04:53.980 --> 00:04:54.650
PETE LEPAGE: OK.

00:04:54.650 --> 00:04:56.140
PAUL LEWIS: --over UDP.

00:04:56.140 --> 00:04:59.160
And I'll talk about what each
of these does in a second,

00:04:59.160 --> 00:05:03.230
5555, 5556, and 5559.

00:05:03.230 --> 00:05:06.820
So we knew these four
ports existed.

00:05:06.820 --> 00:05:10.970
The 5554 is the one that you get
information back from the

00:05:10.970 --> 00:05:12.430
drone using.

00:05:12.430 --> 00:05:14.380
So it will actually
send over UDP.

00:05:14.380 --> 00:05:18.780
It will send you messages
regarding its altitude, its

00:05:18.780 --> 00:05:23.490
velocity, it's battery levels,
all sorts of information that

00:05:23.490 --> 00:05:25.140
you can actually just get
straight back from this thing.

00:05:25.140 --> 00:05:28.420
Because this thing has got
really a lot of sensors on it.

00:05:28.420 --> 00:05:31.410
It actually gathers a lot
of information for you.

00:05:31.410 --> 00:05:32.810
So that's how you
get that back.

00:05:32.810 --> 00:05:37.490
So you get packets on 5554.

00:05:37.490 --> 00:05:40.870
5555 is this TCP channel where
it actually streams across

00:05:40.870 --> 00:05:43.870
H.264 video.

00:05:43.870 --> 00:05:45.540
So again, you can connect
up to that.

00:05:45.540 --> 00:05:48.020
As soon as you connect to it,
it starts sending you video

00:05:48.020 --> 00:05:48.810
information.

00:05:48.810 --> 00:05:50.410
Now, we actually haven't
implemented it.

00:05:50.410 --> 00:05:54.030
I should say about this code,
not only is it on the GitHub

00:05:54.030 --> 00:06:00.330
samples, but it is not, shall
we say, a fully fledged

00:06:00.330 --> 00:06:01.875
covers-all-angles API.

00:06:01.875 --> 00:06:04.520
Certainly, it was more of a--
as you said, we did this at

00:06:04.520 --> 00:06:05.960
the hackathon as a
proof of concept.

00:06:05.960 --> 00:06:08.170
We wanted to actually see how
easy it was to get the

00:06:08.170 --> 00:06:10.890
communication going and
get the thing flying.

00:06:10.890 --> 00:06:15.430
But it's not-- as I say, it's
not a replacement for anything

00:06:15.430 --> 00:06:19.120
that we've currently got,
which is a lot.

00:06:19.120 --> 00:06:22.530
So 5555 is the video.

00:06:22.530 --> 00:06:26.730
5556 is what I consider to be
a really interesting one.

00:06:26.730 --> 00:06:30.840
This is actually how you send
commands to the drone.

00:06:30.840 --> 00:06:34.570
Now, the drone itself abstracts
away quite a lot

00:06:34.570 --> 00:06:38.930
of-- well, an awful lot of the
hard work, judging from what I

00:06:38.930 --> 00:06:42.560
understand about flying over
remote-controlled vehicles.

00:06:42.560 --> 00:06:45.910
So, for example, one of the
AT commands, an AT command

00:06:45.910 --> 00:06:47.590
actually used to be used
when you're talking

00:06:47.590 --> 00:06:49.615
to old-school modems.

00:06:49.615 --> 00:06:51.410
So you'd actually send
AT commands.

00:06:51.410 --> 00:06:53.200
We send just stream commands.

00:06:53.200 --> 00:06:56.390
So you send the drone AT
commands, one of which will be

00:06:56.390 --> 00:06:58.460
"takeoff, and it will
just take off and

00:06:58.460 --> 00:07:00.160
hover waiting for you.

00:07:00.160 --> 00:07:03.410
Another one is "land." Again,
we'll step through some of

00:07:03.410 --> 00:07:05.330
these in a little more detail.

00:07:05.330 --> 00:07:09.160
So you actually construct all
these AT commands per frame

00:07:09.160 --> 00:07:12.570
that you want to send
to the drone.

00:07:12.570 --> 00:07:14.490
And then the last one is the
command one, which you can see

00:07:14.490 --> 00:07:17.000
at the bottom of my screen,
which is on 5559.

00:07:17.000 --> 00:07:19.160
And I'll just scroll up.

00:07:19.160 --> 00:07:25.370
5559, and that is used for sort
of admin controls, admin

00:07:25.370 --> 00:07:26.830
commands that you
need to send.

00:07:26.830 --> 00:07:29.480
Just because you're potentially
sending an awful

00:07:29.480 --> 00:07:32.580
lot of information, as I
understand it anyway, over the

00:07:32.580 --> 00:07:37.190
AT command on 5556, there is
a chance that you could be

00:07:37.190 --> 00:07:40.090
losing packets because
this is over TCP.

00:07:40.090 --> 00:07:44.605
So if you're not familiar with
the differences, basically TCP

00:07:44.605 --> 00:07:45.690
is guaranteed delivery.

00:07:45.690 --> 00:07:46.490
UPD is not.

00:07:46.490 --> 00:07:51.680
So we send a lot, and so there's
a possibility that

00:07:51.680 --> 00:07:54.300
certain command packets
could get lost.

00:07:54.300 --> 00:07:56.480
So the command one at the bottom
there, that 5559, is

00:07:56.480 --> 00:07:59.810
like a separate channel on which
to have a discussion

00:07:59.810 --> 00:08:02.040
with the drone and say certain
things, like emergency

00:08:02.040 --> 00:08:05.380
cutouts, I believe, on that
channel, which you kind of

00:08:05.380 --> 00:08:07.545
want, really, if it's going
to be an emergency.

00:08:07.545 --> 00:08:07.830
PETE LEPAGE: Yeah.

00:08:07.830 --> 00:08:11.260
It's kind of useful.

00:08:11.260 --> 00:08:13.430
PAUL LEWIS: So those are the
four sockets that we need.

00:08:13.430 --> 00:08:16.750
And if we go down, you'll
see that I've got

00:08:16.750 --> 00:08:20.090
an init in the API.

00:08:20.090 --> 00:08:22.000
And init connects three
of the four.

00:08:22.000 --> 00:08:23.380
As I say, we haven't
done the video one.

00:08:23.380 --> 00:08:28.850
It connects with the AT, the
nav, and the command sockets.

00:08:28.850 --> 00:08:31.200
And that looks a little
bit like this.

00:08:31.200 --> 00:08:34.210
So you've got
chrome.socket.create.

00:08:34.210 --> 00:08:37.150
And in those objects that I had,
you've either got UDP or

00:08:37.150 --> 00:08:40.870
TCP, which is the first
parameter, an unused second

00:08:40.870 --> 00:08:42.320
parameter, and then
the callback.

00:08:42.320 --> 00:08:46.930
Don't forget that all the Chrome
APIs are asynchronous.

00:08:46.930 --> 00:08:51.810
That sends you back soc info
which tells you things like

00:08:51.810 --> 00:08:55.290
the socket ID of the socket
that you just created.

00:08:55.290 --> 00:09:00.000
And that then allows you to
do connects and binds.

00:09:00.000 --> 00:09:01.240
So again, it's one
of these things.

00:09:01.240 --> 00:09:04.010
It's worth looking at the
socket documentation.

00:09:04.010 --> 00:09:07.040
And it's worth spending a bit
of time understanding socket

00:09:07.040 --> 00:09:09.060
communication in general.

00:09:09.060 --> 00:09:14.740
But we have different things
like bind and connect.

00:09:14.740 --> 00:09:16.750
So we do, depending on
what it is need.

00:09:16.750 --> 00:09:19.380
So, for example, when we bind a
socket, that's normally when

00:09:19.380 --> 00:09:21.210
we want to receive
information.

00:09:21.210 --> 00:09:22.720
When we connect, it's
typically when we

00:09:22.720 --> 00:09:23.580
want to send out.

00:09:23.580 --> 00:09:28.820
It's not entirely the same, so
there are subtleties to this.

00:09:28.820 --> 00:09:32.770
So what we do is we go through
and create those sockets.

00:09:32.770 --> 00:09:36.240
And you'll see when we do that,
we just have a little

00:09:36.240 --> 00:09:39.050
callback that says when
we're connected.

00:09:39.050 --> 00:09:43.430
If we've got nothing left to
connect, then we start

00:09:43.430 --> 00:09:45.450
actually communicating
with the drone,

00:09:45.450 --> 00:09:47.000
which is always nice.

00:09:47.000 --> 00:09:50.530
2 we send the KeepAlive command
roughly every second,

00:09:50.530 --> 00:09:52.590
which basically says to
the drone, I'm here.

00:09:52.590 --> 00:09:53.464
I'm here.

00:09:53.464 --> 00:09:56.040
I'm here.

00:09:56.040 --> 00:09:59.590
If you don't do that, after 2
seconds, the drone determines

00:09:59.590 --> 00:10:01.170
that you are no longer around.

00:10:01.170 --> 00:10:03.810
And I think it goes into hove
mode waiting for you to

00:10:03.810 --> 00:10:04.530
actually reconnect.

00:10:04.530 --> 00:10:06.620
So it's good to send
those KeepAlives.

00:10:06.620 --> 00:10:08.500
FlatTrim, that says--

00:10:08.500 --> 00:10:09.810
because this is the
first thing we do

00:10:09.810 --> 00:10:10.680
before we take off.

00:10:10.680 --> 00:10:15.080
We say to the drone, you're
on horizontal ground.

00:10:15.080 --> 00:10:16.910
You need to calibrate as though
this was flat ground.

00:10:16.910 --> 00:10:19.170
Because one of the many
things it does is it

00:10:19.170 --> 00:10:20.670
keeps itself level.

00:10:20.670 --> 00:10:23.720
So the FlatTrim is used for that
to actually work out what

00:10:23.720 --> 00:10:27.110
level and medium it
is, I suppose.

00:10:27.110 --> 00:10:28.730
Sensitivity.

00:10:28.730 --> 00:10:30.050
You can set the sensitivity.

00:10:30.050 --> 00:10:32.490
So when you're actually flying
this thing, how sensitive it

00:10:32.490 --> 00:10:35.660
is, I actually have it set quite
sensitive, which may

00:10:35.660 --> 00:10:39.710
explain how difficult I made
it for you to fly, Pete.

00:10:39.710 --> 00:10:42.200
PETE LEPAGE: Well, I
wasn't that bad.

00:10:42.200 --> 00:10:44.550
It was more the--

00:10:44.550 --> 00:10:44.970
I don't know.

00:10:44.970 --> 00:10:47.260
The first couple of times I
think we were trying this, it

00:10:47.260 --> 00:10:49.990
was kind of fun because I think
for both you and I, we

00:10:49.990 --> 00:10:52.030
were trying it for
the first time.

00:10:52.030 --> 00:10:56.200
We had never done it before,
and we were going on this

00:10:56.200 --> 00:10:59.880
sucker in a kind of a slightly
windy situation.

00:10:59.880 --> 00:11:03.990
So we were in an interesting
place

00:11:03.990 --> 00:11:06.740
where, hey, were outside--

00:11:06.740 --> 00:11:09.190
because we didn't want to try it
inside because when we did

00:11:09.190 --> 00:11:11.950
try it inside, we ended up
hitting a few walls.

00:11:11.950 --> 00:11:13.460
Oops.

00:11:13.460 --> 00:11:16.900
And then a few times, once we
got outside, it was good, but

00:11:16.900 --> 00:11:18.490
we ended up having people
running around.

00:11:18.490 --> 00:11:20.130
So it made for a kind
of fun time.

00:11:20.130 --> 00:11:21.990
PAUL LEWIS: It certainly did.

00:11:21.990 --> 00:11:25.720
So this is all by way of
bootstrap at this point.

00:11:25.720 --> 00:11:28.320
So we've opened up our
socket connections.

00:11:28.320 --> 00:11:29.460
We've sent a few commands.

00:11:29.460 --> 00:11:31.980
And I can dig into those
commands in a second, but the

00:11:31.980 --> 00:11:36.480
main thing to know is we
then go into this loop.

00:11:36.480 --> 00:11:39.830
And this is the bit that is
the heart and soul of

00:11:39.830 --> 00:11:41.100
what's going on.

00:11:41.100 --> 00:11:45.110
So let me drop down to loop.

00:11:45.110 --> 00:11:47.316
Where is it now?

00:11:47.316 --> 00:11:49.030
Loop.

00:11:49.030 --> 00:11:53.320
OK, so you'll see that we've got
these drone commands, and

00:11:53.320 --> 00:11:56.330
I will show you what one
of those actually is.

00:11:56.330 --> 00:11:57.980
The first parameter is
the actual command.

00:11:57.980 --> 00:12:00.230
Now, if you look inside the
documentation, you'll see

00:12:00.230 --> 00:12:05.390
that, typically, the commands
are like AT* and then a

00:12:05.390 --> 00:12:06.280
specific command.

00:12:06.280 --> 00:12:08.280
And one of those specific
commands is this PCMD_MAG.

00:12:11.840 --> 00:12:15.090
And then normally there is
a comma-separated list of

00:12:15.090 --> 00:12:17.430
parameters after which,
actually, what you're

00:12:17.430 --> 00:12:18.310
configuring.

00:12:18.310 --> 00:12:22.840
So in this case, the PCMD_MAG
is for telling the drone how

00:12:22.840 --> 00:12:25.620
to fly, so it's left
and right tilt.

00:12:25.620 --> 00:12:27.270
So here's the thing.

00:12:27.270 --> 00:12:29.200
If you're looking at the drone,
it's got left and right

00:12:29.200 --> 00:12:33.350
tilt, front and back tilt, which
is it actually flying.

00:12:33.350 --> 00:12:35.530
Then there is vertical speed,
which is kind of up and down

00:12:35.530 --> 00:12:36.690
its elevation, and then there's

00:12:36.690 --> 00:12:38.580
rotation, the angular speed.

00:12:38.580 --> 00:12:40.940
So you see, all four
of those things are

00:12:40.940 --> 00:12:41.960
actually captured here.

00:12:41.960 --> 00:12:43.350
PETE LEPAGE: Right.

00:12:43.350 --> 00:12:46.830
Now, the one thing, and you
probably are going to go into

00:12:46.830 --> 00:12:51.190
this in a sec, but I saw that
float 32 to int 32.

00:12:51.190 --> 00:12:54.740
And I'm like, why the heck
would you convert

00:12:54.740 --> 00:12:57.300
a float to an int?

00:12:57.300 --> 00:13:01.220
And why are you doing it
yourself instead of just using

00:13:01.220 --> 00:13:03.290
one of the built-in functions?

00:13:03.290 --> 00:13:09.310
Like why not just do floor or
ceiling or something like that

00:13:09.310 --> 00:13:13.130
where we can get a much
more manageable value?

00:13:13.130 --> 00:13:18.590
PAUL LEWIS: So for whatever
reason, the drone likes to

00:13:18.590 --> 00:13:20.660
receive float values
as integers.

00:13:24.270 --> 00:13:28.190
So say, for example, the left
and right tilt, so that's the

00:13:28.190 --> 00:13:30.370
sort of flying left and right.

00:13:30.370 --> 00:13:32.450
You get a number between
minus 1 and 1.

00:13:32.450 --> 00:13:34.700
That's what you've got
to send the drone.

00:13:34.700 --> 00:13:38.390
But bit-wise, that comes out
as a completely different

00:13:38.390 --> 00:13:39.750
number as an integer.

00:13:39.750 --> 00:13:43.970
So the actual bits for a 32-bit
flow, that make up

00:13:43.970 --> 00:13:46.760
minus 1 look very different to
the bits that would make up an

00:13:46.760 --> 00:13:49.060
integer at minus 1, as
I understand it.

00:13:49.060 --> 00:13:52.700
So we wrote the Util.

00:13:52.700 --> 00:13:55.330
So DRONE.Util.float32ToInt32,
which

00:13:55.330 --> 00:13:57.530
converts at the bit level.

00:13:57.530 --> 00:14:00.090
And what we do is actually
very useful if you

00:14:00.090 --> 00:14:01.550
ever need to do it.

00:14:01.550 --> 00:14:05.631
The array buffer is your
best friend here.

00:14:05.631 --> 00:14:08.890
And so we create a 4 byte,
so that's 32 bits.

00:14:08.890 --> 00:14:11.870
We create a 4-byte ArrayBuffer
and then a

00:14:11.870 --> 00:14:14.180
DataView on that buffer.

00:14:14.180 --> 00:14:19.880
And then we set a 32-bit float
on our buffer with a value,

00:14:19.880 --> 00:14:23.660
and then we read back
out an integer 32.

00:14:23.660 --> 00:14:26.295
So it's definitely worth looking
into DataViews and

00:14:26.295 --> 00:14:28.330
ArrayBuffers if you've ever
come across them.

00:14:28.330 --> 00:14:29.950
The ArrayBuffer is sort of--

00:14:29.950 --> 00:14:31.380
it's almost data agnostic.

00:14:31.380 --> 00:14:32.290
It doesn't really care.

00:14:32.290 --> 00:14:34.560
It's just going to store
bits and bytes.

00:14:34.560 --> 00:14:36.020
It doesn't really mind.

00:14:36.020 --> 00:14:37.700
It's the views that you
attach on the top.

00:14:37.700 --> 00:14:43.830
So DataView is good when you
need to push in and pull out

00:14:43.830 --> 00:14:47.160
data of different types like
unsigned integers, integers,

00:14:47.160 --> 00:14:51.490
floats, some of them 16
bit, 8 bit, 32 bit.

00:14:51.490 --> 00:14:53.390
So it gives you all these
different ways of actually

00:14:53.390 --> 00:14:56.200
accessing the underlying
bits and bytes.

00:14:56.200 --> 00:14:59.740
So that's how we actually do
that conversion from a 32-bit

00:14:59.740 --> 00:15:02.990
float to a 32-bit integer.

00:15:02.990 --> 00:15:03.780
So that's why.

00:15:03.780 --> 00:15:05.980
It's just simply because that's
how the drone likes to

00:15:05.980 --> 00:15:07.550
receive its data.

00:15:07.550 --> 00:15:10.300
How it then actually deals with
it on the other side, I'm

00:15:10.300 --> 00:15:11.550
not so sure.

00:15:13.800 --> 00:15:16.850
So one of things we're doing,
is we've got these numbers

00:15:16.850 --> 00:15:18.910
that we're converting, the left
and right tilt, the front

00:15:18.910 --> 00:15:22.030
and back, the vertical speed
and the angular speed.

00:15:22.030 --> 00:15:23.893
And we're converting those
or wrapping them

00:15:23.893 --> 00:15:26.400
up in a drone command.

00:15:26.400 --> 00:15:28.310
So let me show you a drone
command, which

00:15:28.310 --> 00:15:32.070
is remarkably simple.

00:15:32.070 --> 00:15:35.070
We create a command with the
actual command string, which

00:15:35.070 --> 00:15:43.810
in that case was PCMD_MAG and
then the actual parts of the

00:15:43.810 --> 00:15:45.570
message that we want to put
after the command, so the

00:15:45.570 --> 00:15:47.720
actual values themselves.

00:15:47.720 --> 00:15:52.011
So you'll see in this case,
this has one, two, three,

00:15:52.011 --> 00:15:54.940
four, five, six, seven.

00:15:54.940 --> 00:15:56.300
I'm not using six and seven
as you can see.

00:15:56.300 --> 00:15:57.790
I've just filled them
with zeroes for now.

00:16:00.290 --> 00:16:03.650
And then whenever we actually
write it out to a string,

00:16:03.650 --> 00:16:06.730
you'll see, I mentioned at the
start, we have this AT*

00:16:06.730 --> 00:16:07.515
followed by the command.

00:16:07.515 --> 00:16:08.380
PETE LEPAGE: Right.

00:16:08.380 --> 00:16:09.540
PAUL LEWIS: That's exactly
what we're doing here.

00:16:09.540 --> 00:16:13.000
When we say give me this drone
command in a string format, it

00:16:13.000 --> 00:16:16.920
converts it and says AT command,
AT*, followed by the

00:16:16.920 --> 00:16:18.890
actual command.

00:16:18.890 --> 00:16:22.380
And then you'll see this
DRONE.Sequence.next.

00:16:22.380 --> 00:16:29.190
Every message that you send
to the drone increases

00:16:29.190 --> 00:16:31.070
incrementally, increases
by one every time.

00:16:31.070 --> 00:16:32.860
That's a better way
of saying it.

00:16:32.860 --> 00:16:34.330
So we start off at one.

00:16:34.330 --> 00:16:37.390
The first command you send has
a sequence number of one, and

00:16:37.390 --> 00:16:38.660
it just goes up from there.

00:16:38.660 --> 00:16:40.980
So we just keep a track on that
internally so you don't

00:16:40.980 --> 00:16:45.030
have to remember which number
you're on and so forth.

00:16:45.030 --> 00:16:48.010
And then we just simply join
together with commas the

00:16:48.010 --> 00:16:53.212
different parts of
the command.

00:16:53.212 --> 00:16:55.520
PETE LEPAGE: So I just want
to interrupt for one sec.

00:16:55.520 --> 00:16:59.250
As people are watching this, if
you have questions, you can

00:16:59.250 --> 00:17:02.750
go post your questions to the
Google Moderator queue.

00:17:02.750 --> 00:17:17.079
If you go to
http://goo.gl/gHCgH.

00:17:17.079 --> 00:17:19.260
I'll get that posted on
screen here in a sec.

00:17:19.260 --> 00:17:24.140
But again, that's small g,
capital H, capital C, small g,

00:17:24.140 --> 00:17:25.542
Capital H.

00:17:25.542 --> 00:17:27.160
PAUL LEWIS: Awesome.

00:17:27.160 --> 00:17:30.270
So we've got this command that
actually tells the drone where

00:17:30.270 --> 00:17:33.191
to fly and so forth, but for the
eagle eyed among you, you

00:17:33.191 --> 00:17:34.770
will have realized we've
not actually told the

00:17:34.770 --> 00:17:36.750
drone to take off.

00:17:36.750 --> 00:17:38.960
Luckily, that's the next one.

00:17:38.960 --> 00:17:40.430
And that simply just
takes a number.

00:17:40.430 --> 00:17:43.670
So the commander here is ref
and it takes a number.

00:17:43.670 --> 00:17:44.610
There are two numbers--

00:17:44.610 --> 00:17:46.580
takeoff and land.

00:17:46.580 --> 00:17:49.400
So they're just stored in
certain, I believe, open

00:17:49.400 --> 00:17:50.410
constants up here.

00:17:50.410 --> 00:17:53.742
I have take off and land.

00:17:53.742 --> 00:17:56.270
It's two magic numbers.

00:17:56.270 --> 00:18:01.060
So let me see now.

00:18:01.060 --> 00:18:02.990
Take off and land.

00:18:02.990 --> 00:18:05.490
So it's interesting then
that you're in

00:18:05.490 --> 00:18:06.930
this situation where--

00:18:06.930 --> 00:18:08.540
oh, it's also worth saying
these numbers

00:18:08.540 --> 00:18:09.900
are absolute values.

00:18:09.900 --> 00:18:12.630
So one of the things about
sending these packets

00:18:12.630 --> 00:18:15.930
repeatedly to the drone is you
might be thinking, well, what

00:18:15.930 --> 00:18:17.180
if packets get dropped?

00:18:20.220 --> 00:18:21.790
How is it going to
cope with that?

00:18:21.790 --> 00:18:23.160
So there's a couple
of things here.

00:18:23.160 --> 00:18:26.570
One is that we lop about
every 30 milliseconds.

00:18:26.570 --> 00:18:29.930
And again, the SDK recommends
roughly that rate, that you

00:18:29.930 --> 00:18:34.360
send these commands roughly
that often.

00:18:34.360 --> 00:18:35.750
But these values are absolute.

00:18:35.750 --> 00:18:39.850
So for example, the tilt is a
value between minus 1 and 1.

00:18:39.850 --> 00:18:43.000
The drone seemingly doesn't
expect you to interplay

00:18:43.000 --> 00:18:44.480
between numbers or anything
like that.

00:18:44.480 --> 00:18:46.880
If you say 0, it's just
going to stop there.

00:18:46.880 --> 00:18:49.220
If you say minus 1, it's
going to go off.

00:18:49.220 --> 00:18:52.240
And as soon as you say 0 again,
it's going to stop.

00:18:52.240 --> 00:18:55.310
So it's not like you have to
manage the transition between

00:18:55.310 --> 00:18:56.280
those numbers.

00:18:56.280 --> 00:18:59.480
So in that sense, we're sending
more than enough

00:18:59.480 --> 00:19:03.595
packets to just get through to
the drone to say, here's how I

00:19:03.595 --> 00:19:05.140
want you to behave right now.

00:19:05.140 --> 00:19:07.020
And certainly in our
experience it's

00:19:07.020 --> 00:19:08.270
worked out just fine.

00:19:10.940 --> 00:19:12.085
PETE LEPAGE: All right.

00:19:12.085 --> 00:19:15.880
PAUL LEWIS: And then let's look
at the actual action.

00:19:15.880 --> 00:19:19.160
So we expose through this API
a number of actions that you

00:19:19.160 --> 00:19:20.700
can actually do--

00:19:20.700 --> 00:19:25.310
take off, land, raise and lower
the drone, tilt left and

00:19:25.310 --> 00:19:26.120
right, which we talked about.

00:19:26.120 --> 00:19:28.260
So there's the flying ones,
the tilting ones.

00:19:28.260 --> 00:19:30.910
Then there is rotation, and
then there's an all stop,

00:19:30.910 --> 00:19:36.240
which basically just resets
all those values to zero.

00:19:36.240 --> 00:19:39.140
You can see they're all set on
this status object, which we

00:19:39.140 --> 00:19:42.290
use when we're actually pulling
out those values.

00:19:42.290 --> 00:19:46.310
So we have this single source of
truth internally to the API

00:19:46.310 --> 00:19:50.400
as to what we think the drone
should be doing, OK?

00:19:50.400 --> 00:19:53.160
PETE LEPAGE: All right.

00:19:53.160 --> 00:19:56.120
PAUL LEWIS: So these
all get exposed.

00:19:56.120 --> 00:19:59.190
And that's really all there is
to it in terms of actually

00:19:59.190 --> 00:20:01.570
sending out information.

00:20:01.570 --> 00:20:03.920
We do pick up the nav data.

00:20:03.920 --> 00:20:06.360
Let me just find that.

00:20:06.360 --> 00:20:07.930
Now, I don't pick it
up all that often.

00:20:07.930 --> 00:20:13.500
It's something I like to do with
mine is to actually pull

00:20:13.500 --> 00:20:17.370
in enough data and to use it to
visualize what's going on a

00:20:17.370 --> 00:20:18.100
little bit more.

00:20:18.100 --> 00:20:20.505
But what we do is, we read
from that nav socket.

00:20:20.505 --> 00:20:24.980
And if you remember back at the
start, I said 5554 is the

00:20:24.980 --> 00:20:27.280
socket on which the drone
is going to send its

00:20:27.280 --> 00:20:29.040
information to you.

00:20:29.040 --> 00:20:30.580
So we read from that.

00:20:30.580 --> 00:20:33.300
And if we have data, we just
run it through this

00:20:33.300 --> 00:20:36.060
DRONE.NavData.parse.

00:20:36.060 --> 00:20:39.540
So this just comes back as
an array buffer, and it

00:20:39.540 --> 00:20:42.060
contains some data.

00:20:42.060 --> 00:20:44.760
And the data it contains,
as I said, is things

00:20:44.760 --> 00:20:46.480
like you can see here.

00:20:46.480 --> 00:20:51.980
We get things like battery
percentage, its angles, its

00:20:51.980 --> 00:20:53.580
altitude, and its velocities.

00:20:53.580 --> 00:20:56.530
And what we do is this array
buffer that comes back in

00:20:56.530 --> 00:21:02.460
through the socket, we attach
one of those DataViews again

00:21:02.460 --> 00:21:05.810
on to that data so we could
start pulling things out.

00:21:05.810 --> 00:21:09.390
And then at very known positions
from within that

00:21:09.390 --> 00:21:12.160
array buffer, we can start
pulling numbers.

00:21:12.160 --> 00:21:17.800
So the battery is, for example,
I think at the 24th

00:21:17.800 --> 00:21:25.710
byte or thereabouts, maybe
slightly further on.

00:21:25.710 --> 00:21:28.570
So as I say, the documentation
has all this listed for you as

00:21:28.570 --> 00:21:29.440
does the source code.

00:21:29.440 --> 00:21:32.170
So it's more a case of flushing
out and saying, OK, I

00:21:32.170 --> 00:21:34.040
got this data back
from the drone.

00:21:34.040 --> 00:21:35.890
It's just this raw data.

00:21:35.890 --> 00:21:38.670
Now, I actually need to
specifically attach on a

00:21:38.670 --> 00:21:41.510
DataView and sort of pull the
numbers out manually.

00:21:41.510 --> 00:21:46.090
And then obviously, we wrap
those back up as an object and

00:21:46.090 --> 00:21:49.650
return those if needed.

00:21:49.650 --> 00:21:52.340
So you might think it's actually
more complicated to

00:21:52.340 --> 00:21:54.280
talk to a drone.

00:21:54.280 --> 00:21:55.420
It's actually not.

00:21:55.420 --> 00:21:58.750
Chrome does a great job of
abstracting away this socket

00:21:58.750 --> 00:22:02.030
read and write, stuff
that you need to do.

00:22:02.030 --> 00:22:04.150
And so it's really just a case
of opening the socket,

00:22:04.150 --> 00:22:06.360
following the instructions,
and start

00:22:06.360 --> 00:22:09.340
reading and writing data.

00:22:09.340 --> 00:22:12.220
So then the other side of this,
unless you've got any

00:22:12.220 --> 00:22:12.730
questions, Pete.

00:22:12.730 --> 00:22:14.210
PETE LEPAGE: No.

00:22:14.210 --> 00:22:15.200
I'll let you keep going.

00:22:15.200 --> 00:22:16.240
PAUL LEWIS: All right.

00:22:16.240 --> 00:22:16.500
Cool.

00:22:16.500 --> 00:22:20.475
So now, we've got this drone
API, and we wanted to wrap it

00:22:20.475 --> 00:22:23.540
up inside a Chrome app
and put a gamepad API

00:22:23.540 --> 00:22:24.960
on it, and so forth.

00:22:24.960 --> 00:22:28.700
So one of the first things I did
was to get one of these.

00:22:28.700 --> 00:22:29.390
PETE LEPAGE: Right.

00:22:29.390 --> 00:22:31.590
So the gamepad controller.

00:22:31.590 --> 00:22:34.740
PAUL LEWIS: Yep, and drop
that into Chrome.

00:22:34.740 --> 00:22:38.180
And then on HTML5rocks--

00:22:38.180 --> 00:22:43.210
and we can put this link up in
a little bit-- we have these

00:22:43.210 --> 00:22:45.070
tutorials on the gamepad.

00:22:45.070 --> 00:22:48.010
Because one of the things about
the gamepad API is it's

00:22:48.010 --> 00:22:49.790
gamepad agnostic.

00:22:49.790 --> 00:22:52.190
And that means it can be quite
interesting to work with,

00:22:52.190 --> 00:22:55.990
because it doesn't say, oh,
this is the X button the

00:22:55.990 --> 00:22:57.040
square button.

00:22:57.040 --> 00:22:59.480
It just says this button one or
button two, button three,

00:22:59.480 --> 00:23:01.090
button four.

00:23:01.090 --> 00:23:04.560
So when you actually know the
pad you're dealing with, often

00:23:04.560 --> 00:23:07.910
it can be good to abstract
that away a little bit.

00:23:07.910 --> 00:23:10.410
And that's exactly what this
code does, and it's on

00:23:10.410 --> 00:23:11.490
HTML5rocks.

00:23:11.490 --> 00:23:13.020
It's definitely worth reading
through because it's a really

00:23:13.020 --> 00:23:15.510
good introduction to
the gamepad API.

00:23:15.510 --> 00:23:19.270
But you'll see right at the
bottom of here, I've wired it

00:23:19.270 --> 00:23:21.810
up so that I have this
DRONE.Gamepad.

00:23:21.810 --> 00:23:27.490
So I abstracted the gamepad a
little bit further and have

00:23:27.490 --> 00:23:28.740
this updateButton
and updateAxis.

00:23:28.740 --> 00:23:34.120
So every button on the gamepad
and every axis for the sticks,

00:23:34.120 --> 00:23:38.306
the sticks over here, they get
sent through to me through

00:23:38.306 --> 00:23:38.690
this update button and--

00:23:38.690 --> 00:23:42.891
PETE LEPAGE: So you're listening
for each of those.

00:23:42.891 --> 00:23:45.380
PAUL LEWIS: This is actually
done through polling.

00:23:45.380 --> 00:23:49.710
So there aren't events
for the gamepad API.

00:23:49.710 --> 00:23:52.430
It's a polling API.

00:23:52.430 --> 00:23:56.501
So yeah, you send a request from
the gamepad, OK, button-1

00:23:56.501 --> 00:23:58.900
or button-0, what's its
current status?

00:23:58.900 --> 00:24:00.090
So that gets sent through.

00:24:00.090 --> 00:24:03.230
Now that, curiously enough,
actually fits with our model

00:24:03.230 --> 00:24:06.260
because we're going to be
sending data to the drone very

00:24:06.260 --> 00:24:09.240
often as well.

00:24:09.240 --> 00:24:10.390
We know we're polling
the gamepad.

00:24:10.390 --> 00:24:13.290
We're getting the latest value
from the gamepad, and we send

00:24:13.290 --> 00:24:14.510
that through to the drone.

00:24:14.510 --> 00:24:16.250
We pipe it through the
API, but we send that

00:24:16.250 --> 00:24:18.330
through to the drone.

00:24:18.330 --> 00:24:21.400
So let me just fire up.

00:24:21.400 --> 00:24:27.940
I believe it should be in
the drone's gamepad API.

00:24:27.940 --> 00:24:33.070
So you can see in the
updateButton and updateAxis,

00:24:33.070 --> 00:24:36.390
we have a little bit going on.

00:24:36.390 --> 00:24:37.590
Let's talk about the
updateButton.

00:24:37.590 --> 00:24:42.500
So updateButton, that gets
called whenever I press--

00:24:42.500 --> 00:24:46.150
or, in fact, it gets called
several times a second.

00:24:46.150 --> 00:24:49.410
All I'm looking for is whether
the value is 1, so press down.

00:24:49.410 --> 00:24:51.830
Now, if it's the right shoulder
button, you'll see

00:24:51.830 --> 00:24:54.980
I'm telling the drone
to take off.

00:24:54.980 --> 00:24:56.970
If it's the left shoulder
button, land.

00:24:56.970 --> 00:24:59.140
And the select button on
here is the all stop.

00:24:59.140 --> 00:25:00.480
It's the one that actually
says all the

00:25:00.480 --> 00:25:01.900
numbers, go back to zero.

00:25:01.900 --> 00:25:04.880
PETE LEPAGE: So one of the
things that, as you were

00:25:04.880 --> 00:25:07.010
talking about this and telling
me about this originally, the

00:25:07.010 --> 00:25:11.300
question I had is, so are you
using RequestAnimationFrame to

00:25:11.300 --> 00:25:14.320
do these loops, or are you
doing a setTimeout?

00:25:14.320 --> 00:25:19.020
PAUL LEWIS: So we are using
the setTimeout, because

00:25:19.020 --> 00:25:22.010
RequestAnimationFrame would drop
to one frame per second

00:25:22.010 --> 00:25:27.190
if the tab or window wasn't
actually focused.

00:25:27.190 --> 00:25:30.890
In the Chrome apps
situation, it's

00:25:30.890 --> 00:25:32.010
possibly slightly different.

00:25:32.010 --> 00:25:34.950
I would need to do a double
check, but we really want that

00:25:34.950 --> 00:25:36.760
data to be sent in any case.

00:25:36.760 --> 00:25:38.760
And it's not visual
updates that we're

00:25:38.760 --> 00:25:40.190
doing to the browser.

00:25:40.190 --> 00:25:44.680
So it's probably a suitable
situation in which to use the

00:25:44.680 --> 00:25:45.180
setTimeout.

00:25:45.180 --> 00:25:50.230
I think at the bottom of the
loop there, you'll see

00:25:50.230 --> 00:25:54.520
setTimeout is what we're doing
for making sure that we call a

00:25:54.520 --> 00:25:58.660
loop whether or not we're
actually in a minimize,

00:25:58.660 --> 00:26:01.730
maximized, or all the apps
on view, on screen.

00:26:04.350 --> 00:26:05.710
All right, so the gamepad.

00:26:05.710 --> 00:26:09.930
One of the interesting things
about the updateAxis, so the

00:26:09.930 --> 00:26:15.950
values here on the axes are
minus 1 to 1 in both the axes,

00:26:15.950 --> 00:26:19.470
which maps extraordinarily well
to our drone, which takes

00:26:19.470 --> 00:26:21.640
values of minus 1 to 1.

00:26:21.640 --> 00:26:24.520
So pretty much all we do is we
take whatever the value is on

00:26:24.520 --> 00:26:26.820
that particular axis, and you'll
see if it's stick-1,

00:26:26.820 --> 00:26:32.470
which is the left one, we just
pass it, tilt left and right,

00:26:32.470 --> 00:26:34.930
and tilt front to back.

00:26:34.930 --> 00:26:37.360
Stick-2 is going to be
used for rotation

00:26:37.360 --> 00:26:40.050
and raise and lower.

00:26:40.050 --> 00:26:41.360
And that's it.

00:26:41.360 --> 00:26:44.880
That's all that is involved
with the gamepad API.

00:26:44.880 --> 00:26:45.950
So there you go.

00:26:45.950 --> 00:26:47.330
That is pretty much it.

00:26:47.330 --> 00:26:50.350
Everything else is just icing
on the cake in terms of

00:26:50.350 --> 00:26:55.360
actually putting together
a standard Chrome app.

00:26:55.360 --> 00:26:57.870
What I should say, I have missed
something, which is the

00:26:57.870 --> 00:27:00.430
permission side of things.

00:27:00.430 --> 00:27:02.760
Socket permissions are required
if you're going to

00:27:02.760 --> 00:27:07.420
actually open and use
socket connection.

00:27:07.420 --> 00:27:13.310
So I've got udp-bind send-to,
and tcp-connect, tcp-listen.

00:27:13.310 --> 00:27:18.870
Those are documented on the
developer.chrome.com/apps

00:27:18.870 --> 00:27:21.440
site, and you could actually
have a look and see what

00:27:21.440 --> 00:27:23.550
permissions you would need if
you were going to build

00:27:23.550 --> 00:27:24.230
something like this.

00:27:24.230 --> 00:27:27.000
So don't forget to add those
socket permissions to your

00:27:27.000 --> 00:27:29.951
manifest if that's what
you're doing, OK?

00:27:29.951 --> 00:27:31.010
PETE LEPAGE: All right.

00:27:31.010 --> 00:27:31.920
Cool.

00:27:31.920 --> 00:27:34.980
Well, we seem to have a few
questions coming in.

00:27:34.980 --> 00:27:40.320
So let's pop over to some
of those questions and

00:27:40.320 --> 00:27:41.390
see what we can do.

00:27:41.390 --> 00:27:44.260
So the first question is
"what's the latency in

00:27:44.260 --> 00:27:47.030
milliseconds for controlling
and getting the center data

00:27:47.030 --> 00:27:48.050
from the drone?

00:27:48.050 --> 00:27:50.880
Is it similar to the Parrot app
on smartphones or is it

00:27:50.880 --> 00:27:53.970
worse?" What was your
experience on that?

00:27:53.970 --> 00:27:59.690
PAUL LEWIS: So we haven't
actually tested this

00:27:59.690 --> 00:28:00.690
comparatively or anything.

00:28:00.690 --> 00:28:05.210
But what we have done is we've
made those socket APIs quite

00:28:05.210 --> 00:28:07.210
close to the metal.

00:28:07.210 --> 00:28:12.990
So they're really quite
performant and really fast.

00:28:12.990 --> 00:28:15.090
And certainly, I've had no
problems getting messages

00:28:15.090 --> 00:28:16.520
through to the drone
or getting messages

00:28:16.520 --> 00:28:18.440
back from the drone.

00:28:18.440 --> 00:28:21.310
So while that's empirical,
it's something that I can

00:28:21.310 --> 00:28:23.195
certainly say for sure
that it's been no

00:28:23.195 --> 00:28:24.190
problem to work with.

00:28:24.190 --> 00:28:24.870
PETE LEPAGE: OK.

00:28:24.870 --> 00:28:29.590
And so we do know that it's not
going to probably be like

00:28:29.590 --> 00:28:33.660
instantaneous, but it should
be pretty quick, and we can

00:28:33.660 --> 00:28:34.960
see how things go.

00:28:34.960 --> 00:28:37.850
That's maybe something we can
have a look at and add to the

00:28:37.850 --> 00:28:39.000
documentation or something
like that.

00:28:39.000 --> 00:28:42.180
PAUL LEWIS: There is worth
bearing in mind that the drone

00:28:42.180 --> 00:28:43.710
creates its own Wi-Fi network.

00:28:43.710 --> 00:28:45.180
I'm not sure if I said
this at the start.

00:28:45.180 --> 00:28:48.240
It creates it's own Wi-Fi
network when you switch it on.

00:28:48.240 --> 00:28:48.970
PETE LEPAGE: Oh, interesting.

00:28:48.970 --> 00:28:49.720
That's right.

00:28:49.720 --> 00:28:55.570
So it's not connecting to your
personal Wi-Fi network or

00:28:55.570 --> 00:28:57.480
anything like that, which would
be really cool, because

00:28:57.480 --> 00:29:00.330
it would mean like here at work,
we could connect it to

00:29:00.330 --> 00:29:02.400
the Google wireless.

00:29:02.400 --> 00:29:05.110
I could be at one end the
building or I could have it

00:29:05.110 --> 00:29:08.330
here, and you could
fly it in London.

00:29:08.330 --> 00:29:10.665
PAUL LEWIS: I'm terrified of
you having a drone army,

00:29:10.665 --> 00:29:12.010
remote drone army.

00:29:12.010 --> 00:29:13.140
That's the stuff
of nightmares.

00:29:13.140 --> 00:29:14.280
PETE LEPAGE: Yeah.

00:29:14.280 --> 00:29:16.090
It would be kind of fun,
though, I gotta say.

00:29:16.090 --> 00:29:17.990
PAUL LEWIS: Yeah, it would.

00:29:17.990 --> 00:29:19.640
So because of that, it's
not going through

00:29:19.640 --> 00:29:20.940
any routers or switches.

00:29:20.940 --> 00:29:24.150
I mean, I'm no networking
hardware expert, but that

00:29:24.150 --> 00:29:27.060
certainly gives you
every chance.

00:29:27.060 --> 00:29:28.210
PETE LEPAGE: Cool.

00:29:28.210 --> 00:29:32.610
And you do have those multiple
channels, so that way, you can

00:29:32.610 --> 00:29:33.610
get stuff back.

00:29:33.610 --> 00:29:36.380
If you're sending a bunch of
commands out to one, you've

00:29:36.380 --> 00:29:40.150
got that emergency channel that
you can get something in.

00:29:40.150 --> 00:29:43.910
Obviously, it's not going to
be perfect for getting the

00:29:43.910 --> 00:29:48.820
stuff back, but it at least
gives you a well thought-out

00:29:48.820 --> 00:29:50.080
API that you can play with.

00:29:50.080 --> 00:29:50.910
PAUL LEWIS: Definitely.

00:29:50.910 --> 00:29:52.070
I mean, this is UDP.

00:29:52.070 --> 00:29:56.060
Like I said, UDP is not
guaranteed delivery by the

00:29:56.060 --> 00:29:57.890
very nature of the protocol.

00:29:57.890 --> 00:30:00.510
But there is a lot of traffic.

00:30:00.510 --> 00:30:04.940
So the other thing to say is all
the messages back from the

00:30:04.940 --> 00:30:06.910
drone are sequenced.

00:30:06.910 --> 00:30:11.740
So if you did manage to get
something out of order, you

00:30:11.740 --> 00:30:13.480
can always check the sequence
number and make sure it's

00:30:13.480 --> 00:30:15.175
greater than the last
one you received.

00:30:15.175 --> 00:30:16.896
PETE LEPAGE: Oh, perfect.

00:30:16.896 --> 00:30:18.130
PAUL LEWIS: Which is as you're
sending an increasing sequence

00:30:18.130 --> 00:30:19.430
number, so is the drone.

00:30:19.430 --> 00:30:22.940
They don't relate, but they
both go up over time.

00:30:22.940 --> 00:30:23.830
PETE LEPAGE: OK.

00:30:23.830 --> 00:30:25.760
Cool.

00:30:25.760 --> 00:30:29.760
So Devon wanted to know how he
could get started with Chrome

00:30:29.760 --> 00:30:32.130
apps or get pointed in
the right direction.

00:30:32.130 --> 00:30:34.050
And Devon, I think that's
a great question.

00:30:34.050 --> 00:30:38.170
And there's a lot of good
resources and watching events

00:30:38.170 --> 00:30:41.220
like this is certainly one place
as we dive into a bunch

00:30:41.220 --> 00:30:44.390
of the APIs and some of the
things that you can do.

00:30:44.390 --> 00:30:48.290
But the best place you can go
is to the Chrome Developer

00:30:48.290 --> 00:30:49.140
documentation.

00:30:49.140 --> 00:30:53.660
So if you go
developer.chrome.com and have

00:30:53.660 --> 00:30:57.510
a look on the right-hand side,
there's a link there that says

00:30:57.510 --> 00:30:58.830
Chrome Apps.

00:30:58.830 --> 00:30:59.880
Click that.

00:30:59.880 --> 00:31:03.120
There's some really great stuff
on how to get started.

00:31:03.120 --> 00:31:06.870
The other good one that's really
interesting and really

00:31:06.870 --> 00:31:11.120
useful is to check out the I/O
talk that was done by Erik and

00:31:11.120 --> 00:31:14.400
Mihai, two of the engineers
on Chrome apps.

00:31:14.400 --> 00:31:20.300
So if you go to google.com/io
and look for the session that

00:31:20.300 --> 00:31:25.210
they did, Eric Kay, Mihai, and
I'm going to mispronounce his

00:31:25.210 --> 00:31:28.425
last name but it starts
with a P.

00:31:28.425 --> 00:31:30.440
PAUL LEWIS: I'm leaving
you hanging here.

00:31:30.440 --> 00:31:31.400
I don't know how to
spell Mihai's

00:31:31.400 --> 00:31:32.320
name either, I'm afraid.

00:31:32.320 --> 00:31:32.870
PETE LEPAGE: Awesome.

00:31:32.870 --> 00:31:33.665
All right.

00:31:33.665 --> 00:31:36.810
PAUL LEWIS: The other thing,
Devon, it's worth watching

00:31:36.810 --> 00:31:39.160
previous sessions
that we've run.

00:31:39.160 --> 00:31:42.000
The first couple of weeks, in
particular, we talked about

00:31:42.000 --> 00:31:47.430
the Hello World and what the
APIs are and CSP, Content

00:31:47.430 --> 00:31:49.600
Security Policy, and all
those kinds of things.

00:31:49.600 --> 00:31:52.180
So definitely worth watching
those as well if you have time

00:31:52.180 --> 00:31:53.240
PETE LEPAGE: Yeah.

00:31:53.240 --> 00:31:55.900
And you can find those
all if you go to

00:31:55.900 --> 00:32:00.600
developers.google.com/live, and
look at the Chrome events.

00:32:00.600 --> 00:32:01.490
We've done now--

00:32:01.490 --> 00:32:05.380
I think this is our fifth or
sixth Hangout that we've done.

00:32:05.380 --> 00:32:07.680
And we're doing them
as a weekly event.

00:32:07.680 --> 00:32:10.130
So next week, we'll do
a different topic.

00:32:10.130 --> 00:32:13.290
We'll dive into some new stuff,
show you guys some

00:32:13.290 --> 00:32:15.770
pretty neat things that
are going on.

00:32:18.390 --> 00:32:21.710
So the next question, I think,
Paul, this one's

00:32:21.710 --> 00:32:23.640
pretty much for you.

00:32:23.640 --> 00:32:26.646
"What sort of line theme
that you are using?"

00:32:26.646 --> 00:32:30.780
PAUL LEWIS: It's Coda doc,
and it's Monokai

00:32:30.780 --> 00:32:31.950
is the color theme.

00:32:31.950 --> 00:32:33.270
I had to double check
that just then.

00:32:33.270 --> 00:32:34.240
I wasn't sure.

00:32:34.240 --> 00:32:36.680
It's been a while since I've
changed it, but yeah, it's

00:32:36.680 --> 00:32:42.750
sort of dark and Monokai
is the color scheme.

00:32:42.750 --> 00:32:42.940
OK.

00:32:42.940 --> 00:32:46.460
PETE LEPAGE: So now, you've
taken this code, you put this

00:32:46.460 --> 00:32:47.390
code up on GitHub.

00:32:47.390 --> 00:32:48.430
Is that right?

00:32:48.430 --> 00:32:50.585
PAUL LEWIS: Yeah, so it's
GitHub.com/googl

00:32:50.585 --> 00:32:51.835
echrome/chrome-app-samples.

00:32:57.550 --> 00:33:00.170
We talked about this over
the last few weeks.

00:33:00.170 --> 00:33:04.300
It's the normal GitHub report
that we mention each week.

00:33:04.300 --> 00:33:06.840
So take a look at that.

00:33:06.840 --> 00:33:10.140
It's under there as
Parrot AR.Drone.

00:33:10.140 --> 00:33:12.060
And the code is commented.

00:33:12.060 --> 00:33:14.570
As I said, it's not going to
cover every angle, but if you

00:33:14.570 --> 00:33:16.870
want to see about how you can
get started with socket

00:33:16.870 --> 00:33:19.900
programming, it should be one
of several good examples.

00:33:19.900 --> 00:33:20.500
PETE LEPAGE: Yeah.

00:33:20.500 --> 00:33:23.740
It's a good, easy way to sort
of way to look at some of

00:33:23.740 --> 00:33:24.500
those things.

00:33:24.500 --> 00:33:28.400
There's lots of devices out
there that do have IP and

00:33:28.400 --> 00:33:30.210
socket-based stuff.

00:33:30.210 --> 00:33:32.990
In that set of samples, there's
ones that will do--

00:33:32.990 --> 00:33:37.140
I think there's a telnet one
if I'm not mistaken, and

00:33:37.140 --> 00:33:39.250
there's a couple others so that
you can go and play with

00:33:39.250 --> 00:33:40.550
those kinds of things.

00:33:40.550 --> 00:33:43.210
And there are other hardware
devices that you can pick up.

00:33:43.210 --> 00:33:45.330
The one that I've been playing
with recently, because I want

00:33:45.330 --> 00:33:48.780
to figure out a way to control
my air conditioners.

00:33:48.780 --> 00:33:50.920
I've got a window air
conditioner here in New York

00:33:50.920 --> 00:33:52.960
City, and it gets a
little hot, and I

00:33:52.960 --> 00:33:54.130
forget to turn it off.

00:33:54.130 --> 00:33:57.200
Got my first electric bill the
other day and oh, yeah.

00:33:57.200 --> 00:34:01.480
Don't forget to turn your
expensive appliances off,

00:34:01.480 --> 00:34:03.390
because they, um--

00:34:03.390 --> 00:34:04.150
not pretty.

00:34:04.150 --> 00:34:08.630
In any event, I want a Chrome
app that will allow me to turn

00:34:08.630 --> 00:34:10.040
this on and off.

00:34:10.040 --> 00:34:14.929
And so there's an IP to infrared
controller that I

00:34:14.929 --> 00:34:17.550
found that will allow me to go
and do that kind of stuff.

00:34:17.550 --> 00:34:21.760
So that's just another example
of some of the hardware

00:34:21.760 --> 00:34:25.610
control that you can do
with Chrome apps.

00:34:25.610 --> 00:34:28.130
So with that, I think that's
about the end of our questions

00:34:28.130 --> 00:34:29.270
for this week.

00:34:29.270 --> 00:34:33.969
We're going to be back next
week with the polls, with

00:34:33.969 --> 00:34:35.290
Renardo, myself.

00:34:35.290 --> 00:34:38.560
And we're going to be diving
into some more stuff about

00:34:38.560 --> 00:34:39.590
Chrome apps.

00:34:39.590 --> 00:34:41.670
So with that, thanks,
everybody.

00:34:41.670 --> 00:34:44.159
I hope you have a wonderful
week, and we'll

00:34:44.159 --> 00:34:45.980
talk to you all soon.

00:34:45.980 --> 00:34:46.275
PAUL LEWIS: Thanks.

00:34:46.275 --> 00:34:47.679
PETE LEPAGE: All righty.

00:34:47.679 --> 00:34:48.160
Bye, everybody.

00:34:48.160 --> 00:34:50.860
PAUL LEWIS: Bye.

00:34:50.860 --> 00:35:04.167
[MUSIC PLAYING]

