WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:06.450
[MUSIC PLAYING]

00:00:06.450 --> 00:00:06.970
Hello.

00:00:06.970 --> 00:00:08.480
My name is Ilia Tulchinsky.

00:00:08.480 --> 00:00:11.070
And I work with Google
Cloud Genomics team.

00:00:11.070 --> 00:00:13.250
You are likely familiar
with standard tools

00:00:13.250 --> 00:00:15.600
for processing genomics
data in BAM files,

00:00:15.600 --> 00:00:17.860
like Picard and GATK.

00:00:17.860 --> 00:00:20.370
Traditionally, they
take files as input.

00:00:20.370 --> 00:00:22.680
But with more genomics
data coming to the cloud,

00:00:22.680 --> 00:00:25.330
we have been working on teaching
these tools to read directly

00:00:25.330 --> 00:00:27.440
from the cloud,
with Global Alliance

00:00:27.440 --> 00:00:29.970
for Genomics and Health APIs.

00:00:29.970 --> 00:00:32.740
Today I'm going to show
you how to build and run

00:00:32.740 --> 00:00:35.832
Picard Tool against a data set
store with Google Genomics.

00:00:35.832 --> 00:00:38.230
All the instructions
can be found

00:00:38.230 --> 00:00:41.750
on our
googlegenomics.readthedocs.org

00:00:41.750 --> 00:00:42.970
website.

00:00:42.970 --> 00:00:44.830
Now these instructions
assume you

00:00:44.830 --> 00:00:47.010
could be starting from scratch.

00:00:47.010 --> 00:00:49.540
And so they walk you
from the very beginning,

00:00:49.540 --> 00:00:51.390
through creating
a Google account--

00:00:51.390 --> 00:00:55.770
if you don't have one-- to
signing up to genomics API--

00:00:55.770 --> 00:01:01.780
if you haven't done so already--
and then creating a project,

00:01:01.780 --> 00:01:05.400
and then finally setting up
credentials, authenticating

00:01:05.400 --> 00:01:08.600
and getting access
to genomic data.

00:01:08.600 --> 00:01:12.520
Now I have already gone through
these steps on my machine.

00:01:12.520 --> 00:01:14.860
But please follow the
instructions on the page

00:01:14.860 --> 00:01:17.520
if you need to do the set up.

00:01:17.520 --> 00:01:20.340
Next step is
downloading and building

00:01:20.340 --> 00:01:22.380
three packages we
need to make Picard

00:01:22.380 --> 00:01:27.880
work with GA4GH APIs-- first of
all, Picard tools themselves.

00:01:27.880 --> 00:01:33.340
Secondly, HGS GDK Genomics
File Access Library,

00:01:33.340 --> 00:01:38.580
where we implemented support
for plug in GA4GH readers.

00:01:38.580 --> 00:01:42.390
And then finally, GATK
Tools Java Library,

00:01:42.390 --> 00:01:44.410
that contains the
bulk of the logic

00:01:44.410 --> 00:01:46.980
for actually working on the API.

00:01:46.980 --> 00:01:49.350
Again, I will skip these
steps, since I have already

00:01:49.350 --> 00:01:51.896
done them on my machine.

00:01:51.896 --> 00:01:55.540
At the end of the process, we
should have the following files

00:01:55.540 --> 00:01:57.640
in our working folder.

00:01:57.640 --> 00:01:59.480
Let's list.

00:01:59.480 --> 00:02:03.230
First of all,
clientsecrets.json file,

00:02:03.230 --> 00:02:07.330
that we got when we
authenticated, and then Picard

00:02:07.330 --> 00:02:12.360
tools themselves, that we
have built with GA4GH support.

00:02:12.360 --> 00:02:15.160
Now let's see if we can
run the basic ViewSam tool

00:02:15.160 --> 00:02:18.952
and have a output
data from the cloud.

00:02:18.952 --> 00:02:21.510
First of all, let's tell
the API which project

00:02:21.510 --> 00:02:22.660
we will be working with.

00:02:28.390 --> 00:02:31.020
We're using G Cloud
tool to tell the APIs

00:02:31.020 --> 00:02:34.090
that we are going to be working
with project called Genomics

00:02:34.090 --> 00:02:36.270
Test Data.

00:02:36.270 --> 00:02:39.240
Now let's find the data
set that we are after.

00:02:43.380 --> 00:02:46.490
We are going to use
G Cloud tool again,

00:02:46.490 --> 00:02:51.000
this time to run Genomics API
command, to list the data sets

00:02:51.000 --> 00:02:53.770
to which we have access,
and then find the data set

00:02:53.770 --> 00:02:55.160
which is called Test Data.

00:02:58.519 --> 00:02:59.310
So we've done that.

00:02:59.310 --> 00:03:02.480
And we have the idea
of our data set.

00:03:02.480 --> 00:03:04.800
Now we are going to
find the read group

00:03:04.800 --> 00:03:07.760
sets that we want to access.

00:03:07.760 --> 00:03:10.230
Read groups sets can
be roughly thought

00:03:10.230 --> 00:03:12.570
as corresponding to BAM files.

00:03:19.940 --> 00:03:23.730
So again, we are running
Genomics API command,

00:03:23.730 --> 00:03:25.830
this time to list
read group sets,

00:03:25.830 --> 00:03:28.920
that are under the dataset that
we found in a previous step.

00:03:32.790 --> 00:03:34.430
Here is our read group set.

00:03:34.430 --> 00:03:36.390
And we have its ID.

00:03:36.390 --> 00:03:37.780
It's here.

00:03:37.780 --> 00:03:40.500
And we are going to need
this for the command lines

00:03:40.500 --> 00:03:44.060
that we are going to
specify for Picard.

00:03:44.060 --> 00:03:46.220
Now I'm going to
paste a command line

00:03:46.220 --> 00:03:47.950
and explain its components.

00:03:47.950 --> 00:03:51.020
But first, let's switch
to the Picard folder.

00:04:04.870 --> 00:04:07.970
So we have the standard
Picard invocation here.

00:04:07.970 --> 00:04:09.640
We are using Picard JAR.

00:04:09.640 --> 00:04:12.410
And we are issuing
the ViewSam command.

00:04:12.410 --> 00:04:17.230
Now let's look at the input
parameter, which is here.

00:04:17.230 --> 00:04:22.820
This url specifies the endpoint
for Google Genomics GA4GH API

00:04:22.820 --> 00:04:23.640
implementation.

00:04:23.640 --> 00:04:26.930
It's right here.

00:04:26.930 --> 00:04:29.600
And then it uses the
idea of the read group

00:04:29.600 --> 00:04:33.904
set that we want to use, that we
found a couple of steps before.

00:04:33.904 --> 00:04:36.070
That's here.

00:04:36.070 --> 00:04:39.950
And finally, we specify the
path to the secrets file

00:04:39.950 --> 00:04:43.170
and that we need for
our authentication.

00:04:43.170 --> 00:04:44.785
OK, let's run this.

00:04:53.350 --> 00:04:54.660
OK, this worked.

00:04:54.660 --> 00:04:56.580
We have run the
standard Picard tool.

00:04:56.580 --> 00:05:01.070
But the input came directly from
the cloud, as opposed to file.

00:05:01.070 --> 00:05:04.665
We can also run a faster
version of the API access

00:05:04.665 --> 00:05:07.120
that uses GRPC technology.

00:05:07.120 --> 00:05:11.040
It is more than 10 times faster.

00:05:11.040 --> 00:05:12.170
Here is a command line.

00:05:12.170 --> 00:05:14.500
And I'm going to
explain as well.

00:05:19.370 --> 00:05:21.280
The command line
is almost the same.

00:05:21.280 --> 00:05:24.530
But you need to add an
[? LAPN ?] JAR to the class

00:05:24.530 --> 00:05:25.830
pass.

00:05:25.830 --> 00:05:26.540
That's here.

00:05:29.290 --> 00:05:30.970
And we have
instructions on which

00:05:30.970 --> 00:05:34.420
file to use depending on whether
you have Java 7 or Java 8.

00:05:34.420 --> 00:05:38.070
In this case, I'm using
the file for Java 7.

00:05:38.070 --> 00:05:41.650
We also need to tell our
implementations that we

00:05:41.650 --> 00:05:44.490
are going to be using GRPC.

00:05:44.490 --> 00:05:47.220
And other than that, the
command line looks the same.

00:05:47.220 --> 00:05:49.080
Again, we are using
a url as an input.

00:05:49.080 --> 00:05:53.830
And we are specifying the
path to the secrets file.

00:05:53.830 --> 00:05:54.660
Let's run this.

00:05:58.840 --> 00:06:01.700
All right, so this
worked as well.

00:06:01.700 --> 00:06:04.670
Now let's do something else.

00:06:04.670 --> 00:06:08.400
Instead of specifying the full
read group set to process,

00:06:08.400 --> 00:06:10.499
let's specify a genomic range.

00:06:10.499 --> 00:06:12.040
Because we could
have a big data set,

00:06:12.040 --> 00:06:15.350
and we want to
process part of it.

00:06:15.350 --> 00:06:19.170
Here is how the command line
will look, [? like that. ?]

00:06:19.170 --> 00:06:21.240
So you will notice, it's
pretty much the same.

00:06:21.240 --> 00:06:24.400
And the input url
is very similar.

00:06:24.400 --> 00:06:27.950
But not just that-- in addition
to specifying the read group

00:06:27.950 --> 00:06:31.840
set ID here, we have also
specified the reference

00:06:31.840 --> 00:06:35.770
that that we want to use
and the specific genomic

00:06:35.770 --> 00:06:37.460
range that we want to process.

00:06:37.460 --> 00:06:38.540
So let's run this.

00:06:47.980 --> 00:06:48.760
So this worked.

00:06:48.760 --> 00:06:53.460
And we only go the reads from
this genomics [INAUDIBLE].

00:06:53.460 --> 00:06:56.330
Now this is not the only
tool that we have converted.

00:06:56.330 --> 00:06:59.390
We can run another tool,
for example mark duplicates,

00:06:59.390 --> 00:07:01.172
in a similar manner.

00:07:01.172 --> 00:07:03.780
And we specify the
command line, as usual.

00:07:03.780 --> 00:07:06.780
And the input is, again, the
url that points at our data

00:07:06.780 --> 00:07:07.690
in the cloud.

00:07:07.690 --> 00:07:08.730
Let's see this.

00:07:16.020 --> 00:07:19.600
OK, so same Picard
invocation, except this time

00:07:19.600 --> 00:07:22.130
mark duplicates
instead of ViewSam.

00:07:22.130 --> 00:07:23.870
And the input is, again, a url.

00:07:35.220 --> 00:07:36.950
Again, this worked.

00:07:36.950 --> 00:07:38.305
So now let's review.

00:07:38.305 --> 00:07:41.620
We ran several Picard
tools, reading data directly

00:07:41.620 --> 00:07:45.122
from the cloud via GA4GH APIs.

00:07:45.122 --> 00:07:48.500
We have worked on converting
several tools to support this.

00:07:48.500 --> 00:07:50.290
And if you want to
help us convert more,

00:07:50.290 --> 00:07:52.015
please read the
developer documentation

00:07:52.015 --> 00:07:56.860
on the GitHub page for the
GATK tools Java project.

00:07:56.860 --> 00:07:59.520
You can also use
GA4GH support we

00:07:59.520 --> 00:08:02.520
have built into HGS
[? GTK ?] libraries

00:08:02.520 --> 00:08:06.390
to easily enable your tool,
built on top of same libraries,

00:08:06.390 --> 00:08:08.044
to read the data from the cloud.

00:08:08.044 --> 00:08:09.460
Thank you very
much for your time.

00:08:09.460 --> 00:08:11.010
[MUSIC PLAYING]

