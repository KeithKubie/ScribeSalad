WEBVTT
Kind: captions
Language: en

00:00:00.037 --> 00:00:01.620
FAISAL ABID: Good
afternoon, everyone.

00:00:01.620 --> 00:00:03.860
Or should I say [GERMAN]?

00:00:03.860 --> 00:00:07.350
I looked up on Google
Translate how to say that.

00:00:07.350 --> 00:00:10.680
Welcome to our talk
on Angular 2.0 Dart,

00:00:10.680 --> 00:00:15.030
moving a large scale
application over to Angular.

00:00:15.030 --> 00:00:16.175
Who am I?

00:00:16.175 --> 00:00:17.750
I am Faisal Abid.

00:00:17.750 --> 00:00:20.630
During the day I work at
an AI machine learning

00:00:20.630 --> 00:00:22.160
company called Zoom.ai.

00:00:22.160 --> 00:00:26.180
We're an automated virtual
assistant for your enterprise,

00:00:26.180 --> 00:00:28.780
and we're hopefully going
to be doing some Darts soon.

00:00:28.780 --> 00:00:32.590
And during the nights, I run
this crazy app called Ven Chat.

00:00:32.590 --> 00:00:35.514
We're a top 100 grossing
applications on Android.

00:00:35.514 --> 00:00:37.180
It's powered by a
Dart server, so that's

00:00:37.180 --> 00:00:40.424
where I do most of
my Dart development.

00:00:40.424 --> 00:00:42.090
KEVIN BIRCH: And my
name is Kevin Birch.

00:00:42.090 --> 00:00:44.310
I'm currently the
CTO and co-founder

00:00:44.310 --> 00:00:46.960
of a company called The
Overflow based in Toronto.

00:00:46.960 --> 00:00:50.729
And you might be curious
about my social handle.

00:00:50.729 --> 00:00:53.020
It has nothing to do with
what you found on your chair,

00:00:53.020 --> 00:00:55.460
but I am in fact
a drummer as well.

00:00:55.460 --> 00:00:58.240
So if the CTO gig doesn't work
out, and you need a drummer,

00:00:58.240 --> 00:00:59.540
please give me a shout.

00:00:59.540 --> 00:01:02.450
It's good to have a
fallback plan, right?

00:01:02.450 --> 00:01:03.450
Just a quick background.

00:01:03.450 --> 00:01:05.200
Over 20 plus years
in technology--

00:01:05.200 --> 00:01:09.000
I stopped counting when it
got to the plus-- working

00:01:09.000 --> 00:01:11.070
through health care
enterprise solutions,

00:01:11.070 --> 00:01:14.100
moved into mobile in 2005,
started a company in Toronto

00:01:14.100 --> 00:01:16.672
called Silver Birch that
was a mobile game developer.

00:01:16.672 --> 00:01:18.630
We had the fortune to be
the crest of the wave.

00:01:18.630 --> 00:01:21.690
We took that company public on
a small exchange in Toronto.

00:01:21.690 --> 00:01:25.010
But a lot of experience with
these different technologies

00:01:25.010 --> 00:01:26.510
over the years,
coming and going.

00:01:26.510 --> 00:01:31.032
And recently working with
different startup ventures,

00:01:31.032 --> 00:01:32.490
full stack stuff
that I like to do.

00:01:32.490 --> 00:01:34.170
So that's where I
met Faisal, working

00:01:34.170 --> 00:01:35.545
on a lot of these
kind of things.

00:01:35.545 --> 00:01:38.790
We both have a similar mindset
in terms of new opportunities.

00:01:38.790 --> 00:01:41.849
First introduced to Dart,
I guess, last summer.

00:01:41.849 --> 00:01:43.890
And again, just based on
the experience I've had,

00:01:43.890 --> 00:01:45.806
I just really fell in
love with it right away.

00:01:45.806 --> 00:01:47.380
I absolutely love
the technology.

00:01:47.380 --> 00:01:49.046
And of course, we're
going to be talking

00:01:49.046 --> 00:01:51.250
about some use of that
today and some projects

00:01:51.250 --> 00:01:53.840
that-- well, one project in
particular that I'm working on.

00:01:56.500 --> 00:01:57.590
So it's The Overflow.

00:01:57.590 --> 00:02:01.650
And this talk is going
to be a little bit more

00:02:01.650 --> 00:02:04.957
along the lines of a
success story, a case study,

00:02:04.957 --> 00:02:07.040
using the types of things
we've been talking about

00:02:07.040 --> 00:02:09.130
at this summit so far.

00:02:09.130 --> 00:02:11.349
And so I'll give
you a little bit

00:02:11.349 --> 00:02:13.140
of an outline of what
The Overflow actually

00:02:13.140 --> 00:02:15.910
is, just so you understand what
kind of requirements we have,

00:02:15.910 --> 00:02:18.750
what the technology is
going to be behind it all.

00:02:18.750 --> 00:02:22.020
We are a streaming music
service with a twist.

00:02:22.020 --> 00:02:24.650
We are specifically
focused on Christian music.

00:02:24.650 --> 00:02:26.250
So you might know
of it as gospel,

00:02:26.250 --> 00:02:28.970
you might know of it
as inspirational music.

00:02:28.970 --> 00:02:33.700
But think of it as Spotify with
a filtered and curated subset

00:02:33.700 --> 00:02:35.610
of the catalog.

00:02:35.610 --> 00:02:38.000
So are we competing
with Spotify?

00:02:38.000 --> 00:02:39.330
We tend to think not.

00:02:39.330 --> 00:02:42.850
We have a massive target
audience, 2.2 billion,

00:02:42.850 --> 00:02:44.870
according to 2012 numbers.

00:02:44.870 --> 00:02:47.410
Even a small percentage, a
finite percentage of that

00:02:47.410 --> 00:02:50.370
makes the subscription
model interesting.

00:02:50.370 --> 00:02:53.760
But really, that segment
is very particular, very

00:02:53.760 --> 00:02:55.880
cautious about how
they shop for content

00:02:55.880 --> 00:02:59.570
online, the browsing
experience, and specifically

00:02:59.570 --> 00:03:00.700
how that relates to family.

00:03:00.700 --> 00:03:02.491
Wanting their family
to be more of a family

00:03:02.491 --> 00:03:03.810
friendly environment.

00:03:03.810 --> 00:03:06.780
So that was really the
vision for The Overflow.

00:03:06.780 --> 00:03:09.760
And a little bit of
some eye candy here

00:03:09.760 --> 00:03:10.857
on the mobile app side.

00:03:13.514 --> 00:03:14.930
One of the other
issues that we're

00:03:14.930 --> 00:03:16.638
addressing on some of
the other platforms

00:03:16.638 --> 00:03:19.650
is things like
Christian and Bollywood

00:03:19.650 --> 00:03:24.517
and whatever tend to get lumped
into a single genre, right?

00:03:24.517 --> 00:03:26.600
And I don't think-- that's
not really appropriate.

00:03:26.600 --> 00:03:28.410
That's frustrating
for these end users,

00:03:28.410 --> 00:03:31.526
because Christian is more of a
segment, obviously, of users.

00:03:31.526 --> 00:03:33.150
And we're dealing
with, as you can see,

00:03:33.150 --> 00:03:34.700
we have genres within
Christian music.

00:03:34.700 --> 00:03:37.200
People want to be able to search
for pop and gospel and rock

00:03:37.200 --> 00:03:39.510
and different types
of genres within that.

00:03:39.510 --> 00:03:42.290
So we think-- we've
already seen since launch

00:03:42.290 --> 00:03:46.990
that this is a very well
accepted thought that we had.

00:03:46.990 --> 00:03:51.020
And the record labels as
well-- unbelievably supportive

00:03:51.020 --> 00:03:54.287
of this, because it allows them
to surface some back catalog

00:03:54.287 --> 00:03:56.620
things-- artists, albums that
don't see the light of day

00:03:56.620 --> 00:03:58.760
necessarily on other services.

00:03:58.760 --> 00:04:01.110
So that was the
intention behind this.

00:04:01.110 --> 00:04:03.800
And we did launch in the
US a number of months ago,

00:04:03.800 --> 00:04:06.760
and response has been fantastic.

00:04:06.760 --> 00:04:09.840
We are seeing an
accelerated growth curve

00:04:09.840 --> 00:04:13.290
and planning to launch now
to other territories heading

00:04:13.290 --> 00:04:14.590
into 2017.

00:04:14.590 --> 00:04:17.860
So really we're talking today
about initial technology

00:04:17.860 --> 00:04:20.282
choices that we made.

00:04:20.282 --> 00:04:21.740
Why we did that,
and of course now,

00:04:21.740 --> 00:04:23.323
why we've ultimately
made the decision

00:04:23.323 --> 00:04:25.990
to move to Dart and
Angular 2 to better

00:04:25.990 --> 00:04:28.165
support the growth in
our future requirements.

00:04:31.010 --> 00:04:34.080
So just a quick
overview of the old

00:04:34.080 --> 00:04:38.320
tech-- very small team to start.

00:04:38.320 --> 00:04:41.010
This is self-funded,
three people.

00:04:41.010 --> 00:04:43.766
I was the only
developer on the team.

00:04:43.766 --> 00:04:45.140
So we built a
whole entire stack.

00:04:45.140 --> 00:04:46.750
The choices that we made
were just-- of course,

00:04:46.750 --> 00:04:47.450
we've grown from there.

00:04:47.450 --> 00:04:49.991
But initially, with the proof
of concepts and the baby steps,

00:04:49.991 --> 00:04:50.685
it was myself.

00:04:50.685 --> 00:04:52.060
Initially the
choices were simply

00:04:52.060 --> 00:04:57.310
based on what is going
to be able to get us out

00:04:57.310 --> 00:05:00.502
there quickly, prototyping,
quick iterations.

00:05:00.502 --> 00:05:01.960
And certainly that
doesn't rule out

00:05:01.960 --> 00:05:04.950
Dart or other technologies that
were available at the time.

00:05:04.950 --> 00:05:06.500
But it was also a
lot based on-- we

00:05:06.500 --> 00:05:08.350
don't want to spend a lot
of time learning new things,

00:05:08.350 --> 00:05:09.433
working with what we knew.

00:05:13.420 --> 00:05:17.720
For our technology we
chose PHP for our web tools

00:05:17.720 --> 00:05:19.920
and Node for our API.

00:05:19.920 --> 00:05:25.160
So our web tools were
purely internal facing.

00:05:25.160 --> 00:05:30.300
So we didn't have a lot
of internal back and forth

00:05:30.300 --> 00:05:31.834
about whether to use it or not.

00:05:31.834 --> 00:05:34.250
It was just they were internal
facing administration tools

00:05:34.250 --> 00:05:37.290
that we needed to manage our
system, to manage our catalog.

00:05:37.290 --> 00:05:39.460
So just as a frame
of reference in terms

00:05:39.460 --> 00:05:41.880
of the scope of this thing,
there are three million albums

00:05:41.880 --> 00:05:45.210
in our master catalog,
and 28 million songs

00:05:45.210 --> 00:05:47.770
that have to be streamed and
downloaded and constantly

00:05:47.770 --> 00:05:50.440
managed as new content comes
out from other record labels.

00:05:50.440 --> 00:05:52.865
So the administration
tools are significant,

00:05:52.865 --> 00:05:54.490
but again, they were
internally facing.

00:05:54.490 --> 00:05:57.640
So PHP was chosen for that.

00:05:57.640 --> 00:05:59.960
Node was new to me at the time.

00:05:59.960 --> 00:06:02.960
I would normally have used
Java back ends traditionally

00:06:02.960 --> 00:06:04.870
with servlets,
Tomcat, J2EE stacks.

00:06:04.870 --> 00:06:08.820
But again, for the sake of speed
Node seemed absolutely perfect.

00:06:08.820 --> 00:06:10.800
I think we had talked
about that at the time.

00:06:10.800 --> 00:06:12.459
And so just in
terms of our usage,

00:06:12.459 --> 00:06:14.750
it was a lightweight solution,
getting things out there

00:06:14.750 --> 00:06:18.400
quickly, quick iterations.

00:06:18.400 --> 00:06:22.265
So that's sort of where we
started in terms of our tech.

00:06:24.770 --> 00:06:27.630
Why was it a problem?

00:06:27.630 --> 00:06:29.370
It met our requirements
at the time,

00:06:29.370 --> 00:06:32.139
but we were showing
real signs of success.

00:06:32.139 --> 00:06:33.680
It was going in the
direction that we

00:06:33.680 --> 00:06:34.870
were hoping it would go.

00:06:34.870 --> 00:06:36.411
And so it was really
time, of course,

00:06:36.411 --> 00:06:39.390
to move away from proof of
concept baby steps and time

00:06:39.390 --> 00:06:43.052
to expand and re-evaluate
our technology platform.

00:06:43.052 --> 00:06:44.010
We needed a web client.

00:06:44.010 --> 00:06:46.520
So we had only launched
originally with the apps.

00:06:46.520 --> 00:06:50.460
It was an app, mobile only play
at first with Android and iOS

00:06:50.460 --> 00:06:52.430
native apps.

00:06:52.430 --> 00:06:56.100
We had a very simple
architecture initially,

00:06:56.100 --> 00:07:00.430
database, API service layer,
and these native apps talking

00:07:00.430 --> 00:07:03.160
through that API service layer.

00:07:03.160 --> 00:07:05.680
But it was time to expand,
and with a web client

00:07:05.680 --> 00:07:08.870
we needed multiple
developers, multiple teams.

00:07:08.870 --> 00:07:11.380
We need to obviously-- in order
be even remotely competitive

00:07:11.380 --> 00:07:12.880
out there, we need
machine learning,

00:07:12.880 --> 00:07:15.610
we need automated
curation of our playlists,

00:07:15.610 --> 00:07:17.360
and so on and so forth.

00:07:17.360 --> 00:07:20.130
So it was now time to get past
the proof of concept stage,

00:07:20.130 --> 00:07:22.150
figure out what was the
best platform for us

00:07:22.150 --> 00:07:25.390
to build our solution on.

00:07:25.390 --> 00:07:28.340
So I am a fan of
PHP, but I think

00:07:28.340 --> 00:07:31.450
in certain situations it really
works well as a quick solution.

00:07:31.450 --> 00:07:34.272
But ultimately, I think--
probably a lot of us

00:07:34.272 --> 00:07:35.980
would agree-- maybe
not the best solution

00:07:35.980 --> 00:07:38.540
for a long term, large
scale platform like this,

00:07:38.540 --> 00:07:40.765
needing multiple developers,
multiple teams working

00:07:40.765 --> 00:07:42.140
on different parts
of the system,

00:07:42.140 --> 00:07:44.570
really separating
presentation, business, logic,

00:07:44.570 --> 00:07:47.050
and so on and so forth.

00:07:47.050 --> 00:07:51.320
Node-- I would say less of
a problem, certainly great

00:07:51.320 --> 00:07:53.500
and could have kept us going.

00:07:53.500 --> 00:07:56.540
But as we went through
the evaluation process

00:07:56.540 --> 00:07:59.340
of other technologies
available, there

00:07:59.340 --> 00:08:01.390
was clearly big
advantages in coming up

00:08:01.390 --> 00:08:03.800
with some type of
platform that could

00:08:03.800 --> 00:08:07.510
be used across all
layers on the full stack.

00:08:07.510 --> 00:08:10.740
And so as we began to
really carefully evaluate

00:08:10.740 --> 00:08:13.429
where we should go from
here, my good friend Faisal--

00:08:13.429 --> 00:08:15.220
we had lots of long
discussions about this,

00:08:15.220 --> 00:08:17.511
and of course, he had some
recommendations for me.

00:08:17.511 --> 00:08:18.260
FAISAL ABID: Yeah.

00:08:18.260 --> 00:08:22.330
So when Kevin came
to me and said,

00:08:22.330 --> 00:08:26.510
all right, Overflow's
growing, and we need scale.

00:08:26.510 --> 00:08:29.060
But Node and PHP and
all these technologies

00:08:29.060 --> 00:08:30.950
aren't really cutting it for me.

00:08:30.950 --> 00:08:34.929
I looked at his code
base, and I said, crazy.

00:08:34.929 --> 00:08:37.299
So like Watson and Sherlock,
we went on searching.

00:08:37.299 --> 00:08:40.159
And back then, I just
recently became a GD.

00:08:40.159 --> 00:08:42.390
But before that,
past year or so,

00:08:42.390 --> 00:08:44.150
I was doing a lot
of Dart development.

00:08:44.150 --> 00:08:46.670
So I got a real sense
of the power of Dart,

00:08:46.670 --> 00:08:48.860
because previously
I ran another chat

00:08:48.860 --> 00:08:50.260
app, which was all Node JS.

00:08:50.260 --> 00:08:53.280
And I understood the struggles
that you face once you

00:08:53.280 --> 00:08:55.010
hit big time with Node.

00:08:55.010 --> 00:08:57.300
So I went to Kevin
and I said, all right,

00:08:57.300 --> 00:08:59.199
here's what Dart gives you.

00:08:59.199 --> 00:09:00.990
Dart gives you
object-oriented programming.

00:09:00.990 --> 00:09:02.560
Kevin was like, awesome.

00:09:02.560 --> 00:09:04.330
I think he was
playing his drums.

00:09:04.330 --> 00:09:07.340
And I then started showing
much more cooler features,

00:09:07.340 --> 00:09:08.506
like Observatory.

00:09:08.506 --> 00:09:09.880
And I said, look
what you can do.

00:09:09.880 --> 00:09:12.460
If you're writing a web app,
you can pull up Observatory,

00:09:12.460 --> 00:09:14.360
and you can actually
do lots of profiling

00:09:14.360 --> 00:09:15.780
and all this crazy stuff there.

00:09:15.780 --> 00:09:18.100
And Kevin was blown away.

00:09:18.100 --> 00:09:20.690
And then the magic, I think,
was when I started showing async

00:09:20.690 --> 00:09:22.010
and await.

00:09:22.010 --> 00:09:24.250
And I said, all
right, so here's what

00:09:24.250 --> 00:09:25.992
you would do in Node normally.

00:09:25.992 --> 00:09:27.700
And I looked at his
code, and I said, OK.

00:09:27.700 --> 00:09:30.870
So you load a trap, you
download music, all that stuff.

00:09:30.870 --> 00:09:32.610
Look at that crazy callback.

00:09:32.610 --> 00:09:34.950
And it was four levels
of callback hell.

00:09:34.950 --> 00:09:37.887
And I said, OK, let me show
you how you do that in Dart.

00:09:37.887 --> 00:09:39.220
Which is just four lines, right?

00:09:39.220 --> 00:09:40.830
Await, await, and we're good.

00:09:40.830 --> 00:09:43.140
And so once that
started happening,

00:09:43.140 --> 00:09:44.600
I went through
the other features

00:09:44.600 --> 00:09:47.430
like Streams, like
Cascade operators.

00:09:47.430 --> 00:09:50.540
And once we got
there, it was perfect.

00:09:50.540 --> 00:09:53.370
This was a perfect fit for
Overflow and their scale.

00:09:53.370 --> 00:09:56.420
And so what we needed was--
there was a web app currently,

00:09:56.420 --> 00:09:58.340
but we needed to
really rewrite that web

00:09:58.340 --> 00:10:02.170
app into something much more
scalable, in Dart, obviously.

00:10:02.170 --> 00:10:04.190
So we started to
explore technologies.

00:10:04.190 --> 00:10:07.540
Back then there was Dart
HTML, there was Polymer,

00:10:07.540 --> 00:10:12.810
and there was Angular 2.0,
beta, alpha, whatever it was.

00:10:12.810 --> 00:10:15.450
So I discovered Angular.

00:10:15.450 --> 00:10:18.370
And technically I
discovered Angular Dart,

00:10:18.370 --> 00:10:21.180
because I was an Angular JS
developer back in the day.

00:10:21.180 --> 00:10:24.860
I did lots of Scope
apply everywhere.

00:10:24.860 --> 00:10:26.010
So I started investigating.

00:10:26.010 --> 00:10:28.790
Kevin had worked with Angular
previously before, too.

00:10:28.790 --> 00:10:31.620
One thing that I really,
really enjoyed about Angular

00:10:31.620 --> 00:10:35.530
was this idea of components,
how everything is a component.

00:10:35.530 --> 00:10:42.130
And during my day-- or I used to
do a lot of mobile development.

00:10:42.130 --> 00:10:45.810
So writing web apps
like mobile apps

00:10:45.810 --> 00:10:47.280
is like coming home for me.

00:10:47.280 --> 00:10:49.590
So what I liked a
lot about Angular

00:10:49.590 --> 00:10:51.880
was this Component
Lifecycle that they had.

00:10:51.880 --> 00:10:55.760
And you can see that it
starts off with ngOnChanges,

00:10:55.760 --> 00:10:56.724
OnInit, OnClick.

00:10:56.724 --> 00:10:58.390
And then you have a
bunch of other stuff

00:10:58.390 --> 00:11:00.430
like AfterContentInit.

00:11:00.430 --> 00:11:04.304
So something that we often
hook into is ngAfterViewInit.

00:11:04.304 --> 00:11:06.970
So if there is a progress loader
or something like that showing,

00:11:06.970 --> 00:11:10.310
we would-- after the content's
Init and after it's viewed,

00:11:10.310 --> 00:11:11.080
great.

00:11:11.080 --> 00:11:13.500
Hide the loader, load
the data, do whatever.

00:11:13.500 --> 00:11:16.950
So this felt a lot like
onResume on Android.

00:11:16.950 --> 00:11:18.910
Any Android developers here?

00:11:18.910 --> 00:11:19.420
Yes, right.

00:11:19.420 --> 00:11:22.590
OnResume or on iOS, it's
like View did show, whatever

00:11:22.590 --> 00:11:25.200
that side of the world does.

00:11:25.200 --> 00:11:28.540
So then what I also
liked was the idea

00:11:28.540 --> 00:11:29.990
of dependency injection.

00:11:29.990 --> 00:11:33.810
Dependency injection makes large
scale development a lot easier.

00:11:33.810 --> 00:11:35.640
Writing unit tests
and stuff I hate

00:11:35.640 --> 00:11:37.080
doing when I'm
writing small apps.

00:11:37.080 --> 00:11:39.205
But when you're starting
to write large scale apps,

00:11:39.205 --> 00:11:40.840
unit testing is very important.

00:11:40.840 --> 00:11:43.987
And so dependency injection
makes everything a lot easier.

00:11:43.987 --> 00:11:45.570
So we can just inject
the API service,

00:11:45.570 --> 00:11:48.140
have a mock one
later, do a unit test.

00:11:48.140 --> 00:11:50.400
And then with the new stuff
that we saw earlier today,

00:11:50.400 --> 00:11:52.550
I think that's going to
make a lot of things easy.

00:11:52.550 --> 00:11:54.570
So with all that, I said
to Kevin, all right,

00:11:54.570 --> 00:11:57.200
let's just build this in
Angular 2, hope for the best,

00:11:57.200 --> 00:11:59.190
and that they're going
to go final soon.

00:11:59.190 --> 00:12:02.450
And let's just launch this.

00:12:02.450 --> 00:12:03.200
KEVIN BIRCH: Yeah.

00:12:03.200 --> 00:12:05.506
So it was an easy
sell once I had

00:12:05.506 --> 00:12:07.130
a good look at the
components and based

00:12:07.130 --> 00:12:08.110
on previous experience.

00:12:08.110 --> 00:12:11.000
We had a web data
already in place,

00:12:11.000 --> 00:12:12.250
so we weren't in any big rush.

00:12:12.250 --> 00:12:14.250
We had an opportunity to
experiment a little bit

00:12:14.250 --> 00:12:16.220
with this technology.

00:12:16.220 --> 00:12:17.470
But we decided to do it.

00:12:17.470 --> 00:12:19.150
I think it was the
best decision ever.

00:12:19.150 --> 00:12:20.900
And especially hearing
all the things that

00:12:20.900 --> 00:12:23.500
are going on at this conference
and the future of all

00:12:23.500 --> 00:12:26.494
these technologies we're using--
very, very excited about this.

00:12:26.494 --> 00:12:28.910
Again, we're keeping it a
little bit high level here, just

00:12:28.910 --> 00:12:31.969
to give you a sense-- there's
a lot of technical discussions

00:12:31.969 --> 00:12:34.010
going on about what's
happening under the covers,

00:12:34.010 --> 00:12:36.200
but I'll just
relate some visuals

00:12:36.200 --> 00:12:39.160
to what is happening in the
Dart and the Angular 2 world.

00:12:39.160 --> 00:12:42.910
So this is a first
iteration of the web client.

00:12:42.910 --> 00:12:45.005
And it's fully expanded.

00:12:45.005 --> 00:12:46.880
It's a little busy,
because we wanted to show

00:12:46.880 --> 00:12:48.522
some extra components for you.

00:12:48.522 --> 00:12:50.230
On the right side, we
have a search panel

00:12:50.230 --> 00:12:51.090
that comes in and out.

00:12:51.090 --> 00:12:52.250
That's a persistent search.

00:12:52.250 --> 00:12:54.880
You can always come back to that
and hit another search result

00:12:54.880 --> 00:12:55.380
at any time.

00:12:55.380 --> 00:12:56.690
It's a single page application.

00:12:56.690 --> 00:12:59.640
So we have some of these kind
of flexible options here.

00:12:59.640 --> 00:13:03.410
The player as well down below
is a component, the navigation,

00:13:03.410 --> 00:13:04.580
of course, the header.

00:13:04.580 --> 00:13:07.100
And then the central
area is our content area.

00:13:07.100 --> 00:13:10.660
And even within that, of course,
lots of sub components, album

00:13:10.660 --> 00:13:13.420
widgets, playlist widgets.

00:13:13.420 --> 00:13:17.130
So this is what the user sees,
but of course, on the back end

00:13:17.130 --> 00:13:20.010
or on the code side of things,
what the developers see

00:13:20.010 --> 00:13:21.397
would look something like this.

00:13:21.397 --> 00:13:23.730
Simplifying some things, just
to give you a sense of it,

00:13:23.730 --> 00:13:26.800
but this is the tag structure
underneath our high level app

00:13:26.800 --> 00:13:28.100
component.

00:13:28.100 --> 00:13:30.312
So you can see some familiar
tags, or at least ones

00:13:30.312 --> 00:13:32.020
that would relate to
the previous slide--

00:13:32.020 --> 00:13:34.027
header, navigation.

00:13:34.027 --> 00:13:35.860
The interesting thing
about our content area

00:13:35.860 --> 00:13:38.939
would be that this is the router
outlet, meaning any navigation

00:13:38.939 --> 00:13:41.480
that we do throughout the site,
through the navigation panel,

00:13:41.480 --> 00:13:44.280
or other links is targeting
this particular area.

00:13:44.280 --> 00:13:46.395
So that's the big
content area I showed you

00:13:46.395 --> 00:13:47.796
on the previous slide.

00:13:47.796 --> 00:13:49.170
There's some other
UI things here

00:13:49.170 --> 00:13:50.950
that I didn't show
you, cues and such,

00:13:50.950 --> 00:13:53.590
but you understand the point.

00:13:53.590 --> 00:13:55.410
And obviously, the
awesome thing here

00:13:55.410 --> 00:13:59.120
is that each tag has its own
corresponding self-contained

00:13:59.120 --> 00:14:04.670
code component-- HTML,
styles, business logic,

00:14:04.670 --> 00:14:06.037
and sub components as well.

00:14:06.037 --> 00:14:08.370
Lots of things, as we've
already been through a fair bit

00:14:08.370 --> 00:14:10.669
over today.

00:14:10.669 --> 00:14:12.710
And then just to give you
a little sample of what

00:14:12.710 --> 00:14:14.960
the code would look like and
some of the things Faisal

00:14:14.960 --> 00:14:18.130
was talking about-- we have an
API service class that we've

00:14:18.130 --> 00:14:19.410
labeled as injectable.

00:14:19.410 --> 00:14:22.540
Anything within the system
that needs to, of course,

00:14:22.540 --> 00:14:24.360
bring data in from
the backend, we

00:14:24.360 --> 00:14:27.170
inject this component into it.

00:14:27.170 --> 00:14:31.225
And then underneath, we see a
sample of what this home page

00:14:31.225 --> 00:14:32.100
component looks like.

00:14:32.100 --> 00:14:33.450
Again, that's not
the entire wrapper.

00:14:33.450 --> 00:14:34.783
That would be the app component.

00:14:34.783 --> 00:14:36.882
But the home page component
is the content area,

00:14:36.882 --> 00:14:39.090
like we have a playlist
component, an album component

00:14:39.090 --> 00:14:41.079
to view those details.

00:14:41.079 --> 00:14:42.620
So again, defining
a selector, that's

00:14:42.620 --> 00:14:43.920
the router outlet I mentioned.

00:14:43.920 --> 00:14:47.236
The content is being pushed
to that particular selector.

00:14:47.236 --> 00:14:48.610
We have an HTML
file that defines

00:14:48.610 --> 00:14:52.000
the template, the layout,
the framework of the page.

00:14:52.000 --> 00:14:55.030
And then directives,
bringing in other components

00:14:55.030 --> 00:14:57.350
like-- I have removed
a few things here,

00:14:57.350 --> 00:14:59.410
but the key ones would
be our router link

00:14:59.410 --> 00:15:01.290
component and our
loader component,

00:15:01.290 --> 00:15:03.184
which allow us to
navigate across the app.

00:15:03.184 --> 00:15:05.100
And the loader component,
as Faisal mentioned,

00:15:05.100 --> 00:15:07.712
is just a little UI
to indicate loading

00:15:07.712 --> 00:15:09.420
as things are coming
in from the back end

00:15:09.420 --> 00:15:11.040
and as the page is rendering.

00:15:11.040 --> 00:15:13.200
And then the API service
is also referenced

00:15:13.200 --> 00:15:15.820
as an injectable object.

00:15:15.820 --> 00:15:19.010
So this particular
class is conforming

00:15:19.010 --> 00:15:22.170
to part of the life-- one
of the lifecycle methods

00:15:22.170 --> 00:15:23.420
after viewing it.

00:15:23.420 --> 00:15:25.330
It simply means that
we need to implement

00:15:25.330 --> 00:15:27.080
this ngAfterViewInit
method, which

00:15:27.080 --> 00:15:30.070
is called after the view is
fully loaded and initialized.

00:15:30.070 --> 00:15:31.810
Which in this
scaled down example

00:15:31.810 --> 00:15:34.770
is just showing that we're
removing the loader component.

00:15:34.770 --> 00:15:37.490
Getting rid of that loader
UI and displaying the content

00:15:37.490 --> 00:15:39.920
of the page in all its glory.

00:15:39.920 --> 00:15:43.984
So everything was really,
really, super smooth and fast.

00:15:43.984 --> 00:15:45.900
There's been a lot of
talk about productivity.

00:15:45.900 --> 00:15:48.134
There's been a lot of
talk about clean code.

00:15:48.134 --> 00:15:50.550
For us, it was a very, very
positive experience just doing

00:15:50.550 --> 00:15:51.800
this as an experiment.

00:15:51.800 --> 00:15:55.050
And we started with beta
12, so a few months back.

00:15:55.050 --> 00:15:57.470
So we've had a little
bit of refactoring to do

00:15:57.470 --> 00:15:58.690
as things have changed there.

00:15:58.690 --> 00:16:00.350
But again, everything
just works,

00:16:00.350 --> 00:16:03.827
and I'm just super happy
that it is 100% Dart.

00:16:03.827 --> 00:16:05.660
Except, of course, for
the cases where we do

00:16:05.660 --> 00:16:10.031
use JavaScript interop, which
I won't get into detail.

00:16:10.031 --> 00:16:12.280
That's been talked about
brilliantly by Jacob earlier.

00:16:12.280 --> 00:16:14.000
But we do use
JavaScript interop.

00:16:14.000 --> 00:16:18.780
There are things like analytics
libraries, customer support

00:16:18.780 --> 00:16:20.750
libraries, even
some audio players

00:16:20.750 --> 00:16:22.440
that we tie into--
audio player widgets

00:16:22.440 --> 00:16:23.898
that we tie into
from time to time.

00:16:23.898 --> 00:16:25.905
But JavaScript interop
allows us to do that,

00:16:25.905 --> 00:16:27.280
and this is just
a stock example.

00:16:27.280 --> 00:16:28.113
This isn't our code.

00:16:28.113 --> 00:16:30.480
But we've seen that already.

00:16:30.480 --> 00:16:36.730
So it's obviously important
talk about-- how did this help?

00:16:36.730 --> 00:16:40.800
So after the web client was
really a success in our minds,

00:16:40.800 --> 00:16:43.080
we thought, OK, we're going
to do this everywhere.

00:16:43.080 --> 00:16:45.580
And so we immediately went
and converted the API layer

00:16:45.580 --> 00:16:47.690
to Dart.

00:16:47.690 --> 00:16:50.390
It was very quick and painless.

00:16:50.390 --> 00:16:51.640
That is in production now.

00:16:51.640 --> 00:16:53.470
It's been in production for
quite a while, actually.

00:16:53.470 --> 00:16:55.970
And we're converting the admin
tools, not as much of a rush,

00:16:55.970 --> 00:16:57.387
but we're converting
that as well.

00:16:57.387 --> 00:16:58.845
Just because they're
internal we're

00:16:58.845 --> 00:17:00.320
doing that slowly
as time allows.

00:17:00.320 --> 00:17:04.540
But the big thing
for us really is

00:17:04.540 --> 00:17:06.139
the lack of context
switching now

00:17:06.139 --> 00:17:07.430
between different technologies.

00:17:07.430 --> 00:17:09.104
We're able to-- we
don't have to keep

00:17:09.104 --> 00:17:11.520
track of different technologies
moving at different paces.

00:17:11.520 --> 00:17:13.470
That was discussed earlier.

00:17:13.470 --> 00:17:14.700
And that is absolutely true.

00:17:14.700 --> 00:17:16.490
And our development
teams can more easily

00:17:16.490 --> 00:17:19.280
operate between layers as
we get a consistent platform

00:17:19.280 --> 00:17:21.380
across API admin tools.

00:17:21.380 --> 00:17:22.880
And of course,
looking to the future

00:17:22.880 --> 00:17:25.290
for mobile-- very
excited about tomorrow's

00:17:25.290 --> 00:17:28.099
talks about Flutter and such.

00:17:28.099 --> 00:17:30.690
The other big jump in
productivity for us

00:17:30.690 --> 00:17:35.040
was being able to really
extract a common Dart library.

00:17:35.040 --> 00:17:36.600
We pulled out all
our model code.

00:17:36.600 --> 00:17:38.920
We pulled out, of
course, API access

00:17:38.920 --> 00:17:41.260
stuff that some of those
components would need.

00:17:41.260 --> 00:17:43.830
Utility methods into
a shared library

00:17:43.830 --> 00:17:46.050
that's now able to
be used across all

00:17:46.050 --> 00:17:48.430
of these different
layers in our system.

00:17:48.430 --> 00:17:50.500
It's really, really great.

00:17:50.500 --> 00:17:53.260
And I do personally believe
that the move to Dart,

00:17:53.260 --> 00:17:55.800
away from JavaScript
and PHP, has just

00:17:55.800 --> 00:17:58.450
forced a cleaner
and more structured

00:17:58.450 --> 00:18:00.550
code and architecture.

00:18:00.550 --> 00:18:02.696
Also, it has been
discussed-- I was watching

00:18:02.696 --> 00:18:05.450
Lars and Casper's Intro
to Dart video from 2012

00:18:05.450 --> 00:18:06.730
on the plane over here.

00:18:06.730 --> 00:18:10.710
And that's touched
on brilliantly

00:18:10.710 --> 00:18:15.120
in terms of why Dart was
created and its comparisons

00:18:15.120 --> 00:18:16.100
with JavaScript.

00:18:16.100 --> 00:18:18.230
So you can talk about that.

00:18:18.230 --> 00:18:21.110
FAISAL ABID: So we
get asked often,

00:18:21.110 --> 00:18:23.620
whenever we tell our
story to other developers

00:18:23.620 --> 00:18:26.680
is, well why didn't you use
Angular 2 JavaScript or Angular

00:18:26.680 --> 00:18:28.140
2 TypeScript?

00:18:28.140 --> 00:18:32.090
And really it's
not about Angular.

00:18:32.090 --> 00:18:34.690
It's really about the language
that's powering Angular.

00:18:34.690 --> 00:18:38.280
For me, personally, Dart is
putting Angular on steroids.

00:18:38.280 --> 00:18:41.200
Angular as it is is a
great, great framework.

00:18:41.200 --> 00:18:44.550
It was great in 1.5, and
that's why it got this far.

00:18:44.550 --> 00:18:47.420
But Dart really pumps
up the productivity.

00:18:47.420 --> 00:18:49.760
And when you're using
something-- at least what

00:18:49.760 --> 00:18:51.890
I've personally
found, my opinion.

00:18:51.890 --> 00:18:55.050
When you use something like
JavaScript, Angular JavaScript,

00:18:55.050 --> 00:18:58.720
with a bunch of power and
all these crazy plugins

00:18:58.720 --> 00:19:00.570
that you have there,
all these technologies

00:19:00.570 --> 00:19:01.650
are moving at different rates.

00:19:01.650 --> 00:19:03.360
It's really hard to
keep track of that.

00:19:03.360 --> 00:19:06.505
What I like about using
Angular Dart is just

00:19:06.505 --> 00:19:09.030
it's one solid technology
that I can just develop on.

00:19:09.030 --> 00:19:10.240
When it updates, it updates.

00:19:10.240 --> 00:19:12.640
That's great for me.

00:19:12.640 --> 00:19:16.190
So it comes back to Dart
being great-- I mean,

00:19:16.190 --> 00:19:19.720
Angular is great, but it comes
back to Dart being amazing.

00:19:19.720 --> 00:19:23.140
So the language is
stable, obviously.

00:19:23.140 --> 00:19:26.520
Observatory, for example,
as I was talking before,

00:19:26.520 --> 00:19:29.019
this stuff is great
when you're developing.

00:19:29.019 --> 00:19:31.310
When you're actually developing
a web application, when

00:19:31.310 --> 00:19:33.510
I see this-- I look
at this all the time,

00:19:33.510 --> 00:19:35.460
because this is amazing.

00:19:35.460 --> 00:19:40.960
And then you have really
nice stuff like Streams.

00:19:40.960 --> 00:19:43.690
Using all this when you're
writing your Angular app

00:19:43.690 --> 00:19:45.137
is crazy.

00:19:45.137 --> 00:19:46.720
This is just mind
blowing to me coming

00:19:46.720 --> 00:19:50.200
from a mobile background,
even doing cold fusion back

00:19:50.200 --> 00:19:51.190
in the day.

00:19:51.190 --> 00:19:53.531
And then using
stuff like-- here's

00:19:53.531 --> 00:19:55.030
another thing that
I personally like

00:19:55.030 --> 00:19:58.110
about Dart, which is
what makes Angular great,

00:19:58.110 --> 00:20:01.550
is if you're trying to use
something like async in Node

00:20:01.550 --> 00:20:03.792
or on the web, you have
to use the async package,

00:20:03.792 --> 00:20:05.680
and you have to
chain all this up.

00:20:05.680 --> 00:20:07.239
Dart is batteries included.

00:20:07.239 --> 00:20:08.780
We've heard this
over and over again.

00:20:08.780 --> 00:20:10.740
It comes with a great
async framework.

00:20:10.740 --> 00:20:13.290
So I can just do Future.wait,
pass in my methods,

00:20:13.290 --> 00:20:14.970
and it just waits for them.

00:20:14.970 --> 00:20:19.860
And then the other thing is this
idea of being object-oriented.

00:20:19.860 --> 00:20:20.865
I love it.

00:20:20.865 --> 00:20:23.120
That's because it makes
stuff like building

00:20:23.120 --> 00:20:26.800
singletons really, really easy.

00:20:26.800 --> 00:20:29.360
When you're writing web
applications in general,

00:20:29.360 --> 00:20:32.160
having this flexibility,
having this power

00:20:32.160 --> 00:20:34.530
makes it a cohesive
experience where

00:20:34.530 --> 00:20:37.310
I don't have to worry about,
oh, can I do this on the web?

00:20:37.310 --> 00:20:39.830
No, but I can just
do it with Dart.

00:20:39.830 --> 00:20:41.910
And then lastly, just
other simple features

00:20:41.910 --> 00:20:44.690
that I think make Angular
great because of Dart

00:20:44.690 --> 00:20:47.575
is stuff like names
of parameters.

00:20:47.575 --> 00:20:49.450
Tons of times I don't
want to method overload

00:20:49.450 --> 00:20:50.158
a bunch of stuff.

00:20:50.158 --> 00:20:51.910
I can just do name parameters.

00:20:51.910 --> 00:20:52.990
It gets the job done.

00:20:52.990 --> 00:20:58.640
So overall, this is why I
feel Angular 2 Dart is great.

00:20:58.640 --> 00:20:59.750
It's because of Dart.

00:20:59.750 --> 00:21:01.630
It's because Dart is there.

00:21:01.630 --> 00:21:05.060
And then what's nice about Dart
is, like Kevin was mentioning,

00:21:05.060 --> 00:21:08.682
once we have this code base, we
can share it across the stack.

00:21:08.682 --> 00:21:10.390
So as you saw earlier
in the screenshots,

00:21:10.390 --> 00:21:11.640
Kevin showed some mobile apps.

00:21:11.640 --> 00:21:15.610
The idea eventually
is once we investigate

00:21:15.610 --> 00:21:18.780
Flutter more is to move
all this over to Flutter.

00:21:18.780 --> 00:21:20.240
We save-- less development time.

00:21:20.240 --> 00:21:21.615
And then all this
code that we're

00:21:21.615 --> 00:21:24.149
using on Angular, something
like a singleton class,

00:21:24.149 --> 00:21:25.190
we can use it on Flutter.

00:21:25.190 --> 00:21:27.260
We can use it on the
web as long as it's

00:21:27.260 --> 00:21:29.250
platform independent, whatever.

00:21:29.250 --> 00:21:31.360
So that's one of the
productivity gains

00:21:31.360 --> 00:21:32.770
that you get by using Dart.

00:21:32.770 --> 00:21:34.750
And having Angular
is essentially

00:21:34.750 --> 00:21:37.580
putting it on steroids.

00:21:37.580 --> 00:21:38.330
KEVIN BIRCH: Yeah.

00:21:38.330 --> 00:21:39.760
So hopefully that
was interesting

00:21:39.760 --> 00:21:41.851
as a real world case
study, external--

00:21:41.851 --> 00:21:44.100
I guess-- real world case
study in terms of the things

00:21:44.100 --> 00:21:44.970
we're talking about.

00:21:44.970 --> 00:21:48.010
We are extremely happy with
our decision to move to Dart.

00:21:48.010 --> 00:21:51.180
Absolutely committed to using
it inside of The Overflow

00:21:51.180 --> 00:21:52.720
and myself to
other projects that

00:21:52.720 --> 00:21:55.530
might come up in the future.

00:21:55.530 --> 00:21:59.350
Again, we've been able to move
things forward very quickly.

00:21:59.350 --> 00:22:01.360
We've seen big bumps
in productivity.

00:22:01.360 --> 00:22:03.070
And we're firing
on all cylinders.

00:22:03.070 --> 00:22:05.640
We just have had zero
down time on the APIs.

00:22:05.640 --> 00:22:08.130
The web's been solid, and
it's only first release.

00:22:08.130 --> 00:22:09.860
There's a lot more to do there.

00:22:09.860 --> 00:22:12.740
But looking very much forward to
next steps and the things we're

00:22:12.740 --> 00:22:14.114
taking away from
this conference.

00:22:14.114 --> 00:22:16.020
I just want to go
home and start coding.

00:22:16.020 --> 00:22:18.020
But thank you very
much for your time.

00:22:18.020 --> 00:22:20.820
And if there are any questions
or any comments you have,

00:22:20.820 --> 00:22:23.320
we'd love to meet you and
hear about those later.

00:22:23.320 --> 00:22:25.354
So thank you.

00:22:25.354 --> 00:22:27.101
[APPLAUSE]

