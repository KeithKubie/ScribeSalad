WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:04.939
The third preliminary topic is system design, and that is considering the system

00:00:04.939 --> 00:00:10.580
as a whole, possibly with respect to the environment in which it's going to run.

00:00:10.580 --> 00:00:12.410
First item is architecture.

00:00:12.410 --> 00:00:15.140
Okay? We've already talked about nonfunctional requirements and

00:00:15.140 --> 00:00:17.550
their effect on architectural style.

00:00:17.550 --> 00:00:20.200
Second is how you're going to deal with concurrency and

00:00:20.200 --> 00:00:23.820
there's a spectrum of possibilities here between having everything in a,

00:00:23.820 --> 00:00:27.550
in a single process to having one thread per object.

00:00:27.550 --> 00:00:30.210
Physical design has to do with how you're going to allocate tasks to

00:00:30.210 --> 00:00:33.180
processors and deal with any peripheral advi-,

00:00:33.180 --> 00:00:35.180
devices that are part of the system.

00:00:35.180 --> 00:00:37.350
If your application has a,

00:00:37.350 --> 00:00:42.900
a significant data storage requirement you have

00:00:42.900 --> 00:00:47.000
to make some decision about whether you're going to use a database to do that.

00:00:47.000 --> 00:00:48.680
Whether you're going to do files.

00:00:48.680 --> 00:00:52.180
And how you're going to deal with issues like lock, locking.

00:00:52.180 --> 00:00:57.140
And protocols talking back and forth to the data repository and the system.

00:00:57.140 --> 00:01:01.430
What is going to be the overall control regime of your application?

00:01:01.430 --> 00:01:01.930
Okay.

00:01:01.930 --> 00:01:05.420
Is your application going to be reactive, such,

00:01:05.420 --> 00:01:08.830
such as would be the case with, when you have a GUI and

00:01:08.830 --> 00:01:14.500
the user is controlling things with mouse clicks and, and key presses?

00:01:14.500 --> 00:01:18.240
Or is your application going to be proactive, that is, it has its own

00:01:19.480 --> 00:01:24.330
it has its own control in mind Whereby it

00:01:24.330 --> 00:01:28.880
calls the appropriate subcomponents in order to accomplish whatever its goal is.

00:01:28.880 --> 00:01:32.220
And finally, an important thing to consider is how you're going to handle

00:01:32.220 --> 00:01:34.330
errors and failures of various sorts.

00:01:34.330 --> 00:01:35.760
Okay?

00:01:35.760 --> 00:01:38.820
Is there a recovery technique you have in mind?

00:01:38.820 --> 00:01:43.520
Are there error reporting approaches you're going to take with the user?

00:01:43.520 --> 00:01:45.620
How are you going to deal with that overall problem?

