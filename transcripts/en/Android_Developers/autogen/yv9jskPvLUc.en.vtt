WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.270
 
hi my name is Lisa Raye and I'm a

00:00:02.270 --> 00:00:02.280
hi my name is Lisa Raye and I'm a
 

00:00:02.280 --> 00:00:03.830
hi my name is Lisa Raye and I'm a
developer advocate with the Google

00:00:03.830 --> 00:00:03.840
developer advocate with the Google
 

00:00:03.840 --> 00:00:05.990
developer advocate with the Google
developer relations team if you're

00:00:05.990 --> 00:00:06.000
developer relations team if you're
 

00:00:06.000 --> 00:00:07.430
developer relations team if you're
interested in fitness and you want to

00:00:07.430 --> 00:00:07.440
interested in fitness and you want to
 

00:00:07.440 --> 00:00:08.870
interested in fitness and you want to
give yourself or your users more

00:00:08.870 --> 00:00:08.880
give yourself or your users more
 

00:00:08.880 --> 00:00:10.220
give yourself or your users more
information with just the device you

00:00:10.220 --> 00:00:10.230
information with just the device you
 

00:00:10.230 --> 00:00:11.810
information with just the device you
already have in your pocket you're in

00:00:11.810 --> 00:00:11.820
already have in your pocket you're in
 

00:00:11.820 --> 00:00:13.640
already have in your pocket you're in
the right place today I'm going to talk

00:00:13.640 --> 00:00:13.650
the right place today I'm going to talk
 

00:00:13.650 --> 00:00:14.990
the right place today I'm going to talk
about the step sensors available

00:00:14.990 --> 00:00:15.000
about the step sensors available
 

00:00:15.000 --> 00:00:18.650
about the step sensors available
starting with Android KitKat these step

00:00:18.650 --> 00:00:18.660
starting with Android KitKat these step
 

00:00:18.660 --> 00:00:20.179
starting with Android KitKat these step
sensors are Hardware sensors based on

00:00:20.179 --> 00:00:20.189
sensors are Hardware sensors based on
 

00:00:20.189 --> 00:00:21.710
sensors are Hardware sensors based on
the accelerometer they're designed to be

00:00:21.710 --> 00:00:21.720
the accelerometer they're designed to be
 

00:00:21.720 --> 00:00:23.120
the accelerometer they're designed to be
low-power and won't burn through your

00:00:23.120 --> 00:00:23.130
low-power and won't burn through your
 

00:00:23.130 --> 00:00:25.519
low-power and won't burn through your
battery the step sensors count steps

00:00:25.519 --> 00:00:25.529
battery the step sensors count steps
 

00:00:25.529 --> 00:00:27.019
battery the step sensors count steps
during walking running and climbing

00:00:27.019 --> 00:00:27.029
during walking running and climbing
 

00:00:27.029 --> 00:00:28.400
during walking running and climbing
stairs and they're smart enough not to

00:00:28.400 --> 00:00:28.410
stairs and they're smart enough not to
 

00:00:28.410 --> 00:00:29.900
stairs and they're smart enough not to
count activities like biking driving

00:00:29.900 --> 00:00:29.910
count activities like biking driving
 

00:00:29.910 --> 00:00:34.910
count activities like biking driving
cars or riding in trains Android has two

00:00:34.910 --> 00:00:34.920
cars or riding in trains Android has two
 

00:00:34.920 --> 00:00:36.920
cars or riding in trains Android has two
sensors for step counting the first is

00:00:36.920 --> 00:00:36.930
sensors for step counting the first is
 

00:00:36.930 --> 00:00:39.260
sensors for step counting the first is
the step detector it fires an event when

00:00:39.260 --> 00:00:39.270
the step detector it fires an event when
 

00:00:39.270 --> 00:00:41.060
the step detector it fires an event when
a step is detected one event per step

00:00:41.060 --> 00:00:41.070
a step is detected one event per step
 

00:00:41.070 --> 00:00:43.220
a step is detected one event per step
the only value in return is one so if

00:00:43.220 --> 00:00:43.230
the only value in return is one so if
 

00:00:43.230 --> 00:00:44.540
the only value in return is one so if
you want to count steps you have to do

00:00:44.540 --> 00:00:44.550
you want to count steps you have to do
 

00:00:44.550 --> 00:00:46.819
you want to count steps you have to do
that yourself there are two ways to

00:00:46.819 --> 00:00:46.829
that yourself there are two ways to
 

00:00:46.829 --> 00:00:48.440
that yourself there are two ways to
receive events from the step sector

00:00:48.440 --> 00:00:48.450
receive events from the step sector
 

00:00:48.450 --> 00:00:52.010
receive events from the step sector
continuously or in batches if you

00:00:52.010 --> 00:00:52.020
continuously or in batches if you
 

00:00:52.020 --> 00:00:53.569
continuously or in batches if you
register your listener with a maximum

00:00:53.569 --> 00:00:53.579
register your listener with a maximum
 

00:00:53.579 --> 00:00:55.400
register your listener with a maximum
delay of zero then you'll get continuous

00:00:55.400 --> 00:00:55.410
delay of zero then you'll get continuous
 

00:00:55.410 --> 00:00:57.260
delay of zero then you'll get continuous
events posted as faster the sensor can

00:00:57.260 --> 00:00:57.270
events posted as faster the sensor can
 

00:00:57.270 --> 00:00:59.180
events posted as faster the sensor can
produce them the step detector has a

00:00:59.180 --> 00:00:59.190
produce them the step detector has a
 

00:00:59.190 --> 00:01:00.979
produce them the step detector has a
pretty low latency so the times at which

00:01:00.979 --> 00:01:00.989
pretty low latency so the times at which
 

00:01:00.989 --> 00:01:02.180
pretty low latency so the times at which
you receive step events should

00:01:02.180 --> 00:01:02.190
you receive step events should
 

00:01:02.190 --> 00:01:03.590
you receive step events should
correspond closely with the user's

00:01:03.590 --> 00:01:03.600
correspond closely with the user's
 

00:01:03.600 --> 00:01:06.950
correspond closely with the user's
actual steps on the other hand if you

00:01:06.950 --> 00:01:06.960
actual steps on the other hand if you
 

00:01:06.960 --> 00:01:09.020
actual steps on the other hand if you
don't need real-time reporting you can

00:01:09.020 --> 00:01:09.030
don't need real-time reporting you can
 

00:01:09.030 --> 00:01:11.390
don't need real-time reporting you can
allow events to be bashed by providing a

00:01:11.390 --> 00:01:11.400
allow events to be bashed by providing a
 

00:01:11.400 --> 00:01:13.429
allow events to be bashed by providing a
higher maximum delay you'll still get

00:01:13.429 --> 00:01:13.439
higher maximum delay you'll still get
 

00:01:13.439 --> 00:01:15.410
higher maximum delay you'll still get
one event per step but in this example

00:01:15.410 --> 00:01:15.420
one event per step but in this example
 

00:01:15.420 --> 00:01:17.420
one event per step but in this example
the events could come up as much as five

00:01:17.420 --> 00:01:17.430
the events could come up as much as five
 

00:01:17.430 --> 00:01:19.249
the events could come up as much as five
seconds afterward this allows for

00:01:19.249 --> 00:01:19.259
seconds afterward this allows for
 

00:01:19.259 --> 00:01:21.620
seconds afterward this allows for
optimization of the sensor level so be a

00:01:21.620 --> 00:01:21.630
optimization of the sensor level so be a
 

00:01:21.630 --> 00:01:23.270
optimization of the sensor level so be a
good Android citizen and only ask for

00:01:23.270 --> 00:01:23.280
good Android citizen and only ask for
 

00:01:23.280 --> 00:01:24.770
good Android citizen and only ask for
months as quickly as you actually need

00:01:24.770 --> 00:01:24.780
months as quickly as you actually need
 

00:01:24.780 --> 00:01:29.149
months as quickly as you actually need
them the step counter is similar to the

00:01:29.149 --> 00:01:29.159
them the step counter is similar to the
 

00:01:29.159 --> 00:01:31.010
them the step counter is similar to the
step detector and that it also sends one

00:01:31.010 --> 00:01:31.020
step detector and that it also sends one
 

00:01:31.020 --> 00:01:33.109
step detector and that it also sends one
event per step however the value it

00:01:33.109 --> 00:01:33.119
event per step however the value it
 

00:01:33.119 --> 00:01:34.730
event per step however the value it
sends is a cumulative number of steps

00:01:34.730 --> 00:01:34.740
sends is a cumulative number of steps
 

00:01:34.740 --> 00:01:36.560
sends is a cumulative number of steps
the step counter also takes a little

00:01:36.560 --> 00:01:36.570
the step counter also takes a little
 

00:01:36.570 --> 00:01:38.270
the step counter also takes a little
longer to process the event but it

00:01:38.270 --> 00:01:38.280
longer to process the event but it
 

00:01:38.280 --> 00:01:40.130
longer to process the event but it
produces fewer false positives so an

00:01:40.130 --> 00:01:40.140
produces fewer false positives so an
 

00:01:40.140 --> 00:01:42.080
produces fewer false positives so an
accuracy is paramount use the step

00:01:42.080 --> 00:01:42.090
accuracy is paramount use the step
 

00:01:42.090 --> 00:01:44.240
accuracy is paramount use the step
counter you can also request these

00:01:44.240 --> 00:01:44.250
counter you can also request these
 

00:01:44.250 --> 00:01:47.870
counter you can also request these
events as continuous or batched so how

00:01:47.870 --> 00:01:47.880
events as continuous or batched so how
 

00:01:47.880 --> 00:01:49.940
events as continuous or batched so how
do we use these sensors first check the

00:01:49.940 --> 00:01:49.950
do we use these sensors first check the
 

00:01:49.950 --> 00:01:52.219
do we use these sensors first check the
advice runs at least Android 4.4 and

00:01:52.219 --> 00:01:52.229
advice runs at least Android 4.4 and
 

00:01:52.229 --> 00:01:55.010
advice runs at least Android 4.4 and
that it has the sensors we want you can

00:01:55.010 --> 00:01:55.020
that it has the sensors we want you can
 

00:01:55.020 --> 00:01:56.990
that it has the sensors we want you can
require the sensors and minimum API

00:01:56.990 --> 00:01:57.000
require the sensors and minimum API
 

00:01:57.000 --> 00:02:00.380
require the sensors and minimum API
level in the manifest or if your app can

00:02:00.380 --> 00:02:00.390
level in the manifest or if your app can
 

00:02:00.390 --> 00:02:02.300
level in the manifest or if your app can
work without the step sensors you can

00:02:02.300 --> 00:02:02.310
work without the step sensors you can
 

00:02:02.310 --> 00:02:03.889
work without the step sensors you can
check programmatically for them using

00:02:03.889 --> 00:02:03.899
check programmatically for them using
 

00:02:03.899 --> 00:02:06.350
check programmatically for them using
the package manager

00:02:06.350 --> 00:02:06.360
the package manager
 

00:02:06.360 --> 00:02:08.880
the package manager
the simplest way to use the step sensors

00:02:08.880 --> 00:02:08.890
the simplest way to use the step sensors
 

00:02:08.890 --> 00:02:10.440
the simplest way to use the step sensors
is to listen for steps only while the

00:02:10.440 --> 00:02:10.450
is to listen for steps only while the
 

00:02:10.450 --> 00:02:12.300
is to listen for steps only while the
app is running unregistering and re

00:02:12.300 --> 00:02:12.310
app is running unregistering and re
 

00:02:12.310 --> 00:02:13.680
app is running unregistering and re
registering your listeners with the app

00:02:13.680 --> 00:02:13.690
registering your listeners with the app
 

00:02:13.690 --> 00:02:15.810
registering your listeners with the app
lifecycle and persisting the previous

00:02:15.810 --> 00:02:15.820
lifecycle and persisting the previous
 

00:02:15.820 --> 00:02:17.280
lifecycle and persisting the previous
step count to add to the new values

00:02:17.280 --> 00:02:17.290
step count to add to the new values
 

00:02:17.290 --> 00:02:19.860
step count to add to the new values
reported it is also possible to use the

00:02:19.860 --> 00:02:19.870
reported it is also possible to use the
 

00:02:19.870 --> 00:02:21.480
reported it is also possible to use the
step sensors in the background when the

00:02:21.480 --> 00:02:21.490
step sensors in the background when the
 

00:02:21.490 --> 00:02:22.710
step sensors in the background when the
CPU is suspended

00:02:22.710 --> 00:02:22.720
CPU is suspended
 

00:02:22.720 --> 00:02:24.600
CPU is suspended
this requires manually flushing the

00:02:24.600 --> 00:02:24.610
this requires manually flushing the
 

00:02:24.610 --> 00:02:28.220
this requires manually flushing the
sensor event queue before it overflows

00:02:28.220 --> 00:02:28.230
sensor event queue before it overflows
 

00:02:28.230 --> 00:02:30.540
sensor event queue before it overflows
speaking of listeners here's a sample

00:02:30.540 --> 00:02:30.550
speaking of listeners here's a sample
 

00:02:30.550 --> 00:02:32.400
speaking of listeners here's a sample
sensor event listener once you've

00:02:32.400 --> 00:02:32.410
sensor event listener once you've
 

00:02:32.410 --> 00:02:33.810
sensor event listener once you've
registered you get a callback to on

00:02:33.810 --> 00:02:33.820
registered you get a callback to on
 

00:02:33.820 --> 00:02:35.430
registered you get a callback to on
sensor change every time there's a step

00:02:35.430 --> 00:02:35.440
sensor change every time there's a step
 

00:02:35.440 --> 00:02:37.260
sensor change every time there's a step
event with some delay depending on

00:02:37.260 --> 00:02:37.270
event with some delay depending on
 

00:02:37.270 --> 00:02:39.420
event with some delay depending on
whether you requested batch mode this

00:02:39.420 --> 00:02:39.430
whether you requested batch mode this
 

00:02:39.430 --> 00:02:41.370
whether you requested batch mode this
listener is for a step detector here

00:02:41.370 --> 00:02:41.380
listener is for a step detector here
 

00:02:41.380 --> 00:02:43.230
listener is for a step detector here
we're implementing a set counter at this

00:02:43.230 --> 00:02:43.240
we're implementing a set counter at this
 

00:02:43.240 --> 00:02:44.880
we're implementing a set counter at this
point we can go ahead and display the

00:02:44.880 --> 00:02:44.890
point we can go ahead and display the
 

00:02:44.890 --> 00:02:46.770
point we can go ahead and display the
step count your listener will be

00:02:46.770 --> 00:02:46.780
step count your listener will be
 

00:02:46.780 --> 00:02:47.760
step count your listener will be
different depending on the type of

00:02:47.760 --> 00:02:47.770
different depending on the type of
 

00:02:47.770 --> 00:02:49.770
different depending on the type of
sensor and what you want to do with the

00:02:49.770 --> 00:02:49.780
sensor and what you want to do with the
 

00:02:49.780 --> 00:02:52.890
sensor and what you want to do with the
data to see this in action please

00:02:52.890 --> 00:02:52.900
data to see this in action please
 

00:02:52.900 --> 00:02:54.750
data to see this in action please
download the batch step sensor sample

00:02:54.750 --> 00:02:54.760
download the batch step sensor sample
 

00:02:54.760 --> 00:02:56.550
download the batch step sensor sample
linked from the video description for a

00:02:56.550 --> 00:02:56.560
linked from the video description for a
 

00:02:56.560 --> 00:02:58.740
linked from the video description for a
full working example of this code and go

00:02:58.740 --> 00:02:58.750
full working example of this code and go
 

00:02:58.750 --> 00:03:02.580
full working example of this code and go
take it for a walk thanks for watching

