WEBVTT
Kind: captions
Language: en

00:00:00.250 --> 00:00:03.000
So we're taking this
weight vector of ws and

00:00:03.000 --> 00:00:05.080
taking the dot product
with the feature weights.

00:00:05.080 --> 00:00:07.660
If the weights are all zero,
it's always going to predict zero

00:00:07.660 --> 00:00:10.300
which is actually the correct answer for
this NDP.

00:00:10.300 --> 00:00:13.280
So this it's really easy to set
the weights so that that happens.

00:00:13.280 --> 00:00:15.921
Is that the only way to set
the weights to make this happen?

00:00:15.921 --> 00:00:19.961
&gt;&gt; No because in fact for each one
of those states, there's only two

00:00:19.961 --> 00:00:24.147
features that are turned on and
there are different two features for

00:00:24.147 --> 00:00:28.640
every state except for state zero so
you could be pretty clever about it.

00:00:28.640 --> 00:00:33.201
So I think if you make the weight for
zero minus 1 maybe and

00:00:33.201 --> 00:00:38.904
then make features one through six
one-half, that would get you 0 for

00:00:38.904 --> 00:00:44.725
everything except state seven and
then state seven just needed to be 7.

00:00:44.725 --> 00:00:46.449
&gt;&gt; y or a seventh?

00:00:46.449 --> 00:00:47.527
&gt;&gt; 7.
7, good.

00:00:47.527 --> 00:00:52.455
So in particular, this weight vector
times this feature vector is going

00:00:52.455 --> 00:00:56.760
to give us, well minus 7 plus
0 plus 0 plus 0 plus 7, so 0.

00:00:56.760 --> 00:01:00.420
For this other one, it's going to give
us minus 1, plus 0, plus 0, plus 0,

00:01:00.420 --> 00:01:03.110
plus 0, plus 0, plus 1, which is 0.

00:01:03.110 --> 00:01:05.690
So, yeah, so this is a weight vector.

00:01:05.690 --> 00:01:07.460
So, not only can we represent
the value function, but

00:01:07.460 --> 00:01:09.450
we can represent it in
multiple different ways.

00:01:09.450 --> 00:01:12.020
It is multiply representable,
which I spelled wrong.

00:01:12.020 --> 00:01:15.260
Multiply, which is spelled
the same as multiply,

00:01:15.260 --> 00:01:18.660
but it's representable
in at least two ways.

00:01:18.660 --> 00:01:21.936
&gt;&gt; Actually an infinite number of ways
because you take that vector minus 1,

00:01:21.936 --> 00:01:23.990
one-half, 7,

00:01:23.990 --> 00:01:27.380
the multiplier by any constant
including zero and then it will work.

00:01:28.380 --> 00:01:28.938
&gt;&gt; Nice.

00:01:28.938 --> 00:01:32.537
Multiplied by 0 and you get that first
weight vector that we talked about

00:01:32.537 --> 00:01:35.723
anything else that we get were
multiplying 0 times a constant.

00:01:35.723 --> 00:01:39.031
So in fact there's an infinite set
of weight vectors that all capture

00:01:39.031 --> 00:01:41.440
the optimal value function,
which is also 0s.

00:01:41.440 --> 00:01:44.170
And so, we have plenty of rope.

00:01:44.170 --> 00:01:46.130
We should be able to
build a rope ladder.

00:01:46.130 --> 00:01:47.620
&gt;&gt; Yeah, paying ourselves.

00:01:47.620 --> 00:01:50.620
&gt;&gt; Ultimately that's actually what's
going to happen in this case.

00:01:50.620 --> 00:01:52.920
But it seems quite friendly, right?

00:01:52.920 --> 00:01:53.780
It's also tiny, right?

00:01:53.780 --> 00:01:54.670
&gt;&gt; Yeah.

00:01:54.670 --> 00:01:56.845
&gt;&gt; These are all things that would
seem like it should make it so

00:01:56.845 --> 00:01:58.380
that it's really easy to get this right.

00:01:58.380 --> 00:01:59.500
&gt;&gt; So then that's get it right.

00:01:59.500 --> 00:02:03.860
&gt;&gt; Yeah, well so it turns out that
what Baird showed is that, if you

00:02:03.860 --> 00:02:07.950
give it the right sequence of updates,
it will actually spiral out of control.

00:02:07.950 --> 00:02:09.201
So let's take a look at that.

00:02:09.201 --> 00:02:09.701
&gt;&gt; Okay.

