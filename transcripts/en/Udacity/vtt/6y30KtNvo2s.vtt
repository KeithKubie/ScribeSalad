WEBVTT
Kind: captions
Language: en

00:00:00.430 --> 00:00:02.063
So, we've learned about
directions requests.

00:00:02.063 --> 00:00:04.345
How can we use this within our app?

00:00:05.570 --> 00:00:09.862
How about after users register locations
within a certain journey time from work,

00:00:09.862 --> 00:00:11.096
we show them the route.

00:00:11.096 --> 00:00:13.866
Okay, so we're going to
expand what we did last time.

00:00:13.866 --> 00:00:18.104
After the user looks for listings within
a 30 minute walk of their office say,

00:00:18.104 --> 00:00:21.900
we'll add a button inside that info
window that appears to allow them to

00:00:21.900 --> 00:00:24.448
display the route that
they would take to work.

00:00:24.448 --> 00:00:28.158
The first thing we'll do is add
a button that says view route inside

00:00:28.158 --> 00:00:32.215
the little info window that appears
when we search for places near work.

00:00:32.215 --> 00:00:35.780
This button will point to a new
function called displayDirections,

00:00:35.780 --> 00:00:37.259
which we'll create below.

00:00:37.259 --> 00:00:38.871
If you remember from last time,

00:00:38.871 --> 00:00:42.342
we could have multiple listings
that fall within our commute limit.

00:00:42.342 --> 00:00:46.135
So for each button we make,
we'll pass in that origin.

00:00:46.135 --> 00:00:47.964
We have some funky quotes here so

00:00:47.964 --> 00:00:50.756
that we can pass in
the string correctly as well.

00:00:50.756 --> 00:00:53.666
The origin that's passed
is the listings address,

00:00:53.666 --> 00:00:57.118
and the destination we'll use
is the user rendered address.

00:00:57.118 --> 00:00:59.833
Now we'll create our display
directions function.

00:00:59.833 --> 00:01:02.501
This will actually calculate
the directions and

00:01:02.501 --> 00:01:04.135
display the route on the map.

00:01:04.135 --> 00:01:07.375
We'll initialize a new direction
service instance for this,

00:01:07.375 --> 00:01:09.217
just like the rest of our services.

00:01:09.217 --> 00:01:14.880
We'll recapture the user-entered
destination and travel mode.

00:01:14.880 --> 00:01:17.730
We'll then calculate the route,
passing in the origin,

00:01:17.730 --> 00:01:20.490
the destination and the travel mode.

00:01:20.490 --> 00:01:24.566
When we get back the response, we'll
make sure that the status is okay, and

00:01:24.566 --> 00:01:27.127
then we'll create a new
directions renderer.

00:01:27.127 --> 00:01:31.576
Remember the detailed steps and
polyline from the web service response?

00:01:31.576 --> 00:01:35.051
This renderer takes care of
displaying that information.

00:01:35.051 --> 00:01:39.420
Now at this point, we could display
the route data to the user.

00:01:39.420 --> 00:01:43.543
We would just need to specify
the HTML div to put the route in

00:01:43.543 --> 00:01:47.852
by setting the panel parameter
in the directions renderer.

00:01:47.852 --> 00:01:51.596
There are some good examples of this in
our developer documentation linked in

00:01:51.596 --> 00:01:52.754
the instructor notes.

00:01:52.754 --> 00:01:55.847
I'm not going to do that, because I
don't think our user needs to see

00:01:55.847 --> 00:01:57.794
the step by step
directions in this case.

00:01:57.794 --> 00:02:01.501
But we are going to display
the resulting polyline on the map.

00:02:01.501 --> 00:02:04.957
I'm going to specify to
render that on our map.

00:02:04.957 --> 00:02:08.959
I'm going to tell it to get
the directions from our route response,

00:02:08.959 --> 00:02:13.199
and I'm going to specify that I want
the route to be dragable and green.

00:02:13.199 --> 00:02:16.878
If the routing was not successful,
we're going to let the user know and

00:02:16.878 --> 00:02:19.300
show them the status
code from the response.

00:02:19.300 --> 00:02:22.900
Okay, let's look for the listings within
the 30 minute walk of my office again.

00:02:22.900 --> 00:02:25.552
I'm going to view the root for this one.

00:02:25.552 --> 00:02:28.277
So going from our listing to the office,

00:02:28.277 --> 00:02:31.416
it looks like I would
walk down 16th street.

00:02:31.416 --> 00:02:34.594
And I think that would take me past
a crepe place which would be awesome.

00:02:34.594 --> 00:02:38.049
We'll talk more later about this,
but there are some specific

00:02:38.049 --> 00:02:42.297
features that you only get access to by
purchasing a Google Maps API license.

00:02:42.297 --> 00:02:46.168
I'm going to cover one of those features
now in our direction's request that

00:02:46.168 --> 00:02:47.590
falls in to that category.

00:02:47.590 --> 00:02:51.445
Real time traffic integration or
predictive traffic time allows

00:02:51.445 --> 00:02:55.941
us to specify additional things and
get back the predicted time in traffic.

00:02:55.941 --> 00:02:59.345
This is great for traffic heavy areas,
since the time in traffic

00:02:59.345 --> 00:03:02.195
can be drastically different
from the time without.

00:03:02.195 --> 00:03:05.303
If we add the driving options
parameter into the request,

00:03:05.303 --> 00:03:08.990
obviously the travel mode has to be
driving for this to be effective.

00:03:08.990 --> 00:03:11.440
We have the option to
specify a departure time,

00:03:11.440 --> 00:03:14.931
which is pretty cool if I want to give
users as an example the option of

00:03:14.931 --> 00:03:18.571
calculating a travel time en route
to the airport on Monday mornings.

00:03:18.571 --> 00:03:23.357
We can also specify a best guess,
optimistic or pessimistic traffic model,

00:03:23.357 --> 00:03:27.186
which can give us the routes and
travel times during lighter or

00:03:27.186 --> 00:03:28.672
heavier traffic days.

00:03:28.672 --> 00:03:32.578
Users may want to see a pessimistic
value if they're the nervous Nellie type

00:03:32.578 --> 00:03:34.383
and want to be at the airport early.

00:03:34.383 --> 00:03:37.953
Feel free to check out the video link
in the Instructor Notes on predictive

00:03:37.953 --> 00:03:38.710
traffic time.

00:03:38.710 --> 00:03:40.897
We won't include that
in our app right now.

00:03:40.897 --> 00:03:44.660
Let's test out some route
optimization using direction service

