WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:00.708
MALE SPEAKER: OK.

00:00:00.708 --> 00:00:03.630
So say we solve off line.

00:00:03.630 --> 00:00:08.025
And we improve the layout and
paint, and all that stuff.

00:00:08.025 --> 00:00:09.400
That's great and
all, but there's

00:00:09.400 --> 00:00:11.070
another piece of
the puzzle missing.

00:00:11.070 --> 00:00:13.990
And that's raw computation.

00:00:13.990 --> 00:00:15.950
So you wanted to do
something like a physics

00:00:15.950 --> 00:00:19.420
engine or real-time
video analysis.

00:00:19.420 --> 00:00:21.100
Pick out things that
are in an image.

00:00:21.100 --> 00:00:25.140
Face recognition over a whole
audience full of people.

00:00:25.140 --> 00:00:27.630
Can we get the performance
of near-native code

00:00:27.630 --> 00:00:30.660
without throwing security
out of the window?

00:00:30.660 --> 00:00:33.100
Well, here to say yes, and
hopefully some other words,

00:00:33.100 --> 00:00:35.938
it's Molly Mackinlay and
David Sehr, everyone.

00:00:35.938 --> 00:00:39.770
[APPLAUSE]

00:00:39.770 --> 00:00:42.500
DAVID SEHR: So it is really
the last talk of the day,

00:00:42.500 --> 00:00:44.360
so I don't want to
keep you too long.

00:00:44.360 --> 00:00:45.210
But we're going to talk
to you about something

00:00:45.210 --> 00:00:47.310
we think is really great--
Portable Native Client.

00:00:47.310 --> 00:00:47.979
I'm David Sehr.

00:00:47.979 --> 00:00:49.520
I'm the TL of the
Native Client team.

00:00:49.520 --> 00:00:51.228
MOLLY MACKINLAY: And
I'm Molly Mackinlay.

00:00:51.228 --> 00:00:52.940
I'm the PM on the
Native Client team.

00:00:52.940 --> 00:00:55.590
And you are getting to your
drinks soon, I promise.

00:00:55.590 --> 00:00:57.220
But we really appreciate
your attention

00:00:57.220 --> 00:00:59.760
for this final talk of the day.

00:00:59.760 --> 00:01:02.660
So I want to start off about
where Linus started off,

00:01:02.660 --> 00:01:04.680
with the fact that we
have a new web today.

00:01:04.680 --> 00:01:08.260
Our expectations for what you
can do on the web are changing.

00:01:08.260 --> 00:01:11.220
This native app on a
phone, versus a native app

00:01:11.220 --> 00:01:14.030
on a computer, versus
a website that you're

00:01:14.030 --> 00:01:17.090
navigating to-- these are
all starting to emerge.

00:01:17.090 --> 00:01:19.060
We aren't in the '90s anymore.

00:01:19.060 --> 00:01:23.064
Back in 1995, we had a
website that was mostly text.

00:01:23.064 --> 00:01:23.980
There were some links.

00:01:23.980 --> 00:01:25.700
You could click on some stuff.

00:01:25.700 --> 00:01:30.760
But mostly, it was
text, as you can see.

00:01:30.760 --> 00:01:33.660
We ended up having new
ways to link to things.

00:01:33.660 --> 00:01:37.430
We had Yahoo, Microsoft,
and even Google.

00:01:37.430 --> 00:01:40.790
It was pretty basic,
our interactions we had.

00:01:40.790 --> 00:01:44.770
Fast forward to today, and
we have much more rich ways

00:01:44.770 --> 00:01:46.700
of interacting with websites.

00:01:46.700 --> 00:01:51.510
Now we have interactive video
editing, data visualization,

00:01:51.510 --> 00:01:55.880
ways of showing what our
solar system looks like,

00:01:55.880 --> 00:01:57.500
and mapping applications.

00:01:57.500 --> 00:02:00.480
The web today is way more rich.

00:02:00.480 --> 00:02:03.790
One example, the Google+
Photos application.

00:02:03.790 --> 00:02:06.520
This is something you'd
expect much more on desktop,

00:02:06.520 --> 00:02:09.160
in Photoshop, than in a
web application you just

00:02:09.160 --> 00:02:10.520
navigate to.

00:02:10.520 --> 00:02:12.882
I'm going to start
off with a fast demo,

00:02:12.882 --> 00:02:14.590
just to keep you guys
from getting bored.

00:02:18.290 --> 00:02:21.260
So here, hopefully, is my lion.

00:02:21.260 --> 00:02:25.740
Let's go into the Edit mode.

00:02:25.740 --> 00:02:26.860
Move this over here.

00:02:29.370 --> 00:02:34.623
Maybe resize our window a
little bit, potentially.

00:02:37.611 --> 00:02:38.110
Drag.

00:02:38.110 --> 00:02:40.470
[? Green slide. ?]

00:02:40.470 --> 00:02:43.880
That might work.

00:02:43.880 --> 00:02:44.566
Perfect.

00:02:44.566 --> 00:02:45.190
OK.

00:02:45.190 --> 00:02:45.740
Lion.

00:02:45.740 --> 00:02:46.710
Huzzah.

00:02:46.710 --> 00:02:49.000
We can do some cool stuff,
like tuning our image.

00:02:49.000 --> 00:02:51.770
You can go and play with
some sliders yourself.

00:02:51.770 --> 00:02:55.330
Or just go with what
they're suggesting.

00:02:55.330 --> 00:02:58.250
We could Pop or Moody.

00:02:58.250 --> 00:02:59.950
Kinda cool.

00:02:59.950 --> 00:03:01.740
I'm always a Pop person.

00:03:01.740 --> 00:03:04.290
Let's go saturation level up.

00:03:04.290 --> 00:03:06.055
And apply that for
a little while.

00:03:06.055 --> 00:03:07.845
We also have a lot of
really cool filters

00:03:07.845 --> 00:03:11.090
that you can apply,
just right there.

00:03:11.090 --> 00:03:14.380
Some of my favorites
are these retro looks.

00:03:14.380 --> 00:03:17.110
I'm not retro, I don't know
what that really means,

00:03:17.110 --> 00:03:18.890
but they look cool.

00:03:18.890 --> 00:03:21.445
So Voyager is a fun one.

00:03:21.445 --> 00:03:23.700
You can also just shuffle
through it randomly

00:03:23.700 --> 00:03:25.315
until you find one you like.

00:03:25.315 --> 00:03:27.160
Wow, that looks funky.

00:03:27.160 --> 00:03:29.014
OK, let's apply that.

00:03:29.014 --> 00:03:31.180
And then bam, you have a
completely different image.

00:03:31.180 --> 00:03:32.590
Like, I don't know Photoshop.

00:03:32.590 --> 00:03:35.240
I would not know how to
do that if you put me

00:03:35.240 --> 00:03:36.800
on a native
application, and I had

00:03:36.800 --> 00:03:38.900
to edit this pixel by pixel.

00:03:38.900 --> 00:03:41.300
But compare the
images we have now.

00:03:41.300 --> 00:03:43.960
I've created a completely
different, and different style

00:03:43.960 --> 00:03:45.470
image than I had before.

00:03:45.470 --> 00:03:46.850
It's a really rich experience.

00:03:46.850 --> 00:03:50.160
And I think you'll all
agree, 20 years ago

00:03:50.160 --> 00:03:51.900
you would not see
this on a website.

00:03:51.900 --> 00:03:56.060
Today we're
expecting a lot more.

00:03:56.060 --> 00:03:57.970
Continuing on, these
native features,

00:03:57.970 --> 00:04:00.430
they're coming to
our web applications.

00:04:00.430 --> 00:04:02.110
Back in the day,
AutoCAD-- it really

00:04:02.110 --> 00:04:04.370
could only exist on a PC.

00:04:04.370 --> 00:04:08.680
Now there's a
Chrome app for that.

00:04:08.680 --> 00:04:12.290
We're not only asking for the
native capabilities in our web.

00:04:12.290 --> 00:04:15.730
We're having to ask developers
to develop for many platforms.

00:04:15.730 --> 00:04:20.870
They have a C++ application,
an Objective-C application,

00:04:20.870 --> 00:04:22.005
a JavaScript application.

00:04:22.005 --> 00:04:25.250
They're maintaining
many development stacks.

00:04:25.250 --> 00:04:26.810
Wouldn't it be great
if we could only

00:04:26.810 --> 00:04:28.910
maintain one stack
that could then

00:04:28.910 --> 00:04:30.950
be applied to these many
different platforms?

00:04:30.950 --> 00:04:35.270
Now that's an ideal I
would like to fight for.

00:04:35.270 --> 00:04:37.080
DAVID SEHR: OK, from
almost the beginning,

00:04:37.080 --> 00:04:39.580
people recognized, I think, the
potential of a web platform.

00:04:39.580 --> 00:04:43.370
But as Molly just described
just a second ago,

00:04:43.370 --> 00:04:45.892
the web didn't really have the
capability at the beginning

00:04:45.892 --> 00:04:48.100
to do some of these rich
interactions that we wanted.

00:04:48.100 --> 00:04:53.580
So way back in the mid
'90s, browser vendors

00:04:53.580 --> 00:04:57.120
added extension platforms,
or extension APIs.

00:04:57.120 --> 00:05:02.600
What in fact were things
like ActiveX and NPAPI.

00:05:02.600 --> 00:05:05.680
These were ways to get at the
underlying operating system

00:05:05.680 --> 00:05:08.280
features for things like
embedding a media controller,

00:05:08.280 --> 00:05:10.900
so you can listen to
your CDs, in those days.

00:05:10.900 --> 00:05:14.020
Or put up a local
database server.

00:05:14.020 --> 00:05:16.390
And these were
ways, as I say, that

00:05:16.390 --> 00:05:18.360
give you access to
some of the features

00:05:18.360 --> 00:05:20.850
that they thought were
cool in the native platform

00:05:20.850 --> 00:05:22.960
by drilling through
with these plugins

00:05:22.960 --> 00:05:26.010
to the underlying
native capabilities.

00:05:26.010 --> 00:05:28.860
Now, because these were
coding to the underlying

00:05:28.860 --> 00:05:31.050
native operating
system, they tended

00:05:31.050 --> 00:05:34.470
to be either platform specific,
in the case of ActiveX.

00:05:34.470 --> 00:05:36.955
Or things like NPAPI, where
you had to kind of know

00:05:36.955 --> 00:05:38.580
which platform you
were going to be on.

00:05:38.580 --> 00:05:40.871
So it was going to be compiled
for Windows or for Linux

00:05:40.871 --> 00:05:44.997
or for Mac, depending upon
which browser the user happened

00:05:44.997 --> 00:05:46.080
to be running at the time.

00:05:46.080 --> 00:05:48.540
Maybe a different set of
browser APIs, et cetera.

00:05:48.540 --> 00:05:50.150
So this is kind of a
complicated and cumbersome sort

00:05:50.150 --> 00:05:51.670
of way of programming
these things.

00:05:51.670 --> 00:05:55.940
And so you see at
about the same time,

00:05:55.940 --> 00:05:59.190
these plugins come up
that provide capabilities

00:05:59.190 --> 00:06:01.920
for getting at those underlying
operating system features,

00:06:01.920 --> 00:06:04.770
but through better
programming approaches.

00:06:04.770 --> 00:06:05.830
So you have Java.

00:06:05.830 --> 00:06:09.740
You have Flash and its
predecessors coming.

00:06:09.740 --> 00:06:12.370
And these are ways,
again, that gave you

00:06:12.370 --> 00:06:14.330
access to some of the
underlying features,

00:06:14.330 --> 00:06:19.580
such as canvases to draw on or
underlying database engines, et

00:06:19.580 --> 00:06:21.300
cetera.

00:06:21.300 --> 00:06:23.520
And much later, then
you have Silverlight,

00:06:23.520 --> 00:06:25.960
which is giving you the
capability to do this.

00:06:25.960 --> 00:06:28.720
And of course across a
broad spectrum of languages

00:06:28.720 --> 00:06:30.510
on the .NET framework.

00:06:30.510 --> 00:06:34.710
So this is sort of what
happened between the '90s

00:06:34.710 --> 00:06:37.665
and the mid-2000s were plugins.

00:06:37.665 --> 00:06:41.290
Now, plugins had a
number of issues,

00:06:41.290 --> 00:06:42.880
as I'm sure you're all aware.

00:06:42.880 --> 00:06:46.340
Plugins have this user
interaction where, gee, I

00:06:46.340 --> 00:06:48.000
go to a page, and it
says I need Flash.

00:06:48.000 --> 00:06:49.374
But I don't have
Flash installed,

00:06:49.374 --> 00:06:51.546
so I get this popup saying
I need to install Flash.

00:06:51.546 --> 00:06:53.170
Or I need Silverlight
for this content.

00:06:53.170 --> 00:06:54.935
Or I as a developer
need to know,

00:06:54.935 --> 00:06:56.310
am I going to get
to the people I

00:06:56.310 --> 00:06:59.180
want to get to if they don't
have the plugins installed?

00:06:59.180 --> 00:07:02.700
So it's kind of an unfortunate
interaction that way.

00:07:02.700 --> 00:07:05.689
And also, the plugins
tended to be-- well,

00:07:05.689 --> 00:07:07.480
you had what was running
inside the plugin.

00:07:07.480 --> 00:07:08.800
And you had what was
running outside the plugin.

00:07:08.800 --> 00:07:11.008
And there was always this
sort of jarring interaction

00:07:11.008 --> 00:07:12.230
between them.

00:07:12.230 --> 00:07:14.740
Which made for
sort of clunky UI,

00:07:14.740 --> 00:07:18.310
if you didn't really work very
hard at isolating that, or not

00:07:18.310 --> 00:07:21.020
isolating that little box,
that had your Java applet

00:07:21.020 --> 00:07:24.230
running in it, from
the rest of the page.

00:07:24.230 --> 00:07:28.710
And sort of most concerning
of all, all of the plugin APIs

00:07:28.710 --> 00:07:33.160
provided you with direct, native
access to the operating system.

00:07:33.160 --> 00:07:35.810
And that made the
possibility that bugs

00:07:35.810 --> 00:07:38.690
became security issues.

00:07:38.690 --> 00:07:40.820
And not just became
security issues,

00:07:40.820 --> 00:07:42.570
became security issues
that were prevalent

00:07:42.570 --> 00:07:43.486
just about everywhere.

00:07:43.486 --> 00:07:47.080
And just about all the plugins
we see security issues that

00:07:47.080 --> 00:07:50.400
have become-- and this is
2009, 2010 from Symantec--

00:07:50.400 --> 00:07:55.770
become serious issues
for security on the web.

00:07:55.770 --> 00:07:58.280
So fast forward now to 2008.

00:07:58.280 --> 00:08:01.671
2008, JavaScript
takes a new turn.

00:08:01.671 --> 00:08:03.670
Kernel ignites the
JavaScript performance spiral

00:08:03.670 --> 00:08:05.753
that we've all witnessed
over the last five years.

00:08:05.753 --> 00:08:08.070
And the web's not been static.

00:08:08.070 --> 00:08:10.652
The browser has been growing
this open web platform that

00:08:10.652 --> 00:08:12.860
has all these features we've
been hearing about today

00:08:12.860 --> 00:08:14.320
and we'll hear about tomorrow.

00:08:14.320 --> 00:08:16.450
And so it's a much
richer platform.

00:08:16.450 --> 00:08:18.770
So with JavaScript's
performance coming up

00:08:18.770 --> 00:08:21.560
and the platform getting
richer, a new approach

00:08:21.560 --> 00:08:24.010
to bringing native code to
the web comes to the fore.

00:08:24.010 --> 00:08:26.240
And that's exemplified
by Emscripten.

00:08:26.240 --> 00:08:29.770
Emscripten is you compile
from native to JavaScript

00:08:29.770 --> 00:08:31.830
and run it in the web platform.

00:08:31.830 --> 00:08:39.110
And Emscripten, we think, you
get the access to the features

00:08:39.110 --> 00:08:41.159
that you're after and
some of the performance--

00:08:41.159 --> 00:08:43.039
most of the
performance, perhaps.

00:08:43.039 --> 00:08:48.954
But there are some issues
still with Emscripten.

00:08:48.954 --> 00:08:50.370
The first one is,
if you're really

00:08:50.370 --> 00:08:53.340
developing a native application,
and it has memory management

00:08:53.340 --> 00:08:55.920
issues, for instance,
debugging a null pointer

00:08:55.920 --> 00:08:59.550
check in JavaScript is
not as easy as it sounds.

00:08:59.550 --> 00:09:03.030
Also, if you're trying to get
to all the native capabilities,

00:09:03.030 --> 00:09:06.670
for instance, threads,
it's not there yet.

00:09:06.670 --> 00:09:09.310
And furthermore, I said
most of the performance.

00:09:09.310 --> 00:09:15.180
Perhaps we get to 2x, within
2x of native performance.

00:09:15.180 --> 00:09:17.322
You would still like
to get to the remainder

00:09:17.322 --> 00:09:18.155
of that performance.

00:09:21.485 --> 00:09:23.110
So that brings us
to, why are we trying

00:09:23.110 --> 00:09:24.640
to bring native code to the web?

00:09:24.640 --> 00:09:25.830
Why are we talking about
bringing native code

00:09:25.830 --> 00:09:26.490
to the web?

00:09:26.490 --> 00:09:29.430
As I said, we still think
there's better performance yet

00:09:29.430 --> 00:09:29.930
to be had.

00:09:29.930 --> 00:09:31.850
From features like
threading, as well as

00:09:31.850 --> 00:09:34.980
from that last 50%
or more, and also

00:09:34.980 --> 00:09:37.850
increasing the
developer options.

00:09:37.850 --> 00:09:40.706
So in this team, we started
the Native Client project.

00:09:40.706 --> 00:09:42.080
And the Native
Client Project was

00:09:42.080 --> 00:09:45.340
about bringing native
capabilities-- threads,

00:09:45.340 --> 00:09:48.260
[? sending ?] instructions, et
cetera-- from the beginning.

00:09:48.260 --> 00:09:49.230
Bringing performance.

00:09:49.230 --> 00:09:50.780
Trying to get as close
to native performance

00:09:50.780 --> 00:09:52.696
as we could get while
still securely executing

00:09:52.696 --> 00:09:54.870
your application
in the web browser.

00:09:54.870 --> 00:09:57.140
And a familiar developer
model, so you can use GDB.

00:09:57.140 --> 00:09:58.831
And if you're a
native developer,

00:09:58.831 --> 00:10:00.330
you can debug in
the way that you've

00:10:00.330 --> 00:10:01.663
become accustomed to developing.

00:10:04.077 --> 00:10:05.660
MOLLY MACKINLAY: In
addition to trying

00:10:05.660 --> 00:10:09.340
to bring all of these native
capabilities in performance,

00:10:09.340 --> 00:10:11.610
we're also trying to do
something really simple.

00:10:11.610 --> 00:10:14.240
We're trying to open up
the web to all developers,

00:10:14.240 --> 00:10:16.930
not just developers who have
been graced with the ability

00:10:16.930 --> 00:10:18.560
to learn JavaScript.

00:10:18.560 --> 00:10:21.910
Many people start out
learning a C or C++ class.

00:10:21.910 --> 00:10:23.610
And they go and they
build applications

00:10:23.610 --> 00:10:25.665
that are useful and interesting.

00:10:25.665 --> 00:10:28.300
And everyone wants to have
access to those things,

00:10:28.300 --> 00:10:32.000
but they've been unable to
bring those to the web so far.

00:10:32.000 --> 00:10:33.960
And we want to give
them that opportunity.

00:10:33.960 --> 00:10:35.950
There are many different
coding languages

00:10:35.950 --> 00:10:37.390
that need to be brought.

00:10:37.390 --> 00:10:40.280
And we're looking
forward to doing that.

00:10:40.280 --> 00:10:43.560
An example of that is
the Bullet Physics demo

00:10:43.560 --> 00:10:45.730
that we released with
Portable Native Client.

00:10:45.730 --> 00:10:47.830
Let me navigate over here.

00:10:47.830 --> 00:10:52.970
Well, maybe navigate over here.

00:10:52.970 --> 00:10:54.370
Well, you can see
a sliver of it.

00:10:54.370 --> 00:10:55.078
That's something.

00:10:57.760 --> 00:11:00.240
Let's expand this again.

00:11:00.240 --> 00:11:01.080
Cool.

00:11:01.080 --> 00:11:03.270
This is mostly a
JavaScript application.

00:11:03.270 --> 00:11:06.290
What it's done is taken a C
library, the Bullet Physics

00:11:06.290 --> 00:11:10.230
library, and just embed
that capability in itself.

00:11:10.230 --> 00:11:12.770
Now I can interact
with my Jenga thing.

00:11:12.770 --> 00:11:13.960
I'm really bad at Jenga.

00:11:13.960 --> 00:11:17.620
I've learned that
through this application.

00:11:17.620 --> 00:11:19.700
And I can, as a
JavaScript developer,

00:11:19.700 --> 00:11:22.360
take advantage of this C
library right here in my page.

00:11:22.360 --> 00:11:24.380
And play around
with some things.

00:11:24.380 --> 00:11:26.030
Knock over lots of bricks.

00:11:26.030 --> 00:11:28.260
So that's one example of
how we could take advantage

00:11:28.260 --> 00:11:30.830
of Portable Native Client
to bring native performance

00:11:30.830 --> 00:11:33.500
to the web and
native capabilities.

00:11:33.500 --> 00:11:36.770
Now let's say that I'm
actually a C and C++ developer,

00:11:36.770 --> 00:11:38.630
and that's what I'm
comfortable with.

00:11:38.630 --> 00:11:40.230
All right, fine.

00:11:40.230 --> 00:11:45.210
I can also-- this is an example
of Lua, a Lua interpreter.

00:11:45.210 --> 00:11:47.270
This is written
almost entirely in C.

00:11:47.270 --> 00:11:51.100
And I can go and
take my native code

00:11:51.100 --> 00:11:53.310
and run it right
here, on the web.

00:11:53.310 --> 00:11:55.114
Here I have a--
well, actually, I

00:11:55.114 --> 00:11:56.655
don't know if this
is going to render

00:11:56.655 --> 00:11:59.990
very well in our
weirdly-- oh, donuts.

00:11:59.990 --> 00:12:01.780
That's surprisingly--

00:12:01.780 --> 00:12:03.880
DAVID SEHR: And who
doesn't like donuts here?

00:12:03.880 --> 00:12:06.289
MOLLY MACKINLAY: So this
is mostly a C application.

00:12:06.289 --> 00:12:07.580
And I've brought it to the web.

00:12:07.580 --> 00:12:10.100
I've brought it to all of
the viewers and people that

00:12:10.100 --> 00:12:11.790
can experience it there.

00:12:11.790 --> 00:12:15.100
So either way, no matter
what language I develop in,

00:12:15.100 --> 00:12:17.410
I now have access to
the web, to bring that

00:12:17.410 --> 00:12:20.190
to all of the people who
want to interact with it.

00:12:26.010 --> 00:12:26.890
DAVID SEHR: OK.

00:12:26.890 --> 00:12:27.650
So you've seen
some of the things

00:12:27.650 --> 00:12:28.700
that we're trying
to bring to the web.

00:12:28.700 --> 00:12:30.040
And you've seen a
demonstration, in fact,

00:12:30.040 --> 00:12:32.206
of some of these things
actually running in the web.

00:12:32.206 --> 00:12:33.840
So what is Portable
Native Client?

00:12:33.840 --> 00:12:36.390
Portable Native
Client is native code,

00:12:36.390 --> 00:12:40.212
security, platform independence.

00:12:40.212 --> 00:12:41.920
This is the web we're
talking about here.

00:12:41.920 --> 00:12:43.620
We want it to run on
all these platforms

00:12:43.620 --> 00:12:45.600
we talked about before.

00:12:45.600 --> 00:12:47.790
And performance, performance
as close to native

00:12:47.790 --> 00:12:52.599
as we can give
you, with security.

00:12:52.599 --> 00:12:54.390
MOLLY MACKINLAY: So
let's talk a little bit

00:12:54.390 --> 00:12:57.000
about how we give
you access to native.

00:12:57.000 --> 00:13:00.600
Now, this touches a little bit
on Joe's presentation earlier.

00:13:00.600 --> 00:13:02.860
But we're using the
Pepper API in order

00:13:02.860 --> 00:13:05.170
to give you access to
the native capabilities.

00:13:05.170 --> 00:13:10.130
This gives you secure access
to things like USB, OpenGL,

00:13:10.130 --> 00:13:15.100
mouse cursor lock, full screen,
and TCP and UDP messaging.

00:13:15.100 --> 00:13:16.790
This gives you really
all of the feature

00:13:16.790 --> 00:13:21.595
set of a native application,
but in a secure fashion.

00:13:21.595 --> 00:13:22.220
DAVID SEHR: OK.

00:13:22.220 --> 00:13:23.760
So security I talked
about just a moment ago.

00:13:23.760 --> 00:13:25.700
So you want to put
this wonderful piece

00:13:25.700 --> 00:13:27.400
that you've put into
your application.

00:13:27.400 --> 00:13:29.220
Now, this is a screenshot of
[? Air Mac, ?] which is not

00:13:29.220 --> 00:13:30.803
running on PNaCl,
for full disclosure.

00:13:30.803 --> 00:13:32.790
But this is the sort
of thing that people

00:13:32.790 --> 00:13:34.960
are doing with
Portable Native Client.

00:13:34.960 --> 00:13:37.930
So you want to put your piece
of native code in the web.

00:13:37.930 --> 00:13:40.410
Well, there are all
these browser APIs

00:13:40.410 --> 00:13:42.440
that the plugin APIs
gave you access to.

00:13:42.440 --> 00:13:44.700
There are also underlying
operating system APIs.

00:13:44.700 --> 00:13:47.450
And we said before
that unfiltered access

00:13:47.450 --> 00:13:49.630
to those things was what
gave rise to the security

00:13:49.630 --> 00:13:51.930
issues we've all come to
know and [? loathe. ?]

00:13:51.930 --> 00:13:54.187
What kind of security issues?

00:13:54.187 --> 00:13:56.770
Going and snagging your cookies,
doing something inappropriate

00:13:56.770 --> 00:13:57.360
with that.

00:13:57.360 --> 00:13:59.690
Going and sending your
credit card number

00:13:59.690 --> 00:14:02.992
cross-site to some
malicious site.

00:14:02.992 --> 00:14:04.700
Putting a keylogger
in that'll follow you

00:14:04.700 --> 00:14:07.570
for the rest of your session.

00:14:07.570 --> 00:14:09.970
Turning on your cam and
watching all sorts of things

00:14:09.970 --> 00:14:12.770
that you don't want
the web to know about.

00:14:12.770 --> 00:14:15.551
Or scraping your screen and
finding your bank account

00:14:15.551 --> 00:14:18.050
numbers, or other things that
might be up on another window.

00:14:18.050 --> 00:14:19.590
These are the kinds
of things that

00:14:19.590 --> 00:14:22.930
unfiltered API access can give
you that are really scary.

00:14:22.930 --> 00:14:25.640
So we're about providing
access to the features

00:14:25.640 --> 00:14:27.850
that Molly just
talked about, but not

00:14:27.850 --> 00:14:29.620
through unfiltered
access to these APIs.

00:14:32.140 --> 00:14:35.160
So with regard to
platform independence,

00:14:35.160 --> 00:14:37.260
Native Client from
the start was x86.

00:14:37.260 --> 00:14:40.580
We added ARM a year or so ago.

00:14:40.580 --> 00:14:43.990
And in fact, as Joe said before,
four out of the top five Amazon

00:14:43.990 --> 00:14:46.690
laptops are ARM devices
running Chrome OS.

00:14:46.690 --> 00:14:50.640
This is something we have a
very central commitment to.

00:14:50.640 --> 00:14:55.180
And we also run on the
other desktop platforms

00:14:55.180 --> 00:14:58.980
that Chrome runs on-- Windows,
Mac, Linux, Chrome OS.

00:15:00.749 --> 00:15:02.540
MOLLY MACKINLAY: Now,
it's really important

00:15:02.540 --> 00:15:04.020
to be platform independent.

00:15:04.020 --> 00:15:05.930
But I think you'll
all agree that we

00:15:05.930 --> 00:15:07.615
want to run on every browser.

00:15:07.615 --> 00:15:10.960
And unfortunately right
now, PNaCl is Chrome only.

00:15:10.960 --> 00:15:14.259
But we want to have a
cross-browser story as well.

00:15:14.259 --> 00:15:15.800
Now, if you're
developing for native,

00:15:15.800 --> 00:15:18.040
this is kind of what your
application structure would

00:15:18.040 --> 00:15:18.540
look like.

00:15:18.540 --> 00:15:20.150
You have your C++ file.

00:15:20.150 --> 00:15:22.320
It targets the Pepper
API to get access

00:15:22.320 --> 00:15:24.920
to all of those native
capabilities, which then talks

00:15:24.920 --> 00:15:27.520
to the browser and gives
you the right link up.

00:15:27.520 --> 00:15:29.520
If you're making a
PNaCl application,

00:15:29.520 --> 00:15:32.780
you'd compile your C++ file
to a portable executable--

00:15:32.780 --> 00:15:35.560
what we call a pexe-- and
that talks to the Pepper API,

00:15:35.560 --> 00:15:37.710
which is included in Chrome.

00:15:37.710 --> 00:15:40.480
Now, if you want to go and run
your application on another

00:15:40.480 --> 00:15:44.930
browser, you'd compile your
C++ file using Emscripten

00:15:44.930 --> 00:15:46.580
into a JavaScript file.

00:15:46.580 --> 00:15:48.830
Now that would start trying
to talk to the Pepper API,

00:15:48.830 --> 00:15:52.190
but that's not implemented
on another browser.

00:15:52.190 --> 00:15:54.750
We've created a solution
called pepper.js.

00:15:54.750 --> 00:15:58.750
This links up the calls in
your JavaScript application

00:15:58.750 --> 00:16:01.530
to the JavaScript APIs
in other browsers.

00:16:01.530 --> 00:16:05.520
Now your application can go
and run on multiple browsers.

00:16:05.520 --> 00:16:08.906
Example is one of
our demos, Voronoi.

00:16:08.906 --> 00:16:15.990
If I go over here, here I
have the Voronoi application.

00:16:15.990 --> 00:16:17.300
It has all of these dots.

00:16:17.300 --> 00:16:20.450
They're running around.

00:16:20.450 --> 00:16:22.615
I can refresh it.

00:16:22.615 --> 00:16:24.620
I'm running in
the PNaCl version,

00:16:24.620 --> 00:16:29.450
so that means that I can
hopefully scroll down here

00:16:29.450 --> 00:16:30.350
to the bottom.

00:16:33.489 --> 00:16:35.530
Hypothetically, I could
scroll down to the bottom

00:16:35.530 --> 00:16:37.830
and show you that I could
bump up our thread count

00:16:37.830 --> 00:16:40.540
and make this run even faster.

00:16:40.540 --> 00:16:42.104
Maybe I can still do that.

00:16:42.104 --> 00:16:42.604
Cool.

00:16:46.396 --> 00:16:48.332
Hypothetically.

00:16:48.332 --> 00:16:49.640
Fair enough.

00:16:49.640 --> 00:16:52.570
This always happens.

00:16:52.570 --> 00:16:55.540
Another option is that I could
be running that same demo,

00:16:55.540 --> 00:16:58.270
right here on my Nexus tablet.

00:16:58.270 --> 00:17:01.120
Which I could potentially
show you using the screen.

00:17:01.120 --> 00:17:03.520
Or I could just hold it
up, and you could all tell.

00:17:03.520 --> 00:17:04.869
Notice, it's running.

00:17:04.869 --> 00:17:06.209
It looks wonderful.

00:17:06.209 --> 00:17:08.250
And there's lots of points
and they're animating.

00:17:08.250 --> 00:17:10.490
And I would try
and do this, but I

00:17:10.490 --> 00:17:13.747
don't think it
would do anything.

00:17:13.747 --> 00:17:14.246
Fair enough.

00:17:17.520 --> 00:17:20.040
DAVID SEHR: OK, so Molly
gave you the visual demos.

00:17:20.040 --> 00:17:22.950
So here's the boring
text version of this.

00:17:22.950 --> 00:17:25.640
Across a broad variety of
benchmarks that we've run,

00:17:25.640 --> 00:17:29.100
we've seen overheads
are actually,

00:17:29.100 --> 00:17:32.139
relative to native performance,
in the 80 to 90% range.

00:17:32.139 --> 00:17:33.680
So we're able to
give you performance

00:17:33.680 --> 00:17:36.055
which is very close to native,
while keeping the security

00:17:36.055 --> 00:17:38.834
benefits we talked about before.

00:17:38.834 --> 00:17:40.000
And we're not the only ones.

00:17:40.000 --> 00:17:42.810
People in the broad
benchmark Native Client

00:17:42.810 --> 00:17:45.580
as being the closest
sort of approach

00:17:45.580 --> 00:17:51.070
to native code performance, even
after the asm.js announcements.

00:17:51.070 --> 00:17:53.920
So that's what you get.

00:17:53.920 --> 00:17:55.830
What do you have to do
to get a Native Client

00:17:55.830 --> 00:17:57.413
application going,
and what's actually

00:17:57.413 --> 00:17:59.100
going on under the hood?

00:17:59.100 --> 00:18:01.550
So you have your cool
piece of source code.

00:18:01.550 --> 00:18:05.130
You use our tool
called pnacl.clang.

00:18:05.130 --> 00:18:08.740
So we've based this
off the LLVM toolchain.

00:18:08.740 --> 00:18:10.850
The pexe, or the
portable executable,

00:18:10.850 --> 00:18:13.580
is actually a modified
version of LLVM bitcode

00:18:13.580 --> 00:18:16.720
that has been made a little
better for long-term use

00:18:16.720 --> 00:18:17.430
on the web.

00:18:17.430 --> 00:18:18.510
Once you put something
up on the web,

00:18:18.510 --> 00:18:20.930
the expectation is that it's
going to work for a long time

00:18:20.930 --> 00:18:21.440
to come.

00:18:21.440 --> 00:18:25.850
So we made some simplifications
to make that more possible.

00:18:25.850 --> 00:18:27.510
So you compile
using our toolchain.

00:18:27.510 --> 00:18:29.710
And you add this-- again,
we have a manifest file.

00:18:29.710 --> 00:18:31.280
The manifest file
gives you a way

00:18:31.280 --> 00:18:33.720
to specify where to find the
portable executable and also

00:18:33.720 --> 00:18:36.510
a way to specify some
metadata, some things

00:18:36.510 --> 00:18:40.750
about relative translation time
versus delivered performance

00:18:40.750 --> 00:18:43.240
trade offs, and such things.

00:18:43.240 --> 00:18:46.400
You put an embed
tag in, and boom.

00:18:46.400 --> 00:18:52.010
You have a page that's enabled
to run Portable Native Client.

00:18:52.010 --> 00:18:55.820
Now your user
comes and starts up

00:18:55.820 --> 00:18:57.830
the page that you just put up.

00:18:57.830 --> 00:19:00.290
And the browser,
Chrome, is going

00:19:00.290 --> 00:19:01.880
to see, well, there's
that embed tag.

00:19:01.880 --> 00:19:03.630
And it says that I'm
going to be referring

00:19:03.630 --> 00:19:04.610
to a portable executable.

00:19:04.610 --> 00:19:05.630
And of course, it's portable.

00:19:05.630 --> 00:19:07.790
It's not something I run
natively on the platform.

00:19:07.790 --> 00:19:09.680
So it's going to say,
I need a translation

00:19:09.680 --> 00:19:11.750
of that to run on my platform.

00:19:11.750 --> 00:19:13.474
So it'll ask for a translation.

00:19:13.474 --> 00:19:15.890
The translation then is done
by something called the PNaCl

00:19:15.890 --> 00:19:16.390
translator.

00:19:16.390 --> 00:19:18.530
Again, that's based on
part of the LLVM toolchain.

00:19:18.530 --> 00:19:21.440
In this case, it's one
of the LLVM backends.

00:19:21.440 --> 00:19:23.960
And the translator,
while streaming

00:19:23.960 --> 00:19:25.910
the portable executable
down, is translating

00:19:25.910 --> 00:19:29.060
the portable executable
into something,

00:19:29.060 --> 00:19:30.810
in this case, a native
ELF executable that

00:19:30.810 --> 00:19:33.150
actually runs on your platform.

00:19:33.150 --> 00:19:36.540
And running on
your platform-- OK,

00:19:36.540 --> 00:19:40.880
I just told you all the security
that you want to prevent.

00:19:40.880 --> 00:19:44.020
So we use something called
software fault isolation.

00:19:44.020 --> 00:19:46.750
And software fault
isolation creates a region,

00:19:46.750 --> 00:19:51.390
that we call the sandbox,
that you can guarantee

00:19:51.390 --> 00:19:56.750
that the executable can
only execute instructions

00:19:56.750 --> 00:20:00.730
that we've looked at--
the browser's looked at.

00:20:00.730 --> 00:20:04.400
That the instructions are
ones that are acceptable.

00:20:04.400 --> 00:20:06.790
And that they don't only
refer to memory that's

00:20:06.790 --> 00:20:09.290
in the application's
address range.

00:20:09.290 --> 00:20:13.640
So with that, this little piece
of the Native Client technology

00:20:13.640 --> 00:20:15.760
called a validator
actually validates

00:20:15.760 --> 00:20:18.320
those sets of constraints.

00:20:18.320 --> 00:20:21.220
And with that, it can
determine whether it's

00:20:21.220 --> 00:20:26.140
possible for this application
to have access to these APIs

00:20:26.140 --> 00:20:28.880
that we said were
dangerous before.

00:20:28.880 --> 00:20:31.720
And if it can't
validate the executable,

00:20:31.720 --> 00:20:36.550
if it can't prove that it
doesn't do these bad things,

00:20:36.550 --> 00:20:39.120
then we just flat refuse
to start the executable.

00:20:39.120 --> 00:20:40.770
So.

00:20:40.770 --> 00:20:43.060
On the other hand,
if it can show

00:20:43.060 --> 00:20:49.170
that this set of changes to
the underlying instructions

00:20:49.170 --> 00:20:53.730
are followed, then
we don't allow,

00:20:53.730 --> 00:20:55.610
or we won't be able
to get native access,

00:20:55.610 --> 00:20:58.660
unfiltered access to those
APIs, and it can run safely.

00:21:02.430 --> 00:21:07.130
So if it starts running, we
start it running at that point.

00:21:07.130 --> 00:21:08.680
And we start it running.

00:21:08.680 --> 00:21:10.670
All the while it's
running, if it

00:21:10.670 --> 00:21:12.640
wants to interact with
the outside system,

00:21:12.640 --> 00:21:14.510
it interacts through something
we call the Native Client

00:21:14.510 --> 00:21:15.009
Runtime.

00:21:15.009 --> 00:21:17.810
And the Native Client
Runtime will also

00:21:17.810 --> 00:21:19.310
enforce security
policies that we'll

00:21:19.310 --> 00:21:21.970
talk about in just a second.

00:21:21.970 --> 00:21:23.830
Now you might
remember, some of you,

00:21:23.830 --> 00:21:27.150
that in fact, whenever you
run a web page in Chrome,

00:21:27.150 --> 00:21:31.000
that page is actually
running in an outer sandbox.

00:21:31.000 --> 00:21:35.310
And so one more thing-- the
Native Client sandbox is also

00:21:35.310 --> 00:21:36.890
running inside the
Chrome sandbox.

00:21:36.890 --> 00:21:39.530
So we have sandboxes
inside of sandboxes.

00:21:39.530 --> 00:21:43.630
For the "Inception"
challenge, that's-- anyway.

00:21:43.630 --> 00:21:46.780
So we have sandboxes
inside of sandboxes.

00:21:46.780 --> 00:21:51.531
And with this, we've crafted
the cones of silence.

00:21:51.531 --> 00:21:52.030
Right?

00:21:52.030 --> 00:21:57.110
So now we have two processes
that can't talk to each other.

00:21:57.110 --> 00:21:59.900
And of course, that
hearkens back to PPAPI

00:21:59.900 --> 00:22:04.530
is the way that applications can
securely talk to the browser,

00:22:04.530 --> 00:22:06.260
and get access to
these native features

00:22:06.260 --> 00:22:10.113
that the application wants,
and retain the security

00:22:10.113 --> 00:22:11.487
that we need for
the native code.

00:22:13.884 --> 00:22:15.300
MOLLY MACKINLAY:
So we've told you

00:22:15.300 --> 00:22:18.480
a little bit about why we
need native code in the web.

00:22:18.480 --> 00:22:21.580
We've shown the performance
benefits you can get.

00:22:21.580 --> 00:22:23.870
And we've told you a little
bit about how we do it,

00:22:23.870 --> 00:22:26.360
how this works under the hood.

00:22:26.360 --> 00:22:30.180
So where we going
with this next?

00:22:30.180 --> 00:22:33.170
We're trying to bring these
native capabilities to the web,

00:22:33.170 --> 00:22:36.700
because it enables a really rich
interaction, a really rich set

00:22:36.700 --> 00:22:39.750
of applications, that
we believe should exist.

00:22:39.750 --> 00:22:41.250
But we're not quite done.

00:22:41.250 --> 00:22:43.520
We want to keep improving
on our techniques,

00:22:43.520 --> 00:22:46.910
on how we get these
applications up and running.

00:22:46.910 --> 00:22:49.850
I'm going to give you a little
bit of an analogy in explaining

00:22:49.850 --> 00:22:53.220
our future directions on how
to make this even better.

00:22:53.220 --> 00:22:55.420
First off, we want to
speed up your lion.

00:22:55.420 --> 00:22:57.550
We want to increase
your translation time.

00:22:57.550 --> 00:22:59.630
A user navigates
to your page that's

00:22:59.630 --> 00:23:02.080
running a PNaCl executable.

00:23:02.080 --> 00:23:04.780
It should load as quick
as we can make it.

00:23:04.780 --> 00:23:07.100
We also want to make
you even more capable,

00:23:07.100 --> 00:23:08.490
give your lion some claws.

00:23:08.490 --> 00:23:12.080
We're going to give you
both C++ exception handling

00:23:12.080 --> 00:23:15.120
and vectorized
instructions in PNaCl.

00:23:15.120 --> 00:23:19.270
We're also going to decrease
the size of your PNaCl bitcode,

00:23:19.270 --> 00:23:20.560
so that your page can load.

00:23:20.560 --> 00:23:22.990
And it'll download over
those crappy connections

00:23:22.990 --> 00:23:26.450
we've been talking about all
day, as quickly as we can.

00:23:26.450 --> 00:23:28.500
Finally, we really want
to be responsive to you,

00:23:28.500 --> 00:23:31.070
our developer community,
and moving forward

00:23:31.070 --> 00:23:33.540
in figuring out what are the
things that you need in order

00:23:33.540 --> 00:23:36.030
to make this the next rich
platform, the next way

00:23:36.030 --> 00:23:38.677
to make really
amazing applications.

00:23:38.677 --> 00:23:40.010
Thank you so much for your time.

00:23:40.010 --> 00:23:42.549
Please visit gonacl.com
if you have any questions.

00:23:42.549 --> 00:23:44.090
I'm not going to
hold you any longer.

00:23:44.090 --> 00:23:45.710
Go five minutes early.

00:23:45.710 --> 00:23:46.496
Have some drinks.

00:23:46.496 --> 00:23:47.870
And please come
and chat with us.

00:23:47.870 --> 00:23:49.134
We'll be right up here.

00:23:49.134 --> 00:23:50.300
Thank you so much for today.

00:23:50.300 --> 00:23:51.445
It's been wonderful.

00:23:51.445 --> 00:23:52.010
And cheers.

00:23:52.010 --> 00:23:57.760
[APPLAUSE]

