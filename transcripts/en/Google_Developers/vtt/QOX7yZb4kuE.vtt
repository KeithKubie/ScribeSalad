WEBVTT
Kind: captions
Language: en

00:00:00.320 --> 00:00:03.730
CRISPY: Hello, and welcome to
the "Google TV Developers

00:00:03.730 --> 00:00:05.900
Office Hours," Halloween
edition.

00:00:05.900 --> 00:00:10.020
I'm your host today, Crispy, and
I have with me Christian.

00:00:10.020 --> 00:00:14.400
As well, we have Les Vogel,
and a special guest today.

00:00:14.400 --> 00:00:16.950
Leon, why don't you introduce
yourself.

00:00:16.950 --> 00:00:20.420
LEON NICHOLLS: My name is Leon
Nicholls, and most people know

00:00:20.420 --> 00:00:23.590
me for being the developer
of Able Remote.

00:00:23.590 --> 00:00:24.780
CRISPY: Cool.

00:00:24.780 --> 00:00:27.830
So before we actually jump into
your demo, a few things

00:00:27.830 --> 00:00:29.730
that we're going to go over.

00:00:29.730 --> 00:00:31.840
I have some news.

00:00:31.840 --> 00:00:34.190
As our new format goes forward,
I'm introducing

00:00:34.190 --> 00:00:35.870
little bits of news.

00:00:35.870 --> 00:00:38.480
The first and foremost, I think
is on everybody's mind

00:00:38.480 --> 00:00:40.280
right now, the hurricane.

00:00:40.280 --> 00:00:44.050
Hurricane Sandy, that struck New
York recently, and kindly

00:00:44.050 --> 00:00:45.580
flooded out the subway system.

00:00:45.580 --> 00:00:48.610
So if you're in New York,
we feel for you.

00:00:48.610 --> 00:00:50.120
Hopefully it's not affecting
your Google

00:00:50.120 --> 00:00:53.220
TV development efforts.

00:00:53.220 --> 00:01:00.540
On completely unrelated news,
LG U+ has brought IPTV with

00:01:00.540 --> 00:01:02.820
Google TV to Korea.

00:01:02.820 --> 00:01:07.790
This launched October 15, and
I believe we had Psy as part

00:01:07.790 --> 00:01:09.720
of the promotional campaign
for that.

00:01:09.720 --> 00:01:10.470
CHRISTIAN: Yes, we did.

00:01:10.470 --> 00:01:12.820
CRISPY: So a little bit of
"Gangnam Style" going on.

00:01:12.820 --> 00:01:15.470
No, I will not break into
dance right now.

00:01:15.470 --> 00:01:18.830
That comes for later.

00:01:18.830 --> 00:01:19.730
What else is in the news?

00:01:19.730 --> 00:01:20.400
We have--

00:01:20.400 --> 00:01:23.130
Logitech has finally gotten
a Play Store update.

00:01:23.130 --> 00:01:25.740
So those of you with Logitech
reviews and you're developing

00:01:25.740 --> 00:01:29.930
on it, now if you have applied
the latest OTA which has gone

00:01:29.930 --> 00:01:31.920
out, you should see the
newer Play Store,

00:01:31.920 --> 00:01:33.400
which is kind of cool.

00:01:33.400 --> 00:01:37.950
And I guess last in my news
items, I have Hisense has put

00:01:37.950 --> 00:01:43.460
together a website announcing
their spiffy new device.

00:01:43.460 --> 00:01:44.760
You can check that out.

00:01:44.760 --> 00:01:47.100
I'll put the link in the show
notes afterwards, but for

00:01:47.100 --> 00:01:50.090
those who want to dive in and
check it right now, you can go

00:01:50.090 --> 00:01:51.340
to hisense-usa.com/ pulse/--

00:01:54.880 --> 00:01:56.980
P-U-L-S-E slash.

00:01:56.980 --> 00:01:58.990
And you can see all the details
about their new and

00:01:58.990 --> 00:02:01.840
upcoming device.

00:02:01.840 --> 00:02:04.770
So that brings us into our
newer segment, called

00:02:04.770 --> 00:02:06.040
Interesting Ideas.

00:02:06.040 --> 00:02:09.020
And the first thing I want to
talk about in Interesting

00:02:09.020 --> 00:02:12.560
Ideas this week is home
screen replacements.

00:02:12.560 --> 00:02:14.080
This is something that
I've started to look

00:02:14.080 --> 00:02:16.500
at a lot more recently.

00:02:16.500 --> 00:02:18.460
I've been toying around
with this at home.

00:02:18.460 --> 00:02:22.490
And there's actually a Google
TV home screen replacement I

00:02:22.490 --> 00:02:26.500
found in the Google Play
Store recently.

00:02:26.500 --> 00:02:27.590
I don't know how
good it is yet.

00:02:27.590 --> 00:02:30.860
I haven't played with it, but
I like the momentum, I like

00:02:30.860 --> 00:02:33.280
the direction that
it's going in.

00:02:33.280 --> 00:02:34.980
So if you want to check that
out, the one that I'm

00:02:34.980 --> 00:02:38.810
referring to is FREEdi Channels
for Google TV, and

00:02:38.810 --> 00:02:43.860
it's by MicroMacro Mobile, Inc.
So you should be able to

00:02:43.860 --> 00:02:45.330
find that in the Play Store.

00:02:45.330 --> 00:02:48.830
It looks like a really good V1
of home screen replacement.

00:02:48.830 --> 00:02:51.540
So that's something I would
highly encourage you guys to

00:02:51.540 --> 00:02:54.880
check out, and maybe consider
writing your own home screen

00:02:54.880 --> 00:02:56.330
replacement.

00:02:56.330 --> 00:02:58.630
So that's the first part of
the Interesting Ideas.

00:02:58.630 --> 00:03:02.270
The second part is, Leon, I want
to to hand over to you,

00:03:02.270 --> 00:03:05.700
so that way you can demo the
really cool thing that you

00:03:05.700 --> 00:03:08.900
shared with us earlier
in the week.

00:03:08.900 --> 00:03:13.770
LEON NICHOLLS: So I'll post
the YouTube link on the

00:03:13.770 --> 00:03:16.270
Google+ page for now.

00:03:16.270 --> 00:03:18.660
So if somebody wants to go and
look at that, it gives you an

00:03:18.660 --> 00:03:22.320
introduction to what I'm
talking about now.

00:03:22.320 --> 00:03:29.060
But basically, I got myself a
Raspberry Pi recently, and I'm

00:03:29.060 --> 00:03:32.750
trying to create a home
automation infrastructure for

00:03:32.750 --> 00:03:38.080
myself, which includes
controlling my Google TV.

00:03:38.080 --> 00:03:41.140
Now to do that at the moment,
there's code available from

00:03:41.140 --> 00:03:43.460
Google, but it's all
Android-based.

00:03:43.460 --> 00:03:48.370
So I'm not running Android on
my Raspberry Pi yet, maybe

00:03:48.370 --> 00:03:49.690
sometime soon.

00:03:49.690 --> 00:03:53.750
But I'm running Java on here,
and I wanted to have a way to

00:03:53.750 --> 00:03:56.920
control my Google TV
just using Java.

00:03:56.920 --> 00:04:03.190
So I took the Anymote library
and removed all the Android

00:04:03.190 --> 00:04:06.930
dependencies, and made
them all pure

00:04:06.930 --> 00:04:09.250
Java, and got it working.

00:04:09.250 --> 00:04:14.260
So now there is a library that
allows you to write Java

00:04:14.260 --> 00:04:17.649
programs that can control
your Google TV.

00:04:17.649 --> 00:04:21.040
And I'm running it on a
Raspberry Pi, but you can

00:04:21.040 --> 00:04:25.526
really run it anywhere
via the 1.6 JRE.

00:04:25.526 --> 00:04:31.000
From a desktop, or Windows, or
Mac OSX if you wanted to.

00:04:31.000 --> 00:04:32.790
There might be some interesting
things you could

00:04:32.790 --> 00:04:33.620
do with that.

00:04:33.620 --> 00:04:36.930
So for myself, I'm trying to
do some kind of automation

00:04:36.930 --> 00:04:40.190
thing, which would include
switching on the devices

00:04:40.190 --> 00:04:44.070
connected to the Google
TV device.

00:04:44.070 --> 00:04:47.850
And this sis just the the
first step of it.

00:04:47.850 --> 00:04:50.970
So after you watch the video,
you can also go and

00:04:50.970 --> 00:04:51.720
play with the code.

00:04:51.720 --> 00:04:55.950
I've open sourced the library
so that anybody can go and

00:04:55.950 --> 00:04:59.360
write their own Java programs,
and control their Google TV,

00:04:59.360 --> 00:05:01.870
maybe do some interesting
projects.

00:05:01.870 --> 00:05:06.720
As a follow-up on this first
open source library, I'm also

00:05:06.720 --> 00:05:09.880
going to make a version that
should run on the Android.

00:05:09.880 --> 00:05:13.150
Kind of bringing it
back home again.

00:05:13.150 --> 00:05:16.060
Because obviously, there would
be some interesting

00:05:16.060 --> 00:05:20.460
applications for second-screen
apps beyond just the scripting

00:05:20.460 --> 00:05:24.310
opportunities from
the Java library.

00:05:24.310 --> 00:05:26.260
Now in terms of the
functionality, anything you

00:05:26.260 --> 00:05:30.060
can do with your physical Google
TV remote, you can do

00:05:30.060 --> 00:05:32.530
with this Java library.

00:05:32.530 --> 00:05:34.600
And you can do anything
programmatically.

00:05:34.600 --> 00:05:38.500
So once you get past the
[? hearing ?] stage, from

00:05:38.500 --> 00:05:40.650
there on, you can write
everything in code.

00:05:40.650 --> 00:05:42.690
You don't actually have
to have a using

00:05:42.690 --> 00:05:44.350
place for the user.

00:05:44.350 --> 00:05:48.235
And so you could do some
interesting automated stuff

00:05:48.235 --> 00:05:50.706
with that

00:05:50.706 --> 00:05:54.860
CRISPY: So what do you see as a
typical automation scenario?

00:05:54.860 --> 00:05:56.570
LEON NICHOLLS: Well, for
example, the first thing I do

00:05:56.570 --> 00:05:59.240
in the morning is I switch
on the TV, and I go

00:05:59.240 --> 00:06:00.790
to a certain channel.

00:06:00.790 --> 00:06:03.870
So rather than doing that by
going through the remote, I

00:06:03.870 --> 00:06:07.570
can do that by maybe having a
sensor that picks up when I'm

00:06:07.570 --> 00:06:11.290
just walking through the room
and switch on the TV for me.

00:06:11.290 --> 00:06:12.850
That's a simple scenario.

00:06:12.850 --> 00:06:14.840
You could go to your favorite
channel, or go to your

00:06:14.840 --> 00:06:18.152
favorite website, maybe
look at the weather.

00:06:18.152 --> 00:06:20.250
There's all kinds of things
you can do with that.

00:06:20.250 --> 00:06:23.570
The other thing is that it's
not just about Google TV.

00:06:23.570 --> 00:06:26.560
It's nice that you can control
the other devices.

00:06:26.560 --> 00:06:30.560
You can control your AVR,
you can control your CD.

00:06:30.560 --> 00:06:35.170
So for example, I could
switch it on to play

00:06:35.170 --> 00:06:37.440
some music for me.

00:06:37.440 --> 00:06:39.050
So that's really nice.

00:06:39.050 --> 00:06:42.110
It gives me control over
things which is kind of

00:06:42.110 --> 00:06:45.390
complicated for me to do by
myself, if I didn't have the

00:06:45.390 --> 00:06:49.190
Google TV device support.

00:06:49.190 --> 00:06:51.806
CRISPY: So you see this is an
extension of home automation,

00:06:51.806 --> 00:06:53.960
and something you
could set up.

00:06:53.960 --> 00:06:57.105
Hey, you turn your key in your
front door, and automatically

00:06:57.105 --> 00:06:59.130
your TV comes on and maybe
it's controlling

00:06:59.130 --> 00:06:59.900
other things too, then.

00:06:59.900 --> 00:07:00.640
LEON NICHOLLS: Yeah, yeah.

00:07:00.640 --> 00:07:02.190
So this is the first
part of it.

00:07:02.190 --> 00:07:06.240
I've already started on the
second part, which will be a

00:07:06.240 --> 00:07:09.710
more full-fledged component
of what the final

00:07:09.710 --> 00:07:10.990
solution will be.

00:07:10.990 --> 00:07:13.520
But this is just one
simple case.

00:07:13.520 --> 00:07:17.170
You could also write your
own desktop app.

00:07:17.170 --> 00:07:21.925
If you wanted to have maybe a
Google TV GUI on your desktop

00:07:21.925 --> 00:07:23.750
computer, you could write
one with this.

00:07:23.750 --> 00:07:26.300
It's very easy to add [? GUI ?]
using the interface.

00:07:26.300 --> 00:07:28.685
The library was specifically
designed to be independent of

00:07:28.685 --> 00:07:30.610
the user interface.

00:07:30.610 --> 00:07:33.230
Let's say you want to use
JavaSwing to make your own UI,

00:07:33.230 --> 00:07:35.280
you can go ahead and do that.

00:07:35.280 --> 00:07:38.990
And so there's some interesting
use cases to just

00:07:38.990 --> 00:07:41.410
use it as a remote
or separately.

00:07:41.410 --> 00:07:43.730
CRISPY: So what made you choose
the Raspberry Pi over,

00:07:43.730 --> 00:07:45.950
say, Arduino or Netduino, or
any of the of the other

00:07:45.950 --> 00:07:48.910
multiboards that have
come out recently?

00:07:48.910 --> 00:07:52.590
LEON NICHOLLS: Oh, I've got a
pile of Arduinos here, too.

00:07:52.590 --> 00:07:55.270
This just happens to be the
coolest thing at the moment.

00:07:55.270 --> 00:07:58.100
It is really, really very
interesting to see at at this

00:07:58.100 --> 00:08:00.750
price point what you can do.

00:08:00.750 --> 00:08:03.370
It really is incredible, and
there's a lot of really

00:08:03.370 --> 00:08:06.390
interesting stuff happening in
that form, in terms of, not

00:08:06.390 --> 00:08:10.170
just Linux, but other OSes that
will be available for

00:08:10.170 --> 00:08:14.120
this [INAUDIBLE] soon,
including Android.

00:08:14.120 --> 00:08:17.630
You can run it at the moment,
it's extremely slow, but the

00:08:17.630 --> 00:08:18.950
Raspberry Pi [INAUDIBLE]

00:08:18.950 --> 00:08:22.040
Foundation are working on
an optimized version.

00:08:22.040 --> 00:08:24.650
So that could be very
interesting, to have Android

00:08:24.650 --> 00:08:26.980
running on here.

00:08:26.980 --> 00:08:29.980
Just imagine all kinds of
automation-type things, and

00:08:29.980 --> 00:08:31.630
you can write it all in the
same programming language.

00:08:31.630 --> 00:08:34.900
You don't have to even go to
Java if you wanted to.

00:08:34.900 --> 00:08:39.799
But yeah, it's one little toy
that's part of a bigger idea

00:08:39.799 --> 00:08:44.010
that I have for doing stuff
as a side project.

00:08:44.010 --> 00:08:44.430
CRISPY: Cool.

00:08:44.430 --> 00:08:48.830
So if people want to see what
you've done, or contribute, or

00:08:48.830 --> 00:08:51.770
ask you questions, how
can they do that?

00:08:51.770 --> 00:08:55.300
LEON NICHOLLS: Well I think the
best is to contact me via

00:08:55.300 --> 00:08:59.430
the GitHub source control.

00:08:59.430 --> 00:09:03.240
And if there's any questions
about that--

00:09:03.240 --> 00:09:05.840
Or otherwise, just
through Google+.

00:09:05.840 --> 00:09:07.450
Should be able to contact
me, I'll send a

00:09:07.450 --> 00:09:09.294
message or an email.

00:09:09.294 --> 00:09:10.540
CRISPY: OK.

00:09:10.540 --> 00:09:13.390
LEON NICHOLLS: Some developers
have alreadt indicated they're

00:09:13.390 --> 00:09:16.240
interested in it because there's
certain things they

00:09:16.240 --> 00:09:18.780
want to do that they can't do
Anymote library at the moment.

00:09:18.780 --> 00:09:20.860
So there might be something
interesting coming from other

00:09:20.860 --> 00:09:23.420
developers, too.

00:09:23.420 --> 00:09:24.850
CRISPY: Cool.

00:09:24.850 --> 00:09:29.220
Well, we'll post in the show
notes where to access the

00:09:29.220 --> 00:09:32.480
source code and how to view the
demo video that you put

00:09:32.480 --> 00:09:33.810
together that unfortunately
we couldn't

00:09:33.810 --> 00:09:37.270
show through the Hangout.

00:09:37.270 --> 00:09:41.440
And if anybody has questions for
Leon now, live, I guess we

00:09:41.440 --> 00:09:41.990
can take them.

00:09:41.990 --> 00:09:46.910
Otherwise, we're going to move
on to a discussion topic that

00:09:46.910 --> 00:09:49.490
Christian and I both found
very interesting.

00:09:49.490 --> 00:09:52.730
I think we've spent many hours
talking about this.

00:09:52.730 --> 00:09:56.380
CHRISTIAN: Oh, I have spent
years by now talking about

00:09:56.380 --> 00:09:58.400
this at various events.

00:09:58.400 --> 00:10:02.580
It's actually interesting, two
weekends ago, I was in Texas

00:10:02.580 --> 00:10:04.500
at the big Android barbecue.

00:10:04.500 --> 00:10:08.300
And there was a lot of Android
developers, and I was actually

00:10:08.300 --> 00:10:13.780
struck again how many developers
still don't fully

00:10:13.780 --> 00:10:17.360
utilize things like display
independent pixels or know

00:10:17.360 --> 00:10:21.280
about Android DPIs or things
like NinePatch Images.

00:10:21.280 --> 00:10:25.120
So for some developers, this is
really super-intuitive, for

00:10:25.120 --> 00:10:26.510
others it's not.

00:10:26.510 --> 00:10:28.020
CRISPY: I guess we should
introduce the topic.

00:10:28.020 --> 00:10:29.110
You kind of went
right into it.

00:10:29.110 --> 00:10:32.830
So there are Stack Overflow
questions

00:10:32.830 --> 00:10:33.730
that come up regularly.

00:10:33.730 --> 00:10:35.680
One of the ones that I pulled
out today, I'm just going to

00:10:35.680 --> 00:10:37.230
read it verbatim.

00:10:37.230 --> 00:10:39.440
"I started writing a
Google TV app and

00:10:39.440 --> 00:10:43.675
DisplayMetrics.widthPixels
equaled 1,804, and

00:10:43.675 --> 00:10:49.020
heightPixels equaled 1,008, and
densityDpI was set to 320.

00:10:49.020 --> 00:10:53.550
Has anyone got a setup for the
graphical layout editor,

00:10:53.550 --> 00:10:55.770
because I can't use WYSIWYG,
et cetera.

00:10:55.770 --> 00:10:59.000
Problems dealing with, hey, the
screen size isn't what I

00:10:59.000 --> 00:11:02.070
expected, and the resolution
isn't quite what I was

00:11:02.070 --> 00:11:02.670
expecting."

00:11:02.670 --> 00:11:11.030
So there are two main DPIs, the
213 DPI, and the 320 DPI.

00:11:11.030 --> 00:11:16.830
But with overscan, if a user
hasn't configured their Google

00:11:16.830 --> 00:11:22.020
TV properly or at all, or their
screen resolution is

00:11:22.020 --> 00:11:25.240
kind of weird because they've
got a low-grade screen that

00:11:25.240 --> 00:11:30.010
they've attached it to, you
might not end up with the same

00:11:30.010 --> 00:11:33.550
DPI that you expect or
the same number of

00:11:33.550 --> 00:11:35.330
device-independent pixels
as you expect.

00:11:35.330 --> 00:11:38.140
CHRISTIAN: Well, actually, the
DPI is not going to change.

00:11:38.140 --> 00:11:43.500
So the DPI is a function of 720p
versus 1080p resolution.

00:11:43.500 --> 00:11:44.120
CRISPY: Oh, that's right.

00:11:44.120 --> 00:11:44.960
Yes.

00:11:44.960 --> 00:11:49.430
CHRISTIAN: What is going to
change is the total available

00:11:49.430 --> 00:11:51.300
pixels on-screen.

00:11:51.300 --> 00:11:55.320
And as Crispy pointed out,
unfortunately, even today with

00:11:55.320 --> 00:11:58.930
digital televisions, there's
still overscan.

00:11:58.930 --> 00:12:02.670
Some TVs, depending on the
settings, do not display the

00:12:02.670 --> 00:12:06.710
full 1920 by 1080 pixels
on the screen.

00:12:06.710 --> 00:12:10.950
So as a platform, we basically
have two choices.

00:12:10.950 --> 00:12:15.560
We could always output from an
Android point of view, a

00:12:15.560 --> 00:12:21.310
full-screen, 1080p image, but
then each individual developer

00:12:21.310 --> 00:12:24.070
would have to deal with
the overscan.

00:12:24.070 --> 00:12:28.070
That is, for example, extremely
bad when you have

00:12:28.070 --> 00:12:31.470
icons that are on the top or
bottom of the screen, or left

00:12:31.470 --> 00:12:32.850
or right of the screen.

00:12:32.850 --> 00:12:37.480
So the decision that Google TV
made, a few years ago now, is

00:12:37.480 --> 00:12:40.690
to compensate for the overscan
by giving the user an option

00:12:40.690 --> 00:12:44.890
to adjust the screen size to
match the physical, available,

00:12:44.890 --> 00:12:46.690
screen size.

00:12:46.690 --> 00:12:51.320
And that can result in your
application running on Google

00:12:51.320 --> 00:12:57.940
TV, which has fewer than
1920 by 1080 pixels.

00:12:57.940 --> 00:13:00.880
CRISPY: The device-independent
pixel count--

00:13:00.880 --> 00:13:02.660
CHRISTIAN: So the
device-independent pixel count

00:13:02.660 --> 00:13:08.250
for 1080p is exactly half of
the physical pixel count.

00:13:08.250 --> 00:13:11.690
So on a full high-resolution
display, you

00:13:11.690 --> 00:13:14.650
would get 960 by 540.

00:13:14.650 --> 00:13:17.030
If you have overscan,
then it can be less.

00:13:17.030 --> 00:13:20.910
It can be 920 or 900
or sometimes even

00:13:20.910 --> 00:13:23.780
800 by 450 or something.

00:13:23.780 --> 00:13:26.290
I don't know what the minimum
is we support.

00:13:26.290 --> 00:13:31.870
But right now, at least, the
display-independent pixels are

00:13:31.870 --> 00:13:34.630
identical between
720 and 1080.

00:13:34.630 --> 00:13:38.630
So if you switch resolutions,
that does not change.

00:13:38.630 --> 00:13:43.290
And as Crispy's alluded, we have
constantly discussions in

00:13:43.290 --> 00:13:48.310
the office, trying to improve
and trying to see how we can

00:13:48.310 --> 00:13:50.680
make life easier
for developers.

00:13:50.680 --> 00:13:54.380
So I think one of the
discussions that we've had

00:13:54.380 --> 00:13:57.320
recently, and that I want to
just throw out to developers

00:13:57.320 --> 00:14:02.080
is, is it actually a good idea
to have those numbers that we

00:14:02.080 --> 00:14:06.820
have today, the 213
and the 240?

00:14:06.820 --> 00:14:08.590
CRISPY: So we want to open
it up to you guys,

00:14:08.590 --> 00:14:10.090
since you're here.

00:14:10.090 --> 00:14:11.940
Let's discuss this
a little bit.

00:14:11.940 --> 00:14:15.940
If anybody has strong opinions
about it, or ideas--

00:14:15.940 --> 00:14:18.240
CHRISTIAN: Do people actually
use display-independent

00:14:18.240 --> 00:14:21.710
pixels, or is this
something that--

00:14:21.710 --> 00:14:22.200
Yeah.

00:14:22.200 --> 00:14:25.350
So Leon is familiar with it.

00:14:25.350 --> 00:14:27.390
CRISPY: And just to be aware,
I've muted everybody, so you

00:14:27.390 --> 00:14:30.176
might have to unmute before
you can talk.

00:14:30.176 --> 00:14:33.055
LEON NICHOLLS: Yeah, so,
although UI on the TV at the

00:14:33.055 --> 00:14:36.700
moment is very basic, we have to
put that in because one of

00:14:36.700 --> 00:14:39.800
the things we did for our app
was to submit it to Sony to be

00:14:39.800 --> 00:14:41.080
a featured app.

00:14:41.080 --> 00:14:44.290
And they actually have a bunch
of tests, which includes

00:14:44.290 --> 00:14:47.690
running it at the lowest
or the most extreme

00:14:47.690 --> 00:14:50.130
case for the borders.

00:14:50.130 --> 00:14:53.376
And so the first thing was, we
had to make sure we had to do

00:14:53.376 --> 00:14:56.120
the DOD stuff correctly, but
secondly, we had to make sure

00:14:56.120 --> 00:14:59.500
that even with all the edges
cut off, that all the text

00:14:59.500 --> 00:15:02.460
specifically was visible.

00:15:02.460 --> 00:15:05.510
That's something we hadn't done
originally with the app.

00:15:08.390 --> 00:15:09.320
CHRISTIAN: Yeah.

00:15:09.320 --> 00:15:13.710
So one of the side effects of
what we have right now with

00:15:13.710 --> 00:15:20.770
320 DPI is that the screen size
effectively, as I said,

00:15:20.770 --> 00:15:23.520
is 960 by 540.

00:15:23.520 --> 00:15:27.910
That is actually fewer DPs than
what you would expect,

00:15:27.910 --> 00:15:29.460
for example, even on a tablet.

00:15:29.460 --> 00:15:34.120
So most tablets today
have 1200 by 720.

00:15:34.120 --> 00:15:40.140
So one of the the ideas that I'm
toying around with is if,

00:15:40.140 --> 00:15:43.340
for example, hypothetically,
we would change the DPIs to

00:15:43.340 --> 00:15:47.520
240, we would arrive
at more DPs--

00:15:47.520 --> 00:15:48.310
CRISPY: 1280 by 720.

00:15:48.310 --> 00:15:52.000
CHRISTIAN: Yeah, we would have
1280 by 720 on the screen.

00:15:52.000 --> 00:15:54.880
A side effect is, the fonts
would get smaller.

00:15:54.880 --> 00:16:00.700
So I think it's sort of a
trade off between giving

00:16:00.700 --> 00:16:03.580
developers more real estate on
the screen, or of course then

00:16:03.580 --> 00:16:04.560
shrinking, relatively
speaking--

00:16:04.560 --> 00:16:05.940
CRISPY: Every other
application.

00:16:05.940 --> 00:16:08.364
CHRISTIAN: --all
the other apps.

00:16:08.364 --> 00:16:10.370
So I don't know.

00:16:10.370 --> 00:16:13.260
Leon, do you feel when you
develop for Google TV, or

00:16:13.260 --> 00:16:17.030
anybody else on the video, do
you actually run out of DPs?

00:16:17.030 --> 00:16:20.290
Do you sometimes wish you would
have more DPs available?

00:16:20.290 --> 00:16:23.260
Or, for example, to transfer
your tablet

00:16:23.260 --> 00:16:26.180
layouts more easier?

00:16:26.180 --> 00:16:28.150
LEON NICHOLLS: I think it's
going to become maybe more of

00:16:28.150 --> 00:16:31.790
an issue as people develop
tablet apps and want to also

00:16:31.790 --> 00:16:33.160
do it for the TV.

00:16:33.160 --> 00:16:37.870
Because you're very aware
of this issue on the TV.

00:16:37.870 --> 00:16:39.390
That's kind of one issue.

00:16:39.390 --> 00:16:41.380
The other issue is it's almost
the reverse of it.

00:16:41.380 --> 00:16:44.540
The fact that you have less DPs
actually help you think

00:16:44.540 --> 00:16:47.590
about the TV experience
in a better way.

00:16:47.590 --> 00:16:51.670
To not fill the space with
everything, and not to have

00:16:51.670 --> 00:16:54.670
the same experience as you would
have on a mobile phone

00:16:54.670 --> 00:16:54.900
or a tablet.

00:16:54.900 --> 00:16:58.772
To really think about using
the space, but not try and

00:16:58.772 --> 00:17:00.150
fill it with everything.

00:17:00.150 --> 00:17:02.510
So I think it's probably
more of a norm

00:17:02.510 --> 00:17:04.670
on the mobile devices.

00:17:04.670 --> 00:17:08.030
So in a way, it helps, but it's
something I think most

00:17:08.030 --> 00:17:11.859
developers don't think of
when they go to the TV.

00:17:11.859 --> 00:17:14.550
And so maybe there is something
still not quite

00:17:14.550 --> 00:17:15.800
right about the process.

00:17:19.490 --> 00:17:19.890
CHRISTIAN: Yeah.

00:17:19.890 --> 00:17:24.550
I also think sometimes we have
to keep in mind with Google TV

00:17:24.550 --> 00:17:27.839
becoming more international,
and as Crispy said, we just

00:17:27.839 --> 00:17:31.840
had a very successful launch in
Korea, in other countries,

00:17:31.840 --> 00:17:35.290
people actually have smaller TVs
and smaller living rooms

00:17:35.290 --> 00:17:35.850
in general.

00:17:35.850 --> 00:17:39.360
So we've seen, for example in
Korea, what we call the

00:17:39.360 --> 00:17:42.350
10-foot experience here in the
US, it's really more like a

00:17:42.350 --> 00:17:43.500
5-foot experience.

00:17:43.500 --> 00:17:47.040
People sit closer to the TV,
but then they only have

00:17:47.040 --> 00:17:50.080
instead of a 60-inch television,
they have a

00:17:50.080 --> 00:17:55.500
35-inch television.

00:17:55.500 --> 00:18:00.340
CRISPY: Localization plays a
big role in this as well.

00:18:00.340 --> 00:18:03.150
I guess it wouldn't make sense
to give some sort of mode

00:18:03.150 --> 00:18:06.890
control to the developer,
then.

00:18:06.890 --> 00:18:10.110
We kind of have it already, with
720p and 1080p, and we've

00:18:10.110 --> 00:18:12.370
abstracted that away
with the 965/40.

00:18:12.370 --> 00:18:17.260
But imagine if there was some
programmatic way to--

00:18:17.260 --> 00:18:21.960
say I want to use the high
granularity mode, or low

00:18:21.960 --> 00:18:25.190
granularity mode to get those
different densities.

00:18:25.190 --> 00:18:27.120
I don't know, maybe it would
just add to the confusion in

00:18:27.120 --> 00:18:29.330
the layouts, though.

00:18:29.330 --> 00:18:32.550
CHRISTIAN: One of the ideas
we've tossed around here was,

00:18:32.550 --> 00:18:37.570
right now, the reason we have
213 DPs is so that when you

00:18:37.570 --> 00:18:42.390
switch to 720p, the number
of DPs stays constant.

00:18:42.390 --> 00:18:45.240
So the ratio is exactly
the same as the

00:18:45.240 --> 00:18:47.010
screen resolution ratio.

00:18:47.010 --> 00:18:52.390
So if we would go to just, for
example, 240, but keep 240 for

00:18:52.390 --> 00:18:59.540
both 720 and for 1080, then we
would end up with a situation

00:18:59.540 --> 00:19:02.540
where you have, relatively
speaking, more screen real

00:19:02.540 --> 00:19:07.470
estate on a 1080 screen
versus a 720 screen.

00:19:07.470 --> 00:19:09.360
That might be one idea.

00:19:09.360 --> 00:19:12.060
The other thing that I've
started to think about in my

00:19:12.060 --> 00:19:17.630
back of my mind is also 4K
screens, which are coming.

00:19:17.630 --> 00:19:21.630
CRISPY: I think we're still at
least half a decade to a full

00:19:21.630 --> 00:19:24.340
decade away from
realizing that.

00:19:24.340 --> 00:19:28.590
I mean, yes, the market's
accelerating but personally, I

00:19:28.590 --> 00:19:31.700
don't think the 4K screens are
going to make an appearance

00:19:31.700 --> 00:19:32.190
anytime soon.

00:19:32.190 --> 00:19:33.620
People are just getting into--

00:19:33.620 --> 00:19:34.220
CHRISTIAN: I know.

00:19:34.220 --> 00:19:37.290
CRISPY: --the space that
we have today.

00:19:37.290 --> 00:19:40.047
LEON NICHOLLS: The other fact
is as you get higher DPs, of

00:19:40.047 --> 00:19:44.580
course your resources grow.

00:19:44.580 --> 00:19:46.850
And it's [? expert ?] dramatic,
especially when you

00:19:46.850 --> 00:19:48.390
view the images.

00:19:48.390 --> 00:19:51.240
And specifically on Google TV,
since the storage space is

00:19:51.240 --> 00:19:54.500
quite limited, you can't really
go crazy on that site.

00:19:54.500 --> 00:19:58.490
CRISPY: It's 96 megabytes of
RAM, I think, is allocated per

00:19:58.490 --> 00:20:00.970
running application.

00:20:00.970 --> 00:20:02.876
LEON NICHOLLS: So that is
something you probably going

00:20:02.876 --> 00:20:05.830
to run in quite quickly when
you want to do high-res

00:20:05.830 --> 00:20:09.000
graphics at a high DP.

00:20:09.000 --> 00:20:11.840
CHRISTIAN: Sometimes developers
or users forget

00:20:11.840 --> 00:20:14.200
that when the resolution
doubles, your

00:20:14.200 --> 00:20:15.870
screen assets quadruple.

00:20:15.870 --> 00:20:16.610
LEON NICHOLLS: Yeah,
it's scary.

00:20:16.610 --> 00:20:20.910
CHRISTIAN: Square of the size.

00:20:20.910 --> 00:20:21.440
All right.

00:20:21.440 --> 00:20:24.690
So I would say in the comments,
let's just keep the

00:20:24.690 --> 00:20:25.630
conversation going.

00:20:25.630 --> 00:20:28.830
I'm curious about input
from developers who

00:20:28.830 --> 00:20:30.520
actually use DPs.

00:20:30.520 --> 00:20:32.660
And give us your feedback.

00:20:32.660 --> 00:20:35.990
Let us know if this is something
that you think works

00:20:35.990 --> 00:20:39.470
just fine, or if you struggle
with it, if you have any other

00:20:39.470 --> 00:20:42.860
ideas, stuff you've thought
about, let us know.

00:20:42.860 --> 00:20:46.920
CRISPY: We're in the planning
stages for future work.

00:20:46.920 --> 00:20:50.650
So the other thing that we
have going on for today's

00:20:50.650 --> 00:20:54.210
Hangout, if I can find
the window now.

00:20:54.210 --> 00:20:55.940
LEON NICHOLLS: Sorry, guys, can
I just make a suggestion

00:20:55.940 --> 00:20:57.530
in terms of this
DP discussion?

00:20:57.530 --> 00:20:59.745
Could we have a topic
in the tracker?

00:20:59.745 --> 00:21:02.056
Because then people can add
their comments there, and we

00:21:02.056 --> 00:21:04.350
can all look at the
same comments.

00:21:04.350 --> 00:21:06.930
With Issue Tracker.

00:21:06.930 --> 00:21:07.620
CRISPY: Issue Tracker?

00:21:07.620 --> 00:21:10.010
Yeah, that works.

00:21:10.010 --> 00:21:12.690
CHRISTIAN: Or Google+ thing.

00:21:12.690 --> 00:21:13.900
LEON NICHOLLS: Yeah, just
somewhere we can see the

00:21:13.900 --> 00:21:16.450
thread, because otherwise it's
just all independent kind of

00:21:16.450 --> 00:21:16.950
discussion.

00:21:16.950 --> 00:21:17.730
CRISPY: Right.

00:21:17.730 --> 00:21:20.070
I kind of like the Issue Tracker
one because I think it

00:21:20.070 --> 00:21:22.190
would also increase
the visibility.

00:21:22.190 --> 00:21:26.110
So do you want to create
the issue, Leo?

00:21:26.110 --> 00:21:26.770
LEON NICHOLLS: Sure.

00:21:26.770 --> 00:21:28.240
CRISPY: Awesome.

00:21:28.240 --> 00:21:30.690
All right, so, we have
two [? Dory ?]

00:21:30.690 --> 00:21:31.290
questions.

00:21:31.290 --> 00:21:34.740
And just to let everyone know
who's tuning in now or at a

00:21:34.740 --> 00:21:38.510
later time through YouTube at
our channel there, I've

00:21:38.510 --> 00:21:41.480
started to limit the time period
that people can add

00:21:41.480 --> 00:21:43.810
questions to the moderator.

00:21:43.810 --> 00:21:46.820
Typically I'm going to be
opening it up on the Monday at

00:21:46.820 --> 00:21:50.210
2:00 PM before the Wednesday
Hangout, and then the

00:21:50.210 --> 00:21:52.810
moderator closes off
at the time that we

00:21:52.810 --> 00:21:55.060
start the Hangout itself.

00:21:55.060 --> 00:21:57.670
So there's two questions here,
but I've also taken the

00:21:57.670 --> 00:22:01.170
liberty of searching through
Stack Overflow to find some

00:22:01.170 --> 00:22:04.200
what I consider interesting
questions that I think we

00:22:04.200 --> 00:22:05.720
could talk or discuss
a little bit.

00:22:05.720 --> 00:22:09.630
So let's start with the
moderator and then we can

00:22:09.630 --> 00:22:11.810
migrate into the Stack
Overflow questions.

00:22:11.810 --> 00:22:12.590
LES VOGEL: Yeah, Crispy There's

00:22:12.590 --> 00:22:17.170
also one on the thread.

00:22:17.170 --> 00:22:18.890
CRISPY: On the thread?

00:22:18.890 --> 00:22:22.685
I have too many channels of
information coming at me.

00:22:22.685 --> 00:22:25.950
LES VOGEL: It's basically asking
about the Google+ App

00:22:25.950 --> 00:22:28.560
optimized for Google TV.

00:22:28.560 --> 00:22:29.520
CRISPY: Ah.

00:22:29.520 --> 00:22:32.550
The Google+ App optimized
for Google TV.

00:22:32.550 --> 00:22:36.640
The only answer that I can say
is, I have nothing to announce

00:22:36.640 --> 00:22:38.480
at this time.

00:22:38.480 --> 00:22:40.070
I should have worn
that shirt today.

00:22:40.070 --> 00:22:42.450
I mean, that's just a
scary as my costume.

00:22:42.450 --> 00:22:45.907
So it is Halloween, for those
who are tuning in or like, why

00:22:45.907 --> 00:22:47.570
is this guy dressed
up this way?

00:22:47.570 --> 00:22:53.630
I'm wearing my circa 1991
Russian military general

00:22:53.630 --> 00:23:00.470
uniform with some KGB symbols
here, so I'm the spooky former

00:23:00.470 --> 00:23:01.940
military commander
on campus here.

00:23:01.940 --> 00:23:04.080
MALE SPEAKER: You have
no red on you.

00:23:04.080 --> 00:23:04.670
CRISPY: I've got red.

00:23:04.670 --> 00:23:05.720
You just can't see it here.

00:23:05.720 --> 00:23:08.730
I've also got with me--

00:23:08.730 --> 00:23:12.010
what military costume wouldn't
be complete without a flask

00:23:12.010 --> 00:23:14.350
full of vodka?

00:23:14.350 --> 00:23:15.240
MALE SPEAKER: Excellent.

00:23:15.240 --> 00:23:16.570
CRISPY: Excellent, yes.

00:23:16.570 --> 00:23:17.730
No, we're not going to
be drinking on the

00:23:17.730 --> 00:23:19.010
Hangout right now.

00:23:19.010 --> 00:23:20.280
CHRISTIAN: We'll save that
for the afternoon.

00:23:20.280 --> 00:23:23.240
CRISPY: We'll save that for
the after party, yeah.

00:23:23.240 --> 00:23:27.080
All right, let's jump into these
moderator questions and

00:23:27.080 --> 00:23:29.340
keep the pace going.

00:23:29.340 --> 00:23:32.770
"The documentation for the
GTV emulator located at

00:23:32.770 --> 00:23:33.036
developers.googl
e.com/tv/android

00:23:33.036 --> 00:23:41.460
/docs/gtv_emulator says 'You
cannot run the GTV emulator on

00:23:41.460 --> 00:23:43.320
Windows.' Is this true?

00:23:43.320 --> 00:23:49.010
When will GTV emulation be
available on Windows?" So Les,

00:23:49.010 --> 00:23:51.440
you can start, and I
will add things.

00:23:51.440 --> 00:23:53.190
LES VOGEL: Real soon.

00:23:53.190 --> 00:23:53.950
CRISPY: OK.

00:23:53.950 --> 00:23:56.260
That's the shortest answer
I think I've heard

00:23:56.260 --> 00:23:58.300
you give in a while.

00:23:58.300 --> 00:23:59.645
LES VOGEL: I sometimes
give those.

00:24:04.960 --> 00:24:13.350
The 212 emulator should be out
in a few days or a week.

00:24:13.350 --> 00:24:14.070
CRISPY: Stay tuned.

00:24:14.070 --> 00:24:15.610
It's coming.

00:24:15.610 --> 00:24:18.120
For those of you who are using
the emulator, there's a few

00:24:18.120 --> 00:24:20.250
things that I feel are important
to point out.

00:24:20.250 --> 00:24:23.350
And they are as follows.

00:24:23.350 --> 00:24:27.620
One, with the emulator, you
do not get full device

00:24:27.620 --> 00:24:28.550
compatibility.

00:24:28.550 --> 00:24:30.500
There's no HDMI in,
you don't have

00:24:30.500 --> 00:24:36.910
access to mDNS and Anymote.

00:24:36.910 --> 00:24:38.370
It's in its own little space,
there are hacks and

00:24:38.370 --> 00:24:39.960
work-arounds.

00:24:39.960 --> 00:24:42.998
I highly recommend that any
developer who's building for

00:24:42.998 --> 00:24:45.600
Google TV, get a Google
TV device.

00:24:45.600 --> 00:24:47.990
They're really not that
expensive, and if you're

00:24:47.990 --> 00:24:49.960
investing the time to develop,
you should do it

00:24:49.960 --> 00:24:51.560
with the real hardware.

00:24:51.560 --> 00:24:54.710
You'll have a much smoother time
transitioning into the

00:24:54.710 --> 00:24:55.600
space, I think.

00:24:55.600 --> 00:24:58.810
CHRISTIAN: Also, I think it's
really important if you create

00:24:58.810 --> 00:25:02.310
an application for the living
room, you need to use it in

00:25:02.310 --> 00:25:04.830
the living room, and
you need to try it.

00:25:04.830 --> 00:25:07.725
It's a very different
environment than creating an

00:25:07.725 --> 00:25:10.690
app in an emulator
on a desktop.

00:25:10.690 --> 00:25:12.860
I think the emulator
has its place for

00:25:12.860 --> 00:25:15.350
some limited UI testing.

00:25:15.350 --> 00:25:18.340
One other thing that does not
work in the emulator, really,

00:25:18.340 --> 00:25:19.730
is multimedia.

00:25:19.730 --> 00:25:22.950
And I think a lot of TV
applications should include

00:25:22.950 --> 00:25:26.380
streaming video, streaming
audio, which is really not

00:25:26.380 --> 00:25:29.100
very well simulated
in the emulator.

00:25:29.100 --> 00:25:29.380
CRISPY: Right.

00:25:29.380 --> 00:25:32.530
Well, you're in that mindset,
I've heard this a few times.

00:25:32.530 --> 00:25:34.020
You're sitting at your desk.

00:25:34.020 --> 00:25:37.230
You don't have a TV on your
desk, so you're like, well,

00:25:37.230 --> 00:25:39.440
what can I use so I can
keep my flow going.

00:25:39.440 --> 00:25:45.270
And the emulator seems to make
sense, but it's a stop-gap for

00:25:45.270 --> 00:25:46.780
only solving certain types
of development

00:25:46.780 --> 00:25:48.826
problems in the space.

00:25:48.826 --> 00:25:52.060
The other thing I hear a lot is,
can I connect the Google

00:25:52.060 --> 00:25:55.640
TV device to an HDMI monitor?

00:25:55.640 --> 00:25:59.280
You can, but the monitor has
to support HDCP, which not

00:25:59.280 --> 00:26:02.700
everybody realizes
or understands.

00:26:02.700 --> 00:26:07.110
So it can be a bit of a pain,
but maybe bring your laptop

00:26:07.110 --> 00:26:09.700
into your living room and code
that way, that works.

00:26:09.700 --> 00:26:13.120
I mean, we put TVs
on our desks.

00:26:13.120 --> 00:26:15.770
That's not practical for
everybody but it does get you

00:26:15.770 --> 00:26:17.470
farther than the
emulator will.

00:26:17.470 --> 00:26:19.656
At least from a real development
case, and keeps

00:26:19.656 --> 00:26:22.940
you in the right user
headspace, I think.

00:26:22.940 --> 00:26:26.000
CHRISTIAN: Yeah, also the remote
control is critical.

00:26:26.000 --> 00:26:27.895
On an emulator, you
use the keyboard.

00:26:30.470 --> 00:26:32.640
LES VOGEL: Really,
performance.

00:26:32.640 --> 00:26:37.080
And frankly, a real
box is only $99.

00:26:37.080 --> 00:26:40.670
MALE SPEAKER: The question came
from me, and I'm trying

00:26:40.670 --> 00:26:43.460
to get other people
interested.

00:26:43.460 --> 00:26:48.330
And if we can use the emulator
as sort of a lower platform

00:26:48.330 --> 00:26:51.465
for getting people in, they can
say, ooh, this is cool, I

00:26:51.465 --> 00:26:55.440
think I'll go out
and spend $99.

00:26:55.440 --> 00:26:59.180
And it sounds like in a couple
weeks or soon, it's going to

00:26:59.180 --> 00:27:01.860
be a non-issue, so whoo-hoo!

00:27:01.860 --> 00:27:03.380
CRISPY: If it's run on Windows,

00:27:03.380 --> 00:27:06.610
according to Les, yes.

00:27:06.610 --> 00:27:10.080
But nothing will substitute
the real device.

00:27:10.080 --> 00:27:11.730
MALE SPEAKER: Well, and
you saw my comment.

00:27:11.730 --> 00:27:14.750
I tried doing the debug with
the hardware device.

00:27:14.750 --> 00:27:19.700
It worked when I first got it,
but I'm on a different PC, on

00:27:19.700 --> 00:27:24.120
a different sub-net, and it
just got all confused.

00:27:24.120 --> 00:27:28.760
I've only spent 20 minutes
playing with it, so I could

00:27:28.760 --> 00:27:30.640
probably get something
to work.

00:27:30.640 --> 00:27:37.610
I don't really care, but my goal
was, if here's easy ways

00:27:37.610 --> 00:27:40.220
for people to start playing.

00:27:40.220 --> 00:27:41.170
CRISPY: OK.

00:27:41.170 --> 00:27:44.670
So maybe as you uncover those,
and figure out your workflow,

00:27:44.670 --> 00:27:47.870
I would highly encourage you to
maybe do some screencasts,

00:27:47.870 --> 00:27:49.980
and possibly post those
to your blog.

00:27:52.920 --> 00:27:56.120
MALE SPEAKER: I'm way behind on
the billions of screencasts

00:27:56.120 --> 00:28:00.650
I'm supposed to do, but it's
on my list, trust me.

00:28:00.650 --> 00:28:02.450
CRISPY: Awesome.

00:28:02.450 --> 00:28:06.000
LEON NICHOLLS: In our
experience, using the device

00:28:06.000 --> 00:28:08.150
is really the way to go.

00:28:08.150 --> 00:28:10.810
We spent some time with the
emulator, but you end up

00:28:10.810 --> 00:28:12.890
running into a problem pretty
soon no matter what kind of

00:28:12.890 --> 00:28:14.170
app you do.

00:28:14.170 --> 00:28:16.150
And it's so easy,
it's so fast.

00:28:16.150 --> 00:28:18.665
Once you've set it up, it is
really the fastest way of

00:28:18.665 --> 00:28:21.730
developing, so if you want to
be the most productive in

00:28:21.730 --> 00:28:26.140
writing Google TV apps,
use a device.

00:28:26.140 --> 00:28:28.430
MALE SPEAKER: That's what I
did when I first started

00:28:28.430 --> 00:28:30.150
playing with it.

00:28:30.150 --> 00:28:34.430
You may not know, my app is
to get app inventors to

00:28:34.430 --> 00:28:36.310
work with Google TV.

00:28:36.310 --> 00:28:40.530
I've got that solved, now it's
to get the app-inventor users

00:28:40.530 --> 00:28:44.820
to use the compiler to generate
Google TV ads.

00:28:44.820 --> 00:28:50.230
And for that, I'm just trying
to lower the entrance.

00:28:50.230 --> 00:28:52.410
Once they get in, I assume
that they'll

00:28:52.410 --> 00:28:55.450
do reasonable things.

00:28:55.450 --> 00:28:56.050
CRISPY: OK.

00:28:56.050 --> 00:28:59.130
It's a little hairy to set up,
but I'm encouraged by what

00:28:59.130 --> 00:29:01.570
you're doing, so hopefully you
can figure out how to get

00:29:01.570 --> 00:29:04.440
traction and let us know
how that goes.

00:29:04.440 --> 00:29:06.820
I'm going to move us on to the
next question, just to keep

00:29:06.820 --> 00:29:08.780
things flowing here.

00:29:08.780 --> 00:29:11.440
"What's the best component
to mount a

00:29:11.440 --> 00:29:13.660
horizontal list for TV?

00:29:13.660 --> 00:29:17.100
So HorizontalScrollView,
custom GridView, View,

00:29:17.100 --> 00:29:20.160
ViewPager, or other?"
This is from Brazil.

00:29:24.450 --> 00:29:25.770
Everybody goes silent.

00:29:25.770 --> 00:29:27.700
CHRISTIAN: Horizontal list.

00:29:27.700 --> 00:29:29.600
CRISPY: So I think what they're
asking is what's the

00:29:29.600 --> 00:29:30.385
best component--

00:29:30.385 --> 00:29:30.720
CHRISTIAN: It's a
gallery view.

00:29:30.720 --> 00:29:33.040
CRISPY: --for a gallery view.

00:29:33.040 --> 00:29:35.610
LES VOGEL: I know, I know, but
I can't talk about it.

00:29:35.610 --> 00:29:37.330
[LAUGHTER]

00:29:37.330 --> 00:29:38.575
CHRISTIAN: It's just
rectangles, Les.

00:29:38.575 --> 00:29:41.610
CRISPY: It's just rectangles,
nothing more.

00:29:41.610 --> 00:29:42.860
LES VOGEL: The rectangles,
exactly.

00:29:45.630 --> 00:29:50.760
CRISPY: So I'm going to say,
I'm a big fan of OpenGL.

00:29:50.760 --> 00:29:54.340
So you could really go crazy
and create your own custom

00:29:54.340 --> 00:29:57.000
widget with OpenGL surfaces
and loading images.

00:29:57.000 --> 00:29:57.930
LES VOGEL: Yes!

00:29:57.930 --> 00:30:00.410
CRISPY: Oh, Les is championing
that one.

00:30:00.410 --> 00:30:03.370
Christian here is cringing
beside me and sighing, so,

00:30:03.370 --> 00:30:04.200
what's your take?

00:30:04.200 --> 00:30:07.630
CHRISTIAN: Yeah, I think OpenGL
is actually fairly easy

00:30:07.630 --> 00:30:09.250
if you just have bitmaps
and stuff.

00:30:09.250 --> 00:30:13.040
So it's not rocket science.

00:30:13.040 --> 00:30:17.930
What I would say is, if you want
to stick with Android,

00:30:17.930 --> 00:30:20.400
just HorizontalScrollView
works fine.

00:30:20.400 --> 00:30:23.260
The focus issues are sometimes
a little bit tricky, so you

00:30:23.260 --> 00:30:27.114
may have to override your
focus handling.

00:30:27.114 --> 00:30:28.364
CRISPY: OK.

00:30:30.290 --> 00:30:33.644
Anybody else want to add
anything to that?

00:30:33.644 --> 00:30:35.030
LES VOGEL: That sounds right.

00:30:35.030 --> 00:30:36.600
CRISPY: All right.

00:30:36.600 --> 00:30:40.380
So with that, we'll move on to
the Stack Overflow questions

00:30:40.380 --> 00:30:42.600
that I pulled aside here.

00:30:42.600 --> 00:30:44.480
And these ones, again,
these are not in

00:30:44.480 --> 00:30:46.670
any specific priority.

00:30:46.670 --> 00:30:49.160
I went looking through the list,
and these are the ones

00:30:49.160 --> 00:30:50.390
that caught my eye.

00:30:50.390 --> 00:30:52.900
So I have one [? Vinnie ?]

00:30:52.900 --> 00:30:56.930
asked, "I'm trying to run Google
TV Maps example on the

00:30:56.930 --> 00:30:59.400
Google TV Emulator.

00:30:59.400 --> 00:31:02.930
I'm facing an issue, as the
emulator does not contain the

00:31:02.930 --> 00:31:06.500
Google Maps application that
apparently is required to run.

00:31:06.500 --> 00:31:08.915
Does Google TV support
Google Maps?"

00:31:08.915 --> 00:31:10.310
CHRISTIAN: Yes.

00:31:10.310 --> 00:31:11.370
CRISPY: Yeah, it does.

00:31:11.370 --> 00:31:14.680
But not as in a Maps
application.

00:31:14.680 --> 00:31:17.750
LES VOGEL: The Maps
API is supported.

00:31:17.750 --> 00:31:22.940
There's sample code called
Maps On TV, that's open

00:31:22.940 --> 00:31:26.460
sourced, and it's in Market.

00:31:26.460 --> 00:31:29.390
And you can build it
and play with it.

00:31:29.390 --> 00:31:29.670
CRISPY: Right.

00:31:29.670 --> 00:31:31.740
And if you wanted to add
Maps directly into your

00:31:31.740 --> 00:31:35.450
application, you could always
use the Maps API directly.

00:31:35.450 --> 00:31:35.580
LES VOGEL: Right.

00:31:35.580 --> 00:31:36.830
That's what Maps [INAUDIBLE].

00:31:39.720 --> 00:31:43.550
So and [? ByBob ?] wrote that.

00:31:43.550 --> 00:31:45.770
CRISPY: So [? Vinnie, ?]
hopefully you will see that

00:31:45.770 --> 00:31:50.380
and make some progress with
the app you're building.

00:31:50.380 --> 00:31:54.060
Another question from
[? Terraloca. ?]

00:31:54.060 --> 00:31:57.380
"Is there a way to grab the lat
and long that corresponds

00:31:57.380 --> 00:32:00.070
to the zip code the user
supplied when setting up their

00:32:00.070 --> 00:32:02.815
Google TV box?" Yes, there is.

00:32:05.650 --> 00:32:12.020
What you want to do is use the
Get System service, asking for

00:32:12.020 --> 00:32:15.210
the location service, which
will give you a Location

00:32:15.210 --> 00:32:19.180
Manager object, that you can
then ask the Location Manager

00:32:19.180 --> 00:32:23.950
object for the Get Last Known
Location "static".

00:32:23.950 --> 00:32:26.900
And that will return a location
object to you that

00:32:26.900 --> 00:32:30.210
you can then get the
lat and long from.

00:32:30.210 --> 00:32:33.640
You will also need to add the
user's permission for

00:32:33.640 --> 00:32:34.890
android.permissi
on.accesscourselocation.

00:32:38.930 --> 00:32:42.960
I believe this stuff is all
covered in the base Android

00:32:42.960 --> 00:32:45.220
API documentation.

00:32:45.220 --> 00:32:50.980
So the trick here from Google TV
is when requesting the last

00:32:50.980 --> 00:32:53.900
known location, the string you
want to pass in there is

00:32:53.900 --> 00:32:55.930
lowercase static.

00:32:55.930 --> 00:32:57.470
All right?

00:32:57.470 --> 00:33:00.200
LEON NICHOLLS: Just one comment
on that, it only

00:33:00.200 --> 00:33:02.060
works in the US.

00:33:02.060 --> 00:33:02.930
CRISPY: Only works in the US.

00:33:02.930 --> 00:33:04.430
CHRISTIAN: That was
my comment, too.

00:33:04.430 --> 00:33:04.820
CRISPY: Oh, right.

00:33:04.820 --> 00:33:07.203
Because zip code, here, right.

00:33:07.203 --> 00:33:09.015
OK.

00:33:09.015 --> 00:33:10.190
What could you do in Europe?

00:33:10.190 --> 00:33:17.570
LES VOGEL: I think it also works
in Korea on the LGU+.

00:33:17.570 --> 00:33:20.530
CRISPY: So if somebody wanted
location, not in the US or

00:33:20.530 --> 00:33:22.890
Korea, what do you think
they should do?

00:33:22.890 --> 00:33:25.240
LEON NICHOLLS: Well, we had to
go and find another way of

00:33:25.240 --> 00:33:27.230
mapping an IP address
to a location.

00:33:27.230 --> 00:33:31.180
We couldn't rely on
the Google TV API.

00:33:31.180 --> 00:33:32.610
CRISPY: So did you
use, what, just a

00:33:32.610 --> 00:33:35.020
third-party IP to do a lookup?

00:33:35.020 --> 00:33:37.230
LEON NICHOLLS: There
are services.

00:33:37.230 --> 00:33:39.120
And the good ones you have
to pay for, so you

00:33:39.120 --> 00:33:41.010
can't get it for free.

00:33:41.010 --> 00:33:42.680
MALE SPEAKER: Would the
IP be reliable?

00:33:42.680 --> 00:33:45.240
It seems like that wouldn't get
you a real good address,

00:33:45.240 --> 00:33:48.130
it would just get you
a maybe address.

00:33:48.130 --> 00:33:49.140
LEON NICHOLLS: You have
to dig around.

00:33:49.140 --> 00:33:50.440
There are some that
are better.

00:33:50.440 --> 00:33:53.300
So I actually went through a
whole bunch of them to find

00:33:53.300 --> 00:33:55.860
ones that looked reasonably
accurate.

00:33:55.860 --> 00:34:00.410
But even then, you have to keep
updating the database

00:34:00.410 --> 00:34:06.390
behind that to make sure that
you have an accurate mapping.

00:34:06.390 --> 00:34:09.210
MALE SPEAKER: I'm trying to be
polite, and my answer was

00:34:09.210 --> 00:34:12.210
going to be stand there with
your phone and get the

00:34:12.210 --> 00:34:14.985
lat/long on your phone
and click it over.

00:34:14.985 --> 00:34:17.620
But I decided that wasn't
a good answer.

00:34:17.620 --> 00:34:19.989
LES VOGEL: That's actually not
a bad answer, if you think

00:34:19.989 --> 00:34:24.340
about it, and think about
second screen design.

00:34:24.340 --> 00:34:28.949
But Leon, as I remember, you pay
for the database and you

00:34:28.949 --> 00:34:30.820
have to set up your
own server.

00:34:30.820 --> 00:34:32.500
Was that what you did?

00:34:32.500 --> 00:34:32.760
LEON NICHOLLS: Various things.

00:34:32.760 --> 00:34:34.750
There are some that actually
provide a service.

00:34:34.750 --> 00:34:36.170
Obviously, you pay
for that service.

00:34:36.170 --> 00:34:39.295
But yeah, typically, you grab a
copy of the database and put

00:34:39.295 --> 00:34:39.800
it on your own server.

00:34:39.800 --> 00:34:43.219
And then you need to keep
the database updated.

00:34:43.219 --> 00:34:48.000
So there's a fee that you pay
to have the latest database.

00:34:48.000 --> 00:34:51.659
MALE SPEAKER: Now that you've
brought it up, the second

00:34:51.659 --> 00:34:57.150
screen is what I was really
going to say, eventually.

00:34:57.150 --> 00:34:59.970
Anybody that sets up a Google
TV that wants lat/long

00:34:59.970 --> 00:35:04.556
probably has a computer down the
road, just sitting in the

00:35:04.556 --> 00:35:06.920
other room, if not
any place else.

00:35:06.920 --> 00:35:14.060
And I'm wondering if, as people
start seeing Google TV

00:35:14.060 --> 00:35:19.770
less as a device and more as a
screen that's hooked up to

00:35:19.770 --> 00:35:25.380
your other screens, or who knows
running where, then it

00:35:25.380 --> 00:35:27.620
will be reasonable
to, oh, lat/long.

00:35:27.620 --> 00:35:30.800
I can't get it here, but
I can get it over here.

00:35:30.800 --> 00:35:33.810
LEON NICHOLLS: I guess the only
issue is that now your

00:35:33.810 --> 00:35:36.620
mobile app would have to add
the permissions for getting

00:35:36.620 --> 00:35:39.440
the location, and that might
be a little bit unusual for

00:35:39.440 --> 00:35:40.050
some users.

00:35:40.050 --> 00:35:43.130
They might just ask why you
make stuff like that.

00:35:43.130 --> 00:35:44.640
LES VOGEL: Well, you
just explained it.

00:35:44.640 --> 00:35:48.830
I mean, that's part of what you
should be doing in Google

00:35:48.830 --> 00:35:51.230
Play is explaining what
your permissions

00:35:51.230 --> 00:35:52.800
are, if they're unusual.

00:35:52.800 --> 00:35:58.020
And why you get them, and how
specifically you use them.

00:35:58.020 --> 00:36:01.720
That's the recommendation
that the Android team

00:36:01.720 --> 00:36:04.690
has given, at least.

00:36:04.690 --> 00:36:06.850
CRISPY: So there are ways to
mitigate users and what they

00:36:06.850 --> 00:36:08.970
think is acceptable and
not acceptable.

00:36:08.970 --> 00:36:13.430
All right, I'm going to move
us on to the next question.

00:36:13.430 --> 00:36:15.640
Somebody asked this and I
thought it was a great

00:36:15.640 --> 00:36:17.590
question to ask because I think
we've covered it once or

00:36:17.590 --> 00:36:20.240
twice but we've got some
better answers now.

00:36:20.240 --> 00:36:23.240
"Which resource identifier can
I use for Google TVs to

00:36:23.240 --> 00:36:27.950
distinguish it from phones like
Galaxy S3, et cetera?

00:36:27.950 --> 00:36:32.650
Apparently 'Layout-SW 720
DP' doesn't work".

00:36:32.650 --> 00:36:36.840
So I took this on as like,
hey, what does work?

00:36:36.840 --> 00:36:39.930
And at first, I'd always just
used Layout because I'm

00:36:39.930 --> 00:36:44.260
usually just writing Google
TV apps, but then I tried

00:36:44.260 --> 00:36:47.440
creating one that would run on
a tablet, a phone, and a TV.

00:36:47.440 --> 00:36:50.420
And I put TV-specific
resources in

00:36:50.420 --> 00:36:54.900
Layout-television, which is a
new layout that was introduced

00:36:54.900 --> 00:36:57.340
in 3.2 of Android.

00:36:57.340 --> 00:37:01.730
And that worked fine until
I created another layout

00:37:01.730 --> 00:37:06.300
directory or Layout-Large-No
Touch.

00:37:06.300 --> 00:37:10.750
And apparently the precedents
of Layout-Large-No Touch

00:37:10.750 --> 00:37:12.240
supersedes that of
Layout-Television.

00:37:14.850 --> 00:37:16.210
CHRISTIAN: Have you
actually tried

00:37:16.210 --> 00:37:17.460
Layout-Television-No Touch?

00:37:19.710 --> 00:37:21.710
CRISPY: I did not
try that one.

00:37:21.710 --> 00:37:22.520
CHRISTIAN: We should
try that one.

00:37:22.520 --> 00:37:24.130
CRISPY: We should
try that one.

00:37:24.130 --> 00:37:26.930
Although TV by itself would
never have touch.

00:37:26.930 --> 00:37:29.290
CHRISTIAN: But the matching
algorithm probably takes-- it

00:37:29.290 --> 00:37:32.170
matches more criteria.

00:37:32.170 --> 00:37:35.496
CRISPY: OK, yeah we'll
try that one out.

00:37:35.496 --> 00:37:39.130
LES VOGEL: Since you probably
want the longer stream.

00:37:39.130 --> 00:37:40.980
CRISPY: Yeah, OK.

00:37:40.980 --> 00:37:43.950
I was recently reading the
precedence rules for how

00:37:43.950 --> 00:37:48.770
Android decides which layout
directory to use for which

00:37:48.770 --> 00:37:49.590
resources to load.

00:37:49.590 --> 00:37:51.110
And that's some complicated
stuff.

00:37:51.110 --> 00:37:54.245
It's like regex stuff,
only on steroids.

00:37:54.245 --> 00:38:00.550
LES VOGEL: Hey, Crispy, do you
know the answer of how to

00:38:00.550 --> 00:38:03.720
determine which box you're on?

00:38:03.720 --> 00:38:04.970
A Sony or--

00:38:09.310 --> 00:38:10.860
CRISPY: What is the
current device?

00:38:10.860 --> 00:38:13.202
The manufacturing device?

00:38:13.202 --> 00:38:14.540
LES VOGEL: Vizio?

00:38:14.540 --> 00:38:19.640
CRISPY: Not yet, but if you
really want to know some of

00:38:19.640 --> 00:38:21.850
that info, you could potentially
go to the

00:38:21.850 --> 00:38:24.750
user-agent string from Chrome.

00:38:24.750 --> 00:38:30.550
CHRISTIAN: Well, there is a
properties and settings class.

00:38:30.550 --> 00:38:33.070
So I've actually dug in there
around yesterday because I

00:38:33.070 --> 00:38:34.770
needed to find something.

00:38:34.770 --> 00:38:39.880
And you can get build
information, you can even get

00:38:39.880 --> 00:38:42.100
what's the current build
number that you're

00:38:42.100 --> 00:38:43.765
running, and so on.

00:38:43.765 --> 00:38:45.410
CRISPY: Oh, so all the stuff
that shows up in status.

00:38:45.410 --> 00:38:46.610
Gotcha.

00:38:46.610 --> 00:38:48.510
CHRISTIAN: So Les, do you know,
I would have to look at

00:38:48.510 --> 00:38:51.945
my code now, do you know the
class name of [INAUDIBLE]?

00:38:51.945 --> 00:38:53.670
LES VOGEL: I don't remember the
class, but I was trying to

00:38:53.670 --> 00:38:56.506
find the actual constant
because--

00:38:56.506 --> 00:38:58.260
oh, here we are.

00:38:58.260 --> 00:39:03.900
We are recommending now that
you use ro.product.model

00:39:03.900 --> 00:39:06.480
instead of ro.hardware.

00:39:06.480 --> 00:39:10.740
That is going to be very
important in the near future

00:39:10.740 --> 00:39:16.740
as how you differentiate
your Google TV box.

00:39:16.740 --> 00:39:17.990
So it's ro.product.model.

00:39:20.240 --> 00:39:21.490
CHRISTIAN: Yep.

00:39:23.480 --> 00:39:26.070
LES VOGEL: So if you need to
know the difference between a

00:39:26.070 --> 00:39:35.550
Vizio and a Sony or a Hisense,
that's the way to tell.

00:39:35.550 --> 00:39:38.000
CRISPY: All right.

00:39:38.000 --> 00:39:40.070
LES VOGEL: And that should also
be if you're trying to

00:39:40.070 --> 00:39:43.960
figure out if it's
an LG as well.

00:39:43.960 --> 00:39:46.410
CRISPY: I guess we're going to
have to publish a list, or is

00:39:46.410 --> 00:39:48.070
it just a discovery thing?

00:39:48.070 --> 00:39:50.950
LES VOGEL: We should probably
publish something about that.

00:39:50.950 --> 00:39:55.470
But since you brought the
subject, I thought, oh, well,

00:39:55.470 --> 00:39:57.030
what about programmatic?

00:39:57.030 --> 00:39:59.240
Because I've been meaning
to write something

00:39:59.240 --> 00:40:01.100
about this for a while.

00:40:01.100 --> 00:40:02.150
CRISPY: All right.

00:40:02.150 --> 00:40:05.280
So why don't you start
publishing a list and we'll

00:40:05.280 --> 00:40:07.520
add it to the documentation.

00:40:07.520 --> 00:40:08.490
LES VOGEL: Yeah.

00:40:08.490 --> 00:40:09.120
CRISPY: Cool.

00:40:09.120 --> 00:40:11.800
All right, let's move
on to another one.

00:40:11.800 --> 00:40:14.970
"I'm looking at integrating
my MythTV with Google TV.

00:40:14.970 --> 00:40:18.290
I would like to have the same
level of integration found

00:40:18.290 --> 00:40:21.530
with Dish Network DVR, ability
to set things to record from

00:40:21.530 --> 00:40:24.040
Google TV, and look
up recordings.

00:40:24.040 --> 00:40:28.310
Is there any API that can be
used for this, or is it only

00:40:28.310 --> 00:40:31.650
something that Google and Dish
can do via their partnership?"

00:40:31.650 --> 00:40:37.710
So the API you are looking for
is talked about in one of our

00:40:37.710 --> 00:40:41.210
Google I/O talks called "Getting
your content on

00:40:41.210 --> 00:40:43.310
Google TV" and I think it's--

00:40:43.310 --> 00:40:44.000
CHRISTIAN: That was my talk.

00:40:44.000 --> 00:40:45.180
CRISPY: That was your
talk, that's right.

00:40:45.180 --> 00:40:47.160
Well, then you should elaborate
on this, I think.

00:40:47.160 --> 00:40:49.070
CHRISTIAN: Well, should.

00:40:49.070 --> 00:40:52.370
We've talked about this
API a lot, so it's--

00:40:52.370 --> 00:40:53.150
LES VOGEL: Except you're
not going to actually

00:40:53.150 --> 00:40:54.430
release it this time.

00:40:54.430 --> 00:40:56.300
CHRISTIAN: Exactly, yeah.

00:40:56.300 --> 00:40:58.230
CRISPY: Oh, that's right.

00:40:58.230 --> 00:41:00.420
LES VOGEL: So this was a bad
question to bring up.

00:41:00.420 --> 00:41:02.260
CRISPY: I forgot.

00:41:02.260 --> 00:41:03.780
CHRISTIAN: We're still
working on the API.

00:41:03.780 --> 00:41:08.960
And I mean, the intention of it
is that we will have an API

00:41:08.960 --> 00:41:13.080
for third party developers to
create sort of like a device

00:41:13.080 --> 00:41:15.670
driver for your connected
device.

00:41:15.670 --> 00:41:19.370
So if you have a device that
talks IP and you know the IP

00:41:19.370 --> 00:41:26.190
protocol, then you're
able to include it.

00:41:26.190 --> 00:41:29.610
And we're sort of in the process
of finalizing the API.

00:41:29.610 --> 00:41:32.230
If somebody would be interested
in talking about

00:41:32.230 --> 00:41:38.450
this, let us know, reach me on
Google+, I would be more than

00:41:38.450 --> 00:41:43.770
happy to hear your use case,
make sure we can include that.

00:41:43.770 --> 00:41:46.060
CRISPY: So we have one, we'll
get that person contacted.

00:41:46.060 --> 00:41:47.345
All right, we'll move on
to another question.

00:41:47.345 --> 00:41:50.640
Bad selection on my part.

00:41:50.640 --> 00:41:52.520
"Does anyone have a reference
to the key codes

00:41:52.520 --> 00:41:54.250
for the Sony remote?

00:41:54.250 --> 00:41:57.850
I have Play and Stop Working,
but need Pause key codes.

00:41:57.850 --> 00:42:00.640
Play and Pause seem to be
referencing the same key code,

00:42:00.640 --> 00:42:07.335
but the buttons are separate on
the remotee." So we've got

00:42:07.335 --> 00:42:11.890
sone docs on the GTV
controlling guide.

00:42:11.890 --> 00:42:15.650
So if you go to
developers.google.com/tv, I

00:42:15.650 --> 00:42:19.500
believe if you go /android/docs,
there's a

00:42:19.500 --> 00:42:22.700
GTV_control guide with
media key, so it's

00:42:22.700 --> 00:42:24.955
all documented there.

00:42:24.955 --> 00:42:26.990
And you should be able
to find the key code

00:42:26.990 --> 00:42:27.420
you're looking for.

00:42:27.420 --> 00:42:29.350
The other thing I would
recommend, Christian wrote

00:42:29.350 --> 00:42:32.020
this great app called Screen
Resolution Test.

00:42:32.020 --> 00:42:34.300
And yes, the name isn't obvious,
but you can use this

00:42:34.300 --> 00:42:37.080
to actually determine the
key codes that get

00:42:37.080 --> 00:42:38.340
sent from the remote.

00:42:38.340 --> 00:42:41.380
If you install this app and go
into the-- what's the first

00:42:41.380 --> 00:42:42.010
one called?

00:42:42.010 --> 00:42:42.860
Resolution Test?

00:42:42.860 --> 00:42:44.310
CHRISTIAN: I think it's
Resolution Test, yeah.

00:42:44.310 --> 00:42:47.250
This is my catch-all application
that I throw all

00:42:47.250 --> 00:42:50.465
my demo code and sample code
that I need on TV.

00:42:50.465 --> 00:42:51.640
So yeah, I think it's
the first menu.

00:42:51.640 --> 00:42:53.900
CRISPY: It's for debugging.

00:42:53.900 --> 00:42:54.940
So you can check that out.

00:42:54.940 --> 00:42:59.060
I think we mentioned it a few
shows ago as well, so we can

00:42:59.060 --> 00:43:01.280
repost the link to that.

00:43:01.280 --> 00:43:03.550
What else have I got here?

00:43:03.550 --> 00:43:06.540
"Has anyone successfully made a
multi-screen app for Google

00:43:06.540 --> 00:43:09.810
TV by using the Google
TV Emulator?

00:43:09.810 --> 00:43:13.110
If so, then please guide me in
the right direction." I forgot

00:43:13.110 --> 00:43:15.670
I chose many emulator
questions today.

00:43:15.670 --> 00:43:18.790
LES VOGEL: Is that why you
bade me get on the line?

00:43:18.790 --> 00:43:22.630
CRISPY: Yes, yes it is.

00:43:22.630 --> 00:43:26.290
Just to reiterate, Google TV
Emulator does not broadcast as

00:43:26.290 --> 00:43:29.660
an any mode endpoint vai MDNS,
so presently it can't be used

00:43:29.660 --> 00:43:33.170
for developing multi-screen
apps.

00:43:33.170 --> 00:43:34.730
Yeah, I think we've talked about
that enough already.

00:43:34.730 --> 00:43:36.720
So I'm going to move us
on to the next one.

00:43:36.720 --> 00:43:39.630
"Is it possible to create my own
custom home application on

00:43:39.630 --> 00:43:42.480
Google TV?" Yes.

00:43:42.480 --> 00:43:44.550
How you do that, it's
very simple.

00:43:44.550 --> 00:43:49.770
You can go to the Android
samples directory for API 13,

00:43:49.770 --> 00:43:52.300
and look at the homescreen
replacement

00:43:52.300 --> 00:43:53.350
example they have there.

00:43:53.350 --> 00:43:57.410
It actually runs, as is, on
Google TV, and you can see a

00:43:57.410 --> 00:44:02.130
good example of how to
take over the home

00:44:02.130 --> 00:44:03.180
screen, as it were.

00:44:03.180 --> 00:44:06.810
So you can also check out the
application I recommended at

00:44:06.810 --> 00:44:10.070
the beginning, which is FREEdi
channels for Google TV.

00:44:10.070 --> 00:44:11.740
It's in the Play Store.

00:44:11.740 --> 00:44:14.980
I only took a cursory look at
it, it looked pretty cool.

00:44:14.980 --> 00:44:17.700
All right, this was the big
multipart question next.

00:44:17.700 --> 00:44:19.705
CHRISTIAN: Oh, I
love that one.

00:44:19.705 --> 00:44:22.310
CRISPY: So this one really
caught my attention, because

00:44:22.310 --> 00:44:25.550
all the people involved in
asking it and talking about on

00:44:25.550 --> 00:44:28.610
Stack Overflow, they all had
reputations in the multiple

00:44:28.610 --> 00:44:31.340
thousands, usually
above 15,000.

00:44:31.340 --> 00:44:35.950
So I don't know if we've
talked about this stuff

00:44:35.950 --> 00:44:38.770
before, but I feel it's worth
bringing up again now.

00:44:38.770 --> 00:44:42.390
And I'll just read it verbatim,
and then you guys

00:44:42.390 --> 00:44:43.570
can all jump in.

00:44:43.570 --> 00:44:46.062
You've already answered
some of this.

00:44:46.062 --> 00:44:47.240
CHRISTIAN: There's actually one
part I haven't answered--

00:44:47.240 --> 00:44:48.330
the very first question.

00:44:48.330 --> 00:44:49.010
CRISPY: The very
first question.

00:44:49.010 --> 00:44:51.230
All right, so we'll
start with that.

00:44:51.230 --> 00:44:53.650
"First of all, I'm not asking
if it's OK to totally forget

00:44:53.650 --> 00:44:56.460
about efficiency when writing an
application for Google TV.

00:44:56.460 --> 00:44:57.610
I would never do that.

00:44:57.610 --> 00:45:00.000
But I'm still curious, what
are the differences?"

00:45:00.000 --> 00:45:01.790
CHRISTIAN: Actually to
the first question.

00:45:01.790 --> 00:45:02.330
CRISPY: Oh, that one.

00:45:02.330 --> 00:45:03.800
CHRISTIAN: Yeah, first one.

00:45:03.800 --> 00:45:07.220
"Is it OK to forget about
performance and efficiency on

00:45:07.220 --> 00:45:11.830
Google TV?" I think that's
an absolutely bad idea.

00:45:11.830 --> 00:45:16.270
I think Google TV is really
important to be responsive.

00:45:16.270 --> 00:45:19.280
People are used to things
moving around on a TV.

00:45:19.280 --> 00:45:22.230
Usually when things stop moving
on a TV, people get

00:45:22.230 --> 00:45:25.070
nervous, something crashed.

00:45:25.070 --> 00:45:27.680
About performance, I know
sometimes it takes a while to,

00:45:27.680 --> 00:45:32.400
for example, load assets
from your servers.

00:45:32.400 --> 00:45:36.760
Really be very, very conscious
about displaying progress

00:45:36.760 --> 00:45:39.590
bars, or some sort of indicator
that yes, I'm

00:45:39.590 --> 00:45:41.070
working on it.

00:45:41.070 --> 00:45:46.610
Another not-so-favorite mode
that I find in a lot of apps

00:45:46.610 --> 00:45:51.770
is using the same key to bring
up and dismiss an action, like

00:45:51.770 --> 00:45:53.700
the home screen.

00:45:53.700 --> 00:45:57.693
And sometimes users press the
key, nothing happens, they

00:45:57.693 --> 00:46:01.180
press it again, and then they
see an activity flash up and

00:46:01.180 --> 00:46:02.580
go back away again.

00:46:02.580 --> 00:46:06.910
So make sure you give the user
the feedback that, OK yes, I

00:46:06.910 --> 00:46:08.080
receive your key press.

00:46:08.080 --> 00:46:11.300
I'm working on it, I'm
doing it, stay tuned.

00:46:11.300 --> 00:46:15.600
Even if it's just for one or two
seconds, it's a good idea.

00:46:15.600 --> 00:46:19.480
There are some really bad
examples out there.

00:46:19.480 --> 00:46:23.850
There's some applications which
take literally a minute

00:46:23.850 --> 00:46:27.130
or more, initially, downloading

00:46:27.130 --> 00:46:29.370
assets and doing things.

00:46:29.370 --> 00:46:32.290
In this case, do something
funny.

00:46:32.290 --> 00:46:35.500
Just display comic strips or
something, keep the user

00:46:35.500 --> 00:46:37.160
entertained.

00:46:37.160 --> 00:46:41.140
CRISPY: So the least shock and
constant user feedback.

00:46:41.140 --> 00:46:42.084
OK.

00:46:42.084 --> 00:46:45.985
Now I'm going to continue
reading this, unless--

00:46:45.985 --> 00:46:48.090
LEON NICHOLLS: This is a point
I would recommend that your

00:46:48.090 --> 00:46:48.770
[? subtesters ?]

00:46:48.770 --> 00:46:51.960
on different Google
TV devices.

00:46:51.960 --> 00:46:55.830
We've seen, especially when it
comes to animation, even with

00:46:55.830 --> 00:46:58.765
the OpenGL-type animation,
that they do perform

00:46:58.765 --> 00:47:01.580
differently on the different
hardware.

00:47:01.580 --> 00:47:04.595
And so it would be good to get a
range, low-end device, and a

00:47:04.595 --> 00:47:07.860
high-end device to see
something that

00:47:07.860 --> 00:47:08.525
will work for both.

00:47:08.525 --> 00:47:11.320
And not just assume that people
are going to buy the

00:47:11.320 --> 00:47:13.500
high-end devices.

00:47:13.500 --> 00:47:18.400
LES VOGEL: A Vizio device or
Hisense device is very

00:47:18.400 --> 00:47:23.110
different than an LG, graphics
performance-wise.

00:47:23.110 --> 00:47:25.800
CHRISTIAN: Also, for a developer
of the class of

00:47:25.800 --> 00:47:28.580
Leon, where you really write
applications for a broad

00:47:28.580 --> 00:47:32.700
audience, I would very much
recommend to still test on a

00:47:32.700 --> 00:47:36.490
Generation 1 device, on some
of the Intel devices.

00:47:36.490 --> 00:47:38.760
Especially with hardware
acceleration, there are some

00:47:38.760 --> 00:47:40.010
significant differences.

00:47:42.960 --> 00:47:45.570
LES VOGEL: Christian, to your
question earlier, which was

00:47:45.570 --> 00:47:48.840
also my comment, so far the only
thing I've been able to

00:47:48.840 --> 00:47:58.880
find to get the ro.properties
is to exec with GetProp.

00:47:58.880 --> 00:48:01.290
CHRISTIAN: I'll look at
my code in a second.

00:48:01.290 --> 00:48:05.620
After the show, I'll post
in the comments.

00:48:05.620 --> 00:48:09.760
CRISPY: Maybe we'll post
something, a deeper write-up

00:48:09.760 --> 00:48:15.120
or maybe even a streamcast or
blog post or something.

00:48:15.120 --> 00:48:17.660
So we'll provide some more
information for that.

00:48:17.660 --> 00:48:19.535
So I've only gotten past the
first sentence of this

00:48:19.535 --> 00:48:21.890
question and it's already
generated quite a bit of

00:48:21.890 --> 00:48:22.400
controver--

00:48:22.400 --> 00:48:22.840
well, not controversy--

00:48:22.840 --> 00:48:23.550
CHRISTIAN: It's going
to get better.

00:48:23.550 --> 00:48:26.830
CRISPY: It's going to get much
better, because this is long.

00:48:26.830 --> 00:48:29.050
All right, so "I'm still
curious, what are the

00:48:29.050 --> 00:48:32.280
differences between developing
something for Google TV and a

00:48:32.280 --> 00:48:34.650
mobile device, such as
a tablet handset?

00:48:34.650 --> 00:48:37.090
I found a lot of information
online about the differences

00:48:37.090 --> 00:48:40.840
in user interface design, ie TV
is meant to be more social,

00:48:40.840 --> 00:48:44.240
no screen orientation, no
touchscreen, et cetera.

00:48:44.240 --> 00:48:45.940
But none of the documentation
describes the

00:48:45.940 --> 00:48:48.710
hardware-specific differences
between the two devices.

00:48:48.710 --> 00:48:51.400
To be more specific, considering
that Android was

00:48:51.400 --> 00:48:54.890
originally designed for mobile
devices with limited memory,

00:48:54.890 --> 00:48:58.980
is designing an application for
Google TV any different?"

00:48:58.980 --> 00:49:02.370
So you started to answer this
one with what you had here, do

00:49:02.370 --> 00:49:05.660
you want to read it, do you
want to just say it again?

00:49:05.660 --> 00:49:08.920
CHRISTIAN: Let me just make sure
I cover all the topics

00:49:08.920 --> 00:49:10.490
here, so I'll glance
at my notes.

00:49:10.490 --> 00:49:15.340
But the question was
really whether--

00:49:15.340 --> 00:49:17.220
so let me paraphrase this.

00:49:17.220 --> 00:49:19.580
Android devices were
very limited,

00:49:19.580 --> 00:49:21.790
especially with memory.

00:49:21.790 --> 00:49:23.560
Is Google TV any different?

00:49:23.560 --> 00:49:28.570
And Google TV is still very
memory-constrained.

00:49:28.570 --> 00:49:33.020
We really try to produce
affordable devices.

00:49:33.020 --> 00:49:37.290
So right now, Google TV has
about one gigabyte of total

00:49:37.290 --> 00:49:40.400
memory, which is shared between
the Dalvik virtual

00:49:40.400 --> 00:49:44.280
machine and the hardware
acceleration, video

00:49:44.280 --> 00:49:45.760
decoding, and so on.

00:49:45.760 --> 00:49:51.460
So ultimately, the Dalvik VM has
about 600 megabytes on our

00:49:51.460 --> 00:49:53.300
devices today.

00:49:53.300 --> 00:49:56.500
What we have done is, we
have increased the

00:49:56.500 --> 00:49:57.880
per-application limit.

00:49:57.880 --> 00:50:02.060
So for example on a Galaxy Nexus
phone, each application

00:50:02.060 --> 00:50:04.910
gets 64 megabytes
of total memory.

00:50:04.910 --> 00:50:10.100
On Google TV, we bumped
it up to 96 megabytes.

00:50:10.100 --> 00:50:11.480
And we actually did
some tests.

00:50:11.480 --> 00:50:13.750
We initially thought, well,
maybe we should just double it

00:50:13.750 --> 00:50:15.310
and go to 128.

00:50:15.310 --> 00:50:18.900
But keep in mind, it's a
trade-off between how much

00:50:18.900 --> 00:50:22.440
memory each application gets,
and how many applications you

00:50:22.440 --> 00:50:24.080
can run at the same time.

00:50:24.080 --> 00:50:28.080
So we felt that 96 is a
reasonable compromise.

00:50:28.080 --> 00:50:31.950
The reason we actually had
to bump it up is, as Leon

00:50:31.950 --> 00:50:35.400
mentioned earlier, screen
resolution has gone up

00:50:35.400 --> 00:50:36.620
significantly.

00:50:36.620 --> 00:50:41.920
Assets are bigger, resources are
bigger, so just having one

00:50:41.920 --> 00:50:45.100
full-screen image for
Google TV is about 8

00:50:45.100 --> 00:50:47.390
megabytes of RAM.

00:50:47.390 --> 00:50:52.130
So 96 megs is still fairly
constrained.

00:50:52.130 --> 00:50:56.510
It's especially noticeable for
people who do things like

00:50:56.510 --> 00:50:58.460
loading in a lot
of thumbnails.

00:50:58.460 --> 00:51:01.320
So we have some application
developers who, for example,

00:51:01.320 --> 00:51:04.190
want to show a library of
movies, and they want to load

00:51:04.190 --> 00:51:06.240
cover art for each
of the movie.

00:51:06.240 --> 00:51:10.170
And holding all those bitmaps
in memory at the same time,

00:51:10.170 --> 00:51:12.120
you run out of memory
pretty quickly.

00:51:12.120 --> 00:51:15.450
So it's important that
developers load things on

00:51:15.450 --> 00:51:20.400
demand, recycle bitmaps, and
have an overall efficient

00:51:20.400 --> 00:51:21.660
programming style.

00:51:21.660 --> 00:51:24.110
CRISPY: So you just actually
triggered an interesting

00:51:24.110 --> 00:51:25.140
thought in my head.

00:51:25.140 --> 00:51:28.210
So if you have a service that
you're running as a separate

00:51:28.210 --> 00:51:34.380
process, is it going to get
a separate 96 megs of RAM?

00:51:34.380 --> 00:51:35.240
CHRISTIAN: You should.

00:51:35.240 --> 00:51:37.520
CRISPY: So in theory,
you could--

00:51:37.520 --> 00:51:40.360
I'm not recommending this at all
to anybody, by the way--

00:51:40.360 --> 00:51:44.430
you could, in theory, load your
imagery sources and pass

00:51:44.430 --> 00:51:48.510
them through as a binary
exchange for display.

00:51:48.510 --> 00:51:49.730
CHRISTIAN: Don't do
that [INAUDIBLE].

00:51:49.730 --> 00:51:51.020
CRISPY: Don't do what
Crispy does!

00:51:51.020 --> 00:51:53.974
He's been drinking.

00:51:53.974 --> 00:51:55.390
LES VOGEL: Vodka.

00:51:55.390 --> 00:51:58.530
Yeah, that's a good
idea, though.

00:51:58.530 --> 00:52:00.780
CRISPY: Anybody else want to add
to that, or shall I move

00:52:00.780 --> 00:52:03.766
on to the next part
of the question?

00:52:03.766 --> 00:52:04.240
No?

00:52:04.240 --> 00:52:05.080
All right.

00:52:05.080 --> 00:52:08.620
"So phones and tablets don't
have the luxury of swap space,

00:52:08.620 --> 00:52:15.560
and therefore there are
hard limits on memory.

00:52:15.560 --> 00:52:17.610
Is this also the case
with Google TV?"

00:52:17.610 --> 00:52:19.330
CHRISTIAN: Yes.

00:52:19.330 --> 00:52:22.490
CRISPY: So nice simple short
answer, no swap space.

00:52:22.490 --> 00:52:25.750
Part Three is, "The Dalvik VM
is optimized for minimal

00:52:25.750 --> 00:52:28.160
memory footprint on handsets
and tablets.

00:52:28.160 --> 00:52:31.200
Is Google TV powered by the
exact same VM, a slightly

00:52:31.200 --> 00:52:34.530
different version designed
specifically for Google TV but

00:52:34.530 --> 00:52:36.500
with the same design goal
in mind, or a completely

00:52:36.500 --> 00:52:39.570
different VM with different
design goals in mind?"

00:52:39.570 --> 00:52:41.850
CHRISTIAN: There have been
rumors that we like to

00:52:41.850 --> 00:52:44.560
reimplement stuff
here at Google.

00:52:44.560 --> 00:52:47.980
Once we have a virtual machine
that works really well, we

00:52:47.980 --> 00:52:49.610
tend to stick with it.

00:52:49.610 --> 00:52:53.810
So the Dalvik VM is really
exactly the same virtual

00:52:53.810 --> 00:52:57.260
machine, for simply the reason
that the constraints are

00:52:57.260 --> 00:52:58.280
exactly the same.

00:52:58.280 --> 00:52:59.920
We still have an embedded
system.

00:52:59.920 --> 00:53:02.030
We have flash file systems.

00:53:02.030 --> 00:53:06.520
We have no swap space, and we
need to be memory efficient.

00:53:06.520 --> 00:53:07.930
At same time, of course,
we want to

00:53:07.930 --> 00:53:09.640
be as fast as possible.

00:53:09.640 --> 00:53:13.670
And we felt that the Dalvik
VM does all this.

00:53:13.670 --> 00:53:16.385
On top of it, it already helped
us a lot with the

00:53:16.385 --> 00:53:20.500
Intel-to-ARM transition, where
for users who develop Dalvik

00:53:20.500 --> 00:53:22.810
code, it's completely
transparent what

00:53:22.810 --> 00:53:26.080
processor you run on.

00:53:26.080 --> 00:53:29.360
CRISPY: That's another big thing
for device independence.

00:53:29.360 --> 00:53:29.740
All right.

00:53:29.740 --> 00:53:32.108
Anybody else want to add to that
before I move on to the

00:53:32.108 --> 00:53:33.290
next piece?

00:53:33.290 --> 00:53:33.710
No?

00:53:33.710 --> 00:53:35.280
Awesome.

00:53:35.280 --> 00:53:38.070
"What are the actual differences
in hardware when

00:53:38.070 --> 00:53:41.100
comparing handsets, tablets,
and Google TV?

00:53:41.100 --> 00:53:45.060
Are the differences significant,
other than

00:53:45.060 --> 00:53:46.550
touchscreen?"

00:53:46.550 --> 00:53:49.640
CHRISTIAN: It's really
stereotypical by now, but I

00:53:49.640 --> 00:53:52.680
will mention the touch screen
again, because that is the

00:53:52.680 --> 00:53:53.560
biggest difference.

00:53:53.560 --> 00:53:57.060
And usually, when I talk with
developers at first, they

00:53:57.060 --> 00:53:58.520
dismiss it, and they're
like, oh yeah,

00:53:58.520 --> 00:54:00.020
whatever it's super easy.

00:54:00.020 --> 00:54:03.550
But you need to redesign
your layouts.

00:54:03.550 --> 00:54:06.210
There is a difference between
an app that just barely runs

00:54:06.210 --> 00:54:08.550
on a television and an app
that is really a great

00:54:08.550 --> 00:54:12.350
experience and is really
optimized.

00:54:12.350 --> 00:54:15.020
So this is the most visible
difference, I think.

00:54:15.020 --> 00:54:19.320
Once people get going and they
dig deeper into it, probably

00:54:19.320 --> 00:54:22.290
the most surprising and the
most stunning feature of

00:54:22.290 --> 00:54:26.240
Google TV hardware is
the video decoder.

00:54:26.240 --> 00:54:31.390
It's really not easy to decode
Blu-Ray quality, streaming,

00:54:31.390 --> 00:54:36.850
encrypted video files, and push
30 frames per second at 8

00:54:36.850 --> 00:54:40.930
megabytes per frame through
HDMI to the television.

00:54:40.930 --> 00:54:43.650
So there's a lot of video
processing going

00:54:43.650 --> 00:54:45.320
on under the hood.

00:54:45.320 --> 00:54:52.740
We really want Google TV to be
the primary reference for how

00:54:52.740 --> 00:54:56.410
to deliver streaming video over
the internet, and we put

00:54:56.410 --> 00:54:58.690
a lot of effort into that.

00:54:58.690 --> 00:55:01.760
That also includes things like
state-of-the-art content

00:55:01.760 --> 00:55:03.570
protection.

00:55:03.570 --> 00:55:06.510
We know that movies
are expensive.

00:55:06.510 --> 00:55:09.670
People who produce movies would
like to license them,

00:55:09.670 --> 00:55:11.700
and would like to make
money on them.

00:55:11.700 --> 00:55:13.470
We want to help them
and make sure that

00:55:13.470 --> 00:55:14.780
their content is secure.

00:55:14.780 --> 00:55:19.210
And we want to make sure that
users get access to the most

00:55:19.210 --> 00:55:21.320
high-quality video content.

00:55:21.320 --> 00:55:27.140
So we have PlayReady, we have
Widevine, we have HLS with AES

00:55:27.140 --> 00:55:28.140
encryption.

00:55:28.140 --> 00:55:32.200
So there's a lot of different
choices for video delivery.

00:55:32.200 --> 00:55:34.220
CRISPY: And on top of that, you
can monitor the stream of

00:55:34.220 --> 00:55:36.090
video live, right?

00:55:36.090 --> 00:55:37.930
That takes additional tooling
and is going to

00:55:37.930 --> 00:55:38.800
consume more memory.

00:55:38.800 --> 00:55:41.750
QOS API is what I'm
getting at there.

00:55:41.750 --> 00:55:43.010
CHRISTIAN: Lots of stuff.

00:55:43.010 --> 00:55:46.480
CRISPY: So the chipset, there
are significant differences,

00:55:46.480 --> 00:55:49.500
but part of that is
also isolated.

00:55:49.500 --> 00:55:53.240
CHRISTIAN: Yeah, for a user,
basically the user interface

00:55:53.240 --> 00:55:56.980
is you give us a stream URL and
you kick off playback, and

00:55:56.980 --> 00:56:00.360
then the developer can sit back
and, as Crispy said, can

00:56:00.360 --> 00:56:01.460
monitor the quality.

00:56:01.460 --> 00:56:04.190
But all the decoding goes
on behind the scenes.

00:56:04.190 --> 00:56:06.350
But that is one of
the differences.

00:56:06.350 --> 00:56:09.740
People sometimes say, well hey,
I have a Raspberry Pi, it

00:56:09.740 --> 00:56:10.800
runs Android.

00:56:10.800 --> 00:56:14.890
I don't know if this one has a
HDMI out, but some of the ARM

00:56:14.890 --> 00:56:16.370
devices have HDMI out.

00:56:16.370 --> 00:56:20.470
But there is a reason Google
TV is really optimized for

00:56:20.470 --> 00:56:21.030
television.

00:56:21.030 --> 00:56:22.980
We have a lot of decoders.

00:56:22.980 --> 00:56:25.870
CRISPY: We have dedicated
hardware that is not available

00:56:25.870 --> 00:56:27.660
on any other Android device.

00:56:27.660 --> 00:56:29.680
Period.

00:56:29.680 --> 00:56:33.960
I'm sure people are going to
start trying to strap on FMPG

00:56:33.960 --> 00:56:37.560
chips to their devices
at some point.

00:56:37.560 --> 00:56:38.910
Leon, maybe that's your
next project.

00:56:42.150 --> 00:56:44.010
All right, I think we've
covered that part of it

00:56:44.010 --> 00:56:44.660
significantly.

00:56:44.660 --> 00:56:46.560
We have one other part
to this question.

00:56:46.560 --> 00:56:49.130
"Does Ice Cream Sandwich and
Jelly Bean improve performance

00:56:49.130 --> 00:56:50.160
in any way?

00:56:50.160 --> 00:56:52.720
Does it make use of these new
hardware capabilities?"

00:56:52.720 --> 00:56:53.765
LES VOGEL: Yes.

00:56:53.765 --> 00:56:55.620
If they ever exist.

00:56:55.620 --> 00:56:57.200
CRISPY: If they ever exist.

00:56:57.200 --> 00:57:00.650
CHRISTIAN: Well, we already use
the hardware codex, the

00:57:00.650 --> 00:57:01.370
video codex.

00:57:01.370 --> 00:57:05.040
So we do that pretty
efficiently.

00:57:05.040 --> 00:57:08.450
I can't comment about Ice Cream
Sandwich or Jelly Bean

00:57:08.450 --> 00:57:09.140
or anything else.

00:57:09.140 --> 00:57:11.480
CRISPY: Nothing to announce
at this time.

00:57:11.480 --> 00:57:13.850
LES VOGEL: We need a little
cardboard sign.

00:57:13.850 --> 00:57:16.470
CRISPY: I made shirts for
us, do you remember?

00:57:16.470 --> 00:57:17.340
LES VOGEL: That's right,
I should have

00:57:17.340 --> 00:57:18.650
worn my shirt today.

00:57:18.650 --> 00:57:20.100
CRISPY: Yes.

00:57:20.100 --> 00:57:22.030
I'l lhave to make more funny
shirts like that.

00:57:25.720 --> 00:57:29.120
LES VOGEL: Ice Cream Sandwich
and Jelly Bean run faster on

00:57:29.120 --> 00:57:30.810
an Android phone.

00:57:30.810 --> 00:57:35.650
So you can expect that when--
since we did announce that we

00:57:35.650 --> 00:57:39.030
were going that direction
at I/O--

00:57:39.030 --> 00:57:43.870
when that happens, it
will be faster.

00:57:43.870 --> 00:57:45.120
CRISPY: That's true.

00:57:47.590 --> 00:57:49.650
LES VOGEL: Christian's
so good.

00:57:49.650 --> 00:57:52.060
CHRISTIAN: I'm just sitting
here smiling.

00:57:52.060 --> 00:57:52.650
LES VOGEL: So, so good.

00:57:52.650 --> 00:57:54.190
CRISPY: Like I said, he was
brought in to look pretty

00:57:54.190 --> 00:57:56.000
today, right?

00:57:56.000 --> 00:57:59.300
So "Is designing for Google TV
different than from tablet?

00:57:59.300 --> 00:58:02.930
What do I need to keep in mind
while designing the UI for

00:58:02.930 --> 00:58:04.270
Google TV?" Well,

00:58:04.270 --> 00:58:07.830
fundamentally, no touch screen.

00:58:07.830 --> 00:58:09.320
We've already touched on
a lot of these points.

00:58:09.320 --> 00:58:12.160
The user's a lot farther from
the screen, except in Korea

00:58:12.160 --> 00:58:15.190
where apparently they sit
inches from the screen.

00:58:15.190 --> 00:58:16.480
LES VOGEL: 5 feet.

00:58:16.480 --> 00:58:17.330
CRISPY: Pardon?

00:58:17.330 --> 00:58:19.380
LES VOGEL: 5 feet is what
we've been saying.

00:58:19.380 --> 00:58:20.890
CRISPY: Oh, OK.

00:58:20.890 --> 00:58:22.530
Not inches, gotcha.

00:58:22.530 --> 00:58:24.240
LES VOGEL: Not inches.

00:58:24.240 --> 00:58:27.710
And it would be in meters.

00:58:27.710 --> 00:58:29.770
CRISPY: Right, metric.

00:58:29.770 --> 00:58:31.120
So the input devices
are different.

00:58:31.120 --> 00:58:35.310
Obviously, no touchpad means
D-pad, and trackpad to a

00:58:35.310 --> 00:58:36.020
limited degree.

00:58:36.020 --> 00:58:42.070
And I think the LG has gesture
control, kind of.

00:58:42.070 --> 00:58:45.890
It's in development,
it kind of works.

00:58:45.890 --> 00:58:48.170
You want to consider
less information

00:58:48.170 --> 00:58:49.960
density on the screen.

00:58:49.960 --> 00:58:52.410
While they are physically
bigger, you're farther away,

00:58:52.410 --> 00:58:53.210
which makes things
look smaller.

00:58:53.210 --> 00:58:54.870
We've covered these things.

00:58:54.870 --> 00:58:57.330
Vertical scrolling versus
horizontal scrolling, nobody

00:58:57.330 --> 00:59:00.580
likes an infinite drop into hell
while looking for that

00:59:00.580 --> 00:59:02.950
thing that they're trying to
watch, so consider your

00:59:02.950 --> 00:59:05.540
navigation paths carefully.

00:59:05.540 --> 00:59:08.010
Brightness and color, don't
flood the living room with a

00:59:08.010 --> 00:59:09.740
whole bunch of white light.

00:59:09.740 --> 00:59:13.410
Make sure you're not using
strong reds on a white

00:59:13.410 --> 00:59:15.940
background, the color
vibration.

00:59:15.940 --> 00:59:17.200
We have guidelines for this.

00:59:17.200 --> 00:59:20.050
If you go to
developers.google.com/TV,

00:59:20.050 --> 00:59:22.040
there's a section on
designing for TV.

00:59:22.040 --> 00:59:23.500
I highly recommend
looking at that.

00:59:23.500 --> 00:59:25.440
We've also got presentations
we've given.

00:59:25.440 --> 00:59:27.260
They're peppered around
in various sources.

00:59:27.260 --> 00:59:29.640
Good source to ramp
up on this.

00:59:29.640 --> 00:59:31.720
And I think we're going to be
releasing some stuff on Google

00:59:31.720 --> 00:59:35.930
Developer Academy soon that
covers some of this stuff--

00:59:35.930 --> 00:59:39.780
porting tablet apps to TV.

00:59:39.780 --> 00:59:44.240
All right, I think we're down
to the last one question.

00:59:44.240 --> 00:59:45.700
Yes, we are.

00:59:45.700 --> 00:59:49.200
"Hello, I'm looking for some
insight on how an application

00:59:49.200 --> 00:59:52.240
I created and installed on
Google TV can determine what

00:59:52.240 --> 00:59:54.240
other apps are on
the platform.

00:59:54.240 --> 00:59:57.390
If my app determines what other
apps are on the box, can

00:59:57.390 --> 00:59:59.000
my app launch them?

00:59:59.000 --> 01:00:00.840
Can my app be instructed
to launch

01:00:00.840 --> 01:00:04.860
them via Anymote Protocols?

01:00:04.860 --> 01:00:07.750
LES VOGEL: You can use the
Process Manager, I believe,

01:00:07.750 --> 01:00:08.900
and the Package Manager--

01:00:08.900 --> 01:00:10.410
CRISPY: Package Manager, yeah.

01:00:10.410 --> 01:00:12.790
LES VOGEL: --to figure
out what's on there.

01:00:12.790 --> 01:00:18.450
You can send intents to apps.

01:00:18.450 --> 01:00:22.550
Almost all of them
respond to Open.

01:00:22.550 --> 01:00:28.930
And you can check out
openintents.org to see if the

01:00:28.930 --> 01:00:30.750
app you're interested
in actually

01:00:30.750 --> 01:00:34.480
has published methods.

01:00:34.480 --> 01:00:44.670
And lastly, you can't send
from Anymote on a TV.

01:00:44.670 --> 01:00:46.090
And that has to do
with pairing.

01:00:50.710 --> 01:00:53.030
CHRISTIAN: But if you're already
running on the TV,

01:00:53.030 --> 01:00:55.830
then intents is really
the intended

01:00:55.830 --> 01:00:58.250
Android way to do this.

01:00:58.250 --> 01:00:59.424
LES VOGEL: Exactly.

01:00:59.424 --> 01:01:01.240
CRISPY: So I think one thing
I'm going to add to--

01:01:01.240 --> 01:01:03.060
LEON NICHOLLS: [INAUDIBLE]
on your app.

01:01:03.060 --> 01:01:03.980
CRISPY: Go ahead.

01:01:03.980 --> 01:01:05.420
LEON NICHOLLS: I was just
saying, [? we built ?] all of

01:01:05.420 --> 01:01:07.278
that in our apps, so it is
technically possible.

01:01:10.210 --> 01:01:13.530
CRISPY: So with the Package
Manager, when you're looking

01:01:13.530 --> 01:01:16.010
for the applications that are
on the system, I think you

01:01:16.010 --> 01:01:20.510
want to consider filtering by
which applications have a main

01:01:20.510 --> 01:01:24.640
launcher, or have a launcher
portion to them.

01:01:24.640 --> 01:01:29.260
Just to save yourself loading
or looking through lists of

01:01:29.260 --> 01:01:32.140
system services and other things
that you wouldn't want

01:01:32.140 --> 01:01:34.500
to launch directly.

01:01:34.500 --> 01:01:37.350
That would be my only
add-on to that.

01:01:37.350 --> 01:01:41.750
Again, if you check out the
Android home screen sample,

01:01:41.750 --> 01:01:45.670
there's code in there that shows
how to scan the system

01:01:45.670 --> 01:01:50.170
for launchable applications,
something I came across when

01:01:50.170 --> 01:01:51.150
building my homescreen.

01:01:51.150 --> 01:01:54.680
So anybody else have anything
to add to that?

01:01:54.680 --> 01:01:57.900
Otherwise we're going to wrap it
up, I think, for this week.

01:01:57.900 --> 01:02:02.020
And just a reminder to everybody
watching now and

01:02:02.020 --> 01:02:04.870
going to be watching the future,
we are doing these

01:02:04.870 --> 01:02:05.950
every two weeks now.

01:02:05.950 --> 01:02:10.355
So the next one will be
I believe November 13?

01:02:10.355 --> 01:02:10.610
Does that sound right?

01:02:10.610 --> 01:02:12.220
CHRISTIAN: And it's not
going be on Halloween.

01:02:12.220 --> 01:02:13.170
CRISPY: Yeah, it won't
be Halloween.

01:02:13.170 --> 01:02:17.250
So I will be dressed in
traditional cowboy hat and

01:02:17.250 --> 01:02:18.350
urban cowboy gear.

01:02:18.350 --> 01:02:20.270
Or maybe I'll wear my "I have
nothing to announce at this

01:02:20.270 --> 01:02:22.220
time" t-shirt.

01:02:22.220 --> 01:02:23.010
So yes.

01:02:23.010 --> 01:02:26.830
Hope you like the costume and
the cool hats, and hope you

01:02:26.830 --> 01:02:29.360
got a lot of value out
of today's Hangout.

01:02:29.360 --> 01:02:30.830
It's great to have
you, as always.

01:02:30.830 --> 01:02:33.880
And we are signing off.

01:02:33.880 --> 01:02:35.130
Thanks, Leon.

