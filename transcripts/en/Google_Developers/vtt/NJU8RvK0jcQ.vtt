WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.340
&gt;&gt; MARKS: My name is Mano Marks. I'm a developer
advocate at Google. That means this is my

00:00:05.340 --> 00:00:11.840
job. I get to come out and talk to developers
around the world who are working with our--our

00:00:11.840 --> 00:00:22.750
mapping APIs. And--so I'm really glad to be
here. I noticed that BootCamp was built as

00:00:22.750 --> 00:00:29.370
this small and intimate gathering compare
to Google I/O. And I also noticed that the--there's

00:00:29.370 --> 00:00:33.789
like a thousand people here. So I don't know
how small and intimate everything is, but

00:00:33.789 --> 00:00:40.940
I hope you guys have been having a good time
today. I am going to talk about a number of

00:00:40.940 --> 00:00:45.670
things related to mobile development. So first
of all, how many of you have a mobile device?

00:00:45.670 --> 00:00:51.210
Okay. So this is a little developer advocate,
right, you get everybody raising their hands

00:00:51.210 --> 00:00:55.609
at the beginning. Everybody feels like they're
participating in something, it's a little

00:00:55.609 --> 00:01:02.809
trick they teach you. The other trick is you
let people in on your tricks, makes me feel

00:01:02.809 --> 00:01:09.850
included. But really I don't care about the
tricks. I just want to show you what's cool

00:01:09.850 --> 00:01:14.890
about mobile devices. So how many of you have
written an application using some form of

00:01:14.890 --> 00:01:21.330
the Google Maps API and some application?
Okay. That's it. That's a good number. That's

00:01:21.330 --> 00:01:28.220
probably about two-thirds, it's an interesting
number. What I'm going to talk to you about

00:01:28.220 --> 00:01:34.010
here, you know, you can obviously see what
I've written up here. But the first thing

00:01:34.010 --> 00:01:38.720
we're going to talk about is what is different
about mobile AP--mobile mapping. Why is this

00:01:38.720 --> 00:01:45.180
a different kind of talk than your basic--how
to get started with Google Maps on X platform.

00:01:45.180 --> 00:01:50.890
And we're going to talk about the different
kinds of options here. Now they are multiple

00:01:50.890 --> 00:01:58.250
options. You can develop using native applications,
native APIs. You can develop using our JavaScript

00:01:58.250 --> 00:02:02.700
API. You can do a combination of the two.
You can use our static maps API. I'm going

00:02:02.700 --> 00:02:08.840
to go through all these different options
and talk about why they are the same--why

00:02:08.840 --> 00:02:14.840
they're different and what the different advantages
are of each. At the end, I'm actually going

00:02:14.840 --> 00:02:21.250
to go through and do a comparison feature
by feature which--what the major features

00:02:21.250 --> 00:02:27.889
are and what you have on the different platforms.
And you'll see from that why I recommend the

00:02:27.889 --> 00:02:33.920
JavaScript API. And then finally I'm going
to talk about some optimizations that you

00:02:33.920 --> 00:02:48.180
can use to make your maps faster. Okay. So
what is difference about--about mobile? There's

00:02:48.180 --> 00:02:53.690
a lot of different things obviously about
mobile. If you take a look at the mobile devices

00:02:53.690 --> 00:02:59.989
that you have in your--on your person right
now, you've got phones, you've got tablets,

00:02:59.989 --> 00:03:05.519
you've got--what else you got, laptops, these
are--these are different things that you're

00:03:05.519 --> 00:03:11.180
using, you're carrying around with you. And
they have very different screen sizes, very

00:03:11.180 --> 00:03:17.829
different form factors. So this is a lot smaller
than a Motorola Zoom and it's shaped differently,

00:03:17.829 --> 00:03:24.680
it's got different aspect ratios and that
sort of thing. This is also carrying around

00:03:24.680 --> 00:03:30.719
with it connections, innate connections that
it has two networkings; this has WiFi on it

00:03:30.719 --> 00:03:38.819
and it's got 3G and 2G, you know, it's got
slower speed connections for edge networks.

00:03:38.819 --> 00:03:42.749
It's got a lot of different kinds of connections
and your different devices have different

00:03:42.749 --> 00:03:48.239
connections depending on where they're physically
located with what kind of device they are,

00:03:48.239 --> 00:03:53.159
what networks they are, what SIM cards you
have in them, that sort of thing. So these

00:03:53.159 --> 00:03:59.349
are--these are things you have to take into
account. And a piece of that is what I'm going

00:03:59.349 --> 00:04:04.930
to--I'm going to generically refer to connections
as latency. So this issue of latency is like

00:04:04.930 --> 00:04:14.519
how long does it take for your map to actually
display in--to your user? You also have to

00:04:14.519 --> 00:04:20.870
take into account things like user interface.
What kind of interface interactions you get

00:04:20.870 --> 00:04:26.600
on a device. So mobile devices are new because
you interact with them with your fingers not

00:04:26.600 --> 00:04:32.440
with a keyboard, right? So there's a lot of
different kinds of interactions and different

00:04:32.440 --> 00:04:40.231
devices will actually pass different connections
to browsers than they will to native applications

00:04:40.231 --> 00:04:44.880
and there's some things to think about there.
I'm going to do some--I'm going to be mentioning

00:04:44.880 --> 00:04:54.620
that as we go along and also doing some demos.
These devices services, so these--these--these

00:04:54.620 --> 00:05:00.080
is where you actually get a lot more power
out of something like this than you don out

00:05:00.080 --> 00:05:05.200
of your laptop. You have a GPS device in this,
I mean, think about a few years ago, five

00:05:05.200 --> 00:05:09.040
years ago, you've been carrying around a GPS
in your pocket with, you know, just in your

00:05:09.040 --> 00:05:13.370
phone that was--that would've been pretty
incredible. So you're getting that. You're

00:05:13.370 --> 00:05:18.541
getting things like compass, you get contacts,
you get all these sort of different kind of

00:05:18.541 --> 00:05:27.200
services that aren't necessarily available
in a browser-based application. You also use--obviously

00:05:27.200 --> 00:05:35.890
have a different operating systems. You've
got Android devices, Samsung has its own Bada

00:05:35.890 --> 00:05:42.330
interface, got the iOS devices. You've got
a lot of different kinds of things coming

00:05:42.330 --> 00:05:48.110
down the line that have different kinds of
operating systems. And each one of them has

00:05:48.110 --> 00:05:53.150
different--different programming languages
associated with them in different ways in

00:05:53.150 --> 00:06:02.460
which you--you cope. And the--the traditional
solution on computers to solve that problem

00:06:02.460 --> 00:06:08.190
was Flash, because Flash is installed on some
huge percentage of computers like 90 some

00:06:08.190 --> 00:06:17.170
percent, 99% or something like that. But not
on mobile devices, in fact only--of the major

00:06:17.170 --> 00:06:23.490
devices out there, I believe only Android
devices support Flash, so obviously, the iOS

00:06:23.490 --> 00:06:34.410
you can't use Flash APIs to connect to them.
All right. So--this was the landscape two

00:06:34.410 --> 00:06:40.240
years ago when I first gave this kind of talk.
When we first introduced the Google Maps API

00:06:40.240 --> 00:06:48.340
version three, we had a fairly simple way
to explain what you did with the different--what

00:06:48.340 --> 00:06:53.850
you could do with the different devices. And
you see there that's a G1, that's the first

00:06:53.850 --> 00:07:00.670
Android device and this is the first iPhone,
on the far, your left there, you have--I just

00:07:00.670 --> 00:07:06.910
put up a Nokia phone, it's like a feature
phone, it's got a basic browser in it. But

00:07:06.910 --> 00:07:12.870
you don't have access to Google Maps through
any sort of other programming interface so

00:07:12.870 --> 00:07:17.700
using the basic browser with no JavaScript
you need to do something like the Static Maps

00:07:17.700 --> 00:07:26.510
API. Then you have Native APIs that are available
in iOS and Android so that is if you're an

00:07:26.510 --> 00:07:35.280
Android developer, you use MapView, if you're
an iOS developer you use Map Kit. And our

00:07:35.280 --> 00:07:43.040
suggestion was to use the JavaScript API which
could be used on both of those. But the situations

00:07:43.040 --> 00:07:51.730
changed a little bit in the Intra. You've
got a wider variety of devices now, some of

00:07:51.730 --> 00:07:56.840
which are coming along in their smart phones
but don't--a few of them which don't even

00:07:56.840 --> 00:08:05.350
use either Android or iOS like the Samsung
Bada. And--and you got these powerful tablets

00:08:05.350 --> 00:08:10.780
coming out that have also these very different
interfaces, they have different ways in which

00:08:10.780 --> 00:08:15.420
people use them, interact with them, carry
them around. So these are just all the kinds

00:08:15.420 --> 00:08:19.570
of things--I like to put this up towards the
beginning to remind you sort of what work--what

00:08:19.570 --> 00:08:25.070
we're talking about--we're not talking about
just a map on your phone and because I'm with

00:08:25.070 --> 00:08:30.340
Google, we're not just talking about, you
know, an Android device or a few Android devices.

00:08:30.340 --> 00:08:35.669
But actually there are, you know, dozens of
Android devices on the market and many tablets

00:08:35.669 --> 00:08:44.250
coming down the line. Okay. So, let's get
back to latency for a minute. I like to--to

00:08:44.250 --> 00:08:50.460
sort of highlight this. Now, there are basically
two kinds of latency. And remember again,

00:08:50.460 --> 00:08:56.130
latency, I'm basically talking about the speed
in which something loads--application loads.

00:08:56.130 --> 00:09:02.170
There's two kinds of latency. One is the actual
latency. The time it takes to load a page

00:09:02.170 --> 00:09:08.330
or an application with a--on your device,
and then there's the user-perceived latency

00:09:08.330 --> 00:09:13.860
which is how long the user thinks it actually
takes. And you want to reduce both of these.

00:09:13.860 --> 00:09:19.150
Obviously, the first helps with the second
but there are tricks that you can do that

00:09:19.150 --> 00:09:26.700
help with the second while you're--while you're
trying to help with the first. So let me give

00:09:26.700 --> 00:09:32.090
you an example. And I give you--this is an
example because, one, we like to talk about

00:09:32.090 --> 00:09:37.460
our JavaScript Maps API but two, because these
are techniques that, on the next slide, I

00:09:37.460 --> 00:09:44.580
will show you that you can also use yourself.
And--before I get too far into this, let mention,

00:09:44.580 --> 00:09:50.170
how many--you're all going to Google I/O,
right? Okay, there's a talk, I think it's

00:09:50.170 --> 00:09:57.000
tomorrow, it's called Speedy Maps. And the
Speedy Maps talk will go into greater detail

00:09:57.000 --> 00:10:01.130
on a lot of the--the pieces that I'm going
to discuss now. But if you can't get to it,

00:10:01.130 --> 00:10:07.000
I'm going to--I'm going to go into some detail
just talking about--what but that they--these

00:10:07.000 --> 00:10:12.430
will be actual engineers on the--JavaScript
Maps API who can tell you--you know, in great

00:10:12.430 --> 00:10:22.130
detail how you can, you can speed up your
map. But here's what we did, when we switched

00:10:22.130 --> 00:10:28.190
from version two to version three of the Google
Maps API. We totally rewrote it. And we did

00:10:28.190 --> 00:10:31.950
it, you know, in such a way that it would
be optimized from mobile devices because we

00:10:31.950 --> 00:10:38.690
knew that that was the main way in which people
are going to start interacting with our maps.

00:10:38.690 --> 00:10:43.020
So, the first thing you do is you load only
the code that is necessary. Version two of

00:10:43.020 --> 00:10:51.330
the API--the map, the central map object knew
about everything. If you want to put a marker

00:10:51.330 --> 00:10:57.350
on a map, you said, you know, oh, take the
map and put a marker on it at this location.

00:10:57.350 --> 00:11:02.230
Now if you just want to put a map, the map
knows nothing about markers. All it does is

00:11:02.230 --> 00:11:07.730
it downloads some stubby interfaces so that
you can--so that you can then load down code

00:11:07.730 --> 00:11:13.341
that you actually need when you need it. So,
if you need to load a code for a map and a

00:11:13.341 --> 00:11:19.080
marker, it only loads the code for the map
and the marker. If you want--need to load

00:11:19.080 --> 00:11:22.970
driving directions, it loads that code as
well. But only the code that you actually

00:11:22.970 --> 00:11:29.270
need which is different from version two of
the API, reducing the file size, reducing

00:11:29.270 --> 00:11:35.240
the number of files going down the line. Another
thing we did was we loaded--we load a static

00:11:35.240 --> 00:11:42.120
map first. It's the fist thing we do, we put
in a static map, that looks like your map.

00:11:42.120 --> 00:11:48.680
Static map is just an image a straight up,
you know, single image of your map with, you

00:11:48.680 --> 00:11:55.440
know, what ever the basic markers on beforehand.
And the reason we do this is that the user

00:11:55.440 --> 00:12:04.790
sees something happening, reducing that user
perception of something going on. People are--are

00:12:04.790 --> 00:12:08.310
more forgiving if they can see an actual map.
They can go, oh, I can see that. They may

00:12:08.310 --> 00:12:13.800
try and interact with it and quite can't do
it yet but that functionality then gets loaded

00:12:13.800 --> 00:12:20.370
behind it and the static map then goes away
and people can interact with them. So, load

00:12:20.370 --> 00:12:25.820
the static map first. So, the hint there is
when you're doing something in a mobile application,

00:12:25.820 --> 00:12:31.890
load something that shows up before, while
you're doing something to give people something

00:12:31.890 --> 00:12:38.089
to do. And then the other one, and this one
actually surprises quite a bit, is package

00:12:38.089 --> 00:12:45.649
your downloads together. The greatest determinant
actually of how long some thing took to load

00:12:45.649 --> 00:12:50.370
with how many files were downloaded. It's
a much greater determinant than the actual

00:12:50.370 --> 00:12:57.500
size of the downloads. If you could--if you
downloaded four 250 megabyte or sorry 250

00:12:57.500 --> 00:13:06.310
kilobyte files, instead of one--one megabyte
file--what or a thousand kilobyte file. You--you

00:13:06.310 --> 00:13:11.970
would--the four files would download a lot
slower than the one file. This is because

00:13:11.970 --> 00:13:18.899
the browser does things sequential, right?
So, if you package it all up together, you

00:13:18.899 --> 00:13:25.360
load one--you load it once. And you can do
these things yourself, right? Or if you're

00:13:25.360 --> 00:13:31.160
writing JavaScript or you're writing code,
or you're making server calls, package things

00:13:31.160 --> 00:13:37.410
together in course downloads. These are things
you can do to--to help optimize your maps.

00:13:37.410 --> 00:13:43.720
Load the static map first, load only the code
that you need to load to do the objects you--the

00:13:43.720 --> 00:13:48.650
things you need to do, and there's a couple
of other things that we suggest and I'm going

00:13:48.650 --> 00:13:57.380
to talk more about this one later. The use
[INDISTINCT] clickable image overlays to--for

00:13:57.380 --> 00:14:03.870
larger datasets and--I mean, talk a lot more
about that but this is a--this is one of the

00:14:03.870 --> 00:14:15.899
key optimizations that you can use for mobile
devices. Okay, so that's the--that's the basics

00:14:15.899 --> 00:14:19.620
of like what's different and like the kinds
of things that you have to be worried about

00:14:19.620 --> 00:14:27.720
more from mobile devices that you do for--for
desktop devices. So, development options;

00:14:27.720 --> 00:14:33.680
just to review this again, native applications,
we're going to be talking about, if you want

00:14:33.680 --> 00:14:40.540
to write native a--a Google map in native
code, your two options are, MapKit on iOS

00:14:40.540 --> 00:14:49.860
and map view on Android. For our JavaScript
maps API, you can use it in any web kit enabled

00:14:49.860 --> 00:14:54.800
browser. I've got a--a list there. There's
a list in the documentation. It's bigger than

00:14:54.800 --> 00:15:05.339
iOS and--and Android. And then, for non-JavaScript
browsers, the static maps API. Okay. So let's

00:15:05.339 --> 00:15:10.810
talk a little bit about the advantages and
disadvantages of native apps. And I'm trying

00:15:10.810 --> 00:15:17.370
not to wander too far over here because I
think that's bad for the video. Sorry, to

00:15:17.370 --> 00:15:21.700
the videographer. I tend to wander a lot when
I'm talking because I get excited. Also I've

00:15:21.700 --> 00:15:27.800
had a little caffeine so, you know. Things
are--things are exciting. Okay, so MapKit.

00:15:27.800 --> 00:15:37.990
Map kit on iOS is an actual Android product.
Sorry, an Apple product. It says Google Maps

00:15:37.990 --> 00:15:42.970
and may do use our services to do it. I just
need to point this out. We don't actually

00:15:42.970 --> 00:15:48.250
provide support for it because it's--it's
technically actually an Apple product. It

00:15:48.250 --> 00:15:53.000
still gives you a Google Map. You get the
Google--they're very nice map tiles that we

00:15:53.000 --> 00:15:57.520
provide and a bunch of other things. We provided
them with the version of Google Maps from

00:15:57.520 --> 00:16:03.910
Mobile and they then went and customized that
for their--their own use. On Android, you

00:16:03.910 --> 00:16:12.890
use Map view which is something provided directly
by Google. So the advantage of these two as

00:16:12.890 --> 00:16:18.090
the case is that they are native code. They're
more–they can be–-therefore more easily

00:16:18.090 --> 00:16:22.610
integrated with the native application. If
you are writing an Android app, you're writing

00:16:22.610 --> 00:16:28.810
an iPhone App, you can directly integrate
these into your application and it's the one

00:16:28.810 --> 00:16:34.810
programming language, right. You know in Android,
it's JavaScript or C or whatever you're going

00:16:34.810 --> 00:16:41.519
to–-you're using to write your Apps there
and it's objective C for iOS. And the advantage

00:16:41.519 --> 00:16:46.360
of integration is you don't have to learn
JavaScript or something other to–-other

00:16:46.360 --> 00:16:53.440
language to load something. There's a bit
lower latency because when somebody actually

00:16:53.440 --> 00:17:04.809
downloads the App, once it's actually downloaded
then you've got native writing on their phone

00:17:04.809 --> 00:17:10.620
that or their device that code, right so they
don't have to go and reload it down whenever

00:17:10.620 --> 00:17:18.770
they load a page. This discrepancy is actually
starting to lessen some as the JavaScript

00:17:18.770 --> 00:17:26.250
map API gets to be more powerful or faster
but they're still–-they're still some latency

00:17:26.250 --> 00:17:33.560
there. You get full user interface support,
so all the interfaces that are custom for

00:17:33.560 --> 00:17:42.770
that device are supported natively in that
application. So what do I mean by that? So,

00:17:42.770 --> 00:17:53.630
sorry, if you do pinch to zoom for instance
on a Android device, you will get–you will

00:17:53.630 --> 00:18:00.490
get pinch to zoom in your map view, so somebody
can just you know, literally pinch on the–-on

00:18:00.490 --> 00:18:06.560
the device. That is not passed through to
the Android browsers and I believe it is passed

00:18:06.560 --> 00:18:12.790
through to the iPhone browsers so you get
this--in native code, you get access to all

00:18:12.790 --> 00:18:19.990
those kinds of events that any application
can take advantage of. Let's get another thing

00:18:19.990 --> 00:18:25.700
which is discoverability, right? You want
to put your application in the Android market

00:18:25.700 --> 00:18:33.040
place, you want to put your application in
the Apple–-in the Apple store than in the

00:18:33.040 --> 00:18:39.100
App store then you get–-people can find
it there. Of course, you're competing with

00:18:39.100 --> 00:18:43.220
all the other devices–-the other applications
that are out there but you know, it's not

00:18:43.220 --> 00:18:48.420
web search, right, so it's a different kind
of discoverability and people are still using

00:18:48.420 --> 00:18:56.340
that as one of the main ways in which they
find out what Apps to use. On the other hand,

00:18:56.340 --> 00:19:01.010
you do have to go through the approvals process
for these different platforms to get your

00:19:01.010 --> 00:19:12.380
applications out there. That's okay. You want–-I
should try good dramatic pose for the photographer,

00:19:12.380 --> 00:19:17.929
that's in the video [INDISTINCT] there's a
photographer down there. I'll try and do it

00:19:17.929 --> 00:19:24.030
naturally. Okay, so what are some of the other
points? If you want to write an application

00:19:24.030 --> 00:19:29.210
that works on both Android and iPhone though,
that means that you're recoding that map for

00:19:29.210 --> 00:19:34.660
every platform that you're doing, right. So
you're writing an iPhone application, you're

00:19:34.660 --> 00:19:42.910
writing an Android application blah, blah,
blah. It's extra work and when you want to

00:19:42.910 --> 00:19:46.280
update that application, you have to update
the entire application where you have to do

00:19:46.280 --> 00:19:51.890
an update that somebody has to then download
through the market place, through the Apps

00:19:51.890 --> 00:19:57.740
store which means that it's going to happen
less frequently and your users, your map,

00:19:57.740 --> 00:20:02.400
that map portion of your application is going
to be different on the different ones. And

00:20:02.400 --> 00:20:09.590
finally, there are many fewer features within
the native APIs than within the JavaScript

00:20:09.590 --> 00:20:15.840
API. That's because for the JavaScript API,
that's all we're doing is making new features

00:20:15.840 --> 00:20:21.679
and making it better. Okay, so browser based
APIs, let's talk about the differences there.

00:20:21.679 --> 00:20:28.290
So I got a list here on the Android, iOS,
Samsung, Dolfin, the Blackberry 6, these are–-these

00:20:28.290 --> 00:20:36.000
are platforms that apparently supported by
the JavaScript maps API on different–-on

00:20:36.000 --> 00:20:42.740
different browser. And you do get access to
some phone--native phone features particularly

00:20:42.740 --> 00:20:49.630
geolocation which seems to be, you know, one
of the primary ones for mapping applications.

00:20:49.630 --> 00:20:54.390
You can access other HTML 5 features like
local storage and all that sort of thing depending

00:20:54.390 --> 00:20:59.910
on the device and the availability of those
features. I call this the write once, tweak

00:20:59.910 --> 00:21:06.280
everywhere because of course, you're going
to have different devices, have different

00:21:06.280 --> 00:21:12.630
screen sizes and different UI constraints.
You don't get access to all of those UI features

00:21:12.630 --> 00:21:18.290
as I mentioned in Android, currently, you
don't get access to that pinch to zoom kind

00:21:18.290 --> 00:21:23.580
of functionality. So that's something top
just take in into consideration. It also looks

00:21:23.580 --> 00:21:28.780
slightly different, right? Both map view and
MapKit are designed to look like native applications,

00:21:28.780 --> 00:21:36.760
the interfaces and look like, you know, an
Android or iPhone application. The browser

00:21:36.760 --> 00:21:44.490
application doesn't mimic those UI features
in quite the same way. But then-–the one

00:21:44.490 --> 00:21:48.400
of the key things that I think of that's really
different about this is that you get really

00:21:48.400 --> 00:21:57.680
rapid deployment and development of the application.
JavaScript and HTML are very simple and you

00:21:57.680 --> 00:22:01.410
can push it out to your server? You don't
have to update your application, you just

00:22:01.410 --> 00:22:10.380
have app–-you know, you just have people
load a new version of it. You know, downside

00:22:10.380 --> 00:22:14.559
is you don't get the discoverability, the
App store market place discoverability but

00:22:14.559 --> 00:22:20.640
you do get–-you do get access to–-you
don't have to do there approvals, sorry, that's

00:22:20.640 --> 00:22:25.580
what I was trying to get at. Okay, so let's
just look at the basic code. This is your

00:22:25.580 --> 00:22:32.870
basic code for creating a browser based application.
You'll see here I don't know probably in the

00:22:32.870 --> 00:22:40.110
video you won't be able to actually see my
red dot on the screen but you'll see here

00:22:40.110 --> 00:22:46.280
I've got–-this is the loader so you're loading
this script tag maps.google.com/maps/api/js

00:22:46.280 --> 00:22:53.620
and I've added this parameter sensory equals
true. We always ask the people to add a sensor

00:22:53.620 --> 00:22:59.940
parameter because our data providers require
it. If you're using the JPS or something in

00:22:59.940 --> 00:23:06.630
the device to say, here's where this person
is located then we ask that you add this sensor

00:23:06.630 --> 00:23:13.480
equals true otherwise the sensor equals false.
That does not give you any benefits of the

00:23:13.480 --> 00:23:18.950
sensor itself--they–-there are other ways
to get access to that. I just always mention

00:23:18.950 --> 00:23:22.720
that. Then you set a variety of options in
this case you're just setting the zoom level,

00:23:22.720 --> 00:23:28.750
higher numbers mean you're more zoomed in,
lower numbers are farther out. And then the

00:23:28.750 --> 00:23:36.280
map type, so in this case, I'm setting it
to a road map. And then I create the map and

00:23:36.280 --> 00:23:42.240
basically just say assign it to this div on
in the HTML, past it the options that I declare

00:23:42.240 --> 00:23:49.600
there and you've got a map and that's it.
The basics of doing HTML 5 geolocation are

00:23:49.600 --> 00:23:59.990
right here, this is, you can just ask if this
object exists "(navigator.geolocation)." And

00:23:59.990 --> 00:24:05.410
what it will say, it will return to you as
whether or not that's true, that object exist.

00:24:05.410 --> 00:24:10.280
If it exists, then you do something with it.
And this is the very basics of doing something

00:24:10.280 --> 00:24:16.950
with it, "navigator.geolocation.getCurrentPosition,"
says, you know, "Okay, you have the object

00:24:16.950 --> 00:24:24.190
now. Find me that position. And when you do,
you pass this function here and you do something

00:24:24.190 --> 00:24:29.640
with it, right?" And in this case, this code
will actually say, "Okay, set the center of

00:24:29.640 --> 00:24:35.210
the map to that location." There are many
different things you can do here. One thing

00:24:35.210 --> 00:24:41.870
I want to point out is when you do all this,
when you put it in this "navigator.geolocation"

00:24:41.870 --> 00:24:50.929
when the user loads it, the browser will ask
the user. "Is it okay for me to share your

00:24:50.929 --> 00:24:58.050
location with this application?" And it'll
be just the first time that they load that

00:24:58.050 --> 00:25:07.261
application. And actually I'd like to switch
over to the Elmo if I could. So, I've got

00:25:07.261 --> 00:25:16.590
here a Motorola zoom. I'm going to apologize;
the focus doesn't seem to be working very

00:25:16.590 --> 00:25:24.221
well on the Elmo. This is actually really
nice on the Motorola zoom. But you'll see

00:25:24.221 --> 00:25:32.910
here that I've already given it my permission
to access my location for this site. So, what

00:25:32.910 --> 00:25:36.880
I'm going to do here is I'm going to zoom
in a little bit. You'll see it actually did

00:25:36.880 --> 00:25:47.350
a pretty good job of finding where we are.
Well, I wish you could really see that. But

00:25:47.350 --> 00:25:52.410
this is--trust me, this is approximately where
we are. Sorry, the projector's not doing a

00:25:52.410 --> 00:25:56.940
great job of picking that up. You'll notice
there something else here that I put this

00:25:56.940 --> 00:26:02.820
gray circle around it. Now, I did that because
geolocation actually gives you something a

00:26:02.820 --> 00:26:07.830
little bit more interesting which is, it tells
you how accurate it thinks that location is.

00:26:07.830 --> 00:26:11.740
Tells you, you know, all you have to do is
say, on the position, give me the accuracy.

00:26:11.740 --> 00:26:17.360
And it'll tell you within how many meters
it thinks it has it. Now it's up to the device

00:26:17.360 --> 00:26:22.860
to figure out how to give you that information.
You can also ask it interesting things like,

00:26:22.860 --> 00:26:30.620
how old is this position? How many seconds
ago was this position taken? And things like,

00:26:30.620 --> 00:26:36.410
are you using coarse or fine grain accuracy?
Basically, is this assisted GPS or is it just

00:26:36.410 --> 00:26:42.080
WiFi based geolocation? These are different
questions that the device figures out how

00:26:42.080 --> 00:26:47.720
to answer and then passes you back that information.
So, you can get some really rich interesting

00:26:47.720 --> 00:26:53.620
information just from the basic HTML5 spec.
Now, people always ask me, what's the support

00:26:53.620 --> 00:27:00.169
for the maps API for geolocation? And I always
say, you don't need it, it's in the HTML5

00:27:00.169 --> 00:27:13.190
spec. Okay, so let's switch back to the computer.
So, I want to talk about one other option

00:27:13.190 --> 00:27:19.030
for smart phone development and that's the
hybrid application. That is basically a native

00:27:19.030 --> 00:27:27.700
application that runs a browser within it.
So, this is basically, you create this native

00:27:27.700 --> 00:27:34.500
application that creates a shell around your
map using UI WebView and iOS and WebView in

00:27:34.500 --> 00:27:42.220
an Android device. This gives you some of
the advantages and all of the disadvantages

00:27:42.220 --> 00:27:47.400
of both systems, almost all. I call it the
worst of both worlds and also the best of

00:27:47.400 --> 00:27:53.919
both worlds. But, you know, mostly what people
hear is the worst. You have decent UI integration,

00:27:53.919 --> 00:28:00.190
and, you know, you get to discover ability
on a variety of platforms both on WebSearch

00:28:00.190 --> 00:28:06.470
and in the market place. But you still have
to write these native applications. This is

00:28:06.470 --> 00:28:12.850
currently our suggested method for most developers
because most developers are wanting to learn

00:28:12.850 --> 00:28:21.360
the different platforms as well. But, you
know, your mileage may vary. The Google I/O

00:28:21.360 --> 00:28:25.710
application that you may have downloaded from
the market place uses this method for the

00:28:25.710 --> 00:28:35.460
map. I may be running a little bit out of
time. So, I'm not going to go into great telling

00:28:35.460 --> 00:28:41.531
the code but these slides will be published.
There's also an article on Maps API documentation

00:28:41.531 --> 00:28:46.940
about how to do this. But basically, you know,
you have to do a WebView layout. You have

00:28:46.940 --> 00:28:52.880
to give permissions to Internet access of
course for the--for your hybrid application.

00:28:52.880 --> 00:29:00.440
And if you want to get access to location
data, you have to give permissions for--for

00:29:00.440 --> 00:29:06.409
coarse and fine grain location. And then this
is the basic code, you basically have to create

00:29:06.409 --> 00:29:14.890
a web map activity, and set up your WebView,
and then you just load the URL. So, it's actually,

00:29:14.890 --> 00:29:19.309
you know, it's a bit more involved in that
particularly if you want to expose some other

00:29:19.309 --> 00:29:28.670
native services like contacts or geolocations
to the device, oh sorry, to your JavaScript

00:29:28.670 --> 00:29:37.100
page. But this is your basics for setting
up the code. Okay, so let's talk quickly about

00:29:37.100 --> 00:29:42.370
feature phones. How many of you have feature
phones that is non smartphones? Okay not very

00:29:42.370 --> 00:29:47.400
many. But most people in the world do, right?
Most people in the world have feature phones.

00:29:47.400 --> 00:29:53.320
And for many people that's the sole way in
which they access the Internet. Now, what

00:29:53.320 --> 00:29:59.429
I mean here is, say you have a dumb browser
and I don't mean that in a highly pejorative

00:29:59.429 --> 00:30:05.830
way, but a little pejorative. That is, that
it can't really handle full JavaScript support

00:30:05.830 --> 00:30:11.080
or they might, this is also an option for
you when you're operating in very low bandwidth

00:30:11.080 --> 00:30:18.730
environments. Using our stem--static maps
API, you can get a very light weight map server.

00:30:18.730 --> 00:30:23.950
No, it's non-interactive, it's just an image,
right? You specify things like, you know,

00:30:23.950 --> 00:30:29.429
how big you want it, what color of the markers
are, that sort of thing. It's fairly fully

00:30:29.429 --> 00:30:35.460
featured except that it's again non-interactive
but it's fast. And that's the key here. Very

00:30:35.460 --> 00:30:44.400
small lightweight tiles. And this is basically
what it looks like. It's just a URL, right?

00:30:44.400 --> 00:30:52.970
And within that URL, up to 2,048 characters,
you can specify a map and you get a map back.

00:30:52.970 --> 00:30:58.789
And here I specified things like Brooklyn
Bridge, New York, New York. So, you're doing

00:30:58.789 --> 00:31:04.640
a little of bit of geolocation. You can actually
say, "Center it on a, you know, an address

00:31:04.640 --> 00:31:13.990
rather than centering it on a specific geolocation."
You know, zoom level size, the map type. You

00:31:13.990 --> 00:31:21.350
know, satellite or road map or whatever. And
then I'm actually specifying markers at different

00:31:21.350 --> 00:31:26.960
locations and different colors for the markers.
You can even do things like specify custom

00:31:26.960 --> 00:31:33.090
marker URLs. So, if you have something that's
for your application that you use, you can

00:31:33.090 --> 00:31:37.909
specify those custom markers. You can add
in poly lines, you can add in polygons, you

00:31:37.909 --> 00:31:44.260
can do really interesting but non-interactive
stuff. And we're turned back a very fast,

00:31:44.260 --> 00:31:49.659
lightweight application. Okay, so let's go
through some of the feature of comparisons

00:31:49.659 --> 00:31:56.510
here. I've got two slides of this and the
bottom line is that first column, the JavaScripts

00:31:56.510 --> 00:32:06.630
maps API has tons of features that are not
in any of the other--the other APIs. You know,

00:32:06.630 --> 00:32:13.890
everybody does the basics except you'll notice
one here geocodings seem to actually be missing

00:32:13.890 --> 00:32:20.610
from the MapKit. Geocoding is the process
of taking an address and turning it into latitude

00:32:20.610 --> 00:32:27.100
and longitude. So that's, you know, their
choice. They chose not to expose that through

00:32:27.100 --> 00:32:32.560
MapKit. But you can do interesting things
like this KML/GeoRSS Layers, driving directions,

00:32:32.560 --> 00:32:41.831
traffic, circles and rectangles, custom overlays,
image types, custom map types, fusion tables

00:32:41.831 --> 00:32:50.500
integration. The list is actually longer than
this. Styled Maps. That's another fun one.

00:32:50.500 --> 00:32:55.289
The list is actually longer than this. I just
didn't feel like going on for slide-after-slide

00:32:55.289 --> 00:33:02.351
of the Javascript features. So there is one
interesting data point right here, which is

00:33:02.351 --> 00:33:07.720
navigation. So the Android devices actually
allow to do this thing, which is launching

00:33:07.720 --> 00:33:13.710
things as an intent. How many of you are Android
developers? Okay. So you can--you know, other

00:33:13.710 --> 00:33:19.010
applications can expose an interface that
you can say, "Just launch this application."

00:33:19.010 --> 00:33:23.782
It's not really an API. It's just, you know,
pass me some information and I will--I will

00:33:23.782 --> 00:33:30.720
give them--give you access to this application
and you can launch it. Navigation, which is

00:33:30.720 --> 00:33:38.340
that turn-by-turn directions that you can
get on Android phones is exposed through the--as

00:33:38.340 --> 00:33:45.190
an intent in Android devices and that is the
only platform that that's available on. So

00:33:45.190 --> 00:33:53.659
I do want to, like, fess up. That is--that
is the case. That's some optimization. But

00:33:53.659 --> 00:33:59.220
I want to go and do another couple of demos
here for you. So if we can get back to the--to

00:33:59.220 --> 00:34:10.940
the Elmo. We could go back to the Elmo, please.
Okay. So, I showed you this geolocation. Let's

00:34:10.940 --> 00:34:21.450
take a look at this here. This is a little
bit harder to see because this is--this is

00:34:21.450 --> 00:34:27.089
not a fantastic presentation. But if you were
asked to see it on the actual device, this

00:34:27.089 --> 00:34:36.750
is nicer. This is Google Map and you'll see
it's actually in black-and-white. I deliberately

00:34:36.750 --> 00:34:41.230
optimized this map to take away something;
take away a lot of things from this map. And

00:34:41.230 --> 00:34:45.669
one of the things I took away was color. So
I changed everything to black-and-white and

00:34:45.669 --> 00:34:50.520
I took away most of the points of interest,
and I took away all the roads. I left on the

00:34:50.520 --> 00:34:56.179
transit lines. This is actually in Japan.
And I chose that because Japan is very dense

00:34:56.179 --> 00:35:04.450
in the map. And this is what the map looks
like normally. Now, that's a lot of information

00:35:04.450 --> 00:35:14.820
that's missing in my Styled Map. Go back to
this same location, the Styled Map. Now the

00:35:14.820 --> 00:35:23.300
reason I did that, by the way, is to de-clutter
the map. Now, on this huge screen that we've

00:35:23.300 --> 00:35:30.560
got here, you know, you see a lot information
and that's generally considered to be good.

00:35:30.560 --> 00:35:37.359
But what if you're doing it on your phone?
And where did my phone go? There's my phone.

00:35:37.359 --> 00:35:43.460
What if you're doing it on something this
size? If you have all that information, you--you're

00:35:43.460 --> 00:35:51.670
exposing the user to looking at all that information
and trying to parse through it. If you can

00:35:51.670 --> 00:35:56.290
de-clutter your map, then, you know, that's
an optimization that you can use to make a

00:35:56.290 --> 00:36:01.590
better user interface for your user. You can
also do things like change the color so that

00:36:01.590 --> 00:36:09.359
it matches your--the color scheme of your
website or something else, you know; some

00:36:09.359 --> 00:36:20.190
for aesthetic reasons. And I also wanted to
point out this. So again, usually, a lot cooler

00:36:20.190 --> 00:36:27.339
in--if you view this site actually in--on
your device, this looks a lot sharper. But

00:36:27.339 --> 00:36:34.710
this is a Google Street View. And, you know,
you see, if you move around in Street View--my

00:36:34.710 --> 00:36:42.040
connection is pretty slow right at the moment.
But generally, when you're moving around in

00:36:42.040 --> 00:36:49.120
Street View, you see streets, right? So one
thing we add, which is only available in the

00:36:49.120 --> 00:36:58.540
Javascript, Maps API is this custom Street
View. So this is the indoor--this is the indoor

00:36:58.540 --> 00:37:09.610
offices of the Sydney office. This is a Maps
API site and they basically just open one

00:37:09.610 --> 00:37:19.210
panoramic photo and put it into this Maps
API site. And you'll see that it's actually

00:37:19.210 --> 00:37:29.190
integrated with the controls so I can go back
out to the road and view the road. So Street

00:37:29.190 --> 00:37:38.490
View available to you through the Javascript
Maps API and it served up using HTML 5 so

00:37:38.490 --> 00:37:43.420
you get to see it on any browser. We did that
deliberately because Flash wasn't supported

00:37:43.420 --> 00:37:55.110
on many mobile devices. Okay. I want to talk
about another kind of optimization. And this

00:37:55.110 --> 00:38:03.070
is kind of a two parter. So, you may remember
back at the beginning, I talked about doing

00:38:03.070 --> 00:38:12.580
clickable raster overlays to show large amounts
of data. Now this is--this is a Maps API application

00:38:12.580 --> 00:38:20.109
running on--just on my own website and it's
using the Fusion Table Layer. Now what Fusion

00:38:20.109 --> 00:38:25.760
Tables is, is it's--how many of you have used
Fusion Tables or know what it is? Not very

00:38:25.760 --> 00:38:32.080
many. Okay. So Google Fusion Tables is a way
for you to upload large amounts of what we

00:38:32.080 --> 00:38:40.400
call vector data that is, you know, tabular
data. Spreadsheets, databases, yes, CSP files

00:38:40.400 --> 00:38:49.260
and we--and KML files, and put them--store
them on Google servers and then query them

00:38:49.260 --> 00:38:55.400
using Google's--using an API or directly into
the Google Maps API. And then what happens

00:38:55.400 --> 00:39:03.349
is Google will render these as map tiles.
So this is not rendered as Javascript objects

00:39:03.349 --> 00:39:10.190
within the browser. It's rendered as a single
image tile or actually multiple images tiled

00:39:10.190 --> 00:39:16.800
the same way we do the tiling for the map
itself. So notice when I move the map here

00:39:16.800 --> 00:39:27.450
like this, you'll see--you will see different--if
I move it in places I haven't actually been

00:39:27.450 --> 00:39:35.570
to see that part of the map will not be exposed
and then it will--it will come in. You see

00:39:35.570 --> 00:39:41.089
there where it's drawing Alaska there. The
idea here is that you take in it--you take

00:39:41.089 --> 00:39:49.040
an image to represent all your markers and
all your features and it's a lot smaller than

00:39:49.040 --> 00:39:57.820
creating Javascript objects for every marker
or feature. There's a talk on fusion tables.

00:39:57.820 --> 00:40:04.140
I believe it's tomorrow. And James Miguel
who did--who's doing that did some tests.

00:40:04.140 --> 00:40:13.540
I'm going to preview this for you. He took
100,000 markers on a--on high end Mac Pro

00:40:13.540 --> 00:40:19.900
using Chrome. So the best, you know, environment
for rending that. Rendered it within the browser

00:40:19.900 --> 00:40:27.089
and it took 34 seconds to render all those
markers. Now anything less than that set up

00:40:27.089 --> 00:40:32.680
and probably the browser would have just choked
on it. Using Google Fusion Tables and rendering

00:40:32.680 --> 00:40:40.180
it as these clickable overlays 100,0000 rendered
in three seconds and the map was actually

00:40:40.180 --> 00:40:46.370
useable. So the other thing that happens when
you render 100,000 markers or any large number

00:40:46.370 --> 00:40:52.070
of markers on to the map whenever you move
the map, the map has to move every--all the

00:40:52.070 --> 00:40:58.369
overlays. Where as if you're doing it all
as one image then it--it happens more quickly.

00:40:58.369 --> 00:41:06.210
So, again, more details in both the Speedy
Maps Talk and the Fusion Tables Talk. So within

00:41:06.210 --> 00:41:12.750
JavaScript, and again, this is because of
the projector here, it's not rendering very

00:41:12.750 --> 00:41:24.190
quickly. But let me--you can actually dynamically
interact with this layer through the query--through

00:41:24.190 --> 00:41:32.690
the query object. So here I'm just using a
slider and what I'm doing is I'm taking--this

00:41:32.690 --> 00:41:43.190
is a map of congressional districts in the
United States by population. And the color

00:41:43.190 --> 00:41:50.820
code--the color of the polygon represents
the actual population. I'm doing a query which

00:41:50.820 --> 00:41:56.990
is to hard up there but it's a SQL query,
right? So it's basic SQL query, SQL, saying

00:41:56.990 --> 00:42:03.000
select the shape column, that is a column
that describes the congressional district

00:42:03.000 --> 00:42:10.640
boundaries here and it says from--and it gives
a table ID and where, so these are just straight

00:42:10.640 --> 00:42:16.110
up SQL. The median age of the total population,
that's one column, is greater than a certain

00:42:16.110 --> 00:42:22.180
number, the number being generated by that--by
the slider when I click on the slider. So

00:42:22.180 --> 00:42:27.599
in this case, these are all the places where
congressional districts have median population

00:42:27.599 --> 00:42:36.710
greater than 40. You see there's a lot of
them in Florida. Okay. So if we could go back

00:42:36.710 --> 00:42:47.280
to the laptop. Thank you. So optimizations,
create these clickable raster overlays. And

00:42:47.280 --> 00:42:55.359
the--there's three methods of doing that using
Google. One is to use a Fusion Table. That

00:42:55.359 --> 00:43:00.980
is currently the best way. You can also use
your own KML or GeoRSS files and create what's

00:43:00.980 --> 00:43:06.960
called a KML Layer in there. We'll create
these highly optimized rasters for you. And

00:43:06.960 --> 00:43:14.030
when you click on them, you can actually get
click events back. Cache your data and your

00:43:14.030 --> 00:43:21.810
tiles locally, we have an article on documentation
that shows you some of the URLs that you can

00:43:21.810 --> 00:43:26.530
use to cache the tiles. You can't access them
directly but if you just use the cache manifest

00:43:26.530 --> 00:43:31.130
for performance purposes, you can cache those
tiles so that every time somebody goes back

00:43:31.130 --> 00:43:38.780
somewhere they don't have to reload them.
Use your HTML5 features like local storage

00:43:38.780 --> 00:43:46.260
and Geolocation. And compile your code. How
many of you are familiar with Closure, Google

00:43:46.260 --> 00:43:52.790
Closure? Not many of you, okay. Open source
library for compiling JavaScript. You ever

00:43:52.790 --> 00:43:56.420
go to a website and you're like "Oh, I just
want to view source." How many of you are

00:43:56.420 --> 00:44:00.960
JavaScript developers? Okay. You go and you
view the source and you look at it and you

00:44:00.960 --> 00:44:05.630
go, "Whoa, what, wait, what was that?" Because
you can't read it, right? It's just one big

00:44:05.630 --> 00:44:11.820
block of compiled texts. That's because it's
gone through a compiler, a process that's

00:44:11.820 --> 00:44:17.260
also known as minification. So the compiler
strips out all the human readable portions

00:44:17.260 --> 00:44:28.750
of it and turns it into something that is
debts. Not readable but the browser can still

00:44:28.750 --> 00:44:35.891
interact with it. This minified code is much
smaller so it's reducing your file size. Other

00:44:35.891 --> 00:44:42.960
optimizations do--be flexible in your styling,
right? We already provide interactions so

00:44:42.960 --> 00:44:51.460
if you go to our--if you go to a Maps API
site using the default user interface and

00:44:51.460 --> 00:44:54.980
it's on a very small device, we'll give you
a smaller control. And if it's on a larger

00:44:54.980 --> 00:45:02.110
device, we'll give you larger controls completely
dependent on the size of the div. But use

00:45:02.110 --> 00:45:08.340
a flexible screen size, don't set, you know,
pixel bound--pixel sizes for your height and

00:45:08.340 --> 00:45:13.490
weight but use percentages, you know, and
on a small device for your map, you probably

00:45:13.490 --> 00:45:20.589
want to use 100%, takes up the whole screen.
And some people like to try and match the

00:45:20.589 --> 00:45:28.400
native user interface. There's some CSS libraries
out there for actually matching the iOS screen

00:45:28.400 --> 00:45:38.079
size, I'm sorry, screen representations. So
I've got links in here to a number of articles

00:45:38.079 --> 00:45:48.110
and a video at the bottom for doing this kind
of optimizations and developing for mobile

00:45:48.110 --> 00:45:53.490
devices using Google Maps API. This will be,
you know, I assumed this--I assumed this will

00:45:53.490 --> 00:45:59.640
be published somewhere. This is our speaker
meter, so, you know, please give feedback

00:45:59.640 --> 00:46:05.240
on the talk. I'd really like to know what
you guys think about it. It's just, you know

00:46:05.240 --> 00:46:14.040
speakermeter.com/talks/mapping-mobile-devices
and these are the hash tags: # Geo and #iobootcamp,

00:46:14.040 --> 00:46:20.190
if you want to tweet about this. So at this
point, I am now going to take questions and

00:46:20.190 --> 00:46:26.710
what I'd appreciate is if you do--I want to
ask question if you can use the mic so that

00:46:26.710 --> 00:46:43.060
it will get recorded on to video. So, thank
you. Sorry, I was staring right into the sun

00:46:43.060 --> 00:46:47.950
there. Yes, go ahead.
&gt;&gt; [INDISTINCT]

00:46:47.950 --> 00:46:59.940
&gt;&gt; MARKS: Yes. For--the question is "For a
native Android App, I suggest that you use

00:46:59.940 --> 00:47:09.060
WebView with a--with the JavaScript API."
The Android people might suggest something

00:47:09.060 --> 00:47:18.750
different but this gives you a lot of different
advantages. Yes, next question.

00:47:18.750 --> 00:47:32.690
&gt;&gt; [INDISTINCT]
&gt;&gt; MARKS: Go ahead and I'll just repeat your

00:47:32.690 --> 00:47:36.140
question.
&gt;&gt; [INDISTINCT]

00:47:36.140 --> 00:47:41.299
&gt;&gt; MARKS: Uh-huh.
&gt;&gt; [INDISTINCT]

00:47:41.299 --> 00:47:46.530
&gt;&gt; MARKS: Yes. So you want to--you want to--let
me see if I--I'll repeat your question and

00:47:46.530 --> 00:47:49.500
see if I make sure I'm getting this right.
You want to find all the pizza joints that

00:47:49.500 --> 00:47:56.420
are within a certain radius, right? Yes, so
Google Fusion Tables would be able to do that

00:47:56.420 --> 00:48:01.180
for you. So you upload your data to Fusion
Tables. You can upload it in a CSV file or

00:48:01.180 --> 00:48:08.120
spreadsheet or KML file. Just have the GO
locations within it or you can have one column

00:48:08.120 --> 00:48:14.910
that has the address--the address and use
that and GO code that column. And then in

00:48:14.910 --> 00:48:20.210
the Maps API, you saw the thing I was showing
you with the census data, that's loading in

00:48:20.210 --> 00:48:25.860
data from fusion tables with the fusion table
layer. And you can do three kinds of spatial

00:48:25.860 --> 00:48:36.250
queries on fusion tables using that--using
an SQL syntax. The--you can do a radius search.

00:48:36.250 --> 00:48:42.430
So you can say, "Give me everything within
x number of meters of this one point," and

00:48:42.430 --> 00:48:46.630
what it'll do is it will give you an intersection.
So, if you're looking at polygons, it'll actually

00:48:46.630 --> 00:48:53.750
show you polygons that intersect that radius
not just or wholly contained within it. You

00:48:53.750 --> 00:48:59.540
can also do a bounding box. You can say, "Here's
a rectangle defined by two points. Give me

00:48:59.540 --> 00:49:05.250
everything that intersects with that." You
can also do nearest neighbor. So you can say,

00:49:05.250 --> 00:49:11.380
"Give me the 50 nearest points to this point,"
or, "The 50 nearest features to this particular

00:49:11.380 --> 00:49:21.750
point." Yes?
&gt;&gt; You mentioned that the navigation data

00:49:21.750 --> 00:49:27.270
is available only on the Android API.
&gt;&gt; MARKS: Right. And to be clear, it's not

00:49:27.270 --> 00:49:33.410
navigation data. You're just launching the
navigation application directly using an intent.

00:49:33.410 --> 00:49:35.751
&gt;&gt; Okay.
&gt;&gt; MARKS: So you don't get direct access to

00:49:35.751 --> 00:49:40.910
navigation. All you're saying is, you know,
"Hey. We've loaded this up. Do you want to

00:49:40.910 --> 00:49:42.240
view this in navigation and navigate directly
that?"

00:49:42.240 --> 00:49:50.570
&gt;&gt; So is there an API to be able to--let's
say, to start address and address, give me

00:49:50.570 --> 00:49:55.859
the KML, or give me some--give me the information
that makes the blue line that gets you from

00:49:55.859 --> 00:49:58.290
here to there.
&gt;&gt; MARKS: Is there--is there a directions

00:49:58.290 --> 00:49:59.630
API is what you are asking.
&gt;&gt; I think so.

00:49:59.630 --> 00:50:00.811
&gt;&gt; MARKS: Yes. There is.
&gt;&gt; Okay.

00:50:00.811 --> 00:50:04.050
&gt;&gt; MARKS: So when I say navigation, what I
mean is that turn by turn navigation that

00:50:04.050 --> 00:50:09.460
reads out the directions and, kind of, moves--you
know, like you--animates your movement along

00:50:09.460 --> 00:50:11.799
the map.
&gt;&gt; Got you. Yes. Yes.

00:50:11.799 --> 00:50:18.440
&gt;&gt; MARKS: Yes. The JavaScript Maps API provides
driving directions. The Android MapView provides

00:50:18.440 --> 00:50:26.640
driving directions. We have a web service
that you can pass to addresses or deal locations

00:50:26.640 --> 00:50:31.510
too and say give me back driving directions.
And when you do that, it actually gives you

00:50:31.510 --> 00:50:39.339
the--all the different steps there and that
allows you to draw that directly on your--on

00:50:39.339 --> 00:50:44.190
your map or you can just use the JavaScript
API that will draw it from the map.

00:50:44.190 --> 00:50:50.589
&gt;&gt; Okay. And it--is--will it could be back--I
mean I know--you know, the GO tag locations

00:50:50.589 --> 00:50:53.599
of each the turns?
&gt;&gt; MARKS: Yes. So, the driving--the directions

00:50:53.599 --> 00:51:01.800
API, you can query it to get the steps and--which
the steps contain the line segments.

00:51:01.800 --> 00:51:07.329
&gt;&gt; Got you.
&gt;&gt; MARKS: Between each location. And also

00:51:07.329 --> 00:51:12.020
the individual points that in which you do
the turn. And you can do things with that

00:51:12.020 --> 00:51:16.040
like you can manipulate that, right? In the
driving directions and, let's say, you happen

00:51:16.040 --> 00:51:23.910
to know that you have a--let's say, an amusement
park or a park or something and somebody is--you

00:51:23.910 --> 00:51:28.300
can get--by the way, you know, walking and
bicycling directions as well. So, you can

00:51:28.300 --> 00:51:35.589
say, "Okay. Drive to this location," and then
you can tack onto it and then go--you know,

00:51:35.589 --> 00:51:40.269
go further using walking along this path that
I've defined myself."

00:51:40.269 --> 00:51:44.210
&gt;&gt; Very good. Thank you.
&gt;&gt; MARKS: Sure.

00:51:44.210 --> 00:51:55.000
&gt;&gt; Can you comment on Google Places and how
to translate a location latitude and longitude

00:51:55.000 --> 00:52:01.089
into a business?
&gt;&gt; MARKS: Can I comment on Google Places and

00:52:01.089 --> 00:52:04.079
how to translate a latitude/longitude into
business.

00:52:04.079 --> 00:52:08.050
&gt;&gt; How do you get the real content?
&gt;&gt; MARKS: And the real content. So, last year

00:52:08.050 --> 00:52:14.790
at Google I/O, we announced Google Places
API was going to be launched and it hasn't

00:52:14.790 --> 00:52:22.369
yet been launched. So, unfortunately at this
point, there isn't. But I suggest that I/O

00:52:22.369 --> 00:52:30.690
that you ask for Mitchell about the specifics
about that. We kept it in a very limited private

00:52:30.690 --> 00:52:34.479
beta. We weren't ready to release it at that
point.

00:52:34.479 --> 00:52:38.120
&gt;&gt; Are there other public sources that a person
might use?

00:52:38.120 --> 00:52:44.320
&gt;&gt; MARKS: Are there other public sources for
Places APIs. Yes, there are. Facebook, Yelp,

00:52:44.320 --> 00:52:54.860
a variety of Forsquare, simple GO, there's
a variety of other sources for Place data

00:52:54.860 --> 00:52:56.300
as well.
&gt;&gt; Thank you.

00:52:56.300 --> 00:52:59.730
&gt;&gt; MARKS: Hopefully we'll have the Places
API really soon.

00:52:59.730 --> 00:53:07.060
&gt;&gt; What's your recommendations for writing
apps that need to use maps but offline? So,

00:53:07.060 --> 00:53:11.349
you've got a tablet that's only WiFi or something
and therefore...

00:53:11.349 --> 00:53:21.160
&gt;&gt; MARKS: Yes. So the question is offline
maps and what is my recommendation fro that.

00:53:21.160 --> 00:53:25.060
I don't--I don't have a great recommendation
for that. And to be frank, I don't think anybody

00:53:25.060 --> 00:53:31.160
really has a fantastic recommendation for
it. We are limited by our data providers to

00:53:31.160 --> 00:53:39.700
not giving out the base vector data of our
maps. So, we can't give you all the information

00:53:39.700 --> 00:53:47.319
about where all the roads are, for instance.
So that would be something that would be necessary

00:53:47.319 --> 00:53:53.381
for doing that, for drawing your own maps.
If you can find that data and there are--there

00:53:53.381 --> 00:53:59.089
are sources of data on this that are less
complete than ours like open street map or

00:53:59.089 --> 00:54:05.011
a variety of other sources that will provide
those things. You certainly can. That's a

00:54:05.011 --> 00:54:10.300
complex app that you can write yourself. And
there are some options in Android marketplace

00:54:10.300 --> 00:54:15.950
I know for that--for offline maps. One thing
you can do is--if somebody is going to be

00:54:15.950 --> 00:54:20.819
offline for a relatively short period of time,
you can cache in the mechanism that I described

00:54:20.819 --> 00:54:25.840
before. You just use a cache manifest to cache
tiles. And that was approved last year at

00:54:25.840 --> 00:54:33.540
I/O to say if you want to do something like
load a driving--load driving directions, and

00:54:33.540 --> 00:54:41.200
then, in an offline div walk through all those
driving directions so it caches the tiles

00:54:41.200 --> 00:54:46.930
that are necessary for that. So that when
somebody tries to go back to it, on your application,

00:54:46.930 --> 00:54:54.800
but they're offline at the moment, then they
can still see the tiles. There's not a lot

00:54:54.800 --> 00:54:59.601
of good answers to the offline mode at that
moment. You could also do that with the Static

00:54:59.601 --> 00:55:09.040
Maps API. But just to emphasize, you can't
directly access those tiles from the cache.

00:55:09.040 --> 00:55:17.680
You can just let the application re-access
that. Any more questions? Okay. Great. Well,

00:55:17.680 --> 00:55:19.090
thanks so much and enjoy the rest of the conference.

