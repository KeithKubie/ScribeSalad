WEBVTT
Kind: captions
Language: en

00:00:00.910 --> 00:00:01.280
Hi.

00:00:01.280 --> 00:00:02.910
My name is Andrew Gerrand.

00:00:02.910 --> 00:00:05.060
And today I'm going to show you
how to get started with

00:00:05.060 --> 00:00:07.915
the Go programming language,
but first some background.

00:00:07.915 --> 00:00:10.790
Go is a new general purpose
programming language.

00:00:10.790 --> 00:00:12.970
It was designed to give the
performance benefits of a

00:00:12.970 --> 00:00:15.530
compiled, statically type
language with the workflow of

00:00:15.530 --> 00:00:17.170
a scripting language.

00:00:17.170 --> 00:00:19.710
It incorporates concurrency
primitives that make it easy

00:00:19.710 --> 00:00:23.080
to write programs for today
asynchronous networked world.

00:00:23.080 --> 00:00:25.990
Also great care was taken in
Go's design to be clear and

00:00:25.990 --> 00:00:27.730
consistent in the language
features and

00:00:27.730 --> 00:00:29.300
its standard libraries.

00:00:29.300 --> 00:00:31.440
All this combined to make
programming in Go to both

00:00:31.440 --> 00:00:32.585
productive and fun.

00:00:32.585 --> 00:00:35.140
Go began as a 20 Percent
project among

00:00:35.140 --> 00:00:37.500
some Googlers in 2007.

00:00:37.500 --> 00:00:40.440
In November 2009 it was released
to the world as an

00:00:40.440 --> 00:00:43.240
open source project, which
attracted hundreds of

00:00:43.240 --> 00:00:46.630
contributors from the open
source community.

00:00:46.630 --> 00:00:49.780
In March 2012, we released
Go Version 1.

00:00:49.780 --> 00:00:52.220
A specification of the language
and libraries will be

00:00:52.220 --> 00:00:54.110
supported for years to come.

00:00:54.110 --> 00:00:55.720
In the tutorial today,
we're going to learn

00:00:55.720 --> 00:00:57.790
about Go version 1.

00:00:57.790 --> 00:00:59.950
So let's get started.

00:00:59.950 --> 00:01:02.850
The first thing you must
do is install Go.

00:01:02.850 --> 00:01:05.250
You can install the Go compiler
on most popular

00:01:05.250 --> 00:01:07.970
operating systems and process
architectures.

00:01:07.970 --> 00:01:10.290
I won't go through the
installation process now as it

00:01:10.290 --> 00:01:11.850
varies from platform
to platform.

00:01:11.850 --> 00:01:14.570
Just visit golang.org and follow
the instructions there

00:01:14.570 --> 00:01:17.200
to get started.

00:01:17.200 --> 00:01:19.410
So now that we have a Go
installation, let's test that

00:01:19.410 --> 00:01:21.040
everything is working.

00:01:21.040 --> 00:01:24.420
Put this code into a file
named hello.go.

00:01:24.420 --> 00:01:27.660
And then on the command line use
the Go tool to compile and

00:01:27.660 --> 00:01:28.910
run that program.

00:01:31.320 --> 00:01:33.540
You should see the greeting
fellow gopher.

00:01:33.540 --> 00:01:35.580
This indicates that the
installation was successful

00:01:35.580 --> 00:01:37.660
and that your Go compiler
is working properly.

00:01:37.660 --> 00:01:40.440
The Go tool that we've just use
is the standard tool for

00:01:40.440 --> 00:01:43.530
building, testing, and
installing Go programs.

00:01:43.530 --> 00:01:45.480
As we just saw, we could use
it to compile and run a

00:01:45.480 --> 00:01:47.690
program in an ad hoc
kind of way.

00:01:47.690 --> 00:01:49.750
You can also use it
to run tests.

00:01:49.750 --> 00:01:53.380
This command line here runs the
tests and the archives it

00:01:53.380 --> 00:01:55.590
package for the standard
library.

00:01:55.590 --> 00:01:58.110
These two commands will build
and format the files in the

00:01:58.110 --> 00:01:59.270
current directory.

00:01:59.270 --> 00:02:04.310
And it can also be used to fetch
packages from remote

00:02:04.310 --> 00:02:05.710
repositories.

00:02:05.710 --> 00:02:09.080
This command line fetches the
web socket package from the

00:02:09.080 --> 00:02:11.039
go.net subrepository.

00:02:11.039 --> 00:02:13.730
The Go tool is a zero
configuration tool that

00:02:13.730 --> 00:02:16.180
derives all it's Go instructions
from the Go tool

00:02:16.180 --> 00:02:17.300
code itself.

00:02:17.300 --> 00:02:19.470
There's no need to write and
maintain build scripts when

00:02:19.470 --> 00:02:21.010
using the Go tool.

00:02:21.010 --> 00:02:23.525
But for this to work, some
prescribed directory structure

00:02:23.525 --> 00:02:25.260
is necessary.

00:02:25.260 --> 00:02:27.050
We call this a workspace.

00:02:27.050 --> 00:02:29.040
A workspace is a directory
which has three

00:02:29.040 --> 00:02:31.570
subdirectories, the bin
subdirectory for containing

00:02:31.570 --> 00:02:34.290
executable binaries, the package
subdirectory for

00:02:34.290 --> 00:02:37.470
compiled object files, and the
source subdirectory which

00:02:37.470 --> 00:02:39.390
contains your Go source code.

00:02:39.390 --> 00:02:41.690
The first two directories are
generally maintained by the Go

00:02:41.690 --> 00:02:45.480
tool itself, while the third
directory is the hierarchy

00:02:45.480 --> 00:02:48.860
that you will maintain
yourself.

00:02:48.860 --> 00:02:51.150
So let's create a
workspace now.

00:02:51.150 --> 00:02:54.090
I usually use the name Go Code
in my home directory as the

00:02:54.090 --> 00:02:56.415
root of my workspace, but you
can choose anything that's the

00:02:56.415 --> 00:02:57.949
most convenient to you.

00:03:05.780 --> 00:03:08.270
We create the source directory
ourselves because that's the

00:03:08.270 --> 00:03:09.820
one that we're going to
maintain, but the bin and

00:03:09.820 --> 00:03:13.870
package subdirectories will be
maintained by the Go tool.

00:03:13.870 --> 00:03:16.350
Now tell the Go tool where the
workspace is by setting the

00:03:16.350 --> 00:03:17.615
GOPATH environment variable.

00:03:21.700 --> 00:03:27.720
And you might also want to add
the GOPATH bin subdirectory to

00:03:27.720 --> 00:03:28.970
your system path.

00:03:36.290 --> 00:03:38.840
Now you need to choose a
namespace in which your

00:03:38.840 --> 00:03:40.910
personal code is
going to live.

00:03:40.910 --> 00:03:45.280
I use the root of my Github
account, github.com/nf.

00:03:45.280 --> 00:03:47.810
That can also be used with Go
Get to automatically fetch

00:03:47.810 --> 00:03:49.060
these packages.

00:03:55.390 --> 00:03:58.560
And now I'm going to create a
Hello directory inside my

00:03:58.560 --> 00:04:01.240
namespace and copy our Hello
World program there.

00:04:13.860 --> 00:04:16.269
And now I can use the Go install
command with the full

00:04:16.269 --> 00:04:18.779
path of my new package to
build and install the

00:04:18.779 --> 00:04:21.185
executable to my GOPATH
bin subdirectory.

00:04:28.340 --> 00:04:29.840
And there I see my greeting.

00:04:29.840 --> 00:04:31.340
So let's talk about the project

00:04:31.340 --> 00:04:33.260
we're going to do today.

00:04:33.260 --> 00:04:36.330
Our project is going to be a
command line tool for fetching

00:04:36.330 --> 00:04:39.890
and displaying most recent
headlines from the golang page

00:04:39.890 --> 00:04:42.770
on the popular link aggregation
site Reddit.

00:04:42.770 --> 00:04:45.980
The program will make an HTTP
request to the Reddit API,

00:04:45.980 --> 00:04:49.160
decode the JSON response into a
Go data structure, and then

00:04:49.160 --> 00:04:52.650
print each links title, URL,
and the number of comments.

00:04:52.650 --> 00:04:55.950
To get started, let's create a
path for our directory inside

00:04:55.950 --> 00:04:58.620
our namespace called Reddit.

00:04:58.620 --> 00:05:00.355
This is where we're going to
put our Go source files.

00:05:09.785 --> 00:05:13.010
This is the beginning of our
program, and it makes an HTTP

00:05:13.010 --> 00:05:16.660
request to the Reddit API and
copies the response to your

00:05:16.660 --> 00:05:18.820
console standard output.

00:05:18.820 --> 00:05:21.330
We'll take the contents of this
file and put it inside a

00:05:21.330 --> 00:05:23.885
file named main.go inside
the Reddit directory.

00:05:32.670 --> 00:05:33.900
There's a lot of code there.

00:05:33.900 --> 00:05:36.770
So let's walk through the
program piece by piece.

00:05:36.770 --> 00:05:38.840
Our program begins with
a package statement.

00:05:38.840 --> 00:05:42.180
All Go code belongs to a
package, and Go programs begin

00:05:42.180 --> 00:05:44.130
with function main inside
package main.

00:05:44.130 --> 00:05:46.690
Since this is an executable
program, we put

00:05:46.690 --> 00:05:48.460
it in package main.

00:05:48.460 --> 00:05:50.730
Next comes an import
declaration.

00:05:50.730 --> 00:05:54.120
The declaration specifies
the file's dependencies.

00:05:54.120 --> 00:05:56.840
Each string is an import path
which instructs the Go tools

00:05:56.840 --> 00:05:59.650
where it find the required
package.

00:05:59.650 --> 00:06:01.870
These packages here are all
from the standard library.

00:06:05.080 --> 00:06:07.240
Next is a function
declaration.

00:06:07.240 --> 00:06:09.590
Our main function takes
no arguments

00:06:09.590 --> 00:06:10.870
and returns no value.

00:06:10.870 --> 00:06:15.180
We'll see some more complex
function declarations later.

00:06:15.180 --> 00:06:18.670
The first one of the function
makes a function call to the

00:06:18.670 --> 00:06:22.510
HTTP packages Get function.

00:06:22.510 --> 00:06:26.030
The Get function returns two
values, an HTTP response, and

00:06:26.030 --> 00:06:27.160
an error value.

00:06:27.160 --> 00:06:28.720
Yeah, that's right.

00:06:28.720 --> 00:06:31.950
Go functions can return
multiple values.

00:06:31.950 --> 00:06:34.560
We assign the response and the
error value to two new

00:06:34.560 --> 00:06:38.440
variables, resp and err.

00:06:38.440 --> 00:06:42.040
Next we check the err value
to see whether it is nil.

00:06:42.040 --> 00:06:44.340
Nil is the zero value
for an error.

00:06:44.340 --> 00:06:47.610
If any error has occurred, the
err value will not be nil.

00:06:47.610 --> 00:06:49.730
If an error didn't occur,
it will be nil.

00:06:49.730 --> 00:06:53.170
So if an error has occurred, we
use the log package's fatal

00:06:53.170 --> 00:06:56.670
function to print that error
to standard error and then

00:06:56.670 --> 00:06:58.190
exit the program.

00:06:58.190 --> 00:07:00.590
After checking the error of the
request, we need to check

00:07:00.590 --> 00:07:05.430
to the successful HTTP request
returned and status OK.

00:07:05.430 --> 00:07:09.170
So we check the response object
status code field to

00:07:09.170 --> 00:07:11.840
test whether it is at
200 OK response.

00:07:11.840 --> 00:07:15.270
If not, we'll call log.fatal
again, this time to print the

00:07:15.270 --> 00:07:17.220
response string to standard
output before exiting.

00:07:21.180 --> 00:07:24.870
Next we use the io package's
copy function to copy the

00:07:24.870 --> 00:07:28.120
response body to the
standard output.

00:07:28.120 --> 00:07:32.460
The io copy function takes a
reader value and a writer

00:07:32.460 --> 00:07:37.220
value and copies the contents
of the reader to the writer.

00:07:37.220 --> 00:07:40.040
The response body implements
io.Reader, while the OS

00:07:40.040 --> 00:07:42.720
send-it out represents
io.Writer.

00:07:42.720 --> 00:07:45.470
We'll see other examples of
this interface later on.

00:07:45.470 --> 00:07:47.580
So let's take a look at that
program in action now.

00:07:54.670 --> 00:07:56.310
So there's our JSON blob.

00:07:56.310 --> 00:07:59.790
You can see that it's pretty
inscrutable, so we need to

00:07:59.790 --> 00:08:02.690
decode it before we can
do something with it.

00:08:02.690 --> 00:08:06.310
So the Reddit API returns JSON
in this kind of form.

00:08:06.310 --> 00:08:09.400
It has a root object with a data
field, containing another

00:08:09.400 --> 00:08:13.360
object with a children field,
containing a list of objects

00:08:13.360 --> 00:08:16.590
which each have a data field,
and finally we have the object

00:08:16.590 --> 00:08:18.290
with the actual post data.

00:08:18.290 --> 00:08:20.990
So it's kind of deeply
nested in that way.

00:08:20.990 --> 00:08:24.330
The way Go's JSON package
works is that it decodes

00:08:24.330 --> 00:08:27.880
JSON-encoded data into native Go
data structures by matching

00:08:27.880 --> 00:08:29.770
field names.

00:08:29.770 --> 00:08:31.820
And so to decode this response,
we need to set up

00:08:31.820 --> 00:08:34.630
some Go data types
that resemble the

00:08:34.630 --> 00:08:37.590
JSON response object.

00:08:37.590 --> 00:08:43.070
First of all, let's start
with this piece of data.

00:08:43.070 --> 00:08:48.210
We define an item struct which
is named Item, which has two

00:08:48.210 --> 00:08:53.140
fields, title and URL, which
are both strings.

00:08:53.140 --> 00:08:56.390
The JSON value when decoding
this inner value will assign

00:08:56.390 --> 00:09:00.650
the title field to Title and
the URL field to our

00:09:00.650 --> 00:09:03.510
object's URL field.

00:09:03.510 --> 00:09:06.640
And now to represent the rest of
the object, we declare this

00:09:06.640 --> 00:09:08.020
response struct.

00:09:08.020 --> 00:09:12.060
And the response struct contains
one field of data,

00:09:12.060 --> 00:09:14.570
which is itself a struct, which
contains another field

00:09:14.570 --> 00:09:18.630
of children, which is
a slice of structs.

00:09:18.630 --> 00:09:21.790
A slice in Go is like
a list or an array.

00:09:21.790 --> 00:09:26.630
But we won't be talking about
slices in detail in this talk.

00:09:26.630 --> 00:09:30.360
Each slice contains a single
field data, which contains an

00:09:30.360 --> 00:09:32.830
item value.

00:09:32.830 --> 00:09:37.520
And so you can sort of see how
this data structure and the

00:09:37.520 --> 00:09:40.710
item structure inside it
resemble our JSON.

00:09:40.710 --> 00:09:43.440
To decode the response, instead
of just copying the

00:09:43.440 --> 00:09:47.860
response body to standard
output, we're going to create

00:09:47.860 --> 00:09:51.010
a response object and store a
pointer to that object in

00:09:51.010 --> 00:09:51.930
[INAUDIBLE].

00:09:51.930 --> 00:09:55.400
And then we use the JSON new
decoder function to create a

00:09:55.400 --> 00:09:58.710
decoder that reads from
the response body.

00:09:58.710 --> 00:10:02.670
And then we invoke the decode
method on our decoder, passing

00:10:02.670 --> 00:10:05.000
in the pointer to
our response.

00:10:05.000 --> 00:10:08.540
This makes the decoder read
from the response body,

00:10:08.540 --> 00:10:12.210
decoding all of the JSON fields
into a response object.

00:10:12.210 --> 00:10:15.320
Finally, we store the decode
method's error value in our

00:10:15.320 --> 00:10:18.750
err variable.

00:10:18.750 --> 00:10:20.310
Now we need to print the data.

00:10:20.310 --> 00:10:23.510
To do that, we use a full loop
to iterate over our children's

00:10:23.510 --> 00:10:27.080
slice, printing each child's
title in turn.

00:10:27.080 --> 00:10:30.080
This full loop uses a range
clause, which is a kind of

00:10:30.080 --> 00:10:33.240
shorthand for iterating over
internal data types such as

00:10:33.240 --> 00:10:34.875
slices and maps.

00:10:34.875 --> 00:10:38.620
For each iteration of the loop,
we assign a value from

00:10:38.620 --> 00:10:41.560
the child slice to this
child variable.

00:10:41.560 --> 00:10:46.350
This underscore here signifies
that I'm ignoring a value.

00:10:46.350 --> 00:10:48.650
If I had put a variable name
there, it would be assigned to

00:10:48.650 --> 00:10:52.220
the index of the slice at each
part through the loop.

00:10:52.220 --> 00:10:53.470
Let's look at that action.

00:10:58.060 --> 00:11:00.600
And now we see a
list of titles.

00:11:00.600 --> 00:11:02.600
So now we have a program
that works.

00:11:02.600 --> 00:11:05.260
But it's just one function,
and so it's not very

00:11:05.260 --> 00:11:07.160
extendable and maintainable.

00:11:07.160 --> 00:11:10.060
As the scope of our program
grows, structure and

00:11:10.060 --> 00:11:12.360
modularity will become
more important.

00:11:12.360 --> 00:11:15.000
What if want to check several
subreddit or share this

00:11:15.000 --> 00:11:17.830
functionality with
another program?

00:11:17.830 --> 00:11:20.350
To address these concerns let's
create another function

00:11:20.350 --> 00:11:23.560
named Get that take the name of
the subreddit, makes an API

00:11:23.560 --> 00:11:26.080
call, and returns the items
for that subreddit and an

00:11:26.080 --> 00:11:27.430
error value.

00:11:27.430 --> 00:11:30.230
This function definition here,
Get, takes a string named

00:11:30.230 --> 00:11:33.060
Reddit which will specify the
name of our subreddit and

00:11:33.060 --> 00:11:36.070
returns a slice of items
and an error value.

00:11:36.070 --> 00:11:39.400
So let's walk through
our new function.

00:11:39.400 --> 00:11:42.080
It begins by constructing the
URL that we're going to make

00:11:42.080 --> 00:11:46.550
the request to, using the
S printer function.

00:11:46.550 --> 00:11:49.330
The S printer function takes a
format string, in this case

00:11:49.330 --> 00:11:51.690
the bulk of our string with a
percent S where we want to

00:11:51.690 --> 00:11:53.330
substitute in the reddit.

00:11:53.330 --> 00:11:57.140
And then the next argument
is our reddit string.

00:11:57.140 --> 00:11:59.510
So if reddit was golang
this would be

00:11:59.510 --> 00:12:02.590
reddit.com/r/golang.json.

00:12:02.590 --> 00:12:04.365
And we store this in
the URL variable.

00:12:09.300 --> 00:12:14.390
Then we make our HTTP request as
before and check the error.

00:12:14.390 --> 00:12:17.360
But notice that this time
instead of calling log.fatal

00:12:17.360 --> 00:12:20.730
to bail out of the program we
want to return the error, and

00:12:20.730 --> 00:12:24.010
so we return a nil value for
our item slice, indicating

00:12:24.010 --> 00:12:27.680
that there are no items to
return, and our err value as

00:12:27.680 --> 00:12:28.930
our error value.

00:12:31.380 --> 00:12:34.330
But notice that when we handle
the response code later on,

00:12:34.330 --> 00:12:38.820
our status field is actually a
string, not an error value.

00:12:38.820 --> 00:12:41.630
To convert this string into an
error value, we used the

00:12:41.630 --> 00:12:43.430
err.new function.

00:12:43.430 --> 00:12:45.880
After making the HTTP request,
we need to be

00:12:45.880 --> 00:12:47.150
sure to clean up.

00:12:47.150 --> 00:12:49.650
We didn't do this previously
because all of the action was

00:12:49.650 --> 00:12:51.740
taking place in the
main function.

00:12:51.740 --> 00:12:54.360
And we know that when the
function returns the program

00:12:54.360 --> 00:12:58.690
shuts down, cleaning up any open
TCP sockets and so on.

00:12:58.690 --> 00:13:01.390
But in this case, with our Get
function, it could be used in

00:13:01.390 --> 00:13:03.210
the context of the
bigger program.

00:13:03.210 --> 00:13:06.490
And so we need to make sure to
clean up the HTTP request when

00:13:06.490 --> 00:13:08.220
the function exits.

00:13:08.220 --> 00:13:10.870
We do this by calling the close
method on the response

00:13:10.870 --> 00:13:14.810
body, which shuts down the
underlying TCP connection.

00:13:14.810 --> 00:13:19.560
And this defer keyword here
ensures that regardless of

00:13:19.560 --> 00:13:22.750
where the function exists,
whether it's on a bad status

00:13:22.750 --> 00:13:26.405
code or on a bad JSON decode
or on a successful request,

00:13:26.405 --> 00:13:28.720
that this function call
is made after

00:13:28.720 --> 00:13:29.970
the function returns.

00:13:33.120 --> 00:13:36.500
Next we prepare our item
slice to return.

00:13:36.500 --> 00:13:39.510
We do this by initializing a
new slice of items with the

00:13:39.510 --> 00:13:42.720
make function with the same
length as the children in our

00:13:42.720 --> 00:13:45.690
response body.

00:13:45.690 --> 00:13:49.170
Then we iterate through the
response body assigning each

00:13:49.170 --> 00:13:53.720
child's data item to the
corresponding field in our

00:13:53.720 --> 00:13:56.100
item slice.

00:13:56.100 --> 00:13:58.800
And finally, we return our
items at a nil value to

00:13:58.800 --> 00:14:01.030
signify success.

00:14:01.030 --> 00:14:04.470
Now let's use the Get function
in our main function.

00:14:04.470 --> 00:14:06.990
So I throw away most of the
contents of the main function

00:14:06.990 --> 00:14:09.920
and replace it with a single
call to Get, passing in the

00:14:09.920 --> 00:14:13.290
string golang to signify
the go subreddit.

00:14:13.290 --> 00:14:16.930
We then assign the returned
items to a new items variable

00:14:16.930 --> 00:14:18.980
and the error to the
err variable.

00:14:18.980 --> 00:14:21.450
And in our full loop at bottom,
we now just iterate

00:14:21.450 --> 00:14:23.330
over the item slice.

00:14:23.330 --> 00:14:26.900
And for each item, we print
the item's title.

00:14:26.900 --> 00:14:29.620
But we're only printing the
titles isn't very helpful.

00:14:29.620 --> 00:14:30.590
Let's address that.

00:14:30.590 --> 00:14:32.530
Go's [INAUDIBLE] package knows
how to print all of the

00:14:32.530 --> 00:14:35.170
built-in types, but it can
also be told how to print

00:14:35.170 --> 00:14:37.380
user-defined types.

00:14:37.380 --> 00:14:39.820
When you pass a value to
[INAUDIBLE] print, it checks

00:14:39.820 --> 00:14:42.170
to see if that value implements
the [INAUDIBLE]

00:14:42.170 --> 00:14:43.650
Stringer interface.

00:14:43.650 --> 00:14:47.110
The Stringer interface it
contains one method, string,

00:14:47.110 --> 00:14:48.430
which returns a string.

00:14:48.430 --> 00:14:51.070
And so any type that implements
that string method

00:14:51.070 --> 00:14:52.350
implements a Stringer.

00:14:52.350 --> 00:14:55.790
And the [INAUDIBLE] package will
use that method to format

00:14:55.790 --> 00:14:57.430
values of those types.

00:14:57.430 --> 00:15:00.190
So let's add a string method
to item types so that our

00:15:00.190 --> 00:15:02.880
items are printed
out more nicely.

00:15:02.880 --> 00:15:05.250
A method declaration is just
like a function declaration,

00:15:05.250 --> 00:15:06.710
but the receiver comes first.

00:15:06.710 --> 00:15:10.110
In this case, we specify
the receiver item.

00:15:10.110 --> 00:15:13.550
And inside the function, it
will be identified by i.

00:15:13.550 --> 00:15:17.640
This i is similar to this or
self in, say, JavaScript or

00:15:17.640 --> 00:15:22.400
Python, except in Go you're
encouraged to use a short name

00:15:22.400 --> 00:15:25.490
that's evocative of the type
that it describes.

00:15:25.490 --> 00:15:28.220
Inside the function, we use the
S printer function from

00:15:28.220 --> 00:15:31.390
the [INAUDIBLE] package to print
the title, a new line,

00:15:31.390 --> 00:15:33.880
followed by the URL.

00:15:33.880 --> 00:15:36.600
Now when we want to print the
item, we just pass the item

00:15:36.600 --> 00:15:37.560
into the [INAUDIBLE]

00:15:37.560 --> 00:15:38.560
function.

00:15:38.560 --> 00:15:40.310
So let's take this
a step further.

00:15:40.310 --> 00:15:43.110
One way to judge the quality
or lack thereof of a

00:15:43.110 --> 00:15:45.290
particular link is to look
at the discussion

00:15:45.290 --> 00:15:46.490
that surrounds it.

00:15:46.490 --> 00:15:49.560
So let's display the number of
comments alongside each link.

00:15:49.560 --> 00:15:51.880
To do this, we need to get the
number of comments from the

00:15:51.880 --> 00:15:54.970
Reddit API and store it
in our item struct.

00:15:54.970 --> 00:15:57.660
So we'll add these comment
field, which is an integer

00:15:57.660 --> 00:16:02.120
type, to our item struct.

00:16:02.120 --> 00:16:06.410
But notice that comment is not
the same as the num_comment

00:16:06.410 --> 00:16:09.320
field in the Reddit
API response.

00:16:09.320 --> 00:16:11.620
Underscores are kind of
unsightly in Go, and we don't

00:16:11.620 --> 00:16:12.550
tend to use them.

00:16:12.550 --> 00:16:15.450
So what I'll do is used what's
known as a struct tag to

00:16:15.450 --> 00:16:18.130
instruct the JSON package that
I'm looking for the field

00:16:18.130 --> 00:16:22.790
num_comment in my JSON for this
particular struct field.

00:16:22.790 --> 00:16:26.140
This means that when decoding
it will look for noncomments

00:16:26.140 --> 00:16:27.530
instead of comments.

00:16:27.530 --> 00:16:31.740
And went encoding it will put
it into a num_comment field.

00:16:31.740 --> 00:16:34.460
And now we can make a string
method a little more complex.

00:16:34.460 --> 00:16:38.720
This string method now uses a
switch statement to switch on

00:16:38.720 --> 00:16:41.620
the number of comments and show
nothing if there are zero

00:16:41.620 --> 00:16:45.670
comments, to show one comment
if there is one comment, and

00:16:45.670 --> 00:16:49.310
to show the number of comments
if there's more than one.

00:16:49.310 --> 00:16:51.870
Notice that unlike many
languages, Go switch

00:16:51.870 --> 00:16:56.440
statements do not fall
through by default.

00:16:56.440 --> 00:16:58.440
Now when we run our program,
we should see a nicely

00:16:58.440 --> 00:16:59.690
formatted list of links.

00:17:03.850 --> 00:17:07.630
And now we see each title, and
the ones with comment have the

00:17:07.630 --> 00:17:09.700
number of comments after them.

00:17:09.700 --> 00:17:12.050
Let's package this up so that we
can share with other people

00:17:12.050 --> 00:17:14.010
because it's useful code.

00:17:14.010 --> 00:17:16.940
Reddit is a good name for our
package, and so let's keep it

00:17:16.940 --> 00:17:19.900
for the package and move our
main function elsewhere.

00:17:19.900 --> 00:17:22.800
Create a subdirectory inside
your Reddit directory named

00:17:22.800 --> 00:17:25.143
Geddit and copy your
main.go file there.

00:17:31.100 --> 00:17:34.130
Now let's rename the main.go
file inside the Reddit

00:17:34.130 --> 00:17:35.870
directory to reddit.go
as this will

00:17:35.870 --> 00:17:37.920
become our package source.

00:17:46.040 --> 00:17:51.440
Now let's modify the reddit.go
file to be a Go package.

00:17:51.440 --> 00:17:53.580
First, change the package
statement at the top of

00:17:53.580 --> 00:17:57.360
reddit.go from package main
to package reddit.

00:17:57.360 --> 00:17:59.810
It's just a convention that the
package name be the same

00:17:59.810 --> 00:18:02.090
as the last element of the
import path so that it's not

00:18:02.090 --> 00:18:04.690
surprising when you import a
package and then find that

00:18:04.690 --> 00:18:07.010
it's imported under
a different name.

00:18:07.010 --> 00:18:09.540
The only requirement here is
that it is not package main

00:18:09.540 --> 00:18:11.775
as, again, that signifies
an executable command.

00:18:19.100 --> 00:18:22.470
Next I need to remove the main
function from reddit.go and

00:18:22.470 --> 00:18:23.800
any unused package imports.

00:18:44.980 --> 00:18:48.020
Our reddit.go file now looks
like this in the overview.

00:18:48.020 --> 00:18:49.920
Note that I've omitted the
bodies of each of these

00:18:49.920 --> 00:18:50.640
declarations.

00:18:50.640 --> 00:18:53.650
We have our import block, the
response struct, the item

00:18:53.650 --> 00:18:59.710
struct, its string method, and
finally or Get method.

00:18:59.710 --> 00:19:03.300
And let's edit the
geddit/main.go file to remove

00:19:03.300 --> 00:19:06.190
all of those other declarations
that are now in

00:19:06.190 --> 00:19:08.360
the reddit package and
prefix the Get

00:19:08.360 --> 00:19:10.180
invocation with the reddit.

00:19:35.880 --> 00:19:39.630
Now let's compile and install
our Geddit program, which will

00:19:39.630 --> 00:19:41.690
automatically compile
and store our reddit

00:19:41.690 --> 00:19:42.940
package if need be.

00:19:45.320 --> 00:19:48.020
In running it, we should see the
same behaviors as before.

00:19:48.020 --> 00:19:50.100
Now let's talk about
documentation.

00:19:50.100 --> 00:19:53.470
The Go distribution provides
a tool called godoc for

00:19:53.470 --> 00:19:55.780
displaying Go documentation.

00:19:55.780 --> 00:19:59.120
Just as the Go tool reads Go
source files that derive build

00:19:59.120 --> 00:20:02.430
instructions, godoc reads source
files to derive Go

00:20:02.430 --> 00:20:03.690
documentation.

00:20:03.690 --> 00:20:06.740
It's much easier to keep
documentation in sync when the

00:20:06.740 --> 00:20:09.020
documentation and the code
that it describes

00:20:09.020 --> 00:20:10.700
live in the same file.

00:20:10.700 --> 00:20:12.200
So let's look at the
documentation

00:20:12.200 --> 00:20:13.450
for our reddit package.

00:20:18.350 --> 00:20:21.340
You can see our type
declarations, the method

00:20:21.340 --> 00:20:24.130
declaration, and our Get
function declaration,

00:20:24.130 --> 00:20:26.600
but not much else.

00:20:26.600 --> 00:20:28.090
Let's rectify this
by adding some

00:20:28.090 --> 00:20:30.250
documentation to our package.

00:20:30.250 --> 00:20:33.310
The one big thorn the sticks out
in that documentation is

00:20:33.310 --> 00:20:34.670
the response type.

00:20:34.670 --> 00:20:37.590
There's no need for to be part
of a public interface.

00:20:37.590 --> 00:20:40.370
And so we can hide it by
renaming it to response with a

00:20:40.370 --> 00:20:42.180
lowercase r.

00:20:42.180 --> 00:20:45.060
This in because in Go top-level
declarations the

00:20:45.060 --> 00:20:47.630
begin with an upper case letter
are considered exported

00:20:47.630 --> 00:20:50.100
and therefore visible
outside the package.

00:20:50.100 --> 00:20:52.720
All the other names re private
and inaccessible to code

00:20:52.720 --> 00:20:55.270
outside the package.

00:20:55.270 --> 00:20:58.130
And now to document the
remaining visible names, we

00:20:58.130 --> 00:21:00.960
just add a comment directly
above the declarations.

00:21:00.960 --> 00:21:03.230
So our item struct has
this short string.

00:21:03.230 --> 00:21:05.260
Item describes a reddit item.

00:21:05.260 --> 00:21:07.860
And our Get function
has this string.

00:21:07.860 --> 00:21:10.920
Get Fetch is the most recent
items posted to

00:21:10.920 --> 00:21:13.860
the specified subreddit.

00:21:13.860 --> 00:21:16.170
But the most important piece
of documentation is our

00:21:16.170 --> 00:21:18.110
package doc, which
we add directly

00:21:18.110 --> 00:21:19.600
above the package clause.

00:21:19.600 --> 00:21:21.790
We won't worry about documenting
the string method

00:21:21.790 --> 00:21:24.820
as all Go programs should
know what that does.

00:21:24.820 --> 00:21:27.110
Now let's take a look
at the godoc output

00:21:27.110 --> 00:21:28.530
for our revised package.

00:21:28.530 --> 00:21:32.370
You'll see that includes our
package doc at the top, and

00:21:32.370 --> 00:21:35.980
then our Get function here
describes itself, and the same

00:21:35.980 --> 00:21:38.090
goes for item struct.

00:21:38.090 --> 00:21:43.020
Notice that the response value
is now an internal detail and

00:21:43.020 --> 00:21:46.410
doesn't get presented to
the user in godoc.

00:21:46.410 --> 00:21:49.470
So now we're ready to share
our work with the world.

00:21:49.470 --> 00:21:52.320
To do this, we'll prepare a
source repository and push it

00:21:52.320 --> 00:21:54.230
to my Github account.

00:21:54.230 --> 00:21:56.400
The first thing you should do
is add a copyright notice to

00:21:56.400 --> 00:21:59.610
each file, and you should also
choose your preferred license

00:21:59.610 --> 00:22:01.330
and put it in the license
file in the root of your

00:22:01.330 --> 00:22:02.430
repository.

00:22:02.430 --> 00:22:04.380
I'm not going to do this now,
but I trust you can figure out

00:22:04.380 --> 00:22:06.580
how to do it on your own.

00:22:06.580 --> 00:22:08.150
Next I'm going to initialization
my source

00:22:08.150 --> 00:22:11.520
control repository with git init
and then prepare a commit

00:22:11.520 --> 00:22:16.330
with my reddit.go and
geddit/main.go file.

00:22:16.330 --> 00:22:17.580
And then I'll commit that.

00:22:21.820 --> 00:22:23.760
Then I'll add a remote
identifying the Github

00:22:23.760 --> 00:22:25.010
repository.

00:22:30.850 --> 00:22:33.520
And then push my master
branch to that remote.

00:22:45.500 --> 00:22:46.400
And that's worked.

00:22:46.400 --> 00:22:48.830
Now to test that I've done
everything correctly, I'm

00:22:48.830 --> 00:22:51.840
going to reinstall my package
using the Go Get command.

00:22:51.840 --> 00:22:53.850
So first I'll blow away
everything that I've just

00:22:53.850 --> 00:22:55.670
done, a little nerve wracking.

00:22:55.670 --> 00:22:58.200
And you'll see that I only have
my Hello package inside

00:22:58.200 --> 00:22:59.870
my namespace now.

00:22:59.870 --> 00:23:04.020
And then with the Go Get
command, I can fetch and

00:23:04.020 --> 00:23:07.100
install my package
and command.

00:23:07.100 --> 00:23:11.220
So this command will check out
my reddit repository and then

00:23:11.220 --> 00:23:14.270
build and install the reddit
package followed by building

00:23:14.270 --> 00:23:15.880
and installing the geddit
executable.

00:23:18.960 --> 00:23:21.600
And as with all good Unix
commands, the Go command says

00:23:21.600 --> 00:23:23.370
nothing if it succeeds.

00:23:23.370 --> 00:23:26.180
So now I should be able to type
Geddit and see the output

00:23:26.180 --> 00:23:27.430
of my program.

00:23:29.950 --> 00:23:32.330
The Go Get command can fetch
code from a range of popular

00:23:32.330 --> 00:23:35.820
code hosting sites as well as
any arbitrary Get material

00:23:35.820 --> 00:23:38.110
subversion of [INAUDIBLE]
repository.

00:23:38.110 --> 00:23:40.800
All you need to do is provide
to the repository URL on the

00:23:40.800 --> 00:23:42.090
Go Get command line.

00:23:42.090 --> 00:23:44.760
So here are some ideas as to how
you can take this further

00:23:44.760 --> 00:23:46.120
in your own time.

00:23:46.120 --> 00:23:48.530
You might want to implement a
command line interface to

00:23:48.530 --> 00:23:51.520
specify the subreddits or
subreddits to query.

00:23:51.520 --> 00:23:54.310
You could expand the reddit
package to cover more of the

00:23:54.310 --> 00:23:57.270
reddit API such as
user information.

00:23:57.270 --> 00:24:00.380
And you could learn about Go's
concurrency primitives and use

00:24:00.380 --> 00:24:03.030
them to perform multiple
requests in parallel.

00:24:03.030 --> 00:24:06.250
The first stop for anyone new
to Go should be the tour at

00:24:06.250 --> 00:24:07.830
tour.golang.org.

00:24:07.830 --> 00:24:10.960
It's an interactive web-based
toward the language that lets

00:24:10.960 --> 00:24:14.100
you play with the language
right from your browser.

00:24:14.100 --> 00:24:17.730
Next visit golang.org/doc for
a wealth of documentation,

00:24:17.730 --> 00:24:20.690
articles, tutorials, code
walks, and so on.

00:24:20.690 --> 00:24:22.920
And finally, the standard
library reference at

00:24:22.920 --> 00:24:26.270
golang.org/pkg is an
indispensable reference to any

00:24:26.270 --> 00:24:27.480
Go programmer.

00:24:27.480 --> 00:24:28.560
That's it for me.

00:24:28.560 --> 00:24:29.810
Thanks for watching.

