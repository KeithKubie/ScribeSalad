WEBVTT
Kind: captions
Language: en

00:00:00.230 --> 00:00:02.750
Let's use lada's approach of transforming variables on our

00:00:02.750 --> 00:00:06.240
Facebook data set. Most of our variables, such as friend

00:00:06.240 --> 00:00:10.200
count, likes, comments, wall posts and others are variables

00:00:10.200 --> 00:00:12.720
that I would call engagement variables, and they all have

00:00:12.720 --> 00:00:15.330
very long tails. Some users have 10 times, or

00:00:15.330 --> 00:00:18.580
even 100 ,the median value. Another way to say this

00:00:18.580 --> 00:00:21.050
is that some people have an order of magnitudes, more

00:00:21.050 --> 00:00:25.130
likes, clicks, or comments, than any other users. In statistics,

00:00:25.130 --> 00:00:28.030
we say that the data is over dispersed. Often it

00:00:28.030 --> 00:00:31.880
helps to transform these values so we can see standard deviations,

00:00:31.880 --> 00:00:34.760
or orders of magnitudes, so we are in effect, shortening

00:00:34.760 --> 00:00:38.140
the tail. Here was our histogram of friend count from before,

00:00:38.140 --> 00:00:40.310
and notice, we still have that long tail. We can

00:00:40.310 --> 00:00:44.160
transform this variable by taking the log, either using the natural

00:00:44.160 --> 00:00:47.440
log, log base 2, or log base 10. We could use

00:00:47.440 --> 00:00:50.350
other functions, such as the square root, and doing so helps

00:00:50.350 --> 00:00:53.110
us to see patterns more clearly, without being distracted by

00:00:53.110 --> 00:00:56.450
the tails. A lot of common statistical techniques, like linear

00:00:56.450 --> 00:00:59.680
regression, are based on the assumption that variables have normal

00:00:59.680 --> 00:01:03.230
distributions. So by taking the log of this variable, we can

00:01:03.230 --> 00:01:05.930
transform our data to turn it into maybe a normal

00:01:05.930 --> 00:01:09.830
distribution or something that more closely resembles a normal distribution, if

00:01:09.830 --> 00:01:13.100
we'd be using linear regression or some other modelling technique.

00:01:13.100 --> 00:01:15.380
Now, I know we're not doing modelling here, but let's just

00:01:15.380 --> 00:01:18.510
see what it looks like to transform the variable. First, I'm

00:01:18.510 --> 00:01:21.080
going to just do this in the summary command. So, here's our

00:01:21.080 --> 00:01:24.130
regular summary of friend count. Looks like the median friend count

00:01:24.130 --> 00:01:27.790
is 82, and the mean is 196. I can take the log

00:01:27.790 --> 00:01:30.480
base 10 of this friend count and get a different table.

00:01:30.480 --> 00:01:33.070
Now this seems a little bit unusual since I have negative

00:01:33.070 --> 00:01:37.410
infinity for the minimum and negative infinity for the mean. Hm.

00:01:37.410 --> 00:01:40.460
So what must be going on? Well, some of our users have

00:01:40.460 --> 00:01:42.940
a friend count of zero. So, when we take the log

00:01:42.940 --> 00:01:46.340
of base 10 of zero, that would be undefined. For those familiar

00:01:46.340 --> 00:01:49.100
with Calculus, the limit would be negative infinity, which is why

00:01:49.100 --> 00:01:52.290
that appears here. To avoid this, we're going to add one to friend

00:01:52.290 --> 00:01:55.280
count, so that way we don't get an undefined answer, or

00:01:55.280 --> 00:01:58.810
negative infinity. There, that looks much better. And, just to show you

00:01:58.810 --> 00:02:01.910
another function, let's also use the square root on friend count.

00:02:01.910 --> 00:02:05.530
This would be another type of transformation. For me, log base 10

00:02:05.530 --> 00:02:07.990
is an easier transformation to wrap my head around, since

00:02:07.990 --> 00:02:11.380
I'm just comparing friend counts on orders of magnitude of 10.

00:02:11.380 --> 00:02:14.820
Basically a tenfold scale like the pH scale. Now that

00:02:14.820 --> 00:02:17.940
you've seen transformations within summaries, let's see if you can apply

00:02:17.940 --> 00:02:21.700
a similar transformation to the histogram. Check out the instructor

00:02:21.700 --> 00:02:24.500
notes to learn how to use scales and how to create

00:02:24.500 --> 00:02:27.550
multiple graphs on one page. Once you've read through those

00:02:27.550 --> 00:02:31.200
links, and you think you're ready, try this next programming exercise.

00:02:31.200 --> 00:02:34.220
In it, you're going to create three different histograms. The first one will

00:02:34.220 --> 00:02:37.220
be our original friend count histogram, and then the second one will

00:02:37.220 --> 00:02:40.460
have the friend count transformed using log 10. And then the last

00:02:40.460 --> 00:02:44.530
histogram will have the friend count transformed using square root. Now, I

00:02:44.530 --> 00:02:47.620
haven't given you all the information to do this exercise, but I

00:02:47.620 --> 00:02:50.390
want you to be resourceful. Part of being a good programmer is

00:02:50.390 --> 00:02:53.470
being able to read documentation and know how to find your answers

00:02:53.470 --> 00:02:56.390
to the questions you may have. Now, we've already done the legwork for

00:02:56.390 --> 00:02:59.460
you by providing the resource. So, let's see if you can figure it out.

