WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.990
DAN HERMES: Hey, everyone.

00:00:01.990 --> 00:00:05.640
So for those who don't know,
my name is Dan Hermes.

00:00:05.640 --> 00:00:08.530
I'm part of Developer Relations
here at Google.

00:00:08.530 --> 00:00:12.420
I support the Content API for
Shopping as well as the Search

00:00:12.420 --> 00:00:15.790
API for Shopping, and I'm a
member of a larger team that

00:00:15.790 --> 00:00:18.850
supports all the Commerce
APIs here at Google.

00:00:18.850 --> 00:00:21.950
Today, May 16, we're here
to talk about the

00:00:21.950 --> 00:00:23.340
Content API for Shopping.

00:00:23.340 --> 00:00:26.520
We don't have any sort of
agenda, but based on the faces

00:00:26.520 --> 00:00:28.365
and names I see, I'm
sure we'll have

00:00:28.365 --> 00:00:31.160
plenty to chat about.

00:00:31.160 --> 00:00:34.900
Like I said before, if there is
an issue of with reverb of

00:00:34.900 --> 00:00:38.410
my voice, let me know and
I can deal with that.

00:00:38.410 --> 00:00:41.930
So before I open up the floor
for questions, I have some

00:00:41.930 --> 00:00:44.920
questions for you guys, namely
one question that could lead

00:00:44.920 --> 00:00:46.770
to some discussion.

00:00:46.770 --> 00:00:49.070
And I was sharing with my team
this week, and thinking of

00:00:49.070 --> 00:00:55.170
ways we can slice this
biweekly event up.

00:00:55.170 --> 00:00:59.210
And I was just wondering if were
any particular types of

00:00:59.210 --> 00:01:02.010
people that you guys would like
to see in this Hangout,

00:01:02.010 --> 00:01:05.980
like the engineers that work on
the API, if they could come

00:01:05.980 --> 00:01:07.650
in and be guest stars
once in a while.

00:01:07.650 --> 00:01:12.690
Or maybe if there's Sales, or
maybe if there's people from

00:01:12.690 --> 00:01:17.480
Ops, like we had four weeks
ago at the Hangout before

00:01:17.480 --> 00:01:20.020
last. So any suggestions
from the floor?

00:01:23.499 --> 00:01:25.130
MALE SPEAKER: [UNINTELLIGIBLE]

00:01:25.130 --> 00:01:25.260
here.

00:01:25.260 --> 00:01:26.890
DAN HERMES: How you doing?

00:01:26.890 --> 00:01:28.020
MALE SPEAKER: Hi.

00:01:28.020 --> 00:01:30.205
What about the team that
does the exceptions?

00:01:33.170 --> 00:01:36.210
DAN HERMES: OK.

00:01:36.210 --> 00:01:37.510
I know what you're saying.

00:01:37.510 --> 00:01:40.020
So you mean exceptions--

00:01:40.020 --> 00:01:42.170
something we discussed at a
previous Hangout, for those

00:01:42.170 --> 00:01:50.870
who didn't see it, exceptions
or acceptances for accounts

00:01:50.870 --> 00:01:52.724
and things like that, yeah?

00:01:52.724 --> 00:01:53.570
MALE SPEAKER: Yeah.

00:01:53.570 --> 00:01:55.996
That's correct.

00:01:55.996 --> 00:01:58.750
DAN HERMES: OK.

00:01:58.750 --> 00:02:00.300
Yeah, that's something
I can look into.

00:02:00.300 --> 00:02:03.970
I don't have that strong a
relationship with those folks,

00:02:03.970 --> 00:02:08.330
but I can definitely
check it out.

00:02:08.330 --> 00:02:11.600
It certainly would be helpful to
have some preset questions

00:02:11.600 --> 00:02:15.990
before we have a guest like
that show up, but

00:02:15.990 --> 00:02:16.810
I'll look into it.

00:02:16.810 --> 00:02:18.060
Anything else?

00:02:20.492 --> 00:02:23.820
CAROLINE: Danny, is that
the same as the

00:02:23.820 --> 00:02:26.096
data quality folks?

00:02:26.096 --> 00:02:29.680
DAN HERMES: The data quality
folks, it's a pretty

00:02:29.680 --> 00:02:30.800
distributed team.

00:02:30.800 --> 00:02:32.340
There are engineering folks.

00:02:32.340 --> 00:02:34.440
There's the support
part of that.

00:02:34.440 --> 00:02:35.630
I'd be happy to get
either one.

00:02:35.630 --> 00:02:38.780
I actually quite like the
engineering folks who work on

00:02:38.780 --> 00:02:39.170
that there.

00:02:39.170 --> 00:02:44.290
It's a big team in Zurich, and
also the API team for this API

00:02:44.290 --> 00:02:46.310
in particular is
also in Zurich.

00:02:46.310 --> 00:02:50.660
But that's something
we'd look into.

00:02:50.660 --> 00:02:56.730
I know you were wanting more
parity between what you get

00:02:56.730 --> 00:02:59.370
from the data quality feed and
what you see in the merchant

00:02:59.370 --> 00:03:02.770
center, and that's something
our direct engineers would

00:03:02.770 --> 00:03:04.410
have an impact on.

00:03:04.410 --> 00:03:07.050
Is there something else you
were thinking of when

00:03:07.050 --> 00:03:08.140
requesting those folks?

00:03:08.140 --> 00:03:11.210
CAROLINE: Yeah, actually, it
just seems to me, the one

00:03:11.210 --> 00:03:12.990
meeting I attended, there was
probably two or three

00:03:12.990 --> 00:03:15.800
different times where you said
I'm not the data quality, so I

00:03:15.800 --> 00:03:18.600
can't really answer that
question with authority.

00:03:18.600 --> 00:03:21.020
So it just seems like a lot of
those questions come up, and I

00:03:21.020 --> 00:03:23.340
think they would benefit
me even if I

00:03:23.340 --> 00:03:24.910
don't have the question.

00:03:24.910 --> 00:03:26.970
That data quality is definitely
one of the more

00:03:26.970 --> 00:03:29.840
complicated and concerning
pieces of that.

00:03:29.840 --> 00:03:31.210
DAN HERMES: Yeah, that's
a great point.

00:03:31.210 --> 00:03:33.990
Maybe we could just have
like an out of band.

00:03:33.990 --> 00:03:39.220
Rather than a biweekly hanging
out, we could have a dedicated

00:03:39.220 --> 00:03:42.490
Q&amp;A mixed with a bit of
lecturing on data quality.

00:03:42.490 --> 00:03:45.432
But that's a great suggestion.

00:03:45.432 --> 00:03:46.576
ANDREW: I--

00:03:46.576 --> 00:03:48.512
DAN HERMES: Andrew, you look
like you're about to talk?

00:03:48.512 --> 00:03:49.360
ANDREW: Yeah.

00:03:49.360 --> 00:03:50.070
Can you guys hear me?

00:03:50.070 --> 00:03:51.054
DAN HERMES: Yeah.

00:03:51.054 --> 00:03:52.040
ANDREW: OK.

00:03:52.040 --> 00:03:56.250
I'm not sure about a specific
guest request, but I would be

00:03:56.250 --> 00:04:00.000
interested in hearing about new
features, what you guys

00:04:00.000 --> 00:04:02.460
are working on.

00:04:02.460 --> 00:04:06.190
I mean, I don't know how much
you guys like to talk about

00:04:06.190 --> 00:04:07.880
that sort of stuff,
but if you have

00:04:07.880 --> 00:04:11.490
project managers or something.

00:04:11.490 --> 00:04:16.920
Even if it's just for things
like the Merchant Center, or

00:04:16.920 --> 00:04:21.640
new graphs, or feedback,
or whatever.

00:04:21.640 --> 00:04:25.120
DAN HERMES: Yeah,
we do have a PM.

00:04:25.120 --> 00:04:28.010
I will sync up with those folks
and see how much they're

00:04:28.010 --> 00:04:29.260
willing to reveal.

00:04:31.290 --> 00:04:33.770
The thing about doing something
like that is, unless

00:04:33.770 --> 00:04:37.130
it's pretty close to production,
it's sort of

00:04:37.130 --> 00:04:38.950
you're making false promises
sometimes.

00:04:38.950 --> 00:04:41.590
Because sometimes, something
will be halfway along and get

00:04:41.590 --> 00:04:42.380
de-prioritized.

00:04:42.380 --> 00:04:45.000
And even though it'll only take
a couple weeks of work,

00:04:45.000 --> 00:04:46.840
there's nobody working on it for
those couple of weeks, and

00:04:46.840 --> 00:04:47.440
things like that.

00:04:47.440 --> 00:04:50.960
But I'll certainly look into
it and ask the PM what he

00:04:50.960 --> 00:04:54.870
thinks about coming to this.

00:04:54.870 --> 00:04:58.000
There are two different PMs
involved with Content API,

00:04:58.000 --> 00:04:59.960
both of whom are pretty
interesting dudes.

00:04:59.960 --> 00:05:04.890
So I will add them to the list
of requested guests.

00:05:04.890 --> 00:05:06.390
Anything else?

00:05:06.390 --> 00:05:09.040
ANDREW: Another thing that I
don't know how many other

00:05:09.040 --> 00:05:12.430
people in this Hangout have
experience with this.

00:05:12.430 --> 00:05:16.720
But another thing that we do
is we use our content feeds

00:05:16.720 --> 00:05:20.140
for AdWords and other--

00:05:20.140 --> 00:05:25.220
like Google Affiliate Network
and places like that.

00:05:25.220 --> 00:05:28.510
It might be kind of cool to have
one of those guys in at

00:05:28.510 --> 00:05:34.790
some point to talk about what
they're doing with the feeds,

00:05:34.790 --> 00:05:39.550
what they like, what kind of
metadata they care about.

00:05:39.550 --> 00:05:44.420
Because I know it's sort of
different than what is used in

00:05:44.420 --> 00:05:45.525
the Google Shopping
Experience.

00:05:45.525 --> 00:05:47.218
DAN HERMES: Right, right.

00:05:47.218 --> 00:05:52.260
There is a wealth of other
attributes that you can send,

00:05:52.260 --> 00:05:52.950
as Andrew knows.

00:05:52.950 --> 00:05:55.440
And Andrew has probably sent
just about every possible

00:05:55.440 --> 00:05:59.130
attribute you could send that
teams at Google are parsing in

00:05:59.130 --> 00:06:00.870
one way or another.

00:06:00.870 --> 00:06:03.965
And I can certainly look into
getting those people on, or if

00:06:03.965 --> 00:06:07.450
not getting them on, possibly
getting some sort of interview

00:06:07.450 --> 00:06:12.290
that I could play for everyone
with them about those things.

00:06:12.290 --> 00:06:15.620
Because like Andrew said,
there are a lot of extra

00:06:15.620 --> 00:06:19.980
things you can do with targeting
and enable some of

00:06:19.980 --> 00:06:22.240
that within your feeds.

00:06:22.240 --> 00:06:22.900
That's great.

00:06:22.900 --> 00:06:28.050
So now, let's open the floor
back up like we usually do.

00:06:28.050 --> 00:06:31.050
There were no specific
questions, again, this time,

00:06:31.050 --> 00:06:34.220
but two weeks ago, we didn't
have any specific questions

00:06:34.220 --> 00:06:35.750
and still went 45 minutes.

00:06:35.750 --> 00:06:37.980
So I think we'll be all right.

00:06:37.980 --> 00:06:44.040
So I'd say the first questions
we should jump on are the

00:06:44.040 --> 00:06:48.370
OAuth 2.0 questions that have
been bouncing around with Luke

00:06:48.370 --> 00:06:50.070
and Caroline.

00:06:50.070 --> 00:06:52.550
So if you guys want to ask those
or give a recap, and

00:06:52.550 --> 00:06:53.585
then we can jump in.

00:06:53.585 --> 00:06:57.380
LUKE: Well, the old client login
is going to depreciate

00:06:57.380 --> 00:06:59.150
in three years, right?

00:06:59.150 --> 00:07:01.534
So this is not--

00:07:01.534 --> 00:07:05.220
DAN HERMES: Yes, it's
deprecating in three years.

00:07:05.220 --> 00:07:09.830
Client login, AuthSub, and
OAuth 1.0 are three of, I

00:07:09.830 --> 00:07:12.330
believe, the only four methods
Google supports for

00:07:12.330 --> 00:07:13.380
authentication, but
I don't know.

00:07:13.380 --> 00:07:15.170
There might be more
than the four.

00:07:15.170 --> 00:07:17.610
But it was announced about a
month ago that those three

00:07:17.610 --> 00:07:22.340
methods will be deprecated
over a three-year period.

00:07:22.340 --> 00:07:23.010
So you're right.

00:07:23.010 --> 00:07:25.170
It's not that urgent.

00:07:25.170 --> 00:07:31.160
But given the fact that it will
be going away, especially

00:07:31.160 --> 00:07:34.110
for you, Luke, as you're
building a user base and

00:07:34.110 --> 00:07:38.490
you're not really at critical
mass yet, the more users you

00:07:38.490 --> 00:07:41.425
have on something, the harder
it is to switch, right?

00:07:41.425 --> 00:07:45.090
LUKE: I'm server-to-server,
so I have to use the JWT

00:07:45.090 --> 00:07:47.516
server-to-server
pattern, right?

00:07:47.516 --> 00:07:48.766
DAN HERMES: Not necessarily.

00:07:52.530 --> 00:07:58.180
If you're just using your MCA,
you can get a refresh and an

00:07:58.180 --> 00:08:02.410
access token one time, and you
can do that server-side.

00:08:02.410 --> 00:08:08.130
There's a special redirect URI
that isn't actually a website.

00:08:08.130 --> 00:08:10.240
It's like OOB colon.

00:08:10.240 --> 00:08:13.150
It's a colon-delimited
string of six things.

00:08:13.150 --> 00:08:16.750
And you can do that one time,
get your refresh token and

00:08:16.750 --> 00:08:19.870
your access token just for your
account, your MCA that's

00:08:19.870 --> 00:08:22.330
making all the requests, and
you can go server-to-server

00:08:22.330 --> 00:08:24.570
all you want.

00:08:24.570 --> 00:08:27.080
I'm not entirely sure what the
server-to-server stuff that

00:08:27.080 --> 00:08:28.620
Caroline was hoping to
get out of that.

00:08:28.620 --> 00:08:31.570
But for you, if you don't
actually need refresh and

00:08:31.570 --> 00:08:35.190
access tokens from every user,
if you're just creating

00:08:35.190 --> 00:08:38.400
sub-accounts with your MCA for
each of your users, you only

00:08:38.400 --> 00:08:39.980
need one refresh token.

00:08:39.980 --> 00:08:42.610
And as long as you on your
account never revoke that

00:08:42.610 --> 00:08:47.720
refresh token, you can use it
ad infinitum to get a new

00:08:47.720 --> 00:08:51.780
access token every time another
access token expires.

00:08:51.780 --> 00:08:55.290
And then from there,
if you find a way--

00:08:55.290 --> 00:08:57.110
I was just reading about this.

00:08:57.110 --> 00:08:59.770
There's no preset way to
serialize the data with the

00:08:59.770 --> 00:09:01.410
DotNet Client Library,
but there is

00:09:01.410 --> 00:09:02.360
with every other library.

00:09:02.360 --> 00:09:04.680
But there are public
attributes.

00:09:04.680 --> 00:09:07.730
There are public getters
and setters for

00:09:07.730 --> 00:09:08.960
everything you want.

00:09:08.960 --> 00:09:13.110
So before you kill your process,
if you save those

00:09:13.110 --> 00:09:16.490
tokens somewhere safe and
secure, then you could start a

00:09:16.490 --> 00:09:22.330
process back up, reinstantiate
an OAuth 2.0 parameters class,

00:09:22.330 --> 00:09:28.210
at least in the DotNet case, and
then just use the setters

00:09:28.210 --> 00:09:29.830
to set that refresh token.

00:09:29.830 --> 00:09:34.660
Then everything else happens
under the covers when code

00:09:34.660 --> 00:09:36.350
snippet but that's been bouncing
around the forums for

00:09:36.350 --> 00:09:41.300
DotNet, and with every client
library, that is, if you set

00:09:41.300 --> 00:09:46.870
up your request factory or your
service or your client

00:09:46.870 --> 00:09:49.770
object, whatever the local term
is for it, or whatever is

00:09:49.770 --> 00:09:53.050
doing the work of making and
sending the request, if you

00:09:53.050 --> 00:09:56.030
set it up with an OAuth 2.0
token, it handles everything

00:09:56.030 --> 00:09:56.910
else under the covers.

00:09:56.910 --> 00:09:59.600
As long as you have a refresh
token, you don't have

00:09:59.600 --> 00:10:00.710
to worry about it.

00:10:00.710 --> 00:10:02.500
Because what the client will
do, it'll try to make a

00:10:02.500 --> 00:10:05.220
request. If it succeeds,
it succeeds.

00:10:05.220 --> 00:10:08.510
If it fails, then it'll get
a 401 back, which means

00:10:08.510 --> 00:10:08.900
unauthorized.

00:10:08.900 --> 00:10:13.590
It knows it's unauthorized,
so then it tries to make a

00:10:13.590 --> 00:10:19.870
refresh request to get
a new access token

00:10:19.870 --> 00:10:21.560
using the refresh token.

00:10:21.560 --> 00:10:25.830
And then, it'll send a third
request, that being to retry

00:10:25.830 --> 00:10:28.770
the original request,
to the API.

00:10:28.770 --> 00:10:30.280
And then if that gets
rejected, than it

00:10:30.280 --> 00:10:32.350
will send an error.

00:10:32.350 --> 00:10:34.180
But like I said, all that
happens under the covers.

00:10:34.180 --> 00:10:35.190
You don't need to
worry about it.

00:10:35.190 --> 00:10:38.640
All you need, especially in the
case of an MCA, Luke, is

00:10:38.640 --> 00:10:40.880
one refresh token, and
everything else

00:10:40.880 --> 00:10:41.585
just kind of happens.

00:10:41.585 --> 00:10:42.370
LUKE: OK.

00:10:42.370 --> 00:10:45.080
I didn't know that you had
an interfaceless--

00:10:45.080 --> 00:10:48.340
I could make like a post with
an interfaceless system that

00:10:48.340 --> 00:10:50.030
would then respond
with the token.

00:10:50.030 --> 00:10:50.810
I didn't know that.

00:10:50.810 --> 00:10:54.020
DAN HERMES: Yeah,
you can do that.

00:10:54.020 --> 00:10:57.420
It's server-side OAuth 2.0 is
what they call it, and it's a

00:10:57.420 --> 00:10:58.330
server-side flow.

00:10:58.330 --> 00:11:01.070
It's not quite server-to-server,
but you can

00:11:01.070 --> 00:11:03.110
do a server-side OAuth 2.0.

00:11:03.110 --> 00:11:09.840
And what you'll do there is
you'll just get a code back.

00:11:09.840 --> 00:11:12.480
So there's a redirect that we
offer when you use that

00:11:12.480 --> 00:11:15.010
redirect URI, a Google
host redirect.

00:11:15.010 --> 00:11:18.120
And on that page, they just have
a text box with the code

00:11:18.120 --> 00:11:21.110
that you need, and that code
is what you exchange.

00:11:21.110 --> 00:11:23.920
That code only lasts 10 minutes,
whereas an access

00:11:23.920 --> 00:11:24.770
token lasts an hour.

00:11:24.770 --> 00:11:27.940
That code is a very short-lived
code that you can

00:11:27.940 --> 00:11:32.310
use to exchange for a refresh
token and an access token.

00:11:32.310 --> 00:11:37.540
But if you just search for
server-side OAuth 2.0 flow,

00:11:37.540 --> 00:11:41.520
it's in that document that I
just posted to the thread.

00:11:41.520 --> 00:11:43.710
But if you want to ping the
forum if you're having

00:11:43.710 --> 00:11:45.780
trouble, I can certainly
point you in a

00:11:45.780 --> 00:11:47.060
more specific direction.

00:11:47.060 --> 00:11:47.500
LUKE: I have a question
about--

00:11:47.500 --> 00:11:50.340
DAN HERMES: Caroline, does
that seem like it's--

00:11:50.340 --> 00:11:50.520
sorry, Luke.

00:11:50.520 --> 00:11:51.430
Did you have a problem?

00:11:51.430 --> 00:11:52.540
LUKE: I just wanted
to ask a question

00:11:52.540 --> 00:11:53.260
about that last point.

00:11:53.260 --> 00:11:57.270
When you bring in these guests,
will we be told two

00:11:57.270 --> 00:11:59.010
weeks in advance who's
going to show up?

00:11:59.010 --> 00:12:02.000
DAN HERMES: When I announce the
Hangout, I'll announce--

00:12:02.000 --> 00:12:05.760
it may not be two weeks in
advance, but it'll be 10 days

00:12:05.760 --> 00:12:09.210
in advance, 8 days in advance,
something like that.

00:12:09.210 --> 00:12:13.800
So Caroline, is that sounding
more like what you were

00:12:13.800 --> 00:12:14.570
looking for?

00:12:14.570 --> 00:12:17.645
Or were you really needing this
server-to-server flow?

00:12:17.645 --> 00:12:18.720
CAROLINE: I think so.

00:12:18.720 --> 00:12:21.120
I'm just trying to find where
you're looking in the

00:12:21.120 --> 00:12:23.700
documentation, because what
I had certainly didn't--

00:12:23.700 --> 00:12:31.290
the redirect URI was a page
where a user would acknowledge

00:12:31.290 --> 00:12:32.440
and consent to that.

00:12:32.440 --> 00:12:35.370
And we have 200-plus
merchants.

00:12:35.370 --> 00:12:37.810
To have that kind of set up
every time we need to add

00:12:37.810 --> 00:12:39.950
somebody to this--

00:12:39.950 --> 00:12:42.220
DAN HERMES: So it depends
on your setup.

00:12:42.220 --> 00:12:46.610
Luke's setup, he's using a
multi-client account, and he

00:12:46.610 --> 00:12:49.450
creates a sub-account for
each of his users.

00:12:49.450 --> 00:12:51.340
And then he can just administer
those accounts

00:12:51.340 --> 00:12:56.080
using his own logged-in
credentials, because his MCA

00:12:56.080 --> 00:12:58.050
is a parent for all those
sub-accounts.

00:12:58.050 --> 00:13:02.250
If you have individual accounts
for each of your

00:13:02.250 --> 00:13:05.170
merchants, one, I would
recommend going to an MCA.

00:13:05.170 --> 00:13:10.190
But two, you're going to have
to get their authentication

00:13:10.190 --> 00:13:12.520
somehow to make requests
on their behalf.

00:13:12.520 --> 00:13:17.796
And asking them for their
passwords is not good, right?

00:13:17.796 --> 00:13:19.675
So you're right.

00:13:19.675 --> 00:13:21.280
CAROLINE: It's less
than ideal.

00:13:21.280 --> 00:13:24.140
But the way it's been in the
past, it's not inconsistent

00:13:24.140 --> 00:13:25.960
with what we've had to do
in the past, right?

00:13:25.960 --> 00:13:28.280
Because this is a relatively
new model, too.

00:13:28.280 --> 00:13:31.290
So we've been doing this
for 10 years with

00:13:31.290 --> 00:13:32.440
Froogle and all that.

00:13:32.440 --> 00:13:35.350
DAN HERMES: Wow, that's
remarkable.

00:13:35.350 --> 00:13:38.776
Yes, I don't believe OAuth has
been around that long.

00:13:38.776 --> 00:13:40.990
CAROLINE: And OAuth 1.0 was--

00:13:40.990 --> 00:13:43.850
as my boss said, just use OAuth
1.0, and hack it, and be

00:13:43.850 --> 00:13:44.820
done with it.

00:13:44.820 --> 00:13:48.382
Because OAuth 1.0 apparently had
a number of issues, right?

00:13:48.382 --> 00:13:50.320
DAN HERMES: It was
just the flow was

00:13:50.320 --> 00:13:51.400
a little less intuitive.

00:13:51.400 --> 00:13:54.050
There were more parts to it.

00:13:54.050 --> 00:13:57.030
And I think one of the big
issues with OAuth 1.0 is that

00:13:57.030 --> 00:14:00.220
you had infinite life
access tokens.

00:14:00.220 --> 00:14:02.120
And it's the same thing
with client login.

00:14:02.120 --> 00:14:02.860
Well, actually, no.

00:14:02.860 --> 00:14:05.150
That's not true anymore
with client login.

00:14:05.150 --> 00:14:11.900
But there's some problems with
giving access forever rather

00:14:11.900 --> 00:14:14.110
than giving the ability
to refresh forever,

00:14:14.110 --> 00:14:16.445
and, things like that.

00:14:16.445 --> 00:14:18.710
CAROLINE: So the way the
documentation is written

00:14:18.710 --> 00:14:21.770
certainly suggests we are a
server-to-server candidate.

00:14:21.770 --> 00:14:24.820
But that said, it does not
seem like even in the

00:14:24.820 --> 00:14:27.150
libraries that's supported,
it's supported too well.

00:14:27.150 --> 00:14:30.000
There's a lot of complaints
about things not working

00:14:30.000 --> 00:14:32.660
appropriately in their
respective libraries.

00:14:32.660 --> 00:14:35.410
DAN HERMES: That's one of
the more exotic flows.

00:14:35.410 --> 00:14:38.710
And honestly, I don't think
it's that necessary.

00:14:38.710 --> 00:14:42.120
I don't know how you're
currently authenticating new

00:14:42.120 --> 00:14:47.030
users, but it would be as easy
as do you want to sign up, and

00:14:47.030 --> 00:14:49.880
then it's just one extra
page they go through.

00:14:49.880 --> 00:14:50.570
CAROLINE: Yeah.

00:14:50.570 --> 00:14:53.590
They typically talk to one of
our ECI representatives who

00:14:53.590 --> 00:14:54.750
walks them through everything.

00:14:54.750 --> 00:14:59.160
Because we can have very
different people, different

00:14:59.160 --> 00:15:00.870
technical backgrounds.

00:15:00.870 --> 00:15:05.040
One of my concerns with doing
a multi-client account is

00:15:05.040 --> 00:15:07.630
we're a software as a service,
so we don't have a website.

00:15:07.630 --> 00:15:09.270
We don't have a merchant
account as a company.

00:15:09.270 --> 00:15:11.900
It's all our merchants have
merchant's accounts.

00:15:11.900 --> 00:15:13.600
So the master one is always the

00:15:13.600 --> 00:15:15.800
master and all the children.

00:15:15.800 --> 00:15:19.260
And it wasn't clear how to
obtain a master account that

00:15:19.260 --> 00:15:23.490
wasn't tied to a website that
had e-commerce platform.

00:15:23.490 --> 00:15:26.590
So we don't want to take one
random merchant, make them the

00:15:26.590 --> 00:15:27.860
master, and then--

00:15:27.860 --> 00:15:28.910
DAN HERMES: No.

00:15:28.910 --> 00:15:30.680
It would be your own
sub-account.

00:15:30.680 --> 00:15:32.570
But the fact that you
don't have a website

00:15:32.570 --> 00:15:33.895
may be an issue there.

00:15:33.895 --> 00:15:36.395
CAROLINE: We have a website, but
not an e-commerce website.

00:15:36.395 --> 00:15:38.560
DAN HERMES: Right,
right, right.

00:15:38.560 --> 00:15:39.890
I don't know.

00:15:39.890 --> 00:15:43.610
I think with marketplaces, you
would need an e-commerce site,

00:15:43.610 --> 00:15:46.740
but there are other types of
multi-client accounts that

00:15:46.740 --> 00:15:51.560
don't necessarily need
to be a marketplace.

00:15:51.560 --> 00:15:53.610
CAROLINE: So that's one reason
that we held back.

00:15:53.610 --> 00:15:56.300
The second reason is, obviously,
the quota is per

00:15:56.300 --> 00:15:59.640
merchant account, and it
actually would bite us worse

00:15:59.640 --> 00:16:01.600
as a master account than--

00:16:01.600 --> 00:16:04.120
we'd more than likely have to
get our quotas up, too,

00:16:04.120 --> 00:16:05.970
whereas if we just used the
separate merchant accounts,

00:16:05.970 --> 00:16:08.380
our quotas will be higher,
and we shouldn't run

00:16:08.380 --> 00:16:09.870
into that as much.

00:16:09.870 --> 00:16:15.420
DAN HERMES: In that case, if
your quota volume is high, and

00:16:15.420 --> 00:16:19.170
you're meeting it, and there
are legitimate requests, if

00:16:19.170 --> 00:16:25.000
you're not doing something where
you're being spammy, or

00:16:25.000 --> 00:16:27.530
you're sending more requests
than you need to or something

00:16:27.530 --> 00:16:29.630
like that, we'll bump
your quota.

00:16:29.630 --> 00:16:30.930
There are no issues there.

00:16:30.930 --> 00:16:34.990
And if there are issues, then
we'll help you get your number

00:16:34.990 --> 00:16:38.836
of requests down so you're
not hitting the quota.

00:16:38.836 --> 00:16:41.630
CAROLINE: But using separate
accounts, I would unlikely

00:16:41.630 --> 00:16:43.160
have to bump it, right?

00:16:43.160 --> 00:16:44.030
Well, I mean, it's fine.

00:16:44.030 --> 00:16:45.560
It's something we would
definitely look at if there's

00:16:45.560 --> 00:16:48.190
a way to have a master account
that is not attached to an

00:16:48.190 --> 00:16:49.015
e-commerce website.

00:16:49.015 --> 00:16:51.841
DAN HERMES: I don't know that
off the top of my head, but

00:16:51.841 --> 00:16:52.996
let me write that
down, actually.

00:16:52.996 --> 00:16:55.920
LUKE: Well, Caroline, my site
isn't an e-commerce website,

00:16:55.920 --> 00:16:57.735
and it was approved
as an MCA account.

00:16:57.735 --> 00:17:00.400
CAROLINE: We tried to get our
demo sites approved, and we

00:17:00.400 --> 00:17:01.560
just kept getting shot down.

00:17:01.560 --> 00:17:03.920
And whoever the nameless,
faceless person on the other

00:17:03.920 --> 00:17:09.839
side of the drop was was not
giving us any help at all.

00:17:09.839 --> 00:17:13.380
LUKE: I had the same problem
until Sir Danny stepped in.

00:17:13.380 --> 00:17:17.510
CAROLINE: So we just went and
got our merchant account, and

00:17:17.510 --> 00:17:19.000
said, OK, you're going to
be the beta merchant.

00:17:19.000 --> 00:17:19.790
We'll just start with you.

00:17:19.790 --> 00:17:20.839
I mean, we got sort
of frustrated.

00:17:20.839 --> 00:17:25.329
We tried for probably a month
to get something done,

00:17:25.329 --> 00:17:27.349
particularly so we could use
it as a test platform.

00:17:27.349 --> 00:17:30.510
Because we have test e-commerce
sites that wouldn't

00:17:30.510 --> 00:17:31.930
damage anything as well.

00:17:31.930 --> 00:17:37.140
DAN HERMES: So as a test
platform, that's actually

00:17:37.140 --> 00:17:40.490
against the terms. But what
we do with the API

00:17:40.490 --> 00:17:41.540
off of the dry run--

00:17:41.540 --> 00:17:42.990
CAROLINE: Right, the dry
run, which is what

00:17:42.990 --> 00:17:43.770
I've been using, yeah.

00:17:43.770 --> 00:17:44.870
DAN HERMES: Yep.

00:17:44.870 --> 00:17:48.340
But we can certainly, off this
Hangout-- you and I,

00:17:48.340 --> 00:17:52.130
Caroline-- link up about doing
an MCA if you're interested.

00:17:52.130 --> 00:17:55.880
And I can certainly help with
those channels that you said

00:17:55.880 --> 00:17:58.210
weren't that helpful,
because I agree.

00:17:58.210 --> 00:18:02.200
There are times where the
sign-up flow and things like

00:18:02.200 --> 00:18:06.430
that are not as intuitive or
human interactive as--

00:18:06.430 --> 00:18:07.080
CAROLINE: You'll probably
get a kick out

00:18:07.080 --> 00:18:08.170
of the email, Danny.

00:18:08.170 --> 00:18:08.970
I'll send it to you.

00:18:08.970 --> 00:18:10.510
It was pretty entertaining,
actually.

00:18:10.510 --> 00:18:12.900
LUKE: It was a two-step
process for us.

00:18:12.900 --> 00:18:16.130
I mean, not only did they
decline when we first tried.

00:18:16.130 --> 00:18:18.410
They also turned off
our appy access.

00:18:18.410 --> 00:18:24.096
So I had to go back to Danny
twice and get it finally done.

00:18:24.096 --> 00:18:30.930
DAN HERMES: So with that said,
to conclude that whole arc, I

00:18:30.930 --> 00:18:35.600
think OAuth 2.0 server-side
is a pretty viable flow.

00:18:35.600 --> 00:18:38.160
But again, you're going to have
to make that decision.

00:18:38.160 --> 00:18:43.930
The docs are a little hard to
digest, but I think after you

00:18:43.930 --> 00:18:47.050
implement it, the docs are a lot
easier to digest after you

00:18:47.050 --> 00:18:47.710
try it out a few times.

00:18:47.710 --> 00:18:49.670
CAROLINE: I think you're just
looking at a different doc

00:18:49.670 --> 00:18:51.780
than I am, because there's
certainly none that suggests

00:18:51.780 --> 00:18:54.560
that there's a generic redirect
URI you can use, so I

00:18:54.560 --> 00:18:54.940
just didn't find the
right document.

00:18:54.940 --> 00:18:59.060
DAN HERMES: Yeah, so maybe I'll
reread that and find out

00:18:59.060 --> 00:19:00.310
if it's in there.

00:19:02.610 --> 00:19:06.530
When you actually go into the
Google API's console to

00:19:06.530 --> 00:19:10.250
actually get your client ID and
your client secret to do

00:19:10.250 --> 00:19:14.635
OAuth 2.0, by default it's
server-side OAuth 2.0.

00:19:14.635 --> 00:19:18.050
And you have to actually change
the setting to set your

00:19:18.050 --> 00:19:19.620
own redirect URI.

00:19:19.620 --> 00:19:21.630
By default, it's actually
set to be--

00:19:21.630 --> 00:19:22.000
CAROLINE: Oh.

00:19:22.000 --> 00:19:22.720
See, I didn't even do that.

00:19:22.720 --> 00:19:24.720
I just did the server-to-server,
because that

00:19:24.720 --> 00:19:27.510
seemed like the appropriate
one from the document.

00:19:27.510 --> 00:19:32.740
DAN HERMES: So the server-side
OAuth actually, either using

00:19:32.740 --> 00:19:36.840
local host, which
you need to do--

00:19:36.840 --> 00:19:38.360
your library needs
to support that.

00:19:38.360 --> 00:19:42.880
So local host isn't really the
one you want to use, but it's

00:19:42.880 --> 00:19:45.080
something like EEB colon--
you know what?

00:19:45.080 --> 00:19:47.756
Let me mute myself
and type that in.

00:19:47.756 --> 00:19:49.660
Not that it matters that much.

00:19:49.660 --> 00:19:50.650
But I'll be right back.

00:19:50.650 --> 00:19:51.420
CAROLINE: Yeah, it
doesn't matter.

00:19:51.420 --> 00:19:53.230
You can just post
it later, too.

00:19:53.230 --> 00:19:56.250
It's not that critical.

00:19:56.250 --> 00:19:58.850
It does make me question why
we have a server-to-server

00:19:58.850 --> 00:20:02.830
option when it doesn't appear to
be supported or encouraged.

00:20:02.830 --> 00:20:04.966
It's like, why is that there?

00:20:04.966 --> 00:20:08.290
ANDREW: Have any of you guys
read the OAuth 2.0 spec to see

00:20:08.290 --> 00:20:11.740
if message signing is
still part of the--

00:20:11.740 --> 00:20:13.260
I haven't done OAuth 2.0.

00:20:13.260 --> 00:20:17.220
I've only done OAuth 1.0.

00:20:17.220 --> 00:20:18.714
No?

00:20:18.714 --> 00:20:21.360
CAROLINE: The service accounts,
that last piece I'm

00:20:21.360 --> 00:20:22.240
talking about, definitely

00:20:22.240 --> 00:20:25.190
includes an RSA hash signature.

00:20:25.190 --> 00:20:28.705
ANDREW: For the header or
for the whole message?

00:20:28.705 --> 00:20:29.970
CAROLINE: Just the payload.

00:20:29.970 --> 00:20:33.210
The header's encoded,
64 encoded, and then

00:20:33.210 --> 00:20:36.200
the payload is signed.

00:20:36.200 --> 00:20:36.660
Actually, no.

00:20:36.660 --> 00:20:39.600
The header and the payload
are signed.

00:20:39.600 --> 00:20:42.090
So you send the header, the
payload, and then the signed

00:20:42.090 --> 00:20:44.770
header and payload all
as one parameter.

00:20:44.770 --> 00:20:48.500
DAN HERMES: That's the point
of the RSA, is that you can

00:20:48.500 --> 00:20:50.940
encode the payload.

00:20:50.940 --> 00:20:53.510
ANDREW: They could just
use the transport

00:20:53.510 --> 00:20:54.670
layer security there.

00:20:54.670 --> 00:20:56.525
DAN HERMES: Right.

00:20:56.525 --> 00:21:00.560
ANDREW: But I guess they
decided to go the more

00:21:00.560 --> 00:21:01.820
complicated for me way.

00:21:05.270 --> 00:21:07.640
CAROLINE: But using that first
method that Danny talked

00:21:07.640 --> 00:21:09.190
about, it's almost seamless.

00:21:09.190 --> 00:21:10.910
There's really no encryption.

00:21:10.910 --> 00:21:13.206
I mean, that's all handled
in the library.

00:21:13.206 --> 00:21:15.980
ANDREW: I'll have to look and
see if there's a good library

00:21:15.980 --> 00:21:17.420
that I can use.

00:21:17.420 --> 00:21:21.070
Because I'm sure that the Google
Client Library for this

00:21:21.070 --> 00:21:23.340
uses it, but we did
some custom code.

00:21:26.145 --> 00:21:28.300
DAN HERMES: All the source
is open source.

00:21:28.300 --> 00:21:30.860
So you if you need to pull parts
into your own custom

00:21:30.860 --> 00:21:33.450
stuff, the source is still
out in the wild.

00:21:33.450 --> 00:21:35.610
It's not just a bunch of
executables floating around,

00:21:35.610 --> 00:21:37.200
or binaries.

00:21:37.200 --> 00:21:39.120
So I did find that string.

00:21:39.120 --> 00:21:46.220
It's urn:ietf:wg:oauth:2.0:oob.

00:21:46.220 --> 00:21:48.510
Not that anyone should remember
that, but that's

00:21:48.510 --> 00:21:51.090
approximately what
it looks like.

00:21:51.090 --> 00:21:53.720
And before we get to our next
question, I just want to say I

00:21:53.720 --> 00:21:56.880
see we have two viewers
outside the Hangout.

00:21:56.880 --> 00:21:59.040
We have, let's see-- one,
two, three, four, five.

00:21:59.040 --> 00:22:01.430
There's only six of us right
now, so we have four open

00:22:01.430 --> 00:22:04.790
spots if you want to actually
join the Hangout and not just

00:22:04.790 --> 00:22:07.190
watch from afar, and
hang out on air.

00:22:07.190 --> 00:22:08.910
If you prefer to watch
than hang out on air,

00:22:08.910 --> 00:22:10.065
that's fine as well.

00:22:10.065 --> 00:22:11.315
Anyhow, on to our
next question.

00:22:16.280 --> 00:22:17.900
Yule or anyone?

00:22:17.900 --> 00:22:18.712
Anyone?

00:22:18.712 --> 00:22:24.360
LUKE: I have my usual
question or two.

00:22:24.360 --> 00:22:29.370
I did get an exception for items
that include group item

00:22:29.370 --> 00:22:31.360
ID must not have multiple
values.

00:22:31.360 --> 00:22:33.570
And this was because a merchant
was trying to submit

00:22:33.570 --> 00:22:34.780
two colors.

00:22:34.780 --> 00:22:37.540
And the way I take them is I
take them as a comma separated

00:22:37.540 --> 00:22:39.590
list, and then I just parse
them out of the comma

00:22:39.590 --> 00:22:41.500
separated list and list
them separately.

00:22:41.500 --> 00:22:43.750
So how do you want that
submitted if it's like blue,

00:22:43.750 --> 00:22:44.640
white, blue, red.

00:22:44.640 --> 00:22:47.500
Do you want blue comma white,
or slashes, or--

00:22:47.500 --> 00:22:55.140
DAN HERMES: Well, so if it's
like they have four of the

00:22:55.140 --> 00:22:57.400
same shirt that are all
in four different

00:22:57.400 --> 00:22:59.730
colors, that's one case.

00:22:59.730 --> 00:23:01.680
Or if they have a shirt that
has four different colors,

00:23:01.680 --> 00:23:02.460
that's another case.

00:23:02.460 --> 00:23:03.190
So which one do you mean?

00:23:03.190 --> 00:23:05.420
LUKE: Well, let's just a
take an example of two.

00:23:05.420 --> 00:23:08.130
You have two shirts, and they're
each multi-colored,

00:23:08.130 --> 00:23:08.960
but there are two colors.

00:23:08.960 --> 00:23:11.050
Like it's a blue and
white shirt, and a

00:23:11.050 --> 00:23:12.340
blue and red shirt.

00:23:12.340 --> 00:23:13.760
And you can only submit
the attribute for

00:23:13.760 --> 00:23:15.270
the color one time.

00:23:15.270 --> 00:23:18.980
So do you want blue comma white,
blue comma red, or blue

00:23:18.980 --> 00:23:20.212
space white, blue space red?

00:23:20.212 --> 00:23:22.390
DAN HERMES: This is the
sort of an amalgam

00:23:22.390 --> 00:23:23.490
of everything, right?

00:23:23.490 --> 00:23:26.870
So if you just had a shirt that
was both blue and white,

00:23:26.870 --> 00:23:29.220
a multi-colored shirt, and
you would submit blue

00:23:29.220 --> 00:23:31.540
slash white, right?

00:23:31.540 --> 00:23:34.780
Now, for this particular
product, you have a shirt that

00:23:34.780 --> 00:23:37.350
sells blue-white and a shirt
that sells red-white.

00:23:37.350 --> 00:23:39.800
So you could submit two
different products with the

00:23:39.800 --> 00:23:43.780
exact same data, one blue-white,
one red-white.

00:23:43.780 --> 00:23:47.420
And we actually have support for
this through variant IDs,

00:23:47.420 --> 00:23:48.670
and that's actually--

00:23:51.440 --> 00:23:52.770
LUKE: But not like
that, though.

00:23:52.770 --> 00:23:55.810
I mean, the shirt itself has
two different colors in it.

00:23:55.810 --> 00:23:58.950
So you're submitting one color
attribute for one product, but

00:23:58.950 --> 00:24:00.895
you want to put two colors
in the attribute.

00:24:00.895 --> 00:24:02.910
DAN HERMES: Right.

00:24:02.910 --> 00:24:07.340
So what the docs say, whether
you're using the API or

00:24:07.340 --> 00:24:15.140
whether you're using data feeds,
you need to pick a

00:24:15.140 --> 00:24:20.040
dominant color, and then from
there, list the rest after it.

00:24:20.040 --> 00:24:25.140
But the example we have in our
example XML in our docs says,

00:24:25.140 --> 00:24:26.690
I think, red slash blue.

00:24:26.690 --> 00:24:30.770
But in the single attribute, you
would do blue slash white.

00:24:30.770 --> 00:24:36.050
So scp colon color red slash
white, blue slash white.

00:24:39.760 --> 00:24:43.670
So color, actually, before we
made the big switch to all the

00:24:43.670 --> 00:24:46.370
variant IDs, you used
to be able to send

00:24:46.370 --> 00:24:47.290
more than one color.

00:24:47.290 --> 00:24:50.490
But now you can only
send one color.

00:24:50.490 --> 00:24:53.110
But read up on variant IDs.

00:24:53.110 --> 00:24:54.600
We can discuss it a
little more if you

00:24:54.600 --> 00:24:55.490
have specific questions.

00:24:55.490 --> 00:24:57.340
LUKE: Yeah, I'm already
using variant IDs.

00:24:57.340 --> 00:24:58.166
DAN HERMES: Oh, OK.

00:24:58.166 --> 00:24:58.580
Perfect.

00:24:58.580 --> 00:24:59.380
LUKE: I'm doing all that.

00:24:59.380 --> 00:25:01.200
Just I've gotten this weird
error about how you can't

00:25:01.200 --> 00:25:02.700
submit them as separate
color values.

00:25:02.700 --> 00:25:03.470
DAN HERMES: Yep.

00:25:03.470 --> 00:25:07.200
You need to submit one color,
and then, like I said, if

00:25:07.200 --> 00:25:11.075
there are two multicolored
versions of the same shirt,

00:25:11.075 --> 00:25:13.730
then you would need to submit
them as separate variants

00:25:13.730 --> 00:25:15.706
under the same variant ID.

00:25:15.706 --> 00:25:18.030
LUKE: And I have a
stupid question.

00:25:18.030 --> 00:25:22.210
Are digital downloads considered
hard product that

00:25:22.210 --> 00:25:23.615
we can list?

00:25:23.615 --> 00:25:24.440
See what I mean?

00:25:24.440 --> 00:25:25.920
Because it's like, let's
say you have a report.

00:25:25.920 --> 00:25:28.020
It's a bound report, right?

00:25:28.020 --> 00:25:29.150
That's something you ship.

00:25:29.150 --> 00:25:30.110
That's a hard product.

00:25:30.110 --> 00:25:32.950
But what if you want to offer
a digital download version.

00:25:32.950 --> 00:25:35.750
Could that also be listed
with the appy?

00:25:35.750 --> 00:25:37.802
Because it's a digital
product.

00:25:37.802 --> 00:25:39.230
DAN HERMES: I don't
know why not.

00:25:39.230 --> 00:25:40.290
I don't know the specifics
of it.

00:25:40.290 --> 00:25:42.840
Let me write that down.

00:25:42.840 --> 00:25:45.050
As far as I know, if it's a
product, it's a product.

00:25:45.050 --> 00:25:50.440
But I don't know 100%, so
we'll leave it at that.

00:25:50.440 --> 00:25:51.810
And I'll write this down.

00:25:51.810 --> 00:25:54.413
I'm going to mute myself so
you can't hear me typing.

00:25:54.413 --> 00:25:57.410
LUKE: I think it's a stupid
question just because I feel

00:25:57.410 --> 00:25:59.250
like I'm too lazy
for not digging.

00:25:59.250 --> 00:26:01.250
I'm sure it's in there
somewhere.

00:26:01.250 --> 00:26:05.185
It's in the doc somewhere.

00:26:05.185 --> 00:26:06.435
DAN HERMES: Sure.

00:26:09.161 --> 00:26:13.090
Do we have any questions from
our newcomer, Hope?

00:26:13.090 --> 00:26:14.256
No?

00:26:14.256 --> 00:26:16.710
Are you finding this helpful?

00:26:16.710 --> 00:26:18.330
That's good, that's good.

00:26:18.330 --> 00:26:19.580
HOPE: Yes, thanks.

00:26:24.320 --> 00:26:25.920
MALE SPEAKER: I've got a
question to ask about

00:26:25.920 --> 00:26:26.330
documentation.

00:26:26.330 --> 00:26:27.105
DAN HERMES: OK.

00:26:27.105 --> 00:26:28.410
What's up?

00:26:28.410 --> 00:26:31.980
MALE SPEAKER: You sent out a
link on the forum this week

00:26:31.980 --> 00:26:35.780
that the documentation's being
changed or updated?

00:26:38.730 --> 00:26:40.460
It's also labeled "sample
documentation."

00:26:40.460 --> 00:26:41.625
DAN HERMES: What's that?

00:26:41.625 --> 00:26:43.830
MALE SPEAKER: It was labeled
"sample documentation?"

00:26:43.830 --> 00:26:44.570
DAN HERMES: Yeah.

00:26:44.570 --> 00:26:46.940
So, it's not that something
was being changed.

00:26:46.940 --> 00:26:50.420
It's that I added an end-to-end
PHP sample that

00:26:50.420 --> 00:26:54.170
showed you how to insert
products in batch or

00:26:54.170 --> 00:26:56.545
individually, how to update,
like, pretty much every action

00:26:56.545 --> 00:27:00.970
you would want to do on
your items using PHP.

00:27:00.970 --> 00:27:04.500
And I have one in Python that
I published three weeks ago,

00:27:04.500 --> 00:27:07.020
and hopefully, the DotNet will
be published this week.

00:27:07.020 --> 00:27:09.710
I don't know if people saw all
the commits made to the DotNet

00:27:09.710 --> 00:27:13.080
library, but it's just
a new guide.

00:27:13.080 --> 00:27:16.355
It's just augmentation
rather than changes.

00:27:16.355 --> 00:27:16.950
MALE SPEAKER: Excellent.

00:27:16.950 --> 00:27:18.180
Thanks for clarifying that.

00:27:18.180 --> 00:27:20.210
DAN HERMES: You're a Java
guy, though, right?

00:27:20.210 --> 00:27:21.650
MALE SPEAKER: I am Java,
that's right.

00:27:21.650 --> 00:27:23.833
DAN HERMES: So you don't
care about the PHP.

00:27:23.833 --> 00:27:25.825
MALE SPEAKER: I had a quick
glance at the PHP.

00:27:25.825 --> 00:27:27.382
It looked good, it
looked good.

00:27:27.382 --> 00:27:28.735
DAN HERMES: Sure.

00:27:28.735 --> 00:27:29.985
OK.

00:27:40.880 --> 00:27:43.520
So do we have any other
questions or concerns?

00:27:43.520 --> 00:27:44.510
CAROLINE: Hey, Danny?

00:27:44.510 --> 00:27:45.690
I do have a question.

00:27:45.690 --> 00:27:48.120
I know you kind of pushed me
to go down the web server

00:27:48.120 --> 00:27:49.050
application route.

00:27:49.050 --> 00:27:50.290
It's still an additional step.

00:27:50.290 --> 00:27:53.300
I mean, you have to have them
set up a merchant service

00:27:53.300 --> 00:27:58.150
account to get either the client
secret and client ID or

00:27:58.150 --> 00:27:59.730
to get the private key.

00:27:59.730 --> 00:28:00.660
DAN HERMES: No.

00:28:00.660 --> 00:28:02.750
I wasn't advocating
you do that.

00:28:02.750 --> 00:28:06.690
Your application has a client
ID and a client secret.

00:28:06.690 --> 00:28:11.470
And then your application
performs OAuth 2.0 as--

00:28:11.470 --> 00:28:13.000
CAROLINE: Got you.

00:28:13.000 --> 00:28:15.850
But then again, we would still
need to have a master service

00:28:15.850 --> 00:28:16.980
account, right, to do that?

00:28:16.980 --> 00:28:17.855
Or no?

00:28:17.855 --> 00:28:18.530
DAN HERMES: No.

00:28:18.530 --> 00:28:19.890
CAROLINE: Doesn't that
account have to be

00:28:19.890 --> 00:28:21.140
attached to a merchant?

00:28:21.140 --> 00:28:23.050
DAN HERMES: That doesn't
have to be tied to

00:28:23.050 --> 00:28:24.830
your account at all.

00:28:24.830 --> 00:28:25.620
CAROLINE: OK.

00:28:25.620 --> 00:28:26.660
That I was unfamiliar with.

00:28:26.660 --> 00:28:27.570
Now I got it.

00:28:27.570 --> 00:28:29.920
DAN HERMES: So what happens
is, you need to sign the

00:28:29.920 --> 00:28:32.890
request on behalf of
someone, right?

00:28:32.890 --> 00:28:36.340
So OAuth 2.0 is a way to get a
token for doing the signing.

00:28:36.340 --> 00:28:39.080
So if you get a token on behalf
of your users, it

00:28:39.080 --> 00:28:43.100
doesn't matter what account
retrieved that token, right?

00:28:43.100 --> 00:28:45.030
It's a token for the
user's account.

00:28:45.030 --> 00:28:47.980
And when you sign the request
on behalf of your users,

00:28:47.980 --> 00:28:48.770
that's what that is.

00:28:48.770 --> 00:28:54.730
So you could use a Google
account completely independent

00:28:54.730 --> 00:28:57.570
from the accounts you're using
to manage everything else.

00:28:57.570 --> 00:29:01.420
But you could use that account
for OAuth when you go through

00:29:01.420 --> 00:29:05.730
and set it up, and
you'd be fine.

00:29:05.730 --> 00:29:08.620
So you need one client
ID and one client

00:29:08.620 --> 00:29:11.610
secret for just you.

00:29:11.610 --> 00:29:14.640
And then from there, you'd use
that client ID and that client

00:29:14.640 --> 00:29:21.110
secret to actually construct
the token--

00:29:21.110 --> 00:29:22.120
CAROLINE: The OAuth
request, yep.

00:29:22.120 --> 00:29:23.760
DAN HERMES: Right.

00:29:23.760 --> 00:29:25.910
And then from there--

00:29:25.910 --> 00:29:28.020
there may even be
a video online.

00:29:28.020 --> 00:29:30.342
I might try to track
that down.

00:29:30.342 --> 00:29:35.365
But from there, your user is
presented with one page, two

00:29:35.365 --> 00:29:36.510
pages if they're
not signed in.

00:29:36.510 --> 00:29:38.550
CAROLINE: Yeah, I think it's
seeing the page where they

00:29:38.550 --> 00:29:40.165
agree to it and all that.

00:29:40.165 --> 00:29:42.010
DAN HERMES: And it even says--

00:29:42.010 --> 00:29:44.620
because you specify the scope in
the request, so it'll even

00:29:44.620 --> 00:29:49.030
say, they're only wanting to
access your Content API for

00:29:49.030 --> 00:29:50.790
Shopping data.

00:29:50.790 --> 00:29:54.670
So all our tokens are
scoped tokens.

00:29:54.670 --> 00:29:56.670
So if you've got an OAuth token,
and then you try to

00:29:56.670 --> 00:29:59.360
access, let's say,
their calendar

00:29:59.360 --> 00:30:00.530
data, that would fail.

00:30:00.530 --> 00:30:01.850
CAROLINE: Right, right.

00:30:01.850 --> 00:30:03.870
Yeah, that's pretty clear
from the documentation.

00:30:03.870 --> 00:30:08.180
So then with that question in
mind, say I am using whatever

00:30:08.180 --> 00:30:12.630
generic Gmail account that
I have, and I do the

00:30:12.630 --> 00:30:13.410
server-to-server.

00:30:13.410 --> 00:30:16.860
How am I able to access
their accounts, the

00:30:16.860 --> 00:30:18.146
very last one that--

00:30:18.146 --> 00:30:19.730
DAN HERMES: I'm not familiar
enough with server-to-server

00:30:19.730 --> 00:30:21.020
to tell you.

00:30:21.020 --> 00:30:23.180
CAROLINE: Because maybe there's
enough trust in that

00:30:23.180 --> 00:30:23.840
original account?

00:30:23.840 --> 00:30:25.460
I don't know.

00:30:25.460 --> 00:30:28.320
Again, it seems ideal to
not have to have their

00:30:28.320 --> 00:30:31.465
interaction, but it's just
unclear from the documentation

00:30:31.465 --> 00:30:32.630
what that last one is.

00:30:32.630 --> 00:30:34.730
DAN HERMES: I don't understand
how you're going to get their

00:30:34.730 --> 00:30:37.180
authorization without
some interaction.

00:30:37.180 --> 00:30:38.960
CAROLINE: Well, that's
what I'm asking you.

00:30:38.960 --> 00:30:42.560
The service-to-service account,
if the private key

00:30:42.560 --> 00:30:47.100
generated is not associated with
their account, then how

00:30:47.100 --> 00:30:48.180
is that an authorization?

00:30:48.180 --> 00:30:49.580
Because my understanding
was they

00:30:49.580 --> 00:30:51.890
created the project account.

00:30:51.890 --> 00:30:54.400
They generate a private key
that is for their merchant

00:30:54.400 --> 00:30:55.950
account, and then everything
signed with their

00:30:55.950 --> 00:30:57.160
private key is golden.

00:30:57.160 --> 00:30:58.366
DAN HERMES: I see.

00:30:58.366 --> 00:30:59.170
OK.

00:30:59.170 --> 00:30:59.595
Yeah.

00:30:59.595 --> 00:31:01.280
CAROLINE: Maybe if we had a
better understanding of how

00:31:01.280 --> 00:31:01.370
that works.

00:31:01.370 --> 00:31:02.420
DAN HERMES: Like I said,
I'm not familiar

00:31:02.420 --> 00:31:03.865
enough with that flow.

00:31:03.865 --> 00:31:08.640
It is one of the more exotic
ones out there

00:31:08.640 --> 00:31:11.145
for the utmost security.

00:31:14.000 --> 00:31:16.350
Yeah, I mean, like Andrew said,

00:31:16.350 --> 00:31:18.220
usually TLS is good enough.

00:31:18.220 --> 00:31:21.401
But that goes above
and beyond.

00:31:21.401 --> 00:31:24.655
But I can look into it
more for our next

00:31:24.655 --> 00:31:25.700
Hangout, if you like.

00:31:25.700 --> 00:31:28.990
CAROLINE: Yeah, or even just
post on the forum sort of how

00:31:28.990 --> 00:31:39.630
that queue thinks, as well as if
we go that direction, their

00:31:39.630 --> 00:31:45.520
response error is, on
purpose, useless.

00:31:45.520 --> 00:31:46.960
It's just that didn't work.

00:31:46.960 --> 00:31:49.750
And I think that's so that you
don't try to hack it and keep

00:31:49.750 --> 00:31:51.310
trying to get the right
answer, right?

00:31:51.310 --> 00:31:56.150
I think it's by design that it's
a obtuse error message,

00:31:56.150 --> 00:31:58.030
but having maybe more
information as

00:31:58.030 --> 00:31:59.000
to why that's happening.

00:31:59.000 --> 00:32:00.250
I mean, it does appear
to be used.

00:32:00.250 --> 00:32:04.120
There's enough people on forums
talking about it.

00:32:04.120 --> 00:32:06.320
Maybe it's only used for--

00:32:06.320 --> 00:32:07.735
DAN HERMES: Individual
accounts?

00:32:07.735 --> 00:32:10.920
CAROLINE: Or individual APIs
that really don't contain any

00:32:10.920 --> 00:32:13.395
kind of sensitive data, and
that's the whole point, too.

00:32:13.395 --> 00:32:14.460
I don't know.

00:32:14.460 --> 00:32:15.880
It's just not clear.

00:32:15.880 --> 00:32:19.610
DAN HERMES: Yeah, I mean,
especially with this API, all

00:32:19.610 --> 00:32:21.390
the data is intended
to be user-facing.

00:32:21.390 --> 00:32:25.000
So we don't really care about
encrypting it that much.

00:32:25.000 --> 00:32:27.760
User-facing via either commerce
search, or product

00:32:27.760 --> 00:32:30.980
search, or product ad, some
other destination.

00:32:30.980 --> 00:32:32.860
CAROLINE: And the worst thing
somebody could do is if they

00:32:32.860 --> 00:32:34.350
got your account is to
get it shut off.

00:32:34.350 --> 00:32:36.720
I mean, that's not good,
but it's the worst they

00:32:36.720 --> 00:32:37.500
could really do.

00:32:37.500 --> 00:32:38.750
DAN HERMES: Sure, sure.

00:32:41.548 --> 00:32:42.570
CAROLINE: Sorry.

00:32:42.570 --> 00:32:44.150
I'm done beating that particular
dead horse.

00:32:44.150 --> 00:32:46.670
DAN HERMES: No, no, it's fine.

00:32:46.670 --> 00:32:48.640
It's very important.

00:32:48.640 --> 00:32:51.670
I think especially with client
login going away, it's

00:32:51.670 --> 00:32:54.320
important to understand how
all these flows work.

00:32:54.320 --> 00:32:58.110
But also that's sort of the new
way authentication happens

00:32:58.110 --> 00:33:00.150
on the web with OpenID
and OAuth.

00:33:00.150 --> 00:33:01.460
It's not just Google.

00:33:01.460 --> 00:33:04.170
It's everybody.

00:33:04.170 --> 00:33:06.730
And with a lot of these
libraries, client login was

00:33:06.730 --> 00:33:07.510
super-duper easy.

00:33:07.510 --> 00:33:12.700
You just put in the account
ID and the password,

00:33:12.700 --> 00:33:14.680
and you just go.

00:33:14.680 --> 00:33:17.560
Or that is, the email,
not the--

00:33:17.560 --> 00:33:19.410
merchant center account ID.

00:33:19.410 --> 00:33:24.650
But I think that stuff's
pretty dangerous.

00:33:24.650 --> 00:33:26.850
There was a talk last year at
Google I/O, called Client

00:33:26.850 --> 00:33:29.580
Login Fail, going over
all the ways where

00:33:29.580 --> 00:33:32.450
bad things can happen.

00:33:32.450 --> 00:33:38.430
It is kind of scary having
to send passwords around.

00:33:38.430 --> 00:33:43.700
That's why we rely on these
millennial flows rather than

00:33:43.700 --> 00:33:46.590
the old school.

00:33:46.590 --> 00:33:49.980
LUKE: Danny, I wanted to ask
if anybody had seen this

00:33:49.980 --> 00:33:52.250
happen, and maybe I just
need to double check.

00:33:52.250 --> 00:33:55.940
But it looks like when a
product is posted, the

00:33:55.940 --> 00:34:00.130
Merchant Center Console shows
a created date-time and an

00:34:00.130 --> 00:34:01.520
updated date-time.

00:34:01.520 --> 00:34:04.010
And at some point thereafter,
it switches over and says

00:34:04.010 --> 00:34:05.890
posted, right?

00:34:05.890 --> 00:34:07.810
And it doesn't say created
or updated.

00:34:07.810 --> 00:34:10.481
It just changes the display?

00:34:10.481 --> 00:34:11.920
DAN HERMES: I'm not
familiar with the

00:34:11.920 --> 00:34:14.310
posted attribute, but--

00:34:14.310 --> 00:34:16.130
LUKE: It might even be
after the product

00:34:16.130 --> 00:34:17.060
is approved or something.

00:34:17.060 --> 00:34:19.969
But anyway, the post seems to
change, and it says posted.

00:34:19.969 --> 00:34:21.780
And then, what I think I
noticed, and I've got to

00:34:21.780 --> 00:34:23.860
double check this, is that
when it switches over to

00:34:23.860 --> 00:34:27.590
posted, the appy starts
returning an updated

00:34:27.590 --> 00:34:30.440
date-time, but it doesn't
tell you when

00:34:30.440 --> 00:34:31.325
the product was updated.

00:34:31.325 --> 00:34:34.330
The updated date-time comes back
as the current date-time

00:34:34.330 --> 00:34:36.860
of the request. Maybe I'm
wrong about that.

00:34:36.860 --> 00:34:38.574
I don't know if anybody
else noticed or not.

00:34:38.574 --> 00:34:39.760
DAN HERMES: Huh.

00:34:39.760 --> 00:34:42.999
So I did ask about that before
you were asking about updated

00:34:42.999 --> 00:34:45.389
and published signatures
changing.

00:34:45.389 --> 00:34:51.040
The team says either that's a
bug on our part or you're

00:34:51.040 --> 00:34:54.210
making some sort of changes
before doing that that you're

00:34:54.210 --> 00:34:59.138
not registering or realizing.

00:34:59.138 --> 00:35:00.070
LUKE: I need to double check.

00:35:00.070 --> 00:35:02.080
Let me check my stuff and
make sure I'm right.

00:35:02.080 --> 00:35:03.310
DAN HERMES: Yeah.

00:35:03.310 --> 00:35:05.490
I don't know the behavior
of all this.

00:35:05.490 --> 00:35:07.000
Nobody's really noticed it.

00:35:07.000 --> 00:35:08.960
I'm not sure.

00:35:08.960 --> 00:35:12.620
But unless it's critical to your
application, I'm not too

00:35:12.620 --> 00:35:15.870
worried about what the
values are or not.

00:35:15.870 --> 00:35:16.490
I don't know.

00:35:16.490 --> 00:35:20.200
If it is critical, you want
to know when it ends up on

00:35:20.200 --> 00:35:24.030
product search or something
like that.

00:35:24.030 --> 00:35:25.880
LUKE: I think originally what
I was doing was I was

00:35:25.880 --> 00:35:29.960
comparing your date to when it
was updated to my system's

00:35:29.960 --> 00:35:31.890
date that was in the process
of updating and that was

00:35:31.890 --> 00:35:36.080
determining whether I should
fire an update.

00:35:36.080 --> 00:35:38.590
I do it internally now, so I can
keep track of when it was

00:35:38.590 --> 00:35:41.640
last modified, and I compare
it to the current time that

00:35:41.640 --> 00:35:43.100
I'm running to determine
whether or

00:35:43.100 --> 00:35:43.460
not I should update.

00:35:43.460 --> 00:35:47.440
DAN HERMES: I would recommend
doing that, and possibly even

00:35:47.440 --> 00:35:50.320
maybe Andrew can talk about
scalability a little bit.

00:35:50.320 --> 00:35:54.640
But possibly even saving
responses for some

00:35:54.640 --> 00:35:57.290
predetermined amount of time so
you can go back through and

00:35:57.290 --> 00:35:59.850
get stuff out that you wanted.

00:35:59.850 --> 00:36:07.820
But for somebody like you where
you have an interaction

00:36:07.820 --> 00:36:10.372
with the user, and the user is
actually changing something in

00:36:10.372 --> 00:36:13.020
the database, it's not too
difficult to have a database

00:36:13.020 --> 00:36:15.500
hook where you either add
something to a queue or you

00:36:15.500 --> 00:36:17.404
immediately fire
off a request.

00:36:17.404 --> 00:36:17.816
LUKE: Right.

00:36:17.816 --> 00:36:19.214
You're right.

00:36:19.214 --> 00:36:21.155
DAN HERMES: I don't know if you
wanted to make a comment,

00:36:21.155 --> 00:36:24.000
Andrew, about what you guys do
or what you think a best

00:36:24.000 --> 00:36:26.660
practice is, for how long you
should save responses or how

00:36:26.660 --> 00:36:27.850
often you should
save responses,

00:36:27.850 --> 00:36:29.190
or things like that.

00:36:29.190 --> 00:36:33.110
ANDREW: For us, it's a little
easier because we have so many

00:36:33.110 --> 00:36:37.990
different things that consume
this product data that we

00:36:37.990 --> 00:36:42.970
actually already have a system
where every change has a time

00:36:42.970 --> 00:36:48.230
stamp, and you can compare the
last time stamp that you sent

00:36:48.230 --> 00:36:52.480
to the time stamp of when
the change happened.

00:36:52.480 --> 00:36:58.790
But I keep separately a record
of the last successful send.

00:36:58.790 --> 00:37:02.680
I don't query the data
back from Google.

00:37:02.680 --> 00:37:06.080
I just assume if I got back
a "2 something something"

00:37:06.080 --> 00:37:16.520
request or response, like a 200
or 205, then the change

00:37:16.520 --> 00:37:19.340
committed to Google, and I don't
have to tell them about

00:37:19.340 --> 00:37:23.130
it again for another month or
until another change happens.

00:37:23.130 --> 00:37:26.220
LUKE: Did you notice, Andrew,
if the updated date-time

00:37:26.220 --> 00:37:27.696
reflected the current time?

00:37:27.696 --> 00:37:29.090
Or have you just never
looked at that?

00:37:29.090 --> 00:37:35.820
ANDREW: I haven't used the
DotNet framework for that, and

00:37:35.820 --> 00:37:37.370
I haven't looked at
the responses.

00:37:37.370 --> 00:37:38.580
I don't plan on using that.

00:37:38.580 --> 00:37:39.736
DAN HERMES: I mean, he's
just referring to--

00:37:39.736 --> 00:37:41.750
they're in the Adam
Namespace--

00:37:41.750 --> 00:37:43.910
published, updated.

00:37:43.910 --> 00:37:45.860
I think he's saying
posted also.

00:37:45.860 --> 00:37:47.475
They're all in the Adam
Namespace, and they come back

00:37:47.475 --> 00:37:48.075
in the responses.

00:37:48.075 --> 00:37:55.830
ANDREW: And I actually thought
that was supposed to indicate

00:37:55.830 --> 00:37:58.950
how fresh the data was.

00:37:58.950 --> 00:38:01.870
not when the data was changed
in Google's database.

00:38:05.882 --> 00:38:08.300
It was a long time ago that I
looked at that particular

00:38:08.300 --> 00:38:15.180
thing, but I thought that was
to indicate for like if you

00:38:15.180 --> 00:38:18.080
had a client that was getting
multiple pieces of data or

00:38:18.080 --> 00:38:19.550
interacting in some way.

00:38:19.550 --> 00:38:23.300
So the current date-time might
actually be right in that

00:38:23.300 --> 00:38:27.600
case, or at least at the
date-time of the request

00:38:27.600 --> 00:38:32.438
DAN HERMES: Like some crawl to
a product page, you mean?

00:38:32.438 --> 00:38:33.140
ANDREW: No.

00:38:33.140 --> 00:38:37.050
I was thinking like if you do
an API request and it comes

00:38:37.050 --> 00:38:40.490
back with a time stamp on the
response, I thought that was a

00:38:40.490 --> 00:38:49.380
time stamp for how fresh the
data in the response was, not

00:38:49.380 --> 00:38:52.105
when the data changed in
Google's database.

00:38:55.686 --> 00:38:59.450
LUKE: I guess it doesn't
matter that much.

00:38:59.450 --> 00:39:02.060
I probably should let you know,
Danny, if that's the

00:39:02.060 --> 00:39:05.390
case, that it is giving you the
current date-time in case

00:39:05.390 --> 00:39:08.770
your engineers had really meant
that field to mean the

00:39:08.770 --> 00:39:12.470
last time it was updated in your
system just in case it

00:39:12.470 --> 00:39:13.220
comes up in the future.

00:39:13.220 --> 00:39:17.000
DAN HERMES: Let me
experiment here.

00:39:17.000 --> 00:39:24.550
I'm going to use our demo, and
actually just make a request

00:39:24.550 --> 00:39:26.300
and find out what happens.

00:39:26.300 --> 00:39:28.065
I will share the screen
in a second.

00:39:32.400 --> 00:39:34.030
Actually, no I won't.

00:39:34.030 --> 00:39:38.540
I don't want to reveal my
account ID, unfortunately.

00:39:38.540 --> 00:39:39.790
Sorry.

00:39:44.050 --> 00:39:46.175
CAROLINE: I had a pen
all ready, too.

00:39:46.175 --> 00:39:48.690
DAN HERMES: Actually,
it goes on YouTube,

00:39:48.690 --> 00:39:50.960
so it's never gone.

00:39:50.960 --> 00:39:55.990
ANDREW: I think it might be
relevant to mention that the

00:39:55.990 --> 00:39:59.545
account IDs, I know everybody
in the forum spends a lot of

00:39:59.545 --> 00:40:00.210
time trying to hide them.

00:40:00.210 --> 00:40:03.720
They're actually not
very secret.

00:40:03.720 --> 00:40:06.662
You could get them off of
the Google merchant--

00:40:06.662 --> 00:40:13.970
you can get them off of
the shopping search.

00:40:13.970 --> 00:40:16.720
And actually, they're also
somewhat sequential.

00:40:16.720 --> 00:40:23.790
So you can kind of guess, like
the last number has some

00:40:23.790 --> 00:40:26.625
repetition in it, but the rest
of them are pretty sequential.

00:40:29.930 --> 00:40:32.910
But yeah, I know there's people
who are like, I don't

00:40:32.910 --> 00:40:33.545
wanna know--

00:40:33.545 --> 00:40:35.830
I don't want people who know
what I've been posting.

00:40:38.536 --> 00:40:43.610
DAN HERMES: Yeah, so I am
noticing that the updated time

00:40:43.610 --> 00:40:47.545
stamp reflects the current time,
and the published time

00:40:47.545 --> 00:40:49.350
stamp did not change.

00:40:49.350 --> 00:40:52.484
But I don't know what the
implications of that are.

00:40:52.484 --> 00:40:58.130
And I don't see a posted time
stamp, but this account

00:40:58.130 --> 00:41:03.640
doesn't really have anything
posted, so suspicion confirmed

00:41:03.640 --> 00:41:05.113
to a degree.

00:41:12.480 --> 00:41:14.400
So, do we have any other
questions, or are we

00:41:14.400 --> 00:41:16.482
going to wrap up?

00:41:16.482 --> 00:41:19.380
MALE SPEAKER: Danny, just
a quick one about OAuth.

00:41:19.380 --> 00:41:20.630
ANDREW: Thanks.

00:41:23.070 --> 00:41:24.330
MALE SPEAKER: Sorry,
Daniel, sorry.

00:41:24.330 --> 00:41:25.880
Just a quick question
about the OAuth.

00:41:25.880 --> 00:41:27.920
I've had a quick look at
the documentation.

00:41:27.920 --> 00:41:30.880
It's great you've got it
in the PHP, OAuth 2.0.

00:41:30.880 --> 00:41:33.960
I just had a glance at the Java,
and it says coming soon.

00:41:33.960 --> 00:41:34.680
DAN HERMES: Yes.

00:41:34.680 --> 00:41:38.190
So, I didn't write
the Java one.

00:41:38.190 --> 00:41:39.790
And that was actually
in reference to

00:41:39.790 --> 00:41:42.130
OAuth 1.0, I assume.

00:41:42.130 --> 00:41:44.360
It's on my list of
things to do.

00:41:44.360 --> 00:41:47.580
I just finished the other three
guides, because they

00:41:47.580 --> 00:41:50.590
didn't exist. The Java one
has existed for months.

00:41:50.590 --> 00:41:51.760
MALE SPEAKER: It's OK.

00:41:51.760 --> 00:41:53.590
It was just a comment, really.

00:41:53.590 --> 00:41:54.840
I wasn't chasing you
or anything.

00:41:57.270 --> 00:41:58.870
DAN HERMES: I don't know if
you're using the client

00:41:58.870 --> 00:42:05.840
library or which client library
you're using, but they

00:42:05.840 --> 00:42:08.475
have instructions within
the source.

00:42:08.475 --> 00:42:12.210
So if you're using the Google
API Java client or whatever.

00:42:12.210 --> 00:42:15.610
I can't remember the name 100%
off the top of my head, but if

00:42:15.610 --> 00:42:20.780
you're using that one and you go
to the wiki, there's a long

00:42:20.780 --> 00:42:24.968
OAuth to wiki explaining exactly
what you want to do.

00:42:24.968 --> 00:42:25.775
MALE SPEAKER: Thanks.

00:42:25.775 --> 00:42:27.025
DAN HERMES: Sure.

00:42:29.510 --> 00:42:30.370
All righty.

00:42:30.370 --> 00:42:33.810
Well, I'll see you guys
again in two weeks.

00:42:33.810 --> 00:42:38.310
I will make an announcement
relatively soon whether or not

00:42:38.310 --> 00:42:42.330
I'll be having somebody
as a guest star.

00:42:42.330 --> 00:42:48.650
And I will post some of these
questions that we had, like

00:42:48.650 --> 00:42:52.410
this published or not question
and what the relevance of the

00:42:52.410 --> 00:42:58.890
keys are in server-to-server
things, and then also about

00:42:58.890 --> 00:43:03.365
getting an approval for an MCA
without an e-commerce site.

00:43:03.365 --> 00:43:05.650
CAROLINE: Yeah, I'll send you
the email I have just so you

00:43:05.650 --> 00:43:07.545
have whatever you're
looking for.

00:43:07.545 --> 00:43:08.520
DAN HERMES: All righty.

00:43:08.520 --> 00:43:09.430
CAROLINE: Thanks, Danny.

00:43:09.430 --> 00:43:10.860
DAN HERMES: Have a nice
day, everybody.

00:43:10.860 --> 00:43:12.110
See you.

