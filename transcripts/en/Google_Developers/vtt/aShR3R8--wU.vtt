WEBVTT
Kind: captions
Language: en

00:00:09.750 --> 00:00:11.990
KALYAN REDDY: Welcome to Apps
Script Crash Course.

00:00:11.990 --> 00:00:13.750
My name is Kalyan Reddy,
and this is my

00:00:13.750 --> 00:00:15.570
co-worker, Arun Nagarajan.

00:00:15.570 --> 00:00:18.020
And today, we're going to be
talking about ScriptDb.

00:00:18.020 --> 00:00:20.680
We're going to be taking a deep
dive into some of the

00:00:20.680 --> 00:00:23.760
features to tell you all about
the different areas that you

00:00:23.760 --> 00:00:26.130
can focus in and show
you some examples.

00:00:26.130 --> 00:00:26.800
ARUN NAGARAJAN: Excellent.

00:00:26.800 --> 00:00:27.400
Thank you.

00:00:27.400 --> 00:00:28.050
Thank you very much.

00:00:28.050 --> 00:00:30.940
So what I would like to do is
start off with just some

00:00:30.940 --> 00:00:33.610
introductory slides, kind
of set the stage.

00:00:33.610 --> 00:00:36.900
show a little bit about what
the context of ScriptDb is.

00:00:36.900 --> 00:00:39.160
Then we'll look at some of the
tutorials we already have,

00:00:39.160 --> 00:00:40.610
highlight some of the important
things that you

00:00:40.610 --> 00:00:41.270
should know.

00:00:41.270 --> 00:00:42.770
And we'll show some
of the important

00:00:42.770 --> 00:00:43.890
documentation elements.

00:00:43.890 --> 00:00:46.190
And then, we'll get into the
script editor and start

00:00:46.190 --> 00:00:48.720
writing some interesting
examples, and then maybe even

00:00:48.720 --> 00:00:50.890
look at some other things you
can do with ScriptDb.

00:00:50.890 --> 00:00:51.980
Sound good?

00:00:51.980 --> 00:00:52.610
KALYAN REDDY: Sounds good.

00:00:52.610 --> 00:00:54.010
ARUN NAGARAJAN: Excellent.

00:00:54.010 --> 00:00:57.880
So let me just kick off things
on my presentation here.

00:00:57.880 --> 00:01:01.890
So ScriptDb was originally
announced at Google I/O last

00:01:01.890 --> 00:01:03.760
year, in 2012.

00:01:03.760 --> 00:01:05.050
So it's less than a year old.

00:01:05.050 --> 00:01:07.430
But it's actually getting a
good amount of feature set

00:01:07.430 --> 00:01:08.740
that it has, and you
can do a lot of

00:01:08.740 --> 00:01:10.340
interesting things with it.

00:01:10.340 --> 00:01:12.430
So it's a JavaScript
Object database.

00:01:12.430 --> 00:01:15.060
So what you're able to do is
just take native JavaScript

00:01:15.060 --> 00:01:18.330
Objects and dump it right
into this database,

00:01:18.330 --> 00:01:19.740
which is really powerful.

00:01:19.740 --> 00:01:22.340
Every script project gets
its own database.

00:01:22.340 --> 00:01:27.530
So you're able to have a scope
that is wide to the entire

00:01:27.530 --> 00:01:28.520
script that you have.

00:01:28.520 --> 00:01:32.010
So multiple users can share
the same database.

00:01:32.010 --> 00:01:34.750
You can actually segment out
data by having multiple

00:01:34.750 --> 00:01:37.260
different properties for
different users.

00:01:37.260 --> 00:01:39.750
But it's kind of scoped
at the script level.

00:01:39.750 --> 00:01:42.070
The API, I think, will be
extremely simple and

00:01:42.070 --> 00:01:45.910
straightforward to use, as
you'll see for Create, Read,

00:01:45.910 --> 00:01:48.220
Update, Deletes, and
things like that.

00:01:48.220 --> 00:01:51.360
And the paradigm be very
similar to other NoSQL

00:01:51.360 --> 00:01:53.490
databases that you
may be used to.

00:01:53.490 --> 00:01:55.370
KALYAN REDDY: Can you an example
of a NoSQL database,

00:01:55.370 --> 00:01:56.470
or how that differs?

00:01:56.470 --> 00:01:56.840
ARUN NAGARAJAN: Yeah.

00:01:56.840 --> 00:02:00.680
So NoSQL is not an official term
or anything like that.

00:02:00.680 --> 00:02:03.040
But it's something that people
have started to use as far as

00:02:03.040 --> 00:02:04.340
when something is
non-relational.

00:02:04.340 --> 00:02:07.030
There's actually a really good
Wikipedia page on it.

00:02:07.030 --> 00:02:08.630
I highly recommend it.

00:02:08.630 --> 00:02:11.710
A lot of good examples in here
about what a NoSQL database

00:02:11.710 --> 00:02:14.290
is, what the different types
of them are, object store,

00:02:14.290 --> 00:02:16.080
graph stores, key
value stores.

00:02:16.080 --> 00:02:19.520
We're more on the document
store level of things.

00:02:19.520 --> 00:02:23.560
But a popular one is
MongoDB, CouchDB.

00:02:23.560 --> 00:02:25.680
There really is quite
a few variations

00:02:25.680 --> 00:02:28.110
of these NoSQL databases.

00:02:28.110 --> 00:02:30.710
And the idea is that you're
programming, and you're

00:02:30.710 --> 00:02:34.010
working with objects in most
programming languages.

00:02:34.010 --> 00:02:36.430
And you want to be able to
just take that object and

00:02:36.430 --> 00:02:39.630
store it, rather than have to
convert that into a relational

00:02:39.630 --> 00:02:41.440
data set and save it.

00:02:41.440 --> 00:02:43.800
So that's the idea behind
NoSQL databases.

00:02:43.800 --> 00:02:46.080
KALYAN REDDY: I can see how it
would be simpler to use and

00:02:46.080 --> 00:02:47.070
potentially more powerful.

00:02:47.070 --> 00:02:47.350
ARUN NAGARAJAN: Right.

00:02:47.350 --> 00:02:51.410
So it kind of takes away the
normalization, denormalization

00:02:51.410 --> 00:02:54.200
of an object from a database
to a programming

00:02:54.200 --> 00:02:55.180
layer, and then back.

00:02:55.180 --> 00:02:57.420
So it saves you that overhead.

00:02:57.420 --> 00:03:01.000
But it is sort of a newer
phenomenon, so a lot of

00:03:01.000 --> 00:03:04.040
people, when they come to a
NoSQL data store, they're

00:03:04.040 --> 00:03:06.290
looking for, wait, how
do I do joins?

00:03:06.290 --> 00:03:08.040
How do I do updates?

00:03:08.040 --> 00:03:08.870
Things like that.

00:03:08.870 --> 00:03:11.560
So it is a little bit
of a learning curve.

00:03:11.560 --> 00:03:14.795
But I think it's a
very short curve.

00:03:14.795 --> 00:03:16.830
And a lot of different
technology is going that way.

00:03:16.830 --> 00:03:19.450
So it's a very useful thing.

00:03:19.450 --> 00:03:22.460
One of the first things that
folks have to get used to is,

00:03:22.460 --> 00:03:23.740
what is an object?

00:03:23.740 --> 00:03:27.030
So in JavaScript, that's sort
of a nebulous thing.

00:03:27.030 --> 00:03:29.140
It's not really known to be an
object-oriented language.

00:03:29.140 --> 00:03:32.110
But there are certainly
objects in JavaScript.

00:03:32.110 --> 00:03:34.580
So you're able to do a lot of
interesting things here, where

00:03:34.580 --> 00:03:38.280
you can have what's called
a JavaScript Map Object.

00:03:38.280 --> 00:03:41.320
So this example here
is an object.

00:03:41.320 --> 00:03:42.640
So that's employee data.

00:03:42.640 --> 00:03:44.120
It has a type property.

00:03:44.120 --> 00:03:45.750
You can see that it's got an
employee ID, which is a

00:03:45.750 --> 00:03:46.810
numeric value.

00:03:46.810 --> 00:03:48.040
It's got a few strings.

00:03:48.040 --> 00:03:50.930
Names, department IDs,
also numeric.

00:03:50.930 --> 00:03:54.440
So that is an object.

00:03:54.440 --> 00:03:57.430
So this is a map we call,
name and value.

00:03:57.430 --> 00:04:01.140
What are not objects are things
like just a number.

00:04:01.140 --> 00:04:01.950
A string.

00:04:01.950 --> 00:04:05.250
Even an array itself is not a
map object that you can sort

00:04:05.250 --> 00:04:07.280
into ScriptDb.

00:04:07.280 --> 00:04:08.690
So that's important.

00:04:08.690 --> 00:04:11.470
A lot of folks try to just
say, OK, I have an array.

00:04:11.470 --> 00:04:12.650
I wanted to store it.

00:04:12.650 --> 00:04:14.180
Can I just dump it
into ScriptDb?

00:04:14.180 --> 00:04:17.490
Well, you have to structure it
in a way that looks and feels

00:04:17.490 --> 00:04:18.420
like a map object.

00:04:18.420 --> 00:04:20.899
So that's important.

00:04:20.899 --> 00:04:23.300
So let's take a look at a
couple examples here.

00:04:23.300 --> 00:04:25.480
And we'll come back to that, and
we'll actually run these

00:04:25.480 --> 00:04:27.540
so that you get a sense for
how that looks and feels.

00:04:27.540 --> 00:04:31.070
But here's a very simple example
of taking that object

00:04:31.070 --> 00:04:35.170
that we showed and being able to
store that into a database.

00:04:35.170 --> 00:04:38.470
So you store it as db.save.

00:04:38.470 --> 00:04:41.550
So this is sort of the
reference, ScriptDb. getMyDb.

00:04:41.550 --> 00:04:43.840
So you'll see that line
very frequently in

00:04:43.840 --> 00:04:45.450
all ScriptDb examples.

00:04:45.450 --> 00:04:47.470
And what that basically gets you
is the reference for the

00:04:47.470 --> 00:04:50.390
current projects, ScriptDb.

00:04:50.390 --> 00:04:53.430
And you can just say .save,
and it saves the object.

00:04:53.430 --> 00:04:54.600
And then you can actually
retrieve the

00:04:54.600 --> 00:04:55.950
ID if you care for.

00:04:55.950 --> 00:04:57.780
KALYAN REDDY: So just to
clarify, we're not

00:04:57.780 --> 00:04:59.740
specifically formatting
or modifying the

00:04:59.740 --> 00:05:00.880
object in any way.

00:05:00.880 --> 00:05:02.850
It just the original object
that we constructed?

00:05:02.850 --> 00:05:03.790
ARUN NAGARAJAN: Precisely.

00:05:03.790 --> 00:05:07.180
So once you have an object that
you like the shape of,

00:05:07.180 --> 00:05:09.610
and you're able to pass it
around to different functions

00:05:09.610 --> 00:05:13.730
that you have, or do other
things with it, then you stop

00:05:13.730 --> 00:05:15.970
worrying about, OK,
can is this an

00:05:15.970 --> 00:05:17.740
appropriate mode to store?

00:05:17.740 --> 00:05:22.410
You don't have to worry about
even having a unique number of

00:05:22.410 --> 00:05:23.970
properties for every object.

00:05:23.970 --> 00:05:28.080
So I can add a new property
here for a new object for

00:05:28.080 --> 00:05:30.920
manager and not worry about
existing objects.

00:05:30.920 --> 00:05:33.900
So that's a really nice thing
too, is that your ScriptDb can

00:05:33.900 --> 00:05:35.010
be very heterogeneous.

00:05:35.010 --> 00:05:38.290
So you can have five employees
without a manager.

00:05:38.290 --> 00:05:42.150
And you decide that out of
policy, new employees need to

00:05:42.150 --> 00:05:43.270
have a manager property.

00:05:43.270 --> 00:05:44.730
And then you can
go and do that.

00:05:44.730 --> 00:05:48.560
In relational databases, you
have to alter your schema, and

00:05:48.560 --> 00:05:51.500
you have to say, this now
has a default of null,

00:05:51.500 --> 00:05:53.390
and things like that.

00:05:53.390 --> 00:05:54.380
Nothing to worry about
like that.

00:05:54.380 --> 00:05:56.200
KALYAN REDDY: Reduce the
overhead and the complexity.

00:05:56.200 --> 00:05:56.670
ARUN NAGARAJAN: Exactly.

00:05:56.670 --> 00:05:59.570
So it just kind of makes it very
agile, and you can start

00:05:59.570 --> 00:06:01.670
storing things very quickly,
without having to worry about

00:06:01.670 --> 00:06:03.630
the sort of schema, which
is very rigid

00:06:03.630 --> 00:06:06.520
in relational databases.

00:06:06.520 --> 00:06:07.840
And had a lot of experience
with that.

00:06:07.840 --> 00:06:10.190
And I can say that there's
a time and place for it.

00:06:10.190 --> 00:06:12.540
But for most things in Apps
Script, I would not

00:06:12.540 --> 00:06:14.800
really go that way.

00:06:14.800 --> 00:06:15.410
Great.

00:06:15.410 --> 00:06:18.140
So let's take a look at--
so we saved it.

00:06:18.140 --> 00:06:19.450
How do you retrieve it?

00:06:19.450 --> 00:06:21.030
The querying syntax
is actually super

00:06:21.030 --> 00:06:21.850
straightforward.

00:06:21.850 --> 00:06:24.170
So again, you get the
database reference.

00:06:24.170 --> 00:06:26.045
And the querying syntax
is basically also

00:06:26.045 --> 00:06:27.680
an object by itself.

00:06:27.680 --> 00:06:29.510
And you query by example.

00:06:29.510 --> 00:06:32.110
So essentially, you specify a
subset of the properties that

00:06:32.110 --> 00:06:33.740
you want to filter it by.

00:06:33.740 --> 00:06:37.655
So in this case, I'm trying to
retrieve all employees with

00:06:37.655 --> 00:06:39.550
the employee ID of one.

00:06:39.550 --> 00:06:42.680
And if this has any matches,
it'll return iterator.

00:06:42.680 --> 00:06:45.040
So iterator is a concept
that basically

00:06:45.040 --> 00:06:46.890
fetches as you go along.

00:06:46.890 --> 00:06:49.360
So it optimizes the
fetch times.

00:06:49.360 --> 00:06:51.660
So you don't try to load
everything up front.

00:06:51.660 --> 00:06:54.330
You actually get a reference to
what's called an iterator.

00:06:54.330 --> 00:06:56.710
And then you can say, well,
it's got more, keep

00:06:56.710 --> 00:06:57.530
giving it to me.

00:06:57.530 --> 00:07:00.060
So it kind of optimizes the
underlying implementation

00:07:00.060 --> 00:07:02.870
rather than you having to wait
for the whole results set to

00:07:02.870 --> 00:07:06.180
be aggregated and collected into
a single collection that

00:07:06.180 --> 00:07:07.950
you can immediately start
operating on.

00:07:07.950 --> 00:07:10.540
This allows you to do things
like, well, if I find the

00:07:10.540 --> 00:07:12.930
object I care for, well, let
me just get out of it.

00:07:12.930 --> 00:07:14.690
I don't care for the
whole results sent

00:07:14.690 --> 00:07:15.570
back from the disk.

00:07:15.570 --> 00:07:15.960
KALYAN REDDY: OK.

00:07:15.960 --> 00:07:18.190
So you can just break
out of that loop.

00:07:18.190 --> 00:07:18.590
ARUN NAGARAJAN: Exactly.

00:07:18.590 --> 00:07:21.230
So the iterator concept is
actually quite popular in Java

00:07:21.230 --> 00:07:23.720
and other programming languages
which may have seen.

00:07:23.720 --> 00:07:25.320
So here's how you get it.

00:07:25.320 --> 00:07:26.350
I got the object.

00:07:26.350 --> 00:07:28.810
And then notice that it's
immediately an object.

00:07:28.810 --> 00:07:32.570
So I don't have to say,
JSON.stringify, or JSON.parse,

00:07:32.570 --> 00:07:33.720
or anything like that.

00:07:33.720 --> 00:07:36.040
You actually get an actual
object, and I can just start

00:07:36.040 --> 00:07:37.600
doing the dot notation
on it to get the

00:07:37.600 --> 00:07:38.960
properties I care for.

00:07:38.960 --> 00:07:40.700
So I can say current.firstname,

00:07:40.700 --> 00:07:42.200
current.lastname.

00:07:42.200 --> 00:07:43.180
And I could go along.

00:07:43.180 --> 00:07:45.250
So it's quite powerful
in that regard.

00:07:45.250 --> 00:07:46.590
KALYAN REDDY: And we were
talking about the

00:07:46.590 --> 00:07:48.160
heterogeneous objects before.

00:07:48.160 --> 00:07:50.570
Querying something, for example,
employee ID one.

00:07:50.570 --> 00:07:52.860
It'll get both types if you
have multiple types.

00:07:52.860 --> 00:07:53.020
ARUN NAGARAJAN: That's right.

00:07:53.020 --> 00:07:57.960
Yes, if I have two objects with
employee ID one by some

00:07:57.960 --> 00:08:01.220
reason, one of them has a
manager, another one doesn't

00:08:01.220 --> 00:08:03.010
have a manager, I'll get
both of them back.

00:08:03.010 --> 00:08:07.620
So it doesn't have to be
a particular type.

00:08:07.620 --> 00:08:10.420
So ScriptDb is not the only
way you can store

00:08:10.420 --> 00:08:12.100
data in Apps Script.

00:08:12.100 --> 00:08:13.570
There's actually quite
a few ways.

00:08:13.570 --> 00:08:16.060
And there was actually great
session at Google I/O last

00:08:16.060 --> 00:08:18.780
year, where we talked about all
the different mechanisms.

00:08:18.780 --> 00:08:21.650
Just to highlight some of the
important ones, JDBC.

00:08:21.650 --> 00:08:25.300
So if you have a relational
database already with lots of

00:08:25.300 --> 00:08:28.380
data in it, you may want to
to continue using that.

00:08:28.380 --> 00:08:30.760
Or if you have a lot of data
that you want to be able to

00:08:30.760 --> 00:08:33.940
access from other systems
outside of Apps Script, then

00:08:33.940 --> 00:08:35.400
JDBC make sense.

00:08:35.400 --> 00:08:37.530
Spreadsheets are super
lightweight.

00:08:37.530 --> 00:08:39.789
They have a UI, a tabular
UI to go with.

00:08:39.789 --> 00:08:40.580
So it's great.

00:08:40.580 --> 00:08:43.710
However, for querying, there's
no such syntax of being able

00:08:43.710 --> 00:08:47.080
to say, give me all rows where
employee ID is one.

00:08:47.080 --> 00:08:47.380
Right?

00:08:47.380 --> 00:08:49.790
So that's not so nice
about spreadsheets.

00:08:49.790 --> 00:08:51.420
You can actually store
it in files.

00:08:51.420 --> 00:08:55.820
So drive API, the docs list API,
allows you to store and

00:08:55.820 --> 00:08:58.750
retrieve files and content
of a file pretty quickly.

00:08:58.750 --> 00:09:01.086
But again, not really
structured, so you

00:09:01.086 --> 00:09:02.800
can work with it.

00:09:02.800 --> 00:09:05.820
A couple of name value pair
type storage systems.

00:09:05.820 --> 00:09:07.830
ScriptProperties and
UserProperties, which is good

00:09:07.830 --> 00:09:10.890
for things like session IDs,
some lightweight preferences,

00:09:10.890 --> 00:09:12.020
and things like that.

00:09:12.020 --> 00:09:13.940
And then, you can actually
decide to make calls out to

00:09:13.940 --> 00:09:15.930
external API to store things.

00:09:15.930 --> 00:09:18.100
Just like JDBC, you
may want to use--

00:09:18.100 --> 00:09:20.540
App Engine has this concept
that we're working on

00:09:20.540 --> 00:09:23.950
releasing, which is in limited
products to test right now.

00:09:23.950 --> 00:09:25.720
We announced it at I/O
last year as well.

00:09:25.720 --> 00:09:26.910
Called Cloud Endpoints.

00:09:26.910 --> 00:09:29.860
So you can actually publish an
API, a rest API, where I can

00:09:29.860 --> 00:09:34.150
send up data and get storage
on the server side there.

00:09:34.150 --> 00:09:35.570
Again, those are the
different options.

00:09:35.570 --> 00:09:38.580
But I think ScriptDb is sort
of the baked in one that is

00:09:38.580 --> 00:09:39.780
the easiest to get started.

00:09:39.780 --> 00:09:43.030
KALYAN REDDY: What are some
advantages, let's say, versus

00:09:43.030 --> 00:09:45.160
using it on a spreadsheet?

00:09:45.160 --> 00:09:49.080
ARUN NAGARAJAN: So I think my
favorite thing is that--

00:09:49.080 --> 00:09:50.870
and a lot of people prefer
spreadsheets

00:09:50.870 --> 00:09:52.400
because it's got a UI.

00:09:52.400 --> 00:09:52.830
Right?

00:09:52.830 --> 00:09:55.610
But as I'll show in a little,
you can actually solve that.

00:09:55.610 --> 00:09:57.480
You can actually kind of decide
that you want to build

00:09:57.480 --> 00:09:58.760
a little UI yourself.

00:09:58.760 --> 00:10:02.370
So people oftentimes gravitate
towards storing things in a

00:10:02.370 --> 00:10:05.780
spreadsheet, because I can
easily edit it, or I can

00:10:05.780 --> 00:10:07.810
easily visualize it.

00:10:07.810 --> 00:10:09.350
But we can work around that.

00:10:09.350 --> 00:10:12.520
The querying is I think the
biggest reason that I would

00:10:12.520 --> 00:10:13.730
prefer ScriptDb.

00:10:13.730 --> 00:10:17.630
You can actually build very
complex queries with sorts,

00:10:17.630 --> 00:10:23.820
with between operators, with
multiple conditions, and get

00:10:23.820 --> 00:10:26.860
the exact record you care
for as an object.

00:10:26.860 --> 00:10:31.850
Rather than in a spreadsheet,
you get, it's essentially a

00:10:31.850 --> 00:10:33.180
dumb table in some ways.

00:10:33.180 --> 00:10:34.893
And you have to iterate through
it and find the rows

00:10:34.893 --> 00:10:38.250
you care for, which
is not so great.

00:10:38.250 --> 00:10:42.130
So there are a lot of resources
we have on ScriptDb.

00:10:42.130 --> 00:10:44.830
I'll just kind of quickly walk
through some of the tutorials

00:10:44.830 --> 00:10:45.760
that we have.

00:10:45.760 --> 00:10:48.400
So if you go to our developer
page, developers.googl

00:10:48.400 --> 00:10:53.140
e.com/apps-script, and then
ScriptDb, one word, it's

00:10:53.140 --> 00:10:54.740
actually a really
good tutorial.

00:10:54.740 --> 00:10:56.500
And when I was new to the
team, this was actually

00:10:56.500 --> 00:11:00.830
extremely helpful, where I was
able to get a very quick lay

00:11:00.830 --> 00:11:03.520
the land of all things
ScriptDb-related.

00:11:03.520 --> 00:11:05.680
So it's actually pretty
well-organized as well.

00:11:05.680 --> 00:11:07.330
So how do you save data?

00:11:07.330 --> 00:11:08.800
How do you modify data?

00:11:08.800 --> 00:11:10.890
How do you do things
like deleting?

00:11:10.890 --> 00:11:13.440
Querying the database,
comparison operators.

00:11:13.440 --> 00:11:16.340
And we'll actually kind of look
at a few of these things.

00:11:16.340 --> 00:11:18.490
Some really good examples
that you can copy and

00:11:18.490 --> 00:11:20.750
paste and get going.

00:11:20.750 --> 00:11:23.450
Let me point out a couple of
pretty interesting ones.

00:11:23.450 --> 00:11:25.640
So here's an interesting one.

00:11:25.640 --> 00:11:30.070
So you can see that in this
query right here, we're doing

00:11:30.070 --> 00:11:35.130
db.query, address, any
of these objects.

00:11:35.130 --> 00:11:39.440
So you can say, give me results
where the adverse

00:11:39.440 --> 00:11:42.710
object, which itself is a
composite object, is Jackson,

00:11:42.710 --> 00:11:44.460
Mississippi or New
York, New York.

00:11:44.460 --> 00:11:44.740
KALYAN REDDY: OK.

00:11:44.740 --> 00:11:47.790
So basically, we saw an example
of a query, where we

00:11:47.790 --> 00:11:51.180
gave it multiple different
objects.

00:11:51.180 --> 00:11:53.250
It's like, give me something
with employ ID one, and match

00:11:53.250 --> 00:11:54.890
it with something else that
has the same thing.

00:11:54.890 --> 00:11:55.180
ARUN NAGARAJAN: Right.

00:11:55.180 --> 00:11:56.280
Exactly.

00:11:56.280 --> 00:11:58.260
And it can actually
go further, where

00:11:58.260 --> 00:11:59.960
it's not just inclusive.

00:11:59.960 --> 00:12:04.070
It can say exclusive as well,
and not in type scenario.

00:12:04.070 --> 00:12:06.610
So really a lot of the semantics
of what you can do

00:12:06.610 --> 00:12:10.730
with SQL with where
in, where not in.

00:12:10.730 --> 00:12:13.710
Things like that, you're able to
do pretty quickly with the

00:12:13.710 --> 00:12:15.190
ScriptDb syntax as well.

00:12:15.190 --> 00:12:18.780
So you can say, not Texas
in this case.

00:12:18.780 --> 00:12:21.320
And we have a pretty robust
set of comparison

00:12:21.320 --> 00:12:22.150
operators as well.

00:12:22.150 --> 00:12:23.530
So it's not just literal
matches.

00:12:23.530 --> 00:12:26.050
You could say numeric
comparisons.

00:12:26.050 --> 00:12:29.130
So you can say, greater than
21, between 13 and 20.

00:12:29.130 --> 00:12:31.970
So quite a pretty robust
set of things there.

00:12:31.970 --> 00:12:33.220
Sorting and paging.

00:12:33.220 --> 00:12:37.070
So pagination is something that
you end up with, you have

00:12:37.070 --> 00:12:39.920
to deal with, when you have
just hundreds of rows,

00:12:39.920 --> 00:12:41.270
thousand of rows.

00:12:41.270 --> 00:12:43.550
In a lot of cases, you
may have reached the

00:12:43.550 --> 00:12:45.390
limit, which is 50,000.

00:12:45.390 --> 00:12:45.710
Right?

00:12:45.710 --> 00:12:49.430
So you have to worry about
making sure that you get the

00:12:49.430 --> 00:12:51.900
right set back in
the beginning.

00:12:51.900 --> 00:12:54.440
So sorting becomes
very important.

00:12:54.440 --> 00:12:55.900
Show the most relevant
data first.

00:12:55.900 --> 00:12:58.190
But then, if the user cares for
more, you can hit the Next

00:12:58.190 --> 00:13:00.820
button and have that called back
to the server, and then

00:13:00.820 --> 00:13:02.900
fetch the next 100 items.

00:13:02.900 --> 00:13:06.550
KALYAN REDDY: And even if your
initial query returns a lot of

00:13:06.550 --> 00:13:09.020
results, you might not want
them all at the same time.

00:13:09.020 --> 00:13:11.530
We give you a certain number,
and if you want more, you can

00:13:11.530 --> 00:13:13.300
paginate that query as well.

00:13:13.300 --> 00:13:13.400
ARUN NAGARAJAN: That's right.

00:13:13.400 --> 00:13:14.040
That's right.

00:13:14.040 --> 00:13:14.460
Yeah.

00:13:14.460 --> 00:13:18.520
And another thing that I like
about this tutorial is that it

00:13:18.520 --> 00:13:21.580
kind of talks about, how
do you apply ScriptDb?

00:13:21.580 --> 00:13:24.380
So a lot of folks, like I
mention, are coming from a

00:13:24.380 --> 00:13:25.890
relational database world.

00:13:25.890 --> 00:13:28.950
So this actually talks about,
well, how would tables

00:13:28.950 --> 00:13:30.670
translate in ScriptDb?

00:13:30.670 --> 00:13:31.940
Right?

00:13:31.940 --> 00:13:34.680
How do you deal with things
like transactions?

00:13:34.680 --> 00:13:37.270
This is something that we have
talked about a little bit,

00:13:37.270 --> 00:13:42.600
which is that in a multi-user
scenario, if you're using

00:13:42.600 --> 00:13:45.410
ScriptDb, by itself, it's
not guaranteed to be

00:13:45.410 --> 00:13:46.290
transactional.

00:13:46.290 --> 00:13:49.130
By itself, it's not guaranteed
to be atomic.

00:13:49.130 --> 00:13:50.790
You have to bake
some things in.

00:13:50.790 --> 00:13:54.100
Just say, OK, for this
particular time period, you

00:13:54.100 --> 00:13:55.070
get the lock.

00:13:55.070 --> 00:13:57.440
We have a very robust service
called LockService.

00:13:57.440 --> 00:13:59.880
You're able to get the lock,
write the object you want to,

00:13:59.880 --> 00:14:01.110
and then release the lock.

00:14:01.110 --> 00:14:03.100
And then the next
item comes in.

00:14:03.100 --> 00:14:05.880
The same applies for deletes
and updates as well.

00:14:05.880 --> 00:14:08.160
So it's actually quite a
powerful way to do the

00:14:08.160 --> 00:14:11.190
transactions in the way you
care for, with the timeout

00:14:11.190 --> 00:14:14.610
settings you care for, rather
than just inherent, built-in

00:14:14.610 --> 00:14:17.880
versions, which may not be
appropriate for all scenarios.

00:14:17.880 --> 00:14:19.240
KALYAN REDDY: So it's a great
way to take two simple

00:14:19.240 --> 00:14:20.760
services that we offer
and combine them.

00:14:20.760 --> 00:14:21.320
ARUN NAGARAJAN: Yup.

00:14:21.320 --> 00:14:21.830
Exactly.

00:14:21.830 --> 00:14:24.350
Yeah, the lock service, actually
I think underneath

00:14:24.350 --> 00:14:28.520
the covers, is quite a
technological thing that we

00:14:28.520 --> 00:14:31.780
offer that really makes these
sort of distributed apps very

00:14:31.780 --> 00:14:33.530
easy to build.

00:14:33.530 --> 00:14:36.050
One thing to note is dates.

00:14:36.050 --> 00:14:38.290
So we don't store
dates natively.

00:14:38.290 --> 00:14:40.630
You have to tell us what
time zone it's in.

00:14:40.630 --> 00:14:42.460
You have to tell us how
you want to store it.

00:14:42.460 --> 00:14:44.800
The simplest would be just to
get time, which will get the

00:14:44.800 --> 00:14:47.610
milliseconds [INAUDIBLE], which
may not be appropriate

00:14:47.610 --> 00:14:49.020
for you to retrieve back.

00:14:49.020 --> 00:14:53.650
But since JSON doesn't support
dates natively, we have to

00:14:53.650 --> 00:14:56.150
force you to tell us,
OK, what time zone?

00:14:56.150 --> 00:14:58.320
What properties about it
do you want to store?

00:14:58.320 --> 00:15:02.500
You can sort as a numerical
value, or as a

00:15:02.500 --> 00:15:03.840
string value as well.

00:15:03.840 --> 00:15:06.030
So that's something that trips
up some people that I think is

00:15:06.030 --> 00:15:08.270
important to understand.

00:15:08.270 --> 00:15:10.470
What else is relevant here
that I think is quite

00:15:10.470 --> 00:15:11.680
interesting?

00:15:11.680 --> 00:15:13.930
You have a few recipes here
about, how do you copy a

00:15:13.930 --> 00:15:17.490
ScriptDb data from a spreadsheet
to a ScriptDb, and

00:15:17.490 --> 00:15:18.520
then vice versa?

00:15:18.520 --> 00:15:19.850
So I think that's
pretty useful.

00:15:19.850 --> 00:15:21.780
If you start off with a bunch
of starter data in a

00:15:21.780 --> 00:15:26.080
spreadsheet, you can end up in
a ScriptDb very quickly.

00:15:26.080 --> 00:15:26.980
And a couple of things here.

00:15:26.980 --> 00:15:29.510
So here's another section that
I think is relevant, and then

00:15:29.510 --> 00:15:31.680
we'll jump off from
the tutorial.

00:15:31.680 --> 00:15:33.830
How do you compare it
with other systems?

00:15:33.830 --> 00:15:36.840
So Inserts, Updates,
Delete, Queries.

00:15:36.840 --> 00:15:38.540
These are things that
you're use to.

00:15:38.540 --> 00:15:42.440
And these are rather than SQL,
and MySQL, or Oracle, or some

00:15:42.440 --> 00:15:44.280
other system that you
may be used to.

00:15:44.280 --> 00:15:48.870
And there are comparisons to how
it relates to our world.

00:15:48.870 --> 00:15:51.670
So again, I think it's
pretty useful.

00:15:51.670 --> 00:15:52.826
All right.

00:15:52.826 --> 00:15:53.190
Great.

00:15:53.190 --> 00:15:55.540
So there's some quota items as
well towards the bottom.

00:15:55.540 --> 00:15:59.350
So definitely look at that to
understand what some of the

00:15:59.350 --> 00:16:02.100
heuristics are for your
particular account type.

00:16:02.100 --> 00:16:04.040
So certainly, think
through that.

00:16:04.040 --> 00:16:07.760
But I see that for the most
case, since we're destroying

00:16:07.760 --> 00:16:10.290
text, it's extremely efficient,
fast, lightweight,

00:16:10.290 --> 00:16:12.940
that I'm not really worried
about quota for most things

00:16:12.940 --> 00:16:15.090
that I'm working on.

00:16:15.090 --> 00:16:16.750
And the documentation
itself is actually

00:16:16.750 --> 00:16:17.920
fairly robust as well.

00:16:17.920 --> 00:16:20.690
And I'll put a plug
for that as well.

00:16:20.690 --> 00:16:24.080
So hopefully, that kind of gives
you a couple of things

00:16:24.080 --> 00:16:27.210
that I think are relevant to
understand and keep track of.

00:16:27.210 --> 00:16:28.010
KALYAN REDDY: Great.

00:16:28.010 --> 00:16:31.310
So you mentioned earlier that
you could use one ScriptDb in

00:16:31.310 --> 00:16:33.920
a multi-user situation.

00:16:33.920 --> 00:16:35.540
And you said it's tied
to a project.

00:16:35.540 --> 00:16:37.910
So can you clarify that
a little bit?

00:16:37.910 --> 00:16:39.790
Is that tied in with libraries
and anywhere?

00:16:39.790 --> 00:16:40.270
ARUN NAGARAJAN: Yeah.

00:16:40.270 --> 00:16:40.530
Yeah.

00:16:40.530 --> 00:16:46.690
So let's say that you may have
a particular app that one

00:16:46.690 --> 00:16:49.100
interface is a web app, another
interface might be a

00:16:49.100 --> 00:16:51.120
spreadsheet, or a trigger
somewhere.

00:16:51.120 --> 00:16:51.750
Right?

00:16:51.750 --> 00:16:54.470
But you may want the users to
operate on the same data, or

00:16:54.470 --> 00:16:56.370
make that available
across the board.

00:16:56.370 --> 00:16:58.460
So the way you would do
that is a library.

00:16:58.460 --> 00:17:01.640
The library has an instance
of a database.

00:17:01.640 --> 00:17:03.710
Every project has its own
instance of a database.

00:17:03.710 --> 00:17:08.369
We allow for you to pass in the
database to the caller, or

00:17:08.369 --> 00:17:10.814
have the caller pass in its
database into the library.

00:17:10.814 --> 00:17:11.390
KALYAN REDDY: OK.

00:17:11.390 --> 00:17:13.060
ARUN NAGARAJAN: So that's how
you can actually share the

00:17:13.060 --> 00:17:15.880
data between multiple projects,
is using libraries.

00:17:15.880 --> 00:17:20.220
So it can actually kind of share
data in a very robust

00:17:20.220 --> 00:17:24.089
way, either have one copy that
is the master copy, or have

00:17:24.089 --> 00:17:26.300
the children send up its
copy to a parent.

00:17:26.300 --> 00:17:26.730
And things like that.

00:17:26.730 --> 00:17:27.410
KALYAN REDDY: Very cool.

00:17:27.410 --> 00:17:30.730
ARUN NAGARAJAN: So it's some
good recipes around there in

00:17:30.730 --> 00:17:32.270
our tutorials as well.

00:17:32.270 --> 00:17:33.930
So what I'll do now is I'll
actually do a couple of

00:17:33.930 --> 00:17:36.200
examples of how this
looks and feels.

00:17:36.200 --> 00:17:39.330
So I'm just going to copy the
examples that I started with.

00:17:39.330 --> 00:17:41.370
I'm going to copy this guy.

00:17:41.370 --> 00:17:46.110
Come out of the window, and go
to our trusted script editor.

00:17:46.110 --> 00:17:47.360
I'm just going to start with
the blank project.

00:17:50.070 --> 00:17:50.220
OK.

00:17:50.220 --> 00:17:52.210
So I'm just going to
paste that in.

00:17:52.210 --> 00:17:54.030
Save it as ScriptDb demo.

00:17:57.360 --> 00:17:58.070
And there it is.

00:17:58.070 --> 00:17:59.620
So it's a very simple
function.

00:17:59.620 --> 00:18:02.090
Just going to create an
object and store it.

00:18:02.090 --> 00:18:03.880
So I'm going to run it.

00:18:03.880 --> 00:18:07.010
So ScriptDb, since it is
metered, we have to have you

00:18:07.010 --> 00:18:09.260
authorize it.

00:18:09.260 --> 00:18:11.900
Very quick process, similar to
other things that we have.

00:18:11.900 --> 00:18:13.960
You go through that.

00:18:13.960 --> 00:18:14.720
And that's it.

00:18:14.720 --> 00:18:16.460
So it ran.

00:18:16.460 --> 00:18:18.445
We're not doing any UI
here, so I have to

00:18:18.445 --> 00:18:20.010
go to View and Logs.

00:18:20.010 --> 00:18:22.700
And you can see that the
ID is logged here.

00:18:22.700 --> 00:18:27.120
And one thing about this
ScriptDb is that by itself, it

00:18:27.120 --> 00:18:30.230
has no sort of ID or unique
key that it provides other

00:18:30.230 --> 00:18:32.430
than this Get ID special
function.

00:18:32.430 --> 00:18:36.740
So if I run this again, it's
hard to see here, but you

00:18:36.740 --> 00:18:40.070
really have a different ID that
comes back, which means

00:18:40.070 --> 00:18:42.050
that there are two copies
of this employee.

00:18:42.050 --> 00:18:42.310
KALYAN REDDY: OK.

00:18:42.310 --> 00:18:45.420
So this ID is for one specific
object that she stores.

00:18:45.420 --> 00:18:45.680
ARUN NAGARAJAN: Right.

00:18:45.680 --> 00:18:46.220
One instance.

00:18:46.220 --> 00:18:49.610
So since this instance is
reinitialized, so employee

00:18:49.610 --> 00:18:52.780
data got reinitialized, that's
a whole new object as far as

00:18:52.780 --> 00:18:53.650
ScriptDb's concerned.

00:18:53.650 --> 00:18:56.720
If I pass this around, it'll
be the same instance.

00:18:56.720 --> 00:18:58.900
But it's an entirely
different instance.

00:18:58.900 --> 00:18:59.240
Oops.

00:18:59.240 --> 00:19:00.860
Apologize for that.

00:19:00.860 --> 00:19:02.410
Reminder came back up.

00:19:02.410 --> 00:19:02.820
OK.

00:19:02.820 --> 00:19:03.090
Great.

00:19:03.090 --> 00:19:06.470
So let's kind of jump in here to
another function, which is

00:19:06.470 --> 00:19:08.680
the reading of data.

00:19:08.680 --> 00:19:10.720
So this--

00:19:10.720 --> 00:19:13.310
let's go in here.

00:19:13.310 --> 00:19:16.200
Create a new method called
loadEmployee.

00:19:16.200 --> 00:19:18.610
And I'll do something
interesting just to let you

00:19:18.610 --> 00:19:20.820
know that this is a pattern
that you'll see a lot.

00:19:20.820 --> 00:19:25.210
So I'll just copy the
relevant function.

00:19:25.210 --> 00:19:26.680
Or variable rather.

00:19:26.680 --> 00:19:30.340
So I'll just have one variable
called Db that I'll use in

00:19:30.340 --> 00:19:34.600
both functions, rather than
me having to recall that.

00:19:34.600 --> 00:19:37.690
Same effect, but I think it
helps you go through it.

00:19:37.690 --> 00:19:39.270
So I'm going to now query it.

00:19:39.270 --> 00:19:41.260
How many results do you
expect here, Kalyan?

00:19:41.260 --> 00:19:42.180
KALYAN REDDY: I expect two.

00:19:42.180 --> 00:19:43.040
ARUN NAGARAJAN: Good.

00:19:43.040 --> 00:19:44.630
You're paying attention.

00:19:44.630 --> 00:19:45.990
I'm going to run it.

00:19:45.990 --> 00:19:47.410
And what it's doing is
very straightforward.

00:19:47.410 --> 00:19:50.080
Its just going to query
an employee ID.

00:19:50.080 --> 00:19:52.900
Then it's going to loop through
it using that iterator

00:19:52.900 --> 00:19:55.400
that I talked about, hasNext.

00:19:55.400 --> 00:19:56.090
Essentially, that's a Boolean.

00:19:56.090 --> 00:19:58.990
That's essentially doing
while true type thing.

00:19:58.990 --> 00:20:00.630
And I can just go take a
look at the execution--

00:20:00.630 --> 00:20:02.580
oops, not that.

00:20:02.580 --> 00:20:04.160
Take a look at the logs.

00:20:04.160 --> 00:20:07.250
And I see two John
Testingtons.

00:20:07.250 --> 00:20:09.810
Good sample name, I think.

00:20:09.810 --> 00:20:10.970
So that's actually pretty
useful, right?

00:20:10.970 --> 00:20:13.590
So you're able to very quickly
see how do you store an

00:20:13.590 --> 00:20:15.510
object, and how do
you retrieve it?

00:20:15.510 --> 00:20:18.660
But this could get
a little clumsy.

00:20:18.660 --> 00:20:21.790
KALYAN REDDY: Yeah, it seems
like having to use the logs as

00:20:21.790 --> 00:20:22.820
an interface.

00:20:22.820 --> 00:20:24.760
It's not really clear what
it actually looks

00:20:24.760 --> 00:20:25.920
like within the ScriptDb.

00:20:25.920 --> 00:20:28.310
Is there a way to
clarify that?

00:20:28.310 --> 00:20:28.700
ARUN NAGARAJAN: Yeah.

00:20:28.700 --> 00:20:31.490
So today, we don't really
have a great

00:20:31.490 --> 00:20:33.750
built-in console for ScriptDb.

00:20:33.750 --> 00:20:36.590
However, we provide, like I said
before, a very robust set

00:20:36.590 --> 00:20:40.650
of APIs, where if you're
interested and if you're

00:20:40.650 --> 00:20:42.880
willing, you can actually build
your own console for

00:20:42.880 --> 00:20:43.700
your instance.

00:20:43.700 --> 00:20:45.860
And to kind of aid that,
I've actually started

00:20:45.860 --> 00:20:48.350
a very simple project.

00:20:48.350 --> 00:20:53.790
And I'll actually go to my
GitHub project in my repo.

00:20:53.790 --> 00:20:56.000
And you can see that I've
started this little thing

00:20:56.000 --> 00:20:57.750
called ScriptDb Visualizer.

00:20:57.750 --> 00:20:59.930
And the whole idea is that you
can copy and paste this very

00:20:59.930 --> 00:21:02.790
quickly and get started
for your own instance

00:21:02.790 --> 00:21:03.790
that you may have.

00:21:03.790 --> 00:21:07.950
So what I'm going to do is just
copy the code here, go to

00:21:07.950 --> 00:21:11.700
Raw, copy this guy.

00:21:11.700 --> 00:21:13.260
Go back here.

00:21:13.260 --> 00:21:15.640
Trying to paste this guy here.

00:21:15.640 --> 00:21:19.280
And let me just make sure that
there's no conflicts.

00:21:19.280 --> 00:21:22.080
The only thing is, I realize
that I have two getDbs.

00:21:22.080 --> 00:21:23.380
So I'm just going
to ignore that.

00:21:23.380 --> 00:21:25.470
You can see that it's going
to publish as a web app.

00:21:25.470 --> 00:21:30.190
And there's an HTML file that
I need to pull down as well.

00:21:30.190 --> 00:21:32.460
I'll go back here.

00:21:32.460 --> 00:21:34.210
KALYAN REDDY: So you built this
using our HTML service?

00:21:34.210 --> 00:21:34.760
ARUN NAGARAJAN: Yes.

00:21:34.760 --> 00:21:38.240
So it's actually a really good
example for our HTML service

00:21:38.240 --> 00:21:40.880
as well, which we'll talk
about in a little bit.

00:21:40.880 --> 00:21:43.500
So I've got a new HTML file.

00:21:43.500 --> 00:21:44.750
I think I called it
ScriptDbConsole.

00:21:47.390 --> 00:21:51.240
And then I'll just
paste that in.

00:21:51.240 --> 00:21:51.980
Let's see.

00:21:51.980 --> 00:21:56.980
I think I mistyped
this guy here.

00:21:56.980 --> 00:21:59.610
I'm moving too fast.

00:21:59.610 --> 00:22:00.000
All right.

00:22:00.000 --> 00:22:00.620
Cool.

00:22:00.620 --> 00:22:02.750
So ScriptDbConsole.html.

00:22:02.750 --> 00:22:04.890
I'll dive in to what's
in here.

00:22:04.890 --> 00:22:06.760
This is all put together
in a couple hours.

00:22:06.760 --> 00:22:09.180
So certainly, a lot of
room for improvement.

00:22:09.180 --> 00:22:11.310
I would love for the community
to get involved and build

00:22:11.310 --> 00:22:14.270
something pretty reusable
and great out of this.

00:22:14.270 --> 00:22:15.420
So now, what I'll do--

00:22:15.420 --> 00:22:17.390
so here's a couple functions
that we're playing with.

00:22:17.390 --> 00:22:18.600
Right, Kalyan?

00:22:18.600 --> 00:22:20.800
So we're going to now basically
build a little

00:22:20.800 --> 00:22:24.330
visualizer for what's
in the database.

00:22:24.330 --> 00:22:26.450
And actually, I found out that
it's a great way to kind of

00:22:26.450 --> 00:22:28.940
practice your ScriptDb skills.

00:22:28.940 --> 00:22:29.160
KALYAN REDDY: Right.

00:22:29.160 --> 00:22:32.200
At first, it's not readily
apparent what's in there.

00:22:32.200 --> 00:22:32.860
ARUN NAGARAJAN: Right.

00:22:32.860 --> 00:22:35.410
So I can then publish
it as a web app.

00:22:35.410 --> 00:22:38.130
And for now, I'll just publish
it for myself.

00:22:38.130 --> 00:22:40.150
If you're publishing it out for
the world, just make sure

00:22:40.150 --> 00:22:42.950
that your ScriptDb is restricted
to yourself through

00:22:42.950 --> 00:22:46.070
checking the current users'
email address and comparing it

00:22:46.070 --> 00:22:47.020
to a known list.

00:22:47.020 --> 00:22:51.570
That way, you're not exposing
data for everybody.

00:22:51.570 --> 00:22:53.330
I believe--

00:22:53.330 --> 00:22:54.990
let me just run this guy once.

00:22:57.900 --> 00:22:59.760
I have a logger example there.

00:22:59.760 --> 00:23:03.470
So I'm going to refresh
this guy.

00:23:03.470 --> 00:23:04.700
So this is it.

00:23:04.700 --> 00:23:06.860
Really Spartan.

00:23:06.860 --> 00:23:10.460
But a really simple way to type
in a query, and then see

00:23:10.460 --> 00:23:11.300
what's in there.

00:23:11.300 --> 00:23:13.510
So here's the query
that says--

00:23:13.510 --> 00:23:14.400
hopefully you can see that.

00:23:14.400 --> 00:23:18.300
Just an open curly brace and
an end curly brace to say,

00:23:18.300 --> 00:23:20.250
give me everything.

00:23:20.250 --> 00:23:22.480
So I can just say, Get Count.

00:23:22.480 --> 00:23:22.850
KALYAN REDDY: That's
because you're

00:23:22.850 --> 00:23:24.180
not specifying anything.

00:23:24.180 --> 00:23:24.900
ARUN NAGARAJAN: That's right.

00:23:24.900 --> 00:23:28.590
It means star in relational
databases.

00:23:28.590 --> 00:23:30.620
So current count is two.

00:23:30.620 --> 00:23:32.690
I can then say, Run the Query.

00:23:32.690 --> 00:23:34.830
So I won't actually
see the objects.

00:23:34.830 --> 00:23:39.260
It'll show me a nicely formatted
version of the

00:23:39.260 --> 00:23:40.760
objects that I care for.

00:23:40.760 --> 00:23:42.030
KALYAN REDDY: So those are the
two that we just added.

00:23:42.030 --> 00:23:42.470
ARUN NAGARAJAN: Exactly.

00:23:42.470 --> 00:23:44.860
And you can see that the
IDs are different.

00:23:44.860 --> 00:23:46.730
And I could actually create
new objects too.

00:23:46.730 --> 00:23:49.640
So I kind of cheated
and created a

00:23:49.640 --> 00:23:50.930
couple ahead of time.

00:23:50.930 --> 00:23:54.680
So I'll just go ahead and type
in a new object here.

00:23:54.680 --> 00:23:57.260
Save this guy.

00:23:57.260 --> 00:23:57.600
OK.

00:23:57.600 --> 00:24:00.240
So I don't have to go to
the Script Editor.

00:24:00.240 --> 00:24:03.030
And today, you're required
to save one by one.

00:24:03.030 --> 00:24:06.410
But obviously, you can
save this guy.

00:24:06.410 --> 00:24:10.550
And then also, save
the last guy here.

00:24:10.550 --> 00:24:13.445
And so I have now a few
employees in my system.

00:24:16.140 --> 00:24:19.240
And now, if I do Get Count, what
do you expect, Kalyan?

00:24:19.240 --> 00:24:19.600
KALYAN REDDY: Let's see.

00:24:19.600 --> 00:24:20.110
What do we?

00:24:20.110 --> 00:24:21.570
2 plus 40?

00:24:21.570 --> 00:24:22.730
ARUN NAGARAJAN: Ah, so
first of all, I ran

00:24:22.730 --> 00:24:24.020
count for this object.

00:24:24.020 --> 00:24:25.290
I don't want that.

00:24:25.290 --> 00:24:26.890
KALYAN REDDY: Ah, you're query
was a specific object.

00:24:26.890 --> 00:24:27.210
ARUN NAGARAJAN: Yes.

00:24:27.210 --> 00:24:28.840
So let me run the count here.

00:24:28.840 --> 00:24:30.030
And it's five.

00:24:30.030 --> 00:24:30.490
Right?

00:24:30.490 --> 00:24:31.600
And then I can run the query.

00:24:31.600 --> 00:24:34.150
And I can see the five
employees in it.

00:24:34.150 --> 00:24:38.020
John Testington, Arun, Kalyan,
Eric, and then the other John

00:24:38.020 --> 00:24:38.390
Testington.

00:24:38.390 --> 00:24:38.520
KALYAN REDDY: Gotcha.

00:24:38.520 --> 00:24:40.210
The two original ones and the
three you just added.

00:24:40.210 --> 00:24:40.620
ARUN NAGARAJAN: Yeah.

00:24:40.620 --> 00:24:43.760
And it's actually pretty cool
that I can then also

00:24:43.760 --> 00:24:45.450
go ahead and query.

00:24:45.450 --> 00:24:48.400
So I can say, show me
everybody that has a

00:24:48.400 --> 00:24:50.710
department--

00:24:50.710 --> 00:24:52.320
I had to put quotes in there.

00:24:55.030 --> 00:24:58.240
ID of, I think 14, is what I
had used for most of them,

00:24:58.240 --> 00:25:01.250
except for--

00:25:01.250 --> 00:25:04.220
I think I used 14 across
the board.

00:25:04.220 --> 00:25:04.690
Cool.

00:25:04.690 --> 00:25:07.000
So let me just find some
other example.

00:25:07.000 --> 00:25:09.270
Maybe employee ID is one.

00:25:09.270 --> 00:25:10.745
Just to kind of filter
things out.

00:25:17.320 --> 00:25:18.560
Run this query.

00:25:18.560 --> 00:25:21.510
And I should get
two items back.

00:25:21.510 --> 00:25:24.750
So you can see the double
headers, double lines, kind of

00:25:24.750 --> 00:25:27.180
separate out a query run.

00:25:27.180 --> 00:25:29.090
So it's kind of useful to
be able to do that.

00:25:29.090 --> 00:25:30.660
KALYAN REDDY: Now what if we
wanted to pull up my records

00:25:30.660 --> 00:25:31.440
specifically?

00:25:31.440 --> 00:25:31.690
ARUN NAGARAJAN: Right.

00:25:31.690 --> 00:25:45.200
So let's filter you by your last
name, and run a query.

00:25:45.200 --> 00:25:45.730
And there you are.

00:25:45.730 --> 00:25:46.420
KALYAN REDDY: Very cool.

00:25:46.420 --> 00:25:48.010
ARUN NAGARAJAN: And let's
actually go ahead and do a

00:25:48.010 --> 00:25:49.250
couple of things here.

00:25:49.250 --> 00:25:51.140
So one of the things that
we allow you to do is

00:25:51.140 --> 00:25:53.020
load by ID in here.

00:25:53.020 --> 00:25:56.580
So if you just pasted an ID,
you can just run that, and

00:25:56.580 --> 00:25:58.370
then get your object
back as well.

00:25:58.370 --> 00:26:01.290
So you don't have to know a
particular property about you.

00:26:01.290 --> 00:26:04.820
You can just kind of filter by
IDs as well, which is I think

00:26:04.820 --> 00:26:06.260
quite powerful.

00:26:06.260 --> 00:26:09.240
And you can pass in multiple
IDs, so I can just comma

00:26:09.240 --> 00:26:13.930
delimit here and say load
by ID, and I'll get two

00:26:13.930 --> 00:26:15.840
objects back here.

00:26:15.840 --> 00:26:17.200
KALYAN REDDY: So if you're
writing a script, you could

00:26:17.200 --> 00:26:19.330
keep track of the things
you save by their IDs?

00:26:19.330 --> 00:26:19.550
ARUN NAGARAJAN: Right.

00:26:19.550 --> 00:26:23.060
So you don't necessarily need
to know some queryable

00:26:23.060 --> 00:26:25.390
attribute about an object,
other than its ID.

00:26:25.390 --> 00:26:27.510
So it's actually kind
of powerful.

00:26:27.510 --> 00:26:30.660
What you could also do is start
deleting certain things.

00:26:30.660 --> 00:26:33.230
So I can say, show me
everybody with the

00:26:33.230 --> 00:26:36.090
first name of John.

00:26:36.090 --> 00:26:40.630
So one thing you'll realize is
that the Count, Query, and

00:26:40.630 --> 00:26:42.960
Delete syntax are
pretty similar.

00:26:42.960 --> 00:26:45.220
So you're essentially
passing in a--

00:26:45.220 --> 00:26:49.180
so if I just say Get Count,
that should return two.

00:26:49.180 --> 00:26:51.940
So two people in there with
the first name of John.

00:26:51.940 --> 00:26:53.800
I can just see who they are.

00:26:53.800 --> 00:26:55.320
These two people.

00:26:55.320 --> 00:26:57.900
Same exact object, but different
IDs, like we know.

00:26:57.900 --> 00:26:59.250
We insert them twice.

00:26:59.250 --> 00:27:01.880
And I can just hit Delete.

00:27:01.880 --> 00:27:06.170
And now if I say Run Query,
no one there for that.

00:27:06.170 --> 00:27:09.620
So it's actually kind of cool
that the same kind of query,

00:27:09.620 --> 00:27:12.580
the query by example syntax
here, works for getting the

00:27:12.580 --> 00:27:16.840
count for that, getting
responses to actual objects,

00:27:16.840 --> 00:27:18.280
and then also deleting.

00:27:18.280 --> 00:27:18.800
KALYAN REDDY: Very cool.

00:27:18.800 --> 00:27:21.910
ARUN NAGARAJAN: So you
can query by example.

00:27:21.910 --> 00:27:24.690
You can load and delete
by IDs as well.

00:27:24.690 --> 00:27:26.590
In order to get count,
you do have to pass

00:27:26.590 --> 00:27:27.750
in an actual syntax.

00:27:27.750 --> 00:27:28.490
KALYAN REDDY: I see.

00:27:28.490 --> 00:27:29.310
ARUN NAGARAJAN: OK?

00:27:29.310 --> 00:27:34.040
And like I said, the actual
syntax to search by

00:27:34.040 --> 00:27:35.290
itself is an object.

00:27:35.290 --> 00:27:38.980
So I could just hit Save, and
that object will get saved.

00:27:38.980 --> 00:27:42.560
And if I now get objects for
everybody, and this will kind

00:27:42.560 --> 00:27:46.960
of show the heterogeneous
aspect of it--

00:27:46.960 --> 00:27:48.620
I think I saved the
empty object.

00:27:48.620 --> 00:27:52.360
So you can see that there's
me, you, just

00:27:52.360 --> 00:27:54.260
John, that we saved.

00:27:54.260 --> 00:27:56.760
And then, also an empty object,
which was my mistake.

00:27:56.760 --> 00:27:57.900
But it's there.

00:27:57.900 --> 00:27:59.760
And I can just go ahead and
delete that as well.

00:27:59.760 --> 00:28:03.240
So I can just say,
delete that guy.

00:28:03.240 --> 00:28:07.880
And now if I run the query
for everybody.

00:28:07.880 --> 00:28:09.400
So it's pretty lightweight
console.

00:28:09.400 --> 00:28:12.600
It's not meant to
be super fancy.

00:28:12.600 --> 00:28:13.780
KALYAN REDDY: It really
helps you visualize

00:28:13.780 --> 00:28:14.570
these things, though.

00:28:14.570 --> 00:28:14.860
ARUN NAGARAJAN: Right.

00:28:14.860 --> 00:28:16.510
Let's you see what's in there.

00:28:16.510 --> 00:28:18.130
And you can see that
it's really fast.

00:28:18.130 --> 00:28:21.060
And a lot of the time is
actually spent in the back and

00:28:21.060 --> 00:28:23.930
forth, rather than retrieving
something from the database.

00:28:23.930 --> 00:28:27.940
And we started out with the real
simple example here from

00:28:27.940 --> 00:28:30.420
the sample slides that I had.

00:28:30.420 --> 00:28:33.290
We dropped in the code from
my GitHub account.

00:28:33.290 --> 00:28:35.256
And then, off you go.

00:28:35.256 --> 00:28:35.970
KALYAN REDDY: Great.

00:28:35.970 --> 00:28:36.360
ARUN NAGARAJAN: Yeah.

00:28:36.360 --> 00:28:38.420
And just to give you a sense
for what the code is like,

00:28:38.420 --> 00:28:40.730
it's all HTML service.

00:28:40.730 --> 00:28:42.250
It does some interesting
things.

00:28:42.250 --> 00:28:44.990
It's highlighting some JSON,
using some of the things that

00:28:44.990 --> 00:28:47.570
I found on a sample site.

00:28:47.570 --> 00:28:51.580
And it just uses the
google.script.run syntax quite

00:28:51.580 --> 00:28:54.620
heavily, and uses jQuery
to have the click

00:28:54.620 --> 00:28:56.520
handle work on those.

00:28:56.520 --> 00:28:57.670
And that's really it.

00:28:57.670 --> 00:29:00.350
It just kind of adds
a console prepense

00:29:00.350 --> 00:29:02.590
content into your DOM.

00:29:02.590 --> 00:29:05.240
And here are the buttons
and the rows in there.

00:29:05.240 --> 00:29:07.120
KALYAN REDDY: So you should be
able to, as it is, do most

00:29:07.120 --> 00:29:07.730
things with it, right?

00:29:07.730 --> 00:29:09.870
Like, we didn't see an example
specifically of updating a

00:29:09.870 --> 00:29:12.460
previous record, but you should
be able to get the ID,

00:29:12.460 --> 00:29:13.290
and then update it?

00:29:13.290 --> 00:29:14.850
ARUN NAGARAJAN: You should be
able to update it like that.

00:29:14.850 --> 00:29:18.550
It would be great to be able to
upload or insert multiple

00:29:18.550 --> 00:29:20.800
objects at once.

00:29:20.800 --> 00:29:24.050
And it would be cool to be able
to store certain queries

00:29:24.050 --> 00:29:26.300
so you can replay it.

00:29:26.300 --> 00:29:30.230
And a lot of useful things
can be built out of this.

00:29:30.230 --> 00:29:31.850
And it's a playground
to practice.

00:29:31.850 --> 00:29:34.000
And hopefully, this is a good
thing that you can start

00:29:34.000 --> 00:29:36.340
building some useful
tools with.

00:29:36.340 --> 00:29:37.860
KALYAN REDDY: It's a good
springboard that hopefully,

00:29:37.860 --> 00:29:40.035
some of our users will
take and run with.

00:29:40.035 --> 00:29:40.810
See what happens.

00:29:40.810 --> 00:29:41.170
ARUN NAGARAJAN: Excellent.

00:29:41.170 --> 00:29:41.420
Yeah.

00:29:41.420 --> 00:29:42.910
So that's really all I had.

00:29:42.910 --> 00:29:44.640
Hopefully, this all made
sense and was useful.

00:29:44.640 --> 00:29:45.840
KALYAN REDDY: Yeah,
thanks a lot.

00:29:45.840 --> 00:29:46.820
It was great.

00:29:46.820 --> 00:29:47.590
ARUN NAGARAJAN: Thank
you very much.

00:29:47.590 --> 00:29:48.840
KALYAN REDDY: And thank
you for watching.

