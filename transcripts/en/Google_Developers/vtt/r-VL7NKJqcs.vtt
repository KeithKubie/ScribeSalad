WEBVTT
Kind: captions
Language: en

00:00:01.888 --> 00:00:02.360
SHAWN SIMISTER: All right.

00:00:02.360 --> 00:00:05.600
Thank you everyone for coming
out today and welcome to the

00:00:05.600 --> 00:00:10.090
Freebase APIs, Tapping into
Google's Knowledge Graph.

00:00:10.090 --> 00:00:12.660
Before I get started, my
name is Shawn Simister.

00:00:12.660 --> 00:00:15.880
I work in Developer Relations
with the Knowledge Group which

00:00:15.880 --> 00:00:17.890
includes Search and the
Knowledge Graph.

00:00:17.890 --> 00:00:22.290
And I work on Freebase, the
Freebase APIs, Schema.org, and

00:00:22.290 --> 00:00:23.540
some of our search APIs.

00:00:25.970 --> 00:00:28.470
So you've heard a lot over the
last couple days about the

00:00:28.470 --> 00:00:30.980
Knowledge Graph, but I want to
take a little bit of time at

00:00:30.980 --> 00:00:34.070
the beginning of this talk to
talk about what really is a

00:00:34.070 --> 00:00:34.580
Knowledge Graph.

00:00:34.580 --> 00:00:36.500
What does it mean to have
a Knowledge Graph?

00:00:36.500 --> 00:00:38.100
And how are we using
that at Google?

00:00:38.100 --> 00:00:39.720
And how can you use that
in your application?

00:00:42.930 --> 00:00:47.510
So at the very basics,
a graph has entities.

00:00:47.510 --> 00:00:50.130
In the Knowledge Graph they're
real world entities, so

00:00:50.130 --> 00:00:53.560
people, places, things,
organizations.

00:00:53.560 --> 00:00:57.570
In this case, I have an entity
here for Daft Punk.

00:00:57.570 --> 00:01:00.740
And those form the nodes
in the graph.

00:01:00.740 --> 00:01:03.260
And the nodes, as you can see in
this diagram, are connected

00:01:03.260 --> 00:01:07.310
by edges and those edges are
labeled edges that represent

00:01:07.310 --> 00:01:10.720
the relationships between these
real world entities.

00:01:10.720 --> 00:01:14.960
So in this case, Daft Punk, the
band, actually appeared in

00:01:14.960 --> 00:01:16.440
"Tron Legacy", the movie.

00:01:16.440 --> 00:01:20.420
And so we have billions of
those relationships in

00:01:20.420 --> 00:01:22.820
Google's Knowledge Graph,
hundreds of millions of those

00:01:22.820 --> 00:01:25.810
real world entities, and
that's what forms the

00:01:25.810 --> 00:01:27.180
Knowledge Graph.

00:01:27.180 --> 00:01:30.610
But more than that, each of
these nodes is typed.

00:01:30.610 --> 00:01:33.510
So we know that Daft
Punk is a band.

00:01:33.510 --> 00:01:35.890
And we know that "Tron
Legacy" is a movie.

00:01:35.890 --> 00:01:39.330
And we know that there are
certain relationships like

00:01:39.330 --> 00:01:43.160
appears in that appear between a
band and a movie or a person

00:01:43.160 --> 00:01:44.410
and a movie.

00:01:46.610 --> 00:01:48.910
And because it's a graph
shape, there's no fixed

00:01:48.910 --> 00:01:49.580
structure to this.

00:01:49.580 --> 00:01:50.930
You can add as many
connections.

00:01:50.930 --> 00:01:54.540
So Daft Punk came from Paris.

00:01:54.540 --> 00:01:57.740
Their record label is
Virgin Records.

00:01:57.740 --> 00:01:59.070
And it just fans
out from there.

00:01:59.070 --> 00:02:01.390
And that's how we have so many
hundreds of millions of

00:02:01.390 --> 00:02:07.900
entities now in the Knowledge
Graph as you can see here.

00:02:07.900 --> 00:02:11.560
So this is just a little
snapshot of how the Knowledge

00:02:11.560 --> 00:02:13.810
Graph is built.

00:02:13.810 --> 00:02:16.200
Every single one of those
hundreds of millions of

00:02:16.200 --> 00:02:18.700
entities has a unique
identifier, which lets us

00:02:18.700 --> 00:02:21.960
treat entities with the same
name differently within the

00:02:21.960 --> 00:02:22.830
Knowledge Graph.

00:02:22.830 --> 00:02:25.690
You've probably seen that when
you do a Google search for

00:02:25.690 --> 00:02:28.420
something like Boston.

00:02:28.420 --> 00:02:30.840
And it'll ask you do you want
to disambiguate between the

00:02:30.840 --> 00:02:33.700
band or the city.

00:02:33.700 --> 00:02:37.150
And so we'll see in the Freebase
APIs how you can use

00:02:37.150 --> 00:02:39.660
those unique identifiers in
your application to access

00:02:39.660 --> 00:02:43.080
structured data, both these
real world entities, and

00:02:43.080 --> 00:02:45.560
importantly, the real world
entities that your users care

00:02:45.560 --> 00:02:50.460
about, the entities that are
important to your application.

00:02:50.460 --> 00:02:52.330
So I've mentioned a couple
things about Freebase but let

00:02:52.330 --> 00:02:54.940
me give you the high
level overview.

00:02:54.940 --> 00:02:56.940
Freebase is a Knowledge Graph.

00:02:56.940 --> 00:02:59.690
It's an open Knowledge Graph,
open to everyone to use.

00:02:59.690 --> 00:03:02.550
If you have a Google account,
which I'm sure you do, you can

00:03:02.550 --> 00:03:04.220
log into Freebase.com
right now.

00:03:04.220 --> 00:03:07.620
You can see we have
40 million topics.

00:03:07.620 --> 00:03:10.680
So a little bit smaller than
Google's Knowledge Graph, but

00:03:10.680 --> 00:03:12.830
it's really densely populated
with over a

00:03:12.830 --> 00:03:14.440
billion facts in there.

00:03:14.440 --> 00:03:17.730
And a lot of the entities are
things that you would expect

00:03:17.730 --> 00:03:19.000
to see in Wikipedia.

00:03:19.000 --> 00:03:21.850
In fact, we pulled a lot
of data from Wikipedia.

00:03:21.850 --> 00:03:24.470
So there are those really
notable people, places, and

00:03:24.470 --> 00:03:27.670
things, again, that matter to
the users of your application.

00:03:27.670 --> 00:03:29.690
We've also categorized
them by 2,000 types.

00:03:29.690 --> 00:03:32.870
So remember, I said every node
in that graph can have a type.

00:03:32.870 --> 00:03:34.970
In fact, in Freebase, in the
Knowledge Graph they can have

00:03:34.970 --> 00:03:36.550
multiple types.

00:03:36.550 --> 00:03:38.440
So if you go again to
Freebase.come you can see a

00:03:38.440 --> 00:03:42.390
listing of all the different
categories of types we have

00:03:42.390 --> 00:03:44.910
from those 2,000 types.

00:03:44.910 --> 00:03:46.240
Now, the reason you're
here today is

00:03:46.240 --> 00:03:48.060
because of our free API.

00:03:48.060 --> 00:03:51.350
So anyone who goes through the
Developer Console can sign up

00:03:51.350 --> 00:03:53.540
for the Freebase API.

00:03:53.540 --> 00:03:55.680
You can use it for commercial
purposes as long as you give

00:03:55.680 --> 00:03:57.060
us some attribution.

00:03:57.060 --> 00:03:59.660
You can get 10,000
requests a day.

00:03:59.660 --> 00:04:03.060
It's really quite easy to use,
as I'll show you in a second.

00:04:03.060 --> 00:04:05.140
But if you need more than that,
or if you want to do

00:04:05.140 --> 00:04:08.550
some really heavy graph
algorithms or analysis on the

00:04:08.550 --> 00:04:12.370
graph, we provide the entire
graph, all one billion facts,

00:04:12.370 --> 00:04:14.940
40 million entities,
as a data dump.

00:04:14.940 --> 00:04:18.120
So you can download the entire
graph to your hard drive and

00:04:18.120 --> 00:04:21.149
do with it as you'd like.

00:04:21.149 --> 00:04:23.850
Most importantly, Freebase is
one of the really important

00:04:23.850 --> 00:04:26.430
sources for Google's
Knowledge Graph.

00:04:26.430 --> 00:04:30.060
And so if you contribute to
Freebase and your edits are

00:04:30.060 --> 00:04:33.960
trustworthy and meet our
criteria, they could end up in

00:04:33.960 --> 00:04:35.210
Google's Knowledge Graph
and in Search.

00:04:39.360 --> 00:04:41.890
So every one of those 40 million
real world entities in

00:04:41.890 --> 00:04:45.000
Freebase has a page that looks
like this in Freebase.

00:04:45.000 --> 00:04:46.480
We just recently redesigned
this.

00:04:46.480 --> 00:04:49.040
It's running on App Engine.

00:04:49.040 --> 00:04:51.950
It's a really cool new site.

00:04:51.950 --> 00:04:54.930
There's a lot more than I can
show on this one page, but you

00:04:54.930 --> 00:04:57.340
can see down the right side we
have all the types that apply

00:04:57.340 --> 00:04:59.210
to this node in the graph.

00:04:59.210 --> 00:05:01.060
And if you click those, you can
kind of jump down the page

00:05:01.060 --> 00:05:04.385
and see all the entries in our
graph, all the properties that

00:05:04.385 --> 00:05:05.480
have been assigned to it.

00:05:05.480 --> 00:05:08.250
And if you don't see what you're
expecting to see there,

00:05:08.250 --> 00:05:11.350
you can add it or edit
it yourself.

00:05:11.350 --> 00:05:13.510
You might notice up in the top
right hand corner, there's

00:05:13.510 --> 00:05:16.990
little drop down box there for
English, we're translating

00:05:16.990 --> 00:05:20.410
Freebase and the Knowledge
Graph into

00:05:20.410 --> 00:05:21.530
many different languages.

00:05:21.530 --> 00:05:26.080
I think Freebase is targeting
about 40 languages right now.

00:05:26.080 --> 00:05:29.260
And so we're pulling in data
from all the different

00:05:29.260 --> 00:05:32.250
languages of Wikipedia.

00:05:32.250 --> 00:05:33.990
And so if you go to Daft Punk,
you can actually get

00:05:33.990 --> 00:05:37.140
information in English or French
or German or whatever

00:05:37.140 --> 00:05:40.080
language you're looking for,
all using that same unique

00:05:40.080 --> 00:05:41.390
identifier.

00:05:41.390 --> 00:05:43.380
You'll notice underneath, we
have a couple tabs here.

00:05:43.380 --> 00:05:46.430
So Properties is the one
I just explained.

00:05:46.430 --> 00:05:51.160
I18N, internationalization, is
those international names that

00:05:51.160 --> 00:05:51.920
I just explained.

00:05:51.920 --> 00:05:55.320
So if you go to that tab,
you'll see for any given

00:05:55.320 --> 00:05:57.705
language what name we've
assigned to it.

00:05:57.705 --> 00:06:02.240
And we do some interesting
stuff to decide when an

00:06:02.240 --> 00:06:05.460
English name should be shown
in another language.

00:06:05.460 --> 00:06:07.070
The next tab is Keys.

00:06:07.070 --> 00:06:09.800
So these are-- you can think of
in database terms-- these

00:06:09.800 --> 00:06:12.590
are foreign keys into
other databases.

00:06:12.590 --> 00:06:16.550
So this is the unique part of
the URL that will tell you

00:06:16.550 --> 00:06:19.010
which Wikipedia page corresponds
to this entity, or

00:06:19.010 --> 00:06:22.300
which Twitter account
corresponds to this entity, or

00:06:22.300 --> 00:06:29.730
which Google+ page corresponds
to this entity.

00:06:29.730 --> 00:06:33.090
And lastly, Links are just all
those edges in the graph,

00:06:33.090 --> 00:06:36.040
those one billion connections
between the real world

00:06:36.040 --> 00:06:38.310
entities and the Freebase
Knowledge Graph.

00:06:38.310 --> 00:06:40.190
And so if you really want to
dig into it and figure out

00:06:40.190 --> 00:06:43.470
what's going on, what connects
to this specific node in the

00:06:43.470 --> 00:06:46.630
graph, you'd go to the Links
page and you'll just see a

00:06:46.630 --> 00:06:48.310
huge long list of them.

00:06:48.310 --> 00:06:49.900
There's a very cool thing
up here at the top.

00:06:49.900 --> 00:06:52.320
You see it says, View
Specific Properties.

00:06:52.320 --> 00:06:54.400
It's kind of like the Awesome
Bar in Firefox.

00:06:54.400 --> 00:06:57.950
You can just start typing in
types or properties and it'll

00:06:57.950 --> 00:06:59.570
start filtering down
that list of links.

00:06:59.570 --> 00:07:01.550
So it's a pretty cool feature.

00:07:01.550 --> 00:07:06.190
And I encourage you to go check
it out after the talk.

00:07:06.190 --> 00:07:08.800
But today, we're going to be
talking about a couple

00:07:08.800 --> 00:07:14.810
specific ways that you can use
the Freebase APIs to add more

00:07:14.810 --> 00:07:17.560
search, add more semantics
to your application.

00:07:17.560 --> 00:07:19.220
These are some of the things
that you're already seeing

00:07:19.220 --> 00:07:22.660
Google doing with Search and
with other Google products.

00:07:22.660 --> 00:07:25.210
But because there are so many
similarities between how

00:07:25.210 --> 00:07:28.610
Freebase is built and how the
Knowledge Graph is built, you

00:07:28.610 --> 00:07:30.080
can do a lot of the same things
that we're doing in

00:07:30.080 --> 00:07:33.480
Search in your own application
with the Freebase APIs.

00:07:33.480 --> 00:07:37.000
So I'll start off with
Autosuggest, which is just

00:07:37.000 --> 00:07:38.540
suggesting entities.

00:07:38.540 --> 00:07:41.540
Semantic Tagging, which lets
you add entities to your

00:07:41.540 --> 00:07:44.310
content, Entity Collections,
which I think you've seen in

00:07:44.310 --> 00:07:46.190
Search at the top when
you do a search

00:07:46.190 --> 00:07:48.190
for like Zombie movies.

00:07:48.190 --> 00:07:50.530
Geosearch, which is looking
for entities

00:07:50.530 --> 00:07:52.110
but based on location.

00:07:52.110 --> 00:07:55.190
And lastly, Topical Web Links,
which is finding other sources

00:07:55.190 --> 00:07:59.050
on the web like that Twitter
page or the Google+ page for

00:07:59.050 --> 00:08:00.300
that specific entity.

00:08:04.560 --> 00:08:07.880
So the first example I want to
show you is Autosuggest.

00:08:07.880 --> 00:08:09.880
This is something that's been
really important to Freebase

00:08:09.880 --> 00:08:10.780
from the beginning.

00:08:10.780 --> 00:08:13.470
It's the ability to
turn strings into

00:08:13.470 --> 00:08:15.390
things, as we say.

00:08:15.390 --> 00:08:17.570
And that's really just
a way of saying we

00:08:17.570 --> 00:08:19.680
take ambiguous keywords--

00:08:19.680 --> 00:08:22.400
in this case, house.

00:08:22.400 --> 00:08:26.280
So if you typed house into a
search box, you don't know if

00:08:26.280 --> 00:08:29.820
we're talking about the TV show
or the music genre or

00:08:29.820 --> 00:08:31.900
maybe something like
the White House.

00:08:31.900 --> 00:08:36.970
And so the Freebase Suggest
widget is a way that you

00:08:36.970 --> 00:08:39.530
disambiguate those entities and
turn it into one of those

00:08:39.530 --> 00:08:41.400
unique identifiers for
a node in the graph.

00:08:41.400 --> 00:08:44.020
And once you have that unique
identifiers, you'll see from

00:08:44.020 --> 00:08:46.290
the following samples, all the
kind of cool stuff that you

00:08:46.290 --> 00:08:47.540
can do with that.

00:08:51.840 --> 00:08:53.090
Let me just connect
to the internet.

00:09:06.190 --> 00:09:07.660
There we go.

00:09:15.500 --> 00:09:16.030
All right.

00:09:16.030 --> 00:09:20.720
So in the first box here, say
I have a form I want someone

00:09:20.720 --> 00:09:23.210
to enter a music group.

00:09:23.210 --> 00:09:26.980
So you can just start typing
and all of a sudden you see

00:09:26.980 --> 00:09:30.300
I'm suggesting possible
music groups.

00:09:30.300 --> 00:09:33.100
I'm using the Freebase graph,
those 40 million entities, to

00:09:33.100 --> 00:09:37.020
suggest plausible real world
entities that begin

00:09:37.020 --> 00:09:40.130
with the word Daft.

00:09:40.130 --> 00:09:42.340
There's actually quite
a few musical groups.

00:09:42.340 --> 00:09:45.490
You'll notice not all of these
have Daft in the name, but we

00:09:45.490 --> 00:09:48.890
also look at their Wikipedia
page or things like that to

00:09:48.890 --> 00:09:53.410
figure out what entities are
related to them and rank some

00:09:53.410 --> 00:09:55.940
of the suggestions
that way as well.

00:09:55.940 --> 00:09:59.050
You'll see now if I just click
on one of those suggestions,

00:09:59.050 --> 00:10:03.970
this is jQuery widget and so
in my JavaScript I get back

00:10:03.970 --> 00:10:07.720
this data, not just the name
of the entity that I've

00:10:07.720 --> 00:10:11.920
selected, but also the important
MID, that's the

00:10:11.920 --> 00:10:15.750
machine ID that we use in
Freebase for uniquely

00:10:15.750 --> 00:10:19.040
identifying all of those
40 million real world

00:10:19.040 --> 00:10:21.150
entities in the Graph.

00:10:21.150 --> 00:10:24.450
So this is a really easy way,
not only to disambiguate

00:10:24.450 --> 00:10:29.080
things in your application, but
also to get those strong

00:10:29.080 --> 00:10:32.090
identifiers that let you do
other cool things with the

00:10:32.090 --> 00:10:33.666
Freebase APIs.

00:10:33.666 --> 00:10:35.100
And it's really easy
to customize.

00:10:35.100 --> 00:10:39.320
You could see this other example
I have here, exact

00:10:39.320 --> 00:10:42.970
same code but I've changed it,
so instead it's just filtering

00:10:42.970 --> 00:10:45.610
down to movies.

00:10:45.610 --> 00:10:49.820
If I type in Daft there, you'll
see movies related to

00:10:49.820 --> 00:10:53.160
Daft Punk, rather than
Daft Punk the band.

00:10:53.160 --> 00:10:56.770
And again, if I click on
that, I get the ID.

00:10:56.770 --> 00:10:58.780
You'll see there's a score in
there, and we'll get to that

00:10:58.780 --> 00:11:01.640
later, but that's basically this
is a search function and

00:11:01.640 --> 00:11:06.500
its returning a score for
each entity that was

00:11:06.500 --> 00:11:07.750
returned in the list.

00:11:12.120 --> 00:11:16.260
So that Autosuggest feature
that you saw is a jQuery

00:11:16.260 --> 00:11:18.430
plug-in that you can
add to any page.

00:11:18.430 --> 00:11:19.935
It's under a BSD license.

00:11:19.935 --> 00:11:24.170
You could extend it if you'd
like, but it's built on top of

00:11:24.170 --> 00:11:26.420
our search API.

00:11:26.420 --> 00:11:29.340
And so underneath the covers,
this is all that's going on.

00:11:29.340 --> 00:11:33.400
This is just a GET request to
the server, we're passing in

00:11:33.400 --> 00:11:36.630
whatever text you've
typed so far.

00:11:36.630 --> 00:11:39.680
And we also have this filtering
syntax that lets you

00:11:39.680 --> 00:11:42.650
say match all of the following
constraints.

00:11:42.650 --> 00:11:45.850
It must have this
Freebase type.

00:11:45.850 --> 00:11:48.310
You'll remember, if you go back
to the Freebase homepage,

00:11:48.310 --> 00:11:51.970
you'll see a big list of those
2,000 types, slash music,

00:11:51.970 --> 00:11:55.570
slash musical group is one of
the types of that we organize

00:11:55.570 --> 00:11:57.680
entities by.

00:11:57.680 --> 00:11:59.280
So if you send that to the
server, this is what you're

00:11:59.280 --> 00:12:00.330
going to get back.

00:12:00.330 --> 00:12:02.050
In fact, you're going to get
back a much longer version of

00:12:02.050 --> 00:12:04.330
this but I couldn't fit
it all on the slide.

00:12:04.330 --> 00:12:09.060
But this inner part here with
the MID, the language score,

00:12:09.060 --> 00:12:13.040
that's the search result that
gets repeated a number of

00:12:13.040 --> 00:12:14.710
times throughout the results.

00:12:14.710 --> 00:12:18.470
By default, you get 20 results
back, but there's a query

00:12:18.470 --> 00:12:22.750
parameter where you can
extend that as well.

00:12:22.750 --> 00:12:25.420
And so using this, we can pass
in little fragments of text to

00:12:25.420 --> 00:12:28.680
get back these ranked lists
of entities in Freebase's

00:12:28.680 --> 00:12:34.260
Knowledge Graph that
match that keyword.

00:12:34.260 --> 00:12:37.295
And then use those MIDs to do
other interesting things in

00:12:37.295 --> 00:12:38.545
our application.

00:12:40.820 --> 00:12:45.570
And here you can see I've got a
link here in the slide so if

00:12:45.570 --> 00:12:48.680
you see the slides after the
talk, you can click through to

00:12:48.680 --> 00:12:51.570
the Freebase documentation and
download this jQuery widget

00:12:51.570 --> 00:12:54.600
and it really is just one
line of code to add that

00:12:54.600 --> 00:13:00.130
Autosuggest functionality to any
input box on an HTML form.

00:13:00.130 --> 00:13:06.620
Also, you'll remember I said
this is just a HTTP web

00:13:06.620 --> 00:13:10.390
service, so you can call this
functionality from any code.

00:13:10.390 --> 00:13:14.440
You can call it from Python or
Java and we have examples in

00:13:14.440 --> 00:13:17.200
our documentation, as well, for
how to call that API from

00:13:17.200 --> 00:13:19.190
other languages, not just
from JavaScript.

00:13:24.700 --> 00:13:29.630
The next example that I want
to show you builds on this

00:13:29.630 --> 00:13:32.990
Autosuggest functionality
to do Semantic Tagging.

00:13:32.990 --> 00:13:35.740
So imagine you have a whole
bunch of articles of text or

00:13:35.740 --> 00:13:38.906
videos or images--

00:13:38.906 --> 00:13:42.480
and I don't mean like 10s, I
mean like millions of these--

00:13:42.480 --> 00:13:44.610
and you want to categorize
them all.

00:13:44.610 --> 00:13:47.930
In fact, our friends at
Wikipedia are doing some

00:13:47.930 --> 00:13:49.840
interesting stuff with this.

00:13:49.840 --> 00:13:55.545
And so you start to add
tags to the content.

00:13:55.545 --> 00:13:59.740
You start to find ways
to categorize it.

00:13:59.740 --> 00:14:02.900
And then you have to come
up with a list of tags.

00:14:02.900 --> 00:14:05.200
You can't just let people tag it
with anything because then

00:14:05.200 --> 00:14:07.340
it gets very messy.

00:14:07.340 --> 00:14:08.890
You don't know how
to find things.

00:14:08.890 --> 00:14:13.860
And so you can actually use
the data in Freebase as a

00:14:13.860 --> 00:14:15.940
vocabulary for tagging
your content.

00:14:15.940 --> 00:14:18.880
And that gives you a really
nice list of real world

00:14:18.880 --> 00:14:22.230
entities, things that people
are going to care about.

00:14:22.230 --> 00:14:23.490
So let me show you
how that works.

00:14:32.360 --> 00:14:36.710
So you see I just start typing
and it lets me tag stuff using

00:14:36.710 --> 00:14:39.600
entities from the
Knowledge Graph.

00:14:39.600 --> 00:14:41.180
In this case, I haven't
constrained it.

00:14:41.180 --> 00:14:46.900
It's just searching
all of Freebase.

00:14:46.900 --> 00:14:48.820
We get back notable types.

00:14:48.820 --> 00:14:51.330
So remember I said any node in
the Graph can have multiple

00:14:51.330 --> 00:14:54.690
types assigned to it, but
Freebase will do a little bit

00:14:54.690 --> 00:14:57.160
extra for you and figure out
which of those types is the

00:14:57.160 --> 00:15:00.220
most descriptive for that entity
so that we can say

00:15:00.220 --> 00:15:03.100
things like Jeff Bridges,
the actor or Jeff

00:15:03.100 --> 00:15:05.131
Buckley, the singer.

00:15:05.131 --> 00:15:06.920
So you can see this
is quite easy.

00:15:06.920 --> 00:15:10.110
This is just using another
open source jQuery widget

00:15:10.110 --> 00:15:11.690
called Tag-it.

00:15:11.690 --> 00:15:16.740
And they support JSONP web
services as a source for tags.

00:15:16.740 --> 00:15:19.030
And so you can just take the
Freebase API, plug it right

00:15:19.030 --> 00:15:23.510
into that, and auto-complete
on any of these entities in

00:15:23.510 --> 00:15:28.570
the Knowledge Graph which saves
you a lot of time with

00:15:28.570 --> 00:15:30.890
having to come up with
categories of

00:15:30.890 --> 00:15:32.252
tags on your own.

00:15:38.210 --> 00:15:41.120
This is just a little snippet of
the code that you'd use in

00:15:41.120 --> 00:15:41.720
jQuery Tag-it.

00:15:41.720 --> 00:15:45.670
So remember I said you can
plug-in any JSONP web service

00:15:45.670 --> 00:15:47.780
and use that as a
source of tags?

00:15:47.780 --> 00:15:52.330
So here we have the URL for the
Freebase search API and

00:15:52.330 --> 00:15:57.035
we're just telling it to look
at the text that we've typed

00:15:57.035 --> 00:16:01.030
in so far, pass it in as the
query parameter, treat it as a

00:16:01.030 --> 00:16:01.970
prefix search.

00:16:01.970 --> 00:16:04.790
So we want whatever entity we're
looking for to start

00:16:04.790 --> 00:16:07.060
with the letters that
we just typed.

00:16:07.060 --> 00:16:09.700
And I've limited to six
suggestions in this case, but

00:16:09.700 --> 00:16:15.420
you could use more if you had
more room on the screen.

00:16:15.420 --> 00:16:17.810
So again, it's more than the one
line of code I just showed

00:16:17.810 --> 00:16:20.860
you, but it's not that much
more code to add Semantic

00:16:20.860 --> 00:16:23.150
Tagging to any application
using Freebase data.

00:16:28.860 --> 00:16:31.580
So the next example I want
to talk about is Entity

00:16:31.580 --> 00:16:33.330
Collections.

00:16:33.330 --> 00:16:36.540
So far we've just looked at
entities from Freebase's

00:16:36.540 --> 00:16:40.500
Knowledge Graph one by one,
looking up an entity by a

00:16:40.500 --> 00:16:45.900
keyword or tagging entities one
at a time, but what if we

00:16:45.900 --> 00:16:48.810
want to look at the whole
collections of entities?

00:16:48.810 --> 00:16:50.930
You know, movies by Jeff
Bridges, rather

00:16:50.930 --> 00:16:52.470
than just Jeff Bridges.

00:16:56.740 --> 00:17:00.260
So remember I showed you in the
first example when we're

00:17:00.260 --> 00:17:03.650
doing Autosuggest, we can
constrain it to just music

00:17:03.650 --> 00:17:06.359
groups or just films.

00:17:06.359 --> 00:17:08.260
So I'm going to go into a little
bit more detail on the

00:17:08.260 --> 00:17:10.550
syntax of that filter
right now.

00:17:10.550 --> 00:17:14.840
You can see I have this
filter syntax.

00:17:14.840 --> 00:17:16.135
It's in circular brackets.

00:17:16.135 --> 00:17:18.859
It starts with All, which
means match all of the

00:17:18.859 --> 00:17:20.609
following constraints.

00:17:20.609 --> 00:17:23.030
And we only have one constraint
right now, which is

00:17:23.030 --> 00:17:26.030
that it has to have a certain
type and that type has to be

00:17:26.030 --> 00:17:29.620
slash film slash film which
is Freebase type.

00:17:29.620 --> 00:17:33.310
In fact, if you go to
Freebase.com/film/film, you'll

00:17:33.310 --> 00:17:34.530
see the definition
for the type.

00:17:34.530 --> 00:17:38.676
It's just one more of those
nodes in the Freebase Graph.

00:17:38.676 --> 00:17:47.900
Now if I change this, I can do
something like genre action

00:17:47.900 --> 00:17:50.800
and you'll see I get a new list
of films and these are

00:17:50.800 --> 00:17:52.800
all coming from Freebase,
again.

00:17:52.800 --> 00:17:56.000
And so now I've said, find me
all of the entities out of

00:17:56.000 --> 00:17:59.660
those 40 million entities that
match two constraints.

00:17:59.660 --> 00:18:01.040
They have to be a film
and they have to

00:18:01.040 --> 00:18:03.830
have the genre action.

00:18:03.830 --> 00:18:08.730
Now you'll notice type starts
with slashes and action is

00:18:08.730 --> 00:18:10.890
just a word.

00:18:10.890 --> 00:18:14.360
Genre is actually what we call
Metaschema in Freebase.

00:18:14.360 --> 00:18:18.420
And so we found that there
were a lot of different

00:18:18.420 --> 00:18:21.980
properties in Freebase that all
represented genre, so the

00:18:21.980 --> 00:18:24.920
genre of a movie or the
genre of a book.

00:18:24.920 --> 00:18:27.840
And so what we did was we
indexed those all under the

00:18:27.840 --> 00:18:30.730
same genre Metaschema.

00:18:30.730 --> 00:18:33.600
And you can see in that the
documentation we have a whole

00:18:33.600 --> 00:18:37.540
list of the Metaschema that
are available to you, just

00:18:37.540 --> 00:18:39.610
sort of shortcuts that
help you search for

00:18:39.610 --> 00:18:40.890
these things easier.

00:18:43.560 --> 00:18:52.090
I can also do contributor and if
I need to do something with

00:18:52.090 --> 00:18:53.405
spaces, I just put
it in quotes.

00:18:58.600 --> 00:19:01.570
And so now I'm seeing all the
films that have Jeff Bridges,

00:19:01.570 --> 00:19:05.190
well not all of them,
but the first seven.

00:19:05.190 --> 00:19:10.230
And again, remember I said
that Search API has a

00:19:10.230 --> 00:19:12.185
parameter that lets you specify
how many results you

00:19:12.185 --> 00:19:14.560
want to get back.

00:19:14.560 --> 00:19:17.300
Now again, I'm using Jeff
Bridges the string rather than

00:19:17.300 --> 00:19:19.110
an ID like film film.

00:19:19.110 --> 00:19:22.180
If I knew that unique MID for
Jeff Bridges, I could plug

00:19:22.180 --> 00:19:26.450
that in right here instead and
that would guarantee me that

00:19:26.450 --> 00:19:31.140
these are only movies with the
Jeff Bridges who won an Oscar

00:19:31.140 --> 00:19:34.280
for Best Actor, not some other
guy named Jeff Bridges.

00:19:37.650 --> 00:19:40.130
So let's look at what's
going on in the code.

00:19:42.910 --> 00:19:46.490
So again, this is the underlying
Search API.

00:19:46.490 --> 00:19:48.290
So you don't need to call it
from jQuery, you don't need to

00:19:48.290 --> 00:19:51.230
use JavaScript, you can make
these same sort of collection

00:19:51.230 --> 00:19:53.410
queries from whatever
programming language you're

00:19:53.410 --> 00:19:54.800
comfortable with.

00:19:54.800 --> 00:19:57.040
You can see we're not
even passing in a

00:19:57.040 --> 00:19:58.130
keyword query this time.

00:19:58.130 --> 00:20:00.490
We're just passing
in the filter.

00:20:00.490 --> 00:20:05.160
And so that's kind of the same
as saying the query is

00:20:05.160 --> 00:20:09.800
anything, a wild card, but
then applying filter to

00:20:09.800 --> 00:20:12.090
everything.

00:20:12.090 --> 00:20:21.690
So in this case, I've done a
collection of actors who

00:20:21.690 --> 00:20:25.120
starred in the upcoming movie
"The Great Gatsby".

00:20:25.120 --> 00:20:29.160
And you see I've used the MID
for "The Great Gatsby" because

00:20:29.160 --> 00:20:32.830
there are many films and this
is for the one that's coming

00:20:32.830 --> 00:20:37.280
out, I think, this week,
not the older versions.

00:20:37.280 --> 00:20:41.190
So there's a lot of different
ways that you can use this to

00:20:41.190 --> 00:20:43.540
filter down collections
of entities.

00:20:43.540 --> 00:20:46.520
Like I said, there's this
Metaschema that gives you

00:20:46.520 --> 00:20:48.670
shortcuts for querying
a lot of different

00:20:48.670 --> 00:20:50.660
properties at the same time.

00:20:50.660 --> 00:20:52.360
So I've included a couple
links here in the slide.

00:20:52.360 --> 00:20:54.670
You can read more about that in
the Freebase documentation.

00:20:54.670 --> 00:20:56.990
And there are a lot of examples
about the sort of

00:20:56.990 --> 00:20:58.240
things you can do.

00:21:01.710 --> 00:21:05.700
Once again, this is the same
sorted JSON data response that

00:21:05.700 --> 00:21:08.560
you're used to getting back
from the search API.

00:21:08.560 --> 00:21:14.130
So you see an ID, a name, what
it's notable for, and a score.

00:21:14.130 --> 00:21:16.290
Remember I said that this
is actually repeated.

00:21:16.290 --> 00:21:20.620
So there are many entries with
an MID and a score and a name.

00:21:25.920 --> 00:21:28.220
And this is just a little
snippet of JavaScript to show

00:21:28.220 --> 00:21:31.920
you how easy it is to do a query
like that in your code.

00:21:31.920 --> 00:21:36.490
So here, once again, I'm
calling the Search API

00:21:36.490 --> 00:21:38.840
directly from jQuery.

00:21:38.840 --> 00:21:41.050
I'm sending it my filter
which comes from that

00:21:41.050 --> 00:21:43.650
My Input text box.

00:21:43.650 --> 00:21:46.320
I'm telling it I want the
output to include the

00:21:46.320 --> 00:21:48.370
description of the topic.

00:21:48.370 --> 00:21:54.410
So the output parameter let's
you say that you want more

00:21:54.410 --> 00:21:59.150
than just that MID or basically
these fields here.

00:21:59.150 --> 00:22:04.900
So ID, name, notable for, all
come by default, but using the

00:22:04.900 --> 00:22:07.910
output parameter, you can say
I want description or I want

00:22:07.910 --> 00:22:10.860
any of those other thousands
of properties that are

00:22:10.860 --> 00:22:12.360
available in Freebase.

00:22:12.360 --> 00:22:14.180
So it's a really flexible API
and we're just kind of

00:22:14.180 --> 00:22:16.970
scratching the surface
in this demo.

00:22:16.970 --> 00:22:20.360
And then once you get that data
in the call back, you can

00:22:20.360 --> 00:22:23.070
really just iterate through
the results in that query.

00:22:23.070 --> 00:22:27.070
So you'll see the top level here
is result and in the loop

00:22:27.070 --> 00:22:31.480
here we're just going through
each item in that result and

00:22:31.480 --> 00:22:35.290
inserting it into the DOM in our
web page or displaying it

00:22:35.290 --> 00:22:38.120
in whichever app you're
working on.

00:22:43.230 --> 00:22:46.260
So now I want to extend this
idea of collections that we've

00:22:46.260 --> 00:22:48.830
built up to Geo Collections.

00:22:48.830 --> 00:22:55.410
So looking for entities not
based on the explicit

00:22:55.410 --> 00:22:58.190
relationships that they have
in the Knowledge Graph, but

00:22:58.190 --> 00:23:01.530
based on proximity
geographically.

00:23:01.530 --> 00:23:03.630
So this is something that we've
added just in the last

00:23:03.630 --> 00:23:06.050
year to the Search API.

00:23:06.050 --> 00:23:07.670
I think it's a pretty
cool feature.

00:23:07.670 --> 00:23:12.040
And I really hope to see more
apps using this feature.

00:23:12.040 --> 00:23:13.770
So let me show you a demo.

00:23:13.770 --> 00:23:19.650
This is Google Maps and this is
a little view of Paris with

00:23:19.650 --> 00:23:21.710
some markers on it they
correspond to tourist

00:23:21.710 --> 00:23:23.850
attractions in Paris.

00:23:23.850 --> 00:23:24.940
And so this is actually live.

00:23:24.940 --> 00:23:27.360
This is using the
Freebase API.

00:23:27.360 --> 00:23:31.440
And you'll see as I scroll
around the map, it's sending

00:23:31.440 --> 00:23:36.270
off the search requests and
finding me different tourist

00:23:36.270 --> 00:23:40.090
attractions based on where
I'm looking on the map.

00:23:40.090 --> 00:23:42.190
And I can click on any of those
markers and it's going

00:23:42.190 --> 00:23:45.490
to show me the name and the
description because, as you

00:23:45.490 --> 00:23:48.330
saw in the last example, I have
the option to say output

00:23:48.330 --> 00:23:50.280
the description as well.

00:23:50.280 --> 00:23:53.280
But I could display any number
of properties here about one

00:23:53.280 --> 00:23:55.600
of these tourist attractions.

00:23:55.600 --> 00:23:59.570
So I think this is a really cool
way to take millions of

00:23:59.570 --> 00:24:03.030
entities and put them in
context and make them

00:24:03.030 --> 00:24:06.420
interesting for the user by
constraining it to only that

00:24:06.420 --> 00:24:08.600
the ones that they care about
that specific point in time.

00:24:13.880 --> 00:24:20.500
Just to show you here I can zoom
all the way out and go to

00:24:20.500 --> 00:24:21.750
Rome instead.

00:24:28.100 --> 00:24:29.350
Tempting the demo gods, here.

00:24:40.110 --> 00:24:43.290
Once I get in close enough,
it should start pulling up

00:24:43.290 --> 00:24:44.870
entities from Freebase.

00:24:44.870 --> 00:24:52.240
So you can see this is a Roman
farm, Palazzo Farnese.

00:24:52.240 --> 00:24:56.600
So it really is a massive
dataset at your fingertips.

00:24:56.600 --> 00:24:59.670
And there are a lot of really
cool things that I think

00:24:59.670 --> 00:25:01.715
people could do with this
in their application.

00:25:05.150 --> 00:25:09.460
So here's what that API
request looks like.

00:25:09.460 --> 00:25:11.490
Notice the filter is getting a
little bit more complicated

00:25:11.490 --> 00:25:13.230
now, but it's still--

00:25:13.230 --> 00:25:16.650
well at least to me-- it
reads left to right.

00:25:16.650 --> 00:25:19.950
So we're saying match all of the
following constraints and

00:25:19.950 --> 00:25:23.020
we want them to have to type
Tourist Attraction so not just

00:25:23.020 --> 00:25:25.080
anything in Freebase that's Geo
coded because there could

00:25:25.080 --> 00:25:30.180
be other things that are not
relevant in terms of tourism.

00:25:30.180 --> 00:25:32.800
And then we have a more
complicated constraint over

00:25:32.800 --> 00:25:36.620
here on the right hand side
which is it has to be within

00:25:36.620 --> 00:25:38.685
5,000 feet of this latitude
and longitude.

00:25:41.550 --> 00:25:44.840
And so you can change the radius
of that circle that

00:25:44.840 --> 00:25:46.210
it's matching against.

00:25:46.210 --> 00:25:48.120
You can change the
Geo coordinates.

00:25:48.120 --> 00:25:50.360
As you saw in the example,
I was changing the Geo

00:25:50.360 --> 00:25:54.840
coordinates dynamically based
on the center of the map.

00:25:54.840 --> 00:25:59.150
So this query will find you
those tourist attractions

00:25:59.150 --> 00:26:02.405
within 5,000 feet of
somewhere in Paris.

00:26:07.210 --> 00:26:09.360
Here's what the code
looks like in

00:26:09.360 --> 00:26:12.590
JavaScript with jQuery.

00:26:12.590 --> 00:26:15.220
So you've seen a lot of
this stuff before.

00:26:15.220 --> 00:26:18.990
The filter, the output,
iterating through the results,

00:26:18.990 --> 00:26:23.600
and then just creating markers
with the Google Maps API and

00:26:23.600 --> 00:26:29.670
pinning those results with
a name to the map.

00:26:29.670 --> 00:26:32.300
I'm going to be uploading the
code for the full demo after

00:26:32.300 --> 00:26:35.670
the talk and you can see all the
other stuff I did to get

00:26:35.670 --> 00:26:37.130
the description in there,
but it's really not a

00:26:37.130 --> 00:26:38.470
lot of extra code.

00:26:43.080 --> 00:26:47.560
You can see here getting the
Geolocation, we're just going

00:26:47.560 --> 00:26:52.410
into the output, getting the
Geolocation property, then the

00:26:52.410 --> 00:26:56.020
location location Geolocation
property, and then the first

00:26:56.020 --> 00:26:57.270
entry in there.

00:27:02.550 --> 00:27:04.540
Now the last thing I
want to talk about

00:27:04.540 --> 00:27:07.460
is topical web links.

00:27:07.460 --> 00:27:11.880
And so there's a lot of
interesting things that you

00:27:11.880 --> 00:27:14.660
can do with a Knowledge Graph
of 40 million entities and

00:27:14.660 --> 00:27:17.680
having all those relationships
between them, but it becomes

00:27:17.680 --> 00:27:19.655
even more interesting when
you can link out to

00:27:19.655 --> 00:27:21.250
the rest of the web.

00:27:21.250 --> 00:27:24.180
And so, as I showed you at the
very beginning on that Keys

00:27:24.180 --> 00:27:27.750
tab in the Freebase, we have
foreign keys out to other

00:27:27.750 --> 00:27:31.530
databases or links to
other websites.

00:27:31.530 --> 00:27:34.520
So an entity on Freebase like
Jeff Bridges will have a

00:27:34.520 --> 00:27:37.410
Freebase page but he might also
have a YouTube channel,

00:27:37.410 --> 00:27:40.620
he might also have a page
on Google Play.

00:27:40.620 --> 00:27:43.150
And so we try to link out to as
many of those as possible.

00:27:43.150 --> 00:27:46.260
And we're continually adding
more of these foreign key

00:27:46.260 --> 00:27:50.280
relationships out to
other data sources.

00:27:50.280 --> 00:27:53.060
So let me show you how easy it
is to do something like that.

00:27:59.340 --> 00:28:01.810
Just choose Jeff Bridges.

00:28:01.810 --> 00:28:04.800
So this is actually an
unconstrained suggest box.

00:28:04.800 --> 00:28:08.870
That's why you see all kinds of
different entities there.

00:28:08.870 --> 00:28:14.220
And once I pick him, you'll see
the web links that we have

00:28:14.220 --> 00:28:16.900
right now for Jeff Bridges
in Freebase.

00:28:16.900 --> 00:28:18.710
There are actually more than
that, we have all the

00:28:18.710 --> 00:28:21.960
different language versions of
Wikipedia, but for this demo,

00:28:21.960 --> 00:28:24.630
I constrained them down
to this list.

00:28:24.630 --> 00:28:25.970
And you would probably want to
do the same thing in your

00:28:25.970 --> 00:28:31.150
application depending on which
sites you want to show.

00:28:31.150 --> 00:28:38.260
And you can see different
entities are going to have

00:28:38.260 --> 00:28:42.260
different types of links.

00:28:42.260 --> 00:28:50.090
So if I click here, I
can go to Richard

00:28:50.090 --> 00:28:51.340
Branson's Plus page.

00:28:58.330 --> 00:29:01.710
So not only is that a way that
you can provide more

00:29:01.710 --> 00:29:03.690
information to the users of
your application about the

00:29:03.690 --> 00:29:06.310
entity that they're looking at,
but it's also a way that

00:29:06.310 --> 00:29:08.170
you can tap into other APIs.

00:29:08.170 --> 00:29:10.450
And I'm going to be doing a Code
Lab tomorrow afternoon

00:29:10.450 --> 00:29:14.910
where I show how to use these
links into YouTube to do

00:29:14.910 --> 00:29:17.300
really cool mashups between
the Freebase API and the

00:29:17.300 --> 00:29:18.550
YouTube API.

00:29:26.450 --> 00:29:30.030
So to do these topical links
queries, we're actually using

00:29:30.030 --> 00:29:31.660
a different part of
the Freebase API

00:29:31.660 --> 00:29:33.560
called the Topic API.

00:29:33.560 --> 00:29:38.660
The Topic API you can think of
as a shortcut around the

00:29:38.660 --> 00:29:41.360
Search API where all we're
interested in is one node in

00:29:41.360 --> 00:29:44.000
the Graph, but everything there
is to know about that

00:29:44.000 --> 00:29:45.410
node in the Graph.

00:29:45.410 --> 00:29:47.230
And because we're asking for
everything there is know about

00:29:47.230 --> 00:29:49.600
that node in the Graph,
we, again,

00:29:49.600 --> 00:29:51.730
need some filter syntax.

00:29:51.730 --> 00:29:55.050
So here we can say, just filter
it down to values from

00:29:55.050 --> 00:29:57.920
the common topic social media
presence, which is like the

00:29:57.920 --> 00:30:02.780
Twitter and Facebook links, or
just filter it down to a topic

00:30:02.780 --> 00:30:05.850
equivalent web page, which is
things like Richard Branson's

00:30:05.850 --> 00:30:07.520
homepage or things like that.

00:30:10.970 --> 00:30:13.040
And in fact, we can add multiple
filter parameters on

00:30:13.040 --> 00:30:13.700
the end of that too.

00:30:13.700 --> 00:30:16.210
And so we can say, give us
both of those things, but

00:30:16.210 --> 00:30:17.460
nothing else.

00:30:19.670 --> 00:30:21.180
And this is what
it looks like.

00:30:21.180 --> 00:30:24.990
It's another nested
JSON structure.

00:30:24.990 --> 00:30:28.210
So we got the ID for the
entity at the top.

00:30:28.210 --> 00:30:29.820
Then we have a dictionary
of all the

00:30:29.820 --> 00:30:30.940
properties we asked for.

00:30:30.940 --> 00:30:33.300
In this case, it was just
the one property.

00:30:33.300 --> 00:30:36.040
And then within there, we
have an array of values.

00:30:36.040 --> 00:30:41.370
Each value has a value.

00:30:41.370 --> 00:30:44.990
The actual value that's stored
in the Graph, as well as, the

00:30:44.990 --> 00:30:46.640
textual representation
of the Graph.

00:30:46.640 --> 00:30:50.640
And so that may vary for
different types of values like

00:30:50.640 --> 00:30:52.560
dates and times.

00:30:52.560 --> 00:30:56.310
We also record the creator and
the timestamp of every fact in

00:30:56.310 --> 00:30:59.950
the Freebase Knowledge Graph
so you can always see who

00:30:59.950 --> 00:31:03.510
created what and when
it was created.

00:31:03.510 --> 00:31:07.200
And then lastly, some of the
properties like name, as you

00:31:07.200 --> 00:31:08.880
saw, get internationalized.

00:31:08.880 --> 00:31:12.000
And so if there is a language
attached to that particular

00:31:12.000 --> 00:31:15.070
value than the Lang property
will have that

00:31:15.070 --> 00:31:16.320
language code in there.

00:31:20.710 --> 00:31:23.800
So this is how easy it is to
do with jQuery, again.

00:31:23.800 --> 00:31:27.310
We're just attaching
that Suggest

00:31:27.310 --> 00:31:30.440
widget to an input field.

00:31:30.440 --> 00:31:32.750
Once we get that MID back--
remember, I said it's

00:31:32.750 --> 00:31:36.490
important to turn that keyword
search into an MID because

00:31:36.490 --> 00:31:38.940
once you have it, you can call
the Topic API, like we are

00:31:38.940 --> 00:31:43.310
here, and get structured data
about that specific entity

00:31:43.310 --> 00:31:46.310
that you chose from
the Autosuggest.

00:31:46.310 --> 00:31:48.800
And then once we have that data,
we can just loop through

00:31:48.800 --> 00:31:52.895
that array of values for the web
links and display them on

00:31:52.895 --> 00:31:54.145
the screen like I did.

00:31:59.460 --> 00:32:02.740
So those were the five different
examples of what

00:32:02.740 --> 00:32:05.050
we're doing with Freebase
and the Knowledge Graph.

00:32:05.050 --> 00:32:07.970
There's a lot more and so I
encourage you to look at the

00:32:07.970 --> 00:32:09.680
Freebase documentation.

00:32:09.680 --> 00:32:13.350
But definitely we've seen a
lot of people using the

00:32:13.350 --> 00:32:15.850
Autosuggest feature.

00:32:15.850 --> 00:32:17.620
I know there are a couple
startups that are using the

00:32:17.620 --> 00:32:18.730
Tagging feature.

00:32:18.730 --> 00:32:25.100
You've seen collections of
entities in Google Search.

00:32:25.100 --> 00:32:26.800
Geosearch is a really
exciting new feature

00:32:26.800 --> 00:32:27.990
that we've just added.

00:32:27.990 --> 00:32:30.930
And Topical Weblinks is a great
way to mashup Freebase

00:32:30.930 --> 00:32:32.400
data with other APIs.

00:32:35.900 --> 00:32:39.640
Here are more links just
to get you started.

00:32:39.640 --> 00:32:42.770
All the APIs that I talked about
today, as well as the

00:32:42.770 --> 00:32:47.400
different libraries that
let you use that code.

00:32:47.400 --> 00:32:50.230
I also mentioned I have a Code
Lab tomorrow that's 2:00 to

00:32:50.230 --> 00:32:52.540
4:00 in Room Three.

00:32:52.540 --> 00:32:54.320
So bring your laptop.

00:32:54.320 --> 00:32:55.620
We're going to be building
an app using

00:32:55.620 --> 00:32:57.690
Freebase and YouTube APIs.

00:32:57.690 --> 00:32:59.480
As well, I have office hours
tomorrow morning

00:32:59.480 --> 00:33:00.450
from 9:00 to 11:00.

00:33:00.450 --> 00:33:03.780
That's up on the third floor in
the Knowledge Graph booth.

00:33:03.780 --> 00:33:05.800
So you can come and ask me
anything about Freebase or the

00:33:05.800 --> 00:33:06.900
Knowledge Graph.

00:33:06.900 --> 00:33:10.730
I'd be happy to hear about
what you're working on.

00:33:10.730 --> 00:33:14.160
So thank you very much
for coming out.

00:33:14.160 --> 00:33:15.840
Here's the link to the
slides online.

00:33:15.840 --> 00:33:18.480
Here's how to contact
me online.

00:33:18.480 --> 00:33:20.950
And I'd be happy to take any
questions if you'd like to

00:33:20.950 --> 00:33:23.042
step up to the mic.

00:33:23.042 --> 00:33:34.590
[APPLAUSE]

00:33:34.590 --> 00:33:34.780
AUDIENCE: Hi there.

00:33:34.780 --> 00:33:37.450
I've got a quick question
for you, if I could.

00:33:37.450 --> 00:33:38.680
SHAWN SIMISTER: Absolutely.

00:33:38.680 --> 00:33:40.230
AUDIENCE: One of the things
you mentioned is it it's

00:33:40.230 --> 00:33:43.520
possible to get an RDF
dump of Freebase.

00:33:43.520 --> 00:33:47.580
Are there ways to get filtered
versions of that down?

00:33:47.580 --> 00:33:50.290
For example, if we wanted just
an RDF dump of a particular

00:33:50.290 --> 00:33:51.080
entity collection.

00:33:51.080 --> 00:33:52.590
Or should we get the
whole thing and

00:33:52.590 --> 00:33:55.300
then filter it ourselves?

00:33:55.300 --> 00:33:57.185
SHAWN SIMISTER: Right now,
there's only one RDF dump.

00:33:57.185 --> 00:33:58.760
So you have to download
the whole thing

00:33:58.760 --> 00:33:59.580
and filter it yourself.

00:33:59.580 --> 00:34:00.920
AUDIENCE: OK.

00:34:00.920 --> 00:34:03.510
SHAWN SIMISTER: We have had a
number of people asking for

00:34:03.510 --> 00:34:08.179
different sections of Freebase
as a data dump so we're

00:34:08.179 --> 00:34:10.300
considering different ways to
do that but we haven't found

00:34:10.300 --> 00:34:14.739
the right way to provide slices
of the data dump.

00:34:14.739 --> 00:34:16.250
It is a pretty simple format.

00:34:16.250 --> 00:34:20.230
So the RDF format that we use is
one triple per line, which

00:34:20.230 --> 00:34:21.980
means you can kind of
grep over the file.

00:34:21.980 --> 00:34:25.010
You don't need a specific RDF
parser if all you want to do

00:34:25.010 --> 00:34:27.540
is filter out lines that
have a certain

00:34:27.540 --> 00:34:29.730
type of data on them.

00:34:29.730 --> 00:34:32.199
So that's sort of the best
way to handle that

00:34:32.199 --> 00:34:32.909
use case right now.

00:34:32.909 --> 00:34:35.230
But we're looking
for better ways.

00:34:35.230 --> 00:34:35.310
AUDIENCE: All right.

00:34:35.310 --> 00:34:35.960
Thank you.

00:34:35.960 --> 00:34:38.000
SHAWN SIMISTER: Thank you.

00:34:38.000 --> 00:34:39.699
AUDIENCE: I have two
quick questions.

00:34:39.699 --> 00:34:44.320
One, how big is the RDF dump,
like in megabytes, gigabytes?

00:34:44.320 --> 00:34:46.739
Is there an estimate?

00:34:46.739 --> 00:34:47.310
SHAWN SIMISTER: What is it?

00:34:47.310 --> 00:34:49.889
It's around 15 gigabytes now.

00:34:49.889 --> 00:34:53.530
And that's a zip file so when
you unzip it, it gets about

00:34:53.530 --> 00:34:55.409
five times bigger.

00:34:55.409 --> 00:34:59.350
So you need some disk
space to go over it.

00:34:59.350 --> 00:35:04.210
Because of the format, like I
said, it's a text file that's

00:35:04.210 --> 00:35:08.610
been gzipped with one triple
in the Graph per line.

00:35:08.610 --> 00:35:11.870
You can actually use some tools
like gzip grep to go

00:35:11.870 --> 00:35:14.310
through it without
unzipping it.

00:35:14.310 --> 00:35:17.270
AUDIENCE: And also, I went to
the site and I couldn't figure

00:35:17.270 --> 00:35:20.500
out how to get a list
of all the object

00:35:20.500 --> 00:35:21.820
types or the node types.

00:35:21.820 --> 00:35:22.160
SHAWN SIMISTER: OK.

00:35:22.160 --> 00:35:24.860
AUDIENCE: Is there an API to get
that list or is there just

00:35:24.860 --> 00:35:26.110
a publicly available?

00:35:29.220 --> 00:35:31.150
I mean, I know it's on the front
page but that was only

00:35:31.150 --> 00:35:32.380
like a subsidized list.

00:35:32.380 --> 00:35:33.630
SHAWN SIMISTER: Yeah.

00:35:37.750 --> 00:35:40.260
So yeah, on the front page of
Freebase here, we've got a

00:35:40.260 --> 00:35:43.020
list of all the categories
of schema that we have.

00:35:43.020 --> 00:35:45.590
And then if you drill down into
one of those categories,

00:35:45.590 --> 00:35:47.170
you'll see all the types.

00:35:47.170 --> 00:35:49.440
So we don't have all types on
one page because there's

00:35:49.440 --> 00:35:50.980
thousands of them.

00:35:50.980 --> 00:35:54.220
But that's how you're able
to navigate them.

00:35:54.220 --> 00:35:56.590
And then from there, you can
drill down into any one of

00:35:56.590 --> 00:35:58.600
those types and see all
the properties that go

00:35:58.600 --> 00:36:00.230
along with that type.

00:36:00.230 --> 00:36:03.270
So that's how Freebase
is organized.

00:36:08.240 --> 00:36:10.230
One more question at the back.

00:36:10.230 --> 00:36:11.480
AUDIENCE: Yeah.

00:36:11.480 --> 00:36:13.720
In the JSON responses
I noticed there

00:36:13.720 --> 00:36:15.165
was like a cost node--

00:36:15.165 --> 00:36:15.925
SHAWN SIMISTER: Yeah.

00:36:15.925 --> 00:36:18.350
AUDIENCE: --I just had a
question, what was that?

00:36:18.350 --> 00:36:22.580
SHAWN SIMISTER: Yeah, that's
something that we just have in

00:36:22.580 --> 00:36:25.730
there for debugging just
to monitor the

00:36:25.730 --> 00:36:27.150
performance of the APIs.

00:36:27.150 --> 00:36:29.520
AUDIENCE: So it's not like cost
in terms of monetary?

00:36:29.520 --> 00:36:29.810
SHAWN SIMISTER: Yeah.

00:36:29.810 --> 00:36:32.980
The API is completely
free and we have no

00:36:32.980 --> 00:36:33.990
plans to change that.

00:36:33.990 --> 00:36:34.600
AUDIENCE: Cool.

00:36:34.600 --> 00:36:36.200
Thanks.

00:36:36.200 --> 00:36:38.150
AUDIENCE: I'm just curious
about equality.

00:36:38.150 --> 00:36:41.340
So say, the popular actress Jane
Doe goes and gets married

00:36:41.340 --> 00:36:42.950
and is now Jane Smith
and the entity

00:36:42.950 --> 00:36:44.650
appears twice in Freebase.

00:36:44.650 --> 00:36:46.950
I want to ask all of the movies
that Jane Doe or Jane

00:36:46.950 --> 00:36:50.630
Smith or any name of that entity
appeared in, how does

00:36:50.630 --> 00:36:53.270
Freebase handle that?

00:36:53.270 --> 00:36:54.030
SHAWN SIMISTER: Changing
names is

00:36:54.030 --> 00:36:55.690
actually not that difficult.

00:36:55.690 --> 00:36:56.840
It happens quite a bit.

00:36:56.840 --> 00:36:59.650
And because we have those unique
MIDs for each node in

00:36:59.650 --> 00:37:00.230
the Graph--

00:37:00.230 --> 00:37:01.590
AUDIENCE: But in multiple
sources.

00:37:01.590 --> 00:37:03.670
It if the entity appears
twice, and I know

00:37:03.670 --> 00:37:04.550
that they're equal.

00:37:04.550 --> 00:37:06.190
Is there a way to
tell Freebase?

00:37:06.190 --> 00:37:06.510
SHAWN SIMISTER: Right.

00:37:06.510 --> 00:37:09.790
So that's a more difficult
case when we load two

00:37:09.790 --> 00:37:13.050
authoritative sources and they
both have a Jane Doe.

00:37:13.050 --> 00:37:15.700
And we kind of discover that
after the fact and we have to

00:37:15.700 --> 00:37:17.170
reconcile them together.

00:37:17.170 --> 00:37:19.710
So we have a number of tools for
matching them and noticing

00:37:19.710 --> 00:37:22.340
when two entities share enough
properties that maybe it's

00:37:22.340 --> 00:37:25.450
worthwhile for a human
to take a look at it.

00:37:25.450 --> 00:37:28.340
And then we actually flag
them for a merge.

00:37:28.340 --> 00:37:31.020
So actually anyone who logs
into Freebase can find

00:37:31.020 --> 00:37:33.530
duplicate topics and flag
them for a merge.

00:37:33.530 --> 00:37:35.670
Then they go into a queue
where they're reviewed.

00:37:35.670 --> 00:37:39.450
And once they're reviewed,
there's a software process

00:37:39.450 --> 00:37:42.090
that will do with the messy work
of merging them together.

00:37:42.090 --> 00:37:42.583
AUDIENCE: [INAUDIBLE].

00:37:42.583 --> 00:37:43.569
SHAWN SIMISTER: Yeah.

00:37:43.569 --> 00:37:45.050
AUDIENCE: [INAUDIBLE].

00:37:45.050 --> 00:37:45.430
SHAWN SIMISTER: Yes.

00:37:45.430 --> 00:37:48.310
And please, if you're willing
to help us out work through

00:37:48.310 --> 00:37:53.678
that queue of duplicates,
it's a very noble duty.

00:37:53.678 --> 00:37:54.650
AUDIENCE: Hi.

00:37:54.650 --> 00:37:58.430
I noticed you had a score factor
for entity types that

00:37:58.430 --> 00:37:59.990
you get back.

00:37:59.990 --> 00:38:01.430
How is that calculated?

00:38:01.430 --> 00:38:03.530
Or what does it mean?

00:38:03.530 --> 00:38:06.720
SHAWN SIMISTER: So the score on
the ranked list of results

00:38:06.720 --> 00:38:09.200
is kind of an opaque number.

00:38:09.200 --> 00:38:12.525
We don't give any guarantees
about you could store that in

00:38:12.525 --> 00:38:14.110
your database and use
it a year later and

00:38:14.110 --> 00:38:17.480
it would mean anything.

00:38:17.480 --> 00:38:19.720
The only real guarantee is that
something that's more

00:38:19.720 --> 00:38:21.920
relevant to your query will
have a higher number and

00:38:21.920 --> 00:38:25.640
something that's less relevant
will have a lower number.

00:38:25.640 --> 00:38:28.110
But yeah, it's based on a number
of things, either in

00:38:28.110 --> 00:38:30.640
the Freebase Graph and in the
Knowledge Graph that we use to

00:38:30.640 --> 00:38:32.700
rank those search results.

00:38:32.700 --> 00:38:36.410
AUDIENCE: So for example, if I
have, let's say, Madonna and

00:38:36.410 --> 00:38:39.290
it could be a single but it
could also be some other

00:38:39.290 --> 00:38:43.330
personality, does the score mean
anything between the two?

00:38:43.330 --> 00:38:45.240
Can I use it to sort?

00:38:45.240 --> 00:38:45.870
SHAWN SIMISTER: Yeah,
absolutely.

00:38:45.870 --> 00:38:51.640
So the score of the result
should reflect the notability

00:38:51.640 --> 00:38:55.070
of that entity.

00:38:55.070 --> 00:38:57.880
So the Madonna that I think you
and I are both thinking

00:38:57.880 --> 00:38:59.950
about right now is probably the
one that's going to have

00:38:59.950 --> 00:39:00.960
the highest score.

00:39:00.960 --> 00:39:03.110
AUDIENCE: And that's
based on what?

00:39:03.110 --> 00:39:05.230
SHAWN SIMISTER: It's based on
where we've seen it in the

00:39:05.230 --> 00:39:08.970
data that we pull from, so
Wikipedia and other sources,

00:39:08.970 --> 00:39:11.450
as well as some other signals
that we look at internally.

00:39:11.450 --> 00:39:11.564
AUDIENCE: All right.

00:39:11.564 --> 00:39:12.110
Thank you.

00:39:12.110 --> 00:39:14.170
SHAWN SIMISTER: Absolutely.

00:39:14.170 --> 00:39:17.950
AUDIENCE: If you're developing a
schema in Freebase yourself,

00:39:17.950 --> 00:39:21.880
does the key somehow support
that that gets conflated?

00:39:21.880 --> 00:39:24.770
You're able to do the same
searches with the API on the

00:39:24.770 --> 00:39:27.230
things that you're developing
sort of privately in Freebase?

00:39:27.230 --> 00:39:28.260
SHAWN SIMISTER: Yeah.

00:39:28.260 --> 00:39:32.080
So anyone with an account can
create their own schema.

00:39:32.080 --> 00:39:33.770
It goes under their
own name space.

00:39:33.770 --> 00:39:36.790
So you'll have a user name and
your schema will all start

00:39:36.790 --> 00:39:39.050
with slash user slash
your username and

00:39:39.050 --> 00:39:40.800
then the schema key.

00:39:40.800 --> 00:39:44.580
So no one can overwrite anyone
else's schema that way.

00:39:44.580 --> 00:39:48.180
And then our mailing list has
an informal process of

00:39:48.180 --> 00:39:51.910
promotion where you can kind
of call out your schema,

00:39:51.910 --> 00:39:55.890
discuss it with people,
and say, what do you

00:39:55.890 --> 00:39:56.520
think of this schema?

00:39:56.520 --> 00:39:59.700
Do you think it's worth
promoting into one of those

00:39:59.700 --> 00:40:02.320
common name spaces that
everyone can use?

00:40:02.320 --> 00:40:04.230
But yeah, you can definitely
develop your own schema

00:40:04.230 --> 00:40:07.260
without worrying about
trotting on

00:40:07.260 --> 00:40:08.140
other people's data.

00:40:08.140 --> 00:40:10.070
And anything that you
do on your own is

00:40:10.070 --> 00:40:11.220
available through the APIs.

00:40:11.220 --> 00:40:11.703
AUDIENCE: Great.

00:40:11.703 --> 00:40:12.670
Thank you.

00:40:12.670 --> 00:40:14.140
SHAWN SIMISTER: Awesome.

00:40:14.140 --> 00:40:14.590
AUDIENCE: Hi.

00:40:14.590 --> 00:40:18.850
Is there a RDF notation or a
schema.org notation to help

00:40:18.850 --> 00:40:23.180
you structure the data
from common websites?

00:40:23.180 --> 00:40:24.700
SHAWN SIMISTER: It's something
we've been working on.

00:40:24.700 --> 00:40:29.890
So the schema in Freebase tends
to be a little bit more

00:40:29.890 --> 00:40:33.730
detailed, a little bit more
denormalized than schema.org.

00:40:33.730 --> 00:40:38.480
And so we've taken a couple
cracks at doing a mapping

00:40:38.480 --> 00:40:40.240
between those two schemas.

00:40:40.240 --> 00:40:43.720
We don't have anything automated
where you could make

00:40:43.720 --> 00:40:45.580
a Freebase request
and then just get

00:40:45.580 --> 00:40:47.000
schema.org on the page.

00:40:47.000 --> 00:40:48.090
But I think that would
be something

00:40:48.090 --> 00:40:49.715
interesting to look into.

00:40:49.715 --> 00:40:53.894
AUDIENCE: [INAUDIBLE] tag
content on HTML to help you

00:40:53.894 --> 00:40:55.590
directly from that
point of view?

00:40:55.590 --> 00:40:56.240
SHAWN SIMISTER: Yeah.

00:40:56.240 --> 00:40:56.810
Yeah.

00:40:56.810 --> 00:40:57.840
I think that would
be a great idea.

00:40:57.840 --> 00:40:59.890
AUDIENCE: And another thing,
do you rate the link or the

00:40:59.890 --> 00:41:02.490
facts between entities or not?

00:41:02.490 --> 00:41:02.790
SHAWN SIMISTER: I'm sorry.

00:41:02.790 --> 00:41:03.210
Could you repeat that?

00:41:03.210 --> 00:41:04.930
AUDIENCE: Do you rate
the links or the

00:41:04.930 --> 00:41:06.700
facts between entities?

00:41:06.700 --> 00:41:09.640
Is there a score?

00:41:09.640 --> 00:41:11.980
SHAWN SIMISTER: There's no score
on the relationships

00:41:11.980 --> 00:41:12.780
between entities.

00:41:12.780 --> 00:41:17.200
So things are either true or
they're not in Freebase, or

00:41:17.200 --> 00:41:18.640
they're a bug.

00:41:18.640 --> 00:41:21.440
We don't have degrees of
truth in Freebase.

00:41:24.050 --> 00:41:24.610
AUDIENCE: Two short questions.

00:41:24.610 --> 00:41:25.050
SHAWN SIMISTER: Yeah.

00:41:25.050 --> 00:41:26.300
AUDIENCE: [INAUDIBLE]?

00:41:35.420 --> 00:41:37.150
SHAWN SIMISTER: How do we manage
updates and how do we

00:41:37.150 --> 00:41:39.880
make sure that the updates
are not garbage?

00:41:39.880 --> 00:41:41.390
OK.

00:41:41.390 --> 00:41:44.220
We've run out of time here, but
I can definitely answer

00:41:44.220 --> 00:41:47.910
your question after this.

00:41:47.910 --> 00:41:49.160
Thank you very much.

