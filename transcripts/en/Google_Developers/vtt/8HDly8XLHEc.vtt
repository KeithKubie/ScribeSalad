WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:03.050
So you've implemented sign-in
with Google technology

00:00:03.050 --> 00:00:05.790
in your Android app, and you're
already seeing the benefits.

00:00:05.790 --> 00:00:07.620
There's greater
user satisfaction,

00:00:07.620 --> 00:00:09.810
there's easier security
infrastructure,

00:00:09.810 --> 00:00:11.730
and there's less
danger from hackers.

00:00:11.730 --> 00:00:13.230
Great, you're thinking, I'm set.

00:00:13.230 --> 00:00:14.960
I'm good to go.

00:00:14.960 --> 00:00:15.560
But wait.

00:00:15.560 --> 00:00:18.430
What about my user data
that I keep on my servers?

00:00:18.430 --> 00:00:21.260
How do I ensure that users
with Google sign-in storing

00:00:21.260 --> 00:00:23.720
data with me are still secure?

00:00:23.720 --> 00:00:24.669
Well, relax.

00:00:24.669 --> 00:00:26.210
You don't need to
pull your hair out,

00:00:26.210 --> 00:00:28.250
and you don't need
to be that guy.

00:00:28.250 --> 00:00:30.490
I'm Laurence Moroney,
and in this video

00:00:30.490 --> 00:00:32.560
I'll show you just
how easy it is for you

00:00:32.560 --> 00:00:34.700
to secure your servers, too.

00:00:34.700 --> 00:00:36.880
First, let's take a
look at what happens

00:00:36.880 --> 00:00:39.020
when users sign into
your app, but then need

00:00:39.020 --> 00:00:41.840
to provide identity to
your backend server.

00:00:41.840 --> 00:00:43.040
Consider this scenario.

00:00:43.040 --> 00:00:44.670
You've built an app
that delivers food

00:00:44.670 --> 00:00:46.350
to them at their location.

00:00:46.350 --> 00:00:48.880
They sign in to your app,
and your app gets their email

00:00:48.880 --> 00:00:50.530
address as their identity.

00:00:50.530 --> 00:00:53.650
But you store their address
and order preferences

00:00:53.650 --> 00:00:55.810
in a database on your server.

00:00:55.810 --> 00:00:57.910
Now, unless your
endpoint is protected

00:00:57.910 --> 00:01:00.760
with an off mechanism,
attackers could potentially

00:01:00.760 --> 00:01:04.390
access your user database by
guessing the email addresses

00:01:04.390 --> 00:01:05.420
of the users.

00:01:05.420 --> 00:01:06.760
And that's not hard.

00:01:06.760 --> 00:01:09.200
This isn't just a
bad user experience.

00:01:09.200 --> 00:01:13.020
It's a risk that customer data
can be stolen and misused.

00:01:13.020 --> 00:01:16.320
Now, you can mitigate this by
getting a token from Google

00:01:16.320 --> 00:01:19.140
when they sign in to your app,
and then passing this token

00:01:19.140 --> 00:01:20.970
to your server instead.

00:01:20.970 --> 00:01:23.340
Your server would then
validate the token,

00:01:23.340 --> 00:01:25.710
and if it really did come
from your app, really

00:01:25.710 --> 00:01:28.500
is for the desired user, and
really is a genuine Google

00:01:28.500 --> 00:01:31.360
token, your server can
rest assured that it really

00:01:31.360 --> 00:01:35.900
is your user making the call
and not a nefarious middleman.

00:01:35.900 --> 00:01:39.370
In the case of a fake token
then being passed to the server,

00:01:39.370 --> 00:01:41.260
when your server
sends it to Google,

00:01:41.260 --> 00:01:43.260
it will be rejected
as counterfeit,

00:01:43.260 --> 00:01:45.460
and your user data is safe.

00:01:45.460 --> 00:01:47.790
So what are the
steps for doing this?

00:01:47.790 --> 00:01:49.470
Well, first of all,
your Android app

00:01:49.470 --> 00:01:52.200
can get a token after
signing in with Google.

00:01:52.200 --> 00:01:54.780
And there's a great sample
that demonstrates that here.

00:01:54.780 --> 00:01:57.320
It uses the
requestToken method when

00:01:57.320 --> 00:02:00.160
calling the
GoogleSignInOptions objects.

00:02:00.160 --> 00:02:03.150
And once it has the token,
it can post it over HTTPS

00:02:03.150 --> 00:02:06.840
to your server, which will
then try to validate it.

00:02:06.840 --> 00:02:10.539
Token verification is available
in the API client libraries

00:02:10.539 --> 00:02:13.990
for Java, PHP,
Python, and Node.js.

00:02:13.990 --> 00:02:16.030
Here's what the
server-side Java code might

00:02:16.030 --> 00:02:18.380
look like to verify your token.

00:02:18.380 --> 00:02:20.780
And it's really
as simple as that.

00:02:20.780 --> 00:02:22.380
That's it for this DevByte.

00:02:22.380 --> 00:02:24.960
Stay tuned to the Android
Developers channel on YouTube

00:02:24.960 --> 00:02:28.790
for more, including how you can
write all the code to achieve

00:02:28.790 --> 00:02:30.540
this kind of
sign-in and allowing

00:02:30.540 --> 00:02:32.345
you to secure your servers.

00:02:32.345 --> 00:02:34.970
I'm Laurence Moroney, and you're
going to go build better apps.

00:02:34.970 --> 00:02:38.020
[MUSIC PLAYING]

