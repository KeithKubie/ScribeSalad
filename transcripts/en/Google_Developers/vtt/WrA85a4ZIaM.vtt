WEBVTT
Kind: captions
Language: en

00:00:01.550 --> 00:00:03.290
Good morning.

00:00:03.290 --> 00:00:06.940
Welcome to the session on
Mobile Web Performance Auditing.

00:00:06.940 --> 00:00:10.510
If you can see past the
glare of lights on bald,

00:00:10.510 --> 00:00:13.160
you'll see that that's
what I look like.

00:00:13.160 --> 00:00:17.170
You can find me on Google+
as Paul Lewis and on Twitter

00:00:17.170 --> 00:00:19.450
as @aerotwist.

00:00:19.450 --> 00:00:22.140
Hey Paul, would you mind
a performance audit?

00:00:22.140 --> 00:00:24.367
This is what my
colleagues would say.

00:00:24.367 --> 00:00:26.450
Or if they're feeling
particularly urban that day,

00:00:26.450 --> 00:00:28.970
'sup, Paul?

00:00:28.970 --> 00:00:31.690
The point here is
that over time, people

00:00:31.690 --> 00:00:34.350
have asked me to figure
out whether something

00:00:34.350 --> 00:00:35.640
is fast or not.

00:00:35.640 --> 00:00:37.970
And so, I've built
up, over time,

00:00:37.970 --> 00:00:40.320
a way of figuring that out.

00:00:40.320 --> 00:00:42.190
And that's what I wanted
to share with you.

00:00:42.190 --> 00:00:43.630
So maybe you find
yourself in this situation

00:00:43.630 --> 00:00:45.930
where people are asking you
to do more performance work

00:00:45.930 --> 00:00:48.210
and you're wondering how
you should go about it.

00:00:48.210 --> 00:00:48.710
Welcome.

00:00:48.710 --> 00:00:50.334
This is what we're
going to talk about.

00:00:50.334 --> 00:00:51.710
Good.

00:00:51.710 --> 00:00:55.840
So, the first question
is why even bother?

00:00:55.840 --> 00:00:57.400
What's the point?

00:00:57.400 --> 00:01:00.120
Well, as you probably
gathered from all the sessions

00:01:00.120 --> 00:01:04.242
that we've been doing,
smartphones are on the rise.

00:01:04.242 --> 00:01:06.700
Which isn't to say there's
going to be a rebellion-- I just

00:01:06.700 --> 00:01:08.650
mean that more people
are using them.

00:01:08.650 --> 00:01:14.850
And one study reckons that just
over 1/3 of American adults

00:01:14.850 --> 00:01:17.199
are using their smartphone
as their primary means

00:01:17.199 --> 00:01:17.990
of internet access.

00:01:17.990 --> 00:01:19.517
As Paul Irish said
in his session,

00:01:19.517 --> 00:01:21.600
that means that the first
experience that somebody

00:01:21.600 --> 00:01:23.990
has of you and your brand is
going to be on their phone.

00:01:27.470 --> 00:01:29.740
This trend isn't just America.

00:01:29.740 --> 00:01:31.230
It is actually further afield.

00:01:31.230 --> 00:01:35.260
This is the global
internet traffic percentage

00:01:35.260 --> 00:01:37.030
for mobile is on the way up.

00:01:37.030 --> 00:01:39.700
It's just crossing the 30% mark.

00:01:39.700 --> 00:01:41.200
Sometime in the
middle of next year,

00:01:41.200 --> 00:01:44.450
if the trend line is to be
believed, we will cross 50%.

00:01:44.450 --> 00:01:47.200
That will make it the majority.

00:01:47.200 --> 00:01:49.640
The thing about these devices,
more people are using them,

00:01:49.640 --> 00:01:51.139
but they're performance
constrained.

00:01:51.139 --> 00:01:53.720
If you have a performance
problem on your desktop,

00:01:53.720 --> 00:01:55.710
when it hits the
mobile device, it's

00:01:55.710 --> 00:01:57.230
going to be really painful.

00:01:57.230 --> 00:02:00.040
And if you're asking yourself
whether this is a big deal,

00:02:00.040 --> 00:02:01.790
let's just cover the
stats very quickly,

00:02:01.790 --> 00:02:03.290
a couple that are interesting.

00:02:03.290 --> 00:02:07.260
A 200 millisecond
delay to Google results

00:02:07.260 --> 00:02:10.030
cause a 0.3% loss in engagement.

00:02:10.030 --> 00:02:13.830
This is a study that
we did a few years ago.

00:02:13.830 --> 00:02:15.750
But if you like your
stats a little bit more

00:02:15.750 --> 00:02:19.320
on the positive side, this
is what Etsy had to say,

00:02:19.320 --> 00:02:20.290
Lara Swanson from Etsy.

00:02:20.290 --> 00:02:21.748
She said, when we
eliminated jank--

00:02:21.748 --> 00:02:25.080
and we'll talk about that in a
little bit-- on Etsy's activity

00:02:25.080 --> 00:02:27.150
feed, we saw people
favorite it more often

00:02:27.150 --> 00:02:31.370
and favorite more things, which
is a sort of meta indicator

00:02:31.370 --> 00:02:33.940
for conversions, really.

00:02:33.940 --> 00:02:35.640
So, performance matters.

00:02:35.640 --> 00:02:38.752
Or as I like to say,
hashtag, perfmatters--

00:02:38.752 --> 00:02:41.210
which you can track along with,
or you can get the sticker.

00:02:41.210 --> 00:02:42.430
I've actually got stickers.

00:02:42.430 --> 00:02:43.510
Come and get a sticker.

00:02:43.510 --> 00:02:46.130
You can wear it like a
badge, put it on your laptop,

00:02:46.130 --> 00:02:48.000
put it on somebody
else's laptop as

00:02:48.000 --> 00:02:50.620
a passive aggressive measure.

00:02:50.620 --> 00:02:56.370
Just, you know, don't want
to call it out, but yeah.

00:02:56.370 --> 00:02:57.990
But the thing about
mobile, as well,

00:02:57.990 --> 00:03:01.789
is that because the browser is
the only thing that people have

00:03:01.789 --> 00:03:03.330
on the screen at
that time, they have

00:03:03.330 --> 00:03:07.260
these really high expectations--
in the way they also

00:03:07.260 --> 00:03:08.225
interact with it.

00:03:08.225 --> 00:03:11.650
With the touch, you
feel the latency

00:03:11.650 --> 00:03:14.960
in a way you don't
necessarily feel with a mouse.

00:03:14.960 --> 00:03:18.160
So not only are these devices
performance constrained,

00:03:18.160 --> 00:03:20.270
but people have
higher expectations.

00:03:20.270 --> 00:03:21.669
Yay.

00:03:21.669 --> 00:03:23.960
And you might ask yourself
the question, well, isn't it

00:03:23.960 --> 00:03:27.280
the browser's job to
make things go faster?

00:03:27.280 --> 00:03:30.220
And the answer is,
yeah, absolutely.

00:03:30.220 --> 00:03:33.810
And from a Chrome point of
view, we have, and we are doing,

00:03:33.810 --> 00:03:37.080
and we will continue
to make things faster.

00:03:37.080 --> 00:03:39.540
This is something that we
take very, very seriously.

00:03:39.540 --> 00:03:42.170
However, there is a
whole suite of things

00:03:42.170 --> 00:03:44.130
that we, as developers,
get to control

00:03:44.130 --> 00:03:48.130
and we get to decide
for our sites and apps.

00:03:48.130 --> 00:03:50.887
And so this is where
the audit comes in.

00:03:50.887 --> 00:03:52.720
Because it's really
talking about the things

00:03:52.720 --> 00:03:54.220
that we get to
control and how we

00:03:54.220 --> 00:03:56.261
can make sure that we're
working with the browser

00:03:56.261 --> 00:03:57.630
rather than against it.

00:03:57.630 --> 00:04:00.520
So, what then does the
performance audit look like?

00:04:00.520 --> 00:04:02.780
Well, for me, it
falls into two parts--

00:04:02.780 --> 00:04:06.770
the page load, how quickly did
we get something on the screen?

00:04:06.770 --> 00:04:10.300
And then, once it's on the
screen, how well did it run?

00:04:10.300 --> 00:04:13.520
Were the scrolling, the
animations, interactions,

00:04:13.520 --> 00:04:14.870
were those all fast?

00:04:14.870 --> 00:04:16.709
So we'll step through
it bit by bit.

00:04:16.709 --> 00:04:19.352
We'll start off with page load.

00:04:19.352 --> 00:04:21.800
Now, the first tool I
always go to on the audit

00:04:21.800 --> 00:04:24.470
would be this,
PageSpeed Insights.

00:04:24.470 --> 00:04:28.040
All you do is you pop in your
URL like so, hit Analyze.

00:04:28.040 --> 00:04:30.430
It's really complicated.

00:04:30.430 --> 00:04:34.040
And ta-da, you get a
score out the other side.

00:04:34.040 --> 00:04:37.140
You get a score for desktop,
you get a score for mobile,

00:04:37.140 --> 00:04:39.820
and it'll give you some
user experience hints

00:04:39.820 --> 00:04:43.200
as well, like top targets,
legibility of your text,

00:04:43.200 --> 00:04:44.970
and so forth.

00:04:44.970 --> 00:04:49.030
So, if you've got problems
that might not be obvious

00:04:49.030 --> 00:04:50.940
when you look at your
device and you run it,

00:04:50.940 --> 00:04:54.192
then this will start to
pick them out for you.

00:04:54.192 --> 00:04:56.150
People ask what kind of
scores they should get.

00:04:56.150 --> 00:04:58.430
These are my own
personal scores.

00:04:58.430 --> 00:05:03.520
85 on mobile, 90
on desktop, and I

00:05:03.520 --> 00:05:06.030
don't want to see any UX issues.

00:05:06.030 --> 00:05:08.030
You could disagree with these.

00:05:08.030 --> 00:05:11.030
I would recommend that you going
and have a look at what you're

00:05:11.030 --> 00:05:14.610
actually getting as your scores.

00:05:14.610 --> 00:05:17.280
I tend to say that if you're
getting in this range,

00:05:17.280 --> 00:05:19.990
you haven't got any
major issues there.

00:05:19.990 --> 00:05:22.862
But what kind of things
are we looking for?

00:05:22.862 --> 00:05:25.140
Well, I'm going to go to
blast through what I consider

00:05:25.140 --> 00:05:27.598
to be the bread and butter,
the things I think we've talked

00:05:27.598 --> 00:05:29.930
about time and time again as
developers over the years.

00:05:29.930 --> 00:05:34.060
First one is unoptimized images,
because unoptimized images

00:05:34.060 --> 00:05:35.560
are going to waste
your mobile data.

00:05:35.560 --> 00:05:38.590
And as somebody who's roaming
in the States right now,

00:05:38.590 --> 00:05:41.290
I'm very acutely aware
of my carrier back

00:05:41.290 --> 00:05:44.130
home and the charges they
could levy against me if I were

00:05:44.130 --> 00:05:46.610
to download something
that was very large.

00:05:46.610 --> 00:05:48.590
But it also increases
site load time.

00:05:51.660 --> 00:05:54.500
63% according to
HTTP Archive-- that's

00:05:54.500 --> 00:05:57.097
the percentage of bytes
in the average web

00:05:57.097 --> 00:06:00.350
page that are images.

00:06:00.350 --> 00:06:03.070
So it represents this huge
surface area of optimization

00:06:03.070 --> 00:06:04.550
that we can go after as well.

00:06:04.550 --> 00:06:07.470
Easiest way I know, if
you have this problem,

00:06:07.470 --> 00:06:09.905
is just drag them onto
ImageOptim if you're on a Mac--

00:06:09.905 --> 00:06:12.350
there are equivalents
for Windows, I'm sure.

00:06:12.350 --> 00:06:14.780
And it will go through, it
will crush the images down,

00:06:14.780 --> 00:06:18.160
spit them out, and
you're way better.

00:06:18.160 --> 00:06:20.780
Unminifed resources-- so
things like your JavaScript

00:06:20.780 --> 00:06:22.869
and your CSS, they
also waste data,

00:06:22.869 --> 00:06:24.660
and they will increase
your site load time.

00:06:24.660 --> 00:06:26.950
We've talked about this,
I think, as an industry

00:06:26.950 --> 00:06:27.830
for a long time.

00:06:27.830 --> 00:06:30.790
So it's on my list because
this is what I look for.

00:06:30.790 --> 00:06:34.230
But all the same, I
would say it's something

00:06:34.230 --> 00:06:37.120
that I would expect
everybody does already.

00:06:37.120 --> 00:06:42.007
Anyway, the one I don't think
that many people think about

00:06:42.007 --> 00:06:43.090
is the number of requests.

00:06:43.090 --> 00:06:46.590
Or maybe they do, but let's
talk about this a bit.

00:06:46.590 --> 00:06:49.140
Every request that you're going
to make-- JavaScript, CSS,

00:06:49.140 --> 00:06:51.670
images-- they're going
to slow down your site.

00:06:51.670 --> 00:06:54.120
So that should also
be on the list.

00:06:54.120 --> 00:06:56.430
And now we go into
what I consider

00:06:56.430 --> 00:07:00.540
to be the bonds that are, I
suppose, more mobile concerned.

00:07:00.540 --> 00:07:04.060
This one-- too many redirects.

00:07:04.060 --> 00:07:07.410
Not something that I think
people think about initially,

00:07:07.410 --> 00:07:09.580
but let me explain why.

00:07:09.580 --> 00:07:11.650
Every redirect that
you make is going

00:07:11.650 --> 00:07:15.210
to slow down somebody
on their phone.

00:07:15.210 --> 00:07:19.060
And 40% of people apparently
will abandon your site

00:07:19.060 --> 00:07:21.090
if it takes longer
than three seconds.

00:07:21.090 --> 00:07:24.950
So I've taken the liberty
of putting a timer here.

00:07:24.950 --> 00:07:28.130
If we request this site,
and it's your site,

00:07:28.130 --> 00:07:31.270
we incur the cost of
DNS and a connection

00:07:31.270 --> 00:07:32.250
and sending some data.

00:07:32.250 --> 00:07:35.710
And on 3G, we will be talking
potentially up to a second

00:07:35.710 --> 00:07:37.877
to get this done.

00:07:37.877 --> 00:07:39.710
If we respond by saying
actually what you're

00:07:39.710 --> 00:07:42.340
looking for is on
the m. site, we now

00:07:42.340 --> 00:07:45.360
have to do another DNS look
up, make another connection,

00:07:45.360 --> 00:07:46.620
and send more data.

00:07:46.620 --> 00:07:50.504
And we're potentially
into that two seconds.

00:07:50.504 --> 00:07:52.170
And then we say
actually what you really

00:07:52.170 --> 00:07:53.772
wanted was on this path.

00:07:53.772 --> 00:07:55.230
We don't have DNS
this time, but we

00:07:55.230 --> 00:07:57.480
do have a connection
and data, and all

00:07:57.480 --> 00:07:59.320
of a sudden we're
starting to get perilously

00:07:59.320 --> 00:08:01.236
close to the three
seconds, and all we've done

00:08:01.236 --> 00:08:03.540
is show a white screen.

00:08:03.540 --> 00:08:06.990
This is bad and something
that we want to avoid.

00:08:06.990 --> 00:08:09.310
Shock upon shock,
the solution is

00:08:09.310 --> 00:08:11.900
to actually respond
to the request.

00:08:11.900 --> 00:08:15.250
And if that sounds like a sort
of roundabout way of saying

00:08:15.250 --> 00:08:19.430
m. sites might be
bad, yeah, you might

00:08:19.430 --> 00:08:23.330
think that this is an easier
way to solve that problem.

00:08:23.330 --> 00:08:26.940
So on my list of things, and the
things the PageSpeed Insights

00:08:26.940 --> 00:08:30.890
will also give you back,
is avoiding redirects.

00:08:30.890 --> 00:08:31.720
So far, so good.

00:08:31.720 --> 00:08:33.460
We have this kind
of list of things,

00:08:33.460 --> 00:08:35.284
this checklist of things.

00:08:35.284 --> 00:08:36.700
But we don't really
know what it's

00:08:36.700 --> 00:08:38.850
like to load the site
from a real world

00:08:38.850 --> 00:08:42.620
location on a particular
device and so forth.

00:08:42.620 --> 00:08:45.680
That is where WebPageTest is
going to come in and help us,

00:08:45.680 --> 00:08:48.820
and it is not very
complicated to set up.

00:08:48.820 --> 00:08:49.470
Here we go.

00:08:49.470 --> 00:08:53.630
Pop the URL in in the
top, and we ask it

00:08:53.630 --> 00:08:56.520
for a particular
location and browser.

00:08:56.520 --> 00:08:59.450
And we say in this
case I want 3G.

00:08:59.450 --> 00:09:00.725
Number of tests.

00:09:00.725 --> 00:09:02.250
And because I'm
feeling exciting,

00:09:02.250 --> 00:09:04.452
let's capture a video as well.

00:09:04.452 --> 00:09:05.910
That's one of the
amazing features.

00:09:05.910 --> 00:09:06.480
I love capturing videos.

00:09:06.480 --> 00:09:08.200
We're going to look
at that one in a sec.

00:09:08.200 --> 00:09:11.530
So we run this, and we
get some results back.

00:09:11.530 --> 00:09:13.290
And at first glance,
I always think

00:09:13.290 --> 00:09:16.570
this is a bit overwhelming.

00:09:16.570 --> 00:09:18.170
So let's dive into
what we're seeing.

00:09:18.170 --> 00:09:19.770
Performance grids
in the top corner,

00:09:19.770 --> 00:09:21.650
these are like
the headline items

00:09:21.650 --> 00:09:23.280
of what you should
be looking for.

00:09:23.280 --> 00:09:25.719
If you get reds in
here, that's something

00:09:25.719 --> 00:09:27.635
that you want to look
for and you want to fix.

00:09:27.635 --> 00:09:29.370
So if you click on
it, it will tell you

00:09:29.370 --> 00:09:30.953
why you got the grade
you got and what

00:09:30.953 --> 00:09:32.597
you need to go away and fix.

00:09:32.597 --> 00:09:34.680
The next thing we get are
the performance details.

00:09:34.680 --> 00:09:36.388
You know, how long
did it take our server

00:09:36.388 --> 00:09:39.560
to start sending
data back, how long

00:09:39.560 --> 00:09:42.810
did it take for the page
to render, everything

00:09:42.810 --> 00:09:45.400
that you need from a
numbers point of view.

00:09:45.400 --> 00:09:47.652
We also get a waterfall
and a few charts.

00:09:47.652 --> 00:09:49.860
And then because I checked
that Capture Video button,

00:09:49.860 --> 00:09:53.510
I also get this in the corner,
which says Watch Video.

00:09:53.510 --> 00:09:56.862
So I thought I'd share a video
off my-- I made this test

00:09:56.862 --> 00:09:57.570
site, by the way.

00:09:57.570 --> 00:09:59.560
It is hideous, but
I did it to show.

00:09:59.560 --> 00:10:01.060
It's not that I did
this on purpose.

00:10:01.060 --> 00:10:02.351
Well, I did do this on purpose.

00:10:02.351 --> 00:10:03.460
Anyway, have a look.

00:10:23.470 --> 00:10:25.220
Well, I hope that was
as agonizing for you

00:10:25.220 --> 00:10:29.250
as it was for me, frankly.

00:10:29.250 --> 00:10:33.520
18.2 seconds to load
something on a 3G connection.

00:10:33.520 --> 00:10:35.700
I've pulled out the
three milestones

00:10:35.700 --> 00:10:37.330
that I think are
dead important here.

00:10:37.330 --> 00:10:39.151
First of all, 6.5
seconds-- that's

00:10:39.151 --> 00:10:41.650
the point at which we've started
to get something on screen.

00:10:41.650 --> 00:10:44.340
Up to that point, all we
had was a white screen.

00:10:44.340 --> 00:10:46.920
And, as we discovered
earlier, up to three seconds

00:10:46.920 --> 00:10:48.890
for everything, and
people start leaving.

00:10:48.890 --> 00:10:51.090
So that's bad.

00:10:51.090 --> 00:10:54.250
9.7 seconds is when we actually
had the initial viewport filled

00:10:54.250 --> 00:10:56.834
in, and that's something we'll
come back to in a second.

00:10:56.834 --> 00:10:58.250
And then lastly,
when everything's

00:10:58.250 --> 00:11:02.100
loaded at 18.2 seconds, we can
consider ourselves complete.

00:11:02.100 --> 00:11:06.130
So this one here-- saying that
something is visually complete

00:11:06.130 --> 00:11:07.890
is actually a really
interesting measure,

00:11:07.890 --> 00:11:10.510
because it represents
something to do with perceived

00:11:10.510 --> 00:11:13.870
performance and how
people feel how long it

00:11:13.870 --> 00:11:16.110
takes to load your site.

00:11:16.110 --> 00:11:18.270
And when we go back
into those results

00:11:18.270 --> 00:11:20.370
that we have from WebPageTest,
the one number that

00:11:20.370 --> 00:11:23.160
should stand out for
us then, is this,

00:11:23.160 --> 00:11:25.590
which is that 9.7
seconds expressed

00:11:25.590 --> 00:11:27.710
as milliseconds-- pretty much.

00:11:27.710 --> 00:11:30.000
There is a bit of difference.

00:11:30.000 --> 00:11:32.200
The speed index is a
really good measure

00:11:32.200 --> 00:11:33.310
for perceived performance.

00:11:33.310 --> 00:11:34.260
It's actually a link.

00:11:34.260 --> 00:11:35.460
You can click on it.

00:11:35.460 --> 00:11:37.440
It will tell you
how it figures out

00:11:37.440 --> 00:11:39.214
what the speed index should be.

00:11:39.214 --> 00:11:40.630
And it is a bit
convoluted, but it

00:11:40.630 --> 00:11:43.770
does represent the best
measurement that we

00:11:43.770 --> 00:11:45.640
have for perceived
load, not just

00:11:45.640 --> 00:11:49.100
the body on load kind of
event, which as we saw

00:11:49.100 --> 00:11:53.394
was several seconds later.

00:11:53.394 --> 00:11:55.060
When I'm doing my
audits, I tend to look

00:11:55.060 --> 00:11:58.810
for a speed index of
around about 1,000,

00:11:58.810 --> 00:12:02.654
which is a very tricky number,
difficult number to get,

00:12:02.654 --> 00:12:04.320
but it's actually a
really valuable one.

00:12:04.320 --> 00:12:07.030
That's going to make your site
feel really snappy to anybody

00:12:07.030 --> 00:12:10.771
who loads it, particularly
on a mobile connection.

00:12:10.771 --> 00:12:13.145
Also worth pointing out is
because I checked that Capture

00:12:13.145 --> 00:12:16.280
Video button, I have
this filmstrip view.

00:12:16.280 --> 00:12:19.390
And if we look at that, it's
pretty much like that video I

00:12:19.390 --> 00:12:21.560
showed, I suppose, in many ways.

00:12:21.560 --> 00:12:24.920
But you have the white
screen there at 6 seconds.

00:12:24.920 --> 00:12:27.940
You have visually
completed about 10.

00:12:27.940 --> 00:12:29.860
And it's basically
up to this point,

00:12:29.860 --> 00:12:33.400
up to this 10 seconds, is what
we call the critical rendering

00:12:33.400 --> 00:12:34.580
path.

00:12:34.580 --> 00:12:38.810
This is the point where we
have to figure out, well,

00:12:38.810 --> 00:12:42.884
what does the browser need in
order to get things on screen?

00:12:42.884 --> 00:12:44.050
And that comes in two parts.

00:12:44.050 --> 00:12:45.850
It's what information
does it need,

00:12:45.850 --> 00:12:48.720
and then how can we stop it
being blocked in doing that?

00:12:48.720 --> 00:12:53.720
So for example, JavaScript can
block rendering, as an example.

00:12:53.720 --> 00:12:55.804
The thing you want to
do is to prioritize

00:12:55.804 --> 00:12:56.970
the critical rendering path.

00:12:56.970 --> 00:12:59.260
You want to make it
easy for the browser

00:12:59.260 --> 00:13:00.490
to get something on screen.

00:13:00.490 --> 00:13:01.940
That will lower
your speed index,

00:13:01.940 --> 00:13:04.470
and it will make your
site feel a lot snappier.

00:13:04.470 --> 00:13:06.600
Prioritizing the
critical rendering path

00:13:06.600 --> 00:13:09.260
is a big topic,
too big for this.

00:13:09.260 --> 00:13:11.650
So I will point you towards
the Google Web Fundamentals,

00:13:11.650 --> 00:13:13.280
which we recently launched.

00:13:13.280 --> 00:13:15.610
I've created a short
link there, if you care,

00:13:15.610 --> 00:13:17.600
for taking that down.

00:13:17.600 --> 00:13:19.726
Bit.ly/io-crp.

00:13:19.726 --> 00:13:20.800
There we go.

00:13:20.800 --> 00:13:23.400
That is a whole
documentation on how

00:13:23.400 --> 00:13:27.690
you can prioritize the
critical rendering path.

00:13:27.690 --> 00:13:30.159
Looking at the
waterfall that we get,

00:13:30.159 --> 00:13:31.450
first thing is those redirects.

00:13:31.450 --> 00:13:33.920
PageSpeed Insights will have
told us that we had redirects.

00:13:33.920 --> 00:13:35.720
This is going to confirm that.

00:13:35.720 --> 00:13:39.580
And each one of those, you
can see, slows us down.

00:13:39.580 --> 00:13:41.930
The other thing I thought
was quite interesting--

00:13:41.930 --> 00:13:45.940
in my fake example-- is
that I'd duplicated files.

00:13:45.940 --> 00:13:47.360
I've requested jQuery twice.

00:13:47.360 --> 00:13:48.950
But I know that
this is perfectly

00:13:48.950 --> 00:13:51.910
reasonable and possible,
having seen it in the wild,

00:13:51.910 --> 00:13:53.370
that you have
multiple developers,

00:13:53.370 --> 00:13:55.495
one pulls in jQuery, the
other one pulls in jQuery,

00:13:55.495 --> 00:13:58.672
and whoops, didn't realize
we were getting it twice.

00:13:58.672 --> 00:14:00.130
If you look at your
waterfalls, you

00:14:00.130 --> 00:14:02.385
might start to see
those kinds of patterns.

00:14:02.385 --> 00:14:04.010
The other thing I
noticed is that we've

00:14:04.010 --> 00:14:05.960
spent a long time
transferring one

00:14:05.960 --> 00:14:07.660
of the images, that dark blue.

00:14:07.660 --> 00:14:09.140
Most of the time,
it's not actually

00:14:09.140 --> 00:14:10.190
spent transferring bytes.

00:14:10.190 --> 00:14:12.023
It's actually all the
different connections,

00:14:12.023 --> 00:14:13.910
and so forth-- which
comes back to the number

00:14:13.910 --> 00:14:15.190
of actual requests.

00:14:15.190 --> 00:14:19.080
But in this case, we do
have a long transfer time.

00:14:19.080 --> 00:14:19.914
So far, so good.

00:14:19.914 --> 00:14:20.830
This is the page load.

00:14:20.830 --> 00:14:23.920
So it's optimizing
resources, reducing

00:14:23.920 --> 00:14:28.070
the number of requests,
it's avoiding redirects,

00:14:28.070 --> 00:14:32.390
and it's prioritizing the
critical rendering path.

00:14:32.390 --> 00:14:35.840
And I think most people, when
they hear that, they go, fine,

00:14:35.840 --> 00:14:39.140
but that sounds
like a lot of work.

00:14:39.140 --> 00:14:41.310
Yes, it can be.

00:14:41.310 --> 00:14:44.910
But there's good news.

00:14:44.910 --> 00:14:49.580
Grunt and Gulp both have tasks
galore to help you do this.

00:14:49.580 --> 00:14:52.920
And so all you need to do is
just run them with these tasks,

00:14:52.920 --> 00:14:55.360
and it will hopefully help you.

00:14:55.360 --> 00:14:57.170
In fact, when I ran
through this talk,

00:14:57.170 --> 00:14:59.485
my colleagues went,
I need the closure.

00:14:59.485 --> 00:15:00.610
They don't sound like that.

00:15:00.610 --> 00:15:03.930
That's me doing a mean
impression of them.

00:15:03.930 --> 00:15:05.650
And so I said, OK, fine.

00:15:05.650 --> 00:15:10.840
This is me running Grunt.

00:15:10.840 --> 00:15:16.540
Eight whole seconds
later, ta-da.

00:15:16.540 --> 00:15:22.200
And now my PageSpeed
Insight score is 100.

00:15:22.200 --> 00:15:24.610
But really, when
somebody loads it,

00:15:24.610 --> 00:15:28.770
you'll notice that the speed
index has dipped to 1396.

00:15:28.770 --> 00:15:31.070
Just following PageSpeed
Insights' guidance,

00:15:31.070 --> 00:15:33.460
following
WebPageTest's guidance,

00:15:33.460 --> 00:15:35.310
will help you significantly.

00:15:35.310 --> 00:15:38.280
In this case, we're
6.8 times faster.

00:15:38.280 --> 00:15:39.230
Yay for me.

00:15:39.230 --> 00:15:40.152
But--

00:15:40.152 --> 00:15:43.530
[APPLAUSE]

00:15:43.530 --> 00:15:48.951
Wait, no, I made it seven
times slower on purpose.

00:15:48.951 --> 00:15:50.067
That's all good.

00:15:50.067 --> 00:15:50.900
So that's page load.

00:15:50.900 --> 00:15:54.130
For me, it's those
kinds of things.

00:15:54.130 --> 00:15:56.870
The bit where I normally kick
in is this bit, the runtime,

00:15:56.870 --> 00:16:01.134
because for me, I
get very frustrated,

00:16:01.134 --> 00:16:02.550
even when something
loads quickly,

00:16:02.550 --> 00:16:06.800
if it is horrible
to actually use.

00:16:06.800 --> 00:16:08.370
And other people
notice that as well.

00:16:08.370 --> 00:16:09.900
Let's come back
to what Lara said.

00:16:09.900 --> 00:16:15.340
When we eliminated jank, better,
better, more, more, brilliant.

00:16:15.340 --> 00:16:16.146
OK?

00:16:16.146 --> 00:16:18.660
Jank.

00:16:18.660 --> 00:16:21.530
Jank is missed frames.

00:16:21.530 --> 00:16:24.060
But then you go,
hang on a minute.

00:16:24.060 --> 00:16:25.330
What's a frame?

00:16:25.330 --> 00:16:27.880
Exactly what are we
talking about here?

00:16:27.880 --> 00:16:32.520
Yeah, let's set this one out.

00:16:32.520 --> 00:16:35.350
Your modern smartphone
refreshes its screen

00:16:35.350 --> 00:16:37.600
about 60 times a second.

00:16:37.600 --> 00:16:39.700
For us, then, we actually
have to get 60 pictures

00:16:39.700 --> 00:16:42.510
or 60 frames onto the screen.

00:16:42.510 --> 00:16:45.030
And that means that
for that one second,

00:16:45.030 --> 00:16:50.144
we will have 16 milliseconds in
which to create those pictures.

00:16:50.144 --> 00:16:52.060
And so it becomes very
important to understand

00:16:52.060 --> 00:16:53.530
how those pictures
are made and how

00:16:53.530 --> 00:16:56.460
we control that part of the
process, because we really,

00:16:56.460 --> 00:16:57.530
really do.

00:16:57.530 --> 00:17:00.180
So let's talk about how Chrome
goes about making a frame.

00:17:00.180 --> 00:17:01.992
This is the Chrome 1.

00:17:01.992 --> 00:17:03.950
To be honest, most browsers
actually go through

00:17:03.950 --> 00:17:06.200
a very, very similar
process, but this

00:17:06.200 --> 00:17:09.030
is the Chrome specific bit.

00:17:09.030 --> 00:17:11.960
The first part of the process
from a developer's point

00:17:11.960 --> 00:17:14.996
of view is the
recalculation of style.

00:17:14.996 --> 00:17:16.079
Here we've got a DOM tree.

00:17:16.079 --> 00:17:16.980
I've simplified it a little bit.

00:17:16.980 --> 00:17:18.104
There's nothing under head.

00:17:18.104 --> 00:17:19.130
There normally would be.

00:17:19.130 --> 00:17:20.004
But you get the idea.

00:17:20.004 --> 00:17:20.970
We have a DOM tree.

00:17:20.970 --> 00:17:24.290
We've parsed our HTML,
we've created this tree,

00:17:24.290 --> 00:17:27.284
and what we do is
we bring in the CSS

00:17:27.284 --> 00:17:28.700
that we have from
the style sheets

00:17:28.700 --> 00:17:30.580
that we have from
the user agent.

00:17:30.580 --> 00:17:32.830
And what we start doing
is we start saying, OK.

00:17:32.830 --> 00:17:35.786
This applies to these
elements, and some of it

00:17:35.786 --> 00:17:37.120
will cascade down.

00:17:37.120 --> 00:17:39.580
This from the user agent
actually switches off the head,

00:17:39.580 --> 00:17:40.830
because we don't display that.

00:17:40.830 --> 00:17:44.025
Same goes for scripts, and
so on, and so on, and so on.

00:17:49.310 --> 00:17:52.250
The browser does it
faster than I would.

00:17:52.250 --> 00:17:53.990
Till we arrive at this.

00:17:53.990 --> 00:17:56.110
This a new tree
called a render tree,

00:17:56.110 --> 00:18:00.330
and it's all the things that we
care about putting on screen.

00:18:00.330 --> 00:18:04.000
So we have this tree, and we
know all the things about,

00:18:04.000 --> 00:18:08.330
in theory, the colors
and the positions

00:18:08.330 --> 00:18:10.410
and how everything relates
to everything else.

00:18:10.410 --> 00:18:12.910
Now we actually have to figure
out the geometry of the page,

00:18:12.910 --> 00:18:14.170
and we call this layout.

00:18:14.170 --> 00:18:15.743
So we push this in.

00:18:15.743 --> 00:18:17.690
And I marked it out with boxes.

00:18:17.690 --> 00:18:21.367
This is where we think all
the elements are going to be.

00:18:21.367 --> 00:18:23.200
And the thing about
this part of the process

00:18:23.200 --> 00:18:26.614
is the unique-ish
layout model of the web

00:18:26.614 --> 00:18:28.530
means that one thing can
affect another thing.

00:18:28.530 --> 00:18:31.214
If I change the height
or the width of the body,

00:18:31.214 --> 00:18:32.880
then the things that
are inside the body

00:18:32.880 --> 00:18:34.530
are probably going
to be affected.

00:18:34.530 --> 00:18:36.930
So it starts to
matter about how we

00:18:36.930 --> 00:18:38.890
start to deal with
our elements as

00:18:38.890 --> 00:18:42.360
to whether layout
will be a problem.

00:18:42.360 --> 00:18:45.890
Next, we actually have to
start filling in some pixels.

00:18:45.890 --> 00:18:47.730
So let's start with our boxes.

00:18:47.730 --> 00:18:51.710
Let's fill it in white, pop in a
header, a couple of UI elements

00:18:51.710 --> 00:18:54.920
there, some buttons,
put a bit more text.

00:18:54.920 --> 00:18:58.250
Hamburger icon-- argue with
whether that's a good thing.

00:18:58.250 --> 00:19:01.580
User experience
people aren't so sure.

00:19:01.580 --> 00:19:03.964
Title, date, and we're good.

00:19:03.964 --> 00:19:05.130
We've filled in our picture.

00:19:05.130 --> 00:19:06.965
We've had this one
bitmapping memory

00:19:06.965 --> 00:19:08.510
that we've drawn
our pixels into.

00:19:08.510 --> 00:19:09.400
Super.

00:19:09.400 --> 00:19:11.400
The final part of the
process that we care about

00:19:11.400 --> 00:19:13.020
is compositing.

00:19:13.020 --> 00:19:14.770
Now, to understand
compositing we actually

00:19:14.770 --> 00:19:17.420
have to go back
to Paint a second.

00:19:17.420 --> 00:19:21.462
Where-- let's say we've
got a different header

00:19:21.462 --> 00:19:22.420
that we want to put in.

00:19:22.420 --> 00:19:24.580
Let's say we're fading
between that darker

00:19:24.580 --> 00:19:26.710
one to that brighter one.

00:19:26.710 --> 00:19:30.790
Well, this area in red
is considered dirty.

00:19:30.790 --> 00:19:33.340
And so we paint
in our new header.

00:19:33.340 --> 00:19:36.480
But now we actually have
to repaint the hamburger

00:19:36.480 --> 00:19:40.892
icon, the title, and the date.

00:19:40.892 --> 00:19:42.850
And you start to sort of
say, hang on a minute.

00:19:42.850 --> 00:19:43.560
That's not great.

00:19:43.560 --> 00:19:46.160
Because we've had to
paint a bunch of things

00:19:46.160 --> 00:19:48.690
that didn't even change.

00:19:48.690 --> 00:19:51.430
Well, the good news is we
can and we do do better.

00:19:51.430 --> 00:19:54.480
What we actually do is we create
these things called compositor

00:19:54.480 --> 00:19:55.340
layers.

00:19:55.340 --> 00:19:58.095
So these things are in
separate space in this picture,

00:19:58.095 --> 00:20:00.220
but really, you can see
the header is animating all

00:20:00.220 --> 00:20:00.810
by itself.

00:20:00.810 --> 00:20:03.160
And we have this
separate layer that we've

00:20:03.160 --> 00:20:05.290
painted all the
other content into.

00:20:05.290 --> 00:20:07.040
The idea is now we can
keep them separate.

00:20:07.040 --> 00:20:08.498
And when we're
repainting, we don't

00:20:08.498 --> 00:20:10.960
have to repaint the
things that didn't change.

00:20:10.960 --> 00:20:13.229
So that's compositing.

00:20:13.229 --> 00:20:14.770
The good news is
that Chrome DevTools

00:20:14.770 --> 00:20:17.730
will show you frame data.

00:20:17.730 --> 00:20:20.527
If you load up DevTools
and go to the timeline tab,

00:20:20.527 --> 00:20:21.860
you can see something like this.

00:20:21.860 --> 00:20:23.119
This is zoomed in.

00:20:23.119 --> 00:20:24.785
The things that we
care about is there's

00:20:24.785 --> 00:20:30.840
this line here at the top that
marks the 30 frames a second.

00:20:30.840 --> 00:20:33.452
This one is 60 frames a second.

00:20:33.452 --> 00:20:35.410
And you see here, when
you're running your page

00:20:35.410 --> 00:20:36.580
and this is recording,
you'll start

00:20:36.580 --> 00:20:37.680
to see these bars up here.

00:20:37.680 --> 00:20:40.475
This is your page's
frames per second.

00:20:40.475 --> 00:20:42.900
And when we zone in
on one of these bars,

00:20:42.900 --> 00:20:45.410
we start to see these
records appear at the bottom.

00:20:45.410 --> 00:20:46.965
And they correspond
to that pipeline

00:20:46.965 --> 00:20:47.923
that we just discussed.

00:20:47.923 --> 00:20:51.420
Recalculating style,
what applied to what,

00:20:51.420 --> 00:20:53.370
what CSS applied
to which elements.

00:20:53.370 --> 00:20:57.172
Layout, figuring out the
geometry of the page.

00:20:57.172 --> 00:20:58.380
Paint, filling in the pixels.

00:20:58.380 --> 00:21:00.820
And of course, compositing
putting all those layers

00:21:00.820 --> 00:21:03.320
back together.

00:21:03.320 --> 00:21:07.330
So now that we know about
how Chrome and other browsers

00:21:07.330 --> 00:21:09.910
create frames, I would
like to introduce you to,

00:21:09.910 --> 00:21:12.960
my friends, the four
horsemen of The Jankocalpyse.

00:21:15.620 --> 00:21:21.020
These issues are my greatest
hits, as it were, of jank.

00:21:21.020 --> 00:21:23.555
That's not to say they will
occur in every project,

00:21:23.555 --> 00:21:25.180
but they're the things
that I'm looking

00:21:25.180 --> 00:21:27.100
for when I do the audits.

00:21:27.100 --> 00:21:29.030
And they're as follows.

00:21:29.030 --> 00:21:31.140
Firstly, expensive animations.

00:21:31.140 --> 00:21:33.650
And you should consider
scrolling to be an animation.

00:21:33.650 --> 00:21:36.360
Something is moving on screen.

00:21:36.360 --> 00:21:42.970
Let's take a pretty innocent
looking example, I suppose.

00:21:42.970 --> 00:21:46.100
Let's assume we're making
a card-based system,

00:21:46.100 --> 00:21:48.910
because that's pretty
popular on mobile.

00:21:48.910 --> 00:21:51.530
And we have this expanded class.

00:21:51.530 --> 00:21:53.740
We tap, say, one of these
cards, and we expand it out

00:21:53.740 --> 00:21:54.741
to 400 pixels in height.

00:21:54.741 --> 00:21:57.115
And we're going to just do a
CSS animation, because we've

00:21:57.115 --> 00:21:59.340
heard that that's good--
or a CSS transition, that's

00:21:59.340 --> 00:22:02.240
also good.

00:22:02.240 --> 00:22:04.885
It turns out that this isn't
quite as good as we'd hoped.

00:22:04.885 --> 00:22:06.760
And to understand why,
what we're going to do

00:22:06.760 --> 00:22:11.270
is notionally we're going to
plug in our Nexus 5 into out

00:22:11.270 --> 00:22:12.890
machine over USB.

00:22:12.890 --> 00:22:16.297
We'll go to Chrome Inspect.

00:22:16.297 --> 00:22:18.130
And you'll start to see
that the tabs appear

00:22:18.130 --> 00:22:18.970
that we have opened.

00:22:18.970 --> 00:22:22.880
I have an animation on
layout tab open here.

00:22:22.880 --> 00:22:25.700
And all we need to do is tap
Inspect or click Inspect,

00:22:25.700 --> 00:22:27.880
and we'll start
bringing up DevTools.

00:22:27.880 --> 00:22:32.020
So we have our card example
here, we have DevTools,

00:22:32.020 --> 00:22:34.240
and the little red light
says that we're recording.

00:22:34.240 --> 00:22:39.050
And when I tap on one of these
cards to expand it, boop,

00:22:39.050 --> 00:22:41.276
you'll see that we've
shot out the top of that--

00:22:41.276 --> 00:22:42.650
even the 30 frames
a second line.

00:22:42.650 --> 00:22:44.610
And when we click
on it, we find out

00:22:44.610 --> 00:22:47.379
that we've spent 23
milliseconds figuring out

00:22:47.379 --> 00:22:48.420
the geometry of the page.

00:22:48.420 --> 00:22:51.446
Because as we expanded
one of those elements,

00:22:51.446 --> 00:22:53.070
we had to move all
the other ones down,

00:22:53.070 --> 00:22:55.700
and we had to figure out what
happened to the geometry.

00:22:55.700 --> 00:22:57.630
And that was expensive
on a mobile device.

00:22:57.630 --> 00:23:01.980
You'll also notice that we
spent nearly 600 milliseconds

00:23:01.980 --> 00:23:03.700
painting the pixels.

00:23:03.700 --> 00:23:06.090
So when we're supposed to
be doing 60 milliseconds

00:23:06.090 --> 00:23:08.880
in a frame, to
spend 600 is going

00:23:08.880 --> 00:23:10.230
to kill out frames per second.

00:23:10.230 --> 00:23:13.050
So this, for your users,
will appear as janky.

00:23:13.050 --> 00:23:17.110
Because this is one situation,
it's not always the case.

00:23:17.110 --> 00:23:18.900
But generally speaking,
I tend to find

00:23:18.900 --> 00:23:23.190
that layout will trigger these
kinds of performance problems.

00:23:23.190 --> 00:23:24.940
But you can see how
you start to figure it

00:23:24.940 --> 00:23:28.650
out yourselves with
Chrome DevTools.

00:23:28.650 --> 00:23:30.760
So, from a kind of
frames point of view,

00:23:30.760 --> 00:23:32.620
if we go to these 16
millisecond markers,

00:23:32.620 --> 00:23:34.330
that layout, even
just the layout,

00:23:34.330 --> 00:23:37.600
pushed us past that marker.

00:23:37.600 --> 00:23:41.050
And now the paint just
killed everything for us.

00:23:41.050 --> 00:23:43.330
And it's not much better if
you go straight to paint.

00:23:43.330 --> 00:23:45.663
I have a bit of code here
that's going to send something

00:23:45.663 --> 00:23:47.340
to hot pink-- why wouldn't you?

00:23:47.340 --> 00:23:50.000
And again, we're going
to use a CSS transition.

00:23:50.000 --> 00:23:51.830
Similar kind of
situation-- let's

00:23:51.830 --> 00:23:55.082
have a look at what we see
when we run it in DevTools.

00:23:55.082 --> 00:23:56.330
Tap it.

00:23:56.330 --> 00:23:57.160
Boop.

00:23:57.160 --> 00:23:58.890
And you can see,
again, we're not

00:23:58.890 --> 00:24:00.970
even hitting 60 frames a second.

00:24:00.970 --> 00:24:02.570
In fact, here we are.

00:24:02.570 --> 00:24:06.167
72 milliseconds just
painting each of those.

00:24:06.167 --> 00:24:08.000
Again, you might find
that that's not always

00:24:08.000 --> 00:24:11.790
going to be the problem for you.

00:24:11.790 --> 00:24:17.010
But even so, it's probably
worth figuring out the tools.

00:24:17.010 --> 00:24:18.080
Do excuse me.

00:24:21.080 --> 00:24:23.180
There we go.

00:24:23.180 --> 00:24:24.330
Failure to plug in.

00:24:24.330 --> 00:24:25.696
There we are.

00:24:29.100 --> 00:24:31.230
Please tell me that I
didn't kill something.

00:24:31.230 --> 00:24:32.550
Oh, I'm back

00:24:32.550 --> 00:24:33.480
Thank you so much.

00:24:33.480 --> 00:24:35.340
OK, good.

00:24:35.340 --> 00:24:37.180
Whew!

00:24:37.180 --> 00:24:38.380
Leave it alone.

00:24:38.380 --> 00:24:41.110
All right, so you might
be asking yourselves

00:24:41.110 --> 00:24:45.880
how can we get high performance
animations on a mobile device?

00:24:45.880 --> 00:24:47.550
Great question.

00:24:47.550 --> 00:24:50.900
And the answer is
to stick to these,

00:24:50.900 --> 00:24:56.120
actually-- is to stick to
transforms and opacity changes.

00:24:56.120 --> 00:24:59.870
So the transforms
obviously translate scale.

00:24:59.870 --> 00:25:00.550
Here we are.

00:25:00.550 --> 00:25:01.758
And it'll pass through there.

00:25:01.758 --> 00:25:03.890
Now, the only note there
is that the element

00:25:03.890 --> 00:25:05.681
will need to be on its
own composite layer,

00:25:05.681 --> 00:25:09.320
just like the header
that we had before,

00:25:09.320 --> 00:25:10.764
which was on its own layer.

00:25:10.764 --> 00:25:12.430
And you might be
saying, well, OK, fine.

00:25:12.430 --> 00:25:13.971
How does something
get its own layer?

00:25:13.971 --> 00:25:14.830
Great, OK.

00:25:14.830 --> 00:25:17.910
Well, there's a new
property that is in Firefox,

00:25:17.910 --> 00:25:21.640
and it's in Chrome, it's
currently in Canary,

00:25:21.640 --> 00:25:24.380
I believe-- is will-change.

00:25:24.380 --> 00:25:25.892
And will-change,
you can tell it's

00:25:25.892 --> 00:25:27.600
about the things that
are going to change

00:25:27.600 --> 00:25:30.530
from a visual point of view,
like transform, in this case.

00:25:30.530 --> 00:25:32.170
Or you can tell yoy it about
something like opacity.

00:25:32.170 --> 00:25:33.540
You could use left,
top, depending

00:25:33.540 --> 00:25:34.680
on what it's going to change.

00:25:34.680 --> 00:25:36.138
And you're now
trusting the browser

00:25:36.138 --> 00:25:38.030
to create composite
layers or just make

00:25:38.030 --> 00:25:43.770
the right optimization for you,
and that's a really good thing.

00:25:43.770 --> 00:25:45.910
One kind of note
of caution here is

00:25:45.910 --> 00:25:48.207
that if you create too
many compositor layers,

00:25:48.207 --> 00:25:50.040
you could find that
your time in compositing

00:25:50.040 --> 00:25:50.970
goes through the roof.

00:25:50.970 --> 00:25:53.590
So that's something to watch
for in terms of those records

00:25:53.590 --> 00:25:55.077
that you see in DevTools.

00:25:55.077 --> 00:25:57.160
So let's go back and see
what happens when we just

00:25:57.160 --> 00:25:59.530
animate transform and opacity.

00:25:59.530 --> 00:26:01.761
Here we go again.

00:26:01.761 --> 00:26:04.030
Here we go.

00:26:04.030 --> 00:26:07.262
A very smooth 60 frames a
second is what you'd experience.

00:26:07.262 --> 00:26:09.720
And you'll notice that we spend
a fraction of a millisecond

00:26:09.720 --> 00:26:12.930
recalculating each of the
frames of our animation

00:26:12.930 --> 00:26:15.300
and then a fraction of a
millisecond compositing things

00:26:15.300 --> 00:26:17.500
together.

00:26:17.500 --> 00:26:21.825
People often say, well, how come
I'm seeing transparent bars up

00:26:21.825 --> 00:26:23.680
here in DevTools?

00:26:23.680 --> 00:26:26.550
And the answer is, essentially
those frames are empty.

00:26:26.550 --> 00:26:29.920
The workload was so light to
do compositor based operations

00:26:29.920 --> 00:26:32.770
compared to doing layout and
paint that we can now fit it

00:26:32.770 --> 00:26:39.190
comfortably inside the 60
frames a second budget.

00:26:39.190 --> 00:26:43.460
So from a frame point of
view, we recalculated style,

00:26:43.460 --> 00:26:48.150
we did compositing--
all was well.

00:26:48.150 --> 00:26:51.352
So in terms of this
kind of waterfall,

00:26:51.352 --> 00:26:55.650
we would like to
be down here, is

00:26:55.650 --> 00:26:58.165
the long and the
short of it, rather

00:26:58.165 --> 00:27:00.545
than starting right up,
say, at the top with layout

00:27:00.545 --> 00:27:01.170
and then paint.

00:27:04.340 --> 00:27:07.750
So then, having explained all
that, the first item on my list

00:27:07.750 --> 00:27:11.750
is am I seeing
expensive animations?

00:27:11.750 --> 00:27:14.020
If so, I will start to
suggest that people restrict

00:27:14.020 --> 00:27:16.680
their animations to
these properties.

00:27:16.680 --> 00:27:20.750
The next thing I see quite
often is mistimed animations.

00:27:20.750 --> 00:27:23.120
It's still true,
I believe, today

00:27:23.120 --> 00:27:29.340
that jQuery uses setInterval
for its animations.

00:27:29.340 --> 00:27:32.240
And the problem that you
have when you use setInterval

00:27:32.240 --> 00:27:34.470
for your animations
is that you'll

00:27:34.470 --> 00:27:36.400
find that your JavaScript,
your setInterval

00:27:36.400 --> 00:27:41.530
fires at some point
inside your frame.

00:27:41.530 --> 00:27:43.840
And sometimes you'll
miss your frame,

00:27:43.840 --> 00:27:45.590
and sometimes you'll
hit your frame.

00:27:45.590 --> 00:27:47.130
But for your users,
what they'll see

00:27:47.130 --> 00:27:50.361
is they'll see jitter and jank.

00:27:50.361 --> 00:27:54.210
What you should be doing instead
is using RequestAnimationFrame

00:27:54.210 --> 00:27:56.210
because it gives you this.

00:27:56.210 --> 00:27:59.960
It gives you a consistency on
the scheduling, the knowledge

00:27:59.960 --> 00:28:02.520
that you are going at
the start of the frame

00:28:02.520 --> 00:28:05.900
and much more likely to
hit your happy point.

00:28:05.900 --> 00:28:08.114
So the second
thing I look for is

00:28:08.114 --> 00:28:09.530
sane use of
RequestAnimationFrame.

00:28:12.440 --> 00:28:17.060
Layout thrashing continues
to be an interesting one.

00:28:17.060 --> 00:28:20.720
And what this is, let's take
a fairly contrived but fun

00:28:20.720 --> 00:28:21.330
example.

00:28:21.330 --> 00:28:24.300
We'd like to resize all
these paragraphs to be

00:28:24.300 --> 00:28:28.800
the same width as this
blue block here, like so.

00:28:28.800 --> 00:28:32.320
And the code for this, I
think, would be pretty trivial.

00:28:32.320 --> 00:28:34.050
We'd look through
our paragraphs,

00:28:34.050 --> 00:28:35.921
we ask for the width
of the blue block,

00:28:35.921 --> 00:28:37.420
and then we set the
first paragraph.

00:28:37.420 --> 00:28:39.180
And we go around
the loop and we ask

00:28:39.180 --> 00:28:42.230
for the width of the blue block,
and we set the second one.

00:28:42.230 --> 00:28:44.180
And if you run
DevTools against this,

00:28:44.180 --> 00:28:47.480
you'll start to see something
that looks like this.

00:28:47.480 --> 00:28:48.980
The first thing to
notice is that we

00:28:48.980 --> 00:28:55.850
have a monster frame, which
is about 2.65 seconds.

00:28:55.850 --> 00:28:58.350
When we look into the records
of why it was a monster frame,

00:28:58.350 --> 00:29:00.860
you start to see that we've
gone into this bizarre cycle

00:29:00.860 --> 00:29:03.240
of reading and writing styles.

00:29:03.240 --> 00:29:06.140
And what's actually
happening is we

00:29:06.140 --> 00:29:08.591
are asking for the
width of the blue block,

00:29:08.591 --> 00:29:11.090
and then with doing something
to invalidate that calculation

00:29:11.090 --> 00:29:12.890
by setting the
paragraphs' width.

00:29:12.890 --> 00:29:15.009
DevTools actually puts
this yellow triangle.

00:29:15.009 --> 00:29:16.550
And this is a warning
to you, which--

00:29:16.550 --> 00:29:19.300
it's going to call it a
Forced Synchronous Layout

00:29:19.300 --> 00:29:21.380
operation, which is
its way of saying,

00:29:21.380 --> 00:29:24.539
you made me go away and do
some layout calculations,

00:29:24.539 --> 00:29:26.080
figure out the
geometry of something,

00:29:26.080 --> 00:29:28.230
its width, its height,
its padding, its margin,

00:29:28.230 --> 00:29:30.170
when I wasn't expecting to.

00:29:30.170 --> 00:29:34.570
Are we're going into this kind
of thrashing between the two

00:29:34.570 --> 00:29:36.110
states.

00:29:36.110 --> 00:29:38.720
Instead, what we should do is
ask for the layout property

00:29:38.720 --> 00:29:42.160
once at the start and
then do all the writing.

00:29:42.160 --> 00:29:44.377
So as a kind of
more general rule,

00:29:44.377 --> 00:29:45.960
when I see a layout
thrashing, I would

00:29:45.960 --> 00:29:49.796
say, read any layout
values, then write them.

00:29:49.796 --> 00:29:51.670
That said, if you're
going for the first one,

00:29:51.670 --> 00:29:54.440
you'll probably try and avoid
layout during an animation.

00:29:54.440 --> 00:29:56.840
And the last thing I look
for, the fourth horseman

00:29:56.840 --> 00:30:01.014
of the Jankocalypse,
is garbage collection.

00:30:01.014 --> 00:30:02.430
Garbage collection
has the ability

00:30:02.430 --> 00:30:06.040
to essentially
interrupt at any point.

00:30:06.040 --> 00:30:10.430
It's an indeterminate point
in your frame's life cycle.

00:30:10.430 --> 00:30:13.340
When we switch over to the
memory in DevTools, the memory

00:30:13.340 --> 00:30:16.210
profiler, you see here we
have one of these drops.

00:30:16.210 --> 00:30:19.150
So we see this chart of memory
going up and down, up and down.

00:30:19.150 --> 00:30:21.620
Every time it goes down,
that's garbage being collected.

00:30:21.620 --> 00:30:24.130
In this particular situation,
I have a large amount,

00:30:24.130 --> 00:30:26.750
about 40 megabytes of
garbage, so stuff that

00:30:26.750 --> 00:30:28.350
has been released.

00:30:28.350 --> 00:30:31.200
And it takes Chrome
10 milliseconds.

00:30:31.200 --> 00:30:34.490
Now, this has actually got a lot
faster over the last few years.

00:30:34.490 --> 00:30:38.270
But it can still
knock you off in terms

00:30:38.270 --> 00:30:41.262
of your frames per second.

00:30:41.262 --> 00:30:42.780
Oh, it hurt.

00:30:42.780 --> 00:30:44.030
And this is why.

00:30:44.030 --> 00:30:46.110
Basically, it's something
you don't have control

00:30:46.110 --> 00:30:48.234
over in that sense of when
this is going to happen.

00:30:48.234 --> 00:30:49.906
But if it does happen
to you then you

00:30:49.906 --> 00:30:52.860
will not make your
60 frames a second.

00:30:52.860 --> 00:30:56.410
So writing fast memory
efficient JavaScript

00:30:56.410 --> 00:30:58.810
is a big topic in and of itself.

00:30:58.810 --> 00:31:02.010
And so I will just
point you to this,

00:31:02.010 --> 00:31:05.270
which is Addy Osmani's article
by that very same name.

00:31:05.270 --> 00:31:08.500
I like the fact that Addy's not
even looking at anybody here.

00:31:08.500 --> 00:31:11.510
He's just aloof, doesn't
want to look at us.

00:31:11.510 --> 00:31:14.440
All right, good.

00:31:14.440 --> 00:31:18.260
Runtime, then-- for me,
it's restricting animations

00:31:18.260 --> 00:31:20.131
to transforms and its opacity.

00:31:20.131 --> 00:31:22.130
As I said, these aren't
always going to crop up,

00:31:22.130 --> 00:31:24.110
but this is what
I'm looking for.

00:31:24.110 --> 00:31:27.640
It's the sane use of
RequestAnimationFrame.

00:31:27.640 --> 00:31:31.594
It's reading layout values and
then writing them if necessary.

00:31:31.594 --> 00:31:33.760
And it's writing faster
memory efficient JavaScript.

00:31:33.760 --> 00:31:35.759
As I said, these aren't
always going to crop up,

00:31:35.759 --> 00:31:37.470
but when they do,
these are the things

00:31:37.470 --> 00:31:38.845
that are going to
stop it feeling

00:31:38.845 --> 00:31:42.530
silky smooth on a mobile device.

00:31:42.530 --> 00:31:46.560
So far, though, this is what
I've spent my time looking at.

00:31:46.560 --> 00:31:48.380
So like I said at the
start, the feature

00:31:48.380 --> 00:31:52.950
that we face is with these
things, with smartphones.

00:31:52.950 --> 00:31:54.770
And they are
performance constrained.

00:31:54.770 --> 00:31:56.840
When you hit a
performance issue,

00:31:56.840 --> 00:31:58.460
you really know about it.

00:31:58.460 --> 00:32:01.720
And people have
higher expectations

00:32:01.720 --> 00:32:03.170
of performance on mobile.

00:32:03.170 --> 00:32:04.500
Bizarrely, they do.

00:32:04.500 --> 00:32:07.950
And so we really need to
meet that expectation.

00:32:07.950 --> 00:32:11.950
We really need to make fast
performing sites and apps.

00:32:11.950 --> 00:32:13.540
The way you're
going to get there

00:32:13.540 --> 00:32:16.600
is to start by gathering data.

00:32:16.600 --> 00:32:19.180
The tools that I've shown--
PageSpeed Insights, Chrome

00:32:19.180 --> 00:32:22.330
DevTools, WebPageTest-- they
should be the bread and butter.

00:32:22.330 --> 00:32:24.170
You should go away
and run those,

00:32:24.170 --> 00:32:26.660
and see if you can figure
out what's happening.

00:32:26.660 --> 00:32:29.827
But the tools themselves
will let you gain insight.

00:32:29.827 --> 00:32:31.910
They will actually tell
you what the numbers mean,

00:32:31.910 --> 00:32:34.980
why you got the scores you
got, and what you should do.

00:32:34.980 --> 00:32:37.650
This is PageSpeed
Insights saying,

00:32:37.650 --> 00:32:44.130
here are all the reasons why I
think you have illegible text.

00:32:44.130 --> 00:32:46.680
And if I fix all
these, I'm good.

00:32:46.680 --> 00:32:49.040
Which is to say, the
final part of the puzzle

00:32:49.040 --> 00:32:50.417
is to take action.

00:32:50.417 --> 00:32:52.750
It's no use getting all this
information, all this data,

00:32:52.750 --> 00:32:54.760
and then doing nothing with it.

00:32:54.760 --> 00:32:56.260
So if I can ask
you to do one thing

00:32:56.260 --> 00:33:00.110
it would be to go
forth and audit.

00:33:00.110 --> 00:33:02.862
Thank you very much.

00:33:02.862 --> 00:33:05.820
[APPLAUSE]

00:33:10.760 --> 00:33:13.580
Let me know what you think
with the session feedback,

00:33:13.580 --> 00:33:17.680
and I will be outside
for Q&amp;A after this.

