WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.514
[MUSIC PLAYING]

00:00:07.514 --> 00:00:08.680
PHIL WEAVER: Good afternoon.

00:00:08.680 --> 00:00:10.460
Thanks for coming.

00:00:10.460 --> 00:00:11.170
My name is Phil.

00:00:11.170 --> 00:00:14.080
I'm here with Casey
and Qasid, and we

00:00:14.080 --> 00:00:17.416
want to talk to you about making
accessibility easy on Android.

00:00:17.416 --> 00:00:17.916
Thanks.

00:00:20.832 --> 00:00:23.600
So first, a bit about
what accessibility does.

00:00:23.600 --> 00:00:25.996
And ultimately, a
lot of engineering

00:00:25.996 --> 00:00:27.620
ends up being about
assumptions, right?

00:00:27.620 --> 00:00:30.332
We find that-- usually
when we find we've made a--

00:00:30.332 --> 00:00:32.540
when we made an assumption,
we eventually discover it

00:00:32.540 --> 00:00:34.480
when we realize it's not right.

00:00:34.480 --> 00:00:36.590
And that happens a lot
with accessibility.

00:00:36.590 --> 00:00:39.076
It's really easy to make
assumptions about what people--

00:00:39.076 --> 00:00:40.700
particularly people
with disabilities--

00:00:40.700 --> 00:00:43.120
can and can't do.

00:00:43.120 --> 00:00:45.890
If you meet somebody who
uses a power wheelchair,

00:00:45.890 --> 00:00:48.050
you might make an assumption
that they probably

00:00:48.050 --> 00:00:49.790
don't play soccer.

00:00:49.790 --> 00:00:53.120
And this on the face of it might
sound like a pretty plausible

00:00:53.120 --> 00:00:57.140
assumption, but then you haven't
seen my son's power soccer

00:00:57.140 --> 00:00:58.250
team.

00:00:58.250 --> 00:01:02.080
There was a World Cup of
power wheelchair soccer.

00:01:02.080 --> 00:01:06.530
So whatever-- like if you
meet somebody who's blind--

00:01:06.530 --> 00:01:09.555
I've heard people who were, for
example, using photo carousels.

00:01:09.555 --> 00:01:11.150
And they go, well,
maybe blind people

00:01:11.150 --> 00:01:14.330
wouldn't be interested in
keeping track of photos.

00:01:14.330 --> 00:01:17.570
Now we now have technology to
let blind people take pictures

00:01:17.570 --> 00:01:19.580
of things, and they're
very interested,

00:01:19.580 --> 00:01:22.320
it turns out, in sharing
them with people.

00:01:22.320 --> 00:01:24.317
And then there's
the simplest one,

00:01:24.317 --> 00:01:26.150
which is making the
assumption that somebody

00:01:26.150 --> 00:01:28.880
who's not able to move
their mouth can't speak.

00:01:28.880 --> 00:01:32.450
But of course, Stephen
Hawking demonstrated

00:01:32.450 --> 00:01:35.360
that that assumption is
wrong long, long ago.

00:01:35.360 --> 00:01:38.994
And thank goodness he did.

00:01:38.994 --> 00:01:41.584
So on Android, we make
a lot of assumptions.

00:01:41.584 --> 00:01:43.000
It seems like a
lot of assumptions

00:01:43.000 --> 00:01:44.800
are built into our devices.

00:01:44.800 --> 00:01:46.560
Take a touchscreen device--

00:01:46.560 --> 00:01:49.420
touch screen, you might assume
people can-- all of the users

00:01:49.420 --> 00:01:52.330
are able to touch the
device, or that they can all

00:01:52.330 --> 00:01:54.340
see what's on the screen.

00:01:54.340 --> 00:01:57.380
But of course, that
turns out not to be true.

00:01:57.380 --> 00:02:03.760
And so these assumptions, we
have to learn to question them,

00:02:03.760 --> 00:02:05.197
otherwise they become obstacles.

00:02:05.197 --> 00:02:07.030
And so a lot of what
accessibility really is

00:02:07.030 --> 00:02:08.919
is about helping people
with disabilities

00:02:08.919 --> 00:02:10.560
overcome obstacles.

00:02:10.560 --> 00:02:12.160
And we want to really--

00:02:12.160 --> 00:02:13.660
the first thing is
just to make sure

00:02:13.660 --> 00:02:15.280
that the obstacles we're
helping them overcome

00:02:15.280 --> 00:02:17.620
are the ones inherent in
their disability, not the ones

00:02:17.620 --> 00:02:19.870
that we've created by making
additional assumptions

00:02:19.870 --> 00:02:21.760
about what they're interested
in, what they're actually

00:02:21.760 --> 00:02:22.430
able to do.

00:02:25.130 --> 00:02:28.060
So the way Android does
accessibility is really--

00:02:28.060 --> 00:02:30.320
it depends on the
entire ecosystem.

00:02:30.320 --> 00:02:34.810
So we who work
directly on Android,

00:02:34.810 --> 00:02:36.490
we build a lot of
the core of it,

00:02:36.490 --> 00:02:38.380
but we really depend
on the entire ecosystem

00:02:38.380 --> 00:02:39.770
to make this work.

00:02:39.770 --> 00:02:42.010
So the accessibility
framework is

00:02:42.010 --> 00:02:44.650
going to handle a lot of
low-level features, things

00:02:44.650 --> 00:02:46.390
like magnification.

00:02:46.390 --> 00:02:48.910
As a developer, you're not
going to build a magnification

00:02:48.910 --> 00:02:51.117
experience into your
app in order to help,

00:02:51.117 --> 00:02:53.200
so that if we try to do
that into every single app

00:02:53.200 --> 00:02:55.491
on Android, we're going to
end up with just a nightmare

00:02:55.491 --> 00:02:56.110
experience.

00:02:56.110 --> 00:02:58.443
And also it's something that's
really best handled down,

00:02:58.443 --> 00:02:59.710
close to the graphics level.

00:02:59.710 --> 00:03:02.610
We want to just magnify things.

00:03:02.610 --> 00:03:04.600
Accessibility
developers, people who

00:03:04.600 --> 00:03:07.100
work on accessibility
services like TalkBack,

00:03:07.100 --> 00:03:10.660
Switch Access, Voice
Access, Select to Speak,

00:03:10.660 --> 00:03:12.090
they build these
plug-in services.

00:03:12.090 --> 00:03:14.470
And the idea is that
they will generally

00:03:14.470 --> 00:03:16.270
have a particular
type of user in mind,

00:03:16.270 --> 00:03:17.645
and they'll go
through and really

00:03:17.645 --> 00:03:19.300
understand what
those users need,

00:03:19.300 --> 00:03:21.220
what their challenges
are, and try to build

00:03:21.220 --> 00:03:23.690
something that works for them.

00:03:23.690 --> 00:03:27.160
But they, of course, can't
do everything on their own.

00:03:27.160 --> 00:03:29.002
They need to get
information from--

00:03:29.002 --> 00:03:30.460
like if somebody
is blind, you need

00:03:30.460 --> 00:03:32.530
to be able to speak
what's on the screen.

00:03:32.530 --> 00:03:34.780
We need to find that out
from the apps, what's

00:03:34.780 --> 00:03:36.144
actually going on in the UI.

00:03:36.144 --> 00:03:37.810
And that's where we
really need the help

00:03:37.810 --> 00:03:42.415
of the entire ecosystem
and all developers.

00:03:42.415 --> 00:03:47.880
So as a general model, we
have these plug-in services.

00:03:47.880 --> 00:03:51.050
So in this case, Switch Access,
Voice Access, and Braille.

00:03:51.050 --> 00:03:56.780
And they're able to query an API
for the accessibility service

00:03:56.780 --> 00:03:57.430
to find out.

00:03:57.430 --> 00:03:59.263
Like tell me what windows
are on the screen.

00:03:59.263 --> 00:04:03.020
Tell me what the views are
inside these windows, what

00:04:03.020 --> 00:04:07.070
text is where, what actions
are available on each view.

00:04:07.070 --> 00:04:09.410
And then they can
present this to the user

00:04:09.410 --> 00:04:10.820
in whatever way they need to.

00:04:10.820 --> 00:04:13.100
If the user's not able
to touch the screen,

00:04:13.100 --> 00:04:15.410
do you want to activate
this control, that control?

00:04:15.410 --> 00:04:16.910
Do you want to
perform this gesture?

00:04:16.910 --> 00:04:18.690
And do it on their behalf.

00:04:18.690 --> 00:04:20.899
But we really need
the apps to provide

00:04:20.899 --> 00:04:22.550
the right semantics to do that.

00:04:26.034 --> 00:04:28.200
I'm going to try to make
this as simple as possible.

00:04:28.200 --> 00:04:30.946
So just a few things to
kind of keep in mind.

00:04:30.946 --> 00:04:32.820
One is just to make sure
that the information

00:04:32.820 --> 00:04:36.130
that you're presenting
to all your users

00:04:36.130 --> 00:04:38.470
is as visible as possible.

00:04:38.470 --> 00:04:42.100
So color contrast or
[INAUDIBLE] contrast

00:04:42.100 --> 00:04:44.290
ends up being the most
important single thing

00:04:44.290 --> 00:04:46.150
that you can do in
that regard, just

00:04:46.150 --> 00:04:48.550
to make sure that
you're not using gray

00:04:48.550 --> 00:04:51.240
on slightly lighter gray
to convey information.

00:04:51.240 --> 00:04:53.530
And sometimes it can end
up looking kind of cool,

00:04:53.530 --> 00:04:57.980
but it becomes very difficult
for some people to use.

00:04:57.980 --> 00:05:03.184
A second thing is to just prefer
controls to be big and simple.

00:05:03.184 --> 00:05:05.600
It's sometimes a temptation
to cram a whole bunch of stuff

00:05:05.600 --> 00:05:09.050
into a small area to get as many
options as possible for users.

00:05:09.050 --> 00:05:11.030
And often, just
trying to figure out

00:05:11.030 --> 00:05:13.190
what is really
important for your users

00:05:13.190 --> 00:05:14.817
can simplify things
for everybody

00:05:14.817 --> 00:05:16.400
and also make it
possible for somebody

00:05:16.400 --> 00:05:19.400
who perhaps doesn't have
perfect dexterity to use it.

00:05:19.400 --> 00:05:23.630
And one thing this week--
we have a general 48 by 48

00:05:23.630 --> 00:05:25.700
density independent
pixels as a guideline

00:05:25.700 --> 00:05:28.640
that we throw out there just
to have a uniform standard

00:05:28.640 --> 00:05:29.840
throughout the ecosystem.

00:05:29.840 --> 00:05:33.162
And that can be set with just
a min height, min width thing.

00:05:33.162 --> 00:05:35.350
And the other way
is to label stuff.

00:05:35.350 --> 00:05:38.100
So if you're conveying
information visually--

00:05:38.100 --> 00:05:39.489
particularly what a button--

00:05:39.489 --> 00:05:41.530
if there's a button that
just has an icon on it--

00:05:41.530 --> 00:05:43.130
just to provide a label.

00:05:43.130 --> 00:05:46.270
And these labels should
be concise and precise

00:05:46.270 --> 00:05:48.400
so that users who are not
able to see the screen

00:05:48.400 --> 00:05:51.685
can find out what they do.

00:05:51.685 --> 00:05:53.530
Some times, people
ask, when in my project

00:05:53.530 --> 00:05:55.330
should I consider accessibility?

00:05:55.330 --> 00:05:58.400
So the three word answer
is early and often.

00:05:58.400 --> 00:06:01.990
The slightly longer
answer is in each

00:06:01.990 --> 00:06:04.180
of these different
phases of your project,

00:06:04.180 --> 00:06:05.540
there's something you can do.

00:06:05.540 --> 00:06:09.580
So in design, generally the
things that I just already

00:06:09.580 --> 00:06:14.050
mentioned-- of keeping
contrast, control size, labels.

00:06:14.050 --> 00:06:16.120
That will get you a
long way if you're

00:06:16.120 --> 00:06:19.130
using standard UI patterns.

00:06:19.130 --> 00:06:22.271
But the more innovation you're
doing on your user interface,

00:06:22.271 --> 00:06:23.770
the further away
you're going to get

00:06:23.770 --> 00:06:26.900
from the stuff we built
into the Android framework.

00:06:26.900 --> 00:06:29.290
And at that point,
it's really helpful

00:06:29.290 --> 00:06:31.540
if you can start thinking
more broadly about how

00:06:31.540 --> 00:06:36.190
the full range of users who
are going to use your product.

00:06:36.190 --> 00:06:40.030
So the more gesture type
things that you're doing,

00:06:40.030 --> 00:06:42.851
you want to make sure that
you're taking into account how

00:06:42.851 --> 00:06:45.100
people are going to interact
with that if they perhaps

00:06:45.100 --> 00:06:48.298
can't perform that gesture.

00:06:48.298 --> 00:06:51.220
During development, we
have a series of APIs.

00:06:51.220 --> 00:06:53.230
Qasid's going to
present some of those.

00:06:53.230 --> 00:06:54.730
And for testing,
we have a number

00:06:54.730 --> 00:06:58.480
of testing tools to help make
sure that as much as possible

00:06:58.480 --> 00:07:01.780
we can automate the process
of making sure you're handling

00:07:01.780 --> 00:07:05.055
these things correctly.

00:07:05.055 --> 00:07:07.090
So I just explained a
whole bunch of stuff

00:07:07.090 --> 00:07:08.880
about all the
complexities of users

00:07:08.880 --> 00:07:10.630
and all these different
things you can do.

00:07:10.630 --> 00:07:12.504
So you could be forgiven
for wondering why we

00:07:12.504 --> 00:07:14.245
said making accessibility easy.

00:07:14.245 --> 00:07:17.470
So I did say making, not
that we already made.

00:07:17.470 --> 00:07:21.590
But in general, what we want is
we really want this to be easy.

00:07:21.590 --> 00:07:23.569
I think we want that to be--

00:07:23.569 --> 00:07:25.360
we want to make sure
that we're doing that.

00:07:25.360 --> 00:07:27.144
And if we're not,
please let us know.

00:07:27.144 --> 00:07:29.560
But if you're using standard
components and standard ways,

00:07:29.560 --> 00:07:31.101
it really should be
as simple as what

00:07:31.101 --> 00:07:32.950
I've already said,
that you should just

00:07:32.950 --> 00:07:34.060
be having to label things.

00:07:34.060 --> 00:07:36.910
We should-- the questions that
you need to answer should not

00:07:36.910 --> 00:07:39.700
be complicated questions
about how is a particular type

00:07:39.700 --> 00:07:41.620
of user going to
use your project--

00:07:41.620 --> 00:07:45.422
something like, what
does this control do.

00:07:45.422 --> 00:07:47.970
But as you evolve in
more non-standard ways,

00:07:47.970 --> 00:07:49.950
it is going to get less easy.

00:07:49.950 --> 00:07:52.830
But what we want is to make
sure that the incremental work

00:07:52.830 --> 00:07:56.340
that you do for accessibility
grows more slowly than the work

00:07:56.340 --> 00:07:58.920
you need to do to serve
whatever users you

00:07:58.920 --> 00:08:00.090
have in mind to begin with.

00:08:02.736 --> 00:08:05.830
And now Qasid is going
to talk a bit about a way

00:08:05.830 --> 00:08:07.830
to think about the
development process for folks

00:08:07.830 --> 00:08:11.030
with disabilities.

00:08:11.030 --> 00:08:12.060
QASID SADIQ: Hey, guys.

00:08:12.060 --> 00:08:13.020
My name is Qasid.

00:08:13.020 --> 00:08:16.690
I work for Phil on the
Android Accessibility team.

00:08:16.690 --> 00:08:18.000
So let's get right into it.

00:08:18.000 --> 00:08:21.310
Now, if you really
think about it,

00:08:21.310 --> 00:08:23.520
there are two ways that
your user can interact

00:08:23.520 --> 00:08:25.770
with your application, right?

00:08:25.770 --> 00:08:27.990
The first is
consuming information.

00:08:27.990 --> 00:08:30.990
Now, this can be content
that your user wants,

00:08:30.990 --> 00:08:33.714
or it could be indications
on how to use your UI.

00:08:33.714 --> 00:08:35.130
And the way we
consume information

00:08:35.130 --> 00:08:37.299
varies dramatically
from user to user.

00:08:37.299 --> 00:08:39.330
So for example, I
consume information

00:08:39.330 --> 00:08:41.669
by looking at what's
on screen and consuming

00:08:41.669 --> 00:08:43.470
and processing it in that way.

00:08:43.470 --> 00:08:45.035
A TalkBack user,
on the other hand,

00:08:45.035 --> 00:08:46.410
will hear a
description of what's

00:08:46.410 --> 00:08:50.550
on screen from the device's
speech synthesizer, right?

00:08:50.550 --> 00:08:52.650
Now, once a user has
consumed and understood

00:08:52.650 --> 00:08:55.066
that information, and they've
combined it with information

00:08:55.066 --> 00:08:57.000
from the real
world, they can then

00:08:57.000 --> 00:08:59.770
act on your application
to make it do things.

00:08:59.770 --> 00:09:01.410
And just like
consuming information,

00:09:01.410 --> 00:09:03.450
this varies
dramatically from user

00:09:03.450 --> 00:09:06.792
to user and from
circumstances circumstance.

00:09:06.792 --> 00:09:08.250
Now, these actions
can be something

00:09:08.250 --> 00:09:10.650
like a tap, a swipe, a scroll.

00:09:10.650 --> 00:09:13.450
It can be speaking
into a device.

00:09:13.450 --> 00:09:15.360
Some Switch users even
drive the whole device

00:09:15.360 --> 00:09:17.750
with a single button.

00:09:17.750 --> 00:09:21.860
Now, once we combine these
two modes of interaction,

00:09:21.860 --> 00:09:25.640
we see this cycle of action
and information, right?

00:09:25.640 --> 00:09:27.290
And we can see that
if any part of this

00:09:27.290 --> 00:09:29.600
is suddenly broken for
a user, our applications

00:09:29.600 --> 00:09:32.660
become fundamentally useless.

00:09:32.660 --> 00:09:34.730
So our goal becomes,
how do we make sure

00:09:34.730 --> 00:09:37.876
that this is complete
for every single user?

00:09:37.876 --> 00:09:39.590
Now, that seems like
a daunting task.

00:09:39.590 --> 00:09:41.220
Because like we've
mentioned before,

00:09:41.220 --> 00:09:43.520
the ways that the users
interact with our devices

00:09:43.520 --> 00:09:45.590
actually various quite
a lot, and trying

00:09:45.590 --> 00:09:48.600
to understand those users
is quite a complicated task.

00:09:48.600 --> 00:09:51.500
But if you don't try to do
anything too non-standard,

00:09:51.500 --> 00:09:53.790
and you trust us,
and you use our APIs,

00:09:53.790 --> 00:09:55.980
then this is actually
a pretty easy task.

00:09:55.980 --> 00:09:57.980
So I'm going to show you
some trivial things you

00:09:57.980 --> 00:10:01.430
can do which are fundamental
and also push your accessibility

00:10:01.430 --> 00:10:04.370
to be much better than it
otherwise would have been.

00:10:04.370 --> 00:10:06.260
Let's start in the
ways that we break

00:10:06.260 --> 00:10:08.204
consumption of information.

00:10:08.204 --> 00:10:09.620
Now, for the purpose
of this, I've

00:10:09.620 --> 00:10:12.860
created this nice little search
application-- a novel idea.

00:10:12.860 --> 00:10:15.230
And the way that I'm indicating
that this is a search UI

00:10:15.230 --> 00:10:18.829
is by that magnifying
glass and that little line.

00:10:18.829 --> 00:10:20.870
Now, right away you're
going to notice something.

00:10:20.870 --> 00:10:24.170
That's a very light shade
of gray on a very slightly

00:10:24.170 --> 00:10:25.890
lighter shade of gray.

00:10:25.890 --> 00:10:28.390
And that's going to be
difficult for people who--

00:10:28.390 --> 00:10:30.389
that's going to be difficult
for a lot of people

00:10:30.389 --> 00:10:32.432
to see because that's a
very low contrast ratio.

00:10:32.432 --> 00:10:34.640
It's going to be frustrating
and downright impossible

00:10:34.640 --> 00:10:36.060
for others.

00:10:36.060 --> 00:10:38.630
So what we should do is
we should darken it up.

00:10:38.630 --> 00:10:40.130
Just like that,
many more people are

00:10:40.130 --> 00:10:42.487
able to use our application.

00:10:42.487 --> 00:10:44.570
The goal here is make sure
all of your information

00:10:44.570 --> 00:10:47.290
is visible in terms
of size and contrast.

00:10:47.290 --> 00:10:49.142
And if you want concrete
guidelines on this,

00:10:49.142 --> 00:10:50.600
you can go to the
Material website,

00:10:50.600 --> 00:10:52.335
and we can give
you contrast ratios

00:10:52.335 --> 00:10:54.710
in different circumstances
and also hard numbers in terms

00:10:54.710 --> 00:10:58.405
of size like the 48 by 48.

00:10:58.405 --> 00:11:01.010
Now, that was kind
of straight forward,

00:11:01.010 --> 00:11:03.140
but there are clearly
some dramatic variations

00:11:03.140 --> 00:11:04.835
in how we consume information.

00:11:04.835 --> 00:11:08.387
And for those situations,
what we want you to do

00:11:08.387 --> 00:11:10.720
is we want you to fill in the
blanks for our frameworks.

00:11:10.720 --> 00:11:12.261
What I mean by that
is our frameworks

00:11:12.261 --> 00:11:14.754
can infer a lot from your
view hierarchy from the code

00:11:14.754 --> 00:11:17.170
that you've already written,
but there are some situations

00:11:17.170 --> 00:11:18.820
where we need your help.

00:11:18.820 --> 00:11:19.974
Let me show you.

00:11:19.974 --> 00:11:21.640
Let's just say that
I'm a TalkBack user,

00:11:21.640 --> 00:11:23.500
and I'm placing my
finger on screen

00:11:23.500 --> 00:11:26.590
to hear a description of
whatever is under my finger.

00:11:26.590 --> 00:11:29.500
And I place my finger
on the magnify icon.

00:11:29.500 --> 00:11:31.054
Now, I want to
hear what that is.

00:11:31.054 --> 00:11:33.220
But unfortunately, there's
no way for our frameworks

00:11:33.220 --> 00:11:36.040
to figure out what that
means because there is

00:11:36.040 --> 00:11:37.700
no text associated with that.

00:11:37.700 --> 00:11:39.820
I mean, it's essentially
an arrangement

00:11:39.820 --> 00:11:41.440
of pixels on screen.

00:11:41.440 --> 00:11:43.930
So you guys have to fill in
the blanks as app developers,

00:11:43.930 --> 00:11:46.120
and you can do that
by adding a label.

00:11:46.120 --> 00:11:49.060
So in this case, I decided
to label it Search.

00:11:49.060 --> 00:11:52.150
Make sure you keep your labels
concise and to the point.

00:11:52.150 --> 00:11:54.130
If it's something that
indicates an action,

00:11:54.130 --> 00:11:57.432
then make it a
simple action verb.

00:11:57.432 --> 00:11:58.640
This is actually pretty easy.

00:11:58.640 --> 00:12:00.098
In this situation,
all you would do

00:12:00.098 --> 00:12:01.800
is you set the
content description.

00:12:01.800 --> 00:12:03.254
Make sure your
string is localized

00:12:03.254 --> 00:12:04.670
because it's a
user-facing string,

00:12:04.670 --> 00:12:09.172
and accessibility users
don't only exist in America.

00:12:09.172 --> 00:12:11.760
Now that our user can generally
understand what's happening

00:12:11.760 --> 00:12:14.237
on screen, let's
make sure we don't--

00:12:14.237 --> 00:12:16.320
let's make sure we allow
them to act on our device

00:12:16.320 --> 00:12:20.066
appropriately or act on our
application appropriately.

00:12:20.066 --> 00:12:22.110
So I decided to
add a new feature.

00:12:22.110 --> 00:12:25.010
It's a Clear Text button,
so you can easily-- instead

00:12:25.010 --> 00:12:27.620
of having to Backspace, you can
easily reset and start typing

00:12:27.620 --> 00:12:28.700
again.

00:12:28.700 --> 00:12:30.309
But that's a really tiny button.

00:12:30.309 --> 00:12:32.350
You know, I'm going to
have trouble tapping that,

00:12:32.350 --> 00:12:34.220
and someone who has some
sort of fine motor disability

00:12:34.220 --> 00:12:35.630
is going to have a lot
more trouble tapping that.

00:12:35.630 --> 00:12:37.610
It might just be
impossible for them.

00:12:37.610 --> 00:12:39.770
Let's make it bigger.

00:12:39.770 --> 00:12:43.030
And now, again, this
works for many more users.

00:12:43.030 --> 00:12:44.830
Like Phil mentioned
earlier, make sure

00:12:44.830 --> 00:12:46.663
your controls are simple,
and they're large.

00:12:49.510 --> 00:12:52.140
So I decided to add
another feature.

00:12:52.140 --> 00:12:54.080
I decided to add
a History feature.

00:12:54.080 --> 00:12:55.580
Here you can tap
any of the queries

00:12:55.580 --> 00:12:58.580
and see the results
of the query again.

00:12:58.580 --> 00:13:02.740
Now, if you end up swiping
on any of these items,

00:13:02.740 --> 00:13:04.240
you'll end up
seeing a trash icon

00:13:04.240 --> 00:13:06.700
indicating that this item
can removed from History.

00:13:06.700 --> 00:13:09.830
And if you continue
swiping, that item

00:13:09.830 --> 00:13:11.780
will be removed from History.

00:13:11.780 --> 00:13:14.540
So this is great
and all, but this

00:13:14.540 --> 00:13:19.270
is a pretty custom-built
gesture overloaded onto an item,

00:13:19.270 --> 00:13:21.570
and it's going to be hard
for our frameworks to detect.

00:13:21.570 --> 00:13:22.640
So again, you guys
are going to have

00:13:22.640 --> 00:13:24.306
to fill in the blanks
for our frameworks

00:13:24.306 --> 00:13:26.270
and for accessibility users.

00:13:26.270 --> 00:13:28.190
Now, you can do that
by adding an action

00:13:28.190 --> 00:13:30.320
or an accessibility action.

00:13:30.320 --> 00:13:34.460
And all you have to do here
is specify a user-facing label

00:13:34.460 --> 00:13:36.950
or description of that
action-- again, a simple verb--

00:13:36.950 --> 00:13:39.350
and the bit of code
that should be executed

00:13:39.350 --> 00:13:41.659
when this action is performed.

00:13:41.659 --> 00:13:44.200
Currently, you can do that with
the accessibility action API,

00:13:44.200 --> 00:13:46.040
but we are actually
adding something

00:13:46.040 --> 00:13:48.140
to the Android X
Library which allows

00:13:48.140 --> 00:13:49.640
you to do this in
a single line call

00:13:49.640 --> 00:13:51.290
with a lambda and
a string passed in.

00:13:53.990 --> 00:13:55.886
So I've shown you
a way of thinking

00:13:55.886 --> 00:13:58.010
about accessibility issues
and how to address them,

00:13:58.010 --> 00:14:00.680
but you still need to know
how to find these issues

00:14:00.680 --> 00:14:03.080
and how to verify that
you've actually fixed them.

00:14:03.080 --> 00:14:04.528
This is where Casey comes in.

00:14:04.528 --> 00:14:07.280
Casey?

00:14:07.280 --> 00:14:10.270
CASEY BURKHARDT: Thanks, Qasid.

00:14:10.270 --> 00:14:12.200
So I'm Casey Burkhardt.

00:14:12.200 --> 00:14:14.660
I'm a software engineer
on Google's Accessibility

00:14:14.660 --> 00:14:16.580
Engineering team, and
I lead the development

00:14:16.580 --> 00:14:20.160
of accessibility testing
tools for Android.

00:14:20.160 --> 00:14:21.620
So as Qasid had
pointed out, there

00:14:21.620 --> 00:14:23.840
are many common
accessibility issues

00:14:23.840 --> 00:14:27.150
that actually-- fixes are
fairly straightforward

00:14:27.150 --> 00:14:29.510
from the development side
and can really improve

00:14:29.510 --> 00:14:31.430
the accessibility of your app.

00:14:31.430 --> 00:14:33.380
A big question,
though, is how do we

00:14:33.380 --> 00:14:35.047
go about finding those issues?

00:14:35.047 --> 00:14:37.130
And there are three types
of accessibility testing

00:14:37.130 --> 00:14:38.790
today that I'd like to cover.

00:14:38.790 --> 00:14:41.390
There's automated testing--
the use of automated tools;

00:14:41.390 --> 00:14:44.330
manual testing, where you
use Android's accessibility

00:14:44.330 --> 00:14:47.827
services yourself to understand
the user's experience;

00:14:47.827 --> 00:14:49.910
and finally user testing,
where you would actually

00:14:49.910 --> 00:14:52.580
bring in users with
various disabilities

00:14:52.580 --> 00:14:55.340
and truly get their feedback
and understand their experience

00:14:55.340 --> 00:14:58.250
using your application.

00:14:58.250 --> 00:15:02.060
My section of the talk
focuses mainly on automation

00:15:02.060 --> 00:15:05.060
because right now we see
that as one big area where

00:15:05.060 --> 00:15:08.690
we can make vast improvements
across the ecosystem

00:15:08.690 --> 00:15:12.060
if we have some developers'
cooperation using these tools.

00:15:12.060 --> 00:15:15.560
So automated accessibility
testing until several years

00:15:15.560 --> 00:15:18.290
ago on Android
didn't really exist.

00:15:18.290 --> 00:15:22.520
In around 2015, we
launched a project

00:15:22.520 --> 00:15:25.610
known as Android's Accessibility
Test Framework, which

00:15:25.610 --> 00:15:28.820
is an Android and Java library
that essentially houses

00:15:28.820 --> 00:15:32.270
a lot of detection logic for
the more common accessibility

00:15:32.270 --> 00:15:34.730
issues that we can
identify within an app's

00:15:34.730 --> 00:15:38.240
UI in a rule-based fashion.

00:15:38.240 --> 00:15:41.210
This is an open source project,
so you can go and find it

00:15:41.210 --> 00:15:42.240
on GitHub.

00:15:42.240 --> 00:15:44.240
And essentially, what
it's aiming to do

00:15:44.240 --> 00:15:46.760
is look at your
app's UI at runtime

00:15:46.760 --> 00:15:51.466
and find some more of the
automatable, mechanical aspects

00:15:51.466 --> 00:15:53.090
of accessibility that
we see day to day

00:15:53.090 --> 00:15:54.800
that affect users the most.

00:15:54.800 --> 00:15:56.840
So we can find a lot
of the common issues

00:15:56.840 --> 00:15:59.660
that Qasid discussed,
so we can tell you

00:15:59.660 --> 00:16:01.520
if you have a control
within your UI

00:16:01.520 --> 00:16:04.130
that is missing a label
for a screen reader.

00:16:04.130 --> 00:16:07.580
We can identify low
contrast text and images.

00:16:07.580 --> 00:16:10.090
We can tell you if you've got
clickable items within a UI

00:16:10.090 --> 00:16:13.940
that that fail to meet our
minimums for touch target

00:16:13.940 --> 00:16:15.610
guidelines.

00:16:15.610 --> 00:16:18.680
And we also identify a
number of various other

00:16:18.680 --> 00:16:20.600
implementation-specific issues.

00:16:20.600 --> 00:16:22.730
And the core testing
library, ATF,

00:16:22.730 --> 00:16:26.480
is growing constantly to
find more new and interesting

00:16:26.480 --> 00:16:28.490
issues.

00:16:28.490 --> 00:16:31.010
We've taken this library,
and we've integrated it

00:16:31.010 --> 00:16:34.666
with common developer
endpoints-- essentially,

00:16:34.666 --> 00:16:37.040
tools that you'll use commonly
throughout the development

00:16:37.040 --> 00:16:41.049
lifecycle and you can leverage
throughout your project.

00:16:41.049 --> 00:16:43.340
I want to talk through some
of those integrations today

00:16:43.340 --> 00:16:46.680
and how you can use them and
get started with them quickly.

00:16:46.680 --> 00:16:48.830
So first and foremost,
we've got integrations

00:16:48.830 --> 00:16:51.890
with two test frameworks
that are pretty commonly used

00:16:51.890 --> 00:16:55.430
throughout unit and UI
tests on Android apps.

00:16:55.430 --> 00:16:58.340
The first is
Espresso Robolectric.

00:16:58.340 --> 00:17:02.210
So essentially the idea with
these integrations of ATF

00:17:02.210 --> 00:17:05.390
is they will piggyback on
top of your existing tests.

00:17:05.390 --> 00:17:08.000
So you have a test that
runs, loads some UI

00:17:08.000 --> 00:17:10.460
from your application,
interacts with that UI,

00:17:10.460 --> 00:17:12.410
and asserts some state.

00:17:12.410 --> 00:17:15.079
During the interaction
phase of your test,

00:17:15.079 --> 00:17:17.750
if you've enabled our
integrations with Espresso

00:17:17.750 --> 00:17:21.079
or Robolectric, we'll actually
evaluate the UI at the time

00:17:21.079 --> 00:17:22.740
that it's interacted with.

00:17:22.740 --> 00:17:25.099
So if we identify an
accessibility issue

00:17:25.099 --> 00:17:29.630
that we believe will affect
a user with a disability's

00:17:29.630 --> 00:17:31.790
ability to interact
with your application,

00:17:31.790 --> 00:17:33.980
we will fail your existing test.

00:17:33.980 --> 00:17:35.990
So if you already have
strong test coverage

00:17:35.990 --> 00:17:38.120
with either Robolectric
or Espresso,

00:17:38.120 --> 00:17:40.790
enabling ATF's integration
with that test framework

00:17:40.790 --> 00:17:43.550
might be a great way to get
a decent amount of coverage

00:17:43.550 --> 00:17:46.910
for automation in terms
of accessibility testing

00:17:46.910 --> 00:17:49.100
throughout your app.

00:17:49.100 --> 00:17:51.560
A few other points
to note here--

00:17:51.560 --> 00:17:53.720
each framework
offers what's known

00:17:53.720 --> 00:17:55.934
as an AccessibilityValidator.

00:17:55.934 --> 00:17:57.350
And this is an
object that you can

00:17:57.350 --> 00:18:02.400
use to essentially configure ATF
behavior inside of your tests.

00:18:02.400 --> 00:18:05.840
So you can configure ATF, for
example, to not fail your test

00:18:05.840 --> 00:18:10.430
and just log something if
we've run into an issue.

00:18:10.430 --> 00:18:13.880
You can set up ATF to crawl from
the root of your view hierarchy

00:18:13.880 --> 00:18:17.090
whenever you perform an action
rather than just evaluating

00:18:17.090 --> 00:18:18.850
the item that was
interacted with.

00:18:18.850 --> 00:18:21.110
It's a great way to get
some additional coverage.

00:18:21.110 --> 00:18:23.090
And you can even use
AccessibilityValidator

00:18:23.090 --> 00:18:24.620
to set a whitelist.

00:18:24.620 --> 00:18:26.960
So if you want to turn
on accessibility tests

00:18:26.960 --> 00:18:29.300
within your Robolectric
or Espresso tests,

00:18:29.300 --> 00:18:33.470
you can do so, maintain
a green presubmit,

00:18:33.470 --> 00:18:35.630
and burn through issues
that you know about

00:18:35.630 --> 00:18:38.300
by creating and registering one
of these whitelists for known

00:18:38.300 --> 00:18:40.190
issues.

00:18:40.190 --> 00:18:44.870
So specifically inside how you
leverage these between Espresso

00:18:44.870 --> 00:18:47.930
and Robolectric, in Espresso
you're going to essentially

00:18:47.930 --> 00:18:50.600
call
AccessibilityChecks.enable()

00:18:50.600 --> 00:18:52.910
from within your tests setup.

00:18:52.910 --> 00:18:55.670
This is going to essentially
trigger our global assertion

00:18:55.670 --> 00:19:00.330
to run whenever you use a view
action within an Espresso test.

00:19:00.330 --> 00:19:02.870
So in this case, the
view action is run.

00:19:02.870 --> 00:19:06.980
We'll perform an evaluation on
the view that was interacted

00:19:06.980 --> 00:19:09.690
with and its subtree.

00:19:09.690 --> 00:19:12.900
AccessibilityValidator is
actually returned by the call

00:19:12.900 --> 00:19:15.180
to AccessibilityChecks.enable().

00:19:15.180 --> 00:19:17.650
So if you need to further
customize ATF's behavior,

00:19:17.650 --> 00:19:21.870
you can do so from the object
returned from that call.

00:19:21.870 --> 00:19:25.270
Within Robolectric,
it's slightly different.

00:19:25.270 --> 00:19:27.690
So instead of calling
AccessibilityChecks.enable(),

00:19:27.690 --> 00:19:29.690
AccessibilityChecks
is an annotation,

00:19:29.690 --> 00:19:32.790
and you'll annotate your test
method or class that you'd like

00:19:32.790 --> 00:19:34.740
to enable accessibility
checking within.

00:19:34.740 --> 00:19:39.480
And it relies on you using
ShadowView.clickOn to actually

00:19:39.480 --> 00:19:41.460
interact with
elements in your UI

00:19:41.460 --> 00:19:43.050
through your Robolectric. tests.

00:19:43.050 --> 00:19:47.140
So avoid the temptation to use
viewperformClick() directly.

00:19:47.140 --> 00:19:49.860
The AccessibilityValidator
functionality's

00:19:49.860 --> 00:19:52.380
available in Robolectric
through a different class

00:19:52.380 --> 00:19:54.330
that mirrors the same API.

00:19:54.330 --> 00:19:56.430
You can just look
for AccessibilityUtil

00:19:56.430 --> 00:20:01.860
and make static calls there
to configure ATF's behavior.

00:20:01.860 --> 00:20:05.280
So in addition to integrations
with these automated test

00:20:05.280 --> 00:20:07.800
frameworks, we've built a
separate standalone tool

00:20:07.800 --> 00:20:10.100
known as Accessibility Scanner.

00:20:10.100 --> 00:20:12.180
This is a direct
integration of ATF,

00:20:12.180 --> 00:20:17.040
but Accessibility Scanner acts
as a front end for the library.

00:20:17.040 --> 00:20:20.400
It will evaluate the foreground
UI of your application

00:20:20.400 --> 00:20:23.442
at runtime on an
actual Android device.

00:20:23.442 --> 00:20:24.900
The way it works
is essentially you

00:20:24.900 --> 00:20:26.580
install Accessibility Scanner.

00:20:26.580 --> 00:20:27.860
You turn it on.

00:20:27.860 --> 00:20:30.120
It will add a floating
button globally

00:20:30.120 --> 00:20:31.620
to the device's screen.

00:20:31.620 --> 00:20:34.530
You'll open up your
application, navigate to the UI

00:20:34.530 --> 00:20:37.090
that you'd like to evaluate,
and just tap the button.

00:20:37.090 --> 00:20:40.440
And what you see is
essentially a report

00:20:40.440 --> 00:20:42.600
that describes the ways
in which you can improve

00:20:42.600 --> 00:20:44.700
that UI for accessibility.

00:20:44.700 --> 00:20:47.100
Again, these will mirror
the same types of issues

00:20:47.100 --> 00:20:49.740
that ATF, and Espresso,
and Robolectric

00:20:49.740 --> 00:20:52.590
can identify as well.

00:20:52.590 --> 00:20:54.475
It's very easy to
take these reports

00:20:54.475 --> 00:20:56.850
from Accessibility Scanner
and share them with your team.

00:20:56.850 --> 00:21:00.220
You can currently export
to email or Drive.

00:21:00.220 --> 00:21:02.430
And it doesn't really
require technical skills.

00:21:02.430 --> 00:21:05.100
You don't have to have a debug
version of your application

00:21:05.100 --> 00:21:07.260
or a user debug device.

00:21:07.260 --> 00:21:11.510
You don't need to do anything
special to set this up.

00:21:11.510 --> 00:21:15.150
It works on any app on
any Android device running

00:21:15.150 --> 00:21:16.560
Marshmallow or later.

00:21:16.560 --> 00:21:20.700
And really, you don't even have
to have a lot of experience

00:21:20.700 --> 00:21:22.260
related to accessibility.

00:21:22.260 --> 00:21:25.380
Each issue that Accessibility
Scanner can identify

00:21:25.380 --> 00:21:28.950
comes with extensive
documentation that gives you

00:21:28.950 --> 00:21:31.686
background on how that
issue might affect users

00:21:31.686 --> 00:21:33.060
and how to think
about that issue

00:21:33.060 --> 00:21:35.220
during the design,
development, and test

00:21:35.220 --> 00:21:37.910
phases of your project.

00:21:37.910 --> 00:21:40.330
So please do download
Accessibility Scanner.

00:21:40.330 --> 00:21:41.980
It's something I
highly recommend

00:21:41.980 --> 00:21:44.682
we use when we build UI.

00:21:44.682 --> 00:21:48.010
G.co/AccessibilityScanner will
take you to the Play Store

00:21:48.010 --> 00:21:50.680
page.

00:21:50.680 --> 00:21:53.010
Finally, one last integration
I'd like to cover today,

00:21:53.010 --> 00:21:54.360
and this is a new one.

00:21:54.360 --> 00:21:56.790
We've launched it
a few months ago.

00:21:56.790 --> 00:21:59.120
It's an integration of
our Accessibility Testing

00:21:59.120 --> 00:22:02.570
Framework and the Play Store
Developer Consoles Pre-Launch

00:22:02.570 --> 00:22:03.740
Report.

00:22:03.740 --> 00:22:06.470
For those of you who haven't
used Pre-Launch Report yet,

00:22:06.470 --> 00:22:10.820
it is a great tool to get a
sanity check during the launch

00:22:10.820 --> 00:22:14.480
process, the release process
for an APK to the Play Store,

00:22:14.480 --> 00:22:17.390
either on an open
or a closed channel.

00:22:17.390 --> 00:22:20.570
Essentially, the way it
works is you upload an APK.

00:22:20.570 --> 00:22:24.440
Pre-Launch Report will take
that APK, instrument it,

00:22:24.440 --> 00:22:26.900
and push it to a number of
different physical devices

00:22:26.900 --> 00:22:27.980
in a lab.

00:22:27.980 --> 00:22:32.950
And we'll crawl your
app, essentially,

00:22:32.950 --> 00:22:34.970
on these different
devices and generate

00:22:34.970 --> 00:22:39.720
reports that include findings
about performance, security,

00:22:39.720 --> 00:22:42.200
and now accessibility as well.

00:22:42.200 --> 00:22:44.780
So ATF is running
alongside Pre-Launch Report

00:22:44.780 --> 00:22:47.930
as it's crawling application,
and it's generating reports

00:22:47.930 --> 00:22:49.304
at each stage in the crawl.

00:22:49.304 --> 00:22:50.720
And it's taking
all of the results

00:22:50.720 --> 00:22:52.922
and de-duplicating them.

00:22:52.922 --> 00:22:54.380
So if you'd like
to check this out,

00:22:54.380 --> 00:22:58.760
it's available now in Play
Store Developer Console

00:22:58.760 --> 00:23:00.380
under Release Management.

00:23:00.380 --> 00:23:02.720
And you should be able to
see accessibility results

00:23:02.720 --> 00:23:04.820
for any APK that you've
uploaded to the Store

00:23:04.820 --> 00:23:07.770
since fairly early in July.

00:23:07.770 --> 00:23:09.320
So please do check that out.

00:23:09.320 --> 00:23:12.200
And here's what it looks like,
just to give you an idea.

00:23:12.200 --> 00:23:14.480
Here this-- the main
entry point for an APK

00:23:14.480 --> 00:23:16.580
will show you all different
categories of issues

00:23:16.580 --> 00:23:17.870
that we've identified.

00:23:17.870 --> 00:23:19.940
It will show you
clusters of issues.

00:23:19.940 --> 00:23:21.920
And you can click
on any one of those,

00:23:21.920 --> 00:23:23.300
and it will show
you more details

00:23:23.300 --> 00:23:25.010
about the specific problem.

00:23:25.010 --> 00:23:27.230
So in this case, we're
pointing out an issue

00:23:27.230 --> 00:23:29.180
relating to touch target size.

00:23:29.180 --> 00:23:30.860
And in the column
on the left, you

00:23:30.860 --> 00:23:34.460
see many different examples of
that same de-duplicated issue

00:23:34.460 --> 00:23:36.530
across different crawls
of your application

00:23:36.530 --> 00:23:39.460
that Pre-Launch
Report has performed.

00:23:39.460 --> 00:23:41.720
You have access to the same
additional documentation

00:23:41.720 --> 00:23:42.590
here as well too.

00:23:42.590 --> 00:23:44.800
So if you're not familiar
with a particular issue,

00:23:44.800 --> 00:23:46.220
the Learn More
link will give you

00:23:46.220 --> 00:23:49.302
the details you need to resolve
it regardless of what stage

00:23:49.302 --> 00:23:50.510
your project is currently in.

00:23:53.468 --> 00:23:57.060
So I want to wrap up by talking
about an accessibility testing

00:23:57.060 --> 00:23:57.660
strategy.

00:23:57.660 --> 00:23:59.880
We talked a lot
about automation,

00:23:59.880 --> 00:24:02.550
but we didn't go into too
much detail on the other two--

00:24:02.550 --> 00:24:04.800
manual testing and user testing.

00:24:04.800 --> 00:24:07.050
And these are equally important.

00:24:07.050 --> 00:24:08.640
Automation is great
because it helps

00:24:08.640 --> 00:24:12.240
you find issues very quickly
early in the development cycle,

00:24:12.240 --> 00:24:16.020
especially if you have good
test coverage with our automated

00:24:16.020 --> 00:24:16.950
tools.

00:24:16.950 --> 00:24:18.780
So essentially, think
about automation

00:24:18.780 --> 00:24:22.320
as a way to catch very
common issues quickly

00:24:22.320 --> 00:24:25.470
but not as a way to guarantee
that your app or your UI

00:24:25.470 --> 00:24:27.000
is fully accessible.

00:24:27.000 --> 00:24:29.430
To really understand
your user's experience,

00:24:29.430 --> 00:24:33.480
to get that awareness of how
your UI is actually performing

00:24:33.480 --> 00:24:35.670
with an accessibility
service, we really

00:24:35.670 --> 00:24:38.730
highly recommend you go and
actually turn on TalkBack.

00:24:38.730 --> 00:24:40.740
Turn on Switch Access.

00:24:40.740 --> 00:24:41.700
Try them out.

00:24:41.700 --> 00:24:44.040
Learn how to use them and
gain a true understanding

00:24:44.040 --> 00:24:45.630
of your user's experience.

00:24:45.630 --> 00:24:47.940
The way I like to
describe it is automation

00:24:47.940 --> 00:24:51.460
is capable of finding a missing
label for a screen reader,

00:24:51.460 --> 00:24:54.760
but we can't really tell you
if your labels make sense.

00:24:54.760 --> 00:24:57.439
So really only by
understanding, putting yourself

00:24:57.439 --> 00:24:58.980
in the user's shoes
and understanding

00:24:58.980 --> 00:25:01.980
their experience-- or
asking users directly about

00:25:01.980 --> 00:25:03.300
their experience--

00:25:03.300 --> 00:25:05.520
only then can you truly
understand how accessible

00:25:05.520 --> 00:25:09.940
your UI is for users with
various different disabilities.

00:25:09.940 --> 00:25:11.610
And we have found
at Google, both

00:25:11.610 --> 00:25:15.300
looking at our first-party
and third-party applications,

00:25:15.300 --> 00:25:18.630
the most successful, the most
highly accessible apps that we

00:25:18.630 --> 00:25:21.540
see day to day are
the apps that combine

00:25:21.540 --> 00:25:23.940
multiple accessibility
testing strategies.

00:25:23.940 --> 00:25:25.860
So those that
leverage automation

00:25:25.860 --> 00:25:28.800
during presubmit or continuous
integration, but also

00:25:28.800 --> 00:25:32.130
have a regular process for
manual accessibility testing

00:25:32.130 --> 00:25:34.650
or bringing users in and
understanding their perspective

00:25:34.650 --> 00:25:36.890
on the accessibility
of an application.

00:25:36.890 --> 00:25:38.620
So these are all
things to consider.

00:25:38.620 --> 00:25:40.880
With that, I'll hand
it back to Qasid,

00:25:40.880 --> 00:25:43.590
who's going to talk to us more
about some of the newer APIs

00:25:43.590 --> 00:25:45.495
for expressing app semantics.

00:25:47.642 --> 00:25:48.600
QASID SADIQ: Hey, guys.

00:25:48.600 --> 00:25:49.740
I'm back.

00:25:49.740 --> 00:25:52.620
So let's just say that you've
adopted the APIs that I've

00:25:52.620 --> 00:25:55.740
talked about earlier, and
you've adopted the testing

00:25:55.740 --> 00:25:57.000
that Casey has suggested.

00:25:57.000 --> 00:25:59.520
And at this point, you've
got a pretty good foundation

00:25:59.520 --> 00:26:01.249
of accessibility in
your application.

00:26:01.249 --> 00:26:02.790
But the more you're
testing, the more

00:26:02.790 --> 00:26:06.220
you realize that there's some
holes in your experience,

00:26:06.220 --> 00:26:08.430
and that's breaking that
cycle of interaction

00:26:08.430 --> 00:26:10.060
that I mentioned earlier.

00:26:10.060 --> 00:26:13.110
So we've been adding new API
and new things to make it

00:26:13.110 --> 00:26:16.530
so these holes get plugged.

00:26:16.530 --> 00:26:18.940
So the first things
first is clickable spans,

00:26:18.940 --> 00:26:21.420
those a little
clickable bits of text.

00:26:21.420 --> 00:26:27.160
Before API 26, non-URL
spans were fundamentally

00:26:27.160 --> 00:26:29.710
inaccessible, and
developers had to write

00:26:29.710 --> 00:26:32.570
a bunch of hacky workarounds
to make these things work.

00:26:32.570 --> 00:26:33.940
That's now changed.

00:26:33.940 --> 00:26:36.760
In addition to that, in the
latest alpha of the Android X

00:26:36.760 --> 00:26:39.200
library, we've added
API to make this work

00:26:39.200 --> 00:26:40.870
all the way back to API 19.

00:26:40.870 --> 00:26:44.456
So you can look
out for that too.

00:26:44.456 --> 00:26:47.240
Secondly, there's some
views that, as far as a user

00:26:47.240 --> 00:26:49.046
is concerned, act and
behave like Windows.

00:26:49.046 --> 00:26:51.420
They have their own special
content, their own lifecycle,

00:26:51.420 --> 00:26:52.460
so on and so forth.

00:26:52.460 --> 00:26:54.340
And we call those
accessibility panes.

00:26:54.340 --> 00:26:58.130
Now, you as the developer
need to inform our frameworks

00:26:58.130 --> 00:27:01.670
to present these a little
bit differently to the user.

00:27:01.670 --> 00:27:05.390
And the way you do that is
by passing a non-null string

00:27:05.390 --> 00:27:08.162
to setAccessibilityPaneTitle
on the view.

00:27:08.162 --> 00:27:10.370
And again, this is a
user-facing string, so make sure

00:27:10.370 --> 00:27:12.800
it's concise, and
it's localized.

00:27:12.800 --> 00:27:15.470
This is available in
API 28, but we've also

00:27:15.470 --> 00:27:19.640
added this API to ViewCompat
in the latest Android X alpha,

00:27:19.640 --> 00:27:23.190
and that'll work all
the way back to API 19.

00:27:23.190 --> 00:27:25.650
And finally, there are headings.

00:27:25.650 --> 00:27:29.170
These section titles are
used by TalkBack users,

00:27:29.170 --> 00:27:33.816
for example, to navigate through
sections quickly and easily.

00:27:33.816 --> 00:27:36.620
And the way you specify that
is exactly what you probably

00:27:36.620 --> 00:27:37.250
expect.

00:27:37.250 --> 00:27:39.890
Pass in a Boolean to
setAccessibilityHeading

00:27:39.890 --> 00:27:41.720
on a view.

00:27:41.720 --> 00:27:46.310
This is also available
in 28, and we added this

00:27:46.310 --> 00:27:48.600
to the latest alpha of
the Android X library.

00:27:48.600 --> 00:27:50.945
That'll work all
the way back to 19.

00:27:50.945 --> 00:27:52.554
[INAUDIBLE],, thank
you for your time.

00:27:52.554 --> 00:27:53.470
Now it's back to Phil.

00:27:58.022 --> 00:27:58.980
PHIL WEAVER: All right.

00:27:58.980 --> 00:28:00.900
So circling back to
the title of this,

00:28:00.900 --> 00:28:03.170
which was Making
Accessibility Easy,

00:28:03.170 --> 00:28:05.390
we really want this to be easy.

00:28:05.390 --> 00:28:09.620
It's the only way that
users with disabilities

00:28:09.620 --> 00:28:11.840
are really going to be able
to access the ecosystem.

00:28:11.840 --> 00:28:14.260
Because occasionally
we'll counter somebody

00:28:14.260 --> 00:28:16.010
who's really willing
to do the extra mile,

00:28:16.010 --> 00:28:17.960
really dig into their
app and sort out

00:28:17.960 --> 00:28:19.472
all of the issues
for accessibility,

00:28:19.472 --> 00:28:20.180
and that's great.

00:28:20.180 --> 00:28:23.740
But not everybody, not every
developer can possibly do that.

00:28:23.740 --> 00:28:26.000
And so we need to make
this as easy as possible

00:28:26.000 --> 00:28:29.450
so that everyone can build this
into their workflow in a really

00:28:29.450 --> 00:28:30.730
natural way.

00:28:30.730 --> 00:28:33.860
And so certainly
to get the basics,

00:28:33.860 --> 00:28:35.840
we want it to be
straightforward.

00:28:35.840 --> 00:28:37.850
So if you've got
reasonable contrast

00:28:37.850 --> 00:28:40.080
to make the information
visible to everyone,

00:28:40.080 --> 00:28:43.040
you've got simple big
controls, you're using labels,

00:28:43.040 --> 00:28:46.580
we really want that to kind
of get you almost all the way.

00:28:46.580 --> 00:28:49.160
And then some of these other
APIs like Qasid was just

00:28:49.160 --> 00:28:52.310
describing should be able
to handle some of these more

00:28:52.310 --> 00:28:53.842
specialized situations.

00:28:53.842 --> 00:28:56.050
Like if you've got a full
screen fragment transition,

00:28:56.050 --> 00:28:59.390
you use the pane
title to make sure

00:28:59.390 --> 00:29:02.360
that that gets handled the same
way a window transition would.

00:29:05.360 --> 00:29:07.210
So saying that we
want it to be easy--

00:29:07.210 --> 00:29:11.460
it means if it's
hard, we've messed up,

00:29:11.460 --> 00:29:14.330
and we should fix that.

00:29:14.330 --> 00:29:17.132
We've found some developers
will really like-- well,

00:29:17.132 --> 00:29:19.090
the framework seems to
be coming up short here.

00:29:19.090 --> 00:29:21.330
So I'm going to
engineer a workaround

00:29:21.330 --> 00:29:24.060
to get around the problems
with the framework.

00:29:24.060 --> 00:29:25.440
Honestly, please don't do that.

00:29:28.150 --> 00:29:30.602
Let us fix it because
we can fix it at scale,

00:29:30.602 --> 00:29:31.560
and only we can fix it.

00:29:31.560 --> 00:29:33.340
It needs to be fixed
inside Android.

00:29:33.340 --> 00:29:36.990
If you find it in Android X,
if you want to fix it, by all

00:29:36.990 --> 00:29:39.300
means upload it to
Android X. And we're

00:29:39.300 --> 00:29:41.490
happy to accept fixes.

00:29:41.490 --> 00:29:43.470
But we want it
fixed centrally so

00:29:43.470 --> 00:29:45.390
that we can get a
consistent experience

00:29:45.390 --> 00:29:47.310
throughout the whole ecosystem.

00:29:47.310 --> 00:29:50.700
If you are engineering
some super custom solution,

00:29:50.700 --> 00:29:54.840
you think-- you know--
is an engineer working

00:29:54.840 --> 00:29:57.090
at a different company going
to actually do this work?

00:29:57.090 --> 00:29:58.631
And if the answer
is no, then there's

00:29:58.631 --> 00:29:59.890
probably something wrong.

00:29:59.890 --> 00:30:03.510
And so please reach out
if we're messing this up.

00:30:03.510 --> 00:30:05.550
You can file bugs on AOSP.

00:30:05.550 --> 00:30:08.160
You can ask questions
on Stack Overflow.

00:30:08.160 --> 00:30:10.870
But we much prefer to--

00:30:10.870 --> 00:30:14.090
we really prefer to get
the feedback that something

00:30:14.090 --> 00:30:16.670
is difficult, so we can try
to find an elegant solution

00:30:16.670 --> 00:30:17.870
that everyone can use.

00:30:17.870 --> 00:30:20.930
We want the-- some of things
that Qasid just presented,

00:30:20.930 --> 00:30:23.990
before he did that work,
the effort required

00:30:23.990 --> 00:30:27.620
to do some of these
things really required

00:30:27.620 --> 00:30:29.030
learning a new API surface.

00:30:29.030 --> 00:30:31.696
And we really wanted to condense
everything we could down to one

00:30:31.696 --> 00:30:32.350
line.

00:30:32.350 --> 00:30:35.164
And so we're trying to
present solutions that really

00:30:35.164 --> 00:30:37.830
aren't-- like if you've got this
thing, here's one line of code.

00:30:37.830 --> 00:30:38.710
It's all you need.

00:30:38.710 --> 00:30:39.770
If you get to
something that seems

00:30:39.770 --> 00:30:41.900
like it should be one line
of code, and it's not,

00:30:41.900 --> 00:30:42.530
let us know.

00:30:46.282 --> 00:30:49.790
And another place to go
just for other resources is

00:30:49.790 --> 00:30:51.690
g.co/androidaccessibility.

00:30:51.690 --> 00:30:55.080
There's a link here to
the developer.android.com

00:30:55.080 --> 00:30:57.360
for accessibility
testing, the link

00:30:57.360 --> 00:30:59.580
to get to the
Accessibility Scanner,

00:30:59.580 --> 00:31:04.990
and also the test framework
project that Casey described.

00:31:04.990 --> 00:31:07.295
That's available
open source on GitHub

00:31:07.295 --> 00:31:08.836
if you're interested
to look at that.

00:31:12.308 --> 00:31:14.990
So really appreciate
your time, and we'd

00:31:14.990 --> 00:31:16.635
be very happy
especially-- if you've

00:31:16.635 --> 00:31:19.010
got feedback for us of other
things that should be easier

00:31:19.010 --> 00:31:20.426
than they are,
we're going to also

00:31:20.426 --> 00:31:23.690
be out at the office hours
for a while this afternoon.

00:31:23.690 --> 00:31:25.450
We'd really love to talk to you.

00:31:25.450 --> 00:31:28.280
So thanks a lot for coming
and for your efforts

00:31:28.280 --> 00:31:31.760
in helping to make a
consistent ecosystem of very

00:31:31.760 --> 00:31:32.880
accessible apps.

00:31:32.880 --> 00:31:33.380
Thanks.

00:31:33.380 --> 00:31:34.880
[APPLAUSE]

00:31:34.880 --> 00:31:38.830
[MUSIC PLAYING]

