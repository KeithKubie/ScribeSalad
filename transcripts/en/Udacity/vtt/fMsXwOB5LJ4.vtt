WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
So let's remember how we defined our ranking function.

00:00:04.000 --> 00:00:06.000
So we said we're going to have a time step.

00:00:06.000 --> 00:00:08.000
We're going to keep going through steps to get more accurate rankings.

00:00:08.000 --> 00:00:13.000
But initially, we're going to give every rank: 1 divided by the number of pages.

00:00:13.000 --> 00:00:15.000
Before I call that capital "N",

00:00:15.000 --> 00:00:20.000
I'm going to use "npages" as a more Pythonic variable name for that.

00:00:20.000 --> 00:00:24.000
And we updated the rank at time step "t"

00:00:24.000 --> 00:00:28.000
by adding the probability that the

00:00:28.000 --> 00:00:31.000
random surfer starts over and randomly picks that page.

00:00:31.000 --> 00:00:34.000
So that's: (1 - d) is the probability of starting over,

00:00:34.000 --> 00:00:37.000
divided by npages--how many pages there are.

00:00:37.000 --> 00:00:39.000
And remember that "d" is our damping constant,

00:00:39.000 --> 00:00:43.000
and we'll decide that "d" is 0.8--that's the damping constant.

00:00:43.000 --> 00:00:47.000
We add to that the sum that we get of all the ranks,

00:00:47.000 --> 00:00:50.000
all the pages that link to this URL.

00:00:50.000 --> 00:00:55.000
We add up "d" times the previous iteration--

00:00:55.000 --> 00:01:00.000
so it's going to be: d times rank, on step "t" minus 1 of that page,

00:01:00.000 --> 00:01:04.000
but we want to divide that by the number of outlinks from p.

00:01:04.000 --> 00:01:06.000
So it's starting to look more like Python code.

00:01:06.000 --> 00:01:09.000
We want to simplify it a little bit before we get to Python code.

00:01:09.000 --> 00:01:12.000
And the first thing we're going to do to simplify it

00:01:12.000 --> 00:01:16.000
is observe that--well, we have this "t" parameter,

00:01:16.000 --> 00:01:19.000
but we only ever use the very previous one.

00:01:19.000 --> 00:01:22.000
So we don't really need to keep track of the rank value

00:01:22.000 --> 00:01:24.000
for all the differerent "t" values.

00:01:24.000 --> 00:01:26.000
We just need to keep track of the previous one.

00:01:26.000 --> 00:01:28.000
And when we did Fibonacci,

00:01:28.000 --> 00:01:31.000
we kept track of current and next, in variables,

00:01:31.000 --> 00:01:33.000
and that allowed us to keep track of the previous

00:01:33.000 --> 00:01:35.000
and the previous previous Fibonacci numbers.

00:01:35.000 --> 00:01:37.000
What we want to do with ranks is something similar

00:01:37.000 --> 00:01:41.000
so we're going to use the variable, ranks,

00:01:41.000 --> 00:01:43.000
to keep track of the current ranks.

00:01:43.000 --> 00:01:46.000
And as we compute the newranks,

00:01:46.000 --> 00:01:48.000
we're going to use the variable, newranks.

00:01:48.000 --> 00:01:50.000
So we'll use ranks;

00:01:50.000 --> 00:01:55.000
this corresponds to the ranks at time t minus 1--

00:01:55.000 --> 00:01:57.000
the ranks at the previous iteration--and we'll have

00:01:57.000 --> 00:02:01.000
a variable, newranks--which is the ranks at time t.

00:02:01.000 --> 00:02:03.000
And the reason we need both of those--

00:02:03.000 --> 00:02:06.000
as we update the rank from each page--

00:02:06.000 --> 00:02:09.000
so we're going to go through the pages, recomputing its rank,

00:02:09.000 --> 00:02:11.000
we can't lose the previous one.

00:02:11.000 --> 00:02:15.000
We still need to get rank at the previous step for that page.

00:02:15.000 --> 00:02:17.000
If we use the one that we got this time,

00:02:17.000 --> 00:02:19.000
that would distort the results.

00:02:19.000 --> 00:02:23.000
It would mean that the order that we update the ranks for changes the results.

00:02:23.000 --> 00:02:25.000
So we don't want the results to depend on

00:02:25.000 --> 00:02:27.000
the order that we go through the pages.

00:02:27.000 --> 00:02:30.000
That's why we need to keep track of both the previous values,

00:02:30.000 --> 00:02:35.000
which will be used for ranks t-1 and the newranks.

00:02:35.000 --> 00:02:38.000
Once we have done that, we don't need the "t" parameter anymore.

00:02:38.000 --> 00:02:41.000
What we're going to do is change this rank--

00:02:41.000 --> 00:02:45.000
the rank at time t is going to be the value of newrank,

00:02:45.000 --> 00:02:48.000
and the value of rank at time t-1--

00:02:48.000 --> 00:02:50.000
that's the value of ranks.

00:02:50.000 --> 00:02:53.000
The other change I slipped into this--

00:02:53.000 --> 00:02:55.000
before we had parentheses here,

00:02:55.000 --> 00:02:57.000
and I've changed them to square brackets.

00:02:57.000 --> 00:03:00.000
And square brackets should give you the idea that

00:03:00.000 --> 00:03:02.000
well, this might be our data structure

00:03:02.000 --> 00:03:05.000
that we're indexing--and that's correct.

00:03:05.000 --> 00:03:07.000
We want to index the data structure

00:03:07.000 --> 00:03:09.000
and we want to index it by the URL

00:03:09.000 --> 00:03:11.000
that we're looking for.

00:03:11.000 --> 00:03:14.000
And the Python dictionary provides a great way to do that.

00:03:14.000 --> 00:03:16.000
At the end of this will be a Python dictionary,

00:03:16.000 --> 00:03:18.000
and that's exactly what we want.

00:03:18.000 --> 00:03:20.000
So I think we're ready to start looking at the code.

00:03:20.000 --> 00:03:23.000
We've written this formula; it's still a mix of math and Python,

00:03:23.000 --> 99:59:59.000
but we're going to turn this into the code for computing the Page Ranks.

