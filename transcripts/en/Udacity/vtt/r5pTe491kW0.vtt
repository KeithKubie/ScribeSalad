WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.370
I would like you to think about a few properties of constructing the search tree this way,

00:00:04.370 --> 00:00:07.460
so taking an edge that is not yet covered--

00:00:07.460 --> 00:00:10.540
so where both endpoints are not part of the vertex cover--

00:00:10.540 --> 00:00:15.250
and then branching into 3 different possibilities, putting 1 endpoint into the vertex cover,

00:00:15.250 --> 00:00:18.030
putting the other point into the vertex cover, or both.

00:00:18.030 --> 00:00:21.650
So will the search tree always find the smallest vertex cover?

00:00:21.650 --> 00:00:26.090
Of course it can also find larger ones, but will it always find the smallest possible one

00:00:26.090 --> 00:00:27.740
for any given graph?

00:00:27.740 --> 00:00:30.330
Or could there be special cases where the search tree is wrong

00:00:30.330 --> 00:00:32.380
and we still need to fix that?

00:00:32.380 --> 00:00:39.260
Is it that the search tree at each level--and by level I basically mean if this is the tree here,

00:00:39.260 --> 00:00:43.840
then this would be a level and this would be the next level--

00:00:43.840 --> 00:00:48.300
is it that at each level the algorithm determines the assignment?

00:00:48.300 --> 00:00:53.690
So is a vertex in the vertex cover or not for at least 1 vertex?

00:00:53.690 --> 00:00:57.990
And this will require some thought, so this is a challenging one down here.

00:00:57.990 --> 00:01:02.720
Can we construct the search tree so that at each level of the search tree

00:01:02.720 --> 00:01:07.350
we determine the assignment of at least 2 vertices?

00:01:07.350 --> 00:01:09.270
And of course you could just guess here,

00:01:09.270 --> 00:01:13.260
but I would really like you to spend some time and think about the answers

00:01:13.260 --> 00:01:16.910
because this will be very important for you to really understand

00:01:16.910 --> 99:59:59.000
how you can build better search trees.

