WEBVTT
Kind: captions
Language: en

00:00:05.827 --> 00:00:06.910
PROFESSOR: Hey, everybody.

00:00:06.910 --> 00:00:11.510
Welcome to 6.849, Geometric
Folding Algorithms.

00:00:11.510 --> 00:00:12.620
I am Erik Demaine.

00:00:12.620 --> 00:00:14.090
You can call me Erik.

00:00:14.090 --> 00:00:18.720
And we have as TA Jayson
Lynch, who's right there.

00:00:18.720 --> 00:00:22.970
And this class is a bit
unusual, at least for me,

00:00:22.970 --> 00:00:28.280
because I'm trying for the first
time a new experiment, which

00:00:28.280 --> 00:00:31.585
is inverted lecturing.

00:00:31.585 --> 00:00:33.460
And I wrote this on the
poster for the class,

00:00:33.460 --> 00:00:36.120
and everyone started asking
me, what's inverted lectures?

00:00:36.120 --> 00:00:40.190
Well, it's not a new idea, but
I've never tried it before.

00:00:40.190 --> 00:00:45.560
The concept is to make these
in-class times, where we're

00:00:45.560 --> 00:00:48.090
all here together,
more interactive

00:00:48.090 --> 00:00:51.250
by taking the lecture component
of the class, which is covering

00:00:51.250 --> 00:00:55.010
all the material into videos
that you watch online.

00:00:55.010 --> 00:00:56.950
So this class is basically
going to alternate

00:00:56.950 --> 00:01:00.130
between real in-person things,
as you are here-- of course,

00:01:00.130 --> 00:01:01.530
we are also being
video recorded,

00:01:01.530 --> 00:01:03.910
so slightly a
contradiction in terms--

00:01:03.910 --> 00:01:06.880
but that's for the
people in the interwebs

00:01:06.880 --> 00:01:07.990
to be able to watch this.

00:01:11.090 --> 00:01:14.500
So we'll alternate between the
real in-class part and video

00:01:14.500 --> 00:01:16.120
lectures from the
last time I taught

00:01:16.120 --> 00:01:19.290
this class, which was fall 2010.

00:01:19.290 --> 00:01:21.080
So this is actually
what the course web

00:01:21.080 --> 00:01:24.510
page looks like
as of an hour ago.

00:01:24.510 --> 00:01:30.620
So we've got these-- L01,
L02, L03-- those are lectures.

00:01:30.620 --> 00:01:34.265
That's content, lots
of material packed

00:01:34.265 --> 00:01:36.640
in there, which is how I'm
used to teaching a class-- put

00:01:36.640 --> 00:01:40.110
as much material as
I can for a lecture.

00:01:40.110 --> 00:01:41.320
Those are already available.

00:01:41.320 --> 00:01:43.330
You can start
watching those videos.

00:01:43.330 --> 00:01:44.800
Lecture one is optional.

00:01:44.800 --> 00:01:49.740
I'm going to basically cover a
shorter version of that today.

00:01:49.740 --> 00:01:51.350
It says right there, optional.

00:01:51.350 --> 00:01:53.130
Then the Cs, which
don't exist yet,

00:01:53.130 --> 00:01:55.690
because we're
doing it right now.

00:01:55.690 --> 00:01:58.516
The Cs are the in-class
sessions, the contact hours.

00:01:58.516 --> 00:02:00.390
Some of those may be
recorded, like this one,

00:02:00.390 --> 00:02:01.400
we're going to record.

00:02:01.400 --> 00:02:05.400
But some will not be, and
you need to attend both.

00:02:05.400 --> 00:02:06.950
So you've got to
watch the videos,

00:02:06.950 --> 00:02:09.500
and you've got attend
all the classes.

00:02:09.500 --> 00:02:12.130
That's the set up.

00:02:12.130 --> 00:02:16.150
So this is a bit unusual, so
I'll spend a few more minutes

00:02:16.150 --> 00:02:20.320
on how this class is formatted.

00:02:20.320 --> 00:02:24.506
So-- requirements.

00:02:31.220 --> 00:02:35.960
We've got-- watch
video lectures.

00:02:41.890 --> 00:02:44.220
I'll talk a little bit
about timing of that.

00:02:44.220 --> 00:02:47.095
And then we've got
attend classes.

00:02:49.910 --> 00:02:52.820
And then to the actual
material, a regular part

00:02:52.820 --> 00:02:55.940
of the class that
you'll be graded on

00:02:55.940 --> 00:03:02.206
consists of two parts:
problem sets and a project.

00:03:02.206 --> 00:03:03.705
The project also
has a presentation.

00:03:11.260 --> 00:03:14.840
This is a project focus class,
so the bulk of your grade

00:03:14.840 --> 00:03:18.620
is based on the project
and presentation.

00:03:18.620 --> 00:03:20.865
Project can take on
many different forms.

00:03:23.370 --> 00:03:25.640
This is a theoretical
computer science class,

00:03:25.640 --> 00:03:28.260
so there's the typical
kinds of projects, like,

00:03:28.260 --> 00:03:31.510
to read a bunch of papers and
summarize them, survey them.

00:03:31.510 --> 00:03:34.500
Though we ask that you
keep them disjoint,

00:03:34.500 --> 00:03:36.890
more or less-- avoid
stuff that is well

00:03:36.890 --> 00:03:41.360
covered in this book,
Geometric Folding Algorithms,

00:03:41.360 --> 00:03:44.010
or in the class itself.

00:03:44.010 --> 00:03:47.500
But otherwise you
can survey material.

00:03:47.500 --> 00:03:49.510
In addition to the
standard survey paper,

00:03:49.510 --> 00:03:51.460
or instead of a
standard survey paper,

00:03:51.460 --> 00:03:54.030
you can write a bunch
of Wikipedia articles

00:03:54.030 --> 00:03:55.520
about folding stuff.

00:03:55.520 --> 00:03:58.090
So where survey stuff
should be new material

00:03:58.090 --> 00:04:00.250
that you haven't
seen, Wikipedia stuff

00:04:00.250 --> 00:04:02.580
could be material that
you've seen in this class

00:04:02.580 --> 00:04:04.180
but is not well
covered in Wikipedia.

00:04:04.180 --> 00:04:09.461
And that will help take over
the world, our usual goal.

00:04:09.461 --> 00:04:11.210
If you see a cool
algorithm, in this class

00:04:11.210 --> 00:04:12.876
you could implement
it if you're a coder

00:04:12.876 --> 00:04:15.690
and see how it
actually works, make it

00:04:15.690 --> 00:04:18.440
demoable, which will be fun.

00:04:18.440 --> 00:04:21.769
Or you can work on
an open problem.

00:04:21.769 --> 00:04:24.310
So if there's
interest, we'll run

00:04:24.310 --> 00:04:26.987
an optional open problem-solving
session, where we'll all

00:04:26.987 --> 00:04:28.820
get together and try
to solve open problems.

00:04:28.820 --> 00:04:30.740
I might also do them
in these class times,

00:04:30.740 --> 00:04:34.590
because now we have a lot of
freedom to be more attractive,

00:04:34.590 --> 00:04:39.180
to actually fold paper
or to have fun in class.

00:04:39.180 --> 00:04:42.416
And instead of me trying
to pack as much material

00:04:42.416 --> 00:04:43.790
as I can-- because
that's already

00:04:43.790 --> 00:04:48.210
been done in the videos-- you
could pose an open problem.

00:04:48.210 --> 00:04:49.960
Especially if you come
from another field,

00:04:49.960 --> 00:04:52.251
you may have some interesting
folding-related problems.

00:04:52.251 --> 00:04:53.410
Those could be really cool.

00:04:53.410 --> 00:04:57.920
Or you could build something,
a physical sculpture,

00:04:57.920 --> 00:05:02.030
physical structure of
some kind, furniture,

00:05:02.030 --> 00:05:03.500
architecture, whatever.

00:05:03.500 --> 00:05:05.330
Or you could do it
in a virtual world

00:05:05.330 --> 00:05:07.531
and just design
something interesting.

00:05:07.531 --> 00:05:09.530
Though there you might
want to do more than one,

00:05:09.530 --> 00:05:12.080
make it harder for yourself.

00:05:12.080 --> 00:05:13.740
All of these are
possible projects.

00:05:13.740 --> 00:05:15.989
There's a lot of different
options for different types

00:05:15.989 --> 00:05:18.680
of people, different
backgrounds, whatever.

00:05:18.680 --> 00:05:23.070
Then we'll also have problem
sets, which are weekly,

00:05:23.070 --> 00:05:26.110
roughly, and they
shouldn't be too long.

00:05:26.110 --> 00:05:27.960
And they will also
have an option

00:05:27.960 --> 00:05:29.560
of not doing all the problems.

00:05:29.560 --> 00:05:32.350
So every problem
set will probably

00:05:32.350 --> 00:05:35.950
have the rule that
you can drop, we

00:05:35.950 --> 00:05:37.910
will drop the
lowest grade on one

00:05:37.910 --> 00:05:40.320
of the problems that's
on the problem set.

00:05:40.320 --> 00:05:42.620
So that means if you just
don't want to do a problem,

00:05:42.620 --> 00:05:44.200
you can skip it
and your grade will

00:05:44.200 --> 00:05:45.390
be determined by the others.

00:05:45.390 --> 00:05:47.223
If you want you could
try to do all of them,

00:05:47.223 --> 00:05:49.500
and we'll just drop
the lowest grade.

00:05:49.500 --> 00:05:52.670
So if there's some problems
are easier for you,

00:05:52.670 --> 00:05:56.780
harder for others,
you can mix and match.

00:05:56.780 --> 00:05:58.480
Cool.

00:05:58.480 --> 00:06:01.660
There's a lot more details
about this stuff on the website.

00:06:01.660 --> 00:06:06.120
If you click on
Project, you'll get

00:06:06.120 --> 00:06:09.980
lots of details about these
different styles of project

00:06:09.980 --> 00:06:13.720
implementation-- survey,
open problems, whatever.

00:06:13.720 --> 00:06:15.945
Because what I said
was pretty brief.

00:06:18.680 --> 00:06:20.807
So look at that
for more details.

00:06:20.807 --> 00:06:22.890
Project, you don't have
to worry about right away,

00:06:22.890 --> 00:06:24.991
but one of the luxuries
of having video lectures

00:06:24.991 --> 00:06:26.490
is you could skip
ahead a little bit

00:06:26.490 --> 00:06:28.250
to see what looks
interesting to you

00:06:28.250 --> 00:06:30.580
and work on a project
related to that.

00:06:30.580 --> 00:06:34.320
I wanted to briefly show you a
little bit about this website

00:06:34.320 --> 00:06:37.100
and how it works, so
you get a flavor for it.

00:06:37.100 --> 00:06:39.360
So let's say the
very next thing you

00:06:39.360 --> 00:06:43.920
should do, right after you
leave here, sometime between now

00:06:43.920 --> 00:06:49.050
and noon on Monday, you
should watch lecture two.

00:06:49.050 --> 00:06:52.380
So you can just click on
lecture two here on the left.

00:06:52.380 --> 00:06:55.230
And this is the way it's set up.

00:06:55.230 --> 00:06:57.840
You could zoom to fit
everything on your screen.

00:06:57.840 --> 00:07:00.040
On the upper left
you've, got your video.

00:07:00.040 --> 00:07:01.354
And this should start playing.

00:07:01.354 --> 00:07:02.020
[VIDEO PLAYBACK]

00:07:02.020 --> 00:07:03.667
-All right, welcome
back to 6.849.

00:07:03.667 --> 00:07:04.500
[END VIDEO PLAYBACK]

00:07:04.500 --> 00:07:05.680
PROFESSOR: Hey it's me.

00:07:05.680 --> 00:07:07.138
I'm even wearing
the right t-shirt.

00:07:09.310 --> 00:07:12.230
I had a coincidence.

00:07:12.230 --> 00:07:15.460
The fun thing about these
videos, as a few nice features.

00:07:15.460 --> 00:07:17.790
One is as you jump
around in the video,

00:07:17.790 --> 00:07:20.440
you see the slide down here
in the lower left updates

00:07:20.440 --> 00:07:21.820
to whatever I'm covering.

00:07:21.820 --> 00:07:26.020
And also if I jump farther,
the page handwritten

00:07:26.020 --> 00:07:28.340
notes that I'm covering
on the right changes.

00:07:28.340 --> 00:07:35.820
So as I scrabble around, I think
is the term-- too many buttons.

00:07:35.820 --> 00:07:38.340
Who designed this website?

00:07:38.340 --> 00:07:39.980
All right, I forgot this.

00:07:39.980 --> 00:07:40.480
Reload.

00:07:43.950 --> 00:07:47.400
So to jump around.

00:07:47.400 --> 00:07:50.050
I'll turn down the volume.

00:07:50.050 --> 00:07:52.550
You can also speed up the video.

00:07:52.550 --> 00:07:55.090
This can be pretty entertaining
if you go really fast.

00:07:55.090 --> 00:07:58.440
But you can go 1.1, 1.2,
that's pretty comfortable.

00:07:58.440 --> 00:08:00.190
1.5.

00:08:00.190 --> 00:08:03.910
Yesterday I listened to a video
to at 2x. it's interesting.

00:08:03.910 --> 00:08:04.962
[VIDEO PLAYBACK]

00:08:04.962 --> 00:08:06.420
-In general, when
I make that fold,

00:08:06.420 --> 00:08:06.880
it might come out of here.

00:08:06.880 --> 00:08:09.220
I'd have to wrap around
that [? cone ?], sometimes.

00:08:09.220 --> 00:08:09.430
[END VIDEO PLAYBACK]

00:08:09.430 --> 00:08:11.680
PROFESSOR: Thankfully, I do
not sound like a Chipmunk.

00:08:11.680 --> 00:08:15.360
But if you haven't seen lecture
before, it's a little harder.

00:08:15.360 --> 00:08:17.360
But I'll be watching
the lectures with you,

00:08:17.360 --> 00:08:19.860
experiencing the same
total number of hours

00:08:19.860 --> 00:08:22.954
you have to experience,
So we're in this together.

00:08:22.954 --> 00:08:25.120
Let me know if you have any
comments on the website.

00:08:25.120 --> 00:08:26.840
It's all been done by
hand, so if there's

00:08:26.840 --> 00:08:29.470
anything you want changed,
it's easy to change.

00:08:29.470 --> 00:08:30.750
You can also do fun things.

00:08:30.750 --> 00:08:33.900
Like when it's paused,
you can jump around

00:08:33.900 --> 00:08:37.044
in pages on the right and
say, oh, yeah, I didn't really

00:08:37.044 --> 00:08:37.919
understand that page.

00:08:37.919 --> 00:08:40.140
And you click on
this time, and it

00:08:40.140 --> 00:08:41.720
will start playing
from that time.

00:08:45.382 --> 00:08:46.441
At full speed.

00:08:46.441 --> 00:08:47.815
We could slow it
down, too, which

00:08:47.815 --> 00:08:48.940
can be pretty entertaining.

00:08:52.930 --> 00:08:54.590
Anyway, you get the idea.

00:08:54.590 --> 00:08:55.737
Let me know how it goes.

00:08:55.737 --> 00:08:57.320
I want to make it
as easy as possible.

00:08:57.320 --> 00:08:58.945
In fact, if you don't
like my software,

00:08:58.945 --> 00:09:01.280
you can just skip it
all, download this video,

00:09:01.280 --> 00:09:04.220
like 720p version
or the 360p version.

00:09:04.220 --> 00:09:07.810
Play it in VLC with whatever
fancy speed up, speed downs,

00:09:07.810 --> 00:09:12.600
you want to use, or put on your
iPad or other tablet, whatever.

00:09:12.600 --> 00:09:14.009
This page should
work on an iPad,

00:09:14.009 --> 00:09:15.300
but I haven't tested it lately.

00:09:15.300 --> 00:09:17.570
If it doesn't, let me know.

00:09:17.570 --> 00:09:18.160
Cool.

00:09:18.160 --> 00:09:19.368
So that's what it looks like.

00:09:19.368 --> 00:09:21.230
And then at the
top of this page,

00:09:21.230 --> 00:09:25.610
you see here a link
to completion form.

00:09:25.610 --> 00:09:28.570
When you finish watching the
video, you click on this form.

00:09:28.570 --> 00:09:29.730
It's pretty minimal.

00:09:29.730 --> 00:09:32.070
You enter basically
your name, your username

00:09:32.070 --> 00:09:35.710
or your email address, you
say yes, I watched the video,

00:09:35.710 --> 00:09:38.780
and then that's all that's
required, you click Submit.

00:09:38.780 --> 00:09:42.050
But we highly
encourage you to say

00:09:42.050 --> 00:09:43.290
what you think at this point.

00:09:43.290 --> 00:09:47.320
If you have any questions about
the lecture, that wasn't clear,

00:09:47.320 --> 00:09:49.130
or anything you
didn't understand.

00:09:49.130 --> 00:09:52.190
Or I a briefly mention something
that sounded cool to you,

00:09:52.190 --> 00:09:53.790
and you want to
know more about it.

00:09:53.790 --> 00:09:58.170
This is your chance to
influence what I cover in class,

00:09:58.170 --> 00:09:59.880
and this is why
you have to submit

00:09:59.880 --> 00:10:02.490
this form by noon
the previous day.

00:10:02.490 --> 00:10:06.350
So watching video lectures
and filling out that form

00:10:06.350 --> 00:10:14.380
is due by noon on
Mondays and Wednesdays,

00:10:14.380 --> 00:10:16.550
the day before class.

00:10:16.550 --> 00:10:21.090
That will give me 22 hours
to prepare class, which

00:10:21.090 --> 00:10:23.310
should be enough,
we'll find out.

00:10:23.310 --> 00:10:25.650
And so I can adapt
the in-class time

00:10:25.650 --> 00:10:27.810
to be whatever people
care about most.

00:10:27.810 --> 00:10:29.650
So it's kind of like a poll.

00:10:29.650 --> 00:10:33.170
If lots of people say I didn't
understand x, I will cover x.

00:10:33.170 --> 00:10:35.780
If lots of people are curious
about y, I will cover y.

00:10:35.780 --> 00:10:38.087
So whatever you
want to know about,

00:10:38.087 --> 00:10:40.670
typically related things, but
if you have unrelated things you

00:10:40.670 --> 00:10:43.610
want to bring up as well,
feel free to put it in there.

00:10:43.610 --> 00:10:49.250
And we'll try to schedule it in
when it's time or when it fits.

00:10:49.250 --> 00:10:50.492
Yeah, that's the plan.

00:10:50.492 --> 00:10:52.950
I've never done this before,
so if you don't like the form,

00:10:52.950 --> 00:10:53.630
tell me.

00:10:53.630 --> 00:10:57.240
Anything you don't like or think
should change, just send email.

00:10:57.240 --> 00:11:00.180
Or put it in the form,
but email's good, too.

00:11:03.560 --> 00:11:04.110
Question?

00:11:04.110 --> 00:11:06.018
AUDIENCE: I noticed
you have a "no" option.

00:11:06.018 --> 00:11:09.039
Is that for, like, oh,
shoot, it's 11:45 on Monday,

00:11:09.039 --> 00:11:10.205
and I haven't watched this.

00:11:10.205 --> 00:11:12.080
Should I still submit
the form and say, "no?"

00:11:12.080 --> 00:11:13.038
PROFESSOR: Interesting.

00:11:15.570 --> 00:11:16.490
You're so honest.

00:11:16.490 --> 00:11:20.230
Why would you fill
out "no" on this form?

00:11:20.230 --> 00:11:22.230
I guess so.

00:11:22.230 --> 00:11:24.700
You can fill out the
form multiple times.

00:11:24.700 --> 00:11:27.750
So you could you could say
no and give your excuse here,

00:11:27.750 --> 00:11:28.500
if you want it.

00:11:28.500 --> 00:11:30.180
I'll watch it tomorrow,
maybe, and then

00:11:30.180 --> 00:11:31.605
later on fill it in with yes.

00:11:31.605 --> 00:11:33.480
So in particular, if
you also have questions,

00:11:33.480 --> 00:11:35.902
like you watched the video
early on and then later

00:11:35.902 --> 00:11:38.360
on you have a question about
it, if it's still before class

00:11:38.360 --> 00:11:40.272
time, feel free to
fill this out again.

00:11:40.272 --> 00:11:41.980
It just makes another
entry in our table.

00:11:41.980 --> 00:11:43.480
This is a Google form.

00:11:43.480 --> 00:11:46.210
Another question?

00:11:46.210 --> 00:11:47.900
I guess that's
the reason for no.

00:11:47.900 --> 00:11:51.810
Maybe also we couldn't
put a single option.

00:11:51.810 --> 00:11:55.480
No, it's to force you
to claim, honestly.

00:11:55.480 --> 00:11:57.560
This all honor
system, right, so this

00:11:57.560 --> 00:12:00.310
is like forcing you to make
a decision to be dishonest,

00:12:00.310 --> 00:12:01.100
I guess.

00:12:01.100 --> 00:12:04.320
Or to be honest, rather.

00:12:04.320 --> 00:12:06.792
Cool.

00:12:06.792 --> 00:12:08.750
To make this work, you've
got to ask questions,

00:12:08.750 --> 00:12:09.916
you've got a request topics.

00:12:09.916 --> 00:12:14.650
Otherwise I'll just fill your
class times with more material.

00:12:14.650 --> 00:12:16.270
That would be my
natural temptation,

00:12:16.270 --> 00:12:19.390
so you've got to hold me back
and ask lots of questions.

00:12:19.390 --> 00:12:22.190
One particular request
I wanted to highlight

00:12:22.190 --> 00:12:26.410
is to send me cool
things to cover.

00:12:26.410 --> 00:12:29.900
In particular, you
all surf the web.

00:12:29.900 --> 00:12:34.550
And if you see cool
folding things, or any kind

00:12:34.550 --> 00:12:45.060
of folding-related thing,
on the web, send it to me.

00:12:49.960 --> 00:12:50.980
By email.

00:12:50.980 --> 00:12:55.581
And the plan is to do one
a day, or maybe two a day,

00:12:55.581 --> 00:12:56.330
for in class time.

00:12:56.330 --> 00:12:57.871
There's lots of fun
things out there,

00:12:57.871 --> 00:12:59.360
and it's hard to see it all.

00:12:59.360 --> 00:13:01.580
So when you discover
things, tell

00:13:01.580 --> 00:13:04.612
me and I will schedule it
in throughout the semester.

00:13:04.612 --> 00:13:06.820
You can think of this as a
standing homework problem.

00:13:06.820 --> 00:13:09.355
You should do it sometime
before the end of semester.

00:13:13.210 --> 00:13:14.040
Another experiment.

00:13:14.040 --> 00:13:15.940
I think to be fun.

00:13:15.940 --> 00:13:20.200
That is the end of the
class organizationally.

00:13:20.200 --> 00:13:23.261
Unless there are any questions
about requirements or style

00:13:23.261 --> 00:13:23.760
or format.

00:13:26.620 --> 00:13:31.880
Then in the rest of this class,
I'm going to cover, as I said,

00:13:31.880 --> 00:13:34.740
a short version of
lecture one, which is just

00:13:34.740 --> 00:13:36.080
an overview of the whole class.

00:13:36.080 --> 00:13:38.640
So I want to give you a flavor
of what the course is about,

00:13:38.640 --> 00:13:41.370
what kind of theorems we
prove, what kind of algorithms

00:13:41.370 --> 00:13:43.946
we develop, so you can
decide whether you are

00:13:43.946 --> 00:13:45.820
interested in this class,
whether to take it.

00:13:45.820 --> 00:13:50.066
There is also a
survey that, where

00:13:50.066 --> 00:13:51.440
you put your name,
email address,

00:13:51.440 --> 00:13:52.815
will add you to
the mailing list.

00:13:52.815 --> 00:13:55.009
And I announce every
lecture, so if you're

00:13:55.009 --> 00:13:56.550
listening to the
class, you just want

00:13:56.550 --> 00:13:59.190
to listen to things
you're interested in,

00:13:59.190 --> 00:14:01.550
come to class for
interesting things,

00:14:01.550 --> 00:14:06.900
just listen to that email and
see when cool things come up.

00:14:06.900 --> 00:14:09.310
And also there's a little
survey on that piece of paper.

00:14:09.310 --> 00:14:12.410
Does anyone not have
the piece of paper?

00:14:12.410 --> 00:14:15.100
Couple people, so we
will get them to you.

00:14:15.100 --> 00:14:17.900
A little survey just
to get your background.

00:14:17.900 --> 00:14:20.350
There's no required
background for this class,

00:14:20.350 --> 00:14:22.500
because lots of people
come from different areas.

00:14:22.500 --> 00:14:25.320
Hopefully, you know at least
one of the background areas,

00:14:25.320 --> 00:14:27.900
but anything can
kind of be filled in.

00:14:27.900 --> 00:14:30.590
And one of the points
of this questionnaire

00:14:30.590 --> 00:14:34.840
is if there's something
you don't understand, like,

00:14:34.840 --> 00:14:38.096
oh, gosh I should
know XYZ algorithm,

00:14:38.096 --> 00:14:40.220
and you assumed it in
lecture, but I don't know it,

00:14:40.220 --> 00:14:41.210
could you cover it?

00:14:41.210 --> 00:14:44.290
And if enough people
request that, I will.

00:14:44.290 --> 00:14:45.980
So that's the format.

00:14:45.980 --> 00:14:51.180
Out of curiosity, how many
people here are a course six?

00:14:51.180 --> 00:14:53.780
And how many people
are course 18?

00:14:53.780 --> 00:14:57.920
And how many people are other?

00:14:57.920 --> 00:14:59.730
OK.

00:14:59.730 --> 00:15:02.250
So reasonably balanced.

00:15:02.250 --> 00:15:05.500
A lot of 6, though.

00:15:05.500 --> 00:15:09.620
So we are talking about
geometric folding algorithms.

00:15:09.620 --> 00:15:13.180
So there's geometry,
there's folding,

00:15:13.180 --> 00:15:14.760
and there's algorithms.

00:15:14.760 --> 00:15:21.340
Algorithms are how we compute
things at least theoretically,

00:15:21.340 --> 00:15:26.590
and in general what
this field is about

00:15:26.590 --> 00:15:30.070
is both mathematics
and computer science.

00:15:30.070 --> 00:15:33.590
Say, the mathematics
and algorithms

00:15:33.590 --> 00:15:35.560
that underlie how things fold.

00:15:48.650 --> 00:15:51.885
And the technical term for
things is geometric objects.

00:15:56.690 --> 00:15:58.190
And we're interested
not only in how

00:15:58.190 --> 00:16:00.290
they fold, but also
how they unfold.

00:16:00.290 --> 00:16:02.660
In general, you have
some geometric structure

00:16:02.660 --> 00:16:04.540
they can reconfigure,
like, my arm here

00:16:04.540 --> 00:16:06.169
can reconfigure in
interesting ways.

00:16:06.169 --> 00:16:08.710
We want to know-- what are all
the ways they can reconfigure,

00:16:08.710 --> 00:16:10.780
what all the way it could fold?

00:16:10.780 --> 00:16:14.015
This piece of paper is
another geometric object.

00:16:14.015 --> 00:16:16.140
We want to know what all
the ways that it can fold.

00:16:21.280 --> 00:16:23.640
Before I talk about more
formally what this means,

00:16:23.640 --> 00:16:26.400
I want to show you that
folding comes up everywhere,

00:16:26.400 --> 00:16:26.900
pretty much.

00:16:26.900 --> 00:16:28.420
Almost any discipline
you can name,

00:16:28.420 --> 00:16:31.900
there's some, if it involves
physical things at least,

00:16:31.900 --> 00:16:33.160
has geometric objects.

00:16:33.160 --> 00:16:35.752
Geometric objects
tend to comply.

00:16:35.752 --> 00:16:37.960
Even if you're working with
completely rigid objects,

00:16:37.960 --> 00:16:39.990
you don't want them to fold.

00:16:39.990 --> 00:16:43.640
That's a folding problem.

00:16:43.640 --> 00:16:47.960
So I have here a list of a bunch
of different application areas,

00:16:47.960 --> 00:16:50.640
and I'm going to show you some
pictures and videos related

00:16:50.640 --> 00:16:51.810
to them.

00:16:51.810 --> 00:16:53.540
So the first one is robotics.

00:16:53.540 --> 00:16:56.670
So if you have things
like a robotic arm,

00:16:56.670 --> 00:16:58.140
it starts in one configuration.

00:16:58.140 --> 00:17:00.480
You want to continuously
move it to reach

00:17:00.480 --> 00:17:02.970
some other configuration,
so it can pick up somebody,

00:17:02.970 --> 00:17:05.079
drop it off over here.

00:17:05.079 --> 00:17:06.530
I want to know,
how should I plan

00:17:06.530 --> 00:17:09.349
the motion of my robotic arm?

00:17:09.349 --> 00:17:11.319
A different kind of
robotic application

00:17:11.319 --> 00:17:14.569
is to make sheets of
material that are themselves

00:17:14.569 --> 00:17:17.920
robots that told
themselves into origami.

00:17:17.920 --> 00:17:22.339
This is a self folding sheet
developed by collaboration

00:17:22.339 --> 00:17:25.560
with MIT and Harvard.

00:17:25.560 --> 00:17:28.790
And you just send a little
bit of electrical current.

00:17:28.790 --> 00:17:31.420
These little metal
pieces heat up,

00:17:31.420 --> 00:17:34.150
which causes them to pull
the creases shut, and, boom,

00:17:34.150 --> 00:17:38.680
you get your origami boat--
with no origamist required.

00:17:38.680 --> 00:17:42.230
The same sheet can fold
into many different shapes,

00:17:42.230 --> 00:17:44.356
and the underlying
algorithm here,

00:17:44.356 --> 00:17:45.730
or the underlying
mathematics, is

00:17:45.730 --> 00:17:48.370
that this pattern of
creases, square grid

00:17:48.370 --> 00:17:50.330
with altering
diagonals, can fold

00:17:50.330 --> 00:17:55.070
into essentially any shape
that is made out of cubes.

00:17:55.070 --> 00:17:57.670
Here we're making a paper
plane out of the same sheet,

00:17:57.670 --> 00:17:59.460
sending it different signals.

00:17:59.460 --> 00:18:04.790
It does not fly but
probably floats.

00:18:04.790 --> 00:18:06.220
So that's the idea.

00:18:06.220 --> 00:18:09.960
And you can imagine a
sheet like this could just

00:18:09.960 --> 00:18:13.690
be arbitrarily reprogrammed
to fold into this gadget,

00:18:13.690 --> 00:18:15.690
so I don't have to bring
around so many gadgets.

00:18:15.690 --> 00:18:17.790
Maybe my laptop
could fold smaller,

00:18:17.790 --> 00:18:20.430
and later could unfold in
something to my desktop.

00:18:20.430 --> 00:18:22.940
And I don't know, my
phone could reconfigure

00:18:22.940 --> 00:18:24.330
into something else.

00:18:24.330 --> 00:18:25.202
That's the vision.

00:18:25.202 --> 00:18:27.160
This is what we call
programmable matter, where

00:18:27.160 --> 00:18:28.312
you can change shape.

00:18:28.312 --> 00:18:30.020
In the same way that
we program software,

00:18:30.020 --> 00:18:33.680
we want to be able
to program shape.

00:18:33.680 --> 00:18:36.990
Obviously, we're just
getting there now.

00:18:36.990 --> 00:18:38.160
So that's robotics.

00:18:38.160 --> 00:18:40.380
Next up is graphics.

00:18:40.380 --> 00:18:43.590
One example is you want
to animate a character

00:18:43.590 --> 00:18:44.860
from one position to another.

00:18:44.860 --> 00:18:50.240
That's a key frame animation
that's a folding problem.

00:18:50.240 --> 00:18:53.680
I have here an example of
the two dimensional analog,

00:18:53.680 --> 00:18:57.610
where you have one polygon
and another polygon,

00:18:57.610 --> 00:18:59.170
and you want to
morph continuously

00:18:59.170 --> 00:19:00.430
from one to the other.

00:19:00.430 --> 00:19:03.250
And these animations
are all found

00:19:03.250 --> 00:19:06.310
by algorithms that are
motivated by folding stuff

00:19:06.310 --> 00:19:08.770
that we will cover
in this class.

00:19:08.770 --> 00:19:11.380
And that's not so easy, but
it's lots of fun things.

00:19:11.380 --> 00:19:14.190
All of these motions
avoid collision,

00:19:14.190 --> 00:19:17.310
and they approximately preserve
the edge lengths, also,

00:19:17.310 --> 00:19:18.030
if it's possible.

00:19:18.030 --> 00:19:19.696
If they match on the
left and the right,

00:19:19.696 --> 00:19:21.860
they will preserve
those edge links.

00:19:24.640 --> 00:19:26.215
So that's graphics, morphing.

00:19:29.010 --> 00:19:33.200
Mechanics motivated a lot of
mechanical linkage problems.

00:19:33.200 --> 00:19:35.790
In particular is this
great book from 1877

00:19:35.790 --> 00:19:37.466
called How to Draw
a Straight Line.

00:19:37.466 --> 00:19:39.590
You may think you know how
to draw a straight line,

00:19:39.590 --> 00:19:44.290
but the point of this
book is to figure out--

00:19:44.290 --> 00:19:49.430
by turning a circular crank,
can I draw a straight line?

00:19:49.430 --> 00:19:52.610
And this is motivated by steam
engines, where you have a steam

00:19:52.610 --> 00:19:54.760
piston is moving up and
down in a straight line,

00:19:54.760 --> 00:19:58.920
and you want to turn
a wheel on your train.

00:19:58.920 --> 00:20:00.110
So how do you do that?

00:20:00.110 --> 00:20:02.310
Well, these are two
old ways to do it,

00:20:02.310 --> 00:20:08.420
and here's what they look like
this in computational land.

00:20:08.420 --> 00:20:09.930
These are the original drawings.

00:20:09.930 --> 00:20:15.340
So we have on the top a design
by Watt, the unit, in 1784,

00:20:15.340 --> 00:20:16.840
and it's approximately straight.

00:20:16.840 --> 00:20:19.230
It's not perfect, but this
highlighted point moves

00:20:19.230 --> 00:20:20.690
along a circle,
and the green point

00:20:20.690 --> 00:20:21.912
moves along the figure eight.

00:20:21.912 --> 00:20:24.370
And the figure eight is fairly
straight here in the middle.

00:20:24.370 --> 00:20:26.500
So if you just use that
part, it works pretty well.

00:20:26.500 --> 00:20:28.820
You lose a little
bit from the wiggle,

00:20:28.820 --> 00:20:33.510
but it was used in a lot
of locomotive engines.

00:20:33.510 --> 00:20:35.850
Down here, you have the
first correct solution

00:20:35.850 --> 00:20:39.670
by [? Percy ?] in 1864,
almost 100 years later,

00:20:39.670 --> 00:20:42.520
and if you move the highlighted
a point along the circle,

00:20:42.520 --> 00:20:44.370
this point moves
along the red line.

00:20:46.606 --> 00:20:48.980
And there's a whole bunch of
mathematics related to this,

00:20:48.980 --> 00:20:53.460
generalizing this result, and
we will cover it in this class.

00:20:53.460 --> 00:20:56.050
Next up, we have manufacturing.

00:20:56.050 --> 00:21:01.360
This is a fun example of
bending a piece of wire.

00:21:01.360 --> 00:21:05.065
This is a machine called DIWire,
do-it-yourself wire bending.

00:21:05.065 --> 00:21:06.690
So you can build one
of these machines.

00:21:06.690 --> 00:21:09.230
Here, it's making
a planar shape.

00:21:09.230 --> 00:21:12.200
You can also make
three-dimensional shapes.

00:21:12.200 --> 00:21:13.750
Lots of things are possible.

00:21:13.750 --> 00:21:14.880
This is a recent machine.

00:21:14.880 --> 00:21:16.463
There's actually a
lot of wire bending

00:21:16.463 --> 00:21:17.740
machines that are out there.

00:21:17.740 --> 00:21:19.900
This is a nice and simple one.

00:21:19.900 --> 00:21:21.490
But can you make everything?

00:21:21.490 --> 00:21:24.570
No, because this piece of
wire can't collide with itself

00:21:24.570 --> 00:21:26.290
and can't collide
with the machine.

00:21:26.290 --> 00:21:27.470
That's a constraint.

00:21:27.470 --> 00:21:31.400
And you want to figure out,
what shapes can you make?

00:21:31.400 --> 00:21:35.320
Can I make my pair of glasses,
or am I limited somehow?

00:21:35.320 --> 00:21:38.900
That's a folding problem,
which we will talk about.

00:21:38.900 --> 00:21:41.530
Next up, medical.

00:21:41.530 --> 00:21:43.660
So one example of a
medical application

00:21:43.660 --> 00:21:45.670
is to build a stent.

00:21:45.670 --> 00:21:49.360
This is called an origami
stent, developed at Oxford

00:21:49.360 --> 00:21:50.600
about two years ago.

00:21:50.600 --> 00:21:53.300
And the idea is you want to do
non-intrusive heart surgery,

00:21:53.300 --> 00:21:55.490
so you want to take
this big thing,

00:21:55.490 --> 00:21:59.150
fold it down really small,
like this, and stick it

00:21:59.150 --> 00:22:01.370
through some small blood
vessels in your body

00:22:01.370 --> 00:22:03.245
until you get up near
your heart where you've

00:22:03.245 --> 00:22:06.320
got nice big vessels
you want to de-clog.

00:22:06.320 --> 00:22:09.596
And so you want to expand it
back out to its larger size.

00:22:09.596 --> 00:22:11.470
So it's essentially a
transportation problem.

00:22:11.470 --> 00:22:13.000
You want to make
something small,

00:22:13.000 --> 00:22:17.510
until it gets where you need
it, and then you make it big.

00:22:17.510 --> 00:22:22.462
That's one example of
a medical application.

00:22:22.462 --> 00:22:24.420
Related to that kind of
transportation problem,

00:22:24.420 --> 00:22:27.400
you also have
motivation of aerospace.

00:22:27.400 --> 00:22:30.740
So you want to send a
large object into space,

00:22:30.740 --> 00:22:33.530
and your space shuttle
isn't big enough to do it.

00:22:33.530 --> 00:22:36.180
You'd like to fold it
down to become smaller.

00:22:36.180 --> 00:22:38.980
This is an example by Robert
Lang, who is pictured here,

00:22:38.980 --> 00:22:40.770
leading origami designer.

00:22:40.770 --> 00:22:45.000
And this is a prototype.

00:22:45.000 --> 00:22:47.050
It's only five meters in size.

00:22:47.050 --> 00:22:50.470
The goal is to make 100-meter
telescope lens, which

00:22:50.470 --> 00:22:53.040
definitely does not fit
in your space station.

00:22:53.040 --> 00:22:55.130
So you do lots of
foldings like this,

00:22:55.130 --> 00:22:57.030
until it fits in
your space shuttle.

00:22:57.030 --> 00:22:57.550
Send it out.

00:22:57.550 --> 00:22:59.466
When you're in space,
you've got lots of room,

00:22:59.466 --> 00:23:00.490
and you can unfold out.

00:23:00.490 --> 00:23:04.900
And you get your giant lens,
much larger than Hubble's lens,

00:23:04.900 --> 00:23:05.460
for example.

00:23:07.940 --> 00:23:10.190
In general, this area is
called deployable structures,

00:23:10.190 --> 00:23:13.450
when you want to make something
small for transportation.

00:23:13.450 --> 00:23:15.430
Then we have biology.

00:23:15.430 --> 00:23:18.250
Protein folding
is a big problem.

00:23:18.250 --> 00:23:19.580
A lot of people work on it.

00:23:19.580 --> 00:23:23.620
And a protein folds kind of like
a robotic arm, geometrically.

00:23:23.620 --> 00:23:26.560
It's a little different , and
it's not fully understood how

00:23:26.560 --> 00:23:27.190
it works.

00:23:27.190 --> 00:23:29.580
But there's a lot of cool
folding problems, geometry

00:23:29.580 --> 00:23:34.670
problems, that we've studied,
motivated by how proteins fold

00:23:34.670 --> 00:23:35.970
and figuring that out.

00:23:35.970 --> 00:23:38.190
Applications, things
like drug design,

00:23:38.190 --> 00:23:41.840
you want to kill a virus
without killing the host.

00:23:41.840 --> 00:23:44.300
Design a proteins that
folds into the right shape,

00:23:44.300 --> 00:23:47.490
so it kills one thing
and not the other.

00:23:47.490 --> 00:23:50.890
That's the sort of general
goal, and have some cool things

00:23:50.890 --> 00:23:55.760
which we will cover in
this class related to that.

00:23:55.760 --> 00:23:58.840
Next is sculpture,
and origami design

00:23:58.840 --> 00:24:01.764
is an obvious motivation
for why you might be here.

00:24:01.764 --> 00:24:03.430
This is why we initially
got interested.

00:24:03.430 --> 00:24:05.420
Origami has reached
incredible heights.

00:24:05.420 --> 00:24:09.950
Both of these are folded
from one square, no cuts.

00:24:09.950 --> 00:24:12.840
So just one square paper, you
can make a three headed dog.

00:24:12.840 --> 00:24:16.160
You can make, I guess I
shouldn't call him a man,

00:24:16.160 --> 00:24:19.510
but you can make a
Nazgul on his horse.

00:24:19.510 --> 00:24:20.749
Or is it one entity?

00:24:20.749 --> 00:24:21.290
I don't know.

00:24:21.290 --> 00:24:24.760
But it's one square
paper, that much I know.

00:24:24.760 --> 00:24:26.780
This is designed
by Jason Ku who's

00:24:26.780 --> 00:24:29.700
the President of the origami
club at MIT, OrigaMIT, which

00:24:29.700 --> 00:24:31.030
you should all check out.

00:24:31.030 --> 00:24:33.442
They meet on Sundays at 3:00.

00:24:36.580 --> 00:24:38.500
I know there's a bunch
of origami people here.

00:24:38.500 --> 00:24:40.672
So how are these possible?

00:24:40.672 --> 00:24:42.630
These are possible through
mathematics and kind

00:24:42.630 --> 00:24:45.486
of algorithms that we
will cover in this class.

00:24:45.486 --> 00:24:46.860
In fact there, is
a guest lecture

00:24:46.860 --> 00:24:49.256
by Jason Ku, which you'll
be watching, I think,

00:24:49.256 --> 00:24:52.010
in lecture six.

00:24:52.010 --> 00:24:53.930
And he's not actually
in town, but still he

00:24:53.930 --> 00:24:57.140
can give the video lecture,
because he already gave it.

00:24:57.140 --> 00:25:00.180
It's like time travel.

00:25:00.180 --> 00:25:04.000
I have just a few examples
of some of our sculpture.

00:25:04.000 --> 00:25:07.500
This is with Martin Demaine,
who's your cameraman here.

00:25:07.500 --> 00:25:10.600
And these are based on
curve creases, which

00:25:10.600 --> 00:25:12.656
we may talk about to some
extent in this class.

00:25:12.656 --> 00:25:14.780
And we didn't talk about
it too much two years ago,

00:25:14.780 --> 00:25:16.050
but a little bit.

00:25:16.050 --> 00:25:18.520
Curve creases are not very
well understood mathematically.

00:25:18.520 --> 00:25:21.010
Almost everything we will cover
is based on straight crease

00:25:21.010 --> 00:25:23.100
design, like most origami.

00:25:23.100 --> 00:25:24.910
Curve creases are
pretty amazing, though.

00:25:24.910 --> 00:25:27.660
They do some really cool
shapes, and we're still

00:25:27.660 --> 00:25:30.285
trying to figure them out-- how
to design them algorithmically.

00:25:33.670 --> 00:25:35.400
These pieces are
on display in DC

00:25:35.400 --> 00:25:37.485
right now if you want
to check them out,

00:25:37.485 --> 00:25:39.090
for the next several months.

00:25:42.510 --> 00:25:47.450
These pieces of paper are
circles with a circular hole,

00:25:47.450 --> 00:25:48.810
and there's more than one.

00:25:48.810 --> 00:25:50.610
This has two pieces.

00:25:50.610 --> 00:25:51.925
This has three.

00:25:51.925 --> 00:25:55.240
This has, I think, five.

00:25:55.240 --> 00:25:55.740
OK.

00:25:55.740 --> 00:25:58.060
So that was a brief
sculpture origami design.

00:25:58.060 --> 00:26:00.940
Lots of different other possible
sculptures, kinetic sculpture,

00:26:00.940 --> 00:26:03.380
you might want to try building.

00:26:03.380 --> 00:26:06.180
Also architecture,
reconfigurable architecture.

00:26:06.180 --> 00:26:08.210
I think this is an
underexplored area.

00:26:08.210 --> 00:26:10.590
How many people here
are from architecture?

00:26:10.590 --> 00:26:12.780
A few.

00:26:12.780 --> 00:26:15.060
You might want to make some
reconfigurable buildings.

00:26:15.060 --> 00:26:19.040
Hoberman is one example of
someone embracing this a lot.

00:26:19.040 --> 00:26:21.140
He started in
folding toy design,

00:26:21.140 --> 00:26:23.700
but now he does mostly
folding architecture.

00:26:23.700 --> 00:26:27.490
This is one example, from his
company Hoberman Associates,

00:26:27.490 --> 00:26:31.870
from the winter Olympics
in Salt Lake City 2002.

00:26:31.870 --> 00:26:32.860
It's very dramatic.

00:26:32.860 --> 00:26:37.070
You have this folding structure
they can almost completely

00:26:37.070 --> 00:26:39.810
close up, except for
a little circle here,

00:26:39.810 --> 00:26:42.630
and when it opens up,
you've got this huge stage.

00:26:42.630 --> 00:26:45.280
You can see the
scale, of people.

00:26:45.280 --> 00:26:49.290
He co-designed this
giant U2 stage.

00:26:49.290 --> 00:26:52.760
If you've seen U2 any time in
the last few years, like I did.

00:26:52.760 --> 00:26:54.790
This incredible
folding structure

00:26:54.790 --> 00:26:57.730
is based on similar principles.

00:26:57.730 --> 00:27:00.240
And Chuck Hoberman is
actually teaching a class

00:27:00.240 --> 00:27:04.830
at the Graduate School of Design
at Harvard on Monday afternoon,

00:27:04.830 --> 00:27:07.560
and I think anyone's welcome
if you want to check it out.

00:27:07.560 --> 00:27:09.990
You should go see it.

00:27:09.990 --> 00:27:11.650
Talk about his techniques.

00:27:11.650 --> 00:27:13.540
Maybe we'll get them
to do a guest lecture.

00:27:13.540 --> 00:27:14.750
We'll see.

00:27:14.750 --> 00:27:17.310
So that was a brief
overview of a bunch

00:27:17.310 --> 00:27:18.790
of different applications.

00:27:18.790 --> 00:27:19.810
There's tons more.

00:27:19.810 --> 00:27:22.530
In fact, if you have more,
please send them to me.

00:27:22.530 --> 00:27:26.060
I know a bunch more,
and we will get to them,

00:27:26.060 --> 00:27:28.460
but this is a little
survey of different fields

00:27:28.460 --> 00:27:30.050
that folding touches on.

00:27:30.050 --> 00:27:33.020
Now I'm gonna switch over to
more mathematical stuff, which

00:27:33.020 --> 00:27:34.500
is the bulk of the class.

00:27:34.500 --> 00:27:37.380
Unless there are questions?

00:27:37.380 --> 00:27:38.980
Cool.

00:27:38.980 --> 00:27:44.660
So we move to what
kind of things

00:27:44.660 --> 00:27:46.470
we're interested in, in folding.

00:27:46.470 --> 00:27:51.500
There are essentially
three types.

00:27:51.500 --> 00:27:58.980
Linkages, which we
usually think of as one

00:27:58.980 --> 00:27:59.960
dimensional structures.

00:27:59.960 --> 00:28:02.850
So we have one dimensional,
usually straight segments,

00:28:02.850 --> 00:28:05.950
connected together at
hinges, and here I've

00:28:05.950 --> 00:28:07.130
drawn it in two dimensions.

00:28:07.130 --> 00:28:09.070
It could also live
in three dimensions.

00:28:09.070 --> 00:28:12.450
Like-- my arm is made up
of one dimensional bones,

00:28:12.450 --> 00:28:14.750
and then there's
sockets for them

00:28:14.750 --> 00:28:18.750
to join, essentially
universal joints.

00:28:18.750 --> 00:28:20.140
How can those things fold?

00:28:20.140 --> 00:28:21.630
What shapes can they fold into?

00:28:21.630 --> 00:28:23.770
General constraints
here are that the edges

00:28:23.770 --> 00:28:27.950
should stay the same length--
I can't stretch my arm longer--

00:28:27.950 --> 00:28:30.260
and they have to stay
connected at the joints.

00:28:30.260 --> 00:28:33.050
I can't detach my elbow
and later reattach it,

00:28:33.050 --> 00:28:35.340
at least not ideally.

00:28:35.340 --> 00:28:39.760
The mathematical version
is you're not allowed to.

00:28:39.760 --> 00:28:43.110
One dimension up, we have
sheet folding, which we usually

00:28:43.110 --> 00:28:46.660
refer to as paper
folding, but it

00:28:46.660 --> 00:28:50.270
could be sheet metal, anything.

00:28:50.270 --> 00:28:53.290
You have your sheet
of material, and you

00:28:53.290 --> 00:28:57.770
want to fold into things like
origami, like space stations,

00:28:57.770 --> 00:29:01.000
like telescope lenses, whatever.

00:29:01.000 --> 00:29:02.090
General rules here.

00:29:02.090 --> 00:29:05.140
Like this piece of paper,
you cannot stretch the paper.

00:29:05.140 --> 00:29:07.370
It can't get any longer.

00:29:07.370 --> 00:29:12.280
It can't collide with itself,
and you can't tear the paper.

00:29:12.280 --> 00:29:15.200
You're not allowed to
cut it, because that

00:29:15.200 --> 00:29:17.360
tends to make things too easy.

00:29:17.360 --> 00:29:19.740
So the sort of
mathematically pure version,

00:29:19.740 --> 00:29:22.591
and also the modern
origami pure version,

00:29:22.591 --> 00:29:24.840
is that you're not allowed
to cut your piece of paper.

00:29:24.840 --> 00:29:30.930
So just folding, no
stretching no crossing.

00:29:30.930 --> 00:29:33.640
If you want to go
another dimension up,

00:29:33.640 --> 00:29:36.716
we typically call this
polyhedron folding.

00:29:40.890 --> 00:29:46.190
So a polyhedron is made up of a
bunch of polygons, like a cube.

00:29:46.190 --> 00:29:51.760
And typically we're interested
in unfolding a polyhedron.

00:29:51.760 --> 00:29:55.410
So think of this as just a
surface that's hollow inside.

00:29:55.410 --> 00:29:57.470
If you wanted to
build that surface,

00:29:57.470 --> 00:30:03.120
you'd like to find a shape,
like this cross, that

00:30:03.120 --> 00:30:06.170
folds into that cube.

00:30:06.170 --> 00:30:07.830
Because if you have
sheet material,

00:30:07.830 --> 00:30:10.640
you want to start from
some original shape that's

00:30:10.640 --> 00:30:13.961
flat that can fold
into your shape.

00:30:13.961 --> 00:30:15.710
You can also consider
the reverse problem,

00:30:15.710 --> 00:30:16.730
which is folding.

00:30:16.730 --> 00:30:19.510
Suppose I give you this cross,
what shapes can it fold into?

00:30:19.510 --> 00:30:21.924
And we've looked
at both, and I'll

00:30:21.924 --> 00:30:23.090
talk about them in a second.

00:30:25.710 --> 00:30:28.125
So in general, for each
of these categories,

00:30:28.125 --> 00:30:30.000
and you'll see these
categories over and over

00:30:30.000 --> 00:30:31.540
because they're on the book.

00:30:31.540 --> 00:30:35.040
Here it says linkages,
origami, and polyhedra.

00:30:35.040 --> 00:30:36.660
And there's three
parts to the book.

00:30:36.660 --> 00:30:39.099
There's linkages,
origami, and polyhedra.

00:30:39.099 --> 00:30:40.390
Part one, part two, part three.

00:30:40.390 --> 00:30:41.750
It's just like this.

00:30:41.750 --> 00:30:44.280
Our class will not follow
this order, though.

00:30:44.280 --> 00:30:48.332
After today, I think we'll
talk about paper for a while,

00:30:48.332 --> 00:30:49.873
then go to linkages
for a while, then

00:30:49.873 --> 00:30:52.420
go to polyhedra for a while,
and then we'll repeat,

00:30:52.420 --> 00:30:55.177
go to paper for a
while, and so on.

00:30:55.177 --> 00:30:57.510
Different parts will be of
interest to different people,

00:30:57.510 --> 00:30:59.310
so we'll do lots of
different coverage.

00:30:59.310 --> 00:31:03.430
But I think paper's the most
exciting, so we'll start there.

00:31:03.430 --> 00:31:06.080
In general, for
each of these types

00:31:06.080 --> 00:31:07.870
of things you want
to fold, there

00:31:07.870 --> 00:31:12.990
are two kinds of problems
we're generally interested in.

00:31:12.990 --> 00:31:15.310
And based around the
idea that, well, there's

00:31:15.310 --> 00:31:18.040
some folding structure
that you're interested in,

00:31:18.040 --> 00:31:19.770
and then there's
the way it can fold.

00:31:23.480 --> 00:31:27.030
And you can start
from either one.

00:31:27.030 --> 00:31:28.940
If you start from a
folding structure,

00:31:28.940 --> 00:31:31.300
and you want to know
what it can fold into,

00:31:31.300 --> 00:31:34.490
this we typically call
a foldability problem,

00:31:34.490 --> 00:31:37.240
or you could call it
an analysis problem.

00:31:37.240 --> 00:31:46.290
I have something
like this, and I

00:31:46.290 --> 00:31:47.800
want to know what
it can fold into.

00:31:47.800 --> 00:31:48.990
That's an example.

00:31:48.990 --> 00:31:52.420
What can the cross fold into?

00:31:52.420 --> 00:31:55.179
Or I have some linkage,
and I have a robotic arm.

00:31:55.179 --> 00:31:55.970
It's already fixed.

00:31:55.970 --> 00:31:57.428
I've already designed
it, built it.

00:31:57.428 --> 00:31:59.490
What shapes can it fold into?

00:31:59.490 --> 00:32:03.820
The reverse problem is a design
problem or synthesis problem.

00:32:03.820 --> 00:32:07.840
So there I start with what
foldings I would like to have.

00:32:07.840 --> 00:32:10.340
So for example, I want
to fold the butterfly.

00:32:10.340 --> 00:32:13.420
So I design a butterfly,
and then I'd say,

00:32:13.420 --> 00:32:16.815
well, I have a rectangle paper,
can I fold it into a butterfly?

00:32:16.815 --> 00:32:17.940
So that's a design problem.

00:32:17.940 --> 00:32:20.150
Here you want to design
a folding structure that

00:32:20.150 --> 00:32:22.960
achieves your goals, like shape.

00:32:22.960 --> 00:32:26.250
So that's generically
what we like to do.

00:32:26.250 --> 00:32:30.920
And then there's three types
of results we typically get.

00:32:30.920 --> 00:32:34.110
I'm giving a super
high level first,

00:32:34.110 --> 00:32:36.305
and then we'll get to
some actual examples.

00:32:39.870 --> 00:32:42.710
So these are typical results.

00:32:45.360 --> 00:32:52.320
So three types are universality,
decision, and hardness,

00:32:52.320 --> 00:32:57.260
and these relate to
what is possible.

00:32:57.260 --> 00:32:59.754
In particular, is
everything possible?

00:32:59.754 --> 00:33:02.045
And this makes sense both
from a foldability standpoint

00:33:02.045 --> 00:33:03.660
and from a design standpoint.

00:33:03.660 --> 00:33:05.820
If I give you a robotic
arm, I'd like to know,

00:33:05.820 --> 00:33:08.790
can it folding to all the
possible configurations,

00:33:08.790 --> 00:33:10.470
or are there some
that it can't reach?

00:33:10.470 --> 00:33:12.610
That, if they can
reach all of them,

00:33:12.610 --> 00:33:14.430
we have a universality result.

00:33:14.430 --> 00:33:18.410
Typically when you can prove
that you can make anything,

00:33:18.410 --> 00:33:20.250
you actually get an
algorithm to do it.

00:33:20.250 --> 00:33:22.470
So you could say, oh,
well, how do I fold into x?

00:33:22.470 --> 00:33:23.640
Well, here's how you do it.

00:33:23.640 --> 00:33:25.515
There's an algorithm to
compute that for you.

00:33:25.515 --> 00:33:27.550
Also, in design,
I'd like to know,

00:33:27.550 --> 00:33:31.330
OK, I can make a butterfly,
and I can make a Nazgul.

00:33:31.330 --> 00:33:32.640
Can I make everything?

00:33:32.640 --> 00:33:35.240
If yes, you get a
universality result.

00:33:35.240 --> 00:33:37.810
That's a design universality.

00:33:37.810 --> 00:33:41.164
If universality is not true,
if you can't make everything,

00:33:41.164 --> 00:33:42.580
the next best thing
you could hope

00:33:42.580 --> 00:33:45.660
for is a decision
algorithm, an algorithm

00:33:45.660 --> 00:33:50.680
that tells you quickly, is this
possible, is this impossible.

00:33:50.680 --> 00:33:52.150
So this is like a
characterization

00:33:52.150 --> 00:33:55.510
of what's possible, and what's
impossible using algorithms.

00:33:55.510 --> 00:33:57.140
Sometimes, though,
that's not possible.

00:33:57.140 --> 00:33:59.390
There is no good algorithm
to tell whether something's

00:33:59.390 --> 00:34:01.490
foldable, and then
we aim for hardness

00:34:01.490 --> 00:34:04.240
result to prove that
there is no good algorithm

00:34:04.240 --> 00:34:07.710
to solve your problem.

00:34:07.710 --> 00:34:10.564
So that gets in
complexity theory.

00:34:10.564 --> 00:34:11.980
Not everyone's
going to know that.

00:34:11.980 --> 00:34:14.440
We will be reviewing it
in the video lectures,

00:34:14.440 --> 00:34:16.920
and in here as needed.

00:34:16.920 --> 00:34:19.260
So those are the sort
of typical outcomes

00:34:19.260 --> 00:34:22.403
for any of these
kinds of problems.

00:34:22.403 --> 00:34:23.944
Let's see some
examples, unless there

00:34:23.944 --> 00:34:25.980
are generic questions
at this point,

00:34:25.980 --> 00:34:29.001
only generic questions
about generic material.

00:34:29.001 --> 00:34:30.500
Next we'll get to
specific material,

00:34:30.500 --> 00:34:31.958
and you can ask
specific questions.

00:34:47.820 --> 00:34:49.210
So first up is linkages.

00:34:52.889 --> 00:34:55.679
And, of course,
there's lots of results

00:34:55.679 --> 00:34:56.679
in each of these fields.

00:34:56.679 --> 00:34:59.340
I'm just going to show
you a couple in each.

00:34:59.340 --> 00:35:01.840
And the first question
you are typically

00:35:01.840 --> 00:35:05.260
interested in about a
linkage is, is it rigid?

00:35:05.260 --> 00:35:06.890
Does it move it all?

00:35:06.890 --> 00:35:08.740
Let me give you some
examples of this.

00:35:15.600 --> 00:35:18.290
Do a little pop quiz.

00:35:18.290 --> 00:35:19.750
It's OK to get it wrong.

00:35:19.750 --> 00:35:23.545
Just makes for some
fun interaction.

00:35:28.750 --> 00:35:32.080
So, yes or no, is this rigid?

00:35:32.080 --> 00:35:34.729
Or, rigid or flexible,
I should say.

00:35:34.729 --> 00:35:35.395
AUDIENCE: Rigid.

00:35:35.395 --> 00:35:36.103
PROFESSOR: Rigid.

00:35:36.103 --> 00:35:37.140
Everyone agrees.

00:35:37.140 --> 00:35:39.000
Good.

00:35:39.000 --> 00:35:40.110
Correct.

00:35:40.110 --> 00:35:41.326
Rigid or flexible?

00:35:41.326 --> 00:35:42.247
AUDIENCE: [INAUDIBLE]

00:35:42.247 --> 00:35:43.080
PROFESSOR: Flexible?

00:35:43.080 --> 00:35:43.990
AUDIENCE: [INAUDIBLE]

00:35:43.990 --> 00:35:45.489
PROFESSOR: Depends
on the dimension.

00:35:45.489 --> 00:35:45.990
Very good.

00:35:45.990 --> 00:35:48.000
It's rigid or flexible.

00:35:48.000 --> 00:35:48.600
It depends.

00:35:48.600 --> 00:35:53.430
It's rigid in 2D, because
these are triangles.

00:35:53.430 --> 00:35:56.900
But it's flexible
in 3D, because you

00:35:56.900 --> 00:36:00.465
can rotate one triangle
around this hinge.

00:36:03.070 --> 00:36:04.580
And this is rigid or flexible?

00:36:04.580 --> 00:36:05.717
AUDIENCE: [INAUDIBLE]

00:36:05.717 --> 00:36:06.550
PROFESSOR: Flexible.

00:36:06.550 --> 00:36:07.910
Everyone agrees and is correct.

00:36:12.390 --> 00:36:15.300
In general, given a
structure like this linkage,

00:36:15.300 --> 00:36:17.330
you want to know, is it
rigid or is it flexible?

00:36:17.330 --> 00:36:18.480
This has lots of applications.

00:36:18.480 --> 00:36:19.460
Like, you want to
build a bridge,

00:36:19.460 --> 00:36:20.543
you don't want it to move.

00:36:20.543 --> 00:36:24.110
You're building a building,
you don't want it to move.

00:36:24.110 --> 00:36:26.720
So here's the mathematical
state of affairs.

00:36:26.720 --> 00:36:30.240
Distinguishing this boundary,
which is a rigid in 2D

00:36:30.240 --> 00:36:33.017
versus flexible in 2D, we
understand super well as

00:36:33.017 --> 00:36:34.100
great algorithms to do it.

00:36:34.100 --> 00:36:35.420
We will cover them.

00:36:35.420 --> 00:36:39.140
This boundary between rigid
in 3D and flexible in 3D,

00:36:39.140 --> 00:36:40.674
we don't really understand.

00:36:40.674 --> 00:36:42.590
And there aren't great
algorithms to solve it.

00:36:42.590 --> 00:36:44.423
It's a little disconcerting
given the number

00:36:44.423 --> 00:36:45.800
buildings and
bridges we live in,

00:36:45.800 --> 00:36:49.140
but that's the
state of the world.

00:36:49.140 --> 00:36:53.570
And we will talk about all that.

00:36:53.570 --> 00:36:55.670
So that is rigidity.

00:36:55.670 --> 00:36:59.560
Next up we have universality.

00:36:59.560 --> 00:37:01.720
So this is the robotic
arm question I mentioned.

00:37:01.720 --> 00:37:02.720
I have a robotic arm.

00:37:02.720 --> 00:37:09.560
Does it fold into
everything, into

00:37:09.560 --> 00:37:13.110
every possible configuration?

00:37:13.110 --> 00:37:16.960
And the answer, again, depends
what dimension you live in.

00:37:16.960 --> 00:37:20.380
In two dimensions,
there are cool ways

00:37:20.380 --> 00:37:22.030
to reconfigure your robotic arm.

00:37:22.030 --> 00:37:24.715
So this is actually a polygon,
a closed arm, if you will,

00:37:24.715 --> 00:37:28.085
a closed chain, and this
is one way to unfold it.

00:37:28.085 --> 00:37:29.460
And then, in
principle, you could

00:37:29.460 --> 00:37:32.510
refold that into any
other shape you want.

00:37:32.510 --> 00:37:34.750
And we will cover-- this
is one algorithm to do it.

00:37:34.750 --> 00:37:36.850
There's actually three
algorithms to do this.

00:37:36.850 --> 00:37:38.870
This is the most recent one.

00:37:38.870 --> 00:37:41.570
This was originally
my Ph.D. thesis,

00:37:41.570 --> 00:37:43.880
to figure out whether
this was possible.

00:37:43.880 --> 00:37:45.820
It's called the
carpenter's rule problem.

00:37:45.820 --> 00:37:49.060
This algorithm preserves the
fivefold rotational symmetry

00:37:49.060 --> 00:37:51.640
of the polygon,
which is pretty cool.

00:37:51.640 --> 00:37:54.130
And in general, you
take any 2D polygon,

00:37:54.130 --> 00:37:56.100
you can unfold it while
preserving all the edge

00:37:56.100 --> 00:37:57.641
lengths, keeping
all the connections,

00:37:57.641 --> 00:38:00.290
and avoiding collision.

00:38:00.290 --> 00:38:04.020
I'll show you some
other fun examples.

00:38:04.020 --> 00:38:08.420
This is a kind of
spider, 500 vertices.

00:38:08.420 --> 00:38:09.680
We're kind of zooming out.

00:38:09.680 --> 00:38:12.190
As we expand here, you can see
the lengths get really tiny,

00:38:12.190 --> 00:38:15.790
but, in reality, all the
lengths are staying the same

00:38:15.790 --> 00:38:18.730
throughout time.

00:38:18.730 --> 00:38:21.420
And we fold.

00:38:21.420 --> 00:38:23.040
So this is the state
of affairs in 2D.

00:38:23.040 --> 00:38:24.630
We have good algorithms.

00:38:24.630 --> 00:38:25.869
It's always possible.

00:38:25.869 --> 00:38:26.410
Universality.

00:38:30.910 --> 00:38:33.710
So what about 3D?

00:38:33.710 --> 00:38:38.430
3D is harder, in particular
because of examples like this.

00:38:38.430 --> 00:38:39.810
We call this knitting needles.

00:38:39.810 --> 00:38:41.490
You've got two blue
segments, which

00:38:41.490 --> 00:38:43.250
you can think of
as long needles,

00:38:43.250 --> 00:38:46.920
and then a short, purple
thread connecting them.

00:38:46.920 --> 00:38:49.570
And there's no way to undo this.

00:38:49.570 --> 00:38:52.300
In particular, if you started
with a straight, robotic arm,

00:38:52.300 --> 00:38:55.130
you could not hold it in
the shape, or vice versa.

00:38:55.130 --> 00:38:57.360
We call this a
locked configuration,

00:38:57.360 --> 00:38:59.360
and in general lock
configurations exist,

00:38:59.360 --> 00:39:00.750
obviously.

00:39:00.750 --> 00:39:03.626
And we don't know how to
distinguish good or bad.

00:39:03.626 --> 00:39:06.250
So here, we actually don't know
whether there's a good decision

00:39:06.250 --> 00:39:10.369
algorithm or hardness, but
it's definitely not universal.

00:39:10.369 --> 00:39:11.910
And 3D's very
interesting, because it

00:39:11.910 --> 00:39:14.450
relates to robotic arms
in real life and protein

00:39:14.450 --> 00:39:16.055
folding and all these things.

00:39:16.055 --> 00:39:17.180
I'll be talking about that.

00:39:17.180 --> 00:39:17.917
In 4D.

00:39:17.917 --> 00:39:20.000
If you're lucky enough to
live in four dimensions,

00:39:20.000 --> 00:39:22.000
you get universality,
everything's great.

00:39:22.000 --> 00:39:25.510
And we'll talk about that too.

00:39:25.510 --> 00:39:29.920
So next up, we
have paper folding.

00:39:29.920 --> 00:39:31.725
That was our brief
overview of linkages.

00:39:36.330 --> 00:39:38.560
So paper folding.

00:39:38.560 --> 00:39:43.920
I'm gonna mention one problem
in the foldability world

00:39:43.920 --> 00:39:46.790
and some problems
in the design world.

00:39:46.790 --> 00:39:50.572
This is probably my favorite
are of paper, origami design.

00:39:50.572 --> 00:39:52.030
But foldability's
interesting, too.

00:39:52.030 --> 00:39:55.840
The obvious and
the first question

00:39:55.840 --> 00:39:58.870
you might wonder about
in origami foldability

00:39:58.870 --> 00:40:02.780
is, if what crease
patterns fold flat?

00:40:02.780 --> 00:40:06.270
So if you take a classic
flapping bird, you unfold it,

00:40:06.270 --> 00:40:07.570
these are the creases you get.

00:40:07.570 --> 00:40:10.028
But in general, if I gave you
some pattern of creases drawn

00:40:10.028 --> 00:40:12.240
on your piece of paper,
does it fold into anything?

00:40:12.240 --> 00:40:13.948
And here, to make it
interesting, we say,

00:40:13.948 --> 00:40:15.340
does it fold into anything flat?

00:40:15.340 --> 00:40:16.840
Flat origami.

00:40:16.840 --> 00:40:18.600
You have to fold
along all the creases.

00:40:18.600 --> 00:40:23.650
Sadly, deciding this is a
problem that we call NP-hard.

00:40:23.650 --> 00:40:25.960
So there's basically no good
algorithm to solve this,

00:40:25.960 --> 00:40:33.050
and we will prove that in a
few classes, a few lectures.

00:40:33.050 --> 00:40:35.960
So that was the
foldability problem.

00:40:35.960 --> 00:40:37.470
Now onto design.

00:40:37.470 --> 00:40:40.390
If I give you a square paper,
what shapes can I make?

00:40:40.390 --> 00:40:42.520
That's the obvious
origami design problem.

00:40:42.520 --> 00:40:45.040
And it turns out you
can make any polygon,

00:40:45.040 --> 00:40:46.951
so you can make any
flat shape you want.

00:40:46.951 --> 00:40:49.200
If you have a piece of paper
that's white on one side,

00:40:49.200 --> 00:40:51.780
and patterned or colored
black on the other,

00:40:51.780 --> 00:40:53.740
you can make any two-color
pattern you want.

00:40:53.740 --> 00:40:56.920
If it's polygonal, it's
made of straight sides.

00:40:56.920 --> 00:40:58.870
If you want to make
a 3D thing, you

00:40:58.870 --> 00:41:00.630
could make any 3D
polyhedron, also

00:41:00.630 --> 00:41:02.480
with two color patterns,
whatever you want.

00:41:02.480 --> 00:41:04.135
We proved this way back in 1999.

00:41:04.135 --> 00:41:05.760
I think it was actually
the first paper

00:41:05.760 --> 00:41:08.300
to use the term
"computational origami."

00:41:08.300 --> 00:41:10.220
And it's not hard to prove.

00:41:10.220 --> 00:41:12.470
We'll prove it in a couple
of lectures, I think.

00:41:15.420 --> 00:41:17.647
We don't have a
practical way to do this.

00:41:17.647 --> 00:41:20.230
There is an algorithm here, but
it doesn't give you a good way

00:41:20.230 --> 00:41:21.940
to fold anything.

00:41:21.940 --> 00:41:25.290
And so the quest continues for
a good way to fold everything.

00:41:25.290 --> 00:41:27.775
And one such approach
is called Origamizer.

00:41:30.870 --> 00:41:33.170
You give it an
arbitrary 3D surface,

00:41:33.170 --> 00:41:34.710
it designs a crease pattern.

00:41:34.710 --> 00:41:37.980
This, you fold from a square
piece of paper-- solids are

00:41:37.980 --> 00:41:41.495
mountains, dashed are valleys--
and you get this bunny.

00:41:41.495 --> 00:41:43.620
This is a classic model in
computer graphics called

00:41:43.620 --> 00:41:47.350
the Stanford bunny, and this
takes about 10 hours to fold.

00:41:47.350 --> 00:41:49.472
If you're Tomohiro
Tachi, who designed it.

00:41:49.472 --> 00:41:50.930
And there's free
software available

00:41:50.930 --> 00:41:52.660
called Origamizer by Tomohiro.

00:41:52.660 --> 00:41:54.920
And he was just here
a couple weeks ago,

00:41:54.920 --> 00:41:57.980
and we've been proving that
this algorithm always works.

00:41:57.980 --> 00:42:00.450
And it also seems very
practical, most of the material

00:42:00.450 --> 00:42:02.930
here gets used in the surface.

00:42:02.930 --> 00:42:05.030
You don't need a very
large square of paper

00:42:05.030 --> 00:42:07.960
to make your bunny.

00:42:07.960 --> 00:42:11.017
I have one little
example here, sort

00:42:11.017 --> 00:42:12.600
of classic in the
origami world, which

00:42:12.600 --> 00:42:14.340
is to make a checkerboard.

00:42:14.340 --> 00:42:16.710
And this is a four-by-four
checkerboard, obviously not

00:42:16.710 --> 00:42:17.860
the full eight-by-eight.

00:42:17.860 --> 00:42:19.440
But you can fold
an eight-by-eight.

00:42:19.440 --> 00:42:21.760
We'll talk about
different ways to do it.

00:42:21.760 --> 00:42:23.810
This one is folded
from one square paper,

00:42:23.810 --> 00:42:25.750
white on one side,
green on the other.

00:42:25.750 --> 00:42:27.791
And, actually, it has a
pretty good scale factor,

00:42:27.791 --> 00:42:30.556
just collapses by
factor of two here.

00:42:30.556 --> 00:42:34.360
See if I can get it
back into correct state.

00:42:34.360 --> 00:42:35.310
So there you go.

00:42:35.310 --> 00:42:37.870
You can make your own
origami checkerboards

00:42:37.870 --> 00:42:40.360
if you ran out of your
regular wooden ones.

00:42:43.580 --> 00:42:46.370
Next example is what
we call maze folding.

00:42:46.370 --> 00:42:49.030
This is the poster.

00:42:49.030 --> 00:42:52.860
If you saw it, this is a
folding of this crease pattern,

00:42:52.860 --> 00:42:57.060
and the design was-- In general,
you take any orthogonal graph,

00:42:57.060 --> 00:43:00.220
meaning horizontal and
vertical lines on a grid,

00:43:00.220 --> 00:43:04.490
and you want to extrude
that graph out of the plane,

00:43:04.490 --> 00:43:05.930
then there's an algorithm.

00:43:05.930 --> 00:43:06.630
It's online.

00:43:06.630 --> 00:43:07.560
You can play with it.

00:43:07.560 --> 00:43:10.480
I think erikdemaine.org/maze
will get you there.

00:43:10.480 --> 00:43:11.629
You just draw that pattern.

00:43:11.629 --> 00:43:13.170
It will give you
this crease pattern.

00:43:13.170 --> 00:43:17.720
You print it out, and--
eight hours, maybe-- you

00:43:17.720 --> 00:43:20.070
can fold it into realities.

00:43:20.070 --> 00:43:23.160
So this is by [? Jenny ?] and
[? Eli, ?] who I think are

00:43:23.160 --> 00:43:24.807
students in this class.

00:43:24.807 --> 00:43:26.140
They got started a little early.

00:43:26.140 --> 00:43:30.690
And I didn't bring it
here, but at some point

00:43:30.690 --> 00:43:34.310
I will bring to the real 3D one.

00:43:34.310 --> 00:43:36.620
So that's maze folding.

00:43:36.620 --> 00:43:40.180
And the next one I have
is called folding cut.

00:43:40.180 --> 00:43:42.720
This is actually the first
problem we worked on, so kind

00:43:42.720 --> 00:43:44.830
of a personal favorite.

00:43:44.830 --> 00:43:51.400
You take a rectangle of paper,
and then you fold it flat,

00:43:51.400 --> 00:43:54.600
and you take your scissors and
make one complete straight cut.

00:43:54.600 --> 00:43:57.910
This is a magic trick
performed by Harry Houdini

00:43:57.910 --> 00:44:01.984
and other magicians, and you
get, in this case, two pieces.

00:44:01.984 --> 00:44:03.650
And the question is,
what shapes can you

00:44:03.650 --> 00:44:05.980
make by folding and
one straight cut?

00:44:05.980 --> 00:44:09.890
Here I made a little one.

00:44:09.890 --> 00:44:14.540
OK, you're not impressed,
so I'll do a harder one.

00:44:14.540 --> 00:44:17.310
This one is actually
quite challenging to cut.

00:44:17.310 --> 00:44:22.408
I was folding it as you were
arriving, as you probably saw.

00:44:22.408 --> 00:44:24.110
That's about right.

00:44:27.530 --> 00:44:30.680
It's a little hard
to open up, but this

00:44:30.680 --> 00:44:33.410
should be the MIT logo.

00:44:33.410 --> 00:44:34.575
AUDIENCE: [INAUDIBLE]

00:44:34.575 --> 00:44:35.450
PROFESSOR: All right.

00:44:35.450 --> 00:44:35.949
Good.

00:44:35.949 --> 00:44:38.550
AUDIENCE: [APPLAUSE]

00:44:38.550 --> 00:44:39.805
PROFESSOR: So that's the idea.

00:44:39.805 --> 00:44:41.180
You can impress
all your friends.

00:44:41.180 --> 00:44:43.439
Print these out, and fold them.

00:44:43.439 --> 00:44:45.730
It's a good challenge to fold
along the crease pattern,

00:44:45.730 --> 00:44:47.771
and as you might guess
there's an algorithm here.

00:44:47.771 --> 00:44:50.300
Given any polygon or
collection of polygons,

00:44:50.300 --> 00:44:52.700
you can fold a piece
of paper to line up

00:44:52.700 --> 00:44:56.990
all the edges in that polygon,
cut along it, you're done.

00:44:56.990 --> 00:44:59.650
OK, that is paper

00:44:59.650 --> 00:45:03.355
Next I want to briefly
mention polyhedra.

00:45:13.690 --> 00:45:15.600
Actually, I have a
polyhedra right over here.

00:45:15.600 --> 00:45:18.320
Let's just go there.

00:45:18.320 --> 00:45:21.350
So, again, there's an unfolding
problem, and a folding problem.

00:45:21.350 --> 00:45:23.960
And I'll start by
showing you a little bit

00:45:23.960 --> 00:45:27.180
about the folding problem.

00:45:27.180 --> 00:45:28.680
Oh, this shows a
little bit of both.

00:45:28.680 --> 00:45:31.066
This a video we
made back in '99.

00:45:31.066 --> 00:45:31.940
I was a grad student.

00:45:31.940 --> 00:45:34.760
I had lots of hours to
make videos, animations.

00:45:34.760 --> 00:45:40.010
So this is one example of
an unfolding of a cube.

00:45:40.010 --> 00:45:42.080
But the unfolding we
want to consider here

00:45:42.080 --> 00:45:45.360
is this cross unfolding
that I keep talking about.

00:45:45.360 --> 00:45:47.720
It's kind of a classic
so fun to analyze.

00:45:47.720 --> 00:45:49.220
So if you take that
cross shape, you

00:45:49.220 --> 00:45:52.120
want to know what other shapes,
what other convex polyhedra,

00:45:52.120 --> 00:45:53.452
can it fold into?

00:45:53.452 --> 00:45:55.660
And here the rules are little
different from origami.

00:45:55.660 --> 00:45:58.960
You have to get exactly the
surface you want no, overlap.

00:45:58.960 --> 00:46:02.650
Here we happen to get a doubly
covered quadrilateral, which

00:46:02.650 --> 00:46:05.830
is kind of a convex surface.

00:46:05.830 --> 00:46:07.512
A little bit cheating.

00:46:07.512 --> 00:46:09.220
But if we change the
creases in this way,

00:46:09.220 --> 00:46:13.580
we get a five-sided polyhedron
with a plane of symmetry

00:46:13.580 --> 00:46:14.455
down this axis.

00:46:17.350 --> 00:46:26.250
Or we can change the creases in
this way and get a tetrahedron.

00:46:26.250 --> 00:46:28.560
And it's exact coverage,
so this little tab

00:46:28.560 --> 00:46:31.224
fits into exactly that pocket.

00:46:31.224 --> 00:46:32.140
Exactly what you want.

00:46:32.140 --> 00:46:33.806
As you might guess,
there's an algorithm

00:46:33.806 --> 00:46:35.760
that will enumerate all
the different convex

00:46:35.760 --> 00:46:38.550
polyhedra you can make from
a given polygon of paper.

00:46:38.550 --> 00:46:41.610
And it's based on a
theorem in Russian

00:46:41.610 --> 00:46:43.680
by Alexandrov, which is
in the background here.

00:46:43.680 --> 00:46:46.050
If you're curious what the
Cyrillic background is,

00:46:46.050 --> 00:46:49.470
this theorem is the
key to the algorithm.

00:46:49.470 --> 00:46:56.659
So that's what's possible
by folding a given polygon,

00:46:56.659 --> 00:46:58.200
and then you can
ask about unfolding.

00:46:58.200 --> 00:47:00.111
Let me give you
a brief overview.

00:47:00.111 --> 00:47:00.610
Unfolding.

00:47:30.790 --> 00:47:33.210
So when you're
unfolding, you might

00:47:33.210 --> 00:47:35.020
be interested in
only cutting along

00:47:35.020 --> 00:47:36.950
the edges of the
surface, which is what

00:47:36.950 --> 00:47:40.240
happened in this
cross unfolding.

00:47:40.240 --> 00:47:43.160
Cut along these edges.

00:47:43.160 --> 00:47:46.110
Or you might allow cutting
anywhere on the surface.

00:47:46.110 --> 00:47:49.524
And the answers depend
on those two versions.

00:47:49.524 --> 00:47:50.940
You could try to
convex polyhedra,

00:47:50.940 --> 00:47:53.200
or you could try to do
arbitrary polyhedra.

00:47:53.200 --> 00:47:55.640
So here's the story.

00:47:55.640 --> 00:47:57.490
This one, we don't know.

00:47:57.490 --> 00:47:59.770
This one, we don't know.

00:47:59.770 --> 00:48:01.290
This one, the answer is yes.

00:48:01.290 --> 00:48:02.150
We'll prove it.

00:48:02.150 --> 00:48:03.670
This one, the answer is no.

00:48:03.670 --> 00:48:04.790
We'll prove it.

00:48:04.790 --> 00:48:08.100
In fact, I can show
you some examples.

00:48:08.100 --> 00:48:11.720
This is an edge unfolding
of a convex polyhedron.

00:48:11.720 --> 00:48:15.540
The oldest set that we know
this from this 1525 book

00:48:15.540 --> 00:48:17.120
by Albrecht Duerer.

00:48:17.120 --> 00:48:18.989
And this is a snub cube.

00:48:18.989 --> 00:48:20.530
He didn't have
Wikipedia at the time.

00:48:20.530 --> 00:48:23.510
You couldn't just look
at the image and draw it.

00:48:23.510 --> 00:48:25.040
He had to build
a physical model.

00:48:25.040 --> 00:48:27.670
And so he cut out pieces of
paper to build physical models,

00:48:27.670 --> 00:48:28.590
so he could paint it.

00:48:28.590 --> 00:48:32.810
And various of his prints
have convex polyhedra in them.

00:48:32.810 --> 00:48:35.240
And this is an example
of this open problem,

00:48:35.240 --> 00:48:37.870
which we don't
know the answer to.

00:48:37.870 --> 00:48:40.000
Can you edge unfold
convex polyhedra?

00:48:40.000 --> 00:48:44.220
If you want to take non-convex
polyhedra you cannot always do

00:48:44.220 --> 00:48:44.720
it.

00:48:44.720 --> 00:48:47.990
This is an example of a spiky
tetrahedron that cannot be edge

00:48:47.990 --> 00:48:48.500
unfolded.

00:48:48.500 --> 00:48:49.870
We'll prove that.

00:48:49.870 --> 00:48:51.460
But it can be
generally unfolded.

00:48:51.460 --> 00:48:55.460
If you can cut anywhere, you
can find a one-piece unfolding.

00:48:55.460 --> 00:48:57.690
And so big open
problem is, can you

00:48:57.690 --> 00:49:01.680
do any polyhedron
with general cuts?

00:49:01.680 --> 00:49:03.170
I think the answer is yes.

00:49:03.170 --> 00:49:06.380
Very cool problem.

00:49:06.380 --> 00:49:07.950
And that's polyhedra.

00:49:07.950 --> 00:49:10.590
And the last thing I wanted to
show you is hinged dissection.

00:49:10.590 --> 00:49:12.580
This is one more thing.

00:49:12.580 --> 00:49:16.650
After one, two, and three, we
have four, hinged dissection.

00:49:16.650 --> 00:49:21.280
This is a chain of blocks, which
are kind of two dimensional,

00:49:21.280 --> 00:49:22.770
but it's not really
paper folding.

00:49:22.770 --> 00:49:26.460
So it's like a thick
linkage between one and two,

00:49:26.460 --> 00:49:27.250
if you will.

00:49:27.250 --> 00:49:30.140
And this chain folds into
an equilateral triangle

00:49:30.140 --> 00:49:34.780
or a square, and it's
over 100 years old.

00:49:34.780 --> 00:49:36.060
Can you do anything?

00:49:36.060 --> 00:49:37.917
Turns out there's a
universality result.

00:49:37.917 --> 00:49:40.000
This is just a picture of
part of the proof, which

00:49:40.000 --> 00:49:42.570
we will cover in
a later lecture.

00:49:42.570 --> 00:49:46.860
But you can fold, you can
take any set of polygons

00:49:46.860 --> 00:49:50.410
of the same area, there's
one chain of blocks which

00:49:50.410 --> 00:49:53.150
will fold into each
of those polygons.

00:49:53.150 --> 00:49:55.370
So you can get a
universality result.

00:49:55.370 --> 00:49:58.640
You can do an equilateral
triangle to a regular hexagon

00:49:58.640 --> 00:50:00.710
to a swan to whatever.

00:50:00.710 --> 00:50:03.970
As long as they're all the
same area, you can do it.

00:50:03.970 --> 00:50:06.370
And this also generalizes to 3D.

00:50:06.370 --> 00:50:08.470
We use that to make a
little sculpture here,

00:50:08.470 --> 00:50:09.600
little sculpture.

00:50:09.600 --> 00:50:12.950
About 1,000 blocks, you pick up
with your gloves, these blocks,

00:50:12.950 --> 00:50:13.590
rearrange them.

00:50:13.590 --> 00:50:16.170
And the theorem is, you can
make any shape you want out

00:50:16.170 --> 00:50:21.190
of the blocks by this
kind of intersection.

00:50:21.190 --> 00:50:23.670
And that was a brief overview
of a few of the results

00:50:23.670 --> 00:50:25.420
that we'll be talking
about in this class.

00:50:25.420 --> 00:50:26.480
There's a lot more.

00:50:26.480 --> 00:50:28.880
And you can check
out the 2010 web page

00:50:28.880 --> 00:50:31.370
if you really want to know
everything that's covered,

00:50:31.370 --> 00:50:34.170
but we'll be posting
lectures up there.

00:50:34.170 --> 00:50:37.000
And let me know if you
have any questions.

