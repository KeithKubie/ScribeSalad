WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.000
However, here's something that bothers me.

00:00:02.000 --> 00:00:07.000
In the definition of row_plays, we're calling find_prefixes of hand inside this loop

00:00:07.000 --> 00:00:10.000
where we're enumerating over the row, so it's going to happen multiple times.

00:00:10.000 --> 00:00:13.000
It's going to happen one time for every anchor.

00:00:13.000 --> 00:00:16.000
Eventually when we have multiple rows

00:00:16.000 --> 00:00:19.000
it's going to happen for every anchor on every row,

00:00:19.000 --> 00:00:22.000
but notice that find_prefixes only depends on the hand.

00:00:22.000 --> 00:00:25.000
It's not dependent on the row at all,

00:00:25.000 --> 00:00:30.000
so it seems wasteful to be recomputing find_prefixes of hand multiple times.

00:00:30.000 --> 00:00:32.000
If we were just dealing with row_plays, that would be easy enough.

00:00:32.000 --> 00:00:38.000
Up here we could say found prefixes equals find_prefixes of hand, assign it to a variable,

00:00:38.000 --> 00:00:41.000
and then just reference the variable down here.

00:00:41.000 --> 00:00:46.000
We'd be computing it once outside of the loop rather than many times inside the loop.

00:00:46.000 --> 00:00:51.000
Eventually, we're going to have a bigger function that calls row_plays once for each row,

00:00:51.000 --> 00:00:54.000
and we wouldn't want to have to compute that each time within row_plays.

00:00:54.000 --> 00:00:56.000
We want to compute it just once.

00:00:56.000 --> 00:00:59.000
We could pass into row_plays the set of prefixes,

00:00:59.000 --> 00:01:01.000
but that's just complicating the interface.

00:01:01.000 --> 00:01:06.000
I'd like to cut down on the computation without complicating the interface.

00:01:06.000 --> 00:01:12.000
In other words, I want find_prefixes, when you pass it a hand, if it hasn't seen the hand before,

00:01:12.000 --> 00:01:14.000
go ahead and compute all the prefixes.

00:01:14.000 --> 00:01:18.000
If it has seen the hand before, then I don't have to re-compute it.

00:01:18.000 --> 00:01:21.000
I'll just look it up and return it immediately.

00:01:21.000 --> 00:01:24.000
What I want you to do is take find_prefixes and make it more efficient.

00:01:24.000 --> 00:01:28.000
We could just slap a memo decorator on the front of find_prefixes,

00:01:28.000 --> 00:01:32.000
but that's probably not exactly what we want, because note that find_prefixes is recursive,

00:01:32.000 --> 00:01:36.000
though it's going to call itself on each subcomponent of the hand.

00:01:36.000 --> 00:01:40.000
Really, we want to say I only want to remember the top level hand.

00:01:40.000 --> 00:01:43.000
If I've seen that exact hand before, then give me the answer.

00:01:43.000 --> 00:01:46.000
Don't give me the answer for all the sub-parts of the hand.

00:01:46.000 --> 00:01:49.000
You could write a different decorator that works just on those parts,

00:01:49.000 --> 00:01:52.000
although that might be hard given that it's recursive,

00:01:52.000 --> 00:01:57.000
or you could modify the function itself, or you could have two levels of functions.

00:01:57.000 --> 00:02:02.000
One top-level function--find_prefixes--that calls another function recursively.

00:02:02.000 --> 00:02:05.000
Your choice as to how you want to handle it.

00:02:05.000 --> 00:02:11.000
However you handle it, the idea is that if you call find_prefixes with a certain hand

00:02:11.000 --> 00:02:16.000
and you get back this result, then if you make the same top-level call again,

00:02:16.000 --> 00:02:22.000
it should immediately return the same result that it saved away rather than trying to recompute it.

