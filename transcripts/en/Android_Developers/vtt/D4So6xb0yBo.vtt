WEBVTT
Kind: captions
Language: en

00:00:00.290 --> 00:00:05.160
&gt;&gt;Joe: I'm Joe Fernandez and welcome to Android
Developer Office Hours.

00:00:05.160 --> 00:00:06.850
Joining me is Trevor Johns.

00:00:06.850 --> 00:00:07.970
&gt;&gt;Trevor: Howdy.

00:00:07.970 --> 00:00:13.429
&gt;&gt;Joe: And in a little while we'll have our
special guest James Dong from the Media Framework

00:00:13.429 --> 00:00:14.429
team.

00:00:14.429 --> 00:00:15.429
Um.

00:00:15.429 --> 00:00:20.480
As a reminder, folks who've got questions
please join us in the Hangout and we can take

00:00:20.480 --> 00:00:21.480
your questions live.

00:00:21.480 --> 00:00:26.580
We do like to talk to real heads every once
in a while.

00:00:26.580 --> 00:00:31.530
To get started though we'll look at the questions
in the Moderator queue.

00:00:31.530 --> 00:00:33.860
If you've got questions, please post them
there.

00:00:33.860 --> 00:00:39.060
And if you like the questions in there, plug
them up for the ones that you wanna hear the

00:00:39.060 --> 00:00:40.060
answer to.

00:00:40.060 --> 00:00:42.110
So first one we've got is from "Whiteout"
in Oklahoma.

00:00:42.110 --> 00:00:50.470
And he asks "As a follow on to the question
asked today on the EMEA show about the issue

00:00:50.470 --> 00:00:56.100
tracker, focusing on the most starred issues
may make sense for enhancements but for defects

00:00:56.100 --> 00:00:57.920
that doesn't seem effective.

00:00:57.920 --> 00:01:01.700
How about setting up a triage team from the
community?"

00:01:01.700 --> 00:01:02.870
&gt;&gt;Trevor: Alright.

00:01:02.870 --> 00:01:08.370
For those of you who were not watching the
EMEA Office Hours, the question was basically,

00:01:08.370 --> 00:01:11.060
how are bugs in the Android issue tracker?

00:01:11.060 --> 00:01:13.790
Which by the way is located at b.Android.com.

00:01:13.790 --> 00:01:15.650
So it's, like "bugs", b.Android.com.

00:01:15.650 --> 00:01:22.470
And the answer was that we look at them, there
are a lot of issues there.

00:01:22.470 --> 00:01:25.380
And we look at them primarily by number of
stars.

00:01:25.380 --> 00:01:26.920
Which is what we use as our voting mechanism.

00:01:26.920 --> 00:01:31.590
So if issues get a lot of stars they bubble
up to the top and they get the most attention.

00:01:31.590 --> 00:01:37.159
Of course, we do try and take a look at all
bugs, but some get, of course, some more attention

00:01:37.159 --> 00:01:38.159
than others.

00:01:38.159 --> 00:01:42.440
So, and the, yeah, so as far as does that
make sense for defects?

00:01:42.440 --> 00:01:44.250
I think sometimes it does.

00:01:44.250 --> 00:01:49.640
There certainly are some really annoying defects
that impact a lot of people.

00:01:49.640 --> 00:01:53.360
And it's good to go and make sure there's
a way to go and get, have a way to voice that

00:01:53.360 --> 00:01:54.800
you need those fixed.

00:01:54.800 --> 00:01:57.140
And so I think stars work really well for
that.

00:01:57.140 --> 00:02:02.640
That being said, you know, sometimes there
are some bugs that don't impact a lot of people.

00:02:02.640 --> 00:02:08.890
But the few people it impacts, there is, it's
still worth fixing.

00:02:08.890 --> 00:02:11.039
Because it's a annoyance to that small number
of people.

00:02:11.039 --> 00:02:12.039
Right?

00:02:12.039 --> 00:02:13.609
If it's a blocking bug.

00:02:13.609 --> 00:02:16.230
If it prevents you from building something.

00:02:16.230 --> 00:02:18.060
If you can't stream media.

00:02:18.060 --> 00:02:21.760
If you can't, just for an example, that should
be fixed.

00:02:21.760 --> 00:02:25.510
Probably, a little bit quicker than something
that's more of a cosmetic change.

00:02:25.510 --> 00:02:30.749
So in those cases, I mean we still do take
a look at pretty much every bug when it comes

00:02:30.749 --> 00:02:31.749
in.

00:02:31.749 --> 00:02:34.620
We need to go, we assign them, we do do initial
triage.

00:02:34.620 --> 00:02:39.769
So, yes, even though we do look at the starred
issues first, we do look at all the bugs.

00:02:39.769 --> 00:02:45.170
I'm not sure that we really need to add another
level of triage on there, since we're already

00:02:45.170 --> 00:02:46.980
doing another level internally.

00:02:46.980 --> 00:02:50.889
But that being said, I'll certainly go ahead
and pass this along to the rest of the team

00:02:50.889 --> 00:02:54.950
and see if management likes that idea.

00:02:54.950 --> 00:02:57.059
And you know, it's possible it could go somewhere.

00:02:57.059 --> 00:02:58.059
We'll see.

00:02:58.059 --> 00:02:59.059
&gt;&gt;Joe: Cool.

00:02:59.059 --> 00:03:00.620
&gt;&gt;Trevor: So, feature request noted.

00:03:00.620 --> 00:03:01.620
[chuckles]

00:03:01.620 --> 00:03:02.620
&gt;&gt;Joe: [chuckles] Great.

00:03:02.620 --> 00:03:03.620
Alright.

00:03:03.620 --> 00:03:04.989
Thanks for that question.

00:03:04.989 --> 00:03:11.739
And next up we've got "Bro Software Design"
in Lucca, Italy.

00:03:11.739 --> 00:03:12.739
Uh.

00:03:12.739 --> 00:03:20.680
Who asks, "AudioRecord and AudioTrack are
high, are critical cpu demanding classes.

00:03:20.680 --> 00:03:24.329
I experienced distorted and choppy audio in
my VOIP app.

00:03:24.329 --> 00:03:26.440
Voice over IP.

00:03:26.440 --> 00:03:31.799
Are there best practices or patterns of use
to help avoid these problems?

00:03:31.799 --> 00:03:33.989
Deep specs on the internal behavior would
help."

00:03:33.989 --> 00:03:35.919
Uh, that's a good question.

00:03:35.919 --> 00:03:36.919
&gt;&gt;Trevor: OK.

00:03:36.919 --> 00:03:38.609
&gt;&gt;Joe: A little bit out of my league.

00:03:38.609 --> 00:03:39.609
How about you?

00:03:39.609 --> 00:03:41.819
&gt;&gt;Trevor: Yeah, I can speak a little bit on
that one.

00:03:41.819 --> 00:03:46.980
So, we edited the low latency audio paths
in Jellybean.

00:03:46.980 --> 00:03:48.980
But this is primarily for playback.

00:03:48.980 --> 00:03:53.489
For recording there's not really a really
good low latency path yet.

00:03:53.489 --> 00:03:56.349
AudioRecord is the best one available.

00:03:56.349 --> 00:03:57.870
And it does work.

00:03:57.870 --> 00:03:59.549
But you just have to be super careful when
you use it.

00:03:59.549 --> 00:04:03.959
The most important thing is to make sure you
pick your buffer sizes carefully.

00:04:03.959 --> 00:04:08.260
And keep in mind that those buffer sizes will
change on a device by device basis.

00:04:08.260 --> 00:04:11.719
So there are some methods there, you can go
and use to try and figure out what size buffer

00:04:11.719 --> 00:04:13.889
is appropriate for the device you're on.

00:04:13.889 --> 00:04:18.380
And that will help go and avoid some of those
stuttering issues that you're running into.

00:04:18.380 --> 00:04:23.310
And hopefully at some point in the future
we'll go and add some more APIs or improve

00:04:23.310 --> 00:04:24.480
the existing APIs.

00:04:24.480 --> 00:04:27.380
It'll help improve latency there as well.

00:04:27.380 --> 00:04:30.850
But latency shouldn't cause distortion, right?

00:04:30.850 --> 00:04:34.420
Latency is more of, you'll have a little bit
of lag.

00:04:34.420 --> 00:04:35.420
Yeah.

00:04:35.420 --> 00:04:36.420
Choppy audio.

00:04:36.420 --> 00:04:38.110
Almost exclusively is a buffer problem.

00:04:38.110 --> 00:04:39.490
So check your buffer sizes.

00:04:39.490 --> 00:04:45.190
Now that said, since you are doing a voice
over IP app, I will also point out that Android

00:04:45.190 --> 00:04:46.980
has a built in SIP stack already.

00:04:46.980 --> 00:04:49.530
And you might wanna consider reusing that.

00:04:49.530 --> 00:04:51.860
Especially if you are talking to a SIP server.

00:04:51.860 --> 00:04:54.640
Which a lot of voice over IP apps are.

00:04:54.640 --> 00:04:59.060
And you can just go ahead and tie it to that
and then have the OS handle all over your

00:04:59.060 --> 00:05:01.320
audio decoding and encoding.

00:05:01.320 --> 00:05:03.480
Instead of just a server for you.

00:05:03.480 --> 00:05:06.140
And then all you have to do is write a UI
on top of that.

00:05:06.140 --> 00:05:11.450
So if that makes sense, definitely something
to look into as well.

00:05:11.450 --> 00:05:13.140
&gt;&gt;Joe: OK.

00:05:13.140 --> 00:05:14.140
Great.

00:05:14.140 --> 00:05:15.140
Thanks for that.

00:05:15.140 --> 00:05:18.470
Do we have anybody in the Hangout for questions?

00:05:18.470 --> 00:05:20.960
&gt;&gt;Male Engineer: Uh, not yet.

00:05:20.960 --> 00:05:21.960
&gt;&gt;Joe: OK.

00:05:21.960 --> 00:05:22.960
Alright.

00:05:22.960 --> 00:05:26.490
So, next up we've got uh, Marcus in Europe.

00:05:26.490 --> 00:05:35.760
Asks, "How do we, how to determine if a specific
audio recording, say, AMR-WV is supported

00:05:35.760 --> 00:05:37.450
for encoding?

00:05:37.450 --> 00:05:41.800
AudioCodec has no constant for AMR-WV and
others.

00:05:41.800 --> 00:05:49.980
Background, at least Experia X10 has no AMR,
doesn't have this format.

00:05:49.980 --> 00:05:55.960
And need to detect this as, or else the app
just crashes in native C."

00:05:55.960 --> 00:06:01.214
Alright, so detecting audio format supported
on a specific device which is, I guess it

00:06:01.214 --> 00:06:02.450
is a device specific.

00:06:02.450 --> 00:06:08.670
&gt;&gt;Trevor: Well, there is, I seem to recall
there is a "Get Codecs" method that will go

00:06:08.670 --> 00:06:11.650
and tell you what codecs are present.

00:06:11.650 --> 00:06:15.600
And I can't remember if there's a way to go
in, I think there's a way to distinguish between

00:06:15.600 --> 00:06:17.500
AMR wide band and narrow band.

00:06:17.500 --> 00:06:20.900
So I'm pretty sure that would work there as
well.

00:06:20.900 --> 00:06:21.900
So even if youâ€”

00:06:21.900 --> 00:06:23.110
&gt;&gt;Joe: So there's no constant for it there?

00:06:23.110 --> 00:06:24.110
Or?

00:06:24.110 --> 00:06:25.110
&gt;&gt;Trevor: Um.

00:06:25.110 --> 00:06:26.110
&gt;&gt;Joe: That's very interesting.

00:06:26.110 --> 00:06:29.730
&gt;&gt;Trevor: No, well there is, there's just
a generic constant for AMR if I remember correctly.

00:06:29.730 --> 00:06:32.150
&gt;&gt;Joe: Oh, that's the AMR, oh, OK.

00:06:32.150 --> 00:06:33.750
The specific brand of AMR.

00:06:33.750 --> 00:06:34.750
&gt;&gt;Trevor: Yeah.

00:06:34.750 --> 00:06:36.090
The, the flavor of AMR.

00:06:36.090 --> 00:06:37.090
Yes.

00:06:37.090 --> 00:06:38.090
&gt;&gt;Joe: Right.

00:06:38.090 --> 00:06:39.090
OK.

00:06:39.090 --> 00:06:40.090
&gt;&gt;Trevor: Yeah.

00:06:40.090 --> 00:06:42.280
I'm not sure how you're disassociating the
two different types of AMR.

00:06:42.280 --> 00:06:44.830
I'm sure there's a way to go and distinguish
between them.

00:06:44.830 --> 00:06:48.430
If you post a StackOverflow question we can
go ahead and look into that a little bit more.

00:06:48.430 --> 00:06:53.340
But in general the correct approach is to
go and call "Get Codecs" and check which codecs

00:06:53.340 --> 00:06:54.840
are present.

00:06:54.840 --> 00:06:57.570
And that'll at least get you as far as AMR.

00:06:57.570 --> 00:07:01.060
And, we'll try and find some information about
how to distinguish between the two different

00:07:01.060 --> 00:07:02.630
flavors of AMR for you.

00:07:02.630 --> 00:07:04.230
&gt;&gt;Joe: Right.

00:07:04.230 --> 00:07:05.710
Thanks for that question.

00:07:05.710 --> 00:07:09.210
Uh, let's see what else we've got here.

00:07:09.210 --> 00:07:15.840
Marcus also asks "Will there be support for
streaming, uh, capable container format?"

00:07:15.840 --> 00:07:17.300
capable container format.

00:07:17.300 --> 00:07:19.300
"In MediaRecorder.

00:07:19.300 --> 00:07:20.540
Like MPEG-TS."

00:07:20.540 --> 00:07:22.680
Let's see.

00:07:22.680 --> 00:07:24.950
"In the future."

00:07:24.950 --> 00:07:26.060
Let's see.

00:07:26.060 --> 00:07:27.720
Capable container format.

00:07:27.720 --> 00:07:29.540
I'm not sure what he's asking there.

00:07:29.540 --> 00:07:32.770
&gt;&gt;Trevor: Yeah, I'm not familiar with MPEG-TS
myself.

00:07:32.770 --> 00:07:36.480
This is probably a good question for our guest
when he finally arrives.

00:07:36.480 --> 00:07:37.480
[Joe laughs]

00:07:37.480 --> 00:07:39.440
So let's come back to this one in a bit.

00:07:39.440 --> 00:07:40.770
&gt;&gt;Joe: OK.

00:07:40.770 --> 00:07:43.420
Let's move up here.

00:07:43.420 --> 00:07:44.420
Alright.

00:07:44.420 --> 00:07:49.190
Alex asks, I would love to see more working
code samples in the documentation."

00:07:49.190 --> 00:07:50.340
Yes.

00:07:50.340 --> 00:07:52.290
You and many other people actually.

00:07:52.290 --> 00:07:58.150
Uh "More specifically, if we take a good look
at the code that was presented at Google IO

00:07:58.150 --> 00:07:59.150
2012.

00:07:59.150 --> 00:08:03.440
We can see that it had a lot of mistakes and
all of them were copy-pasted to the Developers

00:08:03.440 --> 00:08:04.440
documentation."

00:08:04.440 --> 00:08:05.440
[Trevor laughs]

00:08:05.440 --> 00:08:06.880
I'm not sure that that's actually true.

00:08:06.880 --> 00:08:07.880
Uh.

00:08:07.880 --> 00:08:14.050
It may seem like the stuff that you're working
on was copy-pasted from the Developers documentation.

00:08:14.050 --> 00:08:19.840
We do use our documentation extensively to
build our samples and code samples.

00:08:19.840 --> 00:08:22.950
And unfortunately when we write them sometimes
we make mistakes.

00:08:22.950 --> 00:08:28.360
So definitely appreciate the feedback on that.

00:08:28.360 --> 00:08:32.830
But more helpful would be putting out some
of those issues.

00:08:32.830 --> 00:08:37.829
Certainly you can go to b.Android.com and
file some bugs on that one.

00:08:37.829 --> 00:08:42.550
We definitely would look at that for documentation
errors.

00:08:42.550 --> 00:08:43.550
Coding errors.

00:08:43.550 --> 00:08:44.550
And all that stuff.

00:08:44.550 --> 00:08:45.550
So.

00:08:45.550 --> 00:08:46.550
Appreciate the feedback.

00:08:46.550 --> 00:08:47.550
Andâ€”

00:08:47.550 --> 00:08:49.270
&gt;&gt;Trevor: And if you're feeling a bit more
adventurous too, I'll point out you actually

00:08:49.270 --> 00:08:51.410
can go and modify all the docs yourself.

00:08:51.410 --> 00:08:54.699
We don't normally point it out too heavily.

00:08:54.699 --> 00:08:57.559
Because our documentation system could be
ea little nicer.

00:08:57.559 --> 00:09:03.240
But if you look in the source tree under "frameworks
base docs html", everything is in there with

00:09:03.240 --> 00:09:04.910
the DOC JD extension.

00:09:04.910 --> 00:09:09.149
And you can make a change, or also javadocs
as well for the API reference.

00:09:09.149 --> 00:09:11.110
And if you send us a patch in [inaudible].

00:09:11.110 --> 00:09:14.230
Especially for, you know, anything that's
an error.

00:09:14.230 --> 00:09:17.440
We definitely would love to have a patch to
go and fix that.

00:09:17.440 --> 00:09:20.540
But that said, that shouldn't stop you from
filing a bug.

00:09:20.540 --> 00:09:21.540
Right?

00:09:21.540 --> 00:09:23.720
We'd much rather have a bug than nothing at
all.

00:09:23.720 --> 00:09:28.000
So either way, let us know if you do discover
an error.

00:09:28.000 --> 00:09:31.899
And you know, whether us by patch, or us fixing
it for you, we wanna go and get that documentation

00:09:31.899 --> 00:09:32.899
straightened out.

00:09:32.899 --> 00:09:37.839
&gt;&gt;Joe: Yeah, so definitely do file a bug if
you're feeling more adventurous like Trevor

00:09:37.839 --> 00:09:40.360
said, you can go ahead and actually make a
change and file a patch.

00:09:40.360 --> 00:09:41.769
And we'll take a look at that.

00:09:41.769 --> 00:09:45.949
But you know, please do tell us about the
stuff that is missing.

00:09:45.949 --> 00:09:47.230
Or incorrect.

00:09:47.230 --> 00:09:50.139
We're always working on improvements to the
documentation.

00:09:50.139 --> 00:09:51.800
So we do appreciate that feedback.

00:09:51.800 --> 00:09:55.649
And we definitely take a look at that when
folks file bugs.

00:09:55.649 --> 00:09:56.649
So.

00:09:56.649 --> 00:09:57.999
Please give us more feedback.

00:09:57.999 --> 00:09:59.259
We appreciate it.

00:09:59.259 --> 00:10:04.760
Alright let's move on to Marcus is very popular
with the questions today.

00:10:04.760 --> 00:10:06.240
Again, from Europe.

00:10:06.240 --> 00:10:11.949
He's asking "can a new video recording start
exactly where a previous one ends?"

00:10:11.949 --> 00:10:14.839
&gt;&gt;Trevor: I wanna say not likely.

00:10:14.839 --> 00:10:16.940
Because just, you're gonna have to stop the
video recording.

00:10:16.940 --> 00:10:19.089
Start the video recording.

00:10:19.089 --> 00:10:25.389
And in between that time, some number of milliseconds
will pass while you're performing operations.

00:10:25.389 --> 00:10:29.240
I think the best option would be to go and
have a single continuous recording and then

00:10:29.240 --> 00:10:30.829
trim it up afterwards.

00:10:30.829 --> 00:10:33.550
Or ultimately record it to some in-memory
store.

00:10:33.550 --> 00:10:35.720
And then just go and splice it in memory.

00:10:35.720 --> 00:10:39.600
I think if you're just going and writing that
to a file, and you're trying to switch files,

00:10:39.600 --> 00:10:40.689
there's gonna be overhead there.

00:10:40.689 --> 00:10:44.310
And it's not gonna start and stop exactly
where you left off.

00:10:44.310 --> 00:10:47.200
On top of that, I think when you stop recording
the video's gonna close the camera connection

00:10:47.200 --> 00:10:48.200
as well.

00:10:48.200 --> 00:10:51.199
Which is gonna add additional lag when the
camera needs to be reinitialized.

00:10:51.199 --> 00:10:52.199
&gt;&gt;Joe: Yeah.

00:10:52.199 --> 00:10:54.180
Probably wanna do a different approach there.

00:10:54.180 --> 00:11:01.779
Maybe you're putting bookmarks or noting particular
tags in the file, just, for example a time

00:11:01.779 --> 00:11:08.059
stamp that says "Alright, here's the end of
one clip and the beginning of a new one."

00:11:08.059 --> 00:11:10.990
Rather than like starting and stopping the
video recording.

00:11:10.990 --> 00:11:15.959
As Trevor says, that start stop problem has
a lot of lag to it.

00:11:15.959 --> 00:11:20.360
And there's some overhead that you're gonna
incur as soon as you stop and start something.

00:11:20.360 --> 00:11:22.129
Um, alright.

00:11:22.129 --> 00:11:24.750
So, another question from Marcus.

00:11:24.750 --> 00:11:29.420
Let's see if we've added some other folks
to talk about here.

00:11:29.420 --> 00:11:31.009
Let's see.

00:11:31.009 --> 00:11:33.709
"Anon" says, as anonymous, I suppose?

00:11:33.709 --> 00:11:35.199
&gt;&gt;Trevor: I imagine, yeah.

00:11:35.199 --> 00:11:41.309
&gt;&gt;Joe: Anon, our favorite contributor says,
"Shortcuts were retconned" I don't even know

00:11:41.309 --> 00:11:43.300
what that word means.

00:11:43.300 --> 00:11:44.300
[laughs]

00:11:44.300 --> 00:11:48.300
&gt;&gt;Trevor: Retroactively added to continuity.

00:11:48.300 --> 00:11:49.879
Basically it's changing the past.

00:11:49.879 --> 00:11:50.879
[laughs]

00:11:50.879 --> 00:11:52.839
&gt;&gt;Joe: [laughs] OK.

00:11:52.839 --> 00:11:55.329
So "Were added into widgets in four point
oh.

00:11:55.329 --> 00:12:01.249
Was it intentional that they aren't part of
the new Jellybean widget design guidelines?

00:12:01.249 --> 00:12:05.630
Are we phasing them out, discouraging their
use, since they don't get mentioned in the

00:12:05.630 --> 00:12:07.250
new dev site either?"

00:12:07.250 --> 00:12:13.009
&gt;&gt;Trevor: So, yeah are definitely something
that we're not heavily promoting right now.

00:12:13.009 --> 00:12:14.990
And in favor of widgets.

00:12:14.990 --> 00:12:23.129
So yeah, I'd say there is definitely a reason
why they're not mentioned in our, in the new

00:12:23.129 --> 00:12:29.059
design guidelines as well as not featured
as prominently in the API documentation as

00:12:29.059 --> 00:12:30.069
well either.

00:12:30.069 --> 00:12:31.550
So, yeah.

00:12:31.550 --> 00:12:34.869
We pretty much in all pieces we're recommending
you go with a widget where you'd previously

00:12:34.869 --> 00:12:36.589
used a shortcut.

00:12:36.589 --> 00:12:38.179
&gt;&gt;Joe: Gotcha.

00:12:38.179 --> 00:12:39.179
Alright.

00:12:39.179 --> 00:12:42.149
Thanks for that one.

00:12:42.149 --> 00:12:45.050
Marcus, our very popular poster today.

00:12:45.050 --> 00:12:50.300
Again asks, "Why does a camera need to be
visible on the screen to be recorded?"

00:12:50.300 --> 00:12:52.809
I wasn't aware that that's actually a requirement.

00:12:52.809 --> 00:12:58.009
Although I know that for the camera anyway,
that's usually the behavior that we think.

00:12:58.009 --> 00:12:59.009
And that's [unintelligible].

00:12:59.009 --> 00:13:02.429
&gt;&gt;Trevor: I'd say it's probably one of two
things.

00:13:02.429 --> 00:13:06.829
Either it was a conscious decision by the
media team to make sure that the user knows

00:13:06.829 --> 00:13:09.189
something is being recorded.

00:13:09.189 --> 00:13:13.410
Or alternatively it was just an oversight
in our design and hasn't been addressed yet.

00:13:13.410 --> 00:13:16.569
Without having someone in the room who actually
wrote the camera API, I can't tell you for

00:13:16.569 --> 00:13:17.569
sure.

00:13:17.569 --> 00:13:18.569
[Joe laughs]

00:13:18.569 --> 00:13:20.470
But either one sounds plausible to me.

00:13:20.470 --> 00:13:22.769
So sorry I don't have an authoritative answer
for you there.

00:13:22.769 --> 00:13:23.999
&gt;&gt;Joe: Yeah.

00:13:23.999 --> 00:13:28.740
Having talked to a few of the guys on the,
who work on the camera team, I'm guessing

00:13:28.740 --> 00:13:32.089
that that was a design choice initially.

00:13:32.089 --> 00:13:36.399
Since we do want folks to be able to see what
they're actually recording as they're, got

00:13:36.399 --> 00:13:38.249
the camera on.

00:13:38.249 --> 00:13:46.379
I have seen apps, at least one app that I've
used myself for doing something like a camera

00:13:46.379 --> 00:13:50.080
surveillance that you can turn off the thing.

00:13:50.080 --> 00:13:55.579
Although I believe what's going on is that
the video preview is just not being shown

00:13:55.579 --> 00:13:56.579
onscreen.

00:13:56.579 --> 00:13:59.470
It's actually still playing in the background.

00:13:59.470 --> 00:14:02.060
So, believe that's a design issue.

00:14:02.060 --> 00:14:07.449
But again, since we don't have the media team
with us and James to ask that question, we're

00:14:07.449 --> 00:14:08.720
speculating a little bit there.

00:14:08.720 --> 00:14:09.720
Alright.

00:14:09.720 --> 00:14:10.720
Um.

00:14:10.720 --> 00:14:12.389
&gt;&gt;Male Engineer: Alright guys, I've actually
got a question.

00:14:12.389 --> 00:14:14.449
From someone on the Hangout.

00:14:14.449 --> 00:14:16.259
I'm gonna put them on for you right now.

00:14:16.259 --> 00:14:17.259
&gt;&gt;Joe: Alright.

00:14:17.259 --> 00:14:18.259
&gt;&gt;Trevor: Yeah.

00:14:18.259 --> 00:14:19.259
Sure.

00:14:19.259 --> 00:14:20.259
Let's hear it.

00:14:20.259 --> 00:14:21.259
&gt;&gt;Joe: [unintelligible] has a question.

00:14:21.259 --> 00:14:22.259
Yes please.

00:14:22.259 --> 00:14:23.259
Hello, go ahead.

00:14:23.259 --> 00:14:24.259
[feedback]

00:14:24.259 --> 00:14:25.749
&gt;&gt;Male Engineer: He actually has no video.

00:14:25.749 --> 00:14:26.970
So it's going to beâ€”

00:14:26.970 --> 00:14:29.329
&gt;&gt;Trevor: I think that's alright, yeah, go
ahead.

00:14:29.329 --> 00:14:30.329
&gt;&gt;Male #1: [unintelligible]

00:14:30.329 --> 00:14:31.399
&gt;&gt;Trevor: Yeah, we can hear you.

00:14:31.399 --> 00:14:32.399
&gt;&gt;Male #1: Hi everybody.

00:14:32.399 --> 00:14:33.399
&gt;&gt;Joe: Hi.

00:14:33.399 --> 00:14:34.399
&gt;&gt;Trevor: Howdy.

00:14:34.399 --> 00:14:40.660
&gt;&gt;Male #1: I had a question about encoding
the capabilities with the new media API.

00:14:40.660 --> 00:14:46.550
And I tried it already and decoder stuff works
great.

00:14:46.550 --> 00:14:54.839
So I put a video to the, um, coded, and it
decoded with no problems.

00:14:54.839 --> 00:14:57.300
And it rendered in the surface.

00:14:57.300 --> 00:15:08.239
But when it tried to create encoder, it tells
me that some uh, exception, raised in the

00:15:08.239 --> 00:15:11.850
native code in the open mocks I guess.

00:15:11.850 --> 00:15:20.810
And the error code is 38 and it says that
some parameters are not specified.

00:15:20.810 --> 00:15:21.810
And that's it.

00:15:21.810 --> 00:15:24.029
I just simply can't create encoder.

00:15:24.029 --> 00:15:29.540
So probably I'm doing something wrong but
there is nothing about it in documentation

00:15:29.540 --> 00:15:30.899
and I'm just stuck.

00:15:30.899 --> 00:15:31.899
[loud feedback]

00:15:31.899 --> 00:15:34.779
So I just have a real problem here.

00:15:34.779 --> 00:15:38.540
So I can decode video here but I cannot encode.

00:15:38.540 --> 00:15:41.829
So this is main problem.

00:15:41.829 --> 00:15:44.499
&gt;&gt;Trevor: Uh, yeah I'd say that the first
step to debugging that is to try to figure

00:15:44.499 --> 00:15:46.610
out what a code 38 error is.

00:15:46.610 --> 00:15:50.239
I know there are a number of numeric errors
like that can happen when you work with the

00:15:50.239 --> 00:15:56.949
media APIs and as much as I hate telling people
"look at the source" it is actually the best

00:15:56.949 --> 00:15:58.459
way to figure out what's causing that.

00:15:58.459 --> 00:16:02.699
So if you take a look at the Android source
code and search for that error, you can actually

00:16:02.699 --> 00:16:05.959
find out what the condition is that causes
it.

00:16:05.959 --> 00:16:08.329
And that'll tell you where to go and look.

00:16:08.329 --> 00:16:10.929
You know, my guess is it's probably something
to do with your encoding settings.

00:16:10.929 --> 00:16:15.879
Possibly, maybe it's an unsupported codec
on the device, something like that.

00:16:15.879 --> 00:16:16.879
Yeah.

00:16:16.879 --> 00:16:17.879
&gt;&gt;Joe: [unintelligible]

00:16:17.879 --> 00:16:21.029
&gt;&gt;Trevor: Documentation probably should be
a bit better there so I apologize for that.

00:16:21.029 --> 00:16:23.819
But that's usually what I wind up doing when
I run into those.

00:16:23.819 --> 00:16:25.770
&gt;&gt;Joe: Have you tried this on multiple devices?

00:16:25.770 --> 00:16:27.720
Is it the same error?

00:16:27.720 --> 00:16:29.300
Or just one the one specific device?

00:16:29.300 --> 00:16:31.699
&gt;&gt;Male #1: Yes, to multiple devices.

00:16:31.699 --> 00:16:34.049
And it's the same error.

00:16:34.049 --> 00:16:41.019
And I tried to create it with different codecs
from my which were available in the system

00:16:41.019 --> 00:16:46.689
and three GP or AVC in batch four.

00:16:46.689 --> 00:16:48.009
So the same error.

00:16:48.009 --> 00:16:49.459
And nothing else.

00:16:49.459 --> 00:16:54.399
So I don't, I also supplied different sets
of parameters for codec.

00:16:54.399 --> 00:16:58.600
And it did not help either.

00:16:58.600 --> 00:16:59.999
So, uh.

00:16:59.999 --> 00:17:00.999
OK.

00:17:00.999 --> 00:17:08.950
Then I will take a look into NDK with OpenMaxium
and probably there is some description of

00:17:08.950 --> 00:17:09.950
it.

00:17:09.950 --> 00:17:10.950
&gt;&gt;Joe: Yeah.

00:17:10.950 --> 00:17:17.290
If you can, put a, post something on StackOverflow
so we can get a little bit more detail on

00:17:17.290 --> 00:17:19.580
that.

00:17:19.580 --> 00:17:24.560
Having worked with some of the media stuff
myself, I know it's very finicky.

00:17:24.560 --> 00:17:26.610
Run into some issues myself.

00:17:26.610 --> 00:17:28.880
Not even using the more recent APIs.

00:17:28.880 --> 00:17:33.220
So if you can give us a little bit more detail
on that we could hopefully follow up and talk

00:17:33.220 --> 00:17:35.200
to the media team and see what's going on
there.

00:17:35.200 --> 00:17:36.440
&gt;&gt;Male #1: OK.

00:17:36.440 --> 00:17:40.750
&gt;&gt;Joe: It's probably, there might be just
a bit you're not flipping that isn't obvious

00:17:40.750 --> 00:17:42.320
to you or us.

00:17:42.320 --> 00:17:46.290
So let's certainly follow up with you on that
one too.

00:17:46.290 --> 00:17:55.480
&gt;&gt;Male #1: And I have also one question, I
was trying to create some filters for the

00:17:55.480 --> 00:17:56.480
camera.

00:17:56.480 --> 00:17:58.390
And I looked into the source code.

00:17:58.390 --> 00:18:05.520
And as you know for sure we have several possible
filters for the camera, and they depend on

00:18:05.520 --> 00:18:07.980
the manufacturer.

00:18:07.980 --> 00:18:13.330
So different devices have different sets of
filters that we can apply to the camera.

00:18:13.330 --> 00:18:18.380
And I was, mm, browsing the source code.

00:18:18.380 --> 00:18:23.000
And actually I did not find any implementation
of the filters.

00:18:23.000 --> 00:18:32.040
So I could find the constants, stains, kind
of sepia, or black and white, etcetera, etcetera.

00:18:32.040 --> 00:18:34.050
But I could not find the implementation of
this filters themself in the native code anywhere.

00:18:34.050 --> 00:18:35.050
So can you [pause]

00:18:35.050 --> 00:18:36.050
&gt;&gt;Joe: oop.

00:18:36.050 --> 00:18:38.400
&gt;&gt;Trevor: I think we missed the end of your
question there.

00:18:38.400 --> 00:18:40.190
[Hangout "dings" multiple times]

00:18:40.190 --> 00:18:44.660
&gt;&gt;Male Engineer: There's some issues with
the Hangout right now.

00:18:44.660 --> 00:18:45.660
[Hangout "dinging"]

00:18:45.660 --> 00:18:48.800
I'm going to turn it off.

00:18:48.800 --> 00:18:50.200
So.

00:18:50.200 --> 00:18:52.990
&gt;&gt;Joe: oh-oh.

00:18:52.990 --> 00:18:58.580
We got cut off.

00:18:58.580 --> 00:19:08.240
&gt;&gt;Trevor: Right, well if you happen to get
back on, or if you just wanna leave a comment

00:19:08.240 --> 00:19:11.040
on the Google plus post as well would work
too.

00:19:11.040 --> 00:19:14.100
So that way we can actually answer your question
while it's there.

00:19:14.100 --> 00:19:17.430
Sounds like we missed the very end and so
we're not sure what you're actually trying

00:19:17.430 --> 00:19:18.430
to ask.

00:19:18.430 --> 00:19:24.270
&gt;&gt;Joe: So it sounded to me like [Hangout dings]
what he was finding is that the filters, some

00:19:24.270 --> 00:19:30.270
of the different camera filters that you can
apply to the camera, so like sepia is one

00:19:30.270 --> 00:19:32.320
of them.

00:19:32.320 --> 00:19:38.050
I think there's like "posterize" and some
other things that are kind of like standard

00:19:38.050 --> 00:19:39.400
image filters there.

00:19:39.400 --> 00:19:44.430
That there wasn't actually source code for
that when he was looking at the platform.

00:19:44.430 --> 00:19:46.610
Um.

00:19:46.610 --> 00:19:49.440
My guess is that that's as expected.

00:19:49.440 --> 00:19:56.570
That the camera operations and the different
filters are actually implemented by the manufacturers.

00:19:56.570 --> 00:20:03.650
That that source code, the custom source code
developed by the folks who actually built

00:20:03.650 --> 00:20:06.950
the camera and put the device together.

00:20:06.950 --> 00:20:12.730
So probably what you're looking at is having
to do, if you're, I think the goal was, I'm

00:20:12.730 --> 00:20:16.380
guessing that the goal was to make his own
filters and try to do that stuff.

00:20:16.380 --> 00:20:17.880
I know that that's possible.

00:20:17.880 --> 00:20:21.630
'cause I've seen a couple different camera
apps that do something like that.

00:20:21.630 --> 00:20:26.180
Though, being able to take the manufacturers
source code, I don't think they're gonna be

00:20:26.180 --> 00:20:29.120
able to do that right now.

00:20:29.120 --> 00:20:30.320
[chuckles] So.

00:20:30.320 --> 00:20:31.320
Anyway.

00:20:31.320 --> 00:20:37.650
If we can, if you manage to get back on and
ask us, 'cause I'm not sure we got actual

00:20:37.650 --> 00:20:38.940
what your question was.

00:20:38.940 --> 00:20:41.740
&gt;&gt;Male Engineer: I think we fixed the sound
issue.

00:20:41.740 --> 00:20:43.200
Could you try speaking again from the Hangout?

00:20:43.200 --> 00:20:46.000
And see if you're on air again?

00:20:46.000 --> 00:20:47.000
[pause]

00:20:47.000 --> 00:20:48.660
&gt;&gt;Joe: Not hearing you.

00:20:48.660 --> 00:20:50.260
&gt;&gt;Male Engineer: Yeah.

00:20:50.260 --> 00:20:51.860
He's, it's fine.

00:20:51.860 --> 00:20:53.450
He said "OK.

00:20:53.450 --> 00:20:54.450
Thanks."

00:20:54.450 --> 00:20:55.450
&gt;&gt;Trevor: OK.

00:20:55.450 --> 00:20:57.370
So I think we got his question then.

00:20:57.370 --> 00:20:58.370
&gt;&gt;Joe: OK.

00:20:58.370 --> 00:20:59.370
Thanks for the question.

00:20:59.370 --> 00:21:00.370
Appreciate it.

00:21:00.370 --> 00:21:01.740
Any more Hangout questions?

00:21:01.740 --> 00:21:03.500
&gt;&gt;Male Engineer: Uh, not at the moment.

00:21:03.500 --> 00:21:04.500
&gt;&gt;Joe: OK.

00:21:04.500 --> 00:21:07.850
Please feel free to jump on and talk to us
in person.

00:21:07.850 --> 00:21:10.330
We'll be glad to talk to you about it.

00:21:10.330 --> 00:21:14.070
Let's see, do we have any more questions from
someone who is not Marcus.

00:21:14.070 --> 00:21:15.070
[laughter]

00:21:15.070 --> 00:21:17.220
Let's see, we've got Frank Spazario?

00:21:17.220 --> 00:21:22.980
Spasaro . Asks, "I want to choose a photo
from the gallery.

00:21:22.980 --> 00:21:24.850
No problems if a local image is chosen.

00:21:24.850 --> 00:21:28.900
However a Picasa photo returns a URI instead
of a location.

00:21:28.900 --> 00:21:30.920
Is there an approved way of handling this?

00:21:30.920 --> 00:21:34.120
Can I modify my intent to only show local
images?"

00:21:34.120 --> 00:21:37.130
&gt;&gt;Trevor: So I would recommend against doing
that.

00:21:37.130 --> 00:21:41.360
Because photos coming from Picasa are still
photos that belong to the user.

00:21:41.360 --> 00:21:42.790
And it's something they might wanna pick.

00:21:42.790 --> 00:21:45.280
And you should still have them.

00:21:45.280 --> 00:21:49.990
So the answer here is, just make sure that
you know, whatever URL you get back whether

00:21:49.990 --> 00:21:57.340
it's a content URL or a file URL or an HTV
URL, treat it as a URL and decode it properly.

00:21:57.340 --> 00:21:58.340
Right.

00:21:58.340 --> 00:22:03.930
If it's HD URL you should go and fetch the
image from the network and display it.

00:22:03.930 --> 00:22:07.360
Yeah, that's the proper way to do it.

00:22:07.360 --> 00:22:11.630
So I don't think there's a really good way
to go and say you don't want those images

00:22:11.630 --> 00:22:12.630
from other sources.

00:22:12.630 --> 00:22:15.400
Because they are there for a reason.

00:22:15.400 --> 00:22:16.810
It's something the user can select.

00:22:16.810 --> 00:22:17.810
&gt;&gt;Joe: Right.

00:22:17.810 --> 00:22:21.790
Yeah, so I think the answer is, yeah you probably
could do that.

00:22:21.790 --> 00:22:25.790
But we prefer that you make your app more
awesome and actually handle all the images

00:22:25.790 --> 00:22:28.480
that the user has access to.

00:22:28.480 --> 00:22:31.430
'Cause that'll give them all the choices that
they want.

00:22:31.430 --> 00:22:33.490
So good question.

00:22:33.490 --> 00:22:38.430
We'll take a little slightly different tack
on that one.

00:22:38.430 --> 00:22:42.110
Alright, so moving on to our next question.

00:22:42.110 --> 00:22:49.300
Julius from Auckland says "Can you recommend
a way to implement gapless music playback,

00:22:49.300 --> 00:22:52.460
e.g. loading two files and not experiencing
a gap."

00:22:52.460 --> 00:22:54.500
So like doing a cross-fade basically.

00:22:54.500 --> 00:22:58.770
"And API seven plus" So API seven and up.

00:22:58.770 --> 00:23:03.500
"I am currently thinking of using an input
stream or something."

00:23:03.500 --> 00:23:05.760
Hmm.

00:23:05.760 --> 00:23:06.760
Interesting question.

00:23:06.760 --> 00:23:07.760
&gt;&gt;Trevor: Yeah.

00:23:07.760 --> 00:23:09.070
I'm sure there's gotta be a way to do it.

00:23:09.070 --> 00:23:11.450
What's the name of that API?

00:23:11.450 --> 00:23:12.450
[laughs]

00:23:12.450 --> 00:23:13.450
[Joe laughs]

00:23:13.450 --> 00:23:18.460
Shoot I'm suddenly drawing a blank on the
API that you'd wanna use for that.

00:23:18.460 --> 00:23:21.880
&gt;&gt;Joe: I don't know it either.

00:23:21.880 --> 00:23:22.880
Extreme?

00:23:22.880 --> 00:23:25.600
&gt;&gt;Trevor: Yeah I think we're gonna have to
get back to you on that one.

00:23:25.600 --> 00:23:29.380
Again, if you can post a question on StackOverflow
we'll go ahead and try and get you some more

00:23:29.380 --> 00:23:31.810
information after the show.

00:23:31.810 --> 00:23:35.400
Unless, Reto, you happen to know the answer
off the top of your head.

00:23:35.400 --> 00:23:36.400
No.

00:23:36.400 --> 00:23:37.400
I'm getting a no from off camera.

00:23:37.400 --> 00:23:38.400
&gt;&gt;Joe: Headshake.

00:23:38.400 --> 00:23:39.400
No.

00:23:39.400 --> 00:23:40.400
That's a no.

00:23:40.400 --> 00:23:43.090
We'll have to get back to James on that one.

00:23:43.090 --> 00:23:47.290
&gt;&gt;Trevor: Yeah, if you've stumped Reto you
know you've asked a tough question.

00:23:47.290 --> 00:23:50.460
&gt;&gt;Joe: Another question from "Anon."

00:23:50.460 --> 00:23:51.460
"Dave" Who's Dave.

00:23:51.460 --> 00:23:52.460
We're not Dave.

00:23:52.460 --> 00:23:53.460
Are you Dave?

00:23:53.460 --> 00:23:54.460
&gt;&gt;Trevor: Uh, Dave Burke.

00:23:54.460 --> 00:23:57.890
Who was supposed to join us today but unfortunately
had a conflict.

00:23:57.890 --> 00:23:58.890
So.

00:23:58.890 --> 00:23:59.890
&gt;&gt;Joe: Ah.

00:23:59.890 --> 00:24:01.630
&gt;&gt;Trevor: We do have other members of the
media team who are supposed to join us at

00:24:01.630 --> 00:24:03.940
some point during the show [Joe laughs] so
this is another question that we can go and

00:24:03.940 --> 00:24:05.770
revisit once we have somebody here.

00:24:05.770 --> 00:24:06.880
&gt;&gt;Joe: There you go.

00:24:06.880 --> 00:24:07.880
Alright.

00:24:07.880 --> 00:24:08.880
So, "Dave" who is not here.

00:24:08.880 --> 00:24:13.180
"What would you say are the most exciting
capabilities use cases that are enabled by

00:24:13.180 --> 00:24:17.200
the new four point one audio APIs that weren't
possible beforehand?"

00:24:17.200 --> 00:24:18.200
Hmm.

00:24:18.200 --> 00:24:20.850
&gt;&gt;Trevor: I think this is a question for the
media team.

00:24:20.850 --> 00:24:21.850
So.

00:24:21.850 --> 00:24:22.850
Let's revisit this one I think.

00:24:22.850 --> 00:24:23.850
Unless you know?

00:24:23.850 --> 00:24:27.660
&gt;&gt;Joe: yeah, well I mean, I think the most
important features that they added with four

00:24:27.660 --> 00:24:32.380
point one were the low latency APIs.

00:24:32.380 --> 00:24:38.830
So being able to play audio very quickly versus
having a little bit of a delay actually in

00:24:38.830 --> 00:24:39.870
the previous versions.

00:24:39.870 --> 00:24:45.540
I think it's like, probably the most important
improvement they put in there.

00:24:45.540 --> 00:24:47.120
There are some other ones as well.

00:24:47.120 --> 00:24:51.180
But again, I feel like I'm not the right question
for me.

00:24:51.180 --> 00:24:54.860
So there's a piece of an answer there anyway.

00:24:54.860 --> 00:24:59.490
Um, there's some other interesting stuff if
you look at the developer site and look at

00:24:59.490 --> 00:25:01.240
their release notes for four point one.

00:25:01.240 --> 00:25:04.940
We do have a section on the midi APIs and
some of the changes there.

00:25:04.940 --> 00:25:08.070
So it's' a way to go get some of that information.

00:25:08.070 --> 00:25:11.880
And if Dave shows up we'll definitely come
back and ask that question.

00:25:11.880 --> 00:25:14.000
&gt;&gt;Trevor: Or, for that matter, if anyone from
the media teamâ€”

00:25:14.000 --> 00:25:15.000
&gt;&gt;Joe: Shows up.

00:25:15.000 --> 00:25:16.000
Or anyone from the media team.

00:25:16.000 --> 00:25:17.000
Yes.

00:25:17.000 --> 00:25:19.020
Media team please come and see us.

00:25:19.020 --> 00:25:20.290
Let's see.

00:25:20.290 --> 00:25:21.290
Moving on.

00:25:21.290 --> 00:25:24.520
We've got another question from Mark in Virginia.

00:25:24.520 --> 00:25:31.740
"Can you speak to using the DRM API in conjunction
with the media APIs to first apply DRM to

00:25:31.740 --> 00:25:34.860
a video, then verify it and play it back?

00:25:34.860 --> 00:25:37.240
This might be too complex a topic for the
Hangout."

00:25:37.240 --> 00:25:39.130
Yeah, you might be correct in that.

00:25:39.130 --> 00:25:41.740
"Maybe a blog post or pointers to example
code?"

00:25:41.740 --> 00:25:42.740
&gt;&gt;Trevor: Yeah.

00:25:42.740 --> 00:25:48.780
So the DRM API code is really designed more
for DRM schemes that are included as part

00:25:48.780 --> 00:25:50.110
of the device.

00:25:50.110 --> 00:25:55.750
So if you're writing your own DRM scheme from
scratch, honestly, I don't think you're gonna

00:25:55.750 --> 00:25:58.080
find the built in DRM APIs very useful for
that.

00:25:58.080 --> 00:25:59.580
That's just been my experience.

00:25:59.580 --> 00:26:03.560
It's possible that there's a better way to
use them that I've never heard about.

00:26:03.560 --> 00:26:10.110
But usually when you do use that the DRM provider
has to be part of the system initially.

00:26:10.110 --> 00:26:11.380
&gt;&gt;Joe: Yeah.

00:26:11.380 --> 00:26:12.380
And yeah.

00:26:12.380 --> 00:26:17.550
So I think that's all we've got to say about
that one for today.

00:26:17.550 --> 00:26:19.030
Another question for Dave.

00:26:19.030 --> 00:26:20.230
Who's not here.

00:26:20.230 --> 00:26:21.390
From Anonymous.

00:26:21.390 --> 00:26:25.620
"Dave, what kind of hardware disqualifies
a four point one plus device from being able

00:26:25.620 --> 00:26:28.970
to support the new audio effects APIs?

00:26:28.970 --> 00:26:36.060
IE: Would it be possible to preemptively predict
whether a device supports it or not just figure

00:26:36.060 --> 00:26:37.440
out from its hardware specs?"

00:26:37.440 --> 00:26:38.440
Essentially.

00:26:38.440 --> 00:26:39.440
Um.

00:26:39.440 --> 00:26:40.440
Hum.

00:26:40.440 --> 00:26:41.440
Another good question.

00:26:41.440 --> 00:26:43.760
Support the new audio effects.

00:26:43.760 --> 00:26:51.100
Yeah, that is, it sort of sounds like there's
a hardware limitation based on what's been

00:26:51.100 --> 00:26:53.560
implemented by the manufacturer in terms of
audio.

00:26:53.560 --> 00:26:54.780
&gt;&gt;Trevor: Right.

00:26:54.780 --> 00:26:57.180
Somehow I doubt it's gonna be just a matter
of looking at the hardware specs.

00:26:57.180 --> 00:27:00.830
I imagine there are some driver issues involved
as well too.

00:27:00.830 --> 00:27:01.830
&gt;&gt;Joe: Right.

00:27:01.830 --> 00:27:05.180
&gt;&gt;Trevor: So I'm not sure that just looking
at the hardware specs would give you enough

00:27:05.180 --> 00:27:10.660
information to determine whether or not audio
effects are possible or not.

00:27:10.660 --> 00:27:11.980
[pause]

00:27:11.980 --> 00:27:14.620
&gt;&gt;Joe: Alright.

00:27:14.620 --> 00:27:19.900
Let's see, moving on.

00:27:19.900 --> 00:27:26.280
"Browen Software Design" in Lucca Italy asks
again, "Android API greater than or equal

00:27:26.280 --> 00:27:27.280
to 12.

00:27:27.280 --> 00:27:30.590
Android" This is a very complex question here.

00:27:30.590 --> 00:27:31.770
[Trevor laughs]

00:27:31.770 --> 00:27:34.730
&gt;&gt;Joe: Android.net.rtp AudioGroup and AudioStream.

00:27:34.730 --> 00:27:38.970
"Are there examples of tutorial of this, of
use of this.

00:27:38.970 --> 00:27:41.970
My APIs documentation is essential for such
a rich APIs."

00:27:41.970 --> 00:27:43.240
Uh.[muttering] RealTime.

00:27:43.240 --> 00:27:47.050
&gt;&gt;Trevor: Yeah, so, RTP streaming, basically.

00:27:47.050 --> 00:27:48.960
&gt;&gt;Joe: RTP streaming.

00:27:48.960 --> 00:27:52.590
As far as I'm aware of, no, not yet.

00:27:52.590 --> 00:27:56.540
But that's some good feedback to take back
to the team.

00:27:56.540 --> 00:28:02.410
I know they wanna do some more coverage on
this but I don't think there's nothing out

00:28:02.410 --> 00:28:03.410
there right now.

00:28:03.410 --> 00:28:04.630
And that's probably why he's asking the question.

00:28:04.630 --> 00:28:05.630
&gt;&gt;Trevor: Right.

00:28:05.630 --> 00:28:11.090
There are some, um, StackOverflow questions
asking a very similar thing to what you just

00:28:11.090 --> 00:28:12.090
asked.

00:28:12.090 --> 00:28:13.090
&gt;&gt;Joe: Right.

00:28:13.090 --> 00:28:14.090
&gt;&gt;Trevor: And there is some user provided
sample code.

00:28:14.090 --> 00:28:16.310
It's not the same as something provided officially.

00:28:16.310 --> 00:28:21.610
So again, it's very good feedback and something
we'll take back to the rest of the team.

00:28:21.610 --> 00:28:25.780
But for now, I'd go in and look at that if
you need an example of how to use RTP.

00:28:25.780 --> 00:28:27.160
&gt;&gt;Joe: Fair enough.

00:28:27.160 --> 00:28:33.140
&gt;&gt;Reto: We have a question from Jeff Simmons
on the G plus stream.

00:28:33.140 --> 00:28:34.140
&gt;&gt;Joe: Sure.

00:28:34.140 --> 00:28:42.920
&gt;&gt;Reto: He wants to know "Is it possible to
use a menu codec with audio record to RealTime

00:28:42.920 --> 00:28:44.260
compression from the mic?"

00:28:44.260 --> 00:28:46.690
&gt;&gt;Trevor: So, media codec with AudioRecord
to do RealTime compression.

00:28:46.690 --> 00:28:47.690
Um.

00:28:47.690 --> 00:28:48.690
That's a good question actually.

00:28:48.690 --> 00:28:50.510
I've never tried it myself.

00:28:50.510 --> 00:28:55.430
I wanna say it's probably possible at some
level.

00:28:55.430 --> 00:28:59.650
Given that you know, whenever you select a
codec there's a certain amount of compression

00:28:59.650 --> 00:29:03.600
and processing that's done at that time anyway.

00:29:03.600 --> 00:29:09.570
So, short answer is "probably" but I think
we need somebody from the media team in here

00:29:09.570 --> 00:29:13.610
to actually go and explain a little bit more
about what's involved in doing that.

00:29:13.610 --> 00:29:16.700
Since I don't think anyone here has actually
ever tried it.

00:29:16.700 --> 00:29:17.700
But.

00:29:17.700 --> 00:29:18.700
&gt;&gt;Joe: Yes.

00:29:18.700 --> 00:29:19.700
So.

00:29:19.700 --> 00:29:23.720
Good question, but unfortunately we're a little
out of our depth on that one.

00:29:23.720 --> 00:29:27.880
Let's see, any other questions from the Hangout?

00:29:27.880 --> 00:29:28.880
No?

00:29:28.880 --> 00:29:29.880
OK.

00:29:29.880 --> 00:29:31.550
Got a headshake there.

00:29:31.550 --> 00:29:32.550
OK.

00:29:32.550 --> 00:29:37.800
Julius from Auckland asks "Is there a way
to calculate the duration of the audio produced

00:29:37.800 --> 00:29:40.640
by a text to speech request?

00:29:40.640 --> 00:29:45.010
Currently we have to push audio to a file
to get the duration from the file.

00:29:45.010 --> 00:29:48.660
We wish to supply the user with a visual indicator
of the length in advance."

00:29:48.660 --> 00:29:49.660
Hm.

00:29:49.660 --> 00:29:50.970
That's a very interesting one.

00:29:50.970 --> 00:29:51.970
&gt;&gt;Trevor: Hm.

00:29:51.970 --> 00:29:52.970
It is.

00:29:52.970 --> 00:29:58.850
And somehow my gut feeling is probably not,
'cause usually when you're using the text

00:29:58.850 --> 00:30:03.460
to speech API is you're doing it to play it
back immediately.

00:30:03.460 --> 00:30:05.960
And you know, for example driving directions
in GoogleMaps.

00:30:05.960 --> 00:30:08.150
You just have a voice that's reading off directions
to you.

00:30:08.150 --> 00:30:14.180
And it's very much just "take my text and
read it and I wanna be done" so I don't think

00:30:14.180 --> 00:30:17.360
there's much in the way of the API there for
things like getting the length.

00:30:17.360 --> 00:30:18.550
Things like that.

00:30:18.550 --> 00:30:24.030
So I suspect what you're doing is probably
the best way to do it.

00:30:24.030 --> 00:30:25.860
I can't say that authoritatively.

00:30:25.860 --> 00:30:29.690
But my gut feeling is that's probably the
best way to do it right now.

00:30:29.690 --> 00:30:30.690
&gt;&gt;Joe: Alright.

00:30:30.690 --> 00:30:33.430
Thanks for that question Julius.

00:30:33.430 --> 00:30:40.630
And now we've got another one.

00:30:40.630 --> 00:30:41.630
From Ihear Joff?

00:30:41.630 --> 00:30:42.630
Or Geoff?

00:30:42.630 --> 00:30:43.630
From Seattle, Washington.

00:30:43.630 --> 00:30:45.590
"Is it possible to use the MediaCodec class
in conjunction with AudioRecord?"

00:30:45.590 --> 00:30:47.370
That sounds like the same question.

00:30:47.370 --> 00:30:48.370
&gt;&gt;Trevor: It does.

00:30:48.370 --> 00:30:49.370
[Joe laughs]

00:30:49.370 --> 00:30:50.670
And I suspect it is.

00:30:50.670 --> 00:30:51.670
&gt;&gt;Joe: Probably the same.

00:30:51.670 --> 00:30:53.180
&gt;&gt;Trevor: But we need actually his name from
the team to confirm that.

00:30:53.180 --> 00:30:54.180
&gt;&gt;Joe: OK.

00:30:54.180 --> 00:30:55.180
Uh.

00:30:55.180 --> 00:30:59.230
&gt;&gt;Reto: Just so you guys know, James from
the Media Team is currently hurriedly trying

00:30:59.230 --> 00:31:03.190
to grab a last bit at lunch and he will hopefully
be up here at least for the last 15 minutes.

00:31:03.190 --> 00:31:04.190
[laughter]

00:31:04.190 --> 00:31:05.190
So.

00:31:05.190 --> 00:31:06.190
He's, uhâ€”

00:31:06.190 --> 00:31:07.190
&gt;&gt;Joe: These media guys and their lunches.

00:31:07.190 --> 00:31:08.190
[inaudible]

00:31:08.190 --> 00:31:09.190
&gt;&gt;Reto: [inaudible]

00:31:09.190 --> 00:31:10.190
&gt;&gt;Trevor: Tell, tell him that Joe's open.

00:31:10.190 --> 00:31:11.190
&gt;&gt;Joe: Unbelievable.

00:31:11.190 --> 00:31:12.190
&gt;&gt;Trevor: He can get a sandwich.

00:31:12.190 --> 00:31:13.190
[laughter]

00:31:13.190 --> 00:31:14.190
After the show.

00:31:14.190 --> 00:31:15.190
&gt;&gt;Joe: Alright, moving along here.

00:31:15.190 --> 00:31:19.090
We've got from Tomas Skare in Arvika, Sweden.

00:31:19.090 --> 00:31:20.090
Alright.

00:31:20.090 --> 00:31:22.100
Somebody from Sweden.

00:31:22.100 --> 00:31:23.100
Excellent.

00:31:23.100 --> 00:31:29.420
"we've been, when using the MHL adapter to
get HDMI out, some apps like YouTube show

00:31:29.420 --> 00:31:33.200
different views to the device display and
the HDMI output.

00:31:33.200 --> 00:31:34.580
How is that done?

00:31:34.580 --> 00:31:36.710
I could not find any API for this.

00:31:36.710 --> 00:31:37.809
Is it hardware dependent?"

00:31:37.809 --> 00:31:38.809
&gt;&gt;Trevor: Alright.

00:31:38.809 --> 00:31:40.400
I actually do know the answer to this one.

00:31:40.400 --> 00:31:41.400
&gt;&gt;Joe: Alright.

00:31:41.400 --> 00:31:42.400
Awesome.

00:31:42.400 --> 00:31:43.400
&gt;&gt;Trevor: I was talking, it came up a couple
weeks ago.

00:31:43.400 --> 00:31:44.400
So.

00:31:44.400 --> 00:31:52.200
The answer is, there is support in the system
specifically for video services.

00:31:52.200 --> 00:31:54.670
And HDMI output.

00:31:54.670 --> 00:31:57.780
So it is a manufacturer specific setting.

00:31:57.780 --> 00:32:00.210
So not all Android devices are guaranteed
to do this.

00:32:00.210 --> 00:32:01.940
Even if they're running the latest version.

00:32:01.940 --> 00:32:06.000
But at least on the versions that Google has
produced whenever you have a video service

00:32:06.000 --> 00:32:12.480
on the screen, the contents of that video
service will be used as the HDMI output.

00:32:12.480 --> 00:32:15.440
So it's not an API that's available for developers.

00:32:15.440 --> 00:32:18.580
Other than to just use the system media APIs.

00:32:18.580 --> 00:32:22.720
And if you do that, whenever you have video
on screen, it should be mirrored over HDMI.

00:32:22.720 --> 00:32:24.670
&gt;&gt;Joe: Alright.

00:32:24.670 --> 00:32:26.640
So it's specifically keyed to the video servers.

00:32:26.640 --> 00:32:27.640
&gt;&gt;Trevor: That's correct.

00:32:27.640 --> 00:32:28.640
&gt;&gt;Joe: Got it.

00:32:28.640 --> 00:32:29.900
But only on certain devices?

00:32:29.900 --> 00:32:31.610
&gt;&gt;Trevor: Only on certain devices.

00:32:31.610 --> 00:32:33.080
Other devices might handle it differently.

00:32:33.080 --> 00:32:36.440
They might choose to provide their own private
APIs.

00:32:36.440 --> 00:32:40.140
They could go and just use mirroring all the
time.

00:32:40.140 --> 00:32:45.150
It really just depends on what the manufacturer
wants for their HDMI output.

00:32:45.150 --> 00:32:46.580
&gt;&gt;Joe: Alright.

00:32:46.580 --> 00:32:47.580
Great.

00:32:47.580 --> 00:32:48.730
Good question.

00:32:48.730 --> 00:32:50.880
Thank you, Tomas.

00:32:50.880 --> 00:32:51.880
And.

00:32:51.880 --> 00:32:55.760
Next we have Marcus from Europe has been very
productive today with his questions.

00:32:55.760 --> 00:33:03.080
"when will the camera service ever auto-unlock
or how will unlock when it, how unlock it

00:33:03.080 --> 00:33:09.510
when it have crashes of the app crash still
holds the lock and blocks all other apps from

00:33:09.510 --> 00:33:11.800
using the camera until the phone reboots?"

00:33:11.800 --> 00:33:12.900
Yes.

00:33:12.900 --> 00:33:13.920
This is a problem.

00:33:13.920 --> 00:33:22.340
So for those of you who have done some development
in camera, with the camera as I have, if you

00:33:22.340 --> 00:33:27.300
write bad code and you have errors in your
code and your camera crashes without you actually

00:33:27.300 --> 00:33:33.810
unlocking the camera app, or access to the
camera, yes, you will lock out not only yourself

00:33:33.810 --> 00:33:39.430
but anybody else and any other apps that try
to use the camera because that lock has not

00:33:39.430 --> 00:33:44.590
been un, not um, apparently released.

00:33:44.590 --> 00:33:50.050
Probably the first answer is, make sure your
app doesn't crash in the middle of using the

00:33:50.050 --> 00:33:51.770
camera.

00:33:51.770 --> 00:33:54.850
You know, test your code thoroughly to make
sure that this doesn't happen.

00:33:54.850 --> 00:33:59.950
Because that is in fact I think the only way
you can really unlock it if that kind of error

00:33:59.950 --> 00:34:00.950
occurs.

00:34:00.950 --> 00:34:07.680
I think even if you put in, it's probably
a good idea to have in your code, in one of

00:34:07.680 --> 00:34:15.510
your on pause or what's the other, the final
on destroy?

00:34:15.510 --> 00:34:22.300
To make sure that, to check that you've done
a release of the camera object before your

00:34:22.300 --> 00:34:24.139
app actually exits.

00:34:24.139 --> 00:34:25.919
So make sure that that code's in there.

00:34:25.919 --> 00:34:31.700
In fact, you can see an example of that code
when you look at the developer guide for camera.

00:34:31.700 --> 00:34:33.950
So make sure you put that into your code.

00:34:33.950 --> 00:34:39.149
But really the only other answer is if your
app is crashing and misbehaving then, yeah,

00:34:39.149 --> 00:34:40.740
you're gonna cause that kind of a problem.

00:34:40.740 --> 00:34:41.929
And you're gonna upset your users.

00:34:41.929 --> 00:34:47.070
So make sure you test that kind of an app
thoroughly and make sure that that doesn't

00:34:47.070 --> 00:34:48.070
happen.

00:34:48.070 --> 00:34:49.070
Any other thoughts?

00:34:49.070 --> 00:34:50.800
&gt;&gt;Trevor: I think that explained pretty thoroughly.

00:34:50.800 --> 00:34:52.830
I don't have anything else to add to that.

00:34:52.830 --> 00:34:53.830
[laughs]

00:34:53.830 --> 00:34:54.830
&gt;&gt;Joe: OK.

00:34:54.830 --> 00:34:55.830
Alright.

00:34:55.830 --> 00:34:56.830
Good question, thank you sir.

00:34:56.830 --> 00:34:59.460
&gt;&gt;Male Engineer: I've actually got Alexander
back on the Hangout.

00:34:59.460 --> 00:35:02.580
He wants to chime back in about cameras and
whatnot?

00:35:02.580 --> 00:35:04.040
So wanna put him on from the Hangout?

00:35:04.040 --> 00:35:05.040
&gt;&gt;Joe: Great.

00:35:05.040 --> 00:35:06.040
Go ahead Alexander.

00:35:06.040 --> 00:35:07.170
&gt;&gt;Male Engineer: Alex, go ahead.

00:35:07.170 --> 00:35:08.170
You're on.

00:35:08.170 --> 00:35:09.380
&gt;&gt;Alex: Hi, guys again.

00:35:09.380 --> 00:35:10.490
So, I wannaâ€”

00:35:10.490 --> 00:35:11.490
&gt;&gt;Joe: [inaudible]settings.

00:35:11.490 --> 00:35:12.710
&gt;&gt;Trevor: Can't hear him.

00:35:12.710 --> 00:35:14.110
Check the monitor settings.

00:35:14.110 --> 00:35:15.670
&gt;&gt;Joe: Sorry Alex.

00:35:15.670 --> 00:35:17.740
We're getting a littleâ€”

00:35:17.740 --> 00:35:19.650
&gt;&gt;Alex:Oh, can you hear me?

00:35:19.650 --> 00:35:22.860
&gt;&gt;Male Engineer: I'm getting it from, Alex
[inaudible]

00:35:22.860 --> 00:35:23.860
&gt;&gt;Alex: Hello?

00:35:23.860 --> 00:35:24.860
Hello?

00:35:24.860 --> 00:35:26.080
&gt;&gt;Joe: Ah, there you go.

00:35:26.080 --> 00:35:27.080
We can hear you now.

00:35:27.080 --> 00:35:28.080
&gt;&gt;Male Engineer: There you go.

00:35:28.080 --> 00:35:29.080
&gt;&gt;Joe: Go ahead.

00:35:29.080 --> 00:35:30.080
&gt;&gt;Alex: Good.

00:35:30.080 --> 00:35:37.810
So as you know, if we want to process the
media as a picture from the camera in leaf,

00:35:37.810 --> 00:35:43.260
we have really small FBFs coming back from
camera.

00:35:43.260 --> 00:35:45.120
And this is really frustrating.

00:35:45.120 --> 00:35:52.330
'cause if we want to make some exceptions,
some filters, etcetera, etcetera, we would

00:35:52.330 --> 00:35:56.020
really like to have kind of real time stream.

00:35:56.020 --> 00:36:04.270
And uh, do you guys plan to provide us with
such, I don't know, possibilities as a key

00:36:04.270 --> 00:36:12.470
to process the stuff in native code, just
to gain more FBFs and etcetera etcetera.

00:36:12.470 --> 00:36:13.470
So.

00:36:13.470 --> 00:36:16.340
&gt;&gt;Joe: Yeah, so that's a good question.

00:36:16.340 --> 00:36:22.020
There's actually three different ways that
I know of that you can get the different image

00:36:22.020 --> 00:36:26.930
to the camera device whatever that camera
hardware is.

00:36:26.930 --> 00:36:31.800
We only, the first one is pretty obvious.

00:36:31.800 --> 00:36:38.170
But there's two additional ones that at least
I know of that you can use to get the frame,

00:36:38.170 --> 00:36:41.640
the different frames from the camera.

00:36:41.640 --> 00:36:45.300
In escalating levels of complexity, actually.

00:36:45.300 --> 00:36:49.860
If you would, actually, and I actually, I'd
have to go back and look at my notes to kind

00:36:49.860 --> 00:36:51.460
of explain some of those.

00:36:51.460 --> 00:36:56.290
James who's come and joined us recently, can
talk about this stuff.

00:36:56.290 --> 00:37:02.590
James, you wanna talk about different ways
that you could get different frames from the

00:37:02.590 --> 00:37:03.590
camera?

00:37:03.590 --> 00:37:05.770
I know there's a couple different approaches
that you can take.

00:37:05.770 --> 00:37:09.130
&gt;&gt;James: Well, this is James.

00:37:09.130 --> 00:37:15.540
I think in order to get the frames that are
from camera, there are a couple of ways.

00:37:15.540 --> 00:37:25.350
One is you can use the preview callback, the
java API we published mandate, there are two

00:37:25.350 --> 00:37:27.220
colors format must be supported.

00:37:27.220 --> 00:37:30.590
One is [indistinct] the other is [indistinct].

00:37:30.590 --> 00:37:41.270
So if you use preview frame callback, you
can have access to the frame data that way.

00:37:41.270 --> 00:37:48.930
I think that's currently, if you use java
API, that's probably the only way.

00:37:48.930 --> 00:37:57.080
And native layer, basically we have the recording
frame callback also.

00:37:57.080 --> 00:38:05.840
You can gain access to the camera how recording
frames also.

00:38:05.840 --> 00:38:08.460
Does this answer your question?

00:38:08.460 --> 00:38:11.910
&gt;&gt;Alex: Can I get to the callback.

00:38:11.910 --> 00:38:18.670
So I'm not sure that it's the command that's,
so, is there a way I can find it?

00:38:18.670 --> 00:38:21.270
And put the listener on it?

00:38:21.270 --> 00:38:22.710
&gt;&gt;James: Yeah.

00:38:22.710 --> 00:38:24.880
There's steps involved.

00:38:24.880 --> 00:38:29.440
Basically you just need to set a register
in callback.

00:38:29.440 --> 00:38:33.670
Um, the callback is preview frame callback.

00:38:33.670 --> 00:38:38.750
On the camera.java class.

00:38:38.750 --> 00:38:42.020
And then the application should receive callbacks
from the camera.

00:38:42.020 --> 00:38:43.619
Once the preview isâ€”

00:38:43.619 --> 00:38:50.120
&gt;&gt;Alex: Well, yes but, it's, the FPS is really
low there, so it'sâ€”

00:38:50.120 --> 00:38:51.840
&gt;&gt;Joe: The frames per second.

00:38:51.840 --> 00:38:53.950
&gt;&gt;Alex: Maximum can 10, 15 FPS.

00:38:53.950 --> 00:38:57.300
Frames per seconds I can get from there.

00:38:57.300 --> 00:39:04.670
And if I need to amend the data from it, it
becomes even slower.

00:39:04.670 --> 00:39:10.110
So, I am really eager to find the way to make
it faster so.

00:39:10.110 --> 00:39:14.480
I understand that we can use native stuff.

00:39:14.480 --> 00:39:16.270
And for example.

00:39:16.270 --> 00:39:21.260
If we look to the OpenCV project as a work
with camera.

00:39:21.260 --> 00:39:22.260
&gt;&gt;James: Mm-hm.

00:39:22.260 --> 00:39:26.070
&gt;&gt;Alex: And it's written purely in C as I
understand.

00:39:26.070 --> 00:39:27.070
&gt;&gt;James: Mm-hm.

00:39:27.070 --> 00:39:36.710
&gt;&gt;Alex: So I really hope you guys someday
decide to open such capabilities for us developers

00:39:36.710 --> 00:39:41.440
so we could use at least 30 FPS for the camera.

00:39:41.440 --> 00:39:48.400
&gt;&gt;James: Yes, I think you are right, when
you use this preview callback, the frame rate

00:39:48.400 --> 00:39:49.430
is low.

00:39:49.430 --> 00:39:56.460
The reason like the frame rate is low is because
the frame theater has to be copied out.

00:39:56.460 --> 00:40:00.500
So there's a main copy involved.

00:40:00.500 --> 00:40:06.680
We are working on some like enhancement to
the whole camera framework.

00:40:06.680 --> 00:40:12.250
I cannot say for sure like when new API will
be available.

00:40:12.250 --> 00:40:20.120
But definitely we are working on something
to improve in this regard for future API release.

00:40:20.120 --> 00:40:24.640
Um, but not any time soon, likeâ€”

00:40:24.640 --> 00:40:25.760
&gt;&gt;Alex: OK.

00:40:25.760 --> 00:40:26.870
Thank you.

00:40:26.870 --> 00:40:27.990
&gt;&gt;James: Sure.

00:40:27.990 --> 00:40:29.110
&gt;&gt;Joe: Great.

00:40:29.110 --> 00:40:34.431
And if you could post a question on this on
StackOverflow and I'll see if I can get you

00:40:34.431 --> 00:40:35.510
a little bit more information.

00:40:35.510 --> 00:40:40.900
I believe there's some other ways, other approaches
you can take to this.

00:40:40.900 --> 00:40:43.770
But I can't talk about them off the top of
my head.

00:40:43.770 --> 00:40:49.600
So just post a question on StackOverflow and
post it in the Hangout and I'll go follow

00:40:49.600 --> 00:40:51.280
up with you there.

00:40:51.280 --> 00:40:55.270
&gt;&gt;Reto: Now that we've actually got James
in the room do you think you may be able to

00:40:55.270 --> 00:40:59.960
introduce yourself and tell the viewers a
little bit about who you are and what you

00:40:59.960 --> 00:41:01.920
do in the Android team?

00:41:01.920 --> 00:41:02.920
&gt;&gt;James: OK.

00:41:02.920 --> 00:41:04.000
My name's James Dong.

00:41:04.000 --> 00:41:07.730
I'm the tech lead for Android media team.

00:41:07.730 --> 00:41:17.690
Basically, like our team is dealing with all
the media framework and camera framework.

00:41:17.690 --> 00:41:23.020
Um, and we also have a separate team for audio
framework.

00:41:23.020 --> 00:41:27.180
So, pretty much like a multimedia stuff.

00:41:27.180 --> 00:41:28.180
Everything.

00:41:28.180 --> 00:41:29.180
Thanks.

00:41:29.180 --> 00:41:30.180
&gt;&gt;Joe: Great.

00:41:30.180 --> 00:41:31.180
&gt;&gt;Reto: Very nice.

00:41:31.180 --> 00:41:32.180
&gt;&gt;Joe: Thanks for joining us, James.

00:41:32.180 --> 00:41:34.910
&gt;&gt;Reto: So a couple of questions we had queued
up from earlier on for James.

00:41:34.910 --> 00:41:40.800
So while you guys look those up, I've got
one from Tom on the livestream.

00:41:40.800 --> 00:41:44.310
He'd like to apply arbitrary effects to the
system media stream.

00:41:44.310 --> 00:41:46.210
So things like creating the equalizer etcetera.

00:41:46.210 --> 00:41:49.310
He can do this if he writes his own media
player.

00:41:49.310 --> 00:41:53.970
But he'd really like to be able to just create
the effects and let users use whatever media

00:41:53.970 --> 00:41:56.480
player they would usually use to apply those
effects.

00:41:56.480 --> 00:41:58.390
Is that possible?

00:41:58.390 --> 00:42:07.810
&gt;&gt;James: Um, the effects you want to apply
depends on how you get the frame in the first

00:42:07.810 --> 00:42:10.890
place.

00:42:10.890 --> 00:42:16.930
If you want to apply effects to the decoder
output, that's possible.

00:42:16.930 --> 00:42:23.290
We just published a new media API called a
MediaCodec dot Java class.

00:42:23.290 --> 00:42:29.390
Which allows you to gain access to the decoder
output directly.

00:42:29.390 --> 00:42:34.450
And then you can do image processing on the
decoder output.

00:42:34.450 --> 00:42:37.280
I think that's the, well, it really depends
on the context.

00:42:37.280 --> 00:42:41.300
Like how you want to apply the effects.

00:42:41.300 --> 00:42:43.220
So that's one way.

00:42:43.220 --> 00:42:45.430
&gt;&gt;Reto: Thank you.

00:42:45.430 --> 00:42:46.900
&gt;&gt;Joe: OK.

00:42:46.900 --> 00:42:47.900
Great.

00:42:47.900 --> 00:42:48.970
Don't put down that microphone just yet.

00:42:48.970 --> 00:42:52.740
We've still got a few more questions for you,
James.

00:42:52.740 --> 00:42:53.740
[laughter]

00:42:53.740 --> 00:42:57.300
Scaling back to earlier question here.

00:42:57.300 --> 00:43:00.870
How do I determine if there's a specific audio
encoding.

00:43:00.870 --> 00:43:05.970
So AMR-WB rather than some of the other flavors
of theâ€”

00:43:05.970 --> 00:43:07.310
&gt;&gt;Trevor: Yeah, and AMR-NB.

00:43:07.310 --> 00:43:08.310
&gt;&gt;Joe: AMR-NB.

00:43:08.310 --> 00:43:09.310
And some of the other ones.

00:43:09.310 --> 00:43:15.390
So AudioCodec get codec has no constant for
AMR-WB and others.

00:43:15.390 --> 00:43:19.450
For example, the Experia X10 doesn't have,
doesn't support it.

00:43:19.450 --> 00:43:24.850
And I wanna be able to detect that so, and
if I try to do that it actually crashes in

00:43:24.850 --> 00:43:29.290
native C. So, this question is how to detect
if those formants are supported.

00:43:29.290 --> 00:43:34.920
&gt;&gt;James: That's a great question and it comes
in a really timely fashion.

00:43:34.920 --> 00:43:43.320
Like in Jellybean, we released this set for
new API, java APIs, one of the API allows

00:43:43.320 --> 00:43:51.000
you to find out all the codecs available on
a specific device, Android device.

00:43:51.000 --> 00:43:56.190
The class name is MediaCodecList.

00:43:56.190 --> 00:43:59.200
And MediaCodecListInfo.

00:43:59.200 --> 00:44:05.740
So using these two classes you can basically
walk through all the media codecs available

00:44:05.740 --> 00:44:06.740
on a device.

00:44:06.740 --> 00:44:10.790
And you can find out the capabilities of each
codec.

00:44:10.790 --> 00:44:17.280
Such as whether this is AMR narrow band or
AMR wideband.

00:44:17.280 --> 00:44:21.980
Whether this is like a AAC or any other video
codec.

00:44:21.980 --> 00:44:28.380
For video codecs you can find out whether
like, what kind of profiles and levels supported

00:44:28.380 --> 00:44:31.300
for that specific video codec.

00:44:31.300 --> 00:44:37.440
So it is a new set of API we just published.

00:44:37.440 --> 00:44:41.280
And it is very useful I think to you guys.

00:44:41.280 --> 00:44:42.280
[pause]

00:44:42.280 --> 00:44:43.960
&gt;&gt;Joe: Great.

00:44:43.960 --> 00:44:44.960
Thanks for that.

00:44:44.960 --> 00:44:45.960
&gt;&gt;James: Thank you.

00:44:45.960 --> 00:44:50.090
&gt;&gt;Joe: Let's see, scrolling back to some previous
questions we had.

00:44:50.090 --> 00:44:54.450
"Is it possible to use the MediaCodec class
in conjunction with AudioRecord?"

00:44:54.450 --> 00:44:58.070
&gt;&gt;Trevor: Right, and we had a second question
which was very similar.

00:44:58.070 --> 00:45:02.710
Is it possible to do compression when you're
using MediaRecord?

00:45:02.710 --> 00:45:10.020
&gt;&gt;James: I think MediaCodec is designed in
a way that is generic so it's basically the

00:45:10.020 --> 00:45:16.619
same set of API methods can be applicable
to both encoder and decoder.

00:45:16.619 --> 00:45:22.300
So you should be able to use them for encoding
purpose also.

00:45:22.300 --> 00:45:24.360
&gt;&gt;Joe: OK.

00:45:24.360 --> 00:45:25.390
Great.

00:45:25.390 --> 00:45:27.460
Let's see.

00:45:27.460 --> 00:45:33.580
Marcus from Europe asked us "Will there be
support for any streaming capable container

00:45:33.580 --> 00:45:39.200
format in MediaRecorder like MPEG-TS in the
future?"

00:45:39.200 --> 00:45:41.810
Actually we can't answer that question because
that's a future-looking question.

00:45:41.810 --> 00:45:42.810
&gt;&gt;Trevor: Right yeah.

00:45:42.810 --> 00:45:43.810
That one we'll probably have to just skip.

00:45:43.810 --> 00:45:45.609
I mean unless there's something you can share.

00:45:45.609 --> 00:45:48.570
But generally speaking questions like this
we have to skip.

00:45:48.570 --> 00:45:49.570
So.

00:45:49.570 --> 00:45:50.570
&gt;&gt;Joe: Gotcha.

00:45:50.570 --> 00:45:51.570
Alright, moving on.

00:45:51.570 --> 00:45:53.890
There's another one we wanted.

00:45:53.890 --> 00:45:55.165
&gt;&gt;Trevor: That one might be a good one to
revisit.

00:45:55.165 --> 00:45:56.165
The camera.

00:45:56.165 --> 00:45:57.700
&gt;&gt;Joe: Right, the camera question.

00:45:57.700 --> 00:46:03.520
"Why does the camera need a visible surface
on the screen to be recorded?"

00:46:03.520 --> 00:46:07.540
And is that actually true, is the next question.

00:46:07.540 --> 00:46:10.650
&gt;&gt;James: Yeah, I think that this is true.

00:46:10.650 --> 00:46:18.820
Currently for the java camera.java class we
have, the, this is due to a legacy reason.

00:46:18.820 --> 00:46:27.960
Because like in the past we some of the [indistinct]
has to run a preview before they can supply

00:46:27.960 --> 00:46:31.960
the video frames or preview frames.

00:46:31.960 --> 00:46:34.760
So that's why we have to have that uh, available.

00:46:34.760 --> 00:46:35.930
&gt;&gt;Joe: Gotcha.

00:46:35.930 --> 00:46:36.930
OK.

00:46:36.930 --> 00:46:39.910
So there's a little bit of a legacy problem
there.

00:46:39.910 --> 00:46:40.910
&gt;&gt;James: yep.

00:46:40.910 --> 00:46:41.910
&gt;&gt;Trevor: Yeah, OK.

00:46:41.910 --> 00:46:42.910
So now we're actually back to new questions.

00:46:42.910 --> 00:46:43.910
&gt;&gt;Joe: Alright.

00:46:43.910 --> 00:46:44.910
And we're back to our regular questions.

00:46:44.910 --> 00:46:45.910
Excellent.

00:46:45.910 --> 00:46:47.030
&gt;&gt;Male Engineer: I've actually got a question
from the Hangout.

00:46:47.030 --> 00:46:48.859
It's gonna be live and we'll have video this
time.

00:46:48.859 --> 00:46:49.859
So [inaudible].

00:46:49.859 --> 00:46:50.859
&gt;&gt;Trevor: Oh, yay.

00:46:50.859 --> 00:46:51.859
We actually have someone with video.

00:46:51.859 --> 00:46:52.859
&gt;&gt;Joe: Yay.

00:46:52.859 --> 00:46:53.859
Actual live person.

00:46:53.859 --> 00:46:54.859
Fantastic.

00:46:54.859 --> 00:46:55.859
&gt;&gt;Male #2: yeah, I have a question on the
SDK manager.

00:46:55.859 --> 00:46:58.140
I know there was a recent update 20 point
oh point three.

00:46:58.140 --> 00:47:03.240
And I saw a new option there that says "enable
preview tools" so I tried checking that and

00:47:03.240 --> 00:47:04.600
I'm not seeing the preview for Tools21.

00:47:04.600 --> 00:47:09.420
Do you know if that's a new button that they
haven't put on, they haven't fixed yet?

00:47:09.420 --> 00:47:12.359
Or 21 is not available for preview with the
SDK manager?

00:47:12.359 --> 00:47:13.359
Do I need to file a bug?

00:47:13.359 --> 00:47:15.230
&gt;&gt;Trevor: I don't believe 21 is available
yet.

00:47:15.230 --> 00:47:16.230
Soâ€”

00:47:16.230 --> 00:47:17.230
&gt;&gt;Male #2: It was released on the ninth.

00:47:17.230 --> 00:47:20.000
&gt;&gt;Trevor: It was news to me that they have
the preview button there.

00:47:20.000 --> 00:47:21.190
&gt;&gt;male #2: OK.

00:47:21.190 --> 00:47:23.320
&gt;&gt;Trevor: I suspect probably sometime soon.

00:47:23.320 --> 00:47:27.580
&gt;&gt;Male #2: The 21 preview was announced on
the ninth.

00:47:27.580 --> 00:47:28.580
&gt;&gt;Trevor: Hm.

00:47:28.580 --> 00:47:29.580
It should be up there.

00:47:29.580 --> 00:47:30.580
Um.

00:47:30.580 --> 00:47:31.580
&gt;&gt;Male #2: it's on the download page very
obscurely.

00:47:31.580 --> 00:47:33.270
It's not listed on the main downloads.

00:47:33.270 --> 00:47:35.650
But if you go to the bottom it's a subpage.

00:47:35.650 --> 00:47:37.980
EDT21 preview requires the R21 preview.

00:47:37.980 --> 00:47:41.290
&gt;&gt;Trevor: Just to check did you try refreshing
the SDK manager?

00:47:41.290 --> 00:47:42.970
Because I know it does do some caching.

00:47:42.970 --> 00:47:47.170
&gt;&gt;Male #2: I did, I turned off cache a while
ago because I had problems with caching.

00:47:47.170 --> 00:47:50.810
And I think the newest update the 20 point
one three is supposed to fix the caching problem.

00:47:50.810 --> 00:47:51.810
Butâ€”

00:47:51.810 --> 00:47:52.810
[laughter]

00:47:52.810 --> 00:47:53.810
&gt;&gt;Joe: Yes.

00:47:53.810 --> 00:47:54.810
That's true, I've worked on those.

00:47:54.810 --> 00:47:55.810
That's true.

00:47:55.810 --> 00:48:00.170
&gt;&gt;Male #2: I did a clear download cache and
I've reâ€”you know turned it off and on.

00:48:00.170 --> 00:48:01.170
Andâ€”

00:48:01.170 --> 00:48:02.170
&gt;&gt;Joe: Right.

00:48:02.170 --> 00:48:03.170
Just a clueâ€”

00:48:03.170 --> 00:48:04.170
&gt;&gt;Reto: I wanted to check the, I'd have to
check the version numbers.

00:48:04.170 --> 00:48:07.420
But is it possible that the reason you can't
see the preview is because the final version

00:48:07.420 --> 00:48:09.160
got released a couple days ago?

00:48:09.160 --> 00:48:11.530
&gt;&gt;Joe: I think actually I can answer this
question.

00:48:11.530 --> 00:48:14.390
&gt;&gt;Male #2: Well, it's the preview of R21.

00:48:14.390 --> 00:48:15.390
&gt;&gt;Joe: [indistinct] released.

00:48:15.390 --> 00:48:16.390
Yeah.

00:48:16.390 --> 00:48:18.420
&gt;&gt;Male #2: This is, I currently have 20 point
zero point three.

00:48:18.420 --> 00:48:19.420
&gt;&gt;Joe: Right.

00:48:19.420 --> 00:48:21.780
&gt;&gt;Male #2: of the SDK manager tool.

00:48:21.780 --> 00:48:25.890
&gt;&gt;Joe: In general, so the tools guys, I actually
work with them quite a bit.

00:48:25.890 --> 00:48:26.890
&gt;&gt;male #2: OK.

00:48:26.890 --> 00:48:29.430
&gt;&gt;Joe: The previews, that doesn't actually
get released through the SDK manager.

00:48:29.430 --> 00:48:30.430
&gt;&gt;Male #2: OK.

00:48:30.430 --> 00:48:32.270
&gt;&gt;Joe: You have to go to tools.Android.com.

00:48:32.270 --> 00:48:33.270
[inaudible]

00:48:33.270 --> 00:48:34.270
&gt;&gt;male #2: Right.

00:48:34.270 --> 00:48:36.230
That's how I got from the, this is on that
new preview button.

00:48:36.230 --> 00:48:38.570
It said, log in and you get Tools through
that.

00:48:38.570 --> 00:48:39.570
For the previews.

00:48:39.570 --> 00:48:42.030
[Hangout dings]
&gt;&gt;Joe: Yeah, I think, I believe they're working

00:48:42.030 --> 00:48:45.780
on a new feature to let you get the preview
through the SDK manager but I don't think

00:48:45.780 --> 00:48:46.780
that's quite working yet.

00:48:46.780 --> 00:48:47.780
&gt;&gt;male #2: OK.

00:48:47.780 --> 00:48:48.780
That's probably why.

00:48:48.780 --> 00:48:51.690
&gt;&gt;Joe: I know they've been busy working on
the 20 oh three release.

00:48:51.690 --> 00:48:53.119
Because of that caching problem that you noticed.[inaudible]

00:48:53.119 --> 00:48:54.119
&gt;&gt;Male #2: Right.

00:48:54.119 --> 00:48:55.119
When twenty Oh three is out.

00:48:55.119 --> 00:48:56.119
OK.

00:48:56.119 --> 00:48:59.120
&gt;&gt;Joe: They've been very busy with that and
so I'm not surprised that there's no 21 preview

00:48:59.120 --> 00:49:00.120
out at the moment.

00:49:00.120 --> 00:49:01.320
So just stay tuned.

00:49:01.320 --> 00:49:02.320
&gt;&gt;Male #2: OK.

00:49:02.320 --> 00:49:05.650
&gt;&gt;Joe: I know those guys are working on quite
a few things.

00:49:05.650 --> 00:49:07.290
So yeah, stay tuned on the Tools site.

00:49:07.290 --> 00:49:08.290
That's where they'll announce it.

00:49:08.290 --> 00:49:09.290
&gt;&gt;Male #2: Yeah.

00:49:09.290 --> 00:49:10.640
Well the Tools site still listsâ€”

00:49:10.640 --> 00:49:13.360
&gt;&gt;Joe: And they'll announce it and then you
might be able to see it in the SDK manager

00:49:13.360 --> 00:49:14.360
site.

00:49:14.360 --> 00:49:17.260
&gt;&gt;Male #2: The Tools site still lists R19
as the latest release.

00:49:17.260 --> 00:49:18.260
[laughs] [inaudible]

00:49:18.260 --> 00:49:20.000
&gt;&gt;Joe: [inaudible] So, you know.

00:49:20.000 --> 00:49:22.650
&gt;&gt;Male #2: That's a, pass it along.

00:49:22.650 --> 00:49:23.650
To update theâ€”

00:49:23.650 --> 00:49:26.440
&gt;&gt;Joe: They're trying to do too many things
at once there.

00:49:26.440 --> 00:49:28.990
&gt;&gt;Male #2: Probably, OK thanks.

00:49:28.990 --> 00:49:32.040
&gt;&gt;Joe: Sure, thanks for the question.

00:49:32.040 --> 00:49:33.040
Alright.

00:49:33.040 --> 00:49:34.040
Let's see.

00:49:34.040 --> 00:49:35.040
We've gotâ€”

00:49:35.040 --> 00:49:36.040
&gt;&gt;Trevor: Nick.

00:49:36.040 --> 00:49:37.520
&gt;&gt;Joe: a few more minutes to do questions.

00:49:37.520 --> 00:49:38.520
&gt;&gt;Trevor: Yeah.

00:49:38.520 --> 00:49:42.540
&gt;&gt;Joe: And Nick from Chicago asks, "Is it
possible to play audio backward?"

00:49:42.540 --> 00:49:46.140
Wow, that's a very interesting question.

00:49:46.140 --> 00:49:48.800
&gt;&gt;Trevor: Listening for hidden messages in
songs.

00:49:48.800 --> 00:49:49.800
[laughter]

00:49:49.800 --> 00:49:53.400
&gt;&gt;Joe: James, you wanna tackle that one.

00:49:53.400 --> 00:49:56.770
Do we have an idea of that one, or?

00:49:56.770 --> 00:49:57.890
We gonna have to punt on this?

00:49:57.890 --> 00:49:58.890
[laughter]

00:49:58.890 --> 00:49:59.890
&gt;&gt;James: [inaudible], Reto,

00:49:59.890 --> 00:50:02.090
&gt;&gt;Reto: I can answer it partially.

00:50:02.090 --> 00:50:06.970
You can play audio backwards if you're using
the AudioRecord and AudioPlay mechanisms.

00:50:06.970 --> 00:50:08.880
I don't think you can do it using the MediaRecorder.

00:50:08.880 --> 00:50:14.940
But if you're using the raw web files then
you can just flip the bits and play everything

00:50:14.940 --> 00:50:15.940
in reverse order.

00:50:15.940 --> 00:50:16.940
&gt;&gt;Joe: Alright.

00:50:16.940 --> 00:50:19.120
Reto says it is possible.

00:50:19.120 --> 00:50:20.380
So I believe him.

00:50:20.380 --> 00:50:22.631
But only with which particular class?

00:50:22.631 --> 00:50:23.880
&gt;&gt;Reto: The AudioRecord and AudioPlayback.

00:50:23.880 --> 00:50:26.790
So that's for raw web audio, effectively.

00:50:26.790 --> 00:50:29.370
So you can't just play an arbitrary song.

00:50:29.370 --> 00:50:33.460
It needs to effectively be something you have
recorded with no encoding.

00:50:33.460 --> 00:50:34.530
&gt;&gt;Joe: Got it.

00:50:34.530 --> 00:50:36.580
So unencoded audio.

00:50:36.580 --> 00:50:39.120
Probably encoded audio you're gonna be out
of luck.

00:50:39.120 --> 00:50:41.370
You have to decode it first, probably.

00:50:41.370 --> 00:50:42.370
Alright.

00:50:42.370 --> 00:50:43.370
Great.

00:50:43.370 --> 00:50:44.550
Nice question there.

00:50:44.550 --> 00:50:45.670
Very interesting.

00:50:45.670 --> 00:50:52.380
Uh, "RedneckRepublican" from Texas is joining
us and says "I see low level media API as

00:50:52.380 --> 00:50:55.630
a good opportunity to save power on host devices.

00:50:55.630 --> 00:50:59.720
Do we have any tips to make good use of the
API to do so.

00:50:59.720 --> 00:51:05.609
Also is there a away to offload some pertaining
work to the GPU when using the low level,

00:51:05.609 --> 00:51:06.609
the low media API?"

00:51:06.609 --> 00:51:07.609
Uh.

00:51:07.609 --> 00:51:08.609
Good question.

00:51:08.609 --> 00:51:09.640
I see James shaking his head.

00:51:09.640 --> 00:51:12.270
Do you have a answer to that one?

00:51:12.270 --> 00:51:24.231
&gt;&gt;James: So, for this low-level [clears throat]
media API, I think one of the interesting

00:51:24.231 --> 00:51:31.970
point is like, how to find out what's the
battery consumption when you use the low level

00:51:31.970 --> 00:51:38.690
media API versus the high level API we used
to have.

00:51:38.690 --> 00:51:39.690
Um.

00:51:39.690 --> 00:51:49.780
One, if you want to do like some filtering
applied to this decoder output, definitely

00:51:49.780 --> 00:51:55.890
you can leverage the GPU to do some image
processing so that you can save some power.

00:51:55.890 --> 00:52:03.349
In addition to that, you can for example,
if you are writing a streaming application,

00:52:03.349 --> 00:52:08.710
you can do smart things like do better buffering.

00:52:08.710 --> 00:52:16.390
In terms of using the default buffering mechanism
from the media framework.

00:52:16.390 --> 00:52:26.460
So that you can for example, turn off the
radio for better radio usage.

00:52:26.460 --> 00:52:28.480
So that you can save some time.

00:52:28.480 --> 00:52:36.930
Because for streaming applications, if you
try to get as much as data, as much as possible

00:52:36.930 --> 00:52:44.599
at once, and then shut down the radio, and
then after some time you turn on radio and

00:52:44.599 --> 00:52:45.599
then do it again.

00:52:45.599 --> 00:52:46.980
This can save the power.

00:52:46.980 --> 00:52:49.390
So, this is like, a demand issue.

00:52:49.390 --> 00:52:52.620
You are using low level media APIs.

00:52:52.620 --> 00:52:59.599
On the other hand, this low level media API
because it introduces some like traffic between

00:52:59.599 --> 00:53:08.080
the GNI layer and the java layer, so you have
some additional overhead compared to the previous

00:53:08.080 --> 00:53:10.580
high level API.

00:53:10.580 --> 00:53:12.910
So it's kind of a tradeoff.

00:53:12.910 --> 00:53:25.910
If you write a application um, like, uh, a
better or smarter way than probably you can

00:53:25.910 --> 00:53:29.650
gain in terms of battery consumption.

00:53:29.650 --> 00:53:31.500
&gt;&gt;Trevor: Yeah.

00:53:31.500 --> 00:53:33.359
&gt;&gt;Joe: OK.

00:53:33.359 --> 00:53:34.359
Great.

00:53:34.359 --> 00:53:35.359
Thanks.

00:53:35.359 --> 00:53:36.359
Uh.

00:53:36.359 --> 00:53:37.650
Anymore Hangout questions?

00:53:37.650 --> 00:53:43.290
&gt;&gt;Male Engineer: Um, not, actually, we do
have one from Jonathan.

00:53:43.290 --> 00:53:45.470
I'm gonna put him on in a second.

00:53:45.470 --> 00:53:49.070
But why don't you go ahead and answer one
from the Moderator page and I'll put Jonathan

00:53:49.070 --> 00:53:50.070
on next.

00:53:50.070 --> 00:53:51.070
&gt;&gt;Joe: Sounds great.

00:53:51.070 --> 00:53:56.550
So we've got Robin from Georgia who asks,
"I have a live audio feed that I'd like to

00:53:56.550 --> 00:54:01.520
stream to Android apps, desktop web browsers
and iOS apps."

00:54:01.520 --> 00:54:04.250
The Multiplatform audio feed.

00:54:04.250 --> 00:54:09.859
"Do you have a suggestion for a common codec
that could be used if any?"

00:54:09.859 --> 00:54:13.260
I'm not familiar enough with audio formats
to answer that one.

00:54:13.260 --> 00:54:16.030
Anybody else got a?

00:54:16.030 --> 00:54:17.420
&gt;&gt;Trevor: Well.

00:54:17.420 --> 00:54:18.420
[laughter]

00:54:18.420 --> 00:54:26.680
&gt;&gt;James: Well, for audio streaming you can
come with Android devices like they are multiple

00:54:26.680 --> 00:54:28.849
audio codecs are supported.

00:54:28.849 --> 00:54:33.690
Like AAC, and AMR narrow band, wide band.

00:54:33.690 --> 00:54:36.920
Those can be used for streaming applications.

00:54:36.920 --> 00:54:38.540
&gt;&gt;Trevor: Yeah.

00:54:38.540 --> 00:54:42.910
I think the constraining factor is not gonna
be the desktop.

00:54:42.910 --> 00:54:47.010
Pretty much any audio format you find you'll
be able to play somehow on a desktop.

00:54:47.010 --> 00:54:48.980
The tricky part is mobile devices.

00:54:48.980 --> 00:54:51.770
Because they have limited capabilities.

00:54:51.770 --> 00:54:53.109
And they rely on hardware decoding.

00:54:53.109 --> 00:54:55.880
Which means a lot of times you need to have
hardware support.

00:54:55.880 --> 00:55:02.180
So take a, I don't think anybody in this room
is, can really speak as to what codecs iOS

00:55:02.180 --> 00:55:03.180
supports.

00:55:03.180 --> 00:55:09.320
But on Android, I think, yeah, like you said,
AMR and AAC both have pretty wide support

00:55:09.320 --> 00:55:10.710
if I remember correctly.

00:55:10.710 --> 00:55:13.440
So both of those are a safe bet.

00:55:13.440 --> 00:55:17.840
And then from there, find one that works on
iOS.

00:55:17.840 --> 00:55:19.280
And the desktop won't be a problem.

00:55:19.280 --> 00:55:20.280
&gt;&gt;Joe: Great.

00:55:20.280 --> 00:55:21.280
Good answer there.

00:55:21.280 --> 00:55:22.280
[inaudible]

00:55:22.280 --> 00:55:25.040
&gt;&gt;Male Engineer: Alright, if you guys are
ready for Hangout then I'm gonna go ahead

00:55:25.040 --> 00:55:26.050
and put Jonathan on.

00:55:26.050 --> 00:55:28.590
&gt;&gt;Trevor: Right, and this'll probably be our
last question I suspect.

00:55:28.590 --> 00:55:29.770
&gt;&gt;Joe: Right.

00:55:29.770 --> 00:55:31.540
Go ahead Jonathan.

00:55:31.540 --> 00:55:39.220
&gt;&gt;Jonathan: Hello, I need to build an application
that reacts to the user input by changing

00:55:39.220 --> 00:55:40.220
the music.

00:55:40.220 --> 00:55:48.380
And for that I have several music files that
I need to somehow either switch seamlessly

00:55:48.380 --> 00:55:55.140
from one to another in a registered manner
so they're, so generally I need to trick the

00:55:55.140 --> 00:56:00.520
user in to believing, and into not noticing
that I have changed from one music track to

00:56:00.520 --> 00:56:01.520
another.

00:56:01.520 --> 00:56:04.359
Since they differ in very small details.

00:56:04.359 --> 00:56:09.359
I was wondering what was the best way, if
at all, that I can implement that?

00:56:09.359 --> 00:56:12.780
&gt;&gt;Trevor: I think this is sort of related
to the question earlier about how to cross-fade

00:56:12.780 --> 00:56:13.830
music as well.

00:56:13.830 --> 00:56:14.830
&gt;&gt;Jonathan: yes.

00:56:14.830 --> 00:56:17.640
&gt;&gt;Trevor: Was that your question or was that
somebody else?

00:56:17.640 --> 00:56:19.540
&gt;&gt;Jonathan: That was not my question.

00:56:19.540 --> 00:56:23.940
But this was a good group of questions to
listen in on.

00:56:23.940 --> 00:56:24.940
&gt;&gt;Trevor: Right.

00:56:24.940 --> 00:56:27.060
So James, do you have any feedback on that?

00:56:27.060 --> 00:56:28.980
&gt;&gt;James: Right.

00:56:28.980 --> 00:56:30.691
I can provide you a hint.

00:56:30.691 --> 00:56:33.839
You can try it out and see whether it works
for you.

00:56:33.839 --> 00:56:39.880
Basically we, also in Jellybean we publish
the API, allows you to do gapless playback

00:56:39.880 --> 00:56:42.589
for like, audio.

00:56:42.589 --> 00:56:43.589
You can try it out.

00:56:43.589 --> 00:56:47.470
The API should be available in MediaPlayer.java
class.

00:56:47.470 --> 00:56:49.730
Try it out.

00:56:49.730 --> 00:56:51.599
Let us know your feedback.

00:56:51.599 --> 00:56:52.599
Thank you.

00:56:52.599 --> 00:56:54.270
&gt;&gt;Jonathan: Thank you very much.

00:56:54.270 --> 00:56:56.000
&gt;&gt;Trevor: That's more for gapless though.

00:56:56.000 --> 00:56:58.359
So playing one song and immediately cutting
to the other, right?

00:56:58.359 --> 00:56:59.359
&gt;&gt;James: Yeah.

00:56:59.359 --> 00:57:01.930
&gt;&gt;Trevor: Is there any way to do a cross-fade
or is that not possible?

00:57:01.930 --> 00:57:07.010
&gt;&gt;James: Cross-fade as far as I know, currently
no.

00:57:07.010 --> 00:57:08.080
Not possible.

00:57:08.080 --> 00:57:09.140
&gt;&gt;Trevor: OK.

00:57:09.140 --> 00:57:10.210
&gt;&gt;Joe: OK.

00:57:10.210 --> 00:57:11.810
&gt;&gt;Jonathan: Thank you.

00:57:11.810 --> 00:57:12.880
&gt;&gt;Joe: Great.

00:57:12.880 --> 00:57:15.290
Thanks for the question.

00:57:15.290 --> 00:57:17.840
And with that I think we're out of time.

00:57:17.840 --> 00:57:20.950
And do you wanna give a little bit of a preview
for what we've got on tap next week?

00:57:20.950 --> 00:57:21.950
&gt;&gt;Trevor: Indeed.

00:57:21.950 --> 00:57:25.320
So for those of you who are joining us for
the first time, we are on the air every Wednesday

00:57:25.320 --> 00:57:27.460
at two pm Pacific time.

00:57:27.460 --> 00:57:32.850
So take a look at, actually I guess our Google
plus page is the best place to find us.

00:57:32.850 --> 00:57:36.470
Developers.Android, or, developer.Android.com
slash plus.

00:57:36.470 --> 00:57:37.470
I believe it's just plural.

00:57:37.470 --> 00:57:38.470
There's only one.

00:57:38.470 --> 00:57:39.470
&gt;&gt;Joe: Right.

00:57:39.470 --> 00:57:40.470
Always.

00:57:40.470 --> 00:57:41.470
&gt;&gt;Trevor: Anyway.

00:57:41.470 --> 00:57:42.470
Yeah, developer.Android.com slash plus.

00:57:42.470 --> 00:57:44.920
You can find links to each broadcast as well
as the Moderator page.

00:57:44.920 --> 00:57:48.339
Next week we will have folks from the Android
security team on hand.

00:57:48.339 --> 00:57:49.960
Including Kenny Root.

00:57:49.960 --> 00:57:53.010
Who will be able to answer all of your questions
about Android security.

00:57:53.010 --> 00:57:55.060
So be sure to join us next week.

00:57:55.060 --> 00:57:56.060
&gt;&gt;Joe: Great.

00:57:56.060 --> 00:57:57.060
&gt;&gt;Trevor: Alright.

00:57:57.060 --> 00:57:58.860
With that, I think that's it.

00:57:58.860 --> 00:57:59.860
&gt;&gt;Joe: Great.

00:57:59.860 --> 00:58:00.860
Thanks for joining us.

00:58:00.860 --> 00:58:01.860
See you next week.

00:58:01.860 --> 00:58:02.860
&gt;&gt;Trevor: Alright.

00:58:02.860 --> 00:58:03.860
See you all next week.

00:58:03.860 --> 00:58:04.860
Oh, actually, one last thing.

00:58:04.860 --> 00:58:05.860
&gt;&gt;Joe: Uh-oh.

00:58:05.860 --> 00:58:09.690
&gt;&gt;Trevor: Thank you to Daniel Pham our engineer
as well as Reto Meier who is the producer

00:58:09.690 --> 00:58:10.990
for the show.

00:58:10.990 --> 00:58:12.970
And once again, my name is Trevor Johns.

00:58:12.970 --> 00:58:14.070
&gt;&gt;Joe: I'm Joe Fernandez.

00:58:14.070 --> 00:58:15.070
&gt;&gt;Trevor: And

00:58:15.070 --> 00:58:16.070
&gt;&gt;James: James.

00:58:16.070 --> 00:58:17.230
&gt;&gt;Trevor: A very special thank you to our
guest.

00:58:17.230 --> 00:58:18.230
So, yes.

00:58:18.230 --> 00:58:19.230
Thank you James.

00:58:19.230 --> 00:58:20.230
Right.

00:58:20.230 --> 00:58:21.430
Well, I think that's it.

00:58:21.430 --> 00:58:22.660
See you all next week.

00:58:22.660 --> 00:58:24.130
&gt;&gt;Joe: Take it easy, thank you.

