WEBVTT
Kind: captions
Language: en

00:00:01.217 --> 00:00:03.050
MEGHAN DESAI: Developers
using Bluetooth Low

00:00:03.050 --> 00:00:05.140
Energy have a tough time today.

00:00:05.140 --> 00:00:07.370
The stability is
inconsistent, and it

00:00:07.370 --> 00:00:09.240
burns through the
battery, which ultimately

00:00:09.240 --> 00:00:12.340
leads to your users are
unhappy with your app.

00:00:12.340 --> 00:00:15.400
The good news is that at
Android l we're fixing this.

00:00:15.400 --> 00:00:16.280
My name is Meghan.

00:00:16.280 --> 00:00:18.330
I'm a product manager
on the Android team,

00:00:18.330 --> 00:00:20.810
and I'm here to tell you
about two key improvements,

00:00:20.810 --> 00:00:23.559
peripheral mode and
improved scanning.

00:00:23.559 --> 00:00:25.225
Bluetooth Low Energy
is a low-power form

00:00:25.225 --> 00:00:26.490
of Bluetooth communications.

00:00:26.490 --> 00:00:29.430
It allows devices like your
Android phones and tablets

00:00:29.430 --> 00:00:31.690
to communicate with
peripherals like fitness bands,

00:00:31.690 --> 00:00:33.170
or Bluetooth beacons.

00:00:33.170 --> 00:00:34.960
Your Android phone
in central mode

00:00:34.960 --> 00:00:38.040
can scan for advertisement
broadcast from peripherals,

00:00:38.040 --> 00:00:41.910
and it can also form connections
to exchange additional data.

00:00:41.910 --> 00:00:45.130
Bluetooth Low Energy scans
first landed in Android 4.3,

00:00:45.130 --> 00:00:46.810
and one of the
biggest drawbacks was

00:00:46.810 --> 00:00:50.020
that scanning prevents a
device from going into standby.

00:00:50.020 --> 00:00:52.970
If your app needs to scan
frequently or constantly,

00:00:52.970 --> 00:00:54.840
say for nearby
Bluetooth beacons,

00:00:54.840 --> 00:00:57.530
preventing your user's devices
from going into standby

00:00:57.530 --> 00:00:59.570
will kill their battery.

00:00:59.570 --> 00:01:03.290
And trust me, no one likes an
app that drains their battery.

00:01:03.290 --> 00:01:04.900
In order to address
this problem,

00:01:04.900 --> 00:01:07.570
we have offloaded scanning to
the background in a way that

00:01:07.570 --> 00:01:11.940
allows the device to enter into
standby when it isn't detecting

00:01:11.940 --> 00:01:14.130
advertisements from
nearby devices.

00:01:14.130 --> 00:01:16.750
But at any given part
of your user's day,

00:01:16.750 --> 00:01:19.570
their device may be bombarded
with advertisement packets

00:01:19.570 --> 00:01:22.200
from the myriad of
devices in their vicinity.

00:01:22.200 --> 00:01:25.010
This would still prevent the
device from entering standby.

00:01:25.010 --> 00:01:27.260
To address that,
we've added new APIs

00:01:27.260 --> 00:01:30.640
that make your scanning
even more efficient.

00:01:30.640 --> 00:01:32.830
These APIs allow you
to specify filters

00:01:32.830 --> 00:01:35.520
to reduce the number of
potential advertisement packets

00:01:35.520 --> 00:01:37.670
your application
needs to process.

00:01:37.670 --> 00:01:39.780
You can set filters
on specific parts

00:01:39.780 --> 00:01:43.760
of the packet like service UUID,
service data, and manufacturer

00:01:43.760 --> 00:01:44.670
data.

00:01:44.670 --> 00:01:47.260
With these filters in
place, your user's device

00:01:47.260 --> 00:01:50.200
but only makeup on
standby and tell your app

00:01:50.200 --> 00:01:53.160
when it finds a packet
matching your filters.

00:01:53.160 --> 00:01:55.020
You only get notified
if an Android finds

00:01:55.020 --> 00:01:57.740
a nearby device you're
really interested in.

00:01:57.740 --> 00:02:00.310
Your user's device will keep
scanning in the background

00:02:00.310 --> 00:02:03.720
indefinitely until you
stop the scan manually.

00:02:03.720 --> 00:02:07.050
But your user's device may also
be connected to other devices,

00:02:07.050 --> 00:02:08.509
like a Bluetooth headset.

00:02:08.509 --> 00:02:10.539
Starting in the L
release, Android

00:02:10.539 --> 00:02:14.180
will optimize and balance
scanning with other activities

00:02:14.180 --> 00:02:17.400
and power based on your request.

00:02:17.400 --> 00:02:20.170
You can request to have
Android scan with low latency.

00:02:20.170 --> 00:02:21.920
This will increase
how quickly you

00:02:21.920 --> 00:02:23.990
detect a device you
are interested in when

00:02:23.990 --> 00:02:25.430
it comes within range.

00:02:25.430 --> 00:02:28.490
But even background
scanning consumes power,

00:02:28.490 --> 00:02:31.490
and scanning more frequently
will consume more power.

00:02:31.490 --> 00:02:33.810
If detecting the other
device is not time critical,

00:02:33.810 --> 00:02:36.560
like when the phone is in
standby in the user's pocket,

00:02:36.560 --> 00:02:41.000
you can ask Android to scan
less frequently and save power.

00:02:41.000 --> 00:02:43.370
We've added peripheral mode too.

00:02:43.370 --> 00:02:46.210
An Android device can now
act as a Bluetooth Low Energy

00:02:46.210 --> 00:02:47.180
peripheral.

00:02:47.180 --> 00:02:49.200
It can broadcast
advertisement packets

00:02:49.200 --> 00:02:52.500
and form data connections
with other BLE devices.

00:02:52.500 --> 00:02:56.170
In fact, your apps can specify
the contents of the broadcast

00:02:56.170 --> 00:02:59.710
packet like service UUID,
service data, and manufacturer

00:02:59.710 --> 00:03:00.680
data.

00:03:00.680 --> 00:03:03.680
This allows your app to produce
more meaningful advertisement

00:03:03.680 --> 00:03:05.740
packets for your use case.

00:03:05.740 --> 00:03:07.670
But the space in an
advertisement package

00:03:07.670 --> 00:03:10.810
is limited if another app
has already filled it up,

00:03:10.810 --> 00:03:13.880
then there's no space for
your app's packet contents.

00:03:13.880 --> 00:03:17.310
To fix this problem, Android
now allows multiple apps

00:03:17.310 --> 00:03:19.150
to advertise
concurrently, allowing

00:03:19.150 --> 00:03:21.810
each app its own packet.

00:03:21.810 --> 00:03:23.810
If your app needs to
advertise more frequently

00:03:23.810 --> 00:03:26.170
to enable other devices
to detect it quicker,

00:03:26.170 --> 00:03:28.230
you can request low latency.

00:03:28.230 --> 00:03:29.950
Of course, advertising
more frequently

00:03:29.950 --> 00:03:31.640
will consume more power.

00:03:31.640 --> 00:03:33.870
If your use case allows
advertising less frequently,

00:03:33.870 --> 00:03:35.770
you can request low power.

00:03:35.770 --> 00:03:37.990
Just like with
scanning, Android will

00:03:37.990 --> 00:03:40.700
optimize how often to
transmit your advertisement

00:03:40.700 --> 00:03:43.860
packets, balancing power and
other demands on Bluetooth,

00:03:43.860 --> 00:03:47.294
such as scanning or a
Bluetooth audio connection.

00:03:47.294 --> 00:03:49.460
Now, try out our improved
scanning a peripheral mode

00:03:49.460 --> 00:03:50.890
support for yourself.

00:03:50.890 --> 00:03:52.800
Thanks for watching.

