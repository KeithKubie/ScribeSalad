WEBVTT
Kind: captions
Language: en

00:00:09.690 --> 00:00:11.260
PAUL KINLAN: Hello, everyone.

00:00:11.260 --> 00:00:12.505
My name is Paul Kinlan.

00:00:12.505 --> 00:00:13.780
This is me.

00:00:13.780 --> 00:00:17.630
I'm a Chrome Developer
advocate on the mobile web team

00:00:17.630 --> 00:00:18.870
here at Google.

00:00:18.870 --> 00:00:21.500
And you can find me in all
the normal places, on Twitter,

00:00:21.500 --> 00:00:25.950
Google+, and GitHub, and
a couple of other places.

00:00:25.950 --> 00:00:27.802
I'm actually really
excited to be in Korea.

00:00:27.802 --> 00:00:29.260
This is the furthest
east I've ever

00:00:29.260 --> 00:00:32.852
been in the world,
which is pretty cool.

00:00:32.852 --> 00:00:34.810
And we've only been here
for two or three days,

00:00:34.810 --> 00:00:37.090
and we hope to go and
explore a little bit more

00:00:37.090 --> 00:00:41.110
over the weekend, before
we move on to Tokyo.

00:00:41.110 --> 00:00:44.824
And before I get
into the talk itself,

00:00:44.824 --> 00:00:46.240
a lot of the reason
why we're here

00:00:46.240 --> 00:00:48.680
is to understand more about
the Korean market, what

00:00:48.680 --> 00:00:54.054
it means to be leading the
way in the mobile space.

00:00:54.054 --> 00:00:55.970
What happens here is
going to happen elsewhere

00:00:55.970 --> 00:00:58.590
in the rest of the world in
maybe two or three years' time,

00:00:58.590 --> 00:01:02.760
especially with regards to
4G rollout for networks.

00:01:02.760 --> 00:01:04.560
So what we learn
here, we can hopefully

00:01:04.560 --> 00:01:07.900
apply to the rest of our
outreach work inside Chrome

00:01:07.900 --> 00:01:08.960
Developer Relations.

00:01:08.960 --> 00:01:13.600
So that's why we're here,
and I'll get started.

00:01:13.600 --> 00:01:16.930
So the talk today is called
"Building fast mobile sites

00:01:16.930 --> 00:01:21.887
with PageSpeed Mobile
Insights tool."

00:01:21.887 --> 00:01:23.970
I need to work out how to
start this one properly.

00:01:23.970 --> 00:01:26.940
But the interesting
thing is that we're

00:01:26.940 --> 00:01:30.570
running this kind of
project called #perfmatters.

00:01:30.570 --> 00:01:32.540
We think performance
is a feature

00:01:32.540 --> 00:01:34.760
and should be planned in
from the start of your kind

00:01:34.760 --> 00:01:36.930
of development cycle
and not thought

00:01:36.930 --> 00:01:40.805
of as an addition,
a thing that you

00:01:40.805 --> 00:01:42.430
do when you're testing
your application

00:01:42.430 --> 00:01:44.650
or your website at the
end of your project.

00:01:44.650 --> 00:01:46.290
And the reason why
we think this is

00:01:46.290 --> 00:01:51.040
because the web isn't
getting that much faster.

00:01:51.040 --> 00:01:55.240
OK, the network connection
speed is getting a lot quicker,

00:01:55.240 --> 00:01:57.760
but the actual size of
pages, the page load time,

00:01:57.760 --> 00:01:59.830
is actually only slowing down.

00:01:59.830 --> 00:02:02.040
And you look at these
stats from 2012,

00:02:02.040 --> 00:02:04.430
this was from Google Analytics.

00:02:04.430 --> 00:02:09.500
The average page load time for
mobile was over 10 seconds.

00:02:09.500 --> 00:02:12.090
And then we jump
forward to 2013,

00:02:12.090 --> 00:02:16.780
and we see that, OK, maybe after
three seconds, 57% of consumers

00:02:16.780 --> 00:02:19.540
say they're going to move
on to a different page.

00:02:19.540 --> 00:02:22.620
But the important stat
here is that pages

00:02:22.620 --> 00:02:26.790
are 8% slower than they
were in the summer of 2013.

00:02:26.790 --> 00:02:29.390
So in the space of, say,
three or four months,

00:02:29.390 --> 00:02:31.680
pages have gotten
nearly 10% slower.

00:02:31.680 --> 00:02:33.500
And this is for a
variety of reasons.

00:02:33.500 --> 00:02:36.300
Pages are bigger.

00:02:36.300 --> 00:02:38.290
There's a lot more
things on them.

00:02:38.290 --> 00:02:40.300
And developers probably
don't particularly

00:02:40.300 --> 00:02:41.520
care about performance.

00:02:41.520 --> 00:02:44.590
But it turns out users really
do care about performance.

00:02:44.590 --> 00:02:47.240
They just don't
really tell anyone.

00:02:47.240 --> 00:02:51.870
So the question I
have to ask and why

00:02:51.870 --> 00:02:54.440
I have to think whether this
talk is important for you guys,

00:02:54.440 --> 00:02:57.715
is-- I was looking at
the stats, that Korea

00:02:57.715 --> 00:03:02.400
has got a hugely rolled
out, massive 4G network,

00:03:02.400 --> 00:03:04.310
a percentage for
the population, more

00:03:04.310 --> 00:03:06.380
than any other
country in the world.

00:03:06.380 --> 00:03:10.310
And I need to work out
whether we can get developers

00:03:10.310 --> 00:03:12.450
in Korea actually
caring about performance

00:03:12.450 --> 00:03:14.040
and not just leaving
it to the network

00:03:14.040 --> 00:03:17.920
operators and the phones
to actually get faster.

00:03:17.920 --> 00:03:21.250
Because if we can't get you
guys excited about performance,

00:03:21.250 --> 00:03:23.440
then how do we get the
rest of the world excited

00:03:23.440 --> 00:03:25.650
about performance as well,
especially when it comes

00:03:25.650 --> 00:03:30.290
to getting data down the wire
or down the phone as quick

00:03:30.290 --> 00:03:32.030
as possible?

00:03:32.030 --> 00:03:34.770
So I want to look at this
idea of the life of a request.

00:03:34.770 --> 00:03:38.560
And I've got two columns, a
3G column and a 4G column.

00:03:38.560 --> 00:03:41.370
And I know, looking at
this now, you probably

00:03:41.370 --> 00:03:43.820
can't see the actual numbers.

00:03:43.820 --> 00:03:46.360
But we see that on
average, the round trip

00:03:46.360 --> 00:03:50.720
time for a DNS lookup on a
3G phone is 200 milliseconds,

00:03:50.720 --> 00:03:52.560
so a fifth of a second.

00:03:52.560 --> 00:03:54.490
The actual connection
to the actual host,

00:03:54.490 --> 00:03:56.620
once you've actually
resolved the domain name,

00:03:56.620 --> 00:03:58.980
takes another 200 milliseconds.

00:03:58.980 --> 00:04:00.510
And a HTTP request
itself probably

00:04:00.510 --> 00:04:01.770
takes 200 milliseconds.

00:04:01.770 --> 00:04:03.230
And that's not
including the time

00:04:03.230 --> 00:04:06.300
it might take to boot up the
radio on the phone, which

00:04:06.300 --> 00:04:09.050
for 3G, it can be anywhere
between 200 milliseconds

00:04:09.050 --> 00:04:12.380
and two and a half seconds.

00:04:12.380 --> 00:04:15.020
So when we're trying to get
data and pages down to the user

00:04:15.020 --> 00:04:18.910
as quickly as possible, on
3G, we've got a real problem.

00:04:18.910 --> 00:04:20.820
And then on 4G, it's
actually way better.

00:04:20.820 --> 00:04:23.230
It's 80 milliseconds,
normally, round trip time

00:04:23.230 --> 00:04:24.950
for most operations.

00:04:24.950 --> 00:04:28.002
So you have a lot more
budget to play with.

00:04:28.002 --> 00:04:29.710
But that number is a
little bit of a lie,

00:04:29.710 --> 00:04:31.890
because if we think
about the slide before,

00:04:31.890 --> 00:04:34.920
it said it takes about
10 seconds to load pages

00:04:34.920 --> 00:04:37.380
even on mobile.

00:04:37.380 --> 00:04:40.520
They were obviously taken
in the idea of a 3G network.

00:04:40.520 --> 00:04:44.331
There were no 4G networks
when these stats were out.

00:04:44.331 --> 00:04:46.830
But the actual difference is
maybe 4G is three times faster.

00:04:46.830 --> 00:04:49.360
So you might get about
six or seven seconds.

00:04:49.360 --> 00:04:52.554
This 240 milliseconds is
just one HTTP request.

00:04:52.554 --> 00:04:54.220
And I'm going to talk
a little bit later

00:04:54.220 --> 00:04:56.522
about the size of pages.

00:04:56.522 --> 00:04:58.230
But the reason why
pages are going slower

00:04:58.230 --> 00:05:00.396
is because there's more
content on those pages, more

00:05:00.396 --> 00:05:02.010
requests coming out from them.

00:05:02.010 --> 00:05:05.540
So this 240 milliseconds
is the best case time

00:05:05.540 --> 00:05:07.960
that you would probably get
for every single request that

00:05:07.960 --> 00:05:09.600
comes out of your page.

00:05:09.600 --> 00:05:13.600
And we're going to talk about
what web requests on your page

00:05:13.600 --> 00:05:16.635
mean to the actual page life
cycle in a minute, as well,

00:05:16.635 --> 00:05:18.920
and why we think you
should prioritize

00:05:18.920 --> 00:05:20.450
certain types of
content over others

00:05:20.450 --> 00:05:22.800
and certain types of
requests over others.

00:05:22.800 --> 00:05:24.610
Because at Google,
we actually believe

00:05:24.610 --> 00:05:28.440
you can get a page to a user in
about a second, even on mobile.

00:05:28.440 --> 00:05:31.500
And I know Paul Irish alluded
to it earlier on in the DevTools

00:05:31.500 --> 00:05:33.590
talk, is we think it
is possible for you

00:05:33.590 --> 00:05:35.800
to build experiences
on the web which

00:05:35.800 --> 00:05:38.070
are 10 times faster than
they are today on mobile.

00:05:38.070 --> 00:05:41.400
So getting content
out within one second.

00:05:41.400 --> 00:05:43.550
And hopefully,
with this talk, we

00:05:43.550 --> 00:05:45.540
will show you how you
can start to do that,

00:05:45.540 --> 00:05:48.460
or how you can think
about planning to do that.

00:05:48.460 --> 00:05:53.950
So how can we make
fast mobile sites?

00:05:53.950 --> 00:05:55.160
That works.

00:05:55.160 --> 00:05:58.110
I had a big spelling mistake
in this about five minutes ago,

00:05:58.110 --> 00:06:00.200
so I'm just trying to
make sure this is correct.

00:06:00.200 --> 00:06:03.760
We want to show you today
how you can make fast sites.

00:06:03.760 --> 00:06:11.050
We've developed a tool called
PageSpeed Mobile Insights.

00:06:11.050 --> 00:06:13.350
I don't know whether any of
you know about PageSpeed.

00:06:13.350 --> 00:06:15.560
Does anyone know
about PageSpeed?

00:06:15.560 --> 00:06:18.250
One or two people, a few people.

00:06:18.250 --> 00:06:21.490
So the PageSpeed team is part
of the Making the Web Fast Team.

00:06:21.490 --> 00:06:24.060
They want to make the
web as fast as possible,

00:06:24.060 --> 00:06:26.550
make it easy for developers
to build quick sites,

00:06:26.550 --> 00:06:29.605
so you don't have to worry
about how to optimize your site.

00:06:29.605 --> 00:06:31.630
But one of the
things that we find

00:06:31.630 --> 00:06:33.830
is that developers,
like we said before,

00:06:33.830 --> 00:06:36.080
don't really care about
performance because they don't

00:06:36.080 --> 00:06:38.340
really know they've
always got a problem.

00:06:38.340 --> 00:06:40.310
And the PageSpeed
Mobile Insights tool

00:06:40.310 --> 00:06:42.740
is designed to show you
that you potentially

00:06:42.740 --> 00:06:46.970
have problems on your site with
regards to a mobile device,

00:06:46.970 --> 00:06:48.512
and then also how
to go and fix them.

00:06:48.512 --> 00:06:50.303
So it doesn't tell you
you've got problems,

00:06:50.303 --> 00:06:52.110
and you need to go and
work out what to do.

00:06:52.110 --> 00:06:53.850
It tries to tell
you exactly what you

00:06:53.850 --> 00:06:57.220
should do to make
your page fast.

00:06:57.220 --> 00:06:58.957
So a couple other
checks, and we're only

00:06:58.957 --> 00:07:01.290
going to cover three or four
of them in this talk today,

00:07:01.290 --> 00:07:05.110
but they're the highest
priority, most critical

00:07:05.110 --> 00:07:06.960
features or kind of
problems that you

00:07:06.960 --> 00:07:10.080
can find on a web page
which directly affect

00:07:10.080 --> 00:07:12.054
the performance
for the end user.

00:07:12.054 --> 00:07:13.720
And they're ordered
kind of in priority.

00:07:13.720 --> 00:07:14.996
Number of redirects.

00:07:14.996 --> 00:07:16.870
We'll talk about what
that means in a minute.

00:07:16.870 --> 00:07:19.090
But basically, any
redirect slows your site

00:07:19.090 --> 00:07:20.430
down significantly.

00:07:20.430 --> 00:07:22.165
Poor compression
and minification.

00:07:22.165 --> 00:07:24.290
You'd be really surprised
about the number of sites

00:07:24.290 --> 00:07:27.630
that don't turn on
compression on their service.

00:07:27.630 --> 00:07:30.700
Scripts, CSS blocking, and
critical rendering path.

00:07:30.700 --> 00:07:31.825
This is relatively complex.

00:07:31.825 --> 00:07:33.449
And we're going to
talk about it later.

00:07:33.449 --> 00:07:36.080
And I know some of you will
be quite familiar with this.

00:07:36.080 --> 00:07:38.670
But we're going to talk about
what it means to basically

00:07:38.670 --> 00:07:41.760
get content visible on the
screen within a second.

00:07:41.760 --> 00:07:45.270
It might not be the entire page
that is loaded within a second,

00:07:45.270 --> 00:07:47.630
but the user has this
perception of performance

00:07:47.630 --> 00:07:51.330
because they see something on
the screen within a second.

00:07:51.330 --> 00:07:53.740
And then there's obviously
usage of caching.

00:07:53.740 --> 00:07:55.400
Caching is important,
but we're not

00:07:55.400 --> 00:07:56.900
going to go into
it today because we

00:07:56.900 --> 00:07:59.150
don't have a huge
amount of time.

00:07:59.150 --> 00:08:02.262
So if you want to have a
play with PageSpeed Insights,

00:08:02.262 --> 00:08:02.970
it's at the link.

00:08:02.970 --> 00:08:04.845
And I will share this
out a little bit later,

00:08:04.845 --> 00:08:07.350
but I'm going to try and
give you a little demo.

00:08:07.350 --> 00:08:09.977
I have prepared this page just
in case the demo doesn't work,

00:08:09.977 --> 00:08:11.310
so I can kind of run through it.

00:08:11.310 --> 00:08:15.400
But essentially, it's a
tool where you put a URL in,

00:08:15.400 --> 00:08:18.551
and it will go off
and analyze the site.

00:08:18.551 --> 00:08:24.450
If you just give me two seconds
while I-- don't do that.

00:08:24.450 --> 00:08:26.760
Break out.

00:08:26.760 --> 00:08:27.930
Jump in.

00:08:27.930 --> 00:08:30.360
And this is basically
the summary of results.

00:08:30.360 --> 00:08:34.679
So HTML5 Rocks is a developer
resource that we own and run.

00:08:34.679 --> 00:08:36.429
And we are basically
trying to tell people

00:08:36.429 --> 00:08:38.780
how to build great mobile sites.

00:08:38.780 --> 00:08:40.510
And one of the things
that you'll find

00:08:40.510 --> 00:08:42.676
is that we need to be a
great mobile site ourselves.

00:08:42.676 --> 00:08:45.209
So we regularly analyze
our site to make sure

00:08:45.209 --> 00:08:47.000
that we're meeting all
the criteria that we

00:08:47.000 --> 00:08:48.776
say developers should follow.

00:08:48.776 --> 00:08:50.650
And as you can see,
we've got kind of a score

00:08:50.650 --> 00:08:54.600
here, 73 out of 100 for
mobile, 89 out of 100--

00:08:54.600 --> 00:08:58.000
let me just zoom in.

00:08:58.000 --> 00:08:59.932
89 out of 100 for desktop.

00:08:59.932 --> 00:09:02.390
It's the mobile one that we're
interested in at the moment.

00:09:02.390 --> 00:09:04.830
And you can basically
see a whole series

00:09:04.830 --> 00:09:06.550
of kind of suggestions
about things

00:09:06.550 --> 00:09:09.940
that the PageSpeed service
has done and detected

00:09:09.940 --> 00:09:11.360
problems with our
site and how we

00:09:11.360 --> 00:09:13.007
should go about resolving them.

00:09:13.007 --> 00:09:15.340
So the first one is eliminate
render-blocking JavaScript

00:09:15.340 --> 00:09:16.080
and CSS.

00:09:16.080 --> 00:09:17.913
And I'm going to dive
into that a little bit

00:09:17.913 --> 00:09:19.080
later about what that means.

00:09:19.080 --> 00:09:20.746
But it's one of the
most critical things

00:09:20.746 --> 00:09:23.380
that you can do to improve
the performance of your site.

00:09:23.380 --> 00:09:26.200
Avoid landing page redirects.

00:09:26.200 --> 00:09:27.120
That's a big one.

00:09:27.120 --> 00:09:28.830
HTML5 Rocks has got
a bit of an issue.

00:09:28.830 --> 00:09:33.120
We do two redirects to get the
user to the correct content,

00:09:33.120 --> 00:09:35.540
which is a problem,
and we need to fix.

00:09:35.540 --> 00:09:37.480
And the server response time.

00:09:37.480 --> 00:09:40.340
If you want to get your site
out to the user within a second,

00:09:40.340 --> 00:09:42.390
you have to deal with
the fact that even on 4G,

00:09:42.390 --> 00:09:46.160
you've probably got 1,000
milliseconds minus the 240

00:09:46.160 --> 00:09:49.720
milliseconds available to kind
of go and build your site.

00:09:49.720 --> 00:09:53.200
So maybe 3/4 of a second to
actually build your site.

00:09:53.200 --> 00:09:55.360
So we're probably OK
on 4G at the moment,

00:09:55.360 --> 00:09:57.740
but on a 3G network,
we only really

00:09:57.740 --> 00:09:59.150
have 200 milliseconds
to actually

00:09:59.150 --> 00:10:03.177
be able to respond with the HTML
from our server to the client.

00:10:03.177 --> 00:10:05.510
And there's a whole set of
other criteria about enabling

00:10:05.510 --> 00:10:07.815
compression, which we're
passing, and we're doing fine.

00:10:07.815 --> 00:10:10.440
So if I was a developer, I'd go
and look at those three or four

00:10:10.440 --> 00:10:12.860
different criteria to
actually go and check.

00:10:12.860 --> 00:10:15.335
Our screen shrunk.

00:10:15.335 --> 00:10:17.100
There we are.

00:10:17.100 --> 00:10:20.355
And obviously, this is
the Korean translation.

00:10:20.355 --> 00:10:22.230
I'm presuming it means
exactly the same thing

00:10:22.230 --> 00:10:24.920
as what I've just
shown you before.

00:10:24.920 --> 00:10:28.410
But it basically
prioritizes the things

00:10:28.410 --> 00:10:30.330
that we think you should fix.

00:10:30.330 --> 00:10:35.390
And I believe I got this right.

00:10:35.390 --> 00:10:39.200
I was looking for Korean
phrases the other day.

00:10:39.200 --> 00:10:42.700
And I found this one,
"Well begun is half done."

00:10:42.700 --> 00:10:43.600
Is that correct?

00:10:43.600 --> 00:10:44.280
AUDIENCE: Yes.

00:10:44.280 --> 00:10:45.550
PAUL KINLAN: OK, good.

00:10:45.550 --> 00:10:46.630
Maybe it's not lying.

00:10:46.630 --> 00:10:50.640
So I think actually
the Korean phrase,

00:10:50.640 --> 00:10:53.070
the way I understand
it, is quite optimistic.

00:10:53.070 --> 00:10:56.730
You do things well at the
start, the rest of the project

00:10:56.730 --> 00:10:58.880
is a lot easier to
complete, basically.

00:10:58.880 --> 00:11:01.120
And in the UK, we have
this thing that says

00:11:01.120 --> 00:11:03.460
"Proper planning prevents
poor performance."

00:11:03.460 --> 00:11:06.790
Actually, it's got a swear word
in between, which I've deleted.

00:11:06.790 --> 00:11:09.320
So it's six P's.

00:11:09.320 --> 00:11:12.690
But we, as a country,
are pretty negative.

00:11:12.690 --> 00:11:14.870
So we basically tell you,
you're doing things wrong,

00:11:14.870 --> 00:11:18.189
not you want do things right.

00:11:18.189 --> 00:11:19.980
I want to say, the
reason why I've got this

00:11:19.980 --> 00:11:22.350
is because the
PageSpeed Insights

00:11:22.350 --> 00:11:24.000
tool is very retrospective.

00:11:24.000 --> 00:11:26.440
The site is live on the internet
and telling you problems

00:11:26.440 --> 00:11:27.525
that you've got.

00:11:27.525 --> 00:11:28.900
And what we really
want you to do

00:11:28.900 --> 00:11:31.340
is take the advice that we're
going to tell you today and use

00:11:31.340 --> 00:11:32.715
it at the start
of your projects,

00:11:32.715 --> 00:11:35.590
so you don't have to worry about
the performance of your site

00:11:35.590 --> 00:11:37.135
so much as the
project progresses

00:11:37.135 --> 00:11:39.100
and as you go to completion.

00:11:39.100 --> 00:11:43.700
And that's how I'm interpreting
this phrase, at least.

00:11:43.700 --> 00:11:45.581
So redirects.

00:11:45.581 --> 00:11:48.080
We think these are one of the
most important kind of issues.

00:11:48.080 --> 00:11:50.270
And I'll tell you
why in a second.

00:11:50.270 --> 00:11:51.770
Obviously, we saw
the result before.

00:11:51.770 --> 00:11:53.745
HTML5 Rocks has got two
different redirects.

00:11:53.745 --> 00:11:59.120
We go from html5rocks.com
to www.html5rocks,

00:11:59.120 --> 00:12:02.230
and then we forward you on to
the language translation site.

00:12:02.230 --> 00:12:05.490
So it's got two different types
of redirects, a domain redirect

00:12:05.490 --> 00:12:08.500
and then a directory redirect.

00:12:08.500 --> 00:12:10.750
And both are not good.

00:12:10.750 --> 00:12:12.850
And if we get rid of
them, we'll actually

00:12:12.850 --> 00:12:16.480
improve the performance of
our site quite significantly.

00:12:16.480 --> 00:12:17.980
The reason why
redirects are bad is

00:12:17.980 --> 00:12:21.420
because they can double latency
because, especially with a DNS

00:12:21.420 --> 00:12:25.590
redirect, which is this, you
basically go from one domain

00:12:25.590 --> 00:12:27.720
and forward them to another.

00:12:27.720 --> 00:12:29.790
So you go from,
say, html5rocks.com

00:12:29.790 --> 00:12:33.030
to www.html5rocks.com.

00:12:33.030 --> 00:12:35.040
Now where this is most
prevalent on the web

00:12:35.040 --> 00:12:37.340
is when a user comes
in on a mobile phone

00:12:37.340 --> 00:12:40.216
to a desktop-based site,
and the server goes,

00:12:40.216 --> 00:12:41.340
we know you're on a mobile.

00:12:41.340 --> 00:12:43.430
We'll directly you
to the m dot site,

00:12:43.430 --> 00:12:45.480
the mobile version of the site.

00:12:45.480 --> 00:12:47.450
Now this is actually
bad because you

00:12:47.450 --> 00:12:50.190
have to do a DNS lookup
at the start, which

00:12:50.190 --> 00:12:54.630
is about on 3G at least,
probably 200 milliseconds.

00:12:54.630 --> 00:12:57.580
Make the TCP connection, which
is another 200 milliseconds.

00:12:57.580 --> 00:12:59.700
You probably won't
get some content,

00:12:59.700 --> 00:13:01.002
but you'll get the redirect.

00:13:01.002 --> 00:13:02.460
And because it's
a different domain

00:13:02.460 --> 00:13:03.960
that you're redirecting
to, you have

00:13:03.960 --> 00:13:06.650
to do another DNS lookup, which
is the same process again.

00:13:06.650 --> 00:13:09.440
It's another 200 milliseconds
for a DNS lookup,

00:13:09.440 --> 00:13:11.284
and then another
200 milliseconds

00:13:11.284 --> 00:13:13.200
to actually make the
connection to the server.

00:13:13.200 --> 00:13:15.610
And then you probably
go and get the content.

00:13:15.610 --> 00:13:17.910
Now we actually have
two different types

00:13:17.910 --> 00:13:20.710
of redirects on
additional HTML5 Rocks.

00:13:20.710 --> 00:13:23.150
The third one is the
directory lookup.

00:13:23.150 --> 00:13:24.470
It's not as slow.

00:13:24.470 --> 00:13:26.530
It's kind of a
little bit better,

00:13:26.530 --> 00:13:28.520
because you get to take
advantage of the fact

00:13:28.520 --> 00:13:31.350
that you don't have to do
another set of DNS resolution,

00:13:31.350 --> 00:13:33.580
and you don't have to
necessarily always have

00:13:33.580 --> 00:13:35.080
to make a new TCP connection.

00:13:35.080 --> 00:13:38.130
You can just pretty much use the
same connection that you're on.

00:13:38.130 --> 00:13:41.550
But you have to have the server
enabled for HTTP pipelining.

00:13:41.550 --> 00:13:45.800
But in our case, we
actually found this here.

00:13:45.800 --> 00:13:48.670
This green line here is
actually a bug in HTML5 Rocks.

00:13:48.670 --> 00:13:51.200
And I think Paul Irish
showed you WebPagetest

00:13:51.200 --> 00:13:52.590
a little earlier on today.

00:13:52.590 --> 00:13:53.560
This is the same tool.

00:13:53.560 --> 00:13:55.532
You put WebPagetest
in, and it tests it

00:13:55.532 --> 00:13:56.990
from all around
the world and shows

00:13:56.990 --> 00:13:59.697
you the latency and the request
time for a number of things.

00:13:59.697 --> 00:14:02.030
And we've actually found a
bug with HTML5 Rocks on this,

00:14:02.030 --> 00:14:04.114
because we send you the
content and then redirect.

00:14:04.114 --> 00:14:05.488
Or we don't send
you the content,

00:14:05.488 --> 00:14:07.170
we generate all the
content and then

00:14:07.170 --> 00:14:10.869
redirect you to something
which is different, again.

00:14:10.869 --> 00:14:11.660
So we've got a bug.

00:14:11.660 --> 00:14:13.536
And we found that,
actually, with this tool.

00:14:13.536 --> 00:14:15.160
Well, redirects are
pretty bad, and you

00:14:15.160 --> 00:14:18.210
should try to ignore them or
try to move away from them.

00:14:18.210 --> 00:14:19.960
Now I understand that
if you're developing

00:14:19.960 --> 00:14:22.974
an application or a site, and
you've already got it live,

00:14:22.974 --> 00:14:25.015
then you're not going to
be able to really change

00:14:25.015 --> 00:14:26.348
the infrastructure of your site.

00:14:26.348 --> 00:14:28.920
It's a big job to go to a
fully responsive design site.

00:14:28.920 --> 00:14:31.660
But if you're starting
a brand new project,

00:14:31.660 --> 00:14:34.170
I really do consider a
responsive based solution,

00:14:34.170 --> 00:14:36.380
even if it's a server
responsive solution--

00:14:36.380 --> 00:14:38.630
and I know there was a
question earlier on today about

00:14:38.630 --> 00:14:41.460
whether you should do
user agent detection.

00:14:41.460 --> 00:14:46.257
Sometimes, it might be the best
of a bad solution, the best

00:14:46.257 --> 00:14:47.840
option in a bad
solution, essentially.

00:14:47.840 --> 00:14:52.820
Because even if you
do a server detection,

00:14:52.820 --> 00:14:53.790
don't do the redirect.

00:14:53.790 --> 00:14:55.510
Send the different content out.

00:14:55.510 --> 00:14:58.858
And as long as you've got the
correct kind of search engine

00:14:58.858 --> 00:15:01.316
headers, then you're not going
to suffer from SEO too much,

00:15:01.316 --> 00:15:05.420
or SEO issues, or Search
Engine Optimization issues.

00:15:05.420 --> 00:15:07.170
But the preference
from Google, and you'll

00:15:07.170 --> 00:15:09.753
see this all across Google, is
go to a fully responsive design

00:15:09.753 --> 00:15:10.610
site.

00:15:10.610 --> 00:15:12.526
But we understand that's
not always practical,

00:15:12.526 --> 00:15:14.910
and sometimes you have to
do things on the server.

00:15:14.910 --> 00:15:16.660
The best thing to do
is just not redirect.

00:15:16.660 --> 00:15:18.076
Have the logic
which separates out

00:15:18.076 --> 00:15:20.290
the two sites behind the
scenes and then serve

00:15:20.290 --> 00:15:22.400
the correct content
to the user that way.

00:15:22.400 --> 00:15:24.150
It's not great, but
it's a better solution

00:15:24.150 --> 00:15:25.760
than the redirect.

00:15:25.760 --> 00:15:28.120
So yeah, save the user's time.

00:15:28.120 --> 00:15:29.200
No redirects.

00:15:29.200 --> 00:15:30.840
If we did this on
HTML5 Rocks, we

00:15:30.840 --> 00:15:33.310
would probably say 300
or 400 milliseconds

00:15:33.310 --> 00:15:34.860
in the standard
request life cycle,

00:15:34.860 --> 00:15:39.830
just by making sure that we do
manage the redirects correctly.

00:15:39.830 --> 00:15:41.950
So compression is
the next subject.

00:15:44.900 --> 00:15:48.390
It's never a really
interesting topic, compression.

00:15:48.390 --> 00:15:50.840
But it's one of those ones
where developers never do it,

00:15:50.840 --> 00:15:51.370
it seems.

00:15:51.370 --> 00:15:52.980
We never seem to care about it.

00:15:52.980 --> 00:15:55.530
And I think you should.

00:15:55.530 --> 00:15:56.290
This is a site.

00:15:56.290 --> 00:15:57.950
This is actually a
UK government site.

00:15:57.950 --> 00:16:00.910
So the NHS, the National
Health Service, has got a site.

00:16:00.910 --> 00:16:03.190
It's not mobile optimized,
and it wouldn't actually

00:16:03.190 --> 00:16:05.398
matter if it was mobile
optimized, because they don't

00:16:05.398 --> 00:16:08.099
follow any of the
basic practices at all.

00:16:08.099 --> 00:16:09.640
So they've got a
whole lot of issues.

00:16:09.640 --> 00:16:10.760
The one that we're going
to talk about right

00:16:10.760 --> 00:16:11.940
now is the compression.

00:16:11.940 --> 00:16:14.230
You probably can't
see it, but there's

00:16:14.230 --> 00:16:18.850
673 kilobytes of
extra content that

00:16:18.850 --> 00:16:21.130
doesn't need to be
downloaded on this site.

00:16:24.840 --> 00:16:25.945
Well, I'll rephrase it.

00:16:25.945 --> 00:16:27.820
It's content that does
need to be downloaded,

00:16:27.820 --> 00:16:30.567
but could be compressed,
and you wouldn't actually

00:16:30.567 --> 00:16:32.150
ever download that
again, essentially,

00:16:32.150 --> 00:16:33.840
that 670 kilobytes.

00:16:33.840 --> 00:16:37.030
That's not far off
from a megabyte's worth

00:16:37.030 --> 00:16:42.609
of extra content which was
needlessly piped down the site.

00:16:42.609 --> 00:16:44.400
Now the interesting
thing is that they also

00:16:44.400 --> 00:16:47.110
have a problem
with minification.

00:16:47.110 --> 00:16:49.470
They don't actually strip
out extraneous content

00:16:49.470 --> 00:16:50.530
from their page.

00:16:50.530 --> 00:16:54.010
So these are CSS files
with extra spaces

00:16:54.010 --> 00:16:57.320
which aren't needed, tabs,
JavaScript with longer variable

00:16:57.320 --> 00:16:59.250
names than need to be.

00:16:59.250 --> 00:17:03.390
PageSpeed Insights will
go through and work out

00:17:03.390 --> 00:17:04.869
potentially how
much data you could

00:17:04.869 --> 00:17:08.099
save by following proper
minification rules.

00:17:08.099 --> 00:17:11.240
And in this case, for the
National Health Service,

00:17:11.240 --> 00:17:14.180
if they had minification
and ignored the compression,

00:17:14.180 --> 00:17:17.280
they could save 150
kilobytes quite quickly,

00:17:17.280 --> 00:17:20.829
which on a 3G network, is
actually quite significant.

00:17:20.829 --> 00:17:23.350
If we go back and we
look at the compression,

00:17:23.350 --> 00:17:25.790
if they turned compression
on as well, that's

00:17:25.790 --> 00:17:29.670
another 600 kilobytes extra that
they save, which, especially

00:17:29.670 --> 00:17:33.480
on 3G-- it's probably
not so bad on 4G--

00:17:33.480 --> 00:17:35.140
is actually a pretty good thing.

00:17:35.140 --> 00:17:37.182
The interesting thing
as well, and we'll

00:17:37.182 --> 00:17:38.640
talk about this
later, is that they

00:17:38.640 --> 00:17:41.140
make about 30 requests per page.

00:17:41.140 --> 00:17:43.100
So there's 30 extra
requests, HTTP requests,

00:17:43.100 --> 00:17:44.475
that have to go
out to the server

00:17:44.475 --> 00:17:46.620
to be processed
for every request.

00:17:46.620 --> 00:17:49.050
And that's not a good thing.

00:17:49.050 --> 00:17:54.899
So our guidance is minify all
CSS, JavaScript, and HTML.

00:17:54.899 --> 00:17:56.440
The minification is
great because you

00:17:56.440 --> 00:17:59.060
don't lose any of the semantic
meaning of the content.

00:17:59.060 --> 00:18:02.260
So the CSS will be the same
CSS, mean the same thing.

00:18:02.260 --> 00:18:04.050
The JavaScript will
mean the same thing

00:18:04.050 --> 00:18:05.700
and execute in the same way.

00:18:05.700 --> 00:18:07.120
And likewise with
the HTML, you're

00:18:07.120 --> 00:18:08.780
just removing
content that doesn't

00:18:08.780 --> 00:18:12.340
need to be sent to the user.

00:18:12.340 --> 00:18:13.930
And our other piece
of advice is turn

00:18:13.930 --> 00:18:16.007
on gzip for all
text-based content.

00:18:16.007 --> 00:18:17.590
You can turn it on
for images, but you

00:18:17.590 --> 00:18:19.492
won't save that much space.

00:18:19.492 --> 00:18:20.950
Normally with text
content, you can

00:18:20.950 --> 00:18:25.280
save in the region of
about 50% of the bandwidth

00:18:25.280 --> 00:18:26.690
that you would send out.

00:18:26.690 --> 00:18:30.434
And just, I suppose,
as a side note,

00:18:30.434 --> 00:18:31.850
I have to say that
a lot of people

00:18:31.850 --> 00:18:33.750
don't actually turn
on compression.

00:18:33.750 --> 00:18:37.940
Httparchive.org, let
me just load it up.

00:18:37.940 --> 00:18:39.610
If you've never
seen HTTP Archive,

00:18:39.610 --> 00:18:50.455
it's a really-- let me
just-- there we are.

00:18:50.455 --> 00:18:51.520
I'll fix that link.

00:18:51.520 --> 00:18:53.650
But HTTP Archive
basically goes out

00:18:53.650 --> 00:18:56.620
and scans probably about
a million URLs once

00:18:56.620 --> 00:18:59.730
a week and indexes
and aggregates

00:18:59.730 --> 00:19:02.200
every single request that
is sent by the browsers

00:19:02.200 --> 00:19:03.320
that they automate.

00:19:03.320 --> 00:19:05.700
And then they produce some
interesting statistics

00:19:05.700 --> 00:19:06.750
off the back of this.

00:19:06.750 --> 00:19:08.914
So they can tell you that
most of the content--

00:19:08.914 --> 00:19:10.580
you can't see that
at the back, but most

00:19:10.580 --> 00:19:12.530
of the content on
the web is images.

00:19:12.530 --> 00:19:14.650
By far and away, the larger
proportion of content

00:19:14.650 --> 00:19:15.567
is images.

00:19:15.567 --> 00:19:17.650
They've got other kind of
really interesting stats

00:19:17.650 --> 00:19:20.890
as well, like the average
individual response

00:19:20.890 --> 00:19:23.770
size being around 95 kilobytes.

00:19:23.770 --> 00:19:29.502
Now here we go.

00:19:29.502 --> 00:19:31.830
Yep.

00:19:31.830 --> 00:19:33.790
That by itself is
not that interesting.

00:19:33.790 --> 00:19:36.760
It's kind of cool that you can
see the average response size.

00:19:36.760 --> 00:19:39.000
But what they also do is
they dump all the data

00:19:39.000 --> 00:19:42.200
into a service
that we run called,

00:19:42.200 --> 00:19:45.612
I think it's-- what
it's called again?

00:19:45.612 --> 00:19:47.070
AUDIENCE: [INAUDIBLE]

00:19:47.070 --> 00:19:49.810
PAUL KINLAN: I can't remember
the name of the project.

00:19:49.810 --> 00:19:54.345
The database which we
can query, not compute.

00:19:54.345 --> 00:19:54.970
Doesn't matter.

00:19:54.970 --> 00:19:55.980
I'll share the link later.

00:19:55.980 --> 00:19:57.604
But essentially,
there's a big database

00:19:57.604 --> 00:20:02.180
where they drop an index
of every single page

00:20:02.180 --> 00:20:05.500
the HTTP Archive analyzes
and every request

00:20:05.500 --> 00:20:07.100
that that page makes.

00:20:07.100 --> 00:20:09.300
So if a page makes
30 requests, we

00:20:09.300 --> 00:20:11.340
have that database
kind of stored.

00:20:11.340 --> 00:20:13.870
And you, as a
normal developer who

00:20:13.870 --> 00:20:15.850
might be interested
in performance,

00:20:15.850 --> 00:20:17.810
can go out and actually
query that information.

00:20:17.810 --> 00:20:19.560
And what I'll do is
I'll share a tweet out

00:20:19.560 --> 00:20:21.880
later around the
name of the service

00:20:21.880 --> 00:20:23.980
and what you can do to do this.

00:20:23.980 --> 00:20:26.880
But I did some of this kind
of basic aggregation before.

00:20:26.880 --> 00:20:30.390
Yesterday it was from
last week's data set.

00:20:30.390 --> 00:20:32.993
And I looked at the CSS
files, the HTML files,

00:20:32.993 --> 00:20:34.650
and the JavaScript files.

00:20:34.650 --> 00:20:38.325
And it's pretty clear that
this 39% of the website that

00:20:38.325 --> 00:20:41.020
don't bother compressing--
or 39% of the requests that

00:20:41.020 --> 00:20:45.090
go out from the browser-- that
when they find the CSS file,

00:20:45.090 --> 00:20:47.680
they'll download the full file,
and it won't be compressed.

00:20:47.680 --> 00:20:49.650
There's no compression
turned on for that.

00:20:49.650 --> 00:20:50.790
That's pretty huge.

00:20:50.790 --> 00:20:55.060
40% of the web doesn't
bother compressing CSS file.

00:20:55.060 --> 00:20:56.800
And HTML is worse.

00:20:56.800 --> 00:21:00.440
Normal pages, index pages that
you go to and navigate around,

00:21:00.440 --> 00:21:03.530
they don't turn compression
on for nearly half of the web.

00:21:03.530 --> 00:21:06.710
That's pretty crazy, especially
when you're on a mobile device.

00:21:06.710 --> 00:21:09.800
Now the interesting thing is
actually, JavaScript is 16%,

00:21:09.800 --> 00:21:13.086
so around about 84% of the
web compresses JavaScript.

00:21:13.086 --> 00:21:14.460
And when you dive
into this, it's

00:21:14.460 --> 00:21:18.260
because a lot of JavaScript
solutions are based on CDNs.

00:21:18.260 --> 00:21:20.930
So Google have got
jQuery and a whole lot

00:21:20.930 --> 00:21:23.260
of other kind of
frameworks hosted on a CDN.

00:21:23.260 --> 00:21:25.820
And those CDNs will make sure
that content is compressed.

00:21:25.820 --> 00:21:28.680
HTML and CSS, normally
if it's your own server,

00:21:28.680 --> 00:21:31.305
you probably haven't
turned the compression on.

00:21:31.305 --> 00:21:32.410
And I think that's crazy.

00:21:32.410 --> 00:21:34.826
In most cases, actually turning
compression on, especially

00:21:34.826 --> 00:21:37.750
in Apache and Nginx, is a
one-line configuration change,

00:21:37.750 --> 00:21:40.000
and it doesn't really impact
the speed of your service

00:21:40.000 --> 00:21:43.270
at all, from a
processing standpoint.

00:21:43.270 --> 00:21:47.080
So we also do a lot of
analysis on PageSpeed Insights

00:21:47.080 --> 00:21:49.030
to scripts and CSS.

00:21:49.030 --> 00:21:52.475
And the specific piece
of analysis that we do

00:21:52.475 --> 00:21:53.850
is a thing called
render-blocking

00:21:53.850 --> 00:21:55.650
JavaScript and CSS.

00:21:55.650 --> 00:21:57.360
It turns out the
way that the browser

00:21:57.360 --> 00:22:00.630
gets JavaScript and
CSS from the server

00:22:00.630 --> 00:22:02.580
has a dramatic impact
on the performance

00:22:02.580 --> 00:22:04.030
of your application.

00:22:04.030 --> 00:22:06.700
And we try and tell
you as a developer

00:22:06.700 --> 00:22:08.720
the things that stop the
layout from happening,

00:22:08.720 --> 00:22:11.180
the things with
regards to your CSS

00:22:11.180 --> 00:22:13.420
and JavaScript which
will cause your page not

00:22:13.420 --> 00:22:15.912
be painted to the
screen quickly.

00:22:15.912 --> 00:22:17.120
And this is Google Analytics.

00:22:17.120 --> 00:22:22.400
Like even some of our services
don't have a great kind of-- we

00:22:22.400 --> 00:22:24.150
don't follow our
guidance is, I suppose,

00:22:24.150 --> 00:22:26.340
what I'm trying to say
in a lot of these cases.

00:22:26.340 --> 00:22:28.840
And we're going to talk about
what render blocking means

00:22:28.840 --> 00:22:31.089
in a minute, or now, in fact.

00:22:31.089 --> 00:22:32.880
I heard a quote, and
I'm trying to find out

00:22:32.880 --> 00:22:33.755
who actually said it.

00:22:33.755 --> 00:22:36.380
But they said the fastest sites
will have no scripts and CSS.

00:22:36.380 --> 00:22:37.320
Which is true.

00:22:37.320 --> 00:22:40.416
If you just send raw HTML
to a service or to a user,

00:22:40.416 --> 00:22:42.290
it's going to be really
quick because there's

00:22:42.290 --> 00:22:43.564
no subsequent requests.

00:22:43.564 --> 00:22:45.730
But you're going to be
pretty bored on the internet.

00:22:45.730 --> 00:22:48.270
There's no interactivity
or anything available.

00:22:48.270 --> 00:22:51.070
And it's going to
look pretty ugly.

00:22:51.070 --> 00:22:54.480
So you have to use JavaScript.

00:22:54.480 --> 00:22:55.750
You have to use CSS.

00:22:55.750 --> 00:22:58.620
And that's where the actual
problems with performance

00:22:58.620 --> 00:23:00.615
and getting data
down to the client

00:23:00.615 --> 00:23:02.990
so that they can use your
website or application actually

00:23:02.990 --> 00:23:04.020
happen.

00:23:04.020 --> 00:23:06.610
So we have this thing called
the critical rendering path.

00:23:06.610 --> 00:23:08.150
And basically,
it's a combination

00:23:08.150 --> 00:23:12.560
of the DOM tree, which
is your HTML structure,

00:23:12.560 --> 00:23:13.890
and the render tree.

00:23:13.890 --> 00:23:15.870
Now this is a little
bit hard to understand,

00:23:15.870 --> 00:23:18.370
and I know people at the back
won't be able to see properly,

00:23:18.370 --> 00:23:21.300
but there's essentially two
core components to the browser.

00:23:21.300 --> 00:23:24.460
There's the DOM structure, which
is, if you look at this section

00:23:24.460 --> 00:23:27.690
here, which is your document,
your HTML element, your head

00:23:27.690 --> 00:23:31.890
title, the body, the structure--
the semantic HTML, essentially,

00:23:31.890 --> 00:23:33.960
that describes the page.

00:23:33.960 --> 00:23:35.670
And then there's
this render tree,

00:23:35.670 --> 00:23:40.160
which is essentially a
combination of the DOM

00:23:40.160 --> 00:23:42.100
tree and the CSS object model.

00:23:42.100 --> 00:23:44.300
Now the CSS object
model is the thing

00:23:44.300 --> 00:23:47.730
that essentially presents
the content from the DOM tree

00:23:47.730 --> 00:23:49.790
to the user.

00:23:49.790 --> 00:23:51.810
And the two have to be
done and complete around

00:23:51.810 --> 00:23:53.851
about the same time,
otherwise you don't actually

00:23:53.851 --> 00:23:54.520
get any content.

00:23:54.520 --> 00:23:56.686
The thing to note about
this and why it's important,

00:23:56.686 --> 00:23:58.840
and why this actually
blocks the rendering,

00:23:58.840 --> 00:24:01.010
is because imagine you've
got a HTML document,

00:24:01.010 --> 00:24:04.420
and there's an image right
at the bottom of the page.

00:24:04.420 --> 00:24:05.891
And that's in the DOM structure.

00:24:05.891 --> 00:24:07.640
It's the last thing
that the browser gets.

00:24:07.640 --> 00:24:09.170
It's at the bottom of the DOM.

00:24:09.170 --> 00:24:12.850
If you have your CSS, your
CSS might actually say,

00:24:12.850 --> 00:24:15.310
that image is hoisted to
the very top of the page

00:24:15.310 --> 00:24:17.260
because it's got the
absolute positioning.

00:24:17.260 --> 00:24:20.090
Use position absolute, 0, 0.

00:24:20.090 --> 00:24:23.350
And it's pushed right
to the top of the page.

00:24:23.350 --> 00:24:26.370
Now if the browser didn't
wait till the DOM was complete

00:24:26.370 --> 00:24:28.549
and the CSS object
model was completed,

00:24:28.549 --> 00:24:31.090
then you would see the image
pop in at the bottom of the page

00:24:31.090 --> 00:24:32.650
and then jump up to
the top of the page,

00:24:32.650 --> 00:24:34.608
and that's not what any
browser vendor actually

00:24:34.608 --> 00:24:35.560
wants to happen.

00:24:35.560 --> 00:24:40.560
So there are these two kind
of competing structures

00:24:40.560 --> 00:24:43.150
inside the browser which you
have to get exactly right.

00:24:43.150 --> 00:24:44.525
And we're going
to talk about how

00:24:44.525 --> 00:24:46.850
you can ruin that
experience completely.

00:24:46.850 --> 00:24:51.834
So this is the HTML5 parser
roughly as it's defined.

00:24:51.834 --> 00:24:53.750
I say roughly as it's
defined because it's not

00:24:53.750 --> 00:24:56.530
exactly how browsers work.

00:24:56.530 --> 00:24:59.470
But essentially, the browser
or the document parser

00:24:59.470 --> 00:25:01.640
will go through all
the HTML and make

00:25:01.640 --> 00:25:04.430
this kind of nested
structure inside its own DOM

00:25:04.430 --> 00:25:06.050
representation.

00:25:06.050 --> 00:25:09.140
And what it does is when
it detects a script,

00:25:09.140 --> 00:25:11.840
it basically says, well,
this script is important.

00:25:11.840 --> 00:25:13.816
It's critical to the
application or site.

00:25:13.816 --> 00:25:16.190
I'm going to not bother passing
the rest of the document.

00:25:16.190 --> 00:25:19.420
I'm going to wait for the
script to actually return

00:25:19.420 --> 00:25:23.250
and load and execute
inside the browser.

00:25:23.250 --> 00:25:25.660
Now that actually stops
this kind of subsequent--

00:25:25.660 --> 00:25:28.060
you'll notice that
there's a link

00:25:28.060 --> 00:25:29.760
element there with a style.

00:25:29.760 --> 00:25:31.220
That stops that
from being loaded.

00:25:31.220 --> 00:25:33.820
So basically, before you can
get anything to the screen,

00:25:33.820 --> 00:25:36.740
that script has
to be downloaded.

00:25:36.740 --> 00:25:38.180
It's not quite how it works.

00:25:38.180 --> 00:25:40.360
There are a lot of browsers that
have a speculative parser which

00:25:40.360 --> 00:25:42.780
will go off and start to
download other scripts as well.

00:25:42.780 --> 00:25:44.779
But fundamentally, if you
have a script element,

00:25:44.779 --> 00:25:47.960
it has to stop doing what it's
doing, process the script,

00:25:47.960 --> 00:25:49.290
and then get back to it.

00:25:49.290 --> 00:25:50.706
Which, when you
think about trying

00:25:50.706 --> 00:25:54.454
to get data like the page to
the user as quickly as possible,

00:25:54.454 --> 00:25:55.120
it's pretty bad.

00:25:55.120 --> 00:25:57.325
Imagine you have to go off
to get the jQuery library

00:25:57.325 --> 00:25:59.450
before you can actually
see anything on the screen.

00:25:59.450 --> 00:26:01.090
And if that takes
200 milliseconds

00:26:01.090 --> 00:26:03.990
to get from somewhere,
that's 200 milliseconds

00:26:03.990 --> 00:26:08.080
lost where the user won't
actually see the page.

00:26:08.080 --> 00:26:10.120
So it's pretty interesting.

00:26:10.120 --> 00:26:13.910
So yes, scripts
block the parser.

00:26:13.910 --> 00:26:15.640
Most scripts or
old style scripts--

00:26:15.640 --> 00:26:17.126
this is the Google +1 button.

00:26:19.840 --> 00:26:22.790
Most scripts where you have,
for instance, social widgets,

00:26:22.790 --> 00:26:25.140
whether it's Twitter,
Google+, those type of things,

00:26:25.140 --> 00:26:27.570
if you don't use them correctly,
you can really slow down

00:26:27.570 --> 00:26:30.320
the performance of your page.

00:26:30.320 --> 00:26:32.040
And the reason why
the script actually

00:26:32.040 --> 00:26:34.304
does a whole lot of
stuff-- the scripts block

00:26:34.304 --> 00:26:35.720
is one, because
it has to execute.

00:26:35.720 --> 00:26:38.530
But at the same time,
there's a potential chance

00:26:38.530 --> 00:26:40.580
that the browser
or the developer

00:26:40.580 --> 00:26:42.701
might have included
document.write inside there as

00:26:42.701 --> 00:26:43.200
well.

00:26:43.200 --> 00:26:45.540
And if they included
document.write,

00:26:45.540 --> 00:26:47.130
it has to go off
and reparse the DOM.

00:26:47.130 --> 00:26:50.230
So that's why, for
instance, without

00:26:50.230 --> 00:26:59.010
the speculative
parsing, at least,

00:26:59.010 --> 00:27:01.290
you basically have to wait
for the script to execute,

00:27:01.290 --> 00:27:03.520
which, again, obviously
slows down the page.

00:27:03.520 --> 00:27:07.044
Now the interesting thing
is that the browsers

00:27:07.044 --> 00:27:09.460
have made a decision as well
that if you actually download

00:27:09.460 --> 00:27:12.420
any JavaScript, you probably
have to wait for the CSS

00:27:12.420 --> 00:27:13.390
to download as well.

00:27:13.390 --> 00:27:19.114
So you might have all
the-- how to say this.

00:27:19.114 --> 00:27:20.780
You've got the link
elements, and you're

00:27:20.780 --> 00:27:22.690
downloading your style sheets,
and they're getting downloaded.

00:27:22.690 --> 00:27:24.690
And you have maybe three
or four different style

00:27:24.690 --> 00:27:26.400
sheets in place.

00:27:26.400 --> 00:27:29.920
Now the JavaScript might
have a get computer property

00:27:29.920 --> 00:27:33.250
or get computer style
which would return

00:27:33.250 --> 00:27:38.234
the position of the element
inside the render tree.

00:27:38.234 --> 00:27:40.400
When that actually runs,
you want it to be accurate.

00:27:40.400 --> 00:27:42.295
You don't want it
to say, well, you

00:27:42.295 --> 00:27:44.090
know what, the CSS
hasn't downloaded.

00:27:44.090 --> 00:27:46.410
So the image that is at the
bottom of the page actually

00:27:46.410 --> 00:27:48.170
is still at the
bottom of the page.

00:27:48.170 --> 00:27:50.230
When in actual
fact, the developer,

00:27:50.230 --> 00:27:52.210
when the CSS was
applied, wanted the image

00:27:52.210 --> 00:27:53.590
to be at the top of the page.

00:27:53.590 --> 00:27:58.189
So browsers like
Firefox, for instance,

00:27:58.189 --> 00:28:00.730
basically completely block if
there's any JavaScript actually

00:28:00.730 --> 00:28:02.188
being downloaded,
because they want

00:28:02.188 --> 00:28:05.680
to ensure that any CSS
style sheets that are being

00:28:05.680 --> 00:28:08.080
downloaded are actually
downloaded and applied

00:28:08.080 --> 00:28:10.890
at the correct time so it's
as accurate as possible.

00:28:10.890 --> 00:28:12.560
And that is probably
one of the reasons

00:28:12.560 --> 00:28:15.880
why having JavaScript
in line-- well,

00:28:15.880 --> 00:28:18.550
JavaScript that requests
a page at the top,

00:28:18.550 --> 00:28:21.870
in your head element, is
actually a really bad thing.

00:28:21.870 --> 00:28:24.700
And actually, it turns
out that rendering is also

00:28:24.700 --> 00:28:26.090
blocked on CSS.

00:28:26.090 --> 00:28:29.150
They don't want this kind of
flash of white unstyled content

00:28:29.150 --> 00:28:31.630
appear, happening to
the user every time.

00:28:31.630 --> 00:28:34.930
So in many cases, they will not
display anything on the page

00:28:34.930 --> 00:28:36.830
until the link
elements that its found

00:28:36.830 --> 00:28:39.400
have actually been downloaded.

00:28:39.400 --> 00:28:42.910
So yeah, JavaScript can
block the DOM construction.

00:28:42.910 --> 00:28:46.610
JavaScript can also be blocked
from downloading and executing

00:28:46.610 --> 00:28:50.700
correctly on CSS waiting
to be downloaded.

00:28:50.700 --> 00:28:54.960
And rendering is always
blocked on CSS, in most cases.

00:28:54.960 --> 00:28:57.310
So if you don't have your
CSS files downloaded in time,

00:28:57.310 --> 00:29:00.265
you won't see anything
on the screen.

00:29:00.265 --> 00:29:02.140
So the interesting thing
I want to talk about

00:29:02.140 --> 00:29:04.370
is this idea of the
perception of performance,

00:29:04.370 --> 00:29:07.030
which is a trend that's
happening in web development

00:29:07.030 --> 00:29:08.800
at the moment.

00:29:08.800 --> 00:29:15.090
It's kind of a-- how to say it.

00:29:15.090 --> 00:29:17.840
It's a recognition that we
can't break the laws of physics.

00:29:17.840 --> 00:29:23.600
We can't get data
delivered any faster to us.

00:29:23.600 --> 00:29:25.620
We can't have the data--
we can't basically

00:29:25.620 --> 00:29:26.995
break the speed
of light, I think

00:29:26.995 --> 00:29:28.500
is the easiest way
of saying things.

00:29:28.500 --> 00:29:31.580
So we have to fake
a lot of things.

00:29:31.580 --> 00:29:34.290
We have to basically tell the
user, something is happening,

00:29:34.290 --> 00:29:37.810
even when it is happening, but
they don't know it's happening.

00:29:37.810 --> 00:29:38.580
It's really weird.

00:29:38.580 --> 00:29:40.530
And I'll explain it properly.

00:29:40.530 --> 00:29:41.710
The British love to queue.

00:29:41.710 --> 00:29:45.380
I was in the airport, and
I was greeted with this.

00:29:45.380 --> 00:29:47.300
There was some fog.

00:29:47.300 --> 00:29:48.700
The planes couldn't take off.

00:29:48.700 --> 00:29:51.600
So there was basically
backlogs of traffic and queue

00:29:51.600 --> 00:29:52.690
for people.

00:29:52.690 --> 00:29:54.510
And I was in this
queue for three hours,

00:29:54.510 --> 00:29:56.218
and I stayed in the
queue for three hours

00:29:56.218 --> 00:29:57.900
because I wanted to
get my next flight.

00:29:57.900 --> 00:30:00.265
And by the time I
got to the front,

00:30:00.265 --> 00:30:02.890
all the flights had gone, and I
couldn't get a flight to Berlin

00:30:02.890 --> 00:30:03.410
at the time.

00:30:03.410 --> 00:30:04.890
So I had to go back home.

00:30:04.890 --> 00:30:07.182
And it was really annoying.

00:30:07.182 --> 00:30:08.890
And I had just stood,
like everyone else,

00:30:08.890 --> 00:30:11.600
for three hours,
waiting politely

00:30:11.600 --> 00:30:15.661
to get to this point of trying
to be able to get a ticket.

00:30:15.661 --> 00:30:17.910
And I was really annoyed
throughout the whole process.

00:30:17.910 --> 00:30:19.260
And it's because I
knew I was there.

00:30:19.260 --> 00:30:20.120
I couldn't do anything.

00:30:20.120 --> 00:30:21.036
Nothing was happening.

00:30:21.036 --> 00:30:25.500
There was no one to speak
to, to help you out and help

00:30:25.500 --> 00:30:27.840
you get to where you're going.

00:30:27.840 --> 00:30:29.430
Nothing was happening.

00:30:29.430 --> 00:30:30.930
My perception of
the performance was

00:30:30.930 --> 00:30:33.680
I was just stuck in a queue
waiting for absolutely ages.

00:30:33.680 --> 00:30:35.902
Now when you look at
modern airports and the way

00:30:35.902 --> 00:30:37.360
they're starting
to design airports

00:30:37.360 --> 00:30:39.790
is they recognize that
actually, in airports, there's

00:30:39.790 --> 00:30:42.730
lots of queues, and people
stand around waiting, doing

00:30:42.730 --> 00:30:44.871
absolutely nothing.

00:30:44.871 --> 00:30:46.870
So one of the things that
they're starting to do

00:30:46.870 --> 00:30:49.847
is make you walk a
lot, lot further.

00:30:49.847 --> 00:30:52.430
You'll get off your plane, and
you'll go down a long alleyway,

00:30:52.430 --> 00:30:55.414
and you'll keep walking and
keep walking and keep walking.

00:30:55.414 --> 00:30:57.080
And then you'll go
through some security

00:30:57.080 --> 00:30:58.880
and then go and
collect your bags.

00:30:58.880 --> 00:31:01.820
And what it makes you think
is, well, you get to the end,

00:31:01.820 --> 00:31:03.590
and your bags are
waiting on the carousel.

00:31:03.590 --> 00:31:05.506
You pick them up, and
then you take them home.

00:31:05.506 --> 00:31:08.189
You're like, that was
really, really quick service.

00:31:08.189 --> 00:31:08.980
That was brilliant.

00:31:08.980 --> 00:31:10.610
I got off the
plane, and the bags

00:31:10.610 --> 00:31:12.590
were waiting for me
just as I got there.

00:31:12.590 --> 00:31:14.340
But actually, in
fact, and I just

00:31:14.340 --> 00:31:15.965
realized you can't
read this-- in fact,

00:31:15.965 --> 00:31:18.020
your bags take the exact
same amount of time

00:31:18.020 --> 00:31:19.810
to get from the airplane
to the carousel.

00:31:19.810 --> 00:31:21.760
It's just that in that
intermediate time,

00:31:21.760 --> 00:31:24.270
you've been doing something
else other than standing around.

00:31:24.270 --> 00:31:26.644
So it turns out people complain
a lot less when they have

00:31:26.644 --> 00:31:28.190
to walk further
and do something.

00:31:28.190 --> 00:31:31.090
And that's what we want people
to do with web development.

00:31:33.787 --> 00:31:35.370
If you're building
sites and services,

00:31:35.370 --> 00:31:37.420
you can actually get
something to the screen

00:31:37.420 --> 00:31:39.470
as quickly as possible,
make the user think

00:31:39.470 --> 00:31:41.190
that the site is
fully interactable

00:31:41.190 --> 00:31:43.000
and you can actually
interact with it.

00:31:43.000 --> 00:31:44.732
But actually, then,
kind of downloading

00:31:44.732 --> 00:31:46.440
the rest of the content
behind the scenes

00:31:46.440 --> 00:31:48.220
and bring it out as
quickly as possible.

00:31:48.220 --> 00:31:50.430
So it's kind of an
interesting kind of paradigm.

00:31:50.430 --> 00:31:53.530
And I want to talk about
in two different ways.

00:31:53.530 --> 00:31:55.990
The first is the DNS problem.

00:31:55.990 --> 00:31:57.910
As sites get heavier
and heavier and heavier,

00:31:57.910 --> 00:32:00.370
they use more and
more external scripts.

00:32:00.370 --> 00:32:03.100
They refer to more and
more external domains.

00:32:03.100 --> 00:32:05.850
They might have social widgets,
whether it's a Google+ widget

00:32:05.850 --> 00:32:08.200
or a Twitter widget,
for instance.

00:32:08.200 --> 00:32:11.894
And we saw earlier on
that a DNS connection,

00:32:11.894 --> 00:32:13.310
it can take up to
200 milliseconds

00:32:13.310 --> 00:32:18.740
on 3G and 80 milliseconds on 4G.

00:32:18.740 --> 00:32:20.652
This is a really big
problem, especially when

00:32:20.652 --> 00:32:21.360
you look at this.

00:32:21.360 --> 00:32:25.255
There's, on average, 17 external
references, external sites

00:32:25.255 --> 00:32:27.560
per page now on the web,
which is just crazy.

00:32:27.560 --> 00:32:29.770
There's 17 DNS
lookups that you have

00:32:29.770 --> 00:32:32.170
to do every time
you load a page.

00:32:32.170 --> 00:32:33.780
So the perception
of performance,

00:32:33.780 --> 00:32:35.280
you can't really
get around the fact

00:32:35.280 --> 00:32:37.170
that you want these
social widgets and all

00:32:37.170 --> 00:32:40.420
these interactive kind of
components on your page.

00:32:40.420 --> 00:32:43.260
And someone else
provides them, so you

00:32:43.260 --> 00:32:45.330
want to do a thing
called DNS prefetch.

00:32:45.330 --> 00:32:47.380
Now Firefox and
Chrome implement this.

00:32:47.380 --> 00:32:49.490
But basically what
happens is, right

00:32:49.490 --> 00:32:51.520
at the very top
of your document,

00:32:51.520 --> 00:32:55.980
you put a link element in
with a href of the domain

00:32:55.980 --> 00:32:57.290
that you want to pre-resolve.

00:32:57.290 --> 00:32:59.716
And what basically happens
is the browser goes,

00:32:59.716 --> 00:33:01.840
hey, we're going to get
something from twitter.com.

00:33:01.840 --> 00:33:03.710
Let's go and resolve
twitter.com to make sure

00:33:03.710 --> 00:33:05.710
that the DNS is not going
to be the problem when

00:33:05.710 --> 00:33:07.530
it comes to
downloading the script.

00:33:07.530 --> 00:33:09.830
And the example I use
here is the BBC News site.

00:33:09.830 --> 00:33:14.060
I was in our Korea
office yesterday,

00:33:14.060 --> 00:33:16.580
and I was looking at
the BBC News site.

00:33:16.580 --> 00:33:18.880
And it took about 10
or 15 seconds to load.

00:33:18.880 --> 00:33:21.260
And I know the BBC is
a really good site.

00:33:21.260 --> 00:33:23.595
In the UK, it's probably
about 100 milliseconds

00:33:23.595 --> 00:33:25.055
to load the entire site.

00:33:25.055 --> 00:33:26.930
And I looked at the way
that they've actually

00:33:26.930 --> 00:33:28.410
structured their page.

00:33:28.410 --> 00:33:31.540
And each of these scripts are
normally on a different domain.

00:33:31.540 --> 00:33:35.790
They shard all the
scripts across domains.

00:33:35.790 --> 00:33:38.880
And the DNS lookup up was
taking 139 milliseconds.

00:33:38.880 --> 00:33:42.460
They don't do any of the
prefetching that you can do.

00:33:42.460 --> 00:33:44.710
And if they had done
the prefetching,

00:33:44.710 --> 00:33:46.600
then maybe the first
request would still

00:33:46.600 --> 00:33:50.996
have to do the 150 milliseconds
kind of DNS resolution.

00:33:50.996 --> 00:33:52.620
But all these other
subsequent requests

00:33:52.620 --> 00:33:53.922
are all on different domains.

00:33:53.922 --> 00:33:56.130
Well, the browser would have
gone off and gone, well,

00:33:56.130 --> 00:33:57.700
I'm going to get
these ahead of time.

00:33:57.700 --> 00:33:59.090
And then they're all
pre-resolved and ready

00:33:59.090 --> 00:33:59.770
in place.

00:33:59.770 --> 00:34:01.270
And it's a relatively
simple thing

00:34:01.270 --> 00:34:05.450
that you can do to your page
to kind of boost the perceived

00:34:05.450 --> 00:34:05.950
performance.

00:34:05.950 --> 00:34:07.324
You don't actually
really changed

00:34:07.324 --> 00:34:08.874
the real performance
of the page.

00:34:08.874 --> 00:34:10.540
But the fact is, the
browser's going off

00:34:10.540 --> 00:34:13.040
to do something ahead of time
that the user doesn't actually

00:34:13.040 --> 00:34:14.550
see that work happening.

00:34:14.550 --> 00:34:15.760
And it's pretty interesting.

00:34:15.760 --> 00:34:16.830
It's pretty cool.

00:34:16.830 --> 00:34:18.786
And it's easy to implement.

00:34:18.786 --> 00:34:20.560
And the next is above the fold.

00:34:20.560 --> 00:34:23.270
And I know Paul Irish talked
about this earlier on as well.

00:34:23.270 --> 00:34:25.120
The above the fold
content is everything

00:34:25.120 --> 00:34:30.320
you see in the very first
screen's worth of content.

00:34:30.320 --> 00:34:32.949
What the browser actually sees,
and I know it's very small,

00:34:32.949 --> 00:34:35.750
the browser sees the entire
page, the entire DOM,

00:34:35.750 --> 00:34:37.389
all the images,
all the CSS that's

00:34:37.389 --> 00:34:39.049
applicable for the entire page.

00:34:39.049 --> 00:34:40.590
And the question
that you have to ask

00:34:40.590 --> 00:34:43.690
is, can we just
download what's needed

00:34:43.690 --> 00:34:45.780
at the top of the page
and then a little bit

00:34:45.780 --> 00:34:47.280
later, once it's
displayed, download

00:34:47.280 --> 00:34:48.510
the rest of the content?

00:34:48.510 --> 00:34:50.190
Well, not the
content, but the CSS

00:34:50.190 --> 00:34:53.130
and the JavaScript that is
applicable just to this bit.

00:34:53.130 --> 00:34:54.920
You don't change the
amount of content

00:34:54.920 --> 00:34:56.690
that is being
downloaded to the user.

00:34:56.690 --> 00:35:02.660
You're just changing
the perception of speed

00:35:02.660 --> 00:35:05.440
because you're saying, actually,
this first piece of content

00:35:05.440 --> 00:35:07.410
here is the most critical,
the most important,

00:35:07.410 --> 00:35:10.860
and we'll get that out to the
user as quickly as possible.

00:35:10.860 --> 00:35:14.050
So when we want to optimize
in CSS, there's one quick win.

00:35:14.050 --> 00:35:16.509
And if I was working for the
PageSpeed team, which I'm not,

00:35:16.509 --> 00:35:18.300
the only thing that
they would ever suggest

00:35:18.300 --> 00:35:19.910
is to install either
mod_pagespeed or

00:35:19.910 --> 00:35:23.550
nginx_pagespeed, because
it's going to do everything

00:35:23.550 --> 00:35:27.247
automatically that I'm
going to show you now.

00:35:27.247 --> 00:35:29.330
The first, obviously these
are just bullet points.

00:35:29.330 --> 00:35:30.690
And I'm really sorry that
they're bullet points,

00:35:30.690 --> 00:35:32.244
but they're just
a list of things

00:35:32.244 --> 00:35:34.410
that every developer should
do when they're actually

00:35:34.410 --> 00:35:35.770
building a site.

00:35:35.770 --> 00:35:37.620
Put your CSS early
in the document,

00:35:37.620 --> 00:35:39.774
put it before a script so
the scripts don't block.

00:35:39.774 --> 00:35:41.690
Actually, you probably
should put your scripts

00:35:41.690 --> 00:35:43.106
at the end of the
document itself.

00:35:43.106 --> 00:35:48.014
Make sure you minify, compress,
and cache all your CSS files.

00:35:48.014 --> 00:35:49.430
That's the best
thing that you can

00:35:49.430 --> 00:35:51.559
do for the user in that case.

00:35:51.559 --> 00:35:53.600
And then generally reduce
the number of requests.

00:35:53.600 --> 00:35:55.709
We saw from the BBC before
they're making-- well,

00:35:55.709 --> 00:35:56.500
this is JavaScript.

00:35:56.500 --> 00:35:59.700
They also have about four
or five different CSS files

00:35:59.700 --> 00:36:01.430
that they download as well.

00:36:01.430 --> 00:36:03.570
Just concatenate
them into one file.

00:36:03.570 --> 00:36:05.830
And then inline in the
head where possible.

00:36:05.830 --> 00:36:08.130
And the inline in
the head element

00:36:08.130 --> 00:36:11.549
is what we're going
to talk about next.

00:36:11.549 --> 00:36:12.590
Well, actually, it's not.

00:36:12.590 --> 00:36:13.210
I lied.

00:36:13.210 --> 00:36:15.990
I'm sorry.

00:36:15.990 --> 00:36:18.270
So the first one
is use only the CSS

00:36:18.270 --> 00:36:19.700
that is needed for the page.

00:36:19.700 --> 00:36:24.160
If anyone's used Bootstrap,
the CSS framework for making

00:36:24.160 --> 00:36:27.350
nice looking applications,
it's 120 kilobytes

00:36:27.350 --> 00:36:29.380
in size, which is pretty big.

00:36:29.380 --> 00:36:32.100
But most applications
don't use the entire range

00:36:32.100 --> 00:36:34.302
of functionality from Bootstrap.

00:36:34.302 --> 00:36:36.010
And some experimentation
that we've done,

00:36:36.010 --> 00:36:37.490
where we've built
an application,

00:36:37.490 --> 00:36:39.573
went through every single
page in that application

00:36:39.573 --> 00:36:43.020
to look at the very
specific CSS that we used,

00:36:43.020 --> 00:36:45.680
we managed to reduce that
file down to 11 kilobytes.

00:36:45.680 --> 00:36:48.280
And you'll see this better
when I share the slides,

00:36:48.280 --> 00:36:49.860
but this is the
code that we used.

00:36:49.860 --> 00:36:52.670
It's a small piece of JavaScript
which walks through DOM

00:36:52.670 --> 00:36:55.460
and then, for every
DOM element, works out

00:36:55.460 --> 00:36:58.200
what CSS rules are
applicable and then

00:36:58.200 --> 00:37:00.670
just saves them to a file.

00:37:00.670 --> 00:37:01.640
Which is pretty cool.

00:37:01.640 --> 00:37:04.060
We've basically
reduced the size to 10%

00:37:04.060 --> 00:37:05.910
of the size of the
original file just

00:37:05.910 --> 00:37:08.060
by being smart about
how we actually

00:37:08.060 --> 00:37:10.622
want to serve up that content.

00:37:10.622 --> 00:37:11.830
There's another, simpler way.

00:37:11.830 --> 00:37:13.871
I don't know whether Paul
Irish showed it before,

00:37:13.871 --> 00:37:17.400
but there's an Audits
panel in DevTools basically

00:37:17.400 --> 00:37:20.030
that just lists all the
CSS which is not used.

00:37:20.030 --> 00:37:22.420
If you find some CSS that's
not used on the page,

00:37:22.420 --> 00:37:26.410
you can pretty much
safely strip that out.

00:37:26.410 --> 00:37:28.490
And this is the one about
inline critical CSS.

00:37:31.010 --> 00:37:35.600
The critical CSS is
the content-- the CSS

00:37:35.600 --> 00:37:39.900
that only applies to things
above the fold, which

00:37:39.900 --> 00:37:41.910
is basically the content
in the first screen's

00:37:41.910 --> 00:37:45.470
worth of your page
on your mobile phone.

00:37:45.470 --> 00:37:47.981
Now it's a little
bit more complex,

00:37:47.981 --> 00:37:49.480
but the reason why
this is important

00:37:49.480 --> 00:37:51.450
is because if you
inline the content,

00:37:51.450 --> 00:37:53.380
you're not making a
request at the time you're

00:37:53.380 --> 00:37:56.566
trying to get content to the
screen to an external CSS file.

00:37:56.566 --> 00:37:58.190
You don't have to
wait for that request

00:37:58.190 --> 00:38:00.420
to complete to bring it back in.

00:38:00.420 --> 00:38:02.430
Now that's really cool
because it stops blocking

00:38:02.430 --> 00:38:05.410
and helps you get the content
visible on the user's device.

00:38:05.410 --> 00:38:07.220
But it's actually
really hard to work out

00:38:07.220 --> 00:38:11.064
what is visible above
the fold at any one time.

00:38:11.064 --> 00:38:13.230
And this is the technique
that we use at the moment.

00:38:13.230 --> 00:38:15.680
If you go to my
blog, paul.kinlan.me,

00:38:15.680 --> 00:38:17.970
I explain it a little
bit more there.

00:38:17.970 --> 00:38:19.722
But essentially, we
walk the DOM again,

00:38:19.722 --> 00:38:21.680
and we look to see whether
it's in the viewport

00:38:21.680 --> 00:38:23.810
at any particular
time, like if it's

00:38:23.810 --> 00:38:25.910
in the top part of the viewport.

00:38:25.910 --> 00:38:27.340
And that's all it
is, but it's not

00:38:27.340 --> 00:38:29.265
100% accurate at the moment.

00:38:29.265 --> 00:38:30.640
And we're trying
to work on that.

00:38:30.640 --> 00:38:35.130
But it's a good heuristic
that you can use.

00:38:35.130 --> 00:38:38.214
And this is actually an
example of what it looks like.

00:38:38.214 --> 00:38:40.630
I know Paul Irish talked about
it a little bit earlier on.

00:38:40.630 --> 00:38:42.960
But this is the inlining
of the content which

00:38:42.960 --> 00:38:46.360
is only applicable
for above the fold.

00:38:46.360 --> 00:38:48.214
So above the fold stops here.

00:38:48.214 --> 00:38:49.630
Anything beneath
this would not be

00:38:49.630 --> 00:38:53.610
on the first part, the first
screen's worth of content.

00:38:53.610 --> 00:38:55.680
So basically, we've
just analyzed the fact

00:38:55.680 --> 00:38:57.580
that the body
element is important,

00:38:57.580 --> 00:39:01.700
the h1 element is important,
and the div is important for us.

00:39:01.700 --> 00:39:04.040
We've worked out the
CSS that is applicable.

00:39:04.040 --> 00:39:05.650
And then we just
basically push that

00:39:05.650 --> 00:39:07.370
into the style
element at the top.

00:39:07.370 --> 00:39:09.230
So no request to
an external service

00:39:09.230 --> 00:39:10.830
is going out from
the head, which

00:39:10.830 --> 00:39:14.930
means that we can display this
content in just one request.

00:39:14.930 --> 00:39:17.700
So you have to ask the question,
what about the rest of the CSS?

00:39:17.700 --> 00:39:21.080
Well, you basically subtract
the two sets of property

00:39:21.080 --> 00:39:24.080
or the two sets of
CSS style rules,

00:39:24.080 --> 00:39:27.660
and you have a link rel
stylesheet at the bottom.

00:39:27.660 --> 00:39:31.780
You'll potentially get a
flash of unstyled content

00:39:31.780 --> 00:39:33.660
if the user scrolls,
and they scroll

00:39:33.660 --> 00:39:35.960
past the link rel, which
has not been downloaded.

00:39:35.960 --> 00:39:38.460
But generally, you can
get content to the screen

00:39:38.460 --> 00:39:41.366
really, really quickly
with this technique.

00:39:41.366 --> 00:39:43.060
And it's pretty cool.

00:39:43.060 --> 00:39:45.190
Optimizing scripts
is another one.

00:39:45.190 --> 00:39:48.590
We know that scripts block the
rendering quite significantly.

00:39:48.590 --> 00:39:51.956
So what are the techniques that
you can use to improve this?

00:39:51.956 --> 00:39:54.330
Well, again, if I was working
for the mod_pagespeed team,

00:39:54.330 --> 00:39:56.260
or the PageSpeed team, I
would just tell everyone

00:39:56.260 --> 00:39:58.093
to install mod_pagespeed
or nginx_pagespeed.

00:40:00.120 --> 00:40:03.500
But I know that everyone
can't control their deployment

00:40:03.500 --> 00:40:07.385
environment and don't want to
install new server software.

00:40:07.385 --> 00:40:09.260
So we're going to show
you how to actually do

00:40:09.260 --> 00:40:11.220
some of this stuff now.

00:40:11.220 --> 00:40:14.759
But again, it's exactly the
same as CSS, optimizing for CSS.

00:40:14.759 --> 00:40:17.175
You need to deliver it to the
user as quickly as possible.

00:40:17.175 --> 00:40:19.330
You need to compress it,
you need to minify it,

00:40:19.330 --> 00:40:21.210
and you need to reduce
the number of requests

00:40:21.210 --> 00:40:22.570
that go out from your page.

00:40:22.570 --> 00:40:25.070
And JavaScript is normally is
the one where there's normally

00:40:25.070 --> 00:40:28.300
a lot of extra DNS
resolutions applied

00:40:28.300 --> 00:40:31.400
because the JavaScript will
be on different content

00:40:31.400 --> 00:40:33.220
distribution networks.

00:40:33.220 --> 00:40:35.880
So in this case, using DNS
prefetch for your scripts

00:40:35.880 --> 00:40:38.210
is actually probably
a pretty good thing.

00:40:38.210 --> 00:40:39.850
But make sure you
remove all scripts

00:40:39.850 --> 00:40:41.520
from the critical render path.

00:40:41.520 --> 00:40:44.460
Try and have no script
above any area that

00:40:44.460 --> 00:40:46.860
will be displayed on the page
in the very first screen's

00:40:46.860 --> 00:40:48.040
worth of content.

00:40:48.040 --> 00:40:49.300
I know it's hard to do.

00:40:49.300 --> 00:40:51.383
You might want to do some
interaction with the DOM

00:40:51.383 --> 00:40:52.050
at that time.

00:40:52.050 --> 00:40:53.840
But just try and defer
as much as possible

00:40:53.840 --> 00:41:00.560
because it really does slow
down the speed of your page.

00:41:00.560 --> 00:41:02.775
So you can get around
it to some extent.

00:41:02.775 --> 00:41:04.570
I might actually have
the syntax wrong.

00:41:04.570 --> 00:41:05.570
But you can use async.

00:41:05.570 --> 00:41:07.800
So there's an attribute
at the end called async,

00:41:07.800 --> 00:41:10.110
which is available in
the script elements.

00:41:10.110 --> 00:41:13.664
Now async basically says, I'm
going to download this script,

00:41:13.664 --> 00:41:15.080
and I'm not going
to block the DOM

00:41:15.080 --> 00:41:17.080
parser from doing
the rest of its work.

00:41:17.080 --> 00:41:19.260
But what this actually
means at the same time

00:41:19.260 --> 00:41:21.750
is that you can have three
or four different scripts

00:41:21.750 --> 00:41:23.690
with the async
attribute applied,

00:41:23.690 --> 00:41:26.287
and it will download them
and execute them in any order

00:41:26.287 --> 00:41:27.120
that they come back.

00:41:27.120 --> 00:41:32.852
So if script A becomes
before script B-- sorry,

00:41:32.852 --> 00:41:33.560
I'll rephrase it.

00:41:33.560 --> 00:41:36.270
If script B comes
before script A,

00:41:36.270 --> 00:41:38.510
then script B will
execute before A.

00:41:38.510 --> 00:41:41.040
And if you have a dependency
on two or three scripts,

00:41:41.040 --> 00:41:43.910
you don't want to use the async
attribute because you can't

00:41:43.910 --> 00:41:46.112
guarantee the
order of execution.

00:41:46.112 --> 00:41:47.820
And you shouldn't
really use it if you're

00:41:47.820 --> 00:41:48.986
going to manipulate the DOM.

00:41:48.986 --> 00:41:50.730
If you've got
document.write or any kind

00:41:50.730 --> 00:41:53.930
of other thing in place
there, it's really bad

00:41:53.930 --> 00:41:56.220
because what might
actually happen,

00:41:56.220 --> 00:41:58.730
if you've got a very large
document like the HTML5 spec,

00:41:58.730 --> 00:42:01.020
for instance, it's
multiple megabytes in size,

00:42:01.020 --> 00:42:03.780
you might have some
JavaScript which downloads,

00:42:03.780 --> 00:42:05.782
and then it executes.

00:42:05.782 --> 00:42:07.490
The DOM element that
you want to interact

00:42:07.490 --> 00:42:09.320
with at that time
might not be available,

00:42:09.320 --> 00:42:10.945
might not be on the
screen, just purely

00:42:10.945 --> 00:42:12.810
because the JavaScript
was actually

00:42:12.810 --> 00:42:16.410
quite small in comparison
to the actual HTML document.

00:42:16.410 --> 00:42:19.900
So to kind of get around
the unordered execution

00:42:19.900 --> 00:42:23.750
of asynchronous scripts,
there's a defer attribute.

00:42:23.750 --> 00:42:26.410
And defer does something
similar to async.

00:42:26.410 --> 00:42:29.200
It basically says, you can go
off and download this file,

00:42:29.200 --> 00:42:30.770
and I'll continue
parsing the DOM

00:42:30.770 --> 00:42:34.150
and let all the CSS apply and
a whole lot of other stuff.

00:42:34.150 --> 00:42:36.280
But it actually blocks
the onload event.

00:42:36.280 --> 00:42:39.330
It basically waits for all
the scripts to complete,

00:42:39.330 --> 00:42:43.400
executes them in the order
that they were specified

00:42:43.400 --> 00:42:45.920
in your script to ensure
consistency-- script

00:42:45.920 --> 00:42:48.110
A executes before
script B, which

00:42:48.110 --> 00:42:51.240
executes before
script C-- and you can

00:42:51.240 --> 00:42:52.790
ensure some consistency there.

00:42:52.790 --> 00:42:59.880
It's kind of useful
for taking out

00:42:59.880 --> 00:43:01.172
the blocking aspect of scripts.

00:43:01.172 --> 00:43:02.546
But again, you
don't particularly

00:43:02.546 --> 00:43:04.860
want to rely on interacting
with any DOM at that time.

00:43:04.860 --> 00:43:07.900
You want to wait till it's page
onload and then kind of get

00:43:07.900 --> 00:43:09.740
the content back out.

00:43:09.740 --> 00:43:12.382
So you can defer, and that will
actually speed up your page.

00:43:12.382 --> 00:43:14.340
One of the things that
a lot of Google services

00:43:14.340 --> 00:43:17.050
tend to recommend is
you literally just put

00:43:17.050 --> 00:43:20.207
all your scripts at the end of
the page and wait for the wait

00:43:20.207 --> 00:43:22.540
for the scripts to execute
then, rather than using async

00:43:22.540 --> 00:43:23.750
or defer.

00:43:23.750 --> 00:43:27.074
So what are some of the
tools that you can use?

00:43:27.074 --> 00:43:28.740
Well obviously,
DevTools is one of them.

00:43:28.740 --> 00:43:31.390
DevTools is really
cool because you

00:43:31.390 --> 00:43:33.160
can connect either to
your desktop machine

00:43:33.160 --> 00:43:36.095
or directly to your network,
to your mobile phone.

00:43:36.095 --> 00:43:38.570
And what this means is that
if you're on your network,

00:43:38.570 --> 00:43:41.080
if you connect DevTools
to your mobile phone,

00:43:41.080 --> 00:43:43.852
you actually see the network
that all the rest of your users

00:43:43.852 --> 00:43:44.810
would see, essentially.

00:43:44.810 --> 00:43:47.600
All the requests that happen,
the latencies that you see,

00:43:47.600 --> 00:43:50.380
would be probably pretty similar
across the rest of your users

00:43:50.380 --> 00:43:52.567
on mobile as well,
which is pretty cool.

00:43:52.567 --> 00:43:54.400
But that gives you a
good, strong indication

00:43:54.400 --> 00:43:57.240
about what's blocking,
when it's blocking,

00:43:57.240 --> 00:44:00.380
and how to go and fix
these things as well.

00:44:00.380 --> 00:44:04.000
The next is PageSpeed
Insights extension,

00:44:04.000 --> 00:44:05.620
which I'll see if
I can demo briefly.

00:44:09.850 --> 00:44:11.270
There we go.

00:44:11.270 --> 00:44:12.780
Here's one here.

00:44:12.780 --> 00:44:14.000
Let me refresh.

00:44:17.016 --> 00:44:17.890
Hopefully this works.

00:44:20.430 --> 00:44:22.431
That didn't work, did it?

00:44:22.431 --> 00:44:22.930
News.bbc.

00:44:27.893 --> 00:44:28.680
Come on.

00:44:33.300 --> 00:44:36.250
See, the BBC takes
a while to load.

00:44:36.250 --> 00:44:37.915
A lot of their
servers are in London.

00:44:41.690 --> 00:44:42.840
No.

00:44:42.840 --> 00:44:45.000
OK, so you can tell this
is code I've written.

00:44:45.000 --> 00:44:47.440
It doesn't work.

00:44:47.440 --> 00:44:48.890
Let's go back to
the presentation.

00:44:48.890 --> 00:44:50.265
So essentially,
what would happen

00:44:50.265 --> 00:44:53.700
is every page that you
visit, the extension goes

00:44:53.700 --> 00:44:57.470
off and checks the page against
PageSpeed Insight service,

00:44:57.470 --> 00:44:59.260
which will then give
you this report.

00:44:59.260 --> 00:45:03.350
It'll basically tell the size of
the HTML, the data in the HTML,

00:45:03.350 --> 00:45:06.544
the total size of all
the images on the page,

00:45:06.544 --> 00:45:07.960
and a whole lot
of other features.

00:45:07.960 --> 00:45:09.376
But it also gives
you a screenshot

00:45:09.376 --> 00:45:11.294
of what it looks like
on a mobile device

00:45:11.294 --> 00:45:12.960
and the suggested
fixes that you can do.

00:45:12.960 --> 00:45:14.230
So if you've got
a site, and you're

00:45:14.230 --> 00:45:16.688
kind of testing your own site,
and you're navigating around

00:45:16.688 --> 00:45:19.800
it, this extension's pretty
cool because everywhere you go,

00:45:19.800 --> 00:45:23.240
the extension checks basically
the mobile performance of it.

00:45:23.240 --> 00:45:25.090
So it's pretty cool.

00:45:25.090 --> 00:45:26.955
And that's the link
I've got there.

00:45:26.955 --> 00:45:29.820
It's 9TtTKs.

00:45:29.820 --> 00:45:30.960
It's pretty cool.

00:45:30.960 --> 00:45:33.469
The next is Mobile
Speed Monitor as well.

00:45:33.469 --> 00:45:35.260
This is another service
that we've written,

00:45:35.260 --> 00:45:37.575
which is a Chrome App, which
is what Pete LePage talked

00:45:37.575 --> 00:45:38.660
about earlier today.

00:45:38.660 --> 00:45:40.560
You can basically put
a whole series of URLs.

00:45:40.560 --> 00:45:42.244
And every 10
minutes, it'll go off

00:45:42.244 --> 00:45:43.410
and run some analysis on it.

00:45:43.410 --> 00:45:45.510
So you can basically
see and check,

00:45:45.510 --> 00:45:48.676
for a whole range of
pages inside your site,

00:45:48.676 --> 00:45:50.800
whether they're performing
well and whether they're

00:45:50.800 --> 00:45:52.530
consistently performing
well as well.

00:45:52.530 --> 00:45:54.280
So it gives you some
warning ahead of time

00:45:54.280 --> 00:45:55.779
that something might
have gone wrong

00:45:55.779 --> 00:45:58.900
if you've just deployed
some software onto the web.

00:45:58.900 --> 00:46:02.050
So in summary,
delivering performance,

00:46:02.050 --> 00:46:03.590
it should be a feature.

00:46:03.590 --> 00:46:05.549
It's not for a lot of
developers at the moment.

00:46:05.549 --> 00:46:06.964
It's something
that you go and fix

00:46:06.964 --> 00:46:08.620
at the end of your
development project.

00:46:08.620 --> 00:46:10.370
We want you to kind
of go and think

00:46:10.370 --> 00:46:13.110
about how you build your
applications ahead of time.

00:46:13.110 --> 00:46:16.020
So use PageSpeed Insights
to get actionable advice.

00:46:16.020 --> 00:46:17.990
PageSpeed Insights will
tell you all the things

00:46:17.990 --> 00:46:19.615
that it thinks are
wrong with your page

00:46:19.615 --> 00:46:21.052
and how to go and fix it.

00:46:21.052 --> 00:46:23.010
But always ensure that
you do the basics right.

00:46:23.010 --> 00:46:25.667
Try not to use redirects
if possible at all.

00:46:25.667 --> 00:46:27.500
I know you can't get
away from it sometimes.

00:46:27.500 --> 00:46:30.020
But just follow that
piece of guidance first.

00:46:30.020 --> 00:46:32.350
Try never to redirect the
user to another domain

00:46:32.350 --> 00:46:33.640
or another page.

00:46:33.640 --> 00:46:37.627
Always concatenate, minify,
and compress your scripts.

00:46:37.627 --> 00:46:39.960
We didn't talk about it today,
but optimize your images.

00:46:39.960 --> 00:46:43.770
Images can be optimized far more
than what we think they can be.

00:46:43.770 --> 00:46:46.650
You can change the compression
settings on your JPEG files.

00:46:46.650 --> 00:46:49.930
And you will save a lot
in bandwidth for the user.

00:46:49.930 --> 00:46:53.100
Obviously, compress everything
and cache heavily as well.

00:46:53.100 --> 00:46:56.460
And one of the areas is, at
the start of your project,

00:46:56.460 --> 00:46:58.979
plan for inling critical CSS.

00:46:58.979 --> 00:47:00.520
I don't think anyone
in this audience

00:47:00.520 --> 00:47:03.570
is going to go off
tonight and inline

00:47:03.570 --> 00:47:05.530
critical CSS on their web pages.

00:47:05.530 --> 00:47:08.340
For an established project,
it's just not feasible.

00:47:08.340 --> 00:47:10.430
But if you're starting to
build your project now,

00:47:10.430 --> 00:47:14.250
you can start to think about how
you can get those inline styles

00:47:14.250 --> 00:47:17.110
into the head element and
then kind of break that up so

00:47:17.110 --> 00:47:19.990
that the rest of the
CSS is loaded later on,

00:47:19.990 --> 00:47:24.090
and you're getting the content
for the user on the screen

00:47:24.090 --> 00:47:25.970
as quickly as possible.

00:47:25.970 --> 00:47:29.330
And we say deliver above the
fold content in the first 15

00:47:29.330 --> 00:47:29.850
kilobytes.

00:47:29.850 --> 00:47:31.590
There's a very specific reason.

00:47:31.590 --> 00:47:33.110
If you set up your
server correctly,

00:47:33.110 --> 00:47:36.510
you can send 10 TCP packets
out with 15 kilobytes

00:47:36.510 --> 00:47:40.380
worth of content before even
having to send a response back.

00:47:40.380 --> 00:47:42.521
That is actually a really
hard one to even solve,

00:47:42.521 --> 00:47:44.520
and we don't even do it
ourselves at the moment.

00:47:44.520 --> 00:47:47.899
So just try and get as much
of the content out to the user

00:47:47.899 --> 00:47:49.315
as quickly as
possible, and get it

00:47:49.315 --> 00:47:53.600
on the screen within a second,
is our overall guidance.

00:47:53.600 --> 00:47:54.720
And that's the end.

00:47:54.720 --> 00:47:57.100
I finished.

00:47:57.100 --> 00:47:58.300
That's it.

00:47:58.300 --> 00:48:03.679
[APPLAUSE]

00:48:03.679 --> 00:48:06.100
PAUL KINLAN: I've
got one final thing.

00:48:06.100 --> 00:48:08.320
If you have any feedback
on any of these features,

00:48:08.320 --> 00:48:10.390
I know we haven't got
time for questions.

00:48:10.390 --> 00:48:13.680
Paulkinlan@google.com, or
I'm on Twitter and GitHub

00:48:13.680 --> 00:48:15.230
and everywhere else.

00:48:15.230 --> 00:48:16.850
Just send me the feedback.

00:48:16.850 --> 00:48:19.090
Don't worry about
whether you can or can't.

00:48:19.090 --> 00:48:20.620
Just send me the
data and send me

00:48:20.620 --> 00:48:22.170
the information that you have.

00:48:22.170 --> 00:48:25.770
It'd be really cool.

00:48:25.770 --> 00:48:40.117
[APPLAUSE]

