WEBVTT
Kind: captions
Language: en

00:00:00.580 --> 00:00:01.150
Hello.

00:00:01.150 --> 00:00:04.290
I'm Jonathan Simon with the
Google Cloud Platform team.

00:00:04.290 --> 00:00:07.010
I'm going to talk to you about
Google Cloud Storage, and how

00:00:07.010 --> 00:00:09.800
you can use JavaScript to
start building on top of

00:00:09.800 --> 00:00:12.550
Google's powerful storage
infrastructure.

00:00:12.550 --> 00:00:15.650
Cloud Storage is a fast,
scalable, and reliable storage

00:00:15.650 --> 00:00:18.840
service offered by Google as
part of its Cloud platform.

00:00:18.840 --> 00:00:21.470
For more details about Cloud
Storage, here are two links to

00:00:21.470 --> 00:00:23.640
help you get started.

00:00:23.640 --> 00:00:25.860
I'm going to show you a demo
of a Cloud Storage sample

00:00:25.860 --> 00:00:28.490
application that uses the
JavaScript client library for

00:00:28.490 --> 00:00:29.960
Google APIs.

00:00:29.960 --> 00:00:32.650
The Google JavaScript client
library provides access from

00:00:32.650 --> 00:00:35.810
the JavaScript environment to
Cloud Storage and many other

00:00:35.810 --> 00:00:37.190
Google APIs.

00:00:37.190 --> 00:00:40.270
Just add the script tag you
see here to your HTML to

00:00:40.270 --> 00:00:44.150
include the Google JavaScript
API client library.

00:00:44.150 --> 00:00:45.880
Now that you know how to include
the JavaScript client

00:00:45.880 --> 00:00:49.220
library in your HTML, the next
thing to do is to grab the

00:00:49.220 --> 00:00:52.630
code for the Cloud Storage
JavaScript sample application.

00:00:52.630 --> 00:00:55.355
Since the source control for the
samples code is using Git,

00:00:55.355 --> 00:00:58.980
the checkout command is git
clone, and then the name of

00:00:58.980 --> 00:01:01.660
the GitHub repository.

00:01:01.660 --> 00:01:04.269
The next thing you want to do is
navigate into the directory

00:01:04.269 --> 00:01:07.110
containing the JavaScript
sample code.

00:01:07.110 --> 00:01:10.130
Just copy and paste that CD
command into your terminal.

00:01:10.130 --> 00:01:13.230
Then you'll want to follow
through the README, and enter

00:01:13.230 --> 00:01:16.420
the details in the
index.html file.

00:01:16.420 --> 00:01:20.120
That will include your Google
Cloud Storage project ID, your

00:01:20.120 --> 00:01:23.510
client ID, and your API key.

00:01:23.510 --> 00:01:25.570
After that, you can load
it up on a web server

00:01:25.570 --> 00:01:28.380
and see it in action.

00:01:28.380 --> 00:01:31.120
A quick way to start a simple
web server to view the demo is

00:01:31.120 --> 00:01:32.920
by using Python's
built-in server.

00:01:32.920 --> 00:01:34.230
So let's switch over
to a terminal

00:01:34.230 --> 00:01:35.480
window and try it out.

00:01:38.140 --> 00:01:40.340
You can see that I'm in the
Storage Getting Started

00:01:40.340 --> 00:01:41.880
JavaScript directory.

00:01:41.880 --> 00:01:44.270
And if we list the files
there, you can see the

00:01:44.270 --> 00:01:47.620
index.html file, which I've
already updated to include my

00:01:47.620 --> 00:01:49.700
applications details.

00:01:49.700 --> 00:01:52.540
To start serving index.html
from a web server, we can

00:01:52.540 --> 00:01:55.765
simply type Python -m
simpleHTTPserver.

00:01:59.250 --> 00:02:01.860
There, now the Python web
server is running.

00:02:01.860 --> 00:02:04.330
Notice that the default port
that it is serving

00:02:04.330 --> 00:02:06.940
pages from is 8,000.

00:02:06.940 --> 00:02:09.540
So we can open up our
browser and enter

00:02:09.540 --> 00:02:15.310
http://localhost:8000
to load the sample.

00:02:17.840 --> 00:02:20.060
Here's the cloud storage sample
application using the

00:02:20.060 --> 00:02:21.780
JavaScript client library.

00:02:21.780 --> 00:02:24.270
If this is your first time
signing in, you'll see an

00:02:24.270 --> 00:02:26.990
Authorize button in the top-left
corner of the screen.

00:02:26.990 --> 00:02:29.880
And when you click that button,
it will request

00:02:29.880 --> 00:02:33.160
permission to access your
cloud storage resources.

00:02:33.160 --> 00:02:35.450
When you click Accept and
complete the authorization

00:02:35.450 --> 00:02:39.480
process, you can try out
a sample API call.

00:02:39.480 --> 00:02:41.620
Let's start by listing all the
buckets that are currently

00:02:41.620 --> 00:02:44.700
available for my project
in cloud storage.

00:02:44.700 --> 00:02:46.990
So this sample application
returns a few pieces of

00:02:46.990 --> 00:02:49.330
information, including an
explanation of the selected

00:02:49.330 --> 00:02:52.140
API request, a bit of code
that's generated for the

00:02:52.140 --> 00:02:54.750
request, and the API's
response to

00:02:54.750 --> 00:02:56.320
the request we made.

00:02:56.320 --> 00:02:58.450
So if we look at the
explanation, we can see that

00:02:58.450 --> 00:03:00.626
we're querying the Google Cloud
Storage API for a list

00:03:00.626 --> 00:03:04.340
of buckets and returning
that list.

00:03:04.340 --> 00:03:06.730
Looking at the code, you can
see how we construct our

00:03:06.730 --> 00:03:09.850
parameter object and initialize
a single parameter

00:03:09.850 --> 00:03:13.030
to that which is then
passed to the Google

00:03:13.030 --> 00:03:15.310
Cloud Storage API.

00:03:15.310 --> 00:03:18.980
Looking at the API response,
which is formatted in JSON, we

00:03:18.980 --> 00:03:20.980
can see we're getting back
a list of buckets.

00:03:20.980 --> 00:03:23.510
But we don't currently have any
buckets in there, so let's

00:03:23.510 --> 00:03:24.760
go ahead and insert a bucket.

00:03:29.190 --> 00:03:31.640
Here's a bit of information
about the request.

00:03:31.640 --> 00:03:33.660
Here's the JavaScript code that
you can copy and paste

00:03:33.660 --> 00:03:35.490
directly into your code.

00:03:35.490 --> 00:03:39.100
Notice that we specified
code-sample-test-bucket as the

00:03:39.100 --> 00:03:41.590
ID of the bucket to
be inserted, and

00:03:41.590 --> 00:03:43.760
here's the API's response.

00:03:43.760 --> 00:03:46.490
Now let's go back to List
Buckets to make sure that we

00:03:46.490 --> 00:03:48.250
actually inserted that bucket.

00:03:52.318 --> 00:03:54.650
And indeed, we can see
that our items

00:03:54.650 --> 00:03:56.750
array now has one bucket.

00:03:56.750 --> 00:04:00.070
And the ID of that bucket is
code-sample-test-bucket.

00:04:00.070 --> 00:04:00.840
Excellent.

00:04:00.840 --> 00:04:03.160
We could do more than just
list and insert buckets.

00:04:03.160 --> 00:04:05.760
We can also list a bucket's
access control list.

00:04:05.760 --> 00:04:08.460
We can list and insert
objects, and more.

00:04:08.460 --> 00:04:10.920
This sample is showing a subset
of all the API commands

00:04:10.920 --> 00:04:12.940
available to help you understand
the look and feel

00:04:12.940 --> 00:04:15.240
of making a JavaScript
request to the Google

00:04:15.240 --> 00:04:16.920
Cloud Storage API.

00:04:16.920 --> 00:04:19.130
Check out the cloud storage
documentation for the full

00:04:19.130 --> 00:04:22.300
list of commands.

00:04:22.300 --> 00:04:24.390
Now why don't we take a look at
the codes so we can really

00:04:24.390 --> 00:04:26.395
understand what the request
looks like in JavaScript.

00:04:29.700 --> 00:04:33.100
So if we open up index.html
in an editor and look up a

00:04:33.100 --> 00:04:37.770
function like listBuckets,
that's all there is to it.

00:04:37.770 --> 00:04:40.680
You can see we put together
a request.

00:04:40.680 --> 00:04:43.860
And we pass in the project ID
for the project that we'd like

00:04:43.860 --> 00:04:49.000
to list buckets for, and then
we execute the request.

00:04:49.000 --> 00:04:54.390
Looking at the executeRequest
function, you can see it

00:04:54.390 --> 00:04:57.670
accepts two arguments-- a
request object, and the name

00:04:57.670 --> 00:05:00.010
of the API request being made.

00:05:00.010 --> 00:05:04.230
Stepping into the function,
first we execute the request.

00:05:04.230 --> 00:05:07.240
And then using a JavaScript
function literal, we output

00:05:07.240 --> 00:05:10.750
the response to the HTML page
which you can see by jumping

00:05:10.750 --> 00:05:13.130
down into the function.

00:05:13.130 --> 00:05:17.240
We create HTML pre-elements,
and then we output the

00:05:17.240 --> 00:05:20.880
response to the inner HTML
of that pre-element using

00:05:20.880 --> 00:05:23.370
JSON.stringify.

00:05:23.370 --> 00:05:27.085
And then finally, we append
that pre-element to a div

00:05:27.085 --> 00:05:30.830
element that's visible
on the HTML page.

00:05:30.830 --> 00:05:32.480
Let's review the workflow
for using the

00:05:32.480 --> 00:05:34.500
JavaScript client library.

00:05:34.500 --> 00:05:35.990
The first thing you'll
do is include the

00:05:35.990 --> 00:05:37.770
Google JavaScript APIs.

00:05:37.770 --> 00:05:39.140
Just script that source.

00:05:39.140 --> 00:05:42.480
Then you can include or load the
Google API of your choice.

00:05:42.480 --> 00:05:45.200
Here we're including the
Cloud Storage API.

00:05:45.200 --> 00:05:46.090
And finally, you can make

00:05:46.090 --> 00:05:48.110
requests and display responses.

00:05:48.110 --> 00:05:49.900
It's as easy as that.

00:05:49.900 --> 00:05:52.320
To wrap up, here are a few more
resources where you can

00:05:52.320 --> 00:05:53.470
go to learn more.

00:05:53.470 --> 00:05:55.950
If you have any questions or
feedback, please feel free to

00:05:55.950 --> 00:05:58.890
reach out to us on Stack
Overflow or via email.

00:05:58.890 --> 00:06:00.110
Thank you for watching.

00:06:00.110 --> 00:06:02.430
Now that you've seen how easy it
is to get started, go ahead

00:06:02.430 --> 00:06:03.500
and try out the Cloud Storage

00:06:03.500 --> 00:06:04.750
JavaScript sample for yourself.

