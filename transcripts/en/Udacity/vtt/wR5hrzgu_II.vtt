WEBVTT
Kind: captions
Language: en

00:00:00.330 --> 00:00:05.460
To help us generalize this now, let's refer to an input image as F index over

00:00:05.460 --> 00:00:10.680
i and j, output as G and h[i,j] as the kernel.

00:00:10.680 --> 00:00:12.340
And these are the terms you'll be using again and

00:00:12.340 --> 00:00:15.970
again throughout some of the stuff we deal with image processings.

00:00:15.970 --> 00:00:19.530
Again let's take our nine by time, nine by nine sample image.

00:00:19.530 --> 00:00:22.820
This is our three by three kernel with K is equal to 1.

00:00:22.820 --> 00:00:26.040
Just to help us do some simple math, I'm now going to take

00:00:26.040 --> 00:00:30.760
an element here with a neighborhood, with you know i and j at 3.

00:00:30.760 --> 00:00:37.700
So basically now looking for value of g at the output at 3.

00:00:37.700 --> 00:00:41.110
We want to figure out what was the math for coming up with this.

00:00:41.110 --> 00:00:44.190
And I've given it some variables, A, B, C, D, E, F, G, H, I.

00:00:45.260 --> 00:00:47.610
Just to kind of mirror the lowercase ones here.

00:00:47.610 --> 00:00:51.830
For generality, let's just now play around with just these two for now, and

00:00:51.830 --> 00:00:55.980
again, this is the one that is basically moving around inside this.

00:00:55.980 --> 00:00:57.760
So G 3,3.

00:00:57.760 --> 00:01:01.710
The value here and the output would therefore be the summation of A.

00:01:02.730 --> 00:01:07.300
Lower case a with capital A, lower case b, capital B, and doing that for

00:01:07.300 --> 00:01:09.760
each and every element, the nine elements here.

00:01:09.760 --> 00:01:11.840
So this would be my equation.

00:01:11.840 --> 00:01:15.700
Now, since there are nine of these, I do want to always normalize it.

00:01:15.700 --> 00:01:18.350
So, actually, I would come up with a scaling factor, 1 over 9,

00:01:18.350 --> 00:01:21.770
to help me kind of normalize the values from all of the, them.

00:01:21.770 --> 00:01:25.310
For the case of just doing a filter that's an average.

00:01:25.310 --> 00:01:29.556
So right now, to do an average, my kernel would just be 1 over 9, 1 over 9,

00:01:29.556 --> 00:01:30.310
1 over 9.

00:01:30.310 --> 00:01:32.970
Same values in all nine elements.

00:01:32.970 --> 00:01:36.210
So now if I do 1 over 9, and this is my image here.

00:01:36.210 --> 00:01:39.650
Of course the averaging would be best defined by this equation.

00:01:39.650 --> 00:01:43.660
So, G 3,3 basically for a kernel which is an average kernel.

00:01:43.660 --> 00:01:44.860
1 over 9,

00:01:44.860 --> 00:01:49.580
all, all the nine elements would be 1 over 9 and the summation of all of them.

00:01:49.580 --> 00:01:50.200
Very similar to the,

00:01:50.200 --> 00:01:53.180
what we had looked in the 1D case now applied to a 2D case here.

