WEBVTT
Kind: captions
Language: en

00:00:08.540 --> 00:00:12.680
Hi, I'm Dan Zhang, a technical
account manager on the Android

00:00:12.680 --> 00:00:13.930
Partner Engineering team.

00:00:13.930 --> 00:00:17.730
And today, I'm here to talk to
you about how to maximize your

00:00:17.730 --> 00:00:22.110
app's reach by designing for
devices with large displays.

00:00:22.110 --> 00:00:24.490
This is the first of a
series of episodes.

00:00:24.490 --> 00:00:28.820
And today, we'll focus on
different input methods.

00:00:28.820 --> 00:00:31.450
As you know, the Android
ecosystem continues to grow.

00:00:31.450 --> 00:00:34.080
More and more unique form
factors are coming onto the

00:00:34.080 --> 00:00:37.300
market, providing a connected
continuum.

00:00:37.300 --> 00:00:41.910
To name a few, there's already
smart TVs, set-top boxes, and

00:00:41.910 --> 00:00:44.970
we're also starting to see in
the pipeline these Android PC

00:00:44.970 --> 00:00:47.940
sticks, all-in-one smart
monitors, and, of course, our

00:00:47.940 --> 00:00:51.050
own Google TV, which announced
at I/O this year that they're

00:00:51.050 --> 00:00:55.580
migrating to stock Jellybean
Android later this year.

00:00:55.580 --> 00:00:58.915
Now, these devices typically
provide non-touch input

00:00:58.915 --> 00:01:02.700
methods, such as joysticks,
trackpads, D-pads, optical

00:01:02.700 --> 00:01:04.940
mice, et cetera.

00:01:04.940 --> 00:01:07.630
Now, the Android platform
provides facilities for

00:01:07.630 --> 00:01:10.320
developers to target these
new use cases.

00:01:10.320 --> 00:01:13.940
And that's what we want
to highlight today.

00:01:13.940 --> 00:01:17.130
Now, these new form factors,
like smart TVs, are typically

00:01:17.130 --> 00:01:20.420
designed for living room and
provide a 10-foot viewing

00:01:20.420 --> 00:01:21.500
experience.

00:01:21.500 --> 00:01:24.230
In other words, a
non-touch UI.

00:01:24.230 --> 00:01:28.370
In the new Jellybean MR2 CDD,
we have a new definition for

00:01:28.370 --> 00:01:32.430
the Faketouch input, which is
basically an alternative to

00:01:32.430 --> 00:01:36.440
the conventional direct touch
interface and provides support

00:01:36.440 --> 00:01:38.020
for point and click,
drag and drop

00:01:38.020 --> 00:01:40.610
functionalities from a distance.

00:01:40.610 --> 00:01:43.210
Developers should improve
their UIs

00:01:43.210 --> 00:01:45.520
for Faketouch devices.

00:01:45.520 --> 00:01:49.780
Again, the Android framework
provides a set of APIs to help

00:01:49.780 --> 00:01:52.550
you define and collect
these input events.

00:01:52.550 --> 00:01:54.310
We've listed a few
of them here.

00:01:54.310 --> 00:01:57.520
We encourage you to read through
these CDD definitions

00:01:57.520 --> 00:02:00.590
and framework APIs to understand
how to take

00:02:00.590 --> 00:02:03.850
advantage of this
input method.

00:02:03.850 --> 00:02:07.940
Now, in this simple table, we
listed changes you should make

00:02:07.940 --> 00:02:10.530
to support the non-touch UI.

00:02:10.530 --> 00:02:14.080
In your Android manifest, all
you need to do is make sure to

00:02:14.080 --> 00:02:17.190
remove the touch feature
requirement unless it's

00:02:17.190 --> 00:02:19.860
absolutely necessary
for your app.

00:02:19.860 --> 00:02:23.310
And you should consider
Faketouch as an alternative

00:02:23.310 --> 00:02:25.390
that provides more functionality
than the

00:02:25.390 --> 00:02:30.380
traditional non-touch inputs,
such as D-pad, can provide.

00:02:30.380 --> 00:02:33.380
Now let's quickly
look at a demo.

00:02:33.380 --> 00:02:36.300
To simplify things, we're using
a Nexus 10 here with a

00:02:36.300 --> 00:02:39.850
USB mouse to emulate the
Faketouch input.

00:02:39.850 --> 00:02:42.330
This way we can work around the
Play Store filtering for

00:02:42.330 --> 00:02:46.800
those apps that have not yet
declared Faketouch support.

00:02:46.800 --> 00:02:49.760
So here, we have my favorite
variation of the Angry Birds

00:02:49.760 --> 00:02:54.100
game, the Star Wars edition.

00:02:54.100 --> 00:02:59.440
Let's continue a game
that has started.

00:02:59.440 --> 00:03:04.130
As you can see, you can
perform just about any

00:03:04.130 --> 00:03:07.920
functionalities you would
with a full touch UI.

00:03:07.920 --> 00:03:10.070
That wasn't a very
good first try.

00:03:10.070 --> 00:03:11.320
But let me try again.

00:03:13.790 --> 00:03:17.730
So you could just fling the
birds away using your

00:03:17.730 --> 00:03:19.500
Faketouch inputs.

00:03:19.500 --> 00:03:23.100
But I should mention here that
you're not able to perform

00:03:23.100 --> 00:03:26.080
multi-touch gestures in this
setup because I'm using a

00:03:26.080 --> 00:03:26.740
simple mouse.

00:03:26.740 --> 00:03:30.330
But with devices that support
multi-touch trackpads or

00:03:30.330 --> 00:03:34.270
pointers, you will be able to
support these gestures, such

00:03:34.270 --> 00:03:36.320
zooming in or zooming out.

00:03:36.320 --> 00:03:37.580
So there you go.

00:03:37.580 --> 00:03:38.830
Please look into Faketouch.

00:03:41.150 --> 00:03:45.530
Now let's look at making your
apps more D-pad friendly.

00:03:45.530 --> 00:03:47.790
Now, the D-pad has been
around long time.

00:03:47.790 --> 00:03:50.160
Even in some of the original
smartphones,

00:03:50.160 --> 00:03:51.770
they were built in.

00:03:51.770 --> 00:03:57.050
And almost in all remotes, and,
obviously, USB keyboards.

00:03:57.050 --> 00:04:00.150
So the reason we still want to
look at the D-pad is, even

00:04:00.150 --> 00:04:03.910
with this new CDD definition,
some of the existing devices

00:04:03.910 --> 00:04:07.110
still may not support Faketouch
for some time.

00:04:07.110 --> 00:04:10.060
And even with the
Faketouch-capable devices, it

00:04:10.060 --> 00:04:13.790
is often more effective and
easier for users to operate

00:04:13.790 --> 00:04:17.930
remotes using just D-pad in the
living room environment.

00:04:17.930 --> 00:04:21.990
Apps should respect all standard
key events for basic

00:04:21.990 --> 00:04:24.480
navigation.

00:04:24.480 --> 00:04:26.620
So how should we actually
optimize?

00:04:26.620 --> 00:04:30.960
Now, one thing we should focus
on foremost is to address the

00:04:30.960 --> 00:04:32.820
focus handling.

00:04:32.820 --> 00:04:36.010
Basically, you want to make a
conscious decision where to

00:04:36.010 --> 00:04:39.850
place the default focus to
minimize key presses.

00:04:39.850 --> 00:04:40.920
The concept is simple.

00:04:40.920 --> 00:04:44.800
We shouldn't always assume users
can randomly select an

00:04:44.800 --> 00:04:48.190
area on your page using touch.

00:04:48.190 --> 00:04:52.380
So we should utilize these APIs
listed here to request

00:04:52.380 --> 00:04:56.150
default focus for certain
elements or explicitly take

00:04:56.150 --> 00:04:59.692
over control for the
focus sequence to

00:04:59.692 --> 00:05:02.540
traverse your pages.

00:05:02.540 --> 00:05:06.280
Another optimization tip is to
actually change your layout to

00:05:06.280 --> 00:05:07.980
be more D-pad friendly.

00:05:07.980 --> 00:05:09.460
This is also not
a new concept.

00:05:09.460 --> 00:05:12.230
And many apps designed for
tablets have already adapted

00:05:12.230 --> 00:05:14.970
to this approach.

00:05:14.970 --> 00:05:17.480
But again, the idea here is to
minimize the number of key

00:05:17.480 --> 00:05:21.230
presses when a user tries to
traverse through the page in a

00:05:21.230 --> 00:05:22.660
non-touch UI.

00:05:22.660 --> 00:05:26.810
In this case, you can jump
forward in the tabs by

00:05:26.810 --> 00:05:29.710
traversing just left to right
on the screen, which is much

00:05:29.710 --> 00:05:32.320
faster than scrolling all the
way up or down through the

00:05:32.320 --> 00:05:35.870
page using a D-pad input.

00:05:35.870 --> 00:05:38.720
Again, to illustrate the
relationships between these

00:05:38.720 --> 00:05:41.200
three input methods,
we've added D-pad

00:05:41.200 --> 00:05:42.960
entry in this table.

00:05:42.960 --> 00:05:46.150
If your app is fully D-pad
friendly-- in other words, you

00:05:46.150 --> 00:05:50.250
can completely navigate
throughout your app using just

00:05:50.250 --> 00:05:53.500
the conventional D-pad and don't
have to use any gestures

00:05:53.500 --> 00:05:54.800
control, et cetera--

00:05:54.800 --> 00:05:58.830
then you can simply declare just
no touch, or touch equals

00:05:58.830 --> 00:06:01.700
false, in your Android
manifest.

00:06:01.700 --> 00:06:04.420
And you may not need to
consider Faketouch.

00:06:04.420 --> 00:06:07.605
But going back to the previous
example of Angry Birds, that

00:06:07.605 --> 00:06:10.130
app is actually a good candidate
for using this new

00:06:10.130 --> 00:06:12.740
Faketouch definition.

00:06:12.740 --> 00:06:14.660
So now, let's do a quick demo.

00:06:14.660 --> 00:06:17.420
This time, let's look at a
Google service, the Play

00:06:17.420 --> 00:06:18.390
Movies app--

00:06:18.390 --> 00:06:21.550
also one of my favorites.

00:06:21.550 --> 00:06:24.890
I should mention that this app
has made a lot of improvements

00:06:24.890 --> 00:06:27.780
in the last release
to support D-pad.

00:06:27.780 --> 00:06:29.600
And as you see here
in a second--

00:06:29.600 --> 00:06:32.750
so now, I've switched
to a USB keyboard.

00:06:32.750 --> 00:06:36.750
And you can see I'm able to
traverse, sequentially,

00:06:36.750 --> 00:06:41.430
throughout the app by changing
the focus on the top and

00:06:41.430 --> 00:06:43.935
selecting content
I wish to watch.

00:06:47.560 --> 00:06:52.240
Control playback [INAUDIBLE]

00:06:52.240 --> 00:06:53.280
there you go.

00:06:53.280 --> 00:06:54.930
So the movie has started.

00:06:54.930 --> 00:06:58.100
So the escape key would take
me back one level, as you

00:06:58.100 --> 00:07:01.000
would expect, just like
a touch input.

00:07:01.000 --> 00:07:05.470
So this is what I would call a
D-pad friendly application.

00:07:05.470 --> 00:07:07.830
So that's all I have
for you today.

00:07:07.830 --> 00:07:09.460
Please stay tuned for
our next episode,

00:07:09.460 --> 00:07:10.710
and thanks for listening.

