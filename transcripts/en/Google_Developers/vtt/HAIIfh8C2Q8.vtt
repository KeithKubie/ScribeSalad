WEBVTT
Kind: captions
Language: en

00:00:02.850 --> 00:00:04.070
SETH LADD: My name
is Seth Ladd.

00:00:04.070 --> 00:00:07.370
And I want to welcome you to
another of our broadcasts

00:00:07.370 --> 00:00:11.040
live, talking all about the
Dartiverse with Dartisans as

00:00:11.040 --> 00:00:13.900
we eat dar-- taters.

00:00:13.900 --> 00:00:16.470
Anyway, we have really awesome
special guests here today

00:00:16.470 --> 00:00:17.470
talking lots of stuff.

00:00:17.470 --> 00:00:19.070
It's been a little while,
so I want to catch up

00:00:19.070 --> 00:00:20.400
everyone on the news.

00:00:20.400 --> 00:00:24.520
We'll talk about the events in
the Dart world and meet more

00:00:24.520 --> 00:00:25.270
community members.

00:00:25.270 --> 00:00:26.770
So with that, let's go
to the Hangout and

00:00:26.770 --> 00:00:28.570
I'll introduce everybody.

00:00:28.570 --> 00:00:31.830
From the Seattle Dart team,
we have Dart engineers Bob

00:00:31.830 --> 00:00:33.880
Nystrom and Nathan Weizenbaum.

00:00:33.880 --> 00:00:35.950
Say hello, guys.

00:00:35.950 --> 00:00:36.120
NATHAN WEIZENBAUM: Whatup.

00:00:36.120 --> 00:00:36.610
BOB NYSTROM: Hey.

00:00:36.610 --> 00:00:37.520
SETH LADD: Thanks
for joining us.

00:00:37.520 --> 00:00:41.920
And also from Seattle, Kevin
Moore, a community member,

00:00:41.920 --> 00:00:44.360
open source contributor,
and all around

00:00:44.360 --> 00:00:45.290
great software engineer.

00:00:45.290 --> 00:00:45.760
Hi, Kevin.

00:00:45.760 --> 00:00:47.047
Thanks for joining us.

00:00:47.047 --> 00:00:48.270
KEVIN MOORE: Good
to see you guys.

00:00:48.270 --> 00:00:49.120
Nice to be here.

00:00:49.120 --> 00:00:50.490
SETH LADD: So we got a lot
of stuff to cover.

00:00:50.490 --> 00:00:52.330
So why don't we go ahead
and dive into it.

00:00:52.330 --> 00:00:55.160
Let's go over some of the news
that we've been seeing.

00:00:55.160 --> 00:00:57.790
And a special shout-out
to Chris Buckett over

00:00:57.790 --> 00:00:58.490
there from the UK.

00:00:58.490 --> 00:01:00.325
He's been doing a great job
every week or so collecting

00:01:00.325 --> 00:01:01.620
the news for us.

00:01:01.620 --> 00:01:03.460
And a couple items I
want to call out.

00:01:03.460 --> 00:01:07.600
First, of course, last week, two
weeks ago, was Google I/O.

00:01:07.600 --> 00:01:09.870
And all those videos
are now live.

00:01:09.870 --> 00:01:12.230
So if you're interested
in catching up with--

00:01:12.230 --> 00:01:14.850
let's see, we had Lars and
Kasper give a talk.

00:01:14.850 --> 00:01:17.680
We had Dan and DJ give a talk.

00:01:17.680 --> 00:01:19.420
We had Ray Cromwell
give a talk.

00:01:19.420 --> 00:01:22.810
And then Jaime and
I had a Code Lab.

00:01:22.810 --> 00:01:25.980
All the videos, the PDFs from
the Code Lab, are now all

00:01:25.980 --> 00:01:27.580
posted on Google I/Os site.

00:01:27.580 --> 00:01:30.290
So you got to definitely
check all those out.

00:01:30.290 --> 00:01:32.720
I think it went really well,
a lot of good questions.

00:01:32.720 --> 00:01:34.920
And I hope you can
watch those.

00:01:34.920 --> 00:01:36.840
Let's also see what Chris
has collected for us

00:01:36.840 --> 00:01:39.570
on his blog, Dartwatch.

00:01:39.570 --> 00:01:41.700
We should probably point out
that Brandon Donaldson has

00:01:41.700 --> 00:01:43.510
been doing a good job collecting
lots of different

00:01:43.510 --> 00:01:48.420
examples of different bits and
parts of the Dart language.

00:01:48.420 --> 00:01:50.730
And so if you're interested in
learning more about those,

00:01:50.730 --> 00:01:53.580
c.dart-examples.com.

00:01:53.580 --> 00:01:56.680
And we'll post all of the
links in the show notes.

00:01:56.680 --> 00:01:59.040
But Brandon has been doing a
good job with lots and lots of

00:01:59.040 --> 00:02:01.010
different examples there for you
to see what the language

00:02:01.010 --> 00:02:02.130
looks like.

00:02:02.130 --> 00:02:05.060
The DartFlash library,
which is--

00:02:05.060 --> 00:02:09.460
its author, Bernhard Pichler,
is pitching as a safe haven

00:02:09.460 --> 00:02:12.880
for ex-Flash developers
moving over to Dart,

00:02:12.880 --> 00:02:14.020
has started a blog.

00:02:14.020 --> 00:02:16.980
And he's got an open source game
written in Dart using his

00:02:16.980 --> 00:02:18.030
DartFlash library.

00:02:18.030 --> 00:02:19.130
So definitely check that out.

00:02:19.130 --> 00:02:21.520
If you have any experience
with ActionScript 3, this

00:02:21.520 --> 00:02:23.430
might be interesting to you.

00:02:23.430 --> 00:02:26.270
John Evans continues his
work on Buckshot.

00:02:26.270 --> 00:02:29.060
In fact, today he just released
a screenshot of his

00:02:29.060 --> 00:02:30.370
new Tree control.

00:02:30.370 --> 00:02:33.150
And John Evans is one of our
earliest adopters of Dart and

00:02:33.150 --> 00:02:36.250
one of the authors of
a growing client

00:02:36.250 --> 00:02:38.150
site, MVVM type framework.

00:02:38.150 --> 00:02:40.420
So if you're interested in
building client-side web apps

00:02:40.420 --> 00:02:41.900
with Dart, definitely
check out the work

00:02:41.900 --> 00:02:43.590
John has been doing.

00:02:43.590 --> 00:02:45.680
Let's talk about some of
the upcoming events.

00:02:45.680 --> 00:02:48.700
And this is definitely where
Kevin and Bob can shed some

00:02:48.700 --> 00:02:50.060
good color here.

00:02:50.060 --> 00:02:53.710
This weekend is a hackathon
in Seattle--

00:02:53.710 --> 00:02:56.480
actually, at the Google
offices in Freemont--

00:02:56.480 --> 00:02:58.060
to learn and play
all about Dart.

00:02:58.060 --> 00:03:00.055
Kevin, tell us a little bit
about what you expect to see

00:03:00.055 --> 00:03:01.305
and happen at the Seattle
Dart Hackathon.

00:03:03.890 --> 00:03:04.740
KEVIN MOORE: I'm happy to.

00:03:04.740 --> 00:03:06.190
Oh, and it looks like
our video is finally

00:03:06.190 --> 00:03:07.440
up, which is great.

00:03:10.250 --> 00:03:12.610
Seth had coordinated a bunch
of hackathons around the

00:03:12.610 --> 00:03:13.410
world, actually.

00:03:13.410 --> 00:03:15.390
Was it in April,
mostly, or May?

00:03:15.390 --> 00:03:16.830
SETH LADD: Yeah, something
like that.

00:03:16.830 --> 00:03:19.350
KEVIN MOORE: And I realized
there was none in Seattle.

00:03:19.350 --> 00:03:21.420
And I knew there were guys in
Seattle working on Dart.

00:03:21.420 --> 00:03:23.800
And so I basically was just
the squeaky wheel and said

00:03:23.800 --> 00:03:26.230
it'd be great to have an
event here in Seattle.

00:03:26.230 --> 00:03:30.660
And so with some amazing
collaboration with Seth and

00:03:30.660 --> 00:03:33.290
Bob and friends at the Fremont
office here in Seattle, we're

00:03:33.290 --> 00:03:35.420
going to have a hackathon
on Saturday.

00:03:35.420 --> 00:03:38.226
And so basically, this is an
opportunity for those that are

00:03:38.226 --> 00:03:40.640
interested in Dart can play
around or want to learn can

00:03:40.640 --> 00:03:43.220
get together, meet some people
that are actually on the Dart

00:03:43.220 --> 00:03:46.630
team at Google, and have a
chance to write some software,

00:03:46.630 --> 00:03:48.710
meet other people that are
interested in Dart, and

00:03:48.710 --> 00:03:50.790
hopefully learn and
have a good time.

00:03:50.790 --> 00:03:52.480
SETH LADD: And how
much is this free

00:03:52.480 --> 00:03:53.730
hackathon this weekend?

00:03:57.090 --> 00:03:58.860
KEVIN MOORE: The retail
price is $99.

00:03:58.860 --> 00:04:01.320
But if you register
now, you'll get

00:04:01.320 --> 00:04:03.355
in for free, I believe.

00:04:03.355 --> 00:04:04.605
SETH LADD: Awesome.

00:04:06.130 --> 00:04:08.260
KEVIN MOORE: We're going to
do bagels and doughnuts.

00:04:08.260 --> 00:04:11.320
And we'll provide lunch and
some snacks and dinner.

00:04:11.320 --> 00:04:13.320
So you'll be well fed.

00:04:13.320 --> 00:04:15.230
And, of course, the
Wi-Fi is free.

00:04:15.230 --> 00:04:18.360
SETH LADD: And when is this free
hackathon this weekend?

00:04:18.360 --> 00:04:22.610
KEVIN MOORE: We're starting at
9:00 AM on Saturday in the

00:04:22.610 --> 00:04:23.210
Freemont office.

00:04:23.210 --> 00:04:24.750
For those that live in Seattle,
you'll know what the

00:04:24.750 --> 00:04:26.680
neighborhood is.

00:04:26.680 --> 00:04:32.040
And we have an event bright page
we'll send a link to for

00:04:32.040 --> 00:04:33.050
people to register.

00:04:33.050 --> 00:04:36.220
And this afternoon, hopefully
I'll send out an email to

00:04:36.220 --> 00:04:39.040
people there with details
about where to show up.

00:04:39.040 --> 00:04:42.900
And if you have ideas for
projects you'd like to work on

00:04:42.900 --> 00:04:45.440
or like to see worked on, you
can register for those things.

00:04:45.440 --> 00:04:48.950
So take a look at the show
notes once the video gets

00:04:48.950 --> 00:04:52.090
published and you'll be able
to see details there.

00:04:52.090 --> 00:04:53.940
And just make sure you register
so we know how many

00:04:53.940 --> 00:04:54.880
to plan for.

00:04:54.880 --> 00:04:55.290
SETH LADD: Awesome.

00:04:55.290 --> 00:04:56.450
Yes, definitely register.

00:04:56.450 --> 00:04:57.330
Bring your friends.

00:04:57.330 --> 00:04:58.310
We have lots of space.

00:04:58.310 --> 00:04:59.720
And it's going to
be a lot of fun.

00:04:59.720 --> 00:05:02.250
And this is a good segway over
to talk to Bob because Bob is

00:05:02.250 --> 00:05:06.010
going to grace us with his
introduction to Dart talk,

00:05:06.010 --> 00:05:07.920
which is also going to
premiere at OSCON.

00:05:07.920 --> 00:05:11.440
And so, Bob, talk to us a little
bit about your OSCON

00:05:11.440 --> 00:05:13.220
event and what you hope to
talk about there in your

00:05:13.220 --> 00:05:15.400
presentation.

00:05:15.400 --> 00:05:17.300
BOB NYSTROM: You can't say that
it's going to premiere at

00:05:17.300 --> 00:05:21.130
OSCON if I'm also doing it
at the Dart Hackathon.

00:05:21.130 --> 00:05:22.800
It can't premiere
in both places.

00:05:22.800 --> 00:05:24.050
SETH LADD: That is true.

00:05:27.010 --> 00:05:32.590
BOB NYSTROM: So my OSCON talk
is basically not so much an

00:05:32.590 --> 00:05:34.140
introduction to the
language itself.

00:05:34.140 --> 00:05:36.150
It skims over the language.

00:05:36.150 --> 00:05:40.170
But it's mostly a contextual
talk to just describe why we

00:05:40.170 --> 00:05:43.610
thought it was a good idea to
make Dart, and a bit about at

00:05:43.610 --> 00:05:46.840
the high level why it's designed
the way it is.

00:05:46.840 --> 00:05:49.100
Hopefully, it will
be entertaining.

00:05:49.100 --> 00:05:52.110
But I make no promises.

00:05:52.110 --> 00:05:56.060
And then mostly for my own
personal benefit, I'll be

00:05:56.060 --> 00:06:00.600
doing the same talk this
Saturday at the hackathon as a

00:06:00.600 --> 00:06:01.220
dress rehearsal.

00:06:01.220 --> 00:06:05.370
You know when '90s bands decide
to come back and do a

00:06:05.370 --> 00:06:08.240
reunion tour, and before they do
the real tour, they do some

00:06:08.240 --> 00:06:08.880
club dates?

00:06:08.880 --> 00:06:10.880
This will be like my club date,
except that I'm not

00:06:10.880 --> 00:06:12.400
actually a famous '90s band.

00:06:12.400 --> 00:06:13.520
I'm just some guy.

00:06:13.520 --> 00:06:17.340
SETH LADD: So this is the
intimate club setting before

00:06:17.340 --> 00:06:19.980
you sell out as a big artist and
you play the arena shows.

00:06:19.980 --> 00:06:20.660
BOB NYSTROM: Exactly, right.

00:06:20.660 --> 00:06:21.840
SETH LADD: OK, awesome.

00:06:21.840 --> 00:06:25.240
So remind us, when is OSCON
and where is it this year?

00:06:25.240 --> 00:06:28.780
BOB NYSTROM: OSCON
is next week.

00:06:28.780 --> 00:06:30.470
I think it goes from
Monday to Friday.

00:06:30.470 --> 00:06:30.890
I don't know.

00:06:30.890 --> 00:06:33.360
I'm only there from Wednesday
to Friday.

00:06:33.360 --> 00:06:35.000
It's in Portland, Oregon.

00:06:35.000 --> 00:06:37.360
I think it's always
in Portland.

00:06:37.360 --> 00:06:38.880
And it's awesome.

00:06:38.880 --> 00:06:42.220
There's a lot of big pile of
nerds all getting together

00:06:42.220 --> 00:06:43.690
doing nerd stuff.

00:06:43.690 --> 00:06:44.860
My talk is on Thursday.

00:06:44.860 --> 00:06:47.800
If you're going to be at OSCON,
my talk is on Thursday

00:06:47.800 --> 00:06:51.360
at 10:40 in the morning,
I think.

00:06:51.360 --> 00:06:53.860
I should probably know this.

00:06:53.860 --> 00:06:55.240
And it's going to be awesome.

00:06:55.240 --> 00:06:58.290
And by awesome, I mean I might
do something embarrassing that

00:06:58.290 --> 00:06:59.750
you could laugh at.

00:06:59.750 --> 00:07:01.125
SETH LADD: And you have
some sort of Office

00:07:01.125 --> 00:07:02.910
Hours, is that right?

00:07:02.910 --> 00:07:03.310
BOB NYSTROM: I do.

00:07:03.310 --> 00:07:04.280
I do, indeed.

00:07:04.280 --> 00:07:07.300
So I signed up for Office Hours,
which I think basically

00:07:07.300 --> 00:07:09.490
just means it's a time
and a place where you

00:07:09.490 --> 00:07:10.660
can find me at OSCON.

00:07:10.660 --> 00:07:14.970
So that Thursday afternoon, I
have some Office Hours and you

00:07:14.970 --> 00:07:16.270
can go bug me.

00:07:16.270 --> 00:07:18.265
Or if you just see me wandering
around, you can bug

00:07:18.265 --> 00:07:19.040
me then too.

00:07:19.040 --> 00:07:19.920
SETH LADD: Awesome.

00:07:19.920 --> 00:07:23.190
And do you know if your
presentation at OSCON is going

00:07:23.190 --> 00:07:25.540
to be video recorded at all?

00:07:25.540 --> 00:07:27.400
BOB NYSTROM: I think it is
going to be recorded.

00:07:27.400 --> 00:07:30.760
But I don't know if it's
going to be put online.

00:07:30.760 --> 00:07:32.620
I don't know exactly what
the details are.

00:07:32.620 --> 00:07:34.160
I know OSCON records
all the talks.

00:07:34.160 --> 00:07:36.050
But I don't seem to see them
appear on YouTube.

00:07:36.050 --> 00:07:36.780
I don't know if they--

00:07:36.780 --> 00:07:39.140
SETH LADD: Yeah, I think you
have to buy in a package deal

00:07:39.140 --> 00:07:40.090
or something.

00:07:40.090 --> 00:07:43.600
We'll see if we can get a
recording for everyone at home

00:07:43.600 --> 00:07:45.130
to follow along if you can't
be there at OSCON.

00:07:45.130 --> 00:07:47.155
But, of course, if you're going
to be there, Bob's an

00:07:47.155 --> 00:07:47.770
awesome guy.

00:07:47.770 --> 00:07:50.380
He's really active on the
mailing list, really friendly.

00:07:50.380 --> 00:07:52.440
And so certainly step up,
say hi, even if you

00:07:52.440 --> 00:07:53.700
can't make his talk.

00:07:53.700 --> 00:07:55.830
Let us know what you
think about Dart.

00:07:55.830 --> 00:07:58.120
BOB NYSTROM: So what I'm
thinking I'll probably do is

00:07:58.120 --> 00:08:00.730
I'll just record the talk
separately myself, just do a

00:08:00.730 --> 00:08:03.570
screencast and put up
there, just so--

00:08:03.570 --> 00:08:04.960
I've done all the work to
rehearse it, I might as well,

00:08:04.960 --> 00:08:07.090
might as well get as much
mileage out of it as I can.

00:08:07.090 --> 00:08:08.350
SETH LADD: Yeah, great.

00:08:08.350 --> 00:08:09.960
KEVIN MOORE: That'll be
the studio recording.

00:08:09.960 --> 00:08:10.350
BOB NYSTROM: That's right.

00:08:10.350 --> 00:08:12.320
SETH LADD: That's right,
yes, highly produced.

00:08:12.320 --> 00:08:15.000
BOB NYSTROM: I'll dub some crowd
sounds so it feels a

00:08:15.000 --> 00:08:17.820
little more live and then
we'll go from there.

00:08:17.820 --> 00:08:20.250
SETH LADD: And one other event
I have coming up, it's quite

00:08:20.250 --> 00:08:22.370
in the future, though,
November 11 and 12.

00:08:22.370 --> 00:08:26.020
If you're in the Bay Area, be
sure to stop by and check out

00:08:26.020 --> 00:08:29.240
Learn Game Engine Development
with Dart and WebGL.

00:08:29.240 --> 00:08:30.550
This is really cool.

00:08:30.550 --> 00:08:33.405
John McCutcheon and Don Olmstead
are putting together

00:08:33.405 --> 00:08:36.030
a two day class to teach you
all about game development

00:08:36.030 --> 00:08:38.610
using WebGL and programming
everything in Dart.

00:08:38.610 --> 00:08:41.590
And these are hard-core game
developers, familiar in C and

00:08:41.590 --> 00:08:43.169
C++ and C#.

00:08:43.169 --> 00:08:44.780
And I think it's really
encouraging, at least for me,

00:08:44.780 --> 00:08:49.340
to see guys that would have
targeted machine code before

00:08:49.340 --> 00:08:52.560
and find programming the browser
now really interesting

00:08:52.560 --> 00:08:54.000
and exciting thanks to Dart.

00:08:54.000 --> 00:08:56.430
And so that's in the
middle of November.

00:08:56.430 --> 00:08:59.000
If you're around,
check that out.

00:08:59.000 --> 00:09:02.170
Don gave a talk in San Francisco
a couple weeks ago

00:09:02.170 --> 00:09:03.650
about using WebGL in Dart.

00:09:03.650 --> 00:09:05.160
And I believe that
got recorded.

00:09:05.160 --> 00:09:08.630
You can find that on Adam
Smith's Google+ feed.

00:09:08.630 --> 00:09:10.490
So if you want a little teaser
there, check that out.

00:09:10.490 --> 00:09:13.480
But it's cool to see more
developers, not just endemic

00:09:13.480 --> 00:09:16.180
web developers, come to
Dart in the browser.

00:09:16.180 --> 00:09:19.370
So keep that on the radar.

00:09:19.370 --> 00:09:22.020
That's what I have for
news and events.

00:09:22.020 --> 00:09:24.220
I think one of the big things
that we saw come out in the

00:09:24.220 --> 00:09:27.160
past couple weeks was
Bob's article on

00:09:27.160 --> 00:09:30.010
Dart language M1 changes.

00:09:30.010 --> 00:09:34.650
What we're trying to do is get
ready for this concept of a

00:09:34.650 --> 00:09:36.830
public beta, public SDK.

00:09:36.830 --> 00:09:39.130
And to do that, of course, we
need to draw a line in the

00:09:39.130 --> 00:09:40.660
sand, if you will,
around language

00:09:40.660 --> 00:09:43.420
changes, and try to say--

00:09:43.420 --> 00:09:45.460
excuse me-- this is the stuff
we're going to do soon.

00:09:45.460 --> 00:09:46.470
This is the stuff
we'll do later.

00:09:46.470 --> 00:09:48.140
This is the stuff we don't
think we'll do.

00:09:48.140 --> 00:09:50.420
The stuff we're doing soon,
we're labeling as M1.

00:09:50.420 --> 00:09:52.680
And I think we're getting really
close to what that

00:09:52.680 --> 00:09:53.180
looks like.

00:09:53.180 --> 00:09:55.730
And Bob took the time to write
up a really great article,

00:09:55.730 --> 00:09:57.900
which is on dartlang.org.

00:09:57.900 --> 00:09:59.590
If you go into Articles,
you can see

00:09:59.590 --> 00:10:01.215
Milestone 1 Language Changes.

00:10:01.215 --> 00:10:03.570
And I thought we could spend a
few minutes talking about some

00:10:03.570 --> 00:10:07.760
of the more exciting ones that
Kevin, Nathan, and Bob might

00:10:07.760 --> 00:10:09.710
have on their radar,
excites them, or

00:10:09.710 --> 00:10:10.780
interests them the most.

00:10:10.780 --> 00:10:12.580
We're not going to cover
everything in here.

00:10:12.580 --> 00:10:14.120
But I don't know.

00:10:14.120 --> 00:10:16.420
Kevin, have you seen some
of the recent language

00:10:16.420 --> 00:10:19.283
changes come down?

00:10:19.283 --> 00:10:20.750
KEVIN MOORE: Oh, wow, you
put me on the spot.

00:10:20.750 --> 00:10:21.280
SETH LADD: I did.

00:10:21.280 --> 00:10:23.515
You should have the entire
site memorized.

00:10:23.515 --> 00:10:24.100
BOB NYSTROM: No pressure, man.

00:10:24.100 --> 00:10:25.140
No pressure.

00:10:25.140 --> 00:10:26.340
KEVIN MOORE: Oh, wow.

00:10:26.340 --> 00:10:28.140
Actually, it's what's funny is
the things I'm most excited

00:10:28.140 --> 00:10:31.870
about are things that are
tracked and owned, but have

00:10:31.870 --> 00:10:33.950
yet to come in.

00:10:33.950 --> 00:10:38.680
Nathan's work on the pub stuff
I'm super excited about.

00:10:38.680 --> 00:10:40.830
Obviously, the big discussion--
and I was

00:10:40.830 --> 00:10:44.900
involved with that as well-- is
the notion of an interface

00:10:44.900 --> 00:10:47.110
is going away and it's all
going to be classes.

00:10:47.110 --> 00:10:50.430
And that obviously was a big
argument and discussion.

00:10:50.430 --> 00:10:51.970
I think it's been resolved
really well.

00:10:51.970 --> 00:10:55.060
And obviously, the philosophy
that keeping the language as

00:10:55.060 --> 00:10:58.590
simple as possible
but no simpler--

00:10:58.590 --> 00:11:01.430
I think Einstein said something
around those lines--

00:11:01.430 --> 00:11:02.180
is a good idea.

00:11:02.180 --> 00:11:05.290
So that discussion has been
really healthy, I think.

00:11:05.290 --> 00:11:07.910
And honestly, I think the most
important thing is just

00:11:07.910 --> 00:11:11.130
watching how the community has
been involved with the Dart

00:11:11.130 --> 00:11:13.420
team and the discussion
groups.

00:11:13.420 --> 00:11:14.850
The team has been
very responsive.

00:11:14.850 --> 00:11:17.990
Seth has been spectacular
about talking to people.

00:11:17.990 --> 00:11:20.180
So it's been really fun to get
plugged in to the ground floor

00:11:20.180 --> 00:11:22.010
in that respect.

00:11:22.010 --> 00:11:24.700
And from my perspective looking
at what's coming

00:11:24.700 --> 00:11:26.350
through, just seeing everything
tighten up and

00:11:26.350 --> 00:11:29.560
decisions getting locked down
is exciting, so that we know

00:11:29.560 --> 00:11:30.810
the more code you
write in Dart.

00:11:30.810 --> 00:11:33.040
And I've written
a bunch so far.

00:11:33.040 --> 00:11:35.360
Hopefully, that means less churn
later, which is always a

00:11:35.360 --> 00:11:35.960
good thing.

00:11:35.960 --> 00:11:37.300
SETH LADD: And I think
that's the idea.

00:11:37.300 --> 00:11:39.660
If we lock down the language
a little bit now, the other

00:11:39.660 --> 00:11:42.830
pieces can start building on
with more assumptions.

00:11:42.830 --> 00:11:46.030
Bob or Nathan, what's some of
the stuff that you saw coming

00:11:46.030 --> 00:11:48.730
down with these M1 changes that
you're looking forward to

00:11:48.730 --> 00:11:51.415
or found really interesting?

00:11:51.415 --> 00:11:53.300
NATHAN WEIZENBAUM:
Go on, Nathan.

00:11:53.300 --> 00:11:58.160
NATHAN WEIZENBAUM: Let
me look through--

00:11:58.160 --> 00:12:03.950
I'm also pretty excited about
the removal of explicit

00:12:03.950 --> 00:12:04.490
interfaces.

00:12:04.490 --> 00:12:08.710
I think it's a good sign that
we're moving towards cleaning

00:12:08.710 --> 00:12:13.920
up some of the unnecessary
stuff that the

00:12:13.920 --> 00:12:16.980
language has built up.

00:12:16.980 --> 00:12:26.900
I think some of the new features
like method cascades

00:12:26.900 --> 00:12:32.810
are a potentially really
interesting way of doing a

00:12:32.810 --> 00:12:41.630
jQuery style way of writing code
that deals with a lot of

00:12:41.630 --> 00:12:47.700
accessors in chaining and stuff
that without having to

00:12:47.700 --> 00:12:49.705
declare a bunch of temporary
variables--

00:12:52.410 --> 00:12:52.860
I don't know.

00:12:52.860 --> 00:12:54.040
What do you think, Bob?

00:12:54.040 --> 00:12:55.040
BOB NYSTROM: Oh, nice, nice.

00:12:55.040 --> 00:12:58.460
You just passed that on to me.

00:12:58.460 --> 00:13:02.750
So one of the things that I
think is going to be cool once

00:13:02.750 --> 00:13:04.280
we have it and we can
start poking with it

00:13:04.280 --> 00:13:06.830
is re-export support.

00:13:06.830 --> 00:13:10.190
So one of the things that people
talk a lot about Dart

00:13:10.190 --> 00:13:13.600
as a point of confusion is the
difference between the hash

00:13:13.600 --> 00:13:15.690
import and hash source.

00:13:15.690 --> 00:13:18.740
And even once people understand
it, there's a lot

00:13:18.740 --> 00:13:20.980
of stuff they don't like
about hash source.

00:13:20.980 --> 00:13:23.600
So one of the things that I'm
interested in playing with is

00:13:23.600 --> 00:13:24.880
trying to just not
use it at all.

00:13:24.880 --> 00:13:27.440
So if you look at the pub code
base right now, it's not using

00:13:27.440 --> 00:13:27.910
hash source.

00:13:27.910 --> 00:13:29.000
It just uses hash import.

00:13:29.000 --> 00:13:32.760
And it basically treats every
file as its own library.

00:13:32.760 --> 00:13:35.230
And I think, in general,
I think that's a

00:13:35.230 --> 00:13:36.380
better model for Dart.

00:13:36.380 --> 00:13:38.410
I enjoy using Dart
more that way.

00:13:38.410 --> 00:13:41.130
But there's a couple of things
that you can't do if you write

00:13:41.130 --> 00:13:43.160
all your code like that.

00:13:43.160 --> 00:13:46.270
And one of those is pulling
something from another file,

00:13:46.270 --> 00:13:48.870
but then have it appear
to be coming from you.

00:13:48.870 --> 00:13:51.040
And re-export is going
to plug that hole.

00:13:51.040 --> 00:13:55.000
So I'm hoping that once that's
out and we can start playing

00:13:55.000 --> 00:13:58.320
with it that that'll get us a
step towards just not having

00:13:58.320 --> 00:14:03.310
to use source at all and maybe
keeping it in the language,

00:14:03.310 --> 00:14:06.240
but getting rid of it in terms
of a feature that you use in

00:14:06.240 --> 00:14:07.090
Idiomatic Dart code.

00:14:07.090 --> 00:14:10.440
Because I think that makes Dart
simpler to reason about

00:14:10.440 --> 00:14:12.150
where you can just say, oh, you
just compose stuff using

00:14:12.150 --> 00:14:14.060
hash import.

00:14:14.060 --> 00:14:16.880
But we'll have to do some
experimentation to see how

00:14:16.880 --> 00:14:20.440
well that actually works and
if there's these weird

00:14:20.440 --> 00:14:22.702
consequences that we aren't
thinking about.

00:14:22.702 --> 00:14:27.000
But I think that has the
potential to make just

00:14:27.000 --> 00:14:30.770
Idiomatic Dart a little easier
to work with and reason about.

00:14:33.710 --> 00:14:34.950
So that's cool.

00:14:34.950 --> 00:14:37.290
SETH LADD: Brandon from the
moderator asks, can you

00:14:37.290 --> 00:14:40.240
guesstimate on the M1
aim for completion?

00:14:40.240 --> 00:14:43.160
And I don't think we ever really
have a good idea when

00:14:43.160 --> 00:14:43.920
that's going to happen.

00:14:43.920 --> 00:14:47.560
I think this is on the sooner
side than later side, though.

00:14:47.560 --> 00:14:51.030
I think we want to get M1 ironed
out so the other pieces

00:14:51.030 --> 00:14:51.570
can be built.

00:14:51.570 --> 00:14:55.210
But I don't think we have an
actual time frame for this.

00:14:55.210 --> 00:14:58.935
BOB NYSTROM: Language design
is surprisingly hard.

00:14:58.935 --> 00:15:01.000
If for kicks you decide to make
your hobby programming

00:15:01.000 --> 00:15:03.270
language, it's an interesting
learning process.

00:15:03.270 --> 00:15:06.310
And one of the things that's
tricky about it is you can't

00:15:06.310 --> 00:15:09.250
tell if a design decision is
good until you've implemented

00:15:09.250 --> 00:15:12.320
it and a decent amount
of code that uses it.

00:15:12.320 --> 00:15:16.080
So your iteration loop for
cranking on the language is

00:15:16.080 --> 00:15:16.650
pretty slow.

00:15:16.650 --> 00:15:18.560
And it makes it hard to
be like, oh, yeah,

00:15:18.560 --> 00:15:19.360
here's all the features.

00:15:19.360 --> 00:15:20.050
They're going to be great.

00:15:20.050 --> 00:15:21.550
And then they're done and then
the language is done.

00:15:27.130 --> 00:15:29.732
SETH LADD: There's another
question on the moderator here

00:15:29.732 --> 00:15:31.390
that asks about mixins.

00:15:31.390 --> 00:15:32.980
Can you shed some light
on what mixins might

00:15:32.980 --> 00:15:33.570
look like in Dart?

00:15:33.570 --> 00:15:35.570
And I thought we could address
this now, what we're talking

00:15:35.570 --> 00:15:37.845
about, some of the upcoming
language changes.

00:15:37.845 --> 00:15:40.220
Have we heard anything
about mixins from

00:15:40.220 --> 00:15:42.360
where you guys sit?

00:15:42.360 --> 00:15:43.890
BOB NYSTROM: I've heard
bits and pieces.

00:15:46.840 --> 00:15:51.540
I don't know exactly what
the status is or--

00:15:51.540 --> 00:15:53.480
[INAUDIBLE].

00:15:53.480 --> 00:15:55.720
I don't think the syntax
been nailed down yet.

00:15:58.680 --> 00:16:01.620
My understanding is that the
basic idea should be pretty

00:16:01.620 --> 00:16:03.990
close to what you assume, if
you're familiar with the

00:16:03.990 --> 00:16:06.960
concept of mixins,
in that you can--

00:16:06.960 --> 00:16:10.330
my understanding is basically
you can define a class that

00:16:10.330 --> 00:16:14.010
takes another class and
effectively copies and pastes

00:16:14.010 --> 00:16:15.520
those methods into your class.

00:16:15.520 --> 00:16:20.990
So it gives you some of the
multi-way composition that

00:16:20.990 --> 00:16:24.180
multiple inheritance gives you
without the crazy dispatch

00:16:24.180 --> 00:16:27.160
shenanigans that
C++ gives you.

00:16:27.160 --> 00:16:28.850
KEVIN MOORE: It doesn't modify
that class hierarchy, correct?

00:16:35.580 --> 00:16:38.360
BOB NYSTROM: It's a complicated
question.

00:16:38.360 --> 00:16:42.090
I think the effect of semantics
that you will see is

00:16:42.090 --> 00:16:43.210
that, no, it doesn't.

00:16:43.210 --> 00:16:46.490
But I think the way the
semantics end up being

00:16:46.490 --> 00:16:52.030
described in the spec may make
it appear that they are.

00:16:52.030 --> 00:16:58.560
The spec describes things in
an idealized, abstract

00:16:58.560 --> 00:16:59.630
semantics way.

00:16:59.630 --> 00:17:03.570
And in that description, I think
mixins will look like

00:17:03.570 --> 00:17:07.060
they are more persistent in the
class hierarchy, whereas

00:17:07.060 --> 00:17:11.170
in practice I think it will more
or less feel like those

00:17:11.170 --> 00:17:12.460
methods just get slurped in.

00:17:12.460 --> 00:17:15.420
And everything feels like
it's been flattened out.

00:17:15.420 --> 00:17:18.194
But all of this is still up
in the air, so don't hold

00:17:18.194 --> 00:17:19.000
me to any of it.

00:17:19.000 --> 00:17:21.260
SETH LADD: Yeah, I believe it
came up at I/O. And it's

00:17:21.260 --> 00:17:22.349
definitely on the road map.

00:17:22.349 --> 00:17:26.079
And so I know we're trying
to get M1 out the door.

00:17:26.079 --> 00:17:28.160
So I think we'll see this
sooner than later.

00:17:28.160 --> 00:17:30.040
And I know there's a lot of
people asking for mixin.

00:17:30.040 --> 00:17:33.280
So I think this is a highly
anticipated feature.

00:17:33.280 --> 00:17:35.370
BOB NYSTROM: One of the things
that I'm excited about is that

00:17:35.370 --> 00:17:38.420
because we're getting rid of
interfaces, if you look at the

00:17:38.420 --> 00:17:42.730
core library right now, it looks
like it was designed,

00:17:42.730 --> 00:17:45.310
especially the collections, by
people that were thinking Java

00:17:45.310 --> 00:17:47.530
even though they were
writing Dart.

00:17:47.530 --> 00:17:48.890
Everything is an interface
and there's this

00:17:48.890 --> 00:17:50.450
hidden concrete class.

00:17:50.450 --> 00:17:53.700
And because we're getting rid of
interfaces, I think we have

00:17:53.700 --> 00:17:55.110
a chance to simplify
a lot of that.

00:17:55.110 --> 00:17:57.980
So my hope is that a lot of
those things will just be

00:17:57.980 --> 00:18:01.560
classes, and that by default,
you'll just being able to

00:18:01.560 --> 00:18:03.750
sub-class them.

00:18:03.750 --> 00:18:07.740
So it's possible that even
before mixins or in the

00:18:07.740 --> 00:18:09.940
language that you'll be able
to do a little more code

00:18:09.940 --> 00:18:11.570
re-use than you can do
with Dart right now.

00:18:11.570 --> 00:18:15.180
Right now, if you want to re-use
some of the existing

00:18:15.180 --> 00:18:17.270
code that implements
collections, it's really,

00:18:17.270 --> 00:18:18.230
really nasty and hairy.

00:18:18.230 --> 00:18:19.550
You have to go into
core [INAUDIBLE].

00:18:19.550 --> 00:18:20.900
And there's platform
differences

00:18:20.900 --> 00:18:21.510
and stuff like that.

00:18:21.510 --> 00:18:24.040
So I'm hoping that by getting
rid of explicit interfaces,

00:18:24.040 --> 00:18:25.820
even some of that stuff
will get surfaced

00:18:25.820 --> 00:18:28.440
a little more easily.

00:18:28.440 --> 00:18:29.780
SETH LADD: If you're interested
in what else is

00:18:29.780 --> 00:18:32.880
coming down the pipe for the new
Dart M1 changes, go on to

00:18:32.880 --> 00:18:37.080
dartlang.org and look for
Milestone 1 Language Changes

00:18:37.080 --> 00:18:39.654
from the Articles section, or
just search for M1 Dart

00:18:39.654 --> 00:18:41.270
Language Changes.

00:18:41.270 --> 00:18:41.980
I think you'll find it.

00:18:41.980 --> 00:18:45.410
There's a lot more in there that
we didn't cover, and some

00:18:45.410 --> 00:18:46.500
really interesting
things in there,

00:18:46.500 --> 00:18:48.250
like an as_cast operator.

00:18:48.250 --> 00:18:50.470
I'll leave you with that
little teaser.

00:18:50.470 --> 00:18:53.390
So certainly do catch up on
what's happening in the Dart

00:18:53.390 --> 00:18:54.550
language world.

00:18:54.550 --> 00:18:56.330
But we also care a lot
about the developer

00:18:56.330 --> 00:18:57.110
experience in Dart.

00:18:57.110 --> 00:18:59.660
Dart's a lot more than
just a language.

00:18:59.660 --> 00:19:01.660
It's a whole batteries
included project.

00:19:01.660 --> 00:19:02.120
And one of the--

00:19:02.120 --> 00:19:05.090
BOB NYSTROM: Way of life.

00:19:05.090 --> 00:19:07.940
SETH LADD: It's a
way of thinking.

00:19:07.940 --> 00:19:10.880
One of the other anticipated
features that I really think

00:19:10.880 --> 00:19:12.710
is going to blow open the
doors for third-party

00:19:12.710 --> 00:19:15.500
developers is our pub package
management system.

00:19:15.500 --> 00:19:19.540
And that's a great topic here
for our guests Bob and Nathan

00:19:19.540 --> 00:19:21.420
and then Kevin.

00:19:21.420 --> 00:19:23.540
So Bob and Nathan, you guys
are working on pub.

00:19:23.540 --> 00:19:27.750
And Kevin, you've put forth a
proposal standard for what

00:19:27.750 --> 00:19:29.260
these packages might
actually look like.

00:19:29.260 --> 00:19:30.230
So let's dive into--

00:19:30.230 --> 00:19:31.370
BOB NYSTROM: Which is
awesome, by the way.

00:19:31.370 --> 00:19:32.834
SETH LADD: Yeah, good job.

00:19:32.834 --> 00:19:33.820
KEVIN MOORE: Thank you.

00:19:33.820 --> 00:19:35.430
SETH LADD: Let's get started
a little bit.

00:19:35.430 --> 00:19:37.650
Bob and Nathan, can you spend
just a minute talking about

00:19:37.650 --> 00:19:38.920
what pub is?

00:19:38.920 --> 00:19:40.425
What is this going to mean
to the Dart developer?

00:19:43.640 --> 00:19:45.190
NATHAN WEIZENBAUM: Pub
is a package manager.

00:19:45.190 --> 00:19:51.680
So fundamentally, it's a
way of declaring which

00:19:51.680 --> 00:19:59.060
dependencies your library or
application uses, and fetching

00:19:59.060 --> 00:20:01.960
those dependencies from an
external source, and

00:20:01.960 --> 00:20:05.330
installing them so that they're
available locally.

00:20:05.330 --> 00:20:07.280
BOB NYSTROM: And dealing
with versions.

00:20:07.280 --> 00:20:10.290
NATHAN WEIZENBAUM: It handles
version constraints so you can

00:20:10.290 --> 00:20:16.170
say, I rely on version greater
than or equal to 1.0 of this

00:20:16.170 --> 00:20:21.920
package and less than or equal
to 2.5 of this other package.

00:20:21.920 --> 00:20:26.420
And it'll traverse the whole
dependency tree of everything

00:20:26.420 --> 00:20:29.930
that those packages depend on,
and just figure out a whole

00:20:29.930 --> 00:20:36.170
constellation of packages at
specific versions that will

00:20:36.170 --> 00:20:38.240
work for your app.

00:20:38.240 --> 00:20:42.340
It'll be able to update
packages to the latest

00:20:42.340 --> 00:20:43.715
versions when you
want to do that.

00:20:46.500 --> 00:20:53.230
So right now, it can install
packages from git repositories

00:20:53.230 --> 00:20:55.520
and from the Dart SDK.

00:20:55.520 --> 00:21:04.700
We are working on getting
a package repository on

00:21:04.700 --> 00:21:10.410
dartlang.org up and running that
will eventually have a

00:21:10.410 --> 00:21:16.630
way for Dart developers out in
the wild to create packages,

00:21:16.630 --> 00:21:19.680
upload them there, and make them
available for other Dart

00:21:19.680 --> 00:21:22.980
developers to use.

00:21:22.980 --> 00:21:24.130
And it's pretty exciting.

00:21:24.130 --> 00:21:31.400
It's an important step on the
road to an ecosystem of

00:21:31.400 --> 00:21:34.270
libraries available for Dart
developers to use.

00:21:37.280 --> 00:21:38.820
SETH LADD: One of the first
packages that I think we'll

00:21:38.820 --> 00:21:41.170
see is Kevin's Dart lib.

00:21:41.170 --> 00:21:44.445
And maybe that will conform to
his proposed standard for what

00:21:44.445 --> 00:21:45.180
a package looks like.

00:21:45.180 --> 00:21:48.700
So I find it interesting that
pub is about pulling a package

00:21:48.700 --> 00:21:51.680
down and making it available
to your programs so you can

00:21:51.680 --> 00:21:52.380
easily import it.

00:21:52.380 --> 00:21:54.820
But it doesn't really speak too
much about what's inside

00:21:54.820 --> 00:21:55.230
the package.

00:21:55.230 --> 00:21:56.600
And I think that's where
Kevin comes in.

00:21:56.600 --> 00:22:00.420
So Kevin, can you give us an
idea of what your idea of what

00:22:00.420 --> 00:22:01.330
a package looks like?

00:22:01.330 --> 00:22:02.670
What are some of the
assets in there?

00:22:02.670 --> 00:22:03.460
How do they relate?

00:22:03.460 --> 00:22:05.450
And what would you
like to see?

00:22:05.450 --> 00:22:07.730
KEVIN MOORE: Absolutely.

00:22:07.730 --> 00:22:11.022
I've spent time in a lot of
different worlds, obviously in

00:22:11.022 --> 00:22:15.190
the .NET world, and they have
their NuGet solution, which

00:22:15.190 --> 00:22:17.280
has come on in the last--

00:22:17.280 --> 00:22:19.780
oh, lord-- year now, and has
made a lot of inroads.

00:22:19.780 --> 00:22:23.000
And obviously, anyone who's done
node, is familiar with

00:22:23.000 --> 00:22:26.490
MPM-- and RubyGems been around
for a long time.

00:22:26.490 --> 00:22:27.970
And actually, one of the
first things I said was

00:22:27.970 --> 00:22:30.420
please make pub more--

00:22:30.420 --> 00:22:33.800
not only do what RubyGems does,
but do more what bundler

00:22:33.800 --> 00:22:35.180
does-- again, for those
that are familiar

00:22:35.180 --> 00:22:36.640
with the Ruby world--

00:22:36.640 --> 00:22:39.250
because bundler goes to the next
step in making sure that

00:22:39.250 --> 00:22:40.410
you understand what
you install,

00:22:40.410 --> 00:22:41.900
you understand versions.

00:22:41.900 --> 00:22:43.930
And it's a really powerful
solution.

00:22:43.930 --> 00:22:46.880
So I was super excited to see
that we were just discussing

00:22:46.880 --> 00:22:51.110
before we went live here that
I think for a lot of people,

00:22:51.110 --> 00:22:53.200
this notion of package
management, dependency

00:22:53.200 --> 00:22:56.450
management, is now in the top
list, along with you better to

00:22:56.450 --> 00:22:59.830
have a collection class and
a model for events.

00:22:59.830 --> 00:23:01.080
Yes, that is a shameless dig.

00:23:04.250 --> 00:23:05.500
BOB NYSTROM: We need to get all
the right people in the

00:23:05.500 --> 00:23:06.830
right room for that.

00:23:06.830 --> 00:23:08.080
KEVIN MOORE: Exactly.

00:23:10.750 --> 00:23:13.580
The pub spec talked a lot about
how do you get source

00:23:13.580 --> 00:23:17.160
down and define your
dependencies, which is great.

00:23:17.160 --> 00:23:20.120
But one of the nice things that
are bad things in the

00:23:20.120 --> 00:23:21.500
Ruby world, at least--

00:23:21.500 --> 00:23:24.330
and this probably applies to
other things-- is there's many

00:23:24.330 --> 00:23:26.950
ways to lay out your directory
and your assets within a

00:23:26.950 --> 00:23:29.260
package or within a gem
or whatever else.

00:23:29.260 --> 00:23:32.390
And having a decent convention
around that is really helpful.

00:23:32.390 --> 00:23:35.060
So an example would be if
I had to find a GitHub

00:23:35.060 --> 00:23:38.100
repository for a package.

00:23:38.100 --> 00:23:40.490
As someone that browses in
GitHub, I want to see samples

00:23:40.490 --> 00:23:41.110
for that library.

00:23:41.110 --> 00:23:43.580
I want to see tests
for that library.

00:23:43.580 --> 00:23:46.620
I want to see I for that
library, all these things.

00:23:46.620 --> 00:23:49.220
But I think that dependency on
that library in terms of the

00:23:49.220 --> 00:23:53.200
code I access, it's nice that
there's an explicit notion of

00:23:53.200 --> 00:23:55.190
the code I'm importing is
everything in the lib

00:23:55.190 --> 00:23:57.610
directory and only in
the lib directory.

00:23:57.610 --> 00:24:01.645
And so having those things be
laid out and at least having a

00:24:01.645 --> 00:24:03.230
convention around it
is super useful.

00:24:03.230 --> 00:24:07.000
And so I created a package
called Dart blank lib, which

00:24:07.000 --> 00:24:09.200
plays off the Dart lib
library I made, which

00:24:09.200 --> 00:24:10.490
actually has content.

00:24:10.490 --> 00:24:13.440
And Dart blank lib
is a few things.

00:24:13.440 --> 00:24:16.590
One, it's a straw man of
how I think a package

00:24:16.590 --> 00:24:17.380
could be laid out.

00:24:17.380 --> 00:24:21.440
And once pub moves further in
the pub spec, file format

00:24:21.440 --> 00:24:23.940
moves forward, that'll get
updated to match that.

00:24:23.940 --> 00:24:25.730
And it's also I think really
useful for anyone that just

00:24:25.730 --> 00:24:26.900
wants to start with a library.

00:24:26.900 --> 00:24:31.410
It starts with a silly, simple,
stupid [? live ?] lib.

00:24:31.410 --> 00:24:32.720
I think it just adds two
numbers together.

00:24:32.720 --> 00:24:33.990
It has a little sample app.

00:24:33.990 --> 00:24:36.940
It actually has a unittest that
verifies that I can add

00:24:36.940 --> 00:24:39.310
two numbers together, again,
really difficult.

00:24:39.310 --> 00:24:42.640
The idea is instead of just
forking this, you download it,

00:24:42.640 --> 00:24:45.590
extract it, rename
things as you go.

00:24:45.590 --> 00:24:48.060
But then things are
laid out in a

00:24:48.060 --> 00:24:49.410
reasonable set of defaults.

00:24:49.410 --> 00:24:51.300
Again, this is not
agreed upon.

00:24:51.300 --> 00:24:55.490
But it lends nicely with what we
have in the RubyGems world

00:24:55.490 --> 00:24:58.760
and the NuGet world and the MPM
world, and Python world

00:24:58.760 --> 00:24:59.880
for that matter.

00:24:59.880 --> 00:25:01.490
So I think it's a good place
for people to start.

00:25:01.490 --> 00:25:03.170
And hopefully, its pub
spec and other

00:25:03.170 --> 00:25:05.400
things evolve forward.

00:25:05.400 --> 00:25:07.290
That will evolve as well
and tighten up.

00:25:07.290 --> 00:25:10.080
And I'm always happy
to get feedback.

00:25:10.080 --> 00:25:12.220
SETH LADD: And did you mention
this is on GitHub, that you

00:25:12.220 --> 00:25:12.950
can find it how?

00:25:12.950 --> 00:25:13.270
KEVIN MOORE: Yep.

00:25:13.270 --> 00:25:14.600
We'll post a link.

00:25:14.600 --> 00:25:16.860
It's under Kevmoo, is
my account GitHub.

00:25:16.860 --> 00:25:19.080
And so a bunch of my [INAUDIBLE]
is there.

00:25:19.080 --> 00:25:21.180
And that's one of them.

00:25:21.180 --> 00:25:23.710
SETH LADD: Speaking of Dart fun,
you mentioned Dart lib,

00:25:23.710 --> 00:25:26.140
that you extracted this
Dart blank lib from.

00:25:26.140 --> 00:25:29.240
What is Dart lib?

00:25:29.240 --> 00:25:32.060
KEVIN MOORE: I spent a few
years at Microsoft, about

00:25:32.060 --> 00:25:34.480
three, working on their
frameworks, working on some of

00:25:34.480 --> 00:25:36.000
their GUI frameworks.

00:25:36.000 --> 00:25:41.450
And so I really got into this
framework state of mind around

00:25:41.450 --> 00:25:42.970
how do you think about
factoring out

00:25:42.970 --> 00:25:45.380
code, making it reusable?

00:25:45.380 --> 00:25:47.400
And in the .NET world, I ran
forward and did something

00:25:47.400 --> 00:25:49.080
called the bag of tricks, which
a lot of people played

00:25:49.080 --> 00:25:51.010
with, related to Silverlight
and [INAUDIBLE]

00:25:51.010 --> 00:25:53.045
and other .NET things.

00:25:53.045 --> 00:25:54.970
When I started doing JavaScript
work, I made a

00:25:54.970 --> 00:25:59.080
closure library, closure
compiler library, related to a

00:25:59.080 --> 00:26:02.390
bunch of work that my company
did, Pixel Lab.

00:26:02.390 --> 00:26:04.230
And so I wanted to play that
forward into Dart.

00:26:04.230 --> 00:26:08.270
And so Dart lib is basically a
collection of stuff, most of

00:26:08.270 --> 00:26:10.270
which I think is pretty
reasonable to say this is

00:26:10.270 --> 00:26:11.280
relatively common.

00:26:11.280 --> 00:26:14.170
And so by doing a bunch
of work on--

00:26:14.170 --> 00:26:17.190
I'm calling it innumerable to
map to the .NET model so that

00:26:17.190 --> 00:26:24.200
you can do chained .where,
.from, .select, .average, some

00:26:24.200 --> 00:26:26.290
of the things you're used to
with links index and .NET,

00:26:26.290 --> 00:26:27.980
along with some other
collection helpers.

00:26:27.980 --> 00:26:30.250
I have a whole retained graphics
model that plays on

00:26:30.250 --> 00:26:32.760
top of canvas that has hit
testing and some other things

00:26:32.760 --> 00:26:34.160
I'm playing with.

00:26:34.160 --> 00:26:36.715
So basically, I'm working on my
own little project for fun.

00:26:36.715 --> 00:26:39.670
It's an idea I've had for almost
10 years now about

00:26:39.670 --> 00:26:43.020
simulating and playing with
different election methods,

00:26:43.020 --> 00:26:44.080
voting methods.

00:26:44.080 --> 00:26:44.870
[INAUDIBLE]

00:26:44.870 --> 00:26:45.720
moderator works.

00:26:45.720 --> 00:26:49.550
And so as I'm running with that
vote.dart project, I call

00:26:49.550 --> 00:26:51.200
it, I'm adding things
to Dart lib.

00:26:51.200 --> 00:26:55.440
And the idea is if people want
size and repped, if they want

00:26:55.440 --> 00:26:58.070
an event model, a disposable
model, it's always good to

00:26:58.070 --> 00:27:00.440
share these concepts and not
be reinventing the wheel.

00:27:00.440 --> 00:27:02.170
So I'm using it for
my projects.

00:27:02.170 --> 00:27:04.260
I've already taken a few patches
from some other folks.

00:27:04.260 --> 00:27:06.960
And I'm happy to collaborate
with others.

00:27:06.960 --> 00:27:10.200
Please forks and
hold requests.

00:27:10.200 --> 00:27:12.860
I'm excited to expand out some
of these base libraries.

00:27:12.860 --> 00:27:17.810
And certainly what makes the
.NET world awesome and MPM and

00:27:17.810 --> 00:27:20.060
RubyGems, there always seems
to be this handful of

00:27:20.060 --> 00:27:21.640
libraries that everyone uses.

00:27:21.640 --> 00:27:22.890
And it makes just--

00:27:26.420 --> 00:27:27.500
even with the sink included.

00:27:27.500 --> 00:27:29.200
And so this adds some nice
chrome to the sink and a

00:27:29.200 --> 00:27:32.140
shower and a stove.

00:27:32.140 --> 00:27:34.420
And hopefully it will make using
Dart more fun and more

00:27:34.420 --> 00:27:35.960
productive for a
lot of people.

00:27:35.960 --> 00:27:38.830
SETH LADD: I think it not only
reduces the amount of work you

00:27:38.830 --> 00:27:41.090
have to do to get started with
the project, but it's really

00:27:41.090 --> 00:27:43.980
nice to have these common bits
of functionality across Dart

00:27:43.980 --> 00:27:46.370
projects so that a Dart
developer can approach

00:27:46.370 --> 00:27:48.440
multiple different projects
and feel more

00:27:48.440 --> 00:27:49.470
comfortable more quickly.

00:27:49.470 --> 00:27:52.390
So I think there's a lot there
when you have that convention

00:27:52.390 --> 00:27:55.390
over configuration, or just
simply the shared convention

00:27:55.390 --> 00:27:57.140
of what the common
libraries are.

00:27:57.140 --> 00:27:58.430
So definitely, thank
you for that.

00:27:58.430 --> 00:28:00.200
And it's really cool to see
that you're already taking

00:28:00.200 --> 00:28:01.620
patches for that.

00:28:01.620 --> 00:28:05.790
The question I love to ask our
external community members is

00:28:05.790 --> 00:28:08.130
what is some of the things you'd
like to see from the

00:28:08.130 --> 00:28:09.330
Dart project?

00:28:09.330 --> 00:28:10.200
You've written a lot of code.

00:28:10.200 --> 00:28:11.450
I'm sure you have
a couple ideas.

00:28:15.050 --> 00:28:16.600
KEVIN MOORE: What would I like
to see from the Dart project?

00:28:16.600 --> 00:28:21.370
I actually started writing
a list of these things.

00:28:21.370 --> 00:28:26.810
There's some outstanding bugs
around field instantiate,

00:28:26.810 --> 00:28:30.120
final static variables with
const, and this weirdness

00:28:30.120 --> 00:28:32.470
there that's causing some issues
in my own library.

00:28:32.470 --> 00:28:34.200
I'd love to see--

00:28:34.200 --> 00:28:34.940
go ahead.

00:28:34.940 --> 00:28:37.270
BOB NYSTROM: Is it that you want
non-const final statics?

00:28:40.770 --> 00:28:41.250
KEVIN MOORE: Both, actually.

00:28:41.250 --> 00:28:43.220
Const final statics
don't work yet.

00:28:43.220 --> 00:28:45.126
There's bugs on it that I'm
tracking, and just waiting for

00:28:45.126 --> 00:28:47.070
those to be resolved.

00:28:47.070 --> 00:28:49.600
If anyone loads up
the Dart lib--

00:28:49.600 --> 00:28:54.700
and actually, you get errors
in the Dart editor.

00:28:54.700 --> 00:28:55.830
Thankfully, it [INAUDIBLE]

00:28:55.830 --> 00:28:56.490
everything works.

00:28:56.490 --> 00:28:59.050
But you'll see all kinds
of errors come up.

00:28:59.050 --> 00:29:02.900
Other things that've been
discussed are being able to do

00:29:02.900 --> 00:29:05.540
[? key ?] statements against
classes, so emulate what an

00:29:05.540 --> 00:29:06.920
[? enum ?] is.

00:29:06.920 --> 00:29:09.150
I think those issues are
being tracked there.

00:29:09.150 --> 00:29:11.560
BOB NYSTROM: That actually does
work now and is going to

00:29:11.560 --> 00:29:14.460
stop working.

00:29:14.460 --> 00:29:15.340
KEVIN MOORE: I get warnings
on it now.

00:29:15.340 --> 00:29:16.860
So you're saying it's
actually going to

00:29:16.860 --> 00:29:17.980
completely stop working?

00:29:17.980 --> 00:29:20.730
BOB NYSTROM: So right now in
Dart, you can do the Java type

00:29:20.730 --> 00:29:21.320
safety [? node ?]

00:29:21.320 --> 00:29:24.590
pattern where you have an
[? enum ?] like class that has

00:29:24.590 --> 00:29:26.110
static instances of itself.

00:29:26.110 --> 00:29:29.320
And then you can switch
on those.

00:29:29.320 --> 00:29:33.780
And the changes we're making to
switch to constrain it will

00:29:33.780 --> 00:29:36.570
I think at least until it's
been specified right now

00:29:36.570 --> 00:29:38.380
nullify that pattern,
unfortunately.

00:29:38.380 --> 00:29:41.030
But I know they're talking about
loosing it up a bit to

00:29:41.030 --> 00:29:42.350
basically keep that working.

00:29:45.510 --> 00:29:47.130
KEVIN MOORE: So I pre-file
my bug now?

00:29:52.170 --> 00:29:53.400
We joke around about
that stuff.

00:29:53.400 --> 00:29:56.890
Obviously, I think the Dart team
is doing a good job to

00:29:56.890 --> 00:29:58.330
keep the first release tight.

00:29:58.330 --> 00:29:59.580
BOB NYSTROM: [INAUDIBLE].

00:30:01.370 --> 00:30:01.980
KEVIN MOORE: Go ahead.

00:30:01.980 --> 00:30:03.750
[? BOB NYSTROM: Enums ?]
are a valid concern.

00:30:03.750 --> 00:30:06.260
And at least we had a
pattern for a while.

00:30:06.260 --> 00:30:10.270
So I think it's a gap that we
know we want to fill somehow.

00:30:10.270 --> 00:30:14.410
And I just don't know if we've
really filled it yet.

00:30:14.410 --> 00:30:16.520
KEVIN MOORE: I'll take no
solution in the short term

00:30:16.520 --> 00:30:17.810
better than a broken
solution that we

00:30:17.810 --> 00:30:20.010
have to support forever.

00:30:20.010 --> 00:30:23.330
So that's awesome.

00:30:23.330 --> 00:30:25.000
Oh, and really quickly, we
talked about an event model

00:30:25.000 --> 00:30:26.860
which people discussed.

00:30:26.860 --> 00:30:29.040
I have an implementation
that basically maps

00:30:29.040 --> 00:30:30.010
to the closure library.

00:30:30.010 --> 00:30:31.980
It actually allows my code to
just map to what the closure

00:30:31.980 --> 00:30:34.230
[INAUDIBLE] have done.

00:30:34.230 --> 00:30:35.820
So having that formalized, I
think that's something that

00:30:35.820 --> 00:30:39.160
would be actually good to have
in the core framework.

00:30:39.160 --> 00:30:41.040
And then these other things
that've been discussed a lot,

00:30:41.040 --> 00:30:42.950
I'd love to have generic
methods.

00:30:42.950 --> 00:30:44.890
That's something that's brought
up by a few people.

00:30:44.890 --> 00:30:47.420
And so those aren't super
needed for B1.

00:30:47.420 --> 00:30:50.720
Obviously, that's something
that can be added later.

00:30:50.720 --> 00:30:55.510
And then related to the mixins
thing, I'd much rather have

00:30:55.510 --> 00:30:58.430
extension methods, which is a
model that is exists in C#.

00:30:58.430 --> 00:31:00.600
But obviously, for a lot of
these things, a lot of people

00:31:00.600 --> 00:31:02.630
just want their pet feature from
their favorite language.

00:31:02.630 --> 00:31:06.170
And if it doesn't gel, we'll
always be mad, but we have to

00:31:06.170 --> 00:31:07.450
stick to the spirit
of the language.

00:31:07.450 --> 00:31:11.020
So I'm not expecting 100%
alignment with everything I

00:31:11.020 --> 00:31:11.775
love about .NET.

00:31:11.775 --> 00:31:13.680
Because at the same time, I can
run it in a browser, which

00:31:13.680 --> 00:31:15.250
I can't do with C#.

00:31:15.250 --> 00:31:19.281
So I'll take the good
with the bad.

00:31:19.281 --> 00:31:20.000
SETH LADD: Good list.

00:31:20.000 --> 00:31:20.240
Thanks.

00:31:20.240 --> 00:31:21.410
And it sounds like you're
already plugged in to the

00:31:21.410 --> 00:31:22.150
issue tracker.

00:31:22.150 --> 00:31:22.970
And that's the best way.

00:31:22.970 --> 00:31:27.430
And so if you, watching this at
home, have ideas, certainly

00:31:27.430 --> 00:31:32.150
join the mailing list,
dartlang.org/mailing-list, or

00:31:32.150 --> 00:31:34.495
you can file issues and
bugs at dartbug.com.

00:31:34.495 --> 00:31:36.750
So lots of good ways to
get a hold of us.

00:31:36.750 --> 00:31:38.490
It's an all and open
source project.

00:31:38.490 --> 00:31:41.520
And we have lots of engineers
active on the mailing list and

00:31:41.520 --> 00:31:42.280
answering the issues.

00:31:42.280 --> 00:31:46.620
So we'd love to hear what you
have on your short list of

00:31:46.620 --> 00:31:49.130
things you want to see
for the project.

00:31:49.130 --> 00:31:50.990
We should probably also mention,
before we move into

00:31:50.990 --> 00:31:57.050
the Q&amp;A section here, is that
pubs in the SDK today-- and as

00:31:57.050 --> 00:31:58.960
Nathan mentioned, you can
install stuff from git now.

00:31:58.960 --> 00:32:01.370
So you have the bases of
pub are there working.

00:32:01.370 --> 00:32:05.170
Kevin's start lib is there,
working on GitHub.

00:32:05.170 --> 00:32:06.390
You can pull that down
and play with that.

00:32:06.390 --> 00:32:09.130
So a lot of the stuff we're
talking about today is

00:32:09.130 --> 00:32:11.870
operational in some form and
coming online very quickly.

00:32:11.870 --> 00:32:15.460
And so it's definitely a good
place for you guys to play,

00:32:15.460 --> 00:32:18.020
experiment, try your libraries,
and then give us

00:32:18.020 --> 00:32:22.390
that feedback as we roll into
this M1 phase of the project.

00:32:22.390 --> 00:32:24.900
BOB NYSTROM: I will throw out
the caveat, though, that

00:32:24.900 --> 00:32:26.430
you're certainly welcome
to start poking at

00:32:26.430 --> 00:32:30.900
pub, but it's at 0.0.0.

00:32:30.900 --> 00:32:31.990
We're still in active
development.

00:32:31.990 --> 00:32:36.170
So we reserve the right to break
everything, set your

00:32:36.170 --> 00:32:37.420
computer on fire.

00:32:41.180 --> 00:32:44.245
KEVIN MOORE: Don't close
[? the bet. ?]

00:32:44.245 --> 00:32:45.590
BOB NYSTROM: You're certainly
welcome to try it out.

00:32:45.590 --> 00:32:50.220
But you're taking your life into
your own hands if you do.

00:32:50.220 --> 00:32:52.320
Hopefully, it won't set
your computer on fire.

00:32:52.320 --> 00:32:52.830
SETH LADD: Right.

00:32:52.830 --> 00:32:54.480
Yeah, I don't think we have
that bit enabled.

00:32:54.480 --> 00:32:58.770
But the flip side of that is
it's a good opportunity to try

00:32:58.770 --> 00:33:00.770
it out and let us know what
are the use cases that you

00:33:00.770 --> 00:33:02.090
need to get solved.

00:33:02.090 --> 00:33:05.040
Because now we can take the
opportunity to break stuff to

00:33:05.040 --> 00:33:06.650
make sure we hit those
major use cases.

00:33:06.650 --> 00:33:09.240
So I think that's, to me, what
keeps this project really

00:33:09.240 --> 00:33:11.150
exciting right now is
that, yes, things

00:33:11.150 --> 00:33:12.400
are moving very quickly.

00:33:12.400 --> 00:33:15.360
But you're part of something
new, something that's going to

00:33:15.360 --> 00:33:17.320
be big, right at the
early stages.

00:33:17.320 --> 00:33:20.800
And that's really exciting, to
see it be born and grow, and

00:33:20.800 --> 00:33:24.000
maybe even help influence
its design.

00:33:24.000 --> 00:33:25.510
So we've got a couple questions
from the moderator

00:33:25.510 --> 00:33:26.040
for you guys.

00:33:26.040 --> 00:33:27.420
Let's see if we can answer
some of these.

00:33:27.420 --> 00:33:29.100
These are all voted up
from the community.

00:33:29.100 --> 00:33:31.575
We've already answered
some of them.

00:33:31.575 --> 00:33:35.610
But this one comes up a lot,
is the Dart widget control

00:33:35.610 --> 00:33:35.890
[INAUDIBLE]

00:33:35.890 --> 00:33:39.470
library on the roadmap based
on closure library

00:33:39.470 --> 00:33:40.520
or a port of it?

00:33:40.520 --> 00:33:42.950
And do we have any
sort of timing?

00:33:42.950 --> 00:33:44.400
I know that the Seattle
team's working on

00:33:44.400 --> 00:33:45.710
some sort of UI library.

00:33:45.710 --> 00:33:47.270
You guys are there in Seattle.

00:33:47.270 --> 00:33:50.880
Have you see anything happen
there, or what's going on?

00:33:50.880 --> 00:33:52.150
BOB NYSTROM: I definitely
see stuff happening.

00:33:52.150 --> 00:33:55.500
There are people
working on it.

00:33:55.500 --> 00:33:59.410
As far as whether it's based on
closure, it's maybe heavily

00:33:59.410 --> 00:34:01.480
inspired by closures is
a good description.

00:34:01.480 --> 00:34:02.930
It's not a straight port.

00:34:02.930 --> 00:34:04.630
And I don't think there's an
intention for it to be a

00:34:04.630 --> 00:34:05.510
straight port.

00:34:05.510 --> 00:34:09.060
But I think closure is probably
the widget framework

00:34:09.060 --> 00:34:12.540
that is the closest mental model
at hand when they're

00:34:12.540 --> 00:34:14.600
designing that stuff.

00:34:14.600 --> 00:34:18.320
As far as roadmap and timeframe,
there's the usual

00:34:18.320 --> 00:34:21.526
we don't usually make
predictions stuff.

00:34:21.526 --> 00:34:25.010
We'd like it really soon because
we know people totally

00:34:25.010 --> 00:34:26.000
want it really bad.

00:34:26.000 --> 00:34:28.880
And we'd like it to
be out there.

00:34:28.880 --> 00:34:31.449
But I don't know what
the timing is.

00:34:31.449 --> 00:34:33.929
SETH LADD: And I think, again,
it helps when the language

00:34:33.929 --> 00:34:36.050
settles down a little bit,
and then the library.

00:34:36.050 --> 00:34:38.230
So these things build
on each other.

00:34:38.230 --> 00:34:40.575
And just to me, at the top,
really, is that UI library.

00:34:40.575 --> 00:34:42.949
So a lot of stuff I think has
to happen before that lands.

00:34:42.949 --> 00:34:46.310
But there are a bunch of open
source projects out there that

00:34:46.310 --> 00:34:49.190
are trying to build a
MVVM framework too.

00:34:49.190 --> 00:34:51.820
So it doesn't have to come
from the Dart project

00:34:51.820 --> 00:34:53.699
necessarily for you guys
to get started.

00:34:53.699 --> 00:34:55.739
We mentioned John Evans
with Buckshot.

00:34:55.739 --> 00:34:58.650
Another one we just saw came out
yesterday on git release--

00:34:58.650 --> 00:35:00.240
we just found on GitHub
yesterday--

00:35:00.240 --> 00:35:02.622
I think it's Dart MVVM.

00:35:02.622 --> 00:35:05.110
There's a port of pure MVC.

00:35:05.110 --> 00:35:06.360
I'm sure there's others.

00:35:06.360 --> 00:35:08.450
Chris Buckett has a good list
of community projects.

00:35:08.450 --> 00:35:10.090
So in other words, there are
options out there if you guys

00:35:10.090 --> 00:35:10.550
are interested.

00:35:10.550 --> 00:35:14.080
And Kevin with his Dart lib is
taking cues and inspiration

00:35:14.080 --> 00:35:15.100
from closure as well.

00:35:15.100 --> 00:35:18.980
And so I think there's a lot to
get started with, for sure.

00:35:18.980 --> 00:35:19.230
Let's see.

00:35:19.230 --> 00:35:21.680
Neo from New York City writes,
is Google eating its own dog

00:35:21.680 --> 00:35:24.940
food by using Dart internally
on Google projects?

00:35:24.940 --> 00:35:28.350
So while we won't comment on any
internal projects, we can

00:35:28.350 --> 00:35:31.010
say there are internal teams
checking out Dart and giving

00:35:31.010 --> 00:35:32.950
us good feedback.

00:35:32.950 --> 00:35:35.480
The tricky part there is that,
as you can probably imagine,

00:35:35.480 --> 00:35:39.740
the Google infrastructure has
a unique set of constraints.

00:35:39.740 --> 00:35:43.740
And so we try to balance
building Dart for our open

00:35:43.740 --> 00:35:46.450
source developers, the external
developers, who we

00:35:46.450 --> 00:35:48.880
really see as our primary
audience, but also try to

00:35:48.880 --> 00:35:50.730
balance that with our internal
customer needs.

00:35:50.730 --> 00:35:52.870
And so we play this tricky
balancing game.

00:35:52.870 --> 00:35:54.670
But there are internal
teams looking at it.

00:35:54.670 --> 00:35:58.310
But I think we're squarely
interested in making this and

00:35:58.310 --> 00:36:02.520
keeping this an open source
project for all developers out

00:36:02.520 --> 00:36:03.300
there to use.

00:36:03.300 --> 00:36:05.750
And that's one of the things
that excites me at least about

00:36:05.750 --> 00:36:08.400
Dart because it's not just
for Google by Google.

00:36:08.400 --> 00:36:11.460
This is really to help all
developers, not just even

00:36:11.460 --> 00:36:13.430
endemic web developers,
to build awesome

00:36:13.430 --> 00:36:16.150
stuff for the web.

00:36:16.150 --> 00:36:19.570
John Evans writes, how is pub
for Windows coming along?

00:36:19.570 --> 00:36:22.600
Guys, guys?

00:36:22.600 --> 00:36:24.710
BOB NYSTROM: Every day or two,
Nathan and I poke each other

00:36:24.710 --> 00:36:27.590
and say, not it.

00:36:27.590 --> 00:36:29.530
The actual quantity of work that
we need to do for Windows

00:36:29.530 --> 00:36:30.680
support is pretty small.

00:36:30.680 --> 00:36:34.270
There's a couple of places in
the code base that don't work.

00:36:34.270 --> 00:36:35.750
And we have to fix those.

00:36:35.750 --> 00:36:37.530
So basically when it's shelling
out to a couple of

00:36:37.530 --> 00:36:42.020
things, we need to do some
Windows specific stuff there.

00:36:42.020 --> 00:36:47.480
And we will do that
relatively soon.

00:36:47.480 --> 00:36:48.870
I'm not sure what the
timeframe is.

00:36:48.870 --> 00:36:52.440
But probably the best way to
describe this is we don't

00:36:52.440 --> 00:36:55.200
officially support any operating
system with pub.

00:36:55.200 --> 00:36:56.320
It's still under development.

00:36:56.320 --> 00:36:57.570
SETH LADD: How convenient.

00:36:59.590 --> 00:37:03.610
BOB NYSTROM: But definitely,
I can say for me, I'm very

00:37:03.610 --> 00:37:07.120
cognizant that the longer we
delay working on Windows, the

00:37:07.120 --> 00:37:08.690
more technical debt
we're accruing.

00:37:08.690 --> 00:37:11.130
And I don't want to be
deep in that hole.

00:37:11.130 --> 00:37:13.970
So right now, I don't have
a lot of time to

00:37:13.970 --> 00:37:14.610
be working on pub.

00:37:14.610 --> 00:37:16.850
But as soon as I can get back to
it, it's really high on my

00:37:16.850 --> 00:37:18.510
list of stuff that
I want to do.

00:37:18.510 --> 00:37:22.590
Because I think it's very
important for pub to be a good

00:37:22.590 --> 00:37:24.640
citizen and to work equally
well across

00:37:24.640 --> 00:37:26.310
all operating systems.

00:37:26.310 --> 00:37:28.020
NATHAN WEIZENBAUM: I don't think
we'll consider it done

00:37:28.020 --> 00:37:29.360
until it supports Windows.

00:37:29.360 --> 00:37:30.890
BOB NYSTROM: Definitely not.

00:37:30.890 --> 00:37:31.960
SETH LADD: I like
that mentality.

00:37:31.960 --> 00:37:34.880
And it's not an excuse or cop
out or anything, but I do want

00:37:34.880 --> 00:37:36.990
to say, of course, that
Dart is open source.

00:37:36.990 --> 00:37:40.010
And I believe the pub tool-- is
the pub tool in a separate

00:37:40.010 --> 00:37:41.210
repository?

00:37:41.210 --> 00:37:42.115
What is that?

00:37:42.115 --> 00:37:44.130
BOB NYSTROM: So pub is
in the main repo.

00:37:44.130 --> 00:37:45.710
And it has to be in
the main repo.

00:37:45.710 --> 00:37:49.580
If you imagine farther down the
future when Pub is closer

00:37:49.580 --> 00:37:52.030
to done, what you would
do is you would

00:37:52.030 --> 00:37:52.600
install the Dart SDK.

00:37:52.600 --> 00:37:53.160
SDK.

00:37:53.160 --> 00:37:57.250
And all that really needs to
include is a Dart VM and pub

00:37:57.250 --> 00:37:58.330
so that then you can
get all the other

00:37:58.330 --> 00:37:59.325
packages through pub.

00:37:59.325 --> 00:38:00.830
But pub does have to be there.

00:38:00.830 --> 00:38:05.120
It's part of your batteries
included bootstrap process.

00:38:05.120 --> 00:38:06.290
So Pub is in the main repo.

00:38:06.290 --> 00:38:10.010
But the hosting site, the
package hosting site we're

00:38:10.010 --> 00:38:12.660
working on, that Nathan's
working on, pub.dartlang.org,

00:38:12.660 --> 00:38:14.885
that's in a separate
repository.

00:38:14.885 --> 00:38:16.590
SETH LADD: That's what
I thought, OK.

00:38:16.590 --> 00:38:17.460
We take patches.

00:38:17.460 --> 00:38:19.820
I believe we've taken even a
patch from John and others.

00:38:19.820 --> 00:38:22.670
And so step on up, I guess.

00:38:22.670 --> 00:38:23.480
We'll definitely get to it.

00:38:23.480 --> 00:38:24.660
But it is open source.

00:38:24.660 --> 00:38:25.500
And we've taken patches.

00:38:25.500 --> 00:38:28.460
So that's cool.

00:38:28.460 --> 00:38:31.330
Lattice Lava, a guy really
active on the mailing list,

00:38:31.330 --> 00:38:34.000
writes, Dart's library system
is known to be changed

00:38:34.000 --> 00:38:35.480
sometime in the future.

00:38:35.480 --> 00:38:37.270
Are there any details
on that already?

00:38:37.270 --> 00:38:39.440
And will it allow creating a
package management system

00:38:39.440 --> 00:38:42.160
completely independent of the
language without the need to

00:38:42.160 --> 00:38:43.410
specify the package: scheme?

00:38:46.030 --> 00:38:48.210
Yeah, go ahead and see
if you can get that.

00:38:48.210 --> 00:38:50.080
NATHAN WEIZENBAUM: I think
package colon is going to be

00:38:50.080 --> 00:38:56.340
around for at least a while,
partially because of the

00:38:56.340 --> 00:39:04.200
constraints of supporting both
browser development and server

00:39:04.200 --> 00:39:05.900
side development.

00:39:05.900 --> 00:39:10.610
For the browser, it's very
important that the actual

00:39:10.610 --> 00:39:17.730
files that you use as your
libraries are available in a

00:39:17.730 --> 00:39:20.420
place that the web server can
see them and then serve them

00:39:20.420 --> 00:39:21.930
to the browser.

00:39:21.930 --> 00:39:25.560
And the package directory
solution does a good job of

00:39:25.560 --> 00:39:28.020
managing that.

00:39:28.020 --> 00:39:33.380
I think we have some hopes that
the syntax for it will

00:39:33.380 --> 00:39:40.080
evolve into something more
palatable, possibly even

00:39:40.080 --> 00:39:43.100
something that doesn't require
you to write package colon.

00:39:43.100 --> 00:39:45.960
But I think the fundamental
import structure will be

00:39:45.960 --> 00:39:48.800
pretty similar for the
foreseeable future.

00:39:48.800 --> 00:39:50.700
BOB NYSTROM: So the high level
goal that Lattice Lava is

00:39:50.700 --> 00:39:55.440
talking about is will Dart the
language support multiple

00:39:55.440 --> 00:39:57.130
independent package managers?

00:39:57.130 --> 00:40:00.400
And that was definitely a design
constraint when Kasper

00:40:00.400 --> 00:40:02.090
was coming up with the
package colon stuff.

00:40:02.090 --> 00:40:08.860
So the idea is we basically
need to have this minimum

00:40:08.860 --> 00:40:11.660
interface, this minimum level of
abstraction, that all Dart

00:40:11.660 --> 00:40:14.410
implementations support, and
that that gives you just

00:40:14.410 --> 00:40:16.240
enough of a port to
jam in your own

00:40:16.240 --> 00:40:17.570
package management system.

00:40:17.570 --> 00:40:21.420
And the package colon prefix,
as syntactically ugly as it

00:40:21.420 --> 00:40:23.950
is, is basically that port.

00:40:23.950 --> 00:40:29.990
So the idea is every Dart
implementation is hard coded

00:40:29.990 --> 00:40:34.060
to know what to do with a
package colon import.

00:40:34.060 --> 00:40:37.840
But all that does is swizzles
your URL to something.

00:40:37.840 --> 00:40:40.250
And you can implement your
own package manager.

00:40:40.250 --> 00:40:43.390
And as long as it generates
something that ends up at that

00:40:43.390 --> 00:40:46.100
swizzled URL, you can have
whatever incoming semantics

00:40:46.100 --> 00:40:47.900
you want for that.

00:40:47.900 --> 00:40:49.610
So that's the idea.

00:40:49.610 --> 00:40:52.480
It still doesn't feel
totally baked yet.

00:40:52.480 --> 00:40:55.160
And definitely, I would
certainly like the

00:40:55.160 --> 00:40:55.960
syntax to be better.

00:40:55.960 --> 00:40:58.670
And it's something that
I'm hoping we can

00:40:58.670 --> 00:40:59.915
turn the crank on.

00:40:59.915 --> 00:41:03.640
But there's never any timeframe
or anything.

00:41:03.640 --> 00:41:05.850
NATHAN WEIZENBAUM: I've
actually got to run.

00:41:05.850 --> 00:41:06.405
Goodbye, everyone.

00:41:06.405 --> 00:41:06.780
SETH LADD: All right.

00:41:06.780 --> 00:41:07.740
Thank you Nathan.

00:41:07.740 --> 00:41:10.040
And I think with that, we've
ran up most of the good

00:41:10.040 --> 00:41:11.350
questions on there.

00:41:11.350 --> 00:41:13.960
And I want to take again this
opportunity to thank all our

00:41:13.960 --> 00:41:16.150
special guests: Nathan,
Bob, Kevin.

00:41:16.150 --> 00:41:18.070
Thank you guys so much.

00:41:18.070 --> 00:41:21.920
Best of luck with pub, your talk
at OSCON, the hackathon

00:41:21.920 --> 00:41:23.370
this Saturday.

00:41:23.370 --> 00:41:24.950
I'll see you guys there,
and anyone else that's

00:41:24.950 --> 00:41:27.260
going to be there too.

00:41:27.260 --> 00:41:28.950
And just a lot of good stuff
happening around Dart.

00:41:28.950 --> 00:41:30.870
And so to follow along, of
course, we have the Dart

00:41:30.870 --> 00:41:35.390
mailing list, misc@dartlang.org.

00:41:35.390 --> 00:41:38.580
We have the issue tracker,
dartbug.com.

00:41:38.580 --> 00:41:43.410
Of course, the Google+ page,
+Dart, and the hashtag, which

00:41:43.410 --> 00:41:47.130
I see being used on Twitter
and Google+, #dartlang.

00:41:47.130 --> 00:41:48.770
So lots of ways to
follow along.

00:41:48.770 --> 00:41:49.880
And we'll do more of these.

00:41:49.880 --> 00:41:52.390
And so we hope to see you
next time at another

00:41:52.390 --> 00:41:53.980
broadcast of Dartisans.

00:41:53.980 --> 00:41:55.650
And we hope to see you
in the mailing list.

00:41:55.650 --> 00:41:57.330
And thank you for trying Dart.

00:41:57.330 --> 00:42:00.714
So thanks, guys, and we'll
see you next time.

00:42:00.714 --> 00:42:01.670
KEVIN MOORE: Take care.

00:42:01.670 --> 00:42:02.920
SETH LADD: Aloha.

