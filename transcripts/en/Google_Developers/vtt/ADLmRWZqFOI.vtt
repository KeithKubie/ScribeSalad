WEBVTT
Kind: captions
Language: en

00:00:09.020 --> 00:00:09.620
Hi everybody.

00:00:09.620 --> 00:00:12.810
Welcome to another edition
of YouTube Developers Live.

00:00:12.810 --> 00:00:14.170
My name's Ikai Lan.

00:00:14.170 --> 00:00:17.040
And today I'm going to
be showing you a trick

00:00:17.040 --> 00:00:19.340
that I use when I'm
writing Java code that

00:00:19.340 --> 00:00:23.670
makes YouTube data and
YouTube Analytics API calls.

00:00:23.670 --> 00:00:27.600
So why don't we go ahead
and switch or my screen?

00:00:27.600 --> 00:00:30.876
So if you've ever implemented
OAuth authorization

00:00:30.876 --> 00:00:32.750
in your code, you know
that this is something

00:00:32.750 --> 00:00:34.251
that you probably
don't commonly do.

00:00:34.251 --> 00:00:35.833
Now, this is something
that I commonly

00:00:35.833 --> 00:00:37.440
do because I'm
helping developers

00:00:37.440 --> 00:00:40.070
like yourself make this work.

00:00:40.070 --> 00:00:44.040
And our sample code uses a flow
known as a client secrets flow.

00:00:44.040 --> 00:00:47.170
Where you create a file
called clientsecrets.json,

00:00:47.170 --> 00:00:50.010
you forward someone through
a web flow, and after someone

00:00:50.010 --> 00:00:53.680
authorizes your channel you can
make API calls on their behalf.

00:00:53.680 --> 00:00:56.190
Now, this is good for a lot
of types of applications.

00:00:56.190 --> 00:00:58.420
But if you're doing
something like a bulk loader

00:00:58.420 --> 00:01:00.660
this is not going
to work very well.

00:01:00.660 --> 00:01:04.260
And the reason is you might
be running on a server

00:01:04.260 --> 00:01:05.770
where you don't
have a web server.

00:01:05.770 --> 00:01:10.520
Where you cannot simply
redirect someone to a web page

00:01:10.520 --> 00:01:11.865
in a browser.

00:01:11.865 --> 00:01:13.490
Now, there's a fairly
easy work around,

00:01:13.490 --> 00:01:17.800
which is that you can use
system.out.printline to print

00:01:17.800 --> 00:01:19.760
out the authorization
URL, copy it

00:01:19.760 --> 00:01:23.105
into your browser on your own
computer while you're SSH'd in,

00:01:23.105 --> 00:01:24.616
and copy paste it back.

00:01:24.616 --> 00:01:27.240
There's another flow which could
make this a little bit easier.

00:01:27.240 --> 00:01:30.360
Which is that instead
of writing the code

00:01:30.360 --> 00:01:33.190
to go ahead and help you
generate the refresh token,

00:01:33.190 --> 00:01:35.775
you can do this using a tool
called the OAuth Playground.

00:01:35.775 --> 00:01:37.441
Now, I've showed this
in different shows

00:01:37.441 --> 00:01:40.570
before because this is an
infinitely useful tool.

00:01:40.570 --> 00:01:42.960
So the first thing I'm going
to do is quickly show you

00:01:42.960 --> 00:01:46.150
how to generate a refresh
token in the OAuth Playground.

00:01:46.150 --> 00:01:49.839
So first off go to
the Google API console

00:01:49.839 --> 00:01:50.880
and create a new project.

00:01:50.880 --> 00:01:53.380
Now, this is the
new Cloud console.

00:01:53.380 --> 00:01:57.770
And you'll see it looks really
different from the old console.

00:01:57.770 --> 00:02:00.600
So I'm going to go ahead
and click Registered Apps,

00:02:00.600 --> 00:02:02.910
and I'm going to go into my app.

00:02:02.910 --> 00:02:05.330
I've created an
OAuth 2.0 client ID,

00:02:05.330 --> 00:02:09.410
I added a client ID
and a client secret.

00:02:09.410 --> 00:02:12.020
I've also force
added a redirect URI,

00:02:12.020 --> 00:02:16.560
I've set this to
 developers.google.com/oauthplayground.

00:02:16.560 --> 00:02:19.030
And the reason I've done
this is because we're

00:02:19.030 --> 00:02:21.470
going to do our authorization
in the OAuth 2.0 Playground.

00:02:21.470 --> 00:02:25.540
And after authorizing, we
want Google's API servers

00:02:25.540 --> 00:02:29.380
to say, yes, this is OK to send
you back there with the OAuth

00:02:29.380 --> 00:02:29.920
code.

00:02:29.920 --> 00:02:32.610
So now I'm going to go
to the OAuth Playground.

00:02:32.610 --> 00:02:34.660
I'm going to click
on the Settings icon.

00:02:34.660 --> 00:02:38.500
And I'm going to scroll down to
Use Your Own OAuth Credentials.

00:02:38.500 --> 00:02:40.460
I want to make sure
this is selected.

00:02:40.460 --> 00:02:43.740
And that once it's selected,
that these credentials here

00:02:43.740 --> 00:02:45.480
match up with the
credentials that I've

00:02:45.480 --> 00:02:48.840
created in the API console.

00:02:48.840 --> 00:02:50.040
I'm going to close this.

00:02:50.040 --> 00:02:52.000
Now I'm going to select
and authorize APIs.

00:02:52.000 --> 00:02:54.230
I'm going to scroll down.

00:02:54.230 --> 00:02:57.140
I'm going to select
the YouTube scope.

00:02:57.140 --> 00:03:00.090
I could use the sample
with just read-only scope.

00:03:00.090 --> 00:03:01.760
I'm going to click
Authorize APIs.

00:03:04.330 --> 00:03:06.980
And it's going to put me
through three legged OAuth flow.

00:03:06.980 --> 00:03:10.730
I'm going to go
ahead and Accept now.

00:03:10.730 --> 00:03:12.900
And this is going to give
me a refresh token as well

00:03:12.900 --> 00:03:14.460
as an access token.

00:03:14.460 --> 00:03:19.650
So now what I'm going to
use is the refresh token.

00:03:19.650 --> 00:03:21.380
So I'm going to copy this.

00:03:21.380 --> 00:03:24.240
Note that I'm going
to need three values.

00:03:24.240 --> 00:03:27.900
The refresh token, the
client ID, and client secret.

00:03:27.900 --> 00:03:30.450
I'm going to need
these in my code.

00:03:30.450 --> 00:03:34.670
Now, let's go ahead and
switch over to My IDE.

00:03:34.670 --> 00:03:37.850
Now, those of you that
have used Java before

00:03:37.850 --> 00:03:40.800
know that you use a YouTube
object, you use a builder.

00:03:40.800 --> 00:03:43.910
The builder you pass an HTTP
transport, a JSON factory,

00:03:43.910 --> 00:03:44.990
and a credential.

00:03:44.990 --> 00:03:47.790
And once you have that you can
just start making API calls.

00:03:47.790 --> 00:03:49.820
It's the credential
bit that's the hardest

00:03:49.820 --> 00:03:51.900
part to instantiate.

00:03:51.900 --> 00:03:54.150
So I'm going to go ahead
and demystify this for you

00:03:54.150 --> 00:03:55.850
guys today.

00:03:55.850 --> 00:03:57.930
I've created three variables.

00:03:57.930 --> 00:04:01.540
Client ID, which corresponds
to my client ID, client secret,

00:04:01.540 --> 00:04:03.370
same thing, and refresh token.

00:04:03.370 --> 00:04:07.010
And this refresh token the
value that I've gotten again

00:04:07.010 --> 00:04:08.660
in the OAuth 2.0 Playground.

00:04:08.660 --> 00:04:10.760
I've just copied and
pasted this value in.

00:04:13.757 --> 00:04:15.340
Now, what I'm going
to do is I'm going

00:04:15.340 --> 00:04:18.207
to create a new
credential object.

00:04:18.207 --> 00:04:19.790
And to create a new
credential object,

00:04:19.790 --> 00:04:23.730
I'm going to use a new
Google credential builder.

00:04:23.730 --> 00:04:26.820
I must set the transport,
which in an HTTP transport.

00:04:26.820 --> 00:04:29.070
And this you only need
one instance as well as

00:04:29.070 --> 00:04:29.980
a JSON factory.

00:04:29.980 --> 00:04:31.780
I'm setting this to
a Jackson factory.

00:04:31.780 --> 00:04:35.100
These are defaults that we
use in our code samples.

00:04:35.100 --> 00:04:37.475
I'm going to call,
Set Client Secrets.

00:04:37.475 --> 00:04:39.850
And I'm going to pass the
client ID as well as the client

00:04:39.850 --> 00:04:40.710
secret.

00:04:40.710 --> 00:04:42.410
I'm going to call .build.

00:04:42.410 --> 00:04:44.919
Now, this pattern, you
see this a lot in Java.

00:04:44.919 --> 00:04:46.460
This is known as
the builder pattern.

00:04:46.460 --> 00:04:48.990
And I want to say
it's popularized

00:04:48.990 --> 00:04:51.019
by Josh Bloch's
book, Effective Java.

00:04:51.019 --> 00:04:53.560
So if you're writing Java and
you haven't read that book yet,

00:04:53.560 --> 00:04:54.643
I highly recommend you do.

00:04:54.643 --> 00:04:57.630
There's a lot of great Java
code patterns in there.

00:04:57.630 --> 00:04:59.619
So I've created this
credential object.

00:04:59.619 --> 00:05:01.410
Now I'm going out to
set the refresh token.

00:05:01.410 --> 00:05:03.200
And I'm going to call,
Set Refresh Token.

00:05:05.720 --> 00:05:10.170
I could also call Set
Refresh Token here

00:05:10.170 --> 00:05:14.080
because this returns in an
instance of Google Credential.

00:05:14.080 --> 00:05:17.130
I just feel like this version
of the code read a lot easier.

00:05:17.130 --> 00:05:20.330
And it's easier to
understand what's going on.

00:05:20.330 --> 00:05:24.240
So we return the instance
of Google Credential.

00:05:24.240 --> 00:05:25.720
And that's all we have to do.

00:05:25.720 --> 00:05:27.800
Now, I'm going to go
ahead and run this code.

00:05:27.800 --> 00:05:31.690
Now, this code is just the My
Upload Sample that's available

00:05:31.690 --> 00:05:38.320
on our GitHub site at
 github.com/youtube/yt/samples/java.

00:05:38.320 --> 00:05:41.530
So I've taken out all of
the authorization code.

00:05:41.530 --> 00:05:44.467
So this is the bare
code right here.

00:05:44.467 --> 00:05:45.425
I'm going to click Run.

00:05:49.692 --> 00:05:52.150
And you're going to see that
there's a little bit of a lag.

00:05:52.150 --> 00:05:55.310
And what's happening is
the Google API client

00:05:55.310 --> 00:05:59.190
for Java is exchanging the
refresh token for an access

00:05:59.190 --> 00:06:01.840
token that it can use
to make API calls.

00:06:01.840 --> 00:06:04.919
And what's really
great is that your code

00:06:04.919 --> 00:06:05.960
will manage this for you.

00:06:05.960 --> 00:06:07.460
The client will
manage this for you.

00:06:07.460 --> 00:06:10.420
In that if you do get something
that's expired, it'll go ahead

00:06:10.420 --> 00:06:12.270
and it'll refresh
the access token

00:06:12.270 --> 00:06:13.760
and get you a brand new one.

00:06:13.760 --> 00:06:16.500
So that's what I have
for you guys today.

00:06:16.500 --> 00:06:19.350
And just to recap,
this is a way to get

00:06:19.350 --> 00:06:22.820
around having to build an OAuth
three legged flow yourself.

00:06:22.820 --> 00:06:25.000
It doesn't save you that
much time, to be honest.

00:06:25.000 --> 00:06:27.071
In fact, once you
generate a refresh token,

00:06:27.071 --> 00:06:28.070
no matter how you do it.

00:06:28.070 --> 00:06:32.380
Be It in your own code or
I running a sample code,

00:06:32.380 --> 00:06:35.127
you can use that refresh
token using this technique.

00:06:35.127 --> 00:06:36.710
And what's nice about
that is that you

00:06:36.710 --> 00:06:42.450
can run the refresh token,
you can run the sample code

00:06:42.450 --> 00:06:43.940
on your local machine.

00:06:43.940 --> 00:06:45.910
You can save the
refresh token that

00:06:45.910 --> 00:06:48.600
saved in wherever the
credentials are cached.

00:06:48.600 --> 00:06:51.510
In the samples example these are
cached in your home directory

00:06:51.510 --> 00:06:54.500
under, I think, .credentials
you can find those.

00:06:54.500 --> 00:06:57.750
But once you have a
refresh token, in your code

00:06:57.750 --> 00:07:00.340
you can always just load the
refresh token from some value,

00:07:00.340 --> 00:07:04.150
be it a database or just even
a constant, to be honest.

00:07:04.150 --> 00:07:06.170
Although a database
is probably best.

00:07:06.170 --> 00:07:09.780
Because this way if you are
refresh token, for whatever

00:07:09.780 --> 00:07:12.670
reason, becomes invalidated,
say through an account merge,

00:07:12.670 --> 00:07:15.760
you can just go ahead and
put in a new refresh token.

00:07:15.760 --> 00:07:17.220
That's the reason
you probably want

00:07:17.220 --> 00:07:19.150
to read from database and cache.

00:07:19.150 --> 00:07:21.390
So you can do that.

00:07:21.390 --> 00:07:24.270
And you don't ever have to worry
about shipping code that also

00:07:24.270 --> 00:07:26.786
has a three legged
OAuth flow in it.

00:07:26.786 --> 00:07:28.410
So this saves you a
little bit of code.

00:07:28.410 --> 00:07:30.380
And I think, in my opinion,
this clean things up

00:07:30.380 --> 00:07:32.046
and make things a
little bit more clear.

00:07:32.046 --> 00:07:33.920
So that's all I have
for you guys today.

00:07:33.920 --> 00:07:35.170
Thank you guys for joining me.

00:07:35.170 --> 00:07:37.820
And I hope that these
tips are useful.

00:07:37.820 --> 00:07:39.250
So happy coding.

00:07:39.250 --> 00:07:40.990
Take care.

