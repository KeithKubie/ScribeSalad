WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.870
[MUSIC PLAYING]

00:00:08.870 --> 00:00:11.800
Hi, I'm Nick Butcher, an
engineer on the Android

00:00:11.800 --> 00:00:13.110
Developer Relations team.

00:00:13.110 --> 00:00:15.410
And I'm here today with a design
byte to talk to you

00:00:15.410 --> 00:00:18.790
about the fundamentals of
responsive design and how to

00:00:18.790 --> 00:00:21.910
employ them in your Android
application design.

00:00:21.910 --> 00:00:24.630
So Android is not a
one-size-fits-all OS.

00:00:24.630 --> 00:00:26.960
It comes in many different sizes
and shapes, from small

00:00:26.960 --> 00:00:29.770
phones to large tablets,
TVs, and beyond.

00:00:29.770 --> 00:00:32.100
The great news is that Android
has been built from the ground

00:00:32.100 --> 00:00:36.040
up to embrace this variety and
give you tools in order to

00:00:36.040 --> 00:00:37.390
deal with it.

00:00:37.390 --> 00:00:39.830
So from the very beginning,
Android has allowed you to

00:00:39.830 --> 00:00:41.880
scale your user interface
up and down

00:00:41.880 --> 00:00:43.495
between different devices.

00:00:43.495 --> 00:00:45.770
The problem is that scaling
approaches will

00:00:45.770 --> 00:00:48.070
only get you so far.

00:00:48.070 --> 00:00:50.370
So I'm going to take you through
some of the common

00:00:50.370 --> 00:00:53.830
pitfalls we see with this
relying on scaling approaches,

00:00:53.830 --> 00:00:56.560
and then I'm going to go through
some alternative ways

00:00:56.560 --> 00:00:58.910
of dealing with this.

00:00:58.910 --> 00:01:02.560
So the first problem we see
commonly is one of having

00:01:02.560 --> 00:01:04.300
excessive line lengths.

00:01:04.300 --> 00:01:07.740
So in this application, the text
and images are running

00:01:07.740 --> 00:01:10.330
the full width of the
device's screen.

00:01:10.330 --> 00:01:13.160
On a smaller phone-sized device,
this might be fine.

00:01:13.160 --> 00:01:16.000
But as you get beyond a certain
size, this becomes

00:01:16.000 --> 00:01:17.850
uncomfortable.

00:01:17.850 --> 00:01:20.880
Especially when you're looking
at lines lengths of text, you

00:01:20.880 --> 00:01:25.040
want to be aiming for between
45 and 75 characters of text

00:01:25.040 --> 00:01:26.845
in order to maintain a
comfortable reading experience

00:01:26.845 --> 00:01:29.960
so the user can easily
can across it.

00:01:29.960 --> 00:01:31.860
In this application, we can
see that this is clearly

00:01:31.860 --> 00:01:34.780
exceeding that.

00:01:34.780 --> 00:01:36.940
The next problem we commonly
see is one

00:01:36.940 --> 00:01:38.710
of unbalanced content.

00:01:38.710 --> 00:01:40.950
So in this example, we can see
there's a lot of content

00:01:40.950 --> 00:01:43.660
clustered up in the top left
of the screen, and then

00:01:43.660 --> 00:01:45.970
leaving huge amounts of
white space across

00:01:45.970 --> 00:01:47.270
the rest of the screen.

00:01:47.270 --> 00:01:49.720
This leads to a very unbalanced
feeling, which

00:01:49.720 --> 00:01:52.360
makes your application feel
completely unoptimized for

00:01:52.360 --> 00:01:53.610
this device.

00:01:55.530 --> 00:01:58.660
And the last problem we commonly
see is more of a

00:01:58.660 --> 00:02:02.350
missed opportunity almost of not
making the best use of the

00:02:02.350 --> 00:02:04.160
real estate available to you.

00:02:04.160 --> 00:02:06.430
So in this example, we might
have an application which

00:02:06.430 --> 00:02:07.710
shows many photos.

00:02:07.710 --> 00:02:10.320
And as we can see, these tiny
little thumbnails are all

00:02:10.320 --> 00:02:12.500
grouped over to one side.

00:02:12.500 --> 00:02:15.350
It really is a shame not to make
use of these beautiful

00:02:15.350 --> 00:02:18.010
big screens when all this
extra real estate is

00:02:18.010 --> 00:02:20.190
available to you.

00:02:20.190 --> 00:02:22.086
So you want to be
avoiding this.

00:02:22.086 --> 00:02:25.460
So these are some of the common
pitfalls we see in

00:02:25.460 --> 00:02:27.300
relying on scaling approaches.

00:02:27.300 --> 00:02:30.100
And the answer to dealing with
these problems really is to

00:02:30.100 --> 00:02:33.540
adopt a responsive mobile
design to respond to the

00:02:33.540 --> 00:02:36.320
device's characteristics.

00:02:36.320 --> 00:02:38.220
So here are three techniques
you can use

00:02:38.220 --> 00:02:40.530
in order to do this.

00:02:40.530 --> 00:02:43.370
So the first technique is simply
one of combination.

00:02:43.370 --> 00:02:46.350
This is, if you have extra room,
combining things from

00:02:46.350 --> 00:02:49.710
different screens onto a single
screen in order to fill

00:02:49.710 --> 00:02:51.360
up the space.

00:02:51.360 --> 00:02:54.540
So in this example, we've got a
typical master detail view,

00:02:54.540 --> 00:02:57.370
which on a phone would be
on two separate screens.

00:02:57.370 --> 00:02:59.550
So clicking through from a list
item, for example, might

00:02:59.550 --> 00:03:01.980
show subsequent details.

00:03:01.980 --> 00:03:04.880
On a larger device with
sufficient width, we might

00:03:04.880 --> 00:03:07.090
show both of these
things at once.

00:03:07.090 --> 00:03:09.330
This will avoid the problem of
having those excessive line

00:03:09.330 --> 00:03:11.570
lengths and make better use
of the screen real estate.

00:03:14.160 --> 00:03:17.570
The second technique is one
that we call Macro Reflow.

00:03:17.570 --> 00:03:19.640
So this is taking the major
building blocks of your

00:03:19.640 --> 00:03:22.680
application and reflowing them
or rearranging them on the

00:03:22.680 --> 00:03:25.660
screen in order to make better
use of the space.

00:03:25.660 --> 00:03:28.470
So in this example, we simply
move something like a large

00:03:28.470 --> 00:03:31.540
header image and the body
text, instead of being

00:03:31.540 --> 00:03:34.250
vertically stacked above each
other, to be horizontally

00:03:34.250 --> 00:03:35.890
stacked next to each other.

00:03:35.890 --> 00:03:39.390
So this will give the image
more space to show off the

00:03:39.390 --> 00:03:42.210
larger amount of screen real
estate as well as avoiding

00:03:42.210 --> 00:03:45.110
those excessive line
lengths when it's

00:03:45.110 --> 00:03:47.000
in a landscape device.

00:03:47.000 --> 00:03:50.000
So this is not only useful for
different-sized devices, you

00:03:50.000 --> 00:03:52.270
can also use this kind of trick
when changing on the

00:03:52.270 --> 00:03:53.815
same device between different
orientations.

00:03:56.480 --> 00:03:59.170
And the last technique I want to
go through is something we

00:03:59.170 --> 00:04:01.650
call Micro Reflow.

00:04:01.650 --> 00:04:03.850
So this technique really focuses
on the individual

00:04:03.850 --> 00:04:07.710
blocks within your design, and
it delegates responsibility to

00:04:07.710 --> 00:04:10.280
those individual blocks to
optimize themselves given a

00:04:10.280 --> 00:04:12.150
certain amount of space.

00:04:12.150 --> 00:04:14.750
So a couple examples
of doing that--

00:04:14.750 --> 00:04:20.070
on the left here, we have a list
type application which,

00:04:20.070 --> 00:04:22.535
given sufficient space, might
lead to those excessive line

00:04:22.535 --> 00:04:24.580
lengths or very unbalanced
views.

00:04:24.580 --> 00:04:26.950
So instead of that, each
individual list item knows

00:04:26.950 --> 00:04:30.100
that given a certain amount of
space how to draw itself.

00:04:30.100 --> 00:04:33.220
So once it gets over a certain
size, a certain amount of

00:04:33.220 --> 00:04:36.300
width available to the device,
It'll change its

00:04:36.300 --> 00:04:37.150
representation.

00:04:37.150 --> 00:04:39.240
Instead of being a list item,
it might change to, say, a

00:04:39.240 --> 00:04:40.750
grid representation.

00:04:40.750 --> 00:04:44.920
So this will allow you to
fill the space better.

00:04:44.920 --> 00:04:50.250
The second example is if there
is simply no way to introduce

00:04:50.250 --> 00:04:53.010
more content, you
can introduce a

00:04:53.010 --> 00:04:54.540
margin point instead.

00:04:54.540 --> 00:04:57.940
So in this form type application
on the right, when

00:04:57.940 --> 00:05:00.420
we go beyond the phone and
past a certain size, when

00:05:00.420 --> 00:05:03.050
there just isn't any more
content we can show on screen,

00:05:03.050 --> 00:05:06.440
we simply introduce a margin
point so it doesn't end up

00:05:06.440 --> 00:05:10.690
being excessively long or
excessively unbalanced.

00:05:10.690 --> 00:05:13.420
So those are just a few
techniques that you can employ

00:05:13.420 --> 00:05:15.390
in your design of our
applications.

00:05:15.390 --> 00:05:18.330
Over the rest of this series,
I'm going to go through some

00:05:18.330 --> 00:05:20.890
DevBytes, which is going to
teach developers out there how

00:05:20.890 --> 00:05:22.570
to actually build
these layouts.

00:05:22.570 --> 00:05:23.820
Thanks very much.

