WEBVTT
Kind: captions
Language: en

00:00:13.880 --> 00:00:15.380
MIHAI FLORIN IONESCU:
Can everyone hear me?

00:00:15.380 --> 00:00:16.398
Yes, great.

00:00:16.398 --> 00:00:18.480
Let's get started.

00:00:18.480 --> 00:00:20.058
Well we have a
full house today.

00:00:20.058 --> 00:00:22.600
Thank you for coming
to our session.

00:00:22.600 --> 00:00:23.920
You guys liked the
keynote today?

00:00:23.920 --> 00:00:27.100
Yeah, awesome stuff,
awesome HTML stuff.

00:00:28.598 --> 00:00:30.238
Would you like to see
more cool stuff?

00:00:30.238 --> 00:00:34.780
All right, you're at the
right session, I promise.

00:00:34.780 --> 00:00:36.260
First let me introduce
myself and my co-presenter.

00:00:36.580 --> 00:00:39.780
My name is Mihai
and this is Ame.
13
00:00:39,78 --&gt; 00:00:39,62
AME ROOMANN-KUMIK: Hi.

00:00:40.260 --> 00:00:42.380
MIHAI FLORIN IONESCU: And we
are developer advocates with

00:00:42.380 --> 00:00:44.960
the Google Chrome Team.

00:00:44.960 --> 00:00:47.240
Today we'll be talking about
developing applications with

00:00:47.240 --> 00:00:52.860
HTML5 and about APIs available
in Google Chrome and

00:00:52.860 --> 00:00:54.680
Google Chrome OS.

00:00:54.680 --> 00:00:58.040
As we saw from the keynote
HTML5 has been a major

00:00:58.040 --> 00:01:00.280
focus area over the
past year at Google.

00:01:00.280 --> 00:01:03.300
And as you'll see again the
Google Chrome team has been

00:01:03.300 --> 00:01:07.000
very busy implementing some
great HTML5 features.

00:01:11.320 --> 00:01:15.040
Quick note about the
Google Wave [? side 40 ?]

00:01:15.040 --> 00:01:16.180
session.

00:01:16.180 --> 00:01:18.580
You can view live notes and
submit questions at this URL.

00:01:20.060 --> 00:01:22.840
It's also displayed at the
bottom left corner of every

00:01:22.840 --> 00:01:30.200
slide so don't worry if
you didn't write it down.

00:01:30.200 --> 00:01:33.980
This presentation is about
HTML5 and the best way

00:01:33.980 --> 00:01:37.900
to talk about HTML5 is
to show it in action.

00:01:37.900 --> 00:01:40.920
As you guys probably figured
out we have built this entire

00:01:40.920 --> 00:01:43.140
presentation as an
HTML5 application.

00:01:44.400 --> 00:01:48.000
And because we're geeks and to
keep up with good program

00:01:48.000 --> 00:01:51.500
practices we've even provided
you with some software metrics.

00:01:51.500 --> 00:01:55.980
We used that many HTML elements
and JavaScript lines of

00:01:55.980 --> 00:02:02.920
code and CSS properties to
build this presentation.

00:02:02.920 --> 00:02:06.720
Let's have a quick look at
the agenda for the talk.

00:02:06.720 --> 00:02:08.900
First a brief history
of web development.

00:02:10.318 --> 00:02:13.478
Next we'll look at some of the
things we have been doing in

00:02:13.478 --> 00:02:14.718
Google Chrome around HTML5.

00:02:16.318 --> 00:02:19.778
We'll continue with an HTML5
primer and show you how

00:02:19.778 --> 00:02:24.180
to use HTML5 APIs in
real case scenarios.

00:02:24.180 --> 00:02:26.418
We have some surprise guests
and some really cool

00:02:26.418 --> 00:02:29.758
demos, so stay tuned.

00:02:29.758 --> 00:02:32.618
And we'll end with key
take-aways, links to

00:02:32.618 --> 00:02:36.678
developer resources
and a Q&amp;A session.

00:02:36.678 --> 00:02:39.258
AME ROOMANN-KUMIK: So get your
questions in moderator now.

00:02:39.258 --> 00:02:45.138
MIHAI FLORIN IONESCU: Right, if
you have question, shoot away.

00:02:45.138 --> 00:02:48.478
So let's go back in time and
look at some major milestones

00:02:48.478 --> 00:02:51.738
in web development.

00:02:51.738 --> 00:02:52.300
It all started in 1990.

00:02:53.778 --> 00:02:59.738
The first webpage was
created and HTML1 was born.

00:02:59.738 --> 00:03:04.158
By 1994 the first web
browser and HTML2

00:03:04.158 --> 00:03:06.658
appeared on the scene.

00:03:06.658 --> 00:03:10.318
The web revolution has started.

00:03:10.318 --> 00:03:13.458
In 1995 the revolution
continued.

00:03:13.458 --> 00:03:15.438
Netscape took it to the next
level with the introduction

00:03:15.438 --> 00:03:17.438
of JavaScript.

00:03:17.438 --> 00:03:20.318
And CSS 1 shortly
followed in 1996.

00:03:21.098 --> 00:03:24.882
Now you could write
code on the web.

00:03:25.738 --> 00:03:27.798
We started seeing the
first web application.

00:03:31.278 --> 00:03:35.400
1997 and 1998 brought
us HTML4 and CSS 2.

00:03:36.800 --> 00:03:40.538
More features, more
standardization, better

00:03:40.538 --> 00:03:43.638
browsers, better
user experience.

00:03:43.638 --> 00:03:46.258
Still there were some serious
bottlenecks in advancing

00:03:46.258 --> 00:03:47.238
web development on the web.

00:03:48.698 --> 00:03:52.698
And that was the latency
of synchronous requests.

00:03:52.698 --> 00:03:56.658
The problem was addressed
partially in 1999 with

00:03:56.658 --> 00:03:59.598
the introduction of
XMLHTTP by Microsoft.

00:03:59.598 --> 00:04:04.178
And in 2002 when Mozilla added
XmlHttpRequest natively

00:04:04.178 --> 00:04:06.938
to the browser.

00:04:06.938 --> 00:04:10.678
That set up the stage for AJAX
applications to take off.

00:04:10.678 --> 00:04:14.838
And by 2005 we started
seeing real client

00:04:14.838 --> 00:04:15.418
server web applications.

00:04:15.418 --> 00:04:20.338
Think of Gmail and Google Maps.

00:04:22.278 --> 00:04:27.720
And finally, in 2009 the
web was ready for more.

00:04:27.720 --> 00:04:31.080
The time was right to
add more capabilities

00:04:31.080 --> 00:04:32.558
to the web browser.

00:04:32.558 --> 00:04:39.380
And HTML5 was introduced.

00:04:39.380 --> 00:04:40.500
So what is HTML5?

00:04:43.338 --> 00:04:47.940
We all know it's a W3C standard
proposal, but we like to think

00:04:47.940 --> 00:04:52.438
of it as a generic name
for the open web.

00:04:52.438 --> 00:04:55.440
A collection of open
web standards.

00:04:57.180 --> 00:05:05.680
Standards such as, as
you can see-- you guys

00:05:05.680 --> 00:05:07.940
like this animation?

00:05:08.420 --> 00:05:13.738
Let's see it again.

00:05:13.738 --> 00:05:17.720
So we did this with the box
to the graphics engine.

00:05:17.720 --> 00:05:18.520
All JavaScript.

00:05:20.426 --> 00:05:23.620
So we color-coded some
of these standards.

00:05:23.620 --> 00:05:28.758
I know, HTML5 is really heavy.
93
00:05:28,758 --&gt; 00:05:28,6
Heavy stuff.

00:05:32.538 --> 00:05:34.978
And we randomized it so
every time is different.

00:05:34.978 --> 00:05:42.438
Much better.
97
00:05:42,438 --&gt; 00:05:42,22
Thank you.

00:05:42.220 --> 00:05:44.398
So we color coded them.

00:05:44.398 --> 00:05:46.618
Red for HTML.

00:05:46.618 --> 00:05:48.580
Green for JavaScript
and yellow for CSS.

00:05:48.580 --> 00:05:54.138
HMTL, JavaScript, CSS,
they're all part of what

00:05:54.138 --> 00:05:55.180
we refer to as HTML5.

00:05:59.518 --> 00:06:01.278
Let's have a quick look
at Google Chrome.

00:06:03.538 --> 00:06:07.898
The Chrome browser is the
playground where we prototype

00:06:07.898 --> 00:06:08.860
and implement HTML5 features.

00:06:11.118 --> 00:06:14.920
We launched Google Chrome less
than 2 years ago with that goal

00:06:14.920 --> 00:06:17.744
to create a browser
for the modern web.

00:06:18.778 --> 00:06:24.878
A browser that can provide a
better user experience, better

00:06:24.878 --> 00:06:32.660
development tools and allow
for rich web applications.

00:06:32.660 --> 00:06:34.558
We have a few stats here
that I want to share with

00:06:34.558 --> 00:06:38.018
you that confirm we're
on the right track.

00:06:38.018 --> 00:06:42.618
First, we have over 70
million users and growing.

00:06:42.618 --> 00:06:46.198
We are iterating and improving
very fast with 28 stable

00:06:46.198 --> 00:06:48.398
releases to date.

00:06:48.398 --> 00:06:51.918
We are improving the
performance, the end to end

00:06:51.918 --> 00:06:52.438
performance on the browser.

00:06:52.438 --> 00:06:57.420
The JavaScript engine
performance for example

00:06:57.420 --> 00:07:00.878
has improved over
300% since launch.

00:07:00.878 --> 00:07:05.318
And finally, we are focusing on
HTML5 as the underlying code of

00:07:05.318 --> 00:07:08.378
the web that makes rich
applications possible.

00:07:13.998 --> 00:07:18.298
The keynote emphasized that
HTML5 is the future of the web.

00:07:18.298 --> 00:07:23.720
And I'll reemphasize that with
every HTML5 API that we launch

00:07:23.720 --> 00:07:26.800
we make the web much
more powerful.

00:07:26.800 --> 00:07:30.198
And that gets us one step
closer to bridging the gap

00:07:30.198 --> 00:07:33.658
between web applications
and desktop applications.

00:07:34.258 --> 00:07:38.000
So let's take a look at a few
APIs and a few areas where

00:07:38.000 --> 00:07:43.018
me made great progress.

00:07:43.018 --> 00:07:51.078
First, Canvas, WebGL, CSS 3
for rich graphics and games.

00:07:51.078 --> 00:07:56.018
Audio and video tag for
built-in high-quality

00:07:56.018 --> 00:07:57.318
access to multimedia.

00:07:59.958 --> 00:08:03.920
Worker threads for native
multithreading support

00:08:03.920 --> 00:08:04.578
and multicore CPUs.

00:08:06.040 --> 00:08:08.040
Notification and
[UNINTELLIGIBLE]

00:08:08.040 --> 00:08:15.778
to receive alerts for a
better user experience.

00:08:15.778 --> 00:08:20.160
Web sockets for built-in,
full duplex, real-time

00:08:20.160 --> 00:08:22.698
messaging protocals.

00:08:22.698 --> 00:08:27.718
And finally, application cache
and local storage for offline

00:08:27.718 --> 00:08:30.738
access and local databases.

00:08:30.738 --> 00:08:34.800
So all of these are
really powerful APIs.

00:08:34.800 --> 00:08:38.580
And next we'll have a closer
look at their capabilities.

00:08:38.580 --> 00:08:42.340
Ame will take over and show
us how we use them in

00:08:42.340 --> 00:08:45.380
real case scenarios.

00:08:45.380 --> 00:08:50.060
AME ROOMANN-KUMIK:
Thank you Mihai.

00:08:50.340 --> 00:08:52.020
Just do a quick
switchover here.

00:08:52.000 --> 00:08:55.560
So when I found out that I
would be able to give a

00:08:55.560 --> 00:08:56.780
talk to so many people.

00:08:57.040 --> 00:08:59.760
This is actually really
awesome that we have

00:08:59.760 --> 00:09:00.220
so many people here.

00:09:00.220 --> 00:09:03.840
I need to notify my boss that
my speaking fee is now double.

00:09:03.840 --> 00:09:04.800
This is great.

00:09:04.800 --> 00:09:07.380
Maybe I can be close
to Bristol Palin.

00:09:07.380 --> 00:09:11.380
Maybe [UNINTELLIGIBLE].

00:09:12.520 --> 00:09:16.740
Anyway, we knew that with HTML5
we could tell you about all the

00:09:16.740 --> 00:09:20.640
great new APIs that we really
like developers to use.

00:09:20.640 --> 00:09:24.860
Or we could show you and
showing you all of these APIs

00:09:24.860 --> 00:09:27.778
working together in a single
application is really awesome.

00:09:27.778 --> 00:09:33.478
So myself and Mihai and a
couple other folks at Google

00:09:33.478 --> 00:09:35.340
spent the last week kind
of throwing together--

00:09:35.340 --> 00:09:36.278
or not weeks, sorry.

00:09:36.278 --> 00:09:41.440
Last month throwing together a
HTML5 painting application.

00:09:41.400 --> 00:09:45.200
We figured a paint app would be
a really great way to show you

00:09:45.200 --> 00:09:48.500
kind of a lot of APIs stuffed
together and so this is kind of

00:09:48.500 --> 00:09:50.380
like the world's premier
of an app that we're

00:09:50.380 --> 00:09:50.940
calling Chromabrush.

00:09:52.120 --> 00:09:54.880
And yeah, this is the
first time I've revealed

00:09:54.880 --> 00:09:55.058
it to the public.

00:09:55.058 --> 00:09:57.960
You can actually test
it out now if you go
170
00:09:57,96 --&gt; 00:09:57,7
to chromabrush.com.

00:09:59.420 --> 00:10:02.960
I'll just give you the caveat
that we were building it very

00:10:02.960 --> 00:10:04.400
quickly, so we didn't have
much time to tune it

00:10:04.400 --> 00:10:05.080
for every browser.

00:10:05.080 --> 00:10:08.520
For the most part we display
a warning if you don't run

00:10:08.520 --> 00:10:10.000
dev channel Google Chrome.

00:10:10.000 --> 00:10:12.120
But please play with it.

00:10:13.558 --> 00:10:19.360
Yes, more about that later,
but anyway I'll just

00:10:19.360 --> 00:10:20.460
demo you a quick little
bit of functionality.

00:10:21.340 --> 00:10:26.080
So I'm going to see if I can
actually-- hello-- kind

00:10:26.080 --> 00:10:32.040
of replicate the famous
macintosh-- there we go--

00:10:32.040 --> 00:10:35.020
drawing on the canvas here.

00:10:35.020 --> 00:10:37.760
So I'll go into individual
features and how we built out

00:10:37.760 --> 00:10:39.560
different parts of this app.

00:10:39.560 --> 00:10:42.040
Just wanted to give you a quick
heads up of we have this app

00:10:42.040 --> 00:10:45.020
and this is going to be a
thing we're going back to.

00:10:45.360 --> 00:10:47.700
Naturally when we were
designing Chromabrush we kind

00:10:47.700 --> 00:10:51.100
of broke things down into a few
areas we wanted to really focus

00:10:51.100 --> 00:10:54.600
on, especially in the context
of this presentation.

00:10:54.600 --> 00:10:57.420
And the first thing you would
think of when you're writing an

00:10:57.420 --> 00:11:01.760
HTML5 paint application is
obviously the canvas element.

00:11:01.760 --> 00:11:05.940
As I'm sure, any of you who
have any even passing

00:11:05.940 --> 00:11:08.660
familiarity with HTML5 would
know this is the new element

00:11:08.660 --> 00:11:12.800
that kind of let's you draw
on the browser itself.

00:11:12.800 --> 00:11:16.440
So the API itself--
let me just reload.

00:11:16.440 --> 00:11:17.380
That's better.

00:11:18.100 --> 00:11:19.940
The API itself is very simple.

00:11:20.340 --> 00:11:23.220
You can see here I'm doing
a couple lines of setup.

00:11:23.560 --> 00:11:25.340
There's a few different methods
for doing things like drawing

00:11:25.340 --> 00:11:28.620
shapes, primitives like
lines and circles.

00:11:28.620 --> 00:11:30.440
And you can even get into
the pixels of an image.

00:11:30.440 --> 00:11:34.380
And get the color value
and set it that way.

00:11:34.380 --> 00:11:37.720
But I don't really like showing
code like this as much as I do

00:11:37.720 --> 00:11:40.140
like just having demos
that I can click on.

00:11:40.140 --> 00:11:43.980
So you can see here as I'm kind
of working with this, I'm just

00:11:43.980 --> 00:11:45.180
drawing random lines
on this canvas here.

00:11:45.180 --> 00:11:46.120
You get an idea.

00:11:46.120 --> 00:11:47.460
I can draw lines.

00:11:47.460 --> 00:11:51.280
I can draw circles and then I
can also get into the pixels of

00:11:51.280 --> 00:11:53.880
the image and flip the colors.

00:11:53.180 --> 00:11:57.060
So what I'm actually doing here
is inverting each color as I

00:11:57.060 --> 00:11:58.740
see it in the image itself.

00:11:58.740 --> 00:12:03.858
So I can draw a little bit more
and invert and you can see I

00:12:03.858 --> 00:12:05.458
have pixel level control
over the image itself.

00:12:07.820 --> 00:12:08.540
You can do other things.

00:12:08.540 --> 00:12:11.920
You can draw images directly
onto a canvas from a source

00:12:11.920 --> 00:12:15.040
like an image tag or a video
tag, which we'll get to later.

00:12:16.000 --> 00:12:19.200
So the cool thing about canvas
is that even though it's in

00:12:19.200 --> 00:12:22.320
JavaScript you can actually
draw and redraw an image so

00:12:22.320 --> 00:12:24.498
many times that it looks very
smooth if you animate it.

00:12:24.498 --> 00:12:26.880
If you change it
slightly each frame.

00:12:26.880 --> 00:12:29.700
So what I do here is I'm
just redrawing this

00:12:29.700 --> 00:12:31.740
image a bunch of times.

00:12:31.740 --> 00:12:32.320
Very straightforward.

00:12:32.320 --> 00:12:34.580
I'm just doing a little
spinning animation.

00:12:34.580 --> 00:12:36.440
And I'm not actually
doing the rotation.

00:12:36.440 --> 00:12:38.260
I basically just tell the
canvas to rotate the

00:12:38.260 --> 00:12:41.760
image and draw it again.

00:12:41.760 --> 00:12:46.100
There's a very cool additional
part of canvas, which is the

00:12:46.100 --> 00:12:51.538
idea that you can get a 2D
context to draw shapes and

00:12:51.538 --> 00:12:52.238
images and things like that.

00:12:52.238 --> 00:12:55.860
You can also get a 3D context,
which actually let's you do

00:12:55.860 --> 00:12:58.600
3D graphics in the browser
using an API called WebGL.

00:12:58.740 --> 00:13:04.320
If you're familiar with open
GL, especially the variant

00:13:04.320 --> 00:13:07.480
called OpenGL ES which is more
for like mobile applications.

00:13:08.360 --> 00:13:12.280
You can actually realize that
the API is very similar here

00:13:12.280 --> 00:13:15.118
and it gives you all sorts of
advanced features like writing

00:13:15.118 --> 00:13:17.098
shaders to render
your 3D graphics.

00:13:17.098 --> 00:13:19.720
You get things like
lighting, et cetera.

00:13:20.120 --> 00:13:21.780
There's actually a [? Gwitz ?]

00:13:21.780 --> 00:13:24.160
talk, I think, where they'll
be covering porting

00:13:24.160 --> 00:13:26.420
Quake 2 to WebGL.

00:13:28.200 --> 00:13:32.740
We think that's a really
amazing way to show you how

00:13:32.740 --> 00:13:33.320
sophisticated WebGL can be.

00:13:33.320 --> 00:13:37.800
My skills are basically limited
to making a box spin, but

00:13:37.800 --> 00:13:40.360
other people are much
better than I am.

00:13:40.360 --> 00:13:41.100
I can make good slides though.

00:13:41.100 --> 00:13:44.520
So I'll just demo
again on Chromabrush.

00:13:44.520 --> 00:13:48.460
Like I said, we have primitives
in the canvas, so obviously I'm

00:13:48.460 --> 00:13:52.140
using this drawing area as a
drawing surface and I'll just

00:13:52.140 --> 00:13:56.360
change my color a little
bit here and my line size.

00:13:56.360 --> 00:13:59.580
You can see I'm kind of just
drawing lines and shapes.

00:13:59.580 --> 00:14:02.300
And we also had to implement
some drawing algorithms,

00:14:02.300 --> 00:14:04.700
which were fun to look up.

00:14:04.700 --> 00:14:07.480
And to do things like flood
fill, so let me change

00:14:07.480 --> 00:14:09.520
my color one more time.

00:14:09.520 --> 00:14:11.980
You can see that I actually
went in, analyzed the pixels

00:14:11.980 --> 00:14:14.300
on my canvas and then I
implemented a fill algorithm

00:14:14.300 --> 00:14:17.206
that would fill continuous
regions of space with

00:14:17.206 --> 00:14:18.780
a certain color.

00:14:18.780 --> 00:14:21.680
So canvas kind of
let's us all do that.

00:14:21.680 --> 00:14:23.600
We can also see, as I've been
choosing colors here, this

00:14:23.600 --> 00:14:26.400
color picker is all rendered in
canvas, so it kind of gives you

00:14:26.400 --> 00:14:29.300
a sense of how dynamic the
interface can be and how

00:14:29.300 --> 00:14:30.340
nonstandard, right?

00:14:30.580 --> 00:14:35.820
You're not limited to just
DOM elements in the page.

00:14:35.820 --> 00:14:38.984
Even though the canvas
itself is a DOM element.

00:14:40.100 --> 00:14:42.880
So another part that
we really wanted to

00:14:42.880 --> 00:14:44.660
emphasize was multimedia.

00:14:44.660 --> 00:14:46.220
There's some good
APIs for this.

00:14:46.220 --> 00:14:47.140
Basically, audio and video.

00:14:48.620 --> 00:14:50.540
Very straightforward, just
like canvas there are

00:14:50.540 --> 00:14:51.680
new tags in the page.

00:14:51.680 --> 00:14:55.380
You can see here I'm dropping a
sound clip into my page and

00:14:55.380 --> 00:14:57.820
then I'm setting the muted
value to false in this

00:14:57.820 --> 00:15:00.300
script here on video.

00:15:00.300 --> 00:15:02.300
Again, it's just a simple tag.

00:15:02.600 --> 00:15:05.960
You might notice that I'm
pointing to a WebM movie,

00:15:05.960 --> 00:15:08.860
which is the new VPA codec.

00:15:08.860 --> 00:15:11.800
Very cool stuff that
we announced today.

00:15:11.800 --> 00:15:13.540
Yes, yes.

00:15:14.840 --> 00:15:17.640
But again, I like to show
you a little bit more.

00:15:17.640 --> 00:15:20.840
And the thing that I really get
excited about when I'm talking

00:15:20.840 --> 00:15:23.998
about video and the web and not
using a plug-in or anything

00:15:23.998 --> 00:15:26.600
is like it is a DOM
element in the page.

00:15:26.600 --> 00:15:31.320
So you get access to not only
style it with CSS, but you can

00:15:31.320 --> 00:15:34.020
actually go in and look at the
pixel data that's coming

00:15:34.020 --> 00:15:35.460
in the video stream.

00:15:36.180 --> 00:15:38.940
So I'll just play a little
Chrome promotional video

00:15:38.940 --> 00:15:39.740
that we have here.

00:15:39.740 --> 00:15:42.828
Hopefully this
won't be too loud.

00:15:42.780 --> 00:15:44.060
So you can see.

00:15:44.060 --> 00:15:47.760
I'm just playing a video
directly in the page.

00:15:47.400 --> 00:15:50.360
It's unstyled right now,
but the controls are

00:15:50.360 --> 00:15:53.298
these JavaScript buttons
that I've wired up.

00:15:53.298 --> 00:15:57.298
Now I have my fancy button here
and what that does is just

00:15:57.298 --> 00:15:59.780
applies CSS styles
to the video.

00:15:59.780 --> 00:16:00.240
You can see that I've
put a border on it.

00:16:00.240 --> 00:16:03.298
I've put a dropshadow on my
video and I've put a WebKit

00:16:03.298 --> 00:16:05.478
reflection property
on my video.

00:16:05.478 --> 00:16:06.898
And this is all CSS.

00:16:06.898 --> 00:16:08.138
I didn't do anything crazy.

00:16:08.138 --> 00:16:10.258
You know, I didn't have
to go and draw anything.

00:16:10.258 --> 00:16:12.358
I basically put CSS styles on
it like I would any other

00:16:12.358 --> 00:16:15.420
element in the page.

00:16:15.420 --> 00:16:17.020
I ran out of time, so I'm
just going to play it again.

00:16:17.020 --> 00:16:19.040
But I'm going to make
it really fancy now.

00:16:19.040 --> 00:16:21.240
I'm going to show you what you
can do when you actually have

00:16:21.240 --> 00:16:24.760
the power of canvas and
a videos tag itself.

00:16:24.760 --> 00:16:26.840
So what I'm doing is I'm
actually slicing up the video

00:16:26.840 --> 00:16:30.126
into 10 different strips and
then I'm drawing each strip

00:16:30.126 --> 00:16:33.640
individually onto a canvas at a
different location over time.

00:16:33.640 --> 00:16:37.960
So I'm actually animating the
dimensions of the video while

00:16:37.960 --> 00:16:41.100
drawing the video at full frame
rate directly into the web

00:16:41.100 --> 00:16:43.100
browser, which is all handled
natively by Chrome's

00:16:43.100 --> 00:16:44.778
amazing rendering action.

00:16:44.778 --> 00:16:46.038
It's really cool.

00:16:46.038 --> 00:16:49.178
I'm looking forward to stuff
that people come up with this.

00:16:49.178 --> 00:16:51.108
There's already demos like
exploding videos and

00:16:51.108 --> 00:16:52.138
stuff, which are amazing.

00:16:54.460 --> 00:16:57.960
A good artist's steal I guess.

00:16:58.200 --> 00:17:01.560
Anyway, demos in multimedia.

00:17:01.560 --> 00:17:05.960
So obviously we wanted a
application type of interface.

00:17:05.960 --> 00:17:09.220
So I put in a few sound effects
when I was bored one day at

00:17:09.220 --> 00:17:14.294
work, so hopefully we'll
get some-- there you go.

00:17:14.336 --> 00:17:16.020
So you can hear
some side effects.

00:17:16.020 --> 00:17:18.440
Sorry if the delay is
a little bit bad.

00:17:20.280 --> 00:17:25.540
And I did things like-- yeah,
that's me-- when I rearranged

00:17:25.540 --> 00:17:27.540
layers so it kinds of gives it
a nice tactile interface

00:17:27.540 --> 00:17:29.260
to the application.

00:17:29.420 --> 00:17:32.900
I also decided that the best
way to show people how to use

00:17:32.900 --> 00:17:35.640
the app would be
to film a video.

00:17:35.640 --> 00:17:36.640
Kind of just show me
clicking around.

00:17:36.640 --> 00:17:40.320
So again, you get the idea that
these online web apps don

00:17:40.320 --> 00:17:42.980
don't have to be static,
boring, text pages.

00:17:42.980 --> 00:17:45.440
I mean, this is a
multi-media experience.

00:17:45.440 --> 00:17:48.480
Has me doing a much better
hi than I did before.

00:17:48.480 --> 00:17:54.620
That kind of thing.

00:17:54.620 --> 00:18:01.280
So Chromabrush itself is an
image processing program.

00:18:01.280 --> 00:18:03.860
There's some algorithms
that we have to implement.

00:18:04.460 --> 00:18:08.360
First of all, I'm not good at
optimizations, so I had some

00:18:08.360 --> 00:18:11.780
pretty heavy-duty CPU type
stuff, which I'm sure other

00:18:11.780 --> 00:18:12.680
people could optimize.

00:18:12.680 --> 00:18:15.920
But generally speaking we have
to work with a lot of data.

00:18:15.920 --> 00:18:20.060
So we both want to store it
locally, so we don't have to

00:18:20.060 --> 00:18:21.580
transfer it back up to the
server to do anything

00:18:21.580 --> 00:18:24.760
interesting and we also want
to be able to process it

00:18:24.760 --> 00:18:26.540
kind of in a way that's not
obtrusive to the end user.

00:18:28.200 --> 00:18:31.600
You can see here that I
haven't really practiced

00:18:31.600 --> 00:18:34.360
very much with this browser.

00:18:34.360 --> 00:18:37.140
But what I'm doing is I'm
actually counting the number of

00:18:37.140 --> 00:18:40.640
times that this presentations
been loaded in this browser.

00:18:40.640 --> 00:18:43.240
And I'm doing that so I can
actually show you a new API

00:18:43.240 --> 00:18:46.278
called local storage, which
lets you save data into the

00:18:46.278 --> 00:18:48.838
browser per a website.

00:18:48.838 --> 00:18:51.460
And basically, that's
persistent data that no matter

00:18:51.460 --> 00:18:54.040
if you close the browser, if
you reload the page, that

00:18:54.040 --> 00:18:55.020
data is always there.

00:18:55.020 --> 00:18:57.660
It's kind of like a cookie,
but it doesn't get sent

00:18:57.660 --> 00:18:58.980
back to the server.

00:18:58.980 --> 00:19:02.358
So it lets client slide
applications really have data

00:19:02.358 --> 00:19:04.298
stored locally that they can
use for settings and

00:19:04.298 --> 00:19:05.340
things like that.

00:19:05.340 --> 00:19:09.400
So you can see as I refresh
this application here.

00:19:09.400 --> 00:19:13.440
Sorry, running up against
some network issues today.

00:19:13.440 --> 00:19:14.600
OK, 4 times.

00:19:14.600 --> 00:19:16.780
You'll notice that the fonts
are changing because one of the

00:19:16.780 --> 00:19:20.540
fonts isn't cached very well,
so I'll just wait until

00:19:20.540 --> 00:19:24.640
it pops up again.

00:19:24.640 --> 00:19:30.500
So, that's not good.

00:19:33.960 --> 00:19:35.580
That's how we store some
simple settings and things.

00:19:35.580 --> 00:19:37.380
And then there's a few other
storage options that let you do

00:19:37.380 --> 00:19:39.820
things like use SQL databases.

00:19:40.200 --> 00:19:43.140
Basically, you can store
structured complex data

00:19:43.140 --> 00:19:45.838
in the client site
and you can query it.

00:19:45.838 --> 00:19:47.320
And we have a pretty awesome
third-party demo that

00:19:47.320 --> 00:19:48.640
will demonstrate this.

00:19:48.640 --> 00:19:50.598
This is going to
be really cool.

00:19:50.838 --> 00:19:53.900
There are also a few new APIs
that we really didn't have

00:19:53.900 --> 00:19:56.260
material for, but Indexed
DB is a standard.

00:19:56.260 --> 00:19:59.260
Basically kind of like a SQL
database, but lets you store

00:19:59.260 --> 00:20:01.660
data under an indexed system.

00:20:01.660 --> 00:20:04.180
There's also an upcoming file
API, which will give each

00:20:04.180 --> 00:20:07.692
website its own virtual kind of
file system, but you kind of

00:20:07.692 --> 00:20:10.140
interact with files in
a file system manner.

00:20:11.020 --> 00:20:13.300
And App Cache, which is really
cool if you want to build

00:20:13.300 --> 00:20:15.640
an offline application.

00:20:16.338 --> 00:20:18.400
Basically you define which
files the browser should

00:20:18.400 --> 00:20:21.240
download in cache indefinitely
and then your application will

00:20:21.240 --> 00:20:23.800
basically reference those
files if there's no

00:20:23.800 --> 00:20:24.660
internet connection.

00:20:24.660 --> 00:20:29.000
So for example, if I had put an
app cache into Chromabrush and

00:20:29.000 --> 00:20:31.640
you were able to disconnect
from the internet than all of

00:20:31.640 --> 00:20:34.380
the client's side files would
be there locally and

00:20:34.380 --> 00:20:35.680
available for use.

00:20:35.680 --> 00:20:37.540
Since there's very little
network traffic on Chromabrush

00:20:37.540 --> 00:20:39.600
it basically downloads all the
assets and then does most

00:20:39.600 --> 00:20:40.560
of the work client side.

00:20:41.760 --> 00:20:49.160
That would mean it would be
almost fully functional.

00:20:49.240 --> 00:20:52.420
I talked about processing data
and this is kind of the feature

00:20:52.420 --> 00:20:54.520
I'm most in love
with right now.

00:20:54.800 --> 00:20:57.580
It's basically a way for
JavaScript to not block

00:20:57.580 --> 00:21:00.040
the UI when you're
doing complex tasks.

00:21:00.040 --> 00:21:02.400
If you've ever had a
slow-running JavaScript webpage

00:21:02.400 --> 00:21:05.920
you might notice that after
about 20 seconds or so the

00:21:05.920 --> 00:21:07.680
browser kind of tells you,
hey, there's a script

00:21:07.680 --> 00:21:09.598
running too much.

00:21:09.598 --> 00:21:10.498
Everything's locked down.

00:21:10.998 --> 00:21:14.920
Nothing's really rendering or
updating and that's usually

00:21:14.920 --> 00:21:16.360
because there's like an
infinite loop or some sort of

00:21:16.360 --> 00:21:16.920
bug in the JavaScript code.

00:21:17.938 --> 00:21:20.780
But it can happen also if
you're doing things like some

00:21:20.780 --> 00:21:23.760
image algorithms, which are
now possible with canvas.

00:21:23.760 --> 00:21:27.260
So what I've implemented here
is a drawing sample were you

00:21:27.260 --> 00:21:30.040
can see that every time I'm
moving the mouse I'm actually

00:21:30.040 --> 00:21:32.530
getting a mouse event where I'm
drawing on the left and then on

00:21:32.530 --> 00:21:34.580
the right I'm calculating the
difference between last

00:21:34.580 --> 00:21:37.540
time I called this API.

00:21:38.618 --> 00:21:44.120
Basically, the line isn't
continuous because the diff

00:21:44.120 --> 00:21:47.818
algorithm is actually slow
enough that it blocks the

00:21:47.818 --> 00:21:48.280
event from firing very often.

00:21:48.280 --> 00:21:50.560
So I don't get a solid line.

00:21:50.560 --> 00:21:53.618
Whereas now I can offload this
processing into what we call a

00:21:53.618 --> 00:21:57.710
web worker and you can see that
the web worker line

00:21:57.710 --> 00:21:58.800
is actually solid.

00:21:58.280 --> 00:22:00.420
I'm kind of just
drawing around here.

00:22:00.420 --> 00:22:03.780
And if you have an eye for
these things, on the right-hand

00:22:03.780 --> 00:22:05.960
side the updates are
actually a lot faster, too.

00:22:05.960 --> 00:22:10.260
So we used this as a means of
keeping the UI responsive

00:22:10.260 --> 00:22:12.300
while doing some data
intensive tasks.

00:22:12.300 --> 00:22:14.318
One of the ways I wanted to
demo this was actually just to

00:22:14.318 --> 00:22:18.358
show you a simplified blur.

00:22:18.358 --> 00:22:21.560
Talk about this while it's
calculating the background.

00:22:21.560 --> 00:22:26.780
The blur filter in JavaScript,
my naive, not optimized

00:22:26.780 --> 00:22:29.320
version, which runs several
passes to get a big blur.

00:22:30.180 --> 00:22:33.160
Well, actually I'm sorry I
blurred the wrong layer.

00:22:33.160 --> 00:22:34.680
We have layer
support by the way.

00:22:36.360 --> 00:22:40.580
So my naive algorithm actually
allows the UI to update itself

00:22:40.580 --> 00:22:41.160
while it's running
in the background.

00:22:42.280 --> 00:22:44.640
If I hadn't put this into
worker thread then the UI

00:22:44.640 --> 00:22:45.420
would be unresponsive.

00:22:45.420 --> 00:22:47.120
I wouldn't even be able to
render a progress bar.

00:22:47.120 --> 00:22:49.980
You can see here that the
image is slightly blurrier

00:22:49.980 --> 00:22:52.700
then when we began.

00:22:52.700 --> 00:22:56.460
Another very cool feature of
worker threads is that it kind

00:22:56.460 --> 00:22:59.780
of lets us do stuff that we
wouldn't be able to normally

00:22:59.780 --> 00:23:02.900
without putting a lot of
asynchronous kind of timeouts

00:23:02.900 --> 00:23:03.818
and stuff into our application.

00:23:03.818 --> 00:23:07.000
So what I did at the beginning
of Chromabrush when it was

00:23:07.000 --> 00:23:09.700
first loaded I started up a
worker thread that sits in the

00:23:09.700 --> 00:23:12.290
background and it kind of runs
the diff algorithm against

00:23:12.290 --> 00:23:13.560
any change to the canvas.

00:23:13.560 --> 00:23:16.780
And what this lets me do is
keep a persistent state in

00:23:16.780 --> 00:23:20.200
memory of what the canvas
looked like over history.

00:23:20.200 --> 00:23:22.280
Kind of what the changes were.

00:23:22.280 --> 00:23:28.540
So for example, we
implemented a undo feature.

00:23:29.200 --> 00:23:32.960
Sorry, I didn't click that.

00:23:32.960 --> 00:23:34.800
Which actually lets me undo
the blur that I just did.

00:23:34.800 --> 00:23:38.040
In fact, I can step back into
history a little bit more.

00:23:38.040 --> 00:23:43.240
Now I'm currently storing this
directly in RAM, but a great

00:23:43.240 --> 00:23:46.460
application to this would be to
write it to a SQL database or

00:23:46.460 --> 00:23:48.558
something so that I could have
a persistent history over the

00:23:48.558 --> 00:23:51.420
course of the user using the
application, even

00:23:51.420 --> 00:23:52.420
across sessions.

00:23:55.420 --> 00:23:58.700
Another kind of these focus
areas that we're talking about

00:23:58.700 --> 00:24:01.540
is the ability to make a web
application really kind of

00:24:01.540 --> 00:24:04.020
behave like a desktop
application.

00:24:04.020 --> 00:24:06.800
We call this the
desktop experience.

00:24:06.800 --> 00:24:09.358
There's a couple loosely
related features here that

00:24:09.358 --> 00:24:11.480
we I want to talk about.

00:24:11.480 --> 00:24:13.598
First is drag and drop.

00:24:13.598 --> 00:24:16.000
So drag and drop isn't
new to the browser.

00:24:16.000 --> 00:24:19.780
I mean, if you're a jQuery user
you've probably had a website

00:24:19.780 --> 00:24:22.940
somewhere that implements
it with one line of code.

00:24:23.260 --> 00:24:26.280
It's very, very straightforward
that way, but the trouble is

00:24:26.280 --> 00:24:28.800
that the drag and drop events
weren't really native

00:24:28.800 --> 00:24:30.260
events in the browser.

00:24:30.260 --> 00:24:32.380
So there was no way that the
browser could tell you that

00:24:32.380 --> 00:24:34.460
there's something
special going on.

00:24:34.460 --> 00:24:38.940
Well, in HTML5 drag and drop
now, you know, kind of very

00:24:38.940 --> 00:24:41.720
straightforward can let you
do drag and drop events

00:24:41.720 --> 00:24:43.980
directly in the browser
as first class citizens.

00:24:44.300 --> 00:24:47.380
The great part about this is
that the events can tell you

00:24:47.380 --> 00:24:50.680
if there is some sort of
special situation going on.

00:24:50.500 --> 00:24:52.560
For example, if you select
text and drag it into

00:24:52.560 --> 00:24:54.520
another area of the page.

00:24:54.520 --> 00:24:56.160
Or if you do something really
cool like dragging files onto

00:24:56.160 --> 00:25:02.058
the browser itself, but
I'll show you that later.

00:25:02.058 --> 00:25:04.898
There's also something new
that's kind of exclusive to

00:25:04.898 --> 00:25:09.920
Chrome right now, but is coming
into the HTML5 spec and we're

00:25:09.920 --> 00:25:11.540
hoping other browsers
adopt it pretty soon.

00:25:11.540 --> 00:25:14.840
It's called notifications and
it's a way of a web application

00:25:14.840 --> 00:25:17.600
kind of telling the user that
there's something interesting

00:25:17.600 --> 00:25:21.980
going on with the app without
stealing focus or being really

00:25:21.980 --> 00:25:23.800
too intrusive on the users
desktop experience.

00:25:24.660 --> 00:25:28.760
So something like this would be
considered if you had Gmail,

00:25:28.760 --> 00:25:32.220
kind of want to tell you that
there's a new message or

00:25:32.220 --> 00:25:35.940
calendar to tell you that
you have an appointment.

00:25:35.940 --> 00:25:38.900
I'll show you what that kind
of looks like right now.

00:25:38.900 --> 00:25:41.980
So I'm just going to
request permission.

00:25:41.980 --> 00:25:43.880
And now I'll show
a notification.

00:25:43.880 --> 00:25:47.620
You can see that after this
presentation is over I'm

00:25:47.620 --> 00:25:48.800
planning on being at the
Thirsty Bear if you want to

00:25:48.800 --> 00:25:53.220
chat about HTML5 over a pint
because that would

00:25:53.220 --> 00:25:54.194
be delicious.

00:25:58.098 --> 00:26:02.440
So I'm just showing you that
the browser is minimized and

00:26:02.440 --> 00:26:03.578
the notification's persistent.

00:26:03.578 --> 00:26:07.380
If I were on a different tab
then that would also still

00:26:07.380 --> 00:26:11.780
pop-up, so it's just a nice way
for the current application to

00:26:11.780 --> 00:26:14.660
give you information
about this.

00:26:14.660 --> 00:26:15.700
So desktop experience
in Chromabrush.

00:26:17.160 --> 00:26:20.118
Well I thought the coolest
thing would be if I could drag

00:26:20.118 --> 00:26:23.440
a file from my desktop directly
onto the application.

00:26:23.440 --> 00:26:26.280
So you can see here that I
actually have a-- me again--

00:26:26.280 --> 00:26:28.460
I actually use this
to import images.

00:26:28.460 --> 00:26:31.400
So now I have images that are
part of the canvas because I'm

00:26:31.400 --> 00:26:32.358
dragging and dropping them.

00:26:32.358 --> 00:26:34.960
And I can do things
like fill them.

00:26:35.400 --> 00:26:39.560
You know, it's part of the
canvas now, so I can actually

00:26:39.560 --> 00:26:41.620
do stuff like that.

00:26:41.620 --> 00:26:42.800
That's my drag and drop.

00:26:42.800 --> 00:26:47.420
And also, we have kind of
layer support and I've also

00:26:47.420 --> 00:26:50.020
implemented the ability
to show a notification.

00:26:50.020 --> 00:26:53.338
So for example, remember that
slow filter that I was running

00:26:53.338 --> 00:26:56.260
before and now I can get a
notification if the

00:26:56.260 --> 00:26:58.394
filter is done.

00:27:00.620 --> 00:27:03.320
So I'm going to hand things off
to Mihai for a little bit and

00:27:03.320 --> 00:27:05.660
he's going to talk about how
you can use new properties in

00:27:05.660 --> 00:27:07.576
CSS to make things
look really cool.

00:27:07.576 --> 00:27:08.594
MIHAI FLORIN
IONESCU: Great job.

00:27:09.610 --> 00:27:11.636
Yes, awesome demo.

00:27:17.740 --> 00:27:21.558
So CSS is another area of
really exciting developments

00:27:21.558 --> 00:27:23.840
for HTML5 applications.

00:27:23.840 --> 00:27:27.760
With the CSS 3 spec we now
have access to some amazingly

00:27:27.760 --> 00:27:29.600
powerful capabilities.

00:27:29.600 --> 00:27:35.180
And I want to go with you
through a few of them.

00:27:35.180 --> 00:27:37.080
First, everyone likes
nice visuals and

00:27:37.080 --> 00:27:37.660
nice visual effects.

00:27:38.000 --> 00:27:41.000
And on this slide
we'll do just that.

00:27:41.000 --> 00:27:42.080
We built a nice application.

00:27:42.080 --> 00:27:43.940
You all liked it.

00:27:43.940 --> 00:27:45.720
Now we're going to build
a nice logo for it.

00:27:45.720 --> 00:27:47.900
You want to look good.

00:27:47.900 --> 00:27:49.940
We need a nice font, we
need some nice color, we

00:27:49.940 --> 00:27:51.840
need some nice shadow.

00:27:51.840 --> 00:27:52.600
Let's do it.

00:27:52.600 --> 00:27:54.560
Can I do it with HTML5?

00:27:55.760 --> 00:27:59.120
No Photoshop, no fancy
graphics package.

00:27:59.120 --> 00:27:59.800
HTML5 baby.

00:27:59.800 --> 00:28:05.940
At the top we have 5
forms to chose from.

00:28:05.940 --> 00:28:08.100
This morning we're going to
announce that we now have

00:28:08.100 --> 00:28:10.560
web font API and the
web font directory.

00:28:10.560 --> 00:28:14.640
We just picked 5
fonts from there.

00:28:14.640 --> 00:28:17.920
So you can see here I can
select the font I want.

00:28:17.920 --> 00:28:22.200
You know, all kinds
of stuff here.

00:28:22.200 --> 00:28:25.098
OK, lets settle on this one.

00:28:25.098 --> 00:28:26.912
I can play with the color.

00:28:28.200 --> 00:28:32.520
I can play with the
background color.

00:28:32.520 --> 00:28:37.120
I can add some reflection.

00:28:37.120 --> 00:28:41.220
I can add some shadow, some
nice-looking shadowy font.

00:28:41.220 --> 00:28:45.680
And of course, every sleek
and cool looking logo has to

00:28:45.680 --> 00:28:46.580
have rounded corners, right?

00:28:46.580 --> 00:28:53.520
Rounded corners has been called
the holy grail of CSS and

00:28:53.520 --> 00:28:57.798
before CSS 3 you had to go
through countless hacks

00:28:57.798 --> 00:28:59.838
to achieve this effect.

00:28:59.838 --> 00:29:03.182
Now we'll do it with
one line of code.

00:29:03.182 --> 00:29:04.578
There we go.

00:29:04.578 --> 00:29:11.180
So here we go.

00:29:11.180 --> 00:29:15.300
Our nice Chromabrush logo
in 30 seconds or less.

00:29:15.720 --> 00:29:17.780
One thing I want to mention,
you may have noticed that some

00:29:17.780 --> 00:29:22.740
of the CSS properties have a
dash WEP key prefix, in Firefox

00:29:22.740 --> 00:29:24.160
you may see the dash [? most ?]

00:29:24.160 --> 00:29:24.540
prefix.

00:29:25.400 --> 00:29:26.180
Those are experimental APIs.

00:29:27.078 --> 00:29:29.500
People still figuring out
the right way to do it.

00:29:29.500 --> 00:29:32.340
When they're finalized and
added to the spec the

00:29:32.340 --> 00:29:33.380
prefix will be dropped.

00:29:33.380 --> 00:29:36.820
And you know, some of the
others they did have a prefix

00:29:36.820 --> 00:29:40.340
before being dropped.

00:29:40.340 --> 00:29:42.380
How about more cool stuff?

00:29:42.380 --> 00:29:43.720
How about 2D transforms?

00:29:43.720 --> 00:29:49.980
With CSS 3 2D transforms
are native to the browser.

00:29:49.980 --> 00:29:54.520
And on this slide we
show you 3 examples.

00:29:54.520 --> 00:29:55.140
Rotate, scale and skew.

00:29:57.240 --> 00:29:59.160
But let's see rotate in action.

00:29:59.160 --> 00:30:03.520
So I'm going to hover
over this box.

00:30:03.520 --> 00:30:09.700
And it'll rotate nicely and we
also have a bonus nice, smooth

00:30:09.700 --> 00:30:13.340
transition. 2 lines of
code, very powerful API.

00:30:16.380 --> 00:30:18.900
How about animations?

00:30:18.900 --> 00:30:21.840
Do you guys remember the
notorious HTML blink tag?
597
00:30:21,84 --&gt; 00:30:21,18
Yeah?

00:30:21.180 --> 00:30:22.140
OK.

00:30:25.340 --> 00:30:27.620
It was considered the most
obnoxious HTML tag ever

00:30:27.620 --> 00:30:32.560
and some people even
call it simply evil.

00:30:32.560 --> 00:30:34.240
So, can we do
better with CSS 3?

00:30:37.580 --> 00:30:41.440
Yeah.

00:30:41.420 --> 00:30:43.480
You see the code up there?

00:30:43.480 --> 00:30:49.800
And ladies and gentlemen I
introduce to you CSS Pulse.

00:30:49.800 --> 00:30:52.020
Now I hope I didn't open
Pandora's box, so please

00:30:52.020 --> 00:30:54.400
don't over-abuse,
overuse this effect.

00:30:58.500 --> 00:31:02.338
Too late.

00:31:02.338 --> 00:31:07.140
I mentioned earlier the new
fonts available from Google

00:31:07.140 --> 00:31:13.040
and the web font API.

00:31:13.040 --> 00:31:17.680
Before that it was really
difficult to do one thing on

00:31:17.680 --> 00:31:20.020
the web since the early days
on the web and that was

00:31:20.020 --> 00:31:22.160
beautiful typography.

00:31:22.160 --> 00:31:24.778
Nice typography on the web.

00:31:24.778 --> 00:31:26.380
You had to do, you know, image.

00:31:27.220 --> 00:31:29.500
You had to play with Flash.

00:31:29.500 --> 00:31:31.740
Really headache.

00:31:31.740 --> 00:31:33.260
Not anymore.

00:31:33.260 --> 00:31:37.858
On this page we have an example
where we used I think 7 fonts

00:31:37.858 --> 00:31:43.080
from the Google font directory
and if you get our humor we

00:31:43.080 --> 00:31:46.860
wrote you a slightly
threatening note not to abuse

00:31:46.860 --> 00:31:50.700
the pulse animation and we
did it like the in the

00:31:50.700 --> 00:31:55.520
ransom notes, we used
newspaper clippings.

00:31:55.520 --> 00:31:56.200
That's what you can do
with the @font face.

00:31:59.920 --> 00:32:02.740
And finally, I want to mention
the flexible box model.

00:32:02.740 --> 00:32:06.020
Another really powerful
addition to the CSS 3 spec.

00:32:06.020 --> 00:32:10.740
With the flexible box model you
can do elastic and fluid

00:32:10.740 --> 00:32:15.558
layouts that adapt to the font
size or the browser

00:32:15.558 --> 00:32:15.900
window size.

00:32:17.960 --> 00:32:20.168
Things you weren't able to do
before, so let me show you

00:32:20.168 --> 00:32:25.278
a very simple demo here.

00:32:25.278 --> 00:32:28.520
Very nicely, whenever the size
changes your layout will

00:32:28.520 --> 00:32:31.618
nicely flow around it.

00:32:31.618 --> 00:32:35.740
So this is exactly what was
needed to provide a simple

00:32:35.740 --> 00:32:39.838
and easy solution to common
web design problems.

00:32:39.838 --> 00:32:46.000
Form layout and vertical
centering just 2 of them.

00:32:46.000 --> 00:32:49.618
How did we put all these
goodies to good use?

00:32:49.618 --> 00:32:50.744
Ame will show us.

00:32:53.820 --> 00:32:56.440
AME ROOMANN-KUMIK: So with
Chromabrush we definitely used

00:32:56.440 --> 00:33:00.440
CSS a lot, but we really wanted
it to be kind of fairly subtle.

00:33:00.440 --> 00:33:03.880
Even though Mihai really tried
to get me to put a blink tag

00:33:03.880 --> 00:33:05.098
in there or a pulse tag.

00:33:05.098 --> 00:33:07.580
I held out.

00:33:07.580 --> 00:33:12.460
So basically it's
very lightweight.

00:33:12.860 --> 00:33:15.800
We have a few rounded
corners here.

00:33:15.800 --> 00:33:19.180
On the UI elements we have some
drop shadows on the toolbars.

00:33:19.180 --> 00:33:20.318
That kind of thing.

00:33:20.318 --> 00:33:23.318
We rendered the logo,
again using the new

00:33:23.318 --> 00:33:24.318
font support in HTML5.

00:33:24.318 --> 00:33:27.778
Did a few effects on that, but
mostly understated stuff.

00:33:27.778 --> 00:33:29.140
We really wanted it to be
kind of like an elegant

00:33:29.140 --> 00:33:30.358
desktop application.

00:33:32.280 --> 00:33:36.618
But what I really think is like
the coolest part of the CSS 3,

00:33:36.618 --> 00:33:39.220
kind of the new features that
we had available was the

00:33:39.220 --> 00:33:41.440
ability to use box model.

00:33:41.000 --> 00:33:43.900
The flexible box model spec.

00:33:43.900 --> 00:33:46.838
So you can see here as I'm
resizing the browser window,

00:33:46.838 --> 00:33:49.720
the things that are meant to
resize are resizing and

00:33:49.720 --> 00:33:52.098
the things that are
not are constant.

00:33:52.098 --> 00:33:55.300
And normally I've written
websites which calculate

00:33:55.300 --> 00:33:56.640
the height of the window.

00:33:56.640 --> 00:33:58.700
They listen to events.

00:33:58.700 --> 00:33:59.660
There's usually some
lag behind that.

00:33:59.920 --> 00:34:00.920
That kind of thing.

00:34:00.920 --> 00:34:04.680
Well, all of the layout is
done entirely through CSS.

00:34:04.680 --> 00:34:07.220
There's no JavaScript doing
the ratios or proportions

00:34:07.220 --> 00:34:08.540
of this layout.

00:34:08.540 --> 00:34:10.140
So the great thing about this
is that the browsers own

00:34:10.140 --> 00:34:12.580
rendering engine decides
what goes where.

00:34:12.580 --> 00:34:14.800
We just kind of tell it how we
want things to look, which is

00:34:14.800 --> 00:34:17.818
kind of the point of CSS
in the first place.

00:34:17.818 --> 00:34:20.298
You can see that even the
toolbar on the bottom, if I

00:34:20.298 --> 00:34:23.478
make it too narrow, will
automatically reflow to fit

00:34:23.478 --> 00:34:25.040
all the icons that
we have in there.

00:34:25.040 --> 00:34:27.260
And the only reason it does
that is because those icons

00:34:27.260 --> 00:34:29.700
are inline elements like
they're supposed to be.

00:34:29.700 --> 00:34:32.380
So basically the browser
does it all for us.

00:34:32.380 --> 00:34:34.980
We don't have to do any
complex calculations.

00:34:34.980 --> 00:34:40.458
We still get all the advantage
of HTML and get to do some

00:34:40.458 --> 00:34:42.478
pretty cool stuff with CSS.

00:34:42.478 --> 00:34:46.438
So I'll just bring it back
to the presentation.

00:34:47.398 --> 00:34:48.318
MIHAI FLORIN IONESCU:
Thank you, Ame.

00:34:48.318 --> 00:34:49.378
That was awesome.

00:34:49.378 --> 00:34:54.658
So we did some Chromabrush demo
ends, but not its development.

00:34:54.658 --> 00:34:55.858
Chromabrush is open source.

00:34:55.858 --> 00:34:59.440
You can find it on the web
at chromabrush.com or the

00:34:59.440 --> 00:35:01.360
open source project at
chromabrush.googlecode.com.

00:35:05.398 --> 00:35:08.758
We plan to work on it more and
add some more HTML goodies and

00:35:08.758 --> 00:35:10.038
on this slide we have
a few examples.

00:35:11.418 --> 00:35:15.760
We also invite the developer
community to contribute.

00:35:15.760 --> 00:35:19.018
Have a look at it and let
us know what you think.

00:35:19.018 --> 00:35:22.758
One thing that it's very easy
to do is to add on offline

00:35:22.758 --> 00:35:23.798
experience for the user
through application cache.

00:35:24.578 --> 00:35:29.320
With WebSocket we can add
the multiuser experience.

00:35:29.320 --> 00:35:33.180
Imagine a whiteboard
application where remote users

00:35:33.180 --> 00:35:35.380
from different parts of the
world collaborate on

00:35:35.380 --> 00:35:37.780
the same drawing.

00:35:37.780 --> 00:35:42.078
With geolocation we can go a
step further and add location

00:35:42.078 --> 00:35:45.300
information for each one of
those users or drawings.

00:35:45.300 --> 00:35:46.978
And of course
there's a lot more.

00:35:46.978 --> 00:35:50.118
So that's why we
need your help.

00:35:50.118 --> 00:35:52.558
Please go ahed, check out
the project and send

00:35:52.558 --> 00:35:53.878
us your feedback.

00:35:53.878 --> 00:35:54.598
Contribute to it.

00:35:59.638 --> 00:36:05.800
With that said we are so
excited about what's coming up

00:36:05.800 --> 00:36:07.780
that we allowed ourselves to
use the CSS Pulse or

00:36:07.780 --> 00:36:08.300
the Pulse animation.

00:36:10.278 --> 00:36:17.378
So we get one free pass and
with that please welcome

00:36:17.378 --> 00:36:19.328
Chris Phenner and Mike
Park from Thumbplay.

00:36:28.178 --> 00:36:30.238
CHRIS PHENNER: OK, so we're
going to take some of

00:36:30.238 --> 00:36:31.158
things from this morning.

00:36:31.158 --> 00:36:34.778
We're going to apply
them to music.

00:36:34.778 --> 00:36:37.284
And I want to show you here,
with Mike's help, six things

00:36:37.284 --> 00:36:42.438
that we're going to do that I
hope to show what the

00:36:42.438 --> 00:36:44.418
attribute is, an actual
implementation of it.

00:36:44.418 --> 00:36:46.738
Want to see it in action
and then [UNINTELLIGIBLE]

00:36:46.738 --> 00:36:49.780
we can be clear about the
benefits we'll do that.

00:36:49.780 --> 00:36:51.400
This is an adaptation
of Thumbplay Music.

00:36:51.400 --> 00:36:55.360
A music service available
for $10 a month across

00:36:55.360 --> 00:36:56.238
a lot of platforms.

00:36:56.238 --> 00:36:59.860
Including soon those that
support HTML5 and we've

00:36:59.860 --> 00:37:02.960
licensed over 8 million songs
and have had API across a lot

00:37:02.960 --> 00:37:06.760
of platforms available
for some time.

00:37:06.760 --> 00:37:08.698
And the first thing we'd like
to show you because it is

00:37:08.698 --> 00:37:10.104
music is the audio tag.

00:37:10.104 --> 00:37:11.092
Mike.

00:37:17.936 --> 00:37:19.438
Made of HTML5 audio.

00:37:19.438 --> 00:37:25.628
And we use that both in the
overlays within the feature and

00:37:25.628 --> 00:37:29.078
then as the bottom embedded
player and we'll show you some

00:37:29.078 --> 00:37:30.498
of the effects in
that in a second.

00:37:30.498 --> 00:37:35.978
Now as you sort the songs in
this app by those that are

00:37:35.978 --> 00:37:36.058
in this case, most popular.

00:37:36.058 --> 00:37:38.398
We've pulled the
most popular API.

00:37:38.398 --> 00:37:40.360
Mike's now pivoting using
the web database API.

00:37:41.420 --> 00:37:44.558
There's a SQL-like database
running in here with all the

00:37:44.558 --> 00:37:46.800
attributes related
to each track.

00:37:46.800 --> 00:37:47.678
You'll see in a second.

00:37:47.678 --> 00:37:52.338
So the metadata related to
this music including time.

00:37:52.338 --> 00:37:55.178
You'll see then a preview path
to the 30 second stream.

00:37:55.178 --> 00:37:57.098
An image path with its
imagery associated with it.

00:37:57.098 --> 00:38:00.758
No trips to the server
are happening here.

00:38:00.758 --> 00:38:02.118
As you saw from some of
the pivots Mike was doing

00:38:02.118 --> 00:38:03.418
it happens really fast.

00:38:03.418 --> 00:38:08.678
Now we're next you going to go
into one of the album releases.

00:38:08.678 --> 00:38:12.158
LCD Soundsystem just yesterday
put out, "This is

00:38:12.158 --> 00:38:15.498
Happening" and when the
list of songs in the songs tab

00:38:15.498 --> 00:38:18.038
comes up you're going to see
Mike select the second one from

00:38:18.038 --> 00:38:20.620
the album because he's all
psyched to hear it, but he

00:38:20.620 --> 00:38:22.400
doesn't have time right now, so
he's going to drag it over to

00:38:22.400 --> 00:38:27.078
the playlist menu on the left,
using-- you guessed

00:38:27.078 --> 00:38:29.218
it-- drag and drop.

00:38:29.218 --> 00:38:32.158
Now full disclosure, we did do
this in jQuery, because we're

00:38:32.158 --> 00:38:35.378
waiting for the naive attribute
in HTML5 to bake a liitle bit,

00:38:35.378 --> 00:38:36.578
but we're ready to do that.

00:38:37.920 --> 00:38:40.860
And then I think you saw a
notification when the drag

00:38:40.860 --> 00:38:41.620
and drop completed itself.

00:38:41.620 --> 00:38:44.400
That is using the native
notifications API.

00:38:44.400 --> 00:38:47.700
Mike's pop-uped a couple time.

00:38:47.700 --> 00:38:49.340
The album cover art,
that's a CSS effect.

00:38:52.558 --> 00:38:55.058
And then in CSS as we're
talking about it, Mike can

00:38:55.058 --> 00:38:58.560
mouse over some of the embedded
player things that change

00:38:58.560 --> 00:39:00.658
state and effects.

00:39:00.658 --> 00:39:03.318
Also, up in search if Mike
wants to dive deeper in that

00:39:03.318 --> 00:39:08.698
album and look for something
we're going to auto-fill what

00:39:08.698 --> 00:39:11.688
the likely results are and then
as Mike tries to figure out

00:39:11.688 --> 00:39:13.438
which one he actually wants to
do, you'll also see some

00:39:13.438 --> 00:39:14.758
CSS effects there.

00:39:14.298 --> 00:39:18.678
So we found that it puts the
presentation layer where it

00:39:18.678 --> 00:39:21.658
belongs and away from the
code that handles real

00:39:21.658 --> 00:39:23.418
logic, if you will.

00:39:23.418 --> 00:39:24.298
I think that's everything.

00:39:24.298 --> 00:39:25.138
That's Thumbplay music.

00:39:25.138 --> 00:39:30.278
Oh, and there's one
more I always forget.

00:39:30.278 --> 00:39:32.458
Mike has to go to a meeting in
the middle of this demo and he

00:39:32.458 --> 00:39:34.978
doesn't have time and doesn't
want it to look like he was

00:39:34.978 --> 00:39:38.918
wasting time, so he's now
closed in this case the

00:39:38.918 --> 00:39:39.258
tab of the browser.

00:39:39.998 --> 00:39:42.098
He's running to his meeting,
so it didn't look like he

00:39:42.098 --> 00:39:43.328
was frittering around.

00:39:43.328 --> 00:39:45.378
And now he's come back, but was
really psyched to get back to

00:39:45.378 --> 00:39:48.258
where he left off with this
playlist and you may have

00:39:48.258 --> 00:39:50.260
guessed it already.

00:39:50.260 --> 00:39:53.558
We're about to see local
storage with the auto log-in.

00:39:53.760 --> 00:40:00.440
We'll see a second of the
main page, but wait for it

00:40:00.440 --> 00:40:01.800
and back where we were.

00:40:01.800 --> 00:40:04.238
So that's all 6 attributes.

00:40:04.238 --> 00:40:05.278
Thanks for letting a
non-developer walk

00:40:05.278 --> 00:40:06.318
you through them.

00:40:06.318 --> 00:40:08.940
And if you want it
I'll learn more.

00:40:08.940 --> 00:40:12.100
I'd say the note to send to is
partners@thumbplay.com for

00:40:12.100 --> 00:40:15.872
more, but thank you very much
for your time and attention.

00:40:15.864 --> 00:40:16.856
MIHAI FLORIN IONESCU: Awesome.

00:40:27.692 --> 00:40:30.098
During the keynote you got a
glimpse at the new HTML5

00:40:30.098 --> 00:40:35.918
enabled TweetDeck and now I'd
like to invite Iain Dodsworth,

00:40:35.918 --> 00:40:38.178
CEO and Founder of TweetDeck,
my favorite tweeting

00:40:38.178 --> 00:40:41.938
app to show us more.

00:40:41.938 --> 00:40:42.124
Thank you Iain.

00:40:42.124 --> 00:40:43.128
IAIN DODSWORTH: Thank you.

00:40:49.174 --> 00:40:52.058
OK, so I'm Iain Dodsworth.

00:40:52.058 --> 00:40:53.058
CEO and Founder of TweetDeck.

00:40:54.958 --> 00:41:00.308
At it's most simplest TweetDeck
is an application, sort of

00:41:00.308 --> 00:41:01.758
famously if you like
on the desktop.

00:41:01.758 --> 00:41:03.758
We've got it on the iPad
and also on the iPhone.

00:41:04.118 --> 00:41:07.078
And Android coming very soon.

00:41:07.078 --> 00:41:11.938
And it's designed to take quite
a lot of social network

00:41:11.938 --> 00:41:14.598
information and make it
a lot more manageable.

00:41:14.598 --> 00:41:17.978
That's at its most simplistic.

00:41:17.978 --> 00:41:21.738
At its kind of normal run rate
it's a huge desktop application

00:41:21.738 --> 00:41:28.058
that's very complicated and
very powerful and very black

00:41:28.058 --> 00:41:30.478
and obviously I love it and
that's why I built

00:41:30.478 --> 00:41:31.678
it like that.

00:41:31.678 --> 00:41:37.458
So this is our HTML5 TweetDeck
and this is a little bit of a

00:41:37.458 --> 00:41:38.298
departure for us because
everything else has

00:41:38.298 --> 00:41:39.898
been a native app.

00:41:40.760 --> 00:41:42.918
We obviously get most
of our usage from the

00:41:42.918 --> 00:41:43.978
desktop at the moment.

00:41:43.978 --> 00:41:47.138
So I think the main points on
this, obviously we can see

00:41:47.138 --> 00:41:50.878
that we can scroll very
smoothly up and down.

00:41:51.238 --> 00:41:52.458
We can go left and right.

00:41:52.458 --> 00:42:06.558
Let's add a new column
in just like this.

00:42:06.558 --> 00:42:06.658
[UNINTELLIGIBLE].

00:42:06.658 --> 00:42:07.840
It's very quick.

00:42:07.840 --> 00:42:11.600
The actual system resources
this takes is very low as well.

00:42:11.600 --> 00:42:15.960
This is really at the moment
only using Twitter and Buzz.

00:42:17.638 --> 00:42:20.478
We don't actually have a Buzz
integration at the moment, but

00:42:20.478 --> 00:42:23.384
we have Buzz integrated in this
and we'll be working on this

00:42:23.384 --> 00:42:26.418
over the next few weeks to put
Facebook in and to put all the

00:42:26.418 --> 00:42:27.758
other social networks that are
kind of required

00:42:27.758 --> 00:42:29.538
of a TweetDeck.

00:42:29.538 --> 00:42:33.000
So it won't be very long before
we will get a fully featured

00:42:33.000 --> 00:42:35.340
HTML5 version of a TweetDeck.

00:42:35.340 --> 00:42:37.960
Which to be fair, we didn't
even know was possible

00:42:37.960 --> 00:42:38.400
when we started.

00:42:38.400 --> 00:42:43.098
So as it stands at the moment
this is an internal piece of

00:42:43.098 --> 00:42:47.798
research, which obviously we're
incredibly happy to show today

00:42:47.798 --> 00:42:49.698
and obviously our plan
is to put it out.

00:42:51.058 --> 00:42:55.378
But I think the point that's
worth making here is that as a

00:42:55.378 --> 00:43:00.298
traditional desktop company, if
you like, we really wanted to

00:43:00.298 --> 00:43:03.780
prove that you could actually
do a TweetDeck in a web browser

00:43:03.780 --> 00:43:07.360
and there was absolutely no way
we were going to do a

00:43:07.360 --> 00:43:10.476
dumbed down, light version
of TweetDeck at all.

00:43:10.476 --> 00:43:13.558
So it was either fully featured
or it's never going to

00:43:13.558 --> 00:43:14.760
appear in a browser.

00:43:14.760 --> 00:43:17.778
So you can see the we're kind
of getting there and I think

00:43:17.778 --> 00:43:18.760
that's probably the right
approach in this instance.

00:43:18.760 --> 00:43:23.238
So just some of the things you
can see, sort of on display.

00:43:25.158 --> 00:43:32.098
So obviously we do have audio
alerts in the back, which at

00:43:32.098 --> 00:43:33.118
the moment is kind
of not showing.

00:43:33.118 --> 00:43:36.788
But the other element of this
is obviously with a full sort

00:43:36.788 --> 00:43:41.218
of audio implementation we can
also build in a media player

00:43:41.218 --> 00:43:42.080
into this so that we could
play everything inline.

00:43:42.080 --> 00:43:44.760
You don't have to go
off to another page in

00:43:44.760 --> 00:43:45.880
order to play audio.

00:43:45.880 --> 00:43:47.940
We have notifications.

00:43:48.280 --> 00:43:53.218
Desktop notifications in here
and that's been one of the main

00:43:53.218 --> 00:43:57.218
reasons why we haven't actually
built a web version as well is

00:43:57.218 --> 00:44:00.858
obviously we want notifications
and TweetDeck is not sort of

00:44:00.858 --> 00:44:02.498
at the front all the time.

00:44:02.498 --> 00:44:05.458
It's kind of sitting in the
background, churning away, so

00:44:05.458 --> 00:44:07.538
notifications a huge part of
the sort of functionality.

00:44:09.598 --> 00:44:10.948
Drag and drop of columns.

00:44:12.918 --> 00:44:14.878
Little bit slow there.

00:44:14.878 --> 00:44:19.280
The drag and drop of columns.

00:44:19.280 --> 00:44:21.478
I mean, obviously the next
thing we'll do after that is

00:44:21.478 --> 00:44:24.058
the dragging and dropping
of actual users as well.

00:44:24.058 --> 00:44:27.280
So this is a very nice way of
creating lists and that kind of

00:44:27.280 --> 00:44:31.260
thing where you have to use a
specific or Tweet specific

00:44:31.260 --> 00:44:33.560
actions will now be able to do
the whole thing through drag

00:44:33.560 --> 00:44:35.820
and drop inside a browser.

00:44:35.820 --> 00:44:39.920
And of course there's offline
storage included so that

00:44:39.920 --> 00:44:41.800
obviously if you just turn it
off and you come back it's

00:44:41.800 --> 00:44:42.578
exactly where it was.

00:44:42.578 --> 00:44:44.158
You won't use your place in a
column, especially if it's

00:44:44.158 --> 00:44:47.000
kind of quite a long column.

00:44:47.000 --> 00:44:51.220
And then kind of the final
thing on this is that we have a

00:44:51.220 --> 00:44:54.280
CSS 3 layer on top as well, so
that we can get some fairly

00:44:54.280 --> 00:44:55.500
nice animations in here.

00:44:55.500 --> 00:44:59.438
So it's rather early days,
but it hasn't taken a huge

00:44:59.438 --> 00:45:00.998
amount of time to get
to this point either.

00:45:00.998 --> 00:45:04.098
It's kind of only been about
a month to get to this.

00:45:04.098 --> 00:45:09.558
And I think to be fair you
will see a TweetDeck released

00:45:09.558 --> 00:45:11.000
in the browser soon.

00:45:11.600 --> 00:45:13.500
We've just got to prove that we
can get it all in, but this is

00:45:13.500 --> 00:45:16.062
a fantastic start, so
thanks very much.

00:45:18.318 --> 00:45:24.578
MIHAI FLORIN IONESCU: Amazing.

00:45:25.518 --> 00:45:27.898
You know, absolutely
mind-blowing what you

00:45:27.898 --> 00:45:28.578
can do with HTML5.

00:45:30.558 --> 00:45:31.618
So it's time to wrap up.

00:45:31.618 --> 00:45:35.160
Before we do that I want to
go over some key-takeaways

00:45:35.160 --> 00:45:37.818
from this talk.

00:45:37.818 --> 00:45:40.638
First, over the past year
we have seen a wave of

00:45:40.638 --> 00:45:44.638
new HTML5 technologies
all gaining momentum.

00:45:44.638 --> 00:45:46.178
And we expect the
trend to continue.

00:45:47.498 --> 00:45:51.898
Second, browser innovation
is accelerating.

00:45:51.898 --> 00:45:54.098
We are seeing that not only
with Google Chrome, but with

00:45:54.098 --> 00:45:58.778
other browsers as well and it's
really great to see faster

00:45:58.778 --> 00:46:00.800
JavaScript engines and more
powerful and better

00:46:00.800 --> 00:46:01.940
developer tools.

00:46:01.940 --> 00:46:08.838
Third, as we have seen from our
demos and examples, web

00:46:08.838 --> 00:46:11.898
applications are getting closer
and closer to parity with

00:46:11.898 --> 00:46:13.800
desktop applications.

00:46:13.800 --> 00:46:17.218
We're close, we're getting
there and now with Google apps

00:46:17.218 --> 00:46:21.098
store, web store launch you can
also monetize your

00:46:21.098 --> 00:46:21.818
web applications.

00:46:24.418 --> 00:46:29.078
And finally, we couldn't have
done any of these without the

00:46:29.078 --> 00:46:33.280
involvement and support from
the developer community.

00:46:33.280 --> 00:46:37.030
So please stay involved and
help us move the web forward.

00:46:37.030 --> 00:46:38.056
Thank you.

00:46:49.324 --> 00:46:51.098
We're starting our
Q&amp;A session.

00:46:51.098 --> 00:46:54.958
There's also a link as we
promised to developer

00:46:54.958 --> 00:46:58.578
resources, it's a page where
we're going to keep adding

00:46:58.578 --> 00:47:02.318
more and more resources
as we see fit.

00:47:05.018 --> 00:47:09.818
And if you have a question
that's not yet in the moderator

00:47:09.818 --> 00:47:14.898
please use the microphones
on both sides of the aisle.

00:47:14.898 --> 00:47:16.138
AME ROOMANN-KUMIK: So I guess
we'll just start off with the

00:47:16.138 --> 00:47:19.118
moderator question, what 3
HTML5 features can I implement

00:47:19.118 --> 00:47:23.860
on my site quickly that
will benefit my users most?

00:47:23.860 --> 00:47:25.280
Nice.

00:47:25.280 --> 00:47:28.718
Well, what type of
site do you have?

00:47:30.898 --> 00:47:32.798
Something I actually really
liked about the keynote was

00:47:32.798 --> 00:47:36.418
Sports Illustrated talking
about you know, beautiful fonts

00:47:36.418 --> 00:47:39.638
make readability a lot better.

00:47:39.638 --> 00:47:41.858
And so if you can use fonts.

00:47:41.858 --> 00:47:44.880
Like I honestly think that nice
layouts, getting kind of

00:47:44.880 --> 00:47:47.460
creative, making the web like
more engaging for people

00:47:47.460 --> 00:47:48.878
is very interesting.

00:47:49.058 --> 00:47:51.298
In terms of a performance
benefit, obviously switching to

00:47:51.298 --> 00:47:55.838
CSS, not using images as often.

00:47:55.838 --> 00:48:00.538
Especially doing things like if
you're willing to sacrifice

00:48:00.538 --> 00:48:03.180
rounded corners for everyone,
so that you can stop serving a

00:48:03.180 --> 00:48:07.668
ton of rounded corner images
for example, I'd say switch to

00:48:07.668 --> 00:48:09.598
that right away because it
will save you bandwidth.

00:48:09.598 --> 00:48:11.898
Rendering time
will be improved.

00:48:11.898 --> 00:48:12.438
That kind of thing.

00:48:13.238 --> 00:48:17.558
You can also use new markup in
HTML5 for accessibility, which

00:48:17.558 --> 00:48:25.218
is obviously extremely
important for users who might

00:48:25.218 --> 00:48:29.578
rely on that and have browsers
that really need content to be

00:48:29.578 --> 00:48:32.338
marked up correctly and in a
clean, kind of nice format.

00:48:32.338 --> 00:48:34.938
So I think those are
pretty good features.

00:48:34.938 --> 00:48:37.178
I don't know if you
have your own.

00:48:37.178 --> 00:48:38.858
MIHAI FLORIN IONESCU: Let's
go quickly to some more

00:48:38.858 --> 00:48:40.320
questions and then
we're going to be here.

00:48:40.320 --> 00:48:43.298
If we didn't answer a question,
come talk to us or outside.

00:48:43.298 --> 00:48:46.478
So when we see an ID for
writing HTML5 applications?

00:48:46.918 --> 00:48:49.318
That pretty much
makes things easier.

00:48:51.438 --> 00:48:53.958
During the keynote we just saw
a demonstration of Dreamweaver.

00:48:54.338 --> 00:48:57.398
I'm sure others
are in the works.

00:48:59.598 --> 00:49:02.178
With the momentum that I just
mentioned, behind the HTML5

00:49:02.178 --> 00:49:06.380
applications, IDs--
Just a matter of time

00:49:06.380 --> 00:49:07.838
before they appear.

00:49:07.838 --> 00:49:09.238
Let's take a question
from the microphone.

00:49:09.238 --> 00:49:12.098
AUDIENCE: From what we've seen
today of notifications it looks

00:49:12.098 --> 00:49:14.738
like a very powerful tool with
a lot of uses, but what's being

00:49:14.738 --> 00:49:17.820
done to prevent it from being
used by say, invasive

00:49:17.820 --> 00:49:19.678
advertisers or
malicious software?

00:49:19.678 --> 00:49:23.038
MIHAI FLORIN IONESCU: So you've
noticed both in the slides and

00:49:23.038 --> 00:49:27.760
when Ame demonstrated our paint
applications you have to give

00:49:27.760 --> 00:49:28.680
access to the notification API.

00:49:28.320 --> 00:49:31.398
When the slide first appeared
you didn't have an access.

00:49:31.398 --> 00:49:35.678
You specifically had to click
on the allow access for this

00:49:35.678 --> 00:49:36.318
website to display
notification.

00:49:37.658 --> 00:49:40.000
Once you do that it means
you trust the site and if

00:49:40.000 --> 00:49:45.078
they annoy you you can
take out that right.

00:49:45.078 --> 00:49:46.138
AME ROOMANN-KUMIK:
Additionally, notifications

00:49:46.138 --> 00:49:48.840
have the option to disable
for the serving domain.

00:49:48.840 --> 00:49:52.400
At least in Chrome and we're
hoping that other browser

00:49:52.400 --> 00:49:54.930
implement some more features
so that the user is

00:49:54.930 --> 00:49:56.042
in control of it.

00:49:56.042 --> 00:49:56.254
AUDIENCE: Excellent.

00:49:56.254 --> 00:49:56.680
Thank you.

00:49:56.680 --> 00:49:57.110
AME ROOMANN-KUMIK:
Good question.

00:49:57.110 --> 00:49:57.860
Thanks.

00:49:57.860 --> 00:49:58.218
MIHAI FLORIN IONESCU:
Next question.

00:49:58.218 --> 00:49:59.878
AUDIENCE: Can you say
anything about solutions

00:49:59.878 --> 00:50:01.458
for specialized typography?

00:50:01.458 --> 00:50:05.898
For example, in the math
community we use LaTeX a lot or

00:50:05.898 --> 00:50:08.380
for musicians, music notation
and that sort of thing

00:50:08.380 --> 00:50:09.878
within the browser?

00:50:10.498 --> 00:50:12.998
MIHAI FLORIN IONESCU: We're
not specialists in that.

00:50:12.998 --> 00:50:15.918
There is a talk about the web
fonts I believe later today.

00:50:16.738 --> 00:50:18.218
AME ROOMANN-KUMIK: I'm not
sure about that time.

00:50:18.218 --> 00:50:20.300
I have seen people do stuff
interesting in canvas.

00:50:20.658 --> 00:50:24.358
Like I saw an implementation
in canvas of the
996
00:50:24,358 --&gt; 00:50:24,078
LaTeX layout engine.

00:50:24.078 --> 00:50:27.838
So if you know the CSS kind
of layout if you have full

00:50:27.838 --> 00:50:31.980
justification isn't quite
as nice as the LaTeX one.

00:50:32.880 --> 00:50:36.380
So someone actually wrote it in
canvas so they're rendering the

00:50:36.380 --> 00:50:37.120
fonts in canvas and
doing it that way.

00:50:37.120 --> 00:50:37.500
It's interesting.

00:50:38.018 --> 00:50:42.658
I think obviously the spec
could probably include

00:50:42.658 --> 00:50:45.898
additional text rendering
modes, but the progress we've

00:50:45.898 --> 00:50:48.658
made so far is very good.

00:50:48.618 --> 00:50:50.030
MIHAI FLORIN IONESCU: So for
those of you who don't know

00:50:50.030 --> 00:50:56.978
there is an HTML5 group that
we all in the Chrome team

00:50:56.978 --> 00:50:57.980
respond to questions.

00:50:57.980 --> 00:51:00.620
So if we don't answer anything
here go and post your question

00:51:00.620 --> 00:51:03.558
there and it will
get an answer.

00:51:03.558 --> 00:51:06.118
We have more people that know
a lot more stuff then just

00:51:06.118 --> 00:51:07.066
the two of us can answer.
1012
00:51:08,054 --&gt; 00:51:08,042
AUDIENCE: [UNINTELLIGIBLE]

00:51:08.042 --> 00:51:12.456
fast question, are you going to
post your HTML5 presentations

00:51:12.456 --> 00:51:12.940
somewhere [INAUDIBLE]?

00:51:14.360 --> 00:51:15.578
AME ROOMANN-KUMIK: So the
question was, are we

00:51:15.578 --> 00:51:16.918
going to post it online?

00:51:16.918 --> 00:51:17.618
Obviously yes, we will.

00:51:18.260 --> 00:51:21.280
So the presentation is being
recorded and will be on YouTube

00:51:21.280 --> 00:51:26.254
shortly and as soon as we just
basically just push it out to

00:51:26.254 --> 00:51:28.620
an URL somewhere we'll make
sure that it's attached

00:51:28.620 --> 00:51:29.680
to all the IO content.

00:51:29.680 --> 00:51:30.980
So you'll have access.

00:51:31.760 --> 00:51:34.960
I also kind of want to
open source it so you can

00:51:34.960 --> 00:51:37.240
actually pick it apart
and do stuff with it.

00:51:37.240 --> 00:51:39.878
MIHAI FLORIN IONESCU: Reuse
it, spread the word.

00:51:39.878 --> 00:51:41.498
HTML5 is cool.

00:51:41.498 --> 00:51:43.498
AME ROOMANN-KUMIK: Let's
take one more from the--

00:51:43.498 --> 00:51:45.858
MIHAI FLORIN IONESCU: One
more from the microphone.

00:51:45.858 --> 00:51:47.748
AUDIENCE: For this notification
model there was obviously like

00:51:47.748 --> 00:51:50.878
a permission system where the
app can request permissions

00:51:50.878 --> 00:51:54.858
from the user, is that limited
to domain or does is persist?

00:51:54.858 --> 00:51:58.158
Is there any extra
functionality there?

00:51:58.158 --> 00:52:01.938
Or is it simply, every single
time they load the app they

00:52:01.938 --> 00:52:02.978
have to give permission again?

00:52:03.578 --> 00:52:03.698
AME ROOMANN-KUMIK:
That's a good question.

00:52:03.698 --> 00:52:07.338
The question, so does
the notification

00:52:07.338 --> 00:52:08.738
permission persist?

00:52:08.078 --> 00:52:09.138
It does persist.

00:52:09.138 --> 00:52:10.838
It's per domain.

00:52:11.198 --> 00:52:16.078
You can think of it kind of
like in the same model as I

00:52:16.078 --> 00:52:18.178
guess, what would
be a good way?

00:52:18.178 --> 00:52:20.958
Kind of like an AJAX thing
where it's all kind of scoped

00:52:20.958 --> 00:52:23.518
through the same domain
or like a cookie thing.

00:52:23.518 --> 00:52:25.278
And you know, the user can
revoke it at any time.

00:52:25.278 --> 00:52:27.638
The browser should have
its own UI for that

00:52:27.638 --> 00:52:28.858
kind of thing as well.

00:52:30.538 --> 00:52:32.318
For the most part you'll have
to say yes once and as long as

00:52:32.318 --> 00:52:34.978
you don't want to disable
it it'll stay on.

00:52:34.978 --> 00:52:38.618
Now an interesting part of the
apps store or sorry the web

00:52:38.618 --> 00:52:41.580
store, the Chome web store is
that Chrome web apps can

00:52:41.580 --> 00:52:45.058
actually declare that they want
this permission up front, so

00:52:45.058 --> 00:52:47.338
when the user installs it
they'll preemptively

00:52:47.338 --> 00:52:48.418
agree to it.

00:52:48.418 --> 00:52:51.658
And then the app will be able
to send notifications without

00:52:51.658 --> 00:52:54.778
that bar and Chrome extensions
can do that as well,

00:52:54.778 --> 00:52:56.658
which is pretty cool.

00:52:56.658 --> 00:53:00.018
I'm not sure if this is kind of
like a meta question or if it's

00:53:00.018 --> 00:53:01.778
just really a legitimate bug.

00:53:01.778 --> 00:53:02.878
MIHAI FLORIN IONESCU:
Someone is testing us.

00:53:02.978 --> 00:53:07.818
AME ROOMANN-KUMIK: Yeah, HTML--
I'm not good at grokking the

00:53:07.818 --> 00:53:12.438
solve HTML4 issues, bring new
concepts to web, extend mobile

00:53:12.438 --> 00:53:15.820
platforms, just a
regular update.

00:53:15.820 --> 00:53:18.598
I'm not really sure.

00:53:18.598 --> 00:53:20.658
Sorry.

00:53:20.658 --> 00:53:22.178
MIHAI FLORIN IONESCU: We are
geeks, but we can't read.

00:53:23.198 --> 00:53:25.058
AME ROOMANN-KUMIK: HTML verus
apps, what are your thoughts?

00:53:27.798 --> 00:53:29.058
I don't think it
needs to be versus.

00:53:29.058 --> 00:53:35.378
MIHAI FLORIN IONESCU:
HTML5 apps are apps.

00:53:35.378 --> 00:53:38.308
That's what we just
showed you today and

00:53:38.308 --> 00:53:39.380
all our invited guests.

00:53:39.380 --> 00:53:41.178
AME ROOMANN-KUMIK: And I used
Photoshop and I'll use

00:53:41.178 --> 00:53:44.338
Chromabrush when I want
something lightweight.

00:53:44.338 --> 00:53:51.058
Hopefully the line will blur
even more as we go ahead.

00:53:51.058 --> 00:53:54.018
Will HTML5 file API
work on mobile?

00:53:54.198 --> 00:53:56.518
That's really up to
mobile I guess.

00:53:57.800 --> 00:54:02.478
If mobile implements it, which
actually brings an interesting

00:54:02.478 --> 00:54:04.738
point that mobile browsers are
actually the ones that are

00:54:04.738 --> 00:54:06.760
implementing a lot of these
features the quickest.

00:54:07.178 --> 00:54:12.800
Mostly because a lot of them
are WebKit based and WebKit

00:54:12.800 --> 00:54:14.338
adopts a lot of these
features rather quickly.

00:54:15.218 --> 00:54:15.838
They're useful for mobile.

00:54:16.238 --> 00:54:19.198
Things like offline mode is
really essential for web, for

00:54:19.198 --> 00:54:23.060
mobile web to work, so I'm
assuming that it will work on

00:54:23.060 --> 00:54:26.478
mobile at some point, but
it's just not there yet.

00:54:26.478 --> 00:54:28.538
MIHAI FLORIN IONESCU: Mobile
drives the development

00:54:28.538 --> 00:54:29.218
of some HTML5 features.

00:54:29.638 --> 00:54:32.360
For example, application
cache it's very useful

00:54:32.360 --> 00:54:34.340
on mobile phone.

00:54:34.340 --> 00:54:36.262
You have offline access to
your apps when you don't

00:54:36.262 --> 00:54:37.118
have a good connection.

00:54:37.118 --> 00:54:39.006
AME ROOMANN-KUMIK: Why
don't we take a person.

00:54:39.060 --> 00:54:42.360
AUDIENCE: How did the
Chromabrush, how was it

00:54:42.360 --> 00:54:46.158
able to save images to a
files from that canvas?

00:54:46.158 --> 00:54:49.580
AME ROOMANN-KUMIK: So the
question, how does Chromabrush

00:54:49.580 --> 00:54:50.878
saves images to a
file from the canvas?

00:54:50.878 --> 00:54:52.198
Well, it doesn't right
now, which is like

00:54:52.198 --> 00:54:53.500
the easiest answer.

00:54:54.998 --> 00:55:00.820
But as soon as I get back to
work I'm assuming that I'll

00:55:00.820 --> 00:55:02.258
probably just bounce it off
the server and have the user

00:55:02.258 --> 00:55:05.340
download it using the native
browser kind of thing.

00:55:05.340 --> 00:55:08.898
I have to look into drag and
drop out of the browser,

00:55:08.898 --> 00:55:10.578
which you could do as well.

00:55:10.300 --> 00:55:14.018
But the thing is that for that
you basically need to have the

00:55:14.018 --> 00:55:15.818
user drag an image,
not a canvas.

00:55:15.818 --> 00:55:19.858
So canvas has a nice API that
you can get in like a raw data

00:55:19.858 --> 00:55:21.218
string that's a PNG file.

00:55:21.218 --> 00:55:22.718
So you can do things with that.

00:55:22.718 --> 00:55:23.198
You can store it online.

00:55:23.198 --> 00:55:26.918
Upload it to web service,
you can prompt the user

00:55:26.918 --> 00:55:28.638
to save it somewhere.

00:55:29.158 --> 00:55:32.138
Eventually we could do the file
API, but again, that wouldn't

00:55:32.138 --> 00:55:34.630
be on the file system it
would be kind of in the

00:55:34.630 --> 00:55:36.918
apps own file space.

00:55:37.198 --> 00:55:39.860
MIHAI FLORIN IONESCU: That is
an excellent question and shows

00:55:39.860 --> 00:55:44.040
us that we still have this much
to go to bridge the gap with

00:55:44.040 --> 00:55:48.358
desktop applications and that's
why you know, all this stuff,

00:55:48.358 --> 00:55:51.638
all those questions, all these
problems are really great

00:55:51.638 --> 00:55:53.678
to push forward the
development of HTML5.

00:55:54.340 --> 00:55:57.820
And you know, new APIs like
file APIs and other things

00:55:57.820 --> 00:56:00.258
the community is working
on will solve this.

00:56:00.258 --> 00:56:02.018
AME ROOMANN-KUMIK: Also
consider, how would use save

00:56:02.018 --> 00:56:04.958
a file from a browser?

00:56:04.958 --> 00:56:07.638
A browser can save files, but
has its own mechanism for that.

00:56:07.638 --> 00:56:09.308
It's not quite the
same as the desktop.

00:56:10.078 --> 00:56:12.748
Good point.

00:56:14.998 --> 00:56:17.618
AUDIENCE: So I worked at Real
Networks about 10 years ago and

00:56:17.618 --> 00:56:20.476
we were working on a language
called Smile, I don't know if

00:56:20.476 --> 00:56:20.780
you're familiar with that.

00:56:20.780 --> 00:56:25.458
But it allows you to control
when media was downloaded and

00:56:25.458 --> 00:56:28.058
does HTML5 have anything like
that where you can actually

00:56:28.058 --> 00:56:31.580
control, load this video,
preload this video, schedule

00:56:31.580 --> 00:56:34.300
something else coming in 10
seconds later because I'm

00:56:34.300 --> 00:56:37.998
assuming with modern browsers
and bandwidth it's not a

00:56:37.998 --> 00:56:39.238
problem, but on mobile phones
it probably will be an issue

00:56:39.238 --> 00:56:42.258
where you're going to need to
have some access to that?

00:56:42.258 --> 00:56:43.078
AME ROOMANN-KUMIK: Yes.

00:56:43.018 --> 00:56:47.238
So I mean, there are techniques
that you can use to preload.

00:56:47.238 --> 00:56:51.918
The HTML5 video tag has its own
kind of DOM states you can

00:56:51.918 --> 00:56:53.058
detect whether something's
loaded or not and

00:56:53.058 --> 00:56:54.058
ready to play.

00:56:57.820 --> 00:57:01.118
It's as simple as putting a
video element in the page and

00:57:01.118 --> 00:57:03.218
the browser will get it and
when it's ready you can

00:57:03.218 --> 00:57:05.398
say, do something.

00:57:06.058 --> 00:57:09.918
You can also use JavaScript to
script elements dynamically,

00:57:09.918 --> 00:57:11.638
insert them into the page.

00:57:11.638 --> 00:57:13.098
Is that what you were--

00:57:13.098 --> 00:57:16.538
AUDIENCE: There's actually
going to be some sort of event

00:57:16.538 --> 00:57:18.718
spawned when it's ready to play
or you'll be able to say I've

00:57:18.718 --> 00:57:20.498
got this much available
in the cache?

00:57:20.498 --> 00:57:22.218
You actually have
access to that?

00:57:22.218 --> 00:57:24.718
AME ROOMANN-KUMIK: Yeah, that's
in the video tag, so you

00:57:24.718 --> 00:57:25.198
can actually determine.

00:57:26.758 --> 00:57:30.100
You get an event for when you
have enough to play and the

00:57:30.100 --> 00:57:33.138
buffering would take you
to the end assuming that

00:57:33.138 --> 00:57:35.718
the rate stays the same.

00:57:35.718 --> 00:57:38.478
You also get an event when
the movie is buffered.
1159
00:57:38,478 --&gt; 00:57:38,458
And you can play it.

00:57:38.458 --> 00:57:42.998
MIHAI FLORIN IONESCU: Let's
take one more question

00:57:42.998 --> 00:57:44.760
from the moderator.

00:57:44.760 --> 00:57:47.338
Is the Chrome Team planning
on implementing HTML5

00:57:47.338 --> 00:57:49.158
form input widgets soon?

00:57:49.158 --> 00:57:51.898
So if you guys go to the
developer resources you will

00:57:51.898 --> 00:57:55.958
find there's a link which says
web platform status and we try

00:57:55.958 --> 00:57:56.358
to keep that up to date.

00:57:56.358 --> 00:58:00.898
It tells you for each one of
the HTML5 APIs we're working

00:58:00.898 --> 00:58:03.518
on where are we at with
the implementation.

00:58:04.338 --> 00:58:06.938
Of course you can also look
at the Chromium discussion

00:58:06.938 --> 00:58:08.360
list and all that stuff.

00:58:08.360 --> 00:58:09.760
So this is in the works.

00:58:09.060 --> 00:58:12.800
You know, there are actually
examples out there that

00:58:12.800 --> 00:58:15.838
show different cases
of different examples.

00:58:15.838 --> 00:58:19.120
And once that makes its way
into a more stable release

00:58:19.120 --> 00:58:22.180
or better release we'll
have a lot of examples.

00:58:22.180 --> 00:58:23.678
They're coming.

00:58:23.678 --> 00:58:24.780
AME ROOMANN-KUMIK: So the
sliders in the presentation

00:58:24.780 --> 00:58:27.300
were actually forum
input fields also.

00:58:27.300 --> 00:58:29.078
We didn't do anything special
for the draggable sliders.

00:58:30.198 --> 00:58:31.960
Chrome is taking care
of that for us.

00:58:32.500 --> 00:58:36.458
WebKit actually I think.

00:58:36.738 --> 00:58:38.198
It's actually kind of funny
because the sliders look

00:58:38.198 --> 00:58:39.258
native to each platform.

00:58:39.258 --> 00:58:40.118
That kind of thing.

00:58:40.118 --> 00:58:43.820
And you know, we don't have
support for every single input,

00:58:43.820 --> 00:58:46.238
but we're getting there and
they're pretty cool to play

00:58:46.238 --> 00:58:47.174
with, so worth checking out.

00:58:48.248 --> 00:58:49.286
AUDIENCE: [UNINTELLIGIBLE].

00:58:50.398 --> 00:58:52.900
MIHAI FLORIN IONESCU:
Yeah, go ahead.

00:58:52.900 --> 00:58:54.406
AUDIENCE: But I'm curious about
the multimedia streaming,

00:58:54.406 --> 00:58:57.302
everything so far has been
a progressive download

00:58:57.302 --> 00:58:58.278
[UNINTELLIGIBLE PHRASE].

00:59:02.078 --> 00:59:03.578
AME ROOMANN-KUMIK: The question
is about, what about HTML5

00:59:03.578 --> 00:59:05.478
support for streaming?

00:59:05.478 --> 00:59:12.446
As far as I know, I
don't know actually.
1197
00:59:12,446 --&gt; 00:59:12,422
I haven't kept up with that.

00:59:12.422 --> 00:59:13.558
MIHAI FLORIN IONESCU:
Some play streaming.

00:59:14.158 --> 00:59:15.118
AME ROOMANN-KUMIK:
So there you go.

00:59:15.118 --> 00:59:16.520
Awesome.

00:59:16.520 --> 00:59:18.828
I think we have one more.

00:59:20.678 --> 00:59:22.018
AUDIENCE: I'll give you
an unpopular question.

00:59:24.018 --> 00:59:26.820
Is it possible to provide
some sort of DRM protection

00:59:26.820 --> 00:59:28.320
for video in HTML5?

00:59:30.058 --> 00:59:30.078
AUDIENCE: [UNINTELLIGIBLE].

00:59:33.178 --> 00:59:35.638
AME ROOMANN-KUMIK:
I don't know.

00:59:35.898 --> 00:59:37.598
MIHAI FLORIN IONESCU: The
question was, is it possible

00:59:37.598 --> 00:59:41.060
to write a DRM protection
in HTML5 for video?

00:59:41.060 --> 00:59:43.320
AME ROOMANN-KUMIK: I mean, I
would tell you that there are

00:59:43.320 --> 00:59:45.620
probably people here who would
say it's impossible to write

00:59:45.620 --> 00:59:47.880
a DRM system in general.

00:59:49.980 --> 00:59:51.740
AUDIENCE: I know
it's unpopular.

00:59:51.740 --> 00:59:54.980
I was thinking in the
previous app example.

00:59:55.340 --> 00:59:56.698
AME ROOMANN-KUMIK:
I agree with you.

00:59:56.698 --> 00:59:59.060
It's a desire that
some people have.

01:00:00.320 --> 01:00:03.808
As far as I know I don't
have an answer for you
1218
01:00:03,808 --&gt; 01:00:03,792
regarding that yet.

01:00:03.792 --> 01:00:04.778
So sorry.

01:00:04.778 --> 01:00:05.948
MIHAI FLORIN
IONESCU: Thank you.

01:00:05.948 --> 01:00:07.558
We have a few seconds left.

01:00:07.558 --> 01:00:09.358
One more question.

01:00:09.358 --> 01:00:13.078
Regarding local storage from
users perspective, how if

01:00:13.078 --> 01:00:15.778
possible could one view-delete
such application data?

01:00:17.320 --> 01:00:22.398
So there is an API to access,
you know, add, remove

01:00:22.398 --> 01:00:23.358
local storage.

01:00:24.798 --> 01:00:30.658
We are working on various specs
and prototypes to give the user

01:00:30.658 --> 01:00:35.218
more power to see what's in the
local database and local cache.

01:00:35.218 --> 01:00:37.938
Delete stuff, revoke
permissions.

01:00:38.138 --> 01:00:42.218
You saw in the thumbnail demo
how they showed you what's

01:00:42.218 --> 01:00:42.338
in the local database.

01:00:43.980 --> 01:00:46.334
So something along those
lines is in the works.

01:00:47.310 --> 01:00:50.818
AUDIENCE: Just to add onto to
that the Chrome developer

01:00:50.818 --> 01:00:51.120
tools [UNINTELLIGIBLE].

01:00:51.098 --> 01:00:52.940
MIHAI FLORIN
IONESCU: Thank you.

01:00:52.940 --> 01:00:55.640
So the gentlemen over
there mentioned, use the
1237
01:00:55,64 --&gt; 01:00:55,48
Chrome developer tools.

01:00:55.480 --> 01:00:59.600
They give you great insight
of what is in your local

01:00:59.600 --> 01:01:00.440
storage and local databases.

01:01:00.978 --> 01:01:02.338
Thank you sir.

01:01:02.338 --> 01:01:05.318
With that we'll
have to wrap up.

01:01:05.318 --> 01:01:05.758
We're overtime.

01:01:06.598 --> 01:01:08.862
We're going to be around,
come talk with us.

01:01:08.862 --> 01:01:13.862
Thank you.

