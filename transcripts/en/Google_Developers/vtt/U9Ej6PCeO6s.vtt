WEBVTT
Kind: captions
Language: en

00:00:06.776 --> 00:00:09.130
IKAI LAIN: Hi everybody,
my name is Ikai Lain.

00:00:09.130 --> 00:00:10.730
KALYAN REDDY: And my name
is Kalyan Reddy.

00:00:10.730 --> 00:00:12.910
IKAI LAIN: And today, we're
going to be talking about Apps

00:00:12.910 --> 00:00:14.310
Script Triggers.

00:00:14.310 --> 00:00:16.480
So what are we going
to be doing today?

00:00:16.480 --> 00:00:19.700
We're going to be doing a
full-on, I want to call it a

00:00:19.700 --> 00:00:22.030
show about Apps Script
Triggers.

00:00:22.030 --> 00:00:24.180
Where we're going to start
talking about first, what they

00:00:24.180 --> 00:00:27.780
are, where you'd want to use
them, ways to run them, and

00:00:27.780 --> 00:00:29.600
we're going to move into
a little bit of code.

00:00:29.600 --> 00:00:32.009
I'm not going to type too much
code out, but I've been

00:00:32.009 --> 00:00:33.690
preparing some samples
for you guys.

00:00:33.690 --> 00:00:35.830
And towards the end, we're going
to talk about patterns

00:00:35.830 --> 00:00:38.000
and things you can and can't
do using triggers.

00:00:38.000 --> 00:00:40.860
So that's what we've got
today for you guys.

00:00:40.860 --> 00:00:42.960
Oh, I have this thing in
presentation mode.

00:00:42.960 --> 00:00:45.410
So let's go ahead
and get started.

00:00:45.410 --> 00:00:45.970
KALYAN REDDY: Sounds good.

00:00:45.970 --> 00:00:48.730
IKAI LAIN: And Kalyan's going
to be the guy who's going to

00:00:48.730 --> 00:00:51.340
be asking questions,
who's making sure I

00:00:51.340 --> 00:00:51.955
don't go too fast.

00:00:51.955 --> 00:00:52.680
He's going to pace me.

00:00:52.680 --> 00:00:54.870
He's going to help me out.

00:00:54.870 --> 00:00:57.220
So first off, what
are triggers?

00:00:57.220 --> 00:01:00.470
Triggers are a way for us to run
code either in response to

00:01:00.470 --> 00:01:01.900
an event or non-interactively.

00:01:04.700 --> 00:01:09.640
When I say interactive, what I
mean is you've got the script

00:01:09.640 --> 00:01:11.250
editor, where you
can hit play.

00:01:11.250 --> 00:01:15.320
You can also run a script as a
result of something going on

00:01:15.320 --> 00:01:15.970
in a script.

00:01:15.970 --> 00:01:17.440
You can have it attach
a menu item.

00:01:17.440 --> 00:01:20.660
Or you can invoke some code
via a web application.

00:01:20.660 --> 00:01:22.930
So that's what I mean when
I see interactive, as in,

00:01:22.930 --> 00:01:26.050
there's a user that goes in
and clicks some action or

00:01:26.050 --> 00:01:28.860
takes some action that causes
some code to run.

00:01:28.860 --> 00:01:31.430
And this is one of the most
common uses of Apps Script,

00:01:31.430 --> 00:01:34.240
because you want these to be
doing something before the

00:01:34.240 --> 00:01:36.180
Apps Script fires.

00:01:36.180 --> 00:01:40.530
Now, you want to use triggers
because there are lots of

00:01:40.530 --> 00:01:43.300
cases where you want to run
code and not have the user

00:01:43.300 --> 00:01:44.760
necessarily do something.

00:01:44.760 --> 00:01:48.340
So a really good example would
be a clock-based trigger.

00:01:48.340 --> 00:01:50.930
So let's say that you want
it to run some code.

00:01:50.930 --> 00:01:54.410
You want it to run a scheduled
job every day at midnight or

00:01:54.410 --> 00:01:56.180
1:00 AM or at every
day at noon.

00:01:56.180 --> 00:01:58.880
Let's say every day at noon, I
wanted to email everyone and

00:01:58.880 --> 00:02:01.070
say, hey, go to lunch.

00:02:01.070 --> 00:02:02.560
That's something you can
do with a trigger.

00:02:02.560 --> 00:02:04.450
Or if you want to set something
up to run at a

00:02:04.450 --> 00:02:07.400
certain date or time, that's
something you can do via what

00:02:07.400 --> 00:02:08.660
we call clock triggers.

00:02:08.660 --> 00:02:10.780
The second type of triggers
are something that we call

00:02:10.780 --> 00:02:12.170
spreadsheet triggers.

00:02:12.170 --> 00:02:15.840
So we have these, they're called
onInstall, onOpen,

00:02:15.840 --> 00:02:17.520
onEdit, and on form submit.

00:02:17.520 --> 00:02:19.020
And I will talk about
these later.

00:02:19.020 --> 00:02:21.840
But what these allow you to do
is to wire up code so that

00:02:21.840 --> 00:02:24.190
when something happens
inside a spreadsheet

00:02:24.190 --> 00:02:25.680
the code gets executed.

00:02:25.680 --> 00:02:28.070
So this is a very powerful
technique and you can build

00:02:28.070 --> 00:02:31.070
some really interesting
applications using some

00:02:31.070 --> 00:02:34.320
off-the-shelf components, like
spreadsheets for UI or forms

00:02:34.320 --> 00:02:35.600
for collecting user data.

00:02:35.600 --> 00:02:39.230
And you can widely scale using
triggers so that you can build

00:02:39.230 --> 00:02:41.610
something that's a full-fledged
application.

00:02:41.610 --> 00:02:44.880
So a really good example of
something that we've done like

00:02:44.880 --> 00:02:47.010
this would be something like
a help desk application.

00:02:47.010 --> 00:02:49.750
Or for those of you who have
been to our Apps Script events

00:02:49.750 --> 00:02:52.350
before, you've seen our
signup sheets, that's

00:02:52.350 --> 00:02:53.720
just a Google form.

00:02:53.720 --> 00:02:55.590
But you're able to get
a confirmation email.

00:02:55.590 --> 00:02:58.310
We also do some logic in the
back end to send out reminder

00:02:58.310 --> 00:03:01.420
emails as well as tell you if
you're on the waitlist or not.

00:03:01.420 --> 00:03:03.240
That's all done via
Apps Script,

00:03:03.240 --> 00:03:05.560
spreadsheets, and forms.

00:03:05.560 --> 00:03:07.390
KALYAN REDDY: So if you're
familiar with the Unix world,

00:03:07.390 --> 00:03:09.960
then the cloud based triggers
are like a cron job, where you

00:03:09.960 --> 00:03:11.700
can have a script executed
at a certain time.

00:03:11.700 --> 00:03:12.990
IKAI LAIN: That's right.

00:03:12.990 --> 00:03:16.900
And do you have a Unix analogy
for spreadsheets?

00:03:16.900 --> 00:03:18.990
KALYAN REDDY: Not so much.

00:03:18.990 --> 00:03:21.570
IKAI LAIN: Just like bringing
you into my trap here.

00:03:21.570 --> 00:03:23.750
So why don't we go ahead and
show you guys how to set up

00:03:23.750 --> 00:03:25.430
some of these triggers.

00:03:25.430 --> 00:03:28.060
Let's go ahead and go to Script
Editor right now.

00:03:28.060 --> 00:03:30.470
So I've written some
code here.

00:03:30.470 --> 00:03:31.270
This is Kalyan.

00:03:31.270 --> 00:03:32.950
His email is gkal@google.com.

00:03:32.950 --> 00:03:33.720
Everybody knows this.

00:03:33.720 --> 00:03:35.160
He's very popular around here.

00:03:35.160 --> 00:03:38.420
And what I want to do is I want
to really bother him.

00:03:42.320 --> 00:03:46.240
I want to tell this guy that,
hey, you're such a cool guy.

00:03:46.240 --> 00:03:47.051
I want to tell this
guy every day.

00:03:47.051 --> 00:03:47.240
KALYAN REDDY: Everybody
wants to tell me that.

00:03:47.240 --> 00:03:49.210
IKAI LAIN: I want to tell
him every five minutes.

00:03:49.210 --> 00:03:51.820
So I've written this function,
and as you can see, I'm just

00:03:51.820 --> 00:03:53.360
using standard Mail App.

00:03:53.360 --> 00:03:57.200
So in Mail App you have a
recipient, a subject, and a

00:03:57.200 --> 00:03:58.210
body of the email.

00:03:58.210 --> 00:04:02.680
So I want to email you every
five minutes, because I want

00:04:02.680 --> 00:04:04.750
you to have high self esteem.

00:04:04.750 --> 00:04:07.220
So let's go ahead and figure
out how we can do that.

00:04:07.220 --> 00:04:09.100
Well, when you're in the Script
Editor-- and this is

00:04:09.100 --> 00:04:10.380
script.google.com--

00:04:10.380 --> 00:04:13.760
you click on Resources, Current
Script Triggers.

00:04:13.760 --> 00:04:16.140
And you'll see that right now,
I have no triggers set up.

00:04:16.140 --> 00:04:19.660
And that's because I don't
have any code yet.

00:04:19.660 --> 00:04:20.399
I haven't set this up yet.

00:04:20.399 --> 00:04:21.810
I do have code, excuse me.

00:04:21.810 --> 00:04:23.670
I'll click on No
Trigger Setup.

00:04:23.670 --> 00:04:25.600
And which one of these
do I want to select?

00:04:25.600 --> 00:04:27.630
I want to select email gkal.

00:04:27.630 --> 00:04:30.110
Now one thing you might notice
is that I've got a few other

00:04:30.110 --> 00:04:31.030
functions in here.

00:04:31.030 --> 00:04:33.170
That's because I wanted to go
a little bit off topic.

00:04:33.170 --> 00:04:35.110
We're going to talk about public
and private functions.

00:04:35.110 --> 00:04:37.290
This is something that's
really useful to know.

00:04:37.290 --> 00:04:39.250
You'll see that I have a
function here called Public

00:04:39.250 --> 00:04:40.390
and Private function.

00:04:40.390 --> 00:04:42.590
Private functions are functions
that end with an

00:04:42.590 --> 00:04:43.500
underscore.

00:04:43.500 --> 00:04:45.780
When you have a function that
ends with an underscore,

00:04:45.780 --> 00:04:48.990
you're telling Apps Script
that this is just for me.

00:04:48.990 --> 00:04:51.280
I don't ever want to be
able to run this code.

00:04:51.280 --> 00:04:53.820
So when you click the drop down
for running, you'll see

00:04:53.820 --> 00:04:57.410
that private function is not
there and public function is.

00:04:57.410 --> 00:05:00.130
And the difference is an
underscore between the

00:05:00.130 --> 00:05:03.580
function name and
the parentheses.

00:05:03.580 --> 00:05:06.300
So that's one of the
requirements of writing code

00:05:06.300 --> 00:05:08.190
that you want to execute
a trigger, is

00:05:08.190 --> 00:05:09.640
that it must be public.

00:05:09.640 --> 00:05:12.150
You can't have an underscore
at the end of

00:05:12.150 --> 00:05:13.190
the function name.

00:05:13.190 --> 00:05:15.360
So again, let's go back to
current project triggers and

00:05:15.360 --> 00:05:16.350
set one up.

00:05:16.350 --> 00:05:18.450
Now, I'm going to pick
the function I want.

00:05:18.450 --> 00:05:20.030
And again, that's email gkal.

00:05:20.030 --> 00:05:21.700
And I've got a couple
of options.

00:05:21.700 --> 00:05:24.710
But right now, since this
script is not bound to a

00:05:24.710 --> 00:05:28.070
spreadsheet, that is, I didn't
go to the spreadsheets editor

00:05:28.070 --> 00:05:30.650
and click Tools,
Script Editor.

00:05:30.650 --> 00:05:33.550
I just went to script.google.com
and started

00:05:33.550 --> 00:05:35.090
furiously hacking away.

00:05:35.090 --> 00:05:37.010
The only option I have
is time-driven.

00:05:37.010 --> 00:05:41.040
And the next option I want
to pick is what kind of

00:05:41.040 --> 00:05:42.800
time-driven trigger is this?

00:05:42.800 --> 00:05:45.240
First off, I can pick a specific
date and time.

00:05:45.240 --> 00:05:49.280
So you'll see that I want
to enter a year,

00:05:49.280 --> 00:05:50.360
month, date, and a time.

00:05:50.360 --> 00:05:52.780
So what's a good day
to remind you that

00:05:52.780 --> 00:05:53.880
you're such a cool guy?

00:05:53.880 --> 00:05:55.060
KALYAN REDDY: Right now.

00:05:55.060 --> 00:05:58.280
IKAI LAIN: No, I don't think
you deserve it yet.

00:05:58.280 --> 00:06:00.770
How about on the 25th
of December?

00:06:00.770 --> 00:06:03.740
I mean, you're getting
presents.

00:06:03.740 --> 00:06:06.250
You're having a day off,
drinking some eggnog.

00:06:06.250 --> 00:06:09.970
So let's remind you
at 3:00 AM.

00:06:09.970 --> 00:06:13.820
And you'll see that the field
turns white, because now this

00:06:13.820 --> 00:06:15.070
is a valid time.

00:06:15.070 --> 00:06:16.590
And I can save this thing.

00:06:16.590 --> 00:06:18.630
And that's when it
will email him.

00:06:18.630 --> 00:06:20.020
It's going to ask me
for authorization.

00:06:20.020 --> 00:06:21.270
So I'm going to go ahead
and authorize.

00:06:21.270 --> 00:06:23.570
You guys are all familiar
with this screen.

00:06:23.570 --> 00:06:24.360
Close.

00:06:24.360 --> 00:06:25.850
And now, I'm going to
save the trigger.

00:06:25.850 --> 00:06:27.900
Remember, you must pass
authorization and

00:06:27.900 --> 00:06:28.740
then save it again.

00:06:28.740 --> 00:06:31.430
It's like the same way when
you're running a script.

00:06:31.430 --> 00:06:34.400
You have to authorize
and rerun the thing.

00:06:34.400 --> 00:06:36.680
So now, if I go to current
script triggers, I'll see

00:06:36.680 --> 00:06:40.380
that, oh, there's an email
set up to go out to you.

00:06:40.380 --> 00:06:44.120
And it's going to execute this
code on December 25.

00:06:44.120 --> 00:06:45.480
KALYAN REDDY: So it's just going
to execute it the one

00:06:45.480 --> 00:06:46.790
time on that date,
and that's it.

00:06:46.790 --> 00:06:47.480
IKAI LAIN: Right.

00:06:47.480 --> 00:06:48.230
That's right.

00:06:48.230 --> 00:06:50.710
And you sounded disappointed
there.

00:06:50.710 --> 00:06:53.930
So why don't we increase
the frequency?

00:06:53.930 --> 00:06:57.570
When you create triggers, you
can create many, many triggers

00:06:57.570 --> 00:06:59.140
to fire on a single function.

00:06:59.140 --> 00:07:01.010
So I'm going to add a new
trigger, email gkal.

00:07:01.010 --> 00:07:02.660
And I'm going to make
it time-driven.

00:07:02.660 --> 00:07:05.680
And I want this thing
to run every hour.

00:07:05.680 --> 00:07:06.850
I don't think you
deserve that.

00:07:06.850 --> 00:07:09.310
Let's set it to every
two hours.

00:07:09.310 --> 00:07:11.130
So I'm going to set it
to every two hours.

00:07:11.130 --> 00:07:12.360
I'm going to hit Save.

00:07:12.360 --> 00:07:15.450
And that's going to start
emailing you every two hours.

00:07:15.450 --> 00:07:16.970
It's going to execute
this code.

00:07:16.970 --> 00:07:21.320
So in this type of trigger, you
can put almost any kind of

00:07:21.320 --> 00:07:24.980
code in here that Apps
Script supports.

00:07:24.980 --> 00:07:27.440
I'm using a very simple
example to email you.

00:07:27.440 --> 00:07:29.760
But I could also edit
a spreadsheet.

00:07:29.760 --> 00:07:31.820
So I can keep a log of all the
times I've emailed you.

00:07:31.820 --> 00:07:35.770
I can also keep a Google
Drive document.

00:07:35.770 --> 00:07:36.910
I can do a lot of different
things.

00:07:36.910 --> 00:07:38.980
I can insert a row into
a database via

00:07:38.980 --> 00:07:41.550
Cloud SQL and JBC.

00:07:41.550 --> 00:07:44.210
Anything you can do inside an
Apps Script, you can basically

00:07:44.210 --> 00:07:45.330
do inside a trigger.

00:07:45.330 --> 00:07:47.930
I mean, obviously, you
can't render a UI.

00:07:47.930 --> 00:07:50.060
But that would be silly,
wouldn't it?

00:07:50.060 --> 00:07:51.810
KALYAN REDDY: Because there's
no particular use--

00:07:51.810 --> 00:07:52.320
IKAI LAIN: Who's going
to look at?

00:07:52.320 --> 00:07:53.510
Who's going to look
at it, right?

00:07:53.510 --> 00:07:56.500
If a tree falls in an empty
forest, I don't know the rest

00:07:56.500 --> 00:07:58.210
of how that goes.

00:07:58.210 --> 00:07:59.920
Not very philosophical.

00:07:59.920 --> 00:08:03.460
So that's how you manually
set up a trigger.

00:08:03.460 --> 00:08:06.520
But sometimes you want to be
able to set up a trigger and

00:08:06.520 --> 00:08:09.580
you want to be able to do it so
that you can program, and

00:08:09.580 --> 00:08:11.690
you can program a trigger in.

00:08:11.690 --> 00:08:14.840
For instance, let me show you
guys how this should be done.

00:08:14.840 --> 00:08:16.185
So let me go ahead and--

00:08:19.850 --> 00:08:20.460
excuse me.

00:08:20.460 --> 00:08:22.410
Let me go ahead and
do this in code.

00:08:22.410 --> 00:08:24.240
So I'm going to create
a new function.

00:08:24.240 --> 00:08:25.490
I'm going to call it
scheduleTrigger.

00:08:28.120 --> 00:08:30.510
Now what I'm going to do is
I'm going to use a trigger

00:08:30.510 --> 00:08:33.120
builder to build something
that will also schedule

00:08:33.120 --> 00:08:35.669
something that'll email
you every minute.

00:08:35.669 --> 00:08:36.480
How does that sound?

00:08:36.480 --> 00:08:37.480
KALYAN REDDY: That sounds
much better.

00:08:37.480 --> 00:08:39.230
IKAI LAIN: Let's go ahead
and do this then.

00:08:39.230 --> 00:08:46.190
So let's say var builder equals
ScriptApp.newtrigger.

00:08:46.190 --> 00:08:49.170
And the first parameter of new
trigger is the function that

00:08:49.170 --> 00:08:50.560
you want this trigger to call.

00:08:50.560 --> 00:08:54.490
So the function I want this
to call is email gkal.

00:08:54.490 --> 00:08:59.770
This must match the case.

00:08:59.770 --> 00:09:02.450
Everything in Apps Script is
case sensitive when you're

00:09:02.450 --> 00:09:03.090
writing code.

00:09:03.090 --> 00:09:06.270
So remember that if something
is uppercase, you have to

00:09:06.270 --> 00:09:06.850
match [INAUDIBLE].

00:09:06.850 --> 00:09:08.240
If something's lowercase,
you have to match it.

00:09:08.240 --> 00:09:10.590
So we're going to chain this.

00:09:10.590 --> 00:09:12.340
And we're going to say,
let's make this

00:09:12.340 --> 00:09:14.010
a time-based trigger.

00:09:14.010 --> 00:09:16.100
So I'm going to make
it time-based.

00:09:16.100 --> 00:09:16.740
Let's set this.

00:09:16.740 --> 00:09:18.270
Again, I'm hitting period
every time.

00:09:18.270 --> 00:09:21.820
And Apps Script Editor is smart
enough to know, hey,

00:09:21.820 --> 00:09:25.770
this is a clock trigger
builder time.

00:09:25.770 --> 00:09:27.840
Try saying that 10 times fast.

00:09:27.840 --> 00:09:31.840
And it'll pop up the functions
I need to build this trigger.

00:09:31.840 --> 00:09:35.080
So when I say, dot, I want
this to be every.

00:09:35.080 --> 00:09:37.750
And you can see that as I type,
it filters down the

00:09:37.750 --> 00:09:39.440
function that match
every minute.

00:09:39.440 --> 00:09:41.750
So let's make this
every one minute.

00:09:41.750 --> 00:09:43.390
And let's go ahead.

00:09:43.390 --> 00:09:44.700
And that's it.

00:09:44.700 --> 00:09:46.090
So that's the trigger so far.

00:09:46.090 --> 00:09:48.390
And when you have a builder,
you go ahead and do

00:09:48.390 --> 00:09:49.640
builder.creates.

00:09:51.890 --> 00:09:56.470
And this returns a
trigger instance.

00:09:56.470 --> 00:09:57.680
But you don't have
to necessarily do

00:09:57.680 --> 00:09:58.490
anything with a trigger.

00:09:58.490 --> 00:09:59.370
You don't have to return it.

00:09:59.370 --> 00:10:00.910
You can just say
builder.create.

00:10:00.910 --> 00:10:04.300
In fact, a lot of people, what
they do is at the end of this

00:10:04.300 --> 00:10:06.446
call, they'll simply say
dot create and it

00:10:06.446 --> 00:10:07.500
will return a builder.

00:10:07.500 --> 00:10:10.830
So a very common thing I've seen
people do, is to do dot

00:10:10.830 --> 00:10:12.670
create, and that's
the end of it.

00:10:12.670 --> 00:10:15.800
But I want to show you guys that
you can use a builder,

00:10:15.800 --> 00:10:18.320
because builders are very,
very powerful.

00:10:18.320 --> 00:10:21.930
Builders are a pattern
that come from Java.

00:10:21.930 --> 00:10:24.050
They come from Java land and
they are best described in

00:10:24.050 --> 00:10:25.750
this one book called,
"Effective

00:10:25.750 --> 00:10:27.540
Java," by Joshua Bloch.

00:10:27.540 --> 00:10:30.470
The nice thing about builders
is that they allow you to

00:10:30.470 --> 00:10:34.860
programmatically slowly
construct a complex object.

00:10:34.860 --> 00:10:38.180
And this was intentionally
built.

00:10:38.180 --> 00:10:42.750
This pattern exists to solve the
problem of Java not having

00:10:42.750 --> 00:10:43.400
named parameters.

00:10:43.400 --> 00:10:45.580
So in some programming
languages, like Python, you

00:10:45.580 --> 00:10:46.840
can call a function.

00:10:46.840 --> 00:10:48.360
And then you call a
name parameter.

00:10:48.360 --> 00:10:53.880
You could say name is equal to
ABC, value is equal to 123.

00:10:53.880 --> 00:10:55.810
But you can't do that in Java.

00:10:55.810 --> 00:10:58.650
They created this builder
pattern where what each of

00:10:58.650 --> 00:11:01.840
these functions returns
is the builder object.

00:11:01.840 --> 00:11:04.510
So the trigger hasn't
been created yet.

00:11:04.510 --> 00:11:06.470
You return an instance of a
builder and when you're done

00:11:06.470 --> 00:11:09.290
with the builder you call
builder.create to essentially,

00:11:09.290 --> 00:11:10.910
finalize the object.

00:11:10.910 --> 00:11:12.500
So why is this nice?

00:11:12.500 --> 00:11:17.270
Well, let's say that we want to
make it time-based, but we

00:11:17.270 --> 00:11:19.570
want to make it every few
minutes but we didn't know how

00:11:19.570 --> 00:11:22.090
many minutes we want the
interval to be, well, we could

00:11:22.090 --> 00:11:26.512
have a conditional that says,
if some conditional builder

00:11:26.512 --> 00:11:30.690
dot every one minute.

00:11:30.690 --> 00:11:33.170
And if there's a different
conditional I could say,

00:11:33.170 --> 00:11:34.850
builder dot every
five minutes.

00:11:34.850 --> 00:11:38.560
KALYAN REDDY: So you could hook
this up as a response to

00:11:38.560 --> 00:11:39.870
external conditions, as well.

00:11:39.870 --> 00:11:42.240
You can pull data from an
external source and change you

00:11:42.240 --> 00:11:43.470
trigger timers based on that.

00:11:43.470 --> 00:11:44.690
IKAI LAIN: Right, absolutely.

00:11:44.690 --> 00:11:46.730
So you can do that
with triggers.

00:11:46.730 --> 00:11:48.270
Is very, very cool.

00:11:48.270 --> 00:11:50.450
And that's typically, what's
used to build a pattern for

00:11:50.450 --> 00:11:53.370
because a lot of times you'll
have a lot of different

00:11:53.370 --> 00:11:55.980
conditionals, and instead of
writing this out every time,

00:11:55.980 --> 00:11:59.650
you'll simply modify the builder
in the way that you

00:11:59.650 --> 00:12:01.890
need it to change based on the
current condition you're

00:12:01.890 --> 00:12:02.660
evaluating.

00:12:02.660 --> 00:12:03.790
I know it seems confusing.

00:12:03.790 --> 00:12:05.650
So just take a look at what I've
done with the code here,

00:12:05.650 --> 00:12:06.620
and you'll see what
I'm doing here.

00:12:06.620 --> 00:12:10.690
Now, obviously, this is always
going to set to every minute.

00:12:10.690 --> 00:12:12.330
And that's because I'm
doing an if true.

00:12:12.330 --> 00:12:13.670
So let's go ahead and
remove that, because

00:12:13.670 --> 00:12:15.510
that's kind of silly.

00:12:15.510 --> 00:12:18.260
So let's go ahead
and select this.

00:12:18.260 --> 00:12:20.040
I'm going to save this.

00:12:20.040 --> 00:12:23.640
And now you'll see that, once
the code finishes saving, I'm

00:12:23.640 --> 00:12:24.800
going to do a drop down.

00:12:24.800 --> 00:12:28.200
And I'm going to pick
schedule trigger.

00:12:28.200 --> 00:12:29.180
I'm going to run
this function.

00:12:29.180 --> 00:12:31.310
Again, I'm not running the
email gkal function.

00:12:31.310 --> 00:12:33.270
I'm running the schedule
trigger function.

00:12:33.270 --> 00:12:36.870
So I'm going to go ahead
and click Run.

00:12:36.870 --> 00:12:38.405
It's going to ask me
for permission.

00:12:38.405 --> 00:12:40.510
I'm going to authorize it.

00:12:40.510 --> 00:12:40.820
Close it.

00:12:40.820 --> 00:12:42.550
Now again, I haven't run this.

00:12:42.550 --> 00:12:44.070
I haven't actually scheduled
the trigger yet.

00:12:44.070 --> 00:12:46.000
So this is going to create
a trigger that

00:12:46.000 --> 00:12:47.210
runs every one minute.

00:12:47.210 --> 00:12:50.310
So when I go to Resources,
Current Script Trigger, I'll

00:12:50.310 --> 00:12:52.800
see that, OK, I have the
triggers I created before.

00:12:52.800 --> 00:12:54.810
Let's go ahead and delete
these for clarification.

00:12:54.810 --> 00:12:57.502
So you see that there are no
triggers set up, right?

00:12:57.502 --> 00:12:59.230
KALYAN REDDY: So all you've done
so far is authorize it?

00:12:59.230 --> 00:13:00.690
IKAI LAIN: That's right.

00:13:00.690 --> 00:13:03.560
Thank you for the
clarification.

00:13:03.560 --> 00:13:05.520
So I'm going to click Run.

00:13:05.520 --> 00:13:07.360
It's going to run schedule
trigger.

00:13:07.360 --> 00:13:11.420
And when I look in Resources,
Current Script Triggers, boom,

00:13:11.420 --> 00:13:12.290
you'll see that I've

00:13:12.290 --> 00:13:13.980
programmatically created a trigger.

00:13:13.980 --> 00:13:17.390
And this is a very nice feature,
because sometimes you

00:13:17.390 --> 00:13:20.570
might want to create a trigger
based on what someone is doing

00:13:20.570 --> 00:13:23.100
in a web app, what's happening
in a spreadsheet.

00:13:23.100 --> 00:13:25.960
So you want lots of options.

00:13:25.960 --> 00:13:27.890
And being able to
programmatically schedule

00:13:27.890 --> 00:13:29.620
triggers is really
nice because,

00:13:29.620 --> 00:13:31.150
yeah, you have options.

00:13:31.150 --> 00:13:35.265
And you can be very flexible
in scheduling when you want

00:13:35.265 --> 00:13:37.850
code to run.

00:13:37.850 --> 00:13:42.540
So let's talk about how we
can use this in practice.

00:13:42.540 --> 00:13:46.590
So here, I've set up
a demo spreadsheet.

00:13:46.590 --> 00:13:48.790
And we call this fundraising.

00:13:48.790 --> 00:13:50.980
So this is just a basic
Google spreadsheet.

00:13:50.980 --> 00:13:52.250
I've got two tabs, one for

00:13:52.250 --> 00:13:54.130
fundraising, one for donations.

00:13:54.130 --> 00:13:56.210
And we have a name and
a funds raised.

00:13:56.210 --> 00:13:58.080
Again, this is a very, very
simple spreadsheet.

00:13:58.080 --> 00:14:00.630
I'm dynamically generating
a chart from this data.

00:14:00.630 --> 00:14:02.540
So right now, I have
Arun as a slacker.

00:14:02.540 --> 00:14:04.240
He's only raised $20.

00:14:04.240 --> 00:14:05.500
He's a busy guy, right?

00:14:05.500 --> 00:14:10.050
So let's go ahead, and let's say
that he's raised $20,000.

00:14:10.050 --> 00:14:11.770
Well, he's totally blown
up the chart now.

00:14:11.770 --> 00:14:13.730
So let's go ahead and lower
that scale a little bit.

00:14:13.730 --> 00:14:16.020
KALYAN REDDY: It's a good
month for Arun.

00:14:16.020 --> 00:14:17.220
IKAI LAIN: He's back
down to $40.

00:14:17.220 --> 00:14:20.420
That's a 100% increase in the
funds that he's raised.

00:14:20.420 --> 00:14:23.300
So charts a really cool because
you can just make

00:14:23.300 --> 00:14:25.920
changes, and the chart will
automatically update.

00:14:25.920 --> 00:14:29.940
So let's say that with this
chart we want to send out a

00:14:29.940 --> 00:14:35.640
nightly notification with the
latest chart that says, hey,

00:14:35.640 --> 00:14:37.690
here's the latest status
on fundraising.

00:14:37.690 --> 00:14:39.280
Well, how do we do that?

00:14:39.280 --> 00:14:40.350
We do that with triggers.

00:14:40.350 --> 00:14:42.910
So inside the spreadsheet, I'm
going to go ahead and click

00:14:42.910 --> 00:14:44.700
Tools, like so.

00:14:44.700 --> 00:14:47.270
I'm going to go to
Script Editor.

00:14:47.270 --> 00:14:50.080
And this is going to
open up the editor.

00:14:50.080 --> 00:14:52.190
Oh, the reason it's doing
this is because I had

00:14:52.190 --> 00:14:53.020
the tab open already.

00:14:53.020 --> 00:14:55.900
So it's just refreshing
the tab.

00:14:55.900 --> 00:14:58.280
So this is the script that
I have attached to the

00:14:58.280 --> 00:14:59.470
spreadsheet.

00:14:59.470 --> 00:15:02.650
So I've written a function that
emails that email as a

00:15:02.650 --> 00:15:04.800
report to myself.

00:15:04.800 --> 00:15:06.010
This is my test account.

00:15:06.010 --> 00:15:09.160
So ikai.lain.test@gmail.com.

00:15:09.160 --> 00:15:10.910
Please don't ever email
me at that email.

00:15:10.910 --> 00:15:12.470
I will never see it.

00:15:12.470 --> 00:15:14.970
So let's walk through this
code real quick.

00:15:14.970 --> 00:15:18.460
First off, if you've ever
written code to attach a

00:15:18.460 --> 00:15:20.990
spreadsheet before, you
recognize this.

00:15:20.990 --> 00:15:22.450
You want to get the active
spreadsheet.

00:15:22.450 --> 00:15:24.370
And we're storing in
a variable, SS.

00:15:24.370 --> 00:15:25.790
We're going to get the
sheet by name.

00:15:25.790 --> 00:15:27.040
The sheet's name
is fundraising.

00:15:27.040 --> 00:15:29.330
Because if you remember, it's
down here in the lower

00:15:29.330 --> 00:15:30.330
left-hand corner.

00:15:30.330 --> 00:15:31.820
You see a name on the tabs.

00:15:31.820 --> 00:15:34.350
And the tab here
is fundraising.

00:15:34.350 --> 00:15:36.700
So we're going to get all the
charts for your sheet.

00:15:36.700 --> 00:15:38.610
And we'll say, sheet.getCharts.

00:15:38.610 --> 00:15:41.050
We really only want the first
one, because there's only one.

00:15:41.050 --> 00:15:43.180
But when you say, get
charts, you can only

00:15:43.180 --> 00:15:44.190
return all the charts.

00:15:44.190 --> 00:15:46.210
Right now, there is no
way to just return

00:15:46.210 --> 00:15:48.630
one particular chart.

00:15:48.630 --> 00:15:53.790
So we're going to go ahead and
create the email template.

00:15:53.790 --> 00:15:56.670
I'm taking advantage of HTML
template to render an HTML

00:15:56.670 --> 00:15:57.630
email template.

00:15:57.630 --> 00:16:00.040
A lot of times I see people,
they're doing this in code.

00:16:00.040 --> 00:16:02.960
They're writing the template
out in the script editor.

00:16:02.960 --> 00:16:08.210
Or they're using a spreadsheet
cell as the email template.

00:16:08.210 --> 00:16:09.920
There are advantages
and disadvantages.

00:16:09.920 --> 00:16:12.910
I personally like to use a
template, because it lets me

00:16:12.910 --> 00:16:14.580
separate the view
from the code.

00:16:14.580 --> 00:16:16.253
So right here, you'll see I'm
using htmlService.crea

00:16:16.253 --> 00:16:17.503
tetemplatefromfi
le("reportTemplate").

00:16:20.900 --> 00:16:23.190
And if you've ever written any
kind of HTML service apps

00:16:23.190 --> 00:16:25.060
before, this should
look familiar.

00:16:25.060 --> 00:16:27.510
Because once I go to report
template, you'll see, hey,

00:16:27.510 --> 00:16:29.590
it's just an HTML page.

00:16:29.590 --> 00:16:32.840
Big H1 title, Daily Fundraising
Report.

00:16:32.840 --> 00:16:34.970
This is an HTML service
standard where I

00:16:34.970 --> 00:16:36.290
can inject a variable.

00:16:36.290 --> 00:16:39.710
And the variable I'm injecting
here is the date variable.

00:16:39.710 --> 00:16:43.140
I'm using the question mark
equals notation to say,

00:16:43.140 --> 00:16:46.590
whatever the string value of
data is, inject it here.

00:16:46.590 --> 00:16:48.440
I'm doing something here, it's
a little bit outside the

00:16:48.440 --> 00:16:49.820
script apps we've talked
about this.

00:16:49.820 --> 00:16:52.010
But I feel like it's worth
talking about.

00:16:52.010 --> 00:16:54.320
Inside an email you can
have inline images.

00:16:54.320 --> 00:16:56.030
And there are a couple of
different ways of doing it.

00:16:56.030 --> 00:16:58.490
One of the ways is using an
image source tag, and just

00:16:58.490 --> 00:17:02.790
using an image that's hosted
on whatever CDN or whatever

00:17:02.790 --> 00:17:04.250
asset server that you have.

00:17:04.250 --> 00:17:07.190
And when you do this, the
benefits are that you kind of

00:17:07.190 --> 00:17:09.560
get to count how often people
get to view the images.

00:17:09.560 --> 00:17:12.660
Now, the disadvantage of doing
things this way are that when

00:17:12.660 --> 00:17:15.710
you send an email to someone
in Gmail or in some email

00:17:15.710 --> 00:17:18.430
clients, they don't display
these images by default, and

00:17:18.430 --> 00:17:19.400
for good reason.

00:17:19.400 --> 00:17:22.210
Because when you request an
image from an image asset

00:17:22.210 --> 00:17:25.700
server, your IP address
is logged.

00:17:25.700 --> 00:17:27.480
It's good for them, because you
get analytics about who's

00:17:27.480 --> 00:17:28.390
seeing the email.

00:17:28.390 --> 00:17:30.190
But not everyone displays
images.

00:17:30.190 --> 00:17:32.520
So there are benefits of
using an inline image.

00:17:32.520 --> 00:17:35.130
Because once you use an inline
image, even though you don't

00:17:35.130 --> 00:17:37.890
get the analytics, people will
always see the image.

00:17:37.890 --> 00:17:41.500
So here, the format
is cid colon and

00:17:41.500 --> 00:17:43.050
the name of the image.

00:17:43.050 --> 00:17:45.790
And we'll get to what it means
to have a name of an image.

00:17:45.790 --> 00:17:49.770
So back in code.gs, the next
line, I'm going to set the

00:17:49.770 --> 00:17:50.880
date variable.

00:17:50.880 --> 00:17:53.500
Again, I'm just using
utilities.formatDate are to

00:17:53.500 --> 00:17:56.780
show I only care about
month, day, and year.

00:17:56.780 --> 00:17:58.840
I'm going to use
MailApp.sendemail.

00:17:58.840 --> 00:18:00.970
This is very familiar, because
this is just something we've

00:18:00.970 --> 00:18:03.160
taken out of the tutorial.

00:18:03.160 --> 00:18:04.680
I am sending it to myself.

00:18:04.680 --> 00:18:07.430
I'm sending the title to Daily
Fundraising Report.

00:18:07.430 --> 00:18:09.250
I'm not sending a text body.

00:18:09.250 --> 00:18:11.520
You can and should, because
not all email clients will

00:18:11.520 --> 00:18:12.850
render HTML.

00:18:12.850 --> 00:18:16.470
So we're going to use the
last parameter to

00:18:16.470 --> 00:18:18.120
pass an HTML body.

00:18:18.120 --> 00:18:20.615
And you'll notice that I'm
using template.evaluate.

00:18:20.615 --> 00:18:21.990
But I'm doing one more thing.

00:18:21.990 --> 00:18:23.480
I'm doing .getContent.

00:18:23.480 --> 00:18:26.760
You don't typically need to do
.getContent when you're doing

00:18:26.760 --> 00:18:27.690
an HTML service.

00:18:27.690 --> 00:18:30.670
But we're forcing it to render
the template as a string,

00:18:30.670 --> 00:18:32.670
because HTML body
takes a string.

00:18:32.670 --> 00:18:35.890
So we take
template.evaluate.getContent,

00:18:35.890 --> 00:18:40.620
turn it into a string, pass it
into HTML body parameter.

00:18:40.620 --> 00:18:42.990
There's another parameter called
inline images, which

00:18:42.990 --> 00:18:44.830
takes in a JavaScript map.

00:18:44.830 --> 00:18:47.540
And this is where we
had the word chart.

00:18:47.540 --> 00:18:49.400
Oops, excuse me.

00:18:49.400 --> 00:18:52.370
And chart here is we're using
this again in report template.

00:18:52.370 --> 00:18:57.310
So if I want to name this Chart
Fundraising, for this to

00:18:57.310 --> 00:19:00.020
work correctly, I would need
to save that, come back to

00:19:00.020 --> 00:19:03.370
code, and name this the
chart_fundraising.

00:19:03.370 --> 00:19:05.140
And for this, I'm
using charts.

00:19:05.140 --> 00:19:07.600
I'm using 0, because that's
the first chart.

00:19:07.600 --> 00:19:08.460
There's only one chart.

00:19:08.460 --> 00:19:10.150
And I'm doing .getblog.

00:19:10.150 --> 00:19:11.720
Inline images takes a blog.

00:19:11.720 --> 00:19:12.310
KALYAN REDDY: And
that's because

00:19:12.310 --> 00:19:15.030
earlier, you got all charts.

00:19:15.030 --> 00:19:16.910
And now you're referencing
the first chart.

00:19:16.910 --> 00:19:18.743
IKAI LAIN: Earlier, up here, I'm
seeing var charts equals

00:19:18.743 --> 00:19:21.930
sheet.getCharts, So I could just
as easily say, var chart

00:19:21.930 --> 00:19:25.370
equals sheet.getCharts, and
then just return the first

00:19:25.370 --> 00:19:26.720
index, like so.

00:19:26.720 --> 00:19:29.850
But it was an arbitrary
decision on my part.

00:19:29.850 --> 00:19:31.980
So I'm going to go ahead and
run this function now.

00:19:34.700 --> 00:19:36.630
Let me go ahead and run
this email report.

00:19:36.630 --> 00:19:37.520
I could run this.

00:19:37.520 --> 00:19:38.810
But I'm actually not going to.

00:19:38.810 --> 00:19:39.570
Excuse me.

00:19:39.570 --> 00:19:42.490
I'm going to go ahead and
schedule a trigger.

00:19:42.490 --> 00:19:46.270
And I have this set right
now so it emails every

00:19:46.270 --> 00:19:47.340
night at 3:00 AM.

00:19:47.340 --> 00:19:50.630
And again, I did this by
clicking Add a new trigger,

00:19:50.630 --> 00:19:53.420
selecting Email report,
Time-driven.

00:19:53.420 --> 00:19:55.180
And you'll see that because
I'm actually attached to a

00:19:55.180 --> 00:19:56.880
spreadsheet now,
I have the From

00:19:56.880 --> 00:19:58.410
spreadsheet option as well.

00:19:58.410 --> 00:20:01.470
You're seeing up here, I have
an On form submit handler.

00:20:01.470 --> 00:20:04.160
We'll get to that real
soon, but not yet.

00:20:04.160 --> 00:20:06.820
I want this run every day,
3:00 AM to 4:00 AM.

00:20:06.820 --> 00:20:08.430
So let's save this bad boy.

00:20:08.430 --> 00:20:10.010
And what does this look like?

00:20:10.010 --> 00:20:11.685
Well, we can wait for it.

00:20:11.685 --> 00:20:13.290
Or I can just show you guys.

00:20:13.290 --> 00:20:14.200
So I'll just show you guys.

00:20:14.200 --> 00:20:15.760
This is my test email account.

00:20:15.760 --> 00:20:17.710
When I click on Daily
Fundraising Report-- this is

00:20:17.710 --> 00:20:21.390
from yesterday-- you'll see,
hey, Arun's raised $20.

00:20:21.390 --> 00:20:22.560
Eric's raised a lot of money.

00:20:22.560 --> 00:20:24.800
That guy's a go-getter.

00:20:24.800 --> 00:20:28.620
And that's how you schedule a
nightly report using Apps

00:20:28.620 --> 00:20:29.420
Script and spreadsheets.

00:20:29.420 --> 00:20:30.340
KALYAN REDDY: Oh, very cool.

00:20:30.340 --> 00:20:33.440
And then every time the data
modifies, the next time the

00:20:33.440 --> 00:20:35.130
trigger runs, it'll
be a new chart.

00:20:35.130 --> 00:20:35.640
IKAI LAIN: That's right.

00:20:35.640 --> 00:20:38.480
That's a very good point, which
is that, what's nice

00:20:38.480 --> 00:20:42.820
about this report is that it's
taking the latest data from

00:20:42.820 --> 00:20:43.590
the spreadsheet.

00:20:43.590 --> 00:20:45.890
So when I do update the
spreadsheet, when I do run

00:20:45.890 --> 00:20:48.220
this, this chart is going to
look totally different,

00:20:48.220 --> 00:20:50.340
because everyone's going to
presume we raised more money.

00:20:50.340 --> 00:20:53.400
I mean, it's a problem
if anyone's

00:20:53.400 --> 00:20:55.450
funds raises is dropping.

00:20:55.450 --> 00:20:57.330
It means you're losing
commitments, not closing.

00:20:57.330 --> 00:20:58.660
KALYAN REDDY: This way you're
staying on top of it.

00:20:58.660 --> 00:20:59.670
And then you can blame
that person.

00:20:59.670 --> 00:21:01.280
IKAI LAIN: You stay on
top, then-- not blame

00:21:01.280 --> 00:21:02.480
them, you help them.

00:21:02.480 --> 00:21:04.860
We're a team now.

00:21:04.860 --> 00:21:09.150
So that's how to use triggers to
generate a nightly report.

00:21:09.150 --> 00:21:12.190
Now, I mentioned that there's
also form-based triggers and

00:21:12.190 --> 00:21:16.270
other types of triggers
that you can run.

00:21:16.270 --> 00:21:20.150
And there are a few types
of triggers here.

00:21:20.150 --> 00:21:21.900
Let me go ahead and
demonstrate.

00:21:21.900 --> 00:21:27.740
So in this spreadsheet, I'm
going to use a clear one.

00:21:32.380 --> 00:21:35.930
So there are four types
of triggers that

00:21:35.930 --> 00:21:36.920
are spreadsheet based.

00:21:36.920 --> 00:21:40.010
One is on install, on
open, and on edit.

00:21:40.010 --> 00:21:42.870
So let's say that you want some
code to be executed every

00:21:42.870 --> 00:21:44.200
time you open a spreadsheet.

00:21:44.200 --> 00:21:46.710
Well, let's do this,
function onOpen.

00:21:50.570 --> 00:21:52.720
And you would define
something in here.

00:21:52.720 --> 00:21:55.240
And when you take a look to see
current script triggers,

00:21:55.240 --> 00:21:58.730
you'll see that by naming it on
open, you've automatically

00:21:58.730 --> 00:22:01.910
defined that function as the
function you want to run every

00:22:01.910 --> 00:22:05.880
time the script is opened.

00:22:05.880 --> 00:22:09.900
So it's the same thing
with onEdit.

00:22:09.900 --> 00:22:12.940
When you define a function
called onEdit in a spreadsheet

00:22:12.940 --> 00:22:17.150
attached script, you
look in triggers.

00:22:17.150 --> 00:22:22.180
You'll see that it's
automatically attached to the

00:22:22.180 --> 00:22:23.170
script's triggers.

00:22:23.170 --> 00:22:30.500
Now, if I want to rename this
onEditSuper, it's no longer

00:22:30.500 --> 00:22:31.450
named onEdit.

00:22:31.450 --> 00:22:32.640
So what happens to a trigger?

00:22:32.640 --> 00:22:33.390
Well, let's take a look.

00:22:33.390 --> 00:22:35.350
Let's go to Resources, Current
Script Trigger.

00:22:35.350 --> 00:22:36.460
It's gone.

00:22:36.460 --> 00:22:38.630
It's no longer an automatic
script that will run.

00:22:38.630 --> 00:22:41.250
So I'm going to have to click
Add new trigger, click on

00:22:41.250 --> 00:22:44.320
EditSuper, From spreadsheet,
and click onEdit.

00:22:44.320 --> 00:22:45.820
KALYAN REDDY: And for those
of you out there who are

00:22:45.820 --> 00:22:49.930
thinking, where am I going
to find all these special

00:22:49.930 --> 00:22:52.780
function names, you can go to
the Apps Script documentation.

00:22:52.780 --> 00:22:55.180
And you can look up what are all
the special functions that

00:22:55.180 --> 00:22:58.110
automatically become these
trigger functions.

00:22:58.110 --> 00:22:59.550
IKAI LAIN: Fortunately, there
are only three onInstall,

00:22:59.550 --> 00:23:01.110
onOpen, and onEdit.

00:23:01.110 --> 00:23:03.880
Oninstall is what happens when
someone installs your scripts

00:23:03.880 --> 00:23:05.130
from the script gallery.

00:23:08.080 --> 00:23:09.730
There are limitations here.

00:23:09.730 --> 00:23:11.940
You can only do certain things
in onOpen and onEdit.

00:23:11.940 --> 00:23:14.250
For those of you that define
custom spreadsheet menus,

00:23:14.250 --> 00:23:17.210
you're already familiar with
onOpen, because you'll see

00:23:17.210 --> 00:23:18.406
something like var ss
= Spreadsheet.app.

00:23:18.406 --> 00:23:19.656
getactivespreadsheet.

00:23:23.360 --> 00:23:24.610
And you'll see
spreadsheet.addmenu.

00:23:26.850 --> 00:23:29.220
And that's typically what
you want to do it

00:23:29.220 --> 00:23:30.420
in an onOpen hook.

00:23:30.420 --> 00:23:32.330
Sometimes, you want to be
annoying, and you want to see

00:23:32.330 --> 00:23:36.306
something like
Browser.msgbox("don't mess

00:23:36.306 --> 00:23:37.556
with this script").

00:23:43.160 --> 00:23:46.780
And Browser.msgbox pops up a
little message box on top of

00:23:46.780 --> 00:23:46.900
your spreadsheet.

00:23:46.900 --> 00:23:50.740
So I'm just going to go
ahead and save this.

00:23:50.740 --> 00:23:52.730
I'm going to double check
under Resources, Current

00:23:52.730 --> 00:23:53.300
Script Triggers.

00:23:53.300 --> 00:23:55.270
And sure enough, it's there.

00:23:55.270 --> 00:23:57.900
So let's move onEditSuper,
because the

00:23:57.900 --> 00:24:00.300
function no longer exists.

00:24:00.300 --> 00:24:01.690
Now, I'm going to go back to
spreadsheet, I'm going to

00:24:01.690 --> 00:24:06.120
refresh this, so I'm hitting
Command-R right now.

00:24:06.120 --> 00:24:09.960
And it's loading, loading,
loading, loading, loading.

00:24:09.960 --> 00:24:13.420
Firing up the spreadsheet,
fire up scripts.

00:24:13.420 --> 00:24:16.660
And there's my pop-up box,
"Don't mess with this script."

00:24:16.660 --> 00:24:20.005
So you can do a lot of
things in onOpen.

00:24:20.005 --> 00:24:21.460
Oop, closed the window.

00:24:21.460 --> 00:24:23.425
So Tools, Script Editor, that's
how you get to the

00:24:23.425 --> 00:24:26.770
Script Editor from
a spreadsheet.

00:24:26.770 --> 00:24:29.170
And we're opening this
up right now.

00:24:29.170 --> 00:24:30.430
Let's just discard the draft.

00:24:30.430 --> 00:24:32.810
We don't care about that.

00:24:32.810 --> 00:24:36.000
So you've got a lot of
limitations when you're using

00:24:36.000 --> 00:24:38.360
onOpen and onEdit.

00:24:38.360 --> 00:24:40.430
And there's good reasons
for this.

00:24:40.430 --> 00:24:44.290
First off, you can't ask a user,
you can't say, who's the

00:24:44.290 --> 00:24:45.320
current user?

00:24:45.320 --> 00:24:47.060
You can't send an email.

00:24:47.060 --> 00:24:48.890
You can't open a user's drive.

00:24:48.890 --> 00:24:52.450
In fact, the only things you
can do it onOpen and onEdit

00:24:52.450 --> 00:24:54.330
are edit the spreadsheet
itself.

00:24:54.330 --> 00:24:56.170
You cannot edit a different
spreadsheet.

00:24:56.170 --> 00:24:59.330
And the reason for this is that
you don't prompt the user

00:24:59.330 --> 00:25:00.580
for the permissions.

00:25:00.580 --> 00:25:03.470
So the only things that you
should be able to do are edit

00:25:03.470 --> 00:25:04.110
the spreadsheets.

00:25:04.110 --> 00:25:08.170
So the downside here is that you
can't have an onEdit that

00:25:08.170 --> 00:25:11.280
says, every time this
is edited, email me.

00:25:11.280 --> 00:25:12.430
I'm sorry--

00:25:12.430 --> 00:25:14.300
yeah, you can't email
the user.

00:25:14.300 --> 00:25:15.290
That's not something
you can do.

00:25:15.290 --> 00:25:17.750
However, you can say every
time you edit, add a time

00:25:17.750 --> 00:25:20.840
stamp to the currently edited
row, or every time you open a

00:25:20.840 --> 00:25:21.970
spreadsheet, add a menu.

00:25:21.970 --> 00:25:25.985
And typically, what you would
do instead is in onOpen, you

00:25:25.985 --> 00:25:29.390
would create a menu that on
clicking the menu, then the

00:25:29.390 --> 00:25:31.940
user authorizes your scripts
so you can access user's

00:25:31.940 --> 00:25:35.740
drive, access other
spreadsheets, basically, just

00:25:35.740 --> 00:25:37.060
work on behalf of the user.

00:25:37.060 --> 00:25:40.450
But you cannot work on behalf
of the user in onOpen or

00:25:40.450 --> 00:25:45.100
onEdit, as in you can't access
email, you can't access drive,

00:25:45.100 --> 00:25:49.270
you can't access docs, you can't
access anything else.

00:25:49.270 --> 00:25:50.500
So that's how you do that.

00:25:50.500 --> 00:25:53.300
So let's talk about the
very special one,

00:25:53.300 --> 00:25:54.870
which is On Form Submit.

00:25:54.870 --> 00:25:57.393
And this is the one that we very
commonly use any time we

00:25:57.393 --> 00:25:58.400
work with forms.

00:25:58.400 --> 00:26:01.710
So again, let's go back to our
fundraising spreadsheet.

00:26:01.710 --> 00:26:02.580
We've got two tabs.

00:26:02.580 --> 00:26:03.770
One is for fundraising.

00:26:03.770 --> 00:26:06.550
And the second one
is for donations.

00:26:06.550 --> 00:26:10.540
So donations, I've created
a Google form

00:26:10.540 --> 00:26:12.820
under Form, Edit Form.

00:26:12.820 --> 00:26:14.150
It's because I've already
created this.

00:26:14.150 --> 00:26:15.650
That's why you're seeing
this right now.

00:26:15.650 --> 00:26:18.600
So you're seeing that when
I hit Edit Form, well,

00:26:18.600 --> 00:26:21.720
basically, this collects name,
email, and a domain email and

00:26:21.720 --> 00:26:22.900
that's all I really want.

00:26:22.900 --> 00:26:24.600
So I'm going to close
this window.

00:26:24.600 --> 00:26:28.150
When we go to Live Form, you'll
see that this is what

00:26:28.150 --> 00:26:29.400
my form looks like.

00:26:31.510 --> 00:26:34.520
It's a form that tells people,
hey, give me your name and

00:26:34.520 --> 00:26:36.470
give me your email, and what
your donation amount is.

00:26:36.470 --> 00:26:39.670
So let's go ahead and try
doing this right now.

00:26:43.180 --> 00:26:47.020
So I have this wired up to an
Apps Script to send an email

00:26:47.020 --> 00:26:50.830
to whoever fills out the form,
if you give me a correctly

00:26:50.830 --> 00:26:52.050
formed email address.

00:26:52.050 --> 00:26:54.840
So let's go ahead back
to on form submit.

00:26:54.840 --> 00:26:59.020
On form submit is not one of
these magic function names.

00:26:59.020 --> 00:27:03.730
You have to go into Resources,
click Current Script Triggers,

00:27:03.730 --> 00:27:06.220
select the function, From
Spreadsheet, and

00:27:06.220 --> 00:27:08.000
click on form submit.

00:27:08.000 --> 00:27:09.380
So you have to do that.

00:27:09.380 --> 00:27:11.150
There's no magical name
that you can do to

00:27:11.150 --> 00:27:13.730
make this thing work.

00:27:13.730 --> 00:27:18.920
Once you hit Save, whenever
someone submits the form,

00:27:18.920 --> 00:27:21.270
it'll execute the code in
whatever function you've

00:27:21.270 --> 00:27:22.480
defined to execute.

00:27:22.480 --> 00:27:25.570
So, in this case, there are
better ways of doing this.

00:27:25.570 --> 00:27:27.420
You can do E dot values
to return to form

00:27:27.420 --> 00:27:28.630
values as an array.

00:27:28.630 --> 00:27:30.350
You can also use named
parameters.

00:27:30.350 --> 00:27:31.800
There are lots of things
that you could do here.

00:27:31.800 --> 00:27:34.710
So I suggest that you check out
the triggers documentation

00:27:34.710 --> 00:27:37.640
for an exhaustive list of how
to get at the parameters.

00:27:37.640 --> 00:27:40.240
But for now, we're just going
to use an array for clarity.

00:27:40.240 --> 00:27:43.160
So each one of these values
corresponds to

00:27:43.160 --> 00:27:44.800
a spreadsheet column.

00:27:44.800 --> 00:27:47.400
And spreadsheet columns are
what we call one index.

00:27:47.400 --> 00:27:52.210
So the very first column
here is 1, 2, 3, 4.

00:27:52.210 --> 00:27:54.300
However, this is a
JavaScript array.

00:27:54.300 --> 00:27:57.360
And sometimes this mismatch can
be a little bit confusing.

00:27:57.360 --> 00:28:00.110
A JavaScript array, it's
like a European floor.

00:28:00.110 --> 00:28:01.520
It starts at 0.

00:28:01.520 --> 00:28:04.300
So we're going to start
at 0, 1, 2, 3.

00:28:04.300 --> 00:28:05.290
So we go back here.

00:28:05.290 --> 00:28:07.260
And timestamp is now column 0.

00:28:07.260 --> 00:28:08.440
Name is column 1.

00:28:08.440 --> 00:28:09.570
Email is column 2.

00:28:09.570 --> 00:28:12.440
And donation is column 3.

00:28:12.440 --> 00:28:14.250
So we're going to create
variables for this, just for

00:28:14.250 --> 00:28:14.830
code clarity.

00:28:14.830 --> 00:28:15.700
You don't have to do this.

00:28:15.700 --> 00:28:17.770
I do this because when someone's
reading my code,

00:28:17.770 --> 00:28:19.240
they know what's going on.

00:28:19.240 --> 00:28:21.110
Again, I'm going to use the
HTML service trick.

00:28:21.110 --> 00:28:23.330
We'll create template
from file.

00:28:23.330 --> 00:28:25.250
Now I'm going to set two
variables, name and amount.

00:28:25.250 --> 00:28:26.725
So let's take a look at
notificationTemplate.html.

00:28:29.270 --> 00:28:31.100
And you can always create
HTML files by going to

00:28:31.100 --> 00:28:33.230
File, New HTML File.

00:28:33.230 --> 00:28:36.630
So here, I've created a basic
HTML file that says, "thank

00:28:36.630 --> 00:28:40.170
you for your donation." You
know, dear name, which is

00:28:40.170 --> 00:28:41.900
going to be the variable
name inject.

00:28:41.900 --> 00:28:43.690
"Thank you for your
generous donation

00:28:43.690 --> 00:28:45.210
of" some dollar amount.

00:28:45.210 --> 00:28:47.810
So we're going to go ahead and
inject that dollar amount.

00:28:47.810 --> 00:28:50.030
And I'm going to sign this,
because I'm very grateful that

00:28:50.030 --> 00:28:50.920
you donated money.

00:28:50.920 --> 00:28:54.180
So this is all wired to
when a form submits.

00:28:54.180 --> 00:28:56.860
And when this is done, I'm
going to send an email.

00:28:56.860 --> 00:28:57.680
I'm going to thank you
for your donation.

00:28:57.680 --> 00:28:59.340
And I'm going to say
htmlBody dot

00:28:59.340 --> 00:29:01.440
template.evaluate.getContent.

00:29:01.440 --> 00:29:02.930
So let's go ahead
and do this now.

00:29:02.930 --> 00:29:04.865
And how much do we donate?

00:29:04.865 --> 00:29:06.410
We're Michael Moneybags.

00:29:06.410 --> 00:29:07.920
KALYAN REDDY: Well, I know
this very, very rich guy.

00:29:07.920 --> 00:29:08.665
He's a good friend of mine.

00:29:08.665 --> 00:29:11.130
So let's donate a
billion dollars.

00:29:11.130 --> 00:29:12.520
IKAI LAIN: $1 million.

00:29:12.520 --> 00:29:14.622
Why would you donate
$1 billion when you

00:29:14.622 --> 00:29:17.150
can donate $1 million?

00:29:17.150 --> 00:29:18.650
KALYAN REDDY: Sure.

00:29:18.650 --> 00:29:20.640
IKAI LAIN: A little silly
joke for those of us

00:29:20.640 --> 00:29:22.880
who are kind of--

00:29:22.880 --> 00:29:24.750
nevermind, Austin Powers
generation.

00:29:24.750 --> 00:29:26.060
So I'm going to hit Submit.

00:29:26.060 --> 00:29:29.610
And it's just a standard form
output that says, hey, your

00:29:29.610 --> 00:29:31.310
response has been recorded.

00:29:31.310 --> 00:29:33.970
So when we go back to the
spreadsheet, we see that

00:29:33.970 --> 00:29:36.960
Michael Moneybags has committed
to donating $1

00:29:36.960 --> 00:29:40.010
million to our cause.

00:29:40.010 --> 00:29:41.380
And you notice that the
commas went in.

00:29:41.380 --> 00:29:43.430
This is a nice little
spreadsheet feature.

00:29:43.430 --> 00:29:44.850
You can format a row.

00:29:44.850 --> 00:29:46.560
So I've selected this row.

00:29:46.560 --> 00:29:48.960
And I've gone to--

00:29:48.960 --> 00:29:52.380
this is always format, number,
and just selected currency.

00:29:52.380 --> 00:29:57.140
So if I select currency with
cents, any new thing that

00:29:57.140 --> 00:29:59.555
comes in will be formatted
currency with commas, dollar

00:29:59.555 --> 00:30:00.560
signs, and cents.

00:30:00.560 --> 00:30:02.720
So let's go ahead and check
my email inbox.

00:30:02.720 --> 00:30:04.130
Oh, I've got a new email.

00:30:04.130 --> 00:30:05.710
What could this be?

00:30:05.710 --> 00:30:06.860
I'm Michael Moneybags.

00:30:06.860 --> 00:30:10.000
"Dear Michael Moneybags, thank
you for your generous donation

00:30:10.000 --> 00:30:12.810
of $1 million."

00:30:12.810 --> 00:30:16.200
One thing to notice is that this
is not formatted the same

00:30:16.200 --> 00:30:17.590
way it's formatted on
the spreadsheet.

00:30:17.590 --> 00:30:20.080
That's because internally,
it's still saved

00:30:20.080 --> 00:30:23.400
as the value 100000000.

00:30:23.400 --> 00:30:25.840
Spreadsheet formats are
purely view only.

00:30:25.840 --> 00:30:28.710
So if I want to format this so
it looks nicer, I'm going to

00:30:28.710 --> 00:30:32.330
have to go ahead and manually
format this thing before I

00:30:32.330 --> 00:30:33.580
send it out to the template.

00:30:33.580 --> 00:30:36.520
So keep that in mind that the
number you get is not going to

00:30:36.520 --> 00:30:39.620
look exactly the same as the
number you get inside the

00:30:39.620 --> 00:30:40.090
spreadsheet.

00:30:40.090 --> 00:30:42.090
So right here, I'm just
saying the amount.

00:30:42.090 --> 00:30:45.330
And the raw value I entered,
if you remember, it's just

00:30:45.330 --> 00:30:46.050
this number.

00:30:46.050 --> 00:30:48.510
So that's why it looks like
that in email and it looks

00:30:48.510 --> 00:30:49.901
different from the
spreadsheet.

00:30:52.490 --> 00:30:55.380
OK, so that's kind of--

00:30:55.380 --> 00:30:55.840
oops.

00:30:55.840 --> 00:30:56.870
That's the next part.

00:30:56.870 --> 00:30:57.560
Don't look.

00:30:57.560 --> 00:30:58.810
It's a secret.

00:31:02.400 --> 00:31:04.250
So there are a couple of things
to know about working

00:31:04.250 --> 00:31:05.530
we're triggers.

00:31:05.530 --> 00:31:07.240
Triggers do have CPU limits.

00:31:07.240 --> 00:31:11.630
So you can't just write a
trigger that runs for days.

00:31:11.630 --> 00:31:14.570
So a trigger will time out
around a five minute mark.

00:31:14.570 --> 00:31:16.440
It'll probably go a little
bit longer than that.

00:31:16.440 --> 00:31:20.190
And also, if you run 10,000 jobs
a day, you're probably

00:31:20.190 --> 00:31:21.150
going to run out of quota.

00:31:21.150 --> 00:31:23.810
So you can't just use triggers
as a way of doing infinite

00:31:23.810 --> 00:31:26.300
computation.

00:31:26.300 --> 00:31:28.690
You need to think about what
you're doing and kind of

00:31:28.690 --> 00:31:30.830
balance things out.

00:31:30.830 --> 00:31:33.180
With triggers, when you want to
return the user as running

00:31:33.180 --> 00:31:35.870
as, you want to use
section.geteffectiveuser.

00:31:35.870 --> 00:31:39.050
Because it's not an active user,
it's an effective user.

00:31:39.050 --> 00:31:42.070
It's who am I running as, as
opposed to who's actually on

00:31:42.070 --> 00:31:45.420
the computer typing away,
pushing buttons and whatnot.

00:31:45.420 --> 00:31:47.730
Well, two things that I haven't
talked about yet that

00:31:47.730 --> 00:31:50.380
I will demonstrate right now are
All My Triggers and email

00:31:50.380 --> 00:31:51.420
notifications.

00:31:51.420 --> 00:31:54.410
So when you're in the Script
Editor, sometimes, like me,

00:31:54.410 --> 00:31:56.230
you might be working on five
or six scripts at once.

00:31:56.230 --> 00:31:58.080
And you don't know what
triggers are running.

00:31:58.080 --> 00:32:00.095
And that's why there's an All
My Triggers resource.

00:32:00.095 --> 00:32:04.030
So if you go to Resources,
All Your Triggers.

00:32:04.030 --> 00:32:05.800
And I'm in a totally different
app right now.

00:32:05.800 --> 00:32:08.420
You'll see that I've returned
all of my triggers across all

00:32:08.420 --> 00:32:09.600
of my different applications.

00:32:09.600 --> 00:32:11.950
KALYAN REDDY: We'll see the ones
we created with the other

00:32:11.950 --> 00:32:13.030
script as well.

00:32:13.030 --> 00:32:13.630
IKAI LAIN: That's right.

00:32:13.630 --> 00:32:16.470
I have the email gkal
trigger right here.

00:32:16.470 --> 00:32:18.210
And let's go ahead
and cancel it.

00:32:18.210 --> 00:32:20.980
So you're no longer going to
get congratulatory emails.

00:32:20.980 --> 00:32:22.030
So we're going to save this.

00:32:22.030 --> 00:32:23.200
That's really nice.

00:32:23.200 --> 00:32:26.230
The other nice thing is that
when you go to either All My

00:32:26.230 --> 00:32:28.680
Triggers or Triggers, I've kind
of been glazing over this

00:32:28.680 --> 00:32:29.930
notifications thing.

00:32:33.600 --> 00:32:36.340
What's nice about this is that
you can set up notification so

00:32:36.340 --> 00:32:39.270
that when there are errors in
your script, you get an email.

00:32:39.270 --> 00:32:42.080
And there are no errors
in anything that I

00:32:42.080 --> 00:32:43.830
write, because I'm me.

00:32:43.830 --> 00:32:44.760
Kidding.

00:32:44.760 --> 00:32:47.610
But sometimes, you might get
invalid input or there might

00:32:47.610 --> 00:32:48.460
be a bug in your code.

00:32:48.460 --> 00:32:51.090
It's very important that you
want to get notified.

00:32:51.090 --> 00:32:54.920
So when you have a notification,
you might want

00:32:54.920 --> 00:32:56.680
to be notified that
there's an error.

00:32:56.680 --> 00:32:59.700
And under the notification,
there are various options.

00:32:59.700 --> 00:33:02.160
You might want to be notified
every time, immediately when

00:33:02.160 --> 00:33:02.930
there's an error.

00:33:02.930 --> 00:33:04.880
And if you have a low volume
usage script, you

00:33:04.880 --> 00:33:05.780
sometimes want this.

00:33:05.780 --> 00:33:08.150
Because if someone uses your
script, it doesn't work, you

00:33:08.150 --> 00:33:09.360
don't want them to call you.

00:33:09.360 --> 00:33:10.290
You want to be on it.

00:33:10.290 --> 00:33:11.410
You want to be on top
of that thing.

00:33:11.410 --> 00:33:12.860
So you go ahead and
click Immediately.

00:33:12.860 --> 00:33:15.020
And whenever there's a failure,
you'll get the

00:33:15.020 --> 00:33:16.190
failure right away.

00:33:16.190 --> 00:33:18.440
Maybe a common failure is--

00:33:18.440 --> 00:33:20.350
let me show you guys
something.

00:33:20.350 --> 00:33:23.850
KALYAN REDDY: And it's still
good practice to run your

00:33:23.850 --> 00:33:26.620
trigger function before just
to test it, make sure

00:33:26.620 --> 00:33:27.780
everything works.

00:33:27.780 --> 00:33:31.480
But this is also a good catch
if there is some kind of

00:33:31.480 --> 00:33:33.330
extraneous error, then you'll
get notified of it.

00:33:33.330 --> 00:33:33.990
IKAI LAIN: Right.

00:33:33.990 --> 00:33:36.970
When you get an error, it looks
something like this.

00:33:36.970 --> 00:33:38.190
This is a summary email.

00:33:38.190 --> 00:33:39.770
But it'll tell you
all the errors.

00:33:39.770 --> 00:33:41.670
It'll tell you what the
error message was.

00:33:41.670 --> 00:33:45.860
And it'll say what caused
it and what time it was.

00:33:45.860 --> 00:33:48.160
So this isn't a lot
of information.

00:33:48.160 --> 00:33:50.870
But one of the patterns that
you can use is if you know

00:33:50.870 --> 00:33:53.780
there's some place that you're
trying to debug, put a try

00:33:53.780 --> 00:33:55.070
catch block around it.

00:33:55.070 --> 00:33:57.570
And when it does blow up,
then go ahead and

00:33:57.570 --> 00:33:58.710
email a stack trace.

00:33:58.710 --> 00:34:00.360
Because sometimes the stack
trace is more useful.

00:34:00.360 --> 00:34:02.955
But we would completely blow up
your inbox if we were to do

00:34:02.955 --> 00:34:04.440
that every single time.

00:34:04.440 --> 00:34:06.920
You want to record relevant
values, as in, what are the

00:34:06.920 --> 00:34:08.350
values that might have
caused this error?

00:34:08.350 --> 00:34:12.900
So you're going to want to
go ahead and build that.

00:34:12.900 --> 00:34:16.380
So again, the other values
here, all your triggers,

00:34:16.380 --> 00:34:17.630
notification.

00:34:19.400 --> 00:34:21.810
Besides immediately, you have
hourly, daily, weekly.

00:34:21.810 --> 00:34:25.409
So most of the time, I just want
notifications daily, how

00:34:25.409 --> 00:34:26.560
many errors there were.

00:34:26.560 --> 00:34:28.409
And occasionally there's
one or two.

00:34:28.409 --> 00:34:30.340
And such is life.

00:34:30.340 --> 00:34:32.380
That's just the user putting in
wrong input or something.

00:34:32.380 --> 00:34:36.040
And that's why I might want it
daily instead of immediately.

00:34:36.040 --> 00:34:39.900
But then again, it just depends
on a volume or script

00:34:39.900 --> 00:34:41.889
and what kind of debugging
you want, what kind of

00:34:41.889 --> 00:34:42.670
notifications you want.

00:34:42.670 --> 00:34:44.580
So that's how you can add error

00:34:44.580 --> 00:34:46.060
notifications to your triggers.

00:34:46.060 --> 00:34:48.389
Because when you're running
a script, what I call

00:34:48.389 --> 00:34:50.610
interactively, you get
the error right away.

00:34:50.610 --> 00:34:52.020
You can dig into
it right away.

00:34:52.020 --> 00:34:55.314
But when script is being run as
a trigger, there's no other

00:34:55.314 --> 00:34:57.840
way of figuring out when
it's bombing out or

00:34:57.840 --> 00:34:58.920
when there are errors.

00:34:58.920 --> 00:35:02.460
So that's why you want to use
a notification functionality

00:35:02.460 --> 00:35:04.310
to debug your script when
there's problems.

00:35:06.840 --> 00:35:07.770
Everything good so far?

00:35:07.770 --> 00:35:09.660
KALYAN REDDY: Yeah,
it makes sense.

00:35:09.660 --> 00:35:10.840
IKAI LAIN: Good.

00:35:10.840 --> 00:35:11.320
Good.

00:35:11.320 --> 00:35:12.990
Let's talk about things
you can't do.

00:35:12.990 --> 00:35:14.100
I touched on this earlier.

00:35:14.100 --> 00:35:18.010
But again, you cannot use
onInstall, onOpen, and onEdit

00:35:18.010 --> 00:35:20.360
to do anything beyond accessing
the spreadsheet

00:35:20.360 --> 00:35:21.030
they're contained by.

00:35:21.030 --> 00:35:21.960
You can't send emails.

00:35:21.960 --> 00:35:24.220
You can't access user's drive.

00:35:24.220 --> 00:35:26.870
You go only edit the
spreadsheet.

00:35:26.870 --> 00:35:30.170
On form submit and on clock
triggers, these run as a user

00:35:30.170 --> 00:35:31.300
that installed the trigger.

00:35:31.300 --> 00:35:33.540
So if your app programmatically
creates a

00:35:33.540 --> 00:35:37.440
trigger for a different user,
it runs as a client user.

00:35:37.440 --> 00:35:39.440
So let's say, I create
a web application.

00:35:39.440 --> 00:35:42.620
And Kalyan comes, and he
clicks some button.

00:35:42.620 --> 00:35:45.320
Well, the trigger now runs under
him and not under me,

00:35:45.320 --> 00:35:47.430
and I'll show you guys
what I mean by this.

00:35:47.430 --> 00:35:50.770
So here's a web app
I've written.

00:35:50.770 --> 00:35:53.850
It is in one of these windows.

00:35:53.850 --> 00:35:54.900
Cancel.

00:35:54.900 --> 00:35:55.540
Cancel.

00:35:55.540 --> 00:35:57.540
So I called the schedule
trigger from a web app.

00:35:57.540 --> 00:36:00.380
And I created this just
at script.google.com.

00:36:00.380 --> 00:36:02.990
It's got a do get handler.

00:36:02.990 --> 00:36:05.710
And it creates a single button
that's says schedule trigger.

00:36:05.710 --> 00:36:09.410
That creates a trigger that
emails me every one minute.

00:36:09.410 --> 00:36:12.520
When it calls email me, again
I call session dot get

00:36:12.520 --> 00:36:13.510
effective user.

00:36:13.510 --> 00:36:15.580
Who is the user I'm
running as?

00:36:15.580 --> 00:36:17.180
And I'm sending an email that
says, you're getting this

00:36:17.180 --> 00:36:17.980
because of a button.

00:36:17.980 --> 00:36:19.430
Hi, there.

00:36:19.430 --> 00:36:21.080
So if I go ahead and
deploy this thing,

00:36:21.080 --> 00:36:23.870
it looks like this.

00:36:23.870 --> 00:36:26.240
Publish the app.

00:36:26.240 --> 00:36:27.650
Do not publish at the Gallery.

00:36:27.650 --> 00:36:29.440
People commonly mix this
up with [INAUDIBLE]

00:36:29.440 --> 00:36:31.010
web app.

00:36:31.010 --> 00:36:32.490
I've done it a couple
times by accident.

00:36:32.490 --> 00:36:34.630
So here's the current
web app URL.

00:36:34.630 --> 00:36:37.210
So let's open a new
window, like so.

00:36:37.210 --> 00:36:39.830
And it's going to load a single
button that says,

00:36:39.830 --> 00:36:42.730
schedule something for me,
schedule a trigger.

00:36:42.730 --> 00:36:43.640
All right, that's fine.

00:36:43.640 --> 00:36:45.480
But right now, as you
can see, I'm logged

00:36:45.480 --> 00:36:47.080
in as my test account.

00:36:47.080 --> 00:36:48.960
So let's log in as a different
test account.

00:36:53.550 --> 00:36:55.050
So this is a different
test account.

00:36:55.050 --> 00:36:56.300
This is dinodinosaur.test.

00:36:59.160 --> 00:37:01.100
I just copy, pasted the URL.

00:37:04.160 --> 00:37:06.600
And the first thing I'm going
to see is an authorization

00:37:06.600 --> 00:37:08.140
dialogue, because this
is a web app.

00:37:08.140 --> 00:37:11.440
So I'm going to say, oh, this
script wants access to send

00:37:11.440 --> 00:37:14.160
email and also wants permission
to subscribe to

00:37:14.160 --> 00:37:16.480
external events, as in, schedule
more triggers.

00:37:16.480 --> 00:37:19.120
So I'm going to authorize
this.

00:37:19.120 --> 00:37:20.710
It's going to take me to
the web app and it

00:37:20.710 --> 00:37:23.640
looks exactly the same.

00:37:23.640 --> 00:37:25.890
And I'm going to schedule
a trigger.

00:37:25.890 --> 00:37:26.580
That's all it does.

00:37:26.580 --> 00:37:28.200
I should have set some feedback
or something.

00:37:28.200 --> 00:37:31.340
But this is a demo
application.

00:37:31.340 --> 00:37:34.070
So I've gone ahead and I've
scheduled a trigger.

00:37:34.070 --> 00:37:37.210
And what you'll see is that
you'll get an email that says,

00:37:37.210 --> 00:37:39.935
oh, hey, you just installed
a web application.

00:37:42.930 --> 00:37:44.850
Here's how you uninstall it.

00:37:44.850 --> 00:37:46.970
So in about a minute, I'll
start getting emails.

00:37:46.970 --> 00:37:47.430
And there you go.

00:37:47.430 --> 00:37:48.490
There's my first email.

00:37:48.490 --> 00:37:50.400
You are getting this because
of a button.

00:37:50.400 --> 00:37:53.880
A trigger has been scheduled
for me that's emailing

00:37:53.880 --> 00:37:55.700
dinodinosaur.test.

00:37:55.700 --> 00:37:58.520
And if we go to test script,
this is nothing.

00:37:58.520 --> 00:38:00.270
I just save this so
I can look at the

00:38:00.270 --> 00:38:01.380
current scripts trigger.

00:38:01.380 --> 00:38:03.400
There are no script triggers for
a current script, because

00:38:03.400 --> 00:38:04.260
I didn't set any up.

00:38:04.260 --> 00:38:05.650
This is a blank script.

00:38:05.650 --> 00:38:10.120
But if I go to Resources, All
Your Triggers, oh, well, I

00:38:10.120 --> 00:38:11.140
have an email me trigger.

00:38:11.140 --> 00:38:12.560
It's not attached to a script.

00:38:12.560 --> 00:38:14.480
So I want to cancel this.

00:38:14.480 --> 00:38:15.490
So there are two things
I can do.

00:38:15.490 --> 00:38:18.570
I can either go back to this
notification email, more

00:38:18.570 --> 00:38:21.560
information, and click
on uninstall.

00:38:21.560 --> 00:38:24.610
Or I can just go here and delete
the email me trigger.

00:38:24.610 --> 00:38:29.280
And that'll kill the
trigger off.

00:38:29.280 --> 00:38:32.100
So again, let's go through
that again.

00:38:32.100 --> 00:38:37.740
If I click Schedule Trigger,
it's already-- whew, wow.

00:38:37.740 --> 00:38:39.380
I zoomed in a lot there.

00:38:39.380 --> 00:38:41.640
Resources, All Your Triggers.

00:38:41.640 --> 00:38:43.250
I pushed a button twice.

00:38:43.250 --> 00:38:47.910
And now I can cancel it like
so, and click Save.

00:38:47.910 --> 00:38:49.170
And that'll get rid
of the triggers.

00:38:49.170 --> 00:38:52.690
KALYAN REDDY: So this running as
the user executing it, will

00:38:52.690 --> 00:38:57.190
this also have implications for
a quota of certain things?

00:38:57.190 --> 00:38:57.870
IKAI LAIN: Yes.

00:38:57.870 --> 00:39:01.210
So when it runs, it will use
up your user's quota.

00:39:01.210 --> 00:39:04.780
So because it runs as you,
it uses your quota.

00:39:04.780 --> 00:39:07.400
Unless, for instance, you saw
it when I published the

00:39:07.400 --> 00:39:11.405
application, I said run
it as the end user.

00:39:11.405 --> 00:39:14.380
Let me see if I can show
you what I mean.

00:39:14.380 --> 00:39:18.260
If I execute it as me,
ikai.lain.test@gmail.com, it's

00:39:18.260 --> 00:39:19.850
going to use my quota.

00:39:19.850 --> 00:39:21.610
KALYAN REDDY: So there's
uses for both.

00:39:21.610 --> 00:39:24.560
One is if you don't want to run
over the amount of emails

00:39:24.560 --> 00:39:27.260
you can send every day, you can
have it run as the user,

00:39:27.260 --> 00:39:28.880
and then use their
quota instead.

00:39:28.880 --> 00:39:29.540
IKAI LAIN: Exactly.

00:39:29.540 --> 00:39:32.480
And the thing about that is
that when I go here and I

00:39:32.480 --> 00:39:36.390
click sent email, you see
that, oh, well, this is

00:39:36.390 --> 00:39:38.340
running as ikai.lain.test.

00:39:38.340 --> 00:39:41.140
Whereas when it runs as
you, Mail App sends

00:39:41.140 --> 00:39:41.550
this to you, too.

00:39:41.550 --> 00:39:46.690
So this is coming from
dinodinosaur.test.

00:39:46.690 --> 00:39:51.270
When I go to send mail, it's
running as the second user.

00:39:51.270 --> 00:39:54.110
So it's not just for
quota reasons.

00:39:54.110 --> 00:39:55.560
The main reason should
not be quota related.

00:39:55.560 --> 00:39:59.040
The main reason should be you
want to run it as you.

00:39:59.040 --> 00:40:01.870
You want someone to sign up and
get update notifications

00:40:01.870 --> 00:40:05.060
on, I don't know, the latest
documents coming into your

00:40:05.060 --> 00:40:07.510
drive, or whatever.

00:40:07.510 --> 00:40:10.930
So let's go and talk about
some advanced patterns.

00:40:17.900 --> 00:40:22.220
So there are three patterns I
want to talk about, and of

00:40:22.220 --> 00:40:23.880
where you would use triggers
outside the

00:40:23.880 --> 00:40:25.110
exams I've showed you.

00:40:25.110 --> 00:40:27.060
One is when you want to chain
long running jobs.

00:40:27.060 --> 00:40:29.295
Like right now, as you know,
there's a limit to how long a

00:40:29.295 --> 00:40:30.080
trigger can run.

00:40:30.080 --> 00:40:31.580
So let's say we want to run
a job that going to

00:40:31.580 --> 00:40:32.820
take, say, an hour.

00:40:32.820 --> 00:40:34.030
Well, how would you do that?

00:40:34.030 --> 00:40:36.010
Well, you really can't
right now.

00:40:36.010 --> 00:40:37.140
But you can with triggers.

00:40:37.140 --> 00:40:39.810
And what you would do is you
would create a trigger that

00:40:39.810 --> 00:40:42.940
runs every five minutes or
so, and just goes ahead.

00:40:42.940 --> 00:40:46.350
And when it's done executing,
it executes the next block.

00:40:46.350 --> 00:40:48.610
So you might want to save a
point or two where you are in

00:40:48.610 --> 00:40:50.650
your job, and just
keep moving.

00:40:50.650 --> 00:40:54.780
And you save that either in
a property or in ScriptDb.

00:40:54.780 --> 00:40:56.880
And that's how you would
do a long running job.

00:40:56.880 --> 00:40:59.320
And when you're done with the
job, you can program and

00:40:59.320 --> 00:41:00.200
create triggers.

00:41:00.200 --> 00:41:01.940
You can also unschedule
triggers.

00:41:01.940 --> 00:41:03.880
So let's talk about
how to do that

00:41:03.880 --> 00:41:05.490
KALYAN REDDY: So just to be
clear, you would want to do

00:41:05.490 --> 00:41:08.360
this because there is an
established limit on how long

00:41:08.360 --> 00:41:09.300
each execution can run.

00:41:09.300 --> 00:41:09.930
IKAI LAIN: Exactly.

00:41:09.930 --> 00:41:11.910
You have a total CPU
time that you can

00:41:11.910 --> 00:41:13.270
use up for your triggers.

00:41:13.270 --> 00:41:15.800
And sometimes you just don't
want a runaway trigger.

00:41:15.800 --> 00:41:18.520
If you want a user to be able to
cancel all their triggers,

00:41:18.520 --> 00:41:20.305
for instance, you can
write a trigger that

00:41:20.305 --> 00:41:21.600
says, kill all triggers.

00:41:21.600 --> 00:41:24.160
And you don't have
to name it this.

00:41:24.160 --> 00:41:25.330
What you would do
is you would do

00:41:25.330 --> 00:41:26.580
ScriptApp.getScriptTriggers.

00:41:29.160 --> 00:41:33.280
This returns an array
of all the triggers.

00:41:33.280 --> 00:41:34.550
You can iterate through this.

00:41:37.140 --> 00:41:38.390
There's a syntax error here.

00:41:42.520 --> 00:41:44.760
And this would cancel
all the triggers.

00:41:44.760 --> 00:41:47.530
So triggers, when I pick the
trigger it's currently working

00:41:47.530 --> 00:41:49.580
on, I would just say-- opps.

00:41:49.580 --> 00:41:51.450
You would delete the trigger
via script apps.

00:41:51.450 --> 00:41:54.850
So you would say,
ScriptApp.deleteTrigger, and

00:41:54.850 --> 00:41:56.780
pass it the current trigger.

00:41:56.780 --> 00:41:58.150
And this deletes all
the triggers.

00:41:58.150 --> 00:42:01.050
This is like a big
red panic button.

00:42:01.050 --> 00:42:03.120
But really, sometimes
you only want to

00:42:03.120 --> 00:42:04.165
delete a specific trigger.

00:42:04.165 --> 00:42:07.160
So that's when you would put
in a conditional like this.

00:42:07.160 --> 00:42:08.750
Triggers, the current one.

00:42:08.750 --> 00:42:11.900
And you would say, well, what's
the handler function?

00:42:11.900 --> 00:42:16.910
If the handler function is email
me, go ahead and delete

00:42:16.910 --> 00:42:17.760
the trigger.

00:42:17.760 --> 00:42:20.460
And there's one more way to do
this, which is that triggers

00:42:20.460 --> 00:42:24.530
have something called a unique
ID, get unique ID.

00:42:24.530 --> 00:42:25.975
And this is unique globally.

00:42:25.975 --> 00:42:29.080
This is unique across all
scripts for all users.

00:42:29.080 --> 00:42:32.500
So at the time of trigger
creation, what you might want

00:42:32.500 --> 00:42:36.690
to do is say
Trigger.getUniqueID, save this

00:42:36.690 --> 00:42:39.450
somewhere, like in ScriptDb,
or in properties, and that

00:42:39.450 --> 00:42:41.790
way, if you've got a bunch of
different triggers running for

00:42:41.790 --> 00:42:45.280
a bunch of different people, you
can just go ahead and get

00:42:45.280 --> 00:42:48.930
unique ID matches the one in
ScriptDb, delete that trigger.

00:42:48.930 --> 00:42:52.160
So that's typically how you
want to programmatically

00:42:52.160 --> 00:42:54.910
unschedule triggers.

00:42:54.910 --> 00:42:57.910
So there's one more pattern.

00:42:57.910 --> 00:43:03.200
I said before that you cannot
set up triggers in onOpen.

00:43:03.200 --> 00:43:05.150
When you copy a spreadsheet,
it does not

00:43:05.150 --> 00:43:06.710
copy over to triggers.

00:43:06.710 --> 00:43:09.990
So if I go here to the
spreadsheet that I created,

00:43:09.990 --> 00:43:12.800
demo fundraising, and I
made a copy of this--

00:43:12.800 --> 00:43:14.300
make a copy.

00:43:14.300 --> 00:43:15.550
Copy demo fundraising.

00:43:18.760 --> 00:43:21.850
And right now, this is a total
copy of the spreadsheet for

00:43:21.850 --> 00:43:26.010
the most part, except when I
go to Tools, Script Editor.

00:43:26.010 --> 00:43:27.665
And scripts take a few
seconds to copy.

00:43:27.665 --> 00:43:29.180
So this might not
have copied yet.

00:43:29.180 --> 00:43:32.280
But fortunately, I was
slow, so it did it.

00:43:32.280 --> 00:43:33.535
You'll see that it's copied
all the code.

00:43:33.535 --> 00:43:37.760
But when I go to Resources,
Current Script Triggers, only

00:43:37.760 --> 00:43:40.270
the onOpen and onEdit
triggers are set up.

00:43:40.270 --> 00:43:44.530
We don't have the trigger that
says, run this every hour, run

00:43:44.530 --> 00:43:46.350
this every minute, run
this at midnight.

00:43:46.350 --> 00:43:47.760
That's not copied over.

00:43:47.760 --> 00:43:51.320
So this is problematic if your
workflow is to create a

00:43:51.320 --> 00:43:53.250
spreadsheet and you have people
in your organization

00:43:53.250 --> 00:43:54.490
make a copy of it.

00:43:54.490 --> 00:43:56.450
Because you often want
them to copy the

00:43:56.450 --> 00:43:57.530
time-based triggers, too.

00:43:57.530 --> 00:43:59.760
So what do we do about this?

00:43:59.760 --> 00:44:05.070
Well, a common pattern
that I do is I use

00:44:05.070 --> 00:44:07.390
onOpen to create a menu.

00:44:07.390 --> 00:44:09.260
In the menu, I say, set
up a spreadsheet.

00:44:09.260 --> 00:44:11.530
And I store it inside script
properties, or user

00:44:11.530 --> 00:44:14.410
properties, or wherever that
says, you have created the

00:44:14.410 --> 00:44:15.980
triggers or you have not
created the triggers.

00:44:20.600 --> 00:44:22.280
You can't access those
inside onOpen.

00:44:22.280 --> 00:44:28.370
But what you can do is you
create a menu item that says,

00:44:28.370 --> 00:44:30.450
schedule set up the script.

00:44:30.450 --> 00:44:32.520
So you go ahead, and you
click the menu item.

00:44:32.520 --> 00:44:33.560
You say, set up script.

00:44:33.560 --> 00:44:35.440
It's going to ask the user
for authorization.

00:44:35.440 --> 00:44:38.790
And at that point, it's going
to go ahead and schedule the

00:44:38.790 --> 00:44:40.590
triggers for you.

00:44:40.590 --> 00:44:45.500
Because you have functions like
get script triggers, you

00:44:45.500 --> 00:44:48.280
can look to see if the trigger
has already been set up.

00:44:48.280 --> 00:44:49.720
So you can run through it.

00:44:49.720 --> 00:44:52.660
You can say, does this
trigger exist?

00:44:52.660 --> 00:44:53.570
Yes, no.

00:44:53.570 --> 00:44:55.710
If it does, set it up.

00:44:55.710 --> 00:44:56.740
If not, don't set it up.

00:44:56.740 --> 00:44:59.710
Because if I run schedule
trigger again and again, if I

00:44:59.710 --> 00:45:02.700
run schedule trigger three or
four times, I will create

00:45:02.700 --> 00:45:03.540
three or four triggers.

00:45:03.540 --> 00:45:05.130
Because again, you can
attach multiple

00:45:05.130 --> 00:45:08.800
triggers to the same function.

00:45:08.800 --> 00:45:10.840
KALYAN REDDY: So basically, it
would just run the function

00:45:10.840 --> 00:45:11.770
that many times.

00:45:11.770 --> 00:45:12.330
IKAI LAIN: Exactly.

00:45:12.330 --> 00:45:16.150
So a trigger is kind of like me
creating a memo that says,

00:45:16.150 --> 00:45:16.900
do this job.

00:45:16.900 --> 00:45:18.690
And you create five copies
of the memo and

00:45:18.690 --> 00:45:19.520
I give it to Eric.

00:45:19.520 --> 00:45:22.430
And if Eric takes things very
literally, he will do the job

00:45:22.430 --> 00:45:24.060
five times.

00:45:24.060 --> 00:45:26.765
Fortunately, Eric will just come
back to me and say, what

00:45:26.765 --> 00:45:27.810
are you doing, man?

00:45:27.810 --> 00:45:28.540
What is this?

00:45:28.540 --> 00:45:29.840
But this is a computer.

00:45:29.840 --> 00:45:32.470
So with a computer you have to
be very, very specific about

00:45:32.470 --> 00:45:33.610
what you want it to do.

00:45:33.610 --> 00:45:36.510
And that's why triggers have
this get unique ID function.

00:45:36.510 --> 00:45:39.875
So that if I give him five
memos, each memo has an ID

00:45:39.875 --> 00:45:43.680
that says, this is ID 1, this
is ID 2, this is ID 3.

00:45:43.680 --> 00:45:45.860
And he knows, oh, these
are different jobs.

00:45:45.860 --> 00:45:47.920
And you can do the same thing
when you're managing triggers,

00:45:47.920 --> 00:45:51.570
that once you know the ID, you
know that they're different,

00:45:51.570 --> 00:45:52.820
unique triggers.

00:45:55.150 --> 00:45:57.230
And that's what I have
for patterns so far.

00:45:57.230 --> 00:45:59.530
There are definitely
many more patterns.

00:45:59.530 --> 00:46:04.600
These three are the ones that
tend to be the most common.

00:46:04.600 --> 00:46:08.000
So I just like to talk
about these a lot.

00:46:08.000 --> 00:46:09.740
And that's what I have
for you guys today.

00:46:09.740 --> 00:46:13.010
If you guys have any more ideas
for shows you'd want to

00:46:13.010 --> 00:46:15.490
see, do let us know.

00:46:15.490 --> 00:46:17.690
We have more shows happening
this week and

00:46:17.690 --> 00:46:18.630
next week as well.

00:46:18.630 --> 00:46:21.910
So again, my email address
is Ikai@google.com.

00:46:21.910 --> 00:46:24.850
Or Kalyan's is gkal@google.com.

00:46:24.850 --> 00:46:25.680
You can email him.

00:46:25.680 --> 00:46:29.080
It's appeared in this
demo multiple times.

00:46:29.080 --> 00:46:31.860
So do you have any
questions so far?

00:46:31.860 --> 00:46:35.240
KALYAN REDDY: No, I think
triggers are a great way, for

00:46:35.240 --> 00:46:38.140
example, to get around some
things like making a long

00:46:38.140 --> 00:46:39.400
running job.

00:46:39.400 --> 00:46:41.070
IKAI LAIN: Great, and
now you're going to

00:46:41.070 --> 00:46:41.800
use them every day.

00:46:41.800 --> 00:46:42.720
KALYAN REDDY: All the time.

00:46:42.720 --> 00:46:44.110
IKAI LAIN: All the time.

00:46:44.110 --> 00:46:45.620
KALYAN REDDY: I'm going to set
up a trigger to email myself

00:46:45.620 --> 00:46:47.710
and remind myself
how cool I am.

00:46:47.710 --> 00:46:48.120
IKAI LAIN: All right.

00:46:48.120 --> 00:46:51.270
So when we started this show, no
one was asking questions on

00:46:51.270 --> 00:46:51.960
Google Moderator.

00:46:51.960 --> 00:46:53.320
So let's go ahead.

00:46:53.320 --> 00:46:55.020
Apparently, the status
of this has changed.

00:46:55.020 --> 00:46:56.850
So we're going to go a little
bit over the time

00:46:56.850 --> 00:46:57.700
limit for the show.

00:46:57.700 --> 00:47:00.720
Originally, we were set up
to go for 45 minutes.

00:47:00.720 --> 00:47:04.110
But let's see what questions
people have.

00:47:04.110 --> 00:47:06.670
I'm always nervous about
live questions.

00:47:06.670 --> 00:47:09.576
Mostly because people ask
something, I don't know

00:47:09.576 --> 00:47:10.826
how to answer it.

00:47:16.350 --> 00:47:18.520
I'm not going to click play,
because that's going to cause

00:47:18.520 --> 00:47:19.770
some crazy feedback.

00:47:22.130 --> 00:47:23.490
"I'd like a trigger
for onClose.

00:47:23.490 --> 00:47:25.250
Given the three triggers
available, is there a way to

00:47:25.250 --> 00:47:29.090
trick one into being
in onClose?" Maybe.

00:47:34.080 --> 00:47:36.850
I'm not sure about
this, actually.

00:47:36.850 --> 00:47:38.080
KALYAN REDDY: I don't think it
would work in the same way,

00:47:38.080 --> 00:47:44.050
because the containing
spreadsheet is no longer open.

00:47:44.050 --> 00:47:45.300
IKAI LAIN: Right.

00:47:48.220 --> 00:47:49.990
I was recently thinking about
something with onEdit.

00:47:49.990 --> 00:47:53.700
When edit stopped for more than
a certain amount of time,

00:47:53.700 --> 00:47:55.840
then maybe someone has closed
your spreadsheet.

00:47:55.840 --> 00:47:57.130
But that's not really good.

00:47:57.130 --> 00:48:00.310
KALYAN REDDY: You could
do something like--

00:48:00.310 --> 00:48:01.210
yeah.

00:48:01.210 --> 00:48:03.990
IKAI LAIN: I don't know.

00:48:03.990 --> 00:48:06.370
I don't think there's a good
way of doing this.

00:48:06.370 --> 00:48:07.910
But definitely put in
a feature request.

00:48:07.910 --> 00:48:10.420
And we'll figure out why
there is or isn't a way

00:48:10.420 --> 00:48:11.080
of doing this now.

00:48:11.080 --> 00:48:13.300
I remember hearing something
about why there wasn't an

00:48:13.300 --> 00:48:14.550
onUninstall.

00:48:16.220 --> 00:48:18.630
But do open a feature request.

00:48:18.630 --> 00:48:19.580
And we'll check this one out.

00:48:19.580 --> 00:48:21.310
KALYAN REDDY: And a close
approximation has set up a

00:48:21.310 --> 00:48:24.020
time based trigger that will go
back and clean up all the

00:48:24.020 --> 00:48:25.130
tasks, like whatever
you want to do.

00:48:25.130 --> 00:48:27.090
Maybe you want to clean up some
of the fields, or format

00:48:27.090 --> 00:48:28.390
something differently.

00:48:28.390 --> 00:48:29.540
You can do it on
a time trigger.

00:48:29.540 --> 00:48:31.470
Just go back and do
that same thing.

00:48:31.470 --> 00:48:33.570
IKAI LAIN: Right, right.

00:48:33.570 --> 00:48:35.710
The next question is "will the
emails created with these

00:48:35.710 --> 00:48:38.370
triggers gets stored in the Sent
folder in Gmail?" If I'm

00:48:38.370 --> 00:48:41.530
running a trigger as myself and
I use Mail App, yes, it

00:48:41.530 --> 00:48:42.870
will be in my Sent folder.

00:48:42.870 --> 00:48:46.640
If it's coming from Kalyan,
and it's executing as him,

00:48:46.640 --> 00:48:49.310
they'll be in his Sent folder.

00:48:49.310 --> 00:48:53.170
And the third question is, "I
just want to create social

00:48:53.170 --> 00:48:55.980
site." Well, that's
good for you.

00:48:55.980 --> 00:48:59.990
And I wish you luck
in your endeavors.

00:48:59.990 --> 00:49:01.980
All right.

00:49:01.980 --> 00:49:03.420
So I think that's it for now.

00:49:03.420 --> 00:49:05.430
If you have any more questions,
we're going to wrap

00:49:05.430 --> 00:49:05.980
this show up.

00:49:05.980 --> 00:49:07.820
But we're doing office
hours this Thursday.

00:49:07.820 --> 00:49:10.300
If you're watching the show
live this Thursday--

00:49:10.300 --> 00:49:12.790
and we do them every Thursday
or most Thursdays--

00:49:12.790 --> 00:49:15.740
just go to
developers.google.com/live and

00:49:15.740 --> 00:49:17.460
look for Apps Script
Office hours.

00:49:17.460 --> 00:49:19.120
We do them almost every week.

00:49:19.120 --> 00:49:21.290
So check us out and join us.

00:49:21.290 --> 00:49:24.260
KALYAN REDDY: And you can
always go to our Stack

00:49:24.260 --> 00:49:26.140
Overflow posted against
our tag.

00:49:26.140 --> 00:49:27.380
We are pretty active there.

00:49:27.380 --> 00:49:30.420
And also the issue tracker if
you come up with any issues.

00:49:30.420 --> 00:49:31.570
IKAI LAIN: That's right.

00:49:31.570 --> 00:49:34.980
All right, well, I think
that's it for today.

00:49:34.980 --> 00:49:36.100
Thank you guys very much.

00:49:36.100 --> 00:49:37.250
And we'll see you
guys next time.

00:49:37.250 --> 00:49:38.500
KALYAN REDDY: Thank you.

