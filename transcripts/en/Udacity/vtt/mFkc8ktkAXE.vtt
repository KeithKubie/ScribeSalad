WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
[D. Evans] The Python grammar is much stricter than the English grammar

00:00:04.000 --> 00:00:06.000
or most natural language grammars.

00:00:06.000 --> 00:00:10.000
In English if we say something non-grammatical, like "Me go to the store,"

00:00:10.000 --> 00:00:12.000
another English speaker might laugh at us,

00:00:12.000 --> 00:00:14.000
but they can probably understand what we meant.

00:00:14.000 --> 00:00:17.000
In Python the code must match the language grammar exactly.

00:00:17.000 --> 00:00:21.000
Here we saw when we tried to do a value at 2 + without the extra operand

00:00:21.000 --> 00:00:23.000
we got a syntax error. That means it's not grammatical.

00:00:23.000 --> 00:00:26.000
If we said 2 + to someone in English,

00:00:26.000 --> 00:00:29.000
they might be able to figure out that that means the same thing as 2.

00:00:29.000 --> 00:00:33.000
In Python it needs to match the grammar exactly.

00:00:33.000 --> 00:00:36.000
Now we're going to look at the Python grammar for arithmetic expressions.

00:00:36.000 --> 00:00:38.000
We won't see the entire Python grammar here

00:00:38.000 --> 00:00:42.000
but enough to get an idea of why the expressions we've seen were valid

00:00:42.000 --> 00:00:44.000
and why the 2 + is not.

00:00:44.000 --> 00:00:47.000
First of all, an expression is something that has a value.

00:00:47.000 --> 00:00:51.000
We're going to start our grammar with a non-terminal expression,

00:00:51.000 --> 00:00:56.000
and we can make an expression by combining 2 expressions with an operator.

00:00:56.000 --> 00:00:59.000
This is sort of like the sentence rule we had for English

00:00:59.000 --> 00:01:03.000
where we could make a sentence by combining a subject, a verb, and an object.

00:01:03.000 --> 00:01:06.000
This is a lot more interesting, though, because we have expression

00:01:06.000 --> 00:01:09.000
both on the left side and the right side.

00:01:09.000 --> 00:01:11.000
This looks kind of circular.

00:01:11.000 --> 00:01:15.000
Because we have other rules, it's not completely circular.

00:01:15.000 --> 00:01:17.000
This is what's called a recursive definition.

00:01:17.000 --> 00:01:22.000
We'll talk a lot more about that in a later class--in Unit 6 we will.

00:01:22.000 --> 00:01:26.000
But for now we're going to see how we can use that to make the Python grammar.

00:01:26.000 --> 00:01:30.000
And to make a good recursive definition we need at least 2 rules.

00:01:30.000 --> 00:01:36.000
We need 1 where we can keep going using the same thing on the right side as the left side,

00:01:36.000 --> 00:01:38.000
and we need 1 where we can stop.

00:01:38.000 --> 00:01:42.000
Another thing that an expression can be is a number.

00:01:42.000 --> 00:01:45.000
This is why we can make expressions like 1 + 1.

00:01:45.000 --> 00:01:48.000
This expression will become a number, which will become 1,

00:01:48.000 --> 00:01:52.000
the operator will become +, and the other expression will become 1.

00:01:52.000 --> 00:01:55.000
So let's write a few more rules to see how that works.

00:01:55.000 --> 00:01:59.000
We can replace the operator with +.

00:01:59.000 --> 00:02:03.000
We can also replace operator with &lt;i&gt;.&lt;/i&gt;

00:02:03.000 --> 00:02:06.000
There are several more operators in Python. Those are enough for now.

00:02:06.000 --> 00:02:08.000
We just need those 2.

00:02:08.000 --> 00:02:10.000
We can also make numbers.

00:02:10.000 --> 00:02:14.000
The complete rule for making numbers is sort of complicated,

00:02:14.000 --> 00:02:18.000
but let's assume we know what numbers are.

00:02:18.000 --> 00:02:21.000
We can make numbers any number of digits.

00:02:21.000 --> 00:02:25.000
There are different rules to make all those numbers, but we know what they are.

00:02:25.000 --> 00:02:28.000
This looks like a very simple grammar.

00:02:28.000 --> 00:02:31.000
It's quite small, but it can express infinitely many things.

00:02:31.000 --> 00:02:35.000
And the reason for that is because we have expression on both sides here.

00:02:35.000 --> 00:02:39.000
We can replace an expression with a bigger expression and keep going.

00:02:39.000 --> 00:02:41.000
Here's an example of derivation.

00:02:41.000 --> 00:02:45.000
We can start with expression, we can follow the rule,

00:02:45.000 --> 00:02:48.000
replacing that with expression, operator, expression,

00:02:48.000 --> 00:02:50.000
and then we can follow the rules again.

00:02:50.000 --> 00:02:54.000
We can replace the first expression with a number

00:02:54.000 --> 00:02:56.000
and replace that number with the actual number 1.

00:02:56.000 --> 00:02:59.000
Notice the actual numbers are terminals,

00:02:59.000 --> 00:03:02.000
so once we get to the number 1, we're done.

00:03:02.000 --> 00:03:04.000
There's no more replacements to do.

00:03:04.000 --> 00:03:08.000
We can replace the operator with +. Plus is also a terminal.

00:03:08.000 --> 00:03:12.000
And we can replace this expression with a number

00:03:12.000 --> 00:03:15.000
and replace that number with the number 1.

00:03:15.000 --> 00:03:19.000
So this is how we got the expression 1 + 1 in the Python grammar,

00:03:19.000 --> 00:03:21.000
and that's why that was valid.

00:03:21.000 --> 00:03:23.000
We can do a lot more than this, though.

00:03:23.000 --> 00:03:25.000
Instead of replacing this expression with a number

00:03:25.000 --> 00:03:29.000
we could replace this expression with another expression, operator, expression.

00:03:29.000 --> 00:03:32.000
So we're going to use the first rule, replacing expression

00:03:32.000 --> 00:03:34.000
with expression, operator, expression here.

00:03:34.000 --> 00:03:36.000
I'm going to start abbreviating,

00:03:36.000 --> 00:03:39.000
so expr is an abbreviation for expression,

00:03:39.000 --> 00:03:43.000
op for operator, and expr, but we're just using this rule.

00:03:43.000 --> 00:03:46.000
Now we could do the same thing again, replacing this expression with a number

00:03:46.000 --> 00:03:51.000
and replacing that number, let's say, with the number 2.

00:03:51.000 --> 00:03:55.000
We could replace this operator with the multiplication operator,

00:03:55.000 --> 00:03:59.000
and we could replace this expression with a number,

00:03:59.000 --> 00:04:03.000
or we could replace it with an expression, operator, expression--let's do that--

00:04:03.000 --> 00:04:06.000
and build increasingly complicated expressions this way.

00:04:06.000 --> 00:04:08.000
We can keep doing this.

00:04:08.000 --> 00:04:13.000
We're not done until everything is a terminal, so let's say--we skipped a few steps here--

00:04:13.000 --> 00:04:16.000
but this could be 3 + 3.

00:04:16.000 --> 00:04:21.000
This is how we can build up complicated expressions from very simple rules.

00:04:21.000 --> 00:04:24.000
I'm going to add 1 more rule to our Python grammar.

00:04:24.000 --> 00:04:28.000
That will be enough to produce all the expressions that we've used so far.

00:04:28.000 --> 00:04:33.000
The rule that we need is for parentheses, and this is actually quite a simple rule.

00:04:33.000 --> 00:04:38.000
It just says we can make an expression by taking any expression we have

00:04:38.000 --> 00:04:40.000
and putting parentheses around it.

00:04:40.000 --> 00:04:43.000
This is a pretty small grammar, but this is actually a grammar

00:04:43.000 --> 00:04:48.000
that's powerful enough to produce all the Python expressions that we've seen so far

00:04:48.000 --> 00:04:51.000
as well as infinitely many different expressions.

00:04:51.000 --> 00:04:53.000
We're not going to cover the entire Python grammar this way,

00:04:53.000 --> 00:04:57.000
but this should give you an idea of the power of writing a grammar this way.

00:04:57.000 --> 00:05:02.000
We're going to have a quiz to see that everyone understands the grammar.

00:05:02.000 --> 00:05:05.000
The question is, Which of the following are valid Python expressions

00:05:05.000 --> 00:05:10.000
that can be produced starting from expression using the grammar rules?

00:05:10.000 --> 00:05:14.000
Here are the choices. There are 5 possibilities.

00:05:14.000 --> 00:05:18.000
Check all the ones that are valid expressions that can be produced from this grammar

00:05:18.000 --> 00:05:20.000
starting from expression.

00:05:20.000 --> 00:05:23.000
You can try your answers in the Python interpreter if you want,

00:05:23.000 --> 99:59:59.000
but first see if you can figure out for yourself which ones are valid.

