WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Now we're going to talk about the question why assertions?

00:00:03.000 --> 00:00:05.000
What are assertions really buying us?

00:00:05.000 --> 00:00:08.000
This boils down to three or four basic reasons.

00:00:08.000 --> 00:00:11.000
First, assertions make code self-checking.

00:00:11.000 --> 00:00:16.000
That is, they make the code that write fail proactively when somethings wrong,

00:00:16.000 --> 00:00:18.000
and this can lead to more effective testing.

00:00:18.000 --> 00:00:23.000
Second, assertions make code fail early at a location that is closer to the actual bug,

00:00:23.000 --> 00:00:26.000
since this is more relevant to debugging than to testing,

00:00:26.000 --> 00:00:29.000
but it's generally the case that debugging is a different backwards problem

00:00:29.000 --> 00:00:32.000
where you're reasoning in a backwards sort of way 

00:00:32.000 --> 00:00:35.000
about the behavior of the software that you wrote,

00:00:35.000 --> 00:00:38.000
and the fewer steps there are in one of these backwards chains, the better.

00:00:38.000 --> 00:00:40.000
Assertions really can help with that.

00:00:40.000 --> 00:00:43.000
Third, assertions can help us assign blame.

00:00:43.000 --> 00:00:47.000
It's often the case that assertions live at interfaces between different modules,

00:00:47.000 --> 00:00:51.000
and in many cases it's possible to look at where the bad values came from

00:00:51.000 --> 00:00:56.000
that lead to the assertion failure and use that information to assign blame

00:00:56.000 --> 00:00:58.000
to one of the modules involved in the call or to the other one.

00:00:58.000 --> 00:01:03.000
Real software testing exercises often lead to different finger-pointing problems,

00:01:03.000 --> 00:01:06.000
and any tools that we have that allow us to accurately assign blame

00:01:06.000 --> 00:01:09.000
to one or the other of our software modules can be valuable.

00:01:09.000 --> 00:01:11.000
The final reason we like assertions

00:01:11.000 --> 00:01:15.000
is because they allow us to create executable documentation

00:01:15.000 --> 00:01:18.000
about assumptions we've made, about preconditions in our code,

00:01:18.000 --> 00:01:21.000
and so by writing down executable checks on our preconditions,

00:01:21.000 --> 00:01:24.000
we not only get to check these preconditions when the code runs,

00:01:24.000 --> 00:01:26.000
but also we're documenting for other developers

00:01:26.000 --> 00:01:30.000
the things that need to be true for that code to execute correctly.

00:01:30.000 --> 00:01:34.000
Post conditions are things that are supposed to be true after our code runs.

00:01:34.000 --> 00:01:37.000
Again, in addition to creating executable checks for these,

00:01:37.000 --> 00:01:40.000
we're also telling other developers what we think should be true.

00:01:40.000 --> 00:01:43.000
This should allow other people to rely on this postconditions.

00:01:43.000 --> 00:01:46.000
Invariants are closely related to preconditions and postconditions.

00:01:46.000 --> 00:01:48.000
These are things that need to be true, for example,

00:01:48.000 --> 00:01:51.000
at every iteration of a loop.

