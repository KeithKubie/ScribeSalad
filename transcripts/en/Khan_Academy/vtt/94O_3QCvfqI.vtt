WEBVTT
Kind: captions
Language: en

00:00:00.660 --> 00:00:04.970
In the last video I challenged
you to write multiple Fibonacci

00:00:04.970 --> 00:00:07.640
functions, ones that
could calculate the nth

00:00:07.640 --> 00:00:10.170
term of the Fibonacci
sequence either iteratively

00:00:10.170 --> 00:00:11.450
or recursively.

00:00:11.450 --> 00:00:13.431
And I'll do the first
shot right over here.

00:00:13.431 --> 00:00:15.180
And I'll show you over
the next few videos

00:00:15.180 --> 00:00:17.890
that there's really multiple
ways of even doing this just

00:00:17.890 --> 00:00:18.940
iteratively.

00:00:18.940 --> 00:00:22.970
So let's define our
function, Fibonacci.

00:00:22.970 --> 00:00:26.420
And it has a
parameter n, so that

00:00:26.420 --> 00:00:30.960
is what we're going to
pass to the function.

00:00:30.960 --> 00:00:33.870
And we know that by
definition, the first two

00:00:33.870 --> 00:00:37.290
terms of the Fibonacci
sequence are 0 and 1.

00:00:37.290 --> 00:00:40.226
So let's make a
list for ourselves.

00:00:40.226 --> 00:00:41.350
And so this is interesting.

00:00:41.350 --> 00:00:42.933
So this is the first
time we're really

00:00:42.933 --> 00:00:45.140
going to do some
of the actual list

00:00:45.140 --> 00:00:47.320
manipulation in this video.

00:00:47.320 --> 00:00:51.540
So the terms here-- the 0th term
of the Fibonacci sequence is 0.

00:00:51.540 --> 00:00:52.930
And the first 1 is 1.

00:00:52.930 --> 00:00:54.600
This is by definition.

00:00:54.600 --> 00:00:57.920
So we're just going to kind of
hard code that in right there.

00:00:57.920 --> 00:01:00.710
And then what we're
going to do is

00:01:00.710 --> 00:01:04.440
if we're then going to
construct this list to all

00:01:04.440 --> 00:01:07.940
of the terms up to and
including the nth term,

00:01:07.940 --> 00:01:10.214
and then return the nth
term from that list.

00:01:10.214 --> 00:01:12.130
And the reason why I'm
going to do it this way

00:01:12.130 --> 00:01:15.600
is it's able to save up kind of
a memory of all the Fibonacci

00:01:15.600 --> 00:01:17.350
numbers, which is
helpful for computing

00:01:17.350 --> 00:01:19.761
each incremental
Fibonacci number.

00:01:19.761 --> 00:01:20.760
So let's do it this way.

00:01:20.760 --> 00:01:21.860
I'm going to use a while loop.

00:01:21.860 --> 00:01:23.290
You could do it
using a for loop,

00:01:23.290 --> 00:01:25.581
but for me a while loop feels
a little bit more natural

00:01:25.581 --> 00:01:26.130
for this.

00:01:26.130 --> 00:01:28.430
And actually before I even
define the while loop,

00:01:28.430 --> 00:01:33.270
I'm going to set my
variable of iteration.

00:01:33.270 --> 00:01:35.570
I'm going to set
that equal to 0,

00:01:35.570 --> 00:01:38.120
and you're going to see
how this works in a second.

00:01:38.120 --> 00:01:44.290
So I'm going to say while i
is less than or equal to n.

00:01:44.290 --> 00:01:46.880
So i is going to start at
0, and then go up to n.

00:01:46.880 --> 00:01:49.401
And actually frankly,
i shouldn't start at 0

00:01:49.401 --> 00:01:51.900
because we already have the 0th
term here and the first term

00:01:51.900 --> 00:01:52.400
here.

00:01:52.400 --> 00:01:55.090
And we want to construct
the second, third, fourth,

00:01:55.090 --> 00:01:56.530
all the way to the nth term.

00:01:56.530 --> 00:01:59.000
So actually, let's start i at 2.

00:01:59.000 --> 00:02:01.280
So we already have the 0th
term and the first term.

00:02:01.280 --> 00:02:03.080
We then want to construct
the second term.

00:02:03.080 --> 00:02:04.996
So that's why we're going
to start i equals 2,

00:02:04.996 --> 00:02:07.720
all the way up to and
including the nth term.

00:02:07.720 --> 00:02:09.990
So that's why we say
less than or equal to n.

00:02:09.990 --> 00:02:13.770
We're going to keep adding
terms to this sequence.

00:02:13.770 --> 00:02:17.180
So while i is less
than or equal to n,

00:02:17.180 --> 00:02:22.000
I'm going to take this list
right here, and to the end

00:02:22.000 --> 00:02:24.630
of that list-- and this
is a built-in function

00:02:24.630 --> 00:02:28.150
for any list in Python,
and you're learning it now.

00:02:28.150 --> 00:02:30.050
And you can look it
up, and actually my IDE

00:02:30.050 --> 00:02:34.040
tells me how to use it-- I can
add to the end of that list

00:02:34.040 --> 00:02:35.210
another term.

00:02:35.210 --> 00:02:37.770
And that next term I'm going
to add to the end of the list

00:02:37.770 --> 00:02:40.590
is going to be the sum of
the previous two terms.

00:02:40.590 --> 00:02:46.140
So it's going to
be, terms i minus 1.

00:02:46.140 --> 00:02:48.070
So that's the previous term.

00:02:48.070 --> 00:02:51.520
Terms i minus 1 literally
refers to the previous term.

00:02:51.520 --> 00:02:58.100
i minus 1 plus terms i minus 2.

00:02:58.100 --> 00:03:01.620
So this is essentially going
to construct this Fibonacci

00:03:01.620 --> 00:03:04.360
sequence and build
it in this list.

00:03:04.360 --> 00:03:06.680
And then we're going
to increment i.

00:03:06.680 --> 00:03:08.610
i is equal to i plus 1.

00:03:08.610 --> 00:03:12.130
If we never increment
i, then this loop

00:03:12.130 --> 00:03:14.374
will just keep going
on forever and ever.

00:03:14.374 --> 00:03:16.040
But this way it's
going to keep going up

00:03:16.040 --> 00:03:17.499
and up and up until
at some point i

00:03:17.499 --> 00:03:19.290
is not going to be less
than or equal to n,

00:03:19.290 --> 00:03:21.370
and then we're going to
break out of the loop.

00:03:21.370 --> 00:03:25.410
And then when we break
out of the loop--

00:03:25.410 --> 00:03:29.080
let me do it right over--
when we break out of the loop,

00:03:29.080 --> 00:03:34.610
we can then return the nth
Fibonacci term in the sequence.

00:03:34.610 --> 00:03:38.650
So we're going to return terms.

00:03:38.650 --> 00:03:42.770
We're going to return
the nth term in terms.

00:03:42.770 --> 00:03:43.940
So let's see if this works.

00:03:43.940 --> 00:03:46.030
Let's see, does this make sense?

00:03:46.030 --> 00:03:51.540
So I'm going to go all the
way up to the nth term,

00:03:51.540 --> 00:03:56.900
and actually the nth term
here-- yes, this should work.

00:03:56.900 --> 00:03:59.330
Because if this
was Fibonacci of 0,

00:03:59.330 --> 00:04:03.110
I want to return terms of 0,
which is this term right here.

00:04:03.110 --> 00:04:05.560
If it's Fibonacci
of 1, I would want

00:04:05.560 --> 00:04:07.380
to return this term
right over here.

00:04:07.380 --> 00:04:09.880
So the first term in terms.

00:04:09.880 --> 00:04:11.310
Not the 0th, but the first.

00:04:11.310 --> 00:04:13.170
So this feels like
it should work.

00:04:13.170 --> 00:04:14.630
And actually even
before I run it,

00:04:14.630 --> 00:04:16.019
I want you to make
sure you understand

00:04:16.019 --> 00:04:17.410
what I've done
here with the list.

00:04:17.410 --> 00:04:19.701
So I'm going to show you a
little bit an example of how

00:04:19.701 --> 00:04:20.779
these lists work.

00:04:20.779 --> 00:04:27.370
So if I define a list as,
I don't know, 1 comma 2.

00:04:27.370 --> 00:04:28.610
That's my list.

00:04:28.610 --> 00:04:32.260
And if I then say-- it's
doing something weird.

00:04:32.260 --> 00:04:37.030
So I'm going to define
my list as 1 comma 2.

00:04:37.030 --> 00:04:38.880
So if I type a, it's 1 comma 2.

00:04:38.880 --> 00:04:42.290
If I append to a, a dot append.

00:04:42.290 --> 00:04:47.160
So if I append a, let's
say I append a 7 to it.

00:04:47.160 --> 00:04:50.760
Then if I look at a, I
have a 7 at the end of it.

00:04:50.760 --> 00:04:53.990
If I want to refer to
the elements here, a of 0

00:04:53.990 --> 00:04:55.440
should be the first element.

00:04:55.440 --> 00:04:58.804
a, the second element, I just
put the 2 in the brackets

00:04:58.804 --> 00:04:59.970
and it should give me the 7.

00:04:59.970 --> 00:05:02.580
So that's exactly what
I'm doing over here.

00:05:02.580 --> 00:05:04.850
I'm saying terms of i minus 1.

00:05:04.850 --> 00:05:06.992
So we're going to add
a new term over here.

00:05:06.992 --> 00:05:08.450
So this first time
it goes to loop,

00:05:08.450 --> 00:05:09.700
we're going to add a new term.

00:05:09.700 --> 00:05:14.760
And it's going to be the
sum of terms of i minus 1.

00:05:14.760 --> 00:05:19.020
So in that first loop,
i is 2. i minus 1 is 1.

00:05:19.020 --> 00:05:21.910
So terms of 1 plus terms of 0.

00:05:21.910 --> 00:05:25.080
So it's going to be terms of
1 which is 1, plus terms of 0.

00:05:25.080 --> 00:05:27.350
And then it keeps doing
that all the way until we

00:05:27.350 --> 00:05:29.060
construct the nth term.

00:05:29.060 --> 00:05:31.770
Well enough talk, and I'll step
through it a little bit clearer

00:05:31.770 --> 00:05:33.660
in the next video with
a particular example.

00:05:33.660 --> 00:05:36.960
But let's just see if what
we wrote actually works.

00:05:36.960 --> 00:05:39.800
So let me run it.

00:05:39.800 --> 00:05:40.400
All right.

00:05:40.400 --> 00:05:43.162
And let's see if we get the
proper results Fibonacci--

00:05:43.162 --> 00:05:45.620
well, let's just start from
the beginning-- Fibonacci of 0.

00:05:45.620 --> 00:05:47.200
Well, that looks good.

00:05:47.200 --> 00:05:48.690
Let's try Fibonacci of 1.

00:05:48.690 --> 00:05:49.850
That looks good.

00:05:49.850 --> 00:05:50.800
Fibonacci of 2.

00:05:50.800 --> 00:05:52.230
This should also be 1.

00:05:52.230 --> 00:05:53.620
That looks good.

00:05:53.620 --> 00:05:55.721
Fibonacci of 3--
this should be 2 now,

00:05:55.721 --> 00:05:57.470
because we're seeking
the sum of 1 plus 1.

00:05:57.470 --> 00:05:58.710
That works.

00:05:58.710 --> 00:06:00.310
Let's try the Fibonacci of 10.

00:06:00.310 --> 00:06:01.790
Hey, that looks pretty good.

00:06:01.790 --> 00:06:03.720
Let's try the Fibonacci
of something huge.

00:06:03.720 --> 00:06:05.140
Fibonacci of 100.

00:06:05.140 --> 00:06:11.180
Well, this gets a little bit--
I won't go into the-- well,

00:06:11.180 --> 00:06:13.340
this is a very large
number, and I'm not

00:06:13.340 --> 00:06:14.827
going to go into
the whole floating

00:06:14.827 --> 00:06:16.910
kind of the long numbers
and the super large ones.

00:06:16.910 --> 00:06:18.993
But let's try something a
little bit smaller here.

00:06:18.993 --> 00:06:20.500
So let's try Fibonacci of 20.

00:06:20.500 --> 00:06:23.772
So it looks like it works, and
you can verify it for yourself.

00:06:23.772 --> 00:06:25.480
So this is just one
implementation of it,

00:06:25.480 --> 00:06:27.021
and in the next few
videos, I'm going

00:06:27.021 --> 00:06:28.536
to try another way
to implement it.

00:06:28.536 --> 00:06:29.910
Maybe I'll do it
with a for loop,

00:06:29.910 --> 00:06:32.009
or we can also do
it recursively.

