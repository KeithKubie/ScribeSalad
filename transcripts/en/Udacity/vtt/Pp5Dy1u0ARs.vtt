WEBVTT
Kind: captions
Language: en

00:00:00.150 --> 00:00:03.170
Now let's discuss how we will design

00:00:03.170 --> 00:00:06.670
a server that requires some persistent support using

00:00:06.670 --> 00:00:09.280
this idea of a persistent virtual memory.

00:00:09.280 --> 00:00:11.680
So this is the virtual address space of

00:00:11.680 --> 00:00:16.880
the server. And note that, not the entire address space of the server needs to

00:00:16.880 --> 00:00:19.810
be persistent because as the developer, the

00:00:19.810 --> 00:00:25.500
subsystem designer knows what data structures in his

00:00:25.500 --> 00:00:29.090
design need persistence. So for instance if you

00:00:29.090 --> 00:00:32.330
take a concrete example like a file server design.

00:00:32.330 --> 00:00:35.170
Then the inode data structures, which may be

00:00:35.170 --> 00:00:38.070
living on the disk are the things that the

00:00:38.070 --> 00:00:40.470
file system designer would want to make sure

00:00:40.470 --> 00:00:42.720
that they're persistent. So if an I node data

00:00:42.720 --> 00:00:46.900
structure, let's say M1 is mapped into a portion

00:00:46.900 --> 00:00:50.930
of the virtual address space, then it is manipulation

00:00:50.930 --> 00:00:53.780
of M1 in particular, updates to M1 that

00:00:53.780 --> 00:00:56.840
needs to be reflected in the backing store.

00:00:56.840 --> 00:01:00.400
These data structures, M1, M2 and so on,

00:01:00.400 --> 00:01:04.060
are data structures, which are in memory versions

00:01:04.060 --> 00:01:06.970
of persistent data structures that live on the

00:01:06.970 --> 00:01:10.330
disk. We will call the collection of data

00:01:10.330 --> 00:01:13.210
structures that need to be persistent on the

00:01:13.210 --> 00:01:16.860
disk as a data segment. And a application

00:01:16.860 --> 00:01:20.750
may choose to use multiple data segments. That

00:01:20.750 --> 00:01:23.650
corresponds to persistent objects that it needs to

00:01:23.650 --> 00:01:27.410
manipulate in the course of its execution. So

00:01:27.410 --> 00:01:30.650
these data structures M1, M2 and so on, are

00:01:30.650 --> 00:01:33.940
the persistent metadata that have an on disk

00:01:33.940 --> 00:01:37.820
copy, as well as an in-memory version. Whereas all

00:01:37.820 --> 00:01:39.900
the other stuff in the virtual address space

00:01:39.900 --> 00:01:42.820
of the server are normal code and data structures.

00:01:42.820 --> 00:01:44.900
So in terms of flexibility for a server

00:01:44.900 --> 00:01:48.700
design, it would make sense to allow an application

00:01:48.700 --> 00:01:54.740
to create as many data segments as it needs in order to support what it needs to

00:01:54.740 --> 00:02:01.440
do in it's design. So what we need to do is to allow an application to map

00:02:01.440 --> 00:02:05.010
an external data segment. By external data segment what

00:02:05.010 --> 00:02:07.910
we mean is that there's a data segment that

00:02:07.910 --> 00:02:10.139
is external to the virtual memory living on

00:02:10.139 --> 00:02:12.880
the persistent medium, in this case a disk,

00:02:12.880 --> 00:02:16.560
and the application is going to map this external

00:02:16.560 --> 00:02:19.810
data segment to selected portions of its address

00:02:19.810 --> 00:02:23.420
space. What we will help the application do

00:02:23.420 --> 00:02:27.120
is to explicitly map the regions of the

00:02:27.120 --> 00:02:33.340
virtual address space to data segments that live on the disk. And as I said to

00:02:33.340 --> 00:02:36.790
allow flexibility, the application designer may choose

00:02:36.790 --> 00:02:39.450
to have multiple external data segments and

00:02:39.450 --> 00:02:41.990
map these different data segments to different

00:02:41.990 --> 00:02:44.330
portions of the virtual address space. Or in

00:02:44.330 --> 00:02:47.710
other words, the application completely manages their

00:02:47.710 --> 00:02:51.220
own persistence needs, and all that we

00:02:51.220 --> 00:02:54.600
are providing is the ability to specify

00:02:54.600 --> 00:02:58.720
external data segments to back persistent data structures

00:02:58.720 --> 00:03:02.160
that we're going to manipulate in memory. So

00:03:02.160 --> 00:03:04.470
what the application would do is, at

00:03:04.470 --> 00:03:08.800
startup, it'll map these external data segments

00:03:08.800 --> 00:03:13.320
to selected portions of its virtual address space

00:03:13.320 --> 00:03:15.710
in order to create the in-memory versions

00:03:15.710 --> 00:03:18.020
of the data structures it needs to manipulate

00:03:18.020 --> 00:03:20.040
during the course of its execution. And

00:03:20.040 --> 00:03:24.490
the mapping between this virtual memory space and

00:03:24.490 --> 00:03:26.960
the external data segment is also one to

00:03:26.960 --> 00:03:30.610
one. That is there is no overlap of external

00:03:30.610 --> 00:03:33.840
data segments in terms of occupancy within the

00:03:33.840 --> 00:03:37.790
virtual address space and this makes the design of

00:03:37.790 --> 00:03:41.100
a reliable virtual memory, that much more simpler.

00:03:41.100 --> 00:03:43.240
So simplicity is the key in the design so

00:03:43.240 --> 00:03:46.200
that it is easy to use, flexible, and

00:03:46.200 --> 00:03:49.750
performing. And those are the goals that the authors

00:03:49.750 --> 00:03:52.750
of reliable virtual memory set out to accomplish.

00:03:52.750 --> 00:03:54.740
And just as mapping is done at startup at

00:03:54.740 --> 00:03:57.560
any point of time, the application can choose

00:03:57.560 --> 00:04:01.190
to unmap a portion of the virtual address space

00:04:01.190 --> 00:04:04.850
that is mapped to the external data segments.

00:04:04.850 --> 00:04:07.730
And we will see later on that opportune moments

00:04:07.730 --> 00:04:11.040
for doing this unmapping would be when no

00:04:11.040 --> 00:04:15.030
commits are pending. For these in memory data structures,

00:04:15.030 --> 00:04:19.190
and external representation of those data structures

00:04:19.190 --> 00:04:21.010
in data segments living on the disk.

