WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:02.840
 
the ability of pythons allows you to use

00:00:02.840 --> 00:00:02.850
the ability of pythons allows you to use
 

00:00:02.850 --> 00:00:05.480
the ability of pythons allows you to use
broadcasting operations and more

00:00:05.480 --> 00:00:05.490
broadcasting operations and more
 

00:00:05.490 --> 00:00:07.670
broadcasting operations and more
generally the great flexibility of the

00:00:07.670 --> 00:00:07.680
generally the great flexibility of the
 

00:00:07.680 --> 00:00:10.280
generally the great flexibility of the
Python numpy programming language is I

00:00:10.280 --> 00:00:10.290
Python numpy programming language is I
 

00:00:10.290 --> 00:00:12.410
Python numpy programming language is I
think both our strength as well as a

00:00:12.410 --> 00:00:12.420
think both our strength as well as a
 

00:00:12.420 --> 00:00:14.419
think both our strength as well as a
weakness of the programming language I

00:00:14.419 --> 00:00:14.429
weakness of the programming language I
 

00:00:14.429 --> 00:00:16.700
weakness of the programming language I
think it's a strength because the great

00:00:16.700 --> 00:00:16.710
think it's a strength because the great
 

00:00:16.710 --> 00:00:18.470
think it's a strength because the great
expressivity of the language to create

00:00:18.470 --> 00:00:18.480
expressivity of the language to create
 

00:00:18.480 --> 00:00:20.630
expressivity of the language to create
flexibility of the language lets you get

00:00:20.630 --> 00:00:20.640
flexibility of the language lets you get
 

00:00:20.640 --> 00:00:22.310
flexibility of the language lets you get
a lot done you know with even just a

00:00:22.310 --> 00:00:22.320
a lot done you know with even just a
 

00:00:22.320 --> 00:00:24.740
a lot done you know with even just a
single line of code but there's also a

00:00:24.740 --> 00:00:24.750
single line of code but there's also a
 

00:00:24.750 --> 00:00:27.439
single line of code but there's also a
weakness because with broadcasting and

00:00:27.439 --> 00:00:27.449
weakness because with broadcasting and
 

00:00:27.449 --> 00:00:28.970
weakness because with broadcasting and
this great amount of flexibility

00:00:28.970 --> 00:00:28.980
this great amount of flexibility
 

00:00:28.980 --> 00:00:31.130
this great amount of flexibility
sometimes is possible we can introduce

00:00:31.130 --> 00:00:31.140
sometimes is possible we can introduce
 

00:00:31.140 --> 00:00:33.170
sometimes is possible we can introduce
very subtle bugs a very strange-looking

00:00:33.170 --> 00:00:33.180
very subtle bugs a very strange-looking
 

00:00:33.180 --> 00:00:35.479
very subtle bugs a very strange-looking
bugs if you aren't familiar with all of

00:00:35.479 --> 00:00:35.489
bugs if you aren't familiar with all of
 

00:00:35.489 --> 00:00:37.520
bugs if you aren't familiar with all of
the intricacies of how broadcasting and

00:00:37.520 --> 00:00:37.530
the intricacies of how broadcasting and
 

00:00:37.530 --> 00:00:39.830
the intricacies of how broadcasting and
how features like broadcasting work for

00:00:39.830 --> 00:00:39.840
how features like broadcasting work for
 

00:00:39.840 --> 00:00:42.170
how features like broadcasting work for
example if you take a column vector and

00:00:42.170 --> 00:00:42.180
example if you take a column vector and
 

00:00:42.180 --> 00:00:44.720
example if you take a column vector and
add it to a row vector you might expect

00:00:44.720 --> 00:00:44.730
add it to a row vector you might expect
 

00:00:44.730 --> 00:00:46.700
add it to a row vector you might expect
it to throw up a you know dimension

00:00:46.700 --> 00:00:46.710
it to throw up a you know dimension
 

00:00:46.710 --> 00:00:48.590
it to throw up a you know dimension
mismatch or type error or something

00:00:48.590 --> 00:00:48.600
mismatch or type error or something
 

00:00:48.600 --> 00:00:51.049
mismatch or type error or something
but you might actually get back a matrix

00:00:51.049 --> 00:00:51.059
but you might actually get back a matrix
 

00:00:51.059 --> 00:00:52.970
but you might actually get back a matrix
is the sum of a row vector and a column

00:00:52.970 --> 00:00:52.980
is the sum of a row vector and a column
 

00:00:52.980 --> 00:00:56.660
is the sum of a row vector and a column
vector so there is an internal logic to

00:00:56.660 --> 00:00:56.670
vector so there is an internal logic to
 

00:00:56.670 --> 00:00:58.549
vector so there is an internal logic to
these strange effects of Python but you

00:00:58.549 --> 00:00:58.559
these strange effects of Python but you
 

00:00:58.559 --> 00:01:00.770
these strange effects of Python but you
are familiar with Python now I've seen

00:01:00.770 --> 00:01:00.780
are familiar with Python now I've seen
 

00:01:00.780 --> 00:01:03.410
are familiar with Python now I've seen
some students have very strange very

00:01:03.410 --> 00:01:03.420
some students have very strange very
 

00:01:03.420 --> 00:01:06.440
some students have very strange very
hard to find bugs so what I want to do

00:01:06.440 --> 00:01:06.450
hard to find bugs so what I want to do
 

00:01:06.450 --> 00:01:08.899
hard to find bugs so what I want to do
in this video is share view a couple of

00:01:08.899 --> 00:01:08.909
in this video is share view a couple of
 

00:01:08.909 --> 00:01:10.340
in this video is share view a couple of
tips and tricks that have been very

00:01:10.340 --> 00:01:10.350
tips and tricks that have been very
 

00:01:10.350 --> 00:01:13.250
tips and tricks that have been very
useful for me to eliminate or simplify

00:01:13.250 --> 00:01:13.260
useful for me to eliminate or simplify
 

00:01:13.260 --> 00:01:15.770
useful for me to eliminate or simplify
and eliminate all the strange looking

00:01:15.770 --> 00:01:15.780
and eliminate all the strange looking
 

00:01:15.780 --> 00:01:18.020
and eliminate all the strange looking
both in my own code and I hope that with

00:01:18.020 --> 00:01:18.030
both in my own code and I hope that with
 

00:01:18.030 --> 00:01:20.090
both in my own code and I hope that with
these tips and tricks you also be able

00:01:20.090 --> 00:01:20.100
these tips and tricks you also be able
 

00:01:20.100 --> 00:01:22.700
these tips and tricks you also be able
to much more easily write bug free

00:01:22.700 --> 00:01:22.710
to much more easily write bug free
 

00:01:22.710 --> 00:01:26.570
to much more easily write bug free
Python in my code to illustrate one of

00:01:26.570 --> 00:01:26.580
Python in my code to illustrate one of
 

00:01:26.580 --> 00:01:29.690
Python in my code to illustrate one of
the less intuitive effects of Python

00:01:29.690 --> 00:01:29.700
the less intuitive effects of Python
 

00:01:29.700 --> 00:01:31.700
the less intuitive effects of Python
numpy especially how you construct

00:01:31.700 --> 00:01:31.710
numpy especially how you construct
 

00:01:31.710 --> 00:01:33.980
numpy especially how you construct
vectors in Python numpy let me do a

00:01:33.980 --> 00:01:33.990
vectors in Python numpy let me do a
 

00:01:33.990 --> 00:01:36.830
vectors in Python numpy let me do a
quick demo let's say I set a equals NP

00:01:36.830 --> 00:01:36.840
quick demo let's say I set a equals NP
 

00:01:36.840 --> 00:01:43.130
quick demo let's say I set a equals NP
dot random dot R and n 5 so this creates

00:01:43.130 --> 00:01:43.140
dot random dot R and n 5 so this creates
 

00:01:43.140 --> 00:01:47.120
dot random dot R and n 5 so this creates
a five random Gaussian there vols

00:01:47.120 --> 00:01:47.130
a five random Gaussian there vols
 

00:01:47.130 --> 00:01:50.389
a five random Gaussian there vols
stored in an array a and so let's print

00:01:50.389 --> 00:01:50.399
stored in an array a and so let's print
 

00:01:50.399 --> 00:01:55.999
stored in an array a and so let's print
a and now it turns out that the shape of

00:01:55.999 --> 00:01:56.009
a and now it turns out that the shape of
 

00:01:56.009 --> 00:02:00.880
a and now it turns out that the shape of
a when you do this is this 5 kamar on

00:02:00.880 --> 00:02:00.890
a when you do this is this 5 kamar on
 

00:02:00.890 --> 00:02:04.370
a when you do this is this 5 kamar on
structure and so this is called a rank 1

00:02:04.370 --> 00:02:04.380
structure and so this is called a rank 1
 

00:02:04.380 --> 00:02:07.340
structure and so this is called a rank 1
array in Python and it's neither a row

00:02:07.340 --> 00:02:07.350
array in Python and it's neither a row
 

00:02:07.350 --> 00:02:09.889
array in Python and it's neither a row
vector in nor a column vector and this

00:02:09.889 --> 00:02:09.899
vector in nor a column vector and this
 

00:02:09.899 --> 00:02:11.990
vector in nor a column vector and this
leads it has some 13 Allah teaches

00:02:11.990 --> 00:02:12.000
leads it has some 13 Allah teaches
 

00:02:12.000 --> 00:02:12.839
leads it has some 13 Allah teaches
effects over

00:02:12.839 --> 00:02:12.849
effects over
 

00:02:12.849 --> 00:02:15.899
effects over
I print a transpose it ends up looking

00:02:15.899 --> 00:02:15.909
I print a transpose it ends up looking
 

00:02:15.909 --> 00:02:18.839
I print a transpose it ends up looking
the same as a so a and a transpose and

00:02:18.839 --> 00:02:18.849
the same as a so a and a transpose and
 

00:02:18.849 --> 00:02:20.729
the same as a so a and a transpose and
you're looking the same and if I print

00:02:20.729 --> 00:02:20.739
you're looking the same and if I print
 

00:02:20.739 --> 00:02:23.610
you're looking the same and if I print
the inner product between a and a

00:02:23.610 --> 00:02:23.620
the inner product between a and a
 

00:02:23.620 --> 00:02:26.429
the inner product between a and a
transpose here you might think a times a

00:02:26.429 --> 00:02:26.439
transpose here you might think a times a
 

00:02:26.439 --> 00:02:28.259
transpose here you might think a times a
transpose is maybe the outer product

00:02:28.259 --> 00:02:28.269
transpose is maybe the outer product
 

00:02:28.269 --> 00:02:30.360
transpose is maybe the outer product
should give you a matrix maybe but if I

00:02:30.360 --> 00:02:30.370
should give you a matrix maybe but if I
 

00:02:30.370 --> 00:02:34.259
should give you a matrix maybe but if I
do that use then get back a number so

00:02:34.259 --> 00:02:34.269
do that use then get back a number so
 

00:02:34.269 --> 00:02:36.629
do that use then get back a number so
what I would recommend is that when

00:02:36.629 --> 00:02:36.639
what I would recommend is that when
 

00:02:36.639 --> 00:02:38.849
what I would recommend is that when
you're coding neural networks that you

00:02:38.849 --> 00:02:38.859
you're coding neural networks that you
 

00:02:38.859 --> 00:02:41.520
you're coding neural networks that you
just not use data structures where the

00:02:41.520 --> 00:02:41.530
just not use data structures where the
 

00:02:41.530 --> 00:02:43.619
just not use data structures where the
shape is this you know five comma n

00:02:43.619 --> 00:02:43.629
shape is this you know five comma n
 

00:02:43.629 --> 00:02:46.830
shape is this you know five comma n
comma ranked one array instead if you

00:02:46.830 --> 00:02:46.840
comma ranked one array instead if you
 

00:02:46.840 --> 00:02:53.789
comma ranked one array instead if you
set a to be from this five point one

00:02:53.789 --> 00:02:53.799
set a to be from this five point one
 

00:02:53.799 --> 00:02:57.149
set a to be from this five point one
then this commits a to be five by one

00:02:57.149 --> 00:02:57.159
then this commits a to be five by one
 

00:02:57.159 --> 00:03:00.030
then this commits a to be five by one
column vector and whereas previously a

00:03:00.030 --> 00:03:00.040
column vector and whereas previously a
 

00:03:00.040 --> 00:03:02.009
column vector and whereas previously a
and a transpose look the same review now

00:03:02.009 --> 00:03:02.019
and a transpose look the same review now
 

00:03:02.019 --> 00:03:04.709
and a transpose look the same review now
print a transpose now a transpose is a

00:03:04.709 --> 00:03:04.719
print a transpose now a transpose is a
 

00:03:04.719 --> 00:03:07.679
print a transpose now a transpose is a
row vector notice one subtle difference

00:03:07.679 --> 00:03:07.689
row vector notice one subtle difference
 

00:03:07.689 --> 00:03:09.959
row vector notice one subtle difference
on in this data structure there are two

00:03:09.959 --> 00:03:09.969
on in this data structure there are two
 

00:03:09.969 --> 00:03:11.459
on in this data structure there are two
square brackets when you print a

00:03:11.459 --> 00:03:11.469
square brackets when you print a
 

00:03:11.469 --> 00:03:13.170
square brackets when you print a
transpose whereas previously there was

00:03:13.170 --> 00:03:13.180
transpose whereas previously there was
 

00:03:13.180 --> 00:03:14.849
transpose whereas previously there was
one square bracket so that's the

00:03:14.849 --> 00:03:14.859
one square bracket so that's the
 

00:03:14.859 --> 00:03:17.219
one square bracket so that's the
difference between a this is really a

00:03:17.219 --> 00:03:17.229
difference between a this is really a
 

00:03:17.229 --> 00:03:21.509
difference between a this is really a
one by five matrix versus a one of these

00:03:21.509 --> 00:03:21.519
one by five matrix versus a one of these
 

00:03:21.519 --> 00:03:24.270
one by five matrix versus a one of these
are rank one arrays and if you print

00:03:24.270 --> 00:03:24.280
are rank one arrays and if you print
 

00:03:24.280 --> 00:03:27.270
are rank one arrays and if you print
save these product between a and a

00:03:27.270 --> 00:03:27.280
save these product between a and a
 

00:03:27.280 --> 00:03:30.330
save these product between a and a
transpose then this gives you the outer

00:03:30.330 --> 00:03:30.340
transpose then this gives you the outer
 

00:03:30.340 --> 00:03:33.059
transpose then this gives you the outer
product of a vector R and so the ultra

00:03:33.059 --> 00:03:33.069
product of a vector R and so the ultra
 

00:03:33.069 --> 00:03:35.819
product of a vector R and so the ultra
profitable vector gives you a matrix so

00:03:35.819 --> 00:03:35.829
profitable vector gives you a matrix so
 

00:03:35.829 --> 00:03:38.640
profitable vector gives you a matrix so
let's look in greater detail at what we

00:03:38.640 --> 00:03:38.650
let's look in greater detail at what we
 

00:03:38.650 --> 00:03:41.129
let's look in greater detail at what we
just saw here the first command that we

00:03:41.129 --> 00:03:41.139
just saw here the first command that we
 

00:03:41.139 --> 00:03:44.509
just saw here the first command that we
ran just now was this and this created a

00:03:44.509 --> 00:03:44.519
ran just now was this and this created a
 

00:03:44.519 --> 00:03:49.199
ran just now was this and this created a
data structure where a dot shape was

00:03:49.199 --> 00:03:49.209
data structure where a dot shape was
 

00:03:49.209 --> 00:03:53.009
data structure where a dot shape was
this a funny thing v comma and so this

00:03:53.009 --> 00:03:53.019
this a funny thing v comma and so this
 

00:03:53.019 --> 00:03:57.569
this a funny thing v comma and so this
is called a rank one array and this is a

00:03:57.569 --> 00:03:57.579
is called a rank one array and this is a
 

00:03:57.579 --> 00:03:59.459
is called a rank one array and this is a
very funny data structure it doesn't

00:03:59.459 --> 00:03:59.469
very funny data structure it doesn't
 

00:03:59.469 --> 00:04:01.229
very funny data structure it doesn't
behave consistently as either a row

00:04:01.229 --> 00:04:01.239
behave consistently as either a row
 

00:04:01.239 --> 00:04:04.289
behave consistently as either a row
vector nor a column vector which makes

00:04:04.289 --> 00:04:04.299
vector nor a column vector which makes
 

00:04:04.299 --> 00:04:06.809
vector nor a column vector which makes
some of this effects non-intuitive so

00:04:06.809 --> 00:04:06.819
some of this effects non-intuitive so
 

00:04:06.819 --> 00:04:08.759
some of this effects non-intuitive so
what I'm going to recommend um is that

00:04:08.759 --> 00:04:08.769
what I'm going to recommend um is that
 

00:04:08.769 --> 00:04:10.529
what I'm going to recommend um is that
when you are doing your program

00:04:10.529 --> 00:04:10.539
when you are doing your program
 

00:04:10.539 --> 00:04:11.969
when you are doing your program
exercises or in fact when you're

00:04:11.969 --> 00:04:11.979
exercises or in fact when you're
 

00:04:11.979 --> 00:04:14.099
exercises or in fact when you're
implementing which is regression on your

00:04:14.099 --> 00:04:14.109
implementing which is regression on your
 

00:04:14.109 --> 00:04:17.370
implementing which is regression on your
networks that you just do not use these

00:04:17.370 --> 00:04:17.380
networks that you just do not use these
 

00:04:17.380 --> 00:04:22.260
networks that you just do not use these
rank one arrays instead if every time

00:04:22.260 --> 00:04:22.270
rank one arrays instead if every time
 

00:04:22.270 --> 00:04:25.560
rank one arrays instead if every time
you create an array you commit to making

00:04:25.560 --> 00:04:25.570
you create an array you commit to making
 

00:04:25.570 --> 00:04:29.340
you create an array you commit to making
either a column vector so this crazy 501

00:04:29.340 --> 00:04:29.350
either a column vector so this crazy 501
 

00:04:29.350 --> 00:04:31.220
either a column vector so this crazy 501
vector or commit to making a row vector

00:04:31.220 --> 00:04:31.230
vector or commit to making a row vector
 

00:04:31.230 --> 00:04:33.870
vector or commit to making a row vector
then the behavior of your vectors will

00:04:33.870 --> 00:04:33.880
then the behavior of your vectors will
 

00:04:33.880 --> 00:04:37.080
then the behavior of your vectors will
may be easier to understand so in this

00:04:37.080 --> 00:04:37.090
may be easier to understand so in this
 

00:04:37.090 --> 00:04:41.580
may be easier to understand so in this
case a dot shape is going to be equal to

00:04:41.580 --> 00:04:41.590
case a dot shape is going to be equal to
 

00:04:41.590 --> 00:04:44.700
case a dot shape is going to be equal to
5 comma 1 and so this behaves a lot like

00:04:44.700 --> 00:04:44.710
5 comma 1 and so this behaves a lot like
 

00:04:44.710 --> 00:04:47.910
5 comma 1 and so this behaves a lot like
they or that this is a column vector and

00:04:47.910 --> 00:04:47.920
they or that this is a column vector and
 

00:04:47.920 --> 00:04:50.160
they or that this is a column vector and
that's why you might you can think of

00:04:50.160 --> 00:04:50.170
that's why you might you can think of
 

00:04:50.170 --> 00:04:52.350
that's why you might you can think of
this as a 5 by 1 matrix or as a column

00:04:52.350 --> 00:04:52.360
this as a 5 by 1 matrix or as a column
 

00:04:52.360 --> 00:04:55.710
this as a 5 by 1 matrix or as a column
vector and here a dot shape is going to

00:04:55.710 --> 00:04:55.720
vector and here a dot shape is going to
 

00:04:55.720 --> 00:04:58.190
vector and here a dot shape is going to
be 1 comma 5 and this behaves

00:04:58.190 --> 00:04:58.200
be 1 comma 5 and this behaves
 

00:04:58.200 --> 00:05:02.520
be 1 comma 5 and this behaves
consistently as a row vector so when you

00:05:02.520 --> 00:05:02.530
consistently as a row vector so when you
 

00:05:02.530 --> 00:05:04.260
consistently as a row vector so when you
need a vector I would say either use

00:05:04.260 --> 00:05:04.270
need a vector I would say either use
 

00:05:04.270 --> 00:05:08.220
need a vector I would say either use
this or this but not a Rank 1 array one

00:05:08.220 --> 00:05:08.230
this or this but not a Rank 1 array one
 

00:05:08.230 --> 00:05:10.200
this or this but not a Rank 1 array one
more thing that I do a lot to my code is

00:05:10.200 --> 00:05:10.210
more thing that I do a lot to my code is
 

00:05:10.210 --> 00:05:12.450
more thing that I do a lot to my code is
if I'm not entirely sure what's the

00:05:12.450 --> 00:05:12.460
if I'm not entirely sure what's the
 

00:05:12.460 --> 00:05:15.870
if I'm not entirely sure what's the
dimension of one of my vectors are often

00:05:15.870 --> 00:05:15.880
dimension of one of my vectors are often
 

00:05:15.880 --> 00:05:17.730
dimension of one of my vectors are often
throw in an assertion statement like

00:05:17.730 --> 00:05:17.740
throw in an assertion statement like
 

00:05:17.740 --> 00:05:19.440
throw in an assertion statement like
this to make sure in this case that this

00:05:19.440 --> 00:05:19.450
this to make sure in this case that this
 

00:05:19.450 --> 00:05:21.990
this to make sure in this case that this
is a five by one vector so this is a

00:05:21.990 --> 00:05:22.000
is a five by one vector so this is a
 

00:05:22.000 --> 00:05:24.690
is a five by one vector so this is a
column vector these assertions are

00:05:24.690 --> 00:05:24.700
column vector these assertions are
 

00:05:24.700 --> 00:05:27.030
column vector these assertions are
really inexpensive to execute and they

00:05:27.030 --> 00:05:27.040
really inexpensive to execute and they
 

00:05:27.040 --> 00:05:29.730
really inexpensive to execute and they
also help to serve as documentation for

00:05:29.730 --> 00:05:29.740
also help to serve as documentation for
 

00:05:29.740 --> 00:05:32.370
also help to serve as documentation for
your code so don't hesitate to throw an

00:05:32.370 --> 00:05:32.380
your code so don't hesitate to throw an
 

00:05:32.380 --> 00:05:33.930
your code so don't hesitate to throw an
assertion statements like this one if

00:05:33.930 --> 00:05:33.940
assertion statements like this one if
 

00:05:33.940 --> 00:05:36.570
assertion statements like this one if
you like it and then finally if for some

00:05:36.570 --> 00:05:36.580
you like it and then finally if for some
 

00:05:36.580 --> 00:05:38.490
you like it and then finally if for some
reason you do end up with a rank one

00:05:38.490 --> 00:05:38.500
reason you do end up with a rank one
 

00:05:38.500 --> 00:05:42.900
reason you do end up with a rank one
array you can reshape this a equals a

00:05:42.900 --> 00:05:42.910
array you can reshape this a equals a
 

00:05:42.910 --> 00:05:46.800
array you can reshape this a equals a
dot reshape into say a five by one array

00:05:46.800 --> 00:05:46.810
dot reshape into say a five by one array
 

00:05:46.810 --> 00:05:49.650
dot reshape into say a five by one array
or one by five arrays so that it behaves

00:05:49.650 --> 00:05:49.660
or one by five arrays so that it behaves
 

00:05:49.660 --> 00:05:51.420
or one by five arrays so that it behaves
more consistently as either a column

00:05:51.420 --> 00:05:51.430
more consistently as either a column
 

00:05:51.430 --> 00:05:54.450
more consistently as either a column
vector or row vector so sometimes seen

00:05:54.450 --> 00:05:54.460
vector or row vector so sometimes seen
 

00:05:54.460 --> 00:05:56.790
vector or row vector so sometimes seen
students and that was very hard to track

00:05:56.790 --> 00:05:56.800
students and that was very hard to track
 

00:05:56.800 --> 00:05:58.680
students and that was very hard to track
down bugs because of other non-intuitive

00:05:58.680 --> 00:05:58.690
down bugs because of other non-intuitive
 

00:05:58.690 --> 00:06:01.230
down bugs because of other non-intuitive
effects of rank one arrays by

00:06:01.230 --> 00:06:01.240
effects of rank one arrays by
 

00:06:01.240 --> 00:06:03.150
effects of rank one arrays by
eliminating rank one of rays on my own

00:06:03.150 --> 00:06:03.160
eliminating rank one of rays on my own
 

00:06:03.160 --> 00:06:06.360
eliminating rank one of rays on my own
code I think my code became simpler and

00:06:06.360 --> 00:06:06.370
code I think my code became simpler and
 

00:06:06.370 --> 00:06:08.340
code I think my code became simpler and
I did not actually find it restrictive

00:06:08.340 --> 00:06:08.350
I did not actually find it restrictive
 

00:06:08.350 --> 00:06:09.960
I did not actually find it restrictive
in terms of things like an expressing

00:06:09.960 --> 00:06:09.970
in terms of things like an expressing
 

00:06:09.970 --> 00:06:11.910
in terms of things like an expressing
code to just never use a rank one array

00:06:11.910 --> 00:06:11.920
code to just never use a rank one array
 

00:06:11.920 --> 00:06:15.240
code to just never use a rank one array
and so takeaways are to simplify your

00:06:15.240 --> 00:06:15.250
and so takeaways are to simplify your
 

00:06:15.250 --> 00:06:15.510
and so takeaways are to simplify your
code

00:06:15.510 --> 00:06:15.520
code
 

00:06:15.520 --> 00:06:17.580
code
don't use rank one with Ray's always use

00:06:17.580 --> 00:06:17.590
don't use rank one with Ray's always use
 

00:06:17.590 --> 00:06:20.430
don't use rank one with Ray's always use
either n by one matrices basically

00:06:20.430 --> 00:06:20.440
either n by one matrices basically
 

00:06:20.440 --> 00:06:23.190
either n by one matrices basically
column vectors or one by n matrices or

00:06:23.190 --> 00:06:23.200
column vectors or one by n matrices or
 

00:06:23.200 --> 00:06:25.140
column vectors or one by n matrices or
basically row vectors feel free to toss

00:06:25.140 --> 00:06:25.150
basically row vectors feel free to toss
 

00:06:25.150 --> 00:06:26.760
basically row vectors feel free to toss
a lot of assertion statements so

00:06:26.760 --> 00:06:26.770
a lot of assertion statements so
 

00:06:26.770 --> 00:06:28.470
a lot of assertion statements so
double-check the dimensions or matrices

00:06:28.470 --> 00:06:28.480
double-check the dimensions or matrices
 

00:06:28.480 --> 00:06:31.110
double-check the dimensions or matrices
and rays and also you know don't be shy

00:06:31.110 --> 00:06:31.120
and rays and also you know don't be shy
 

00:06:31.120 --> 00:06:33.540
and rays and also you know don't be shy
about calling the reshape operation to

00:06:33.540 --> 00:06:33.550
about calling the reshape operation to
 

00:06:33.550 --> 00:06:35.370
about calling the reshape operation to
make sure that your matrices or your

00:06:35.370 --> 00:06:35.380
make sure that your matrices or your
 

00:06:35.380 --> 00:06:37.390
make sure that your matrices or your
vectors are the dimension

00:06:37.390 --> 00:06:37.400
vectors are the dimension
 

00:06:37.400 --> 00:06:39.670
vectors are the dimension
you needed to be so that I hope that

00:06:39.670 --> 00:06:39.680
you needed to be so that I hope that
 

00:06:39.680 --> 00:06:42.550
you needed to be so that I hope that
this set of suggestions helps you to

00:06:42.550 --> 00:06:42.560
this set of suggestions helps you to
 

00:06:42.560 --> 00:06:44.650
this set of suggestions helps you to
eliminate a cause of bugs that they're

00:06:44.650 --> 00:06:44.660
eliminate a cause of bugs that they're
 

00:06:44.660 --> 00:06:46.719
eliminate a cause of bugs that they're
from from from Python code and makes the

00:06:46.719 --> 00:06:46.729
from from from Python code and makes the
 

00:06:46.729 --> 00:06:50.470
from from from Python code and makes the
program exercise easier to complete

