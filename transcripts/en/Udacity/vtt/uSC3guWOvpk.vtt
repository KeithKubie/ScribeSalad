WEBVTT
Kind: captions
Language: en

00:00:00.410 --> 00:00:05.960
We said buffer overflows are bad,
so, what can we do beyond just

00:00:05.960 --> 00:00:11.210
relying on the programmers or coders
to avoid those kind of vulnerabilities?

00:00:11.210 --> 00:00:17.676
One way we can do that is, remember that
one of the tricks that hacker uses is to

00:00:17.676 --> 00:00:24.262
override the return address field that
we have on the stack, in a stack frame.

00:00:24.262 --> 00:00:28.686
Whatever the function you were executing
when the bad input has to received,

00:00:28.686 --> 00:00:31.230
the return address is modified.

00:00:31.230 --> 00:00:33.650
That should not be during
the execution of that function.

00:00:33.650 --> 00:00:37.000
There is no reason for
that return address to be modified

00:00:37.000 --> 00:00:40.500
because this return address is
where we are supposed to go back.

00:00:40.500 --> 00:00:44.707
And where we go back should not change
while we're executing this call

00:00:44.707 --> 00:00:45.428
function.

00:00:45.428 --> 00:00:50.176
Okay, so how can you detect if
the return address has been modified?

00:00:50.176 --> 00:00:53.100
And if it's been modified
there is an overflow and

00:00:53.100 --> 00:00:57.270
if you can automatically detect that
then you can stop things right there,

00:00:57.270 --> 00:00:59.550
program can terminate or
something like that.

00:00:59.550 --> 00:01:01.990
So how can we detect any modifications?

00:01:01.990 --> 00:01:05.790
So one technique is what
is called stack canaries.

00:01:05.790 --> 00:01:08.430
So these are sort of like coal mines.

00:01:08.430 --> 00:01:13.460
We have those birds that tell you when
the harmful gas concentration is high or

00:01:13.460 --> 00:01:14.860
something like that.

00:01:14.860 --> 00:01:18.490
What we can do is just before
the return address in a frame

00:01:18.490 --> 00:01:21.490
we can store when
the function call is made.

00:01:21.490 --> 00:01:24.110
At that time we can store a canary

00:01:24.110 --> 00:01:28.408
value in a location that is
just before the return address.

00:01:28.408 --> 00:01:31.260
If you're going to overflow
into the return address,

00:01:31.260 --> 00:01:34.570
you're going to come
wire this canary value.

00:01:34.570 --> 00:01:37.100
So if the return address
gets overwritten,

00:01:37.100 --> 00:01:41.300
chances are that the canary value
is going to get overwritten also.

00:01:41.300 --> 00:01:42.660
So all you had to do is,

00:01:42.660 --> 00:01:47.970
before you return from the function, you
check if the canary value has changed.

00:01:47.970 --> 00:01:51.860
You knew what the canary value is
when the function call was made

00:01:51.860 --> 00:01:56.960
because that you had placed it in this
location just before the return address.

00:01:56.960 --> 00:02:00.340
So you're going to what
that location contains now

00:02:00.340 --> 00:02:01.970
with the value that you knew.

00:02:01.970 --> 00:02:05.330
If they don't match then
there is an overflow and

00:02:05.330 --> 00:02:07.830
potentially the return
address has been modified.

00:02:07.830 --> 00:02:11.090
And if it's been modified,
then you shouldn't go on.

00:02:11.090 --> 00:02:15.180
We have detected a buffer overflow and
that potentially could

00:02:15.180 --> 00:02:19.410
change program control flow and
lead to attacker code and so on.

00:02:19.410 --> 00:02:23.280
So that modification should
basically indicate to us that

00:02:23.280 --> 00:02:25.100
there is a problem here.

00:02:25.100 --> 00:02:27.435
So a canary value basically just says,

00:02:27.435 --> 00:02:30.778
if it had changed this is
done automatically isn't it?

00:02:30.778 --> 00:02:32.309
The programmer has to do nothing.

00:02:32.309 --> 00:02:35.641
We compile it the way
sets up the stack and

00:02:35.641 --> 00:02:40.170
sets up the data structure
within the stack frame.

00:02:40.170 --> 00:02:42.640
That's where we add in this and
we checking it automatically.

00:02:42.640 --> 00:02:47.690
So the programmer has to do nothing
to get this extra security that comes

00:02:47.690 --> 00:02:52.320
from this defense that we just talked
about that detects buffer overflows.

00:02:52.320 --> 00:02:55.360
So stack canary is one
way that you can do that.

