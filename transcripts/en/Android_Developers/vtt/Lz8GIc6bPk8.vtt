WEBVTT
Kind: captions
Language: en

00:00:01.599 --> 00:00:05.870
&gt;&gt;Trevor Johns: Hello everyone.

00:00:05.870 --> 00:00:17.369
My name is Trevor Johns and this is Android
Developer Office Hours for the week of August

00:00:17.369 --> 00:00:18.369
1st, 2012.

00:00:18.369 --> 00:00:23.660
This week's topic is smoothing out performance
in Android UIs with our special guest Romain

00:00:23.660 --> 00:00:24.660
Guy.

00:00:24.660 --> 00:00:29.430
Also with us today is Alex Lucas and Roman
Norik via video from New York.

00:00:29.430 --> 00:00:33.829
So, for those of you joining us for the first
time we hold this channel every Wednesday

00:00:33.829 --> 00:00:39.690
at 2pm Pacific and our goal is to answer your
questions about Android app development.

00:00:39.690 --> 00:00:44.769
If you're watching live, feel free to hop
onto our Google Plus hangout where you can

00:00:44.769 --> 00:00:49.010
ask us questions either via video or if you
don't have a webcam, audio and text questions

00:00:49.010 --> 00:00:50.250
are perfectly acceptable, too.

00:00:50.250 --> 00:00:55.089
We also have a moderator page that we use
to vote on questions beforehand.

00:00:55.089 --> 00:01:00.940
So we're gonna go ahead and start by reading
off the top of that list and as we go along

00:01:00.940 --> 00:01:04.979
live, you guys are certainly welcome to vote
on the question you think we should answer

00:01:04.979 --> 00:01:05.979
next.

00:01:05.979 --> 00:01:06.979
So, let's go ahead and get started.

00:01:06.979 --> 00:01:11.259
First question from the moderator queue, this
is from Drew H. in Wheaton, Illinois and he

00:01:11.259 --> 00:01:16.049
asks, "Our app is having issues with Hebrew
text and vowel points rendering to the left

00:01:16.049 --> 00:01:18.869
of the center rather than directly below.

00:01:18.869 --> 00:01:20.140
Is this a bug with Skia?

00:01:20.140 --> 00:01:22.630
And is there something we can do in our app
to fix this?"

00:01:22.630 --> 00:01:25.810
&gt;&gt;Romain Guy: So, I have an answer for that.

00:01:25.810 --> 00:01:28.479
It is kind of a bug in Skia
[Techno music playing]

00:01:28.479 --> 00:01:33.829
&gt;&gt;Romain Guy: kind of a bug in the open [indistinct]
pipeline and kind of a bug in the framework.

00:01:33.829 --> 00:01:40.850
The issue that's interesting to you is that
we don't really support, as of Jellybean,

00:01:40.850 --> 00:01:46.580
vertical positioning of glyphs are with the
complex, uh, complex character sets.

00:01:46.580 --> 00:01:50.590
This is something we've been working on and
have already fixed this issue internally so

00:01:50.590 --> 00:01:56.240
a future version of Android will have a much
better spot for that and should actually work

00:01:56.240 --> 00:01:57.890
in the next release of Android.

00:01:57.890 --> 00:02:01.229
&gt;&gt;Trevor Johns: Okay, excellent.

00:02:01.229 --> 00:02:02.909
Thank you.

00:02:02.909 --> 00:02:04.749
Let's go ahead and move onto the next question.

00:02:04.749 --> 00:02:11.480
So this one comes from Achile from Ashburn,
Virginia and he asks, "Why are objects in

00:02:11.480 --> 00:02:12.880
auto in boxing not recommended?"

00:02:12.880 --> 00:02:15.090
That's two questions, not the same.

00:02:15.090 --> 00:02:19.800
Why are objects not recommended and why is
auto in boxing not recommended?

00:02:19.800 --> 00:02:23.540
I'm not sure that's entirely accurate so,
Alex, I know we were talking about it before.

00:02:23.540 --> 00:02:24.540
&gt;&gt;Alex Lucas: Yeah.

00:02:24.540 --> 00:02:28.920
&gt;&gt;Trevor Johns: Do you wanna give a little
bit more feedback for or a bit more of an

00:02:28.920 --> 00:02:29.920
answer on this?

00:02:29.920 --> 00:02:30.920
&gt;&gt;Alex Lucas: Sure.

00:02:30.920 --> 00:02:35.170
Okay, so, uh, to address them both individually,
why objects are not recommended, it's not

00:02:35.170 --> 00:02:39.520
so much that we're saying don't use objects
it's the Java program.

00:02:39.520 --> 00:02:40.520
It's an object-oriented program.

00:02:40.520 --> 00:02:42.990
&gt;&gt;Trevor Johns: The Android framework itself
is full of lots of objects.

00:02:42.990 --> 00:02:43.990
&gt;&gt;Alex Lucas: Right.

00:02:43.990 --> 00:02:45.620
&gt;&gt;Trevor Johns: Objects are not, in themselves,
the bad thing.

00:02:45.620 --> 00:02:46.620
&gt;&gt;Alex Lucas: Right.

00:02:46.620 --> 00:02:51.270
What we're really going for is don't use object
gratuitously where you can, where you could

00:02:51.270 --> 00:02:53.570
do just as well with a primitive type.

00:02:53.570 --> 00:02:58.620
For instance, you can pretty easily replace
enums with simple integers.

00:02:58.620 --> 00:03:01.490
That's just a static constant integer.

00:03:01.490 --> 00:03:02.500
&gt;&gt;Trevor Johns: Right.

00:03:02.500 --> 00:03:07.530
So for those of you that don't know, if you
do use an enum in object, or in Java, that

00:03:07.530 --> 00:03:13.600
does get translated into a full fledged Java
object which is a lot of overhead for, if

00:03:13.600 --> 00:03:15.450
all you want is something you can [inaudible].

00:03:15.450 --> 00:03:16.450
&gt;&gt;Alex Lucas: Right.

00:03:16.450 --> 00:03:20.420
And then if you have a large collection of
objects that have, that each have an enum

00:03:20.420 --> 00:03:24.700
property attached to them or something that
is another large collection of objects.

00:03:24.700 --> 00:03:28.540
If using enums instead of just normal integers.

00:03:28.540 --> 00:03:34.730
So we're really just saying don't use them,
don't use them gratuitously or excessively.

00:03:34.730 --> 00:03:40.790
For auto boxing, it's more or less the same
thing because if you have a large collection

00:03:40.790 --> 00:03:48.930
here iterating over and auto boxing is going
to create integer objects like, [indistinct]

00:03:48.930 --> 00:03:53.330
so, where just a normal integer would work
fine you're gonna be creating objects on the

00:03:53.330 --> 00:03:57.500
fly in the loop and it's gonna be pretty wasteful
and slow things down a little bit and use

00:03:57.500 --> 00:03:59.190
up way more memory than necessary.

00:03:59.190 --> 00:04:00.220
&gt;&gt;Trevor Johns: Right.

00:04:00.220 --> 00:04:03.190
So, one, one or two auto boxings here and
there are probably fine.

00:04:03.190 --> 00:04:04.190
&gt;&gt;Alex Lucas: Right.

00:04:04.190 --> 00:04:05.840
&gt;&gt;Trevor Johns: But you probably don't wanna
do it inside the loop.

00:04:05.840 --> 00:04:08.770
Every time that loop goes through iteration,
you have another object to create.

00:04:08.770 --> 00:04:09.770
Oh yeah.

00:04:09.770 --> 00:04:15.090
&gt;&gt;Romain Guy: The one thing to remember is
that you should only avoid using objects and

00:04:15.090 --> 00:04:16.919
auto boxing in [indistinct].

00:04:16.919 --> 00:04:22.550
So, in [indistinct], draw, measure or if you
have your own custom algorithms to move, you

00:04:22.550 --> 00:04:23.610
know, fast.

00:04:23.610 --> 00:04:27.770
But in listener, when you click on the button,
it's okay to create an object cause that's

00:04:27.770 --> 00:04:29.510
not gonna happen very often.

00:04:29.510 --> 00:04:34.370
So it's up to you that you would understand
your application and you know, like, what

00:04:34.370 --> 00:04:37.880
pieces of code aren't called very often and
this is where you have to be careful.

00:04:37.880 --> 00:04:43.690
And, also, we offer you many APIs to avoid
creating objects or to help you to reuse objects.

00:04:43.690 --> 00:04:48.200
So, for instance, if we are talking about
auto boxing, they often come from using integers

00:04:48.200 --> 00:04:52.740
inside of hash mat when instead you can use
the sparser way, classes we have that lets

00:04:52.740 --> 00:04:58.050
you avoid the auto boxing and give you the
same features and benefits of the hash mat.

00:04:58.050 --> 00:04:59.800
&gt;&gt;Trevor Johns: Alright.

00:04:59.800 --> 00:05:03.980
So, I think that's pretty well covered, so,
let's go ahead and move onto the next question.

00:05:03.980 --> 00:05:07.070
This one's coming from Martin S. in the Northwest
UK.

00:05:07.070 --> 00:05:10.600
He asks, "What are the best tools for tracing
performance issues?

00:05:10.600 --> 00:05:15.560
I have a slight pause when starting activity
and I can't seem to track down the issue."

00:05:15.560 --> 00:05:16.750
Um, Romain, you wanna?

00:05:16.750 --> 00:05:17.750
&gt;&gt;Romain Guy: Yeah.

00:05:17.750 --> 00:05:22.930
So we have two tools that, well, three tools
you can use in SDK that you can use to track

00:05:22.930 --> 00:05:23.930
performance issues.

00:05:23.930 --> 00:05:25.850
The first one is called Trace View.

00:05:25.850 --> 00:05:30.670
Trace View lets you profile the direct code
inside your application and you can see how

00:05:30.670 --> 00:05:33.570
much time you spend in every method in your
application.

00:05:33.570 --> 00:05:36.930
You can also use Systrace, this was introduced
in Jellybean.

00:05:36.930 --> 00:05:40.480
The best I can recommend if you want to know
more about Systrace you should look at the

00:05:40.480 --> 00:05:45.020
Google IO video that we posted a couple weeks
ago where we presented the tool a little bit.

00:05:45.020 --> 00:05:49.330
And you can also use the DDNS application
tracker if the performance issue comes from

00:05:49.330 --> 00:05:53.581
the garbage collector then DDNS will help
you figure out where you're creating objects

00:05:53.581 --> 00:05:55.840
and why and then you can fix that.

00:05:55.840 --> 00:06:00.580
In your particular case because it happens
when you start the activity, there are two

00:06:00.580 --> 00:06:04.780
things you can do, you can either go into
developer settings and set your application

00:06:04.780 --> 00:06:10.540
as the debuggable application and then there's
a checkbox you can turn on that tells the

00:06:10.540 --> 00:06:13.850
system to wait for the debugger before detaching.

00:06:13.850 --> 00:06:18.230
So you can basically let your application
wait until you're ready to start debugging

00:06:18.230 --> 00:06:22.340
and as soon as you're ready to start debugging
you can start tracing so you can capture the

00:06:22.340 --> 00:06:23.340
startup of your application.

00:06:23.340 --> 00:06:28.490
You can also use Trace View from code in Android.OS.debug.

00:06:28.490 --> 00:06:32.310
We have two methods, start method tracing
and stop method tracing.

00:06:32.310 --> 00:06:36.620
So you can program it to capture a trace that
then you can open in Trace View.

00:06:36.620 --> 00:06:43.020
So if you just start from a shell, Trace View
and then pass it to the trace file, you can

00:06:43.020 --> 00:06:48.990
open it and this is a really good way to capture
only a very specific spot of a life cycle

00:06:48.990 --> 00:06:53.110
of your application and this is actually something
we do a lot internally, we use these methods

00:06:53.110 --> 00:06:57.210
to capture the start up of our apps and see
where we're spending time.

00:06:57.210 --> 00:06:58.910
&gt;&gt;Trevor Johns: Okay, thank you.

00:06:58.910 --> 00:07:04.180
So, um, unless you have anything else to add
on that, Alex, I think we can go onto the

00:07:04.180 --> 00:07:05.600
next question then.

00:07:05.600 --> 00:07:12.169
So, this question is from Feetie and I believe
this was actually just voted up.

00:07:12.169 --> 00:07:16.699
So, "What parts of an application does the
Jellybean application encryption protect?

00:07:16.699 --> 00:07:22.020
The developer change log mentions application
assets and this is a bit unclear.

00:07:22.020 --> 00:07:25.550
Is it possible to disable this encryption
for an application?"

00:07:25.550 --> 00:07:30.169
So, I don't think we actually have any experts
on the encryption process here, so I'm not

00:07:30.169 --> 00:07:33.760
sure we can go into detail as to what's protected
precisely.

00:07:33.760 --> 00:07:38.180
If somebody does know, feel free to jump in,
But, I mean, the overall goal is to make it

00:07:38.180 --> 00:07:43.610
so that once an APK has been sent to a device,
it's not possible for you to go and casually

00:07:43.610 --> 00:07:46.150
copy that off a device.

00:07:46.150 --> 00:07:51.040
The idea being if you get an APK from Android,
excuse me, for Google Play, you know, we don't

00:07:51.040 --> 00:07:56.650
want you to go and copy that, um, onto some
site where it doesn't belong.

00:07:56.650 --> 00:08:02.850
So, exactly what is encrypted is less important
than the fact that the APK can't be removed

00:08:02.850 --> 00:08:06.030
from the device if you're getting it through
Google Play.

00:08:06.030 --> 00:08:10.440
Now, I'm actually not sure, but Reto, you
might know this one, do we usually, we use

00:08:10.440 --> 00:08:12.370
encryption even for free apps, correct?

00:08:12.370 --> 00:08:14.210
&gt;&gt;Reto Meier: Yes, I think that's right.

00:08:14.210 --> 00:08:15.820
&gt;&gt;Trevor Johns: Yea, that's what I thought.

00:08:15.820 --> 00:08:20.460
So, for anything you're getting through Google
Play, um, it is going to be encrypted.

00:08:20.460 --> 00:08:26.930
That said, if you really do wanna go and distribute
your app, um, in a way that is unencrypted,

00:08:26.930 --> 00:08:31.169
you're always welcome to use the application
developer to go ahead and publish the APK

00:08:31.169 --> 00:08:32.169
to a website.

00:08:32.169 --> 00:08:36.419
APKs that are produced through the Android
developer tools are not encrypted.

00:08:36.419 --> 00:08:40.240
The encryption is a side effect of loading
them on through an application store such

00:08:40.240 --> 00:08:41.379
as Google Play.

00:08:41.379 --> 00:08:45.680
So, users will still be able to side load
your application if you choose to publish

00:08:45.680 --> 00:08:47.899
it and then encryption isn't an issue.

00:08:47.899 --> 00:08:53.740
Alright, um, so I think that covers that one
so let's move on to the next question.

00:08:53.740 --> 00:08:57.470
So, my tablet was locked right there,
[Laughs]

00:08:57.470 --> 00:09:01.160
&gt;&gt;Trevor Johns: So this one's coming from
Michael, "What's the best way to [indistinct]

00:09:01.160 --> 00:09:02.160
large images?

00:09:02.160 --> 00:09:06.830
I received an 800 by 600 jpeg with 8-15 frames
per second.

00:09:06.830 --> 00:09:11.399
Currently I create a bit map with bit map
factory in draw and the [indistinct] method

00:09:11.399 --> 00:09:12.999
with canvas dot draw dot bit map.

00:09:12.999 --> 00:09:16.680
I added [indistinct] and panning but it doesn't
feel smooth.

00:09:16.680 --> 00:09:18.510
Is there a better way to go about doing this?

00:09:18.510 --> 00:09:24.730
&gt;&gt;Romain Guy: Um, so, there's no simple answer
to this question and as often as [indistinct]

00:09:24.730 --> 00:09:27.139
the real answer is it depends.

00:09:27.139 --> 00:09:30.660
So, the question is a little too vague to
give you a real answer.

00:09:30.660 --> 00:09:34.519
So, for instance, are you applying color filters
to the bit map?

00:09:34.519 --> 00:09:36.000
Are you using alpha?

00:09:36.000 --> 00:09:38.399
Are you scaling the bit map?

00:09:38.399 --> 00:09:40.430
Are you decoding the bit map in the Android
method?

00:09:40.430 --> 00:09:43.360
In which case, that would be a big no, no.

00:09:43.360 --> 00:09:44.889
On what kind of device are you running?

00:09:44.889 --> 00:09:46.920
Are you using acceleration?

00:09:46.920 --> 00:09:50.389
So without having the answers to those questions,
I can't actually help you.

00:09:50.389 --> 00:09:57.019
The best I can tell you is to use Trace View
[indistinct] use Trace View to see where you're

00:09:57.019 --> 00:10:00.360
spending your time cause maybe you're not
spending your time in draw bit map, maybe

00:10:00.360 --> 00:10:01.769
it's somewhere else.

00:10:01.769 --> 00:10:06.709
And, yeah, without knowing more about the
app it's really difficult.

00:10:06.709 --> 00:10:11.050
But you should be able to draw such a, such
a bit map, like this is not a big bit map

00:10:11.050 --> 00:10:15.749
and, actually, the size of the bit map doesn't
matter as long as you're not scaling down

00:10:15.749 --> 00:10:17.929
to a very tiny size.

00:10:17.929 --> 00:10:22.939
So, there must be something else going on
in your application.

00:10:22.939 --> 00:10:29.089
&gt;&gt;Trevor Johns: Alright, so our next question
comes from a mysteriously named person named

00:10:29.089 --> 00:10:30.089
X

00:10:30.089 --> 00:10:31.089
&gt;&gt;Alex Lucas: Actually.

00:10:31.089 --> 00:10:33.040
&gt;&gt;Male #1: Actually, is that a live question
from the hangout and we'll put them on air?

00:10:33.040 --> 00:10:34.040
&gt;&gt;Trevor Johns: Oh, excellent.

00:10:34.040 --> 00:10:35.959
Yes, let's go ahead and we'll get to X's question
in just a moment.

00:10:35.959 --> 00:10:36.959
So, uh, hey Roman.

00:10:36.959 --> 00:10:45.040
&gt;&gt;Roman Norik: Yeah, so my question on, of
course I'm trying to stay up to date on the

00:10:45.040 --> 00:10:47.389
APK and SDK tools when the new versions come
out.

00:10:47.389 --> 00:10:53.360
For example, I saw there was a 20.0.1 release
and it's not listed in the news, the tools,

00:10:53.360 --> 00:10:54.360
the developer site.

00:10:54.360 --> 00:10:58.490
What's the best way to keep up to date with
what has been released?

00:10:58.490 --> 00:11:03.410
&gt;&gt;Trevor Johns: Okay, so as far as the major
releases, we definitely announce those both

00:11:03.410 --> 00:11:10.360
on the Android developer's site, developer.android.com
as well as the Android developer blog.

00:11:10.360 --> 00:11:14.110
Now, it's always possibly that you can overlook,
say, a minor release.

00:11:14.110 --> 00:11:20.790
For example, 20.1 or 20.1.1, so, you know,
depending on the extent of the release.

00:11:20.790 --> 00:11:25.360
And we usually don't announce those because
there's really nothing, really note worthy

00:11:25.360 --> 00:11:26.360
about them.

00:11:26.360 --> 00:11:30.580
It's probably some minor bug that was found
that, for whatever reason, is considered important

00:11:30.580 --> 00:11:31.689
enough to merit a fix.

00:11:31.689 --> 00:11:32.689
&gt;&gt;Roman Norik: Okay.

00:11:32.689 --> 00:11:36.300
&gt;&gt;Trevor Johns: So usually the best way is
to just periodically run the SDK manager and

00:11:36.300 --> 00:11:38.139
then it'll flag those updates automatically.

00:11:38.139 --> 00:11:43.420
But, of course, besides the stuff that's released
as part of Android open source and from Google,

00:11:43.420 --> 00:11:45.700
there's a lot of other companies that can
release add ons as well.

00:11:45.700 --> 00:11:49.980
There's someone there from Intel, from Samsung,
from HTC, so there's a lot of sources to keep

00:11:49.980 --> 00:11:50.980
track of.

00:11:50.980 --> 00:11:53.069
Definitely you wanna keep track of the stuff
from Android but.

00:11:53.069 --> 00:11:57.779
&gt;&gt;Roman Norik: I was going SDK manager but
it wasn't showing up on there and I finally

00:11:57.779 --> 00:12:02.179
turned it off, I like closed it out and rebooted,
turned back on and I found it and I've since

00:12:02.179 --> 00:12:06.339
then disabled caching, see if that's gonna
do anything.

00:12:06.339 --> 00:12:07.360
Not cache what's out there.

00:12:07.360 --> 00:12:10.769
&gt;&gt;Trevor Johns: Yeah, but is there a refresh
option in the file menu?

00:12:10.769 --> 00:12:11.769
&gt;&gt;Roman Norik: Yeah, there is.

00:12:11.769 --> 00:12:13.759
&gt;&gt;Trevor Johns: It's possible that, yeah,
there was just some cache data locally that

00:12:13.759 --> 00:12:14.889
was causing a problem.

00:12:14.889 --> 00:12:17.040
It will eventually pick up those changes,
though, so.

00:12:17.040 --> 00:12:18.040
&gt;&gt;Roman Norik: Okay.

00:12:18.040 --> 00:12:20.860
&gt;&gt;Trevor Johns: If you just launch it periodically
that's probably the best way to watch out

00:12:20.860 --> 00:12:23.629
for those releases from smaller releases,
both from Google and everyone else.

00:12:23.629 --> 00:12:27.939
&gt;&gt;Romain Guy: Do we announce the new releases
on the Twitter account and the Google Plus

00:12:27.939 --> 00:12:29.779
accounts that we have for Android developers?

00:12:29.779 --> 00:12:31.709
&gt;&gt;Trevor Johns: Uh, not usually.

00:12:31.709 --> 00:12:35.369
So, unless we noticed a really big bug then
we might mention something.

00:12:35.369 --> 00:12:40.290
But if it's just a routine, just a routine
patch to, you know, to one of the existing

00:12:40.290 --> 00:12:41.600
major releases, we don't advertise it.

00:12:41.600 --> 00:12:45.440
&gt;&gt;Roman Norik: So the previews for 20 were
coming out, yeah, the preview for one, two

00:12:45.440 --> 00:12:49.860
and three and that was nice and then 20.0.1
I was like, okay you changed the [indistinct]

00:12:49.860 --> 00:12:50.860
file.

00:12:50.860 --> 00:12:51.860
[Laughs]

00:12:51.860 --> 00:12:56.730
&gt;&gt;Trevor Johns: Yeah, that said, you know,
I definitely hear what you're saying there

00:12:56.730 --> 00:12:58.910
that maybe we should advertise these a bit
more.

00:12:58.910 --> 00:13:01.689
So I'll pass that along to the rest of the
team

00:13:01.689 --> 00:13:02.689
&gt;&gt;Roman Norik: Okay.

00:13:02.689 --> 00:13:04.899
&gt;&gt;Trevor Johns: maybe we could just, you know,
post something to Google Plus, probably doesn't

00:13:04.899 --> 00:13:10.149
warrant a full blog post if it's just one
change but Google Plus is probably a pretty

00:13:10.149 --> 00:13:11.149
good medium for that.

00:13:11.149 --> 00:13:15.230
So I'll, actually Reto's right here, he manages
our Google Plus account so he probably, you

00:13:15.230 --> 00:13:18.600
know, consider the feature request filed.

00:13:18.600 --> 00:13:19.810
[Laughter]

00:13:19.810 --> 00:13:23.929
&gt;&gt;Romain Guy: Thanks a lot, Reto.

00:13:23.929 --> 00:13:24.929
[Laughter]

00:13:24.929 --> 00:13:26.939
&gt;&gt;Trevor Johns: Alright, so, let's go ahead
and now go onto X's question.

00:13:26.939 --> 00:13:31.291
&gt;&gt;Alex Lucas: Actually before you start I
should point out that Michael, whose question

00:13:31.291 --> 00:13:38.110
Romain sort of answered generally, if he's
listening to the hangout or if he's on, Michael,

00:13:38.110 --> 00:13:41.970
feel free to just pop in the hangout and gives
us more specific information and we might

00:13:41.970 --> 00:13:44.499
be able to give you a more specific answer.

00:13:44.499 --> 00:13:47.630
&gt;&gt;Trevor Johns: Yes and that applies to everyone
here, um, if we're answering your question

00:13:47.630 --> 00:13:52.999
we'd certainly love to see you online and,
again, even if your question is on the moderator

00:13:52.999 --> 00:13:55.850
queue, you're still welcome to hop on and
ask us a question live.

00:13:55.850 --> 00:13:56.949
&gt;&gt;Alex Lucas: Right.

00:13:56.949 --> 00:13:59.699
&gt;&gt;Trevor Johns: Alright, so, next question
here.

00:13:59.699 --> 00:14:07.160
This one is targeted directly to Romain, so
X asks, "With ACS, Diane mentioned you did

00:14:07.160 --> 00:14:13.499
some selective enabling and disabling of hardware
acceleration for the Nexus S. How, if at all,

00:14:13.499 --> 00:14:16.360
did the butter optimization story change with
Nexus S?

00:14:16.360 --> 00:14:20.970
Are there any additional performance tips
for lowering devices on running Android 4.1

00:14:20.970 --> 00:14:21.970
or above?"

00:14:21.970 --> 00:14:27.209
&gt;&gt;Romain Guy: So, Project Butter and Jelly
Bean didn't change much for Nexus S. The main

00:14:27.209 --> 00:14:32.470
reason why we disabled the hardware acceleration
in some, not even some apps, it was parts

00:14:32.470 --> 00:14:33.470
of the system.

00:14:33.470 --> 00:14:39.309
For instance, I believe that it was disabled
in the status bar and the keyboard, we did

00:14:39.309 --> 00:14:41.550
that mostly to save ram.

00:14:41.550 --> 00:14:47.029
The Nexus S doesn't have that much ram compared
to other devices and on that particular device,

00:14:47.029 --> 00:14:53.970
every time we bring up the driver in an app;
it takes about 6 to 8 megs of ram.

00:14:53.970 --> 00:14:59.329
So, when you multiply that by the number of
processes we have it starts getting very costly.

00:14:59.329 --> 00:15:03.249
We did a lot of, you know, changes in the
system where we tried to be very aggressive

00:15:03.249 --> 00:15:07.179
about releasing the memory, make sure the
memory is used by the GPU but, you know, in

00:15:07.179 --> 00:15:12.459
places like the keyboard where we don't need
to redraw at 60 FPS, we just redraw when you

00:15:12.459 --> 00:15:14.989
type a key.

00:15:14.989 --> 00:15:17.089
It wasn't worth it to enable hardware acceleration.

00:15:17.089 --> 00:15:25.670
And, actually, I think the keyboard might
be using software on Nexus 7 or the next Nexus.

00:15:25.670 --> 00:15:30.100
So, yeah, that's pretty much all there, all
there is to it.

00:15:30.100 --> 00:15:36.389
So, preferences for lowering devices, I would
say, like, watch memory usage.

00:15:36.389 --> 00:15:40.749
Usually the power of those devices scales
down with the size of the screen, so you don't

00:15:40.749 --> 00:15:45.579
have to worry too much about graphics performance
cause your [indistinct].

00:15:45.579 --> 00:15:48.259
So, it's really about how much memory you're
using.

00:15:48.259 --> 00:15:53.489
And, again, without, I can't really answer
that question without more specific details.

00:15:53.489 --> 00:15:58.639
&gt;&gt;Trevor Johns: Alright, so and, again, if
you are watching live, feel free to watch

00:15:58.639 --> 00:16:00.730
on and give us some more details.

00:16:00.730 --> 00:16:05.440
So, moving on, next questions from [indistinct]
in Palo Alto.

00:16:05.440 --> 00:16:10.209
And, the question is, "What is the best way
to have low latency touch in games using GL

00:16:10.209 --> 00:16:11.319
surface field?

00:16:11.319 --> 00:16:15.689
Should I register choreographer.postframecallback
and then consume all motion events I've received

00:16:15.689 --> 00:16:20.139
in the activity thread at that point?"

00:16:20.139 --> 00:16:22.160
I'm guessing this is gonna be another question
for Romain.

00:16:22.160 --> 00:16:25.351
&gt;&gt;Romain Guy: Yes, so that's actually where
you should probably do it.

00:16:25.351 --> 00:16:30.399
It's actually the UI itself works.

00:16:30.399 --> 00:16:34.799
So we synchronize the drawing this sync and
at the beginning of the frame we consume,

00:16:34.799 --> 00:16:38.730
we process all the events that we actually
did since the last time we drew.

00:16:38.730 --> 00:16:41.499
So this is very similar with what we do in
the UI.

00:16:41.499 --> 00:16:47.670
What might happen, though, in your particular
case is you might get one frame, one extra

00:16:47.670 --> 00:16:55.070
frame of latency because you will have to
request for render on the GL surfaces thread

00:16:55.070 --> 00:16:58.731
and if you want that render to be synchronized
with this sync, you have to postpone it to

00:16:58.731 --> 00:17:00.410
the next frame.

00:17:00.410 --> 00:17:05.049
And this is one of the reasons why, for instance,
we haven't tried to do multiple, to move the

00:17:05.049 --> 00:17:10.589
rendering off to a separate thread in the
UI docs because we can add an extra frame

00:17:10.589 --> 00:17:11.819
of latency.

00:17:11.819 --> 00:17:17.689
So, you can give it a try, see if it helps
and if it's not disabled then let us know.

00:17:17.689 --> 00:17:22.500
We can try to think of other ways of doing
it and you can add an APS in the user forum

00:17:22.500 --> 00:17:24.900
so you guys can do that kind of things.

00:17:24.900 --> 00:17:29.700
And if it's not possible at all then, by all
means, do that and that's what choreographer

00:17:29.700 --> 00:17:30.720
is for.

00:17:30.720 --> 00:17:33.540
Trevor Johns: Okay, excellent

00:17:33.540 --> 00:17:36.070
&gt;&gt;Male #1: Hey, Trevor, I've got a question
from the hangout

00:17:36.070 --> 00:17:37.070
&gt;&gt;Trevor Johns: Sure.

00:17:37.070 --> 00:17:38.929
&gt;&gt;Male #1: from someone who left but I'm gonna
ask it for you guys anyways.

00:17:38.929 --> 00:17:39.929
&gt;&gt;Trevor Johns: Sure, go ahead.

00:17:39.929 --> 00:17:49.289
&gt;&gt;Male #1: the question is, "I've seen some
apps use a sideways action bar, is this recommended?

00:17:49.289 --> 00:17:51.850
It feels like it may offer some extra or better
functionality."

00:17:51.850 --> 00:17:56.291
&gt;&gt;Trevor Johns: Okay, so, a sideway s action
bar, I'd imagine, is literally an action bar

00:17:56.291 --> 00:17:59.039
that's oriented vertically along the sides
of the screen.

00:17:59.039 --> 00:18:00.740
&gt;&gt;Romain Guy: I think it's what we [indistinct]

00:18:00.740 --> 00:18:03.700
&gt;&gt;Trevor Johns: Right, that's what I was thinking
as well, too.

00:18:03.700 --> 00:18:07.919
So I think the answer there is that it's not
a recommended pattern at this time.

00:18:07.919 --> 00:18:12.080
We do go in and periodically revise our UI
guidelines so at some point in the future

00:18:12.080 --> 00:18:15.019
we may or may not decide that that's a good
idea.

00:18:15.019 --> 00:18:20.700
But, right now, the official recommendation
for action bars is either one action bar at

00:18:20.700 --> 00:18:25.690
the top or the split action bar where you
have an action bar on the top and the bottom.

00:18:25.690 --> 00:18:30.070
So then, of course, you can do things like
throw tabs and everything else in there too.

00:18:30.070 --> 00:18:35.090
This is very similar to a question we've got
in past weeks; too, about some apps like Google

00:18:35.090 --> 00:18:39.669
Play I believe does this, YouTube does this,
Google Plus, where when you tap the up button

00:18:39.669 --> 00:18:43.710
it'll cause an additional fragment to slide
out from the side of the screen with navigation

00:18:43.710 --> 00:18:44.710
links.

00:18:44.710 --> 00:18:48.080
And our answer there was the same, we're evaluating
it.

00:18:48.080 --> 00:18:53.169
If you are ambitious and wanna go and try
new UI paradigms, it's always something you

00:18:53.169 --> 00:18:58.000
can consider placing in your app but right
now it's not an official recommendation and

00:18:58.000 --> 00:19:01.220
you're actually gonna have to add quite a
bit of code to make that work, too, because

00:19:01.220 --> 00:19:03.710
there's no libraries to go and render that
for you.

00:19:03.710 --> 00:19:06.970
&gt;&gt;Alex Lucas: So, not discouraged but not
recommended.

00:19:06.970 --> 00:19:12.159
&gt;&gt;Trevor Johns: Right and with our UI things,
our things involving UI, our guidelines are

00:19:12.159 --> 00:19:13.159
just that.

00:19:13.159 --> 00:19:17.679
They're intended to help guide you towards
what the correct solution is and by no means

00:19:17.679 --> 00:19:19.410
there are hard rules.

00:19:19.410 --> 00:19:24.130
In the end it really is, the question really
is what makes your application provide the

00:19:24.130 --> 00:19:27.610
best user experience which is something you
have to look at the big picture.

00:19:27.610 --> 00:19:29.159
Does it blend in with the system?

00:19:29.159 --> 00:19:30.590
Does it make sense?

00:19:30.590 --> 00:19:31.590
Is it intuitive?

00:19:31.590 --> 00:19:33.500
Does it look nice?

00:19:33.500 --> 00:19:38.990
All of these things are things that you need
to consider as a UI designer, so.

00:19:38.990 --> 00:19:40.840
Actually, we have Roman on the other end.

00:19:40.840 --> 00:19:44.419
Roman, do you wanna go and provide any more
feedback about this?

00:19:44.419 --> 00:19:46.940
&gt;&gt;Roman Norik: First, can you guys hear me?

00:19:46.940 --> 00:19:47.940
&gt;&gt;Trevor Johns: Yes, we can.

00:19:47.940 --> 00:19:51.029
&gt;&gt;Roman Norik: So, the person that asked this
question is actually back on, Achile is here,

00:19:51.029 --> 00:19:55.649
Achile do you wanna kind of elaborate on your
question live?

00:19:55.649 --> 00:20:03.309
&gt;&gt;Achile: Uh, yeah, I just think that I used
the contextual action bar, top and the bottom,

00:20:03.309 --> 00:20:06.290
like on the bottom, but it seems like that
it would get in the way.

00:20:06.290 --> 00:20:11.830
I'm writing a notes app, so it's seems like
that would get in the way of the, like, the

00:20:11.830 --> 00:20:13.710
actual writing with the palm rest and stuff.

00:20:13.710 --> 00:20:15.899
It's gotten in the way when I've used it.

00:20:15.899 --> 00:20:20.580
So I just figured if I could put a sideways
action bar it might actually help.

00:20:20.580 --> 00:20:26.970
&gt;&gt;Roman Norik: So I think, uh, in some apps,
especially in apps that they require interesting

00:20:26.970 --> 00:20:33.110
interactions that aren't just, you know, single
touches or basic gestures, things that sometimes

00:20:33.110 --> 00:20:35.110
require the full screen like drawing.

00:20:35.110 --> 00:20:40.030
If it's something complex like that then you
shouldn't be limited by our patterns, you

00:20:40.030 --> 00:20:44.320
know, if you wanna have actions along the
side, you know, it may make sense.

00:20:44.320 --> 00:20:49.830
One of the things to watch out for, though,
is to, is to get a, kind of establish a balance

00:20:49.830 --> 00:20:55.380
between what looks like system stuff and what
looks like custom app stuff.

00:20:55.380 --> 00:21:00.279
If you make, and this is potentially kind
of unintuitive, but if you make something

00:21:00.279 --> 00:21:06.340
that tries to resemble the system graphics
too much, um, it may be, it may feel a little

00:21:06.340 --> 00:21:07.340
out of place.

00:21:07.340 --> 00:21:11.000
Whereas, if you have something that's kind
of, potentially, styled in your own way and

00:21:11.000 --> 00:21:13.779
it's a sideway action bar, it may make more
sense.

00:21:13.779 --> 00:21:18.950
So I think that it can work and in a lot of
cases the interaction is correct there, it's

00:21:18.950 --> 00:21:22.230
probably better than having things on the
top and bottom but it's definitely something

00:21:22.230 --> 00:21:26.860
that requires some special thought just to
figure out, you know, what's the right balance

00:21:26.860 --> 00:21:31.720
between, you know, establishing pattern or
established patterns and what's really intuitive

00:21:31.720 --> 00:21:33.230
and useful for the user.

00:21:33.230 --> 00:21:39.900
&gt;&gt;Achile: Yeah, I'll probably keep it with
the system, normal system UI if I end up doing

00:21:39.900 --> 00:21:42.429
it just to avoid, like, confusion with the
user.

00:21:42.429 --> 00:21:47.370
&gt;&gt;Roman Norik: Sure and another thing to think
about is, you know, you can always show and

00:21:47.370 --> 00:21:48.370
hide things.

00:21:48.370 --> 00:21:55.840
So one of the things that happens in video
playback, for example, is that all the controls,

00:21:55.840 --> 00:22:00.980
the system bar, the action bar, the status
bar, all that stuff can go away with a single

00:22:00.980 --> 00:22:01.980
tap.

00:22:01.980 --> 00:22:05.880
And, actually, there was some new APIs in
Jelly Bean which made this very easy and made

00:22:05.880 --> 00:22:09.970
it, uh, made the layout very consistent and
stable, actually I think that's the name of

00:22:09.970 --> 00:22:14.580
the API, stable across changes to visibility
of things like that.

00:22:14.580 --> 00:22:17.009
So you may want to consider doing that as
well.

00:22:17.009 --> 00:22:21.539
&gt;&gt;Achile: So lights out mode, like I think
that's what it's called, that's only available

00:22:21.539 --> 00:22:22.539
in Jelly Bean?

00:22:22.539 --> 00:22:27.120
&gt;&gt;Roman Norik: No, so lights out mode is actually
available with Honeycomb and later, or later.

00:22:27.120 --> 00:22:32.169
But Jelly Bean introduced some new things
for devices like the Galaxy Nexus and the

00:22:32.169 --> 00:22:37.130
Nexus 7 that have navigation bar, a navigation
bar at the bottom and top.

00:22:37.130 --> 00:22:40.600
They introduced the new APIs to make your
layout work even better with that.

00:22:40.600 --> 00:22:45.220
So it's also the set system UI visibility
API but there's some new flags in there that

00:22:45.220 --> 00:22:46.580
make it even better.

00:22:46.580 --> 00:22:48.350
So, I'd look into that.

00:22:48.350 --> 00:22:49.409
&gt;&gt; Achile: Okay, thanks.

00:22:49.409 --> 00:22:53.929
&gt;&gt;Alex Lucas: One thing I would also note
is like, as Romain mentioned, if you have

00:22:53.929 --> 00:23:00.299
a vertical action bar it's gonna be a, adding
this might become an issue because if you're

00:23:00.299 --> 00:23:04.180
left handed and it's on the left hand side
of the screen, like, your palm is naturally

00:23:04.180 --> 00:23:06.230
gonna fall on it a lot.

00:23:06.230 --> 00:23:09.929
So I would say, like, if it's going to, actually
handedness in general becomes an issue with

00:23:09.929 --> 00:23:13.880
vertical action bars in touch screen interfaces.

00:23:13.880 --> 00:23:17.190
So I'd say at least have the option of moving
it to the other side of the screen.

00:23:17.190 --> 00:23:20.450
&gt;&gt;Romain Guy: Or to the top [indistinct]

00:23:20.450 --> 00:23:24.280
&gt;&gt;Alex Lucas: Yeah, or stick with the top
cause your hand won't quite, you don't rest

00:23:24.280 --> 00:23:27.540
your hand on the top of the screen.

00:23:27.540 --> 00:23:30.330
&gt;&gt;Trevor Johns: You also have to keep in mind,
too, you do have the, uh, the system bar at

00:23:30.330 --> 00:23:32.799
the bottom which has the home button.

00:23:32.799 --> 00:23:37.370
So, if your UI is likely to touch an action
bar at the bottom of the screen, it's just

00:23:37.370 --> 00:23:40.029
as likely to touch the system bar as well,
too.

00:23:40.029 --> 00:23:42.630
So, and unfortunately you don't really have
the option of moving that.

00:23:42.630 --> 00:23:46.100
So, that's something you have to be aware
of as well.

00:23:46.100 --> 00:23:51.570
Alright, so, do we have any other live questions
or should we go back to the moderator?

00:23:51.570 --> 00:23:55.020
Alright, so back to the moderator it is.

00:23:55.020 --> 00:24:00.830
So, the next question comes from mons-, actually
the next question is, my battery's dead.

00:24:00.830 --> 00:24:01.830
[Laughs]

00:24:01.830 --> 00:24:02.899
&gt;&gt;Alex Lucas: Romain with set it up.

00:24:02.899 --> 00:24:04.830
&gt;&gt;Trevor Johns: So, I have the next question.

00:24:04.830 --> 00:24:10.700
The next question is they were, the person
was looking at intents service and noticed

00:24:10.700 --> 00:24:16.730
that the intents service code was creating
a handler and setting the, uh, the priority

00:24:16.730 --> 00:24:19.639
for the thread normal instead of background
priority.

00:24:19.639 --> 00:24:23.850
So the question was what's the recommended
approach for background services?

00:24:23.850 --> 00:24:27.139
And I think as a side question is, is that
a bug?

00:24:27.139 --> 00:24:31.850
So, at least on my end I was taking a look
through the source code earlier and I didn't

00:24:31.850 --> 00:24:37.510
actually notice any calls to go and set the
priority within intents service dot Java.

00:24:37.510 --> 00:24:41.690
So I'm a little curious where in our code
you saw that behavior.

00:24:41.690 --> 00:24:45.580
But as far as with the recommended practices,
Romain do you wanna go and provide some detail

00:24:45.580 --> 00:24:46.580
there?

00:24:46.580 --> 00:24:49.740
&gt;&gt;Romain Guy: I think the recommend is that
you, by default, is using the default menu

00:24:49.740 --> 00:24:51.740
is exactly what you want.

00:24:51.740 --> 00:24:56.700
And we give higher priority to, for instance,
if there's a UI in the foreground the user

00:24:56.700 --> 00:25:00.470
into interacting with [indistinct] prior to
that.

00:25:00.470 --> 00:25:05.460
So you don't necessarily need priority background
to get a lower priority than what's happening

00:25:05.460 --> 00:25:06.460
in the foreground.

00:25:06.460 --> 00:25:10.960
I don't, I'm not very familiar with intents
services so I'm not sure what the priorities

00:25:10.960 --> 00:25:17.429
should be, if it should be background or default
or anything else but I would say that given

00:25:17.429 --> 00:25:22.679
that Diane wrote that code, whatever is the
default part is probably what she meant it

00:25:22.679 --> 00:25:23.679
to be.

00:25:23.679 --> 00:25:28.980
But, of course, we should ask her in case
and see if maybe there is a bug there.

00:25:28.980 --> 00:25:30.510
I wouldn't worry about it too much.

00:25:30.510 --> 00:25:32.630
&gt;&gt;Trevor Johns: Alright, awesome.

00:25:32.630 --> 00:25:37.539
Um, so, sadly I can't find a charger anywhere
here so, yeah, let's do this.

00:25:37.539 --> 00:25:39.830
I'm gonna read off your laptop.

00:25:39.830 --> 00:25:45.919
So, yeah, so, yeah, so the next question is,
"With the voice search app on the Nexus S,

00:25:45.919 --> 00:25:50.890
it seems like the UI animation interface can't
keep up with the audio input and response,

00:25:50.890 --> 00:25:51.890
so jenk.

00:25:51.890 --> 00:25:56.970
So do you have any insight into the most likely
cause or tips on how we can avoid the same

00:25:56.970 --> 00:25:57.970
pitfalls?"

00:25:57.970 --> 00:25:59.320
And this is from an anonymous user.

00:25:59.320 --> 00:26:02.640
&gt;&gt;Romain Guy: Uh, okay, so I will be annoying
with my answer again.

00:26:02.640 --> 00:26:06.730
So, once again without knowing more about
exactly what's going on inside the app it's

00:26:06.730 --> 00:26:09.330
very hard to, to give tips.

00:26:09.330 --> 00:26:18.730
And I don't quite understand when this jenk
is happening but my guess is that it is something

00:26:18.730 --> 00:26:24.259
like if you are, do we have real time answers
like, in voice search?

00:26:24.259 --> 00:26:26.889
As you speak do we give you real time?

00:26:26.889 --> 00:26:28.510
&gt;&gt;Trevor Johns: Yes, on newer versions.

00:26:28.510 --> 00:26:34.110
If you're running Android 4., I wanna say
either 4.0 or 4.1, I think it was 4.0, uh,

00:26:34.110 --> 00:26:37.149
so that's Ice Cream Sandwich, we added real
time voice transcription.

00:26:37.149 --> 00:26:41.680
&gt;&gt;Romain Guy: Well, I mean, there can be several
levels of jenkiness here.

00:26:41.680 --> 00:26:47.380
It could be the UI because the missions are
too complicated or it's too much work for

00:26:47.380 --> 00:26:51.809
the system or maybe it's just the time it
takes for the audio to be sent to our server,

00:26:51.809 --> 00:26:53.750
processed and sent back.

00:26:53.750 --> 00:27:00.110
So I'm not quite sure what part of the UI
is in part here.

00:27:00.110 --> 00:27:06.139
If the person who has the question can join
the hangout and give us more details about

00:27:06.139 --> 00:27:10.080
what's going on and what they're experiencing
then maybe we can try to answer the question.

00:27:10.080 --> 00:27:12.710
But, as always, I would say use Trace View.

00:27:12.710 --> 00:27:17.810
You can use Trace View on any app and you
can see what's going on and do that in your

00:27:17.810 --> 00:27:18.810
applications.

00:27:18.810 --> 00:27:22.710
If it is a real problem you should talk to
the people working on the voice search application.

00:27:22.710 --> 00:27:25.679
&gt;&gt;Trevor Johns: Okay, great.

00:27:25.679 --> 00:27:27.779
So I now have questions again on my phone.

00:27:27.779 --> 00:27:30.809
My house has been without power for the last
couple days.

00:27:30.809 --> 00:27:35.440
I managed to blow a fuse and, yeah, my tablet
has not charged in a couple days.

00:27:35.440 --> 00:27:38.309
The fact that it's lasted this long is actually
impressive.

00:27:38.309 --> 00:27:41.330
Um, but anyway, moving back to the questions.

00:27:41.330 --> 00:27:47.190
Um, so this one comes from Vitali in Albany
New York and the question is, "What's the

00:27:47.190 --> 00:27:52.649
benefits of using an intents service over
a thread pull executor for network requests?

00:27:52.649 --> 00:27:55.340
Are there any downsides to using thread pull
executor?

00:27:55.340 --> 00:27:58.760
We found that the intents service was taking
up about 10 milliseconds to start and handle

00:27:58.760 --> 00:28:02.990
an intent, is that correct?"

00:28:02.990 --> 00:28:06.110
I'm not hearing anything from Romain so I'm
not sure he has an answer for this one.

00:28:06.110 --> 00:28:09.320
&gt;&gt;Romain Guy: Well, I'm trying to remember,
isn't intent service running into a separate

00:28:09.320 --> 00:28:10.320
process?

00:28:10.320 --> 00:28:18.309
&gt;&gt;Trevor Johns: Yeah, so intent service actually
does create a service which may or may not

00:28:18.309 --> 00:28:21.110
create a separate process but it does create
a separate task.

00:28:21.110 --> 00:28:24.090
So, depending on what the settings for your
app are

00:28:24.090 --> 00:28:28.840
&gt;&gt;Romain Guy: Cause if there is truly a 10
millisecond delay it might just be like the

00:28:28.840 --> 00:28:29.840
interprocess communication.

00:28:29.840 --> 00:28:35.230
But I believe that the whole point of an intent
service is to get the lifecycle management

00:28:35.230 --> 00:28:36.750
of system so you don't get [indistinct].

00:28:36.750 --> 00:28:42.159
&gt;&gt;Trevor Johns: Right, I mean, even within
the same process activities and services normally

00:28:42.159 --> 00:28:46.970
should use inter process communication to
communicate anyways because there's no guarantee

00:28:46.970 --> 00:28:51.280
that that service hasn't been configured to
go and start in a different process.

00:28:51.280 --> 00:28:54.440
So it's still probably going through field
binder and all of that fun stuff.

00:28:54.440 --> 00:28:58.200
&gt;&gt;Romain Guy: I mean the difference here between
using a thread pull and an intent service

00:28:58.200 --> 00:29:02.889
is whether or not you want this request to
happen when the app is in the background.

00:29:02.889 --> 00:29:05.799
Cause with a service you're app might live
longer in the background and not get killed

00:29:05.799 --> 00:29:09.059
so you can still execute things on your intent
service.

00:29:09.059 --> 00:29:13.179
Whereas if you're using a thread pull executor
and you're not moving that into your own service

00:29:13.179 --> 00:29:16.440
then it's more likely to be killed.

00:29:16.440 --> 00:29:20.769
So if you want to wake up your app, you know,
every few minutes or every half an hour to

00:29:20.769 --> 00:29:26.340
make a network request, you'd be better off
using the intent service or your own service.

00:29:26.340 --> 00:29:29.360
You can write your own service with a thread
pull executor inside.

00:29:29.360 --> 00:29:33.379
It's just the intent service is a convenient
way of doing it.

00:29:33.379 --> 00:29:36.039
But, thread pull executor is just a loadable
API way to do it.

00:29:36.039 --> 00:29:37.790
It's a great way to threading.

00:29:37.790 --> 00:29:41.480
There's nothing wrong with it as long as you
know how to use it.

00:29:41.480 --> 00:29:44.610
And I know from experience that it's hard.

00:29:44.610 --> 00:29:45.610
[Laughter]

00:29:45.610 --> 00:29:52.490
&gt;&gt;Trevor Johns: Alright, so the next question
is coming from Jason and Jason asks, "Will

00:29:52.490 --> 00:29:55.570
anybody update web view to support HTML5 video?"

00:29:55.570 --> 00:29:59.929
&gt;&gt;Romain Guy: Yes, we have in Honeycomb.

00:29:59.929 --> 00:30:05.990
So as of Honeycomb, if your application is
hardware accelerated, you get full HTML5 video

00:30:05.990 --> 00:30:06.990
support.

00:30:06.990 --> 00:30:12.210
So make sure your app is either using the
target SDK14 or you're using the user hardware

00:30:12.210 --> 00:30:16.889
accelerated equals true attribute in your
manifest and then you will get HTML video

00:30:16.889 --> 00:30:17.889
support.

00:30:17.889 --> 00:30:18.889
&gt;&gt;Trevor Johns: Excellent.

00:30:18.889 --> 00:30:22.480
Now, see, I thought it actually hadn't been
implemented yet so that's great news.

00:30:22.480 --> 00:30:25.740
&gt;&gt;Alex Lucas: Our hardware team is so fast
they'll take a future request, go back in

00:30:25.740 --> 00:30:26.830
time and implement it.

00:30:26.830 --> 00:30:27.830
&gt;&gt;Trevor Johns: That's true.

00:30:27.830 --> 00:30:29.090
Maybe you could fix the Tardis.

00:30:29.090 --> 00:30:31.669
Yeah, it's right there behind me for those
of you who can't see.

00:30:31.669 --> 00:30:36.289
Our Tardis is broken so normally questions
like this we actually can't answer because

00:30:36.289 --> 00:30:38.690
we can't talk about the roadmap for Android,
right?

00:30:38.690 --> 00:30:41.580
Until things get released, at least.

00:30:41.580 --> 00:30:43.519
But when things are already implemented that's
awesome.

00:30:43.519 --> 00:30:46.230
So, I'm glad we could help you with that.

00:30:46.230 --> 00:30:48.350
So let's move on to the next question here.

00:30:48.350 --> 00:30:49.980
&gt;&gt;Male #1: Hey Trevor, I actually got a question
from the hangout.

00:30:49.980 --> 00:30:50.980
&gt;&gt;Trevor Johns: Ah, excellent.

00:30:50.980 --> 00:30:52.120
More hangout questions go ahead.

00:30:52.120 --> 00:30:54.549
&gt;&gt;Male #1: So the question is actually regarding
Hebrew.

00:30:54.549 --> 00:30:58.070
It's supposed to have been fixed as of the
current version of Android but it's gonna

00:30:58.070 --> 00:31:04.059
be awhile before OAMs actually start introducing
the latest version.

00:31:04.059 --> 00:31:08.159
So it could take up to, quote unquote, two
years before it's out there in the wild.

00:31:08.159 --> 00:31:12.840
Are there any fixes for this issue that we,
that developers can implement right now?

00:31:12.840 --> 00:31:15.019
&gt;&gt;Romain Guy: Not easily.

00:31:15.019 --> 00:31:20.030
You would have to, it would be difficult,
you would have to take your library like half

00:31:20.030 --> 00:31:25.409
[indistinct] like what we use to save complex
scripts and then you would have to do your

00:31:25.409 --> 00:31:28.139
own text frame to be able to position the
glyphs properly.

00:31:28.139 --> 00:31:33.220
So, Skia on the canvas API we have method
called draw [inaudible] text that helps a

00:31:33.220 --> 00:31:38.620
little bit but it's a been broken for languages
like Hebrew.

00:31:38.620 --> 00:31:41.250
So it would be, actually, pretty difficult
to do on your own.

00:31:41.250 --> 00:31:45.890
And I would not recommend doing it yourself
because it's a lot of work and it's easy to

00:31:45.890 --> 00:31:48.570
get it wrong.

00:31:48.570 --> 00:31:52.030
So I wish, you know, I had a better answer
for you and I wish I could tell you that it's

00:31:52.030 --> 00:31:57.480
been supported since 1O but unfortunately
our in server, it's gonna be in a future version

00:31:57.480 --> 00:31:58.480
of Android.

00:31:58.480 --> 00:32:00.980
&gt;&gt;Trevor Johns: Okay, great.

00:32:00.980 --> 00:32:08.710
So, next question is coming from Simon M.
in, no Simon M. Nancy in France.

00:32:08.710 --> 00:32:11.630
Either that or the city of Nancy, France,
I'm pretty sure it's Simon M. Nancy.

00:32:11.630 --> 00:32:13.830
&gt;&gt;Romain Guy: There is a Nancy, France.

00:32:13.830 --> 00:32:16.119
&gt;&gt;Trevor Johns: There is a Nancy, France?

00:32:16.119 --> 00:32:19.820
Okay, so I guess Nancy is a strange last name.

00:32:19.820 --> 00:32:25.289
Alright, so, Simon, he asks, "Is there a way
to attach a kind of selector like a stateless

00:32:25.289 --> 00:32:29.899
drawable to a text view in order to update
the text shadow attributes with touches, clicks,

00:32:29.899 --> 00:32:30.899
photos, etcetera?"

00:32:30.899 --> 00:32:32.919
&gt;&gt;Romain Guy: No, you cannot.

00:32:32.919 --> 00:32:37.620
You can only change the text color and drawables
is in the text view drawables should have

00:32:37.620 --> 00:32:39.889
drawables but you cannot change the shadow.

00:32:39.889 --> 00:32:44.480
So what you can, though, is you can overwrite
text view and then there's a method, I believe,

00:32:44.480 --> 00:32:48.980
called drawable state changed, it's a protective
method you can override that will be invoked

00:32:48.980 --> 00:32:53.200
every time the state of the view changes and
that state needs to be propagated to the drawables

00:32:53.200 --> 00:33:00.009
so, for instance, if the view goes from [indistinct]
things like that and from there you can go

00:33:00.009 --> 00:33:03.480
change yourself to a set of attributes.

00:33:03.480 --> 00:33:09.639
I have to admit that this is not something
that we thought would be useful and I'll think

00:33:09.639 --> 00:33:14.190
about it and see if we should add that to
the framework but, you know, it seems to be,

00:33:14.190 --> 00:33:19.419
it will probably be low on our list of priorities
if we do write it.

00:33:19.419 --> 00:33:21.590
&gt;&gt;Trevor Johns: Okay, great.

00:33:21.590 --> 00:33:23.779
So, um, next question here.

00:33:23.779 --> 00:33:31.460
This is from Harish from Berk, wherever that
is, and he asks, "When I run my app in Jelly

00:33:31.460 --> 00:33:38.509
Bean using the eclipse simulator I get a warning
saying choreographer skipped 2001 frames,

00:33:38.509 --> 00:33:41.519
the application may be doing too much work
on its main thread.

00:33:41.519 --> 00:33:43.720
How can I overcome this?

00:33:43.720 --> 00:33:43.999
How does it.

