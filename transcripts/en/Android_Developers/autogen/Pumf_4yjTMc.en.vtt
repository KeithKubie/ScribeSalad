WEBVTT
Kind: captions
Language: en

00:00:00.591 --> 00:00:01.851
 You always have to run the background process 

00:00:02.301 --> 00:00:04.181
 Whether it's syncing with the server to get the latest content 

00:00:04.575 --> 00:00:06.073
 Still computing data for your application 

00:00:06.512 --> 00:00:10.440
 However, running the background process poses a problem for the operating system. 

00:00:11.103 --> 00:00:14.732
 Even 20 apps have issued very important background work requests 

00:00:15.099 --> 00:00:18.059
 The application the user is using still needs to run smoothly. 

00:00:18.655 --> 00:00:21.357
 Android Oreo introduces a completely different way 

00:00:21.762 --> 00:00:23.136
 To let people rethink the issue of background services 

00:00:23.507 --> 00:00:24.993
 Some apps can't run anywhere in the background 

00:00:25.544 --> 00:00:28.761
 This includes apps that start running via implicit broadcasts. 

00:00:29.280 --> 00:00:31.373
 And apps that are opening multiple services in the background 

00:00:32.015 --> 00:00:33.952
 Let me take a look at the affected APIs. 

00:00:34.514 --> 00:00:37.851
 The orientation API has also been affected, but now I will not talk about it. 

00:00:38.469 --> 00:00:39.798
 You can check out the documentation link attached to this article to find out 

00:00:40.282 --> 00:00:41.564
 More details about orientation updates 

00:00:41.902 --> 00:00:43.884
 These changes apply to all apps designed for Android O 

00:00:44.290 --> 00:00:45.583
 Even if your app is not designed for Android O 

00:00:45.931 --> 00:00:47.271
 Users can still enable these restrictions 

00:00:47.653 --> 00:00:49.522
 So you need to pay attention to these changes anyway. 

00:00:50.119 --> 00:00:53.000
 The first background behavior change is reflected in the service aspect 

00:00:53.439 --> 00:00:57.693
 Calling the service from the background call will result in an IllegalStateException 

00:00:58.547 --> 00:01:02.061
 This change does not affect services that are open when the app is visible or in the foreground. 

00:01:02.466 --> 00:01:03.805
 Will not affect the binding service 

00:01:04.492 --> 00:01:07.327
 In the following cases, the application will be considered to exist in the foreground. 

00:01:07.925 --> 00:01:10.290
 When your app moves from the foreground to the background 

00:01:10.850 --> 00:01:13.146
 There is a short grace period before the service is closed 

00:01:13.838 --> 00:01:16.367
 When the service is shut down, it is like issuing the stopSelf command itself. 

00:01:16.849 --> 00:01:18.945
 These changes will affect all services 

00:01:19.709 --> 00:01:21.307
 So is the IntentService affected? 

00:01:21.723 --> 00:01:22.364
 um, yes 

00:01:22.838 --> 00:01:24.064
 Is the PendingIntent service affected? 

00:01:24.504 --> 00:01:27.116
 Not affected at creation but will be affected when sent 

00:01:27.434 --> 00:01:32.147
 Even the services you open in the background and want to push to the front desk will be affected. 

00:01:32.821 --> 00:01:35.454
 The good news is that there are still several ways to save your service. 

00:01:36.030 --> 00:01:37.391
 Unless your app is an alarm clock app 

00:01:37.941 --> 00:01:40.432
 Otherwise, in 90% of the cases, your best choice is 

00:01:40.790 --> 00:01:42.579
 Replace your background service with a scheduled job 

00:01:43.142 --> 00:01:45.337
 Although you can no longer open the service in the background. 

00:01:45.776 --> 00:01:47.836
 But the scheduling job can do the job for you in the background. 

00:01:48.567 --> 00:01:51.674
 This requires the framework to consider all scheduling operations and their constraints 

00:01:52.079 --> 00:01:53.713
 And decide when and when to run which scheduled job 

00:01:54.368 --> 00:01:56.573
 There are several solutions available for scheduling jobs 

00:01:56.908 --> 00:01:57.830
 Depending on the needs of your application 

00:01:58.225 --> 00:02:00.363
 I have attached the relevant text below to explain the different trade-offs. 

00:02:00.748 --> 00:02:01.590
 But if you want to hear my advice, 

00:02:01.895 --> 00:02:03.819
 I suggest you use Firebase JobDispatcher 

00:02:04.268 --> 00:02:05.834
 And the new Job IntentService 

00:02:06.486 --> 00:02:09.618
 Job IntentService can easily replace IntentService 

00:02:10.302 --> 00:02:12.632
 The following is a temporary service whitelist. 

00:02:13.185 --> 00:02:14.580
 Here are a few special cases 

00:02:14.951 --> 00:02:17.787
 The app will be temporarily put into the whitelist here. 

00:02:18.169 --> 00:02:20.894
 Take effect in a short time as if it were in the foreground 

00:02:21.467 --> 00:02:23.751
 If you want to trigger work when server data changes 

00:02:24.327 --> 00:02:26.246
 Please consider on your server and application 

00:02:26.634 --> 00:02:28.007
 Deploy Firebase Cloud Messaging 

00:02:28.682 --> 00:02:30.902
 If using high priority FCM messages 

00:02:31.308 --> 00:02:32.669
 You will receive the message immediately 

00:02:33.231 --> 00:02:34.694
 Even if the system is sleeping at the time 

00:02:35.279 --> 00:02:37.518
 You can also easily use the service whitelist 

00:02:37.915 --> 00:02:39.083
 It allows you to open the service 

00:02:39.443 --> 00:02:40.377
 Make the app look like itâ€™s in the foreground 

00:02:41.005 --> 00:02:43.180
 If it is a normal priority FCM message 

00:02:43.663 --> 00:02:46.275
 Then the message will be delivered when the user opens the device screen 

00:02:46.624 --> 00:02:47.964
 Or served in the sleep maintenance window 

00:02:48.706 --> 00:02:50.563
 But you can't be included in the whitelist of startup services. 

00:02:51.193 --> 00:02:54.559
 If your app receives both high priority and normal priority information 

00:02:55.009 --> 00:02:56.810
 One way is to try to start the service 

00:02:57.181 --> 00:02:58.910
 If it fails for any reason 

00:02:59.320 --> 00:03:01.302
 Enable the fallback scenario: start the scheduled job 

00:03:02.032 --> 00:03:05.387
 If the user wants to interact with or monitor the service 

00:03:05.837 --> 00:03:07.142
 You can create a front desk service 

00:03:08.178 --> 00:03:11.166
 Front desk service has continuous on-screen notifications 

00:03:11.566 --> 00:03:13.220
 This tells the user that the service is running. 

00:03:13.761 --> 00:03:15.652
 Various timing and navigation applications are common 

00:03:16.113 --> 00:03:17.891
 Application examples for efficiently calling services 

00:03:18.522 --> 00:03:22.675
 The problem is that the way to "open the front-end service from the background" is not working now. 

00:03:23.159 --> 00:03:26.075
 You need to use the new API to open the front desk service. 

00:03:26.739 --> 00:03:30.508
 The procedure is to use the new startForegroundService method first. 

00:03:30.892 --> 00:03:33.616
 The background service created by this method must be pushed to the foreground immediately. 

00:03:34.200 --> 00:03:36.280
 Create a notification inside the service 

00:03:36.746 --> 00:03:40.988
 Your front desk service notification should always have a lower or higher importance 

00:03:41.416 --> 00:03:42.643
 So users can see them 

00:03:43.160 --> 00:03:44.961
 It can't have a medium importance 

00:03:45.449 --> 00:03:48.868
 The final step is to have the service use the startForeground command. 

00:03:49.464 --> 00:03:52.390
 And the notification you just created yourself push yourself to the front 

00:03:52.750 --> 00:03:53.697
 If you need PendingIntent to open the front desk service 

00:03:54.044 --> 00:03:56.263
 You can use the new getForegroundService method of PendingIntent 

00:03:56.925 --> 00:03:59.098
 Then push it into the front desk in the same way. 

00:03:59.931 --> 00:04:01.394
 If the above methods are not suitable for you 

00:04:01.855 --> 00:04:03.521
 You can consider postponing your homework 

00:04:03.817 --> 00:04:04.601
 Until your app appears in the foreground 

00:04:05.029 --> 00:04:06.998
 If you want to test your application under new constraints 

00:04:07.460 --> 00:04:10.841
 I also attached the link below with the adb command. 

00:04:11.142 --> 00:04:12.007
 They can make the app run in the background 

00:04:12.441 --> 00:04:14.179
 And enforce background restrictions for your app. 

00:04:14.978 --> 00:04:18.558
 Ok, now let's talk about the limitations of implicit broadcast receivers. 

00:04:19.270 --> 00:04:22.419
 Statically settled receiver that is answering implicit broadcasts 

00:04:22.812 --> 00:04:25.401
 Will not receive these broadcasts 

00:04:26.110 --> 00:04:29.869
 Implicit broadcast has no target feature attribute 

00:04:30.308 --> 00:04:32.706
 The stationary broadcast receiver is defined in AndroidManifest 

00:04:33.010 --> 00:04:34.970
 Before Android Oreo 

00:04:35.317 --> 00:04:38.852
 Implicit broadcasts trigger everything in the Manifest that listens to it 

00:04:39.437 --> 00:04:43.055
 This leads to memory jitter under research constraints 

00:04:43.399 --> 00:04:44.614
 Because at this time a broadcast will trigger 

00:04:44.952 --> 00:04:46.843
 a lot of different components in many applications 

00:04:47.541 --> 00:04:51.120
 You can replace the static implicit broadcast receiver like this 

00:04:51.638 --> 00:04:55.228
 There are a few exceptions to note, so be sure to check this list first. 

00:04:55.814 --> 00:04:58.212
 If the broadcast is on this list, it will not be affected. 

00:04:58.605 --> 00:04:59.641
 It will continue to operate normally 

00:05:00.067 --> 00:05:03.387
 This list contains locale changes, plugged into headphones, etc. 

00:05:03.987 --> 00:05:05.401
 See the attached link below for complete documentation. 

00:05:05.789 --> 00:05:07.358
 If your broadcast is not on this exception list 

00:05:07.887 --> 00:05:09.274
 You may be able to replace it with homework. 

00:05:09.811 --> 00:05:11.082
 The job can be activated by 

00:05:11.882 --> 00:05:13.422
 Some of these situations have been added to Android O. 

00:05:13.886 --> 00:05:16.730
 In particular, the content provider observer can trigger multiple jobs. 

00:05:17.113 --> 00:05:18.013
 Used to respond to a wide variety of environments 

00:05:18.374 --> 00:05:19.599
 For example, when a user saves a new photo on their phone 

00:05:21.084 --> 00:05:24.189
 If some of your apps are already running when the broadcast is ready 

00:05:24.537 --> 00:05:26.138
 You can switch to the dynamic broadcast receiver 

00:05:26.754 --> 00:05:29.994
 This means removing your broadcast receiver code from the manifest 

00:05:30.615 --> 00:05:33.583
 You can then create, register, or unregister at runtime. 

00:05:33.920 --> 00:05:35.090
 Just like what I am doing now 

00:05:35.687 --> 00:05:38.467
 Although these scenarios are more focused on background processing 

00:05:39.028 --> 00:05:42.178
 But its benefits are that can be experienced by the front-end users. 

00:05:42.644 --> 00:05:44.036
 That means less circumventing fewer crashes 

00:05:44.691 --> 00:05:46.475
 For users who cannot use expensive, high-speed hardware 

00:05:46.916 --> 00:05:49.649
 The benefits it brings are particularly impressive 

00:05:50.616 --> 00:05:53.339
 I just talked about a lot of strategies and API changes. 

00:05:53.867 --> 00:05:54.914
 If your app is affected 

00:05:55.319 --> 00:05:57.197
 If you want to learn more and want to start to understand the code examples, 

00:05:57.572 --> 00:05:58.786
 Please refer to the attached document 

