WEBVTT
Kind: captions
Language: en

00:00:00.810 --> 00:00:02.580
Okay, we're now going to talk about Bit Torrent,

00:00:02.580 --> 00:00:05.380
which is a peer to peer content distribution

00:00:05.380 --> 00:00:09.160
network that is commonly used for file sharing

00:00:09.160 --> 00:00:13.350
and distribution of large files. Okay, suppose we have

00:00:13.350 --> 00:00:15.850
a network with a bunch of clients, all

00:00:15.850 --> 00:00:19.170
of whom want a particular file and the file

00:00:19.170 --> 00:00:22.350
might be particularly big. Now, those clients could

00:00:22.350 --> 00:00:26.120
all fetch the same file from the source, or

00:00:26.120 --> 00:00:28.580
the origin. But the problems with that of

00:00:28.580 --> 00:00:32.380
course, are that the origin may be overloaded and

00:00:32.380 --> 00:00:34.890
the act of making this request for a

00:00:34.890 --> 00:00:37.680
large file from the same location on the network

00:00:37.680 --> 00:00:41.760
may also create congestion or overload at the

00:00:41.760 --> 00:00:45.360
network where the content is being hosted. So, a

00:00:45.360 --> 00:00:48.810
solution is to fetch content from other peers. Rather

00:00:48.810 --> 00:00:51.730
then having everyone fetch the content from the origin,

00:00:51.730 --> 00:00:53.850
we can take the original file, and chop

00:00:53.850 --> 00:00:58.850
it into many different pieces and replicate different pieces

00:00:58.850 --> 00:01:01.340
on different peers in the network, as soon

00:01:01.340 --> 00:01:05.140
as possible. So the idea is that each peer

00:01:05.140 --> 00:01:08.230
is assembling the file, but it's assembling it

00:01:08.230 --> 00:01:11.020
by picking up different pieces of the file. And

00:01:11.020 --> 00:01:13.110
then it can retrieve the pieces that it

00:01:13.110 --> 00:01:17.060
doesn't have from the remaining peers in the network.

00:01:17.060 --> 00:01:20.690
By trading different pieces of the same file, everyone

00:01:20.690 --> 00:01:24.460
eventually gets the full file. The idea is that hopefully

00:01:24.460 --> 00:01:26.960
we'll be able to assemble the entire file at the

00:01:26.960 --> 00:01:29.790
end by the time all of the clients have swapped.

