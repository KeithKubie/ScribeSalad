WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.190
[MUSIC PLAYING]

00:00:02.190 --> 00:00:03.920
BILL LUAN: Shanghai
GDG is a very

00:00:03.920 --> 00:00:06.000
interesting developer community.

00:00:06.000 --> 00:00:06.830
FEMALE SPEAKER: I'm
glad somebody

00:00:06.830 --> 00:00:08.039
has asked this question.

00:00:08.039 --> 00:00:09.542
MALE SPEAKER: This is where
the magic happens.

00:00:09.542 --> 00:00:10.570
FEMALE SPEAKER: This is
primarily a question and

00:00:10.570 --> 00:00:11.470
answer show.

00:00:11.470 --> 00:00:13.450
So if any of you out there would
like to ask questions.

00:00:18.330 --> 00:00:19.100
ALAIN VONGSOUVANH:
Hello, everyone.

00:00:19.100 --> 00:00:21.240
Welcome to Google
Developers Live.

00:00:21.240 --> 00:00:24.810
Today, Claudio and I, Alain,
are going to talk about

00:00:24.810 --> 00:00:27.020
writing your first
.NET application

00:00:27.020 --> 00:00:28.630
using Google Drive.

00:00:28.630 --> 00:00:30.230
CLAUDIO CHERUBINO: Cool.

00:00:30.230 --> 00:00:34.460
So you probably know already
because we had these videos in

00:00:34.460 --> 00:00:35.630
the past two weeks.

00:00:35.630 --> 00:00:39.530
We added a new Quickstart page
to the Google Drive SDK

00:00:39.530 --> 00:00:40.350
documentation.

00:00:40.350 --> 00:00:44.220
It's developers.googl
e.com/drive/quickstart.

00:00:44.220 --> 00:00:47.630
On that page, you can find
step-by-step instructions on

00:00:47.630 --> 00:00:51.190
how to write your first command
line application for

00:00:51.190 --> 00:00:52.790
five support languages.

00:00:52.790 --> 00:00:53.430
ALAIN VONGSOUVANH: Six
languages now.

00:00:53.430 --> 00:00:54.080
CLAUDIO CHERUBINO:
Actually six.

00:00:54.080 --> 00:00:54.960
We Just added Go.

00:00:54.960 --> 00:00:58.750
So we have Java, Python, PHP,
.NET, Ruby, and Go.

00:00:58.750 --> 00:01:03.220
And we have videos covering
the Quickstart guide for

00:01:03.220 --> 00:01:04.360
Python and PHP.

00:01:04.360 --> 00:01:07.310
If you are interested in those,
you can find them in

00:01:07.310 --> 00:01:08.780
our video library.

00:01:08.780 --> 00:01:11.220
But today, we're going
to focus on .NET.

00:01:11.220 --> 00:01:15.570
And you're going to see that
most of the introductory steps

00:01:15.570 --> 00:01:16.970
are the same.

00:01:16.970 --> 00:01:20.230
So if we go to the documentation
page at

00:01:20.230 --> 00:01:23.760
developers.googl
e.com/drive/quickstart, we'll

00:01:23.760 --> 00:01:27.720
see that we have five
steps to follow.

00:01:27.720 --> 00:01:30.540
The first one is enabling
the Drive API.

00:01:30.540 --> 00:01:33.025
So to do that, we have to
go to the APIs console.

00:01:33.025 --> 00:01:34.240
ALAIN VONGSOUVANH:
That's correct.

00:01:34.240 --> 00:01:38.020
This has to be done with most
of our Google APIs.

00:01:38.020 --> 00:01:42.720
So new developers or existing
developers who already have an

00:01:42.720 --> 00:01:46.500
API project need to go to the
APIs console and enable the

00:01:46.500 --> 00:01:47.900
APIs we want to use.

00:01:47.900 --> 00:01:50.660
In our case, that would
be the Drive API.

00:01:50.660 --> 00:01:52.460
CLAUDIO CHERUBINO: So we
go to the APIs console.

00:01:52.460 --> 00:01:55.100
And if you have never created a
project before, you will see

00:01:55.100 --> 00:01:59.040
this screen with a big blue
button saying Create Project,

00:01:59.040 --> 00:02:00.130
which is what we're doing.

00:02:00.130 --> 00:02:02.440
We need to create a project
to get credentials, right?

00:02:02.440 --> 00:02:03.820
ALAIN VONGSOUVANH:
That's correct.

00:02:03.820 --> 00:02:07.520
CLAUDIO CHERUBINO: So we
do Create Project.

00:02:07.520 --> 00:02:09.520
We wait for a project
to be created.

00:02:09.520 --> 00:02:13.310
And then we have a list of
services we want to enable.

00:02:13.310 --> 00:02:16.170
The only one we need
is the Drive API.

00:02:16.170 --> 00:02:21.780
So we scroll down to Drive, and
click on it to enable it.

00:02:21.780 --> 00:02:25.690
So now your Drive API is enabled
for this project.

00:02:25.690 --> 00:02:28.900
And we have a limit of 500,000
requests per day, which should

00:02:28.900 --> 00:02:30.970
be more than enough for
today's example.

00:02:30.970 --> 00:02:32.950
ALAIN VONGSOUVANH: For a
first application, yes.

00:02:32.950 --> 00:02:36.810
But if you ever run out of
quota, there is a form on the

00:02:36.810 --> 00:02:39.850
API console that you can fill,
and we will review the quota

00:02:39.850 --> 00:02:44.520
requests and grant more quota or
get back to you to get more

00:02:44.520 --> 00:02:47.270
information.

00:02:47.270 --> 00:02:50.060
CLAUDIO CHERUBINO: So once we
enable the Drive API, we have

00:02:50.060 --> 00:02:52.780
to generate our credentials,
client ID, and client secret

00:02:52.780 --> 00:02:54.810
for the OAuth 2.0 flow.

00:02:54.810 --> 00:02:57.880
So we have to go to the
API Access tab.

00:02:57.880 --> 00:03:01.670
In the API Access tab, we have
a big blue button that says

00:03:01.670 --> 00:03:03.375
Create an OAuth 2.0 client ID.

00:03:03.375 --> 00:03:04.170
It's pretty easy.

00:03:04.170 --> 00:03:05.700
We just click on that.

00:03:05.700 --> 00:03:07.880
We have to specify
our product name.

00:03:07.880 --> 00:03:11.540
We can call it Drive
Quickstart.

00:03:11.540 --> 00:03:14.000
It's up to you, adjust
the name.

00:03:14.000 --> 00:03:16.645
And if you want, you can
add a product logo.

00:03:16.645 --> 00:03:17.860
This is just a sample.

00:03:17.860 --> 00:03:20.460
We don't have a logo, but you
can add it later if you want.

00:03:20.460 --> 00:03:22.640
So I'm going to click Next.

00:03:22.640 --> 00:03:26.330
And then you have to select if
you want a web application, a

00:03:26.330 --> 00:03:29.030
service account application, or
an installed application.

00:03:29.030 --> 00:03:31.270
So what we're going to write
today is a command line

00:03:31.270 --> 00:03:32.340
application, right?

00:03:32.340 --> 00:03:32.680
ALAIN VONGSOUVANH:
That's correct.

00:03:32.680 --> 00:03:33.100
So in--

00:03:33.100 --> 00:03:34.350
[NO AUDIO].

00:03:39.770 --> 00:03:41.170
CLAUDIO CHERUBINO: --iOS
or other, which

00:03:41.170 --> 00:03:42.280
is everything else.

00:03:42.280 --> 00:03:45.200
And ours is going to be other.

00:03:45.200 --> 00:03:48.250
It's going to be a command
line application on .NET.

00:03:48.250 --> 00:03:53.170
So you click on Create Client
ID, and you get your

00:03:53.170 --> 00:03:55.810
credentials, which are the
client ID and the client

00:03:55.810 --> 00:03:58.320
secret, which we're going to
need in our application.

00:03:58.320 --> 00:04:01.160
They can be considered as
username and password.

00:04:01.160 --> 00:04:02.370
ALAIN VONGSOUVANH:
Yes, but for--

00:04:02.370 --> 00:04:06.160
[NO AUDIO]

00:04:06.160 --> 00:04:10.650
CLAUDIO CHERUBINO: --client
ID can be, let's

00:04:10.650 --> 00:04:12.640
say, distributed around.

00:04:12.640 --> 00:04:14.410
Other people can know about
your client ID.

00:04:14.410 --> 00:04:16.410
Client ID of your application,
that's not secret.

00:04:16.410 --> 00:04:18.700
But a client secret is
actually secret.

00:04:18.700 --> 00:04:24.640
So if it happens that other
people get hold of your client

00:04:24.640 --> 00:04:27.960
secret, you have to revoke
it and get a new one.

00:04:27.960 --> 00:04:31.070
You can do that at any time by
going to the same page here

00:04:31.070 --> 00:04:32.665
and clicking on Reset
Client Secret.

00:04:32.665 --> 00:04:33.320
ALAIN VONGSOUVANH:
That's correct.

00:04:33.320 --> 00:04:35.120
CLAUDIO CHERUBINO: So let's say
at the end of this talk,

00:04:35.120 --> 00:04:36.020
that's what I'm going to do.

00:04:36.020 --> 00:04:37.100
ALAIN VONGSOUVANH: Yes.

00:04:37.100 --> 00:04:39.120
And if you ever reset your--

00:04:39.120 --> 00:04:46.440
[NO AUDIO]

00:04:46.440 --> 00:04:47.930
CLAUDIO CHERUBINO: If you reset
your client secret and

00:04:47.930 --> 00:04:50.200
you still have it in your code,
the application will

00:04:50.200 --> 00:04:50.980
just break.

00:04:50.980 --> 00:04:53.270
The credentials would
not be accepted.

00:04:53.270 --> 00:04:56.930
So let's go back to the Docs,
and we see that we've done the

00:04:56.930 --> 00:04:57.830
first step.

00:04:57.830 --> 00:04:59.930
It was very easy
and very quick.

00:04:59.930 --> 00:05:05.250
So we enabled the Drive API
and we generated our

00:05:05.250 --> 00:05:07.310
credentials for an installed
application.

00:05:07.310 --> 00:05:10.530
The second step, it's
specific to the

00:05:10.530 --> 00:05:11.630
language of your choice.

00:05:11.630 --> 00:05:14.950
Because it's the step on how to
install the client library

00:05:14.950 --> 00:05:16.270
for the language of a choice.

00:05:16.270 --> 00:05:18.680
In our case, this is
going to be .NET.

00:05:18.680 --> 00:05:21.600
There are similar instructions
for other languages.

00:05:21.600 --> 00:05:26.720
The .NET one requires you to
download a zip with the

00:05:26.720 --> 00:05:28.390
library and then reference
some of

00:05:28.390 --> 00:05:29.600
those into your project.

00:05:29.600 --> 00:05:33.830
So there's a link to the
core .NET library.

00:05:33.830 --> 00:05:37.280
We can just follow the link.

00:05:37.280 --> 00:05:38.880
It takes you to the
download page.

00:05:38.880 --> 00:05:41.110
ALAIN VONGSOUVANH: The Drive
API is a simple REST API.

00:05:41.110 --> 00:05:45.810
So if you already have an HTTP
client and you want to go

00:05:45.810 --> 00:05:48.770
through the process for writing
your own HTTP client,

00:05:48.770 --> 00:05:50.530
you can easily use the API.

00:05:50.530 --> 00:05:54.080
But we do have supported client
libraries in many

00:05:54.080 --> 00:05:56.950
languages, and it's so much
easier to use those.

00:05:56.950 --> 00:06:00.080
And our documentations are
written together on those

00:06:00.080 --> 00:06:01.180
client libraries.

00:06:01.180 --> 00:06:04.720
So we recommend you using
those client libraries.

00:06:04.720 --> 00:06:08.500
In case there are bugs, they'll
be easily fixed by us,

00:06:08.500 --> 00:06:10.460
and they'll always be
up to date with

00:06:10.460 --> 00:06:12.190
our most recent APIs.

00:06:12.190 --> 00:06:13.310
CLAUDIO CHERUBINO: Perfect.

00:06:13.310 --> 00:06:17.950
So we're brought to the Google
API .NET client library page,

00:06:17.950 --> 00:06:20.680
and what we want is the
latest stable release.

00:06:20.680 --> 00:06:23.290
So we click on it, and we have
the option to download the

00:06:23.290 --> 00:06:26.610
binary release, which includes
the DLLs, the source files, or

00:06:26.610 --> 00:06:27.060
the samples.

00:06:27.060 --> 00:06:28.860
What we need here is
the binary release.

00:06:28.860 --> 00:06:30.710
So we just click on this and
we're going to download.

00:06:30.710 --> 00:06:32.480
The file.

00:06:32.480 --> 00:06:33.500
And it's done.

00:06:33.500 --> 00:06:38.140
These ZIP files, which I'm
going to open now, will

00:06:38.140 --> 00:06:41.570
include two folders, one for the
library, the core library,

00:06:41.570 --> 00:06:43.200
and the other one
for the service.

00:06:43.200 --> 00:06:47.070
So let me instruct this on my
desktop just to be used later.

00:06:47.070 --> 00:06:48.940
So I'll copy this to
my desktop here.

00:06:48.940 --> 00:06:52.150
You can obviously put the
files wherever you want.

00:06:52.150 --> 00:06:56.860
And this will include many DLLs
you won't need because

00:06:56.860 --> 00:06:59.160
we're only going to use Drive.

00:06:59.160 --> 00:07:01.970
But if you check inside
Services, you will see a

00:07:01.970 --> 00:07:05.110
folder for each API you can
use with this library.

00:07:05.110 --> 00:07:06.610
So what we're going to
need is just Drive.

00:07:06.610 --> 00:07:09.640
And if you check Lib, instead
you will see there's a number

00:07:09.640 --> 00:07:13.250
of libraries we're going to
include in the next step.

00:07:13.250 --> 00:07:17.180
So let's go back to
the documentation.

00:07:17.180 --> 00:07:20.420
And we're done with
the second step.

00:07:20.420 --> 00:07:23.740
So the third step is to
set up the sample.

00:07:23.740 --> 00:07:27.080
Those instructions are also
specific for the language of

00:07:27.080 --> 00:07:27.850
your choice.

00:07:27.850 --> 00:07:30.280
So in .NET, we're going
to set up--

00:07:30.280 --> 00:07:34.290
we're going to create a new
solution inside Visual Studio.

00:07:34.290 --> 00:07:36.690
And then we're going to use
the code that's here.

00:07:36.690 --> 00:07:40.500
So let's start with creating a
new solution in Visual Studio.

00:07:40.500 --> 00:07:44.280
So I have Visual Studio
2010 open.

00:07:44.280 --> 00:07:49.700
I can do New Project and select
Console Application.

00:07:49.700 --> 00:07:51.245
Let's call this DriveQuickstart.

00:07:54.100 --> 00:07:57.252
Obviously you can call
it as you want to.

00:07:57.252 --> 00:08:00.610
I create a solution for this.

00:08:00.610 --> 00:08:03.310
And it's an empty solution,
as you know.

00:08:03.310 --> 00:08:06.570
What we're going to do here to
set up this is that we are

00:08:06.570 --> 00:08:11.560
going to make sure we target
.NET Framework 3.5 or 4, not

00:08:11.560 --> 00:08:12.700
Client Profile.

00:08:12.700 --> 00:08:18.980
So we do right click on the
project and go to Properties.

00:08:18.980 --> 00:08:22.140
The default framework for the
solution was .NET Framework 4

00:08:22.140 --> 00:08:22.900
Client Profile.

00:08:22.900 --> 00:08:26.140
We are going to change it
to .NET Framework 4.

00:08:26.140 --> 00:08:27.780
3.5 is also valid.

00:08:27.780 --> 00:08:28.430
ALAIN VONGSOUVANH: Yes.

00:08:28.430 --> 00:08:32.600
And I think the client library
also supports 2.5.

00:08:32.600 --> 00:08:34.039
CLAUDIO CHERUBINO: Yes,
with some caveats.

00:08:34.039 --> 00:08:34.860
ALAIN VONGSOUVANH: Yes.

00:08:34.860 --> 00:08:38.200
CLAUDIO CHERUBINO: So then we
need to add references to the

00:08:38.200 --> 00:08:39.370
DLLs we want.

00:08:39.370 --> 00:08:43.140
So we can do Add Reference
and select some

00:08:43.140 --> 00:08:44.400
of the DLLs we want.

00:08:44.400 --> 00:08:47.310
So let me browse the Lib
directory first.

00:08:47.310 --> 00:08:49.970
So they were on my desktop.

00:08:49.970 --> 00:08:52.350
So I can go to my desktop.

00:08:52.350 --> 00:08:56.140
In here, there's a folder
called Lib.

00:08:56.140 --> 00:09:00.240
What we need is DotNetOpenAuth.

00:09:00.240 --> 00:09:01.490
We need Google.Apis.Auth
entication.OAuth2.

00:09:04.430 --> 00:09:06.810
We need Google.Apis.

00:09:06.810 --> 00:09:08.450
So we can start adding those.

00:09:14.650 --> 00:09:17.030
We also need a reference
to the Drive service.

00:09:17.030 --> 00:09:17.740
ALAIN VONGSOUVANH:
That's correct.

00:09:17.740 --> 00:09:20.880
ALAIN VONGSOUVANH: So we do
add another reference.

00:09:20.880 --> 00:09:22.980
This is not here.

00:09:22.980 --> 00:09:24.580
It's in the Service folder.

00:09:24.580 --> 00:09:28.940
So we go back here, go to
Services, and we need Drive.

00:09:28.940 --> 00:09:32.100
In the DriveService folder,
you will find two

00:09:32.100 --> 00:09:34.080
DLLs for v1 and v2.

00:09:34.080 --> 00:09:38.030
This sample is for v2, which
is mostly backward

00:09:38.030 --> 00:09:38.900
compatible to v1.

00:09:38.900 --> 00:09:40.220
There's just minor changes.

00:09:40.220 --> 00:09:44.200
But now you should always use v2
if you start a new project.

00:09:44.200 --> 00:09:46.360
ALAIN VONGSOUVANH: v2 is a
separate set of v1 and has

00:09:46.360 --> 00:09:48.590
much more functionalities
than v1.

00:09:48.590 --> 00:09:51.070
And if you already have
code working on v1,

00:09:51.070 --> 00:09:51.960
it's easy to migrate.

00:09:51.960 --> 00:09:54.730
And we do have a migration
guide on the

00:09:54.730 --> 00:09:55.780
documentation page.

00:09:55.780 --> 00:09:57.770
CLAUDIO CHERUBINO: Yeah, I think
the migration from v1 to

00:09:57.770 --> 00:09:59.940
v2 is just two very
easy steps.

00:09:59.940 --> 00:10:02.240
ALAIN VONGSOUVANH: Yes, changing
some attribute's

00:10:02.240 --> 00:10:05.190
names and arguments.

00:10:05.190 --> 00:10:06.690
CLAUDIO CHERUBINO: So let's
go back to the code.

00:10:06.690 --> 00:10:08.180
So we have this empty page.

00:10:08.180 --> 00:10:11.980
But we can start from the
code we have here.

00:10:11.980 --> 00:10:14.250
So we can take all of this
and then we will

00:10:14.250 --> 00:10:16.230
explain it line by line.

00:10:16.230 --> 00:10:18.810
So let me copy it.

00:10:18.810 --> 00:10:26.740
I will copy this and replace the
content in my Program.cs

00:10:26.740 --> 00:10:27.990
standard file.

00:10:32.979 --> 00:10:34.490
This is that.

00:10:34.490 --> 00:10:35.170
ALAIN VONGSOUVANH: All set.

00:10:35.170 --> 00:10:37.740
CLAUDIO CHERUBINO: We can
build a solution.

00:10:37.740 --> 00:10:38.630
Build succeeded.

00:10:38.630 --> 00:10:40.340
We can run it.

00:10:40.340 --> 00:10:42.310
Let's just add another
line here.

00:10:42.310 --> 00:10:44.370
We're going to add it to
the documentation.

00:10:44.370 --> 00:10:46.210
So you know, this is going to be
a command line application.

00:10:46.210 --> 00:10:51.440
So when you run, it will
authenticate and then upload a

00:10:51.440 --> 00:10:52.350
file to Drive.

00:10:52.350 --> 00:10:52.970
ALAIN VONGSOUVANH: And close.

00:10:52.970 --> 00:10:53.970
CLAUDIO CHERUBINO: And close.

00:10:53.970 --> 00:10:56.240
So if you want to see the
result, it's probably better

00:10:56.240 --> 00:11:01.090
if we do a console.readline here
so that we just wait for

00:11:01.090 --> 00:11:04.040
the user to press Enter.

00:11:04.040 --> 00:11:06.890
And we need to add a file
to be uploaded to Drive.

00:11:06.890 --> 00:11:11.660
So we're going to read
from the folder that

00:11:11.660 --> 00:11:14.730
the executable is--

00:11:14.730 --> 00:11:14.950
ALAIN VONGSOUVANH:
Running from.

00:11:14.950 --> 00:11:15.540
CLAUDIO CHERUBINO: --in.

00:11:15.540 --> 00:11:19.300
So we can either manually add
the file to the debug

00:11:19.300 --> 00:11:20.380
directory or wherever.

00:11:20.380 --> 00:11:23.900
But it's probably better if we
add file from here and make

00:11:23.900 --> 00:11:26.460
sure we copy it to the
content folder.

00:11:26.460 --> 00:11:28.090
So we do Add.

00:11:28.090 --> 00:11:32.840
We do Add New Item and search
for a text file.

00:11:35.430 --> 00:11:39.700
This file is called
Document.txt.

00:11:39.700 --> 00:11:41.450
If you want to use another
file, of course, you can

00:11:41.450 --> 00:11:42.250
change it in the code.

00:11:42.250 --> 00:11:45.100
But if we want to use the code
as it is, and we want to

00:11:45.100 --> 00:11:47.160
follow the instructions step
by step, the file has to be

00:11:47.160 --> 00:11:49.250
called Document.txt.

00:11:49.250 --> 00:11:50.810
So we add it.

00:11:50.810 --> 00:11:53.330
And we could write something
like this is a

00:11:53.330 --> 00:11:57.620
test document, Save.

00:11:57.620 --> 00:12:01.230
And then remember to make sure
this file is copied to the

00:12:01.230 --> 00:12:01.860
output directory.

00:12:01.860 --> 00:12:04.390
So you can change this--

00:12:04.390 --> 00:12:05.520
ALAIN VONGSOUVANH: Build rule.

00:12:05.520 --> 00:12:08.520
CLAUDIO CHERUBINO: --the build
rule to copy always.

00:12:08.520 --> 00:12:12.290
So now if we run this
application, this

00:12:12.290 --> 00:12:14.260
file will be there.

00:12:14.260 --> 00:12:15.760
We just need another
exercise--

00:12:15.760 --> 00:12:16.070
ALAIN VONGSOUVANH:
That's right.

00:12:16.070 --> 00:12:18.460
CLAUDIO CHERUBINO: --which is
to set the credentials we

00:12:18.460 --> 00:12:21.950
generated from the Google
APIs Console.

00:12:21.950 --> 00:12:23.570
ALAIN VONGSOUVANH: Right now,
if you run the application--

00:12:23.570 --> 00:12:25.290
CLAUDIO CHERUBINO: It will just
fail the authorization.

00:12:25.290 --> 00:12:26.080
ALAIN VONGSOUVANH: Yes.

00:12:26.080 --> 00:12:27.870
CLAUDIO CHERUBINO: Because the
credentials are not valid.

00:12:27.870 --> 00:12:30.310
We have two placeholders
here for client

00:12:30.310 --> 00:12:31.320
ID and client secret.

00:12:31.320 --> 00:12:34.060
So we can go back to the APIs
Console and copy those values

00:12:34.060 --> 00:12:35.390
we generated.

00:12:35.390 --> 00:12:43.900
So we take the client ID and
we replace this right here.

00:12:47.050 --> 00:12:55.030
And then we take the client
secret and we

00:12:55.030 --> 00:12:56.280
replace that too.

00:12:58.990 --> 00:12:59.580
Now--

00:12:59.580 --> 00:13:01.480
ALAIN VONGSOUVANH: We're
ready to go.

00:13:01.480 --> 00:13:02.150
CLAUDIO CHERUBINO: Yeah.

00:13:02.150 --> 00:13:03.940
So this will run a command
line application.

00:13:03.940 --> 00:13:05.080
See what happens.

00:13:05.080 --> 00:13:08.540
So I run and debug.

00:13:08.540 --> 00:13:11.550
The first thing we do is the
authorization process.

00:13:11.550 --> 00:13:15.780
So the application tries to
start a browser in your

00:13:15.780 --> 00:13:21.830
computer to allow the user to
approve the application.

00:13:21.830 --> 00:13:23.000
ALAIN VONGSOUVANH:
That's correct.

00:13:23.000 --> 00:13:25.100
CLAUDIO CHERUBINO: So this
application is requesting

00:13:25.100 --> 00:13:27.720
permission to view and manage
the files and documents I have

00:13:27.720 --> 00:13:28.820
on Google Drive.

00:13:28.820 --> 00:13:31.050
If you want to know more details
about what we're

00:13:31.050 --> 00:13:33.910
allowing the application to do,
you can expand it and see

00:13:33.910 --> 00:13:36.110
a more detailed description.

00:13:36.110 --> 00:13:39.570
The name you see here is the
name of the application, the

00:13:39.570 --> 00:13:41.620
project we created in
the APIs Console.

00:13:41.620 --> 00:13:42.640
So it's definitely my project.

00:13:42.640 --> 00:13:44.680
I can allow access to it.

00:13:44.680 --> 00:13:46.440
ALAIN VONGSOUVANH: And this
is what the users of our

00:13:46.440 --> 00:13:49.000
application will see when
they go through the

00:13:49.000 --> 00:13:50.490
authorization flow.

00:13:50.490 --> 00:13:51.710
CLAUDIO CHERUBINO: Yes.

00:13:51.710 --> 00:13:54.160
So since this is a command line
application this is not a

00:13:54.160 --> 00:13:55.940
web application.

00:13:55.940 --> 00:14:00.530
The flow is not the best for the
user as the users have to

00:14:00.530 --> 00:14:03.810
copy this code from here and
pass it to the command line

00:14:03.810 --> 00:14:04.490
application.

00:14:04.490 --> 00:14:09.150
So I'm going to copy it from
here, go back to my shell.

00:14:09.150 --> 00:14:10.610
As you can see, the application
is running here

00:14:10.610 --> 00:14:13.490
and is waiting for me to provide
an authorization code,

00:14:13.490 --> 00:14:15.660
which is the code we just
got from the flow.

00:14:15.660 --> 00:14:20.180
So I can put the code here.

00:14:20.180 --> 00:14:22.990
And what is going to happen
next, assuming the

00:14:22.990 --> 00:14:26.960
authorization went well, and
I'm pretty sure it did, the

00:14:26.960 --> 00:14:31.510
Document.txt file is going to
be uploaded to Google Drive.

00:14:31.510 --> 00:14:35.220
And the application will
print the file ID.

00:14:35.220 --> 00:14:37.730
So whenever you upload a file to
Google Drive, you get back

00:14:37.730 --> 00:14:41.140
some metadata, including the
file ID, which is a unique ID.

00:14:41.140 --> 00:14:45.360
And the file upload was
successful, and we got our

00:14:45.360 --> 00:14:49.570
file ID, which is a long string,
and that's unique.

00:14:49.570 --> 00:14:51.040
So now the application
is waiting for me to

00:14:51.040 --> 00:14:53.360
press Enter to quit.

00:14:53.360 --> 00:14:53.990
That's it.

00:14:53.990 --> 00:14:55.210
The application worked.

00:14:55.210 --> 00:15:00.340
And if I go to my Drive, I
should have a new document

00:15:00.340 --> 00:15:03.430
called My Document, which
was just created.

00:15:03.430 --> 00:15:08.610
And if I open it, it contains
the text I put,

00:15:08.610 --> 00:15:10.350
this is a test document.

00:15:10.350 --> 00:15:11.510
So it worked.

00:15:11.510 --> 00:15:14.130
But you might wonder why this
is called My Document.

00:15:14.130 --> 00:15:15.870
I mean, the file was called
Document.txt.

00:15:15.870 --> 00:15:17.905
So, let's go back to the
code and check the

00:15:17.905 --> 00:15:19.155
code line by line.

00:15:21.300 --> 00:15:27.180
So in the code we have two
things to do, first,

00:15:27.180 --> 00:15:31.830
authorization, second, use the
Drive API to upload a file.

00:15:31.830 --> 00:15:36.190
The authorization
can be complex.

00:15:36.190 --> 00:15:38.180
The OAuth flow can look
complex if you

00:15:38.180 --> 00:15:39.030
don't know the details.

00:15:39.030 --> 00:15:41.770
But the library hides all
the complexity from you.

00:15:41.770 --> 00:15:44.700
So it's basically these
two lines here.

00:15:44.700 --> 00:15:47.290
You need to instantiate
a provider and then

00:15:47.290 --> 00:15:48.490
authenticator.

00:15:48.490 --> 00:15:50.180
ALAIN VONGSOUVANH: Yes, and
the library is also using

00:15:50.180 --> 00:15:54.670
DotNetOpenAuth, which is an open
source library supporting

00:15:54.670 --> 00:15:58.090
many types of authorization
mechanisms, including OAuth

00:15:58.090 --> 00:16:03.170
2.0 OAuth 1.0 AuthSub,
and other protocols.

00:16:03.170 --> 00:16:05.820
CLAUDIO CHERUBINO: Yeah, so that
library is basically the

00:16:05.820 --> 00:16:09.280
de-facto standard for OAuth
authorization in .NET.

00:16:09.280 --> 00:16:13.660
And so we decided not to
reinvent the wheel and instead

00:16:13.660 --> 00:16:17.040
we use a standard library that
almost everyone else uses.

00:16:17.040 --> 00:16:18.000
So we use this library.

00:16:18.000 --> 00:16:21.460
We extended it with our own
Google specific things.

00:16:21.460 --> 00:16:26.090
And so you need to do
instantiate a new native

00:16:26.090 --> 00:16:28.320
application client with your
client ID and secret.

00:16:28.320 --> 00:16:30.820
And that's where the credentials
are used.

00:16:30.820 --> 00:16:32.865
And then you have to instantiate
an OAuth

00:16:32.865 --> 00:16:34.115
authenticator.

00:16:36.970 --> 00:16:40.540
One of the parameter you pass to
the OAuth authenticator is

00:16:40.540 --> 00:16:44.610
a function, in our case, called
GetAuthorization, which

00:16:44.610 --> 00:16:47.280
is the function that the library
will automatically

00:16:47.280 --> 00:16:51.610
call when the flow has
to be started.

00:16:51.610 --> 00:16:58.580
So if we go down, here is the
GetAuthorization method, which

00:16:58.580 --> 00:17:03.410
generates the authorization URL,
spawns the browser, and

00:17:03.410 --> 00:17:05.484
waits for the user to--

00:17:05.484 --> 00:17:06.190
ALAIN VONGSOUVANH:
Enter the code.

00:17:06.190 --> 00:17:06.910
CLAUDIO CHERUBINO:
--enter the code.

00:17:06.910 --> 00:17:11.069
When that is done, it just
works on processing the

00:17:11.069 --> 00:17:14.424
authorization with the code in
the client ID and secret and

00:17:14.424 --> 00:17:17.060
all the other credentials
you have.

00:17:17.060 --> 00:17:21.450
And that will return an object
which implements the

00:17:21.450 --> 00:17:24.270
authorization state interface,
which is what we need to

00:17:24.270 --> 00:17:25.030
instantiate the service.

00:17:25.030 --> 00:17:30.470
So in fact, if we go back to
our main code, we can then

00:17:30.470 --> 00:17:35.070
instantiate a DriveService using
the OAuth object we just

00:17:35.070 --> 00:17:37.450
got from the authentication.

00:17:37.450 --> 00:17:39.010
We're done with authorization.

00:17:39.010 --> 00:17:42.850
Second part, we have to upload
a file to drive.

00:17:42.850 --> 00:17:43.790
ALAIN VONGSOUVANH: Yes.

00:17:43.790 --> 00:17:45.270
CLAUDIO CHERUBINO: How
do we do that?

00:17:45.270 --> 00:17:48.360
Uploading a file requires
two parts, right?

00:17:48.360 --> 00:17:48.675
ALAIN VONGSOUVANH: Yes.

00:17:48.675 --> 00:17:52.990
So a file in Drive, as Claudio
mentioned, has two parts, the

00:17:52.990 --> 00:17:55.350
metadata and the content.

00:17:55.350 --> 00:17:57.970
There are two types of files
actually, files that only

00:17:57.970 --> 00:18:01.830
contain metadata for
applications who already has a

00:18:01.830 --> 00:18:05.400
database and wants to sort the
content on the database.

00:18:05.400 --> 00:18:08.730
We can simply create a shortcut
on Drive, and the

00:18:08.730 --> 00:18:12.870
user would be able to see the
files on Drive and click and

00:18:12.870 --> 00:18:15.550
be redirected to the
other applications.

00:18:15.550 --> 00:18:20.260
Otherwise, the other form is
saving both metadata and

00:18:20.260 --> 00:18:21.760
content on Drive.

00:18:21.760 --> 00:18:24.760
And this will use the
user's quota.

00:18:24.760 --> 00:18:27.050
CLAUDIO CHERUBINO: And that is
exactly what we're doing here.

00:18:27.050 --> 00:18:29.560
So we are setting some metadata
first, and then we

00:18:29.560 --> 00:18:32.080
are setting the content.

00:18:32.080 --> 00:18:34.200
As this is a sample,
we basically

00:18:34.200 --> 00:18:35.890
hard-coded some metadata.

00:18:35.890 --> 00:18:39.140
So the title would always
be My Document.

00:18:39.140 --> 00:18:41.350
The description will always be
A Test Document, and the

00:18:41.350 --> 00:18:43.100
MimeType will always
be text/plain.

00:18:43.100 --> 00:18:43.790
ALAIN VONGSOUVANH: And
this is actually what

00:18:43.790 --> 00:18:45.780
we saw on your Drive.

00:18:45.780 --> 00:18:46.810
CLAUDIO CHERUBINO:
Yes, exactly.

00:18:46.810 --> 00:18:49.540
Of course, if you want to
generalize this and make a

00:18:49.540 --> 00:18:53.130
real application, you will
have to set the title

00:18:53.130 --> 00:18:56.330
according to the real title or
give a user an option to

00:18:56.330 --> 00:19:00.430
select a title and provide a
description, if any, and,

00:19:00.430 --> 00:19:02.170
obviously, set the correct
mime type.

00:19:02.170 --> 00:19:04.900
So this application will always
upload a text file to

00:19:04.900 --> 00:19:07.130
Drive or assume that we're
trying to upload a

00:19:07.130 --> 00:19:07.810
text file to Drive.

00:19:07.810 --> 00:19:11.550
But if you want, let's say, to
upload a PDF, you have to

00:19:11.550 --> 00:19:13.930
replace the mime type to
application PDF instead of

00:19:13.930 --> 00:19:15.490
text/plain.

00:19:15.490 --> 00:19:19.360
And this is all we need
for metadata and

00:19:19.360 --> 00:19:20.350
then read the content.

00:19:20.350 --> 00:19:25.880
So we use standard system.io
methods to read the content of

00:19:25.880 --> 00:19:27.660
a file from our file system.

00:19:27.660 --> 00:19:30.220
And here's where we see that
the application uses

00:19:30.220 --> 00:19:31.200
Document.txt.

00:19:31.200 --> 00:19:34.820
So if you want to obviously
give the user an option to

00:19:34.820 --> 00:19:38.560
select a file, you have
to make this dynamic.

00:19:38.560 --> 00:19:40.940
So instead of hard-coding the
name of the file, you give the

00:19:40.940 --> 00:19:42.390
user an option to
select a file,

00:19:42.390 --> 00:19:45.230
and with that a byteArray.

00:19:45.230 --> 00:19:48.990
And then, it is just a single
line of code to

00:19:48.990 --> 00:19:50.330
insert a file on Drive.

00:19:50.330 --> 00:19:54.190
So we have this
InsertMediaUpload request

00:19:54.190 --> 00:19:59.060
object which takes the
metadata and the--

00:19:59.060 --> 00:19:59.610
ALAIN VONGSOUVANH: Content.

00:19:59.610 --> 00:20:01.860
CLAUDIO CHERUBINO: --content as
a byte stream in the file

00:20:01.860 --> 00:20:05.630
type, and then you can
call upload on it.

00:20:05.630 --> 00:20:09.910
The upload, when that returns,
you will have a

00:20:09.910 --> 00:20:11.370
response body property.

00:20:11.370 --> 00:20:14.140
And the response body property
will include all the metadata

00:20:14.140 --> 00:20:16.140
that is returned from Drive.

00:20:16.140 --> 00:20:19.210
And that includes the file
title, the ID, the modified

00:20:19.210 --> 00:20:20.770
data, a lot of information.

00:20:20.770 --> 00:20:26.120
You can check what a file object
is to see what you get.

00:20:26.120 --> 00:20:32.010
And eventually, before closing
the application, we just print

00:20:32.010 --> 00:20:36.170
the file ID to show that the
application worked and we got

00:20:36.170 --> 00:20:37.320
some metadata back.

00:20:37.320 --> 00:20:37.880
And that's it.

00:20:37.880 --> 00:20:42.990
We just wait for a user to
close and we're done.

00:20:42.990 --> 00:20:46.700
So this main application, this
command line application, it

00:20:46.700 --> 00:20:50.085
probably took 10 to 15
minutes to write.

00:20:50.085 --> 00:20:50.980
ALAIN VONGSOUVANH: Yes.

00:20:50.980 --> 00:20:54.060
CLAUDIO CHERUBINO: It does
everything from scratch, then

00:20:54.060 --> 00:20:57.950
it does authorization and
uploading a file to Drive.

00:20:57.950 --> 00:20:59.735
But, of course, you
can do more now.

00:20:59.735 --> 00:21:00.170
ALAIN VONGSOUVANH: Yes.

00:21:00.170 --> 00:21:04.010
So the Drive API has many
functionalities.

00:21:04.010 --> 00:21:07.510
So inserting files, as we just
did, getting a list of files

00:21:07.510 --> 00:21:11.910
from the user according to
those codes you choose to

00:21:11.910 --> 00:21:15.000
approve your application with,
you get either the entire

00:21:15.000 --> 00:21:18.800
user's drive or only the files
that the user has granted

00:21:18.800 --> 00:21:20.390
access to your application.

00:21:20.390 --> 00:21:24.150
You can also update a file's
content, delete files, trash

00:21:24.150 --> 00:21:28.220
files, get revisions
from files.

00:21:28.220 --> 00:21:29.860
CLAUDIO CHERUBINO: And a lot
more things are in the

00:21:29.860 --> 00:21:31.500
documentation.

00:21:31.500 --> 00:21:33.860
Before we wrap up, let's just
get back to the Doc.

00:21:33.860 --> 00:21:36.990
So we explained how to build
this application and how to

00:21:36.990 --> 00:21:39.110
run the sample, and
we tried that.

00:21:39.110 --> 00:21:42.760
And what Alain is saying is
covered in the next section,

00:21:42.760 --> 00:21:44.200
which is the last section
of the Quickstart.

00:21:44.200 --> 00:21:47.190
So you might want to expand
this sample to

00:21:47.190 --> 00:21:49.790
do a lot more things.

00:21:49.790 --> 00:21:53.940
And another next step we might
recommend is for you to check

00:21:53.940 --> 00:21:57.090
the real sample applications
we have.

00:21:57.090 --> 00:21:59.420
So this is a very simple
basic application.

00:21:59.420 --> 00:22:02.270
With this, you get started in
five minutes, and you have a

00:22:02.270 --> 00:22:03.500
working application.

00:22:03.500 --> 00:22:08.400
But if you want to do any more
and you still need help on

00:22:08.400 --> 00:22:12.980
that, in the documentation we
have a section for example

00:22:12.980 --> 00:22:14.010
applications.

00:22:14.010 --> 00:22:18.140
So if you click on that, you
will see that we have a sample

00:22:18.140 --> 00:22:21.830
application that is called
DrEdit or DoctorEdit.

00:22:21.830 --> 00:22:23.950
We will eventually decide
what the right name is.

00:22:23.950 --> 00:22:28.620
It's a text editor that uses
Drive to store files.

00:22:28.620 --> 00:22:33.170
And we have a tutorial
for five languages.

00:22:33.170 --> 00:22:34.590
Well, it's still six now.

00:22:34.590 --> 00:22:35.460
Well, Go is coming.

00:22:35.460 --> 00:22:36.290
ALAIN VONGSOUVANH:
Go is coming.

00:22:36.290 --> 00:22:38.150
CLAUDIO CHERUBINO: And so, for
instance, if you're still

00:22:38.150 --> 00:22:43.240
using .NET, you might want
to check DrEdit for .NET.

00:22:43.240 --> 00:22:45.850
And that is going to be a more
complex application.

00:22:45.850 --> 00:22:48.350
It's an ASP.NET MVC
application.

00:22:48.350 --> 00:22:51.790
So it's a web application that
takes care of everything, all

00:22:51.790 --> 00:22:53.730
the edge cases in
authorization.

00:22:53.730 --> 00:22:55.150
ALAIN VONGSOUVANH: Integration
with the Drive UI.

00:22:55.150 --> 00:22:56.700
CLAUDIO CHERUBINO: Integration
with the Drive UI.

00:22:56.700 --> 00:22:59.330
And it's a more complex
sample.

00:22:59.330 --> 00:23:01.950
But if you get started with
the Quickstart, then this

00:23:01.950 --> 00:23:03.085
should be very easy
to understand.

00:23:03.085 --> 00:23:06.320
And all the code is here, the
project can be downloaded from

00:23:06.320 --> 00:23:07.950
the repository.

00:23:07.950 --> 00:23:10.720
And it is basically explained
line by line.

00:23:10.720 --> 00:23:12.900
So it should be very
easy to understand.

00:23:12.900 --> 00:23:16.340
And of course, you might
still have questions.

00:23:16.340 --> 00:23:16.650
ALAIN VONGSOUVANH: Yes.

00:23:16.650 --> 00:23:19.360
So if you have questions, we
will be looking for them on

00:23:19.360 --> 00:23:23.840
Stack Overflow under the
google-drive-sdk tag.

00:23:23.840 --> 00:23:25.520
CLAUDIO CHERUBINO:
OK, perfect.

00:23:25.520 --> 00:23:29.230
I think that's it for today.

00:23:29.230 --> 00:23:32.580
I hope you liked learning how
to build your first Drive

00:23:32.580 --> 00:23:35.070
application with .NET.

00:23:35.070 --> 00:23:37.180
And we'll see you next time.

00:23:37.180 --> 00:23:38.200
ALAIN VONGSOUVANH: Yes,
but it was easy.

00:23:38.200 --> 00:23:39.120
CLAUDIO CHERUBINO: Yeah.

00:23:39.120 --> 00:23:39.940
Thank you.

00:23:39.940 --> 00:23:40.540
ALAIN VONGSOUVANH: Bye.

00:23:40.540 --> 00:24:00.133
[MUSIC PLAYING]

