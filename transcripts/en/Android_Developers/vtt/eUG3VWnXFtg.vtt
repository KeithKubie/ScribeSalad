WEBVTT
Kind: captions
Language: en

00:00:05.589 --> 00:00:08.130
ADAM POWELL: Hello, everyone,
and welcome to Fragment Tricks.

00:00:08.130 --> 00:00:10.713
Today we're going to be talking
about a few effective patterns

00:00:10.713 --> 00:00:12.750
for using the fragment
APIs in your apps.

00:00:12.750 --> 00:00:14.610
Now, some of these
are going to BE--

00:00:14.610 --> 00:00:16.290
they may seem a
little bit basic,

00:00:16.290 --> 00:00:19.830
but they're also things that
are going to help you build apps

00:00:19.830 --> 00:00:22.980
in a way that factors your
code effectively, encapsulates

00:00:22.980 --> 00:00:26.160
things, and makes sure that
you can keep your code clean.

00:00:26.160 --> 00:00:27.702
GEORGE MOUNT: Stupid
fragment tricks.

00:00:27.702 --> 00:00:28.451
ADAM POWELL: Yeah.

00:00:28.451 --> 00:00:30.090
GEORGE MOUNT: Stupid
fragment tricks.

00:00:32.402 --> 00:00:33.860
ADAM POWELL: Anyway,
so let's go in

00:00:33.860 --> 00:00:34.980
and start with a
little bit of history

00:00:34.980 --> 00:00:37.620
behind this, which kind of
helps understand where some

00:00:37.620 --> 00:00:39.960
of the fragment APIs came from.

00:00:39.960 --> 00:00:42.360
So as we started moving
into large screen

00:00:42.360 --> 00:00:45.240
devices in the honeycomb
era, we started

00:00:45.240 --> 00:00:47.430
realizing that there are
a few specific patterns

00:00:47.430 --> 00:00:49.610
in the way that some
apps are put together,

00:00:49.610 --> 00:00:51.150
especially apps of the time.

00:00:51.150 --> 00:00:53.790
You've got one area that's
devoted to your navigation,

00:00:53.790 --> 00:00:56.340
and you've got another area
that's devoted to content.

00:00:56.340 --> 00:00:58.620
And when you put these
two things together,

00:00:58.620 --> 00:01:00.390
you can imagine
on a small screen

00:01:00.390 --> 00:01:02.820
device you might see the
navigation as one screen

00:01:02.820 --> 00:01:05.102
that advances to
a content screen,

00:01:05.102 --> 00:01:06.810
and when you're on a
larger screen device

00:01:06.810 --> 00:01:08.820
you're able to show the
same things side by side.

00:01:08.820 --> 00:01:11.111
So we had this question of
how do you write an app that

00:01:11.111 --> 00:01:13.950
works seamlessly across both?

00:01:13.950 --> 00:01:15.870
So the fragment APIs were born.

00:01:15.870 --> 00:01:19.770
It was something that you could
use to factor out your activity

00:01:19.770 --> 00:01:21.655
components into
two separate pieces

00:01:21.655 --> 00:01:24.030
that you could show differently
based on different device

00:01:24.030 --> 00:01:25.750
configurations.

00:01:25.750 --> 00:01:28.920
Now this works really well for
some applications, like Gmail,

00:01:28.920 --> 00:01:30.540
but your app
probably isn't Gmail.

00:01:30.540 --> 00:01:32.550
If you followed the
development of app design

00:01:32.550 --> 00:01:34.500
over the past several
years, you realize

00:01:34.500 --> 00:01:36.960
that this sort of
pattern just doesn't

00:01:36.960 --> 00:01:38.980
fit for a lot of things.

00:01:38.980 --> 00:01:42.430
However, it's still extremely
useful for representing

00:01:42.430 --> 00:01:46.810
your application as a
series of destinations.

00:01:46.810 --> 00:01:48.810
So even on a small
screen device,

00:01:48.810 --> 00:01:51.018
you might have an app that
looks something like this.

00:01:51.018 --> 00:01:53.137
We've got our little
application that--

00:01:53.137 --> 00:01:54.720
where you can order
some micro kitchen

00:01:54.720 --> 00:01:57.240
snacks around the Google campus.

00:01:57.240 --> 00:01:58.920
And for each one
of these screens,

00:01:58.920 --> 00:02:00.750
you can perform a
replace transaction

00:02:00.750 --> 00:02:03.690
to replace the destination
that you were looking

00:02:03.690 --> 00:02:06.610
at previously with the new one.

00:02:06.610 --> 00:02:10.241
Replace transaction will remove
any fragment in the container

00:02:10.241 --> 00:02:11.490
and then add the new fragment.

00:02:13.704 --> 00:02:15.370
So the nice thing
about this is that you

00:02:15.370 --> 00:02:17.786
can place these particular
transactions on the back stack,

00:02:17.786 --> 00:02:20.950
and we'll go ahead and handle
that back navigation for you.

00:02:20.950 --> 00:02:23.830
Now the nice thing about this is
that the content and navigation

00:02:23.830 --> 00:02:27.182
pane separation isn't limited
to just large screens.

00:02:27.182 --> 00:02:29.140
This can really help to
keep your chrome stable

00:02:29.140 --> 00:02:30.070
in your application.

00:02:30.070 --> 00:02:33.940
So any time that you have
things like bars, net drawers,

00:02:33.940 --> 00:02:36.024
bottom navigation bars,
any of these things

00:02:36.024 --> 00:02:37.690
that you want to keep
stable and perform

00:02:37.690 --> 00:02:40.434
some consistent animations
from one screen to another,

00:02:40.434 --> 00:02:42.100
this really lets you
do it in a way that

00:02:42.100 --> 00:02:44.379
is really difficult to
accomplish with the activity

00:02:44.379 --> 00:02:46.420
to activity transitions,
where you can't preserve

00:02:46.420 --> 00:02:48.520
that kind of
continuity in your UI

00:02:48.520 --> 00:02:51.117
as you navigate deeper
in your app's hierarchy.

00:02:54.100 --> 00:02:56.894
GEORGE MOUNT: Let's talk
a little navigation flows.

00:02:56.894 --> 00:02:58.560
Now, when I talk about
navigation flows,

00:02:58.560 --> 00:03:01.770
I'm talking about those
step-by-step flows

00:03:01.770 --> 00:03:03.610
that you have in
your application.

00:03:03.610 --> 00:03:11.880
So when you have a checkout or
a sign up or a setup wizard,

00:03:11.880 --> 00:03:13.890
the users are going
to go step by step

00:03:13.890 --> 00:03:16.500
through their
navigation, and then they

00:03:16.500 --> 00:03:18.780
might want to wander back
using the back button

00:03:18.780 --> 00:03:20.070
and then go forward again.

00:03:20.070 --> 00:03:21.529
And then when
they're all done, you

00:03:21.529 --> 00:03:22.778
want to be all done with that.

00:03:22.778 --> 00:03:24.195
You don't want
that one user to be

00:03:24.195 --> 00:03:26.278
able to go back through
the checkout process again

00:03:26.278 --> 00:03:27.240
with the back button.

00:03:27.240 --> 00:03:29.200
That would kind of
suck, wouldn't it?

00:03:29.200 --> 00:03:31.870
So we're going to
here focus on our app,

00:03:31.870 --> 00:03:33.802
the Micro Kitchen
app, which we've

00:03:33.802 --> 00:03:35.260
been trying to sell
to the Googlers

00:03:35.260 --> 00:03:37.956
to sell them the free
micro kitchen snacks.

00:03:37.956 --> 00:03:39.830
ADAM POWELL: It hasn't
been working very well

00:03:39.830 --> 00:03:40.560
GEORGE MOUNT: It has not.

00:03:40.560 --> 00:03:42.340
But we know we have
new customers coming

00:03:42.340 --> 00:03:43.890
in the summer--

00:03:43.890 --> 00:03:46.660
interns-- so we're
pretty sure that they

00:03:46.660 --> 00:03:50.350
will partake in our great
free micro kitchen service.

00:03:53.070 --> 00:03:54.810
And when the user
comes in, they're

00:03:54.810 --> 00:03:57.640
going to click on the check
out-- on the cart button.

00:03:57.640 --> 00:03:59.098
And what we're
going to do is we're

00:03:59.098 --> 00:04:02.070
going to remove the
little cart at the bottom,

00:04:02.070 --> 00:04:03.870
that little fragment
there, and then we're

00:04:03.870 --> 00:04:06.170
also going to move that big--

00:04:06.170 --> 00:04:10.550
replace that big fragment at
the top with our new fragment,

00:04:10.550 --> 00:04:11.990
that we're going to label cart.

00:04:11.990 --> 00:04:13.365
Not the fragment,
but we're going

00:04:13.365 --> 00:04:14.715
to label the state "Cart."

00:04:14.715 --> 00:04:16.589
And I'm going to talk
about that a little bit

00:04:16.589 --> 00:04:21.500
later, why we're giving it
a name on the back stack.

00:04:21.500 --> 00:04:23.840
And then when they
hit check out,

00:04:23.840 --> 00:04:27.530
they can then choose the
address they want to ship to,

00:04:27.530 --> 00:04:29.510
and we're just going to
replace that fragment

00:04:29.510 --> 00:04:32.150
with their address
selection one.

00:04:32.150 --> 00:04:34.530
And they can choose
payment then,

00:04:34.530 --> 00:04:36.530
and we replace it again
with a payment fragment.

00:04:36.530 --> 00:04:38.300
And again, it's
at the back stack.

00:04:38.300 --> 00:04:42.080
And this time, we don't need a
name for this back stack state.

00:04:42.080 --> 00:04:43.070
Because we don't need--

00:04:43.070 --> 00:04:44.480
well, we'll talk about it.

00:04:44.480 --> 00:04:46.950
Well they can go back through
the back stack if they want.

00:04:46.950 --> 00:04:48.590
They can navigate back and
choose a different address

00:04:48.590 --> 00:04:50.360
if they want by hitting
the back button.

00:04:50.360 --> 00:04:53.585
And as developers, we don't
have to do any other work.

00:04:53.585 --> 00:04:56.570
Back stack just pops
that fragment right back

00:04:56.570 --> 00:05:01.250
into our state, and it's great.

00:05:01.250 --> 00:05:05.090
And then the user can go back
through, choose a payment,

00:05:05.090 --> 00:05:07.370
and then confirm the purchase.

00:05:07.370 --> 00:05:10.180
Now here, in the
confirm purchase screen,

00:05:10.180 --> 00:05:12.910
we're to do a couple
of things all at once.

00:05:12.910 --> 00:05:15.040
We're going to do
a pop back stack,

00:05:15.040 --> 00:05:18.640
all the way back to
that original cart state

00:05:18.640 --> 00:05:19.720
that we said.

00:05:19.720 --> 00:05:23.020
And because we passed
the inclusive flag there,

00:05:23.020 --> 00:05:26.980
now it pops that
cart state also.

00:05:26.980 --> 00:05:30.250
And it'll go all the way
back, pop all the states back,

00:05:30.250 --> 00:05:34.420
and then, at the same time,
we add this new transaction,

00:05:34.420 --> 00:05:39.092
which will replace that state
with our thank you page.

00:05:39.092 --> 00:05:41.050
Because we want to thank
them for giving them--

00:05:41.050 --> 00:05:43.090
for giving us all their money.

00:05:43.090 --> 00:05:45.430
It's pretty good, I mean,
we need to thank them

00:05:45.430 --> 00:05:48.560
for giving us all their money.

00:05:48.560 --> 00:05:51.260
Now on this one, we have
a little different thing

00:05:51.260 --> 00:05:51.920
going on.

00:05:51.920 --> 00:05:55.640
The OK button doesn't just
create a new transaction,

00:05:55.640 --> 00:05:58.110
it's going to pop a
back stack as well.

00:05:58.110 --> 00:06:01.096
Now, no matter what the
user does, it's going to--

00:06:01.096 --> 00:06:02.720
the user's going to
do the right thing.

00:06:02.720 --> 00:06:05.000
They're not going to add
a new transaction-- add

00:06:05.000 --> 00:06:06.830
to that state.

00:06:06.830 --> 00:06:09.230
We don't want to
have that thank you

00:06:09.230 --> 00:06:13.044
page come back again if
they pop the back stack.

00:06:13.044 --> 00:06:14.960
So it's going to come
right back to where they

00:06:14.960 --> 00:06:18.450
can buy more stuff from us.

00:06:18.450 --> 00:06:23.270
So you can see some of the keys
here to back stack management.

00:06:23.270 --> 00:06:26.240
Always maintain your
back stack going forward.

00:06:26.240 --> 00:06:29.270
It's so much easier to
manage your back stack

00:06:29.270 --> 00:06:30.980
if you choose the
direction your user is

00:06:30.980 --> 00:06:35.810
going to go on the back stack
as you navigate forward.

00:06:35.810 --> 00:06:38.600
Don't, at the time the user
presses the back button,

00:06:38.600 --> 00:06:40.340
choose what they're going to do.

00:06:40.340 --> 00:06:42.325
That's a lot harder to manage.

00:06:46.380 --> 00:06:49.410
So to take advantage
of this kind of thing,

00:06:49.410 --> 00:06:51.780
sometimes you need to do
some synthetic back stack

00:06:51.780 --> 00:06:52.590
management.

00:06:52.590 --> 00:06:58.530
That means if you
have an external link

00:06:58.530 --> 00:07:01.540
into your application, some
kind of deep, nested thing,

00:07:01.540 --> 00:07:04.174
they're selecting a
particular cart item.

00:07:04.174 --> 00:07:05.590
And when they hit
the back button,

00:07:05.590 --> 00:07:07.600
you don't want them
to go to some--

00:07:07.600 --> 00:07:10.140
the main screen, you want
them to go into the category,

00:07:10.140 --> 00:07:10.800
perhaps.

00:07:10.800 --> 00:07:12.509
ADAM POWELL: Or even
from a notification.

00:07:12.509 --> 00:07:14.050
GEORGE MOUNT: Or
from a notification,

00:07:14.050 --> 00:07:15.090
that's a great example.

00:07:15.090 --> 00:07:16.560
From a notification.

00:07:16.560 --> 00:07:18.820
Or maybe a search
inside your application,

00:07:18.820 --> 00:07:21.860
you might want to
have the same thing.

00:07:21.860 --> 00:07:23.450
So what do we do?

00:07:23.450 --> 00:07:25.805
Well, we just execute a
whole bunch of transactions

00:07:25.805 --> 00:07:26.680
all at the same time.

00:07:26.680 --> 00:07:29.900
Just build up the set for them,
boom, boom, boom, boom, boom.

00:07:29.900 --> 00:07:32.512
Execute them.

00:07:32.512 --> 00:07:33.970
ADAM POWELL: Well,
hang on, George.

00:07:33.970 --> 00:07:36.879
So if I can make
repeated transactions,

00:07:36.879 --> 00:07:39.170
then that means that each
one of those transactions I'm

00:07:39.170 --> 00:07:41.600
going to start and
stop those fragments

00:07:41.600 --> 00:07:43.910
as I execute each one in turn.

00:07:43.910 --> 00:07:46.490
So that can be really
expensive, right?

00:07:46.490 --> 00:07:49.161
So how do I go ahead and
maintain that back stack state

00:07:49.161 --> 00:07:51.660
while still not doing a whole
lot of really heavyweight work

00:07:51.660 --> 00:07:54.402
as I start and stop each one of
those fragments along the way?

00:07:54.402 --> 00:07:56.360
GEORGE MOUNT: Yeah that's
a really big problem.

00:07:56.360 --> 00:07:58.910
Because you have to
create all those views,

00:07:58.910 --> 00:08:00.244
tear them down again, inflation.

00:08:00.244 --> 00:08:02.743
ADAM POWELL: Right, it seems
like a lot of unnecessary work.

00:08:02.743 --> 00:08:04.670
GEORGE MOUNT: It is a
lot of unnecessary work.

00:08:04.670 --> 00:08:06.640
Sorry, guys.

00:08:06.640 --> 00:08:09.630
Well-- you want to fix that?

00:08:09.630 --> 00:08:10.380
ADAM POWELL: Sure.

00:08:10.380 --> 00:08:11.380
GEORGE MOUNT: All right.

00:08:15.720 --> 00:08:16.850
Thanks, Adam.

00:08:16.850 --> 00:08:18.570
So now we have
this new thing here

00:08:18.570 --> 00:08:21.060
called set reordering allowed.

00:08:21.060 --> 00:08:24.930
And what this does is it
allows all of the execution

00:08:24.930 --> 00:08:29.940
to happen all at once, without
changing your fragment state.

00:08:29.940 --> 00:08:33.133
And then at the very end, we
bring up all the fragments

00:08:33.133 --> 00:08:35.549
that need to be brought up and
tear down all the fragments

00:08:35.549 --> 00:08:37.200
that need be torn down.

00:08:37.200 --> 00:08:39.600
And now your fragments don't
have to go through all that,

00:08:39.600 --> 00:08:43.110
oh, I got added, I got removed,
I got added, I got removed.

00:08:43.110 --> 00:08:46.080
So we can optimize this for you.

00:08:46.080 --> 00:08:50.190
But you have to watch out,
because if you expected

00:08:50.190 --> 00:08:52.930
a fragment to
exist that didn't--

00:08:52.930 --> 00:08:55.300
that might have
been optimized out,

00:08:55.300 --> 00:08:58.560
if you expected it to
go through its creation,

00:08:58.560 --> 00:08:59.970
it might not have done that.

00:08:59.970 --> 00:09:01.680
So you have to
watch out for this.

00:09:01.680 --> 00:09:03.940
So you use this in
your applications.

00:09:03.940 --> 00:09:07.530
It's great to use, but expect
some slightly different

00:09:07.530 --> 00:09:08.820
behavior than before.

00:09:13.730 --> 00:09:15.860
Now you might have seen
in our application,

00:09:15.860 --> 00:09:19.400
that as the user clicked
through the check out screen,

00:09:19.400 --> 00:09:24.070
it was just pop, pop, pop, pop.

00:09:24.070 --> 00:09:26.810
Those screens changed
instantaneously,

00:09:26.810 --> 00:09:29.680
and that's not very pleasant.

00:09:29.680 --> 00:09:34.330
So what we can do is
we can add transitions.

00:09:34.330 --> 00:09:38.440
The easiest ones to use
are the basic transitions

00:09:38.440 --> 00:09:41.260
that come with fragments,
and there are three options.

00:09:41.260 --> 00:09:44.350
And this is done
on the transaction,

00:09:44.350 --> 00:09:49.210
you call set.Transition,
and the basic transitions

00:09:49.210 --> 00:09:54.630
are fade, open, and close.

00:09:54.630 --> 00:09:58.650
And from this it's really
hard to see the differences,

00:09:58.650 --> 00:10:01.650
but you can see the fade
has just a simple crossfade,

00:10:01.650 --> 00:10:05.040
and the open and close
also have a fade and zoom.

00:10:05.040 --> 00:10:06.870
So play with it a
little bit, see what

00:10:06.870 --> 00:10:08.590
works well in your application.

00:10:08.590 --> 00:10:10.670
See what you like best.

00:10:10.670 --> 00:10:17.110
It provides a nice, subtle
effect for your transitions.

00:10:17.110 --> 00:10:19.900
ADAM POWELL: What if I want to
do something a little bit more

00:10:19.900 --> 00:10:21.689
in keeping with my
own app's design?

00:10:21.689 --> 00:10:22.480
GEORGE MOUNT: Yeah.

00:10:22.480 --> 00:10:24.646
If you want something a
little bit more custom, then

00:10:24.646 --> 00:10:27.910
we can use animations.

00:10:27.910 --> 00:10:30.370
Animations in this case
is the view animations

00:10:30.370 --> 00:10:40.460
that allow you to change scale,
rotation, translation, alpha,

00:10:40.460 --> 00:10:42.300
so fading.

00:10:42.300 --> 00:10:44.010
So you can set those four--

00:10:44.010 --> 00:10:45.900
and this is only on
support library--

00:10:45.900 --> 00:10:49.950
you can set those on
the view coming in,

00:10:49.950 --> 00:10:53.190
the fragment coming
in, a separate one

00:10:53.190 --> 00:10:55.380
for the fragment being popped--

00:10:55.380 --> 00:10:58.080
sorry, being removed--
and also the same things

00:10:58.080 --> 00:11:00.350
for the pop as well.

00:11:00.350 --> 00:11:02.100
The ones that are being
added and removed.

00:11:02.100 --> 00:11:04.391
So you can have different
animations for each of those,

00:11:04.391 --> 00:11:06.880
and you can an effect like
this, which is very nice.

00:11:06.880 --> 00:11:11.040
A slide effect, which you
couldn't do with the basic

00:11:11.040 --> 00:11:15.310
animations-- basic transitions.

00:11:15.310 --> 00:11:19.640
Now, if you're working with
the framework fragments,

00:11:19.640 --> 00:11:21.680
you can do the same
things with animators.

00:11:21.680 --> 00:11:24.290
But they provide
even more benefit,

00:11:24.290 --> 00:11:28.611
because now you can animate
any property on the view.

00:11:28.611 --> 00:11:30.860
That means you can have some
really custom animations,

00:11:30.860 --> 00:11:32.040
whatever you want to do.

00:11:32.040 --> 00:11:33.550
It's great.

00:11:33.550 --> 00:11:37.320
And what's better
is now you can also

00:11:37.320 --> 00:11:40.501
do that in the support library.

00:11:40.501 --> 00:11:48.140
AUDIENCE: [APPLAUSE]

00:11:48.140 --> 00:11:50.990
GEORGE MOUNT: Transition style
is also added for the framework

00:11:50.990 --> 00:11:52.820
so that you can do this--

00:11:52.820 --> 00:11:58.680
set your animators in a style.

00:11:58.680 --> 00:12:02.160
Now, a lot of you have been
using the activity transitions,

00:12:02.160 --> 00:12:05.500
and you want to have that
work with fragments as well.

00:12:05.500 --> 00:12:08.610
So activity transitions
allows this great ability

00:12:08.610 --> 00:12:15.220
to have a shared element change
from one view to another.

00:12:15.220 --> 00:12:17.820
So in this case, from
one fragment to another.

00:12:17.820 --> 00:12:21.240
And it works in activity
transitions from Lollipop on.

00:12:21.240 --> 00:12:23.850
It's very useful.

00:12:23.850 --> 00:12:27.780
And so we added the
ability to do that.

00:12:27.780 --> 00:12:32.252
So in fragments, instead of
doing this on the transaction,

00:12:32.252 --> 00:12:33.710
you do this on the
fragment itself.

00:12:33.710 --> 00:12:37.640
You can set the animation--
the transition to do

00:12:37.640 --> 00:12:43.560
on the views that are coming in,
and this is for all the views

00:12:43.560 --> 00:12:46.370
that are not the SharedElement.

00:12:46.370 --> 00:12:48.090
So that's the EnterTransition.

00:12:48.090 --> 00:12:50.460
And the
SharedElementEnterTransition,

00:12:50.460 --> 00:12:54.000
this is the one you do on
the view that is moving.

00:12:54.000 --> 00:12:56.010
This is our SharedElement,
in this case,

00:12:56.010 --> 00:12:57.051
I don't know what it was.

00:12:57.051 --> 00:12:58.690
The almonds, maybe.

00:12:58.690 --> 00:13:01.110
And here this move
uses a combination

00:13:01.110 --> 00:13:05.310
of change bounds, change
transform, and change image

00:13:05.310 --> 00:13:07.230
transform.

00:13:07.230 --> 00:13:08.730
Too many things to
fit on the slide,

00:13:08.730 --> 00:13:11.160
but that's what it is here.

00:13:11.160 --> 00:13:17.040
And then in the transaction, we
add the SharedElement itself.

00:13:17.040 --> 00:13:20.730
And the SharedElement is the
view that's in that fragment,

00:13:20.730 --> 00:13:23.110
and then we have a target name.

00:13:23.110 --> 00:13:25.700
This name, this is the
SharedElement transition name,

00:13:25.700 --> 00:13:29.760
and this is the name that you've
given the transition element

00:13:29.760 --> 00:13:32.620
in the fragment that has
not been inflated yet.

00:13:32.620 --> 00:13:34.920
So in this case, it's
in the my fragment

00:13:34.920 --> 00:13:37.070
that's being pulled in.

00:13:39.650 --> 00:13:45.454
And then, we can have our
transition, which is great,

00:13:45.454 --> 00:13:46.370
but something's wrong.

00:13:49.490 --> 00:13:52.021
Can you see it?

00:13:52.021 --> 00:13:53.770
Everyone raise his
hand if you can see it.

00:13:53.770 --> 00:13:55.060
What's the problem with this?

00:13:55.060 --> 00:13:57.150
OK, a lot of you
can see the problem.

00:13:57.150 --> 00:14:00.580
Right, transition's
only working one way.

00:14:00.580 --> 00:14:03.970
It works great getting
into the detail view,

00:14:03.970 --> 00:14:05.950
but when we come back
to that main view

00:14:05.950 --> 00:14:10.340
with all of these other
elements, you're not seeing it,

00:14:10.340 --> 00:14:12.160
and why is that?

00:14:12.160 --> 00:14:14.860
Well that main view
is a recycler view,

00:14:14.860 --> 00:14:18.730
and what's happening
is the recycler view

00:14:18.730 --> 00:14:26.280
will lay out its views after
the set adapter call is made.

00:14:26.280 --> 00:14:28.200
So we have to wait
for the layout call

00:14:28.200 --> 00:14:30.180
after this set
adapter call is made.

00:14:30.180 --> 00:14:32.500
And the transition's
coming in and said, hey,

00:14:32.500 --> 00:14:33.720
I want the shared element.

00:14:33.720 --> 00:14:36.020
And it's not there,
so what does it do?

00:14:36.020 --> 00:14:37.690
It says, oh, give up.

00:14:37.690 --> 00:14:40.410
Fade out.

00:14:40.410 --> 00:14:43.512
And so in activity
transitions, what do we do?

00:14:43.512 --> 00:14:44.220
Well, it's great.

00:14:44.220 --> 00:14:47.180
We have this thing called
postponing the transaction--

00:14:47.180 --> 00:14:48.450
postponing the transition.

00:14:48.450 --> 00:14:50.730
So we have a
postponeEnterTransition,

00:14:50.730 --> 00:14:52.530
and then when the
views are ready,

00:14:52.530 --> 00:14:55.180
we call
startPostponedEnterTransition.

00:14:55.180 --> 00:14:57.254
So it gives you all
the ability to say, OK,

00:14:57.254 --> 00:14:58.170
just hold on a second.

00:14:58.170 --> 00:15:00.586
Wait for my view, come on,
come on, views, come on, views.

00:15:00.586 --> 00:15:07.060
[WHISTLES] And then when they're
all ready, then you say go.

00:15:07.060 --> 00:15:11.310
So we want to do this
for fragments as well.

00:15:11.310 --> 00:15:12.660
So here we go.

00:15:12.660 --> 00:15:14.780
We can do it for fragments.

00:15:14.780 --> 00:15:18.600
But there's one extra
thing you need to do.

00:15:18.600 --> 00:15:22.300
You absolutely have to have
the set reordering allowed.

00:15:22.300 --> 00:15:26.830
Because for a short time
while you're postponing

00:15:26.830 --> 00:15:29.870
both fragments are there,
they're both active.

00:15:29.870 --> 00:15:32.370
And that is not the
order you expect, is it?

00:15:32.370 --> 00:15:35.320
You expected one to be removed,
and another one to be added.

00:15:35.320 --> 00:15:39.680
So both views for both fragments
are in the created save.

00:15:39.680 --> 00:15:41.830
So that's going to be
a little weird for you,

00:15:41.830 --> 00:15:44.350
so we want to make sure
that you know that you're

00:15:44.350 --> 00:15:46.670
getting into this situation.

00:15:46.670 --> 00:15:51.060
So let's see how it's
done in our application.

00:15:51.060 --> 00:15:54.060
In my onCreate view-- now,
you can do this anytime before

00:15:54.060 --> 00:15:55.030
onCreate--

00:15:55.030 --> 00:15:56.234
onCreate view.

00:15:56.234 --> 00:15:58.150
So if you wanted to, you
could do it onCreate,

00:15:58.150 --> 00:16:00.160
whatever you want to do.

00:16:00.160 --> 00:16:01.900
You call
postponeEnterTransition.

00:16:01.900 --> 00:16:07.030
Because I know at this point I
am going to do a recycler view,

00:16:07.030 --> 00:16:09.920
and I know I need to worry
about the transitions there.

00:16:12.770 --> 00:16:14.660
And because I love
data binding--

00:16:14.660 --> 00:16:16.850
some of you might know
that, I love data binding--

00:16:16.850 --> 00:16:19.400
and we have a few models here,
too, so that's good, too.

00:16:19.400 --> 00:16:20.180
ADAM POWELL: Mhm.

00:16:20.180 --> 00:16:21.430
GEORGE MOUNT: Thank you, Adam.

00:16:21.430 --> 00:16:23.030
If you haven't
seen that talk, you

00:16:23.030 --> 00:16:25.340
should go back and watch it.

00:16:25.340 --> 00:16:26.310
We're using that.

00:16:26.310 --> 00:16:29.720
So here I'm setting the
adapter for my recycler view.

00:16:29.720 --> 00:16:34.490
Now I'm setting my adapter, now
I have to wait for the layout.

00:16:34.490 --> 00:16:40.030
So I wait for the layout,
and then that listener

00:16:40.030 --> 00:16:43.420
I call
startPostponedEnterTransition.

00:16:43.420 --> 00:16:48.820
Now my transition is ready,
and it will just go on ahead--

00:16:48.820 --> 00:16:51.870
and I think I skipped a slide.

00:16:51.870 --> 00:16:55.671
[LAUGH] Oh, OK.

00:16:55.671 --> 00:16:56.170
It works.

00:16:59.952 --> 00:17:00.910
ADAM POWELL: All right.

00:17:00.910 --> 00:17:03.040
So one of the other feature--
moving along to something

00:17:03.040 --> 00:17:05.230
completely different-- one of
the other features that we get

00:17:05.230 --> 00:17:06.849
a lot of questions
about are the set

00:17:06.849 --> 00:17:08.589
retain instance
method on fragments.

00:17:08.589 --> 00:17:12.640
So you retain an instance
across an activity destruction

00:17:12.640 --> 00:17:16.970
and creation, across something
like a configuration change.

00:17:16.970 --> 00:17:20.630
So this means that the
object instance itself

00:17:20.630 --> 00:17:22.550
of the fragment that
you've marked this way

00:17:22.550 --> 00:17:24.859
is transferred across
the parent recreation.

00:17:24.859 --> 00:17:28.099
So anything that you put
there is moved along with it.

00:17:28.099 --> 00:17:30.110
Full objects, you don't
have to serialize this

00:17:30.110 --> 00:17:35.127
into a personable, passed
across saved instance state.

00:17:35.127 --> 00:17:37.460
But the important thing to
remember if you're doing this

00:17:37.460 --> 00:17:40.160
is that this doesn't happen
if the process is recreated.

00:17:40.160 --> 00:17:41.827
Your objects aren't there.

00:17:41.827 --> 00:17:43.910
So you need to be a little
bit careful about this.

00:17:43.910 --> 00:17:45.170
You need to make sure
that you can still

00:17:45.170 --> 00:17:46.370
restore from
instant state if you

00:17:46.370 --> 00:17:47.995
have to, even though
in the common case

00:17:47.995 --> 00:17:50.060
you still have the full
objects that you may have

00:17:50.060 --> 00:17:53.250
created in the first place.

00:17:53.250 --> 00:17:55.460
So this is a replacement
for the old, unretained

00:17:55.460 --> 00:17:59.370
non-configuration instance
method that was on activity.

00:17:59.370 --> 00:18:01.220
In fact, the same
mechanism is used

00:18:01.220 --> 00:18:03.950
to implement the
fragments version of this.

00:18:03.950 --> 00:18:05.810
But what's a little
bit more interesting

00:18:05.810 --> 00:18:07.280
is that this
mechanism is right now

00:18:07.280 --> 00:18:09.140
the backbone of am in
view model component

00:18:09.140 --> 00:18:11.750
that we've been talking
about earlier at I/O here.

00:18:11.750 --> 00:18:16.310
So the view models are actually
saved within a retain instance

00:18:16.310 --> 00:18:20.234
fragment to shuffle them across
from one activity to the next.

00:18:20.234 --> 00:18:21.650
And this just kind
of goes to show

00:18:21.650 --> 00:18:23.150
the types of
infrastructure that you

00:18:23.150 --> 00:18:25.522
can build on top of a
routine instance fragment.

00:18:25.522 --> 00:18:27.980
It's something that's a little
bit on the more abstract end

00:18:27.980 --> 00:18:30.354
of things, so we end up getting
a lot of questions about,

00:18:30.354 --> 00:18:31.490
hey, what's this good for?

00:18:31.490 --> 00:18:34.140
This is a pretty good example.

00:18:34.140 --> 00:18:36.644
And just like we talked
about with view models,

00:18:36.644 --> 00:18:38.060
it means that
there's a few things

00:18:38.060 --> 00:18:40.250
that you really need to avoid.

00:18:40.250 --> 00:18:43.670
In this case, don't put views
in a retain instance fragment,

00:18:43.670 --> 00:18:45.860
unless you want to do a
lot of manual bookkeeping.

00:18:45.860 --> 00:18:47.390
Technically, you can
kind of get away with it

00:18:47.390 --> 00:18:48.650
if you're really careful.

00:18:48.650 --> 00:18:50.960
Make sure that you release
all your references

00:18:50.960 --> 00:18:53.030
and on destroy view of
that particular fragment,

00:18:53.030 --> 00:18:54.304
so on and so forth.

00:18:54.304 --> 00:18:56.720
But really it ends up being
best just to kind of avoid it,

00:18:56.720 --> 00:18:59.480
and we'll get into a few more
patterns later in the talk here

00:18:59.480 --> 00:19:02.610
around what you can do instead.

00:19:02.610 --> 00:19:04.950
Context, specifically
activity context.

00:19:04.950 --> 00:19:06.450
Well, we all know
why you don't want

00:19:06.450 --> 00:19:08.700
to save an instance
of an activity longer

00:19:08.700 --> 00:19:12.030
than the lifetime of
that activity itself.

00:19:12.030 --> 00:19:14.340
But the thing that really
tends to catch people

00:19:14.340 --> 00:19:16.050
is callback references.

00:19:16.050 --> 00:19:17.880
So if you register a
listener or some sort

00:19:17.880 --> 00:19:20.040
of a callback with a
fragment, and that fragment

00:19:20.040 --> 00:19:21.910
is going to outlive
the container,

00:19:21.910 --> 00:19:25.530
it's really easy to accidentally
close over that context

00:19:25.530 --> 00:19:28.050
that you had and have
the activity still

00:19:28.050 --> 00:19:30.870
outlast the original host.

00:19:33.750 --> 00:19:36.247
So child fragments are
something that bit a lot

00:19:36.247 --> 00:19:37.830
of people really
hard a few years ago,

00:19:37.830 --> 00:19:40.740
because frankly, we had a
lot of bugs around them.

00:19:40.740 --> 00:19:42.984
And they were created to
solve a particular problem,

00:19:42.984 --> 00:19:44.400
and that was
dependency management

00:19:44.400 --> 00:19:47.920
within a particular activity.

00:19:47.920 --> 00:19:49.470
So consider this case.

00:19:49.470 --> 00:19:51.390
You've got a fragment
that has a ViewPager.

00:19:51.390 --> 00:19:53.367
Pretty common, right?

00:19:53.367 --> 00:19:55.200
The ViewPager uses a
fragment pager adapter,

00:19:55.200 --> 00:19:58.560
because that's a pretty
easy way to use a ViewPager,

00:19:58.560 --> 00:20:01.630
and then you remove
the pager fragment.

00:20:01.630 --> 00:20:03.610
Well, now we have a problem.

00:20:03.610 --> 00:20:05.500
So what actually
happens in that case,

00:20:05.500 --> 00:20:06.874
you've got all
the fragments that

00:20:06.874 --> 00:20:09.540
were added by the PagerAdapter,
but the host fragment--

00:20:09.540 --> 00:20:11.430
or the conceptual host
fragment in this case

00:20:11.430 --> 00:20:13.355
that has the ViewPager--
itself was removed.

00:20:13.355 --> 00:20:14.730
Now something has
to be in charge

00:20:14.730 --> 00:20:17.302
of removing the
individual page fragments,

00:20:17.302 --> 00:20:19.260
and this was something
that really kind of went

00:20:19.260 --> 00:20:22.380
to show that a single collection
of fragments is insufficient.

00:20:22.380 --> 00:20:24.990
In fact, when the fragment APIs
were first sort of rolling out

00:20:24.990 --> 00:20:27.370
to a lot of internal developers
right around Honeycomb,

00:20:27.370 --> 00:20:29.370
this was one of the first
questions that we got,

00:20:29.370 --> 00:20:31.860
and it took us quite a while
to come back and address this.

00:20:31.860 --> 00:20:33.860
What happens when you do
have these dependencies

00:20:33.860 --> 00:20:36.690
in between fragments.

00:20:36.690 --> 00:20:38.730
And part of the reason
why this was such a pain

00:20:38.730 --> 00:20:41.070
is because we didn't have
any ordering guarantees

00:20:41.070 --> 00:20:42.960
around Fragments being created.

00:20:42.960 --> 00:20:44.730
And what's worse
is a lot of times

00:20:44.730 --> 00:20:49.120
this only would come up much,
much later in the process.

00:20:49.120 --> 00:20:51.940
Just because you added Fragments
in one particular order,

00:20:51.940 --> 00:20:53.860
you could control
that that order

00:20:53.860 --> 00:20:57.250
as you're running that and kind
of run the initial transactions

00:20:57.250 --> 00:20:58.746
that builds up that state.

00:20:58.746 --> 00:21:01.120
But when your process dies
and we restore those fragments

00:21:01.120 --> 00:21:03.790
from instance state later,
the order of that recreation

00:21:03.790 --> 00:21:04.900
was always undefined.

00:21:04.900 --> 00:21:07.014
Depending on what
all may have happened

00:21:07.014 --> 00:21:08.680
throughout the lifetime
of your activity

00:21:08.680 --> 00:21:11.140
before, just kind of
due to some artifacts

00:21:11.140 --> 00:21:12.760
of internal
bookkeeping, this was

00:21:12.760 --> 00:21:15.790
something that could cause
these things to be reordered

00:21:15.790 --> 00:21:17.860
in terms of which one
would get onCreate first,

00:21:17.860 --> 00:21:18.810
so on and so forth.

00:21:18.810 --> 00:21:20.560
And it made it very
difficult to reconnect

00:21:20.560 --> 00:21:22.210
any sorts of shared state.

00:21:22.210 --> 00:21:23.615
Now the source of
shared state is

00:21:23.615 --> 00:21:25.990
something that's much easier
to handle with the ViewModel

00:21:25.990 --> 00:21:29.380
system that we showed
earlier, but at the time

00:21:29.380 --> 00:21:32.637
we really didn't have a good
solution to this problem.

00:21:32.637 --> 00:21:34.720
So one of the other things
that was kind of a pain

00:21:34.720 --> 00:21:38.680
is that the deferred transaction
commits that have been common

00:21:38.680 --> 00:21:39.970
ever since we--

00:21:39.970 --> 00:21:41.770
up until we added
the commit now method

00:21:41.770 --> 00:21:44.230
on Fragment transaction--

00:21:44.230 --> 00:21:45.610
the nice thing
and the reason why

00:21:45.610 --> 00:21:48.900
this was done in the first place
was to avoid reentering calls.

00:21:48.900 --> 00:21:51.550
You didn't have to worry about
one particular transaction

00:21:51.550 --> 00:21:54.970
being half executed and then
starting another transaction

00:21:54.970 --> 00:21:56.860
as a result of it.

00:21:56.860 --> 00:21:58.510
But this really did
have a cost, and I

00:21:58.510 --> 00:22:01.360
think that if you're
in this room right now,

00:22:01.360 --> 00:22:03.880
you've probably experienced
some of the costs of this.

00:22:03.880 --> 00:22:06.340
Raise your hand if you called
executePendingTransactions

00:22:06.340 --> 00:22:08.110
to fix a bug.

00:22:08.110 --> 00:22:11.182
Yeah, that's a lot of hands.

00:22:11.182 --> 00:22:12.640
So this is one of
those things that

00:22:12.640 --> 00:22:15.460
ends up being really kind
of difficult to work with.

00:22:18.680 --> 00:22:21.350
So child fragments as
dependencies work out

00:22:21.350 --> 00:22:22.970
really well, because
they solve a lot

00:22:22.970 --> 00:22:24.625
of these particular issues.

00:22:24.625 --> 00:22:26.000
It's a separate
Fragment manager,

00:22:26.000 --> 00:22:28.820
so you don't get the re-entrant
cases no matter what.

00:22:28.820 --> 00:22:31.460
If you go ahead and use commit
now on a bunch of these things,

00:22:31.460 --> 00:22:34.162
you don't have to
worry about your parent

00:22:34.162 --> 00:22:35.870
being in a potentially
inconsistent state

00:22:35.870 --> 00:22:37.620
as you do this, because
you're all working

00:22:37.620 --> 00:22:38.810
within your own local unit.

00:22:38.810 --> 00:22:40.430
So all of these things
are added and removed

00:22:40.430 --> 00:22:42.971
as a unit, which means that it
solves that ViewPager problem.

00:22:42.971 --> 00:22:45.320
It means that if you remove
the containing fragment,

00:22:45.320 --> 00:22:47.720
then you don't have to care
about the implementation

00:22:47.720 --> 00:22:49.586
details of that fragment.

00:22:49.586 --> 00:22:50.960
Well, this kind
of seems like one

00:22:50.960 --> 00:22:54.810
of those duh things
in hindsight,

00:22:54.810 --> 00:22:57.360
and it's all guaranteed
to be restored after I

00:22:57.360 --> 00:22:59.107
called the super.onCreate.

00:22:59.107 --> 00:23:00.690
This is also important
because now you

00:23:00.690 --> 00:23:03.820
can rely on when these things
have actually been restored.

00:23:03.820 --> 00:23:06.870
You don't have to worry
about these ordering things

00:23:06.870 --> 00:23:09.990
that are out of your control.

00:23:09.990 --> 00:23:12.560
But perhaps most importantly,
the implementation details

00:23:12.560 --> 00:23:15.286
again don't leak into your
surrounding containers.

00:23:18.620 --> 00:23:21.080
So in conclusion,
many of you may

00:23:21.080 --> 00:23:23.660
have run into a lot
of particular issues

00:23:23.660 --> 00:23:25.730
around child fragments.

00:23:25.730 --> 00:23:27.552
Please go try version 26.

00:23:27.552 --> 00:23:29.510
We have fixed more and
more issues around this,

00:23:29.510 --> 00:23:33.214
specifically around
inflating child fragments.

00:23:33.214 --> 00:23:34.880
This is one of my
favorite uses of this.

00:23:34.880 --> 00:23:37.760
We talked earlier about using
Fragments as very coarse grain

00:23:37.760 --> 00:23:39.710
destinations within
your application.

00:23:39.710 --> 00:23:44.410
Something that takes up an
entire UI pane of your app.

00:23:44.410 --> 00:23:46.570
But nesting within
other Fragments,

00:23:46.570 --> 00:23:49.360
even if you inflate them from
one of these coarser grain

00:23:49.360 --> 00:23:52.390
navigation destinations,
it just kind of works.

00:23:52.390 --> 00:23:54.010
You don't have to
worry about taking

00:23:54.010 --> 00:23:56.890
care of all these other sort
of nested lifecycle issues,

00:23:56.890 --> 00:24:01.490
and it lets you build smarter
encapsulated components I mean,

00:24:01.490 --> 00:24:03.932
we always kind of get this
question, too: hey, do I build

00:24:03.932 --> 00:24:05.390
[INAUDIBLE], do I
build a Fragment?

00:24:05.390 --> 00:24:08.290
And there's been a lot of ink
spilled and keyboards smashed

00:24:08.290 --> 00:24:10.700
making these particular
arguments online, as I'm sure--

00:24:10.700 --> 00:24:12.205
GEORGE MOUNT: I never
know what to do with this.

00:24:12.205 --> 00:24:12.550
ADAM POWELL: Hm?

00:24:12.550 --> 00:24:14.508
GEORGE MOUNT: I never
know what to do, building

00:24:14.508 --> 00:24:16.000
a ViewGroup or a Fragment.

00:24:16.000 --> 00:24:16.810
ADAM POWELL: Right.

00:24:16.810 --> 00:24:17.370
So--

00:24:17.370 --> 00:24:19.480
GEORGE MOUNT: I just tell
people just use ViewGroups.

00:24:19.480 --> 00:24:20.360
ADAM POWELL: Exactly.

00:24:20.360 --> 00:24:23.410
So-- excuse me, Adam, you
said that crossing the streams

00:24:23.410 --> 00:24:24.670
was bad.

00:24:24.670 --> 00:24:30.110
So the rule of thumb for this
is essentially as follows.

00:24:30.110 --> 00:24:32.950
Views should really only be
responsible for displaying

00:24:32.950 --> 00:24:36.620
information and publishing
direct user interaction events.

00:24:36.620 --> 00:24:38.500
These end up being
very low level events,

00:24:38.500 --> 00:24:42.970
like button was clicked,
user scrolled something.

00:24:42.970 --> 00:24:45.250
These are responsible
for drawing text

00:24:45.250 --> 00:24:47.080
and these other
sorts of operations

00:24:47.080 --> 00:24:50.530
that are user interaction,
whereas fragments integrate

00:24:50.530 --> 00:24:52.630
with the surrounding
lifecycle, and they may be

00:24:52.630 --> 00:24:53.920
aware of other app components.

00:24:53.920 --> 00:24:56.710
This is really what gives
context to everything

00:24:56.710 --> 00:24:58.450
that you're doing in your UI.

00:24:58.450 --> 00:25:00.040
So you might bind
to a service, you

00:25:00.040 --> 00:25:02.081
might be communicating
with your apps data model,

00:25:02.081 --> 00:25:07.380
performing a database
query, so on and so forth.

00:25:07.380 --> 00:25:10.469
So you should never use a
Fragment when a View will do,

00:25:10.469 --> 00:25:12.260
but you also want make
sure that you're not

00:25:12.260 --> 00:25:14.434
adding outside
dependencies to your Views.

00:25:14.434 --> 00:25:16.100
It's definitely a
code smell if you ever

00:25:16.100 --> 00:25:18.260
find yourself doing
something like trying

00:25:18.260 --> 00:25:20.900
to bind to a service from
a view implementation,

00:25:20.900 --> 00:25:24.085
or trying to make a
network call, or again,

00:25:24.085 --> 00:25:25.460
trying to integrate
with anything

00:25:25.460 --> 00:25:30.020
that's outside of the realm of
just that one individual view.

00:25:30.020 --> 00:25:31.657
But that means that
there's a whole.

00:25:31.657 --> 00:25:33.490
It means that you can't
build just something

00:25:33.490 --> 00:25:37.507
that simple as a completely
self-contained like button

00:25:37.507 --> 00:25:39.590
that you can just stick
right in the middle of one

00:25:39.590 --> 00:25:42.710
of your layouts and treat
is as fire and forget.

00:25:42.710 --> 00:25:46.120
Give it some parameters and go.

00:25:46.120 --> 00:25:50.560
Well, this is one of the reasons
why you can inflate Fragments.

00:25:50.560 --> 00:25:53.350
In this case, we're showing
that you can define parameters

00:25:53.350 --> 00:25:55.570
to these that you
can place inline.

00:25:55.570 --> 00:25:59.230
We can go ahead and inflate
arguments in a way that--

00:25:59.230 --> 00:26:02.170
excuse me-- in a
way that allows you

00:26:02.170 --> 00:26:03.850
to do this without
having a lot of very

00:26:03.850 --> 00:26:04.960
heavyweight integration.

00:26:04.960 --> 00:26:08.040
You don't have to go find
it, configure it separately,

00:26:08.040 --> 00:26:10.284
you just do it inline.

00:26:10.284 --> 00:26:12.700
So one of the things that made
this really difficult to do

00:26:12.700 --> 00:26:16.010
in the past was again,
just artifact of history,

00:26:16.010 --> 00:26:18.820
and that you couldn't actually
set Fragment arguments,

00:26:18.820 --> 00:26:23.320
that arguments bundle
after the Fragment

00:26:23.320 --> 00:26:25.270
had been added to
a Fragment manager.

00:26:25.270 --> 00:26:26.830
So now we've relaxed
that, and we've

00:26:26.830 --> 00:26:28.930
said that now
Fragment arguments can

00:26:28.930 --> 00:26:31.270
be changed any time that
the state isn't saved,

00:26:31.270 --> 00:26:32.590
including during inflation.

00:26:32.590 --> 00:26:35.891
So there's this case where
after you rotate or so on and so

00:26:35.891 --> 00:26:38.140
forth and we're reconnecting
inflated fragments, which

00:26:38.140 --> 00:26:42.997
is, again, something that
we do automatically, then

00:26:42.997 --> 00:26:44.830
you can run in this
case where we've already

00:26:44.830 --> 00:26:46.347
restored that Fragment.

00:26:46.347 --> 00:26:47.930
We're trying to hook
it back up again,

00:26:47.930 --> 00:26:49.388
but it's already
added, which means

00:26:49.388 --> 00:26:52.132
that you can't do what the
natural thing is, which

00:26:52.132 --> 00:26:53.590
is to represent
all those arguments

00:26:53.590 --> 00:26:55.940
that you may inflate as
arguments in the bundle.

00:26:55.940 --> 00:26:58.510
So that way you have
basically a single source

00:26:58.510 --> 00:27:00.010
of truth for all
the configuration

00:27:00.010 --> 00:27:01.790
parameters of that Fragment.

00:27:01.790 --> 00:27:02.740
Well, now you can.

00:27:02.740 --> 00:27:04.300
GEORGE MOUNT: Wait a
second, wait a second here.

00:27:04.300 --> 00:27:04.990
Go back.

00:27:04.990 --> 00:27:06.520
Go back.

00:27:06.520 --> 00:27:08.860
Was this not a state save thing?

00:27:08.860 --> 00:27:10.730
ADAM POWELL: Oh yeah.

00:27:10.730 --> 00:27:13.120
Again, a bunch of people had--

00:27:13.120 --> 00:27:14.680
I don't know where
this comes from,

00:27:14.680 --> 00:27:17.527
but people apparently try to
commit Fragment transactions

00:27:17.527 --> 00:27:19.610
when state's already been
saved, and they've got--

00:27:19.610 --> 00:27:21.160
GEORGE MOUNT: Why
would they do that?

00:27:21.160 --> 00:27:22.493
ADAM POWELL: I don't know, but--

00:27:22.493 --> 00:27:24.369
GEORGE MOUNT: Because
they can't tell?

00:27:24.369 --> 00:27:25.910
ADAM POWELL: That
might have been it.

00:27:25.910 --> 00:27:27.640
Yeah, so we added a
simple getter on this one

00:27:27.640 --> 00:27:28.850
so that you can know
when that happens.

00:27:28.850 --> 00:27:31.390
And it also makes things
like writing lifecycle aware

00:27:31.390 --> 00:27:33.610
components that make
sure that you don't

00:27:33.610 --> 00:27:37.212
try to commit Fragment
transactions when it's not

00:27:37.212 --> 00:27:39.170
valid to do so is a whole
heck of a lot easier.

00:27:42.041 --> 00:27:42.540
Thank you.

00:27:45.694 --> 00:27:47.610
So again, part of what
we're trying to do here

00:27:47.610 --> 00:27:49.740
is create a much better
layered infrastructure.

00:27:49.740 --> 00:27:52.200
We've traditionally hidden
a lot of these internals

00:27:52.200 --> 00:27:53.910
in some of these
Android components,

00:27:53.910 --> 00:27:56.550
such that only the internal
components are twiddling them,

00:27:56.550 --> 00:27:58.260
which means that
as soon as you all

00:27:58.260 --> 00:28:01.060
have a more complicated case
that you're trying to handle,

00:28:01.060 --> 00:28:03.630
we've made it very difficult
for you to do this in the past.

00:28:03.630 --> 00:28:05.430
So we tried to open a
lot more of those things

00:28:05.430 --> 00:28:06.870
up, make these things
a little bit easier

00:28:06.870 --> 00:28:09.369
to inspect from your own code,
to deal with those cases that

00:28:09.369 --> 00:28:11.830
arise that we didn't think of.

00:28:11.830 --> 00:28:15.660
So in this case, the pattern
that we really kind of want

00:28:15.660 --> 00:28:18.120
to encourage is mapping
Fragment arguments

00:28:18.120 --> 00:28:20.390
to attributes for
those UI Fragments.

00:28:20.390 --> 00:28:24.500
Again, this gives you kind
of a single source of truth.

00:28:24.500 --> 00:28:27.810
So let's go ahead and go
over to an example of this.

00:28:27.810 --> 00:28:31.220
So in this case, we've got
a few nice little Kotlin

00:28:31.220 --> 00:28:33.980
based methods that are
extensions, that make us

00:28:33.980 --> 00:28:36.260
a little bit easier to handle.

00:28:36.260 --> 00:28:40.640
In this case, we've got one
utility methods that is just

00:28:40.640 --> 00:28:42.950
our withStyledAttributes here.

00:28:42.950 --> 00:28:47.210
So, many of you have dealt with
inflating attributes for views,

00:28:47.210 --> 00:28:49.790
and you have to get
that typed array,

00:28:49.790 --> 00:28:51.510
you have to recycle
it afterwards.

00:28:51.510 --> 00:28:53.426
It's really easy to just
kind of wrap these up

00:28:53.426 --> 00:28:55.800
inside some extension functions.

00:28:55.800 --> 00:28:58.380
Similarly, we have this
simple little thing.

00:28:58.380 --> 00:29:01.170
Hey, is there a bundle there
for arguments already, if so,

00:29:01.170 --> 00:29:05.270
reuse it, otherwise
create a new one.

00:29:05.270 --> 00:29:08.410
So these are the sorts of
things that Kotlin really

00:29:08.410 --> 00:29:10.210
adds to the Fragment API.

00:29:10.210 --> 00:29:12.370
All the things that are
kind of a pain in the neck

00:29:12.370 --> 00:29:16.270
to do with Fragments, you can
make some simple extensions

00:29:16.270 --> 00:29:18.910
that were really
hard to do before.

00:29:18.910 --> 00:29:22.690
But for example, one of my
favorite features for something

00:29:22.690 --> 00:29:24.352
like this is to use
property delegates

00:29:24.352 --> 00:29:25.810
to deal with
arguments, and you can

00:29:25.810 --> 00:29:28.630
wrap even more of this stuff
and just basically treat them

00:29:28.630 --> 00:29:31.030
as normal properties on
your Fragment objects.

00:29:34.590 --> 00:29:37.320
So putting a bunch
of this together,

00:29:37.320 --> 00:29:40.080
Fragments help you maintain
more of a content and chrome

00:29:40.080 --> 00:29:42.750
separation.

00:29:42.750 --> 00:29:45.690
They give you the ability
to keep your content pages

00:29:45.690 --> 00:29:49.170
as fully encapsulated
items without disturbing

00:29:49.170 --> 00:29:52.440
the rest of the UI around it.

00:29:52.440 --> 00:29:55.750
You get richer transitions.

00:29:55.750 --> 00:29:57.280
You get better
shared components ,

00:29:57.280 --> 00:29:59.863
because you can reuse a lot of
these things and you don't have

00:29:59.863 --> 00:30:02.310
to initialize all
of them separately.

00:30:02.310 --> 00:30:05.370
And you can better
encapsulate your dependencies.

00:30:05.370 --> 00:30:07.980
So you don't necessarily have
to leak all of these things

00:30:07.980 --> 00:30:09.840
to the surrounding host.

00:30:09.840 --> 00:30:12.740
And thank you very
much for coming.

