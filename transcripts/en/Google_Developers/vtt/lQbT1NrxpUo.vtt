WEBVTT
Kind: captions
Language: en

00:00:02.901 --> 00:00:05.834
Lopyrev: Hey, everyone,
and welcome to our session.

00:00:05.834 --> 00:00:09.200
My name is Anton Lopyrev,
and I'm a product manager

00:00:09.200 --> 00:00:11.501
on the Google API
infrastructure team,

00:00:11.501 --> 00:00:15.033
and later on, I'll be joined by
Monsur Hossain and Joe Gregorio.

00:00:15.033 --> 00:00:16.734
They're two engineers

00:00:16.734 --> 00:00:18.601
on the Google's API
infrastructure team,

00:00:18.601 --> 00:00:21.200
and, uh, this is
a 200-level session,

00:00:21.200 --> 00:00:23.033
so we'll be covering
some concepts

00:00:23.033 --> 00:00:26.033
that could be advanced for you,
but hopefully, you'll be okay.

00:00:26.033 --> 00:00:28.801
And--and this session is called

00:00:28.801 --> 00:00:30.901
"Building Custom Client
Libraries for Google APIs."

00:00:30.901 --> 00:00:32.567
However, some of the concepts

00:00:32.567 --> 00:00:34.400
that we will cover
in this session

00:00:34.400 --> 00:00:37.434
can be applicable for building
other tools for Google APIs,

00:00:37.434 --> 00:00:40.400
such as I.D. plugins
and API explorers

00:00:40.400 --> 00:00:42.234
and a few other things,

00:00:42.234 --> 00:00:44.934
and we'll talk more about this
as we go on.

00:00:44.934 --> 00:00:46.968
And if you want to tweet
about the session,

00:00:46.968 --> 00:00:48.634
you can use the hashtags here,

00:00:48.634 --> 00:00:51.067
and we would love your feedback
about the session,

00:00:51.067 --> 00:00:52.868
so you can use SpeakerMeter,

00:00:52.868 --> 00:00:57.067
and just follow this goo.gl
link--it's ifSQM.

00:00:57.067 --> 00:00:59.300
So let's have a look
at the outline

00:00:59.300 --> 00:01:01.834
of things we're gonna cover
in the session.

00:01:01.834 --> 00:01:04.100
So first of all,
we're gonna introduce you

00:01:04.100 --> 00:01:05.968
to the APIs Discovery Service.

00:01:05.968 --> 00:01:08.868
This is a service that
we launched on Monday this week,

00:01:08.868 --> 00:01:10.534
and it's the secret sauce

00:01:10.534 --> 00:01:14.133
that powers the new family
of Google API client libraries.

00:01:14.133 --> 00:01:16.901
So, um, I will be doing that,

00:01:16.901 --> 00:01:19.267
and then Monsur will come here

00:01:19.267 --> 00:01:21.534
and talk about a walk-through
of the format,

00:01:21.534 --> 00:01:24.334
and he'll give you all the juicy
details of the information

00:01:24.334 --> 00:01:26.133
that's available to you
through the service.

00:01:26.133 --> 00:01:28.067
And then Joe will join,

00:01:28.067 --> 00:01:31.067
and, um, he will tell you
how one can go about

00:01:31.067 --> 00:01:33.634
and build a client library
on top of the Discovery Service.

00:01:33.634 --> 00:01:35.934
He'll give you an overview
of the steps necessary

00:01:35.934 --> 00:01:38.701
to build a library,
and he'll also give you a demo

00:01:38.701 --> 00:01:40.701
of a fully functional
Python client library

00:01:40.701 --> 00:01:43.801
built on this service, and you
should definitely stick around.

00:01:43.801 --> 00:01:45.634
It'll also be
a really cool demo.

00:01:45.634 --> 00:01:48.434
Just to give you an idea,
the entire client library

00:01:48.434 --> 00:01:51.667
is only 35 lines of code
in Python, so it's really cool

00:01:51.667 --> 00:01:54.601
and gives you an idea of how
powerful this service is, so...

00:01:54.601 --> 00:01:56.868
With that, let's jump
into the first section,

00:01:56.868 --> 00:01:58.701
so introducing the APIs
Discovery Service.

00:01:58.701 --> 00:02:00.701
So before I tell you
exactly what it is,

00:02:00.701 --> 00:02:03.501
if you haven't yet read
our blog post,

00:02:03.501 --> 00:02:06.300
let's quickly overview
how Google builds APIs.

00:02:06.300 --> 00:02:08.834
So we had a session
at the last Google I/O,

00:02:08.834 --> 00:02:11.334
which we called
"How Google Builds APIs,"

00:02:11.334 --> 00:02:14.567
and there, we gave you
a sneak peek behind the scenes

00:02:14.567 --> 00:02:16.467
of how we do things at Google,

00:02:16.467 --> 00:02:18.934
and I highly recommend
bookmarking this link

00:02:18.934 --> 00:02:20.934
and, uh, watching
this YouTube video at home,

00:02:20.934 --> 00:02:22.734
since it's--it's some
really cool stuff.

00:02:22.734 --> 00:02:24.734
So, um, for the sake
of this session,

00:02:24.734 --> 00:02:26.634
I'm gonna give you
a quick overview

00:02:26.634 --> 00:02:28.634
of a few important points
of that session.

00:02:28.634 --> 00:02:31.167
The first one is that
Google APIs are RESTful,

00:02:31.167 --> 00:02:34.133
and I'm not gonna go into detail
as to what that really means.

00:02:34.133 --> 00:02:35.801
Hopefully, you all know,

00:02:35.801 --> 00:02:37.801
and if you don't,
you should look it up,

00:02:37.801 --> 00:02:40.300
but the key idea here
for the sake of this session

00:02:40.300 --> 00:02:43.000
is that an API is typically
a collection of resources,

00:02:43.000 --> 00:02:45.501
it's a collection of methods
on those resources,

00:02:45.501 --> 00:02:48.167
and it's a collection
of parameters for each method.

00:02:48.167 --> 00:02:50.567
And another important point
of that session

00:02:50.567 --> 00:02:53.400
was also that all of
the newer Google APIs

00:02:53.400 --> 00:02:55.868
are based on top of
the new common infrastructure,

00:02:55.868 --> 00:02:57.968
and we talked a lot
about this infrastructure

00:02:57.968 --> 00:03:00.801
here at Google I/O.
However, what--

00:03:00.801 --> 00:03:03.734
an important point here is,
is that the new infrastructure

00:03:03.734 --> 00:03:05.400
gives us a new cool way

00:03:05.400 --> 00:03:07.601
to build client libraries
for Google APIs.

00:03:07.601 --> 00:03:09.801
So this instant,
an API configuration

00:03:09.801 --> 00:03:12.067
is structured into
a RESTful model.

00:03:12.067 --> 00:03:15.334
It allows us to create
machine-readable specification

00:03:15.334 --> 00:03:17.801
for each of the APIs,
and here at Google,

00:03:17.801 --> 00:03:21.300
we refer to that specification
as the Discovery document,

00:03:21.300 --> 00:03:23.133
and that Discovery document,

00:03:23.133 --> 00:03:25.868
or that metadata
about each one of the APIs

00:03:25.868 --> 00:03:28.334
can then be used
in our client libraries

00:03:28.334 --> 00:03:30.601
to build
the API calling surfaces.

00:03:30.601 --> 00:03:33.300
And I know it's a really
simple diagram here,

00:03:33.300 --> 00:03:35.133
but that's how simple
it really is.

00:03:35.133 --> 00:03:37.167
It's a 2-step process,
and with that,

00:03:37.167 --> 00:03:40.133
let me actually introduce you
to the APIs Discovery Service,

00:03:40.133 --> 00:03:42.667
and it's the service
that exposes that metadata

00:03:42.667 --> 00:03:45.634
about Google APIs
in machine-readable format

00:03:45.634 --> 00:03:48.200
for client libraries
and other tools to consume,

00:03:48.200 --> 00:03:50.234
and, uh, here's the link
to documentation.

00:03:50.234 --> 00:03:52.067
You can also read through it

00:03:52.067 --> 00:03:54.300
while we go ahead
with this session, and, uh...

00:03:54.300 --> 00:03:57.801
So before Monsur comes up
and talks about the format,

00:03:57.801 --> 00:04:00.300
let me quickly talk
about a few benefits

00:04:00.300 --> 00:04:03.467
and the motivation for us to
release this service publicly.

00:04:03.467 --> 00:04:05.734
So for first of all,
it's scalability.

00:04:05.734 --> 00:04:08.300
At Google, we have over
a hundred different APIs,

00:04:08.300 --> 00:04:10.801
and we also have a number
of programming languages

00:04:10.801 --> 00:04:12.467
that we wish to support,

00:04:12.467 --> 00:04:14.968
and even if we only were to pick
five different languages,

00:04:14.968 --> 00:04:17.767
we would need to write 500
different client libraries

00:04:17.767 --> 00:04:19.434
for those APIs.

00:04:19.434 --> 00:04:21.334
This is obviously
not a scalable solution,

00:04:21.334 --> 00:04:23.834
and this is not a Google-y way
of doing things,

00:04:23.834 --> 00:04:25.834
so we obviously have
some sort of secret thing

00:04:25.834 --> 00:04:27.701
behind--behind the scenes
that we use,

00:04:27.701 --> 00:04:29.367
and this is
the Discovery Service.

00:04:29.367 --> 00:04:31.200
The Discovery Service
really allows us

00:04:31.200 --> 00:04:33.334
to reduce the amount
of work dramatically.

00:04:33.334 --> 00:04:36.534
And here, if we build
a client library

00:04:36.534 --> 00:04:38.767
that is built on top
of the Discovery Service,

00:04:38.767 --> 00:04:42.133
it works for every single API
built on top of that service,

00:04:42.133 --> 00:04:44.467
so we would--if all
of the hundred APIs

00:04:44.467 --> 00:04:46.334
were on top
of the new infrastructure,

00:04:46.334 --> 00:04:48.334
we would only need to build
five client libraries.

00:04:48.334 --> 00:04:50.167
This is definitely
a huge improvement.

00:04:50.167 --> 00:04:53.868
And another benefit that goes
along the side of scalability

00:04:53.868 --> 00:04:55.534
is automation.

00:04:55.534 --> 00:04:57.400
The Discovery Service--Oops--

00:04:57.400 --> 00:04:59.601
The Discovery Service
also allows us to generate

00:04:59.601 --> 00:05:01.934
a lot of other things
rather than client libraries.

00:05:01.934 --> 00:05:04.801
Some of the documentation
that you see for newer APIs

00:05:04.801 --> 00:05:06.567
on code.google.com

00:05:06.567 --> 00:05:09.133
is also auto-generated
based on the Discovery Service,

00:05:09.133 --> 00:05:12.267
and some of the documentation
for the client libraries,

00:05:12.267 --> 00:05:16.033
such as Javadoc for Java
or pydoc for Python,

00:05:16.033 --> 00:05:18.534
is also generated
based on the Discovery Service,

00:05:18.534 --> 00:05:21.601
so this is a huge time-saver,
as you can--as you can imagine.

00:05:21.601 --> 00:05:24.167
So the final benefit
and the real motivation

00:05:24.167 --> 00:05:27.067
for us to release this service
publicly is transparency.

00:05:27.067 --> 00:05:30.267
All of the new Google API client
libraries are open source.

00:05:30.267 --> 00:05:32.067
However, up until today,
they were using

00:05:32.067 --> 00:05:35.567
this undocumented endpoint,
which was the Discovery Service.

00:05:35.567 --> 00:05:39.467
and by us, uh, open-sourcing
the libraries

00:05:39.467 --> 00:05:42.734
and now announcing it
as the Discovery Service,

00:05:42.734 --> 00:05:45.234
we really want to maintain
that story of transparency.

00:05:45.234 --> 00:05:47.767
So with that,

00:05:47.767 --> 00:05:50.133
let me quickly give you a demo

00:05:50.133 --> 00:05:52.300
of a kind of tool you can build

00:05:52.300 --> 00:05:54.234
on top of the APIs
Discovery Service,

00:05:54.234 --> 00:05:57.567
and a few months ago,
we launched the APIs Explorer,

00:05:57.567 --> 00:06:00.234
and this is an interactive
Web-based tool

00:06:00.234 --> 00:06:03.501
for playing around and exploring
Google APIs in a browser,

00:06:03.501 --> 00:06:05.334
and you can also
follow this link

00:06:05.334 --> 00:06:07.334
and check it out
if you haven't yet.

00:06:07.334 --> 00:06:09.300
What most of you
probably don't know

00:06:09.300 --> 00:06:11.234
is that this tool is built

00:06:11.234 --> 00:06:13.767
exclusively on top of
the APIs Discovery Service.

00:06:13.767 --> 00:06:15.767
This means that all
of the information there

00:06:15.767 --> 00:06:17.434
is not hard-coded,

00:06:17.434 --> 00:06:21.033
is--comes from this service,
and is shown to you dynamically.

00:06:21.033 --> 00:06:23.200
So another cool announcement--

00:06:23.200 --> 00:06:25.501
that with the launch
of the Discovery Service,

00:06:25.501 --> 00:06:27.300
we're also open-sourcing
the Explorer,

00:06:27.300 --> 00:06:29.801
that you can actually go
and check it out how it's built

00:06:29.801 --> 00:06:32.300
and see if you can build
similar tools yourself.

00:06:32.300 --> 00:06:35.567
So let's quickly jump
into a demo of the Explorer,

00:06:35.567 --> 00:06:38.234
and, uh, some of you
have probably seen this.

00:06:38.234 --> 00:06:40.601
It has a listing of APIs.

00:06:40.601 --> 00:06:43.367
It has a listing
of versions per API.

00:06:43.367 --> 00:06:45.901
It has a listing of methods
in each version,

00:06:45.901 --> 00:06:48.400
and finally, it has a number
of parameters for each method,

00:06:48.400 --> 00:06:50.300
and all of this information

00:06:50.300 --> 00:06:52.133
comes from
the Discovery Service.

00:06:52.133 --> 00:06:53.801
All of that information,

00:06:53.801 --> 00:06:55.801
along with all the description
of all the methods,

00:06:55.801 --> 00:06:57.834
all the parameters,
and all of the APIs.

00:06:57.834 --> 00:07:00.734
And just to give you an idea
of that scalability benefit,

00:07:00.734 --> 00:07:03.901
some of the APIs that we
launched here at Google I/O

00:07:03.901 --> 00:07:05.601
are already here.

00:07:05.601 --> 00:07:09.400
We can see some
of the Page Speed Online API

00:07:09.400 --> 00:07:12.334
that we launched at the sandbox,

00:07:12.334 --> 00:07:15.300
Task Queue APIs that we launched
a little bit earlier,

00:07:15.300 --> 00:07:18.834
and also
the Discovery API itself.

00:07:18.834 --> 00:07:21.601
Since the Discovery Service
is built

00:07:21.601 --> 00:07:23.868
on top of the new
API infrastructure,

00:07:23.868 --> 00:07:26.200
it can actually describe itself,

00:07:26.200 --> 00:07:28.133
and that's just to also give you

00:07:28.133 --> 00:07:31.300
how cool this service actually
is and how geeky, as well.

00:07:31.300 --> 00:07:34.634
I mean, it is, in fact, an API
of APIs that describes itself.

00:07:34.634 --> 00:07:37.834
So with that, let's jump back
into the slides,

00:07:37.834 --> 00:07:41.400
and a few other examples of how
this service is used at Google.

00:07:41.400 --> 00:07:44.534
The new family of Google APIs
client libraries,

00:07:44.534 --> 00:07:46.467
as I mentioned before,
in various languages,

00:07:46.467 --> 00:07:48.300
is based on top of this service,

00:07:48.300 --> 00:07:50.801
and you can look at the listing
of those libraries,

00:07:50.801 --> 00:07:53.300
and you can jump in
and look at the code

00:07:53.300 --> 00:07:55.300
and how the Discovery Service
is actually used.

00:07:55.300 --> 00:07:57.801
And another cool thing
we launched about a month ago

00:07:57.801 --> 00:07:59.467
is the Google API support

00:07:59.467 --> 00:08:01.534
and the Google Plugin
for Eclipse,

00:08:01.534 --> 00:08:04.501
and this gives you
an ability to import

00:08:04.501 --> 00:08:07.000
Google API support
into your Eclipse project,

00:08:07.000 --> 00:08:09.000
and this is also
a really cool thing

00:08:09.000 --> 00:08:10.801
that we are very excited about.

00:08:10.801 --> 00:08:12.801
So with that, let me
give it to Monsur,

00:08:12.801 --> 00:08:15.367
who's gonna jump in
and give you an idea

00:08:15.367 --> 00:08:18.934
of what kind of cool stuff
is available to you.

00:08:18.934 --> 00:08:20.934
Hossain: All right,
thank you, Anton.

00:08:20.934 --> 00:08:22.701
Uh, good morning, everybody.

00:08:22.701 --> 00:08:25.601
So let's take a look at what
Discovery actually looks like.

00:08:25.601 --> 00:08:28.267
So first of all, when we talk
about the Discovery Service,

00:08:28.267 --> 00:08:30.167
we're actually talking
about two features.

00:08:30.167 --> 00:08:32.667
We're talking about a directory
of the supported APIs,

00:08:32.667 --> 00:08:34.667
and then we're talking
about a Discovery document

00:08:34.667 --> 00:08:36.234
that describes a particular API.

00:08:36.234 --> 00:08:38.534
All the responses
in the Discovery Service

00:08:38.534 --> 00:08:40.300
are JSON-based,

00:08:40.300 --> 00:08:43.267
and they're all served
from the URL that you see here.

00:08:43.267 --> 00:08:45.501
Okay, so as Anton
just demo'ed earlier,

00:08:45.501 --> 00:08:47.834
we just saw what
the APIs Explorer looks like.

00:08:47.834 --> 00:08:49.834
Over here,
on the right-hand side,

00:08:49.834 --> 00:08:52.968
you can see a list of services
to choose from.

00:08:52.968 --> 00:08:54.767
That list of services

00:08:54.767 --> 00:08:57.200
is generated
by the directory response.

00:08:57.200 --> 00:09:00.534
So in order to access
the Dis--the directory response,

00:09:00.534 --> 00:09:02.267
we visit the URL right there.

00:09:02.267 --> 00:09:04.100
If you're following along
in your browser,

00:09:04.100 --> 00:09:05.767
you can try that right now,

00:09:05.767 --> 00:09:08.400
and you get the JSON response
you see here.

00:09:08.400 --> 00:09:11.701
The JSON response
consists of an items array,

00:09:11.701 --> 00:09:13.501
and then each element
in the array

00:09:13.501 --> 00:09:16.767
describes a particular version
of a particular API.

00:09:16.767 --> 00:09:19.767
So we currently have support
for the APIs you see here,

00:09:19.767 --> 00:09:22.267
and, you know, this list is
probably out of date already.

00:09:22.267 --> 00:09:24.801
They're probably--we're adding
more, um, as we go,

00:09:24.801 --> 00:09:27.701
and as we add more APIs
onto the new infrastructure,

00:09:27.701 --> 00:09:29.501
they'll show up
in the directory here.

00:09:29.501 --> 00:09:32.834
As Anton mentioned, you can also
see discovery v1 is part of--

00:09:32.834 --> 00:09:35.100
is one of those items
in that array.

00:09:35.100 --> 00:09:37.100
Okay, so what information
do we have

00:09:37.100 --> 00:09:39.467
about a particular API?

00:09:39.467 --> 00:09:42.067
So we have identifying
information about the API,

00:09:42.067 --> 00:09:44.801
stuff like its name,
its version, its description.

00:09:44.801 --> 00:09:47.634
Then we have
documentation details,

00:09:47.634 --> 00:09:50.634
uh, including a link
to the actual documentation,

00:09:50.634 --> 00:09:54.133
as well as any icons
that go along with the API.

00:09:54.133 --> 00:09:57.567
And then we have a link
to the Discovery document.

00:09:57.567 --> 00:09:59.667
Now this is where
all the magic happens.

00:09:59.667 --> 00:10:02.334
This is where you're gonna find
all the cool information

00:10:02.334 --> 00:10:05.367
that you need to build a client
library, uh, for the API,

00:10:05.367 --> 00:10:07.601
and we're gonna dive into
this Discovery document.

00:10:07.601 --> 00:10:09.868
Before we do,
let's take a step back

00:10:09.868 --> 00:10:12.901
and then take a look
at what an API looks like,

00:10:12.901 --> 00:10:15.133
and in order to do that,

00:10:15.133 --> 00:10:17.567
we're gonna use
the URL Shortener API.

00:10:17.567 --> 00:10:19.534
For those of you
who aren't familiar

00:10:19.534 --> 00:10:22.767
with the URL shortener feature,
or, uh, product,

00:10:22.767 --> 00:10:24.634
it basically takes
a really long URL

00:10:24.634 --> 00:10:26.634
and just squeezes it down
into a few characters.

00:10:26.634 --> 00:10:29.133
You can see the example
that we have up here.

00:10:29.133 --> 00:10:30.968
You've got this giant URL in red

00:10:30.968 --> 00:10:34.033
that gets smushed down into
this shorter URL in green.

00:10:34.033 --> 00:10:37.033
If you'd like to learn more
about the URL Shortener API,

00:10:37.033 --> 00:10:39.767
you can visit the link you see
up there on the slide.

00:10:39.767 --> 00:10:43.801
Okay, so what does the URL
Shortener API look like?

00:10:43.801 --> 00:10:46.634
So to start out with,
you have resources.

00:10:46.634 --> 00:10:50.067
This particular API has
one resource, the URL object,

00:10:50.067 --> 00:10:52.534
and the resources
are basically the objects

00:10:52.534 --> 00:10:54.734
that the API acts upon.

00:10:54.734 --> 00:10:56.934
And then you have methods.

00:10:56.934 --> 00:11:00.234
Methods are the actions
you can perform on an API.

00:11:00.234 --> 00:11:03.534
For the URL Shortener API,
we've got three methods.

00:11:03.534 --> 00:11:06.968
We've got a "get,"
"insert," and "list."

00:11:06.968 --> 00:11:09.467
Also notice the last one,
the list method--

00:11:09.467 --> 00:11:11.400
it requires authentication,

00:11:11.400 --> 00:11:13.934
because it's returning details
about a particular user,

00:11:13.934 --> 00:11:16.400
and we're gonna get into how
Discovery covers authentication

00:11:16.400 --> 00:11:19.334
a little bit later in the talk.

00:11:19.334 --> 00:11:21.400
Okay, so now we know

00:11:21.400 --> 00:11:23.968
what the API looks like
that we're trying to model.

00:11:23.968 --> 00:11:26.400
What does that look like
in Discovery?

00:11:26.400 --> 00:11:28.667
So first, we need to request
the Discovery document

00:11:28.667 --> 00:11:30.434
for a particular API.

00:11:30.434 --> 00:11:33.000
We do that by visiting
the URL you see here.

00:11:33.000 --> 00:11:35.067
You can notice
the name "URL Shortener"

00:11:35.067 --> 00:11:37.968
and also the version v1
right there in the URL.

00:11:37.968 --> 00:11:39.901
And we make this request

00:11:39.901 --> 00:11:42.868
and we get back the JSON
response that you see here.

00:11:42.868 --> 00:11:44.567
Again, let's take a look

00:11:44.567 --> 00:11:48.033
at what types of information
we have in this response.

00:11:48.033 --> 00:11:50.534
So we have the general
API details, which covers

00:11:50.534 --> 00:11:54.734
a lot of the same details you
saw in the directory response.

00:11:54.734 --> 00:11:57.501
We have
authentication information.

00:11:57.501 --> 00:11:59.501
We have schema information,

00:11:59.501 --> 00:12:03.234
which describes what the request
and response bodies look like.

00:12:03.234 --> 00:12:06.868
We have a section for all
the resources in the API.

00:12:06.868 --> 00:12:08.868
Here in this--
in the URL Shortener example,

00:12:08.868 --> 00:12:10.534
we have the URL resource.

00:12:10.534 --> 00:12:12.701
We have a--see the URL
right there.

00:12:12.701 --> 00:12:14.934
And then, last thing,
we have a section

00:12:14.934 --> 00:12:17.868
for all the methods that
go along with that resource.

00:12:17.868 --> 00:12:20.234
So we're gonna dive into
thisMethods section

00:12:20.234 --> 00:12:23.234
and see exactly
what information it has,

00:12:23.234 --> 00:12:27.167
but before we do, let's take
a look at a generic HTTP request

00:12:27.167 --> 00:12:29.167
to the URL Shortener API.

00:12:29.167 --> 00:12:32.367
So here, I have the anatomy
of an HTTP request.

00:12:32.367 --> 00:12:36.167
This is for the "get" method
on the URL Shortener API.

00:12:36.167 --> 00:12:39.067
So basically,
you start out with--

00:12:39.067 --> 00:12:41.701
we have the HTTP method,
which is "get,"

00:12:41.701 --> 00:12:45.334
followed by the path
for the method itself,

00:12:45.334 --> 00:12:48.501
and then any parameters
that go along--

00:12:48.501 --> 00:12:51.501
uh, that are tagged onto
that path itself.

00:12:51.501 --> 00:12:54.067
Here, we have
the short URL parameter,

00:12:54.067 --> 00:12:56.567
so we bundle that all up
in an HTTP request.

00:12:56.567 --> 00:12:58.167
We make the request,

00:12:58.167 --> 00:13:00.334
and then we get
a JSON response body.

00:13:00.334 --> 00:13:03.434
Okay, so what does this look
like in the Discovery document?

00:13:03.434 --> 00:13:06.534
So to start out with,
like I mentioned earlier,

00:13:06.534 --> 00:13:08.434
we've got a Methods section

00:13:08.434 --> 00:13:11.133
that contains all the methods
on the URL resource.

00:13:11.133 --> 00:13:13.701
I only had room to list
the "get" method here,

00:13:13.701 --> 00:13:15.434
but you would also see

00:13:15.434 --> 00:13:18.133
the "list" method
and the "insert" method.

00:13:18.133 --> 00:13:20.067
And then inside
the "get" method,

00:13:20.067 --> 00:13:23.667
you've got all the properties
to make that particular request,

00:13:23.667 --> 00:13:26.601
so to start out with,
we have the HTTP method.

00:13:26.601 --> 00:13:29.033
Uh, for the "get" method,
it's "get,"

00:13:29.033 --> 00:13:30.968
but for inserts,
updates, and deletes,

00:13:30.968 --> 00:13:33.534
it could also be "put,"
"post," or "delete."

00:13:33.534 --> 00:13:36.601
Next, we have
the "path" property,

00:13:36.601 --> 00:13:40.133
which basically tells you what
path to make the request to.

00:13:40.133 --> 00:13:44.767
The "path" property is based on
URI Template v04 format.

00:13:44.767 --> 00:13:48.234
And also notice
how it's not the full URL.

00:13:48.234 --> 00:13:51.701
So let's take a segue into,
uh, also looking into

00:13:51.701 --> 00:13:54.701
how to calculate the full URL
to make a request.

00:13:54.701 --> 00:13:57.267
So here at the top here,
you see the full URL

00:13:57.267 --> 00:13:59.834
for making a "get" request
to the URL Shortener API.

00:13:59.834 --> 00:14:01.868
So how do we get this?

00:14:01.868 --> 00:14:04.334
So we start by taking
the absolute URI

00:14:04.334 --> 00:14:06.367
of the Discovery
document itself.

00:14:06.367 --> 00:14:10.734
In this particular case,
it's https://www.googleapis.com.

00:14:10.734 --> 00:14:13.968
To that, we add
the base "path" property.

00:14:13.968 --> 00:14:16.100
Now the base "path" property
is gonna be found

00:14:16.100 --> 00:14:18.400
at the top level
of the Discovery document,

00:14:18.400 --> 00:14:21.400
and it's gonna be the base path
to which all the other paths

00:14:21.400 --> 00:14:24.334
and the methods
are--are made relative to.

00:14:24.334 --> 00:14:26.534
In this particular case,
it's a relative URI,

00:14:26.534 --> 00:14:29.534
but it may, in the future,
also be an absolute URI.

00:14:29.534 --> 00:14:32.200
And then, lastly,
we append to that

00:14:32.200 --> 00:14:35.000
the "path" property
from the method itself.

00:14:35.000 --> 00:14:37.434
Take these three pieces,
we smush 'em together,

00:14:37.434 --> 00:14:40.701
and we've got the URL to which
to make the request.

00:14:40.701 --> 00:14:44.234
Also, another note
about this "path" property--

00:14:44.234 --> 00:14:45.934
Like I mentioned before,

00:14:45.934 --> 00:14:48.467
it's based on
the URI Template v04 format,

00:14:48.467 --> 00:14:51.300
which means that it
may contain variables

00:14:51.300 --> 00:14:53.000
inside the path itself.

00:14:53.000 --> 00:14:55.000
If you see one
of these curly braces,

00:14:55.000 --> 00:14:57.501
it means it's a variable,
and it means you can also

00:14:57.501 --> 00:14:59.334
learn more about
that particular variable

00:14:59.334 --> 00:15:01.734
from the Parameters section
on the method.

00:15:01.734 --> 00:15:04.767
I'll get into the Parameters
section in just a little bit.

00:15:04.767 --> 00:15:06.767
Okay, so rounding out

00:15:06.767 --> 00:15:08.801
the Methods section
on the Discovery document,

00:15:08.801 --> 00:15:11.801
Uh, like I just mentioned,
we have a Parameters section,

00:15:11.801 --> 00:15:13.634
and then we have any details

00:15:13.634 --> 00:15:16.934
on what the request
and the responses look like.

00:15:16.934 --> 00:15:19.734
Okay, so let's dive into
the parameters

00:15:19.734 --> 00:15:21.634
for each particular method.

00:15:21.634 --> 00:15:25.267
If a method has any parameters
in either the path or the query,

00:15:25.267 --> 00:15:28.267
you're gonna find it
in this Parameters section.

00:15:28.267 --> 00:15:30.067
So if you remember

00:15:30.067 --> 00:15:33.067
from the HTTP example
I showed a few slides ago,

00:15:33.067 --> 00:15:36.300
uh, for the "get" method,
we had a short URL parameter.

00:15:36.300 --> 00:15:39.701
You can see over there,
on the right, how that maps onto

00:15:39.701 --> 00:15:41.701
the Parameters section
of the Discovery document,

00:15:41.701 --> 00:15:43.567
and you can see location query

00:15:43.567 --> 00:15:46.667
to indicate that it's
a query parameter.

00:15:46.667 --> 00:15:50.267
Some other information that's
included about the parameters.

00:15:50.267 --> 00:15:53.267
You can get details about
what type the parameter is.

00:15:53.267 --> 00:15:55.067
You see some valid values
up there.

00:15:55.067 --> 00:15:58.334
You've got string, integer,
number, Boolean, or any.

00:15:58.334 --> 00:16:01.434
And then you also have
any additional details

00:16:01.434 --> 00:16:03.133
about that parameter.

00:16:03.133 --> 00:16:05.467
You've got a description.
Um, if it's an enum,

00:16:05.467 --> 00:16:07.300
you can have
all the enum values,

00:16:07.300 --> 00:16:09.300
as well as descriptions
about those enums.

00:16:09.300 --> 00:16:11.133
Then you can also
have information

00:16:11.133 --> 00:16:13.667
about whether the parameter
is required or not.

00:16:13.667 --> 00:16:15.400
These properties you see here

00:16:15.400 --> 00:16:18.467
come from the JSON schema,
draft 03 spec.

00:16:18.467 --> 00:16:21.033
Um, with parameters,
we've also made a few additions

00:16:21.033 --> 00:16:23.267
to make parameters
a little bit clearer.

00:16:23.267 --> 00:16:25.767
If you want to learn more
about JSON schema,

00:16:25.767 --> 00:16:29.601
you can visit the link
that you see there.

00:16:29.601 --> 00:16:32.734
Okay, so now we have details
on the methods and parameters.

00:16:32.734 --> 00:16:35.734
We know how to make the request.
Now let's take a look

00:16:35.734 --> 00:16:38.400
at the request
and the response body,

00:16:38.400 --> 00:16:40.901
and the way we do that
is with schemas.

00:16:40.901 --> 00:16:44.133
So basically, schemas show,
what do the requests

00:16:44.133 --> 00:16:46.801
and the responses
of a method look like?

00:16:46.801 --> 00:16:49.868
So at the top level
of the Discovery document,

00:16:49.868 --> 00:16:51.868
outside of the methods,
outside of the resources,

00:16:51.868 --> 00:16:54.000
you're gonna have
a schemas object,

00:16:54.000 --> 00:16:56.234
and that's gonna contain
all the schemas

00:16:56.234 --> 00:16:58.267
for the rest of
the Discovery document.

00:16:58.267 --> 00:17:01.868
The schemas are identified
by a unique I.D.

00:17:01.868 --> 00:17:04.901
In the URL Shortener example,
we have the URL schema.

00:17:04.901 --> 00:17:06.767
The I.D. here is URL.

00:17:06.767 --> 00:17:09.267
That I.D. is unique throughout
the Discovery document,

00:17:09.267 --> 00:17:12.300
and it's used to refer back
to this particular schema.

00:17:12.300 --> 00:17:15.300
So if you'll remember earlier,
from our Methods section,

00:17:15.300 --> 00:17:17.067
we had a "response" property

00:17:17.067 --> 00:17:19.267
to say that we had
a response body,

00:17:19.267 --> 00:17:22.000
and it had a schema I.D. of URL.

00:17:22.000 --> 00:17:24.567
We can take a look
at that schema I.D.,

00:17:24.567 --> 00:17:26.400
jump back up
to the Schemas section,

00:17:26.400 --> 00:17:28.467
and say, "Oh, it matched
to this URL here.

00:17:28.467 --> 00:17:30.901
Here's where I can find
the schema for it."

00:17:30.901 --> 00:17:34.200
Also note, really quick,
this $ref syntax.

00:17:34.200 --> 00:17:38.300
If you see that, that's borrowed
from the JSON referencing syntax

00:17:38.300 --> 00:17:40.434
of, uh, the JSON
schema specification.

00:17:40.434 --> 00:17:42.267
If you see $ref,

00:17:42.267 --> 00:17:45.067
just know that the value
is a schema I.D.

00:17:45.067 --> 00:17:48.734
that points to a schema
in the Schemas section.

00:17:48.734 --> 00:17:51.200
And then, finally, you have

00:17:51.200 --> 00:17:53.100
the actual schema itself.

00:17:53.100 --> 00:17:54.801
Like I mentioned earlier,

00:17:54.801 --> 00:17:57.701
we're using JSON Schema
draft 03, as well,

00:17:57.701 --> 00:17:59.434
and to get an idea

00:17:59.434 --> 00:18:02.000
about how this schema maps
to an actual response,

00:18:02.000 --> 00:18:04.767
let's go back and look over
there on the left-hand side.

00:18:04.767 --> 00:18:07.133
You'll see the response
from the "get" method.

00:18:07.133 --> 00:18:10.834
It had such properties as I.D.,
kind, and long URL.

00:18:10.834 --> 00:18:12.901
And then you can look
over on the right

00:18:12.901 --> 00:18:15.033
to the JSON schema itself,
and you can see

00:18:15.033 --> 00:18:18.501
how those properties are modeled
in the JSON schema.

00:18:18.501 --> 00:18:20.667
You can see how they provide
additional information,

00:18:20.667 --> 00:18:22.601
such as type information

00:18:22.601 --> 00:18:25.601
or description information.

00:18:25.601 --> 00:18:29.100
Okay, so that kind of tells you
how to make a request,

00:18:29.100 --> 00:18:31.634
but what if--what if a method
needs authentication?

00:18:31.634 --> 00:18:33.667
So there's a lot
of methods on APIs

00:18:33.667 --> 00:18:35.434
that do require authentication.

00:18:35.434 --> 00:18:37.133
In the URL Shortener API,

00:18:37.133 --> 00:18:39.901
we saw that the list method
needed authentication.

00:18:39.901 --> 00:18:42.300
When you're
doing authentication,

00:18:42.300 --> 00:18:45.267
we're gonna be talking about
the OAuth 2 specification.

00:18:45.267 --> 00:18:47.534
If you want to learn more
about OAuth 2,

00:18:47.534 --> 00:18:49.534
you can visit the link
we have there,

00:18:49.534 --> 00:18:52.100
or there's a talk later on today
that covers OAuth 2.

00:18:52.100 --> 00:18:54.701
OAuth 2 is supported
by most APIs

00:18:54.701 --> 00:18:56.934
on the new
Google APIs infrastructure.

00:18:56.934 --> 00:18:59.133
Now when you're doing OAuth 2,

00:18:59.133 --> 00:19:00.968
we have these strings
called scopes

00:19:00.968 --> 00:19:03.400
that indicate what kind
of permissions you have,

00:19:03.400 --> 00:19:05.300
uh, when making requests
against the API.

00:19:05.300 --> 00:19:07.167
They can say whether or not

00:19:07.167 --> 00:19:09.133
you can make
a read and write request

00:19:09.133 --> 00:19:11.033
or whether you can make
a read-only request.

00:19:11.033 --> 00:19:13.634
So Discovery works
by documenting the scopes

00:19:13.634 --> 00:19:15.534
for a particular API.

00:19:15.534 --> 00:19:17.267
So let's take a look

00:19:17.267 --> 00:19:19.300
at what this Auth section
actually looks like.

00:19:19.300 --> 00:19:21.868
So again, at the top level
of the Discovery document,

00:19:21.868 --> 00:19:23.734
you're gonna have
an Auth section.

00:19:23.734 --> 00:19:26.200
That's gonna contain all
the auth-related information

00:19:26.200 --> 00:19:28.000
about that particular API.

00:19:28.000 --> 00:19:31.033
Now we've got an OAuth 2
and a Scopes section,

00:19:31.033 --> 00:19:33.033
because right now,
we're focusing on documenting

00:19:33.033 --> 00:19:35.801
only the OAuth 2 scopes.

00:19:35.801 --> 00:19:39.267
We have the value
of the scope itself,

00:19:39.267 --> 00:19:40.934
and then lastly,

00:19:40.934 --> 00:19:43.334
we have any additional
information about that scope,

00:19:43.334 --> 00:19:45.601
such as, uh, the description.

00:19:45.601 --> 00:19:48.000
So now how do we
map those scopes

00:19:48.000 --> 00:19:49.868
back onto our actual methods?

00:19:49.868 --> 00:19:52.367
Well, here, we have an example
of the "list" method

00:19:52.367 --> 00:19:54.033
from the URL Shortener API.

00:19:54.033 --> 00:19:55.801
You remember, earlier,
the "list" method

00:19:55.801 --> 00:19:58.100
requires authentication,
and because it does,

00:19:58.100 --> 00:20:00.567
you'll see that it has
a scopes array,

00:20:00.567 --> 00:20:03.534
and each value
in that scopes array

00:20:03.534 --> 00:20:06.667
points back to a scope
in the Auth section.

00:20:06.667 --> 00:20:09.367
So that way, you know that
for this particular method,

00:20:09.367 --> 00:20:11.167
it supports this scope here,

00:20:11.167 --> 00:20:13.000
and you've got
some more information

00:20:13.000 --> 00:20:14.868
about how you could actually
do authentication

00:20:14.868 --> 00:20:18.234
uh, for a--
for particular methods.

00:20:18.234 --> 00:20:20.734
Okay, so that kind of gives you
an overview

00:20:20.734 --> 00:20:23.033
of what the Discovery document
looks like.

00:20:23.033 --> 00:20:25.534
A couple other things
about the Discovery document

00:20:25.534 --> 00:20:27.267
to keep in mind.

00:20:27.267 --> 00:20:29.868
Uh, one is that most objects,
most properties,

00:20:29.868 --> 00:20:32.033
as much as you can,
in the Discovery document,

00:20:32.033 --> 00:20:34.300
is gonna--are gonna have
a "description" property.

00:20:34.300 --> 00:20:37.868
This includes methods,
parameters, and schemas,

00:20:37.868 --> 00:20:40.033
and the "description" property
is basically

00:20:40.033 --> 00:20:43.167
a human-readable description
about that particular property,

00:20:43.167 --> 00:20:46.267
so this is really useful in,
you know, documentation,

00:20:46.267 --> 00:20:48.100
or client library documentation.

00:20:48.100 --> 00:20:50.601
You may have also seen it
in the APIs Explorer.

00:20:50.601 --> 00:20:52.334
It just basically gives you
an indication

00:20:52.334 --> 00:20:53.968
of what the property
actually does,

00:20:53.968 --> 00:20:55.801
so keep an eye out for that,

00:20:55.801 --> 00:20:58.234
and as you new--
add new properties,

00:20:58.234 --> 00:21:00.067
they'll probably have
"description" properties

00:21:00.067 --> 00:21:01.968
along with them, as well.

00:21:01.968 --> 00:21:04.400
Okay, so lastly, some other tips

00:21:04.400 --> 00:21:06.968
when using
the Discovery Service.

00:21:06.968 --> 00:21:09.767
One is that this service
is SSL only.

00:21:09.767 --> 00:21:11.834
If you saw, in all the examples,

00:21:11.834 --> 00:21:14.801
we were using HTTPS, not HTTP.

00:21:14.801 --> 00:21:17.334
You don't need an API key

00:21:17.334 --> 00:21:19.200
to access the Discovery Service.

00:21:19.200 --> 00:21:22.267
If you go into some of the other
talks here at Google I/O

00:21:22.267 --> 00:21:24.767
or you're already familiar
with the APIs,

00:21:24.767 --> 00:21:26.667
you may have noticed
a "key" property

00:21:26.667 --> 00:21:28.334
up there in the query parameter.

00:21:28.334 --> 00:21:30.534
You don't need that to use
the Discovery Service,

00:21:30.534 --> 00:21:32.601
and we did that basically
to eliminate confusion

00:21:32.601 --> 00:21:34.300
between, you know,
the key for Discovery

00:21:34.300 --> 00:21:36.267
versus the key
for the API itself.

00:21:36.267 --> 00:21:39.267
Um, the examples that I saw--

00:21:39.267 --> 00:21:40.934
that you've seen here--

00:21:40.934 --> 00:21:43.267
basically have methods
inside of resources,

00:21:43.267 --> 00:21:46.400
but note that the API itself
may have methods

00:21:46.400 --> 00:21:48.968
that aren't connected
to any particular resource.

00:21:48.968 --> 00:21:51.167
We call these methods
API-level methods,

00:21:51.167 --> 00:21:53.667
and if an API has them,
they'll be right there

00:21:53.667 --> 00:21:56.067
at the top level
of the Discovery document.

00:21:56.067 --> 00:21:58.634
So in the same vein,

00:21:58.634 --> 00:22:02.267
resources themselves could also
contain nested resources,

00:22:02.267 --> 00:22:04.400
so that's all something
to keep out for

00:22:04.400 --> 00:22:06.834
when you're walking through
the Discovery document.

00:22:06.834 --> 00:22:09.834
Schema references,
as I mentioned earlier--

00:22:09.834 --> 00:22:12.133
if you see this $ref syntax,

00:22:12.133 --> 00:22:14.801
just know the value
is a schema I.D.,

00:22:14.801 --> 00:22:18.234
which then points to a schema
up in the Schema section.

00:22:18.234 --> 00:22:20.601
Uh, URI Templates--

00:22:20.601 --> 00:22:22.601
the "path" property
is based on URI Templates,

00:22:22.601 --> 00:22:24.267
so if you see curly brackets,

00:22:24.267 --> 00:22:26.300
just know the value inside
that curly brackets

00:22:26.300 --> 00:22:28.901
is pointing to a parameters
in the Parameters section,

00:22:28.901 --> 00:22:31.534
where you can learn more about
what that variable means.

00:22:31.534 --> 00:22:34.534
And then, lastly, if you're
doing authentication,

00:22:34.534 --> 00:22:37.534
be sure to read up
on how OAuth 2 works.

00:22:37.534 --> 00:22:39.968
Okay, so that gives you an idea

00:22:39.968 --> 00:22:41.968
of what the Discovery document
actually looks like.

00:22:41.968 --> 00:22:43.634
Now Joe's gonna come up

00:22:43.634 --> 00:22:45.634
and tell you how to use
the Discovery document

00:22:45.634 --> 00:22:48.834
to actually build
a client library.

00:22:48.834 --> 00:22:51.267
Gregorio: Thanks, Monsur.

00:22:51.267 --> 00:22:53.868
So we've got
this great document.

00:22:53.868 --> 00:22:57.000
How are we actually going
to use it and consume it?

00:22:57.000 --> 00:22:58.734
Three simple steps, actually.

00:22:58.734 --> 00:23:00.434
The first thing you do is,

00:23:00.434 --> 00:23:02.367
obviously, fetch
the Discovery document

00:23:02.367 --> 00:23:04.968
for the API you're interested
in talking to.

00:23:04.968 --> 00:23:08.167
Build a resource and a request
based on that.

00:23:08.167 --> 00:23:11.300
When you actually do that,
we'll get to in a little bit.

00:23:11.300 --> 00:23:13.667
And then finally,
make that RESTful call

00:23:13.667 --> 00:23:15.567
and fetch the response.

00:23:15.567 --> 00:23:19.601
So what I'm gonna show you is
a simple Python client example.

00:23:19.601 --> 00:23:21.601
Okay, this is fully functional

00:23:21.601 --> 00:23:24.701
in that it works on,
you know, on these APIs.

00:23:24.701 --> 00:23:26.834
It's only 35 lines of Python.

00:23:26.834 --> 00:23:30.033
There's definitely things
it does not do,

00:23:30.033 --> 00:23:33.133
so it is not complete, but it's
a very good starting point.

00:23:33.133 --> 00:23:35.901
So there it is--
35 lines of code.

00:23:35.901 --> 00:23:38.133
Entire library--not only
entire library,

00:23:38.133 --> 00:23:41.067
but the last two lines
actually show

00:23:41.067 --> 00:23:43.033
using the library,

00:23:43.033 --> 00:23:46.367
so at the bottom, you'll see
we've built a service object

00:23:46.367 --> 00:23:48.367
based on the Discovery.

00:23:48.367 --> 00:23:50.734
Discovery, at this point,

00:23:50.734 --> 00:23:54.067
is a deserialized
Discovery document

00:23:54.067 --> 00:23:55.734
for, in this case,
the URL shortener,

00:23:55.734 --> 00:23:57.400
and that collection object

00:23:57.400 --> 00:23:59.901
is what we're going to start
attaching our methods to

00:23:59.901 --> 00:24:02.033
to build up that API service.

00:24:02.033 --> 00:24:03.767
And then, in the very next line,

00:24:03.767 --> 00:24:05.234
we actually call into
that service.

00:24:05.234 --> 00:24:07.167
We call service, we call .url,

00:24:07.167 --> 00:24:09.067
because, remember,
that's the collection,

00:24:09.067 --> 00:24:12.634
that's the resource
in the URL Shortener API.

00:24:12.634 --> 00:24:14.801
We insert, there,

00:24:14.801 --> 00:24:17.000
and then we pass in a body,

00:24:17.000 --> 00:24:20.801
which is that JSON body
that we're going to post,

00:24:20.801 --> 00:24:24.167
so that's the URL
that we want to be shortened.

00:24:24.167 --> 00:24:26.667
We then--that gets executed,

00:24:26.667 --> 00:24:29.000
and we return the result.

00:24:29.000 --> 00:24:31.501
So let's look at what we've got
goin' on here.

00:24:31.501 --> 00:24:34.000
So just to show there's nothing
up my sleeve here,

00:24:34.000 --> 00:24:36.334
these are the only five imports
that are there.

00:24:36.334 --> 00:24:39.901
Now the JSON urlparse
and urllib

00:24:39.901 --> 00:24:42.701
are part of the Python
standard library.

00:24:42.701 --> 00:24:45.767
The httplib2 library

00:24:45.767 --> 00:24:48.767
just makes it very easy
to make HTTP requests,

00:24:48.767 --> 00:24:50.801
and the uritemplate library

00:24:50.801 --> 00:24:54.334
is a third-party library
for expanding URI Templates.

00:24:54.334 --> 00:24:56.334
So let's get those
out of the way

00:24:56.334 --> 00:24:59.334
so we've got a little more space
to see what's going on.

00:24:59.334 --> 00:25:02.400
So the very first thing we do
is we're gonna start Step 1--

00:25:02.400 --> 00:25:04.234
fetch the Discovery document.

00:25:04.234 --> 00:25:06.133
So you see here,

00:25:06.133 --> 00:25:08.701
that URI is for
the Discovery document

00:25:08.701 --> 00:25:11.100
for the URL Shortener
service v1.

00:25:11.100 --> 00:25:14.033
I request it,
and then in this case,

00:25:14.033 --> 00:25:16.234
I, uh, convert that

00:25:16.234 --> 00:25:20.667
into a Python data structure
from the JSON.

00:25:20.667 --> 00:25:23.667
Next step is
I start going through

00:25:23.667 --> 00:25:25.634
that process
that Monsur talked about

00:25:25.634 --> 00:25:27.434
of how do you construct the URL

00:25:27.434 --> 00:25:29.300
that you're gonna make
that request to?

00:25:29.300 --> 00:25:30.734
So this is the first part of it.

00:25:30.734 --> 00:25:32.667
I'm going to take that base URI,

00:25:32.667 --> 00:25:34.601
where the Discovery
document was.

00:25:34.601 --> 00:25:36.901
I join that up
with that relative URI

00:25:36.901 --> 00:25:38.801
that's available in base path.

00:25:38.801 --> 00:25:41.601
Join that up. Now I've got
that base URI

00:25:41.601 --> 00:25:43.734
for the service itself.

00:25:43.734 --> 00:25:46.501
Here's just a simple
collection object.

00:25:46.501 --> 00:25:49.534
This is where I'm gonna start
attaching methods to.

00:25:51.133 --> 00:25:54.133
Gregorio: Now here's
our build call, right?

00:25:54.133 --> 00:25:58.133
We want this to be passed in
a Discovery document,

00:25:58.133 --> 00:26:01.601
and we're gonna start attaching
methods and attributes

00:26:01.601 --> 00:26:03.434
to that collection object

00:26:03.434 --> 00:26:05.434
to start--build up
our API service,

00:26:05.434 --> 00:26:07.234
so the very first thing we do

00:26:07.234 --> 00:26:10.334
is we loop over all
of the resource sections

00:26:10.334 --> 00:26:12.167
that are available
at that level

00:26:12.167 --> 00:26:14.434
in the Discovery document,
so that's

00:26:14.434 --> 00:26:17.300
that "for name, resource
in discovery, get 'resources'."

00:26:17.300 --> 00:26:20.367
Um, there might not be any,
so be careful of that.

00:26:20.367 --> 00:26:23.367
Iterate all of--all over--
all of those,

00:26:23.367 --> 00:26:25.167
and then, for each of those,

00:26:25.167 --> 00:26:28.133
these are actually going
to be nested resources, right?

00:26:28.133 --> 00:26:30.667
That was one of the things
Monsur said to be careful of.

00:26:30.667 --> 00:26:32.501
You could have
nested resources in here.

00:26:32.501 --> 00:26:36.834
So you'll notice, what we do is
we attach that result

00:26:36.834 --> 00:26:39.033
of recursing into ourselves

00:26:39.033 --> 00:26:41.701
onto that collection,

00:26:41.701 --> 00:26:43.901
so that gets us
our nested resources.

00:26:43.901 --> 00:26:46.968
The next loop is we're gonna
loop over all the methods,

00:26:46.968 --> 00:26:48.801
so we loop over all the methods.

00:26:48.801 --> 00:26:50.968
We call "create new method,"
give it the name,

00:26:50.968 --> 00:26:53.200
and that constructs a new method

00:26:53.200 --> 00:26:55.734
that we then attach
to that collection object.

00:26:55.734 --> 00:26:58.501
So here's the real meat,
the "create new method."

00:26:58.501 --> 00:27:00.834
This is a method factory, right?

00:27:00.834 --> 00:27:03.334
We come in here,
and what do we do?

00:27:03.334 --> 00:27:05.734
We attach this method to it.

00:27:05.734 --> 00:27:07.400
The first thing it does is

00:27:07.400 --> 00:27:09.901
it looks at all the parameters
that are passed in.

00:27:09.901 --> 00:27:11.567
We pop off the body,

00:27:11.567 --> 00:27:13.567
'cause that's where bodies
are going to be.

00:27:13.567 --> 00:27:15.701
That's actually gonna be sent
as the HTTP body

00:27:15.701 --> 00:27:18.434
that gets sent over
in a request, if there's any.

00:27:18.434 --> 00:27:21.133
Now we start finishing up

00:27:21.133 --> 00:27:23.400
that process
that Monsur talked about

00:27:23.400 --> 00:27:25.934
of constructing that URI.

00:27:25.934 --> 00:27:28.567
So we take that base URI

00:27:28.567 --> 00:27:31.667
and we now add on the path part

00:27:31.667 --> 00:27:33.767
for the method
that we're dealing with.

00:27:33.767 --> 00:27:35.868
After that--

00:27:35.868 --> 00:27:37.868
and we notice,
we used the URI Template,

00:27:37.868 --> 00:27:39.868
so we're gonna take
that path part

00:27:39.868 --> 00:27:42.534
and expand it as a URI Template
and attach that,

00:27:42.534 --> 00:27:45.334
so now we've got that full URI

00:27:45.334 --> 00:27:47.467
with the domain name

00:27:47.467 --> 00:27:49.133
and then the path.

00:27:49.133 --> 00:27:52.133
Now we have to figure out
what the query parameters are,

00:27:52.133 --> 00:27:54.367
so we look at
the Parameters section

00:27:54.367 --> 00:27:56.400
of the Discovery document.

00:27:56.400 --> 00:27:58.901
We look in there,
and we actually take out

00:27:58.901 --> 00:28:01.968
anything that should have been
already used in the path.

00:28:01.968 --> 00:28:04.467
All right, knock those out,
so that's where the delete key

00:28:04.467 --> 00:28:06.167
with all these
pnames comes from.

00:28:06.167 --> 00:28:07.968
We're taking all
of those things out.

00:28:07.968 --> 00:28:09.634
What's left over should be

00:28:09.634 --> 00:28:12.133
all the stuff that's supposed
to go in the query parameters.

00:28:12.133 --> 00:28:14.734
So if there's anything left,
I URL encode it,

00:28:14.734 --> 00:28:16.567
I attach that to the URL,

00:28:16.567 --> 00:28:18.567
and now I'm ready
to make my request,

00:28:18.567 --> 00:28:22.033
so "h" is my httplib2 object
for making requests.

00:28:22.033 --> 00:28:23.701
Call request.

00:28:23.701 --> 00:28:26.000
I've calculated the URL.
I make the call.

00:28:26.000 --> 00:28:29.033
The method is also
in the Discovery document,

00:28:29.033 --> 00:28:31.100
under the "HTTP method"
property.

00:28:31.100 --> 00:28:33.634
There's my body.
That gets sent over straight,

00:28:33.634 --> 00:28:36.634
and then the headers--in this
case, we're dealing with JSON,

00:28:36.634 --> 00:28:38.501
so we have to add that.

00:28:38.501 --> 00:28:40.534
And that's it.

00:28:40.534 --> 00:28:42.667
So then here, now you can see
what happens, right?

00:28:42.667 --> 00:28:44.701
We call build, with that
Discovery document,

00:28:44.701 --> 00:28:46.534
we attach it
to that empty collection,

00:28:46.534 --> 00:28:49.033
and then I've got a surface
there that I'm able to use

00:28:49.033 --> 00:28:50.701
to make the requests.

00:28:50.701 --> 00:28:53.801
So let's try this live.

00:28:53.801 --> 00:28:56.801
So here's the code, again,
that we were just talking about,

00:28:56.801 --> 00:28:58.501
available here,

00:28:58.501 --> 00:29:00.767
and if we go and run that--

00:29:00.767 --> 00:29:04.300
From the command line,
we see what gets returned

00:29:04.300 --> 00:29:05.968
is that, uh,

00:29:05.968 --> 00:29:08.434
the response
from shortening that URI.

00:29:12.133 --> 00:29:15.200
Gregorio: Okay, so when I built
this up, I'm doing Python.

00:29:15.200 --> 00:29:17.701
Python is a dynamic language,

00:29:17.701 --> 00:29:20.801
so I'm actually making
that request as I run,

00:29:20.801 --> 00:29:23.334
and I'm building up
my surface at runtime.

00:29:23.334 --> 00:29:25.334
If you're using
a strongly typed language,

00:29:25.334 --> 00:29:27.100
you may not want to do that,

00:29:27.100 --> 00:29:28.968
so you may actually want to--

00:29:28.968 --> 00:29:31.467
uh, and we do this
in Java ourselves,

00:29:31.467 --> 00:29:33.267
request ahead of time.

00:29:33.267 --> 00:29:34.968
Use that Discovery document

00:29:34.968 --> 00:29:38.400
to actually create a Java
library, which is then compiled,

00:29:38.400 --> 00:29:41.400
and then you can, you know,
use that in your process,

00:29:41.400 --> 00:29:43.067
in, uh, in your program.

00:29:43.067 --> 00:29:45.334
So, like I said,
dynamically languages,

00:29:45.334 --> 00:29:47.000
you can--you can do that,

00:29:47.000 --> 00:29:48.834
and there's various
levels, right?

00:29:48.834 --> 00:29:50.968
You have to decide
what language you're in

00:29:50.968 --> 00:29:53.567
and what pros and cons are
for doing each of those.

00:29:53.567 --> 00:29:56.067
So that was the simple
Python client.

00:29:56.067 --> 00:29:57.734
We did that working demo.

00:29:57.734 --> 00:30:01.000
That is a really, really,
really stripped-down version

00:30:01.000 --> 00:30:04.567
of the Google APIs Python client
that we have out there.

00:30:04.567 --> 00:30:07.834
It is a fully
functional library--

00:30:07.834 --> 00:30:09.667
covers all those areas that

00:30:09.667 --> 00:30:12.434
that 35 lines of Python code
did not do.

00:30:12.434 --> 00:30:15.601
It does parameter checking.
It checks the parameter names.

00:30:15.601 --> 00:30:17.767
Um, it deals
with authentication.

00:30:17.767 --> 00:30:19.634
What you saw
when I did that request

00:30:19.634 --> 00:30:22.100
is I actually had to type in
the straight JSON

00:30:22.100 --> 00:30:23.767
that was going over the wire.

00:30:23.767 --> 00:30:26.267
The Python client library
takes care of that for you,

00:30:26.267 --> 00:30:28.267
where you just pass it
a Python data structure

00:30:28.267 --> 00:30:30.267
and it'll serialize it
into Python for you,

00:30:30.267 --> 00:30:32.334
so lots of--lots of help
that way.

00:30:32.334 --> 00:30:35.067
This is what that same
exact code would look like

00:30:35.067 --> 00:30:38.167
if you were using
the API Python client library,

00:30:38.167 --> 00:30:40.601
so we just import
the build function

00:30:40.601 --> 00:30:42.534
from apiclient discovery.

00:30:42.534 --> 00:30:45.868
We say build urlshortener, v1.

00:30:45.868 --> 00:30:47.934
That goes out and does
just what I did

00:30:47.934 --> 00:30:50.801
in that 35-line client--

00:30:50.801 --> 00:30:54.267
35 lines of code, but a lot
more comprehensively,

00:30:54.267 --> 00:30:56.367
I built up a surface there,

00:30:56.367 --> 00:30:58.901
and then I call
service url insert,

00:30:58.901 --> 00:31:00.567
and you'll notice there

00:31:00.567 --> 00:31:02.634
that the body is actually
a Python data structure.

00:31:02.634 --> 00:31:04.667
That'll get serialized.
I call execute,

00:31:04.667 --> 00:31:07.667
and that gives me the exact
same response as we just saw.

00:31:07.667 --> 00:31:09.734
There's the URI
for downloading it

00:31:09.734 --> 00:31:12.300
if you want to look at that
a little more deeply.

00:31:12.300 --> 00:31:15.667
We have libraries
built on Discovery

00:31:15.667 --> 00:31:17.467
in a variety of languages,

00:31:17.467 --> 00:31:20.167
so we've got
Java and Python libraries

00:31:20.167 --> 00:31:22.133
that are available in beta,

00:31:22.133 --> 00:31:25.367
and PHP, Ruby, and .NET
that are available in alpha.

00:31:25.367 --> 00:31:27.067
Now beta for us means

00:31:27.067 --> 00:31:30.234
that we're very happy with
how that project is going.

00:31:30.234 --> 00:31:31.901
Things have settled down.

00:31:31.901 --> 00:31:34.934
We're not looking at
breaking changes coming in,

00:31:34.934 --> 00:31:36.934
as far as we know.
We're in bugfixing.

00:31:36.934 --> 00:31:38.934
We'd like you to,
you know, to dig in

00:31:38.934 --> 00:31:40.734
and start using these libraries.

00:31:40.734 --> 00:31:43.767
Um, alpha means
under construction.

00:31:43.767 --> 00:31:45.767
We're--we're dealing--

00:31:45.767 --> 00:31:48.534
you know, we may make
breaking changes to the library.

00:31:48.534 --> 00:31:50.834
They're being actively,
you know, worked on,

00:31:50.834 --> 00:31:53.968
um, so please use,
but use at your own risk.

00:31:53.968 --> 00:31:55.634
Know what you're getting into,

00:31:55.634 --> 00:31:58.167
that, you know,
things may change on you.

00:31:58.167 --> 00:32:01.767
So let me hand it back
to, uh, Anton to wrap it up.

00:32:01.767 --> 00:32:04.033
Lopyrev: Thanks, Joe.
Um, this is really cool.

00:32:04.033 --> 00:32:06.534
I hope you guys really
understand what just happened.

00:32:06.534 --> 00:32:08.367
I mean, that's
a really small library,

00:32:08.367 --> 00:32:11.367
but it's so functional that you
can actually use that library

00:32:11.367 --> 00:32:13.801
to access
the Discovery Service itself,

00:32:13.801 --> 00:32:16.033
and then build another library
to discover itself,

00:32:16.033 --> 00:32:17.868
so it's an infinite
recursion, really,

00:32:17.868 --> 00:32:19.734
which is really cool.

00:32:19.734 --> 00:32:22.534
So with that, let's quickly
do a review of what we did here,

00:32:22.534 --> 00:32:24.567
and we covered the Google APIs
Discovery Service,

00:32:24.567 --> 00:32:26.501
which is the service
that provides you

00:32:26.501 --> 00:32:28.667
machine-readable specification
of other APIs,

00:32:28.667 --> 00:32:30.701
and, uh, this is the link
documentation again.

00:32:30.701 --> 00:32:32.400
Feel free to check it out,

00:32:32.400 --> 00:32:34.934
and it's used today
by the Google APIs Explorer.

00:32:34.934 --> 00:32:37.734
It's used today by the Google
API client libraries

00:32:37.734 --> 00:32:39.968
and Google Plugin for Eclipse.

00:32:39.968 --> 00:32:43.467
So what's next is you should
explore the format.

00:32:43.467 --> 00:32:46.200
Take a look at the code
of the APIs Explorer.

00:32:46.200 --> 00:32:48.400
Take a look at the code
of client libraries,

00:32:48.400 --> 00:32:50.300
and what we really want to know

00:32:50.300 --> 00:32:52.834
is what kind of stuff
you can build with this,

00:32:52.834 --> 00:32:54.834
whether you're gonna build other
client libraries

00:32:54.834 --> 00:32:57.033
in various languages
that we don't currently have,

00:32:57.033 --> 00:32:59.334
whether you can build
IDE plugins, such as

00:32:59.334 --> 00:33:02.834
for IntelliJ, Visual Studio,
or your favorite I.D.,

00:33:02.834 --> 00:33:05.000
or whether you want to build
your own explorers,

00:33:05.000 --> 00:33:07.501
whether you want to build an API
explorer on your Android phone,

00:33:07.501 --> 00:33:10.000
you want to build
an API explorer on your iPhone,

00:33:10.000 --> 00:33:11.667
whatever works for you,

00:33:11.667 --> 00:33:13.667
so this is what
we're really excited about.

00:33:13.667 --> 00:33:16.267
We wanted you to help out
our story for our developers.

00:33:16.267 --> 00:33:18.567
So with that,
thank you very much,

00:33:18.567 --> 00:33:21.601
and if you still want
to tweet about some stuff,

00:33:21.601 --> 00:33:24.667
feel free to go ahead,
and we do want your feedback,

00:33:24.667 --> 00:33:26.634
so please submit it
on this link,

00:33:26.634 --> 00:33:29.501
and we're now open
for questions. Thanks, everyone.

00:33:29.501 --> 00:33:32.434
[applause]

00:33:38.601 --> 00:33:40.601
man: Hi, I've got one.

00:33:40.601 --> 00:33:43.801
Um, you mentioned,
uh, nested resources.

00:33:43.801 --> 00:33:46.100
Is that related to--
I mean, obviously,

00:33:46.100 --> 00:33:49.267
the URL shortener was a very
simple example, deliberately.

00:33:49.267 --> 00:33:52.334
The app only had
an implicit, uh, collection.

00:33:52.334 --> 00:33:54.434
Is that where
nested resources come in,

00:33:54.434 --> 00:33:56.634
when you have multiple
collections and so on,

00:33:56.634 --> 00:33:59.234
or do they relate at all?

00:33:59.234 --> 00:34:01.701
Gregorio: Yeah,
so the collections

00:34:01.701 --> 00:34:03.367
are the resources.

00:34:03.367 --> 00:34:05.367
There's kind of a naming
mismatch there, but yeah,

00:34:05.367 --> 00:34:07.367
when we say the resources
in the Discovery document--

00:34:07.367 --> 00:34:09.367
if you were at the,
uh, the BootCamp lab,

00:34:09.367 --> 00:34:11.033
where we talked about...
man: Yeah.

00:34:11.033 --> 00:34:12.701
Gregorio: That's gonna be
your collection,

00:34:12.701 --> 00:34:14.868
and then there's gonna be those
methods on that collection.

00:34:14.868 --> 00:34:16.868
man: Okay, thanks.

00:34:16.868 --> 00:34:19.868
man: So if I want to build
my own API and use your tools,

00:34:19.868 --> 00:34:22.367
is that--are the tools
also open source,

00:34:22.367 --> 00:34:24.400
the compiler that
takes the document

00:34:24.400 --> 00:34:27.901
and converts it into--
into Java or Python?

00:34:27.901 --> 00:34:30.400
Lopyrev: Um, so I-I believe
the question

00:34:30.400 --> 00:34:32.901
was whether or not the tools
for some of the libraries

00:34:32.901 --> 00:34:34.901
that we have are available,
such as, like, for Java?

00:34:34.901 --> 00:34:36.734
Is that what you--
man: You mentioned

00:34:36.734 --> 00:34:38.734
you take the document
and convert it into,

00:34:38.734 --> 00:34:42.234
like, a proxy, right, or that
you can use from your clients?

00:34:42.234 --> 00:34:45.567
Lopyrev: Mm... I'm not sure
if I exactly understand.

00:34:45.567 --> 00:34:48.100
So, I mean, you can use
any typical HTTP library

00:34:48.100 --> 00:34:49.868
to pull down the document.

00:34:49.868 --> 00:34:51.868
man: Yeah, but then
I take the document

00:34:51.868 --> 00:34:54.367
and I want to use it
to call the API.

00:34:54.367 --> 00:34:56.868
I want to have code that I can
easily call, so I don't have

00:34:56.868 --> 00:34:59.367
to put together the "get"
request and all this stuff"--

00:34:59.367 --> 00:35:01.934
Lopyrev: So the idea is you can,
like, to then call the APIs

00:35:01.934 --> 00:35:03.601
as you just construct the URL,

00:35:03.601 --> 00:35:06.100
and you use a typical HTTP
library to make the call,

00:35:06.100 --> 00:35:08.767
such as whether
it's httplib in Python

00:35:08.767 --> 00:35:10.934
or, you know, Apache,
or HTTP library in Java,

00:35:10.934 --> 00:35:12.601
or something like that.

00:35:12.601 --> 00:35:15.100
So those tools are already
available to you as standard,

00:35:15.100 --> 00:35:17.601
like, standard tools that are in
a lot of environments.

00:35:17.601 --> 00:35:19.667
Gregorio: So, but--for--
I think you're asking

00:35:19.667 --> 00:35:22.501
if, you know, if we've
open-sourced the tool we used

00:35:22.501 --> 00:35:24.501
to convert that Discovery
document into Java.

00:35:24.501 --> 00:35:26.167
man: Right.

00:35:26.167 --> 00:35:28.167
Lopyrev: Oh, is that what
the question--my bad.

00:35:28.167 --> 00:35:30.167
Gregorio: So is that--yeah.
man: It's complicated.

00:35:30.167 --> 00:35:33.167
Lopyrev: Um, for Java, I'm not
sure, actually. Did we?

00:35:33.167 --> 00:35:35.000
Is that part of the library?

00:35:35.000 --> 00:35:37.334
Gregorio: We did not
open-source that yet.

00:35:37.334 --> 00:35:39.167
Python is there,
so the Python--

00:35:39.167 --> 00:35:41.000
Lopyrev: Yeah, for Java,
it's not yet,

00:35:41.000 --> 00:35:43.000
but we'll definitely look into
putting that out there

00:35:43.000 --> 00:35:45.000
for an example,
as well, how to use it.

00:35:45.000 --> 00:35:49.133
man: And do you have a tool
to create the implementation

00:35:49.133 --> 00:35:51.667
of the document--
out of the document--

00:35:51.667 --> 00:35:54.067
you know, so I have a service...
Lopyrev: Yeah.

00:35:54.067 --> 00:35:56.601
man: That I want to--
that I describe as the document?

00:35:56.601 --> 00:35:58.601
I know I want to--
Lopyrev: Not currently.

00:35:58.601 --> 00:36:01.133
It's--the format is there,
and part of this launch,

00:36:01.133 --> 00:36:04.300
we're also opening up
the pattern, that you are free

00:36:04.300 --> 00:36:06.467
to use the format
for your own services,

00:36:06.467 --> 00:36:08.467
so we don't have any tool
specifically for you to--

00:36:08.467 --> 00:36:10.467
like, implement it
as part of your service,

00:36:10.467 --> 00:36:12.467
but you should--
free to go ahead with that.

00:36:12.467 --> 00:36:14.033
Hossain: It's a good idea.

00:36:14.033 --> 00:36:16.033
Lopyrev: And one
of the cool things here

00:36:16.033 --> 00:36:18.033
is that once you actually do
take advantage of that service

00:36:18.033 --> 00:36:19.634
and for your own services,

00:36:19.634 --> 00:36:22.634
you can then use some of
the Google client libraries

00:36:22.634 --> 00:36:25.067
to access your service.
man: Right, right. Thanks.

00:36:30.434 --> 00:36:33.434
man: Is Google's plan to make
all of their APIs discoverable

00:36:33.434 --> 00:36:35.434
via this, uh, mechanism?
What kind of a timeline

00:36:35.434 --> 00:36:37.434
for getting any...

00:36:37.434 --> 00:36:39.467
Lopyrev: It's a--it will be
a long and painful process,

00:36:39.467 --> 00:36:41.467
but we're working on it.
man: Okay.

00:36:41.467 --> 00:36:43.467
Um, and that's gonna include
the paid APIs,

00:36:43.467 --> 00:36:45.200
where there's usage restrictions

00:36:45.200 --> 00:36:47.200
on the number of calls
and things like that?

00:36:47.200 --> 00:36:49.167
Lopyrev: Yeah, it's
our long-term goal

00:36:49.167 --> 00:36:52.200
to try to convert everybody
to a common infrastructure.

00:36:54.267 --> 00:36:56.267
man: Hi. So I just want
to make sure

00:36:56.267 --> 00:36:58.467
that I have this
understood conceptually.

00:36:58.467 --> 00:37:01.534
The idea is not that you're
gonna save people time

00:37:01.534 --> 00:37:03.701
understanding the documentation

00:37:03.701 --> 00:37:05.701
and all the methods
and how to call them.

00:37:05.701 --> 00:37:08.234
The idea is that you're
providing an easy way

00:37:08.234 --> 00:37:10.234
for people to create

00:37:10.234 --> 00:37:12.734
an object in their code

00:37:12.734 --> 00:37:15.734
that sort of models the APIs.
Is that correct?

00:37:15.734 --> 00:37:17.734
Hossain: Right.

00:37:17.734 --> 00:37:19.734
Lopyrev: Um, there are
a lot of different ways

00:37:19.734 --> 00:37:21.400
we can see people using it.

00:37:21.400 --> 00:37:23.901
That's definitely one of them,
and that's one of the things

00:37:23.901 --> 00:37:25.901
we're also trying to accomplish
with this launch.

00:37:25.901 --> 00:37:28.901
We want to really see what kind
of stuff people can use it for.

00:37:28.901 --> 00:37:31.901
Yes, one of the great ways to
use it for is you can actually--

00:37:31.901 --> 00:37:33.601
Let's see, you're building--

00:37:33.601 --> 00:37:35.567
all you want to do
is access Buzz API,

00:37:35.567 --> 00:37:37.400
and Buzz API
as an activities object,

00:37:37.400 --> 00:37:39.901
and you want to construct
that object in your code

00:37:39.901 --> 00:37:42.400
in order to make a call
to the Buzz API.

00:37:42.400 --> 00:37:44.067
You can definitely do that.

00:37:44.067 --> 00:37:45.734
Hossain: Also, all these APIs

00:37:45.734 --> 00:37:47.400
on this new Google
infrastructure,

00:37:47.400 --> 00:37:49.234
they're all speaking
the same protocol,

00:37:49.234 --> 00:37:51.734
so the idea is you'd be able
to write a client library

00:37:51.734 --> 00:37:53.400
that speaks that protocol.

00:37:53.400 --> 00:37:55.234
You know, you'd consult
the documentation.

00:37:55.234 --> 00:37:57.734
You speak that protocol. You do
OAuth 2, all that stuff.

00:37:57.734 --> 00:38:00.267
Then you can grab the Discovery
document for a particular API,

00:38:00.267 --> 00:38:02.634
and it'll layer on functionality

00:38:02.634 --> 00:38:04.801
for that particular API
on top of that protocol.

00:38:04.801 --> 00:38:07.801
So the idea is, once you've
built that base client,

00:38:07.801 --> 00:38:09.767
you would basically
have a client library

00:38:09.767 --> 00:38:12.701
for any API built on
this new infrastructure.

00:38:12.701 --> 00:38:15.000
man: Okay, or--and one
other thought is,

00:38:15.000 --> 00:38:18.300
I suppose that any time
you guys update your APIs,

00:38:18.300 --> 00:38:21.300
um, with the Discovery Service,

00:38:21.300 --> 00:38:23.734
those are automatically updated
within your code.

00:38:23.734 --> 00:38:27.467
Lopyrev: So the idea is that,
yes, some of--first of all,

00:38:27.467 --> 00:38:30.701
we do versioning in our APIs,
so as you saw,

00:38:30.701 --> 00:38:33.000
each one of the Discovery
documents is versioned,

00:38:33.000 --> 00:38:35.334
so and then at Google,
we try and--

00:38:35.334 --> 00:38:38.467
we do not make any breaking
changes to existing versions,

00:38:38.467 --> 00:38:41.534
or we at least try to attempt
as much as we can.

00:38:41.534 --> 00:38:43.701
And the idea is that
if something happened,

00:38:43.701 --> 00:38:46.901
that, let's say we made
a change in an API, it will be

00:38:46.901 --> 00:38:49.000
automatically reflected
in the Discovery document,

00:38:49.000 --> 00:38:51.534
but also, if we made
a new version of APIs,

00:38:51.534 --> 00:38:53.534
you can then pull out
the new Discovery document

00:38:53.534 --> 00:38:55.467
for that specific version.

00:38:57.534 --> 00:39:00.267
man: I can't help to, uh,
see a lot of similarities

00:39:00.267 --> 00:39:02.667
between this
and WSDL from years back,

00:39:02.667 --> 00:39:06.200
and, I mean, I really do
appreciate the usages of WSDL,

00:39:06.200 --> 00:39:08.200
but it was flawed in a couple
different areas.

00:39:08.200 --> 00:39:11.067
Do you know if there--

00:39:11.067 --> 00:39:12.801
I'm sorry, not flawed,

00:39:12.801 --> 00:39:14.868
but, uh, REST is taking
a whole different approach.

00:39:14.868 --> 00:39:17.000
It's almost like finding
the best of both worlds

00:39:17.000 --> 00:39:19.868
here with
the Discovery document.

00:39:19.868 --> 00:39:23.167
But do you see
any outside people

00:39:23.167 --> 00:39:26.501
using the Discovery document,
outside of Google?

00:39:28.200 --> 00:39:30.501
Lopyrev: Do you want me--
I can take that one, I guess.

00:39:30.501 --> 00:39:34.200
Um, we're not trying to push
for a standard right now.

00:39:34.200 --> 00:39:36.400
It's definitely something
we thought about,

00:39:36.400 --> 00:39:39.400
and, uh, one of the things
we want to do right now--

00:39:39.400 --> 00:39:42.434
we're launching this in
our Labs program, so that means

00:39:42.434 --> 00:39:44.934
we're not committing fully
to the format just yet.

00:39:44.934 --> 00:39:46.834
We--as I mentioned just now
is that--

00:39:46.834 --> 00:39:48.868
we really want to see
what people use,

00:39:48.868 --> 00:39:51.868
and whether some information
might be missing still.

00:39:51.868 --> 00:39:54.067
We want to see what other
feature requests

00:39:54.067 --> 00:39:56.968
we're gonna get, so maybe
somewhere down the road,

00:39:56.968 --> 00:40:00.434
we might push it for a protocol,
or who knows?

00:40:00.434 --> 00:40:02.434
But at this point,
we definitely would like

00:40:02.434 --> 00:40:04.434
to see some people
to take advantage of it.

00:40:04.434 --> 00:40:07.000
Hossain: We've taken a very, uh,
client-centric approach

00:40:07.000 --> 00:40:08.701
towards developing this service.

00:40:08.701 --> 00:40:10.434
Like, we worked really closely

00:40:10.434 --> 00:40:12.501
with the APIs Explorer,
the client libraries,

00:40:12.501 --> 00:40:15.601
to make sure that Discovery
meets their needs, and I think

00:40:15.601 --> 00:40:18.100
part of the reason we want
to put this out to everybody

00:40:18.100 --> 00:40:20.634
is, like, we want to make sure
that it meets the needs

00:40:20.634 --> 00:40:23.033
of all our developers,
not just the ones internally,

00:40:23.033 --> 00:40:25.400
and I feel like we could
go through a process

00:40:25.400 --> 00:40:28.000
where we were just building it,
making it useful for developers.

00:40:28.000 --> 00:40:29.567
and then once we--

00:40:29.567 --> 00:40:31.901
then we could maybe start
that other conversation,

00:40:31.901 --> 00:40:33.901
but we're not right there yet.
Lopyrev: Yeah.

00:40:33.901 --> 00:40:36.400
man: It just seems like
it would be very useful.

00:40:36.400 --> 00:40:38.400
Hossain: I mean, we use--yeah,
we definitely encourage you,

00:40:38.400 --> 00:40:40.901
if you feel like it'd be useful
for your own APIs,

00:40:40.901 --> 00:40:42.934
feel free to create
a Discovery document

00:40:42.934 --> 00:40:44.767
and--and play around
with our client libraries.

00:40:44.767 --> 00:40:46.767
man: So you guys don't have
any licensing agreements

00:40:46.767 --> 00:40:48.767
or anything restricting
modeling that?

00:40:48.767 --> 00:40:50.767
Gregorio: You can look at the--
you can look at

00:40:50.767 --> 00:40:52.434
the docs up there.
There's a patent license.

00:40:52.434 --> 00:40:54.100
Lopyrev: But it's pretty much
free-for-all.

00:40:54.100 --> 00:40:55.767
Please feel free to use.
Gregorio: Yeah.

00:40:55.767 --> 00:40:57.767
Obviously, we can't
give you lawyerly advice,

00:40:57.767 --> 00:41:00.267
but you can--it's two sentences,
and it should be pretty clear

00:41:00.267 --> 00:41:02.167
on what--what you're
getting into there.

00:41:02.167 --> 00:41:04.100
man: Okay, thank you.

00:41:05.934 --> 00:41:07.501
man: Um, I have a question.

00:41:07.501 --> 00:41:10.834
I mean, actually, to come back,
I've been thinking

00:41:10.834 --> 00:41:13.501
about this similar kind
of Discovery document

00:41:13.501 --> 00:41:16.000
when I was working
on some Android application

00:41:16.000 --> 00:41:18.501
where I'm trying to cache
a lot of the data,

00:41:18.501 --> 00:41:20.868
so to discover the service

00:41:20.868 --> 00:41:23.634
and then create, let's say,
my SQL Live database.

00:41:23.634 --> 00:41:26.467
So have you thought about,
like, instead of marshaling,

00:41:26.467 --> 00:41:29.834
let's say, to some kind
of Java object or Python object,

00:41:29.834 --> 00:41:33.467
marshal it to some SQL
kind of relationship?

00:41:33.467 --> 00:41:36.067
Um, from the JSON, for instance?

00:41:36.067 --> 00:41:39.033
Has that been anything
you've been thinking about?

00:41:39.033 --> 00:41:41.067
Lopyrev: Um, that's
an interesting--

00:41:41.067 --> 00:41:42.767
very interesting idea.

00:41:42.767 --> 00:41:44.434
We haven't really
thought of that,

00:41:44.434 --> 00:41:46.267
but yeah, it's a great use case,

00:41:46.267 --> 00:41:48.267
and I guess just, uh, confirms
our idea of releasing it

00:41:48.267 --> 00:41:50.267
and see what kind of cool stuff
you can come up with.

00:41:50.267 --> 00:41:52.767
[chuckles) Yeah, that's great.
I mean, that sounds like--

00:41:52.767 --> 00:41:54.701
very usable. Good idea.

00:41:57.267 --> 00:41:58.934
man: One more question.

00:41:58.934 --> 00:42:01.501
If I were to run past
these slides really quickly,

00:42:01.501 --> 00:42:04.534
I would have noticed resources
and URIs and kinds and stuff,

00:42:04.534 --> 00:42:07.534
and I would have thought,
this is a presentation on RDF.

00:42:07.534 --> 00:42:10.801
I was just wondering
whether you'd thought about

00:42:10.801 --> 00:42:13.834
that sort of, uh, angle
on managing the resources

00:42:13.834 --> 00:42:15.767
and the relationships
between the stuff,

00:42:15.767 --> 00:42:17.801
or is that just technology
for technology's sake?

00:42:17.801 --> 00:42:19.801
I'm justdreaming this.

00:42:19.801 --> 00:42:21.634
Are there any other implications

00:42:21.634 --> 00:42:24.367
or any--any inspirations
from that area?

00:42:26.234 --> 00:42:28.234
Gregorio: Um, as far as--sorry.

00:42:28.234 --> 00:42:30.400
As inspiration from RDF,

00:42:30.400 --> 00:42:32.000
or doing RDF-type things

00:42:32.000 --> 00:42:34.000
with the document
now that it's out there?

00:42:34.000 --> 00:42:35.567
man: The latter.

00:42:35.567 --> 00:42:37.567
Gregorio: The last one. Um,
we haven't, but, I mean, again,

00:42:37.567 --> 00:42:39.567
that's why we're here
and putting this out.

00:42:39.567 --> 00:42:41.067
If somebody wants to do that,

00:42:41.067 --> 00:42:43.067
you know, that would--
that'd be interesting to see.

00:42:43.067 --> 00:42:45.067
man: Okay, thanks.

00:42:45.067 --> 00:42:46.734
Lopyrev: Cool.

00:42:46.734 --> 00:42:48.734
All right, thanks, everyone.
Thanks for coming.

00:42:48.734 --> 00:42:50.734
Gregorio: Thanks.
Hossain: Take care.

00:42:50.734 --> 00:42:53.501
[applause]

