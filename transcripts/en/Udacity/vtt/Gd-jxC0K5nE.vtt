WEBVTT
Kind: captions
Language: en

00:00:00.660 --> 00:00:02.440
You have built the user interface and

00:00:02.440 --> 00:00:05.400
imported the extension to
the PlaySoundsViewController.

00:00:05.400 --> 00:00:08.810
We're in the final step to getting
pitch perfect to playback the audio.

00:00:08.810 --> 00:00:10.320
Let me walk you through
what we need to set up.

00:00:11.610 --> 00:00:14.240
If you think back to earlier
in this lesson, we wired up

00:00:14.240 --> 00:00:18.780
all six sound effect buttons to call
the play sound for button function.

00:00:18.780 --> 00:00:22.330
What we need now is a way to distinguish
between each of these buttons.

00:00:22.330 --> 00:00:24.880
And then call the appropriate
function in our extension

00:00:24.880 --> 00:00:25.930
to play that sound effect.

00:00:27.130 --> 00:00:30.200
There are several ways to distinguish
one UI button from another.

00:00:30.200 --> 00:00:33.560
But the easiest is using
the tag property of the button.

00:00:33.560 --> 00:00:36.710
This is just an integer value
we can assign the UI button.

00:00:36.710 --> 00:00:39.790
And then later query in the play
sound for button function.

00:00:41.020 --> 00:00:44.050
With a button selected, in
the attributes inspector open, you can

00:00:44.050 --> 00:00:47.470
scroll down to the view section and
see the tag here, on the bottom right.

00:00:48.630 --> 00:00:50.340
The default tag value is 0.

00:00:50.340 --> 00:00:54.000
Therefore, all of our UI buttons
have 0 as their tag value.

00:00:54.000 --> 00:00:54.730
Time to change that.

00:00:55.850 --> 00:00:57.410
The snail button is the first button.

00:00:57.410 --> 00:01:00.930
So it can have a tag of 0, but we should
change it for the other five buttons.

00:01:02.048 --> 00:01:03.330
Open the main.storyboard and

00:01:03.330 --> 00:01:06.940
select the place sounds view
controller scene, as I've done here.

00:01:06.940 --> 00:01:11.305
Select the rabbit button,
scroll down to the tag, and set it to 1.

00:01:12.870 --> 00:01:14.700
Now select the chipmunk button and

00:01:14.700 --> 00:01:16.915
in the attributes inspector,
set the tag to 2.

00:01:18.350 --> 00:01:20.795
For the Darth Vader button,
set the tag to 3.

00:01:22.350 --> 00:01:24.375
For the EchoButton, set the tag to 4.

00:01:25.740 --> 00:01:29.270
Finally for the ReverbButton,
set the tag to 4.

00:01:29.270 --> 00:01:33.540
Now we have different tag values for
each playback button from 0 to 5.

00:01:34.830 --> 00:01:37.670
The next step is to change the play
sound for button function.

00:01:37.670 --> 00:01:41.760
So it does a different audio playback
depending on what button was pressed.

00:01:41.760 --> 00:01:44.650
Let's go to that function in
the PlaySoundsViewController.swift file.

00:01:46.330 --> 00:01:50.110
To make more space, we can use
Cmd+Option+0 to close the right side.

00:01:51.160 --> 00:01:55.310
Remember the enumeration you added
earlier here for values from 0 to 5?

00:01:55.310 --> 00:01:57.970
We can use them in the switch
statement to call the playSound

00:01:57.970 --> 00:02:00.745
function differently for
each of the buttons.

00:02:00.745 --> 00:02:03.730
Add the code for the switch statements
that appears as you can see here.

00:02:05.170 --> 00:02:05.930
If the slow or

00:02:05.930 --> 00:02:08.639
fast button is pressed, we'll play
the sound at a different rate.

00:02:09.720 --> 00:02:13.210
If the chipmunk or Darth Vader voices
are selected, we'll alter the pitch.

00:02:14.330 --> 00:02:17.159
If echo or
reverb sound effects are selected,

00:02:17.159 --> 00:02:20.868
we'll pass the settings onward
to the playSound function.

00:02:20.868 --> 00:02:22.552
While playing audio was great,

00:02:22.552 --> 00:02:25.580
it would be nice if we could
stop playback when we want to.

00:02:25.580 --> 00:02:29.020
We do have a stop button and it's
already wired up to call the stop button

00:02:29.020 --> 00:02:32.040
press function in our
playSoundsViewController.

00:02:32.040 --> 00:02:35.190
All we need to do is to add
a call to the stop audio function

00:02:35.190 --> 00:02:36.670
that is in the class extension.

00:02:36.670 --> 00:02:40.150
And they'll do the work of calling out
every audio engine to stop the playback.

00:02:41.300 --> 00:02:42.780
If you follow along to this point,

00:02:42.780 --> 00:02:44.580
we should be able to test
the Pitch Perfect app.

00:02:45.650 --> 00:02:47.390
You should be able to
record yourself and

00:02:47.390 --> 00:02:50.140
hear the playback with
a variety of sound effects.

00:02:50.140 --> 00:02:50.640
Let's try it.

00:02:52.250 --> 00:02:53.116
Swift is great.

00:02:55.392 --> 00:02:57.110
&gt;&gt; Swift is great.

00:02:57.110 --> 00:02:58.502
&gt;&gt; In the very short amount of time,

00:02:58.502 --> 00:03:00.830
you got pitch perfect
built from the ground up.

00:03:00.830 --> 00:03:04.360
A fun iOS app that can record and
playback audio with sound effects.

00:03:05.370 --> 00:03:07.660
If you're curious about
the calls to AV audio engine,

00:03:07.660 --> 00:03:09.390
I'm going to go over that next.

00:03:09.390 --> 00:03:11.230
For now, pat yourself on the back.

00:03:11.230 --> 00:03:13.130
You are already an iOS developer

