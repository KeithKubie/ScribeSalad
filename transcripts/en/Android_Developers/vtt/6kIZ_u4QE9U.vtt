WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.982
[MUSIC PLAYING]

00:00:07.932 --> 00:00:09.140
SHAHID HUSSAIN: Hi, everyone.

00:00:09.140 --> 00:00:09.848
My name's Shahid.

00:00:09.848 --> 00:00:12.160
I'm a product manager
on the Chrome OS team.

00:00:12.160 --> 00:00:15.340
And welcome to all
of you to our session

00:00:15.340 --> 00:00:18.900
on developing Android
apps on Chrome OS.

00:00:18.900 --> 00:00:22.000
Now, we talked about
this last year at I/O.

00:00:22.000 --> 00:00:25.580
And if you saw that talk,
today's talk is a continuation.

00:00:25.580 --> 00:00:27.330
We're going to be
talking about the basics

00:00:27.330 --> 00:00:31.080
briefly, and talking
about how we've

00:00:31.080 --> 00:00:34.170
worked with a number of
you over the past year,

00:00:34.170 --> 00:00:36.540
and as well sharing a
number of new features

00:00:36.540 --> 00:00:39.730
that we'd love to
tell you about.

00:00:39.730 --> 00:00:43.470
So first of all, let's talk
about why this matters.

00:00:43.470 --> 00:00:46.860
So we've talked previously
about the success of Chromebooks

00:00:46.860 --> 00:00:49.380
within the education
space, where we outsell

00:00:49.380 --> 00:00:51.060
every other device combined.

00:00:51.060 --> 00:00:53.800
But Google's really been
doubling down on Chrome OS.

00:00:53.800 --> 00:00:57.450
You've hopefully been inundated
by ads over Q4 last year

00:00:57.450 --> 00:00:58.380
and ongoing this year.

00:00:58.380 --> 00:01:01.100
And that's helped drive
demand in the consumer space,

00:01:01.100 --> 00:01:06.510
too, so much so that in Q4
last year, 17% of notebooks

00:01:06.510 --> 00:01:08.980
sold in the US were Chromebooks.

00:01:08.980 --> 00:01:11.740
[APPLAUSE]

00:01:14.040 --> 00:01:17.650
So why does this matter to
you, Android developers?

00:01:17.650 --> 00:01:22.200
So the headline here is,
Android apps work on Chrome OS.

00:01:22.200 --> 00:01:24.120
How does that happen?

00:01:24.120 --> 00:01:26.030
It works via the
Android framework

00:01:26.030 --> 00:01:28.310
running inside a
container that sits on top

00:01:28.310 --> 00:01:29.990
of the base of Chrome OS.

00:01:29.990 --> 00:01:32.540
And the full Play Store
is already available.

00:01:32.540 --> 00:01:37.410
So your app is probably
already running on Chrome OS.

00:01:37.410 --> 00:01:41.240
Now, ultimately, what we
care about is a good user

00:01:41.240 --> 00:01:42.500
experience.

00:01:42.500 --> 00:01:45.060
Part of that is the
operating system itself.

00:01:45.060 --> 00:01:48.290
And part of that is the apps
that users choose to run.

00:01:48.290 --> 00:01:51.320
And we've been investing heavily
in improving the product.

00:01:51.320 --> 00:01:54.020
And those of you who use
Chrome OS over the past year

00:01:54.020 --> 00:01:57.800
have seen evidence of that in
system updates you've gotten.

00:01:57.800 --> 00:02:00.200
And many of you who
are developing apps,

00:02:00.200 --> 00:02:03.830
we've already been working
with to ensure that you're--

00:02:03.830 --> 00:02:08.669
ensuring that the apps work
really well on Chrome OS.

00:02:08.669 --> 00:02:12.120
Adobe, Roblox, Sony,
EA, and many, many more

00:02:12.120 --> 00:02:16.170
have already included Chromebook
optimizations in their latest

00:02:16.170 --> 00:02:18.980
updates onto the Play Store.

00:02:18.980 --> 00:02:21.060
And that's opening up
different kinds of usage

00:02:21.060 --> 00:02:22.860
and different kinds of revenue.

00:02:22.860 --> 00:02:25.760
May Allen, PM from
Evernote, told us,

00:02:25.760 --> 00:02:29.760
"Pixelbook users are
spending four times more time

00:02:29.760 --> 00:02:33.710
in Evernote than an
average app user."

00:02:33.710 --> 00:02:36.620
And Andrew and David, founders
from Steadfast Innovation, who

00:02:36.620 --> 00:02:39.090
make the Squid app,
told us that Chromebooks

00:02:39.090 --> 00:02:45.060
have made up 21% of their
revenue over the last 30 days.

00:02:45.060 --> 00:02:47.640
So first of all, to
begin, we're quickly

00:02:47.640 --> 00:02:50.330
going to review some basics.

00:02:50.330 --> 00:02:53.690
Ensuring that an app
works well on Chrome OS

00:02:53.690 --> 00:02:57.920
comes down to four key
differences between Chromebooks

00:02:57.920 --> 00:02:59.680
and phones--

00:02:59.680 --> 00:03:03.690
wider screens, default
landscape, window management,

00:03:03.690 --> 00:03:05.710
and different primary
input devices--

00:03:05.710 --> 00:03:09.410
keyboard, pointer, stylus.

00:03:09.410 --> 00:03:11.390
First, wider screens--

00:03:11.390 --> 00:03:12.690
Chromebook screens are bigger--

00:03:12.690 --> 00:03:16.550
from 10.1 inch on the smaller
side to 15 inch on some

00:03:16.550 --> 00:03:18.320
of our larger units.

00:03:18.320 --> 00:03:20.990
So apps need to be able to work
well at all of these widths

00:03:20.990 --> 00:03:23.840
and respond appropriately
to resize events.

00:03:23.840 --> 00:03:27.470
For example, AID's
coding lessons

00:03:27.470 --> 00:03:29.600
now switch to a
two-column view when

00:03:29.600 --> 00:03:32.900
the app is resized to be wider.

00:03:32.900 --> 00:03:37.220
Second, default landscape-- as
a default landscape device, apps

00:03:37.220 --> 00:03:40.260
need to have a really
great landscape experience.

00:03:40.260 --> 00:03:44.030
And so for example, PocketCasts
pins open its navigation menu

00:03:44.030 --> 00:03:46.040
and arranges items
in a grid so they

00:03:46.040 --> 00:03:49.280
can fill the space available,
rather than lifting items out

00:03:49.280 --> 00:03:52.610
with whitespace to the right.

00:03:52.610 --> 00:03:56.560
Third, multi-window-- Chrome
OS is a multi-window desktop

00:03:56.560 --> 00:03:57.750
environment.

00:03:57.750 --> 00:04:00.690
The SignEasy and Sony Sketch
apps in their latest versions

00:04:00.690 --> 00:04:03.040
on the Play Store
are now resizable,

00:04:03.040 --> 00:04:08.360
so users can work better with
these inside our environment.

00:04:08.360 --> 00:04:10.960
And finally, maybe the
most important, keyboard

00:04:10.960 --> 00:04:12.340
and mouse inputs--

00:04:12.340 --> 00:04:15.070
when a user pulls out
a laptop and uses it,

00:04:15.070 --> 00:04:17.800
the keyboard and touchpad
are closer to the user.

00:04:17.800 --> 00:04:21.079
So they gravitate towards
them as their primary inputs.

00:04:21.079 --> 00:04:23.440
So the Infinite Painter
team is an example--

00:04:23.440 --> 00:04:25.660
built keyboard accelerators
for common commands

00:04:25.660 --> 00:04:28.960
so users can get around
faster inside the interface.

00:04:28.960 --> 00:04:31.270
And that's especially
true for games.

00:04:31.270 --> 00:04:34.170
So Pixonic-- they
make War Robots--

00:04:34.170 --> 00:04:36.850
built keyboard controls
into their game.

00:04:36.850 --> 00:04:39.250
The game now uses a
special manifest flag

00:04:39.250 --> 00:04:41.560
to get inputs directly
from Chrome OS

00:04:41.560 --> 00:04:46.800
and enable standard
WASD gaming controls.

00:04:46.800 --> 00:04:48.270
So these are just
a few of the app

00:04:48.270 --> 00:04:51.280
teams who are now
building and testing

00:04:51.280 --> 00:04:53.310
their apps for Chrome OS.

00:04:53.310 --> 00:04:56.160
And a huge, huge thank
you to everyone--

00:04:56.160 --> 00:04:57.750
many of you are here
in the audience--

00:04:57.750 --> 00:04:59.624
that we've worked with.

00:04:59.624 --> 00:05:01.040
We're always looking
for apps that

00:05:01.040 --> 00:05:02.910
work really, really
great on Chrome OS

00:05:02.910 --> 00:05:04.350
so that we can show them off.

00:05:04.350 --> 00:05:08.481
And we want your app
to be one of them.

00:05:08.481 --> 00:05:10.980
Now, to talk about some of the
latest improvements in Chrome

00:05:10.980 --> 00:05:12.721
OS for Android app
developers, I'd

00:05:12.721 --> 00:05:14.970
like to hand over to Stefan,
one of our lead engineers

00:05:14.970 --> 00:05:15.824
on Chrome OS.

00:05:15.824 --> 00:05:16.740
Please welcome Stefan.

00:05:16.740 --> 00:05:19.620
[APPLAUSE]

00:05:23.470 --> 00:05:25.310
STEFAN KUHNE: Morning, everyone.

00:05:25.310 --> 00:05:28.580
I'm glad that you could
all join for today's talk.

00:05:28.580 --> 00:05:31.430
And I'm here to talk
about, well, all our latest

00:05:31.430 --> 00:05:34.520
news, what we have done,
and what you can do in order

00:05:34.520 --> 00:05:38.760
to improve your application even
more for a desktop environment.

00:05:38.760 --> 00:05:42.980
So first slide, what is new?

00:05:42.980 --> 00:05:44.870
So that is one of
the things which

00:05:44.870 --> 00:05:47.430
is most important for
the user, but of course,

00:05:47.430 --> 00:05:49.670
also has some impact
on what you are doing.

00:05:49.670 --> 00:05:52.160
And then advanced
things you can do.

00:05:52.160 --> 00:05:55.640
We have added a lot of
stuff over the last year.

00:05:55.640 --> 00:05:57.480
And we really
wanted to show that.

00:05:57.480 --> 00:06:00.560
And we hope that you are
actually making best use of it.

00:06:00.560 --> 00:06:01.840
And last of it--

00:06:01.840 --> 00:06:03.120
best practices.

00:06:03.120 --> 00:06:05.581
So when you are following
these best practices,

00:06:05.581 --> 00:06:07.580
you will have a better
chance in the Play Store,

00:06:07.580 --> 00:06:08.750
because you will develop.

00:06:08.750 --> 00:06:11.840
And we make sure of that.

00:06:11.840 --> 00:06:13.040
So what's new?

00:06:13.040 --> 00:06:13.820
Let's see.

00:06:13.820 --> 00:06:16.520
So first off, we have
improved our tablet mode.

00:06:16.520 --> 00:06:17.610
Why did we do that?

00:06:17.610 --> 00:06:20.380
Because we have now, also,
a tablet-only device.

00:06:20.380 --> 00:06:22.220
Well, and what did we change?

00:06:22.220 --> 00:06:24.230
Well, there are
smoother animations.

00:06:24.230 --> 00:06:25.850
We have removed the caption bar.

00:06:25.850 --> 00:06:27.680
So it means the
window control bar.

00:06:27.680 --> 00:06:30.240
And the controls on
the nav bar, they

00:06:30.240 --> 00:06:32.270
are actually now moving
down into the shelf,

00:06:32.270 --> 00:06:33.840
as you can see there.

00:06:33.840 --> 00:06:37.320
And also, all windows
are automatically

00:06:37.320 --> 00:06:40.710
started full screen, which is,
of course, the experience what

00:06:40.710 --> 00:06:43.070
you expect on a tablet.

00:06:43.070 --> 00:06:44.550
So next thing is split screen.

00:06:44.550 --> 00:06:46.907
We have added split
screen, which is--

00:06:46.907 --> 00:06:48.740
well, you know that,
of course, from phones.

00:06:48.740 --> 00:06:51.020
But now, on a big tablet
and/or bigger screen,

00:06:51.020 --> 00:06:52.980
it makes, of course,
much more sense.

00:06:52.980 --> 00:06:56.180
So you can split, now, the
screen with any kind of window

00:06:56.180 --> 00:06:58.310
which is available on Chrome OS.

00:06:58.310 --> 00:06:59.384
So it might be--

00:06:59.384 --> 00:07:01.550
well, might be a Chrome
window, might be, of course,

00:07:01.550 --> 00:07:02.710
an Android window.

00:07:02.710 --> 00:07:04.190
The only thing
is, at the moment,

00:07:04.190 --> 00:07:06.890
you will not be able to figure
out that you are actually

00:07:06.890 --> 00:07:08.490
running in split screen.

00:07:08.490 --> 00:07:11.160
We will add that later.

00:07:11.160 --> 00:07:13.730
The next thing is we have
added picture in picture.

00:07:13.730 --> 00:07:16.680
So it's a full specification
according to Android O.

00:07:16.680 --> 00:07:18.470
And it is coming soon.

00:07:18.470 --> 00:07:20.671
And you can resize a window.

00:07:20.671 --> 00:07:22.670
You can actually place
it at multiple locations.

00:07:22.670 --> 00:07:25.910
And it will be fairly similar
to the one which we are using

00:07:25.910 --> 00:07:29.180
for web applications, as well.

00:07:29.180 --> 00:07:32.760
So we have also added
the Android keyboard.

00:07:32.760 --> 00:07:35.540
So you can essentially
replace, now,

00:07:35.540 --> 00:07:39.530
coming soon, the Chrome OS
keyboard with an Android

00:07:39.530 --> 00:07:43.430
keyboard, which makes
a lot of people happy.

00:07:43.430 --> 00:07:45.950
Notifications-- we have
overhauled our notifications.

00:07:45.950 --> 00:07:47.810
They are looking,
now, much more alike.

00:07:47.810 --> 00:07:51.380
So color scheming and everything
should be much more integrated.

00:07:51.380 --> 00:07:53.390
You have to tap, now,
instead of swiping.

00:07:53.390 --> 00:07:57.435
And everything is much more
integrated into the Chrome OS

00:07:57.435 --> 00:07:58.205
style in itself.

00:08:03.050 --> 00:08:07.520
Pro audio-- so we have
actually added, since M65,

00:08:07.520 --> 00:08:09.670
beginning of this year,
M, that's our milestones.

00:08:09.670 --> 00:08:10.920
I don't know if you know that.

00:08:10.920 --> 00:08:13.250
But it's essentially,
like, every six weeks,

00:08:13.250 --> 00:08:14.780
we have a new release cycle.

00:08:14.780 --> 00:08:17.900
And M65 is out
already since a while.

00:08:17.900 --> 00:08:23.600
And MIDI is in since a
while in our Pixelbook.

00:08:23.600 --> 00:08:28.130
And soon, we will also have
multichannel audio, USB audio--

00:08:28.130 --> 00:08:32.220
multichannel USB, AAudio,
AAudio Memory Mapped.

00:08:32.220 --> 00:08:35.400
And this is all coming
later this year.

00:08:35.400 --> 00:08:37.280
And with that, you
have actually seen,

00:08:37.280 --> 00:08:39.730
when you were coming in,
someone playing music here.

00:08:39.730 --> 00:08:42.020
He was actually
using a Pixelbook.

00:08:42.020 --> 00:08:44.330
And to show you a little
bit more about that,

00:08:44.330 --> 00:08:47.450
I want to invite
Federico Tessmann

00:08:47.450 --> 00:08:50.390
from-- the founder of
Algoriddim to actually show

00:08:50.390 --> 00:08:51.638
how this works.

00:08:51.638 --> 00:08:54.626
[APPLAUSE]

00:09:02.594 --> 00:09:05.582
[MUSIC PLAYING]

00:10:34.270 --> 00:10:35.410
Thank you.

00:10:35.410 --> 00:10:37.690
So you have possibly seen
how everything was really

00:10:37.690 --> 00:10:40.330
real time, synchronized
with the device,

00:10:40.330 --> 00:10:42.070
and everything is real time.

00:10:42.070 --> 00:10:45.070
So it's getting
more interesting.

00:10:45.070 --> 00:10:48.190
Advanced things, now, what
you can do to your application

00:10:48.190 --> 00:10:50.050
in order to make
your life-- well,

00:10:50.050 --> 00:10:53.120
to make the life on
a desktop better.

00:10:53.120 --> 00:10:54.850
Well, become desktop native--

00:10:54.850 --> 00:10:56.660
I think I had that
already last year.

00:10:56.660 --> 00:10:59.920
But we have, of course,
a follow-up on that one.

00:10:59.920 --> 00:11:01.600
So first off, this
is something which

00:11:01.600 --> 00:11:05.270
is something everybody knows
from everyday business, right?

00:11:05.270 --> 00:11:06.340
Menu accelerators.

00:11:06.340 --> 00:11:08.590
They are not really
something special, right?

00:11:08.590 --> 00:11:10.290
But the thing is,
if you were using

00:11:10.290 --> 00:11:13.945
the toolkit UI in the past,
it was actually from A.

00:11:13.945 --> 00:11:16.450
I think it was like, I
don't know, Angel Cake,

00:11:16.450 --> 00:11:18.850
or whatever Android
was back then.

00:11:18.850 --> 00:11:20.780
So it means, like,
really ancient.

00:11:20.780 --> 00:11:22.690
So the display was small.

00:11:22.690 --> 00:11:25.240
And they had to actually
fit everything on there.

00:11:25.240 --> 00:11:26.770
And it looked ugly.

00:11:26.770 --> 00:11:30.130
It was really not
meant to be prime time.

00:11:30.130 --> 00:11:32.020
So we have actually
changed the library

00:11:32.020 --> 00:11:34.540
to make this much, much
easier for you to actually

00:11:34.540 --> 00:11:36.394
get these kind of things in.

00:11:36.394 --> 00:11:37.810
And all you have
to do is you have

00:11:37.810 --> 00:11:41.440
to go into your layout
XML you use in your menu.

00:11:41.440 --> 00:11:45.520
You put into the item itself,
then there's a shortcut,

00:11:45.520 --> 00:11:48.250
means the character
and the modifier keys.

00:11:48.250 --> 00:11:50.030
And you're ready to go.

00:11:50.030 --> 00:11:52.990
Well, not entirely, but if
you're using a standard menu,

00:11:52.990 --> 00:11:55.405
you have to actually call
then the set QWERTY--

00:11:58.650 --> 00:11:59.640
what was it again?

00:11:59.640 --> 00:12:03.100
Set QWERTY mode to true so
that you are actually getting

00:12:03.100 --> 00:12:06.170
alphanumeric characters.

00:12:06.170 --> 00:12:09.040
OK, this is really old,
but it's still there.

00:12:09.040 --> 00:12:11.380
So shelf integration--
that is something, like,

00:12:11.380 --> 00:12:13.599
if you want to do
something inside the shelf,

00:12:13.599 --> 00:12:15.640
you want to change your
icon-- like, for example,

00:12:15.640 --> 00:12:17.620
you're opening a
document or whatnot,

00:12:17.620 --> 00:12:19.810
you want to change the
shape of the icon itself,

00:12:19.810 --> 00:12:23.050
or you want to display then the
document which you have opened,

00:12:23.050 --> 00:12:26.560
you can actually do that with
this setTaskDescription--

00:12:26.560 --> 00:12:29.980
very simple and very effective.

00:12:29.980 --> 00:12:31.660
Next thing is, if
you want to combine

00:12:31.660 --> 00:12:35.960
multiple items inside the
shelf into one menu item,

00:12:35.960 --> 00:12:38.980
you can actually put
then myIntent.putExtra.

00:12:38.980 --> 00:12:40.990
You put then the
shelf shortcut to it.

00:12:40.990 --> 00:12:44.830
And you take then
any kind of string

00:12:44.830 --> 00:12:46.900
for a kind of modifier,
which you actually know.

00:12:46.900 --> 00:12:49.150
And you actually then reuse
it for all the items you

00:12:49.150 --> 00:12:52.570
want to put into the same set.

00:12:52.570 --> 00:12:54.260
App shortcuts are coming.

00:12:54.260 --> 00:12:57.520
So this is something
which is coming soon.

00:12:57.520 --> 00:13:00.760
It's there already
since, I think, NMR1.

00:13:00.760 --> 00:13:02.900
And we will support
them very soon, as well.

00:13:02.900 --> 00:13:05.260
So essentially, you
can actually have

00:13:05.260 --> 00:13:08.080
actions and any
kind of short things

00:13:08.080 --> 00:13:10.630
which you want to do in
order to get the user

00:13:10.630 --> 00:13:13.810
fast access to things.

00:13:13.810 --> 00:13:16.210
The Back button-- well,
I think many of you,

00:13:16.210 --> 00:13:19.000
since you were already doing
something for Chrome OS,

00:13:19.000 --> 00:13:21.250
have already seen that
there's a back button

00:13:21.250 --> 00:13:23.170
up in the window control bar.

00:13:23.170 --> 00:13:24.880
Well, you have
also a back button.

00:13:24.880 --> 00:13:25.670
We know that.

00:13:25.670 --> 00:13:27.220
And the problem
was, of course, two

00:13:27.220 --> 00:13:29.350
on top of each other
looks pretty crappy.

00:13:29.350 --> 00:13:32.230
So therefore, by adding
this special meta flag,

00:13:32.230 --> 00:13:33.580
you can get rid of it.

00:13:33.580 --> 00:13:36.820
Makes it much, much
nicer, and that helps.

00:13:36.820 --> 00:13:39.070
But there's one other
thing, and this is, I think,

00:13:39.070 --> 00:13:40.346
even more important.

00:13:40.346 --> 00:13:42.220
If you are on a desktop,
and you are pressing

00:13:42.220 --> 00:13:45.300
backspace, or escape, or
navigate back, or whatnot,

00:13:45.300 --> 00:13:46.970
and your window
suddenly disappears,

00:13:46.970 --> 00:13:49.240
it's something which is
very unexpected as a user.

00:13:49.240 --> 00:13:50.900
Please don't do that.

00:13:50.900 --> 00:13:52.930
So if you can do it,
please, what you should do

00:13:52.930 --> 00:13:55.840
is you should actually
check if your activity is

00:13:55.840 --> 00:13:58.809
at the bottom of-- well,
at the root of the stack.

00:13:58.809 --> 00:14:00.850
And if it is, and you know
that you are windowed,

00:14:00.850 --> 00:14:02.400
please don't close your window.

00:14:02.400 --> 00:14:04.822
Please keep it open,
because it's really,

00:14:04.822 --> 00:14:06.696
really unexpected and
disturbing for the user

00:14:06.696 --> 00:14:11.020
if suddenly all his
work is suddenly gone.

00:14:11.020 --> 00:14:14.010
Lifetime management-- so we
were getting a lot of requests

00:14:14.010 --> 00:14:17.050
from users which said,
well, you know what?

00:14:17.050 --> 00:14:19.810
My application isn't really
running multitasking.

00:14:19.810 --> 00:14:21.280
Well, why is it
not multitasking?

00:14:21.280 --> 00:14:22.720
Well, because the
thing is, like,

00:14:22.720 --> 00:14:24.250
I have this game I'm playing.

00:14:24.250 --> 00:14:26.380
And I'm also checking
my news status.

00:14:26.380 --> 00:14:28.930
And the news status isn't
updating while I'm playing.

00:14:28.930 --> 00:14:31.210
But I would really
like to see that.

00:14:31.210 --> 00:14:33.100
Well, there are
actually three states.

00:14:33.100 --> 00:14:36.100
There's running, there's
paused, and there's stopped.

00:14:36.100 --> 00:14:40.270
Running and paused means you
are visible on the screen, which

00:14:40.270 --> 00:14:41.800
means not that you
should actually

00:14:41.800 --> 00:14:45.220
drop everything and stop that
when you're getting a pause.

00:14:45.220 --> 00:14:48.790
No, you can actually continue
to run, unless you are high,

00:14:48.790 --> 00:14:52.030
whatever game, where you have to
have a lot of real-time action

00:14:52.030 --> 00:14:56.080
and whatnot, where you
maybe want to really pause.

00:14:56.080 --> 00:14:58.580
In most cases, you really
want to continue running.

00:14:58.580 --> 00:15:01.060
So please do this, and you
make a lot of users much,

00:15:01.060 --> 00:15:03.520
much happier.

00:15:03.520 --> 00:15:05.380
Next thing, sharing data--

00:15:05.380 --> 00:15:07.570
well, I said already
earlier that we

00:15:07.570 --> 00:15:09.870
have plenty of windows
on our desktop, right?

00:15:09.870 --> 00:15:13.570
So there are all kinds of Chrome
OS, your window, and whatnot.

00:15:13.570 --> 00:15:16.120
If you don't specify
DRAG_FLAG_GLOBAL,

00:15:16.120 --> 00:15:18.210
and you are doing a
drag-and-drop operation,

00:15:18.210 --> 00:15:20.420
it will not be dropped
on another application.

00:15:20.420 --> 00:15:21.950
This is then only for you.

00:15:21.950 --> 00:15:24.040
So in order to allow
other applications

00:15:24.040 --> 00:15:28.570
to actually get your data,
pre-specify this flag.

00:15:28.570 --> 00:15:32.800
And if you are actually getting
some data from someone, well,

00:15:32.800 --> 00:15:34.870
also check out what
you are getting.

00:15:34.870 --> 00:15:36.825
If you are simply
blindly taking text,

00:15:36.825 --> 00:15:38.200
well, you might
actually miss out

00:15:38.200 --> 00:15:40.366
of all the richness of the
data which comes with it.

00:15:40.366 --> 00:15:43.390
So therefore, please
check that out, as well.

00:15:43.390 --> 00:15:45.560
And if you're looking
at the clipboard,

00:15:45.560 --> 00:15:46.990
it's exactly the same thing.

00:15:46.990 --> 00:15:48.720
You definitely want
to have, of course,

00:15:48.720 --> 00:15:51.930
all the richness of whatever
is being copied and pasted,

00:15:51.930 --> 00:15:54.590
as well.

00:15:54.590 --> 00:15:56.560
So with that, resizing--

00:15:56.560 --> 00:15:58.660
I was talking last
year about resizing,

00:15:58.660 --> 00:16:00.820
that it's a really
big problem, right?

00:16:00.820 --> 00:16:04.750
Because resizing looks pretty
clunky on Android in general

00:16:04.750 --> 00:16:05.890
when you are doing this.

00:16:05.890 --> 00:16:07.840
So here is a solution for you.

00:16:07.840 --> 00:16:10.690
This is an application which
was written for Material Design

00:16:10.690 --> 00:16:12.040
2.0.

00:16:12.040 --> 00:16:14.590
And it looks nice on a phone.

00:16:14.590 --> 00:16:16.870
See, this looks,
actually, pretty nice.

00:16:16.870 --> 00:16:18.700
So when you are doing--

00:16:18.700 --> 00:16:22.030
when you're following the design
study from Material Design,

00:16:22.030 --> 00:16:25.210
they were coming with this
thing for tablet form factor.

00:16:25.210 --> 00:16:27.010
See, there's more information.

00:16:27.010 --> 00:16:28.900
You can actually
see more things.

00:16:28.900 --> 00:16:31.510
And they are
revealing more stuff.

00:16:31.510 --> 00:16:34.650
So with that, let me show you
a short demo of my notebook.

00:16:38.860 --> 00:16:42.630
So there's the application.

00:16:42.630 --> 00:16:45.450
And you can resize it.

00:16:45.450 --> 00:16:47.370
And as you can see,
while I'm resizing it,

00:16:47.370 --> 00:16:50.290
more and more data is
actually coming into play.

00:16:50.290 --> 00:16:53.580
And see, more stuff
is coming-- whoops.

00:16:53.580 --> 00:16:57.470
That was, of course,
the wrong guy.

00:16:57.470 --> 00:16:59.700
Eh, there you go.

00:16:59.700 --> 00:17:02.030
And you see that more and
more data is coming in.

00:17:02.030 --> 00:17:03.990
This is all
dynamically happening.

00:17:03.990 --> 00:17:06.810
And it's very fluid,
without a restart, which

00:17:06.810 --> 00:17:09.532
is usually the problem, right?

00:17:09.532 --> 00:17:10.990
Can I go back to
my slides, please?

00:17:14.140 --> 00:17:16.569
So first off, good news--

00:17:16.569 --> 00:17:18.079
the demo is actually online.

00:17:18.079 --> 00:17:18.950
You can download it.

00:17:18.950 --> 00:17:21.740
You can test it all yourself.

00:17:21.740 --> 00:17:23.050
It's on GitHub.

00:17:23.050 --> 00:17:26.560
And there's also an
excellent Codelab, which

00:17:26.560 --> 00:17:27.900
is actually even showing more.

00:17:27.900 --> 00:17:29.652
So you can also be
doing animations

00:17:29.652 --> 00:17:31.360
while you're transforming
from one layout

00:17:31.360 --> 00:17:33.700
into another, which is
then looking really cool.

00:17:33.700 --> 00:17:38.180
You should check out
the Codelab for sure.

00:17:38.180 --> 00:17:39.860
So how is it being done?

00:17:39.860 --> 00:17:42.600
Well, first off, you need to
have a constrained layout state

00:17:42.600 --> 00:17:43.100
file.

00:17:43.100 --> 00:17:45.020
It's like a blueprint,
which is essentially

00:17:45.020 --> 00:17:46.430
getting all the
different layouts

00:17:46.430 --> 00:17:51.170
into some kind of order,
when to use which one.

00:17:51.170 --> 00:17:52.940
And then comes the tricky part.

00:17:52.940 --> 00:17:54.950
Every of these
layouts need to have

00:17:54.950 --> 00:17:57.710
all UI elements which you use.

00:17:57.710 --> 00:17:59.120
So if you don't want to see--

00:17:59.120 --> 00:18:02.000
if you want to show it, then
you simply hide the thing.

00:18:02.000 --> 00:18:03.530
If it's hidden, it doesn't show.

00:18:03.530 --> 00:18:06.410
But it's still in
the layout itself.

00:18:06.410 --> 00:18:11.420
And by doing this, and in
onCreate, you will actually

00:18:11.420 --> 00:18:12.920
create then the
transition which you

00:18:12.920 --> 00:18:16.020
want to use when you want to
transition from one to another.

00:18:16.020 --> 00:18:18.740
And you set the
onConstraintsChanged layout

00:18:18.740 --> 00:18:20.120
handler.

00:18:20.120 --> 00:18:23.110
You will be able to do--

00:18:23.110 --> 00:18:26.180
to add then the
pre-layout change handler,

00:18:26.180 --> 00:18:29.950
which is then essentially like
giving the control to the--

00:18:35.210 --> 00:18:39.710
sorry-- which is giving the
control to our layouter.

00:18:39.710 --> 00:18:44.660
And we're just doing there
the transition itself.

00:18:44.660 --> 00:18:47.360
So inside your activity,
what you have to do

00:18:47.360 --> 00:18:49.610
is you have to add the
onConfigurationChanged handler,

00:18:49.610 --> 00:18:51.680
which is usually being called
every time when something

00:18:51.680 --> 00:18:53.805
changes, like the virtual
keyboard is disconnected,

00:18:53.805 --> 00:18:58.700
the screen resolution changes,
or anything like that.

00:18:58.700 --> 00:19:00.590
And from there,
you are essentially

00:19:00.590 --> 00:19:03.410
calling the constrained
change layout handler

00:19:03.410 --> 00:19:06.410
to actually let them
know what the size is.

00:19:06.410 --> 00:19:09.290
And that will actually then
do all the work for you.

00:19:09.290 --> 00:19:12.680
And finally, you will actually
add inside the Android manifest

00:19:12.680 --> 00:19:16.580
file the request that you want
to handle all configuration

00:19:16.580 --> 00:19:19.500
changes for size changes.

00:19:19.500 --> 00:19:21.400
And with that, you are done.

00:19:21.400 --> 00:19:22.850
If you want to
try it out, again,

00:19:22.850 --> 00:19:27.130
try the Codelab to
actually get this done.

00:19:27.130 --> 00:19:31.630
So the next thing
is zero-latency ink.

00:19:31.630 --> 00:19:33.880
What does zero-latency ink mean?

00:19:33.880 --> 00:19:35.914
Well, you have possibly
had already a pen.

00:19:35.914 --> 00:19:37.330
You were trying
to draw something.

00:19:37.330 --> 00:19:40.550
And you see, there is a lag
between drawing something,

00:19:40.550 --> 00:19:45.260
or using the pen, and seeing
something on the device itself.

00:19:45.260 --> 00:19:47.630
So where is it coming from?

00:19:47.630 --> 00:19:50.670
Well, first off, you
have to read the sensor.

00:19:50.670 --> 00:19:52.750
You have to do the
input processing.

00:19:52.750 --> 00:19:55.240
You have to then do
the app code, whatever

00:19:55.240 --> 00:19:56.400
the application is doing.

00:19:56.400 --> 00:19:58.485
You have to do some
drawing with OpenGL.

00:19:58.485 --> 00:20:00.607
Then, you're actually
doing multiple buffering,

00:20:00.607 --> 00:20:02.440
because you have to
actually pass everything

00:20:02.440 --> 00:20:05.460
through the compositor, which
is then compositing everything

00:20:05.460 --> 00:20:08.560
on the Chrome OS side, or
whatever operating system

00:20:08.560 --> 00:20:10.279
you have, the compositing side.

00:20:10.279 --> 00:20:12.070
And just going through
the entire pipeline,

00:20:12.070 --> 00:20:15.710
which might be for
images, or whatnot.

00:20:15.710 --> 00:20:19.750
So in total, you're coming out
to 100 milliseconds of delay,

00:20:19.750 --> 00:20:22.520
which is very, very noticeable.

00:20:22.520 --> 00:20:25.150
So the ideal thing is,
of course, you simply

00:20:25.150 --> 00:20:27.010
remove all the compositing.

00:20:27.010 --> 00:20:29.960
So now we are down to,
well, roughly two frames,

00:20:29.960 --> 00:20:32.470
which is less than 32
milliseconds, right?

00:20:32.470 --> 00:20:35.950
But if we are adding, now, also,
the prediction logic to it,

00:20:35.950 --> 00:20:40.000
well, then, we are really
at pretty much zero--

00:20:40.000 --> 00:20:42.730
so mission accomplished.

00:20:42.730 --> 00:20:45.750
And with that, I will actually
hand it over to Paolo Rivera,

00:20:45.750 --> 00:20:48.070
a comic book author,
which is showing us

00:20:48.070 --> 00:20:50.040
the whole thing in action.

00:20:50.040 --> 00:20:51.010
[APPLAUSE]

00:20:51.010 --> 00:20:52.465
PAOLO RIVERA: Hi.

00:20:52.465 --> 00:20:55.870
Thank you.

00:20:55.870 --> 00:20:57.975
Hi, everyone.

00:20:57.975 --> 00:20:59.955
Hm, let's see.

00:21:03.910 --> 00:21:04.410
Whoops.

00:21:10.350 --> 00:21:15.190
All right, can you guys
see what I got up there?

00:21:15.190 --> 00:21:18.640
So I drew some Spider-Man.

00:21:18.640 --> 00:21:20.980
That's typically what
I'm known for at Marvel.

00:21:20.980 --> 00:21:22.834
But I also drew Thanos.

00:21:22.834 --> 00:21:24.250
Did anyone see
"Infinity War" yet?

00:21:24.250 --> 00:21:27.140
[CHEERING]

00:21:27.140 --> 00:21:30.340
All right, I did too.

00:21:30.340 --> 00:21:35.160
All right, so what I like about
this app is you can rotate.

00:21:35.160 --> 00:21:37.130
You can draw at any angle.

00:21:37.130 --> 00:21:38.130
You can also do layers.

00:21:38.130 --> 00:21:40.530
This is Infinite
Painter, by the way.

00:21:40.530 --> 00:21:44.540
So what I've done is I've
drawn Spidey ahead of time.

00:21:44.540 --> 00:21:47.030
And I'm going to
ink on top of him

00:21:47.030 --> 00:21:51.790
using some of the inking tools.

00:21:55.269 --> 00:21:57.760
Oh, I got to change my color.

00:22:13.470 --> 00:22:15.630
I'm from the school of
thought where Spider-Man

00:22:15.630 --> 00:22:18.569
should have expressive eyes.

00:22:18.569 --> 00:22:20.610
And so I'm glad that they
did that in the movies.

00:22:44.000 --> 00:22:47.270
Some people don't like
doing the webbing, but I do.

00:22:47.270 --> 00:22:50.426
It does add a little bit
of time to each panel,

00:22:50.426 --> 00:22:53.380
but it's worth it in the end.

00:23:12.140 --> 00:23:14.580
And then, of course, you
can add color, as well.

00:23:14.580 --> 00:23:20.944
I put in a layer
already with a red base.

00:23:20.944 --> 00:23:22.360
And I might add
some shadow to it.

00:23:27.270 --> 00:23:30.060
One of the other features
I like about this is you

00:23:30.060 --> 00:23:32.040
can double tap to reset it.

00:23:32.040 --> 00:23:35.190
And then, if you hold and
long press, it'll flip it.

00:23:35.190 --> 00:23:37.110
So as a comic book
artist, I'm always

00:23:37.110 --> 00:23:39.630
flipping things, if I
can, because it gives you

00:23:39.630 --> 00:23:41.052
a fresh perspective.

00:23:45.120 --> 00:23:49.070
And of course, there's
all kinds of drawing tools

00:23:49.070 --> 00:23:50.030
that you can use.

00:23:50.030 --> 00:23:52.370
Some are more
painterly than others.

00:24:06.800 --> 00:24:09.730
And what I did was I clipped
the shadow layer to the layer

00:24:09.730 --> 00:24:14.020
beneath it, which means that
everything I do on this layer

00:24:14.020 --> 00:24:18.420
will be bounded by
the layer below it--

00:24:18.420 --> 00:24:19.320
one way to save time.

00:24:25.464 --> 00:24:27.630
And of course, the other
nice thing about the stylus

00:24:27.630 --> 00:24:31.230
is it has tilt. So in
this case, I made tilt--

00:24:36.800 --> 00:24:40.560
depending on which
way I hold the pen,

00:24:40.560 --> 00:24:42.180
it will give me a
thick or thin line.

00:25:41.891 --> 00:25:42.890
I could do this all day.

00:25:42.890 --> 00:25:44.750
[LAUGHTER]

00:25:44.750 --> 00:25:45.560
I usually do.

00:25:49.570 --> 00:25:51.280
Usually, there aren't
this many people

00:25:51.280 --> 00:25:52.420
watching while I'm drawing.

00:26:01.150 --> 00:26:02.790
Y'all are lucky I'm
even wearing pants.

00:26:02.790 --> 00:26:05.225
[LAUGHTER]

00:26:16.440 --> 00:26:20.380
And let's finish it off
with some Spidey sense,

00:26:20.380 --> 00:26:22.090
because Thanos is nearby.

00:26:28.070 --> 00:26:29.260
And he's a Malthusian.

00:26:36.330 --> 00:26:37.440
There we go.

00:26:37.440 --> 00:26:37.940
Thank you.

00:26:37.940 --> 00:26:40.832
[APPLAUSE]

00:26:40.832 --> 00:26:42.260
Thanks.

00:26:42.260 --> 00:26:42.760
Thanks.

00:26:42.760 --> 00:26:43.635
STEFAN KUHNE: Thanks.

00:26:47.580 --> 00:26:49.420
OK, so how was it done?

00:26:49.420 --> 00:26:52.800
So we have an ink
overlay view, which

00:26:52.800 --> 00:26:56.070
is a new thing, which is
not yet really public.

00:26:56.070 --> 00:26:58.830
If you want to get access
to it, there's a QR code.

00:26:58.830 --> 00:27:04.740
Please grab it and sign
up for our release.

00:27:04.740 --> 00:27:07.260
So it will actually be added
then to our release notes

00:27:07.260 --> 00:27:10.860
as soon as we are
giving you access to it.

00:27:10.860 --> 00:27:12.570
But essentially, we have--

00:27:12.570 --> 00:27:14.670
well, you can see the code.

00:27:14.670 --> 00:27:18.540
And it might change
a little bit.

00:27:18.540 --> 00:27:21.389
So multi-display, which
is another topic--

00:27:21.389 --> 00:27:23.180
so it's a very big
topic, because the thing

00:27:23.180 --> 00:27:24.950
is, like, on a phone, you
have two screens, right?

00:27:24.950 --> 00:27:26.158
You have the internal screen.

00:27:26.158 --> 00:27:28.857
You have an external
screen, maybe.

00:27:28.857 --> 00:27:31.190
If you're really creative,
and you have a Pixelbook Pro,

00:27:31.190 --> 00:27:34.280
you might actually get
up to seven screens.

00:27:34.280 --> 00:27:35.270
I'm not entirely sure.

00:27:35.270 --> 00:27:37.260
I've heard that it's possible.

00:27:37.260 --> 00:27:39.720
But the thing is, what
does it mean for you?

00:27:39.720 --> 00:27:41.930
Well, actually, it means a lot.

00:27:41.930 --> 00:27:43.670
Because the thing
is many applications

00:27:43.670 --> 00:27:45.190
are doing stupid things.

00:27:45.190 --> 00:27:47.989
Sorry, you are not that, right?

00:27:47.989 --> 00:27:50.030
But the thing is, for
example, simply using, hey,

00:27:50.030 --> 00:27:55.020
I want to get the display
information for display ID 0,

00:27:55.020 --> 00:27:57.190
which is the default
display, right?

00:27:57.190 --> 00:27:59.780
Well, seeing as it's not the
default display, because what

00:27:59.780 --> 00:28:01.550
is the default display?

00:28:01.550 --> 00:28:02.960
You don't know that, right?

00:28:02.960 --> 00:28:07.310
So therefore, we have,
actually-- if you are pre-O,

00:28:07.310 --> 00:28:12.560
then we are thinking that you
are a non-multi-display-aware

00:28:12.560 --> 00:28:13.310
application.

00:28:13.310 --> 00:28:15.770
And in this case, we have
a special thing for you

00:28:15.770 --> 00:28:17.270
to make your life easier.

00:28:17.270 --> 00:28:20.330
And essentially, 0 is
like a virtual display,

00:28:20.330 --> 00:28:23.320
which is always the
display you are on.

00:28:23.320 --> 00:28:26.390
And therefore, the
anti-API is really clear.

00:28:26.390 --> 00:28:28.560
Everything is exactly
as it should be.

00:28:28.560 --> 00:28:31.160
But the thing is you get
this kind of special display

00:28:31.160 --> 00:28:33.680
so that you're working fine.

00:28:33.680 --> 00:28:36.980
If, however, on the other hand,
you are actually something

00:28:36.980 --> 00:28:39.860
after O, or O, then
you will actually

00:28:39.860 --> 00:28:41.890
get a different treatment.

00:28:41.890 --> 00:28:45.074
In that case, you will get the
real IDs, the real display IDs.

00:28:45.074 --> 00:28:47.240
So therefore, if you are
doing these kind of things,

00:28:47.240 --> 00:28:51.530
you should be careful
what you are doing.

00:28:51.530 --> 00:28:55.490
And yeah, one additional
thing is if you are actually

00:28:55.490 --> 00:28:57.290
running an [? NYC ?]
application,

00:28:57.290 --> 00:28:59.660
you still have the
setLaunchDisplayId

00:28:59.660 --> 00:29:02.820
as a function call.

00:29:02.820 --> 00:29:03.990
So what should you do?

00:29:03.990 --> 00:29:08.530
Well, you should definitely
use the size of the window.

00:29:08.530 --> 00:29:12.050
So always use your context and
try to get the display metrics

00:29:12.050 --> 00:29:12.770
from that.

00:29:12.770 --> 00:29:15.580
That is working
perfectly for you.

00:29:15.580 --> 00:29:18.050
And if you want to see any
kind of changes-- like,

00:29:18.050 --> 00:29:20.175
for example, you have moved
to a different display,

00:29:20.175 --> 00:29:23.450
or something like then look
at onConfigurationChange

00:29:23.450 --> 00:29:25.490
to see these kind of changes.

00:29:25.490 --> 00:29:29.180
And if you want to
actually position yourself,

00:29:29.180 --> 00:29:32.270
think also about setting
the setLaunchDisplayId

00:29:32.270 --> 00:29:34.200
if you do not want to
get to the same screen

00:29:34.200 --> 00:29:37.296
where your current
application is on.

00:29:37.296 --> 00:29:39.170
What you shouldn't do
is you shouldn't really

00:29:39.170 --> 00:29:40.580
assume anything--

00:29:40.580 --> 00:29:43.750
well, without
using your context.

00:29:43.750 --> 00:29:46.974
If you are using any
kind of display ID,

00:29:46.974 --> 00:29:48.390
trying to get the
default display,

00:29:48.390 --> 00:29:52.250
you will get something which
is most certainly wrong.

00:29:52.250 --> 00:29:56.270
And also, what was that?

00:29:56.270 --> 00:29:58.700
Yeah, don't make any assumptions
that you are actually

00:29:58.700 --> 00:30:00.949
on the [INAUDIBLE] display,
because that is definitely

00:30:00.949 --> 00:30:01.970
wrong, as well.

00:30:01.970 --> 00:30:07.644
And last but not least, don't
assume that you're always

00:30:07.644 --> 00:30:08.810
running on the same display.

00:30:11.700 --> 00:30:14.040
So presentation API--
we were being asked

00:30:14.040 --> 00:30:15.520
to actually get this to you.

00:30:15.520 --> 00:30:17.580
We are getting that
very, very soon.

00:30:17.580 --> 00:30:21.220
And it is-- actually, I
think, pretty much by now, it

00:30:21.220 --> 00:30:22.200
should be there.

00:30:22.200 --> 00:30:24.680
You can alternatively also
use setLaunchDisplayId

00:30:24.680 --> 00:30:27.090
and setLaunchBounds,
which will actually

00:30:27.090 --> 00:30:29.610
do pretty much the same thing.

00:30:29.610 --> 00:30:31.980
3D and gaming--
so what is there?

00:30:31.980 --> 00:30:36.670
So basically, we have Vulkan
support for, for example,

00:30:36.670 --> 00:30:38.555
the Pixelbook.

00:30:38.555 --> 00:30:39.930
It was actually
shipping already.

00:30:39.930 --> 00:30:42.500
1.0 was already shipping
beginning of this year.

00:30:42.500 --> 00:30:45.360
1.1 should be
shipping around now.

00:30:45.360 --> 00:30:48.810
And older architectures
are also on the way.

00:30:48.810 --> 00:30:51.660
So Vulkan is much
faster and so on.

00:30:51.660 --> 00:30:53.467
So when you are
building your own game,

00:30:53.467 --> 00:30:55.800
one-- so there are a few
things that you should actually

00:30:55.800 --> 00:30:56.341
take care of.

00:30:56.341 --> 00:30:58.860
First off, you should always
use the latest version

00:30:58.860 --> 00:30:59.580
of the framework.

00:30:59.580 --> 00:31:01.350
If you're using
Unity and whatnot,

00:31:01.350 --> 00:31:02.910
they are actually
fixing their stuff.

00:31:02.910 --> 00:31:05.389
So if, for example, a window
size changes and whatnot,

00:31:05.389 --> 00:31:06.930
and they have the
input region, which

00:31:06.930 --> 00:31:09.000
is changing it a
little bit, they

00:31:09.000 --> 00:31:10.450
will actually fix that for you.

00:31:10.450 --> 00:31:12.720
So please use the latest
one, because otherwise,

00:31:12.720 --> 00:31:16.420
your application will fail when
you are trying to be resized.

00:31:16.420 --> 00:31:22.590
So the next thing is, also, use
either 64-bit or 32-bit native

00:31:22.590 --> 00:31:23.730
code as well.

00:31:23.730 --> 00:31:26.550
Don't use only ARM,
because ARM is, of course,

00:31:26.550 --> 00:31:31.390
a little bit slower, especially
on the high-end devices.

00:31:31.390 --> 00:31:35.200
So when you are running a game,
application quality control

00:31:35.200 --> 00:31:38.174
might actually be bad
for you, depending

00:31:38.174 --> 00:31:39.090
on what you are doing.

00:31:39.090 --> 00:31:41.940
So if you have, for example,
multiple surfaces and whatnot,

00:31:41.940 --> 00:31:45.349
and you are trying then to
squeeze out the latest thing,

00:31:45.349 --> 00:31:47.640
and if you are running into
a state where you're using,

00:31:47.640 --> 00:31:49.530
suddenly, quadruple
buffering, because you

00:31:49.530 --> 00:31:52.560
are being composited on
the desktop or something,

00:31:52.560 --> 00:31:55.350
your quality control might
actually do something negative

00:31:55.350 --> 00:31:56.290
to your quality.

00:31:56.290 --> 00:31:58.290
And you get some kind of
really weird behaviors.

00:31:58.290 --> 00:32:01.810
So therefore, try it out on
Chromebooks before you release

00:32:01.810 --> 00:32:02.310
it.

00:32:02.310 --> 00:32:04.260
That would be really awesome.

00:32:04.260 --> 00:32:08.580
And yeah, if you're
using a lot of layers,

00:32:08.580 --> 00:32:10.630
like a lot of surface
use and whatnot,

00:32:10.630 --> 00:32:12.660
you might also fall out of this.

00:32:12.660 --> 00:32:14.760
And then your quality
might actually drop.

00:32:14.760 --> 00:32:16.200
So therefore, if
you can actually

00:32:16.200 --> 00:32:18.450
do everything in a
single layer instead,

00:32:18.450 --> 00:32:20.730
please try to do that instead.

00:32:20.730 --> 00:32:23.370
And always be aware that
your window size might

00:32:23.370 --> 00:32:25.720
change at any point in time.

00:32:25.720 --> 00:32:28.410
And of course, since a
user is, for example,

00:32:28.410 --> 00:32:30.585
minimizing you, you might
actually lose your state,

00:32:30.585 --> 00:32:34.710
and/or if the window
gets being resized,

00:32:34.710 --> 00:32:36.340
the state might
actually be lost.

00:32:36.340 --> 00:32:39.270
So please, save your state.

00:32:39.270 --> 00:32:41.110
Best practices--
as I said earlier,

00:32:41.110 --> 00:32:43.260
we are trying to
work with Play Store

00:32:43.260 --> 00:32:46.170
to actually surface
applications which

00:32:46.170 --> 00:32:48.120
are really good for the
Chrome OS environment.

00:32:48.120 --> 00:32:52.140
So therefore, if you are doing
everything which we asked for,

00:32:52.140 --> 00:32:54.000
you will actually
get a better rating.

00:32:54.000 --> 00:32:58.290
So therefore, target
SDK bigger than 26.

00:32:58.290 --> 00:32:59.820
That is definitely
something good.

00:32:59.820 --> 00:33:03.180
Implement keyboard
and mouse navigation.

00:33:03.180 --> 00:33:04.740
That is a good thing.

00:33:04.740 --> 00:33:06.940
UI elements-- when
you're resizing,

00:33:06.940 --> 00:33:09.130
they should always
be inside the screen.

00:33:09.130 --> 00:33:11.130
Because if you're alt-tabbing
through something,

00:33:11.130 --> 00:33:12.671
and suddenly, your
element is outside

00:33:12.671 --> 00:33:14.610
of a screen, that's bad.

00:33:14.610 --> 00:33:16.410
When you're doing
resizing, definitely

00:33:16.410 --> 00:33:18.860
try to think about
landscape and portrait.

00:33:18.860 --> 00:33:22.350
Both orientations
are very important.

00:33:22.350 --> 00:33:24.750
Make good use of a lot
of space, because you

00:33:24.750 --> 00:33:25.780
have a lot of space.

00:33:25.780 --> 00:33:27.120
So use it.

00:33:27.120 --> 00:33:29.460
I showed you how to.

00:33:29.460 --> 00:33:32.700
Use architectural components
whenever possible in order

00:33:32.700 --> 00:33:34.920
to save your state,
or savedInstanceState

00:33:34.920 --> 00:33:36.920
does also do the same thing.

00:33:36.920 --> 00:33:39.790
Be fluid, and
please, don't crash.

00:33:39.790 --> 00:33:41.790
That is really the worst
thing which can happen.

00:33:41.790 --> 00:33:43.650
Check out that you
are not crashing.

00:33:43.650 --> 00:33:45.690
And with that, I'm
passing it on to Emilie,

00:33:45.690 --> 00:33:48.360
who is talking about all the
great tools we have for you.

00:33:48.360 --> 00:33:50.845
[APPLAUSE]

00:33:54.617 --> 00:33:55.700
EMILIE ROBERTS: Thank you.

00:33:55.700 --> 00:33:58.730
There are so many exciting new
things for Android applications

00:33:58.730 --> 00:34:00.280
on Chrome OS.

00:34:00.280 --> 00:34:02.900
And I'm honored to be able
to present to you three

00:34:02.900 --> 00:34:05.810
new amazing developer
tools to help

00:34:05.810 --> 00:34:10.070
optimizing your application for
Chrome OS faster and easier.

00:34:10.070 --> 00:34:13.280
The first one, you've
all been very patient.

00:34:13.280 --> 00:34:14.848
So thank you for your patience.

00:34:14.848 --> 00:34:16.639
And a big thank you to
the engineering team

00:34:16.639 --> 00:34:19.909
for making this happen
and doing it right.

00:34:19.909 --> 00:34:23.600
In Android Studio, we're
pleased to present the Chrome OS

00:34:23.600 --> 00:34:24.675
Emulator.

00:34:24.675 --> 00:34:27.585
[APPLAUSE]

00:34:31.469 --> 00:34:34.679
So right in Android Studio, you
have a full Chrome OS image.

00:34:34.679 --> 00:34:36.690
You can test out the
user flow for Chrome OS,

00:34:36.690 --> 00:34:40.800
and of course, test and
optimize your app for Android--

00:34:40.800 --> 00:34:44.429
your Android application right
in Chrome OS, which is awesome.

00:34:44.429 --> 00:34:48.315
However, if any of you have ever
made an Android application--

00:34:48.315 --> 00:34:48.940
that's my joke.

00:34:48.940 --> 00:34:49.659
OK, some of you did.

00:34:49.659 --> 00:34:50.534
Some of you made one.

00:34:50.534 --> 00:34:52.420
If you do, you'll
know there's nothing

00:34:52.420 --> 00:34:56.139
like testing on a real device,
especially a form factor

00:34:56.139 --> 00:34:58.840
like this, where the
user will be flipping it,

00:34:58.840 --> 00:35:01.570
rotating it, tossing it on
the bed, keyboard input, mouse

00:35:01.570 --> 00:35:05.170
input, MIDI controllers,
stylus input.

00:35:05.170 --> 00:35:07.330
You need to test this
on a real device.

00:35:07.330 --> 00:35:09.920
So we've made that a lot easier.

00:35:09.920 --> 00:35:14.050
I'm very happy to present
ADB debugging over USB.

00:35:14.050 --> 00:35:16.435
[APPLAUSE]

00:35:20.260 --> 00:35:22.870
It's available for your
Pixelbook and your HP

00:35:22.870 --> 00:35:24.580
Chromebook X2.

00:35:24.580 --> 00:35:26.910
The public documentation
will be out in a week or two.

00:35:26.910 --> 00:35:28.750
So please watch those links--

00:35:28.750 --> 00:35:30.760
and more devices coming
soon, and it makes

00:35:30.760 --> 00:35:33.060
development that much easier.

00:35:33.060 --> 00:35:35.290
OK, so I said there was
three exciting developer

00:35:35.290 --> 00:35:37.060
tools we're announcing.

00:35:37.060 --> 00:35:39.630
And the first two are awesome.

00:35:39.630 --> 00:35:42.340
But I actually think the third
one is even more exciting.

00:35:42.340 --> 00:35:46.210
And I truly, truly believe it's
going to knock your socks off.

00:35:46.210 --> 00:35:48.790
And we didn't want anyone
to go home with cold feet.

00:35:48.790 --> 00:35:50.620
So we brought some
replacement socks

00:35:50.620 --> 00:35:52.870
for when they fly off your feet.

00:35:52.870 --> 00:35:53.597
Here are some.

00:35:53.597 --> 00:35:55.930
And if you're in the middle
the audience or at the back,

00:35:55.930 --> 00:35:57.249
don't be jealous.

00:35:57.249 --> 00:35:58.790
There's plenty of
socks for everyone.

00:35:58.790 --> 00:36:01.840
And on your way out of the
session, you can pick them up.

00:36:01.840 --> 00:36:03.760
We're going to people
handing them out.

00:36:03.760 --> 00:36:05.890
So that-- yeah, socks, right?

00:36:05.890 --> 00:36:08.380
Socks is your new
developer tool.

00:36:08.380 --> 00:36:10.690
So I'm going to switch
over to the Chromebook

00:36:10.690 --> 00:36:12.370
for a quick demo.

00:36:12.370 --> 00:36:13.700
We have a terminal!

00:36:13.700 --> 00:36:15.070
Yes, a terminal!

00:36:15.070 --> 00:36:16.528
[APPLAUSE]

00:36:16.528 --> 00:36:19.840
Yeah, terminal, yeah!

00:36:19.840 --> 00:36:21.270
Super exciting terminal.

00:36:21.270 --> 00:36:24.910
You can see git clone, all
sorts of exciting things.

00:36:24.910 --> 00:36:27.550
I cloned the code lab optimizing
your Android application

00:36:27.550 --> 00:36:31.100
for Chrome OS, which you
should check out at Codelab 10.

00:36:31.100 --> 00:36:32.590
There's dinosaurs.

00:36:32.590 --> 00:36:35.590
But what's interesting about
this particular terminal

00:36:35.590 --> 00:36:38.920
is it's running inside a
full Linux environment.

00:36:38.920 --> 00:36:39.610
No clap?

00:36:39.610 --> 00:36:40.551
OK.

00:36:40.551 --> 00:36:41.550
You watched the keynote.

00:36:41.550 --> 00:36:42.549
You watched the keynote.

00:36:42.549 --> 00:36:43.190
OK, fine.

00:36:43.190 --> 00:36:45.350
So if you have a full
Linux environment--

00:36:45.350 --> 00:36:46.810
you can clap for this next one--

00:36:46.810 --> 00:36:49.510
you could install an
application, Linux application,

00:36:49.510 --> 00:36:50.889
like Android Studio.

00:36:50.889 --> 00:36:52.180
So here we have Android Studio.

00:36:52.180 --> 00:36:54.595
[APPLAUSE]

00:36:58.460 --> 00:37:00.260
More exciting than
a terminal, I guess.

00:37:00.260 --> 00:37:02.570
So here, I have the
Codelab loaded up.

00:37:02.570 --> 00:37:04.010
I'm making those
dinosaurs click.

00:37:04.010 --> 00:37:05.090
I'm adding drag and drop.

00:37:05.090 --> 00:37:07.700
And I go and hit Run.

00:37:07.700 --> 00:37:10.840
Oh, so if you're in the
back, and you can't see,

00:37:10.840 --> 00:37:13.870
that says Google
Pixelbook, which means,

00:37:13.870 --> 00:37:18.790
when I press OK, it goes
through the great old build,

00:37:18.790 --> 00:37:21.910
pushing the application
to the device--

00:37:21.910 --> 00:37:23.160
what?

00:37:23.160 --> 00:37:23.980
On device.

00:37:23.980 --> 00:37:25.630
[APPLAUSE]

00:37:25.630 --> 00:37:26.130
Yeah.

00:37:29.280 --> 00:37:30.600
So look, you can click.

00:37:30.600 --> 00:37:31.960
Oh, we got keyboard commands.

00:37:31.960 --> 00:37:34.180
And it's pushed it
straight to the device.

00:37:34.180 --> 00:37:37.350
So we can program on the
Pixelbook, in Android Studio,

00:37:37.350 --> 00:37:40.170
push directly to the
device, test your app out.

00:37:40.170 --> 00:37:43.222
And of course, you have
your logcat there with--

00:37:43.222 --> 00:37:44.430
and all your debugging tools.

00:37:44.430 --> 00:37:45.930
So this is amazing.

00:37:45.930 --> 00:37:47.785
[APPLAUSE]

00:37:47.785 --> 00:37:48.285
Yeah!

00:37:51.590 --> 00:37:53.110
And I'm so glad the
engineering team

00:37:53.110 --> 00:37:55.917
let me present this
super-exciting announcement.

00:37:55.917 --> 00:37:58.000
So we're super excited
about Linux on Chromebooks.

00:37:58.000 --> 00:38:00.310
We're going to tell you how
to set it up for yourself.

00:38:00.310 --> 00:38:03.185
Before I do, we had a lot
of questions at office hours

00:38:03.185 --> 00:38:04.060
and in the Codelab--

00:38:04.060 --> 00:38:05.410
what's going on
behind the scenes?

00:38:05.410 --> 00:38:06.040
How does this work?

00:38:06.040 --> 00:38:06.706
How's it set up?

00:38:06.706 --> 00:38:09.520
So I'm going to give
you a brief overview.

00:38:09.520 --> 00:38:10.870
Here's Chrome OS.

00:38:10.870 --> 00:38:12.570
In real life, it's
a bit snazzier,

00:38:12.570 --> 00:38:15.600
but it's a representative box.

00:38:15.600 --> 00:38:18.050
And inside there, we have
the Android container.

00:38:18.050 --> 00:38:19.120
This is nothing new.

00:38:19.120 --> 00:38:22.330
This is now your Android
apps run on Chrome OS today.

00:38:22.330 --> 00:38:25.210
Of course, what is new
is we have Linux VM.

00:38:25.210 --> 00:38:26.800
And we install
great applications,

00:38:26.800 --> 00:38:29.710
like Tux Racer, which they
wouldn't let me show today,

00:38:29.710 --> 00:38:32.280
also Android Studio.

00:38:32.280 --> 00:38:34.780
And to achieve that last step,
which I think is the most

00:38:34.780 --> 00:38:37.050
exciting-- pushing straight
to the app and debugging

00:38:37.050 --> 00:38:38.110
on device--

00:38:38.110 --> 00:38:41.540
we need to connect ADB
to the Android container.

00:38:41.540 --> 00:38:43.365
To do that it's quite simple.

00:38:43.365 --> 00:38:45.340
It's the adb connect command.

00:38:45.340 --> 00:38:46.630
It's not a secret IP address.

00:38:46.630 --> 00:38:52.990
It's the IP address for the
ADBD on the Android container.

00:38:52.990 --> 00:38:55.960
This will be in the public-- it
is in the public instructions

00:38:55.960 --> 00:38:56.530
already.

00:38:56.530 --> 00:38:59.950
But here's a pro tip, since
you came to our session.

00:38:59.950 --> 00:39:03.250
For some situations, it's handy
to set up a little SSH tunnel--

00:39:03.250 --> 00:39:05.860
simple SSH tunnel
in Chrome OS that

00:39:05.860 --> 00:39:09.040
will just forward those
connections automatically-- not

00:39:09.040 --> 00:39:10.030
necessary.

00:39:10.030 --> 00:39:12.650
It's helpful in some situations.

00:39:12.650 --> 00:39:14.671
Here's the instructions
if you haven't--

00:39:14.671 --> 00:39:17.030
oops.

00:39:17.030 --> 00:39:20.542
Here are the instructions
if you haven't seen it.

00:39:20.542 --> 00:39:22.250
I think we were number
one on Hacker News

00:39:22.250 --> 00:39:23.310
yesterday or something.

00:39:23.310 --> 00:39:24.800
So that's kind of exciting.

00:39:24.800 --> 00:39:27.230
Please install it on
your Google Pixelbook,

00:39:27.230 --> 00:39:28.482
coming to more devices soon.

00:39:28.482 --> 00:39:29.690
We're super excited about it.

00:39:29.690 --> 00:39:31.130
Let us know how it works.

00:39:31.130 --> 00:39:33.660
Try it out.

00:39:33.660 --> 00:39:35.300
So where are we at?

00:39:35.300 --> 00:39:37.370
We have an emulator.

00:39:37.370 --> 00:39:39.867
We have ADB debugging over USB.

00:39:39.867 --> 00:39:41.450
We've got Linux on
Chromebooks running

00:39:41.450 --> 00:39:43.730
Android Studio, which
you can debug and develop

00:39:43.730 --> 00:39:45.020
on the device.

00:39:45.020 --> 00:39:47.870
And you have socks for those
long, cold coding nights,

00:39:47.870 --> 00:39:50.270
so your tootsies stay toasty.

00:39:50.270 --> 00:39:51.860
What's missing?

00:39:51.860 --> 00:39:52.820
Nothing, right?

00:39:52.820 --> 00:39:56.570
Except I heard a rumor on
the way in that some of you

00:39:56.570 --> 00:39:58.520
don't yet have a Pixelbook.

00:39:58.520 --> 00:39:59.630
What?

00:39:59.630 --> 00:40:02.041
So we're going to help you
out a little bit with that.

00:40:02.041 --> 00:40:04.540
On your way out, when you grab
your socks, you can pick up--

00:40:04.540 --> 00:40:07.504
[APPLAUSE]

00:40:11.460 --> 00:40:15.100
--a coupon for 75% off
a Google Pixelbook.

00:40:15.100 --> 00:40:16.799
Don't forget your socks.

00:40:16.799 --> 00:40:18.340
Oh, they're kicking
me off the stage.

00:40:18.340 --> 00:40:20.150
So I'm going to say quickly,
come to our Codelabs.

00:40:20.150 --> 00:40:21.274
We have two great Codelabs.

00:40:21.274 --> 00:40:23.350
You can do the resizing
with animations.

00:40:23.350 --> 00:40:24.050
It looks great.

00:40:24.050 --> 00:40:26.470
You can make keyboard
input, drag and drop,

00:40:26.470 --> 00:40:29.040
click on the dinosaurs, talk
to us at our office hours

00:40:29.040 --> 00:40:30.040
today day.

00:40:30.040 --> 00:40:32.416
Fill out the survey.

00:40:32.416 --> 00:40:32.980
Thank you.

00:40:32.980 --> 00:40:34.630
Can everyone back
on stage to bow?

00:40:34.630 --> 00:40:36.160
We're done, yes?

00:40:36.160 --> 00:40:39.890
Shahid, Frederico, come
on up, Stefan, Paolo.

00:40:39.890 --> 00:40:40.390
Thank you.

00:40:40.390 --> 00:40:41.555
Thank you so much.

00:40:41.555 --> 00:40:45.640
[MUSIC PLAYING]

