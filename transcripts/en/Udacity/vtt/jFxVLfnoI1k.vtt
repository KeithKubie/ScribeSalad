WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
Let's go through and actually do a proof of the correctness

00:00:04.000 --> 00:00:06.000
of the naive algorithm we just spoke about.

00:00:06.000 --> 00:00:10.000
We're going to proceed by taking advantage of a particular observation.

00:00:10.000 --> 00:00:14.000
What we're trying to prove here is the correctness of the claim

00:00:14.000 --> 00:00:18.000
that naive(a,b) outputs the product of a and b.

00:00:18.000 --> 00:00:23.000
The observation that I'm going to make is that before or after the "while" loop

00:00:23.000 --> 00:00:27.000
in the implementation of naive, this statement is always true.

00:00:27.000 --> 00:00:31.000
The variables x and y multiply together and added to z

00:00:31.000 --> 00:00:36.000
is exactly equal to a times b. How are we going to show that this is the case?

00:00:36.000 --> 00:00:39.000
The first time we're going through the "while" loop in the very beginning

00:00:39.000 --> 00:00:44.000
and the top of the function, x is assigned to a, y is assigned to b, and z is assigned to 0.

00:00:44.000 --> 00:00:48.000
Let's check the expression with those variables plugged in.

00:00:48.000 --> 00:00:55.000
We're saying that's ab equals ab+0. Well, that's kind of obvious.

00:00:55.000 --> 00:00:58.000
Well, the next thing we're going to show is that if it's the case

00:00:58.000 --> 00:01:02.000
that at the beginning of the "while" loop, this condition holds that a times b

00:01:02.000 --> 00:01:04.000
is exactly equal to x times y plus z,

00:01:04.000 --> 00:01:10.000
then it's going to be the case that with the new values, so x, y, and z may change.

00:01:10.000 --> 00:01:14.000
The new values x prime, y prime, and z prime are going to satisfy this as well.

00:01:14.000 --> 00:01:17.000
If it was true before, then it has to be true after.

00:01:17.000 --> 00:01:21.000
Why would this be true? Let's remind ourselves what the code looks like again.

00:01:21.000 --> 00:01:25.000
What happens in each integration of the loop is that a new value of z is computed,

00:01:25.000 --> 00:01:28.000
which is the old value plus the value of y,

00:01:28.000 --> 00:01:31.000
and a new value of x is computed, which is the old value minus 1.

00:01:31.000 --> 00:01:38.000
We basically had the new value of x if the old value minus 1, the new value of y not been changed,

00:01:38.000 --> 00:01:41.000
and the new value of z is the old value of z plus y.

00:01:41.000 --> 00:01:47.000
All right! What can we say about x prime times y prime plus z prime?

00:01:47.000 --> 00:01:50.000
We know what x prime, y prime, and z prime are, so let's substitute those in.

00:01:50.000 --> 00:01:57.000
That's x minus 1 times y plus z plus y. Now we just do a little bit of algebra.

00:01:57.000 --> 00:02:02.000
Multiplying this out, we get xy minus y plus z plus y.

00:02:02.000 --> 00:02:08.000
and these y's, +y and -y cancel and so we get xy plus z.

00:02:08.000 --> 00:02:13.000
But, notice what we assumed--we say if it was the case the xy plus z is equal to ab,

00:02:13.000 --> 00:02:18.000
then what we're showing is that x prime, y prime plus z prime is equal to ab.

00:02:18.000 --> 00:02:23.000
Well guess what? We showed that x prime times y prime plus z prime does indeed equal ab

00:02:23.000 --> 00:02:27.000
if it was true at the top of the loop--so this condition that we're testing here

00:02:27.000 --> 00:02:32.000
this ab equals xy plus z is maintained through each step of the "while" loop.

00:02:32.000 --> 00:02:36.000
It starts out true but it remains true each time it goes through the "while" loop.

00:02:36.000 --> 00:02:40.000
What we know is that while this code is running each time we go through the "while" loop,

00:02:40.000 --> 00:02:44.000
this condition is always true and eventually, the "while" loop terminates.

00:02:44.000 --> 00:02:48.000
The "while" loop terminates when x equals 0, so what does that mean?

00:02:48.000 --> 00:02:57.000
The xy plus z has to equal ab, but x is 0, so that 0 times y plus z equals to ab. This has to be true.

00:02:57.000 --> 00:03:02.000
Well, 0 times y is 0, so this is actually saying that z has to be equal to ab at the end of the loop.

00:03:02.000 --> 00:03:08.000
Once x reaches 0, z has to equal ab. Keep in mind that's exactly what we return--the value of z.

00:03:08.000 --> 00:03:11.000
The thing that is returned is going to be a times b.

00:03:11.000 --> 00:03:13.000
Let's just take a look at the code again to see that that's what it's doing.

00:03:13.000 --> 00:03:17.000
Each time it goes through, it's decrementing x accumulating the values in z,

00:03:17.000 --> 99:59:59.000
and eventually when x is exhausted, it returns z and it is exactly a times b.

