WEBVTT
Kind: captions
Language: en

00:00:00.090 --> 00:00:02.780
So, we have arrays and we have arraylists, and it's

00:00:02.780 --> 00:00:04.510
a bit of a nuisance that we have both. Because it

00:00:04.510 --> 00:00:06.600
means that we have to make a decision between them

00:00:06.600 --> 00:00:11.010
whenever we want to collect elements. Generally, arraylists are more convenient

00:00:11.010 --> 00:00:13.360
because they can grow and shrink. But there are a

00:00:13.360 --> 00:00:16.570
few reasons why you might want to prefer arrays. First off, the

00:00:16.570 --> 00:00:21.720
syntax for the brackets, is more compact. For example here,

00:00:21.720 --> 00:00:25.230
we assign values one to values two and that's a bit

00:00:25.230 --> 00:00:28.490
easier to read than the equivalent with arraylists, which

00:00:28.490 --> 00:00:30.790
you see over here. Also, if you know exactly what

00:00:30.790 --> 00:00:34.870
values you want in a collection, then arrays give you

00:00:34.870 --> 00:00:38.070
an easier syntax. Here I have a string of workdays,

00:00:38.070 --> 00:00:39.860
and I know exactly that I want these five

00:00:39.860 --> 00:00:42.970
strings. No more, no less. I know what they are.

00:00:42.970 --> 00:00:46.480
Then I can use this handy syntax, to construct an

00:00:46.480 --> 00:00:50.330
array and initialize it right away. With an array list,

00:00:50.330 --> 00:00:53.560
I would have to call the add method five times,

00:00:53.560 --> 00:00:57.510
once for each of these strings. Another disadvantage of array lists

00:00:57.510 --> 00:01:00.130
is that they don't work well with numbers. We have

00:01:00.130 --> 00:01:02.660
never done that so far, but let's say we wanted to

00:01:02.660 --> 00:01:05.690
collect Numbers in an array list, I'd have to do

00:01:05.690 --> 00:01:08.560
something like this, and when you look carefully, you'll notice that

00:01:08.560 --> 00:01:13.300
the double here, has an uppercase D. Normally, when we

00:01:13.300 --> 00:01:15.410
want to have a floating point number, we write double with

00:01:15.410 --> 00:01:18.120
a lowercase d, and you may recall that the

00:01:18.120 --> 00:01:22.340
number types are not classes in Java. But inside, the

00:01:22.340 --> 00:01:25.200
angle brackets here, I must put in a class.

00:01:25.200 --> 00:01:27.950
An array list can only collect objects of a class.

00:01:27.950 --> 00:01:30.740
So for every number time, There is a companion

00:01:30.740 --> 00:01:34.530
class, called the wrapper class. And an object, of a

00:01:34.530 --> 00:01:37.930
wrapper, just has some number inside. If you have

00:01:37.930 --> 00:01:40.426
lots of numbers, say for the sake of the argument

00:01:40.426 --> 00:01:44.390
you have, 1,000,000 values, it takes a lot more

00:01:44.390 --> 00:01:47.430
space to store 1,000,000 wrappers each of which contains

00:01:47.430 --> 00:01:49.350
a number, than it would be to use an

00:01:49.350 --> 00:01:53.000
array That's contains the numbers directly. Most of the

00:01:53.000 --> 00:01:57.020
time, we're not that concerned about efficiency, but when

00:01:57.020 --> 00:01:58.640
you are, and need to collect a lot of

00:01:58.640 --> 00:02:02.850
numbers, definitely use an array. In conclusion, use an

00:02:02.850 --> 00:02:05.610
array list as a rule of thumb, unless you want

00:02:05.610 --> 00:02:10.190
the nice syntax that an array gives you. You having the brackets, having the

00:02:10.190 --> 00:02:13.700
initializers. Or you collect lots of numbers.

00:02:13.700 --> 00:02:15.890
In that case, array lists are quite inefficient.

