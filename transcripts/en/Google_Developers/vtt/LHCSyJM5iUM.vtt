WEBVTT
Kind: captions
Language: en

00:00:04.730 --> 00:00:05.230
Hi.

00:00:05.230 --> 00:00:06.700
I'm Murat Ogat.

00:00:06.700 --> 00:00:08.990
I'm the co-founder and
manager of Kuka Apps, which

00:00:08.990 --> 00:00:10.490
is a mobile
application development

00:00:10.490 --> 00:00:12.250
company in Istanbul, Turkey.

00:00:12.250 --> 00:00:15.230
I would like to talk about
how we use the Google Maps

00:00:15.230 --> 00:00:19.680
and Directions API and Location
Manager in the Android platform

00:00:19.680 --> 00:00:23.870
to create an app which tracks
the user movements to mobilize

00:00:23.870 --> 00:00:28.470
the users and create
awareness about breast cancer.

00:00:28.470 --> 00:00:30.920
By creating an app
that constantly tracks

00:00:30.920 --> 00:00:33.410
the routes of the
users, the main idea

00:00:33.410 --> 00:00:36.460
is to constantly get the
locations of the users,

00:00:36.460 --> 00:00:40.480
and compare it, and calculate
the distance between them.

00:00:40.480 --> 00:00:43.120
So the main problem
we had at the start

00:00:43.120 --> 00:00:46.560
was to get locations of
the users constantly.

00:00:46.560 --> 00:00:49.700
There were two methods
for getting the location.

00:00:49.700 --> 00:00:53.290
One from Wi-Fi and
the other from GPS.

00:00:53.290 --> 00:00:55.610
And we had to experiment
with both of them.

00:00:55.610 --> 00:00:57.520
The Wi-Fi location
can be obtained

00:00:57.520 --> 00:01:01.490
almost instantaneously, but
it can be very inaccurate,

00:01:01.490 --> 00:01:03.470
up to 50 meters sometimes.

00:01:03.470 --> 00:01:05.560
And this was
unacceptable for us,

00:01:05.560 --> 00:01:07.920
because it added
up really quickly,

00:01:07.920 --> 00:01:11.290
and displayed to the user the
wrong estimation or the walking

00:01:11.290 --> 00:01:12.530
distance.

00:01:12.530 --> 00:01:15.710
The GPS location takes
some time to warm up.

00:01:15.710 --> 00:01:17.540
But after a couple
of seconds it can

00:01:17.540 --> 00:01:21.970
give very accurate locations,
up to one meter or two meters.

00:01:21.970 --> 00:01:23.630
That's what we
needed, so we opted

00:01:23.630 --> 00:01:26.090
for using the GPS location.

00:01:26.090 --> 00:01:29.820
Although the points from
GPS could be very accurate,

00:01:29.820 --> 00:01:33.410
even with two meters
of inaccuracy,

00:01:33.410 --> 00:01:36.500
they could be placed on a
building instead of a road.

00:01:36.500 --> 00:01:39.520
And users were generally
walking on a road.

00:01:39.520 --> 00:01:42.320
If you take the road
points here from the GPS

00:01:42.320 --> 00:01:44.220
and display it on
a map, this would

00:01:44.220 --> 00:01:46.780
draw a route that
would go constantly

00:01:46.780 --> 00:01:48.640
inside buildings, and
outside of buildings,

00:01:48.640 --> 00:01:51.410
and sometimes even over the sea.

00:01:51.410 --> 00:01:55.850
So we used the Google Directions
API to solve this problem.

00:01:55.850 --> 00:01:58.100
Basically, what we did
was to get the point

00:01:58.100 --> 00:01:59.830
and not use it as raw data.

00:01:59.830 --> 00:02:02.890
But send it to the
Google Directions API,

00:02:02.890 --> 00:02:05.530
and ask for a route,
starting from that point,

00:02:05.530 --> 00:02:08.690
to a point that we
had measured before.

00:02:08.690 --> 00:02:10.509
What the Google
Directions API returned

00:02:10.509 --> 00:02:13.580
was a route from these points.

00:02:13.580 --> 00:02:15.780
And the first
point of this route

00:02:15.780 --> 00:02:18.910
was actually guaranteed
to be on the road.

00:02:18.910 --> 00:02:22.970
We also had to implement our
own Location Manager that

00:02:22.970 --> 00:02:26.540
filters the data and determines
whether they are usable or not,

00:02:26.540 --> 00:02:28.525
before passing it
to the app engine.

00:02:28.525 --> 00:02:31.130
You can see here that the
function's main purpose

00:02:31.130 --> 00:02:32.972
is to determine whether
the newly received

00:02:32.972 --> 00:02:35.680
location is better than the
previously received one.

00:02:35.680 --> 00:02:38.220
First, if the accuracy
of the received location

00:02:38.220 --> 00:02:42.150
is less than 30 meters, you
just attribute it to a bad GPS

00:02:42.150 --> 00:02:44.330
signal, and ignore it.

00:02:44.330 --> 00:02:47.055
Otherwise we compare it to
the previous measurements.

00:02:47.055 --> 00:02:49.330
If the measurement
is not less accurate,

00:02:49.330 --> 00:02:51.830
or is obtained more
recently, we set it

00:02:51.830 --> 00:02:53.750
as the new location of the user.

00:02:53.750 --> 00:02:57.050
All apps that start services in
the background, and especially

00:02:57.050 --> 00:03:01.354
use GPS data, must be very
aware of their battery usage.

00:03:01.354 --> 00:03:03.020
If this is not done
well, it can quickly

00:03:03.020 --> 00:03:05.650
drain the battery of
the device of the user.

00:03:05.650 --> 00:03:08.080
The app only records the data
points [? of the ?] device

00:03:08.080 --> 00:03:14.060
in the background, and we try to
defer every calculation, or web

00:03:14.060 --> 00:03:16.750
service queries, that
would consume battery

00:03:16.750 --> 00:03:20.580
until the app has been put
to the foreground again.

00:03:20.580 --> 00:03:23.510
The total distance
covered by all the users

00:03:23.510 --> 00:03:25.910
would be set as the
basis for the donation.

00:03:25.910 --> 00:03:29.600
And we didn't want our client
to pay an extra amount of money

00:03:29.600 --> 00:03:34.090
for distance the users
actually didn't walk.

00:03:34.090 --> 00:03:37.860
And we, of course, had some
server side and client side

00:03:37.860 --> 00:03:39.160
checks for that.

00:03:39.160 --> 00:03:42.880
And what we did on
the Android platform

00:03:42.880 --> 00:03:45.970
was based on speed and
location of the user.

00:03:45.970 --> 00:03:49.990
And the speed we could get
from two different sources.

00:03:49.990 --> 00:03:53.265
One is based on location points.

00:03:53.265 --> 00:03:55.270
We got the average speed.

00:03:55.270 --> 00:03:57.700
And also the Location
Manager can give you

00:03:57.700 --> 00:04:02.170
an instantaneous speed, with
all the locations it delivers.

00:04:02.170 --> 00:04:05.500
So we checked the
speed values, and if it

00:04:05.500 --> 00:04:09.065
was above a certain threshold
we stopped the walking

00:04:09.065 --> 00:04:10.230
immediately.

00:04:10.230 --> 00:04:14.730
This prevented the user from
recording bicycle rides,

00:04:14.730 --> 00:04:17.930
or car rides, or it
filtered out the users who

00:04:17.930 --> 00:04:20.310
started walking and then
forgot about the app

00:04:20.310 --> 00:04:21.899
and entered the vehicle.

00:04:21.899 --> 00:04:24.615
And that sums up how we solved
some technical problems, why

00:04:24.615 --> 00:04:28.040
we produced a walking, tracking
app that users GPS data.

00:04:28.040 --> 00:04:29.790
Thank you.

