WEBVTT
Kind: captions
Language: en

00:00:00.020 --> 00:00:01.760
Yeah, we talked about elliptic curves

00:00:01.760 --> 00:00:07.040
And how we can use them as a sort of drop-in replacement for the mathematics in things like diffie-hellman key exchange

00:00:07.360 --> 00:00:10.120
and the digital signature algorithm and so on.

00:00:10.600 --> 00:00:14.240
There's another interesting story that people are asking me to talk about which is the story of the

00:00:14.240 --> 00:00:18.000
Dual EC-DRGB or the Dual Elliptic Curve

00:00:18.360 --> 00:00:21.540
Deterministic Random Bit Generator, which is a pseudo-random

00:00:22.420 --> 00:00:24.560
generator for generating random numbers.

00:00:24.560 --> 00:00:28.640
Most of the time you do programming, you don't need something that's truly random, right.

00:00:28.640 --> 00:00:34.160
If you're writing a computer game, and you need the AI to act in a kind of unpredictable way, a normal

00:00:34.840 --> 00:00:40.379
general mathematical random number generator, but just move some bits around and produces numbers between a minimum and a maximum

00:00:41.110 --> 00:00:42.610
Should be fine

00:00:42.610 --> 00:00:45.239
For cryptography that is not the case for cryptography

00:00:45.550 --> 00:00:50.160
What you need to not be able to do is predict anything to do with what it's going to output it needs to be as

00:00:50.160 --> 00:00:53.759
Random as you can and of course the problem of computers is they aren't random?

00:00:53.760 --> 00:00:55.690
They don't operate in a random way

00:00:55.690 --> 00:01:03.090
So if I produce any mathematical function or any logic circuit that produces something that looks random the problem is it isn't actually

00:01:03.280 --> 00:01:05.280
random

00:01:06.250 --> 00:01:09.900
What a normal operating system will do is combine an

00:01:10.479 --> 00:01:16.798
Actual source of randomness so for example the decay on over radioactive isotope or my mouse clicks which are kind of random

00:01:16.990 --> 00:01:20.519
Or my typing which is sort of the pace of which is a bit odd?

00:01:21.280 --> 00:01:23.280
and

00:01:23.320 --> 00:01:29.939
It'll combine that actual randomness with something that produces a very long stream of random bits for use by

00:01:30.220 --> 00:01:36.329
Applications on a machine like these. Oh these are called cryptographic random number generators. We're not talking about the actual randomness today

00:01:36.329 --> 00:01:39.059
We're talking about the generators for generating these random bits

00:01:39.250 --> 00:01:42.629
but they used all the time if you go onto if you perform a

00:01:43.119 --> 00:01:44.460
Handshake on the Internet

00:01:44.460 --> 00:01:49.409
you're going to be generating a random number used once you're going to be generating the private part of a

00:01:49.479 --> 00:01:56.849
Different key exchange and so on so these need to be unpredictable if I can predict your private diffie-hellman key

00:01:56.890 --> 00:01:59.309
Then I can just get straight in on your conversation

00:01:59.310 --> 00:02:01.270
That's not a good thing the way

00:02:01.270 --> 00:02:05.939
Normally a random number generator like this works is a bit like this so we have some kind of state

00:02:05.939 --> 00:02:11.279
Which we'll call s and that's the current internals for our random number generator, and that is a secret now

00:02:11.280 --> 00:02:17.619
This is seeded based on real random date so for example the keyboard taps or the hard disk

00:02:18.019 --> 00:02:21.399
Latency and things like this on a computer now what we do

00:02:21.400 --> 00:02:27.519
I ask this random number generator to generate some random bits for me, and it passes this state

00:02:28.069 --> 00:02:34.719
Through a function G. Which is a one-way function like a hash function and this produces some seemingly random bits?

00:02:35.090 --> 00:02:41.259
Which I can use in my application for something secure now if I ask it to produce G of s again

00:02:41.260 --> 00:02:43.539
It's going to be the same thing the hash is always the same

00:02:43.540 --> 00:02:45.379
So what happens is at this point?

00:02:45.379 --> 00:02:48.879
We pass s through another function f of s

00:02:49.099 --> 00:02:53.768
And it comes back down here to be s plus 1 and so the state gets updated. This is in general

00:02:53.769 --> 00:02:58.418
What a random number generator will do so we seed the random number generator

00:02:59.000 --> 00:03:03.489
With something actually random and we keep doing that whenever we can, but it doesn't happen all the time

00:03:03.489 --> 00:03:06.518
And then we can update the state and we can generate

00:03:07.099 --> 00:03:10.628
Random bits as required now usually these are different functions

00:03:10.790 --> 00:03:14.679
But often hash functions of what we use the reason is because it has to be one way

00:03:15.079 --> 00:03:20.589
What we absolutely want to make sure is that I can't work out as an attacker what this state is because if I can I?

00:03:20.590 --> 00:03:25.569
Can predict the next random value you're going to be that could be your password, but you're generating on your password manager

00:03:25.790 --> 00:03:32.199
So I've seen this output. This is something you sent in the clear. Let's say a random number or something I've seen it

00:03:32.239 --> 00:03:38.289
Can I calculate what the state is well no because it to do that I have to reverse this one-way function this hash function

00:03:38.569 --> 00:03:40.060
So I can't do it. I'm stuck here

00:03:40.060 --> 00:03:46.389
That's the idea now in the early two-thousands the National Institute for Standards and technology's in the US

00:03:46.699 --> 00:03:51.728
Published a list of four new random number generators the idea being that these would be adopted by

00:03:52.040 --> 00:03:58.359
the kind of key players who are actually building these libraries like open SSL so most of these were kind of standard like like I'm

00:03:58.359 --> 00:04:01.809
Showing you here one of them was based on elliptic curves and was a little bit unusual

00:04:01.939 --> 00:04:08.349
And so it kind of piqued everyone's interest and though I say peak devil and suspicion at the time this was called the dual

00:04:08.510 --> 00:04:12.370
Elliptic curve drbg which I was going to call Julie C from now on otherwise

00:04:12.370 --> 00:04:16.269
I'm going to get very tongue-tied it works very much like this using elliptic curves

00:04:16.669 --> 00:04:21.699
just to remind you when we talked about elliptic curves an elliptic curve looks a bit like this and it has a

00:04:21.769 --> 00:04:27.999
formula of the type Y squared is XQ plus a X plus B

00:04:28.000 --> 00:04:34.000
The idea is that this can be used to perform a one-way function like our hash if we have a point here

00:04:34.189 --> 00:04:37.629
P on our curve. We can produce a multiple of P

00:04:37.629 --> 00:04:42.669
Let's say here. Which is a P, and if I give you that you can't tell me? What a was right?

00:04:42.669 --> 00:04:44.919
That would be solving the elliptic curve discrete log problem

00:04:45.229 --> 00:04:46.370
very very difficult

00:04:46.370 --> 00:04:46.870
right

00:04:46.870 --> 00:04:51.549
That's all we really need to know about the mathematics for this particular one so we could replace these two one-way

00:04:51.620 --> 00:04:58.539
Functions with these elliptic curve functions this point addition and kind of get the same kind of structure going and the and the nice thing

00:04:58.539 --> 00:04:58.960
About it

00:04:58.960 --> 00:05:01.389
If it worked would be that this is kind of mathematically

00:05:01.699 --> 00:05:07.568
Provable in some sense because we know how difficult this problem is we don't know for sure what the difficulty of this hash function is

00:05:07.569 --> 00:05:11.859
Because no one's broken it yet right we all fought sha-1 with unbreakable and then what happen

00:05:12.409 --> 00:05:14.180
All right

00:05:14.180 --> 00:05:20.859
So how does Julie C work all right? So we have our two random variables on our curve right P?

00:05:20.930 --> 00:05:23.650
Thank you. It doesn't matter where they are for this example

00:05:23.719 --> 00:05:27.309
They just points on the curve, so those each have an X and a y-coordinate

00:05:27.680 --> 00:05:32.349
We have a state for a random number generator s. That is not a point on the curve

00:05:32.349 --> 00:05:36.399
It's just a number so what we do we want to use s to generate some random bits

00:05:36.400 --> 00:05:40.509
But then we also need to update the state and their state has to remain secret remember

00:05:40.580 --> 00:05:43.629
So the first thing we do is we calculate s

00:05:44.240 --> 00:05:50.919
P all right, so we're moving P around the curve s x right and that gives us our R is

00:05:50.919 --> 00:05:53.859
Just the x coordinate of this so this is going to be a point on the curve

00:05:53.930 --> 00:05:56.829
we take the x coordinate and that's our number now ah

00:05:57.379 --> 00:06:01.629
It's sort of an intermediate variable we're going to use it to generate our random bits, so we

00:06:01.819 --> 00:06:02.719
calculate our

00:06:02.719 --> 00:06:10.479
Q and we take the x value so our Q X in some sense and we scrap the first 16 bits of that we take

00:06:10.479 --> 00:06:13.688
the least significant bits of that from

00:06:14.389 --> 00:06:15.740
16 to the end

00:06:15.740 --> 00:06:21.759
I'm using sort of Python notation. Why not write what sort of size and in bits is that number? They're going to be approximately

00:06:22.310 --> 00:06:28.689
256 bits because they're modulo upon bits 256 bits and this particular curve now this has been our random number

00:06:29.060 --> 00:06:31.659
Right so so far so good. We've got some random bits out

00:06:32.029 --> 00:06:38.259
We then use our we pass it through P again, so we say our P. Don't doesn't so why and that?

00:06:38.780 --> 00:06:42.399
Produces our new s but by taking just VX again

00:06:42.650 --> 00:06:45.370
So what we've got is the exact same framework that I showed you at the beginning

00:06:45.500 --> 00:06:48.730
We've got a state. We update the state by moving

00:06:48.730 --> 00:06:51.309
It around the elliptic curve a bit and taking just the x coordinate

00:06:51.310 --> 00:06:53.799
But we also can output some bits in principle

00:06:53.800 --> 00:06:55.800
Which is not a terrible idea for a random number generator

00:06:55.850 --> 00:07:01.869
except for actually this is much slower than a normal hash based one by about a thousand times right which

00:07:02.330 --> 00:07:05.199
For you know for someone who really cares about security

00:07:05.270 --> 00:07:08.290
Maybe they would be able to accept that but in fact actually

00:07:08.600 --> 00:07:12.610
there are some other bigger problems with this that mean that the thousand times is really the

00:07:12.890 --> 00:07:15.549
Good part of the deal in SATs in some sense

00:07:15.830 --> 00:07:19.629
Remember that the whole point of this is that if I get this in the clear?

00:07:19.660 --> 00:07:25.480
I can't reverse to find this internal state the reason

00:07:25.480 --> 00:07:30.069
I can't do that is because first of all I don't know what our Q was and even if I did I

00:07:30.740 --> 00:07:37.660
Can't go backwards through this to find R. And then go this way right so we can't reverse that because that is a one-way function

00:07:38.390 --> 00:07:44.229
Remember just because of the elliptic curve problem if I was an attacker how might I attack this well the first thing is to notice

00:07:44.230 --> 00:07:46.230
Is for 16 bits it's not actually very many

00:07:46.490 --> 00:07:52.359
So I can brute-force through the possible our Q's quite quickly to to the 16 operations

00:07:53.000 --> 00:08:00.220
65,000 operations even on a laptop not going to take very long so I go through and I find all the possible

00:08:00.830 --> 00:08:03.249
X's for this random data

00:08:03.250 --> 00:08:05.410
And only some of them are going to adhere properly

00:08:05.570 --> 00:08:09.790
To that elliptic curve formula where we can find an actual Y that goes with them. All right?

00:08:09.790 --> 00:08:13.419
So let's say we go from 65,000 to 10. We have 10 candidates

00:08:13.610 --> 00:08:16.960
That's a real problem, so we found that our Q fat alone

00:08:16.960 --> 00:08:18.130
Wouldn't actually be much of a problem

00:08:18.130 --> 00:08:22.659
So then the question becomes can we reverse this discrete log problem and find our way into this state

00:08:23.060 --> 00:08:25.480
Which would be a huge issue and the answer is?

00:08:25.610 --> 00:08:29.919
If these two a random no we can't do that all right if P

00:08:29.919 --> 00:08:34.718
And Q are truly random we have to brute force it we have to start with as one doesn't work ours, too

00:08:35.030 --> 00:08:37.059
Doesn't work and how many how many of those are there?

00:08:38.570 --> 00:08:40.570
256 bits worth which is

00:08:41.300 --> 00:08:42.410
not

00:08:42.410 --> 00:08:47.229
Yeah, it gets a bit more complicated that not all point to valid on the curve and so on but is a lot of them

00:08:47.270 --> 00:08:51.739
Now what if there was a secret mathematical relationship between would that change anything?

00:08:52.080 --> 00:08:58.999
What if he was actually equal to some multiple of hue like this now it will be very difficult to prove that

00:08:59.160 --> 00:09:03.230
Because if we can't solve that problem we'd have to find that a by brute force ago

00:09:03.230 --> 00:09:05.230
Or there is a relationship between the two brilliant

00:09:05.250 --> 00:09:09.469
Right we don't know but the problem was that when this standard came out

00:09:09.930 --> 00:09:14.060
It was implied that the NSA were the ones that generated these points

00:09:14.060 --> 00:09:18.380
And they did not explain how they did it you remember the video on nothing up my sleeve numbers

00:09:18.380 --> 00:09:19.190
Let's pick a number at random

00:09:19.190 --> 00:09:25.400
I don't know 24, and then did some trick with it you think well that's great but clearly 24 wasn't random

00:09:25.700 --> 00:09:29.780
There's something up the sleeve. We're not sure about it. If this is true. If there's a secret e

00:09:30.360 --> 00:09:36.890
Which we can multiply by Q to get to P, then? Here's what happens? We have our Q because we've derived it from bith here

00:09:37.410 --> 00:09:39.530
All right, we can calculate e

00:09:40.110 --> 00:09:45.979
Our secret e times our cue, it's associative so it's actually our times EQ

00:09:46.560 --> 00:09:48.619
EQ is P so we've got R

00:09:49.170 --> 00:09:52.909
Of P which is this and we've calculated the internal state?

00:09:53.400 --> 00:09:59.449
Right this should be impossible to go backwards from here to get to here. It's trivial if we know this secretly

00:10:00.060 --> 00:10:03.530
Right which is kind of worrying? What's more interesting about this

00:10:03.530 --> 00:10:09.169
It's not so much the mathematical backdoor, but could exist it's wherever it exists. No one knows and

00:10:10.050 --> 00:10:14.510
What happened when this NIST standard was announced so when it was announced?

00:10:15.150 --> 00:10:20.959
Cryptographers said well first of all this is not enough bits. You're cutting off here right. There's a slight bias in the output

00:10:20.960 --> 00:10:25.549
We don't like it. It doesn't look random enough. That's a problem. It's a thousand times slower. That's a problem

00:10:25.580 --> 00:10:29.719
All right, this didn't worry too much about this. They said it's fine. Why we're gonna put it in

00:10:30.240 --> 00:10:31.620
then in

00:10:31.620 --> 00:10:36.289
2007 dan sumo and Niels Ferguson from Microsoft did a short talk

00:10:37.050 --> 00:10:40.789
Explaining that this backdoor could exist you know that should have killed this off straight away

00:10:40.950 --> 00:10:46.009
But the problem was but it was an agreed standard in this it was starting to be implemented in some of these libraries

00:10:46.010 --> 00:10:49.789
And that's deeply concerning. We don't know whether this exists

00:10:50.280 --> 00:10:51.680
Hypothetically it could all right

00:10:51.680 --> 00:10:55.250
But no one can find this e so how can we know but then the Snowden leaks came along?

00:10:55.250 --> 00:11:02.000
And it looks even more suspicious money was changing hands between the NSA in companies to have them install this as their star

00:11:02.250 --> 00:11:05.639
For a number generation. That's deeply suspicious and so

00:11:06.820 --> 00:11:13.080
The strong opinion should he be consensus of the cryptographic community is that this is indeed a backdoor?

00:11:13.510 --> 00:11:16.590
someone knows that a but it isn't me and

00:11:18.580 --> 00:11:22.439
But we don't know for sure, but it's a really interesting issue because

00:11:23.560 --> 00:11:24.640
There could be a backdoor

00:11:24.640 --> 00:11:28.830
But they might not now of course when you're using this you can generate your own P&amp;Q and

00:11:29.050 --> 00:11:32.129
Then it's not it hasn't got a backdoor. Well if you put it in yourself

00:11:33.760 --> 00:11:38.700
But the interesting thing was in my list standard they said you have to use this P, and Q if you don't we won't

00:11:39.430 --> 00:11:43.589
Give you a fits accreditation for being extra secure which is also suspicious

00:11:43.840 --> 00:11:47.189
So it's a really interesting read if you read the history of this

00:11:48.070 --> 00:11:52.080
People were coming up with problems. They were publishing papers saying that's not right and

00:11:52.750 --> 00:11:58.380
They were being ignored and the standard was put through anyway, which is you know very interesting?

00:11:59.530 --> 00:12:01.530
if I was on stage I

00:12:01.630 --> 00:12:05.730
Don't do magic right, but if I was on stage and I said to you let's pick a number at random

00:12:05.730 --> 00:12:06.900
I don't know 24

00:12:06.900 --> 00:12:10.620
And then did some trick with it you think well that's great but clearly

00:12:10.690 --> 00:12:13.739
24 wasn't mathematics to do with lines and the tangent of this curve

00:12:13.740 --> 00:12:17.969
It's actually not very complicated the point is of what we're doing is by multiplying G

00:12:18.100 --> 00:12:23.129
By both numbers or adding it to itself this point addition. We're moving around this curve

