WEBVTT
Kind: captions
Language: en

00:00:00.107 --> 00:00:02.190
DENNIS KHVOSTIONOV: My
name is Dennis Khvostionov.

00:00:02.190 --> 00:00:04.940
I'm the Chief Technology
Officer of DGLogik.

00:00:04.940 --> 00:00:08.020
And the presentation, as you
can see, is titled Dart for IOT.

00:00:08.020 --> 00:00:10.246
I think everyone
here at this point

00:00:10.246 --> 00:00:11.370
already knows what Dart is.

00:00:11.370 --> 00:00:14.480
So I'm going to try
to tell you about IOT

00:00:14.480 --> 00:00:17.600
and how we are applying Dart
to solve really complicated use

00:00:17.600 --> 00:00:18.100
cases.

00:00:20.730 --> 00:00:23.660
First, a little
definition from wiki.

00:00:23.660 --> 00:00:25.910
So the internet of
things is defined

00:00:25.910 --> 00:00:27.560
as uniquely
identifiable objects and

00:00:27.560 --> 00:00:29.750
their virtual representations.

00:00:29.750 --> 00:00:33.870
Now, when these things and
objects all swarm and connect,

00:00:33.870 --> 00:00:35.790
now we start to get
the interesting use

00:00:35.790 --> 00:00:37.810
cases that can be achieved.

00:00:37.810 --> 00:00:41.755
But IOT as it stands
really talks about things.

00:00:41.755 --> 00:00:44.130
So if we look at things, we
actually have a few over here

00:00:44.130 --> 00:00:45.750
that we're going
to be looking at.

00:00:45.750 --> 00:00:47.950
These things are devices
that are typically

00:00:47.950 --> 00:00:50.020
outputing telemetry data.

00:00:50.020 --> 00:00:52.080
And by the standard
definition of IOT,

00:00:52.080 --> 00:00:56.620
if we take these devices and we
connect them to the internet,

00:00:56.620 --> 00:01:01.300
they become an internet enabled
thing-- hence, the acronym IOT.

00:01:01.300 --> 00:01:04.050
What I'm actually here
to talk about is IOE.

00:01:04.050 --> 00:01:08.150
IOE is something that actually
now takes things, services,

00:01:08.150 --> 00:01:12.780
people, processes, and data and
these other devices and things

00:01:12.780 --> 00:01:14.880
and connects them together
to actually provide

00:01:14.880 --> 00:01:15.800
even more value.

00:01:15.800 --> 00:01:17.840
So when you look at
cities of the future

00:01:17.840 --> 00:01:20.090
and all the management
systems that

00:01:20.090 --> 00:01:22.710
are going to be running these
cities or islands-- as we'll

00:01:22.710 --> 00:01:28.720
show you-- this is what IOE
is-- internet of everything.

00:01:28.720 --> 00:01:32.710
Next, I'd like to show
you the little things.

00:01:35.760 --> 00:01:40.680
So you can see here we
have a little Intel Edison.

00:01:40.680 --> 00:01:46.070
We have a little robot
that's connected.

00:01:46.070 --> 00:02:03.070
And we have an interface that
was developed to control them.

00:02:03.070 --> 00:02:04.990
So what I'll be
talking about today

00:02:04.990 --> 00:02:09.509
is all the technology that
we built utilizing Dart.

00:02:09.509 --> 00:02:12.070
As you can see here, this
is actually an application

00:02:12.070 --> 00:02:13.410
that was fully built in Dart.

00:02:13.410 --> 00:02:15.961
It's actually
deployed as Dart2JS.

00:02:15.961 --> 00:02:17.960
You can see all the things
that we brought today

00:02:17.960 --> 00:02:20.020
and how they're
all interconnected.

00:02:20.020 --> 00:02:23.570
For example, I can use my phone
as a sensory input device,

00:02:23.570 --> 00:02:26.380
and you can start to see
that I'm rotating the phone

00:02:26.380 --> 00:02:29.940
and this is all in real time.

00:02:29.940 --> 00:02:32.880
You can see the little
Philips Hue light bulbs

00:02:32.880 --> 00:02:37.170
that I have right in front
of me changing their colors.

00:02:37.170 --> 00:02:39.295
Of course, we can do the
same thing with the robot.

00:02:46.800 --> 00:02:49.210
But the robot can talk.

00:02:52.590 --> 00:02:55.300
We have an Android
phone here that's

00:02:55.300 --> 00:02:56.970
running a piece of software.

00:02:56.970 --> 00:02:58.710
And we can make this
Android phone talk.

00:03:06.561 --> 00:03:07.060
Sometimes.

00:03:10.180 --> 00:03:13.630
So all of these things
that are connected together

00:03:13.630 --> 00:03:16.100
is what we are going
to be talking about.

00:03:16.100 --> 00:03:18.320
So I'm going to switch
back to the presentation

00:03:18.320 --> 00:03:26.160
to introduce a little
bit about the technology

00:03:26.160 --> 00:03:27.910
and how it was developed.

00:03:27.910 --> 00:03:30.190
So let me start with
what our company.

00:03:30.190 --> 00:03:33.520
So the company is called DGLogik
and we were founded in 2007.

00:03:33.520 --> 00:03:37.907
We set out to create technology
to help build applications

00:03:37.907 --> 00:03:39.490
without necessarily
being a developer.

00:03:39.490 --> 00:03:43.120
So we're utilizing Dart to
build these applications

00:03:43.120 --> 00:03:45.280
as I will later show you.

00:03:45.280 --> 00:03:49.660
Our core business is software
for the internet of everything.

00:03:49.660 --> 00:03:52.070
Today, we're announcing
an open source effort

00:03:52.070 --> 00:03:54.510
for application enablement
of internet of everything

00:03:54.510 --> 00:03:57.290
called distributed
services architecture.

00:03:57.290 --> 00:04:00.330
And another piece of software
that we developed-- this

00:04:00.330 --> 00:04:02.980
is our commercial product--
this is called DGLux.

00:04:02.980 --> 00:04:05.920
And this is what is used to
develop applications that

00:04:05.920 --> 00:04:08.840
are linking all of these
real time sensors and pieces

00:04:08.840 --> 00:04:10.579
of information together.

00:04:10.579 --> 00:04:12.120
The products and
everything I'm going

00:04:12.120 --> 00:04:13.630
to show be showing
you today, these

00:04:13.630 --> 00:04:15.140
are not proof of concepts.

00:04:15.140 --> 00:04:18.640
The demo was put together just
to illustrate the concepts that

00:04:18.640 --> 00:04:22.000
are already being deployed
and already used commercially

00:04:22.000 --> 00:04:23.304
by our customers.

00:04:23.304 --> 00:04:24.720
And we have a very
strong presence

00:04:24.720 --> 00:04:26.430
in building automation
and business

00:04:26.430 --> 00:04:28.220
intelligence and visualization.

00:04:28.220 --> 00:04:32.320
So all this technology has
been vetted with our customers.

00:04:36.110 --> 00:04:39.360
Now, these deployments
are global.

00:04:39.360 --> 00:04:42.780
We've utilized Dart to create
a technology and a solution,

00:04:42.780 --> 00:04:45.395
and we're able to train
other companies how

00:04:45.395 --> 00:04:46.270
to use a solution.

00:04:46.270 --> 00:04:49.880
And these companies are
implementing the use cases

00:04:49.880 --> 00:04:50.790
that they see fit.

00:04:50.790 --> 00:04:53.840
For example, there
are container ships

00:04:53.840 --> 00:04:55.970
that are being monitored
by the software I'll

00:04:55.970 --> 00:04:57.940
be showing you-- all
the rope tensioners

00:04:57.940 --> 00:05:00.061
and LIDARs, et cetera.

00:05:00.061 --> 00:05:02.060
And you can see the
different types of use cases

00:05:02.060 --> 00:05:03.960
that have been
developed and where

00:05:03.960 --> 00:05:05.900
the companies that
implemented those use cases

00:05:05.900 --> 00:05:08.191
are located worldwide-- these
are all our distributors.

00:05:10.500 --> 00:05:12.540
Now to the fun stuff.

00:05:12.540 --> 00:05:13.980
This is DGLux.

00:05:13.980 --> 00:05:16.930
It stands for the
DGLogik User Experience.

00:05:16.930 --> 00:05:20.240
You'll notice it's a
version of DGLux 5.

00:05:20.240 --> 00:05:22.190
It's because it's HTML5.

00:05:22.190 --> 00:05:24.360
The prior version was DGLux 2.5.

00:05:24.360 --> 00:05:26.100
So we kind of made
a little jump.

00:05:26.100 --> 00:05:27.770
That version was made in Flex.

00:05:27.770 --> 00:05:29.930
We used to love Flex.

00:05:29.930 --> 00:05:31.820
As a technology,
the productivity

00:05:31.820 --> 00:05:34.170
that it allowed our
developers to have,

00:05:34.170 --> 00:05:38.890
and when we started
investigating moving to HTML5,

00:05:38.890 --> 00:05:43.590
we looked at many
different frameworks

00:05:43.590 --> 00:05:45.840
because that's what
they are for JavaScript.

00:05:45.840 --> 00:05:49.820
And one framework would
do something for us,

00:05:49.820 --> 00:05:51.470
but there will
always be some gaps.

00:05:51.470 --> 00:05:53.370
And luckily, we found Dart.

00:05:53.370 --> 00:05:55.610
It was definitely pre-release.

00:05:55.610 --> 00:06:01.500
But we deployed as
a DGLux 5 release

00:06:01.500 --> 00:06:03.480
when Dart was still 0.8 version.

00:06:03.480 --> 00:06:05.520
So we didn't even wait
for Dart to become 1.0

00:06:05.520 --> 00:06:09.900
to deploy the first commercial
deployment of DGLux 5.

00:06:09.900 --> 00:06:11.260
What is this application?

00:06:11.260 --> 00:06:13.070
So you can see in
the screenshot,

00:06:13.070 --> 00:06:14.900
it looks like a
design environment.

00:06:14.900 --> 00:06:16.960
Well, DGLux, it's a
what you see is what you

00:06:16.960 --> 00:06:19.090
get builder for applications.

00:06:19.090 --> 00:06:21.140
You do not need
to be a developer

00:06:21.140 --> 00:06:24.220
to build any kind of
HTML5 whether it's

00:06:24.220 --> 00:06:28.710
application or a dashboard or
some sort of interactive form.

00:06:28.710 --> 00:06:31.210
Really anything that you
can see yourself building

00:06:31.210 --> 00:06:33.580
that is hosted in
the web browser that

00:06:33.580 --> 00:06:36.270
will run on mobile
as well as desktop

00:06:36.270 --> 00:06:37.935
you can build this in DGLux.

00:06:37.935 --> 00:06:39.810
The little screen shot
you see in the bottom,

00:06:39.810 --> 00:06:40.680
this is data flow.

00:06:40.680 --> 00:06:43.750
Because you can build
an application just

00:06:43.750 --> 00:06:46.520
to be a visual application.

00:06:46.520 --> 00:06:50.000
You need to create custom logic.

00:06:50.000 --> 00:06:52.420
If I click here but
some sort of drop

00:06:52.420 --> 00:06:55.670
down has a value [INAUDIBLE],
something else needs to happen.

00:06:55.670 --> 00:06:57.670
So this is the data
full logic editor

00:06:57.670 --> 00:07:00.080
that is built into DGLux 5.

00:07:00.080 --> 00:07:01.830
Of course, there's a
block for scripting.

00:07:01.830 --> 00:07:07.260
And you can use script to
make custom functionality.

00:07:07.260 --> 00:07:10.080
But most the time
we find we can just

00:07:10.080 --> 00:07:11.830
use the blocks from
the library to achieve

00:07:11.830 --> 00:07:13.760
any type of logic we want.

00:07:13.760 --> 00:07:16.480
This application itself
is more than 200,000 lines

00:07:16.480 --> 00:07:19.090
of Dart code.

00:07:19.090 --> 00:07:21.964
One of the things that we love
the most-- well, not the most--

00:07:21.964 --> 00:07:23.630
but one of the things
we love about Dart

00:07:23.630 --> 00:07:27.815
is the rapid testing,
rapid debugging.

00:07:27.815 --> 00:07:29.940
We're able to press play
and we can see the results

00:07:29.940 --> 00:07:31.790
immediately-- right away.

00:07:31.790 --> 00:07:35.740
This application has been
in production since 2013.

00:07:35.740 --> 00:07:38.580
There's thousands of
deployments of this globally.

00:07:38.580 --> 00:07:41.920
And the bugs that we see that
are coming back to us-- well,

00:07:41.920 --> 00:07:42.950
there are bugs.

00:07:42.950 --> 00:07:45.390
You can't really blame
Dart for anything,

00:07:45.390 --> 00:07:46.370
for any of those bugs.

00:07:46.370 --> 00:07:49.240
And the way it's
deployed is Dart 2JS

00:07:49.240 --> 00:07:52.330
has never really seen
any issues with that.

00:07:52.330 --> 00:07:54.210
In the beginning, before
actually using Dart,

00:07:54.210 --> 00:07:56.320
we thought that we
would develop in Dart

00:07:56.320 --> 00:07:58.210
and we would compile
to JavaScript

00:07:58.210 --> 00:08:00.830
and we would have some sort
of [? computability ?] things.

00:08:00.830 --> 00:08:02.660
But we've been saved from that.

00:08:02.660 --> 00:08:04.940
So that's not an
issue for us at all.

00:08:04.940 --> 00:08:07.190
Next, I'd like to
show you some projects

00:08:07.190 --> 00:08:09.460
that were actually
created using this tool

00:08:09.460 --> 00:08:11.410
and that are actually live.

00:08:11.410 --> 00:08:13.850
This is actually the data
center, as you can see.

00:08:13.850 --> 00:08:18.180
And this is made for an iPad.

00:08:18.180 --> 00:08:20.027
The heat map is
showing 700 data points

00:08:20.027 --> 00:08:22.610
that are all rapidly updating--
showing all the different rack

00:08:22.610 --> 00:08:23.586
temperatures inside.

00:08:23.586 --> 00:08:24.960
And then you can
see on the right

00:08:24.960 --> 00:08:28.100
a little bit of analytics.

00:08:28.100 --> 00:08:30.310
This is a smart island.

00:08:30.310 --> 00:08:33.539
DGLux was used to create
the interface for it.

00:08:33.539 --> 00:08:35.119
It's solar power, wind turbines.

00:08:39.440 --> 00:08:42.159
This is a social media center.

00:08:42.159 --> 00:08:44.030
So if you go to
conferences, you might

00:08:44.030 --> 00:08:46.890
see certain kiosks
that are showing you

00:08:46.890 --> 00:08:49.410
real-time tweets
and all the event

00:08:49.410 --> 00:08:51.900
information and statistics.

00:08:51.900 --> 00:08:54.460
DGLux is also used
to power these.

00:08:54.460 --> 00:08:59.190
And again, these actually run
on embedded webkit devices.

00:08:59.190 --> 00:09:01.170
Actually, these
screens are powered

00:09:01.170 --> 00:09:05.340
by devices that are
using, as I mentioned,

00:09:05.340 --> 00:09:07.420
an embedded version
of webkit from QT.

00:09:07.420 --> 00:09:08.430
So it's a QT web kit.

00:09:11.070 --> 00:09:15.240
And of course, smart cities
utilizing other Google products

00:09:15.240 --> 00:09:18.300
such as Google Maps allow
a really nice interaction

00:09:18.300 --> 00:09:22.920
and show a list of views of
where all the data is located,

00:09:22.920 --> 00:09:24.775
as well as analyzing
all that information.

00:09:30.620 --> 00:09:33.790
Now, I'd like to
introduce you to DSA.

00:09:33.790 --> 00:09:37.510
I think the logo does it justice
to explain really what it does.

00:09:37.510 --> 00:09:40.390
So DSA solves IOT.

00:09:40.390 --> 00:09:44.110
And what do I mean
by solving IOT?

00:09:44.110 --> 00:09:48.300
When I said in the beginning
when IOT is considered,

00:09:48.300 --> 00:09:50.175
you're looking at a
device and this device

00:09:50.175 --> 00:09:52.840
is connected to the
cloud or the internet.

00:09:52.840 --> 00:09:54.740
In my mind, that this
is not necessarily

00:09:54.740 --> 00:09:58.440
what IOT and IOE is because in
real production deployments,

00:09:58.440 --> 00:10:00.684
you always have
other networks-- they

00:10:00.684 --> 00:10:02.100
need to connect
to other networks.

00:10:02.100 --> 00:10:03.475
So it's never a
direct connection

00:10:03.475 --> 00:10:04.749
from a device to the cloud.

00:10:04.749 --> 00:10:06.290
Even if you look at
your home, you're

00:10:06.290 --> 00:10:08.580
going to have all
your home devices.

00:10:08.580 --> 00:10:10.150
Right now, it is transparent.

00:10:10.150 --> 00:10:12.706
So most of the connected
devices for your home,

00:10:12.706 --> 00:10:15.080
you plug in your router and
they have a direct connection

00:10:15.080 --> 00:10:17.480
to the internet and they're
talking to the cloud.

00:10:17.480 --> 00:10:22.220
However, in the future,
what we're going to see

00:10:22.220 --> 00:10:23.980
is a hub in your house.

00:10:23.980 --> 00:10:26.154
All the devices are connected
to some sort of hub.

00:10:26.154 --> 00:10:28.070
This hub might be connected
to other hubs that

00:10:28.070 --> 00:10:29.270
are in your neighborhood.

00:10:29.270 --> 00:10:32.400
Because when everything is
going to be connected together--

00:10:32.400 --> 00:10:35.290
which is what internet
of things and everything

00:10:35.290 --> 00:10:39.190
implies-- that means all of
these devices in your home

00:10:39.190 --> 00:10:43.110
and let's say the light pole
outside as well as the traffic

00:10:43.110 --> 00:10:45.600
signal because it knows that
you just left your house,

00:10:45.600 --> 00:10:47.320
all of these things
will be connected.

00:10:47.320 --> 00:10:49.530
And in order to
properly connect them,

00:10:49.530 --> 00:10:52.840
it will be connected as
networks of networks together.

00:10:56.000 --> 00:10:59.040
DSA is an open source platform.

00:10:59.040 --> 00:11:04.040
DSA was really created for us--
that's a little selfish reason

00:11:04.040 --> 00:11:05.530
initially when we started it.

00:11:05.530 --> 00:11:08.180
Because DGLux, the visualization
technologies that I showed you

00:11:08.180 --> 00:11:10.220
that is used to
build applications,

00:11:10.220 --> 00:11:13.270
we will sell more of it when
there is more data available.

00:11:13.270 --> 00:11:16.160
That is a reason why we
made DSA open source is

00:11:16.160 --> 00:11:18.010
that we want the
community, we want

00:11:18.010 --> 00:11:20.350
everyone to build
applications that

00:11:20.350 --> 00:11:23.830
are sitting a little higher
level that are utilizing all

00:11:23.830 --> 00:11:27.410
the connectivity and all of
the device profiles and device

00:11:27.410 --> 00:11:29.500
attractions that DSA provides.

00:11:29.500 --> 00:11:34.200
So you can think of DSA
as taking all of the code

00:11:34.200 --> 00:11:37.720
libraries that are available
for the interoperability

00:11:37.720 --> 00:11:40.130
of the different devices
and joining them together

00:11:40.130 --> 00:11:42.260
into something that is
normalized-- something that

00:11:42.260 --> 00:11:44.050
can work together.

00:11:44.050 --> 00:11:47.310
So your Philips Hue knows
about maybe a Nest thermostat.

00:11:50.260 --> 00:11:53.690
To get into a little more detail
and how Dart was utilized,

00:11:53.690 --> 00:11:56.590
here's a logical diagram.

00:11:56.590 --> 00:11:58.980
As you can see, we're going
to start top to bottom.

00:11:58.980 --> 00:12:01.662
So whenever we talk about
a device and the devices

00:12:01.662 --> 00:12:03.870
that I have here, you're
always going to start, well,

00:12:03.870 --> 00:12:06.780
how do I talk to the
end device specifically?

00:12:06.780 --> 00:12:09.990
Some devices will implement
an HTP based protocol.

00:12:09.990 --> 00:12:17.470
Some devices will implement
Bluetooth LE or Bluetooth 4.0.

00:12:17.470 --> 00:12:19.130
At the end of the
day, you can't ever

00:12:19.130 --> 00:12:21.560
predict really
what your end point

00:12:21.560 --> 00:12:24.280
and what your edge
device will use.

00:12:24.280 --> 00:12:26.740
In industrial
automation, we're still

00:12:26.740 --> 00:12:31.000
using RS485
communications, which is

00:12:31.000 --> 00:12:34.590
really slow serial protocols.

00:12:34.590 --> 00:12:37.750
So what we've done is
we've abstracted this logic

00:12:37.750 --> 00:12:40.770
and we're trying to think
about it as a black box.

00:12:40.770 --> 00:12:42.490
And we call them DS links.

00:12:42.490 --> 00:12:45.570
So if I create an
implementation for Philips Hue,

00:12:45.570 --> 00:12:48.270
I'm going to create a
Phillips Hue DS link.

00:12:48.270 --> 00:12:52.160
And that's what you can see
here that's running here.

00:12:52.160 --> 00:12:55.940
All of these links are
connecting to a broker.

00:12:55.940 --> 00:12:57.760
So you can have
multiple links that are

00:12:57.760 --> 00:12:58.720
going to connect to a broker.

00:12:58.720 --> 00:12:59.960
And what that's going
to do is that's going

00:12:59.960 --> 00:13:02.470
to allow the links that
to connected to the broker

00:13:02.470 --> 00:13:05.700
with proper permissions to talk
to other links that are also

00:13:05.700 --> 00:13:07.000
connected to the broker.

00:13:07.000 --> 00:13:11.380
So you're now able to have
devices that are communicating

00:13:11.380 --> 00:13:13.580
devices or things or
services-- communicating

00:13:13.580 --> 00:13:17.580
to each other-- through the
central fuel broker node.

00:13:17.580 --> 00:13:23.040
Because we're normalizing the
proprietary protocol of Philips

00:13:23.040 --> 00:13:25.850
Hue or the MiP robot or
whatever else is connected,

00:13:25.850 --> 00:13:28.410
we're normalizing that
right on the DS link.

00:13:28.410 --> 00:13:31.479
We can always treat a
DS link as a black box.

00:13:31.479 --> 00:13:33.270
And all of the data
that's coming out of it

00:13:33.270 --> 00:13:36.130
is called mode API.

00:13:36.130 --> 00:13:39.550
So brokers themselves can also
be connected to other brokers.

00:13:39.550 --> 00:13:42.590
So now you can see how we can
form this graph of networks

00:13:42.590 --> 00:13:44.770
and graphs of connected things.

00:13:44.770 --> 00:13:47.750
And if you want to build an
application, which I really

00:13:47.750 --> 00:13:50.580
hope that you do because the
whole point of open source

00:13:50.580 --> 00:13:54.390
in DSA is to drive the community
effort so that everyone can

00:13:54.390 --> 00:13:58.480
contribute new services, new
functionality, new protocol

00:13:58.480 --> 00:14:02.310
converters to this effort.

00:14:02.310 --> 00:14:04.360
The types of links
that are possible

00:14:04.360 --> 00:14:07.920
include-- as you can see here,
of course-- device drivers.

00:14:07.920 --> 00:14:09.770
But also things like historians.

00:14:09.770 --> 00:14:12.300
So once all of this
activity is happening,

00:14:12.300 --> 00:14:15.401
maybe I want to start logging
this data into a Hadoop

00:14:15.401 --> 00:14:15.900
database.

00:14:15.900 --> 00:14:18.567
So that's also a link because it
has access to everything that's

00:14:18.567 --> 00:14:19.066
going on.

00:14:19.066 --> 00:14:20.750
A broker, you can
just plug this link in

00:14:20.750 --> 00:14:22.370
and it'll start
logging all the data

00:14:22.370 --> 00:14:24.560
and exposing it to
whoever now wants

00:14:24.560 --> 00:14:26.380
to get this historical data.

00:14:26.380 --> 00:14:29.700
If you would like to do
analytics or machine learning,

00:14:29.700 --> 00:14:31.260
there's really
great projects out

00:14:31.260 --> 00:14:34.160
there look Apache
Spark and the machine

00:14:34.160 --> 00:14:36.840
learning library
that's included there.

00:14:36.840 --> 00:14:39.920
So these are the types of
links so you can create.

00:14:39.920 --> 00:14:41.645
DGLux itself, the
user experience

00:14:41.645 --> 00:14:43.787
I showed you, that
is also a link.

00:14:43.787 --> 00:14:45.370
So that is also
connected to a broker.

00:14:45.370 --> 00:14:47.585
And that just gets all the
data that is on the broker

00:14:47.585 --> 00:14:50.400
and you're able to browse
it, as I'll show you.

00:14:50.400 --> 00:14:54.810
The way DSA is created is
the reference implementation

00:14:54.810 --> 00:14:56.252
is 100% ours.

00:14:56.252 --> 00:14:58.940
Underneath it's using
WebSockets with HTTP

00:14:58.940 --> 00:15:01.310
fallback for communications.

00:15:01.310 --> 00:15:03.010
We've seen really
good performance.

00:15:03.010 --> 00:15:04.760
I don't know if you saw that
when I was spinning my phone,

00:15:04.760 --> 00:15:06.190
it was really, really quick.

00:15:06.190 --> 00:15:08.150
And that actually
transfers all the way

00:15:08.150 --> 00:15:11.690
down to the edge of
the network as well.

00:15:11.690 --> 00:15:14.630
We also have currently
ported the Dart SDK

00:15:14.630 --> 00:15:16.660
into Java and Node.js.

00:15:16.660 --> 00:15:20.447
So even in this demo, we
have Node.js DS links,

00:15:20.447 --> 00:15:22.030
there's Java DS
links, but they're all

00:15:22.030 --> 00:15:23.220
connected into the broker.

00:15:23.220 --> 00:15:26.912
So now we have this language
interoperability happening.

00:15:26.912 --> 00:15:29.370
On our roadmap-- and we really
hope community could help us

00:15:29.370 --> 00:15:32.980
with this-- is to
just make SDKs for DSA

00:15:32.980 --> 00:15:34.514
in all the various languages.

00:15:34.514 --> 00:15:36.680
Because what we believe is
that there is an existing

00:15:36.680 --> 00:15:39.830
software out there already
created in some language

00:15:39.830 --> 00:15:43.450
that we want to utilize as part
of this internet of everything.

00:15:43.450 --> 00:15:46.750
So if there is a SDK that
is in that native language,

00:15:46.750 --> 00:15:49.760
it's much easier to plug
this connected functionality

00:15:49.760 --> 00:15:51.380
into that existing
piece of software.

00:15:55.160 --> 00:15:59.150
Now let's look at this demo
again that I was showing you.

00:15:59.150 --> 00:16:03.030
And let's look at it
in a little more detail

00:16:03.030 --> 00:16:06.748
from the point of view of what
I just to explained to you.

00:16:19.710 --> 00:16:21.512
Sorry about that.

00:16:21.512 --> 00:16:22.720
That's coming a little later.

00:16:28.580 --> 00:16:34.190
So we have the Intel Edison that
I showed a picture of earlier.

00:16:34.190 --> 00:16:37.050
And this is a very
small embedded device.

00:16:37.050 --> 00:16:39.562
And I'll actually pause
for a couple of seconds

00:16:39.562 --> 00:16:42.020
while I talk about it and show
it to you on the big screen.

00:16:50.400 --> 00:16:53.180
So all the connected
devices are actually

00:16:53.180 --> 00:16:55.580
running from this
little Intel Edison.

00:16:55.580 --> 00:16:59.050
It is running the Dart DM--
so it's running the broker.

00:16:59.050 --> 00:17:01.340
It's running a Dart
web server, which

00:17:01.340 --> 00:17:04.319
is where are you see
DGLux being served from.

00:17:04.319 --> 00:17:07.020
It's also hosting DGLux, so
it's hosting all the graphics.

00:17:07.020 --> 00:17:08.859
It's hosting the
development environment,

00:17:08.859 --> 00:17:12.470
so you can actually build
and visualize everything.

00:17:12.470 --> 00:17:17.410
It's also running a little
node to show interoperability

00:17:17.410 --> 00:17:19.560
with other languages--
for communicating,

00:17:19.560 --> 00:17:22.510
let's say, with the
Philips Hue light.

00:17:22.510 --> 00:17:24.619
And this Intel
Edison is actually

00:17:24.619 --> 00:17:27.980
connected to another gateway.

00:17:31.180 --> 00:17:33.430
And you can see here in
my interactive diagram

00:17:33.430 --> 00:17:36.130
this little Dell
Industrial Gateway.

00:17:36.130 --> 00:17:37.810
Now, this Dell
Industrial Gateway,

00:17:37.810 --> 00:17:39.690
that's running the
Dart broker as well--

00:17:39.690 --> 00:17:42.920
and if you're curious about
the operating systems,

00:17:42.920 --> 00:17:47.200
the Edison is running ioctl
Linux and it's really stock.

00:17:47.200 --> 00:17:50.120
You can install everything.

00:17:50.120 --> 00:17:52.630
If you buy an Edison, you
don't even need to Flash it.

00:17:52.630 --> 00:17:54.160
So it's going to work.

00:17:54.160 --> 00:17:56.790
And the Dell Gateway
is running Ubuntu.

00:17:56.790 --> 00:17:59.090
Now, that's connecting
to our cloud.

00:17:59.090 --> 00:18:03.610
Our cloud is purposely
under-powered micro instance

00:18:03.610 --> 00:18:07.100
on Amazon EC2 because
what we're trying

00:18:07.100 --> 00:18:09.870
to do is really show
connectivity and performance,

00:18:09.870 --> 00:18:12.152
and when you're
dealing with billions

00:18:12.152 --> 00:18:13.610
and billions of
devices, you really

00:18:13.610 --> 00:18:16.910
want to develop on very,
very small platforms.

00:18:16.910 --> 00:18:21.420
It's much easier to
use more CPU than less.

00:18:21.420 --> 00:18:25.630
So all of our development has
really taken that into account.

00:18:25.630 --> 00:18:31.120
So the Android phone that
I have here is actually

00:18:31.120 --> 00:18:33.080
connected to this cloud.

00:18:33.080 --> 00:18:37.080
The link that I'm
running on my phone

00:18:37.080 --> 00:18:41.330
itself, that's also
connected to the cloud.

00:18:41.330 --> 00:18:46.470
Now, if I jump back
to this screen,

00:18:46.470 --> 00:18:49.080
you'll actually see that it's
actually a little polymer

00:18:49.080 --> 00:18:55.630
application right
here that is created

00:18:55.630 --> 00:19:00.680
and it's using the HTML5
standard APIs to just pick up

00:19:00.680 --> 00:19:02.990
all the [INAUDIBLE] and
all the different data

00:19:02.990 --> 00:19:05.120
and send it over to DSA.

00:19:05.120 --> 00:19:09.149
So you don't even need to be
running the connectors for DSA

00:19:09.149 --> 00:19:09.690
service side.

00:19:09.690 --> 00:19:11.100
And that was a very
big goal for us.

00:19:11.100 --> 00:19:12.558
Because what we
really wanted to do

00:19:12.558 --> 00:19:16.760
is utilize the internet
for all communications.

00:19:16.760 --> 00:19:19.080
You don't want to open up
holes in your firewall.

00:19:19.080 --> 00:19:22.200
You don't want to create
routes just so you

00:19:22.200 --> 00:19:23.419
want to control something.

00:19:23.419 --> 00:19:25.710
Because when we're talking
about all these connections,

00:19:25.710 --> 00:19:28.770
at the end of the day, even when
I'm entering my Cloud Endpoint,

00:19:28.770 --> 00:19:31.100
I still have with
permissions full control

00:19:31.100 --> 00:19:34.344
of the devices that are maybe
three, four levels underneath.

00:19:34.344 --> 00:19:35.510
And that's really important.

00:19:43.450 --> 00:19:46.680
The Intel Edison also
has a little board on it.

00:19:46.680 --> 00:19:51.220
So you can see the temperature
that it's outputting as well.

00:19:55.750 --> 00:19:59.280
And if I play around a
little bit with lights,

00:19:59.280 --> 00:20:02.400
you can see me changing
the light colors.

00:20:02.400 --> 00:20:09.910
If I blow on the Edison, you
can see the temperature gauge

00:20:09.910 --> 00:20:10.410
changing.

00:20:10.410 --> 00:20:14.720
So the robot is
getting a little tired.

00:20:21.400 --> 00:20:26.930
Now that we have all of
these things connected,

00:20:26.930 --> 00:20:29.720
we can start to build logic.

00:20:29.720 --> 00:20:32.200
Now, logic, as I
explained earlier,

00:20:32.200 --> 00:20:39.120
is built utilizing
data flow such as this.

00:20:39.120 --> 00:20:41.960
So this is a very
simple data flow

00:20:41.960 --> 00:20:45.532
that is going to be driving
a game that we're all going

00:20:45.532 --> 00:20:46.740
to be playing a little later.

00:20:51.054 --> 00:20:52.720
I'd like to show you
another little demo

00:20:52.720 --> 00:20:57.243
because once this data starts
flowing and we have our phone

00:20:57.243 --> 00:21:00.420
and you see we're
spinning it around,

00:21:00.420 --> 00:21:06.660
we can bring up and discover
some interesting novel control

00:21:06.660 --> 00:21:07.650
concepts.

00:21:07.650 --> 00:21:11.480
So now I can use
my phone as a dial

00:21:11.480 --> 00:21:15.610
to change the hue-- as
you can see, brightness--

00:21:15.610 --> 00:21:17.270
on this light bulb.

00:21:17.270 --> 00:21:20.560
But as soon as I
flip my phone around,

00:21:20.560 --> 00:21:22.220
I can start controlling
the other bulb.

00:21:25.890 --> 00:21:29.480
So now the phone is
utilized as an analog gauge.

00:21:29.480 --> 00:21:32.940
And surprisingly, this is
not something we built.

00:21:32.940 --> 00:21:34.610
As soon as we connect
to everything,

00:21:34.610 --> 00:21:37.520
and all this data is there
for us and it's flowing.

00:21:37.520 --> 00:21:39.680
Because what DGLux
allows us to see--

00:21:39.680 --> 00:21:42.300
and if I actually zoom
in a little bit maybe

00:21:42.300 --> 00:21:46.500
it's going to make it easier
for everybody to see that--

00:21:46.500 --> 00:21:48.850
but you can see all of
this data that's flowing.

00:21:48.850 --> 00:21:55.170
So if I bring up our
iPhone DSLink right here,

00:21:55.170 --> 00:21:59.460
you can see all of
the sensor readings.

00:21:59.460 --> 00:22:01.770
And I can actually show
you how something like that

00:22:01.770 --> 00:22:03.600
is created in DGLux.

00:22:03.600 --> 00:22:08.030
We can drag out an iPhone
image in edit mode.

00:22:10.860 --> 00:22:11.820
Here it is.

00:22:11.820 --> 00:22:13.450
DGLux has all the
different tools

00:22:13.450 --> 00:22:16.350
for all the graphical
manipulations

00:22:16.350 --> 00:22:17.540
that HTML5 allows.

00:22:17.540 --> 00:22:20.020
So it supports pretty
much every single HTML5

00:22:20.020 --> 00:22:22.290
and it exposes that
for you in a graphical

00:22:22.290 --> 00:22:25.810
what you see is what you
get environment, including,

00:22:25.810 --> 00:22:28.020
of course, transform.

00:22:28.020 --> 00:22:31.250
So you can see the phone--
the HTML5 is outputting

00:22:31.250 --> 00:22:32.590
alpha, beta, and gamma.

00:22:32.590 --> 00:22:35.660
So I can take these
metrics that are live

00:22:35.660 --> 00:22:37.720
and I can bind them directly.

00:22:37.720 --> 00:22:40.055
This lets me do some
conversions right on the fly

00:22:40.055 --> 00:22:42.150
as I'm spinning
the phone around.

00:22:42.150 --> 00:22:45.210
But in this case, I don't
need to do anything.

00:22:45.210 --> 00:22:47.980
Notice that it can
even move it around

00:22:47.980 --> 00:22:52.290
and it's still reacting to all
the changes that I'm showing.

00:22:52.290 --> 00:22:56.220
So this is always
truly what you see

00:22:56.220 --> 00:22:59.730
is what you get and always live.

00:22:59.730 --> 00:23:06.560
So if I link alpha,
beta, gamma, you

00:23:06.560 --> 00:23:08.710
will see how everything
really ties together.

00:23:30.570 --> 00:23:32.880
So I'm sure you've
noticed this by now,

00:23:32.880 --> 00:23:34.850
but what we're really
trying to do is

00:23:34.850 --> 00:23:37.080
we're trying to open data up.

00:23:37.080 --> 00:23:40.090
We've created a solution
that is open source--

00:23:40.090 --> 00:23:42.340
not just open source with a
commercial license clause,

00:23:42.340 --> 00:23:43.173
but it's truly free.

00:23:43.173 --> 00:23:46.630
There's no commercial
licenses for DSA.

00:23:46.630 --> 00:23:48.979
It's licensed under Apache 2.

00:23:48.979 --> 00:23:50.520
And we're trying to
democratize data.

00:23:50.520 --> 00:23:54.850
So we are trying to create
an open source platform that

00:23:54.850 --> 00:24:01.020
will connect all these devices,
services, and things together

00:24:01.020 --> 00:24:04.830
in such a way that, like us that
can build a commercial product

00:24:04.830 --> 00:24:07.330
on top of all of this
live, streaming data,

00:24:07.330 --> 00:24:10.000
you can also create commercial
or potential open source

00:24:10.000 --> 00:24:12.870
products on top
of all this data.

00:24:12.870 --> 00:24:17.220
All the code is
available on GitHub.

00:24:17.220 --> 00:24:24.160
And you can always go
IOT-DSA.org to see the website

00:24:24.160 --> 00:24:25.660
for DSA.

00:24:25.660 --> 00:24:29.070
Now, I also want to call out
DGLogik DSA contributors.

00:24:29.070 --> 00:24:31.470
You could see them listed here.

00:24:31.470 --> 00:24:34.700
These gentleman contributed
pretty much all the source code

00:24:34.700 --> 00:24:35.710
that you see right now.

00:24:35.710 --> 00:24:39.060
We do have a few external
contributors already,

00:24:39.060 --> 00:24:42.275
but this is one thing that I
would really like everybody

00:24:42.275 --> 00:24:43.400
to walk away from.

00:24:43.400 --> 00:24:47.270
For us to really truly have
of this connected world

00:24:47.270 --> 00:24:49.320
of the future
together, we can not

00:24:49.320 --> 00:24:51.350
be relying on a
proprietary system that's

00:24:51.350 --> 00:24:54.510
going to be taking all our
data and marshaling this.

00:24:54.510 --> 00:24:57.550
In a perfect world, the system
is going to be created in Dart

00:24:57.550 --> 00:24:59.067
and it'll be DSA.

00:25:03.540 --> 00:25:06.440
Now it's time for a game.

00:25:06.440 --> 00:25:17.320
So if everybody that's connected
or online can go to this URL,

00:25:17.320 --> 00:25:23.280
and I will actually also
put it into Slack as well.

00:25:23.280 --> 00:25:25.900
That's set up for
the Dart Summit.

00:25:32.340 --> 00:25:36.270
I will show this in one second.

00:25:36.270 --> 00:25:38.640
It's in Slack now.

00:25:38.640 --> 00:25:40.640
This is the URL--
game.iot-dsa.org.

00:25:45.700 --> 00:25:47.950
I'm actually going to bring
it up on my phone as well.

00:25:51.600 --> 00:25:56.400
So we can see how many
players are coming on already.

00:25:56.400 --> 00:25:57.919
Now, this wasn't
done on purpose,

00:25:57.919 --> 00:26:00.210
but everything I just showed
you, including our company

00:26:00.210 --> 00:26:03.910
name, starts with a D. You
have DGLogik, DGLux 5, DSA,

00:26:03.910 --> 00:26:04.570
and Dart.

00:26:04.570 --> 00:26:10.300
So I guess it's a
marriage made in heaven.

00:26:10.300 --> 00:26:16.360
So I guess I'll give everybody
maybe 30 more seconds to join.

00:26:24.550 --> 00:26:26.620
It's game.iot-dsa.org.

00:26:39.290 --> 00:26:41.380
Good.

00:26:41.380 --> 00:26:42.990
We're using you guys for a test.

00:26:47.330 --> 00:26:53.700
We see-- oh, it's not responding
because the game hasn't

00:26:53.700 --> 00:26:55.830
started yet.

00:26:55.830 --> 00:26:57.069
So it's not hanging.

00:26:57.069 --> 00:26:58.860
We're just waiting for
everybody to log on.

00:26:58.860 --> 00:27:00.500
But I think we
have enough people.

00:27:00.500 --> 00:27:03.760
So let's turn it on
because as I said,

00:27:03.760 --> 00:27:05.270
this whole game,
what we're doing--

00:27:05.270 --> 00:27:06.769
and the goal of
this game-- is going

00:27:06.769 --> 00:27:10.290
to be tapping the
randomized button color that

00:27:10.290 --> 00:27:13.590
was provided to you by
the sweet random number

00:27:13.590 --> 00:27:15.800
generator in Dart.

00:27:15.800 --> 00:27:18.590
And we're going to see
whose team is going to win.

00:27:22.554 --> 00:27:24.345
So you'll notice that
this game is actually

00:27:24.345 --> 00:27:27.920
called performance test.

00:27:27.920 --> 00:27:32.984
So I'm going to go ahead and
we're going to enable the game.

00:27:32.984 --> 00:27:33.650
But wait for me.

00:27:33.650 --> 00:27:35.634
I want to play too.

00:27:38.610 --> 00:27:39.680
Now it's enabled.

00:27:39.680 --> 00:27:42.830
Wow, everybody click,
click, click, click.

00:27:56.660 --> 00:28:00.230
My phone is-- there it is.

00:28:00.230 --> 00:28:01.200
That's a lot of clicks.

00:28:05.004 --> 00:28:06.170
And that's a lot of players.

00:28:15.840 --> 00:28:19.600
Come on, help us test our
micro EC2 instance and Dart VM

00:28:19.600 --> 00:28:21.890
and Dart 2JS and web sockets.

00:28:21.890 --> 00:28:23.155
This is a test for everything.

00:28:32.610 --> 00:28:36.020
So while the game is
going on, maybe anybody

00:28:36.020 --> 00:28:37.810
has some questions for me?

00:28:37.810 --> 00:28:39.488
There's about
three minutes left.

00:28:39.488 --> 00:28:40.404
AUDIENCE: [INAUDIBLE].

00:28:43.429 --> 00:28:45.720
DENNIS KHVOSTIONOV: So DGLux
is our commercial product.

00:28:45.720 --> 00:28:47.510
MODERATOR: Could you
repeat the question?

00:28:47.510 --> 00:28:50.060
DENNIS KHVOSTIONOV: So is
there anything in DGLux

00:28:50.060 --> 00:28:51.632
that's not in DSA.

00:28:51.632 --> 00:28:53.340
And what I was going
to say is that DGLux

00:28:53.340 --> 00:28:57.920
is our commercial product, so
it's using all the APIs of DSA

00:28:57.920 --> 00:28:59.330
to get the data.

00:28:59.330 --> 00:29:01.180
And we actually have
sample applications

00:29:01.180 --> 00:29:03.490
that are doing exactly the
same thing as DGLux-- it's

00:29:03.490 --> 00:29:04.670
written in Dart and
Polymer, and you

00:29:04.670 --> 00:29:06.960
can see that I'm GitHub--
that are pulling the data

00:29:06.960 --> 00:29:11.140
and visualizing and subscribing
in all the same ways.

00:29:11.140 --> 00:29:14.344
But the DSA is really
the underpinnings.

00:29:14.344 --> 00:29:16.760
Now, you can see the Philips
Hue is still on a [INAUDIBLE]

00:29:16.760 --> 00:29:17.180
already.

00:29:17.180 --> 00:29:18.263
Who's winning, by the way.

00:29:25.942 --> 00:29:27.650
AUDIENCE: So in theory,
what you could do

00:29:27.650 --> 00:29:30.050
is you could have a set
of microphones pulling

00:29:30.050 --> 00:29:33.200
in some audio data and then you
could pull that in and actually

00:29:33.200 --> 00:29:36.070
use it to control the
color of the hue light.

00:29:36.070 --> 00:29:37.480
Certain frequencies
come in, have

00:29:37.480 --> 00:29:39.790
the light come at a certain
color, change all that?

00:29:39.790 --> 00:29:42.590
DENNIS KHVOSTIONOV: Just
like the winning team

00:29:42.590 --> 00:29:43.850
is showing on the Philips Hue.

00:29:48.070 --> 00:29:51.410
MODERATOR: We can maybe
squeeze one more question in.

00:29:51.410 --> 00:29:52.170
Anyone?

00:29:52.170 --> 00:29:53.320
Raise hands.

00:29:53.320 --> 00:29:55.110
Get Kevin to give
you his microphone

00:29:55.110 --> 00:29:58.380
or I'll give you mine.

00:29:58.380 --> 00:30:00.430
Sorry, you guys are too
busy tapping right now.

00:30:00.430 --> 00:30:01.596
Here's a question back here.

00:30:01.596 --> 00:30:03.654
Kevin will bring you the mic.

00:30:03.654 --> 00:30:05.320
AUDIENCE: You mentioned
that you're just

00:30:05.320 --> 00:30:09.400
using standard ports-- port
80, I guess-- on the incoming

00:30:09.400 --> 00:30:11.150
to the devices or
anything like that.

00:30:11.150 --> 00:30:12.830
What other security
concerns do you

00:30:12.830 --> 00:30:17.550
have for malicious
attacks on the devices?

00:30:17.550 --> 00:30:20.652
Because if you're just throwing
it out there on port 80

00:30:20.652 --> 00:30:23.110
and not doing any other ports
or locking it down in any way

00:30:23.110 --> 00:30:25.550
and you're allowing
any traffic inbound,

00:30:25.550 --> 00:30:27.892
I could see a potential
for security concerns.

00:30:27.892 --> 00:30:29.350
DENNIS KHVOSTIONOV:
So the question

00:30:29.350 --> 00:30:32.650
was what type of security
are we implementing?

00:30:32.650 --> 00:30:34.680
Because we are
using the internet

00:30:34.680 --> 00:30:36.450
as a backbone for all
communications going

00:30:36.450 --> 00:30:38.020
to port 80.

00:30:38.020 --> 00:30:40.885
So what security
measures are in place?

00:30:40.885 --> 00:30:44.242
Well, the answer to
that is it's not just

00:30:44.242 --> 00:30:45.200
you connect to port 80.

00:30:45.200 --> 00:30:46.670
It's not a REST API.

00:30:46.670 --> 00:30:49.520
REST APIs wouldn't really
work in this instance

00:30:49.520 --> 00:30:52.840
because we need to have a
device-- everything connects

00:30:52.840 --> 00:30:53.580
upstream.

00:30:53.580 --> 00:30:56.080
Because you'll notice you're
playing this game on the cloud,

00:30:56.080 --> 00:30:58.413
but it's actually controlling
the Philips Hue bulbs that

00:30:58.413 --> 00:31:00.190
are connected to
this Intel Edison

00:31:00.190 --> 00:31:01.610
through three different hubs.

00:31:01.610 --> 00:31:03.760
So there's a handshake
mechanism that happens

00:31:03.760 --> 00:31:05.810
and it's the device that
connects to the broker.

00:31:05.810 --> 00:31:08.260
You can never connect
to this device directly.

00:31:08.260 --> 00:31:09.970
You cannot connect to a DSLink.

00:31:09.970 --> 00:31:12.970
So it connects to the broker
and the broker white lists it.

00:31:12.970 --> 00:31:16.100
So nothing is going to happen
until that device becomes

00:31:16.100 --> 00:31:16.810
white listed.

00:31:16.810 --> 00:31:20.370
And we do have
security for handshakes

00:31:20.370 --> 00:31:22.110
and other aspects of DSA.

00:31:22.110 --> 00:31:25.950
And I personally believe
security by openness and not

00:31:25.950 --> 00:31:26.577
by obscurity.

00:31:26.577 --> 00:31:28.660
So it's all right there
for you to see in the code

00:31:28.660 --> 00:31:31.900
and comment and take a
look at our documentation

00:31:31.900 --> 00:31:34.600
and to spot vulnerabilities
and to help us fix them.

00:31:34.600 --> 00:31:38.590
And that's what we really
hope is going to happen.

00:31:38.590 --> 00:31:40.900
MODERATOR: I think we're
probably good on time.

00:31:40.900 --> 00:31:41.650
Thank you so much.

00:31:41.650 --> 00:31:42.750
DENNIS KHVOSTIONOV: So who won?

00:31:42.750 --> 00:31:43.541
MODERATOR: Who won?

00:31:46.170 --> 00:31:48.170
DENNIS KHVOSTIONOV: So
we're going to do a test.

00:31:48.170 --> 00:31:53.530
The first person that shows
me their phone gets the robot.

00:31:56.770 --> 00:31:58.150
No, I couldn't do it.

00:31:58.150 --> 00:31:59.290
But I think you were first.

00:31:59.290 --> 00:32:01.150
Here.

00:32:01.150 --> 00:32:05.645
Because this robot
had broken, already.

00:32:08.750 --> 00:32:09.820
It's already broke.

00:32:12.400 --> 00:32:16.040
MODERATOR: Do I need to bring
up the code of conduct again?

00:32:16.040 --> 00:32:19.220
Bob, that is legal in
California, actually.

00:32:19.220 --> 00:32:23.570
So you can connect to
it using Bluetooth LE,

00:32:23.570 --> 00:32:26.600
and this robot has
a mind of its own.

00:32:26.600 --> 00:32:30.180
So it's actually broken already
six different Philips Hue

00:32:30.180 --> 00:32:35.260
bulbs, so yeah.

00:32:35.260 --> 00:32:36.390
OK.

00:32:36.390 --> 00:32:37.190
All set.

00:32:37.190 --> 00:32:39.500
Thank you very much.

