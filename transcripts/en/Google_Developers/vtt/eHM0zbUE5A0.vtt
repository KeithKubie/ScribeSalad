WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:10.332
[MUSIC PLAYING]

00:00:20.670 --> 00:00:21.690
ARUN NAGARAJAN: Hello
and welcome.

00:00:21.690 --> 00:00:23.180
My name's Arun Nagarajan.

00:00:23.180 --> 00:00:25.140
And this is an exciting
new episode of

00:00:25.140 --> 00:00:26.640
Google Developers Live.

00:00:26.640 --> 00:00:29.260
The folks that follow this
series, pretty regularly, I

00:00:29.260 --> 00:00:30.720
work as part of the Apps Script

00:00:30.720 --> 00:00:31.940
Developer Relations team.

00:00:31.940 --> 00:00:34.380
And we're actually, here,
in Mountain View, today.

00:00:34.380 --> 00:00:37.050
And we have some special guests
with us that are going

00:00:37.050 --> 00:00:39.780
to be talking through some
exciting new products that

00:00:39.780 --> 00:00:42.710
they work on, the Fusion Tables
product, specifically.

00:00:42.710 --> 00:00:45.240
And throughout the series, we
will talk about how will you

00:00:45.240 --> 00:00:47.550
use Apps Script and
other apps APIs to

00:00:47.550 --> 00:00:49.500
integrate with Fusion Table.

00:00:49.500 --> 00:00:51.650
So, like I said, my name
is Arun Nagarajan.

00:00:51.650 --> 00:00:53.530
I'm with the Apps Script
Developer Relations Team.

00:00:53.530 --> 00:00:54.880
And my guests are.

00:00:54.880 --> 00:00:56.340
SREERAM BALAKRISHNAN: Hi,
I'm Sree Balakrishnan.

00:00:56.340 --> 00:00:59.272
I manage the Fusion Tables
Development Team.

00:00:59.272 --> 00:01:00.310
WARREN SHEN: And I'm
Warren Shen.

00:01:00.310 --> 00:01:02.970
I'm a software engineer
building out the

00:01:02.970 --> 00:01:04.080
Fusion Tables API.

00:01:04.080 --> 00:01:06.470
ARUN NAGARAJAN: It's very
exciting to have core members

00:01:06.470 --> 00:01:08.330
of the engineering team
on screen with us.

00:01:08.330 --> 00:01:11.640
So Sree's actually going to
start off by explaining what

00:01:11.640 --> 00:01:13.060
Fusion Tables is all about.

00:01:13.060 --> 00:01:15.910
I think a lot of folks that
made Island may know a lot

00:01:15.910 --> 00:01:18.360
more about apps and Apps Script
than Fusion Tables.

00:01:18.360 --> 00:01:20.350
So we figure we'll take a couple
of minutes to just

00:01:20.350 --> 00:01:22.860
explain what Fusion Tables
is all about.

00:01:22.860 --> 00:01:25.840
And there are a couple slides
here that Sree will walk us

00:01:25.840 --> 00:01:27.040
through as well.

00:01:27.040 --> 00:01:28.650
SREERAM BALAKRISHNAN:
Thanks, Arun.

00:01:28.650 --> 00:01:30.820
Well, for those of you who are
not familiar, Fusion tables is

00:01:30.820 --> 00:01:34.060
a free, Google Drive
application.

00:01:34.060 --> 00:01:36.150
It's been around for at
least two years now.

00:01:36.150 --> 00:01:40.350
And it's really designed for
people who want to manage

00:01:40.350 --> 00:01:44.170
data, but who are not expect
database administrators.

00:01:44.170 --> 00:01:47.590
So we make it very easy for you
to upload large data sets,

00:01:47.590 --> 00:01:49.290
up to about 100 megabytes.

00:01:49.290 --> 00:01:52.160
We store it in the cloud, and
then give you a variety of

00:01:52.160 --> 00:01:55.960
ways of visualizing that data
and analyzing that data and,

00:01:55.960 --> 00:01:57.730
importantly for today's
discussion, being able to

00:01:57.730 --> 00:01:59.780
access data through an API.

00:01:59.780 --> 00:02:02.310
And I'll let Warren talk
about the API.

00:02:02.310 --> 00:02:02.910
WARREN SHEN: Yes.

00:02:02.910 --> 00:02:07.160
So right now we have a web app
that lets you upload the data

00:02:07.160 --> 00:02:09.770
and edit it and publish it.

00:02:09.770 --> 00:02:12.070
But our API lets you do
everything that you can do in

00:02:12.070 --> 00:02:13.750
the UI programmatically.

00:02:13.750 --> 00:02:17.320
So you can build apps that will
upload data, let users

00:02:17.320 --> 00:02:19.170
edit the data, publish
the data.

00:02:19.170 --> 00:02:23.790
You can adjust the styles and
templates, which is the things

00:02:23.790 --> 00:02:26.770
that tell you how to display
a map or visualization.

00:02:26.770 --> 00:02:30.760
You can edit those through the
API and keep your data up to

00:02:30.760 --> 00:02:33.660
date and, as we'll talk about
today, keep it in sync with

00:02:33.660 --> 00:02:34.300
other data sources.

00:02:34.300 --> 00:02:35.490
SREERAM BALAKRISHNAN: Sorry,
I'll maybe talk

00:02:35.490 --> 00:02:36.240
to the slide, here.

00:02:36.240 --> 00:02:41.360
So this really shows a
very typical flow.

00:02:41.360 --> 00:02:43.350
There are a number of compelling
applications that

00:02:43.350 --> 00:02:47.920
people have created, where you
might have a database of

00:02:47.920 --> 00:02:52.030
addresses or locations and some
properties about that,

00:02:52.030 --> 00:02:55.060
like the number of people who
live at that place or the

00:02:55.060 --> 00:02:59.340
amount of car traffic at a
particular intersection.

00:02:59.340 --> 00:03:03.020
So you can create that data
as a CSV, import it.

00:03:03.020 --> 00:03:06.950
And then we will be able to
geocode the addresses.

00:03:06.950 --> 00:03:09.910
We will be able to analyze if
there are shapes in there.

00:03:09.910 --> 00:03:11.630
We can handle KML shapes.

00:03:11.630 --> 00:03:14.250
And then allow you to merge
that with other data.

00:03:14.250 --> 00:03:17.610
This is the integrational fusion
step and then visualize

00:03:17.610 --> 00:03:19.450
it, on a map, like
you can see here.

00:03:19.450 --> 00:03:22.130
This is an example of something
created in--

00:03:25.140 --> 00:03:25.940
I think it was.

00:03:25.940 --> 00:03:27.490
I can't remember the name.

00:03:27.490 --> 00:03:29.600
It was one of the government
agencies up in the state of

00:03:29.600 --> 00:03:30.240
Washington.

00:03:30.240 --> 00:03:31.050
ARUN NAGARAJAN: Very cool.

00:03:31.050 --> 00:03:31.910
SREERAM BALAKRISHNAN: I think
this is looking at their

00:03:31.910 --> 00:03:33.160
health outcomes.

00:03:35.180 --> 00:03:37.800
And then the important thing,
now, is that, once you've got

00:03:37.800 --> 00:03:41.340
it up and you can analyze the
data in the application, you

00:03:41.340 --> 00:03:45.036
can now also access that
data through the API.

00:03:45.036 --> 00:03:46.230
ARUN NAGARAJAN: And
that's great.

00:03:46.230 --> 00:03:47.580
It's not a siloed system.

00:03:47.580 --> 00:03:50.000
You're actually able to interact
with it and exchange

00:03:50.000 --> 00:03:53.400
information, without having
to always go to the UI.

00:03:53.400 --> 00:03:55.230
SREERAM BALAKRISHNAN: I think
the fact that you've got a UI

00:03:55.230 --> 00:03:57.390
makes the API more
usable, right?

00:03:57.390 --> 00:04:00.680
Because you don't always have to
go and query the API to see

00:04:00.680 --> 00:04:01.990
whether your data is
correct or not.

00:04:01.990 --> 00:04:05.580
You can go to the UI, use the
application, see whether your

00:04:05.580 --> 00:04:06.870
data is correct, analyze it.

00:04:06.870 --> 00:04:08.770
And then once it's correct,
then you know that your

00:04:08.770 --> 00:04:09.930
application is going to work.

00:04:09.930 --> 00:04:12.130
WARREN SHEN: And in the UI, we
have tools to explore your

00:04:12.130 --> 00:04:15.020
data, to just do some quick
checks and make it very easy

00:04:15.020 --> 00:04:17.529
to explore what you have
in the application,

00:04:17.529 --> 00:04:18.329
in your data set.

00:04:18.329 --> 00:04:19.010
ARUN NAGARAJAN: That's great.

00:04:19.010 --> 00:04:23.140
And the API itself, the
documentation, I had a chance

00:04:23.140 --> 00:04:24.490
to go through it.

00:04:24.490 --> 00:04:27.800
I thought it was very
straightforward to use.

00:04:27.800 --> 00:04:29.600
So could you talk a little bit
about what are some of the

00:04:29.600 --> 00:04:32.440
critical things that people need
to know about the API?

00:04:32.440 --> 00:04:36.110
What are some of the important
protocols and authentication

00:04:36.110 --> 00:04:37.670
mechanisms that people
ought to know?

00:04:37.670 --> 00:04:38.010
WARREN SHEN: Yes.

00:04:38.010 --> 00:04:40.760
So the API is a RESTful API.

00:04:40.760 --> 00:04:43.680
We have a collection of
different resources, which are

00:04:43.680 --> 00:04:46.520
pretty straightforward,
table, column.

00:04:46.520 --> 00:04:48.490
And then we have a query
feed, where you

00:04:48.490 --> 00:04:50.620
can issue SQL queries.

00:04:50.620 --> 00:04:54.950
You can edit and modify your
tables and columns, just say,

00:04:54.950 --> 00:04:58.190
column names or data types for
the columns, RESTfully.

00:04:58.190 --> 00:05:00.490
You can issue SQL queries.

00:05:00.490 --> 00:05:04.630
And we have methods to edit,
delete, or import

00:05:04.630 --> 00:05:06.760
data through the API.

00:05:06.760 --> 00:05:10.290
Authentication is done
through OAuth2.

00:05:10.290 --> 00:05:13.460
So if you have a private table,
then you will need

00:05:13.460 --> 00:05:16.910
OAuth authentication
to edit the table

00:05:16.910 --> 00:05:18.270
or to view the table.

00:05:18.270 --> 00:05:20.790
For public tables, you don't
need OAuth2, you just see a

00:05:20.790 --> 00:05:21.890
developer key.

00:05:21.890 --> 00:05:28.500
In which case, you can allow
people to access the data--

00:05:28.500 --> 00:05:30.923
not write to it but read
the data, without the

00:05:30.923 --> 00:05:31.830
authentication.

00:05:31.830 --> 00:05:33.030
ARUN NAGARAJAN: That's great.

00:05:33.030 --> 00:05:35.280
And the documentation site,
for the folks that are not

00:05:35.280 --> 00:05:36.270
familiar with it, is
developers.googl

00:05:36.270 --> 00:05:39.180
e.com/fusiontables.

00:05:39.180 --> 00:05:41.885
Very easy to find and there's
really a wealth of information

00:05:41.885 --> 00:05:43.690
there to get started.

00:05:43.690 --> 00:05:47.610
So from a point of Apps Script,
I'll do a quick

00:05:47.610 --> 00:05:50.400
introduction as well, as to
what it is and what Apps

00:05:50.400 --> 00:05:52.000
Script gives you.

00:05:52.000 --> 00:05:53.687
The developer page for Apps
Script is developers.googl

00:05:53.687 --> 00:05:56.570
e.com/apps-script.

00:05:56.570 --> 00:05:59.450
And we actually just recently
launched a redone website,

00:05:59.450 --> 00:06:01.950
with a lot more content and
better organization of

00:06:01.950 --> 00:06:04.130
information that
we had as well.

00:06:04.130 --> 00:06:07.110
And Apps Script is all about
doing more with Google Apps.

00:06:07.110 --> 00:06:10.020
So taking the power of products
like Gmail, sites,

00:06:10.020 --> 00:06:14.470
and Drive, docs, spreadsheets,
and so on and being able to

00:06:14.470 --> 00:06:17.460
integrate them with each other,
with other third party

00:06:17.460 --> 00:06:19.540
systems, other Google systems.

00:06:19.540 --> 00:06:21.450
And being able to build the
workflows and little

00:06:21.450 --> 00:06:24.850
applications, for your team or
your company, is something

00:06:24.850 --> 00:06:26.310
that Apps Script is
really good at.

00:06:26.310 --> 00:06:28.770
And to top it all off, you
build it in the cloud.

00:06:28.770 --> 00:06:31.030
So you go to a browser
to write the code.

00:06:31.030 --> 00:06:32.440
It's all JavaScript.

00:06:32.440 --> 00:06:33.970
So you don't have to learn
a new language.

00:06:33.970 --> 00:06:36.960
And the API is actually
super straightforward.

00:06:36.960 --> 00:06:39.670
A lot of times, I find myself
just using the autocomplete to

00:06:39.670 --> 00:06:41.810
build new things, rather than
even look at the reference

00:06:41.810 --> 00:06:42.970
documentation.

00:06:42.970 --> 00:06:45.140
So hopefully, you'll get a
flavor for that, today, as we

00:06:45.140 --> 00:06:48.210
build some of the interesting
things in

00:06:48.210 --> 00:06:50.080
the rest of the session.

00:06:50.080 --> 00:06:53.470
So what I figured that we'll
do is showcase some of the

00:06:53.470 --> 00:06:56.140
existing sample sets
of stuff that we've

00:06:56.140 --> 00:06:58.580
had with Fusion Tables.

00:06:58.580 --> 00:07:03.530
One of the ones that I think
really jumped at me was this

00:07:03.530 --> 00:07:04.900
caterpillar information.

00:07:04.900 --> 00:07:06.630
I can't really pronounce the--

00:07:06.630 --> 00:07:09.260
SREERAM BALAKRISHNAN:
Astraptes.

00:07:09.260 --> 00:07:10.460
ARUN NAGARAJAN: Fulgerator?

00:07:10.460 --> 00:07:11.244
SREERAM BALAKRISHNAN:
Fulgerator.

00:07:11.244 --> 00:07:12.450
SREERAM BALAKRISHNAN: Actually,
Arjun, just a quick,

00:07:12.450 --> 00:07:14.110
30 second side story.

00:07:14.110 --> 00:07:17.776
So this data set is important
to us, because it's part of

00:07:17.776 --> 00:07:20.240
the founding of the product.

00:07:20.240 --> 00:07:22.955
The team went to Costa Rica.

00:07:22.955 --> 00:07:24.970
WARREN SHEN: [INAUDIBLE].

00:07:24.970 --> 00:07:26.170
ARUN NAGARAJAN: So you guys
collected this data?

00:07:26.170 --> 00:07:28.920
SREERAM BALAKRISHNAN: Well, the
idea for the product came

00:07:28.920 --> 00:07:32.990
from this visit to Costa Rica,
where we met a biologist who

00:07:32.990 --> 00:07:36.020
were collecting data
on caterpillars.

00:07:36.020 --> 00:07:40.450
And they wanted a tool to be
able to share that with other

00:07:40.450 --> 00:07:41.670
scientists.

00:07:41.670 --> 00:07:45.040
And that's where the idea
of the tool came from.

00:07:45.040 --> 00:07:47.650
And so we like to use this.

00:07:47.650 --> 00:07:48.570
ARUN NAGARAJAN: Yeah,
that's great.

00:07:48.570 --> 00:07:53.250
And so always, from the genesis,
it had very much a

00:07:53.250 --> 00:07:56.290
lot of data but built
to visualize?

00:07:56.290 --> 00:07:56.710
SREERAM BALAKRISHNAN: Yeah.

00:07:56.710 --> 00:07:57.130
WARREN SHEN: And share.

00:07:57.130 --> 00:07:58.940
ARUN NAGARAJAN: Part engineered
and share and

00:07:58.940 --> 00:08:00.390
collaborate aspect to it.

00:08:00.390 --> 00:08:00.885
SREERAM BALAKRISHNAN: And
one of the things

00:08:00.885 --> 00:08:01.870
that you can see here.

00:08:01.870 --> 00:08:03.550
We like to show pictures,
as well, right?

00:08:03.550 --> 00:08:06.870
So we make it easy for you to
put an image in a table, and

00:08:06.870 --> 00:08:07.810
the image is rendered.

00:08:07.810 --> 00:08:08.340
ARUN NAGARAJAN: Right.

00:08:08.340 --> 00:08:11.240
Just by loading data in,
you immediately have an

00:08:11.240 --> 00:08:15.990
application where you are able
to go in and say, show me all

00:08:15.990 --> 00:08:17.570
female caterpillar species.

00:08:17.570 --> 00:08:18.630
SREERAM BALAKRISHNAN:
Precisely right.

00:08:18.630 --> 00:08:21.250
ARUN NAGARAJAN: And then also
be able to look at it as

00:08:21.250 --> 00:08:24.750
cards, which I thought was a
nice way to browse through the

00:08:24.750 --> 00:08:25.660
data that you had.

00:08:25.660 --> 00:08:28.280
And it sounds like you can
actually customize it with

00:08:28.280 --> 00:08:29.830
HTML and CSS as well.

00:08:29.830 --> 00:08:30.250
SREERAM BALAKRISHNAN:
Exactly, yeah.

00:08:30.250 --> 00:08:30.650
WARREN SHEN: [INAUDIBLE]

00:08:30.650 --> 00:08:32.370
You can make it how you want.

00:08:32.370 --> 00:08:35.419
ARUN NAGARAJAN: And then the
geocoding and being able to

00:08:35.419 --> 00:08:36.100
show that in a map.

00:08:36.100 --> 00:08:37.400
SREERAM BALAKRISHNAN: Show where
they found it, where

00:08:37.400 --> 00:08:39.450
they found these butterflies.

00:08:39.450 --> 00:08:41.309
ARUN NAGARAJAN: I got to
imagine, this was really

00:08:41.309 --> 00:08:43.440
rewarding and fun for scientists
that are not

00:08:43.440 --> 00:08:44.159
programmers--

00:08:44.159 --> 00:08:44.530
SREERAM BALAKRISHNAN: Exactly.

00:08:44.530 --> 00:08:45.510
ARUN NAGARAJAN: To be
able to see this.

00:08:45.510 --> 00:08:47.290
SREERAM BALAKRISHNAN: They
didn't know anything about

00:08:47.290 --> 00:08:49.040
database management or
anything like that.

00:08:49.040 --> 00:08:51.390
They just needed to
know the data.

00:08:51.390 --> 00:08:53.490
We make it easy for you
to get data up and do

00:08:53.490 --> 00:08:55.100
useful things with it.

00:08:55.100 --> 00:08:56.300
ARUN NAGARAJAN: Very good.

00:08:56.300 --> 00:08:57.610
It makes a lot of sense.

00:08:57.610 --> 00:09:00.680
I did not know that anecdote
about this being one of the

00:09:00.680 --> 00:09:04.120
founding data sets to
power Fusion Tables.

00:09:04.120 --> 00:09:05.900
That's a great little tidbit
that we learned here.

00:09:05.900 --> 00:09:07.140
So that's great.

00:09:07.140 --> 00:09:09.740
So I figured this is important,
for the folks that

00:09:09.740 --> 00:09:12.470
have not seen what Fusion Tables
feels like, what it

00:09:12.470 --> 00:09:13.790
looks like.

00:09:13.790 --> 00:09:17.400
And just to showcase this
interaction with the API, what

00:09:17.400 --> 00:09:21.750
I'll show you is, you can
actually take the table ID, go

00:09:21.750 --> 00:09:26.570
into the Fusion Tables
documentation page, go to the

00:09:26.570 --> 00:09:31.650
query page, down to the SQL, and
then you're able to test

00:09:31.650 --> 00:09:33.830
the API right from within
the documentation.

00:09:33.830 --> 00:09:35.660
So this is something you will
see in a lot of different

00:09:35.660 --> 00:09:37.560
Google Developer products'
pages.

00:09:37.560 --> 00:09:39.710
You have to authorize
yourself.

00:09:39.710 --> 00:09:42.000
And I had already logged in, so
it didn't actually prompt

00:09:42.000 --> 00:09:43.380
me which account or anything
like that.

00:09:43.380 --> 00:09:46.560
I can just say, select
star from that table.

00:09:46.560 --> 00:09:49.130
And anyone that's done any SQL,

00:09:49.130 --> 00:09:50.280
that'll look very familiar.

00:09:50.280 --> 00:09:52.220
And I can just hit execute.

00:09:52.220 --> 00:09:56.690
And I should get back the
data That easily.

00:09:56.690 --> 00:09:57.750
SREERAM BALAKRISHNAN: I think
that will only work if the

00:09:57.750 --> 00:09:59.730
table is public.

00:09:59.730 --> 00:10:00.910
WARREN SHEN: Well, if you
authenticate, so.

00:10:00.910 --> 00:10:02.050
ARUN NAGARAJAN: I did
authenticate.

00:10:02.050 --> 00:10:04.040
WARREN SHEN: Yeah, so if you
have private tables and you

00:10:04.040 --> 00:10:06.340
click on the AOauth key, then
that will actually take care

00:10:06.340 --> 00:10:06.860
of the OAuth.

00:10:06.860 --> 00:10:07.275
SREERAM BALAKRISHNAN:
Oh, really?

00:10:07.275 --> 00:10:08.050
WARREN SHEN: Yes.

00:10:08.050 --> 00:10:10.060
ARUN NAGARAJAN: So that's one
of the nice powers of this.

00:10:10.060 --> 00:10:13.060
You can actually preview what
you're about to build from

00:10:13.060 --> 00:10:14.460
within the console.

00:10:14.460 --> 00:10:15.607
So you learned something, too.

00:10:15.607 --> 00:10:17.100
SREERAM BALAKRISHNAN: Yeah.

00:10:17.100 --> 00:10:20.520
WARREN SHEN: And the results
are in JSON.

00:10:20.520 --> 00:10:23.080
It's native JSON, so you can
feed into whatever other.

00:10:23.080 --> 00:10:23.310
ARUN NAGARAJAN: Right.

00:10:23.310 --> 00:10:26.380
And the fact that it's JSON,
it's just a JavaScript Object,

00:10:26.380 --> 00:10:30.280
makes it really easy to
work with Apps Script.

00:10:30.280 --> 00:10:31.640
SREERAM BALAKRISHNAN: You
have the option of also

00:10:31.640 --> 00:10:32.320
taking it as CSV.

00:10:32.320 --> 00:10:34.320
WARREN SHEN: So if you require
CSV, there's a parameter that

00:10:34.320 --> 00:10:36.440
will specify what
output format.

00:10:36.440 --> 00:10:38.090
ARUN NAGARAJAN: Yeah, I
did see that as well.

00:10:38.090 --> 00:10:40.590
SREERAM BALAKRISHNAN: It's
JSON and JSONP, right?

00:10:40.590 --> 00:10:41.110
WARREN SHEN: Yeah.

00:10:41.110 --> 00:10:42.890
ARUN NAGARAJAN: Yeah, you can
have a callback as well.

00:10:42.890 --> 00:10:44.790
I noticed that.

00:10:44.790 --> 00:10:46.920
So what we figured, for the
rest of this demo, the

00:10:46.920 --> 00:10:51.560
session, was to dive into one of
the demos that we built, a

00:10:51.560 --> 00:10:55.140
little application that we
came up with, where, last

00:10:55.140 --> 00:10:58.890
night, I just sat on my couch
and just wrote down a lot of

00:10:58.890 --> 00:11:00.520
fake sample data.

00:11:00.520 --> 00:11:03.860
And the idea was that, I'm a
school district, of about five

00:11:03.860 --> 00:11:08.720
schools in my district, and,
as someone in charge of

00:11:08.720 --> 00:11:12.310
tracking progress across the
district, I want to see the

00:11:12.310 --> 00:11:15.520
grades, for a bunch of students,
across all these

00:11:15.520 --> 00:11:17.820
different schools
and subjects.

00:11:17.820 --> 00:11:22.770
And also we'll have a
representative, in each

00:11:22.770 --> 00:11:25.825
school, that has to open a
spreadsheet and then enter in

00:11:25.825 --> 00:11:26.540
those grades.

00:11:26.540 --> 00:11:29.160
So the entry mechanism
is a spreadsheet.

00:11:29.160 --> 00:11:31.300
And they can actually download
the grades there as well.

00:11:31.300 --> 00:11:34.710
But then the visualization and
then the merging aspects are

00:11:34.710 --> 00:11:37.920
in Fusion Tables, which gives
you a lot more power.

00:11:37.920 --> 00:11:41.310
And I could also publish this
data, in a summary format,

00:11:41.310 --> 00:11:44.730
such that other journalists and
data scientists could take

00:11:44.730 --> 00:11:47.480
this data and use it as part
of their own research and

00:11:47.480 --> 00:11:48.420
publications.

00:11:48.420 --> 00:11:51.610
So the fact that it's in Fusion
Tables gives that

00:11:51.610 --> 00:11:53.470
potential road map.

00:11:53.470 --> 00:11:57.100
So like always, the code that
I'll be using is all on my

00:11:57.100 --> 00:11:57.960
GitHub page.

00:11:57.960 --> 00:12:01.830
So if you just go to
github.com/entaq, which is my

00:12:01.830 --> 00:12:03.600
handle, and then Apps
Script, there's a

00:12:03.600 --> 00:12:05.450
folder for Fusion Tables.

00:12:05.450 --> 00:12:09.740
And the two necessary files
are right from there.

00:12:09.740 --> 00:12:13.750
So this is this data set,
about 200 rows.

00:12:13.750 --> 00:12:16.540
Like I said, five schools,
but I forget how

00:12:16.540 --> 00:12:18.410
many rows per school.

00:12:18.410 --> 00:12:21.920
But a small data to
prove the point.

00:12:21.920 --> 00:12:23.990
All of this is completely
made up.

00:12:23.990 --> 00:12:26.920
So we use student IDs here
and making up names.

00:12:26.920 --> 00:12:29.190
But the ID is that this
could be as rich as

00:12:29.190 --> 00:12:30.710
you want it to be.

00:12:30.710 --> 00:12:33.900
So let's get started with just
a very small example of

00:12:33.900 --> 00:12:35.460
extracting this data.

00:12:35.460 --> 00:12:38.265
So for this, what I'll do is
first create a spreadsheet.

00:12:41.140 --> 00:12:44.960
And I'll just call this
student grades.

00:12:44.960 --> 00:12:48.450
And in order to put in scripts,
at a spreadsheet

00:12:48.450 --> 00:12:50.630
level, you have to open the
Script Editor from the

00:12:50.630 --> 00:12:51.730
spreadsheet itself.

00:12:51.730 --> 00:12:55.300
So you got to Tools,
Script Editor.

00:12:55.300 --> 00:12:55.440
[INAUDIBLE]

00:12:55.440 --> 00:12:58.110
I'm not going to use any
of the templates.

00:12:58.110 --> 00:13:00.770
I'll zoom in a little bit,
so you guys can see.

00:13:00.770 --> 00:13:03.960
And I'll call this
load grades.

00:13:03.960 --> 00:13:05.810
And I'm just going to copy
the code, for now.

00:13:05.810 --> 00:13:08.080
But I'll take a second
to explain what

00:13:08.080 --> 00:13:10.545
they do, what it does.

00:13:10.545 --> 00:13:17.300
I'm just going to copy the raw
code here and save it and

00:13:17.300 --> 00:13:19.350
rename this to the rowutils.

00:13:22.390 --> 00:13:24.280
And this is the code that is--

00:13:24.280 --> 00:13:27.500
rowutils, those that have done
any sort of scripting will

00:13:27.500 --> 00:13:28.900
find this very familiar.

00:13:28.900 --> 00:13:30.940
This is straight from our
documentation site.

00:13:30.940 --> 00:13:34.610
What this does, basically, is
turns spreadsheet rows into a

00:13:34.610 --> 00:13:37.500
JavaScript Object, so they
really easy to manipulate and

00:13:37.500 --> 00:13:40.490
map and load and things
like that.

00:13:40.490 --> 00:13:43.270
So I'll also copy the other
code, which actually does the

00:13:43.270 --> 00:13:44.230
data exchange.

00:13:44.230 --> 00:13:46.760
So I'll make the raw version
of this as well, so it's

00:13:46.760 --> 00:13:48.465
easier to copy and paste.

00:13:48.465 --> 00:13:50.820
I'll say, New Script File.

00:13:50.820 --> 00:13:54.180
I'll say, loaddata.

00:13:54.180 --> 00:13:56.950
The files names, actually,
don't matter.

00:13:56.950 --> 00:13:59.650
It all kind of gets bundled
in together, when it gets

00:13:59.650 --> 00:14:01.750
executed on the server side.

00:14:01.750 --> 00:14:03.080
So I have to do a
couple things.

00:14:03.080 --> 00:14:05.670
Warren mention that this
is OAuth based.

00:14:05.670 --> 00:14:08.240
In this episode, we won't dive
too deep into the OAuth

00:14:08.240 --> 00:14:09.040
process itself.

00:14:09.040 --> 00:14:10.920
But you'll be able to follow
along everything

00:14:10.920 --> 00:14:13.530
that you need to do.

00:14:13.530 --> 00:14:17.890
And in our other episodes, with
the YouTube API and the

00:14:17.890 --> 00:14:20.990
Salesforce API, we showed you
all that's necessary to set up

00:14:20.990 --> 00:14:23.790
an OAuth setup from scratch.

00:14:23.790 --> 00:14:27.440
So I'll go to
developer.google.com/console,

00:14:27.440 --> 00:14:29.420
which takes you to the developer
console, where you

00:14:29.420 --> 00:14:33.130
register your API as a project,
API project, and then

00:14:33.130 --> 00:14:35.580
also get your OAuth2
client key.

00:14:35.580 --> 00:14:36.750
So I'll say Create.

00:14:36.750 --> 00:14:40.620
And you'll say Fusion
Tables GDL.

00:14:43.912 --> 00:14:45.960
And that's going to create
the project.

00:14:45.960 --> 00:14:48.940
And you need to give it
a few parameters.

00:14:48.940 --> 00:14:53.220
So we want the Fusion
Tables API.

00:14:53.220 --> 00:14:55.550
And then go to API Access.

00:14:55.550 --> 00:14:58.070
And then you want to create
an OAuth2 client.

00:14:58.070 --> 00:15:01.640
I'll call it Fusion
Tables GDL.

00:15:01.640 --> 00:15:03.600
I like to have this
one memorized.

00:15:03.600 --> 00:15:09.080
Save us some time,
google.com/apps-script images

00:15:09.080 --> 00:15:14.620
script 128 dot PNG.

00:15:14.620 --> 00:15:19.640
And then also, I'll use the same
URL for my homepage URL.

00:15:19.640 --> 00:15:23.010
In this next step, what you do
need is to deploy the script

00:15:23.010 --> 00:15:25.230
that you have, as a web
app, so you can

00:15:25.230 --> 00:15:27.050
use that as a callback.

00:15:27.050 --> 00:15:30.140
So this is a bit of a manual
process, for now, but this is

00:15:30.140 --> 00:15:31.190
something that we're
definitely going

00:15:31.190 --> 00:15:33.170
to make a lot easier.

00:15:33.170 --> 00:15:35.710
But this is necessary
for the time being.

00:15:35.710 --> 00:15:37.960
So you have to say the
version and deploy

00:15:37.960 --> 00:15:41.830
it as the user running.

00:15:41.830 --> 00:15:45.460
And that's the callback
URL that we have.

00:15:45.460 --> 00:15:48.970
And go back into the console,
paste that in.

00:15:48.970 --> 00:15:51.190
So this is the tedious step that
you have to go through

00:15:51.190 --> 00:15:55.190
the very first time you set
up an OAuth2 project.

00:15:55.190 --> 00:15:57.640
And now you'll get what is
the client [INAUDIBLE]

00:15:57.640 --> 00:15:58.920
the client secret.

00:15:58.920 --> 00:16:01.180
So this is the product
that I'll delete.

00:16:01.180 --> 00:16:03.070
So you'll have to create
your own client

00:16:03.070 --> 00:16:04.830
ID and client secret.

00:16:04.830 --> 00:16:06.560
So I'll copy this.

00:16:06.560 --> 00:16:09.500
And in the code itself, you'll
see placeholders where you'll

00:16:09.500 --> 00:16:15.580
want to paste this in, your
client ID, your client secret,

00:16:15.580 --> 00:16:20.090
and then your callback
URL, which is what I

00:16:20.090 --> 00:16:22.550
had from right there.

00:16:22.550 --> 00:16:25.380
And the whole purpose of this
is such that, you are not

00:16:25.380 --> 00:16:28.560
specifying your password, to
this application that's

00:16:28.560 --> 00:16:29.590
running that data, as you.

00:16:29.590 --> 00:16:34.760
You're just delegating
your access to it.

00:16:34.760 --> 00:16:36.600
And I need to save
it one more time.

00:16:36.600 --> 00:16:39.100
Because I updated the code.

00:16:39.100 --> 00:16:44.760
And then we should be able to
publish that and get started.

00:16:44.760 --> 00:16:45.570
So I went fast.

00:16:45.570 --> 00:16:47.130
Hopefully, you'll be able
to follow along.

00:16:47.130 --> 00:16:50.150
But if not, all this code and
the details are available in

00:16:50.150 --> 00:16:52.580
our prior GDLs.

00:16:52.580 --> 00:16:56.690
So what I'll do now is run the
On Open function manually.

00:16:56.690 --> 00:16:57.960
It doesn't have to be manual.

00:16:57.960 --> 00:17:01.090
It could be when you reload
the spreadsheet as well.

00:17:01.090 --> 00:17:05.660
So authorize this and run it.

00:17:05.660 --> 00:17:08.359
So now, when I go into my
spreadsheet, there should be a

00:17:08.359 --> 00:17:10.619
new menu item called
Fusion Tables.

00:17:10.619 --> 00:17:14.030
So this showcases how you can
inject custom menu into a

00:17:14.030 --> 00:17:14.980
spreadsheet as well.

00:17:14.980 --> 00:17:18.099
So hopefully, you'll learn
ways to do that as well.

00:17:18.099 --> 00:17:20.310
And the very first thing
I need to do is login.

00:17:20.310 --> 00:17:23.390
So this is how I'm establishing
my OAuth2

00:17:23.390 --> 00:17:26.280
identity and then also
storing the token.

00:17:26.280 --> 00:17:28.890
So it's going to say, hey,
this application that I

00:17:28.890 --> 00:17:31.870
defined earlier, in dot
console, is asking for

00:17:31.870 --> 00:17:32.800
permission.

00:17:32.800 --> 00:17:34.210
I say allow access.

00:17:34.210 --> 00:17:36.350
And you can see that the scope
is very restricted.

00:17:36.350 --> 00:17:39.880
All it can do is interact with
this fusion table object,

00:17:39.880 --> 00:17:42.960
rather than a drive or Gmail or
anything else that might be

00:17:42.960 --> 00:17:44.180
more sensitive.

00:17:44.180 --> 00:17:46.150
And then I'm done.

00:17:46.150 --> 00:17:47.540
And I come back now, and I say,

00:17:47.540 --> 00:17:50.880
download from Fusion Tables.

00:17:50.880 --> 00:17:52.390
So it's a menu, different
process.

00:17:52.390 --> 00:17:55.190
It could be little icons and
all that stuff as well.

00:17:55.190 --> 00:17:56.130
And there you have it.

00:17:56.130 --> 00:17:58.790
So the data downloaded
from Fusion Tables.

00:17:58.790 --> 00:18:03.110
And we only downloaded data
for PK Middle School.

00:18:03.110 --> 00:18:09.580
So that's about 32 records of
data, including the header.

00:18:09.580 --> 00:18:12.340
And I got automatically put
into the spreadsheet.

00:18:12.340 --> 00:18:16.750
So that's a very simple flow
that I wanted to showcase.

00:18:16.750 --> 00:18:19.250
What I can also do is, now,
I actually go ahead

00:18:19.250 --> 00:18:19.880
and edit the grades.

00:18:19.880 --> 00:18:25.690
So remember that student ID
1,001 has a grade of 40.

00:18:25.690 --> 00:18:28.410
I'll go ahead and
change it to 45.

00:18:28.410 --> 00:18:30.680
And one of the things I'm doing
is tagging the changed

00:18:30.680 --> 00:18:33.930
column, so the program
can find it easily.

00:18:33.930 --> 00:18:35.900
And then I'll change his
history grades to

00:18:35.900 --> 00:18:38.710
90, crank it up.

00:18:38.710 --> 00:18:41.600
So in this example, I'm
just updating grades.

00:18:41.600 --> 00:18:44.530
But very easily, this example
could be adapted to adding new

00:18:44.530 --> 00:18:48.180
grades as well, from a Google
form or from importing from

00:18:48.180 --> 00:18:50.060
other systems as well.

00:18:50.060 --> 00:18:53.250
And then what I can do is say,
Upload to Fusion Tables.

00:18:53.250 --> 00:18:55.930
And this script, which I'll walk
through in a second, is

00:18:55.930 --> 00:18:59.640
able to understand what records
changed, [INAUDIBLE]

00:18:59.640 --> 00:19:02.210
IDs are, corresponding to that,
and then push those

00:19:02.210 --> 00:19:05.790
changes up to the Fusion
Table, itself.

00:19:05.790 --> 00:19:08.990
If I go into my student
record now.

00:19:08.990 --> 00:19:11.776
So there's the 40 and 60.

00:19:11.776 --> 00:19:15.110
And if I refresh this, that
should reflect the new

00:19:15.110 --> 00:19:17.540
data of 45 and 90.

00:19:17.540 --> 00:19:21.810
So that showed the round trip
of downloading data from a

00:19:21.810 --> 00:19:25.600
Fusion Table, using the API,
after establishing identity,

00:19:25.600 --> 00:19:27.350
and then also pushing
data back.

00:19:27.350 --> 00:19:30.700
So that was a very, quick
starter, but, hopefully, you

00:19:30.700 --> 00:19:32.240
saw that these systems

00:19:32.240 --> 00:19:34.000
interoperate really well together.

00:19:34.000 --> 00:19:37.320
And once you set up the
connection, data

00:19:37.320 --> 00:19:38.640
can flow very freely.

00:19:38.640 --> 00:19:42.230
All you need do is write the
logic for which cells map to

00:19:42.230 --> 00:19:44.920
which Fusion Table columns
and vice versa.

00:19:44.920 --> 00:19:46.680
And a lot of it could
be generalized, too.

00:19:46.680 --> 00:19:49.770
So if any developers out there
want to write a generalized

00:19:49.770 --> 00:19:52.660
framework that is smart enough
to look at the column names

00:19:52.660 --> 00:19:55.530
and create the update, insert,
select statements

00:19:55.530 --> 00:19:57.570
automatically, that'll
be great.

00:19:57.570 --> 00:20:00.380
The community would be very
grateful for something like

00:20:00.380 --> 00:20:03.730
that to get started with, rather
than someone like me

00:20:03.730 --> 00:20:05.850
writing it from scratch.

00:20:05.850 --> 00:20:07.540
So let's do a couple of things
that are kind of

00:20:07.540 --> 00:20:08.830
Fusion Table specific.

00:20:08.830 --> 00:20:11.090
So one of the nice things about
Fusion Tables is the

00:20:11.090 --> 00:20:14.710
ability to merge in data.

00:20:14.710 --> 00:20:18.820
So if I say, file merge, it'll
ask me, which table do you

00:20:18.820 --> 00:20:20.150
want to merge in from?

00:20:20.150 --> 00:20:24.090
So if you notice, in here, I
have a column for school.

00:20:24.090 --> 00:20:26.570
But there's no address
associated with it.

00:20:26.570 --> 00:20:29.800
Let's say that there is a
spreadsheet, somewhere,

00:20:29.800 --> 00:20:32.560
perhaps in the real estate
team, that tracks the

00:20:32.560 --> 00:20:35.760
addresses and particular details
about each school.

00:20:35.760 --> 00:20:38.260
And as a teacher, I don't
necessarily have that.

00:20:38.260 --> 00:20:41.010
And I could put it in manually,
but I'd rather merge

00:20:41.010 --> 00:20:44.720
it in, such that any changes in
the main data set reflect

00:20:44.720 --> 00:20:46.070
in the merged version.

00:20:46.070 --> 00:20:53.350
I could say File, Merge and
pick that data set.

00:20:53.350 --> 00:20:54.600
Catch up here.

00:20:57.300 --> 00:21:00.965
I'm not sure what's going
on here, a lot of spin.

00:21:00.965 --> 00:21:02.675
I'll just refresh this
one more time.

00:21:05.640 --> 00:21:09.100
Go to Saved File Merge, there
it is, school locations.

00:21:09.100 --> 00:21:10.590
I'm going to say Next.

00:21:10.590 --> 00:21:12.880
And what that's going to do is
scan the data, in both the

00:21:12.880 --> 00:21:15.640
different data sets, and say
which column do you want to

00:21:15.640 --> 00:21:17.480
use as a source of match?

00:21:17.480 --> 00:21:20.960
So I'm going to say, school here
and school on the right

00:21:20.960 --> 00:21:22.040
side as well.

00:21:22.040 --> 00:21:26.200
Think of it as a visual join,
in this case, for example.

00:21:26.200 --> 00:21:27.500
I'm going to say Next.

00:21:27.500 --> 00:21:31.300
And then it's adding in a new
column called location for me.

00:21:31.300 --> 00:21:32.340
And this is actually cool.

00:21:32.340 --> 00:21:35.190
Because what it does now is
creates a whole new Fusion

00:21:35.190 --> 00:21:38.810
Table that is a fused version
of two different tables.

00:21:38.810 --> 00:21:41.780
And I can say, View Tables.

00:21:41.780 --> 00:21:45.270
And it'll name it as Merge of
Student Information Systems

00:21:45.270 --> 00:21:46.600
and School Location.

00:21:46.600 --> 00:21:49.330
Now I have a new column
called location.

00:21:49.330 --> 00:21:53.210
And it already added in
a view that's a map.

00:21:53.210 --> 00:21:56.470
So that's one of the, I think,
very impressive things about

00:21:56.470 --> 00:21:59.200
Fusion Table is that it's smart
enough to see things

00:21:59.200 --> 00:22:02.868
like location and address and
automatically geocode that.

00:22:02.868 --> 00:22:03.286
SREERAM BALAKRISHNAN: Yeah.

00:22:03.286 --> 00:22:06.710
Sometimes, if you're uploading
a lot of rows, it takes a

00:22:06.710 --> 00:22:08.350
while to geocode them all.

00:22:08.350 --> 00:22:10.760
So you'll see a little
dialer that comes up.

00:22:10.760 --> 00:22:12.280
But if it's just a
few, then it--

00:22:12.280 --> 00:22:14.940
ARUN NAGARAJAN: In this example,
since I live and work

00:22:14.940 --> 00:22:17.130
in New York, I just was able
to make up those fake

00:22:17.130 --> 00:22:19.500
addresses better than
anything else.

00:22:19.500 --> 00:22:23.850
But I thought that was really
brilliant, where partial,

00:22:23.850 --> 00:22:30.040
incomplete addresses, like 34
W 42 or something even more

00:22:30.040 --> 00:22:33.380
obscure, that only had zipcode,
119 Madison and

00:22:33.380 --> 00:22:38.690
zipcode, all that became
a nice contextual map.

00:22:38.690 --> 00:22:44.520
And over here, I can then
say, Filter by Grade.

00:22:44.520 --> 00:22:47.015
And I can say, show me--

00:22:47.015 --> 00:22:49.290
and I can throw in another
filter as well.

00:22:49.290 --> 00:22:54.020
Let's say filter by subject.

00:22:54.020 --> 00:22:57.230
So I can say, show me where
English grades are

00:22:57.230 --> 00:23:01.270
between 90 and 95.

00:23:01.270 --> 00:23:03.760
And you can see that two of
the schools disappear.

00:23:03.760 --> 00:23:08.300
So these three schools, there
are a few students that are

00:23:08.300 --> 00:23:13.420
achieving between 90 and 95%
grade on their English topic.

00:23:13.420 --> 00:23:15.850
So we built a very simple
visualization

00:23:15.850 --> 00:23:17.090
that allows me to.

00:23:17.090 --> 00:23:20.035
And, obviously, for five
schools, not that impressive.

00:23:20.035 --> 00:23:22.780
But when you have hundreds of
points on the map, you can

00:23:22.780 --> 00:23:24.250
start seeing some clustering.

00:23:24.250 --> 00:23:25.450
SREERAM BALAKRISHNAN: Well,
the thing is that you can

00:23:25.450 --> 00:23:28.960
color the icons based on
the score as well.

00:23:28.960 --> 00:23:32.790
WARREN SHEN: So you can
customize how the map looks

00:23:32.790 --> 00:23:34.890
with different styling.

00:23:34.890 --> 00:23:36.760
ARUN NAGARAJAN: And all this
can be built, with the map,

00:23:36.760 --> 00:23:38.130
with the API as well, right?

00:23:38.130 --> 00:23:39.710
WARREN SHEN: Both the API and
the UI, you can do it, yes.

00:23:39.710 --> 00:23:40.650
ARUN NAGARAJAN: So in
this example, I'm

00:23:40.650 --> 00:23:42.110
just building it manually.

00:23:42.110 --> 00:23:43.310
WARREN SHEN: But everything
you did here, you

00:23:43.310 --> 00:23:44.260
can do with the API.

00:23:44.260 --> 00:23:45.810
ARUN NAGARAJAN: That's
really, really cool.

00:23:45.810 --> 00:23:46.680
SREERAM BALAKRISHNAN: And the
other thing that you can do

00:23:46.680 --> 00:23:49.170
here is you can publish this.

00:23:49.170 --> 00:23:52.220
And you'll get an embeddable
version of it, so something

00:23:52.220 --> 00:23:53.800
that you can put into
your own site.

00:23:53.800 --> 00:23:54.290
ARUN NAGARAJAN: That's great.

00:23:54.290 --> 00:23:55.850
Yeah, the publish aspect,
I think, is

00:23:55.850 --> 00:23:57.800
really powerful as well.

00:23:57.800 --> 00:24:00.330
Because it's not something
that is

00:24:00.330 --> 00:24:01.720
restricted to just you.

00:24:01.720 --> 00:24:04.140
It can be embedded into
a Google site.

00:24:04.140 --> 00:24:07.240
It can be sent out as a
link in a newsletter.

00:24:07.240 --> 00:24:11.170
So it's really good at spreading
the love there,

00:24:11.170 --> 00:24:12.350
which is great.

00:24:12.350 --> 00:24:15.690
Let me show you one other thing,
which is, now, we wrote

00:24:15.690 --> 00:24:17.220
the system.

00:24:17.220 --> 00:24:19.760
In the code, itself, you'll
see that it's a lot of

00:24:19.760 --> 00:24:23.030
boilerplate stuff that manages
the login and stuff like that.

00:24:23.030 --> 00:24:26.750
But the actual download
part is plain, run the

00:24:26.750 --> 00:24:28.340
SQL, get the data.

00:24:28.340 --> 00:24:30.990
And it's one call to get it
as a JavaScript Object.

00:24:30.990 --> 00:24:34.260
And you just loop through
and add the rows.

00:24:34.260 --> 00:24:38.030
The update uses a little trick
that allows you to track on

00:24:38.030 --> 00:24:40.280
edit, based on the
trigger on edit.

00:24:40.280 --> 00:24:43.020
And then you can just store, if
it's something that I care

00:24:43.020 --> 00:24:44.950
for, if the grade column
is updated.

00:24:44.950 --> 00:24:48.560
It is a pretty naive tracker,
but you can definitely improve

00:24:48.560 --> 00:24:50.210
it and add a lot more
resilience to it.

00:24:50.210 --> 00:24:53.140
But hopefully, this is giving
you some inspiration to do

00:24:53.140 --> 00:24:54.620
things like this.

00:24:54.620 --> 00:24:58.400
And then there's the code that
uploads and then logs what it

00:24:58.400 --> 00:25:00.040
is uploading.

00:25:00.040 --> 00:25:03.280
And then the rest is all just
the OAuth2 [? dance ?]

00:25:03.280 --> 00:25:04.990
that needs to be maintained.

00:25:04.990 --> 00:25:08.040
One of the other things, that
I talked about briefly, was

00:25:08.040 --> 00:25:10.230
the ability to filter data.

00:25:10.230 --> 00:25:15.790
And the idea here is that, if I
am the principal for school

00:25:15.790 --> 00:25:18.510
A, I should only see grades
for school A.

00:25:18.510 --> 00:25:19.810
In this, it's very insecure.

00:25:19.810 --> 00:25:23.340
I put the code to filter in
the main class, itself.

00:25:23.340 --> 00:25:25.820
But you can pull in libraries,
which allows you to silo this

00:25:25.820 --> 00:25:28.810
out really nicely, the
logic for security.

00:25:28.810 --> 00:25:30.740
But you can see that, at the
very end of it, I just have a

00:25:30.740 --> 00:25:34.290
little JavaScript map object
that tracks the account

00:25:34.290 --> 00:25:36.740
information to the
school name.

00:25:36.740 --> 00:25:40.290
So what I can show here is, if
I take this spreadsheet--

00:25:40.290 --> 00:25:44.990
and I'll just empty this out,
go to share, send it to

00:25:44.990 --> 00:25:50.880
another account that I have,
and copy that URL.

00:25:50.880 --> 00:25:53.740
Same spreadsheet, so all the
scripts come through as well.

00:25:53.740 --> 00:25:56.730
Let me go to another window
I have here and

00:25:56.730 --> 00:25:59.220
go into this tab.

00:25:59.220 --> 00:26:02.230
So here, I'm logged in as a
arun.at.pyxis@gmail.com.

00:26:02.230 --> 00:26:05.540
The other one was
arun.apps-script@gmail.com.

00:26:05.540 --> 00:26:08.290
And the menu automatically
popped up, because that's

00:26:08.290 --> 00:26:10.770
registered to the
On Open trigger.

00:26:10.770 --> 00:26:13.660
And if I say, login here.

00:26:13.660 --> 00:26:16.260
Because I do have to establish
my credentials as

00:26:16.260 --> 00:26:18.046
this account now.

00:26:18.046 --> 00:26:20.490
It takes a couple clicks.

00:26:20.490 --> 00:26:21.740
Should be quick.

00:26:28.290 --> 00:26:30.980
And then I can now
download data.

00:26:30.980 --> 00:26:35.150
And this data comes from Short
Hills Prep, right?

00:26:35.150 --> 00:26:37.730
So this is not something
that is the same.

00:26:37.730 --> 00:26:39.420
It's not the same data
that the other

00:26:39.420 --> 00:26:40.920
spreadsheet was able to fetch.

00:26:40.920 --> 00:26:44.290
And from here, I can actually
upload data.

00:26:44.290 --> 00:26:47.870
So I'll just change this to say
something really low, so

00:26:47.870 --> 00:26:49.400
we can filter it out easily.

00:26:49.400 --> 00:26:51.770
So student ID is 1,009.

00:26:51.770 --> 00:26:54.595
And I'll say upload
to Fusion Tables.

00:26:57.220 --> 00:26:58.130
And that should go through.

00:26:58.130 --> 00:27:00.400
And just row road
goes through.

00:27:00.400 --> 00:27:04.410
And whoa.

00:27:04.410 --> 00:27:06.720
Well, let's see if
it went through.

00:27:06.720 --> 00:27:08.330
There was an error
message there.

00:27:08.330 --> 00:27:13.200
But now, when I come in here
and, first of all, just find

00:27:13.200 --> 00:27:19.085
if there's any, for all
subjects, anything within 30

00:27:19.085 --> 00:27:22.730
and 40 and 35, let's say.

00:27:22.730 --> 00:27:24.680
Let's say 25.

00:27:24.680 --> 00:27:26.860
And there should be
just one school.

00:27:26.860 --> 00:27:29.392
And that came in.

00:27:29.392 --> 00:27:35.280
Let's see, if I refresh this and
if I hit Find again, maybe

00:27:35.280 --> 00:27:36.930
updated the same record.

00:27:36.930 --> 00:27:41.630
But what I'm trying to show here
is the ability for the

00:27:41.630 --> 00:27:48.620
data, that still gets pushed
to the original source gets

00:27:48.620 --> 00:27:50.810
pushed into the merged
version as well.

00:27:50.810 --> 00:27:54.240
So the source of record is still
the same, even though

00:27:54.240 --> 00:27:57.180
you may be merging it and
visualizing downstream in

00:27:57.180 --> 00:27:58.630
other systems.

00:27:58.630 --> 00:28:04.360
So even after we created this
geospatial merged version,

00:28:04.360 --> 00:28:07.320
when I was still pushing to
the main source of student

00:28:07.320 --> 00:28:10.110
information, it's getting
trickled down automatically.

00:28:10.110 --> 00:28:11.000
WARREN SHEN: It all gets
propagated throughout.

00:28:11.000 --> 00:28:12.370
ARUN NAGARAJAN: So you guys
take care of that.

00:28:12.370 --> 00:28:14.250
And I'm not sure what
happened there.

00:28:14.250 --> 00:28:16.320
Let's see if I can find
that student and see

00:28:16.320 --> 00:28:17.630
if that data updated.

00:28:17.630 --> 00:28:20.830
But some network error or
something like that.

00:28:20.830 --> 00:28:23.620
But I can vouch for the
fact that it did work.

00:28:23.620 --> 00:28:24.800
SREERAM BALAKRISHNAN: You can
change it in here, too.

00:28:24.800 --> 00:28:26.140
ARUN NAGARAJAN: Yeah, I can
change it in here as well.

00:28:26.140 --> 00:28:28.030
Yeah, that's another
way to do it.

00:28:28.030 --> 00:28:30.860
So, hopefully, that
all made sense.

00:28:30.860 --> 00:28:33.070
All this code is, of course,
available for you to start

00:28:33.070 --> 00:28:36.110
playing around and get a sense
for what's possible in Fusion

00:28:36.110 --> 00:28:38.080
Table, what's possible
in Apps Script.

00:28:38.080 --> 00:28:41.370
The magic in Apps Script is
all using URL fetch, which

00:28:41.370 --> 00:28:43.510
allows you call third
party systems.

00:28:43.510 --> 00:28:46.420
And then if it's JSON, it's just
a JavaScript Object that

00:28:46.420 --> 00:28:47.820
you can parse easily.

00:28:47.820 --> 00:28:50.270
In this example, we integrated
with spreadsheets.

00:28:50.270 --> 00:28:52.010
But it could be a Google site.

00:28:52.010 --> 00:28:55.120
It could be a bunch of documents
that you have in

00:28:55.120 --> 00:28:56.090
your drive.

00:28:56.090 --> 00:28:58.540
It could be a Google Doc,
itself, so create a nice

00:28:58.540 --> 00:29:00.220
summary report in a doc.

00:29:00.220 --> 00:29:01.720
There are a lot of different
things that you can

00:29:01.720 --> 00:29:03.855
really do with this.

00:29:03.855 --> 00:29:04.820
So did this all make sense?

00:29:04.820 --> 00:29:06.956
Anything that I forgot?

00:29:06.956 --> 00:29:08.210
SREERAM BALAKRISHNAN: I just
want to mention that one of

00:29:08.210 --> 00:29:11.600
the nice extensions that we
have to SQL is we have

00:29:11.600 --> 00:29:13.170
geospatial queries to call.

00:29:13.170 --> 00:29:16.120
So you can say, find me all
schools that are within a

00:29:16.120 --> 00:29:18.430
certain distance of
this point or

00:29:18.430 --> 00:29:19.735
contained within this polygon.

00:29:22.370 --> 00:29:24.520
That's a functionality you'll
not find with a traditional

00:29:24.520 --> 00:29:25.880
SQL database.

00:29:25.880 --> 00:29:26.300
ARUN NAGARAJAN: That's right.

00:29:26.300 --> 00:29:28.470
And that's really where the
power of a lot of the systems

00:29:28.470 --> 00:29:32.090
that we have, maps and the
ability to store a lot of

00:29:32.090 --> 00:29:34.350
data, come together in a
powerful application.

00:29:34.350 --> 00:29:35.660
SREERAM BALAKRISHNAN: Certainly,
right You can

00:29:35.660 --> 00:29:38.680
imagine a mobile app developer
could get a lot

00:29:38.680 --> 00:29:39.250
of use out of this.

00:29:39.250 --> 00:29:46.130
So you might have a bunch of
data that has properties about

00:29:46.130 --> 00:29:47.520
certain locations.

00:29:47.520 --> 00:29:50.560
And then your app, on the mobile
device, can select the

00:29:50.560 --> 00:29:52.490
ones that are near
to where you are.

00:29:52.490 --> 00:29:54.310
So show me all the
information--

00:29:54.310 --> 00:29:57.090
you'll just see the view of the
data that's within five

00:29:57.090 --> 00:29:58.260
miles of where you are.

00:29:58.260 --> 00:30:00.590
And that's a very simple thing
to do using our API.

00:30:00.590 --> 00:30:01.940
ARUN NAGARAJAN: And you can
just pass in latitude and

00:30:01.940 --> 00:30:03.150
longitude and the coordinates?

00:30:03.150 --> 00:30:04.070
WARREN SHEN: Yeah, there's
a function.

00:30:04.070 --> 00:30:05.250
And then you [INAUDIBLE]

00:30:05.250 --> 00:30:08.130
want it or the lat-long,
which are in the

00:30:08.130 --> 00:30:09.540
geopoints that are--

00:30:09.540 --> 00:30:10.520
ARUN NAGARAJAN: That's great.

00:30:10.520 --> 00:30:11.840
So our time is short.

00:30:11.840 --> 00:30:13.100
I think we're coming
up on our time.

00:30:13.100 --> 00:30:16.260
But we were able to scratch the
surface of what's possible

00:30:16.260 --> 00:30:17.730
in the API.

00:30:17.730 --> 00:30:20.270
And hopefully, you were able to
take a lot of what you saw

00:30:20.270 --> 00:30:21.820
and learned and build
some really

00:30:21.820 --> 00:30:23.160
interesting and cool things.

00:30:23.160 --> 00:30:25.290
Do share with us on what
you have built.

00:30:25.290 --> 00:30:28.590
There's some really good
resources on the Fusion Table

00:30:28.590 --> 00:30:29.810
side of things.

00:30:29.810 --> 00:30:32.160
WARREN SHEN: There's a user
group and Stack Overflow, get

00:30:32.160 --> 00:30:32.870
questions answered.

00:30:32.870 --> 00:30:33.170
ARUN NAGARAJAN: That's great.

00:30:33.170 --> 00:30:35.180
Yeah, the Stack Overflow
resource is actually great,

00:30:35.180 --> 00:30:38.170
especially with the API, a great
place for developers to

00:30:38.170 --> 00:30:41.840
help each other and the Google
Developers to monitor it.

00:30:41.840 --> 00:30:44.400
Check out a lot of these talks
and workshops that the team

00:30:44.400 --> 00:30:46.240
has given in the past.

00:30:46.240 --> 00:30:48.920
A lot of videos and, I'm sure,
there's a lot of good code

00:30:48.920 --> 00:30:51.570
here that you can start
with as well.

00:30:51.570 --> 00:30:54.110
And there's a really interesting
set of examples,

00:30:54.110 --> 00:30:57.930
that the team has shared, that
are from government sources,

00:30:57.930 --> 00:31:01.130
from schools, from independent
journalists.

00:31:01.130 --> 00:31:03.710
So certainly take a look at that
as well to learn more.

00:31:03.710 --> 00:31:05.610
I can't wait to see what
you guys build.

00:31:05.610 --> 00:31:07.010
Thank you very much
for joining in.

00:31:07.010 --> 00:31:08.500
And thank you guys
for joining in.

00:31:08.500 --> 00:31:09.065
WARREN SHEN: Thanks
for having us.

00:31:09.065 --> 00:31:10.315
SREERAM BALAKRISHNAN:
Thank you.

00:31:18.660 --> 00:31:22.115
[MUSIC PLAYING]

