WEBVTT
Kind: captions
Language: en

00:00:05.424 --> 00:00:06.481
Cool.

00:00:06.481 --> 00:00:11.700
So, I've gone ahead and put together a little bit of a website.

00:00:11.700 --> 00:00:14.510
It may not look like much because it was made with Legos but

00:00:14.510 --> 00:00:18.240
it's actually following the same principles that we're learning in this class.

00:00:18.240 --> 00:00:21.950
This green piece in the background represents the browser window.

00:00:21.950 --> 00:00:25.710
We can see that the browser here is actually a little bit wider than the page.

00:00:25.710 --> 00:00:29.170
Remember a lot of websites like to center themselves in the page.

00:00:29.170 --> 00:00:31.660
So they have content that fits a certain amount of space.

00:00:31.660 --> 00:00:33.090
And if your browser is wider than that,

00:00:33.090 --> 00:00:35.050
well there's just a little bit of space left over.

00:00:35.050 --> 00:00:36.370
And that's okay.

00:00:36.370 --> 00:00:39.320
But we have a lot of options for the way we want to lay out our content.

00:00:39.320 --> 00:00:42.210
It could be in just one long big column like this that takes up

00:00:42.210 --> 00:00:43.860
the entire width.

00:00:43.860 --> 00:00:47.140
Or it could be two half columns you know, 50-50.

00:00:47.140 --> 00:00:50.510
Or why not break it into thirds like we have here?

00:00:50.510 --> 00:00:53.990
Or even smaller pieces, in this case it's broken into six.

00:00:53.990 --> 00:00:57.220
We could do a very popular design where we have one narrow column and

00:00:57.220 --> 00:00:59.340
then one wide column.

00:00:59.340 --> 00:01:02.470
Or we could just do some kind of other crazy design that

00:01:02.470 --> 00:01:04.910
doesn't really follow any of these patterns.

00:01:04.910 --> 00:01:09.070
The point being is that what we want to do is build a grid system that gives us

00:01:09.070 --> 00:01:13.250
the flexibility to make any of the column designs that you see here.

00:01:13.250 --> 00:01:17.620
Let's start thinking about how to implement Responsive Design using CSS.

00:01:17.620 --> 00:01:21.660
In order for a website to resize based on the size of the browser, we're not

00:01:21.660 --> 00:01:26.850
going to be able to use a fixed pixel size to determine the width of columns.

00:01:26.850 --> 00:01:31.160
Instead we'll have to use percentages to decide how wide our columns should be.

00:01:31.160 --> 00:01:34.190
Once again, we're back on the reddit homepage.

00:01:34.190 --> 00:01:37.420
And let's see if we can make this column on the right responsive instead of

00:01:37.420 --> 00:01:39.270
keeping it at a fixed width.

00:01:39.270 --> 00:01:41.780
I'm going to go ahead and right click on it.

00:01:41.780 --> 00:01:46.070
Anywhere in here and hit Inspect Element to pull up the console.

00:01:46.070 --> 00:01:51.050
Aha, and we can see that the element of the class side is the side bar.

00:01:51.050 --> 00:01:53.110
we can see it highlighted right here.

00:01:53.110 --> 00:01:54.360
Let's see if we can change its width.

00:01:54.360 --> 00:01:56.390
I'll come over here and scroll down.

00:01:56.390 --> 00:02:01.020
We find the CSS property called width and currently it's set to 300 pixels.

00:02:01.020 --> 00:02:04.060
Remember, you can change websites using DevTools, so let's go ahead and

00:02:04.060 --> 00:02:05.400
change this one right now.

00:02:05.400 --> 00:02:08.800
I'll double click and instead of 300 pixels, I'm going to set it to 24%.

00:02:08.800 --> 00:02:13.060
And the reason I'm doing 24% is 300 pixels is

00:02:13.060 --> 00:02:17.677
actually 24% of this screen's resolution that you're looking at.

00:02:17.677 --> 00:02:20.950
So 24% keeps this column at the same size.

00:02:20.950 --> 00:02:22.520
I'll press Enter and it looks the same.

00:02:22.520 --> 00:02:24.570
Let me get rid of Dev Tools.

00:02:24.570 --> 00:02:28.280
So now I'm going to resize the screen, but this column on the right

00:02:28.280 --> 00:02:32.960
is actually going to resize responsively instead of staying at a fixed width.

00:02:32.960 --> 00:02:34.870
This time, when we made the screen smaller,

00:02:34.870 --> 00:02:37.080
we see that this column got smaller as well.

00:02:37.080 --> 00:02:40.370
It didn't stay at the same size because we used a percentage to

00:02:40.370 --> 00:02:41.680
define its width.

00:02:41.680 --> 00:02:44.380
It's pretty common to see websites with grid systems that allow for

00:02:44.380 --> 00:02:47.440
either two, three, or four columns.

00:02:47.440 --> 00:02:50.660
As well as websites that use one narrow column and then one wide column.

00:02:50.660 --> 00:02:52.450
Which in this case, would take up the other three.

00:02:53.660 --> 00:02:54.910
The Udacity homepage, for

00:02:54.910 --> 00:02:58.290
example, uses four columns to highlight our featured courses.

00:02:58.290 --> 00:03:00.260
If you go to our course catalog,

00:03:00.260 --> 00:03:03.950
you'll notice that we have one narrow column and then one wide column.

00:03:03.950 --> 00:03:05.750
This one takes up about a quarter of the screen,

00:03:05.750 --> 00:03:08.270
while this guy takes up the other three quarters.

00:03:08.270 --> 00:03:11.240
On the Coursera home page, you'll see an example of three columns.

00:03:11.240 --> 00:03:14.280
They've got their courses laid out in three even columns.

00:03:14.280 --> 00:03:17.260
Which of the following grid sizes is going to allow for

00:03:17.260 --> 00:03:19.290
just enough customization?

00:03:19.290 --> 00:03:22.230
Meaning that we'll be able to get those common two, three,

00:03:22.230 --> 00:03:25.780
four column wide screens and have enough flexibility to do them however we

00:03:25.780 --> 00:03:29.550
want without adding overhead of columns that we're never going to use.

00:03:29.550 --> 00:03:31.875
Do you think five columns is enough?

00:03:31.875 --> 00:03:34.720
8 columns, 12 columns or

00:03:34.720 --> 00:03:38.200
do you think that we need 20 columns to get the customization we need?

