WEBVTT
Kind: captions
Language: en

00:00:00.060 --> 00:00:02.420
So we had some good feedback from the video

00:00:02.520 --> 00:00:03.980
On WannaCryptor

00:00:03.980 --> 00:00:06.480
but, some questions about basically what it is,

00:00:06.540 --> 00:00:08.260
what it does, from an encryption point of view.

00:00:08.260 --> 00:00:10.780
and that, actually is a quite interesting topic

00:00:10.960 --> 00:00:13.840
because what it does is similar; obviously slightly different.

00:00:13.880 --> 00:00:15.520
but similar to what most of the other ransomware does, as well.

00:00:16.680 --> 00:00:19.000
So I thought we'd cover, pretty much

00:00:19.000 --> 00:00:21.000
sort of the basics of what it is that ransomware does

00:00:21.000 --> 00:00:24.480
beyond it just has a private key and encrypts your data.

00:00:24.480 --> 00:00:26.460
which is obviously, sort of, the assumption

00:00:30.160 --> 00:00:32.260
We'll perhaps start with a

00:00:32.380 --> 00:00:36.840
look at a really rubbish one that I'm making up as I go along and we'll kind of build it up into a system that

00:00:36.840 --> 00:00:42.509
Kind of makes sense, and you'll see hopefully how it uses both symmetric and asymmetric or public key cryptography

00:00:43.059 --> 00:00:45.059
combined to try and

00:00:45.460 --> 00:00:50.820
produce an effective exploit. Okay, so let's imagine that I wanted to write a

00:00:51.620 --> 00:00:56.060
Piece of Ransomware - which I don't,  I should add?

00:00:56.880 --> 00:00:59.180
I don't think people should be writing ransomware, but

00:01:00.040 --> 00:01:06.180
But knowing a bit about how it works is quite a good way of understanding a bit about how cryptography works. There's really two major

00:01:07.450 --> 00:01:11.460
types of cryptography that we see a lot of like symmetric encryption and asymmetric encryption

00:01:11.500 --> 00:01:14.519
[I] will put hash functions aside for one for one day

00:01:15.340 --> 00:01:19.140
so symmetric encryption quite simply have one key for

00:01:19.900 --> 00:01:24.480
Encryption and the same key for decryption. All right? So a AES is a good example of an

00:01:25.080 --> 00:01:29.100
symmetric block cipher that people use a lot of at the moment.

00:01:30.189 --> 00:01:36.959
Asymmetric Encryption or public key cryptography is where we have a separate key for encryption and another key for decryption?

00:01:37.540 --> 00:01:42.329
And that has numerous benefits in some circumstances and drawbacks in other circumstances

00:01:43.540 --> 00:01:46.140
So what WannaCryptor does

00:01:46.140 --> 00:01:51.020
is combine both of these things to try and get a solution that first of all will run offline,

00:01:51.120 --> 00:01:55.680
so if they're not connected to their command and control servers they can still encrypt your disk and

00:01:55.960 --> 00:02:00.600
theoretically decrypt it later  - although the jury's out whether they actually will bother.

00:02:00.600 --> 00:02:04.259
So let's imagine that we're writing to some  ransomeware, right? The first thing

00:02:04.259 --> 00:02:06.259
we could do is we could choose an

00:02:06.310 --> 00:02:12.089
Symmetric Encryption cipher like AES, right? We could say what we're going to use AES and to do that

00:02:12.090 --> 00:02:15.620
We need a symmetric key, so I could developer. I'm programming this up

00:02:15.620 --> 00:02:17.610
I could write a piece of code that

00:02:17.610 --> 00:02:21.139
Searches through all the files on someone's hard disk and for files of a certain type

00:02:21.140 --> 00:02:24.200
I could replace that file with a copy of that file

00:02:24.200 --> 00:02:26.130
That's been passed through this cipher

00:02:26.130 --> 00:02:31.880
so I need to come up with a key so I generate the key. So let's call it Ks for the symmetric key.

00:02:31.880 --> 00:02:36.529
The difficulty here is if I'm going to use this key to encrypt people's data. It needs to have access to it

00:02:36.620 --> 00:02:40.960
So either this needs to be sent to the malware as it's running

00:02:41.280 --> 00:02:45.560
in which case there's going to be a compromise that the the keys been sent over network

00:02:45.660 --> 00:02:51.100
Hopefully people (researchers) could find it on the network, and then use it to decrypt someone's files without having to pay any money

00:02:52.740 --> 00:02:58.189
Alternatively, it's a very naive approach you could just bury it inside the code. People do this a lot.  There are actual

00:02:58.189 --> 00:03:00.700
ransom wares that have done this it's not the best approach

00:03:01.160 --> 00:03:03.640
So you basically put this string Ks

00:03:03.720 --> 00:03:04.820
somewhere in the code

00:03:04.820 --> 00:03:11.840
And then the ransomware is able to encrypt it and - when it wants to - decrypt the files. All right now obviously

00:03:12.200 --> 00:03:14.200
that's not a good solution because

00:03:15.210 --> 00:03:19.579
Anyone disassembling this code - and researchers do this within minutes of code being released -

00:03:20.430 --> 00:03:25.070
Will immediately find this string and then tell everyone: "Oh look, the keys in this file"

00:03:25.070 --> 00:03:30.019
Well, let's just decrypt it this way. And then write another tool which uses the same function and the same key

00:03:30.060 --> 00:03:35.900
So that's not a good solution. To improve on this slightly, we can bring asymmetric encryption in. So this is our first attempt

00:03:36.140 --> 00:03:39.680
I'm working my way towards something competent, so don't judge me yet.

00:03:39.840 --> 00:03:45.620
So in asymmetric encryption we have two keys:  We have a public key and a key private

00:03:45.620 --> 00:03:48.440
Now, as long as the private key is kept secret

00:03:48.570 --> 00:03:51.559
then in some ways we can encrypt everyone's files with the public key

00:03:51.560 --> 00:03:55.550
And when they play the Ransom give them the private key. That's kind of a general idea.

00:03:55.950 --> 00:03:58.069
So early  ransom ware worked this way.

00:03:58.080 --> 00:04:03.619
So when when the ransomware started it would generate a public and private key pair

00:04:03.860 --> 00:04:06.740
It would send the private key off to a server somewhere

00:04:06.960 --> 00:04:13.180
To hold it for Ransom and then it would encrypt everything with the public key. This usually uses RSA there are other options?

00:04:15.240 --> 00:04:17.570
We won't talk about the mathematics of RSA

00:04:17.850 --> 00:04:22.129
Except to say that it's being very very difficult to calculate this private Key given only this one

00:04:22.130 --> 00:04:24.350
so if you're not watching this when it gets installed

00:04:24.750 --> 00:04:30.830
This private key is gone and all you can see is the public key, and then you're in a bit of trouble now

00:04:30.830 --> 00:04:32.869
There's a few downsides to this the first is that

00:04:33.450 --> 00:04:37.459
Asymmetric Encryption is quite slow right the mathematics involved in RSA is

00:04:38.430 --> 00:04:40.040
It's not too bad on a computer

00:04:40.040 --> 00:04:45.170
But we do it generally for smaller messages. If you were trying to include a lot of someone's files with this it would take quite

00:04:45.170 --> 00:04:46.260
a long time

00:04:46.260 --> 00:04:51.080
And also you have to have a connection to your commander control server if you're

00:04:51.690 --> 00:04:53.360
Malware is running and let's say

00:04:53.360 --> 00:04:59.599
They're temporarily not on a wi-Fi or something like this, then what happens is it tries to upload this private key?

00:04:59.600 --> 00:05:05.629
And it can't so one [of] two things happens, [then] either. It has to stop or it just encrypts everything with the public key and

00:05:06.180 --> 00:05:08.130
we lose the private key or

00:05:08.130 --> 00:05:10.339
The private key has to be temporarily stored on a disk

00:05:10.530 --> 00:05:14.989
which isn't going to work well for holding it for Ransom, right? None of these solutions are very very good, so

00:05:15.060 --> 00:05:17.780
That isn't a very good solution either. It's a bit slow

00:05:17.780 --> 00:05:22.880
And there's an issue of trying to upload this to a command control server, and how we're going to do that

00:05:23.430 --> 00:05:25.430
so what modern

00:05:25.500 --> 00:05:30.440
Ransomware does - and this is not exclusive to Ransom where lots of encryption schemes work this way -

00:05:30.440 --> 00:05:34.060
is a hybrid encryption scheme where the majority of the encryption so the actual

00:05:34.070 --> 00:05:41.239
encryption of your files will be done with AES or some symmetric cipher and that key will be protected by public key cryptography, so

00:05:42.030 --> 00:05:48.589
You're holding [one] of these private keys for Ransom and when you get it back you can then unencrypt Ks and unencrypt the files

00:05:48.590 --> 00:05:49.560
That's the idea

00:05:49.560 --> 00:05:53.359
So this is what WannaCryptor does. So WannaCryptor, when it's off in a directory,

00:05:53.360 --> 00:05:57.260
it starts undertaking lots of different tasks. One of the tasks

00:05:57.260 --> 00:06:01.580
It does is start up threads for trying to spread itself using the eternal blue exploit

00:06:01.620 --> 00:06:07.910
But the majority of the work in terms of Encryption is separate to that. And what it will do from inside its own

00:06:08.400 --> 00:06:09.950
Executable it will extract a zip file

00:06:09.950 --> 00:06:16.009
Which is also encrypted it would decrypt this using a password and then [it] will extract those files

00:06:16.010 --> 00:06:19.789
Now they hold things like hard coded bitcoin addresses that we know about that

00:06:19.790 --> 00:06:24.769
You're supposed to be paying this ransome, hard coded public keys of the server (which I'll talk about in a moment)

00:06:25.580 --> 00:06:29.839
the addresses, the tor addresses of the server for the tor hidden services

00:06:30.810 --> 00:06:33.769
It extract all of these things and then it gets to work, encrypting your files

00:06:34.440 --> 00:06:37.640
So the first thing it does is it generates an RSA key pair.

00:06:37.800 --> 00:06:40.700
[If I start a new page, then then we won't be confused with my terminology

00:06:41.240 --> 00:06:43.240
that essentially I'm making up as we go along, so...]

00:06:44.940 --> 00:06:47.920
[Did you solve that Rubik's cube since we were here?]

00:06:48.680 --> 00:06:50.620
[I changed a couple of pieces around

00:06:50.630 --> 00:06:52.160
I haven't solved the rubics cube yet,

00:06:52.160 --> 00:06:56.920
I could but I like to annoy people with having it unsolved on the shelf it also takes me quite a long time]

00:06:56.960 --> 00:07:00.840
So okay, so when WannaCryptor installs itself and it starts running

00:07:00.860 --> 00:07:04.639
It needs to generate some keys, that it's going to use to encrypt your files

00:07:04.639 --> 00:07:10.879
The first thing it does is generate a public and private key pair for this infection. And these are for the client all right?

00:07:10.880 --> 00:07:18.440
So let's call them C_pub and C_private it. So we've generated a public key and a private key right?

00:07:18.700 --> 00:07:21.080
Now these are 2048bit RSA Keys

00:07:22.050 --> 00:07:26.240
Skipping over the math a little bit to try and calculate the private key if we didn't have it

00:07:26.250 --> 00:07:28.250
We would have to solve a very large

00:07:28.560 --> 00:07:29.819
integer factorization problem

00:07:29.819 --> 00:07:32.539
which is not happening, sufficed] to say.

00:07:33.000 --> 00:07:37.880
Normally, what a ransom-ware would do now is, with this private key off to a command-and-control server,

00:07:38.660 --> 00:07:43.960
Delete it so that we never get it back unless we pay a ransom and then encrypt everything with this public key.

00:07:44.100 --> 00:07:47.060
but in a hybrid encryption scheme we work slightly differently

00:07:47.440 --> 00:07:53.780
Stored inside the executable is a server's public key, this is a command and control server

00:07:53.780 --> 00:07:58.720
So this that we have here is S_pub. Now this public key has an associated private key

00:07:58.729 --> 00:08:00.769
But we have no idea what it is, right?

00:08:00.770 --> 00:08:07.009
it's stored somewhere on one [of] those command and control servers or all of those command and control servers and these were generated [when] the

00:08:07.009 --> 00:08:09.649
Ransomware was created a while ago  [End of manually checked subtitles]

00:08:09.650 --> 00:08:12.440
So the client public and private keys are generated on the fly

00:08:12.630 --> 00:08:19.159
[for] every time it installs itself on anyone's machine the server's public key is stored inside the executable and it's always the same

00:08:19.530 --> 00:08:20.280
and it's

00:08:20.280 --> 00:08:25.969
Associated with a service private key hidden somewhere else that we haven't got access [to] if only we did it's worth mentioning at this point

00:08:25.969 --> 00:08:31.939
That if we could find the server and get this private key that would be good news right we could decrypt everyone's around

00:08:32.490 --> 00:08:34.490
Ransoms files perfect

00:08:34.709 --> 00:08:41.359
it's hidden on the dark web, [right] so the onion addresses that are supplied hard coded into one a krypter point to

00:08:41.880 --> 00:08:43.440
servers somewhere on the Planet

00:08:43.440 --> 00:08:45.360
But we don't really know where right

00:08:45.360 --> 00:08:51.349
We will deal with hidden services on another video because I think it's a real interesting topic what the client then does what one equipped?

00:08:51.350 --> 00:08:53.350
Er does it's got to try and protect this

00:08:53.610 --> 00:08:58.440
Key so that it can hold it to Ransom so what it does is it encrypts it with the server's public key

00:08:58.440 --> 00:09:03.899
So let's say it takes these down here and it produces [f] pub of C

00:09:04.269 --> 00:09:08.759
Private like this is my strange notation [that]. I'm sort of making up. This is kind of [right] business

00:09:09.940 --> 00:09:15.570
So this is encryption right and we've encrypted this private key with the public key all right. So now it's totally useless

00:09:15.640 --> 00:09:16.959
It's completely mangled

00:09:16.959 --> 00:09:21.029
We can't use it remember that in RSA these perform the opposite tasks

00:09:21.029 --> 00:09:24.599
so for example if I had all my files encrypted with C pub I

00:09:25.120 --> 00:09:29.339
Could decrypt them all again with C private right so that needs to [preserve]

00:09:29.620 --> 00:09:34.469
So the malware needs to stop me from getting to that file. Which is done now by encrypting it

00:09:34.500 --> 00:09:37.829
We can't decrypt it again because we don't have the server's private key

00:09:37.839 --> 00:09:44.789
That's the issue here right, so then what happens is for all files the client will generate a f key which will call

00:09:46.060 --> 00:09:48.060
KF4 file right and

00:09:49.089 --> 00:09:56.578
Encrypt the file with [kf] then so we're going to store in essence C pub of k f and

00:09:57.310 --> 00:10:03.839
K f okay, so let's look at what I've just written here each client has its own public and private key pair right now

00:10:03.839 --> 00:10:08.698
that's important because theoretically if one person paid the Ransom and they said them let's say the

00:10:09.130 --> 00:10:14.399
Shared private and public key pair, then everyone you seem to pay the Ransom [one's] problems [going] away, right?

00:10:14.399 --> 00:10:20.789
That's not a foolproof solution. So what we do we generate an [okay]. We generate a kf aes key

00:10:21.339 --> 00:10:25.679
For every single file then we encrypt the file

00:10:26.170 --> 00:10:33.990
With that so let's just draw that in so it makes it makes it sense [kf] file, right so we encrypt the file with kf

00:10:35.170 --> 00:10:36.459
then we

00:10:36.459 --> 00:10:41.669
Store that file on disk and we attach to it that key so that it can be undone

00:10:41.920 --> 00:10:45.930
But we hold it to Ransom by encrypting it with our clients public key

00:10:46.089 --> 00:10:52.559
So let me run this which files are all in encrypted with a smash it key, so they're encrypted quickly [yep]

00:10:52.750 --> 00:10:59.669
But then that symmetric key is been encrypted with a brand new generated asymmetric key pair

00:11:00.000 --> 00:11:02.880
yeah, which is encrypted with the

00:11:04.120 --> 00:11:07.890
Public-key, so that only the server can be tricked exactly right?

00:11:08.130 --> 00:11:13.380
So there's a kind of chain [of] decryption here that we would have to solve if we wanted to undo all this and get our

00:11:13.380 --> 00:11:16.710
Files back would return us. Just one file on the disk to get our file back

00:11:16.710 --> 00:11:19.410
We need to decrypt it with kf right, which is a symmetric key

00:11:20.110 --> 00:11:21.700
unfortunately kf has been

00:11:21.700 --> 00:11:26.910
Encrypted with this public key here for the client so [we] need to work out what the private key for the client is

00:11:27.670 --> 00:11:31.500
Unfortunately again the private key has been encrypted with the public key of the server

00:11:31.780 --> 00:11:37.769
So the only way we can find this private key is to ask the server for its private key or more likely

00:11:37.960 --> 00:11:40.350
Ask the server to decrypt it for us and send it back

00:11:40.350 --> 00:11:42.629
So you can imagine a situation where you paid your ransom?

00:11:42.940 --> 00:11:47.850
Like someone on the other end decided that was [ok] and you were going to have you're going to get your files back

00:11:47.850 --> 00:11:49.850
So to be clear you shouldn't pay the ransom

00:11:50.530 --> 00:11:53.519
Because it encourages crime, and there's no guarantee

00:11:53.520 --> 00:11:56.699
They'll do this and in fact [we've] want to click - it looks like they're not really bothering right?

00:11:56.730 --> 00:12:01.080
I don't partly because there's a few implementation issues. It's not clear whose bitcoins

00:12:01.080 --> 00:12:03.809
you're paying - it should have had you should have had a

00:12:04.480 --> 00:12:11.010
So most ransomware will have a bitcoin assigned for your client, so when it generates these keys it will also generate a bitcoin address

00:12:11.260 --> 00:12:17.460
right so theoretically this is [all] automated [you] would pay the ransom and then theoretically they would choose to

00:12:19.180 --> 00:12:25.530
They look at that bitcoin address and go okay. Yes. [someone's] paid [will] send them back the private key their private key

00:12:27.040 --> 00:12:31.469
Not the case here right it seems to be kind of manual and in lock come is anyone's actually doing it

00:12:31.470 --> 00:12:36.359
But I can sympathize with [people] who have had their files encrypted [right]? It's one thing to say don't do it

00:12:36.360 --> 00:12:36.750
Don't do it

00:12:36.750 --> 00:12:41.640
But you can imagine if you were in a [situation] where your family photos have been encrypted you might be quite desperate to get in

00:12:41.640 --> 00:12:43.540
the back um

00:12:43.540 --> 00:12:45.540
so

00:12:45.550 --> 00:12:48.450
Hypothetically [if] someone paid a Ransom and it was going to give it [back]

00:12:48.450 --> 00:12:54.749
What would happen is the client would send off this encrypted private key right? Which it doesn't know anymore?

00:12:55.480 --> 00:12:57.480
to the server and the server

00:12:58.030 --> 00:12:59.550
Would decide okay?

00:12:59.550 --> 00:13:01.859
they're allowed their files back for whatever reason and

00:13:01.990 --> 00:13:07.440
Would decrypt this with their private key so s proof right which I'll put in here s private

00:13:07.960 --> 00:13:10.410
Spr. B. Right so they decrypt our

00:13:11.170 --> 00:13:16.319
Client private key with their server private key and send it back [over] the network like this is all happening

00:13:16.680 --> 00:13:19.109
Tor by the way nothing going over the open network

00:13:19.110 --> 00:13:25.139
We then have this private key back again which we can use to decrypt our k f which

00:13:25.139 --> 00:13:26.519
We can use to decrypt our file

00:13:26.519 --> 00:13:31.469
And then it just iterates through all the files doing that process so you can see that the thing

00:13:31.470 --> 00:13:35.009
They're actually holding to Ransom is the fact [that] we don't know this private key

00:13:35.009 --> 00:13:39.118
And they've encrypted our private key the benefit of this [approach] is you get the speed of aes?

00:13:39.220 --> 00:13:41.819
Which over a bunch of files on a disk is unbelievably quick?

00:13:42.999 --> 00:13:49.618
Somewhere around I think seven hundred megabits per second of encryption rate. I think on on a decent intel machine with

00:13:50.319 --> 00:13:52.319
Aes instructions on it

00:13:53.920 --> 00:13:55.110
You get that benefit?

00:13:55.110 --> 00:13:57.110
but you also have the benefit that

00:13:57.369 --> 00:14:03.178
the private Key but sort of the master key as it were it held only on the server and never needs to be sent to

00:14:03.179 --> 00:14:07.619
Anyone and the only way to undo all of this encryption is to know what that is and the other bonus is but you don't

00:14:07.619 --> 00:14:09.809
Have to be online to do any of this some man somewhere

00:14:09.809 --> 00:14:14.159
If it can't connect to the command and control server will immediately shut down which is nice of them

00:14:14.160 --> 00:14:17.969
I suppose because it means they're not going to encrypt your files if they know you can't get them back

00:14:18.279 --> 00:14:23.099
But this doesn't do anything like that this encrypts your files first ask questions of a server later

00:14:23.230 --> 00:14:29.579
So if the command and control [server] disappear there is no hope because this private key is gone. That's the idea

00:14:30.129 --> 00:14:35.099
Surely at some point this aes key is in the clear because it's dead again

00:14:35.139 --> 00:14:38.159
Yeah, and so is this private key right so at some point

00:14:38.860 --> 00:14:44.490
While it's running this private key will exist and before. It's encrypted it will be in memory now

00:14:44.980 --> 00:14:48.779
There's a few problems [with] first of all it's way too late for most people, right?

00:14:49.899 --> 00:14:53.758
But theoretically if antivirus [is] being vigilant that might help but but not really

00:14:54.610 --> 00:14:56.610
the other thing is that

00:14:56.709 --> 00:15:00.899
it's quite hard to access memory for other processes because of

00:15:02.019 --> 00:15:06.359
Fairly good security measures in windows and [Linux] and any other operating system

00:15:06.360 --> 00:15:10.469
But separate out processes from one another [so] really this is operating in its own address space

00:15:10.779 --> 00:15:14.638
it's quite hard for anything else to sort of get in there and quickly look at the keys and

00:15:14.980 --> 00:15:20.969
stick them in a file in that time period so really that isn't I don't think an avenue of research in terms of trying to

00:15:20.970 --> 00:15:22.209
fix this problem

00:15:22.209 --> 00:15:28.649
[much] better to do things like the web-based sinkhole that stopped it running completely and then keep a vigilant eye out for new

00:15:29.559 --> 00:15:32.509
Variants show up. You know Daily now

00:15:32.510 --> 00:15:38.210
Is there any way of working out how [its] [generating] those keys and using that technique? If it was using a poor?

00:15:39.090 --> 00:15:44.449
Encryption library right, then maybe there will be a weakness that you could use right as it is to generate these keys

00:15:44.450 --> 00:15:48.290
It's using the windows standard Encryption library which is not bought. It's like. It's perfectly good

00:15:49.260 --> 00:15:51.710
[so] that's a that's going to be a problem

00:15:52.530 --> 00:15:56.780
The best bet at this stage of getting your files back is not paying a ransom

00:15:57.080 --> 00:16:04.280
It's hoping that someone will find this server the real location of it and extract this master key at that point

00:16:04.800 --> 00:16:10.160
Everyone else [a] [tool] will be released within a day, but just does all this put it reverse process and solve the whole problem

00:16:10.920 --> 00:16:13.699
[this] has happened in the past to ransomware that's been brought down

00:16:13.940 --> 00:16:16.549
I believe Cryptolocker for example was an early ransomware

00:16:16.650 --> 00:16:22.249
But when they finally brought down the server they also extracted the master key and [were] able to Publish tools to undo everything

00:16:24.180 --> 00:16:29.239
[there's] no guarantee that will happen in this case right the dark web makes it quite hard to find these servers

00:16:29.760 --> 00:16:35.090
Especially if for example the massive publicity surrounding this has caused them to essentially just do a runner

00:16:35.820 --> 00:16:38.359
[maybe] not even I mean I think the servers are still running

00:16:38.360 --> 00:16:43.760
But you know I don't know but what the end game for this is we don't know will they find the servers won't they will

00:16:43.760 --> 00:16:48.020
This just all to disappear and unfortunately some people have lost some files. We'll have to wait and see

00:16:50.670 --> 00:16:54.739
How doing backups yes? What was the best way to back up then okay?

00:16:54.740 --> 00:16:56.040
Hang on [you] put me on the spot now

00:16:56.040 --> 00:16:58.609
So the best way to do backups is multi-location

00:16:59.030 --> 00:17:01.910
Right so not a single hard disk because it might die

00:17:01.950 --> 00:17:07.520
But also not [to] hard disk sitting next to each other in case your house falls down and smashes [our] hard this cloud storage is

00:17:07.520 --> 00:17:09.300
Very good because they have this

00:17:09.300 --> 00:17:15.649
[multi-site] that done as we built in if you don't mind giving your file to them and paying their costs right so some common

00:17:15.650 --> 00:17:17.719
I use some combination [of] Cloud storage and

00:17:18.570 --> 00:17:20.989
Hard disks and burning to Blu-ray and things like this

