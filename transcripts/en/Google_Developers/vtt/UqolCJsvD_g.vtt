WEBVTT
Kind: captions
Language: en

00:00:00.567 --> 00:00:01.400
SOREN GJESSE: Hello.

00:00:01.400 --> 00:00:04.480
My name is Soren Gjesse and
I work on the Dart team.

00:00:04.480 --> 00:00:07.230
I want to show you why Dart is
a great language for building

00:00:07.230 --> 00:00:09.890
applications for the cloud.

00:00:09.890 --> 00:00:12.410
Dart is a new platform for
scalable web application

00:00:12.410 --> 00:00:13.600
engineering.

00:00:13.600 --> 00:00:17.710
And Dart runs in modern web
browsers and on the server.

00:00:17.710 --> 00:00:19.470
This provides a
great opportunity

00:00:19.470 --> 00:00:22.650
to build web applications
using the same language

00:00:22.650 --> 00:00:26.440
for both client and server,
and to utilize the services

00:00:26.440 --> 00:00:29.640
provided by the
Google Cloud Platform.

00:00:29.640 --> 00:00:31.810
Today, I'd like to
show you how easy it

00:00:31.810 --> 00:00:35.370
is to run your Dart code
in Google's data centers,

00:00:35.370 --> 00:00:37.760
use App Engine Managed VMs.

00:00:37.760 --> 00:00:41.030
That is now a supported
language on App Engine.

00:00:41.030 --> 00:00:43.830
App Engine scales automatically
as your application

00:00:43.830 --> 00:00:46.170
gets more and more popular.

00:00:46.170 --> 00:00:48.870
App Engine Managed VMs combine
the power of App Engine

00:00:48.870 --> 00:00:52.050
with the flexibility of
running on a general server.

00:00:52.050 --> 00:00:54.960
It lets you combine the total
control of freedom of computing

00:00:54.960 --> 00:00:59.420
and VMs with the auto-management
capabilities of App Engine.

00:00:59.420 --> 00:01:01.260
Because you're
running in a VM, you

00:01:01.260 --> 00:01:03.910
can install any
additional software.

00:01:03.910 --> 00:01:05.610
And there are no
restrictions on how

00:01:05.610 --> 00:01:08.120
the Dart server can
use the machine.

00:01:08.120 --> 00:01:10.080
Even accessing your
favorite C library

00:01:10.080 --> 00:01:13.420
using a native
extension is possible.

00:01:13.420 --> 00:01:16.040
App Engine Managed VM
support local development.

00:01:16.040 --> 00:01:17.670
Your development tests locally.

00:01:17.670 --> 00:01:20.750
And when you're ready to
deploy, the deployment process

00:01:20.750 --> 00:01:22.510
make sure that the
exact same code

00:01:22.510 --> 00:01:25.280
will run in the
Google data center.

00:01:25.280 --> 00:01:28.440
To get started, you
only need a few things.

00:01:28.440 --> 00:01:31.740
You need the Google Cloud SDK,
which includes a gcloud command

00:01:31.740 --> 00:01:33.150
line tool.

00:01:33.150 --> 00:01:36.300
And you need the latest version
of the Dart SDK and the Dart

00:01:36.300 --> 00:01:37.880
Editor.

00:01:37.880 --> 00:01:40.700
The process is all well
documented on the Dart website,

00:01:40.700 --> 00:01:42.280
dartlang.org.

00:01:42.280 --> 00:01:44.930
Getting started is easy.

00:01:44.930 --> 00:01:50.170
A basic HTTP server application
is just a few lines of code.

00:01:50.170 --> 00:01:53.250
Import the Dart
App Engine package,

00:01:53.250 --> 00:01:56.000
start the server
application running,

00:01:56.000 --> 00:01:58.960
and handle HTTP
requests as you already

00:01:58.960 --> 00:02:01.740
do with the Dart I/O library.

00:02:01.740 --> 00:02:04.560
If you already have a server
application written in Dart,

00:02:04.560 --> 00:02:06.630
moving it to App
Engine only requires

00:02:06.630 --> 00:02:09.520
changing a few lines of code.

00:02:09.520 --> 00:02:12.310
You can run this code locally
using the gcloud app run

00:02:12.310 --> 00:02:13.320
command.

00:02:13.320 --> 00:02:15.310
And when you're happy
with your application,

00:02:15.310 --> 00:02:19.620
deploy it by just running the
gcloud app deploy command.

00:02:19.620 --> 00:02:21.740
This site is providing
an HTTP server.

00:02:21.740 --> 00:02:26.210
The App Engine package provide
APIs to Google Cloud Services.

00:02:26.210 --> 00:02:28.430
The initial set of
APIs provided are

00:02:28.430 --> 00:02:33.290
for accessing Cloud datastore,
Memcache, Users API,

00:02:33.290 --> 00:02:35.020
and for Logging.

00:02:35.020 --> 00:02:37.150
Let's look at the
Cloud datastore.

00:02:37.150 --> 00:02:40.170
The Google Cloud datastore
is a fully managed schemaless

00:02:40.170 --> 00:02:43.400
database for storing
non-relational data.

00:02:43.400 --> 00:02:46.410
Being a schemaless database,
it lets you store and entities

00:02:46.410 --> 00:02:49.080
having a set of
named properties.

00:02:49.080 --> 00:02:51.350
To give your app
maximum flexibility,

00:02:51.350 --> 00:02:52.845
we provide two APIs.

00:02:52.845 --> 00:02:54.900
There's a low level
API, which allows

00:02:54.900 --> 00:02:56.780
you to work with
datastore entities

00:02:56.780 --> 00:02:58.782
directly as key value map.

00:02:58.782 --> 00:03:01.310
On top of this, we've
added a mapping layer.

00:03:01.310 --> 00:03:04.380
This makes it possible to store
concrete instances of data

00:03:04.380 --> 00:03:07.010
updates with just a
few simple annotations

00:03:07.010 --> 00:03:09.350
to indicate how your
instance properties should

00:03:09.350 --> 00:03:12.100
map to datastore properties.

00:03:12.100 --> 00:03:14.035
Let me show you how
simple it is to store

00:03:14.035 --> 00:03:16.470
an update into the datastore.

00:03:16.470 --> 00:03:19.700
First, you need to model
how the update is stored.

00:03:19.700 --> 00:03:21.960
Let's look at this
simple person class.

00:03:21.960 --> 00:03:25.340
We want to store the two
properties, name and age.

00:03:25.340 --> 00:03:29.300
The class defines properties
and extends model.

00:03:29.300 --> 00:03:31.860
Then the actual description
of how this object maps

00:03:31.860 --> 00:03:34.020
to the datastore
is described using

00:03:34.020 --> 00:03:36.520
a subclass of model description.

00:03:36.520 --> 00:03:40.120
Note, this defines the
types used in the datastore.

00:03:40.120 --> 00:03:42.460
It can also be used to define
additional information,

00:03:42.460 --> 00:03:44.850
like whether the
property is mandatory

00:03:44.850 --> 00:03:48.310
and whether it should be
indexed in the datastore.

00:03:48.310 --> 00:03:50.300
With this model
description in place,

00:03:50.300 --> 00:03:52.810
the model class is annotated
with the description,

00:03:52.810 --> 00:03:56.540
and the class
definitions are all set.

00:03:56.540 --> 00:03:58.520
Now storing objects
into the data store

00:03:58.520 --> 00:04:01.880
is as simple as creating
a number of instances.

00:04:01.880 --> 00:04:05.725
Here, we create two
instances, George and Sarah.

00:04:05.725 --> 00:04:07.600
And then we call the
data store commit method

00:04:07.600 --> 00:04:11.530
to actually store these
instances into the data store.

00:04:11.530 --> 00:04:14.430
Here we use a Dart
asynchronous programming model.

00:04:14.430 --> 00:04:16.700
The future return
from commit completes

00:04:16.700 --> 00:04:19.660
when the commit
operation has finished.

00:04:19.660 --> 00:04:22.570
If you're familiar with the
App Engine Python NDB Datastore

00:04:22.570 --> 00:04:26.300
API, this probably
looks familiar to you.

00:04:26.300 --> 00:04:27.530
This is all open source.

00:04:27.530 --> 00:04:29.940
The code is developed
on GitHub and is

00:04:29.940 --> 00:04:32.627
available as a Dart package
using the Dart package manager,

00:04:32.627 --> 00:04:33.335
pub.dartlang.org.

00:04:36.410 --> 00:04:38.890
Now let's take advantage
of code-sharing.

00:04:38.890 --> 00:04:41.860
When you use Dart both in
the client and on the server,

00:04:41.860 --> 00:04:44.570
your front end and
backend can share code.

00:04:44.570 --> 00:04:48.392
This is great, because this code
only has to be written once.

00:04:48.392 --> 00:04:50.930
For example, say your client
and server communicating

00:04:50.930 --> 00:04:53.340
using a JSON-based protocol.

00:04:53.340 --> 00:04:55.850
The associated data
objects and serialization

00:04:55.850 --> 00:05:00.230
and deserialization code
is needed on both sides.

00:05:00.230 --> 00:05:02.630
Having the updates used
the communication defined

00:05:02.630 --> 00:05:07.690
in a shared library ensures that
both sides share the same code.

00:05:07.690 --> 00:05:09.830
There are many other
advantages to sharing code

00:05:09.830 --> 00:05:12.860
on client and server, like not
having to rewrite validation

00:05:12.860 --> 00:05:14.830
logic in different languages.

00:05:14.830 --> 00:05:17.200
With that on both
client and server,

00:05:17.200 --> 00:05:19.794
this validation
logic can be shared.

00:05:19.794 --> 00:05:21.960
How about the case when an
application needs to work

00:05:21.960 --> 00:05:23.410
offline?

00:05:23.410 --> 00:05:25.042
In this case, large
part of the code

00:05:25.042 --> 00:05:26.500
that is running on
the server needs

00:05:26.500 --> 00:05:28.780
to be available on the client.

00:05:28.780 --> 00:05:31.120
When using the same language
in both client and server,

00:05:31.120 --> 00:05:32.770
this becomes easier.

00:05:32.770 --> 00:05:34.800
The code only needs
to be written once

00:05:34.800 --> 00:05:37.630
and will always be in sync.

00:05:37.630 --> 00:05:39.270
These are simple examples.

00:05:39.270 --> 00:05:43.270
A new app, you can find
even better uses of this.

00:05:43.270 --> 00:05:45.050
Well, this is just
the beginning.

00:05:45.050 --> 00:05:48.980
We are going to evolve our
Dart support for Google cloud.

00:05:48.980 --> 00:05:50.690
On the API side, there
are still a number

00:05:50.690 --> 00:05:53.330
of popular App
Engine APIs missing.

00:05:53.330 --> 00:05:55.994
And we will be
adding more of these.

00:05:55.994 --> 00:05:57.660
Another important
thing we're working on

00:05:57.660 --> 00:06:00.120
is improving Dart access
to Google Cloud Services

00:06:00.120 --> 00:06:02.120
in general.

00:06:02.120 --> 00:06:04.130
Most services, like
Google datastore,

00:06:04.130 --> 00:06:06.370
is available on most platforms.

00:06:06.370 --> 00:06:07.914
It's available Google
Compute Engine.

00:06:07.914 --> 00:06:09.330
It's available on
your own server,

00:06:09.330 --> 00:06:12.690
on other cloud provider service,
and even in the browser.

00:06:12.690 --> 00:06:14.980
We would also be working
on making the Google Cloud

00:06:14.980 --> 00:06:17.640
Services available in
all these platforms,

00:06:17.640 --> 00:06:22.221
making your Dart code equally
valuable across platforms.

00:06:22.221 --> 00:06:23.720
With this information,
I hope you're

00:06:23.720 --> 00:06:25.450
dying to get started
developing you're

00:06:25.450 --> 00:06:27.660
Dart application
for Google Cloud.

00:06:27.660 --> 00:06:30.450
Visit dartlang.org to find
more information on how to get

00:06:30.450 --> 00:06:32.920
started and start building
your Dart application

00:06:32.920 --> 00:06:35.120
in the cloud today.

