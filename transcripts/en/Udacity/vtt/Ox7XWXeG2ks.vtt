WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
Now let's write one last procedure for these trees: contains.

00:00:04.000 --> 00:00:07.000
We want to see if a given tree contains an element.

00:00:07.000 --> 00:00:10.000
And the real trick with contains is that I don't have to look at the whole tree.

00:00:10.000 --> 00:00:14.000
If I'm given a very small element, I'll just go down the left path

00:00:14.000 --> 00:00:16.000
because I know it's not in the right path.

00:00:16.000 --> 00:00:18.000
Similarly, if I'm given a really huge element,

00:00:18.000 --> 00:00:21.000
I'll only go down the right path because I know it's not on the left.

00:00:21.000 --> 00:00:24.000
This is a recursive procedure, so it has a base case.

00:00:24.000 --> 00:00:27.000
If we're at the bottom of the tree and we haven't found it, then we return False.

00:00:27.000 --> 00:00:32.000
And now if this element is exactly the element we want, we found it.

00:00:32.000 --> 00:00:34.000
And then based on the dictionary ordering,

00:00:34.000 --> 00:00:38.000
we'll either call ourselves recursively on the left child only or on the right child only.

00:00:38.000 --> 00:00:44.000
Let's see if our third tree contains midpoint. It should. That's right at the top.

00:00:44.000 --> 00:00:48.000
Oh! Silly Python error.

00:00:48.000 --> 00:00:53.000
Else if is invalid syntax. Yep. They're exactly right and I'm wrong.

00:00:53.000 --> 00:00:56.000
I always get this wrong in Python.

00:00:56.000 --> 00:01:00.000
In Python, else if is written elif. Now let's try again.

00:01:00.000 --> 00:01:02.000
True. It does contain midpoint. Excellent.

00:01:02.000 --> 00:01:05.000
Let's see if it contains should not be there.

00:01:05.000 --> 00:01:07.000
Hint: The expected answer is False.

00:01:07.000 --> 00:01:09.000
And look, it is False.

00:01:09.000 --> 00:01:12.000
Unfortunately, there's actually a bug in our code.

00:01:12.000 --> 00:01:14.000
Let's see if we can find Jacob Zuma.

00:01:14.000 --> 00:01:16.000
He should totally be there but he's not.

00:01:16.000 --> 00:01:18.000
We still get False.

00:01:18.000 --> 00:01:21.000
Well, if there's a bug in our code, we have to find a test case that shows it.

00:01:21.000 --> 00:01:23.000
This is a test case that shows it.

00:01:23.000 --> 00:01:26.000
We tried a simpler one just looking for midpoint and that worked,

00:01:26.000 --> 00:01:28.000
so we'll just stick with this one for now.

00:01:28.000 --> 00:01:33.000
Our next step is to add print statement debugging until we've localized the fault.

00:01:33.000 --> 00:01:35.000
So here at the top of contains I'm just printing out the current tree

00:01:35.000 --> 00:01:37.000
and the element we're looking for.

00:01:37.000 --> 00:01:40.000
Let's go see what happens when we look for Jacob Zuma.

00:01:40.000 --> 00:01:44.000
First the tree is the entire huge tree with atwood, margaret,

00:01:44.000 --> 00:01:46.000
the midpoint, and then zuma, jacob,

00:01:46.000 --> 00:01:48.000
and the element we're looking for is zuma, jacob.

00:01:48.000 --> 00:01:50.000
So that's looking good so far.

00:01:50.000 --> 00:01:54.000
Then we call ourselves recursively and suddenly we're looking at the left child.

00:01:54.000 --> 00:01:58.000
Now we're looking inside the Margaret Atwood tree for zuma, jacob.

00:01:58.000 --> 00:02:00.000
That is not going to work.

00:02:00.000 --> 00:02:04.000
What this tells me is that we went left when we should have gone right.

00:02:04.000 --> 00:02:10.000
So somewhere up here there was some mistake involving one of these recursive calls.

00:02:10.000 --> 00:02:13.000
We went left but we should have gone right.

00:02:13.000 --> 00:02:15.000
Well, what's controlling this decision?

00:02:15.000 --> 00:02:18.000
It's the comparison between this_element and element.

00:02:18.000 --> 00:02:20.000
Here's another quiz for you.

00:02:20.000 --> 09:59:59.000
Fill in this blank with code that will make this work.

