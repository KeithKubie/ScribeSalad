WEBVTT
Kind: captions
Language: en

00:00:00.180 --> 00:00:02.150
So now it's time to learn about how to query for

00:00:02.150 --> 00:00:05.490
conferences. But for our queries to be useful we actually need

00:00:05.490 --> 00:00:08.430
to have some conferences to query over. So go ahead and

00:00:08.430 --> 00:00:12.510
create a couple conferences, maybe more if you like. You can

00:00:12.510 --> 00:00:15.270
use the create conference page in your app to do that

00:00:15.270 --> 00:00:18.510
or you can use the API's explorer, whichever you like. The

00:00:18.510 --> 00:00:20.990
Create Conference page is a little nicer because it limits the

00:00:20.990 --> 00:00:25.240
choices of the topics to valid topics and it uses this

00:00:25.240 --> 00:00:28.440
nice date picker for selecting the start date and the

00:00:28.440 --> 00:00:31.200
end date. So the only property that's really required is

00:00:31.200 --> 00:00:33.750
the name. All the other properties will default to the

00:00:33.750 --> 00:00:37.340
default values. But for our queries to be useful, you're going to

00:00:37.340 --> 00:00:40.240
need to set a couple of these properties. So go

00:00:40.240 --> 00:00:43.590
ahead and create a conference. So you have to be sure

00:00:43.590 --> 00:00:47.280
to specify the conference name. Can choose a city. You

00:00:47.280 --> 00:00:50.510
are going to need some conferences in London. Going to skip

00:00:50.510 --> 00:00:53.190
the description, and you are going to

00:00:53.190 --> 00:00:56.830
need some conferences in London that are not

00:00:56.830 --> 00:00:59.330
about medical innovation so let's make this one,

00:01:00.330 --> 00:01:02.020
this would be Health and Nutrition right? Because

00:01:02.020 --> 00:01:05.110
it's about chocolate. I'll pick a start date

00:01:05.110 --> 00:01:09.150
in June. End date, probably should be after

00:01:09.150 --> 00:01:11.740
the start date. And then we'll create the

00:01:11.740 --> 00:01:16.070
conference. So go ahead and create some conferences.

00:01:16.070 --> 00:01:18.130
You're going to need a conference where the city is

00:01:18.130 --> 00:01:23.000
London, and the topic doesn't include medical innovations. Create another

00:01:23.000 --> 00:01:25.940
one where the city is London. The topic includes medical

00:01:25.940 --> 00:01:29.630
innovations. And the start date is in June. And the max

00:01:29.630 --> 00:01:32.750
attendees is greater than ten. And you feel free to

00:01:32.750 --> 00:01:35.200
create some other ones as well. If you didn't get

00:01:35.200 --> 00:01:38.590
all that, don't worry. When you need these particular conferences,

00:01:38.590 --> 00:01:41.880
I will remind you to create them, if you didn't already.

00:01:41.880 --> 00:01:43.860
And again, we already talked about this, but you're

00:01:43.860 --> 00:01:46.930
going to need to use the datastore viewer in the

00:01:46.930 --> 00:01:50.470
Admin Console to review your entities. To make sure your

00:01:50.470 --> 00:01:53.660
conferences actually got created and saved. Now that we've got

00:01:53.660 --> 00:01:57.490
some conferences, it's time to write the Query Conferences function.

00:01:57.490 --> 00:02:00.680
We've already learned that using Objectify to get an entity

00:02:00.680 --> 00:02:04.240
by key, you use the load method. So here's the

00:02:04.240 --> 00:02:06.960
code to load the entity if we know its key.

00:02:06.960 --> 00:02:10.240
Call the load method on ofy, call the key method passing

00:02:10.240 --> 00:02:13.610
the key and then now so it happens right away. This works

00:02:13.610 --> 00:02:15.780
if you know the key of the entity that you want to

00:02:15.780 --> 00:02:19.130
get, but for conferences, we don't know what the key is, because

00:02:19.130 --> 00:02:21.620
we let app engine create the key for us with an

00:02:21.620 --> 00:02:25.370
auto allocated ID. So we actually don't know what the keys are

00:02:25.370 --> 00:02:28.640
for the conferences, but actually it turns out that doesn't matter. We're

00:02:28.640 --> 00:02:32.770
just going to query for them. So here's how you create a query

00:02:32.770 --> 00:02:36.560
to get all entities of a given kind, ofy().load(),

00:02:36.560 --> 00:02:40.520
as we did before, but this time we specify type.

00:02:40.520 --> 00:02:42.200
And then in our case since what we want

00:02:42.200 --> 00:02:44.540
to do is get all entities of a given kind,

00:02:44.540 --> 00:02:47.840
we need to pass Kind.class to type, so here's

00:02:47.840 --> 00:02:51.670
the query to get all entities of a kind recipe,

00:02:51.670 --> 00:02:55.700
so you see we just specify Recipe.class here. You

00:02:55.700 --> 00:02:58.900
can also sort the results based on a property value.

00:02:58.900 --> 00:03:01.350
So here's how you'd sort the recipe entities according

00:03:01.350 --> 00:03:03.880
to their name. You just call the order method

00:03:03.880 --> 00:03:06.070
and you specify the property to sort on, and

00:03:06.070 --> 00:03:09.100
we're going to sort on the name. So try to go

00:03:09.100 --> 00:03:11.820
ahead and execute the query, you call the list

00:03:11.820 --> 00:03:14.490
method. So here's what you'll do to add the

00:03:14.490 --> 00:03:18.790
functionality to query for all conferences. In the conference

00:03:18.790 --> 00:03:22.405
API class, you're going to add a method called queryConferences.

00:03:24.540 --> 00:03:26.650
There we are, queryConferences. You're going to have to write

00:03:26.650 --> 00:03:30.484
this one for yourself. See here I define the @ApiMethod

00:03:30.484 --> 00:03:32.490
to expose the function as an end point and to

00:03:32.490 --> 00:03:36.480
specify the name, the path, and the httpMethod. In this case

00:03:36.480 --> 00:03:39.730
this needs to be POST. And for now it takes

00:03:39.730 --> 00:03:43.190
no arguments. See that? No arguments. You're going to fix that later

00:03:43.190 --> 00:03:45.870
on, but for now it takes no arguments. You're going to

00:03:45.870 --> 00:03:49.610
add the code to query for all conferences sorted by name.

00:03:49.610 --> 00:03:52.790
And then you're going to return the query list.

00:03:52.790 --> 00:03:54.190
So see here we have the error for

00:03:54.190 --> 00:03:58.430
query, so you're going to need to fix that. And you actually need to import the

00:03:58.430 --> 00:04:05.314
objectify query and that's in com.googlecode.objectify.cmd.Wuery.

00:04:05.314 --> 00:04:10.290
So make sure that you import the query that goes with objectify, not

00:04:10.290 --> 00:04:14.820
the one for the native data store. So after you've read your query conferences

00:04:14.820 --> 00:04:17.019
method, you can try it out in the API's

00:04:17.019 --> 00:04:20.510
explorer. You go to the API's explorer on localhost

00:04:20.510 --> 00:04:22.950
and you see the services, you're probably going to need

00:04:22.950 --> 00:04:25.592
to refresh the page here, otherwise you won't see the

00:04:25.592 --> 00:04:30.630
queryConferences method, but here now, here we have queryConferences.

00:04:30.630 --> 00:04:33.470
You click on it. Now, if you recall we

00:04:33.470 --> 00:04:36.990
didn't provide any input arguments, so there's no request

00:04:36.990 --> 00:04:39.870
body to fill in, so just press Execute and let's

00:04:39.870 --> 00:04:44.070
see if we've got any conferences. Yes. I only

00:04:44.070 --> 00:04:47.770
have one conference called App Engine for All, and here

00:04:47.770 --> 00:04:50.600
we see it in the response. You can also

00:04:50.600 --> 00:04:53.610
use a Show Conferences page in the UI, because this

00:04:53.610 --> 00:04:57.480
page also sends a call to queryConferences. So this

00:04:57.480 --> 00:04:58.980
is an example of what you might see in the

00:04:58.980 --> 00:05:01.390
Show Conferences page. Got a list of all the

00:05:01.390 --> 00:05:05.150
conferences that have been created. There's no point adding filters

00:05:05.150 --> 00:05:06.775
because the current implementation of

00:05:06.775 --> 00:05:09.350
queryConferences doesn't know anything about filters.

