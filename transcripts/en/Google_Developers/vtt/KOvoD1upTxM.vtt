WEBVTT
Kind: captions
Language: en

00:00:00.390 --> 00:00:01.340
TODD KERPELMAN: So what
if I told you there

00:00:01.340 --> 00:00:02.714
was a way that
you could compress

00:00:02.714 --> 00:00:05.387
nearly any stream of data
by a factor of 10x or more?

00:00:05.387 --> 00:00:07.470
Wouldn't that be something
you'd be interested in?

00:00:07.470 --> 00:00:07.600
Yeah.

00:00:07.600 --> 00:00:08.500
I thought so.

00:00:08.500 --> 00:00:10.910
Let's find out more on
this episode of Route 85.

00:00:10.910 --> 00:00:13.290
[MUSIC PLAYING]

00:00:18.290 --> 00:00:20.940
So I want you to take a look
at this array of numbers here.

00:00:20.940 --> 00:00:23.210
Imagine that we wanted to
send this array of integers

00:00:23.210 --> 00:00:25.169
from a server to
your user's device.

00:00:25.169 --> 00:00:27.210
Looks like just a bunch
of random numbers, right?

00:00:27.210 --> 00:00:29.020
Well, that word
random is actually

00:00:29.020 --> 00:00:32.400
the key to compressing these in
an incredibly efficient manner.

00:00:32.400 --> 00:00:34.530
As you probably know, a
random number generator

00:00:34.530 --> 00:00:35.940
isn't truly random.

00:00:35.940 --> 00:00:38.490
Supply a random number
generator with the same seed.

00:00:38.490 --> 00:00:40.907
And you'll get the same
results out every time.

00:00:40.907 --> 00:00:42.490
And we can take
advantage of that fact

00:00:42.490 --> 00:00:45.180
to recreate that list of
integers using a random number

00:00:45.180 --> 00:00:46.130
generator.

00:00:46.130 --> 00:00:47.940
You see, all I need
to do to regenerate

00:00:47.940 --> 00:00:49.960
that array on a
device is to supply

00:00:49.960 --> 00:00:52.940
three parameters, the seed for
an agreed upon random number

00:00:52.940 --> 00:00:55.950
generator, an upper bound
to apply to these results,

00:00:55.950 --> 00:00:57.970
and the length of the list.

00:00:57.970 --> 00:00:59.820
I simply supply those
numbers to a method

00:00:59.820 --> 00:01:01.580
that looks a little like this.

00:01:01.580 --> 00:01:03.970
And I can recreate that
original number stream.

00:01:03.970 --> 00:01:06.700
Just like that, I've built
my array of 30 integers using

00:01:06.700 --> 00:01:09.070
just two integers and an int32.

00:01:09.070 --> 00:01:11.730
That's a 92% compression rate.

00:01:11.730 --> 00:01:13.570
Now granted, finding
that initial seed

00:01:13.570 --> 00:01:14.700
did take some work.

00:01:14.700 --> 00:01:15.450
But you know what?

00:01:15.450 --> 00:01:16.866
That work can
happen in the cloud.

00:01:16.866 --> 00:01:18.190
So it doesn't really matter.

00:01:18.190 --> 00:01:19.970
What's important is
that on the device,

00:01:19.970 --> 00:01:21.490
I'm able to
decompress that number

00:01:21.490 --> 00:01:23.427
stream in order and time.

00:01:23.427 --> 00:01:25.510
And then of course, once
you start looking around,

00:01:25.510 --> 00:01:26.800
you can see that
there's a ton of data

00:01:26.800 --> 00:01:28.106
you can compress this way.

00:01:28.106 --> 00:01:29.730
I mean, need to
compress a text string?

00:01:29.730 --> 00:01:33.130
Well, what's a string but a
stream of encoded integers?

00:01:33.130 --> 00:01:34.860
Once I have my
stream of integers,

00:01:34.860 --> 00:01:37.700
I simply figure out what
seed I need to generate them.

00:01:37.700 --> 00:01:38.480
And voila!

00:01:38.480 --> 00:01:41.050
I've compressed my string
down into just three numbers.

00:01:41.050 --> 00:01:42.930
It's a pretty amazing
savings, right?

00:01:42.930 --> 00:01:46.560
Anybody with a username
of StjxmsDZxGDqbpP

00:01:46.560 --> 00:01:49.390
will be singing your
praises in their reviews.

00:01:49.390 --> 00:01:51.280
And my gosh, if
you think about it,

00:01:51.280 --> 00:01:53.620
an image is really just a
stream of numbers broken out

00:01:53.620 --> 00:01:55.270
into several channels.

00:01:55.270 --> 00:01:56.900
Take a look at this image here.

00:01:56.900 --> 00:01:59.474
And you can see how, using
a random number generator,

00:01:59.474 --> 00:02:01.390
I have been able to
replace it with just three

00:02:01.390 --> 00:02:04.460
sets of integers
for the red, green,

00:02:04.460 --> 00:02:06.800
and blue channels respectively.

00:02:06.800 --> 00:02:09.800
Now once again, finding the
right seed can take some time.

00:02:09.800 --> 00:02:12.430
And I haven't found the
perfect seed just yet.

00:02:12.430 --> 00:02:14.790
So if you look at the
results carefully,

00:02:14.790 --> 00:02:17.330
you can see that this is not
quite a lossless compression

00:02:17.330 --> 00:02:17.880
scheme.

00:02:17.880 --> 00:02:20.470
But I think you'll agree that,
for this kind of savings,

00:02:20.470 --> 00:02:22.830
these tradeoffs just
might be worth it.

00:02:22.830 --> 00:02:25.060
Anyway, I hope you consider
using this technique

00:02:25.060 --> 00:02:27.480
the next time you have data
that needs to be compressed.

00:02:27.480 --> 00:02:30.220
Remember, the more efficient
you are with your user's data,

00:02:30.220 --> 00:02:31.627
the more they'll love you.

00:02:31.627 --> 00:02:32.710
Thanks again for watching.

00:02:32.710 --> 00:02:35.260
Be sure to check out other
episodes of Route 85.

00:02:35.260 --> 00:02:38.380
And remember that, as my
coworkers on the Android team

00:02:38.380 --> 00:02:40.750
like to say, perf matters.

00:02:40.750 --> 00:02:41.250
All right.

00:02:41.250 --> 00:02:41.900
Thanks, guys.

00:02:41.900 --> 00:02:44.020
I think we're done.

00:02:44.020 --> 00:02:46.406
MALE SPEAKER: Who let him
into the studio again?

00:02:46.406 --> 00:02:48.780
FEMALE SPEAKER: I just, I
couldn't say no to Elijah Wood.

00:02:48.780 --> 00:02:50.000
MALE SPEAKER: But that's--

00:02:50.000 --> 00:02:51.060
FEMALE SPEAKER: Elijah.

00:02:51.060 --> 00:02:52.610
Wood.

