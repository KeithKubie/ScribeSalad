WEBVTT
Kind: captions
Language: en

00:00:00.078 --> 00:00:04.732
Okay, we're still in the file
in titled L1_Strings, and

00:00:04.732 --> 00:00:09.128
I say a string isn't just a string for
a couple of reasons.

00:00:09.128 --> 00:00:12.863
Number one through the .characters
property of the string strut,

00:00:12.863 --> 00:00:15.428
we also have access to
an array of characters.

00:00:15.428 --> 00:00:16.520
And number two,

00:00:16.520 --> 00:00:21.358
a string can be treated as an NSString
which is a class from Objective-C.

00:00:21.358 --> 00:00:25.008
Let's say we wanted to identify
all of the e's in this string.

00:00:25.008 --> 00:00:26.629
Let's say it's a password.

00:00:26.629 --> 00:00:28.814
Here, I'm using Swift's for in loop,

00:00:28.814 --> 00:00:32.168
which we'll discuss in detail
on the lesson on control flow.

00:00:32.168 --> 00:00:36.529
By using the string's struct's
.character's property, which is itself

00:00:36.529 --> 00:00:41.238
an array, I'm able to iterate through
the password, looking at each character.

00:00:41.238 --> 00:00:45.706
Let's say I wanted to replace all
the e's in my password with 3s.

00:00:45.706 --> 00:00:47.344
For this kind of operation,

00:00:47.344 --> 00:00:51.448
the methods in Objective-C's NSString
class can be really helpful.

00:00:51.448 --> 00:00:54.880
Swift automatically bridges
between the string struct and

00:00:54.880 --> 00:00:59.477
Objective-C's NSString class, which
means Swift's strings have access to

00:00:59.477 --> 00:01:03.538
NSString methods, like
stringByReplacingOccurrencesOfString.

00:01:03.538 --> 00:01:06.186
To see more methods available
from the NSString class,

00:01:06.186 --> 00:01:08.340
follow the link in
the instructor's notes.

