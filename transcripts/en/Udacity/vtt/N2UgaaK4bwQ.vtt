WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
So now that you've learned about search trees and pre-processing,

00:00:04.000 --> 00:00:07.000
you already know quite a lot about the loopholes

00:00:07.000 --> 00:00:10.000
that we can find in the laws of NP-completeness

00:00:10.000 --> 00:00:13.000
in order to actually tackle an NP-complete problem,

00:00:13.000 --> 00:00:15.000
because now you can get from algorithms that

00:00:15.000 --> 00:00:18.000
would normally take 2 to the power of N time

00:00:18.000 --> 00:00:20.000
down to other algorithms that say take

00:00:20.000 --> 00:00:23.000
1.3 to the power of N time,

00:00:23.000 --> 00:00:25.000
which already makes many more instances solvable.

00:00:25.000 --> 00:00:27.000
But to conclude this unit,

00:00:27.000 --> 00:00:30.000
I want to show you another loophole in the

00:00:30.000 --> 00:00:33.000
laws of NP-completeness that is sometimes very, very useful

00:00:33.000 --> 00:00:35.000
and that actually not very many people know about.

00:00:35.000 --> 00:00:39.000
So I'm going to state another law from the book of NP-completeness,

00:00:39.000 --> 00:00:41.000
and that law in which we will soon poke loopholes is

00:00:41.000 --> 00:00:44.000
larger instances are harder to solve.

00:00:44.000 --> 00:00:48.000
And that is actually quite obvious because we said that we were going to look at

00:00:48.000 --> 00:00:51.000
worse case time and always measure the running time of an  algorithm

00:00:51.000 --> 00:00:53.000
as a function of the input size.

00:00:53.000 --> 00:00:59.000
Say we have an algorithm that runs in O of 2 to the power of N times N squared time.

00:00:59.000 --> 00:01:04.000
What this law here means is bigger and more time in worst-case scenario.

00:01:04.000 --> 00:01:06.000
So if you have a running time like this,

00:01:06.000 --> 00:01:10.000
a bigger input size means more running time required for the

00:01:10.000 --> 00:01:12.000
algorithm in a worst-case scenario.

00:01:12.000 --> 00:01:16.000
Let's talk a little bit about this N here, the size of the input,

00:01:16.000 --> 00:01:20.000
because this is often a very coarse estimate of

00:01:20.000 --> 00:01:23.000
how hard an input is actually to solve,

00:01:23.000 --> 00:01:25.000
and I'm going to give you one example of this

00:01:25.000 --> 00:01:28.000
or actually I'm going to quiz you about this.

00:01:28.000 --> 00:01:31.000
Given the search trees and the pre-processing,

00:01:31.000 --> 00:01:35.000
which of the following instances of vertex cover is easier to solve?

00:01:35.000 --> 00:01:37.000
And I know this is an easy one.

00:01:37.000 --> 00:01:38.000
In case you're wondering,

00:01:38.000 --> 99:59:59.000
the number of vertices in each of the graphs here is the same.

