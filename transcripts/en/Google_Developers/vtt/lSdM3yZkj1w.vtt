WEBVTT
Kind: captions
Language: en

00:00:09.540 --> 00:00:12.910
Hello, and welcome to this
episode of Google Developers

00:00:12.910 --> 00:00:13.410
Live.

00:00:13.410 --> 00:00:17.480
I'm Sarah Maddox from the Google
Maps Developer Relations team.

00:00:17.480 --> 00:00:20.870
In this video you will learn
how to add a place autocomplete

00:00:20.870 --> 00:00:24.580
widget to a map created with
the Google Maps JavaScript API.

00:00:24.580 --> 00:00:27.140
I'll also show you how
an autocompete widget can

00:00:27.140 --> 00:00:30.450
be useful even without a
map to auto-fill an address

00:00:30.450 --> 00:00:33.420
form for example.

00:00:33.420 --> 00:00:36.460
Let's take a look
at it in action.

00:00:36.460 --> 00:00:38.990
Autocomplete gives
your applications

00:00:38.990 --> 00:00:43.370
the type ahead search behavior
of the search field on a Google

00:00:43.370 --> 00:00:44.980
map.

00:00:44.980 --> 00:00:48.620
Start typing something into the
address box and autocomplete

00:00:48.620 --> 00:00:49.510
supplies predictions.

00:01:03.170 --> 00:01:05.120
You can configure the
autocomplete widget

00:01:05.120 --> 00:01:07.810
to return specific
types of places,

00:01:07.810 --> 00:01:10.320
geographical places
like towns and cities,

00:01:10.320 --> 00:01:12.790
or establishments
like pizza places,

00:01:12.790 --> 00:01:15.910
or regions in other
geographical areas.

00:01:15.910 --> 00:01:20.340
If no type is specified the
widget will return all types.

00:01:20.340 --> 00:01:22.400
If you haven't already
seen our videos

00:01:22.400 --> 00:01:24.500
on getting started with
the JavaScript API,

00:01:24.500 --> 00:01:27.790
now is a really good
time to watch them.

00:01:27.790 --> 00:01:30.793
Let's get started with the code.

00:01:30.793 --> 00:01:33.380
If you've created
a map before you'll

00:01:33.380 --> 00:01:36.360
recognize this as
the basic JavaScript

00:01:36.360 --> 00:01:39.210
used to create a map.

00:01:39.210 --> 00:01:42.910
Place autocomplete is part
of the Google Places library.

00:01:42.910 --> 00:01:45.300
So our first step is to
add the Google Places

00:01:45.300 --> 00:01:47.481
library to the JavaScript API.

00:01:47.481 --> 00:01:48.980
There are a number
of libraries that

00:01:48.980 --> 00:01:51.990
provide additional functionality
for the JavaScript API

00:01:51.990 --> 00:01:54.710
and one of them is the
Google Places library.

00:01:54.710 --> 00:01:58.150
So to add a library, include
the libraries parameter

00:01:58.150 --> 00:02:00.400
in the JavaScript API Loader.

00:02:00.400 --> 00:02:02.350
Here I've specified
libraries=places.

00:02:05.380 --> 00:02:09.400
Autocompete adds a text
input element to your page

00:02:09.400 --> 00:02:11.009
and responds with
predictions when

00:02:11.009 --> 00:02:13.010
the user types
into the text box.

00:02:13.010 --> 00:02:18.380
So, we need to define an HTML
input element of timed text.

00:02:18.380 --> 00:02:22.200
And next we can set some options
for the autocomplete widget.

00:02:22.200 --> 00:02:25.680
I've decided to use a default
area for the search conducted

00:02:25.680 --> 00:02:27.240
by autocomplete.

00:02:27.240 --> 00:02:32.850
To define the area, I've
created a LatLngBounds object.

00:02:32.850 --> 00:02:34.850
It defines a
rectangle on the earth

00:02:34.850 --> 00:02:36.860
by setting the
latitude and longitude

00:02:36.860 --> 00:02:39.430
for the southwest corner
and for the northeast

00:02:39.430 --> 00:02:41.120
corner of the rectangle.

00:02:41.120 --> 00:02:43.860
The autocomplete will bias
its search to this area

00:02:43.860 --> 00:02:47.060
but not restrict the
results to that area.

00:02:47.060 --> 00:02:49.340
I've decided to bias
my search results

00:02:49.340 --> 00:02:51.595
to an area in Sydney, Australia.

00:02:51.595 --> 00:02:53.680
I've also created
the variable, which

00:02:53.680 --> 00:02:56.945
I've called options, that
contains the bounds object.

00:02:59.830 --> 00:03:03.960
Now, we hook up the HTML
input element as a variable

00:03:03.960 --> 00:03:06.650
and add some magic to push
the autocomplete widget

00:03:06.650 --> 00:03:08.370
onto the map canvas.

00:03:08.370 --> 00:03:10.710
And finally create
the autocomplete

00:03:10.710 --> 00:03:13.710
object, passing it,
the input element,

00:03:13.710 --> 00:03:17.010
and the options object.

00:03:17.010 --> 00:03:20.661
Let's take a look at the
autocomplete widget in action

00:03:20.661 --> 00:03:21.160
again.

00:03:31.410 --> 00:03:35.745
So one thing to note is
that by default autocomplete

00:03:35.745 --> 00:03:39.120
will automatically determine
the user's location by looking

00:03:39.120 --> 00:03:41.780
at their IP address and
will bias the search

00:03:41.780 --> 00:03:43.720
results to that location.

00:03:43.720 --> 00:03:46.560
You can turn off this
location awareness

00:03:46.560 --> 00:03:49.690
by setting the bounds to
encompass the whole world.

00:03:49.690 --> 00:03:55.060
Use bounds of (-90,
-180) and (90, 180.)

00:03:55.060 --> 00:03:57.900
You can also set the
bounds to the browser's

00:03:57.900 --> 00:04:00.251
navigated geolocation object.

00:04:00.251 --> 00:04:01.750
And there are other
options that you

00:04:01.750 --> 00:04:04.280
can use to customize
the autocomplete widget.

00:04:04.280 --> 00:04:07.510
The details are all
in the documentation.

00:04:07.510 --> 00:04:10.580
Here's a hint, you can
use the geocoding API

00:04:10.580 --> 00:04:12.670
to find the latitude
and longitude

00:04:12.670 --> 00:04:15.160
coordinates of the
location you have in mind.

00:04:15.160 --> 00:04:17.990
So here's a link to the
geocoding API documentation.

00:04:21.058 --> 00:04:23.910
OK, let's think
outside the map, how

00:04:23.910 --> 00:04:28.390
about using autocomplete to
auto-fill an address form.

00:04:28.390 --> 00:04:31.040
There's a really nice example
in the documentation, which

00:04:31.040 --> 00:04:32.830
I'm just going to
show you quickly.

00:04:32.830 --> 00:04:34.600
And you could come
along later and have

00:04:34.600 --> 00:04:36.030
a look at the code
in more detail.

00:04:40.000 --> 00:04:41.750
Here's my address form.

00:04:41.750 --> 00:04:46.730
Start typing the address where
it says enter your address

00:04:46.730 --> 00:04:50.050
and autocomplete
supplies the predictions.

00:04:50.050 --> 00:04:53.160
When I select one
of these predicted

00:04:53.160 --> 00:04:58.000
places the JavaScript
I have takes

00:04:58.000 --> 00:05:02.570
the users getPlace to retrieve
the information retrieved

00:05:02.570 --> 00:05:06.130
from the Google Places
services and puts the address

00:05:06.130 --> 00:05:09.740
into components on the form.

00:05:09.740 --> 00:05:11.920
Let's take a look at the
code for the address box

00:05:11.920 --> 00:05:17.640
by scrolling down on
this documentation page.

00:05:17.640 --> 00:05:21.920
We've supplied the
code after the sample.

00:05:21.920 --> 00:05:25.320
So we use getPlace to
get the information

00:05:25.320 --> 00:05:27.670
about the place
including the address

00:05:27.670 --> 00:05:30.280
and then we take each
element of the address

00:05:30.280 --> 00:05:34.510
and parse it and put
it into the form.

00:05:34.510 --> 00:05:37.390
When we use a selected place
from the list information

00:05:37.390 --> 00:05:40.520
about the place is returned
to the autocompete object

00:05:40.520 --> 00:05:43.960
and your application can grab
that information via getPlace

00:05:43.960 --> 00:05:46.630
and use it to populate
the fields on your form.

00:05:46.630 --> 00:05:48.950
So as I said, you can
go to a documentation

00:05:48.950 --> 00:05:50.700
and have a closer
look at the code

00:05:50.700 --> 00:05:54.220
and the address form in action.

00:05:54.220 --> 00:05:56.160
What about styling.

00:05:56.160 --> 00:05:58.070
You can style the
autocomplete dropdown

00:05:58.070 --> 00:06:00.800
to suit your own
branding or site design.

00:06:00.800 --> 00:06:02.785
So let's see a simple example.

00:06:07.200 --> 00:06:11.990
In this example I've
colored my autocomplete box

00:06:11.990 --> 00:06:17.995
a nice varnished yellow and
styled the dropdown to match.

00:06:23.080 --> 00:06:26.030
So that's a really simple
example of styling.

00:06:26.030 --> 00:06:30.040
The documentation has all the
details about the CSS classes

00:06:30.040 --> 00:06:30.980
that are available.

00:06:30.980 --> 00:06:33.195
Let's have a look at
the CSS that I used.

00:06:36.920 --> 00:06:40.680
I've just styled the
pac-container class

00:06:40.680 --> 00:06:43.848
and the documentation
describes all the other classes

00:06:43.848 --> 00:06:44.347
available.

00:06:47.149 --> 00:06:49.890
If JavaScript isn't
your thing or if you're

00:06:49.890 --> 00:06:53.520
working on a mobile app, have
a look at the Google Places web

00:06:53.520 --> 00:06:55.560
service tool, what
we've been looking at

00:06:55.560 --> 00:06:58.790
is the JavaScript library.

00:06:58.790 --> 00:07:03.070
I hope you've enjoyed this video
from Google Developers Live.

