WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.808
[MUSIC PLAYING]

00:00:06.664 --> 00:00:07.600
KODLEE YIN: Hi.

00:00:07.600 --> 00:00:08.350
My name is Kodlee.

00:00:08.350 --> 00:00:09.670
RASEKH RIFAAT: And I'm Rasekh.

00:00:09.670 --> 00:00:12.157
And we're both engineers
on the Android Auto team

00:00:12.157 --> 00:00:13.990
here to talk to you
about what's new for app

00:00:13.990 --> 00:00:17.730
developers on Android Auto.

00:00:17.730 --> 00:00:19.420
Now we're incredibly
excited at Google

00:00:19.420 --> 00:00:21.400
about the automotive
space right now because we

00:00:21.400 --> 00:00:23.820
see it going through
a huge transformation

00:00:23.820 --> 00:00:26.770
in connectivity,
electrification, interfaces

00:00:26.770 --> 00:00:29.710
and sensors, sharing,
and autonomy.

00:00:29.710 --> 00:00:33.850
Cars are rapidly turning into
full-blown computers on wheels.

00:00:33.850 --> 00:00:36.230
They've got high-speed
mobile connections, cameras,

00:00:36.230 --> 00:00:41.450
microphones, and screens of all
shapes and sizes everywhere.

00:00:41.450 --> 00:00:43.450
Android Auto is an
effort from Google

00:00:43.450 --> 00:00:46.450
and our automotive partners to
bring these advances together

00:00:46.450 --> 00:00:49.510
and create a safe and
seamless connected experience

00:00:49.510 --> 00:00:51.340
for drivers everywhere.

00:00:51.340 --> 00:00:53.360
Of course that's
easier said than done.

00:00:53.360 --> 00:00:56.310
There are dozens of
different car platforms

00:00:56.310 --> 00:01:00.270
today, many different input
types from touchscreens

00:01:00.270 --> 00:01:03.000
to touchpads to
rotary controllers,

00:01:03.000 --> 00:01:08.160
many different screen shapes,
sizes, and resolutions.

00:01:08.160 --> 00:01:11.910
Today, you can see that
vision at work in any Android

00:01:11.910 --> 00:01:13.680
Auto-compatible car.

00:01:13.680 --> 00:01:16.230
Drivers have access
to their favorite apps

00:01:16.230 --> 00:01:19.500
right from their car's display,
and developers build their app

00:01:19.500 --> 00:01:22.800
once without worrying about
different makes and models,

00:01:22.800 --> 00:01:25.050
input controls, and screens.

00:01:25.050 --> 00:01:27.120
Today, we'll talk about
two of the most important

00:01:27.120 --> 00:01:30.890
app categories,
messaging and media.

00:01:30.890 --> 00:01:31.650
KODLEE YIN: Great.

00:01:31.650 --> 00:01:33.901
So first up is messaging.

00:01:33.901 --> 00:01:37.120
Messaging has come a long way
in both Android Auto and Android

00:01:37.120 --> 00:01:38.490
the OS.

00:01:38.490 --> 00:01:40.790
When Android Auto started
supporting messaging,

00:01:40.790 --> 00:01:43.270
there wasn't really a good
way for messaging apps

00:01:43.270 --> 00:01:46.480
to get their messaging
information over to the car.

00:01:46.480 --> 00:01:49.000
That's where CarExtender
came into play.

00:01:49.000 --> 00:01:51.250
CarExtender allowed a
way for messaging apps

00:01:51.250 --> 00:01:53.500
to provide conversation
details and a way

00:01:53.500 --> 00:01:56.890
to reply to conversations
to Android Auto.

00:01:56.890 --> 00:02:00.730
But since Android N, apps could
stylize their notifications

00:02:00.730 --> 00:02:03.540
with something called
MessagingStyle.

00:02:03.540 --> 00:02:06.870
MessagingStyle is a huge
step up from CarExtender

00:02:06.870 --> 00:02:09.630
as it allows messaging apps
to provide conversation

00:02:09.630 --> 00:02:13.400
information directly
into the notification.

00:02:13.400 --> 00:02:17.460
Not only does it provide a nicer
UI for conversation details

00:02:17.460 --> 00:02:21.620
but it provides affordances like
replying and liking directly

00:02:21.620 --> 00:02:24.430
in line to the notification.

00:02:24.430 --> 00:02:26.770
Android Auto now
fully supports the use

00:02:26.770 --> 00:02:29.500
of MessagingStyle and
actions without the need

00:02:29.500 --> 00:02:30.940
for CarExtender.

00:02:30.940 --> 00:02:34.030
This also means Android Auto
and the Assistant both fully

00:02:34.030 --> 00:02:36.150
support group messaging.

00:02:36.150 --> 00:02:38.680
So for the price of
implementing MessagingStyle,

00:02:38.680 --> 00:02:42.380
apps not only gain a richer
mobile user experience

00:02:42.380 --> 00:02:46.180
but also gain the benefit
of automotive support.

00:02:46.180 --> 00:02:50.490
So let's see how Android Auto
interfaces with this, starting

00:02:50.490 --> 00:02:52.590
on the messaging app side.

00:02:52.590 --> 00:02:54.740
From Android Auto's
point of view,

00:02:54.740 --> 00:02:57.740
messaging apps have
three core functions--

00:02:57.740 --> 00:03:01.760
notifying users of messages,
marking those messages as read,

00:03:01.760 --> 00:03:04.076
and replying to those messages.

00:03:04.076 --> 00:03:08.070
Working backwards, apps can
implement reading and replying

00:03:08.070 --> 00:03:09.790
with services.

00:03:09.790 --> 00:03:11.940
These services can be
triggered internally

00:03:11.940 --> 00:03:16.440
with intents or externally, like
via Android Auto, with pending

00:03:16.440 --> 00:03:18.040
intents.

00:03:18.040 --> 00:03:21.430
Notifying is done via
an Android notification,

00:03:21.430 --> 00:03:23.860
and the messaging
information is provided

00:03:23.860 --> 00:03:25.750
with the MessagingStyle.

00:03:25.750 --> 00:03:28.180
The mark is read, and
reply-pending intents

00:03:28.180 --> 00:03:31.510
are wrapped in actions and both
provided in the notification

00:03:31.510 --> 00:03:32.690
as well.

00:03:32.690 --> 00:03:36.520
Note here that the reply action
has a remote input that's

00:03:36.520 --> 00:03:41.540
added that acts as a sort of
input field for the reply.

00:03:41.540 --> 00:03:43.680
And that's the messaging
app's architecture.

00:03:43.680 --> 00:03:46.380
Moving on to the other
side of the notification,

00:03:46.380 --> 00:03:49.950
we can see how Android Auto
leverages these objects.

00:03:49.950 --> 00:03:53.880
Android Auto will first
post an in-car notification

00:03:53.880 --> 00:03:55.920
and once tapped
on will read aloud

00:03:55.920 --> 00:03:57.840
the messages contained within.

00:03:57.840 --> 00:04:01.140
The mark as read pending
intent is then fired.

00:04:01.140 --> 00:04:04.050
The user is given the choice
to respond and, if taken,

00:04:04.050 --> 00:04:07.740
a transcription of that response
is set in that remote input.

00:04:07.740 --> 00:04:10.950
The reply-pending
intent is then fired.

00:04:10.950 --> 00:04:13.150
And that's the entire
Android Auto flow,

00:04:13.150 --> 00:04:16.300
so let's see how we
can put that into code.

00:04:16.300 --> 00:04:20.160
First, the app needs to declare
support for Android Auto.

00:04:20.160 --> 00:04:23.340
To do that, it needs to
create a new XML file that's

00:04:23.340 --> 00:04:25.440
linked in the Android manifest.

00:04:25.440 --> 00:04:30.090
This XML file says that it
has notifications that Android

00:04:30.090 --> 00:04:32.130
Auto should take a look at.

00:04:32.130 --> 00:04:37.230
Note that for messaging apps
that support SMS, MMS, or RCS,

00:04:37.230 --> 00:04:41.140
this uses SMS bit also
needs to be added.

00:04:41.140 --> 00:04:44.130
So now Android Auto is taking
a look at our messages.

00:04:44.130 --> 00:04:46.520
We can build up
the MessagingStyle.

00:04:46.520 --> 00:04:49.420
So we can't really have a
conversation without people,

00:04:49.420 --> 00:04:53.370
so the first person we have to
add is the user of the device.

00:04:53.370 --> 00:04:56.550
To do that, we create
this new Person object.

00:04:56.550 --> 00:04:59.640
Person is used to set
things like the user's name,

00:04:59.640 --> 00:05:02.370
their icon, and a
unique key in the event

00:05:02.370 --> 00:05:05.140
that multiple people
have the same name.

00:05:05.140 --> 00:05:08.220
So we create this
deviceUser, and we create

00:05:08.220 --> 00:05:10.020
the messagingStyle with it.

00:05:10.020 --> 00:05:13.170
We can then add our
conversation information.

00:05:13.170 --> 00:05:15.240
So I'm from Seattle
and I love skiing,

00:05:15.240 --> 00:05:19.170
so I'm setting the conversation
title to ski group.

00:05:19.170 --> 00:05:21.780
Because I'm taking
multiple friends

00:05:21.780 --> 00:05:24.510
this is a group conversation,
so the messaging app

00:05:24.510 --> 00:05:26.550
needs to set it as such.

00:05:26.550 --> 00:05:29.700
Note here that conversation
title and whether

00:05:29.700 --> 00:05:33.280
or not the conversation is a
group can be set independently.

00:05:33.280 --> 00:05:36.270
This is new in Android P
and has been back ported

00:05:36.270 --> 00:05:39.920
to older Android versions
in the Compat library.

00:05:39.920 --> 00:05:41.940
And finally, we can
add all the messages

00:05:41.940 --> 00:05:44.580
in this conversation in the
order they were received.

00:05:44.580 --> 00:05:47.250
In this case, my friend wants
to coordinate breakfast,

00:05:47.250 --> 00:05:50.340
so the messaging app provides
the text, the timestamp,

00:05:50.340 --> 00:05:54.370
and the sender in
the form of a person.

00:05:54.370 --> 00:05:58.330
With this conversation set up,
it's time to add the actions.

00:05:58.330 --> 00:06:01.720
For the reply action we
instantiate an Action.Builder

00:06:01.720 --> 00:06:05.836
and set the semantic action
to SEMANTIC_ACTION_REPLY.

00:06:05.836 --> 00:06:10.050
That must also tell the OS that
firing the reply-pending intent

00:06:10.050 --> 00:06:12.120
won't show any extra UI.

00:06:12.120 --> 00:06:14.842
This is especially
important in Android Auto

00:06:14.842 --> 00:06:16.800
because we don't want to
be distracting drivers

00:06:16.800 --> 00:06:19.110
with extra pop ups.

00:06:19.110 --> 00:06:22.710
Finally, the reply action is
supplied with that remote input

00:06:22.710 --> 00:06:25.000
I talked about earlier.

00:06:25.000 --> 00:06:28.310
On the mark-as-read side, things
are done about the same way.

00:06:28.310 --> 00:06:30.770
This time the
semantic action is set

00:06:30.770 --> 00:06:33.680
to SEMANTIC_ACTION_MARK_AS_READ,
and again we

00:06:33.680 --> 00:06:36.200
tell the OS that firing
that pending intent won't

00:06:36.200 --> 00:06:38.525
show extra UI.

00:06:38.525 --> 00:06:42.050
Note here that the
mark-as-read action does not

00:06:42.050 --> 00:06:44.930
need a remote input.

00:06:44.930 --> 00:06:46.490
So that's all three pieces.

00:06:46.490 --> 00:06:48.830
The notification
can now be built.

00:06:48.830 --> 00:06:52.100
For reference, here are the
three elements we created--

00:06:52.100 --> 00:06:55.440
messaging style, which holds all
our conversation information;

00:06:55.440 --> 00:06:59.500
our reply action; and
our mark-as-read action.

00:06:59.500 --> 00:07:02.490
To build a notification,
some boilerplate is provided,

00:07:02.490 --> 00:07:04.530
and then we set the
messaging style.

00:07:04.530 --> 00:07:06.930
We can then add our actions.

00:07:06.930 --> 00:07:10.180
Here is where the messaging
app has some options.

00:07:10.180 --> 00:07:12.360
Note that the reply
action is added

00:07:12.360 --> 00:07:15.960
as a regular visible action,
and the mark-as-read action

00:07:15.960 --> 00:07:18.000
is added as invisible.

00:07:18.000 --> 00:07:19.740
This is purely stylistic.

00:07:19.740 --> 00:07:22.890
One can add both actions
as visible or invisible.

00:07:22.890 --> 00:07:26.220
This will just change how it
shows up in the mobile UI.

00:07:26.220 --> 00:07:29.160
On Android Auto,
actions are never shown,

00:07:29.160 --> 00:07:32.580
but Android Auto will be able to
read both visible and invisible

00:07:32.580 --> 00:07:34.970
actions.

00:07:34.970 --> 00:07:38.985
And finally, the messaging
app can post the notification.

00:07:38.985 --> 00:07:40.340
And there we have it.

00:07:40.340 --> 00:07:42.590
My friends and I have planned
breakfast on the road,

00:07:42.590 --> 00:07:43.890
and our ski trip is under way.

00:07:46.225 --> 00:07:47.600
RASEKH RIFAAT:
And now that we've

00:07:47.600 --> 00:07:49.730
coordinated with everybody,
let's find something

00:07:49.730 --> 00:07:52.240
to listen to on the drive
out to the mountains.

00:07:52.240 --> 00:07:55.370
Media in the car is one of
our core user experiences,

00:07:55.370 --> 00:07:57.530
and getting drivers
access to their content

00:07:57.530 --> 00:07:59.177
should be front and center.

00:07:59.177 --> 00:08:01.760
I'm going to talk about several
new features we're introducing

00:08:01.760 --> 00:08:04.100
today to enhance the
abilities of media apps

00:08:04.100 --> 00:08:06.920
to provide content
within Android Auto.

00:08:06.920 --> 00:08:09.590
In particular, we want to
make content more visually

00:08:09.590 --> 00:08:12.680
pleasing by adding additional
content-style hints

00:08:12.680 --> 00:08:16.010
and enabling additional search
results provided by the app.

00:08:18.620 --> 00:08:21.620
To start off, let's go
over the architecture

00:08:21.620 --> 00:08:23.270
that an app has
when communicating

00:08:23.270 --> 00:08:25.010
with Android Auto.

00:08:25.010 --> 00:08:28.850
The first thing a media app
needs is a MediaBrowserService.

00:08:28.850 --> 00:08:32.669
It provides a tree of
playable and browsable items.

00:08:32.669 --> 00:08:36.200
Browsable items are basically
folders to organize app content

00:08:36.200 --> 00:08:39.419
instead of returning a giant
list of playable items.

00:08:39.419 --> 00:08:43.340
The media apps implement
the onLoadChildren method

00:08:43.340 --> 00:08:45.890
which loads a particular
level of the tree.

00:08:45.890 --> 00:08:48.500
Here in our first call
to onLoadChildren,

00:08:48.500 --> 00:08:50.750
our example service
would return home,

00:08:50.750 --> 00:08:54.320
recently played,
recommended, and playlists.

00:08:54.320 --> 00:08:56.540
Now, since this is
running in a car,

00:08:56.540 --> 00:08:58.280
we recommend that
media apps only

00:08:58.280 --> 00:09:01.490
provide two levels
in a tree to avoid

00:09:01.490 --> 00:09:03.140
distracting drivers
and making them

00:09:03.140 --> 00:09:06.290
click through multiple
levels while they're driving.

00:09:06.290 --> 00:09:08.880
Now once the users
pick something playable

00:09:08.880 --> 00:09:12.060
from the browse tree,
the MediaSessionService

00:09:12.060 --> 00:09:14.010
is used to start playing
music and to provide

00:09:14.010 --> 00:09:17.790
metadata and controls to show
what's currently playing.

00:09:17.790 --> 00:09:20.220
For example, our media app
that we're showing here

00:09:20.220 --> 00:09:24.120
supports play/pause, skip
forward, and skip back,

00:09:24.120 --> 00:09:26.500
and we show that in
the Android Auto UI.

00:09:26.500 --> 00:09:28.440
There's also the
ability for media

00:09:28.440 --> 00:09:31.440
apps to provide their own
custom actions, maybe something

00:09:31.440 --> 00:09:34.251
like 30-second skip.

00:09:34.251 --> 00:09:37.580
And obviously we want to get
the user away from touching

00:09:37.580 --> 00:09:39.480
or doing things while
they're driving,

00:09:39.480 --> 00:09:41.045
so we bring in the Assistant.

00:09:41.045 --> 00:09:45.086
It might say something like,
hey Google, play my ski jams.

00:09:45.086 --> 00:09:47.990
The Google Assistant
performs speech recognition

00:09:47.990 --> 00:09:50.480
and can request that the
MediaSessionService play

00:09:50.480 --> 00:09:54.310
the query, and music
starts playing.

00:09:54.310 --> 00:09:57.360
We're going to take it
one step farther today.

00:09:57.360 --> 00:09:59.670
We're giving the
ability for media apps

00:09:59.670 --> 00:10:01.320
to implement an
additional function

00:10:01.320 --> 00:10:04.330
on the MediaBrowserService,
onSearch.

00:10:04.330 --> 00:10:08.040
And once the music has started
playing from a Google Assistant

00:10:08.040 --> 00:10:10.980
query, we'll provide that
query to the media app,

00:10:10.980 --> 00:10:13.410
and they can provide
additional results.

00:10:13.410 --> 00:10:17.040
Here in this case, the media
app provided a ski trip playlist

00:10:17.040 --> 00:10:20.436
from this year as well
as one from last year.

00:10:20.436 --> 00:10:25.420
So let's take a look at the
code needed to make this happen.

00:10:25.420 --> 00:10:27.800
For apps which already
support Android Auto,

00:10:27.800 --> 00:10:30.140
this should look
pretty familiar.

00:10:30.140 --> 00:10:32.730
This is the onSearch method.

00:10:32.730 --> 00:10:35.730
It takes the query
string, an extras bundle,

00:10:35.730 --> 00:10:39.570
and a result object which the
app fills in and sends back

00:10:39.570 --> 00:10:41.530
to Android Auto.

00:10:41.530 --> 00:10:44.590
First off, apps should
return an empty list

00:10:44.590 --> 00:10:47.556
if they get a query
they don't support.

00:10:47.556 --> 00:10:51.370
Second, for queries that can't
be answered synchronously,

00:10:51.370 --> 00:10:53.300
apps detach from
the results object,

00:10:53.300 --> 00:10:55.670
and that lets the
media framework know

00:10:55.670 --> 00:10:58.130
not to wait and not to send
anything back to Android Auto

00:10:58.130 --> 00:10:59.360
right away.

00:10:59.360 --> 00:11:02.090
This gives a chance for apps to
do extra work on a background

00:11:02.090 --> 00:11:06.131
thread before sending the
results to Android Auto.

00:11:06.131 --> 00:11:09.040
And finally when the
results are ready,

00:11:09.040 --> 00:11:11.440
they can send the result
and the result object,

00:11:11.440 --> 00:11:13.930
and Android Auto will be
notified and show the results

00:11:13.930 --> 00:11:15.610
on screen.

00:11:15.610 --> 00:11:18.700
Now all these code snippets
come from the Universal Music

00:11:18.700 --> 00:11:22.870
Player, an open-source media app
published by Google on GitHub.

00:11:22.870 --> 00:11:25.000
It can be easily
cloned, compiled,

00:11:25.000 --> 00:11:27.700
and used as a great reference
building your own media app.

00:11:30.801 --> 00:11:32.020
So voila.

00:11:32.020 --> 00:11:35.560
Our media app returns a list of
items from the ski jams query.

00:11:35.560 --> 00:11:38.170
Notice it returned two
playlists and an album.

00:11:38.170 --> 00:11:40.240
It would be really
nice if Android Auto

00:11:40.240 --> 00:11:43.870
could group those items and
show them to the user as groups.

00:11:43.870 --> 00:11:45.640
Fortunately, we're
introducing a way

00:11:45.640 --> 00:11:49.350
to do that in the
onSearchResults.

00:11:49.350 --> 00:11:52.250
Here's an example function
which your media app might

00:11:52.250 --> 00:11:55.850
use to convert from an internal
representation of a media item

00:11:55.850 --> 00:11:58.190
into the MediaBrowserCompat
media item

00:11:58.190 --> 00:12:00.755
that Android Auto needs.

00:12:00.755 --> 00:12:03.775
We can annotate items
with a category extra,

00:12:03.775 --> 00:12:06.720
and Android Auto will
group any adjacent items

00:12:06.720 --> 00:12:09.510
with the same category
and show a heading.

00:12:09.510 --> 00:12:13.260
For the two ski trip playlists
we can annotate with playlist,

00:12:13.260 --> 00:12:15.154
and Android Auto will
group them together

00:12:15.154 --> 00:12:16.320
and add the heading for you.

00:12:19.610 --> 00:12:21.540
We're also adding some
additional annotations

00:12:21.540 --> 00:12:24.957
on media items that would be
really useful on our trip.

00:12:24.957 --> 00:12:27.040
For example, I may be
heading out to the mountains

00:12:27.040 --> 00:12:28.180
with my family.

00:12:28.180 --> 00:12:29.980
I worry that maybe
a song comes on that

00:12:29.980 --> 00:12:32.170
has some explicit content.

00:12:32.170 --> 00:12:35.410
We now add the ability to say,
OK, this particular playlist

00:12:35.410 --> 00:12:37.990
or song has explicit
content, and Android Auto

00:12:37.990 --> 00:12:39.940
can show that in the UI.

00:12:39.940 --> 00:12:41.610
Similarly, out in
the mountains, I

00:12:41.610 --> 00:12:42.970
might not have great bandwidth.

00:12:42.970 --> 00:12:45.220
I'd love to know if the
playlist or songs have already

00:12:45.220 --> 00:12:46.780
been downloaded,
or maybe I don't

00:12:46.780 --> 00:12:50.200
want to burn my data on
music that I'm playing.

00:12:50.200 --> 00:12:53.101
We can also annotate
or not media items

00:12:53.101 --> 00:12:55.225
have been downloaded and
are already on the device.

00:12:59.340 --> 00:12:59.840
Great.

00:12:59.840 --> 00:13:02.660
Looks like the Ski Trip
2018 is already downloaded,

00:13:02.660 --> 00:13:05.330
doesn't have any
explicit content.

00:13:05.330 --> 00:13:10.350
Great choice for my trip
out to the mountains.

00:13:10.350 --> 00:13:13.120
There's one more function
that needs updating.

00:13:13.120 --> 00:13:15.070
The MediaBrowserService
onGetRoot

00:13:15.070 --> 00:13:17.620
is called when a
media app is first

00:13:17.620 --> 00:13:20.310
connected to by Android Auto.

00:13:20.310 --> 00:13:22.640
In order for search and
for the additional styling

00:13:22.640 --> 00:13:25.700
hints to be enabled, you'll
need to add a couple of extras

00:13:25.700 --> 00:13:28.100
to let Android Auto know that
you support those features.

00:13:31.720 --> 00:13:33.870
As I mentioned, we're
introducing the concept

00:13:33.870 --> 00:13:36.530
of additional content
styling, and Android Auto

00:13:36.530 --> 00:13:39.260
will be interpreting
the browse tree returned

00:13:39.260 --> 00:13:43.036
by apps in a much more
visually pleasing way.

00:13:43.036 --> 00:13:46.930
By default, items which are
browsable, like folders,

00:13:46.930 --> 00:13:48.400
will be interpreted as lists.

00:13:48.400 --> 00:13:50.230
This is how we do things today.

00:13:50.230 --> 00:13:53.200
But for playable items,
things like songs or albums

00:13:53.200 --> 00:13:56.620
or playlists, we're going to
be showing them now as grids.

00:13:56.620 --> 00:14:00.520
Most of these items have
much richer visual content

00:14:00.520 --> 00:14:03.880
that users can identify by
seeing much easier than reading

00:14:03.880 --> 00:14:06.340
and much safer when
you're in the car.

00:14:06.340 --> 00:14:09.970
There are, however, times when
a list is better than a grid.

00:14:09.970 --> 00:14:14.670
For example, in a podcast app
each of the individual podcasts

00:14:14.670 --> 00:14:17.670
would probably have individual
art that is much more visually

00:14:17.670 --> 00:14:21.390
representative while the
episodes, instead, they'd

00:14:21.390 --> 00:14:24.600
have all the same art but
different episode titles

00:14:24.600 --> 00:14:27.870
and lengths and status,
and it would be much

00:14:27.870 --> 00:14:31.240
better to show them as lists.

00:14:31.240 --> 00:14:34.670
In the onGetRoot
function, the media app

00:14:34.670 --> 00:14:36.260
can provide a hint
to Android Auto

00:14:36.260 --> 00:14:38.360
to say I prefer
my browsable items

00:14:38.360 --> 00:14:40.250
to be grids and
my playable items

00:14:40.250 --> 00:14:42.660
to be lists or vice versa.

00:14:42.660 --> 00:14:45.200
So they have full control over
how we're showing the items.

00:14:49.080 --> 00:14:51.480
I already mentioned the
Universal Media Player.

00:14:51.480 --> 00:14:54.180
I just want to reiterate, it's
a great, comprehensive sample

00:14:54.180 --> 00:14:56.110
media app that's available.

00:14:56.110 --> 00:14:58.800
It gives you a canonical
implementation of a media app

00:14:58.800 --> 00:15:00.960
that actually plays
music, and it also

00:15:00.960 --> 00:15:03.990
supports Android Auto as
well as other services

00:15:03.990 --> 00:15:07.390
like Wear and Android TV.

00:15:07.390 --> 00:15:09.435
And if you are
developing a media app,

00:15:09.435 --> 00:15:11.560
I also encourage you to
check out the Android Media

00:15:11.560 --> 00:15:15.040
Controller, another open-source
app hosted on GitHub.

00:15:15.040 --> 00:15:17.230
It will connect to
your app's MediaSession

00:15:17.230 --> 00:15:19.960
and MediaBrowseService, and
it shows you information

00:15:19.960 --> 00:15:22.290
that your app is
presenting to Android Auto

00:15:22.290 --> 00:15:24.550
in a clear, semantic format.

00:15:24.550 --> 00:15:27.370
If you're using whitelisting to
block apps other than Android

00:15:27.370 --> 00:15:29.340
Auto from accessing
your browse tree,

00:15:29.340 --> 00:15:31.840
it's probably a good idea to
either add the Media Controller

00:15:31.840 --> 00:15:36.270
to the whitelist or disable
the whitelist while testing.

00:15:36.270 --> 00:15:39.040
So to sum up, we've
shown code samples

00:15:39.040 --> 00:15:42.100
for MessagingStyle,
notification actions,

00:15:42.100 --> 00:15:44.905
providing search results
with the MediaBrowserServ

00:15:44.905 --> 00:15:48.130
iceCompat.onSearch, attaching
new extras for Media Items

00:15:48.130 --> 00:15:51.700
metadata, and declaring support
for content browse and search

00:15:51.700 --> 00:15:53.644
in rootHints.

00:15:53.644 --> 00:15:54.930
KODLEE YIN: So great.

00:15:54.930 --> 00:15:57.780
We look forward to seeing all
of your messaging and media apps

00:15:57.780 --> 00:15:58.750
in the car.

00:15:58.750 --> 00:16:00.750
Rasekh and I will be
available tomorrow morning

00:16:00.750 --> 00:16:02.550
at office hours to
answer any questions

00:16:02.550 --> 00:16:04.006
you have about Android Auto.

00:16:04.006 --> 00:16:05.130
Thank you all for watching.

00:16:05.130 --> 00:16:08.780
[MUSIC PLAYING]

