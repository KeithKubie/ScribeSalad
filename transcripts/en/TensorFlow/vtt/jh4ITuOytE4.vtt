WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.478
[MUSIC PLAYING]

00:00:05.478 --> 00:00:07.600
SPEAKER: In this
video, I'll show you

00:00:07.600 --> 00:00:10.450
how you can use Autograph to
write complex, high performance

00:00:10.450 --> 00:00:13.160
TensorFlow code
using normal Python.

00:00:13.160 --> 00:00:16.630
Autograph is available in
the new TF2 function API,

00:00:16.630 --> 00:00:19.480
makes it easy to run TensorFlow
computations in a way

00:00:19.480 --> 00:00:21.610
that's efficient and portable.

00:00:21.610 --> 00:00:25.490
When you annotate a Python
function with tf.function,

00:00:25.490 --> 00:00:27.830
Autograph will automatically
convert its Python code

00:00:27.830 --> 00:00:29.750
to TensorFlow graph code.

00:00:29.750 --> 00:00:31.550
The code is then
compiled into a graph

00:00:31.550 --> 00:00:33.959
and executed when you
call the function.

00:00:33.959 --> 00:00:35.000
Let's look at an example.

00:00:37.540 --> 00:00:40.080
This simple function calculates
the square of a scalar input

00:00:40.080 --> 00:00:41.550
if it's positive.

00:00:41.550 --> 00:00:45.220
In TensorFlow 2.0, you don't
have to use tf.cond anymore.

00:00:45.220 --> 00:00:47.870
You can just write a
normal if statement,

00:00:47.870 --> 00:00:50.450
and Autograph will generate
a tf.cond operation

00:00:50.450 --> 00:00:52.550
so that the entire
computation runs as a graph.

00:00:55.250 --> 00:00:58.460
This is the generated code
that Autograph writes for you.

00:00:58.460 --> 00:01:01.160
Notice that we're writing
true and false functions that

00:01:01.160 --> 00:01:04.684
would normally be fed
into a tf.cond statement.

00:01:04.684 --> 00:01:06.350
Instead of writing
these, you can simply

00:01:06.350 --> 00:01:08.940
use Python if statements.

00:01:08.940 --> 00:01:12.100
Let's take a look at a
more complicated example.

00:01:12.100 --> 00:01:14.680
This is a bare bones RNN cell.

00:01:14.680 --> 00:01:19.250
Note that it contains a
data dependent for loop,

00:01:19.250 --> 00:01:23.720
and it also contains a data
independent if statement.

00:01:23.720 --> 00:01:26.940
Autograph will only run the
data dependent loop in the graph

00:01:26.940 --> 00:01:31.740
and leave the data independent
if statement untouched.

00:01:31.740 --> 00:01:34.855
Simply adding a
tf.function as a decorator

00:01:34.855 --> 00:01:37.230
still lets you call the function
directly and get results

00:01:37.230 --> 00:01:38.380
immediately.

00:01:38.380 --> 00:01:40.740
But the function
runs in graph mode.

00:01:40.740 --> 00:01:42.650
It prints results.

00:01:42.650 --> 00:01:43.650
And we can also time it.

00:01:47.970 --> 00:01:51.270
Now, if we remove the
tf.function decorator, which

00:01:51.270 --> 00:01:55.040
I've preemptively done here, and
run the function in eager mode,

00:01:55.040 --> 00:01:56.910
we get the same results out.

00:01:56.910 --> 00:01:59.760
However, it's going to be a
little bit slower because we

00:01:59.760 --> 00:02:02.850
won't have coalesced the entire
function into a single tf.graph

00:02:02.850 --> 00:02:04.450
op.

00:02:04.450 --> 00:02:08.020
We can time both options
with tf.function in Autograph

00:02:08.020 --> 00:02:09.340
and without.

00:02:09.340 --> 00:02:11.440
You'll note that using
tf.function, which

00:02:11.440 --> 00:02:13.720
requires only a single
function decorator,

00:02:13.720 --> 00:02:16.480
is significantly faster
than the eager mode version

00:02:16.480 --> 00:02:18.020
without tf.function.

00:02:18.020 --> 00:02:21.670
[MUSIC PLAYING]

