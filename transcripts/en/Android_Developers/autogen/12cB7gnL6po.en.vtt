WEBVTT
Kind: captions
Language: en

00:00:04.730 --> 00:00:07.070
hi I'm Chet Haase an engineer on the

00:00:07.070 --> 00:00:07.080
hi I'm Chet Haase an engineer on the
 

00:00:07.080 --> 00:00:09.650
hi I'm Chet Haase an engineer on the
Android team at Google today I wanted to

00:00:09.650 --> 00:00:09.660
Android team at Google today I wanted to
 

00:00:09.660 --> 00:00:11.450
Android team at Google today I wanted to
talk a little bit about bitmaps in

00:00:11.450 --> 00:00:11.460
talk a little bit about bitmaps in
 

00:00:11.460 --> 00:00:12.890
talk a little bit about bitmaps in
particular I want to talk about bitmap

00:00:12.890 --> 00:00:12.900
particular I want to talk about bitmap
 

00:00:12.900 --> 00:00:14.720
particular I want to talk about bitmap
scaling one of the big problems that

00:00:14.720 --> 00:00:14.730
scaling one of the big problems that
 

00:00:14.730 --> 00:00:16.220
scaling one of the big problems that
people run into when running

00:00:16.220 --> 00:00:16.230
people run into when running
 

00:00:16.230 --> 00:00:18.769
people run into when running
applications on constrained devices is

00:00:18.769 --> 00:00:18.779
applications on constrained devices is
 

00:00:18.779 --> 00:00:21.710
applications on constrained devices is
that they want to load in let's say huge

00:00:21.710 --> 00:00:21.720
that they want to load in let's say huge
 

00:00:21.720 --> 00:00:23.599
that they want to load in let's say huge
images from the camera on the phone from

00:00:23.599 --> 00:00:23.609
images from the camera on the phone from
 

00:00:23.609 --> 00:00:25.730
images from the camera on the phone from
the web wherever and when they're

00:00:25.730 --> 00:00:25.740
the web wherever and when they're
 

00:00:25.740 --> 00:00:27.320
the web wherever and when they're
loading in a lot of these things a

00:00:27.320 --> 00:00:27.330
loading in a lot of these things a
 

00:00:27.330 --> 00:00:28.460
loading in a lot of these things a
they're going to take a long time to

00:00:28.460 --> 00:00:28.470
they're going to take a long time to
 

00:00:28.470 --> 00:00:30.230
they're going to take a long time to
come in be they're going to create

00:00:30.230 --> 00:00:30.240
come in be they're going to create
 

00:00:30.240 --> 00:00:32.420
come in be they're going to create
garbage along the way and performance

00:00:32.420 --> 00:00:32.430
garbage along the way and performance
 

00:00:32.430 --> 00:00:34.580
garbage along the way and performance
problems and see maybe they're going to

00:00:34.580 --> 00:00:34.590
problems and see maybe they're going to
 

00:00:34.590 --> 00:00:35.930
problems and see maybe they're going to
run out of memory if they try to load

00:00:35.930 --> 00:00:35.940
run out of memory if they try to load
 

00:00:35.940 --> 00:00:38.119
run out of memory if they try to load
too many at the same time there are

00:00:38.119 --> 00:00:38.129
too many at the same time there are
 

00:00:38.129 --> 00:00:39.470
too many at the same time there are
various ways of dealing this with a

00:00:39.470 --> 00:00:39.480
various ways of dealing this with a
 

00:00:39.480 --> 00:00:41.660
various ways of dealing this with a
situation the overarching idea is that

00:00:41.660 --> 00:00:41.670
situation the overarching idea is that
 

00:00:41.670 --> 00:00:44.869
situation the overarching idea is that
you should load and create and use the

00:00:44.869 --> 00:00:44.879
you should load and create and use the
 

00:00:44.879 --> 00:00:46.790
you should load and create and use the
images of the size you need so for

00:00:46.790 --> 00:00:46.800
images of the size you need so for
 

00:00:46.800 --> 00:00:48.709
images of the size you need so for
example don't load in an image that's

00:00:48.709 --> 00:00:48.719
example don't load in an image that's
 

00:00:48.719 --> 00:00:50.510
example don't load in an image that's
this big if you're always going to

00:00:50.510 --> 00:00:50.520
this big if you're always going to
 

00:00:50.520 --> 00:00:52.010
this big if you're always going to
display it as a thumbnail instead

00:00:52.010 --> 00:00:52.020
display it as a thumbnail instead
 

00:00:52.020 --> 00:00:54.410
display it as a thumbnail instead
loading whatever you need to get it at

00:00:54.410 --> 00:00:54.420
loading whatever you need to get it at
 

00:00:54.420 --> 00:00:56.060
loading whatever you need to get it at
the size you need it and then have that

00:00:56.060 --> 00:00:56.070
the size you need it and then have that
 

00:00:56.070 --> 00:00:58.369
the size you need it and then have that
be the image that you retain so today's

00:00:58.369 --> 00:00:58.379
be the image that you retain so today's
 

00:00:58.379 --> 00:01:01.069
be the image that you retain so today's
example is around loading in a scaled

00:01:01.069 --> 00:01:01.079
example is around loading in a scaled
 

00:01:01.079 --> 00:01:03.139
example is around loading in a scaled
version of it in particular we're going

00:01:03.139 --> 00:01:03.149
version of it in particular we're going
 

00:01:03.149 --> 00:01:05.509
version of it in particular we're going
to use a parameter in bitmap factory

00:01:05.509 --> 00:01:05.519
to use a parameter in bitmap factory
 

00:01:05.519 --> 00:01:08.539
to use a parameter in bitmap factory
options which is called in sample size

00:01:08.539 --> 00:01:08.549
options which is called in sample size
 

00:01:08.549 --> 00:01:15.370
options which is called in sample size
so first let's take a look at the demo

00:01:15.370 --> 00:01:15.380
 

00:01:15.380 --> 00:01:17.840
which is called bitmap scaling and

00:01:17.840 --> 00:01:17.850
which is called bitmap scaling and
 

00:01:17.850 --> 00:01:19.520
which is called bitmap scaling and
there's nothing to interact with here I

00:01:19.520 --> 00:01:19.530
there's nothing to interact with here I
 

00:01:19.530 --> 00:01:20.420
there's nothing to interact with here I
just wanted to show a visual

00:01:20.420 --> 00:01:20.430
just wanted to show a visual
 

00:01:20.430 --> 00:01:22.039
just wanted to show a visual
representation of what's going on with

00:01:22.039 --> 00:01:22.049
representation of what's going on with
 

00:01:22.049 --> 00:01:23.719
representation of what's going on with
these images because there's something a

00:01:23.719 --> 00:01:23.729
these images because there's something a
 

00:01:23.729 --> 00:01:25.910
these images because there's something a
little unobvious about in sample size

00:01:25.910 --> 00:01:25.920
little unobvious about in sample size
 

00:01:25.920 --> 00:01:27.140
little unobvious about in sample size
the first time you use it

00:01:27.140 --> 00:01:27.150
the first time you use it
 

00:01:27.150 --> 00:01:29.030
the first time you use it
so the original image you can see up at

00:01:29.030 --> 00:01:29.040
so the original image you can see up at
 

00:01:29.040 --> 00:01:31.010
so the original image you can see up at
the top under the words that say

00:01:31.010 --> 00:01:31.020
the top under the words that say
 

00:01:31.020 --> 00:01:32.899
the top under the words that say
original image and then you can see

00:01:32.899 --> 00:01:32.909
original image and then you can see
 

00:01:32.909 --> 00:01:34.789
original image and then you can see
these scaled versions down below where

00:01:34.789 --> 00:01:34.799
these scaled versions down below where
 

00:01:34.799 --> 00:01:36.859
these scaled versions down below where
it says scaled images so we see two of

00:01:36.859 --> 00:01:36.869
it says scaled images so we see two of
 

00:01:36.869 --> 00:01:38.719
it says scaled images so we see two of
the same size and then for the same size

00:01:38.719 --> 00:01:38.729
the same size and then for the same size
 

00:01:38.729 --> 00:01:40.399
the same size and then for the same size
and then two of the same size under

00:01:40.399 --> 00:01:40.409
and then two of the same size under
 

00:01:40.409 --> 00:01:41.690
and then two of the same size under
there so what's going on let's take a

00:01:41.690 --> 00:01:41.700
there so what's going on let's take a
 

00:01:41.700 --> 00:01:44.030
there so what's going on let's take a
look at the code so we have this class

00:01:44.030 --> 00:01:44.040
look at the code so we have this class
 

00:01:44.040 --> 00:01:46.460
look at the code so we have this class
called bitmap scaling we have this image

00:01:46.460 --> 00:01:46.470
called bitmap scaling we have this image
 

00:01:46.470 --> 00:01:48.410
called bitmap scaling we have this image
view where we're going to find the

00:01:48.410 --> 00:01:48.420
view where we're going to find the
 

00:01:48.420 --> 00:01:51.200
view where we're going to find the
original image we're going to decode the

00:01:51.200 --> 00:01:51.210
original image we're going to decode the
 

00:01:51.210 --> 00:01:53.630
original image we're going to decode the
jelly bean statue image in there and

00:01:53.630 --> 00:01:53.640
jelly bean statue image in there and
 

00:01:53.640 --> 00:01:57.440
jelly bean statue image in there and
then we're going to add scaled image

00:01:57.440 --> 00:01:57.450
then we're going to add scaled image
 

00:01:57.450 --> 00:01:58.910
then we're going to add scaled image
views and this is going to be using the

00:01:58.910 --> 00:01:58.920
views and this is going to be using the
 

00:01:58.920 --> 00:02:00.380
views and this is going to be using the
in-sample size thing so we're basically

00:02:00.380 --> 00:02:00.390
in-sample size thing so we're basically
 

00:02:00.390 --> 00:02:02.929
in-sample size thing so we're basically
going to iterate from values from two to

00:02:02.929 --> 00:02:02.939
going to iterate from values from two to
 

00:02:02.939 --> 00:02:05.179
going to iterate from values from two to
ten and use that as our in sample size

00:02:05.179 --> 00:02:05.189
ten and use that as our in sample size
 

00:02:05.189 --> 00:02:08.270
ten and use that as our in sample size
value and see what effect we get so we

00:02:08.270 --> 00:02:08.280
value and see what effect we get so we
 

00:02:08.280 --> 00:02:09.580
value and see what effect we get so we
create one of these bitmap options

00:02:09.580 --> 00:02:09.590
create one of these bitmap options
 

00:02:09.590 --> 00:02:12.890
create one of these bitmap options
objects and we set the in sample size to

00:02:12.890 --> 00:02:12.900
objects and we set the in sample size to
 

00:02:12.900 --> 00:02:13.260
objects and we set the in sample size to
the

00:02:13.260 --> 00:02:13.270
the
 

00:02:13.270 --> 00:02:14.760
the
emphasize it was passed in which is at

00:02:14.760 --> 00:02:14.770
emphasize it was passed in which is at
 

00:02:14.770 --> 00:02:16.320
emphasize it was passed in which is at
integer value from two to ten and then

00:02:16.320 --> 00:02:16.330
integer value from two to ten and then
 

00:02:16.330 --> 00:02:19.080
integer value from two to ten and then
we create a scaled bitmap which does a

00:02:19.080 --> 00:02:19.090
we create a scaled bitmap which does a
 

00:02:19.090 --> 00:02:22.170
we create a scaled bitmap which does a
decode on that original image but it

00:02:22.170 --> 00:02:22.180
decode on that original image but it
 

00:02:22.180 --> 00:02:24.360
decode on that original image but it
uses the options it uses this in sample

00:02:24.360 --> 00:02:24.370
uses the options it uses this in sample
 

00:02:24.370 --> 00:02:27.110
uses the options it uses this in sample
size and what in sample size tells it is

00:02:27.110 --> 00:02:27.120
size and what in sample size tells it is
 

00:02:27.120 --> 00:02:30.540
size and what in sample size tells it is
how many pixels to read for each of the

00:02:30.540 --> 00:02:30.550
how many pixels to read for each of the
 

00:02:30.550 --> 00:02:33.330
how many pixels to read for each of the
original pixels in the image the

00:02:33.330 --> 00:02:33.340
original pixels in the image the
 

00:02:33.340 --> 00:02:35.310
original pixels in the image the
advantage of doing it this way is that

00:02:35.310 --> 00:02:35.320
advantage of doing it this way is that
 

00:02:35.320 --> 00:02:37.920
advantage of doing it this way is that
it reads less data it's going to be

00:02:37.920 --> 00:02:37.930
it reads less data it's going to be
 

00:02:37.930 --> 00:02:39.660
it reads less data it's going to be
faster to do this because it's basically

00:02:39.660 --> 00:02:39.670
faster to do this because it's basically
 

00:02:39.670 --> 00:02:41.640
faster to do this because it's basically
skipping a lot of data along the way

00:02:41.640 --> 00:02:41.650
skipping a lot of data along the way
 

00:02:41.650 --> 00:02:43.800
skipping a lot of data along the way
potentially based on on the value of in

00:02:43.800 --> 00:02:43.810
potentially based on on the value of in
 

00:02:43.810 --> 00:02:46.050
potentially based on on the value of in
sample size the disadvantage of doing it

00:02:46.050 --> 00:02:46.060
sample size the disadvantage of doing it
 

00:02:46.060 --> 00:02:47.550
sample size the disadvantage of doing it
is that it's basically going to wind up

00:02:47.550 --> 00:02:47.560
is that it's basically going to wind up
 

00:02:47.560 --> 00:02:49.800
is that it's basically going to wind up
with powers of two scales of your

00:02:49.800 --> 00:02:49.810
with powers of two scales of your
 

00:02:49.810 --> 00:02:51.720
with powers of two scales of your
original image so you can pass in a

00:02:51.720 --> 00:02:51.730
original image so you can pass in a
 

00:02:51.730 --> 00:02:53.430
original image so you can pass in a
value of two which means it's going to

00:02:53.430 --> 00:02:53.440
value of two which means it's going to
 

00:02:53.440 --> 00:02:54.750
value of two which means it's going to
skip every other pixel and you're going

00:02:54.750 --> 00:02:54.760
skip every other pixel and you're going
 

00:02:54.760 --> 00:02:56.790
skip every other pixel and you're going
to wind up with an image that's half the

00:02:56.790 --> 00:02:56.800
to wind up with an image that's half the
 

00:02:56.800 --> 00:02:58.770
to wind up with an image that's half the
size of the original if you ask for

00:02:58.770 --> 00:02:58.780
size of the original if you ask for
 

00:02:58.780 --> 00:03:02.610
size of the original if you ask for
three it's happy to do that except it

00:03:02.610 --> 00:03:02.620
three it's happy to do that except it
 

00:03:02.620 --> 00:03:04.140
three it's happy to do that except it
doesn't really make sense it's actually

00:03:04.140 --> 00:03:04.150
doesn't really make sense it's actually
 

00:03:04.150 --> 00:03:05.820
doesn't really make sense it's actually
going to round down to the next lowest

00:03:05.820 --> 00:03:05.830
going to round down to the next lowest
 

00:03:05.830 --> 00:03:06.990
going to round down to the next lowest
power or two and it's going to be

00:03:06.990 --> 00:03:07.000
power or two and it's going to be
 

00:03:07.000 --> 00:03:08.580
power or two and it's going to be
equivalent to two which is why we see

00:03:08.580 --> 00:03:08.590
equivalent to two which is why we see
 

00:03:08.590 --> 00:03:11.130
equivalent to two which is why we see
for the first two scaled images they're

00:03:11.130 --> 00:03:11.140
for the first two scaled images they're
 

00:03:11.140 --> 00:03:12.930
for the first two scaled images they're
exactly the same size because passing in

00:03:12.930 --> 00:03:12.940
exactly the same size because passing in
 

00:03:12.940 --> 00:03:15.060
exactly the same size because passing in
three was equivalent to passing in two

00:03:15.060 --> 00:03:15.070
three was equivalent to passing in two
 

00:03:15.070 --> 00:03:16.770
three was equivalent to passing in two
when we go up to four that's the next

00:03:16.770 --> 00:03:16.780
when we go up to four that's the next
 

00:03:16.780 --> 00:03:19.260
when we go up to four that's the next
power or two ok it's happy to to do that

00:03:19.260 --> 00:03:19.270
power or two ok it's happy to to do that
 

00:03:19.270 --> 00:03:20.820
power or two ok it's happy to to do that
when we go up to five rounds down to

00:03:20.820 --> 00:03:20.830
when we go up to five rounds down to
 

00:03:20.830 --> 00:03:23.100
when we go up to five rounds down to
four so basically in sample size is a

00:03:23.100 --> 00:03:23.110
four so basically in sample size is a
 

00:03:23.110 --> 00:03:24.960
four so basically in sample size is a
very coarse-grained way of getting a

00:03:24.960 --> 00:03:24.970
very coarse-grained way of getting a
 

00:03:24.970 --> 00:03:27.630
very coarse-grained way of getting a
scaled image it works great in the cases

00:03:27.630 --> 00:03:27.640
scaled image it works great in the cases
 

00:03:27.640 --> 00:03:30.420
scaled image it works great in the cases
where you want powers of two scales of

00:03:30.420 --> 00:03:30.430
where you want powers of two scales of
 

00:03:30.430 --> 00:03:32.130
where you want powers of two scales of
your original image maybe it works for

00:03:32.130 --> 00:03:32.140
your original image maybe it works for
 

00:03:32.140 --> 00:03:34.710
your original image maybe it works for
you two to read in at that slower size

00:03:34.710 --> 00:03:34.720
you two to read in at that slower size
 

00:03:34.720 --> 00:03:37.949
you two to read in at that slower size
and you get a faster reading time

00:03:37.949 --> 00:03:37.959
and you get a faster reading time
 

00:03:37.959 --> 00:03:40.199
and you get a faster reading time
because you're reading less data but

00:03:40.199 --> 00:03:40.209
because you're reading less data but
 

00:03:40.209 --> 00:03:41.520
because you're reading less data but
then once you have that data

00:03:41.520 --> 00:03:41.530
then once you have that data
 

00:03:41.530 --> 00:03:43.199
then once you have that data
maybe you then want to scale to the

00:03:43.199 --> 00:03:43.209
maybe you then want to scale to the
 

00:03:43.209 --> 00:03:45.510
maybe you then want to scale to the
exact size that you want and you can

00:03:45.510 --> 00:03:45.520
exact size that you want and you can
 

00:03:45.520 --> 00:03:47.310
exact size that you want and you can
always get a bitmap of the exact size

00:03:47.310 --> 00:03:47.320
always get a bitmap of the exact size
 

00:03:47.320 --> 00:03:49.230
always get a bitmap of the exact size
that you want through various mechanisms

00:03:49.230 --> 00:03:49.240
that you want through various mechanisms
 

00:03:49.240 --> 00:03:51.270
that you want through various mechanisms
creating it exactly at the width height

00:03:51.270 --> 00:03:51.280
creating it exactly at the width height
 

00:03:51.280 --> 00:03:53.940
creating it exactly at the width height
that you want or create a scaled bitmap

00:03:53.940 --> 00:03:53.950
that you want or create a scaled bitmap
 

00:03:53.950 --> 00:03:56.190
that you want or create a scaled bitmap
there's an API to create a scaled bitmap

00:03:56.190 --> 00:03:56.200
there's an API to create a scaled bitmap
 

00:03:56.200 --> 00:03:58.140
there's an API to create a scaled bitmap
from another one so there's lots of

00:03:58.140 --> 00:03:58.150
from another one so there's lots of
 

00:03:58.150 --> 00:03:59.400
from another one so there's lots of
different ways to do that today was

00:03:59.400 --> 00:03:59.410
different ways to do that today was
 

00:03:59.410 --> 00:04:01.530
different ways to do that today was
about using in sample size in particular

00:04:01.530 --> 00:04:01.540
about using in sample size in particular
 

00:04:01.540 --> 00:04:03.690
about using in sample size in particular
higher performance because it reads less

00:04:03.690 --> 00:04:03.700
higher performance because it reads less
 

00:04:03.700 --> 00:04:06.090
higher performance because it reads less
data with a constraint that it will end

00:04:06.090 --> 00:04:06.100
data with a constraint that it will end
 

00:04:06.100 --> 00:04:08.430
data with a constraint that it will end
up with powers of two images at the end

00:04:08.430 --> 00:04:08.440
up with powers of two images at the end
 

00:04:08.440 --> 00:04:14.310
up with powers of two images at the end
so in sample size use it thanks

