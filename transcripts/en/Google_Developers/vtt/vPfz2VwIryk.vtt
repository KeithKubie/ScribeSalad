WEBVTT
Kind: captions
Language: en

00:00:00.500 --> 00:00:04.360
PETE LEPAGE: Hi, I'm Pete, a
developer advocate at Google.

00:00:04.360 --> 00:00:06.940
We all know that a
snappy website is always

00:00:06.940 --> 00:00:08.010
a great thing.

00:00:08.010 --> 00:00:11.320
It means happier users
and higher conversions.

00:00:11.320 --> 00:00:14.190
And fast is especially
important on mobile,

00:00:14.190 --> 00:00:16.840
where everybody is
always in a hurry.

00:00:16.840 --> 00:00:19.020
PageSpeed Insights
is an awesome tool

00:00:19.020 --> 00:00:23.470
that you can use to improve
the performance of your site.

00:00:23.470 --> 00:00:26.430
When you profile a page
with PageSpeed Insights,

00:00:26.430 --> 00:00:28.370
it evaluates the
page and gives you

00:00:28.370 --> 00:00:32.220
a score based on performance
and user experience,

00:00:32.220 --> 00:00:35.960
based on a set of criteria
and best practices.

00:00:35.960 --> 00:00:38.610
For a quick, easy
analysis, you can just

00:00:38.610 --> 00:00:40.430
hit the PageSpeed
Insights service

00:00:40.430 --> 00:00:43.050
by clicking the link on screen.

00:00:43.050 --> 00:00:44.970
But let's give the
Web Fundamentals site

00:00:44.970 --> 00:00:48.040
a try to see how it works.

00:00:48.040 --> 00:00:50.930
I'll enter a URL and
hit the Analyze button.

00:00:50.930 --> 00:00:55.300
After a few seconds, PageSpeed
reports back its findings.

00:00:55.300 --> 00:00:58.950
On this page, we scored a
70 out of 100 for speed.

00:00:58.950 --> 00:01:03.230
Not bad, but there's certainly
room for improvement here.

00:01:03.230 --> 00:01:06.360
It gives us a list of
criteria that we should fix.

00:01:06.360 --> 00:01:09.040
On this page, it recommends
that we eliminate

00:01:09.040 --> 00:01:12.530
the render-blocking
CSS and scripts.

00:01:12.530 --> 00:01:15.010
In our case, it's
our primary CSS file

00:01:15.010 --> 00:01:19.570
and a CSS file that loads
some specialized fonts.

00:01:19.570 --> 00:01:22.800
It also tells us that we should
check the caching headers

00:01:22.800 --> 00:01:24.570
on some of our files.

00:01:24.570 --> 00:01:26.050
It looks like a
couple of the files

00:01:26.050 --> 00:01:27.870
are cached for 60 minutes.

00:01:27.870 --> 00:01:30.630
And we definitely want
to up that number.

00:01:30.630 --> 00:01:33.950
We had eight rules pass,
there are no redirects,

00:01:33.950 --> 00:01:35.820
and the page weight
has been optimized

00:01:35.820 --> 00:01:40.110
by turning on compression and
minifying the JavaScript, HTML,

00:01:40.110 --> 00:01:42.310
CSS, and images.

00:01:42.310 --> 00:01:45.880
The above-the-fold content
has been properly prioritized

00:01:45.880 --> 00:01:48.310
and the servers are
responding quickly.

00:01:48.310 --> 00:01:51.200
Perfect, we're in
a good situation.

00:01:51.200 --> 00:01:55.130
Now, we get a similar report
for the user experience rules.

00:01:55.130 --> 00:01:57.930
It looks like this page was
dinged two points because some

00:01:57.930 --> 00:02:02.640
of the tap targets are a
little bit too close together.

00:02:02.640 --> 00:02:04.330
Otherwise, the page is good.

00:02:04.330 --> 00:02:06.850
It doesn't use any
plug-ins, the viewport

00:02:06.850 --> 00:02:10.490
is configured properly, and
the content is sized to fit,

00:02:10.490 --> 00:02:14.640
and all the font sizes
are large enough to read.

00:02:14.640 --> 00:02:17.750
This is great as a
manual, one-off analysis,

00:02:17.750 --> 00:02:19.670
but you can go even deeper.

00:02:19.670 --> 00:02:22.390
You can integrate
PageSpeed Insights directly

00:02:22.390 --> 00:02:25.600
into your development workflow
with the PageSpeed Insights

00:02:25.600 --> 00:02:27.140
API.

00:02:27.140 --> 00:02:31.190
It uses a simple REST API
that takes three parameters:

00:02:31.190 --> 00:02:35.690
the URL that we want to test,
the API key that identifies

00:02:35.690 --> 00:02:37.750
our project-- and,
oh, by the way,

00:02:37.750 --> 00:02:42.790
that-- not really my API key,
so don't bother trying it--

00:02:42.790 --> 00:02:45.005
and the strategy,
either desktop or mobile

00:02:45.005 --> 00:02:47.380
that you want to test against.

00:02:47.380 --> 00:02:50.440
You can learn about some of
the other optional parameters

00:02:50.440 --> 00:02:53.060
in the documentation.

00:02:53.060 --> 00:02:55.610
Now, if you don't
already have an API key,

00:02:55.610 --> 00:02:58.170
you'll need to enable
the PageSpeed Insights

00:02:58.170 --> 00:03:01.000
API in the Google
Developer Console.

00:03:01.000 --> 00:03:03.580
And you can get your key there.

00:03:03.580 --> 00:03:06.680
The PageSpeed Insights
API returns its result

00:03:06.680 --> 00:03:08.420
as a JSONObject.

00:03:08.420 --> 00:03:11.585
It includes the server
response code, the final URL,

00:03:11.585 --> 00:03:13.700
and the score.

00:03:13.700 --> 00:03:16.420
It also includes page stats
such as the total number

00:03:16.420 --> 00:03:19.880
of each resource downloaded,
the total number of hosts,

00:03:19.880 --> 00:03:22.630
and the size of the request.

00:03:22.630 --> 00:03:25.930
And finally, the results
of all the rules tested.

00:03:25.930 --> 00:03:29.340
Each PageSpeed rule
generates an impact number

00:03:29.340 --> 00:03:33.310
that indicates the importance
or priority of implementing

00:03:33.310 --> 00:03:35.780
that set of suggestions
for the rule

00:03:35.780 --> 00:03:38.410
relative to the other rules.

00:03:38.410 --> 00:03:40.220
For instance, if
enabling compression

00:03:40.220 --> 00:03:43.680
would save one megabyte, while
optimizing images would save

00:03:43.680 --> 00:03:47.160
500k, then the enable
compression rule

00:03:47.160 --> 00:03:49.290
would have an
impact value that's

00:03:49.290 --> 00:03:53.030
twice that of the
optimized images rule.

00:03:53.030 --> 00:03:55.370
You can query the URL
from the command line,

00:03:55.370 --> 00:03:59.180
or better yet, just automate it.

00:03:59.180 --> 00:04:02.335
Grunt makes the command
line testing super easy.

00:04:02.335 --> 00:04:05.310
The Grunt PageSpeed
plug-in simply

00:04:05.310 --> 00:04:09.800
tests the deployed pages,
reporting the PageSpeed score,

00:04:09.800 --> 00:04:13.430
page stats, and the
individual rule results.

00:04:13.430 --> 00:04:17.120
If the PageSpeed score falls
below the specified threshold,

00:04:17.120 --> 00:04:20.920
well, then the Grunt task fails.

00:04:20.920 --> 00:04:23.660
By testing your site
regularly with a Cron job

00:04:23.660 --> 00:04:26.930
or other scheduled task
and saving the results,

00:04:26.930 --> 00:04:31.420
you can use PageSpeed Insights
to track your site over time.

00:04:31.420 --> 00:04:34.110
Small changes, when
looked at individually,

00:04:34.110 --> 00:04:37.800
may not make a big difference,
but over time, these numbers

00:04:37.800 --> 00:04:40.420
add up, helping you
to spot regressions

00:04:40.420 --> 00:04:44.830
or see trends that you
might otherwise have missed.

00:04:44.830 --> 00:04:47.860
By adding PageSpeed Insights
to your development workflow

00:04:47.860 --> 00:04:51.810
today, you can ensure that your
pages follow the best practices

00:04:51.810 --> 00:04:55.010
for performance and
user experiences.

00:04:55.010 --> 00:04:58.196
And you can spot trends
before they become a problem.

00:04:58.196 --> 00:05:01.200
So go, test your
pages right now,

00:05:01.200 --> 00:05:05.240
and then add PageSpeed
Insights to your workflow.

00:05:05.240 --> 00:05:08.800
Thanks for watching, and
go build something awesome.

