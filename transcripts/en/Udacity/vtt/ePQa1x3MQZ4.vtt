WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:08.950
And the correct answer here is O(2n&lt;i&gt;n²) and the reason why this is correct is as follows--&lt;/i&gt;

00:00:08.950 --> 00:00:15.740
so the first line here takes constant amount of times so that's not going to be relevant.

00:00:15.740 --> 00:00:25.870
Now, this loop here lines 2 to 5 are executed 2n&lt;i&gt;, so the question is each time this interloop here&lt;/i&gt;

00:00:25.870 --> 00:00:29.470
lines 3 to 5 is executed, how much time does that take.

00:00:29.470 --> 00:00:36.210
So checking of the assignment is valid, takes O(2n²&lt;i&gt;), then if the assignment is valid,&lt;/i&gt;

00:00:36.210 --> 00:00:42.280
we need an additional O(n)+O(1), so an additional O(n) time because this here is constant,

00:00:42.280 --> 00:00:44.130
so we can ignore it.

00:00:44.130 --> 00:00:52.020
So the maximum time that lines 3 to 5 take is O(n²)+O(n)+O(1),

00:00:52.020 --> 00:01:01.470
so the largest growing term here is O(n²)--so the interloop takes O(n²&lt;i&gt;) and that is executed 2n&lt;i&gt;.&lt;/i&gt;&lt;/i&gt;

00:01:01.470 --> 00:01:08.380
So that's why the running time of Alice's algorithm is O(2n&lt;i&gt;n²),&lt;/i&gt;

00:01:08.380 --> 00:01:12.280
and the good thing is that because we have our own notation, we could do this analysis

00:01:12.280 --> 00:01:16.110
without actually concretely stating how all of these algorithm is programmed.

00:01:16.110 --> 99:59:59.000
So as I hoped you see, it's quite a useful notation to have.

