WEBVTT
Kind: captions
Language: en

00:00:03.580 --> 00:00:04.310
ANDREW: Hi.

00:00:04.310 --> 00:00:06.770
I'm Andrew, a product
manager at Google.

00:00:06.770 --> 00:00:08.740
If you've ever built
Ajax applications,

00:00:08.740 --> 00:00:10.900
you know that it can
be a tedious process

00:00:10.900 --> 00:00:13.810
as you deal with browser quirks
and the speed of JavaScript,

00:00:13.810 --> 00:00:17.050
not to mention coordinating
development as the team grows.

00:00:17.050 --> 00:00:19.090
Google Web Toolkit's a
development tool chain

00:00:19.090 --> 00:00:21.220
that's designed to
solve these problems,

00:00:21.220 --> 00:00:24.910
making complex, high performance
web applications easy to build

00:00:24.910 --> 00:00:25.840
and optimize.

00:00:25.840 --> 00:00:29.830
To better understand Google
Web Toolkit, or GWT for short,

00:00:29.830 --> 00:00:32.320
let's look at four steps
in the development cycle.

00:00:32.320 --> 00:00:36.430
Write, debug, optimize, and run.

00:00:36.430 --> 00:00:38.260
I'll do that using
the mail sample that's

00:00:38.260 --> 00:00:40.723
included with the GWT SDK.

00:00:40.723 --> 00:00:42.640
Let's go into Eclipse
and open up the project.

00:00:46.740 --> 00:00:50.910
The GWT SDK provides a set of
core Java API's and widgets.

00:00:50.910 --> 00:00:53.920
These allow me to write browser
based client applications--

00:00:53.920 --> 00:00:57.000
in other words, Ajax
applications-- in Java,

00:00:57.000 --> 00:01:00.120
and then compile the source in
the highly optimized JavaScript

00:01:00.120 --> 00:01:02.510
that runs across all browsers.

00:01:02.510 --> 00:01:05.810
Constructing complex web
applications is more productive

00:01:05.810 --> 00:01:07.520
thanks to a higher
level of abstraction

00:01:07.520 --> 00:01:10.910
on top of common Ajax
concepts like DOM manipulation

00:01:10.910 --> 00:01:14.240
and XHR communication.

00:01:14.240 --> 00:01:17.570
I'm not limited to
pre-canned widgets either.

00:01:17.570 --> 00:01:20.540
Anything I can do with the
browsers DOM and JavaScript

00:01:20.540 --> 00:01:25.770
can be done in GWT,
including interacting

00:01:25.770 --> 00:01:28.330
with handwritten JavaScript.

00:01:28.330 --> 00:01:30.340
With the latest
version of GWT, I

00:01:30.340 --> 00:01:33.190
can construct my UI in a
template using UI Binder.

00:01:39.360 --> 00:01:41.650
The constructor for
the male detail widget

00:01:41.650 --> 00:01:44.870
used to be multiple
lines of object creation.

00:01:44.870 --> 00:01:48.270
Now it's simply one line
with the UI laid out

00:01:48.270 --> 00:01:49.800
in an accompanying XML file.

00:01:54.860 --> 00:01:58.400
Currently, this application is
just client side JavaScript.

00:01:58.400 --> 00:02:01.250
The Java source is located
in the client package.

00:02:01.250 --> 00:02:04.730
At deploy time, those files
will be compiled into JavaScript

00:02:04.730 --> 00:02:07.280
and run in my user's browser.

00:02:07.280 --> 00:02:09.350
Usually I'd have
server code as well.

00:02:09.350 --> 00:02:11.400
I don't have to use
Java on the server.

00:02:11.400 --> 00:02:13.550
But if I did, I would
add a server package

00:02:13.550 --> 00:02:16.220
and put my server side
Java source in here.

00:02:16.220 --> 00:02:18.530
Files in that directory
will run its bytecode

00:02:18.530 --> 00:02:21.200
in any server container
such as App Engine.

00:02:21.200 --> 00:02:23.090
To communicate between
my JavaScript client

00:02:23.090 --> 00:02:27.470
and the server, GWT provides
an optimized RPC mechanism.

00:02:27.470 --> 00:02:31.460
So I don't have to worry
about low level HDTP calls.

00:02:31.460 --> 00:02:34.250
Now, if my server was running
something other than Java,

00:02:34.250 --> 00:02:35.750
I could just as easily use JSON.

00:02:38.590 --> 00:02:42.340
With some code written, I can
debug in my favorite Java IDE,

00:02:42.340 --> 00:02:44.932
just like I would a desktop
application, and also

00:02:44.932 --> 00:02:46.390
in my favorite
browser, just like I

00:02:46.390 --> 00:02:48.430
would with straight JavaScript.

00:02:48.430 --> 00:02:50.560
The Google Web Toolkit
developer plugin

00:02:50.560 --> 00:02:52.360
spans the gap
between Java bytecode

00:02:52.360 --> 00:02:55.970
and Debugger and
JavaScript in the browser.

00:02:55.970 --> 00:02:57.820
This has two benefits.

00:02:57.820 --> 00:03:00.370
First, because we're
running Java bytecode,

00:03:00.370 --> 00:03:03.640
it means I can debug as I
would any Java application,

00:03:03.640 --> 00:03:06.460
setting breakpoints, inspecting
variables, and stepping

00:03:06.460 --> 00:03:08.240
through code.

00:03:08.240 --> 00:03:11.570
Second, I can develop using the
familiar edit, refresh, view

00:03:11.570 --> 00:03:14.750
programming model of JavaScript,
seeing my Java source code

00:03:14.750 --> 00:03:17.171
changes in the browser
without compiling.

00:03:21.410 --> 00:03:23.780
Google Web Toolkit
contains two powerful tools

00:03:23.780 --> 00:03:25.040
for optimization.

00:03:25.040 --> 00:03:28.370
First, the GWT compiler
performs optimizations

00:03:28.370 --> 00:03:30.050
across my code base--

00:03:30.050 --> 00:03:32.570
in-lining methods,
removing dead code,

00:03:32.570 --> 00:03:36.660
optimizing strings,
and many more things.

00:03:36.660 --> 00:03:38.490
With some guidance
from me, the compiler

00:03:38.490 --> 00:03:42.360
can also segment my code into
multiple JavaScript fragments,

00:03:42.360 --> 00:03:46.260
splitting up large applications
for faster startup time.

00:03:46.260 --> 00:03:48.000
No more animated
spinners as my user

00:03:48.000 --> 00:03:50.070
waits for an app to download.

00:03:50.070 --> 00:03:52.920
But bottlenecks aren't
limited to JavaScript.

00:03:52.920 --> 00:03:56.580
Browser layout and CSS
often behave in strange ways

00:03:56.580 --> 00:03:58.590
that are hard to diagnose.

00:03:58.590 --> 00:04:00.480
Speech Tracer is a
new Chrome extension

00:04:00.480 --> 00:04:02.160
in Google Web
Toolkit that allows

00:04:02.160 --> 00:04:05.600
me to diagnose performance
problems in the browser.

00:04:05.600 --> 00:04:08.270
After I've compiled the
application to JavaScript,

00:04:08.270 --> 00:04:11.600
I go to Chrome, and I can
monitor its performance.

00:04:11.600 --> 00:04:13.400
Among other things,
it will show me

00:04:13.400 --> 00:04:15.770
what interactions are
slow on the sluggishness

00:04:15.770 --> 00:04:19.180
graph and a drill down of
where the time is going.

00:04:22.580 --> 00:04:25.580
Finally, I'm ready for users
to run the application.

00:04:25.580 --> 00:04:29.090
I use the Google Web Toolkit SDK
to compile my client-side Java

00:04:29.090 --> 00:04:32.170
code into optimized
standalone JavaScript,

00:04:32.170 --> 00:04:36.260
the Java scripts contained
in this cache.html file here.

00:04:36.260 --> 00:04:38.480
The compiled script
is heavily optimized.

00:04:38.480 --> 00:04:40.260
But if I want to
inspect the output,

00:04:40.260 --> 00:04:42.560
GWT provides a
pretty compile option

00:04:42.560 --> 00:04:44.840
that will generate the script
in human readable form.

00:04:49.280 --> 00:04:51.620
The compiler handles browser
implementation differences

00:04:51.620 --> 00:04:55.930
for me and creates an
optimized file per browser.

00:04:55.930 --> 00:04:59.590
Browser specific files mean user
downloads only what he needs.

00:04:59.590 --> 00:05:01.890
For instance, an
Internet Explorer user

00:05:01.890 --> 00:05:04.650
doesn't download code
needed on Firefox.

00:05:04.650 --> 00:05:07.680
My application is now ready for
users to run on all browsers,

00:05:07.680 --> 00:05:11.450
including mobile browsers
on Android and the iPhone.

00:05:11.450 --> 00:05:13.310
With Google Web Toolkit,
I spend less time

00:05:13.310 --> 00:05:15.350
worrying about browser
quirks and more time

00:05:15.350 --> 00:05:17.700
writing fast web applications.

00:05:17.700 --> 00:05:21.450
To learn more, visit
code.google.com/webtoolkit.

