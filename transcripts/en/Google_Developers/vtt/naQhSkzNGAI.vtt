WEBVTT
Kind: captions
Language: en

00:00:00.635 --> 00:00:02.260
TODD KERPELMAN: Hello,
and welcome back

00:00:02.260 --> 00:00:04.180
to the second half
of our in-depth guide

00:00:04.180 --> 00:00:07.279
to Saved Games using
Google Play game services.

00:00:07.279 --> 00:00:08.029
Yes, that's right.

00:00:08.029 --> 00:00:09.940
I said second half.

00:00:09.940 --> 00:00:12.580
This is the second part
of a two-part series.

00:00:12.580 --> 00:00:14.874
If you haven't watched part
one yet, you really should.

00:00:14.874 --> 00:00:17.040
Otherwise, this video isn't
going to make any sense.

00:00:17.040 --> 00:00:17.540
Go on.

00:00:17.540 --> 00:00:18.180
It's OK.

00:00:18.180 --> 00:00:19.170
I'll wait.

00:00:19.170 --> 00:00:20.760
[HUMMING] OK.

00:00:20.760 --> 00:00:21.490
Ready?

00:00:21.490 --> 00:00:22.530
Let's go.

00:00:22.530 --> 00:00:24.880
So here's where we move into
black diamond difficulty.

00:00:24.880 --> 00:00:26.880
So put on your safety
goggles, if you have them.

00:00:26.880 --> 00:00:29.504
It's going to get kind of rough,
but I think you can handle it.

00:00:29.504 --> 00:00:30.630
You seem pretty sharp.

00:00:30.630 --> 00:00:32.220
Dealing with saved
game conflicts

00:00:32.220 --> 00:00:34.830
is a situation you're
going to run into rarely,

00:00:34.830 --> 00:00:37.597
but it can happen-- particularly
in multi-device households.

00:00:37.597 --> 00:00:39.180
And when it does,
you're going to need

00:00:39.180 --> 00:00:41.340
to make sure you
do the right thing.

00:00:41.340 --> 00:00:43.430
So when you load a
snapshot from the cloud,

00:00:43.430 --> 00:00:45.430
it comes with what you
can think of as a version

00:00:45.430 --> 00:00:47.780
number, or perhaps a tag.

00:00:47.780 --> 00:00:50.200
And this tag identifies
the latest version

00:00:50.200 --> 00:00:53.930
of your saved game on the
cloud that our servers

00:00:53.930 --> 00:00:54.970
agree is legit.

00:00:54.970 --> 00:00:57.840
We sometimes refer to
this as the base version.

00:00:57.840 --> 00:01:00.390
Now, you can't alter
this tag or even view it.

00:01:00.390 --> 00:01:01.690
It is hidden from you.

00:01:01.690 --> 00:01:04.970
But when you save the game
back to Google servers using

00:01:04.970 --> 00:01:08.420
commit and close, this
old tag gets sent back

00:01:08.420 --> 00:01:12.342
to the cloud along with the
newer version of your snapshot.

00:01:12.342 --> 00:01:14.300
Now, when Google servers
receive this snapshot,

00:01:14.300 --> 00:01:16.370
they check and see--
is this tag the same

00:01:16.370 --> 00:01:18.460
as what it's recorded
as the last base

00:01:18.460 --> 00:01:19.970
version of your snapshot?

00:01:19.970 --> 00:01:23.329
If so, then it knows that nobody
else has gone ahead and messed

00:01:23.329 --> 00:01:25.620
with your saved game in
between the time that you first

00:01:25.620 --> 00:01:27.910
opened it and when
you're committing it now.

00:01:27.910 --> 00:01:30.025
And if that's the case--
and 90% of the time,

00:01:30.025 --> 00:01:32.440
it will be-- your
saved game is updated

00:01:32.440 --> 00:01:35.930
and the tag is changed to
reflect the new base version.

00:01:35.930 --> 00:01:37.430
So now, remember
earlier when I said

00:01:37.430 --> 00:01:39.557
that as soon as you submit
a snapshot, it's closed

00:01:39.557 --> 00:01:41.140
and you have to
reopen it again if you

00:01:41.140 --> 00:01:42.369
want to do anything with it?

00:01:42.369 --> 00:01:43.910
Well, one of things
you're doing when

00:01:43.910 --> 00:01:46.440
you reopen this
newly-submitted snapshot

00:01:46.440 --> 00:01:49.777
is getting this newest version
of the tag from our servers.

00:01:49.777 --> 00:01:51.860
So now, let's go back to
our earlier example here.

00:01:51.860 --> 00:01:54.050
And I'm going to go ahead
and introduce a conflict

00:01:54.050 --> 00:01:55.950
by adding a second device.

00:01:55.950 --> 00:01:59.660
And they're both going to open
this version of my saved game,

00:01:59.660 --> 00:02:03.714
which we have tagged as version
A. Now on my first device,

00:02:03.714 --> 00:02:05.380
I'm going to go ahead
and make a change.

00:02:05.380 --> 00:02:09.169
Let's spend 80 gold here and
get myself a better sword.

00:02:09.169 --> 00:02:12.127
And now, I'm going to save
this came back to the cloud.

00:02:12.127 --> 00:02:14.460
Google servers are going to
look at the tag passed along

00:02:14.460 --> 00:02:16.680
with this snapshot and
confirm that-- yes, it

00:02:16.680 --> 00:02:20.050
does match the last base version
tag it had recorded earlier.

00:02:20.050 --> 00:02:21.040
Everything looks good.

00:02:21.040 --> 00:02:23.470
So my server accepts
this new snapshot,

00:02:23.470 --> 00:02:25.630
re-tags it as
version B. And if I

00:02:25.630 --> 00:02:28.220
were to reopen this saved
game on this first device,

00:02:28.220 --> 00:02:31.180
it would know that it's now
working off of this version B.

00:02:31.180 --> 00:02:32.730
But let's not do that.

00:02:32.730 --> 00:02:34.870
Instead, let's go
to my second device.

00:02:34.870 --> 00:02:36.510
Remember, this device
had last opened

00:02:36.510 --> 00:02:38.860
version saved game A. Right?

00:02:38.860 --> 00:02:41.320
Well, with that saved game,
I'm going to spend my gold

00:02:41.320 --> 00:02:43.000
and buy a helmet instead.

00:02:43.000 --> 00:02:45.690
And now, I can save this
version to the cloud, too.

00:02:45.690 --> 00:02:48.610
Now, the servers are going to
see that this snapshot is based

00:02:48.610 --> 00:02:52.520
on version A, but it also knows
that version B is the latest

00:02:52.520 --> 00:02:54.610
base version on the
cloud, so it's not

00:02:54.610 --> 00:02:56.110
going to be happy here.

00:02:56.110 --> 00:02:58.480
But here's the thing
you might not expect.

00:02:58.480 --> 00:03:00.569
It's not going to
reject the saved game.

00:03:00.569 --> 00:03:02.860
It's just going to make a
note that something is funny,

00:03:02.860 --> 00:03:05.400
and it's going to save
this newest saved game--

00:03:05.400 --> 00:03:09.800
we'll call it version
A*-- alongside version B.

00:03:09.800 --> 00:03:10.800
Why do this, by the way?

00:03:10.800 --> 00:03:12.760
Why not just reject a
conflicting snapshot

00:03:12.760 --> 00:03:14.010
when you're trying to save it?

00:03:14.010 --> 00:03:15.340
Well, there are few reasons.

00:03:15.340 --> 00:03:18.290
One is that this approach tends
to better handle the situation

00:03:18.290 --> 00:03:20.330
where a user is trying
to save and load

00:03:20.330 --> 00:03:22.470
the game while the
device is offline.

00:03:22.470 --> 00:03:25.110
Another reason is
that Android devices,

00:03:25.110 --> 00:03:27.300
through some clever
caching of network calls,

00:03:27.300 --> 00:03:29.400
might not actually save
your game on the network

00:03:29.400 --> 00:03:31.080
while your application
is running.

00:03:31.080 --> 00:03:32.570
It might do it a
little bit later

00:03:32.570 --> 00:03:34.790
when your application
is in the background.

00:03:34.790 --> 00:03:37.210
And if you want to do
something like ask the user how

00:03:37.210 --> 00:03:38.787
to resolve these
two saved games,

00:03:38.787 --> 00:03:41.370
you really can only do that when
your application is running--

00:03:41.370 --> 00:03:42.828
which generally
happens when you're

00:03:42.828 --> 00:03:45.080
trying to open the
snapshot instead.

00:03:45.080 --> 00:03:46.880
So point being this
conflict doesn't

00:03:46.880 --> 00:03:48.720
get resolved until
the user actually

00:03:48.720 --> 00:03:51.080
tries to open their
last saved game.

00:03:51.080 --> 00:03:54.030
And at this point, the server
says-- oh, hey wait a minute.

00:03:54.030 --> 00:03:56.810
I have this version B,
which is the last saved base

00:03:56.810 --> 00:03:58.420
version I've declared legit.

00:03:58.420 --> 00:04:00.720
But I've also got
this A* version now.

00:04:00.720 --> 00:04:02.320
What do you want to do here?

00:04:02.320 --> 00:04:03.750
Well, what do you want to do?

00:04:03.750 --> 00:04:06.920
What you actually decide
to do depends a little bit

00:04:06.920 --> 00:04:09.510
on your platform, and
is kind of up to you.

00:04:09.510 --> 00:04:11.980
On iOS, you have a number
of options, one of which

00:04:11.980 --> 00:04:13.510
is to let the
library figure it out

00:04:13.510 --> 00:04:16.800
for you by declaring a
snapshot merge policy.

00:04:16.800 --> 00:04:20.171
If you're to go with GPG
snapshot policy BaseWins,

00:04:20.171 --> 00:04:21.670
you're basically
telling the library

00:04:21.670 --> 00:04:24.590
to always accept the latest
base version of the snapshot

00:04:24.590 --> 00:04:27.480
that the server has accepted
and throw away any conflicts.

00:04:27.480 --> 00:04:29.420
So in this case,
version B would win.

00:04:29.420 --> 00:04:32.240
If you go with snapshot
policy RemoteWins,

00:04:32.240 --> 00:04:34.260
you would accept the
conflict version instead.

00:04:34.260 --> 00:04:35.721
In this case that's A*.

00:04:35.721 --> 00:04:37.970
And if you're saying to
yourself-- wait, that's crazy.

00:04:37.970 --> 00:04:40.070
Why would I ever use
the conflict version?

00:04:40.070 --> 00:04:41.770
Remember that, in
our example anyway,

00:04:41.770 --> 00:04:44.220
A* is actually the
most recent saved game.

00:04:44.220 --> 00:04:45.750
So this method could make sense.

00:04:45.750 --> 00:04:47.710
But frankly, I think
both of these strategies

00:04:47.710 --> 00:04:50.560
are pretty blunt instruments
without a lot of nuance.

00:04:50.560 --> 00:04:52.900
One that I like better
is snapshot policy

00:04:52.900 --> 00:04:54.065
LongestPlaytime.

00:04:54.065 --> 00:04:55.690
Here, you're asking
the library to look

00:04:55.690 --> 00:04:58.534
at the Playtime metadata of
each of these two snapshots,

00:04:58.534 --> 00:04:59.950
and pick the
snapshot where you've

00:04:59.950 --> 00:05:02.164
recorded that the user
has played the longest.

00:05:02.164 --> 00:05:04.080
This could be a smart
way to handle conflicts,

00:05:04.080 --> 00:05:07.730
particularly if you're trying
to resolve two conflicts where

00:05:07.730 --> 00:05:10.030
one of the saved games is
one where the user has just

00:05:10.030 --> 00:05:12.070
played on a plane
for four hours.

00:05:12.070 --> 00:05:12.570
Right?

00:05:12.570 --> 00:05:15.270
You don't want to lose those
four hours of game play.

00:05:15.270 --> 00:05:18.380
Note, however, that this is
all relying on the time played

00:05:18.380 --> 00:05:21.570
metadata that is being generated
by you, the game developer.

00:05:21.570 --> 00:05:24.070
So it's only as good
as the data you put in.

00:05:24.070 --> 00:05:27.629
And then finally, there's
GPG snapshot policy Manual.

00:05:27.629 --> 00:05:29.920
In this case, you're given
both snapshots, which you're

00:05:29.920 --> 00:05:32.220
allowed to open and
read fully, and then you

00:05:32.220 --> 00:05:34.040
can decide exactly how
to proceed-- either

00:05:34.040 --> 00:05:35.990
by picking one of
these two snapshots,

00:05:35.990 --> 00:05:39.670
or by creating a brand
new snapshot entirely.

00:05:39.670 --> 00:05:42.770
In some cases, if you're
doing the manual merge--

00:05:42.770 --> 00:05:44.840
in spite of the name
manual, you might actually

00:05:44.840 --> 00:05:48.190
be able to merge these two saved
snapshots automatically using

00:05:48.190 --> 00:05:49.950
your own games logic.

00:05:49.950 --> 00:05:52.070
This works best in games
where the stats tend

00:05:52.070 --> 00:05:54.130
to be ones you can
kind of always union

00:05:54.130 --> 00:05:56.700
together in a-- hey, let's
just take the highest or lowest

00:05:56.700 --> 00:05:57.850
number scenario.

00:05:57.850 --> 00:06:00.434
For example, if I have a
game, maybe a puzzle game

00:06:00.434 --> 00:06:01.850
where the only
thing I'm recording

00:06:01.850 --> 00:06:03.950
are the high scores
and the number of stars

00:06:03.950 --> 00:06:05.570
are in the various levels.

00:06:05.570 --> 00:06:08.506
My game could probably merge
these two saves automatically,

00:06:08.506 --> 00:06:10.130
just using some
simple-- you know what?

00:06:10.130 --> 00:06:12.588
We'll take the level with the
highest score kinds of rules.

00:06:12.588 --> 00:06:14.540
And this would work out nicely.

00:06:14.540 --> 00:06:17.060
In many other cases, though,
such as our example where

00:06:17.060 --> 00:06:19.815
the user has purchased a helmet
in one situation and a sword

00:06:19.815 --> 00:06:23.170
in the other, I'm not quite sure
how we could merge these two

00:06:23.170 --> 00:06:25.230
programmatically--
unless there was a sword

00:06:25.230 --> 00:06:26.690
you wore on your
head or something.

00:06:26.690 --> 00:06:27.648
But that would be dumb.

00:06:27.648 --> 00:06:29.470
So the best scenario
here might simply

00:06:29.470 --> 00:06:31.550
be to bring up a
dialog box, and ask

00:06:31.550 --> 00:06:33.580
the user which saved
game they want to keep.

00:06:33.580 --> 00:06:36.690
Remember, at this point you have
access to the snapshot metadata

00:06:36.690 --> 00:06:39.140
as well as the actual
game data, if you want.

00:06:39.140 --> 00:06:40.860
So you could populate
this dialogue

00:06:40.860 --> 00:06:43.240
with whatever information
your game needs

00:06:43.240 --> 00:06:45.820
to make sense to your user.

00:06:45.820 --> 00:06:48.360
How ever you do it, once you
pick the version to commit,

00:06:48.360 --> 00:06:50.730
this will be saved
back up to the server.

00:06:50.730 --> 00:06:53.640
The server will update
this snapshot to version C,

00:06:53.640 --> 00:06:54.869
and then it will close it.

00:06:54.869 --> 00:06:56.410
Which means-- yes,
that's right-- you

00:06:56.410 --> 00:06:59.542
will need to reopen
it again to proceed.

00:06:59.542 --> 00:07:01.000
Now, on the Android
side of things,

00:07:01.000 --> 00:07:02.810
your choices are a
little bit more limited.

00:07:02.810 --> 00:07:06.104
You have no fancy automatic
merge policies or anything.

00:07:06.104 --> 00:07:08.520
You basically just have to
pick one of these two snapshots

00:07:08.520 --> 00:07:10.440
to move forward
with and that's it.

00:07:10.440 --> 00:07:12.950
Now, to help you do this, you
can retrieve both snapshots

00:07:12.950 --> 00:07:13.930
within the code.

00:07:13.930 --> 00:07:16.310
What the code refers
to here as the snapshot

00:07:16.310 --> 00:07:18.390
is the base
snapshot-- where we've

00:07:18.390 --> 00:07:20.430
been calling version
B in our example.

00:07:20.430 --> 00:07:23.190
And what the code refers to here
as the conflicting snapshot is

00:07:23.190 --> 00:07:26.420
what we've been calling
version A* in our example.

00:07:26.420 --> 00:07:28.670
And you can recreate
most of those iOS

00:07:28.670 --> 00:07:30.970
merge policies with just
a few lines of code.

00:07:30.970 --> 00:07:32.700
For instance, we
can always choose

00:07:32.700 --> 00:07:34.390
to use the base snapshot.

00:07:34.390 --> 00:07:36.680
We could always use the
remote version or the conflict

00:07:36.680 --> 00:07:37.421
snapshot.

00:07:37.421 --> 00:07:38.920
Or we could always
take the snapshot

00:07:38.920 --> 00:07:40.080
with a long display time.

00:07:40.080 --> 00:07:42.360
And if you wanted to go
with-- hey, let's show a user

00:07:42.360 --> 00:07:44.235
a dialog box with
both saved versions,

00:07:44.235 --> 00:07:45.860
ask which one they
want to move forward

00:07:45.860 --> 00:07:47.443
with-- you could
totally do that, too.

00:07:47.443 --> 00:07:49.780
I just didn't include
the code here.

00:07:49.780 --> 00:07:51.390
The only tricky
part will be if we

00:07:51.390 --> 00:07:54.670
want to do a manual merge,
where the new snapshot is

00:07:54.670 --> 00:07:57.900
a fancy combination of
the two existing ones.

00:07:57.900 --> 00:07:59.970
So remember on Android,
you have to just pick

00:07:59.970 --> 00:08:02.470
one of these two snapshots
to move forward with.

00:08:02.470 --> 00:08:05.750
So what we need to do is
pick one of our snapshots,

00:08:05.750 --> 00:08:07.610
save that up as our new save.

00:08:07.610 --> 00:08:09.860
Then we could
immediately reopen it,

00:08:09.860 --> 00:08:11.950
apply all the changes
we want to turn it

00:08:11.950 --> 00:08:14.320
into our fancy
auto merged option.

00:08:14.320 --> 00:08:16.930
And then send it up
and commit it again.

00:08:16.930 --> 00:08:19.390
And in case you're
curious, this is actually

00:08:19.390 --> 00:08:22.160
what the iOS version of the
library does behind the scenes

00:08:22.160 --> 00:08:24.520
if you resolve a conflict
with the third snapshot.

00:08:24.520 --> 00:08:26.520
It just kind of takes
care of this work for you,

00:08:26.520 --> 00:08:28.180
because it's helpful like that.

00:08:28.180 --> 00:08:30.730
On the C++ side, you have
a mix of the two libraries.

00:08:30.730 --> 00:08:33.470
We do let you pick from a number
of auto-resolve strategies

00:08:33.470 --> 00:08:34.690
like we do on iOS.

00:08:34.690 --> 00:08:36.320
But if you want to
manually resolve

00:08:36.320 --> 00:08:38.340
two conflicting
snapshots with a third,

00:08:38.340 --> 00:08:40.650
you're first going to have
to pick one, commit it, then

00:08:40.650 --> 00:08:42.100
reopen it, apply
the new changes,

00:08:42.100 --> 00:08:46.600
commit it again like you would
do in the Android Java SDK.

00:08:46.600 --> 00:08:48.600
Either way, once you have
resolved and committed

00:08:48.600 --> 00:08:50.480
your new snapshot,
you should now

00:08:50.480 --> 00:08:52.864
have the confidence to reopen
your saved game, knowing

00:08:52.864 --> 00:08:54.530
that everything is
right with the world.

00:08:54.530 --> 00:08:55.540
Right?

00:08:55.540 --> 00:08:58.230
Well, kind of.

00:08:58.230 --> 00:09:00.760
In some rare situations,
you might end up in cases

00:09:00.760 --> 00:09:03.390
where you have more than one
conflict version sitting out

00:09:03.390 --> 00:09:04.272
there on the cloud.

00:09:04.272 --> 00:09:06.730
Typically, this happens when
a player is playing their game

00:09:06.730 --> 00:09:08.560
on three or more
devices at once.

00:09:08.560 --> 00:09:09.500
Rare, definitely.

00:09:09.500 --> 00:09:11.160
But it can happen.

00:09:11.160 --> 00:09:14.100
Now in these situations, when
you ask to open a snapshot,

00:09:14.100 --> 00:09:16.430
you're given the base version
and a conflict version

00:09:16.430 --> 00:09:18.290
to resolve-- just like normal.

00:09:18.290 --> 00:09:20.500
And just like normal, you
send a resolved version

00:09:20.500 --> 00:09:23.470
back up to the server,
the tag is updated,

00:09:23.470 --> 00:09:27.060
and then the snapshot is closed.

00:09:27.060 --> 00:09:29.061
Well, our game still wants
to use this snapshot.

00:09:29.061 --> 00:09:30.851
So it's going to ask
the server to open it.

00:09:30.851 --> 00:09:33.020
And that's when the server
tells us-- oh hey, wait.

00:09:33.020 --> 00:09:35.210
You actually need to resolve
this new base snapshot

00:09:35.210 --> 00:09:38.472
with his other version I've
also had hanging around.

00:09:38.472 --> 00:09:39.680
But that's no problem for us.

00:09:39.680 --> 00:09:40.180
Right?

00:09:40.180 --> 00:09:41.890
We're still just
resolving two snapshots.

00:09:41.890 --> 00:09:44.380
This is all the same logic
we've been applying before.

00:09:44.380 --> 00:09:46.700
So we simply resolve
this pair of snapshots,

00:09:46.700 --> 00:09:48.900
commit the correct version
back to the cloud where

00:09:48.900 --> 00:09:53.270
it once again gets closed, and
then we can finally reopen it.

00:09:53.270 --> 00:09:56.562
And there was much rejoicing.

00:09:56.562 --> 00:09:58.270
Now in general, this
whole idea of having

00:09:58.270 --> 00:10:00.600
more than one conflict at
once shouldn't throw you off

00:10:00.600 --> 00:10:01.330
too much.

00:10:01.330 --> 00:10:03.160
After all, we're
really just reapplying

00:10:03.160 --> 00:10:05.480
a lot of the same logic
we've already written.

00:10:05.480 --> 00:10:07.920
I think the area where it
can get a little tricky is

00:10:07.920 --> 00:10:10.650
if you're an Android,
Java, or C++ developer

00:10:10.650 --> 00:10:14.080
and you're waiting to apply
your fancy custom merge snapshot

00:10:14.080 --> 00:10:16.920
on top of an existing snapshot
you've just committed.

00:10:16.920 --> 00:10:19.890
You're probably expecting to
get a single snapshot back

00:10:19.890 --> 00:10:21.800
after your previous
commit and reopen.

00:10:21.800 --> 00:10:24.775
But instead, you get back two,
which might confuse your game.

00:10:24.775 --> 00:10:26.650
So what you do at this
point depends a little

00:10:26.650 --> 00:10:28.780
on your game's logic,
what's in your fancy combo

00:10:28.780 --> 00:10:31.370
snapshot, what's in this
new remote snapshot.

00:10:31.370 --> 00:10:33.560
But again, it's really
just an extension of code

00:10:33.560 --> 00:10:35.070
you've probably already written.

00:10:35.070 --> 00:10:37.130
You just need to be aware
that this situation can

00:10:37.130 --> 00:10:39.820
happen and code defensively.

00:10:39.820 --> 00:10:40.320
All right.

00:10:40.320 --> 00:10:41.440
That was a lot of
detail, but I'm

00:10:41.440 --> 00:10:43.580
hoping at this point you have a
better understanding of what's

00:10:43.580 --> 00:10:46.180
going on underneath the hood
when you start implementing

00:10:46.180 --> 00:10:48.100
saved games for your game.

00:10:48.100 --> 00:10:50.440
Don't worry if any of this
seemed confusing for you.

00:10:50.440 --> 00:10:53.640
We have sample code and apps
and guides for you to look at.

00:10:53.640 --> 00:10:56.280
And of course, you can always
re-watch this video anytime you

00:10:56.280 --> 00:10:56.780
want.

00:10:56.780 --> 00:10:58.750
If I were you, I'd
bookmark this video

00:10:58.750 --> 00:11:00.620
and then watch it again
when you're actually

00:11:00.620 --> 00:11:02.620
trying to implement this
stuff, because probably

00:11:02.620 --> 00:11:05.430
some of these edge cases will
make a little more sense.

00:11:05.430 --> 00:11:07.910
So once again, thank you
very much for watching.

00:11:07.910 --> 00:11:11.100
Feel free to follow me on G+
for serious work-related stuff

00:11:11.100 --> 00:11:13.210
and Twitter for mostly
dumb, jokey stuff.

00:11:13.210 --> 00:11:15.870
And otherwise, I will see
you back here in YouTube land

00:11:15.870 --> 00:11:17.350
at some point in
the near future.

00:11:17.350 --> 00:11:18.960
Later, skaters.

00:11:18.960 --> 00:11:21.020
Do people still say
that these days?

00:11:21.020 --> 00:11:23.167
Seacrest out.

00:11:23.167 --> 00:11:23.750
You know what?

00:11:23.750 --> 00:11:24.708
I'll just see you soon.

00:11:24.708 --> 00:11:25.811
Bye.

