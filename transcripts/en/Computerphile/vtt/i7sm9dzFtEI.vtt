WEBVTT
Kind: captions
Language: en-GB

00:00:00.030 --> 00:00:03.320
So far we've looked at primitive recursion

00:00:03.320 --> 00:00:07.250
- things where you can use recursion if
you want to, but you don't have to

00:00:07.250 --> 00:00:10.849
because it can be de-recursed and turned into
an iterative "for" loop.

00:00:10.849 --> 00:00:14.740
We did factorial and we did fibonacci

00:00:14.740 --> 00:00:18.520
both of which are primitive recursive in
this sense.

00:00:18.520 --> 00:00:22.410
And there'll be a great danger in thinking
well, surely,

00:00:22.410 --> 00:00:25.720
you can do anything then in "for" loops, why
bother with recursion at all?

00:00:25.720 --> 00:00:29.609
Well, there are some things which are so
fundamentally recursive

00:00:29.609 --> 00:00:34.860
that you just have to do them recursively.

00:00:34.860 --> 00:00:39.340
It became clear to mathematicians really
at the turn of the last century

00:00:39.340 --> 00:00:43.420
about the nature of functions in general that

00:00:43.420 --> 00:00:49.780
there were some things that were so - if
you like -  huge, so enormous, so badly behaved

00:00:49.780 --> 00:00:53.239
that they just had to be recursively defined.

00:00:53.239 --> 00:00:58.930
And I think one the earliest people to
realize this was

00:00:58.930 --> 00:01:02.370
a research student of David Hilbert's -- now

00:01:02.370 --> 00:01:05.930
who is David Hilbert? We're back on Numberphile
territory again !

00:01:05.930 --> 00:01:11.170
Probably, perhaps, the greatest
mathematician of the late 19th and early

00:01:11.170 --> 00:01:12.590
20th century.

00:01:12.590 --> 00:01:16.530
He was a phenomenal mathematical

00:01:16.530 --> 00:01:19.790
genius, capabilities, and so on

00:01:19.790 --> 00:01:23.150
He was at Goettingen, in Germany, and I think
I'm right in saying that

00:01:23.150 --> 00:01:26.990
Ackermann was one of his research students
and it's Wilhelm

00:01:26.990 --> 00:01:30.170
Ackermann's function that we're going to
look at today.

00:01:30.170 --> 00:01:34.119
The test was, can you come up with
something that just has to be done

00:01:34.119 --> 00:01:38.920
totally recursively - you can't do 
it, as it were, in a "for" loop

00:01:38.920 --> 00:01:42.220
even though those hadn't been properly
invented at that stage.

00:01:42.220 --> 00:01:45.530
What became clear as a result of

00:01:45.530 --> 00:01:48.770
work started by Ackermann, and by others,

00:01:48.770 --> 00:01:52.670
is that we've got a hierarchy of
program types:

00:01:52.670 --> 00:01:56.649
Right down at the bottom - the simple ones 
we've seen --  the ones that can be de-recursed,

00:01:56.649 --> 00:02:00.930
these are Primitive Recursive. There's a whole
layer on top of that

00:02:00.930 --> 00:02:05.060
where they're functions where you just have
to define them

00:02:05.060 --> 00:02:08.729
recursively. Just above this set are the

00:02:08.729 --> 00:02:12.200
Recursively Enumerable functions

00:02:12.200 --> 00:02:15.739
Let's be clear here, by saying Primitive
Recursive at the bottom

00:02:15.739 --> 00:02:19.129
I'm including every other program that
isn't recursive

00:02:19.129 --> 00:02:21.970
I'm regarding a thing that just goes
through a sequence as being a very

00:02:21.970 --> 00:02:23.470
simple example of

00:02:23.470 --> 00:02:26.489
a primitive recursive program with no
real recursion in it

00:02:26.489 --> 00:02:30.360
and anything that's got "for" loops
or nested "for" loops,  well actually

00:02:30.360 --> 00:02:33.950
you could have done that recursively, and
probably languages like Haskell do

00:02:33.950 --> 00:02:35.019
for all I know.

00:02:35.019 --> 00:02:38.239
But they still count as the simplest form 
of program

00:02:38.239 --> 00:02:41.410
- primitive recursion if it's got
recursion in there at all

00:02:41.410 --> 00:02:44.959
you could always de-recurse it - make it 
into "for" loops, This next thing

00:02:44.959 --> 00:02:50.819
Recursive, on top of that, there's an even
more problematical set of programs,

00:02:50.819 --> 00:02:54.239
above that, which says they're recursive,

00:02:54.239 --> 00:02:58.159
but for some values of the arguments you
put into the function

00:02:58.159 --> 00:03:01.569
they will stop and give an answer and 
for others

00:03:01.569 --> 00:03:05.349
they will go on for ever and they will
never ever stop.

00:03:05.349 --> 00:03:08.360
[How do you define 'for ever' then, go on]

00:03:08.360 --> 00:03:12.989
Forever and ever and ever - they will go
into just repeating the same old stack

00:03:12.989 --> 00:03:14.950
frames and you may not be aware of it

00:03:14.950 --> 00:03:21.300
and just go round and round. And then you'll 
say: "But how can I decide ahead of time

00:03:21.300 --> 00:03:25.049
for given arguments, whether it will stop
or won't ?"

00:03:25.049 --> 00:03:28.840
And the answer is - Hello Alan Turing -

00:03:28.840 --> 00:03:32.230
in general that may well be Undecidable.

00:03:32.230 --> 00:03:36.500
So above here, out in hyperspace, is the Great 

00:03:36.500 --> 00:03:40.430
Undecidable Universe.

00:03:40.430 --> 00:03:44.549
There are some problems you can set in computing

00:03:44.549 --> 00:03:47.890
that just are not decidable

00:03:47.890 --> 00:03:52.439
at all - not by any algorithm and one of the

00:03:52.439 --> 00:03:56.200
great names in this was Kurt Godel -

00:03:56.200 --> 00:04:00.060
in the early nineteen thirties - and the
second great name for computer

00:04:00.060 --> 00:04:01.430
scientists that linked

00:04:01.430 --> 00:04:05.260
Godel's work with how computer programs
worked

00:04:05.260 --> 00:04:08.900
and with his Turing Machines, was Alan
Turing. He wrote

00:04:08.900 --> 00:04:12.510
a famous paper in 1936 about his Turing Machines

00:04:12.510 --> 00:04:15.700
- referred back to Kurt Godel's work and
basically said

00:04:15.700 --> 00:04:18.880
"There are some things in computing

00:04:18.880 --> 00:04:21.959
that are undecidable"  But for the moment 

00:04:21.959 --> 00:04:26.000
were coming in here, at the next level
above Primitive Recursive

00:04:26.000 --> 00:04:29.770
We're going and take a look at a Recursive 
function where

00:04:29.770 --> 00:04:33.229
I can reason through with you that it will give

00:04:33.229 --> 00:04:36.240
an answer. It's not in the nasty set above it,

00:04:36.240 --> 00:04:39.540
the Recursively Enumerables, where sometimes
it would go wrong

00:04:39.540 --> 00:04:42.720
and just end up spinning and not doing
anything useful.

00:04:42.720 --> 00:04:46.600
This thing - and this is a good
introduction as well to the way that

00:04:46.600 --> 00:04:48.470
theoretical computer scientists

00:04:48.470 --> 00:04:53.840
- of which I'm not one - but I'll try and give you 
the flavour about how you can reason about programs,

00:04:53.840 --> 00:04:57.490
and how they behave, even without
actually executing them.

00:04:57.490 --> 00:05:03.419
The version of Ackermann's function that tends to be
used nowadays - the one modified by Peter and by

00:05:03.419 --> 00:05:06.820
Robinson:  here is where all the hard work occurs

00:05:06.820 --> 00:05:10.020
This is the recursive function itself
We declare 'ack',

00:05:10.020 --> 00:05:13.990
for short, a function with two incoming
integer arguments.

00:05:13.990 --> 00:05:17.370
And here, look, it delivers back an integer
result

00:05:17.370 --> 00:05:20.560
It delivers back the integer result in its
local variable

00:05:20.560 --> 00:05:24.419
which it declares for itself for holding
the answer and eventually of course,

00:05:24.419 --> 00:05:25.720
look, it's going to return

00:05:25.720 --> 00:05:29.639
the answer. But how does it do its
recursive horrors?

00:05:29.639 --> 00:05:32.740
If the incoming argument 'm' is 0

00:05:32.740 --> 00:05:36.289
then deliver back the integer answer 'm + 1'

00:05:36.289 --> 00:05:39.740
So if I came in with ackermann(0,2)

00:05:39.740 --> 00:05:43.509
because the 'm' is zero, it would deliver back

00:05:43.509 --> 00:05:49.650
two plus one : three. Easy. Otherwise if that
isn't true - if 'm' isn't zero, if it's any other

00:05:49.650 --> 00:05:53.169
integer, else if 'n' is 0

00:05:53.169 --> 00:05:58.630
then the answer is what you get by
calling up ackermann, recursively again,

00:05:58.630 --> 00:06:03.710
but this time by reducing the first
argument by one. Call up

00:06:03.710 --> 00:06:07.130
ackermann with 'm - 1', not 'm', and with

00:06:07.130 --> 00:06:10.280
the first argument 1. Otherwise - now that's

00:06:10.280 --> 00:06:14.470
bad enough but here comes the real
killer - if 'm' isn't 0 and if

00:06:14.470 --> 00:06:18.940
'n' isn't 0, what's the general case? The
general case is

00:06:18.940 --> 00:06:21.970
that the answer is ackerman of 'm - 1'

00:06:21.970 --> 00:06:25.759
notice you're reducing 'm' again, look, and
this is where a headache starts to

00:06:25.759 --> 00:06:29.729
set in, this blows your brain and makes you
realize why you can't

00:06:29.729 --> 00:06:35.169
de-recurse this into iteration - the
second argument for that generalized call

00:06:35.169 --> 00:06:38.180
of ackermann, is itself a call of

00:06:38.180 --> 00:06:42.630
ackermann!  So you have to go through endless

00:06:42.630 --> 00:06:47.889
thousands of stack frames to calculate
just what the second argument must be

00:06:47.889 --> 00:06:50.919
to another call of ackermann that's gonna go
through the same agony

00:06:50.919 --> 00:06:56.470
all over again. Now I think you can
mentally visualize just what a huge

00:06:56.470 --> 00:06:58.389
amount of computation

00:06:58.389 --> 00:07:01.699
might be involved here and how big

00:07:01.699 --> 00:07:05.229
the numbers might get to be.  But what I
would like to just

00:07:05.229 --> 00:07:08.380
draw your attention to, because this is
important,

00:07:08.380 --> 00:07:11.400
is that every time 'm' and 'n'

00:07:11.400 --> 00:07:14.889
are altered, in going round recursively, they

00:07:14.889 --> 00:07:20.300
reduce. We found out that on the second
line it says if 'n' was zero

00:07:20.300 --> 00:07:24.190
then it called up a thing with ackermann( n-1, ...)
in it

00:07:24.190 --> 00:07:27.340
yeah, so you're reducing 'm' in that place

00:07:27.340 --> 00:07:30.729
and even in the horrible worst case, the
third line,

00:07:30.729 --> 00:07:34.270
you reduce the first argument to 'm - 1'

00:07:34.270 --> 00:07:37.990
and within that vile second argument

00:07:37.990 --> 00:07:41.430
it's ackerman(m, n-1)

00:07:41.430 --> 00:07:46.080
so as you go around this if 'm' and 'n'
change at all

00:07:46.080 --> 00:07:50.819
they are reduced. Therefore

00:07:50.819 --> 00:07:54.020
if your first two traps,

00:07:54.020 --> 00:07:57.650
which we've got here, are for when 'm' 
gets down to zero

00:07:57.650 --> 00:08:01.069
and when 'n' gets down to zero then

00:08:01.069 --> 00:08:04.449
in the end it will terminate, so long as

00:08:04.449 --> 00:08:09.300
you feed in positive integers for 'm' and
'n'. Now, as ever, I have done no

00:08:09.300 --> 00:08:12.379
error checking whatever - that's down to you.

00:08:12.379 --> 00:08:17.139
I want you to concentrate on this. Yeah, if
you put negative numbers in there, boy

00:08:17.139 --> 00:08:18.910
are you in for a rough old ride !

00:08:18.910 --> 00:08:21.919
Yeah, it's got to be

00:08:21.919 --> 00:08:27.030
positive integers, zeros are fine, but must 
be zero or positive integers.

00:08:27.030 --> 00:08:30.060
Although this is a huge recursive mess,

00:08:30.060 --> 00:08:33.159
with millions of stack frames, nonetheless

00:08:33.159 --> 00:08:36.969
by reasoning and saying that when these
values are altered they

00:08:36.969 --> 00:08:40.930
always alter downwards, you can
convince yourself that this will

00:08:40.930 --> 00:08:44.420
eventually deliver an answer.

00:08:44.420 --> 00:08:48.959
Now, the only trouble is that, in delivering
an answer, there may be a huge amount of

00:08:48.959 --> 00:08:50.430
computation involved

00:08:50.430 --> 00:08:55.420
particularly when we get into this third
line and you have to run Ackermann's function

00:08:55.420 --> 00:08:59.760
in order to work out what an argument
to Ackermann's function is going to be.

00:08:59.760 --> 00:09:03.380
And just to show you how bad this gets

00:09:03.380 --> 00:09:06.910
I've set up two nested "for" loops 
on 'i' and 'j'

00:09:06.910 --> 00:09:12.380
taking 'i'from 0 through to 5 actually, 
because it's 'i' less than 6

00:09:12.380 --> 00:09:15.610
'j' from 0 through to 5,  and I call up

00:09:15.610 --> 00:09:18.970
the Ackermann function as the argument
to be printed

00:09:18.970 --> 00:09:22.810
in the standard piece of text here.
So you get things like ackermann(0,0)

00:09:22.810 --> 00:09:26.850
is whatever, and you call up ackermann

00:09:26.850 --> 00:09:30.010
recursively, to work it out.
["So, how's that going for you?"]

00:09:30.010 --> 00:09:34.230
How is that going for me?!  Well, what
Steve and I

00:09:34.230 --> 00:09:37.410
(Dr Heartbleed as we now call him ....)

00:09:37.410 --> 00:09:42.240
We set this going four weeks ago
nearly, now.

00:09:42.240 --> 00:09:46.779
The first few have vanished off the top,
You'll be delighted to know that

00:09:46.779 --> 00:09:48.110
ackermann(0,3) has a value

00:09:48.110 --> 00:09:51.779
of 4, that ackermann(2,2) is 7

00:09:51.779 --> 00:09:55.010
ackermann(3,2) is 29 - doesn't look 
too bad.

00:09:55.010 --> 00:09:58.110
Now it did have a bit of a gasp for air

00:09:58.110 --> 00:10:01.600
between 4,0 which is

00:10:01.600 --> 00:10:06.430
13 and it finally decided that ackermann(4,1)

00:10:06.430 --> 00:10:09.790
was 65,533.

00:10:09.790 --> 00:10:13.750
It still took it, recursively,

00:10:13.750 --> 00:10:17.100
on this machine, 3 minutes to work out

00:10:17.100 --> 00:10:21.620
that ackermann(4,1) was 65,533

00:10:21.620 --> 00:10:25.860
so this is progress, because this of
course is a

00:10:25.860 --> 00:10:31.540
fairly modern quad-core Pentium, or whatever 
it is [Note: actually a Pentium 4] running Linux.

00:10:31.540 --> 00:10:35.209
The previous machine I had, when I first
tried this, seven or eight years ago,

00:10:35.209 --> 00:10:39.079
was a venerable Sun SparcBlade and the
SparcBlade -

00:10:39.079 --> 00:10:43.019
miracle of its age - took 20 minutes to work
that out. So twenty minutes, three

00:10:43.019 --> 00:10:44.769
minutes, we're progressing.

00:10:44.769 --> 00:10:47.800
And then, do you know, I was looking at this
with Steve

00:10:47.800 --> 00:10:51.680
we've set the thing going - it's still running. 
And I said: "Oh!, y'know, it probably

00:10:51.680 --> 00:10:54.070
won't be that bad, it'll be ...

00:10:54.070 --> 00:10:58.709
if it took three minutes to work out
something whose answer was 65,533

00:10:58.709 --> 00:11:02.320
it'll take about, maybe, sixty five
thousand

00:11:02.320 --> 00:11:05.670
times three minutes to work the next 
one out 

00:11:05.670 --> 00:11:09.480
and did a few calculations - yeah, about
four months on this machine.

00:11:09.480 --> 00:11:12.510
something like that". Er, no!

00:11:12.510 --> 00:11:16.750
I've just looked into it more deeply and
reminded myself of the appalling properties

00:11:16.750 --> 00:11:19.000
of the Ackermann function when it starts 
to build.

00:11:19.000 --> 00:11:22.620
No, it will take two to the power

00:11:22.620 --> 00:11:25.910
of 65,533 -

00:11:25.910 --> 00:11:29.120
times three - three minutes per go.
It will take three

00:11:29.120 --> 00:11:33.600
times two to the 65,533

00:11:33.600 --> 00:11:36.750
minutes, to work out that value.

00:11:36.750 --> 00:11:41.019
That is unimaginably huge!  It's no
good saying it's 'astronomical'

00:11:41.019 --> 00:11:46.089
- it's way beyond astronomical. The number
of particles I think including all dark

00:11:46.089 --> 00:11:47.760
matter isn't more than about

00:11:47.760 --> 00:11:53.420
2 to the 300 - something like that - the number 
of seconds since the Big Bang is probably about

00:11:53.420 --> 00:11:56.540
two to the 500 or 600 at most
[Note: actually it's about 2 to the 59]

00:11:56.540 --> 00:11:59.959
not 2 to the power of 65,533.

00:11:59.959 --> 00:12:04.260
But what's gonna happen eventually - 
2 to the power of 65,533

00:12:04.260 --> 00:12:08.139
is such a big number, so we're going to start 
getting wrong answers. We'll either get

00:12:08.139 --> 00:12:11.139
overflow happening or perhaps if integer

00:12:11.139 --> 00:12:16.190
overflow isn't signalled to us - you know
integer numbers sometimes tend to roll

00:12:16.190 --> 00:12:17.110
over the top and go

00:12:17.110 --> 00:12:22.160
negative. So who knows what will happen.
I'll probably stop this off now

00:12:22.160 --> 00:12:25.589
when we've made this video because frankly
I have not - 

00:12:25.589 --> 00:12:30.050
I don't think I'm going to survive for two 
to the power of 65,533 minutes

00:12:30.050 --> 00:12:33.910
- multiplied by three - for this to
come to an end.

00:12:33.910 --> 00:12:38.740
I think the astronomers would probably
say the Big Crunch, when the universe all

00:12:38.740 --> 00:12:42.649
gets down to a dot again, even that is probably

00:12:42.649 --> 00:12:46.110
going to happen in about another 2 to the
power few hundred ....

00:12:46.110 --> 00:12:49.990
This sort of  behaviour is often called
'super exponential'.

00:12:49.990 --> 00:12:53.959
One of the ways of indicating that a
function probably has to be done

00:12:53.959 --> 00:12:56.200
recursively and can't be done in "for" loops

00:12:56.200 --> 00:12:59.700
is when it starts behaving super exponentially

00:12:59.700 --> 00:13:03.399
Not just like 'n' to the power 'n',
which would be exponential

00:13:03.399 --> 00:13:06.920
but 'n' to the power of 'n' to the power of 'n'
to the power

00:13:06.920 --> 00:13:10.070
of 'n' to the power of 'n' - done 'n' times

00:13:10.070 --> 00:13:15.579
And your brain just collapses and refuses 
to even contemplate what that means.

00:13:15.579 --> 00:13:19.040
In fact I've noticed one commenter - thank
you whoever it was -

00:13:19.040 --> 00:13:24.200
when somebody said: "Surely you can do
anything in "for" loops? What do you have

00:13:24.200 --> 00:13:24.860
to do

00:13:24.860 --> 00:13:29.459
totally recursively?"  Somebody has picked up one
of those numbers I don't know much about

00:13:29.459 --> 00:13:33.279
really big ones called googles and googleplexes
 - they've day been covered in Numberphile -

00:13:33.279 --> 00:13:34.060
and said

00:13:34.060 --> 00:13:38.440
How about ackermann of g64, I think it's called 
[Note: g64 is actually Graham's Number]

00:13:38.440 --> 00:13:43.620
How about ackermann(g64,g64) ? The arguments 
before you ever start inflating them

00:13:43.620 --> 00:13:47.279
are still absolutely astronomical but

00:13:47.279 --> 00:13:50.880
the really interesting thing is that
although we can never know what the

00:13:50.880 --> 00:13:52.110
answer is

00:13:52.110 --> 00:13:56.829
and the answer two to the 65 thousand whatever

00:13:56.829 --> 00:14:01.029
divided by three, that is going to
involve 20,000

00:14:01.029 --> 00:14:04.519
decimal digits when it finally comes out

00:14:04.519 --> 00:14:07.870
way beyond the Big Crunch, but

00:14:07.870 --> 00:14:12.070
by reasoning with the program in the way
we did we know

00:14:12.070 --> 00:14:16.720
it is not uncomputable. Think back to
the original hierarchy;

00:14:16.720 --> 00:14:20.230
because we can never know the answer to
some of these values

00:14:20.230 --> 00:14:24.329
does it mean it's uncomputable? No- 
'uncomputable' means there

00:14:24.329 --> 00:14:29.060
is no algorithm for doing it. Ackermann is
a perfectly good algorithm!

00:14:29.060 --> 00:14:33.389
You can prove it terminates - it's just that
none of us are going to be around long enough

00:14:33.389 --> 00:14:37.350
to find out what some of those values are.

