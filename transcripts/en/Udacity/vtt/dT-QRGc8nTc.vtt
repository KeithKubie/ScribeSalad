WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.000
Up to now we have only dealt with the effect of a finite time step,

00:00:04.000 --> 00:00:10.000
but actually also the representation of the values on the x axis is cross-grained.

00:00:10.000 --> 00:00:12.000
Now we have a look at what this leads to,

00:00:12.000 --> 00:00:15.000
and for simplicity it's again the forward Euler method.

00:00:15.000 --> 00:00:21.000
As a test case, we're using that satellite that's almost geostationary from Unit 2.

00:00:21.000 --> 00:00:25.000
It takes precisely 24 hours to complete one orbit around the earth.

00:00:25.000 --> 00:00:29.000
What's critical about the forward Euler method in terms of round-off error

00:00:29.000 --> 00:00:32.000
is this addition and this one.

00:00:32.000 --> 00:00:35.000
X(t) is a number of reasonable size.

00:00:35.000 --> 00:00:37.000
In this case quite an amount of meters.

00:00:37.000 --> 00:00:41.000
I'm just drawing some ghost figures here to give an impression,

00:00:41.000 --> 00:00:46.000
but the step size times the velocity is pretty small in comparison,

00:00:46.000 --> 00:00:50.000
because we're multiplying by that small step size.

00:00:50.000 --> 00:00:55.000
If the velocity is of reasonable size and we multiply by that small step size,

00:00:55.000 --> 00:00:58.000
we get a number that's rather small in comparison to x.

00:00:58.000 --> 00:01:03.000
Then we form the sum of these two numbers and get something that looks like this,

00:01:03.000 --> 00:01:07.000
but actually this number again is computed and is being stored

00:01:07.000 --> 00:01:13.000
at the position of x--the loose position in that process.

00:01:13.000 --> 00:01:17.000
Actually, you see the value of x didn't have enough position to start with.

00:01:17.000 --> 00:01:21.000
The smaller we choose the step size, the smaller this number becomes,

00:01:21.000 --> 00:01:24.000
the more grave the effect of round-off error will be.

00:01:24.000 --> 00:01:31.000
The effect of the round off error is that we actually are losing the details of velocity and force.

00:01:31.000 --> 00:01:35.000
We could have gotten away with not computing these digits anyway.

00:01:35.000 --> 00:01:40.000
To see a noticeable effect of round-off errors in a manageable time, I'm cheating a little here.

00:01:40.000 --> 00:01:47.000
I'm using standard Euler, but them I'm multiplying by a number of 1 plus tiny random number.

00:01:47.000 --> 00:01:53.000
This epsilon is defined to be 2 * 10⁻⁶ in advance.

00:01:53.000 --> 00:01:58.000
This looks as though I have a pretty huge round-off error every time.

00:01:58.000 --> 00:02:00.000
This is the result that we get.

00:02:00.000 --> 00:02:04.000
First I have to explain why we see several points for each step size.

00:02:04.000 --> 00:02:07.000
This is because we're dealing with random numbers

00:02:07.000 --> 00:02:10.000
and because I let the computer try out every step size 10 times.

00:02:10.000 --> 00:02:12.000
The overall behavior is what we know.

00:02:12.000 --> 00:02:17.000
With the forward Euler method the error depends linearly on the step size,

00:02:17.000 --> 00:02:20.000
at least for step sizes that are small enough.

00:02:20.000 --> 00:02:25.000
But for very small step sizes you see--uh-oh--the error explodes,

00:02:25.000 --> 00:02:27.000
and we have many small steps.

00:02:27.000 --> 00:02:31.000
Round-off error accumulates and destroys our result.

00:02:31.000 --> 00:02:35.000
What you should be learning from this reducing the step size

00:02:35.000 --> 00:02:37.000
only takes you so far.

00:02:37.000 --> 00:02:40.000
There is a threshold after which the error goes up again

00:02:40.000 --> 00:02:42.000
and may become severe.

00:02:42.000 --> 00:02:45.000
Let's look at the same data from a different viewpoint.

00:02:45.000 --> 00:02:49.000
Let's note that the error depends on the step size,

00:02:49.000 --> 00:02:53.000
but let's plot how the error depends on the number of steps.

00:02:53.000 --> 00:02:55.000
This is what we get.

00:02:55.000 --> 00:02:58.000
For a small number of steps, the step size is large,

00:02:58.000 --> 00:03:02.000
and the forward Euler method introduces a huge error,

00:03:02.000 --> 00:03:04.000
which then decreases in a linear fashion,

00:03:04.000 --> 00:03:09.000
but as the number of steps grows, we get more and more error due to round off.

00:03:09.000 --> 00:03:14.000
The simple model for this behavior would be to say that the error introduced by rounding

00:03:14.000 --> 00:03:16.000
is proportional to the number of steps

00:03:16.000 --> 09:59:59.000
and hence inversely proportional to the step size plus h.

