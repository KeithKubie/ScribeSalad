WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Now let's walk through how shift might work together.

00:00:03.000 --> 00:00:08.000
We can only shift if the next input token, the one we're currently looking at,

00:00:08.000 --> 00:00:12.000
exactly matches c, the next thing we expect to see.

00:00:12.000 --> 00:00:15.000
Now, you might have been tempted to have an i + 1 in here,

00:00:15.000 --> 00:00:19.000
but remember that in Python lists and strings are indexed from zero,

00:00:19.000 --> 00:00:23.000
so tokens bracket 0 is actually the first element of the input.

00:00:23.000 --> 00:00:29.000
One of the first thing we have to do is check and see is cd empty or is it something?

00:00:29.000 --> 00:00:35.000
Well, if cd is not empty, then we can take a look at its first element c,

00:00:35.000 --> 00:00:38.000
and we'll just check to see how that compares to tokens i.

00:00:38.000 --> 00:00:42.000
If they match exactly, then we can shift over that token.

00:00:42.000 --> 00:00:47.000
We're going to return a new parsing state that still has x at the front,

00:00:47.000 --> 00:00:54.000
but now instead of ab it should have abc, because we're shifting the red dot one.

00:00:54.000 --> 00:00:57.000
Remember that c was the 0th element of cd.

00:00:57.000 --> 00:00:59.000
We've shifted the red dot over one,

00:00:59.000 --> 00:01:03.000
and now instead of cd on the right it's just going to have d on the right.

00:01:03.000 --> 00:01:06.000
We want to peel off the first element of this list.

00:01:06.000 --> 00:01:12.000
We can use Python's range selection to peel off all but the 0th element.

00:01:12.000 --> 00:01:14.000
Let me just make my writing a bit more clear there.

00:01:14.000 --> 00:01:17.000
This was really from j, and we are also from j.

00:01:17.000 --> 00:01:23.000
If the stars did not align--either if cd was empty or it didn't match up the next token--

00:01:23.000 --> 09:59:59.000
then we were supposed to return None.

