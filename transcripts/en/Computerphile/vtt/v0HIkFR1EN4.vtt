WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:01.820
I work in the functional programming lab

00:00:01.820 --> 00:00:05.020
Here in the School of Computer Science

00:00:05.020 --> 00:00:05.960
 

00:00:05.960 --> 00:00:09.740
We're interested in finding programming languages and techniques

00:00:09.740 --> 00:00:12.580
For making it easy to write pretty programs

00:00:12.580 --> 00:00:15.640
And we believe functional programming is the way to achieve that

00:00:15.640 --> 00:00:18.340
Functions are quite simple in the way you specify them

00:00:18.340 --> 00:00:21.900
Because it is easy to put big systems together using small reasonable functions

00:00:21.900 --> 00:00:25.500
But then the question is, okay,  we talk about functions in the mathematical sense

00:00:25.500 --> 00:00:32.320
and it's easy to understand how you might write a function to, say, compute the square of two sums or something like that

00:00:32.320 --> 00:00:32.900
 

00:00:32.900 --> 00:00:33.400
uhm

00:00:33.840 --> 00:00:38.320
But, can we also use it to write say interactive applications, or games,

00:00:38.320 --> 00:00:41.220
or musical applications, that's not too clear then.

00:00:43.980 --> 00:00:49.600
We have an application here, it's called the arpeggigon, it's patterned after something called the reactogon

00:00:49.600 --> 00:00:53.820
Which to say is a so called chain reactive performance arpeggiator

00:00:53.820 --> 00:00:58.500
And this was implemented using functional programming

00:00:58.500 --> 00:01:03.460
and then more...specifically, a variation of functional programming called

00:01:03.460 --> 00:01:05.280
reactive functional programming

00:01:05.280 --> 00:01:09.500
it is tailored for doing this kind of interactive applications

00:01:09.500 --> 00:01:16.280
ok, so now that's one way in which we can do write games or animations

00:01:16.280 --> 00:01:19.700
or musical applications in a functional language.

00:01:19.700 --> 00:01:22.880
BRADY: I'm liking the sounds. Do we need all this equipment to make this work.

00:01:22.880 --> 00:01:27.040
NILSSON: No it's all sort of midi based. So we can just make ...

00:01:27.040 --> 00:01:29.440
Connected to a software synthesizer for example.

00:01:29.460 --> 00:01:32.340
And then everything can be contained in the laptop.

00:01:32.340 --> 00:01:36.640
But because it is midi based you can also use it as a component of a larger studio setup for example.

00:01:36.640 --> 00:01:40.520
BRADY: Now I have seen applications like this sort of thing in the music world before.

00:01:40.520 --> 00:01:44.480
So what's new here I suppose? Why would somebody consider going down this route.

00:01:44.480 --> 00:01:50.020
NILSSON: Well, the thing is that time is of course central to music, right?

00:01:50.020 --> 00:01:56.560
And indeed two kinds of time. We have both continuous time and discrete time.

00:01:56.560 --> 00:01:59.920
So a musical note might start at a very specific point in time.

00:01:59.920 --> 00:02:08.100
But if it has say a crescendo or accelerando or something that takes place over a period of time gradually changing.

00:02:08.100 --> 00:02:12.940
And writing an application like this for music, it is a nice to have a language

00:02:12.940 --> 00:02:15.860
in which you can express aspects about time

00:02:15.860 --> 00:02:17.980
in a way that really fits the application domain

00:02:17.980 --> 00:02:25.580
and functional interactive programming supports this kind of what we call hybrid systems both continuous and discrete time aspects

00:02:26.120 --> 00:02:27.840
okay, in a rather high level way

00:02:27.840 --> 00:02:30.440
so it's easier to write this kind of applications

00:02:31.140 --> 00:02:35.480
So the arpeggigon is based on something called the harmonic table

00:02:36.920 --> 00:02:39.900
The harmonic table is this kind of hexagonal grid

00:02:39.900 --> 00:02:45.000
musical nodes are placed on this grid on each direction has a specific musical interval

00:02:45.000 --> 00:02:47.100
so if you go north it's a perfect fifth

00:02:47.100 --> 00:02:50.020
if you go north east it's a major third

00:02:50.020 --> 00:02:50.880
and so on and so forth

00:02:50.880 --> 00:02:53.000
BRADY: Just so people if they are not that musical understand

00:02:53.000 --> 00:02:57.840
the idea of this is that harmonics and things mean that it'll sound musical, it won't just...

00:02:57.840 --> 00:03:00.080
NILSSON: Yes, so for example if you play

00:03:01.100 --> 00:03:05.220
a note and the perfect fifth and a major third

00:03:05.220 --> 00:03:08.100
we get a major chord which sort of sounds nice together

00:03:08.100 --> 00:03:11.880
it's very easy to play sounds together it sounds nice if they have this kind of layout

00:03:11.900 --> 00:03:14.200
BRADY: Can you show us what that would be like on a keyboard?

00:03:15.720 --> 00:03:16.520
NILSSON: You mean here?

00:03:16.980 --> 00:03:20.460
Well, a major chord on a keyboard would be something like this, right

00:03:20.460 --> 00:03:22.460
[synthesizer plays major chord]

00:03:22.460 --> 00:03:25.780
What's mostly interesting here is that we have this two-dimensional layout

00:03:25.780 --> 00:03:29.400
So, we can use that to sort of for example implement

00:03:29.400 --> 00:03:31.340
a kind of pinball game if you like

00:03:31.340 --> 00:03:34.400
so we can place these tokens or counters

00:03:34.400 --> 00:03:38.920
on the grid and this, we have a few different ones here, meaning that can do different things

00:03:38.920 --> 00:03:43.200
so that thing there with the dot that's a start token

00:03:43.200 --> 00:03:46.780
so when we press play that's going to put the ball on the grid

00:03:46.780 --> 00:03:49.440
and shoot it off in the direction indicated with the arrow

00:03:49.440 --> 00:03:52.200
and the other one there is a ricochet token

00:03:52.200 --> 00:03:55.920
and whenever the ball hits it's going to sort of bounce back in the direction of the arrow

00:03:55.920 --> 00:03:59.680
And whenever the ball hits the token it's going to play the corresponding notes.

00:03:59.680 --> 00:04:01.780
If I start this you will see

00:04:01.840 --> 00:04:03.020
[musical tone]

00:04:03.020 --> 00:04:08.520
this ball is bouncing back and forth and you get a kind of musical pattern there, right

00:04:09.420 --> 00:04:12.080
And we can even, if we want to, we can even

00:04:13.460 --> 00:04:15.020
modify the layouts

00:04:16.580 --> 00:04:18.220
dynamically, so you could

00:04:18.600 --> 00:04:20.640
imagine performing with this if you wanted to

00:04:21.140 --> 00:04:25.600
we could put more start counters onto the grid

00:04:25.600 --> 00:04:28.100
Now, with a different distance between them

00:04:28.100 --> 00:04:31.760
and that means if I hit play here we are going to get a more of a polyrhythmic pattern

00:04:31.760 --> 00:04:36.280
we have gotten two different patterns, two different lengths playing at the same time

00:04:36.340 --> 00:04:37.780
BRADY: So they go out of sync?

00:04:37.800 --> 00:04:40.320
NILSSON: Yes, and then in sync again, right.

00:04:40.500 --> 00:04:42.980
And we can continue playing this game

00:04:43.920 --> 00:04:47.900
I can place a few more of these ones up here

00:04:48.540 --> 00:04:50.540
and the last one there

00:04:52.720 --> 00:04:54.160
And then we press play

00:04:56.720 --> 00:05:01.300
And that's quite nice, I think at least - depends on your musical taste I suppose but I like it.

00:05:01.300 --> 00:05:08.140
BRADY: And are all of these guaranteed because of this pattern in this layout to be musical; You couldn't make a cacophony, or could you?

00:05:08.140 --> 00:05:12.600
NILSSON: I guess "musical" depends on the listener, right?

00:05:12.600 --> 00:05:17.620
But it is certainly a lot easier to make it musical because you have these specific intervals, absolutely, yes.

00:05:17.620 --> 00:05:20.420
BRADY: And could people play with this themselves...

00:05:20.420 --> 00:05:24.540
Yes, this is free software, it is available online, you can download it and play with it.

00:05:24.540 --> 00:05:29.240
Right now it is a bit rough around the edges, but we are working on it to make it more polished and easy to use.

00:05:31.440 --> 00:05:35.360
BRADY: Why is it...you mentioned time, let's try and clarify that then

00:05:35.360 --> 00:05:42.520
Why is it easier to write something like this in your functional reactive programming rather than say, Java or...

00:05:42.520 --> 00:05:50.000
NILSSON: Right, so the thing is that in functional reactive programming or FRP as we say,

00:05:50.000 --> 00:05:54.240
we have a number of language constructs that deals with time directly.

00:05:54.240 --> 00:06:01.660
and in both continuous time and discrete time. So if we have these elements at your disposal, you can express

00:06:01.660 --> 00:06:07.100
in this case musical ideas much more directly than you could in, say, Java or C.

00:06:07.820 --> 00:06:15.040
Obviously depending on the specific context sometimes you might want to write a piece of C code or whatever

00:06:15.040 --> 00:06:20.780
and obviously if you work hard enough in C you can maybe implement this kind of support in C as well, right.

00:06:21.020 --> 00:06:23.140
But here we have done this for you in that sense.

00:06:23.860 --> 00:06:28.680
And in a very principle way which makes it fit for a functional programming context.

00:06:29.040 --> 00:06:32.700
BRADY: Can you see other applications for this, other time-critical things?

00:06:33.500 --> 00:06:35.560
NILSSON: It's been used for games, for example

00:06:39.020 --> 00:06:43.180
and the ideas of reactive programming is seeing increased use for

00:06:44.780 --> 00:06:49.400
banking applications and things and whenever you have this system and they sort of communicate, you can view these

00:06:50.000 --> 00:06:55.460
communications as signals over time and then you can sort of process them using FRP-like ideas

00:06:55.460 --> 00:06:59.800
so it's a quite big takeup. Now FRP is not just one system, it's a lot of different systems

00:07:00.060 --> 00:07:02.140
as it is more of an umbrella term

00:07:02.140 --> 00:07:07.060
and depending on this; exactly what to do, there are different implementations of FRP that are more or less suitable

00:07:07.960 --> 00:07:10.240
but the idea as such has really caught traction.

00:07:10.720 --> 00:07:12.660
Um, and in particalar in a

00:07:13.180 --> 00:07:18.440
distributed setting it is important that that everything is purely functional because if it is not fully functional

00:07:18.840 --> 00:07:19.840
then

00:07:20.400 --> 00:07:26.100
it is very difficult to handle the side effects - but if everything is pure, then every node in this system has a function

00:07:26.100 --> 00:07:28.220
and they communicate by signals.

00:07:28.220 --> 00:07:30.620
it is a very good fit for very complex distributed systems

00:07:31.140 --> 00:07:34.540
BRADY: So is FRP a language or are the languages the...?

00:07:34.960 --> 00:07:35.540
NILSSON: Um

00:07:36.100 --> 00:07:37.360
It's a

00:07:37.600 --> 00:07:40.120
umbrella term for a number of related languages, let's say.

00:07:40.120 --> 00:07:42.060
BRADY: What's next for this project, then?

00:07:42.480 --> 00:07:45.680
We would really want to make it into a tool

00:07:45.680 --> 00:07:48.740
that people can use for example in a large studio setting like this

00:07:49.660 --> 00:07:52.400
Because we think actually this is the only

00:07:52.660 --> 00:07:55.740
software implementation of of the reactagon that we are aware of

00:07:55.860 --> 00:07:58.800
and if people like to compose music in this particular way

00:07:59.000 --> 00:08:05.060
I think it could be a quite nice application, ignoring how it is written, just for an end user to use.

00:08:05.620 --> 00:08:11.300
BRADY: What, you did mention this rectagon, I mean what is that, how does that look normally, is that a piece of hardware or..?

00:08:11.300 --> 00:08:15.780
NILSSON: It is a piece of hardware, yes, you can google "Rectagon"

00:08:15.780 --> 00:08:24.140
You'll find it on Youtube and see this big, impressive table with lots of hardware on it.

00:08:24.140 --> 00:08:28.940
And you can... there are these physical things you can place on all over the board and interact with it.

00:08:29.080 --> 00:08:34.700
That's very cool but this is easier to use, obviously.

00:08:37.260 --> 00:08:38.780
&gt; Right, we've done B

00:08:38.780 --> 00:08:39.740
we can count that as done.

00:08:39.740 --> 00:08:41.300
So, C next

00:08:41.360 --> 00:08:42.720
right, so we are here

00:08:43.040 --> 00:08:44.200
we can't go to S

00:08:44.200 --> 00:08:46.880
we can only go to L, that's a nice, easy one so I need to find L

00:08:47.160 --> 00:08:49.120
so L goes to C

00:08:49.280 --> 00:08:51.400
and it's three plus two, it's five

00:08:51.400 --> 00:08:53.920
so L comes in just underneath A, like this.

