WEBVTT
Kind: captions
Language: en

00:00:08.700 --> 00:00:09.100
Hello.

00:00:09.100 --> 00:00:11.400
My name is Bruno Oliveira, and I
work in the Play Games team.

00:00:11.400 --> 00:00:13.170
Today, we're here to talk
about two of my favorite

00:00:13.170 --> 00:00:15.870
things, which are the Play Games
API and the NDK, and how

00:00:15.870 --> 00:00:17.970
to use those two
to make a game.

00:00:17.970 --> 00:00:20.640
So when you're writing a game
using the Play Games API, you

00:00:20.640 --> 00:00:22.640
normally have to worry about
connecting all of these

00:00:22.640 --> 00:00:24.740
callbacks that the Android
life cycle gives you.

00:00:24.740 --> 00:00:26.990
So we have onCreate, we have
onStart, we have onStop,

00:00:26.990 --> 00:00:29.880
onActivityResult, and several
other callbacks.

00:00:29.880 --> 00:00:32.460
Normally if you're writing a
game that's not native, you

00:00:32.460 --> 00:00:35.110
can usually get away with just
subclassing BaseGameActivity,

00:00:35.110 --> 00:00:37.060
which is a class that we
have in the samples.

00:00:37.060 --> 00:00:38.830
When you subclass
BaseGameActivity, all that

00:00:38.830 --> 00:00:40.500
life cycle is connected
for you.

00:00:40.500 --> 00:00:43.010
Now of course, if you're writing
a native game, as you

00:00:43.010 --> 00:00:44.470
know, you can't subclass
BaseGameActivity.

00:00:44.470 --> 00:00:44.850
Why?

00:00:44.850 --> 00:00:46.480
Because you have to
use NativeActivity

00:00:46.480 --> 00:00:47.950
for a native game.

00:00:47.950 --> 00:00:50.760
So we're going to talk about how
to set up NativeActivity

00:00:50.760 --> 00:00:52.390
to do exactly that.

00:00:52.390 --> 00:00:53.960
So first of all, you
don't have to use

00:00:53.960 --> 00:00:55.010
NativeActivity as it is.

00:00:55.010 --> 00:00:56.150
You can actually subclass it.

00:00:56.150 --> 00:00:57.600
So this is what we do here.

00:00:57.600 --> 00:01:01.520
So before anything, we start
with actually NativeActivity,

00:01:01.520 --> 00:01:03.750
and then we derive our activity
class from it.

00:01:03.750 --> 00:01:06.620
So in this case, our game is
called "Awesome Game." So we

00:01:06.620 --> 00:01:10.030
are deriving AwesomeGameActivity
from

00:01:10.030 --> 00:01:11.110
NativeActivity.

00:01:11.110 --> 00:01:13.020
Since we're going to use
the GameHelper--

00:01:13.020 --> 00:01:14.160
which is also in the samples--

00:01:14.160 --> 00:01:17.640
we also implement
GameHelper.GameHelperListener,

00:01:17.640 --> 00:01:21.000
which is the listener class
that GameHelper uses.

00:01:21.000 --> 00:01:23.310
So next, we declare GameHelper,

00:01:23.310 --> 00:01:24.640
inside of our activity.

00:01:24.640 --> 00:01:26.260
And we're going to have to
manage its life cycle.

00:01:26.260 --> 00:01:28.670
Remember, this is actually done
by BaseGameActivity, But

00:01:28.670 --> 00:01:30.940
it's not actually very hard
to do it yourself.

00:01:30.940 --> 00:01:33.540
To do this, all you have to do--
first of all, you want to

00:01:33.540 --> 00:01:36.040
load your game library, because
it's an NDK game.

00:01:36.040 --> 00:01:38.440
So we're loading the
game library, using

00:01:38.440 --> 00:01:39.770
System.loadLibrary.

00:01:39.770 --> 00:01:43.170
Next we want to hook
up the GameHelper.

00:01:43.170 --> 00:01:46.640
To do this, for example, when
you have onCreate, so first of

00:01:46.640 --> 00:01:48.140
all, you create your
GameHelper here.

00:01:48.140 --> 00:01:51.020
And then what you have to do
is call GameHelper, like

00:01:51.020 --> 00:01:52.450
mHelper.setup.

00:01:52.450 --> 00:01:54.300
And this is when you do the
setup for the GameHelper.

00:01:54.300 --> 00:01:57.690
Here, we're specifying that we
want the GAMES client and we

00:01:57.690 --> 00:01:59.290
also want the APPSTATE client.

00:01:59.290 --> 00:02:02.220
And we're going to use
those in our game.

00:02:02.220 --> 00:02:03.850
After you do onCreate,
all you have to do is

00:02:03.850 --> 00:02:05.060
do the same on onStart.

00:02:05.060 --> 00:02:07.730
So whenever you get the
onStart callback, the

00:02:07.730 --> 00:02:10.160
GameHelper needs to know that
the onStart has happened, so

00:02:10.160 --> 00:02:12.520
this is how you hook it up.

00:02:12.520 --> 00:02:14.660
On onStop, it's been pretty
much the same thing.

00:02:14.660 --> 00:02:17.400
So on onStop, you just call
mHelper.onStop, and that

00:02:17.400 --> 00:02:19.710
connects it correctly.

00:02:19.710 --> 00:02:22.270
Next, you'll also to
onActivityResult.

00:02:22.270 --> 00:02:23.470
You'll do just the same thing.

00:02:23.470 --> 00:02:26.210
You're just calling helper to
notify that, that the result

00:02:26.210 --> 00:02:27.030
has come in.

00:02:27.030 --> 00:02:30.800
Because that's necessary for the
whole sign-in process with

00:02:30.800 --> 00:02:32.190
the dialogues and so on.

00:02:32.190 --> 00:02:34.970
So you need to get the results
to the helper.

00:02:34.970 --> 00:02:37.850
Next, you have to wait for
the sign-in callback.

00:02:37.850 --> 00:02:40.030
So you're going to be notified
that sign-in succeeded or

00:02:40.030 --> 00:02:42.710
failed through the sign-in
callbacks, like

00:02:42.710 --> 00:02:44.570
onSignInSucceeded and
onSignInFailed.

00:02:44.570 --> 00:02:47.390
So that's when you probably
want to notify your native

00:02:47.390 --> 00:02:51.150
code that the sign-in has
succeeded or failed.

00:02:51.150 --> 00:02:55.190
So let's talk about how to
actually do sign-in.

00:02:55.190 --> 00:02:58.470
So first of all, we're not
going to talk into great

00:02:58.470 --> 00:03:00.330
length about the JNI.

00:03:00.330 --> 00:03:02.250
But you have to initialize
the JNI.

00:03:02.250 --> 00:03:04.070
So first of all, you
can do that using

00:03:04.070 --> 00:03:07.190
AttachCurrentThread, and then
have a working attachment to

00:03:07.190 --> 00:03:09.620
the thread that you can
use to make JNI calls.

00:03:09.620 --> 00:03:10.970
Of course, don't forget--
because

00:03:10.970 --> 00:03:12.520
that I made that mistake--

00:03:12.520 --> 00:03:14.260
don't forget to detach
the current thread.

00:03:14.260 --> 00:03:16.140
Otherwise, we're going to get
strange crashes in the

00:03:16.140 --> 00:03:17.210
background.

00:03:17.210 --> 00:03:21.930
After you're done setting up the
JNI, you're probably going

00:03:21.930 --> 00:03:24.090
to want to have a sign-in button
somewhere in your game.

00:03:24.090 --> 00:03:26.580
So the sign-in button pretty
much looks like that.

00:03:26.580 --> 00:03:28.390
You have some liberty
to customize it.

00:03:28.390 --> 00:03:30.920
But when the player clicks on
it, you should start the

00:03:30.920 --> 00:03:32.020
sign-in flow.

00:03:32.020 --> 00:03:34.520
So the sign-in flow is the whole
set of dialogs that the

00:03:34.520 --> 00:03:37.090
player has to click through to
actually authorize your game

00:03:37.090 --> 00:03:38.630
to access the Play Games API.

00:03:38.630 --> 00:03:41.050
So when the user clicks that,
what you want to call--

00:03:41.050 --> 00:03:42.750
this is in Java, of course--
you want to call

00:03:42.750 --> 00:03:45.300
mHelper.beginUserIntiatedSignIn.

00:03:45.300 --> 00:03:46.880
So that's going to begin
the whole sign-in flow.

00:03:46.880 --> 00:03:49.200
However, since are going to be
calling it from the game

00:03:49.200 --> 00:03:51.040
thread- so remember, that the
game is going to be running on

00:03:51.040 --> 00:03:51.910
a separate thread.

00:03:51.910 --> 00:03:52.640
It's not the UI thread.

00:03:52.640 --> 00:03:56.400
So you need to wrap that with
a runOnUIThread call so that

00:03:56.400 --> 00:03:58.720
you can actually call that
method from the game thread

00:03:58.720 --> 00:04:01.080
and have it execute
on the UI thread.

00:04:01.080 --> 00:04:03.960
So this is why we have this
method, which is called

00:04:03.960 --> 00:04:06.860
postStartSignIn, which
essentially can be called from

00:04:06.860 --> 00:04:09.040
any thread and post
to the UI thread.

00:04:09.040 --> 00:04:10.115
And there, we call
mHelper.beginUse

00:04:10.115 --> 00:04:11.365
rInitiatedSignIn.

00:04:13.260 --> 00:04:15.280
Now, let's show how
to actually start

00:04:15.280 --> 00:04:16.295
the flow from C++.

00:04:16.295 --> 00:04:18.470
So nobody's afraid
of JNI, right?

00:04:18.470 --> 00:04:21.490
So this is how we invoke
that method using JNI.

00:04:21.490 --> 00:04:22.600
It's just standard JNI.

00:04:22.600 --> 00:04:26.240
Just get the activity object,
the activity class, and then

00:04:26.240 --> 00:04:29.780
we get the method ID for our
method and then invoke it.

00:04:29.780 --> 00:04:33.390
Notice that when we do this,
we actually sidestep one of

00:04:33.390 --> 00:04:36.480
the major difficulties of using
JNI in Android, which is

00:04:36.480 --> 00:04:39.100
that if you just try to find a
class by name, it's not going

00:04:39.100 --> 00:04:41.180
to find it because it can only
find the actual framework

00:04:41.180 --> 00:04:43.720
classes using FindClass, unless
you do funny stuff with

00:04:43.720 --> 00:04:44.600
class loaders.

00:04:44.600 --> 00:04:46.780
So notice that we are completely
sidestepping this

00:04:46.780 --> 00:04:49.430
whole difficulty by just
using our own activity

00:04:49.430 --> 00:04:50.340
as a starting point.

00:04:50.340 --> 00:04:52.940
So we're using our own activity
and calling method

00:04:52.940 --> 00:04:55.050
that we wrote.

00:04:55.050 --> 00:04:57.610
After we call this, then we
get the sign-in flow.

00:04:57.610 --> 00:05:00.040
All right, so after we do the
sign-in flow, you have to know

00:05:00.040 --> 00:05:02.365
when you're actually signed in
so that your game can respond

00:05:02.365 --> 00:05:04.140
to that appropriately.

00:05:04.140 --> 00:05:07.210
You're going to know that when
on the Java side, you get this

00:05:07.210 --> 00:05:08.700
onSignInSucceeded callback.

00:05:08.700 --> 00:05:11.080
So that's the callback that
tells you that sign-in has

00:05:11.080 --> 00:05:14.620
succeeded, or else that the
sign-in has failed.

00:05:14.620 --> 00:05:17.910
So how do you actually
notify the code?

00:05:17.910 --> 00:05:19.450
Well, you can--

00:05:19.450 --> 00:05:22.700
to notify the native code
that this has happened.

00:05:22.700 --> 00:05:25.100
What you're usually going to
have to do is to write the

00:05:25.100 --> 00:05:28.430
native method that the Java side
can call and then notify

00:05:28.430 --> 00:05:30.110
your native code that
this happened.

00:05:30.110 --> 00:05:32.600
One of the ways to do this--

00:05:32.600 --> 00:05:35.270
actually, I think it's a pretty
useful pattern-- is not

00:05:35.270 --> 00:05:37.250
to have just a Boolean
saying yes or no.

00:05:37.250 --> 00:05:40.110
It's actually to have a
three-state variable, saying

00:05:40.110 --> 00:05:43.410
either sign-in has failed,
sign-in has succeeded, or

00:05:43.410 --> 00:05:45.060
sign-in is in progress.

00:05:45.060 --> 00:05:46.980
And then from native code, you
can react appropriately to

00:05:46.980 --> 00:05:48.120
those states.

00:05:48.120 --> 00:05:50.470
So we're declaring these states
as constants here.

00:05:50.470 --> 00:05:53.450
And then we're also the
declaring a native method from

00:05:53.450 --> 00:05:55.990
Java, which is report
sign-in results.

00:05:55.990 --> 00:05:57.680
And we're going to call that
method whenever we want to

00:05:57.680 --> 00:06:01.890
report a sign-in result or
progress to native code.

00:06:01.890 --> 00:06:02.690
So this is how we do it.

00:06:02.690 --> 00:06:06.940
So when we are on onStart,
we say that

00:06:06.940 --> 00:06:07.920
sign-in is in progress.

00:06:07.920 --> 00:06:08.140
Why?

00:06:08.140 --> 00:06:10.870
Because every time your
application gets an onStart,

00:06:10.870 --> 00:06:12.630
like comes back from the
background or anything like

00:06:12.630 --> 00:06:15.070
that, sign-in is
not ready yet.

00:06:15.070 --> 00:06:17.200
So sign-in is in progress,
because Play

00:06:17.200 --> 00:06:20.130
Games API has to reconnect.

00:06:20.130 --> 00:06:22.190
It's only when you get
onSignInSucceeded after

00:06:22.190 --> 00:06:24.220
onStart that you can actually
start to make calls.

00:06:24.220 --> 00:06:26.460
So whenever you get onStart,
this is when you report to

00:06:26.460 --> 00:06:31.130
native code that the sign-in
is currently in progress.

00:06:31.130 --> 00:06:33.390
Then, of course, when you get
onStop it's the same thing.

00:06:33.390 --> 00:06:36.420
You also say that sign-in is
in progress, even though it

00:06:36.420 --> 00:06:37.830
had succeeded before.

00:06:37.830 --> 00:06:38.030
Why?

00:06:38.030 --> 00:06:40.950
Because when you get onStop,
sign-in is no longer working,

00:06:40.950 --> 00:06:44.490
and it's in progress because
it's going to come back later.

00:06:44.490 --> 00:06:45.740
Then when we onSignIn--

00:06:47.750 --> 00:06:49.930
actually, when you start the
sign-in process using

00:06:49.930 --> 00:06:52.390
postStartSignIn, which is the
method that we just showed,

00:06:52.390 --> 00:06:55.370
you also say that it's in
progress because, well, the UI

00:06:55.370 --> 00:06:56.390
flow is happening right now.

00:06:56.390 --> 00:06:57.930
And at the end of it, you're
going to get on sign-in

00:06:57.930 --> 00:07:00.320
succeeded or failed.

00:07:00.320 --> 00:07:02.770
Next, of course, when you get
onSignInSucceeded, that's when

00:07:02.770 --> 00:07:04.970
you report that the sign-in
state is success.

00:07:04.970 --> 00:07:06.680
When you get onSignInFailed,
you report that

00:07:06.680 --> 00:07:07.950
sign-in was a failure.

00:07:07.950 --> 00:07:10.820
And then your native code is
going to have to know how to

00:07:10.820 --> 00:07:13.940
handle those states.

00:07:13.940 --> 00:07:17.870
So next, how do you actually
handle this from native code?

00:07:17.870 --> 00:07:20.460
It's just a JNI native method.

00:07:20.460 --> 00:07:23.290
So all you have to do is write
that method signature, that

00:07:23.290 --> 00:07:25.550
you can generate with Java H.

00:07:25.550 --> 00:07:28.380
And then when that method gets
called, all you have to do is

00:07:28.380 --> 00:07:30.110
react to that.

00:07:30.110 --> 00:07:33.070
One caveat is that you're going
to be running on the UI

00:07:33.070 --> 00:07:34.050
thread on that method.

00:07:34.050 --> 00:07:37.230
So be careful not to try to
manipulate your game state and

00:07:37.230 --> 00:07:39.890
so on in a way that may clash
with your game thread.

00:07:39.890 --> 00:07:44.560
So usually, one of the useful
methods there is just to use

00:07:44.560 --> 00:07:47.620
some sort of synchronization,
or write to a write-once

00:07:47.620 --> 00:07:48.940
variable, or something
like that.

00:07:48.940 --> 00:07:50.750
But it's important to note is
that it's going to be on the

00:07:50.750 --> 00:07:52.970
UI thread, so don't do
anything funny there.

00:07:52.970 --> 00:07:56.180
All right, so that's pretty
much all there is for this

00:07:56.180 --> 00:07:57.560
first episode.

00:07:57.560 --> 00:07:59.970
Please watch the other ones,
Because then we're going to go

00:07:59.970 --> 00:08:01.200
more in depth into
achievements.

00:08:01.200 --> 00:08:04.570
Leaderboards, and to how we
can actually do this on a

00:08:04.570 --> 00:08:05.930
deeper level.

00:08:05.930 --> 00:08:07.180
Thank you very much.

