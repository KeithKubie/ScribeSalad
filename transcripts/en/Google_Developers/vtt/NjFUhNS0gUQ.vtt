WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:07.291
[MUSIC PLAYING]

00:00:07.291 --> 00:00:07.832
Hi, everyone.

00:00:07.832 --> 00:00:08.332
I'm Nathan.

00:00:08.332 --> 00:00:10.664
I'm part of the
Cardboard VR team.

00:00:10.664 --> 00:00:13.160
And as many of you know
we created Cardboard

00:00:13.160 --> 00:00:16.500
with one simple idea, to
let everyone in the world

00:00:16.500 --> 00:00:18.930
get a great VR
experience using nothing

00:00:18.930 --> 00:00:20.640
more than the phone
in their pocket

00:00:20.640 --> 00:00:24.025
and the world's most
inexpensive HMD.

00:00:24.025 --> 00:00:26.580
Now, that sounds simple
and of course executing

00:00:26.580 --> 00:00:28.730
that is harder than it sounds.

00:00:28.730 --> 00:00:32.589
And the main challenge is that
when you build VR for everyone,

00:00:32.589 --> 00:00:35.210
you find out that most
people have everyday phones

00:00:35.210 --> 00:00:37.775
and you need to build
apps that work on them.

00:00:37.775 --> 00:00:40.390
Well if you look at amongst
our Cardboard users today,

00:00:40.390 --> 00:00:44.125
two of the most popular phones
are the brand new Nexus 6P

00:00:44.125 --> 00:00:47.419
and the Samsung
Galaxy S4 from 2013.

00:00:47.419 --> 00:00:49.210
And of course when you
think about covering

00:00:49.210 --> 00:00:52.590
that range of devices in VR, the
number one thing we think about

00:00:52.590 --> 00:00:54.030
is simulator sickness, right.

00:00:54.030 --> 00:00:56.300
If older phones mean
lower performance,

00:00:56.300 --> 00:00:58.130
lower performance
means higher latency,

00:00:58.130 --> 00:01:00.060
higher latency makes
users sick and we never

00:01:00.060 --> 00:01:02.140
want to make users sick.

00:01:02.140 --> 00:01:04.750
There's another, I think,
more fundamental challenge

00:01:04.750 --> 00:01:08.190
for those of us building VR
experiences on mobile devices.

00:01:08.190 --> 00:01:11.030
And that's that we want
to make experiences

00:01:11.030 --> 00:01:13.620
for devices that
run on batteries

00:01:13.620 --> 00:01:17.890
and make them just as
compelling as VR experiences

00:01:17.890 --> 00:01:20.030
that are meant to run
on devices that connect

00:01:20.030 --> 00:01:21.920
to your local power plant.

00:01:21.920 --> 00:01:24.890
Covering this performance
and fundamentally energy gap

00:01:24.890 --> 00:01:27.970
is a really important part
of making great mobile VR

00:01:27.970 --> 00:01:28.712
for everyone.

00:01:28.712 --> 00:01:30.170
We've learned a
lot about how to do

00:01:30.170 --> 00:01:32.003
this over the last
couple of years at Google

00:01:32.003 --> 00:01:34.740
and I'm going to share three
techniques with you today.

00:01:34.740 --> 00:01:38.500
The first one has to do
with lens distortion.

00:01:38.500 --> 00:01:42.330
So lenses are what make
essentially VR possible.

00:01:42.330 --> 00:01:44.640
They're what allow you to
take a screen that's just

00:01:44.640 --> 00:01:46.530
a couple of inches
from your eyeballs

00:01:46.530 --> 00:01:50.180
and feel like you're looking
out onto an expansive world.

00:01:50.180 --> 00:01:51.834
But they have a
downside, and that's

00:01:51.834 --> 00:01:54.382
that these lenses
actually warp the picture

00:01:54.382 --> 00:01:55.340
that you're looking at.

00:01:55.340 --> 00:01:59.070
When you view VR through a lens,
what should be a straight line

00:01:59.070 --> 00:02:00.330
becomes curved.

00:02:00.330 --> 00:02:02.120
And the way you fix
this is actually you

00:02:02.120 --> 00:02:05.410
counter-warp your image, which
most people do in two passes.

00:02:05.410 --> 00:02:07.900
You render your image
normally and then

00:02:07.900 --> 00:02:09.880
you use post-processing
to counter-warp

00:02:09.880 --> 00:02:11.590
it to compensate for the lens.

00:02:11.590 --> 00:02:14.160
But of course two
passes is twice as slow

00:02:14.160 --> 00:02:17.150
as one pass, especially on
mobile GPUs which are really,

00:02:17.150 --> 00:02:18.610
really bandwidth constrained.

00:02:18.610 --> 00:02:21.570
So a better solution is to
do your warping actually

00:02:21.570 --> 00:02:22.970
in the vertex shader.

00:02:22.970 --> 00:02:24.530
Everything that you
can do per pixel

00:02:24.530 --> 00:02:27.369
you can actually do per vertex,
as long as your geometry is

00:02:27.369 --> 00:02:28.535
reasonably well tessellated.

00:02:28.535 --> 00:02:30.399
And for most game
developers out there,

00:02:30.399 --> 00:02:32.190
your geometry is already
tessellated enough

00:02:32.190 --> 00:02:34.029
for this technique to work.

00:02:34.029 --> 00:02:36.570
The second thing I want to talk
to you about a spatial audio.

00:02:36.570 --> 00:02:38.486
And one of my favorite
game development quotes

00:02:38.486 --> 00:02:41.000
is, music makes you feel,
sound makes it real.

00:02:41.000 --> 00:02:42.750
And I think there's
no medium where that's

00:02:42.750 --> 00:02:44.730
more true than virtual reality.

00:02:44.730 --> 00:02:47.880
So if you want to really create
an efficient sense of presence

00:02:47.880 --> 00:02:51.440
in your VR apps and games,
go for broke with the audio.

00:02:51.440 --> 00:02:54.210
But when you do, keep
two things in mind.

00:02:54.210 --> 00:02:57.060
The first is you want to use
really good spatialization.

00:02:57.060 --> 00:02:58.960
Most game developers
are familiar with stereo

00:02:58.960 --> 00:03:01.400
panning where you hear
louder sounds from the left

00:03:01.400 --> 00:03:02.170
or from the right.

00:03:02.170 --> 00:03:04.211
But in VR you want to use
binaural spatialization

00:03:04.211 --> 00:03:06.694
so that you can hear sounds
above you and below you,

00:03:06.694 --> 00:03:09.110
in front of you and behind you
and really feel like you're

00:03:09.110 --> 00:03:10.992
immersed in the soundscape.

00:03:10.992 --> 00:03:12.700
The second thing you
want to do is really

00:03:12.700 --> 00:03:14.400
think about the
environment within

00:03:14.400 --> 00:03:16.260
in which your sound takes place.

00:03:16.260 --> 00:03:18.140
Obviously this talk
that I'm giving

00:03:18.140 --> 00:03:20.740
would sound very different
if it was in a cave instead

00:03:20.740 --> 00:03:22.260
of this big open hall.

00:03:22.260 --> 00:03:23.760
So when you're
modeling your sounds,

00:03:23.760 --> 00:03:25.542
model not just
the spatialization

00:03:25.542 --> 00:03:27.000
but the environmental
rendering and

00:03:27.000 --> 00:03:31.070
environmental characteristics
that your game is set in.

00:03:31.070 --> 00:03:34.240
Lastly, I want to talk to
you about HD 360 video.

00:03:34.240 --> 00:03:37.360
VR video is an incredibly
powerful narrative device.

00:03:37.360 --> 00:03:39.400
If you want to quickly
tell a story in VR

00:03:39.400 --> 00:03:41.000
or create a sense
of presence, there's

00:03:41.000 --> 00:03:44.700
no better way to do that
than using 360 VR video.

00:03:44.700 --> 00:03:47.940
The challenge is that VR
video is really demanding.

00:03:47.940 --> 00:03:49.410
It needs a very high resolution.

00:03:49.410 --> 00:03:52.292
You want to have it
like 3K or 4K on a side.

00:03:52.292 --> 00:03:54.120
And it's a really high bit rate.

00:03:54.120 --> 00:03:56.480
Good VR starts at
about 2.5 megabytes

00:03:56.480 --> 00:04:00.040
per second, which is a lot to
pack into your APK or to stream

00:04:00.040 --> 00:04:01.166
from your server.

00:04:01.166 --> 00:04:02.540
There's a bigger
problem actually

00:04:02.540 --> 00:04:04.790
which is that a lot of
phones can't actually

00:04:04.790 --> 00:04:07.710
decode video higher than 1080p.

00:04:07.710 --> 00:04:09.672
So even if you
have great content

00:04:09.672 --> 00:04:11.130
and you've packed
it into your APK,

00:04:11.130 --> 00:04:12.880
some phones won't be
able to handle it.

00:04:12.880 --> 00:04:14.255
To solve that
problem we're going

00:04:14.255 --> 00:04:16.829
to cheat like crazy in this way.

00:04:16.829 --> 00:04:19.560
So the first thing to realize
is that most video is actually

00:04:19.560 --> 00:04:20.680
largely static.

00:04:20.680 --> 00:04:22.850
In this example video
frame the gorilla is moving

00:04:22.850 --> 00:04:24.920
and we're really interested
in his movements,

00:04:24.920 --> 00:04:27.340
but the trees in the background
are functionally static.

00:04:27.340 --> 00:04:30.700
So we'll start with a single
static frame of our video.

00:04:30.700 --> 00:04:32.560
And then we can actually
build video just

00:04:32.560 --> 00:04:34.160
of the interesting
parts that move

00:04:34.160 --> 00:04:36.510
by stacking the moving section
of the left eye and right

00:04:36.510 --> 00:04:37.930
eye on top of each other.

00:04:37.930 --> 00:04:39.974
You combine that with
a static alpha mask,

00:04:39.974 --> 00:04:41.640
because video on
mobile doesn't actually

00:04:41.640 --> 00:04:43.180
support an alpha channel.

00:04:43.180 --> 00:04:45.600
And then you can build a little
simple optical compositor

00:04:45.600 --> 00:04:48.720
to composite the static
background of the dynamic movie

00:04:48.720 --> 00:04:52.134
video pieces, project those
onto a sphere for either eye,

00:04:52.134 --> 00:04:54.300
and congratulations, now
you have highly compatible,

00:04:54.300 --> 00:04:57.040
highly performing,
10:1 compressed VR

00:04:57.040 --> 00:04:57.957
video for smartphones.

00:04:57.957 --> 00:05:00.540
If you're interested in learning
more about any of this stuff,

00:05:00.540 --> 00:05:02.030
please check out
the Cardboard SDK

00:05:02.030 --> 00:05:03.545
online, which has
examples and code

00:05:03.545 --> 00:05:04.670
support for all this stuff.

00:05:04.670 --> 00:05:07.256
And with that I'll introduce
my colleague, Eiton.

00:05:07.256 --> 00:05:15.150
[MUSIC PLAYING]

