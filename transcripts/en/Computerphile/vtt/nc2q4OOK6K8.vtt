WEBVTT
Kind: captions
Language: en-GB

00:00:00.000 --> 00:00:04.830
We're basically using the EDSAC as a
classic example of a very early von

00:00:04.830 --> 00:00:09.150
Neumann computer. And to the great
credit of Cambridge, I mean, they did get

00:00:09.150 --> 00:00:17.369
it working by, I think it was April-May
1949, something like that. And it went on

00:00:17.369 --> 00:00:20.970
to great glory afterwards and
calculations on there, from many

00:00:20.970 --> 00:00:24.510
Cambridge scientists ... I mean it's no
exaggeration to say Nobel Prizes were

00:00:24.510 --> 00:00:31.769
won because of the availability of 
EDSAC in all sorts of areas.

00:00:31.769 --> 00:00:37.590
We're going to take a look and try and
answer this question of: "How on earth do you get this

00:00:37.590 --> 00:00:42.660
wretched EDSAC to boot up ?!" And with
the help of Martin Campbell-Kelly's

00:00:42.660 --> 00:00:47.879
emulator we're going to be able
to show you something of that, because

00:00:47.879 --> 00:00:55.680
what I want to do is to describe how the
initial boot programs ... first stab at it

00:00:55.680 --> 00:00:59.430
was called Initial Orders I, ssecond stab
was called Initial Orders II -

00:00:59.430 --> 00:01:06.390
written by a really bright guy who was
the PhD student of Maurice Wilkes (who led

00:01:06.390 --> 00:01:10.380
the EDSAC team of course). That chap's
name was David Wheeler - a really nice

00:01:10.380 --> 00:01:15.930
chap. I did know him, only slightly, but
he was fearfully bright and always good

00:01:15.930 --> 00:01:21.630
for a chat about low-level issues like
this, about how did you get this wretched

00:01:21.630 --> 00:01:29.369
thing to work given that, I suspect -
inherited on EDSAC but feeding back into

00:01:29.369 --> 00:01:34.409
early things, again, like Tommy Flowers'
"Colossus" -  how do you get a bit

00:01:34.409 --> 00:01:38.310
pattern in here to tell it what to
do? Because if you once get the bit

00:01:38.310 --> 00:01:43.290
pattern in, the electronics the logic and
everything inside it will execute it

00:01:43.290 --> 00:01:46.200
correctly, that will have been checked
out, but how do you get the wretched

00:01:46.200 --> 00:01:51.600
things in? And the answer certainly on
the Colossus machine was you used a set

00:01:51.600 --> 00:01:56.969
of what were called Uniselectors to
set up the 1s and 0s. And by having

00:01:56.969 --> 00:02:02.610
enough Uniselectors plus usually a
sort of `load' lever, to load it into the

00:02:02.610 --> 00:02:06.509
current location in memory. Then you had
to have an automated way inside the

00:02:06.509 --> 00:02:11.220
hardware of stepping on to the next word
to be loaded.

00:02:11.220 --> 00:02:16.629
People like me didn't use Uniselectors
but learnt this when you booted up an

00:02:16.629 --> 00:02:20.620
early PDP-11, even as late as the 60s and 70s.

00:02:20.620 --> 00:02:24.280
It wasn't Uniselectors, it was hand-
keys on [the] front of the panel. I  think we've

00:02:24.280 --> 00:02:28.989
shown those once or twice [in previous videos]. 
Same thing: "up" for a "1"; down for a "0"zero; 
boom boom boom

00:02:28.989 --> 00:02:36.670
boom  - Load.  another pattern; Load; another
pattern; Load. It's bad enough loading up a

00:02:36.670 --> 00:02:41.950
little boot program. It's unthinkable to
load in an entire multi-kilobyte program

00:02:41.950 --> 00:02:47.920
that way. But on the basis of hand
switches and Uniselectors in this case,

00:02:47.920 --> 00:02:54.250
yes, these wonderful Initial Orders II
and Initial Orders I were loaded in

00:02:54.250 --> 00:02:58.720
from Uniselectors. Once you've
downloaded Martin's emulator, it comes

00:02:58.720 --> 00:03:02.860
with a Tutorial Guide and it makes it
very clear in there that, on the actual

00:03:02.860 --> 00:03:06.970
EDSAC, when you want you to load
Initial Orders you just press a button !

00:03:06.970 --> 00:03:13.150
&gt;&gt; Andy Herbert - [director EDSAC rebuild project]
"John is working here on the Uniselector units I 
talked about the boot

00:03:13.150 --> 00:03:18.700
ROM or the Initial Instructions. Those
are coded by how he's wired up these Uniselectors.

00:03:18.700 --> 00:03:24.579
When the operator presses the
start button a rotor spins in here and

00:03:24.579 --> 00:03:29.019
as it passes each set of contacts that
gets injected into the memory to download

00:03:29.019 --> 00:03:35.280
the program". 
&gt;&gt; DFB: To give some idea - the Initial Orders,
 I think, were about 42 words !

00:03:35.280 --> 00:03:44.169
Not 42K. Not 42 Meg - like it might be on
a modern BIOS - 42 words! Because memory

00:03:44.169 --> 00:03:49.150
was fantastically precious.  
&gt;&gt; Sean: What was a `word' then? Is that a 16-bit ....

00:03:49.150 --> 00:03:56.859
&gt;&gt; DFB: Well, actually it was 18 bits in EDSAC but,
basically, yeah. An 18-bit word could be

00:03:56.859 --> 00:04:01.209
loaded in and you could load the whole
thing in by hand. But you wouldn't want

00:04:01.209 --> 00:04:06.510
to! So, here's the challenge then, there's
all this memory here, in mercury,

00:04:06.510 --> 00:04:13.510
available. What you want is something
sitting down at the bottom of memory to

00:04:13.510 --> 00:04:19.599
help you get bit patterns in - off paper
tape. OK? So that will be your boot

00:04:19.599 --> 00:04:22.430
program now that's the kind of thing sitting

00:04:22.430 --> 00:04:25.970
in low memory which nowadays is the BIOS.
And it's a heck of a sight more

00:04:25.970 --> 00:04:31.610
complicated than the Initial Orders I.
So, what David Wheeler for Initial

00:04:31.610 --> 00:04:37.100
Orders I - just to get us started - early
1949: "I will write a set of Initial

00:04:37.100 --> 00:04:42.280
Orders that sits there, all the time. And
other people's tapes that come along, I

00:04:42.280 --> 00:04:47.060
want to say two things to them: first of
all please do not trample all over my

00:04:47.060 --> 00:04:51.889
Initial Orders that have been pre-loaded.
Don't go into very low memory addresses,

00:04:51.889 --> 00:04:56.960
like zero, and start trying to overwrite
it - this will] kill the program stone-dead.

00:04:56.960 --> 00:05:02.870
But starting from, I think, he finished at 42
with his Initial Orders. But to allow for

00:05:02.870 --> 00:05:07.490
future expansion I think the
recommendation was to start off at location

00:05:07.490 --> 00:05:12.080
64 in memory? 64 and above. you put your
program there.

00:05:12.080 --> 00:05:18.770
I will now help you load it because when
you put your paper tape in, it will be my

00:05:18.770 --> 00:05:23.470
Initial Orders I that is asking to
read your tape, character by character.

00:05:23.470 --> 00:05:29.599
OK? And initially, in Initial Orders I,
he said, I will do the following. If you

00:05:29.599 --> 00:05:35.240
type `A', I know that A is a certain bit
pattern meaning ADD and I will put that

00:05:35.240 --> 00:05:42.949
in the correct field of the correct word
for you. You may then want to write an

00:05:42.949 --> 00:05:50.510
explicit decimal number to be added, like
10.  To save your brain I will translate

00:05:50.510 --> 00:05:54.979
your decimal numbers in your
instructions into binary. So there's two

00:05:54.979 --> 00:06:00.460
things I'm doing for you: I'm
translating the opcode; I'm translating

00:06:00.460 --> 00:06:05.300
obviously decimal numbers into binary
and I am keeping track of where I'm

00:06:05.300 --> 00:06:11.300
loading them for you into memory, I will
start - if you say start at 64 I'll start

00:06:11.300 --> 00:06:16.490
at 64 - and I'll put them in successively,
one after the other. 
&gt;&gt; Sean: So far it sounds to

00:06:16.490 --> 00:06:21.080
me like he's doing the job of a modern
CPU with registers and an interpreter to

00:06:21.080 --> 00:06:25.880
interpret the code ... ?
&gt;&gt; DFB: Yeah, it's like a very
elementary assembler but whereas with

00:06:25.880 --> 00:06:28.820
assembly it's a two-pass process: you run
the assembler - then you've got your binary.

00:06:28.820 --> 00:06:34.790
Here you're using assembly codes
to make your own binary on-the-fly

00:06:34.790 --> 00:06:37.970
&gt;&gt; Sean: Is this the great-grandfather of the 
operating system then?
&gt;&gt; DFB: Oh yeah

00:06:37.970 --> 00:06:41.900
The great-great-great-grandfather of the
operating system!   First of all we are

00:06:41.900 --> 00:06:46.280
starting with a loader because that's
all this is. It loads into memory but

00:06:46.280 --> 00:06:52.510
it's very crude, Initial Orders I, right?
What drove people mad about it was that

00:06:52.510 --> 00:06:57.410
unfortunately you had to be in control
of your [absolute] addresses. Because if your

00:06:57.410 --> 00:07:04.910
program said "jump to location 70" -  you
started at 64, fine, but what happens if you

00:07:04.910 --> 00:07:12.190
want to intervene [insert] a few more orders 
- a few more instructions - between 64 and 70?

00:07:12.190 --> 00:07:16.580
You've got to [potentially] alter all the
addresses in your program. Because what

00:07:16.580 --> 00:07:21.350
was at 70 - where you wanted to go to - is
now at 76. So you've got to go and say:

00:07:21.350 --> 00:07:28.130
"Don't jump to 70, jump to 76". So, although
it was a loader it couldn't do anything

00:07:28.130 --> 00:07:34.040
much about being at all adaptive, or
helping you to *relocate*,  as it was called.

00:07:34.040 --> 00:07:39.980
So, this was realized very quickly - that
any alteration to your program involved

00:07:39.980 --> 00:07:44.680
changing all your addresses on the tape.
So, Initial Orders II:  David Wheeler

00:07:44.680 --> 00:07:49.790
became celebrated throughout the computer
science world for this. He only in his

00:07:49.790 --> 00:07:54.950
life ever published 11 papers, did David, 
but he was still an FRS [Fellow of the Royal Society].

00:07:54.950 --> 00:08:00.590
That's how much he was rated I remember meeting
Don Knuth saying, you know, who have

00:08:00.590 --> 00:08:05.960
you met recently? What have you been doing?
I said "I saw David Wheeler". "Not D.J. Wheeler?!" he

00:08:05.960 --> 00:08:13.820
said. You know: R-E-S-P-E-C-T ! Initial Orders II !
I mean, yes, David was really celebrated

00:08:13.820 --> 00:08:18.470
for this. It seems obvious now but it
certainly was not obvious at the time.

00:08:18.470 --> 00:08:23.240
Everybody: "Wow - your Initial Orders II - is 
going to help

00:08:23.240 --> 00:08:31.280
us be able to alter the program. And just
feed the tape in again without changing

00:08:31.280 --> 00:08:37.430
all of the addresses! All we have to do is
to change the load point [base address] at the top,

00:08:37.430 --> 00:08:42.290
say, or something like that.
Maybe we don't want to put it at 64, we

00:08:42.290 --> 00:08:48.230
want to put it somewhere else. But what
David Wheeler said was:

00:08:48.230 --> 00:08:56.840
So long as you, throughout your orders,
indicate and flag up to me the addresses

00:08:56.840 --> 00:09:01.940
that will need changing. I will keep
track of them and I will alter them for you.

00:09:01.940 --> 00:09:08.630
&gt;&gt; Sean: Are these like variables then?
&gt;&gt; DFB: Yeah! They ... basically it was doing what

00:09:08.630 --> 00:09:13.220
modern assemblers can do anyway, but very
early on. Saying no matter where you

00:09:13.220 --> 00:09:17.810
choose to place this in memory. you might
want to put it at 128 or

00:09:17.810 --> 00:09:22.310
256, or anywhere. Just tell me and I
will load it there. And I will fix up all

00:09:22.310 --> 00:09:27.530
the addresses. You can just sort of say,
like, 0, 1, 2 if you like. But I will

00:09:27.530 --> 00:09:32.810
add on 64 to them, or 128 added
on, or whatever you want. All you must

00:09:32.810 --> 00:09:38.270
do is flag up to me the addresses that
need to be altered - in a special way that

00:09:38.270 --> 00:09:44.500
my Initial Orders understand. And it just
revolutionized the use of EDSAC because

00:09:44.500 --> 00:09:50.810
what, of course, every computer scientist
wants to do - and admittedly this was not

00:09:50.810 --> 00:09:55.010
done in 1949 it was done recently - is get
your computer to say "Hello World".

00:09:55.010 --> 00:09:59.750
Well, there's a contributed program here [for the
simulator] that, for the sake of brevity, just gets it to

00:09:59.750 --> 00:10:05.540
say "HI". And perhaps you want to run "HI"
first and then say: "How the heck does

00:10:05.540 --> 00:10:10.610
Initial Orders II enable this to be
loaded in and to work correctly?" So, here

00:10:10.610 --> 00:10:17.720
we go then. This is the program that we'll
first of all load, when I say "Start". 

00:10:17.720 --> 00:10:22.280
"Start" loads the program that is showing in your
window on the left. It has loaded in the

00:10:22.280 --> 00:10:27.530
"HI" program. However with my 
fading memory of EDSAC codes I can see

00:10:27.530 --> 00:10:33.650
that the third instruction, ZF, means
"Stop". That was a very common trick to use

00:10:33.650 --> 00:10:39.950
in an EDSAC program, is make it stop in
its execution, early on. Because then you

00:10:39.950 --> 00:10:44.360
can check in your peep...  - your peephole
into the tanks. Does it look plausible?

00:10:44.360 --> 00:10:49.850
Does all of this stuff here look like a
binary interpretation of all your

00:10:49.850 --> 00:10:54.020
elementary assembler op-codes? 
&gt;&gt; Sean: And people would know what to see?
&gt;&gt; DFB: Oh! they know what

00:10:54.020 --> 00:10:58.180
to see. Oh yes! you can look in there saying: 
"Ooh! looks like an ADD instruction to me!"

00:10:58.180 --> 00:11:05.110
Yes, so there we are. Now that's
stopped here but what you can now do is

00:11:05.110 --> 00:11:09.730
to single-shot it. Those of you, again
in assembler will know, you often have a

00:11:09.730 --> 00:11:13.870
single-shot capability for debugging.
&gt;&gt; Sean: This is like a step through is it?

00:11:13.870 --> 00:11:20.020
&gt;&gt; DFB: Yeah! just to step through. But with a bit of luck -
Single EP. Ah! got a cursor now! 

00:11:20.020 --> 00:11:27.760
If I "Single EP" again, look, it's printing the
letter `H'. Single-shot again, `HI'. So I think

00:11:27.760 --> 00:11:30.970
one of the exercises in Martin's
instructions - I encourage you all to do

00:11:30.970 --> 00:11:35.290
it - just to get it to actually say "HELLO
WORLD". Just make a bit longer. But here,

00:11:35.290 --> 00:11:40.200
when we look at the program, we can see
an awful lot of what is actually

00:11:40.200 --> 00:11:46.930
happening here. It's saying "Stop" but then
it goes on to actually outputting the

00:11:46.930 --> 00:11:53.589
message. How does it do it? It uses an `O'
(output) instruction. And that is part of

00:11:53.589 --> 00:11:57.670
the EDSAC opcode. It basically means
"punch this to tape", which is the way it

00:11:57.670 --> 00:12:02.680
would have come out initially. With this
@ symbol - that was one of the signals to

00:12:02.680 --> 00:12:09.070
David Wheeler's Initial Orders. This is a
relative address not an absolute one, and

00:12:09.070 --> 00:12:14.230
I want you to adjust it for me.
And because, right at the top, we've said

00:12:14.230 --> 00:12:21.339
T 64 K - for assembler programmers that's
like saying ORG = 64, in many

00:12:21.339 --> 00:12:26.320
assemblers.  But here its starting point
is 64. But look at this

00:12:26.320 --> 00:12:35.529
`O5@'  means output the thing that
is five locations beyond where I

00:12:35.529 --> 00:12:43.779
currently am [correction: 5 beyond the base pointer]
The `@' says you've got to add on the baseline [of 64] 
now, to the 5, [to give] 69.

00:12:43.779 --> 00:12:51.640
So, down here, then, what it does first of all
is it outputs `*F'. That is the code

00:12:51.640 --> 00:12:57.490
that says `turn [change] into letter shift'. 
Now if you go back and watch my previous 

00:12:57.490 --> 00:13:02.020
5-hole paper tape program you'll find that,
whether it's Baudot code or EDSAC code,

00:13:02.020 --> 00:13:07.029
you have to make sure - if you want to
print out letters - be doubly sure you are

00:13:07.029 --> 00:13:10.760
in Letter shift not in Figure shift and vice-versa.

00:13:10.760 --> 00:13:15.710
Otherwise it will all look like junk. So
here is the code in EDSAC that says `turn

00:13:15.710 --> 00:13:21.740
me into Letter shift' and make sure. Next
instruction beyond here says output the

00:13:21.740 --> 00:13:27.950
thing that is six beyond this location 
[i.e 6 beyond the base pointer] 
When you look there, right, it just says `HF'
[i.e. put the bit pattern for `H' as data in this address]  

00:13:27.950 --> 00:13:35.840
So, in other words the letters H and I,
that are to be output, are being picked

00:13:35.840 --> 00:13:43.490
up as data from instructions further
down and are being output by using this

00:13:43.490 --> 00:13:49.900
memory relocation [and offset] capability. So that's
all you have to do is to put down

00:13:49.900 --> 00:13:56.000
asterisk -  shortcut in EDSAC for saying
`switch to letter shift';  print the letter

00:13:56.000 --> 00:14:02.810
H;  print the letter I. But it's all done
very carefully by adjusting these

00:14:02.810 --> 00:14:12.740
addresses here to actually be 69, 70 and
71 in real life. And if you do that you

00:14:12.740 --> 00:14:18.320
then say output the bit pattern that is
in 69. It's a `change to letter shift' request.

00:14:18.320 --> 00:14:23.630
Do the one in 70 - it's the letter
`H' because I've planted that there [as data]
And so on.

00:14:23.630 --> 00:14:29.930
So, I hope that if you work through that,
very painfully, you can see that just

00:14:29.930 --> 00:14:34.430
that ability to use relative offsets, yeah,

00:14:34.430 --> 00:14:40.310
rather than absolute addresses means
that the amount of rewriting of your

00:14:40.310 --> 00:14:45.020
program - just because it gets bigger - can
be greatly minimized. So, what is Initial

00:14:45.020 --> 00:14:51.890
Orders II ?  It's arguably the world's first,
elementary, relocating loader. It is

00:14:51.890 --> 00:14:57.230
keeping your program well away from
trampling on Initial Orders II, but it's

00:14:57.230 --> 00:15:02.120
relying on Initial Orders II for
translation  (well you don't even need to

00:15:02.120 --> 00:15:07.490
translate opcodes into binary they are
[already in] binary), decimal-to-binary conversion 

00:15:07.490 --> 00:15:16.580
and now relocation. All done for you. And all
in much less than 64 words. So that's why

00:15:16.580 --> 00:15:21.060
it's so celebrated!

