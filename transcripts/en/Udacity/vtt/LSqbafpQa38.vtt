WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
Here's one last topic, I'd like to cover in this unit.

00:00:03.000 --> 00:00:06.000
And again, it's related to the analysis of graphs and paths,

00:00:06.000 --> 00:00:11.000
and using variance of depth-first and breadth-first search to answer questions about the graph.

00:00:11.000 --> 00:00:16.000
Here's a little graph that I drew and one thing that we might notice is that,

00:00:16.000 --> 00:00:20.000
everybody is connected to everybody else, but there is this sort of weak edge.

00:00:20.000 --> 00:00:23.000
This is the weakest link, hello.

00:00:23.000 --> 00:00:27.000
If this edge were to be removed from the graph, like so,

00:00:27.000 --> 00:00:30.000
the number of components in the graph has just gone up by one.

00:00:30.000 --> 00:00:33.000
Now, that was the only edge in this graph that has that property.

00:00:33.000 --> 00:00:36.000
There's other edges that if we take them out, things are still connected.

00:00:36.000 --> 00:00:39.000
So, in some social networks, it's useful to know, are there any edges in this graph?

00:00:39.000 --> 00:00:43.000
Are there any pairs of people in the graph that are connected

00:00:43.000 --> 00:00:48.000
that if they were to say, stop being friends, there would be disconnection in the network as a whole.

00:00:48.000 --> 00:00:52.000
Let's put this edge back in and label the edges, sorry, label the

00:00:52.000 --> 00:00:55.000
nodes of the graph so we can talk about them.

00:00:55.000 --> 00:00:59.000
And we're going to carry an algorithm back to 1974 by Robert Tarjan.

00:00:59.000 --> 00:01:03.000
Tarjan is responsible for some of the most amazing graph algorithms.

00:01:03.000 --> 00:01:07.000
A lot of which are based on the ideas of building trees,

00:01:07.000 --> 00:01:10.000
spanning trees using depth-first and breadth-first search.

00:01:10.000 --> 00:01:16.000
Back in college, my friend ??? and I used to refer to him as Tarjan, Lord of the trees.

00:01:16.000 --> 00:01:20.000
So the basic idea of this algorithm is we pick any node in the graph.

00:01:20.000 --> 00:01:25.000
Let's say B, and we start to build a tree starting from B, and here's how we do it.

00:01:25.000 --> 00:01:29.000
Starting from B, we look at all the neighbors of B which in this case are A and C,

00:01:29.000 --> 00:01:33.000
and we haven't build any of them into the graph yet, so we can add them into the graph.

00:01:33.000 --> 00:01:39.000
And now, we do essentially a search just as we're doing before, consisted of A and C.

00:01:39.000 --> 00:01:44.000
So from A, we look at the neighbors of A. The neighbors of A are B and C.

00:01:44.000 --> 00:01:48.000
Now, the BA edge is already in there, but the BC edge is not.

00:01:48.000 --> 00:01:50.000
So, we're going to add a special kind of edge because this is an edge

00:01:50.000 --> 00:01:52.000
between two nodes that are already existing.

00:01:52.000 --> 00:01:54.000
We'll call this a non-tree edge.

00:01:54.000 --> 00:02:00.000
So, what we're going to do is we're going to take this entire graph and express it essentially as a tree,

00:02:00.000 --> 00:02:02.000
but some of the edges aren't going to be part of the tree.

00:02:02.000 --> 00:02:04.000
We're going to have to add them in separate, all right.

00:02:04.000 --> 00:02:07.000
So, that takes care of all the neighbors of B and the neighbors of C.

00:02:07.000 --> 00:02:10.000
We have B which the edges are already in there

00:02:10.000 --> 00:02:13.000
and we also have an edge to E which we haven't seen yet.

00:02:13.000 --> 00:02:16.000
We add that edges and then we proceed from E.

00:02:16.000 --> 00:02:22.000
Now, E has three edges back to C which we already have and also to D and G.

00:02:22.000 --> 00:02:25.000
Those are new nodes, so we build them in with three edges

00:02:25.000 --> 00:02:32.000
and we continue our search now, let's say from D and D has two neighbors, E and F.

00:02:32.000 --> 00:02:36.000
E is already in there but we can add in F at the tree edge.

00:02:36.000 --> 00:02:39.000
We look back at G, G has neighbors F and E.

00:02:39.000 --> 00:02:44.000
The E one is in there and the F one is not, so we add that non-tree edge in there,

00:02:44.000 --> 00:02:48.000
Because F is already in the diagram but that edge was no not.

00:02:48.000 --> 00:02:52.000
And then from F, there is connection to D and G and those were already in the graph.

00:02:52.000 --> 00:02:57.000
So basically, what we've done now is we rewrote the original graph as a rooted tree.

00:02:57.000 --> 00:03:00.000
So starting with some node and then proceeding downward

00:03:00.000 --> 00:03:04.000
and then any edges that don't really fit that pattern we put in is, we put that dotted lines.

00:03:04.000 --> 00:03:10.000
So, we rewritten the graph as a tree and the next thing we need to know is post order the nodes.

00:03:10.000 --> 00:03:13.000
Now, post ordering is something you can do to any tree structure,

00:03:13.000 --> 00:03:16.000
and it basically involves assigning a number, a sequential number

00:03:16.000 --> 00:03:19.000
to each of the nodes in the--in the tree and post order means is,

00:03:19.000 --> 00:03:22.000
what we do, is to assign a number to a node,

00:03:22.000 --> 00:03:27.000
we first make sure that all the children on its left are numbered.

00:03:27.000 --> 00:03:30.000
All the children on its right are numbered, children and descendant.

00:03:30.000 --> 00:03:36.000
Direct children also and their children's children and then the node itself gets a number after that.

00:03:36.000 --> 00:03:39.000
So, these number is going to come from first numbering A,

00:03:39.000 --> 00:03:45.000
well A has--and then-and then everything below C and then we can number B itself.

00:03:45.000 --> 00:03:49.000
A's number comes from neighboring--numbering it's children, which it doesn't have any,

00:03:49.000 --> 00:03:54.000
so it can get whatever the next number is, which in this case is 1, all right.

00:03:54.000 --> 00:03:59.000
So back to B, we have to label all the--all the children on it's left and all the children on it's right.

00:03:59.000 --> 00:04:02.000
We haven't done that yet, so let's do a numbering starting from C.

00:04:02.000 --> 00:04:06.000
Well C, before it gets a number, has to have all it's children numbered

00:04:06.000 --> 00:04:11.000
and we can see that they don't have numbers yet, so we have to proceed down the tree.

00:04:11.000 --> 00:04:15.000
E needs a number. Well, E can't get it's number until it's children have been numbered

00:04:15.000 --> 00:04:17.000
but those haven't been numbered yet, so let's number those.

00:04:17.000 --> 00:04:21.000
D--D should get a number but first it's children have to get a number.

00:04:21.000 --> 00:04:30.000
This is a, you know, children first sort of scheme. These children has one child and that's F.

00:04:30.000 --> 00:04:33.000
For F to get a number, it's children, oh it doesn't have any children yet.

00:04:33.000 --> 00:04:36.000
All right, so F can get the next available number and in this case, it's 2.

00:04:36.000 --> 00:04:42.000
So now that, that's finish, D can get a number because all it's children are numbered.

00:04:42.000 --> 00:04:45.000
So, D gets the next available number and that's 3.

00:04:45.000 --> 00:04:48.000
E, no E still can't be numbered because it's children haven't been all numbered yet.

00:04:48.000 --> 00:04:53.000
We have to go to G first. G has no children, so it can get the next available number.

00:04:53.000 --> 00:04:58.000
Now, E can get a number. Post order in this case is, post meaning after.

00:04:58.000 --> 00:05:02.000
After all the kids, the node itself can get numbered.

00:05:02.000 --> 00:05:05.000
There's also pre-order and in-order, but we're just looking at post order for this algorithm.

00:05:05.000 --> 00:05:09.000
All right, now C, all it's children have been numbered, so now C can get it's number.

00:05:09.000 --> 00:05:13.000
B, all its children have been numbered, so now B can get it's number.

00:05:13.000 --> 00:05:15.000
So we've now post ordered all the nodes in the graph.

00:05:15.000 --> 00:05:20.000
So, just to make sure that you're understanding that process, here's a different tree.

00:05:20.000 --> 00:05:22.000
This time, the branching factors are a little different in some places.

00:05:22.000 --> 00:05:24.000
And I want you to post order this tree

00:05:24.000 --> 99:59:59.000
and then type in this box the number assigned to node P once you've done that.

