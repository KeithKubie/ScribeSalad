WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:10.459
&gt;&gt; ALAMI: I'm a developer advocate at Google.
I work on our Geo Developer products, so Google

00:00:10.459 --> 00:00:17.359
Maps API, Google Earth API. You can follow
me on Twitter, it's Ossama Alami. And you

00:00:17.359 --> 00:00:22.499
should follow the Google Maps API Twitter
account. We frequently tweet about announcements,

00:00:22.499 --> 00:00:30.449
new features, and exciting, you know, used
cases of our APIs. And that link up there

00:00:30.449 --> 00:00:39.100
is for the GDD agenda and to rate the session
which I hope you do. So, today, I'm going

00:00:39.100 --> 00:00:44.030
to talk about the Google Maps API version
three. We're going to learn how to build a

00:00:44.030 --> 00:00:51.289
map, learn about some new features, and sort
of explore version three of the Maps API.

00:00:51.289 --> 00:00:57.280
But before we dive into that, I want to give
you a little bit of history over why we decided

00:00:57.280 --> 00:01:05.089
to build version three of the Maps API. How
many of you have used the Google Maps API

00:01:05.089 --> 00:01:15.550
version two? Great. How about version three?
Oh, good. So, there are some users out there.

00:01:15.550 --> 00:01:26.070
So, version two of the Maps API has been enormously
successful. It has over 350,000 active sites.

00:01:26.070 --> 00:01:33.150
It was built and released in 2005. It sort
of started the whole Web mapping and mash-up

00:01:33.150 --> 00:01:42.030
trend on the Internet. And not only does it
remain as the Web's largest used mapping API,

00:01:42.030 --> 00:01:53.770
but it's also one of the largest APIs used
on the Web, period. So, in late 2008, the

00:01:53.770 --> 00:02:02.720
Maps API engineering team realized that if
you were to load version two of the Maps API

00:02:02.720 --> 00:02:07.759
on that first generation iPhone, on that,
you know, that great Web browser that Apple

00:02:07.759 --> 00:02:14.230
released for mobile device, it would take
something like 20 seconds to parse a JavaScript

00:02:14.230 --> 00:02:21.959
and become usable. And I say usable sort of,
well, where you could use it but it wasn't

00:02:21.959 --> 00:02:27.459
exactly a great experience. And when one of
Google's tenets is that every millisecond

00:02:27.459 --> 00:02:37.379
counts, 20 seconds seems a little unreasonable.
So, the team decided to--well, the team decided

00:02:37.379 --> 00:02:44.150
this was just not a situation that we wanted
to be in. We couldn't have a mapping API that's

00:02:44.150 --> 00:02:51.940
took 20 seconds or more to load on a mobile
device. And we saw that the mobile Web was

00:02:51.940 --> 00:02:59.659
certainly growing in usage and we wanted to
have an offering that was usable on the mobile

00:02:59.659 --> 00:03:12.230
web. So, looking at v2, the team tried to
optimize it as much as possible. But given

00:03:12.230 --> 00:03:17.430
the way it was designed and the fact that
it was built to sort of meet all these different

00:03:17.430 --> 00:03:24.620
used cases, you know, it has directions, it
has polylines, it has editing of polygons

00:03:24.620 --> 00:03:31.349
and polylines, and it was built of a code-based
that, you know, was created in 2005 off of

00:03:31.349 --> 00:03:36.879
maps.google.com, they couldn't optimize it
enough. They couldn't strip out enough things.

00:03:36.879 --> 00:03:44.939
They couldn't make it asynchronous, asynchronously
loaded, that they decided that the way forward

00:03:44.939 --> 00:03:52.610
was to build a new mapping API design from
the ground up with mobile devices in mind,

00:03:52.610 --> 00:04:00.730
so optimized for mobile devices but a full
desktop mapping API. And so, v3 was born.

00:04:00.730 --> 00:04:08.730
We released it at Google I/O is 2009. And
in Google I/O in May of this year, we launched

00:04:08.730 --> 00:04:15.910
it from Labs. We graduated the API where we
said that this is now our new premier JavaScript

00:04:15.910 --> 00:04:22.410
Maps API and we deprecated version two of
the Maps API. Now, for all of you guys that

00:04:22.410 --> 00:04:29.330
raised your hands when I asked how many of
you have built a v2 app, don't worry. V2,

00:04:29.330 --> 00:04:35.620
while deprecated, we are committed to supporting
it for at least three years. So it gives you

00:04:35.620 --> 00:04:40.870
plenty of times to upgrade those maps to version
three. And we keep on adding new and new features

00:04:40.870 --> 00:04:48.010
to v3, which I'll talk about, some in this
session and some in the next session. So,

00:04:48.010 --> 00:04:57.630
v3-wide support for various browsers including
a specific support for the Android browser,

00:04:57.630 --> 00:05:03.600
iPad, and iPhone browser targeted towards
mobile. And then for those of you that build

00:05:03.600 --> 00:05:08.290
v2 apps, you'll be happy to hear that we got
rid of API keys, so you no longer need any

00:05:08.290 --> 00:05:18.530
API key to use the API. Before we get started
on building the v3 map, how many of you or,

00:05:18.530 --> 00:05:25.500
you know, I certainly have been consuming
a lot of coffee in preparing this talk and

00:05:25.500 --> 00:05:32.940
in combating jet lag. And, you know, I'm from
San Francisco and some of my team is in Sydney

00:05:32.940 --> 00:05:38.090
and both those cities have a very large coffee
culture, and some of my team are kind of fanatic

00:05:38.090 --> 00:05:46.050
about, you know, finding great coffee and
finding new places that have coffee. I don't

00:05:46.050 --> 00:05:55.540
know if Brazil has a big coffee culture. So,
this will be a well-targeted talk. We decided

00:05:55.540 --> 00:06:04.030
to combine our love of maps and our love of
coffee and build something awesome. So, what

00:06:04.030 --> 00:06:10.620
we're going to do today is from start to finish
we're going to build a v3 application targeted

00:06:10.620 --> 00:06:17.600
towards mobile devices to let users--to let--based
it on an application that crowd sources coffee

00:06:17.600 --> 00:06:26.570
reviews and coffee establishments, all in
a map. So, let's get started. The first thing

00:06:26.570 --> 00:06:33.100
we need is to build a map. This is the, you
know, the standard look and feel for Google

00:06:33.100 --> 00:06:42.260
Maps. You know, it has the various map types.
The street view is now enabled by default,

00:06:42.260 --> 00:06:51.340
you know, pan and zoom. So how do we go about
adding this to a Web page? Well, let's first

00:06:51.340 --> 00:06:56.350
start with the Web page. It's pretty simple.
All I need is a div and I'll call it map and

00:06:56.350 --> 00:07:05.350
I want my map to live in there. Let's do the
style sheet. I want the map to basically take

00:07:05.350 --> 00:07:11.380
up the entire page so I'll just set it's height
to 100%, and then the core of it, the JavaScript.

00:07:11.380 --> 00:07:16.940
I want you to notice here how little JavaScript
it takes to get a map up and running. So,

00:07:16.940 --> 00:07:25.900
this is like six lines of JavaScript. I'm
doing is loading the API here and then creating

00:07:25.900 --> 00:07:31.200
a map, setting it to zoom level, setting it
to latitude and longitude, so where I want

00:07:31.200 --> 00:07:37.330
it to be on the Earth, and then saying that
I want to default to a road map. And then

00:07:37.330 --> 00:07:43.330
I'm adding an event listener here at the bottom,
when the window loads call this init function

00:07:43.330 --> 00:07:47.970
to load the map. And then one more thing I
want you to notice is while we don't have

00:07:47.970 --> 00:07:55.280
any API keys anymore, we do have the sensory
equals false. This is a required parameter.

00:07:55.280 --> 00:08:03.680
It's either true of false. It refers to whether
you are building this map based on some, you

00:08:03.680 --> 00:08:11.690
know, real time sensor data. What that really
means is if you are using GPS or a Geolocation

00:08:11.690 --> 00:08:18.560
to plot some data on the map or show the user's
location, the API loader doesn't change at

00:08:18.560 --> 00:08:25.720
all depending on what you pass in this function.
This is purely for us to track how the maps

00:08:25.720 --> 00:08:39.180
are uses and for us to satisfy certain data
provider agreements that we have. So, these

00:08:39.180 --> 00:08:43.800
six lines of code will get this--will get
us the map that I showed you earlier. And

00:08:43.800 --> 00:08:51.120
that's all it takes. And v3 now has, by default,
it'll load a default UI. So that includes

00:08:51.120 --> 00:08:57.070
the map type internal up here, the zoom and
pan control here, and then street view will

00:08:57.070 --> 00:09:03.030
be loaded by default. In v2, if you use that,
you would have to either set UI to default

00:09:03.030 --> 00:09:09.580
to get it to a default view or manually add
those controls to the map. You still have

00:09:09.580 --> 00:09:14.300
control over what the map shows, you can disable
that and say, "I don't want a zoom control.

00:09:14.300 --> 00:09:19.300
I don't want a map type control. I don't want
street view." That's still an option for you

00:09:19.300 --> 00:09:30.520
but by default this is what happens. Also,
that bit of code will run on an iPhone and

00:09:30.520 --> 00:09:35.800
Android browser without any other changes.
And it'll run in an experience that's appropriate

00:09:35.800 --> 00:09:43.210
to those devices. So, if you load it on an
IPhone, it will show up without the, you know,

00:09:43.210 --> 00:09:48.340
the zoom controls. It'll just--you can pinch
the zoom on the mobile Web and that will work

00:09:48.340 --> 00:09:57.400
fine. You noticed it's, you know, makes the
zoom control smaller, it collapses the map

00:09:57.400 --> 00:10:04.370
type control, it knows sort of the context
of how big it is and what devices it's running

00:10:04.370 --> 00:10:13.390
on, you don't need to customize it anymore
to make it usable on an iPhone or an Android.

00:10:13.390 --> 00:10:20.460
Since I am in Brazil, I'll talk about localization.
The--this is actually something you don't

00:10:20.460 --> 00:10:28.940
typically have to take care of for the Maps
API. By default, we will show the map in the

00:10:28.940 --> 00:10:35.320
language that the user's browser is set to.
So, if it's set to Brazilian Portuguese, it'll

00:10:35.320 --> 00:10:40.740
load Brazilian Portuguese. In most cases,
you want that behavior. You don't want to

00:10:40.740 --> 00:10:47.800
force a particular language on to the user
if they've already specified what they know.

00:10:47.800 --> 00:10:53.970
But you can force that behavior by just appending
this app language perimeter when you load

00:10:53.970 --> 00:11:01.780
the map. So, obviously, my browser is set
to English, I don't speak Portuguese. So,

00:11:01.780 --> 00:11:06.950
when we start over here it was in English,
but I'm forcing it to load in Portuguese here

00:11:06.950 --> 00:11:14.610
and it shows up in the correct language. Since
we're building an application that's really,

00:11:14.610 --> 00:11:21.500
you know, we're crowd sourcing local data
we expect users to use this map on their phone.

00:11:21.500 --> 00:11:27.180
It's not particularly useful for me to show
a map of San Francisco when I'm in Brazil.

00:11:27.180 --> 00:11:32.380
I want a map of what's around me so I can
see the coffee shops around me and I can rate

00:11:32.380 --> 00:11:39.260
the coffee shops around me. So, we're going
to make sure we use Geolocation to put the

00:11:39.260 --> 00:11:45.880
right location on the map. This is not actually
a feature of the Maps API, this is a HTML

00:11:45.880 --> 00:11:52.100
Five feature, widely supported across all
the, you know, smartphone mobile browsers,

00:11:52.100 --> 00:12:00.570
as well as Safari and Firefox and Chrome on
the laptop. I'm running Chrome right here.

00:12:00.570 --> 00:12:06.120
Let's see what the code looks like. Again,
not a lot of code. I just need to check if

00:12:06.120 --> 00:12:14.029
navigator.geolocation exists, that means the
browser supports Geolocation. I will get current

00:12:14.029 --> 00:12:26.980
position and then just pan the map to that
position. So, that gets us this map. I have

00:12:26.980 --> 00:12:33.380
not told this map to go to this conference
site where we're at right now it's doing this

00:12:33.380 --> 00:12:39.830
via HTML5 Geolocation. The next thing we want
to do is add a marker to the map where the

00:12:39.830 --> 00:12:45.330
user is, because it's useful to know, you
know, relative to the rest of the area where

00:12:45.330 --> 00:12:53.220
I am exactly. Markers are what we call overlays
and the maps API supports a number of different

00:12:53.220 --> 00:13:00.040
overlays. Markers, polylines, polygons, info
windows are considered overlays, so anything

00:13:00.040 --> 00:13:05.410
that you add to the map that has a sense of
location will be considered an overlay. But

00:13:05.410 --> 00:13:13.920
we just want to add a standard Google map
teardrop marker at the user's location. Again,

00:13:13.920 --> 00:13:22.450
not a lot of code. I just create a new instance
of marker, Google.maps.marker, and I set the

00:13:22.450 --> 00:13:28.811
position to the position I got back from the
Geolocation. So, I set its latitude and longitude

00:13:28.811 --> 00:13:35.410
to be where I am and then I set the map on
the marker. So, for those of you that have

00:13:35.410 --> 00:13:42.790
used v2, you notice a difference here. On
v2, I would say map.add overlay and give it

00:13:42.790 --> 00:13:53.100
a marker. In v3, I say marker live on this
map. So, it's a different sort of design structure.

00:13:53.100 --> 00:13:59.080
If you want to remove the marker from the
map at this point you just set its map to

00:13:59.080 --> 00:14:07.990
null. So, in this call, I would have null.
So, that's interesting. I mean, I love the

00:14:07.990 --> 00:14:13.180
red map marker. You know, I put it all over
my presentations. I'm a big fan. I have them

00:14:13.180 --> 00:14:21.400
on my laptop. But it's kind of overused on
API sites. What's really more useful for user

00:14:21.400 --> 00:14:31.480
is to give this indication that they are actually
geolocating yourself, and, you know, various

00:14:31.480 --> 00:14:39.030
devices have used this sort of little blue
dots with a radius that shows how accurate

00:14:39.030 --> 00:14:48.540
it is. So, instead of the red map marker let's
do something custom and more usable. The code

00:14:48.540 --> 00:14:55.110
here again, what I want you to take away from
this talk is how little code I'm using to

00:14:55.110 --> 00:15:02.150
build this map. The Maps API v3, really easy
to get started, really easy to build some

00:15:02.150 --> 00:15:10.460
pretty advanced applications with not a lot
of code. All I'm doing is, is creating a new

00:15:10.460 --> 00:15:15.810
marker image and giving that marker image
to the marker. So, instead of just creating

00:15:15.810 --> 00:15:21.500
a new Google.maps.marker I'm passing in this
marker options object and saying the icon

00:15:21.500 --> 00:15:31.830
is this image up here. V3 also supports CSS
spriting. So, if you want to--you know, one

00:15:31.830 --> 00:15:37.100
great way to improve performance is to have
your images sprited. So that's, while I didn't

00:15:37.100 --> 00:15:43.399
do that for this particular icon, you can
see how it's supported here. I am specifying

00:15:43.399 --> 00:15:49.600
the size of the icon and the point at where
that icon begins. So, if I had a big image

00:15:49.600 --> 00:15:54.649
containing a lot of different icons, I could
specify a specific location in that image

00:15:54.649 --> 00:16:01.470
to represent my icon. And then the last point
there is the anchor. A Google Maps marker,

00:16:01.470 --> 00:16:06.399
the red teardrop, the anchor would be at the
bottom in the middle. Since I'm showing a

00:16:06.399 --> 00:16:13.980
blue circle, I want the anchor to be in the
middle of that circle. All right, that's where

00:16:13.980 --> 00:16:25.470
the user actually is. So, I just specify half
the size in both the X and Y. And that gets

00:16:25.470 --> 00:16:35.721
us this location marker where we're at. But,
you know, I mentioned that it's sort have

00:16:35.721 --> 00:16:40.710
been established, when you display users location,
you typically also show the accuracy. You

00:16:40.710 --> 00:16:47.810
know, HTML5 Geolocation can rely on Wi-Fi,
or depending on their device, on GPS, so,

00:16:47.810 --> 00:16:52.223
location or on mobile devices on cellular
networks. So, the accuracy of the location

00:16:52.223 --> 00:17:01.910
can vary quite widely. So, let's put a circle
around where the user's location is so that

00:17:01.910 --> 00:17:14.450
I can give them an indication of accuracy
of the Geolocation. Oops. This is a new feature

00:17:14.450 --> 00:17:21.030
in v3, this circle object. In v2 we didn't
have a circle, so you would have to create

00:17:21.030 --> 00:17:27.681
some sort of image. We also have a new rectangle
object that you can add to the map. Pretty

00:17:27.681 --> 00:17:33.690
simple, I just create a circle give it some
perimeters for how I want the circle to look.

00:17:33.690 --> 00:17:40.830
And down here, in get user's location, I am
setting the radius of the circle to the accuracy

00:17:40.830 --> 00:17:47.490
of the Geolocation, that's something that
goes back in the HTML5 Geolocation spec. And

00:17:47.490 --> 00:17:53.470
then I'm just again, like I would with the
marker, setting the circle, circle's map,

00:17:53.470 --> 00:17:58.600
to be the map that I created earlier. One
thing I want you to notice here is this bind

00:17:58.600 --> 00:18:07.030
to. V3 has this concept of MVC objects, which
I'm not going to go into much depth in this

00:18:07.030 --> 00:18:13.890
talk, but we do have a great article on our
documentation site called Fun with MVC Objects.

00:18:13.890 --> 00:18:20.730
So, you can learn all about sort of the architecture
of v3 and some really cool new features. What

00:18:20.730 --> 00:18:25.620
I want the circle to do is I really want it
to move with my marker, right? If I move my

00:18:25.620 --> 00:18:31.809
marker because the user has changed location
I want the circle to move with it. So, I need

00:18:31.809 --> 00:18:37.920
to add code that says, "When the marker moves,
move the circle." In v3, it's really, really

00:18:37.920 --> 00:18:43.910
easy to do this, it's this one line of code.
But what I'm saying here is bind the accuracy

00:18:43.910 --> 00:18:57.600
circles' center to the user location marker
position. So, what that--what happens there

00:18:57.600 --> 00:19:06.380
is when the position changes, what's being
called as accuracycircle.setcenteruserlocationmarker.getposition.

00:19:06.380 --> 00:19:14.660
But you don't have to handle those events.
With this one line of code, it'll automatically

00:19:14.660 --> 00:19:29.870
bind those two properties together. So, what
do we have so far? We have our location marker

00:19:29.870 --> 00:19:35.161
and our circle of accuracy. Let's add a custom
control so that, you know, if I pan the map,

00:19:35.161 --> 00:19:41.980
I want to--oh, I lost where I am. Click, my
location, and I can quickly pan back to my

00:19:41.980 --> 00:19:51.180
location. A custom control is just an arbitrary
div. So, the first thing we want to do is

00:19:51.180 --> 00:19:55.760
style that div that we're going to create.
I'm going to give it a classic button. I'm

00:19:55.760 --> 00:20:00.550
just going to give it the style which makes
it look a lot like the controls that we have

00:20:00.550 --> 00:20:06.710
over here. I want it to look very similar
so I'm just going to give it the style that's

00:20:06.710 --> 00:20:18.170
just standard CSS. And then the JavaScript,
I am going to, here, add the div to the map

00:20:18.170 --> 00:20:25.370
as a control. I'm creating the div. I'm giving
it the classic button. I'm setting its text

00:20:25.370 --> 00:20:35.710
to my location. And then, I'm adding it to
map.controls array at top right position.

00:20:35.710 --> 00:20:44.090
So, the v3 API has a concept of controls anchored
to specific positions. So, top right, top

00:20:44.090 --> 00:20:51.910
left, top center, bottom center, you know,
all the--all around the map and it'll take

00:20:51.910 --> 00:20:58.680
care of laying out controls added to the map
at a specific position. So I'm anchoring at

00:20:58.680 --> 00:21:04.929
the top right but you know that I already
have the map type control up in top right.

00:21:04.929 --> 00:21:12.280
So, v3 knows to add it to the left of the
map type control, but if the map gets bigger

00:21:12.280 --> 00:21:19.880
it's still anchored to that right position.
And that's all it is. I just create a div

00:21:19.880 --> 00:21:28.480
and add it to this array. I also want to do
something when the user clicks the button,

00:21:28.480 --> 00:21:35.100
obviously, so I just listen to the button's
click events, and pan the map back to that

00:21:35.100 --> 00:21:44.900
user location I saved earlier. So, what have
we done so far? We've added the location.

00:21:44.900 --> 00:21:49.631
We added a button to go back to location.
What else do we want to do? Well, we want

00:21:49.631 --> 00:21:58.250
to have the ability to add a shop, right,
because we want this application to both show

00:21:58.250 --> 00:22:03.000
me what coffee shops are around but also allow
me while I'm on the run, "Hey, I just had

00:22:03.000 --> 00:22:09.460
a great cup of coffee. I need to remember
this place, add this location, rate it, you

00:22:09.460 --> 00:22:16.390
know, let's say, one to five." So, I click,
add shop. I'm going to just open an info window,

00:22:16.390 --> 00:22:22.380
which is again just another type of overlay
on top of this marker, and lets a user enter

00:22:22.380 --> 00:22:28.250
a name, address, and a rating. And then, you
know, I'm just opening it where I think the

00:22:28.250 --> 00:22:32.840
user's location is but obviously that might
not be accurate so I want to listen to a click

00:22:32.840 --> 00:22:40.049
event so that the user can then move this
shop to specifically where it is and then

00:22:40.049 --> 00:22:48.140
save accurate data. Again, this is very similar
to the, my location, button I added. It's

00:22:48.140 --> 00:22:55.429
just a custom div. The only point I want to
make on this slide is that the Maps API is

00:22:55.429 --> 00:23:01.830
fully compatible with any JavaScript framework
that you want to use. So if you're happy coding

00:23:01.830 --> 00:23:06.950
in jQuery, you can definitely use jQuery with
the Maps API, there's nothing that conflicts

00:23:06.950 --> 00:23:16.150
there. Anybody here use Google Closure tools?
One guy. So, we also have an external file

00:23:16.150 --> 00:23:25.500
for Closure so you can use the Maps API. And
in fact, the Maps API was built using Closure.

00:23:25.500 --> 00:23:34.130
So, I want to pop open a new, or drop a new
marker where when I'm adding a shop and I

00:23:34.130 --> 00:23:40.100
want to open an info window on that marker.
Another difference between v2 and v3, v2 had

00:23:40.100 --> 00:23:44.780
one instance of info window throughout the
lifetime of the application so you can only

00:23:44.780 --> 00:23:51.290
open one info window on the map. V3 doesn't
have that restriction. You can add, you know,

00:23:51.290 --> 00:23:59.850
10, 20 info windows to the map--arguably that's
not particularly useful, but you can now have

00:23:59.850 --> 00:24:05.610
the flexibility to have multiple open info
windows where v2 didn't give you that. We

00:24:05.610 --> 00:24:10.120
have to be careful in migrating your applications
though as if you want the behavior of only

00:24:10.120 --> 00:24:15.390
having one info window, you have to take care
to keep track of that info window and make

00:24:15.390 --> 00:24:22.880
sure it moves around as you're--as you're
opening and closes the old one. So, all I'm

00:24:22.880 --> 00:24:30.429
doing here is I'm creating the info window.
I'm giving it some arbitrary HTML which I

00:24:30.429 --> 00:24:38.700
displayed by passing in contents in this info
window object. I'm creating the marker. And

00:24:38.700 --> 00:24:45.950
then, when the map is clicked, I want to move
the position of the marker. And then, when

00:24:45.950 --> 00:24:55.230
I click add a new shop, I want to again, move
the position of the marker to the center of

00:24:55.230 --> 00:25:03.559
the map, set the marker to be on the map so
it shows up and then, open an info window.

00:25:03.559 --> 00:25:08.260
You can see here, I'm opening the info window
on Map so that's basically saying, set map

00:25:08.260 --> 00:25:15.460
on info--on the info window, and I'm giving
it a marker. In info window, you can set an

00:25:15.460 --> 00:25:19.080
info window's location. It doesn't need to
be associated with the marker but this is

00:25:19.080 --> 00:25:25.630
a shorthand way to bind an info window to
a specific marker. So, it'll get the behavior

00:25:25.630 --> 00:25:33.770
that we saw earlier, where if I click add
shop, it'll drop the marker and open an info

00:25:33.770 --> 00:25:39.380
window. What would be really cool though is
limiting the amount of text that a user has

00:25:39.380 --> 00:25:44.419
to enter, right? Especially on a mobile device,
you don't want typing any address. You have

00:25:44.419 --> 00:25:49.140
to ask the baristas like, "What's the address
here?" That's not really a fun way to enjoy

00:25:49.140 --> 00:25:56.470
coffee. So let's see what we can do there.
You can see as I click around the address

00:25:56.470 --> 00:26:02.600
changes for where the user is. For those of
you that don't know this, it's called reverse

00:26:02.600 --> 00:26:09.299
geocoding. The Maps API have what we called
geocoding which is a process of taking an

00:26:09.299 --> 00:26:16.049
address and getting back a latitude and longitude.
It also has reverse geocoding, which is the

00:26:16.049 --> 00:26:22.090
process of taking a latitude and longitude,
sending it to our servers, and us trying to

00:26:22.090 --> 00:26:27.490
give you basically what we--our best guess
for what at--what specific address you're

00:26:27.490 --> 00:26:35.669
at. So, given that this is a, obviously, a
request to our servers, or as everything we've

00:26:35.669 --> 00:26:43.990
done earlier was sort of synchronous programming
where I'm adding a marker and it shows up

00:26:43.990 --> 00:26:51.631
on the map, here it's a request to our servers
so we need to add a function callback so that

00:26:51.631 --> 00:26:58.230
when that request returns I can do something.
But it's not much more complicated than that.

00:26:58.230 --> 00:27:04.190
I'm creating a new instance of geocoder. This
geocoder class supports both forward and reverse

00:27:04.190 --> 00:27:09.429
goecoding. I am creating the request. In this
case, you see I'm passing in a lat/long. If

00:27:09.429 --> 00:27:15.940
I wanted to forward geocode, I would instead
say, address:, and then the string that the

00:27:15.940 --> 00:27:23.440
address is. In this case, I'm just passing
in the lat/long of wherever that marker is

00:27:23.440 --> 00:27:29.799
and I'm calling geocoder that geocode, when
it returns a success, I'm pulling out that

00:27:29.799 --> 00:27:35.210
formatted address and adding it to that info
window in that box. There's a lot of data

00:27:35.210 --> 00:27:42.549
that comes back including a very easy way
for you to parse specific address components

00:27:42.549 --> 00:27:47.309
as well as a formatted address which we're
using, but also things like optimal viewing

00:27:47.309 --> 00:27:54.679
balance for this element via, you know, a
city or an intersection or an address; what's

00:27:54.679 --> 00:28:03.330
the optimal way to view this on your size
map. But we're just going to use a formatted

00:28:03.330 --> 00:28:12.120
address. And then when the map is clicked,
in addition to what we do up here, as what

00:28:12.120 --> 00:28:16.410
we did earlier, we moved the marker, we're
also going to reverse geocode with that new

00:28:16.410 --> 00:28:28.650
marker. So that gets us this code here where
I can move around, I can rate a store, and

00:28:28.650 --> 00:28:39.860
now I just want to enable saving a shop. So
let's do that. Not much new code here. So

00:28:39.860 --> 00:28:49.330
all I'm doing is creating a new marker image.
I want to have a custom icon for indicating

00:28:49.330 --> 00:28:55.220
a shop that's already been saved. So I'm just
going to use this copy.png that I have. I'm

00:28:55.220 --> 00:29:03.990
creating a new marker. I am--when I save,
removing my red Google Maps marker, adding

00:29:03.990 --> 00:29:11.419
the custom marker that I created. So I'm removing
the old marker by setting its map to null.

00:29:11.419 --> 00:29:26.710
I'm closing the info window and I'm just creating
a new Maps marker with that icon at that position.

00:29:26.710 --> 00:29:32.990
So next, we want to load shops, right? We
want to load the shops that we have saved.

00:29:32.990 --> 00:29:38.539
Obviously, this is a server--there's a server
component to this. I'll make all this code

00:29:38.539 --> 00:29:43.250
available. I'm not going to go through the
server component because it's not really a

00:29:43.250 --> 00:29:49.710
part of the Maps API, but it's a very simple
App engine app built in Python that basically

00:29:49.710 --> 00:29:56.600
just has a very simple API to save and load
locations. But when do I want to load a location?

00:29:56.600 --> 00:30:06.220
You can see either two coffee shops here which
I actually didn't go to. I just randomly added

00:30:06.220 --> 00:30:12.410
some data. But, you know, if I zoom out, you
can see I've sort of been using this application

00:30:12.410 --> 00:30:20.790
in North America and team's in Sydney and
we did a trip to Southeast Asia. So what you

00:30:20.790 --> 00:30:30.030
saw there is, as I panned out and then stopped
interacting with the map, the application

00:30:30.030 --> 00:30:37.720
then loaded the coffee shops that were in
the range of the map. You know, when the application

00:30:37.720 --> 00:30:43.440
starts up, let's say this becomes really popular,
I have thousands or tens of thousands or hundreds

00:30:43.440 --> 00:30:50.559
of thousands of coffee shops, it's not really
useful for me to load a coffee shop in Sydney

00:30:50.559 --> 00:30:58.270
when I'm in Brazil. So what we want to do
is add a new event listener. We're going to

00:30:58.270 --> 00:31:02.740
listen to the map's idle event. This is fired
whenever the user stops interacting with the

00:31:02.740 --> 00:31:08.720
map. So if the user pans the map and then
stops, idle will be file--will be fired. If

00:31:08.720 --> 00:31:15.270
he zooms in or she zooms out, idle will be
fired. And then I can perform some action

00:31:15.270 --> 00:31:21.130
based on that. What I'm going to do is I'm
going to take the bounds of the map and this

00:31:21.130 --> 00:31:27.659
two URL value just gives me a stringed format
for the bounds of the map, that is the extent

00:31:27.659 --> 00:31:34.090
of the Earth that I am looking at in my current
map view. I'm going to send it to my API and

00:31:34.090 --> 00:31:39.590
it's going to come back with a bunch of stores.
I'm going to iterate over those stores and

00:31:39.590 --> 00:31:45.860
add it to the map. Here, the only thing interesting
here is I'm making sure to keep track of all

00:31:45.860 --> 00:31:50.960
the markers that I've added to the map in
my own, you know, array that I've defined

00:31:50.960 --> 00:31:56.230
somewhere else. This is important because,
for the most part, the Maps API won't keep

00:31:56.230 --> 00:32:01.500
track of markers for you, you need to do this
for yourself, and I don't want to keep on

00:32:01.500 --> 00:32:14.870
adding new markers to stores I'm already displaying
on a map. And here, you can see I'm--this

00:32:14.870 --> 00:32:19.700
is the actual function to add that marker.
The only new thing I'm doing here is I'm setting

00:32:19.700 --> 00:32:28.980
a title. A title is basically an easy way
for you to access the sort of on-hover display

00:32:28.980 --> 00:32:35.150
of text. So whatever--when you hover over
a marker that has a title set, it will then

00:32:35.150 --> 00:32:44.660
display whatever the title is. So I'll show
you that right now. If I hover over here,

00:32:44.660 --> 00:32:55.740
you will see it shows a coffee shop. So let's
click on this. I gave this coffee shop three

00:32:55.740 --> 00:33:01.159
stars. It's at that address. And, you know,
it'd be great to get some sort of directions

00:33:01.159 --> 00:33:08.490
for how to get there. Let's click directions
and it will map out directions. So the Google

00:33:08.490 --> 00:33:15.960
Maps API v3 supports three types of directions.
There's obviously driving directions. There's

00:33:15.960 --> 00:33:25.289
also walking directions. Since this application
is, you know, a very kind of hyper local,

00:33:25.289 --> 00:33:32.299
I am really only interested in places I'm
going to walk to. I'm going to use walking

00:33:32.299 --> 00:33:40.940
directions. The other direction type that
we support in some countries--not Brazil yet--is

00:33:40.940 --> 00:33:48.640
bicycling directions. But in this case, I'm
going to show you how to use walking directions.

00:33:48.640 --> 00:33:53.710
You'll see the code here is actually very
similar to the reverse geocoding we did earlier,

00:33:53.710 --> 00:33:58.659
right? Directions is just another service
that Google provides. You send a request,

00:33:58.659 --> 00:34:05.020
you wait for a response, you handle that response
when it comes back. So all I'm doing is creating

00:34:05.020 --> 00:34:10.999
that request here. I'm saying, "I want to
go from where the user location is to the

00:34:10.999 --> 00:34:18.389
address of the shop." And you'll notice I
can give the direction service an address

00:34:18.389 --> 00:34:23.750
or I can give it a lat/long. It doesn't matter.
I can give it two lat/longs. It'll route between

00:34:23.750 --> 00:34:29.389
those two. I'll give it two addresses. I can
give it five addresses and will give an optimized

00:34:29.389 --> 00:34:35.549
route between all those five. And then I'm
just saying, "I want to do this walking,"

00:34:35.549 --> 00:34:42.059
and when it's--the result returns, just render
that result on the map using this directions

00:34:42.059 --> 00:34:47.119
renderer. I'm just going to show the routes
on the map but the direction service does

00:34:47.119 --> 00:34:53.780
return textural directions, does let you render
that standard look and feel for Google Directions

00:34:53.780 --> 00:34:59.140
and also lets you access specific directions
steps so you can render it however you want.

00:34:59.140 --> 00:35:15.079
Excuse me. And here is our application. You
can go to it right now. It's live. It's whereiscoffee.appspot.com.

00:35:15.079 --> 00:35:21.849
We built it basically for optimized mobile
devices. This is what it looks like on a Nexus

00:35:21.849 --> 00:35:30.729
One or on an Android device. I can click add
shop. I can click around to change that shops,

00:35:30.729 --> 00:35:36.969
change a rating. You'll notice here I'm actually
pulling in some locations. We're using the

00:35:36.969 --> 00:35:42.869
Local Search API. You can take a look at the
code yourself but that's another way to sort

00:35:42.869 --> 00:35:50.930
of help the user guess at where they're at.
I don't know what this is but let's just add

00:35:50.930 --> 00:35:56.200
something to the map and it should show up
right there. And then this is what it looks

00:35:56.200 --> 00:36:04.440
like on a desktop. It's just a larger view
of the same thing. You can very easily create

00:36:04.440 --> 00:36:12.160
a site that looks different for mobile and
desktop. And, in fact, I encourage you to

00:36:12.160 --> 00:36:16.680
do that. But in this case, we're just showing
the, you know, the mobile view in a desktop

00:36:16.680 --> 00:36:25.719
web browser. So what have we learned today?
We've learned about how to use the map, markers,

00:36:25.719 --> 00:36:33.779
overlays, controls, getting a user's location,
using some of our services. What else is there?

00:36:33.779 --> 00:36:39.969
Well, there's quite a bit. There's polylines
and polygons, which we didn't touch upon.

00:36:39.969 --> 00:36:46.420
There's traffic and bicycling layers. I tried
the traffic layer in Brazil. I couldn't ever

00:36:46.420 --> 00:36:54.710
get it to show anything but red. Was that--was
that accurate? Styled Maps, which I will talk

00:36:54.710 --> 00:37:00.180
about in my afternoon session, so I encourage
you to attend that one. Street View, which

00:37:00.180 --> 00:37:06.640
I'll show you right now. So we launched Street
View in Brazil, what, a month ago? Something

00:37:06.640 --> 00:37:14.250
like that? And my cab driver told me there's
130,000 streets in Sao Paulo, which sounds

00:37:14.250 --> 00:37:22.680
like a terrible thing for our Street View
drivers. But it's standard Google Street View

00:37:22.680 --> 00:37:28.739
experience. What's really exciting about v3
versus v2 is that Street View was built entirely

00:37:28.739 --> 00:37:37.349
in HTML. So since we targeted this API for
mobile devices, we wanted to make sure that

00:37:37.349 --> 00:37:43.190
it's entirely useable on all mobile devices.
And not all mobile devices support Flash,

00:37:43.190 --> 00:37:54.769
which our old Street View interaction was
built upon. So this is all rendered in HTML.

00:37:54.769 --> 00:37:59.960
What this lets us do is allow you to have
some really sort of new interactions with

00:37:59.960 --> 00:38:05.279
Street View that we didn't have in Version
2. You'll notice I have a custom marker where

00:38:05.279 --> 00:38:14.849
our Google Developer Day is here. Excuse me.
We're right here. Let's toggle the Street

00:38:14.849 --> 00:38:24.000
View. I don't know if you can see it. It's
actually right there. So, markers can be shared

00:38:24.000 --> 00:38:28.999
between the Map and Street View. And you can
add markers directly to Street View. And what's

00:38:28.999 --> 00:38:35.829
cool is as I get closer to that marker, that
marker gets larger or smaller. And I can also

00:38:35.829 --> 00:38:43.910
open arbitrary info windows in Street View.
So that's cool, yeah? I'll show you something

00:38:43.910 --> 00:38:51.410
I find really cool and that's the ability
to do custom street view. So, again, we're

00:38:51.410 --> 00:39:01.609
at this location here at the Sheraton. Let's
click Street View, drag it in, let's say,

00:39:01.609 --> 00:39:11.299
over here. So this is the standard Street
View experience as I drive down the road.

00:39:11.299 --> 00:39:20.170
Oh, what's this? You can see I added a little
GDD 2010 leading to the Marriott or--I'm sorry,

00:39:20.170 --> 00:39:27.269
the Sheraton--the Sheraton over there where
we're having this GDD. This is obviously not

00:39:27.269 --> 00:39:33.279
something you'll see when you go to maps.google.com.
It does not have, you know, real time events.

00:39:33.279 --> 00:39:42.099
But what happens when I click here? So yesterday
when I got in town, I took just a standard

00:39:42.099 --> 00:39:48.391
Canon point-and-shoot on a little tripod that
I sort of perilously tried to hold on off

00:39:48.391 --> 00:39:55.079
a chair and rotated and took a bunch of pictures.
And you can see how a conference is set up

00:39:55.079 --> 00:40:03.319
the day before. And then stitched it together
with software called Hugin, which is just

00:40:03.319 --> 00:40:09.869
something I found and downloaded off the Internet,
and then added a custom street view, which

00:40:09.869 --> 00:40:17.240
is really easy to do in v3. So you can jump
into the speaker's room, you can see some

00:40:17.240 --> 00:40:25.359
other Googlers here, a lot of jetlagged faces.
You can see I was a little slow taking these

00:40:25.359 --> 00:40:36.099
panoramas so she's over here, she's over here
and she's over here. I can turn around and

00:40:36.099 --> 00:40:42.050
jump into the speaker's--or sorry, I was just
there--jump into the keynote room. And then

00:40:42.050 --> 00:40:51.420
you see also Chris is apparently pointing
at himself and also on the stage. So, a very

00:40:51.420 --> 00:41:01.539
cool functionality. Not a lot of code. Basically,
the way this is done is you have a way to

00:41:01.539 --> 00:41:08.989
provide a custom tile URL to the Street View
panorama. The Map works by tiling so we have

00:41:08.989 --> 00:41:13.859
a set of tiles. Street View works very similarly.
So you can take a panoramic photo, cut it

00:41:13.859 --> 00:41:22.079
into tiles, and then specify to the Maps API
how to load those tiles. This is the bright

00:41:22.079 --> 00:41:25.880
way to do it. You know, you want to tile it
because it's a lot easier to load tiles and

00:41:25.880 --> 00:41:31.900
then you can have different resolutions at
different zoom levels. But if you want to

00:41:31.900 --> 00:41:37.089
do the quick and dirty thing, which is what
I did yesterday, I just took one big image

00:41:37.089 --> 00:41:43.400
and plastered it into Street View without
tiling it and it works fine. These are large

00:41:43.400 --> 00:41:47.799
images. They're about a meg each, which is
why you'd want to tile them so that you don't

00:41:47.799 --> 00:41:54.110
have to serve a meg worth of data. And you
can see there's, you know, a fair amount of

00:41:54.110 --> 00:41:59.609
code here but it's not that complicated. In
this case, you know, I'm returning a specific

00:41:59.609 --> 00:42:07.760
panoramic image based on where I--or what
Street View I want to load and then how I

00:42:07.760 --> 00:42:16.469
link between different panoramics is just
specifying a heading and an ID for that panoramic

00:42:16.469 --> 00:42:23.769
image. And then down here, I linked specifically
to our Google Street View imagery. So what

00:42:23.769 --> 00:42:32.089
I'm doing here is when I'm at a specific lat/long,
I recognize that I'm close to GDD. I then

00:42:32.089 --> 00:42:38.390
add a new link and it'll show up automatically
in Street View. So you can, you know, if you're

00:42:38.390 --> 00:42:43.859
building a store locator for instance and
you want to right away for the user to navigate

00:42:43.859 --> 00:42:50.690
into this store, you can do this with our
Street View imagery leading into your custom--excuse

00:42:50.690 --> 00:42:59.990
me, your custom imagery. So that's what I
wanted to cover in this session. Please come

00:42:59.990 --> 00:43:04.499
to my session this afternoon where I'm going
to talk about some other new features in v3

00:43:04.499 --> 00:43:12.369
and across Geo as well. The presentation is
right here at this URL. I encourage you to

00:43:12.369 --> 00:43:21.229
load it in Chrome, it might not work otherwise.
The code for--or the documentation for the

00:43:21.229 --> 00:43:27.099
Maps API is here. The application whereiscoffee
is here and the code for whereiscoffee is

00:43:27.099 --> 00:43:29.880
right here. Thank you very much for your time.

