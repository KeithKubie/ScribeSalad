WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.297
[MUSIC PLAYING]

00:00:06.130 --> 00:00:08.930
In the previous episode of
"Android Testing Patterns,"

00:00:08.930 --> 00:00:12.080
you learned the basic Espresso
test flow, finding a view,

00:00:12.080 --> 00:00:14.880
performing an action,
and verifying the result.

00:00:14.880 --> 00:00:16.660
Things get a little
more complicated

00:00:16.660 --> 00:00:19.280
when testing a screen that
contains a ListView, which

00:00:19.280 --> 00:00:23.380
can be backed by an adapter with
tens or even hundreds of rows.

00:00:23.380 --> 00:00:25.900
Most of the time, the view
that you are interested in

00:00:25.900 --> 00:00:29.160
might not even be on the
screen, as AdapterViews only

00:00:29.160 --> 00:00:32.330
show a small number of children,
and recycle child views

00:00:32.330 --> 00:00:33.930
as you scroll.

00:00:33.930 --> 00:00:37.340
Fortunately, Espresso already
comes with a solution.

00:00:37.340 --> 00:00:39.390
Instead of using
the onView method,

00:00:39.390 --> 00:00:42.420
start your search with
onData, and provide a matcher

00:00:42.420 --> 00:00:45.840
against the data that is backing
the view you'd like to match.

00:00:45.840 --> 00:00:48.110
Espresso will do all
the legwork of finding

00:00:48.110 --> 00:00:51.700
the row in the adapter and
bringing it into the viewport.

00:00:51.700 --> 00:00:53.355
Let's look at an example.

00:00:53.355 --> 00:00:57.010
I'll clone our testing samples
repository from GitHub,

00:00:57.010 --> 00:00:58.870
and open the Espresso
DataAdapterSample.

00:01:02.030 --> 00:01:05.140
Here, we have a simple activity
showing a ListView populated

00:01:05.140 --> 00:01:05.985
with 100 items.

00:01:09.920 --> 00:01:12.290
The ListView is backed
by a simple adapter

00:01:12.290 --> 00:01:15.490
where each row is a collection
of key value pairs stored

00:01:15.490 --> 00:01:16.178
as a Map.

00:01:21.250 --> 00:01:23.520
I'll switch to the
Test class now.

00:01:23.520 --> 00:01:25.660
You can see onData
and the helper method

00:01:25.660 --> 00:01:27.730
that is used throughout
the test to locate

00:01:27.730 --> 00:01:29.570
a row in the ListView.

00:01:29.570 --> 00:01:31.990
hasEntry is a standard
hamcrest matcher

00:01:31.990 --> 00:01:34.070
designed to work with Maps.

00:01:34.070 --> 00:01:37.100
Here, we're using it to
search for rows whose text is

00:01:37.100 --> 00:01:40.950
equal to the given argument.

00:01:40.950 --> 00:01:43.660
If I go ahead and run
the tests in this class,

00:01:43.660 --> 00:01:46.030
you can see that Espresso
is scrolling the ListView

00:01:46.030 --> 00:01:51.090
to the desired position before
performing actions on the rows.

00:01:51.090 --> 00:01:54.200
If your AdapterView items
are not Map instances,

00:01:54.200 --> 00:01:56.880
you can, of course, use
other measures in onData.

00:01:56.880 --> 00:01:58.890
Just make sure you know
what type of objects

00:01:58.890 --> 00:02:00.610
your adapter is holding.

00:02:00.610 --> 00:02:02.650
If you are using
a CursorAdapter,

00:02:02.650 --> 00:02:05.480
there are convenient matchers
available in the CursorMatchers

00:02:05.480 --> 00:02:06.460
class.

00:02:06.460 --> 00:02:09.660
There is one more case I want to
cover, and that's RecyclerView.

00:02:09.660 --> 00:02:12.570
Although it works on a similar
principle as AdapterViews,

00:02:12.570 --> 00:02:16.070
it does not actually inherit
from the AdapterView class.

00:02:16.070 --> 00:02:17.520
There's a separate
set of methods

00:02:17.520 --> 00:02:19.960
to work with RecyclerViews
that let you scroll

00:02:19.960 --> 00:02:22.790
and perform actions
on its child views.

00:02:22.790 --> 00:02:25.390
If you want to see more examples
of working with views backed

00:02:25.390 --> 00:02:27.530
by adapters, check
out my article

00:02:27.530 --> 00:02:29.790
in "Medium," linked
in the description.

00:02:29.790 --> 00:02:31.280
Happy testing.

00:02:31.280 --> 00:02:34.630
[MUSIC PLAYING]

