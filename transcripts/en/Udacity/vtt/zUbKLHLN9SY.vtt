WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:03.000
All right, let’s take a look at one more path type algorithm

00:00:03.000 --> 00:00:06.000
that is simple variation of what we’re just looking at.

00:00:06.000 --> 00:00:10.000
I’d like you to do is modify the path finding algorithm that we’ve been playing with

00:00:10.000 --> 00:00:15.000
to find the average of the shortest path distance to each reachable node.

00:00:15.000 --> 00:00:20.000
So, that will give for some node V₁ that we get to the program,

00:00:20.000 --> 00:00:24.000
it will give us a measure of the centrality of V₁.

00:00:24.000 --> 00:00:27.000
Okay, here’s the code that we left off with.

00:00:27.000 --> 00:00:31.000
Let’s make some modifications to this to compute the centrality measure.

00:00:31.000 --> 00:00:38.000
Program path (G, V₁, V₂) was returning to distance between V₁ and V₂ in the graph

00:00:38.000 --> 00:00:40.000
in the graph or false if the two nodes are disconnected.

00:00:40.000 --> 00:00:42.000
We don’t really need that anymore.

00:00:42.000 --> 00:00:47.000
What we really need is the centrality concept and that really is done with respect

00:00:47.000 --> 00:00:51.000
to a single starting node V and we’re going to do basically the same search as before.

00:00:51.000 --> 00:00:54.000
We’re just not going to terminate what we had in ending node because there isn’t any node.

00:00:54.000 --> 00:00:59.000
So, we start off distance from the start at V as being zero.

00:00:59.000 --> 00:01:03.000
Once again, we go to our open list, pull the first element off at the

00:01:03.000 --> 00:01:07.000
current node that we were working on, pop it off the list.

00:01:07.000 --> 00:01:09.000
We look at the neighbors of that node.

00:01:09.000 --> 00:01:12.000
If this neighbor is a new neighbor,

00:01:12.000 --> 00:01:19.000
then we make a note of it’s distance which is distance from the start to the node we just where

00:01:19.000 --> 00:01:24.000
plus one to get the distance to the neighbor then we put it on the open list and take out this line

00:01:24.000 --> 00:01:29.000
where stopped the search and when we’re going to return at the end of all these.

00:01:29.000 --> 00:01:32.000
Well, once this is loop is finish, once the open list is exhausted,

00:01:32.000 --> 00:01:36.000
we visited all the nodes that were reachable and put their distances from the start state

00:01:36.000 --> 00:01:38.000
into this data structure distance from the start.

00:01:38.000 --> 00:01:42.000
So now, what we really need to do is average all these values of distance from the start.

00:01:42.000 --> 00:01:44.000
There’s a lot of different ways that you can do this

00:01:44.000 --> 00:01:48.000
but Python give you at least one way that’s very sync, so I’m going to use that.

00:01:48.000 --> 00:01:54.000
You can also do this by setting a pair from loop but what it is in this case is

00:01:54.000 --> 00:02:00.000
I take the other values in the distance from start date of structure.

00:02:00.000 --> 00:02:07.000
If the return has a big long list, sum up all the elements at list, add zero to it,

00:02:07.000 --> 00:02:10.000
0.0 to make sure that it’s a floating-point number,

00:02:10.000 --> 00:02:13.000
and then divide by the number of nodes for which we got a distance.

00:02:13.000 --> 00:02:15.000
So, these are all the reachable nodes.

00:02:15.000 --> 00:02:20.000
So, ultimately, this is going to return the average of the distances of all the reachable nodes,

00:02:20.000 --> 00:02:22.000
which is what we are looking for.

00:02:22.000 --> 00:02:28.000
One little here and we should be good to go.

