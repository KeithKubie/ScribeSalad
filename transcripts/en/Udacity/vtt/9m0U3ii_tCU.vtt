WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
What Sherlock Holmes reconstructs in his reasoning over here

00:00:05.000 --> 00:00:07.000
is a cause-effect chain.

00:00:07.000 --> 00:00:11.000
First, Dr. Watson ran across mud;

00:00:11.000 --> 00:00:15.000
therefore, the servant had to clean the shoe.

00:00:15.000 --> 00:00:18.000
And therefore there were scratches found in the shoe.

00:00:18.000 --> 00:00:22.000
In debugging, we also have such a cause-effect chain:

00:00:22.000 --> 00:00:28.000
from the defect to the infection--that is, an error in the state--

00:00:28.000 --> 00:00:30.000
and finally to the failure,

00:00:30.000 --> 00:00:33.000
which can be observed by a user.

00:00:33.000 --> 00:00:36.000
The difference in the Sherlock Holmes story, however,

00:00:36.000 --> 00:00:41.000
is that Sherlock makes just one observation

00:00:41.000 --> 00:00:45.000
and deduces everything that must have happened before;

00:00:45.000 --> 00:00:50.000
whereas in debugging, so far, we have assumed that we can actually observe

00:00:50.000 --> 00:00:52.000
what has happened before in the way we assume

00:00:52.000 --> 00:00:55.000
that we have perfect control over our program

00:00:55.000 --> 00:00:58.000
and therefore can observe everything.

00:00:58.000 --> 00:01:01.000
But what happens if this information is not available?

00:01:01.000 --> 00:01:06.000
If all we know is that the failure occurred but we have no history,

00:01:06.000 --> 00:01:09.000
or means to observe what was going on?

00:01:09.000 --> 00:01:14.000
This is where the Sherlock Holmes method of debugging comes into play.

00:01:14.000 --> 00:01:19.000
For we must, like Sherlock Holmes, think backwards from our observations

00:01:19.000 --> 00:01:22.000
to find out what has really happened.

00:01:22.000 --> 00:01:26.000
In debugging, we start with the failure and think backwards

00:01:26.000 --> 00:01:28.000
what could be the possible cause such that we can finally discover the reason.

