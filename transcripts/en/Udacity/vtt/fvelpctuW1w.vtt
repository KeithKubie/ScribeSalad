WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.000
We're going to try a few things in the Python interpreter to get a sense of how long things take.

00:00:05.000 --> 00:00:11.000
I've written a procedure here that times the execution of a piece of code.

00:00:11.000 --> 00:00:14.000
We could just do the timing with a stopwatch.

00:00:14.000 --> 00:00:18.000
Then we'd have to run really long things to be able to get a reasonably accurate time.

00:00:18.000 --> 00:00:22.000
But Python has a built-in procedure we can use to measure time.

00:00:22.000 --> 00:00:25.000
That's the time.clock procedure.

00:00:25.000 --> 00:00:29.000
We could try just using a stopwatch, and if we ran programs that took long enough to run,

00:00:29.000 --> 00:00:32.000
this would give us a reasonable idea of how long they took.

00:00:32.000 --> 00:00:36.000
It's going to be a lot more accurate to use this built-in procedure,

00:00:36.000 --> 00:00:43.000
which is provided by the time library that evaluates to the number of seconds.

00:00:43.000 --> 00:00:47.000
The value of time.clock will give us the current processor time in seconds.

00:00:47.000 --> 00:00:50.000
The starting point is fairly arbitrary there,

00:00:50.000 --> 00:00:55.000
but the important thing is if we call it twice and we start the time here

00:00:55.000 --> 00:01:01.000
and we stop the time at the second call--we store those in the variable start and stop--

00:01:01.000 --> 00:01:05.000
that's going to give us the amount of time it took to execute this code.

00:01:05.000 --> 00:01:11.000
I've written a procedure that starts by initializing the variable start to the current clock time,

00:01:11.000 --> 00:01:15.000
then run some code, and I'll talk more about what it's doing there in a second,

00:01:15.000 --> 00:01:19.000
and then it computes the time between the current time and the start time

00:01:19.000 --> 00:01:25.000
and gives us the run time, and it returns both the result of the code and the time it took to run.

00:01:25.000 --> 00:01:28.000
What's happening here is actually quite exciting.

00:01:28.000 --> 00:01:35.000
We're using eval. Eval allows us to evaluate any string as though it were a Python expression.

00:01:35.000 --> 00:01:41.000
We're passing in a string here, but when we pass that string into eval, it's running it as code.

00:01:41.000 --> 00:01:46.000
We can pass in any Python expression. We're going to start and end the timer.

00:01:46.000 --> 00:01:51.000
In between we're going to evaluate the code and get the result of evaluating that code.

00:01:51.000 --> 00:01:54.000
I've defined this procedure "time execution" that will give us

00:01:54.000 --> 00:01:57.000
the time it takes to evaluate any Python expression.

00:01:57.000 --> 00:02:01.000
Now we're going to run some tests, and instead of running them through the web browser ID,

00:02:01.000 --> 00:02:05.000
like you've been using so far, I'm going to run them directly in the Python shell

00:02:05.000 --> 00:02:07.000
running on my desktop computer.

00:02:07.000 --> 00:02:10.000
The reason for that is we'll get more accurate timing measurements.

00:02:10.000 --> 00:02:14.000
You can try running timing through the web browser interface that we provide.

00:02:14.000 --> 00:02:18.000
The problem is there are limits to how long we let your programs execute,

00:02:18.000 --> 00:02:20.000
and the timings won't be very accurate.

00:02:20.000 --> 00:02:22.000
Instead, I'm going to run these in the Python shell.

00:02:22.000 --> 00:02:25.000
If you have Python installed you can try this yourself,

00:02:25.000 --> 00:02:28.000
and we have some directions on the website how you can do that.

00:02:28.000 --> 00:02:31.000
But it's not necessary to do that to continue in the class.

00:02:31.000 --> 00:02:34.000
I just want to demonstrate how time execution works.

00:02:34.000 --> 00:02:36.000
Let's try a simple example.

00:02:36.000 --> 00:02:41.000
We're going to time the execution of the expression 1 + 1.

00:02:41.000 --> 00:02:47.000
That's doing a simple addition. We're adding two numbers. We'll see how long that takes.

00:02:47.000 --> 00:02:50.000
When we run time execution, we get back two results.

00:02:50.000 --> 00:02:54.000
We get back the result, which is 1 + 1 is 2--that's good.

00:02:54.000 --> 00:02:59.000
As the second result we get the time it took--a little hard to read.

00:02:59.000 --> 00:03:03.000
It looks like 8.3 and then e^(-05).

00:03:03.000 --> 00:03:06.000
What that means is that is using scientific notation.

00:03:06.000 --> 00:03:13.000
The -05 is where the decimal point is, so what that is really looks like this: [0.000083].

00:03:13.000 --> 00:03:18.000
There are 4 zeros followed by the 8-3-dot-dot-dot.

00:03:18.000 --> 00:03:21.000
That's a value in the number of seconds.

00:03:21.000 --> 00:03:28.000
The number of seconds it took to run is 0.00008 seconds.

00:03:28.000 --> 00:03:32.000
If we try the same thing again--we'll try timing the exact same thing--

00:03:32.000 --> 00:03:35.000
we don't get exactly the same result. The timing is inaccurate.

00:03:35.000 --> 00:03:39.000
It depends on other things going on in the machine. We won't get exactly the same answer.

00:03:39.000 --> 00:03:44.000
But it's still a very small number, and it we try it a few times, we'll keep seeing this small number.

00:03:44.000 --> 00:03:51.000
If we try a more complicated addition, it's still going to give us a very small number.

00:03:51.000 --> 00:03:53.000
It's a small number of microseconds.

00:03:53.000 --> 00:03:57.000
That actual processor time for something that simple is actually probably lower than that,

00:03:57.000 --> 00:04:01.000
but there's some other things happening, because we needed to stop and start the clock

00:04:01.000 --> 00:04:03.000
and other things to do the timing.

00:04:03.000 --> 00:04:06.000
We'll see more if we try running longer things.

00:04:06.000 --> 00:04:11.000
This won't tell us much--evaluating very simple, very fast evaluations.

00:04:11.000 --> 00:04:14.000
We're going to define a procedure.

