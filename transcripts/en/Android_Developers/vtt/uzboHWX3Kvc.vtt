WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.400
[MUSIC PLAYING]

00:00:02.400 --> 00:00:04.800
One of the most frequent
performance problems

00:00:04.800 --> 00:00:06.587
your users will
notice is how your app

00:00:06.587 --> 00:00:08.930
reacts when moving from a
great network connection

00:00:08.930 --> 00:00:10.240
to a bad one.

00:00:10.240 --> 00:00:11.430
My name is Colt McAnlis.

00:00:11.430 --> 00:00:14.200
And if your app isn't properly
adapting to network latency

00:00:14.200 --> 00:00:17.420
during the day, your users
will blame your app rather than

00:00:17.420 --> 00:00:18.426
their connection.

00:00:18.426 --> 00:00:19.950
The truth is that
the internet is

00:00:19.950 --> 00:00:24.040
made of a bunch of crazy moving
parts, or a series of tubes,

00:00:24.040 --> 00:00:25.520
if you're a senator.

00:00:25.520 --> 00:00:27.790
Anyhow, basically, requests
made from your phone

00:00:27.790 --> 00:00:29.810
have to hit a local
cell tower, which

00:00:29.810 --> 00:00:32.299
then gets routed to the
service provider's server.

00:00:32.299 --> 00:00:35.060
And then, it may hit a local
data proxy for that provider,

00:00:35.060 --> 00:00:36.652
before going out
onto the Internet

00:00:36.652 --> 00:00:39.140
and connecting the main data
server, which then needs

00:00:39.140 --> 00:00:41.000
to decode the response,
fetch the data,

00:00:41.000 --> 00:00:43.860
and then send that back,
only to return the data back

00:00:43.860 --> 00:00:46.970
to your cache's ISP server,
and then finally to the phone itself.

00:00:47.710 --> 00:00:49.530
Basically, it's a
lot of moving parts,

00:00:49.530 --> 00:00:51.570
and a bottleneck
can be anywhere.

00:00:51.570 --> 00:00:53.830
And since you don't
control all those stages,

00:00:53.830 --> 00:00:57.020
the best you can do is make sure
that your application properly

00:00:57.020 --> 00:01:00.390
adjusts to how it works based on
the connectivity of the device.

00:01:00.390 --> 00:01:02.810
This involves two
things. Number one,

00:01:02.810 --> 00:01:04.460
getting information
about the speed

00:01:04.460 --> 00:01:07.120
and performance of the
network, and number two,

00:01:07.120 --> 00:01:10.890
designing your app to respond
to changes in bad latency environments.

00:01:11.260 --> 00:01:14.680
Now, the first is easier
to do than you might think.

00:01:14.680 --> 00:01:16.430
Simply grab the
connection manager

00:01:16.430 --> 00:01:18.560
and determine if you're
on a mobile network.

00:01:18.560 --> 00:01:21.520
&gt;From there, a quick call
to grab the network subtype

00:01:21.520 --> 00:01:23.920
gives you an enumeration
for what type of network

00:01:23.920 --> 00:01:24.920
you're connected to.

00:01:24.920 --> 00:01:28.356
A handy lookup table then lets
you know what kind of network

00:01:28.356 --> 00:01:30.220
you're dealing with,
and what to expect

00:01:30.220 --> 00:01:32.750
as the best possible
bandwidths and latency.

00:01:32.750 --> 00:01:36.930
But in truth, that value gives
you the best case scenario.

00:01:36.930 --> 00:01:39.670
See, in the wild, you're going
to get much worse results.

00:01:39.670 --> 00:01:42.260
Even though your user
might be on an LTE network,

00:01:42.260 --> 00:01:44.890
there may be a problem
with a slow data server,

00:01:44.890 --> 00:01:46.960
resulting in maybe
double the time it

00:01:46.960 --> 00:01:49.850
would normally take on that
network for that request.

00:01:49.850 --> 00:01:52.070
So a more accurate,
although more complex,

00:01:52.070 --> 00:01:55.340
solution is to evaluate the
time it takes to grab responses

00:01:55.340 --> 00:01:56.310
from your network.

00:01:56.310 --> 00:01:58.150
For example, if
you know that all

00:01:58.150 --> 00:02:01.420
of your thumbnails in your list
view are 128 by 128 pixels,

00:02:01.420 --> 00:02:04.100
then you have a general
sense they should be about 1K

00:02:04.100 --> 00:02:06.600
in size, which should,
on the given network only

00:02:06.600 --> 00:02:08.629
take a certain amount
of time to download.

00:02:08.629 --> 00:02:11.536
You can then average the true
cost of these fetches over time

00:02:11.536 --> 00:02:14.056
to give you a better sense of
what the real network conditions are

00:02:14.056 --> 00:02:16.970
and how they are changing as
the user moves through their day.

00:02:16.970 --> 00:02:19.200
Once you get this
information, you then need to

00:02:19.200 --> 00:02:21.200
decide how to design
your app to handle it.

00:02:21.200 --> 00:02:24.575
As a simple approach, you can
define two thresholds and three

00:02:24.575 --> 00:02:26.170
buckets of classification.

00:02:26.170 --> 00:02:29.110
If your latency is less than,
say, a lower threshold of 60

00:02:29.110 --> 00:02:31.250
milliseconds to fetch
an asset, then your user

00:02:31.250 --> 00:02:32.450
is on a great connection.

00:02:32.450 --> 00:02:34.760
You may be able to be more
aggressive about the amount

00:02:34.760 --> 00:02:36.950
of data that you pre-fetch
and less of aggressive

00:02:36.950 --> 00:02:38.190
about things like caching.

00:02:38.200 --> 00:02:41.090
However, if it takes less
than the upper threshold,

00:02:41.090 --> 00:02:42.994
then you may not be
in the best spot.

00:02:42.994 --> 00:02:45.420
So you need to become more
aggressive about batching

00:02:45.420 --> 00:02:48.495
and caching, and take advantage
of how often you request data.

00:02:48.495 --> 00:02:50.330
And if they're above
the max threshold,

00:02:50.330 --> 00:02:53.240
well then, you should find ways
to defer requests until later,

00:02:53.240 --> 00:02:55.520
when there might be a
better network connection,

00:02:55.520 --> 00:02:57.440
or change the UI so
that not fetching all

00:02:57.440 --> 00:03:00.880
the thumbnail images isn't
such a huge, jarring problem.

00:03:00.880 --> 00:03:02.690
But the truth is,
that these thresholds

00:03:02.690 --> 00:03:03.955
won't work for every user.

00:03:03.955 --> 00:03:05.510
And in fact, you're
going to need

00:03:05.510 --> 00:03:08.420
to put a bit of elbow grease in
to find the correct thresholds

00:03:08.420 --> 00:03:11.560
for the 50th percentile, 90th
percentile, and 99th percentile

00:03:11.560 --> 00:03:14.240
of the connections that
your users are actually on,

00:03:14.240 --> 00:03:16.940
which is actually a
pretty large engineering

00:03:16.940 --> 00:03:19.870
project, but critically
important for your app

00:03:19.870 --> 00:03:23.429
to remain responsive and magical
in high latency environments.

00:03:23.429 --> 00:03:25.210
Now rather than
waiting for the users

00:03:25.210 --> 00:03:27.127
to focus on slow
connections to complain,

00:03:27.127 --> 00:03:29.770
it's better to start designing
and testing bad bandwidth

00:03:29.770 --> 00:03:31.300
on your app early.

00:03:31.300 --> 00:03:33.870
You can test how high latency
impacts your applications

00:03:33.870 --> 00:03:37.110
by throttling the bandwidth when
you're running the Android Emulator.

00:03:37.110 --> 00:03:39.040
Or you can check
out third party apps

00:03:39.040 --> 00:03:41.080
like AT&amp;T's Network Attenuator.

00:03:41.080 --> 00:03:44.160
In both cases, you can
see how your app responds

00:03:44.160 --> 00:03:46.930
when latency goes sky
high, which you should

00:03:46.930 --> 00:03:48.190
be doing with everything.

00:03:48.190 --> 00:03:51.020
Honestly, testing performance
on the slowest hardware, worst

00:03:51.020 --> 00:03:52.960
networks, and most
insane conditions,

00:03:52.960 --> 00:03:56.190
is the best way to ensure a
stable, consistent performance

00:03:56.190 --> 00:03:56.920
for your users.

00:03:56.920 --> 00:03:58.480
Of course, you'll need to watch
the rest of our

00:03:58.480 --> 00:03:59.900
Android Performance Pattern videos

00:03:59.900 --> 00:04:00.820
to see what to fix.

00:04:00.820 --> 00:04:01.990
And join our Google+ community

00:04:01.990 --> 00:04:03.231
to get advice from other developers

00:04:03.231 --> 00:04:04.400
in the same boat.

00:04:04.400 --> 00:04:06.100
Trust me, your users
will thank you.

00:04:06.100 --> 00:04:06.850
So keep calm.

00:04:06.850 --> 00:04:07.740
Profile your code.

00:04:07.740 --> 00:04:10.320
And always remember,
perf matters.

00:04:10.345 --> 00:04:16.131
[MUSIC PLAYING]

